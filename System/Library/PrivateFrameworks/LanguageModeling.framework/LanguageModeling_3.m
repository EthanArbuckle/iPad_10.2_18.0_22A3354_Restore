void sub_19C3C5688(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58,void *a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  char a67;
  char a68;
  void *a72;
  char a73;
  void *a74;
  void *a75;
  char a76;
  char a77;
  void *a78;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;

  sub_19C3C7D78(v84);
  sub_19C3C7D78(v83);
  sub_19C3C7D78(v82);
  sub_19C3C7D78(v81);
  sub_19C3C7D78(v80);
  sub_19C3C7D78(v79);
  sub_19C3C7D78(a9);
  sub_19C3C7D78(a10);
  sub_19C3C7D78(a11);
  sub_19C3C7D78(a12);
  sub_19C3C7D78(a13);
  sub_19C3C7D78(a14);
  sub_19C3C7D78(a15);
  sub_19C3C7D78(a16);
  sub_19C3C7D78(a17);
  sub_19C3C7D78(a18);
  sub_19C3C7D78(v78);
  sub_19C3C7D78((uint64_t)&STACK[0x1340]);
  sub_19C31BF28((uint64_t)&a28);
  sub_19C3C7DB0((uint64_t)&STACK[0x878]);
  sub_19C307B68(&a19);
  if (SLOBYTE(STACK[0x877]) < 0)
  {
    operator delete((void *)STACK[0x860]);
    if ((SLOBYTE(STACK[0x85F]) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((SLOBYTE(STACK[0x85F]) & 0x80000000) == 0)
  {
LABEL_3:
    if (SLOBYTE(STACK[0x847]) < 0)
      goto LABEL_4;
    goto LABEL_8;
  }
  operator delete((void *)STACK[0x848]);
  if (SLOBYTE(STACK[0x847]) < 0)
  {
LABEL_4:
    operator delete((void *)STACK[0x830]);
    if (a27 < 0)
    {
LABEL_9:
      operator delete(a22);
      if ((a38 & 0x80000000) == 0)
        goto LABEL_13;
LABEL_12:
      operator delete(a33);
LABEL_13:
      sub_19C31BF28((uint64_t)&a48);
      sub_19C3C7DB0((uint64_t)&STACK[0x8F0]);
      sub_19C307B68(&a39);
      if (SLOBYTE(STACK[0x8EF]) < 0)
      {
        operator delete((void *)STACK[0x8D8]);
        if ((SLOBYTE(STACK[0x8D7]) & 0x80000000) == 0)
          goto LABEL_15;
      }
      else if ((SLOBYTE(STACK[0x8D7]) & 0x80000000) == 0)
      {
LABEL_15:
        if (SLOBYTE(STACK[0x8BF]) < 0)
          goto LABEL_16;
        goto LABEL_21;
      }
      operator delete((void *)STACK[0x8C0]);
      if (SLOBYTE(STACK[0x8BF]) < 0)
      {
LABEL_16:
        operator delete((void *)STACK[0x8A8]);
        if ((a47 & 0x80000000) == 0)
          goto LABEL_17;
        goto LABEL_22;
      }
LABEL_21:
      if ((a47 & 0x80000000) == 0)
      {
LABEL_17:
        if ((a58 & 0x80000000) == 0)
          goto LABEL_24;
LABEL_23:
        operator delete(a53);
LABEL_24:
        sub_19C31BF28((uint64_t)&a68);
        sub_19C3C7DB0((uint64_t)&STACK[0x968]);
        sub_19C307B68(&a59);
        if (SLOBYTE(STACK[0x967]) < 0)
        {
          operator delete((void *)STACK[0x950]);
          if ((SLOBYTE(STACK[0x94F]) & 0x80000000) == 0)
            goto LABEL_26;
        }
        else if ((SLOBYTE(STACK[0x94F]) & 0x80000000) == 0)
        {
LABEL_26:
          if (SLOBYTE(STACK[0x937]) < 0)
            goto LABEL_27;
          goto LABEL_32;
        }
        operator delete((void *)STACK[0x938]);
        if (SLOBYTE(STACK[0x937]) < 0)
        {
LABEL_27:
          operator delete((void *)STACK[0x920]);
          if ((a67 & 0x80000000) == 0)
            goto LABEL_28;
          goto LABEL_33;
        }
LABEL_32:
        if ((a67 & 0x80000000) == 0)
        {
LABEL_28:
          if ((a73 & 0x80000000) == 0)
            goto LABEL_35;
LABEL_34:
          operator delete(a72);
LABEL_35:
          sub_19C31BF28((uint64_t)&a77);
          sub_19C3C7DB0((uint64_t)&STACK[0x9E0]);
          sub_19C307B68(&a74);
          if (SLOBYTE(STACK[0x9DF]) < 0)
          {
            operator delete((void *)STACK[0x9C8]);
            if ((SLOBYTE(STACK[0x9C7]) & 0x80000000) == 0)
              goto LABEL_37;
          }
          else if ((SLOBYTE(STACK[0x9C7]) & 0x80000000) == 0)
          {
LABEL_37:
            if (SLOBYTE(STACK[0x9AF]) < 0)
              goto LABEL_38;
            goto LABEL_43;
          }
          operator delete((void *)STACK[0x9B0]);
          if (SLOBYTE(STACK[0x9AF]) < 0)
          {
LABEL_38:
            operator delete((void *)STACK[0x998]);
            if ((a76 & 0x80000000) == 0)
              goto LABEL_39;
            goto LABEL_44;
          }
LABEL_43:
          if ((a76 & 0x80000000) == 0)
          {
LABEL_39:
            if ((SLOBYTE(STACK[0x20F]) & 0x80000000) == 0)
              goto LABEL_46;
LABEL_45:
            operator delete(a78);
LABEL_46:
            sub_19C31BF28((uint64_t)&STACK[0x240]);
            sub_19C3C7DB0((uint64_t)&STACK[0xA88]);
            sub_19C307B68((void **)&STACK[0x210]);
            if (SLOBYTE(STACK[0xA87]) < 0)
            {
              operator delete((void *)STACK[0xA70]);
              if ((SLOBYTE(STACK[0xA6F]) & 0x80000000) == 0)
                goto LABEL_48;
            }
            else if ((SLOBYTE(STACK[0xA6F]) & 0x80000000) == 0)
            {
LABEL_48:
              if (SLOBYTE(STACK[0xA57]) < 0)
                goto LABEL_49;
              goto LABEL_56;
            }
            operator delete((void *)STACK[0xA58]);
            if (SLOBYTE(STACK[0xA57]) < 0)
            {
LABEL_49:
              operator delete((void *)STACK[0xA40]);
              if ((SLOBYTE(STACK[0xA3F]) & 0x80000000) == 0)
                goto LABEL_50;
              goto LABEL_57;
            }
LABEL_56:
            if ((SLOBYTE(STACK[0xA3F]) & 0x80000000) == 0)
            {
LABEL_50:
              if (SLOBYTE(STACK[0xA27]) < 0)
                goto LABEL_51;
              goto LABEL_58;
            }
LABEL_57:
            operator delete((void *)STACK[0xA28]);
            if (SLOBYTE(STACK[0xA27]) < 0)
            {
LABEL_51:
              operator delete((void *)STACK[0xA10]);
              if ((SLOBYTE(STACK[0x23F]) & 0x80000000) == 0)
                goto LABEL_52;
              goto LABEL_59;
            }
LABEL_58:
            if ((SLOBYTE(STACK[0x23F]) & 0x80000000) == 0)
            {
LABEL_52:
              if ((SLOBYTE(STACK[0x27F]) & 0x80000000) == 0)
                goto LABEL_61;
LABEL_60:
              operator delete((void *)STACK[0x268]);
LABEL_61:
              sub_19C31BF28((uint64_t)&STACK[0x2B0]);
              sub_19C3C7DB0((uint64_t)&STACK[0xB30]);
              sub_19C307B68((void **)&STACK[0x280]);
              if (SLOBYTE(STACK[0xB2F]) < 0)
              {
                operator delete((void *)STACK[0xB18]);
                if ((SLOBYTE(STACK[0xB17]) & 0x80000000) == 0)
                  goto LABEL_63;
              }
              else if ((SLOBYTE(STACK[0xB17]) & 0x80000000) == 0)
              {
LABEL_63:
                if (SLOBYTE(STACK[0xAFF]) < 0)
                  goto LABEL_64;
                goto LABEL_71;
              }
              operator delete((void *)STACK[0xB00]);
              if (SLOBYTE(STACK[0xAFF]) < 0)
              {
LABEL_64:
                operator delete((void *)STACK[0xAE8]);
                if ((SLOBYTE(STACK[0xAE7]) & 0x80000000) == 0)
                  goto LABEL_65;
                goto LABEL_72;
              }
LABEL_71:
              if ((SLOBYTE(STACK[0xAE7]) & 0x80000000) == 0)
              {
LABEL_65:
                if (SLOBYTE(STACK[0xACF]) < 0)
                  goto LABEL_66;
                goto LABEL_73;
              }
LABEL_72:
              operator delete((void *)STACK[0xAD0]);
              if (SLOBYTE(STACK[0xACF]) < 0)
              {
LABEL_66:
                operator delete((void *)STACK[0xAB8]);
                if ((SLOBYTE(STACK[0x2AF]) & 0x80000000) == 0)
                  goto LABEL_67;
                goto LABEL_74;
              }
LABEL_73:
              if ((SLOBYTE(STACK[0x2AF]) & 0x80000000) == 0)
              {
LABEL_67:
                if ((SLOBYTE(STACK[0x2EF]) & 0x80000000) == 0)
                  goto LABEL_76;
LABEL_75:
                operator delete((void *)STACK[0x2D8]);
LABEL_76:
                sub_19C31BF28((uint64_t)&STACK[0x320]);
                sub_19C3C7DB0((uint64_t)&STACK[0xBD8]);
                sub_19C307B68((void **)&STACK[0x2F0]);
                if (SLOBYTE(STACK[0xBD7]) < 0)
                {
                  operator delete((void *)STACK[0xBC0]);
                  if ((SLOBYTE(STACK[0xBBF]) & 0x80000000) == 0)
                    goto LABEL_78;
                }
                else if ((SLOBYTE(STACK[0xBBF]) & 0x80000000) == 0)
                {
LABEL_78:
                  if (SLOBYTE(STACK[0xBA7]) < 0)
                    goto LABEL_79;
                  goto LABEL_86;
                }
                operator delete((void *)STACK[0xBA8]);
                if (SLOBYTE(STACK[0xBA7]) < 0)
                {
LABEL_79:
                  operator delete((void *)STACK[0xB90]);
                  if ((SLOBYTE(STACK[0xB8F]) & 0x80000000) == 0)
                    goto LABEL_80;
                  goto LABEL_87;
                }
LABEL_86:
                if ((SLOBYTE(STACK[0xB8F]) & 0x80000000) == 0)
                {
LABEL_80:
                  if (SLOBYTE(STACK[0xB77]) < 0)
                    goto LABEL_81;
                  goto LABEL_88;
                }
LABEL_87:
                operator delete((void *)STACK[0xB78]);
                if (SLOBYTE(STACK[0xB77]) < 0)
                {
LABEL_81:
                  operator delete((void *)STACK[0xB60]);
                  if ((SLOBYTE(STACK[0x31F]) & 0x80000000) == 0)
                    goto LABEL_82;
                  goto LABEL_89;
                }
LABEL_88:
                if ((SLOBYTE(STACK[0x31F]) & 0x80000000) == 0)
                {
LABEL_82:
                  if ((SLOBYTE(STACK[0x35F]) & 0x80000000) == 0)
                    goto LABEL_91;
LABEL_90:
                  operator delete((void *)STACK[0x348]);
LABEL_91:
                  sub_19C31BF28((uint64_t)&STACK[0x390]);
                  sub_19C3C7DB0((uint64_t)&STACK[0xC80]);
                  sub_19C307B68((void **)&STACK[0x360]);
                  if (SLOBYTE(STACK[0xC7F]) < 0)
                  {
                    operator delete((void *)STACK[0xC68]);
                    if ((SLOBYTE(STACK[0xC67]) & 0x80000000) == 0)
                      goto LABEL_93;
                  }
                  else if ((SLOBYTE(STACK[0xC67]) & 0x80000000) == 0)
                  {
LABEL_93:
                    if (SLOBYTE(STACK[0xC4F]) < 0)
                      goto LABEL_94;
                    goto LABEL_101;
                  }
                  operator delete((void *)STACK[0xC50]);
                  if (SLOBYTE(STACK[0xC4F]) < 0)
                  {
LABEL_94:
                    operator delete((void *)STACK[0xC38]);
                    if ((SLOBYTE(STACK[0xC37]) & 0x80000000) == 0)
                      goto LABEL_95;
                    goto LABEL_102;
                  }
LABEL_101:
                  if ((SLOBYTE(STACK[0xC37]) & 0x80000000) == 0)
                  {
LABEL_95:
                    if (SLOBYTE(STACK[0xC1F]) < 0)
                      goto LABEL_96;
                    goto LABEL_103;
                  }
LABEL_102:
                  operator delete((void *)STACK[0xC20]);
                  if (SLOBYTE(STACK[0xC1F]) < 0)
                  {
LABEL_96:
                    operator delete((void *)STACK[0xC08]);
                    if ((SLOBYTE(STACK[0x38F]) & 0x80000000) == 0)
                      goto LABEL_97;
                    goto LABEL_104;
                  }
LABEL_103:
                  if ((SLOBYTE(STACK[0x38F]) & 0x80000000) == 0)
                  {
LABEL_97:
                    if ((SLOBYTE(STACK[0x3CF]) & 0x80000000) == 0)
                      goto LABEL_106;
LABEL_105:
                    operator delete((void *)STACK[0x3B8]);
LABEL_106:
                    sub_19C31BF28((uint64_t)&STACK[0x400]);
                    sub_19C3C7DB0((uint64_t)&STACK[0xD28]);
                    sub_19C307B68((void **)&STACK[0x3D0]);
                    if (SLOBYTE(STACK[0xD27]) < 0)
                    {
                      operator delete((void *)STACK[0xD10]);
                      if ((SLOBYTE(STACK[0xD0F]) & 0x80000000) == 0)
                        goto LABEL_108;
                    }
                    else if ((SLOBYTE(STACK[0xD0F]) & 0x80000000) == 0)
                    {
LABEL_108:
                      if (SLOBYTE(STACK[0xCF7]) < 0)
                        goto LABEL_109;
                      goto LABEL_116;
                    }
                    operator delete((void *)STACK[0xCF8]);
                    if (SLOBYTE(STACK[0xCF7]) < 0)
                    {
LABEL_109:
                      operator delete((void *)STACK[0xCE0]);
                      if ((SLOBYTE(STACK[0xCDF]) & 0x80000000) == 0)
                        goto LABEL_110;
                      goto LABEL_117;
                    }
LABEL_116:
                    if ((SLOBYTE(STACK[0xCDF]) & 0x80000000) == 0)
                    {
LABEL_110:
                      if (SLOBYTE(STACK[0xCC7]) < 0)
                        goto LABEL_111;
                      goto LABEL_118;
                    }
LABEL_117:
                    operator delete((void *)STACK[0xCC8]);
                    if (SLOBYTE(STACK[0xCC7]) < 0)
                    {
LABEL_111:
                      operator delete((void *)STACK[0xCB0]);
                      if ((SLOBYTE(STACK[0x3FF]) & 0x80000000) == 0)
                        goto LABEL_112;
                      goto LABEL_119;
                    }
LABEL_118:
                    if ((SLOBYTE(STACK[0x3FF]) & 0x80000000) == 0)
                    {
LABEL_112:
                      if ((SLOBYTE(STACK[0x43F]) & 0x80000000) == 0)
                        goto LABEL_121;
LABEL_120:
                      operator delete((void *)STACK[0x428]);
LABEL_121:
                      sub_19C31BF28((uint64_t)&STACK[0x470]);
                      sub_19C3C7DB0((uint64_t)&STACK[0xDD0]);
                      sub_19C307B68((void **)&STACK[0x440]);
                      if (SLOBYTE(STACK[0xDCF]) < 0)
                      {
                        operator delete((void *)STACK[0xDB8]);
                        if ((SLOBYTE(STACK[0xDB7]) & 0x80000000) == 0)
                          goto LABEL_123;
                      }
                      else if ((SLOBYTE(STACK[0xDB7]) & 0x80000000) == 0)
                      {
LABEL_123:
                        if (SLOBYTE(STACK[0xD9F]) < 0)
                          goto LABEL_124;
                        goto LABEL_131;
                      }
                      operator delete((void *)STACK[0xDA0]);
                      if (SLOBYTE(STACK[0xD9F]) < 0)
                      {
LABEL_124:
                        operator delete((void *)STACK[0xD88]);
                        if ((SLOBYTE(STACK[0xD87]) & 0x80000000) == 0)
                          goto LABEL_125;
                        goto LABEL_132;
                      }
LABEL_131:
                      if ((SLOBYTE(STACK[0xD87]) & 0x80000000) == 0)
                      {
LABEL_125:
                        if (SLOBYTE(STACK[0xD6F]) < 0)
                          goto LABEL_126;
                        goto LABEL_133;
                      }
LABEL_132:
                      operator delete((void *)STACK[0xD70]);
                      if (SLOBYTE(STACK[0xD6F]) < 0)
                      {
LABEL_126:
                        operator delete((void *)STACK[0xD58]);
                        if ((SLOBYTE(STACK[0x46F]) & 0x80000000) == 0)
                          goto LABEL_127;
                        goto LABEL_134;
                      }
LABEL_133:
                      if ((SLOBYTE(STACK[0x46F]) & 0x80000000) == 0)
                      {
LABEL_127:
                        if ((SLOBYTE(STACK[0x4AF]) & 0x80000000) == 0)
                          goto LABEL_136;
LABEL_135:
                        operator delete((void *)STACK[0x498]);
LABEL_136:
                        sub_19C31BF28((uint64_t)&STACK[0x4E0]);
                        sub_19C3C7DB0((uint64_t)&STACK[0xE78]);
                        sub_19C307B68((void **)&STACK[0x4B0]);
                        if (SLOBYTE(STACK[0xE77]) < 0)
                        {
                          operator delete((void *)STACK[0xE60]);
                          if ((SLOBYTE(STACK[0xE5F]) & 0x80000000) == 0)
                            goto LABEL_138;
                        }
                        else if ((SLOBYTE(STACK[0xE5F]) & 0x80000000) == 0)
                        {
LABEL_138:
                          if (SLOBYTE(STACK[0xE47]) < 0)
                            goto LABEL_139;
                          goto LABEL_146;
                        }
                        operator delete((void *)STACK[0xE48]);
                        if (SLOBYTE(STACK[0xE47]) < 0)
                        {
LABEL_139:
                          operator delete((void *)STACK[0xE30]);
                          if ((SLOBYTE(STACK[0xE2F]) & 0x80000000) == 0)
                            goto LABEL_140;
                          goto LABEL_147;
                        }
LABEL_146:
                        if ((SLOBYTE(STACK[0xE2F]) & 0x80000000) == 0)
                        {
LABEL_140:
                          if (SLOBYTE(STACK[0xE17]) < 0)
                            goto LABEL_141;
                          goto LABEL_148;
                        }
LABEL_147:
                        operator delete((void *)STACK[0xE18]);
                        if (SLOBYTE(STACK[0xE17]) < 0)
                        {
LABEL_141:
                          operator delete((void *)STACK[0xE00]);
                          if ((SLOBYTE(STACK[0x4DF]) & 0x80000000) == 0)
                            goto LABEL_142;
                          goto LABEL_149;
                        }
LABEL_148:
                        if ((SLOBYTE(STACK[0x4DF]) & 0x80000000) == 0)
                        {
LABEL_142:
                          if ((SLOBYTE(STACK[0x51F]) & 0x80000000) == 0)
                            goto LABEL_151;
LABEL_150:
                          operator delete((void *)STACK[0x508]);
LABEL_151:
                          sub_19C31BF28((uint64_t)&STACK[0x550]);
                          sub_19C3C7DB0((uint64_t)&STACK[0xF20]);
                          sub_19C307B68((void **)&STACK[0x520]);
                          if (SLOBYTE(STACK[0xF1F]) < 0)
                          {
                            operator delete((void *)STACK[0xF08]);
                            if ((SLOBYTE(STACK[0xF07]) & 0x80000000) == 0)
                              goto LABEL_153;
                          }
                          else if ((SLOBYTE(STACK[0xF07]) & 0x80000000) == 0)
                          {
LABEL_153:
                            if (SLOBYTE(STACK[0xEEF]) < 0)
                              goto LABEL_154;
                            goto LABEL_161;
                          }
                          operator delete((void *)STACK[0xEF0]);
                          if (SLOBYTE(STACK[0xEEF]) < 0)
                          {
LABEL_154:
                            operator delete((void *)STACK[0xED8]);
                            if ((SLOBYTE(STACK[0xED7]) & 0x80000000) == 0)
                              goto LABEL_155;
                            goto LABEL_162;
                          }
LABEL_161:
                          if ((SLOBYTE(STACK[0xED7]) & 0x80000000) == 0)
                          {
LABEL_155:
                            if (SLOBYTE(STACK[0xEBF]) < 0)
                              goto LABEL_156;
                            goto LABEL_163;
                          }
LABEL_162:
                          operator delete((void *)STACK[0xEC0]);
                          if (SLOBYTE(STACK[0xEBF]) < 0)
                          {
LABEL_156:
                            operator delete((void *)STACK[0xEA8]);
                            if ((SLOBYTE(STACK[0x54F]) & 0x80000000) == 0)
                              goto LABEL_157;
                            goto LABEL_164;
                          }
LABEL_163:
                          if ((SLOBYTE(STACK[0x54F]) & 0x80000000) == 0)
                          {
LABEL_157:
                            if ((SLOBYTE(STACK[0x58F]) & 0x80000000) == 0)
                              goto LABEL_166;
LABEL_165:
                            operator delete((void *)STACK[0x578]);
LABEL_166:
                            sub_19C31BF28((uint64_t)&STACK[0x5C0]);
                            sub_19C3C7DB0((uint64_t)&STACK[0xFC8]);
                            sub_19C307B68((void **)&STACK[0x590]);
                            if (SLOBYTE(STACK[0xFC7]) < 0)
                            {
                              operator delete((void *)STACK[0xFB0]);
                              if ((SLOBYTE(STACK[0xFAF]) & 0x80000000) == 0)
                                goto LABEL_168;
                            }
                            else if ((SLOBYTE(STACK[0xFAF]) & 0x80000000) == 0)
                            {
LABEL_168:
                              if (SLOBYTE(STACK[0xF97]) < 0)
                                goto LABEL_169;
                              goto LABEL_176;
                            }
                            operator delete((void *)STACK[0xF98]);
                            if (SLOBYTE(STACK[0xF97]) < 0)
                            {
LABEL_169:
                              operator delete((void *)STACK[0xF80]);
                              if ((SLOBYTE(STACK[0xF7F]) & 0x80000000) == 0)
                                goto LABEL_170;
                              goto LABEL_177;
                            }
LABEL_176:
                            if ((SLOBYTE(STACK[0xF7F]) & 0x80000000) == 0)
                            {
LABEL_170:
                              if (SLOBYTE(STACK[0xF67]) < 0)
                                goto LABEL_171;
                              goto LABEL_178;
                            }
LABEL_177:
                            operator delete((void *)STACK[0xF68]);
                            if (SLOBYTE(STACK[0xF67]) < 0)
                            {
LABEL_171:
                              operator delete((void *)STACK[0xF50]);
                              if ((SLOBYTE(STACK[0x5BF]) & 0x80000000) == 0)
                                goto LABEL_172;
                              goto LABEL_179;
                            }
LABEL_178:
                            if ((SLOBYTE(STACK[0x5BF]) & 0x80000000) == 0)
                            {
LABEL_172:
                              if ((SLOBYTE(STACK[0x5FF]) & 0x80000000) == 0)
                                goto LABEL_181;
LABEL_180:
                              operator delete((void *)STACK[0x5E8]);
LABEL_181:
                              sub_19C31BF28((uint64_t)&STACK[0x630]);
                              sub_19C3C7DB0((uint64_t)&STACK[0x1070]);
                              sub_19C307B68((void **)&STACK[0x600]);
                              if (SLOBYTE(STACK[0x106F]) < 0)
                                operator delete((void *)STACK[0x1058]);
                              if (SLOBYTE(STACK[0x1057]) < 0)
                                operator delete((void *)STACK[0x1040]);
                              if (SLOBYTE(STACK[0x103F]) < 0)
                                operator delete((void *)STACK[0x1028]);
                              if (SLOBYTE(STACK[0x1027]) < 0)
                                operator delete((void *)STACK[0x1010]);
                              if (SLOBYTE(STACK[0x100F]) < 0)
                              {
                                operator delete((void *)STACK[0xFF8]);
                                if ((SLOBYTE(STACK[0x62F]) & 0x80000000) == 0)
                                  goto LABEL_191;
                              }
                              else if ((SLOBYTE(STACK[0x62F]) & 0x80000000) == 0)
                              {
LABEL_191:
                                if ((SLOBYTE(STACK[0x66F]) & 0x80000000) == 0)
                                  goto LABEL_196;
LABEL_195:
                                operator delete((void *)STACK[0x658]);
LABEL_196:
                                sub_19C31BF28((uint64_t)&STACK[0x6A0]);
                                sub_19C3C7DB0((uint64_t)&STACK[0x1118]);
                                sub_19C307B68((void **)&STACK[0x670]);
                                if (SLOBYTE(STACK[0x1117]) < 0)
                                  operator delete((void *)STACK[0x1100]);
                                if (SLOBYTE(STACK[0x10FF]) < 0)
                                  operator delete((void *)STACK[0x10E8]);
                                if (SLOBYTE(STACK[0x10E7]) < 0)
                                  operator delete((void *)STACK[0x10D0]);
                                if (SLOBYTE(STACK[0x10CF]) < 0)
                                  operator delete((void *)STACK[0x10B8]);
                                if (SLOBYTE(STACK[0x10B7]) < 0)
                                {
                                  operator delete((void *)STACK[0x10A0]);
                                  if ((SLOBYTE(STACK[0x69F]) & 0x80000000) == 0)
                                    goto LABEL_206;
                                }
                                else if ((SLOBYTE(STACK[0x69F]) & 0x80000000) == 0)
                                {
LABEL_206:
                                  if ((SLOBYTE(STACK[0x6DF]) & 0x80000000) == 0)
                                    goto LABEL_211;
LABEL_210:
                                  operator delete((void *)STACK[0x6C8]);
LABEL_211:
                                  sub_19C31BF28((uint64_t)&STACK[0x710]);
                                  sub_19C3C7DB0((uint64_t)&STACK[0x11C0]);
                                  sub_19C307B68((void **)&STACK[0x6E0]);
                                  if (SLOBYTE(STACK[0x11BF]) < 0)
                                    operator delete((void *)STACK[0x11A8]);
                                  if (SLOBYTE(STACK[0x11A7]) < 0)
                                    operator delete((void *)STACK[0x1190]);
                                  if (SLOBYTE(STACK[0x118F]) < 0)
                                    operator delete((void *)STACK[0x1178]);
                                  if (SLOBYTE(STACK[0x1177]) < 0)
                                    operator delete((void *)STACK[0x1160]);
                                  if (SLOBYTE(STACK[0x115F]) < 0)
                                  {
                                    operator delete((void *)STACK[0x1148]);
                                    if ((SLOBYTE(STACK[0x70F]) & 0x80000000) == 0)
                                      goto LABEL_221;
                                  }
                                  else if ((SLOBYTE(STACK[0x70F]) & 0x80000000) == 0)
                                  {
LABEL_221:
                                    if ((SLOBYTE(STACK[0x74F]) & 0x80000000) == 0)
                                      goto LABEL_226;
LABEL_225:
                                    operator delete((void *)STACK[0x738]);
LABEL_226:
                                    sub_19C31BF28((uint64_t)&STACK[0x780]);
                                    sub_19C3C7DB0((uint64_t)&STACK[0x1268]);
                                    sub_19C307B68((void **)&STACK[0x750]);
                                    if (SLOBYTE(STACK[0x1267]) < 0)
                                      operator delete((void *)STACK[0x1250]);
                                    if (SLOBYTE(STACK[0x124F]) < 0)
                                      operator delete((void *)STACK[0x1238]);
                                    if (SLOBYTE(STACK[0x1237]) < 0)
                                      operator delete((void *)STACK[0x1220]);
                                    if (SLOBYTE(STACK[0x121F]) < 0)
                                      operator delete((void *)STACK[0x1208]);
                                    if (SLOBYTE(STACK[0x1207]) < 0)
                                    {
                                      operator delete((void *)STACK[0x11F0]);
                                      if ((SLOBYTE(STACK[0x77F]) & 0x80000000) == 0)
                                        goto LABEL_236;
                                    }
                                    else if ((SLOBYTE(STACK[0x77F]) & 0x80000000) == 0)
                                    {
LABEL_236:
                                      if ((SLOBYTE(STACK[0x7BF]) & 0x80000000) == 0)
                                        goto LABEL_241;
LABEL_240:
                                      operator delete((void *)STACK[0x7A8]);
LABEL_241:
                                      sub_19C31BF28((uint64_t)&STACK[0x7F0]);
                                      sub_19C3C7DB0((uint64_t)&STACK[0x1310]);
                                      sub_19C307B68((void **)&STACK[0x7C0]);
                                      if (SLOBYTE(STACK[0x130F]) < 0)
                                        operator delete((void *)STACK[0x12F8]);
                                      if (SLOBYTE(STACK[0x12F7]) < 0)
                                        operator delete((void *)STACK[0x12E0]);
                                      if (SLOBYTE(STACK[0x12DF]) < 0)
                                        operator delete((void *)STACK[0x12C8]);
                                      if (SLOBYTE(STACK[0x12C7]) < 0)
                                        operator delete((void *)STACK[0x12B0]);
                                      if (SLOBYTE(STACK[0x12AF]) < 0)
                                      {
                                        operator delete((void *)STACK[0x1298]);
                                        if ((SLOBYTE(STACK[0x7EF]) & 0x80000000) == 0)
                                          goto LABEL_251;
                                      }
                                      else if ((SLOBYTE(STACK[0x7EF]) & 0x80000000) == 0)
                                      {
LABEL_251:
                                        if ((SLOBYTE(STACK[0x82F]) & 0x80000000) == 0)
                                          goto LABEL_253;
                                        goto LABEL_252;
                                      }
                                      operator delete((void *)STACK[0x7D8]);
                                      if ((SLOBYTE(STACK[0x82F]) & 0x80000000) == 0)
                                      {
LABEL_253:
                                        __cxa_guard_abort(&qword_1EE41C480);
                                        _Unwind_Resume(a1);
                                      }
LABEL_252:
                                      operator delete((void *)STACK[0x818]);
                                      goto LABEL_253;
                                    }
                                    operator delete((void *)STACK[0x768]);
                                    if ((SLOBYTE(STACK[0x7BF]) & 0x80000000) == 0)
                                      goto LABEL_241;
                                    goto LABEL_240;
                                  }
                                  operator delete((void *)STACK[0x6F8]);
                                  if ((SLOBYTE(STACK[0x74F]) & 0x80000000) == 0)
                                    goto LABEL_226;
                                  goto LABEL_225;
                                }
                                operator delete((void *)STACK[0x688]);
                                if ((SLOBYTE(STACK[0x6DF]) & 0x80000000) == 0)
                                  goto LABEL_211;
                                goto LABEL_210;
                              }
                              operator delete((void *)STACK[0x618]);
                              if ((SLOBYTE(STACK[0x66F]) & 0x80000000) == 0)
                                goto LABEL_196;
                              goto LABEL_195;
                            }
LABEL_179:
                            operator delete((void *)STACK[0x5A8]);
                            if ((SLOBYTE(STACK[0x5FF]) & 0x80000000) == 0)
                              goto LABEL_181;
                            goto LABEL_180;
                          }
LABEL_164:
                          operator delete((void *)STACK[0x538]);
                          if ((SLOBYTE(STACK[0x58F]) & 0x80000000) == 0)
                            goto LABEL_166;
                          goto LABEL_165;
                        }
LABEL_149:
                        operator delete((void *)STACK[0x4C8]);
                        if ((SLOBYTE(STACK[0x51F]) & 0x80000000) == 0)
                          goto LABEL_151;
                        goto LABEL_150;
                      }
LABEL_134:
                      operator delete((void *)STACK[0x458]);
                      if ((SLOBYTE(STACK[0x4AF]) & 0x80000000) == 0)
                        goto LABEL_136;
                      goto LABEL_135;
                    }
LABEL_119:
                    operator delete((void *)STACK[0x3E8]);
                    if ((SLOBYTE(STACK[0x43F]) & 0x80000000) == 0)
                      goto LABEL_121;
                    goto LABEL_120;
                  }
LABEL_104:
                  operator delete((void *)STACK[0x378]);
                  if ((SLOBYTE(STACK[0x3CF]) & 0x80000000) == 0)
                    goto LABEL_106;
                  goto LABEL_105;
                }
LABEL_89:
                operator delete((void *)STACK[0x308]);
                if ((SLOBYTE(STACK[0x35F]) & 0x80000000) == 0)
                  goto LABEL_91;
                goto LABEL_90;
              }
LABEL_74:
              operator delete((void *)STACK[0x298]);
              if ((SLOBYTE(STACK[0x2EF]) & 0x80000000) == 0)
                goto LABEL_76;
              goto LABEL_75;
            }
LABEL_59:
            operator delete((void *)STACK[0x228]);
            if ((SLOBYTE(STACK[0x27F]) & 0x80000000) == 0)
              goto LABEL_61;
            goto LABEL_60;
          }
LABEL_44:
          operator delete(a75);
          if ((SLOBYTE(STACK[0x20F]) & 0x80000000) == 0)
            goto LABEL_46;
          goto LABEL_45;
        }
LABEL_33:
        operator delete(a62);
        if ((a73 & 0x80000000) == 0)
          goto LABEL_35;
        goto LABEL_34;
      }
LABEL_22:
      operator delete(a42);
      if ((a58 & 0x80000000) == 0)
        goto LABEL_24;
      goto LABEL_23;
    }
LABEL_11:
    if ((a38 & 0x80000000) == 0)
      goto LABEL_13;
    goto LABEL_12;
  }
LABEL_8:
  if (a27 < 0)
    goto LABEL_9;
  goto LABEL_11;
}

void sub_19C3C6928()
{
  if (SLOBYTE(STACK[0x5BF]) < 0)
    JUMPOUT(0x19C3C6530);
  JUMPOUT(0x19C3C6484);
}

void sub_19C3C693C()
{
  if ((SLOBYTE(STACK[0x5FF]) & 0x80000000) == 0)
    JUMPOUT(0x19C3C6548);
  JUMPOUT(0x19C3C6540);
}

void sub_19C3C6950()
{
  JUMPOUT(0x19C3C6548);
}

void sub_19C3C695C()
{
  JUMPOUT(0x19C3C6550);
}

void sub_19C3C6968()
{
  JUMPOUT(0x19C3C6558);
}

void sub_19C3C6974()
{
  JUMPOUT(0x19C3C6564);
}

void sub_19C3C6980()
{
  JUMPOUT(0x19C3C656CLL);
}

void sub_19C3C698C()
{
  if (SLOBYTE(STACK[0x62F]) < 0)
    JUMPOUT(0x19C3C65ECLL);
  JUMPOUT(0x19C3C65D8);
}

void sub_19C3C69A0()
{
  if ((SLOBYTE(STACK[0x66F]) & 0x80000000) == 0)
    JUMPOUT(0x19C3C6604);
  JUMPOUT(0x19C3C65FCLL);
}

void sub_19C3C69B4()
{
  JUMPOUT(0x19C3C6604);
}

void sub_19C3C69C0()
{
  JUMPOUT(0x19C3C660CLL);
}

void sub_19C3C69CC()
{
  JUMPOUT(0x19C3C6614);
}

void sub_19C3C69D8()
{
  JUMPOUT(0x19C3C6620);
}

void sub_19C3C69E4()
{
  JUMPOUT(0x19C3C6628);
}

void sub_19C3C69F0()
{
  if (SLOBYTE(STACK[0x69F]) < 0)
    JUMPOUT(0x19C3C66A8);
  JUMPOUT(0x19C3C6694);
}

void sub_19C3C6A04()
{
  if ((SLOBYTE(STACK[0x6DF]) & 0x80000000) == 0)
    JUMPOUT(0x19C3C66C0);
  JUMPOUT(0x19C3C66B8);
}

void sub_19C3C6A18()
{
  JUMPOUT(0x19C3C66C0);
}

void sub_19C3C6A24()
{
  JUMPOUT(0x19C3C66C8);
}

void sub_19C3C6A30()
{
  JUMPOUT(0x19C3C66D0);
}

void sub_19C3C6A3C()
{
  JUMPOUT(0x19C3C66DCLL);
}

void sub_19C3C6A48()
{
  JUMPOUT(0x19C3C66E4);
}

void sub_19C3C6A54()
{
  if (SLOBYTE(STACK[0x70F]) < 0)
    JUMPOUT(0x19C3C6764);
  JUMPOUT(0x19C3C6750);
}

void sub_19C3C6A68()
{
  if ((SLOBYTE(STACK[0x74F]) & 0x80000000) == 0)
    JUMPOUT(0x19C3C677CLL);
  JUMPOUT(0x19C3C6774);
}

void sub_19C3C6A7C()
{
  JUMPOUT(0x19C3C677CLL);
}

void sub_19C3C6A88()
{
  JUMPOUT(0x19C3C6780);
}

void sub_19C3C6A94()
{
  JUMPOUT(0x19C3C6788);
}

void sub_19C3C6AA0()
{
  JUMPOUT(0x19C3C6794);
}

void sub_19C3C6AAC()
{
  JUMPOUT(0x19C3C679CLL);
}

void sub_19C3C6AB8()
{
  if (SLOBYTE(STACK[0x77F]) < 0)
    JUMPOUT(0x19C3C681CLL);
  JUMPOUT(0x19C3C6808);
}

void sub_19C3C6ACC()
{
  if ((SLOBYTE(STACK[0x7BF]) & 0x80000000) == 0)
    JUMPOUT(0x19C3C6834);
  JUMPOUT(0x19C3C682CLL);
}

void sub_19C3C6AE0()
{
  JUMPOUT(0x19C3C6834);
}

void sub_19C3C6AEC()
{
  JUMPOUT(0x19C3C6834);
}

void sub_19C3C6B00()
{
  JUMPOUT(0x19C3C683CLL);
}

void sub_19C3C6B14()
{
  JUMPOUT(0x19C3C6848);
}

void sub_19C3C6B28()
{
  JUMPOUT(0x19C3C6850);
}

void sub_19C3C6B3C()
{
  if (SLOBYTE(STACK[0x7EF]) < 0)
    JUMPOUT(0x19C3C6914);
  JUMPOUT(0x19C3C68BCLL);
}

void sub_19C3C6B58()
{
  if ((SLOBYTE(STACK[0x82F]) & 0x80000000) == 0)
    JUMPOUT(0x19C3C68CCLL);
  JUMPOUT(0x19C3C68C4);
}

void sub_19C3C6B74()
{
  JUMPOUT(0x19C3C68F8);
}

void sub_19C3C6B7C()
{
  unint64_t *v0;

  while (1)
  {
    if (*((char *)v0 - 1) < 0)
      operator delete((void *)*(v0 - 3));
    v0 -= 3;
    if (v0 == &STACK[0x830])
      JUMPOUT(0x19C3C57D8);
  }
}

void sub_19C3C6BA8()
{
  unint64_t *v0;

  while (1)
  {
    if (*((char *)v0 - 1) < 0)
      operator delete((void *)*(v0 - 3));
    v0 -= 3;
    if (v0 == &STACK[0x8A8])
      JUMPOUT(0x19C3C5934);
  }
}

void sub_19C3C6BD4()
{
  unint64_t *v0;

  while (1)
  {
    if (*((char *)v0 - 1) < 0)
      operator delete((void *)*(v0 - 3));
    v0 -= 3;
    if (v0 == &STACK[0x920])
      JUMPOUT(0x19C3C5A2CLL);
  }
}

void sub_19C3C6C00()
{
  unint64_t *v0;

  while (1)
  {
    if (*((char *)v0 - 1) < 0)
      operator delete((void *)*(v0 - 3));
    v0 -= 3;
    if (v0 == &STACK[0x998])
      JUMPOUT(0x19C3C5B3CLL);
  }
}

void sub_19C3C6C2C()
{
  unint64_t *v0;

  while (1)
  {
    if (*((char *)v0 - 1) < 0)
      operator delete((void *)*(v0 - 3));
    v0 -= 3;
    if (v0 == &STACK[0xA10])
      JUMPOUT(0x19C3C5C64);
  }
}

void sub_19C3C6C58()
{
  unint64_t *v0;

  while (1)
  {
    if (*((char *)v0 - 1) < 0)
      operator delete((void *)*(v0 - 3));
    v0 -= 3;
    if (v0 == &STACK[0xAB8])
      JUMPOUT(0x19C3C5D8CLL);
  }
}

void sub_19C3C6C84()
{
  unint64_t *v0;

  while (1)
  {
    if (*((char *)v0 - 1) < 0)
      operator delete((void *)*(v0 - 3));
    v0 -= 3;
    if (v0 == &STACK[0xB60])
      JUMPOUT(0x19C3C5EB8);
  }
}

void sub_19C3C6CB0()
{
  unint64_t *v0;

  while (1)
  {
    if (*((char *)v0 - 1) < 0)
      operator delete((void *)*(v0 - 3));
    v0 -= 3;
    if (v0 == &STACK[0xC08])
      JUMPOUT(0x19C3C5FE4);
  }
}

void sub_19C3C6CDC()
{
  unint64_t *v0;

  while (1)
  {
    if (*((char *)v0 - 1) < 0)
      operator delete((void *)*(v0 - 3));
    v0 -= 3;
    if (v0 == &STACK[0xCB0])
      JUMPOUT(0x19C3C6110);
  }
}

void sub_19C3C6D08()
{
  unint64_t *v0;

  while (1)
  {
    if (*((char *)v0 - 1) < 0)
      operator delete((void *)*(v0 - 3));
    v0 -= 3;
    if (v0 == &STACK[0xD58])
      JUMPOUT(0x19C3C623CLL);
  }
}

void sub_19C3C6D34()
{
  unint64_t *v0;

  while (1)
  {
    if (*((char *)v0 - 1) < 0)
      operator delete((void *)*(v0 - 3));
    v0 -= 3;
    if (v0 == &STACK[0xE00])
      JUMPOUT(0x19C3C6368);
  }
}

void sub_19C3C6D60()
{
  unint64_t *v0;

  while (1)
  {
    if (*((char *)v0 - 1) < 0)
      operator delete((void *)*(v0 - 3));
    v0 -= 3;
    if (v0 == &STACK[0xEA8])
      JUMPOUT(0x19C3C6494);
  }
}

void sub_19C3C6D8C()
{
  unint64_t *v0;

  while (1)
  {
    if (*((char *)v0 - 1) < 0)
      operator delete((void *)*(v0 - 3));
    v0 -= 3;
    if (v0 == &STACK[0xF50])
      JUMPOUT(0x19C3C692CLL);
  }
}

void sub_19C3C6DB8()
{
  unint64_t *v0;

  while (1)
  {
    if (*((char *)v0 - 1) < 0)
      operator delete((void *)*(v0 - 3));
    v0 -= 3;
    if (v0 == &STACK[0xFF8])
      JUMPOUT(0x19C3C6990);
  }
}

void sub_19C3C6DE4()
{
  unint64_t *v0;

  while (1)
  {
    if (*((char *)v0 - 1) < 0)
      operator delete((void *)*(v0 - 3));
    v0 -= 3;
    if (v0 == &STACK[0x10A0])
      JUMPOUT(0x19C3C69F4);
  }
}

void sub_19C3C6E14()
{
  unint64_t *v0;

  while (1)
  {
    if (*((char *)v0 - 1) < 0)
      operator delete((void *)*(v0 - 3));
    v0 -= 3;
    if (v0 == &STACK[0x1148])
      JUMPOUT(0x19C3C6A58);
  }
}

void sub_19C3C6E44()
{
  unint64_t *v0;

  while (1)
  {
    if (*((char *)v0 - 1) < 0)
      operator delete((void *)*(v0 - 3));
    v0 -= 3;
    if (v0 == &STACK[0x11F0])
      JUMPOUT(0x19C3C6ABCLL);
  }
}

void sub_19C3C6E74()
{
  unint64_t *v0;

  while (1)
  {
    if (*((char *)v0 - 1) < 0)
      operator delete((void *)*(v0 - 3));
    v0 -= 3;
    if (v0 == &STACK[0x1298])
      JUMPOUT(0x19C3C6B40);
  }
}

void sub_19C3C6EA4(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_19C3C6EB0(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_19C2CDAC8(exception_object);
}

void sub_19C3C6EC8(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  unsigned __int8 *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  float v11;
  float v12;
  _BOOL8 v13;
  unint64_t v14;
  unint64_t v15;
  size_t v16;
  size_t prime;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t **v21;
  size_t v22;
  uint8x8_t v23;
  unint64_t v24;
  unint64_t v25;
  uint8x8_t v26;
  uint64_t v27;
  uint64_t *v28;
  size_t v29;
  uint64_t *v30;
  size_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  int v36;
  unsigned __int8 *v37;
  unsigned __int8 *v38;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  const void *v42;
  uint64_t *v43;
  const void *v44;
  const void *v45;
  const void *v46;
  const void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint8x8_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t *v55;
  char v56;
  uint64_t v57;
  int v58;
  _BOOL4 v59;
  char v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  const void **v65;
  uint64_t v66;
  unsigned __int8 *v67;
  int v68;
  int v69;
  int v70;
  int v71;
  BOOL v72;
  char v73;
  BOOL v74;
  int v75;
  unint64_t v76;
  unint64_t v77;
  int v78;
  _BOOL4 v79;
  int v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  const void **v85;
  uint64_t v86;
  unsigned __int8 *v87;
  int v88;
  int v89;
  int v90;
  int v91;
  char v92;
  int v93;
  unsigned __int8 *v94;
  unint64_t v95;
  _QWORD *v96;
  size_t v97;
  unint64_t v98;
  char v99;

  v2 = (_QWORD *)a2;
  v4 = (unsigned __int8 *)(a2 + 16);
  v5 = *(unsigned __int8 *)(a2 + 39);
  v6 = *(_QWORD *)(a2 + 24);
  if ((v5 & 0x80u) == 0)
    v7 = (uint64_t *)(a2 + 16);
  else
    v7 = *(uint64_t **)(a2 + 16);
  if ((v5 & 0x80u) == 0)
    v8 = v5;
  else
    v8 = v6;
  v9 = sub_19C2A0F2C((uint64_t)&v99, v7, v8);
  v2[1] = v9;
  v10 = *(_QWORD *)(a1 + 8);
  v11 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v12 = *(float *)(a1 + 32);
  v98 = v9;
  v96 = v2;
  if (!v10 || (float)(v12 * (float)v10) < v11)
  {
    v94 = v4;
    v13 = 1;
    if (v10 >= 3)
      v13 = (v10 & (v10 - 1)) != 0;
    v14 = v13 | (2 * v10);
    v15 = vcvtps_u32_f32(v11 / v12);
    if (v14 <= v15)
      v16 = v15;
    else
      v16 = v14;
    if (v16 == 1)
    {
      v16 = 2;
    }
    else if ((v16 & (v16 - 1)) != 0)
    {
      prime = std::__next_prime(v16);
      v9 = v98;
      v16 = prime;
      v10 = *(_QWORD *)(a1 + 8);
    }
    if (v16 > v10)
      goto LABEL_19;
    if (v16 >= v10)
      goto LABEL_101;
    v25 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v10 < 3 || (v26 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
    {
      v25 = std::__next_prime(v25);
      v9 = v98;
    }
    else
    {
      v27 = 1 << -(char)__clz(v25 - 1);
      if (v25 >= 2)
        v25 = v27;
    }
    if (v16 <= v25)
      v16 = v25;
    if (v16 >= v10)
    {
      v10 = *(_QWORD *)(a1 + 8);
LABEL_101:
      v4 = v94;
    }
    else
    {
      if (v16)
      {
LABEL_19:
        if (v16 >> 61)
          sub_19C2A143C();
        v18 = operator new(8 * v16);
        v19 = *(void **)a1;
        *(_QWORD *)a1 = v18;
        if (v19)
          operator delete(v19);
        v20 = 0;
        *(_QWORD *)(a1 + 8) = v16;
        do
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v20++) = 0;
        while (v16 != v20);
        v21 = *(uint64_t ***)(a1 + 16);
        v9 = v98;
        if (!v21)
          goto LABEL_90;
        v22 = (size_t)v21[1];
        v23 = (uint8x8_t)vcnt_s8((int8x8_t)v16);
        v23.i16[0] = vaddlv_u8(v23);
        v24 = v23.u32[0];
        if (v23.u32[0] > 1uLL)
        {
          if (v22 >= v16)
            v22 %= v16;
        }
        else
        {
          v22 &= v16 - 1;
        }
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v22) = a1 + 16;
        v28 = *v21;
        if (!*v21)
        {
LABEL_90:
          v10 = v16;
          goto LABEL_101;
        }
        v95 = v23.u32[0];
        while (1)
        {
          v29 = v28[1];
          if (v24 > 1)
          {
            if (v29 >= v16)
              v29 %= v16;
          }
          else
          {
            v29 &= v16 - 1;
          }
          if (v29 == v22)
          {
            v21 = (uint64_t **)v28;
          }
          else
          {
            if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v29))
            {
              v30 = (uint64_t *)*v28;
              v97 = v22;
              if (*v28)
              {
                v31 = v28[3];
                if (*((char *)v28 + 39) >= 0)
                  v32 = *((unsigned __int8 *)v28 + 39);
                else
                  v32 = v28[3];
                if ((*((_BYTE *)v28 + 39) & 0x80) == 0)
                {
                  if (*((_BYTE *)v28 + 39))
                  {
                    v33 = (uint64_t *)*v28;
                    v34 = v28;
LABEL_52:
                    v30 = v33;
                    v35 = *((unsigned __int8 *)v33 + 39);
                    v36 = (char)v35;
                    if ((v35 & 0x80u) != 0)
                      v35 = v30[3];
                    if (v32 == v35)
                    {
                      if (v36 >= 0)
                        v37 = (unsigned __int8 *)(v30 + 2);
                      else
                        v37 = (unsigned __int8 *)v30[2];
                      v38 = (unsigned __int8 *)(v28 + 2);
                      v39 = *((unsigned __int8 *)v28 + 39);
                      while (*v38 == *v37)
                      {
                        ++v38;
                        ++v37;
                        if (!--v39)
                        {
                          v33 = (uint64_t *)*v30;
                          v34 = v30;
                          v30 = 0;
                          if (v33)
                            goto LABEL_52;
                          goto LABEL_78;
                        }
                      }
                    }
                  }
                  else
                  {
                    v49 = *((unsigned __int8 *)v30 + 39);
                    if ((v49 & 0x80u) != 0)
                      v49 = v30[3];
                    v34 = v28;
                    if (v49 == *((unsigned __int8 *)v28 + 39))
                    {
                      do
                      {
                        v34 = v30;
                        v30 = (uint64_t *)*v30;
                        if (!v30)
                          break;
                        v50 = *((unsigned __int8 *)v30 + 39);
                        if ((v50 & 0x80u) != 0)
                          v50 = v30[3];
                      }
                      while (v32 == v50);
                    }
                  }
                  goto LABEL_78;
                }
                v40 = *((char *)v30 + 39) < 0;
                v41 = *((unsigned __int8 *)v30 + 39);
                if ((v41 & 0x80u) != 0)
                  v41 = v30[3];
                if (v32 == v41)
                {
                  v42 = (const void *)v28[2];
                  v34 = v28;
                  while (1)
                  {
                    v43 = v30;
                    v46 = (const void *)v30[2];
                    v44 = v30 + 2;
                    v45 = v46;
                    if (v40)
                      v47 = v45;
                    else
                      v47 = v44;
                    if (memcmp(v42, v47, v31))
                    {
                      v30 = v43;
                      goto LABEL_89;
                    }
                    v30 = (uint64_t *)*v43;
                    if (!*v43)
                      break;
                    v40 = *((char *)v30 + 39) < 0;
                    v48 = *((unsigned __int8 *)v30 + 39);
                    if ((v48 & 0x80u) != 0)
                      v48 = v30[3];
                    v34 = v43;
                    v9 = v98;
                    if (v32 != v48)
                      goto LABEL_78;
                  }
                  v34 = v43;
LABEL_89:
                  v9 = v98;
                  goto LABEL_78;
                }
              }
              v34 = v28;
LABEL_78:
              *v21 = v30;
              *v34 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v29);
              **(_QWORD **)(*(_QWORD *)a1 + 8 * v29) = v28;
              v22 = v97;
              v24 = v95;
              goto LABEL_38;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v29) = v21;
            v21 = (uint64_t **)v28;
            v22 = v29;
          }
LABEL_38:
          v28 = *v21;
          if (!*v21)
          {
            v10 = v16;
            v2 = v96;
            goto LABEL_101;
          }
        }
      }
      v51 = *(void **)a1;
      *(_QWORD *)a1 = 0;
      v4 = v94;
      if (v51)
      {
        operator delete(v51);
        v9 = v98;
      }
      v10 = 0;
      *(_QWORD *)(a1 + 8) = 0;
    }
  }
  v52 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
  v52.i16[0] = vaddlv_u8(v52);
  v53 = v52.u32[0];
  if (v52.u32[0] > 1uLL)
  {
    v54 = v9;
    if (v10 <= v9)
      v54 = v9 % v10;
  }
  else
  {
    v54 = (v10 - 1) & v9;
  }
  v55 = *(uint64_t **)(*(_QWORD *)a1 + 8 * v54);
  if (v55)
  {
    v56 = *((_BYTE *)v2 + 39);
    if (v56 >= 0)
      v57 = *((unsigned __int8 *)v2 + 39);
    else
      v57 = v2[3];
    if (v56 < 0)
      v4 = (unsigned __int8 *)v2[2];
    if (v52.u32[0] >= 2uLL)
    {
      v78 = 0;
      do
      {
        v61 = v55;
        v55 = (uint64_t *)*v55;
        if (!v55)
          break;
        v81 = v55[1];
        v82 = v81;
        if (v81 >= v10)
          v82 = v81 % v10;
        if (v82 != v54)
          break;
        if (v81 == v9
          && ((v83 = *((unsigned __int8 *)v55 + 39), (v83 & 0x80u) == 0)
            ? (v84 = *((unsigned __int8 *)v55 + 39))
            : (v84 = v55[3]),
              v84 == v57))
        {
          v85 = (const void **)(v55 + 2);
          if ((v83 & 0x80) != 0)
          {
            v93 = memcmp(*v85, v4, v55[3]);
            v9 = v98;
            v79 = v93 == 0;
          }
          else if (*((_BYTE *)v55 + 39))
          {
            v86 = v83 - 1;
            v87 = v4;
            do
            {
              v89 = *(unsigned __int8 *)v85;
              v85 = (const void **)((char *)v85 + 1);
              v88 = v89;
              v91 = *v87++;
              v90 = v91;
              v72 = v86-- != 0;
              v92 = v72;
              v74 = v88 == v90;
              v79 = v88 == v90;
            }
            while (v74 && (v92 & 1) != 0);
          }
          else
          {
            v79 = 1;
          }
        }
        else
        {
          v79 = 0;
        }
        v80 = v78 & !v79;
        v78 |= v79;
      }
      while (v80 != 1);
    }
    else
    {
      v58 = 0;
      do
      {
        v61 = v55;
        v55 = (uint64_t *)*v55;
        if (!v55)
          break;
        v62 = v55[1];
        if ((v62 & (v10 - 1)) != v54)
          break;
        if (v62 == v9
          && ((v63 = *((unsigned __int8 *)v55 + 39), (v63 & 0x80u) == 0)
            ? (v64 = *((unsigned __int8 *)v55 + 39))
            : (v64 = v55[3]),
              v64 == v57))
        {
          v65 = (const void **)(v55 + 2);
          if ((v63 & 0x80) != 0)
          {
            v75 = memcmp(*v65, v4, v55[3]);
            v9 = v98;
            v59 = v75 == 0;
          }
          else if (*((_BYTE *)v55 + 39))
          {
            v66 = v63 - 1;
            v67 = v4;
            do
            {
              v69 = *(unsigned __int8 *)v65;
              v65 = (const void **)((char *)v65 + 1);
              v68 = v69;
              v71 = *v67++;
              v70 = v71;
              v72 = v66-- != 0;
              v73 = v72;
              v74 = v68 == v70;
              v59 = v68 == v70;
            }
            while (v74 && (v73 & 1) != 0);
          }
          else
          {
            v59 = 1;
          }
        }
        else
        {
          v59 = 0;
        }
        v60 = v58 & !v59;
        v58 |= v59;
      }
      while ((v60 & 1) == 0);
    }
  }
  else
  {
    v61 = 0;
  }
  v76 = v96[1];
  if (v53 > 1)
  {
    if (v76 >= v10)
      v76 %= v10;
  }
  else
  {
    v76 &= v10 - 1;
  }
  if (!v61)
  {
    *v96 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v96;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v76) = a1 + 16;
    if (!*v96)
      goto LABEL_178;
    v77 = *(_QWORD *)(*v96 + 8);
    if (v53 > 1)
    {
      if (v77 >= v10)
        v77 %= v10;
    }
    else
    {
      v77 &= v10 - 1;
    }
LABEL_177:
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v77) = v96;
    goto LABEL_178;
  }
  *v96 = *v61;
  *v61 = v96;
  if (*v96)
  {
    v77 = *(_QWORD *)(*v96 + 8);
    if (v53 > 1)
    {
      if (v77 >= v10)
        v77 %= v10;
    }
    else
    {
      v77 &= v10 - 1;
    }
    if (v77 != v76)
      goto LABEL_177;
  }
LABEL_178:
  ++*(_QWORD *)(a1 + 24);
}

uint64_t *sub_19C3C7608(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      v3 = *(_QWORD *)(v2 + 40);
      if (v3)
      {
        v4 = *(_QWORD *)(v2 + 48);
        v5 = *(void **)(v2 + 40);
        if (v4 != v3)
        {
          do
          {
            if (*(char *)(v4 - 1) < 0)
              operator delete(*(void **)(v4 - 24));
            v4 -= 24;
          }
          while (v4 != v3);
          v5 = *(void **)(v2 + 40);
        }
        *(_QWORD *)(v2 + 48) = v3;
        operator delete(v5);
      }
      if (*(char *)(v2 + 39) < 0)
        operator delete(*(void **)(v2 + 16));
    }
    operator delete((void *)v2);
  }
  return a1;
}

uint64_t *sub_19C3C76A4(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      sub_19C31BF28(v2 + 40);
      if (*(char *)(v2 + 39) < 0)
        operator delete(*(void **)(v2 + 16));
    }
    operator delete((void *)v2);
  }
  return a1;
}

_BYTE *sub_19C3C76F8(_BYTE *__dst, __int128 *a2, __int128 **a3)
{
  __int128 v5;

  if (*((char *)a2 + 23) < 0)
  {
    sub_19C2B5238(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v5;
  }
  *((_QWORD *)__dst + 3) = 0;
  *((_QWORD *)__dst + 4) = 0;
  *((_QWORD *)__dst + 5) = 0;
  sub_19C2B5440(__dst + 24, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a3[1] - (char *)*a3) >> 3));
  return __dst;
}

void sub_19C3C7770(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C3C778C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 48 * a3;
    do
    {
      sub_19C3C7F60(a1, a2, a2);
      a2 += 48;
      v5 -= 48;
    }
    while (v5);
  }
  return a1;
}

void sub_19C3C77F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_19C31BF28(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_19C3C7804(_QWORD *__dst, __int128 *a2, uint64_t a3)
{
  __int128 v5;

  if (*((char *)a2 + 23) < 0)
  {
    sub_19C2B5238(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    __dst[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v5;
  }
  sub_19C3C7E30((uint64_t)(__dst + 3), a3);
  return __dst;
}

void sub_19C3C7860(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_19C3C787C(unsigned __int8 *a1, uint64_t a2)
{
  unint64_t v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  uint64_t *v5;
  int v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t **v13;
  uint64_t *v14;
  unsigned __int8 v15;
  uint64_t v16;
  unsigned __int8 *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const void **v21;
  unsigned __int8 *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const void **v26;
  unsigned __int8 *v27;
  _QWORD *v28;
  _QWORD *v29;
  __int128 v30;
  float v31;
  _BOOL8 v32;
  unint64_t v33;
  unint64_t v34;
  size_t prime;
  size_t v36;
  unint64_t v37;
  uint8x8_t v38;
  uint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  _QWORD v42[2];
  char v43;

  xmmword_1EE41C458 = 0u;
  *(_OWORD *)&qword_1EE41C468 = 0u;
  dword_1EE41C478 = 1065353216;
  if (!a2)
    return;
  v3 = a1;
  v4 = &a1[64 * a2];
  v5 = &qword_1EE41C000;
  while (2)
  {
    v6 = (char)v3[23];
    if (v6 >= 0)
      v7 = (uint64_t *)v3;
    else
      v7 = *(uint64_t **)v3;
    if (v6 >= 0)
      v8 = v3[23];
    else
      v8 = *((_QWORD *)v3 + 1);
    v9 = sub_19C2A0F2C((uint64_t)v42, v7, v8);
    v10 = v9;
    v11 = *((_QWORD *)&xmmword_1EE41C458 + 1);
    if (!*((_QWORD *)&xmmword_1EE41C458 + 1))
      goto LABEL_60;
    v12 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_1EE41C458 + 8));
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v2 = v9;
      if (v9 >= *((_QWORD *)&xmmword_1EE41C458 + 1))
        v2 = v9 % *((_QWORD *)&xmmword_1EE41C458 + 1);
    }
    else
    {
      v2 = (*((_QWORD *)&xmmword_1EE41C458 + 1) - 1) & v9;
    }
    v13 = *(uint64_t ***)(v5[139] + 8 * v2);
    if (!v13)
      goto LABEL_60;
    v14 = *v13;
    if (!*v13)
      goto LABEL_60;
    v15 = v3[23];
    if ((v15 & 0x80u) == 0)
      v16 = v3[23];
    else
      v16 = *((_QWORD *)v3 + 1);
    if ((v15 & 0x80u) == 0)
      v17 = v3;
    else
      v17 = *(unsigned __int8 **)v3;
    if (v12.u32[0] < 2uLL)
    {
      while (1)
      {
        v23 = v14[1];
        if (v23 == v10)
        {
          v24 = *((unsigned __int8 *)v14 + 39);
          if ((v24 & 0x80u) == 0)
            v25 = *((unsigned __int8 *)v14 + 39);
          else
            v25 = v14[3];
          if (v25 == v16)
          {
            v26 = (const void **)(v14 + 2);
            if ((v24 & 0x80) != 0)
            {
              if (!memcmp(*v26, v17, v14[3]))
                goto LABEL_5;
            }
            else
            {
              if (!*((_BYTE *)v14 + 39))
                goto LABEL_5;
              v27 = v17;
              while (*(unsigned __int8 *)v26 == *v27)
              {
                v26 = (const void **)((char *)v26 + 1);
                ++v27;
                if (!--v24)
                  goto LABEL_5;
              }
            }
          }
        }
        else if ((v23 & (v11 - 1)) != v2)
        {
          goto LABEL_59;
        }
        v14 = (uint64_t *)*v14;
        if (!v14)
          goto LABEL_59;
      }
    }
    do
    {
      v18 = v14[1];
      if (v18 == v10)
      {
        v19 = *((unsigned __int8 *)v14 + 39);
        if ((v19 & 0x80u) == 0)
          v20 = *((unsigned __int8 *)v14 + 39);
        else
          v20 = v14[3];
        if (v20 == v16)
        {
          v21 = (const void **)(v14 + 2);
          if ((v19 & 0x80) != 0)
          {
            if (!memcmp(*v21, v17, v14[3]))
              goto LABEL_5;
          }
          else
          {
            if (!*((_BYTE *)v14 + 39))
              goto LABEL_5;
            v22 = v17;
            while (*(unsigned __int8 *)v21 == *v22)
            {
              v21 = (const void **)((char *)v21 + 1);
              ++v22;
              if (!--v19)
                goto LABEL_5;
            }
          }
        }
        goto LABEL_28;
      }
      if (v18 >= v11)
        v18 %= v11;
      if (v18 != v2)
        break;
LABEL_28:
      v14 = (uint64_t *)*v14;
    }
    while (v14);
LABEL_59:
    v5 = &qword_1EE41C000;
LABEL_60:
    v28 = operator new(0x50uLL);
    v29 = v28;
    v42[0] = v28;
    v42[1] = &qword_1EE41C468;
    v43 = 0;
    *v28 = 0;
    v28[1] = v10;
    if ((char)v3[23] < 0)
    {
      sub_19C2B5238((_BYTE *)v28 + 16, *(void **)v3, *((_QWORD *)v3 + 1));
    }
    else
    {
      v30 = *(_OWORD *)v3;
      v28[4] = *((_QWORD *)v3 + 2);
      *((_OWORD *)v28 + 1) = v30;
    }
    sub_19C3C7E30((uint64_t)(v29 + 5), (uint64_t)(v3 + 24));
    v43 = 1;
    v31 = (float)(unint64_t)(qword_1EE41C470 + 1);
    if (!v11 || (float)(*(float *)&dword_1EE41C478 * (float)v11) < v31)
    {
      v32 = (v11 & (v11 - 1)) != 0;
      if (v11 < 3)
        v32 = 1;
      v33 = v32 | (2 * v11);
      v34 = vcvtps_u32_f32(v31 / *(float *)&dword_1EE41C478);
      if (v33 <= v34)
        prime = v34;
      else
        prime = v33;
      if (prime == 1)
      {
        prime = 2;
      }
      else if ((prime & (prime - 1)) != 0)
      {
        prime = std::__next_prime(prime);
      }
      v36 = *((_QWORD *)&xmmword_1EE41C458 + 1);
      if (prime > *((_QWORD *)&xmmword_1EE41C458 + 1))
        goto LABEL_75;
      if (prime < *((_QWORD *)&xmmword_1EE41C458 + 1))
      {
        v37 = vcvtps_u32_f32((float)(unint64_t)qword_1EE41C470 / *(float *)&dword_1EE41C478);
        if (*((_QWORD *)&xmmword_1EE41C458 + 1) < 3uLL
          || (v38 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_1EE41C458 + 8)),
              v38.i16[0] = vaddlv_u8(v38),
              v38.u32[0] > 1uLL))
        {
          v37 = std::__next_prime(v37);
        }
        else
        {
          v39 = 1 << -(char)__clz(v37 - 1);
          if (v37 >= 2)
            v37 = v39;
        }
        if (prime <= v37)
          prime = v37;
        if (prime < v36)
LABEL_75:
          sub_19C2EC6BC((uint64_t)&xmmword_1EE41C458, prime);
      }
      v11 = *((_QWORD *)&xmmword_1EE41C458 + 1);
      if ((*((_QWORD *)&xmmword_1EE41C458 + 1) & (*((_QWORD *)&xmmword_1EE41C458 + 1) - 1)) != 0)
      {
        if (v10 >= *((_QWORD *)&xmmword_1EE41C458 + 1))
          v2 = v10 % *((_QWORD *)&xmmword_1EE41C458 + 1);
        else
          v2 = v10;
      }
      else
      {
        v2 = (*((_QWORD *)&xmmword_1EE41C458 + 1) - 1) & v10;
      }
    }
    v40 = *(_QWORD **)(v5[139] + 8 * v2);
    if (v40)
    {
      *(_QWORD *)v42[0] = *v40;
      *v40 = v42[0];
    }
    else
    {
      *(_QWORD *)v42[0] = qword_1EE41C468;
      qword_1EE41C468 = v42[0];
      *(_QWORD *)(v5[139] + 8 * v2) = &qword_1EE41C468;
      if (*(_QWORD *)v42[0])
      {
        v41 = *(_QWORD *)(*(_QWORD *)v42[0] + 8);
        if ((v11 & (v11 - 1)) != 0)
        {
          if (v41 >= v11)
            v41 %= v11;
        }
        else
        {
          v41 &= v11 - 1;
        }
        *(_QWORD *)(v5[139] + 8 * v41) = v42[0];
      }
    }
    ++qword_1EE41C470;
LABEL_5:
    v3 += 64;
    v5 = &qword_1EE41C000;
    if (v3 != v4)
      continue;
    break;
  }
}

void sub_19C3C7CEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void **v3;
  void *v4;
  void **v5;
  va_list va;

  va_start(va, a2);
  sub_19C3C76A4((uint64_t *)va);
  v3 = (void **)qword_1EE41C468;
  if (qword_1EE41C468)
  {
    do
    {
      v5 = (void **)*v3;
      sub_19C31BF28((uint64_t)(v3 + 5));
      if (*((char *)v3 + 39) < 0)
        operator delete(v3[2]);
      operator delete(v3);
      v3 = v5;
    }
    while (v5);
  }
  v4 = (void *)xmmword_1EE41C458;
  *(_QWORD *)&xmmword_1EE41C458 = 0;
  if (v4)
    operator delete(v4);
  _Unwind_Resume(a1);
}

uint64_t sub_19C3C7D78(uint64_t a1)
{
  sub_19C31BF28(a1 + 24);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_19C3C7DB0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = *(_QWORD *)(a1 + 24);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(void **)(a1 + 24);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0)
          operator delete(*(void **)(v3 - 24));
        v3 -= 24;
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 24);
    }
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v4);
  }
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_19C3C7E30(uint64_t a1, uint64_t a2)
{
  size_t prime;
  int8x8_t v5;
  BOOL v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  _QWORD *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    sub_19C2EC6BC(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v5 = *(int8x8_t *)(a1 + 8);
    v6 = prime >= *(_QWORD *)&v5;
    if (prime > *(_QWORD *)&v5)
      goto LABEL_17;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v6)
  {
    v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v5 < 3uLL || (v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      v7 = std::__next_prime(v7);
    }
    else
    {
      v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2)
        v7 = v9;
    }
    if (prime <= v7)
      prime = v7;
    if (prime < *(_QWORD *)&v5)
      goto LABEL_17;
  }
LABEL_18:
  for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
    sub_19C3C7F60(a1, (uint64_t)(i + 2), (uint64_t)(i + 2));
  return a1;
}

void sub_19C3C7F48(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_19C31BF28(v1);
  _Unwind_Resume(a1);
}

void sub_19C3C7F60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  _BYTE *v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t **v13;
  uint64_t *v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const void **v20;
  unsigned __int8 *j;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const void **v25;
  unsigned __int8 *i;
  char *v27;
  char *v28;
  float v29;
  float v30;
  _BOOL8 v31;
  unint64_t v32;
  unint64_t v33;
  size_t prime;
  int8x8_t v35;
  unint64_t v36;
  uint8x8_t v37;
  uint64_t v38;
  _QWORD *v39;
  unint64_t v40;
  _QWORD v41[2];
  char v42;

  v5 = (_BYTE *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v8 = v7;
  }
  v9 = sub_19C2A0F2C((uint64_t)v41, (uint64_t *)a2, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v3 = v9;
      if (v9 >= v11)
        v3 = v9 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v9;
    }
    v13 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        v15 = v5[23];
        if (v15 >= 0)
          v16 = v5[23];
        else
          v16 = *((_QWORD *)v5 + 1);
        if (v15 < 0)
          v5 = *(_BYTE **)v5;
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v22 = v14[1];
            if (v22 == v10)
            {
              v23 = *((unsigned __int8 *)v14 + 39);
              if ((v23 & 0x80u) == 0)
                v24 = *((unsigned __int8 *)v14 + 39);
              else
                v24 = v14[3];
              if (v24 == v16)
              {
                v25 = (const void **)(v14 + 2);
                if ((v23 & 0x80) != 0)
                {
                  if (!memcmp(*v25, v5, v14[3]))
                    return;
                }
                else
                {
                  if (!*((_BYTE *)v14 + 39))
                    return;
                  for (i = v5; *(unsigned __int8 *)v25 == *i; ++i)
                  {
                    v25 = (const void **)((char *)v25 + 1);
                    if (!--v23)
                      return;
                  }
                }
              }
            }
            else if ((v22 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            v14 = (uint64_t *)*v14;
            if (!v14)
              goto LABEL_51;
          }
        }
        do
        {
          v17 = v14[1];
          if (v17 == v10)
          {
            v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0)
              v19 = *((unsigned __int8 *)v14 + 39);
            else
              v19 = v14[3];
            if (v19 == v16)
            {
              v20 = (const void **)(v14 + 2);
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp(*v20, v5, v14[3]))
                  return;
              }
              else
              {
                if (!*((_BYTE *)v14 + 39))
                  return;
                for (j = v5; *(unsigned __int8 *)v20 == *j; ++j)
                {
                  v20 = (const void **)((char *)v20 + 1);
                  if (!--v18)
                    return;
                }
              }
            }
          }
          else
          {
            if (v17 >= v11)
              v17 %= v11;
            if (v17 != v3)
              break;
          }
          v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  v27 = (char *)operator new(0x40uLL);
  v28 = v27;
  v41[0] = v27;
  v41[1] = a1 + 16;
  v42 = 0;
  *(_QWORD *)v27 = 0;
  *((_QWORD *)v27 + 1) = v10;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_19C2B5238(v27 + 16, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *((_OWORD *)v27 + 1) = *(_OWORD *)a3;
    *((_QWORD *)v27 + 4) = *(_QWORD *)(a3 + 16);
  }
  *((_QWORD *)v28 + 5) = 0;
  *((_QWORD *)v28 + 6) = 0;
  *((_QWORD *)v28 + 7) = 0;
  sub_19C2B5440(v28 + 40, *(__int128 **)(a3 + 24), *(__int128 **)(a3 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 32) - *(_QWORD *)(a3 + 24)) >> 3));
  v42 = 1;
  v29 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v30 = *(float *)(a1 + 32);
  if (!v11 || (float)(v30 * (float)v11) < v29)
  {
    v31 = 1;
    if (v11 >= 3)
      v31 = (v11 & (v11 - 1)) != 0;
    v32 = v31 | (2 * v11);
    v33 = vcvtps_u32_f32(v29 / v30);
    if (v32 <= v33)
      prime = v33;
    else
      prime = v32;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v35 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v35)
      goto LABEL_66;
    if (prime < *(_QWORD *)&v35)
    {
      v36 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v35 < 3uLL || (v37 = (uint8x8_t)vcnt_s8(v35), v37.i16[0] = vaddlv_u8(v37), v37.u32[0] > 1uLL))
      {
        v36 = std::__next_prime(v36);
      }
      else
      {
        v38 = 1 << -(char)__clz(v36 - 1);
        if (v36 >= 2)
          v36 = v38;
      }
      if (prime <= v36)
        prime = v36;
      if (prime < *(_QWORD *)&v35)
LABEL_66:
        sub_19C2EC6BC(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v3 = v10 % v11;
      else
        v3 = v10;
    }
    else
    {
      v3 = (v11 - 1) & v10;
    }
  }
  v39 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v39)
  {
    *(_QWORD *)v41[0] = *v39;
    *v39 = v41[0];
  }
  else
  {
    *(_QWORD *)v41[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v41[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v41[0])
    {
      v40 = *(_QWORD *)(*(_QWORD *)v41[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v40 >= v11)
          v40 %= v11;
      }
      else
      {
        v40 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v40) = v41[0];
    }
  }
  ++*(_QWORD *)(a1 + 24);
}

void sub_19C3C8394(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C3C7608((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_19C3C83C8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  const void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  *a1 = &off_1E3D34BE0;
  v2 = a1[5];
  if (v2)
  {
    v3 = a1[6];
    v4 = (void *)a1[5];
    if (v3 != v2)
    {
      do
      {
        v5 = *(const void **)(v3 - 8);
        if (v5)
          CFRelease(v5);
        v3 -= 32;
      }
      while (v3 != v2);
      v4 = (void *)a1[5];
    }
    a1[6] = v2;
    operator delete(v4);
  }
  v6 = (std::__shared_weak_count *)a1[3];
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return a1;
}

uint64_t sub_19C3C847C(uint64_t a1, uint64_t a2)
{
  int v2;
  _QWORD *v3;

  v2 = *(_DWORD *)(a1 + 12);
  v3 = *(_QWORD **)(a1 + 16);
  if (v2)
    return sub_19C3BE248(v3[58], a2);
  else
    return sub_19C31939C(v3, a2, 0);
}

_QWORD *sub_19C3C8498(uint64_t a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *result;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v9 = v8;
  v6[0] = &off_1E3D30B60;
  v6[1] = a1;
  v7 = v6;
  v8[0] = &off_1E3D38F28;
  sub_19C3A5C98(a2, (uint64_t)v8, (uint64_t)v6);
  v2 = v7;
  if (v7 == v6)
  {
    v3 = 4;
    v2 = v6;
  }
  else
  {
    if (!v7)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  result = v9;
  if (v9 == v8)
  {
    v5 = 4;
    result = v8;
  }
  else
  {
    if (!v9)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_19C3C8578(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;

  v18 = a13;
  if (a13 == &a10)
  {
    v19 = 4;
    v18 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_6:
  v20 = a17;
  if (a17 == &a14)
  {
    v21 = 4;
    v20 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_11;
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_11:
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C3C85E4(uint64_t a1, uint64_t a2, const void **a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v7;
  CFIndex v9;
  CFIndex v10;
  CFStringRef v11;
  CFStringRef v12;
  uint64_t v13;
  const void *v14;
  const __CFArray *v15;
  CFIndex Count;
  CFIndex v17;
  CFArrayRef v18;
  CFIndex v19;
  unint64_t v20;
  const __CFLocale *v21;
  _BOOL4 v22;
  unint64_t v23;
  const __CFLocale *v24;
  BOOL v25;
  uint64_t i;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v31;
  const void **v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  const void *v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int **v44;
  void *v45;
  int v46;
  const __CFString *v47;
  CFTypeID TypeID;
  void *v49;
  void *v50;
  int v51;
  void *v52;
  unsigned __int8 *v53;
  uint64_t v54;
  unsigned int *v55;
  const __CFArray *v56;
  CFIndex v57;
  CFIndex v58;
  CFArrayRef v59;
  CFIndex v60;
  const __CFAllocator *v61;
  unint64_t v62;
  const __CFString *v63;
  const __CFLocale *v64;
  CFIndex Length;
  __CFString *MutableCopy;
  const __CFString *v67;
  CFIndex v68;
  __CFString *v69;
  unint64_t v70;
  const __CFString *v71;
  const __CFLocale *v72;
  CFIndex v73;
  __CFString *v74;
  const __CFString *v75;
  CFIndex v76;
  __CFString *v77;
  uint64_t **v78;
  uint64_t (**v79)();
  const __CFLocale *p_theString;
  const __CFLocale **v81;
  uint64_t v82;
  __int128 *v83;
  __int128 *v84;
  uint64_t v85;
  __int128 *v86;
  __int128 *v87;
  __int128 v88;
  uint64_t v89;
  __int128 *v90;
  const void *v91;
  const __CFLocale **v92;
  uint64_t v93;
  CFTypeRef *v94;
  uint64_t v95;
  _QWORD *v96;
  void *v97;
  _QWORD *v98;
  const void *v99;
  _QWORD *v100;
  void *exception;
  void *v103;
  unsigned int **v104;
  _QWORD *v105;
  CFArrayRef theArray;
  CFTypeRef v110;
  CFArrayRef v111;
  void *__s1[2];
  __int128 v113;
  int v114;
  CFStringRef theString;
  CFTypeRef cf[3];
  CFTypeRef *v117;
  const __CFLocale *v118[3];
  const __CFLocale **v119;
  uint64_t v120;

  v7 = a2;
  v120 = *MEMORY[0x1E0C80C00];
  v9 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v10 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v10 = v9;
  }
  v11 = CFStringCreateWithBytes(0, (const UInt8 *)a2, v10, 0x8000100u, 0);
  v110 = v11;
  if (!v11)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD3154](exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v12 = v11;
  v13 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(a1 + 12))
    v13 = *(_QWORD *)(v13 + 464);
  v14 = *(const void **)(v13 + 176);
  if (v14)
    CFRetain(v14);
  sub_19C31D164(&theArray, v14);
  v15 = theArray;
  if (theArray)
  {
    Count = CFArrayGetCount(theArray);
    v17 = Count;
    v18 = theArray;
    if (theArray)
    {
      v19 = CFArrayGetCount(theArray);
      if (!v17)
        goto LABEL_27;
    }
    else
    {
      v19 = 0;
      if (!Count)
        goto LABEL_27;
    }
    if (v15 != v18)
    {
      v23 = 0;
      while (1)
      {
        sub_19C31D210(v118, v15, v23);
        CFRetain(v12);
        __s1[0] = (void *)v12;
        v24 = v118[0];
        v25 = sub_19C433414((CFStringRef *)__s1, v118[0]);
        CFRelease(v12);
        if (v24)
          CFRelease(v24);
        if (v25)
          break;
        if (v17 == ++v23)
          goto LABEL_27;
      }
LABEL_49:
      if (*(_DWORD *)(a1 + 12) == 1)
      {
        v36 = sub_19C3BE248(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 464), v7);
      }
      else
      {
        v37 = *(_QWORD **)(a1 + 16);
        if (a6 == 2)
          v36 = sub_19C32F42C(v37, v7);
        else
          v36 = sub_19C31939C(v37, v7, 0);
      }
      v35 = v36;
      if (!(_DWORD)v36)
      {
        sub_19C3C9344(a1, v7);
        v40 = sub_19C3C9650((unsigned int **)(a1 + 40), a3, a4, a5, *(_QWORD **)(a1 + 16));
        goto LABEL_176;
      }
      goto LABEL_177;
    }
    v20 = 0;
    while (v19 != v20)
    {
      sub_19C31D210(v118, v15, v20);
      CFRetain(v12);
      __s1[0] = (void *)v12;
      v21 = v118[0];
      v22 = sub_19C433414((CFStringRef *)__s1, v118[0]);
      CFRelease(v12);
      if (v21)
        CFRelease(v21);
      if (v22)
        goto LABEL_49;
      if (v17 == ++v20)
        break;
    }
  }
LABEL_27:
  for (i = a5; ; --i)
  {
    if ((int)i < 1)
      goto LABEL_40;
    v27 = *(_DWORD *)(a4 - 4 + 4 * i);
    if (v27 != 19 && v27 != 34 && (v27 & 0xFFFFFFFD) != 0x28)
      break;
  }
  v28 = 0;
  do
  {
    v29 = dword_19C47586C[v28];
    if (v27 == v29)
      break;
  }
  while (v28++ != 9);
  if (v27 == v29)
  {
    sub_19C3C9344(a1, v7);
    v31 = *(_QWORD *)(a1 + 16);
    v105 = (_QWORD *)v31;
    if (*(_DWORD *)(a1 + 12))
      v32 = (const void **)(*(_QWORD *)(v31 + 464) + 176);
    else
      v32 = (const void **)(v31 + 176);
    v41 = *v32;
    v42 = *(_QWORD *)(a1 + 40);
    v43 = *(_QWORD *)(a1 + 48);
    v44 = (unsigned int **)(a1 + 40);
    if (v42 == v43)
      goto LABEL_89;
    while (1)
    {
      v47 = *(const __CFString **)(v42 + 24);
      if (!v47)
      {
        v103 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1A1AD3154](v103, "Could not construct");
        __cxa_throw(v103, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
      }
      TypeID = CFStringGetTypeID();
      if (TypeID == CFGetTypeID(v47))
      {
        sub_19C2E50A4(__s1, v47);
        v49 = (void *)BYTE7(v113);
      }
      else
      {
        v49 = 0;
        __s1[0] = 0;
        BYTE7(v113) = 0;
      }
      v50 = *(void **)(v7 + 8);
      v51 = *(char *)(v7 + 23);
      if ((char)v49 >= 0)
        v52 = v49;
      else
        v52 = __s1[1];
      if (v51 >= 0)
        v50 = (void *)*(unsigned __int8 *)(v7 + 23);
      if (v52 == v50)
      {
        if (v51 >= 0)
          v53 = (unsigned __int8 *)v7;
        else
          v53 = *(unsigned __int8 **)v7;
        if ((char)v49 < 0)
        {
          v45 = __s1[0];
          v46 = memcmp(__s1[0], v53, (size_t)__s1[1]);
          operator delete(v45);
          if (!v46)
            goto LABEL_88;
          goto LABEL_65;
        }
        if (!v49)
          goto LABEL_88;
        v54 = 0;
        while (*((unsigned __int8 *)__s1 + v54) == v53[v54])
        {
          if (v49 == (void *)++v54)
            goto LABEL_88;
        }
      }
      if ((char)v49 < 0)
        operator delete(__s1[0]);
LABEL_65:
      v42 += 32;
      if (v42 == v43)
      {
        v42 = v43;
LABEL_88:
        v44 = (unsigned int **)(a1 + 40);
LABEL_89:
        v55 = *(unsigned int **)(a1 + 48);
        if ((unsigned int *)v42 != v55)
        {
          if (*v44 == v55)
            __assert_rtn("trimCandidates", "LinguisticTokenConverter.cpp", 121, "!candidates.empty()");
          theString = *(CFStringRef *)(v42 + 24);
          *(_OWORD *)__s1 = 0u;
          v113 = 0u;
          v114 = 1065353216;
          if (v41)
            CFRetain(v41);
          v104 = v44;
          sub_19C31D164(&v111, v41);
          v56 = v111;
          if (v111)
          {
            v57 = CFArrayGetCount(v111);
            v58 = v57;
            v59 = v111;
            if (v111)
            {
              v60 = CFArrayGetCount(v111);
              if (!v58)
                goto LABEL_116;
            }
            else
            {
              v60 = 0;
              if (!v57)
                goto LABEL_116;
            }
            v61 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
            if (v56 == v59)
            {
              v62 = 0;
              do
              {
                if (v60 == v62)
                  break;
                sub_19C31D210(v118, v56, v62);
                v63 = theString;
                v64 = v118[0];
                Length = CFStringGetLength(theString);
                MutableCopy = CFStringCreateMutableCopy(v61, Length, v63);
                CFStringLowercase(MutableCopy, v64);
                sub_19C297DB4(cf, MutableCopy);
                sub_19C3C9A48((uint64_t)__s1, cf, cf);
                if (cf[0])
                  CFRelease(cf[0]);
                v67 = theString;
                v68 = CFStringGetLength(theString);
                v69 = CFStringCreateMutableCopy(v61, v68, v67);
                CFStringCapitalize(v69, v64);
                sub_19C297DB4(cf, v69);
                sub_19C3C9A48((uint64_t)__s1, cf, cf);
                if (cf[0])
                  CFRelease(cf[0]);
                if (v64)
                  CFRelease(v64);
                ++v62;
              }
              while (v58 != v62);
            }
            else
            {
              v70 = 0;
              do
              {
                sub_19C31D210(v118, v56, v70);
                v71 = theString;
                v72 = v118[0];
                v73 = CFStringGetLength(theString);
                v74 = CFStringCreateMutableCopy(v61, v73, v71);
                CFStringLowercase(v74, v72);
                sub_19C297DB4(cf, v74);
                sub_19C3C9A48((uint64_t)__s1, cf, cf);
                if (cf[0])
                  CFRelease(cf[0]);
                v75 = theString;
                v76 = CFStringGetLength(theString);
                v77 = CFStringCreateMutableCopy(v61, v76, v75);
                CFStringCapitalize(v77, v72);
                sub_19C297DB4(cf, v77);
                sub_19C3C9A48((uint64_t)__s1, cf, cf);
                if (cf[0])
                  CFRelease(cf[0]);
                if (v72)
                  CFRelease(v72);
                ++v70;
              }
              while (v58 != v70);
            }
          }
LABEL_116:
          v117 = 0;
          v78 = (uint64_t **)v113;
          v44 = v104;
          if ((_QWORD)v113)
          {
            while (CFStringCompare(theString, (CFStringRef)v78[2], 0))
            {
              v78 = (uint64_t **)*v78;
              if (!v78)
                goto LABEL_119;
            }
            v79 = &off_1E3D30690;
            p_theString = (const __CFLocale *)__s1;
          }
          else
          {
LABEL_119:
            v79 = &off_1E3D306E8;
            p_theString = (const __CFLocale *)&theString;
          }
          v118[0] = (const __CFLocale *)v79;
          v118[1] = p_theString;
          v119 = v118;
          sub_19C3C9D70(v118, cf);
          v81 = v119;
          if (v119 == v118)
          {
            v82 = 4;
            v81 = v118;
LABEL_125:
            (*((void (**)(void))*v81 + v82))();
          }
          else if (v119)
          {
            v82 = 5;
            goto LABEL_125;
          }
          v83 = *(__int128 **)(a1 + 40);
          v84 = *(__int128 **)(a1 + 48);
          v85 = (uint64_t)v117;
          if (v117)
          {
            if (v117 != cf)
            {
              v85 = (*((uint64_t (**)(void))*v117 + 2))();
              goto LABEL_129;
            }
            v119 = v118;
            (*((void (**)(CFTypeRef *, const __CFLocale **))cf[0] + 3))(cf, v118);
          }
          else
          {
LABEL_129:
            v119 = (const __CFLocale **)v85;
          }
          if (v83 == v84)
          {
            v86 = v83;
          }
          else
          {
            v86 = v84;
            while (1)
            {
              if (!v119)
LABEL_184:
                sub_19C2CCC60();
              if (((*((uint64_t (**)(const __CFLocale **, __int128 *))*v119 + 6))(v119, v83) & 1) != 0)
                break;
              v83 += 2;
              if (v83 == v84)
                goto LABEL_145;
            }
            if (v83 != v84)
            {
              v87 = v83 + 2;
              v86 = v83;
              while (v87 != v84)
              {
                if (!v119)
                  goto LABEL_184;
                if (((*((uint64_t (**)(const __CFLocale **, __int128 *))*v119 + 6))(v119, v87) & 1) == 0)
                {
                  v88 = *v87;
                  *((_DWORD *)v86 + 4) = *((_DWORD *)v87 + 4);
                  *v86 = v88;
                  v89 = *((_QWORD *)v86 + 3);
                  *((_QWORD *)v86 + 3) = *((_QWORD *)v87 + 3);
                  *((_QWORD *)v87 + 3) = v89;
                  v86 += 2;
                }
                v87 += 2;
              }
            }
          }
LABEL_145:
          v90 = *(__int128 **)(a1 + 48);
          if (v86 != v90)
          {
            while (v90 != v86)
            {
              v91 = (const void *)*((_QWORD *)v90 - 1);
              if (v91)
                CFRelease(v91);
              v90 -= 2;
            }
            *(_QWORD *)(a1 + 48) = v86;
          }
          v92 = v119;
          if (v119 == v118)
          {
            v93 = 4;
            v92 = v118;
LABEL_156:
            (*((void (**)(void))*v92 + v93))();
          }
          else if (v119)
          {
            v93 = 5;
            goto LABEL_156;
          }
          v94 = v117;
          if (v117 == cf)
          {
            v95 = 4;
            v94 = cf;
LABEL_161:
            (*((void (**)(void))*v94 + v95))();
          }
          else if (v117)
          {
            v95 = 5;
            goto LABEL_161;
          }
          if (v111)
            CFRelease(v111);
          v96 = (_QWORD *)v113;
          if ((_QWORD)v113)
          {
            do
            {
              v98 = (_QWORD *)*v96;
              v99 = (const void *)v96[2];
              if (v99)
                CFRelease(v99);
              operator delete(v96);
              v96 = v98;
            }
            while (v98);
          }
          v97 = __s1[0];
          __s1[0] = 0;
          if (v97)
            operator delete(v97);
        }
        v35 = sub_19C3C9650(v44, a3, a4, a5, v105);
        if (!(_DWORD)v35)
        {
          if (*(_DWORD *)(a1 + 12) == 1)
          {
            v40 = sub_19C3BE248(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 464), v7);
          }
          else
          {
            v100 = *(_QWORD **)(a1 + 16);
            if (a6 == 2)
              v40 = sub_19C32F42C(v100, v7);
            else
              v40 = sub_19C31939C(v100, v7, 0);
          }
LABEL_176:
          v35 = v40;
        }
        goto LABEL_177;
      }
    }
  }
LABEL_40:
  if (*(_DWORD *)(a1 + 12) == 1)
  {
    v33 = sub_19C3BE248(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 464), v7);
  }
  else
  {
    v34 = *(_QWORD **)(a1 + 16);
    if (a6 == 2)
      v33 = sub_19C32F42C(v34, v7);
    else
      v33 = sub_19C31939C(v34, v7, 0);
  }
  v35 = v33;
  if (!(_DWORD)v33)
  {
    sub_19C3C9344(a1, v7);
    if (*(_DWORD *)(a1 + 8) == 1)
    {
      if (*(_BYTE *)(a1 + 32) || (v38 = *(_QWORD *)(a1 + 40), v39 = *(_QWORD *)(a1 + 48), v38 == v39))
      {
        v35 = 0;
        goto LABEL_177;
      }
      while (*(_DWORD *)(v38 + 16))
      {
        v35 = 0;
        v38 += 32;
        if (v38 == v39)
          goto LABEL_177;
      }
    }
    v40 = sub_19C3C9650((unsigned int **)(a1 + 40), a3, a4, a5, *(_QWORD **)(a1 + 16));
    goto LABEL_176;
  }
LABEL_177:
  if (theArray)
    CFRelease(theArray);
  if (v110)
    CFRelease(v110);
  return v35;
}

void sub_19C3C909C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, int a15, __int16 a16, char a17, char a18, CFTypeRef cf, void *__p,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,CFTypeRef a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  if (a2)
    sub_19C2CDAC8(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C3C92C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(unsigned int *)(a2 + 24);
  switch((int)v2)
  {
    case 0:
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
    case 1:
      goto LABEL_4;
    case 2:
      v2 = 2;
LABEL_4:
      result = v2;
      break;
    case 3:
      result = sub_19C3B2F0C(a2);
      break;
    default:
      __assert_rtn("convert", "LinguisticTokenConverter.cpp", 292, "false");
  }
  return result;
}

uint64_t sub_19C3C933C()
{
  return 1;
}

void sub_19C3C9344(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const void *v9;
  uint64_t (***v10)();
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const void *v15;
  uint64_t (***v16)();
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  const void *v20;
  _QWORD *v21;
  void *v22;
  _QWORD *v23;
  const void *v24;
  void *v25[2];
  void *__p[2];
  int v27;
  uint64_t (**v28)();
  void **v29;
  uint64_t v30;
  uint64_t (***v31)();
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(a1 + 12))
  {
    v5 = *(_QWORD *)(v4 + 464);
    v7 = *(_QWORD *)(a1 + 40);
    v8 = *(_QWORD *)(a1 + 48);
    v6 = a1 + 40;
    while (v8 != v7)
    {
      v9 = *(const void **)(v8 - 8);
      if (v9)
        CFRelease(v9);
      v8 -= 32;
    }
    *(_QWORD *)(a1 + 48) = v7;
    *(_OWORD *)v25 = 0u;
    *(_OWORD *)__p = 0u;
    v27 = 1065353216;
    v28 = &off_1E3D30950;
    v29 = v25;
    v30 = v6;
    v31 = &v28;
    sub_19C3CA568(v5, a2, 1, (uint64_t)&v28);
    v10 = v31;
    if (v31 == &v28)
    {
      v11 = 4;
      v10 = &v28;
    }
    else
    {
      if (!v31)
        goto LABEL_20;
      v11 = 5;
    }
    (*v10)[v11]();
LABEL_20:
    v18 = __p[0];
    if (__p[0])
    {
      do
      {
        v19 = (_QWORD *)*v18;
        v20 = (const void *)v18[2];
        if (v20)
          CFRelease(v20);
        operator delete(v18);
        v18 = v19;
      }
      while (v19);
    }
    goto LABEL_28;
  }
  v13 = *(_QWORD *)(a1 + 40);
  v14 = *(_QWORD *)(a1 + 48);
  v12 = a1 + 40;
  while (v14 != v13)
  {
    v15 = *(const void **)(v14 - 8);
    if (v15)
      CFRelease(v15);
    v14 -= 32;
  }
  *(_QWORD *)(a1 + 48) = v13;
  *(_OWORD *)v25 = 0u;
  *(_OWORD *)__p = 0u;
  v27 = 1065353216;
  v28 = &off_1E3D308F8;
  v29 = v25;
  v30 = v12;
  v31 = &v28;
  sub_19C36104C(v4, a2, 0, 1, (uint64_t)&v28);
  v16 = v31;
  if (v31 == &v28)
  {
    v17 = 4;
    v16 = &v28;
  }
  else
  {
    if (!v31)
      goto LABEL_27;
    v17 = 5;
  }
  (*v16)[v17]();
LABEL_27:
  v21 = __p[0];
  if (__p[0])
  {
    do
    {
      v23 = (_QWORD *)*v21;
      v24 = (const void *)v21[2];
      if (v24)
        CFRelease(v24);
      operator delete(v21);
      v21 = v23;
    }
    while (v23);
  }
LABEL_28:
  v22 = v25[0];
  v25[0] = 0;
  if (v22)
    operator delete(v22);
}

void sub_19C3C9550(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, _QWORD *__p, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  char *v17;
  char *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  const void *v23;

  v19 = a17;
  if (a17 == v17)
  {
    v20 = 4;
    v19 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  v21 = __p;
  if (__p)
  {
    do
    {
      v22 = (_QWORD *)*v21;
      v23 = (const void *)v21[2];
      if (v23)
        CFRelease(v23);
      operator delete(v21);
      v21 = v22;
    }
    while (v22);
  }
  if (a9)
  {
    operator delete(a9);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C3C9650(unsigned int **a1, const void **a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  unsigned int *v5;
  unsigned int *v6;
  const void *v8;
  const void *v9;
  double *v10;
  __n128 v14;
  uint64_t v15;
  unsigned __int8 v16;
  int v17;
  void **v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int *v21;
  const void *v22;
  const void *v23;
  NSObject *v25;
  unsigned int v26;
  void **v27;
  int64x2_t v30;
  int64x2_t v31;
  uint64_t v32;
  __int16 v33;
  char v34;
  __int128 v35;
  int v36;
  __int128 v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *__p[2];
  char v42;
  void **v43;
  _BYTE buf[32];
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v6 = *a1;
  v5 = a1[1];
  if (*a1 == v5)
    return 0;
  if ((char *)v5 - (char *)v6 == 32)
  {
    v8 = *a2;
    v9 = (const void *)*((_QWORD *)v6 + 3);
    *a2 = v9;
    if (v9)
      CFRetain(v9);
    if (v8)
      CFRelease(v8);
    v10 = (double *)*a1;
    return *(unsigned int *)v10;
  }
  v30 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  do
  {
    v31 = v30;
    v32 = 0;
    v33 = 0;
    v34 = 1;
    v14 = (__n128)xmmword_19C46DE10;
    v35 = xmmword_19C46DE10;
    v36 = 0;
    v37 = xmmword_19C46DE10;
    v38 = 0xFFEFFFFFFFFFFFFFLL;
    v39 = 0;
    v40 = 0;
    if (!a5[31] && a5[17] == a5[16] && a5[20] == a5[19] && !v6[4])
      goto LABEL_19;
    v15 = *v6;
    v16 = atomic_load((unsigned __int8 *)&qword_1EDB96E00);
    if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_1EDB96E00))
    {
      if (qword_1EDB97100 != -1)
        dispatch_once(&qword_1EDB97100, &unk_1E3D3BED0);
      qword_1EDB96E10 = qword_1EDB970F8;
      __cxa_guard_release(&qword_1EDB96E00);
    }
    *(_QWORD *)buf = a3;
    *(_QWORD *)&buf[8] = a4;
    *(_QWORD *)&buf[16] = a3;
    *(_QWORD *)&buf[24] = a4;
    v45 = a3;
    v46 = a4;
    v47 = a3;
    v48 = a4;
    v43 = 0;
    v17 = sub_19C32DD08(a5, v15 | (v15 << 32), (uint64_t *)buf, (uint64_t)&v31, qword_1EDB96E10, 1, 1, __p, v14);
    v18 = v43;
    if (v43 == __p)
    {
      v18 = __p;
      v19 = 4;
      goto LABEL_16;
    }
    if (v43)
    {
      v19 = 5;
LABEL_16:
      (*((void (**)(void))*v18 + v19))();
    }
    if (!v17)
    {
      if (qword_1EDB97228 != -1)
        dispatch_once(&qword_1EDB97228, &unk_1E3D3ABD0);
      v25 = qword_1EDB97220;
      if (os_log_type_enabled((os_log_t)qword_1EDB97220, OS_LOG_TYPE_ERROR))
      {
        v26 = *v6;
        *(_QWORD *)buf = a3;
        *(_QWORD *)&buf[8] = a4;
        sub_19C3CA1E8(__p, (uint64_t *)buf);
        v27 = v42 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "rescoreCandidates";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v26;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = v27;
        _os_log_error_impl(&dword_19C291000, v25, OS_LOG_TYPE_ERROR, "%s: Failed to calculate P( %d | [ %s ])", buf, 0x1Cu);
        if (v42 < 0)
          operator delete(__p[0]);
      }
      __assert_rtn("rescoreCandidates", "LinguisticTokenConverter.cpp", 79, "false");
    }
    *((_QWORD *)v6 + 1) = v31.i64[0];
LABEL_19:
    v6 += 8;
  }
  while (v6 != v5);
  v10 = (double *)*a1;
  v20 = a1[1];
  if (*a1 != v20)
  {
    v21 = (unsigned int *)(v10 + 4);
    if (v10 + 4 != (double *)v20)
    {
      do
      {
        if (v10[1] < *((double *)v21 + 1))
          v10 = (double *)v21;
        v21 += 8;
      }
      while (v21 != v20);
    }
  }
  if (v10 == (double *)v20)
    return 0;
  v22 = *a2;
  v23 = (const void *)*((_QWORD *)v10 + 3);
  *a2 = v23;
  if (v23)
    CFRetain(v23);
  if (v22)
    CFRelease(v22);
  return *(unsigned int *)v10;
}

void sub_19C3C99E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a2)
    sub_19C2CDAC8(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_19C3C9A48(uint64_t a1, CFTypeRef *a2, _QWORD *a3)
{
  CFHashCode v3;
  CFHashCode v7;
  unint64_t v8;
  uint8x8_t v9;
  uint64_t ***v10;
  uint64_t **v11;
  unint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  _QWORD *v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t prime;
  int8x8_t v22;
  unint64_t v23;
  uint8x8_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;

  if (*a2)
  {
    v7 = CFHash(*a2);
    v8 = *(_QWORD *)(a1 + 8);
    if (!v8)
      goto LABEL_24;
  }
  else
  {
    v7 = 0xD7C06285B9DE677ALL;
    v8 = *(_QWORD *)(a1 + 8);
    if (!v8)
      goto LABEL_24;
  }
  v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    v3 = v7;
    if (v7 >= v8)
      v3 = v7 % v8;
  }
  else
  {
    v3 = (v8 - 1) & v7;
  }
  v10 = *(uint64_t ****)(*(_QWORD *)a1 + 8 * v3);
  if (v10)
  {
    v11 = *v10;
    if (*v10)
    {
      if (v9.u32[0] < 2uLL)
      {
        while (1)
        {
          v13 = v11[1];
          if (v13 == (uint64_t *)v7)
          {
            if (sub_19C3CA0F4((const __CFString *)v11[2], (const __CFString **)a2) == kCFCompareEqualTo)
              return;
          }
          else if (((unint64_t)v13 & (v8 - 1)) != v3)
          {
            goto LABEL_24;
          }
          v11 = (uint64_t **)*v11;
          if (!v11)
            goto LABEL_24;
        }
      }
      do
      {
        v12 = (unint64_t)v11[1];
        if (v12 == v7)
        {
          if (sub_19C3CA0F4((const __CFString *)v11[2], (const __CFString **)a2) == kCFCompareEqualTo)
            return;
        }
        else
        {
          if (v12 >= v8)
            v12 %= v8;
          if (v12 != v3)
            break;
        }
        v11 = (uint64_t **)*v11;
      }
      while (v11);
    }
  }
LABEL_24:
  v14 = (_QWORD *)(a1 + 16);
  v15 = operator new(0x18uLL);
  *v15 = 0;
  v15[1] = v7;
  v15[2] = *a3;
  *a3 = 0;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v8 || (float)(v17 * (float)v8) < v16)
  {
    v18 = 1;
    if (v8 >= 3)
      v18 = (v8 & (v8 - 1)) != 0;
    v19 = v18 | (2 * v8);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      prime = v20;
    else
      prime = v19;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v22 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v22)
      goto LABEL_36;
    if (prime < *(_QWORD *)&v22)
    {
      v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v22 < 3uLL || (v24 = (uint8x8_t)vcnt_s8(v22), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        v23 = std::__next_prime(v23);
      }
      else
      {
        v25 = 1 << -(char)__clz(v23 - 1);
        if (v23 >= 2)
          v23 = v25;
      }
      if (prime <= v23)
        prime = v23;
      if (prime < *(_QWORD *)&v22)
LABEL_36:
        sub_19C2EC6BC(a1, prime);
    }
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v3 = v7 % v8;
      else
        v3 = v7;
    }
    else
    {
      v3 = (v8 - 1) & v7;
    }
  }
  v26 = *(_QWORD *)a1;
  v27 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v27)
  {
    *v15 = *v27;
LABEL_60:
    *v27 = v15;
    goto LABEL_61;
  }
  *v15 = *v14;
  *v14 = v15;
  *(_QWORD *)(v26 + 8 * v3) = v14;
  if (*v15)
  {
    v28 = *(_QWORD *)(*v15 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v28 >= v8)
        v28 %= v8;
    }
    else
    {
      v28 &= v8 - 1;
    }
    v27 = (_QWORD *)(*(_QWORD *)a1 + 8 * v28);
    goto LABEL_60;
  }
LABEL_61:
  ++*(_QWORD *)(a1 + 24);
}

void sub_19C3C9D58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C3CA19C((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_19C3C9D70(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x1E0C80C00];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_19C3C9ED8(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_19C2CDAC8(a1);
}

void sub_19C3C9EE8()
{
  JUMPOUT(0x1A1AD355CLL);
}

_QWORD *sub_19C3C9EFC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E3D306E8;
  result[1] = v3;
  return result;
}

uint64_t sub_19C3C9F30(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E3D306E8;
  a2[1] = v2;
  return result;
}

BOOL sub_19C3C9F4C(uint64_t a1, uint64_t a2)
{
  return CFStringCompare(*(CFStringRef *)(a2 + 24), **(CFStringRef **)(a1 + 8), 0) != kCFCompareEqualTo;
}

uint64_t sub_19C3C9F78(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN17language_modeling2v1L14trimCandidatesINSt3__16vectorINS0_24LinguisticTokenConverter19Conversion"
                     "CandidateENS2_9allocatorIS5_EEEEEEvRKNT_10value_typeERS9_PK9__CFArrayEUlRKS9_E1_"
    || ((v3 & (unint64_t)"ZN17language_modeling2v1L14trimCandidatesINSt3__16vectorINS0_24LinguisticTokenConverter1"
                                "9ConversionCandidateENS2_9allocatorIS5_EEEEEEvRKNT_10value_typeERS9_PK9__CFArrayEUlRKS9_E1_" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN17language_modeling2v1L14trimCandidatesINSt3__16vectorINS0_24LinguisticTokenConverter19ConversionCandidateENS2_9allocatorIS5_EEEEEEvRKNT_10value_typeERS9_PK9__CFArrayEUlRKS9_E1_")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN17language_modeling2v1L14trimCandidatesINSt3__16vectorINS0_24LinguisticTokenConverter19ConversionCandidateENS2_9allocatorIS5_EEEEEEvRKNT_10value_typeERS9_PK9__CFArrayEUlRKS9_E1_" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *sub_19C3C9FCC()
{
  return &unk_1E3D30070;
}

void sub_19C3C9FDC()
{
  JUMPOUT(0x1A1AD355CLL);
}

_QWORD *sub_19C3C9FF0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E3D30690;
  result[1] = v3;
  return result;
}

uint64_t sub_19C3CA024(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E3D30690;
  a2[1] = v2;
  return result;
}

BOOL sub_19C3CA040(uint64_t a1, uint64_t a2)
{
  uint64_t **v2;
  CFComparisonResult v4;
  _BOOL8 result;

  v2 = *(uint64_t ***)(*(_QWORD *)(a1 + 8) + 16);
  if (!v2)
    return 1;
  while (1)
  {
    v4 = CFStringCompare(*(CFStringRef *)(a2 + 24), (CFStringRef)v2[2], 0);
    result = v4 != kCFCompareEqualTo;
    if (v4 == kCFCompareEqualTo)
      break;
    v2 = (uint64_t **)*v2;
    if (!v2)
      return 1;
  }
  return result;
}

uint64_t sub_19C3CA094(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN17language_modeling2v1L14trimCandidatesINSt3__16vectorINS0_24LinguisticTokenConverter19Conversion"
                     "CandidateENS2_9allocatorIS5_EEEEEEvRKNT_10value_typeERS9_PK9__CFArrayEUlRKS9_E0_"
    || ((v3 & (unint64_t)"ZN17language_modeling2v1L14trimCandidatesINSt3__16vectorINS0_24LinguisticTokenConverter1"
                                "9ConversionCandidateENS2_9allocatorIS5_EEEEEEvRKNT_10value_typeERS9_PK9__CFArrayEUlRKS9_E0_" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN17language_modeling2v1L14trimCandidatesINSt3__16vectorINS0_24LinguisticTokenConverter19ConversionCandidateENS2_9allocatorIS5_EEEEEEvRKNT_10value_typeERS9_PK9__CFArrayEUlRKS9_E0_")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN17language_modeling2v1L14trimCandidatesINSt3__16vectorINS0_24LinguisticTokenConverter19ConversionCandidateENS2_9allocatorIS5_EEEEEEvRKNT_10value_typeERS9_PK9__CFArrayEUlRKS9_E0_" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *sub_19C3CA0E8()
{
  return &unk_1E3D30060;
}

CFComparisonResult sub_19C3CA0F4(const __CFString *cf, const __CFString **a2)
{
  const __CFString *v4;
  CFComparisonResult v5;

  if (cf)
  {
    CFRetain(cf);
    v4 = *a2;
    if (!v4)
    {
      v5 = kCFCompareGreaterThan;
LABEL_9:
      CFRelease(cf);
      return v5;
    }
  }
  else
  {
    v4 = *a2;
    if (!*a2)
      return 0;
  }
  CFRetain(v4);
  if (cf)
    v5 = CFStringCompare(cf, v4, 0);
  else
    v5 = kCFCompareLessThan;
  CFRelease(v4);
  if (cf)
    goto LABEL_9;
  return v5;
}

uint64_t sub_19C3CA19C(uint64_t a1)
{
  _QWORD *v2;
  const void *v3;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = (const void *)v2[2];
      if (v3)
        CFRelease(v3);
    }
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_19C3CA1E8(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  std::ios_base *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  const void **v13;
  uint64_t v14;
  size_t v15;
  void **p_dst;
  unint64_t v17;
  const void **v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  size_t v23;
  const void *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _BYTE *v29;
  void **__dst;
  size_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE v35[16];
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  void *__p[2];
  __int128 v40;
  int v41;
  uint64_t v42[20];

  v4 = MEMORY[0x1E0DE4FE0];
  v5 = MEMORY[0x1E0DE4FE0] + 64;
  v6 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v42[0] = MEMORY[0x1E0DE4FE0] + 64;
  v33 = v7;
  *(uint64_t *)((char *)&v33 + *(_QWORD *)(v7 - 24)) = v8;
  v9 = (std::ios_base *)((char *)&v33 + *(_QWORD *)(v33 - 24));
  std::ios_base::init(v9, &v34);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  v33 = v4 + 24;
  v42[0] = v5;
  std::streambuf::basic_streambuf();
  v10 = MEMORY[0x1E0DE4FB8];
  v34 = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v40 = 0u;
  v41 = 16;
  v11 = a2[1];
  if (!v11)
    goto LABEL_27;
  v29 = a1;
  v12 = *a2;
  v13 = (const void **)v35;
  v14 = 4 * v11;
  do
  {
    if ((v41 & 0x10) != 0)
    {
      v17 = *((_QWORD *)&v40 + 1);
      v18 = (const void **)&v37;
      if (*((_QWORD *)&v40 + 1) < v38)
      {
        *((_QWORD *)&v40 + 1) = v38;
        v17 = v38;
        v18 = (const void **)&v37;
      }
    }
    else
    {
      if ((v41 & 8) == 0)
      {
        v15 = 0;
        HIBYTE(v32) = 0;
        p_dst = (void **)&__dst;
        goto LABEL_17;
      }
      v17 = v36;
      v18 = (const void **)v35;
    }
    v19 = *v18;
    v15 = v17 - (_QWORD)*v18;
    if (v15 > 0x7FFFFFFFFFFFFFF7)
      sub_19C2A1A54();
    if (v15 >= 0x17)
    {
      v20 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v15 | 7) != 0x17)
        v20 = v15 | 7;
      v21 = v20 + 1;
      p_dst = (void **)operator new(v20 + 1);
      v31 = v15;
      v32 = v21 | 0x8000000000000000;
      __dst = p_dst;
LABEL_16:
      memmove(p_dst, v19, v15);
      goto LABEL_17;
    }
    HIBYTE(v32) = v17 - *(_BYTE *)v18;
    p_dst = (void **)&__dst;
    if (v15)
      goto LABEL_16;
LABEL_17:
    *((_BYTE *)p_dst + v15) = 0;
    if (SHIBYTE(v32) < 0)
    {
      v22 = v31;
      operator delete(__dst);
      if (!v22)
        goto LABEL_22;
LABEL_21:
      sub_19C2A1B24(&v33, (uint64_t)" ", 1);
      goto LABEL_22;
    }
    if (HIBYTE(v32))
      goto LABEL_21;
LABEL_22:
    std::ostream::operator<<();
    v12 += 4;
    v14 -= 4;
  }
  while (v14);
  v6 = (uint64_t *)MEMORY[0x1E0DE4F60];
  if ((v41 & 0x10) != 0)
  {
    v11 = *((_QWORD *)&v40 + 1);
    a1 = v29;
    v10 = MEMORY[0x1E0DE4FB8];
LABEL_27:
    if (v11 < v38)
    {
      *((_QWORD *)&v40 + 1) = v38;
      v11 = v38;
    }
    v13 = (const void **)&v37;
    goto LABEL_30;
  }
  a1 = v29;
  v10 = MEMORY[0x1E0DE4FB8];
  if ((v41 & 8) == 0)
  {
    v23 = 0;
    v29[23] = 0;
    goto LABEL_38;
  }
  v11 = v36;
LABEL_30:
  v24 = *v13;
  v23 = v11 - (_QWORD)*v13;
  if (v23 > 0x7FFFFFFFFFFFFFF7)
    sub_19C2A1A54();
  if (v23 >= 0x17)
  {
    v25 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v23 | 7) != 0x17)
      v25 = v23 | 7;
    v26 = v25 + 1;
    v27 = operator new(v25 + 1);
    a1[1] = v23;
    a1[2] = v26 | 0x8000000000000000;
    *a1 = v27;
    a1 = v27;
    goto LABEL_37;
  }
  *((_BYTE *)a1 + 23) = v23;
  if (v23)
LABEL_37:
    memmove(a1, v24, v23);
LABEL_38:
  *((_BYTE *)a1 + v23) = 0;
  v33 = *v6;
  *(uint64_t *)((char *)&v33 + *(_QWORD *)(v33 - 24)) = v6[3];
  v34 = v10 + 16;
  if (SBYTE7(v40) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A1AD34CC](v42);
}

void sub_19C3CA520(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x1A1AD34CC](v1);
  _Unwind_Resume(a1);
}

void sub_19C3CA548(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_19C2B39CC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19C3CA568(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t *v17;
  void *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  CFTypeRef cf;
  uint64_t v30;
  void *__p;
  uint64_t *v32;
  char v33;
  int v34;
  _BYTE v35[24];
  _BYTE *v36;
  _BYTE v37[24];
  _BYTE *v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  cf = 0;
  v30 = a3;
  v7 = operator new(0x28uLL);
  *v7 = &off_1E3D305E0;
  v7[1] = &cf;
  v7[2] = a2;
  v7[3] = &v30;
  v7[4] = a4;
  v36 = v7;
  std::recursive_mutex::lock((std::recursive_mutex *)a1);
  v8 = *(_QWORD *)(a1 + 104);
  for (i = *(_QWORD *)(a1 + 112); v8 != i; v8 += 16)
  {
    if (sub_19C3C1838(a2, *(_QWORD *)(*(_QWORD *)v8 + 8), *(_QWORD *)(*(_QWORD *)v8 + 16), (uint64_t)v35))
      goto LABEL_37;
  }
  v10 = *(_QWORD *)(a1 + 128);
  if (v10)
  {
    sub_19C3BE128(&__p, v10 + 616);
    v11 = (uint64_t *)__p;
    v12 = v32;
    if (__p != v32)
    {
      while (1)
      {
        v13 = *v11;
        v34 = 1;
        v33 = 0;
        v14 = operator new(0x28uLL);
        *v14 = &off_1E3D30A58;
        v14[1] = v35;
        v14[2] = &v34;
        v14[3] = v13;
        v14[4] = &v33;
        v38 = v14;
        (*(void (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v13 + 48))(v13, a2, v37);
        v15 = v38;
        if (v38 == v37)
        {
          v15 = v37;
          v16 = 4;
        }
        else
        {
          if (!v38)
            goto LABEL_11;
          v16 = 5;
        }
        (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_11:
        if (v33)
        {
          v22 = (uint64_t *)__p;
          if (__p)
          {
            v23 = v32;
            v18 = __p;
            if (v32 != __p)
            {
              do
              {
                v24 = (std::__shared_weak_count *)*(v23 - 1);
                if (v24)
                {
                  p_shared_owners = (unint64_t *)&v24->__shared_owners_;
                  do
                    v26 = __ldaxr(p_shared_owners);
                  while (__stlxr(v26 - 1, p_shared_owners));
                  if (!v26)
                  {
                    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
                    std::__shared_weak_count::__release_weak(v24);
                  }
                }
                v23 -= 2;
              }
              while (v23 != v22);
              v18 = __p;
            }
            v32 = v22;
LABEL_36:
            operator delete(v18);
          }
          goto LABEL_37;
        }
        v11 += 2;
        if (v11 == v12)
        {
          v11 = (uint64_t *)__p;
          break;
        }
      }
    }
    if (v11)
    {
      v17 = v32;
      v18 = v11;
      if (v32 != v11)
      {
        do
        {
          v19 = (std::__shared_weak_count *)*(v17 - 1);
          if (v19)
          {
            v20 = (unint64_t *)&v19->__shared_owners_;
            do
              v21 = __ldaxr(v20);
            while (__stlxr(v21 - 1, v20));
            if (!v21)
            {
              ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
              std::__shared_weak_count::__release_weak(v19);
            }
          }
          v17 -= 2;
        }
        while (v17 != v11);
        v18 = __p;
      }
      v32 = v11;
      goto LABEL_36;
    }
  }
LABEL_37:
  std::recursive_mutex::unlock((std::recursive_mutex *)a1);
  v27 = v36;
  if (v36 == v35)
  {
    v28 = 4;
    v27 = v35;
  }
  else
  {
    if (!v36)
      goto LABEL_42;
    v28 = 5;
  }
  (*(void (**)(void))(*v27 + 8 * v28))();
LABEL_42:
  if (cf)
    CFRelease(cf);
}

void sub_19C3CA820(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char *a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  std::recursive_mutex *v23;
  char *v25;
  uint64_t v26;

  std::recursive_mutex::unlock(v23);
  v25 = a19;
  if (a19 == &a16)
  {
    v26 = 4;
    v25 = &a16;
  }
  else
  {
    if (!a19)
      goto LABEL_6;
    v26 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v25 + 8 * v26))();
LABEL_6:
  sub_19C2E5670(&a10);
  _Unwind_Resume(a1);
}

void sub_19C3CA8DC()
{
  JUMPOUT(0x1A1AD355CLL);
}

__n128 sub_19C3CA8F0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E3D305E0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_19C3CA930(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E3D305E0;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

CFComparisonResult sub_19C3CA958(uint64_t a1, const __CFString **a2, int *a3, uint64_t *a4, int *a5, const __CFLocale **a6, uint64_t a7)
{
  const __CFString *v9;
  int v10;
  uint64_t v11;
  int v12;
  const __CFLocale *v13;
  uint64_t v14;
  int v15;
  const UInt8 *v16;
  CFIndex v17;
  CFStringRef v18;
  CFStringRef v19;
  const void **v20;
  const void *v21;
  const __CFString *v22;
  CFComparisonResult result;
  uint64_t v24;
  uint64_t v25;
  void *exception;
  const __CFLocale *v27;
  int v28;
  uint64_t v29;
  int v30;
  const __CFString *v31;
  CFRange v32;

  v9 = *a2;
  v10 = *a3;
  v11 = *a4;
  v12 = *a5;
  v13 = *a6;
  if (!**(_QWORD **)(a1 + 8))
  {
    v14 = *(_QWORD *)(a1 + 16);
    v15 = *(char *)(v14 + 23);
    if (v15 >= 0)
      v16 = *(const UInt8 **)(a1 + 16);
    else
      v16 = *(const UInt8 **)v14;
    if (v15 >= 0)
      v17 = *(unsigned __int8 *)(v14 + 23);
    else
      v17 = *(_QWORD *)(v14 + 8);
    v18 = CFStringCreateWithBytes(0, v16, v17, 0x8000100u, 0);
    if (!v18)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1A1AD3154](exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
    }
    v19 = v18;
    v20 = *(const void ***)(a1 + 8);
    v21 = *v20;
    *v20 = v19;
    if (v21)
      CFRelease(v21);
  }
  v22 = **(const __CFString ***)(a1 + 8);
  v32.length = CFStringGetLength(v22);
  v32.location = 0;
  result = CFStringCompareWithOptionsAndLocale(v22, v9, v32, **(_QWORD **)(a1 + 24), v13);
  if (result == kCFCompareEqualTo)
  {
    v24 = *(_QWORD *)(a1 + 32);
    v31 = v9;
    v30 = v10;
    v29 = v11;
    v28 = v12;
    v27 = v13;
    v25 = *(_QWORD *)(v24 + 24);
    if (!v25)
      sub_19C2CCC60();
    return (*(uint64_t (**)(uint64_t, const __CFString **, int *, uint64_t *, int *, const __CFLocale **, uint64_t))(*(_QWORD *)v25 + 48))(v25, &v31, &v30, &v29, &v28, &v27, a7);
  }
  return result;
}

void sub_19C3CAAB8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19C3CAAD0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN17language_modeling2v133enumerateComparableLexiconEntriesIN2LM32MultilingualDynamicLanguageModelE"
                     "EEvRKT_RKNSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEENS2_22TokenEnumerationPoli"
                     "cyEmRKNS7_8functionIFvPK10__CFStringjdNS2_13SourceLexiconEPK10__CFLocaleRbEEEEUlSK_jdSL_SO_SP_E_"
    || ((v3 & (unint64_t)"ZN17language_modeling2v133enumerateComparableLexiconEntriesIN2LM32MultilingualDynamicLan"
                                "guageModelEEEvRKT_RKNSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEENS2_"
                                "22TokenEnumerationPolicyEmRKNS7_8functionIFvPK10__CFStringjdNS2_13SourceLexiconEPK10__CF"
                                "LocaleRbEEEEUlSK_jdSL_SO_SP_E_" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN17language_modeling2v133enumerateComparableLexiconEntriesIN2LM32MultilingualDynamicLanguageModelEEEvRKT_RKNSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEENS2_22TokenEnumerationPolicyEmRKNS7_8functionIFvPK10__CFStringjdNS2_13SourceLexiconEPK10__CFLocaleRbEEEEUlSK_jdSL_SO_SP_E_")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN17language_modeling2v133enumerateComparableLexiconEntriesIN2LM32MultilingualDynamicLanguageModelEEEvRKT_RKNSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEENS2_22TokenEnumerationPolicyEmRKNS7_8functionIFvPK10__CFStringjdNS2_13SourceLexiconEPK10__CFLocaleRbEEEEUlSK_jdSL_SO_SP_E_" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *sub_19C3CAB24()
{
  return &unk_1E3D30050;
}

void sub_19C3CAB34()
{
  JUMPOUT(0x1A1AD355CLL);
}

__n128 sub_19C3CAB48(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E3D30950;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_19C3CAB80(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E3D30950;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_19C3CABA0(uint64_t a1, CFTypeRef *a2, int *a3, uint64_t *a4, int *a5, const __CFLocale **a6)
{
  CFTypeRef v7;
  int v8;
  uint64_t v9;
  int v10;
  const __CFLocale *v11;
  BOOL v12;
  uint64_t v13;
  unint64_t v14;
  __int128 v15;
  char *v16;
  CFTypeRef v17;
  __int128 v18;
  int v19;
  CFTypeRef v20;
  CFTypeRef cf;
  CFTypeRef v22;

  v7 = *a2;
  v8 = *a3;
  v9 = *a4;
  v10 = *a5;
  v11 = *a6;
  if (*a2)
  {
    CFRetain(*a2);
    sub_19C297DB4(&v22, v7);
    if (sub_19C3CADC4(*(_QWORD **)(a1 + 8), &v22))
      goto LABEL_15;
    CFRetain(v7);
  }
  else
  {
    v22 = 0;
    if (sub_19C3CADC4(*(_QWORD **)(a1 + 8), &v22))
      goto LABEL_15;
  }
  sub_19C297DB4(&cf, v7);
  v12 = sub_19C433414((CFStringRef *)&cf, v11);
  if (cf)
    CFRelease(cf);
  if (!v12)
  {
    v13 = *(_QWORD *)(a1 + 16);
    LODWORD(v18) = v8;
    *((_QWORD *)&v18 + 1) = v9;
    v19 = v10;
    if (v7)
      CFRetain(v7);
    sub_19C297DB4(&v20, v7);
    v14 = *(_QWORD *)(v13 + 8);
    if (v14 >= *(_QWORD *)(v13 + 16))
    {
      v16 = sub_19C3CAF00((void **)v13, (uint64_t)&v18);
      v17 = v20;
      *(_QWORD *)(v13 + 8) = v16;
      if (v17)
        CFRelease(v17);
    }
    else
    {
      v15 = v18;
      *(_DWORD *)(v14 + 16) = v19;
      *(_OWORD *)v14 = v15;
      *(_QWORD *)(v14 + 24) = v20;
      *(_QWORD *)(v13 + 8) = v14 + 32;
    }
    sub_19C3CB034(*(_QWORD *)(a1 + 8), &v22, &v22);
  }
LABEL_15:
  if (v22)
    CFRelease(v22);
}

void sub_19C3CAD00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, CFTypeRef cf, CFTypeRef a13, CFTypeRef a14)
{
  if (cf)
    CFRelease(cf);
  if (a14)
    CFRelease(a14);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C3CAD64(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN17language_modeling2v1L23getConversionCandidatesINSt3__16vectorINS0_24LinguisticTokenConverter19C"
                     "onversionCandidateENS2_9allocatorIS5_EEEEN2LM32MultilingualDynamicLanguageModelEEEvRKNS2_12basic_st"
                     "ringIcNS2_11char_traitsIcEENS6_IcEEEERT0_RT_EUlPK10__CFStringjdNS9_13SourceLexiconEPK10__CFLocaleRbE_"
    || ((v3 & (unint64_t)"ZN17language_modeling2v1L23getConversionCandidatesINSt3__16vectorINS0_24LinguisticTokenC"
                                "onverter19ConversionCandidateENS2_9allocatorIS5_EEEEN2LM32MultilingualDynamicLanguageMod"
                                "elEEEvRKNS2_12basic_stringIcNS2_11char_traitsIcEENS6_IcEEEERT0_RT_EUlPK10__CFStringjdNS9"
                                "_13SourceLexiconEPK10__CFLocaleRbE_" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN17language_modeling2v1L23getConversionCandidatesINSt3__16vectorINS0_24LinguisticTokenConverter19ConversionCandidateENS2_9allocatorIS5_EEEEN2LM32MultilingualDynamicLanguageModelEEEvRKNS2_12basic_stringIcNS2_11char_traitsIcEENS6_IcEEEERT0_RT_EUlPK10__CFStringjdNS9_13SourceLexiconEPK10__CFLocaleRbE_")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN17language_modeling2v1L23getConversionCandidatesINSt3__16vectorINS0_24LinguisticTokenConverter19ConversionCandidateENS2_9allocatorIS5_EEEEN2LM32MultilingualDynamicLanguageModelEEEvRKNS2_12basic_stringIcNS2_11char_traitsIcEENS6_IcEEEERT0_RT_EUlPK10__CFStringjdNS9_13SourceLexiconEPK10__CFLocaleRbE_" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *sub_19C3CADB8()
{
  return &unk_1E3D300E0;
}

uint64_t **sub_19C3CADC4(_QWORD *a1, CFTypeRef *a2)
{
  CFHashCode v4;
  int8x8_t v5;
  uint8x8_t v6;
  CFHashCode v7;
  uint64_t ***v8;
  uint64_t **v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;

  if (*a2)
  {
    v4 = CFHash(*a2);
    v5 = (int8x8_t)a1[1];
    if (!*(_QWORD *)&v5)
      return 0;
  }
  else
  {
    v4 = 0xD7C06285B9DE677ALL;
    v5 = (int8x8_t)a1[1];
    if (!*(_QWORD *)&v5)
      return 0;
  }
  v6 = (uint8x8_t)vcnt_s8(v5);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v7 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v7 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v8 = *(uint64_t ****)(*a1 + 8 * v7);
  if (!v8)
    return 0;
  v9 = *v8;
  if (*v8)
  {
    if (v6.u32[0] < 2uLL)
    {
      v10 = *(_QWORD *)&v5 - 1;
      while (1)
      {
        v12 = v9[1];
        if (v12 == (uint64_t *)v4)
        {
          if (sub_19C3CA0F4((const __CFString *)v9[2], (const __CFString **)a2) == kCFCompareEqualTo)
            return v9;
        }
        else if (((unint64_t)v12 & v10) != v7)
        {
          return 0;
        }
        v9 = (uint64_t **)*v9;
        if (!v9)
          return v9;
      }
    }
    do
    {
      v11 = (unint64_t)v9[1];
      if (v11 == v4)
      {
        if (sub_19C3CA0F4((const __CFString *)v9[2], (const __CFString **)a2) == kCFCompareEqualTo)
          return v9;
      }
      else
      {
        if (v11 >= *(_QWORD *)&v5)
          v11 %= *(_QWORD *)&v5;
        if (v11 != v7)
          return 0;
      }
      v9 = (uint64_t **)*v9;
    }
    while (v9);
  }
  return v9;
}

char *sub_19C3CAF00(void **a1, uint64_t a2)
{
  _BYTE *v2;
  _BYTE *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  __int128 v15;
  char *v16;
  char *v17;
  const void *v18;

  v2 = *a1;
  v3 = a1[1];
  v4 = (v3 - (_BYTE *)*a1) >> 5;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59)
    sub_19C2A18E8();
  v7 = (_BYTE *)a1[2] - v2;
  if (v7 >> 4 > v5)
    v5 = v7 >> 4;
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFE0)
    v5 = 0x7FFFFFFFFFFFFFFLL;
  if (v5 >> 59)
    sub_19C2A143C();
  v9 = 32 * v5;
  v10 = (char *)operator new(32 * v5);
  v11 = &v10[32 * v4];
  v12 = &v10[v9];
  *(_OWORD *)v11 = *(_OWORD *)a2;
  *((_DWORD *)v11 + 4) = *(_DWORD *)(a2 + 16);
  *((_QWORD *)v11 + 3) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = 0;
  v13 = v11 + 32;
  if (v3 == v2)
  {
    v14 = &v10[32 * v4];
  }
  else
  {
    do
    {
      v14 = v11 - 32;
      v15 = *((_OWORD *)v3 - 2);
      *((_DWORD *)v11 - 4) = *((_DWORD *)v3 - 4);
      *((_OWORD *)v11 - 2) = v15;
      *((_QWORD *)v11 - 1) = *((_QWORD *)v3 - 1);
      *((_QWORD *)v3 - 1) = 0;
      v11 -= 32;
      v3 -= 32;
    }
    while (v3 != v2);
  }
  v16 = (char *)*a1;
  v17 = (char *)a1[1];
  *a1 = v14;
  a1[1] = v13;
  a1[2] = v12;
  while (v17 != v16)
  {
    v18 = (const void *)*((_QWORD *)v17 - 1);
    if (v18)
      CFRelease(v18);
    v17 -= 32;
  }
  if (v16)
    operator delete(v16);
  return v13;
}

void sub_19C3CB034(uint64_t a1, CFTypeRef *a2, const void **a3)
{
  CFHashCode v3;
  CFHashCode v7;
  unint64_t v8;
  uint8x8_t v9;
  uint64_t ***v10;
  uint64_t **v11;
  unint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  _QWORD *v15;
  const void *v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t prime;
  int8x8_t v23;
  unint64_t v24;
  uint8x8_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;

  if (*a2)
  {
    v7 = CFHash(*a2);
    v8 = *(_QWORD *)(a1 + 8);
    if (!v8)
      goto LABEL_24;
  }
  else
  {
    v7 = 0xD7C06285B9DE677ALL;
    v8 = *(_QWORD *)(a1 + 8);
    if (!v8)
      goto LABEL_24;
  }
  v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    v3 = v7;
    if (v7 >= v8)
      v3 = v7 % v8;
  }
  else
  {
    v3 = (v8 - 1) & v7;
  }
  v10 = *(uint64_t ****)(*(_QWORD *)a1 + 8 * v3);
  if (v10)
  {
    v11 = *v10;
    if (*v10)
    {
      if (v9.u32[0] < 2uLL)
      {
        while (1)
        {
          v13 = v11[1];
          if (v13 == (uint64_t *)v7)
          {
            if (sub_19C3CA0F4((const __CFString *)v11[2], (const __CFString **)a2) == kCFCompareEqualTo)
              return;
          }
          else if (((unint64_t)v13 & (v8 - 1)) != v3)
          {
            goto LABEL_24;
          }
          v11 = (uint64_t **)*v11;
          if (!v11)
            goto LABEL_24;
        }
      }
      do
      {
        v12 = (unint64_t)v11[1];
        if (v12 == v7)
        {
          if (sub_19C3CA0F4((const __CFString *)v11[2], (const __CFString **)a2) == kCFCompareEqualTo)
            return;
        }
        else
        {
          if (v12 >= v8)
            v12 %= v8;
          if (v12 != v3)
            break;
        }
        v11 = (uint64_t **)*v11;
      }
      while (v11);
    }
  }
LABEL_24:
  v14 = (_QWORD *)(a1 + 16);
  v15 = operator new(0x18uLL);
  *v15 = 0;
  v15[1] = v7;
  v16 = *a3;
  if (v16)
    CFRetain(v16);
  v15[2] = v16;
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v8 || (float)(v18 * (float)v8) < v17)
  {
    v19 = 1;
    if (v8 >= 3)
      v19 = (v8 & (v8 - 1)) != 0;
    v20 = v19 | (2 * v8);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      prime = v21;
    else
      prime = v20;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v23 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v23)
      goto LABEL_38;
    if (prime < *(_QWORD *)&v23)
    {
      v24 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v23 < 3uLL || (v25 = (uint8x8_t)vcnt_s8(v23), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        v24 = std::__next_prime(v24);
      }
      else
      {
        v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2)
          v24 = v26;
      }
      if (prime <= v24)
        prime = v24;
      if (prime < *(_QWORD *)&v23)
LABEL_38:
        sub_19C2EC6BC(a1, prime);
    }
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v3 = v7 % v8;
      else
        v3 = v7;
    }
    else
    {
      v3 = (v8 - 1) & v7;
    }
  }
  v27 = *(_QWORD *)a1;
  v28 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v28)
  {
    *v15 = *v28;
LABEL_62:
    *v28 = v15;
    goto LABEL_63;
  }
  *v15 = *v14;
  *v14 = v15;
  *(_QWORD *)(v27 + 8 * v3) = v14;
  if (*v15)
  {
    v29 = *(_QWORD *)(*v15 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v29 >= v8)
        v29 %= v8;
    }
    else
    {
      v29 &= v8 - 1;
    }
    v28 = (_QWORD *)(*(_QWORD *)a1 + 8 * v29);
    goto LABEL_62;
  }
LABEL_63:
  ++*(_QWORD *)(a1 + 24);
}

void sub_19C3CB34C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C3CA19C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19C3CB36C()
{
  JUMPOUT(0x1A1AD355CLL);
}

__n128 sub_19C3CB380(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E3D308F8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_19C3CB3B8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E3D308F8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_19C3CB3D8(uint64_t a1, CFTypeRef *a2, int *a3, uint64_t *a4, int *a5, const __CFLocale **a6)
{
  CFTypeRef v7;
  int v8;
  uint64_t v9;
  int v10;
  const __CFLocale *v11;
  BOOL v12;
  uint64_t v13;
  unint64_t v14;
  __int128 v15;
  char *v16;
  CFTypeRef v17;
  __int128 v18;
  int v19;
  CFTypeRef v20;
  CFTypeRef cf;
  CFTypeRef v22;

  v7 = *a2;
  v8 = *a3;
  v9 = *a4;
  v10 = *a5;
  v11 = *a6;
  if (*a2)
  {
    CFRetain(*a2);
    sub_19C297DB4(&v22, v7);
    if (sub_19C3CADC4(*(_QWORD **)(a1 + 8), &v22))
      goto LABEL_15;
    CFRetain(v7);
  }
  else
  {
    v22 = 0;
    if (sub_19C3CADC4(*(_QWORD **)(a1 + 8), &v22))
      goto LABEL_15;
  }
  sub_19C297DB4(&cf, v7);
  v12 = sub_19C433414((CFStringRef *)&cf, v11);
  if (cf)
    CFRelease(cf);
  if (!v12)
  {
    v13 = *(_QWORD *)(a1 + 16);
    LODWORD(v18) = v8;
    *((_QWORD *)&v18 + 1) = v9;
    v19 = v10;
    if (v7)
      CFRetain(v7);
    sub_19C297DB4(&v20, v7);
    v14 = *(_QWORD *)(v13 + 8);
    if (v14 >= *(_QWORD *)(v13 + 16))
    {
      v16 = sub_19C3CAF00((void **)v13, (uint64_t)&v18);
      v17 = v20;
      *(_QWORD *)(v13 + 8) = v16;
      if (v17)
        CFRelease(v17);
    }
    else
    {
      v15 = v18;
      *(_DWORD *)(v14 + 16) = v19;
      *(_OWORD *)v14 = v15;
      *(_QWORD *)(v14 + 24) = v20;
      *(_QWORD *)(v13 + 8) = v14 + 32;
    }
    sub_19C3CB034(*(_QWORD *)(a1 + 8), &v22, &v22);
  }
LABEL_15:
  if (v22)
    CFRelease(v22);
}

void sub_19C3CB538(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, CFTypeRef cf, CFTypeRef a13, CFTypeRef a14)
{
  if (cf)
    CFRelease(cf);
  if (a14)
    CFRelease(a14);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C3CB59C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN17language_modeling2v1L23getConversionCandidatesINSt3__16vectorINS0_24LinguisticTokenConverter19C"
                     "onversionCandidateENS2_9allocatorIS5_EEEEN2LM22CompositeLanguageModelEEEvRKNS2_12basic_stringIcNS2_"
                     "11char_traitsIcEENS6_IcEEEERT0_RT_EUlPK10__CFStringjdNS9_13SourceLexiconEPK10__CFLocaleRbE_"
    || ((v3 & (unint64_t)"ZN17language_modeling2v1L23getConversionCandidatesINSt3__16vectorINS0_24LinguisticTokenC"
                                "onverter19ConversionCandidateENS2_9allocatorIS5_EEEEN2LM22CompositeLanguageModelEEEvRKNS"
                                "2_12basic_stringIcNS2_11char_traitsIcEENS6_IcEEEERT0_RT_EUlPK10__CFStringjdNS9_13SourceL"
                                "exiconEPK10__CFLocaleRbE_" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN17language_modeling2v1L23getConversionCandidatesINSt3__16vectorINS0_24LinguisticTokenConverter19ConversionCandidateENS2_9allocatorIS5_EEEEN2LM22CompositeLanguageModelEEEvRKNS2_12basic_stringIcNS2_11char_traitsIcEENS6_IcEEEERT0_RT_EUlPK10__CFStringjdNS9_13SourceLexiconEPK10__CFLocaleRbE_")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN17language_modeling2v1L23getConversionCandidatesINSt3__16vectorINS0_24LinguisticTokenConverter19ConversionCandidateENS2_9allocatorIS5_EEEEN2LM22CompositeLanguageModelEEEvRKNS2_12basic_stringIcNS2_11char_traitsIcEENS6_IcEEEERT0_RT_EUlPK10__CFStringjdNS9_13SourceLexiconEPK10__CFLocaleRbE_" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *sub_19C3CB5F0()
{
  return &unk_1E3D300D0;
}

void sub_19C3CB600()
{
  JUMPOUT(0x1A1AD355CLL);
}

_QWORD *sub_19C3CB614(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E3D30B60;
  result[1] = v3;
  return result;
}

uint64_t sub_19C3CB648(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E3D30B60;
  a2[1] = v2;
  return result;
}

uint64_t sub_19C3CB664(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), a2, a3, *a5, a5[1], 3);
}

uint64_t sub_19C3CB67C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK17language_modeling2v124LinguisticTokenConverter7convertERNS0_13TokenSequenceEE3$_0"
    || ((v3 & (unint64_t)"ZNK17language_modeling2v124LinguisticTokenConverter7convertERNS0_13TokenSequenceEE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZNK17language_modeling2v124LinguisticTokenConverter7convertERNS0_13TokenSequenceEE3$_0")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK17language_modeling2v124LinguisticTokenConverter7convertERNS0_13TokenSequenceEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *sub_19C3CB6D0()
{
  return &unk_1E3D335D0;
}

void sub_19C3CB6E0()
{
  JUMPOUT(0x1A1AD355CLL);
}

_QWORD *sub_19C3CB6F4()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E3D38F28;
  return result;
}

void sub_19C3CB718(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E3D38F28;
}

BOOL sub_19C3CB730(uint64_t a1, _DWORD *a2)
{
  return *a2 == 0;
}

uint64_t sub_19C3CB740(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK17language_modeling2v124LinguisticTokenConverter7convertERNS0_13TokenSequenceEE3$_1"
    || ((v3 & (unint64_t)"ZNK17language_modeling2v124LinguisticTokenConverter7convertERNS0_13TokenSequenceEE3$_1" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZNK17language_modeling2v124LinguisticTokenConverter7convertERNS0_13TokenSequenceEE3$_1")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK17language_modeling2v124LinguisticTokenConverter7convertERNS0_13TokenSequenceEE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *sub_19C3CB794()
{
  return &unk_1E3D335E0;
}

void sub_19C3CB7A4()
{
  JUMPOUT(0x1A1AD355CLL);
}

BOOL sub_19C3CB7B8(uint64_t a1)
{
  _QWORD *v1;
  unint64_t v2;

  v1 = *(_QWORD **)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16) + 1;
  *(_QWORD *)(a1 + 16) = v2;
  return v2 < (uint64_t)(v1[1] - *v1) >> 2;
}

uint64_t sub_19C3CB7D8(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  if (a2)
    *a2 = *(_DWORD *)(**(_QWORD **)(a1 + 8) + 4 * *(_QWORD *)(a1 + 16));
  if (a3)
  {
    v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24) + 120 * *(_QWORD *)(a1 + 16);
    v5 = *(_OWORD *)(v3 + 80);
    v4 = *(_OWORD *)(v3 + 96);
    v6 = *(_OWORD *)(v3 + 64);
    *(_QWORD *)(a3 + 112) = *(_QWORD *)(v3 + 112);
    *(_OWORD *)(a3 + 80) = v5;
    *(_OWORD *)(a3 + 96) = v4;
    *(_OWORD *)(a3 + 64) = v6;
    v7 = *(_OWORD *)v3;
    v8 = *(_OWORD *)(v3 + 16);
    v9 = *(_OWORD *)(v3 + 48);
    *(_OWORD *)(a3 + 32) = *(_OWORD *)(v3 + 32);
    *(_OWORD *)(a3 + 48) = v9;
    *(_OWORD *)a3 = v7;
    *(_OWORD *)(a3 + 16) = v8;
  }
  return 1;
}

void sub_19C3CB830(void **a1, unint64_t a2)
{
  _BYTE *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  int64x2_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  int64x2_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;

  v5 = (char *)a1[1];
  v4 = a1[2];
  if (0xEEEEEEEEEEEEEEEFLL * ((v4 - v5) >> 3) >= a2)
  {
    if (a2)
    {
      v11 = &v5[120 * a2];
      v12 = 120 * a2;
      v13 = v5 + 64;
      v14 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
      do
      {
        *(_OWORD *)(v13 - 40) = 0uLL;
        *(_OWORD *)(v13 - 24) = 0uLL;
        *(_OWORD *)(v13 - 8) = 0uLL;
        *(_OWORD *)(v13 + 8) = 0uLL;
        *(_OWORD *)(v13 + 24) = 0uLL;
        *(_OWORD *)(v13 + 40) = 0uLL;
        *((int64x2_t *)v13 - 4) = v14;
        *((_QWORD *)v13 - 6) = 0;
        *(v13 - 32) = 1;
        *((_QWORD *)v13 - 3) = 0xFFEFFFFFFFFFFFFFLL;
        *(_QWORD *)v13 = 0xFFEFFFFFFFFFFFFFLL;
        *((_QWORD *)v13 + 2) = 0xFFEFFFFFFFFFFFFFLL;
        *((_QWORD *)v13 + 3) = 0;
        *((_QWORD *)v13 + 4) = 0;
        *((_QWORD *)v13 + 5) = 0;
        *((_WORD *)v13 + 24) = 0;
        v13 += 120;
        v12 -= 120;
      }
      while (v12);
      a1[1] = v11;
    }
    else
    {
      a1[1] = v5;
    }
  }
  else
  {
    v6 = 0xEEEEEEEEEEEEEEEFLL * ((v5 - (_BYTE *)*a1) >> 3);
    v7 = v6 + a2;
    if (v6 + a2 > 0x222222222222222)
      sub_19C2A18E8();
    v8 = 0xEEEEEEEEEEEEEEEFLL * ((v4 - (_BYTE *)*a1) >> 3);
    if (2 * v8 > v7)
      v7 = 2 * v8;
    if (v8 >= 0x111111111111111)
      v9 = 0x222222222222222;
    else
      v9 = v7;
    if (v9)
    {
      if (v9 > 0x222222222222222)
        sub_19C2A143C();
      v10 = (char *)operator new(120 * v9);
    }
    else
    {
      v10 = 0;
    }
    v15 = 0;
    v16 = &v10[120 * v6];
    v17 = &v16[120 * a2];
    v18 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
    do
    {
      v19 = &v16[v15];
      *(_OWORD *)(v19 + 24) = 0uLL;
      *(_OWORD *)(v19 + 40) = 0uLL;
      *(_OWORD *)(v19 + 56) = 0uLL;
      *(_OWORD *)(v19 + 72) = 0uLL;
      *(_OWORD *)(v19 + 88) = 0uLL;
      *(_OWORD *)(v19 + 104) = 0uLL;
      *(int64x2_t *)v19 = v18;
      *((_QWORD *)v19 + 2) = 0;
      v19[32] = 1;
      *((_QWORD *)v19 + 5) = 0xFFEFFFFFFFFFFFFFLL;
      *((_QWORD *)v19 + 8) = 0xFFEFFFFFFFFFFFFFLL;
      *((_QWORD *)v19 + 10) = 0xFFEFFFFFFFFFFFFFLL;
      *((_QWORD *)v19 + 11) = 0;
      *((_QWORD *)v19 + 12) = 0;
      *((_QWORD *)v19 + 13) = 0;
      v15 += 120;
      *((_WORD *)v19 + 56) = 0;
    }
    while (120 * a2 != v15);
    v20 = &v10[120 * v9];
    v22 = (char *)*a1;
    v21 = (char *)a1[1];
    if (v21 != *a1)
    {
      do
      {
        v23 = *(_OWORD *)(v21 - 120);
        v24 = *(_OWORD *)(v21 - 104);
        v25 = *(_OWORD *)(v21 - 88);
        *(_OWORD *)(v16 - 72) = *(_OWORD *)(v21 - 72);
        *(_OWORD *)(v16 - 88) = v25;
        *(_OWORD *)(v16 - 104) = v24;
        *(_OWORD *)(v16 - 120) = v23;
        v26 = *(_OWORD *)(v21 - 56);
        v27 = *(_OWORD *)(v21 - 40);
        v28 = *(_OWORD *)(v21 - 24);
        *((_QWORD *)v16 - 1) = *((_QWORD *)v21 - 1);
        *(_OWORD *)(v16 - 24) = v28;
        *(_OWORD *)(v16 - 40) = v27;
        *(_OWORD *)(v16 - 56) = v26;
        v16 -= 120;
        v21 -= 120;
      }
      while (v21 != v22);
      v21 = (char *)*a1;
    }
    *a1 = v16;
    a1[1] = v17;
    a1[2] = v20;
    if (v21)
      operator delete(v21);
  }
}

uint64_t sub_19C3CBA68(uint64_t a1, uint64_t a2)
{
  void **v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;

  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  v4 = (void **)(a1 + 24);
  *(_OWORD *)a1 = 0u;
  sub_19C316738(a1, 0x40uLL);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 32) - v5;
  v7 = 0xEEEEEEEEEEEEEEEFLL * (v6 >> 3);
  if (v7 > 0x3F)
  {
    if (v6 != 7680)
      *(_QWORD *)(a1 + 32) = v5 + 7680;
  }
  else
  {
    sub_19C3CB830(v4, 64 - v7);
  }
  v8 = 0;
  v9 = 0;
  v10 = 0;
  while ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2))
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, *(_QWORD *)a1 + v8, *(_QWORD *)(a1 + 24) + v9);
    ++v10;
    v9 += 120;
    v8 += 4;
    if (v10 == 64)
      return a1;
  }
  v11 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2;
  if (v10 <= v11)
  {
    if (v10 < v11)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 4 * v10;
  }
  else
  {
    sub_19C316738(a1, v10 - v11);
  }
  v12 = *(_QWORD *)(a1 + 24);
  v13 = 0xEEEEEEEEEEEEEEEFLL * ((*(_QWORD *)(a1 + 32) - v12) >> 3);
  if (v10 <= v13)
  {
    if (v10 < v13)
      *(_QWORD *)(a1 + 32) = v12 + 120 * v10;
  }
  else
  {
    sub_19C3CB830(v4, v10 - v13);
  }
  return a1;
}

void sub_19C3CBBC0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;
  void *v5;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 32) = v4;
    operator delete(v4);
    v5 = *(void **)v1;
    if (!*(_QWORD *)v1)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v5 = *(void **)v1;
    if (!*(_QWORD *)v1)
      goto LABEL_3;
  }
  *(_QWORD *)(v1 + 8) = v5;
  operator delete(v5);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_19C3CBC04(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E3D37058;
  v2 = (void *)a1[1];
  if (v2)
    munmap(v2, a1[2]);
  a1[2] = 0;
  return a1;
}

void sub_19C3CBC48(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E3D37058;
  v2 = (void *)a1[1];
  if (v2)
    munmap(v2, a1[2]);
  a1[2] = 0;
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C3CBC9C()
{
  return 0;
}

uint64_t sub_19C3CBCA4(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  unsigned int *v3;
  unsigned int v4;

  if (!a3)
    return *(unsigned int *)(*(_QWORD *)(a1 + 24) + 4 * *a2);
  v3 = a2;
  while (1)
  {
    v4 = *v3++;
    if (*(_QWORD *)(a1 + 32) <= (unint64_t)v4)
      break;
    if (!--a3)
      return *(unsigned int *)(*(_QWORD *)(a1 + 24) + 4 * *a2);
  }
  return 0;
}

uint64_t sub_19C3CBCDC(uint64_t a1, unsigned int a2, int *a3, uint64_t a4)
{
  _DWORD *v4;
  unint64_t v5;
  _DWORD *v6;
  unint64_t v7;
  unsigned int *v8;
  _DWORD *v9;
  unsigned int v10;
  int v11;

  v4 = *(_DWORD **)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 48);
  v6 = &v4[2 * v5];
  if (v5)
  {
    do
    {
      v7 = v5 >> 1;
      v8 = &v4[2 * (v5 >> 1)];
      v10 = *v8;
      v9 = v8 + 2;
      v5 += ~(v5 >> 1);
      if (v10 < a2)
        v4 = v9;
      else
        v5 = v7;
    }
    while (v5);
    if (a4)
      goto LABEL_7;
    return 1;
  }
  if (!a4)
    return 1;
LABEL_7:
  if (v4 == v6 || *v4 != a2)
    v11 = 3;
  else
    v11 = v4[1];
  *a3 = v11;
  return 1;
}

uint64_t sub_19C3CBD4C(uint64_t a1)
{
  return *(unsigned int *)(*(_QWORD *)(a1 + 40) + 8 * *(_QWORD *)(a1 + 48) - 8);
}

uint64_t sub_19C3CBD5C()
{
  return 1;
}

uint64_t sub_19C3CBD64()
{
  return 1;
}

uint64_t sub_19C3CBD6C()
{
  return 0;
}

uint64_t sub_19C3CBD74()
{
  return 0;
}

uint64_t sub_19C3CBD7C()
{
  return 0;
}

uint64_t sub_19C3CBD84()
{
  return 0;
}

uint64_t sub_19C3CBD8C()
{
  return 0;
}

uint64_t sub_19C3CBD94()
{
  return 0;
}

uint64_t sub_19C3CBD9C()
{
  return 0;
}

void sub_19C3CBDA4(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t sub_19C3CBDB0()
{
  return 0;
}

void sub_19C3CBDB8()
{
  __assert_rtn("getFSTNetwork", "LMMontrealDefaultTokenIDMapper.h", 70, "false");
}

uint64_t sub_19C3CBDE0(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  void *exception;
  __n128 v6;
  std::string __dst;
  std::string v8;
  _BYTE v9[16];
  _QWORD v10[33];

  if (a1[1] <= 0xFuLL)
  {
    sub_19C2B4F08((uint64_t)v9);
    sub_19C2A1B24(v10, (uint64_t)"(file_size=", 11);
    v2 = (_QWORD *)std::ostream::operator<<();
    sub_19C2A1B24(v2, (uint64_t)", offset=", 9);
    v3 = (_QWORD *)std::ostream::operator<<();
    sub_19C2A1B24(v3, (uint64_t)", object_size=", 14);
    v4 = (_QWORD *)std::ostream::operator<<();
    sub_19C2A1B24(v4, (uint64_t)")", 1);
    exception = __cxa_allocate_exception(0x10uLL);
    sub_19C351068(&__dst, (uint64_t)v9);
    v6 = sub_19C337C34(&v8, "attempted to read beyond the end of the mapped file ", &__dst);
    MEMORY[0x1A1AD3160](exception, &v8, v6);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  return *a1;
}

void sub_19C3CBEE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  void *v22;
  int v23;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v23 & 1) == 0)
    {
LABEL_8:
      sub_19C2B5034((uint64_t)&a22);
      _Unwind_Resume(a1);
    }
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void sub_19C3CBF50(_QWORD *a1)
{
  void *v2;
  void *v3;

  *a1 = &off_1E3D36930;
  v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[1];
  if (v3)
    munmap(v3, a1[2]);
  a1[2] = 0;
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C3CBFB4(uint64_t a1, char *a2, uint64_t a3, unsigned int *a4, uint64_t a5)
{
  unsigned int *v5;
  char *v6;
  char *v7;
  unsigned int v8;
  unsigned int v10;
  char *v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  unsigned int v16;
  char *v17;

  v5 = a4;
  if (a5 >= 1)
  {
    v5 = a4;
    if (a3 >= 1)
    {
      v6 = &a2[4 * a3];
      v7 = a2;
      v5 = a4;
      do
      {
        if (v6 - v7 < 9)
          goto LABEL_18;
        v10 = *((_DWORD *)v7 + 2)
            - *(_DWORD *)(a1 + 48)
            + ((*((_DWORD *)v7 + 1) - *(_DWORD *)(a1 + 40)) << *(_DWORD *)(a1 + 104))
            + ((*(_DWORD *)v7 - *(_DWORD *)(a1 + 32)) << (*(_DWORD *)(a1 + 104) + *(_DWORD *)(a1 + 100)));
        v11 = *(char **)(a1 + 56);
        v12 = *(char **)(a1 + 64);
        if (v12 != v11)
        {
          v13 = (v12 - v11) >> 3;
          do
          {
            v14 = v13 >> 1;
            v15 = &v11[8 * (v13 >> 1)];
            v16 = *((_DWORD *)v15 + 1);
            v17 = v15 + 8;
            v13 += ~(v13 >> 1);
            if (v16 < v10)
              v11 = v17;
            else
              v13 = v14;
          }
          while (v13);
        }
        v7 += 12;
        if (v11 != v12 && *((_DWORD *)v11 + 1) == v10)
        {
          v8 = *(_DWORD *)v11;
        }
        else
        {
LABEL_18:
          v8 = *(_DWORD *)a2;
          if (*(_DWORD *)(a1 + 24) > *(_DWORD *)a2 || v8 > *(_DWORD *)(a1 + 28))
            return 0;
        }
        *v5++ = v8;
      }
      while (v5 < &a4[a5] && v7 < v6);
    }
  }
  return v5 - a4;
}

uint64_t sub_19C3CC0B8(uint64_t a1, unsigned int *a2, uint64_t a3, int *a4, uint64_t a5)
{
  int *v5;
  unsigned int *v6;
  unint64_t v7;
  unint64_t v8;
  _DWORD *v9;
  unsigned int v10;
  _DWORD *v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int *v14;
  _DWORD *v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  char v19;
  int v20;
  int v21;
  int v22;
  unsigned int *v23;

  v5 = a4;
  if (a3 < 1)
    return v5 - a4;
  v5 = a4;
  if (a5 < 1)
    return v5 - a4;
  v6 = &a2[a3];
  v7 = *(_QWORD *)(a1 + 88);
  v8 = (unint64_t)&a4[a5];
  if (!v7)
  {
    v23 = a2 + 1;
    v5 = a4;
    do
    {
      *v5++ = *(v23 - 1);
      if (v23 >= v6)
        break;
      ++v23;
    }
    while ((unint64_t)v5 < v8);
    return v5 - a4;
  }
  v9 = *(_DWORD **)(a1 + 80);
  v5 = a4;
  while (1)
  {
    v10 = *a2;
    v11 = v9;
    v12 = v7;
    do
    {
      v13 = v12 >> 1;
      v14 = &v11[2 * (v12 >> 1)];
      v16 = *v14;
      v15 = v14 + 2;
      v12 += ~(v12 >> 1);
      if (v16 < v10)
        v11 = v15;
      else
        v12 = v13;
    }
    while (v12);
    if (v11 != &v9[2 * v7] && *v11 == v10)
      break;
    *v5++ = v10;
LABEL_15:
    if (++a2 >= v6 || (unint64_t)v5 >= v8)
      return v5 - a4;
  }
  if ((uint64_t)(v8 - (_QWORD)v5) >= 9)
  {
    v17 = v11[1];
    v18 = *(_DWORD *)(a1 + 100);
    v19 = *(_DWORD *)(a1 + 104);
    v20 = (v17 >> (v19 + v18)) & ~(-1 << *(_DWORD *)(a1 + 96));
    v21 = (v17 >> v19) & ~(-1 << v18);
    *v5 = v20;
    v5[1] = v21;
    v22 = v17 & ~(-1 << v19);
    v5[2] = v22;
    *v5 = *(_DWORD *)(a1 + 32) + v20;
    v5[1] = *(_DWORD *)(a1 + 40) + v21;
    v5[2] = *(_DWORD *)(a1 + 48) + v22;
    v5 += 3;
    goto LABEL_15;
  }
  return 0;
}

uint64_t sub_19C3CC1F8(_DWORD *a1, unsigned int a2)
{
  if (a1[8] <= a2 && a1[9] >= a2 || a1[10] <= a2 && a1[11] >= a2)
    return 0;
  if (a1[12] <= a2 && a1[13] >= a2)
    return 2;
  return 3;
}

int8x16_t *sub_19C3CC258(int8x16_t *result, int8x16_t *a2, uint64_t a3, char a4)
{
  int8x16_t *v7;
  uint64_t *v8;
  int8x16_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  __int8 *v13;
  unsigned __int32 v14;
  unsigned __int32 v15;
  uint64_t v16;
  unsigned __int32 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int8 *v23;
  char *v24;
  unsigned __int32 v25;
  unsigned __int32 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int8 *v31;
  char *v32;
  unsigned __int32 v33;
  unsigned __int32 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int8x16_t *v45;
  int8x16_t *v46;
  int8x16_t *v47;
  int8x16_t *v48;
  unsigned __int32 v49;
  int8x16_t *v50;
  unsigned __int32 v51;
  int8x16_t *v52;
  int8x16_t *v53;
  uint64_t v54;
  unsigned int v55;
  BOOL v56;
  int8x16_t *v57;
  unsigned __int32 v58;
  int8x16_t *v59;
  unsigned __int32 v60;
  int8x16_t *v61;
  int8x16_t *v62;
  unsigned __int32 v63;
  uint64_t v64;
  unsigned __int32 v65;
  unsigned __int32 v66;
  uint64_t *v67;
  uint64_t v68;
  unsigned __int32 v69;
  unsigned __int32 v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int8x16_t *v76;
  BOOL v78;
  uint64_t v79;
  int8x16_t *v80;
  uint64_t *v81;
  unsigned __int32 v82;
  unsigned __int32 v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unsigned int v87;
  int64_t v88;
  int64_t v89;
  BOOL v90;
  uint64_t v91;
  __int8 *v92;
  unsigned int v93;
  unsigned int v94;
  __int8 *v95;
  uint64_t v96;
  uint64_t v97;
  __int8 *v98;
  uint64_t v99;
  uint64_t v100;
  unsigned int v101;
  unsigned int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *i64;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unsigned int v110;
  unsigned int v111;
  uint64_t v112;
  unint64_t v113;
  __int8 *v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  uint64_t v118;
  unsigned __int32 v119;
  unsigned __int32 v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t *v123;
  uint64_t *v124;
  uint64_t v125;

  v7 = result;
LABEL_2:
  v8 = &a2[-1].i64[1];
  v9 = v7;
  while (2)
  {
    v7 = v9;
    v10 = (char *)a2 - (char *)v9;
    v11 = ((char *)a2 - (char *)v9) >> 3;
    switch(v11)
    {
      case 0:
      case 1:
        return result;
      case 2:
        if (a2[-1].i32[3] < (unsigned __int32)v9->i32[1])
        {
          v68 = v9->i64[0];
          goto LABEL_103;
        }
        return result;
      case 3:
        v69 = v9->u32[3];
        v70 = a2[-1].u32[3];
        if (v69 < v9->i32[1])
        {
          v68 = v9->i64[0];
          if (v70 >= v69)
          {
            v9->i64[0] = v9->i64[1];
            v9->i64[1] = v68;
            if (a2[-1].i32[3] >= HIDWORD(v68))
              return result;
            v9->i64[1] = *v8;
          }
          else
          {
LABEL_103:
            v9->i64[0] = *v8;
          }
          *v8 = v68;
          return result;
        }
        if (v70 < v69)
        {
          v118 = v9->i64[1];
          v9->i64[1] = *v8;
          *v8 = v118;
          if (v9->i32[3] < (unsigned __int32)v9->i32[1])
            *v9 = vextq_s8(*v9, *v9, 8uLL);
        }
        return result;
      case 4:
        return (int8x16_t *)sub_19C3CCC1C((unint64_t *)v9, &v9->u64[1], (unint64_t *)&v9[1], &a2[-1].u64[1]);
      case 5:
        result = (int8x16_t *)sub_19C3CCC1C((unint64_t *)v9, &v9->u64[1], (unint64_t *)&v9[1], &v9[1].u64[1]);
        if (a2[-1].i32[3] < (unsigned __int32)v9[1].i32[3])
        {
          v71 = v9[1].i64[1];
          v9[1].i64[1] = *v8;
          *v8 = v71;
          if (v9[1].i32[3] < (unsigned __int32)v9[1].i32[1])
          {
            v73 = v9[1].i64[0];
            v72 = v9[1].i64[1];
            v9[1].i64[0] = v72;
            v9[1].i64[1] = v73;
            if (v9->i32[3] > HIDWORD(v72))
            {
              v74 = v9->i64[1];
              v9->i64[1] = v72;
              v9[1].i64[0] = v74;
              if (v9->i32[1] > HIDWORD(v72))
              {
                v75 = v9->i64[0];
                v9->i64[0] = v72;
                v9->i64[1] = v75;
              }
            }
          }
        }
        return result;
      default:
        if (v10 <= 191)
        {
          v76 = (int8x16_t *)&v9->u64[1];
          v78 = v9 == a2 || v76 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v78)
            {
              v79 = 0;
              v80 = v9;
              do
              {
                v82 = v80->u32[3];
                v83 = v80->u32[1];
                v80 = v76;
                if (v82 < v83)
                {
                  v84 = v76->i64[0];
                  v85 = HIDWORD(v80->i64[0]);
                  v86 = v79;
                  do
                  {
                    *(uint64_t *)((char *)&v9->i64[1] + v86) = *(uint64_t *)((char *)v9->i64 + v86);
                    if (!v86)
                    {
                      v81 = (uint64_t *)v9;
                      goto LABEL_121;
                    }
                    v87 = *(unsigned __int32 *)((char *)&v9->u32[-1] + v86);
                    v86 -= 8;
                  }
                  while (v87 > v85);
                  v81 = (uint64_t *)((char *)&v9->i64[1] + v86);
LABEL_121:
                  *v81 = v84;
                }
                v76 = (int8x16_t *)&v80->u64[1];
                v79 += 8;
              }
              while (&v80->u64[1] != (unint64_t *)a2);
            }
          }
          else if (!v78)
          {
            do
            {
              v119 = v7->u32[3];
              v120 = v7->u32[1];
              v7 = v76;
              if (v119 < v120)
              {
                v121 = v76->i64[0];
                v122 = HIDWORD(v76->i64[0]);
                v123 = (uint64_t *)v7;
                do
                {
                  v124 = v123;
                  v125 = *--v123;
                  *v124 = v125;
                }
                while (*((_DWORD *)v124 - 3) > v122);
                *v123 = v121;
              }
              v76 = (int8x16_t *)&v7->u64[1];
            }
            while (&v7->u64[1] != (unint64_t *)a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v9 != a2)
          {
            v88 = (unint64_t)(v11 - 2) >> 1;
            v89 = v88;
            do
            {
              if (v88 >= v89)
              {
                v91 = (2 * v89) | 1;
                v92 = &v9->i8[8 * v91];
                if (2 * v89 + 2 < v11)
                {
                  v93 = *((_DWORD *)v92 + 1);
                  v94 = *((_DWORD *)v92 + 3);
                  v92 += 8 * (v93 < v94);
                  if (v93 < v94)
                    v91 = 2 * v89 + 2;
                }
                v95 = &v9->i8[8 * v89];
                if (*((_DWORD *)v92 + 1) >= *((_DWORD *)v95 + 1))
                {
                  v96 = *(_QWORD *)v95;
                  v97 = HIDWORD(*(_QWORD *)v95);
                  do
                  {
                    v98 = v95;
                    v95 = v92;
                    *(_QWORD *)v98 = *(_QWORD *)v92;
                    if (v88 < v91)
                      break;
                    v99 = (2 * v91) | 1;
                    v92 = &v9->i8[8 * v99];
                    v100 = 2 * v91 + 2;
                    if (v100 < v11)
                    {
                      v101 = *((_DWORD *)v92 + 1);
                      v102 = *((_DWORD *)v92 + 3);
                      v92 += 8 * (v101 < v102);
                      if (v101 < v102)
                        v99 = v100;
                    }
                    result = (int8x16_t *)*((unsigned int *)v92 + 1);
                    v91 = v99;
                  }
                  while (result >= v97);
                  *(_QWORD *)v95 = v96;
                }
              }
              v90 = v89-- <= 0;
            }
            while (!v90);
            v103 = (unint64_t)v10 >> 3;
            do
            {
              v104 = 0;
              v105 = v9->i64[0];
              i64 = v9->i64;
              do
              {
                v107 = (uint64_t)&i64[v104 + 1];
                v108 = (2 * v104) | 1;
                v109 = 2 * v104 + 2;
                if (v109 < v103)
                {
                  v110 = *(_DWORD *)(v107 + 4);
                  v111 = *(_DWORD *)(v107 + 12);
                  v107 += 8 * (v110 < v111);
                  if (v110 < v111)
                    v108 = v109;
                }
                *i64 = *(_QWORD *)v107;
                i64 = (_QWORD *)v107;
                v104 = v108;
              }
              while (v108 <= (uint64_t)((unint64_t)(v103 - 2) >> 1));
              a2 = (int8x16_t *)((char *)a2 - 8);
              if ((int8x16_t *)v107 == a2)
              {
                *(_QWORD *)v107 = v105;
              }
              else
              {
                *(_QWORD *)v107 = a2->i64[0];
                a2->i64[0] = v105;
                v112 = v107 - (_QWORD)v9 + 8;
                if (v112 >= 9)
                {
                  v113 = (((unint64_t)v112 >> 3) - 2) >> 1;
                  v114 = &v9->i8[8 * v113];
                  if (*((_DWORD *)v114 + 1) < *(_DWORD *)(v107 + 4))
                  {
                    v115 = *(_QWORD *)v107;
                    v116 = HIDWORD(*(_QWORD *)v107);
                    do
                    {
                      v117 = (_QWORD *)v107;
                      v107 = (uint64_t)v114;
                      *v117 = *(_QWORD *)v114;
                      if (!v113)
                        break;
                      v113 = (v113 - 1) >> 1;
                      v114 = &v9->i8[8 * v113];
                    }
                    while (*((_DWORD *)v114 + 1) < v116);
                    *(_QWORD *)v107 = v115;
                  }
                }
              }
              v90 = v103-- <= 2;
            }
            while (!v90);
          }
          return result;
        }
        v12 = (unint64_t)v11 >> 1;
        v13 = &v9->i8[8 * ((unint64_t)v11 >> 1)];
        v14 = a2[-1].u32[3];
        if ((unint64_t)v10 < 0x401)
        {
          v17 = v9->u32[1];
          if (v17 >= *((_DWORD *)v13 + 1))
          {
            if (v14 < v17)
            {
              v21 = v9->i64[0];
              v9->i64[0] = *v8;
              *v8 = v21;
              if (v9->i32[1] < *((_DWORD *)v13 + 1))
              {
                v22 = *(_QWORD *)v13;
                *(_QWORD *)v13 = v9->i64[0];
                v9->i64[0] = v22;
                --a3;
                if ((a4 & 1) != 0)
                  goto LABEL_33;
                goto LABEL_56;
              }
            }
          }
          else
          {
            v18 = *(_QWORD *)v13;
            if (v14 >= v17)
            {
              *(_QWORD *)v13 = v9->i64[0];
              v9->i64[0] = v18;
              if (a2[-1].i32[3] >= HIDWORD(v18))
                goto LABEL_32;
              v9->i64[0] = *v8;
            }
            else
            {
              *(_QWORD *)v13 = *v8;
            }
            *v8 = v18;
          }
LABEL_32:
          --a3;
          if ((a4 & 1) != 0)
            goto LABEL_33;
LABEL_56:
          v30 = v9->i64[0];
          if (v9[-1].i32[3] < (unsigned __int32)v9->i32[1])
            goto LABEL_57;
          if (a2[-1].i32[3] <= HIDWORD(v30))
          {
            v59 = (int8x16_t *)&v9->u64[1];
            do
            {
              v9 = v59;
              if (v59 >= a2)
                break;
              v60 = v59->u32[1];
              v59 = (int8x16_t *)((char *)v59 + 8);
            }
            while (v60 <= HIDWORD(v30));
          }
          else
          {
            v57 = v9;
            do
            {
              v9 = (int8x16_t *)&v57->u64[1];
              v58 = v57->u32[3];
              v57 = (int8x16_t *)((char *)v57 + 8);
            }
            while (v58 <= HIDWORD(v30));
          }
          v61 = a2;
          if (v9 < a2)
          {
            v62 = a2;
            do
            {
              v61 = (int8x16_t *)((char *)v62 - 8);
              v63 = v62[-1].u32[3];
              v62 = (int8x16_t *)((char *)v62 - 8);
            }
            while (v63 > HIDWORD(v30));
          }
          while (v9 < v61)
          {
            v64 = v9->i64[0];
            v9->i64[0] = v61->i64[0];
            v61->i64[0] = v64;
            do
            {
              v65 = v9->u32[3];
              v9 = (int8x16_t *)((char *)v9 + 8);
            }
            while (v65 <= HIDWORD(v30));
            do
            {
              v66 = v61[-1].u32[3];
              v61 = (int8x16_t *)((char *)v61 - 8);
            }
            while (v66 > HIDWORD(v30));
          }
          v67 = &v9[-1].i64[1];
          if (&v9[-1].u64[1] != (unint64_t *)v7)
            v7->i64[0] = *v67;
          a4 = 0;
          *v67 = v30;
          continue;
        }
        v15 = *((_DWORD *)v13 + 1);
        if (v15 >= v9->i32[1])
        {
          if (v14 < v15)
          {
            v19 = *(_QWORD *)v13;
            *(_QWORD *)v13 = *v8;
            *v8 = v19;
            if (*((_DWORD *)v13 + 1) < v9->i32[1])
            {
              v20 = v9->i64[0];
              v9->i64[0] = *(_QWORD *)v13;
              *(_QWORD *)v13 = v20;
            }
          }
        }
        else
        {
          v16 = v9->i64[0];
          if (v14 < v15)
          {
            v9->i64[0] = *v8;
            goto LABEL_22;
          }
          v9->i64[0] = *(_QWORD *)v13;
          *(_QWORD *)v13 = v16;
          if (a2[-1].i32[3] < HIDWORD(v16))
          {
            *(_QWORD *)v13 = *v8;
LABEL_22:
            *v8 = v16;
          }
        }
        v23 = &v9->i8[8 * v12];
        v24 = v23 - 8;
        v25 = *((_DWORD *)v23 - 1);
        v26 = a2[-1].u32[1];
        if (v25 >= v9->i32[3])
        {
          if (v26 < v25)
          {
            v28 = *(_QWORD *)v24;
            *(_QWORD *)v24 = a2[-1].i64[0];
            a2[-1].i64[0] = v28;
            if (*((_DWORD *)v24 + 1) < v9->i32[3])
            {
              v29 = v9->i64[1];
              v9->i64[1] = *(_QWORD *)v24;
              *(_QWORD *)v24 = v29;
            }
          }
        }
        else
        {
          v27 = v9->i64[1];
          if (v26 < v25)
          {
            v9->i64[1] = a2[-1].i64[0];
            goto LABEL_36;
          }
          v9->i64[1] = *(_QWORD *)v24;
          *(_QWORD *)v24 = v27;
          if (a2[-1].i32[1] < HIDWORD(v27))
          {
            *(_QWORD *)v24 = a2[-1].i64[0];
LABEL_36:
            a2[-1].i64[0] = v27;
          }
        }
        v31 = &v9->i8[8 * v12];
        v32 = v31 + 8;
        v33 = *((_DWORD *)v31 + 3);
        v34 = a2[-2].u32[3];
        if (v33 >= v9[1].i32[1])
        {
          if (v34 < v33)
          {
            v36 = *(_QWORD *)v32;
            *(_QWORD *)v32 = a2[-2].i64[1];
            a2[-2].i64[1] = v36;
            if (*((_DWORD *)v32 + 1) < v9[1].i32[1])
            {
              v37 = v9[1].i64[0];
              v9[1].i64[0] = *(_QWORD *)v32;
              *(_QWORD *)v32 = v37;
            }
          }
        }
        else
        {
          v35 = v9[1].i64[0];
          if (v34 < v33)
          {
            v9[1].i64[0] = a2[-2].i64[1];
            goto LABEL_45;
          }
          v9[1].i64[0] = *(_QWORD *)v32;
          *(_QWORD *)v32 = v35;
          if (a2[-2].i32[3] < HIDWORD(v35))
          {
            *(_QWORD *)v32 = a2[-2].i64[1];
LABEL_45:
            a2[-2].i64[1] = v35;
          }
        }
        v38 = *((_DWORD *)v13 + 1);
        v39 = *((_DWORD *)v24 + 1);
        v40 = *((_DWORD *)v32 + 1);
        if (v38 >= v39)
        {
          v41 = *(_QWORD *)v13;
          if (v40 < v38)
          {
            v42 = *(_QWORD *)v32;
            *(_QWORD *)v13 = *(_QWORD *)v32;
            *(_QWORD *)v32 = v41;
            if (v39 <= HIDWORD(v42))
            {
              v41 = v42;
            }
            else
            {
              v41 = *(_QWORD *)v24;
              *(_QWORD *)v24 = v42;
              *(_QWORD *)v13 = v41;
            }
          }
        }
        else
        {
          v41 = *(_QWORD *)v24;
          if (v40 >= v38)
          {
            *(_QWORD *)v24 = *(_QWORD *)v13;
            *(_QWORD *)v13 = v41;
            if (v40 < HIDWORD(v41))
            {
              v43 = *(_QWORD *)v32;
              *(_QWORD *)v13 = *(_QWORD *)v32;
              *(_QWORD *)v32 = v41;
              v41 = v43;
            }
          }
          else
          {
            *(_QWORD *)v24 = *(_QWORD *)v32;
            *(_QWORD *)v32 = v41;
            v41 = *(_QWORD *)v13;
          }
        }
        v44 = v9->i64[0];
        v9->i64[0] = v41;
        *(_QWORD *)v13 = v44;
        --a3;
        if ((a4 & 1) == 0)
          goto LABEL_56;
LABEL_33:
        v30 = v9->i64[0];
LABEL_57:
        v45 = v9;
        do
        {
          v46 = v45;
          v45 = (int8x16_t *)((char *)v45 + 8);
        }
        while (v46->i32[3] < HIDWORD(v30));
        v47 = a2;
        if (v46 == v9)
        {
          v50 = a2;
          while (v45 < v50)
          {
            v48 = (int8x16_t *)((char *)v50 - 8);
            v51 = v50[-1].u32[3];
            v50 = (int8x16_t *)((char *)v50 - 8);
            if (v51 < HIDWORD(v30))
              goto LABEL_65;
          }
          v48 = v50;
        }
        else
        {
          do
          {
            v48 = (int8x16_t *)((char *)v47 - 8);
            v49 = v47[-1].u32[3];
            v47 = (int8x16_t *)((char *)v47 - 8);
          }
          while (v49 >= HIDWORD(v30));
LABEL_65:
          if (v45 < v48)
          {
            v52 = v45;
            v53 = v48;
            do
            {
              v54 = v52->i64[0];
              v52->i64[0] = v53->i64[0];
              v53->i64[0] = v54;
              do
              {
                v46 = v52;
                v52 = (int8x16_t *)((char *)v52 + 8);
              }
              while (v46->i32[3] < HIDWORD(v30));
              do
              {
                v55 = v53[-1].u32[3];
                v53 = (int8x16_t *)((char *)v53 - 8);
              }
              while (v55 >= HIDWORD(v30));
            }
            while (v52 < v53);
          }
        }
        if (v46 != v9)
          v9->i64[0] = v46->i64[0];
        v46->i64[0] = v30;
        if (v45 < v48)
        {
LABEL_76:
          result = (int8x16_t *)sub_19C3CC258(v7, v46, a3, a4 & 1);
          a4 = 0;
          v9 = (int8x16_t *)&v46->u64[1];
          continue;
        }
        v56 = sub_19C3CCD24(v9, v46);
        v9 = (int8x16_t *)&v46->u64[1];
        result = (int8x16_t *)sub_19C3CCD24((int8x16_t *)&v46->u64[1], a2);
        if (!(_DWORD)result)
        {
          if (v56)
            continue;
          goto LABEL_76;
        }
        a2 = v46;
        if (!v56)
          goto LABEL_2;
        return result;
    }
  }
}

unint64_t *sub_19C3CCC1C(unint64_t *result, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v4 = *((_DWORD *)a2 + 1);
  LODWORD(v5) = *((_DWORD *)a3 + 1);
  if (v4 >= *((_DWORD *)result + 1))
  {
    if (v5 < v4)
    {
      v7 = *a2;
      *a2 = *a3;
      *a3 = v7;
      if (*((_DWORD *)a2 + 1) >= *((_DWORD *)result + 1))
      {
        v5 = HIDWORD(v7);
      }
      else
      {
        v5 = *result;
        *result = *a2;
        *a2 = v5;
        LODWORD(v5) = *((_DWORD *)a3 + 1);
      }
    }
  }
  else
  {
    v6 = *result;
    if (v5 >= v4)
    {
      *result = *a2;
      *a2 = v6;
      LODWORD(v5) = *((_DWORD *)a3 + 1);
      if (v5 < HIDWORD(v6))
      {
        *a2 = *a3;
        *a3 = v6;
        v5 = HIDWORD(v6);
      }
    }
    else
    {
      *result = *a3;
      *a3 = v6;
      v5 = HIDWORD(v6);
    }
  }
  if (*((_DWORD *)a4 + 1) < v5)
  {
    v8 = *a3;
    *a3 = *a4;
    *a4 = v8;
    if (*((_DWORD *)a3 + 1) < *((_DWORD *)a2 + 1))
    {
      v9 = *a2;
      *a2 = *a3;
      *a3 = v9;
      if (*((_DWORD *)a2 + 1) < *((_DWORD *)result + 1))
      {
        v10 = *result;
        *result = *a2;
        *a2 = v10;
      }
    }
  }
  return result;
}

BOOL sub_19C3CCD24(int8x16_t *a1, int8x16_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  unsigned __int32 v7;
  unsigned __int32 v8;
  unsigned __int32 v9;
  unsigned __int32 v10;
  unsigned __int32 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int8x16_t *v22;
  uint64_t v23;
  int v24;
  int8x16_t *v25;
  uint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unsigned int v30;

  v4 = ((char *)a2 - (char *)a1) >> 3;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (a2[-1].i32[3] < (unsigned __int32)a1->i32[1])
      {
        v6 = a1->i64[0];
        goto LABEL_6;
      }
      return result;
    case 3:
      v7 = a1->u32[3];
      v8 = a2[-1].u32[3];
      if (v7 >= a1->i32[1])
      {
        if (v8 < v7)
        {
          v18 = a1->i64[1];
          a1->i64[1] = a2[-1].i64[1];
          a2[-1].i64[1] = v18;
          if (a1->i32[3] < (unsigned __int32)a1->i32[1])
            *a1 = vextq_s8(*a1, *a1, 8uLL);
        }
      }
      else
      {
        v6 = a1->i64[0];
        if (v8 >= v7)
        {
          a1->i64[0] = a1->i64[1];
          a1->i64[1] = v6;
          if (a2[-1].i32[3] < HIDWORD(v6))
          {
            a1->i64[1] = a2[-1].i64[1];
            a2[-1].i64[1] = v6;
          }
        }
        else
        {
LABEL_6:
          a1->i64[0] = a2[-1].i64[1];
          a2[-1].i64[1] = v6;
        }
      }
      return result;
    case 4:
      sub_19C3CCC1C((unint64_t *)a1, &a1->u64[1], (unint64_t *)&a1[1], &a2[-1].u64[1]);
      return 1;
    case 5:
      sub_19C3CCC1C((unint64_t *)a1, &a1->u64[1], (unint64_t *)&a1[1], &a1[1].u64[1]);
      if (a2[-1].i32[3] < (unsigned __int32)a1[1].i32[3])
      {
        v13 = a1[1].i64[1];
        a1[1].i64[1] = a2[-1].i64[1];
        a2[-1].i64[1] = v13;
        if (a1[1].i32[3] < (unsigned __int32)a1[1].i32[1])
        {
          v15 = a1[1].i64[0];
          v14 = a1[1].i64[1];
          a1[1].i64[0] = v14;
          a1[1].i64[1] = v15;
          if (a1->i32[3] > HIDWORD(v14))
          {
            v16 = a1->i64[1];
            a1->i64[1] = v14;
            a1[1].i64[0] = v16;
            if (a1->i32[1] > HIDWORD(v14))
            {
              v17 = a1->i64[0];
              a1->i64[0] = v14;
              a1->i64[1] = v17;
            }
          }
        }
      }
      return 1;
    default:
      v9 = a1->u32[3];
      v10 = a1->u32[1];
      v11 = a1[1].u32[1];
      if (v9 >= v10)
      {
        if (v11 < v9)
        {
          v20 = a1->i64[1];
          v19 = a1[1].i64[0];
          a1->i64[1] = v19;
          a1[1].i64[0] = v20;
          if (v10 > HIDWORD(v19))
          {
            v21 = a1->i64[0];
            a1->i64[0] = v19;
            a1->i64[1] = v21;
          }
        }
      }
      else
      {
        v12 = a1->i64[0];
        if (v11 >= v9)
        {
          a1->i64[0] = a1->i64[1];
          a1->i64[1] = v12;
          if (v11 >= HIDWORD(v12))
            goto LABEL_27;
          a1->i64[1] = a1[1].i64[0];
        }
        else
        {
          a1->i64[0] = a1[1].i64[0];
        }
        a1[1].i64[0] = v12;
      }
LABEL_27:
      v22 = (int8x16_t *)((char *)a1 + 24);
      if (&a1[1].u64[1] == (unint64_t *)a2)
        return 1;
      v23 = 0;
      v24 = 0;
      v25 = a1 + 1;
      break;
  }
  while (1)
  {
    if (v22->i32[1] < (unsigned __int32)v25->i32[1])
    {
      v27 = v22->i64[0];
      v28 = HIDWORD(v22->i64[0]);
      v29 = v23;
      do
      {
        *(uint64_t *)((char *)&a1[1].i64[1] + v29) = *(uint64_t *)((char *)a1[1].i64 + v29);
        if (v29 == -16)
        {
          v26 = (uint64_t *)a1;
          goto LABEL_30;
        }
        v30 = *(unsigned __int32 *)((char *)&a1->u32[3] + v29);
        v29 -= 8;
      }
      while (v30 > v28);
      v26 = (uint64_t *)((char *)&a1[1].i64[1] + v29);
LABEL_30:
      *v26 = v27;
      if (++v24 == 8)
        return &v22->u64[1] == (unint64_t *)a2;
    }
    v25 = v22;
    v23 += 8;
    v22 = (int8x16_t *)((char *)v22 + 8);
    if (v22 == a2)
      return 1;
  }
}

uint64_t sub_19C3CCFC8(uint64_t a1, int a2, CFDictionaryRef theDict, int a4)
{
  uint64_t v6;
  unsigned int v7;
  unint64_t Count;
  unint64_t v10;
  void *v11;
  void *v12;
  uint64_t i;
  CFTypeID v14;
  CFTypeID v15;
  unsigned int v16;
  unint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  unsigned int valuePtr;
  void *__p[2];
  char v23;
  _OWORD v24[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = a1 + 8;
  v6 = a1 + 24;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = a1 + 24;
  *(_QWORD *)(a1 + 32) = a1 + 24;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = a4;
  *(_DWORD *)(a1 + 52) = a2;
  if (a2 == 1 && a4 == 8)
  {
    v7 = 63;
  }
  else if (a2 == 1 && a4 == 16)
  {
    v7 = 255;
  }
  else if (a2 == 2 && a4 == 8)
  {
    v7 = 0;
  }
  else if (a4 == 16 && a2 == 2)
  {
    v7 = 63;
  }
  else
  {
    v7 = -1;
  }
  memset(v24, 0, sizeof(v24));
  if (theDict && CFDictionaryGetCount(theDict) >= 1)
  {
    Count = CFDictionaryGetCount(theDict);
    v10 = Count;
    if (Count)
    {
      if (Count >> 61)
        sub_19C2A18E8();
      v11 = operator new(8 * Count);
      bzero(v11, 8 * v10);
      v12 = operator new(8 * v10);
      bzero(v12, 8 * v10);
    }
    else
    {
      v11 = 0;
      v12 = 0;
    }
    CFDictionaryGetKeysAndValues(theDict, (const void **)v11, (const void **)v12);
    if (v10)
    {
      for (i = 0; i != v10; ++i)
      {
        v14 = CFGetTypeID(*((CFTypeRef *)v11 + i));
        if (v14 == CFStringGetTypeID())
        {
          v15 = CFGetTypeID(*((CFTypeRef *)v12 + i));
          if (v15 == CFNumberGetTypeID())
          {
            sub_19C29CEF8(*((const __CFString **)v11 + i), __p);
            valuePtr = 0;
            CFNumberGetValue(*((CFNumberRef *)v12 + i), kCFNumberIntType, &valuePtr);
            v16 = valuePtr;
            if (valuePtr <= v7)
            {
              *((_DWORD *)sub_19C36EB88((uint64_t **)a1, (const void **)__p, (uint64_t)__p) + 14) = v16;
              if (valuePtr >= 0x100)
                sub_19C2B41E0("bitset set argument out of range");
              *(_QWORD *)((char *)v24 + (((unint64_t)valuePtr >> 3) & 0x1FFFFFF8)) |= 1 << valuePtr;
            }
            if (v23 < 0)
              operator delete(__p[0]);
          }
        }
      }
    }
    if (v12)
      operator delete(v12);
    if (v11)
      operator delete(v11);
  }
  if (v7)
  {
    v17 = 1;
    do
    {
      if (v17 == 256)
        sub_19C2B41E0("bitset test argument out of range");
      if (((*(_QWORD *)((char *)v24 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v17) & 1) == 0)
      {
        v18 = operator new(0x18uLL);
        v18[4] = v17;
        v19 = *(_QWORD *)(a1 + 24);
        *(_QWORD *)v18 = v19;
        *((_QWORD *)v18 + 1) = v6;
        *(_QWORD *)(v19 + 8) = v18;
        *(_QWORD *)(a1 + 24) = v18;
        ++*(_QWORD *)(a1 + 40);
      }
      ++v17;
    }
    while (v17 - v7 != 1);
  }
  return a1;
}

void sub_19C3CD280(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t *v15;
  void *v16;
  char **v17;

  operator delete(v16);
  sub_19C3CD2FC(v15);
  sub_19C2EAC08(*v17);
  _Unwind_Resume(a1);
}

uint64_t *sub_19C3CD2FC(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;

  if (a1[2])
  {
    v3 = *a1;
    v2 = (uint64_t *)a1[1];
    v4 = *v2;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v3 + 8) = v4;
    a1[2] = 0;
    if (v2 != a1)
    {
      do
      {
        v5 = (uint64_t *)v2[1];
        operator delete(v2);
        v2 = v5;
      }
      while (v5 != a1);
    }
  }
  return a1;
}

uint64_t sub_19C3CD35C(uint64_t a1)
{
  const void *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;

  v2 = *(const void **)a1;
  if (v2)
    CFRelease(v2);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
  {
    if (*(_QWORD *)(v3 + 40))
    {
      v5 = *(_QWORD *)(v3 + 24);
      v4 = *(uint64_t **)(v3 + 32);
      v6 = *v4;
      *(_QWORD *)(v6 + 8) = *(_QWORD *)(v5 + 8);
      **(_QWORD **)(v5 + 8) = v6;
      *(_QWORD *)(v3 + 40) = 0;
      if (v4 != (uint64_t *)(v3 + 24))
      {
        do
        {
          v7 = (uint64_t *)v4[1];
          operator delete(v4);
          v4 = v7;
        }
        while (v7 != (uint64_t *)(v3 + 24));
      }
    }
    sub_19C2EAC08(*(char **)(v3 + 8));
    MEMORY[0x1A1AD355C](v3, 0x1020C4014A78C51);
  }
  v8 = *(_QWORD *)(a1 + 16);
  if (v8)
  {
    if (*(_QWORD *)(v8 + 40))
    {
      v10 = *(_QWORD *)(v8 + 24);
      v9 = *(uint64_t **)(v8 + 32);
      v11 = *v9;
      *(_QWORD *)(v11 + 8) = *(_QWORD *)(v10 + 8);
      **(_QWORD **)(v10 + 8) = v11;
      *(_QWORD *)(v8 + 40) = 0;
      if (v9 != (uint64_t *)(v8 + 24))
      {
        do
        {
          v12 = (uint64_t *)v9[1];
          operator delete(v9);
          v9 = v12;
        }
        while (v12 != (uint64_t *)(v8 + 24));
      }
    }
    sub_19C2EAC08(*(char **)(v8 + 8));
    MEMORY[0x1A1AD355C](v8, 0x1020C4014A78C51);
  }
  return a1;
}

uint64_t sub_19C3CD46C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  void *v6;
  uint64_t v7;
  uint64_t *v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const void **v17;
  uint64_t *v18;
  int v19;
  void **v20;
  void **v21;
  void **v22;
  void **v23;
  void *v24;
  void **v25;
  void **v26;
  int v27;
  void *v28;
  void **v29;
  size_t v30;
  void **v32;
  void **v33;
  void *v34;
  void **v35;
  int v36;
  void *v37;
  void **v38;
  size_t v39;
  uint64_t v41;
  _DWORD *v42;
  uint64_t v43;
  int v44;
  int v45;
  void *v47;
  void **v48;
  void **v49;
  void *v50;
  void *v51[2];
  uint64_t v52;
  void *v53;
  void **v54;
  void *v55;
  void **v56;
  void *__dst[2];
  uint64_t v58;
  void *v59[3];
  void *v60[3];
  void *v61[2];
  char v62;
  void *v63[2];
  char v64;
  void *v65[2];
  char v66;
  void *v67[2];
  char v68;
  void *v69[2];
  char v70;
  void *v71[2];
  char v72;
  void *v73[2];
  char v74[24];
  char v75;
  uint64_t v76;

  v76 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a2 + 32);
  if (v4)
  {
    if (*(char *)(v4 + 47) < 0)
    {
      sub_19C2B5238(v51, *(void **)(v4 + 24), *(_QWORD *)(v4 + 32));
    }
    else
    {
      *(_OWORD *)v51 = *(_OWORD *)(v4 + 24);
      v52 = *(_QWORD *)(v4 + 40);
    }
  }
  else
  {
    HIBYTE(v52) = 0;
    LOBYTE(v51[0]) = 0;
  }
  v5 = *(_DWORD *)(a2 + 24);
  if (v5)
    goto LABEL_7;
  v10 = *(unsigned __int8 *)(a2 + 23);
  v11 = (char)v10;
  if ((v10 & 0x80u) != 0)
    v10 = *(_QWORD *)(a2 + 8);
  if (!v10)
  {
    v5 = 0;
    goto LABEL_7;
  }
  if (v11 < 0)
  {
    sub_19C2B5238(__dst, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)a2;
    v58 = *(_QWORD *)(a2 + 16);
  }
  if (v58 >= 0)
    v20 = (void **)((char *)__dst + HIBYTE(v58));
  else
    v20 = (void **)((char *)__dst[0] + (unint64_t)__dst[1]);
  if (v58 >= 0)
    v21 = __dst;
  else
    v21 = (void **)__dst[0];
  for (; v21 != v20; v21 = (void **)((char *)v21 + 1))
    *(_BYTE *)v21 = __tolower(*(char *)v21);
  HIBYTE(v59[2]) = 19;
  strcpy((char *)v59, "com.apple.mobilesms");
  HIBYTE(v60[2]) = 18;
  strcpy((char *)v60, "com.apple.messages");
  v62 = 12;
  strcpy((char *)v61, "com.facebook");
  v64 = 11;
  strcpy((char *)v63, "com.twitter");
  v66 = 13;
  strcpy((char *)v65, "com.instagram");
  v68 = 12;
  strcpy((char *)v67, "com.snapchat");
  v70 = 13;
  strcpy((char *)v69, "com.pinterest");
  v72 = 8;
  strcpy((char *)v71, "com.vine");
  strcpy(v74, "\ncom.whatsapp");
  strcpy((char *)v73, "com.tumblr");
  v75 = 12;
  sub_19C39D250(&v55, (uint64_t)v59, 0xAuLL);
  if (v75 < 0)
  {
    operator delete(*(void **)&v74[1]);
    if ((v74[0] & 0x80000000) == 0)
    {
LABEL_40:
      if ((v72 & 0x80000000) == 0)
        goto LABEL_41;
      goto LABEL_97;
    }
  }
  else if ((v74[0] & 0x80000000) == 0)
  {
    goto LABEL_40;
  }
  operator delete(v73[0]);
  if ((v72 & 0x80000000) == 0)
  {
LABEL_41:
    if ((v70 & 0x80000000) == 0)
      goto LABEL_42;
    goto LABEL_98;
  }
LABEL_97:
  operator delete(v71[0]);
  if ((v70 & 0x80000000) == 0)
  {
LABEL_42:
    if ((v68 & 0x80000000) == 0)
      goto LABEL_43;
    goto LABEL_99;
  }
LABEL_98:
  operator delete(v69[0]);
  if ((v68 & 0x80000000) == 0)
  {
LABEL_43:
    if ((v66 & 0x80000000) == 0)
      goto LABEL_44;
    goto LABEL_100;
  }
LABEL_99:
  operator delete(v67[0]);
  if ((v66 & 0x80000000) == 0)
  {
LABEL_44:
    if ((v64 & 0x80000000) == 0)
      goto LABEL_45;
    goto LABEL_101;
  }
LABEL_100:
  operator delete(v65[0]);
  if ((v64 & 0x80000000) == 0)
  {
LABEL_45:
    if ((v62 & 0x80000000) == 0)
      goto LABEL_46;
    goto LABEL_102;
  }
LABEL_101:
  operator delete(v63[0]);
  if ((v62 & 0x80000000) == 0)
  {
LABEL_46:
    if ((SHIBYTE(v60[2]) & 0x80000000) == 0)
      goto LABEL_47;
LABEL_103:
    operator delete(v60[0]);
    if ((SHIBYTE(v59[2]) & 0x80000000) == 0)
      goto LABEL_48;
    goto LABEL_104;
  }
LABEL_102:
  operator delete(v61[0]);
  if (SHIBYTE(v60[2]) < 0)
    goto LABEL_103;
LABEL_47:
  if ((SHIBYTE(v59[2]) & 0x80000000) == 0)
    goto LABEL_48;
LABEL_104:
  operator delete(v59[0]);
LABEL_48:
  HIBYTE(v59[2]) = 20;
  strcpy((char *)v59, "com.apple.mobilemail");
  HIBYTE(v60[2]) = 14;
  strcpy((char *)v60, "com.apple.mail");
  sub_19C39D250(&v53, (uint64_t)v59, 2uLL);
  if (SHIBYTE(v60[2]) < 0)
  {
    operator delete(v60[0]);
    if ((SHIBYTE(v59[2]) & 0x80000000) == 0)
      goto LABEL_50;
  }
  else if ((SHIBYTE(v59[2]) & 0x80000000) == 0)
  {
    goto LABEL_50;
  }
  operator delete(v59[0]);
LABEL_50:
  v22 = (void **)v53;
  v23 = v54;
  if (v53 != v54)
  {
    if (v58 >= 0)
      v24 = (void *)HIBYTE(v58);
    else
      v24 = __dst[1];
    if (v58 >= 0)
      v25 = __dst;
    else
      v25 = (void **)__dst[0];
    v26 = (void **)v53;
    while (1)
    {
      v27 = *((char *)v26 + 23);
      v28 = v27 >= 0 ? (void *)*((unsigned __int8 *)v26 + 23) : v26[1];
      v29 = v27 >= 0 ? v26 : (void **)*v26;
      v30 = (size_t)(v28 >= v24 ? v24 : v28);
      if (!memcmp(v25, v29, v30) && v28 == v24)
        break;
      v26 += 3;
      if (v26 == v23)
        goto LABEL_72;
    }
    v5 = 2;
    if (!v22)
      goto LABEL_125;
    goto LABEL_118;
  }
LABEL_72:
  v32 = (void **)v55;
  v33 = v56;
  if (v55 != v56)
  {
    if (v58 >= 0)
      v34 = (void *)HIBYTE(v58);
    else
      v34 = __dst[1];
    if (v58 >= 0)
      v35 = __dst;
    else
      v35 = (void **)__dst[0];
    while (1)
    {
      v36 = *((char *)v32 + 23);
      v37 = v36 >= 0 ? (void *)*((unsigned __int8 *)v32 + 23) : v32[1];
      v38 = v36 >= 0 ? v32 : (void **)*v32;
      v39 = (size_t)(v37 >= v34 ? v34 : v37);
      if (!memcmp(v35, v38, v39) && v37 == v34)
        break;
      v32 += 3;
      if (v32 == v33)
        goto LABEL_93;
    }
    v5 = 1;
    if (!v22)
      goto LABEL_125;
    goto LABEL_118;
  }
LABEL_93:
  v5 = 0;
  if (v22)
  {
LABEL_118:
    v47 = v22;
    if (v22 != v23)
    {
      do
      {
        if (*((char *)v23 - 1) < 0)
          operator delete(*(v23 - 3));
        v23 -= 3;
      }
      while (v23 != v22);
      v47 = v53;
    }
    v54 = v22;
    operator delete(v47);
  }
LABEL_125:
  v48 = (void **)v55;
  if (v55)
  {
    v49 = v56;
    v50 = v55;
    if (v56 != v55)
    {
      do
      {
        if (*((char *)v49 - 1) < 0)
          operator delete(*(v49 - 3));
        v49 -= 3;
      }
      while (v49 != v48);
      v50 = v55;
    }
    v56 = v48;
    operator delete(v50);
  }
  if (SHIBYTE(v58) < 0)
    operator delete(__dst[0]);
LABEL_7:
  v6 = (void *)HIBYTE(v52);
  if (v52 < 0)
    v6 = v51[1];
  if (!v6)
    goto LABEL_20;
  v7 = *(_QWORD *)(a1 + 8);
  if (!v7)
    goto LABEL_20;
  v8 = sub_19C29A674(*(_QWORD *)(a1 + 8), (const void **)v51);
  if ((uint64_t *)(v7 + 8) == v8)
  {
    v12 = *(_QWORD *)(v7 + 40);
    if (v12)
    {
      v13 = *(_DWORD **)(v7 + 32);
      v9 = v13[4];
      v14 = *(_QWORD *)v13;
      *(_QWORD *)(v14 + 8) = *((_QWORD *)v13 + 1);
      **((_QWORD **)v13 + 1) = v14;
      *(_QWORD *)(v7 + 40) = v12 - 1;
      operator delete(v13);
      *((_DWORD *)sub_19C36EB88((uint64_t **)v7, (const void **)v51, (uint64_t)v51) + 14) = v9;
      goto LABEL_21;
    }
LABEL_20:
    v9 = 0;
    goto LABEL_21;
  }
  v9 = *((_DWORD *)v8 + 14);
LABEL_21:
  v15 = *(unsigned __int8 *)(a2 + 63);
  if ((v15 & 0x80u) != 0)
    v15 = *(_QWORD *)(a2 + 48);
  if (!v15)
    goto LABEL_111;
  if (*(_DWORD *)(a1 + 24) == 8)
    goto LABEL_111;
  v16 = *(_QWORD *)(a1 + 16);
  if (!v16)
    goto LABEL_111;
  v17 = (const void **)(a2 + 40);
  v18 = sub_19C29A674(*(_QWORD *)(a1 + 16), v17);
  if ((uint64_t *)(v16 + 8) != v18)
  {
    v19 = *((_DWORD *)v18 + 14);
    goto LABEL_112;
  }
  v41 = *(_QWORD *)(v16 + 40);
  if (v41)
  {
    v42 = *(_DWORD **)(v16 + 32);
    v19 = v42[4];
    v43 = *(_QWORD *)v42;
    *(_QWORD *)(v43 + 8) = *((_QWORD *)v42 + 1);
    **((_QWORD **)v42 + 1) = v43;
    *(_QWORD *)(v16 + 40) = v41 - 1;
    operator delete(v42);
    *((_DWORD *)sub_19C36EB88((uint64_t **)v16, v17, (uint64_t)v17) + 14) = v19;
  }
  else
  {
LABEL_111:
    v19 = 0;
  }
LABEL_112:
  v44 = *(_DWORD *)(a1 + 24);
  if (SHIBYTE(v52) < 0)
    operator delete(v51[0]);
  v45 = v9 << 6;
  if (v44 != 16)
    v45 = v9;
  return (v45 + v19 + (v5 << (v44 - 2)));
}

void sub_19C3CDB78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_19C3CDCE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if ((a24 & 0x80000000) == 0)
    JUMPOUT(0x19C3CDC48);
  JUMPOUT(0x19C3CDC40);
}

BOOL sub_19C3CDCF8(uint64_t a1, uint64_t *a2)
{
  int v2;
  int v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  unint64_t v10;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  unsigned int v21;
  uint64_t **v22;
  uint64_t **v23;
  unsigned int v24;
  _DWORD *v25;
  _DWORD *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  _QWORD *v30;
  uint64_t *v31;
  unsigned int v33;
  uint64_t **v34;
  uint64_t *v35;
  _DWORD *v36;
  uint64_t **v37;
  unsigned int v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  _QWORD v50[5];
  _QWORD **v51;
  _QWORD *v52[2];
  _QWORD v53[6];
  uint64_t **v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  _QWORD *(*v60)(_QWORD *, _QWORD *);
  void (*v61)(uint64_t);
  _QWORD **v62;
  _QWORD *v63[2];
  int v64[3];

  v3 = *(_DWORD *)(a1 + 48);
  v2 = *(_DWORD *)(a1 + 52);
  v4 = 55;
  v5 = 220;
  v6 = v3 == 16 && v2 == 2;
  v7 = 0xFFFFFFFFLL;
  if (v6)
    v7 = 55;
  if (v2 != 1 || v3 != 16)
    v5 = v7;
  if (v2 != 1 || v3 != 8)
    v4 = v5;
  v10 = *(_QWORD *)(a1 + 16);
  if (v10 >= v4)
  {
    v48 = *(_QWORD *)(a1 + 16);
    v49 = v4;
    v57 = 0;
    v58 = &v57;
    v59 = 0x4002000000;
    v60 = sub_19C3CE1D0;
    v61 = sub_19C3CE20C;
    v63[0] = 0;
    v63[1] = 0;
    v62 = v63;
    v55 = 0;
    v56 = 0;
    v54 = &v55;
    v53[0] = MEMORY[0x1E0C809B0];
    v53[1] = 0x40000000;
    v53[2] = sub_19C3CE214;
    v53[3] = &unk_1E3D3B9D0;
    v53[4] = &v57;
    v53[5] = a1;
    v13 = *a2;
    if (*a2)
    {
      v14 = *(_QWORD *)(v13 + 32);
      if (v14)
      {
        v15 = *(unsigned __int8 *)(v13 + 6);
        v64[0] = 0;
        sub_19C427D18(v14, 1u, v15, (uint64_t)v64, 1u, 0, v14 + 4, 1, 0, 1u, (uint64_t)v53);
        v3 = *(_DWORD *)(a1 + 48);
        v2 = *(_DWORD *)(a1 + 52);
      }
    }
    if (v2 == 1 && v3 == 8)
    {
      v16 = 5;
    }
    else if (v2 == 1 && v3 == 16)
    {
      v16 = 20;
    }
    else
    {
      if (v3 == 16 && v2 == 2)
        v16 = 5;
      else
        v16 = 0;
      if (!v16)
      {
LABEL_52:
        if (v56)
        {
          v50[0] = MEMORY[0x1E0C809B0];
          v50[1] = 1174405120;
          v50[2] = sub_19C3CE35C;
          v50[3] = &unk_1E3D3B9F0;
          v52[0] = 0;
          v52[1] = 0;
          v50[4] = a1;
          v51 = v52;
          sub_19C3CE3F0((uint64_t *)&v51, v54, &v55);
          if (*a2)
            sub_19C42BD40(*a2, 0, (uint64_t)v50, *(_BYTE *)(*a2 + 6));
          sub_19C33275C(v52[0]);
        }
        v30 = *(_QWORD **)a1;
        v31 = v55;
        if (*(_QWORD *)a1 != a1 + 8 && v55)
        {
          do
          {
            if (!v31)
              goto LABEL_72;
            v33 = *((_DWORD *)v30 + 14);
            v34 = &v55;
            v35 = v31;
            do
            {
              v36 = v35;
              v37 = v34;
              v38 = *((_DWORD *)v35 + 7);
              if (v38 >= v33)
                v34 = (uint64_t **)v35;
              else
                ++v35;
              v35 = (uint64_t *)*v35;
            }
            while (v35);
            if (v34 == &v55)
              goto LABEL_72;
            if (v38 < v33)
              v36 = v37;
            if (v33 >= v36[7])
            {
              v42 = (_QWORD *)v30[1];
              v43 = v42;
              v44 = v30;
              if (v42)
              {
                do
                {
                  v40 = v43;
                  v43 = (_QWORD *)*v43;
                }
                while (v43);
              }
              else
              {
                do
                {
                  v40 = (_QWORD *)v44[2];
                  v6 = *v40 == (_QWORD)v44;
                  v44 = v40;
                }
                while (!v6);
              }
              v45 = v30;
              if (v42)
              {
                do
                {
                  v46 = v42;
                  v42 = (_QWORD *)*v42;
                }
                while (v42);
              }
              else
              {
                do
                {
                  v46 = (_QWORD *)v45[2];
                  v6 = *v46 == (_QWORD)v45;
                  v45 = v46;
                }
                while (!v6);
              }
              if (*(_QWORD **)a1 == v30)
                *(_QWORD *)a1 = v46;
              v47 = *(uint64_t **)(a1 + 8);
              --*(_QWORD *)(a1 + 16);
              sub_19C2D9DF4(v47, v30);
              if (*((char *)v30 + 55) < 0)
                operator delete((void *)v30[4]);
              operator delete(v30);
              v31 = v55;
            }
            else
            {
LABEL_72:
              v39 = (_QWORD *)v30[1];
              if (v39)
              {
                do
                {
                  v40 = v39;
                  v39 = (_QWORD *)*v39;
                }
                while (v39);
              }
              else
              {
                do
                {
                  v41 = v30;
                  v30 = (_QWORD *)v30[2];
                }
                while ((_QWORD *)*v30 != v41);
                v40 = v30;
              }
            }
            v30 = v40;
          }
          while (v40 != (_QWORD *)(a1 + 8));
        }
        sub_19C33275C(v31);
        _Block_object_dispose(&v57, 8);
        sub_19C33275C(v63[0]);
        v10 = v48;
        v4 = v49;
        return v10 >= v4;
      }
    }
    v18 = (uint64_t *)v58[5];
    if (v18 != v58 + 6)
    {
      v19 = 0;
      do
      {
        v20 = v55;
        v21 = *((_DWORD *)v18 + 8);
        v22 = &v55;
        v23 = &v55;
        if (v55)
        {
          while (1)
          {
            while (1)
            {
              v23 = (uint64_t **)v20;
              v24 = *((_DWORD *)v20 + 7);
              if (v21 >= v24)
                break;
              v20 = *v23;
              v22 = v23;
              if (!*v23)
                goto LABEL_42;
            }
            if (v24 >= v21)
              break;
            v20 = v23[1];
            if (!v20)
            {
              v22 = v23 + 1;
              goto LABEL_42;
            }
          }
        }
        else
        {
LABEL_42:
          v25 = operator new(0x20uLL);
          v25[7] = v21;
          *(_QWORD *)v25 = 0;
          *((_QWORD *)v25 + 1) = 0;
          *((_QWORD *)v25 + 2) = v23;
          *v22 = (uint64_t *)v25;
          if (*v54)
          {
            v54 = (uint64_t **)*v54;
            v25 = *v22;
          }
          sub_19C2A2310(v55, (uint64_t *)v25);
          ++v56;
        }
        v26 = operator new(0x18uLL);
        v26[4] = *((_DWORD *)v18 + 8);
        v27 = *(_QWORD *)(a1 + 24);
        *(_QWORD *)v26 = v27;
        *((_QWORD *)v26 + 1) = a1 + 24;
        *(_QWORD *)(v27 + 8) = v26;
        *(_QWORD *)(a1 + 24) = v26;
        ++*(_QWORD *)(a1 + 40);
        v28 = (uint64_t *)v18[1];
        if (v28)
        {
          do
          {
            v29 = v28;
            v28 = (uint64_t *)*v28;
          }
          while (v28);
        }
        else
        {
          do
          {
            v29 = (uint64_t *)v18[2];
            v6 = *v29 == (_QWORD)v18;
            v18 = v29;
          }
          while (!v6);
        }
        if (++v19 >= v16)
          break;
        v18 = v29;
      }
      while (v29 != v58 + 6);
    }
    goto LABEL_52;
  }
  return v10 >= v4;
}

void sub_19C3CE190(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, _QWORD *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,_QWORD *a29)
{
  uint64_t v29;

  sub_19C33275C(a20);
  sub_19C33275C(a29);
  _Block_object_dispose((const void *)(v29 - 160), 8);
  sub_19C33275C(*(_QWORD **)(v29 - 112));
  _Unwind_Resume(a1);
}

_QWORD *sub_19C3CE1D0(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  result[5] = a2[5];
  v2 = a2 + 6;
  v3 = a2[6];
  result[6] = v3;
  v4 = result + 6;
  v5 = a2[7];
  result[7] = v5;
  if (v5)
  {
    *(_QWORD *)(v3 + 16) = v4;
    a2[5] = v2;
    *v2 = 0;
    a2[7] = 0;
  }
  else
  {
    result[5] = v4;
  }
  return result;
}

void sub_19C3CE20C(uint64_t a1)
{
  sub_19C33275C(*(_QWORD **)(a1 + 48));
}

uint64_t *sub_19C3CE214(uint64_t *result, unsigned int a2, float a3)
{
  int v4;
  int v5;
  BOOL v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t **v11;
  uint64_t *v12;
  float v13;
  int v14;
  int v15;
  unsigned int v16;
  BOOL v17;
  unsigned int v18;
  BOOL v19;
  float *v20;
  uint64_t v21;
  uint64_t *v22;

  v4 = *(_DWORD *)(result[5] + 48);
  v5 = a2 & 0x3F;
  v6 = v4 == 8;
  if (v4 == 8)
    v7 = 0;
  else
    v7 = a2 & 0x3F;
  if (!v6)
    v5 = (a2 >> 6);
  if (*(_DWORD *)(result[5] + 52) == 1)
    v8 = v5;
  else
    v8 = v7;
  v9 = *(_QWORD *)(result[4] + 8);
  v11 = (uint64_t **)(v9 + 48);
  v10 = *(uint64_t **)(v9 + 48);
  if (v10)
  {
    while (1)
    {
      while (1)
      {
        v12 = v10;
        v13 = *((float *)v10 + 7);
        if (v13 == a3)
          v14 = 0;
        else
          v14 = -127;
        if (v13 < a3)
          v15 = 1;
        else
          v15 = v14;
        if (v13 > a3)
          v15 = -1;
        if (!v15)
        {
          v16 = *((_DWORD *)v12 + 8);
          v17 = v8 == v16;
          LOBYTE(v15) = v8 < v16 ? -1 : 1;
          if (v17)
            LOBYTE(v15) = 0;
        }
        if (v15 == 129 || (v15 & 0x80) == 0)
          break;
        v10 = (uint64_t *)*v12;
        v11 = (uint64_t **)v12;
        if (!*v12)
          goto LABEL_43;
      }
      if (v13 > a3)
        LOBYTE(v14) = 1;
      if (v13 < a3)
        LOBYTE(v14) = -1;
      if (!(_BYTE)v14)
      {
        v18 = *((_DWORD *)v12 + 8);
        v19 = v18 == v8;
        LOBYTE(v14) = v18 < v8 ? -1 : 1;
        if (v19)
          LOBYTE(v14) = 0;
      }
      if (v14 == 129 || (v14 & 0x80) == 0)
        break;
      v10 = (uint64_t *)v12[1];
      if (!v10)
      {
        v11 = (uint64_t **)(v12 + 1);
        goto LABEL_43;
      }
    }
  }
  else
  {
    v12 = (uint64_t *)(v9 + 48);
LABEL_43:
    v20 = (float *)operator new(0x28uLL);
    v20[7] = a3;
    *((_DWORD *)v20 + 8) = v8;
    *(_QWORD *)v20 = 0;
    *((_QWORD *)v20 + 1) = 0;
    *((_QWORD *)v20 + 2) = v12;
    *v11 = (uint64_t *)v20;
    v21 = **(_QWORD **)(v9 + 40);
    if (v21)
    {
      *(_QWORD *)(v9 + 40) = v21;
      v22 = *v11;
    }
    else
    {
      v22 = (uint64_t *)v20;
    }
    result = sub_19C2A2310(*(uint64_t **)(v9 + 48), v22);
    ++*(_QWORD *)(v9 + 56);
  }
  return result;
}

uint64_t sub_19C3CE35C(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  BOOL v12;
  uint64_t *v13;
  BOOL v14;
  unsigned int v15;
  unsigned int v16;

  v3 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 48);
  v2 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 52);
  v4 = a2 & 0x3F;
  if (v3 == 8)
    v5 = 0;
  else
    v5 = a2 & 0x3F;
  if (v3 == 8)
    v6 = 8;
  else
    v6 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 48);
  if (v3 != 8)
    v4 = (a2 >> 6);
  if (v2 == 1)
    v3 = v6;
  else
    v4 = v5;
  v9 = *(_QWORD *)(a1 + 48);
  v7 = a1 + 48;
  v8 = v9;
  if (v9)
  {
    v10 = v7;
    do
    {
      v11 = *(_DWORD *)(v8 + 28);
      v12 = v11 >= v4;
      if (v11 >= v4)
        v13 = (uint64_t *)v8;
      else
        v13 = (uint64_t *)(v8 + 8);
      if (v12)
        v10 = v8;
      v8 = *v13;
    }
    while (*v13);
    if (v10 != v7 && v4 >= *(_DWORD *)(v10 + 28))
    {
      v14 = v2 == 1;
      v15 = a2 & 0xFFFFFFC0;
      v16 = a2 & 0xFFFFC03F;
      if (!v14)
        v16 = a2 & 0xFFFFFFC0;
      if (v3 != 8)
        v15 = a2;
      if (v3 == 16)
        return v16;
      else
        return v15;
    }
  }
  return a2;
}

uint64_t *sub_19C3CE3F0(uint64_t *result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  BOOL v11;
  unsigned int v12;
  uint64_t **v13;
  uint64_t **v14;
  unsigned int v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  _QWORD *v20;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = result;
    v6 = result + 1;
    while (1)
    {
      v7 = (uint64_t *)v5[1];
      v8 = v6;
      if ((uint64_t *)*v5 != v6)
      {
        v9 = v5[1];
        v10 = v6;
        if (v7)
        {
          do
          {
            v8 = (uint64_t *)v9;
            v9 = *(_QWORD *)(v9 + 8);
          }
          while (v9);
        }
        else
        {
          do
          {
            v8 = (uint64_t *)v10[2];
            v11 = *v8 == (_QWORD)v10;
            v10 = v8;
          }
          while (v11);
        }
        v12 = *((_DWORD *)v4 + 7);
        if (*((_DWORD *)v8 + 7) >= v12)
          break;
      }
      v13 = (uint64_t **)v6;
      v14 = (uint64_t **)v6;
      if (!v7)
        goto LABEL_19;
      v13 = (uint64_t **)(v8 + 1);
      if (!v8[1])
      {
        v14 = (uint64_t **)v8;
LABEL_19:
        v16 = operator new(0x20uLL);
        v16[7] = *((_DWORD *)v4 + 7);
        *(_QWORD *)v16 = 0;
        *((_QWORD *)v16 + 1) = 0;
        *((_QWORD *)v16 + 2) = v14;
        *v13 = (uint64_t *)v16;
        v17 = *(_QWORD *)*v5;
        if (v17)
        {
          *v5 = v17;
          v18 = *v13;
        }
        else
        {
          v18 = (uint64_t *)v16;
        }
        result = sub_19C2A2310((uint64_t *)v5[1], v18);
        ++v5[2];
      }
LABEL_23:
      v19 = (_QWORD *)v4[1];
      if (v19)
      {
        do
        {
          v20 = v19;
          v19 = (_QWORD *)*v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          v20 = (_QWORD *)v4[2];
          v11 = *v20 == (_QWORD)v4;
          v4 = v20;
        }
        while (!v11);
      }
      v4 = v20;
      if (v20 == a3)
        return result;
    }
    v13 = (uint64_t **)v6;
    v14 = (uint64_t **)v6;
    if (v7)
    {
      while (1)
      {
        while (1)
        {
          v14 = (uint64_t **)v7;
          v15 = *((_DWORD *)v7 + 7);
          if (v12 >= v15)
            break;
          v7 = *v14;
          v13 = v14;
          if (!*v14)
            goto LABEL_19;
        }
        if (v15 >= v12)
          goto LABEL_23;
        v13 = v14 + 1;
        v7 = v14[1];
        if (!v7)
          goto LABEL_19;
      }
    }
    goto LABEL_19;
  }
  return result;
}

uint64_t *sub_19C3CE56C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 40) = a1 + 48;
  v2 = (uint64_t *)(a1 + 40);
  v2[2] = 0;
  return sub_19C3CE3F0(v2, *(_QWORD **)(a2 + 40), (_QWORD *)(a2 + 48));
}

void sub_19C3CE5A4(_Unwind_Exception *a1)
{
  _QWORD **v1;
  _QWORD **v2;

  v2 = v1;
  sub_19C33275C(*v2);
  _Unwind_Resume(a1);
}

void sub_19C3CE5BC(uint64_t a1)
{
  sub_19C33275C(*(_QWORD **)(a1 + 48));
}

__CFDictionary *sub_19C3CE5C4(uint64_t a1)
{
  __CFDictionary *Mutable;
  CFNumberRef v3;
  _QWORD *v4;
  __CFDictionary *v5;
  _QWORD *v6;
  __CFDictionary *v7;

  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v3 = CFNumberCreate(0, kCFNumberIntType, &unk_19C4763BC);
  CFDictionarySetValue(Mutable, CFSTR("Version"), v3);
  CFRelease(v3);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    v5 = sub_19C3CE698(v4);
    CFDictionarySetValue(Mutable, CFSTR("Recipients"), v5);
    CFRelease(v5);
  }
  v6 = *(_QWORD **)(a1 + 16);
  if (v6)
  {
    v7 = sub_19C3CE698(v6);
    CFDictionarySetValue(Mutable, CFSTR("SpatialTemporal"), v7);
    CFRelease(v7);
  }
  return Mutable;
}

__CFDictionary *sub_19C3CE698(_QWORD *a1)
{
  __CFDictionary *Mutable;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  void **v6;
  CFStringRef v7;
  CFNumberRef v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  int valuePtr;
  void *__p[2];
  uint64_t v15;
  int v16;

  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v5 = (_QWORD *)*a1;
  v3 = a1 + 1;
  v4 = v5;
  if (v5 != v3)
  {
    do
    {
      if (*((char *)v4 + 55) < 0)
      {
        sub_19C2B5238(__p, (void *)v4[4], v4[5]);
      }
      else
      {
        *(_OWORD *)__p = *((_OWORD *)v4 + 2);
        v15 = v4[6];
      }
      v16 = *((_DWORD *)v4 + 14);
      if (v15 >= 0)
        v6 = __p;
      else
        v6 = (void **)__p[0];
      v7 = CFStringCreateWithCString(0, (const char *)v6, 0x8000100u);
      valuePtr = v16;
      v8 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
      CFDictionarySetValue(Mutable, v7, v8);
      CFRelease(v8);
      CFRelease(v7);
      if (SHIBYTE(v15) < 0)
      {
        operator delete(__p[0]);
        v9 = (_QWORD *)v4[1];
        if (v9)
        {
          do
          {
LABEL_14:
            v10 = v9;
            v9 = (_QWORD *)*v9;
          }
          while (v9);
          goto LABEL_3;
        }
      }
      else
      {
        v9 = (_QWORD *)v4[1];
        if (v9)
          goto LABEL_14;
      }
      do
      {
        v10 = (_QWORD *)v4[2];
        v11 = *v10 == (_QWORD)v4;
        v4 = v10;
      }
      while (!v11);
LABEL_3:
      v4 = v10;
    }
    while (v10 != v3);
  }
  return Mutable;
}

void sub_19C3CE7F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19C3CE810(uint64_t a1)
{
  _QWORD *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  int v8;
  int v9;
  unsigned int v13;
  unsigned int i;
  _DWORD *v15;
  uint64_t v16;

  v2 = (_QWORD *)(a1 + 8);
  sub_19C2EAC08(*(char **)(a1 + 8));
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 16) = 0;
  *v2 = 0;
  v3 = (uint64_t *)(a1 + 24);
  if (*(_QWORD *)(a1 + 40))
  {
    v5 = *(_QWORD *)(a1 + 24);
    v4 = *(uint64_t **)(a1 + 32);
    v6 = *v4;
    *(_QWORD *)(v6 + 8) = *(_QWORD *)(v5 + 8);
    **(_QWORD **)(v5 + 8) = v6;
    *(_QWORD *)(a1 + 40) = 0;
    if (v4 != v3)
    {
      do
      {
        v7 = (uint64_t *)v4[1];
        operator delete(v4);
        v4 = v7;
      }
      while (v7 != v3);
    }
  }
  v9 = *(_DWORD *)(a1 + 48);
  v8 = *(_DWORD *)(a1 + 52);
  if (v8 == 1 && v9 == 8)
  {
    v13 = 63;
    goto LABEL_22;
  }
  if (v8 == 1 && v9 == 16)
  {
    v13 = 255;
LABEL_22:
    for (i = 1; i <= v13; ++i)
    {
      v15 = operator new(0x18uLL);
      v15[4] = i;
      v16 = *(_QWORD *)(a1 + 24);
      *(_QWORD *)v15 = v16;
      *((_QWORD *)v15 + 1) = v3;
      *(_QWORD *)(v16 + 8) = v15;
      *(_QWORD *)(a1 + 24) = v15;
      ++*(_QWORD *)(a1 + 40);
    }
    return;
  }
  if (v8 != 2 || v9 != 8)
  {
    if (v9 == 16 && v8 == 2)
      v13 = 63;
    else
      v13 = -1;
    goto LABEL_22;
  }
}

_QWORD *sub_19C3CE914(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E3D374F8;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_19C3CE950(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E3D374F8;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1A1AD355CLL);
}

BOOL sub_19C3CE99C(_QWORD *a1)
{
  uint64_t v1;
  unint64_t v2;

  v1 = a1[2];
  v2 = a1[1] + 1;
  a1[1] = v2;
  return v2 < (a1[3] - v1) >> 4;
}

uint64_t sub_19C3CE9BC(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  *a2 = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 16 * *(_QWORD *)(a1 + 8));
  if (a3)
  {
    *(int64x2_t *)a3 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
    *(_QWORD *)(a3 + 16) = 0;
    *(_WORD *)(a3 + 24) = 0;
    *(_BYTE *)(a3 + 32) = 1;
    *(_DWORD *)(a3 + 56) = 0;
    *(_OWORD *)(a3 + 64) = xmmword_19C46DE10;
    *(_QWORD *)(a3 + 88) = 0;
    *(_QWORD *)(a3 + 96) = 0;
    *(_QWORD *)(a3 + 80) = 0xFFEFFFFFFFFFFFFFLL;
    v3 = *(_QWORD *)(a1 + 16) + 16 * *(_QWORD *)(a1 + 8);
    *(_OWORD *)(a3 + 40) = xmmword_19C46DEC0;
    v4 = *(_QWORD *)(v3 + 8);
    *(_QWORD *)(a3 + 40) = v4;
    *(_QWORD *)a3 = v4;
    *(_QWORD *)(a3 + 8) = v4;
    *(_DWORD *)(a3 + 116) = 1;
  }
  return 1;
}

_QWORD *sub_19C3CEA30(_QWORD *a1)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *a1 = &off_1E3D37238;
  v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void sub_19C3CEAA4(_QWORD *a1)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *a1 = &off_1E3D37238;
  v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C3CEB28()
{
  return 2;
}

void sub_19C3CEB30()
{
  __assert_rtn("mapToLMToken", "LMMontrealFragmentTokenIDMapper.cpp", 53, "false");
}

uint64_t sub_19C3CEB58(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
}

void sub_19C3CEB68()
{
  __assert_rtn("getMaxLMTokenID", "LMMontrealFragmentTokenIDMapper.cpp", 64, "false");
}

uint64_t sub_19C3CEB90(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8));
}

void sub_19C3CEBA0()
{
  __assert_rtn("isNonCombiningID", "LMMontrealFragmentTokenIDMapper.h", 39, "false && \"isNonCombiningID() not supported for fragment models\"");
}

uint64_t sub_19C3CEBC8()
{
  return 0;
}

uint64_t sub_19C3CEBD0()
{
  return 0;
}

uint64_t sub_19C3CEBD8()
{
  return 0;
}

BOOL sub_19C3CEBE0(uint64_t a1, int a2)
{
  return (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8)) != a2;
}

uint64_t sub_19C3CEC14()
{
  return 0;
}

uint64_t sub_19C3CEC1C()
{
  return 0;
}

uint64_t sub_19C3CEC24()
{
  return 0;
}

uint64_t sub_19C3CEC2C@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v6;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  int v16;
  uint64_t v18;
  int v19;
  _DWORD *v20;
  int v21;
  uint64_t v22;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  if (a3)
  {
    v6 = result;
    result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(result + 8) + 32))(*(_QWORD *)(result + 8));
    v8 = 4 * a3;
    while (v8)
    {
      v9 = *(_DWORD *)(a2 + v8 - 4);
      v8 -= 4;
      if (v9 == (_DWORD)result)
      {
        v10 = a2 + v8 + 4;
        goto LABEL_7;
      }
    }
    v10 = a2;
LABEL_7:
    v11 = (v10 - a2) >> 2;
    v12 = a3 - v11;
    if (a3 != v11)
    {
      v13 = 4 * v11;
      v14 = (_DWORD *)(a2 + v13);
      v15 = v13 - 4 * a3;
      while ((*v14 - 1) <= 1)
      {
        ++v14;
        v15 += 4;
        if (!--v12)
          return result;
      }
      v16 = v14[v12 - 1];
      result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 8) + 32))(*(_QWORD *)(v6 + 8));
      if ((v16 - 1) >= 2 && v16 != (_DWORD)result)
      {
        v18 = *(_QWORD *)(v6 + 8);
        v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 32))(v18);
        v20 = (_DWORD *)(a2 + 4 * a3 + 4);
        while (v15)
        {
          v21 = *(v20 - 2);
          --v20;
          v15 += 4;
          if (v21 == v19)
            goto LABEL_21;
        }
        v20 = v14;
LABEL_21:
        v22 = v12 - (v20 - v14);
        if (v12 != v20 - v14)
        {
          while ((*v20 - 1) <= 1)
          {
            ++v20;
            if (!--v22)
            {
              v20 = &v14[v12];
              break;
            }
          }
        }
        result = (*(uint64_t (**)(uint64_t, _DWORD *, uint64_t))(*(_QWORD *)v18 + 64))(v18, v20, v22);
        if ((result & 1) == 0)
          return (*(uint64_t (**)(_QWORD, _DWORD *, uint64_t, _QWORD *))(**(_QWORD **)(v6 + 8) + 56))(*(_QWORD *)(v6 + 8), v14, v12, a4);
      }
    }
  }
  return result;
}

void sub_19C3CEDB8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C3CEDD4(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  int v6;
  int v7;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  _DWORD *v14;
  uint64_t v15;

  if (!a3)
    return 0;
  v6 = a2[a3 - 1];
  v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8));
  if ((v6 - 1) < 2 || v6 == v7)
    return 0;
  v10 = *(_QWORD *)(a1 + 8);
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
  v12 = a3;
  while (v12 * 4)
  {
    v13 = a2[--v12];
    if (v13 == v11)
    {
      v14 = &a2[v12 + 1];
      goto LABEL_13;
    }
  }
  v14 = a2;
LABEL_13:
  v15 = a3 - (v14 - a2);
  if (a3 != v14 - a2)
  {
    while ((*v14 - 1) <= 1)
    {
      ++v14;
      if (!--v15)
      {
        v14 = &a2[a3];
        return (*(unsigned int (**)(uint64_t, _DWORD *, uint64_t))(*(_QWORD *)v10 + 64))(v10, v14, v15) ^ 1;
      }
    }
  }
  return (*(unsigned int (**)(uint64_t, _DWORD *, uint64_t))(*(_QWORD *)v10 + 64))(v10, v14, v15) ^ 1;
}

uint64_t sub_19C3CEEC0@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(result + 16);
  *a2 = *(_QWORD *)(result + 8);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void sub_19C3CEEE4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D396D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_19C3CEEF4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D396D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C3CEF24(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *sub_19C3CEF34(_QWORD *a1)
{
  void **v2;
  void *v3;
  uint64_t *v4;
  uint64_t v5;

  *a1 = &off_1E3D36490;
  v2 = (void **)a1[3];
  if ((unint64_t)v2 < a1[4])
  {
    do
    {
      v3 = *v2++;
      free(v3);
    }
    while ((unint64_t)v2 < a1[4]);
    v2 = (void **)a1[3];
  }
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  v4 = (uint64_t *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    v5 = *v4;
    if (*v4)
    {
      if (*(_DWORD *)(v5 + 48))
        free(*(void **)(v5 + 8));
      free((void *)v5);
    }
    MEMORY[0x1A1AD355C](v4, 0x80C40B8603338);
  }
  return a1;
}

void sub_19C3CEFE0(_QWORD *a1)
{
  void **v2;
  void *v3;
  uint64_t *v4;
  uint64_t v5;

  *a1 = &off_1E3D36490;
  v2 = (void **)a1[3];
  if ((unint64_t)v2 < a1[4])
  {
    do
    {
      v3 = *v2++;
      free(v3);
    }
    while ((unint64_t)v2 < a1[4]);
    v2 = (void **)a1[3];
  }
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  v4 = (uint64_t *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    v5 = *v4;
    if (*v4)
    {
      if (*(_DWORD *)(v5 + 48))
        free(*(void **)(v5 + 8));
      free((void *)v5);
    }
    MEMORY[0x1A1AD355C](v4, 0x80C40B8603338);
  }
  JUMPOUT(0x1A1AD355CLL);
}

char *sub_19C3CF09C(uint64_t a1)
{
  char *v2;
  _DWORD *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  char v7;
  _QWORD v9[2];
  char v10;

  if (!*(_QWORD *)(a1 + 16))
    return 0;
  v2 = sub_19C3A6C88(a1 + 24);
  v3 = **(_DWORD ***)(a1 + 16);
  if (v3)
  {
    if (qword_1EE41C1B0 != -1)
      dispatch_once(&qword_1EE41C1B0, &unk_1E3D3A5F0);
    v4 = *(_QWORD *)(qword_1EE41C1B8 + 8 * (*v3 & 3));
    (*(void (**)(_QWORD *__return_ptr, uint64_t, _DWORD *))(*(_QWORD *)v4 + 32))(v9, v4, v3);
    v5 = v9[0];
    v6 = v9[1];
    v7 = v10;
  }
  else
  {
    v6 = 0;
    v7 = 0;
    v5 = 0;
  }
  *((_DWORD *)v2 + 4) = 0;
  *(_QWORD *)v2 = &off_1E3D36E20;
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 3) = a1;
  *((_DWORD *)v2 + 8) = v5;
  *((_QWORD *)v2 + 5) = v6;
  v2[48] = v7;
  return v2;
}

void sub_19C3CF180(uint64_t a1)
{
  _QWORD *v2;
  unint64_t v3;
  void **v4;
  void *v5;
  uint64_t v6;

  v2 = *(_QWORD **)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  if (v2 == (_QWORD *)v3)
  {
    v3 = *(_QWORD *)(a1 + 24);
  }
  else
  {
    v4 = (void **)(v2 + 1);
    if ((unint64_t)(v2 + 1) < v3)
    {
      do
      {
        v5 = *v4++;
        free(v5);
        v3 = *(_QWORD *)(a1 + 32);
      }
      while ((unint64_t)v4 < v3);
      v2 = *(_QWORD **)(a1 + 24);
    }
  }
  if (v3 - (unint64_t)v2 < 9)
  {
    v6 = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 32) = v2 + 1;
    v6 = *v2;
  }
  *(_QWORD *)(a1 + 48) = v6;
  *(_QWORD *)(a1 + 56) = v6;
  *(_DWORD *)(a1 + 72) = 0;
}

_QWORD *sub_19C3CF1FC(_QWORD *a1)
{
  void *v2;
  void **v3;
  void *v4;
  uint64_t *v5;
  uint64_t v6;

  *a1 = &off_1E3D37330;
  v2 = (void *)a1[10];
  if (v2)
    munmap(v2, a1[11]);
  a1[11] = 0;
  *a1 = &off_1E3D36490;
  v3 = (void **)a1[3];
  if ((unint64_t)v3 < a1[4])
  {
    do
    {
      v4 = *v3++;
      free(v4);
    }
    while ((unint64_t)v3 < a1[4]);
    v3 = (void **)a1[3];
  }
  if (v3)
  {
    a1[4] = v3;
    operator delete(v3);
  }
  v5 = (uint64_t *)a1[2];
  a1[2] = 0;
  if (v5)
  {
    v6 = *v5;
    if (*v5)
    {
      if (*(_DWORD *)(v6 + 48))
        free(*(void **)(v6 + 8));
      free((void *)v6);
    }
    MEMORY[0x1A1AD355C](v5, 0x80C40B8603338);
  }
  return a1;
}

void sub_19C3CF2CC(_QWORD *a1)
{
  void *v2;
  void **v3;
  void *v4;
  uint64_t *v5;
  uint64_t v6;

  *a1 = &off_1E3D37330;
  v2 = (void *)a1[10];
  if (v2)
    munmap(v2, a1[11]);
  a1[11] = 0;
  *a1 = &off_1E3D36490;
  v3 = (void **)a1[3];
  if ((unint64_t)v3 < a1[4])
  {
    do
    {
      v4 = *v3++;
      free(v4);
    }
    while ((unint64_t)v3 < a1[4]);
    v3 = (void **)a1[3];
  }
  if (v3)
  {
    a1[4] = v3;
    operator delete(v3);
  }
  v5 = (uint64_t *)a1[2];
  a1[2] = 0;
  if (v5)
  {
    v6 = *v5;
    if (*v5)
    {
      if (*(_DWORD *)(v6 + 48))
        free(*(void **)(v6 + 8));
      free((void *)v6);
    }
    MEMORY[0x1A1AD355C](v5, 0x80C40B8603338);
  }
  JUMPOUT(0x1A1AD355CLL);
}

void sub_19C3CF3AC(__n128 *a1, const void **a2, uint64_t a3, unint64_t a4, __n128 *a5, uint64_t a6)
{
  const void **v6;
  __n128 *v7;
  __n128 *v8;
  int v9;
  const void **v10;
  size_t v11;
  int v12;
  __n128 *v13;
  size_t v14;
  size_t v15;
  int v16;
  __n128 *v19;
  uint64_t v21;
  const void **v22;
  uint64_t v23;
  unint64_t v24;
  __n128 v25;
  unint64_t v26;
  const void **v27;
  uint64_t v28;
  const void **v29;
  const void **v30;
  __int128 v31;
  int v32;
  const void *v33;
  size_t v34;
  int v35;
  const void *v36;
  size_t v37;
  size_t v38;
  int v39;
  __int128 *v40;
  size_t v41;
  const void *v42;
  uint64_t v43;
  __n128 *v44;
  int v45;
  char *v46;
  size_t v47;
  size_t v48;
  int v49;
  unint64_t v50;
  __n128 *v51;
  __n128 *v52;
  __n128 *v53;
  __n128 *v54;
  __n128 v55;
  int v56;
  __n128 *v57;
  size_t v58;
  int v59;
  __n128 *v60;
  size_t v61;
  size_t v62;
  int v63;
  __n128 v64;
  unint64_t v65;
  _BYTE *v66;
  __int128 v67;
  uint64_t v68;
  char *v69;
  unint64_t v70;
  _BYTE *v71;
  __int128 v72;
  uint64_t v73;
  char *v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v78;
  __int128 v79;
  unint64_t v80;

  if (a4 < 2)
    return;
  v6 = a2;
  v7 = a1;
  if (a4 == 2)
  {
    v8 = (__n128 *)(a2 - 3);
    v9 = *((char *)a2 - 1);
    if (v9 >= 0)
      v10 = a2 - 3;
    else
      v10 = (const void **)*(a2 - 3);
    if (v9 >= 0)
      v11 = *((unsigned __int8 *)a2 - 1);
    else
      v11 = (size_t)*(a2 - 2);
    v12 = v7[1].n128_i8[7];
    if (v12 >= 0)
      v13 = v7;
    else
      v13 = (__n128 *)v7->n128_u64[0];
    if (v12 >= 0)
      v14 = v7[1].n128_u8[7];
    else
      v14 = v7->n128_u64[1];
    if (v14 >= v11)
      v15 = v11;
    else
      v15 = v14;
    v16 = memcmp(v10, v13, v15);
    if (v16)
    {
      if ((v16 & 0x80000000) == 0)
        return;
    }
    else if (v11 >= v14)
    {
      return;
    }
    v24 = v7[1].n128_u64[0];
    v25 = *v7;
    v26 = v8[1].n128_u64[0];
    *v7 = *v8;
    v7[1].n128_u64[0] = v26;
    *v8 = v25;
    v8[1].n128_u64[0] = v24;
    return;
  }
  if ((uint64_t)a4 <= 0)
  {
    if (a1 == (__n128 *)a2)
      return;
    v27 = (const void **)&a1[1].n128_u64[1];
    if (&a1[1].n128_i8[8] == (__int8 *)a2)
      return;
    v28 = 0;
    v29 = (const void **)a1;
    while (1)
    {
      v30 = v29;
      v29 = v27;
      v32 = *((char *)v30 + 47);
      if (v32 >= 0)
        v33 = v27;
      else
        v33 = *v27;
      if (v32 >= 0)
        v34 = *((unsigned __int8 *)v30 + 47);
      else
        v34 = (size_t)v30[4];
      v35 = *((char *)v30 + 23);
      if (v35 >= 0)
        v36 = v30;
      else
        v36 = *v30;
      if (v35 >= 0)
        v37 = *((unsigned __int8 *)v30 + 23);
      else
        v37 = (size_t)v30[1];
      if (v37 >= v34)
        v38 = v34;
      else
        v38 = v37;
      v39 = memcmp(v33, v36, v38);
      if (v39)
      {
        if ((v39 & 0x80000000) == 0)
          goto LABEL_32;
      }
      else if (v34 >= v37)
      {
        goto LABEL_32;
      }
      v80 = (unint64_t)v29[2];
      v79 = *(_OWORD *)v29;
      if ((v80 & 0x8000000000000000) == 0)
        v40 = &v79;
      else
        v40 = (__int128 *)v79;
      if ((v80 & 0x8000000000000000) == 0)
        v41 = HIBYTE(v80);
      else
        v41 = *((_QWORD *)&v79 + 1);
      v42 = v30[2];
      *(_OWORD *)v29 = *(_OWORD *)v30;
      v29[2] = v42;
      *((_BYTE *)v30 + 23) = 0;
      *(_BYTE *)v30 = 0;
      if (v30 == (const void **)v7)
      {
        v30 = (const void **)v7;
      }
      else
      {
        v43 = v28;
        do
        {
          v44 = (__n128 *)((char *)v7 + v43);
          v45 = v7->n128_i8[v43 - 1];
          if (v45 >= 0)
            v46 = (char *)&v7[-1] + v43 - 8;
          else
            v46 = *(char **)((char *)&v7[-1] + v43 - 8);
          if (v45 >= 0)
            v47 = v7->n128_u8[v43 - 1];
          else
            v47 = *(unint64_t *)((char *)v7[-1].n128_u64 + v43);
          if (v47 >= v41)
            v48 = v41;
          else
            v48 = v47;
          v49 = memcmp(v40, v46, v48);
          if (v49)
          {
            if ((v49 & 0x80000000) == 0)
            {
              v30 = (const void **)((char *)v7 + v43);
              goto LABEL_75;
            }
          }
          else if (v41 >= v47)
          {
            goto LABEL_75;
          }
          v30 -= 3;
          *v44 = *(__n128 *)((char *)v7 + v43 - 24);
          v44[1].n128_u64[0] = *(unint64_t *)((char *)&v7->n128_u64[-1] + v43);
          v44[-1].n128_u8[15] = 0;
          v44[-2].n128_u8[8] = 0;
          v43 -= 24;
        }
        while (v43);
        v30 = (const void **)v7;
LABEL_75:
        v6 = a2;
      }
      v31 = v79;
      v30[2] = (const void *)v80;
      *(_OWORD *)v30 = v31;
LABEL_32:
      v27 = v29 + 3;
      v28 += 24;
      if (v29 + 3 == v6)
        return;
    }
  }
  v19 = a5;
  v21 = a4 >> 1;
  v22 = (const void **)a1 + 3 * (a4 >> 1);
  if ((uint64_t)a4 > a6)
  {
    sub_19C3CF3AC(a1, (char *)a1 + 24 * (a4 >> 1), a3, a4 >> 1, a5, a6);
    v23 = a4 - v21;
    sub_19C3CF3AC(v22, v6, a3, v23, v19, a6);
    sub_19C3CFD7C((const void **)v7, v22, v6, a3, v21, v23, v19, a6);
    return;
  }
  v78 = 0;
  *(_QWORD *)&v79 = a5;
  *((_QWORD *)&v79 + 1) = &v78;
  sub_19C3CF89C(a1, (__n128 *)((char *)a1 + 24 * (a4 >> 1)), a3, a4 >> 1, a5);
  v78 = a4 >> 1;
  v50 = a4 - v21;
  v51 = (__n128 *)((char *)v19 + 24 * v21);
  sub_19C3CF89C((__n128 *)((char *)v7 + 24 * (a4 >> 1)), (__n128 *)v6, a3, v50, v51);
  v78 = a4;
  v52 = (__n128 *)((char *)v19 + 24 * a4);
  v53 = v51;
  v54 = v19;
  while (v53 != v52)
  {
    v56 = v53[1].n128_i8[7];
    if (v56 >= 0)
      v57 = v53;
    else
      v57 = (__n128 *)v53->n128_u64[0];
    if (v56 >= 0)
      v58 = v53[1].n128_u8[7];
    else
      v58 = v53->n128_u64[1];
    v59 = v54[1].n128_i8[7];
    if (v59 >= 0)
      v60 = v54;
    else
      v60 = (__n128 *)v54->n128_u64[0];
    if (v59 >= 0)
      v61 = v54[1].n128_u8[7];
    else
      v61 = v54->n128_u64[1];
    if (v61 >= v58)
      v62 = v58;
    else
      v62 = v61;
    v63 = memcmp(v57, v60, v62);
    if (v63)
    {
      if (v63 < 0)
        goto LABEL_100;
    }
    else if (v58 < v61)
    {
LABEL_100:
      if (v7[1].n128_i8[7] < 0)
        operator delete((void *)v7->n128_u64[0]);
      v64 = *v53;
      v7[1].n128_u64[0] = v53[1].n128_u64[0];
      *v7 = v64;
      v53[1].n128_u8[7] = 0;
      v53->n128_u8[0] = 0;
      v53 = (__n128 *)((char *)v53 + 24);
      goto LABEL_78;
    }
    if (v7[1].n128_i8[7] < 0)
      operator delete((void *)v7->n128_u64[0]);
    v55 = *v54;
    v7[1].n128_u64[0] = v54[1].n128_u64[0];
    *v7 = v55;
    v54[1].n128_u8[7] = 0;
    v54->n128_u8[0] = 0;
    v54 = (__n128 *)((char *)v54 + 24);
LABEL_78:
    v7 = (__n128 *)((char *)v7 + 24);
    if (v54 == v51)
    {
      if (v53 != v52)
      {
        v70 = 0;
        do
        {
          v74 = (char *)v7 + v70;
          if (v7[1].n128_i8[v70 + 7] < 0)
            operator delete(*(void **)v74);
          v71 = (char *)v53 + v70;
          v72 = *(__int128 *)((char *)v53 + v70);
          *((_QWORD *)v74 + 2) = v53[1].n128_u64[v70 / 8];
          *(_OWORD *)v74 = v72;
          v71[23] = 0;
          *v71 = 0;
          v73 = (uint64_t)&v53[1].n128_i64[v70 / 8 + 1];
          v70 += 24;
        }
        while ((__n128 *)v73 != v52);
      }
      goto LABEL_113;
    }
  }
  if (v54 != v51)
  {
    v65 = 0;
    do
    {
      v69 = (char *)v7 + v65;
      if (v7[1].n128_i8[v65 + 7] < 0)
        operator delete(*(void **)v69);
      v66 = (char *)v54 + v65;
      v67 = *(__int128 *)((char *)v54 + v65);
      *((_QWORD *)v69 + 2) = v54[1].n128_u64[v65 / 8];
      *(_OWORD *)v69 = v67;
      v66[23] = 0;
      *v66 = 0;
      v68 = (uint64_t)&v54[1].n128_i64[v65 / 8 + 1];
      v65 += 24;
    }
    while ((__n128 *)v68 != v51);
  }
LABEL_113:
  if (v19)
  {
    v75 = v78;
    if (v78)
    {
      v76 = 0;
      do
      {
        if (v19[1].n128_i8[7] < 0)
        {
          operator delete((void *)v19->n128_u64[0]);
          v75 = v78;
        }
        ++v76;
        v19 = (__n128 *)((char *)v19 + 24);
      }
      while (v76 < v75);
    }
  }
}

void sub_19C3CF888(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_19C3CFD0C((uint64_t *)va);
  _Unwind_Resume(a1);
}

__n128 sub_19C3CF89C(__n128 *a1, __n128 *a2, uint64_t a3, unint64_t a4, __n128 *a5)
{
  __n128 *v5;
  __n128 *v7;
  __n128 *v8;
  __n128 result;
  __n128 *v10;
  int v11;
  __int8 *v12;
  size_t v13;
  int v14;
  __n128 *v15;
  size_t v16;
  size_t v17;
  int v18;
  __n128 v19;
  const void **v20;
  uint64_t v21;
  __n128 *v22;
  __n128 *v23;
  __n128 *v24;
  int v25;
  const void *v26;
  size_t v27;
  int v28;
  __n128 *v29;
  size_t v30;
  size_t v31;
  int v32;
  __n128 *v33;
  uint64_t v34;
  char *v35;
  int v36;
  __n128 *v37;
  size_t v38;
  int v39;
  char *v40;
  size_t v41;
  size_t v42;
  int v43;
  unint64_t v45;
  uint64_t v46;
  __n128 *v47;
  const void **v48;
  int v49;
  const void *v50;
  size_t v51;
  int v52;
  __n128 *v53;
  size_t v54;
  size_t v55;
  int v56;
  __n128 v57;
  uint64_t v58;
  __n128 *v59;
  unint64_t *v60;
  uint64_t v61;
  const void **v62;
  __n128 *v63;
  __n128 *v65;

  if (!a4)
    return result;
  v5 = a5;
  v7 = a2;
  v8 = a1;
  if (a4 == 2)
  {
    v10 = (__n128 *)((char *)a2 - 24);
    v11 = a2[-1].n128_i8[15];
    if (v11 >= 0)
      v12 = &a2[-2].n128_i8[8];
    else
      v12 = (__int8 *)a2[-2].n128_u64[1];
    if (v11 >= 0)
      v13 = a2[-1].n128_u8[15];
    else
      v13 = a2[-1].n128_u64[0];
    v14 = v8[1].n128_i8[7];
    if (v14 >= 0)
      v15 = v8;
    else
      v15 = (__n128 *)v8->n128_u64[0];
    if (v14 >= 0)
      v16 = v8[1].n128_u8[7];
    else
      v16 = v8->n128_u64[1];
    if (v16 >= v13)
      v17 = v13;
    else
      v17 = v16;
    v18 = memcmp(v12, v15, v17);
    if (v18)
    {
      if ((v18 & 0x80000000) == 0)
      {
LABEL_22:
        v19 = *v8;
        v5[1].n128_u64[0] = v8[1].n128_u64[0];
        *v5 = v19;
        v8->n128_u64[1] = 0;
        v8[1].n128_u64[0] = 0;
        v8->n128_u64[0] = 0;
        result = *v10;
        v5[2].n128_u64[1] = v10[1].n128_u64[0];
        *(__n128 *)((char *)v5 + 24) = result;
LABEL_105:
        v10->n128_u64[0] = 0;
        v10->n128_u64[1] = 0;
        v10[1].n128_u64[0] = 0;
        return result;
      }
    }
    else if (v13 >= v16)
    {
      goto LABEL_22;
    }
    v57 = *v10;
    v5[1].n128_u64[0] = v10[1].n128_u64[0];
    *v5 = v57;
    v10->n128_u64[1] = 0;
    v10[1].n128_u64[0] = 0;
    v10->n128_u64[0] = 0;
    result = *v8;
    v5[2].n128_u64[1] = v8[1].n128_u64[0];
    *(__n128 *)((char *)v5 + 24) = result;
    goto LABEL_104;
  }
  if (a4 == 1)
  {
    result = *a1;
    a5[1].n128_u64[0] = a1[1].n128_u64[0];
    *a5 = result;
LABEL_104:
    v10 = v8;
    goto LABEL_105;
  }
  if ((uint64_t)a4 <= 8)
  {
    if (a1 == a2)
      return result;
    result = *a1;
    a5[1].n128_u64[0] = a1[1].n128_u64[0];
    *a5 = result;
    a1->n128_u64[1] = 0;
    a1[1].n128_u64[0] = 0;
    a1->n128_u64[0] = 0;
    v20 = (const void **)&a1[1].n128_u64[1];
    if (&a1[1].n128_i8[8] == (__int8 *)a2)
      return result;
    v21 = 0;
    v22 = a5;
LABEL_29:
    v23 = (__n128 *)v20;
    v24 = (__n128 *)((char *)v22 + 24);
    v25 = v8[2].n128_i8[15];
    if (v25 >= 0)
      v26 = v20;
    else
      v26 = *v20;
    if (v25 >= 0)
      v27 = v8[2].n128_u8[15];
    else
      v27 = v8[2].n128_u64[0];
    v28 = v22[1].n128_i8[7];
    if (v28 >= 0)
      v29 = v22;
    else
      v29 = (__n128 *)v22->n128_u64[0];
    if (v28 >= 0)
      v30 = v22[1].n128_u8[7];
    else
      v30 = v22->n128_u64[1];
    if (v30 >= v27)
      v31 = v27;
    else
      v31 = v30;
    v32 = memcmp(v26, v29, v31);
    if (v32)
    {
      if ((v32 & 0x80000000) == 0)
        goto LABEL_27;
    }
    else if (v27 >= v30)
    {
LABEL_27:
      result = *v23;
      v22[2].n128_u64[1] = v23[1].n128_u64[0];
      *v24 = result;
      v23->n128_u64[1] = 0;
      v23[1].n128_u64[0] = 0;
      v23->n128_u64[0] = 0;
      goto LABEL_28;
    }
    *v24 = *v22;
    v22[2].n128_u64[1] = v22[1].n128_u64[0];
    v22->n128_u64[1] = 0;
    v22[1].n128_u64[0] = 0;
    v22->n128_u64[0] = 0;
    v33 = v5;
    if (v22 == v5)
      goto LABEL_75;
    v65 = (__n128 *)((char *)v22 + 24);
    v34 = v21;
    while (1)
    {
      v35 = (char *)v5 + v34;
      v36 = v8[2].n128_i8[15];
      if (v36 >= 0)
        v37 = v23;
      else
        v37 = (__n128 *)v23->n128_u64[0];
      if (v36 >= 0)
        v38 = v8[2].n128_u8[15];
      else
        v38 = v8[2].n128_u64[0];
      v39 = *(v35 - 1);
      if (v39 >= 0)
        v40 = (char *)&v5[-1] + v34 - 8;
      else
        v40 = *(char **)((char *)&v5[-1] + v34 - 8);
      if (v39 >= 0)
        v41 = *(v35 - 1);
      else
        v41 = *((_QWORD *)v35 - 2);
      if (v41 >= v38)
        v42 = v38;
      else
        v42 = v41;
      v43 = memcmp(v37, v40, v42);
      if (v43)
      {
        if ((v43 & 0x80000000) == 0)
        {
          v33 = v22;
          goto LABEL_74;
        }
      }
      else if (v38 >= v41)
      {
        v33 = (__n128 *)((char *)v5 + v34);
LABEL_74:
        v7 = a2;
        v24 = v65;
LABEL_75:
        if (v33[1].n128_i8[7] < 0)
          operator delete((void *)v33->n128_u64[0]);
        result = *v23;
        v33[1].n128_u64[0] = v23[1].n128_u64[0];
        *v33 = result;
        v8[2].n128_u8[15] = 0;
        v23->n128_u8[0] = 0;
LABEL_28:
        v20 = (const void **)&v23[1].n128_u64[1];
        v21 += 24;
        v22 = v24;
        v8 = v23;
        if (&v23[1].n128_i8[8] == (__int8 *)v7)
          return result;
        goto LABEL_29;
      }
      if (v5[1].n128_i8[v34 + 7] < 0)
        operator delete(*(void **)v35);
      v22 = (__n128 *)((char *)v22 - 24);
      *(__n128 *)v35 = *(__n128 *)((char *)v5 + v34 - 24);
      *((_QWORD *)v35 + 2) = *(unint64_t *)((char *)&v5->n128_u64[-1] + v34);
      *(v35 - 1) = 0;
      *(v35 - 24) = 0;
      v34 -= 24;
      if (!v34)
      {
        v33 = v5;
        goto LABEL_74;
      }
    }
  }
  v45 = a4 >> 1;
  v46 = 24 * (a4 >> 1);
  v47 = (__n128 *)((char *)a1 + v46);
  sub_19C3CF3AC(a1, (char *)a1 + v46, a3, a4 >> 1, a5, a4 >> 1);
  sub_19C3CF3AC((char *)v8 + v46, v7, a3, a4 - v45, (char *)v5 + v46, a4 - v45);
  v48 = (const void **)((char *)v8 + v46);
  while (v48 != (const void **)v7)
  {
    v49 = *((char *)v48 + 23);
    if (v49 >= 0)
      v50 = v48;
    else
      v50 = *v48;
    if (v49 >= 0)
      v51 = *((unsigned __int8 *)v48 + 23);
    else
      v51 = (size_t)v48[1];
    v52 = v8[1].n128_i8[7];
    if (v52 >= 0)
      v53 = v8;
    else
      v53 = (__n128 *)v8->n128_u64[0];
    if (v52 >= 0)
      v54 = v8[1].n128_u8[7];
    else
      v54 = v8->n128_u64[1];
    if (v54 >= v51)
      v55 = v51;
    else
      v55 = v54;
    v56 = memcmp(v50, v53, v55);
    if (v56)
    {
      if ((v56 & 0x80000000) == 0)
        goto LABEL_101;
    }
    else if (v51 >= v54)
    {
LABEL_101:
      result = *v8;
      v5[1].n128_u64[0] = v8[1].n128_u64[0];
      *v5 = result;
      v8->n128_u64[1] = 0;
      v8[1].n128_u64[0] = 0;
      v8->n128_u64[0] = 0;
      v8 = (__n128 *)((char *)v8 + 24);
      goto LABEL_80;
    }
    result = *(__n128 *)v48;
    v5[1].n128_u64[0] = (unint64_t)v48[2];
    *v5 = result;
    v48[1] = 0;
    v48[2] = 0;
    *v48 = 0;
    v48 += 3;
LABEL_80:
    v5 = (__n128 *)((char *)v5 + 24);
    if (v8 == v47)
    {
      if (v48 != (const void **)v7)
      {
        v61 = 0;
        do
        {
          v62 = &v48[v61];
          v63 = (__n128 *)((char *)v5 + v61 * 8);
          result = *(__n128 *)&v48[v61];
          v63[1].n128_u64[0] = (unint64_t)v48[v61 + 2];
          *v63 = result;
          v62[1] = 0;
          v62[2] = 0;
          *v62 = 0;
          v61 += 3;
        }
        while (&v48[v61] != (const void **)v7);
      }
      return result;
    }
  }
  if (v8 != v47)
  {
    v58 = 0;
    do
    {
      v59 = (__n128 *)((char *)v5 + v58 * 8);
      v60 = &v8->n128_u64[v58];
      result = *(__n128 *)((char *)v8 + v58 * 8);
      v59[1].n128_u64[0] = v8[1].n128_u64[v58];
      *v59 = result;
      v60[1] = 0;
      v60[2] = 0;
      *v60 = 0;
      v58 += 3;
    }
    while ((__n128 *)((char *)v8 + v58 * 8) != v47);
  }
  return result;
}

uint64_t *sub_19C3CFD0C(uint64_t *a1)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  unint64_t v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = (unint64_t *)a1[1];
    v4 = *v3;
    if (*v3)
    {
      v5 = 0;
      do
      {
        if (*(char *)(v2 + 23) < 0)
        {
          operator delete(*(void **)v2);
          v4 = *v3;
        }
        ++v5;
        v2 += 24;
      }
      while (v5 < v4);
    }
  }
  return a1;
}

void sub_19C3CFD7C(const void **a1, const void **a2, const void **a3, uint64_t a4, uint64_t a5, uint64_t a6, _OWORD *a7, uint64_t a8)
{
  int v15;
  const void *v16;
  size_t v17;
  int v18;
  const void *v19;
  size_t v20;
  size_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const void **v26;
  const void **v27;
  const void **v28;
  unint64_t v29;
  int v30;
  const void **v31;
  size_t v32;
  unint64_t v33;
  const void **v34;
  int v35;
  const void **v36;
  size_t v37;
  size_t v38;
  int v39;
  uint64_t v40;
  const void **v41;
  unint64_t v42;
  unint64_t v43;
  const void **v44;
  const void **v45;
  __int128 v46;
  const void **v47;
  uint64_t v48;
  __int128 v49;
  const void **v50;
  const void **v51;
  __int128 v52;
  _BOOL4 v53;
  __int128 v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  int v60;
  const void **v61;
  size_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  const void **v66;
  int v67;
  const void **v68;
  size_t v69;
  size_t v70;
  int v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  const void **v75;
  __int128 v76;
  _OWORD *v77;
  const void **v78;
  __int128 v79;
  _BYTE *v80;
  const void **v81;
  const void *v82;
  const void *v83;
  int v84;
  const void *v85;
  size_t v86;
  int v87;
  const void **v88;
  size_t v89;
  size_t v90;
  int v91;
  __int128 v92;
  uint64_t v93;
  uint64_t v94;
  const void **v95;
  __int128 v96;
  const void **v97;
  const void **v98;
  const void **v99;
  __int128 v100;
  _OWORD *v101;
  int v102;
  const void *v103;
  size_t v104;
  int v105;
  const void *v106;
  size_t v107;
  size_t v108;
  int v109;
  __int128 v110;
  __int128 v111;
  unint64_t v112;
  char *v113;
  __int128 v114;
  const void **v115;
  uint64_t v116;
  const void **v117;
  __int128 v118;
  const void **v119;
  unint64_t i;
  const void **v121;
  uint64_t v122;
  uint64_t v123;
  _OWORD *v124;
  _OWORD *v125;
  _OWORD *v126;
  uint64_t v127;
  uint64_t v128;
  const void **v129;
  uint64_t v130;
  _OWORD *v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  const void *v137;
  const void *v138;
  const void *v139;
  const void *v140;
  const void *v141;

  v130 = a6;
  if (!a6)
    return;
  while (v130 > a8 && a5 > a8)
  {
    if (!a5)
      return;
    v15 = *((char *)a2 + 23);
    if (v15 >= 0)
      v16 = a2;
    else
      v16 = *a2;
    if (v15 >= 0)
      v17 = *((unsigned __int8 *)a2 + 23);
    else
      v17 = (size_t)a2[1];
    while (1)
    {
      v18 = *((char *)a1 + 23);
      if (v18 >= 0)
        v19 = a1;
      else
        v19 = *a1;
      if (v18 >= 0)
        v20 = *((unsigned __int8 *)a1 + 23);
      else
        v20 = (size_t)a1[1];
      if (v20 >= v17)
        v21 = v17;
      else
        v21 = v20;
      v22 = memcmp(v16, v19, v21);
      if (!v22)
      {
        if (v17 < v20)
          break;
        goto LABEL_12;
      }
      if (v22 < 0)
        break;
LABEL_12:
      a1 += 3;
      if (!--a5)
        return;
    }
    v23 = v130;
    v128 = a8;
    v129 = a3;
    v127 = a4;
    if (a5 >= v130)
    {
      if (a5 == 1)
      {
        v141 = a1[2];
        v136 = *(_OWORD *)a1;
        v111 = *(_OWORD *)a2;
        a1[2] = a2[2];
        *(_OWORD *)a1 = v111;
        *(_OWORD *)a2 = v136;
        a2[2] = v141;
        return;
      }
      if (a5 >= 0)
        v40 = a5;
      else
        v40 = a5 + 1;
      v41 = &a1[3 * (v40 >> 1)];
      v123 = v40 >> 1;
      v125 = a7;
      v121 = v41;
      v25 = 0;
      if (a2 == a3)
      {
LABEL_57:
        v42 = 0xAAAAAAAAAAAAAAABLL * ((24 * v25) >> 3);
        v27 = v121;
        v43 = v123;
        v26 = v121;
        a7 = v125;
        v23 = v130;
        goto LABEL_60;
      }
      v59 = 0xAAAAAAAAAAAAAAABLL * (a3 - a2);
      v60 = *((char *)v41 + 23);
      if (v60 >= 0)
        v61 = &a1[3 * (v40 >> 1)];
      else
        v61 = (const void **)*v41;
      if (v60 >= 0)
        v62 = *((unsigned __int8 *)v41 + 23);
      else
        v62 = (size_t)v41[1];
      while (2)
      {
        v63 = v59 >> 1;
        v64 = v25;
        v65 = (v59 >> 1) + v25;
        v66 = &a2[3 * v65];
        v67 = *((char *)v66 + 23);
        if (v67 >= 0)
          v68 = &a2[3 * v65];
        else
          v68 = (const void **)*v66;
        if (v67 >= 0)
          v69 = *((unsigned __int8 *)v66 + 23);
        else
          v69 = (size_t)v66[1];
        if (v62 >= v69)
          v70 = v69;
        else
          v70 = v62;
        v71 = memcmp(v68, v61, v70);
        if (v71)
        {
          v25 = v64;
          if (v71 < 0)
          {
LABEL_89:
            v25 = v65 + 1;
            v63 = v59 + ~v63;
          }
        }
        else
        {
          v25 = v64;
          if (v69 < v62)
            goto LABEL_89;
        }
        v59 = v63;
        if (!v63)
          goto LABEL_57;
        continue;
      }
    }
    if (v130 >= 0)
      v24 = v130;
    else
      v24 = v130 + 1;
    v25 = v24 >> 1;
    v26 = a2;
    v27 = a1;
    if (a2 != a1)
    {
      v122 = v24 >> 1;
      v124 = a7;
      v28 = &a2[3 * v25];
      v29 = 0xAAAAAAAAAAAAAAABLL * (a2 - a1);
      v30 = *((char *)v28 + 23);
      if (v30 >= 0)
        v31 = &a2[3 * v25];
      else
        v31 = (const void **)*v28;
      if (v30 >= 0)
        v32 = *((unsigned __int8 *)v28 + 23);
      else
        v32 = (size_t)v28[1];
      v27 = a1;
      while (1)
      {
        v33 = v29 >> 1;
        v34 = &v27[3 * (v29 >> 1)];
        v35 = *((char *)v34 + 23);
        if (v35 >= 0)
          v36 = &v27[3 * (v29 >> 1)];
        else
          v36 = (const void **)*v34;
        if (v35 >= 0)
          v37 = *((unsigned __int8 *)v34 + 23);
        else
          v37 = (size_t)v34[1];
        if (v37 >= v32)
          v38 = v32;
        else
          v38 = v37;
        v39 = memcmp(v31, v36, v38);
        if (v39)
        {
          if (v39 < 0)
            goto LABEL_37;
        }
        else if (v32 < v37)
        {
          goto LABEL_37;
        }
        v27 = v34 + 3;
        v33 = v29 + ~v33;
LABEL_37:
        v29 = v33;
        if (!v33)
        {
          v26 = v27;
          v25 = v122;
          a7 = v124;
          v23 = v130;
          break;
        }
      }
    }
    v43 = 0xAAAAAAAAAAAAAAABLL * (v26 - a1);
    v42 = v25;
LABEL_60:
    v44 = &a2[3 * v25];
    if (v27 == a2)
    {
      v45 = &a2[3 * v25];
    }
    else
    {
      v45 = v26;
      if (v25)
      {
        v137 = v27[2];
        v132 = *(_OWORD *)v27;
        v46 = *(_OWORD *)a2;
        v27[2] = a2[2];
        *(_OWORD *)v27 = v46;
        *(_OWORD *)a2 = v132;
        a2[2] = v137;
        v45 = v27 + 3;
        if (v25 != 1)
        {
          v47 = a2 + 3;
          v48 = 24 * v25 - 24;
          do
          {
            if (v45 == a2)
              a2 = v47;
            v138 = v45[2];
            v133 = *(_OWORD *)v45;
            v49 = *(_OWORD *)v47;
            v45[2] = v47[2];
            *(_OWORD *)v45 = v49;
            v45 += 3;
            *(_OWORD *)v47 = v133;
            v47[2] = v138;
            v47 += 3;
            v48 -= 24;
          }
          while (v48);
        }
        if (v45 != a2)
        {
          v50 = v45;
          v51 = a2;
          while (1)
          {
            v139 = v50[2];
            v134 = *(_OWORD *)v50;
            v52 = *(_OWORD *)v51;
            v50[2] = v51[2];
            *(_OWORD *)v50 = v52;
            v50 += 3;
            v51[2] = v139;
            *(_OWORD *)v51 = v134;
            v51 += 3;
            v53 = v50 == a2;
            if (v51 == v44)
            {
              if (v50 == a2)
                break;
              v51 = a2 + 3;
              while (1)
              {
                v140 = v50[2];
                v135 = *(_OWORD *)v50;
                v54 = *(_OWORD *)a2;
                v50[2] = a2[2];
                *(_OWORD *)v50 = v54;
                v50 += 3;
                a2[2] = v140;
                *(_OWORD *)a2 = v135;
                v53 = v50 == a2;
                if (v51 != v44)
                  break;
                if (v50 == a2)
                  goto LABEL_78;
              }
            }
            if (v53)
              a2 = v51;
          }
        }
      }
    }
LABEL_78:
    a5 -= v43;
    v55 = v23 - v42;
    if ((uint64_t)(v43 + v42) >= (uint64_t)(a5 + v55))
    {
      a8 = v128;
      a4 = v127;
      v56 = v43;
      v57 = a5;
      v58 = v42;
      sub_19C3CFD7C(v45, v44, v129, v127, v57, v55, a7, v128);
      v55 = v58;
      a5 = v56;
      a3 = v45;
    }
    else
    {
      a4 = v127;
      a8 = v128;
      sub_19C3CFD7C(a1, v26, v45, v127, v43, v42, a7, v128);
      a1 = v45;
      v26 = v44;
      a3 = v129;
    }
    a2 = v26;
    v130 = v55;
    if (!v55)
      return;
  }
  if (a5 > v130)
  {
    if (a3 == a2)
      return;
    v72 = 0;
    v73 = 0;
    do
    {
      v74 = (uint64_t)a7 + v72 * 8;
      v75 = &a2[v72];
      v76 = *(_OWORD *)&a2[v72];
      *(_QWORD *)(v74 + 16) = a2[v72 + 2];
      *(_OWORD *)v74 = v76;
      v75[1] = 0;
      v75[2] = 0;
      *v75 = 0;
      ++v73;
      v72 += 3;
    }
    while (&a2[v72] != a3);
    v77 = (_OWORD *)((char *)a7 + v72 * 8);
    if ((_OWORD *)((char *)a7 + v72 * 8) == a7)
      goto LABEL_177;
    v78 = a3 - 3;
    v126 = a7;
    while (2)
    {
      if (a2 == a1)
      {
        v112 = 0;
        do
        {
          v115 = &v78[v112 / 8];
          if (SHIBYTE(v78[v112 / 8 + 2]) < 0)
            operator delete((void *)*v115);
          v113 = (char *)v77 + v112;
          v112 -= 24;
          v114 = *(_OWORD *)((char *)v77 + v112);
          v115[2] = *(const void **)((char *)v77 + v112 + 16);
          *(_OWORD *)v115 = v114;
          *(v113 - 1) = 0;
          *((_BYTE *)v77 + v112) = 0;
        }
        while ((_OWORD *)((char *)v77 + v112) != a7);
        goto LABEL_177;
      }
      v81 = a2 - 3;
      v131 = v77;
      v83 = (const void *)*((_QWORD *)v77 - 3);
      v77 = (_OWORD *)((char *)v77 - 24);
      v82 = v83;
      v84 = *((char *)v77 + 23);
      if (v84 >= 0)
        v85 = v77;
      else
        v85 = v82;
      if (v84 >= 0)
        v86 = *((unsigned __int8 *)v77 + 23);
      else
        v86 = *((_QWORD *)v77 + 1);
      v80 = (char *)a2 - 1;
      v87 = *((char *)a2 - 1);
      if (v87 >= 0)
        v88 = a2 - 3;
      else
        v88 = (const void **)*(a2 - 3);
      if (v87 >= 0)
        v89 = *((unsigned __int8 *)a2 - 1);
      else
        v89 = (size_t)*(a2 - 2);
      if (v89 >= v86)
        v90 = v86;
      else
        v90 = v89;
      v91 = memcmp(v85, v88, v90);
      if (v91)
      {
        if ((v91 & 0x80000000) == 0)
          goto LABEL_131;
LABEL_134:
        if (*((char *)v78 + 23) < 0)
          operator delete((void *)*v78);
        v92 = *(_OWORD *)v81;
        v78[2] = *(a2 - 1);
        *(_OWORD *)v78 = v92;
        a2 -= 3;
        v77 = v131;
      }
      else
      {
        if (v86 < v89)
          goto LABEL_134;
LABEL_131:
        if (*((char *)v78 + 23) < 0)
          operator delete((void *)*v78);
        v79 = *v77;
        v78[2] = (const void *)*((_QWORD *)v77 + 2);
        *(_OWORD *)v78 = v79;
        v80 = (char *)v77 + 23;
        v81 = (const void **)v77;
      }
      *v80 = 0;
      *(_BYTE *)v81 = 0;
      v78 -= 3;
      a7 = v126;
      if (v77 == v126)
        goto LABEL_177;
      continue;
    }
  }
  if (a1 == a2)
    return;
  v93 = 0;
  v73 = 0;
  do
  {
    v94 = (uint64_t)a7 + v93 * 8;
    v95 = &a1[v93];
    v96 = *(_OWORD *)&a1[v93];
    *(_QWORD *)(v94 + 16) = a1[v93 + 2];
    *(_OWORD *)v94 = v96;
    v95[1] = 0;
    v95[2] = 0;
    *v95 = 0;
    ++v73;
    v93 += 3;
  }
  while (&a1[v93] != a2);
  v97 = (const void **)((char *)a7 + v93 * 8);
  if ((_OWORD *)((char *)a7 + v93 * 8) == a7)
    goto LABEL_177;
  v98 = v97 - 3;
  v99 = (const void **)a7;
  while (2)
  {
    if (a2 != a3)
    {
      v101 = a7;
      v102 = *((char *)a2 + 23);
      if (v102 >= 0)
        v103 = a2;
      else
        v103 = *a2;
      if (v102 >= 0)
        v104 = *((unsigned __int8 *)a2 + 23);
      else
        v104 = (size_t)a2[1];
      v105 = *((char *)v99 + 23);
      if (v105 >= 0)
        v106 = v99;
      else
        v106 = *v99;
      if (v105 >= 0)
        v107 = *((unsigned __int8 *)v99 + 23);
      else
        v107 = (size_t)v99[1];
      if (v107 >= v104)
        v108 = v104;
      else
        v108 = v107;
      v109 = memcmp(v103, v106, v108);
      if (v109)
      {
        if ((v109 & 0x80000000) == 0)
          goto LABEL_162;
LABEL_165:
        a7 = v101;
        if (*((char *)a1 + 23) < 0)
          operator delete((void *)*a1);
        v110 = *(_OWORD *)a2;
        a1[2] = a2[2];
        *(_OWORD *)a1 = v110;
        *((_BYTE *)a2 + 23) = 0;
        *(_BYTE *)a2 = 0;
        a2 += 3;
      }
      else
      {
        if (v104 < v107)
          goto LABEL_165;
LABEL_162:
        a7 = v101;
        if (*((char *)a1 + 23) < 0)
          operator delete((void *)*a1);
        v100 = *(_OWORD *)v99;
        a1[2] = v99[2];
        *(_OWORD *)a1 = v100;
        *((_BYTE *)v99 + 23) = 0;
        *(_BYTE *)v99 = 0;
        v99 += 3;
      }
      a1 += 3;
      if (v99 == v97)
        goto LABEL_177;
      continue;
    }
    break;
  }
  v116 = 0;
  do
  {
    v119 = &a1[v116];
    if (SHIBYTE(a1[v116 + 2]) < 0)
      operator delete((void *)*v119);
    v117 = &v99[v116];
    v118 = *(_OWORD *)&v99[v116];
    v119[2] = v99[v116 + 2];
    *(_OWORD *)v119 = v118;
    *((_BYTE *)v117 + 23) = 0;
    *(_BYTE *)v117 = 0;
    v116 += 3;
  }
  while (v117 != v98);
LABEL_177:
  if (a7 && v73)
  {
    for (i = 0; i < v73; ++i)
    {
      if (*((char *)a7 + 23) < 0)
        operator delete(*(void **)a7);
      a7 = (_OWORD *)((char *)a7 + 24);
    }
  }
}

_QWORD *sub_19C3D0594(_QWORD *a1)
{
  void **v2;
  void *v3;
  uint64_t *v4;
  uint64_t v5;

  *a1 = &off_1E3D36490;
  v2 = (void **)a1[3];
  if ((unint64_t)v2 < a1[4])
  {
    do
    {
      v3 = *v2++;
      free(v3);
    }
    while ((unint64_t)v2 < a1[4]);
    v2 = (void **)a1[3];
  }
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  v4 = (uint64_t *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    v5 = *v4;
    if (*v4)
    {
      if (*(_DWORD *)(v5 + 48))
        free(*(void **)(v5 + 8));
      free((void *)v5);
    }
    MEMORY[0x1A1AD355C](v4, 0x80C40B8603338);
  }
  return a1;
}

void sub_19C3D0640(_QWORD *a1)
{
  void **v2;
  void *v3;
  uint64_t *v4;
  uint64_t v5;

  *a1 = &off_1E3D36490;
  v2 = (void **)a1[3];
  if ((unint64_t)v2 < a1[4])
  {
    do
    {
      v3 = *v2++;
      free(v3);
    }
    while ((unint64_t)v2 < a1[4]);
    v2 = (void **)a1[3];
  }
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  v4 = (uint64_t *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    v5 = *v4;
    if (*v4)
    {
      if (*(_DWORD *)(v5 + 48))
        free(*(void **)(v5 + 8));
      free((void *)v5);
    }
    MEMORY[0x1A1AD355C](v4, 0x80C40B8603338);
  }
  JUMPOUT(0x1A1AD355CLL);
}

void sub_19C3D0700(uint64_t a1)
{
  sub_19C3D190C(a1);
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C3D0724(uint64_t a1)
{
  _BYTE *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t result;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint8x8_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  BOOL v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  int v29;
  int v30;
  _BYTE *v31;
  _BYTE *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  _BYTE *v39;
  size_t v40;
  char *v41;
  size_t v42;
  unint64_t v43;
  char *v44;
  size_t v45;
  size_t v46;
  uint64_t v47;
  _OWORD *v48;
  __int128 *v49;
  uint64_t v50;
  __int128 v51;
  int v52;
  unsigned int *v53;
  uint64_t v54;
  __n128 v55;
  unint64_t v56;
  uint64_t v57;
  unsigned int *v58;
  uint64_t v59;
  unsigned int v60;
  uint64_t v61;
  unsigned int v62;
  BOOL v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  unint64_t v69;
  double v70;
  uint64_t v71;
  uint64_t v72;
  BOOL v73;
  unint64_t v74;
  double v75;
  __n128 v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  char **v83;
  char *v84;
  char **v85;
  double v86;
  unint64_t v87;
  unint64_t v88;
  char *v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  uint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  char v97;
  unsigned int *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t i;
  uint64_t v102;
  unsigned int v103;
  uint64_t v104;
  unsigned int v105;
  BOOL v106;
  uint64_t *v107;
  _QWORD *v108;
  _QWORD *v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  __n128 v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  _QWORD *v118;
  uint64_t v119;
  uint64_t *v120;
  char **v121;
  uint64_t *v122;
  uint64_t **v123;
  unsigned int **v124;
  _QWORD *v125;
  unint64_t v126;
  _QWORD *v127;
  unint64_t v128;
  int64x2_t v129;
  uint64_t v130[8];
  __int128 v131;
  __int128 v132;
  char v133;
  __int128 v134;
  int v135;
  __int128 v136;
  __int128 v137;
  uint64_t v138;
  _BYTE v139[120];
  uint64_t v140;
  std::__shared_weak_count *v141;
  __int128 v142;
  __int128 v143;
  _OWORD v144[2];
  __int128 v145;
  __int128 v146;
  __int128 v147;
  _QWORD v148[3];
  _QWORD v149[3];
  _QWORD *v150;
  uint64_t v151;

  v151 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 228))
  {
    v2 = (_BYTE *)(a1 + 146);
    if (!*(_BYTE *)(a1 + 146))
      goto LABEL_10;
  }
  if (*(_QWORD *)(a1 + 168))
  {
    v3 = *(_QWORD **)(a1 + 176);
    v4 = (_QWORD *)v3[1];
    if (v4)
    {
      do
      {
        v3 = v4;
        v4 = (_QWORD *)*v4;
      }
      while (v4);
      v5 = 0;
    }
    else
    {
      do
      {
        v5 = v3;
        v3 = (_QWORD *)v3[2];
      }
      while ((_QWORD *)*v3 != v5);
    }
    *(_QWORD *)(a1 + 176) = v3;
    if (v3 != (_QWORD *)(a1 + 160))
    {
      v2 = (_BYTE *)(a1 + 146);
LABEL_10:
      result = 1;
      *v2 = 1;
      return result;
    }
    sub_19C33275C(v5);
    *(_QWORD *)(a1 + 168) = 0;
    *(_QWORD *)(a1 + 152) = v3;
    *v3 = 0;
  }
  v7 = (_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 48);
  if (v8 != a1 + 32)
  {
    v2 = (_BYTE *)(a1 + 146);
    v123 = (uint64_t **)(a1 + 56);
    v124 = (unsigned int **)(a1 + 192);
    v120 = (uint64_t *)(a1 + 152);
    v121 = (char **)(a1 + 160);
    v122 = (uint64_t *)(a1 + 64);
    v129 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
    do
    {
      v9 = *(_QWORD **)(v8 + 40);
      v125 = (_QWORD *)v8;
      if (v9 == *(_QWORD **)(v8 + 48))
        return 0;
      v10 = *(_QWORD *)(a1 + 8);
      v11 = ((uint64_t)(*(_QWORD *)(v10 + 160) - *(_QWORD *)(v10 + 152)) >> 3)
          + ((uint64_t)(*(_QWORD *)(v10 + 136) - *(_QWORD *)(v10 + 128)) >> 4);
      v12 = *(_QWORD *)(v10 + 232);
      if (*(_BYTE *)(v12 + 192))
      {
        v13 = (uint8x8_t)vcnt_s8((int8x8_t)vaddvq_s32((int32x4_t)vbicq_s8((int8x16_t)xmmword_19C46DF10, (int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_s64(*(int64x2_t *)(v10 + 264)), (int32x4_t)vceqzq_s64(*(int64x2_t *)(v10 + 288))))));
        v13.i16[0] = vaddlv_u8(v13);
        if (*(_QWORD *)(v10 + 304))
          v14 = v13.u32[0] + 1;
        else
          v14 = v13.u32[0];
        v11 += v14;
      }
      if (v11 == 1 && !*(_DWORD *)(a1 + 232))
      {
        *(_BYTE *)(a1 + 228) = 0;
        v97 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v9 + 16))(*v9);
        if ((v97 & 1) != 0)
        {
          v98 = *v124;
          v99 = (*(uint64_t (**)(_QWORD, unsigned int *, _QWORD))(*(_QWORD *)*v9 + 24))(*v9, *v124, 0);
          v100 = v99;
          if (v99)
          {
            for (i = 0; i != v99; ++i)
            {
              if (!v98[i])
                goto LABEL_178;
            }
            if (v99 == 1)
            {
              v102 = *v122;
              if (*v122)
              {
                v103 = *v98;
                v104 = a1 + 64;
                do
                {
                  v105 = *(_DWORD *)(v102 + 28);
                  v106 = v105 >= v103;
                  if (v105 >= v103)
                    v107 = (uint64_t *)v102;
                  else
                    v107 = (uint64_t *)(v102 + 8);
                  if (v106)
                    v104 = v102;
                  v102 = *v107;
                }
                while (*v107);
                if ((uint64_t *)v104 != v122 && v103 >= *(_DWORD *)(v104 + 28))
LABEL_178:
                  v97 = 0;
              }
            }
            else
            {
              v112 = (4 * v99);
              if ((_DWORD)v112)
              {
                v113 = *(_QWORD *)(a1 + 80);
                v142 = xmmword_19C477EF0;
                v143 = unk_19C477F00;
                sub_19C4029D0(v113, v98, v112, 1, (uint64_t)&v142);
                if ((DWORD1(v142) & 0x80000000) == 0)
                  goto LABEL_178;
              }
            }
            memmove((void *)(*(_QWORD *)(a1 + 88) + 4 * *(_QWORD *)(a1 + 136)), v98, 4 * v100);
            v111 = v100;
          }
          else
          {
            v111 = 0;
          }
          if (!sub_19C3D1554(a1, *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 136), v111))
            v97 = 0;
          sub_19C3C0690(v123, v98, v100, v114);
          v7 = (_QWORD *)(a1 + 32);
          v2 = (_BYTE *)(a1 + 146);
        }
        else
        {
          v108 = *(_QWORD **)(a1 + 48);
          v109 = (_QWORD *)v108[1];
          if (v109)
          {
            do
            {
              v110 = v109;
              v109 = (_QWORD *)*v109;
            }
            while (v109);
          }
          else
          {
            do
            {
              v110 = (_QWORD *)v108[2];
              v18 = *v110 == (_QWORD)v108;
              v108 = v110;
            }
            while (!v18);
          }
          *(_QWORD *)(a1 + 48) = v110;
        }
        result = 1;
        *v2 = 1;
        if ((v97 & 1) != 0)
          return result;
        goto LABEL_16;
      }
      if (*v2 && !*(_BYTE *)(a1 + 228))
      {
        v15 = v125;
        v16 = (_QWORD *)v125[1];
        if (v16)
        {
          do
          {
            v17 = v16;
            v16 = (_QWORD *)*v16;
          }
          while (v16);
        }
        else
        {
          do
          {
            v17 = (_QWORD *)v15[2];
            v18 = *v17 == (_QWORD)v15;
            v15 = v17;
          }
          while (!v18);
        }
        *(_QWORD *)(a1 + 48) = v17;
        v125 = v17;
      }
      *(_BYTE *)(a1 + 228) = 0;
      if (v125 == v7)
        goto LABEL_15;
      v19 = *(_QWORD *)(a1 + 192);
      v20 = *(_QWORD *)(a1 + 184);
      v21 = (*(_QWORD *)(a1 + 200) - v19) >> 2;
      if (v20 <= v21)
      {
        if (v20 < v21)
          *(_QWORD *)(a1 + 200) = v19 + 4 * v20;
      }
      else
      {
        sub_19C316738((uint64_t)v124, v20 - v21);
        v10 = *(_QWORD *)(a1 + 8);
        v12 = *(_QWORD *)(v10 + 232);
      }
      v142 = (__int128)v129;
      *(_QWORD *)&v143 = 0;
      WORD4(v143) = 0;
      LOBYTE(v144[0]) = 1;
      *(_OWORD *)((char *)v144 + 8) = xmmword_19C46DE10;
      DWORD2(v144[1]) = 0;
      v145 = xmmword_19C46DE10;
      v146 = 0xFFEFFFFFFFFFFFFFLL;
      v147 = 0uLL;
      LOWORD(v148[0]) = 0;
      *(_QWORD *)((char *)v148 + 4) = 0;
      *(_QWORD *)((char *)&v148[1] + 4) = 0;
      HIDWORD(v148[2]) = 0;
      if (*(_BYTE *)(v12 + 192))
      {
        v22 = *(_QWORD *)(v10 + 48);
        v23 = *(_QWORD *)(v22 + 560);
        v24 = *(std::__shared_weak_count **)(v22 + 568);
        v140 = v23;
        v141 = v24;
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldxr(p_shared_owners);
          while (__stxr(v26 + 1, p_shared_owners));
        }
      }
      else
      {
        v140 = 0;
        v141 = 0;
      }
      v127 = (_QWORD *)v125[5];
      v118 = (_QWORD *)v125[6];
      if (v127 == v118)
        goto LABEL_146;
      v119 = v12;
      v27 = 0;
      v116 = v148[1];
      v117 = 0;
      v115 = v148[2];
      while (2)
      {
        v128 = v27;
        v126 = 0;
        while (1)
        {
          v29 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v127 + 16))(*v127);
          v30 = v126 < 0x32 ? v29 : 0;
          if (v30 != 1 || !v125[4] && *(_QWORD *)(a1 + 240) > 9uLL)
            break;
          v31 = *(_BYTE **)(a1 + 192);
          v32 = *(_BYTE **)(a1 + 200);
          v33 = (v32 - v31) >> 2;
          v28 = v128;
          v34 = *(_QWORD *)(a1 + 184) + v128;
          v35 = v34 - v33;
          if (v34 <= v33)
            goto LABEL_79;
          v36 = *(_QWORD *)(a1 + 208);
          if (v35 <= (v36 - (uint64_t)v32) >> 2)
          {
            v46 = 4 * v35;
            bzero(*(void **)(a1 + 200), v46);
            *(_QWORD *)(a1 + 200) = &v32[v46];
            goto LABEL_79;
          }
          if (v34 >> 62)
            sub_19C2A18E8();
          v37 = v36 - (_QWORD)v31;
          if (v37 >> 1 > v34)
            v34 = v37 >> 1;
          if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFFCLL)
            v38 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v38 = v34;
          if (v38 >> 62)
            sub_19C2A143C();
          v39 = operator new(4 * v38);
          v40 = 4 * v35;
          v41 = &v39[4 * v33];
          v42 = v40;
          bzero(v41, v40);
          if (v32 == v31)
          {
            v44 = &v39[4 * v33];
            v45 = v42;
            goto LABEL_77;
          }
          v43 = v32 - 4 - v31;
          if (v43 < 0x2C)
          {
            v44 = &v39[4 * v33];
            v45 = v42;
            do
            {
LABEL_76:
              v52 = *((_DWORD *)v32 - 1);
              v32 -= 4;
              *((_DWORD *)v44 - 1) = v52;
              v44 -= 4;
            }
            while (v32 != v31);
            goto LABEL_77;
          }
          v44 = &v39[4 * v33];
          v45 = v42;
          if ((unint64_t)(v31 - v39) < 0x20)
            goto LABEL_76;
          v47 = (v43 >> 2) + 1;
          v48 = &v39[4 * v33 - 16];
          v49 = (__int128 *)(v32 - 16);
          v50 = v47 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v51 = *v49;
            *(v48 - 1) = *(v49 - 1);
            *v48 = v51;
            v48 -= 2;
            v49 -= 2;
            v50 -= 8;
          }
          while (v50);
          v44 = &v41[-4 * (v47 & 0x7FFFFFFFFFFFFFF8)];
          v32 -= 4 * (v47 & 0x7FFFFFFFFFFFFFF8);
          if (v47 != (v47 & 0x7FFFFFFFFFFFFFF8))
            goto LABEL_76;
LABEL_77:
          *(_QWORD *)(a1 + 192) = v44;
          *(_QWORD *)(a1 + 200) = &v41[v45];
          *(_QWORD *)(a1 + 208) = &v39[4 * v38];
          v28 = v128;
          if (v31)
            operator delete(v31);
LABEL_79:
          v53 = &(*v124)[v28];
          *(int64x2_t *)v139 = v129;
          *(_QWORD *)&v139[16] = 0;
          *(_WORD *)&v139[24] = 0;
          v139[32] = 1;
          *(_OWORD *)&v139[40] = xmmword_19C46DE10;
          *(_DWORD *)&v139[56] = 0;
          *(_OWORD *)&v139[64] = xmmword_19C46DE10;
          *(_QWORD *)&v139[80] = 0xFFEFFFFFFFFFFFFFLL;
          *(_DWORD *)&v139[116] = 0;
          memset(&v139[88], 0, 26);
          v54 = (*(uint64_t (**)(_QWORD, unsigned int *, _BYTE *))(*(_QWORD *)*v127 + 24))(*v127, v53, v139);
          v56 = v54;
          if (v54)
          {
            v57 = 4 * v54;
            v58 = v53;
            do
            {
              if (!*v58)
                goto LABEL_51;
              ++v58;
              v57 -= 4;
            }
            while (v57);
            if (v54 == 1)
            {
              v59 = *v122;
              if (*v122)
              {
                v60 = *v53;
                v61 = a1 + 64;
                do
                {
                  v62 = *(_DWORD *)(v59 + 28);
                  v63 = v62 >= v60;
                  if (v62 >= v60)
                    v64 = (uint64_t *)v59;
                  else
                    v64 = (uint64_t *)(v59 + 8);
                  if (v63)
                    v61 = v59;
                  v59 = *v64;
                }
                while (*v64);
                if ((uint64_t *)v61 != v122 && v60 >= *(_DWORD *)(v61 + 28))
                  goto LABEL_51;
              }
            }
            else
            {
              v66 = (4 * v54);
              if ((_DWORD)v66)
              {
                v67 = *(_QWORD *)(a1 + 80);
                v131 = xmmword_19C477EF0;
                v132 = unk_19C477F00;
                sub_19C4029D0(v67, v53, v66, 1, (uint64_t)&v131);
                if ((DWORD1(v131) & 0x80000000) == 0)
                  goto LABEL_51;
              }
            }
            memmove((void *)(*(_QWORD *)(a1 + 88) + 4 * *(_QWORD *)(a1 + 136)), v53, 4 * v56);
            memmove((void *)(*(_QWORD *)(a1 + 112) + 4 * *(_QWORD *)(a1 + 136)), v53, 4 * v56);
            v65 = v56;
          }
          else
          {
            v65 = 0;
          }
          sub_19C3C0690(v123, v53, v65, v55);
          if (!sub_19C3D1554(a1, *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 136), v56))
            goto LABEL_51;
          *(int64x2_t *)v139 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
          *(_QWORD *)&v139[16] = 0;
          *(_WORD *)&v139[24] = 0;
          v68 = 1;
          v139[32] = 1;
          *(_OWORD *)&v139[40] = xmmword_19C46DE10;
          *(_DWORD *)&v139[56] = 0;
          *(_OWORD *)&v139[64] = xmmword_19C46DE10;
          *(_QWORD *)&v139[80] = 0xFFEFFFFFFFFFFFFFLL;
          *(_QWORD *)&v139[88] = 0;
          *(_QWORD *)&v139[96] = 0;
          v69 = *(_QWORD *)(a1 + 136);
          if (v69 < v69 + v56)
          {
            while (1)
            {
              v131 = (__int128)v129;
              *(_QWORD *)&v132 = 0;
              WORD4(v132) = 0;
              v133 = 1;
              v76 = (__n128)xmmword_19C46DE10;
              v134 = xmmword_19C46DE10;
              v135 = 0;
              v136 = xmmword_19C46DE10;
              v137 = 0xFFEFFFFFFFFFFFFFLL;
              v138 = 0;
              v77 = *(_QWORD *)(a1 + 88);
              v78 = *(_QWORD *)(a1 + 112);
              v79 = *(_QWORD **)(a1 + 8);
              v80 = *(unsigned int *)(v77 + 4 * v69);
              v130[0] = v77;
              v130[1] = v69;
              v130[2] = v78;
              v130[3] = v69;
              v130[4] = v77;
              v130[5] = v69;
              v130[6] = v77;
              v130[7] = v69;
              if (qword_1EDB97100 != -1)
                dispatch_once(&qword_1EDB97100, &unk_1E3D3BED0);
              v150 = 0;
              sub_19C32DD08(v79, v80 | (v80 << 32), v130, (uint64_t)&v131, qword_1EDB970F8, 1, 0, v149, v76);
              v81 = v150;
              if (v150 == v149)
                break;
              if (v150)
              {
                v82 = 5;
LABEL_123:
                (*(void (**)(void))(*v81 + 8 * v82))();
              }
              v70 = *(double *)&v131;
              if (*(double *)v139 == -1.79769313e308)
              {
                v75 = *((double *)&v131 + 1);
                *(_OWORD *)&v139[40] = v134;
                *(_OWORD *)&v139[64] = v136;
                *(_OWORD *)&v139[80] = v137;
                *(_QWORD *)&v139[96] = v138;
              }
              else
              {
                v70 = *(double *)&v131 + *(double *)v139;
                v75 = *(double *)&v139[8] + *((double *)&v131 + 1);
                v139[32] = 0;
              }
              *(double *)v139 = v70;
              *(double *)&v139[8] = v75;
              v68 &= BYTE9(v132) != 0;
              if (++v69 >= *(_QWORD *)(a1 + 136) + v56)
                goto LABEL_103;
            }
            v81 = v149;
            v82 = 4;
            goto LABEL_123;
          }
          v70 = -1.79769313e308;
LABEL_103:
          v139[113] = v68;
          v71 = v140;
          if (v140 && v56 && *(_DWORD *)(v119 + 288) != *(_DWORD *)(v119 + 292))
          {
            v72 = 4 * v56;
            do
            {
              v73 = *(_DWORD *)(v119 + 288) > *v53 || *v53 > *(_DWORD *)(v119 + 292);
              if (!v73 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v71 + 144))(v71) == 1)
              {
                if (*(double *)v139 <= *(double *)&v142)
                {
                  v74 = v128;
                }
                else
                {
                  v145 = *(_OWORD *)&v139[64];
                  v146 = *(_OWORD *)&v139[80];
                  v147 = *(_OWORD *)&v139[96];
                  v148[0] = *(_QWORD *)&v139[112];
                  v142 = *(_OWORD *)v139;
                  v143 = *(_OWORD *)&v139[16];
                  v74 = v128;
                  v115 = v56;
                  v116 = v128;
                  v117 = v56;
                  v144[0] = *(_OWORD *)&v139[32];
                  v144[1] = *(_OWORD *)&v139[48];
                }
                goto LABEL_50;
              }
              ++v53;
              v72 -= 4;
            }
            while (v72);
            v70 = *(double *)v139;
          }
          v83 = (char **)(a1 + 160);
          v84 = *v121;
          v85 = (char **)(a1 + 160);
          v74 = v128;
          if (!*v121)
            goto LABEL_141;
          do
          {
            while (1)
            {
              v83 = (char **)v84;
              v86 = *((double *)v84 + 4);
              if (v70 == v86)
                break;
              if (v70 <= v86)
              {
                if (v86 <= v70)
                  goto LABEL_49;
                goto LABEL_139;
              }
LABEL_129:
              v84 = *v83;
              v85 = v83;
              if (!*v83)
                goto LABEL_141;
            }
            v87 = *((_QWORD *)v84 + 19);
            if (v128 != v87)
            {
              if (v128 >= v87)
                goto LABEL_139;
              goto LABEL_129;
            }
            v88 = (unint64_t)v83[20];
            if (v56 < v88)
              goto LABEL_129;
            if (v88 >= v56)
              goto LABEL_49;
LABEL_139:
            v84 = v83[1];
          }
          while (v84);
          v85 = v83 + 1;
LABEL_141:
          v89 = (char *)operator new(0xA8uLL);
          *((double *)v89 + 4) = v70;
          v90 = *(_OWORD *)&v139[40];
          *(_OWORD *)(v89 + 88) = *(_OWORD *)&v139[56];
          v91 = *(_OWORD *)&v139[88];
          *(_OWORD *)(v89 + 104) = *(_OWORD *)&v139[72];
          *(_OWORD *)(v89 + 120) = v91;
          *(_OWORD *)(v89 + 136) = *(_OWORD *)&v139[104];
          v92 = *(_OWORD *)&v139[24];
          *(_OWORD *)(v89 + 40) = *(_OWORD *)&v139[8];
          *(_OWORD *)(v89 + 56) = v92;
          *(_OWORD *)(v89 + 72) = v90;
          *((_QWORD *)v89 + 19) = v128;
          *((_QWORD *)v89 + 20) = v56;
          *(_QWORD *)v89 = 0;
          *((_QWORD *)v89 + 1) = 0;
          *((_QWORD *)v89 + 2) = v83;
          *v85 = v89;
          v93 = *(_QWORD *)*v120;
          if (v93)
          {
            *v120 = v93;
            v89 = *v85;
          }
          sub_19C2A2310(*(uint64_t **)(a1 + 160), (uint64_t *)v89);
          ++*(_QWORD *)(a1 + 168);
LABEL_49:
          ++v126;
          ++*(_QWORD *)(a1 + 240);
LABEL_50:
          v28 = v56 + v74;
LABEL_51:
          v128 = v28;
        }
        ++v127;
        v27 = v128;
        if (v127 != v118)
          continue;
        break;
      }
      v148[1] = v116;
      v148[2] = v115;
      v7 = (_QWORD *)(a1 + 32);
      v2 = (_BYTE *)(a1 + 146);
      if (v117)
      {
        sub_19C3D17E0(v120, (uint64_t)&v142, (uint64_t)&v142);
        ++*(_QWORD *)(a1 + 240);
      }
LABEL_146:
      v94 = v141;
      if (v141)
      {
        v95 = (unint64_t *)&v141->__shared_owners_;
        do
          v96 = __ldaxr(v95);
        while (__stlxr(v96 - 1, v95));
        if (!v96)
        {
          ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
          std::__shared_weak_count::__release_weak(v94);
        }
      }
      if (*(_QWORD *)(a1 + 168))
      {
        *(_QWORD *)(a1 + 176) = *(_QWORD *)(a1 + 152);
        goto LABEL_10;
      }
LABEL_15:
      *v2 = 1;
LABEL_16:
      v8 = *(_QWORD *)(a1 + 48);
    }
    while ((_QWORD *)v8 != v7);
  }
  return 0;
}

void sub_19C3D139C(_Unwind_Exception *a1)
{
  sub_19C2B43C8((uint64_t)&STACK[0x220]);
  _Unwind_Resume(a1);
}

uint64_t sub_19C3D13FC(uint64_t a1, void *__dst, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint8x8_t v16;
  uint64_t v17;
  uint64_t v18;

  if (*(_QWORD *)(a1 + 168))
  {
    v5 = *(_QWORD *)(a1 + 176);
    v6 = *(_QWORD *)(v5 + 160);
    if (__dst && v6)
      memmove(__dst, (const void *)(*(_QWORD *)(a1 + 192) + 4 * *(_QWORD *)(v5 + 152)), 4 * v6);
    if (a3)
    {
      v7 = *(_QWORD *)(a1 + 176);
      v8 = *(_OWORD *)(v7 + 32);
      v9 = *(_OWORD *)(v7 + 48);
      v10 = *(_OWORD *)(v7 + 80);
      *(_OWORD *)(a3 + 32) = *(_OWORD *)(v7 + 64);
      *(_OWORD *)(a3 + 48) = v10;
      *(_OWORD *)a3 = v8;
      *(_OWORD *)(a3 + 16) = v9;
      v11 = *(_OWORD *)(v7 + 96);
      v12 = *(_OWORD *)(v7 + 112);
      v13 = *(_OWORD *)(v7 + 128);
      *(_QWORD *)(a3 + 112) = *(_QWORD *)(v7 + 144);
      *(_OWORD *)(a3 + 80) = v12;
      *(_OWORD *)(a3 + 96) = v13;
      *(_OWORD *)(a3 + 64) = v11;
    }
  }
  else
  {
    if (!*(_BYTE *)(a1 + 228))
    {
      v14 = *(_QWORD *)(a1 + 8);
      v15 = ((uint64_t)(*(_QWORD *)(v14 + 160) - *(_QWORD *)(v14 + 152)) >> 3)
          + ((uint64_t)(*(_QWORD *)(v14 + 136) - *(_QWORD *)(v14 + 128)) >> 4);
      if (*(_BYTE *)(*(_QWORD *)(v14 + 232) + 192))
      {
        v16 = (uint8x8_t)vcnt_s8((int8x8_t)vaddvq_s32((int32x4_t)vbicq_s8((int8x16_t)xmmword_19C46DF10, (int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_s64(*(int64x2_t *)(v14 + 264)), (int32x4_t)vceqzq_s64(*(int64x2_t *)(v14 + 288))))));
        v16.i16[0] = vaddlv_u8(v16);
        if (*(_QWORD *)(v14 + 304))
          v17 = v16.u32[0] + 1;
        else
          v17 = v16.u32[0];
        v15 += v17;
      }
      if (v15 == 1)
      {
        v18 = **(_QWORD **)(*(_QWORD *)(a1 + 48) + 40);
        return (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(_QWORD *)v18 + 24))(v18, __dst, a3);
      }
    }
    return 0;
  }
  return v6;
}

uint64_t sub_19C3D1554(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v8;
  int *v9;
  uint64_t v10;
  int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  _QWORD **v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD **v18;
  uint64_t result;
  unint64_t v20;
  unint64_t v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v4 = a4;
  v5 = a3;
  if (a4 && *(_DWORD *)(a2 + 4 * a3) == 1)
    return 0;
  v8 = a4 + a3;
  if (a4 + a3 > a3)
  {
    v9 = (int *)(a2 + 4 * a3);
    v10 = a4;
    do
    {
      v12 = *v9++;
      v11 = v12;
      if ((v12 - 3) <= 0x1F0)
      {
        v13 = v11 - 68;
        if (v13 > 0x3C || ((0x7FFFFFFFFFFFFE0uLL >> v13) & 1) != 0)
          return 0;
      }
    }
    while (--v10);
  }
  v14 = *(_QWORD *)(a1 + 8);
  v15 = *(_QWORD ***)(v14 + 184);
  v16 = *(_QWORD *)(v14 + 192);
  if (v16 - (_QWORD)v15 == 16)
  {
    if ((sub_19C32FB3C(v14, a2 + 4 * a3, a4, 4, 0, 1, 1, *v15) & 1) != 0)
      return 0;
    v14 = *(_QWORD *)(a1 + 8);
    v15 = *(_QWORD ***)(v14 + 184);
    v16 = *(_QWORD *)(v14 + 192);
  }
  if (v16 - (_QWORD)v15 == 16)
  {
    if ((sub_19C32FB3C(v14, a2, v4 + v5, 2, 0, 1, 1, *v15) & 1) == 0)
    {
      v14 = *(_QWORD *)(a1 + 8);
      v15 = *(_QWORD ***)(v14 + 184);
      v16 = *(_QWORD *)(v14 + 192);
      goto LABEL_16;
    }
    return 0;
  }
LABEL_16:
  if (v16 - (_QWORD)v15 == 16 && (sub_19C32FB3C(v14, a2, v4 + v5, 3, 0, 4, 1, *v15) & 1) != 0)
    return 0;
  while (v4 >= 2)
  {
    v17 = *(_QWORD *)(a1 + 8);
    v18 = *(_QWORD ***)(v17 + 184);
    if (*(_QWORD *)(v17 + 192) - (_QWORD)v18 == 16
      && (sub_19C32FB3C(v17, a2, v5 + v4 - 1, 2, 0, 1, 1, *v18) & 1) != 0)
    {
      return 0;
    }
    --v4;
  }
  v20 = v5 - 2;
  if (v5 >= 2)
  {
    while (v20 <= v8 - 3)
    {
      v21 = a2 + 4 * v5;
      v22 = *(_DWORD *)(v21 - 8);
      if (v22 == *(_DWORD *)(v21 - 4) && v22 == *(_DWORD *)(a2 + 4 * v5))
        return 0;
      v20 = v5++ - 1;
    }
  }
  v23 = 5;
  if (v8 >> 1 < 5)
    v23 = v8 >> 1;
  if (v23 < 2)
    return 1;
  v24 = a2 + 4 * v8;
  v26 = *(_QWORD *)(v24 - 16);
  v25 = *(_QWORD *)(v24 - 8);
  result = v25 != v26;
  if (v23 != 2 && v25 != v26)
  {
    v27 = *(_QWORD *)(v24 - 12) ^ *(_QWORD *)(v24 - 24) | (*(_DWORD *)(v24 - 4) ^ *(_DWORD *)(v24 - 16));
    result = v27 != 0;
    if (v23 != 3)
    {
      if (v27)
      {
        result = *(_OWORD *)(v24 - 16) != *(_OWORD *)(v24 - 32);
        if (v23 != 4 && *(_OWORD *)(v24 - 16) != *(_OWORD *)(v24 - 32))
        {
          v28 = *(_QWORD *)(v24 - 20);
          v29 = *(_QWORD *)(v24 - 12);
          v30 = *(_QWORD *)(v24 - 40);
          v31 = *(_QWORD *)(v24 - 32);
          v32 = *(unsigned int *)(v24 - 4);
          v33 = *(unsigned int *)(v24 - 24);
          return v28 != v30 || v29 != v31 || v32 != v33;
        }
      }
    }
  }
  return result;
}

uint64_t *sub_19C3D17E0(uint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t **v6;
  double v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  double v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  char v15;
  char v16;
  _OWORD *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t *v23;

  v4 = result;
  v6 = (uint64_t **)(result + 1);
  v5 = result[1];
  if (!v5)
  {
    v10 = result + 1;
    goto LABEL_25;
  }
  v7 = *(double *)a2;
  v8 = *(_QWORD *)(a2 + 120);
  v9 = *(_QWORD *)(a2 + 128);
  do
  {
    while (1)
    {
      v10 = (_QWORD *)v5;
      v11 = *(double *)(v5 + 32);
      if (v7 == v11)
        break;
      if (v7 <= v11)
      {
        if (v11 <= v7)
          return result;
        goto LABEL_22;
      }
LABEL_3:
      v5 = *v10;
      v6 = (uint64_t **)v10;
      if (!*v10)
        goto LABEL_25;
    }
    v12 = *(_QWORD *)(v5 + 152);
    if (v8 == v12)
    {
      v13 = v10[20];
      if (v9 < v13)
        goto LABEL_3;
      v14 = v13 == v9;
      if (v13 >= v9)
        v15 = 1;
      else
        v15 = -1;
      if (v14)
        v15 = 0;
      if ((v15 & 0x80) == 0)
        return result;
    }
    else
    {
      if (v8 < v12)
        goto LABEL_3;
      if (v12 >= v8)
        v16 = 1;
      else
        v16 = -1;
      if ((v16 & 0x80) == 0)
        return result;
    }
LABEL_22:
    v5 = v10[1];
  }
  while (v5);
  v6 = (uint64_t **)(v10 + 1);
LABEL_25:
  v17 = operator new(0xA8uLL);
  v18 = *(_OWORD *)(a3 + 112);
  v17[8] = *(_OWORD *)(a3 + 96);
  v17[9] = v18;
  *((_QWORD *)v17 + 20) = *(_QWORD *)(a3 + 128);
  v19 = *(_OWORD *)(a3 + 48);
  v17[4] = *(_OWORD *)(a3 + 32);
  v17[5] = v19;
  v20 = *(_OWORD *)(a3 + 80);
  v17[6] = *(_OWORD *)(a3 + 64);
  v17[7] = v20;
  v21 = *(_OWORD *)(a3 + 16);
  v17[2] = *(_OWORD *)a3;
  v17[3] = v21;
  *(_QWORD *)v17 = 0;
  *((_QWORD *)v17 + 1) = 0;
  *((_QWORD *)v17 + 2) = v10;
  *v6 = (uint64_t *)v17;
  v22 = *(_QWORD *)*v4;
  if (v22)
  {
    *v4 = v22;
    v23 = *v6;
  }
  else
  {
    v23 = (uint64_t *)v17;
  }
  result = sub_19C2A2310((uint64_t *)v4[1], v23);
  ++v4[2];
  return result;
}

uint64_t sub_19C3D190C(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  *(_QWORD *)a1 = &off_1E3D371D8;
  v2 = *(void **)(a1 + 192);
  if (v2)
  {
    *(_QWORD *)(a1 + 200) = v2;
    operator delete(v2);
  }
  sub_19C33275C(*(_QWORD **)(a1 + 160));
  v3 = *(void **)(a1 + 112);
  if (v3)
  {
    *(_QWORD *)(a1 + 120) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 88);
  if (v4)
  {
    *(_QWORD *)(a1 + 96) = v4;
    operator delete(v4);
  }
  sub_19C3C061C(a1 + 56);
  sub_19C3D19B8(*(_QWORD **)(a1 + 32));
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return a1;
}

void sub_19C3D19B8(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  if (a1)
  {
    sub_19C3D19B8(*a1);
    sub_19C3D19B8(a1[1]);
    v2 = (_QWORD *)a1[5];
    if (v2)
    {
      v3 = (_QWORD *)a1[6];
      v4 = (void *)a1[5];
      if (v3 != v2)
      {
        do
        {
          v6 = *--v3;
          v5 = v6;
          *v3 = 0;
          if (v6)
            (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
        }
        while (v3 != v2);
        v4 = (void *)a1[5];
      }
      a1[6] = v2;
      operator delete(v4);
    }
    operator delete(a1);
  }
}

uint64_t sub_19C3D1A44(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4, __int16 a5, uint64_t a6, int a7, unint64_t a8)
{
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  __n128 v21;
  uint64_t v22;
  char **v23;
  char *v24;
  char **v25;
  uint64_t v26;
  double v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  _BYTE *v39;
  int v40;
  uint64_t v41;
  int v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  _BYTE *v48;
  unint64_t v49;
  _BYTE *v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  _BYTE *v56;
  size_t v57;
  char *v58;
  unint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  _OWORD *v63;
  __int128 *v64;
  uint64_t v65;
  __int128 v66;
  int v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  uint64_t v74;
  unint64_t v75;
  _DWORD *v76;
  uint64_t v77;
  unsigned int v78;
  _QWORD **v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  _QWORD *v93;
  _QWORD *v94;
  unint64_t v95;
  BOOL v96;
  _QWORD *v97;
  _QWORD *v98;
  uint64_t **v99;
  uint64_t *v100;
  uint64_t **v101;
  unint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t *v105;
  uint64_t **v106;
  _QWORD *v107;
  void **v108;
  _QWORD *v109;
  _QWORD *v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t *v116;
  _QWORD *v117;
  _QWORD *v118;
  unint64_t v119;
  BOOL v120;
  _QWORD *v121;
  _QWORD *v122;
  uint64_t **v123;
  uint64_t *v124;
  uint64_t **v125;
  unint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  uint64_t *v129;
  uint64_t **v130;
  _QWORD *v131;
  void **v132;
  _QWORD *v133;
  _QWORD *v134;
  void *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t *v138;
  _QWORD *v139;
  uint64_t *v140;
  uint64_t *v141;
  unint64_t v142;
  unint64_t v143;
  char *v144;
  uint64_t v145;
  _QWORD *v146;
  unint64_t v147;
  uint64_t *v148;
  _QWORD *v149;
  _QWORD *v150;
  unint64_t v151;
  BOOL v152;
  _QWORD *v153;
  _QWORD *v154;
  uint64_t **v155;
  uint64_t *v156;
  uint64_t **v157;
  unint64_t v158;
  _QWORD *v159;
  uint64_t v160;
  uint64_t *v161;
  uint64_t **v162;
  _QWORD *v163;
  _QWORD *v164;
  void **v165;
  _QWORD *v166;
  void *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t *v173;
  _QWORD *v174;
  _QWORD *v175;
  unint64_t v176;
  BOOL v177;
  _QWORD *v178;
  _QWORD *v179;
  uint64_t **v180;
  uint64_t *v181;
  uint64_t **v182;
  unint64_t v183;
  _QWORD *v184;
  uint64_t v185;
  uint64_t *v186;
  uint64_t **v187;
  _QWORD *v188;
  void **v189;
  _QWORD *v190;
  _QWORD *v191;
  void *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t *v195;
  uint64_t v196;
  uint64_t v197;
  unint64_t v198;
  uint64_t v199;
  unint64_t v200;
  unint64_t v201;
  uint64_t v202;
  unint64_t v203;
  _QWORD *v204;
  uint64_t **v205;
  uint64_t *v206;
  unint64_t v207;
  int v208;
  unint64_t v209;
  unint64_t v210;
  unint64_t v211;
  uint64_t v212;
  unint64_t v213;
  unint64_t v214;
  uint64_t v215;
  unint64_t v216;
  unsigned int v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  int v223;
  BOOL v224;
  BOOL v225;
  uint64_t v226;
  uint64_t v227;
  _DWORD *v228;
  unint64_t v229;
  char *v230;
  char *v231;
  char *v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  char *v244;
  _BOOL4 v245;
  char *v246;
  int64_t v247;
  uint64_t v248;
  unint64_t v249;
  unint64_t v250;
  unint64_t v251;
  unint64_t v252;
  _BYTE *v253;
  char *v254;
  unint64_t v255;
  char *v256;
  int v257;
  uint64_t v258;
  _OWORD *v259;
  char *v260;
  uint64_t v261;
  __int128 v262;
  int v263;
  void *v264;
  int v265;
  char *v266;
  char *v267;
  void *v268;
  uint64_t v269;
  uint64_t v270;
  void *v271;
  uint64_t v272;
  int v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  unsigned int *v278;
  unsigned int *v279;
  unsigned int v280;
  size_t v281;
  uint64_t v282;
  unint64_t v283;
  _BYTE *v284;
  size_t v285;
  unint64_t v286;
  char *v287;
  BOOL v288;
  char *v289;
  size_t v290;
  char *v291;
  unint64_t v292;
  uint64_t v293;
  _BYTE *v294;
  _BYTE *v295;
  unint64_t v296;
  unint64_t v297;
  int v298;
  _BYTE *v299;
  size_t v300;
  std::string::size_type v301;
  size_t v302;
  unint64_t v303;
  std::string *v304;
  size_t v305;
  unint64_t v306;
  uint64_t v307;
  std::string *v308;
  size_t v309;
  _BYTE *v310;
  unint64_t v311;
  uint64_t v312;
  void *v313;
  std::string::size_type v314;
  const char *v315;
  size_t v316;
  size_t v317;
  _BYTE *v318;
  uint64_t v319;
  uint64_t v320;
  int v321;
  float v322;
  unsigned __int8 v323;
  unsigned int v324;
  const char *v325;
  size_t v326;
  size_t v327;
  _BYTE *v328;
  uint64_t v329;
  uint64_t v330;
  unsigned __int8 v331;
  const char *v332;
  size_t v333;
  size_t v334;
  _BYTE *v335;
  uint64_t v336;
  uint64_t v337;
  unsigned int v338;
  uint64_t v339;
  int v340;
  unint64_t v341;
  int v342;
  unint64_t v343;
  uint64_t v344;
  _BYTE *v345;
  uint64_t v346;
  int v347;
  BOOL v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  char *v355;
  char *v356;
  char *v357;
  char *v358;
  char *v359;
  char *v360;
  std::string *v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  char *v365;
  __int128 v366;
  char *v367;
  __int128 v368;
  char *v369;
  __int128 v370;
  char *v371;
  char *v372;
  char *v373;
  _BYTE *v374;
  uint64_t v375;
  int v376;
  char *v378;
  __int128 v379;
  char *v380;
  char *v381;
  char *v382;
  void *v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  void *v387;
  uint64_t v388;
  int v389;
  std::string::size_type size;
  uint64_t v391;
  std::string::size_type v392;
  uint64_t v393;
  std::string::size_type v394;
  std::string::size_type v395;
  std::string::size_type v396;
  void *v397;
  uint64_t v398;
  uint64_t v399;
  void *v400;
  uint64_t *v401;
  _QWORD *v402;
  uint64_t v403;
  uint64_t v404;
  unint64_t v405;
  uint64_t v406;
  _QWORD *v407;
  uint64_t v408;
  size_t v409;
  uint64_t v410;
  unint64_t v411;
  __int128 *v412;
  size_t v413;
  unint64_t v414;
  char *v415;
  char *v417;
  size_t v418;
  char *v419;
  unint64_t v420;
  uint64_t v421;
  _BYTE *v422;
  _BYTE *v423;
  int v424;
  __int128 *v425;
  size_t v426;
  std::string::size_type v427;
  std::string::size_type v428;
  unint64_t v429;
  std::string *v430;
  size_t v431;
  unint64_t v432;
  std::string *v433;
  std::string::size_type v434;
  _BYTE *v435;
  unint64_t v436;
  uint64_t v437;
  void *v438;
  std::string::size_type v439;
  uint64_t **v440;
  void **v441;
  std::string *v442;
  std::string::size_type v443;
  uint64_t v444;
  uint64_t v445;
  void *v446;
  uint64_t v447;
  _QWORD *v448;
  _QWORD *v449;
  uint64_t v450;
  _QWORD *v451;
  unsigned int v452;
  int v453;
  _QWORD *v454;
  _QWORD *v455;
  _QWORD *v456;
  _QWORD *v457;
  uint64_t **i;
  _QWORD *v459;
  uint64_t *v460;
  uint64_t *v461;
  uint64_t v462;
  uint64_t v463;
  char *v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  char *v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t *v471;
  uint64_t **v472;
  uint64_t **v473;
  unsigned int v474;
  uint64_t *v475;
  uint64_t *v476;
  int v477;
  uint64_t v478;
  uint64_t v479;
  char *v480;
  uint64_t v481;
  __int128 v482;
  char *v483;
  uint64_t v484;
  uint64_t v485;
  char *v486;
  char *v487;
  uint64_t v488;
  unint64_t v489;
  _DWORD *v490;
  unint64_t v491;
  uint64_t v492;
  unint64_t v493;
  _BYTE *v494;
  unsigned int *v495;
  char *v496;
  unint64_t v497;
  uint64_t v498;
  _OWORD *v499;
  char *v500;
  uint64_t v501;
  __int128 v502;
  unsigned int v503;
  uint64_t v505;
  void **v506;
  uint64_t **v507;
  uint64_t v509;
  uint64_t **v510;
  std::mutex *v511;
  uint64_t *v512;
  uint64_t v513;
  unint64_t v514;
  uint64_t v515;
  uint64_t **v516;
  unint64_t v517;
  unint64_t v519;
  unint64_t v520;
  uint64_t v521;
  _QWORD *v522;
  unsigned int *__src;
  _DWORD *__srca;
  std::string *__srcb;
  uint64_t *v526;
  uint64_t **v527;
  uint64_t v528;
  void *v529;
  uint64_t v530;
  uint64_t v531;
  int v532;
  uint64_t **v533;
  _QWORD *v534;
  uint64_t v535;
  unint64_t v536;
  unint64_t v537;
  unint64_t v538;
  uint64_t v539;
  unsigned int *v540;
  void *v541[2];
  uint64_t v542;
  char *v543;
  uint64_t v544;
  uint64_t v545;
  std::string *v546;
  char **v547;
  char *v548;
  char *v549;
  _QWORD *v550;
  void *v551;
  uint64_t v552;
  _BYTE __dst[56];
  _BYTE v554[32];
  __int128 v555;
  __int128 v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t *v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t *v562;
  uint64_t v563[2];
  uint64_t *v564;
  uint64_t v565;
  uint64_t v566;
  void *v567;
  char *v568;
  unint64_t v569;
  __int128 v570;
  unint64_t v571;
  void (**v572)();
  uint64_t v573;
  _BYTE v574[32];
  __int128 v575;
  int64_t v576;
  void (**v577)();
  uint64_t v578;
  std::string v579;

  v11 = (uint64_t)a1;
  *a1 = &off_1E3D371D8;
  a1[1] = a2;
  v512 = a1 + 1;
  a1[2] = a3;
  if (a3)
  {
    v12 = (unint64_t *)(a3 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  a1[8] = 0;
  a1[7] = a1 + 8;
  a1[4] = 0;
  v522 = a1 + 4;
  a1[3] = a1 + 4;
  a1[5] = 0;
  a1[6] = 0;
  v533 = (uint64_t **)(a1 + 7);
  a1[9] = 0;
  v14 = (char *)malloc_type_calloc(1uLL, 0x83CuLL, 0x105004056F6A631uLL);
  if (v14)
  {
    *((_OWORD *)v14 + 129) = 0u;
    *((_DWORD *)v14 + 520) = 1;
    *(_QWORD *)(v14 + 2084) = 0;
    *(_QWORD *)(v14 + 2092) = 64;
  }
  *(_OWORD *)(v11 + 88) = 0u;
  *(_QWORD *)(v11 + 160) = 0;
  v547 = (char **)(v11 + 160);
  *(_QWORD *)(v11 + 152) = v11 + 160;
  v526 = (uint64_t *)(v11 + 152);
  *(_QWORD *)(v11 + 80) = v14;
  v505 = v11 + 88;
  v506 = (void **)(v11 + 112);
  *(_QWORD *)(v11 + 168) = 0;
  *(_QWORD *)(v11 + 176) = 0;
  *(_OWORD *)(v11 + 104) = 0u;
  *(_OWORD *)(v11 + 120) = 0u;
  *(_OWORD *)(v11 + 131) = 0u;
  *(_QWORD *)(v11 + 184) = a8;
  *(_QWORD *)(v11 + 192) = 0;
  v534 = (_QWORD *)(v11 + 192);
  *(_QWORD *)(v11 + 200) = 0;
  *(_QWORD *)(v11 + 208) = 0;
  *(_QWORD *)(v11 + 216) = a6;
  *(_DWORD *)(v11 + 224) = a7;
  *(_BYTE *)(v11 + 228) = 0;
  *(_DWORD *)(v11 + 232) = 0;
  *(_QWORD *)(v11 + 240) = 0;
  if (a8)
    sub_19C316738((uint64_t)v534, a8);
  if ((a5 & 0xFF00) != 0)
    *(_WORD *)(v11 + 144) = a5;
  v552 = v11;
  if (a7 == 2)
    goto LABEL_95;
  v513 = a6;
  v515 = a8;
  v527 = *(uint64_t ***)(*v512 + 96);
  v516 = *(uint64_t ***)(*v512 + 104);
  if (v527 == v516)
    goto LABEL_94;
  v15 = 0;
  v16 = a4[1];
  __src = (unsigned int *)(*a4 + 4 * v16);
  *(int64x2_t *)v541 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  v520 = v16;
  while (1)
  {
    v17 = v16 >= *((unsigned __int8 *)v527 + 32) ? *((unsigned __int8 *)v527 + 32) : v16;
    if (v17)
      break;
LABEL_13:
    v527 += 5;
    if (v527 == v516)
      goto LABEL_94;
  }
  while (1)
  {
    v18 = v17 - 1;
    if (v17 - 1 < v16)
      break;
LABEL_20:
    v96 = v17 <= 1;
    v17 = v18;
    if (v96)
      goto LABEL_13;
  }
  v19 = (_QWORD *)operator new();
  *v19 = &off_1E3D37140;
  v19[1] = v527;
  v19[2] = sub_19C3BAA78(v527[2], &__src[-v17], v17);
  v530 = v17 - 1;
  v535 = v17;
  if (!(*(unsigned int (**)(_QWORD *))(*v19 + 16))(v19))
    goto LABEL_19;
  do
  {
    *(_BYTE *)(v11 + 228) = 1;
    *(_OWORD *)__dst = *(_OWORD *)v541;
    *(_QWORD *)&__dst[16] = 0;
    *(_WORD *)&__dst[24] = 0;
    __dst[32] = 1;
    *(_OWORD *)&__dst[40] = xmmword_19C46DE10;
    *(_DWORD *)v554 = 0;
    *(_OWORD *)&v554[8] = xmmword_19C46DE10;
    *(_QWORD *)&v554[24] = 0xFFEFFFFFFFFFFFFFLL;
    HIDWORD(v556) = 0;
    *(_QWORD *)&v556 = 0;
    v555 = 0uLL;
    WORD4(v556) = 0;
    v20 = (*(uint64_t (**)(_QWORD *, unint64_t, _BYTE *))(*v19 + 24))(v19, *(_QWORD *)(v11 + 192) + 4 * v15, __dst);
    sub_19C3C0690(v533, (unsigned int *)(*v534 + 4 * v15), v20, v21);
    v22 = *(_QWORD *)__dst;
    v23 = v547;
    v24 = *v547;
    v25 = v547;
    v26 = v552;
    if (!*v547)
      goto LABEL_37;
    do
    {
      while (1)
      {
        v23 = (char **)v24;
        v27 = *((double *)v24 + 4);
        if (*(double *)__dst == v27)
          break;
        if (*(double *)__dst <= v27)
        {
          if (v27 <= *(double *)__dst)
            goto LABEL_68;
          goto LABEL_35;
        }
LABEL_25:
        v24 = *v23;
        v25 = v23;
        if (!*v23)
          goto LABEL_37;
      }
      v28 = *((_QWORD *)v24 + 19);
      if (v15 != v28)
      {
        if (v15 >= v28)
          goto LABEL_35;
        goto LABEL_25;
      }
      v29 = (unint64_t)v23[20];
      if (v20 < v29)
        goto LABEL_25;
      if (v29 >= v20)
        goto LABEL_68;
LABEL_35:
      v24 = v23[1];
    }
    while (v24);
    v25 = v23 + 1;
LABEL_37:
    v30 = (char *)operator new(0xA8uLL);
    *((_QWORD *)v30 + 4) = v22;
    v31 = *(_OWORD *)&__dst[40];
    *(_OWORD *)(v30 + 88) = *(_OWORD *)v554;
    v32 = v555;
    *(_OWORD *)(v30 + 104) = *(_OWORD *)&v554[16];
    *(_OWORD *)(v30 + 120) = v32;
    *(_OWORD *)(v30 + 136) = v556;
    v33 = *(_OWORD *)&__dst[24];
    *(_OWORD *)(v30 + 40) = *(_OWORD *)&__dst[8];
    *(_OWORD *)(v30 + 56) = v33;
    *(_OWORD *)(v30 + 72) = v31;
    *((_QWORD *)v30 + 19) = v15;
    *((_QWORD *)v30 + 20) = v20;
    *(_QWORD *)v30 = 0;
    *((_QWORD *)v30 + 1) = 0;
    *((_QWORD *)v30 + 2) = v23;
    *v25 = v30;
    v34 = *(_QWORD *)*v526;
    if (v34)
    {
      *v526 = v34;
      v30 = *v25;
    }
    v35 = *v547;
    v224 = v30 == *v547;
    v30[24] = v224;
    v26 = v552;
    if (!v224)
    {
      do
      {
        v36 = *((_QWORD *)v30 + 2);
        if (*(_BYTE *)(v36 + 24))
          break;
        v37 = *(char **)(v36 + 16);
        v38 = *(_QWORD *)v37;
        if (*(_QWORD *)v37 == v36)
        {
          v41 = *((_QWORD *)v37 + 1);
          if (!v41 || (v42 = *(unsigned __int8 *)(v41 + 24), v39 = (_BYTE *)(v41 + 24), v42))
          {
            if (*(char **)v36 == v30)
            {
              v43 = (uint64_t *)*((_QWORD *)v30 + 2);
            }
            else
            {
              v43 = *(uint64_t **)(v36 + 8);
              v44 = *v43;
              *(_QWORD *)(v36 + 8) = *v43;
              if (v44)
              {
                *(_QWORD *)(v44 + 16) = v36;
                v37 = *(char **)(v36 + 16);
              }
              v43[2] = (uint64_t)v37;
              *(_QWORD *)(*(_QWORD *)(v36 + 16) + 8 * (**(_QWORD **)(v36 + 16) != v36)) = v43;
              *v43 = v36;
              *(_QWORD *)(v36 + 16) = v43;
              v37 = (char *)v43[2];
              v36 = *(_QWORD *)v37;
            }
            *((_BYTE *)v43 + 24) = 1;
            v37[24] = 0;
            v47 = *(_QWORD *)(v36 + 8);
            *(_QWORD *)v37 = v47;
            if (v47)
              *(_QWORD *)(v47 + 16) = v37;
            *(_QWORD *)(v36 + 16) = *((_QWORD *)v37 + 2);
            *(_QWORD *)(*((_QWORD *)v37 + 2) + 8 * (**((_QWORD **)v37 + 2) != (_QWORD)v37)) = v36;
            *(_QWORD *)(v36 + 8) = v37;
            goto LABEL_66;
          }
        }
        else if (!v38 || (v40 = *(unsigned __int8 *)(v38 + 24), v39 = (_BYTE *)(v38 + 24), v40))
        {
          if (*(char **)v36 == v30)
          {
            v45 = *((_QWORD *)v30 + 1);
            *(_QWORD *)v36 = v45;
            if (v45)
            {
              *(_QWORD *)(v45 + 16) = v36;
              v37 = *(char **)(v36 + 16);
            }
            *((_QWORD *)v30 + 2) = v37;
            *(_QWORD *)(*(_QWORD *)(v36 + 16) + 8 * (**(_QWORD **)(v36 + 16) != v36)) = v30;
            *((_QWORD *)v30 + 1) = v36;
            *(_QWORD *)(v36 + 16) = v30;
            v37 = (char *)*((_QWORD *)v30 + 2);
          }
          else
          {
            v30 = (char *)*((_QWORD *)v30 + 2);
          }
          v30[24] = 1;
          v37[24] = 0;
          v36 = *((_QWORD *)v37 + 1);
          v46 = *(char **)v36;
          *((_QWORD *)v37 + 1) = *(_QWORD *)v36;
          if (v46)
            *((_QWORD *)v46 + 2) = v37;
          *(_QWORD *)(v36 + 16) = *((_QWORD *)v37 + 2);
          *(_QWORD *)(*((_QWORD *)v37 + 2) + 8 * (**((_QWORD **)v37 + 2) != (_QWORD)v37)) = v36;
          *(_QWORD *)v36 = v37;
LABEL_66:
          *((_QWORD *)v37 + 2) = v36;
          break;
        }
        *(_BYTE *)(v36 + 24) = 1;
        v30 = v37;
        v37[24] = v37 == v35;
        *v39 = 1;
      }
      while (v37 != v35);
    }
    ++*(_QWORD *)(v552 + 168);
LABEL_68:
    v15 += v20;
    v48 = *(_BYTE **)(v26 + 192);
    v49 = *(_QWORD *)(v26 + 184) + v15;
    v50 = *(_BYTE **)(v26 + 200);
    v51 = (v50 - v48) >> 2;
    v52 = v49 - v51;
    if (v49 <= v51)
    {
      if (v49 >= v51)
        goto LABEL_92;
      v61 = &v48[4 * v49];
      goto LABEL_83;
    }
    v53 = *(_QWORD *)(v26 + 208);
    if (v52 <= (v53 - (uint64_t)v50) >> 2)
    {
      bzero(*(void **)(v26 + 200), 4 * v52);
      v61 = &v50[4 * v52];
LABEL_83:
      *(_QWORD *)(v26 + 200) = v61;
      goto LABEL_92;
    }
    if (v49 >> 62)
      sub_19C2A18E8();
    v54 = v53 - (_QWORD)v48;
    if (v54 >> 1 > v49)
      v49 = v54 >> 1;
    if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFFCLL)
      v55 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v55 = v49;
    if (v55 >> 62)
      sub_19C2A143C();
    v56 = operator new(4 * v55);
    v57 = 4 * v52;
    v58 = &v56[4 * v51];
    bzero(v58, v57);
    if (v50 == v48)
    {
      v60 = v58;
    }
    else
    {
      v59 = v50 - 4 - v48;
      if (v59 < 0x2C)
      {
        v60 = v58;
        goto LABEL_89;
      }
      v60 = v58;
      if ((unint64_t)(v48 - v56) < 0x20)
        goto LABEL_989;
      v62 = (v59 >> 2) + 1;
      v63 = &v56[v50 - v48 - 16];
      v64 = (__int128 *)(v50 - 16);
      v65 = v62 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v66 = *v64;
        *(v63 - 1) = *(v64 - 1);
        *v63 = v66;
        v63 -= 2;
        v64 -= 2;
        v65 -= 8;
      }
      while (v65);
      v60 = &v58[-4 * (v62 & 0x7FFFFFFFFFFFFFF8)];
      v50 -= 4 * (v62 & 0x7FFFFFFFFFFFFFF8);
      if (v62 != (v62 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_989:
        do
        {
LABEL_89:
          v67 = *((_DWORD *)v50 - 1);
          v50 -= 4;
          *((_DWORD *)v60 - 1) = v67;
          v60 -= 4;
        }
        while (v50 != v48);
      }
    }
    v68 = &v56[4 * v55];
    v26 = v552;
    *(_QWORD *)(v552 + 192) = v60;
    *(_QWORD *)(v552 + 200) = &v58[v57];
    *(_QWORD *)(v552 + 208) = v68;
    if (v48)
      operator delete(v48);
LABEL_92:
    ++*(_QWORD *)(v26 + 240);
    v11 = v552;
  }
  while (((*(uint64_t (**)(_QWORD *))(*v19 + 16))(v19) & 1) != 0);
LABEL_19:
  (*(void (**)(_QWORD *))(*v19 + 8))(v19);
  v16 = v520;
  v17 = v535;
  v18 = v530;
  if (!*(_BYTE *)(v11 + 228))
    goto LABEL_20;
LABEL_94:
  sub_19C3D5CA4(v11, *(_QWORD **)(*(_QWORD *)(v11 + 8) + 296), a4[4], a4[5], v513, v515);
  sub_19C3D5CA4(v11, *(_QWORD **)(*(_QWORD *)(v11 + 8) + 288), a4[6], a4[7], v513, v515);
  if (a7 == 1)
    goto LABEL_314;
LABEL_95:
  v69 = 0;
  v71 = *a4;
  v70 = a4[1];
  v73 = (char *)a4[2];
  v72 = a4[3];
  v74 = a4[4];
  v75 = a4[5];
  v76 = (_DWORD *)*a4;
  while (2)
  {
    v77 = v70 + v69;
    if (v70 + v69 == 1)
    {
      if ((*v76 - 3) > 0x1F0)
        goto LABEL_103;
      v78 = *v76 - 68;
      if (v78 <= 0x3C && ((0x7FFFFFFFFFFFFE0uLL >> v78) & 1) == 0)
        goto LABEL_103;
      goto LABEL_96;
    }
    if (!v77)
      break;
LABEL_103:
    v79 = *(_QWORD ***)(*v512 + 184);
    if (*(_QWORD *)(*v512 + 192) - (_QWORD)v79 == 16
      && sub_19C32FB3C(*v512, v71, v77, 4, 0, 2, 1, *v79))
    {
LABEL_96:
      ++v76;
      --v69;
      v71 += 4;
      continue;
    }
    break;
  }
  v80 = *(_QWORD *)(v552 + 216);
  if (v69 && (v80 & 4) != 0)
  {
    v11 = v552;
    *(_QWORD *)(v552 + 136) = 0;
    goto LABEL_302;
  }
  v81 = v70 + v69;
  *(_QWORD *)(v552 + 136) = v70 + v69;
  if (v72 >= v70 + v69)
    v82 = v70 + v69;
  else
    v82 = v72;
  v548 = &v73[4 * v72];
  if (v75 >= v81)
    v83 = v81;
  else
    v83 = v75;
  v528 = v83;
  v531 = v74;
  v84 = *(_QWORD **)(v552 + 8);
  v85 = v84[33];
  v542 = v82;
  v536 = v75;
  v538 = v80;
  if (!v85
    || *(float *)(v84[29] + 204) <= 0.0
    || ((v86 = (v80 >> 3) & 1, v82 >= *(unsigned __int8 *)(v85 + 96) - 1)
      ? (v87 = *(unsigned __int8 *)(v85 + 96) - 1)
      : (v87 = v82),
        (uint64_t)v87 < v86))
  {
    v88 = v84[34];
    if (!v88)
      goto LABEL_208;
    goto LABEL_121;
  }
  while (2)
  {
    if (v87 && v82)
    {
      v91 = *(_QWORD *)(v552 + 184);
      v92 = (uint64_t *)operator new();
      sub_19C432254((uint64_t)v92, (_QWORD *)v85, &v548[-4 * v87], v87, v91, *(_QWORD *)(v85 + 112));
      v559 = v92;
      v93 = (_QWORD *)*v522;
      if (!*v522)
        goto LABEL_141;
      v94 = v522;
      do
      {
        v95 = v93[4];
        v96 = v95 > v87;
        if (v95 <= v87)
          v97 = v93;
        else
          v97 = v93 + 1;
        if (!v96)
          v94 = v93;
        v93 = (_QWORD *)*v97;
      }
      while (*v97);
      if (v94 != v522 && v87 <= v94[4])
      {
        v106 = (uint64_t **)v94[6];
        if ((unint64_t)v106 >= v94[7])
        {
          v107 = sub_19C32F5A4(v94 + 5, (uint64_t *)&v559);
        }
        else
        {
          v559 = 0;
          *v106 = v92;
          v107 = v106 + 1;
        }
        v94[6] = v107;
        v114 = v559;
        if (!v559)
          goto LABEL_128;
      }
      else
      {
LABEL_141:
        memset(__dst, 0, 24);
        v98 = sub_19C32F5A4(__dst, (uint64_t *)&v559);
        v99 = (uint64_t **)v522;
        v100 = (uint64_t *)*v522;
        *(_QWORD *)&__dst[8] = v98;
LABEL_143:
        v101 = v99;
        if (v100)
        {
          while (1)
          {
            v99 = (uint64_t **)v100;
            v102 = v100[4];
            if (v87 > v102)
            {
              v100 = *v99;
              goto LABEL_143;
            }
            if (v102 <= v87)
              break;
            v100 = v99[1];
            if (!v100)
            {
              v101 = v99 + 1;
              goto LABEL_148;
            }
          }
          v103 = v99;
        }
        else
        {
LABEL_148:
          v103 = operator new(0x40uLL);
          v103[4] = v87;
          v103[5] = 0;
          v103[6] = 0;
          v103[7] = 0;
          *v103 = 0;
          v103[1] = 0;
          v103[2] = v99;
          *v101 = v103;
          v104 = **(_QWORD **)(v552 + 24);
          v105 = v103;
          if (v104)
          {
            *(_QWORD *)(v552 + 24) = v104;
            v105 = *v101;
          }
          sub_19C2A2310(*(uint64_t **)(v552 + 32), v105);
          ++*(_QWORD *)(v552 + 40);
        }
        v108 = (void **)(v103 + 5);
        v109 = (_QWORD *)v103[5];
        if (v109)
        {
          v110 = (_QWORD *)v103[6];
          v111 = (void *)v103[5];
          if (v110 != v109)
          {
            do
            {
              v113 = *--v110;
              v112 = v113;
              *v110 = 0;
              if (v113)
                (*(void (**)(uint64_t))(*(_QWORD *)v112 + 8))(v112);
            }
            while (v110 != v109);
            v111 = *v108;
          }
          v103[6] = v109;
          operator delete(v111);
          *v108 = 0;
          v103[6] = 0;
          v103[7] = 0;
        }
        *(_OWORD *)(v103 + 5) = *(_OWORD *)__dst;
        v103[7] = *(_QWORD *)&__dst[16];
        v82 = v542;
        v114 = v559;
        if (!v559)
          goto LABEL_128;
      }
      (*(void (**)(uint64_t *))(*v114 + 8))(v114);
    }
LABEL_128:
    v96 = (uint64_t)v87-- <= v86;
    if (!v96)
      continue;
    break;
  }
  v84 = (_QWORD *)*v512;
  v88 = *(_QWORD *)(*v512 + 272);
  if (!v88)
    goto LABEL_208;
LABEL_121:
  if (*(float *)(v84[29] + 248) > 0.0)
  {
    v89 = (v538 >> 3) & 1;
    v90 = v82 >= *(unsigned __int8 *)(v88 + 96) - 1 ? *(unsigned __int8 *)(v88 + 96) - 1 : v82;
    if ((uint64_t)v90 >= v89)
    {
      do
      {
        if (v90 && v82)
        {
          v115 = *(_QWORD *)(v552 + 184);
          v116 = (uint64_t *)operator new();
          sub_19C432254((uint64_t)v116, (_QWORD *)v88, &v548[-4 * v90], v90, v115, *(_QWORD *)(v88 + 112));
          v559 = v116;
          v117 = (_QWORD *)*v522;
          if (!*v522)
            goto LABEL_181;
          v118 = v522;
          do
          {
            v119 = v117[4];
            v120 = v119 > v90;
            if (v119 <= v90)
              v121 = v117;
            else
              v121 = v117 + 1;
            if (!v120)
              v118 = v117;
            v117 = (_QWORD *)*v121;
          }
          while (*v121);
          if (v118 != v522 && v90 <= v118[4])
          {
            v130 = (uint64_t **)v118[6];
            if ((unint64_t)v130 >= v118[7])
            {
              v131 = sub_19C32F5A4(v118 + 5, (uint64_t *)&v559);
            }
            else
            {
              v559 = 0;
              *v130 = v116;
              v131 = v130 + 1;
            }
            v118[6] = v131;
            v138 = v559;
            if (!v559)
              goto LABEL_168;
          }
          else
          {
LABEL_181:
            memset(__dst, 0, 24);
            v122 = sub_19C32F5A4(__dst, (uint64_t *)&v559);
            v123 = (uint64_t **)v522;
            v124 = (uint64_t *)*v522;
            *(_QWORD *)&__dst[8] = v122;
LABEL_183:
            v125 = v123;
            if (v124)
            {
              while (1)
              {
                v123 = (uint64_t **)v124;
                v126 = v124[4];
                if (v90 > v126)
                {
                  v124 = *v123;
                  goto LABEL_183;
                }
                if (v126 <= v90)
                  break;
                v124 = v123[1];
                if (!v124)
                {
                  v125 = v123 + 1;
                  goto LABEL_188;
                }
              }
              v127 = v123;
            }
            else
            {
LABEL_188:
              v127 = operator new(0x40uLL);
              v127[4] = v90;
              v127[5] = 0;
              v127[6] = 0;
              v127[7] = 0;
              *v127 = 0;
              v127[1] = 0;
              v127[2] = v123;
              *v125 = v127;
              v128 = **(_QWORD **)(v552 + 24);
              v129 = v127;
              if (v128)
              {
                *(_QWORD *)(v552 + 24) = v128;
                v129 = *v125;
              }
              sub_19C2A2310(*(uint64_t **)(v552 + 32), v129);
              ++*(_QWORD *)(v552 + 40);
              v82 = v542;
            }
            v132 = (void **)(v127 + 5);
            v133 = (_QWORD *)v127[5];
            if (v133)
            {
              v134 = (_QWORD *)v127[6];
              v135 = (void *)v127[5];
              if (v134 != v133)
              {
                do
                {
                  v137 = *--v134;
                  v136 = v137;
                  *v134 = 0;
                  if (v137)
                    (*(void (**)(uint64_t))(*(_QWORD *)v136 + 8))(v136);
                }
                while (v134 != v133);
                v135 = *v132;
              }
              v127[6] = v133;
              operator delete(v135);
              *v132 = 0;
              v127[6] = 0;
              v127[7] = 0;
              v82 = v542;
            }
            *(_OWORD *)(v127 + 5) = *(_OWORD *)__dst;
            v127[7] = *(_QWORD *)&__dst[16];
            v138 = v559;
            if (!v559)
              goto LABEL_168;
          }
          (*(void (**)(uint64_t *))(*v138 + 8))(v138);
        }
LABEL_168:
        v96 = (uint64_t)v90-- <= v89;
      }
      while (!v96);
    }
  }
LABEL_208:
  v73 = &v548[-4 * v82];
  if (*(_DWORD *)(v552 + 224) == 2)
  {
    v11 = v552;
    goto LABEL_302;
  }
  v139 = (_QWORD *)*v512;
  v140 = *(uint64_t **)(*v512 + 128);
  v141 = *(uint64_t **)(*v512 + 136);
  __srca = v76;
  if (v140 == v141)
  {
    v142 = v536;
    v143 = v538;
  }
  else
  {
    v142 = v536;
    v143 = v538;
    do
    {
      sub_19C3D6170(v552, *v140, v71, v81, (v538 & 8) == 0);
      v140 += 2;
    }
    while (v140 != v141);
    v139 = (_QWORD *)*v512;
  }
  v144 = (char *)v139[19];
  v549 = (char *)v139[20];
  if (v144 == v549)
    goto LABEL_264;
  v543 = v73;
  v145 = (v143 >> 3) & 1;
  while (2)
  {
    v146 = *(_QWORD **)v144;
    if (*(_DWORD *)(*(_QWORD *)v144 + 48) == 5)
    {
      v147 = (uint64_t)v81 >= v146[2] - 1 ? v146[2] - 1 : v81;
      if ((uint64_t)v147 >= v145)
      {
        do
        {
          v148 = (uint64_t *)(*(uint64_t (**)(_QWORD *, uint64_t, unint64_t, unint64_t, _QWORD, _QWORD))(*v146 + 24))(v146, v71, v81, v147, *(_QWORD *)(v552 + 216), *(_QWORD *)(v552 + 184));
          v559 = v148;
          if (v148)
          {
            v149 = (_QWORD *)*v522;
            if (!*v522)
              goto LABEL_237;
            v150 = v522;
            do
            {
              v151 = v149[4];
              v152 = v151 > v147;
              if (v151 <= v147)
                v153 = v149;
              else
                v153 = v149 + 1;
              if (!v152)
                v150 = v149;
              v149 = (_QWORD *)*v153;
            }
            while (*v153);
            if (v150 != v522 && v147 <= v150[4])
            {
              v162 = (uint64_t **)v150[6];
              if ((unint64_t)v162 >= v150[7])
              {
                v163 = sub_19C32F5A4(v150 + 5, (uint64_t *)&v559);
              }
              else
              {
                v559 = 0;
                *v162 = v148;
                v163 = v162 + 1;
              }
              v150[6] = v163;
              v170 = v559;
              if (!v559)
                goto LABEL_225;
            }
            else
            {
LABEL_237:
              memset(__dst, 0, 24);
              v154 = sub_19C32F5A4(__dst, (uint64_t *)&v559);
              v155 = (uint64_t **)v522;
              v156 = (uint64_t *)*v522;
              *(_QWORD *)&__dst[8] = v154;
LABEL_239:
              v157 = v155;
              if (v156)
              {
                while (1)
                {
                  v155 = (uint64_t **)v156;
                  v158 = v156[4];
                  if (v147 > v158)
                  {
                    v156 = *v155;
                    goto LABEL_239;
                  }
                  if (v158 <= v147)
                    break;
                  v156 = v155[1];
                  if (!v156)
                  {
                    v157 = v155 + 1;
                    goto LABEL_244;
                  }
                }
                v159 = v155;
              }
              else
              {
LABEL_244:
                v159 = operator new(0x40uLL);
                v159[4] = v147;
                v159[5] = 0;
                v159[6] = 0;
                v159[7] = 0;
                *v159 = 0;
                v159[1] = 0;
                v159[2] = v155;
                *v157 = v159;
                v160 = **(_QWORD **)(v552 + 24);
                v161 = v159;
                if (v160)
                {
                  *(_QWORD *)(v552 + 24) = v160;
                  v161 = *v157;
                }
                sub_19C2A2310(*(uint64_t **)(v552 + 32), v161);
                ++*(_QWORD *)(v552 + 40);
              }
              v165 = (void **)(v159 + 5);
              v164 = (_QWORD *)v159[5];
              if (v164)
              {
                v166 = (_QWORD *)v159[6];
                v167 = (void *)v159[5];
                if (v166 != v164)
                {
                  do
                  {
                    v169 = *--v166;
                    v168 = v169;
                    *v166 = 0;
                    if (v169)
                      (*(void (**)(uint64_t))(*(_QWORD *)v168 + 8))(v168);
                  }
                  while (v166 != v164);
                  v167 = *v165;
                }
                v159[6] = v164;
                operator delete(v167);
                *v165 = 0;
                v159[6] = 0;
                v159[7] = 0;
              }
              *(_OWORD *)(v159 + 5) = *(_OWORD *)__dst;
              v159[7] = *(_QWORD *)&__dst[16];
              v170 = v559;
              if (!v559)
                goto LABEL_225;
            }
            (*(void (**)(uint64_t *))(*v170 + 8))(v170);
          }
LABEL_225:
          v96 = (uint64_t)v147-- <= v145;
        }
        while (!v96);
      }
    }
    v144 += 8;
    if (v144 != v549)
      continue;
    break;
  }
  v139 = (_QWORD *)*v512;
  v142 = v536;
  LOBYTE(v143) = v538;
  v73 = v543;
LABEL_264:
  v171 = v139[31];
  if (v171)
  {
    v172 = v71;
    v11 = v552;
    v173 = (uint64_t *)(*(uint64_t (**)(_QWORD, uint64_t, unint64_t, unint64_t, _QWORD, _QWORD))(**(_QWORD **)(v171 + 16) + 24))(*(_QWORD *)(v171 + 16), v172, v81, v81, *(_QWORD *)(v552 + 216), *(_QWORD *)(v552 + 184));
    v76 = __srca;
    v559 = v173;
    if (v173)
    {
      v174 = (_QWORD *)*v522;
      if (!*v522)
        goto LABEL_276;
      v175 = v522;
      do
      {
        v176 = v174[4];
        v177 = v176 > v81;
        if (v176 <= v81)
          v178 = v174;
        else
          v178 = v174 + 1;
        if (!v177)
          v175 = v174;
        v174 = (_QWORD *)*v178;
      }
      while (*v178);
      if (v175 != v522 && v81 <= v175[4])
      {
        v187 = (uint64_t **)v175[6];
        if ((unint64_t)v187 >= v175[7])
        {
          v188 = sub_19C32F5A4(v175 + 5, (uint64_t *)&v559);
        }
        else
        {
          v559 = 0;
          *v187 = v173;
          v188 = v187 + 1;
        }
        v175[6] = v188;
        v195 = v559;
        if (v559)
          goto LABEL_299;
      }
      else
      {
LABEL_276:
        memset(__dst, 0, 24);
        v179 = sub_19C32F5A4(__dst, (uint64_t *)&v559);
        v180 = (uint64_t **)v522;
        v181 = (uint64_t *)*v522;
        *(_QWORD *)&__dst[8] = v179;
LABEL_278:
        v182 = v180;
        if (v181)
        {
          while (1)
          {
            v180 = (uint64_t **)v181;
            v183 = v181[4];
            if (v81 > v183)
            {
              v181 = *v180;
              goto LABEL_278;
            }
            if (v183 <= v81)
              break;
            v181 = v180[1];
            if (!v181)
            {
              v182 = v180 + 1;
              goto LABEL_283;
            }
          }
          v184 = v180;
        }
        else
        {
LABEL_283:
          v184 = operator new(0x40uLL);
          v184[4] = v81;
          v184[5] = 0;
          v184[6] = 0;
          v184[7] = 0;
          *v184 = 0;
          v184[1] = 0;
          v184[2] = v180;
          *v182 = v184;
          v185 = **(_QWORD **)(v552 + 24);
          v186 = v184;
          if (v185)
          {
            *(_QWORD *)(v552 + 24) = v185;
            v186 = *v182;
          }
          sub_19C2A2310(*(uint64_t **)(v552 + 32), v186);
          ++*(_QWORD *)(v552 + 40);
        }
        v189 = (void **)(v184 + 5);
        v190 = (_QWORD *)v184[5];
        if (v190)
        {
          v191 = (_QWORD *)v184[6];
          v192 = (void *)v184[5];
          if (v191 != v190)
          {
            do
            {
              v194 = *--v191;
              v193 = v194;
              *v191 = 0;
              if (v194)
                (*(void (**)(uint64_t))(*(_QWORD *)v193 + 8))(v193);
            }
            while (v191 != v190);
            v192 = *v189;
          }
          v184[6] = v190;
          operator delete(v192);
          *v189 = 0;
          v184[6] = 0;
          v184[7] = 0;
        }
        *(_OWORD *)(v184 + 5) = *(_OWORD *)__dst;
        v184[7] = *(_QWORD *)&__dst[16];
        v195 = v559;
        if (v559)
LABEL_299:
          (*(void (**)(uint64_t *))(*v195 + 8))(v195);
      }
    }
    v196 = *(_QWORD *)(*(_QWORD *)(*v512 + 248) + 24);
    if (v196)
      sub_19C3D6170(v552, v196, v531 + 4 * v142 - 4 * v528, v528, (v143 & 8) == 0);
  }
  else
  {
    v11 = v552;
    v76 = __srca;
  }
LABEL_302:
  v197 = *(_QWORD *)(v11 + 136);
  v198 = *(_QWORD *)(v11 + 184) + v197;
  v199 = *(_QWORD *)(v11 + 88);
  v200 = (*(_QWORD *)(v11 + 96) - v199) >> 2;
  if (v198 <= v200)
  {
    if (v198 < v200)
      *(_QWORD *)(v11 + 96) = v199 + 4 * v198;
  }
  else
  {
    sub_19C316738(v505, v198 - v200);
    v197 = *(_QWORD *)(v11 + 136);
  }
  if (v197)
  {
    memmove(*(void **)(v11 + 88), v76, 4 * v197);
    v197 = *(_QWORD *)(v11 + 136);
  }
  v201 = *(_QWORD *)(v11 + 184) + v197;
  v202 = *(_QWORD *)(v11 + 112);
  v203 = (*(_QWORD *)(v11 + 120) - v202) >> 2;
  if (v201 <= v203)
  {
    if (v201 < v203)
      *(_QWORD *)(v11 + 120) = v202 + 4 * v201;
  }
  else
  {
    sub_19C316738((uint64_t)v506, v201 - v203);
    v197 = *(_QWORD *)(v11 + 136);
  }
  if (v197)
    memmove(*v506, v73, 4 * v197);
LABEL_314:
  v204 = v547;
  if (*(_BYTE *)(v11 + 228))
    v204 = (_QWORD *)*v526;
  *(_QWORD *)(v11 + 176) = v204;
  *(_QWORD *)(v11 + 48) = *(_QWORD *)(v11 + 24);
  if (a7 == 1)
    return v11;
  if ((*(_QWORD *)(v11 + 216) & 0x20) != 0)
    return v11;
  v550 = (_QWORD *)*v512;
  v205 = *(uint64_t ***)(*v512 + 64);
  v507 = *(uint64_t ***)(*v512 + 72);
  if (v205 == v507)
    return v11;
  while (2)
  {
    v206 = *v205;
    v207 = a4[1];
    v509 = *a4;
    v510 = v205;
    v511 = (std::mutex *)(*v205 + 1);
    std::mutex::lock(v511);
    if (!v207)
      goto LABEL_711;
    if ((int)v207 >= 10)
      v208 = 10;
    else
      v208 = v207;
    v209 = v207 - v208;
    v210 = v207 - 3;
    if (v207 <= 2)
      v210 = 0;
    v537 = v209;
    v519 = v210;
    if (v210 < v209)
      __assert_rtn("prediction", "LMFstGrammar.cpp", 172, "end >= begin");
    v521 = *v206;
    v514 = v509 + 4 * v207;
    v211 = v207;
    v517 = v207;
    while (2)
    {
      v212 = operator new();
      v213 = v211 - v537;
      *(_QWORD *)(v212 + 40) = 0;
      *(_QWORD *)(v212 + 48) = 0;
      *(_DWORD *)(v212 + 56) = 1;
      *(_QWORD *)(v212 + 72) = 0;
      *(_QWORD *)(v212 + 80) = 0;
      *(_QWORD *)(v212 + 64) = 0;
      *(_DWORD *)(v212 + 88) = -1;
      strcpy((char *)(v212 + 16), "vector");
      *(_BYTE *)(v212 + 39) = 6;
      *(_QWORD *)v212 = &off_1E3D37E70;
      *(_QWORD *)(v212 + 8) = 0x156A5A950003;
      v572 = (void (**)())&off_1E3D38710;
      v573 = v212;
      v214 = v211 - v537;
      if (v214)
      {
        sub_19C370BF0((uint64_t)&v572);
        ((void (*)(void (***)(), _QWORD))v572[19])(&v572, 0);
        v215 = 0;
        v216 = v514 - 4 * v213;
        do
        {
          v217 = *(_DWORD *)(v216 + 4 * v215);
          if (v217)
            v218 = v217;
          else
            v218 = 90;
          if ((v218 & 0x80000000) != 0)
          {
            v219 = v550[3];
            v220 = v550[4];
            if (v219 == v220)
            {
              LODWORD(v218) = *(_DWORD *)(v216 + 4 * v215);
            }
            else
            {
              v221 = v219 + 8;
              do
              {
                v222 = *(_QWORD *)(v221 - 8);
                v223 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v222 + 80))(v222, v218);
                v217 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v222 + 88))(v222, v218);
                if (v217)
                  v224 = v223 == 0;
                else
                  v224 = 1;
                v225 = !v224 || v221 == v220;
                v221 += 8;
              }
              while (!v225);
              LODWORD(v218) = v223;
            }
          }
          else
          {
            v217 = v218;
          }
          *(_DWORD *)__dst = v218;
          *(_DWORD *)&__dst[4] = v217;
          *(_DWORD *)&__dst[8] = 0;
          *(_DWORD *)&__dst[12] = v215 + 1;
          ((void (*)(void (***)(), uint64_t, _BYTE *))v572[23])(&v572, v215, __dst);
          ((void (*)(void (***)()))v572[22])(&v572);
          ++v215;
        }
        while (v215 != v214);
        *(_DWORD *)__dst = 0;
        ((void (*)(void (***)(), unint64_t, _BYTE *))v572[20])(&v572, v214, __dst);
      }
      v570 = 0uLL;
      v571 = 0;
      v567 = 0;
      v568 = 0;
      v569 = 0;
      v565 = 0;
      v566 = 0;
      v564 = &v565;
      v226 = operator new();
      *(_QWORD *)(v226 + 40) = 0;
      *(_QWORD *)(v226 + 48) = 0;
      *(_DWORD *)(v226 + 56) = 1;
      *(_QWORD *)(v226 + 72) = 0;
      *(_QWORD *)(v226 + 80) = 0;
      *(_QWORD *)(v226 + 64) = 0;
      *(_DWORD *)(v226 + 88) = -1;
      strcpy((char *)(v226 + 16), "vector");
      *(_BYTE *)(v226 + 39) = 6;
      *(_QWORD *)v226 = &off_1E3D37E70;
      *(_QWORD *)(v226 + 8) = 0x156A5A950003;
      v577 = (void (**)())&off_1E3D38710;
      v578 = v226;
      v227 = *(_QWORD *)v521;
      __dst[0] = 1;
      *(_DWORD *)&__dst[4] = 0;
      sub_19C3787A0((uint64_t)&v572, v227, (uint64_t)&v577, (uint64_t)__dst);
      v228 = (_DWORD *)v578;
      if (*(_DWORD *)(v578 + 88) == -1)
      {
        v263 = 0;
        goto LABEL_413;
      }
      v575 = 0uLL;
      v576 = 0;
      v229 = *(_QWORD *)(v578 + 72) - *(_QWORD *)(v578 + 64);
      if ((int)(v229 >> 3) < 1)
      {
        v263 = 1;
        v264 = (void *)v575;
        if (!(_QWORD)v575)
          goto LABEL_412;
        goto LABEL_411;
      }
      v230 = 0;
      v231 = 0;
      v232 = 0;
      v233 = 0;
      v539 = (v229 >> 3);
      while (2)
      {
        v544 = v233;
        v234 = *(_QWORD *)(*(_QWORD *)(v578 + 64) + 8 * v233);
        v236 = *(_QWORD *)(v234 + 24);
        v235 = *(_QWORD *)(v234 + 32);
        if (v235 == v236)
          v237 = 0;
        else
          v237 = *(_QWORD *)(v234 + 24);
        if (v235 != v236)
        {
          v238 = 0;
          if ((unint64_t)((v235 - v236) >> 4) <= 1)
            v239 = 1;
          else
            v239 = (v235 - v236) >> 4;
          do
          {
            v240 = v237 + 16 * v238;
            v241 = *(_QWORD *)v240;
            v242 = *(int *)(v240 + 12);
            v243 = HIDWORD(*(_QWORD *)v240);
            if ((int)v243 > 87)
            {
              if ((_DWORD)v243 != 88)
              {
                if ((_DWORD)v243 != 93)
                  goto LABEL_434;
                if (v232 < v231)
                {
                  *(_DWORD *)v232 = v241;
                  v244 = v232 + 4;
                  v11 = v552;
LABEL_398:
                  *((_QWORD *)&v575 + 1) = v244;
                  v232 = v244;
                  goto LABEL_361;
                }
                v246 = v231;
                v247 = v232 - v230;
                v248 = (v232 - v230) >> 2;
                v249 = v248 + 1;
                if ((unint64_t)(v248 + 1) >> 62)
                  sub_19C2A18E8();
                v250 = v246 - v230;
                v251 = (v246 - v230) >> 1;
                if (v251 > v249)
                  v249 = v251;
                if (v250 >= 0x7FFFFFFFFFFFFFFCLL)
                  v252 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v252 = v249;
                if (v252)
                {
                  if (v252 >> 62)
                    sub_19C2A143C();
                  v253 = operator new(4 * v252);
                }
                else
                {
                  v253 = 0;
                }
                v254 = &v253[4 * v248];
                *(_DWORD *)v254 = v241;
                v244 = v254 + 4;
                if (v232 == v230)
                {
                  v11 = v552;
                }
                else
                {
                  v255 = v232 - 4 - v230;
                  v11 = v552;
                  if (v255 < 0xBC)
                  {
                    v256 = v232;
                    goto LABEL_392;
                  }
                  if (&v253[v247 - 4 - (v255 & 0xFFFFFFFFFFFFFFFCLL)] > &v253[v247 - 4])
                  {
                    v256 = v232;
                    goto LABEL_392;
                  }
                  if (&v232[-(v255 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v232 - 4)
                  {
                    v256 = v232;
                    goto LABEL_392;
                  }
                  if ((unint64_t)(v230 - v253) < 0x20)
                  {
                    v256 = v232;
                    goto LABEL_392;
                  }
                  v258 = (v255 >> 2) + 1;
                  v256 = &v232[-4 * (v258 & 0x7FFFFFFFFFFFFFF8)];
                  v259 = &v253[v247 - 16];
                  v260 = v232 - 16;
                  v261 = v258 & 0x7FFFFFFFFFFFFFF8;
                  do
                  {
                    v262 = *(_OWORD *)v260;
                    *(v259 - 1) = *((_OWORD *)v260 - 1);
                    *v259 = v262;
                    v259 -= 2;
                    v260 -= 32;
                    v261 -= 8;
                  }
                  while (v261);
                  v254 -= 4 * (v258 & 0x7FFFFFFFFFFFFFF8);
                  if (v258 != (v258 & 0x7FFFFFFFFFFFFFF8))
                  {
                    do
                    {
LABEL_392:
                      v257 = *((_DWORD *)v256 - 1);
                      v256 -= 4;
                      *((_DWORD *)v254 - 1) = v257;
                      v254 -= 4;
                    }
                    while (v256 != v230);
                  }
                }
                v231 = &v253[4 * v252];
                *(_QWORD *)&v575 = v254;
                *((_QWORD *)&v575 + 1) = v244;
                v576 = (int64_t)v231;
                if (v230)
                  operator delete(v230);
                v230 = v254;
                goto LABEL_398;
              }
              memset(__dst, 0, 48);
              v245 = sub_19C37831C(v241, (_QWORD *)v550[3], (_QWORD *)v550[4], (uint64_t)__dst);
              if (v245)
                sub_19C3785E8(&v564, (const void **)__dst, (uint64_t)__dst);
              v11 = v552;
              if ((__dst[47] & 0x80000000) != 0)
              {
                operator delete(*(void **)&__dst[24]);
                if ((__dst[23] & 0x80000000) == 0)
                {
LABEL_374:
                  if (!v245)
                    goto LABEL_520;
                  goto LABEL_361;
                }
              }
              else if ((__dst[23] & 0x80000000) == 0)
              {
                goto LABEL_374;
              }
              operator delete(*(void **)__dst);
              if (!v245)
              {
LABEL_520:
                v263 = 0;
                goto LABEL_521;
              }
            }
            else
            {
              if ((_DWORD)v243 && (_DWORD)v243 != 87)
              {
LABEL_434:
                v274 = v575;
                v275 = (uint64_t)&v232[-v575];
                if (v232 == (char *)v575)
                  goto LABEL_537;
                std::to_string(&v579, *(_DWORD *)v575);
                if ((unint64_t)v275 >= 5)
                {
                  v276 = v275 >> 2;
                  if ((unint64_t)(v275 >> 2) <= 2)
                    v276 = 2;
                  v277 = v276 - 1;
                  v278 = (unsigned int *)(v274 + 4);
                  while (1)
                  {
                    v280 = *v278;
                    v279 = v278 + 1;
                    std::to_string((std::string *)v574, v280);
                    if (v574[23] >= 0)
                      v281 = v574[23];
                    else
                      v281 = *(_QWORD *)&v574[8];
                    v282 = 22;
                    if (v574[23] < 0)
                      v282 = (*(_QWORD *)&v574[16] & 0x7FFFFFFFFFFFFFFFLL) - 1;
                    v545 = v277;
                    v540 = v279;
                    if (v282 == v281)
                    {
                      if (v281 == 0x7FFFFFFFFFFFFFF6)
                        sub_19C2A1A54();
                      v283 = v281 + 1;
                      if (v574[23] >= 0)
                        v284 = v574;
                      else
                        v284 = *(_BYTE **)v574;
                      v285 = 0x7FFFFFFFFFFFFFF7;
                      if (v281 < 0x3FFFFFFFFFFFFFF3)
                      {
                        v286 = 2 * v281;
                        if (v283 > 2 * v281)
                          v286 = v281 + 1;
                        if (v286 >= 0x17)
                        {
                          v292 = (v286 & 0xFFFFFFFFFFFFFFF8) + 8;
                          v293 = v286 | 7;
                          if (v293 == 23)
                            v293 = v292;
                          v285 = v293 + 1;
                        }
                        else
                        {
                          v285 = 23;
                        }
                      }
                      v294 = operator new(v285);
                      v295 = v294;
                      *v294 = 32;
                      if (!v281 || (memmove(v294 + 1, v284, v281), v281 != 22))
                        operator delete(v284);
                      *(_QWORD *)&v574[8] = v281 + 1;
                      *(_QWORD *)&v574[16] = v285 | 0x8000000000000000;
                      *(_QWORD *)v574 = v295;
                      v291 = &v295[v283];
                    }
                    else
                    {
                      v287 = v574[23] >= 0 ? v574 : *(char **)v574;
                      if (v281)
                      {
                        v288 = v287 <= " " && &v287[v281] > " ";
                        v289 = v288 ? "" : " ";
                        memmove(v287 + 1, v287, v281);
                      }
                      else
                      {
                        v289 = " ";
                      }
                      *v287 = *v289;
                      v290 = v281 + 1;
                      if ((v574[23] & 0x80000000) != 0)
                        *(_QWORD *)&v574[8] = v281 + 1;
                      else
                        v574[23] = v290 & 0x7F;
                      v291 = &v287[v290];
                    }
                    *v291 = 0;
                    *(std::string *)__dst = *(std::string *)v574;
                    v296 = *(_QWORD *)&v574[16];
                    memset(v574, 0, 24);
                    v297 = HIBYTE(v296);
                    v298 = (char)v297;
                    v529 = *(void **)__dst;
                    v299 = (v297 & 0x80u) == 0 ? __dst : *(_BYTE **)__dst;
                    v300 = (v297 & 0x80u) == 0 ? v297 : *(_QWORD *)&__dst[8];
                    v301 = (v579.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                         ? 22
                         : (v579.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
                    v302 = (v579.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                         ? HIBYTE(v579.__r_.__value_.__r.__words[2])
                         : v579.__r_.__value_.__l.__size_;
                    if (v301 - v302 < v300)
                      break;
                    v307 = v545;
                    if (v300)
                    {
                      v532 = (char)v297;
                      if ((v579.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                        v308 = &v579;
                      else
                        v308 = (std::string *)v579.__r_.__value_.__r.__words[0];
                      memmove((char *)v308 + v302, v299, v300);
                      v309 = v302 + v300;
                      if (SHIBYTE(v579.__r_.__value_.__r.__words[2]) < 0)
                        v579.__r_.__value_.__l.__size_ = v302 + v300;
                      else
                        *((_BYTE *)&v579.__r_.__value_.__s + 23) = v309 & 0x7F;
                      v310 = (char *)v308 + v309;
LABEL_514:
                      *v310 = 0;
                      v298 = v532;
                    }
                    if (v298 < 0)
                      operator delete(v529);
                    v278 = v540;
                    if ((v574[23] & 0x80000000) != 0)
                      operator delete(*(void **)v574);
                    v277 = v307 - 1;
                    if (!v277)
                      goto LABEL_523;
                  }
                  v532 = (char)v297;
                  v303 = v302 + v300;
                  if (0x7FFFFFFFFFFFFFF6 - v301 < v302 + v300 - v301)
                    sub_19C2A1A54();
                  v304 = &v579;
                  if ((v579.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                    v304 = (std::string *)v579.__r_.__value_.__r.__words[0];
                  __srcb = v304;
                  v305 = 0x7FFFFFFFFFFFFFF7;
                  if (v301 < 0x3FFFFFFFFFFFFFF3)
                  {
                    v306 = 2 * v301;
                    if (v303 > 2 * v301)
                      v306 = v302 + v300;
                    if (v306 >= 0x17)
                    {
                      v311 = (v306 & 0xFFFFFFFFFFFFFFF8) + 8;
                      v312 = v306 | 7;
                      if (v312 == 23)
                        v312 = v311;
                      v305 = v312 + 1;
                    }
                    else
                    {
                      v305 = 23;
                    }
                  }
                  v313 = operator new(v305);
                  v314 = (std::string::size_type)v313;
                  if (v302)
                    memmove(v313, __srcb, v302);
                  memcpy((void *)(v314 + v302), v299, v300);
                  if (v301 != 22)
                    operator delete(__srcb);
                  v579.__r_.__value_.__l.__size_ = v302 + v300;
                  v579.__r_.__value_.__r.__words[2] = v305 | 0x8000000000000000;
                  v579.__r_.__value_.__r.__words[0] = v314;
                  v310 = (_BYTE *)(v314 + v303);
                  v307 = v545;
                  goto LABEL_514;
                }
LABEL_523:
                v315 = "xMEDIANAMEx";
                *(_QWORD *)v574 = "xMEDIANAMEx";
                if (SHIBYTE(v579.__r_.__value_.__r.__words[2]) < 0)
                {
                  sub_19C2B5238(&v574[8], v579.__r_.__value_.__l.__data_, v579.__r_.__value_.__l.__size_);
                  v315 = *(const char **)v574;
                }
                else
                {
                  *(std::string *)&v574[8] = v579;
                }
                v316 = strlen(v315);
                if (v316 > 0x7FFFFFFFFFFFFFF7)
                  sub_19C2A1A54();
                v317 = v316;
                if (v316 >= 0x17)
                {
                  v319 = (v316 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v316 | 7) != 0x17)
                    v319 = v316 | 7;
                  v320 = v319 + 1;
                  v318 = operator new(v319 + 1);
                  *(_QWORD *)&__dst[8] = v317;
                  *(_QWORD *)&__dst[16] = v320 | 0x8000000000000000;
                  *(_QWORD *)__dst = v318;
                }
                else
                {
                  __dst[23] = v316;
                  v318 = __dst;
                  if (!v316)
                  {
LABEL_534:
                    v318[v317] = 0;
                    *(_OWORD *)&__dst[24] = *(_OWORD *)&v574[8];
                    *(_QWORD *)&__dst[40] = *(_QWORD *)&v574[24];
                    sub_19C3785E8(&v564, (const void **)__dst, (uint64_t)__dst);
                    if ((__dst[47] & 0x80000000) != 0)
                    {
                      operator delete(*(void **)&__dst[24]);
                      if ((__dst[23] & 0x80000000) != 0)
                        goto LABEL_581;
LABEL_536:
                      if (SHIBYTE(v579.__r_.__value_.__r.__words[2]) < 0)
LABEL_582:
                        operator delete(v579.__r_.__value_.__l.__data_);
                    }
                    else
                    {
                      if ((__dst[23] & 0x80000000) == 0)
                        goto LABEL_536;
LABEL_581:
                      operator delete(*(void **)__dst);
                      if (SHIBYTE(v579.__r_.__value_.__r.__words[2]) < 0)
                        goto LABEL_582;
                    }
LABEL_537:
                    v321 = 0;
                    *(_DWORD *)__dst = **(_DWORD **)(*(_QWORD *)(v578 + 64) + 8 * v242);
                    *(_DWORD *)v574 = 2139095039;
                    v322 = *(float *)__dst;
                    if ((v243 & 0x20000000) != 0)
                    {
                      v323 = atomic_load((unsigned __int8 *)&qword_1EE41C228);
                      if ((v323 & 1) == 0 && __cxa_guard_acquire(&qword_1EE41C228))
                      {
                        qword_1EE41C1F0[0] = (uint64_t)"self";
                        *(_QWORD *)algn_1EE41C1F8 = "recipient";
                        qword_1EE41C200 = (uint64_t)"3rd person";
                        unk_1EE41C208 = "current location";
                        qword_1EE41C210 = (uint64_t)"recent location";
                        unk_1EE41C218 = "recent address";
                        qword_1EE41C220 = (uint64_t)"FaceTime";
                        __cxa_guard_release(&qword_1EE41C228);
                      }
                      v324 = (v243 >> 8) & 0x1F;
                      v325 = "";
                      if (v324 <= 6)
                        v325 = (const char *)qword_1EE41C1F0[v324];
                      v326 = strlen(v325);
                      if (v326 > 0x7FFFFFFFFFFFFFF7)
                        sub_19C2A1A54();
                      v327 = v326;
                      if (v326 >= 0x17)
                      {
                        v329 = (v326 & 0xFFFFFFFFFFFFFFF8) + 8;
                        if ((v326 | 7) != 0x17)
                          v329 = v326 | 7;
                        v330 = v329 + 1;
                        v328 = operator new(v329 + 1);
                        *(_QWORD *)&__dst[8] = v327;
                        *(_QWORD *)&__dst[16] = v330 | 0x8000000000000000;
                        *(_QWORD *)__dst = v328;
                      }
                      else
                      {
                        __dst[23] = v326;
                        v328 = __dst;
                        if (!v326)
                          goto LABEL_549;
                      }
                      memmove(v328, v325, v327);
LABEL_549:
                      v328[v327] = 0;
                      v331 = atomic_load((unsigned __int8 *)&qword_1EE41C3B0);
                      if ((v331 & 1) == 0 && __cxa_guard_acquire(&qword_1EE41C3B0))
                      {
                        qword_1EE41C230[0] = (uint64_t)"xGIVENNAMEx";
                        *(_QWORD *)algn_1EE41C238 = "xSURNAMEx";
                        qword_1EE41C240 = (uint64_t)"xPHONEx";
                        unk_1EE41C248 = "xMOBILEPHONEx";
                        qword_1EE41C250 = (uint64_t)"xHOMEPHONEx";
                        unk_1EE41C258 = "xWORKPHONEx";
                        qword_1EE41C260 = (uint64_t)"xFAXNUMBERx";
                        unk_1EE41C268 = "xEMAILx";
                        qword_1EE41C270 = (uint64_t)"xADDRESSx";
                        unk_1EE41C278 = "xHOMEADDRESSx";
                        qword_1EE41C280 = (uint64_t)"xWORKADDRESSx";
                        unk_1EE41C288 = "xHOMECITYx";
                        qword_1EE41C290 = (uint64_t)"xWORKCITYx";
                        unk_1EE41C298 = "xPOSTALCODEx";
                        qword_1EE41C2A0 = (uint64_t)"xCOMPANYx";
                        unk_1EE41C2A8 = "xBIRTHDAYx";
                        qword_1EE41C2B0 = (uint64_t)"xFACETIMEx";
                        unk_1EE41C2B8 = "xNEXTEVENTNAMEx";
                        qword_1EE41C2C0 = (uint64_t)"xNEXTTIMEAVAILABLEx";
                        unk_1EE41C2C8 = "xDURATIONOFAVAILABILITYx";
                        qword_1EE41C2D0 = (uint64_t)"xLASTEVENTOFDAYx";
                        unk_1EE41C2D8 = "xTIMEOFMEETINGx";
                        qword_1EE41C2E0 = (uint64_t)"xLOCATIONOFMEETINGx";
                        unk_1EE41C2E8 = "xLOCATIONx";
                        qword_1EE41C2F0 = (uint64_t)"xFULLNAMEx";
                        unk_1EE41C2F8 = "xDISTANCEAWAYx";
                        qword_1EE41C300 = (uint64_t)"xETAx";
                        unk_1EE41C308 = "xETASPECIFICx";
                        qword_1EE41C310 = (uint64_t)"xETAINTERVALx";
                        unk_1EE41C318 = "xNAMEOFDESTINATIONx";
                        qword_1EE41C320 = (uint64_t)"xNAMEOFSTREETx";
                        unk_1EE41C328 = "xSOCIALMEDIAx";
                        qword_1EE41C330 = (uint64_t)"xACTIVEENERGYx";
                        unk_1EE41C338 = "xCYCLINGDISTANCEx";
                        qword_1EE41C340 = (uint64_t)"xEXERCISEMINUTESx";
                        unk_1EE41C348 = "xPUSHESx";
                        qword_1EE41C350 = (uint64_t)"xROLLHOURSx";
                        unk_1EE41C358 = "xSLEEPANALYSISx";
                        qword_1EE41C360 = (uint64_t)"xSTANDHOURSx";
                        unk_1EE41C368 = "xSTEPSx";
                        qword_1EE41C370 = (uint64_t)"xSWIMMINGDISTANCEx";
                        unk_1EE41C378 = "xWALKINGRUNNINGDISTANCEx";
                        qword_1EE41C380 = (uint64_t)"xWEIGHTx";
                        unk_1EE41C388 = "xWHEELCHAIRDISTANCEx";
                        qword_1EE41C390 = (uint64_t)"xWORKOUTSx";
                        unk_1EE41C398 = "xABSOLUTEURLx";
                        qword_1EE41C3A0 = (uint64_t)"xCHECKININCOMINGx";
                        unk_1EE41C3A8 = "xCHECKINOUTGOINGx";
                        __cxa_guard_release(&qword_1EE41C3B0);
                      }
                      v332 = "";
                      if ((v243 & 0xF0u) <= 0x2F)
                        v332 = (const char *)qword_1EE41C230[BYTE4(v241)];
                      v333 = strlen(v332);
                      if (v333 > 0x7FFFFFFFFFFFFFF7)
                        sub_19C2A1A54();
                      v334 = v333;
                      if (v333 >= 0x17)
                      {
                        v336 = (v333 & 0xFFFFFFFFFFFFFFF8) + 8;
                        if ((v333 | 7) != 0x17)
                          v336 = v333 | 7;
                        v337 = v336 + 1;
                        v335 = operator new(v336 + 1);
                        *(_QWORD *)&v574[8] = v334;
                        *(_QWORD *)&v574[16] = v337 | 0x8000000000000000;
                        *(_QWORD *)v574 = v335;
                      }
                      else
                      {
                        v574[23] = v333;
                        v335 = v574;
                        if (!v333)
                        {
LABEL_560:
                          v321 = 0;
                          v338 = (unsigned __int16)v243 >> 13;
                          v335[v334] = 0;
                          if (v338 <= 5)
                          {
                            v339 = __dst[23];
                            v340 = __dst[23];
                            v341 = *(_QWORD *)&__dst[8];
                            if (__dst[23] < 0)
                              v339 = *(_QWORD *)&__dst[8];
                            if (v339)
                            {
                              v342 = v574[23];
                              v343 = *(_QWORD *)&v574[8];
                              v344 = v574[23] >= 0 ? v574[23] : *(_QWORD *)&v574[8];
                              if (v344)
                              {
                                if (v339 != 10)
                                  goto LABEL_577;
                                v345 = *(_BYTE **)__dst;
                                if (__dst[23] >= 0)
                                  v345 = __dst;
                                v346 = *(_QWORD *)v345;
                                v347 = *((unsigned __int16 *)v345 + 4);
                                v348 = v346 == 0x7372657020647233 && v347 == 28271;
                                if (!v348 || v566)
                                {
LABEL_577:
                                  switch(v338)
                                  {
                                    case 0u:
                                      *((_BYTE *)&v579.__r_.__value_.__s + 23) = 4;
                                      strcpy((char *)&v579, "type");
                                      v349 = *((_QWORD *)&v570 + 1);
                                      if (*((_QWORD *)&v570 + 1) >= v571)
                                      {
                                        *((_QWORD *)&v570 + 1) = sub_19C307C78((void **)&v570, (uint64_t)&v579);
                                        if (SHIBYTE(v579.__r_.__value_.__r.__words[2]) < 0)
                                          operator delete(v579.__r_.__value_.__l.__data_);
                                      }
                                      else
                                      {
                                        **((_OWORD **)&v570 + 1) = *(_OWORD *)&v579.__r_.__value_.__l.__data_;
                                        *(_QWORD *)(v349 + 16) = *((_QWORD *)&v579.__r_.__value_.__l + 2);
                                        *((_QWORD *)&v570 + 1) = v349 + 24;
                                      }
                                      *((_BYTE *)&v579.__r_.__value_.__s + 23) = 6;
                                      strcpy((char *)&v579, "person");
                                      v358 = v568;
                                      if ((unint64_t)v568 >= v569)
                                      {
                                        v568 = sub_19C307C78(&v567, (uint64_t)&v579);
                                        if (SHIBYTE(v579.__r_.__value_.__r.__words[2]) < 0)
                                          operator delete(v579.__r_.__value_.__l.__data_);
                                      }
                                      else
                                      {
                                        *(_OWORD *)v568 = *(_OWORD *)&v579.__r_.__value_.__l.__data_;
                                        *((_QWORD *)v358 + 2) = *((_QWORD *)&v579.__r_.__value_.__l + 2);
                                        v568 = v358 + 24;
                                      }
                                      *((_BYTE *)&v579.__r_.__value_.__s + 23) = 7;
                                      strcpy((char *)&v579, "subtype");
                                      v363 = *((_QWORD *)&v570 + 1);
                                      if (*((_QWORD *)&v570 + 1) >= v571)
                                      {
                                        *((_QWORD *)&v570 + 1) = sub_19C307C78((void **)&v570, (uint64_t)&v579);
                                        if (SHIBYTE(v579.__r_.__value_.__r.__words[2]) < 0)
                                          operator delete(v579.__r_.__value_.__l.__data_);
                                      }
                                      else
                                      {
                                        **((_OWORD **)&v570 + 1) = *(_OWORD *)&v579.__r_.__value_.__l.__data_;
                                        *(_QWORD *)(v363 + 16) = *((_QWORD *)&v579.__r_.__value_.__l + 2);
                                        *((_QWORD *)&v570 + 1) = v363 + 24;
                                      }
                                      v367 = v568;
                                      if ((unint64_t)v568 >= v569)
                                      {
                                        v372 = sub_19C318C78((char **)&v567, (uint64_t)__dst);
                                      }
                                      else
                                      {
                                        if (v340 < 0)
                                        {
                                          sub_19C2B5238(v568, *(void **)__dst, v341);
                                        }
                                        else
                                        {
                                          v368 = *(_OWORD *)__dst;
                                          *((_QWORD *)v568 + 2) = *(_QWORD *)&__dst[16];
                                          *(_OWORD *)v367 = v368;
                                        }
                                        v372 = v367 + 24;
                                      }
                                      v568 = v372;
                                      *((_BYTE *)&v579.__r_.__value_.__s + 23) = 5;
                                      strcpy((char *)&v579, "field");
                                      v361 = (std::string *)*((_QWORD *)&v570 + 1);
                                      if (*((_QWORD *)&v570 + 1) >= v571)
                                        goto LABEL_687;
                                      goto LABEL_686;
                                    case 1u:
                                      *((_BYTE *)&v579.__r_.__value_.__s + 23) = 4;
                                      strcpy((char *)&v579, "type");
                                      v353 = *((_QWORD *)&v570 + 1);
                                      if (*((_QWORD *)&v570 + 1) >= v571)
                                      {
                                        *((_QWORD *)&v570 + 1) = sub_19C307C78((void **)&v570, (uint64_t)&v579);
                                        if (SHIBYTE(v579.__r_.__value_.__r.__words[2]) < 0)
                                          operator delete(v579.__r_.__value_.__l.__data_);
                                      }
                                      else
                                      {
                                        **((_OWORD **)&v570 + 1) = *(_OWORD *)&v579.__r_.__value_.__l.__data_;
                                        *(_QWORD *)(v353 + 16) = *((_QWORD *)&v579.__r_.__value_.__l + 2);
                                        *((_QWORD *)&v570 + 1) = v353 + 24;
                                      }
                                      *((_BYTE *)&v579.__r_.__value_.__s + 23) = 5;
                                      strcpy((char *)&v579, "event");
                                      v359 = v568;
                                      if ((unint64_t)v568 >= v569)
                                      {
                                        v568 = sub_19C307C78(&v567, (uint64_t)&v579);
                                        if (SHIBYTE(v579.__r_.__value_.__r.__words[2]) < 0)
                                          operator delete(v579.__r_.__value_.__l.__data_);
                                      }
                                      else
                                      {
                                        *(_OWORD *)v568 = *(_OWORD *)&v579.__r_.__value_.__l.__data_;
                                        *((_QWORD *)v359 + 2) = *((_QWORD *)&v579.__r_.__value_.__l + 2);
                                        v568 = v359 + 24;
                                      }
                                      *((_BYTE *)&v579.__r_.__value_.__s + 23) = 7;
                                      strcpy((char *)&v579, "request");
                                      v361 = (std::string *)*((_QWORD *)&v570 + 1);
                                      if (*((_QWORD *)&v570 + 1) >= v571)
                                        goto LABEL_687;
                                      goto LABEL_686;
                                    case 2u:
                                      *((_BYTE *)&v579.__r_.__value_.__s + 23) = 4;
                                      strcpy((char *)&v579, "type");
                                      v351 = *((_QWORD *)&v570 + 1);
                                      if (*((_QWORD *)&v570 + 1) >= v571)
                                      {
                                        *((_QWORD *)&v570 + 1) = sub_19C307C78((void **)&v570, (uint64_t)&v579);
                                        if (SHIBYTE(v579.__r_.__value_.__r.__words[2]) < 0)
                                          operator delete(v579.__r_.__value_.__l.__data_);
                                      }
                                      else
                                      {
                                        **((_OWORD **)&v570 + 1) = *(_OWORD *)&v579.__r_.__value_.__l.__data_;
                                        *(_QWORD *)(v351 + 16) = *((_QWORD *)&v579.__r_.__value_.__l + 2);
                                        *((_QWORD *)&v570 + 1) = v351 + 24;
                                      }
                                      *((_BYTE *)&v579.__r_.__value_.__s + 23) = 8;
                                      strcpy((char *)&v579, "location");
                                      v356 = v568;
                                      if ((unint64_t)v568 >= v569)
                                      {
                                        v568 = sub_19C307C78(&v567, (uint64_t)&v579);
                                        if (SHIBYTE(v579.__r_.__value_.__r.__words[2]) < 0)
                                          operator delete(v579.__r_.__value_.__l.__data_);
                                      }
                                      else
                                      {
                                        *(_OWORD *)v568 = *(_OWORD *)&v579.__r_.__value_.__l.__data_;
                                        *((_QWORD *)v356 + 2) = *((_QWORD *)&v579.__r_.__value_.__l + 2);
                                        v568 = v356 + 24;
                                      }
                                      *((_BYTE *)&v579.__r_.__value_.__s + 23) = 7;
                                      strcpy((char *)&v579, "subtype");
                                      v362 = *((_QWORD *)&v570 + 1);
                                      if (*((_QWORD *)&v570 + 1) >= v571)
                                      {
                                        *((_QWORD *)&v570 + 1) = sub_19C307C78((void **)&v570, (uint64_t)&v579);
                                        if (SHIBYTE(v579.__r_.__value_.__r.__words[2]) < 0)
                                          operator delete(v579.__r_.__value_.__l.__data_);
                                      }
                                      else
                                      {
                                        **((_OWORD **)&v570 + 1) = *(_OWORD *)&v579.__r_.__value_.__l.__data_;
                                        *(_QWORD *)(v362 + 16) = *((_QWORD *)&v579.__r_.__value_.__l + 2);
                                        *((_QWORD *)&v570 + 1) = v362 + 24;
                                      }
                                      v365 = v568;
                                      if ((unint64_t)v568 >= v569)
                                      {
                                        v371 = sub_19C318C78((char **)&v567, (uint64_t)__dst);
                                      }
                                      else
                                      {
                                        if (v340 < 0)
                                        {
                                          sub_19C2B5238(v568, *(void **)__dst, v341);
                                        }
                                        else
                                        {
                                          v366 = *(_OWORD *)__dst;
                                          *((_QWORD *)v568 + 2) = *(_QWORD *)&__dst[16];
                                          *(_OWORD *)v365 = v366;
                                        }
                                        v371 = v365 + 24;
                                      }
                                      v568 = v371;
                                      if (v344 == 10)
                                      {
                                        v374 = *(_BYTE **)v574;
                                        if (v342 >= 0)
                                          v374 = v574;
                                        v375 = *(_QWORD *)v374;
                                        v376 = *((unsigned __int16 *)v374 + 4);
                                        if (v375 == 0x4F495441434F4C78 && v376 == 30798)
                                          goto LABEL_696;
                                      }
                                      *((_BYTE *)&v579.__r_.__value_.__s + 23) = 5;
                                      strcpy((char *)&v579, "field");
                                      v361 = (std::string *)*((_QWORD *)&v570 + 1);
                                      if (*((_QWORD *)&v570 + 1) < v571)
                                      {
LABEL_686:
                                        *v361 = v579;
                                        *((_QWORD *)&v570 + 1) = v361 + 1;
                                      }
                                      else
                                      {
LABEL_687:
                                        *((_QWORD *)&v570 + 1) = sub_19C307C78((void **)&v570, (uint64_t)&v579);
                                        if (SHIBYTE(v579.__r_.__value_.__r.__words[2]) < 0)
                                          operator delete(v579.__r_.__value_.__l.__data_);
                                      }
                                      v378 = v568;
                                      if ((unint64_t)v568 >= v569)
                                      {
                                        v380 = sub_19C318C78((char **)&v567, (uint64_t)v574);
                                      }
                                      else
                                      {
                                        if (v342 < 0)
                                        {
                                          sub_19C2B5238(v568, *(void **)v574, v343);
                                        }
                                        else
                                        {
                                          v379 = *(_OWORD *)v574;
                                          *((_QWORD *)v568 + 2) = *(_QWORD *)&v574[16];
                                          *(_OWORD *)v378 = v379;
                                        }
                                        v380 = v378 + 24;
                                      }
                                      v568 = v380;
LABEL_696:
                                      v321 = 1;
                                      if ((v574[23] & 0x80000000) != 0)
                                        goto LABEL_697;
                                      goto LABEL_586;
                                    case 3u:
                                      *((_BYTE *)&v579.__r_.__value_.__s + 23) = 4;
                                      strcpy((char *)&v579, "type");
                                      v352 = *((_QWORD *)&v570 + 1);
                                      if (*((_QWORD *)&v570 + 1) >= v571)
                                      {
                                        *((_QWORD *)&v570 + 1) = sub_19C307C78((void **)&v570, (uint64_t)&v579);
                                        if (SHIBYTE(v579.__r_.__value_.__r.__words[2]) < 0)
                                          operator delete(v579.__r_.__value_.__l.__data_);
                                      }
                                      else
                                      {
                                        **((_OWORD **)&v570 + 1) = *(_OWORD *)&v579.__r_.__value_.__l.__data_;
                                        *(_QWORD *)(v352 + 16) = *((_QWORD *)&v579.__r_.__value_.__l + 2);
                                        *((_QWORD *)&v570 + 1) = v352 + 24;
                                      }
                                      *((_BYTE *)&v579.__r_.__value_.__s + 23) = 10;
                                      strcpy((char *)&v579, "navigation");
                                      v357 = v568;
                                      if ((unint64_t)v568 >= v569)
                                      {
                                        v568 = sub_19C307C78(&v567, (uint64_t)&v579);
                                        if (SHIBYTE(v579.__r_.__value_.__r.__words[2]) < 0)
                                          operator delete(v579.__r_.__value_.__l.__data_);
                                      }
                                      else
                                      {
                                        *(_OWORD *)v568 = *(_OWORD *)&v579.__r_.__value_.__l.__data_;
                                        *((_QWORD *)v357 + 2) = *((_QWORD *)&v579.__r_.__value_.__l + 2);
                                        v568 = v357 + 24;
                                      }
                                      *((_BYTE *)&v579.__r_.__value_.__s + 23) = 7;
                                      strcpy((char *)&v579, "request");
                                      v361 = (std::string *)*((_QWORD *)&v570 + 1);
                                      if (*((_QWORD *)&v570 + 1) >= v571)
                                        goto LABEL_687;
                                      goto LABEL_686;
                                    case 4u:
                                      *((_BYTE *)&v579.__r_.__value_.__s + 23) = 4;
                                      strcpy((char *)&v579, "type");
                                      v350 = *((_QWORD *)&v570 + 1);
                                      if (*((_QWORD *)&v570 + 1) >= v571)
                                      {
                                        *((_QWORD *)&v570 + 1) = sub_19C307C78((void **)&v570, (uint64_t)&v579);
                                        if (SHIBYTE(v579.__r_.__value_.__r.__words[2]) < 0)
                                          operator delete(v579.__r_.__value_.__l.__data_);
                                      }
                                      else
                                      {
                                        **((_OWORD **)&v570 + 1) = *(_OWORD *)&v579.__r_.__value_.__l.__data_;
                                        *(_QWORD *)(v350 + 16) = *((_QWORD *)&v579.__r_.__value_.__l + 2);
                                        *((_QWORD *)&v570 + 1) = v350 + 24;
                                      }
                                      *((_BYTE *)&v579.__r_.__value_.__s + 23) = 6;
                                      strcpy((char *)&v579, "health");
                                      v355 = v568;
                                      if ((unint64_t)v568 >= v569)
                                      {
                                        v568 = sub_19C307C78(&v567, (uint64_t)&v579);
                                        if (SHIBYTE(v579.__r_.__value_.__r.__words[2]) < 0)
                                          operator delete(v579.__r_.__value_.__l.__data_);
                                      }
                                      else
                                      {
                                        *(_OWORD *)v568 = *(_OWORD *)&v579.__r_.__value_.__l.__data_;
                                        *((_QWORD *)v355 + 2) = *((_QWORD *)&v579.__r_.__value_.__l + 2);
                                        v568 = v355 + 24;
                                      }
                                      *((_BYTE *)&v579.__r_.__value_.__s + 23) = 7;
                                      strcpy((char *)&v579, "request");
                                      v361 = (std::string *)*((_QWORD *)&v570 + 1);
                                      if (*((_QWORD *)&v570 + 1) >= v571)
                                        goto LABEL_687;
                                      goto LABEL_686;
                                    case 5u:
                                      *((_BYTE *)&v579.__r_.__value_.__s + 23) = 4;
                                      strcpy((char *)&v579, "type");
                                      v354 = *((_QWORD *)&v570 + 1);
                                      if (*((_QWORD *)&v570 + 1) >= v571)
                                      {
                                        *((_QWORD *)&v570 + 1) = sub_19C307C78((void **)&v570, (uint64_t)&v579);
                                        if (SHIBYTE(v579.__r_.__value_.__r.__words[2]) < 0)
                                          operator delete(v579.__r_.__value_.__l.__data_);
                                      }
                                      else
                                      {
                                        **((_OWORD **)&v570 + 1) = *(_OWORD *)&v579.__r_.__value_.__l.__data_;
                                        *(_QWORD *)(v354 + 16) = *((_QWORD *)&v579.__r_.__value_.__l + 2);
                                        *((_QWORD *)&v570 + 1) = v354 + 24;
                                      }
                                      *((_BYTE *)&v579.__r_.__value_.__s + 23) = 3;
                                      LODWORD(v579.__r_.__value_.__l.__data_) = 7107189;
                                      v360 = v568;
                                      if ((unint64_t)v568 >= v569)
                                      {
                                        v568 = sub_19C307C78(&v567, (uint64_t)&v579);
                                        if (SHIBYTE(v579.__r_.__value_.__r.__words[2]) < 0)
                                          operator delete(v579.__r_.__value_.__l.__data_);
                                      }
                                      else
                                      {
                                        *(_OWORD *)v568 = *(_OWORD *)&v579.__r_.__value_.__l.__data_;
                                        *((_QWORD *)v360 + 2) = *((_QWORD *)&v579.__r_.__value_.__l + 2);
                                        v568 = v360 + 24;
                                      }
                                      *((_BYTE *)&v579.__r_.__value_.__s + 23) = 7;
                                      strcpy((char *)&v579, "subtype");
                                      v364 = *((_QWORD *)&v570 + 1);
                                      if (*((_QWORD *)&v570 + 1) >= v571)
                                      {
                                        *((_QWORD *)&v570 + 1) = sub_19C307C78((void **)&v570, (uint64_t)&v579);
                                        if (SHIBYTE(v579.__r_.__value_.__r.__words[2]) < 0)
                                          operator delete(v579.__r_.__value_.__l.__data_);
                                      }
                                      else
                                      {
                                        **((_OWORD **)&v570 + 1) = *(_OWORD *)&v579.__r_.__value_.__l.__data_;
                                        *(_QWORD *)(v364 + 16) = *((_QWORD *)&v579.__r_.__value_.__l + 2);
                                        *((_QWORD *)&v570 + 1) = v364 + 24;
                                      }
                                      v369 = v568;
                                      if ((unint64_t)v568 >= v569)
                                      {
                                        v373 = sub_19C318C78((char **)&v567, (uint64_t)__dst);
                                      }
                                      else
                                      {
                                        if (v340 < 0)
                                        {
                                          sub_19C2B5238(v568, *(void **)__dst, v341);
                                        }
                                        else
                                        {
                                          v370 = *(_OWORD *)__dst;
                                          *((_QWORD *)v568 + 2) = *(_QWORD *)&__dst[16];
                                          *(_OWORD *)v369 = v370;
                                        }
                                        v373 = v369 + 24;
                                      }
                                      v568 = v373;
                                      *((_BYTE *)&v579.__r_.__value_.__s + 23) = 5;
                                      strcpy((char *)&v579, "field");
                                      v361 = (std::string *)*((_QWORD *)&v570 + 1);
                                      if (*((_QWORD *)&v570 + 1) < v571)
                                        goto LABEL_686;
                                      goto LABEL_687;
                                    default:
                                      break;
                                  }
                                }
                              }
                            }
                            v321 = 0;
                          }
                          if ((v574[23] & 0x80000000) != 0)
                          {
LABEL_697:
                            operator delete(*(void **)v574);
                            if ((__dst[23] & 0x80000000) == 0)
                              goto LABEL_587;
                          }
                          else
                          {
LABEL_586:
                            if ((__dst[23] & 0x80000000) == 0)
                              goto LABEL_587;
                          }
                          operator delete(*(void **)__dst);
                          goto LABEL_587;
                        }
                      }
                      memmove(v335, v332, v334);
                      goto LABEL_560;
                    }
LABEL_587:
                    if (v322 == 3.4028e38)
                      v263 = 0;
                    else
                      v263 = v321;
                    v11 = v552;
                    v264 = (void *)v575;
                    if (!(_QWORD)v575)
                      goto LABEL_412;
LABEL_411:
                    operator delete(v264);
                    goto LABEL_412;
                  }
                }
                memmove(v318, v315, v317);
                goto LABEL_534;
              }
              v11 = v552;
            }
LABEL_361:
            ++v238;
          }
          while (v238 != v239);
        }
        v233 = v544 + 1;
        if (v544 + 1 != v539)
          continue;
        break;
      }
      v263 = 1;
LABEL_521:
      v264 = (void *)v575;
      if ((_QWORD)v575)
        goto LABEL_411;
LABEL_412:
      v228 = (_DWORD *)v578;
LABEL_413:
      v577 = off_1E3D38550;
      v265 = v228[14] - 1;
      v228[14] = v265;
      if (!v265)
        (*(void (**)(_DWORD *))(*(_QWORD *)v228 + 8))(v228);
      if (v263)
      {
        sub_19C34B424(&v559, &v570, (uint64_t *)&v567, (uint64_t)&v564);
        sub_19C2E457C(v565);
        v381 = (char *)v567;
        if (v567)
        {
          v382 = v568;
          v383 = v567;
          if (v568 != v567)
          {
            do
            {
              if (*(v382 - 1) < 0)
                operator delete(*((void **)v382 - 3));
              v382 -= 24;
            }
            while (v382 != v381);
            v383 = v567;
          }
          v568 = v381;
          operator delete(v383);
        }
        v385 = v570;
        if ((_QWORD)v570)
        {
          v386 = *((_QWORD *)&v570 + 1);
          v387 = (void *)v570;
          if (*((_QWORD *)&v570 + 1) != (_QWORD)v570)
          {
            do
            {
              if (*(char *)(v386 - 1) < 0)
                operator delete(*(void **)(v386 - 24));
              v386 -= 24;
            }
            while (v386 != v385);
            v387 = (void *)v570;
          }
          *((_QWORD *)&v570 + 1) = v385;
          operator delete(v387);
        }
        v572 = off_1E3D38550;
        v388 = v573;
        v389 = *(_DWORD *)(v573 + 56) - 1;
        *(_DWORD *)(v573 + 56) = v389;
        if (!v389)
          (*(void (**)(uint64_t))(*(_QWORD *)v388 + 8))(v388);
      }
      else
      {
        sub_19C2E457C(v565);
        v266 = (char *)v567;
        if (v567)
        {
          v267 = v568;
          v268 = v567;
          if (v568 != v567)
          {
            do
            {
              if (*(v267 - 1) < 0)
                operator delete(*((void **)v267 - 3));
              v267 -= 24;
            }
            while (v267 != v266);
            v268 = v567;
          }
          v568 = v266;
          operator delete(v268);
        }
        v269 = v570;
        if ((_QWORD)v570)
        {
          v270 = *((_QWORD *)&v570 + 1);
          v271 = (void *)v570;
          if (*((_QWORD *)&v570 + 1) != (_QWORD)v570)
          {
            do
            {
              if (*(char *)(v270 - 1) < 0)
                operator delete(*(void **)(v270 - 24));
              v270 -= 24;
            }
            while (v270 != v269);
            v271 = (void *)v570;
          }
          *((_QWORD *)&v570 + 1) = v269;
          operator delete(v271);
        }
        v572 = off_1E3D38550;
        v272 = v573;
        v273 = *(_DWORD *)(v573 + 56) - 1;
        *(_DWORD *)(v573 + 56) = v273;
        if (!v273)
          (*(void (**)(uint64_t))(*(_QWORD *)v272 + 8))(v272);
        ++v537;
        v211 = v517;
        if (v537 <= v519)
          continue;
        if (*(_BYTE *)(v521 + 8) && (v384 = *(unsigned int *)(v509 + 4 * v517 - 4), (v384 & 0x80000000) != 0))
        {
          memset(__dst, 0, 48);
          if (!sub_19C37831C(v384, (_QWORD *)v550[3], (_QWORD *)v550[4], (uint64_t)__dst))
          {
            if ((__dst[47] & 0x80000000) != 0)
              operator delete(*(void **)&__dst[24]);
            if ((__dst[23] & 0x80000000) != 0)
              operator delete(*(void **)__dst);
            goto LABEL_711;
          }
          memset(v574, 0, 24);
          memset(&v579, 0, sizeof(v579));
          *((_QWORD *)&v575 + 1) = 0;
          v576 = 0;
          *(_QWORD *)&v575 = (char *)&v575 + 8;
          HIBYTE(v571) = 4;
          strcpy((char *)&v570, "type");
          *(_QWORD *)&v574[8] = sub_19C307C78((void **)v574, (uint64_t)&v570);
          if (SHIBYTE(v571) < 0)
            operator delete((void *)v570);
          HIBYTE(v571) = 6;
          strcpy((char *)&v570, "person");
          size = v579.__r_.__value_.__l.__size_;
          if (v579.__r_.__value_.__l.__size_ >= v579.__r_.__value_.__r.__words[2])
          {
            v579.__r_.__value_.__l.__size_ = (std::string::size_type)sub_19C307C78((void **)&v579.__r_.__value_.__l.__data_, (uint64_t)&v570);
            if (SHIBYTE(v571) < 0)
              operator delete((void *)v570);
          }
          else
          {
            *(_OWORD *)v579.__r_.__value_.__l.__size_ = v570;
            *(_QWORD *)(size + 16) = v571;
            v579.__r_.__value_.__l.__size_ = size + 24;
          }
          HIBYTE(v571) = 7;
          strcpy((char *)&v570, "subtype");
          v391 = *(_QWORD *)&v574[8];
          if (*(_QWORD *)&v574[8] >= *(_QWORD *)&v574[16])
          {
            *(_QWORD *)&v574[8] = sub_19C307C78((void **)v574, (uint64_t)&v570);
            if (SHIBYTE(v571) < 0)
              operator delete((void *)v570);
          }
          else
          {
            **(_OWORD **)&v574[8] = v570;
            *(_QWORD *)(v391 + 16) = v571;
            *(_QWORD *)&v574[8] = v391 + 24;
          }
          HIBYTE(v571) = 10;
          strcpy((char *)&v570, "3rd person");
          v392 = v579.__r_.__value_.__l.__size_;
          if (v579.__r_.__value_.__l.__size_ >= v579.__r_.__value_.__r.__words[2])
          {
            v579.__r_.__value_.__l.__size_ = (std::string::size_type)sub_19C307C78((void **)&v579.__r_.__value_.__l.__data_, (uint64_t)&v570);
            if (SHIBYTE(v571) < 0)
              operator delete((void *)v570);
          }
          else
          {
            *(_OWORD *)v579.__r_.__value_.__l.__size_ = v570;
            *(_QWORD *)(v392 + 16) = v571;
            v579.__r_.__value_.__l.__size_ = v392 + 24;
          }
          HIBYTE(v571) = 5;
          strcpy((char *)&v570, "field");
          v393 = *(_QWORD *)&v574[8];
          if (*(_QWORD *)&v574[8] >= *(_QWORD *)&v574[16])
          {
            *(_QWORD *)&v574[8] = sub_19C307C78((void **)v574, (uint64_t)&v570);
            if (SHIBYTE(v571) < 0)
              operator delete((void *)v570);
          }
          else
          {
            **(_OWORD **)&v574[8] = v570;
            *(_QWORD *)(v393 + 16) = v571;
            *(_QWORD *)&v574[8] = v393 + 24;
          }
          HIBYTE(v571) = 0;
          LOBYTE(v570) = 0;
          v394 = v579.__r_.__value_.__l.__size_;
          if (v579.__r_.__value_.__l.__size_ >= v579.__r_.__value_.__r.__words[2])
          {
            v579.__r_.__value_.__l.__size_ = (std::string::size_type)sub_19C307C78((void **)&v579.__r_.__value_.__l.__data_, (uint64_t)&v570);
            if (SHIBYTE(v571) < 0)
              operator delete((void *)v570);
          }
          else
          {
            *(_OWORD *)v579.__r_.__value_.__l.__size_ = v570;
            *(_QWORD *)(v394 + 16) = v571;
            v579.__r_.__value_.__l.__size_ = v394 + 24;
          }
          sub_19C3785E8((uint64_t **)&v575, (const void **)__dst, (uint64_t)__dst);
          sub_19C34B424(&v559, v574, (uint64_t *)&v579, (uint64_t)&v575);
          sub_19C2E457C(*((uint64_t *)&v575 + 1));
          v395 = v579.__r_.__value_.__r.__words[0];
          if (v579.__r_.__value_.__r.__words[0])
          {
            v396 = v579.__r_.__value_.__l.__size_;
            v397 = (void *)v579.__r_.__value_.__r.__words[0];
            if (v579.__r_.__value_.__l.__size_ != v579.__r_.__value_.__r.__words[0])
            {
              do
              {
                if (*(char *)(v396 - 1) < 0)
                  operator delete(*(void **)(v396 - 24));
                v396 -= 24;
              }
              while (v396 != v395);
              v397 = (void *)v579.__r_.__value_.__r.__words[0];
            }
            v579.__r_.__value_.__l.__size_ = v395;
            operator delete(v397);
          }
          v398 = *(_QWORD *)v574;
          if (*(_QWORD *)v574)
          {
            v399 = *(_QWORD *)&v574[8];
            v400 = *(void **)v574;
            if (*(_QWORD *)&v574[8] != *(_QWORD *)v574)
            {
              do
              {
                if (*(char *)(v399 - 1) < 0)
                  operator delete(*(void **)(v399 - 24));
                v399 -= 24;
              }
              while (v399 != v398);
              v400 = *(void **)v574;
            }
            *(_QWORD *)&v574[8] = v398;
            operator delete(v400);
          }
          if ((__dst[47] & 0x80000000) != 0)
            operator delete(*(void **)&__dst[24]);
          if ((__dst[23] & 0x80000000) != 0)
            operator delete(*(void **)__dst);
        }
        else
        {
LABEL_711:
          v560 = 0;
          v561 = 0;
          v563[0] = 0;
          v563[1] = 0;
          v559 = &v560;
          v562 = v563;
        }
      }
      break;
    }
    std::mutex::unlock(v511);
    if (v561)
    {
      __dst[23] = 11;
      strcpy(__dst, "xMEDIANAMEx");
      if (v563 == sub_19C29A674((uint64_t)&v562, (const void **)__dst))
        goto LABEL_890;
      v574[23] = 11;
      strcpy(v574, "xMEDIANAMEx");
      __dst[23] = 0;
      __dst[0] = 0;
      v401 = sub_19C29A674((uint64_t)&v562, (const void **)v574);
      if (v563 != v401 && v401 + 7 != (uint64_t *)__dst)
      {
        if (*((char *)v401 + 79) < 0)
        {
          sub_19C2E53E4(__dst, (void *)v401[7], v401[8]);
        }
        else
        {
          *(_OWORD *)__dst = *(_OWORD *)(v401 + 7);
          *(_QWORD *)&__dst[16] = v401[9];
        }
      }
      *((_BYTE *)&v579.__r_.__value_.__s + 23) = 1;
      LOWORD(v579.__r_.__value_.__l.__data_) = 32;
      sub_19C34F0F8((uint64_t)v574, (__int128 *)__dst, (unsigned __int8 *)&v579);
      if (SHIBYTE(v579.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v579.__r_.__value_.__l.__data_);
      v402 = (_QWORD *)*v512;
      v403 = std::stoi(*(const std::string **)v574, 0, 10);
      sub_19C319420(v402, v403, (uint64_t)&v579);
      v404 = *(_QWORD *)v574;
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v574[8] - *(_QWORD *)v574) >> 3) >= 2)
      {
        v405 = 1;
        v406 = 24;
        do
        {
          v407 = (_QWORD *)*v512;
          v408 = std::stoi((const std::string *)(v404 + v406), 0, 10);
          sub_19C319420(v407, v408, (uint64_t)&v570);
          if ((v571 & 0x8000000000000000) == 0)
            v409 = HIBYTE(v571);
          else
            v409 = *((_QWORD *)&v570 + 1);
          if ((v571 & 0x8000000000000000) == 0)
            v410 = 22;
          else
            v410 = (v571 & 0x7FFFFFFFFFFFFFFFLL) - 1;
          if (v410 == v409)
          {
            if (v409 == 0x7FFFFFFFFFFFFFF6)
              sub_19C2A1A54();
            v411 = v409 + 1;
            if ((v571 & 0x8000000000000000) == 0)
              v412 = &v570;
            else
              v412 = (__int128 *)v570;
            v413 = 0x7FFFFFFFFFFFFFF7;
            if (v409 < 0x3FFFFFFFFFFFFFF3)
            {
              v414 = 2 * v409;
              if (v411 > 2 * v409)
                v414 = v409 + 1;
              if (v414 >= 0x17)
              {
                v420 = (v414 & 0xFFFFFFFFFFFFFFF8) + 8;
                v421 = v414 | 7;
                if (v421 == 23)
                  v421 = v420;
                v413 = v421 + 1;
              }
              else
              {
                v413 = 23;
              }
            }
            v422 = operator new(v413);
            v423 = v422;
            *v422 = 32;
            if (!v409 || (memmove(v422 + 1, v412, v409), v409 != 22))
              operator delete(v412);
            *((_QWORD *)&v570 + 1) = v409 + 1;
            v571 = v413 | 0x8000000000000000;
            *(_QWORD *)&v570 = v423;
            v419 = &v423[v411];
          }
          else
          {
            if ((v571 & 0x8000000000000000) == 0)
              v415 = (char *)&v570;
            else
              v415 = (char *)v570;
            if (v409)
            {
              if (v415 <= " " && &v415[v409] > " ")
                v417 = "";
              else
                v417 = " ";
              memmove(v415 + 1, v415, v409);
            }
            else
            {
              v417 = " ";
            }
            *v415 = *v417;
            v418 = v409 + 1;
            if (SHIBYTE(v571) < 0)
              *((_QWORD *)&v570 + 1) = v409 + 1;
            else
              HIBYTE(v571) = v418 & 0x7F;
            v419 = &v415[v418];
          }
          *v419 = 0;
          v576 = v571;
          v575 = v570;
          v571 = 0;
          v570 = 0uLL;
          v424 = SHIBYTE(v576);
          v551 = (void *)v575;
          if (v576 >= 0)
            v425 = &v575;
          else
            v425 = (__int128 *)v575;
          if (v576 >= 0)
            v426 = HIBYTE(v576);
          else
            v426 = *((_QWORD *)&v575 + 1);
          if ((v579.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v427 = 22;
          else
            v427 = (v579.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
          if ((v579.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v428 = HIBYTE(v579.__r_.__value_.__r.__words[2]);
          else
            v428 = v579.__r_.__value_.__l.__size_;
          if (v427 - v428 >= v426)
          {
            if (!v426)
              goto LABEL_862;
            if ((v579.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v433 = &v579;
            else
              v433 = (std::string *)v579.__r_.__value_.__r.__words[0];
            memmove((char *)v433 + v428, v425, v426);
            v434 = v428 + v426;
            if (SHIBYTE(v579.__r_.__value_.__r.__words[2]) < 0)
              v579.__r_.__value_.__l.__size_ = v428 + v426;
            else
              *((_BYTE *)&v579.__r_.__value_.__s + 23) = v434 & 0x7F;
            v435 = (char *)v433 + v434;
          }
          else
          {
            v429 = v428 + v426;
            if (0x7FFFFFFFFFFFFFF6 - v427 < v428 + v426 - v427)
              sub_19C2A1A54();
            v430 = &v579;
            if ((v579.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v430 = (std::string *)v579.__r_.__value_.__r.__words[0];
            v546 = v430;
            v431 = 0x7FFFFFFFFFFFFFF7;
            if (v427 < 0x3FFFFFFFFFFFFFF3)
            {
              v432 = 2 * v427;
              if (v429 > 2 * v427)
                v432 = v428 + v426;
              if (v432 >= 0x17)
              {
                v436 = (v432 & 0xFFFFFFFFFFFFFFF8) + 8;
                v437 = v432 | 7;
                if (v437 == 23)
                  v437 = v436;
                v431 = v437 + 1;
              }
              else
              {
                v431 = 23;
              }
            }
            v438 = operator new(v431);
            v439 = (std::string::size_type)v438;
            if (v428)
              memmove(v438, v546, v428);
            memcpy((void *)(v439 + v428), v425, v426);
            if (v427 != 22)
              operator delete(v546);
            v579.__r_.__value_.__l.__size_ = v428 + v426;
            v579.__r_.__value_.__r.__words[2] = v431 | 0x8000000000000000;
            v579.__r_.__value_.__r.__words[0] = v439;
            v435 = (_BYTE *)(v439 + v429);
            v11 = v552;
          }
          *v435 = 0;
LABEL_862:
          if (v424 < 0)
          {
            operator delete(v551);
            if (SHIBYTE(v571) < 0)
              goto LABEL_864;
          }
          else if (SHIBYTE(v571) < 0)
          {
LABEL_864:
            operator delete((void *)v570);
          }
          ++v405;
          v404 = *(_QWORD *)v574;
          v406 += 24;
        }
        while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v574[8] - *(_QWORD *)v574) >> 3) > v405);
      }
      HIBYTE(v576) = 11;
      strcpy((char *)&v575, "xMEDIANAMEx");
      v440 = sub_19C2E5260(&v562, (const void **)&v575, (uint64_t)&v575);
      v441 = (void **)(v440 + 7);
      if (v440 + 7 != (uint64_t **)&v579)
      {
        if (*((char *)v440 + 79) < 0)
        {
          if ((v579.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v442 = &v579;
          else
            v442 = (std::string *)v579.__r_.__value_.__r.__words[0];
          if ((v579.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v443 = HIBYTE(v579.__r_.__value_.__r.__words[2]);
          else
            v443 = v579.__r_.__value_.__l.__size_;
          sub_19C2E54A8(v441, v442, v443);
        }
        else
        {
          if ((*((_BYTE *)&v579.__r_.__value_.__s + 23) & 0x80) == 0)
          {
            *(_OWORD *)v441 = *(_OWORD *)&v579.__r_.__value_.__l.__data_;
            v440[9] = (uint64_t *)v579.__r_.__value_.__r.__words[2];
LABEL_880:
            v444 = *(_QWORD *)v574;
            if (*(_QWORD *)v574)
            {
              v445 = *(_QWORD *)&v574[8];
              v446 = *(void **)v574;
              if (*(_QWORD *)&v574[8] != *(_QWORD *)v574)
              {
                do
                {
                  if (*(char *)(v445 - 1) < 0)
                    operator delete(*(void **)(v445 - 24));
                  v445 -= 24;
                }
                while (v445 != v444);
                v446 = *(void **)v574;
              }
              *(_QWORD *)&v574[8] = v444;
              operator delete(v446);
            }
            if ((__dst[23] & 0x80000000) != 0)
              operator delete(*(void **)__dst);
LABEL_890:
            v447 = *v512;
            v448 = (_QWORD *)(*v512 + 376);
            v449 = (_QWORD *)*v448;
            if (*v448)
            {
              v450 = *v512 + 376;
              do
              {
                if (v449 + 4 >= &v559)
                  v451 = v449;
                else
                  v451 = v449 + 1;
                if (v449 + 4 >= &v559)
                  v450 = (uint64_t)v449;
                v449 = (_QWORD *)*v451;
              }
              while (*v451);
              if ((_QWORD *)v450 != v448 && (unint64_t)&v559 >= v450 + 32)
              {
                v452 = *(_DWORD *)(v450 + 80);
LABEL_947:
                *(_DWORD *)(v11 + 232) = v452;
                *(_QWORD *)&__dst[16] = 0;
                *(_WORD *)&__dst[24] = 0;
                __dst[32] = 1;
                *(_OWORD *)&__dst[40] = xmmword_19C46DE10;
                *(_DWORD *)v554 = 0;
                *(_OWORD *)&v554[8] = xmmword_19C46DE10;
                *(_QWORD *)&v554[24] = 0xFFEFFFFFFFFFFFFFLL;
                *(_QWORD *)&v556 = 0;
                v555 = 0uLL;
                WORD4(v556) = 0;
                HIDWORD(v556) = 0;
                *(_OWORD *)__dst = xmmword_19C46DE60;
                v486 = *(char **)(v11 + 192);
                v487 = *(char **)(v11 + 200);
                v488 = (v487 - v486) >> 2;
                v557 = v488;
                v558 = 1;
                v489 = *(_QWORD *)(v11 + 208);
                if ((unint64_t)v487 >= v489)
                {
                  v491 = v488 + 1;
                  if ((unint64_t)(v488 + 1) >> 62)
                    sub_19C2A18E8();
                  v492 = v489 - (_QWORD)v486;
                  if (v492 >> 1 > v491)
                    v491 = v492 >> 1;
                  if ((unint64_t)v492 >= 0x7FFFFFFFFFFFFFFCLL)
                    v493 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v493 = v491;
                  if (v493)
                  {
                    if (v493 >> 62)
                      sub_19C2A143C();
                    v494 = operator new(4 * v493);
                  }
                  else
                  {
                    v494 = 0;
                  }
                  v495 = (unsigned int *)&v494[4 * v488];
                  v496 = &v494[4 * v493];
                  *v495 = v452;
                  v490 = v495 + 1;
                  if (v487 != v486)
                  {
                    v497 = v487 - v486 - 4;
                    if (v497 < 0x2C)
                      goto LABEL_990;
                    if (v487 - v494 - ((v487 - v486) & 0xFFFFFFFFFFFFFFFCLL) < 0x20)
                      goto LABEL_990;
                    v498 = (v497 >> 2) + 1;
                    v499 = &v494[4 * v488 - 16];
                    v500 = v487 - 16;
                    v501 = v498 & 0x7FFFFFFFFFFFFFF8;
                    do
                    {
                      v502 = *(_OWORD *)v500;
                      *(v499 - 1) = *((_OWORD *)v500 - 1);
                      *v499 = v502;
                      v499 -= 2;
                      v500 -= 32;
                      v501 -= 8;
                    }
                    while (v501);
                    v495 -= v498 & 0x7FFFFFFFFFFFFFF8;
                    v487 -= 4 * (v498 & 0x7FFFFFFFFFFFFFF8);
                    if (v498 != (v498 & 0x7FFFFFFFFFFFFFF8))
                    {
LABEL_990:
                      do
                      {
                        v503 = *((_DWORD *)v487 - 1);
                        v487 -= 4;
                        *--v495 = v503;
                      }
                      while (v487 != v486);
                    }
                  }
                  *(_QWORD *)(v11 + 192) = v495;
                  *(_QWORD *)(v11 + 200) = v490;
                  *(_QWORD *)(v11 + 208) = v496;
                  if (v486)
                    operator delete(v486);
                }
                else
                {
                  *(_DWORD *)v487 = v452;
                  v490 = v487 + 4;
                }
                *(_QWORD *)(v11 + 200) = v490;
                sub_19C3D17E0(v526, (uint64_t)__dst, (uint64_t)__dst);
                *(_QWORD *)(v11 + 176) = *(_QWORD *)(v11 + 152);
                *(_BYTE *)(v11 + 228) = 1;
                ++*(_QWORD *)(v11 + 240);
                sub_19C2E457C(v563[0]);
                sub_19C2E457C(v560);
                return v11;
              }
            }
            v452 = *(_DWORD *)(v447 + 352);
            if (v452 >= *(_DWORD *)(v447 + 360))
            {
              v452 = 0;
              goto LABEL_947;
            }
            *(_QWORD *)&__dst[8] = 0;
            *(_QWORD *)&__dst[16] = 0;
            *(_QWORD *)__dst = &__dst[8];
            sub_19C2E4334((uint64_t *)__dst, v559, &v560);
            *(_OWORD *)&__dst[32] = 0uLL;
            *(_QWORD *)&__dst[24] = &__dst[32];
            sub_19C2E4334((uint64_t *)&__dst[24], v562, v563);
            v453 = *(_DWORD *)(v447 + 352);
            *(_DWORD *)&__dst[48] = v453;
            v454 = *(_QWORD **)(v447 + 376);
            v455 = v448;
            if (*(_QWORD **)(v447 + 368) == v448)
              goto LABEL_911;
            if (v454)
            {
              v456 = *(_QWORD **)(v447 + 376);
              do
              {
                v455 = v456;
                v456 = (_QWORD *)v456[1];
              }
              while (v456);
            }
            else
            {
              v457 = v448;
              do
              {
                v455 = (_QWORD *)v457[2];
                v224 = *v455 == (_QWORD)v457;
                v457 = v455;
              }
              while (v224);
            }
            if (v455 + 4 < (_QWORD *)__dst)
            {
LABEL_911:
              i = (uint64_t **)v448;
              if (v454)
              {
                i = (uint64_t **)(v455 + 1);
                if (v455[1])
                {
LABEL_929:
                  sub_19C2E457C(*(uint64_t *)&__dst[32]);
                  sub_19C2E457C(*(uint64_t *)&__dst[8]);
                  *(_DWORD *)__dst = *(_DWORD *)(v447 + 352);
                  *(_QWORD *)&__dst[16] = 0;
                  *(_QWORD *)&__dst[24] = 0;
                  *(_QWORD *)&__dst[8] = &__dst[16];
                  sub_19C2E4334((uint64_t *)&__dst[8], v559, &v560);
                  *(_QWORD *)&__dst[48] = 0;
                  *(_OWORD *)&__dst[32] = (unint64_t)&__dst[40];
                  sub_19C2E4334((uint64_t *)&__dst[32], v562, v563);
                  v471 = *(uint64_t **)(v447 + 400);
                  if (v471)
                  {
                    while (1)
                    {
                      while (1)
                      {
                        v473 = (uint64_t **)v471;
                        v474 = *((_DWORD *)v471 + 8);
                        if (*(_DWORD *)__dst >= v474)
                          break;
                        v471 = *v473;
                        v472 = v473;
                        if (!*v473)
                          goto LABEL_937;
                      }
                      if (v474 >= *(_DWORD *)__dst)
                        break;
                      v471 = v473[1];
                      if (!v471)
                      {
                        v472 = v473 + 1;
                        goto LABEL_937;
                      }
                    }
                  }
                  else
                  {
                    v472 = (uint64_t **)(v447 + 400);
                    v473 = (uint64_t **)(v447 + 400);
LABEL_937:
                    v475 = (uint64_t *)operator new(0x58uLL);
                    v476 = v475;
                    v477 = *(_DWORD *)__dst;
                    v479 = *(_QWORD *)&__dst[8];
                    v478 = *(_QWORD *)&__dst[16];
                    v475[6] = *(_QWORD *)&__dst[16];
                    v480 = (char *)(v475 + 6);
                    *((_DWORD *)v475 + 8) = v477;
                    v475[5] = v479;
                    v481 = *(_QWORD *)&__dst[24];
                    v475[7] = *(_QWORD *)&__dst[24];
                    if (v481)
                    {
                      *(_QWORD *)(v478 + 16) = v480;
                      *(_QWORD *)&__dst[8] = &__dst[16];
                      *(_QWORD *)&__dst[16] = 0;
                      *(_QWORD *)&__dst[24] = 0;
                    }
                    else
                    {
                      v475[5] = (uint64_t)v480;
                    }
                    v482 = *(_OWORD *)&__dst[32];
                    v475[9] = *(_QWORD *)&__dst[40];
                    v483 = (char *)(v475 + 9);
                    v475[8] = v482;
                    v484 = *(_QWORD *)&__dst[48];
                    v475[10] = *(_QWORD *)&__dst[48];
                    if (v484)
                    {
                      *(_QWORD *)(*((_QWORD *)&v482 + 1) + 16) = v483;
                      *(_QWORD *)&__dst[32] = &__dst[40];
                      *(_QWORD *)&__dst[40] = 0;
                      *(_QWORD *)&__dst[48] = 0;
                    }
                    else
                    {
                      v475[8] = (uint64_t)v483;
                    }
                    *v475 = 0;
                    v475[1] = 0;
                    v475[2] = (uint64_t)v473;
                    *v472 = v475;
                    v485 = **(_QWORD **)(v447 + 392);
                    if (v485)
                    {
                      *(_QWORD *)(v447 + 392) = v485;
                      v476 = *v472;
                    }
                    sub_19C2A2310(*(uint64_t **)(v447 + 400), v476);
                    ++*(_QWORD *)(v447 + 408);
                  }
                  sub_19C2E457C(*(uint64_t *)&__dst[40]);
                  sub_19C2E457C(*(uint64_t *)&__dst[16]);
                  ++*(_DWORD *)(v447 + 352);
                  goto LABEL_947;
                }
                v448 = v455;
              }
            }
            else
            {
              for (i = (uint64_t **)v448; v454; v454 = (_QWORD *)v448[1])
              {
                while (1)
                {
                  v448 = v454;
                  v459 = v454 + 4;
                  if (__dst >= (_BYTE *)v459)
                    break;
                  v454 = (_QWORD *)*v448;
                  i = (uint64_t **)v448;
                  if (!*v448)
                    goto LABEL_920;
                }
                if (v459 >= (_QWORD *)__dst)
                  goto LABEL_929;
                i = (uint64_t **)(v448 + 1);
              }
            }
LABEL_920:
            v460 = (uint64_t *)operator new(0x58uLL);
            v461 = v460;
            v463 = *(_QWORD *)__dst;
            v462 = *(_QWORD *)&__dst[8];
            v460[5] = *(_QWORD *)&__dst[8];
            v464 = (char *)(v460 + 5);
            v460[4] = v463;
            v465 = *(_QWORD *)&__dst[16];
            v460[6] = *(_QWORD *)&__dst[16];
            if (v465)
            {
              *(_QWORD *)(v462 + 16) = v464;
              *(_QWORD *)__dst = &__dst[8];
              *(_QWORD *)&__dst[8] = 0;
              *(_QWORD *)&__dst[16] = 0;
            }
            else
            {
              v460[4] = (uint64_t)v464;
            }
            v467 = *(_QWORD *)&__dst[24];
            v466 = *(_QWORD *)&__dst[32];
            v460[8] = *(_QWORD *)&__dst[32];
            v468 = (char *)(v460 + 8);
            v460[7] = v467;
            v469 = *(_QWORD *)&__dst[40];
            v460[9] = *(_QWORD *)&__dst[40];
            if (v469)
            {
              *(_QWORD *)(v466 + 16) = v468;
              *(_QWORD *)&__dst[24] = &__dst[32];
              *(_OWORD *)&__dst[32] = 0uLL;
            }
            else
            {
              v460[7] = (uint64_t)v468;
            }
            *((_DWORD *)v460 + 20) = v453;
            *v460 = 0;
            v460[1] = 0;
            v460[2] = (uint64_t)v448;
            *i = v460;
            v470 = **(_QWORD **)(v447 + 368);
            if (v470)
            {
              *(_QWORD *)(v447 + 368) = v470;
              v461 = *i;
            }
            sub_19C2A2310(*(uint64_t **)(v447 + 376), v461);
            ++*(_QWORD *)(v447 + 384);
            goto LABEL_929;
          }
          sub_19C2E53E4(v441, v579.__r_.__value_.__l.__data_, v579.__r_.__value_.__l.__size_);
        }
      }
      if (SHIBYTE(v579.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v579.__r_.__value_.__l.__data_);
      goto LABEL_880;
    }
    sub_19C2E457C(v563[0]);
    sub_19C2E457C(v560);
    v205 = v510 + 2;
    if (v510 + 2 != v507)
    {
      v550 = (_QWORD *)*v512;
      continue;
    }
    return v11;
  }
}

void sub_19C3D5730(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, void **a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::mutex *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,_QWORD **a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,void **a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,_QWORD **a42,void *a43,_QWORD *a44,void *__p,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62)
{
  void *v63;
  void *v64;
  void *v65;

  if (a62)
    (*(void (**)(uint64_t))(*(_QWORD *)a62 + 8))(a62);
  v63 = *a35;
  if (*a35)
  {
    a44[25] = v63;
    operator delete(v63);
  }
  sub_19C33275C(*a42);
  v64 = *a13;
  if (*a13)
  {
    a44[15] = v64;
    operator delete(v64);
  }
  v65 = *a12;
  if (*a12)
  {
    a44[12] = v65;
    operator delete(v65);
  }
  sub_19C3C061C(a34);
  sub_19C3D19B8(*a29);
  sub_19C2B43C8(a23);
  _Unwind_Resume(a1);
}

void sub_19C3D5CA4(uint64_t a1, _QWORD *a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v7;
  unint64_t v12;
  unsigned int v13;
  _QWORD *v14;
  char v15;
  uint64_t v16;
  unsigned int v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  char v21;
  unsigned int v22;
  _QWORD *v23;
  char v24;
  uint64_t v25;
  unint64_t v26;
  __n128 v27;
  uint64_t v28;
  char *v29;
  char **v30;
  char **v31;
  double v32;
  unint64_t v33;
  char *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _BYTE v43[24];
  __int128 v44;
  __int128 v45;
  _BYTE v46[32];
  __int128 v47;
  __int128 v48;

  if (!a2)
    return;
  v7 = a4 >= 4 ? 4 : a4;
  if (!v7)
    return;
  v12 = a4 - 1;
  if (v7 == 1)
  {
    if (*(_BYTE *)(a1 + 145))
    {
      if (*(_BYTE *)(a1 + 144))
        return;
    }
    else
    {
      v13 = *(_DWORD *)(a3 + 4 * v12);
      if (v13 != 1 && (sub_19C4334C4(v13, *(_QWORD **)(a1 + 8)) & 1) != 0)
        return;
    }
  }
  *(_QWORD *)v43 = &stru_1E3D3CA98;
  v14 = sub_19C3AA674(a2, a3, a4, &stru_1E3D3CA98, v7, a6);
  CFRelease(&stru_1E3D3CA98);
  if (v14)
  {
    v15 = (*(uint64_t (**)(_QWORD *))(*v14 + 16))(v14);
    v16 = *v14;
    if ((v15 & 1) != 0)
      goto LABEL_44;
    (*(void (**)(_QWORD *))(v16 + 8))(v14);
  }
  if (v7 < 2)
    return;
  if (v7 == 2)
  {
    if (*(_BYTE *)(a1 + 145))
    {
      if (*(_BYTE *)(a1 + 144))
        return;
    }
    else
    {
      v17 = *(_DWORD *)(a3 + 4 * v12);
      if (v17 != 1 && (sub_19C4334C4(v17, *(_QWORD **)(a1 + 8)) & 1) != 0)
        return;
    }
  }
  v42 = v7 - 2;
  *(_QWORD *)v43 = &stru_1E3D3CA98;
  v14 = sub_19C3AA674(a2, a3, a4, &stru_1E3D3CA98, v7 - 1, a6);
  CFRelease(&stru_1E3D3CA98);
  if (v14)
  {
    v18 = (*(uint64_t (**)(_QWORD *))(*v14 + 16))(v14);
    v16 = *v14;
    if ((v18 & 1) != 0)
      goto LABEL_44;
    (*(void (**)(_QWORD *))(v16 + 8))(v14);
  }
  if (v7 - 1 < 2)
    return;
  if (v7 == 3)
  {
    if (*(_BYTE *)(a1 + 145))
    {
      if (*(_BYTE *)(a1 + 144))
        return;
    }
    else
    {
      v19 = *(_DWORD *)(a3 + 4 * v12);
      if (v19 != 1 && (sub_19C4334C4(v19, *(_QWORD **)(a1 + 8)) & 1) != 0)
        return;
    }
  }
  *(_QWORD *)v43 = &stru_1E3D3CA98;
  v14 = sub_19C3AA674(a2, a3, a4, &stru_1E3D3CA98, v42, a6);
  CFRelease(&stru_1E3D3CA98);
  if (v14)
  {
    v21 = (*(uint64_t (**)(_QWORD *))(*v14 + 16))(v14);
    v16 = *v14;
    if ((v21 & 1) != 0)
      goto LABEL_44;
    (*(void (**)(_QWORD *))(v16 + 8))(v14);
  }
  if (v42 < 2)
    return;
  if (v7 == 4)
  {
    if (*(_BYTE *)(a1 + 145))
    {
      if (*(_BYTE *)(a1 + 144))
        return;
    }
    else
    {
      v22 = *(_DWORD *)(a3 + 4 * v12);
      if (v22 != 1 && (sub_19C4334C4(v22, *(_QWORD **)(a1 + 8)) & 1) != 0)
        return;
    }
  }
  v23 = sub_19C3AA610(a2, a3, a4, v7 - 3, v20, a6);
  if (!v23)
    return;
  v14 = v23;
  v24 = (*(uint64_t (**)(_QWORD *))(*v23 + 16))(v23);
  v16 = *v14;
  if ((v24 & 1) == 0)
  {
    (*(void (**)(_QWORD *))(v16 + 8))(v14);
    return;
  }
LABEL_44:
  v25 = *(_QWORD *)(a1 + 192);
  *(_BYTE *)(a1 + 228) = 1;
  *(int64x2_t *)v43 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  *(_QWORD *)&v43[16] = 0;
  LOWORD(v44) = 0;
  BYTE8(v44) = 1;
  v45 = xmmword_19C46DE10;
  *(_DWORD *)v46 = 0;
  *(_OWORD *)&v46[8] = xmmword_19C46DE10;
  HIDWORD(v48) = 0;
  *(_QWORD *)&v46[24] = 0xFFEFFFFFFFFFFFFFLL;
  v47 = 0uLL;
  *(_QWORD *)&v48 = 0;
  WORD4(v48) = 0;
  v26 = (*(uint64_t (**)(_QWORD *, uint64_t, _BYTE *))(v16 + 24))(v14, v25, v43);
  sub_19C3C0690((uint64_t **)(a1 + 56), *(unsigned int **)(a1 + 192), v26, v27);
  v28 = *(_QWORD *)v43;
  v30 = (char **)(a1 + 160);
  v29 = *(char **)(a1 + 160);
  if (v29)
  {
    while (1)
    {
      while (1)
      {
        v31 = (char **)v29;
        v32 = *((double *)v29 + 4);
        if (*(double *)v43 != v32)
          break;
        if (!*((_QWORD *)v29 + 19))
        {
          v33 = *((_QWORD *)v29 + 20);
          if (v26 >= v33)
          {
            if (v33 >= v26)
              goto LABEL_59;
            goto LABEL_51;
          }
        }
LABEL_47:
        v29 = *v31;
        v30 = v31;
        if (!*v31)
          goto LABEL_56;
      }
      if (*(double *)v43 > v32)
        goto LABEL_47;
      if (v32 <= *(double *)v43)
        goto LABEL_59;
LABEL_51:
      v29 = v31[1];
      if (!v29)
      {
        v30 = v31 + 1;
        goto LABEL_56;
      }
    }
  }
  v31 = (char **)(a1 + 160);
LABEL_56:
  v34 = (char *)operator new(0xA8uLL);
  *((_QWORD *)v34 + 4) = v28;
  v35 = v45;
  *(_OWORD *)(v34 + 88) = *(_OWORD *)v46;
  v36 = v47;
  *(_OWORD *)(v34 + 104) = *(_OWORD *)&v46[16];
  *(_OWORD *)(v34 + 120) = v36;
  *(_OWORD *)(v34 + 136) = v48;
  v37 = v44;
  *(_OWORD *)(v34 + 40) = *(_OWORD *)&v43[8];
  *(_OWORD *)(v34 + 56) = v37;
  *(_OWORD *)(v34 + 72) = v35;
  *((_QWORD *)v34 + 19) = 0;
  *((_QWORD *)v34 + 20) = v26;
  *(_QWORD *)v34 = 0;
  *((_QWORD *)v34 + 1) = 0;
  *((_QWORD *)v34 + 2) = v31;
  *v30 = v34;
  v38 = **(_QWORD **)(a1 + 152);
  if (v38)
  {
    *(_QWORD *)(a1 + 152) = v38;
    v34 = *v30;
  }
  sub_19C2A2310(*(uint64_t **)(a1 + 160), (uint64_t *)v34);
  ++*(_QWORD *)(a1 + 168);
LABEL_59:
  v39 = *(_QWORD *)(a1 + 192);
  v40 = *(_QWORD *)(a1 + 184) + v26;
  v41 = (*(_QWORD *)(a1 + 200) - v39) >> 2;
  if (v40 <= v41)
  {
    if (v40 < v41)
      *(_QWORD *)(a1 + 200) = v39 + 4 * v40;
  }
  else
  {
    sub_19C316738(a1 + 192, v40 - v41);
  }
  ++*(_QWORD *)(a1 + 240);
  (*(void (**)(_QWORD *))(*v14 + 8))(v14);
}

void sub_19C3D6128(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2FE810((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19C3D6170(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  BOOL v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t **v19;
  uint64_t **v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  _QWORD *v26;
  void **v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;

  if (a4 >= *(_QWORD *)(a2 + 16) - 1)
    v5 = *(_QWORD *)(a2 + 16) - 1;
  else
    v5 = a4;
  v6 = a5 ^ 1u;
  if ((uint64_t)v5 >= v6)
  {
    v7 = a4;
    v9 = a2;
    v10 = result;
    v11 = (_QWORD *)(result + 32);
    do
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t, _QWORD, _QWORD))(*(_QWORD *)v9 + 24))(v9, a3, v7, v5, *(_QWORD *)(v10 + 216), *(_QWORD *)(v10 + 184));
      v39 = result;
      if (result)
      {
        v12 = (_QWORD *)*v11;
        if (!*v11)
          goto LABEL_19;
        v13 = v11;
        do
        {
          v14 = v12[4];
          v15 = v14 > v5;
          if (v14 <= v5)
            v16 = v12;
          else
            v16 = v12 + 1;
          if (!v15)
            v13 = v12;
          v12 = (_QWORD *)*v16;
        }
        while (*v16);
        if (v13 != v11 && v5 <= v13[4])
        {
          v25 = (uint64_t *)v13[6];
          if ((unint64_t)v25 >= v13[7])
          {
            v26 = sub_19C32F5A4(v13 + 5, &v39);
          }
          else
          {
            v39 = 0;
            *v25 = result;
            v26 = v25 + 1;
          }
          v13[6] = v26;
          result = v39;
          if (!v39)
            goto LABEL_7;
        }
        else
        {
LABEL_19:
          v37 = 0uLL;
          v38 = 0;
          v17 = sub_19C32F5A4(&v37, &v39);
          v18 = (uint64_t *)*v11;
          *((_QWORD *)&v37 + 1) = v17;
          v19 = (uint64_t **)v11;
          v20 = (uint64_t **)v11;
          if (v18)
          {
            while (1)
            {
              while (1)
              {
                v20 = (uint64_t **)v18;
                v21 = v18[4];
                if (v5 <= v21)
                  break;
                v18 = *v20;
                v19 = v20;
                if (!*v20)
                  goto LABEL_26;
              }
              if (v21 <= v5)
                break;
              v18 = v20[1];
              if (!v18)
              {
                v19 = v20 + 1;
                goto LABEL_26;
              }
            }
            v22 = v20;
          }
          else
          {
LABEL_26:
            v22 = operator new(0x40uLL);
            v22[4] = v5;
            v22[5] = 0;
            v22[6] = 0;
            v22[7] = 0;
            *v22 = 0;
            v22[1] = 0;
            v22[2] = v20;
            *v19 = v22;
            v23 = **(_QWORD **)(v10 + 24);
            v24 = v22;
            if (v23)
            {
              *(_QWORD *)(v10 + 24) = v23;
              v24 = *v19;
            }
            sub_19C2A2310(*(uint64_t **)(v10 + 32), v24);
            ++*(_QWORD *)(v10 + 40);
          }
          v27 = (void **)(v22 + 5);
          v28 = (_QWORD *)v22[5];
          if (v28)
          {
            v29 = v7;
            v30 = v6;
            v31 = a3;
            v32 = (_QWORD *)v22[6];
            v33 = (void *)v22[5];
            if (v32 != v28)
            {
              do
              {
                v35 = *--v32;
                v34 = v35;
                *v32 = 0;
                if (v35)
                  (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
              }
              while (v32 != v28);
              v33 = *v27;
            }
            v22[6] = v28;
            operator delete(v33);
            *v27 = 0;
            v22[6] = 0;
            v22[7] = 0;
            a3 = v31;
            v6 = v30;
            v7 = v29;
            v9 = a2;
          }
          *(_OWORD *)(v22 + 5) = v37;
          v22[7] = v38;
          result = v39;
          if (!v39)
            goto LABEL_7;
        }
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      }
LABEL_7:
      v15 = (uint64_t)v5-- <= v6;
    }
    while (!v15);
  }
  return result;
}

void sub_19C3D63E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 8))(a14);
  _Unwind_Resume(exception_object);
}

void sub_19C3D6418(uint64_t a1, const __CFURL **a2)
{
  _QWORD *v3;
  const __CFURL *v4;

  v3 = (_QWORD *)operator new();
  v4 = *a2;
  *v3 = &off_1E3D37408;
  v3[1] = 0x4014000000000000;
  sub_19C3FCF88(v3 + 2, v4);
}

void sub_19C3D6464()
{
  _QWORD *v0;
  uint64_t v1;

  *v0 = v1;
}

void sub_19C3D6478(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD355C](v1, 0x10D1C407BBEB345);
  _Unwind_Resume(a1);
}

void sub_19C3D649C(uint64_t a1, const __CFURL **a2)
{
  _QWORD *v3;
  const __CFURL *v4;

  v3 = (_QWORD *)operator new();
  v4 = *a2;
  *v3 = &off_1E3D37468;
  v3[1] = 0x4014000000000000;
  sub_19C3FCF88(v3 + 2, v4);
}

void sub_19C3D64E8()
{
  _QWORD *v0;
  uint64_t v1;

  *v0 = v1;
}

void sub_19C3D64FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD355C](v1, 0x10D1C407BBEB345);
  _Unwind_Resume(a1);
}

void sub_19C3D6524(_QWORD *a1)
{
  sub_19C3A6ED0(a1);
  JUMPOUT(0x1A1AD355CLL);
}

const char *sub_19C3D6548()
{
  return "cache";
}

uint64_t sub_19C3D6554()
{
  return 6;
}

uint64_t sub_19C3D655C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 168))(*(_QWORD *)(a1 + 8));
}

_QWORD *sub_19C3D656C(uint64_t a1)
{
  return sub_19C3A6ED0((_QWORD *)(a1 - 120));
}

void sub_19C3D6574(uint64_t a1)
{
  sub_19C3A6ED0((_QWORD *)(a1 - 120));
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C3D659C(uint64_t a1, uint64_t a2, unint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  BOOL v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  char v28;

  if (!a3)
    return 0;
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  if (a3 >= v12)
    v13 = v12;
  else
    v13 = a3;
  if (a4 == 2 && a3 > v12)
    goto LABEL_7;
  if (((*(uint64_t (**)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, a2, v13, a5, a6) & 1) != 0)return 1;
  switch(a4)
  {
    case 1:
      if (!v13)
        return 0;
      v18 = 2;
      do
      {
        v16 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, a2, v18 - 1, a5, a6);
        if ((v16 & 1) != 0)
          break;
        v17 = v18++ > v13;
      }
      while (!v17);
      break;
    case 2:
LABEL_7:
      if (v13)
      {
        v14 = a2 + 4 * a3 - 4;
        v15 = 2;
        do
        {
          v16 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, v14, v15 - 1, a5, a6);
          if ((v16 & 1) != 0)
            break;
          v14 -= 4;
          v17 = v15++ > v13;
        }
        while (!v17);
        return v16;
      }
      return 0;
    case 3:
      v22 = v13 - 8;
      if (v13 <= 9)
        v22 = 1;
      v23 = v13 - 1;
      if (v22 >= v13 - 1)
        return 0;
      if (v13 <= 9)
        v24 = 9;
      else
        v24 = v13;
      do
      {
        v25 = *(unsigned int *)(a2 - 32 + 4 * v24);
        v26 = *(unsigned int *)(a2 + 4 * v23);
        v27 = operator new(8uLL);
        *v27 = v25 | (v26 << 32);
        v16 = (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, v27, 2, a5, a6);
        operator delete(v27);
        if (v24 - 7 >= v23)
          v28 = 1;
        else
          v28 = v16;
        ++v24;
      }
      while ((v28 & 1) == 0);
      break;
    case 4:
      v19 = 0;
      while (1)
      {
        v20 = a3 - v19 >= v13 ? v13 : a3 - v19;
        if (v20)
          break;
LABEL_26:
        v16 = 0;
        if (++v19 == a3)
          return v16;
      }
      v21 = 1;
      while (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, a2 + 4 * v19, v21, a5, a6) & 1) == 0)
      {
        if (++v21 > v20)
          goto LABEL_26;
      }
      return 1;
    default:
      return 0;
  }
  return v16;
}

void sub_19C3D67E8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_19C3D67FC(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v5;
  const void *v6;

  *a1 = &off_1E3D35738;
  v2 = (_QWORD *)a1[3];
  if (v2)
  {
    do
    {
      v5 = (_QWORD *)*v2;
      v6 = (const void *)v2[3];
      if (v6)
        CFRelease(v6);
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = (void *)a1[1];
  a1[1] = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

void sub_19C3D6870(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  const void *v5;

  *a1 = &off_1E3D35738;
  v2 = (_QWORD *)a1[3];
  if (v2)
  {
    do
    {
      v4 = (_QWORD *)*v2;
      v5 = (const void *)v2[3];
      if (v5)
        CFRelease(v5);
      operator delete(v2);
      v2 = v4;
    }
    while (v4);
  }
  v3 = (void *)a1[1];
  a1[1] = 0;
  if (v3)
    operator delete(v3);
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C3D68F4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;

  v1 = (_QWORD *)(a1 + 24);
  while (1)
  {
    v1 = (_QWORD *)*v1;
    if (!v1)
      break;
    v4 = 0;
    v5 = &v4;
    v7 = 0;
    v6 = 0x2000000000;
    LXLexiconEnumerateEntriesForString();
    v2 = *((unsigned int *)v5 + 6);
    _Block_object_dispose(&v4, 8);
    if ((_DWORD)v2)
      return v2;
  }
  return 0;
}

void sub_19C3D69C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_19C3D69D8(uint64_t a1, const UInt8 *a2)
{
  _QWORD *v3;
  uint64_t result;

  v3 = (_QWORD *)(a1 + 24);
  while (1)
  {
    v3 = (_QWORD *)*v3;
    if (!v3)
      break;
    result = sub_19C412D1C(v3[3], a2);
    if ((_DWORD)result)
      return result;
  }
  return 0;
}

void sub_19C3D6A1C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *i;
  uint64_t v4;
  const void *v5;
  const __CFString *v6;
  CFIndex Length;

  for (i = *(_QWORD **)(a1 + 24); i; i = (_QWORD *)*i)
  {
    v4 = LXLexiconCopyEntryForTokenID();
    if (v4)
    {
      v5 = (const void *)v4;
      v6 = (const __CFString *)LXEntryCopyString();
      CFRelease(v5);
      if (!v6)
        continue;
    }
    else
    {
      v6 = &stru_1E3D3CA98;
    }
    Length = CFStringGetLength(v6);
    if (Length)
      sub_19C29CEF8(v6, (_QWORD *)a2);
    CFRelease(v6);
    if (Length)
      return;
  }
  *(_BYTE *)(a2 + 23) = 0;
  *(_BYTE *)a2 = 0;
}

void sub_19C3D6AE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C3387E0((const void **)va);
  _Unwind_Resume(a1);
}

void sub_19C3D6AFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  sub_19C2FE810(&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_19C3D6B10@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t **v7;
  uint64_t *v8;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  _QWORD v15[3];
  _QWORD *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v3 = (int8x8_t)result[2];
  if (!*(_QWORD *)&v3)
    goto LABEL_19;
  v4 = (uint8x8_t)vcnt_s8(v3);
  v4.i16[0] = vaddlv_u8(v4);
  v5 = *(_QWORD *)&v3 - 1;
  v6 = *(_QWORD *)&v3 != 1;
  if (v4.u32[0] < 2uLL)
    v6 = (v3.i8[0] & 1) == 0;
  v7 = *(uint64_t ***)(result[1] + 8 * v6);
  if (!v7 || (v8 = *v7) == 0)
  {
LABEL_19:
    *a3 = 0;
    return result;
  }
  if (v4.u32[0] < 2uLL)
  {
    while (1)
    {
      v10 = v8[1];
      if (v10 == 1)
      {
        if (v8[2] == 1)
          goto LABEL_21;
      }
      else if ((v10 & v5) != v6)
      {
        goto LABEL_19;
      }
      v8 = (uint64_t *)*v8;
      if (!v8)
        goto LABEL_19;
    }
  }
  while (1)
  {
    v11 = v8[1];
    if (v11 == 1)
      break;
    if (v11 >= *(_QWORD *)&v3)
      v11 %= *(_QWORD *)&v3;
    if (v11 != v6)
      goto LABEL_19;
LABEL_14:
    v8 = (uint64_t *)*v8;
    if (!v8)
      goto LABEL_19;
  }
  if (v8[2] != 1)
    goto LABEL_14;
LABEL_21:
  v12 = v8[3];
  v13 = *((_DWORD *)v8 + 8);
  v15[0] = &off_1E3D38AB0;
  v16 = v15;
  sub_19C412F18(a3, v12, a2, v15, v13);
  result = v16;
  if (v16 == v15)
  {
    v14 = 4;
    result = v15;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v14))();
  }
  else if (v16)
  {
    v14 = 5;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v14))();
  }
  return result;
}

void sub_19C3D6C74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_19C3D6CB0(int8x8_t *a1)
{
  int8x8_t v1;
  uint8x8_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;

  v1 = a1[2];
  if (v1)
  {
    v2 = (uint8x8_t)vcnt_s8(v1);
    v2.i16[0] = vaddlv_u8(v2);
    v3 = *(_QWORD *)&v1 - 1;
    v4 = *(_QWORD *)&v1 != 1;
    if (v2.u32[0] < 2uLL)
      v4 = (v1.i8[0] & 1) == 0;
    v5 = *(_QWORD **)(*(_QWORD *)&a1[1] + 8 * v4);
    if (v5)
    {
      v6 = (_QWORD *)*v5;
      if (v6)
      {
        if (v2.u32[0] < 2uLL)
        {
          while (1)
          {
            v7 = v6[1];
            if (v7 == 1)
            {
              if (v6[2] == 1)
                goto LABEL_20;
            }
            else if ((v7 & v3) != v4)
            {
              return;
            }
            v6 = (_QWORD *)*v6;
            if (!v6)
              return;
          }
        }
        do
        {
          v8 = v6[1];
          if (v8 == 1)
          {
            if (v6[2] == 1)
            {
LABEL_20:
              sub_19C413280();
              return;
            }
          }
          else
          {
            if (v8 >= *(_QWORD *)&v1)
              v8 %= *(_QWORD *)&v1;
            if (v8 != v4)
              return;
          }
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
    }
  }
}

void sub_19C3D6D74()
{
  __assert_rtn("createLXCursorRoot", "LMTransientLexicon.cpp", 87, "false && \"Not Implemented\"");
}

void sub_19C3D6D9C(uint64_t *a1, unint64_t a2)
{
  int8x8_t v2;
  uint8x8_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  const void *v17;

  v2 = (int8x8_t)a1[1];
  if (v2)
  {
    v3 = (uint8x8_t)vcnt_s8(v2);
    v3.i16[0] = vaddlv_u8(v3);
    if (v3.u32[0] > 1uLL)
    {
      v4 = a2;
      if (*(_QWORD *)&v2 <= a2)
        v4 = a2 % *(_QWORD *)&v2;
    }
    else
    {
      v4 = (*(_QWORD *)&v2 - 1) & a2;
    }
    v5 = *a1;
    v6 = *(uint64_t ***)(*a1 + 8 * v4);
    if (v6)
    {
      v7 = *v6;
      if (*v6)
      {
        v8 = *(_QWORD *)&v2 - 1;
        if (v3.u32[0] < 2uLL)
        {
          while (1)
          {
            v9 = v7[1];
            if (v9 == a2)
            {
              if (v7[2] == a2)
                goto LABEL_22;
            }
            else if ((v9 & v8) != v4)
            {
              return;
            }
            v7 = (uint64_t *)*v7;
            if (!v7)
              return;
          }
        }
        do
        {
          v10 = v7[1];
          if (v10 == a2)
          {
            if (v7[2] == a2)
            {
LABEL_22:
              if (v3.u32[0] > 1uLL)
              {
                if (*(_QWORD *)&v2 <= a2)
                  a2 %= *(_QWORD *)&v2;
              }
              else
              {
                a2 &= v8;
              }
              v11 = *(uint64_t **)(v5 + 8 * a2);
              do
              {
                v12 = v11;
                v11 = (uint64_t *)*v11;
              }
              while (v11 != v7);
              if (v12 == a1 + 2)
                goto LABEL_39;
              v13 = v12[1];
              if (v3.u32[0] > 1uLL)
              {
                if (v13 >= *(_QWORD *)&v2)
                  v13 %= *(_QWORD *)&v2;
              }
              else
              {
                v13 &= v8;
              }
              if (v13 != a2)
              {
LABEL_39:
                if (!*v7)
                  goto LABEL_40;
                v14 = *(_QWORD *)(*v7 + 8);
                if (v3.u32[0] > 1uLL)
                {
                  if (v14 >= *(_QWORD *)&v2)
                    v14 %= *(_QWORD *)&v2;
                }
                else
                {
                  v14 &= v8;
                }
                if (v14 != a2)
LABEL_40:
                  *(_QWORD *)(v5 + 8 * a2) = 0;
              }
              v15 = *v7;
              if (*v7)
              {
                v16 = *(_QWORD *)(v15 + 8);
                if (v3.u32[0] > 1uLL)
                {
                  if (v16 >= *(_QWORD *)&v2)
                    v16 %= *(_QWORD *)&v2;
                }
                else
                {
                  v16 &= v8;
                }
                if (v16 != a2)
                {
                  *(_QWORD *)(*a1 + 8 * v16) = v12;
                  v15 = *v7;
                }
              }
              *v12 = v15;
              *v7 = 0;
              --a1[3];
              v17 = (const void *)v7[3];
              if (v17)
                CFRelease(v17);
              operator delete(v7);
              return;
            }
          }
          else
          {
            if (v10 >= *(_QWORD *)&v2)
              v10 %= *(_QWORD *)&v2;
            if (v10 != v4)
              return;
          }
          v7 = (uint64_t *)*v7;
        }
        while (v7);
      }
    }
  }
}

_QWORD *sub_19C3D6F98(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  *a1 = &off_1E3D35260;
  v2 = (uint64_t *)a1[3];
  if (v2)
  {
    v3 = *v2;
    if (*v2)
    {
      v4 = *(_QWORD *)(v3 + 24);
      if (v4)
      {
        sub_19C3B4094(v4 + 8);
        MEMORY[0x1A1AD355C](v4, 0x1020C403F824CD1);
        if (*(_QWORD *)v3)
          free(*(void **)v3);
      }
      MEMORY[0x1A1AD355C](v3, 0x1030C40FC63861FLL);
    }
    MEMORY[0x1A1AD355C](v2, 0x20C4093837F09);
  }
  v5 = (void *)a1[1];
  if (v5)
    munmap(v5, a1[2]);
  a1[2] = 0;
  return a1;
}

void sub_19C3D7058(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  *a1 = &off_1E3D35260;
  v2 = (uint64_t *)a1[3];
  if (v2)
  {
    v3 = *v2;
    if (*v2)
    {
      v4 = *(_QWORD *)(v3 + 24);
      if (v4)
      {
        sub_19C3B4094(v4 + 8);
        MEMORY[0x1A1AD355C](v4, 0x1020C403F824CD1);
        if (*(_QWORD *)v3)
          free(*(void **)v3);
      }
      MEMORY[0x1A1AD355C](v3, 0x1030C40FC63861FLL);
    }
    MEMORY[0x1A1AD355C](v2, 0x20C4093837F09);
  }
  v5 = (void *)a1[1];
  if (v5)
    munmap(v5, a1[2]);
  a1[2] = 0;
  JUMPOUT(0x1A1AD355CLL);
}

BOOL sub_19C3D7128(uint64_t a1, unsigned int *a2, unsigned int a3, _BYTE *a4, int a5)
{
  int v8;
  char v9;
  int v10;
  int v11;
  _BOOL4 v13;
  BOOL v14;
  char v16;
  __int16 v18;

  v18 = 0;
  v8 = sub_19C3B962C(*(uint64_t ***)(a1 + 24), a2, a3, &v18);
  if (*(_BYTE *)(a1 + 33))
  {
    v9 = v18;
    v10 = v18 & 0x7F;
    if (a4)
      *a4 = v10;
    v11 = v9 & 0x80;
    v13 = (v10 & a5) != 0 || a5 == 0;
    if (v8)
      v14 = 1;
    else
      v14 = v11 == 0;
    return !v14 && v13;
  }
  else
  {
    v16 = v18;
    if (a4)
      *a4 = HIBYTE(v18);
    return v16 && v8 == 0;
  }
}

uint64_t sub_19C3D71C0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 32);
}

unint64_t sub_19C3D71C8(_QWORD *a1, unint64_t a2)
{
  unint64_t v3;
  unint64_t result;
  BOOL v5;
  _QWORD *v6;
  _QWORD *v7;
  void *exception;
  __n128 v9;
  std::string __dst;
  std::string v11;
  _BYTE v12[16];
  _QWORD v13[33];

  v3 = a1[1];
  result = v3 - a2;
  if (v3 <= a2)
  {
    sub_19C2B4F08((uint64_t)v12);
    sub_19C2A1B24(v13, (uint64_t)"(file_size=", 11);
    v6 = (_QWORD *)std::ostream::operator<<();
    sub_19C2A1B24(v6, (uint64_t)", offset=", 9);
    v7 = (_QWORD *)std::ostream::operator<<();
    sub_19C2A1B24(v7, (uint64_t)")", 1);
    exception = __cxa_allocate_exception(0x10uLL);
    sub_19C351068(&__dst, (uint64_t)v12);
    v9 = sub_19C337C34(&v11, "attempted to read beyond the end of the mapped file ", &__dst);
    MEMORY[0x1A1AD3160](exception, &v11, v9);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  if ((uint64_t)(v3 - a2) < 0 || (v3 != a2 ? (v5 = *a1 == 0) : (v5 = 0), v5))
    sub_19C366A00();
  return result;
}

void sub_19C3D72CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  void *v22;
  int v23;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v23 & 1) == 0)
    {
LABEL_8:
      sub_19C2B5034((uint64_t)&a22);
      _Unwind_Resume(a1);
    }
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void sub_19C3D733C(_QWORD *a1, const __CFURL *a2)
{
  _QWORD v2[35];

  *a1 = &off_1E3D35260;
  sub_19C2E15E8(a2, v2);
}

uint64_t sub_19C3D7378()
{
  uint64_t v0;
  _QWORD *v1;
  _DWORD *v2;
  unsigned int v3;
  int v4;
  uint64_t v5;
  int v6;
  int v7;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  void *exception;
  std::string::size_type v13;
  std::string *v14;
  _BYTE *v15;
  char *v16;
  _BYTE *v17;
  char *v18;
  unint64_t v19;
  const void **v20;
  const void *v21;
  uint64_t v22;
  uint64_t v23;
  std::string *v24;
  __int128 v25;
  std::string v26;
  __int128 v27;
  std::string::size_type v28;
  void *v29[2];
  uint64_t v30;
  _QWORD v31[3];
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char v35;

  sub_19C3663C0(v1, (uint64_t)v29);
  if (SHIBYTE(v30) < 0)
    operator delete(v29[0]);
  *(_QWORD *)(v0 + 24) = 0;
  *(_WORD *)(v0 + 32) = 0;
  if (*(_QWORD *)(v0 + 16) <= 0x1FuLL)
  {
    sub_19C2B4F08((uint64_t)v29);
    sub_19C2A1B24(&v30, (uint64_t)"(file_size=", 11);
    v9 = (_QWORD *)std::ostream::operator<<();
    sub_19C2A1B24(v9, (uint64_t)", offset=", 9);
    v10 = (_QWORD *)std::ostream::operator<<();
    sub_19C2A1B24(v10, (uint64_t)", object_size=", 14);
    v11 = (_QWORD *)std::ostream::operator<<();
    sub_19C2A1B24(v11, (uint64_t)")", 1);
    exception = __cxa_allocate_exception(0x10uLL);
    if ((v35 & 0x10) != 0)
    {
      v19 = v34;
      if (v34 < v33)
      {
        v34 = v33;
        v19 = v33;
      }
      v20 = (const void **)&v32;
    }
    else
    {
      if ((v35 & 8) == 0)
      {
        v13 = 0;
        *((_BYTE *)&v26.__r_.__value_.__s + 23) = 0;
        v14 = &v26;
        goto LABEL_28;
      }
      v20 = (const void **)v31;
      v19 = v31[2];
    }
    v21 = *v20;
    v13 = v19 - (_QWORD)*v20;
    if (v13 >= 0x7FFFFFFFFFFFFFF8)
      sub_19C2A1A54();
    if (v13 >= 0x17)
    {
      v22 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v22 = v13 | 7;
      v23 = v22 + 1;
      v14 = (std::string *)operator new(v22 + 1);
      v26.__r_.__value_.__l.__size_ = v13;
      v26.__r_.__value_.__r.__words[2] = v23 | 0x8000000000000000;
      v26.__r_.__value_.__r.__words[0] = (std::string::size_type)v14;
    }
    else
    {
      *((_BYTE *)&v26.__r_.__value_.__s + 23) = v19 - *(_BYTE *)v20;
      v14 = &v26;
      if (!v13)
      {
LABEL_28:
        v14->__r_.__value_.__s.__data_[v13] = 0;
        v24 = std::string::insert(&v26, 0, "attempted to read beyond the end of the mapped file ", 0x34uLL);
        v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
        v28 = v24->__r_.__value_.__r.__words[2];
        v27 = v25;
        v24->__r_.__value_.__l.__size_ = 0;
        v24->__r_.__value_.__r.__words[2] = 0;
        v24->__r_.__value_.__r.__words[0] = 0;
        MEMORY[0x1A1AD3160](exception, &v27);
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
      }
    }
    memmove(v14, v21, v13);
    goto LABEL_28;
  }
  v2 = (_DWORD *)*v1;
  if (*(_DWORD *)*v1 != -2017310929)
  {
    v15 = __cxa_allocate_exception(0x20uLL);
    v16 = (char *)operator new(0x20uLL);
    strcpy(v16, "ngram set file is invalid");
    *(_QWORD *)v15 = off_1E3D38838;
    sub_19C2B5238(v15 + 8, v16, 0x19uLL);
    __cxa_throw(v15, (struct type_info *)&unk_1E3D32968, (void (*)(void *))sub_19C3123E4);
  }
  v3 = v2[1];
  if (v3 - 4 <= 0xFFFFFFFC)
  {
    v17 = __cxa_allocate_exception(0x20uLL);
    v18 = (char *)operator new(0x28uLL);
    strcpy(v18, "ngram set file version is not supported");
    *(_QWORD *)v17 = off_1E3D38838;
    sub_19C2B5238(v17 + 8, v18, 0x27uLL);
    __cxa_throw(v17, (struct type_info *)&unk_1E3D32968, (void (*)(void *))sub_19C3123E4);
  }
  v4 = v2[2];
  v6 = sub_19C3D71C8(v1, 0x20uLL);
  *(_BYTE *)(v0 + 32) = v4;
  if (v3 == 1)
    v7 = 3;
  else
    v7 = 2;
  *(_QWORD *)(v0 + 24) = sub_19C3B9408(v5, v6, v7, v4);
  *(_BYTE *)(v0 + 33) = v3 > 2;
  return v0;
}

void sub_19C3D76A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41)
{
  uint64_t v41;
  void **v42;
  void *v43;
  int v44;
  uint64_t v46;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v44 & 1) == 0)
    {
LABEL_8:
      a22 = *MEMORY[0x1E0DE4F50];
      v46 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
      *(uint64_t *)((char *)&a22 + *(_QWORD *)(a22 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
      a24 = v46;
      a25 = MEMORY[0x1E0DE4FB8] + 16;
      if (a38 < 0)
        operator delete(a33);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x1A1AD34CC](&a41);
      if (*v42)
        munmap(*v42, *(_QWORD *)(v41 + 16));
      *(_QWORD *)(v41 + 16) = 0;
      _Unwind_Resume(a1);
    }
  }
  else if (!v44)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v43);
  goto LABEL_8;
}

void sub_19C3D77D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19C3D77D0);
}

void sub_19C3D7800(_QWORD *a1)
{
  sub_19C34E2D8(a1);
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C3D7824()
{
  return 0;
}

uint64_t sub_19C3D782C()
{
  return 0;
}

BOOL sub_19C3D7834(uint64_t a1, _QWORD *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  float16x8_t *v24;
  unint64_t v25;
  int *v26;
  uint64_t v27;
  float32x4_t *v28;
  float16x8_t *v29;
  uint64_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  int v35;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  NSObject *v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint8_t buf[8];
  uint64_t v51;
  uint64_t v52;
  void *__p[3];

  v7 = *a2;
  v8 = (uint64_t)(a2[1] - *a2) >> 2;
  v9 = v8 - a3;
  v48 = *(_QWORD *)(a1 + 88);
  if (v8 - a3 <= v48)
  {
    v10 = a3;
    v49 = v8 - a3;
  }
  else
  {
    v10 = sub_19C3D7D2C(a1, a2);
    v7 = *a2;
    v8 = (uint64_t)(a2[1] - *a2) >> 2;
    v49 = v8 - v10;
  }
  v11 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8), v7, v10);
  if (v8 != v10)
  {
    v14 = v11;
    v47 = v9;
    v12 = 0;
    v15 = 0;
    v16 = v7 + 4 * v10;
    v17 = v10 + 1;
    while (1)
    {
      ++*a4;
      v18 = *(_QWORD *)(a1 + 56);
      v19 = *(unsigned int *)(v16 + 4 * v15);
      if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v18 + 64))(v18, v19) & 1) != 0)
      {
        v20 = 3;
      }
      else if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v18 + 72))(v18, v19) & 1) != 0)
      {
        v20 = 4;
      }
      else
      {
        v20 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18) == 2 ? 0 : 5;
      }
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 56) + 120))(__p, *(_QWORD *)(a1 + 56), *a2, v17 + v15);
      v21 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**(_QWORD **)(a1 + 40) + 24))(*(_QWORD *)(a1 + 40), v14, *(unsigned int *)(v16 + 4 * v15), v20);
      v23 = v22;
      if (v22)
        break;
LABEL_40:
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      if (v23)
      {
        v12 = ++v15 >= v49;
        if (v15 != v49)
          continue;
      }
      return v12;
    }
    v24 = *(float16x8_t **)(a1 + 16);
    if (v22 != (uint64_t)(*(_QWORD *)(a1 + 24) - (_QWORD)v24) >> 1)
      __assert_rtn("compressOutputLayer", "NeuralNetworkUtils.hpp", 84, "uncompressed.size() == compressed.size() && \"mismatched output layer sizes\"");
    v25 = (v22 - 1) & 0x3FFFFFFFFFFFFFFFLL;
    if (v25 >= 0xF)
    {
      v27 = (v25 + 1) & 0x7FFFFFFFFFFFFFF0;
      v28 = (float32x4_t *)(v21 + 32);
      v29 = v24 + 1;
      v30 = v27;
      do
      {
        v32 = v28[-2];
        v31 = v28[-1];
        v34 = *v28;
        v33 = v28[1];
        v28 += 4;
        v29[-1] = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v32), v31);
        *v29 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v34), v33);
        v29 += 2;
        v30 -= 16;
      }
      while (v30);
      if (v25 + 1 == v27)
      {
LABEL_24:
        (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(a1 + 40) + 32))(&v52);
        v14 = v52;
        if (v47 <= v48)
          v41 = *a2;
        else
          v41 = v16;
        if (v47 > v48)
          v42 = v15 + 1;
        else
          v42 = v17 + v15;
        v51 = v52;
        v52 = 0;
        v43 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t *))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), v41, v42, &v51);
        v44 = v51;
        v51 = 0;
        if (v44)
          (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
        if ((v43 & 1) == 0)
        {
          if (qword_1EE41C4A0 != -1)
            dispatch_once(&qword_1EE41C4A0, &unk_1E3D3BA40);
          v45 = qword_1EE41C498;
          if (os_log_type_enabled((os_log_t)qword_1EE41C498, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_19C291000, v45, OS_LOG_TYPE_INFO, "failed to insert montreal state into the cache", buf, 2u);
          }
          v14 = 0;
        }
        v46 = v52;
        v52 = 0;
        if (v46)
          (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
        goto LABEL_40;
      }
      v24 = (float16x8_t *)((char *)v24 + 2 * v27);
      v26 = (int *)(v21 + 4 * v27);
    }
    else
    {
      v26 = (int *)v21;
    }
    do
    {
      v35 = *v26++;
      _S0 = v35;
      __asm { FCVT            H0, S0 }
      v24->i16[0] = _S0;
      v24 = (float16x8_t *)((char *)v24 + 2);
    }
    while (v26 != (int *)(v21 + 4 * v22));
    goto LABEL_24;
  }
  return 1;
}

void sub_19C3D7BA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 8))(a14);
  if (a15)
    (*(void (**)(uint64_t))(*(_QWORD *)a15 + 8))(a15);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_19C3D7C04(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  int v3;
  int v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v10;
  std::__shared_weak_count *v11;

  v3 = *(_DWORD *)(*a2 + 4 * a3);
  (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(a1 + 56) + 136))(&v10);
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
  v5 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return (v3 - 1) < 2 || v3 == v4;
}

void sub_19C3D7CA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_19C2B43C8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

unint64_t sub_19C3D7CB8(unint64_t a1, int a2)
{
  unint64_t v2;
  uint64_t (*v3)(void);
  unint64_t v4;

  v2 = a1;
  switch(a2)
  {
    case 4:
      v3 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 56) + 112);
      break;
    case 3:
      v3 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 56) + 104);
      break;
    case 2:
      v3 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 56) + 96);
      break;
    default:
      LODWORD(v4) = 0;
      LODWORD(v2) = *(_DWORD *)(v2 + 96) - 1;
      return v4 | ((unint64_t)v2 << 32);
  }
  v4 = v3();
  v2 = HIDWORD(v4);
  return v4 | ((unint64_t)v2 << 32);
}

uint64_t sub_19C3D7D2C(uint64_t a1, _QWORD *a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  int v7;
  BOOL v8;
  uint64_t v9;
  int v10;
  int v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  NSObject *v15;
  uint64_t v16;
  _BYTE v18[22];
  __int16 v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v2 = (uint64_t)(a2[1] - *a2) >> 2;
  v3 = *(_QWORD *)(a1 + 88);
  v4 = v2 - v3;
  if (v2 <= v3)
    __assert_rtn("_truncatedPriorContextLength", "MontrealLanguageModel.cpp", 49, "context.size() > m_forwardPassLimit");
  v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 16))(*(_QWORD *)(a1 + 56));
  if (v4)
    v8 = v7 == 2;
  else
    v8 = 0;
  if (v8)
  {
    do
    {
      v9 = v4 - 1;
      v10 = *(_DWORD *)(*a2 + 4 * (v4 - 1));
      (*(void (**)(_BYTE *__return_ptr))(**(_QWORD **)(a1 + 56) + 136))(v18);
      v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v18 + 32))(*(_QWORD *)v18);
      v12 = *(std::__shared_weak_count **)&v18[8];
      if (*(_QWORD *)&v18[8])
      {
        v13 = (unint64_t *)(*(_QWORD *)&v18[8] + 8);
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      if ((v10 - 1) < 2)
        break;
      if (v10 == v11)
        break;
      --v4;
    }
    while (v9);
  }
  if (qword_1EE41C4A0 != -1)
    dispatch_once(&qword_1EE41C4A0, &unk_1E3D3BA40);
  v15 = qword_1EE41C498;
  if (os_log_type_enabled((os_log_t)qword_1EE41C498, OS_LOG_TYPE_INFO))
  {
    v16 = (uint64_t)(a2[1] - *a2) >> 2;
    *(_DWORD *)v18 = 134218496;
    *(_QWORD *)&v18[4] = v16 - v4;
    *(_WORD *)&v18[12] = 2048;
    *(_QWORD *)&v18[14] = v16;
    v19 = 2048;
    v20 = v4;
    _os_log_impl(&dword_19C291000, v15, OS_LOG_TYPE_INFO, "limiting forward passes to %ld, with contextLength=%zu and priorContextLength=%zu", v18, 0x20u);
  }
  return v4;
}

void sub_19C3D7F10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_19C2B43C8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

os_log_t sub_19C3D7F28()
{
  os_log_t result;

  result = os_log_create("com.apple.LanguageModeling", "MontrealLanguageModel");
  qword_1EE41C498 = (uint64_t)result;
  return result;
}

uint64_t sub_19C3D7F54(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  __int128 v5;
  char *v6;
  int v7;
  unint64_t v8;
  __int128 v9;
  char *v10;
  int v11;
  unint64_t v12;
  __int128 v13;
  uint64_t result;
  void *__p[2];
  uint64_t v16;
  int v17;

  sub_19C297950(__p, (const UInt8 *)a2);
  v17 = *(_DWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  if (v4 >= *(_QWORD *)(a1 + 40))
  {
    v6 = sub_19C2FEE40((void **)(a1 + 24), (uint64_t)__p);
    v7 = SHIBYTE(v16);
    *(_QWORD *)(a1 + 32) = v6;
    if (v7 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v5 = *(_OWORD *)__p;
    *(_QWORD *)(v4 + 16) = v16;
    *(_OWORD *)v4 = v5;
    __p[1] = 0;
    v16 = 0;
    __p[0] = 0;
    *(_DWORD *)(v4 + 24) = v17;
    *(_QWORD *)(a1 + 32) = v4 + 32;
  }
  sub_19C297950(__p, (const UInt8 *)a2);
  v17 = *(_DWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a1 + 56);
  if (v8 >= *(_QWORD *)(a1 + 64))
  {
    v10 = sub_19C2FEE40((void **)(a1 + 48), (uint64_t)__p);
    v11 = SHIBYTE(v16);
    *(_QWORD *)(a1 + 56) = v10;
    if (v11 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v9 = *(_OWORD *)__p;
    *(_QWORD *)(v8 + 16) = v16;
    *(_OWORD *)v8 = v9;
    __p[1] = 0;
    v16 = 0;
    __p[0] = 0;
    *(_DWORD *)(v8 + 24) = v17;
    *(_QWORD *)(a1 + 56) = v8 + 32;
  }
  v12 = *(_QWORD *)(a1 + 8);
  if (v12 >= *(_QWORD *)(a1 + 16))
  {
    result = sub_19C315FD0((char **)a1, a2);
  }
  else
  {
    if (*(char *)(a2 + 23) < 0)
    {
      sub_19C2B5238(*(_BYTE **)(a1 + 8), *(void **)a2, *(_QWORD *)(a2 + 8));
    }
    else
    {
      v13 = *(_OWORD *)a2;
      *(_QWORD *)(v12 + 16) = *(_QWORD *)(a2 + 16);
      *(_OWORD *)v12 = v13;
    }
    *(_DWORD *)(v12 + 24) = *(_DWORD *)(a2 + 24);
    result = v12 + 32;
    *(_QWORD *)(a1 + 8) = v12 + 32;
  }
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void sub_19C3D80B0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_19C3D80B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19C3D80D8(uint64_t a1, uint64_t a2)
{
  void ***v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;

  v6 = *(_QWORD *)(a1 + 136);
  v5 = *(_QWORD *)(a1 + 144);
  v4 = (void ***)(a1 + 136);
  while (v5 != v6)
  {
    if (*(char *)(v5 - 9) < 0)
      operator delete(*(void **)(v5 - 32));
    v5 -= 32;
  }
  v7 = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 144) = v6;
  for (i = *(_QWORD *)(a1 + 168); i != v7; i -= 32)
  {
    if (*(char *)(i - 9) < 0)
      operator delete(*(void **)(i - 32));
  }
  *(_QWORD *)(a1 + 168) = v7;
  if (v4 != (void ***)a2)
    sub_19C35FEA0(v4, *(void ***)a2, *(char **)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 5);
  if (a1 + 160 != a2)
    sub_19C35FEA0((void ***)(a1 + 160), *(void ***)a2, *(char **)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 5);
}

_BYTE *sub_19C3D81B4(_BYTE *__dst, _QWORD *a2)
{
  _DWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 *v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  _DWORD *v10;

  v2 = __dst;
  v3 = a2[3];
  v4 = a2[4] - v3;
  if ((unint64_t)v4 < 0x21)
  {
    v8 = a2[18];
    if (a2[17] == v8)
      __assert_rtn("lastToken", "CompletionStemImpl.cpp", 137, "false");
    if (*(char *)(v8 - 9) < 0)
    {
      __dst = sub_19C2B5238(__dst, *(void **)(v8 - 32), *(_QWORD *)(v8 - 24));
    }
    else
    {
      v9 = *(_OWORD *)(v8 - 32);
      *((_QWORD *)__dst + 2) = *(_QWORD *)(v8 - 16);
      *(_OWORD *)__dst = v9;
    }
    v10 = (_DWORD *)(v8 - 8);
  }
  else
  {
    v5 = (v4 >> 5) - 2;
    v6 = (__int128 *)(v3 + 32 * v5);
    if (*((char *)v6 + 23) < 0)
    {
      __dst = sub_19C2B5238(__dst, *(void **)v6, *((_QWORD *)v6 + 1));
    }
    else
    {
      v7 = *v6;
      *((_QWORD *)__dst + 2) = *((_QWORD *)v6 + 2);
      *(_OWORD *)__dst = v7;
    }
    v10 = (_DWORD *)(v3 + 32 * v5 + 24);
  }
  v2[6] = *v10;
  return __dst;
}

void sub_19C3D8294(std::string *this, const void **a2, const void **a3)
{
  const void **v4;
  int v6;
  size_t v7;
  unint64_t v8;
  void **p_dst;
  uint64_t v10;
  uint64_t v11;
  const void *v12;
  const std::string::value_type *v13;
  std::string::size_type v14;
  void **__dst;
  std::string::size_type v16;
  int64_t v17;

  *((_BYTE *)&this->__r_.__value_.__s + 23) = 0;
  this->__r_.__value_.__s.__data_[0] = 0;
  if (a2 != a3)
  {
    v4 = a2;
    while (1)
    {
      v6 = *((char *)v4 + 23);
      if (v6 >= 0)
        v7 = *((unsigned __int8 *)v4 + 23);
      else
        v7 = (size_t)v4[1];
      v8 = v7 + 1;
      if (v7 + 1 >= 0x7FFFFFFFFFFFFFF8)
        sub_19C2A1A54();
      if (v8 >= 0x17)
        break;
      v16 = 0;
      v17 = 0;
      __dst = 0;
      p_dst = (void **)&__dst;
      HIBYTE(v17) = v7 + 1;
      if (v7)
        goto LABEL_14;
LABEL_18:
      *(_WORD *)((char *)p_dst + v7) = 32;
      if (v17 >= 0)
        v13 = (const std::string::value_type *)&__dst;
      else
        v13 = (const std::string::value_type *)__dst;
      if (v17 >= 0)
        v14 = HIBYTE(v17);
      else
        v14 = v16;
      std::string::append(this, v13, v14);
      if (SHIBYTE(v17) < 0)
        operator delete(__dst);
      v4 += 4;
      if (v4 == a3)
        return;
    }
    v10 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v10 = v8 | 7;
    v11 = v10 + 1;
    p_dst = (void **)operator new(v10 + 1);
    v16 = v7 + 1;
    v17 = v11 | 0x8000000000000000;
    __dst = p_dst;
LABEL_14:
    if (v6 >= 0)
      v12 = v4;
    else
      v12 = *v4;
    memmove(p_dst, v12, v7);
    goto LABEL_18;
  }
}

void sub_19C3D83E0()
{
  const void *RootCursor;
  const void *v1;

  RootCursor = (const void *)LXLexiconCreateRootCursor();
  v1 = (const void *)LXCursorCreateByAdvancing();
  LXCursorEnumerateEntriesRecursively();
  if (v1)
    CFRelease(v1);
  if (RootCursor)
    CFRelease(RootCursor);
}

void sub_19C3D8480(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  sub_19C338870((const void **)va);
  sub_19C338870((const void **)(v7 - 40));
  _Unwind_Resume(a1);
}

void sub_19C3D84A4(uint64_t a1)
{
  const void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const void *v7;

  v2 = (const void *)LXEntryCopyString();
  v3 = *(_QWORD *)(a1 + 32);
  LXEntryGetProbability();
  v7 = v2;
  v6 = v4;
  v5 = *(_QWORD *)(v3 + 24);
  if (!v5)
    sub_19C2CCC60();
  (*(void (**)(uint64_t, const void **, uint64_t *))(*(_QWORD *)v5 + 48))(v5, &v7, &v6);
  if (v2)
    CFRelease(v2);
}

void sub_19C3D852C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C2FE810((const void **)va);
  _Unwind_Resume(a1);
}

void sub_19C3D8540(uint64_t a1, uint64_t a2, uint64_t a3, const void **a4, int a5)
{
  const __CFString *v9;
  const __CFString *v10;
  CFTypeID v11;
  CFTypeID TypeID;
  const void *v13;
  const __CFString *v14;
  CFTypeID v15;
  uint64_t v16;
  std::string::size_type v17;
  void *v18;
  std::string *p_p;
  int data;
  int v21;
  int v23;
  std::string *v24;
  std::string::size_type v25;
  std::string::size_type v26;
  int v27;
  const void *v30;
  const __CFString *v31;
  CFTypeID v32;
  std::string::size_type v33;
  void *v34;
  std::string *v35;
  int v36;
  int v37;
  int v39;
  int v40;
  const void *v41;
  std::string *v42;
  std::string *v43;
  std::string::size_type v44;
  std::string::size_type v45;
  std::string::size_type v46;
  uint64_t v47;
  std::string *v51;
  std::string::size_type v52;
  uint64_t v53;
  CFTypeRef *v55;
  char *v56;
  unint64_t *v57;
  int v58;
  const UInt8 *v59;
  CFIndex v60;
  const __CFString *v61;
  void *p_cf;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  const char *v66;
  unint64_t v67;
  std::string::size_type v68;
  const char *v69;
  std::string *v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  __int128 v74;
  char *v75;
  std::string *v76;
  std::string::size_type v77;
  BOOL v79;
  unint64_t v80;
  __int128 v81;
  char *v82;
  int v83;
  std::string::size_type v84;
  char v85;
  std::string *v86;
  void **v91;
  signed int v92;
  unsigned int v93;
  unint64_t v94;
  unint64_t v95;
  _QWORD *v96;
  std::string::size_type v97;
  unint64_t v98;
  void *v99;
  unsigned int v100;
  CFTypeRef *v101;
  char *v102;
  unint64_t *v103;
  int v104;
  const UInt8 *v105;
  CFIndex v106;
  const __CFString *v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  const char *v112;
  unint64_t v113;
  std::string::size_type v114;
  const char *v115;
  std::string *v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  __int128 v120;
  char *v121;
  std::string *v122;
  std::string::size_type v123;
  BOOL v125;
  unint64_t v126;
  __int128 v127;
  char *v128;
  int v129;
  std::string::size_type v130;
  char v131;
  std::string *v132;
  void **v137;
  signed int v138;
  unsigned int v139;
  unint64_t v140;
  unint64_t v141;
  _QWORD *v142;
  std::string::size_type v143;
  unint64_t v144;
  void *v145;
  unsigned int v146;
  char *v147;
  unint64_t v148;
  uint64_t v149;
  unint64_t v150;
  uint8x8_t v151;
  unint64_t v152;
  uint64_t **v153;
  uint64_t *v154;
  unint64_t v155;
  unint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  char v160;
  uint64_t v161;
  int *v162;
  int v163;
  int v164;
  int *v166;
  int v167;
  int v168;
  BOOL v170;
  BOOL v171;
  BOOL v172;
  uint64_t v173;
  size_t v174;
  size_t v175;
  size_t v176;
  int v177;
  int *v179;
  unint64_t v180;
  BOOL v181;
  BOOL v182;
  BOOL v183;
  uint64_t v184;
  size_t v185;
  size_t v186;
  size_t v187;
  uint64_t v189;
  size_t v190;
  uint64_t v191;
  const void *v192;
  const void *v193;
  size_t v194;
  unsigned int v195;
  uint64_t v196;
  unint64_t v197;
  uint8x8_t v198;
  unint64_t v199;
  uint64_t **v200;
  uint64_t *v201;
  unint64_t v202;
  unint64_t v203;
  uint64_t v204;
  unsigned __int16 *v205;
  int v206;
  int v207;
  std::__shared_weak_count *v209;
  std::__shared_weak_count *v210;
  _QWORD *v211;
  uint64_t v212;
  int v213;
  unint64_t v214;
  unint64_t v215;
  unint64_t v216;
  std::__shared_weak_count *v217;
  unint64_t *p_shared_owners;
  unint64_t v219;
  std::__shared_weak_count *v220;
  uint64_t *v221;
  unint64_t v222;
  std::__shared_weak_count *v223;
  unint64_t *v224;
  unint64_t v225;
  uint64_t *v226;
  unint64_t v227;
  uint64_t v228;
  unint64_t v229;
  uint64_t v230;
  unint64_t v231;
  uint8x8_t v232;
  unint64_t v233;
  uint64_t **v234;
  uint64_t *v235;
  unint64_t v236;
  unint64_t v237;
  uint64_t v238;
  uint64_t v239;
  unint64_t v240;
  char v241;
  uint64_t v242;
  int *v243;
  int v244;
  int v245;
  int *v247;
  int v248;
  int v249;
  BOOL v251;
  BOOL v252;
  BOOL v253;
  uint64_t v254;
  size_t v255;
  size_t v256;
  size_t v257;
  int v258;
  int *v260;
  unint64_t v261;
  uint64_t v265;
  size_t v266;
  size_t v267;
  size_t v268;
  uint64_t v270;
  size_t v271;
  uint64_t v272;
  const void *v273;
  const void *v274;
  size_t v275;
  __int128 v276;
  const __CFURL *v277;
  const __CFDictionary *v278;
  const __CFDictionary *v279;
  const __CFString *v280;
  const __CFArray *v281;
  std::string::size_type v282;
  void **v283;
  void **v284;
  std::string::size_type v285;
  const __CFArray *v286;
  const __CFArray *v287;
  __int128 v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  std::string *v292;
  std::string::size_type v293;
  char v294;
  std::string::size_type v295;
  std::string::size_type v296;
  uint64_t i;
  uint64_t *v298;
  uint64_t v299;
  void **k;
  void **j;
  std::__shared_weak_count *v302;
  std::__shared_weak_count *v303;
  _QWORD *v304;
  unint64_t v305;
  unint64_t v306;
  unint64_t v307;
  std::__shared_weak_count *v308;
  unint64_t *v309;
  unint64_t v310;
  std::__shared_weak_count *v311;
  char *v312;
  unint64_t *v313;
  unint64_t v314;
  std::__shared_weak_count *v315;
  unint64_t *v316;
  unint64_t v317;
  std::__shared_weak_count *v318;
  unint64_t *v319;
  unint64_t v320;
  std::__shared_weak_count *v321;
  std::__shared_weak_count *v322;
  void *v323;
  std::__shared_weak_count *shared_weak_owners;
  unint64_t *v325;
  unint64_t v326;
  uint64_t v327;
  int v328;
  const __CFString *v329;
  __CFString *v330;
  CFTypeRef *v331;
  std::string::size_type v332;
  std::string::size_type v333;
  unint64_t *v334;
  unint64_t v335;
  int v336;
  const UInt8 *v337;
  CFIndex v338;
  CFStringRef v339;
  int v340;
  size_t v341;
  const void *v342;
  uint64_t v343;
  unint64_t *v344;
  unint64_t v345;
  _QWORD *v346;
  uint64_t v347;
  __int128 v348;
  uint64_t v349;
  unint64_t *v350;
  unint64_t v351;
  unint64_t v352;
  void *v353;
  std::string *v354;
  void *v355;
  std::string *v356;
  _QWORD *v357;
  _QWORD *v358;
  void *v359;
  void *exception;
  _QWORD *v361;
  _QWORD *v362;
  std::string *p_theDict;
  std::string::size_type size;
  _QWORD *v365;
  CFDictionaryRef **v366;
  CFDictionaryRef **v367;
  _QWORD *v368;
  void *v369;
  void *v370;
  void *v371;
  void *v372;
  void *v373;
  void *v374;
  _QWORD *v375;
  const void *Value;
  CFURLRef *v377;
  CFStringRef v378;
  const __CFString **v379;
  std::string *p_dst;
  std::string::size_type v381;
  _QWORD *v382;
  char v383;
  char v384;
  CFDictionaryRef *v385;
  void **v386;
  int *v387;
  void **v388;
  const void **v389;
  uint64_t v390;
  int v391;
  int *v392;
  const void **__s1;
  const void **__s1a;
  std::string::size_type __s1b;
  float *v396;
  float *v397;
  std::string::size_type v398;
  uint64_t v399;
  _DWORD *v400;
  _DWORD *v401;
  __int128 v402;
  float *v403;
  uint64_t *v404;
  void *v405;
  std::__shared_weak_count *v406;
  _QWORD *v407;
  std::__shared_weak_count *v408;
  void *v409;
  CFDictionaryRef **v410;
  CFTypeRef cf;
  uint64_t v412;
  unsigned __int8 v413;
  char *v414;
  std::__shared_weak_count *v415;
  CFTypeRef v416[2];
  void *v417[2];
  std::string theDict;
  std::string __p;
  void *v420;
  std::string __dst;
  uint64_t v422;

  v422 = *MEMORY[0x1E0C80C00];
  v9 = (const __CFString *)MEMORY[0x1A1AD2A04](*(_QWORD *)(a2 + 8));
  if (v9)
  {
    v10 = v9;
    CFRetain(v9);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v10;
    v11 = CFGetTypeID(v10);
    if (v11 != CFStringGetTypeID())
    {
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1A1AD3154](exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
    }
    TypeID = CFStringGetTypeID();
    if (TypeID == CFGetTypeID(v10))
    {
      sub_19C297E60((_QWORD *)a1, v10);
      CFRelease(v10);
      *(_OWORD *)(a1 + 24) = 0u;
      *(_OWORD *)(a1 + 40) = 0u;
      *(_OWORD *)(a1 + 56) = 0u;
      *(_OWORD *)(a1 + 72) = 0u;
      *(_OWORD *)(a1 + 88) = 0u;
      sub_19C348B90((uint64_t)&v409, *(CFTypeRef *)a2, 46);
      *((_BYTE *)&theDict.__r_.__value_.__s + 23) = 20;
      strcpy((char *)&theDict, "CoreLM configuration");
      v399 = a1;
      if (v409 == v410)
      {
        v361 = __cxa_allocate_exception(0x20uLL);
        std::operator+<char>();
        sub_19C39717C(&__p, &__dst, " resource");
        sub_19C31237C(v361, (__int128 *)&__p);
        __cxa_throw(v361, (struct type_info *)&unk_1E3D32968, (void (*)(void *))sub_19C3123E4);
      }
      if ((char *)v410 - (_BYTE *)v409 != 16)
      {
        sub_19C2B4F08((uint64_t)&__p);
        v362 = sub_19C2A1B24(&__p.__r_.__value_.__r.__words[2], (uint64_t)"Duplicate ", 10);
        if ((theDict.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_theDict = &theDict;
        else
          p_theDict = (std::string *)theDict.__r_.__value_.__r.__words[0];
        if ((theDict.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(theDict.__r_.__value_.__r.__words[2]);
        else
          size = theDict.__r_.__value_.__l.__size_;
        v365 = sub_19C2A1B24(v362, (uint64_t)p_theDict, size);
        sub_19C2A1B24(v365, (uint64_t)" resources:", 11);
        v366 = (CFDictionaryRef **)v409;
        v367 = v410;
        if (v409 != v410)
        {
          do
          {
            v375 = sub_19C2A1B24(&__p.__r_.__value_.__r.__words[2], (uint64_t)" '", 2);
            Value = CFDictionaryGetValue(**v366, CFSTR("URL"));
            sub_19C423CD8(&cf, Value);
            v377 = (CFURLRef *)sub_19C423D20(&cf);
            v378 = CFURLCopyPath(*v377);
            sub_19C297DB4(v416, v378);
            v379 = (const __CFString **)sub_19C423D7C(v416);
            sub_19C423DD8(&__dst, *v379);
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              p_dst = &__dst;
            else
              p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v381 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
            else
              v381 = __dst.__r_.__value_.__l.__size_;
            v382 = sub_19C2A1B24(v375, (uint64_t)p_dst, v381);
            sub_19C2A1B24(v382, (uint64_t)"'", 1);
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__dst.__r_.__value_.__l.__data_);
            sub_19C2E5670(v416);
            sub_19C32BC18(&cf);
            v366 += 2;
          }
          while (v366 != v367);
        }
        v368 = __cxa_allocate_exception(0x20uLL);
        sub_19C351068(&__dst, (uint64_t)&__p);
        sub_19C31237C(v368, (__int128 *)&__dst);
        __cxa_throw(v368, (struct type_info *)&unk_1E3D32968, (void (*)(void *))sub_19C3123E4);
      }
      v13 = **(const void ***)v409;
      if (v13)
        CFRetain(**(CFTypeRef **)v409);
      sub_19C29438C(&theDict, v13);
      if (!theDict.__r_.__value_.__r.__words[0])
      {
        v369 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1A1AD3154](v369, "Could not construct");
        __cxa_throw(v369, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
      }
      v14 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)theDict.__r_.__value_.__l.__data_, CFSTR("PrefixMatchingType"));
      if (!v14 || (v15 = CFStringGetTypeID(), v15 != CFGetTypeID(v14)))
      {
        __p.__r_.__value_.__s.__data_[0] = 0;
        LOBYTE(v420) = 0;
LABEL_768:
        v357 = __cxa_allocate_exception(0x20uLL);
        std::operator+<char>();
        sub_19C31237C(v357, (__int128 *)&__dst);
        __cxa_throw(v357, (struct type_info *)&unk_1E3D32968, (void (*)(void *))sub_19C3123E4);
      }
      v16 = a1;
      v391 = a5;
      sub_19C2E50A4(&__p, v14);
      LOBYTE(v420) = 1;
      v17 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v17 = __p.__r_.__value_.__l.__size_;
      switch(v17)
      {
        case 5uLL:
          v18 = (void *)__p.__r_.__value_.__r.__words[0];
          p_p = &__p;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          data = (int)p_p->__r_.__value_.__l.__data_;
          v21 = p_p->__r_.__value_.__s.__data_[4];
          if (data != 1667332165 || v21 != 116)
            goto LABEL_768;
          v23 = 0;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_34;
          goto LABEL_35;
        case 0xFuLL:
          v18 = (void *)__p.__r_.__value_.__r.__words[0];
          v51 = &__p;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v51 = (std::string *)__p.__r_.__value_.__r.__words[0];
          v52 = v51->__r_.__value_.__r.__words[0];
          v53 = *(std::string::size_type *)((char *)v51->__r_.__value_.__r.__words + 7);
          if (v52 != 0x65736E4965736143 || v53 != 0x6576697469736E65)
            goto LABEL_768;
          v23 = 1;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_34;
          goto LABEL_35;
        case 0x14uLL:
          v18 = (void *)__p.__r_.__value_.__r.__words[0];
          v24 = &__p;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v24 = (std::string *)__p.__r_.__value_.__r.__words[0];
          v25 = v24->__r_.__value_.__r.__words[0];
          v26 = v24->__r_.__value_.__l.__size_;
          v27 = v24->__r_.__value_.__r.__words[2];
          if (v25 != 0x6974697263616944 || v26 != 0x69736E65736E4963 || v27 != 1702259060)
            goto LABEL_768;
          v23 = 2;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_34;
          goto LABEL_35;
        case 0x1BuLL:
          v18 = (void *)__p.__r_.__value_.__r.__words[0];
          v43 = &__p;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v43 = (std::string *)__p.__r_.__value_.__r.__words[0];
          v44 = v43->__r_.__value_.__r.__words[0];
          v45 = v43->__r_.__value_.__l.__size_;
          v46 = v43->__r_.__value_.__r.__words[2];
          v47 = *(std::string::size_type *)((char *)&v43->__r_.__value_.__r.__words[2] + 3);
          if (v44 != 0x44646E4165736143
            || v45 != 0x6369746972636169
            || v46 != 0x7469736E65736E49
            || v47 != 0x6576697469736E65)
          {
            goto LABEL_768;
          }
          v23 = 3;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
LABEL_34:
            operator delete(v18);
LABEL_35:
          if (theDict.__r_.__value_.__r.__words[0])
            CFRelease(theDict.__r_.__value_.__l.__data_);
          v30 = **(const void ***)v409;
          if (v30)
            CFRetain(**(CFTypeRef **)v409);
          sub_19C29438C(&theDict, v30);
          if (!theDict.__r_.__value_.__r.__words[0])
          {
            v370 = __cxa_allocate_exception(0x10uLL);
            MEMORY[0x1A1AD3154](v370, "Could not construct");
            __cxa_throw(v370, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
          }
          v31 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)theDict.__r_.__value_.__l.__data_, CFSTR("CoderType"));
          if (!v31 || (v32 = CFStringGetTypeID(), v32 != CFGetTypeID(v31)))
          {
            __p.__r_.__value_.__s.__data_[0] = 0;
            LOBYTE(v420) = 0;
            goto LABEL_770;
          }
          sub_19C2E50A4(&__p, v31);
          LOBYTE(v420) = 1;
          v33 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v33 = __p.__r_.__value_.__l.__size_;
          if (v33 == 8)
          {
            v34 = (void *)__p.__r_.__value_.__r.__words[0];
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v42 = &__p;
            else
              v42 = (std::string *)__p.__r_.__value_.__r.__words[0];
            if (v42->__r_.__value_.__r.__words[0] == 0x3156786966667553)
            {
              v40 = 0;
              v39 = 1;
              if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_54;
            }
            else
            {
              if (v42->__r_.__value_.__r.__words[0] != 0x3256786966667553)
                goto LABEL_770;
              v40 = 0;
              v39 = 2;
              if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_54;
            }
          }
          else
          {
            if (v33 != 6)
              goto LABEL_770;
            v34 = (void *)__p.__r_.__value_.__r.__words[0];
            v35 = &__p;
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v35 = (std::string *)__p.__r_.__value_.__r.__words[0];
            v36 = (int)v35->__r_.__value_.__l.__data_;
            v37 = WORD2(v35->__r_.__value_.__r.__words[0]);
            if (v36 != 1717924432 || v37 != 30825)
            {
LABEL_770:
              v358 = __cxa_allocate_exception(0x20uLL);
              std::operator+<char>();
              sub_19C31237C(v358, (__int128 *)&__dst);
              __cxa_throw(v358, (struct type_info *)&unk_1E3D32968, (void (*)(void *))sub_19C3123E4);
            }
            v39 = 0;
            v40 = 1;
            if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_54:
              v41 = (const void *)theDict.__r_.__value_.__r.__words[0];
              if (!theDict.__r_.__value_.__r.__words[0])
                goto LABEL_90;
              goto LABEL_89;
            }
          }
          operator delete(v34);
          v41 = (const void *)theDict.__r_.__value_.__r.__words[0];
          if (!theDict.__r_.__value_.__r.__words[0])
          {
LABEL_90:
            v407 = 0;
            v408 = 0;
            v390 = a2;
            v389 = a4;
            if (v40)
            {
              v55 = *(CFTypeRef **)v409;
              v56 = (char *)operator new(0x190uLL);
              *((_QWORD *)v56 + 1) = 0;
              v57 = (unint64_t *)(v56 + 8);
              *((_QWORD *)v56 + 2) = 0;
              *(_QWORD *)v56 = &off_1E3D39748;
              sub_19C394110(&cf, (CFDictionaryRef)*v55);
              *((_OWORD *)v56 + 2) = 0u;
              *((_QWORD *)v56 + 3) = off_1E3D35F78;
              *((_OWORD *)v56 + 3) = 0u;
              *((_OWORD *)v56 + 4) = 0u;
              v58 = *(char *)(v399 + 23);
              if (v58 >= 0)
                v59 = (const UInt8 *)v399;
              else
                v59 = *(const UInt8 **)v399;
              if (v58 >= 0)
                v60 = *(unsigned __int8 *)(v399 + 23);
              else
                v60 = *(_QWORD *)(v399 + 8);
              v61 = CFStringCreateWithBytes(0, v59, v60, 0x8000100u, 0);
              if (!v61)
              {
                v373 = __cxa_allocate_exception(0x10uLL);
                MEMORY[0x1A1AD3154](v373, "Could not construct");
                __cxa_throw(v373, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
              }
              *((_QWORD *)v56 + 10) = CFLocaleCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v61);
              CFRelease(v61);
              *((_OWORD *)v56 + 7) = 0u;
              *(_QWORD *)(v56 + 92) = 0;
              v400 = v56 + 92;
              *((_DWORD *)v56 + 22) = v23;
              *((_OWORD *)v56 + 8) = 0u;
              *(_QWORD *)(v56 + 100) = 0;
              *((_DWORD *)v56 + 36) = 1065353216;
              v396 = (float *)(v56 + 112);
              sub_19C2A76D0((uint64_t)(v56 + 152));
              if ((v413 & 0x80u) == 0)
                p_cf = &cf;
              else
                p_cf = (void *)cf;
              if ((v413 & 0x80u) == 0)
                v63 = v413;
              else
                v63 = v412;
              sub_19C2A7A6C((uint64_t)(v56 + 152), (uint64_t)p_cf, v63, (uint64_t *)&__dst);
              if (__dst.__r_.__value_.__r.__words[0])
              {
                v353 = __cxa_allocate_exception(0x10uLL);
                sub_19C2CD6DC((uint64_t)&__dst, &__p);
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v354 = &__p;
                else
                  v354 = (std::string *)__p.__r_.__value_.__r.__words[0];
                MEMORY[0x1A1AD3154](v353, v354);
                __cxa_throw(v353, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
              }
              sub_19C2CD3C8((uint64_t *)&__dst);
              v64 = 0;
              v65 = MEMORY[0x1E0C80978];
              while (1)
              {
                if ((int)sub_19C2B0120((_QWORD **)v56 + 19) <= (unint64_t)v64)
                {
                  if ((char)v413 < 0)
                    operator delete((void *)cf);
                  *((_QWORD *)v56 + 3) = off_1E3D34EB0;
                  v403 = (float *)(v56 + 272);
                  *((_OWORD *)v56 + 17) = 0u;
                  *((_OWORD *)v56 + 18) = 0u;
                  *((_DWORD *)v56 + 76) = 1065353216;
                  v56[312] = 0;
                  v56[316] = 0;
                  v91 = (void **)(v56 + 320);
                  v56[348] = 0;
                  *((_QWORD *)v56 + 41) = 0;
                  *((_QWORD *)v56 + 42) = 0;
                  *((_QWORD *)v56 + 40) = 0;
                  v56[344] = 0;
                  *((_DWORD *)v56 + 88) = v39;
                  v386 = (void **)(v56 + 320);
                  v92 = sub_19C2B0120((_QWORD **)v56 + 19);
                  v93 = v92;
                  memset(&__p, 0, sizeof(__p));
                  if (v92)
                  {
                    if (v92 < 0)
                      sub_19C2A18E8();
                    v94 = v92;
                    v95 = (unint64_t)(v92 - 1) >> 6;
                    v96 = operator new(8 * (v95 + 1));
                    v97 = (std::string::size_type)v96;
                    __p.__r_.__value_.__l.__size_ = (int)v93;
                    __p.__r_.__value_.__r.__words[2] = v95 + 1;
                    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v96;
                    if (v93 >= 0x41)
                      v98 = v95;
                    else
                      v98 = 0;
                    v96[v98] = 0;
                    if (v93 >= 0x40)
                      bzero(v96, 8 * (v94 >> 6));
                    v91 = (void **)(v56 + 320);
                    if ((v94 & 0x3F) != 0)
                      *(_QWORD *)(v97 + 8 * ((unint64_t)(int)v93 >> 6)) &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v94 & 0x3F));
                    v99 = *v386;
                    if (*v386)
                    {
LABEL_205:
                      operator delete(v99);
                      *v91 = 0;
                      v91[1] = 0;
                      v91[2] = 0;
                      v97 = __p.__r_.__value_.__r.__words[0];
                    }
                  }
                  else
                  {
                    v97 = 0;
                    v99 = *v91;
                    if (*v91)
                      goto LABEL_205;
                  }
                  v100 = 0;
                  *((_QWORD *)v56 + 40) = v97;
                  *(_OWORD *)(v56 + 328) = *(_OWORD *)&__p.__r_.__value_.__r.__words[1];
LABEL_328:
                  while (2)
                  {
                    if ((int)sub_19C2B0120((_QWORD **)v56 + 19) > (unint64_t)v100)
                    {
                      if (*((_DWORD *)v56 + 25) == v100 || *v400 == v100 || *((_DWORD *)v56 + 27) == v100)
                      {
LABEL_332:
                        v147 = (char *)*v91;
                        v148 = ((unint64_t)v100 >> 3) & 0x1FFFFFF8;
                        goto LABEL_333;
                      }
                      v150 = *((_QWORD *)v56 + 15);
                      if (v150)
                      {
                        v151 = (uint8x8_t)vcnt_s8((int8x8_t)v150);
                        v151.i16[0] = vaddlv_u8(v151);
                        if (v151.u32[0] > 1uLL)
                        {
                          v152 = v100;
                          if (v150 <= v100)
                            v152 = v100 % v150;
                        }
                        else
                        {
                          v152 = ((_DWORD)v150 - 1) & v100;
                        }
                        v153 = *(uint64_t ***)(*(_QWORD *)v396 + 8 * v152);
                        if (v153)
                        {
                          v154 = *v153;
                          if (v154)
                          {
                            if (v151.u32[0] < 2uLL)
                            {
                              v155 = v150 - 1;
                              while (1)
                              {
                                v157 = v154[1];
                                if (v157 == v100)
                                {
                                  if (*((_DWORD *)v154 + 4) == v100)
                                    goto LABEL_332;
                                }
                                else if ((v157 & v155) != v152)
                                {
                                  goto LABEL_354;
                                }
                                v154 = (uint64_t *)*v154;
                                if (!v154)
                                  goto LABEL_354;
                              }
                            }
                            do
                            {
                              v156 = v154[1];
                              if (v156 == v100)
                              {
                                if (*((_DWORD *)v154 + 4) == v100)
                                  goto LABEL_332;
                              }
                              else
                              {
                                if (v156 >= v150)
                                  v156 %= v150;
                                if (v156 != v152)
                                  break;
                              }
                              v154 = (uint64_t *)*v154;
                            }
                            while (v154);
                          }
                        }
                      }
LABEL_354:
                      if (*((_DWORD *)v56 + 26) == v100 || *((_DWORD *)v56 + 24) == v100)
                        goto LABEL_327;
                      v149 = *((_QWORD *)v56 + 4);
                      v158 = v149 + 24 * v100;
                      v159 = *(unsigned __int8 *)(v158 + 23);
                      v160 = v159;
                      if ((v159 & 0x80u) == 0)
                        v161 = *(unsigned __int8 *)(v158 + 23);
                      else
                        v161 = *(_QWORD *)(v158 + 8);
                      if (v161 == 7)
                      {
                        v162 = *(int **)v158;
                        if ((v159 & 0x80u) == 0)
                          v162 = (int *)(v149 + 24 * v100);
                        v163 = *v162;
                        v164 = *(int *)((char *)v162 + 3);
                        if (v163 == 1130321247 && v164 == 1599095107)
                        {
                          *((_DWORD *)v56 + 78) = v100;
                          v56[316] = 1;
                          ++v100;
                          continue;
                        }
                      }
                      v166 = (int *)(v149 + 24 * v100);
                      if ((char)v159 < 0)
                      {
                        v166 = *(int **)v158;
                        if (*(_QWORD *)(v158 + 8) < 7uLL)
                          goto LABEL_374;
                      }
                      else if (v159 < 7)
                      {
                        goto LABEL_374;
                      }
                      v167 = *v166;
                      v168 = *(int *)((char *)v166 + 3);
                      if (v167 == 1314870623 && v168 == 942691406)
                      {
                        *((_DWORD *)v56 + 86) = v100;
                        v56[348] = 1;
                        v159 = *(unsigned __int8 *)(v158 + 23);
                        v160 = *(_BYTE *)(v158 + 23);
                        if (v160 < 0)
                          goto LABEL_402;
LABEL_375:
                        if (v159 <= 4
                          || (*(_DWORD *)v158 == 1281977941 ? (v170 = *(_BYTE *)(v158 + 4) == 77) : (v170 = 0),
                              !v170
                           && (v159 < 6
                            || (*(_DWORD *)v158 == 1348425055
                              ? (v171 = *(unsigned __int16 *)(v158 + 4) == 17746)
                              : (v171 = 0),
                                !v171)))
                          && (*(_DWORD *)v158 == 1314870623 ? (v172 = *(_BYTE *)(v158 + 4) == 84) : (v172 = 0), !v172))
                        {
                          v384 = v160;
                          __s1 = (const void **)v158;
                          v173 = 0;
                          while (1)
                          {
                            v174 = strlen(off_1E3D3A740[v173]);
                            if (v174 == -1)
                              break;
                            v175 = v174;
                            if (v159 >= v174)
                              v176 = v174;
                            else
                              v176 = v159;
                            v177 = memcmp(__s1, off_1E3D3A740[v173], v176);
                            if (v175 == v159 && v177 == 0)
                              goto LABEL_433;
                            if (++v173 == 100)
                              goto LABEL_426;
                          }
LABEL_765:
                          sub_19C2E3454();
                        }
                      }
                      else
                      {
LABEL_374:
                        if ((v159 & 0x80) == 0)
                          goto LABEL_375;
LABEL_402:
                        v179 = *(int **)v158;
                        v180 = *(_QWORD *)(v158 + 8);
                        if (v180 <= 4
                          || (*v179 == 1281977941 ? (v181 = *((_BYTE *)v179 + 4) == 77) : (v181 = 0),
                              !v181
                           && (v180 < 6
                            || (*v179 == 1348425055 ? (v182 = *((unsigned __int16 *)v179 + 2) == 17746) : (v182 = 0),
                                !v182)))
                          && (*v179 == 1314870623 ? (v183 = *((_BYTE *)v179 + 4) == 84) : (v183 = 0), !v183))
                        {
                          v392 = *(int **)v158;
                          v384 = v160;
                          __s1 = (const void **)v158;
                          v184 = 0;
                          while (1)
                          {
                            v185 = strlen(off_1E3D3A740[v184]);
                            if (v185 == -1)
                              goto LABEL_765;
                            v186 = v185;
                            v187 = v180 >= v185 ? v185 : v180;
                            if (!memcmp(v392, off_1E3D3A740[v184], v187) && v180 == v186)
                              break;
                            if (++v184 == 100)
                            {
LABEL_426:
                              if (v384 < 0)
                              {
                                v191 = 0;
                                v193 = *__s1;
                                v192 = __s1[1];
                                v91 = (void **)(v56 + 320);
                                while (1)
                                {
                                  v194 = strlen(off_1E3D3AA60[v191]);
                                  if ((unint64_t)v192 >= v194 && !memcmp(v193, off_1E3D3AA60[v191], v194))
                                    break;
                                  if (++v191 == 29)
                                    goto LABEL_327;
                                }
                              }
                              else
                              {
                                v189 = 0;
                                v91 = (void **)(v56 + 320);
                                while (1)
                                {
                                  v190 = strlen(off_1E3D3AA60[v189]);
                                  if (v190 <= v159 && !memcmp(__s1, off_1E3D3AA60[v189], v190))
                                    break;
                                  if (++v189 == 29)
                                    goto LABEL_327;
                                }
                              }
                              sub_19C357A04(v403, v100, v100);
LABEL_327:
                              ++v100;
                              goto LABEL_328;
                            }
                          }
LABEL_433:
                          v91 = (void **)(v56 + 320);
                          v147 = (char *)*v386;
                          v148 = ((unint64_t)v100 >> 3) & 0x1FFFFFF8;
LABEL_333:
                          *(_QWORD *)&v147[v148] |= 1 << v100++;
                          continue;
                        }
                      }
                      v91 = (void **)(v56 + 320);
                      goto LABEL_332;
                    }
                    break;
                  }
                  v195 = 0;
                  *((_QWORD *)v56 + 3) = &off_1E3D35858;
                  *(_OWORD *)(v56 + 360) = 0u;
                  *(_OWORD *)(v56 + 376) = 0u;
                  *((_DWORD *)v56 + 98) = 1065353216;
                  while (2)
                  {
                    if ((int)sub_19C2B0120((_QWORD **)v56 + 19) <= (unint64_t)v195)
                    {
                      v405 = v56 + 24;
                      v406 = (std::__shared_weak_count *)v56;
                      v209 = (std::__shared_weak_count *)operator new(0x30uLL);
                      v210 = v209;
                      v209->__shared_owners_ = 0;
                      v209->__shared_weak_owners_ = 0;
                      v209->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D39A20;
                      v211 = &v209[1].__vftable;
                      v212 = v390;
                      v213 = v391;
                      do
                        v214 = __ldxr(v57);
                      while (__stxr(v214 + 1, v57));
                      v209[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D36DC0;
                      v209[1].__shared_owners_ = (uint64_t)(v56 + 24);
                      v209[1].__shared_weak_owners_ = (uint64_t)v56;
                      do
                        v215 = __ldxr(v57);
                      while (__stxr(v215 + 1, v57));
                      do
                        v216 = __ldaxr(v57);
                      while (__stlxr(v216 - 1, v57));
                      if (!v216)
                      {
                        (*(void (**)(char *))(*(_QWORD *)v56 + 16))(v56);
                        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v56);
                      }
                      v217 = v408;
                      v407 = v211;
                      v408 = v210;
                      if (v217)
                      {
                        p_shared_owners = (unint64_t *)&v217->__shared_owners_;
                        do
                          v219 = __ldaxr(p_shared_owners);
                        while (__stlxr(v219 - 1, p_shared_owners));
                        if (!v219)
                        {
                          ((void (*)(std::__shared_weak_count *))v217->__on_zero_shared)(v217);
                          std::__shared_weak_count::__release_weak(v217);
                        }
                      }
                      v220 = v406;
                      if (v406)
                      {
                        v221 = &v406->__shared_owners_;
                        do
                          v222 = __ldxr((unint64_t *)v221);
                        while (__stxr(v222 + 1, (unint64_t *)v221));
                      }
                      v223 = *(std::__shared_weak_count **)(v399 + 48);
                      *(_QWORD *)(v399 + 40) = v405;
                      *(_QWORD *)(v399 + 48) = v220;
                      if (v223)
                      {
                        v224 = (unint64_t *)&v223->__shared_owners_;
                        do
                          v225 = __ldaxr(v224);
                        while (__stlxr(v225 - 1, v224));
                        if (!v225)
                        {
                          ((void (*)(std::__shared_weak_count *))v223->__on_zero_shared)(v223);
                          std::__shared_weak_count::__release_weak(v223);
                        }
                      }
                      if (v406)
                      {
                        v226 = &v406->__shared_owners_;
                        do
                          v227 = __ldaxr((unint64_t *)v226);
                        while (__stlxr(v227 - 1, (unint64_t *)v226));
                        if (!v227)
                        {
                          ((void (*)(std::__shared_weak_count *))v406->__on_zero_shared)(v406);
                          std::__shared_weak_count::__release_weak(v406);
                        }
                      }
                      goto LABEL_710;
                    }
                    v196 = *((_QWORD *)v56 + 4);
                    v197 = *((_QWORD *)v56 + 35);
                    if (v197)
                    {
                      v198 = (uint8x8_t)vcnt_s8((int8x8_t)v197);
                      v198.i16[0] = vaddlv_u8(v198);
                      if (v198.u32[0] > 1uLL)
                      {
                        v199 = v195;
                        if (v197 <= v195)
                          v199 = v195 % v197;
                      }
                      else
                      {
                        v199 = ((_DWORD)v197 - 1) & v195;
                      }
                      v200 = *(uint64_t ***)(*(_QWORD *)v403 + 8 * v199);
                      if (v200)
                      {
                        v201 = *v200;
                        if (v201)
                        {
                          if (v198.u32[0] < 2uLL)
                          {
                            v202 = v197 - 1;
                            while (1)
                            {
                              v204 = v201[1];
                              if (v204 == v195)
                              {
                                if (*((_DWORD *)v201 + 4) == v195)
                                  goto LABEL_463;
                              }
                              else if ((v204 & v202) != v199)
                              {
                                goto LABEL_464;
                              }
                              v201 = (uint64_t *)*v201;
                              if (!v201)
                                goto LABEL_464;
                            }
                          }
                          do
                          {
                            v203 = v201[1];
                            if (v203 == v195)
                            {
                              if (*((_DWORD *)v201 + 4) == v195)
                              {
LABEL_463:
                                sub_19C357A04((float *)v56 + 90, v195, v195);
                                break;
                              }
                            }
                            else
                            {
                              if (v203 >= v197)
                                v203 %= v197;
                              if (v203 != v199)
                                break;
                            }
                            v201 = (uint64_t *)*v201;
                          }
                          while (v201);
                        }
                      }
                    }
LABEL_464:
                    v205 = (unsigned __int16 *)(v196 + 24 * v195);
                    if (*((char *)v205 + 23) < 0)
                    {
                      v205 = *(unsigned __int16 **)v205;
                      if (*(_QWORD *)(v196 + 24 * v195 + 8) < 3uLL)
                      {
LABEL_474:
                        if (*((_DWORD *)v56 + 26) == v195)
                          sub_19C357A04((float *)v56 + 90, v195, v195);
                        ++v195;
                        continue;
                      }
                    }
                    else if (*((unsigned __int8 *)v205 + 23) < 3uLL)
                    {
                      goto LABEL_474;
                    }
                    break;
                  }
                  v206 = *v205;
                  v207 = *((unsigned __int8 *)v205 + 2);
                  if (v206 == 38626 && v207 == 129)
                    sub_19C357A04((float *)v56 + 90, v195, v195);
                  goto LABEL_474;
                }
                v66 = sub_19C2B0400((_QWORD **)v56 + 19, v64);
                v68 = v67;
                if (v67 > 0x7FFFFFFFFFFFFFF7)
                  sub_19C2A1A54();
                v69 = v66;
                if (v67 >= 0x17)
                  break;
                *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v67;
                v70 = &__dst;
                if (v67)
                  goto LABEL_117;
LABEL_118:
                v70->__r_.__value_.__s.__data_[v68] = 0;
                v73 = *((_QWORD *)v56 + 5);
                if (v73 >= *((_QWORD *)v56 + 6))
                {
                  v75 = sub_19C318C78((char **)v56 + 4, (uint64_t)&__dst);
                }
                else
                {
                  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                  {
                    sub_19C2B5238(*((_BYTE **)v56 + 5), __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
                  }
                  else
                  {
                    v74 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
                    *(_QWORD *)(v73 + 16) = *((_QWORD *)&__dst.__r_.__value_.__l + 2);
                    *(_OWORD *)v73 = v74;
                  }
                  v75 = (char *)(v73 + 24);
                  *((_QWORD *)v56 + 5) = v73 + 24;
                }
                *((_QWORD *)v56 + 5) = v75;
                if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v76 = &__dst;
                else
                  v76 = (std::string *)__dst.__r_.__value_.__r.__words[0];
                v77 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
                if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  v77 = __dst.__r_.__value_.__l.__size_;
                if (v77)
                {
                  while (1)
                  {
                    if (v76->__r_.__value_.__s.__data_[0] == 226 && v77 != 1)
                    {
                      v79 = v76->__r_.__value_.__s.__data_[1] != 150 || v77 == 2;
                      if (!v79 && v76->__r_.__value_.__s.__data_[2] == 129)
                        break;
                    }
                    v76 = (std::string *)((char *)v76 + 1);
                    if (!--v77)
                      goto LABEL_130;
                  }
                  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"▁";
                  __p.__r_.__value_.__l.__size_ = (std::string::size_type)"";
                  sub_19C357E60((unint64_t)v416, (uint64_t)&__dst, (uint64_t *)&__p, (unint64_t)"", "", (char *)v76, &v76->__r_.__value_.__s.__data_[3], (unint64_t)"", "");
                }
                else
                {
LABEL_130:
                  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                  {
                    sub_19C2B5238(v416, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
                  }
                  else
                  {
                    *(_OWORD *)v416 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
                    v417[0] = (void *)__dst.__r_.__value_.__r.__words[2];
                  }
                }
                sub_19C3E3260(&theDict, (uint64_t)v416, *((_DWORD *)v56 + 22));
                v80 = *((_QWORD *)v56 + 8);
                if (v80 < *((_QWORD *)v56 + 9))
                {
                  v81 = *(_OWORD *)&theDict.__r_.__value_.__l.__data_;
                  *(_QWORD *)(v80 + 16) = *((_QWORD *)&theDict.__r_.__value_.__l + 2);
                  *(_OWORD *)v80 = v81;
                  memset(&theDict, 0, sizeof(theDict));
                  *((_QWORD *)v56 + 8) = v80 + 24;
                  if ((SHIBYTE(v417[0]) & 0x80000000) == 0)
                    goto LABEL_149;
LABEL_146:
                  operator delete((void *)v416[0]);
                  goto LABEL_149;
                }
                v82 = sub_19C307C78((void **)v56 + 7, (uint64_t)&theDict);
                v83 = SHIBYTE(theDict.__r_.__value_.__r.__words[2]);
                *((_QWORD *)v56 + 8) = v82;
                if (v83 < 0)
                {
                  operator delete(theDict.__r_.__value_.__l.__data_);
                  if (SHIBYTE(v417[0]) < 0)
                    goto LABEL_146;
                }
                else if (SHIBYTE(v417[0]) < 0)
                {
                  goto LABEL_146;
                }
LABEL_149:
                v84 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
                v85 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
                if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  v84 = __dst.__r_.__value_.__l.__size_;
                switch(v84)
                {
                  case 3uLL:
                    v86 = (std::string *)__dst.__r_.__value_.__r.__words[0];
                    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v86 = &__dst;
                    if (LOWORD(v86->__r_.__value_.__l.__data_) == 38626
                      && v86->__r_.__value_.__s.__data_[2] == 129)
                    {
                      *((_DWORD *)v56 + 24) = v64;
                    }
                    else if (LOWORD(v86->__r_.__value_.__l.__data_) == 29500 && v86->__r_.__value_.__s.__data_[2] == 62)
                    {
                      *((_DWORD *)v56 + 25) = v64;
                    }
                    break;
                  case 4uLL:
                    v86 = (std::string *)__dst.__r_.__value_.__r.__words[0];
                    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v86 = &__dst;
                    if (LODWORD(v86->__r_.__value_.__l.__data_) == 1047736124)
                      *((_DWORD *)v56 + 26) = v64;
                    break;
                  case 5uLL:
                    v86 = (std::string *)__dst.__r_.__value_.__r.__words[0];
                    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v86 = &__dst;
                    if (LODWORD(v86->__r_.__value_.__l.__data_) == 1802401084
                      && v86->__r_.__value_.__s.__data_[4] == 62)
                    {
                      *v400 = v64;
                    }
                    else if (LODWORD(v86->__r_.__value_.__l.__data_) == 1684107324
                           && v86->__r_.__value_.__s.__data_[4] == 62)
                    {
                      *((_DWORD *)v56 + 27) = v64;
                    }
                    break;
                  default:
                    v86 = (std::string *)__dst.__r_.__value_.__r.__words[0];
                    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v86 = &__dst;
                    break;
                }
                if ((*(_DWORD *)(v65 + 4 * v86->__r_.__value_.__s.__data_[0] + 60) & 0x400) != 0)
                {
                  sub_19C357A04(v396, v64, v64);
                  v85 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
                }
                if (v85 < 0)
                  operator delete(__dst.__r_.__value_.__l.__data_);
                v64 = (v64 + 1);
              }
              v71 = (v67 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v67 | 7) != 0x17)
                v71 = v67 | 7;
              v72 = v71 + 1;
              v70 = (std::string *)operator new(v71 + 1);
              __dst.__r_.__value_.__l.__size_ = v68;
              __dst.__r_.__value_.__r.__words[2] = v72 | 0x8000000000000000;
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v70;
LABEL_117:
              memmove(v70, v69, v68);
              goto LABEL_118;
            }
            sub_19C348B90((uint64_t)&v405, *(CFTypeRef *)a2, 54);
            if (v405 == v406)
              v385 = 0;
            else
              v385 = *(CFDictionaryRef **)v405;
            v101 = *(CFTypeRef **)v409;
            v102 = (char *)operator new(0x1F0uLL);
            *((_QWORD *)v102 + 1) = 0;
            v103 = (unint64_t *)(v102 + 8);
            *((_QWORD *)v102 + 2) = 0;
            *(_QWORD *)v102 = &off_1E3D39780;
            sub_19C394110(&cf, (CFDictionaryRef)*v101);
            *((_OWORD *)v102 + 2) = 0u;
            *((_QWORD *)v102 + 3) = off_1E3D36050;
            *((_OWORD *)v102 + 3) = 0u;
            *((_OWORD *)v102 + 4) = 0u;
            v104 = *(char *)(v16 + 23);
            if (v104 >= 0)
              v105 = (const UInt8 *)v16;
            else
              v105 = *(const UInt8 **)v16;
            if (v104 >= 0)
              v106 = *(unsigned __int8 *)(v16 + 23);
            else
              v106 = *(_QWORD *)(v16 + 8);
            v107 = CFStringCreateWithBytes(0, v105, v106, 0x8000100u, 0);
            if (!v107)
            {
              v374 = __cxa_allocate_exception(0x10uLL);
              MEMORY[0x1A1AD3154](v374, "Could not construct");
              __cxa_throw(v374, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
            }
            *((_QWORD *)v102 + 10) = CFLocaleCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v107);
            CFRelease(v107);
            *((_OWORD *)v102 + 7) = 0u;
            *(_QWORD *)(v102 + 92) = 0;
            v401 = v102 + 92;
            *((_DWORD *)v102 + 22) = v23;
            *((_OWORD *)v102 + 8) = 0u;
            *(_QWORD *)(v102 + 100) = 0;
            *((_DWORD *)v102 + 36) = 1065353216;
            v397 = (float *)(v102 + 112);
            sub_19C2A76D0((uint64_t)(v102 + 152));
            if ((v413 & 0x80u) == 0)
              v108 = &cf;
            else
              v108 = (void *)cf;
            if ((v413 & 0x80u) == 0)
              v109 = v413;
            else
              v109 = v412;
            sub_19C2A7A6C((uint64_t)(v102 + 152), (uint64_t)v108, v109, (uint64_t *)&__dst);
            if (__dst.__r_.__value_.__r.__words[0])
            {
              v355 = __cxa_allocate_exception(0x10uLL);
              sub_19C2CD6DC((uint64_t)&__dst, &__p);
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v356 = &__p;
              else
                v356 = (std::string *)__p.__r_.__value_.__r.__words[0];
              MEMORY[0x1A1AD3154](v355, v356);
              __cxa_throw(v355, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
            }
            sub_19C2CD3C8((uint64_t *)&__dst);
            v110 = 0;
            v111 = MEMORY[0x1E0C80978];
            while (1)
            {
              if ((int)sub_19C2B0120((_QWORD **)v102 + 19) <= (unint64_t)v110)
              {
                if ((char)v413 < 0)
                  operator delete((void *)cf);
                *((_QWORD *)v102 + 3) = off_1E3D34F88;
                *((_OWORD *)v102 + 17) = 0u;
                *((_OWORD *)v102 + 18) = 0u;
                *((_DWORD *)v102 + 76) = 1065353216;
                v102[312] = 0;
                v102[316] = 0;
                v137 = (void **)(v102 + 320);
                v102[348] = 0;
                *((_QWORD *)v102 + 41) = 0;
                *((_QWORD *)v102 + 42) = 0;
                *((_QWORD *)v102 + 40) = 0;
                v102[344] = 0;
                *((_DWORD *)v102 + 88) = v39;
                v404 = (uint64_t *)(v102 + 320);
                v138 = sub_19C2B0120((_QWORD **)v102 + 19);
                v139 = v138;
                memset(&__p, 0, sizeof(__p));
                if (v138)
                {
                  if (v138 < 0)
                    sub_19C2A18E8();
                  v140 = v138;
                  v141 = (unint64_t)(v138 - 1) >> 6;
                  v142 = operator new(8 * (v141 + 1));
                  v143 = (std::string::size_type)v142;
                  __p.__r_.__value_.__l.__size_ = (int)v139;
                  __p.__r_.__value_.__r.__words[2] = v141 + 1;
                  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v142;
                  if (v139 >= 0x41)
                    v144 = v141;
                  else
                    v144 = 0;
                  v142[v144] = 0;
                  if (v139 >= 0x40)
                    bzero(v142, 8 * (v140 >> 6));
                  if ((v140 & 0x3F) != 0)
                    *(_QWORD *)(v143 + 8 * ((unint64_t)(int)v139 >> 6)) &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v140 & 0x3F));
                  v145 = *v137;
                  if (*v137)
                  {
LABEL_320:
                    operator delete(v145);
                    *v137 = 0;
                    *((_QWORD *)v102 + 41) = 0;
                    *((_QWORD *)v102 + 42) = 0;
                    v143 = __p.__r_.__value_.__r.__words[0];
                  }
                }
                else
                {
                  v143 = 0;
                  v145 = *v137;
                  if (*v137)
                    goto LABEL_320;
                }
                v146 = 0;
                *((_QWORD *)v102 + 40) = v143;
                *(_OWORD *)(v102 + 328) = *(_OWORD *)&__p.__r_.__value_.__r.__words[1];
LABEL_503:
                while (2)
                {
                  while (2)
                  {
                    if ((int)sub_19C2B0120((_QWORD **)v102 + 19) <= (unint64_t)v146)
                    {
                      *((_QWORD *)v102 + 3) = &off_1E3D35930;
                      v102[360] = 0;
                      v102[384] = 0;
                      v388 = (void **)(v102 + 392);
                      v102[415] = 1;
                      *((_WORD *)v102 + 196) = 46;
                      v276 = 0uLL;
                      *((_OWORD *)v102 + 26) = 0u;
                      *((_OWORD *)v102 + 27) = 0u;
                      *((_DWORD *)v102 + 112) = 1065353216;
                      *(_OWORD *)(v102 + 456) = 0u;
                      *(_OWORD *)(v102 + 472) = 0u;
                      *((_DWORD *)v102 + 122) = 1065353216;
                      if (v385)
                      {
                        v277 = (const __CFURL *)CFDictionaryGetValue(*v385, CFSTR("URL"));
                        v278 = (const __CFDictionary *)sub_19C2E19B8(v277, 0);
                        v279 = v278;
                        if (v278)
                        {
                          if (CFDictionaryContainsKey(v278, CFSTR("PeriodSymbol")))
                          {
                            v280 = (const __CFString *)CFDictionaryGetValue(v279, CFSTR("PeriodSymbol"));
                            sub_19C29CEF8(v280, &__p);
                            if (v102[415] < 0)
                              operator delete(*v388);
                            *(_OWORD *)v388 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
                            *((_QWORD *)v102 + 51) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
                          }
                          if (CFDictionaryContainsKey(v279, CFSTR("KeepWordsTitleCaseV1")))
                          {
                            v281 = (const __CFArray *)CFDictionaryGetValue(v279, CFSTR("KeepWordsTitleCaseV1"));
                            sub_19C3FC3FC(&__p, v281);
                            __s1b = __p.__r_.__value_.__l.__size_;
                            v282 = __p.__r_.__value_.__l.__size_;
                            v283 = (void **)__p.__r_.__value_.__r.__words[0];
                          }
                          else
                          {
                            v283 = 0;
                            v282 = 0;
                            __s1b = 0;
                          }
                          if (CFDictionaryContainsKey(v279, CFSTR("KeepWordsTitleCaseV2")))
                          {
                            v286 = (const __CFArray *)CFDictionaryGetValue(v279, CFSTR("KeepWordsTitleCaseV2"));
                            sub_19C3FC3FC(&__p, v286);
                            v398 = __p.__r_.__value_.__l.__size_;
                            v285 = __p.__r_.__value_.__l.__size_;
                            v284 = (void **)__p.__r_.__value_.__r.__words[0];
                          }
                          else
                          {
                            v284 = 0;
                            v285 = 0;
                            v398 = 0;
                          }
                          if (CFDictionaryContainsKey(v279, CFSTR("KeepWordsPossessiveForm")))
                          {
                            v287 = (const __CFArray *)CFDictionaryGetValue(v279, CFSTR("KeepWordsPossessiveForm"));
                            sub_19C3FC3FC(&__p, v287);
                            v288 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
                          }
                          else
                          {
                            v288 = 0uLL;
                          }
                          v402 = v288;
                          CFRelease(v279);
LABEL_632:
                          v289 = *((_QWORD *)&v402 + 1);
                          if (v39 == 2)
                          {
                            if (v284 != (void **)v285)
                            {
                              v291 = (uint64_t)v284;
                              do
                              {
                                sub_19C30CC34((uint64_t)(v102 + 416), v291, v291);
                                v291 += 24;
                              }
                              while (v291 != v285);
                            }
                            *((_BYTE *)&__p.__r_.__value_.__s + 23) = 2;
                            strcpy((char *)&__p, "'s");
                            v292 = std::string::insert(&__p, 0, " ", 1uLL);
                            v293 = v292->__r_.__value_.__r.__words[0];
                            __dst.__r_.__value_.__r.__words[0] = v292->__r_.__value_.__l.__size_;
                            *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v292->__r_.__value_.__r.__words[1] + 7);
                            v294 = HIBYTE(v292->__r_.__value_.__r.__words[2]);
                            v292->__r_.__value_.__l.__size_ = 0;
                            v292->__r_.__value_.__r.__words[2] = 0;
                            v292->__r_.__value_.__r.__words[0] = 0;
                            if (v102[384])
                            {
                              if (v102[383] < 0)
                                operator delete(*((void **)v102 + 45));
                              v295 = __dst.__r_.__value_.__r.__words[0];
                              *((_QWORD *)v102 + 45) = v293;
                              *((_QWORD *)v102 + 46) = v295;
                              *(_QWORD *)(v102 + 375) = *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words
                                                                                  + 7);
                              v102[383] = v294;
                            }
                            else
                            {
                              v296 = __dst.__r_.__value_.__r.__words[0];
                              *((_QWORD *)v102 + 45) = v293;
                              *((_QWORD *)v102 + 46) = v296;
                              *(_QWORD *)(v102 + 375) = *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words
                                                                                  + 7);
                              v102[383] = v294;
                              v102[384] = 1;
                            }
                            v213 = v391;
                            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                              operator delete(__p.__r_.__value_.__l.__data_);
                            for (i = v402; i != *((_QWORD *)&v402 + 1); i += 24)
                              sub_19C30CC34((uint64_t)(v102 + 456), i, i);
                          }
                          else
                          {
                            if (v39 != 1)
                              __assert_rtn("CoreLMSuffixCoder", "CoreLMSuffixCoder.cpp", 63, "false");
                            v213 = v391;
                            if (v283 != (void **)v282)
                            {
                              v290 = (uint64_t)v283;
                              do
                              {
                                sub_19C30CC34((uint64_t)(v102 + 416), v290, v290);
                                v290 += 24;
                              }
                              while (v290 != v282);
                            }
                          }
                          v298 = (uint64_t *)*((_QWORD *)v102 + 36);
                          if (v298)
                          {
                            v299 = *v404;
                            do
                            {
                              *(_QWORD *)(v299 + (((unint64_t)*((unsigned int *)v298 + 4) >> 3) & 0x1FFFFFF8)) |= 1 << *((_DWORD *)v298 + 4);
                              v298 = (uint64_t *)*v298;
                            }
                            while (v298);
                          }
                          if ((_QWORD)v402)
                          {
                            while (v289 != (_QWORD)v402)
                            {
                              if (*(char *)(v289 - 1) < 0)
                                operator delete(*(void **)(v289 - 24));
                              v289 -= 24;
                            }
                            operator delete((void *)v402);
                            if (!v284)
                              goto LABEL_667;
                          }
                          else if (!v284)
                          {
LABEL_667:
                            v212 = v390;
                            if (v283)
                            {
                              for (j = (void **)__s1b; j != v283; j -= 3)
                              {
                                if (*((char *)j - 1) < 0)
                                  operator delete(*(j - 3));
                              }
                              operator delete(v283);
                            }
                            v414 = v102 + 24;
                            v415 = (std::__shared_weak_count *)v102;
                            v302 = (std::__shared_weak_count *)operator new(0x30uLL);
                            v303 = v302;
                            v302->__shared_owners_ = 0;
                            v302->__shared_weak_owners_ = 0;
                            v302->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D39A58;
                            v304 = &v302[1].__vftable;
                            do
                              v305 = __ldxr(v103);
                            while (__stxr(v305 + 1, v103));
                            v302[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D36DF0;
                            v302[1].__shared_owners_ = (uint64_t)(v102 + 24);
                            v302[1].__shared_weak_owners_ = (uint64_t)v102;
                            do
                              v306 = __ldxr(v103);
                            while (__stxr(v306 + 1, v103));
                            do
                              v307 = __ldaxr(v103);
                            while (__stlxr(v307 - 1, v103));
                            if (!v307)
                            {
                              (*(void (**)(char *))(*(_QWORD *)v102 + 16))(v102);
                              std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v102);
                            }
                            v308 = v408;
                            v407 = v304;
                            v408 = v303;
                            if (v308)
                            {
                              v309 = (unint64_t *)&v308->__shared_owners_;
                              do
                                v310 = __ldaxr(v309);
                              while (__stlxr(v310 - 1, v309));
                              if (!v310)
                              {
                                ((void (*)(std::__shared_weak_count *))v308->__on_zero_shared)(v308);
                                std::__shared_weak_count::__release_weak(v308);
                              }
                            }
                            v312 = v414;
                            v311 = v415;
                            if (v415)
                            {
                              v313 = (unint64_t *)&v415->__shared_owners_;
                              do
                                v314 = __ldxr(v313);
                              while (__stxr(v314 + 1, v313));
                            }
                            v315 = *(std::__shared_weak_count **)(v399 + 48);
                            *(_QWORD *)(v399 + 40) = v312;
                            *(_QWORD *)(v399 + 48) = v311;
                            if (v315)
                            {
                              v316 = (unint64_t *)&v315->__shared_owners_;
                              do
                                v317 = __ldaxr(v316);
                              while (__stlxr(v317 - 1, v316));
                              if (!v317)
                              {
                                ((void (*)(std::__shared_weak_count *))v315->__on_zero_shared)(v315);
                                std::__shared_weak_count::__release_weak(v315);
                              }
                            }
                            v318 = v415;
                            if (v415)
                            {
                              v319 = (unint64_t *)&v415->__shared_owners_;
                              do
                                v320 = __ldaxr(v319);
                              while (__stlxr(v320 - 1, v319));
                              if (!v320)
                              {
                                ((void (*)(std::__shared_weak_count *))v318->__on_zero_shared)(v318);
                                std::__shared_weak_count::__release_weak(v318);
                              }
                            }
                            v321 = (std::__shared_weak_count *)v405;
                            if (v405)
                            {
                              v322 = v406;
                              v323 = v405;
                              if (v406 != v405)
                              {
                                do
                                {
                                  shared_weak_owners = (std::__shared_weak_count *)v322[-1].__shared_weak_owners_;
                                  if (shared_weak_owners)
                                  {
                                    v325 = (unint64_t *)&shared_weak_owners->__shared_owners_;
                                    do
                                      v326 = __ldaxr(v325);
                                    while (__stlxr(v326 - 1, v325));
                                    if (!v326)
                                    {
                                      ((void (*)(std::__shared_weak_count *))shared_weak_owners->__on_zero_shared)(shared_weak_owners);
                                      std::__shared_weak_count::__release_weak(shared_weak_owners);
                                    }
                                  }
                                  v322 = (std::__shared_weak_count *)((char *)v322 - 16);
                                }
                                while (v322 != v321);
                                v323 = v405;
                              }
                              v406 = v321;
                              operator delete(v323);
                            }
LABEL_710:
                            if (*(_QWORD *)(v212 + 72))
                            {
                              v327 = operator new();
                              sub_19C3FC9A4(v327, *(_QWORD *)(v212 + 72));
                            }
                            else
                            {
                              v327 = 0;
                            }
                            v328 = 256;
                            switch(v213)
                            {
                              case 0:
                                goto LABEL_719;
                              case 1:
                                goto LABEL_717;
                              case 2:
                                v328 = 128;
                                goto LABEL_717;
                              case 3:
                                v328 = 64;
                                goto LABEL_717;
                              case 4:
                                v328 = 32;
LABEL_717:
                                v329 = (const __CFString *)kLMLanguageModelMontrealFullCacheSize;
                                LODWORD(theDict.__r_.__value_.__l.__data_) = v328;
                                v330 = (__CFString *)CFNumberCreate(0, kCFNumberIntType, &theDict);
                                __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v330;
                                if (!v330)
                                {
                                  v372 = __cxa_allocate_exception(0x10uLL);
                                  MEMORY[0x1A1AD3154](v372, "Could not construct");
                                  __cxa_throw(v372, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
                                }
                                sub_19C2997C4(v327, v329, v330, 0);
                                CFRelease(v330);
LABEL_719:
                                v331 = *(CFTypeRef **)v409;
                                v332 = *(_QWORD *)(v399 + 40);
                                v333 = *(_QWORD *)(v399 + 48);
                                if (v333)
                                {
                                  v334 = (unint64_t *)(v333 + 8);
                                  do
                                    v335 = __ldxr(v334);
                                  while (__stxr(v335 + 1, v334));
                                }
                                v336 = *(char *)(v399 + 23);
                                if (v336 >= 0)
                                  v337 = (const UInt8 *)v399;
                                else
                                  v337 = *(const UInt8 **)v399;
                                if (v336 >= 0)
                                  v338 = *(unsigned __int8 *)(v399 + 23);
                                else
                                  v338 = *(_QWORD *)(v399 + 8);
                                v339 = CFStringCreateWithBytes(0, v337, v338, 0x8000100u, 0);
                                v416[0] = v339;
                                if (v339)
                                {
                                  cf = CFLocaleCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v339);
                                  if (sub_19C3E3528(*v331))
                                  {
                                    v340 = *((char *)v389 + 23);
                                    if (v340 >= 0)
                                      v341 = *((unsigned __int8 *)v389 + 23);
                                    else
                                      v341 = (size_t)v389[1];
                                    if (v341 != strlen((const char *)language_modeling::v1::kLanguageModelTypeToucan)
                                      || (v340 >= 0 ? (v342 = v389) : (v342 = *v389),
                                          memcmp(v342, (const void *)language_modeling::v1::kLanguageModelTypeToucan, v341)))
                                    {
                                      v343 = operator new();
                                      __p.__r_.__value_.__r.__words[0] = v332;
                                      __p.__r_.__value_.__l.__size_ = v333;
                                      if (v333)
                                      {
                                        v344 = (unint64_t *)(v333 + 8);
                                        do
                                          v345 = __ldxr(v344);
                                        while (__stxr(v345 + 1, v344));
                                      }
                                      sub_19C436020(v343, v331, v327, &__p, 0);
                                    }
                                    if (qword_1EDB96E18 != -1)
                                      dispatch_once(&qword_1EDB96E18, &unk_1E3D3ACD0);
                                    if (byte_1EE41C018)
                                    {
                                      v349 = operator new();
                                      theDict.__r_.__value_.__r.__words[0] = v332;
                                      theDict.__r_.__value_.__l.__size_ = v333;
                                      if (v333)
                                      {
                                        v350 = (unint64_t *)(v333 + 8);
                                        do
                                          v351 = __ldxr(v350);
                                        while (__stxr(v351 + 1, v350));
                                        __p.__r_.__value_.__r.__words[0] = v332;
                                        __p.__r_.__value_.__l.__size_ = v333;
                                        do
                                          v352 = __ldxr(v350);
                                        while (__stxr(v352 + 1, v350));
                                      }
                                      else
                                      {
                                        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v332;
                                      }
                                      sub_19C436020(v349, v331, v327, &__p, 1);
                                    }
                                    __assert_rtn("makeNeuralModel", "ToucanResourceLoader.cpp", 51, "isH13ANEPresent()");
                                  }
                                  v346 = operator new(0x20uLL);
                                  v346[1] = 0;
                                  v346[2] = 0;
                                  *v346 = &off_1E3D399E8;
                                  v346[3] = &off_1E3D36BE8;
                                  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)(v346 + 3);
                                  __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v346;
                                  v347 = operator new();
                                  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
                                  v348 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
                                  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = 0uLL;
                                  *(_OWORD *)&theDict.__r_.__value_.__l.__data_ = 0uLL;
                                  sub_19C3135D4(v347, v331, v348, *((uint64_t *)&v348 + 1), &theDict, v327);
                                }
                                v371 = __cxa_allocate_exception(0x10uLL);
                                MEMORY[0x1A1AD3154](v371, "Could not construct");
                                __cxa_throw(v371, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
                              default:
                                __assert_rtn("fullCacheCategoryToSize", "ToucanResourceLoader.cpp", 106, "false && \"unknown fullCacheSizeCategory\"");
                            }
                          }
                          for (k = (void **)v398; k != v284; k -= 3)
                          {
                            if (*((char *)k - 1) < 0)
                              operator delete(*(k - 3));
                          }
                          operator delete(v284);
                          goto LABEL_667;
                        }
                        v284 = 0;
                        v283 = 0;
                        v282 = 0;
                        v285 = 0;
                        *(_QWORD *)&v276 = 0;
                        v402 = 0u;
                      }
                      else
                      {
                        v402 = 0uLL;
                        v284 = 0;
                        v283 = 0;
                        v282 = 0;
                        v285 = 0;
                      }
                      __s1b = v276;
                      v398 = v276;
                      goto LABEL_632;
                    }
                    if (*((_DWORD *)v102 + 25) == v146 || *v401 == v146 || *((_DWORD *)v102 + 27) == v146)
                    {
LABEL_507:
                      v228 = *v404;
                      v229 = ((unint64_t)v146 >> 3) & 0x1FFFFFF8;
                      goto LABEL_508;
                    }
                    v231 = *((_QWORD *)v102 + 15);
                    if (v231)
                    {
                      v232 = (uint8x8_t)vcnt_s8((int8x8_t)v231);
                      v232.i16[0] = vaddlv_u8(v232);
                      if (v232.u32[0] > 1uLL)
                      {
                        v233 = v146;
                        if (v231 <= v146)
                          v233 = v146 % v231;
                      }
                      else
                      {
                        v233 = ((_DWORD)v231 - 1) & v146;
                      }
                      v234 = *(uint64_t ***)(*(_QWORD *)v397 + 8 * v233);
                      if (v234)
                      {
                        v235 = *v234;
                        if (v235)
                        {
                          if (v232.u32[0] < 2uLL)
                          {
                            v236 = v231 - 1;
                            while (1)
                            {
                              v238 = v235[1];
                              if (v238 == v146)
                              {
                                if (*((_DWORD *)v235 + 4) == v146)
                                  goto LABEL_507;
                              }
                              else if ((v238 & v236) != v233)
                              {
                                goto LABEL_529;
                              }
                              v235 = (uint64_t *)*v235;
                              if (!v235)
                                goto LABEL_529;
                            }
                          }
                          do
                          {
                            v237 = v235[1];
                            if (v237 == v146)
                            {
                              if (*((_DWORD *)v235 + 4) == v146)
                                goto LABEL_507;
                            }
                            else
                            {
                              if (v237 >= v231)
                                v237 %= v231;
                              if (v237 != v233)
                                break;
                            }
                            v235 = (uint64_t *)*v235;
                          }
                          while (v235);
                        }
                      }
                    }
LABEL_529:
                    if (*((_DWORD *)v102 + 26) == v146 || *((_DWORD *)v102 + 24) == v146)
                      goto LABEL_502;
                    v230 = *((_QWORD *)v102 + 4);
                    v239 = v230 + 24 * v146;
                    v240 = *(unsigned __int8 *)(v239 + 23);
                    v241 = v240;
                    if ((v240 & 0x80u) == 0)
                      v242 = *(unsigned __int8 *)(v239 + 23);
                    else
                      v242 = *(_QWORD *)(v239 + 8);
                    if (v242 == 7)
                    {
                      v243 = *(int **)v239;
                      if ((v240 & 0x80u) == 0)
                        v243 = (int *)(v230 + 24 * v146);
                      v244 = *v243;
                      v245 = *(int *)((char *)v243 + 3);
                      if (v244 == 1130321247 && v245 == 1599095107)
                      {
                        *((_DWORD *)v102 + 78) = v146;
                        v102[316] = 1;
                        ++v146;
                        continue;
                      }
                    }
                    break;
                  }
                  v247 = (int *)(v230 + 24 * v146);
                  if ((char)v240 < 0)
                  {
                    v247 = *(int **)v239;
                    if (*(_QWORD *)(v239 + 8) < 7uLL)
                      goto LABEL_549;
                  }
                  else if (v240 < 7)
                  {
                    goto LABEL_549;
                  }
                  v248 = *v247;
                  v249 = *(int *)((char *)v247 + 3);
                  if (v248 == 1314870623 && v249 == 942691406)
                  {
                    *((_DWORD *)v102 + 86) = v146;
                    v102[348] = 1;
                    v240 = *(unsigned __int8 *)(v239 + 23);
                    v241 = *(_BYTE *)(v239 + 23);
                    if ((v241 & 0x80) == 0)
                      goto LABEL_550;
                  }
                  else
                  {
LABEL_549:
                    if ((v240 & 0x80) == 0)
                    {
LABEL_550:
                      if (v240 <= 4
                        || (*(_DWORD *)v239 == 1281977941 ? (v251 = *(_BYTE *)(v239 + 4) == 77) : (v251 = 0),
                            !v251
                         && (v240 < 6
                          || (*(_DWORD *)v239 == 1348425055
                            ? (v252 = *(unsigned __int16 *)(v239 + 4) == 17746)
                            : (v252 = 0),
                              !v252)))
                        && (*(_DWORD *)v239 == 1314870623 ? (v253 = *(_BYTE *)(v239 + 4) == 84) : (v253 = 0), !v253))
                      {
                        v383 = v241;
                        __s1a = (const void **)v239;
                        v254 = 0;
                        while (1)
                        {
                          v255 = strlen(off_1E3D3C128[v254]);
                          if (v255 == -1)
                            break;
                          v256 = v255;
                          if (v240 >= v255)
                            v257 = v255;
                          else
                            v257 = v240;
                          v258 = memcmp(__s1a, off_1E3D3C128[v254], v257);
                          if (v256 == v240 && v258 == 0)
                            goto LABEL_607;
                          if (++v254 == 100)
                            goto LABEL_601;
                        }
LABEL_766:
                        sub_19C2E3454();
                      }
                      goto LABEL_507;
                    }
                  }
                  v260 = *(int **)v239;
                  v261 = *(_QWORD *)(v239 + 8);
                  if (v261 > 4)
                  {
                    if (*v260 == 1281977941 && *((_BYTE *)v260 + 4) == 77)
                      goto LABEL_507;
                    if (v261 >= 6 && *v260 == 1348425055 && *((_WORD *)v260 + 2) == 17746)
                      goto LABEL_507;
                    if (*v260 == 1314870623 && *((_BYTE *)v260 + 4) == 84)
                      goto LABEL_507;
                  }
                  v387 = *(int **)v239;
                  v383 = v241;
                  __s1a = (const void **)v239;
                  v265 = 0;
                  while (1)
                  {
                    v266 = strlen(off_1E3D3C128[v265]);
                    if (v266 == -1)
                      goto LABEL_766;
                    v267 = v266;
                    v268 = v261 >= v266 ? v266 : v261;
                    if (!memcmp(v387, off_1E3D3C128[v265], v268) && v261 == v267)
                      break;
                    if (++v265 == 100)
                    {
LABEL_601:
                      if (v383 < 0)
                      {
                        v272 = 0;
                        v274 = *__s1a;
                        v273 = __s1a[1];
                        while (1)
                        {
                          v275 = strlen(off_1E3D3C448[v272]);
                          if ((unint64_t)v273 >= v275 && !memcmp(v274, off_1E3D3C448[v272], v275))
                            break;
                          if (++v272 == 29)
                            goto LABEL_502;
                        }
                      }
                      else
                      {
                        v270 = 0;
                        while (1)
                        {
                          v271 = strlen(off_1E3D3C448[v270]);
                          if (v271 <= v240 && !memcmp(__s1a, off_1E3D3C448[v270], v271))
                            break;
                          if (++v270 == 29)
                            goto LABEL_502;
                        }
                      }
                      sub_19C357A04((float *)v102 + 68, v146, v146);
LABEL_502:
                      ++v146;
                      goto LABEL_503;
                    }
                  }
LABEL_607:
                  v228 = *v404;
                  v229 = ((unint64_t)v146 >> 3) & 0x1FFFFFF8;
LABEL_508:
                  *(_QWORD *)(v228 + v229) |= 1 << v146++;
                  continue;
                }
              }
              v112 = sub_19C2B0400((_QWORD **)v102 + 19, v110);
              v114 = v113;
              if (v113 > 0x7FFFFFFFFFFFFFF7)
                sub_19C2A1A54();
              v115 = v112;
              if (v113 >= 0x17)
                break;
              *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v113;
              v116 = &__dst;
              if (v113)
                goto LABEL_234;
LABEL_235:
              v116->__r_.__value_.__s.__data_[v114] = 0;
              v119 = *((_QWORD *)v102 + 5);
              if (v119 >= *((_QWORD *)v102 + 6))
              {
                v121 = sub_19C318C78((char **)v102 + 4, (uint64_t)&__dst);
              }
              else
              {
                if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                {
                  sub_19C2B5238(*((_BYTE **)v102 + 5), __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
                }
                else
                {
                  v120 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
                  *(_QWORD *)(v119 + 16) = *((_QWORD *)&__dst.__r_.__value_.__l + 2);
                  *(_OWORD *)v119 = v120;
                }
                v121 = (char *)(v119 + 24);
                *((_QWORD *)v102 + 5) = v119 + 24;
              }
              *((_QWORD *)v102 + 5) = v121;
              if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v122 = &__dst;
              else
                v122 = (std::string *)__dst.__r_.__value_.__r.__words[0];
              v123 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
              if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v123 = __dst.__r_.__value_.__l.__size_;
              if (v123)
              {
                while (1)
                {
                  if (v122->__r_.__value_.__s.__data_[0] == 226 && v123 != 1)
                  {
                    v125 = v122->__r_.__value_.__s.__data_[1] != 150 || v123 == 2;
                    if (!v125 && v122->__r_.__value_.__s.__data_[2] == 129)
                      break;
                  }
                  v122 = (std::string *)((char *)v122 + 1);
                  if (!--v123)
                    goto LABEL_247;
                }
                __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"▁";
                __p.__r_.__value_.__l.__size_ = (std::string::size_type)"";
                sub_19C357E60((unint64_t)v416, (uint64_t)&__dst, (uint64_t *)&__p, (unint64_t)"", "", (char *)v122, &v122->__r_.__value_.__s.__data_[3], (unint64_t)"", "");
              }
              else
              {
LABEL_247:
                if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                {
                  sub_19C2B5238(v416, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
                }
                else
                {
                  *(_OWORD *)v416 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
                  v417[0] = (void *)__dst.__r_.__value_.__r.__words[2];
                }
              }
              sub_19C3E3260(&theDict, (uint64_t)v416, *((_DWORD *)v102 + 22));
              v126 = *((_QWORD *)v102 + 8);
              if (v126 < *((_QWORD *)v102 + 9))
              {
                v127 = *(_OWORD *)&theDict.__r_.__value_.__l.__data_;
                *(_QWORD *)(v126 + 16) = *((_QWORD *)&theDict.__r_.__value_.__l + 2);
                *(_OWORD *)v126 = v127;
                memset(&theDict, 0, sizeof(theDict));
                *((_QWORD *)v102 + 8) = v126 + 24;
                if ((SHIBYTE(v417[0]) & 0x80000000) == 0)
                  goto LABEL_266;
LABEL_263:
                operator delete((void *)v416[0]);
                goto LABEL_266;
              }
              v128 = sub_19C307C78((void **)v102 + 7, (uint64_t)&theDict);
              v129 = SHIBYTE(theDict.__r_.__value_.__r.__words[2]);
              *((_QWORD *)v102 + 8) = v128;
              if (v129 < 0)
              {
                operator delete(theDict.__r_.__value_.__l.__data_);
                if (SHIBYTE(v417[0]) < 0)
                  goto LABEL_263;
              }
              else if (SHIBYTE(v417[0]) < 0)
              {
                goto LABEL_263;
              }
LABEL_266:
              v130 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
              v131 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
              if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v130 = __dst.__r_.__value_.__l.__size_;
              switch(v130)
              {
                case 3uLL:
                  v132 = (std::string *)__dst.__r_.__value_.__r.__words[0];
                  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v132 = &__dst;
                  if (LOWORD(v132->__r_.__value_.__l.__data_) == 38626
                    && v132->__r_.__value_.__s.__data_[2] == 129)
                  {
                    *((_DWORD *)v102 + 24) = v110;
                  }
                  else if (LOWORD(v132->__r_.__value_.__l.__data_) == 29500 && v132->__r_.__value_.__s.__data_[2] == 62)
                  {
                    *((_DWORD *)v102 + 25) = v110;
                  }
                  break;
                case 4uLL:
                  v132 = (std::string *)__dst.__r_.__value_.__r.__words[0];
                  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v132 = &__dst;
                  if (LODWORD(v132->__r_.__value_.__l.__data_) == 1047736124)
                    *((_DWORD *)v102 + 26) = v110;
                  break;
                case 5uLL:
                  v132 = (std::string *)__dst.__r_.__value_.__r.__words[0];
                  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v132 = &__dst;
                  if (LODWORD(v132->__r_.__value_.__l.__data_) == 1802401084
                    && v132->__r_.__value_.__s.__data_[4] == 62)
                  {
                    *v401 = v110;
                  }
                  else if (LODWORD(v132->__r_.__value_.__l.__data_) == 1684107324
                         && v132->__r_.__value_.__s.__data_[4] == 62)
                  {
                    *((_DWORD *)v102 + 27) = v110;
                  }
                  break;
                default:
                  v132 = (std::string *)__dst.__r_.__value_.__r.__words[0];
                  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v132 = &__dst;
                  break;
              }
              if ((*(_DWORD *)(v111 + 4 * v132->__r_.__value_.__s.__data_[0] + 60) & 0x400) != 0)
              {
                sub_19C357A04(v397, v110, v110);
                v131 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
              }
              if (v131 < 0)
                operator delete(__dst.__r_.__value_.__l.__data_);
              v110 = (v110 + 1);
            }
            v117 = (v113 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v113 | 7) != 0x17)
              v117 = v113 | 7;
            v118 = v117 + 1;
            v116 = (std::string *)operator new(v117 + 1);
            __dst.__r_.__value_.__l.__size_ = v114;
            __dst.__r_.__value_.__r.__words[2] = v118 | 0x8000000000000000;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v116;
LABEL_234:
            memmove(v116, v115, v114);
            goto LABEL_235;
          }
LABEL_89:
          CFRelease(v41);
          goto LABEL_90;
        default:
          goto LABEL_768;
      }
    }
    v359 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD3154](v359, "Could not convert");
  }
  else
  {
    __p.__r_.__value_.__r.__words[0] = 0;
    v359 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD3154](v359, "Could not construct");
  }
  __cxa_throw(v359, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
}

void sub_19C3DC704(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *__p,uint64_t a60,int a61,__int16 a62,char a63)
{
  char a64;
  void *a68;

  sub_19C2B5034((uint64_t)&a68);
  if (a64 < 0)
    operator delete(__p);
  sub_19C2F5AA8(&a45);
  sub_19C2B43C8(a15);
  sub_19C2B43C8(a16);
  sub_19C2B43C8(a17);
  sub_19C2B43C8(a18);
  sub_19C2B43C8(a19);
  if (*(char *)(a32 + 23) < 0)
  {
    operator delete(*(void **)a32);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19C3DDCF8);
}

void sub_19C3DCC24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  const void *a65;
  void *v65;

  __cxa_free_exception(v65);
  sub_19C2E5670(&a65);
  _Unwind_Resume(a1);
}

void sub_19C3DCC48()
{
  JUMPOUT(0x19C3DCC54);
}

void sub_19C3DCC80()
{
  uint64_t v0;

  MEMORY[0x1A1AD355C](v0, 0x10F2C40B098B26FLL);
  JUMPOUT(0x19C3DDC0CLL);
}

void sub_19C3DCCD4(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  const void *a65;
  uint64_t v65;
  _QWORD *exception;

  sub_19C349204(&a65);
  sub_19C347DDC(&a39);
  sub_19C2B43C8((uint64_t)&a43);
  if (a2 == 2)
  {
    __cxa_begin_catch(a1);
    exception = __cxa_allocate_exception(0x20uLL);
    sub_19C2A6D48((_QWORD *)(v65 - 144), "Failed at loading Toucan language Model Resource");
    sub_19C31237C(exception, (__int128 *)(v65 - 144));
    __cxa_throw(exception, (struct type_info *)&unk_1E3D32968, (void (*)(void *))sub_19C3123E4);
  }
  JUMPOUT(0x19C3DDCA8);
}

void sub_19C3DCCEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,_QWORD *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,void *a53,uint64_t a54,void *__p,uint64_t a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  char a65;
  std::__shared_weak_count *v65;
  uint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  void *v69;
  char *v70;
  _QWORD *v71;
  _QWORD *v72;
  void *v73;
  _QWORD *v74;
  _QWORD *v75;
  void *v76;
  _QWORD *v77;
  _QWORD *v78;
  void *v79;
  void *v80;
  std::__shared_weak_count *v81;
  unint64_t *p_shared_owners;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;

  v67 = __p;
  if (__p)
  {
    do
    {
      v68 = (_QWORD *)*v67;
      operator delete(v67);
      v67 = v68;
    }
    while (v68);
  }
  v69 = a53;
  a53 = 0;
  if (v69)
    operator delete(v69);
  v70 = (char *)&STACK[0x220];
  v71 = a61;
  if (a61)
  {
    do
    {
      v72 = (_QWORD *)*v71;
      operator delete(v71);
      v71 = v72;
    }
    while (v72);
  }
  v73 = a59;
  a59 = 0;
  if (v73)
    operator delete(v73);
  v74 = *(_QWORD **)(v66 - 128);
  if (v74)
  {
    do
    {
      v75 = (_QWORD *)*v74;
      operator delete(v74);
      v74 = v75;
    }
    while (v75);
  }
  v76 = *(void **)(v66 - 144);
  *(_QWORD *)(v66 - 144) = 0;
  if (v76)
    operator delete(v76);
  while (1)
  {
    v77 = (_QWORD *)*((_QWORD *)v70 - 3);
    if (v77)
    {
      do
      {
        v78 = (_QWORD *)*v77;
        operator delete(v77);
        v77 = v78;
      }
      while (v78);
    }
    v79 = (void *)*((_QWORD *)v70 - 5);
    *((_QWORD *)v70 - 5) = 0;
    if (v79)
      operator delete(v79);
    v70 -= 48;
    if (v70 == &a65)
    {
      std::__shared_weak_count::~__shared_weak_count(v65);
      operator delete(v80);
      v81 = (std::__shared_weak_count *)a33[8];
      if (v81)
      {
        p_shared_owners = (unint64_t *)&v81->__shared_owners_;
        do
          v83 = __ldaxr(p_shared_owners);
        while (__stlxr(v83 - 1, p_shared_owners));
        if (!v83)
        {
          ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
          std::__shared_weak_count::__release_weak(v81);
        }
      }
      v84 = (std::__shared_weak_count *)a33[6];
      if (v84)
      {
        v85 = (unint64_t *)&v84->__shared_owners_;
        do
          v86 = __ldaxr(v85);
        while (__stlxr(v86 - 1, v85));
        if (!v86)
        {
          ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
          std::__shared_weak_count::__release_weak(v84);
        }
      }
      v87 = (std::__shared_weak_count *)a33[4];
      if (v87)
      {
        v88 = (unint64_t *)&v87->__shared_owners_;
        do
          v89 = __ldaxr(v88);
        while (__stlxr(v89 - 1, v88));
        if (!v89)
        {
          ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
          std::__shared_weak_count::__release_weak(v87);
        }
      }
      sub_19C2B43C8((uint64_t)&a51);
      sub_19C2B43C8((uint64_t)&a40);
      sub_19C2B43C8((uint64_t)&a48);
      JUMPOUT(0x19C3DDBFCLL);
    }
  }
}

void sub_19C3DCCFC()
{
  JUMPOUT(0x19C3DD61CLL);
}

void sub_19C3DCD0C()
{
  std::__shared_weak_count *v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  void *v5;

  v2 = *(_QWORD **)(v1 - 128);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)(v1 - 144);
  *(_QWORD *)(v1 - 144) = 0;
  if (v4)
    operator delete(v4);
  std::__shared_weak_count::~__shared_weak_count(v0);
  operator delete(v5);
  JUMPOUT(0x19C3DD7C0);
}

void sub_19C3DCD30()
{
  JUMPOUT(0x19C3DD7C4);
}

void sub_19C3DCD40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,std::__shared_weak_count *a60)
{
  uint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *p_shared_owners;
  unint64_t v63;
  unint64_t *v64;
  unint64_t v65;

  if (v61)
  {
    p_shared_owners = (unint64_t *)&v61->__shared_owners_;
    do
      v63 = __ldaxr(p_shared_owners);
    while (__stlxr(v63 - 1, p_shared_owners));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  if (a60)
  {
    v64 = (unint64_t *)&a60->__shared_owners_;
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))a60->__on_zero_shared)(a60);
      std::__shared_weak_count::__release_weak(a60);
    }
  }
  if (!*(_QWORD *)(v60 + 48))
    JUMPOUT(0x19C3DDBA0);
  JUMPOUT(0x19C3DDB9CLL);
}

void sub_19C3DCDB8()
{
  JUMPOUT(0x19C3DCDC0);
}

void sub_19C3DCDD4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  const void *v32;

  CFRelease(v32);
  JUMPOUT(0x19C3DDBA4);
}

void sub_19C3DCE00(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43)
{
  uint64_t v43;
  void *exception;

  sub_19C347DDC(&a39);
  sub_19C2B43C8(&a43);
  if (a2 == 2)
  {
    __cxa_begin_catch(a1);
    exception = __cxa_allocate_exception(0x20uLL);
    sub_19C2A6D48(v43 - 144, "Failed at loading Toucan language Model Resource");
    sub_19C31237C(exception, v43 - 144);
    __cxa_throw(exception, (struct type_info *)&unk_1E3D32968, (void (*)(void *))sub_19C3123E4);
  }
  JUMPOUT(0x19C3DDCA8);
}

void sub_19C3DCE0C()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 8))(v0);
  JUMPOUT(0x19C3DD8A4);
}

void sub_19C3DCE28()
{
  JUMPOUT(0x19C3DD89CLL);
}

void sub_19C3DCE38()
{
  JUMPOUT(0x19C3DDC14);
}

void sub_19C3DCE4C()
{
  JUMPOUT(0x19C3DDC14);
}

void sub_19C3DCE58()
{
  JUMPOUT(0x19C3DDCB0);
}

void sub_19C3DCE6C()
{
  JUMPOUT(0x19C3DD8A4);
}

void sub_19C3DCE90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,const void *a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  char a70;
  char a71;
  int v71;
  void *v72;
  uint64_t v73;

  if (*(char *)(v73 - 121) < 0)
  {
    operator delete(*(void **)(v73 - 144));
    if ((v71 & 1) == 0)
      goto LABEL_6;
  }
  else if (!v71)
  {
LABEL_6:
    if (a71 && a70 < 0)
      operator delete(__p);
    sub_19C2E5608(&a59);
    JUMPOUT(0x19C3DDC14);
  }
  __cxa_free_exception(v72);
  goto LABEL_6;
}

void sub_19C3DCF00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void **a27,uint64_t a28,void **a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void **a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53)
{
  uint64_t v53;
  std::__shared_weak_count *v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *shared_owners;
  _QWORD *v58;
  void *v59;
  const void *v60;
  void *v61;
  uint64_t shared_weak_owners;
  void *v63;
  void *v64;
  uint64_t v65;
  void *v66;
  void *v67;

  v54[1].__shared_weak_owners_ = v55;
  if (*(char *)(v56 - 121) < 0)
    operator delete(*(void **)(v56 - 144));
  sub_19C2A77D4(v53);
  shared_owners = (_QWORD *)v54[5].__shared_owners_;
  if (shared_owners)
  {
    do
    {
      v58 = (_QWORD *)*shared_owners;
      operator delete(shared_owners);
      shared_owners = v58;
    }
    while (v58);
  }
  v59 = *a29;
  *a29 = 0;
  if (v59)
    operator delete(v59);
  v60 = (const void *)v54[3].__shared_owners_;
  if (v60)
    CFRelease(v60);
  v54[3].__shared_owners_ = 0;
  v61 = *a27;
  if (*a27)
  {
    shared_weak_owners = v54[2].__shared_weak_owners_;
    v63 = *a27;
    if ((void *)shared_weak_owners != v61)
    {
      do
      {
        if (*(char *)(shared_weak_owners - 1) < 0)
          operator delete(*(void **)(shared_weak_owners - 24));
        shared_weak_owners -= 24;
      }
      while ((void *)shared_weak_owners != v61);
      v63 = *a27;
    }
    v54[2].__shared_weak_owners_ = (uint64_t)v61;
    operator delete(v63);
  }
  v64 = *a36;
  if (*a36)
  {
    v65 = v54[1].__shared_weak_owners_;
    v66 = *a36;
    if ((void *)v65 != v64)
    {
      do
      {
        if (*(char *)(v65 - 1) < 0)
          operator delete(*(void **)(v65 - 24));
        v65 -= 24;
      }
      while ((void *)v65 != v64);
      v66 = *a36;
    }
    v54[1].__shared_weak_owners_ = (uint64_t)v64;
    operator delete(v66);
  }
  if (a53 < 0)
    operator delete(a48);
  std::__shared_weak_count::~__shared_weak_count(v54);
  operator delete(v67);
  sub_19C2F5AA8(&a40);
  JUMPOUT(0x19C3DDC0CLL);
}

void sub_19C3DCF18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v0 + 40) = v1;
  if (*(char *)(v2 - 121) < 0)
    operator delete(*(void **)(v2 - 144));
  JUMPOUT(0x19C3DD530);
}

void sub_19C3DCF4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a65;
  char a70;
  void *a71;
  char a73;
  void *a74;
  void **v74;
  uint64_t v75;
  void **v76;
  void *v77;
  void **v78;
  std::__shared_weak_count *v79;
  unint64_t *p_shared_owners;
  unint64_t v81;

  v76 = *(void ***)(v75 + 104);
  if (v76)
  {
    do
    {
      v78 = (void **)*v76;
      if (*((char *)v76 + 39) < 0)
        operator delete(v76[2]);
      operator delete(v76);
      v76 = v78;
    }
    while (v78);
  }
  v77 = *v74;
  *v74 = 0;
  if (v77)
  {
    operator delete(v77);
    if (SLOBYTE(STACK[0x237]) < 0)
    {
LABEL_4:
      operator delete((void *)STACK[0x220]);
      if ((SLOBYTE(STACK[0x21F]) & 0x80000000) == 0)
        goto LABEL_5;
      goto LABEL_15;
    }
  }
  else if (SLOBYTE(STACK[0x237]) < 0)
  {
    goto LABEL_4;
  }
  if ((SLOBYTE(STACK[0x21F]) & 0x80000000) == 0)
  {
LABEL_5:
    if (SLOBYTE(STACK[0x207]) < 0)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  operator delete((void *)STACK[0x208]);
  if (SLOBYTE(STACK[0x207]) < 0)
  {
LABEL_6:
    operator delete(a74);
    if ((a73 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_17;
  }
LABEL_16:
  if ((a73 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a70 & 0x80000000) == 0)
      goto LABEL_18;
    goto LABEL_8;
  }
LABEL_17:
  operator delete(a71);
  if ((a70 & 0x80000000) == 0)
    goto LABEL_18;
LABEL_8:
  operator delete(a65);
LABEL_18:
  v79 = *(std::__shared_weak_count **)(a33 + 80);
  if (v79)
  {
    p_shared_owners = (unint64_t *)&v79->__shared_owners_;
    do
      v81 = __ldaxr(p_shared_owners);
    while (__stlxr(v81 - 1, p_shared_owners));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
    JUMPOUT(0x19C3DD7C0);
  }
  JUMPOUT(0x19C3DD7C4);
}

void sub_19C3DD018(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,_QWORD *__p)
{
  _QWORD *v55;
  _QWORD *v56;

  v55 = __p;
  if (__p)
  {
    do
    {
      v56 = (_QWORD *)*v55;
      operator delete(v55);
      v55 = v56;
    }
    while (v56);
  }
  if (a53)
    JUMPOUT(0x19C3DD610);
  JUMPOUT(0x19C3DD614);
}

void sub_19C3DD04C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,_QWORD *__p)
{
  uint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  void *v66;

  v62 = __p;
  if (__p)
  {
    do
    {
      v63 = (_QWORD *)*v62;
      operator delete(v62);
      v62 = v63;
    }
    while (v63);
  }
  if (a59)
    operator delete(a59);
  v64 = *(_QWORD **)(v61 - 128);
  if (v64)
  {
    do
    {
      v65 = (_QWORD *)*v64;
      operator delete(v64);
      v64 = v65;
    }
    while (v65);
  }
  v66 = *(void **)(v61 - 144);
  *(_QWORD *)(v61 - 144) = 0;
  if (v66)
    operator delete(v66);
  JUMPOUT(0x19C3DD670);
}

void sub_19C3DD0A8()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  void *v3;

  v1 = *(_QWORD **)(v0 - 128);
  if (v1)
  {
    do
    {
      v2 = (_QWORD *)*v1;
      operator delete(v1);
      v1 = v2;
    }
    while (v2);
  }
  v3 = *(void **)(v0 - 144);
  *(_QWORD *)(v0 - 144) = 0;
  if (v3)
    operator delete(v3);
  JUMPOUT(0x19C3DD6F0);
}

void sub_19C3DD0E4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _QWORD *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void **a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,__int128 a27,__int128 a28,uint64_t a29,uint64_t a30,__int128 a31,uint64_t a32,void **a33)
{
  void **v33;
  uint64_t v34;
  void **v35;
  void **v36;
  void **v37;
  void **v38;
  uint64_t i;
  void **j;
  void **k;
  void *v42;
  void **v43;
  void *v44;
  void **v45;
  void **v46;
  _QWORD *v47;
  _QWORD *v48;

  if ((_QWORD)a31)
  {
    for (i = *((_QWORD *)&a31 + 1); i != (_QWORD)a31; i -= 24)
    {
      if (*(char *)(i - 1) < 0)
        operator delete(*(void **)(i - 24));
    }
    operator delete((void *)a31);
    if (!v37)
    {
LABEL_3:
      if (!v36)
        goto LABEL_4;
      goto LABEL_18;
    }
  }
  else if (!v37)
  {
    goto LABEL_3;
  }
  for (j = (void **)a28; j != v37; j -= 3)
  {
    if (*((char *)j - 1) < 0)
      operator delete(*(j - 3));
  }
  operator delete(v37);
  if (!v36)
  {
LABEL_4:
    v38 = *(void ***)(v34 + 472);
    if (!v38)
      goto LABEL_24;
    goto LABEL_32;
  }
LABEL_18:
  for (k = (void **)a27; k != v36; k -= 3)
  {
    if (*((char *)k - 1) < 0)
      operator delete(*(k - 3));
  }
  operator delete(v36);
  v38 = *(void ***)(v34 + 472);
  if (!v38)
  {
LABEL_24:
    v42 = *v35;
    *v35 = 0;
    if (v42)
      operator delete(v42);
    v43 = *(void ***)(v34 + 432);
    if (v43)
    {
      do
      {
        v46 = (void **)*v43;
        if (*((char *)v43 + 39) < 0)
          operator delete(v43[2]);
        operator delete(v43);
        v43 = v46;
      }
      while (v46);
    }
    v44 = *v33;
    *v33 = 0;
    if (v44)
    {
      operator delete(v44);
      if (*(char *)(v34 + 415) < 0)
      {
LABEL_29:
        operator delete(*a20);
        if (!*(_BYTE *)(v34 + 384))
          goto LABEL_41;
        goto LABEL_39;
      }
    }
    else if (*(char *)(v34 + 415) < 0)
    {
      goto LABEL_29;
    }
    if (!*(_BYTE *)(v34 + 384))
      goto LABEL_41;
LABEL_39:
    if (*(char *)(v34 + 383) < 0)
      operator delete(*(void **)(v34 + 360));
LABEL_41:
    *a13 = off_1E3D34F88;
    if (*a33)
      operator delete(*a33);
    v47 = *(_QWORD **)(v34 + 288);
    if (v47)
    {
      do
      {
        v48 = (_QWORD *)*v47;
        operator delete(v47);
        v47 = v48;
      }
      while (v48);
    }
    JUMPOUT(0x19C3DD488);
  }
  do
  {
LABEL_32:
    v45 = (void **)*v38;
    if (*((char *)v38 + 39) < 0)
      operator delete(v38[2]);
    operator delete(v38);
    v38 = v45;
  }
  while (v45);
  goto LABEL_24;
}

void sub_19C3DD2AC()
{
  uint64_t v0;

  if (*(char *)(v0 - 121) < 0)
    operator delete(*(void **)(v0 - 144));
  JUMPOUT(0x19C3DD8F8);
}

void sub_19C3DD384(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  if ((a58 & 0x80000000) == 0)
    JUMPOUT(0x19C3DD394);
  JUMPOUT(0x19C3DD2E0);
}

void sub_19C3DD3C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  if ((a58 & 0x80000000) == 0)
    JUMPOUT(0x19C3DD3D0);
  JUMPOUT(0x19C3DD320);
}

void sub_19C3DD458(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, _QWORD *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void **a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40)
{
  std::__shared_weak_count *v40;
  std::__shared_weak_count_vtbl *v41;
  void (__cdecl *v42)(std::__shared_weak_count *__hidden);
  void *v43;
  void *v44;

  if (*a36)
    operator delete(*a36);
  v41 = v40[12].__vftable;
  if (v41)
  {
    do
    {
      v42 = v41->~__shared_weak_count;
      operator delete(v41);
      v41 = (std::__shared_weak_count_vtbl *)v42;
    }
    while (v42);
  }
  v43 = *a12;
  *a12 = 0;
  if (v43)
    operator delete(v43);
  sub_19C3FC2E8(a13);
  std::__shared_weak_count::~__shared_weak_count(v40);
  operator delete(v44);
  sub_19C2F5AA8(&a40);
  JUMPOUT(0x19C3DDC0CLL);
}

void sub_19C3DD4AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _QWORD *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void **a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void **a36)
{
  std::__shared_weak_count *v36;
  std::__shared_weak_count_vtbl *v37;
  void (__cdecl *v38)(std::__shared_weak_count *__hidden);
  void *v39;
  void *v40;

  if (*a20)
    operator delete(*a20);
  v37 = v36[12].__vftable;
  if (v37)
  {
    do
    {
      v38 = v37->~__shared_weak_count;
      operator delete(v37);
      v37 = (std::__shared_weak_count_vtbl *)v38;
    }
    while (v38);
  }
  v39 = *a36;
  *a36 = 0;
  if (v39)
    operator delete(v39);
  sub_19C3578F0(a14);
  std::__shared_weak_count::~__shared_weak_count(v36);
  operator delete(v40);
  JUMPOUT(0x19C3DDC0CLL);
}

void sub_19C3DD500(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void **a27,uint64_t a28,void **a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void **a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53)
{
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  _QWORD *v56;
  void *v57;
  const void *v58;
  void **v59;
  void **v60;
  void *v61;
  void **v62;
  void **v63;
  void *v64;

  sub_19C2A77D4(v53);
  v55 = (_QWORD *)v54[16];
  if (v55)
  {
    do
    {
      v56 = (_QWORD *)*v55;
      operator delete(v55);
      v55 = v56;
    }
    while (v56);
  }
  v57 = *a29;
  *a29 = 0;
  if (v57)
    operator delete(v57);
  v58 = (const void *)v54[10];
  if (v58)
    CFRelease(v58);
  v54[10] = 0;
  v59 = (void **)*a27;
  if (*a27)
  {
    v60 = (void **)v54[8];
    v61 = *a27;
    if (v60 != v59)
    {
      do
      {
        if (*((char *)v60 - 1) < 0)
          operator delete(*(v60 - 3));
        v60 -= 3;
      }
      while (v60 != v59);
      v61 = *a27;
    }
    v54[8] = v59;
    operator delete(v61);
  }
  v62 = (void **)*a36;
  if (*a36)
  {
    v63 = (void **)v54[5];
    v64 = *a36;
    if (v63 != v62)
    {
      do
      {
        if (*((char *)v63 - 1) < 0)
          operator delete(*(v63 - 3));
        v63 -= 3;
      }
      while (v63 != v62);
      v64 = *a36;
    }
    v54[5] = v62;
    operator delete(v64);
  }
  if (a53 < 0)
    operator delete(a48);
  JUMPOUT(0x19C3DD9ECLL);
}

void sub_19C3DD528(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void **a27,uint64_t a28,void **a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void **a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *__p,uint64_t a49,int a50,__int16 a51,char a52,char a53)
{
  std::__shared_weak_count *v53;
  uint64_t v54;
  _QWORD *shared_owners;
  _QWORD *v56;
  void *v57;
  const void *v58;
  void *v59;
  uint64_t shared_weak_owners;
  void *v61;
  void *v62;
  uint64_t v63;
  void *v64;
  void *v65;

  sub_19C2A77D4(v54);
  shared_owners = (_QWORD *)v53[5].__shared_owners_;
  if (shared_owners)
  {
    do
    {
      v56 = (_QWORD *)*shared_owners;
      operator delete(shared_owners);
      shared_owners = v56;
    }
    while (v56);
  }
  v57 = *a29;
  *a29 = 0;
  if (v57)
    operator delete(v57);
  v58 = (const void *)v53[3].__shared_owners_;
  if (v58)
    CFRelease(v58);
  v53[3].__shared_owners_ = 0;
  v59 = *a27;
  if (*a27)
  {
    shared_weak_owners = v53[2].__shared_weak_owners_;
    v61 = *a27;
    if ((void *)shared_weak_owners != v59)
    {
      do
      {
        if (*(char *)(shared_weak_owners - 1) < 0)
          operator delete(*(void **)(shared_weak_owners - 24));
        shared_weak_owners -= 24;
      }
      while ((void *)shared_weak_owners != v59);
      v61 = *a27;
    }
    v53[2].__shared_weak_owners_ = (uint64_t)v59;
    operator delete(v61);
  }
  v62 = *a36;
  if (*a36)
  {
    v63 = v53[1].__shared_weak_owners_;
    v64 = *a36;
    if ((void *)v63 != v62)
    {
      do
      {
        if (*(char *)(v63 - 1) < 0)
          operator delete(*(void **)(v63 - 24));
        v63 -= 24;
      }
      while ((void *)v63 != v62);
      v64 = *a36;
    }
    v53[1].__shared_weak_owners_ = (uint64_t)v62;
    operator delete(v64);
  }
  if (a53 < 0)
    operator delete(__p);
  std::__shared_weak_count::~__shared_weak_count(v53);
  operator delete(v65);
  JUMPOUT(0x19C3DDC0CLL);
}

void sub_19C3DD538()
{
  JUMPOUT(0x19C3DD540);
}

void sub_19C3DD54C()
{
  JUMPOUT(0x19C3DD554);
}

void sub_19C3DD70C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  char a70;

  if (a70 < 0)
    operator delete(__p);
  JUMPOUT(0x19C3DD738);
}

void sub_19C3DD730(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  void **v33;
  void **v34;
  void *v35;
  void **v36;

  v34 = *(void ***)(a33 + 104);
  if (v34)
  {
    do
    {
      v36 = (void **)*v34;
      if (*((char *)v34 + 39) < 0)
        operator delete(v34[2]);
      operator delete(v34);
      v34 = v36;
    }
    while (v36);
  }
  v35 = *v33;
  *v33 = 0;
  if (v35)
    operator delete(v35);
  if (!*(_QWORD *)(a33 + 80))
    JUMPOUT(0x19C3DD7C4);
  JUMPOUT(0x19C3DD78CLL);
}

void sub_19C3DD88C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,const void *a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,const void *a53)
{
  uint64_t v53;
  _QWORD *exception;

  sub_19C313560(&a48);
  sub_19C2E5670(&a53);
  sub_19C2B43C8((uint64_t)&a37);
  sub_19C347DDC(&a39);
  sub_19C2B43C8((uint64_t)&a43);
  if (a2 == 2)
  {
    __cxa_begin_catch(a1);
    exception = __cxa_allocate_exception(0x20uLL);
    sub_19C2A6D48((_QWORD *)(v53 - 144), "Failed at loading Toucan language Model Resource");
    sub_19C31237C(exception, (__int128 *)(v53 - 144));
    __cxa_throw(exception, (struct type_info *)&unk_1E3D32968, (void (*)(void *))sub_19C3123E4);
  }
  sub_19C2F5AA8(&a45);
  sub_19C2B43C8(a15);
  sub_19C2B43C8(a16);
  sub_19C2B43C8(a17);
  sub_19C2B43C8(a18);
  sub_19C2B43C8(a19);
  if (*(char *)(a32 + 23) < 0)
  {
    operator delete(*(void **)a32);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_19C3DD8B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  char a70;
  int v70;
  void *v71;
  uint64_t v72;

  if (a70 < 0)
  {
    operator delete(__p);
    if ((v70 & 1) == 0)
      goto LABEL_6;
  }
  else if (!v70)
  {
LABEL_6:
    sub_19C2CD3C8((uint64_t *)(v72 - 144));
    JUMPOUT(0x19C3DD8F8);
  }
  __cxa_free_exception(v71);
  goto LABEL_6;
}

void sub_19C3DDA08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  char a70;
  int v70;
  void *v71;
  uint64_t v72;

  if (a70 < 0)
  {
    operator delete(__p);
    if ((v70 & 1) == 0)
      goto LABEL_6;
  }
  else if (!v70)
  {
LABEL_6:
    sub_19C2CD3C8((uint64_t *)(v72 - 144));
    JUMPOUT(0x19C3DDA4CLL);
  }
  __cxa_free_exception(v71);
  goto LABEL_6;
}

void sub_19C3DDB54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a65;
  char a70;
  std::__shared_weak_count *v70;
  std::__shared_weak_count **v71;
  uint64_t v72;
  void *v73;
  std::__shared_weak_count_vtbl *v74;
  std::__shared_weak_count *v75;
  unint64_t *p_shared_owners;
  unint64_t v77;
  void *v78;

  v73 = *(void **)(v72 - 144);
  if (v73)
  {
    *(_QWORD *)(v72 - 136) = v73;
    operator delete(v73);
    if (a70 < 0)
    {
LABEL_3:
      operator delete(a65);
      v74 = v70[2].__vftable;
      if (v74)
        goto LABEL_7;
      goto LABEL_8;
    }
  }
  else if (a70 < 0)
  {
    goto LABEL_3;
  }
  v74 = v70[2].__vftable;
  if (v74)
LABEL_7:
    CFRelease(v74);
LABEL_8:
  v70[2].__vftable = 0;
  v75 = *v71;
  if (*v71)
  {
    p_shared_owners = (unint64_t *)&v75->__shared_owners_;
    do
      v77 = __ldaxr(p_shared_owners);
    while (__stlxr(v77 - 1, p_shared_owners));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  sub_19C2B43C8((uint64_t)&a40);
  sub_19C2B43C8((uint64_t)&a48);
  sub_19C2B43C8((uint64_t)&a53);
  std::__shared_weak_count::~__shared_weak_count(v70);
  operator delete(v78);
  JUMPOUT(0x19C3DDC04);
}

void sub_19C3DDC74()
{
  int v0;
  void *v1;
  uint64_t v2;

  if (*(char *)(v2 - 121) < 0)
  {
    operator delete(*(void **)(v2 - 144));
    if ((v0 & 1) == 0)
      goto LABEL_6;
  }
  else if (!v0)
  {
LABEL_6:
    __cxa_end_catch();
    JUMPOUT(0x19C3DDCA8);
  }
  __cxa_free_exception(v1);
  goto LABEL_6;
}

void sub_19C3DDCF0(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x19C3DDCF8);
  sub_19C2CDAC8(a1);
}

void sub_19C3DDD78(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D39A90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_19C3DDD88(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D39A90;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AD355CLL);
}

void sub_19C3DDDB8(uint64_t a1)
{
  void **v2;
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  void **v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;

  if (*(char *)(a1 + 151) < 0)
  {
    operator delete(*(void **)(a1 + 128));
    v2 = *(void ***)(a1 + 104);
    if (!v2)
      goto LABEL_5;
  }
  else
  {
    v2 = *(void ***)(a1 + 104);
    if (!v2)
      goto LABEL_5;
  }
  do
  {
    v10 = (void **)*v2;
    if (*((char *)v2 + 39) < 0)
      operator delete(v2[2]);
    operator delete(v2);
    v2 = v10;
  }
  while (v10);
LABEL_5:
  v3 = *(void **)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v3)
    operator delete(v3);
  v4 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v4)
    goto LABEL_11;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    v7 = *(std::__shared_weak_count **)(a1 + 64);
    if (!v7)
      goto LABEL_20;
  }
  else
  {
LABEL_11:
    v7 = *(std::__shared_weak_count **)(a1 + 64);
    if (!v7)
      goto LABEL_20;
  }
  v8 = (unint64_t *)&v7->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
LABEL_20:
  v11 = *(std::__shared_weak_count **)(a1 + 48);
  if (!v11)
    goto LABEL_24;
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    v14 = *(std::__shared_weak_count **)(a1 + 32);
    if (!v14)
      return;
  }
  else
  {
LABEL_24:
    v14 = *(std::__shared_weak_count **)(a1 + 32);
    if (!v14)
      return;
  }
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
}

void sub_19C3DDF3C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D39B38;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_19C3DDF4C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D39B38;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AD355CLL);
}

_QWORD *sub_19C3DDF7C(uint64_t a1)
{
  return sub_19C361680((_QWORD *)(a1 + 24));
}

void sub_19C3DDF88(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D39AC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_19C3DDF98(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D39AC8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C3DDFC8(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_19C3DDFD8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D39B00;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_19C3DDFE8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D39B00;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AD355CLL);
}

void sub_19C3DE018(_QWORD *a1)
{
  void *v2;
  const void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v2 = (void *)a1[25];
  if (v2)
  {
    a1[26] = v2;
    operator delete(v2);
  }
  sub_19C361744(a1 + 8);
  v3 = (const void *)a1[6];
  if (v3)
    CFRelease(v3);
  a1[6] = 0;
  v4 = (std::__shared_weak_count *)a1[5];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_19C3DE0A8(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C3DE0CC(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_19C3DE0E4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN2LM19NeuralLanguageModelEEE"
    || ((v3 & (unint64_t)"NSt3__114default_deleteIN2LM19NeuralLanguageModelEEE" & 0x8000000000000000) != 0) != __OFSUB__(v3, "NSt3__114default_deleteIN2LM19NeuralLanguageModelEEE")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN2LM19NeuralLanguageModelEEE" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_19C3DE140()
{
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C3DE154()
{
  return 3;
}

uint64_t sub_19C3DE15C()
{
  return 0;
}

uint64_t sub_19C3DE164()
{
  return 0;
}

uint64_t sub_19C3DE16C()
{
  return 0;
}

uint64_t sub_19C3DE174()
{
  return 32;
}

uint64_t sub_19C3DE17C()
{
  return 0;
}

uint64_t sub_19C3DE184()
{
  return 0;
}

uint64_t sub_19C3DE18C()
{
  return 0;
}

uint64_t sub_19C3DE194()
{
  return 0;
}

uint64_t sub_19C3DE19C()
{
  return 1;
}

void sub_19C3DE1A4()
{
  __assert_rtn("prefixTokensRange", "ToucanTokenIDMapperStub.hpp", 34, "false && \"Not supported for Toucan\"");
}

void sub_19C3DE1CC()
{
  __assert_rtn("stemTokensRange", "ToucanTokenIDMapperStub.hpp", 40, "false && \"Not supported for Toucan\"");
}

void sub_19C3DE1F4()
{
  __assert_rtn("suffixTokensRange", "ToucanTokenIDMapperStub.hpp", 46, "false && \"Not supported for Toucan\"");
}

void sub_19C3DE21C(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void sub_19C3DE228()
{
  __assert_rtn("hasSparseFanout", "ToucanTokenIDMapperStub.hpp", 57, "false && \"Not supported for Toucan\"");
}

void sub_19C3DE250(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void sub_19C3DE258(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D399E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_19C3DE268(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D399E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C3DE298(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *sub_19C3DE2A8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_1E3D36DF0;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void sub_19C3DE30C(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_1E3D36DF0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C3DE380(uint64_t a1, unsigned int *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 200))(*(_QWORD *)(a1 + 8), *a2);
}

void sub_19C3DE394(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v8;
  const void *v9;
  int64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  _DWORD *v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  __int128 v27;
  int v28;
  float v29;
  float v30;
  _QWORD *v31;
  _QWORD *i;
  char *v33;
  _QWORD *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  _BYTE *v44;
  _BYTE *v45;
  int64_t v46;
  char *v47;
  char *v48;
  char *v49;
  std::__shared_weak_count *v50;
  unint64_t *p_shared_owners;
  unint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  __int128 v56;
  uint64_t v57;
  void *__p;
  char *v59;
  unint64_t v60;
  void *v61;
  void *v62;
  char *v63;

  v61 = 0;
  v62 = 0;
  v63 = 0;
  v9 = *(const void **)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v10 = v8 - *(_QWORD *)a1;
  if (v8 == *(_QWORD *)a1)
  {
    v11 = 0;
    v12 = 0;
  }
  else
  {
    if (v10 < 0)
      sub_19C2A18E8();
    v11 = (char *)operator new(v8 - *(_QWORD *)a1);
    v12 = &v11[4 * (v10 >> 2)];
    v61 = v11;
    v63 = v12;
    memcpy(v11, v9, v10);
    v62 = v12;
  }
  v13 = v12 - v11;
  v14 = (v12 - v11) >> 2;
  v15 = v14 + 1;
  if ((unint64_t)(v14 + 1) >> 62)
    sub_19C2A18E8();
  if (v13 >> 1 > v15)
    v15 = v13 >> 1;
  if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
    v16 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v16 = v15;
  if (v16)
  {
    if (v16 >> 62)
      sub_19C2A143C();
    v17 = (char *)operator new(4 * v16);
  }
  else
  {
    v17 = 0;
  }
  v18 = &v17[4 * v14];
  v19 = &v17[4 * v16];
  *(_DWORD *)v18 = *(_DWORD *)a2;
  v20 = v18 + 4;
  if (v12 != v11)
  {
    v21 = v12 - v11 - 4;
    if (v21 < 0x1C)
    {
      v22 = v12;
      do
      {
LABEL_21:
        v28 = *((_DWORD *)v22 - 1);
        v22 -= 4;
        *((_DWORD *)v18 - 1) = v28;
        v18 -= 4;
      }
      while (v22 != v11);
      goto LABEL_22;
    }
    v23 = (v21 >> 2) + 1;
    v22 = &v12[-4 * (v23 & 0x7FFFFFFFFFFFFFF8)];
    v24 = &v17[4 * v14 - 16];
    v25 = v12 - 16;
    v26 = v23 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v27 = *(_OWORD *)v25;
      *((_OWORD *)v24 - 1) = *((_OWORD *)v25 - 1);
      *(_OWORD *)v24 = v27;
      v24 -= 32;
      v25 -= 32;
      v26 -= 8;
    }
    while (v26);
    v18 -= 4 * (v23 & 0x7FFFFFFFFFFFFFF8);
    if (v23 != (v23 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_21;
  }
LABEL_22:
  v61 = v18;
  v63 = v19;
  if (v11)
    operator delete(v11);
  v62 = v20;
  v29 = *(float *)(a1 + 24);
  v30 = log10f(*(float *)(a2 + 4));
  __p = 0;
  v59 = 0;
  v60 = 0;
  v31 = *(_QWORD **)(a1 + 240);
  for (i = *(_QWORD **)(a1 + 248); v31 != i; v31 += 3)
  {
    (*(void (**)(char **__return_ptr, _QWORD, uint64_t))(*(_QWORD *)*v31 + 24))(&v53, *v31, a3);
    if ((*(unsigned int (**)(char *))(*(_QWORD *)v53 + 16))(v53))
    {
      v33 = v53;
      *(_QWORD *)&v56 = v53;
      if (v53)
      {
        v34 = (_QWORD *)operator new();
        v35 = v53;
        *v34 = &off_1E3D39C88;
        v34[1] = 0;
        v34[2] = 0;
        v34[3] = v35;
      }
      else
      {
        v34 = 0;
      }
      v53 = 0;
      v36 = v31[2] + 1;
      *((_QWORD *)&v56 + 1) = v34;
      v57 = v36;
      v37 = v59;
      if ((unint64_t)v59 >= v60)
      {
        v38 = sub_19C35F304((char **)&__p, (uint64_t)&v56);
        v39 = (std::__shared_weak_count *)*((_QWORD *)&v56 + 1);
        v59 = v38;
        if (*((_QWORD *)&v56 + 1))
        {
          v40 = (unint64_t *)(*((_QWORD *)&v56 + 1) + 8);
          do
            v41 = __ldaxr(v40);
          while (__stlxr(v41 - 1, v40));
          if (!v41)
          {
            ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
            std::__shared_weak_count::__release_weak(v39);
          }
        }
      }
      else
      {
        *(_QWORD *)v59 = v33;
        *((_QWORD *)v37 + 1) = v34;
        *((_QWORD *)v37 + 2) = v36;
        v59 = v37 + 24;
      }
    }
    v42 = v53;
    v53 = 0;
    if (v42)
      (*(void (**)(char *))(*(_QWORD *)v42 + 8))(v42);
  }
  v56 = 0uLL;
  v57 = 0;
  v43 = *(_QWORD *)(a1 + 264);
  v53 = 0;
  v54 = 0;
  v55 = 0;
  v45 = *(_BYTE **)(a1 + 280);
  v44 = *(_BYTE **)(a1 + 288);
  v46 = v44 - v45;
  if (v44 == v45)
  {
    v47 = 0;
  }
  else
  {
    if (v46 < 0)
      sub_19C2A18E8();
    v47 = (char *)operator new(v44 - v45);
    v53 = v47;
    v55 = &v47[4 * (v46 >> 2)];
    memcpy(v47, v45, v46);
    v54 = &v47[4 * (v46 >> 2)];
  }
  sub_19C3A9F98(a4, (uint64_t)&v61, &v56, a1 + 56, (uint64_t)&__p, v43 + 1, 0, (uint64_t)&v53, v30 + v29, 0.0);
  if (v47)
    operator delete(v47);
  v48 = (char *)__p;
  if (__p)
  {
    v49 = v59;
    if (v59 != __p)
    {
      do
      {
        v50 = (std::__shared_weak_count *)*((_QWORD *)v49 - 2);
        if (v50)
        {
          p_shared_owners = (unint64_t *)&v50->__shared_owners_;
          do
            v52 = __ldaxr(p_shared_owners);
          while (__stlxr(v52 - 1, p_shared_owners));
          if (!v52)
          {
            ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
            std::__shared_weak_count::__release_weak(v50);
          }
        }
        v49 -= 24;
      }
      while (v49 != v48);
      v48 = (char *)__p;
    }
    operator delete(v48);
  }
  if (v61)
  {
    v62 = v61;
    operator delete(v61);
  }
}

void sub_19C3DE790(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  void *v19;

  if (v19)
    operator delete(v19);
  sub_19C35CE78(&a15);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_19C3DE81C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D39A58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_19C3DE82C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D39A58;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C3DE85C(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_19C3DE86C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D39780;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_19C3DE87C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D39780;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C3DE8AC(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *sub_19C3DE8BC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_1E3D36DC0;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void sub_19C3DE920(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_1E3D36DC0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C3DE994(uint64_t a1, unsigned int *a2, char a3)
{
  if ((a3 & 1) != 0)
    return 0;
  else
    return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 152))(*(_QWORD *)(a1 + 8), *a2);
}

void sub_19C3DE9B4(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  _QWORD *v7;
  _QWORD *i;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count_vtbl *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count_vtbl *v19;
  float v20;
  float v21;
  uint64_t v22;
  char *v23;
  char *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count_vtbl *v28;
  std::__shared_weak_count_vtbl *v29;
  std::__shared_weak_count *v30;
  uint64_t v31;
  void *__p;
  char *v33;
  unint64_t v34;

  __p = 0;
  v33 = 0;
  v34 = 0;
  v7 = *(_QWORD **)(a1 + 240);
  for (i = *(_QWORD **)(a1 + 248); v7 != i; v7 += 3)
  {
    (*(void (**)(std::__shared_weak_count_vtbl **__return_ptr, _QWORD, uint64_t))(*(_QWORD *)*v7 + 24))(&v28, *v7, a3);
    v10 = v28;
    v29 = v28;
    if (v28)
    {
      v11 = (std::__shared_weak_count *)operator new();
      v12 = v28;
      v11->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D39C88;
      v11->__shared_owners_ = 0;
      v11->__shared_weak_owners_ = 0;
      v11[1].__vftable = v12;
    }
    else
    {
      v11 = 0;
    }
    v28 = 0;
    v13 = v7[2] + 1;
    v30 = v11;
    v31 = v13;
    v14 = v33;
    if ((unint64_t)v33 >= v34)
    {
      v15 = sub_19C35F304((char **)&__p, (uint64_t)&v29);
      v16 = v30;
      v33 = v15;
      if (v30)
      {
        p_shared_owners = (unint64_t *)&v30->__shared_owners_;
        do
          v18 = __ldaxr(p_shared_owners);
        while (__stlxr(v18 - 1, p_shared_owners));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
    }
    else
    {
      *(_QWORD *)v33 = v10;
      *((_QWORD *)v14 + 1) = v11;
      *((_QWORD *)v14 + 2) = v13;
      v33 = v14 + 24;
    }
    v19 = v28;
    v28 = 0;
    if (v19)
      (*((void (**)(std::__shared_weak_count_vtbl *))v19->~__shared_weak_count + 1))(v19);
  }
  v20 = *(float *)(a1 + 24);
  v21 = log10f(*(float *)(a2 + 4));
  v22 = *(_QWORD *)(a1 + 264) + 1;
  v29 = 0;
  v30 = 0;
  v31 = 0;
  sub_19C3A9F98(a4, a1, (__int128 *)(a1 + 32), a1 + 56, (uint64_t)&__p, v22, 0, (uint64_t)&v29, v21 + v20, 0.0);
  v23 = (char *)__p;
  if (__p)
  {
    v24 = v33;
    if (v33 != __p)
    {
      do
      {
        v25 = (std::__shared_weak_count *)*((_QWORD *)v24 - 2);
        if (v25)
        {
          v26 = (unint64_t *)&v25->__shared_owners_;
          do
            v27 = __ldaxr(v26);
          while (__stlxr(v27 - 1, v26));
          if (!v27)
          {
            ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        v24 -= 24;
      }
      while (v24 != v23);
      v23 = (char *)__p;
    }
    operator delete(v23);
  }
}

void sub_19C3DEBC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_19C35CE78((void **)va);
  _Unwind_Resume(a1);
}

void sub_19C3DEC0C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D39A20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_19C3DEC1C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D39A20;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C3DEC4C(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_19C3DEC5C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D39748;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_19C3DEC6C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D39748;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C3DEC9C(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *sub_19C3DECAC(_QWORD *a1)
{
  const void *v2;

  *a1 = &off_1E3D364C0;
  v2 = (const void *)a1[1];
  if (v2)
    CFRelease(v2);
  return a1;
}

void sub_19C3DECE8(_QWORD *a1)
{
  const void *v1;

  *a1 = &off_1E3D364C0;
  v1 = (const void *)a1[1];
  if (v1)
    CFRelease(v1);
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C3DED34(uint64_t a1)
{
  return a1 + 8;
}

uint64_t sub_19C3DED3C(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E3D37528;
  dispatch_release(*(dispatch_object_t *)(a1 + 280));
  sub_19C39D15C(a1 + 8);
  return a1;
}

void sub_19C3DED78(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E3D37528;
  dispatch_release(*(dispatch_object_t *)(a1 + 280));
  sub_19C39D15C(a1 + 8);
  JUMPOUT(0x1A1AD355CLL);
}

void sub_19C3DEDC4(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7)
{
  NSObject *v7;
  _QWORD block[10];
  int v9;

  v7 = *(NSObject **)(a1 + 280);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = sub_19C3DF2E8;
  block[3] = &unk_1E3D3BAF8;
  block[4] = a1;
  v9 = a2;
  *(double *)&block[5] = a7;
  block[6] = a3;
  block[7] = a4;
  block[8] = a5;
  block[9] = a6;
  dispatch_sync(v7, block);
}

uint64_t sub_19C3DEE2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSObject *v4;
  uint64_t v5;
  _QWORD block[9];
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  char v11;

  v8 = 0;
  v9 = &v8;
  v10 = 0x2000000000;
  v11 = 1;
  v4 = *(NSObject **)(a1 + 280);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = sub_19C3DF2B0;
  block[3] = &unk_1E3D3BB88;
  block[4] = &v8;
  block[5] = a1;
  block[6] = a2;
  block[7] = a3;
  block[8] = a4;
  dispatch_sync(v4, block);
  v5 = *((unsigned __int8 *)v9 + 24);
  _Block_object_dispose(&v8, 8);
  return v5;
}

void sub_19C3DEEC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v3;
  _QWORD block[7];

  v3 = *(NSObject **)(a1 + 280);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = sub_19C3DF29C;
  block[3] = &unk_1E3D3BB40;
  block[4] = a1;
  block[5] = a2;
  block[6] = a3;
  dispatch_sync(v3, block);
}

void sub_19C3DEF24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v3;
  _QWORD block[7];

  v3 = *(NSObject **)(a1 + 280);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = sub_19C292F80;
  block[3] = &unk_1E3D3BB60;
  block[4] = a1;
  block[5] = a2;
  block[6] = a3;
  dispatch_sync(v3, block);
}

void sub_19C3DEF80(uint64_t a1)
{
  NSObject *v1;
  _QWORD block[5];

  v1 = *(NSObject **)(a1 + 280);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = sub_19C3DF290;
  block[3] = &unk_1E3D3BBA8;
  block[4] = a1;
  dispatch_sync(v1, block);
}

double sub_19C3DEFD8(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  double v3;
  _QWORD block[7];
  uint64_t v6;
  double *v7;
  uint64_t v8;
  uint64_t v9;

  v6 = 0;
  v7 = (double *)&v6;
  v8 = 0x2000000000;
  v9 = 0;
  v2 = *(NSObject **)(a1 + 280);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = sub_19C3DF25C;
  block[3] = &unk_1E3D3BB20;
  block[4] = &v6;
  block[5] = a1;
  block[6] = a2;
  dispatch_sync(v2, block);
  v3 = v7[3];
  _Block_object_dispose(&v6, 8);
  return v3;
}

void sub_19C3DF06C(uint64_t a1)
{
  NSObject *v1;
  _QWORD block[5];

  v1 = *(NSObject **)(a1 + 280);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = sub_19C3DF250;
  block[3] = &unk_1E3D3BBC8;
  block[4] = a1;
  dispatch_sync(v1, block);
}

void sub_19C3DF0C4(uint64_t a1, char a2, double a3)
{
  NSObject *v3;
  _QWORD block[6];
  char v5;

  v3 = *(NSObject **)(a1 + 280);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = sub_19C3DF124;
  block[3] = &unk_1E3D39EB0;
  block[4] = a1;
  *(double *)&block[5] = a3;
  v5 = a2;
  dispatch_sync(v3, block);
}

void sub_19C3DF124(uint64_t a1)
{
  uint64_t v1;
  int v2;
  _QWORD *v3;
  _QWORD *v4;
  int v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = (int)((*(double *)(a1 + 40) - *(double *)(v1 + 264)) * 0.0000115740741);
  if (*(_BYTE *)(a1 + 48))
  {
    if (v2 <= 1)
      v2 = 1;
  }
  else if (v2 < 1)
  {
    return;
  }
  v3 = *(_QWORD **)(v1 + 160);
  if (v3 != (_QWORD *)(v1 + 168))
  {
    do
    {
      v4 = (_QWORD *)v3[7];
      v5 = v2;
      if (v4 != v3 + 8)
      {
        do
        {
          v9 = v4;
          do
          {
            *((_DWORD *)v9 + 14) = (int)((double)*((int *)v9 + 14) * 0.95);
            v10 = (_QWORD *)v9[1];
            if (v10)
            {
              do
              {
                v11 = v10;
                v10 = (_QWORD *)*v10;
              }
              while (v10);
            }
            else
            {
              do
              {
                v11 = (_QWORD *)v9[2];
                v12 = *v11 == (_QWORD)v9;
                v9 = v11;
              }
              while (!v12);
            }
            v9 = v11;
          }
          while (v11 != v3 + 8);
          v8 = __OFSUB__(v5--, 1);
        }
        while (!((v5 < 0) ^ v8 | (v5 == 0)));
      }
      v6 = (_QWORD *)v3[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v3[2];
          v12 = *v7 == (_QWORD)v3;
          v3 = v7;
        }
        while (!v12);
      }
      v3 = v7;
    }
    while (v7 != (_QWORD *)(v1 + 168));
  }
  *(CFAbsoluteTime *)(v1 + 264) = CFAbsoluteTimeGetCurrent();
}

void sub_19C3DF250(uint64_t a1)
{
  sub_19C3139A4(*(_QWORD *)(a1 + 32) + 64);
}

void sub_19C3DF25C(uint64_t a1)
{
  *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = sub_19C39B1A8(*(_QWORD *)(a1 + 40) + 8, *(const __CFString **)(a1 + 48));
}

void sub_19C3DF290(uint64_t a1)
{
  sub_19C39A830(*(_QWORD *)(a1 + 32) + 8);
}

void sub_19C3DF29C(uint64_t a1)
{
  sub_19C39A7A0(*(_QWORD *)(a1 + 32) + 8, *(const __CFString **)(a1 + 40), *(_QWORD *)(a1 + 48));
}

BOOL sub_19C3DF2B0(uint64_t a1)
{
  _BOOL8 result;

  result = sub_19C397D50(*(_QWORD *)(a1 + 40) + 8, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD **)(a1 + 64));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_19C3DF2E8(uint64_t a1)
{
  sub_19C397A68(*(_QWORD *)(a1 + 32) + 8, *(_DWORD *)(a1 + 80), *(const __CFString **)(a1 + 48), *(const __CFString **)(a1 + 56), *(const __CFString **)(a1 + 64), *(CFStringRef *)(a1 + 72), *(double *)(a1 + 40));
}

void sub_19C3DF308(CFURLRef url)
{
  _QWORD v1[3];
  const __CFURL *v2;

  v2 = CFURLCreateCopyAppendingPathComponent(0, url, CFSTR("langlikelihood.dat"), 1u);
  sub_19C2E15E8(v2, v1);
}

uint64_t sub_19C3DF33C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t block, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  uint64_t v33;
  unsigned __int8 v34;
  NSObject *v35;
  uint64_t v36;
  const void *v37;
  _QWORD v39[6];
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;

  v34 = atomic_load((unsigned __int8 *)&qword_1EDB96EB0);
  if ((v34 & 1) == 0 && __cxa_guard_acquire(&qword_1EDB96EB0))
  {
    qword_1EDB96ED0 = 0;
    qword_1EDB96EC8 = 0;
    qword_1EDB96EC0 = (uint64_t)&qword_1EDB96EC8;
    __cxa_guard_release(&qword_1EDB96EB0);
  }
  if (qword_1EDB96ED8 != -1)
    dispatch_once(&qword_1EDB96ED8, &unk_1E3D3BAA0);
  v42 = 0;
  v43 = &v42;
  v44 = 0x2000000000;
  v45 = 0;
  v35 = qword_1EDB96EE0;
  v39[0] = MEMORY[0x1E0C809B0];
  v39[1] = 1174405120;
  v39[2] = sub_19C3DF4D8;
  v39[3] = &unk_1E3D3BAC8;
  v39[5] = &qword_1EDB96EC0;
  if (*(char *)(v33 - 25) < 0)
  {
    sub_19C2B5238(&v40, *(void **)(v33 - 48), *(_QWORD *)(v33 - 40));
  }
  else
  {
    v40 = *(_OWORD *)(v33 - 48);
    v41 = *(_QWORD *)(v33 - 32);
  }
  v39[4] = &v42;
  dispatch_sync(v35, v39);
  v36 = v43[3];
  if (SHIBYTE(v41) < 0)
    operator delete((void *)v40);
  _Block_object_dispose(&v42, 8);
  if ((*(char *)(v33 - 25) & 0x80000000) == 0)
  {
    v37 = *(const void **)(v33 - 24);
    if (!v37)
      return v36;
    goto LABEL_13;
  }
  operator delete(*(void **)(v33 - 48));
  v37 = *(const void **)(v33 - 24);
  if (v37)
LABEL_13:
    CFRelease(v37);
  return v36;
}

void sub_19C3DF49C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  if (*(char *)(v11 - 25) < 0)
    operator delete(*(void **)(v11 - 48));
  sub_19C31352C((const void **)(v11 - 24));
  _Unwind_Resume(a1);
}

uint64_t sub_19C3DF4D8(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  char v5;
  const void *v6;
  size_t v7;
  uint64_t *v8;
  int v9;
  uint64_t *v10;
  size_t v11;
  size_t v12;
  int v13;
  int v14;
  const void *v15;
  size_t v16;
  size_t v17;
  uint64_t result;
  uint64_t v19;
  void **v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  int *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  sqlite3 *v70;
  uint64_t v71;
  sqlite3 *v72;
  uint64_t v73;
  sqlite3 *v74;
  uint64_t v75;
  sqlite3 *v76;
  int v77;
  const char *v78;
  const char *v79;
  size_t v80;
  size_t v81;
  __int128 *p_dst;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  __int128 *v86;
  int v87;
  int v88;
  const char *v90;
  const char *v91;
  size_t v92;
  size_t v93;
  __int128 *v94;
  uint64_t v95;
  uint64_t v96;
  __int128 *p_p;
  unint64_t v99;
  size_t v100;
  int v101;
  double v102;
  const char *v103;
  const char *v104;
  size_t v105;
  size_t v106;
  __int128 *v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  int v112;
  const char *v113;
  const char *v114;
  size_t v115;
  size_t v116;
  __int128 *v117;
  uint64_t v118;
  uint64_t v119;
  const char *v120;
  const char *v121;
  size_t v122;
  size_t v123;
  __int128 *v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  uint64_t **v128;
  int v130;
  const char *v131;
  const char *v132;
  size_t v133;
  size_t v134;
  __int128 *v135;
  uint64_t v136;
  uint64_t v137;
  int v138;
  double v139;
  uint64_t **v140;
  unint64_t v142;
  unint64_t v143;
  unint64_t v144;
  unint64_t v145;
  uint64_t v146;
  const void **v147;
  uint64_t v148;
  const void **v149;
  const void **v150;
  NSObject *v151;
  unsigned __int8 v152;
  uint64_t v153;
  uint64_t **v154;
  uint64_t *v155;
  uint64_t **v156;
  char v157;
  const void *v158;
  size_t v159;
  uint64_t *v160;
  _QWORD *v161;
  const void *v162;
  const void *v163;
  int v164;
  const void *v165;
  size_t v166;
  size_t v167;
  int v168;
  _QWORD *v169;
  _BYTE *v170;
  uint64_t *v171;
  uint64_t *v172;
  void *v173;
  void *v174;
  void *v175;
  void *v176;
  void *exception;
  void *v178;
  void *v179;
  void *v180;
  int v181;
  uint64_t **v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  sqlite3 **v188;
  uint64_t v189;
  uint64_t **v190;
  uint64_t **v191;
  unint64_t v192;
  stat v193;
  __int128 v194;
  unint64_t v195;
  __int128 v196;
  unint64_t v197;
  __int128 v198;
  unint64_t v199;
  __int128 __dst;
  int64_t v201;
  __int128 __p;
  int64_t v203;
  __int128 v204;
  int64_t v205;
  void *v206[2];
  char v207;
  void *v208[2];
  char v209;
  void *v210[2];
  char v211;
  void *v212[2];
  char v213;
  void *v214[2];
  char v215;
  uint64_t v216;

  v216 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 40);
  v186 = a1 + 48;
  v4 = *(uint64_t **)(v1 + 8);
  v2 = (uint64_t *)(v1 + 8);
  v3 = v4;
  if (!v4)
    goto LABEL_38;
  v5 = *(_BYTE *)(a1 + 71);
  if (v5 >= 0)
    v6 = (const void *)(a1 + 48);
  else
    v6 = *(const void **)(a1 + 48);
  if (v5 >= 0)
    v7 = *(unsigned __int8 *)(a1 + 71);
  else
    v7 = *(_QWORD *)(a1 + 56);
  v8 = v2;
  do
  {
    while (1)
    {
      v9 = *((char *)v3 + 55);
      v10 = v9 >= 0 ? v3 + 4 : (uint64_t *)v3[4];
      v11 = v9 >= 0 ? *((unsigned __int8 *)v3 + 55) : v3[5];
      v12 = v7 >= v11 ? v11 : v7;
      v13 = memcmp(v10, v6, v12);
      if (v13)
        break;
      if (v11 >= v7)
        goto LABEL_23;
LABEL_9:
      v3 = (uint64_t *)v3[1];
      if (!v3)
        goto LABEL_24;
    }
    if (v13 < 0)
      goto LABEL_9;
LABEL_23:
    v8 = v3;
    v3 = (uint64_t *)*v3;
  }
  while (v3);
LABEL_24:
  if (v8 == v2)
    goto LABEL_38;
  v14 = *((char *)v8 + 55);
  if (v14 >= 0)
    v15 = v8 + 4;
  else
    v15 = (const void *)v8[4];
  if (v14 >= 0)
    v16 = *((unsigned __int8 *)v8 + 55);
  else
    v16 = v8[5];
  if (v16 >= v7)
    v17 = v7;
  else
    v17 = v16;
  result = memcmp(v6, v15, v17);
  if (!(_DWORD)result)
  {
    if (v7 < v16)
      goto LABEL_38;
LABEL_36:
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v8[7];
    return result;
  }
  if ((result & 0x80000000) == 0)
    goto LABEL_36;
LABEL_38:
  v19 = operator new();
  *(_QWORD *)v19 = &off_1E3D37528;
  *(_QWORD *)(v19 + 8) = &off_1E3D36F98;
  *(_QWORD *)(v19 + 32) = 0;
  *(_QWORD *)(v19 + 24) = 0;
  *(_QWORD *)(v19 + 16) = v19 + 24;
  *(_QWORD *)(v19 + 48) = 0;
  *(_QWORD *)(v19 + 40) = v19 + 48;
  v191 = (uint64_t **)(v19 + 40);
  *(_QWORD *)(v19 + 56) = 0;
  *(_QWORD *)(v19 + 64) = 0;
  v188 = (sqlite3 **)(v19 + 64);
  v189 = v19;
  *(_QWORD *)(v19 + 72) = v19 + 64;
  *(_QWORD *)(v19 + 80) = 0;
  v20 = (void **)(v19 + 80);
  *(_QWORD *)(v19 + 88) = 0;
  *(_QWORD *)(v19 + 96) = 0;
  *(_WORD *)(v19 + 104) = 0;
  *(_QWORD *)(v19 + 128) = 0;
  *(_QWORD *)(v19 + 120) = 0;
  *(_QWORD *)(v19 + 112) = v19 + 120;
  *(_QWORD *)(v19 + 152) = 0;
  *(_QWORD *)(v19 + 144) = 0;
  v21 = v19 + 144;
  *(_QWORD *)(v19 + 168) = 0;
  v19 += 168;
  *(_QWORD *)(v19 - 32) = v21;
  *(_QWORD *)(v19 + 8) = 0;
  *(_QWORD *)(v19 - 8) = v19;
  *(_QWORD *)(v19 + 24) = 0;
  v184 = v19 + 24;
  v185 = v19;
  *(_QWORD *)(v19 + 16) = v19 + 24;
  v190 = (uint64_t **)(v19 + 16);
  *(_QWORD *)(v19 + 32) = 0;
  *(_QWORD *)(v19 + 48) = 0;
  *(_QWORD *)(v19 + 40) = v19 + 48;
  v182 = (uint64_t **)(v19 + 40);
  v183 = v19 + 48;
  *(_QWORD *)(v19 + 56) = 0;
  v22 = v19 + 64;
  if (*(char *)(a1 + 71) < 0)
  {
    sub_19C2B5238((_BYTE *)v22, *(void **)(a1 + 48), *(_QWORD *)(a1 + 56));
  }
  else
  {
    *(_OWORD *)v22 = *(_OWORD *)v186;
    *(_QWORD *)(v22 + 16) = *(_QWORD *)(v186 + 16);
  }
  *(_BYTE *)(v189 + 256) = 0;
  *(CFAbsoluteTime *)(v189 + 264) = CFAbsoluteTimeGetCurrent();
  *(_BYTE *)(v189 + 272) = 0;
  if (*(char *)(a1 + 71) >= 0)
    v23 = (char *)v186;
  else
    v23 = *(char **)(a1 + 48);
  if (v23 && !*(_QWORD *)(v189 + 64))
  {
    *(_BYTE *)(v189 + 104) = 1;
    sub_19C31474C(v20, v23);
    *(_BYTE *)(v189 + 105) = 1;
    v24 = sqlite3_open_v2(":memory:", v188, 3145730, 0);
    if (v24 == 26 || v24 == 11)
    {
      v47 = sqlite3_exec(*v188, "BEGIN IMMEDIATE", 0, 0, 0);
      if (v47)
      {
        if (qword_1EDB97100 != -1)
          dispatch_once(&qword_1EDB97100, &unk_1E3D3BED0);
        v48 = (int *)qword_1EDB970F8;
        sqlite3_errmsg(*v188);
        sub_19C3E8FF4(v48, v49, "Could not execute SQL \"%s\", error message: %s\n", v50, v51, v52, v53, v54, (char)"BEGIN IMMEDIATE");
        if (v47 == 26 || v47 == 11)
        {
          exception = __cxa_allocate_exception(0x20uLL);
          *(_QWORD *)exception = off_1E3D36BC0;
          *((_QWORD *)exception + 1) = 0;
          *((_QWORD *)exception + 2) = 0;
          *((_QWORD *)exception + 3) = 0;
          sub_19C29D01C((void **)exception + 1, "SQLite database corrupted", 0x19uLL);
          __cxa_throw(exception, (struct type_info *)&unk_1E3D31E20, (void (*)(void *))sub_19C3146A4);
        }
      }
      if ((v47 == 0) != (v47 != 5))
      {
        if (qword_1EDB97100 != -1)
          dispatch_once(&qword_1EDB97100, &unk_1E3D3BED0);
        sub_19C3E8FF4((int *)qword_1EDB970F8, v41, "Could not begin transaction, error %d", v42, v43, v44, v45, v46, v47);
      }
      if (*(_BYTE *)(v189 + 104))
        sub_19C313C78(*(sqlite3 ***)(v189 + 72));
      v55 = sqlite3_exec(*v188, "COMMIT", 0, 0, 0);
      if (v55)
      {
        if (qword_1EDB97100 != -1)
          dispatch_once(&qword_1EDB97100, &unk_1E3D3BED0);
        v56 = (int *)qword_1EDB970F8;
        sqlite3_errmsg(*v188);
        sub_19C3E8FF4(v56, v57, "Could not execute SQL \"%s\", error message: %s\n", v58, v59, v60, v61, v62, (char)"COMMIT");
        if (v55 == 26 || v55 == 11)
        {
          v178 = __cxa_allocate_exception(0x20uLL);
          *(_QWORD *)v178 = off_1E3D36BC0;
          *((_QWORD *)v178 + 1) = 0;
          *((_QWORD *)v178 + 2) = 0;
          *((_QWORD *)v178 + 3) = 0;
          sub_19C29D01C((void **)v178 + 1, "SQLite database corrupted", 0x19uLL);
          __cxa_throw(v178, (struct type_info *)&unk_1E3D31E20, (void (*)(void *))sub_19C3146A4);
        }
        if (qword_1EDB97100 != -1)
          dispatch_once(&qword_1EDB97100, &unk_1E3D3BED0);
        sub_19C3E8FF4((int *)qword_1EDB970F8, v63, "Could not commit transaction, error %d", v64, v65, v66, v67, v68, v55);
      }
    }
    else
    {
      if (v24)
      {
        v179 = __cxa_allocate_exception(0x20uLL);
        *(_QWORD *)v179 = off_1E3D36BC0;
        *((_QWORD *)v179 + 2) = 0;
        *((_QWORD *)v179 + 3) = 0;
        *((_QWORD *)v179 + 1) = 0;
        sub_19C29D01C((void **)v179 + 1, "SQLite database open failure", 0x1CuLL);
        __cxa_throw(v179, (struct type_info *)&unk_1E3D31E20, (void (*)(void *))sub_19C3146A4);
      }
      if (stat(v23, &v193))
      {
        v25 = sub_19C31452C(v188, "BEGIN IMMEDIATE");
        v32 = v25;
        if ((v25 == 0) != (v25 != 5))
        {
          if (qword_1EDB97100 != -1)
            dispatch_once(&qword_1EDB97100, &unk_1E3D3BED0);
          sub_19C3E8FF4((int *)qword_1EDB970F8, v26, "Could not begin transaction, error %d", v27, v28, v29, v30, v31, v32);
        }
        if (*(_BYTE *)(v189 + 104))
          sub_19C313C78(*(sqlite3 ***)(v189 + 72));
        v33 = sub_19C31452C(v188, "COMMIT");
        v40 = v33;
        if (v33)
        {
          if (qword_1EDB97100 != -1)
            dispatch_once(&qword_1EDB97100, &unk_1E3D3BED0);
          sub_19C3E8FF4((int *)qword_1EDB970F8, v34, "Could not commit transaction, error %d", v35, v36, v37, v38, v39, v40);
        }
      }
      else
      {
        sub_19C314780((uint64_t)v188, 0);
      }
    }
  }
  sub_19C313888(*(char **)(v189 + 168));
  *(_QWORD *)(v189 + 168) = 0;
  *(_QWORD *)(v189 + 176) = 0;
  *(_QWORD *)(v189 + 160) = v185;
  sub_19C2EAC08(*(char **)(v189 + 216));
  *(_QWORD *)(v189 + 216) = 0;
  *(_QWORD *)(v189 + 224) = 0;
  *(_QWORD *)(v189 + 208) = v183;
  sub_19C2EAC08(*(char **)(v189 + 192));
  *(_QWORD *)(v189 + 192) = 0;
  *(_QWORD *)(v189 + 200) = 0;
  *(_QWORD *)(v189 + 184) = v184;
  v69 = operator new();
  v70 = *v188;
  *(_QWORD *)v69 = 0;
  *(_QWORD *)(v69 + 8) = 0;
  *(_QWORD *)(v69 + 16) = v70;
  *(_DWORD *)(v69 + 24) = 1;
  sub_19C3A48A0(v69, "SELECT * FROM MetaData");
  v71 = operator new();
  v72 = *v188;
  *(_QWORD *)v71 = 0;
  *(_QWORD *)(v71 + 8) = 0;
  *(_QWORD *)(v71 + 16) = v72;
  *(_DWORD *)(v71 + 24) = 1;
  sub_19C3A48A0(v71, "SELECT * FROM RecipientByLangMatrix");
  v73 = operator new();
  v74 = *v188;
  *(_QWORD *)v73 = 0;
  *(_QWORD *)(v73 + 8) = 0;
  *(_QWORD *)(v73 + 16) = v74;
  *(_DWORD *)(v73 + 24) = 1;
  sub_19C3A48A0(v73, "SELECT * FROM EmojiByApp");
  v75 = operator new();
  v76 = *v188;
  *(_QWORD *)v75 = 0;
  *(_QWORD *)(v75 + 8) = 0;
  *(_QWORD *)(v75 + 16) = v76;
  *(_DWORD *)(v75 + 24) = 1;
  v192 = v75;
  sub_19C3A48A0(v75, "SELECT * FROM OfflineAdaptationTimeByApp");
  v204 = 0uLL;
  v205 = 0;
  __p = 0uLL;
  v203 = 0;
  while (1)
  {
    v77 = sqlite3_step(*(sqlite3_stmt **)(v69 + 8));
    if (v77 != 100)
      break;
    v78 = (const char *)sqlite3_column_blob(*(sqlite3_stmt **)(v69 + 8), 0);
    v79 = v78;
    if (!v78)
    {
      HIBYTE(v201) = 0;
      LOBYTE(__dst) = 0;
      if (SHIBYTE(v205) < 0)
        goto LABEL_96;
      goto LABEL_97;
    }
    v80 = strlen(v78);
    if (v80 > 0x7FFFFFFFFFFFFFF7)
      sub_19C2A1A54();
    v81 = v80;
    if (v80 >= 0x17)
    {
      v83 = (v80 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v80 | 7) != 0x17)
        v83 = v80 | 7;
      v84 = v83 + 1;
      p_dst = (__int128 *)operator new(v83 + 1);
      *((_QWORD *)&__dst + 1) = v81;
      v201 = v84 | 0x8000000000000000;
      *(_QWORD *)&__dst = p_dst;
LABEL_94:
      memmove(p_dst, v79, v81);
      goto LABEL_95;
    }
    HIBYTE(v201) = v80;
    p_dst = &__dst;
    if (v80)
      goto LABEL_94;
LABEL_95:
    *((_BYTE *)p_dst + v81) = 0;
    if (SHIBYTE(v205) < 0)
LABEL_96:
      operator delete((void *)v204);
LABEL_97:
    v205 = v201;
    v204 = __dst;
    v85 = HIBYTE(v201);
    if (v201 < 0)
      v85 = *((_QWORD *)&v204 + 1);
    if (v85 == 7)
    {
      v86 = &v204;
      if (v201 < 0)
        v86 = (__int128 *)v204;
      v87 = *(_DWORD *)v86;
      v88 = *(_DWORD *)((char *)v86 + 3);
      if (v87 == 1936876886 && v88 == 1852795251)
      {
        v90 = (const char *)sqlite3_column_blob(*(sqlite3_stmt **)(v69 + 8), 1);
        v91 = v90;
        if (v90)
        {
          v92 = strlen(v90);
          if (v92 > 0x7FFFFFFFFFFFFFF7)
            sub_19C2A1A54();
          v93 = v92;
          if (v92 >= 0x17)
          {
            v95 = (v92 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v92 | 7) != 0x17)
              v95 = v92 | 7;
            v96 = v95 + 1;
            v94 = (__int128 *)operator new(v95 + 1);
            *((_QWORD *)&__dst + 1) = v93;
            v201 = v96 | 0x8000000000000000;
            *(_QWORD *)&__dst = v94;
          }
          else
          {
            HIBYTE(v201) = v92;
            v94 = &__dst;
            if (!v92)
            {
LABEL_118:
              *((_BYTE *)v94 + v93) = 0;
              if (SHIBYTE(v203) < 0)
LABEL_81:
                operator delete((void *)__p);
LABEL_82:
              __p = __dst;
              v203 = v201;
              continue;
            }
          }
          memmove(v94, v91, v93);
          goto LABEL_118;
        }
        HIBYTE(v201) = 0;
        LOBYTE(__dst) = 0;
        if (SHIBYTE(v203) < 0)
          goto LABEL_81;
        goto LABEL_82;
      }
    }
  }
  if (v77 == 26 || v77 == 11)
  {
    v173 = __cxa_allocate_exception(0x20uLL);
    *(_QWORD *)v173 = off_1E3D36BC0;
    *((_QWORD *)v173 + 1) = 0;
    *((_QWORD *)v173 + 2) = 0;
    *((_QWORD *)v173 + 3) = 0;
    sub_19C29D01C((void **)v173 + 1, "SQLite database corrupted", 0x19uLL);
    __cxa_throw(v173, (struct type_info *)&unk_1E3D31E20, (void (*)(void *))sub_19C3146A4);
  }
  sub_19C3A4A38(v69);
  v181 = SHIBYTE(v203);
  v180 = (void *)__p;
  if (v203 >= 0)
    p_p = &__p;
  else
    p_p = (__int128 *)__p;
  if (v203 >= 0)
    v99 = HIBYTE(v203);
  else
    v99 = *((_QWORD *)&__p + 1);
  if (v99 >= 3)
    v100 = 3;
  else
    v100 = v99;
  v101 = memcmp(p_p, "3.1", v100);
  if (v101)
  {
    if ((v101 & 0x80000000) == 0)
      goto LABEL_151;
LABEL_137:
    sub_19C3139A4((uint64_t)v188);
    sub_19C313C78(v188);
    goto LABEL_212;
  }
  if (v99 < 3)
    goto LABEL_137;
LABEL_151:
  while (2)
  {
    v110 = sqlite3_step(*(sqlite3_stmt **)(v192 + 8));
    if (v110 == 100)
    {
      v102 = sqlite3_column_double(*(sqlite3_stmt **)(v192 + 8), 1);
      v103 = (const char *)sqlite3_column_blob(*(sqlite3_stmt **)(v192 + 8), 0);
      v104 = v103;
      if (!v103)
      {
        HIBYTE(v201) = 0;
        LOBYTE(__dst) = 0;
        goto LABEL_149;
      }
      v105 = strlen(v103);
      if (v105 > 0x7FFFFFFFFFFFFFF7)
        sub_19C2A1A54();
      v106 = v105;
      if (v105 >= 0x17)
      {
        v108 = (v105 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v105 | 7) != 0x17)
          v108 = v105 | 7;
        v109 = v108 + 1;
        v107 = (__int128 *)operator new(v108 + 1);
        *((_QWORD *)&__dst + 1) = v106;
        v201 = v109 | 0x8000000000000000;
        *(_QWORD *)&__dst = v107;
      }
      else
      {
        HIBYTE(v201) = v105;
        v107 = &__dst;
        if (!v105)
          goto LABEL_148;
      }
      memmove(v107, v104, v106);
LABEL_148:
      *((_BYTE *)v107 + v106) = 0;
LABEL_149:
      *((double *)sub_19C313F04(v182, (const void **)&__dst, (uint64_t)&__dst) + 7) = v102;
      if (SHIBYTE(v201) < 0)
        operator delete((void *)__dst);
      continue;
    }
    break;
  }
  if (v110 == 26 || v110 == 11)
  {
    v174 = __cxa_allocate_exception(0x20uLL);
    *(_QWORD *)v174 = off_1E3D36BC0;
    *((_QWORD *)v174 + 1) = 0;
    *((_QWORD *)v174 + 2) = 0;
    *((_QWORD *)v174 + 3) = 0;
    sub_19C29D01C((void **)v174 + 1, "SQLite database corrupted", 0x19uLL);
    __cxa_throw(v174, (struct type_info *)&unk_1E3D31E20, (void (*)(void *))sub_19C3146A4);
  }
  sub_19C3A4A38(v192);
  __dst = 0uLL;
  v201 = 0;
  v198 = 0uLL;
  v199 = 0;
  while (2)
  {
    v112 = sqlite3_step(*(sqlite3_stmt **)(v71 + 8));
    if (v112 == 100)
    {
      v113 = (const char *)sqlite3_column_blob(*(sqlite3_stmt **)(v71 + 8), 0);
      v114 = v113;
      if (v113)
      {
        v115 = strlen(v113);
        if (v115 > 0x7FFFFFFFFFFFFFF7)
          sub_19C2A1A54();
        v116 = v115;
        if (v115 >= 0x17)
        {
          v118 = (v115 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v115 | 7) != 0x17)
            v118 = v115 | 7;
          v119 = v118 + 1;
          v117 = (__int128 *)operator new(v118 + 1);
          *((_QWORD *)&v196 + 1) = v116;
          v197 = v119 | 0x8000000000000000;
          *(_QWORD *)&v196 = v117;
        }
        else
        {
          HIBYTE(v197) = v115;
          v117 = &v196;
          if (!v115)
          {
LABEL_169:
            *((_BYTE *)v117 + v116) = 0;
            if (SHIBYTE(v201) < 0)
              goto LABEL_170;
            goto LABEL_171;
          }
        }
        memmove(v117, v114, v116);
        goto LABEL_169;
      }
      HIBYTE(v197) = 0;
      LOBYTE(v196) = 0;
      if (SHIBYTE(v201) < 0)
LABEL_170:
        operator delete((void *)__dst);
LABEL_171:
      __dst = v196;
      v201 = v197;
      v120 = (const char *)sqlite3_column_blob(*(sqlite3_stmt **)(v71 + 8), 1);
      v121 = v120;
      if (v120)
      {
        v122 = strlen(v120);
        if (v122 > 0x7FFFFFFFFFFFFFF7)
          sub_19C2A1A54();
        v123 = v122;
        if (v122 >= 0x17)
        {
          v125 = (v122 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v122 | 7) != 0x17)
            v125 = v122 | 7;
          v126 = v125 + 1;
          v124 = (__int128 *)operator new(v125 + 1);
          *((_QWORD *)&v196 + 1) = v123;
          v197 = v126 | 0x8000000000000000;
          *(_QWORD *)&v196 = v124;
        }
        else
        {
          HIBYTE(v197) = v122;
          v124 = &v196;
          if (!v122)
          {
LABEL_182:
            *((_BYTE *)v124 + v123) = 0;
            if (SHIBYTE(v199) < 0)
              goto LABEL_183;
            goto LABEL_184;
          }
        }
        memmove(v124, v121, v123);
        goto LABEL_182;
      }
      HIBYTE(v197) = 0;
      LOBYTE(v196) = 0;
      if (SHIBYTE(v199) < 0)
LABEL_183:
        operator delete((void *)v198);
LABEL_184:
      v198 = v196;
      v199 = v197;
      v127 = sqlite3_column_int(*(sqlite3_stmt **)(v71 + 8), 2);
      v128 = sub_19C314058((uint64_t **)(v185 - 8), (const void **)&__dst, (uint64_t)&__dst);
      *((_DWORD *)sub_19C3141E4(v128 + 7, (const void **)&v198, (uint64_t)&v198) + 14) = v127;
      continue;
    }
    break;
  }
  if (v112 == 26 || v112 == 11)
  {
    v175 = __cxa_allocate_exception(0x20uLL);
    *(_QWORD *)v175 = off_1E3D36BC0;
    *((_QWORD *)v175 + 1) = 0;
    *((_QWORD *)v175 + 2) = 0;
    *((_QWORD *)v175 + 3) = 0;
    sub_19C29D01C((void **)v175 + 1, "SQLite database corrupted", 0x19uLL);
    __cxa_throw(v175, (struct type_info *)&unk_1E3D31E20, (void (*)(void *))sub_19C3146A4);
  }
  sub_19C3A4A38(v71);
  v196 = 0uLL;
  v197 = 0;
  while (2)
  {
    v130 = sqlite3_step(*(sqlite3_stmt **)(v73 + 8));
    if (v130 == 100)
    {
      v131 = (const char *)sqlite3_column_blob(*(sqlite3_stmt **)(v73 + 8), 0);
      v132 = v131;
      if (v131)
      {
        v133 = strlen(v131);
        if (v133 > 0x7FFFFFFFFFFFFFF7)
          sub_19C2A1A54();
        v134 = v133;
        if (v133 >= 0x17)
        {
          v136 = (v133 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v133 | 7) != 0x17)
            v136 = v133 | 7;
          v137 = v136 + 1;
          v135 = (__int128 *)operator new(v136 + 1);
          *((_QWORD *)&v194 + 1) = v134;
          v195 = v137 | 0x8000000000000000;
          *(_QWORD *)&v194 = v135;
        }
        else
        {
          HIBYTE(v195) = v133;
          v135 = &v194;
          if (!v133)
          {
LABEL_202:
            *((_BYTE *)v135 + v134) = 0;
            if (SHIBYTE(v197) < 0)
              goto LABEL_203;
            goto LABEL_204;
          }
        }
        memmove(v135, v132, v134);
        goto LABEL_202;
      }
      HIBYTE(v195) = 0;
      LOBYTE(v194) = 0;
      if (SHIBYTE(v197) < 0)
LABEL_203:
        operator delete((void *)v196);
LABEL_204:
      v196 = v194;
      v197 = v195;
      v138 = sqlite3_column_int(*(sqlite3_stmt **)(v73 + 8), 1);
      v139 = sqlite3_column_double(*(sqlite3_stmt **)(v73 + 8), 2);
      v140 = sub_19C314364(v190, (const void **)&v196, (uint64_t)&v196);
      *((_DWORD *)v140 + 14) = v138;
      *((double *)v140 + 8) = v139;
      continue;
    }
    break;
  }
  if (v130 == 26 || v130 == 11)
  {
    v176 = __cxa_allocate_exception(0x20uLL);
    *(_QWORD *)v176 = off_1E3D36BC0;
    *((_QWORD *)v176 + 1) = 0;
    *((_QWORD *)v176 + 2) = 0;
    *((_QWORD *)v176 + 3) = 0;
    sub_19C29D01C((void **)v176 + 1, "SQLite database corrupted", 0x19uLL);
    __cxa_throw(v176, (struct type_info *)&unk_1E3D31E20, (void (*)(void *))sub_19C3146A4);
  }
  sub_19C3A4A38(v73);
  if (SHIBYTE(v197) < 0)
  {
    operator delete((void *)v196);
    if (SHIBYTE(v199) < 0)
      goto LABEL_271;
LABEL_211:
    if ((SHIBYTE(v201) & 0x80000000) == 0)
      goto LABEL_212;
LABEL_272:
    operator delete((void *)__dst);
    if (v181 < 0)
      goto LABEL_273;
LABEL_213:
    if (SHIBYTE(v205) < 0)
LABEL_274:
      operator delete((void *)v204);
  }
  else
  {
    if ((SHIBYTE(v199) & 0x80000000) == 0)
      goto LABEL_211;
LABEL_271:
    operator delete((void *)v198);
    if (SHIBYTE(v201) < 0)
      goto LABEL_272;
LABEL_212:
    if ((v181 & 0x80000000) == 0)
      goto LABEL_213;
LABEL_273:
    operator delete(v180);
    if (SHIBYTE(v205) < 0)
      goto LABEL_274;
  }
  v142 = sub_19C3A495C(v192);
  MEMORY[0x1A1AD355C](v142, 0x1020C4055CCDE27);
  v143 = sub_19C3A495C(v73);
  MEMORY[0x1A1AD355C](v143, 0x1020C4055CCDE27);
  v144 = sub_19C3A495C(v71);
  MEMORY[0x1A1AD355C](v144, 0x1020C4055CCDE27);
  v145 = sub_19C3A495C(v69);
  MEMORY[0x1A1AD355C](v145, 0x1020C4055CCDE27);
  HIBYTE(v205) = 2;
  strcpy((char *)&v204, "en");
  v207 = 2;
  strcpy((char *)v206, "fr");
  v209 = 2;
  strcpy((char *)v208, "it");
  v211 = 2;
  strcpy((char *)v210, "de");
  v213 = 2;
  strcpy((char *)v212, "es");
  v215 = 2;
  strcpy((char *)v214, "pt");
  sub_19C39D250(&__p, (uint64_t)&v204, 6uLL);
  if ((v215 & 0x80000000) == 0)
  {
    if ((v213 & 0x80000000) == 0)
      goto LABEL_216;
LABEL_225:
    operator delete(v212[0]);
    if (v211 < 0)
      goto LABEL_226;
LABEL_217:
    if ((v209 & 0x80000000) == 0)
      goto LABEL_218;
LABEL_227:
    operator delete(v208[0]);
    if (v207 < 0)
      goto LABEL_228;
LABEL_219:
    if ((SHIBYTE(v205) & 0x80000000) == 0)
      goto LABEL_220;
LABEL_229:
    operator delete((void *)v204);
    goto LABEL_220;
  }
  operator delete(v214[0]);
  if (v213 < 0)
    goto LABEL_225;
LABEL_216:
  if ((v211 & 0x80000000) == 0)
    goto LABEL_217;
LABEL_226:
  operator delete(v210[0]);
  if (v209 < 0)
    goto LABEL_227;
LABEL_218:
  if ((v207 & 0x80000000) == 0)
    goto LABEL_219;
LABEL_228:
  operator delete(v206[0]);
  if (SHIBYTE(v205) < 0)
    goto LABEL_229;
LABEL_220:
  v146 = *((_QWORD *)&__p + 1);
  v147 = (const void **)__p;
  if ((_QWORD)__p == *((_QWORD *)&__p + 1))
  {
    v149 = (const void **)__p;
    if (!(_QWORD)__p)
      goto LABEL_238;
  }
  else
  {
    do
    {
      v148 = __p;
      *((double *)sub_19C2EAA88(v191, v147, (uint64_t)v147) + 7) = 1.0
                                                                / (double)(0xAAAAAAAAAAAAAAABLL * ((v146 - v148) >> 3));
      v147 += 3;
      v146 = *((_QWORD *)&__p + 1);
    }
    while (v147 != *((const void ***)&__p + 1));
    v149 = (const void **)__p;
    if (!(_QWORD)__p)
      goto LABEL_238;
  }
  v150 = v149;
  if (v147 != v149)
  {
    do
    {
      if (*((char *)v147 - 1) < 0)
        operator delete((void *)*(v147 - 3));
      v147 -= 3;
    }
    while (v147 != v149);
    v150 = (const void **)__p;
  }
  *((_QWORD *)&__p + 1) = v149;
  operator delete(v150);
LABEL_238:
  v151 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_USER_INITIATED, 0);
  *(_QWORD *)(v189 + 280) = dispatch_queue_create("com.apple.LanguageModeling.LanguageLikelihoodModel", v151);
  CFAllocatorGetDefault();
  v152 = atomic_load((unsigned __int8 *)&qword_1EDB96EA8);
  if ((v152 & 1) == 0 && __cxa_guard_acquire(&qword_1EDB96EA8))
  {
    qword_1EE41AB10 = 0;
    unk_1EE41AB20 = 0u;
    unk_1EE41AB30 = 0u;
    qword_1EDB96EB8 = _CFRuntimeRegisterClass();
    __cxa_guard_release(&qword_1EDB96EA8);
  }
  result = _CFRuntimeCreateInstance();
  *(_QWORD *)(result + 24) = v189;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  v153 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  if (v153)
  {
    v154 = *(uint64_t ***)(a1 + 40);
    v156 = v154 + 1;
    v155 = v154[1];
    if (v155)
    {
      v157 = *(_BYTE *)(a1 + 71);
      if (v157 >= 0)
        v158 = (const void *)v186;
      else
        v158 = *(const void **)(a1 + 48);
      if (v157 >= 0)
        v159 = *(unsigned __int8 *)(a1 + 71);
      else
        v159 = *(_QWORD *)(a1 + 56);
      while (1)
      {
        v160 = v155;
        v163 = (const void *)v155[4];
        v161 = v155 + 4;
        v162 = v163;
        v164 = *((char *)v161 + 23);
        if (v164 >= 0)
          v165 = v161;
        else
          v165 = v162;
        if (v164 >= 0)
          v166 = *((unsigned __int8 *)v161 + 23);
        else
          v166 = v161[1];
        if (v166 >= v159)
          v167 = v159;
        else
          v167 = v166;
        v168 = memcmp(v158, v165, v167);
        if (v168)
        {
          if (v168 < 0)
            goto LABEL_247;
LABEL_261:
          result = memcmp(v165, v158, v167);
          if ((_DWORD)result)
          {
            if ((result & 0x80000000) == 0)
              goto LABEL_279;
          }
          else if (v166 >= v159)
          {
LABEL_279:
            v169 = v160;
            goto LABEL_280;
          }
          v155 = (uint64_t *)v160[1];
          if (!v155)
          {
            v156 = (uint64_t **)(v160 + 1);
            goto LABEL_268;
          }
        }
        else
        {
          if (v159 >= v166)
            goto LABEL_261;
LABEL_247:
          v155 = (uint64_t *)*v160;
          v156 = (uint64_t **)v160;
          if (!*v160)
            goto LABEL_268;
        }
      }
    }
    v160 = (uint64_t *)(v154 + 1);
LABEL_268:
    v169 = operator new(0x40uLL);
    v170 = v169 + 4;
    if (*(char *)(a1 + 71) < 0)
    {
      sub_19C2B5238(v170, *(void **)(a1 + 48), *(_QWORD *)(a1 + 56));
    }
    else
    {
      *(_OWORD *)v170 = *(_OWORD *)v186;
      v169[6] = *(_QWORD *)(v186 + 16);
    }
    v169[7] = 0;
    *v169 = 0;
    v169[1] = 0;
    v169[2] = v160;
    *v156 = v169;
    v171 = (uint64_t *)**v154;
    v172 = v169;
    if (v171)
    {
      *v154 = v171;
      v172 = *v156;
    }
    result = (uint64_t)sub_19C2A2310(v154[1], v172);
    v154[2] = (uint64_t *)((char *)v154[2] + 1);
LABEL_280:
    v169[7] = v153;
  }
  return result;
}

#error "19C3E128C: call analysis failed (funcsize=37)"

void sub_19C3E09B0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, char **a15, char **a16, char **a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  uint64_t v21;
  void *v24;
  _BYTE *exception;
  char *v26;

  if (*(char *)(v21 + 31) < 0)
    operator delete(*(void **)(v21 + 8));
  std::exception::~exception((std::exception *)v21);
  __cxa_free_exception(v24);
  if (a2 == 2)
  {
    __cxa_begin_catch(a1);
    exception = __cxa_allocate_exception(0x20uLL);
    v26 = (char *)operator new(0x38uLL);
    strcpy(v26, "Failed to create LanguageLikelihoodModel database");
    *(_QWORD *)exception = off_1E3D38838;
    sub_19C2B5238(exception + 8, v26, 0x31uLL);
    __cxa_throw(exception, (struct type_info *)&unk_1E3D32968, (void (*)(void *))sub_19C3123E4);
  }
  if (*(char *)(a21 + 255) < 0)
    operator delete(*a11);
  sub_19C2EAC08(*a15);
  sub_19C2EAC08(*a16);
  sub_19C313888(*a17);
  sub_19C3138D8(a20);
  sub_19C2EAC08(*(char **)(a21 + 48));
  sub_19C2EAC08(*(char **)(a21 + 24));
  MEMORY[0x1A1AD355C](a21, 0x10B3C40E67E97D4);
  JUMPOUT(0x19C3E1234);
}

#error "19C3E0AB4: call analysis failed (funcsize=58)"

void sub_19C3E0ADC(void *a1, int a2)
{
  _BYTE *exception;
  char *v5;

  __cxa_end_catch();
  if (a2 == 2)
  {
    __cxa_begin_catch(a1);
    exception = __cxa_allocate_exception(0x20uLL);
    v5 = (char *)operator new(0x38uLL);
    strcpy(v5, "Failed to create LanguageLikelihoodModel database");
    *(_QWORD *)exception = off_1E3D38838;
    sub_19C2B5238(exception + 8, v5, 0x31uLL);
    __cxa_throw(exception, (struct type_info *)&unk_1E3D32968, (void (*)(void *))sub_19C3123E4);
  }
  JUMPOUT(0x19C3E11C4);
}

void sub_19C3E0AF0()
{
  JUMPOUT(0x19C3E11DCLL);
}

void sub_19C3E0B14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, char **a15, char **a16, char **a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  char a68;
  void *a69;
  char a73;
  void *a74;
  char a75;
  void *a76;

  if (SLOBYTE(STACK[0x23F]) < 0)
  {
    operator delete((void *)STACK[0x228]);
    if ((SLOBYTE(STACK[0x227]) & 0x80000000) == 0)
    {
LABEL_3:
      if ((SLOBYTE(STACK[0x20F]) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((SLOBYTE(STACK[0x227]) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete((void *)STACK[0x210]);
  if ((SLOBYTE(STACK[0x20F]) & 0x80000000) == 0)
  {
LABEL_4:
    if ((a75 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a76);
  if ((a75 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a73 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a74);
  if ((a73 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a68 & 0x80000000) == 0)
      goto LABEL_14;
LABEL_13:
    operator delete(a63);
LABEL_14:
    if (*(char *)(a21 + 255) < 0)
      operator delete(*a11);
    sub_19C2EAC08(*a15);
    sub_19C2EAC08(*a16);
    sub_19C313888(*a17);
    sub_19C3138D8(a20);
    JUMPOUT(0x19C3E1208);
  }
LABEL_12:
  operator delete(a69);
  if ((a68 & 0x80000000) == 0)
    goto LABEL_14;
  goto LABEL_13;
}

void sub_19C3E0BA8()
{
  JUMPOUT(0x19C3E10FCLL);
}

void sub_19C3E0BBC()
{
  JUMPOUT(0x19C3E1110);
}

void sub_19C3E0BCC()
{
  JUMPOUT(0x19C3E1118);
}

void sub_19C3E0BDC()
{
  JUMPOUT(0x19C3E1130);
}

void sub_19C3E0BEC()
{
  JUMPOUT(0x19C3E1138);
}

void sub_19C3E0BFC()
{
  JUMPOUT(0x19C3E1150);
}

void sub_19C3E0C0C()
{
  uint64_t v0;

  MEMORY[0x1A1AD355C](v0, 0x1020C4055CCDE27);
  JUMPOUT(0x19C3E116CLL);
}

void sub_19C3E0C44()
{
  JUMPOUT(0x19C3E0C4CLL);
}

void sub_19C3E0DD4(_Unwind_Exception *a1, int a2)
{
  uint64_t v2;
  void **v3;
  void *v5;

  if (a2)
  {
    if (*(char *)(v2 + 31) < 0)
      operator delete(*v3);
    std::exception::~exception((std::exception *)v2);
    __cxa_free_exception(v5);
    sub_19C2CDAC8(a1);
  }
  _Unwind_Resume(a1);
}

void sub_19C3E0E00(void *a1, int a2)
{
  _BYTE *exception;
  char *v5;

  __cxa_end_catch();
  if (a2 == 2)
  {
    __cxa_begin_catch(a1);
    exception = __cxa_allocate_exception(0x20uLL);
    v5 = (char *)operator new(0x38uLL);
    strcpy(v5, "Failed to create LanguageLikelihoodModel database");
    *(_QWORD *)exception = off_1E3D38838;
    sub_19C2B5238(exception + 8, v5, 0x31uLL);
    __cxa_throw(exception, (struct type_info *)&unk_1E3D32968, (void (*)(void *))sub_19C3123E4);
  }
  JUMPOUT(0x19C3E11C4);
}

void sub_19C3E0E18()
{
  JUMPOUT(0x19C3E0E20);
}

void sub_19C3E0EA8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, char **a15, char **a16, char **a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  void *v21;

  operator delete(v21);
  __cxa_end_catch();
  if (*(char *)(a21 + 255) < 0)
    operator delete(*a11);
  sub_19C2EAC08(*a15);
  sub_19C2EAC08(*a16);
  sub_19C313888(*a17);
  sub_19C3138D8(a20);
  sub_19C2EAC08(*(char **)(a21 + 48));
  sub_19C2EAC08(*(char **)(a21 + 24));
  MEMORY[0x1A1AD355C](a21, 0x10B3C40E67E97D4);
  JUMPOUT(0x19C3E1234);
}

void sub_19C3E0EF8()
{
  JUMPOUT(0x19C3E0F00);
}

void sub_19C3E0F24()
{
  uint64_t v0;
  void **v1;
  void *v2;

  if (*(char *)(v0 + 31) < 0)
    operator delete(*v1);
  std::exception::~exception((std::exception *)v0);
  __cxa_free_exception(v2);
  JUMPOUT(0x19C3E10ACLL);
}

void sub_19C3E0F54()
{
  uint64_t v0;
  void **v1;
  void *v2;

  if (*(char *)(v0 + 31) < 0)
    operator delete(*v1);
  std::exception::~exception((std::exception *)v0);
  __cxa_free_exception(v2);
  JUMPOUT(0x19C3E10C8);
}

void sub_19C3E0F84(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  if (a60 < 0)
    operator delete(__p);
  JUMPOUT(0x19C3E108CLL);
}

void sub_19C3E0FA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60)
{
  uint64_t i;

  if (a59)
  {
    for (i = a60; i != a59; i -= 24)
    {
      if (*(char *)(i - 1) < 0)
        operator delete(*(void **)(i - 24));
    }
    JUMPOUT(0x19C3E0FF0);
  }
  JUMPOUT(0x19C3E0FF4);
}

void sub_19C3E1054()
{
  uint64_t v0;
  void **v1;
  void *v2;

  if (*(char *)(v0 + 31) < 0)
    operator delete(*v1);
  std::exception::~exception((std::exception *)v0);
  __cxa_free_exception(v2);
  JUMPOUT(0x19C3E108CLL);
}

void sub_19C3E1084(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,int a61,__int16 a62,char a63)
{
  char a64;

  if (a64 < 0)
    JUMPOUT(0x19C3E1098);
  JUMPOUT(0x19C3E10E4);
}

#error "19C3E11B8: call analysis failed (funcsize=98)"

void sub_19C3E12EC()
{
  __cxa_end_catch();
  JUMPOUT(0x19C3E0E28);
}

void sub_19C3E1300(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_19C3E130C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_19C2CDAC8(a1);
  _Unwind_Resume(a1);
}

void sub_19C3E131C()
{
  JUMPOUT(0x19C3E0E28);
}

_QWORD *sub_19C3E1328(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  __int128 v3;

  result = (_QWORD *)(a1 + 48);
  if (*(char *)(a2 + 71) < 0)
    return sub_19C2B5238(result, *(void **)(a2 + 48), *(_QWORD *)(a2 + 56));
  v3 = *(_OWORD *)(a2 + 48);
  result[2] = *(_QWORD *)(a2 + 64);
  *(_OWORD *)result = v3;
  return result;
}

void sub_19C3E1358(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
}

dispatch_queue_t sub_19C3E136C()
{
  NSObject *v0;
  dispatch_queue_t result;

  v0 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_USER_INITIATED, 0);
  result = dispatch_queue_create("com.apple.LanguageModeling.LanguageLikelihoodModelCreation", v0);
  qword_1EDB96EE0 = (uint64_t)result;
  return result;
}

uint64_t sub_19C3E13A4(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E3D36598;
  dispatch_release(*(dispatch_object_t *)(a1 + 168));
  sub_19C365A24((_QWORD *)(a1 + 8));
  return a1;
}

void sub_19C3E13E0(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E3D36598;
  dispatch_release(*(dispatch_object_t *)(a1 + 168));
  sub_19C365A24((_QWORD *)(a1 + 8));
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C3E142C(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  uint64_t v3;
  _QWORD block[7];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  char v9;

  v6 = 0;
  v7 = &v6;
  v8 = 0x2000000000;
  v9 = 0;
  v2 = *(NSObject **)(a1 + 168);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = sub_19C3E2404;
  block[3] = &unk_1E3D3BC30;
  block[4] = &v6;
  block[5] = a1;
  block[6] = a2;
  dispatch_sync(v2, block);
  v3 = *((unsigned __int8 *)v7 + 24);
  _Block_object_dispose(&v6, 8);
  return v3;
}

uint64_t sub_19C3E14C0(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5)
{
  NSObject *v5;
  uint64_t v6;
  _QWORD v8[9];
  int v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;

  v10 = 0;
  v11 = &v10;
  v13 = 0;
  v12 = 0x2000000000;
  v5 = *(NSObject **)(a1 + 168);
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 0x40000000;
  v8[2] = sub_19C3E23C8;
  v8[3] = &unk_1E3D3BE70;
  v8[4] = &v10;
  v8[5] = a1;
  v8[6] = a2;
  v9 = a3;
  *(double *)&v8[7] = a5;
  v8[8] = a4;
  dispatch_sync(v5, v8);
  v6 = *((unsigned int *)v11 + 6);
  _Block_object_dispose(&v10, 8);
  return v6;
}

uint64_t sub_19C3E155C(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  uint64_t v3;
  _QWORD block[7];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  char v9;

  v6 = 0;
  v7 = &v6;
  v8 = 0x2000000000;
  v9 = 0;
  v2 = *(NSObject **)(a1 + 168);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = sub_19C3E2330;
  block[3] = &unk_1E3D3BC58;
  block[4] = &v6;
  block[5] = a1;
  block[6] = a2;
  dispatch_sync(v2, block);
  v3 = *((unsigned __int8 *)v7 + 24);
  _Block_object_dispose(&v6, 8);
  return v3;
}

uint64_t sub_19C3E15F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v3;
  uint64_t v4;
  _QWORD v6[8];
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  char v10;

  v7 = 0;
  v8 = &v7;
  v9 = 0x2000000000;
  v10 = 0;
  v3 = *(NSObject **)(a1 + 168);
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 0x40000000;
  v6[2] = sub_19C3E22F8;
  v6[3] = &unk_1E3D3BC80;
  v6[4] = &v7;
  v6[5] = a1;
  v6[6] = a2;
  v6[7] = a3;
  dispatch_sync(v3, v6);
  v4 = *((unsigned __int8 *)v8 + 24);
  _Block_object_dispose(&v7, 8);
  return v4;
}

void sub_19C3E1684(uint64_t a1, int a2, uint64_t a3)
{
  NSObject *v3;
  _QWORD block[6];
  int v5;

  v3 = *(NSObject **)(a1 + 168);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = sub_19C3E22E4;
  block[3] = &unk_1E3D3BCA8;
  v5 = a2;
  block[4] = a3;
  block[5] = a1;
  dispatch_sync(v3, block);
}

void sub_19C3E16E0(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  NSObject *v4;
  __int128 v5;
  _QWORD block[6];
  int v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  __n128 (*v11)(uint64_t, uint64_t);
  void (*v12)(uint64_t);
  void *__p;
  uint64_t v14;
  uint64_t v15;

  v8 = 0;
  v9 = &v8;
  v10 = 0x4002000000;
  v11 = sub_19C3E2250;
  v12 = sub_19C3E226C;
  v14 = 0;
  v15 = 0;
  __p = 0;
  v4 = *(NSObject **)(a1 + 168);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = sub_19C3E2280;
  block[3] = &unk_1E3D3BCD0;
  block[4] = &v8;
  block[5] = a1;
  v7 = a2;
  dispatch_sync(v4, block);
  if (*((char *)v9 + 63) < 0)
  {
    sub_19C2B5238((_BYTE *)a3, (void *)v9[5], v9[6]);
  }
  else
  {
    v5 = *(_OWORD *)(v9 + 5);
    *(_QWORD *)(a3 + 16) = v9[7];
    *(_OWORD *)a3 = v5;
  }
  _Block_object_dispose(&v8, 8);
  if (SHIBYTE(v15) < 0)
    operator delete(__p);
}

void sub_19C3E17C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  _Block_object_dispose(&a17, 8);
  if (a27 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_19C3E17E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v3;
  uint64_t v4;
  _QWORD v6[8];
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;

  v7 = 0;
  v8 = &v7;
  v10 = 0;
  v9 = 0x2000000000;
  v3 = *(NSObject **)(a1 + 168);
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 0x40000000;
  v6[2] = sub_19C3E21A8;
  v6[3] = &unk_1E3D3BCF8;
  v6[4] = &v7;
  v6[5] = a1;
  v6[6] = a2;
  v6[7] = a3;
  dispatch_sync(v3, v6);
  v4 = *((unsigned int *)v8 + 6);
  _Block_object_dispose(&v7, 8);
  return v4;
}

uint64_t sub_19C3E1878(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v3;
  uint64_t v4;
  _QWORD v6[8];
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;

  v7 = 0;
  v8 = &v7;
  v10 = 0;
  v9 = 0x2000000000;
  v3 = *(NSObject **)(a1 + 168);
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 0x40000000;
  v6[2] = sub_19C3E212C;
  v6[3] = &unk_1E3D3BD20;
  v6[4] = &v7;
  v6[5] = a1;
  v6[6] = a2;
  v6[7] = a3;
  dispatch_sync(v3, v6);
  v4 = *((unsigned int *)v8 + 6);
  _Block_object_dispose(&v7, 8);
  return v4;
}

uint64_t sub_19C3E1908(uint64_t a1, int a2)
{
  NSObject *v2;
  uint64_t v3;
  _QWORD block[6];
  int v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;

  v7 = 0;
  v8 = &v7;
  v10 = 0;
  v9 = 0x2000000000;
  v2 = *(NSObject **)(a1 + 168);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = sub_19C3E202C;
  block[3] = &unk_1E3D3BD48;
  block[4] = &v7;
  block[5] = a1;
  v6 = a2;
  dispatch_sync(v2, block);
  v3 = *((unsigned int *)v8 + 6);
  _Block_object_dispose(&v7, 8);
  return v3;
}

uint64_t sub_19C3E1998(uint64_t a1, int a2)
{
  NSObject *v2;
  uint64_t v3;
  _QWORD block[6];
  int v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;

  v7 = 0;
  v8 = &v7;
  v10 = 0;
  v9 = 0x2000000000;
  v2 = *(NSObject **)(a1 + 168);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = sub_19C3E1F2C;
  block[3] = &unk_1E3D3BD70;
  block[4] = &v7;
  block[5] = a1;
  v6 = a2;
  dispatch_sync(v2, block);
  v3 = *((unsigned int *)v8 + 6);
  _Block_object_dispose(&v7, 8);
  return v3;
}

double sub_19C3E1A28(uint64_t a1, int a2)
{
  NSObject *v2;
  double v3;
  _QWORD block[6];
  int v6;
  uint64_t v7;
  double *v8;
  uint64_t v9;
  uint64_t v10;

  v7 = 0;
  v8 = (double *)&v7;
  v9 = 0x2000000000;
  v10 = 0;
  v2 = *(NSObject **)(a1 + 168);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = sub_19C3E1E2C;
  block[3] = &unk_1E3D3BD98;
  block[4] = &v7;
  block[5] = a1;
  v6 = a2;
  dispatch_sync(v2, block);
  v3 = v8[3];
  _Block_object_dispose(&v7, 8);
  return v3;
}

void sub_19C3E1ABC(uint64_t a1, int a2, uint64_t a3)
{
  NSObject *v3;
  _QWORD block[6];
  int v5;

  v3 = *(NSObject **)(a1 + 168);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = sub_19C3E1E18;
  block[3] = &unk_1E3D3BDC0;
  v5 = a2;
  block[4] = a3;
  block[5] = a1;
  dispatch_sync(v3, block);
}

uint64_t sub_19C3E1B18(uint64_t a1, int a2)
{
  NSObject *v2;
  uint64_t v3;
  _QWORD block[6];
  int v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  char v10;

  v7 = 0;
  v8 = &v7;
  v9 = 0x2000000000;
  v10 = 0;
  v2 = *(NSObject **)(a1 + 168);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = sub_19C3E1DE0;
  block[3] = &unk_1E3D3BDE8;
  block[4] = &v7;
  block[5] = a1;
  v6 = a2;
  dispatch_sync(v2, block);
  v3 = *((unsigned __int8 *)v8 + 24);
  _Block_object_dispose(&v7, 8);
  return v3;
}

void sub_19C3E1BAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v3;
  _QWORD block[7];

  v3 = *(NSObject **)(a1 + 168);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = sub_19C3E1D98;
  block[3] = &unk_1E3D3BE08;
  block[4] = a1;
  block[5] = a2;
  block[6] = a3;
  dispatch_sync(v3, block);
}

void sub_19C3E1C08(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  _QWORD v3[6];

  v2 = *(NSObject **)(a1 + 168);
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 0x40000000;
  v3[2] = sub_19C3E1D64;
  v3[3] = &unk_1E3D3BE28;
  v3[4] = a1;
  v3[5] = a2;
  dispatch_sync(v2, v3);
}

void sub_19C3E1C60(uint64_t a1)
{
  NSObject *v1;
  _QWORD block[5];

  v1 = *(NSObject **)(a1 + 168);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = sub_19C3E1D1C;
  block[3] = &unk_1E3D3BE48;
  block[4] = a1;
  dispatch_sync(v1, block);
}

void sub_19C3E1CB8(uint64_t a1)
{
  NSObject *v1;
  _QWORD block[5];

  v1 = *(NSObject **)(a1 + 168);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = sub_19C3E1D10;
  block[3] = &unk_1E3D3BE90;
  block[4] = a1;
  dispatch_sync(v1, block);
}

void sub_19C3E1D10(uint64_t a1)
{
  sub_19C3633E8(*(_QWORD *)(a1 + 32) + 8);
}

void sub_19C3E1D1C(uint64_t a1)
{
  uint64_t v1;
  __CFNotificationCenter *LocalCenter;

  v1 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v1 + 160))
  {
    LocalCenter = CFNotificationCenterGetLocalCenter();
    CFNotificationCenterPostNotification(LocalCenter, CFSTR("VocabularyDidChange"), (const void *)(v1 + 8), 0, 0);
    *(_BYTE *)(v1 + 160) = 0;
  }
}

void sub_19C3E1D64(uint64_t a1)
{
  const void *v1;
  const void *v2;
  __CFNotificationCenter *LocalCenter;

  v1 = *(const void **)(a1 + 40);
  v2 = (const void *)(*(_QWORD *)(a1 + 32) + 8);
  LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterRemoveObserver(LocalCenter, v1, CFSTR("VocabularyDidChange"), v2);
}

void sub_19C3E1D98(_QWORD *a1)
{
  const void *v1;
  const void *v2;
  void (__cdecl *v3)(CFNotificationCenterRef, void *, CFNotificationName, const void *, CFDictionaryRef);
  __CFNotificationCenter *LocalCenter;

  v1 = (const void *)a1[5];
  v2 = (const void *)(a1[4] + 8);
  v3 = (void (__cdecl *)(CFNotificationCenterRef, void *, CFNotificationName, const void *, CFDictionaryRef))a1[6];
  LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterAddObserver(LocalCenter, v1, v3, CFSTR("VocabularyDidChange"), v2, CFNotificationSuspensionBehaviorHold);
}

BOOL sub_19C3E1DE0(uint64_t a1)
{
  _BOOL8 result;

  result = sub_19C36322C((_QWORD *)(*(_QWORD *)(a1 + 40) + 8), *(_DWORD *)(a1 + 48));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_19C3E1E18(uint64_t a1, __n128 a2)
{
  sub_19C362F90(*(_QWORD *)(a1 + 40) + 8, *(_DWORD *)(a1 + 48), *(_QWORD *)(a1 + 32), a2);
}

uint64_t sub_19C3E1E2C(uint64_t result)
{
  _QWORD *v1;
  int8x8_t v2;
  uint64_t v3;
  unint64_t v4;
  uint8x8_t v5;
  unint64_t v6;
  uint64_t **v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD **)(result + 40);
  v2 = (int8x8_t)v1[10];
  v3 = 0;
  if (v2)
  {
    v4 = *(unsigned int *)(result + 48);
    v5 = (uint8x8_t)vcnt_s8(v2);
    v5.i16[0] = vaddlv_u8(v5);
    if (v5.u32[0] > 1uLL)
    {
      v6 = *(unsigned int *)(result + 48);
      if (*(_QWORD *)&v2 <= v4)
        v6 = v4 % *(_QWORD *)&v2;
    }
    else
    {
      v6 = (v2.i32[0] - 1) & v4;
    }
    v7 = *(uint64_t ***)(v1[9] + 8 * v6);
    if (v7)
    {
      v8 = *v7;
      if (v8)
      {
        if (v5.u32[0] < 2uLL)
        {
          v9 = *(_QWORD *)&v2 - 1;
          while (1)
          {
            v11 = v8[1];
            if (v11 == v4)
            {
              if (*((_DWORD *)v8 + 4) == (_DWORD)v4)
                goto LABEL_22;
            }
            else if ((v11 & v9) != v6)
            {
              goto LABEL_23;
            }
            v8 = (uint64_t *)*v8;
            if (!v8)
              goto LABEL_23;
          }
        }
        do
        {
          v10 = v8[1];
          if (v10 == v4)
          {
            if (*((_DWORD *)v8 + 4) == (_DWORD)v4)
            {
LABEL_22:
              v3 = *(_QWORD *)(v1[14] + 24 * *((unsigned int *)v8 + 6) + 16);
              break;
            }
          }
          else
          {
            if (v10 >= *(_QWORD *)&v2)
              v10 %= *(_QWORD *)&v2;
            if (v10 != v6)
              break;
          }
          v8 = (uint64_t *)*v8;
        }
        while (v8);
      }
    }
  }
LABEL_23:
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = v3;
  return result;
}

uint64_t sub_19C3E1F2C(uint64_t result)
{
  _QWORD *v1;
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;

  v1 = *(_QWORD **)(result + 40);
  v2 = (int8x8_t)v1[10];
  if (v2)
  {
    v3 = *(unsigned int *)(result + 48);
    v4 = (uint8x8_t)vcnt_s8(v2);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = *(unsigned int *)(result + 48);
      if (*(_QWORD *)&v2 <= v3)
        v5 = v3 % *(_QWORD *)&v2;
    }
    else
    {
      v5 = (v2.i32[0] - 1) & v3;
    }
    v6 = *(uint64_t ***)(v1[9] + 8 * v5);
    if (v6)
    {
      v7 = *v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v2 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == v3)
            {
              if (*((_DWORD *)v7 + 4) == (_DWORD)v3)
                goto LABEL_23;
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (uint64_t *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == v3)
          {
            if (*((_DWORD *)v7 + 4) == (_DWORD)v3)
            {
LABEL_23:
              v11 = *(_DWORD *)(v1[14] + 24 * *((unsigned int *)v7 + 6) + 8);
              goto LABEL_22;
            }
          }
          else
          {
            if (v9 >= *(_QWORD *)&v2)
              v9 %= *(_QWORD *)&v2;
            if (v9 != v5)
              break;
          }
          v7 = (uint64_t *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = 0;
LABEL_22:
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = v11;
  return result;
}

uint64_t sub_19C3E202C(uint64_t result)
{
  _QWORD *v1;
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;

  v1 = *(_QWORD **)(result + 40);
  v2 = (int8x8_t)v1[10];
  if (v2)
  {
    v3 = *(unsigned int *)(result + 48);
    v4 = (uint8x8_t)vcnt_s8(v2);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = *(unsigned int *)(result + 48);
      if (*(_QWORD *)&v2 <= v3)
        v5 = v3 % *(_QWORD *)&v2;
    }
    else
    {
      v5 = (v2.i32[0] - 1) & v3;
    }
    v6 = *(uint64_t ***)(v1[9] + 8 * v5);
    if (v6)
    {
      v7 = *v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = *(_QWORD *)&v2 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == v3)
            {
              if (*((_DWORD *)v7 + 4) == (_DWORD)v3)
                goto LABEL_23;
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            v7 = (uint64_t *)*v7;
            if (!v7)
              goto LABEL_21;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == v3)
          {
            if (*((_DWORD *)v7 + 4) == (_DWORD)v3)
            {
LABEL_23:
              v11 = *(_DWORD *)(v1[14] + 24 * *((unsigned int *)v7 + 6));
              goto LABEL_22;
            }
          }
          else
          {
            if (v9 >= *(_QWORD *)&v2)
              v9 %= *(_QWORD *)&v2;
            if (v9 != v5)
              break;
          }
          v7 = (uint64_t *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  v11 = 0;
LABEL_22:
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = v11;
  return result;
}

uint64_t *sub_19C3E212C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t *result;
  unsigned int v6;
  uint64_t v7;
  int v8;

  v3 = a1[5];
  v2 = a1[6];
  v4 = (_QWORD *)a1[7];
  if (v4)
    *v4 = 0;
  result = sub_19C364A20((_QWORD *)(v3 + 32), v2);
  if (result)
  {
    v6 = *((_DWORD *)result + 10);
    v7 = *(_QWORD *)(v3 + 112);
    if (v4)
      *v4 = *(_QWORD *)(v7 + 24 * v6 + 16);
    v8 = *(_DWORD *)(v7 + 24 * v6 + 4);
  }
  else
  {
    v8 = 0;
  }
  *(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = v8;
  return result;
}

void sub_19C3E21A8(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t *v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  void *__p[2];
  char v9;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD **)(a1 + 56);
  sub_19C29CEF8(*(const __CFString **)(a1 + 48), __p);
  if (v3)
    *v3 = 0;
  v4 = sub_19C364A20((_QWORD *)(v2 + 32), (uint64_t)__p);
  if (!v4)
  {
    v7 = 0;
    if ((v9 & 0x80000000) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
  v5 = *((_DWORD *)v4 + 10);
  v6 = *(_QWORD *)(v2 + 112);
  if (v3)
    *v3 = *(_QWORD *)(v6 + 24 * v5 + 16);
  v7 = *(_DWORD *)(v6 + 24 * v5 + 4);
  if (v9 < 0)
LABEL_7:
    operator delete(__p[0]);
LABEL_8:
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v7;
}

__n128 sub_19C3E2250(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(__n128 *)(a1 + 40) = result;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_19C3E226C(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
}

double sub_19C3E2280(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  double result;
  __int128 v5;
  uint64_t v6;

  sub_19C362AC4((_QWORD *)(*(_QWORD *)(a1 + 40) + 8), *(_DWORD *)(a1 + 48), (uint64_t)&v5);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v3 = v2 + 40;
  if (*(char *)(v2 + 63) < 0)
    operator delete(*(void **)v3);
  result = *(double *)&v5;
  *(_OWORD *)v3 = v5;
  *(_QWORD *)(v3 + 16) = v6;
  return result;
}

void sub_19C3E22E4(uint64_t a1)
{
  sub_19C362914((_QWORD *)(*(_QWORD *)(a1 + 40) + 8), *(_DWORD *)(a1 + 48), *(_QWORD *)(a1 + 32));
}

BOOL sub_19C3E22F8(_QWORD *a1)
{
  _BOOL8 result;

  result = sub_19C3622D0(a1[5] + 8, a1[6], a1[7]);
  *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) = result;
  return result;
}

void sub_19C3E2330(_QWORD *a1)
{
  const __CFString *v2;
  uint64_t v3;
  uint64_t *v4;
  BOOL v5;
  void *__p[2];
  char v7;

  v2 = (const __CFString *)a1[6];
  if (v2)
  {
    v3 = a1[5];
    sub_19C29CEF8(v2, __p);
    v4 = sub_19C364A20((_QWORD *)(v3 + 32), (uint64_t)__p);
    if (v4)
    {
      v5 = *(_DWORD *)(*(_QWORD *)(v3 + 112) + 24 * *((unsigned int *)v4 + 10) + 4) == *(_DWORD *)(*(_QWORD *)(v3 + 112) + 24 * *((unsigned int *)v4 + 10));
      if (v7 < 0)
        goto LABEL_7;
    }
    else
    {
      v5 = 0;
      if (v7 < 0)
LABEL_7:
        operator delete(__p[0]);
    }
  }
  else
  {
    v5 = 0;
  }
  *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) = v5;
}

uint64_t sub_19C3E23C8(uint64_t a1)
{
  uint64_t result;

  result = sub_19C361EC8(*(_QWORD *)(a1 + 40) + 8, *(const __CFString **)(a1 + 48), *(_DWORD *)(a1 + 72), *(double *)(a1 + 56));
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t sub_19C3E2404(uint64_t a1)
{
  uint64_t result;

  result = sub_19C361D40(*(_QWORD *)(a1 + 40) + 8, *(const __CFArray **)(a1 + 48));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t sub_19C3E2438()
{
  uint64_t v0;
  NSObject *v1;
  uint64_t result;

  v0 = operator new();
  *(_QWORD *)v0 = &off_1E3D36598;
  *(_QWORD *)(v0 + 8) = &off_1E3D35298;
  *(_DWORD *)(v0 + 24) = -1073741825;
  *(_QWORD *)(v0 + 16) = 0xBFF0BDBFBFF0BDBFLL;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_DWORD *)(v0 + 64) = 1065353216;
  *(_OWORD *)(v0 + 72) = 0u;
  *(_OWORD *)(v0 + 88) = 0u;
  *(_DWORD *)(v0 + 104) = 1065353216;
  *(_OWORD *)(v0 + 112) = 0u;
  *(_OWORD *)(v0 + 128) = 0u;
  *(_OWORD *)(v0 + 144) = 0u;
  *(_BYTE *)(v0 + 160) = 0;
  v1 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_USER_INITIATED, 0);
  *(_QWORD *)(v0 + 168) = dispatch_queue_create("com.apple.LanguageModeling.Vocabulary", v1);
  result = sub_19C397978(v0);
  qword_1EDB97028 = result;
  return result;
}

_QWORD *sub_19C3E24F8(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_1E3D36D98;
  v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = a1[1];
  a1[1] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

void sub_19C3E2564(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_1E3D36D98;
  v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = a1[1];
  a1[1] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C3E25E0(uint64_t a1, int *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _DWORD *v12;
  _DWORD *v13;
  _DWORD **v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v20;

  v13 = *(_DWORD **)(a1 + 24);
  v12 = *(_DWORD **)(a1 + 32);
  v14 = (_DWORD **)(a1 + 24);
  v15 = v12 - v13;
  if (a3 > v15)
  {
    sub_19C316738(a1 + 24, a3 - v15);
    v13 = *v14;
LABEL_6:
    v16 = 4 * a3;
    do
    {
      v17 = *a2++;
      v18 = *(_QWORD *)(a1 + 16);
      v20 = v17;
      *v13++ = *(_DWORD *)(*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v18 + 32))(v18, &v20);
      v16 -= 4;
    }
    while (v16);
    v13 = *(_DWORD **)(a1 + 24);
    v12 = *(_DWORD **)(a1 + 32);
    return (*(uint64_t (**)(_QWORD, _DWORD *, int64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8)
                                                                                                  + 16))(*(_QWORD *)(a1 + 8), v13, v12 - v13, a4, a5, a6);
  }
  if (a3 < v15)
  {
    v12 = &v13[a3];
    *(_QWORD *)(a1 + 32) = v12;
  }
  if (a3)
    goto LABEL_6;
  return (*(uint64_t (**)(_QWORD, _DWORD *, int64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8)
                                                                                                + 16))(*(_QWORD *)(a1 + 8), v13, v12 - v13, a4, a5, a6);
}

void sub_19C3E26C4(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t *v4;
  uint64_t **v5;
  uint64_t *v6;
  uint64_t **v7;
  BOOL v8;
  unint64_t v9;
  uint64_t **v10;
  uint64_t **v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t *v16;
  _QWORD *v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t **v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  unint64_t v28;
  BOOL v29;
  uint64_t **v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t *v33;
  sqlite3_stmt *v34;
  uint64_t *v35;
  uint64_t **v36;
  uint64_t **v37;
  uint64_t *v38;
  uint64_t v39;

  v38 = 0;
  v39 = 0;
  v37 = &v38;
  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)a1;
  if (*(_QWORD *)a1 == a1 + 8)
    goto LABEL_34;
  do
  {
    v4 = v38;
    v5 = &v38;
    if (v37 == &v38)
      goto LABEL_10;
    v6 = v38;
    v7 = &v38;
    if (v38)
    {
      do
      {
        v5 = (uint64_t **)v6;
        v6 = (uint64_t *)v6[1];
      }
      while (v6);
    }
    else
    {
      do
      {
        v5 = (uint64_t **)v7[2];
        v8 = *v5 == (uint64_t *)v7;
        v7 = v5;
      }
      while (v8);
    }
    v9 = v3[4];
    if ((unint64_t)v5[4] < v9)
    {
LABEL_10:
      if (v38)
        v10 = v5;
      else
        v10 = &v38;
      if (v38)
        v11 = v5 + 1;
      else
        v11 = &v38;
    }
    else
    {
      v10 = &v38;
      v11 = &v38;
      if (v38)
      {
        v11 = &v38;
        while (1)
        {
          while (1)
          {
            v10 = (uint64_t **)v4;
            v13 = v4[4];
            if (v9 >= v13)
              break;
            v4 = *v10;
            v11 = v10;
            if (!*v10)
              goto LABEL_25;
          }
          if (v13 >= v9)
            break;
          v11 = v10 + 1;
          v4 = v10[1];
          if (!v4)
            goto LABEL_25;
        }
      }
    }
    if (*v11)
    {
      v12 = (_QWORD *)v3[1];
      if (!v12)
        goto LABEL_30;
    }
    else
    {
LABEL_25:
      v14 = (uint64_t *)operator new(0x28uLL);
      v14[4] = v3[4];
      *v14 = 0;
      v14[1] = 0;
      v14[2] = (uint64_t)v10;
      *v11 = v14;
      if (*v37)
      {
        v37 = (uint64_t **)*v37;
        v14 = *v11;
      }
      sub_19C2A2310(v38, v14);
      ++v39;
      v12 = (_QWORD *)v3[1];
      if (!v12)
      {
        do
        {
LABEL_30:
          v15 = (_QWORD *)v3[2];
          v8 = *v15 == (_QWORD)v3;
          v3 = v15;
        }
        while (!v8);
        goto LABEL_3;
      }
    }
    do
    {
      v15 = v12;
      v12 = (_QWORD *)*v12;
    }
    while (v12);
LABEL_3:
    v3 = v15;
  }
  while (v15 != v2);
  v16 = (uint64_t *)v37;
  if (v37 != &v38)
  {
    do
    {
      v23 = v16[4];
      v24 = *(uint64_t ***)v23;
      if (*(_QWORD *)v23)
      {
        v25 = v24[1];
        if (v25)
        {
          v26 = (uint64_t *)(v24 + 1);
          v27 = v24[1];
          do
          {
            v28 = v27[4];
            v29 = v28 >= v23;
            if (v28 >= v23)
              v30 = (uint64_t **)v27;
            else
              v30 = (uint64_t **)(v27 + 1);
            if (v29)
              v26 = v27;
            v27 = *v30;
          }
          while (*v30);
          if (v26 != (uint64_t *)(v24 + 1) && v26[4] <= v23)
          {
            v31 = (uint64_t *)v26[1];
            v32 = v26;
            if (v31)
            {
              do
              {
                v33 = v31;
                v31 = (uint64_t *)*v31;
              }
              while (v31);
            }
            else
            {
              do
              {
                v33 = (uint64_t *)v32[2];
                v8 = *v33 == (_QWORD)v32;
                v32 = v33;
              }
              while (!v8);
            }
            if (*v24 == v26)
              *v24 = v33;
            v24[2] = (uint64_t *)((char *)v24[2] - 1);
            sub_19C2D9DF4(v25, v26);
            operator delete(v26);
          }
        }
      }
      v34 = *(sqlite3_stmt **)(v23 + 8);
      if (v34)
      {
        sqlite3_finalize(v34);
        *(_QWORD *)(v23 + 8) = 0;
      }
      v35 = (uint64_t *)v16[1];
      if (v35)
      {
        do
        {
          v36 = (uint64_t **)v35;
          v35 = (uint64_t *)*v35;
        }
        while (v35);
      }
      else
      {
        do
        {
          v36 = (uint64_t **)v16[2];
          v8 = *v36 == v16;
          v16 = (uint64_t *)v36;
        }
        while (!v8);
      }
      v16 = (uint64_t *)v36;
    }
    while (v36 != &v38);
  }
LABEL_34:
  v17 = (_QWORD *)(a1 + 32);
  v18 = *(_QWORD **)(a1 + 24);
  if (v18 != (_QWORD *)(a1 + 32))
  {
    do
    {
      v19 = v18[5];
      if (v19)
      {
        v20 = sub_19C3A495C(v19);
        MEMORY[0x1A1AD355C](v20, 0x1020C4055CCDE27);
      }
      v21 = (_QWORD *)v18[1];
      if (v21)
      {
        do
        {
          v22 = v21;
          v21 = (_QWORD *)*v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          v22 = (_QWORD *)v18[2];
          v8 = *v22 == (_QWORD)v18;
          v18 = v22;
        }
        while (!v8);
      }
      v18 = v22;
    }
    while (v22 != v17);
  }
  sub_19C33275C(*(_QWORD **)(a1 + 32));
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = v17;
  sub_19C33275C(v38);
}

void sub_19C3E29E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _QWORD *a11)
{
  sub_19C33275C(a11);
  _Unwind_Resume(a1);
}

void sub_19C3E29F8(std::string *this, unsigned int **a2, uint64_t a3)
{
  unsigned int *v6;
  unsigned int *v7;
  std::string::size_type size;
  const std::string::value_type *v9;
  std::string::size_type v10;
  std::string *v11;
  __int128 v12;
  const std::string::value_type *v13;
  std::string::size_type v14;
  std::string *v15;
  __int128 v16;
  const std::string::value_type *v17;
  std::string::size_type v18;
  int v19;
  size_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  unsigned int *v26;
  const std::string::value_type *v27;
  std::string::size_type v28;
  std::string *v29;
  __int128 v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  const std::string::value_type *v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  const std::string::value_type *v39;
  std::string::size_type v40;
  unsigned int *v41;
  unsigned int *v42;
  unsigned int *v43;
  unint64_t v44;
  std::string *v45;
  __int128 v46;
  std::string *v47;
  __int128 v48;
  std::string *v49;
  std::string::size_type v50;
  std::string *v51;
  __int128 v52;
  std::string *v53;
  __int128 v54;
  const std::string::value_type *v55;
  std::string::size_type v56;
  std::string v57;
  std::string v58;
  std::string __p;
  std::string v60;
  std::string v61;
  __int128 v62;
  int64_t v63;

  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  v6 = *a2;
  v7 = a2[1];
  if (*a2 != v7)
  {
    do
    {
      size = HIBYTE(this->__r_.__value_.__r.__words[2]);
      if ((size & 0x80u) != 0)
        size = this->__r_.__value_.__l.__size_;
      if (size)
        std::string::append(this, " | ", 3uLL);
      (*(void (**)(__int128 *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a3 + 40))(&v62, a3, *v6);
      if (v63 >= 0)
        v9 = (const std::string::value_type *)&v62;
      else
        v9 = (const std::string::value_type *)v62;
      if (v63 >= 0)
        v10 = HIBYTE(v63);
      else
        v10 = *((_QWORD *)&v62 + 1);
      std::string::append(this, v9, v10);
      if (SHIBYTE(v63) < 0)
        operator delete((void *)v62);
      ++v6;
    }
    while (v6 != v7);
  }
  std::to_string(&v61, *((double *)a2 + 23) + *((float *)a2 + 6));
  v11 = std::string::insert(&v61, 0, "\t Score: ", 9uLL);
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v63 = v11->__r_.__value_.__r.__words[2];
  v62 = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (v63 >= 0)
    v13 = (const std::string::value_type *)&v62;
  else
    v13 = (const std::string::value_type *)v62;
  if (v63 >= 0)
    v14 = HIBYTE(v63);
  else
    v14 = *((_QWORD *)&v62 + 1);
  std::string::append(this, v13, v14);
  if (SHIBYTE(v63) < 0)
  {
    operator delete((void *)v62);
    if ((SHIBYTE(v61.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_24;
  }
  else if ((SHIBYTE(v61.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_24;
  }
  operator delete(v61.__r_.__value_.__l.__data_);
LABEL_24:
  (*(void (**)(std::string *__return_ptr, uint64_t, unsigned int *, int64_t))(*(_QWORD *)a3 + 32))(&v61, a3, *a2, a2[1] - *a2);
  v15 = std::string::insert(&v61, 0, "\t text: ", 8uLL);
  v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v63 = v15->__r_.__value_.__r.__words[2];
  v62 = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if (v63 >= 0)
    v17 = (const std::string::value_type *)&v62;
  else
    v17 = (const std::string::value_type *)v62;
  if (v63 >= 0)
    v18 = HIBYTE(v63);
  else
    v18 = *((_QWORD *)&v62 + 1);
  std::string::append(this, v17, v18);
  if (SHIBYTE(v63) < 0)
  {
    operator delete((void *)v62);
    if ((SHIBYTE(v61.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_32;
  }
  else if ((SHIBYTE(v61.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_32;
  }
  operator delete(v61.__r_.__value_.__l.__data_);
LABEL_32:
  v19 = *((char *)a2 + 55);
  if (v19 >= 0)
    v20 = *((unsigned __int8 *)a2 + 55);
  else
    v20 = (size_t)a2[5];
  v21 = v20 + 10;
  if (v20 + 10 >= 0x7FFFFFFFFFFFFFF8)
    sub_19C2A1A54();
  if (v21 >= 0x17)
  {
    v23 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v21 | 7) != 0x17)
      v23 = v21 | 7;
    v24 = v23 + 1;
    v25 = (char *)operator new(v23 + 1);
    *((_QWORD *)&v62 + 1) = v20 + 10;
    v63 = v24 | 0x8000000000000000;
    *(_QWORD *)&v62 = v25;
    *((_WORD *)v25 + 4) = 8250;
    *(_QWORD *)v25 = *(_QWORD *)"\t prefix: ";
    v22 = v25 + 10;
  }
  else
  {
    *((_QWORD *)&v62 + 1) = 8250;
    v63 = 0;
    HIBYTE(v63) = v20 + 10;
    *(_QWORD *)&v62 = *(_QWORD *)"\t prefix: ";
    v22 = (char *)&v62 + 10;
    if (!v20)
      goto LABEL_46;
  }
  if (v19 >= 0)
    v26 = (unsigned int *)(a2 + 4);
  else
    v26 = a2[4];
  memmove(v22, v26, v20);
LABEL_46:
  v22[v20] = 0;
  if (v63 >= 0)
    v27 = (const std::string::value_type *)&v62;
  else
    v27 = (const std::string::value_type *)v62;
  if (v63 >= 0)
    v28 = HIBYTE(v63);
  else
    v28 = *((_QWORD *)&v62 + 1);
  std::string::append(this, v27, v28);
  if (SHIBYTE(v63) < 0)
    operator delete((void *)v62);
  sub_19C3D8294(&v61, (const void **)a2[7], (const void **)a2[8]);
  v29 = std::string::insert(&v61, 0, "\t starting stem: ", 0x11uLL);
  v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  v63 = v29->__r_.__value_.__r.__words[2];
  v62 = v30;
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v29->__r_.__value_.__r.__words[0] = 0;
  if (v63 >= 0)
    v31 = (const std::string::value_type *)&v62;
  else
    v31 = (const std::string::value_type *)v62;
  if (v63 >= 0)
    v32 = HIBYTE(v63);
  else
    v32 = *((_QWORD *)&v62 + 1);
  std::string::append(this, v31, v32);
  if (SHIBYTE(v63) < 0)
  {
    operator delete((void *)v62);
    if ((SHIBYTE(v61.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_62;
  }
  else if ((SHIBYTE(v61.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_62;
  }
  operator delete(v61.__r_.__value_.__l.__data_);
LABEL_62:
  std::to_string(&v61, (unint64_t)a2[33]);
  v33 = std::string::insert(&v61, 0, "\t # predicted words: ", 0x15uLL);
  v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  v63 = v33->__r_.__value_.__r.__words[2];
  v62 = v34;
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  if (v63 >= 0)
    v35 = (const std::string::value_type *)&v62;
  else
    v35 = (const std::string::value_type *)v62;
  if (v63 >= 0)
    v36 = HIBYTE(v63);
  else
    v36 = *((_QWORD *)&v62 + 1);
  std::string::append(this, v35, v36);
  if (SHIBYTE(v63) < 0)
  {
    operator delete((void *)v62);
    if ((SHIBYTE(v61.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_70;
  }
  else if ((SHIBYTE(v61.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_70;
  }
  operator delete(v61.__r_.__value_.__l.__data_);
LABEL_70:
  std::to_string(&v61, 0xAAAAAAAAAAAAAAABLL * (((char *)a2[31] - (char *)a2[30]) >> 3));
  v37 = std::string::insert(&v61, 0, "\t # active hypothesis: ", 0x17uLL);
  v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
  v63 = v37->__r_.__value_.__r.__words[2];
  v62 = v38;
  v37->__r_.__value_.__l.__size_ = 0;
  v37->__r_.__value_.__r.__words[2] = 0;
  v37->__r_.__value_.__r.__words[0] = 0;
  if (v63 >= 0)
    v39 = (const std::string::value_type *)&v62;
  else
    v39 = (const std::string::value_type *)v62;
  if (v63 >= 0)
    v40 = HIBYTE(v63);
  else
    v40 = *((_QWORD *)&v62 + 1);
  std::string::append(this, v39, v40);
  if (SHIBYTE(v63) < 0)
  {
    operator delete((void *)v62);
    if ((SHIBYTE(v61.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_78;
  }
  else if ((SHIBYTE(v61.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_78;
  }
  operator delete(v61.__r_.__value_.__l.__data_);
LABEL_78:
  std::string::append(this, "\t active hypotheses: ", 0x15uLL);
  v41 = a2[30];
  v42 = a2[31];
  while (v41 != v42)
  {
    v43 = a2[33];
    v44 = *((_QWORD *)v41 + 2);
    if (v44 < (unint64_t)v43)
      __assert_rtn("toString", "ToucanUtils.cpp", 33, "cursor.numWords >= hypothesis.numWords()");
    std::to_string(&v58, v44 - (_QWORD)v43);
    v45 = std::string::insert(&v58, 0, "{ # context words: ", 0x13uLL);
    v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v46;
    v45->__r_.__value_.__l.__size_ = 0;
    v45->__r_.__value_.__r.__words[2] = 0;
    v45->__r_.__value_.__r.__words[0] = 0;
    v47 = std::string::append(&__p, ", # total words: ", 0x11uLL);
    v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
    v60.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v48;
    v47->__r_.__value_.__l.__size_ = 0;
    v47->__r_.__value_.__r.__words[2] = 0;
    v47->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v57, *((_QWORD *)v41 + 2));
    if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v49 = &v57;
    else
      v49 = (std::string *)v57.__r_.__value_.__r.__words[0];
    if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v50 = HIBYTE(v57.__r_.__value_.__r.__words[2]);
    else
      v50 = v57.__r_.__value_.__l.__size_;
    v51 = std::string::append(&v60, (const std::string::value_type *)v49, v50);
    v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
    v61.__r_.__value_.__r.__words[2] = v51->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v52;
    v51->__r_.__value_.__l.__size_ = 0;
    v51->__r_.__value_.__r.__words[2] = 0;
    v51->__r_.__value_.__r.__words[0] = 0;
    v53 = std::string::append(&v61, " }", 2uLL);
    v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
    v63 = v53->__r_.__value_.__r.__words[2];
    v62 = v54;
    v53->__r_.__value_.__l.__size_ = 0;
    v53->__r_.__value_.__r.__words[2] = 0;
    v53->__r_.__value_.__r.__words[0] = 0;
    if (v63 >= 0)
      v55 = (const std::string::value_type *)&v62;
    else
      v55 = (const std::string::value_type *)v62;
    if (v63 >= 0)
      v56 = HIBYTE(v63);
    else
      v56 = *((_QWORD *)&v62 + 1);
    std::string::append(this, v55, v56);
    if (SHIBYTE(v63) < 0)
    {
      operator delete((void *)v62);
      if ((SHIBYTE(v61.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_97:
        if ((SHIBYTE(v57.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_98;
        goto LABEL_103;
      }
    }
    else if ((SHIBYTE(v61.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_97;
    }
    operator delete(v61.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v57.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_98:
      if ((SHIBYTE(v60.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_99;
      goto LABEL_104;
    }
LABEL_103:
    operator delete(v57.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v60.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_99:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_80;
      goto LABEL_105;
    }
LABEL_104:
    operator delete(v60.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
LABEL_80:
      operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_106;
      goto LABEL_81;
    }
LABEL_105:
    if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
LABEL_106:
      operator delete(v58.__r_.__value_.__l.__data_);
LABEL_81:
    v41 += 6;
  }
}

void sub_19C3E30D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  uint64_t v40;

  if (*(char *)(v40 + 23) < 0)
    operator delete(*(void **)v40);
  _Unwind_Resume(exception_object);
}

void sub_19C3E3260(std::string *__dst, uint64_t a2, int a3)
{
  char *v5;
  unint64_t v6;
  int v7;
  BOOL v8;
  char *v9;
  uint64_t v10;
  std::locale v11;
  void *__p[2];
  unsigned __int8 v13;

  switch(a3)
  {
    case 0:
      if (*(char *)(a2 + 23) < 0)
      {
        sub_19C2B5238(__dst, *(void **)a2, *(_QWORD *)(a2 + 8));
      }
      else
      {
        *(_OWORD *)&__dst->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
        __dst->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
      }
      break;
    case 1:
      MEMORY[0x1A1AD3478](__p);
      v7 = *(char *)(a2 + 23);
      v8 = v7 < 0;
      if (v7 >= 0)
        v9 = (char *)a2;
      else
        v9 = *(char **)a2;
      v10 = *(unsigned __int8 *)(a2 + 23);
      if (v8)
        v10 = *(_QWORD *)(a2 + 8);
      sub_19C2FD5E4(__dst, v9, (std::locale *)__p, &v9[v10]);
      std::locale::~locale((std::locale *)__p);
      break;
    case 2:
      sub_19C3E33FC(__dst, (const UInt8 *)a2);
      break;
    case 3:
      sub_19C3E33FC(__p, (const UInt8 *)a2);
      MEMORY[0x1A1AD3478](&v11);
      if ((v13 & 0x80u) == 0)
        v5 = (char *)__p;
      else
        v5 = (char *)__p[0];
      v6 = v13;
      if ((v13 & 0x80u) != 0)
        v6 = (unint64_t)__p[1];
      sub_19C2FD5E4(__dst, v5, &v11, &v5[v6]);
      std::locale::~locale(&v11);
      if ((char)v13 < 0)
        operator delete(__p[0]);
      break;
    default:
      __assert_rtn("normalizeForExactMatching", "ToucanUtils.cpp", 69, "false");
  }
}

void sub_19C3E33C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

void sub_19C3E33D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::locale::~locale((std::locale *)&a9);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_19C3E33FC(_QWORD *a1, const UInt8 *a2)
{
  CFIndex v3;
  CFIndex v4;
  const __CFString *v5;
  const __CFString *v6;
  CFMutableStringRef MutableCopy;
  void *exception;

  v3 = *((_QWORD *)a2 + 1);
  if (*((char *)a2 + 23) >= 0)
  {
    v4 = a2[23];
  }
  else
  {
    a2 = *(const UInt8 **)a2;
    v4 = v3;
  }
  v5 = CFStringCreateWithBytes(0, a2, v4, 0x8000100u, 0);
  if (!v5)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD3154](exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v6 = v5;
  MutableCopy = CFStringCreateMutableCopy(0, 0, v5);
  CFRelease(v6);
  CFStringTransform(MutableCopy, 0, (CFStringRef)*MEMORY[0x1E0C9B350], 0);
  sub_19C29CEF8(MutableCopy, a1);
  if (MutableCopy)
    CFRelease(MutableCopy);
}

void sub_19C3E34E4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19C3E3500(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  sub_19C2E5670(&a9);
  _Unwind_Resume(a1);
}

void sub_19C3E3514(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C339C1C((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19C3E3528(const void *a1)
{
  const __CFString *Value;
  CFTypeID TypeID;
  unint64_t v4;
  void *v5;
  void **v6;
  uint64_t v7;
  CFDictionaryRef v8;
  void **v9;
  int v10;
  int v11;
  _QWORD *v14;
  _QWORD *v15;
  void *exception;
  __int128 v17;
  void *__p[2];
  unsigned __int8 v19;
  char v20;
  CFDictionaryRef v21;

  if (!a1)
  {
    v21 = 0;
LABEL_30:
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD3154](exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  CFRetain(a1);
  sub_19C29438C(&v21, a1);
  if (!v21)
    goto LABEL_30;
  Value = (const __CFString *)CFDictionaryGetValue(v21, CFSTR("MontrealModelType"));
  if (!Value || (TypeID = CFStringGetTypeID(), TypeID != CFGetTypeID(Value)))
  {
    LOBYTE(__p[0]) = 0;
    v20 = 0;
    v14 = __cxa_allocate_exception(0x20uLL);
    sub_19C2A6D48(&v17, "Model resource is missing MontrealModelType");
    sub_19C31237C(v14, &v17);
    __cxa_throw(v14, (struct type_info *)&unk_1E3D32968, (void (*)(void *))sub_19C3123E4);
  }
  sub_19C2E50A4(__p, Value);
  v20 = 1;
  v4 = v19;
  if ((v19 & 0x80u) != 0)
    v4 = (unint64_t)__p[1];
  if (v4 != 6)
  {
    if (v4 == 4)
    {
      v5 = __p[0];
      v6 = __p;
      if ((v19 & 0x80u) != 0)
        v6 = (void **)__p[0];
      if (*(_DWORD *)v6 == 808333942)
      {
        v7 = 0;
        if ((char)v19 < 0)
          goto LABEL_13;
        goto LABEL_24;
      }
    }
LABEL_28:
    v15 = __cxa_allocate_exception(0x20uLL);
    std::operator+<char>();
    sub_19C31237C(v15, &v17);
    __cxa_throw(v15, (struct type_info *)&unk_1E3D32968, (void (*)(void *))sub_19C3123E4);
  }
  v5 = __p[0];
  if ((v19 & 0x80u) == 0)
    v9 = __p;
  else
    v9 = (void **)__p[0];
  v10 = *(_DWORD *)v9;
  v11 = *((unsigned __int16 *)v9 + 2);
  if (v10 != 1701998403 || v11 != 19788)
    goto LABEL_28;
  v7 = 1;
  if ((char)v19 < 0)
  {
LABEL_13:
    operator delete(v5);
    v8 = v21;
    if (!v21)
      return v7;
    goto LABEL_25;
  }
LABEL_24:
  v8 = v21;
  if (v21)
LABEL_25:
    CFRelease(v8);
  return v7;
}

void sub_19C3E3738(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  void *v21;
  char v22;
  uint64_t v23;

  if (a14 < 0)
    operator delete(__p);
  if ((v22 & 1) != 0)
    __cxa_free_exception(v21);
  if (a21)
  {
    if (a20 < 0)
      operator delete(a15);
  }
  sub_19C2E5608((const void **)(v23 - 40));
  _Unwind_Resume(a1);
}

void sub_19C3E37B4(_QWORD *a1, __int128 **a2)
{
  char *v4;
  char *v5;
  char *v6;
  __int128 *v7;
  __int128 *v8;
  uint64_t v9;
  __int128 v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;
  char *v21;
  __int128 v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  void *v27;
  char v28;
  int v29;
  _QWORD *v30;
  char v31;
  void *__p[2];
  char *v33;
  char *v34;
  _QWORD *v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v28 = 0;
  LOBYTE(v27) = 0;
  v29 = 1;
  sub_19C297950(__p, (const UInt8 *)&v27);
  LODWORD(v34) = v29;
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  v30 = a1;
  v31 = 0;
  v4 = (char *)operator new(0x20uLL);
  v5 = v4;
  v6 = v4 + 32;
  a1[2] = v4 + 32;
  *a1 = v4;
  a1[1] = v4;
  if (SHIBYTE(v33) < 0)
  {
    sub_19C2B5238(v4, __p[0], (unint64_t)__p[1]);
  }
  else
  {
    *(_OWORD *)v4 = *(_OWORD *)__p;
    *((_QWORD *)v4 + 2) = v33;
  }
  *((_DWORD *)v5 + 6) = (_DWORD)v34;
  a1[1] = v6;
  if ((SHIBYTE(v33) & 0x80000000) == 0)
  {
    if ((v28 & 0x80000000) == 0)
      goto LABEL_6;
LABEL_9:
    operator delete(v27);
    v7 = a2[1];
    if (!v7)
      return;
    goto LABEL_10;
  }
  operator delete(__p[0]);
  if (v28 < 0)
    goto LABEL_9;
LABEL_6:
  v7 = a2[1];
  if (!v7)
    return;
LABEL_10:
  v8 = *a2;
  v9 = (uint64_t)&(*a2)[2 * (_QWORD)v7];
  do
  {
    if ((*((_DWORD *)v8 + 6) - 1) >= 2)
    {
      v12 = (char *)a1[1];
      v11 = a1[2];
      if ((unint64_t)v12 < v11)
      {
        if (*((char *)v8 + 23) < 0)
        {
          sub_19C2B5238((_BYTE *)a1[1], *(void **)v8, *((_QWORD *)v8 + 1));
        }
        else
        {
          v10 = *v8;
          *((_QWORD *)v12 + 2) = *((_QWORD *)v8 + 2);
          *(_OWORD *)v12 = v10;
        }
        *((_DWORD *)v12 + 6) = *((_DWORD *)v8 + 6);
        a1[1] = v12 + 32;
        a1[1] = v12 + 32;
      }
      else
      {
        v13 = (char *)*a1;
        v14 = (uint64_t)&v12[-*a1] >> 5;
        v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 59)
          sub_19C2A18E8();
        v16 = v11 - (_QWORD)v13;
        if (v16 >> 4 > v15)
          v15 = v16 >> 4;
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFE0)
          v17 = 0x7FFFFFFFFFFFFFFLL;
        else
          v17 = v15;
        v35 = a1 + 2;
        if (v17)
        {
          if (v17 >> 59)
            sub_19C2A143C();
          v18 = (char *)operator new(32 * v17);
        }
        else
        {
          v18 = 0;
        }
        v19 = &v18[32 * v14];
        __p[0] = v18;
        __p[1] = v19;
        v33 = v19;
        v34 = &v18[32 * v17];
        if (*((char *)v8 + 23) < 0)
        {
          sub_19C2B5238(v19, *(void **)v8, *((_QWORD *)v8 + 1));
          v13 = (char *)*a1;
          v12 = (char *)a1[1];
          v19 = (char *)__p[1];
          v21 = v33;
        }
        else
        {
          v20 = *v8;
          *((_QWORD *)v19 + 2) = *((_QWORD *)v8 + 2);
          *(_OWORD *)v19 = v20;
          v21 = &v18[32 * v14];
        }
        *(_DWORD *)&v18[32 * v14 + 24] = *((_DWORD *)v8 + 6);
        if (v12 == v13)
        {
          v23 = v13;
        }
        else
        {
          do
          {
            v22 = *((_OWORD *)v12 - 2);
            *((_QWORD *)v19 - 2) = *((_QWORD *)v12 - 2);
            *((_OWORD *)v19 - 2) = v22;
            *((_QWORD *)v12 - 3) = 0;
            *((_QWORD *)v12 - 2) = 0;
            *((_QWORD *)v12 - 4) = 0;
            *((_DWORD *)v19 - 2) = *((_DWORD *)v12 - 2);
            v19 -= 32;
            v12 -= 32;
          }
          while (v12 != v13);
          v23 = (char *)*a1;
          v13 = (char *)a1[1];
        }
        v24 = v21 + 32;
        *a1 = v19;
        a1[1] = v21 + 32;
        v25 = (char *)a1[2];
        a1[2] = v34;
        v34 = v25;
        __p[0] = v23;
        __p[1] = v23;
        if (v13 != v23)
        {
          v26 = v13 - 32;
          do
          {
            v33 = v26;
            if (v26[23] < 0)
              operator delete(*(void **)v26);
            v26 -= 32;
          }
          while (v26 + 32 != v23);
          v13 = v23;
        }
        if (v13)
          operator delete(v13);
        a1[1] = v24;
      }
    }
    v8 += 2;
  }
  while (v8 != (__int128 *)v9);
}

void sub_19C3E3AC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void **a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;
  uint64_t v24;

  *(_QWORD *)(v23 + 8) = v24;
  sub_19C2E2430(&a16);
  if (a23 < 0)
    operator delete(__p);
  if (a14 < 0)
  {
    operator delete(a9);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

BOOL sub_19C3E3B40(uint64_t a1, const __CFLocale *a2)
{
  int v3;
  const UInt8 *v4;
  CFIndex v5;
  const __CFString *v6;
  const __CFString *v7;
  CFIndex Length;
  const __CFAllocator *v9;
  CFMutableStringRef MutableCopy;
  CFIndex v11;
  CFMutableStringRef v12;
  _BOOL8 v13;
  void *exception;

  v3 = *(char *)(a1 + 23);
  if (v3 >= 0)
    v4 = (const UInt8 *)a1;
  else
    v4 = *(const UInt8 **)a1;
  if (v3 >= 0)
    v5 = *(unsigned __int8 *)(a1 + 23);
  else
    v5 = *(_QWORD *)(a1 + 8);
  v6 = CFStringCreateWithBytes(0, v4, v5, 0x8000100u, 0);
  if (!v6)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD3154](exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v7 = v6;
  Length = CFStringGetLength(v6);
  v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], Length, v7);
  CFStringLowercase(MutableCopy, a2);
  v11 = CFStringGetLength(v7);
  v12 = CFStringCreateMutableCopy(v9, v11, v7);
  CFStringCapitalize(v12, a2);
  if (CFStringCompare(v7, v12, 0) == kCFCompareEqualTo)
  {
    v13 = CFStringCompare(v7, MutableCopy, 0) != kCFCompareEqualTo;
    if (!v12)
      goto LABEL_13;
    goto LABEL_12;
  }
  v13 = 0;
  if (v12)
LABEL_12:
    CFRelease(v12);
LABEL_13:
  if (MutableCopy)
    CFRelease(MutableCopy);
  CFRelease(v7);
  return v13;
}

void sub_19C3E3C88(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19C3E3CA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  const void *v3;
  va_list va;
  const void *v5;
  va_list va1;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, const void *);
  va_copy(va2, va1);
  v5 = va_arg(va2, const void *);
  sub_19C2FE810((const void **)va);
  sub_19C2FE810((const void **)va1);
  sub_19C2E5670((const void **)va2);
  _Unwind_Resume(a1);
}

uint64_t sub_19C3E3CDC(uint64_t a1)
{
  void **v2;
  void *v3;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = (void **)*v2;
      if (*((char *)v2 + 111) < 0)
      {
        operator delete(v2[11]);
        if ((*((char *)v2 + 87) & 0x80000000) == 0)
        {
LABEL_8:
          if ((*((char *)v2 + 63) & 0x80000000) == 0)
            goto LABEL_9;
          goto LABEL_13;
        }
      }
      else if ((*((char *)v2 + 87) & 0x80000000) == 0)
      {
        goto LABEL_8;
      }
      operator delete(v2[8]);
      if ((*((char *)v2 + 63) & 0x80000000) == 0)
      {
LABEL_9:
        if (*((char *)v2 + 39) < 0)
          goto LABEL_14;
        goto LABEL_5;
      }
LABEL_13:
      operator delete(v2[5]);
      if (*((char *)v2 + 39) < 0)
LABEL_14:
        operator delete(v2[2]);
LABEL_5:
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

uint64_t sub_19C3E3D90(uint64_t a1)
{
  if (*(char *)(a1 + 95) < 0)
  {
    operator delete(*(void **)(a1 + 72));
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(a1 + 47) & 0x80000000) == 0)
        goto LABEL_4;
LABEL_8:
      operator delete(*(void **)(a1 + 24));
      if ((*(char *)(a1 + 23) & 0x80000000) == 0)
        return a1;
LABEL_9:
      operator delete(*(void **)a1);
      return a1;
    }
  }
  else if ((*(char *)(a1 + 71) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    goto LABEL_8;
LABEL_4:
  if (*(char *)(a1 + 23) < 0)
    goto LABEL_9;
  return a1;
}

uint64_t sub_19C3E3E0C(uint64_t a1)
{
  if ((*(char *)(a1 + 71) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 47) & 0x80000000) == 0)
      goto LABEL_3;
LABEL_6:
    operator delete(*(void **)(a1 + 24));
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      return a1;
LABEL_7:
    operator delete(*(void **)a1);
    return a1;
  }
  operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    goto LABEL_6;
LABEL_3:
  if (*(char *)(a1 + 23) < 0)
    goto LABEL_7;
  return a1;
}

void sub_19C3E3E70(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  *a1 = 0;
  if (v1)
  {
    if (!*((_BYTE *)a1 + 16))
    {
LABEL_7:
      operator delete((void *)v1);
      return;
    }
    if (*(char *)(v1 + 111) < 0)
    {
      operator delete(*(void **)(v1 + 88));
      if ((*(char *)(v1 + 87) & 0x80000000) == 0)
      {
LABEL_5:
        if ((*(char *)(v1 + 63) & 0x80000000) == 0)
          goto LABEL_6;
        goto LABEL_11;
      }
    }
    else if ((*(char *)(v1 + 87) & 0x80000000) == 0)
    {
      goto LABEL_5;
    }
    operator delete(*(void **)(v1 + 64));
    if ((*(char *)(v1 + 63) & 0x80000000) == 0)
    {
LABEL_6:
      if ((*(char *)(v1 + 39) & 0x80000000) == 0)
        goto LABEL_7;
LABEL_12:
      operator delete(*(void **)(v1 + 16));
      goto LABEL_7;
    }
LABEL_11:
    operator delete(*(void **)(v1 + 40));
    if ((*(char *)(v1 + 39) & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_12;
  }
}

_QWORD *sub_19C3E3F08(_QWORD *a1)
{
  const void *v2;

  *a1 = &off_1E3D35378;
  v2 = (const void *)a1[1];
  if (v2)
    CFRelease(v2);
  a1[1] = 0;
  return a1;
}

void sub_19C3E3F48(_QWORD *a1)
{
  const void *v2;

  *a1 = &off_1E3D35378;
  v2 = (const void *)a1[1];
  if (v2)
    CFRelease(v2);
  a1[1] = 0;
  JUMPOUT(0x1A1AD355CLL);
}

BOOL sub_19C3E3F98(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) != 0;
}

_QWORD *sub_19C3E3FA8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  _QWORD *result;

  if (*(_QWORD *)(a1 + 8))
    v3 = LXCursorCreateByAdvancingWithUTF8();
  else
    v3 = 0;
  result = (_QWORD *)operator new();
  *result = &off_1E3D35378;
  result[1] = v3;
  *a2 = result;
  return result;
}

_QWORD *sub_19C3E401C(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = &off_1E3D369D0;
  v2 = a1[4];
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (_QWORD *)a1[1];
  if (v3)
  {
    v4 = (_QWORD *)a1[2];
    v5 = (void *)a1[1];
    if (v4 != v3)
    {
      do
      {
        v7 = *--v4;
        v6 = v7;
        *v4 = 0;
        if (v7)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      }
      while (v4 != v3);
      v5 = (void *)a1[1];
    }
    a1[2] = v3;
    operator delete(v5);
  }
  return a1;
}

void sub_19C3E40B4(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = &off_1E3D369D0;
  v2 = a1[4];
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (_QWORD *)a1[1];
  if (v3)
  {
    v4 = (_QWORD *)a1[2];
    v5 = (void *)a1[1];
    if (v4 != v3)
    {
      do
      {
        v7 = *--v4;
        v6 = v7;
        *v4 = 0;
        if (v7)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      }
      while (v4 != v3);
      v5 = (void *)a1[1];
    }
    a1[2] = v3;
    operator delete(v5);
  }
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C3E415C(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t *v3;
  char v4;
  uint64_t v5;

  v2 = a1[1];
  v3 = a1[2];
  if (v2 == v3)
    return (*(uint64_t (**)(uint64_t *))(*a1[4] + 16))(a1[4]);
  v4 = 0;
  do
  {
    while ((v4 & 1) != 0)
    {
      ++v2;
      v4 = 1;
      if (v2 == v3)
        return 1;
    }
    v5 = *v2++;
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
  }
  while (v2 != v3);
  if ((v4 & 1) == 0)
    return (*(uint64_t (**)(uint64_t *))(*a1[4] + 16))(a1[4]);
  return 1;
}

double sub_19C3E41E8@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double result;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  unint64_t v16;

  v15 = 0uLL;
  v16 = 0;
  v6 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)(a1 + 16) != v6)
  {
    v7 = 0;
    v8 = 0;
    do
    {
      (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(v6 + 8 * v8) + 24))(&v14, *(_QWORD *)(v6 + 8 * v8), a2);
      if ((unint64_t)v7 >= v16)
      {
        v7 = sub_19C32F5A4(&v15, &v14);
      }
      else
      {
        v9 = v14;
        v14 = 0;
        *v7++ = v9;
      }
      *((_QWORD *)&v15 + 1) = v7;
      v10 = v14;
      v14 = 0;
      if (v10)
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
      ++v8;
      v6 = *(_QWORD *)(a1 + 8);
    }
    while (v8 < (*(_QWORD *)(a1 + 16) - v6) >> 3);
  }
  (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 24))(&v14, *(_QWORD *)(a1 + 32), a2);
  v11 = operator new();
  *(_QWORD *)v11 = &off_1E3D369D0;
  result = *(double *)&v15;
  *(_OWORD *)(v11 + 8) = v15;
  v13 = v14;
  *(_QWORD *)(v11 + 24) = v16;
  *(_QWORD *)(v11 + 32) = v13;
  *a3 = v11;
  return result;
}

void sub_19C3E4310(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  if (a3)
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 8))(a3);
  sub_19C319C30((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19C3E4350(_QWORD *a1)
{
  sub_19C3E46C4(a1);
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C3E4374(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD *a4, uint64_t a5)
{
  _DWORD *v6;
  unsigned int *v7;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _DWORD *v16;
  unint64_t v17;
  unsigned int *v18;
  _DWORD *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int *v22;
  _DWORD *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int *v27;
  _DWORD *v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  int v32;
  uint64_t v33;

  v6 = a4;
  if (a3 < 1)
    return v6 - a4;
  v6 = a4;
  if (a5 < 1)
    return v6 - a4;
  v7 = a2;
  v9 = (unint64_t)&a2[a3];
  v6 = a4;
  v10 = (unint64_t)&a4[a5];
  while (1)
  {
    v11 = *v7;
    if ((uint64_t)(v9 - (_QWORD)v7) >= 9)
    {
      v12 = *(char **)(a1 + 16);
      if (*(_DWORD *)v12 <= v11)
      {
        v13 = *(unsigned int *)(a1 + 8);
        if (*(_DWORD *)&v12[4 * v13] > v11)
        {
          v14 = *(_QWORD *)(a1 + 24) - (_QWORD)v12;
          if (v14)
          {
            v15 = v14 >> 2;
            v16 = *(_DWORD **)(a1 + 16);
            do
            {
              v17 = v15 >> 1;
              v18 = &v16[v15 >> 1];
              v20 = *v18;
              v19 = v18 + 1;
              v15 += ~(v15 >> 1);
              if (v20 > v11)
                v15 = v17;
              else
                v16 = v19;
            }
            while (v15);
          }
          else
          {
            v16 = *(_DWORD **)(a1 + 16);
          }
          v21 = v7[2];
          v22 = *(unsigned int **)(a1 + 40);
          if (*v22 <= v21 && v22[v13] > v21)
          {
            v23 = *(_DWORD **)(a1 + 40);
            v24 = *(_QWORD *)(a1 + 48) - (_QWORD)v22;
            if (v24)
            {
              v25 = v24 >> 2;
              v23 = *(_DWORD **)(a1 + 40);
              do
              {
                v26 = v25 >> 1;
                v27 = &v23[v25 >> 1];
                v29 = *v27;
                v28 = v27 + 1;
                v25 += ~(v25 >> 1);
                if (v29 > v21)
                  v25 = v26;
                else
                  v23 = v28;
              }
              while (v25);
            }
            v30 = v7[1];
            v31 = *(_DWORD *)(a1 + 12);
            if (v30 == v31 + ((unint64_t)((char *)(v16 - 1) - v12) >> 2)
              && v30 == v31 + ((unint64_t)((char *)(v23 - 1) - (char *)v22) >> 2))
            {
              v32 = v21
                  - *(v23 - 1)
                  + (v22[v30 - v31 + 1] - v22[v30 - v31]) * (v11 - *(v16 - 1))
                  + *(_DWORD *)(*(_QWORD *)(a1 + 64) + 4 * (v30 - v31));
              v33 = 3;
              goto LABEL_28;
            }
          }
        }
      }
    }
    if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, v11) != 3)
      return 0;
    v32 = *v7;
    v33 = 1;
LABEL_28:
    *v6++ = v32;
    v7 += v33;
    if ((unint64_t)v7 >= v9 || (unint64_t)v6 >= v10)
      return v6 - a4;
  }
}

uint64_t sub_19C3E4554(uint64_t a1, unsigned int *a2, uint64_t a3, unsigned int *a4, uint64_t a5)
{
  unsigned int *v5;
  unsigned int *v6;
  unsigned int *v7;
  unint64_t v8;
  unsigned int v9;
  unsigned int *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  unsigned int v22;
  int v23;
  unsigned int v24;

  v5 = a4;
  if (a3 < 1)
    return v5 - a4;
  v5 = a4;
  if (a5 < 1)
    return v5 - a4;
  v6 = &a2[a3];
  v7 = *(unsigned int **)(a1 + 64);
  v5 = a4;
  v8 = (unint64_t)&a4[a5];
  while (1)
  {
    v9 = *a2;
    if (*v7 <= *a2 && v7[*(unsigned int *)(a1 + 8)] > v9)
      break;
    *v5++ = v9;
LABEL_15:
    if (++a2 >= v6 || (unint64_t)v5 >= v8)
      return v5 - a4;
  }
  v10 = v7;
  v11 = *(_QWORD *)(a1 + 72) - (_QWORD)v7;
  if (v11)
  {
    v12 = v11 >> 2;
    v10 = v7;
    do
    {
      v13 = v12 >> 1;
      v14 = &v10[v12 >> 1];
      v16 = *v14;
      v15 = v14 + 1;
      v12 += ~(v12 >> 1);
      if (v16 > v9)
        v12 = v13;
      else
        v10 = v15;
    }
    while (v12);
  }
  if ((uint64_t)(v8 - (_QWORD)v5) >= 9)
  {
    v17 = v9 - *(v10 - 1);
    v18 = *(_QWORD *)(a1 + 40);
    v19 = (char *)(v10 - 1) - (char *)v7;
    v20 = v19 >> 2;
    v21 = *(_DWORD *)(v18 + 4 * ((v19 >> 2) + 1));
    v19 &= 0x3FFFFFFFCuLL;
    LODWORD(v18) = *(_DWORD *)(v18 + v19);
    v22 = v21 - v18;
    v23 = v17 / v22;
    v24 = v17 % v22 + v18;
    LODWORD(v18) = *(_DWORD *)(a1 + 12) + v20;
    *v5 = *(_DWORD *)(*(_QWORD *)(a1 + 16) + v19) + v23;
    v5[1] = v18;
    v5[2] = v24;
    v5 += 3;
    goto LABEL_15;
  }
  return 0;
}

uint64_t sub_19C3E4668(uint64_t a1, unsigned int a2)
{
  if (**(_DWORD **)(a1 + 16) > a2)
    return 3;
  if (*(_DWORD *)(a1 + 12) > a2)
    return 0;
  if (**(_DWORD **)(a1 + 40) > a2)
    return 1;
  if (**(_DWORD **)(a1 + 64) > a2)
    return 2;
  return 3;
}

_QWORD *sub_19C3E46C4(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  *a1 = &off_1E3D37170;
  v2 = (const void *)a1[18];
  if (v2)
    CFRelease(v2);
  a1[18] = 0;
  v3 = (const void *)a1[17];
  if (v3)
    CFRelease(v3);
  a1[17] = 0;
  v4 = a1[14];
  if (v4)
  {
    v5 = a1[15];
    v6 = (void *)a1[14];
    if (v5 != v4)
    {
      v7 = a1[15];
      do
      {
        v8 = *(unsigned __int16 *)(v7 - 16);
        v7 -= 16;
        if (v8 >= 0xF)
        {
          v9 = *(_QWORD *)(v5 - 8);
          if (v9)
            MEMORY[0x1A1AD3538](v9, 0x1000C8077774924);
        }
        v5 = v7;
      }
      while (v7 != v4);
      v6 = (void *)a1[14];
    }
    a1[15] = v4;
    operator delete(v6);
  }
  v10 = a1[11];
  if (v10)
  {
    v11 = a1[12];
    v12 = (void *)a1[11];
    if (v11 != v10)
    {
      do
      {
        v13 = *(void **)(v11 - 24);
        if (v13 && *(_BYTE *)(v11 - 26) == 1)
          free(v13);
        v11 -= 32;
      }
      while (v11 != v10);
      v12 = (void *)a1[11];
    }
    a1[12] = v10;
    operator delete(v12);
  }
  v14 = (void *)a1[8];
  if (v14)
  {
    a1[9] = v14;
    operator delete(v14);
  }
  v15 = (void *)a1[5];
  if (v15)
  {
    a1[6] = v15;
    operator delete(v15);
  }
  v16 = (void *)a1[2];
  if (v16)
  {
    a1[3] = v16;
    operator delete(v16);
  }
  return a1;
}

void sub_19C3E4804(uint64_t a1, int a2)
{
  unint64_t v4;
  char *v5;
  char *v6;
  _DWORD *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  _DWORD *v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  char *v20;
  uint64_t v21;
  __int128 v22;
  int v23;

  v5 = *(char **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v6 = v5;
  if ((unint64_t)v5 >= v4)
  {
    v8 = *(char **)a1;
    v9 = (uint64_t)&v5[-*(_QWORD *)a1];
    v10 = v9 >> 2;
    v11 = (v9 >> 2) + 1;
    if (v11 >> 62)
      sub_19C2A18E8();
    v12 = v4 - (_QWORD)v8;
    if (v12 >> 1 > v11)
      v11 = v12 >> 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
      v13 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v13 = v11;
    if (v13)
    {
      if (v13 >> 62)
        sub_19C2A143C();
      v14 = operator new(4 * v13);
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[4 * v10];
    v16 = &v14[4 * v13];
    *v15 = a2;
    v7 = v15 + 1;
    if (v5 != v8)
    {
      v17 = v5 - v8 - 4;
      if (v17 < 0x2C)
        goto LABEL_27;
      if ((unint64_t)(v5 - v14 - v9) < 0x20)
        goto LABEL_27;
      v18 = (v17 >> 2) + 1;
      v6 = &v5[-4 * (v18 & 0x7FFFFFFFFFFFFFF8)];
      v19 = &v14[4 * v10 - 16];
      v20 = v5 - 16;
      v21 = v18 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v22 = *(_OWORD *)v20;
        *(v19 - 1) = *((_OWORD *)v20 - 1);
        *v19 = v22;
        v19 -= 2;
        v20 -= 32;
        v21 -= 8;
      }
      while (v21);
      v15 -= v18 & 0x7FFFFFFFFFFFFFF8;
      if (v18 != (v18 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_27:
        do
        {
          v23 = *((_DWORD *)v6 - 1);
          v6 -= 4;
          *--v15 = v23;
        }
        while (v6 != v8);
      }
    }
    *(_QWORD *)a1 = v15;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = v16;
    if (v8)
      operator delete(v8);
  }
  else
  {
    *(_DWORD *)v5 = a2;
    v7 = v5 + 4;
  }
  *(_QWORD *)(a1 + 8) = v7;
}

uint64_t sub_19C3E4960(uint64_t a1, const __CFURL *a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  const __CFDictionary *v6;
  const __CFDictionary *v7;
  const __CFString *Value;
  const void *v9;
  CFTypeID v10;
  CFTypeID v11;
  CFTypeID v12;
  CFLocaleRef v13;
  const void *v14;
  CFIndex v15;
  int v16;
  char v17;
  unint64_t v19;
  const void *ValueAtIndex;
  CFTypeID v21;
  const __CFString *v22;
  const __CFString *v23;
  const void *v24;
  const void *v25;
  const void *v26;
  CFTypeID v27;
  CFTypeID v28;
  CFTypeID v29;
  CFTypeID v30;
  int v31;
  int v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t j;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  uint64_t i;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  unsigned int v51;
  char *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  const char *v56;
  UErrorCode v57;
  char *v58;
  uint64_t v59;
  unint64_t v60;
  char *v61;
  size_t v62;
  char *v63;
  char *v64;
  unint64_t v65;
  char *v66;
  char *v67;
  size_t v68;
  __int16 v69;
  void *v70;
  __int16 v71;
  const char *v72;
  UErrorCode v73;
  uint64_t v74;
  size_t v75;
  char *v76;
  char *v77;
  char *v78;
  unint64_t v79;
  size_t v80;
  unint64_t v81;
  size_t v82;
  char *v83;
  char *v84;
  char *v85;
  unint64_t v86;
  char *v87;
  char *v88;
  unint64_t v89;
  __int128 v90;
  unint64_t v91;
  char *v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  unint64_t v99;
  __int128 v100;
  char *v101;
  char v102;
  char *v103;
  size_t v104;
  unint64_t v105;
  char *v106;
  _QWORD *v107;
  char *v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  char *v116;
  unint64_t v117;
  void *v118;
  char *v119;
  char *v120;
  char *v121;
  unsigned int v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t k;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unsigned int v130;
  uint64_t v131;
  const void *v132;
  unint64_t v133;
  uint64_t v134;
  unint64_t v135;
  BOOL v136;
  unint64_t v137;
  uint64_t v138;
  unint64_t v139;
  unint64_t v140;
  uint64_t v141;
  CFURLRef v142;
  const void *v143;
  int v144;
  const char *v145;
  _BYTE *exception;
  char *v147;
  uint64_t v148;
  const char *v149;
  const char *v150;
  char *v151;
  char *v152;
  char *v153;
  uint64_t v154;
  void *__src[2];
  size_t __srca;
  char *__srcb;
  char *__srcc;
  char *__src_8;
  int v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  CFTypeRef cf;
  uint64_t v166;
  CFIndex usedBufLen;
  int valuePtr;
  UErrorCode pErrorCode[2];
  uint64_t block;
  uint64_t v171;
  void (*v172)(uint64_t);
  void *v173;
  uint64_t *v174;
  int v175;
  uint64_t v176;
  uint64_t *v177;
  uint64_t v178;
  uint64_t v179;
  _BYTE __dst[14];
  int32_t srcLength;
  unsigned __int16 v182;
  char v183;
  void *v184;
  _BYTE v185[16];
  UInt8 buffer[4];
  unsigned __int8 v187;
  uint64_t v188;
  CFRange v189;

  v188 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)(a1 + 16) = 0u;
  v3 = (uint64_t *)(a1 + 16);
  *(_QWORD *)a1 = &off_1E3D37170;
  *(_OWORD *)(a1 + 64) = 0u;
  v4 = (uint64_t *)(a1 + 64);
  v5 = a1 + 40;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_QWORD *)(a1 + 144) = 0;
  v6 = (const __CFDictionary *)sub_19C2E19B8(a2, 0);
  v7 = v6;
  if (!v6)
    goto LABEL_233;
  Value = (const __CFString *)CFDictionaryGetValue(v6, CFSTR("Locale"));
  v9 = CFDictionaryGetValue(v7, CFSTR("NonStemSuffixCount"));
  valuePtr = 0;
  cf = CFDictionaryGetValue(v7, CFSTR("StemSuffixClasses"));
  if (!Value
    || (v10 = CFGetTypeID(Value), v10 != CFStringGetTypeID())
    || CFStringGetLength(Value) < 1
    || !v9
    || (v11 = CFGetTypeID(v9), v11 != CFNumberGetTypeID())
    || !cf
    || (v12 = CFGetTypeID(cf), v12 != CFArrayGetTypeID())
    || !CFNumberGetValue((CFNumberRef)v9, kCFNumberSInt32Type, &valuePtr)
    || valuePtr < 1)
  {
    v17 = 0;
    goto LABEL_33;
  }
  usedBufLen = 0;
  v13 = CFLocaleCreate(0, Value);
  v14 = *(const void **)(a1 + 136);
  if (v14)
    CFRelease(v14);
  *(_QWORD *)(a1 + 136) = v13;
  *(_DWORD *)(a1 + 8) = CFArrayGetCount((CFArrayRef)cf);
  sub_19C3E4804((uint64_t)v3, 0);
  sub_19C3E4804(v5, 0);
  sub_19C3E4804((uint64_t)v4, 0);
  v189.length = CFStringGetLength(Value);
  v189.location = 0;
  CFStringGetBytes(Value, v189, 0x8000100u, 0, 0, buffer, 255, &usedBufLen);
  v15 = usedBufLen + 1;
  buffer[usedBufLen] = 0;
  usedBufLen = v15;
  if (*(_DWORD *)buffer ^ 0x746F6F72 | v187)
  {
    LODWORD(block) = 0;
    if (buffer[0] - 97 < 0x1A)
    {
      LOBYTE(block) = buffer[0];
      if (buffer[1] - 97 <= 0x19)
      {
        BYTE1(block) = buffer[1];
        if (buffer[2] - 97 <= 0x19)
        {
          BYTE2(block) = buffer[2];
          if (buffer[3] - 97 <= 0x19)
            BYTE3(block) = buffer[3];
        }
      }
    }
    if ((unsigned __int16)block ^ 0x6164 | BYTE2(block)
      && (unsigned __int16)block ^ 0x626E | BYTE2(block)
      && (unsigned __int16)block ^ 0x6966 | BYTE2(block)
      && (unsigned __int16)block ^ 0x7673 | BYTE2(block))
    {
      if ((unsigned __int16)block ^ 0x7363 | BYTE2(block) && (unsigned __int16)block ^ 0x6B73 | BYTE2(block))
      {
        v16 = 4;
        if ((unsigned __int16)block ^ 0x6C65 | BYTE2(block)
          && (_DWORD)block != 7823720
          && (unsigned __int16)block ^ 0x7266 | BYTE2(block))
        {
          if ((unsigned __int16)block ^ 0x7274 | BYTE2(block))
          {
            if ((unsigned __int16)block ^ 0x6174 | BYTE2(block))
              v16 = 1;
            else
              v16 = 5;
          }
          else
          {
            v16 = 2;
          }
        }
      }
      else
      {
        v16 = 4;
      }
    }
    else
    {
      v16 = 3;
    }
  }
  else
  {
    v16 = 1;
  }
  v176 = 0;
  v177 = &v176;
  v178 = 0x2000000000;
  v179 = 0;
  if (qword_1EE41C508 != -1)
    dispatch_once(&qword_1EE41C508, &unk_1E3D3C080);
  block = MEMORY[0x1E0C809B0];
  v171 = 0x40000000;
  v172 = sub_19C3EA4E4;
  v173 = &unk_1E3D3C000;
  v174 = &v176;
  v175 = v16;
  dispatch_sync((dispatch_queue_t)qword_1EE41C500, &block);
  v154 = v177[3];
  _Block_object_dispose(&v176, 8);
  if (!*(_DWORD *)(a1 + 8))
  {
LABEL_213:
    v133 = 0;
    v134 = *v3;
    do
    {
      *(_DWORD *)(v134 + 4 * v133) += valuePtr;
      v135 = *(unsigned int *)(a1 + 8);
      v136 = v133++ >= v135;
    }
    while (!v136);
    v137 = 0;
    *(_DWORD *)(a1 + 12) = *(_DWORD *)(v134 + 4 * v135);
    v138 = *(_QWORD *)(a1 + 40);
    LODWORD(v139) = v135;
    do
    {
      *(_DWORD *)(v138 + 4 * v137) += *(_DWORD *)(a1 + 12) + v139;
      v139 = *(unsigned int *)(a1 + 8);
      v136 = v137++ >= v139;
    }
    while (!v136);
    v140 = 0;
    v141 = *v4;
    do
    {
      *(_DWORD *)(v141 + 4 * v140) += *(_DWORD *)(v138 + 4 * v139);
      v139 = *(unsigned int *)(a1 + 8);
      v136 = v140++ >= v139;
    }
    while (!v136);
    v142 = CFURLCopyAbsoluteURL(a2);
    v143 = *(const void **)(a1 + 144);
    if (v143)
      CFRelease(v143);
    *(_QWORD *)(a1 + 144) = v142;
    v17 = 1;
    goto LABEL_33;
  }
  v161 = 0;
  v162 = v5;
  v160 = 0;
  v19 = 0;
  v150 = "LMTIStringFunctions.cpp";
  v151 = "key_len <= key.size()";
  v149 = "compute_sort_key";
  while (1)
  {
    v163 = v19;
    ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)cf, v19);
    v21 = CFGetTypeID(ValueAtIndex);
    if (v21 != CFDictionaryGetTypeID())
      break;
    v22 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)ValueAtIndex, CFSTR("Name"));
    v23 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)ValueAtIndex, CFSTR("Abbreviation"));
    v24 = CFDictionaryGetValue((CFDictionaryRef)ValueAtIndex, CFSTR("StemCount"));
    v25 = CFDictionaryGetValue((CFDictionaryRef)ValueAtIndex, CFSTR("SuffixCount"));
    v166 = 0;
    if (!v22)
      break;
    v26 = v25;
    v27 = CFGetTypeID(v22);
    if (v27 != CFStringGetTypeID())
      break;
    if (CFStringGetLength(v22) < 1)
      break;
    if (!v23)
      break;
    v28 = CFGetTypeID(v23);
    if (v28 != CFStringGetTypeID())
      break;
    if (CFStringGetLength(v23) < 1)
      break;
    if (!v24)
      break;
    v29 = CFGetTypeID(v24);
    if (v29 != CFNumberGetTypeID())
      break;
    if (!CFNumberGetValue((CFNumberRef)v24, kCFNumberSInt32Type, (char *)&v166 + 4))
      break;
    if (SHIDWORD(v166) < 1)
      break;
    if (!v26)
      break;
    v30 = CFGetTypeID(v26);
    if (v30 != CFNumberGetTypeID())
      break;
    if (!CFNumberGetValue((CFNumberRef)v26, kCFNumberSInt32Type, &v166))
      break;
    v31 = v166;
    if ((int)v166 < 1)
      break;
    v32 = HIDWORD(v166);
    HIDWORD(v161) += HIDWORD(v166);
    sub_19C3E4804((uint64_t)v3, SHIDWORD(v161));
    LODWORD(v161) = v161 + v31;
    sub_19C3E4804(v162, v161);
    v160 += v32 * v31;
    sub_19C3E4804((uint64_t)v4, v160);
    sub_19C40F850((uint64_t)&srcLength, v23);
    v34 = *(_QWORD *)(a1 + 96);
    v33 = *(_QWORD *)(a1 + 104);
    if (v34 >= v33)
    {
      v37 = *(_QWORD *)(a1 + 88);
      v38 = (uint64_t)(v34 - v37) >> 5;
      if ((unint64_t)(v38 + 1) >> 59)
        sub_19C2A18E8();
      v39 = v33 - v37;
      v40 = v39 >> 4;
      if (v39 >> 4 <= (unint64_t)(v38 + 1))
        v40 = v38 + 1;
      if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFE0)
        v41 = 0x7FFFFFFFFFFFFFFLL;
      else
        v41 = v40;
      if (v41)
      {
        if (v41 >> 59)
          sub_19C2A143C();
        v42 = (char *)operator new(32 * v41);
      }
      else
      {
        v42 = 0;
      }
      v43 = (uint64_t)&v42[32 * v38];
      __src_8 = &v42[32 * v41];
      sub_19C4100C4(v43, (unsigned __int16 *)&srcLength);
      v44 = 0;
      v36 = v43 + 32;
      *((_QWORD *)&v45 + 1) = __src_8;
      *(_QWORD *)&v45 = v43 + 32;
      *(_OWORD *)__src = v45;
      v47 = *(_QWORD *)(a1 + 88);
      for (i = *(_QWORD *)(a1 + 96); i + v44 != v47; sub_19C4100C4(v43 + v44, (unsigned __int16 *)(v44 + i)))
        v44 -= 32;
      v48 = v43 + v44;
      v49 = *(char **)(a1 + 88);
      v50 = *(char **)(a1 + 96);
      *(_QWORD *)(a1 + 88) = v48;
      *(_OWORD *)(a1 + 96) = *(_OWORD *)__src;
      for (j = v163; v50 != v49; v50 -= 32)
      {
        v70 = (void *)*((_QWORD *)v50 - 3);
        if (v70 && *(v50 - 26) == 1)
          free(v70);
      }
      if (v49)
        operator delete(v49);
    }
    else
    {
      sub_19C4100C4(*(_QWORD *)(a1 + 96), (unsigned __int16 *)&srcLength);
      j = v163;
      v36 = v34 + 32;
      *(_QWORD *)(a1 + 96) = v34 + 32;
    }
    *(_QWORD *)(a1 + 96) = v36;
    if ((_WORD)srcLength)
    {
      v51 = v182;
      if (v182 || (sub_19C40FF9C((unsigned __int16 *)&srcLength), (v51 = v182) != 0))
      {
        v52 = (char *)operator new(2 * v51);
        v53 = &v52[2 * v51];
        bzero(v52, 2 * v51);
        v54 = v53;
      }
      else
      {
        v54 = 0;
        v53 = 0;
        v52 = 0;
      }
      *(_QWORD *)pErrorCode = 0;
      v55 = v54 - v52;
      if (v184)
        v56 = (const char *)v184;
      else
        v56 = v185;
      u_strFromUTF8((UChar *)v52, (unint64_t)(v54 - v52) >> 1, (int32_t *)pErrorCode, v56, (unsigned __int16)srcLength, &pErrorCode[1]);
      v57 = pErrorCode[1];
      if (pErrorCode[1] == U_BUFFER_OVERFLOW_ERROR)
      {
        v58 = v53;
        v59 = pErrorCode[0];
        v60 = (int)pErrorCode[0] - (v55 >> 1);
        if ((int)pErrorCode[0] <= (unint64_t)(v55 >> 1))
        {
          if ((int)pErrorCode[0] < (unint64_t)(v55 >> 1))
            v54 = &v52[2 * pErrorCode[0]];
        }
        else if (v60 <= (v58 - v54) >> 1)
        {
          bzero(v54, 2 * v60);
          v54 += 2 * v60;
        }
        else
        {
          if (pErrorCode[0] < 0)
            sub_19C2A18E8();
          if (v58 - v52 > (unint64_t)(int)pErrorCode[0])
            v59 = v58 - v52;
          if ((unint64_t)(v58 - v52) >= 0x7FFFFFFFFFFFFFFELL)
            v59 = 0x7FFFFFFFFFFFFFFFLL;
          if (v59 < 0)
            sub_19C2A143C();
          v61 = (char *)operator new(2 * v59);
          v62 = 2 * v60;
          v63 = v61;
          v64 = &v61[2 * (v55 >> 1)];
          __srca = v62;
          bzero(v64, v62);
          if (v54 == v52)
          {
            v67 = v64;
            v68 = __srca;
          }
          else
          {
            v65 = v54 - v52 - 2;
            if (v65 < 0x1E || (unint64_t)(v52 - v63) < 0x20)
            {
              v66 = v54;
              v67 = v64;
              v68 = __srca;
              goto LABEL_95;
            }
            v96 = (v65 >> 1) + 1;
            v66 = &v54[-2 * (v96 & 0xFFFFFFFFFFFFFFF0)];
            v97 = &v63[v55 - 16];
            v98 = v54 - 16;
            v99 = v96 & 0xFFFFFFFFFFFFFFF0;
            do
            {
              v100 = *(_OWORD *)v98;
              *((_OWORD *)v97 - 1) = *((_OWORD *)v98 - 1);
              *(_OWORD *)v97 = v100;
              v97 -= 32;
              v98 -= 32;
              v99 -= 16;
            }
            while (v99);
            v67 = v64;
            v64 -= 2 * (v96 & 0xFFFFFFFFFFFFFFF0);
            v68 = __srca;
            if (v96 != (v96 & 0xFFFFFFFFFFFFFFF0))
            {
              do
              {
LABEL_95:
                v69 = *((_WORD *)v66 - 1);
                v66 -= 2;
                *((_WORD *)v64 - 1) = v69;
                v64 -= 2;
              }
              while (v66 != v52);
            }
          }
          v54 = &v67[v68];
          if (v52)
            operator delete(v52);
          v52 = v64;
        }
        pErrorCode[1] = U_ZERO_ERROR;
        if (v184)
          v72 = (const char *)v184;
        else
          v72 = v185;
        u_strFromUTF8((UChar *)v52, (unint64_t)(v54 - v52) >> 1, (int32_t *)pErrorCode, v72, (unsigned __int16)srcLength, &pErrorCode[1]);
        v57 = pErrorCode[1];
      }
      if (v57 > U_ZERO_ERROR)
      {
        v71 = 0;
        goto LABEL_165;
      }
      v73 = pErrorCode[0];
      if ((int)pErrorCode[0] > (unint64_t)((v54 - v52) >> 1))
        __assert_rtn("compute_sort_key", "LMTIStringFunctions.cpp", 34, "ustr_len <= ustr.size()");
      j = v163;
      if (!v154)
      {
        v176 = 0;
        v177 = &v176;
        v178 = 0x2000000000;
        v179 = 0;
        if (qword_1EE41C508 != -1)
          dispatch_once(&qword_1EE41C508, &unk_1E3D3C080);
        block = MEMORY[0x1E0C809B0];
        v171 = 0x40000000;
        v172 = sub_19C3EA4E4;
        v173 = &unk_1E3D3C000;
        v174 = &v176;
        v175 = 1;
        dispatch_sync((dispatch_queue_t)qword_1EE41C500, &block);
        v74 = v177[3];
        _Block_object_dispose(&v176, 8);
        if (v74)
        {
          v73 = pErrorCode[0];
          goto LABEL_123;
        }
        v71 = 0;
LABEL_166:
        if (v52)
          operator delete(v52);
        goto LABEL_168;
      }
LABEL_123:
      if (v73)
      {
        if (v73 < 0)
          sub_19C2A18E8();
        v75 = 3 * v73;
        v76 = (char *)operator new(v75);
        bzero(v76, v75);
        v77 = &v76[v75];
      }
      else
      {
        v77 = 0;
        v76 = 0;
      }
      v78 = v77;
      v79 = v77 - v76;
      __srcb = v76;
      LODWORD(v80) = ucol_getSortKey();
      v81 = v80;
      v82 = v80 - v79;
      if (v80 > v79)
      {
        v148 = v80;
        if (2 * v79 <= v80)
          v80 = v80;
        else
          v80 = 2 * v79;
        v152 = (char *)operator new(v80);
        v83 = &v152[v79];
        bzero(&v152[v79], v82);
        if (v78 == __srcb)
        {
          v84 = v152;
        }
        else
        {
          v84 = v152;
          if (v79 >= 8)
          {
            if (v79 >= 0x20)
            {
              v86 = v79 & 0xFFFFFFFFFFFFFFE0;
              v87 = &v152[v79 - 16];
              v88 = v78 - 16;
              v89 = v79 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                v90 = *(_OWORD *)v88;
                *((_OWORD *)v87 - 1) = *((_OWORD *)v88 - 1);
                *(_OWORD *)v87 = v90;
                v87 -= 32;
                v88 -= 32;
                v89 -= 32;
              }
              while (v89);
              if (v79 == v86)
                goto LABEL_153;
              if ((v79 & 0x18) == 0)
              {
                v83 -= v86;
                v85 = &v78[-v86];
                goto LABEL_151;
              }
            }
            else
            {
              v86 = 0;
            }
            v85 = &v78[-(v79 & 0xFFFFFFFFFFFFFFF8)];
            v91 = v86 - (v79 & 0xFFFFFFFFFFFFFFF8);
            v92 = &v78[-v86];
            v93 = &v152[&v78[-v86] - __srcb - 8];
            v94 = v92 - 8;
            do
            {
              v95 = *(_QWORD *)v94;
              v94 -= 8;
              *(_QWORD *)v93 = v95;
              v93 -= 8;
              v91 += 8;
            }
            while (v91);
            if (v79 != (v79 & 0xFFFFFFFFFFFFFFF8))
            {
              v83 -= v79 & 0xFFFFFFFFFFFFFFF8;
              goto LABEL_151;
            }
          }
          else
          {
            v85 = v78;
LABEL_151:
            v101 = v83 - 1;
            do
            {
              v102 = *--v85;
              *v101-- = v102;
            }
            while (v85 != __srcb);
          }
LABEL_153:
          v78 = __srcb;
          v83 = v152;
        }
        if (v78)
        {
          operator delete(v78);
          v84 = v152;
        }
        v79 = &v84[v148] - v83;
        __srcb = v83;
        LODWORD(v80) = ucol_getSortKey();
        v81 = v80;
      }
      v103 = __srcb;
      if (v79 < v81)
      {
        v144 = 47;
        goto LABEL_232;
      }
      v104 = (v80 - 1);
      if (__srcb[v104])
      {
        v144 = 48;
        v145 = "key[key_len - 1] == 0";
        goto LABEL_231;
      }
      if (WORD1(v104))
      {
        v144 = 31;
        v149 = "initialize";
        v150 = "LMTIByteString.cpp";
        v145 = "buffer_size <= std::numeric_limits<uint16_t>::max()";
LABEL_231:
        v151 = (char *)v145;
LABEL_232:
        __assert_rtn(v149, v150, v144, v151);
      }
      v71 = v80 - 1;
      if ((unsigned __int16)(v80 - 1) < 0xFu)
      {
        if ((_DWORD)v80 != 1)
          memmove(__dst, __srcb, v104);
      }
      else
      {
        *(_QWORD *)&__dst[6] = operator new[]();
        v103 = __srcb;
        memcpy(*(void **)&__dst[6], __srcb, v104);
      }
      operator delete(v103);
LABEL_165:
      j = v163;
      goto LABEL_166;
    }
    v71 = 0;
LABEL_168:
    v106 = *(char **)(a1 + 120);
    v105 = *(_QWORD *)(a1 + 128);
    if ((unint64_t)v106 >= v105)
    {
      v108 = *(char **)(a1 + 112);
      v109 = (v106 - v108) >> 4;
      v110 = v109 + 1;
      if ((unint64_t)(v109 + 1) >> 60)
        sub_19C2A18E8();
      v111 = v105 - (_QWORD)v108;
      if (v111 >> 3 > v110)
        v110 = v111 >> 3;
      if ((unint64_t)v111 >= 0x7FFFFFFFFFFFFFF0)
        v112 = 0xFFFFFFFFFFFFFFFLL;
      else
        v112 = v110;
      if (v112)
      {
        if (v112 >> 60)
          sub_19C2A143C();
        v113 = (char *)operator new(16 * v112);
      }
      else
      {
        v113 = 0;
      }
      v114 = &v113[16 * v109];
      *(_WORD *)v114 = v71;
      *(_QWORD *)(v114 + 2) = *(_QWORD *)__dst;
      *((_QWORD *)v114 + 1) = *(_QWORD *)&__dst[6];
      if (v106 == v108)
      {
        *(_QWORD *)(a1 + 112) = v114;
        *(_QWORD *)(a1 + 120) = v114 + 16;
        *(_QWORD *)(a1 + 128) = &v113[16 * v112];
        j = v163;
        v107 = v114 + 16;
      }
      else
      {
        v153 = &v113[16 * v112];
        __srcc = v114 + 16;
        v115 = 0;
        do
        {
          v116 = &v114[v115 - 16];
          v117 = *(unsigned __int16 *)&v106[v115 - 16];
          if (v117 < 0xF)
          {
            *(_OWORD *)v116 = *(_OWORD *)&v106[v115 - 16];
          }
          else
          {
            *(_WORD *)v116 = v117;
            v118 = (void *)operator new[]();
            *(_QWORD *)&v114[v115 - 8] = v118;
            memcpy(v118, *(const void **)&v106[v115 - 8], *(unsigned __int16 *)v116);
          }
          v115 -= 16;
        }
        while (&v106[v115] != v108);
        v119 = &v114[v115];
        v106 = *(char **)(a1 + 112);
        v120 = *(char **)(a1 + 120);
        v107 = v114 + 16;
        *(_QWORD *)(a1 + 112) = v119;
        *(_QWORD *)(a1 + 120) = __srcc;
        *(_QWORD *)(a1 + 128) = v153;
        j = v163;
        if (v120 != v106)
        {
          v121 = v120;
          do
          {
            v122 = *((unsigned __int16 *)v121 - 8);
            v121 -= 16;
            if (v122 >= 0xF)
            {
              v123 = *((_QWORD *)v120 - 1);
              if (v123)
                MEMORY[0x1A1AD3538](v123, 0x1000C8077774924);
            }
            v120 = v121;
          }
          while (v121 != v106);
        }
      }
      if (v106)
        operator delete(v106);
    }
    else
    {
      *(_WORD *)v106 = v71;
      *(_QWORD *)(v106 + 2) = *(_QWORD *)__dst;
      *((_QWORD *)v106 + 1) = *(_QWORD *)&__dst[6];
      v107 = v106 + 16;
      *(_QWORD *)(a1 + 120) = v106 + 16;
    }
    *(_QWORD *)(a1 + 120) = v107;
    if (v184 && v183 == 1)
      free(v184);
    v19 = j + 1;
    if (v19 >= *(unsigned int *)(a1 + 8))
      goto LABEL_213;
  }
  v124 = *(_QWORD *)(a1 + 88);
  for (k = *(_QWORD *)(a1 + 96); k != v124; k -= 32)
  {
    v126 = *(void **)(k - 24);
    if (v126 && *(_BYTE *)(k - 26) == 1)
      free(v126);
  }
  *(_QWORD *)(a1 + 96) = v124;
  v128 = *(_QWORD *)(a1 + 112);
  v127 = *(_QWORD *)(a1 + 120);
  if (v127 != v128)
  {
    v129 = *(_QWORD *)(a1 + 120);
    do
    {
      v130 = *(unsigned __int16 *)(v129 - 16);
      v129 -= 16;
      if (v130 >= 0xF)
      {
        v131 = *(_QWORD *)(v127 - 8);
        if (v131)
          MEMORY[0x1A1AD3538](v131, 0x1000C8077774924);
      }
      v127 = v129;
    }
    while (v129 != v128);
  }
  *(_QWORD *)(a1 + 120) = v128;
  v132 = *(const void **)(a1 + 136);
  if (v132)
    CFRelease(v132);
  v17 = 0;
  *(_QWORD *)(a1 + 136) = 0;
LABEL_33:
  CFRelease(v7);
  if ((v17 & 1) == 0)
  {
LABEL_233:
    exception = __cxa_allocate_exception(0x20uLL);
    v147 = (char *)operator new(0x30uLL);
    strcpy(v147, "invalid stem suffix lexicon ID converter plist");
    *(_QWORD *)exception = off_1E3D38838;
    sub_19C2B5238(exception + 8, v147, 0x2EuLL);
    __cxa_throw(exception, (struct type_info *)&unk_1E3D32968, (void (*)(void *))sub_19C3123E4);
  }
  return a1;
}

void sub_19C3E5A84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, char a11, int a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,uint64_t a24,void **a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,int a45,__int16 a46,char a47,void *a48)
{
  _QWORD *v48;
  void **v49;
  void **v50;
  void *v51;
  const void *v53;
  const void *v54;
  uint64_t v55;
  char *v56;
  void *v57;
  void *v58;
  void *v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  unsigned int v63;
  uint64_t v64;
  char *v65;
  char *v66;
  void *v67;

  if (v51)
    operator delete(v51);
  if (a48 && a47 == 1)
    free(a48);
  v53 = (const void *)v48[18];
  if (v53)
    CFRelease(v53);
  v48[18] = 0;
  v54 = (const void *)v48[17];
  if (v54)
    CFRelease(v54);
  v48[17] = 0;
  v55 = v48[14];
  if (v55)
  {
    v60 = v48[15];
    v61 = (void *)v48[14];
    if (v60 != v55)
    {
      v62 = v48[15];
      do
      {
        v63 = *(unsigned __int16 *)(v62 - 16);
        v62 -= 16;
        if (v63 >= 0xF)
        {
          v64 = *(_QWORD *)(v60 - 8);
          if (v64)
            MEMORY[0x1A1AD3538](v64, 0x1000C8077774924);
        }
        v60 = v62;
      }
      while (v62 != v55);
      v61 = (void *)v48[14];
    }
    v48[15] = v55;
    operator delete(v61);
    v56 = (char *)v48[11];
    if (!v56)
    {
LABEL_12:
      v57 = *v50;
      if (!*v50)
        goto LABEL_14;
      goto LABEL_13;
    }
  }
  else
  {
    v56 = (char *)v48[11];
    if (!v56)
      goto LABEL_12;
  }
  v65 = (char *)v48[12];
  v66 = v56;
  if (v65 != v56)
  {
    do
    {
      v67 = (void *)*((_QWORD *)v65 - 3);
      if (v67 && *(v65 - 26) == 1)
        free(v67);
      v65 -= 32;
    }
    while (v65 != v56);
    v66 = (char *)v48[11];
  }
  v48[12] = v56;
  operator delete(v66);
  v57 = *v50;
  if (!*v50)
  {
LABEL_14:
    v58 = *a25;
    if (*a25)
    {
      v48[6] = v58;
      operator delete(v58);
    }
    v59 = *v49;
    if (*v49)
    {
      v48[3] = v59;
      operator delete(v59);
      _Unwind_Resume(exception_object);
    }
    _Unwind_Resume(exception_object);
  }
LABEL_13:
  v48[9] = v57;
  operator delete(v57);
  goto LABEL_14;
}

_QWORD *sub_19C3E5DE4(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E3D37468;
  a1[2] = &off_1E3D34DF0;
  v2 = (void *)a1[3];
  if (v2)
    munmap(v2, a1[4]);
  a1[4] = 0;
  return a1;
}

void sub_19C3E5E34(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E3D37468;
  a1[2] = &off_1E3D34DF0;
  v2 = (void *)a1[3];
  if (v2)
    munmap(v2, a1[4]);
  a1[4] = 0;
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C3E5E94(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  unsigned int v9;
  int *v10;
  unint64_t v11;
  unsigned int v12;
  int *v13;
  unint64_t v14;
  int *v15;
  unsigned int v16;
  int *v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  int v21;
  BOOL v22;
  int *v23;
  unint64_t v24;
  unint64_t v25;
  int *v26;
  unsigned int v27;
  int *v28;
  int v29;
  unint64_t v30;
  unint64_t v31;
  int *v32;
  int *v33;
  char v34;
  unint64_t v35;
  unint64_t v36;
  int *v37;
  unsigned int v38;
  int *v39;
  int v40;

  v4 = HIWORD(a2);
  v5 = *(_DWORD *)(a1 + 56);
  if (HIWORD(a2) >= v5)
    return 1;
  v6 = *(_QWORD *)(a1 + 40);
  v7 = *(_QWORD *)(a1 + 48);
  v8 = (int *)(v6 + 4 * *(unsigned int *)(v7 + 4 * v4));
  v9 = v5 - 1;
  if (v4 == v5 - 1)
  {
    v10 = (int *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(a1 + 32));
    if (v8 == v10)
      return 1;
  }
  else
  {
    v10 = (int *)(v6 + 4 * *(unsigned int *)(v7 + 4 * (v4 + 1)));
    if (v8 == v10)
      return 1;
  }
  v11 = v10 - v8;
  v12 = (unsigned __int16)a2;
  v13 = (int *)(v6 + 4 * *(unsigned int *)(v7 + 4 * v4));
  do
  {
    v14 = v11 >> 1;
    v15 = &v13[v11 >> 1];
    v16 = *((unsigned __int16 *)v15 + 1);
    v17 = v15 + 1;
    v11 += ~(v11 >> 1);
    if (v16 < (unsigned __int16)a2)
      v13 = v17;
    else
      v11 = v14;
  }
  while (v11);
  if (v13 < v10)
  {
    v18 = a2 << 16;
    v19 = *v13;
    v20 = v19 ^ (a2 << 16);
    v21 = v19 & 0x100;
    v22 = HIWORD(v20) || v21 == 0;
    if (!v22 && a4)
    {
      v23 = (int *)(v4 == v9
                  ? *(_QWORD *)(a1 + 24) + *(_QWORD *)(a1 + 32)
                  : v6 + 4 * *(unsigned int *)(v7 + 4 * (v4 + 1)));
      if (v8 != v23)
      {
        v24 = v23 - v8;
        do
        {
          v25 = v24 >> 1;
          v26 = &v8[v24 >> 1];
          v27 = *((unsigned __int16 *)v26 + 1);
          v28 = v26 + 1;
          v24 += ~(v24 >> 1);
          if (v27 < v12)
            v8 = v28;
          else
            v24 = v25;
        }
        while (v24);
        if (v8 < v23)
        {
          v29 = *v8;
          if (!((*v8 ^ v18) >> 16))
          {
            v30 = *(unsigned int *)(a3 + 4 * a4 - 4);
            v31 = v30 >> 16;
            if (HIWORD(*(_DWORD *)(a3 + 4 * a4 - 4)) < v5)
            {
              v32 = (int *)(v6 + 4 * *(unsigned int *)(v7 + 4 * v31));
              v33 = (int *)((_DWORD)v31 == v9
                          ? *(_QWORD *)(a1 + 24) + *(_QWORD *)(a1 + 32)
                          : v6 + 4 * *(unsigned int *)(v7 + 4 * (v31 + 1)));
              if (v32 != v33)
              {
                v34 = v29;
                v35 = v33 - v32;
                do
                {
                  v36 = v35 >> 1;
                  v37 = &v32[v35 >> 1];
                  v38 = *((unsigned __int16 *)v37 + 1);
                  v39 = v37 + 1;
                  v35 += ~(v35 >> 1);
                  if (v38 < (unsigned __int16)*(_DWORD *)(a3 + 4 * a4 - 4))
                    v32 = v39;
                  else
                    v35 = v36;
                }
                while (v35);
                if (v32 < v33)
                {
                  v40 = *v32;
                  if (!((*v32 ^ ((_DWORD)v30 << 16)) >> 16))
                  {
                    if ((v40 & 1) != 0)
                    {
                      if ((v34 & 0xE0) != 0)
                        return 0;
                    }
                    else if ((v40 & 2) != 0)
                    {
                      if ((v34 & 0xD0) != 0)
                        return 0;
                    }
                    else if ((v40 & 4) != 0)
                    {
                      if ((v34 & 0xB0) != 0)
                        return 0;
                    }
                    else if ((v40 & 8) != 0 && (v34 & 0x70) != 0)
                    {
                      return 0;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return 1;
}

double sub_19C3E60B0(uint64_t a1)
{
  return *(double *)(a1 + 8);
}

uint64_t *sub_19C3E60B8(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, int a8)
{
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  int v17;
  const UInt8 *v18;
  CFIndex v19;
  const __CFString *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  CFDictionaryRef *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  const __CFDictionary *Value;
  uint8x8_t v29;
  unint64_t v30;
  uint64_t **v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  void *v35;
  const __CFDictionary *v36;
  uint8x8_t v37;
  unint64_t v38;
  uint64_t **v39;
  uint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  void *v43;
  unint64_t *v44;
  unint64_t v45;
  void *exception;
  void *v48;
  int8x8_t v49;
  _QWORD *v50;
  int v51;
  void *v52[2];
  char v53;
  int v54;
  void *__p[3];

  *a1 = a3;
  a1[1] = a4;
  if (a4)
  {
    v12 = (unint64_t *)(a4 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  a1[2] = *a2;
  v14 = a2[1];
  a1[3] = v14;
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  a1[4] = a7;
  v17 = *(char *)(a6 + 23);
  if (v17 >= 0)
    v18 = (const UInt8 *)a6;
  else
    v18 = *(const UInt8 **)a6;
  if (v17 >= 0)
    v19 = *(unsigned __int8 *)(a6 + 23);
  else
    v19 = *(_QWORD *)(a6 + 8);
  v20 = CFStringCreateWithBytes(0, v18, v19, 0x8000100u, 0);
  if (!v20)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD3154](exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  a1[5] = (uint64_t)CFLocaleCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v20);
  CFRelease(v20);
  *((_DWORD *)a1 + 12) = a5;
  v21 = *a1;
  v53 = 7;
  strcpy((char *)v52, "_U_CAP_");
  v54 = 0;
  sub_19C297950(&v48, (const UInt8 *)v52);
  v51 = v54;
  (*(void (**)(void **__return_ptr, uint64_t, void **))(*(_QWORD *)v21 + 16))(__p, v21, &v48);
  v22 = *(_DWORD *)__p[0];
  __p[1] = __p[0];
  operator delete(__p[0]);
  if (SHIBYTE(v50) < 0)
  {
    operator delete(v48);
    if ((v53 & 0x80000000) == 0)
      goto LABEL_16;
  }
  else if ((v53 & 0x80000000) == 0)
  {
    goto LABEL_16;
  }
  operator delete(v52[0]);
LABEL_16:
  *((_OWORD *)a1 + 6) = 0u;
  *((_DWORD *)a1 + 13) = v22;
  *(_OWORD *)(a1 + 7) = 0u;
  *(_OWORD *)(a1 + 9) = 0u;
  *((_DWORD *)a1 + 22) = 1065353216;
  *((_OWORD *)a1 + 7) = 0u;
  *((_DWORD *)a1 + 32) = 1065353216;
  v23 = *(_QWORD *)(a7 + 416);
  v25 = *(CFDictionaryRef **)(v23 + 144);
  v24 = *(std::__shared_weak_count **)(v23 + 152);
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v27 = __ldxr(p_shared_owners);
    while (__stxr(v27 + 1, p_shared_owners));
  }
  if (v25)
  {
    Value = (const __CFDictionary *)CFDictionaryGetValue(*v25, CFSTR("PrimaryThreshold"));
    sub_19C3A7BFC((uint64_t *)&v48, Value);
    if (v49)
    {
      v29 = (uint8x8_t)vcnt_s8(v49);
      v29.i16[0] = vaddlv_u8(v29);
      if (v29.u32[0] > 1uLL)
      {
        v30 = a8;
        if (*(_QWORD *)&v49 <= (unint64_t)a8)
          v30 = (unint64_t)a8 % *(_QWORD *)&v49;
      }
      else
      {
        v30 = (*(_QWORD *)&v49 - 1) & a8;
      }
      v31 = (uint64_t **)*((_QWORD *)v48 + v30);
      if (v31)
      {
        v32 = *v31;
        if (v32)
        {
          if (v29.u32[0] < 2uLL)
          {
            while (1)
            {
              v34 = v32[1];
              if (v34 == a8)
              {
                if (v32[2] == a8)
                  goto LABEL_42;
              }
              else if ((v34 & (*(_QWORD *)&v49 - 1)) != v30)
              {
                goto LABEL_76;
              }
              v32 = (uint64_t *)*v32;
              if (!v32)
                goto LABEL_76;
            }
          }
          do
          {
            v33 = v32[1];
            if (v33 == a8)
            {
              if (v32[2] == a8)
              {
LABEL_42:
                if (a1 + 7 != v32 + 3)
                {
                  *((_DWORD *)a1 + 22) = *((_DWORD *)v32 + 14);
                  sub_19C3A91FC(a1 + 7, (uint64_t *)v32[5]);
                }
                sub_19C3A948C(v50);
                v35 = v48;
                v48 = 0;
                if (v35)
                  operator delete(v35);
                v36 = (const __CFDictionary *)CFDictionaryGetValue(*v25, CFSTR("SecondaryThreshold"));
                sub_19C3A7BFC((uint64_t *)&v48, v36);
                if (!*(_QWORD *)&v49)
                  goto LABEL_77;
                v37 = (uint8x8_t)vcnt_s8(v49);
                v37.i16[0] = vaddlv_u8(v37);
                if (v37.u32[0] > 1uLL)
                {
                  v38 = a8;
                  if (*(_QWORD *)&v49 <= (unint64_t)a8)
                    v38 = (unint64_t)a8 % *(_QWORD *)&v49;
                }
                else
                {
                  v38 = (*(_QWORD *)&v49 - 1) & a8;
                }
                v39 = (uint64_t **)*((_QWORD *)v48 + v38);
                if (!v39 || (v40 = *v39) == 0)
LABEL_77:
                  sub_19C2B41E0("unordered_map::at: key not found");
                if (v37.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    v42 = v40[1];
                    if (v42 == a8)
                    {
                      if (v40[2] == a8)
                        goto LABEL_66;
                    }
                    else if ((v42 & (*(_QWORD *)&v49 - 1)) != v38)
                    {
                      goto LABEL_77;
                    }
                    v40 = (uint64_t *)*v40;
                    if (!v40)
                      goto LABEL_77;
                  }
                }
                while (1)
                {
                  v41 = v40[1];
                  if (v41 == a8)
                  {
                    if (v40[2] == a8)
                    {
LABEL_66:
                      if (a1 + 12 != v40 + 3)
                      {
                        *((_DWORD *)a1 + 32) = *((_DWORD *)v40 + 14);
                        sub_19C3A91FC(a1 + 12, (uint64_t *)v40[5]);
                      }
                      sub_19C3A948C(v50);
                      v43 = v48;
                      v48 = 0;
                      if (v43)
                        operator delete(v43);
                      goto LABEL_70;
                    }
                  }
                  else
                  {
                    if (v41 >= *(_QWORD *)&v49)
                      v41 %= *(_QWORD *)&v49;
                    if (v41 != v38)
                      goto LABEL_77;
                  }
                  v40 = (uint64_t *)*v40;
                  if (!v40)
                    goto LABEL_77;
                }
              }
            }
            else
            {
              if (v33 >= *(_QWORD *)&v49)
                v33 %= *(_QWORD *)&v49;
              if (v33 != v30)
                break;
            }
            v32 = (uint64_t *)*v32;
          }
          while (v32);
        }
      }
    }
LABEL_76:
    sub_19C2B41E0("unordered_map::at: key not found");
  }
LABEL_70:
  if (v24)
  {
    v44 = (unint64_t *)&v24->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  return a1;
}

void sub_19C3E655C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;

  v24 = *(std::__shared_weak_count **)(v22 + 24);
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = *(std::__shared_weak_count **)(v22 + 8);
  if (v27)
  {
    v28 = (unint64_t *)&v27->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  _Unwind_Resume(exception_object);
}

float sub_19C3E6760(_QWORD *a1, unint64_t a2, unint64_t a3, int a4)
{
  unint64_t v4;
  unint64_t v5;
  int8x8_t v6;
  uint8x8_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int8x8_t v14;
  uint8x8_t v15;
  unint64_t v16;
  float **v17;
  float *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int8x8_t v22;
  uint8x8_t v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  float result;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  int8x8_t v32;
  uint8x8_t v33;
  unint64_t v34;
  float **v35;
  float *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;

  if (a3 >= 3)
    v4 = 3;
  else
    v4 = a3;
  v5 = 4;
  if (a2 < 4)
    v5 = a2;
  v6 = (int8x8_t)a1[8];
  if (!*(_QWORD *)&v6)
    goto LABEL_93;
  v7 = (uint8x8_t)vcnt_s8(v6);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    v8 = v4;
    if (v4 >= *(_QWORD *)&v6)
      v8 = v4 % *(_QWORD *)&v6;
  }
  else
  {
    v8 = (*(_QWORD *)&v6 + 3) & v4;
  }
  v9 = *(_QWORD **)(a1[7] + 8 * v8);
  if (!v9 || (v10 = (_QWORD *)*v9) == 0)
LABEL_93:
    sub_19C2B41E0("unordered_map::at: key not found");
  if (v7.u32[0] < 2uLL)
  {
    v11 = *(_QWORD *)&v6 - 1;
    while (1)
    {
      v13 = v10[1];
      if (v4 == v13)
      {
        if (v10[2] == v4)
          goto LABEL_26;
      }
      else if ((v13 & v11) != v8)
      {
        goto LABEL_93;
      }
      v10 = (_QWORD *)*v10;
      if (!v10)
        goto LABEL_93;
    }
  }
  while (1)
  {
    v12 = v10[1];
    if (v4 == v12)
      break;
    if (v12 >= *(_QWORD *)&v6)
      v12 %= *(_QWORD *)&v6;
    if (v12 != v8)
      goto LABEL_93;
LABEL_16:
    v10 = (_QWORD *)*v10;
    if (!v10)
      goto LABEL_93;
  }
  if (v10[2] != v4)
    goto LABEL_16;
LABEL_26:
  v14 = (int8x8_t)v10[4];
  if (!*(_QWORD *)&v14)
    goto LABEL_93;
  v15 = (uint8x8_t)vcnt_s8(v14);
  v15.i16[0] = vaddlv_u8(v15);
  if (v15.u32[0] > 1uLL)
  {
    v16 = v5;
    if (v5 >= *(_QWORD *)&v14)
      v16 = v5 % *(_QWORD *)&v14;
  }
  else
  {
    v16 = (*(_QWORD *)&v14 + 7) & v5;
  }
  v17 = *(float ***)(v10[3] + 8 * v16);
  if (!v17)
    goto LABEL_93;
  v18 = *v17;
  if (!v18)
    goto LABEL_93;
  if (v15.u32[0] < 2uLL)
  {
    v19 = *(_QWORD *)&v14 - 1;
    while (1)
    {
      v21 = *((_QWORD *)v18 + 1);
      if (v5 == v21)
      {
        if (*((_QWORD *)v18 + 2) == v5)
          goto LABEL_46;
      }
      else if ((v21 & v19) != v16)
      {
        goto LABEL_93;
      }
      v18 = *(float **)v18;
      if (!v18)
        goto LABEL_93;
    }
  }
  while (1)
  {
    v20 = *((_QWORD *)v18 + 1);
    if (v5 == v20)
      break;
    if (v20 >= *(_QWORD *)&v14)
      v20 %= *(_QWORD *)&v14;
    if (v20 != v16)
      goto LABEL_93;
LABEL_36:
    v18 = *(float **)v18;
    if (!v18)
      goto LABEL_93;
  }
  if (*((_QWORD *)v18 + 2) != v5)
    goto LABEL_36;
LABEL_46:
  v22 = (int8x8_t)a1[13];
  if (!*(_QWORD *)&v22)
    goto LABEL_93;
  v23 = (uint8x8_t)vcnt_s8(v22);
  v23.i16[0] = vaddlv_u8(v23);
  v24 = v23.u32[0];
  if (v23.u32[0] > 1uLL)
  {
    v25 = v4;
    if (v4 >= *(_QWORD *)&v22)
      v25 = v4 % *(_QWORD *)&v22;
  }
  else
  {
    v25 = (*(_QWORD *)&v22 + 3) & v4;
  }
  v26 = *(_QWORD **)(a1[12] + 8 * v25);
  if (!v26)
    goto LABEL_93;
  v27 = (_QWORD *)*v26;
  if (!v27)
    goto LABEL_93;
  result = v18[6];
  if (v24 < 2)
  {
    v29 = *(_QWORD *)&v22 - 1;
    while (1)
    {
      v31 = v27[1];
      if (v4 == v31)
      {
        if (v27[2] == v4)
          goto LABEL_66;
      }
      else if ((v31 & v29) != v25)
      {
        goto LABEL_93;
      }
      v27 = (_QWORD *)*v27;
      if (!v27)
        goto LABEL_93;
    }
  }
  while (1)
  {
    v30 = v27[1];
    if (v4 == v30)
      break;
    if (v30 >= *(_QWORD *)&v22)
      v30 %= *(_QWORD *)&v22;
    if (v30 != v25)
      goto LABEL_93;
LABEL_56:
    v27 = (_QWORD *)*v27;
    if (!v27)
      goto LABEL_93;
  }
  if (v27[2] != v4)
    goto LABEL_56;
LABEL_66:
  v32 = (int8x8_t)v27[4];
  if (!*(_QWORD *)&v32)
    goto LABEL_93;
  v33 = (uint8x8_t)vcnt_s8(v32);
  v33.i16[0] = vaddlv_u8(v33);
  if (v33.u32[0] > 1uLL)
  {
    v34 = v5;
    if (v5 >= *(_QWORD *)&v32)
      v34 = v5 % *(_QWORD *)&v32;
  }
  else
  {
    v34 = (*(_QWORD *)&v32 + 7) & v5;
  }
  v35 = *(float ***)(v27[3] + 8 * v34);
  if (!v35)
    goto LABEL_93;
  v36 = *v35;
  if (!v36)
    goto LABEL_93;
  if (v33.u32[0] < 2uLL)
  {
    v37 = *(_QWORD *)&v32 - 1;
    while (1)
    {
      v39 = *((_QWORD *)v36 + 1);
      if (v5 == v39)
      {
        if (*((_QWORD *)v36 + 2) == v5)
          goto LABEL_86;
      }
      else if ((v39 & v37) != v34)
      {
        goto LABEL_93;
      }
      v36 = *(float **)v36;
      if (!v36)
        goto LABEL_93;
    }
  }
  while (1)
  {
    v38 = *((_QWORD *)v36 + 1);
    if (v5 == v38)
      break;
    if (v38 >= *(_QWORD *)&v32)
      v38 %= *(_QWORD *)&v32;
    if (v38 != v34)
      goto LABEL_93;
LABEL_76:
    v36 = *(float **)v36;
    if (!v36)
      goto LABEL_93;
  }
  if (*((_QWORD *)v36 + 2) != v5)
    goto LABEL_76;
LABEL_86:
  if (a4)
  {
    if (a4 == 2)
    {
      return fminf(result, v36[6]);
    }
    else
    {
      result = 0.0;
      if (a4 == 1)
        return v36[6];
    }
  }
  return result;
}

void sub_19C3E6B00(uint64_t a1, uint64_t a2, float a3)
{
  _BYTE *v6;
  _BYTE *v7;
  int64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  float *v16;
  char *v17;
  float *v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  _OWORD *v22;
  char *v23;
  uint64_t v24;
  __int128 v25;
  int v26;
  void *__p;
  float *v28;
  char *v29;

  __p = 0;
  v28 = 0;
  v29 = 0;
  v7 = *(_BYTE **)(a2 + 280);
  v6 = *(_BYTE **)(a2 + 288);
  v8 = v6 - v7;
  if (v6 == v7)
  {
    v9 = 0;
    v10 = 0;
  }
  else
  {
    if (v8 < 0)
      sub_19C2A18E8();
    v9 = (char *)operator new(v6 - v7);
    v10 = &v9[4 * (v8 >> 2)];
    __p = v9;
    v29 = v10;
    memcpy(v9, v7, v8);
    v28 = (float *)v10;
  }
  v11 = v10 - v9;
  v12 = (v10 - v9) >> 2;
  v13 = v12 + 1;
  if ((unint64_t)(v12 + 1) >> 62)
    sub_19C2A18E8();
  if (v11 >> 1 > v13)
    v13 = v11 >> 1;
  if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
    v14 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v14 = v13;
  if (v14)
  {
    if (v14 >> 62)
      sub_19C2A143C();
    v15 = operator new(4 * v14);
  }
  else
  {
    v15 = 0;
  }
  v16 = (float *)&v15[4 * v12];
  v17 = &v15[4 * v14];
  *v16 = a3;
  v18 = v16 + 1;
  if (v10 != v9)
  {
    v19 = v10 - v9 - 4;
    if (v19 < 0x2C)
    {
      v20 = v10;
      goto LABEL_23;
    }
    if ((unint64_t)(v9 - v15) < 0x20)
    {
      v20 = v10;
      do
      {
LABEL_23:
        v26 = *((_DWORD *)v20 - 1);
        v20 -= 4;
        *((_DWORD *)v16-- - 1) = v26;
      }
      while (v20 != v9);
      goto LABEL_24;
    }
    v21 = (v19 >> 2) + 1;
    v20 = &v10[-4 * (v21 & 0x7FFFFFFFFFFFFFF8)];
    v22 = &v15[4 * v12 - 16];
    v23 = v10 - 16;
    v24 = v21 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v25 = *(_OWORD *)v23;
      *(v22 - 1) = *((_OWORD *)v23 - 1);
      *v22 = v25;
      v22 -= 2;
      v23 -= 32;
      v24 -= 8;
    }
    while (v24);
    v16 -= v21 & 0x7FFFFFFFFFFFFFF8;
    if (v21 != (v21 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_23;
  }
LABEL_24:
  __p = v16;
  v29 = v17;
  if (v9)
    operator delete(v9);
  v28 = v18;
  sub_19C3A9F98(a1, a2, (__int128 *)(a2 + 32), a2 + 56, a2 + 240, *(_QWORD *)(a2 + 264), 0, (uint64_t)&__p, *(float *)(a2 + 24), 0.0);
  if (__p)
    operator delete(__p);
}

void sub_19C3E6D14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19C3E6D34(_QWORD *a1, uint64_t *a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v8;
  __int128 v9;
  _BYTE *v10;
  _BYTE *v11;
  int64_t v12;
  char *v13;
  char *v14;
  float v15;
  float v16;
  float v17;
  size_t v18;
  uint64_t v19;
  unint64_t v20;
  size_t v21;
  int v22;
  size_t v23;
  size_t *v24;
  size_t *v25;
  void *v26;
  __int128 *v27;
  __int128 *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  int64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  unint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  __int128 v46;
  int v47;
  size_t *v48;
  CFIndex v49;
  CFStringRef v50;
  const __CFString *v51;
  const __CFLocale *v52;
  CFIndex Length;
  __CFString *MutableCopy;
  uint64_t v55;
  int v56;
  size_t v57;
  size_t v58;
  size_t v59;
  size_t *v60;
  size_t *v61;
  void *v62;
  __int128 *v63;
  __int128 *v64;
  float v65;
  void *exception;
  CFTypeRef cf[2];
  __int128 v68;
  uint64_t v69;
  void *__p;
  char *v71;
  unint64_t v72;
  size_t __n[2];
  uint64_t v74;

  v8 = a3[4];
  if (a3[3] == v8)
  {
    HIBYTE(v74) = 0;
    LOBYTE(__n[0]) = 0;
  }
  else if (*(char *)(v8 - 9) < 0)
  {
    sub_19C2B5238(__n, *(void **)(v8 - 32), *(_QWORD *)(v8 - 24));
  }
  else
  {
    v9 = *(_OWORD *)(v8 - 32);
    v74 = *(_QWORD *)(v8 - 16);
    *(_OWORD *)__n = v9;
  }
  v11 = (_BYTE *)a3[12];
  v10 = (_BYTE *)a3[13];
  v71 = 0;
  v72 = 0;
  __p = 0;
  v12 = v10 - v11;
  if (v10 != v11)
  {
    if (v12 < 0)
      sub_19C2A18E8();
    v13 = (char *)operator new(v10 - v11);
    v14 = &v13[4 * (v12 >> 2)];
    __p = v13;
    v72 = (unint64_t)v14;
    memmove(v13, v11, v12);
    v71 = v14;
  }
  (*(void (**)(_QWORD, void **, uint64_t *, uint64_t))(*(_QWORD *)a1[2] + 48))(a1[2], &__p, a2, a4);
  v15 = 1.0;
  v16 = 0.0;
  v17 = 0.0;
  if (sub_19C3E3B40((uint64_t)__n, (const __CFLocale *)a1[5]))
  {
    if (v74 >= 0)
      v18 = HIBYTE(v74);
    else
      v18 = __n[1];
    v19 = *a2;
    if (v18 == 1 && a2[1] != v19)
    {
      v20 = 0;
      while (((*(uint64_t (**)(_QWORD, unint64_t))(*(_QWORD *)*a1 + 168))(*a1, v20) & 1) != 0)
      {
LABEL_16:
        ++v20;
        v19 = *a2;
        if (v20 >= (a2[1] - *a2) >> 2)
          goto LABEL_40;
      }
      (*(void (**)(__int128 *__return_ptr, _QWORD, unint64_t))(*(_QWORD *)*a1 + 48))(&v68, *a1, v20);
      v21 = HIBYTE(v69);
      v22 = SHIBYTE(v69);
      if (v69 < 0)
        v21 = *((_QWORD *)&v68 + 1);
      v23 = HIBYTE(v74);
      if (SHIBYTE(v74) < 0)
      {
        if (v21 >= __n[1])
        {
          v24 = (size_t *)__n[0];
          v23 = __n[1];
LABEL_33:
          v26 = (void *)v68;
          if (v69 >= 0)
            v28 = &v68;
          else
            v28 = (__int128 *)v68;
          if (!memcmp(v28, v24, v23))
LABEL_37:
            v17 = *(float *)(*a2 + 4 * v20) + v17;
LABEL_38:
          if (v22 < 0)
            operator delete(v26);
          goto LABEL_16;
        }
      }
      else if (v21 >= HIBYTE(v74))
      {
        v24 = __n;
        goto LABEL_33;
      }
      if (v74 >= 0)
        v25 = __n;
      else
        v25 = (size_t *)__n[0];
      v26 = (void *)v68;
      if (v69 >= 0)
        v27 = &v68;
      else
        v27 = (__int128 *)v68;
      if (!memcmp(v25, v27, v21))
        goto LABEL_37;
      goto LABEL_38;
    }
LABEL_40:
    v29 = *((unsigned int *)a1 + 13);
    v15 = *(float *)(v19 + 4 * v29);
    v30 = v71;
    if ((unint64_t)v71 >= v72)
    {
      v32 = (char *)__p;
      v33 = v71 - (_BYTE *)__p;
      v34 = (v71 - (_BYTE *)__p) >> 2;
      v35 = v34 + 1;
      if ((unint64_t)(v34 + 1) >> 62)
        sub_19C2A18E8();
      v36 = v72 - (_QWORD)__p;
      if ((uint64_t)(v72 - (_QWORD)__p) >> 1 > v35)
        v35 = v36 >> 1;
      if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL)
        v37 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v37 = v35;
      if (v37)
      {
        if (v37 >> 62)
          sub_19C2A143C();
        v38 = (char *)operator new(4 * v37);
      }
      else
      {
        v38 = 0;
      }
      v39 = &v38[4 * v34];
      v40 = &v38[4 * v37];
      *(_DWORD *)v39 = v29;
      v31 = v39 + 4;
      if (v30 != v32)
      {
        v41 = v30 - v32 - 4;
        if (v41 < 0x2C)
          goto LABEL_116;
        if ((unint64_t)(v30 - &v38[v33]) < 0x20)
          goto LABEL_116;
        v42 = (v41 >> 2) + 1;
        v43 = &v38[4 * v34 - 16];
        v44 = v30 - 16;
        v45 = v42 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v46 = *(_OWORD *)v44;
          *((_OWORD *)v43 - 1) = *((_OWORD *)v44 - 1);
          *(_OWORD *)v43 = v46;
          v43 -= 32;
          v44 -= 32;
          v45 -= 8;
        }
        while (v45);
        v39 -= 4 * (v42 & 0x7FFFFFFFFFFFFFF8);
        v30 -= 4 * (v42 & 0x7FFFFFFFFFFFFFF8);
        if (v42 != (v42 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_116:
          do
          {
            v47 = *((_DWORD *)v30 - 1);
            v30 -= 4;
            *((_DWORD *)v39 - 1) = v47;
            v39 -= 4;
          }
          while (v30 != v32);
        }
      }
      __p = v39;
      v71 = v31;
      v72 = (unint64_t)v40;
      if (v32)
        operator delete(v32);
    }
    else
    {
      *(_DWORD *)v71 = v29;
      v31 = v30 + 4;
    }
    v71 = v31;
    (*(void (**)(_QWORD, void **, uint64_t *, uint64_t))(*(_QWORD *)a1[2] + 48))(a1[2], &__p, a2, a4);
    if (v74 >= 0)
      v48 = __n;
    else
      v48 = (size_t *)__n[0];
    if (v74 >= 0)
      v49 = HIBYTE(v74);
    else
      v49 = __n[1];
    v50 = CFStringCreateWithBytes(0, (const UInt8 *)v48, v49, 0x8000100u, 0);
    v51 = v50;
    cf[1] = v50;
    if (!v50)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1A1AD3154](exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
    }
    v52 = (const __CFLocale *)a1[5];
    Length = CFStringGetLength(v50);
    MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], Length, v51);
    CFStringLowercase(MutableCopy, v52);
    sub_19C297DB4(cf, MutableCopy);
    sub_19C29CEF8((const __CFString *)cf[0], &v68);
    if (SHIBYTE(v74) < 0)
      operator delete((void *)__n[0]);
    *(_OWORD *)__n = v68;
    v74 = v69;
    HIBYTE(v69) = 0;
    LOBYTE(v68) = 0;
    if (cf[0])
      CFRelease(cf[0]);
    CFRelease(v51);
  }
  if (a2[1] != *a2)
  {
    v55 = 0;
    v16 = 0.0;
    while (((*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a1 + 168))(*a1, v55) & 1) != 0)
    {
LABEL_75:
      if (++v55 >= (unint64_t)((a2[1] - *a2) >> 2))
        goto LABEL_105;
    }
    (*(void (**)(__int128 *__return_ptr, _QWORD, uint64_t))(*(_QWORD *)*a1 + 48))(&v68, *a1, v55);
    v56 = SHIBYTE(v69);
    if (v69 >= 0)
      v57 = HIBYTE(v69);
    else
      v57 = *((_QWORD *)&v68 + 1);
    v58 = HIBYTE(v74);
    if (SHIBYTE(v74) < 0)
    {
      v59 = __n[1];
      if (v57 >= __n[1])
      {
        v60 = (size_t *)__n[0];
LABEL_93:
        v62 = (void *)v68;
        if (v69 >= 0)
          v64 = &v68;
        else
          v64 = (__int128 *)v68;
        if (!memcmp(v64, v60, v59))
        {
          if ((v58 & 0x80u) == 0)
            v59 = v58;
          else
            v59 = __n[1];
LABEL_100:
          v65 = *(float *)(*a2 + 4 * v55);
          if (v57 < v59)
            v65 = v65 * 0.03;
          v16 = v65 + v16;
        }
LABEL_103:
        if (v56 < 0)
          operator delete(v62);
        goto LABEL_75;
      }
    }
    else
    {
      v59 = HIBYTE(v74);
      if (v57 >= HIBYTE(v74))
      {
        v60 = __n;
        v59 = HIBYTE(v74);
        goto LABEL_93;
      }
    }
    if (v74 >= 0)
      v61 = __n;
    else
      v61 = (size_t *)__n[0];
    v62 = (void *)v68;
    if (v69 >= 0)
      v63 = &v68;
    else
      v63 = (__int128 *)v68;
    if (!memcmp(v61, v63, v57))
      goto LABEL_100;
    goto LABEL_103;
  }
LABEL_105:
  if (__p)
  {
    v71 = (char *)__p;
    operator delete(__p);
  }
  if (SHIBYTE(v74) < 0)
    operator delete((void *)__n[0]);
  log10f(v17 + (float)(v16 * v15));
}

void sub_19C3E732C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (__p)
  {
    operator delete(__p);
    if ((a22 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a22 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a17);
  _Unwind_Resume(exception_object);
}

void sub_19C3E73BC(_QWORD *a1, uint64_t **a2, uint64_t *a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, _QWORD *a9)
{
  uint64_t v13;
  char *v14;
  char *v15;
  unint64_t v16;
  char *v17;
  unint64_t v18;
  float v19;
  float v20;
  int8x8_t v21;
  uint8x8_t v22;
  unint64_t v23;
  uint64_t **v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _BOOL4 v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  _BYTE *v37;
  _DWORD *v38;
  unint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  _BYTE *v46;
  _DWORD *v47;
  unint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  _OWORD *v53;
  char *v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  _OWORD *v58;
  char *v59;
  uint64_t v60;
  __int128 v61;
  uint64_t v62;
  int v63;
  int v64;
  char *v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  _BYTE *v69;
  char *v70;
  char *v71;
  unint64_t v72;
  char *v73;
  uint64_t v74;
  _OWORD *v75;
  char *v76;
  uint64_t v77;
  __int128 v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  int v82;
  unint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  _BYTE *v91;
  char *v92;
  char *v93;
  unint64_t v94;
  char *v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  float v103;
  float v104;
  float v105;
  int v106;
  int v107;
  float v108;
  float v109;
  int v110;
  float v111;
  int v112;
  float *v113;
  float v114;
  float v115;
  unint64_t v116;
  float *v117;
  float v118;
  int v119;
  unint64_t v120;
  unint64_t v121;
  float v122;
  unint64_t v123;
  float v124;
  float v125;
  int v126;
  float v127;
  float v128;
  int v129;
  unint64_t v130;
  float v131;
  float v132;
  unint64_t v133;
  float v134;
  float v135;
  unint64_t v136;
  float v137;
  float v138;
  int v139;
  float v140;
  float v141;
  float v142;
  int v143;
  float v144;
  float v145;
  float v146;
  int v147;
  float v148;
  float v149;
  int v150;
  char *v151;
  float *v152;
  float *v153;
  int v154;
  int v155;
  int v156;
  float v157;
  float v158;
  int v159;
  float v160;
  uint64_t v161;
  _OWORD *v162;
  char *v163;
  uint64_t v164;
  __int128 v165;
  uint64_t v166;
  _QWORD *v167;

  (*(void (**)(uint64_t *, uint64_t, uint64_t *, uint64_t))(*a2[2] + 48))(a2[2], a4, a3, a8);
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v13 = *a3;
  if (a3[1] == *a3)
  {
    v17 = 0;
    goto LABEL_136;
  }
  v166 = a7;
  v167 = a1;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0.0;
  v20 = 0.0;
  do
  {
    if (a9[3])
    {
      v21 = (int8x8_t)a9[1];
      if (v21)
      {
        v22 = (uint8x8_t)vcnt_s8(v21);
        v22.i16[0] = vaddlv_u8(v22);
        if (v22.u32[0] > 1uLL)
        {
          v23 = v18;
          if (*(_QWORD *)&v21 <= v18)
            v23 = v18 % *(_QWORD *)&v21;
        }
        else
        {
          v23 = (*(_QWORD *)&v21 + 0x7FFFFFFFLL) & v18;
        }
        v24 = *(uint64_t ***)(*a9 + 8 * v23);
        if (v24)
        {
          v25 = *v24;
          if (v25)
          {
            if (v22.u32[0] < 2uLL)
            {
              v26 = *(_QWORD *)&v21 - 1;
              while (1)
              {
                v28 = v25[1];
                if (v28 == v18)
                {
                  if (v18 == *((_DWORD *)v25 + 4))
                    goto LABEL_28;
                }
                else if ((v28 & v26) != v23)
                {
                  goto LABEL_26;
                }
                v25 = (uint64_t *)*v25;
                if (!v25)
                  goto LABEL_26;
              }
            }
            do
            {
              v27 = v25[1];
              if (v27 == v18)
              {
                if (v18 == *((_DWORD *)v25 + 4))
                  goto LABEL_28;
              }
              else
              {
                if (v27 >= *(_QWORD *)&v21)
                  v27 %= *(_QWORD *)&v21;
                if (v27 != v23)
                  break;
              }
              v25 = (uint64_t *)*v25;
            }
            while (v25);
          }
        }
      }
LABEL_26:
      if ((*(unsigned int (**)(uint64_t *, unint64_t))(**a2 + 112))(*a2, v18))
      {
        v13 = *a3;
LABEL_28:
        v20 = *(float *)(v13 + 4 * v18) + v20;
      }
    }
    if (((*(uint64_t (**)(uint64_t *, unint64_t))(**a2 + 168))(*a2, v18) & 1) == 0)
    {
      v29 = a6
         && (*(unsigned int (**)(uint64_t *, unint64_t))(**a2 + 160))(*a2, v18)
         && sub_19C3E3B40(a5, (const __CFLocale *)a2[5]);
      if ((((*(unsigned int (**)(uint64_t *, unint64_t, uint64_t))(**a2 + 56))(*a2, v18, a5) | v29) & 1) != 0)
      {
        v30 = **a2;
        if (a6)
        {
          if (!(*(unsigned int (**)(void))(v30 + 144))())
            goto LABEL_4;
          v31 = *a3;
          if (v17 < v14)
          {
            *(_DWORD *)v17 = v18;
            *((_DWORD *)v17 + 1) = *(_DWORD *)(v31 + 4 * v18);
            v17 += 8;
LABEL_72:
            v167[1] = v17;
            v16 = (unint64_t)v14;
            goto LABEL_4;
          }
          v34 = (v17 - v15) >> 3;
          v35 = v34 + 1;
          if ((unint64_t)(v34 + 1) >> 61)
            goto LABEL_230;
          if ((v14 - v15) >> 2 > v35)
            v35 = (v14 - v15) >> 2;
          if ((unint64_t)(v14 - v15) >= 0x7FFFFFFFFFFFFFF8)
            v36 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v36 = v35;
          if (v36 >> 61)
            goto LABEL_229;
          v37 = operator new(8 * v36);
          v38 = &v37[8 * v34];
          *v38 = v18;
          v38[1] = *(_DWORD *)(v31 + 4 * v18);
          if (v17 == v15)
          {
            v41 = &v37[8 * v34];
          }
          else
          {
            v39 = v17 - 8 - v15;
            if (v39 < 0x58 || (unint64_t)(v15 - v37) < 0x20)
            {
              v40 = v17;
              v41 = &v37[8 * v34];
              goto LABEL_53;
            }
            v52 = (v39 >> 3) + 1;
            v40 = &v17[-8 * (v52 & 0x3FFFFFFFFFFFFFFCLL)];
            v53 = &v37[8 * v34 - 16];
            v54 = v17 - 16;
            v55 = v52 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v56 = *(_OWORD *)v54;
              *(v53 - 1) = *((_OWORD *)v54 - 1);
              *v53 = v56;
              v53 -= 2;
              v54 -= 32;
              v55 -= 4;
            }
            while (v55);
            v41 = (char *)&v38[-2 * (v52 & 0x3FFFFFFFFFFFFFFCLL)];
            if (v52 != (v52 & 0x3FFFFFFFFFFFFFFCLL))
            {
              do
              {
LABEL_53:
                v42 = *((_QWORD *)v40 - 1);
                v40 -= 8;
                *((_QWORD *)v41 - 1) = v42;
                v41 -= 8;
              }
              while (v40 != v15);
            }
          }
          v14 = &v37[8 * v36];
          v17 = (char *)(v38 + 2);
          *v167 = v41;
          v167[1] = v38 + 2;
          v167[2] = v14;
          if (v15)
            operator delete(v15);
          v15 = v41;
          goto LABEL_72;
        }
        v32 = (*(uint64_t (**)(void))(v30 + 152))();
        v33 = *a3;
        if ((v32 & 1) != 0)
        {
          v19 = *(float *)(v33 + 4 * v18) + v19;
          goto LABEL_4;
        }
        if ((unint64_t)v17 < v16)
        {
          *(_DWORD *)v17 = v18;
          *((_DWORD *)v17 + 1) = *(_DWORD *)(v33 + 4 * v18);
          v17 += 8;
LABEL_77:
          v167[1] = v17;
          goto LABEL_4;
        }
        v43 = (v17 - v15) >> 3;
        v44 = v43 + 1;
        if ((unint64_t)(v43 + 1) >> 61)
LABEL_230:
          sub_19C2A18E8();
        if ((uint64_t)(v16 - (_QWORD)v15) >> 2 > v44)
          v44 = (uint64_t)(v16 - (_QWORD)v15) >> 2;
        if (v16 - (unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
          v45 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v45 = v44;
        if (v45 >> 61)
LABEL_229:
          sub_19C2A143C();
        v46 = operator new(8 * v45);
        v47 = &v46[8 * v43];
        *v47 = v18;
        v47[1] = *(_DWORD *)(v33 + 4 * v18);
        if (v17 == v15)
        {
          v50 = &v46[8 * v43];
        }
        else
        {
          v48 = v17 - 8 - v15;
          if (v48 >= 0x58 && (unint64_t)(v15 - v46) >= 0x20)
          {
            v57 = (v48 >> 3) + 1;
            v49 = &v17[-8 * (v57 & 0x3FFFFFFFFFFFFFFCLL)];
            v58 = &v46[8 * v43 - 16];
            v59 = v17 - 16;
            v60 = v57 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v61 = *(_OWORD *)v59;
              *(v58 - 1) = *((_OWORD *)v59 - 1);
              *v58 = v61;
              v58 -= 2;
              v59 -= 32;
              v60 -= 4;
            }
            while (v60);
            v50 = (char *)&v47[-2 * (v57 & 0x3FFFFFFFFFFFFFFCLL)];
            if (v57 == (v57 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_74;
          }
          else
          {
            v49 = v17;
            v50 = &v46[8 * v43];
          }
          do
          {
            v51 = *((_QWORD *)v49 - 1);
            v49 -= 8;
            *((_QWORD *)v50 - 1) = v51;
            v50 -= 8;
          }
          while (v49 != v15);
        }
LABEL_74:
        v14 = &v46[8 * v45];
        v17 = (char *)(v47 + 2);
        *v167 = v50;
        v167[1] = v47 + 2;
        v167[2] = v14;
        if (v15)
          operator delete(v15);
        v15 = v50;
        v16 = (unint64_t)v14;
        goto LABEL_77;
      }
    }
LABEL_4:
    ++v18;
    v13 = *a3;
  }
  while (v18 < (a3[1] - *a3) >> 2);
  if (v20 <= 0.0)
  {
    a1 = v167;
  }
  else
  {
    a1 = v167;
    v62 = *(unsigned __int8 *)(a5 + 23);
    if ((v62 & 0x80u) != 0)
      v62 = *(_QWORD *)(a5 + 8);
    if (!v62)
    {
      v63 = (*(uint64_t (**)(uint64_t *, uint64_t))(**a2 + 64))(*a2, 2);
      v64 = v63;
      if (v17 < v14)
      {
        *(_DWORD *)v17 = v63;
        *((float *)v17 + 1) = v20;
        v65 = v17 + 8;
        goto LABEL_112;
      }
      v66 = (v17 - v15) >> 3;
      v67 = v66 + 1;
      if ((unint64_t)(v66 + 1) >> 61)
        sub_19C2A18E8();
      if ((v14 - v15) >> 2 > v67)
        v67 = (v14 - v15) >> 2;
      if ((unint64_t)(v14 - v15) >= 0x7FFFFFFFFFFFFFF8)
        v68 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v68 = v67;
      if (v68 >> 61)
        sub_19C2A143C();
      v69 = operator new(8 * v68);
      v70 = &v69[8 * v66];
      v71 = &v69[8 * v68];
      *(_DWORD *)v70 = v64;
      *((float *)v70 + 1) = v20;
      v65 = v70 + 8;
      if (v17 != v15)
      {
        v72 = v17 - v15 - 8;
        if (v72 < 0x58)
        {
          v73 = v17;
          goto LABEL_109;
        }
        if ((unint64_t)(v15 - v69) < 0x20)
        {
          v73 = v17;
          goto LABEL_109;
        }
        v74 = (v72 >> 3) + 1;
        v73 = &v17[-8 * (v74 & 0x3FFFFFFFFFFFFFFCLL)];
        v75 = &v69[8 * v66 - 16];
        v76 = v17 - 16;
        v77 = v74 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v78 = *(_OWORD *)v76;
          *(v75 - 1) = *((_OWORD *)v76 - 1);
          *v75 = v78;
          v75 -= 2;
          v76 -= 32;
          v77 -= 4;
        }
        while (v77);
        v70 -= 8 * (v74 & 0x3FFFFFFFFFFFFFFCLL);
        if (v74 != (v74 & 0x3FFFFFFFFFFFFFFCLL))
        {
          do
          {
LABEL_109:
            v79 = *((_QWORD *)v73 - 1);
            v73 -= 8;
            *((_QWORD *)v70 - 1) = v79;
            v70 -= 8;
          }
          while (v73 != v15);
        }
      }
      *v167 = v70;
      v167[1] = v65;
      v167[2] = v71;
      if (v15)
        operator delete(v15);
LABEL_112:
      v167[1] = v65;
      v17 = v65;
    }
  }
  a7 = v166;
  if (v19 > 0.0)
  {
    v80 = *(unsigned __int8 *)(a5 + 23);
    if ((v80 & 0x80u) != 0)
      v80 = *(_QWORD *)(a5 + 8);
    if (!v80)
    {
      v81 = (*(uint64_t (**)(uint64_t *))(**a2 + 80))(*a2);
      v82 = v81;
      v83 = a1[2];
      if ((unint64_t)v17 < v83)
      {
        *(_DWORD *)v17 = v81;
        *((float *)v17 + 1) = v19;
        v84 = v17 + 8;
        a7 = v166;
        goto LABEL_135;
      }
      v85 = (char *)*a1;
      v86 = (uint64_t)&v17[-*a1];
      v87 = v86 >> 3;
      v88 = (v86 >> 3) + 1;
      if (v88 >> 61)
        sub_19C2A18E8();
      v89 = v83 - (_QWORD)v85;
      if (v89 >> 2 > v88)
        v88 = v89 >> 2;
      if ((unint64_t)v89 >= 0x7FFFFFFFFFFFFFF8)
        v90 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v90 = v88;
      if (v90 >> 61)
        sub_19C2A143C();
      v91 = operator new(8 * v90);
      v92 = &v91[8 * v87];
      v93 = &v91[8 * v90];
      *(_DWORD *)v92 = v82;
      *((float *)v92 + 1) = v19;
      v84 = v92 + 8;
      if (v17 == v85)
      {
        a7 = v166;
      }
      else
      {
        v94 = v17 - v85 - 8;
        if (v94 < 0x58 || (unint64_t)(&v17[-v86] - v91) < 0x20)
        {
          v95 = v17;
          a7 = v166;
          goto LABEL_130;
        }
        v161 = (v94 >> 3) + 1;
        v95 = &v17[-8 * (v161 & 0x3FFFFFFFFFFFFFFCLL)];
        v162 = &v91[8 * v87 - 16];
        v163 = v17 - 16;
        v164 = v161 & 0x3FFFFFFFFFFFFFFCLL;
        a7 = v166;
        do
        {
          v165 = *(_OWORD *)v163;
          *(v162 - 1) = *((_OWORD *)v163 - 1);
          *v162 = v165;
          v162 -= 2;
          v163 -= 32;
          v164 -= 4;
        }
        while (v164);
        v92 -= 8 * (v161 & 0x3FFFFFFFFFFFFFFCLL);
        if (v161 != (v161 & 0x3FFFFFFFFFFFFFFCLL))
        {
          do
          {
LABEL_130:
            v96 = *((_QWORD *)v95 - 1);
            v95 -= 8;
            *((_QWORD *)v92 - 1) = v96;
            v92 -= 8;
          }
          while (v95 != v85);
        }
      }
      *a1 = v92;
      a1[1] = v84;
      a1[2] = v93;
      if (v85)
        operator delete(v85);
LABEL_135:
      a1[1] = v84;
      v17 = v84;
    }
  }
LABEL_136:
  v97 = *a1;
  v98 = (uint64_t)&v17[-*a1] >> 3;
  v99 = *a1 + 8 * (a7 + 6);
  if (v98 >= a7 + 6)
    v100 = *a1 + 8 * (a7 + 6);
  else
    v100 = (unint64_t)v17;
  if (v17 != (char *)v100)
  {
    while (2)
    {
      v101 = (uint64_t)&v17[-v97] >> 3;
      if (v101 < 2)
        goto LABEL_201;
      if (v101 == 3)
      {
        v144 = *(float *)(v97 + 12);
        v145 = *(float *)(v97 + 4);
        v146 = *((float *)v17 - 1);
        if (v144 <= v145)
        {
          if (v146 > v144)
          {
            v156 = *(_DWORD *)(v97 + 8);
            *(_DWORD *)(v97 + 8) = *((_DWORD *)v17 - 2);
            *((_DWORD *)v17 - 2) = v156;
            *(float *)(v97 + 12) = v146;
            *((float *)v17 - 1) = v144;
            v157 = *(float *)(v97 + 12);
            v158 = *(float *)(v97 + 4);
            if (v157 > v158)
            {
              v159 = *(_DWORD *)v97;
              *(_DWORD *)v97 = *(_DWORD *)(v97 + 8);
              *(_DWORD *)(v97 + 8) = v159;
              *(float *)(v97 + 4) = v157;
              *(float *)(v97 + 12) = v158;
            }
          }
        }
        else
        {
          v147 = *(_DWORD *)v97;
          if (v146 <= v144)
          {
            *(_DWORD *)v97 = *(_DWORD *)(v97 + 8);
            *(_DWORD *)(v97 + 8) = v147;
            *(float *)(v97 + 4) = v144;
            *(float *)(v97 + 12) = v145;
            v160 = *((float *)v17 - 1);
            if (v160 > v145)
            {
              *(_DWORD *)(v97 + 8) = *((_DWORD *)v17 - 2);
              *((_DWORD *)v17 - 2) = v147;
              *(float *)(v97 + 12) = v160;
              *((float *)v17 - 1) = v145;
            }
          }
          else
          {
            *(_DWORD *)v97 = *((_DWORD *)v17 - 2);
            *((_DWORD *)v17 - 2) = v147;
            *(float *)(v97 + 4) = v146;
            *((float *)v17 - 1) = v145;
          }
        }
        goto LABEL_201;
      }
      if (v101 == 2)
      {
        v148 = *((float *)v17 - 1);
        v149 = *(float *)(v97 + 4);
        if (v148 > v149)
        {
          v150 = *(_DWORD *)v97;
          *(_DWORD *)v97 = *((_DWORD *)v17 - 2);
          *((_DWORD *)v17 - 2) = v150;
          *(float *)(v97 + 4) = v148;
          *((float *)v17 - 1) = v149;
        }
        goto LABEL_201;
      }
      if ((uint64_t)&v17[-v97] <= 63)
      {
        while ((char *)v97 != v17 - 8)
        {
          v151 = (char *)v97;
          v97 += 8;
          if (v151 != v17 && (char *)v97 != v17)
          {
            v152 = (float *)v97;
            v153 = (float *)v151;
            do
            {
              if (v152[1] > v153[1])
                v153 = v152;
              v152 += 2;
            }
            while (v152 != (float *)v17);
            if (v153 != (float *)v151)
            {
              v154 = *(_DWORD *)v151;
              *(float *)v151 = *v153;
              *(_DWORD *)v153 = v154;
              v155 = *((_DWORD *)v151 + 1);
              *((float *)v151 + 1) = v153[1];
              *((_DWORD *)v153 + 1) = v155;
            }
          }
        }
        goto LABEL_201;
      }
      v102 = v97 + 8 * (v101 >> 1);
      v103 = *(float *)(v102 + 4);
      v104 = *(float *)(v97 + 4);
      v105 = *((float *)v17 - 1);
      if (v103 <= v104)
      {
        if (v105 <= v103)
        {
          v112 = 0;
          goto LABEL_155;
        }
        v107 = *(_DWORD *)v102;
        *(_DWORD *)v102 = *((_DWORD *)v17 - 2);
        *((_DWORD *)v17 - 2) = v107;
        *(float *)(v102 + 4) = v105;
        *((float *)v17 - 1) = v103;
        v108 = *(float *)(v102 + 4);
        v109 = *(float *)(v97 + 4);
        if (v108 > v109)
        {
          v110 = *(_DWORD *)v97;
          *(_DWORD *)v97 = *(_DWORD *)v102;
          *(_DWORD *)v102 = v110;
          *(float *)(v97 + 4) = v108;
          *(float *)(v102 + 4) = v109;
          goto LABEL_152;
        }
      }
      else
      {
        v106 = *(_DWORD *)v97;
        if (v105 > v103)
        {
          *(_DWORD *)v97 = *((_DWORD *)v17 - 2);
          *((_DWORD *)v17 - 2) = v106;
          *(float *)(v97 + 4) = v105;
          *((float *)v17 - 1) = v104;
          break;
        }
        *(_DWORD *)v97 = *(_DWORD *)v102;
        *(_DWORD *)v102 = v106;
        *(float *)(v97 + 4) = v103;
        *(float *)(v102 + 4) = v104;
        v111 = *((float *)v17 - 1);
        if (v111 > v104)
        {
          *(_DWORD *)v102 = *((_DWORD *)v17 - 2);
          *((_DWORD *)v17 - 2) = v106;
          *(float *)(v102 + 4) = v111;
          *((float *)v17 - 1) = v104;
LABEL_152:
          v112 = 2;
LABEL_155:
          v113 = (float *)(v17 - 8);
          v114 = *(float *)(v97 + 4);
          v115 = *(float *)(v102 + 4);
          if (v114 <= v115)
          {
            v117 = (float *)(v17 - 8);
            while (1)
            {
              v116 = (unint64_t)(v117 - 2);
              if (v117 - 2 == (float *)v97)
                break;
              v118 = *(v117 - 1);
              v117 -= 2;
              if (v118 > v115)
              {
                v119 = *(_DWORD *)v97;
                *(_DWORD *)v97 = *(_DWORD *)v116;
                *(_DWORD *)v116 = v119;
                *(float *)(v97 + 4) = v118;
                *(float *)(v116 + 4) = v114;
                ++v112;
                goto LABEL_161;
              }
            }
            v133 = v97 + 8;
            v134 = *((float *)v17 - 1);
            if (v114 <= v134)
            {
              if ((float *)v133 == v113)
                goto LABEL_201;
              while (1)
              {
                v135 = *(float *)(v133 + 4);
                if (v114 > v135)
                  break;
                v133 += 8;
                if ((float *)v133 == v113)
                  goto LABEL_201;
              }
              v139 = *(_DWORD *)v133;
              *(_DWORD *)v133 = *((_DWORD *)v17 - 2);
              *((_DWORD *)v17 - 2) = v139;
              *(float *)(v133 + 4) = v134;
              *((float *)v17 - 1) = v135;
              v133 += 8;
            }
            if ((float *)v133 == v113)
              goto LABEL_201;
            while (1)
            {
              v140 = *(float *)(v97 + 4);
              do
              {
                v130 = v133;
                v141 = *(float *)(v133 + 4);
                v133 += 8;
              }
              while (v140 <= v141);
              do
              {
                v142 = *(v113 - 1);
                v113 -= 2;
              }
              while (v140 > v142);
              if (v130 >= (unint64_t)v113)
                break;
              v143 = *(_DWORD *)v130;
              *(float *)v130 = *v113;
              *(_DWORD *)v113 = v143;
              *(float *)(v130 + 4) = v142;
              v113[1] = v141;
            }
            if (v130 > v100)
              goto LABEL_201;
          }
          else
          {
            v116 = (unint64_t)(v17 - 8);
LABEL_161:
            v120 = v97 + 8;
            if (v97 + 8 >= v116)
            {
              v123 = v97 + 8;
            }
            else
            {
              v121 = v97 + 8;
              while (1)
              {
                v122 = *(float *)(v102 + 4);
                do
                {
                  v123 = v121;
                  v124 = *(float *)(v121 + 4);
                  v121 += 8;
                }
                while (v124 > v122);
                do
                {
                  v125 = *(float *)(v116 - 4);
                  v116 -= 8;
                }
                while (v125 <= v122);
                if (v123 >= v116)
                  break;
                v126 = *(_DWORD *)v123;
                *(_DWORD *)v123 = *(_DWORD *)v116;
                *(_DWORD *)v116 = v126;
                *(float *)(v123 + 4) = v125;
                *(float *)(v116 + 4) = v124;
                ++v112;
                if (v102 == v123)
                  v102 = v116;
              }
            }
            if (v123 != v102)
            {
              v127 = *(float *)(v102 + 4);
              v128 = *(float *)(v123 + 4);
              if (v127 > v128)
              {
                v129 = *(_DWORD *)v123;
                *(_DWORD *)v123 = *(_DWORD *)v102;
                *(_DWORD *)v102 = v129;
                *(float *)(v123 + 4) = v127;
                *(float *)(v102 + 4) = v128;
                ++v112;
              }
            }
            if (v123 == v100)
              goto LABEL_201;
            if (!v112)
            {
              if (v123 <= v100)
              {
                v136 = v123 + 8;
                while ((char *)v136 != v17)
                {
                  v137 = *(float *)(v136 + 4);
                  v138 = *(float *)(v136 - 4);
                  v136 += 8;
                  if (v137 > v138)
                    goto LABEL_176;
                }
              }
              else
              {
                while (v120 != v123)
                {
                  v131 = *(float *)(v120 + 4);
                  v132 = *(float *)(v120 - 4);
                  v120 += 8;
                  if (v131 > v132)
                    goto LABEL_176;
                }
              }
              goto LABEL_201;
            }
LABEL_176:
            if (v123 <= v100)
            {
              v130 = v123 + 8;
            }
            else
            {
              v17 = (char *)v123;
              v130 = v97;
            }
          }
          v97 = v130;
          if (v17 == (char *)v100)
            goto LABEL_201;
          continue;
        }
      }
      break;
    }
    v112 = 1;
    goto LABEL_155;
  }
LABEL_201:
  if (v98 > a7 + 6)
    a1[1] = v99;
}

void sub_19C3E8068(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v11;

  v11 = *(void **)a10;
  if (*(_QWORD *)a10)
  {
    *(_QWORD *)(a10 + 8) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(exception_object);
}

void sub_19C3E80A0(uint64_t a1, _QWORD *a2, unsigned int *a3, uint64_t a4)
{
  uint64_t v7;
  const UInt8 *v8;
  const UInt8 *v9;
  int v10;
  const UInt8 *v11;
  CFIndex v12;
  CFStringRef v13;
  const __CFString *v14;
  const __CFLocale *v15;
  CFIndex Length;
  __CFString *MutableCopy;
  const __CFString *v18;
  CFTypeID TypeID;
  const void *v20;
  void **v21;
  CFIndex v22;
  const __CFString *v23;
  CFIndex v24;
  CFIndex v25;
  CFStringRef v26;
  const __CFString *v27;
  CFTypeID v28;
  void *exception;
  void *v30;
  void *v31;
  void *v32;
  CFTypeRef cf;
  void *__p[2];
  uint64_t v35;
  const __CFString *v36;
  CFStringRef v37;
  CFRange v38;

  v9 = *(const UInt8 **)(a4 + 32);
  v7 = a4 + 32;
  v8 = v9;
  v10 = *(char *)(v7 + 23);
  if (v10 >= 0)
    v11 = (const UInt8 *)v7;
  else
    v11 = v8;
  if (v10 >= 0)
    v12 = *(unsigned __int8 *)(v7 + 23);
  else
    v12 = *(_QWORD *)(v7 + 8);
  v13 = CFStringCreateWithBytes(0, v11, v12, 0x8000100u, 0);
  v37 = v13;
  if (!v13)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD3154](exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v14 = v13;
  if ((*(unsigned int (**)(_QWORD, _QWORD))(*(_QWORD *)*a2 + 160))(*a2, *a3))
  {
    v15 = (const __CFLocale *)a2[5];
    Length = CFStringGetLength(v14);
    MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], Length, v14);
    CFStringLowercase(MutableCopy, v15);
    sub_19C297DB4(__p, MutableCopy);
    v18 = (const __CFString *)__p[0];
    if (!__p[0])
    {
      v31 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1A1AD3154](v31, "Could not construct");
      __cxa_throw(v31, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
    }
    TypeID = CFStringGetTypeID();
    if (TypeID == CFGetTypeID(v18))
    {
      sub_19C2E50A4((_QWORD *)a1, v18);
      v20 = __p[0];
      if (!__p[0])
        goto LABEL_33;
      goto LABEL_28;
    }
    *(_QWORD *)a1 = 0;
    *(_BYTE *)(a1 + 23) = 0;
    v20 = __p[0];
    if (__p[0])
LABEL_28:
      CFRelease(v20);
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    (*(void (**)(void **__return_ptr, _QWORD, _QWORD))(*(_QWORD *)*a2 + 40))(__p, *a2, *a3);
    if (v35 >= 0)
      v21 = __p;
    else
      v21 = (void **)__p[0];
    if (v35 >= 0)
      v22 = HIBYTE(v35);
    else
      v22 = (CFIndex)__p[1];
    v23 = CFStringCreateWithBytes(0, (const UInt8 *)v21, v22, 0x8000100u, 0);
    v36 = v23;
    if (!v23)
    {
      v30 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1A1AD3154](v30, "Could not construct");
      __cxa_throw(v30, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
    }
    if (SHIBYTE(v35) < 0)
      operator delete(__p[0]);
    v24 = CFStringGetLength(v23);
    v25 = CFStringGetLength(v14);
    if (v25 <= v24)
    {
      *(_BYTE *)(a1 + 23) = 0;
      *(_BYTE *)a1 = 0;
    }
    else
    {
      v38.location = v24;
      v38.length = v25 - v24;
      v26 = CFStringCreateWithSubstring((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v14, v38);
      sub_19C297DB4(&cf, v26);
      v27 = (const __CFString *)cf;
      if (!cf)
      {
        v32 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1A1AD3154](v32, "Could not construct");
        __cxa_throw(v32, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
      }
      v28 = CFStringGetTypeID();
      if (v28 == CFGetTypeID(v27))
      {
        sub_19C2E50A4(__p, v27);
      }
      else
      {
        __p[0] = 0;
        HIBYTE(v35) = 0;
      }
      *(_OWORD *)a1 = *(_OWORD *)__p;
      *(_QWORD *)(a1 + 16) = v35;
      HIBYTE(v35) = 0;
      LOBYTE(__p[0]) = 0;
      if (cf)
        CFRelease(cf);
    }
    CFRelease(v23);
  }
LABEL_33:
  CFRelease(v14);
}

void sub_19C3E83AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, const void *a16, const void *a17)
{
  sub_19C2E5670((const void **)&a9);
  sub_19C2E5670(&a16);
  sub_19C2E5670(&a17);
  _Unwind_Resume(a1);
}

BOOL sub_19C3E8478(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;

  if (a1 == a2)
    return 0;
  v3 = a3[2];
  v4 = a3[3];
  if (0x86BCA1AF286BCA1BLL * ((v4 - v3) >> 4) < a3[1])
    return 1;
  if (v3 == v4)
    __assert_rtn("worst", "PriorityQueue.h", 55, "!m_predictions.empty()");
  return *(double *)(a2 - 120) + *(float *)(a2 - 280) > *(double *)(v3 + 184) + *(float *)(v3 + 24);
}

CFIndex sub_19C3E8528(uint64_t a1)
{
  int v1;
  const UInt8 *v2;
  CFIndex v3;
  const __CFString *v4;
  const __CFString *v5;
  CFIndex Length;
  void *exception;

  v1 = *(char *)(a1 + 23);
  if (v1 >= 0)
    v2 = (const UInt8 *)a1;
  else
    v2 = *(const UInt8 **)a1;
  if (v1 >= 0)
    v3 = *(unsigned __int8 *)(a1 + 23);
  else
    v3 = *(_QWORD *)(a1 + 8);
  v4 = CFStringCreateWithBytes(0, v2, v3, 0x8000100u, 0);
  if (!v4)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD3154](exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v5 = v4;
  Length = CFStringGetLength(v4);
  CFRelease(v5);
  return Length;
}

void sub_19C3E85C4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19C3E85DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C2E5670((const void **)va);
  _Unwind_Resume(a1);
}

BOOL sub_19C3E85F0(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, uint64_t a5, _QWORD *a6)
{
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  __int128 v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  __int128 v24;
  const __CFString *v25;
  char v26;
  void *v27;
  const void *v28;
  char *v29;
  float v30;
  void *v31;
  float v32;
  float v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  int64_t v38;
  int64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  _BYTE *v43;
  _DWORD *v44;
  unint64_t v45;
  uint64_t v46;
  _OWORD *v47;
  char *v48;
  uint64_t v49;
  __int128 v50;
  int v51;
  std::__shared_weak_count *v52;
  unint64_t *p_shared_owners;
  unint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  void *v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t __sz;
  unint64_t v85;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  _QWORD *v93;
  _QWORD *v94;
  void *__dst[2];
  _BYTE *v96;
  void *__p[2];
  uint64_t v98;
  int v99;
  void *v100[2];
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  uint64_t v107;
  uint64_t v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  void *v112[3];
  uint64_t v113;
  std::__shared_weak_count *v114;
  uint64_t v115;
  uint64_t v116;

  v116 = *MEMORY[0x1E0C80C00];
  memset(v112, 0, sizeof(v112));
  if (a3 != a4)
  {
    v7 = a4;
    v8 = a3;
    v10 = a3[12];
    v11 = (a3[13] - v10) >> 2;
    v12 = (char *)a4 - (char *)a3 - 184;
    if (v12 >= 0xB8)
    {
      v15 = v12 / 0xB8 + 1;
      v13 = &a3[23 * (v15 & 0x3FFFFFFFFFFFFFELL)];
      v16 = a3 + 36;
      v17 = v15 & 0x3FFFFFFFFFFFFFELL;
      v18 = (a3[13] - v10) >> 2;
      do
      {
        v19 = *(v16 - 23);
        if ((v19 - *(v16 - 24)) >> 2 < v11)
          v11 = (v19 - *(v16 - 24)) >> 2;
        if ((uint64_t)(*v16 - *(v16 - 1)) >> 2 < v18)
          v18 = (uint64_t)(*v16 - *(v16 - 1)) >> 2;
        v16 += 46;
        v17 -= 2;
      }
      while (v17);
      if (v11 >= v18)
        v11 = v18;
      if (v15 == (v15 & 0x3FFFFFFFFFFFFFELL))
        goto LABEL_21;
    }
    else
    {
      v13 = a3;
    }
    do
    {
      v20 = v13[13];
      if ((v20 - v13[12]) >> 2 < v11)
        v11 = (v20 - v13[12]) >> 2;
      v13 += 23;
    }
    while (v13 != a4);
LABEL_21:
    v21 = 0;
    if (v11)
    {
      do
      {
        v22 = a3;
        do
        {
          if (*(_DWORD *)(v10 + 4 * v21) != *(_DWORD *)(v22[12] + 4 * v21))
            goto LABEL_27;
          v22 += 23;
        }
        while (v22 != a4);
        ++v21;
      }
      while (v21 != v11);
      v21 = v11;
    }
LABEL_27:
    __sz = 4 * v21;
    v85 = v21;
    while (1)
    {
      v23 = v8[4];
      if (v8[3] == v23)
      {
        HIBYTE(v98) = 0;
        LOBYTE(__p[0]) = 0;
      }
      else if (*(char *)(v23 - 9) < 0)
      {
        sub_19C2B5238(__p, *(void **)(v23 - 32), *(_QWORD *)(v23 - 24));
      }
      else
      {
        v24 = *(_OWORD *)(v23 - 32);
        v98 = *(_QWORD *)(v23 - 16);
        *(_OWORD *)__p = v24;
      }
      sub_19C3E3260((std::string *)v100, (uint64_t)__p, *(_DWORD *)(a1 + 48));
      if (SHIBYTE(v98) < 0)
        operator delete(__p[0]);
      v25 = (const __CFString *)MEMORY[0x1A1AD2A04](*(_QWORD *)(a1 + 40));
      if (CFStringCompare(v25, CFSTR("zh-Hans"), 0))
      {
        (*(void (**)(void **__return_ptr, _QWORD, void **))(*(_QWORD *)*a6 + 24))(__p, *a6, v100);
        v26 = (*(uint64_t (**)(void *))(*(_QWORD *)__p[0] + 16))(__p[0]);
        v27 = __p[0];
        __p[0] = 0;
        if (v27)
          (*(void (**)(void *))(*(_QWORD *)v27 + 8))(v27);
        if ((v26 & 1) == 0)
          goto LABEL_88;
      }
      v28 = (const void *)v8[12];
      __dst[1] = 0;
      v96 = 0;
      __dst[0] = 0;
      if (v21)
      {
        if ((v21 & 0x8000000000000000) != 0)
          sub_19C2A18E8();
        __dst[0] = operator new(__sz);
        __dst[1] = __dst[0];
        v29 = (char *)__dst[0] + 4 * v21;
        v96 = v29;
        memmove(__dst[0], v28, __sz);
        __dst[1] = v29;
      }
      v30 = 0.0;
      while (1)
      {
        v34 = v8[12];
        if (v21 >= (v8[13] - v34) >> 2)
          break;
        LODWORD(__p[0]) = 1065353216;
        (*(void (**)(_QWORD, _QWORD, void **, void **, uint64_t))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16), *(unsigned int *)(v34 + 4 * v21), __dst, __p, a5);
        v35 = v8[12];
        v36 = (char *)__dst[1];
        if (__dst[1] < v96)
        {
          *(_DWORD *)__dst[1] = *(_DWORD *)(v35 + 4 * v21);
          v31 = v36 + 4;
        }
        else
        {
          v37 = (char *)__dst[0];
          v38 = (char *)__dst[1] - (char *)__dst[0];
          v39 = ((char *)__dst[1] - (char *)__dst[0]) >> 2;
          v40 = v39 + 1;
          if ((unint64_t)(v39 + 1) >> 62)
            sub_19C2A18E8();
          v41 = v96 - (char *)__dst[0];
          if ((v96 - (char *)__dst[0]) >> 1 > v40)
            v40 = v41 >> 1;
          if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFFCLL)
            v42 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v42 = v40;
          if (v42)
          {
            if (v42 >> 62)
              sub_19C2A143C();
            v43 = operator new(4 * v42);
          }
          else
          {
            v43 = 0;
          }
          v44 = &v43[4 * v39];
          *v44 = *(_DWORD *)(v35 + 4 * v21);
          v31 = v44 + 1;
          if (v36 != v37)
          {
            v45 = v36 - 4 - v37;
            if (v45 < 0x2C)
              goto LABEL_122;
            if ((unint64_t)(v36 - &v43[v38]) < 0x20)
              goto LABEL_122;
            v46 = (v45 >> 2) + 1;
            v47 = &v43[4 * v39 - 16];
            v48 = v36 - 16;
            v49 = v46 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v50 = *(_OWORD *)v48;
              *(v47 - 1) = *((_OWORD *)v48 - 1);
              *v47 = v50;
              v47 -= 2;
              v48 -= 32;
              v49 -= 8;
            }
            while (v49);
            v44 -= v46 & 0x7FFFFFFFFFFFFFF8;
            v36 -= 4 * (v46 & 0x7FFFFFFFFFFFFFF8);
            if (v46 != (v46 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_122:
              do
              {
                v51 = *((_DWORD *)v36 - 1);
                v36 -= 4;
                *--v44 = v51;
              }
              while (v36 != v37);
            }
          }
          __dst[0] = v44;
          __dst[1] = v31;
          v96 = &v43[4 * v42];
          if (v37)
            operator delete(v37);
        }
        __dst[1] = v31;
        v32 = *(float *)__p;
        v33 = log10f(*(float *)__p);
        if (v32 <= 0.0)
          v33 = -10.0;
        v30 = v33 + v30;
        ++v21;
      }
      v52 = (std::__shared_weak_count *)a6[1];
      v113 = *a6;
      v114 = v52;
      if (v52)
      {
        p_shared_owners = (unint64_t *)&v52->__shared_owners_;
        do
          v54 = __ldxr(p_shared_owners);
        while (__stxr(v54 + 1, p_shared_owners));
      }
      v115 = a6[2];
      v93 = 0;
      v94 = 0;
      v92 = 0;
      v55 = operator new(0x18uLL);
      v56 = v55;
      v92 = v55;
      v94 = v55 + 3;
      v57 = v114;
      *v55 = v113;
      v55[1] = v57;
      if (v57)
      {
        v58 = (unint64_t *)&v57->__shared_owners_;
        do
          v59 = __ldxr(v58);
        while (__stxr(v59 + 1, v58));
      }
      v55[2] = v115;
      v93 = v55 + 3;
      v89 = 0;
      v90 = 0;
      v91 = 0;
      sub_19C3A9F98((uint64_t)__p, (uint64_t)v112, (__int128 *)v100, (uint64_t)v8, (uint64_t)&v92, 0, 0, (uint64_t)&v89, v30, 0.0);
      sub_19C35E950(a2, (uint64_t)__p);
      sub_19C35CBE8((uint64_t)__p);
      v60 = (std::__shared_weak_count *)v56[1];
      if (v60)
      {
        v61 = (unint64_t *)&v60->__shared_owners_;
        do
          v62 = __ldaxr(v61);
        while (__stlxr(v62 - 1, v61));
        if (!v62)
        {
          ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
          std::__shared_weak_count::__release_weak(v60);
        }
      }
      v93 = v56;
      operator delete(v92);
      v63 = v114;
      v21 = v85;
      v7 = a4;
      if (v114)
      {
        v64 = (unint64_t *)&v114->__shared_owners_;
        do
          v65 = __ldaxr(v64);
        while (__stlxr(v65 - 1, v64));
        if (!v65)
          break;
      }
      v66 = __dst[0];
      if (__dst[0])
        goto LABEL_87;
LABEL_88:
      if (SBYTE7(v101) < 0)
        operator delete(v100[0]);
      v8 += 23;
      if (v8 == v7)
        goto LABEL_112;
    }
    ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
    std::__shared_weak_count::__release_weak(v63);
    v66 = __dst[0];
    if (!__dst[0])
      goto LABEL_88;
LABEL_87:
    __dst[1] = v66;
    operator delete(v66);
    goto LABEL_88;
  }
  v107 = 0;
  v105 = 0u;
  v106 = 0u;
  v103 = 0u;
  v104 = 0u;
  v101 = 0u;
  v102 = 0u;
  *(_OWORD *)v100 = 0u;
  v109 = 0u;
  v110 = 0u;
  v111 = 0u;
  HIBYTE(v98) = 0;
  LOBYTE(__p[0]) = 0;
  v99 = 0;
  sub_19C3D7F54((uint64_t)v100, (uint64_t)__p);
  if (SHIBYTE(v98) < 0)
    operator delete(__p[0]);
  v108 = 0;
  if (*((_QWORD *)&v101 + 1) == (_QWORD)v102)
  {
    HIBYTE(v96) = 0;
    LOBYTE(__dst[0]) = 0;
  }
  else if (*(char *)(v102 - 9) < 0)
  {
    sub_19C2B5238(__dst, *(void **)(v102 - 32), *(_QWORD *)(v102 - 24));
  }
  else
  {
    v14 = *(_OWORD *)(v102 - 32);
    v96 = *(_BYTE **)(v102 - 16);
    *(_OWORD *)__dst = v14;
  }
  v67 = (std::__shared_weak_count *)a6[1];
  v113 = *a6;
  v114 = v67;
  if (v67)
  {
    v68 = (unint64_t *)&v67->__shared_owners_;
    do
      v69 = __ldxr(v68);
    while (__stxr(v69 + 1, v68));
  }
  v115 = a6[2];
  v93 = 0;
  v70 = operator new(0x18uLL);
  v71 = v70;
  v92 = v70;
  v94 = v70 + 3;
  v72 = v114;
  *v70 = v113;
  v70[1] = v72;
  if (v72)
  {
    v73 = (unint64_t *)&v72->__shared_owners_;
    do
      v74 = __ldxr(v73);
    while (__stxr(v74 + 1, v73));
  }
  v70[2] = v115;
  v93 = v70 + 3;
  v89 = 0;
  v90 = 0;
  v91 = 0;
  sub_19C3A9F98((uint64_t)__p, (uint64_t)v112, (__int128 *)__dst, (uint64_t)v100, (uint64_t)&v92, 0, 0, (uint64_t)&v89, 0.0, 0.0);
  sub_19C35E950(a2, (uint64_t)__p);
  sub_19C35CBE8((uint64_t)__p);
  v75 = (std::__shared_weak_count *)v71[1];
  if (v75)
  {
    v76 = (unint64_t *)&v75->__shared_owners_;
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  v93 = v71;
  operator delete(v92);
  v78 = v114;
  if (v114)
  {
    v79 = (unint64_t *)&v114->__shared_owners_;
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
      if ((SHIBYTE(v96) & 0x80000000) == 0)
        goto LABEL_111;
      goto LABEL_110;
    }
  }
  if (SHIBYTE(v96) < 0)
LABEL_110:
    operator delete(__dst[0]);
LABEL_111:
  sub_19C2E25C8(v100);
LABEL_112:
  v81 = a2[2];
  v82 = a2[3];
  if (v112[0])
    operator delete(v112[0]);
  return v81 != v82;
}

void sub_19C3E8DF4(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_19C2CDAC8(a1);
  _Unwind_Resume(a1);
}

void sub_19C3E8F2C()
{
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C3E8F40()
{
  return CFLog();
}

uint64_t sub_19C3E8F6C(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E3D36130;
  CFRelease(*(CFTypeRef *)(a1 + 16));
  return a1;
}

void sub_19C3E8FA4(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E3D36130;
  CFRelease(*(CFTypeRef *)(a1 + 16));
  JUMPOUT(0x1A1AD355CLL);
}

void sub_19C3E8FEC(uint64_t a1, const __CFString *a2)
{
  CFStringAppend(*(CFMutableStringRef *)(a1 + 16), a2);
}

void sub_19C3E8FF4(int *a1, uint64_t a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  CFStringRef v10;
  char __str[1000];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (a1[2] >= 3)
  {
    vsnprintf(__str, 0x3E8uLL, a3, &a9);
    v10 = CFStringCreateWithCStringNoCopy(0, __str, 0x8000100u, (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
    if (v10)
    {
      (*(void (**)(int *, CFStringRef))(*(_QWORD *)a1 + 16))(a1, v10);
      CFRelease(v10);
    }
  }
}

void sub_19C3E90B8(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_19C2CDAC8(exception_object);
  _Unwind_Resume(exception_object);
}

CFIndex sub_19C3E90E8()
{
  uint64_t v0;
  CFIndex result;
  int v4;
  Boolean keyExistsAndHasValidFormat;

  v0 = operator new();
  keyExistsAndHasValidFormat = 0;
  result = CFPreferencesGetAppIntegerValue(CFSTR("LMDebug"), (CFStringRef)*MEMORY[0x1E0C9B228], &keyExistsAndHasValidFormat);
  if (result > 7 || result < 0 || keyExistsAndHasValidFormat == 0)
    v4 = 3;
  else
    v4 = result;
  *(_DWORD *)(v0 + 8) = v4;
  *(_QWORD *)v0 = &off_1E3D375E8;
  qword_1EDB970F8 = v0;
  return result;
}

void sub_19C3E9174(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD355C](v1, 0x1081C409227ACB4);
  _Unwind_Resume(a1);
}

uint64_t sub_19C3E9198(const __CFURL *a1, const void *a2)
{
  CFMutableDictionaryRef Mutable;
  CFStringRef v5;
  uint64_t v6;
  NSObject *v8;
  void *__p[8];
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  __p[7] = Mutable;
  v5 = CFURLCopyFileSystemPath(a1, kCFURLPOSIXPathStyle);
  __p[6] = (void *)v5;
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0D43798], v5);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0D437C8], CFSTR("LegacyTextInputLexicon"));
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0D437B8], a2);
  __p[5] = 0;
  v6 = LXLexiconCreateMutable();
  if (!v6)
  {
    if (qword_1EE41C4B8 != -1)
      dispatch_once(&qword_1EE41C4B8, &unk_1E3D3BFD8);
    v8 = qword_1EE41C4B0;
    if (os_log_type_enabled((os_log_t)qword_1EE41C4B0, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl(&dword_19C291000, v8, OS_LOG_TYPE_DEFAULT, "failed to create a mutable lexicon", (uint8_t *)__p, 2u);
    }
  }
  if (v5)
    CFRelease(v5);
  if (Mutable)
    CFRelease(Mutable);
  return v6;
}

void sub_19C3E93F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, int a16, __int16 a17, char a18, char a19)
{
  if (a2)
    sub_19C2CDAC8(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C3E9448(uint64_t result, uint64_t a2, _BYTE *a3)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = 0;
  *a3 = 1;
  return result;
}

uint64_t sub_19C3E9460(uint64_t result, uint64_t a2, _BYTE *a3)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = 0;
  *a3 = 1;
  return result;
}

_QWORD *sub_19C3E9478(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v2 = a1 + 4;
  v3 = (_QWORD *)a1[7];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = (_QWORD *)a1[3];
  if (v5 == a1)
  {
    v6 = 4;
    v5 = a1;
    goto LABEL_10;
  }
  if (v5)
  {
    v6 = 5;
LABEL_10:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return a1;
}

const void **sub_19C3E94F4(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  *a1 = 0;
  return a1;
}

uint64_t sub_19C3E9528(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(result + 40) = v2;
  return result;
}

uint64_t sub_19C3E9538(uint64_t result)
{
  uint64_t *v1;

  v1 = *(uint64_t **)(result + 40);
  *(_QWORD *)(result + 40) = 0;
  if (v1)
  {
    if (*v1)
    {
      sub_19C29A56C(v1);
      if (*v1)
        MEMORY[0x1A1AD355C](*v1, 0x1010C4006136809);
    }
    JUMPOUT(0x1A1AD355CLL);
  }
  return result;
}

uint64_t sub_19C3E95A8(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(result + 40) = v2;
  return result;
}

uint64_t sub_19C3E95B8(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_19C3E95D8(int a1, uint64_t a2)
{
  _QWORD v2[3];
  const __CFURL *v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v3 = sub_19C3A427C(a2, CFSTR("lexicon"));
  sub_19C2E15E8(v3, v2);
}

void sub_19C3E9624(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, const __CFURL *a16)
{
  uint64_t v16;
  const void *v17;
  const __CFURL *v18;

  v18 = sub_19C3A427C(v16, CFSTR("probation"));
  if (v17)
    CFRelease(v17);
  a16 = v18;
  sub_19C2E15E8(v18, &a10);
}

void sub_19C3E9654(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,CFTypeRef cf,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  int32x2_t **v32;
  uint64_t v33;
  const void *v34;
  CFURLRef v35;
  int32x2_t *v36;
  CFURLRef v37;
  uint64_t v38;
  __int128 v39;
  char v40;
  __int128 v41;
  char v42;
  CFURLRef v43;

  v35 = sub_19C3A427C(v33, CFSTR("dynamicids"));
  if (v34)
    CFRelease(v34);
  v43 = v35;
  v38 = 0xFFFFFF00C00000;
  *v32 = 0;
  v36 = (int32x2_t *)operator new();
  sub_19C332960(v36, v35, &v41, &v39, (unsigned int *)&v38);
  *v32 = v36;
  if ((v40 & 0x80000000) == 0)
  {
    if ((v42 & 0x80000000) == 0)
      goto LABEL_5;
LABEL_8:
    operator delete((void *)v41);
    v37 = v43;
    if (!v43)
      return;
    goto LABEL_9;
  }
  operator delete((void *)v39);
  if (v42 < 0)
    goto LABEL_8;
LABEL_5:
  v37 = v43;
  if (v43)
LABEL_9:
    CFRelease(v37);
}

void sub_19C3E972C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_19C2CDAC8(a1);
  _Unwind_Resume(a1);
}

void sub_19C3E98AC(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  void *v6;
  void *v7;
  CFStringRef v8;
  uint64_t v9;
  uint64_t v10;
  const void *Mutable;
  _QWORD *v12;
  NSObject *v13;
  NSObject *v14;
  void **v15;
  _QWORD v16[6];
  CFTypeRef cf[2];
  void *__p[2];
  int64_t v19;
  int v20;
  uint8_t v21[4];
  void **v22;
  __int16 v23;
  int v24;
  uint8_t buf[16];
  unint64_t v26;
  int v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v20 = a2;
  ++*(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24);
  (*(void (**)(void **__return_ptr))(**(_QWORD **)(*(_QWORD *)(a1[5] + 8) + 40) + 32))(__p);
  v4 = HIBYTE(v19);
  LOBYTE(v5) = HIBYTE(v19);
  v6 = __p[1];
  if (v19 >= 0)
    v7 = (void *)HIBYTE(v19);
  else
    v7 = __p[1];
  if (!v7)
  {
    (*(void (**)(uint8_t *__return_ptr, _QWORD, uint64_t))(*(_QWORD *)a1[8] + 32))(buf, a1[8], a2);
    if (SHIBYTE(v19) < 0)
      operator delete(__p[0]);
    v19 = v26;
    *(_OWORD *)__p = *(_OWORD *)buf;
    v4 = HIBYTE(v26);
    v6 = *(void **)&buf[8];
    v5 = HIBYTE(v26);
  }
  if ((v5 & 0x80u) != 0)
    v4 = (unint64_t)v6;
  if (v4)
  {
    v8 = sub_19C2E1370((uint64_t)__p);
    cf[1] = v8;
    v9 = a1[9];
    *(_QWORD *)buf = v8;
    v10 = *(_QWORD *)(v9 + 56);
    if (!v10)
      sub_19C2CCC60();
    (*(void (**)(CFTypeRef *__return_ptr, uint64_t, uint8_t *))(*(_QWORD *)v10 + 48))(cf, v10, buf);
    Mutable = (const void *)LXEntryCreateMutable();
    v16[5] = Mutable;
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    v26 = 0x2000000000;
    v27 = 0;
    v12 = *(_QWORD **)(*(_QWORD *)(a1[6] + 8) + 40);
    v16[0] = MEMORY[0x1E0C809B0];
    v16[1] = 0x40000000;
    v16[2] = sub_19C3E9C8C;
    v16[3] = &unk_1E3D3BF20;
    v16[4] = buf;
    sub_19C427BC8(v12, &v20, 1u, (uint64_t)v16);
    if (*(float *)(*(_QWORD *)&buf[8] + 24) < 1.0)
      *(_DWORD *)(*(_QWORD *)&buf[8] + 24) = 1065353216;
    LXMutableEntryUpdateUsageCount();
    if (sub_19C3E9CD8((uint64_t)Mutable, a1[8], *(_QWORD **)(*(_QWORD *)(a1[5] + 8) + 40), a1[10], a1[9]))
    {
      ++*(_DWORD *)(*(_QWORD *)(a1[7] + 8) + 24);
    }
    else
    {
      if (qword_1EE41C4B8 != -1)
        dispatch_once(&qword_1EE41C4B8, &unk_1E3D3BFD8);
      v14 = qword_1EE41C4B0;
      if (os_log_type_enabled((os_log_t)qword_1EE41C4B0, OS_LOG_TYPE_DEFAULT))
      {
        v15 = __p;
        if (v19 < 0)
          v15 = (void **)__p[0];
        *(_DWORD *)v21 = 136315394;
        v22 = v15;
        v23 = 1024;
        v24 = a2;
        _os_log_impl(&dword_19C291000, v14, OS_LOG_TYPE_DEFAULT, "failed to migrate entry '%s' with tokenID=%u", v21, 0x12u);
      }
    }
    _Block_object_dispose(buf, 8);
    if (Mutable)
      CFRelease(Mutable);
    if (cf[0])
      CFRelease(cf[0]);
    if (v8)
      CFRelease(v8);
  }
  else
  {
    if (qword_1EE41C4B8 != -1)
      dispatch_once(&qword_1EE41C4B8, &unk_1E3D3BFD8);
    v13 = qword_1EE41C4B0;
    if (os_log_type_enabled((os_log_t)qword_1EE41C4B0, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = a2;
      _os_log_impl(&dword_19C291000, v13, OS_LOG_TYPE_DEFAULT, "unable to migrate entry with tokenID=%u (failed to lookup corresponding string)", buf, 8u);
    }
  }
  if (SHIBYTE(v19) < 0)
    operator delete(__p[0]);
}

void sub_19C3E9C08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, int a15, __int16 a16, char a17, char a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

float sub_19C3E9C8C(uint64_t a1, float a2)
{
  uint64_t v2;
  float result;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  result = *(float *)(v2 + 24) + a2;
  *(float *)(v2 + 24) = result;
  return result;
}

const void **sub_19C3E9CA4(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  *a1 = 0;
  return a1;
}

uint64_t sub_19C3E9CD8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  const void *MutableCopy;
  const __CFString *v9;
  uint64_t v10;
  char *v11;
  __int128 *v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  const void *v25;
  unint64_t v26;
  void *v28[2];
  void (*v29)(uint64_t, uint64_t, _BYTE *);
  void *v30;
  __int128 *p_p;
  const __CFString *v32;
  uint64_t v33;
  __int128 __p;
  uint64_t v35;
  int v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  MutableCopy = (const void *)LXEntryCreateMutableCopy();
  v9 = (const __CFString *)LXEntryCopyString();
  *(_QWORD *)&__p = 0;
  *((_QWORD *)&__p + 1) = &__p;
  v36 = 0;
  v35 = 0x2000000000;
  v28[0] = (void *)MEMORY[0x1E0C809B0];
  v28[1] = (void *)0x40000000;
  v29 = sub_19C412C50;
  v30 = &unk_1E3D3C748;
  p_p = &__p;
  v32 = v9;
  v33 = 0;
  LXLexiconEnumerateEntriesForString();
  v10 = *(unsigned int *)(*((_QWORD *)&__p + 1) + 24);
  _Block_object_dispose(&__p, 8);
  if ((_DWORD)v10)
  {
    v11 = (char *)operator new(0x40uLL);
    strcpy(v11, "skipping migration of string,  already exists with tokenID");
    sub_19C29CEF8(v9, &__p);
    if (v35 >= 0)
      v12 = &__p;
    else
      v12 = (__int128 *)__p;
    sub_19C34EC30("skipping migration of string='%s'; already exists with tokenID=%u", (uint64_t)v28, v12, v10);
    if (SHIBYTE(v35) < 0)
      operator delete((void *)__p);
    if (qword_1EE41C4B8 != -1)
      dispatch_once(&qword_1EE41C4B8, &unk_1E3D3BFD8);
    v13 = qword_1EE41C4B0;
    if (os_log_type_enabled((os_log_t)qword_1EE41C4B0, OS_LOG_TYPE_INFO))
    {
      LODWORD(__p) = 136315138;
      *(_QWORD *)((char *)&__p + 4) = v11;
      _os_log_impl(&dword_19C291000, v13, OS_LOG_TYPE_INFO, "%s", (uint8_t *)&__p, 0xCu);
    }
    if (SHIBYTE(v29) < 0)
      operator delete(v28[0]);
    operator delete(v11);
    goto LABEL_14;
  }
  v28[0] = (void *)v9;
  v15 = *(_QWORD *)(a5 + 24);
  if (!v15)
    sub_19C2CCC60();
  (*(void (**)(__int128 *__return_ptr, uint64_t, void **))(*(_QWORD *)v15 + 48))(&__p, v15, v28);
  v16 = (*(uint64_t (**)(uint64_t, const __CFString *, _QWORD))(*(_QWORD *)a2 + 16))(a2, v9, 0);
  if (!v16)
  {
    if (!(_QWORD)__p)
    {
LABEL_14:
      v14 = 0;
      goto LABEL_30;
    }
    v16 = (*(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*a3 + 16))(a3, __p, 0);
    if (!v16)
      goto LABEL_28;
  }
  v17 = (_QWORD *)a3[18];
  v18 = v17[7];
  if (v17[8] != v18)
  {
    v19 = v17[10];
    v20 = v17[11];
    v21 = (unint64_t *)(v18 + 8 * (v19 / 0x66));
    v22 = *v21;
    v23 = *v21 + 40 * (v19 % 0x66);
    v24 = *(_QWORD *)(v18 + 8 * ((v20 + v19) / 0x66)) + 40 * ((v20 + v19) % 0x66);
    while (v23 != v24)
    {
      if (*(_DWORD *)(v23 + 24) == v16)
        break;
      v23 += 40;
      if (v23 - v22 == 4080)
      {
        v26 = v21[1];
        ++v21;
        v22 = v26;
        v23 = v26;
      }
    }
  }
  CEMStringContainsEmoji();
  LXMutableEntrySetMetaFlags();
  if (!LXLexiconAddEntryWithTokenID())
  {
LABEL_28:
    v14 = 0;
    v25 = (const void *)__p;
    if (!(_QWORD)__p)
      goto LABEL_30;
    goto LABEL_29;
  }
  LXLexiconSetUserBitfield();
  v14 = 1;
  v25 = (const void *)__p;
  if ((_QWORD)__p)
LABEL_29:
    CFRelease(v25);
LABEL_30:
  if (v9)
    CFRelease(v9);
  if (MutableCopy)
    CFRelease(MutableCopy);
  return v14;
}

void sub_19C3EA090(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, const void *a12, const void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  sub_19C2FE810((const void **)&__p);
  sub_19C2FE810(&a12);
  sub_19C3E9CA4(&a13);
  _Unwind_Resume(a1);
}

void sub_19C3EA124()
{
  JUMPOUT(0x19C3EA114);
}

__n128 sub_19C3EA12C(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

void sub_19C3EA150(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  const void *v6;
  const void *v7;

  v1 = *(_QWORD *)(a1 + 40);
  if (v1)
  {
    v3 = *(_QWORD *)(a1 + 48);
    v4 = *(void **)(a1 + 40);
    if (v3 != v1)
    {
      v5 = v3;
      do
      {
        v7 = *(const void **)(v5 - 8);
        v5 -= 8;
        v6 = v7;
        if (v7)
          CFRelease(v6);
        *(_QWORD *)(v3 - 8) = 0;
        v3 = v5;
      }
      while (v5 != v1);
      v4 = *(void **)(a1 + 40);
    }
    *(_QWORD *)(a1 + 48) = v1;
    operator delete(v4);
  }
}

void sub_19C3EA1D0(_QWORD *a1, const void *a2)
{
  _QWORD *v4;
  CFTypeRef v5;
  CFTypeRef v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v20;
  __int128 *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  const void *v29;
  const void *v30;

  ++*(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24);
  if (sub_19C3E9CD8((uint64_t)a2, a1[8], *(_QWORD **)(*(_QWORD *)(a1[5] + 8) + 40), a1[9], a1[10]))
  {
    ++*(_DWORD *)(*(_QWORD *)(a1[6] + 8) + 24);
    return;
  }
  v4 = *(_QWORD **)(a1[7] + 8);
  v5 = CFRetain(a2);
  v6 = v5;
  v8 = (_QWORD *)v4[6];
  v7 = v4[7];
  if ((unint64_t)v8 >= v7)
  {
    v10 = (char *)v4[5];
    v11 = ((char *)v8 - v10) >> 3;
    v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 61)
      sub_19C2A18E8();
    v13 = v7 - (_QWORD)v10;
    if (v13 >> 2 > v12)
      v12 = v13 >> 2;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14)
    {
      if (v14 >> 61)
        sub_19C2A143C();
      v15 = (char *)operator new(8 * v14);
    }
    else
    {
      v15 = 0;
    }
    v16 = &v15[8 * v11];
    v17 = &v15[8 * v14];
    *(_QWORD *)v16 = v6;
    v9 = v16 + 8;
    if (v8 == (_QWORD *)v10)
    {
      v4[5] = v16;
      v4[6] = v9;
      v4[7] = v17;
LABEL_33:
      if (v8)
        operator delete(v8);
      goto LABEL_35;
    }
    v18 = (char *)v8 - v10 - 8;
    if (v18 > 0x77
      && ((char *)v8 - (v18 & 0xFFFFFFFFFFFFFFF8) - 8 >= v16
       || &v15[(char *)v8 - v10 - (v18 & 0xFFFFFFFFFFFFFFF8) - 8] >= (char *)v8))
    {
      v20 = (v18 >> 3) + 1;
      v16 -= 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
      v21 = (__int128 *)(v8 - 4);
      v22 = &v15[8 * v11 - 16];
      v23 = v20 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v25 = *v21;
        v24 = v21[1];
        *v21 = 0uLL;
        v21[1] = 0uLL;
        v21 -= 2;
        *((_OWORD *)v22 - 1) = v25;
        *(_OWORD *)v22 = v24;
        v22 -= 32;
        v23 -= 4;
      }
      while (v23);
      if (v20 == (v20 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_27:
        v8 = (_QWORD *)v4[5];
        v27 = (_QWORD *)v4[6];
        v4[5] = v16;
        v4[6] = v9;
        v4[7] = v17;
        if (v27 != v8)
        {
          v28 = v27;
          do
          {
            v30 = (const void *)*--v28;
            v29 = v30;
            if (v30)
              CFRelease(v29);
            *(v27 - 1) = 0;
            v27 = v28;
          }
          while (v28 != v8);
        }
        goto LABEL_33;
      }
      v8 -= v20 & 0x3FFFFFFFFFFFFFFCLL;
    }
    do
    {
      v26 = *--v8;
      *v8 = 0;
      *((_QWORD *)v16 - 1) = v26;
      v16 -= 8;
    }
    while (v8 != (_QWORD *)v10);
    goto LABEL_27;
  }
  *v8 = v5;
  v9 = v8 + 1;
LABEL_35:
  v4[6] = v9;
}

void **sub_19C3EA3E0(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  char *v5;
  const void *v6;
  const void *v7;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      v5 = (char *)a1[1];
      do
      {
        v7 = (const void *)*((_QWORD *)v5 - 1);
        v5 -= 8;
        v6 = v7;
        if (v7)
          CFRelease(v6);
        *((_QWORD *)v3 - 1) = 0;
        v3 = v5;
      }
      while (v5 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

os_log_t sub_19C3EA458()
{
  os_log_t result;

  result = os_log_create("com.apple.LanguageModeling", "LexiconMigrator");
  qword_1EE41C4B0 = (uint64_t)result;
  return result;
}

uint64_t sub_19C3EA484()
{
  uint64_t result;

  result = ucol_open();
  qword_1EE41C4F0 = result;
  return result;
}

void sub_19C3EA4E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  char *v5;
  CFStringRef v6;
  uint64_t v7;
  CFStringRef v8;
  CFURLRef v9;
  int v10;
  const __CFString *v11;
  const __CFString *v12;
  CFURLRef v13;
  const __CFURL *v14;
  CFURLRef v15;
  off_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __CFString *Mutable;
  __CFString *v24;
  const __CFString *v25;
  CFIndex Length;
  UniChar *v27;
  const char *v28;
  const char *v29;
  const char *v30;
  const char *v31;
  CFStringRef v32;
  CFURLRef url;
  CFStringRef filePath;
  CFTypeRef cf;
  uint64_t v36;
  UInt8 buffer[4];
  uint64_t v38;
  CFRange v39;

  v38 = *MEMORY[0x1E0C80C00];
  v1 = *(unsigned int *)(a1 + 40);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = qword_1EE41C4C0[v1];
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    if (!(_DWORD)v1)
    {
      if (qword_1EE41C4F8 == -1)
      {
        v7 = qword_1EE41C4F0;
        if (!qword_1EE41C4F0)
          goto LABEL_14;
      }
      else
      {
        dispatch_once(&qword_1EE41C4F8, &unk_1E3D3C040);
        v7 = qword_1EE41C4F0;
        if (!qword_1EE41C4F0)
LABEL_14:
          __assert_rtn("getRootCollator", "LMTIKeyboardCollator.cpp", 53, "rootCollator");
      }
      goto LABEL_67;
    }
    if (qword_1EE41C4F8 == -1)
    {
      if (!qword_1EE41C4F0)
        goto LABEL_14;
    }
    else
    {
      dispatch_once(&qword_1EE41C4F8, &unk_1E3D3C040);
      if (!qword_1EE41C4F0)
        goto LABEL_14;
    }
    v36 = 0;
    v3 = qword_1EE41C510;
    v4 = qword_1EE41C518;
    if (qword_1EE41C510 || qword_1EE41C518 || dword_1EE41C520)
      goto LABEL_41;
    v5 = getenv("LINGUISTIC_DATA");
    if (v5)
      v6 = CFStringCreateWithCString(0, v5, 0x8000100u);
    else
      v6 = CFSTR("/System/Library/LinguisticData/");
    sub_19C297DB4(&cf, v6);
    v8 = CFStringCreateWithFormat(0, 0, CFSTR("%@/collator.dat"), cf);
    sub_19C297DB4(&filePath, v8);
    v9 = CFURLCreateWithFileSystemPath(0, filePath, kCFURLPOSIXPathStyle, 1u);
    sub_19C2952E8(&url, v9);
    dword_1EE41C520 = -1;
    if (CFURLGetFileSystemRepresentation(url, 1u, buffer, 1024))
    {
      v10 = open((const char *)buffer, 0);
      dword_1EE41C520 = v10;
      if ((v10 & 0x80000000) == 0)
        goto LABEL_28;
    }
    else
    {
      v10 = dword_1EE41C520;
      if ((dword_1EE41C520 & 0x80000000) == 0)
        goto LABEL_28;
    }
    sub_19C29471C(&v32, "/System/Library/PrivateFrameworks/Lexicon.framework/collator.dat");
    v11 = filePath;
    v12 = v32;
    filePath = v32;
    v32 = v11;
    if (v11)
    {
      CFRelease(v11);
      v12 = filePath;
    }
    v13 = CFURLCreateWithFileSystemPath(0, v12, kCFURLPOSIXPathStyle, 1u);
    sub_19C2952E8(&v32, v13);
    v14 = (const __CFURL *)v32;
    v15 = url;
    v32 = (CFStringRef)url;
    url = v14;
    if (v32)
    {
      CFRelease(v15);
      v14 = url;
    }
    if (CFURLGetFileSystemRepresentation(v14, 1u, buffer, 1024))
    {
      v10 = open((const char *)buffer, 0);
      dword_1EE41C520 = v10;
      if (v10 < 0)
        goto LABEL_34;
    }
    else
    {
      v10 = dword_1EE41C520;
      if (dword_1EE41C520 < 0)
        goto LABEL_34;
    }
LABEL_28:
    v16 = lseek(v10, 0, 2);
    if (v16 < 1)
    {
LABEL_33:
      close(dword_1EE41C520);
      dword_1EE41C520 = -1;
      goto LABEL_34;
    }
    qword_1EE41C518 = v16;
    lseek(dword_1EE41C520, 0, 0);
    qword_1EE41C510 = (uint64_t)mmap(0, qword_1EE41C518, 1, 2, dword_1EE41C520, 0);
    if (qword_1EE41C510 == -1)
    {
LABEL_32:
      qword_1EE41C510 = 0;
      goto LABEL_33;
    }
    ucol_getVersion();
    if (HIDWORD(v36) != *(_DWORD *)qword_1EE41C510)
    {
      munmap((void *)qword_1EE41C510, qword_1EE41C518);
      goto LABEL_32;
    }
LABEL_34:
    if (url)
      CFRelease(url);
    if (filePath)
      CFRelease(filePath);
    if (cf)
      CFRelease(cf);
    v3 = qword_1EE41C510;
    v4 = qword_1EE41C518;
LABEL_41:
    v17 = 0;
    if ((int)v1 >= 1 && v3 && v4)
    {
      v18 = *(unsigned int *)(v3 + 4 + 8 * (v1 - 1));
      if (v18 < 5 || v4 <= v18)
        goto LABEL_49;
      v17 = 0;
      v19 = *(_DWORD *)(v3 + 4 + 8 * (v1 - 1) + 4);
      if (v19)
      {
        if (v4 >= (v19 + v18))
        {
          v20 = ucol_openBinary();
          if ((int)v36 > 0)
          {
LABEL_49:
            v17 = 0;
            goto LABEL_50;
          }
          v17 = v20;
          *(_DWORD *)buffer = 0;
          ucol_setStrength();
          ucol_setAttribute();
          if (*(int *)buffer > 0)
          {
            v31 = u_errorName(*(UErrorCode *)buffer);
            printf("Collator customization failed: %s\n", v31);
            LODWORD(v36) = *(_DWORD *)buffer;
            if (*(int *)buffer >= 1)
            {
              ucol_close();
              goto LABEL_49;
            }
          }
        }
      }
    }
LABEL_50:
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v17;
    v21 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    if (v21)
    {
LABEL_68:
      qword_1EE41C4C0[*(unsigned int *)(a1 + 40)] = v21;
      return;
    }
    v22 = *(unsigned int *)(a1 + 40);
    Mutable = CFStringCreateMutable(0, 0);
    v24 = Mutable;
    v25 = CFSTR("& ь <<< Ь << ъ <<< Ъ & ї <<< Ї << і <<< І & 'ا' << 'أ' << 'إ' << 'آ' & 'و' << 'ؤ' & 'ي' << 'ئ' &[last primary ignorable ] << '׳' << '״' << 'ـ' << 'ً' << 'ٌ' << 'ٍ' << 'َ' << 'ُ' << 'ِ' << 'ّ' << 'ْ' << 'ٓ' << 'ٔ' << 'ٕ' << 'ٖ' << 'ٗ' << 'ٰ' << '़' << 'ँ' << 'ं' << 'ः' << '्' << '্' << '়' << 'ঁ' << 'ঃ' << 'ਁ' << 'ਂ' << 'ਃ' << '਼' << '੍' << 'ੑ' << 'ੰ' << 'ੱ' << 'ઁ' << 'ં' << 'ઃ' << '઼' << '્' << 'ః' << '్' & 'כ' < 'ך' & 'מ' < 'ם' & 'נ' < 'ן' & 'פ' < 'ף' & 'צ' < 'ץ' & 'ๆ' < '็' < '่' < '้' < '๊' < '๋' < '์' < 'ํ' < '๎' [suppressContractions [ก-๛]] & 'ํ' <<< 'ำ'/'า' & [before 1] 'অ' < 'ং' < 'ঃ' & [before 1] 'అ' < 'ఁ' < 'ం' < 'ః' & 'ে' <<< 'ো'/'া' <<< 'ৌ'/'ৗ' & 'ত' <<< 'ৎ'/'্' ");
    switch((int)v22)
    {
      case 0:
        __assert_rtn("LMTIKeyboardCreateCustomCollationRulesForCollatorType", "LMTIKeyboardCollator.cpp", 80, "type != kRootCollator");
      case 1:
        goto LABEL_56;
      case 2:
        v25 = CFSTR("& i <<< İ << ı <<< I ");
        goto LABEL_56;
      case 3:
        v25 = CFSTR("& z < æ <<< Æ < å <<< Å < ä <<< Ä < ø <<< Ø < ö <<< Ö ");
        goto LABEL_56;
      case 4:
        goto LABEL_56;
      case 5:
        v25 = CFSTR("& n << w & k << g & p << b & a << A/a & e << E/e & i << I/i & o << O/o & u << U/u & [last primary ignorable] << ஂ << ் & [last primary ignorable] << அ & ஆ << ா & இ << ி & ஈ << ீ & உ << ு & ஊ << ூ & எ << ெ & ஏ << ே & ஐ << ை & ஒ << ொ & ஓ << ோ & ஔ << ௌ & க << '\u0BBD'/ஷ ");
LABEL_56:
        CFStringAppend(Mutable, v25);
        break;
      default:
        break;
    }
    CFStringAppend(v24, CFSTR("& [before 1] a < ' ' < '&' "));
    Length = CFStringGetLength(v24);
    v27 = (UniChar *)malloc_type_malloc(2 * Length, 0x1000040BDFB0063uLL);
    if (!v27)
      __assert_rtn("LMTIKeyboardCollatorCompile", "LMTIKeyboardCollator.cpp", 207, "buf");
    v39.location = 0;
    v39.length = Length;
    CFStringGetCharacters(v24, v39, v27);
    CFRelease(v24);
    LODWORD(filePath) = 0;
    v7 = ucol_openRules();
    free(v27);
    if ((int)filePath < 1)
    {
      LODWORD(cf) = 0;
      ucol_setStrength();
      ucol_setAttribute();
      if ((int)cf <= 0)
        goto LABEL_67;
      v29 = u_errorName((UErrorCode)cf);
      printf("Collator customization failed: %s\n", v29);
      LODWORD(filePath) = (_DWORD)cf;
      if ((int)cf < 1)
        goto LABEL_67;
      ucol_close();
    }
    else
    {
      if (v22 > 5)
        v28 = "(unknown custom collator)";
      else
        v28 = off_1E3D3C0A0[v22];
      v30 = u_errorName((UErrorCode)filePath);
      printf("failed to compile rules for collator type %s: %s\n", v28, v30);
    }
    v7 = 0;
LABEL_67:
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v7;
    v21 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    goto LABEL_68;
  }
}

void sub_19C3EAB28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, int a13, __int16 a14, char a15, char a16, int a17, __int16 a18, char a19, char a20)
{
  if (a2)
    sub_19C2CDAC8(exception_object);
  _Unwind_Resume(exception_object);
}

dispatch_queue_t sub_19C3EABAC()
{
  dispatch_queue_t result;

  result = dispatch_queue_create("com.apple.LanguageModeling.KeyboardCollator", 0);
  qword_1EE41C500 = (uint64_t)result;
  return result;
}

void sub_19C3EABD8()
{
  JUMPOUT(0x1A1AD355CLL);
}

_QWORD *sub_19C3EABEC()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E3D38CC0;
  return result;
}

void sub_19C3EAC10(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E3D38CC0;
}

CFTypeRef sub_19C3EAC28@<X0>(const void **a1@<X1>, _QWORD *a2@<X8>)
{
  const void *v2;
  CFTypeRef result;

  v2 = *a1;
  *a2 = 0;
  if (v2)
  {
    result = CFRetain(v2);
    *a2 = v2;
  }
  return result;
}

uint64_t sub_19C3EAC60(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN2LM22LexiconStringConverter22getDefaultConverterFcnEvE3$_0"
    || ((v3 & (unint64_t)"ZN2LM22LexiconStringConverter22getDefaultConverterFcnEvE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN2LM22LexiconStringConverter22getDefaultConverterFcnEvE3$_0")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN2LM22LexiconStringConverter22getDefaultConverterFcnEvE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *sub_19C3EACB4()
{
  return &unk_1E3D33540;
}

_QWORD *sub_19C3EACC0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_1E3D38C68;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void sub_19C3EAD24(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_1E3D38C68;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x1A1AD355CLL);
}

_QWORD *sub_19C3EAD98(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E3D38C68;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_19C3EADE8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_1E3D38C68;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_19C3EAE18(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_19C3EAE70(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  operator delete(__p);
}

const __CFString *sub_19C3EAEC8@<X0>(const __CFString **a1@<X1>, const __CFString **a2@<X8>)
{
  const __CFString *v3;
  const __CFString *result;

  v3 = *a1;
  *a2 = 0;
  result = sub_19C40A214(v3);
  if (result)
    *a2 = result;
  return result;
}

void sub_19C3EAEF8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = 0;
  _Unwind_Resume(a1);
}

uint64_t sub_19C3EAF00(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN2LM22LexiconStringConverter21hangulStringConverterEvE3$_1"
    || ((v3 & (unint64_t)"ZN2LM22LexiconStringConverter21hangulStringConverterEvE3$_1" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN2LM22LexiconStringConverter21hangulStringConverterEvE3$_1")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN2LM22LexiconStringConverter21hangulStringConverterEvE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *sub_19C3EAF54()
{
  return &unk_1E3D33530;
}

_QWORD *sub_19C3EAF60(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_1E3D38C10;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void sub_19C3EAFC4(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_1E3D38C10;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x1A1AD355CLL);
}

_QWORD *sub_19C3EB038(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E3D38C10;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_19C3EB088(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_1E3D38C10;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_19C3EB0B8(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_19C3EB110(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  operator delete(__p);
}

void sub_19C3EB168(uint64_t a1@<X0>, const __CFString **a2@<X1>, CFMutableStringRef *a3@<X8>)
{
  uint64_t v3;
  const __CFString *v4;
  uint64_t Length;
  CFMutableStringRef Mutable;
  _WORD *v8;
  const __CFString *v9;
  CFRange v10;
  CFIndex v11;
  unsigned int CharacterAtIndex;
  uint64_t v13;
  BOOL v14;
  int v15;
  int v16;
  uint64_t v17;
  unsigned __int16 v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  unsigned int v26;
  int v27;
  int v28;
  const __CFString *v29;
  CFRange v30;
  __int16 v32;
  UniChar v33;
  __CFString *v34;
  BOOL v35;
  unsigned int v36;
  uint64_t v37;
  int v38;
  UniChar v39;
  unsigned int v40;
  __int16 v41;
  BOOL v42;
  unsigned int v43;
  unsigned int v44;
  int v45;
  uint64_t v46;
  unsigned int v47;
  int v48;
  unsigned int v49;
  int v50;
  int v51;
  int v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  unsigned int v58;
  __int16 v59;
  __int16 v60;
  char *v61;
  char *v62;
  uint64_t v63;
  unsigned int v64;
  unsigned int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  uint64_t v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int v75;
  uint64_t v76;
  __int16 v77;
  __int16 v78;
  int v79;
  unint64_t v80;
  __CFString *v81;
  unsigned __int16 v82;
  CFRange v83;
  const __CFString *v84;
  CFRange v85;
  uint64_t v86;
  uint64_t v87;
  __int16 v89;
  unsigned int v90;
  unsigned int v91;
  signed int v92;
  unsigned int v93;
  int v94;
  unsigned int v95;
  unsigned int v96;
  unsigned __int16 v97;
  unsigned int v98;
  int v99;
  unsigned int v100;
  int v101;
  int v102;
  int v103;
  uint64_t v104;
  unsigned int v105;
  unsigned int v106;
  int v107;
  unsigned int v108;
  int v109;
  int v110;
  int v111;
  uint64_t v112;
  unsigned int v113;
  __int16 v114;
  uint64_t v115;
  int v116;
  int v117;
  char *v118;
  unsigned int v119;
  __int16 v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unsigned __int16 v125;
  unsigned int v126;
  unint64_t v127;
  BOOL v128;
  __int16 v129;
  __int16 v130;
  unint64_t v131;
  unsigned int v132;
  __int16 v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  int v137;
  int v138;
  int v139;
  int v140;
  int v141;
  uint64_t v142;
  unsigned int v143;
  int v144;
  int v145;
  int v146;
  int v147;
  unsigned int v148;
  __int16 v149;
  unsigned int v150;
  uint64_t v151;
  unsigned int v152;
  const __CFString *v153;
  CFRange v154;
  uint64_t v155;
  int v156;
  UniChar v157;
  unsigned int v158;
  __int16 v159;
  __CFString *v160;
  __CFString *v161;
  UniChar v162;
  __int16 v163;
  unsigned int v164;
  unsigned int v165;
  int v166;
  __int16 v167;
  unsigned int v168;
  unint64_t v169;
  unint64_t v170;
  unsigned int v171;
  __int16 v172;
  int v173;
  __int16 v174;
  unsigned int v175;
  __int16 v177;
  CFMutableStringRef *v178;
  _WORD *v179;
  uint64_t v180;
  UniChar v181;
  UniChar chars;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *a2;
  *a3 = 0;
  if (v4)
  {
    Length = CFStringGetLength(v4);
    Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], Length);
    if (Mutable)
    {
      *(_DWORD *)(v3 + 24) = 0;
      v8 = (_WORD *)(v3 + 24);
      *(_DWORD *)(v3 + 2) = 0;
      *(_DWORD *)(v3 + 8) = 0;
      *(_WORD *)(v3 + 28) = 0;
      v9 = *(const __CFString **)(v3 + 16);
      if (v9)
      {
        v10.length = CFStringGetLength(v9);
        if (v10.length >= 1)
        {
          v10.location = 0;
          CFStringDelete(*(CFMutableStringRef *)(v3 + 16), v10);
        }
      }
      v178 = a3;
      if (Length >= 1)
      {
        v11 = 0;
        v179 = (_WORD *)(v3 + 30);
        while (2)
        {
          v181 = 0;
          CharacterAtIndex = CFStringGetCharacterAtIndex(v4, v11);
          v181 = CharacterAtIndex;
          if (CharacterAtIndex - 12592 > 0x5E)
          {
            if (CharacterAtIndex - 4352 >= 0x5A)
            {
              if (CharacterAtIndex - 4449 >= 0x42)
              {
                if (CharacterAtIndex - 4520 >= 0x52)
                {
                  *(_DWORD *)(v3 + 2) = 0;
                  *(_DWORD *)(v3 + 8) = 0;
                  *(_DWORD *)(v3 + 24) = 0;
                  *(_WORD *)(v3 + 28) = 0;
                  v84 = *(const __CFString **)(v3 + 16);
                  if (v84)
                  {
                    v85.length = CFStringGetLength(v84);
                    if (v85.length >= 1)
                    {
                      v85.location = 0;
                      CFStringDelete(*(CFMutableStringRef *)(v3 + 16), v85);
                    }
                  }
                  CFStringAppendCharacters(Mutable, &v181, 1);
                  goto LABEL_164;
                }
                v15 = 4;
              }
              else
              {
                v15 = 3;
              }
            }
            else
            {
              v15 = 2;
            }
          }
          else
          {
            v14 = CharacterAtIndex <= 0x3186 && CharacterAtIndex - 12623 >= 0x15;
            v15 = !v14;
          }
          v16 = *(_DWORD *)(v3 + 8);
          switch(v16)
          {
            case 0:
              v42 = v15 == 1;
              if (v15 == 1)
                v43 = 0;
              else
                v43 = CharacterAtIndex;
              if (v15 == 1)
                v44 = CharacterAtIndex;
              else
                v44 = 0;
              if (v42)
                v45 = 1;
              else
                v45 = 2;
              if ((unsigned __int16)(v43 - 12593) <= 0x5Du)
                LOWORD(v43) = word_19C4710A2[v43 - 12593];
              *v8 = v43;
              if (v44 - 12593 <= 0x5D)
                LOWORD(v44) = word_19C470D7E[v44 - 12593];
              v27 = 0;
              *(_WORD *)(v3 + 26) = v44;
              *(_WORD *)(v3 + 28) = 0;
              *(_DWORD *)(v3 + 8) = v45;
              v180 = 0;
              *(_DWORD *)(v3 + 2) = 1;
              v29 = *(const __CFString **)(v3 + 16);
              if (v29)
                goto LABEL_39;
              goto LABEL_41;
            case 1:
              if (v15 != 1)
              {
                v90 = CharacterAtIndex - 12593;
                goto LABEL_281;
              }
              v46 = *(unsigned __int16 *)(v3 + 26);
              if ((v46 - 12593) <= 0x5D)
                LODWORD(v46) = word_19C470D7E[v46 - 12593];
              v47 = CharacterAtIndex;
              if (CharacterAtIndex - 12593 <= 0x5D)
                v47 = word_19C470D7E[CharacterAtIndex - 12593];
              v48 = 0;
              v49 = v47 | ((_DWORD)v46 << 16);
              v50 = 25;
              while (1)
              {
                v51 = v48 + v50;
                if (v48 + v50 < 0 != __OFADD__(v48, v50))
                  ++v51;
                v52 = v51 >> 1;
                v53 = (uint64_t)v51 >> 1;
                v54 = word_19C470FC4[3 * v52 + 1] | (word_19C470FC4[3 * v52] << 16);
                if (v49 == v54)
                  break;
                if (v49 <= v54)
                  v50 = v53 - 1;
                else
                  v48 = v53 + 1;
                if (v48 > v50)
                  goto LABEL_236;
              }
              v115 = word_19C470FC4[3 * (int)v53 + 2];
              if (word_19C470FC4[3 * (int)v53 + 2])
              {
                v116 = word_19C470FC4[3 * (int)v53 + 2];
                if ((v115 - 12593) <= 0x5D)
                  v116 = word_19C470D7E[v115 - 12593];
                if (v116)
                {
                  if ((v116 - 4449) > 0x14)
                  {
                    if (v116 == 4514)
                      v117 = 4514;
                    else
                      v117 = 0;
                    if (v116 == 4510)
                    {
LABEL_442:
                      *(_DWORD *)(v3 + 8) = 1;
                      *(_WORD *)(v3 + 24) = 0;
                      if ((v115 - 12593) <= 0x5D)
                        LOWORD(v115) = word_19C470D7E[v115 - 12593];
                      v27 = 0;
                      *(_WORD *)(v3 + 26) = v115;
                      *(_WORD *)(v3 + 28) = 0;
                      v180 = 0;
                      v78 = 1;
                      goto LABEL_151;
                    }
                  }
                  else
                  {
                    v117 = (unsigned __int16)word_19C470E60[v116 - 4449];
                  }
                  if (v117)
                    goto LABEL_442;
                }
                if ((unsigned __int16)(CharacterAtIndex - 12593) <= 0x5Du)
                  LOWORD(CharacterAtIndex) = word_19C470D7E[CharacterAtIndex - 12593];
                v78 = 0;
                LOWORD(v171) = 0;
                HIWORD(v171) = CharacterAtIndex;
                v180 = v171;
                v27 = 1;
                *(_DWORD *)(v3 + 8) = 1;
                goto LABEL_151;
              }
LABEL_236:
              if ((unsigned __int16)(CharacterAtIndex - 12593) <= 0x5Du)
                goto LABEL_480;
LABEL_481:
              LOWORD(v175) = 0;
              HIWORD(v175) = CharacterAtIndex;
              v180 = v175;
              v27 = 1;
              *(_DWORD *)(v3 + 8) = 1;
              *(_DWORD *)(v3 + 2) = 1;
              v29 = *(const __CFString **)(v3 + 16);
              if (!v29)
                goto LABEL_41;
              goto LABEL_39;
            case 2:
              v55 = (unsigned __int16)*v8;
              v56 = v55 - 12593;
              if (v15 != 1)
              {
                if (v56 <= 0x5D)
                  LODWORD(v55) = word_19C4710A2[v55 - 12593];
                v91 = CharacterAtIndex;
                if (CharacterAtIndex - 12593 <= 0x5D)
                  v91 = word_19C4710A2[CharacterAtIndex - 12593];
                v92 = 0;
                v93 = v91 | ((_DWORD)v55 << 16);
                v94 = 4;
                while (1)
                {
                  v95 = (v92 + v94) >> 1;
                  v96 = word_19C470FA6[3 * v95 + 1] | (word_19C470FA6[3 * v95] << 16);
                  if (v93 == v96)
                    break;
                  if (v93 <= v96)
                    v94 = v95 - 1;
                  else
                    v92 = v95 + 1;
                  if (v92 > v94)
                    goto LABEL_251;
                }
                v121 = word_19C470FA6[3 * v95 + 2];
                if (!word_19C470FA6[3 * v95 + 2])
                {
LABEL_251:
                  v90 = (unsigned __int16)(CharacterAtIndex - 12593);
                  goto LABEL_281;
                }
                if ((v121 - 12593) > 0x5D)
                {
                  if (v121 - 4352 >= 0x13)
                    goto LABEL_327;
LABEL_326:
                  v27 = 0;
                  *(_WORD *)(v3 + 24) = v121;
                  *(_DWORD *)(v3 + 26) = 0;
                  v180 = 0;
                  v78 = 1;
                }
                else
                {
                  v121 = (unint64_t)&word_19C4710A2[v121];
                  if ((unint64_t)*(unsigned __int16 *)(v121 - 25186) - 4352 < 0x13)
                  {
                    LOWORD(v121) = *(_WORD *)(v121 - 25186);
                    goto LABEL_326;
                  }
LABEL_327:
                  if ((unsigned __int16)(CharacterAtIndex - 12593) <= 0x5Du)
                    LOWORD(CharacterAtIndex) = word_19C4710A2[CharacterAtIndex - 12593];
LABEL_148:
                  v78 = 0;
                  v180 = (unsigned __int16)CharacterAtIndex;
                  v27 = 1;
                }
                v79 = 2;
                goto LABEL_150;
              }
              if (v56 <= 0x5D)
                LODWORD(v55) = word_19C4710A2[v55 - 12593];
              v57 = *(unsigned __int16 *)(v3 + 28);
              *v179 = v55;
              v18 = CharacterAtIndex - 12593;
              v58 = CharacterAtIndex;
              if (CharacterAtIndex - 12593 <= 0x5D)
                v58 = word_19C470D7E[CharacterAtIndex - 12593];
              *(_WORD *)(v3 + 32) = v58;
              if ((v57 - 12593) <= 0x5D)
                LODWORD(v57) = word_19C47115E[v57 - 12593];
              *(_WORD *)(v3 + 34) = v57;
              if ((_DWORD)v55)
              {
                if (v58)
                {
                  v59 = 0;
                  if (v58 != 4510 && v58 != 4514)
                  {
                    v14 = v57 >= 0x11A7;
                    v60 = v57 - 4519;
                    if (!v14)
                      v60 = 0;
                    v59 = 28 * v58 + 588 * v55 + v60 - 18076;
                  }
                }
                else if ((_DWORD)v57 || (v134 = v55 - 4352, v134 > 0x12))
                {
                  v59 = 0;
                }
                else
                {
                  v59 = word_19C470E3A[v134];
                }
              }
              else
              {
                v59 = 0;
                if (v58 && !(_DWORD)v57)
                {
                  if (v58 - 4449 > 0x14)
                  {
                    if (v58 == 4514)
                      v172 = 4514;
                    else
                      v172 = 0;
                    if (v58 == 4510)
                      v59 = 12685;
                    else
                      v59 = v172;
                  }
                  else
                  {
                    v59 = word_19C470E60[v58 - 4449];
                  }
                }
              }
              if (CharacterAtIndex != 12685 && !v59)
                goto LABEL_479;
              if (CharacterAtIndex == 12685)
                v173 = 6;
              else
                v173 = 3;
              *(_DWORD *)(v3 + 8) = v173;
              if (v58 - 12593 <= 0x5D)
                LOWORD(v58) = word_19C470D7E[v58 - 12593];
              v27 = 0;
              *(_WORD *)(v3 + 26) = v58;
              *(_WORD *)(v3 + 28) = 0;
              *(_WORD *)(v3 + 4) = CharacterAtIndex != 12685;
              *(_WORD *)(v3 + 2) = 1;
              goto LABEL_472;
            case 3:
            case 6:
              if (v15 != 1)
              {
                v73 = *(unsigned __int16 *)(v3 + 24);
                if ((unsigned __int16)(v73 - 12593) <= 0x5Du)
                  LODWORD(v73) = word_19C4710A2[v73 - 12593];
                v74 = *(unsigned __int16 *)(v3 + 26);
                if ((v74 - 12593) <= 0x5D)
                  LODWORD(v74) = word_19C470D7E[v74 - 12593];
                v75 = CharacterAtIndex;
                if (CharacterAtIndex - 12593 <= 0x5D)
                {
                  v76 = CharacterAtIndex - 12593;
                  v75 = word_19C47115E[v76];
                  if (!word_19C47115E[v76])
                    goto LABEL_147;
                }
                if (!(_DWORD)v73 || !(_DWORD)v74 || (_DWORD)v74 == 4510 || (_DWORD)v74 == 4514)
                  goto LABEL_145;
                v14 = v75 >= 0x11A7;
                v77 = v75 - 4519;
                if (!v14)
                  v77 = 0;
                if ((unsigned __int16)(28 * v74 + 588 * v73 + v77) == 18076)
                {
LABEL_145:
                  if ((unsigned __int16)(CharacterAtIndex - 12593) > 0x5Du)
                    goto LABEL_148;
                  v76 = CharacterAtIndex - 12593;
LABEL_147:
                  LOWORD(CharacterAtIndex) = word_19C4710A2[v76];
                  goto LABEL_148;
                }
                if ((unsigned __int16)(CharacterAtIndex - 12593) <= 0x5Du)
                  LOWORD(CharacterAtIndex) = word_19C47115E[CharacterAtIndex - 12593];
                v27 = 0;
                *(_WORD *)(v3 + 28) = CharacterAtIndex;
                v180 = 0;
                v78 = 1;
                v79 = 4;
LABEL_150:
                *(_DWORD *)(v3 + 8) = v79;
LABEL_151:
                *(_WORD *)(v3 + 4) = v78;
                *(_WORD *)(v3 + 2) = 1;
                v29 = *(const __CFString **)(v3 + 16);
                if (!v29)
                  goto LABEL_41;
LABEL_39:
                v30.length = CFStringGetLength(v29);
                if (v30.length >= 1)
                {
                  v30.location = 0;
                  CFStringDelete(*(CFMutableStringRef *)(v3 + 16), v30);
                }
                goto LABEL_41;
              }
              v17 = *(unsigned __int16 *)(v3 + 26);
              if ((v17 - 12593) <= 0x5D)
                LODWORD(v17) = word_19C470D7E[v17 - 12593];
              v18 = CharacterAtIndex - 12593;
              v19 = CharacterAtIndex;
              if (CharacterAtIndex - 12593 <= 0x5D)
                v19 = word_19C470D7E[CharacterAtIndex - 12593];
              v20 = 0;
              v21 = v19 | ((_DWORD)v17 << 16);
              v22 = 25;
              while (1)
              {
                v23 = v20 + v22;
                if (v20 + v22 < 0 != __OFADD__(v20, v22))
                  ++v23;
                v24 = v23 >> 1;
                v25 = (uint64_t)v23 >> 1;
                v26 = word_19C470FC4[3 * v24 + 1] | (word_19C470FC4[3 * v24] << 16);
                if (v21 == v26)
                  break;
                if (v21 <= v26)
                  v22 = v25 - 1;
                else
                  v20 = v25 + 1;
                if (v20 > v22)
                  goto LABEL_479;
              }
              v86 = word_19C470FC4[3 * (int)v25 + 2];
              if (!word_19C470FC4[3 * (int)v25 + 2])
              {
LABEL_479:
                if (v18 <= 0x5Du)
LABEL_480:
                  LOWORD(CharacterAtIndex) = word_19C470D7E[CharacterAtIndex - 12593];
                goto LABEL_481;
              }
              v87 = (unsigned __int16)*v8;
              if ((unsigned __int16)(v87 - 12593) <= 0x5Du)
                LODWORD(v87) = word_19C4710A2[v87 - 12593];
              *v179 = v87;
              if ((v86 - 12593) <= 0x5D)
                LODWORD(v86) = word_19C470D7E[v86 - 12593];
              *(_WORD *)(v3 + 32) = v86;
              *(_WORD *)(v3 + 34) = 0;
              if ((_DWORD)v87)
              {
                if ((_DWORD)v86)
                {
                  if ((_DWORD)v86 == 4510 || (_DWORD)v86 == 4514)
                    goto LABEL_474;
                  v89 = 28 * v86 + 588 * v87 - 18076;
                }
                else
                {
                  v170 = v87 - 4352;
                  if (v170 > 0x12)
                    goto LABEL_474;
                  v89 = word_19C470E3A[v170];
                }
              }
              else
              {
                if (!(_DWORD)v86)
                  goto LABEL_474;
                if ((v86 - 4449) > 0x14)
                {
                  if ((_DWORD)v86 == 4514)
                    v89 = 4514;
                  else
                    v89 = 0;
                  if ((_DWORD)v86 == 4510)
                  {
LABEL_468:
                    v27 = 0;
                    if (v16 == 6)
                      v174 = 2;
                    else
                      v174 = 1;
                    *(_WORD *)(v3 + 4) = v174;
                    *(_WORD *)(v3 + 2) = 1;
                    *(_DWORD *)(v3 + 8) = 3;
                    *(_DWORD *)v8 = *(_DWORD *)v179;
                    *(_WORD *)(v3 + 28) = *(_WORD *)(v3 + 34);
LABEL_472:
                    v180 = 0;
                    v29 = *(const __CFString **)(v3 + 16);
                    if (v29)
                      goto LABEL_39;
                    goto LABEL_41;
                  }
                }
                else
                {
                  v89 = word_19C470E60[(v86 - 4449)];
                }
              }
              if (v89)
                goto LABEL_468;
LABEL_474:
              if (CharacterAtIndex != 12685)
                goto LABEL_479;
              *(_DWORD *)(v3 + 2) = 65537;
              if ((v86 - 12593) <= 0x5D)
                LOWORD(v86) = word_19C470D7E[v86 - 12593];
              v27 = 0;
              *(_WORD *)(v3 + 26) = v86;
              *(_WORD *)(v3 + 28) = 0;
              v180 = 0;
              *(_DWORD *)(v3 + 8) = 6;
              v29 = *(const __CFString **)(v3 + 16);
              if (v29)
                goto LABEL_39;
LABEL_41:
              if (v27)
              {
                if ((_WORD)v180)
                {
                  if (WORD1(v180))
                  {
                    if (WORD1(v180) != 4510 && WORD1(v180) != 4514)
                    {
                      v32 = WORD2(v180) - 4519;
                      if (WORD2(v180) < 0x11A7u)
                        v32 = 0;
                      v33 = 28 * WORD1(v180) + 588 * v180 + v32 - 18076;
                      goto LABEL_157;
                    }
LABEL_156:
                    v33 = 0;
                  }
                  else
                  {
                    if (WORD2(v180))
                      goto LABEL_156;
                    v80 = (unsigned __int16)v180 - 4352;
                    if (v80 > 0x12)
                      goto LABEL_156;
                    v33 = word_19C470E3A[v80];
                  }
                }
                else
                {
                  if (WORD1(v180))
                    v35 = WORD2(v180) == 0;
                  else
                    v35 = 0;
                  if (!v35)
                    goto LABEL_156;
                  v36 = WORD1(v180) - 4449;
                  if (v36 > 0x14)
                  {
                    if (WORD1(v180) == 4514)
                      v114 = 4514;
                    else
                      v114 = 0;
                    if (WORD1(v180) == 4510)
                      v33 = 12685;
                    else
                      v33 = v114;
                  }
                  else
                  {
                    v33 = word_19C470E60[v36];
                  }
                }
LABEL_157:
                chars = v33;
                v81 = *(__CFString **)(v3 + 16);
                if (v81)
LABEL_158:
                  CFStringAppendCharacters(v81, &chars, 1);
LABEL_159:
                *(_WORD *)(v3 + 28) = WORD2(v180);
                *(_DWORD *)v8 = v180;
                goto LABEL_160;
              }
              if (*(_DWORD *)(v3 + 8) != 6)
              {
                v37 = *(unsigned __int16 *)(v3 + 24);
                v38 = *(unsigned __int16 *)(v3 + 26);
                if (*(_WORD *)(v3 + 24))
                {
                  if (*(_WORD *)(v3 + 26))
                  {
                    v39 = 0;
                    if (v38 != 4510 && v38 != 4514)
                    {
                      v40 = *(unsigned __int16 *)(v3 + 28);
                      v14 = v40 >= 0x11A7;
                      v41 = v40 - 4519;
                      if (!v14)
                        v41 = 0;
                      v39 = 28 * v38 + 588 * v37 + v41 - 18076;
                    }
                    goto LABEL_289;
                  }
                  if (!*(_WORD *)(v3 + 28) && (unint64_t)(v37 - 4352) <= 0x12)
                  {
                    v39 = word_19C470E3A[v37 - 4352];
                    goto LABEL_289;
                  }
                }
                else if (*(_WORD *)(v3 + 26) && !*(_WORD *)(v3 + 28))
                {
                  if ((v38 - 4449) > 0x14)
                  {
                    if (v38 == 4514)
                      v39 = 4514;
                    else
                      v39 = 0;
                    if (v38 == 4510)
                      v39 = 12685;
                  }
                  else
                  {
                    v39 = word_19C470E60[v38 - 4449];
                  }
LABEL_289:
                  chars = v39;
                  v34 = *(__CFString **)(v3 + 16);
                  if (!v34)
                    goto LABEL_160;
LABEL_53:
                  CFStringAppendCharacters(v34, &chars, 1);
                  goto LABEL_160;
                }
                v39 = 0;
                goto LABEL_289;
              }
              chars = *(_WORD *)(v3 + 26);
              v34 = *(__CFString **)(v3 + 16);
              if (v34)
                goto LABEL_53;
LABEL_160:
              v82 = CFStringGetLength(Mutable);
              if (v82)
              {
                v83.length = *(unsigned __int16 *)(v3 + 4);
                if (v82 >= LODWORD(v83.length))
                {
                  v83.location = v82 - v83.length;
                  CFStringDelete(Mutable, v83);
                }
              }
              CFStringAppend(Mutable, *(CFStringRef *)(v3 + 16));
LABEL_164:
              if (++v11 == Length)
                break;
              continue;
            case 4:
              v61 = (char *)*(unsigned __int16 *)(v3 + 28);
              if (v15 == 1)
              {
                if (((_DWORD)v61 - 12592) >= 0x5F)
                {
                  if (((_DWORD)v61 - 4352) >= 0x5A)
                  {
                    if (((_DWORD)v61 - 4520) < 0x52)
                    {
                      v62 = v61 - 4520;
                      if ((unint64_t)(v61 - 4520) <= 0x1A)
                      {
                        v61 = (char *)&unk_19C470EE6;
LABEL_305:
                        LODWORD(v61) = *(unsigned __int16 *)&v61[2 * (_QWORD)v62];
                      }
                    }
                  }
                  else
                  {
                    v62 = v61 - 4352;
                    if ((unint64_t)(v61 - 4352) <= 0x12)
                    {
                      v61 = (char *)&unk_19C470EC0;
                      goto LABEL_305;
                    }
                  }
                }
                if (((_DWORD)v61 - 12593) <= 0x5D)
                  LODWORD(v61) = word_19C4710A2[v61 - 12593];
                v132 = CharacterAtIndex;
                if (CharacterAtIndex - 12593 <= 0x5D)
                  v132 = word_19C470D7E[CharacterAtIndex - 12593];
                if ((_DWORD)v61)
                {
                  if (v132)
                  {
                    if (v132 != 4510 && v132 != 4514)
                    {
                      v133 = 28 * v132 + 588 * (_WORD)v61 - 18076;
                      goto LABEL_415;
                    }
LABEL_417:
                    if (CharacterAtIndex == 12685)
                    {
                      *(_WORD *)(v3 + 28) = 0;
                      if (((_DWORD)v61 - 12593) <= 0x5D)
                        LOWORD(v61) = word_19C4710A2[v61 - 12593];
                      v27 = 0;
                      LOWORD(v13) = (_WORD)v61;
                      WORD1(v13) = 4510;
                      WORD2(v13) = 0;
                      v180 = v13;
                      v28 = 2;
                      v167 = 1;
                      v166 = 6;
                    }
                    else
                    {
                      if ((unsigned __int16)(CharacterAtIndex - 12593) <= 0x5Du)
                        LOWORD(CharacterAtIndex) = word_19C470D7E[CharacterAtIndex - 12593];
                      v167 = 0;
                      LOWORD(v168) = 0;
                      HIWORD(v168) = CharacterAtIndex;
                      v180 = v168;
                      v166 = 1;
                      v27 = 1;
                      v28 = 1;
                    }
LABEL_424:
                    *(_DWORD *)(v3 + 8) = v166;
                    *(_WORD *)(v3 + 4) = v167;
                    *(_WORD *)(v3 + 2) = v28;
                    if (v28 != 2)
                      goto LABEL_37;
                    goto LABEL_374;
                  }
                  v136 = v61 - 4352;
                  if (v136 > 0x12)
                    goto LABEL_417;
                  v133 = word_19C470E3A[v136];
LABEL_415:
                  if (!v133)
                    goto LABEL_417;
                }
                else
                {
                  if (!v132)
                    goto LABEL_417;
                  if (v132 - 4449 <= 0x14)
                  {
                    v133 = word_19C470E60[v132 - 4449];
                    goto LABEL_415;
                  }
                  if (v132 == 4514)
                    v133 = 4514;
                  else
                    v133 = 0;
                  if (v132 != 4510)
                    goto LABEL_415;
                }
                LOWORD(v165) = (_WORD)v61;
                HIWORD(v165) = v132;
                v180 = v165;
                *(_WORD *)(v3 + 28) = 0;
                v28 = 2;
                v27 = 1;
                v166 = 3;
                v167 = 1;
                goto LABEL_424;
              }
              if (((_DWORD)v61 - 12593) <= 0x5D)
                LODWORD(v61) = word_19C47115E[(_QWORD)v61 - 12593];
              v97 = CharacterAtIndex - 12593;
              v98 = CharacterAtIndex;
              if (CharacterAtIndex - 12593 <= 0x5D)
                v98 = word_19C47115E[CharacterAtIndex - 12593];
              v99 = 0;
              v100 = v98 | ((_DWORD)v61 << 16);
              v101 = 10;
              while (1)
              {
                v102 = v99 + v101;
                if (v99 + v101 < 0 != __OFADD__(v99, v101))
                  ++v102;
                v103 = v102 >> 1;
                v104 = (uint64_t)v102 >> 1;
                v105 = word_19C471060[3 * v103 + 1] | (word_19C471060[3 * v103] << 16);
                if (v100 == v105)
                  break;
                if (v100 <= v105)
                  v101 = v104 - 1;
                else
                  v99 = v104 + 1;
                if (v99 > v101)
                  goto LABEL_280;
              }
              v122 = word_19C471060[3 * (int)v104 + 2];
              if (!word_19C471060[3 * (int)v104 + 2])
                goto LABEL_280;
              v123 = *(unsigned __int16 *)(v3 + 24);
              if ((unsigned __int16)(v123 - 12593) <= 0x5Du)
                LODWORD(v123) = word_19C4710A2[v123 - 12593];
              v124 = *(unsigned __int16 *)(v3 + 26);
              if ((v124 - 12593) <= 0x5D)
                LODWORD(v124) = word_19C470D7E[v124 - 12593];
              v125 = v122 - 12593;
              v126 = v122;
              if ((v122 - 12593) <= 0x5D)
                v126 = word_19C47115E[v122 - 12593];
              if ((_DWORD)v123)
              {
                if ((_DWORD)v124)
                  goto LABEL_275;
                goto LABEL_261;
              }
LABEL_321:
              if (!(_DWORD)v124 || v126)
                goto LABEL_507;
              if ((v124 - 4449) > 0x14)
              {
                if ((_DWORD)v124 == 4514)
                  v129 = 4514;
                else
                  v129 = 0;
                if ((_DWORD)v124 == 4510)
                  goto LABEL_504;
              }
              else
              {
                v129 = word_19C470E60[(v124 - 4449)];
              }
              goto LABEL_503;
            case 5:
              v63 = *(unsigned __int16 *)(v3 + 28);
              v64 = v63 - 12593;
              if (v15 != 1)
              {
                if (v64 <= 0x5D)
                  LODWORD(v63) = word_19C47115E[v63 - 12593];
                v97 = CharacterAtIndex - 12593;
                v106 = CharacterAtIndex;
                if (CharacterAtIndex - 12593 <= 0x5D)
                  v106 = word_19C47115E[CharacterAtIndex - 12593];
                v107 = 0;
                v108 = v106 | ((_DWORD)v63 << 16);
                v109 = 10;
                while (1)
                {
                  v110 = v107 + v109;
                  if (v107 + v109 < 0 != __OFADD__(v107, v109))
                    ++v110;
                  v111 = v110 >> 1;
                  v112 = (uint64_t)v110 >> 1;
                  v113 = word_19C471060[3 * v111 + 1] | (word_19C471060[3 * v111] << 16);
                  if (v108 == v113)
                    break;
                  if (v108 <= v113)
                    v109 = v112 - 1;
                  else
                    v107 = v112 + 1;
                  if (v107 > v109)
                    goto LABEL_280;
                }
                v122 = word_19C471060[3 * (int)v112 + 2];
                if (!word_19C471060[3 * (int)v112 + 2])
                {
LABEL_280:
                  v90 = v97;
LABEL_281:
                  if (v90 <= 0x5D)
                    LOWORD(CharacterAtIndex) = word_19C4710A2[CharacterAtIndex - 12593];
                  v180 = (unsigned __int16)CharacterAtIndex;
                  *(_DWORD *)(v3 + 8) = 2;
                  v27 = 1;
                  *(_DWORD *)(v3 + 2) = 1;
                  v29 = *(const __CFString **)(v3 + 16);
                  if (v29)
                    goto LABEL_39;
                  goto LABEL_41;
                }
                v123 = *(unsigned __int16 *)(v3 + 24);
                if ((unsigned __int16)(v123 - 12593) <= 0x5Du)
                  LODWORD(v123) = word_19C4710A2[v123 - 12593];
                v124 = *(unsigned __int16 *)(v3 + 26);
                if ((v124 - 12593) <= 0x5D)
                  LODWORD(v124) = word_19C470D7E[v124 - 12593];
                v125 = v122 - 12593;
                v126 = v122;
                if ((v122 - 12593) <= 0x5D)
                  v126 = word_19C47115E[v122 - 12593];
                if (!(_DWORD)v123)
                  goto LABEL_321;
                if (!(_DWORD)v124)
                {
LABEL_261:
                  v127 = v123 - 4352;
                  if (v126)
                    v128 = 1;
                  else
                    v128 = v127 > 0x12;
                  if (!v128)
                  {
                    v129 = word_19C470E3A[v127];
                    goto LABEL_503;
                  }
                  goto LABEL_507;
                }
LABEL_275:
                if ((_DWORD)v124 == 4510 || (_DWORD)v124 == 4514)
                  goto LABEL_507;
                v14 = v126 >= 0x11A7;
                v130 = v126 - 4519;
                if (!v14)
                  v130 = 0;
                v129 = 28 * v124 + 588 * v123 - 18076 + v130;
LABEL_503:
                if (!v129)
                {
LABEL_507:
                  if (v97 <= 0x5Du)
                    LOWORD(CharacterAtIndex) = word_19C4710A2[CharacterAtIndex - 12593];
                  v78 = 0;
                  v180 = (unsigned __int16)CharacterAtIndex;
                  v79 = 2;
                  v27 = 1;
                  goto LABEL_150;
                }
LABEL_504:
                if (v125 <= 0x5Du)
                  LOWORD(v122) = word_19C47115E[v122 - 12593];
                v27 = 0;
                *(_WORD *)(v3 + 28) = v122;
                v180 = 0;
                v78 = 1;
                v79 = 5;
                goto LABEL_150;
              }
              v65 = *(unsigned __int16 *)(v3 + 28);
              if (v64 <= 0x5D)
                v65 = word_19C47115E[v63 - 12593];
              v66 = 0;
              v67 = 10;
              while (1)
              {
                v68 = v66 + v67;
                v69 = v66 + v67 < 0 != __OFADD__(v66, v67) ? v68 + 1 : v66 + v67;
                v70 = v69 >> 1;
                v71 = (uint64_t)v69 >> 1;
                v72 = word_19C471060[3 * v70 + 2];
                if (v72 == v65)
                  break;
                if (v72 >= v65)
                  v67 = v71 - 1;
                else
                  v66 = v71 + 1;
                if (v66 > v67)
                  goto LABEL_239;
              }
              if ((v68 + 3) < 2)
              {
LABEL_239:
                LODWORD(v118) = 0;
                goto LABEL_240;
              }
              v118 = (char *)word_19C471060[3 * (int)v71 + 1];
              if ((unsigned __int16)((_WORD)v118 - 12592) < 0x5Fu)
                goto LABEL_489;
              if (((_DWORD)v118 - 4352) >= 0x5A)
              {
                v131 = (unint64_t)(v118 - 4520);
                if (((_DWORD)v118 - 4520) >= 0x52 || v131 > 0x1A)
                {
LABEL_489:
                  if (((_DWORD)v118 - 12593) <= 0x5D)
                    LODWORD(v118) = word_19C4710A2[v118 - 12593];
LABEL_240:
                  v119 = CharacterAtIndex;
                  if (CharacterAtIndex - 12593 <= 0x5D)
                    v119 = word_19C470D7E[CharacterAtIndex - 12593];
                  if ((_DWORD)v118)
                  {
                    if (v119)
                    {
                      if (v119 == 4510 || v119 == 4514)
                        goto LABEL_354;
                      v120 = 28 * v119 + 588 * (_WORD)v118 - 18076;
                    }
                    else
                    {
                      v135 = v118 - 4352;
                      if (v135 > 0x12)
                        goto LABEL_354;
                      v120 = word_19C470E3A[v135];
                    }
                  }
                  else
                  {
                    if (!v119)
                      goto LABEL_354;
                    if (v119 - 4449 > 0x14)
                    {
                      if (v119 == 4514)
                        v120 = 4514;
                      else
                        v120 = 0;
                      if (v119 == 4510)
                      {
LABEL_342:
                        *(_DWORD *)(v3 + 8) = 3;
                        if (v64 <= 0x5D)
                          LODWORD(v63) = word_19C47115E[v63 - 12593];
                        v137 = 0;
                        v138 = 10;
                        while (1)
                        {
                          v139 = v137 + v138;
                          v140 = v137 + v138 < 0 != __OFADD__(v137, v138) ? v139 + 1 : v137 + v138;
                          v141 = v140 >> 1;
                          v142 = (uint64_t)v140 >> 1;
                          v143 = word_19C471060[3 * v141 + 2];
                          if (v143 == (_DWORD)v63)
                            goto LABEL_370;
                          if (v143 >= v63)
                            v138 = v142 - 1;
                          else
                            v137 = v142 + 1;
                          if (v137 > v138)
                            goto LABEL_371;
                        }
                      }
                    }
                    else
                    {
                      v120 = word_19C470E60[v119 - 4449];
                    }
                  }
                  if (v120)
                    goto LABEL_342;
LABEL_354:
                  if (CharacterAtIndex != 12685)
                  {
                    if ((unsigned __int16)(CharacterAtIndex - 12593) <= 0x5Du)
                      LOWORD(CharacterAtIndex) = word_19C470D7E[CharacterAtIndex - 12593];
                    v149 = 0;
                    LOWORD(v150) = 0;
                    HIWORD(v150) = CharacterAtIndex;
                    v180 = v150;
                    v28 = 1;
                    *(_DWORD *)(v3 + 8) = 1;
LABEL_373:
                    *(_WORD *)(v3 + 4) = v149;
                    *(_WORD *)(v3 + 2) = v28;
                    v27 = 1;
                    if (v28 == 2)
                    {
LABEL_374:
                      v153 = *(const __CFString **)(v3 + 16);
                      if (v153)
                      {
                        v154.length = CFStringGetLength(v153);
                        if (v154.length >= 1)
                        {
                          v154.location = 0;
                          CFStringDelete(*(CFMutableStringRef *)(v3 + 16), v154);
                        }
                      }
                      v155 = *(unsigned __int16 *)(v3 + 24);
                      v156 = *(unsigned __int16 *)(v3 + 26);
                      if (*(_WORD *)(v3 + 24))
                      {
                        if (*(_WORD *)(v3 + 26))
                        {
                          v157 = 0;
                          if (v156 != 4510 && v156 != 4514)
                          {
                            v158 = *(unsigned __int16 *)(v3 + 28);
                            v14 = v158 >= 0x11A7;
                            v159 = v158 - 4519;
                            if (!v14)
                              v159 = 0;
                            v157 = 28 * v156 + 588 * v155 + v159 - 18076;
                          }
                          goto LABEL_392;
                        }
                        if (!*(_WORD *)(v3 + 28) && (unint64_t)(v155 - 4352) <= 0x12)
                        {
                          v157 = word_19C470E3A[v155 - 4352];
                          goto LABEL_392;
                        }
                      }
                      else if (*(_WORD *)(v3 + 26) && !*(_WORD *)(v3 + 28))
                      {
                        if ((v156 - 4449) > 0x14)
                        {
                          if (v156 == 4514)
                            v157 = 4514;
                          else
                            v157 = 0;
                          if (v156 == 4510)
                            v157 = 12685;
                        }
                        else
                        {
                          v157 = word_19C470E60[v156 - 4449];
                        }
LABEL_392:
                        chars = v157;
                        v160 = *(__CFString **)(v3 + 16);
                        if (v160)
                          CFStringAppendCharacters(v160, &chars, 1);
                        if (*(_DWORD *)(v3 + 8) == 6)
                        {
                          chars = v180;
                          v161 = *(__CFString **)(v3 + 16);
                          if (!v161)
                            goto LABEL_159;
                          CFStringAppendCharacters(v161, &chars, 1);
                          v81 = *(__CFString **)(v3 + 16);
                          chars = WORD1(v180);
                          if (!v81)
                            goto LABEL_159;
                        }
                        else
                        {
                          if ((_WORD)v180)
                          {
                            if (WORD1(v180))
                            {
                              v162 = 0;
                              if (WORD1(v180) != 4510 && WORD1(v180) != 4514)
                              {
                                v163 = WORD2(v180) - 4519;
                                if (WORD2(v180) < 0x11A7u)
                                  v163 = 0;
                                v162 = 28 * WORD1(v180) + 588 * v180 + v163 - 18076;
                              }
                            }
                            else if (WORD2(v180) || (v169 = (unsigned __int16)v180 - 4352, v169 > 0x12))
                            {
                              v162 = 0;
                            }
                            else
                            {
                              v162 = word_19C470E3A[v169];
                            }
                          }
                          else
                          {
                            v162 = 0;
                            if (WORD1(v180) && !WORD2(v180))
                            {
                              v164 = WORD1(v180) - 4449;
                              if (v164 > 0x14)
                              {
                                if (WORD1(v180) == 4514)
                                  v177 = 4514;
                                else
                                  v177 = 0;
                                if (WORD1(v180) == 4510)
                                  v162 = 12685;
                                else
                                  v162 = v177;
                              }
                              else
                              {
                                v162 = word_19C470E60[v164];
                              }
                            }
                          }
                          chars = v162;
                          v81 = *(__CFString **)(v3 + 16);
                          if (!v81)
                            goto LABEL_159;
                        }
                        goto LABEL_158;
                      }
                      v157 = 0;
                      goto LABEL_392;
                    }
LABEL_37:
                    if (v28 != 1)
                      goto LABEL_160;
                    v29 = *(const __CFString **)(v3 + 16);
                    if (!v29)
                      goto LABEL_41;
                    goto LABEL_39;
                  }
                  *(_DWORD *)(v3 + 8) = 6;
                  if (v64 <= 0x5D)
                    LODWORD(v63) = word_19C47115E[v63 - 12593];
                  v144 = 0;
                  v145 = 10;
                  while (1)
                  {
                    v139 = v144 + v145;
                    v146 = v144 + v145 < 0 != __OFADD__(v144, v145) ? v139 + 1 : v144 + v145;
                    v147 = v146 >> 1;
                    v142 = (uint64_t)v146 >> 1;
                    v148 = word_19C471060[3 * v147 + 2];
                    if (v148 == (_DWORD)v63)
                      break;
                    if (v148 >= v63)
                      v145 = v142 - 1;
                    else
                      v144 = v142 + 1;
                    if (v144 > v145)
                      goto LABEL_371;
                  }
LABEL_370:
                  if ((v139 + 3) >= 2)
                  {
                    v151 = word_19C471060[3 * (int)v142];
                    if ((v151 - 12593) <= 0x5D)
                      LOWORD(v151) = word_19C47115E[v151 - 12593];
                  }
                  else
                  {
LABEL_371:
                    LOWORD(v151) = 0;
                  }
                  *(_WORD *)(v3 + 28) = v151;
                  LOWORD(v152) = (_WORD)v118;
                  HIWORD(v152) = v119;
                  v180 = v152;
                  v28 = 2;
                  v149 = 1;
                  goto LABEL_373;
                }
                v118 = (char *)&unk_19C470EE6;
              }
              else
              {
                v131 = (unint64_t)(v118 - 4352);
                if ((unint64_t)(v118 - 4352) > 0x12)
                  goto LABEL_489;
                v118 = (char *)&unk_19C470EC0;
              }
              LODWORD(v118) = *(unsigned __int16 *)&v118[2 * v131];
              goto LABEL_489;
            default:
              v27 = 0;
              v180 = 0;
              v28 = *(unsigned __int16 *)(v3 + 2);
              if (v28 != 2)
                goto LABEL_37;
              goto LABEL_374;
          }
          break;
        }
      }
      *v178 = Mutable;
    }
  }
}

void sub_19C3ECB24(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = 0;
  _Unwind_Resume(a1);
}

uint64_t sub_19C3ECB38(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN2LM22LexiconStringConverter21hangulStringConverterEvE3$_0"
    || ((v3 & (unint64_t)"ZN2LM22LexiconStringConverter21hangulStringConverterEvE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN2LM22LexiconStringConverter21hangulStringConverterEvE3$_0")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN2LM22LexiconStringConverter21hangulStringConverterEvE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *sub_19C3ECB8C()
{
  return &unk_1E3D33520;
}

void sub_19C3ECB98(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D39BA8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_19C3ECBA8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D39BA8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AD355CLL);
}

void sub_19C3ECBD8(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 40);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 40) = 0;
  }
}

uint64_t sub_19C3ECC0C(uint64_t a1, CFDictionaryRef theDict)
{
  uint64_t v3;
  void **v5;
  void **v6;
  const __CFString *Value;
  const __CFString *v8;
  CFTypeID v9;
  const __CFString *v10;
  const __CFString *v11;
  CFTypeID v12;
  const __CFString *v13;
  const __CFString *v14;
  CFTypeID v15;
  const __CFString *v16;
  const __CFString *v17;
  CFTypeID v18;
  __int128 v20;
  uint64_t v21;

  *(_OWORD *)(a1 + 48) = 0u;
  v3 = a1 + 48;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  if (theDict)
  {
    v5 = (void **)(a1 + 24);
    v6 = (void **)(a1 + 72);
    Value = (const __CFString *)CFDictionaryGetValue(theDict, (const void *)kLMRecordGivenNameKey);
    v8 = Value;
    if (Value)
    {
      v9 = CFGetTypeID(Value);
      if (v9 == CFStringGetTypeID())
      {
        sub_19C29CEF8(v8, &v20);
        if (*(char *)(a1 + 23) < 0)
          operator delete(*(void **)a1);
        *(_OWORD *)a1 = v20;
        *(_QWORD *)(a1 + 16) = v21;
      }
    }
    v10 = (const __CFString *)CFDictionaryGetValue(theDict, (const void *)kLMRecordFamilyNameKey);
    v11 = v10;
    if (v10)
    {
      v12 = CFGetTypeID(v10);
      if (v12 == CFStringGetTypeID())
      {
        sub_19C29CEF8(v11, &v20);
        if (*(char *)(a1 + 71) < 0)
          operator delete(*(void **)v3);
        *(_OWORD *)v3 = v20;
        *(_QWORD *)(v3 + 16) = v21;
      }
    }
    v13 = (const __CFString *)CFDictionaryGetValue(theDict, (const void *)kLMRecordNicknameKey);
    v14 = v13;
    if (v13)
    {
      v15 = CFGetTypeID(v13);
      if (v15 == CFStringGetTypeID())
      {
        sub_19C29CEF8(v14, &v20);
        if (*(char *)(a1 + 95) < 0)
          operator delete(*v6);
        *(_OWORD *)v6 = v20;
        *(_QWORD *)(a1 + 88) = v21;
      }
    }
    v16 = (const __CFString *)CFDictionaryGetValue(theDict, (const void *)kLMRecordHashKey);
    v17 = v16;
    if (v16)
    {
      v18 = CFGetTypeID(v16);
      if (v18 == CFStringGetTypeID())
      {
        sub_19C29CEF8(v17, &v20);
        if (*(char *)(a1 + 47) < 0)
          operator delete(*v5);
        *(_OWORD *)v5 = v20;
        *(_QWORD *)(a1 + 40) = v21;
      }
    }
  }
  return a1;
}

void sub_19C3ECDE4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void **v4;

  if (*(char *)(v1 + 95) < 0)
  {
    operator delete(*v4);
    if ((*(char *)(v1 + 71) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v1 + 47) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(char *)(v1 + 71) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v3);
  if ((*(char *)(v1 + 47) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(v1 + 23) & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_9;
  }
LABEL_8:
  operator delete(*v2);
  if ((*(char *)(v1 + 23) & 0x80000000) == 0)
LABEL_5:
    _Unwind_Resume(exception_object);
LABEL_9:
  operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C3ECE58(uint64_t a1, unsigned int a2, uint64_t a3, _DWORD *a4, uint64_t a5)
{
  const void *v10;
  uint64_t v11;
  const void *v12;
  uint64_t result;

  v10 = *(const void **)a3;
  v11 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
  v12 = *(const void **)(a1 + 104);
  if (v11 == *(_QWORD *)(a1 + 112) - (_QWORD)v12
    && !memcmp(*(const void **)a3, v12, *(_QWORD *)(a3 + 8) - *(_QWORD *)a3))
  {
LABEL_6:
    _H0 = *(_WORD *)(*(_QWORD *)(a1 + 16) + 2 * a2);
    __asm { FCVT            S0, H0 }
    goto LABEL_7;
  }
  if (!(*(unsigned int (**)(_QWORD, const void *, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), v10, v11 >> 2))
  {
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 120))(a1, a3, a5);
    if (!(_DWORD)result)
      return result;
    goto LABEL_6;
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 72))(*(_QWORD *)(a1 + 8));
LABEL_7:
  *a4 = _S0;
  return 1;
}

uint64_t sub_19C3ECF34(uint64_t a1, unsigned int **a2, uint64_t a3, float *a4, uint64_t a5)
{
  _BYTE *v8;
  _BYTE *v9;
  int64_t v10;
  char *v11;
  char *v12;
  unsigned int *v13;
  unsigned int *v14;
  float v15;
  char *v16;
  uint64_t v17;
  float v18;
  float v19;
  char *v20;
  char *v21;
  int64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  __int128 v34;
  int v35;
  float v36;
  uint64_t v37;
  char *v38;
  float *v40;
  float v42;
  void *__p;
  char *v44;
  char *v45;

  v9 = *(_BYTE **)a3;
  v8 = *(_BYTE **)(a3 + 8);
  v44 = 0;
  v45 = 0;
  __p = 0;
  v10 = v8 - v9;
  if (v8 != v9)
  {
    if (v10 < 0)
      sub_19C2A18E8();
    v11 = (char *)operator new(v8 - v9);
    v12 = &v11[4 * (v10 >> 2)];
    __p = v11;
    v45 = v12;
    memmove(v11, v9, v10);
    v44 = v12;
  }
  v40 = a4;
  v13 = *a2;
  v14 = a2[1];
  v15 = 0.0;
  if (*a2 == v14)
  {
LABEL_33:
    v36 = __exp10(v15);
LABEL_34:
    *v40 = v36;
    v37 = 1;
    v38 = (char *)__p;
    if (__p)
    {
LABEL_35:
      v44 = v38;
      operator delete(v38);
    }
  }
  else
  {
    while (1)
    {
      v17 = *v13;
      v42 = 1.0;
      if (((*(uint64_t (**)(uint64_t, uint64_t, void **, float *, uint64_t))(*(_QWORD *)a1 + 16))(a1, v17, &__p, &v42, a5) & 1) == 0)break;
      v18 = v42;
      v19 = log10f(v42);
      if (v18 <= 0.0)
        v19 = -10.0;
      v15 = v19 + v15;
      if (v15 >= -10.0)
      {
        v20 = v44;
        if (v44 < v45)
        {
          *(_DWORD *)v44 = v17;
          v16 = v20 + 4;
        }
        else
        {
          v21 = (char *)__p;
          v22 = v44 - (_BYTE *)__p;
          v23 = (v44 - (_BYTE *)__p) >> 2;
          v24 = v23 + 1;
          if ((unint64_t)(v23 + 1) >> 62)
            sub_19C2A18E8();
          v25 = v45 - (_BYTE *)__p;
          if ((v45 - (_BYTE *)__p) >> 1 > v24)
            v24 = v25 >> 1;
          v26 = (unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v24;
          if (v26)
          {
            if (v26 >> 62)
              sub_19C2A143C();
            v27 = (char *)operator new(4 * v26);
          }
          else
          {
            v27 = 0;
          }
          v28 = &v27[4 * v23];
          *(_DWORD *)v28 = v17;
          v16 = v28 + 4;
          if (v20 != v21)
          {
            v29 = v20 - 4 - v21;
            if (v29 < 0x2C)
              goto LABEL_44;
            if ((unint64_t)(v20 - &v27[v22]) < 0x20)
              goto LABEL_44;
            v30 = (v29 >> 2) + 1;
            v31 = &v27[4 * v23 - 16];
            v32 = v20 - 16;
            v33 = v30 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v34 = *(_OWORD *)v32;
              *((_OWORD *)v31 - 1) = *((_OWORD *)v32 - 1);
              *(_OWORD *)v31 = v34;
              v31 -= 32;
              v32 -= 32;
              v33 -= 8;
            }
            while (v33);
            v28 -= 4 * (v30 & 0x7FFFFFFFFFFFFFF8);
            v20 -= 4 * (v30 & 0x7FFFFFFFFFFFFFF8);
            if (v30 != (v30 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_44:
              do
              {
                v35 = *((_DWORD *)v20 - 1);
                v20 -= 4;
                *((_DWORD *)v28 - 1) = v35;
                v28 -= 4;
              }
              while (v20 != v21);
            }
          }
          __p = v28;
          v44 = v16;
          v45 = &v27[4 * v26];
          if (v21)
            operator delete(v21);
        }
        v44 = v16;
        if (++v13 != v14)
          continue;
      }
      v36 = 0.0;
      if (v15 <= -10.0)
        goto LABEL_34;
      goto LABEL_33;
    }
    v37 = 0;
    v38 = (char *)__p;
    if (__p)
      goto LABEL_35;
  }
  return v37;
}

void sub_19C3ED1D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C3ED1FC(uint64_t a1, uint64_t *a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t *v10;
  _BYTE *v11;
  _BYTE *v12;
  int64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  int *v19;
  int *v20;
  int64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _BYTE *v26;
  char *v27;
  int *v28;
  int64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  _BYTE *v34;
  int *v35;
  unint64_t v36;
  int *v37;
  int v38;
  char *v39;
  unint64_t v40;
  uint64_t v41;
  _OWORD *v42;
  int *v43;
  uint64_t v44;
  __int128 v45;
  int v46;
  _QWORD *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  unint64_t v54;
  int64_t v55;
  int64_t v56;
  char *v57;
  unint64_t v58;
  uint64_t v59;
  BOOL v60;
  unint64_t v61;
  int64_t v62;
  char *v63;
  _BYTE *v64;
  _BYTE *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  int64_t v69;
  size_t v70;
  int64_t v71;
  char *v72;
  BOOL v73;
  char *v74;
  size_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  _OWORD *v83;
  int *v84;
  uint64_t v85;
  __int128 v86;
  char *v87;
  char *v88;
  char *v89;
  unint64_t v90;
  uint64_t v91;
  __int128 *v92;
  _OWORD *v93;
  uint64_t v94;
  __int128 v95;
  int v96;
  char *v97;
  unint64_t v98;
  __int128 *v99;
  _OWORD *v100;
  uint64_t v101;
  __int128 v102;
  int v103;
  size_t v104;
  uint64_t v105;
  uint64_t v106;
  _OWORD *v107;
  __int128 *v108;
  uint64_t v109;
  __int128 v110;
  int v111;
  char *v112;
  _QWORD *v113;
  void *v114;
  int64_t v115;
  char *v116;
  char *v117;
  char *v118;
  uint64_t v121;
  char *v123;
  unint64_t v124;
  char *v125;
  unint64_t v128;
  int v130;
  void *__p;
  char *v132;
  char *v133;
  void *v134;
  char *v135;
  unint64_t v136;

  v6 = *a2;
  v7 = a2[1];
  if (v7 - *a2 != a3[1] - *a3)
    __assert_rtn("conditionalProbability", "BaseLanguageModel.cpp", 138, "tokens.size() == tokensMetadata.size()");
  if (v7 != v6)
  {
    v8 = a3;
    v9 = 0;
    v121 = *a6;
    while (1)
    {
      v10 = (uint64_t *)(v6 + 24 * v9);
      if (0xAAAAAAAAAAAAAAABLL * ((v10[1] - *v10) >> 3) != (uint64_t)(*(_QWORD *)(*v8 + 24 * v9 + 8)
                                                                    - *(_QWORD *)(*v8 + 24 * v9)) >> 1)
        __assert_rtn("conditionalProbability", "BaseLanguageModel.cpp", 140, "tokens[candidateTokens].size() == tokensMetadata[candidateTokens].size()");
      v134 = 0;
      v135 = 0;
      v136 = 0;
      v12 = *(_BYTE **)a4;
      v11 = *(_BYTE **)(a4 + 8);
      v132 = 0;
      v133 = 0;
      __p = 0;
      v13 = v11 - v12;
      if (v11 != v12)
      {
        if (v13 < 0)
          sub_19C2A18E8();
        __p = operator new(v11 - v12);
        v132 = (char *)__p;
        v14 = (char *)__p + 4 * (v13 >> 2);
        v133 = v14;
        memmove(__p, v12, v13);
        v132 = v14;
      }
      *a6 = v121;
      v15 = *v10;
      v128 = v9;
      if (v10[1] != *v10)
        break;
LABEL_115:
      v113 = *(_QWORD **)(a5 + 8);
      if ((unint64_t)v113 >= *(_QWORD *)(a5 + 16))
      {
        v118 = sub_19C34E0E8((char **)a5, v134, (uint64_t)v135);
      }
      else
      {
        *v113 = 0;
        v113[1] = 0;
        v113[2] = 0;
        v114 = v134;
        v115 = v135 - (_BYTE *)v134;
        if (v135 != v134)
        {
          if (v115 < 0)
            sub_19C2A18E8();
          v116 = (char *)operator new(v135 - (_BYTE *)v134);
          *v113 = v116;
          v113[1] = v116;
          v117 = &v116[4 * (v115 >> 2)];
          v113[2] = v117;
          memcpy(v116, v114, v115);
          v113[1] = v117;
        }
        v118 = (char *)(v113 + 3);
        *(_QWORD *)(a5 + 8) = v113 + 3;
        v9 = v128;
      }
      *(_QWORD *)(a5 + 8) = v118;
      if (__p)
      {
        v132 = (char *)__p;
        operator delete(__p);
      }
      if (v134)
      {
        v135 = (char *)v134;
        operator delete(v134);
      }
      ++v9;
      v6 = *a2;
      if (v9 >= 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3))
        return 1;
    }
    v16 = 0;
    while (1)
    {
      v130 = 1065353216;
      if (!*(_BYTE *)(*(_QWORD *)(*v8 + 24 * v9) + 2 * v16))
        break;
      v17 = (*(uint64_t (**)(uint64_t, unint64_t, void **, int *, uint64_t *))(*(_QWORD *)a1 + 24))(a1, v15 + 24 * v16, &__p, &v130, a6);
      v19 = (int *)v135;
      v18 = v136;
      if ((v17 & 1) != 0)
      {
        v9 = v128;
        if ((unint64_t)v135 < v136)
          goto LABEL_25;
        goto LABEL_15;
      }
      if ((unint64_t)v135 >= v136)
      {
        v28 = (int *)v134;
        v29 = v135 - (_BYTE *)v134;
        v30 = (v135 - (_BYTE *)v134) >> 2;
        v31 = v30 + 1;
        if ((unint64_t)(v30 + 1) >> 62)
          sub_19C2A18E8();
        v32 = v136 - (_QWORD)v134;
        if ((uint64_t)(v136 - (_QWORD)v134) >> 1 > v31)
          v31 = v32 >> 1;
        if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFFCLL)
          v33 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v33 = v31;
        if (v33)
        {
          if (v33 >> 62)
            sub_19C2A143C();
          v34 = operator new(4 * v33);
        }
        else
        {
          v34 = 0;
        }
        v39 = &v34[4 * v30];
        *(_DWORD *)v39 = 0;
        v27 = v39 + 4;
        if (v19 != v28)
        {
          v40 = (char *)(v19 - 1) - (char *)v28;
          if (v40 < 0x2C)
            goto LABEL_138;
          if ((unint64_t)((char *)v19 - &v34[v29]) < 0x20)
            goto LABEL_138;
          v41 = (v40 >> 2) + 1;
          v42 = &v34[4 * v30 - 16];
          v43 = v19 - 4;
          v44 = v41 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v45 = *(_OWORD *)v43;
            *(v42 - 1) = *((_OWORD *)v43 - 1);
            *v42 = v45;
            v42 -= 2;
            v43 -= 8;
            v44 -= 8;
          }
          while (v44);
          v39 -= 4 * (v41 & 0x7FFFFFFFFFFFFFF8);
          v19 -= v41 & 0x7FFFFFFFFFFFFFF8;
          if (v41 != (v41 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_138:
            do
            {
              v46 = *--v19;
              *((_DWORD *)v39 - 1) = v46;
              v39 -= 4;
            }
            while (v19 != v28);
          }
        }
        v134 = v39;
        v135 = v27;
        v136 = (unint64_t)&v34[4 * v33];
        if (v28)
          operator delete(v28);
      }
      else
      {
        *(_DWORD *)v135 = 0;
        v27 = (char *)(v19 + 1);
      }
      v9 = v128;
LABEL_58:
      v135 = v27;
      v47 = v8;
      if (!*(_BYTE *)(*(_QWORD *)(*v8 + 24 * v9) + 2 * v16 + 1))
      {
        v48 = *(_QWORD *)(*a2 + 24 * v9) + 24 * v16;
        v50 = *(char **)v48;
        v49 = *(char **)(v48 + 8);
        v51 = v49 - v50;
        if (v49 - v50 >= 1)
        {
          v52 = v51 >> 2;
          v54 = (unint64_t)__p;
          v53 = v132;
          v55 = v132 - (_BYTE *)__p;
          v56 = (v132 - (_BYTE *)__p) >> 2;
          v57 = (char *)__p + ((v132 - (_BYTE *)__p) & 0xFFFFFFFFFFFFFFFCLL);
          if (v51 >> 2 <= (v133 - v132) >> 2)
          {
            v66 = v132 - v57;
            v67 = (v132 - v57) >> 2;
            if (v67 >= v52)
            {
              v68 = &v50[4 * v52];
              v72 = v132;
              v9 = v128;
            }
            else
            {
              v68 = &v50[4 * v67];
              v69 = v49 - v68;
              if (v49 != v68)
              {
                v123 = &v50[4 * v67];
                v125 = (char *)__p + ((v132 - (_BYTE *)__p) & 0xFFFFFFFFFFFFFFFCLL);
                v70 = v49 - v68;
                v71 = (v132 - (_BYTE *)__p) >> 2;
                memmove(v132, v123, v70);
                v56 = v71;
                v68 = v123;
                v57 = v125;
              }
              v72 = &v53[v69];
              v132 = &v53[v69];
              v73 = v66 < 1;
              v9 = v128;
              if (v73)
                goto LABEL_11;
            }
            v74 = &v57[4 * v52];
            v75 = v72 - v74;
            v76 = (v72 - v74) >> 2;
            v77 = &v72[-4 * v52];
            v78 = v72;
            if (v77 < v53)
            {
              v79 = (v55 & 0xFFFFFFFFFFFFFFFCLL) + v75;
              v80 = v54 + v79 + 4;
              if ((unint64_t)v53 > v80)
                v80 = (unint64_t)v53;
              v81 = v80 + ~v54 - v79;
              if (v81 <= 0x2B)
              {
                v78 = v72;
                goto LABEL_110;
              }
              v78 = v72;
              if ((unint64_t)&v74[-(v55 & 0xFFFFFFFFFFFFFFFCLL) - v54] < 0x20)
                goto LABEL_139;
              v105 = (v81 >> 2) + 1;
              v106 = 4 * (v105 & 0x7FFFFFFFFFFFFFF8);
              v77 += v106;
              v107 = v72 + 16;
              v108 = (__int128 *)(v54 + 4 * v76 + 4 * v56 + 16);
              v109 = v105 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v110 = *v108;
                *(v107 - 1) = *(v108 - 1);
                *v107 = v110;
                v107 += 2;
                v108 += 2;
                v109 -= 8;
              }
              while (v109);
              v78 = &v72[v106];
              if (v105 != (v105 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_139:
                do
                {
LABEL_110:
                  v111 = *(_DWORD *)v77;
                  v77 += 4;
                  *(_DWORD *)v78 = v111;
                  v78 += 4;
                }
                while (v77 < v53);
              }
            }
            v132 = v78;
            if (v72 != v74)
            {
              v112 = v57;
              memmove(&v72[-4 * v76], v57, v75);
              v57 = v112;
            }
            if (v68 != v50)
              memmove(v57, v50, v68 - v50);
            goto LABEL_11;
          }
          v58 = v56 + v52;
          if ((unint64_t)(v56 + v52) >> 62)
            sub_19C2A18E8();
          v59 = v133 - (_BYTE *)__p;
          if ((v133 - (_BYTE *)__p) >> 1 > v58)
            v58 = v59 >> 1;
          v60 = (unint64_t)v59 >= 0x7FFFFFFFFFFFFFFCLL;
          v61 = 0x3FFFFFFFFFFFFFFFLL;
          if (!v60)
            v61 = v58;
          v124 = v61;
          if (v61)
          {
            if (v61 >> 62)
              sub_19C2A143C();
            v62 = (v132 - (_BYTE *)__p) >> 2;
            v63 = (char *)__p + ((v132 - (_BYTE *)__p) & 0xFFFFFFFFFFFFFFFCLL);
            v64 = operator new(4 * v61);
            v57 = v63;
            v56 = v62;
            v65 = v64;
          }
          else
          {
            v65 = 0;
          }
          v87 = &v65[4 * v56];
          v88 = &v87[4 * v52];
          if ((unint64_t)(v51 - 4) >= 0x1C)
          {
            v89 = &v65[4 * v56];
            if ((unint64_t)(&v65[v55 & 0xFFFFFFFFFFFFFFFCLL] - v50) < 0x20)
              goto LABEL_93;
            v90 = ((unint64_t)(v51 - 4) >> 2) + 1;
            v91 = 4 * (v90 & 0x7FFFFFFFFFFFFFF8);
            v89 = &v87[v91];
            v92 = (__int128 *)(v50 + 16);
            v93 = &v65[4 * v56 + 16];
            v94 = v90 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v95 = *v92;
              *(v93 - 1) = *(v92 - 1);
              *v93 = v95;
              v92 += 2;
              v93 += 2;
              v94 -= 8;
            }
            while (v94);
            if (v90 != (v90 & 0x7FFFFFFFFFFFFFF8))
            {
              v50 += v91;
              goto LABEL_93;
            }
          }
          else
          {
            v89 = &v65[4 * v56];
            do
            {
LABEL_93:
              v96 = *(_DWORD *)v50;
              v50 += 4;
              *(_DWORD *)v89 = v96;
              v89 += 4;
            }
            while (v89 != v88);
          }
          if ((char *)v54 != v53)
          {
            if ((unint64_t)(v55 - 4) < 0x3C)
            {
              v97 = v57;
              goto LABEL_101;
            }
            v97 = v57;
            if (v54 + (v55 & 0xFFFFFFFFFFFFFFFCLL) - (unint64_t)&v65[v55 & 0xFFFFFFFFFFFFFFFCLL] < 0x20)
              goto LABEL_140;
            v98 = ((unint64_t)(v55 - 4) >> 2) + 1;
            v97 = &v57[-4 * (v98 & 0x7FFFFFFFFFFFFFF8)];
            v99 = (__int128 *)(v54 + 4 * v56 - 16);
            v100 = &v65[4 * v56 - 16];
            v101 = v98 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v102 = *v99;
              *(v100 - 1) = *(v99 - 1);
              *v100 = v102;
              v99 -= 2;
              v100 -= 2;
              v101 -= 8;
            }
            while (v101);
            v87 -= 4 * (v98 & 0x7FFFFFFFFFFFFFF8);
            if (v98 != (v98 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_140:
              do
              {
LABEL_101:
                v103 = *((_DWORD *)v97 - 1);
                v97 -= 4;
                *((_DWORD *)v87 - 1) = v103;
                v87 -= 4;
              }
              while (v97 != (char *)v54);
            }
          }
          v104 = v53 - v57;
          if (v104)
            memmove(v88, v57, v104);
          __p = v87;
          v132 = &v88[v104];
          v133 = &v65[4 * v124];
          v9 = v128;
          if (v54)
            operator delete((void *)v54);
        }
      }
LABEL_11:
      ++v16;
      v15 = *(_QWORD *)(*a2 + 24 * v9);
      v8 = v47;
      if (v16 >= 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(*a2 + 24 * v9 + 8) - v15) >> 3))
        goto LABEL_115;
    }
    v19 = (int *)v135;
    v18 = v136;
    if ((unint64_t)v135 < v136)
    {
LABEL_25:
      *v19 = v130;
      v27 = (char *)(v19 + 1);
      goto LABEL_58;
    }
LABEL_15:
    v20 = (int *)v134;
    v21 = (char *)v19 - (_BYTE *)v134;
    v22 = ((char *)v19 - (_BYTE *)v134) >> 2;
    v23 = v22 + 1;
    if ((unint64_t)(v22 + 1) >> 62)
      sub_19C2A18E8();
    v24 = v18 - (_QWORD)v134;
    if (v24 >> 1 > v23)
      v23 = v24 >> 1;
    if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL)
      v25 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v25 = v23;
    if (v25)
    {
      if (v25 >> 62)
        sub_19C2A143C();
      v26 = operator new(4 * v25);
    }
    else
    {
      v26 = 0;
    }
    v35 = (int *)&v26[4 * v22];
    *v35 = v130;
    v27 = (char *)(v35 + 1);
    if (v19 == v20)
    {
      v9 = v128;
      goto LABEL_45;
    }
    v36 = (char *)(v19 - 1) - (char *)v20;
    if (v36 >= 0x2C && (unint64_t)((char *)v19 - &v26[v21]) >= 0x20)
    {
      v82 = (v36 >> 2) + 1;
      v37 = &v19[-(v82 & 0x7FFFFFFFFFFFFFF8)];
      v83 = &v26[4 * v22 - 16];
      v84 = v19 - 4;
      v85 = v82 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v86 = *(_OWORD *)v84;
        *(v83 - 1) = *((_OWORD *)v84 - 1);
        *v83 = v86;
        v83 -= 2;
        v84 -= 8;
        v85 -= 8;
      }
      while (v85);
      v35 -= v82 & 0x7FFFFFFFFFFFFFF8;
      v9 = v128;
      if (v82 == (v82 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_45:
        v134 = v35;
        v135 = v27;
        v136 = (unint64_t)&v26[4 * v25];
        if (v20)
          operator delete(v20);
        goto LABEL_58;
      }
    }
    else
    {
      v37 = v19;
      v9 = v128;
    }
    do
    {
      v38 = *--v37;
      *--v35 = v38;
    }
    while (v37 != v20);
    goto LABEL_45;
  }
  return 1;
}

void sub_19C3EDB04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  uint64_t v23;
  void *v25;
  void *v26;

  v25 = *(void **)v23;
  if (*(_QWORD *)v23)
  {
    *(_QWORD *)(v23 + 8) = v25;
    operator delete(v25);
  }
  *(_QWORD *)(a9 + 8) = v23;
  if (__p)
  {
    operator delete(__p);
    v26 = a22;
    if (!a22)
LABEL_5:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v26 = a22;
    if (!a22)
      goto LABEL_5;
  }
  operator delete(v26);
  _Unwind_Resume(exception_object);
}

float sub_19C3EDB90@<S0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, float **a5@<X8>)
{
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  size_t v15;
  const void *v16;
  unint64_t v18;
  uint64_t v19;
  _WORD *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  size_t v24;
  uint64_t v25;
  int64_t v26;
  int64_t v27;
  BOOL v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v43;
  int v44;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v54;
  unint64_t v55;
  int v59;
  unint64_t v60;
  int v65;
  unint64_t v70;
  uint64_t v71;
  int v74;
  unint64_t v75;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  float *v84;
  uint64_t v85;
  uint64_t v86;
  float *v87;
  int32x4_t *v88;
  uint64_t v89;
  float *v90;
  int32x4_t v91;
  int32x4_t v92;
  int32x4_t v93;
  int32x4_t v94;
  float32x4_t v95;
  uint64_t v96;
  unint64_t v98;
  uint64_t v99;
  int v100;
  __int16 v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  int v117;
  unint64_t v118;
  unint64_t v119;
  uint64_t v122;
  float32x4x2_t v123;

  if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)a1[7] + 16))(a1[7]) == 2)
    __assert_rtn("topNPredictions", "BaseLanguageModel.cpp", 165, "m_tokenIDMapper->modelType() != NNModelType::Fragment");
  v10 = (*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 152))(a1, a4);
  v11 = HIDWORD(v10);
  v12 = (HIDWORD(v10) - v10);
  if (v12 + 1 < a3)
    v13 = v12 + 1;
  else
    v13 = a3;
  if (v11 >= a1[12])
    __assert_rtn("topNPredictions", "BaseLanguageModel.cpp", 172, "range.max < m_sizeOutput && \"max value of Montreal token ID range exceeds model output size\"");
  v14 = v10;
  v122 = 0;
  v15 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  v16 = (const void *)a1[13];
  if (v15 != a1[14] - (_QWORD)v16 || memcmp(*(const void **)a2, v16, v15))
    (*(void (**)(_QWORD *, uint64_t, uint64_t *))(*a1 + 120))(a1, a2, &v122);
  v18 = a1[23];
  if (v14 <= v11)
  {
    v19 = a1[2];
    v20 = (_WORD *)(v18 + 4);
    do
    {
      *((_DWORD *)v20 - 1) = v14;
      _Q0.i16[0] = *(_WORD *)(v19 + 2 * v14);
      *v20 = _Q0.i16[0];
      ++v14;
      v20 += 4;
    }
    while (v14 <= v11);
  }
  if (!v13)
  {
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    return *(float *)_Q0.i32;
  }
  v21 = v18 + 8 * v13;
  v22 = v18 + 8 * v12;
  v23 = v22 + 8;
  v24 = 2 * v13;
  v25 = v13 - 1;
  if (v13 == 1)
  {
    if (v21 == v23)
      goto LABEL_51;
    _H0 = *(_WORD *)(v18 + 4);
    v54 = 8;
    do
    {
      v55 = v18 + v54;
      _H1 = *(_WORD *)(v18 + v54 + 4);
      __asm
      {
        FCVT            S2, H1
        FCVT            S3, H0
      }
      if (_S2 > _S3)
      {
        v59 = *(_DWORD *)v55;
        *(_DWORD *)v55 = *(_DWORD *)v18;
        *(_DWORD *)v18 = v59;
        *(_WORD *)(v55 + 4) = _H0;
        *(_WORD *)(v18 + 4) = _H1;
        _H0 = _H1;
      }
      v54 += 8;
    }
    while (8 * v12 + 8 != v54);
  }
  else
  {
    v26 = (unint64_t)(v13 - 2) >> 1;
    v27 = v26;
    do
    {
      if (v26 >= v27)
      {
        v29 = (2 * v27) | 1;
        v30 = v18 + 8 * v29;
        if (2 * v27 + 2 < v13)
        {
          _H0 = *(_WORD *)(v30 + 4);
          _H1 = *(_WORD *)(v30 + 12);
          __asm
          {
            FCVT            S0, H0
            FCVT            S1, H1
          }
          if (_S0 > _S1)
          {
            v30 += 8;
            v29 = 2 * v27 + 2;
          }
        }
        _H2 = *(_WORD *)(v30 + 4);
        _H0 = *(_WORD *)(v18 + 8 * v27 + 4);
        __asm
        {
          FCVT            S1, H0
          FCVT            S3, H2
        }
        if (_S3 <= _S1)
        {
          v43 = v18 + 8 * v27;
          v44 = *(_DWORD *)v43;
          do
          {
            v46 = v43;
            v43 = v30;
            *(_DWORD *)v46 = *(_DWORD *)v30;
            *(_WORD *)(v46 + 4) = _H2;
            if (v26 < v29)
              break;
            v47 = 2 * v29;
            v29 = (2 * v29) | 1;
            v30 = v18 + 8 * v29;
            v48 = v47 + 2;
            if (v48 < v13)
            {
              _H2 = *(_WORD *)(v30 + 4);
              _H3 = *(_WORD *)(v30 + 12);
              __asm
              {
                FCVT            S2, H2
                FCVT            S3, H3
              }
              if (_S2 > _S3)
              {
                v30 += 8;
                v29 = v48;
              }
            }
            _H2 = *(_WORD *)(v30 + 4);
            __asm { FCVT            S3, H2 }
          }
          while (_S3 <= _S1);
          *(_DWORD *)v43 = v44;
          *(_WORD *)(v43 + 4) = _H0;
        }
      }
      v28 = v27-- <= 0;
    }
    while (!v28);
    if (v21 != v23)
    {
      v60 = v18 + 8 * v13;
      do
      {
        _H0 = *(_WORD *)(v60 + 4);
        _H2 = *(_WORD *)(v18 + 4);
        __asm
        {
          FCVT            S3, H2
          FCVT            S1, H0
        }
        if (_S1 > _S3)
        {
          v65 = *(_DWORD *)v60;
          *(_DWORD *)v60 = *(_DWORD *)v18;
          *(_DWORD *)v18 = v65;
          *(_WORD *)(v60 + 4) = _H2;
          *(_WORD *)(v18 + 4) = _H0;
          if (v13 == 2)
            goto LABEL_42;
          _H2 = *(_WORD *)(v18 + 12);
          _H3 = *(_WORD *)(v18 + 20);
          __asm
          {
            FCVT            S3, H3
            FCVT            S2, H2
          }
          if (_S2 <= _S3)
          {
LABEL_42:
            v70 = v18 + 8;
            v71 = 1;
          }
          else
          {
            v70 = v18 + 16;
            v71 = 2;
          }
          _H2 = *(_WORD *)(v70 + 4);
          __asm { FCVT            S3, H2 }
          if (_S3 <= _S1)
          {
            v74 = *(_DWORD *)v18;
            v75 = v18;
            do
            {
              v77 = v75;
              v75 = v70;
              *(_DWORD *)v77 = *(_DWORD *)v70;
              *(_WORD *)(v77 + 4) = _H2;
              if (v26 < v71)
                break;
              v78 = 2 * v71;
              v71 = (2 * v71) | 1;
              v70 = v18 + 8 * v71;
              v79 = v78 + 2;
              if (v79 < v13)
              {
                _H2 = *(_WORD *)(v70 + 4);
                _H3 = *(_WORD *)(v70 + 12);
                __asm
                {
                  FCVT            S2, H2
                  FCVT            S3, H3
                }
                if (_S2 > _S3)
                {
                  v70 += 8;
                  v71 = v79;
                }
              }
              _H2 = *(_WORD *)(v70 + 4);
              __asm { FCVT            S3, H2 }
            }
            while (_S3 <= _S1);
            *(_DWORD *)v75 = v74;
            *(_WORD *)(v75 + 4) = _H0;
          }
        }
        _ZF = v60 == v22;
        v60 += 8;
      }
      while (!_ZF);
    }
  }
  if (v13 != 1)
  {
    v98 = v18 + 8 * v13;
    do
    {
      v99 = 0;
      v100 = *(_DWORD *)v18;
      v101 = *(_WORD *)(v18 + 4);
      v102 = v18;
      do
      {
        v103 = v102;
        v102 += 8 * (v99 + 1);
        v104 = 2 * v99;
        v99 = (2 * v99) | 1;
        v105 = v104 + 2;
        if (v105 < v13)
        {
          _H1 = *(_WORD *)(v102 + 4);
          _H2 = *(_WORD *)(v102 + 12);
          __asm
          {
            FCVT            S1, H1
            FCVT            S2, H2
          }
          if (_S1 > _S2)
          {
            v102 += 8;
            v99 = v105;
          }
        }
        *(_DWORD *)v103 = *(_DWORD *)v102;
        *(_WORD *)(v103 + 4) = *(_WORD *)(v102 + 4);
      }
      while (v99 <= (uint64_t)((unint64_t)(v13 - 2) >> 1));
      v110 = v98 - 8;
      if (v102 == v98 - 8)
      {
        *(_DWORD *)v102 = v100;
        *(_WORD *)(v102 + 4) = v101;
      }
      else
      {
        *(_DWORD *)v102 = *(_DWORD *)(v98 - 8);
        *(_WORD *)(v102 + 4) = *(_WORD *)(v98 - 4);
        *(_DWORD *)(v98 - 8) = v100;
        *(_WORD *)(v98 - 4) = v101;
        v111 = v102 - v18 + 8;
        if (v111 >= 9)
        {
          v112 = (((unint64_t)v111 >> 3) - 2) >> 1;
          _H2 = *(_WORD *)(v18 + 8 * v112 + 4);
          _H0 = *(_WORD *)(v102 + 4);
          __asm
          {
            FCVT            S3, H2
            FCVT            S1, H0
          }
          if (_S3 > _S1)
          {
            v117 = *(_DWORD *)v102;
            do
            {
              v118 = v112;
              v119 = v102;
              v102 = v18 + 8 * v118;
              *(_DWORD *)v119 = *(_DWORD *)v102;
              *(_WORD *)(v119 + 4) = _H2;
              if (!v118)
                break;
              v112 = (v118 - 1) >> 1;
              _H2 = *(_WORD *)(v18 + 8 * v112 + 4);
              __asm { FCVT            S3, H2 }
            }
            while (_S3 > _S1);
            *(_DWORD *)v102 = v117;
            *(_WORD *)(v18 + 8 * v118 + 4) = _H0;
          }
        }
      }
      v98 = v110;
      v28 = v13-- <= 2;
    }
    while (!v28);
  }
LABEL_51:
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  v84 = (float *)operator new(v24 * 4);
  *a5 = v84;
  a5[2] = &v84[v24];
  bzero(v84, v24 * 4);
  a5[1] = &v84[v24];
  v85 = v25 & 0x1FFFFFFFFFFFFFFFLL;
  if ((v25 & 0x1FFFFFFFFFFFFFFFuLL) < 7 || (unint64_t)v84 < v18 + v24 * 4 && v18 < (unint64_t)&v84[v24])
    goto LABEL_58;
  v86 = (v85 + 1) & 0x3FFFFFFFFFFFFFF8;
  v87 = v84 + 8;
  v88 = (int32x4_t *)(v18 + 32);
  v89 = v86;
  do
  {
    v90 = v87 - 8;
    v92 = v88[-2];
    v91 = v88[-1];
    v94 = *v88;
    v93 = v88[1];
    v88 += 4;
    v123.val[1] = vcvtq_f32_f16((float16x4_t)vmovn_s32(vuzp2q_s32(v92, v91)));
    v123.val[0] = (float32x4_t)vuzp1q_s32(v92, v91);
    vst2q_f32(v90, v123);
    v95 = vcvtq_f32_f16((float16x4_t)vmovn_s32(vuzp2q_s32(v94, v93)));
    _Q0 = vuzp1q_s32(v94, v93);
    vst2q_f32(v87, *(float32x4x2_t *)_Q0.i8);
    v87 += 16;
    v89 -= 8;
  }
  while (v89);
  if (v85 + 1 != v86)
  {
    v84 += 2 * v86;
    v18 += 8 * v86;
    do
    {
LABEL_58:
      v96 = *(_QWORD *)v18;
      v18 += 8;
      _H0 = WORD2(v96);
      __asm { FCVT            S0, H0 }
      *(_DWORD *)v84 = v96;
      v84[1] = *(float *)_Q0.i32;
      v84 += 2;
    }
    while (v18 != v21);
  }
  return *(float *)_Q0.i32;
}

float32_t sub_19C3EE1CC(_QWORD *a1, uint64_t a2, float32x4_t **a3, uint64_t a4)
{
  float16x4_t *v7;
  float16x4_t *v8;
  unint64_t v9;
  unint64_t v10;
  float32x4_t *v11;
  unint64_t v12;
  float32x4_t *v13;
  float16x4_t *v14;
  unint64_t v15;
  float16x8_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  unint64_t v20;
  __int32 *v21;
  __int16 *v22;
  __int16 v23;

  if (((*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 120))(a1, a2, a4) & 1) == 0)
    __assert_rtn("populateOutputLayer", "BaseLanguageModel.cpp", 205, "false");
  v7 = (float16x4_t *)a1[2];
  v8 = (float16x4_t *)a1[3];
  v9 = ((char *)v8 - (char *)v7) >> 1;
  v10 = ((char *)a3[1] - (char *)*a3) >> 2;
  if (v9 <= v10)
  {
    if (v9 < v10)
      a3[1] = (float32x4_t *)((char *)*a3 + 4 * v9);
  }
  else
  {
    sub_19C33ABBC((uint64_t)a3, v9 - v10);
    v7 = (float16x4_t *)a1[2];
    v8 = (float16x4_t *)a1[3];
    v9 = ((char *)v8 - (char *)v7) >> 1;
  }
  if (v8 != v7)
  {
    v11 = *a3;
    if (v9 <= 1)
      v9 = 1;
    if (v9 <= 0xF)
    {
      v12 = 0;
LABEL_14:
      v20 = v9 - v12;
      v21 = &v11->i32[v12];
      v22 = (__int16 *)v7 + v12;
      do
      {
        v23 = *v22++;
        _H0 = v23;
        __asm { FCVT            S0, H0 }
        *v21++ = _Q0.i32[0];
        --v20;
      }
      while (v20);
      return _Q0.f32[0];
    }
    v12 = v9 & 0xFFFFFFFFFFFFFFF0;
    v13 = v11 + 2;
    v14 = v7 + 2;
    v15 = v9 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v16 = *(float16x8_t *)v14[-2].i8;
      v17 = vcvtq_f32_f16(*(float16x4_t *)v16.i8);
      _Q0 = vcvt_hight_f32_f16(v16);
      v18 = vcvtq_f32_f16(*v14);
      v19 = vcvt_hight_f32_f16(*(float16x8_t *)v14->i8);
      v13[-2] = v17;
      v13[-1] = _Q0;
      *v13 = v18;
      v13[1] = v19;
      v13 += 4;
      v14 += 4;
      v15 -= 16;
    }
    while (v15);
    if (v9 != v12)
      goto LABEL_14;
  }
  return _Q0.f32[0];
}

uint64_t sub_19C3EE2E8(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 128))(a1);
}

uint64_t sub_19C3EE2F4(uint64_t a1)
{
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 80))(*(_QWORD *)(a1 + 8));
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 56))(*(_QWORD *)(a1 + 40));
}

uint64_t sub_19C3EE32C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 48))(*(_QWORD *)(a1 + 40));
}

void sub_19C3EE33C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  char *v4;
  char *v5;
  char *v6;
  unint64_t v7;
  _QWORD *v8;
  int64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  _QWORD *v15;
  char *v16;
  unint64_t v17;
  _OWORD *v18;
  char *v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;

  v2 = *(_QWORD **)(a1 + 72);
  if (v2)
  {
    v4 = (char *)v2[10];
    v5 = (char *)v2[11];
    v6 = v4;
    if (v4 != v5)
    {
      while (*(_QWORD *)v6 != a2)
      {
        v6 += 8;
        if (v6 == v5)
        {
          v6 = (char *)v2[11];
          break;
        }
      }
    }
    if (v6 == v5)
    {
      v7 = v2[12];
      if ((unint64_t)v5 >= v7)
      {
        v9 = v5 - v4;
        v10 = (v5 - v4) >> 3;
        v11 = v10 + 1;
        if ((unint64_t)(v10 + 1) >> 61)
          sub_19C2A18E8();
        v12 = v7 - (_QWORD)v4;
        if (v12 >> 2 > v11)
          v11 = v12 >> 2;
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
          v13 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v13 = v11;
        if (v13)
        {
          if (v13 >> 61)
            sub_19C2A143C();
          v14 = operator new(8 * v13);
        }
        else
        {
          v14 = 0;
        }
        v15 = &v14[8 * v10];
        v16 = &v14[8 * v13];
        *v15 = a2;
        v8 = v15 + 1;
        if (v4 != v5)
        {
          if ((unint64_t)(v9 - 8) < 0x58)
            goto LABEL_35;
          if ((unint64_t)(v4 - v14) < 0x20)
            goto LABEL_35;
          v17 = ((unint64_t)(v9 - 8) >> 3) + 1;
          v18 = &v14[8 * v10 - 16];
          v19 = v5 - 16;
          v20 = v17 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v21 = *(_OWORD *)v19;
            *(v18 - 1) = *((_OWORD *)v19 - 1);
            *v18 = v21;
            v18 -= 2;
            v19 -= 32;
            v20 -= 4;
          }
          while (v20);
          v15 -= v17 & 0x3FFFFFFFFFFFFFFCLL;
          v5 -= 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
          if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_35:
            do
            {
              v22 = *((_QWORD *)v5 - 1);
              v5 -= 8;
              *--v15 = v22;
            }
            while (v5 != v4);
            v4 = (char *)v2[10];
          }
        }
        v2[10] = v15;
        v2[11] = v8;
        v2[12] = v16;
        if (v4)
          operator delete(v4);
      }
      else
      {
        *(_QWORD *)v5 = a2;
        v8 = v5 + 8;
      }
      v2[11] = v8;
    }
  }
}

_QWORD *sub_19C3EE4CC(_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  char *v3;
  char *v4;
  int64_t v5;

  v2 = result[9];
  if (v2)
  {
    v4 = *(char **)(v2 + 80);
    v3 = *(char **)(v2 + 88);
    if (v4 != v3)
    {
      while (*(_QWORD *)v4 != a2)
      {
        v4 += 8;
        if (v4 == v3)
        {
          v4 = *(char **)(v2 + 88);
          break;
        }
      }
    }
    if (v4 != v3)
    {
      v5 = v3 - (v4 + 8);
      if (v3 != v4 + 8)
        result = memmove(v4, v4 + 8, v3 - (v4 + 8));
      *(_QWORD *)(v2 + 88) = &v4[v5];
    }
  }
  return result;
}

uint64_t sub_19C3EE544(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;
  void *v11;
  unint64_t v12;

  v6 = a2[1];
  v7 = (v6 - *a2) >> 2;
  if (v6 == *a2)
  {
    v8 = v6;
  }
  else
  {
    do
    {
      if (((*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), *a2, v7) & 1) != 0)break;
      --v7;
    }
    while (v7);
    v6 = *a2;
    v8 = a2[1];
  }
  if (v7 == (v8 - v6) >> 2)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 64))(*(_QWORD *)(a1 + 8));
  }
  else
  {
    result = (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2, v7, a3);
    if (!(_DWORD)result)
      return result;
  }
  v10 = (uint64_t)(a2[1] - *a2) >> 2;
  v11 = *(void **)(a1 + 104);
  v12 = (uint64_t)(*(_QWORD *)(a1 + 112) - (_QWORD)v11) >> 2;
  if (v12 >= v10)
    v12 = (uint64_t)(a2[1] - *a2) >> 2;
  if (v12)
  {
    memmove(v11, (const void *)*a2, 4 * v12);
    v10 = (uint64_t)(a2[1] - *a2) >> 2;
  }
  *(_QWORD *)(a1 + 176) = v10;
  return 1;
}

void sub_19C3EE644(uint64_t a1, CFTypeRef *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  CFTypeRef v11;
  const __CFString *Value;
  CFTypeID TypeID;
  unint64_t v14;
  void **v15;
  _QWORD *v16;
  NSObject *v17;
  const __CFURL *v18;
  void **v19;
  int v20;
  int v21;
  _QWORD *v23;
  unint64_t *v24;
  unint64_t v25;
  _QWORD *v26;
  const __CFURL *v27;
  void *v28;
  _QWORD *exception;
  void *v31[2];
  unsigned __int8 v32;
  char v33;
  CFDictionaryRef theDict;
  std::string v35;
  std::string __p[5];
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)(a1 + 8) = 0u;
  *(_QWORD *)a1 = off_1E3D357A0;
  *(_OWORD *)(a1 + 24) = 0u;
  v8 = *(_QWORD *)(a6 + 8);
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v11 = *a2;
  if (*a2)
    CFRetain(*a2);
  sub_19C29438C(&theDict, v11);
  if (theDict)
  {
    Value = (const __CFString *)CFDictionaryGetValue(theDict, CFSTR("MontrealModelType"));
    if (Value)
    {
      TypeID = CFStringGetTypeID();
      if (TypeID == CFGetTypeID(Value))
      {
        sub_19C2E50A4(v31, Value);
        v33 = 1;
        v14 = v32;
        if ((v32 & 0x80u) != 0)
          v14 = (unint64_t)v31[1];
        if (v14 == 6)
        {
          if ((v32 & 0x80u) == 0)
            v19 = v31;
          else
            v19 = (void **)v31[0];
          v20 = *(_DWORD *)v19;
          v21 = *((unsigned __int16 *)v19 + 2);
          if (v20 == 1701998403 && v21 == 19788)
          {
            if (a7)
            {
              v23 = operator new(0x1D0uLL);
              v23[1] = 0;
              v23[2] = 0;
              *v23 = &off_1E3D39898;
              if (v8)
              {
                v24 = (unint64_t *)(v8 + 8);
                do
                  v25 = __ldxr(v24);
                while (__stxr(v25 + 1, v24));
              }
              sub_19C355674((uint64_t)(v23 + 3), a2);
            }
            v26 = operator new(0xE8uLL);
            v26[1] = 0;
            v26[2] = 0;
            *v26 = &off_1E3D399B0;
            sub_19C355674((uint64_t)(v26 + 3), a2);
          }
        }
        else if (v14 == 4)
        {
          v15 = v31;
          if ((v32 & 0x80u) != 0)
            v15 = (void **)v31[0];
          if (*(_DWORD *)v15 == 808333686)
          {
            v27 = (const __CFURL *)CFDictionaryGetValue((CFDictionaryRef)*a2, CFSTR("URL"));
            sub_19C2E15E8(v27, __p);
          }
          if (*(_DWORD *)v15 == 808333942)
          {
            v16 = operator new(0xE8uLL);
            v16[1] = 0;
            v16[2] = 0;
            *v16 = &off_1E3D399B0;
            sub_19C355674((uint64_t)(v16 + 3), a2);
          }
        }
        exception = __cxa_allocate_exception(0x20uLL);
        std::operator+<char>();
        sub_19C39717C(__p, &v35, "'");
        sub_19C31237C(exception, (__int128 *)__p);
        __cxa_throw(exception, (struct type_info *)&unk_1E3D32968, (void (*)(void *))sub_19C3123E4);
      }
    }
    LOBYTE(v31[0]) = 0;
    v33 = 0;
    if (qword_1EE41C530 != -1)
      dispatch_once(&qword_1EE41C530, &unk_1E3D3C0F0);
    v17 = qword_1EE41C528;
    if (os_log_type_enabled((os_log_t)qword_1EE41C528, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__p[0].__r_.__value_.__l.__data_) = 0;
      _os_log_error_impl(&dword_19C291000, v17, OS_LOG_TYPE_ERROR, "No model type configured; falling back on the legacy montreal model",
        (uint8_t *)__p,
        2u);
    }
    v18 = (const __CFURL *)CFDictionaryGetValue((CFDictionaryRef)*a2, CFSTR("URL"));
    sub_19C2E15E8(v18, __p);
  }
  v28 = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x1A1AD3154](v28, "Could not construct");
  __cxa_throw(v28, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
}

void sub_19C3F0104(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14, uint64_t a15, uint64_t a16, uint64_t *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  char a70;
  uint64_t v70;
  uint64_t v71;
  void *v73;
  uint64_t v74;

  if (a70 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_1EDB970E8);
  sub_19C2B43C8(v71);
  sub_19C2B43C8(v70);
  sub_19C2B43C8(a15);
  v73 = *a14;
  if (*a14)
  {
    *(_QWORD *)(a20 + 24) = v73;
    operator delete(v73);
  }
  v74 = *a17;
  *a17 = 0;
  if (v74)
    (*(void (**)(uint64_t))(*(_QWORD *)v74 + 8))(v74);
  _Unwind_Resume(a1);
}

uint64_t sub_19C3F06E8()
{
  unsigned __int8 v0;
  NSObject *v1;
  uint64_t v3;
  _BYTE __p[12];
  __int16 v5;
  uint64_t v6;
  char v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v0 = atomic_load((unsigned __int8 *)&qword_1EDB970E0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_1EDB970E0))
  {
    sub_19C2A6D48(__p, "NeuralNetworkForwardPassLimit");
    qword_1EE41C008 = sub_19C3AA22C((uint64_t)__p);
    *(_QWORD *)&byte_1EE41C010 = v3;
    if (v7 < 0)
      operator delete(*(void **)__p);
    __cxa_guard_release(&qword_1EDB970E0);
  }
  if (!byte_1EE41C010)
    return 16;
  if (qword_1EDB97228 != -1)
    dispatch_once(&qword_1EDB97228, &unk_1E3D3ABD0);
  v1 = qword_1EDB97220;
  if (os_log_type_enabled((os_log_t)qword_1EDB97220, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__p = 136315394;
    *(_QWORD *)&__p[4] = "NeuralNetworkForwardPassLimit";
    v5 = 2048;
    v6 = qword_1EE41C008;
    _os_log_impl(&dword_19C291000, v1, OS_LOG_TYPE_DEFAULT, "Setting configuration value %s=%zu (overridden by user preferences)", __p, 0x16u);
  }
  return qword_1EE41C008;
}

void sub_19C3F0840(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_1EDB970E0);
  _Unwind_Resume(a1);
}

void sub_19C3F0870(void **a1, unint64_t a2)
{
  _BYTE *v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  __int128 *v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  void *v32;

  v5 = (char *)a1[1];
  v4 = a1[2];
  v6 = v5;
  if (a2 <= (v4 - v5) >> 3)
  {
    if (!a2)
    {
LABEL_19:
      a1[1] = v6;
      return;
    }
    if (((a2 - 1) & 0x1FFFFFFFFFFFFFFFLL) != 0)
    {
      v14 = ((a2 - 1) & 0x1FFFFFFFFFFFFFFFLL) + 1;
      v15 = v5 + 8;
      v16 = v14 & 0x3FFFFFFFFFFFFFFELL;
      do
      {
        *((_DWORD *)v15 - 2) = 0;
        *(_DWORD *)v15 = 0;
        *((_WORD *)v15 - 2) = 0;
        *((_WORD *)v15 + 2) = 0;
        v15 += 16;
        v16 -= 2;
      }
      while (v16);
      if (v14 == (v14 & 0x3FFFFFFFFFFFFFFELL))
        goto LABEL_18;
      v6 = &v5[8 * (v14 & 0x3FFFFFFFFFFFFFFELL)];
    }
    do
    {
      *(_DWORD *)v6 = 0;
      *((_WORD *)v6 + 2) = 0;
      v6 += 8;
    }
    while (v6 != &v5[8 * a2]);
LABEL_18:
    v6 = &v5[8 * a2];
    goto LABEL_19;
  }
  v7 = (char *)*a1;
  v8 = v5 - (_BYTE *)*a1;
  v9 = v8 >> 3;
  v10 = (v8 >> 3) + a2;
  if (v10 >> 61)
    sub_19C2A18E8();
  v11 = v4 - v7;
  if (v11 >> 2 > v10)
    v10 = v11 >> 2;
  if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
    v12 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v12 = v10;
  if (v12)
  {
    if (v12 >> 61)
      sub_19C2A143C();
    v13 = (char *)operator new(8 * v12);
  }
  else
  {
    v13 = 0;
  }
  v17 = &v13[8 * v9];
  v18 = &v17[8 * a2];
  v19 = v17;
  v20 = (a2 - 1) & 0x1FFFFFFFFFFFFFFFLL;
  if (v20)
  {
    v21 = (v20 + 1) & 0x3FFFFFFFFFFFFFFELL;
    v22 = v17 + 8;
    v23 = v21;
    do
    {
      *((_DWORD *)v22 - 2) = 0;
      *(_DWORD *)v22 = 0;
      *((_WORD *)v22 - 2) = 0;
      *((_WORD *)v22 + 2) = 0;
      v22 += 16;
      v23 -= 2;
    }
    while (v23);
    if (v20 + 1 == v21)
      goto LABEL_27;
    v19 = &v17[8 * v21];
  }
  do
  {
    *(_DWORD *)v19 = 0;
    *((_WORD *)v19 + 2) = 0;
    v19 += 8;
  }
  while (v19 != v18);
LABEL_27:
  v24 = &v13[8 * v12];
  if (v5 != v7)
  {
    v25 = v5 - v7 - 8;
    if (v25 < 0x58)
      goto LABEL_41;
    if ((unint64_t)(v5 - &v13[v8]) < 0x20)
      goto LABEL_41;
    v26 = (v25 >> 3) + 1;
    v6 = &v5[-8 * (v26 & 0x3FFFFFFFFFFFFFFCLL)];
    v27 = &v13[8 * v9 - 16];
    v28 = (__int128 *)(v5 - 16);
    v29 = v26 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v30 = *v28;
      *((_OWORD *)v27 - 1) = *(v28 - 1);
      *(_OWORD *)v27 = v30;
      v27 -= 32;
      v28 -= 2;
      v29 -= 4;
    }
    while (v29);
    v17 -= 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
    if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_41:
      do
      {
        v31 = *((_QWORD *)v6 - 1);
        v6 -= 8;
        *((_QWORD *)v17 - 1) = v31;
        v17 -= 8;
      }
      while (v6 != v7);
    }
  }
  v32 = *a1;
  *a1 = v17;
  a1[1] = v18;
  a1[2] = v24;
  if (v32)
    operator delete(v32);
}

_QWORD *sub_19C3F0AAC(_QWORD *a1, uint64_t a2, uint64_t a3, CFDictionaryRef *a4, uint64_t a5)
{
  CFIndex v9;
  NSObject *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *result;
  int v14;
  uint64_t v15;
  __int16 v16;
  CFIndex v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v9 = sub_19C3F10DC(a4, a5);
  if (qword_1EDB97228 != -1)
    dispatch_once(&qword_1EDB97228, &unk_1E3D3ABD0);
  v10 = qword_1EDB97220;
  if (os_log_type_enabled((os_log_t)qword_1EDB97220, OS_LOG_TYPE_INFO))
  {
    v11 = MEMORY[0x1A1AD2A04](*(_QWORD *)(a5 + 176));
    v14 = 138412546;
    v15 = v11;
    v16 = 2048;
    v17 = v9;
    _os_log_impl(&dword_19C291000, v10, OS_LOG_TYPE_INFO, "assembling monolithic cache for locale='%@': cacheSize=%lu", (uint8_t *)&v14, 0x16u);
  }
  v12 = (_QWORD *)operator new();
  *v12 = &off_1E3D35E98;
  result = operator new(0x20uLL);
  *result = &off_1E3D38D18;
  result[1] = a2;
  result[2] = a3;
  result[3] = v9;
  v12[4] = result;
  v12[5] = 0;
  *a1 = v12;
  return result;
}

void sub_19C3F0BF8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD355C](v1, 0x10A1C40F8EEC480);
  _Unwind_Resume(a1);
}

void sub_19C3F0C20(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4, CFDictionaryRef *a5, uint64_t a6)
{
  CFIndex v12;
  CFIndex AppIntegerValue;
  const __CFNumber *Value;
  const __CFNumber *v15;
  CFTypeID v16;
  NSObject *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  _QWORD *v23;
  unint64_t *v24;
  unint64_t v25;
  char *v26;
  char *v27;
  unint64_t *v28;
  unint64_t v29;
  char *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  _QWORD *exception;
  __int128 v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  __int128 v42;
  _BYTE valuePtr[24];
  CFIndex v44;
  __int128 v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v12 = sub_19C3F10DC(a5, a6);
  LOBYTE(v39) = 0;
  AppIntegerValue = CFPreferencesGetAppIntegerValue(CFSTR("MontrealSparseCacheSize"), CFSTR("com.apple.LanguageModeling"), (Boolean *)&v39);
  if (!(_BYTE)v39)
  {
    AppIntegerValue = *(unsigned int *)(a6 + 384);
    if (!(_DWORD)AppIntegerValue)
    {
      if (!CFDictionaryContainsKey(*a5, CFSTR("MontrealSparseCacheSize")))
      {
        exception = __cxa_allocate_exception(0x20uLL);
        sub_19C2A6D48(valuePtr, "Montreal resource is missing the 'MontrealSparseCacheSize' configuration parameter.");
        sub_19C31237C(exception, (__int128 *)valuePtr);
        __cxa_throw(exception, (struct type_info *)&unk_1E3D32968, (void (*)(void *))sub_19C3123E4);
      }
      Value = (const __CFNumber *)CFDictionaryGetValue(*a5, CFSTR("MontrealSparseCacheSize"));
      v15 = Value;
      if (!Value)
        __assert_rtn("extractSize", "LMMontrealCacheFactory.hpp", 28, "false && \"missing dictionary entry\"");
      v16 = CFGetTypeID(Value);
      if (v16 != CFNumberGetTypeID())
        __assert_rtn("extractSize", "LMMontrealCacheFactory.hpp", 33, "false && \"wrong type for dictionary entry\"");
      *(_DWORD *)valuePtr = 0;
      if (!CFNumberGetValue(v15, kCFNumberIntType, valuePtr))
        __assert_rtn("extractSize", "LMMontrealCacheFactory.hpp", 39, "false && \"Failed to parse CFNumber as kCFNumberIntType\"");
      AppIntegerValue = *(int *)valuePtr;
    }
  }
  if (qword_1EDB97228 != -1)
    dispatch_once(&qword_1EDB97228, &unk_1E3D3ABD0);
  v17 = qword_1EDB97220;
  if (os_log_type_enabled((os_log_t)qword_1EDB97220, OS_LOG_TYPE_INFO))
  {
    v18 = MEMORY[0x1A1AD2A04](*(_QWORD *)(a6 + 176));
    *(_DWORD *)valuePtr = 138412802;
    *(_QWORD *)&valuePtr[4] = v18;
    *(_WORD *)&valuePtr[12] = 2048;
    *(_QWORD *)&valuePtr[14] = v12;
    *(_WORD *)&valuePtr[22] = 2048;
    v44 = AppIntegerValue;
    _os_log_impl(&dword_19C291000, v17, OS_LOG_TYPE_INFO, "assembling segregated cache for locale='%@': fullCacheSize=%lu, sparseCacheSize=%lu", valuePtr, 0x20u);
  }
  *(_QWORD *)&v39 = a2;
  *((_QWORD *)&v39 + 1) = a3;
  v20 = *a4;
  v19 = (std::__shared_weak_count *)a4[1];
  v40 = v20;
  v41 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v22 = __ldxr(p_shared_owners);
    while (__stxr(v22 + 1, p_shared_owners));
  }
  *(_QWORD *)&v42 = v12;
  *((_QWORD *)&v42 + 1) = AppIntegerValue;
  v23 = (_QWORD *)operator new();
  *(_OWORD *)valuePtr = v39;
  *(_QWORD *)&valuePtr[16] = v20;
  v44 = (CFIndex)v19;
  if (v19)
  {
    v24 = (unint64_t *)&v19->__shared_owners_;
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  v45 = v42;
  v26 = (char *)operator new(0x38uLL);
  v27 = v26;
  *(_QWORD *)v26 = &off_1E3D38D70;
  *(_OWORD *)(v26 + 8) = *(_OWORD *)valuePtr;
  *((_QWORD *)v26 + 3) = v20;
  *((_QWORD *)v26 + 4) = v19;
  if (v19)
  {
    v28 = (unint64_t *)&v19->__shared_owners_;
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  *(_OWORD *)(v26 + 40) = v45;
  *v23 = &off_1E3D35E98;
  v30 = (char *)operator new(0x38uLL);
  *(_QWORD *)v30 = &off_1E3D38D70;
  *(_OWORD *)(v30 + 8) = *(_OWORD *)(v27 + 8);
  *((_QWORD *)v30 + 3) = v20;
  *((_QWORD *)v30 + 4) = v19;
  if (v19)
  {
    v31 = (unint64_t *)&v19->__shared_owners_;
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
    *(_OWORD *)(v30 + 40) = *(_OWORD *)(v27 + 40);
    v23[4] = v30;
    v23[5] = 0;
    do
      v33 = __ldaxr(v31);
    while (__stlxr(v33 - 1, v31));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
    operator delete(v27);
    do
      v34 = __ldaxr(v31);
    while (__stlxr(v34 - 1, v31));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  else
  {
    *(_OWORD *)(v30 + 40) = v45;
    v23[4] = v30;
    v23[5] = 0;
    operator delete(v27);
  }
  *a1 = v23;
  v35 = v41;
  if (v41)
  {
    v36 = (unint64_t *)&v41->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
}

void sub_19C3F104C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  int v21;

  if (a20 < 0)
  {
    operator delete(__p);
    if ((v21 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v20);
  _Unwind_Resume(a1);
}

CFIndex sub_19C3F10DC(CFDictionaryRef *a1, uint64_t a2)
{
  CFIndex result;
  const __CFNumber *Value;
  const __CFNumber *v6;
  CFTypeID v7;
  _QWORD *exception;
  __int128 v9;
  Boolean keyExistsAndHasValidFormat;

  keyExistsAndHasValidFormat = 0;
  result = CFPreferencesGetAppIntegerValue(CFSTR("MontrealFullCacheSize"), CFSTR("com.apple.LanguageModeling"), &keyExistsAndHasValidFormat);
  if (!keyExistsAndHasValidFormat)
  {
    result = *(unsigned int *)(a2 + 380);
    if (!(_DWORD)result)
    {
      if (!CFDictionaryContainsKey(*a1, CFSTR("MontrealFullCacheSize")))
      {
        exception = __cxa_allocate_exception(0x20uLL);
        sub_19C2A6D48(&v9, "Montreal resource is missing the 'MontrealFullCacheSize' configuration parameter.");
        sub_19C31237C(exception, &v9);
        __cxa_throw(exception, (struct type_info *)&unk_1E3D32968, (void (*)(void *))sub_19C3123E4);
      }
      Value = (const __CFNumber *)CFDictionaryGetValue(*a1, CFSTR("MontrealFullCacheSize"));
      if (!Value)
        __assert_rtn("extractSize", "LMMontrealCacheFactory.hpp", 28, "false && \"missing dictionary entry\"");
      v6 = Value;
      v7 = CFGetTypeID(Value);
      if (v7 != CFNumberGetTypeID())
        __assert_rtn("extractSize", "LMMontrealCacheFactory.hpp", 33, "false && \"wrong type for dictionary entry\"");
      LODWORD(v9) = 0;
      if (!CFNumberGetValue(v6, kCFNumberIntType, &v9))
        __assert_rtn("extractSize", "LMMontrealCacheFactory.hpp", 39, "false && \"Failed to parse CFNumber as kCFNumberIntType\"");
      return (int)v9;
    }
  }
  return result;
}

void sub_19C3F1240(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  int v15;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  goto LABEL_6;
}

void sub_19C3F127C()
{
  JUMPOUT(0x1A1AD355CLL);
}

__n128 sub_19C3F1290(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E3D38DC8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_19C3F12D0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E3D38DC8;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_QWORD *sub_19C3F12F8@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  _QWORD *result;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  _QWORD v18[3];
  _QWORD *v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v4 = a1[1];
  v5 = a1[2] - 5;
  v6 = (_QWORD *)operator new();
  v7 = a1[3];
  v18[0] = &off_1E3D39558;
  v18[1] = v4;
  v19 = v18;
  sub_19C3F15AC(v6, v7, v5, (uint64_t)v18);
  *v6 = &off_1E3D36D00;
  v13 = 0;
  v14 = &v13;
  v15 = 0x2000000000;
  v8 = off_1EDB96E90;
  v16 = off_1EDB96E90;
  if (off_1EDB96E90)
    goto LABEL_7;
  v17 = 0;
  if (qword_1EE41C538)
  {
    v8 = (void *)qword_1EE41C538;
  }
  else
  {
    v20 = xmmword_1E3D3C110;
    v21 = 0;
    qword_1EE41C538 = _sl_dlopen();
    v9 = v17;
    v8 = (void *)qword_1EE41C538;
    if (!qword_1EE41C538)
    {
      v9 = (void *)abort_report_np();
      goto LABEL_16;
    }
    if (v17)
      goto LABEL_17;
  }
  while (1)
  {
    v8 = dlsym(v8, "MRLNeuralNetworkIncrementalStateCreate");
    v14[3] = (uint64_t)v8;
    off_1EDB96E90 = v8;
LABEL_7:
    _Block_object_dispose(&v13, 8);
    if (v8)
      break;
    dlerror();
    v9 = (void *)abort_report_np();
LABEL_16:
    __break(1u);
LABEL_17:
    free(v9);
  }
  v6[5] = ((uint64_t (*)(_QWORD))v8)(0);
  v6[6] = 0;
  result = v19;
  if (v19 == v18)
  {
    v12 = 4;
    result = v18;
    goto LABEL_12;
  }
  if (v19)
  {
    v12 = 5;
LABEL_12:
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 8 * v12))(result, v10);
  }
  *a2 = v6;
  return result;
}

void sub_19C3F14D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char *a18)
{
  uint64_t v18;
  char *v20;
  uint64_t v21;

  v20 = a18;
  if (a18 == &a15)
  {
    v21 = 4;
    v20 = &a15;
  }
  else
  {
    if (!a18)
      goto LABEL_6;
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_6:
  MEMORY[0x1A1AD355C](v18, 0x10A1C4044578B7ELL);
  _Unwind_Resume(a1);
}

uint64_t sub_19C3F154C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN2LML24assembleIncrementalCacheIDhEENSt3__110unique_ptrINS_18MontrealStateCacheIT_EENS1_14default_"
                     "deleteIS5_EEEEmmRKNS_8ResourceERKNS_10ParametersEEUlvE_"
    || ((v3 & (unint64_t)"ZN2LML24assembleIncrementalCacheIDhEENSt3__110unique_ptrINS_18MontrealStateCacheIT_EENS1"
                                "_14default_deleteIS5_EEEEmmRKNS_8ResourceERKNS_10ParametersEEUlvE_" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN2LML24assembleIncrementalCacheIDhEENSt3__110unique_ptrINS_18MontrealStateCacheIT_EENS1_14default_deleteIS5_EEEEmmRKNS_8ResourceERKNS_10ParametersEEUlvE_")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN2LML24assembleIncrementalCacheIDhEENSt3__110unique_ptrINS_18MontrealStateCacheIT_EENS1_14default_deleteIS5_EEEEmmRKNS_8ResourceERKNS_10ParametersEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *sub_19C3F15A0()
{
  return &unk_1E3D33570;
}

_QWORD *sub_19C3F15AC(_QWORD *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  char **v5;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;

  *a1 = off_1E3D35AC8;
  a1[1] = a3;
  a1[2] = 0;
  v5 = (char **)(a1 + 2);
  a1[3] = 0;
  a1[4] = 0;
  if (a2)
  {
    LODWORD(v8) = 0;
    while (1)
    {
      v9 = *(_QWORD *)(a4 + 24);
      if (!v9)
        sub_19C2CCC60();
      (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v9 + 48))(&v37);
      v11 = (char *)a1[3];
      v10 = a1[4];
      if ((unint64_t)v11 >= v10)
        break;
      v12 = v37;
      v37 = 0;
      *(_QWORD *)v11 = v12;
      v13 = v11 + 8;
LABEL_33:
      a1[3] = v13;
      v35 = v37;
      v37 = 0;
      if (v35)
        (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
      v8 = (v8 + 1);
      if (v8 >= a2)
        return a1;
    }
    v14 = *v5;
    v15 = v11 - *v5;
    v16 = v15 >> 3;
    v17 = (v15 >> 3) + 1;
    if (v17 >> 61)
      sub_19C2A18E8();
    v18 = v10 - (_QWORD)v14;
    if (v18 >> 2 > v17)
      v17 = v18 >> 2;
    if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
      v19 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v19 = v17;
    if (v19)
    {
      if (v19 >> 61)
        sub_19C2A143C();
      v20 = (char *)operator new(8 * v19);
    }
    else
    {
      v20 = 0;
    }
    v21 = &v20[8 * v16];
    v22 = &v20[8 * v19];
    v23 = v37;
    v37 = 0;
    *(_QWORD *)v21 = v23;
    v13 = v21 + 8;
    if (v11 == v14)
    {
      a1[2] = v21;
      a1[3] = v13;
      a1[4] = v22;
      goto LABEL_31;
    }
    v24 = v11 - v14 - 8;
    if (v24 > 0x77
      && (&v11[-(v24 & 0xFFFFFFFFFFFFFFF8) - 8] >= v21 || &v20[v15 - (v24 & 0xFFFFFFFFFFFFFFF8) - 8] >= v11))
    {
      v25 = (v24 >> 3) + 1;
      v21 -= 8 * (v25 & 0x3FFFFFFFFFFFFFFCLL);
      v26 = v11 - 32;
      v27 = &v20[8 * v16 - 16];
      v28 = v25 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v30 = *(_OWORD *)v26;
        v29 = *((_OWORD *)v26 + 1);
        *(_OWORD *)v26 = 0uLL;
        *((_OWORD *)v26 + 1) = 0uLL;
        v26 -= 32;
        *((_OWORD *)v27 - 1) = v30;
        *(_OWORD *)v27 = v29;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      if (v25 == (v25 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_26:
        v11 = (char *)a1[2];
        v32 = (char *)a1[3];
        a1[2] = v21;
        a1[3] = v13;
        a1[4] = v22;
        while (v32 != v11)
        {
          v34 = *((_QWORD *)v32 - 1);
          v32 -= 8;
          v33 = v34;
          *(_QWORD *)v32 = 0;
          if (v34)
            (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
        }
LABEL_31:
        if (v11)
          operator delete(v11);
        goto LABEL_33;
      }
      v11 -= 8 * (v25 & 0x3FFFFFFFFFFFFFFCLL);
    }
    do
    {
      v31 = *((_QWORD *)v11 - 1);
      v11 -= 8;
      *(_QWORD *)v11 = 0;
      *((_QWORD *)v21 - 1) = v31;
      v21 -= 8;
    }
    while (v11 != v14);
    goto LABEL_26;
  }
  return a1;
}

void sub_19C3F17EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  sub_19C319C30(v10);
  _Unwind_Resume(a1);
}

_QWORD *sub_19C3F1828(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  *a1 = off_1E3D35AC8;
  v2 = (_QWORD *)a1[2];
  if (v2)
  {
    v3 = (_QWORD *)a1[3];
    v4 = (void *)a1[2];
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      }
      while (v3 != v2);
      v4 = (void *)a1[2];
    }
    a1[3] = v2;
    operator delete(v4);
  }
  return a1;
}

BOOL sub_19C3F18B0(uint64_t a1, void *__s2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  size_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const void *v12;

  if (!a3)
    return 0;
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24) - v3;
  if (!v4)
    return 0;
  v7 = 0;
  v8 = 4 * a3;
  v9 = v4 >> 3;
  if (v9 <= 1)
    v10 = 1;
  else
    v10 = v9;
  while (1)
  {
    v11 = *(_QWORD *)(v3 + 8 * v7);
    v12 = *(const void **)(v11 + 8);
    if (a3 == (uint64_t)(*(_QWORD *)(v11 + 16) - (_QWORD)v12) >> 2 && !memcmp(v12, __s2, v8))
      break;
    if (v10 == ++v7)
      return 0;
  }
  return (int)v7 >= 0;
}

BOOL sub_19C3F1950(_QWORD *a1, char *a2, uint64_t a3)
{
  return (int)sub_19C3F1A7C(a1, a2, a3) >= 0;
}

uint64_t sub_19C3F196C(_QWORD *a1, char *a2, uint64_t a3)
{
  unsigned int v4;

  v4 = sub_19C3F1A7C(a1, a2, a3);
  if ((v4 & 0x80000000) != 0)
    return 0;
  else
    return *(_QWORD *)(*(_QWORD *)(a1[2] + 8 * v4) + 8);
}

uint64_t sub_19C3F19B0(_QWORD *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v8;
  uint64_t v9;

  v8 = sub_19C3F1A7C(a1, a2, a3);
  if ((v8 & 0x80000000) != 0)
    __assert_rtn("populateProbabilities", "LRUStateBaseCache.hpp", 125, "false && \"client requested probabilities for a context that's not in the cache\"");
  v9 = *(_QWORD *)(a1[2] + 8 * v8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 16))(v9, a4, a5);
}

uint64_t sub_19C3F1A1C(_QWORD *a1, char *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v6;
  uint64_t v7;

  v6 = sub_19C3F1A7C(a1, a2, a3);
  if ((v6 & 0x80000000) != 0)
    __assert_rtn("getProbability", "LRUStateBaseCache.hpp", 138, "false && \"client requested a probability for a context that's not in the cache\"");
  v7 = *(_QWORD *)(a1[2] + 8 * v6);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 24))(v7, a4);
}

uint64_t sub_19C3F1A7C(_QWORD *a1, char *__s2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  size_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const void *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  _DWORD *v18;
  _DWORD *v19;
  size_t v20;
  size_t v21;

  if (!a3)
    return 0xFFFFFFFFLL;
  v4 = a1[2];
  v5 = a1[3] - v4;
  if (v5)
  {
    v8 = 0;
    v9 = 4 * a3;
    v10 = v5 >> 3;
    if (v10 <= 1)
      v11 = 1;
    else
      v11 = v10;
    while (1)
    {
      v12 = *(_QWORD *)(v4 + 8 * v8);
      v13 = *(const void **)(v12 + 8);
      if (a3 == (uint64_t)(*(_QWORD *)(v12 + 16) - (_QWORD)v13) >> 2 && !memcmp(v13, __s2, v9))
        break;
      if (v11 == ++v8)
      {
        LODWORD(v8) = -1;
        goto LABEL_13;
      }
    }
    if ((v8 & 0x80000000) == 0)
      return v8;
LABEL_13:
    v14 = 0;
    v5 = 0;
    do
    {
      v16 = *(_QWORD *)(v4 + 8 * v14);
      v17 = *(_DWORD **)(v16 + 8);
      v18 = *(_DWORD **)(v16 + 16);
      if (v18 == v17)
      {
        v15 = 0;
      }
      else
      {
        v15 = 0;
        v19 = v18 - 1;
        v20 = v9 - 4;
        do
        {
          if (*v19 != *(_DWORD *)&__s2[v20])
            break;
          ++v15;
          if (v19 == v17)
            break;
          --v19;
          v21 = v20;
          v20 -= 4;
        }
        while (v21);
      }
      if (v15 > v5)
      {
        v5 = v15;
        LODWORD(v8) = v14;
      }
      ++v14;
    }
    while (v14 != v11);
  }
  else
  {
    LODWORD(v8) = -1;
  }
  if ((unint64_t)v5 < a1[1])
    return 0xFFFFFFFFLL;
  else
    return v8;
}

_QWORD *sub_19C3F1BB0(_QWORD *a1)
{
  uint64_t v2;
  const void *v3;
  _QWORD *v4;
  _QWORD *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  *a1 = &off_1E3D36D00;
  v2 = a1[6];
  a1[6] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (const void *)a1[5];
  if (v3)
    CFRelease(v3);
  a1[5] = 0;
  *a1 = off_1E3D35AC8;
  v4 = (_QWORD *)a1[2];
  if (v4)
  {
    v5 = (_QWORD *)a1[3];
    v6 = (void *)a1[2];
    if (v5 != v4)
    {
      do
      {
        v8 = *--v5;
        v7 = v8;
        *v5 = 0;
        if (v8)
          (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      }
      while (v5 != v4);
      v6 = (void *)a1[2];
    }
    a1[3] = v4;
    operator delete(v6);
  }
  return a1;
}

void sub_19C3F1C68(_QWORD *a1)
{
  uint64_t v2;
  const void *v3;
  _QWORD *v4;
  _QWORD *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  *a1 = &off_1E3D36D00;
  v2 = a1[6];
  a1[6] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (const void *)a1[5];
  if (v3)
    CFRelease(v3);
  a1[5] = 0;
  *a1 = off_1E3D35AC8;
  v4 = (_QWORD *)a1[2];
  if (v4)
  {
    v5 = (_QWORD *)a1[3];
    v6 = (void *)a1[2];
    if (v5 != v4)
    {
      do
      {
        v8 = *--v5;
        v7 = v8;
        *v5 = 0;
        if (v8)
          (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      }
      while (v5 != v4);
      v6 = (void *)a1[2];
    }
    a1[3] = v4;
    operator delete(v6);
  }
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C3F1D30(uint64_t a1, _DWORD *__src, size_t a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t result;
  unint64_t v13;
  uint64_t v15;
  size_t v16;
  uint64_t v17;
  uint64_t v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const void *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _DWORD *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  _DWORD *v41;
  uint64_t v42;
  int v43;
  int v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  const void *v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;

  if (a3)
  {
    v7 = *a4;
    if (*a4)
    {
      v9 = *(_QWORD **)(a1 + 16);
      v10 = *(_QWORD **)(a1 + 24);
      if (v9 != v10 && a6 != 0)
      {
        v13 = a3;
        v15 = 0;
        v16 = a3;
        if ((unint64_t)(v10 - v9) <= 1)
          v17 = 1;
        else
          v17 = v10 - v9;
        while (1)
        {
          v18 = v9[v15];
          v19 = *(const void **)(v18 + 8);
          if (v13 == (uint64_t)(*(_QWORD *)(v18 + 16) - (_QWORD)v19) >> 2 && !memcmp(v19, __src, v16 * 4))
            break;
          if (v17 == ++v15)
            goto LABEL_29;
        }
        if ((v15 & 0x80000000) == 0)
        {
          while (1)
          {
            v20 = *(_QWORD *)(a1 + 16);
            v21 = *(_QWORD *)(a1 + 24) - v20;
            if (!v21)
              break;
            v22 = 0;
            v23 = v21 >> 3;
            v24 = v23 <= 1 ? 1 : v23;
            while (1)
            {
              v25 = *(_QWORD *)(v20 + 8 * v22);
              v26 = *(const void **)(v25 + 8);
              if (v13 == (uint64_t)(*(_QWORD *)(v25 + 16) - (_QWORD)v26) >> 2 && !memcmp(v26, __src, 4 * v13))
                break;
              ++v22;
              result = 1;
              if (v24 == v22)
                return result;
            }
            if ((v22 & 0x80000000) != 0)
              break;
            v27 = *(_QWORD *)(v20 + 8 * v22);
            do
            {
              v28 = __ldaxr(&qword_1EDB97098);
              v29 = v28 + 1;
            }
            while (__stlxr(v29, &qword_1EDB97098));
            *(_QWORD *)(v27 + 40) = v29;
            result = 1;
            if (!--v13)
              return result;
          }
          return 1;
        }
LABEL_29:
        v30 = v9 + 1;
        if (v9 + 1 != v10)
        {
          v31 = (_QWORD *)*v9;
          v32 = v9 + 1;
          do
          {
            v34 = (_QWORD *)*v32++;
            v33 = v34;
            if (v34[5] < v31[5])
            {
              v31 = v33;
              v9 = v30;
            }
            v30 = v32;
          }
          while (v32 != v10);
        }
        if (v9 == v10)
          __assert_rtn("getOldestEntry", "LRUStateBaseCache.hpp", 31, "entryIterator != m_cache.end()");
        v35 = (_QWORD *)*v9;
        v36 = (_DWORD *)v35[1];
        v37 = v35[2] - (_QWORD)v36;
        if (!v37 || (v38 = v37 >> 2, v38 > v13) || (v38 <= 1 ? (v39 = 1) : (v39 = v38), *v36 != *__src))
        {
LABEL_45:
          *a4 = 0;
          sub_19C39F614(v35 + 1, (char *)__src, (char *)&__src[v16], (uint64_t)(4 * v13) >> 2);
          do
          {
            v45 = __ldaxr(&qword_1EDB97098);
            v46 = v45 + 1;
          }
          while (__stlxr(v46, &qword_1EDB97098));
          v47 = v35[4];
          v35[4] = v7;
          v35[5] = v46;
          if (v47)
            (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
          (*(void (**)(_QWORD *, uint64_t, uint64_t))(*v35 + 32))(v35, a5, a6);
          while (1)
          {
            v48 = *(_QWORD *)(a1 + 16);
            v49 = *(_QWORD *)(a1 + 24) - v48;
            if (!v49)
              break;
            v50 = 0;
            v51 = v49 >> 3;
            v52 = v51 <= 1 ? 1 : v51;
            while (1)
            {
              v53 = *(_QWORD *)(v48 + 8 * v50);
              v54 = *(const void **)(v53 + 8);
              if (v13 == (uint64_t)(*(_QWORD *)(v53 + 16) - (_QWORD)v54) >> 2 && !memcmp(v54, __src, 4 * v13))
                break;
              if (v52 == ++v50)
                return 1;
            }
            if ((v50 & 0x80000000) != 0)
              break;
            v55 = *(_QWORD *)(v48 + 8 * v50);
            do
            {
              v56 = __ldaxr(&qword_1EDB97098);
              v57 = v56 + 1;
            }
            while (__stlxr(v57, &qword_1EDB97098));
            *(_QWORD *)(v55 + 40) = v57;
            result = 1;
            if (!--v13)
              return result;
          }
          return 1;
        }
        v40 = 0;
        v41 = v36 + 1;
        v42 = v39 - 1;
        while (v42 != v40)
        {
          v43 = v41[v40];
          v44 = __src[++v40];
          if (v43 != v44)
          {
            if (v38 <= v40)
              return 0;
            goto LABEL_45;
          }
        }
      }
    }
  }
  return 0;
}

void sub_19C3F2040(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_19C3F2060(_QWORD *a1, char *a2, uint64_t a3)
{
  unsigned int v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE *v7;
  int64_t v8;
  char *v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  unint64_t i;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const void *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  CFArrayRef *v28;
  const void *ValueAtIndex;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  __CFArray *Mutable;
  _QWORD *v37;
  uint64_t v38;
  char *__p;
  char *v40;
  void *v41;
  char *v42;

  v4 = sub_19C3F1A7C(a1, a2, a3);
  if ((v4 & 0x80000000) != 0)
    return 0;
  v5 = *(_QWORD *)(a1[2] + 8 * v4);
  v42 = 0;
  v41 = 0;
  v7 = *(_BYTE **)(v5 + 8);
  v6 = *(_BYTE **)(v5 + 16);
  v8 = v6 - v7;
  if (v6 == v7)
  {
    v9 = 0;
    v10 = 0;
  }
  else
  {
    if (v8 < 0)
      sub_19C2A18E8();
    v9 = (char *)operator new(v6 - v7);
    v10 = &v9[4 * (v8 >> 2)];
    v41 = v9;
    memcpy(v9, v7, v8);
    v42 = v10;
  }
  v12 = v10 - v9;
  sub_19C3F29D8(a1[5], (v10 - v9) >> 2);
  __p = 0;
  v40 = 0;
  if (v10 != v9)
  {
    if (v12 < 0)
      sub_19C2A18E8();
    v13 = (char *)operator new(v10 - v9);
    v14 = &v13[4 * ((v10 - v9) >> 2)];
    __p = v13;
    memset(v13, 255, v12 & 0xFFFFFFFFFFFFFFFCLL);
    v40 = v14;
  }
  for (i = 0; ; ++i)
  {
    v16 = v41;
    if (i >= (v42 - (_BYTE *)v41) >> 2)
      break;
    v17 = a1[2];
    v18 = a1[3] - v17;
    if (!v18)
      goto LABEL_23;
    v19 = 0;
    v20 = v18 >> 3;
    v21 = v20 <= 1 ? 1 : v20;
    while (1)
    {
      v22 = *(_QWORD *)(v17 + 8 * v19);
      v23 = *(const void **)(v22 + 8);
      if (i + 1 == (uint64_t)(*(_QWORD *)(v22 + 16) - (_QWORD)v23) >> 2 && !memcmp(v23, v41, 4 * (i + 1)))
        break;
      if (v21 == ++v19)
        goto LABEL_23;
    }
    if ((v19 & 0x80000000) != 0)
    {
LABEL_23:
      v11 = 0;
      goto LABEL_24;
    }
    *(_DWORD *)&__p[4 * i] = v19;
    v24 = *(_QWORD *)(v17 + 8 * v19);
    do
    {
      v25 = __ldaxr(&qword_1EDB97098);
      v26 = v25 + 1;
    }
    while (__stlxr(v26, &qword_1EDB97098));
    *(_QWORD *)(v24 + 40) = v26;
    v27 = a1[5];
    v28 = (CFArrayRef *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v24 + 32) + 16))(*(_QWORD *)(v24 + 32));
    ValueAtIndex = CFArrayGetValueAtIndex(*v28, 0);
    sub_19C3F2B40(v27, (uint64_t)ValueAtIndex);
  }
  if ((int)((unint64_t)(v40 - __p) >> 2) >= 1)
  {
    v31 = ((unint64_t)(v40 - __p) >> 2);
    do
    {
      v32 = *(_QWORD *)(a1[2] + 8 * *(int *)&__p[4 * (v31 - 1)]);
      do
      {
        v33 = __ldaxr(&qword_1EDB97098);
        v34 = v33 + 1;
      }
      while (__stlxr(v34, &qword_1EDB97098));
      *(_QWORD *)(v32 + 40) = v34;
    }
    while (v31-- > 1);
  }
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 1, MEMORY[0x1E0C9B378]);
  CFArrayAppendValue(Mutable, (const void *)a1[5]);
  v16 = v41;
  v37 = (_QWORD *)operator new();
  v11 = v37;
  *v37 = &off_1E3D364C0;
  if (Mutable)
  {
    CFRetain(Mutable);
    sub_19C31D164(v11 + 1, Mutable);
  }
  else
  {
    v37[1] = 0;
  }
  v11[2] = ((unint64_t)(v42 - (_BYTE *)v41) >> 2);
  v38 = a1[6];
  a1[6] = v11;
  if (v38)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
    v11 = (_QWORD *)a1[6];
  }
  if (Mutable)
    CFRelease(Mutable);
LABEL_24:
  if (__p)
    operator delete(__p);
  if (v16)
    operator delete(v16);
  return v11;
}

void sub_19C3F235C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  uint64_t v15;

  MEMORY[0x1A1AD355C](v15, 0x10E1C406EE1D4F3);
  sub_19C3134C4(&a10);
  if (__p)
    operator delete(__p);
  if (a14)
  {
    a15 = (uint64_t)a14;
    operator delete(a14);
  }
  _Unwind_Resume(a1);
}

_QWORD *sub_19C3F23F4(_QWORD *a1, char *a2, uint64_t a3)
{
  unsigned int v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE *v7;
  int64_t v8;
  char *v9;
  char *v10;
  _QWORD *v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const void *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  CFArrayRef *v24;
  const void *ValueAtIndex;
  __CFArray *Mutable;
  _QWORD *v27;
  uint64_t v28;
  _BYTE *v30;
  char *v31;

  v4 = sub_19C3F1A7C(a1, a2, a3);
  if ((v4 & 0x80000000) != 0)
    return 0;
  v5 = *(_QWORD *)(a1[2] + 8 * v4);
  v31 = 0;
  v30 = 0;
  v7 = *(_BYTE **)(v5 + 8);
  v6 = *(_BYTE **)(v5 + 16);
  v8 = v6 - v7;
  if (v6 == v7)
  {
    v10 = 0;
    v9 = 0;
  }
  else
  {
    if (v8 < 0)
      sub_19C2A18E8();
    v9 = (char *)operator new(v6 - v7);
    v10 = &v9[4 * (v8 >> 2)];
    v30 = v9;
    memcpy(v9, v7, v8);
    v31 = v10;
  }
  sub_19C3F29D8(a1[5], 1);
  v12 = v10 - v9;
  if (v10 == v9)
    goto LABEL_28;
  v13 = a1[2];
  v14 = a1[3] - v13;
  if (!v14)
    goto LABEL_28;
  v15 = 0;
  v16 = v14 >> 3;
  v17 = v16 <= 1 ? 1 : v16;
  while (1)
  {
    v18 = *(_QWORD *)(v13 + 8 * v15);
    v19 = *(const void **)(v18 + 8);
    if (*(_QWORD *)(v18 + 16) - (_QWORD)v19 == v12 && !memcmp(v19, v9, v12))
      break;
    if (v17 == ++v15)
      goto LABEL_28;
  }
  if ((v15 & 0x80000000) != 0)
LABEL_28:
    __assert_rtn("getLastIncrementalState", "LRUIncrementalStateCache.hpp", 153, "index >= 0");
  v20 = *(_QWORD *)(v13 + 8 * v15);
  do
  {
    v21 = __ldaxr(&qword_1EDB97098);
    v22 = v21 + 1;
  }
  while (__stlxr(v22, &qword_1EDB97098));
  *(_QWORD *)(v20 + 40) = v22;
  v23 = a1[5];
  v24 = (CFArrayRef *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v20 + 32) + 16))(*(_QWORD *)(v20 + 32));
  ValueAtIndex = CFArrayGetValueAtIndex(*v24, 0);
  sub_19C3F2B40(v23, (uint64_t)ValueAtIndex);
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 1, MEMORY[0x1E0C9B378]);
  CFArrayAppendValue(Mutable, (const void *)a1[5]);
  v27 = (_QWORD *)operator new();
  v11 = v27;
  *v27 = &off_1E3D364C0;
  if (Mutable)
  {
    CFRetain(Mutable);
    sub_19C31D164(v11 + 1, Mutable);
  }
  else
  {
    v27[1] = 0;
  }
  v11[2] = ((unint64_t)(v31 - v30) >> 2);
  v28 = a1[6];
  a1[6] = v11;
  if (v28)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
    v11 = (_QWORD *)a1[6];
  }
  if (Mutable)
    CFRelease(Mutable);
  if (v30)
    operator delete(v30);
  return v11;
}

void sub_19C3F2634(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  MEMORY[0x1A1AD355C](v11, 0x10E1C406EE1D4F3);
  sub_19C3134C4((const void **)&a9);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_19C3F26A0(_QWORD *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  int64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const void *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  void *__p;

  v8 = sub_19C3F1A7C(a1, a2, a3);
  if ((v8 & 0x80000000) != 0)
    __assert_rtn("populateProbabilities", "LRUIncrementalStateCache.hpp", 174, "false && \"client requested probabilities for a context that's not in the cache\"");
  v9 = 8 * v8;
  (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1[2] + v9) + 16))(*(_QWORD *)(a1[2] + v9), a4, a5);
  v10 = *(_QWORD *)(a1[2] + v9);
  __p = 0;
  v12 = *(_BYTE **)(v10 + 8);
  v11 = *(_BYTE **)(v10 + 16);
  v13 = v11 - v12;
  if (v11 != v12)
  {
    if (v13 < 0)
      sub_19C2A18E8();
    v14 = operator new(v11 - v12);
    v15 = v13 >> 2;
    __p = v14;
    memcpy(v14, v12, v13);
    do
    {
      v16 = a1[2];
      v17 = a1[3] - v16;
      if (!v17)
        break;
      v18 = 0;
      v19 = v17 >> 3;
      v20 = v19 <= 1 ? 1 : v19;
      while (1)
      {
        v21 = *(_QWORD *)(v16 + 8 * v18);
        v22 = *(const void **)(v21 + 8);
        if (v15 == (uint64_t)(*(_QWORD *)(v21 + 16) - (_QWORD)v22) >> 2 && !memcmp(v22, v14, 4 * v15))
          break;
        if (v20 == ++v18)
          goto LABEL_16;
      }
      if ((v18 & 0x80000000) != 0)
        break;
      v23 = *(_QWORD *)(v16 + 8 * v18);
      do
      {
        v24 = __ldaxr(&qword_1EDB97098);
        v25 = v24 + 1;
      }
      while (__stlxr(v25, &qword_1EDB97098));
      *(_QWORD *)(v23 + 40) = v25;
      --v15;
    }
    while (v15);
  }
LABEL_16:
  if (__p)
    operator delete(__p);
}

void sub_19C3F2828(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

float sub_19C3F2844(_QWORD *a1, char *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  _BYTE *v10;
  _BYTE *v11;
  int64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const void *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  void *__p;

  v6 = sub_19C3F1A7C(a1, a2, a3);
  if ((v6 & 0x80000000) != 0)
    __assert_rtn("getProbability", "LRUIncrementalStateCache.hpp", 190, "false && \"client requested a probability for a context that's not in the cache\"");
  v7 = 8 * v6;
  v8 = (*(float (**)(_QWORD, uint64_t))(**(_QWORD **)(a1[2] + v7) + 24))(*(_QWORD *)(a1[2] + v7), a4);
  v9 = *(_QWORD *)(a1[2] + v7);
  __p = 0;
  v11 = *(_BYTE **)(v9 + 8);
  v10 = *(_BYTE **)(v9 + 16);
  v12 = v10 - v11;
  if (v10 != v11)
  {
    if (v12 < 0)
      sub_19C2A18E8();
    v13 = operator new(v10 - v11);
    v14 = v12 >> 2;
    __p = v13;
    memcpy(v13, v11, v12);
    do
    {
      v15 = a1[2];
      v16 = a1[3] - v15;
      if (!v16)
        break;
      v17 = 0;
      v18 = v16 >> 3;
      v19 = v18 <= 1 ? 1 : v18;
      while (1)
      {
        v20 = *(_QWORD *)(v15 + 8 * v17);
        v21 = *(const void **)(v20 + 8);
        if (v14 == (uint64_t)(*(_QWORD *)(v20 + 16) - (_QWORD)v21) >> 2 && !memcmp(v21, v13, 4 * v14))
          break;
        if (v19 == ++v17)
          goto LABEL_16;
      }
      if ((v17 & 0x80000000) != 0)
        break;
      v22 = *(_QWORD *)(v15 + 8 * v17);
      do
      {
        v23 = __ldaxr(&qword_1EDB97098);
        v24 = v23 + 1;
      }
      while (__stlxr(v24, &qword_1EDB97098));
      *(_QWORD *)(v22 + 40) = v24;
      --v14;
    }
    while (v14);
  }
LABEL_16:
  if (__p)
    operator delete(__p);
  return v8;
}

void sub_19C3F29BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C3F29D8(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v7 = 0;
  v8 = &v7;
  v9 = 0x2000000000;
  v4 = off_1EDB96E80;
  v10 = off_1EDB96E80;
  if (off_1EDB96E80)
    goto LABEL_7;
  v11 = 0;
  if (qword_1EE41C538)
  {
    v4 = (void *)qword_1EE41C538;
  }
  else
  {
    v12 = xmmword_1E3D3C110;
    v13 = 0;
    qword_1EE41C538 = _sl_dlopen();
    v5 = v11;
    v4 = (void *)qword_1EE41C538;
    if (!qword_1EE41C538)
    {
      v5 = (void *)abort_report_np();
      goto LABEL_11;
    }
    if (v11)
      goto LABEL_12;
  }
  while (1)
  {
    v4 = dlsym(v4, "MRLNeuralNetworkResetIncrementalState");
    v8[3] = (uint64_t)v4;
    off_1EDB96E80 = v4;
LABEL_7:
    _Block_object_dispose(&v7, 8);
    if (v4)
      break;
    dlerror();
    v5 = (void *)abort_report_np();
LABEL_11:
    __break(1u);
LABEL_12:
    free(v5);
  }
  return ((uint64_t (*)(uint64_t, uint64_t))v4)(a1, a2);
}

void sub_19C3F2B24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_19C3F2B40(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v7 = 0;
  v8 = &v7;
  v9 = 0x2000000000;
  v4 = off_1EDB96E88;
  v10 = off_1EDB96E88;
  if (off_1EDB96E88)
    goto LABEL_7;
  v11 = 0;
  if (qword_1EE41C538)
  {
    v4 = (void *)qword_1EE41C538;
  }
  else
  {
    v12 = xmmword_1E3D3C110;
    v13 = 0;
    qword_1EE41C538 = _sl_dlopen();
    v5 = v11;
    v4 = (void *)qword_1EE41C538;
    if (!qword_1EE41C538)
    {
      v5 = (void *)abort_report_np();
      goto LABEL_11;
    }
    if (v11)
      goto LABEL_12;
  }
  while (1)
  {
    v4 = dlsym(v4, "MRLNeuralNetworkAppendIncrementalState");
    v8[3] = (uint64_t)v4;
    off_1EDB96E88 = v4;
LABEL_7:
    _Block_object_dispose(&v7, 8);
    if (v4)
      break;
    dlerror();
    v5 = (void *)abort_report_np();
LABEL_11:
    __break(1u);
LABEL_12:
    free(v5);
  }
  return ((uint64_t (*)(uint64_t, uint64_t))v4)(a1, a2);
}

void sub_19C3F2C8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19C3F2CAC()
{
  JUMPOUT(0x1A1AD355CLL);
}

_QWORD *sub_19C3F2CC0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E3D39558;
  result[1] = v3;
  return result;
}

uint64_t sub_19C3F2CF4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E3D39558;
  a2[1] = v2;
  return result;
}

uint64_t sub_19C3F2D10@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t result;

  v2 = operator new();
  v3 = v2;
  *(_QWORD *)v2 = off_1E3D35F00;
  *(_OWORD *)(v2 + 8) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  do
  {
    v4 = __ldaxr(&qword_1EDB97098);
    v5 = v4 + 1;
  }
  while (__stlxr(v5, &qword_1EDB97098));
  *(_QWORD *)(v2 + 40) = v5;
  *(_QWORD *)v2 = &off_1E3D351D0;
  result = operator new[]();
  *(_QWORD *)(v3 + 48) = result;
  *a1 = v3;
  return result;
}

void sub_19C3F2DC4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;
  uint64_t v5;
  void *v6;

  *v1 = v3;
  v5 = v1[4];
  v1[4] = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *v2;
  if (*v2)
  {
    v1[2] = v6;
    operator delete(v6);
  }
  MEMORY[0x1A1AD355C](v1, 0x10B1C40C560DF64);
  _Unwind_Resume(a1);
}

uint64_t sub_19C3F2E14(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZZN2LML24assembleIncrementalCacheIDhEENSt3__110unique_ptrINS_18MontrealStateCacheIT_EENS1_14default"
                     "_deleteIS5_EEEEmmRKNS_8ResourceERKNS_10ParametersEENKUlvE_clEvEUlvE_"
    || ((v3 & (unint64_t)"ZZN2LML24assembleIncrementalCacheIDhEENSt3__110unique_ptrINS_18MontrealStateCacheIT_EENS"
                                "1_14default_deleteIS5_EEEEmmRKNS_8ResourceERKNS_10ParametersEENKUlvE_clEvEUlvE_" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZZN2LML24assembleIncrementalCacheIDhEENSt3__110unique_ptrINS_18MontrealStateCacheIT_EENS1_14default_deleteIS5_EEEEmmRKNS_8ResourceERKNS_10ParametersEENKUlvE_clEvEUlvE_")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZN2LML24assembleIncrementalCacheIDhEENSt3__110unique_ptrINS_18MontrealStateCacheIT_EENS1_14default_deleteIS5_EEEEmmRKNS_8ResourceERKNS_10ParametersEENKUlvE_clEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *sub_19C3F2E68()
{
  return &unk_1E3D33780;
}

_QWORD *sub_19C3F2E74(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  *a1 = &off_1E3D351D0;
  v2 = a1[6];
  a1[6] = 0;
  if (v2)
    MEMORY[0x1A1AD3538](v2, 0x1000C80BDFB0063);
  *a1 = off_1E3D35F00;
  v3 = a1[4];
  a1[4] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (void *)a1[1];
  if (v4)
  {
    a1[2] = v4;
    operator delete(v4);
  }
  return a1;
}

void sub_19C3F2EF4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  *a1 = &off_1E3D351D0;
  v2 = a1[6];
  a1[6] = 0;
  if (v2)
    MEMORY[0x1A1AD3538](v2, 0x1000C80BDFB0063);
  *a1 = off_1E3D35F00;
  v3 = a1[4];
  a1[4] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (void *)a1[1];
  if (v4)
  {
    a1[2] = v4;
    operator delete(v4);
  }
  JUMPOUT(0x1A1AD355CLL);
}

void *sub_19C3F2F84(void *result, void *__dst, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;

  do
  {
    v3 = __ldaxr(&qword_1EDB97098);
    v4 = v3 + 1;
  }
  while (__stlxr(v4, &qword_1EDB97098));
  *((_QWORD *)result + 5) = v4;
  if (a3)
    return memmove(__dst, *((const void **)result + 6), 2 * a3);
  return result;
}

float sub_19C3F2FBC(uint64_t a1, unsigned int a2)
{
  unint64_t v2;
  unint64_t v3;
  float result;

  do
  {
    v2 = __ldaxr(&qword_1EDB97098);
    v3 = v2 + 1;
  }
  while (__stlxr(v3, &qword_1EDB97098));
  *(_QWORD *)(a1 + 40) = v3;
  _H0 = *(_WORD *)(*(_QWORD *)(a1 + 48) + 2 * a2);
  __asm { FCVT            S0, H0 }
  return result;
}

void *sub_19C3F2FE8(void *result, const void *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;

  do
  {
    v3 = __ldaxr(&qword_1EDB97098);
    v4 = v3 + 1;
  }
  while (__stlxr(v4, &qword_1EDB97098));
  *((_QWORD *)result + 5) = v4;
  if (a3)
    return memmove(*((void **)result + 6), a2, 2 * a3);
  return result;
}

_QWORD *sub_19C3F3020(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E3D35E98;
  v2 = a1[5];
  a1[5] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 == a1 + 1)
  {
    v4 = 4;
    v3 = a1 + 1;
    goto LABEL_7;
  }
  if (v3)
  {
    v4 = 5;
LABEL_7:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_19C3F3094(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E3D35E98;
  v2 = a1[5];
  a1[5] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 == a1 + 1)
  {
    v4 = 4;
    v3 = a1 + 1;
  }
  else
  {
    if (!v3)
      goto LABEL_8;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_8:
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C3F3118(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;

  v12 = *(_QWORD *)(a1 + 40);
  if (!v12)
  {
    v13 = *(_QWORD *)(a1 + 32);
    if (!v13)
      sub_19C2CCC60();
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v13 + 48))(&v22);
    v14 = v22;
    v22 = 0;
    v15 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v14;
    if (v15)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
      v16 = v22;
      v22 = 0;
      if (v16)
        (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    }
    v12 = *(_QWORD *)(a1 + 40);
  }
  v17 = *a4;
  *a4 = 0;
  v21 = v17;
  v18 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t))(*(_QWORD *)v12 + 16))(v12, a2, a3, &v21, a5, a6);
  v19 = v21;
  v21 = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  return v18;
}

void sub_19C3F320C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C3F3230(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v6 = *(_QWORD *)(a1 + 40);
  if (!v6)
  {
    v7 = *(_QWORD *)(a1 + 32);
    if (!v7)
      sub_19C2CCC60();
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v7 + 48))(&v12);
    v8 = v12;
    v12 = 0;
    v9 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v8;
    if (v9)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      v10 = v12;
      v12 = 0;
      if (v10)
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    }
    v6 = *(_QWORD *)(a1 + 40);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 24))(v6, a2, a3);
}

uint64_t sub_19C3F32D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v6 = *(_QWORD *)(a1 + 40);
  if (!v6)
  {
    v7 = *(_QWORD *)(a1 + 32);
    if (!v7)
      sub_19C2CCC60();
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v7 + 48))(&v12);
    v8 = v12;
    v12 = 0;
    v9 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v8;
    if (v9)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      v10 = v12;
      v12 = 0;
      if (v10)
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    }
    v6 = *(_QWORD *)(a1 + 40);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 32))(v6, a2, a3);
}

uint64_t sub_19C3F3380(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v6 = *(_QWORD *)(a1 + 40);
  if (!v6)
  {
    v7 = *(_QWORD *)(a1 + 32);
    if (!v7)
      sub_19C2CCC60();
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v7 + 48))(&v12);
    v8 = v12;
    v12 = 0;
    v9 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v8;
    if (v9)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      v10 = v12;
      v12 = 0;
      if (v10)
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    }
    v6 = *(_QWORD *)(a1 + 40);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 40))(v6, a2, a3);
}

uint64_t sub_19C3F3428(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v6 = *(_QWORD *)(a1 + 40);
  if (!v6)
  {
    v7 = *(_QWORD *)(a1 + 32);
    if (!v7)
      sub_19C2CCC60();
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v7 + 48))(&v12);
    v8 = v12;
    v12 = 0;
    v9 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v8;
    if (v9)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      v10 = v12;
      v12 = 0;
      if (v10)
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    }
    v6 = *(_QWORD *)(a1 + 40);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 48))(v6, a2, a3);
}

uint64_t sub_19C3F34D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v6 = *(_QWORD *)(a1 + 40);
  if (!v6)
  {
    v7 = *(_QWORD *)(a1 + 32);
    if (!v7)
      sub_19C2CCC60();
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v7 + 48))(&v12);
    v8 = v12;
    v12 = 0;
    v9 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v8;
    if (v9)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      v10 = v12;
      v12 = 0;
      if (v10)
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    }
    v6 = *(_QWORD *)(a1 + 40);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 56))(v6, a2, a3);
}

uint64_t sub_19C3F3578(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v10 = *(_QWORD *)(a1 + 40);
  if (!v10)
  {
    v11 = *(_QWORD *)(a1 + 32);
    if (!v11)
      sub_19C2CCC60();
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v11 + 48))(&v16);
    v12 = v16;
    v16 = 0;
    v13 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v12;
    if (v13)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
      v14 = v16;
      v16 = 0;
      if (v14)
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    }
    v10 = *(_QWORD *)(a1 + 40);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v10 + 64))(v10, a2, a3, a4, a5);
}

uint64_t sub_19C3F3638(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v8 = *(_QWORD *)(a1 + 40);
  if (!v8)
  {
    v9 = *(_QWORD *)(a1 + 32);
    if (!v9)
      sub_19C2CCC60();
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v9 + 48))(&v14);
    v10 = v14;
    v14 = 0;
    v11 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v10;
    if (v11)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      v12 = v14;
      v14 = 0;
      if (v12)
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    }
    v8 = *(_QWORD *)(a1 + 40);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 72))(v8, a2, a3, a4);
}

uint64_t sub_19C3F36E8(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_19C3F3708(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[4];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  operator delete(__p);
}

uint64_t sub_19C3F3760(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

_QWORD *sub_19C3F37B8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_1E3D38D70;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void sub_19C3F381C(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_1E3D38D70;
  v1 = (std::__shared_weak_count *)a1[4];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x1A1AD355CLL);
}

__n128 sub_19C3F3890(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v2 = (char *)operator new(0x38uLL);
  *(_QWORD *)v2 = &off_1E3D38D70;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 32);
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  *((_QWORD *)v2 + 4) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 sub_19C3F38F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  __n128 result;

  *(_QWORD *)a2 = &off_1E3D38D70;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 32) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(a2 + 40) = result;
  return result;
}

void sub_19C3F3930(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_19C3F3988(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t (***v8)();
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t (***v13)();
  uint64_t v14;
  _QWORD *v15;
  uint64_t (**v16)();
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t (**v24)();
  std::__shared_weak_count *v25;
  uint64_t (***v26)();
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v4 = (std::__shared_weak_count *)a1[1];
  v5 = a1[2] - 5;
  v6 = (_QWORD *)operator new();
  v7 = a1[5];
  v24 = &off_1E3D39500;
  v25 = v4;
  v26 = &v24;
  sub_19C3F15AC(v6, v7, v5, (uint64_t)&v24);
  *v6 = &off_1E3D350D0;
  v8 = v26;
  if (v26 == &v24)
  {
    v9 = 4;
    v8 = &v24;
  }
  else
  {
    if (!v26)
      goto LABEL_6;
    v9 = 5;
  }
  (*v8)[v9]();
LABEL_6:
  v10 = a1[2];
  v11 = (_QWORD *)operator new();
  v12 = a1[6];
  v24 = &off_1E3D394A8;
  v26 = &v24;
  sub_19C3F15AC(v11, v12, v10 - 5, (uint64_t)&v24);
  *v11 = &off_1E3D350D0;
  v13 = v26;
  if (v26 == &v24)
  {
    v14 = 4;
    v13 = &v24;
  }
  else
  {
    if (!v26)
      goto LABEL_11;
    v14 = 5;
  }
  (*v13)[v14]();
LABEL_11:
  v15 = (_QWORD *)operator new();
  v16 = (uint64_t (**)())a1[3];
  v17 = (std::__shared_weak_count *)a1[4];
  v24 = v16;
  v25 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldxr(p_shared_owners);
    while (__stxr(v19 + 1, p_shared_owners));
    v15[1] = v6;
    v15[2] = v11;
    *v15 = &off_1E3D36530;
    v15[3] = v16;
    v15[4] = v17;
    v20 = (unint64_t *)&v17->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
    v16 = (uint64_t (**)())v15[3];
  }
  else
  {
    *v15 = &off_1E3D36530;
    v15[1] = v6;
    v15[2] = v11;
    v15[3] = v16;
    v15[4] = 0;
  }
  if (!(*((unsigned int (**)(uint64_t (**)()))*v16 + 2))(v16))
    __assert_rtn("SegregatedStateCache", "LMSegregatedStateCache.hpp", 23, "m_tokenIDMapper->modelType() != NNModelType::Word && \"Unsupported model type\"");
  if (v17)
  {
    v22 = (unint64_t *)&v17->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  *a2 = v15;
}

void sub_19C3F3BFC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_19C3F3C7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  uint64_t v13;
  char *v14;
  char *v16;
  uint64_t v17;

  v16 = a13;
  if (a13 == v14)
  {
    v17 = 4;
    v16 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  MEMORY[0x1A1AD355C](v13, 0x10A1C405897D53FLL);
  _Unwind_Resume(a1);
}

uint64_t sub_19C3F3D58(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN2LML23assembleSegregatedCacheIDhEENSt3__110unique_ptrINS_18MontrealStateCacheIT_EENS1_14default_d"
                     "eleteIS5_EEEEmmRKNS1_10shared_ptrINS_21MontrealTokenIDMapperEEERKNS_8ResourceERKNS_10ParametersEEUlvE_"
    || ((v3 & (unint64_t)"ZN2LML23assembleSegregatedCacheIDhEENSt3__110unique_ptrINS_18MontrealStateCacheIT_EENS1_"
                                "14default_deleteIS5_EEEEmmRKNS1_10shared_ptrINS_21MontrealTokenIDMapperEEERKNS_8Resource"
                                "ERKNS_10ParametersEEUlvE_" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN2LML23assembleSegregatedCacheIDhEENSt3__110unique_ptrINS_18MontrealStateCacheIT_EENS1_14default_deleteIS5_EEEEmmRKNS1_10shared_ptrINS_21MontrealTokenIDMapperEEERKNS_8ResourceERKNS_10ParametersEEUlvE_")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN2LML23assembleSegregatedCacheIDhEENSt3__110unique_ptrINS_18MontrealStateCacheIT_EENS1_14default_deleteIS5_EEEEmmRKNS1_10shared_ptrINS_21MontrealTokenIDMapperEEERKNS_8ResourceERKNS_10ParametersEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *sub_19C3F3DAC()
{
  return &unk_1E3D33560;
}

_QWORD *sub_19C3F3DB8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *a1 = &off_1E3D36530;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = a1[2];
  a1[2] = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = a1[1];
  a1[1] = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  return a1;
}

void sub_19C3F3E4C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *a1 = &off_1E3D36530;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = a1[2];
  a1[2] = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = a1[1];
  a1[1] = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C3F3EF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;

  v12 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 128))(*(_QWORD *)(a1 + 24));
  v13 = *a4;
  if (v12)
  {
    v14 = *(_QWORD *)(a1 + 16);
    *a4 = 0;
    v20 = v13;
    v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t))(*(_QWORD *)v14 + 16))(v14, a2, a3, &v20, a5, a6);
    v16 = v20;
    v20 = 0;
    if (!v16)
      return v15;
    goto LABEL_5;
  }
  v17 = *(_QWORD *)(a1 + 8);
  *a4 = 0;
  v19 = v13;
  v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t))(*(_QWORD *)v17 + 16))(v17, a2, a3, &v19, a5, a6);
  v16 = v19;
  v19 = 0;
  if (v16)
LABEL_5:
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  return v15;
}

void sub_19C3F3FDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  _Unwind_Resume(exception_object);
}

void sub_19C3F4000(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (!a10)
    JUMPOUT(0x19C3F3FF8);
  JUMPOUT(0x19C3F3FECLL);
}

uint64_t sub_19C3F4014(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  uint64_t v7;

  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 128))(*(_QWORD *)(a1 + 24));
  v7 = 8;
  if (v6)
    v7 = 16;
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + v7) + 24))(*(_QWORD *)(a1 + v7), a2, a3);
}

uint64_t sub_19C3F4074(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  uint64_t v7;

  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 128))(*(_QWORD *)(a1 + 24));
  v7 = 8;
  if (v6)
    v7 = 16;
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + v7) + 32))(*(_QWORD *)(a1 + v7), a2, a3);
}

uint64_t sub_19C3F40D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  uint64_t v7;

  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 128))(*(_QWORD *)(a1 + 24));
  v7 = 8;
  if (v6)
    v7 = 16;
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + v7) + 40))(*(_QWORD *)(a1 + v7), a2, a3);
}

uint64_t sub_19C3F4134(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  uint64_t v7;

  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 128))(*(_QWORD *)(a1 + 24));
  v7 = 8;
  if (v6)
    v7 = 16;
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + v7) + 48))(*(_QWORD *)(a1 + v7), a2, a3);
}

uint64_t sub_19C3F4194()
{
  return 0;
}

uint64_t sub_19C3F419C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v10;
  uint64_t v11;

  v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 128))(*(_QWORD *)(a1 + 24));
  v11 = 8;
  if (v10)
    v11 = 16;
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + v11) + 64))(*(_QWORD *)(a1 + v11), a2, a3, a4, a5);
}

uint64_t sub_19C3F4214(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8;
  uint64_t v9;

  v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 128))(*(_QWORD *)(a1 + 24));
  v9 = 8;
  if (v8)
    v9 = 16;
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + v9) + 72))(*(_QWORD *)(a1 + v9), a2, a3, a4);
}

uint64_t sub_19C3F427C(uint64_t a1)
{
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 80))(*(_QWORD *)(a1 + 16));
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 80))(*(_QWORD *)(a1 + 8));
}

void sub_19C3F42B8()
{
  JUMPOUT(0x1A1AD355CLL);
}

_QWORD *sub_19C3F42CC()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E3D394A8;
  return result;
}

void sub_19C3F42F0(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E3D394A8;
}

uint64_t sub_19C3F4308@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;

  result = operator new();
  *(_OWORD *)(result + 32) = 0u;
  *(_OWORD *)(result + 48) = 0u;
  *(_QWORD *)(result + 64) = 0;
  *(_QWORD *)result = off_1E3D35F00;
  *(_OWORD *)(result + 8) = 0u;
  *(_OWORD *)(result + 24) = 0u;
  do
  {
    v3 = __ldaxr(&qword_1EDB97098);
    v4 = v3 + 1;
  }
  while (__stlxr(v4, &qword_1EDB97098));
  *(_QWORD *)result = &off_1E3D356C8;
  *(_QWORD *)(result + 40) = v4;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = 0;
  *(_QWORD *)(result + 64) = 0;
  *a1 = result;
  return result;
}

uint64_t sub_19C3F438C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZZN2LML23assembleSegregatedCacheIDhEENSt3__110unique_ptrINS_18MontrealStateCacheIT_EENS1_14default_"
                     "deleteIS5_EEEEmmRKNS1_10shared_ptrINS_21MontrealTokenIDMapperEEERKNS_8ResourceERKNS_10ParametersEEN"
                     "KUlvE_clEvEUlvE0_"
    || ((v3 & (unint64_t)"ZZN2LML23assembleSegregatedCacheIDhEENSt3__110unique_ptrINS_18MontrealStateCacheIT_EENS1"
                                "_14default_deleteIS5_EEEEmmRKNS1_10shared_ptrINS_21MontrealTokenIDMapperEEERKNS_8Resourc"
                                "eERKNS_10ParametersEENKUlvE_clEvEUlvE0_" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZZN2LML23assembleSegregatedCacheIDhEENSt3__110unique_ptrINS_18MontrealStateCacheIT_EENS1_14default_deleteIS5_EEEEmmRKNS1_10shared_ptrINS_21MontrealTokenIDMapperEEERKNS_8ResourceERKNS_10ParametersEENKUlvE_clEvEUlvE0_")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZN2LML23assembleSegregatedCacheIDhEENSt3__110unique_ptrINS_18MontrealStateCacheIT_EENS1_14default_deleteIS5_EEEEmmRKNS1_10shared_ptrINS_21MontrealTokenIDMapperEEERKNS_8ResourceERKNS_10ParametersEENKUlvE_clEvEUlvE0_" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *sub_19C3F43E0()
{
  return &unk_1E3D33760;
}

_QWORD *sub_19C3F43EC(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  *a1 = &off_1E3D356C8;
  v2 = (void *)a1[6];
  if (v2)
  {
    a1[7] = v2;
    operator delete(v2);
  }
  *a1 = off_1E3D35F00;
  v3 = a1[4];
  a1[4] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (void *)a1[1];
  if (v4)
  {
    a1[2] = v4;
    operator delete(v4);
  }
  return a1;
}

void sub_19C3F445C(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  *a1 = &off_1E3D356C8;
  v2 = (void *)a1[6];
  if (v2)
  {
    a1[7] = v2;
    operator delete(v2);
  }
  *a1 = off_1E3D35F00;
  v3 = a1[4];
  a1[4] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (void *)a1[1];
  if (v4)
  {
    a1[2] = v4;
    operator delete(v4);
  }
  JUMPOUT(0x1A1AD355CLL);
}

__int16 sub_19C3F44DC@<H0>(_QWORD *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>)
{
  unint64_t v5;
  unint64_t v6;
  __int16 result;
  int *v8;
  int *i;
  unsigned int v10;

  do
  {
    v5 = __ldaxr(&qword_1EDB97098);
    v6 = v5 + 1;
  }
  while (__stlxr(v6, &qword_1EDB97098));
  a1[5] = v6;
  if (2 * a3 >= 1)
    bzero(a2, 2 * (((unint64_t)(2 * a3) >> 1) - (2 * a3 != 1)) + 2);
  v8 = (int *)a1[6];
  for (i = (int *)a1[7]; v8 != i; *((_WORD *)a2 + v10) = result)
  {
    result = *((_WORD *)v8 + 2);
    v10 = *v8;
    v8 += 2;
  }
  return result;
}

float sub_19C3F4560(_QWORD *a1, unsigned int a2)
{
  unint64_t v2;
  unint64_t v3;
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int *v8;
  char *v9;
  unsigned int v10;
  float result;

  do
  {
    v2 = __ldaxr(&qword_1EDB97098);
    v3 = v2 + 1;
  }
  while (__stlxr(v3, &qword_1EDB97098));
  a1[5] = v3;
  v4 = (char *)a1[6];
  v5 = (char *)a1[7];
  if (v5 != v4)
  {
    v6 = (v5 - v4) >> 3;
    do
    {
      v7 = v6 >> 1;
      v8 = (unsigned int *)&v4[8 * (v6 >> 1)];
      v10 = *v8;
      v9 = (char *)(v8 + 2);
      v6 += ~(v6 >> 1);
      if (v10 < a2)
        v4 = v9;
      else
        v6 = v7;
    }
    while (v6);
  }
  result = 0.0;
  if (v4 != v5 && *(_DWORD *)v4 == a2)
  {
    _H0 = *((_WORD *)v4 + 2);
    __asm { FCVT            S0, H0 }
  }
  return result;
}

void sub_19C3F45D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  char *v13;
  _BYTE *v20;
  char *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  char *v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  _OWORD *v33;
  char *v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;

  do
  {
    v6 = __ldaxr(&qword_1EDB97098);
    v7 = v6 + 1;
  }
  while (__stlxr(v7, &qword_1EDB97098));
  v8 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = v7;
  v9 = (*(_QWORD *)(a1 + 64) - v8) >> 3;
  v10 = (*(_QWORD *)(a1 + 56) - v8) >> 3;
  if (v9 <= v10)
  {
    if (v9 < v10)
      *(_QWORD *)(a1 + 56) = v8 + 8 * v9;
  }
  else
  {
    sub_19C3F0870((void **)(a1 + 48), v9 - v10);
  }
  if (a3)
  {
    v11 = 0;
    v12 = 0;
    while (1)
    {
      _H8 = *(_WORD *)(a2 + 2 * v11);
      __asm { FCVT            S0, H8 }
      if (_S0 <= 0.0)
        goto LABEL_10;
      v20 = *(_BYTE **)(a1 + 48);
      v21 = *(char **)(a1 + 56);
      v22 = (v21 - v20) >> 3;
      if (v22 > v12)
      {
        v13 = &v20[8 * v12];
        *(_DWORD *)v13 = v11;
        *((_WORD *)v13 + 2) = _H8;
      }
      else
      {
        v23 = *(_QWORD *)(a1 + 64);
        if ((unint64_t)v21 >= v23)
        {
          v24 = v22 + 1;
          if ((v22 + 1) >> 61)
            sub_19C2A18E8();
          v25 = v23 - (_QWORD)v20;
          if (v25 >> 2 > v24)
            v24 = v25 >> 2;
          _CF = (unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8;
          v26 = 0x1FFFFFFFFFFFFFFFLL;
          if (!_CF)
            v26 = v24;
          if (v26 >> 61)
            sub_19C2A143C();
          v27 = 8 * v26;
          v28 = operator new(8 * v26);
          v29 = &v28[8 * v22];
          *(_DWORD *)v29 = v11;
          *((_WORD *)v29 + 2) = _H8;
          if (v21 == v20)
          {
            v31 = &v28[8 * v22];
          }
          else
          {
            v30 = v21 - 8 - v20;
            if (v30 < 0x58)
            {
              v31 = &v28[8 * v22];
              goto LABEL_29;
            }
            v31 = &v28[8 * v22];
            if ((unint64_t)(v20 - v28) < 0x20)
              goto LABEL_43;
            v32 = (v30 >> 3) + 1;
            v33 = &v28[8 * v22 - 16];
            v34 = v21 - 16;
            v35 = v32 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v36 = *(_OWORD *)v34;
              *(v33 - 1) = *((_OWORD *)v34 - 1);
              *v33 = v36;
              v33 -= 2;
              v34 -= 32;
              v35 -= 4;
            }
            while (v35);
            v31 = &v29[-8 * (v32 & 0x3FFFFFFFFFFFFFFCLL)];
            v21 -= 8 * (v32 & 0x3FFFFFFFFFFFFFFCLL);
            if (v32 != (v32 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_43:
              do
              {
LABEL_29:
                v37 = *((_QWORD *)v21 - 1);
                v21 -= 8;
                *((_QWORD *)v31 - 1) = v37;
                v31 -= 8;
              }
              while (v21 != v20);
            }
          }
          v38 = v29 + 8;
          *(_QWORD *)(a1 + 48) = v31;
          *(_QWORD *)(a1 + 56) = v29 + 8;
          *(_QWORD *)(a1 + 64) = &v28[v27];
          if (v20)
            operator delete(v20);
          *(_QWORD *)(a1 + 56) = v38;
          goto LABEL_9;
        }
        *(_DWORD *)v21 = v11;
        *((_WORD *)v21 + 2) = _H8;
        *(_QWORD *)(a1 + 56) = v21 + 8;
      }
LABEL_9:
      ++v12;
LABEL_10:
      if (++v11 == a3)
        goto LABEL_34;
    }
  }
  v12 = 0;
LABEL_34:
  v39 = *(_QWORD *)(a1 + 48);
  v40 = (*(_QWORD *)(a1 + 56) - v39) >> 3;
  if (v12 <= v40)
  {
    if (v12 < v40)
      *(_QWORD *)(a1 + 56) = v39 + 8 * v12;
  }
  else
  {
    sub_19C3F0870((void **)(a1 + 48), v12 - v40);
  }
}

_QWORD *sub_19C3F4860(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  *a1 = off_1E3D35AC8;
  v2 = (_QWORD *)a1[2];
  if (v2)
  {
    v3 = (_QWORD *)a1[3];
    v4 = (void *)a1[2];
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      }
      while (v3 != v2);
      v4 = (void *)a1[2];
    }
    a1[3] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_19C3F48E0(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  *a1 = off_1E3D35AC8;
  v2 = (_QWORD *)a1[2];
  if (v2)
  {
    v3 = (_QWORD *)a1[3];
    v4 = (void *)a1[2];
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      }
      while (v3 != v2);
      v4 = (void *)a1[2];
    }
    a1[3] = v2;
    operator delete(v4);
  }
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C3F4970(uint64_t a1, void *__src, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v15;
  size_t v16;
  uint64_t v17;
  uint64_t v18;
  const void *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;

  if (!a3)
    return 0;
  v7 = *a4;
  if (!*a4)
    return 0;
  v9 = *(_QWORD **)(a1 + 16);
  v10 = *(_QWORD **)(a1 + 24);
  if (v9 == v10 || a6 == 0)
    return 0;
  v15 = 0;
  v16 = 4 * a3;
  if ((unint64_t)(v10 - v9) <= 1)
    v17 = 1;
  else
    v17 = v10 - v9;
  while (1)
  {
    v18 = v9[v15];
    v19 = *(const void **)(v18 + 8);
    if (a3 == (uint64_t)(*(_QWORD *)(v18 + 16) - (_QWORD)v19) >> 2 && !memcmp(v19, __src, v16))
      break;
    if (v17 == ++v15)
      goto LABEL_16;
  }
  if ((v15 & 0x80000000) == 0)
    return 0;
LABEL_16:
  v20 = v9 + 1;
  if (v9 + 1 != v10)
  {
    v21 = (_QWORD *)*v9;
    v22 = v9 + 1;
    do
    {
      v24 = (_QWORD *)*v22++;
      v23 = v24;
      if (v24[5] < v21[5])
      {
        v21 = v23;
        v9 = v20;
      }
      v20 = v22;
    }
    while (v22 != v10);
  }
  if (v9 == v10)
    __assert_rtn("getOldestEntry", "LRUStateBaseCache.hpp", 31, "entryIterator != m_cache.end()");
  v25 = (_QWORD *)*v9;
  *a4 = 0;
  sub_19C39F614(v25 + 1, (char *)__src, (char *)__src + v16, (4 * a3) >> 2);
  do
  {
    v26 = __ldaxr(&qword_1EDB97098);
    v27 = v26 + 1;
  }
  while (__stlxr(v27, &qword_1EDB97098));
  v28 = v25[4];
  v25[4] = v7;
  v25[5] = v27;
  if (v28)
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*v25 + 32))(v25, a5, a6);
  return 1;
}

void sub_19C3F4B00(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19C3F4B1C(_QWORD *a1, char *a2, uint64_t a3)
{
  unsigned int v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v4 = sub_19C3F1A7C(a1, a2, a3);
  if ((v4 & 0x80000000) != 0)
    return 0;
  v5 = *(_QWORD *)(a1[2] + 8 * v4);
  do
  {
    v6 = __ldaxr(&qword_1EDB97098);
    v7 = v6 + 1;
  }
  while (__stlxr(v7, &qword_1EDB97098));
  *(_QWORD *)(v5 + 40) = v7;
  return *(_QWORD *)(v5 + 32);
}

uint64_t sub_19C3F4B70()
{
  return 0;
}

void sub_19C3F4B7C()
{
  JUMPOUT(0x1A1AD355CLL);
}

_QWORD *sub_19C3F4B90(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E3D39500;
  result[1] = v3;
  return result;
}

uint64_t sub_19C3F4BC4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E3D39500;
  a2[1] = v2;
  return result;
}

uint64_t sub_19C3F4BE0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t result;

  v2 = operator new();
  v3 = v2;
  *(_QWORD *)v2 = off_1E3D35F00;
  *(_OWORD *)(v2 + 8) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  do
  {
    v4 = __ldaxr(&qword_1EDB97098);
    v5 = v4 + 1;
  }
  while (__stlxr(v5, &qword_1EDB97098));
  *(_QWORD *)(v2 + 40) = v5;
  *(_QWORD *)v2 = &off_1E3D351D0;
  result = operator new[]();
  *(_QWORD *)(v3 + 48) = result;
  *a1 = v3;
  return result;
}

void sub_19C3F4C94(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;
  uint64_t v5;
  void *v6;

  *v1 = v3;
  v5 = v1[4];
  v1[4] = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *v2;
  if (*v2)
  {
    v1[2] = v6;
    operator delete(v6);
  }
  MEMORY[0x1A1AD355C](v1, 0x10B1C40C560DF64);
  _Unwind_Resume(a1);
}

uint64_t sub_19C3F4CE4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZZN2LML23assembleSegregatedCacheIDhEENSt3__110unique_ptrINS_18MontrealStateCacheIT_EENS1_14default_"
                     "deleteIS5_EEEEmmRKNS1_10shared_ptrINS_21MontrealTokenIDMapperEEERKNS_8ResourceERKNS_10ParametersEEN"
                     "KUlvE_clEvEUlvE_"
    || ((v3 & (unint64_t)"ZZN2LML23assembleSegregatedCacheIDhEENSt3__110unique_ptrINS_18MontrealStateCacheIT_EENS1"
                                "_14default_deleteIS5_EEEEmmRKNS1_10shared_ptrINS_21MontrealTokenIDMapperEEERKNS_8Resourc"
                                "eERKNS_10ParametersEENKUlvE_clEvEUlvE_" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZZN2LML23assembleSegregatedCacheIDhEENSt3__110unique_ptrINS_18MontrealStateCacheIT_EENS1_14default_deleteIS5_EEEEmmRKNS1_10shared_ptrINS_21MontrealTokenIDMapperEEERKNS_8ResourceERKNS_10ParametersEENKUlvE_clEvEUlvE_")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZN2LML23assembleSegregatedCacheIDhEENSt3__110unique_ptrINS_18MontrealStateCacheIT_EENS1_14default_deleteIS5_EEEEmmRKNS1_10shared_ptrINS_21MontrealTokenIDMapperEEERKNS_8ResourceERKNS_10ParametersEENKUlvE_clEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *sub_19C3F4D38()
{
  return &unk_1E3D33770;
}

void sub_19C3F4D48()
{
  JUMPOUT(0x1A1AD355CLL);
}

__n128 sub_19C3F4D5C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E3D38D18;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_19C3F4D9C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E3D38D18;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_QWORD *sub_19C3F4DC4@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  _QWORD *result;
  uint64_t v9;
  _QWORD v10[3];
  _QWORD *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v4 = a1[1];
  v5 = a1[2] - 5;
  v6 = (_QWORD *)operator new();
  v7 = a1[3];
  v10[0] = &off_1E3D39450;
  v10[1] = v4;
  v11 = v10;
  sub_19C3F15AC(v6, v7, v5, (uint64_t)v10);
  *v6 = &off_1E3D350D0;
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
    goto LABEL_5;
  }
  if (v11)
  {
    v9 = 5;
LABEL_5:
    result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
  }
  *a2 = v6;
  return result;
}

void sub_19C3F4EAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  uint64_t v13;
  char *v14;
  char *v16;
  uint64_t v17;

  v16 = a13;
  if (a13 == v14)
  {
    v17 = 4;
    v16 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  MEMORY[0x1A1AD355C](v13, 0x10A1C405897D53FLL);
  _Unwind_Resume(a1);
}

uint64_t sub_19C3F4EFC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN2LML23assembleMonolithicCacheIDhEENSt3__110unique_ptrINS_18MontrealStateCacheIT_EENS1_14default_d"
                     "eleteIS5_EEEEmmRKNS_8ResourceERKNS_10ParametersEEUlvE_"
    || ((v3 & (unint64_t)"ZN2LML23assembleMonolithicCacheIDhEENSt3__110unique_ptrINS_18MontrealStateCacheIT_EENS1_"
                                "14default_deleteIS5_EEEEmmRKNS_8ResourceERKNS_10ParametersEEUlvE_" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN2LML23assembleMonolithicCacheIDhEENSt3__110unique_ptrINS_18MontrealStateCacheIT_EENS1_14default_deleteIS5_EEEEmmRKNS_8ResourceERKNS_10ParametersEEUlvE_")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN2LML23assembleMonolithicCacheIDhEENSt3__110unique_ptrINS_18MontrealStateCacheIT_EENS1_14default_deleteIS5_EEEEmmRKNS_8ResourceERKNS_10ParametersEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *sub_19C3F4F50()
{
  return &unk_1E3D33550;
}

void sub_19C3F4F60()
{
  JUMPOUT(0x1A1AD355CLL);
}

_QWORD *sub_19C3F4F74(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E3D39450;
  result[1] = v3;
  return result;
}

uint64_t sub_19C3F4FA8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E3D39450;
  a2[1] = v2;
  return result;
}

uint64_t sub_19C3F4FC4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t result;

  v2 = operator new();
  v3 = v2;
  *(_QWORD *)v2 = off_1E3D35F00;
  *(_OWORD *)(v2 + 8) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  do
  {
    v4 = __ldaxr(&qword_1EDB97098);
    v5 = v4 + 1;
  }
  while (__stlxr(v5, &qword_1EDB97098));
  *(_QWORD *)(v2 + 40) = v5;
  *(_QWORD *)v2 = &off_1E3D351D0;
  result = operator new[]();
  *(_QWORD *)(v3 + 48) = result;
  *a1 = v3;
  return result;
}

void sub_19C3F5078(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;
  uint64_t v5;
  void *v6;

  *v1 = v3;
  v5 = v1[4];
  v1[4] = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *v2;
  if (*v2)
  {
    v1[2] = v6;
    operator delete(v6);
  }
  MEMORY[0x1A1AD355C](v1, 0x10B1C40C560DF64);
  _Unwind_Resume(a1);
}

uint64_t sub_19C3F50C8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZZN2LML23assembleMonolithicCacheIDhEENSt3__110unique_ptrINS_18MontrealStateCacheIT_EENS1_14default_"
                     "deleteIS5_EEEEmmRKNS_8ResourceERKNS_10ParametersEENKUlvE_clEvEUlvE_"
    || ((v3 & (unint64_t)"ZZN2LML23assembleMonolithicCacheIDhEENSt3__110unique_ptrINS_18MontrealStateCacheIT_EENS1"
                                "_14default_deleteIS5_EEEEmmRKNS_8ResourceERKNS_10ParametersEENKUlvE_clEvEUlvE_" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZZN2LML23assembleMonolithicCacheIDhEENSt3__110unique_ptrINS_18MontrealStateCacheIT_EENS1_14default_deleteIS5_EEEEmmRKNS_8ResourceERKNS_10ParametersEENKUlvE_clEvEUlvE_")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZN2LML23assembleMonolithicCacheIDhEENSt3__110unique_ptrINS_18MontrealStateCacheIT_EENS1_14default_deleteIS5_EEEEmmRKNS_8ResourceERKNS_10ParametersEENKUlvE_clEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *sub_19C3F511C()
{
  return &unk_1E3D33750;
}

void sub_19C3F5128(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D39898;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_19C3F5138(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D39898;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C3F5168(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_19C3F5178(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D399B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_19C3F5188(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D399B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C3F51B8(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

os_log_t sub_19C3F51C8()
{
  os_log_t result;

  result = os_log_create("com.apple.LanguageModeling", "BaseLanguageModel");
  qword_1EE41C528 = (uint64_t)result;
  return result;
}

void sub_19C3F51F8(uint64_t a1)
{
  sub_19C3FC1C0(a1);
  JUMPOUT(0x1A1AD355CLL);
}

void sub_19C3F521C(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  int v4;
  uint64_t v5;
  int v6;
  BOOL v7;
  unint64_t v10;
  char v11;
  std::string::size_type size;
  std::string::size_type v13;
  void *v14;
  unint64_t v15;
  std::string *p_dst;
  size_t v17;
  int v19;
  _DWORD *v20;
  std::string::size_type v21;
  std::string *v22;
  std::string *v23;
  int data_low;
  int v25;
  int v27;
  std::string __p;
  int v29;
  std::string v30;
  std::string v31;
  int v32;
  std::string __dst;
  int v34;

  v4 = *(char *)(a2 + 23);
  if (v4 >= 0)
    v5 = *(unsigned __int8 *)(a2 + 23);
  else
    v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_DWORD *)(a2 + 24);
  if (v5)
    v7 = 0;
  else
    v7 = v6 == 0;
  if (v7)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    return;
  }
  if (v4 < 0)
  {
    sub_19C2B5238(&__dst, *(void **)a2, *(_QWORD *)(a2 + 8));
    v6 = *(_DWORD *)(a2 + 24);
  }
  else
  {
    __dst = *(std::string *)a2;
  }
  v34 = v6;
  if (v6 == 3)
  {
    sub_19C3FB490(&v31, (unsigned __int8 *)&__dst);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
    __dst = v31;
    v34 = v32;
    v10 = HIBYTE(v31.__r_.__value_.__r.__words[2]);
    v11 = HIBYTE(v31.__r_.__value_.__r.__words[2]);
    size = v31.__r_.__value_.__l.__size_;
    if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v13 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    else
      v13 = __dst.__r_.__value_.__l.__size_;
    if (!v13)
    {
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      if ((v11 & 0x80) == 0)
        return;
      goto LABEL_38;
    }
  }
  else
  {
    v10 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    size = __dst.__r_.__value_.__l.__size_;
    v11 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  }
  v14 = (void *)__dst.__r_.__value_.__r.__words[0];
  if (v11 >= 0)
    v15 = v10;
  else
    v15 = size;
  if (v11 >= 0)
    p_dst = &__dst;
  else
    p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
  if (v15 >= 5)
    v17 = 5;
  else
    v17 = v15;
  if (!memcmp(p_dst, "<unk>", v17) && v15 == 5)
  {
    v19 = *(_DWORD *)(a1 + 68);
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    v20 = operator new(4uLL);
    *a3 = v20;
    *v20++ = v19;
    a3[1] = v20;
    a3[2] = v20;
    if ((v11 & 0x80) == 0)
      return;
    goto LABEL_38;
  }
  if (v11 < 0)
    sub_19C2B5238(&v30, v14, size);
  else
    v30 = __dst;
  if (*(_DWORD *)(a1 + 328) == 1)
  {
    v21 = HIBYTE(v30.__r_.__value_.__r.__words[2]);
    if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v21 = v30.__r_.__value_.__l.__size_;
    if (v21 == 3)
    {
      v22 = (std::string *)v30.__r_.__value_.__r.__words[0];
      v23 = &v30;
      if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v23 = (std::string *)v30.__r_.__value_.__r.__words[0];
      data_low = LOWORD(v23->__r_.__value_.__l.__data_);
      v25 = v23->__r_.__value_.__s.__data_[2];
      if (data_low == 11822 && v25 == 46)
      {
        if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        {
          v30.__r_.__value_.__l.__size_ = 5;
        }
        else
        {
          *((_BYTE *)&v30.__r_.__value_.__s + 23) = 5;
          v22 = &v30;
        }
        strcpy((char *)v22, ". . .");
      }
    }
  }
  sub_19C3FAB44(a1, (uint64_t)&v30);
  sub_19C3FAD34(a1, (uint64_t)&v30);
  if (!v34)
    std::string::append(&v30, " ", 1uLL);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    sub_19C2B5238(&__p, v30.__r_.__value_.__l.__data_, v30.__r_.__value_.__l.__size_);
  else
    __p = v30;
  v29 = v34;
  sub_19C297950(&v31, (const UInt8 *)&__p);
  v27 = v29;
  v32 = v29;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    v27 = v32;
  }
  __dst = v31;
  *((_BYTE *)&v31.__r_.__value_.__s + 23) = 0;
  v31.__r_.__value_.__s.__data_[0] = 0;
  v34 = v27;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  sub_19C3FB3C4(a1, (uint64_t)&__dst);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  if ((*((_BYTE *)&__dst.__r_.__value_.__s + 23) & 0x80) != 0)
LABEL_38:
    operator delete(__dst.__r_.__value_.__l.__data_);
}

void sub_19C3F551C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a21 < 0)
  {
    operator delete(__p);
    if (*(char *)(v21 - 57) < 0)
      goto LABEL_6;
  }
  else if (*(char *)(v21 - 57) < 0)
  {
LABEL_6:
    operator delete(*(void **)(v21 - 80));
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_19C3F559C(uint64_t a1, __int128 *a2)
{
  void *__p[2];
  char v4;
  int v5;
  void *v6[2];
  uint64_t v7;
  int v8;
  __int128 __dst;
  uint64_t v10;

  if (*((char *)a2 + 23) < 0)
  {
    sub_19C2B5238(&__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    __dst = *a2;
    v10 = *((_QWORD *)a2 + 2);
  }
  sub_19C3FAB44(a1, (uint64_t)&__dst);
  sub_19C3FAD34(a1, (uint64_t)&__dst);
  if (SHIBYTE(v10) < 0)
  {
    sub_19C2B5238(v6, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    *(_OWORD *)v6 = __dst;
    v7 = v10;
  }
  v8 = 0;
  sub_19C297950(__p, (const UInt8 *)v6);
  v5 = v8;
  sub_19C3FB3C4(a1, (uint64_t)__p);
  if (v4 < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v7) & 0x80000000) == 0)
    {
LABEL_9:
      if ((SHIBYTE(v10) & 0x80000000) == 0)
        return;
LABEL_13:
      operator delete((void *)__dst);
      return;
    }
  }
  else if ((SHIBYTE(v7) & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(v6[0]);
  if (SHIBYTE(v10) < 0)
    goto LABEL_13;
}

void sub_19C3F569C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if ((*(char *)(v21 - 25) & 0x80000000) == 0)
    _Unwind_Resume(exception_object);
  operator delete(*(void **)(v21 - 48));
  _Unwind_Resume(exception_object);
}

void sub_19C3F5714(uint64_t a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  void **v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  size_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  size_t v14;
  char v15;
  _BYTE *i;
  uint64_t v17;
  BOOL v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  const char *v25;
  _BYTE *v26;
  size_t v27;
  uint64_t v28;
  _BYTE *v29;
  _BYTE *v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _BOOL8 v55;
  unint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  int64_t v77;
  unint64_t v78;
  _BYTE *v79;
  unint64_t v80;
  char *v81;
  int64_t v82;
  unint64_t v83;
  char *v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  __int128 *v89;
  _OWORD *v90;
  uint64_t v91;
  __int128 v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  char *v96;
  char *v97;
  char *v98;
  char *v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  unint64_t v106;
  char *v107;
  unint64_t v108;
  char *v109;
  int64_t v110;
  unint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  __int128 *v116;
  char *v117;
  uint64_t v118;
  __int128 v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t *v122;
  void *v123;
  void **v124;
  char *v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  char *v131;
  uint64_t v132;
  unint64_t v133;
  char *v134;
  char *v135;
  unint64_t v136;
  int64_t v137;
  unint64_t v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  __int128 *v143;
  char *v144;
  uint64_t v145;
  __int128 v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  char *v154;
  unint64_t v155;
  char *v156;
  char *v157;
  unint64_t v158;
  int64_t v159;
  unint64_t v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  __int128 *v165;
  char *v166;
  uint64_t v167;
  __int128 v168;
  uint64_t v169;
  char *v170;
  uint64_t v171;
  char **v172;
  char *v173;
  uint64_t v174;
  unint64_t v175;
  uint64_t v176;
  char *v177;
  char *v178;
  unint64_t v179;
  void **v180;
  char *j;
  char *v182;
  uint64_t v183;
  char *v184;
  char *v185;
  char v186;
  uint64_t v187;
  uint64_t v188;
  unint64_t v189;
  uint64_t v190;
  uint64_t v191;
  size_t v192;
  char *v193;
  char *v194;
  char *v195;
  char *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  size_t v200;
  char *v201;
  char *v202;
  char *v203;
  char *v204;
  uint64_t v205;
  size_t v206;
  char *v207;
  uint64_t v208;
  char *v209;
  char *v210;
  char *v211;
  void **v212;
  char *v213;
  uint64_t v214;
  size_t v215;
  char *v216;
  char *v217;
  char *v218;
  char *v219;
  void *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  char *v224;
  char *v225;
  unint64_t v226;
  char *v227;
  unint64_t v228;
  char *v229;
  int64_t v230;
  unint64_t v231;
  char *v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  __int128 *v236;
  char *v237;
  uint64_t v238;
  __int128 v239;
  uint64_t v240;
  _QWORD *m;
  uint64_t v242;
  void *v243;
  char *v244;
  char *v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  char *v249;
  char *v250;
  size_t v251;
  char *v252;
  uint64_t v253;
  unint64_t v254;
  char *v255;
  char *v256;
  char *v257;
  unint64_t v258;
  int64_t v259;
  unint64_t v260;
  char *v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  __int128 *v265;
  char *v266;
  uint64_t v267;
  __int128 v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  char *v274;
  unint64_t v275;
  char *v276;
  char *v277;
  unint64_t v278;
  int64_t v279;
  unint64_t v280;
  char *v281;
  char *v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  __int128 *v286;
  char *v287;
  uint64_t v288;
  __int128 v289;
  uint64_t v290;
  uint64_t k;
  uint64_t v292;
  uint64_t v293;
  char *v294;
  _BYTE *v295;
  char *v296;
  uint64_t v297;
  char *v298;
  uint64_t v299;
  void *v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  char *v304;
  int64_t v305;
  unint64_t v306;
  _BYTE *v307;
  unint64_t v308;
  char *v309;
  int64_t v310;
  unint64_t v311;
  char *v312;
  uint64_t v313;
  unint64_t v314;
  uint64_t v315;
  uint64_t v316;
  __int128 *v317;
  _OWORD *v318;
  uint64_t v319;
  __int128 v320;
  uint64_t v321;
  unint64_t v322;
  unint64_t v323;
  char *v324;
  unint64_t v325;
  char *v326;
  _BYTE *v327;
  _BYTE *v328;
  uint64_t v329;
  char *v330;
  _BYTE *v331;
  unint64_t v332;
  char *v333;
  _BYTE *n;
  _BYTE *v335;
  uint64_t v336;
  char *v337;
  _BYTE *v338;
  _BYTE *v339;
  _BYTE *v340;
  _BYTE *v341;
  _BYTE *v342;
  char *v343;
  size_t v344;
  _BYTE *v345;
  _BYTE *v346;
  char *v347;
  char *v348;
  size_t v349;
  _BYTE *v350;
  char *v351;
  uint64_t v352;
  char *v353;
  size_t v354;
  uint64_t v355;
  unint64_t v356;
  char *v357;
  size_t v358;
  _BYTE *v359;
  _BYTE *v360;
  uint64_t v361;
  uint64_t *v362;
  uint64_t v363;
  char *v364;
  size_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  _BYTE *v369;
  const char *v371;
  _BYTE *v372;
  uint64_t v373;
  uint64_t v374;
  _BYTE *v375;
  int v376;
  size_t v377;
  char *v378;
  std::string::value_type *v379;
  char *v380;
  uint64_t v381;
  void (*v382)(__int128 *, __int128 *, uint64_t);
  std::string::size_type v383;
  void (*v384)(__int128 *, __int128 *, uint64_t);
  void (*v385)(uint64_t *, uint64_t *, uint64_t);
  __int128 v386;
  void (*v387)(std::string::size_type *, std::string::size_type *, uint64_t);
  void (*v388)(_BYTE *, _BYTE *, uint64_t);
  void **v389;
  void **v390;
  char *v391;
  size_t v392;
  void *v393;
  const void *p_src;
  size_t v395;
  void *v396;
  void **v397;
  size_t v398;
  uint64_t v399;
  void **v400;
  int v401;
  char *v402;
  char *v403;
  void *v404;
  void **v405;
  size_t v406;
  void *v407;
  void **v408;
  size_t v409;
  _QWORD *v410;
  void **v411;
  size_t v412;
  _QWORD *v413;
  _QWORD *v414;
  size_t v415;
  _QWORD *v416;
  _QWORD *v417;
  size_t v418;
  __int128 *v419;
  _QWORD *v420;
  size_t v421;
  std::string *v422;
  __int128 *v423;
  _QWORD *v424;
  _QWORD *v425;
  size_t v426;
  void *v427;
  std::string::size_type v428;
  char *v429;
  unint64_t v430;
  char *v431;
  char *v432;
  void (*v433)(uint64_t, _WORD *, int);
  std::string::size_type v434;
  void (*v435)(__int128 *, __int128 *, uint64_t);
  void (*v436)(uint64_t *, uint64_t *, uint64_t);
  void (*v437)(std::string::size_type *, std::string::size_type *, uint64_t);
  void (*v438)(_BYTE *, _BYTE *, uint64_t);
  int v439;
  const UInt8 *v440;
  CFIndex v441;
  const __CFString *v442;
  const __CFString *v443;
  const __CFLocale *v444;
  CFIndex Length;
  __CFString *MutableCopy;
  const __CFString *v447;
  CFTypeID TypeID;
  __int128 v449;
  uint64_t v450;
  __int128 v451;
  void **v452;
  int v453;
  const std::string::value_type *v454;
  std::string::size_type v455;
  std::string *v456;
  std::string::size_type v457;
  char v458;
  int v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  unint64_t v463;
  unint64_t v464;
  std::string::value_type *v465;
  std::string::size_type size;
  std::string *p_cf;
  void **v468;
  void **v469;
  unint64_t v470;
  unint64_t v471;
  uint64_t v472;
  void *v473;
  void *exception;
  void *v475;
  void **v476;
  _QWORD *v477;
  uint64_t v478;
  uint64_t v479;
  unint64_t v480;
  const __CFAllocator *alloc;
  unint64_t v482;
  void **v483;
  const char *v484;
  size_t v485;
  _BYTE *v486;
  _BYTE *v487;
  _BYTE *v488;
  _BYTE *v490;
  char *v491;
  unint64_t v492;
  void **v493;
  char *v494;
  unint64_t v495;
  uint64_t v496;
  char *__p;
  char *__pa;
  char *__pb;
  char *__pc;
  char *__pd;
  char *__pe;
  void *__pf;
  __int128 v504;
  __int128 v505;
  unint64_t v506;
  void *v507[2];
  uint64_t v508;
  __int128 v509;
  std::string::size_type v510;
  __int128 v511;
  std::string::size_type v512;
  std::string::size_type v513;
  __int128 v514;
  uint64_t v515;
  __int128 v516;
  __int128 v517;
  char v518;
  unint64_t v519;
  __int128 v520;
  uint64_t v521;
  int64x2_t v522;
  __int128 v523;
  char v524;
  void *__src;
  size_t __n;
  void *v527[2];
  size_t v528;
  void *__dst[2];
  size_t v530;
  int v531;
  uint64_t v532[3];
  uint64_t v533;
  int64x2_t v534;
  __int128 v535;
  char v536;
  std::string cf;
  uint64_t v538;
  __int128 v539;
  __int128 v540;
  char v541;
  void *v542[2];
  size_t v543;
  int v544;
  _BYTE v545[32];
  int64x2_t v546;
  __int128 v547;
  char v548;
  void *v549[2];
  size_t v550;
  int v551;
  _QWORD v552[2];
  size_t v553;
  int v554;
  _QWORD v555[2];
  unint64_t v556;
  int v557;
  _QWORD v558[2];
  unint64_t v559;
  int v560;
  __int128 v561;
  std::string::size_type v562;
  int v563;
  uint64_t v564;

  v564 = *MEMORY[0x1E0C80C00];
  v5 = v507;
  sub_19C3F9384(a1, a2, a3, (uint64_t)v507);
  v6 = HIBYTE(v508);
  if (v508 < 0)
  {
    v5 = (void **)v507[0];
    v6 = (unint64_t)v507[1];
  }
  v7 = v6;
  do
  {
    if (!v7)
      goto LABEL_14;
    v8 = *((unsigned __int8 *)v5 + --v7);
  }
  while (v8 == 32);
  if (v7 != -1)
  {
    if (v6 >= v7 + 1)
      v9 = v7 + 1;
    else
      v9 = v6;
    if (v9 >= 0x7FFFFFFFFFFFFFF8)
      sub_19C2A1A54();
    if (v9 >= 0x17)
    {
      v11 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v9 | 7) != 0x17)
        v11 = v9 | 7;
      v12 = v11 + 1;
      v10 = operator new(v11 + 1);
      *(_QWORD *)(a4 + 8) = v9;
      *(_QWORD *)(a4 + 16) = v12 | 0x8000000000000000;
      *(_QWORD *)a4 = v10;
    }
    else
    {
      *(_BYTE *)(a4 + 23) = v9;
      v10 = (void *)a4;
      if (!v9)
        goto LABEL_21;
    }
    memmove(v10, v5, v9);
LABEL_21:
    *((_BYTE *)v10 + v9) = 0;
    goto LABEL_22;
  }
LABEL_14:
  if (SHIBYTE(v508) < 0)
  {
    sub_19C2B5238((_BYTE *)a4, v507[0], (unint64_t)v507[1]);
  }
  else
  {
    *(_OWORD *)a4 = *(_OWORD *)v507;
    *(_QWORD *)(a4 + 16) = v508;
  }
LABEL_22:
  if (!*(_BYTE *)(a1 + 360))
    goto LABEL_36;
  v13 = (const char *)(a1 + 336);
  if (*(char *)(a1 + 359) < 0)
    v13 = *(const char **)v13;
  v14 = strlen(v13);
  v15 = *(_BYTE *)(a4 + 23);
  i = v15 >= 0 ? (_BYTE *)a4 : *(_BYTE **)a4;
  v17 = v15 >= 0 ? *(unsigned __int8 *)(a4 + 23) : *(_QWORD *)(a4 + 8);
  v18 = !v17 || v14 == 0;
  if (v18)
    goto LABEL_36;
  v25 = &v13[v14];
  v26 = &i[v17];
  v27 = v14 - 1;
  v28 = v17 - 1;
  v29 = i;
LABEL_53:
  v31 = 0;
  do
  {
    if (v29[v31] != v13[v31])
    {
      v30 = &v29[v31];
      if (&v13[v31] == v25)
        goto LABEL_59;
LABEL_52:
      ++v29;
      --v28;
      if (v29 == v26)
        goto LABEL_36;
      goto LABEL_53;
    }
    v32 = v31 + 1;
    if (v28 == v31)
      break;
    v18 = v27 == v31++;
  }
  while (!v18);
  v30 = &v29[v32];
  if (&v13[v32] != v25)
    goto LABEL_52;
LABEL_59:
  if (v29 == v30)
    goto LABEL_36;
  v546 = 0u;
  memset(v545, 0, sizeof(v545));
  v33 = i;
  v484 = &v13[v14];
  v485 = v14;
  v478 = a4;
  do
  {
    i = sub_19C3F9F94((uint64_t)v545, i, v33, v29);
    v34 = v546.i64[1];
    v35 = v546.i64[0];
    v36 = v546.i64[0] + v546.i64[1];
    v37 = (unint64_t)(v546.i64[0] + v546.i64[1]) >> 12;
    v39 = *(char **)&v545[16];
    v38 = *(char **)&v545[8];
    v40 = (char *)(*(_QWORD *)&v545[8] + 8 * v37);
    v41 = (unint64_t)v546.i64[0] >> 12;
    v42 = *(_QWORD *)&v545[16] - *(_QWORD *)&v545[8];
    if (*(_QWORD *)&v545[16] == *(_QWORD *)&v545[8]
      || (v43 = *(_QWORD *)v40 + (v36 & 0xFFF),
          v44 = (char *)(*(_QWORD *)&v545[8] + 8 * v41),
          v45 = *(_QWORD *)v44 + (v546.i16[0] & 0xFFF),
          v43 == v45))
    {
      v46 = 0;
    }
    else
    {
      v46 = v43 + ((v40 - v44) << 9) - (v45 + *(_QWORD *)v40) + *(_QWORD *)v44;
    }
    v490 = v30;
    v492 = v46;
    if (v46 < v546.i64[1] - v46)
    {
      if (v546.i64[0] <= 1uLL)
      {
        v47 = (v42 << 9) - 1;
        if (*(_QWORD *)&v545[16] == *(_QWORD *)&v545[8])
          v47 = 0;
        v48 = (*(_QWORD *)&v545[16] == *(_QWORD *)&v545[8]) - v546.i64[0] + 2;
        if ((v48 & 0xFFF) != 0)
          v49 = (v48 >> 12) + 1;
        else
          v49 = v48 >> 12;
        v50 = (unint64_t)(v47 - v36) >> 12;
        if (v49 >= v50)
          v51 = v50;
        else
          v51 = v49;
        if (v49 <= v50)
        {
          for (v546.i64[0] += v51 << 12; v51; --v51)
          {
            cf.__r_.__value_.__r.__words[0] = *(_QWORD *)(*(_QWORD *)&v545[16] - 8);
            *(_QWORD *)&v545[16] -= 8;
            sub_19C3FA9A0((void **)v545, &cf);
          }
        }
        else
        {
          v486 = i;
          v52 = v49 - v51;
          v53 = *(_QWORD *)&v545[24] - *(_QWORD *)v545;
          v54 = (uint64_t)(*(_QWORD *)&v545[16] - *(_QWORD *)&v545[8]) >> 3;
          if (v49 - v51 > ((uint64_t)(*(_QWORD *)&v545[24] - *(_QWORD *)v545) >> 3) - v54)
          {
            v55 = *(_QWORD *)&v545[16] == *(_QWORD *)&v545[8];
            if (v53 >> 2 <= v52 + v54)
              v56 = v52 + v54;
            else
              v56 = v53 >> 2;
            if (v56)
            {
              if (v56 >> 61)
LABEL_763:
                sub_19C2A143C();
              v57 = (char *)operator new(8 * v56);
            }
            else
            {
              v57 = 0;
            }
            v482 = (v49 << 12) - v55;
            v96 = &v57[8 * v56];
            v97 = v57;
            v98 = v57;
            while (1)
            {
              __p = v57;
              v99 = v96;
              v100 = operator new(0x1000uLL);
              v96 = v99;
              if (v98 == v99)
                break;
LABEL_147:
              *(_QWORD *)v98 = v100;
              v98 += 8;
              if (!--v52)
              {
                v494 = v96;
                v121 = *(_QWORD *)&v545[16];
                if (!v51)
                {
LABEL_175:
                  v122 = *(uint64_t **)&v545[8];
                  if (*(_QWORD *)&v545[8] == v121)
                  {
LABEL_176:
                    v123 = *(void **)v545;
                    *(_QWORD *)v545 = v57;
                    *(_QWORD *)&v545[8] = v97;
                    *(_QWORD *)&v545[16] = v98;
                    v46 = v492;
                    *(_QWORD *)&v545[24] = v494;
                    v546.i64[0] += v482;
                    i = v486;
                    if (v123)
                      operator delete(v123);
                    goto LABEL_178;
                  }
                  while (2)
                  {
                    if (v98 != v494)
                    {
                      v148 = v97;
                      goto LABEL_209;
                    }
                    if (v97 > v57)
                    {
                      v150 = (v97 - v57) >> 3;
                      if (v150 >= -1)
                        v151 = v150 + 1;
                      else
                        v151 = v150 + 2;
                      v152 = v151 >> 1;
                      v153 = &v97[-8 * (v151 >> 1)];
                      v154 = v494;
                      if (v494 != v97)
                      {
                        memmove(v153, v97, v494 - v97);
                        v154 = v97;
                      }
                      v98 = &v153[v494 - v97];
                      v148 = &v154[-8 * v152];
                      goto LABEL_209;
                    }
                    if (v494 == v57)
                      v155 = 1;
                    else
                      v155 = (v494 - v57) >> 2;
                    if (v155 >> 61)
                      sub_19C2A143C();
                    v156 = (char *)operator new(8 * v155);
                    v157 = v156;
                    v158 = v155 >> 2;
                    v148 = &v156[8 * (v155 >> 2)];
                    v98 = v148;
                    v159 = v494 - v97;
                    if (v494 != v97)
                    {
                      v98 = &v148[v159 & 0xFFFFFFFFFFFFFFF8];
                      v160 = v159 - 8;
                      if (v160 >= 0x38)
                      {
                        v162 = 8 * v158;
                        if ((unint64_t)(&v156[8 * v158] - v97) < 0x20)
                        {
                          v161 = &v156[8 * (v155 >> 2)];
                          goto LABEL_231;
                        }
                        v163 = (v160 >> 3) + 1;
                        v164 = 8 * (v163 & 0x3FFFFFFFFFFFFFFCLL);
                        v161 = &v148[v164];
                        v165 = (__int128 *)(v97 + 16);
                        v166 = &v156[v162 + 16];
                        v167 = v163 & 0x3FFFFFFFFFFFFFFCLL;
                        do
                        {
                          v168 = *v165;
                          *((_OWORD *)v166 - 1) = *(v165 - 1);
                          *(_OWORD *)v166 = v168;
                          v165 += 2;
                          v166 += 32;
                          v167 -= 4;
                        }
                        while (v167);
                        if (v163 != (v163 & 0x3FFFFFFFFFFFFFFCLL))
                        {
                          v97 += v164;
                          goto LABEL_231;
                        }
                      }
                      else
                      {
                        v161 = &v156[8 * (v155 >> 2)];
                        do
                        {
LABEL_231:
                          v169 = *(_QWORD *)v97;
                          v97 += 8;
                          *(_QWORD *)v161 = v169;
                          v161 += 8;
                        }
                        while (v161 != v98);
                      }
                    }
                    v494 = &v156[8 * v155];
                    if (v57)
                      operator delete(v57);
                    v57 = v157;
LABEL_209:
                    v149 = *v122++;
                    *(_QWORD *)v98 = v149;
                    v98 += 8;
                    v97 = v148;
                    if (v122 == *(uint64_t **)&v545[16])
                      goto LABEL_176;
                    continue;
                  }
                }
                while (2)
                {
                  if (v98 != v494)
                  {
                    v126 = v97;
                    goto LABEL_182;
                  }
                  if (v97 > v57)
                  {
                    v127 = (v97 - v57) >> 3;
                    if (v127 >= -1)
                      v128 = v127 + 1;
                    else
                      v128 = v127 + 2;
                    v129 = v128 >> 1;
                    v130 = &v97[-8 * (v128 >> 1)];
                    v131 = v494;
                    if (v494 != v97)
                    {
                      memmove(v130, v97, v494 - v97);
                      v131 = v97;
                    }
                    v132 = -v129;
                    v98 = &v130[v494 - v97];
                    v126 = &v131[8 * v132];
                    goto LABEL_182;
                  }
                  __pa = v57;
                  if (v494 == v57)
                    v133 = 1;
                  else
                    v133 = (v494 - v57) >> 2;
                  if (v133 >> 61)
                    sub_19C2A143C();
                  v134 = (char *)operator new(8 * v133);
                  v135 = v134;
                  v136 = v133 >> 2;
                  v126 = &v134[8 * (v133 >> 2)];
                  v98 = v126;
                  v137 = v494 - v97;
                  if (v494 != v97)
                  {
                    v98 = &v126[v137 & 0xFFFFFFFFFFFFFFF8];
                    v138 = v137 - 8;
                    if (v138 >= 0x38)
                    {
                      v140 = 8 * v136;
                      if ((unint64_t)(&v134[8 * v136] - v97) < 0x20)
                      {
                        v139 = &v134[8 * (v133 >> 2)];
                        goto LABEL_204;
                      }
                      v141 = (v138 >> 3) + 1;
                      v142 = 8 * (v141 & 0x3FFFFFFFFFFFFFFCLL);
                      v139 = &v126[v142];
                      v143 = (__int128 *)(v97 + 16);
                      v144 = &v134[v140 + 16];
                      v145 = v141 & 0x3FFFFFFFFFFFFFFCLL;
                      do
                      {
                        v146 = *v143;
                        *((_OWORD *)v144 - 1) = *(v143 - 1);
                        *(_OWORD *)v144 = v146;
                        v143 += 2;
                        v144 += 32;
                        v145 -= 4;
                      }
                      while (v145);
                      if (v141 != (v141 & 0x3FFFFFFFFFFFFFFCLL))
                      {
                        v97 += v142;
                        goto LABEL_204;
                      }
                    }
                    else
                    {
                      v139 = &v134[8 * (v133 >> 2)];
                      do
                      {
LABEL_204:
                        v147 = *(_QWORD *)v97;
                        v97 += 8;
                        *(_QWORD *)v139 = v147;
                        v139 += 8;
                      }
                      while (v139 != v98);
                    }
                  }
                  v494 = &v134[8 * v133];
                  if (__pa)
                    operator delete(__pa);
                  v57 = v135;
LABEL_182:
                  *(_QWORD *)v98 = *(_QWORD *)(v121 - 8);
                  v98 += 8;
                  v121 = *(_QWORD *)&v545[16] - 8;
                  *(_QWORD *)&v545[16] -= 8;
                  v97 = v126;
                  if (!--v51)
                    goto LABEL_175;
                  continue;
                }
              }
            }
            if (v97 > v57)
            {
              v101 = (v97 - v57) >> 3;
              if (v101 >= -1)
                v102 = v101 + 1;
              else
                v102 = v101 + 2;
              v103 = v102 >> 1;
              v104 = &v97[-8 * (v102 >> 1)];
              v105 = v99;
              if (v99 != v97)
              {
                memmove(v104, v97, v99 - v97);
                v105 = v97;
              }
              v98 = &v104[v99 - v97];
              v97 = &v105[-8 * v103];
              v57 = __p;
              goto LABEL_173;
            }
            if (v99 == v57)
              v106 = 1;
            else
              v106 = (v99 - v57) >> 2;
            if (v106 >> 61)
              sub_19C2A143C();
            v107 = (char *)operator new(8 * v106);
            v108 = v106 >> 2;
            v109 = &v107[8 * (v106 >> 2)];
            v98 = v109;
            v110 = v99 - v97;
            if (v99 != v97)
            {
              v98 = &v109[v110 & 0xFFFFFFFFFFFFFFF8];
              v111 = v110 - 8;
              if (v111 >= 0x38)
              {
                v113 = 8 * v108;
                if ((unint64_t)(&v107[8 * v108] - v97) >= 0x20)
                {
                  v114 = (v111 >> 3) + 1;
                  v115 = 8 * (v114 & 0x3FFFFFFFFFFFFFFCLL);
                  v112 = &v109[v115];
                  v116 = (__int128 *)(v97 + 16);
                  v117 = &v107[v113 + 16];
                  v118 = v114 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v119 = *v116;
                    *((_OWORD *)v117 - 1) = *(v116 - 1);
                    *(_OWORD *)v117 = v119;
                    v116 += 2;
                    v117 += 32;
                    v118 -= 4;
                  }
                  while (v118);
                  if (v114 == (v114 & 0x3FFFFFFFFFFFFFFCLL))
                    goto LABEL_170;
                  v97 += v115;
                }
                else
                {
                  v112 = &v107[8 * (v106 >> 2)];
                }
              }
              else
              {
                v112 = &v107[8 * (v106 >> 2)];
              }
              do
              {
                v120 = *(_QWORD *)v97;
                v97 += 8;
                *(_QWORD *)v112 = v120;
                v112 += 8;
              }
              while (v112 != v98);
            }
LABEL_170:
            v99 = &v107[8 * v106];
            if (__p)
            {
              v57 = v107;
              v97 = v109;
              operator delete(__p);
            }
            else
            {
              v97 = v109;
              v57 = v107;
            }
LABEL_173:
            v96 = v99;
            goto LABEL_147;
          }
          if (v52)
          {
            if (*(_QWORD *)&v545[8] == *(_QWORD *)v545)
            {
LABEL_135:
              v95 = v52;
              do
              {
                cf.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x1000uLL);
                sub_19C3FA818((char **)v545, &cf);
                --v95;
              }
              while (v95);
              v51 += v52;
              v35 = v546.i64[0];
            }
            else
            {
              while (1)
              {
                cf.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x1000uLL);
                sub_19C3FA9A0((void **)v545, &cf);
                v94 = 4095;
                if (*(_QWORD *)&v545[16] - *(_QWORD *)&v545[8] != 8)
                  v94 = 4096;
                v35 = v94 + v546.i64[0];
                v546.i64[0] = v35;
                if (!--v52)
                  break;
                if (*(_QWORD *)&v545[8] == *(_QWORD *)v545)
                  goto LABEL_135;
              }
            }
          }
          v546.i64[0] = v35 + (v51 << 12);
          for (i = v486; v51; --v51)
          {
            cf.__r_.__value_.__r.__words[0] = *(_QWORD *)(*(_QWORD *)&v545[16] - 8);
            *(_QWORD *)&v545[16] -= 8;
            sub_19C3FA9A0((void **)v545, &cf);
          }
        }
LABEL_178:
        LOWORD(v35) = v546.i16[0];
        v39 = *(char **)&v545[16];
        v38 = *(char **)&v545[8];
        v41 = (unint64_t)v546.i64[0] >> 12;
      }
      v124 = (void **)&v38[8 * v41];
      if (v39 == v38)
        v125 = 0;
      else
        v125 = (char *)*v124 + (v35 & 0xFFF);
      if (v46 > 1)
      {
        v175 = 2;
        v170 = "'s";
        v172 = (char **)&v38[8 * v41];
        v173 = v125;
      }
      else
      {
        v170 = &aS_0[-v46 + 2];
        v171 = -(uint64_t)v46;
        v172 = (char **)&v38[8 * v41];
        v173 = v125;
        do
        {
          if (v173 == *v172)
          {
            v174 = (uint64_t)*--v172;
            v173 = (char *)(v174 + 4096);
          }
          *--v173 = aS_0[v171 + 1];
          v546 = vaddq_s64(v546, (int64x2_t)xmmword_19C46DF30);
          --v171;
        }
        while (v171 != -2);
        v175 = v46;
        if (!v46)
          goto LABEL_502;
      }
      v176 = v125 - (_BYTE *)*v124 + v175;
      if (v176 < 1)
      {
        v179 = 4095 - v176;
        v177 = (char *)&v124[-(v179 >> 12)];
        v178 = (char *)(*(_QWORD *)v177 + (~(_WORD)v179 & 0xFFF));
      }
      else
      {
        v177 = (char *)&v124[(unint64_t)v176 >> 12];
        v178 = (char *)(*(_QWORD *)v177 + (v176 & 0xFFF));
      }
      v180 = (void **)v177;
      for (j = v178; j != v125; v546 = vaddq_s64(v546, (int64x2_t)xmmword_19C46DF30))
      {
        if (v173 == *v172)
        {
          v187 = (uint64_t)*--v172;
          v173 = (char *)(v187 + 4096);
        }
        if (j == *v180)
        {
          v188 = (uint64_t)*--v180;
          j = (char *)(v188 + 4096);
        }
        v186 = *--j;
        *--v173 = v186;
      }
      if (v175 < v492)
      {
        __pb = v177;
        v488 = i;
        v182 = (char *)*v124;
        v183 = v125 - (_BYTE *)*v124 + v492;
        if (v183 < 1)
        {
          v189 = 4095 - v183;
          v184 = (char *)&v124[-(v189 >> 12)];
          v185 = (char *)(*(_QWORD *)v184 + (~(_WORD)v189 & 0xFFF));
        }
        else
        {
          v184 = (char *)&v124[(unint64_t)v183 >> 12];
          v185 = (char *)(*(_QWORD *)v184 + (v183 & 0xFFF));
        }
        if (v177 != v184)
        {
          v190 = *(_QWORD *)v177 + 4096;
          if ((char *)v190 != v178)
          {
            while (1)
            {
              v191 = v182 - v125 + 4096;
              if (v190 - (uint64_t)v178 >= v191)
                v192 = v191;
              else
                v192 = v190 - (_QWORD)v178;
              if (v192)
                memmove(v125, v178, v192);
              v178 += v192;
              if (v178 == (char *)v190)
                break;
              v193 = (char *)v124[1];
              ++v124;
              v182 = v193;
              v125 = v193;
            }
            v125 += v192;
            v182 = (char *)*v124;
            if ((char *)*v124 + 4096 == v125)
            {
              v194 = (char *)v124[1];
              ++v124;
              v182 = v194;
              v125 = v194;
            }
          }
          v195 = __pb + 8;
          if (__pb + 8 != v184)
          {
            __pc = v185;
            do
            {
              v196 = v184;
              v197 = 0;
              v198 = *(_QWORD *)v195;
              while (1)
              {
                v199 = v182 - v125 + 4096;
                if (4096 - v197 >= v199)
                  v200 = v199;
                else
                  v200 = 4096 - v197;
                if (v200)
                  memmove(v125, (const void *)(v198 + v197), v200);
                v197 += v200;
                if (v197 == 4096)
                  break;
                v201 = (char *)v124[1];
                ++v124;
                v182 = v201;
                v125 = v201;
              }
              v125 += v200;
              v182 = (char *)*v124;
              if ((char *)*v124 + 4096 == v125)
              {
                v202 = (char *)v124[1];
                ++v124;
                v182 = v202;
                v125 = v202;
              }
              v184 = v196;
              v195 += 8;
            }
            while (v195 != v196);
            v185 = __pc;
          }
          v203 = *(char **)v184;
          if (*(char **)v184 == v185)
            goto LABEL_300;
          v204 = (char *)*v124;
          while (1)
          {
            v205 = v204 - v125 + 4096;
            if (v185 - v203 >= v205)
              v206 = v205;
            else
              v206 = v185 - v203;
            if (v206)
              memmove(v125, v203, v206);
            v203 += v206;
            if (v203 == v185)
              break;
            v207 = (char *)v124[1];
            ++v124;
            v204 = v207;
            v125 = v207;
          }
LABEL_298:
          v125 += v206;
          if ((char *)*v124 + 4096 == v125)
          {
            v210 = (char *)v124[1];
            ++v124;
            v125 = v210;
          }
LABEL_300:
          i = v488;
          goto LABEL_301;
        }
        if (v178 != v185)
        {
          while (1)
          {
            v208 = v182 - v125 + 4096;
            if (v185 - v178 >= v208)
              v206 = v208;
            else
              v206 = v185 - v178;
            if (v206)
              memmove(v125, v178, v206);
            v178 += v206;
            if (v178 == v185)
              break;
            v209 = (char *)v124[1];
            ++v124;
            v182 = v209;
            v125 = v209;
          }
          goto LABEL_298;
        }
        i = v488;
      }
LABEL_301:
      if (v170 != "")
      {
        v213 = (char *)*v124;
        v212 = v124 + 1;
        v211 = v213;
        while (1)
        {
          v214 = v211 - v125 + 4096;
          if ("'s" - v170 + 2 >= v214)
            v215 = v214;
          else
            v215 = "'s" - v170 + 2;
          if (v215)
            memmove(v125, v170, v215);
          v170 += v215;
          if (v170 == "")
            break;
          v216 = (char *)*v212++;
          v211 = v216;
          v125 = v216;
        }
      }
      goto LABEL_502;
    }
    v58 = (v42 << 9) - 1;
    v59 = *(_QWORD *)&v545[16] - *(_QWORD *)&v545[8];
    if (*(_QWORD *)&v545[16] == *(_QWORD *)&v545[8])
      v58 = 0;
    v60 = v58 - v36;
    v487 = i;
    if (v60 > 1)
      goto LABEL_402;
    v61 = (*(_QWORD *)&v545[16] == *(_QWORD *)&v545[8]) - v60 + 2;
    if ((v61 & 0xFFF) != 0)
      v62 = (v61 >> 12) + 1;
    else
      v62 = v61 >> 12;
    if (v62 >= v41)
      v63 = (unint64_t)v546.i64[0] >> 12;
    else
      v63 = v62;
    if (v62 <= v41)
    {
      v546.i64[0] -= v63 << 12;
      if (!v63)
        goto LABEL_401;
      while (1)
      {
        v69 = *(_QWORD *)&v545[8];
        v70 = (char *)(*(_QWORD *)&v545[8] + 8);
        v71 = **(_QWORD **)&v545[8];
        *(_QWORD *)&v545[8] += 8;
        if (v39 == *(char **)&v545[24])
        {
          v72 = *(void **)v545;
          if ((unint64_t)v70 <= *(_QWORD *)v545)
          {
            if (v39 == *(char **)v545)
              v78 = 1;
            else
              v78 = (uint64_t)&v39[-*(_QWORD *)v545] >> 2;
            if (v78 >> 61)
              goto LABEL_763;
            v79 = operator new(8 * v78);
            v80 = v78 >> 2;
            v81 = &v79[8 * (v78 >> 2)];
            v82 = v39 - v70;
            v18 = v39 == v70;
            v39 = v81;
            if (!v18)
            {
              v39 = &v81[v82 & 0xFFFFFFFFFFFFFFF8];
              v83 = v82 - 8;
              if (v83 >= 0x38)
              {
                v85 = 8 * v80;
                v86 = &v79[8 * v80] - v70;
                v84 = &v79[8 * (v78 >> 2)];
                if (v86 < 0x20)
                  goto LABEL_126;
                v87 = (v83 >> 3) + 1;
                v88 = 8 * (v87 & 0x3FFFFFFFFFFFFFFCLL);
                v84 = &v81[v88];
                v89 = (__int128 *)(v69 + 24);
                v90 = &v79[v85 + 16];
                v91 = v87 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v92 = *v89;
                  *(v90 - 1) = *(v89 - 1);
                  *v90 = v92;
                  v89 += 2;
                  v90 += 2;
                  v91 -= 4;
                }
                while (v91);
                if (v87 != (v87 & 0x3FFFFFFFFFFFFFFCLL))
                {
                  v70 += v88;
                  goto LABEL_126;
                }
              }
              else
              {
                v84 = &v79[8 * (v78 >> 2)];
                do
                {
LABEL_126:
                  v93 = *(_QWORD *)v70;
                  v70 += 8;
                  *(_QWORD *)v84 = v93;
                  v84 += 8;
                }
                while (v84 != v39);
              }
            }
            *(_QWORD *)v545 = v79;
            *(_QWORD *)&v545[8] = &v79[8 * (v78 >> 2)];
            *(_QWORD *)&v545[16] = v39;
            *(_QWORD *)&v545[24] = &v79[8 * v78];
            v46 = v492;
            if (v72)
            {
              operator delete(v72);
              v39 = *(char **)&v545[16];
            }
            goto LABEL_106;
          }
          v73 = (uint64_t)&v70[-*(_QWORD *)v545] >> 3;
          if (v73 >= -1)
            v74 = v73 + 1;
          else
            v74 = v73 + 2;
          v75 = v74 >> 1;
          v76 = &v70[-8 * (v74 >> 1)];
          v77 = v39 - v70;
          if (v39 != v70)
          {
            memmove(&v70[-8 * (v74 >> 1)], v70, v39 - v70);
            v39 = *(char **)&v545[8];
          }
          v68 = &v39[-8 * v75];
          v39 = &v76[v77];
          *(_QWORD *)&v545[16] = &v76[v77];
          *(_QWORD *)&v545[8] = v68;
          v46 = v492;
        }
LABEL_106:
        *(_QWORD *)v39 = v71;
        v39 = (char *)(*(_QWORD *)&v545[16] + 8);
        *(_QWORD *)&v545[16] += 8;
        if (!--v63)
          goto LABEL_401;
      }
    }
    v64 = v62 - v63;
    v65 = v59 >> 3;
    if (v62 - v63 <= ((uint64_t)(*(_QWORD *)&v545[24] - *(_QWORD *)v545) >> 3) - (v59 >> 3))
    {
      if (!v64)
        goto LABEL_399;
      do
      {
        if (*(_QWORD *)&v545[24] == *(_QWORD *)&v545[16])
        {
          for (k = 0; k != v64; ++k)
          {
            cf.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x1000uLL);
            sub_19C3FA9A0((void **)v545, &cf);
            v39 = *(char **)&v545[16];
            v292 = 4095;
            if (*(_QWORD *)&v545[16] - *(_QWORD *)&v545[8] != 8)
              v292 = 4096;
            v293 = v292 + v546.i64[0];
            v546.i64[0] = v293;
          }
          v63 += v64;
          goto LABEL_400;
        }
        cf.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x1000uLL);
        sub_19C3FA818((char **)v545, &cf);
        --v64;
      }
      while (v64);
      v39 = *(char **)&v545[16];
LABEL_399:
      v293 = v546.i64[0];
LABEL_400:
      v546.i64[0] = v293 - (v63 << 12);
      if (!v63)
        goto LABEL_401;
      while (1)
      {
        v297 = *(_QWORD *)&v545[8];
        v298 = (char *)(*(_QWORD *)&v545[8] + 8);
        v299 = **(_QWORD **)&v545[8];
        *(_QWORD *)&v545[8] += 8;
        if (v39 == *(char **)&v545[24])
        {
          v300 = *(void **)v545;
          if ((unint64_t)v298 <= *(_QWORD *)v545)
          {
            if (v39 == *(char **)v545)
              v306 = 1;
            else
              v306 = (uint64_t)&v39[-*(_QWORD *)v545] >> 2;
            if (v306 >> 61)
              goto LABEL_763;
            v307 = operator new(8 * v306);
            v308 = v306 >> 2;
            v309 = &v307[8 * (v306 >> 2)];
            v310 = v39 - v298;
            v18 = v39 == v298;
            v39 = v309;
            if (!v18)
            {
              v39 = &v309[v310 & 0xFFFFFFFFFFFFFFF8];
              v311 = v310 - 8;
              if (v311 >= 0x38)
              {
                v313 = 8 * v308;
                v314 = &v307[8 * v308] - v298;
                v312 = &v307[8 * (v306 >> 2)];
                if (v314 < 0x20)
                  goto LABEL_425;
                v315 = (v311 >> 3) + 1;
                v316 = 8 * (v315 & 0x3FFFFFFFFFFFFFFCLL);
                v312 = &v309[v316];
                v317 = (__int128 *)(v297 + 24);
                v318 = &v307[v313 + 16];
                v319 = v315 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v320 = *v317;
                  *(v318 - 1) = *(v317 - 1);
                  *v318 = v320;
                  v317 += 2;
                  v318 += 2;
                  v319 -= 4;
                }
                while (v319);
                if (v315 != (v315 & 0x3FFFFFFFFFFFFFFCLL))
                {
                  v298 += v316;
                  goto LABEL_425;
                }
              }
              else
              {
                v312 = &v307[8 * (v306 >> 2)];
                do
                {
LABEL_425:
                  v321 = *(_QWORD *)v298;
                  v298 += 8;
                  *(_QWORD *)v312 = v321;
                  v312 += 8;
                }
                while (v312 != v39);
              }
            }
            *(_QWORD *)v545 = v307;
            *(_QWORD *)&v545[8] = &v307[8 * (v306 >> 2)];
            *(_QWORD *)&v545[16] = v39;
            *(_QWORD *)&v545[24] = &v307[8 * v306];
            v46 = v492;
            if (v300)
            {
              operator delete(v300);
              v39 = *(char **)&v545[16];
            }
            goto LABEL_405;
          }
          v301 = (uint64_t)&v298[-*(_QWORD *)v545] >> 3;
          if (v301 >= -1)
            v302 = v301 + 1;
          else
            v302 = v301 + 2;
          v303 = v302 >> 1;
          v304 = &v298[-8 * (v302 >> 1)];
          v305 = v39 - v298;
          if (v39 != v298)
          {
            memmove(&v298[-8 * (v302 >> 1)], v298, v39 - v298);
            v39 = *(char **)&v545[8];
          }
          v296 = &v39[-8 * v303];
          v39 = &v304[v305];
          *(_QWORD *)&v545[16] = &v304[v305];
          *(_QWORD *)&v545[8] = v296;
          v46 = v492;
        }
LABEL_405:
        *(_QWORD *)v39 = v299;
        v39 = (char *)(*(_QWORD *)&v545[16] + 8);
        *(_QWORD *)&v545[16] += 8;
        if (!--v63)
          goto LABEL_401;
      }
    }
    if ((uint64_t)(*(_QWORD *)&v545[24] - *(_QWORD *)v545) >> 2 <= v64 + v65)
      v66 = v64 + v65;
    else
      v66 = (uint64_t)(*(_QWORD *)&v545[24] - *(_QWORD *)v545) >> 2;
    if (v66)
    {
      if (v66 >> 61)
        goto LABEL_763;
      v67 = (char *)operator new(8 * v66);
    }
    else
    {
      v67 = 0;
    }
    v495 = v63 << 12;
    v217 = &v67[8 * (v65 - v63)];
    v218 = &v67[8 * v66];
    v39 = v217;
    do
    {
      __pd = v67;
      v219 = v218;
      v220 = operator new(0x1000uLL);
      if (v39 != v218)
        goto LABEL_313;
      if (v217 <= v67)
      {
        if (v218 == v67)
          v226 = 1;
        else
          v226 = (v218 - v67) >> 2;
        if (v226 >> 61)
          sub_19C2A143C();
        v227 = (char *)operator new(8 * v226);
        v228 = v226 >> 2;
        v229 = &v227[8 * (v226 >> 2)];
        v39 = v229;
        v230 = v218 - v217;
        if (v218 != v217)
        {
          v39 = &v229[v230 & 0xFFFFFFFFFFFFFFF8];
          v231 = v230 - 8;
          if (v231 >= 0x38)
          {
            v233 = 8 * v228;
            if ((unint64_t)(&v227[8 * v228] - v217) < 0x20)
            {
              v232 = &v227[8 * (v226 >> 2)];
              goto LABEL_335;
            }
            v234 = (v231 >> 3) + 1;
            v235 = 8 * (v234 & 0x3FFFFFFFFFFFFFFCLL);
            v232 = &v229[v235];
            v236 = (__int128 *)(v217 + 16);
            v237 = &v227[v233 + 16];
            v238 = v234 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v239 = *v236;
              *((_OWORD *)v237 - 1) = *(v236 - 1);
              *(_OWORD *)v237 = v239;
              v236 += 2;
              v237 += 32;
              v238 -= 4;
            }
            while (v238);
            if (v234 != (v234 & 0x3FFFFFFFFFFFFFFCLL))
            {
              v217 += v235;
              goto LABEL_335;
            }
          }
          else
          {
            v232 = &v227[8 * (v226 >> 2)];
            do
            {
LABEL_335:
              v240 = *(_QWORD *)v217;
              v217 += 8;
              *(_QWORD *)v232 = v240;
              v232 += 8;
            }
            while (v232 != v39);
          }
        }
        v218 = &v227[8 * v226];
        if (__pd)
        {
          v67 = v227;
          v217 = v229;
          operator delete(__pd);
        }
        else
        {
          v217 = v229;
          v67 = v227;
        }
        goto LABEL_313;
      }
      v221 = (v217 - v67) >> 3;
      if (v221 >= -1)
        v222 = v221 + 1;
      else
        v222 = v221 + 2;
      v223 = v222 >> 1;
      v224 = &v217[-8 * (v222 >> 1)];
      v225 = v219;
      if (v219 != v217)
      {
        memmove(v224, v217, v219 - v217);
        v225 = v217;
      }
      v39 = &v224[v219 - v217];
      v217 = &v225[-8 * v223];
      v67 = __pd;
      v218 = v219;
LABEL_313:
      *(_QWORD *)v39 = v220;
      v39 += 8;
      --v64;
    }
    while (v64);
    for (m = *(_QWORD **)&v545[8]; v63; v218 = v244)
    {
      if (v39 == v218)
      {
        if (v217 <= v67)
        {
          __pe = v67;
          if (v218 == v67)
            v254 = 1;
          else
            v254 = (v218 - v67) >> 2;
          if (v254 >> 61)
            sub_19C2A143C();
          v255 = v218;
          v256 = (char *)operator new(8 * v254);
          v257 = v256;
          v258 = v254 >> 2;
          v245 = &v256[8 * (v254 >> 2)];
          v39 = v245;
          v259 = v255 - v217;
          if (v255 != v217)
          {
            v39 = &v245[v259 & 0xFFFFFFFFFFFFFFF8];
            v260 = v259 - 8;
            if (v260 >= 0x38)
            {
              v262 = 8 * v258;
              if ((unint64_t)(&v256[8 * v258] - v217) < 0x20)
              {
                v261 = &v256[8 * (v254 >> 2)];
                goto LABEL_366;
              }
              v263 = (v260 >> 3) + 1;
              v264 = 8 * (v263 & 0x3FFFFFFFFFFFFFFCLL);
              v261 = &v245[v264];
              v265 = (__int128 *)(v217 + 16);
              v266 = &v256[v262 + 16];
              v267 = v263 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v268 = *v265;
                *((_OWORD *)v266 - 1) = *(v265 - 1);
                *(_OWORD *)v266 = v268;
                v265 += 2;
                v266 += 32;
                v267 -= 4;
              }
              while (v267);
              if (v263 != (v263 & 0x3FFFFFFFFFFFFFFCLL))
              {
                v217 += v264;
                goto LABEL_366;
              }
            }
            else
            {
              v261 = &v256[8 * (v254 >> 2)];
              do
              {
LABEL_366:
                v269 = *(_QWORD *)v217;
                v217 += 8;
                *(_QWORD *)v261 = v269;
                v261 += 8;
              }
              while (v261 != v39);
            }
          }
          v244 = &v256[8 * v254];
          if (__pe)
            operator delete(__pe);
          v67 = v257;
          goto LABEL_344;
        }
        v246 = (v217 - v67) >> 3;
        if (v246 >= -1)
          v247 = v246 + 1;
        else
          v247 = v246 + 2;
        v248 = v247 >> 1;
        v249 = &v217[-8 * (v247 >> 1)];
        v250 = v218;
        v244 = v218;
        v251 = v218 - v217;
        if (v218 != v217)
        {
          v252 = v249;
          memmove(v249, v217, v251);
          v249 = v252;
          v250 = v217;
        }
        v253 = -v248;
        v39 = &v249[v251];
        v245 = &v250[8 * v253];
      }
      else
      {
        v244 = v218;
        v245 = v217;
      }
LABEL_344:
      *(_QWORD *)v39 = *m;
      v39 += 8;
      m = (_QWORD *)(*(_QWORD *)&v545[8] + 8);
      *(_QWORD *)&v545[8] += 8;
      v217 = v245;
      --v63;
    }
    v242 = *(_QWORD *)&v545[16];
    if (*(_QWORD **)&v545[16] != m)
    {
      while (v217 != v67)
      {
LABEL_371:
        v270 = *(_QWORD *)(v242 - 8);
        v242 -= 8;
        *((_QWORD *)v217 - 1) = v270;
        v217 -= 8;
        if (v242 == *(_QWORD *)&v545[8])
          goto LABEL_341;
      }
      if (v39 < v218)
      {
        v271 = (v218 - v39) >> 3;
        if (v271 >= -1)
          v272 = v271 + 1;
        else
          v272 = v271 + 2;
        v273 = v272 >> 1;
        v217 = &v67[8 * (v272 >> 1)];
        v274 = v67;
        if (v39 != v67)
        {
          memmove(v217, v67, v39 - v67);
          v274 = v39;
        }
        v39 = &v274[8 * v273];
        goto LABEL_371;
      }
      if (v218 == v67)
        v275 = 1;
      else
        v275 = (v218 - v67) >> 2;
      if (v275 >> 61)
        sub_19C2A143C();
      v276 = (char *)operator new(8 * v275);
      v277 = v276;
      v278 = (v275 + 3) >> 2;
      v217 = &v276[8 * v278];
      v218 = &v276[8 * v275];
      v279 = v39 - v67;
      v18 = v39 == v67;
      v39 = v217;
      if (!v18)
      {
        v39 = &v217[v279 & 0xFFFFFFFFFFFFFFF8];
        v280 = v279 - 8;
        v281 = &v276[8 * v278];
        v282 = v67;
        if (v280 >= 0x38)
        {
          v283 = 8 * v278;
          v281 = &v276[8 * v278];
          v282 = v67;
          if ((unint64_t)(v281 - v67) >= 0x20)
          {
            v284 = (v280 >> 3) + 1;
            v285 = 8 * (v284 & 0x3FFFFFFFFFFFFFFCLL);
            v281 = &v217[v285];
            v286 = (__int128 *)(v67 + 16);
            v287 = &v276[v283 + 16];
            v288 = v284 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v289 = *v286;
              *((_OWORD *)v287 - 1) = *(v286 - 1);
              *(_OWORD *)v287 = v289;
              v286 += 2;
              v287 += 32;
              v288 -= 4;
            }
            while (v288);
            if (v284 == (v284 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_392;
            v282 = &v67[v285];
          }
        }
        do
        {
          v290 = *(_QWORD *)v282;
          v282 += 8;
          *(_QWORD *)v281 = v290;
          v281 += 8;
        }
        while (v281 != v39);
      }
      if (!v67)
      {
LABEL_393:
        v67 = v277;
        goto LABEL_371;
      }
LABEL_392:
      operator delete(v67);
      goto LABEL_393;
    }
LABEL_341:
    v243 = *(void **)v545;
    *(_QWORD *)v545 = v67;
    *(_QWORD *)&v545[8] = v217;
    *(_QWORD *)&v545[16] = v39;
    *(_QWORD *)&v545[24] = v218;
    v46 = v492;
    v546.i64[0] -= v495;
    if (v243)
    {
      operator delete(v243);
      v39 = *(char **)&v545[16];
    }
LABEL_401:
    v34 = v546.i64[1];
    v38 = *(char **)&v545[8];
    LOWORD(v36) = v546.i16[0] + v546.i16[4];
    v37 = (unint64_t)(v546.i64[0] + v546.i64[1]) >> 12;
    i = v487;
LABEL_402:
    v294 = &v38[8 * v37];
    if (v39 == v38)
      v295 = 0;
    else
      v295 = (_BYTE *)(*(_QWORD *)v294 + (v36 & 0xFFF));
    v322 = v34 - v46;
    if (v34 - v46 > 1)
    {
      v323 = 2;
      v324 = "";
      v326 = v294;
      v327 = v295;
      goto LABEL_438;
    }
    v323 = v34 - v46;
    if (v322 == 2)
    {
      v324 = "";
      v327 = v295;
      v326 = v294;
    }
    else
    {
      v324 = &aS_0[v322];
      v325 = v34 - v46;
      v326 = v294;
      v327 = v295;
      do
      {
        *v327++ = aS_0[v325];
        if (&v327[-*(_QWORD *)v326] == (_BYTE *)4096)
        {
          v328 = (_BYTE *)*((_QWORD *)v326 + 1);
          v326 += 8;
          v327 = v328;
        }
        ++v546.i64[1];
        ++v325;
      }
      while (v325 != 2);
    }
    if (!v322)
      goto LABEL_502;
LABEL_438:
    v329 = (uint64_t)&v295[-v323 - *(_QWORD *)v294];
    if (v329 < 1)
    {
      v332 = 4095 - v329;
      v330 = &v294[-8 * (v332 >> 12)];
      v331 = (_BYTE *)(*(_QWORD *)v330 + (~(_WORD)v332 & 0xFFF));
    }
    else
    {
      v330 = &v294[8 * ((unint64_t)v329 >> 12)];
      v331 = (_BYTE *)(*(_QWORD *)v330 + (v329 & 0xFFF));
    }
    v333 = v330;
    for (n = v331; n != v295; ++v546.i64[1])
    {
      *v327++ = *n;
      if (&v327[-*(_QWORD *)v326] == (_BYTE *)4096)
      {
        v340 = (_BYTE *)*((_QWORD *)v326 + 1);
        v326 += 8;
        v327 = v340;
      }
      if (&(++n)[-*(_QWORD *)v333] == (_BYTE *)4096)
      {
        v341 = (_BYTE *)*((_QWORD *)v333 + 1);
        v333 += 8;
        n = v341;
      }
    }
    if (v323 >= v322)
      goto LABEL_493;
    v335 = *(_BYTE **)v294;
    v336 = (uint64_t)&v295[-v322 - *(_QWORD *)v294];
    if (v336 < 1)
    {
      v356 = 4095 - v336;
      v337 = &v294[-8 * (v356 >> 12)];
      v338 = (_BYTE *)(*(_QWORD *)v337 + (~(_WORD)v356 & 0xFFF));
      if (v337 == v330)
        goto LABEL_481;
LABEL_445:
      v339 = *(_BYTE **)v330;
      if (*(_BYTE **)v330 != v331)
      {
        while (1)
        {
          v343 = (char *)(v295 - v335);
          if (v331 - v339 >= (uint64_t)v343)
            v344 = (size_t)v343;
          else
            v344 = v331 - v339;
          v331 -= v344;
          v295 -= v344;
          if (v344)
            memmove(v295, v331, v344);
          if (v331 == v339)
            break;
          v342 = (_BYTE *)*((_QWORD *)v294 - 1);
          v294 -= 8;
          v335 = v342;
          v295 = v342 + 4096;
        }
        goto LABEL_459;
      }
      while (1)
      {
        v330 -= 8;
        if (v330 == v337)
          break;
        v346 = *(_BYTE **)v330;
        v347 = (char *)(*(_QWORD *)v330 + 4096);
        while (1)
        {
          v348 = (char *)(v295 - v335);
          if (v347 - v346 >= (uint64_t)v348)
            v349 = (size_t)v348;
          else
            v349 = v347 - v346;
          v347 -= v349;
          v295 -= v349;
          if (v349)
            memmove(v295, v347, v349);
          if (v347 == v346)
            break;
          v350 = (_BYTE *)*((_QWORD *)v294 - 1);
          v294 -= 8;
          v335 = v350;
          v295 = v350 + 4096;
        }
LABEL_459:
        v335 = *(_BYTE **)v294;
        if ((_BYTE *)(*(_QWORD *)v294 + 4096) == v295)
        {
          v345 = (_BYTE *)*((_QWORD *)v294 + 1);
          v294 += 8;
          v335 = v345;
          v295 = v345;
        }
      }
      v351 = (char *)(*(_QWORD *)v337 + 4096);
      if (v351 != v338)
      {
        v352 = *(_QWORD *)v294;
        while (1)
        {
          v353 = &v295[-v352];
          if (v351 - v338 >= (uint64_t)v353)
            v354 = (size_t)v353;
          else
            v354 = v351 - v338;
          v351 -= v354;
          v295 -= v354;
          if (v354)
            memmove(v295, v351, v354);
          if (v351 == v338)
            break;
          v355 = *((_QWORD *)v294 - 1);
          v294 -= 8;
          v352 = v355;
          v295 = (_BYTE *)(v355 + 4096);
        }
        goto LABEL_489;
      }
LABEL_492:
      i = v487;
      goto LABEL_493;
    }
    v337 = &v294[8 * ((unint64_t)v336 >> 12)];
    v338 = (_BYTE *)(*(_QWORD *)v337 + (v336 & 0xFFF));
    if (v337 != v330)
      goto LABEL_445;
LABEL_481:
    if (v338 == v331)
      goto LABEL_492;
    while (1)
    {
      v357 = (char *)(v295 - v335);
      if (v331 - v338 >= (uint64_t)v357)
        v358 = (size_t)v357;
      else
        v358 = v331 - v338;
      v331 -= v358;
      v295 -= v358;
      if (v358)
        memmove(v295, v331, v358);
      if (v331 == v338)
        break;
      v359 = (_BYTE *)*((_QWORD *)v294 - 1);
      v294 -= 8;
      v335 = v359;
      v295 = v359 + 4096;
    }
LABEL_489:
    if ((_BYTE *)(*(_QWORD *)v294 + 4096) == v295)
    {
      v360 = (_BYTE *)*((_QWORD *)v294 + 1);
      v294 += 8;
      v295 = v360;
    }
    i = v487;
LABEL_493:
    if (v324 != "'s")
    {
      v363 = *(_QWORD *)v294;
      v362 = (uint64_t *)(v294 - 8);
      v361 = v363;
      while (1)
      {
        v364 = &v295[-v361];
        if (v324 - "'s" >= (uint64_t)v364)
          v365 = (size_t)v364;
        else
          v365 = v324 - "'s";
        v324 -= v365;
        if (v365)
          memmove(&v295[-v365], v324, v365);
        if (v324 == "'s")
          break;
        v366 = *v362--;
        v361 = v366;
        v295 = (_BYTE *)(v366 + 4096);
      }
    }
LABEL_502:
    v367 = *(unsigned __int8 *)(v478 + 23);
    if ((v367 & 0x80u) == 0)
      v368 = v478;
    else
      v368 = *(_QWORD *)v478;
    if ((v367 & 0x80u) != 0)
      v367 = *(_QWORD *)(v478 + 8);
    v369 = (_BYTE *)(v368 + v367);
    v33 = v490;
    if (v490 == v369 || v485 == 0)
      break;
    v29 = v490;
LABEL_514:
    v373 = 0;
    do
    {
      if (v29[v373] != v13[v373])
      {
        v371 = &v13[v373];
        v372 = &v29[v373];
        if (v371 == v484)
          goto LABEL_520;
LABEL_513:
        if (++v29 == v369)
          goto LABEL_521;
        goto LABEL_514;
      }
      v374 = v373 + 1;
      if (&v29[v373 + 1] == v369)
        break;
      v18 = v27 == v373++;
    }
    while (!v18);
    v372 = &v29[v374];
    if (&v13[v374] != v484)
      goto LABEL_513;
LABEL_520:
    v30 = v372;
  }
  while (v29 != v372);
LABEL_521:
  v375 = sub_19C3F9F94((uint64_t)v545, i, v490, v369);
  v376 = *(char *)(v478 + 23);
  if (v376 >= 0)
    v377 = *(unsigned __int8 *)(v478 + 23);
  else
    v377 = *(_QWORD *)(v478 + 8);
  if (v546.i64[1])
  {
    v378 = (char *)(*(_QWORD *)&v545[8] + 8 * ((unint64_t)v546.i64[0] >> 12));
    if (*(_QWORD *)&v545[16] != *(_QWORD *)&v545[8])
    {
      v379 = (std::string::value_type *)(*(_QWORD *)v378 + (v546.i16[0] & 0xFFF));
      v380 = (char *)(*(_QWORD *)&v545[8] + 8 * ((unint64_t)(v546.i64[0] + v546.i64[1]) >> 12));
      v381 = *(_QWORD *)v380 + ((v546.i64[0] + v546.i64[1]) & 0xFFF);
      if ((std::string::value_type *)v381 != v379)
      {
        v464 = v381 + ((v380 - v378) << 9) - (_QWORD)&v379[*(_QWORD *)v380] + *(_QWORD *)v378;
        if (v464)
        {
          memset(&cf, 0, sizeof(cf));
          do
          {
            std::string::push_back(&cf, *v379++);
            if (&v379[-*(_QWORD *)v378] == (std::string::value_type *)4096)
            {
              v465 = (std::string::value_type *)*((_QWORD *)v378 + 1);
              v378 += 8;
              v379 = v465;
            }
          }
          while (v379 != (std::string::value_type *)v381);
          size = HIBYTE(cf.__r_.__value_.__r.__words[2]);
          if ((cf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_cf = &cf;
          else
            p_cf = (std::string *)cf.__r_.__value_.__r.__words[0];
          if ((cf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            size = cf.__r_.__value_.__l.__size_;
          sub_19C358560((_QWORD *)v478, v464, v377, (char *)p_cf, (char *)p_cf + size);
          if (SHIBYTE(cf.__r_.__value_.__r.__words[2]) < 0)
            operator delete(cf.__r_.__value_.__l.__data_);
        }
      }
    }
  }
  else
  {
    v460 = *(_QWORD *)v478;
    if (v376 >= 0)
      v461 = v478;
    else
      v461 = *(_QWORD *)v478;
    v462 = (uint64_t)&v375[-v461];
    if (v377 < (unint64_t)&v375[-v461])
      sub_19C2E3454();
    v463 = v461 + v377 - (_QWORD)v375;
    if (v463 == -1)
    {
      if (v376 < 0)
      {
        *(_QWORD *)(v478 + 8) = v462;
        *(_BYTE *)(v460 + v462) = 0;
      }
      else
      {
        *(_BYTE *)(v478 + 23) = v462 & 0x7F;
        *(_BYTE *)(v478 + v462) = 0;
      }
    }
    else
    {
      sub_19C3FA6D4((_QWORD *)v478, v462, v463);
    }
  }
  v469 = *(void ***)&v545[16];
  v468 = *(void ***)&v545[8];
  v546.i64[1] = 0;
  v470 = *(_QWORD *)&v545[16] - *(_QWORD *)&v545[8];
  if (*(_QWORD *)&v545[16] - *(_QWORD *)&v545[8] >= 0x11uLL)
  {
    do
    {
      operator delete(*v468);
      v469 = *(void ***)&v545[16];
      v468 = (void **)(*(_QWORD *)&v545[8] + 8);
      *(_QWORD *)&v545[8] = v468;
      v470 = *(_QWORD *)&v545[16] - (_QWORD)v468;
    }
    while (*(_QWORD *)&v545[16] - (_QWORD)v468 > 0x10uLL);
  }
  v471 = v470 >> 3;
  a4 = v478;
  if (v471 == 1)
  {
    v472 = 2048;
LABEL_753:
    v546.i64[0] = v472;
  }
  else if (v471 == 2)
  {
    v472 = 4096;
    goto LABEL_753;
  }
  if (v468 != v469)
  {
    do
    {
      v473 = *v468++;
      operator delete(v473);
    }
    while (v468 != v469);
    if (*(_QWORD *)&v545[16] != *(_QWORD *)&v545[8])
      *(_QWORD *)&v545[16] += (*(_QWORD *)&v545[8] - *(_QWORD *)&v545[16] + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  if (*(_QWORD *)v545)
    operator delete(*(void **)v545);
LABEL_36:
  if (!*(_BYTE *)(a1 + 292))
    goto LABEL_722;
  v511 = 0uLL;
  v512 = 0;
  v19 = *(char *)(a4 + 23);
  if (v19 >= 0)
    v20 = a4;
  else
    v20 = *(_QWORD *)a4;
  if (v19 >= 0)
    v21 = *(unsigned __int8 *)(a4 + 23);
  else
    v21 = *(_QWORD *)(a4 + 8);
  v22 = v20 + v21;
  v23 = (unint64_t)off_1E3D39E90 + 1;
  v519 = (unint64_t)off_1E3D39E90 + 1;
  *(_QWORD *)&v520 = "_U_CAP_";
  *((_QWORD *)&v520 + 1) = "";
  v522.i64[0] = v20;
  v522.i64[1] = v20;
  *(_QWORD *)&v523 = v20;
  *((_QWORD *)&v523 + 1) = v20 + v21;
  v524 = 0;
  if (!v21)
    goto LABEL_49;
  v24 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(((unint64_t)off_1E3D39E90 & 0xFFFFFFFFFFFFFFFELL)
                                                               + 8))((uint64_t *)&v520, v20, v22);
  v22 = *((_QWORD *)&v523 + 1);
  if (*((_QWORD *)&v523 + 1) == v24 && *((_QWORD *)&v523 + 1) == v20 && v522.i64[1] == v20)
    v524 = 1;
  v23 = v519;
  v522.i64[0] = v523;
  v522.i64[1] = v24;
  *(_QWORD *)&v523 = v20;
  *(_QWORD *)v545 = 0;
  if (v519)
  {
LABEL_49:
    *(_QWORD *)v545 = v23;
    if ((v23 & 1) != 0)
    {
      *(_OWORD *)&v545[8] = v520;
      *(_QWORD *)&v545[24] = v521;
    }
    else
    {
      (*(void (**)(__int128 *, _BYTE *, _QWORD))(v23 & 0xFFFFFFFFFFFFFFFELL))(&v520, &v545[8], 0);
      v22 = *((_QWORD *)&v523 + 1);
      v20 = v523;
      v23 = v519;
    }
  }
  v546 = v522;
  *(_QWORD *)&v547 = v20;
  *((_QWORD *)&v547 + 1) = v22;
  v548 = v524;
  if (v23)
  {
    if ((v23 & 1) == 0)
    {
      v382 = *(void (**)(__int128 *, __int128 *, uint64_t))(v23 & 0xFFFFFFFFFFFFFFFELL);
      if (v382)
        v382(&v520, &v520, 2);
    }
    v519 = 0;
  }
  cf.__r_.__value_.__r.__words[0] = 0;
  v539 = 0u;
  v540 = 0u;
  v541 = 1;
  v532[0] = 0;
  v383 = *(_QWORD *)v545;
  if (*(_QWORD *)v545)
  {
    v532[0] = *(_QWORD *)v545;
    if ((v545[0] & 1) != 0)
    {
      v383 = 0;
      *(_OWORD *)&v532[1] = *(_OWORD *)&v545[8];
      v533 = *(_QWORD *)&v545[24];
    }
    else
    {
      (*(void (**)(_BYTE *, uint64_t *, _QWORD))(*(_QWORD *)v545 & 0xFFFFFFFFFFFFFFFELL))(&v545[8], &v532[1], 0);
      v383 = cf.__r_.__value_.__r.__words[0];
    }
  }
  v534 = v546;
  v535 = v547;
  v536 = v548;
  v513 = 0;
  if (v383)
  {
    v513 = v383;
    if ((v383 & 1) != 0)
    {
      v514 = *(_OWORD *)&cf.__r_.__value_.__r.__words[1];
      v515 = v538;
    }
    else
    {
      (*(void (**)(std::string::size_type *, __int128 *, _QWORD))(v383 & 0xFFFFFFFFFFFFFFFELL))(&cf.__r_.__value_.__l.__size_, &v514, 0);
    }
  }
  v516 = v539;
  v517 = v540;
  v518 = v541;
  sub_19C3F96DC((uint64_t)&v561, v532, (uint64_t *)&v513);
  if (v513)
  {
    if ((v513 & 1) == 0)
    {
      v384 = *(void (**)(__int128 *, __int128 *, uint64_t))(v513 & 0xFFFFFFFFFFFFFFFELL);
      if (v384)
        v384(&v514, &v514, 2);
    }
    v513 = 0;
  }
  if (v532[0])
  {
    if ((v532[0] & 1) == 0)
    {
      v385 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v532[0] & 0xFFFFFFFFFFFFFFFELL);
      if (v385)
        v385(&v532[1], &v532[1], 2);
    }
    v532[0] = 0;
  }
  v386 = v561;
  v511 = v561;
  v512 = v562;
  if (cf.__r_.__value_.__r.__words[0])
  {
    if ((cf.__r_.__value_.__s.__data_[0] & 1) == 0)
    {
      v387 = *(void (**)(std::string::size_type *, std::string::size_type *, uint64_t))(cf.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFFELL);
      if (v387)
      {
        v504 = v561;
        v387(&cf.__r_.__value_.__l.__size_, &cf.__r_.__value_.__l.__size_, 2);
        v386 = v504;
      }
    }
  }
  v477 = (_QWORD *)(a4 + 8);
  if (*(_QWORD *)v545)
  {
    if ((v545[0] & 1) == 0)
    {
      v388 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)v545 & 0xFFFFFFFFFFFFFFFELL);
      if (v388)
      {
        v505 = v386;
        v388(&v545[8], &v545[8], 2);
        v386 = v505;
      }
    }
  }
  v389 = (void **)*((_QWORD *)&v386 + 1);
  v390 = (void **)v386;
  if (*((_QWORD *)&v386 + 1) - (_QWORD)v386 == 24)
    goto LABEL_714;
  v479 = a4;
  if (*((_QWORD *)&v386 + 1) == (_QWORD)v386)
  {
    v458 = 0;
    v457 = 0;
    memset(v545, 0, 24);
    goto LABEL_710;
  }
  v476 = (void **)*((_QWORD *)&v386 + 1);
  v391 = 0;
  v480 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v386 + 1) - v386) >> 3);
  alloc = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v483 = (void **)v386;
  while (2)
  {
    v509 = 0uLL;
    v510 = 0;
    __n = 1;
    __src = (void *)32;
    std::__sort<std::__less<char,char> &,char *>();
    v392 = __n;
    v528 = __n;
    v527[0] = 0;
    if (__n >= 0x11)
    {
      v393 = (void *)operator new[]();
      v527[0] = v393;
      p_src = __src;
    }
    else
    {
      v393 = v527;
      p_src = &__src;
    }
    memcpy(v393, p_src, v392);
    v395 = v528;
    *(_QWORD *)&v545[16] = v528;
    *(_QWORD *)v545 = 0;
    if (v528 >= 0x11)
    {
      v396 = (void *)operator new[]();
      *(_QWORD *)v545 = v396;
      v397 = (void **)v527[0];
    }
    else
    {
      v396 = v545;
      v397 = v527;
    }
    memcpy(v396, v397, v395);
    v398 = *(_QWORD *)&v545[16];
    v530 = *(_QWORD *)&v545[16];
    __dst[0] = 0;
    __pf = (void *)v395;
    if (*(_QWORD *)&v545[16] > 0x10uLL)
    {
      __dst[0] = (void *)operator new[]();
      v399 = *(_QWORD *)v545;
      memcpy(__dst[0], *(const void **)v545, v398);
      v531 = 1;
      if (v399)
        MEMORY[0x1A1AD3538](v399, 0x1000C8077774924);
    }
    else
    {
      memcpy(__dst, v545, *(size_t *)&v545[16]);
      v531 = 1;
      v398 = v530;
    }
    v400 = &v390[3 * (_QWORD)v391];
    v401 = *((char *)v400 + 23);
    if (v401 >= 0)
      v402 = (char *)&v390[3 * (_QWORD)v391];
    else
      v402 = (char *)*v400;
    if (v401 >= 0)
      v403 = (char *)*((unsigned __int8 *)v400 + 23);
    else
      v403 = (char *)v400[1];
    v543 = v398;
    v542[0] = 0;
    v506 = v398;
    if (v398 >= 0x11)
    {
      v404 = (void *)operator new[]();
      v542[0] = v404;
      v405 = (void **)__dst[0];
    }
    else
    {
      v404 = v542;
      v405 = __dst;
    }
    memcpy(v404, v405, v398);
    v544 = 1;
    v406 = v543;
    v550 = v543;
    v549[0] = 0;
    if (v543 >= 0x11)
    {
      v407 = (void *)operator new[]();
      v549[0] = v407;
      v408 = (void **)v542[0];
    }
    else
    {
      v407 = v549;
      v408 = v542;
    }
    memcpy(v407, v408, v406);
    v551 = 1;
    v409 = v550;
    v553 = v550;
    v552[0] = 0;
    if (v550 >= 0x11)
    {
      v410 = (_QWORD *)operator new[]();
      v552[0] = v410;
      v411 = (void **)v549[0];
    }
    else
    {
      v410 = v552;
      v411 = v549;
    }
    memcpy(v410, v411, v409);
    v554 = 1;
    v519 = 0;
    v412 = v553;
    v556 = v553;
    v555[0] = 0;
    if (v553 >= 0x11)
    {
      v413 = (_QWORD *)operator new[]();
      v555[0] = v413;
      v414 = (_QWORD *)v552[0];
    }
    else
    {
      v413 = v555;
      v414 = v552;
    }
    memcpy(v413, v414, v412);
    v557 = 1;
    v415 = v556;
    v559 = v556;
    v558[0] = 0;
    v493 = &v390[3 * (_QWORD)v391];
    if (v556 >= 0x11)
    {
      v416 = (_QWORD *)operator new[]();
      v558[0] = v416;
      v417 = (_QWORD *)v555[0];
    }
    else
    {
      v416 = v558;
      v417 = v555;
    }
    memcpy(v416, v417, v415);
    v560 = 1;
    v418 = v559;
    v562 = v559;
    *(_QWORD *)&v561 = 0;
    if (v559 >= 0x11)
    {
      v419 = (__int128 *)operator new[]();
      *(_QWORD *)&v561 = v419;
      v420 = (_QWORD *)v558[0];
    }
    else
    {
      v419 = &v561;
      v420 = v558;
    }
    memcpy(v419, v420, v418);
    v563 = 1;
    v421 = v562;
    cf.__r_.__value_.__r.__words[2] = v562;
    cf.__r_.__value_.__r.__words[0] = 0;
    if (v562 >= 0x11)
    {
      v422 = (std::string *)operator new[]();
      cf.__r_.__value_.__r.__words[0] = (std::string::size_type)v422;
      v423 = (__int128 *)v561;
    }
    else
    {
      v422 = &cf;
      v423 = &v561;
    }
    memcpy(v422, v423, v421);
    LODWORD(v538) = 1;
    v424 = (_QWORD *)operator new();
    v425 = v424;
    v426 = cf.__r_.__value_.__r.__words[2];
    v424[2] = *((_QWORD *)&cf.__r_.__value_.__l + 2);
    *v424 = 0;
    v491 = v391;
    if (v426 > 0x10)
    {
      v427 = (void *)operator new[]();
      *v425 = v427;
      v428 = cf.__r_.__value_.__r.__words[0];
      memcpy(v427, cf.__r_.__value_.__l.__data_, v425[2]);
      *((_DWORD *)v425 + 6) = 1;
      *(_QWORD *)&v520 = v425;
      if (v428)
        MEMORY[0x1A1AD3538](v428, 0x1000C8077774924);
    }
    else
    {
      memcpy(v424, &cf, v426);
      *((_DWORD *)v425 + 6) = 1;
      *(_QWORD *)&v520 = v425;
    }
    v390 = v483;
    if (v421 >= 0x11 && (_QWORD)v561)
      MEMORY[0x1A1AD3538](v561, 0x1000C8077774924);
    if (v418 >= 0x11 && v558[0])
      MEMORY[0x1A1AD3538](v558[0], 0x1000C8077774924);
    v519 = (unint64_t)off_1E3D39EA0;
    if (v415 >= 0x11 && v555[0])
      MEMORY[0x1A1AD3538](v555[0], 0x1000C8077774924);
    if (v412 >= 0x11 && v552[0])
      MEMORY[0x1A1AD3538](v552[0], 0x1000C8077774924);
    if (v409 >= 0x11 && v549[0])
      MEMORY[0x1A1AD3538](v549[0], 0x1000C8077774924);
    v429 = &v403[(_QWORD)v402];
    v522.i64[0] = (uint64_t)v402;
    v522.i64[1] = (uint64_t)v402;
    *(_QWORD *)&v523 = v402;
    *((_QWORD *)&v523 + 1) = &v403[(_QWORD)v402];
    v524 = 0;
    v430 = v519;
    if (v403)
    {
      if (v519)
      {
        v431 = (*(char *(**)(const void ***, char *, char *))((v519 & 0xFFFFFFFFFFFFFFFELL) + 8))((const void ***)&v520, v402, v429);
        v429 = (char *)*((_QWORD *)&v523 + 1);
      }
      else
      {
        v432 = &v403[(_QWORD)v402];
        v431 = &v403[(_QWORD)v402];
      }
      if (v431 == v429 && v432 == v429 && (char *)v522.i64[1] == v429)
        v524 = 1;
      v430 = v519;
      v522.i64[0] = v523;
      v522.i64[1] = (uint64_t)v431;
      *(_QWORD *)&v523 = v432;
      *(_QWORD *)v545 = 0;
      if (v519)
      {
LABEL_631:
        *(_QWORD *)v545 = v430;
        if ((v430 & 1) != 0)
        {
          *(_OWORD *)&v545[8] = v520;
          *(_QWORD *)&v545[24] = v521;
        }
        else
        {
          (*(void (**)(uint64_t, _WORD *, int))(v430 & 0xFFFFFFFFFFFFFFFELL))((uint64_t)&v520, &v545[8], 0);
          v430 = v519;
        }
      }
    }
    else
    {
      *(_QWORD *)v545 = 0;
      if (v519)
        goto LABEL_631;
    }
    v546 = v522;
    v547 = v523;
    v548 = v524;
    if (v430)
    {
      if ((v430 & 1) == 0)
      {
        v433 = *(void (**)(uint64_t, _WORD *, int))(v430 & 0xFFFFFFFFFFFFFFFELL);
        if (v433)
          v433((uint64_t)&v520, &v520, 2);
      }
      v519 = 0;
    }
    if (v406 >= 0x11 && v542[0])
      MEMORY[0x1A1AD3538](v542[0], 0x1000C8077774924);
    cf.__r_.__value_.__r.__words[0] = 0;
    v539 = 0u;
    v540 = 0u;
    v541 = 1;
    v532[0] = 0;
    v434 = *(_QWORD *)v545;
    if (*(_QWORD *)v545)
    {
      v532[0] = *(_QWORD *)v545;
      if ((v545[0] & 1) != 0)
      {
        v434 = 0;
        *(_OWORD *)&v532[1] = *(_OWORD *)&v545[8];
        v533 = *(_QWORD *)&v545[24];
      }
      else
      {
        (*(void (**)(_BYTE *, uint64_t *, _QWORD))(*(_QWORD *)v545 & 0xFFFFFFFFFFFFFFFELL))(&v545[8], &v532[1], 0);
        v434 = cf.__r_.__value_.__r.__words[0];
      }
    }
    v534 = v546;
    v535 = v547;
    v536 = v548;
    v513 = 0;
    if (v434)
    {
      v513 = v434;
      if ((v434 & 1) != 0)
      {
        v514 = *(_OWORD *)&cf.__r_.__value_.__r.__words[1];
        v515 = v538;
      }
      else
      {
        (*(void (**)(std::string::size_type *, __int128 *, _QWORD))(v434 & 0xFFFFFFFFFFFFFFFELL))(&cf.__r_.__value_.__l.__size_, &v514, 0);
      }
    }
    v516 = v539;
    v517 = v540;
    v518 = v541;
    sub_19C3F96DC((uint64_t)&v561, v532, (uint64_t *)&v513);
    if (v513)
    {
      if ((v513 & 1) == 0)
      {
        v435 = *(void (**)(__int128 *, __int128 *, uint64_t))(v513 & 0xFFFFFFFFFFFFFFFELL);
        if (v435)
          v435(&v514, &v514, 2);
      }
      v513 = 0;
    }
    if (v532[0])
    {
      if ((v532[0] & 1) == 0)
      {
        v436 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v532[0] & 0xFFFFFFFFFFFFFFFELL);
        if (v436)
          v436(&v532[1], &v532[1], 2);
      }
      v532[0] = 0;
    }
    v496 = v561;
    v509 = v561;
    v510 = v562;
    if (cf.__r_.__value_.__r.__words[0])
    {
      if ((cf.__r_.__value_.__s.__data_[0] & 1) == 0)
      {
        v437 = *(void (**)(std::string::size_type *, std::string::size_type *, uint64_t))(cf.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFFELL);
        if (v437)
          v437(&cf.__r_.__value_.__l.__size_, &cf.__r_.__value_.__l.__size_, 2);
      }
    }
    if (*(_QWORD *)v545)
    {
      if ((v545[0] & 1) == 0)
      {
        v438 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)v545 & 0xFFFFFFFFFFFFFFFELL);
        if (v438)
          v438(&v545[8], &v545[8], 2);
      }
    }
    if (v506 >= 0x11 && __dst[0])
      MEMORY[0x1A1AD3538](__dst[0], 0x1000C8077774924);
    if ((unint64_t)__pf >= 0x11 && v527[0])
      MEMORY[0x1A1AD3538](v527[0], 0x1000C8077774924);
    if (__n >= 0x11 && __src)
      MEMORY[0x1A1AD3538](__src, 0x1000C8077774924);
    v439 = *(char *)(v496 + 23);
    if (v439 >= 0)
      v440 = (const UInt8 *)v496;
    else
      v440 = *(const UInt8 **)v496;
    if (v439 >= 0)
      v441 = *(unsigned __int8 *)(v496 + 23);
    else
      v441 = *(_QWORD *)(v496 + 8);
    v442 = CFStringCreateWithBytes(0, v440, v441, 0x8000100u, 0);
    v443 = v442;
    v532[0] = (uint64_t)v442;
    if (!v442)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1A1AD3154](exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
    }
    v444 = *(const __CFLocale **)(a1 + 56);
    Length = CFStringGetLength(v442);
    MutableCopy = CFStringCreateMutableCopy(alloc, Length, v443);
    CFStringCapitalize(MutableCopy, v444);
    sub_19C297DB4(&cf, MutableCopy);
    v447 = (const __CFString *)cf.__r_.__value_.__r.__words[0];
    if (!cf.__r_.__value_.__r.__words[0])
    {
      v475 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1A1AD3154](v475, "Could not construct");
      __cxa_throw(v475, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
    }
    TypeID = CFStringGetTypeID();
    if (TypeID == CFGetTypeID(v447))
    {
      sub_19C2E50A4(v545, v447);
    }
    else
    {
      *(_QWORD *)v545 = 0;
      v545[23] = 0;
    }
    if (*(char *)(v496 + 23) < 0)
      operator delete(*(void **)v496);
    v449 = *(_OWORD *)v545;
    *(_QWORD *)(v496 + 16) = *(_QWORD *)&v545[16];
    *(_OWORD *)v496 = v449;
    v545[23] = 0;
    v545[0] = 0;
    if (cf.__r_.__value_.__r.__words[0])
      CFRelease(cf.__r_.__value_.__l.__data_);
    CFRelease(v443);
    v450 = *((_QWORD *)&v509 + 1);
    sub_19C3F95C4((unint64_t)v545, v496, *((uint64_t *)&v509 + 1));
    if (*((char *)v493 + 23) < 0)
      operator delete(*v493);
    v451 = *(_OWORD *)v545;
    v493[2] = *(void **)&v545[16];
    *(_OWORD *)v493 = v451;
    while (v450 != v496)
    {
      if (*(char *)(v450 - 1) < 0)
        operator delete(*(void **)(v450 - 24));
      v450 -= 24;
    }
    operator delete((void *)v496);
    v391 = v491 + 1;
    if (v480 > (unint64_t)(v491 + 1))
      continue;
    break;
  }
  memset(v545, 0, 24);
  v452 = v483;
  v389 = v476;
  do
  {
    v453 = *((char *)v452 + 23);
    if (v453 >= 0)
      v454 = (const std::string::value_type *)v452;
    else
      v454 = (const std::string::value_type *)*v452;
    if (v453 >= 0)
      v455 = *((unsigned __int8 *)v452 + 23);
    else
      v455 = (std::string::size_type)v452[1];
    v456 = std::string::append((std::string *)v545, v454, v455);
    v457 = v456->__r_.__value_.__r.__words[0];
    cf.__r_.__value_.__r.__words[0] = v456->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)cf.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v456->__r_.__value_.__r.__words[1] + 7);
    v458 = HIBYTE(v456->__r_.__value_.__r.__words[2]);
    v456->__r_.__value_.__l.__size_ = 0;
    v456->__r_.__value_.__r.__words[2] = 0;
    v456->__r_.__value_.__r.__words[0] = 0;
    if ((v545[23] & 0x80000000) != 0)
      operator delete(*(void **)v545);
    *(_QWORD *)v545 = v457;
    *(_QWORD *)&v545[8] = cf.__r_.__value_.__r.__words[0];
    *(_QWORD *)&v545[15] = *(std::string::size_type *)((char *)cf.__r_.__value_.__r.__words + 7);
    v545[23] = v458;
    v452 += 3;
  }
  while (v452 != v476);
LABEL_710:
  v532[0] = *(_QWORD *)&v545[8];
  *(uint64_t *)((char *)v532 + 7) = *(_QWORD *)&v545[15];
  memset(v545, 0, 24);
  if (*(char *)(v479 + 23) < 0)
  {
    operator delete(*(void **)v479);
    v459 = v545[23];
    *(_QWORD *)v479 = v457;
    *v477 = v532[0];
    *(_QWORD *)((char *)v477 + 7) = *(uint64_t *)((char *)v532 + 7);
    *(_BYTE *)(v479 + 23) = v458;
    if (v459 < 0)
      operator delete(*(void **)v545);
  }
  else
  {
    *(_QWORD *)v479 = v457;
    *v477 = v532[0];
    *(_QWORD *)((char *)v477 + 7) = *(uint64_t *)((char *)v532 + 7);
    *(_BYTE *)(v479 + 23) = v458;
  }
LABEL_714:
  if (v390)
  {
    if (v389 != v390)
    {
      do
      {
        if (*((char *)v389 - 1) < 0)
          operator delete(*(v389 - 3));
        v389 -= 3;
      }
      while (v389 != v390);
      v389 = v390;
    }
    operator delete(v389);
  }
LABEL_722:
  if (SHIBYTE(v508) < 0)
    operator delete(v507[0]);
}

void sub_19C3F836C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  sub_19C3FA754((uint64_t)&STACK[0x2D0]);
  if (*(char *)(a11 + 23) < 0)
    operator delete(*(void **)a11);
  if (a41 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_19C3F8518(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46)
{
  sub_19C3F9B08(&a46);
  JUMPOUT(0x19C3F8528);
}

void sub_19C3F8544()
{
  JUMPOUT(0x19C3F889CLL);
}

void sub_19C3F854C(void *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    if (SLOBYTE(STACK[0x277]) < 0)
      operator delete((void *)STACK[0x260]);
    __cxa_rethrow();
  }
  JUMPOUT(0x19C3F88ACLL);
}

void sub_19C3F8574()
{
  __cxa_end_catch();
  JUMPOUT(0x19C3F850CLL);
}

void sub_19C3F8584(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_19C3F85A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,unint64_t a29,uint64_t a30,uint64_t a31,unint64_t a32,unint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a68;
  uint64_t a70;
  uint64_t a71;
  uint64_t a73;

  sub_19C3F9AB8(&a59);
  if (a29 >= 0x11 && STACK[0x2B0])
    MEMORY[0x1A1AD3538](STACK[0x2B0], 0x1000C8077774924);
  if (a33 >= 0x11 && a73)
    MEMORY[0x1A1AD3538](a73, 0x1000C8077774924);
  if (a32 >= 0x11 && a71)
    MEMORY[0x1A1AD3538](a71, 0x1000C8077774924);
  if ((unint64_t)a70 >= 0x11 && a68)
    MEMORY[0x1A1AD3538](a68, 0x1000C8077774924);
  sub_19C307B68(&a42);
  sub_19C307B68(&a46);
  if (*(char *)(a11 + 23) < 0)
    operator delete(*(void **)a11);
  if (a41 < 0)
    operator delete(a36);
  JUMPOUT(0x19C3F88ACLL);
}

void sub_19C3F885C(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_19C2CDAC8(exception_object);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_19C3F88B4@<X0>(_QWORD *result@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  __int128 *v4;
  __int128 v5;

  v3 = result[4];
  if (0xAAAAAAAAAAAAAAABLL * ((result[5] - v3) >> 3) <= a2)
    __assert_rtn("fragmentString", "SentencePieceCoder.hpp", 107, "fragmentID < m_tokenIDToFragmentStrMap.size()");
  v4 = (__int128 *)(v3 + 24 * a2);
  if (*((char *)v4 + 23) < 0)
    return sub_19C2B5238((_BYTE *)a3, *(void **)v4, *((_QWORD *)v4 + 1));
  v5 = *v4;
  *(_QWORD *)(a3 + 16) = *((_QWORD *)v4 + 2);
  *(_OWORD *)a3 = v5;
  return result;
}

_QWORD *sub_19C3F8938@<X0>(_QWORD *result@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  __int128 v4;

  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(result[5] - result[4]) >> 3) <= a2)
    __assert_rtn("fragmentStringWithDelimiters", "SentencePieceCoder.hpp", 99, "fragmentID < m_tokenIDToFragmentStrMap.size()");
  v3 = result[1] + 24 * a2;
  if (*(char *)(v3 + 23) < 0)
    return sub_19C2B5238((_BYTE *)a3, *(void **)v3, *(_QWORD *)(v3 + 8));
  v4 = *(_OWORD *)v3;
  *(_QWORD *)(a3 + 16) = *(_QWORD *)(v3 + 16);
  *(_OWORD *)a3 = v4;
  return result;
}

BOOL sub_19C3F89C0(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;

  v3 = *(unsigned __int8 *)(a3 + 23);
  if ((v3 & 0x80u) != 0)
    v3 = *(_QWORD *)(a3 + 8);
  if (!v3)
    return 1;
  if (*(_BYTE *)(a1 + 292) && *(_DWORD *)(a1 + 288) == a2)
  {
    if ((*(_DWORD *)(a1 + 64) | 2) == 2)
      return sub_19C3F8D78(a1, a3);
    return 1;
  }
  return sub_19C3F9230(a1, a2, (_QWORD *)a3);
}

unsigned int *sub_19C3F8A10(unsigned int *result, int a2)
{
  switch(a2)
  {
    case 2:
      return (unsigned int *)result[20];
    case 1:
      return (unsigned int *)result[19];
    case 0:
      return (unsigned int *)result[17];
  }
  return result;
}

void sub_19C3F8A40(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 23) = 3;
  *(_DWORD *)a1 = 8492770;
}

uint64_t sub_19C3F8A58(uint64_t a1)
{
  return *(unsigned int *)(a1 + 72);
}

BOOL sub_19C3F8A60(uint64_t a1, unsigned int a2)
{
  unint64_t v2;
  uint8x8_t v3;
  unint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 96);
  if (v2)
  {
    v3 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
    v3.i16[0] = vaddlv_u8(v3);
    if (v3.u32[0] > 1uLL)
    {
      v4 = a2;
      if (v2 <= a2)
        v4 = a2 % v2;
    }
    else
    {
      v4 = ((_DWORD)v2 - 1) & a2;
    }
    v5 = *(uint64_t **)(*(_QWORD *)(a1 + 88) + 8 * v4);
    if (v5)
    {
      v5 = (uint64_t *)*v5;
      if (v5)
      {
        if (v3.u32[0] < 2uLL)
        {
          v6 = v2 - 1;
          while (1)
          {
            v8 = v5[1];
            if (v8 == a2)
            {
              if (*((_DWORD *)v5 + 4) == a2)
                return v5 != 0;
            }
            else if ((v8 & v6) != v4)
            {
              goto LABEL_21;
            }
            v5 = (uint64_t *)*v5;
            if (!v5)
              return v5 != 0;
          }
        }
        do
        {
          v7 = v5[1];
          if (v7 == a2)
          {
            if (*((_DWORD *)v5 + 4) == a2)
              return v5 != 0;
          }
          else
          {
            if (v7 >= v2)
              v7 %= v2;
            if (v7 != v4)
              goto LABEL_21;
          }
          v5 = (uint64_t *)*v5;
        }
        while (v5);
      }
    }
  }
  else
  {
LABEL_21:
    v5 = 0;
  }
  return v5 != 0;
}

BOOL sub_19C3F8B40(uint64_t a1, int a2)
{
  return *(_DWORD *)(a1 + 68) == a2;
}

BOOL sub_19C3F8B50(uint64_t a1, int a2)
{
  return *(_DWORD *)(a1 + 76) == a2;
}

BOOL sub_19C3F8B60(uint64_t a1, int a2)
{
  return *(_DWORD *)(a1 + 80) == a2;
}

BOOL sub_19C3F8B70(uint64_t a1, int a2)
{
  return *(_DWORD *)(a1 + 72) == a2;
}

BOOL sub_19C3F8B80(uint64_t a1, int a2)
{
  return *(_DWORD *)(a1 + 84) == a2;
}

uint64_t sub_19C3F8B90(uint64_t a1, _QWORD *a2, unint64_t a3)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  int v8;
  BOOL v9;

  if (a3 >= (uint64_t)(a2[1] - *a2) >> 2)
    __assert_rtn("isWordBoundaryIndex", "CoreLMSuffixCoder.cpp", 76, "index < encoding.size()");
  v3 = *(_DWORD *)(*a2 + 4 * a3);
  v4 = *(_QWORD *)(a1 + 8) + 24 * v3;
  if (*(char *)(v4 + 23) < 0)
  {
    v4 = *(_QWORD *)v4;
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24 * v3 + 8);
    if (v5 < 3)
      return *(_DWORD *)(a1 + 76) == v3;
  }
  else
  {
    v5 = *(unsigned __int8 *)(v4 + 23);
    if (v5 < 3)
      return *(_DWORD *)(a1 + 76) == v3;
  }
  v6 = v5 + v4;
  v7 = *(unsigned __int16 *)(v6 - 3);
  v8 = *(unsigned __int8 *)(v6 - 1);
  v9 = v7 == 38626 && v8 == 129;
  if (!v9 || *(_BYTE *)(a1 + 292) && *(_DWORD *)(a1 + 288) == v3)
    return *(_DWORD *)(a1 + 76) == v3;
  return 1;
}

BOOL sub_19C3F8C50(uint64_t a1, int a2)
{
  return *(_DWORD *)(a1 + 72) != a2 && *(_DWORD *)(a1 + 80) != a2;
}

BOOL sub_19C3F8C74(uint64_t a1, int a2)
{
  return *(_DWORD *)(a1 + 72) == a2 || *(_DWORD *)(a1 + 80) == a2;
}

BOOL sub_19C3F8C98(uint64_t a1, int a2)
{
  return *(_BYTE *)(a1 + 292) && *(_DWORD *)(a1 + 288) == a2;
}

uint64_t sub_19C3F8CB8(uint64_t a1, unsigned int a2)
{
  return (*(_QWORD *)(*(_QWORD *)(a1 + 296) + (((unint64_t)a2 >> 3) & 0x1FFFFFF8)) >> a2) & 1;
}

uint64_t sub_19C3F8CD8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 328);
}

uint64_t sub_19C3F8CE0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 324);
}

uint64_t sub_19C3F8CE8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 64);
}

BOOL sub_19C3F8CF0(uint64_t a1, unsigned int a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  int v6;
  int v7;

  if (*(_BYTE *)(a1 + 292) && *(_DWORD *)(a1 + 288) == a2)
    return 0;
  if (*(_DWORD *)(a1 + 80) == a2)
    return 1;
  v3 = *(_QWORD *)(a1 + 8) + 24 * a2;
  if (*(char *)(v3 + 23) < 0)
  {
    v3 = *(_QWORD *)v3;
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24 * a2 + 8);
    if (v4 < 3)
      return 0;
  }
  else
  {
    v4 = *(unsigned __int8 *)(v3 + 23);
    if (v4 < 3)
      return 0;
  }
  v5 = v4 + v3;
  v6 = *(unsigned __int16 *)(v5 - 3);
  v7 = *(unsigned __int8 *)(v5 - 1);
  return v6 == 38626 && v7 == 129;
}

BOOL sub_19C3F8D78(uint64_t a1, uint64_t a2)
{
  _BOOL8 v4;
  size_t v6;
  char v7;
  unint64_t v8;
  size_t v9;
  int v10;
  uint64_t v11;
  void **v12;
  uint64_t v13;
  void *v14;
  size_t v15;
  BOOL v16;
  size_t v17;
  char *v18;
  size_t v19;
  size_t v20;
  void *v21;
  char *v22;
  void **v23;
  void **v24;
  CFIndex v25;
  CFStringRef v26;
  const __CFString *v27;
  const __CFLocale *v28;
  CFIndex Length;
  const __CFAllocator *v30;
  CFMutableStringRef MutableCopy;
  const __CFLocale *v32;
  CFIndex v33;
  CFMutableStringRef v34;
  void *v35;
  size_t v36;
  size_t v37;
  const void *v38;
  size_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  void *exception;
  void *v44[2];
  uint64_t v45;
  void *__p[2];
  uint64_t v47;
  void *__dst[2];
  int64_t v49;

  if (sub_19C3C19A0((_QWORD *)(a1 + 392), a2))
    return 0;
  v6 = *(unsigned __int8 *)(a2 + 23);
  v7 = v6;
  v8 = *(_QWORD *)(a2 + 8);
  v9 = (v6 & 0x80u) == 0 ? *(unsigned __int8 *)(a2 + 23) : *(_QWORD *)(a2 + 8);
  if (!v9)
    return 0;
  v10 = *(_DWORD *)(a1 + 328);
  if (v10 != 2)
    goto LABEL_42;
  if ((char)v6 < 0)
  {
    v11 = *(_QWORD *)(a2 + 8);
    if (v8 == 1)
      return 0;
  }
  else
  {
    v11 = *(unsigned __int8 *)(a2 + 23);
    if ((char)v6 == 1)
      return 0;
  }
  if (!*(_BYTE *)(a1 + 360))
    sub_19C30F5A0();
  v12 = (void **)(a1 + 336);
  v13 = *(unsigned __int8 *)(a1 + 359);
  if (*(char *)(a1 + 359) < 0)
  {
    v15 = *(_QWORD *)(a1 + 344);
    if (v11 != v15 + 1)
      goto LABEL_27;
    v14 = *v12;
  }
  else
  {
    v14 = (void *)(a1 + 336);
    v15 = *(unsigned __int8 *)(a1 + 359);
    if (v11 != v13 + 1)
      goto LABEL_25;
  }
  v16 = v9 >= v15;
  v17 = v9 - v15;
  if (v16)
  {
    v18 = *(char **)a2;
    if ((v6 & 0x80u) == 0)
      v18 = (char *)a2;
    if (!memcmp(&v18[v17], v14, v15))
      return 0;
  }
  if ((v13 & 0x80) == 0)
  {
LABEL_25:
    *(_OWORD *)__p = *(_OWORD *)v12;
    v47 = *(_QWORD *)(a1 + 352);
    goto LABEL_28;
  }
  v15 = *(_QWORD *)(a1 + 344);
LABEL_27:
  sub_19C2B5238(__p, *v12, v15);
  v6 = *(unsigned __int8 *)(a2 + 23);
  v8 = *(_QWORD *)(a2 + 8);
  v7 = *(_BYTE *)(a2 + 23);
LABEL_28:
  if (v47 >= 0)
    v19 = HIBYTE(v47);
  else
    v19 = (size_t)__p[1];
  if (v7 >= 0)
    v20 = v6;
  else
    v20 = v8;
  if (v20 < v19
    || ((v21 = *(void **)a2, v7 >= 0) ? (v22 = (char *)a2) : (v22 = *(char **)a2),
        v47 >= 0 ? (v23 = __p) : (v23 = (void **)__p[0]),
        memcmp(&v22[v20 - v19], v23, v19)))
  {
LABEL_42:
    if (v7 < 0)
    {
      sub_19C2B5238(__dst, *(void **)a2, v8);
    }
    else
    {
      *(_OWORD *)__dst = *(_OWORD *)a2;
      v49 = *(_QWORD *)(a2 + 16);
    }
    if (v10 != 2)
      goto LABEL_48;
    goto LABEL_46;
  }
  if (*(_BYTE *)(a1 + 360))
  {
    if (*(char *)(a1 + 359) < 0)
    {
      sub_19C2B5238(v44, *(void **)(a1 + 336), *(_QWORD *)(a1 + 344));
      v6 = *(unsigned __int8 *)(a2 + 23);
      v21 = *(void **)a2;
      v8 = *(_QWORD *)(a2 + 8);
      v7 = *(_BYTE *)(a2 + 23);
    }
    else
    {
      *(_OWORD *)v44 = *(_OWORD *)v12;
      v45 = *(_QWORD *)(a1 + 352);
    }
  }
  else
  {
    HIBYTE(v45) = 0;
    LOBYTE(v44[0]) = 0;
  }
  v35 = (void *)HIBYTE(v45);
  if (v45 < 0)
    v35 = v44[1];
  v36 = v20 - (_QWORD)v35;
  if (v7 >= 0)
    v37 = v6;
  else
    v37 = v8;
  if (v7 >= 0)
    v38 = (const void *)a2;
  else
    v38 = v21;
  if (v37 >= v36)
    v39 = v36;
  else
    v39 = v37;
  if (v39 >= 0x7FFFFFFFFFFFFFF8)
    sub_19C2A1A54();
  if (v39 >= 0x17)
  {
    v41 = (v39 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v39 | 7) != 0x17)
      v41 = v39 | 7;
    v42 = v41 + 1;
    v40 = operator new(v41 + 1);
    __dst[1] = (void *)v39;
    v49 = v42 | 0x8000000000000000;
    __dst[0] = v40;
    goto LABEL_87;
  }
  HIBYTE(v49) = v39;
  v40 = __dst;
  if (v39)
LABEL_87:
    memmove(v40, v38, v39);
  *((_BYTE *)v40 + v39) = 0;
  if (SHIBYTE(v45) < 0)
    operator delete(v44[0]);
LABEL_46:
  if (SHIBYTE(v47) < 0)
    operator delete(__p[0]);
LABEL_48:
  if (v49 >= 0)
    v24 = __dst;
  else
    v24 = (void **)__dst[0];
  if (v49 >= 0)
    v25 = HIBYTE(v49);
  else
    v25 = (CFIndex)__dst[1];
  v26 = CFStringCreateWithBytes(0, (const UInt8 *)v24, v25, 0x8000100u, 0);
  v27 = v26;
  v44[0] = (void *)v26;
  if (!v26)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD3154](exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v28 = *(const __CFLocale **)(a1 + 56);
  Length = CFStringGetLength(v26);
  v30 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], Length, v27);
  CFStringLowercase(MutableCopy, v28);
  v32 = *(const __CFLocale **)(a1 + 56);
  v33 = CFStringGetLength(v27);
  v34 = CFStringCreateMutableCopy(v30, v33, v27);
  CFStringCapitalize(v34, v32);
  if (CFStringCompare(v27, v34, 0))
  {
    v4 = 0;
    if (!v34)
      goto LABEL_60;
    goto LABEL_59;
  }
  v4 = CFStringCompare(v27, MutableCopy, 0) != kCFCompareEqualTo;
  if (v34)
LABEL_59:
    CFRelease(v34);
LABEL_60:
  if (MutableCopy)
    CFRelease(MutableCopy);
  CFRelease(v27);
  if (SHIBYTE(v49) < 0)
    operator delete(__dst[0]);
  return v4;
}

void sub_19C3F9184(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_19C3F9230(uint64_t a1, unsigned int a2, _QWORD *__s2)
{
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t v5;
  _QWORD *v6;
  __int128 *v7;
  __int128 v8;
  _BOOL8 v9;
  unint64_t v10;
  int v11;
  size_t v12;
  __int128 *v13;
  void *v14;
  __int128 *v15;
  __int128 v17;
  uint64_t v18;

  v3 = *((unsigned __int8 *)__s2 + 23);
  v4 = v3;
  if ((v3 & 0x80u) != 0)
    v3 = __s2[1];
  if (!v3)
    return 1;
  v5 = *(_QWORD *)(a1 + 32);
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 40) - v5) >> 3) <= a2)
    __assert_rtn("fragmentString", "SentencePieceCoder.hpp", 107, "fragmentID < m_tokenIDToFragmentStrMap.size()");
  v6 = __s2;
  v7 = (__int128 *)(v5 + 24 * a2);
  if (*((char *)v7 + 23) < 0)
  {
    sub_19C2B5238(&v17, *(void **)v7, *((_QWORD *)v7 + 1));
    v4 = *((_BYTE *)v6 + 23);
  }
  else
  {
    v8 = *v7;
    v18 = *((_QWORD *)v7 + 2);
    v17 = v8;
  }
  v10 = HIBYTE(v18);
  v11 = SHIBYTE(v18);
  if (v18 < 0)
    v10 = *((_QWORD *)&v17 + 1);
  if ((v4 & 0x80) == 0)
  {
    v12 = v4;
    if (v10 >= v4)
      goto LABEL_23;
LABEL_15:
    if ((v4 & 0x80u) == 0)
      v13 = (__int128 *)v6;
    else
      v13 = (__int128 *)*v6;
    v14 = (void *)v17;
    if (v18 >= 0)
      v15 = &v17;
    else
      v15 = (__int128 *)v17;
    v12 = v10;
    goto LABEL_27;
  }
  v12 = v6[1];
  if (v10 < v12)
    goto LABEL_15;
  v6 = (_QWORD *)*v6;
LABEL_23:
  v14 = (void *)v17;
  if (v18 >= 0)
    v13 = &v17;
  else
    v13 = (__int128 *)v17;
  v15 = (__int128 *)v6;
LABEL_27:
  v9 = memcmp(v13, v15, v12) == 0;
  if (v11 < 0)
    operator delete(v14);
  return v9;
}

void sub_19C3F9384(uint64_t a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int *v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  __int128 *v15;
  uint64_t v16;
  __int128 v17;
  int v18;
  void *exception;
  std::string *v20;
  std::string v21;
  uint64_t v22;
  void *__p;
  void *v24;
  _DWORD *v25;

  v8 = a2;
  v9 = a3 - 1;
  if (a3 == 1 && *a2 == *(_DWORD *)(a1 + 68))
  {
    *(_BYTE *)(a4 + 23) = 5;
    strcpy((char *)a4, "<unk>");
  }
  else
  {
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    v10 = a3;
    __p = 0;
    v24 = 0;
    v25 = 0;
    if (4 * a3)
    {
      if (v10 * 4 < 0)
        sub_19C2A18E8();
      v11 = operator new(4 * a3);
      __p = v11;
      v25 = &v11[(4 * a3) >> 2];
      if (a3)
      {
        if ((v9 & 0x3FFFFFFFFFFFFFFFuLL) < 7)
          goto LABEL_25;
        if ((unint64_t)((char *)v11 - (char *)a2) < 0x20)
          goto LABEL_25;
        v12 = (v9 & 0x3FFFFFFFFFFFFFFFLL) + 1;
        v13 = v12 & 0x7FFFFFFFFFFFFFF8;
        v8 = &a2[v13];
        v14 = v11 + 4;
        v15 = (__int128 *)(a2 + 4);
        v16 = v12 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v17 = *v15;
          *(v14 - 1) = *(v15 - 1);
          *v14 = v17;
          v14 += 2;
          v15 += 2;
          v16 -= 8;
        }
        while (v16);
        v11 = (_DWORD *)((char *)v11 + v13 * 4);
        if (v12 != (v12 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_25:
          do
          {
            v18 = *v8++;
            *v11++ = v18;
          }
          while (v8 != &a2[v10]);
        }
      }
      v24 = v11;
    }
    sub_19C2AAD64(a1 + 128, (uint64_t)&__p, a4, &v22);
    if (v22)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      sub_19C2CD6DC((uint64_t)&v22, &v21);
      if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v20 = &v21;
      else
        v20 = (std::string *)v21.__r_.__value_.__r.__words[0];
      MEMORY[0x1A1AD3154](exception, v20);
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
    }
    sub_19C2CD3C8(&v22);
    if (__p)
    {
      v24 = __p;
      operator delete(__p);
    }
  }
}

void sub_19C3F9548(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *__p, uint64_t a18)
{
  uint64_t v18;

  if (__p)
  {
    operator delete(__p);
    if ((*(char *)(v18 + 23) & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((*(char *)(v18 + 23) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)v18);
  _Unwind_Resume(exception_object);
}

void sub_19C3F95C4(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  int v6;
  char *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  char *v15;
  unint64_t v16;

  v4 = a2;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  if (a2 != a3)
  {
    v6 = *(char *)(a2 + 23);
    if (v6 >= 0)
      v7 = (char *)a2;
    else
      v7 = *(char **)a2;
    if (v6 >= 0)
      v8 = *(unsigned __int8 *)(a2 + 23);
    else
      v8 = *(_QWORD *)(a2 + 8);
    sub_19C35804C(a1, a1, v7, &v7[v8], v8);
    v4 += 24;
  }
  for (; v4 != a3; v4 += 24)
  {
    v9 = *(unsigned __int8 *)(a1 + 23);
    if ((v9 & 0x80u) == 0)
      v10 = a1;
    else
      v10 = *(_QWORD *)a1;
    if ((v9 & 0x80u) != 0)
      v9 = *(_QWORD *)(a1 + 8);
    sub_19C3581BC((unint64_t *)a1, v10 + v9, (unint64_t)" ", "", 1uLL);
    v11 = *(unsigned __int8 *)(a1 + 23);
    if ((v11 & 0x80u) == 0)
      v12 = a1;
    else
      v12 = *(_QWORD *)a1;
    if ((v11 & 0x80u) != 0)
      v11 = *(_QWORD *)(a1 + 8);
    v13 = v12 + v11;
    v14 = *(char *)(v4 + 23);
    if (v14 >= 0)
      v15 = (char *)v4;
    else
      v15 = *(char **)v4;
    if (v14 >= 0)
      v16 = *(unsigned __int8 *)(v4 + 23);
    else
      v16 = *(_QWORD *)(v4 + 8);
    sub_19C35804C(a1, v13, v15, &v15[v16], v16);
  }
}

void sub_19C3F96B8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C3F96DC(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  BOOL v11;
  int v12;
  char *v13;
  char *v14;
  unint64_t v15;
  __int128 *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  __int128 *v20;
  __int128 *v21;
  _OWORD *v22;
  unint64_t v23;
  __int128 v24;
  char v25;
  unint64_t v26;
  __int128 v27;
  char *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(__int128 *, __int128 *, uint64_t);
  void (*v34)(__int128 *, __int128 *, uint64_t);
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  char v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  char v47;
  __int128 v48;
  unint64_t v49;
  uint64_t v50;
  char v51;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v42 = 0;
  v6 = *a2;
  if (*a2)
  {
    v42 = *a2;
    if ((v6 & 1) != 0)
    {
      v43 = *(_OWORD *)(a2 + 1);
      v44 = a2[3];
    }
    else
    {
      (*(void (**)(uint64_t *, __int128 *, _QWORD))(v6 & 0xFFFFFFFFFFFFFFFELL))(a2 + 1, &v43, 0);
    }
  }
  v7 = *((_OWORD *)a2 + 3);
  v45 = *((_OWORD *)a2 + 2);
  v46 = v7;
  v47 = *((_BYTE *)a2 + 64);
  v36 = 0;
  v8 = *a3;
  if (*a3)
  {
    v36 = *a3;
    if ((v8 & 1) != 0)
    {
      v37 = *(_OWORD *)(a3 + 1);
      v38 = a3[3];
    }
    else
    {
      (*(void (**)(uint64_t *, __int128 *, _QWORD))(v8 & 0xFFFFFFFFFFFFFFFELL))(a3 + 1, &v37, 0);
    }
  }
  v9 = *((_OWORD *)a3 + 3);
  v39 = *((_OWORD *)a3 + 2);
  v40 = v9;
  v41 = *((_BYTE *)a3 + 64);
  v50 = a1;
  v51 = 0;
  while (1)
  {
    v10 = v42;
    if (v42)
      v11 = v47 == 0;
    else
      v11 = 0;
    v12 = !v11;
    if (!v36)
    {
      if (v12)
        goto LABEL_57;
      goto LABEL_26;
    }
    if (((v41 == 0) & ~v12) != 0)
      break;
    if (((v12 ^ (v41 != 0)) & 1) == 0)
      goto LABEL_54;
LABEL_26:
    v14 = (char *)*((_QWORD *)&v45 + 1);
    v13 = (char *)v45;
    v15 = *((_QWORD *)&v45 + 1) - v45;
    if (*((_QWORD *)&v45 + 1) - (_QWORD)v45 >= 0x7FFFFFFFFFFFFFF8uLL)
      sub_19C2A1A54();
    if (v15 > 0x16)
    {
      v17 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v15 | 7) != 0x17)
        v17 = v15 | 7;
      v18 = v17 + 1;
      v16 = (__int128 *)operator new(v17 + 1);
      *((_QWORD *)&v48 + 1) = v15;
      v49 = v18 | 0x8000000000000000;
      *(_QWORD *)&v48 = v16;
      if (v13 == v14)
        goto LABEL_43;
    }
    else
    {
      HIBYTE(v49) = BYTE8(v45) - v45;
      v16 = &v48;
      if ((_QWORD)v45 == *((_QWORD *)&v45 + 1))
        goto LABEL_43;
    }
    if (v15 < 0x20 || (unint64_t)((char *)v16 - v13) < 0x20)
    {
      v20 = v16;
    }
    else
    {
      v19 = v15 & 0xFFFFFFFFFFFFFFE0;
      v20 = (__int128 *)((char *)v16 + (v15 & 0xFFFFFFFFFFFFFFE0));
      v21 = (__int128 *)(v13 + 16);
      v22 = v16 + 1;
      v23 = v15 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v24 = *v21;
        *(v22 - 1) = *(v21 - 1);
        *v22 = v24;
        v21 += 2;
        v22 += 2;
        v23 -= 32;
      }
      while (v23);
      if (v15 == v19)
      {
        v16 = (__int128 *)((char *)v16 + (v15 & 0xFFFFFFFFFFFFFFE0));
        goto LABEL_43;
      }
      v13 += v19;
    }
    v16 = v20;
    do
    {
      v25 = *v13++;
      *(_BYTE *)v16 = v25;
      v16 = (__int128 *)((char *)v16 + 1);
    }
    while (v13 != v14);
LABEL_43:
    *(_BYTE *)v16 = 0;
    v26 = *(_QWORD *)(a1 + 8);
    if (v26 >= *(_QWORD *)(a1 + 16))
    {
      v28 = sub_19C307C78((void **)a1, (uint64_t)&v48);
      v29 = SHIBYTE(v49);
      *(_QWORD *)(a1 + 8) = v28;
      if (v29 < 0)
        operator delete((void *)v48);
    }
    else
    {
      v27 = v48;
      *(_QWORD *)(v26 + 16) = v49;
      *(_OWORD *)v26 = v27;
      *(_QWORD *)(a1 + 8) = v26 + 24;
    }
    v30 = *((_QWORD *)&v46 + 1);
    if (v42)
    {
      v31 = (*(uint64_t (**)(__int128 *, _QWORD, _QWORD))((v42 & 0xFFFFFFFFFFFFFFFELL) + 8))(&v43, v46, *((_QWORD *)&v46 + 1));
      v30 = *((_QWORD *)&v46 + 1);
      if (v31 != *((_QWORD *)&v46 + 1))
        goto LABEL_10;
    }
    else
    {
      v32 = *((_QWORD *)&v46 + 1);
      v31 = *((_QWORD *)&v46 + 1);
    }
    if (v32 == v30 && *((_QWORD *)&v45 + 1) == v30)
      v47 = 1;
LABEL_10:
    *(_QWORD *)&v45 = v46;
    *((_QWORD *)&v45 + 1) = v31;
    *(_QWORD *)&v46 = v32;
  }
  if (*((_QWORD *)&v45 + 1) - (_QWORD)v45 != *((_QWORD *)&v39 + 1) - (_QWORD)v39
    || memcmp((const void *)v45, (const void *)v39, *((_QWORD *)&v45 + 1) - v45)
    || v46 != v40)
  {
    goto LABEL_26;
  }
LABEL_54:
  if ((v36 & 1) == 0)
  {
    v33 = *(void (**)(__int128 *, __int128 *, uint64_t))(v36 & 0xFFFFFFFFFFFFFFFELL);
    if (v33)
    {
      v33(&v37, &v37, 2);
      v10 = v42;
    }
  }
LABEL_57:
  if (v10)
  {
    if ((v10 & 1) == 0)
    {
      v34 = *(void (**)(__int128 *, __int128 *, uint64_t))(v10 & 0xFFFFFFFFFFFFFFFELL);
      if (v34)
        v34(&v43, &v43, 2);
    }
  }
  return a1;
}

void sub_19C3F9A6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  sub_19C3F9B08((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_19C3F9AB8(uint64_t *a1)
{
  uint64_t v2;
  void (*v3)(uint64_t *, uint64_t *, uint64_t);

  v2 = *a1;
  if (*a1)
  {
    if ((v2 & 1) == 0)
    {
      v3 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3)
        v3(a1 + 1, a1 + 1, 2);
    }
    *a1 = 0;
  }
  return a1;
}

uint64_t *sub_19C3F9B08(uint64_t *a1)
{
  uint64_t v2;
  void (*v3)(uint64_t *, uint64_t *, uint64_t);

  v2 = *a1;
  if (*a1)
  {
    if ((v2 & 1) == 0)
    {
      v3 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3)
        v3(a1 + 1, a1 + 1, 2);
    }
    *a1 = 0;
  }
  return a1;
}

uint64_t *sub_19C3F9B58(uint64_t *a1)
{
  uint64_t v2;
  void (*v3)(uint64_t *, uint64_t *, uint64_t);

  v2 = *a1;
  if (*a1)
  {
    if ((v2 & 1) == 0)
    {
      v3 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3)
        v3(a1 + 1, a1 + 1, 2);
    }
    *a1 = 0;
  }
  return a1;
}

char *sub_19C3F9BA8(const void ***a1, char *a2, char *a3)
{
  const void **v5;
  size_t v6;
  _QWORD *v7;
  const void *v8;
  int v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  int v15;
  int v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  int v22;
  unint64_t v23;
  char *v24;
  int v25;
  char *v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  int v31;
  char *v32;
  int v33;
  char *v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  int v39;
  _QWORD v41[2];
  unint64_t v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v5 = *a1;
  v6 = (size_t)(*a1)[2];
  v42 = v6;
  v41[0] = 0;
  if (v6 >= 0x11)
  {
    v7 = (_QWORD *)operator new[]();
    v41[0] = v7;
    v8 = *v5;
  }
  else
  {
    v7 = v41;
    v8 = v5;
  }
  memcpy(v7, v8, v6);
  if (a2 == a3)
  {
LABEL_28:
    a2 = a3;
    if (v42 < 0x11)
      goto LABEL_31;
    goto LABEL_29;
  }
  if (v42 > 0x10)
  {
    while (1)
    {
      v16 = *a2;
      v17 = (char *)v41[0];
      v18 = v42;
      do
      {
        v19 = v18 >> 1;
        v20 = &v17[v18 >> 1];
        v22 = *v20;
        v21 = v20 + 1;
        v18 += ~(v18 >> 1);
        if (v22 < v16)
          v17 = v21;
        else
          v18 = v19;
      }
      while (v18);
      if (v17 != (char *)(v41[0] + v42) && *v17 <= v16)
        break;
      if (++a2 == a3)
        goto LABEL_28;
    }
  }
  else
  {
    if (!v42)
      return a3;
    while (1)
    {
      v9 = *a2;
      v10 = v41;
      v11 = v42;
      do
      {
        v12 = v11 >> 1;
        v13 = (char *)v10 + (v11 >> 1);
        v15 = *v13;
        v14 = v13 + 1;
        v11 += ~(v11 >> 1);
        if (v15 < v9)
          v10 = v14;
        else
          v11 = v12;
      }
      while (v11);
      if (v10 != (_QWORD *)((char *)v41 + v42) && *(char *)v10 <= v9)
        break;
      if (++a2 == a3)
        goto LABEL_28;
    }
  }
  if (v42 >= 0x11)
  {
LABEL_29:
    if (v41[0])
      MEMORY[0x1A1AD3538](v41[0], 0x1000C8077774924);
  }
LABEL_31:
  if (a2 == a3)
    return a3;
  if (*((_DWORD *)v5 + 6))
    return a2;
  v23 = (unint64_t)v5[2];
  if (v23 > 0x10)
  {
    v32 = a2;
    while (1)
    {
      v33 = *v32;
      v34 = (char *)*v5;
      v35 = (unint64_t)v5[2];
      do
      {
        v36 = v35 >> 1;
        v37 = &v34[v35 >> 1];
        v39 = *v37;
        v38 = v37 + 1;
        v35 += ~(v35 >> 1);
        if (v39 < v33)
          v34 = v38;
        else
          v35 = v36;
      }
      while (v35);
      if (v34 == (char *)*v5 + v23 || *v34 > v33)
        break;
      if (++v32 == a3)
        return a2;
    }
  }
  else
  {
    if (!v23)
      return a2;
    v24 = a2;
    while (1)
    {
      v25 = *v24;
      v26 = (char *)v5;
      v27 = (unint64_t)v5[2];
      do
      {
        v28 = v27 >> 1;
        v29 = &v26[v27 >> 1];
        v31 = *v29;
        v30 = v29 + 1;
        v27 += ~(v27 >> 1);
        if (v31 < v25)
          v26 = v30;
        else
          v27 = v28;
      }
      while (v27);
      if (v26 == (char *)v5 + v23 || *v26 > v25)
        break;
      if (++v24 == a3)
        return a2;
    }
  }
  return a2;
}

uint64_t sub_19C3F9E7C(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  __int128 v5;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_QWORD *)a2 = &unk_1E3D329B8;
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == ((unint64_t)"N5boost9algorithm6detail13first_finderFIPKcNS0_8is_equalEEE" & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)((unint64_t)"N5boost9algorithm6detail13first_finderFIPKcNS0_8is_equalEEE" & 0x7FFFFFFFFFFFFFFFLL)), !(_DWORD)result))
      {
        *(_QWORD *)a2 = v4;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
  }
  else
  {
    v5 = *(_OWORD *)result;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

uint64_t sub_19C3F9F18(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = a2;
  if (a2 != a3)
  {
    v4 = *a1;
    v5 = a1[1];
    if (*a1 == v5)
      return a3;
    while (1)
    {
      v6 = 0;
      do
      {
        if (*(unsigned __int8 *)(v3 + v6) != *(unsigned __int8 *)(v4 + v6))
          break;
        if (++v6 + v3 == a3)
          break;
      }
      while (v6 + v4 != v5);
      if (v4 + v6 == v5)
        break;
      if (++v3 == a3)
        return a3;
    }
  }
  return v3;
}

_BYTE *sub_19C3F9F94(uint64_t a1, _BYTE *__dst, _BYTE *__src, _BYTE *a4)
{
  _BYTE *v6;
  uint64_t v8;
  BOOL v9;
  void **v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  BOOL v16;
  unint64_t v17;
  char *v18;
  void *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  int64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  void *v33;
  char *v34;
  char *v35;
  void *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  int64_t v43;
  unint64_t v44;
  char *v45;
  _QWORD *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  int64_t v52;
  unint64_t v53;
  char *v54;
  char *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char *v62;
  unint64_t v63;
  int64_t v64;
  unint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __int128 *v71;
  char *v72;
  uint64_t v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __int128 *v78;
  char *v79;
  uint64_t v80;
  __int128 v81;
  uint64_t v82;
  unint64_t v83;
  int64x2_t v84;
  unint64_t v85;
  unint64_t v86;
  int64_t v87;
  unint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  __int128 *v92;
  char *v93;
  uint64_t v94;
  __int128 v95;
  uint64_t v96;
  void **v97;
  unint64_t v98;
  BOOL v99;
  size_t v100;
  _BYTE *v102;
  void *v103;

  v6 = __dst;
  v8 = *(_QWORD *)(a1 + 40);
  if (v8)
    v9 = __dst == __src;
  else
    v9 = 1;
  if (!v9)
  {
    v97 = *(void ***)(a1 + 8);
    v98 = *(_QWORD *)(a1 + 32);
    do
    {
      *v6 = (*(_BYTE **)((char *)v97 + ((v98 >> 9) & 0x7FFFFFFFFFFFF8)))[v98 & 0xFFF];
      v97 = *(void ***)(a1 + 8);
      v8 = *(_QWORD *)(a1 + 40) - 1;
      v98 = *(_QWORD *)(a1 + 32) + 1;
      *(_QWORD *)(a1 + 32) = v98;
      *(_QWORD *)(a1 + 40) = v8;
      if (v98 >= 0x2000)
      {
        operator delete(*v97);
        v97 = (void **)(*(_QWORD *)(a1 + 8) + 8);
        *(_QWORD *)(a1 + 8) = v97;
        v8 = *(_QWORD *)(a1 + 40);
        v98 = *(_QWORD *)(a1 + 32) - 4096;
        *(_QWORD *)(a1 + 32) = v98;
      }
      ++v6;
      if (v8)
        v99 = v6 == __src;
      else
        v99 = 1;
    }
    while (!v99);
  }
  if (v8)
  {
    if (v6 != a4)
    {
      v10 = *(void ***)(a1 + 8);
      v11 = *(_QWORD *)(a1 + 32);
      v102 = a4;
      while (1)
      {
        v12 = *(char **)(a1 + 16);
        v13 = v12 - (char *)v10;
        v14 = v12 == (char *)v10 ? 0 : ((v12 - (char *)v10) << 9) - 1;
        v15 = *(_QWORD *)(a1 + 40) + v11;
        if (v14 == v15)
          break;
LABEL_93:
        (*(_BYTE **)((char *)v10 + ((v15 >> 9) & 0x7FFFFFFFFFFFF8)))[v15 & 0xFFF] = *v6;
        v83 = *(_QWORD *)(a1 + 32);
        ++*(_QWORD *)(a1 + 40);
        *v6 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + ((v83 >> 9) & 0x7FFFFFFFFFFFF8)) + (v83 & 0xFFF));
        v10 = *(void ***)(a1 + 8);
        v84 = vaddq_s64(*(int64x2_t *)(a1 + 32), (int64x2_t)xmmword_19C46DF40);
        *(int64x2_t *)(a1 + 32) = v84;
        v11 = v84.i64[0];
        if (v84.i64[0] >= 0x2000uLL)
        {
          operator delete(*v10);
          v10 = (void **)(*(_QWORD *)(a1 + 8) + 8);
          *(_QWORD *)(a1 + 8) = v10;
          v11 = *(_QWORD *)(a1 + 32) - 4096;
          *(_QWORD *)(a1 + 32) = v11;
        }
        if (++v6 == a4)
          return a4;
      }
      v16 = v11 >= 0x1000;
      v17 = v11 - 4096;
      if (v16)
      {
        *(_QWORD *)(a1 + 32) = v17;
        v18 = (char *)(v10 + 1);
        v19 = *v10;
        *(_QWORD *)(a1 + 8) = v10 + 1;
        if (v12 == *(char **)(a1 + 24))
        {
          v20 = *(char **)a1;
          if ((unint64_t)v18 > *(_QWORD *)a1)
          {
            v21 = (uint64_t)&v18[-*(_QWORD *)a1] >> 3;
            if (v21 >= -1)
              v22 = v21 + 1;
            else
              v22 = v21 + 2;
            v23 = v22 >> 1;
            v24 = &v18[-8 * (v22 >> 1)];
            v25 = v12 - v18;
            if (v12 != v18)
            {
              memmove(&v18[-8 * (v22 >> 1)], v10 + 1, v12 - v18);
              v12 = *(char **)(a1 + 8);
            }
            v26 = &v12[-8 * v23];
            v12 = &v24[v25];
            goto LABEL_24;
          }
          v38 = (v12 - v20) >> 2;
          if (v12 == v20)
            v38 = 1;
          if (v38 >> 61)
LABEL_120:
            sub_19C2A143C();
          v39 = v38 >> 2;
          v40 = 8 * v38;
          v41 = (char *)operator new(8 * v38);
          v42 = &v41[8 * v39];
          v43 = v12 - v18;
          v9 = v12 == v18;
          v12 = v42;
          if (!v9)
          {
            v12 = &v42[v43 & 0xFFFFFFFFFFFFFFF8];
            v44 = v43 - 8;
            if ((unint64_t)(v43 - 8) >= 0x38)
            {
              v45 = &v41[8 * v39];
              if ((unint64_t)(v45 - v18) >= 0x20)
              {
                v76 = (v44 >> 3) + 1;
                v77 = 8 * (v76 & 0x3FFFFFFFFFFFFFFCLL);
                v45 = &v42[v77];
                v78 = (__int128 *)(v10 + 3);
                v79 = &v41[8 * v39 + 16];
                v80 = v76 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v81 = *v78;
                  *((_OWORD *)v79 - 1) = *(v78 - 1);
                  *(_OWORD *)v79 = v81;
                  v78 += 2;
                  v79 += 32;
                  v80 -= 4;
                }
                while (v80);
                if (v76 == (v76 & 0x3FFFFFFFFFFFFFFCLL))
                  goto LABEL_89;
                v18 += v77;
              }
            }
            else
            {
              v45 = &v41[8 * v39];
            }
            do
            {
              v82 = *(_QWORD *)v18;
              v18 += 8;
              *(_QWORD *)v45 = v82;
              v45 += 8;
            }
            while (v45 != v12);
          }
LABEL_89:
          *(_QWORD *)a1 = v41;
          *(_QWORD *)(a1 + 8) = v42;
          *(_QWORD *)(a1 + 16) = v12;
          *(_QWORD *)(a1 + 24) = &v41[v40];
          a4 = v102;
          if (v20)
          {
            operator delete(v20);
            v12 = *(char **)(a1 + 16);
          }
        }
LABEL_91:
        *(_QWORD *)v12 = v19;
        *(_QWORD *)(a1 + 16) += 8;
        goto LABEL_92;
      }
      v27 = v13 >> 3;
      v28 = *(char **)(a1 + 24);
      v29 = (uint64_t)&v28[-*(_QWORD *)a1];
      if (v13 >> 3 < (unint64_t)(v29 >> 3))
      {
        if (v28 != v12)
        {
          v103 = operator new(0x1000uLL);
          sub_19C3FA818((char **)a1, &v103);
          a4 = v102;
LABEL_92:
          v10 = *(void ***)(a1 + 8);
          v15 = *(_QWORD *)(a1 + 40) + *(_QWORD *)(a1 + 32);
          goto LABEL_93;
        }
        v103 = operator new(0x1000uLL);
        sub_19C3FA9A0((void **)a1, &v103);
        v46 = *(_QWORD **)(a1 + 8);
        v12 = *(char **)(a1 + 16);
        v47 = (char *)(v46 + 1);
        v19 = (void *)*v46;
        *(_QWORD *)(a1 + 8) = v46 + 1;
        a4 = v102;
        if (v12 == *(char **)(a1 + 24))
        {
          v20 = *(char **)a1;
          if ((unint64_t)v47 > *(_QWORD *)a1)
          {
            v48 = (uint64_t)&v47[-*(_QWORD *)a1] >> 3;
            if (v48 >= -1)
              v49 = v48 + 1;
            else
              v49 = v48 + 2;
            v50 = v49 >> 1;
            v51 = &v47[-8 * (v49 >> 1)];
            v52 = v12 - v47;
            if (v12 != v47)
            {
              memmove(&v47[-8 * (v49 >> 1)], v47, v12 - v47);
              v47 = *(char **)(a1 + 8);
            }
            v12 = &v51[v52];
            v26 = &v47[-8 * v50];
LABEL_24:
            *(_QWORD *)(a1 + 8) = v26;
            *(_QWORD *)(a1 + 16) = v12;
            a4 = v102;
            goto LABEL_91;
          }
          v85 = (v12 - v20) >> 2;
          if (v12 == v20)
            v85 = 1;
          if (v85 >> 61)
            goto LABEL_120;
          v86 = v85 >> 2;
          v40 = 8 * v85;
          v41 = (char *)operator new(8 * v85);
          v42 = &v41[8 * v86];
          v87 = v12 - v47;
          v9 = v12 == v47;
          v12 = v42;
          if (!v9)
          {
            v12 = &v42[v87 & 0xFFFFFFFFFFFFFFF8];
            v88 = v87 - 8;
            if ((unint64_t)(v87 - 8) < 0x38)
            {
              v89 = &v41[8 * v86];
              goto LABEL_106;
            }
            v89 = &v41[8 * v86];
            if ((unint64_t)(v89 - v47) < 0x20)
            {
              do
              {
LABEL_106:
                v96 = *(_QWORD *)v47;
                v47 += 8;
                *(_QWORD *)v89 = v96;
                v89 += 8;
              }
              while (v89 != v12);
              goto LABEL_89;
            }
            v90 = (v88 >> 3) + 1;
            v91 = 8 * (v90 & 0x3FFFFFFFFFFFFFFCLL);
            v89 = &v42[v91];
            v92 = (__int128 *)(v46 + 3);
            v93 = &v41[8 * v86 + 16];
            v94 = v90 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v95 = *v92;
              *((_OWORD *)v93 - 1) = *(v92 - 1);
              *(_OWORD *)v93 = v95;
              v92 += 2;
              v93 += 32;
              v94 -= 4;
            }
            while (v94);
            if (v90 != (v90 & 0x3FFFFFFFFFFFFFFCLL))
            {
              v47 += v91;
              goto LABEL_106;
            }
          }
          goto LABEL_89;
        }
        goto LABEL_91;
      }
      v30 = v29 >> 2;
      if (v28 == *(char **)a1)
        v31 = 1;
      else
        v31 = v30;
      if (v31 >> 61)
        goto LABEL_120;
      v32 = (char *)operator new(8 * v31);
      v33 = operator new(0x1000uLL);
      v34 = &v32[8 * v27];
      v35 = &v32[8 * v31];
      if (v27 == v31)
      {
        v36 = v33;
        if (v13 < 1)
        {
          if (v12 == (char *)v10)
            v53 = 1;
          else
            v53 = v13 >> 2;
          if (v53 >> 61)
            sub_19C2A143C();
          v34 = (char *)operator new(8 * v53);
          v35 = &v34[8 * v53];
          operator delete(v32);
          v10 = *(void ***)(a1 + 8);
          v12 = *(char **)(a1 + 16);
          v32 = v34;
        }
        else
        {
          v37 = v27 + 2;
          if (v27 >= -1)
            v37 = v27 + 1;
          v34 -= 8 * (v37 >> 1);
        }
        v33 = v36;
      }
      *(_QWORD *)v34 = v33;
      v54 = v34 + 8;
      a4 = v102;
      if (v12 == (char *)v10)
      {
LABEL_58:
        v55 = *(char **)a1;
        *(_QWORD *)a1 = v32;
        *(_QWORD *)(a1 + 8) = v34;
        *(_QWORD *)(a1 + 16) = v54;
        *(_QWORD *)(a1 + 24) = v35;
        if (v55)
          operator delete(v55);
        goto LABEL_92;
      }
      while (v34 != v32)
      {
        v56 = v34;
        v57 = v54;
LABEL_61:
        v58 = *((_QWORD *)v12 - 1);
        v12 -= 8;
        *((_QWORD *)v56 - 1) = v58;
        v34 = v56 - 8;
        v54 = v57;
        if (v12 == *(char **)(a1 + 8))
          goto LABEL_58;
      }
      if (v54 < v35)
      {
        v59 = (v35 - v54) >> 3;
        if (v59 >= -1)
          v60 = v59 + 1;
        else
          v60 = v59 + 2;
        v57 = &v54[8 * (v60 >> 1)];
        v56 = &v34[8 * (v60 >> 1)];
        if (v54 == v34)
        {
          v32 = v54;
        }
        else
        {
          memmove(&v34[8 * (v60 >> 1)], v34, v54 - v34);
          v32 = v34;
        }
        goto LABEL_61;
      }
      if (v35 == v34)
        v61 = 1;
      else
        v61 = (v35 - v34) >> 2;
      if (v61 >> 61)
        sub_19C2A143C();
      v62 = (char *)operator new(8 * v61);
      v32 = v62;
      v63 = (v61 + 3) >> 2;
      v56 = &v62[8 * v63];
      v57 = v56;
      v64 = v54 - v34;
      if (v54 != v34)
      {
        v57 = &v56[v64 & 0xFFFFFFFFFFFFFFF8];
        v65 = v64 - 8;
        v66 = &v62[8 * v63];
        v67 = v34;
        if (v65 >= 0x38)
        {
          v68 = 8 * v63;
          v66 = &v62[8 * v63];
          v67 = v34;
          if ((unint64_t)(v66 - v34) >= 0x20)
          {
            v69 = (v65 >> 3) + 1;
            v70 = 8 * (v69 & 0x3FFFFFFFFFFFFFFCLL);
            v66 = &v56[v70];
            v71 = (__int128 *)(v34 + 16);
            v72 = &v62[v68 + 16];
            v73 = v69 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v74 = *v71;
              *((_OWORD *)v72 - 1) = *(v71 - 1);
              *(_OWORD *)v72 = v74;
              v71 += 2;
              v72 += 32;
              v73 -= 4;
            }
            while (v73);
            if (v69 == (v69 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_81;
            v67 = &v34[v70];
          }
        }
        do
        {
          v75 = *(_QWORD *)v67;
          v67 += 8;
          *(_QWORD *)v66 = v75;
          v66 += 8;
        }
        while (v66 != v57);
      }
LABEL_81:
      v35 = &v62[8 * v61];
      operator delete(v34);
      goto LABEL_61;
    }
  }
  else if (v6 != __src)
  {
    v100 = a4 - __src;
    if (v100)
      memmove(v6, __src, v100);
    return &v6[v100];
  }
  return a4;
}

void sub_19C3FA69C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_19C3FA6D4(_QWORD *result, uint64_t a2, unint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;

  if (a3)
  {
    v3 = result;
    v4 = *((char *)result + 23);
    if (v4 < 0)
    {
      v6 = (_QWORD *)*result;
      v5 = result[1];
    }
    else
    {
      v5 = *((unsigned __int8 *)result + 23);
      v6 = result;
    }
    if (v5 - a2 >= a3)
      v7 = a3;
    else
      v7 = v5 - a2;
    if (v5 - a2 > a3)
    {
      result = memmove((char *)v6 + a2, (char *)v6 + a2 + v7, v5 - a2 - v7);
      LOBYTE(v4) = *((_BYTE *)v3 + 23);
    }
    v8 = v5 - v7;
    if ((v4 & 0x80) != 0)
      v3[1] = v8;
    else
      *((_BYTE *)v3 + 23) = v8 & 0x7F;
    *((_BYTE *)v6 + v8) = 0;
  }
  return result;
}

uint64_t sub_19C3FA754(uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  *(_QWORD *)(a1 + 40) = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 2048;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    v6 = 4096;
LABEL_7:
    *(_QWORD *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    v9 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
    if (v8 != v9)
      *(_QWORD *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_19C3FA818(char **a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  BOOL v19;
  int64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 *v26;
  _OWORD *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;

  v4 = a1[2];
  if (v4 != a1[3])
    goto LABEL_23;
  v6 = *a1;
  v5 = a1[1];
  if (v5 > *a1)
  {
    v7 = (v5 - *a1) >> 3;
    if (v7 >= -1)
      v8 = v7 + 1;
    else
      v8 = v7 + 2;
    v9 = v8 >> 1;
    v10 = -v9;
    v11 = &v5[-8 * v9];
    v12 = v4 - v5;
    if (v4 != v5)
    {
      memmove(&v5[-8 * v9], a1[1], v4 - v5);
      v4 = a1[1];
    }
    v13 = &v4[8 * v10];
    v4 = &v11[v12];
    a1[1] = v13;
    a1[2] = &v11[v12];
    goto LABEL_23;
  }
  v14 = (v4 - v6) >> 2;
  if (v4 == v6)
    v14 = 1;
  if (v14 >> 61)
    sub_19C2A143C();
  v15 = v14 >> 2;
  v16 = 8 * v14;
  v17 = (char *)operator new(8 * v14);
  v18 = &v17[8 * v15];
  v20 = v4 - v5;
  v19 = v4 == v5;
  v4 = v18;
  if (!v19)
  {
    v4 = &v18[v20 & 0xFFFFFFFFFFFFFFF8];
    v21 = v20 - 8;
    if ((unint64_t)(v20 - 8) < 0x38)
    {
      v22 = &v17[8 * v15];
      goto LABEL_20;
    }
    v23 = &v17[8 * v15];
    v22 = v23;
    if ((unint64_t)(v23 - v5) < 0x20)
    {
      do
      {
LABEL_20:
        v30 = *(_QWORD *)v5;
        v5 += 8;
        *(_QWORD *)v22 = v30;
        v22 += 8;
      }
      while (v22 != v4);
      goto LABEL_21;
    }
    v24 = (v21 >> 3) + 1;
    v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
    v22 = &v18[v25];
    v26 = (__int128 *)(v5 + 16);
    v27 = v23 + 16;
    v28 = v24 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v29 = *v26;
      *(v27 - 1) = *(v26 - 1);
      *v27 = v29;
      v26 += 2;
      v27 += 2;
      v28 -= 4;
    }
    while (v28);
    if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
    {
      v5 += v25;
      goto LABEL_20;
    }
  }
LABEL_21:
  *a1 = v17;
  a1[1] = v18;
  a1[2] = v4;
  a1[3] = &v17[v16];
  if (v6)
  {
    operator delete(v6);
    v4 = a1[2];
  }
LABEL_23:
  *(_QWORD *)v4 = *a2;
  a1[2] += 8;
}

void sub_19C3FA9A0(void **a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  BOOL v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  __int128 *v27;
  _OWORD *v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;

  v4 = (char *)a1[1];
  if (v4 != *a1)
  {
    v5 = (char *)a1[1];
    goto LABEL_25;
  }
  v7 = a1[2];
  v6 = a1[3];
  if (v7 >= v6)
  {
    v13 = v6 - v4;
    v12 = v13 == 0;
    v14 = v13 >> 2;
    if (v12)
      v14 = 1;
    if (v14 >> 61)
      sub_19C2A143C();
    v15 = (v14 + 3) >> 2;
    v16 = 8 * v14;
    v17 = (char *)operator new(8 * v14);
    v5 = &v17[8 * v15];
    v18 = &v17[v16];
    v19 = v5;
    v20 = v7 - v4;
    if (v7 != v4)
    {
      v19 = &v5[v20 & 0xFFFFFFFFFFFFFFF8];
      v21 = v20 - 8;
      v22 = &v17[8 * v15];
      v23 = v4;
      if (v21 > 0x37)
      {
        v24 = &v17[8 * v15];
        v22 = v24;
        v23 = v4;
        if ((unint64_t)(v24 - v4) >= 0x20)
        {
          v25 = (v21 >> 3) + 1;
          v26 = 8 * (v25 & 0x3FFFFFFFFFFFFFFCLL);
          v22 = &v5[v26];
          v27 = (__int128 *)(v4 + 16);
          v28 = v24 + 16;
          v29 = v25 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v30 = *v27;
            *(v28 - 1) = *(v27 - 1);
            *v28 = v30;
            v27 += 2;
            v28 += 2;
            v29 -= 4;
          }
          while (v29);
          if (v25 == (v25 & 0x3FFFFFFFFFFFFFFCLL))
          {
            *a1 = v17;
            a1[1] = v5;
            a1[2] = v19;
            a1[3] = v18;
            goto LABEL_24;
          }
          v23 = &v4[v26];
        }
      }
      do
      {
        v31 = *(_QWORD *)v23;
        v23 += 8;
        *(_QWORD *)v22 = v31;
        v22 += 8;
      }
      while (v22 != v19);
    }
    *a1 = v17;
    a1[1] = v5;
    a1[2] = v19;
    a1[3] = v18;
    if (!v4)
      goto LABEL_25;
LABEL_24:
    operator delete(v4);
    v5 = (char *)a1[1];
    goto LABEL_25;
  }
  v8 = (v6 - v7) >> 3;
  if (v8 >= -1)
    v9 = v8 + 1;
  else
    v9 = v8 + 2;
  v10 = v9 >> 1;
  v11 = &v7[8 * (v9 >> 1)];
  v5 = &v11[-(v7 - v4)];
  if (v7 != v4)
  {
    memmove(&v11[-(v7 - v4)], v4, v7 - v4);
    v4 = (char *)a1[2];
  }
  a1[1] = v5;
  a1[2] = &v4[8 * v10];
LABEL_25:
  *((_QWORD *)v5 - 1) = *a2;
  a1[1] = (char *)a1[1] - 8;
}

void sub_19C3FAB44(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  std::string::size_type v5;
  const void *v6;
  std::string::size_type v7;
  std::string *p_p;
  uint64_t v9;
  uint64_t v10;
  int v11;
  const std::string::value_type *v12;
  std::string::size_type v13;
  std::string *v14;
  std::string::size_type v15;
  char v16;
  uint64_t v17;
  std::string __p;
  _QWORD v19[3];

  v19[2] = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 360) && !sub_19C3C19A0((_QWORD *)(a1 + 432), a2))
  {
    if (*(char *)(a2 + 23) < 0)
    {
      v4 = *(_QWORD *)(a2 + 8);
      v5 = v4 - 2;
      if (v4 <= 2)
        return;
      v6 = *(const void **)a2;
      if (*(_WORD *)(*(_QWORD *)a2 + v5) != 29479)
        return;
    }
    else
    {
      v4 = *(unsigned __int8 *)(a2 + 23);
      if (v4 <= 2)
        return;
      v5 = v4 - 2;
      if (*(_WORD *)(a2 + v4 - 2) != 29479)
        return;
      v6 = (const void *)a2;
    }
    if (v4 >= v5)
      v7 = v5;
    else
      v7 = v4;
    if (v7 >= 0x7FFFFFFFFFFFFFF8)
      sub_19C2A1A54();
    if (v7 >= 0x17)
    {
      v9 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v7 | 7) != 0x17)
        v9 = v7 | 7;
      v10 = v9 + 1;
      p_p = (std::string *)operator new(v9 + 1);
      __p.__r_.__value_.__l.__size_ = v7;
      __p.__r_.__value_.__r.__words[2] = v10 | 0x8000000000000000;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
    }
    else
    {
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = v7;
      p_p = &__p;
    }
    memmove(p_p, v6, v7);
    p_p->__r_.__value_.__s.__data_[v7] = 0;
    if (!*(_BYTE *)(a1 + 360))
      sub_19C30F5A0();
    v11 = *(char *)(a1 + 359);
    if (v11 >= 0)
      v12 = (const std::string::value_type *)(a1 + 336);
    else
      v12 = *(const std::string::value_type **)(a1 + 336);
    if (v11 >= 0)
      v13 = *(unsigned __int8 *)(a1 + 359);
    else
      v13 = *(_QWORD *)(a1 + 344);
    v14 = std::string::append(&__p, v12, v13);
    v15 = v14->__r_.__value_.__r.__words[0];
    v19[0] = v14->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)v19 + 7) = *(std::string::size_type *)((char *)&v14->__r_.__value_.__r.__words[1] + 7);
    v16 = HIBYTE(v14->__r_.__value_.__r.__words[2]);
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    v17 = v19[0];
    *(_QWORD *)a2 = v15;
    *(_QWORD *)(a2 + 8) = v17;
    *(_QWORD *)(a2 + 15) = *(_QWORD *)((char *)v19 + 7);
    *(_BYTE *)(a2 + 23) = v16;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_19C3FAD0C(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_19C3FAD18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19C3FAD34(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void (*v11)(__int128 *, __int128 *, uint64_t);
  uint64_t v12;
  void (*v13)(__int128 *, __int128 *, uint64_t);
  void (*v14)(__int128 *, __int128 *, uint64_t);
  __int128 v15;
  void (*v16)(__int128 *, __int128 *, uint64_t);
  void (*v17)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v18;
  void *v19;
  uint64_t v20;
  unint64_t v21;
  std::string *v22;
  std::string::size_type size;
  int v24;
  size_t v25;
  size_t v26;
  unint64_t v27;
  _BYTE *v28;
  _BYTE *v29;
  const void *v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  unint64_t v33;
  std::string::size_type v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  std::string::size_type v38;
  uint64_t v39;
  const void **v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  char v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  char v56;
  __int128 v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  char v63;
  char *v64;
  __int128 v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  _BYTE __dst[24];
  uint64_t v72;
  __int128 v73;
  __int128 v74;
  char v75;

  v2 = a1;
  if (*(_DWORD *)(a1 + 328) != 2)
  {
    sub_19C3FBDAC(a1, a2);
    return;
  }
  v3 = a1 + 368;
  v4 = *(unsigned __int8 *)(a1 + 391);
  v39 = a2;
  v40 = (const void **)(a1 + 368);
  if ((v4 & 0x80u) != 0)
  {
    v3 = *(_QWORD *)(a1 + 368);
    v4 = *(_QWORD *)(a1 + 376);
  }
  v5 = v3 + v4;
  v6 = *(char *)(a2 + 23);
  v7 = *(_QWORD *)(a2 + 8);
  if (v6 >= 0)
    v7 = v6;
  else
    a2 = *(_QWORD *)a2;
  v8 = a2 + v7;
  v9 = (unint64_t)off_1E3D39E80 + 1;
  v64 = (char *)off_1E3D39E80 + 1;
  *(_QWORD *)&v65 = v3;
  *((_QWORD *)&v65 + 1) = v5;
  *(_QWORD *)&v67 = a2;
  *((_QWORD *)&v67 + 1) = a2;
  v68 = a2;
  v69 = a2 + v7;
  v70 = 0;
  if (!v7)
    goto LABEL_13;
  v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(((unint64_t)off_1E3D39E80 & 0xFFFFFFFFFFFFFFFELL)
                                                               + 8))((uint64_t *)&v65, a2, v8);
  v8 = v69;
  if (v69 == v10 && v69 == a2 && *((_QWORD *)&v67 + 1) == a2)
    v70 = 1;
  v9 = (unint64_t)v64;
  *(_QWORD *)&v67 = v68;
  *((_QWORD *)&v67 + 1) = v10;
  v68 = a2;
  *(_QWORD *)__dst = 0;
  if (v64)
  {
LABEL_13:
    *(_QWORD *)__dst = v9;
    if ((v9 & 1) != 0)
    {
      *(_OWORD *)&__dst[8] = v65;
      v72 = v66;
    }
    else
    {
      (*(void (**)(__int128 *, _BYTE *, _QWORD))(v9 & 0xFFFFFFFFFFFFFFFELL))(&v65, &__dst[8], 0);
      a2 = v68;
      v8 = v69;
      v9 = (unint64_t)v64;
    }
  }
  v73 = v67;
  *(_QWORD *)&v74 = a2;
  *((_QWORD *)&v74 + 1) = v8;
  v75 = v70;
  if (v9)
  {
    if ((v9 & 1) == 0)
    {
      v11 = *(void (**)(__int128 *, __int128 *, uint64_t))(v9 & 0xFFFFFFFFFFFFFFFELL);
      if (v11)
        v11(&v65, &v65, 2);
    }
    v64 = 0;
  }
  v58 = 0;
  v61 = 0u;
  v62 = 0u;
  v63 = 1;
  v51 = 0;
  v12 = *(_QWORD *)__dst;
  if (*(_QWORD *)__dst)
  {
    v51 = *(_QWORD *)__dst;
    if ((__dst[0] & 1) != 0)
    {
      v12 = 0;
      v52 = *(_OWORD *)&__dst[8];
      v53 = v72;
    }
    else
    {
      (*(void (**)(_BYTE *, __int128 *, _QWORD))(*(_QWORD *)__dst & 0xFFFFFFFFFFFFFFFELL))(&__dst[8], &v52, 0);
      v12 = v58;
    }
  }
  v54 = v73;
  v55 = v74;
  v56 = v75;
  v45 = 0;
  if (v12)
  {
    v45 = v12;
    if ((v12 & 1) != 0)
    {
      v46 = v59;
      v47 = v60;
    }
    else
    {
      (*(void (**)(__int128 *, __int128 *, _QWORD))(v12 & 0xFFFFFFFFFFFFFFFELL))(&v59, &v46, 0);
    }
  }
  v48 = v61;
  v49 = v62;
  v50 = v63;
  sub_19C3F96DC((uint64_t)&v57, &v51, &v45);
  if (v45)
  {
    if ((v45 & 1) == 0)
    {
      v13 = *(void (**)(__int128 *, __int128 *, uint64_t))(v45 & 0xFFFFFFFFFFFFFFFELL);
      if (v13)
        v13(&v46, &v46, 2);
    }
    v45 = 0;
  }
  if (v51)
  {
    if ((v51 & 1) == 0)
    {
      v14 = *(void (**)(__int128 *, __int128 *, uint64_t))(v51 & 0xFFFFFFFFFFFFFFFELL);
      if (v14)
        v14(&v52, &v52, 2);
    }
    v51 = 0;
  }
  v15 = v57;
  v44 = v57;
  if (v58)
  {
    if ((v58 & 1) == 0)
    {
      v16 = *(void (**)(__int128 *, __int128 *, uint64_t))(v58 & 0xFFFFFFFFFFFFFFFELL);
      if (v16)
      {
        v42 = v57;
        v16(&v59, &v59, 2);
        v15 = v42;
      }
    }
  }
  if (*(_QWORD *)__dst)
  {
    if ((__dst[0] & 1) == 0)
    {
      v17 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)__dst & 0xFFFFFFFFFFFFFFFELL);
      if (v17)
      {
        v43 = v15;
        v17(&__dst[8], &__dst[8], 2);
        v15 = v43;
      }
    }
  }
  v18 = *((_QWORD *)&v15 + 1);
  v19 = (void *)v15;
  if (*((_QWORD *)&v15 + 1) - (_QWORD)v15 == 24)
  {
    sub_19C3FBDAC(v2, v39);
    if (v19)
      goto LABEL_93;
    return;
  }
  v20 = 0;
  v21 = 0;
  do
  {
    sub_19C3FBDAC(v2, (uint64_t)v19 + v20);
    v22 = (std::string *)(v44 + v20);
    if (*(char *)(v44 + v20 + 23) < 0)
      size = v22->__r_.__value_.__l.__size_;
    else
      size = *(unsigned __int8 *)(v44 + v20 + 23);
    v24 = *(char *)(v2 + 391);
    if (v24 >= 0)
      v25 = *(unsigned __int8 *)(v2 + 391);
    else
      v25 = *(_QWORD *)(v2 + 376);
    v26 = size != 0;
    if (size)
      v27 = v25 + 1;
    else
      v27 = v25;
    if (v27 >= 0x7FFFFFFFFFFFFFF8)
      sub_19C2A1A54();
    if (v27 <= 0x16)
    {
      memset(__dst, 0, sizeof(__dst));
      v28 = __dst;
      __dst[23] = v27;
      if (!size)
        goto LABEL_66;
LABEL_65:
      memcpy(v28, " ", v26);
      goto LABEL_66;
    }
    v41 = v20;
    v33 = v21;
    v34 = size;
    v35 = v2;
    v36 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v27 | 7) != 0x17)
      v36 = v27 | 7;
    v37 = v36 + 1;
    v28 = operator new(v36 + 1);
    *(_QWORD *)&__dst[8] = v27;
    *(_QWORD *)&__dst[16] = v37 | 0x8000000000000000;
    *(_QWORD *)__dst = v28;
    v2 = v35;
    v38 = v34;
    v21 = v33;
    v20 = v41;
    if (v38)
      goto LABEL_65;
LABEL_66:
    v29 = &v28[v26];
    if (v25)
    {
      if (v24 >= 0)
        v30 = v40;
      else
        v30 = *v40;
      memmove(v29, v30, v25);
    }
    v29[v25] = 0;
    if (__dst[23] >= 0)
      v31 = __dst;
    else
      v31 = *(const std::string::value_type **)__dst;
    if (__dst[23] >= 0)
      v32 = __dst[23];
    else
      v32 = *(_QWORD *)&__dst[8];
    std::string::append(v22, v31, v32);
    v19 = (void *)v44;
    if ((__dst[23] & 0x80000000) != 0)
      operator delete(*(void **)__dst);
    ++v21;
    v18 = *((_QWORD *)&v44 + 1);
    v20 += 24;
  }
  while (-1 - 0x5555555555555555 * ((uint64_t)(*((_QWORD *)&v44 + 1) - v44) >> 3) > v21);
  if (*(char *)(*((_QWORD *)&v44 + 1) - 1) < 0)
  {
    if (!*(_QWORD *)(*((_QWORD *)&v44 + 1) - 16))
    {
      operator delete(*(void **)(*((_QWORD *)&v44 + 1) - 24));
      goto LABEL_88;
    }
  }
  else if (!*(_BYTE *)(*((_QWORD *)&v44 + 1) - 1))
  {
LABEL_88:
    v18 = *((_QWORD *)&v44 + 1) - 24;
  }
  sub_19C3F95C4((unint64_t)__dst, v44, v18);
  if (*(char *)(v39 + 23) < 0)
    operator delete(*(void **)v39);
  *(_OWORD *)v39 = *(_OWORD *)__dst;
  *(_QWORD *)(v39 + 16) = *(_QWORD *)&__dst[16];
LABEL_93:
  while ((void *)v18 != v19)
  {
    if (*(char *)(v18 - 1) < 0)
      operator delete(*(void **)(v18 - 24));
    v18 -= 24;
  }
  operator delete(v19);
}

void sub_19C3FB30C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42)
{
  uint64_t v42;

  sub_19C3F9B08(&a29);
  sub_19C3F9B08(&a42);
  sub_19C3F9B08((uint64_t *)(v42 - 176));
  sub_19C307B68(&a15);
  _Unwind_Resume(a1);
}

void sub_19C3FB3C4(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

void sub_19C3FB3F8(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;

  sub_19C3FBB18(v3, a2, v2);
}

_DWORD *sub_19C3FB410(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  _QWORD *v19;
  uint64_t v20;
  int v21;
  _DWORD *v22;
  _DWORD *result;

  v21 = *(_DWORD *)(v20 + 80);
  v19[1] = 0;
  v19[2] = 0;
  *v19 = 0;
  v22 = operator new(4uLL);
  *v19 = v22;
  *v22 = v21;
  result = v22 + 1;
  v19[1] = result;
  v19[2] = result;
  return result;
}

void sub_19C3FB474(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19C3FB490(_QWORD *__dst, unsigned __int8 *a2)
{
  int v4;
  int v5;
  const void *v6;
  size_t v7;
  size_t v8;
  int v9;
  size_t v10;
  const void *v11;
  size_t *v12;
  size_t v13;
  size_t v15;
  size_t v16;
  const void *v17;
  size_t v18;
  size_t v19;
  size_t *v20;
  char v21;
  unint64_t v22;
  size_t v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  void *v27;
  unsigned __int8 *v28;
  size_t *v29;
  uint64_t v30;
  size_t v31;
  size_t v32;
  const void *v33;
  size_t v34;
  void *v35;
  size_t v36;
  size_t v37;
  size_t v38;
  const void *v39;
  size_t v40;
  size_t v41;
  size_t *v42;
  size_t v43;
  size_t v44;
  const void *v45;
  size_t v46;
  size_t v47;
  size_t v48;
  size_t v49;
  const void *v50;
  size_t v51;
  size_t v52;
  size_t v53;
  size_t v54;
  const void *v55;
  size_t v56;
  size_t v57;
  size_t *v58;
  size_t *v59;
  void *__p[2];
  uint64_t v61;
  int v62;
  size_t __n[2];
  uint64_t v64;

  v4 = *((_DWORD *)a2 + 6);
  if (v4 != 3)
  {
    if ((char)a2[23] < 0)
    {
      sub_19C2B5238(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
      v4 = *((_DWORD *)a2 + 6);
    }
    else
    {
      *(_OWORD *)__dst = *(_OWORD *)a2;
      __dst[2] = *((_QWORD *)a2 + 2);
    }
    *((_DWORD *)__dst + 6) = v4;
    return;
  }
  v5 = (char)a2[23];
  if ((v5 & 0x80000000) == 0)
  {
    *(_OWORD *)__n = *(_OWORD *)a2;
    v64 = *((_QWORD *)a2 + 2);
    v6 = (const void *)language_modeling::v1::kClassLabelNumber;
    v7 = strlen((const char *)language_modeling::v1::kClassLabelNumber);
    goto LABEL_7;
  }
  sub_19C2B5238(__n, *(void **)a2, *((_QWORD *)a2 + 1));
  v5 = (char)a2[23];
  v6 = (const void *)language_modeling::v1::kClassLabelNumber;
  v8 = strlen((const char *)language_modeling::v1::kClassLabelNumber);
  v7 = v8;
  if ((v5 & 0x80000000) == 0)
  {
LABEL_7:
    if (v7 != -1)
    {
      v9 = 0;
      v10 = v5;
      v11 = a2;
      goto LABEL_9;
    }
LABEL_141:
    sub_19C2E3454();
  }
  if (v8 == -1)
    goto LABEL_141;
  v11 = *(const void **)a2;
  v10 = *((_QWORD *)a2 + 1);
  v9 = 1;
LABEL_9:
  v12 = (size_t *)((char *)__n + 1);
  if (v10 >= v7)
    v13 = v7;
  else
    v13 = v10;
  if (!memcmp(v11, v6, v13) && v10 == v7)
    goto LABEL_28;
  v15 = strlen((const char *)language_modeling::v1::kClassLabelPluralNumber);
  v16 = v15;
  if (v9)
  {
    if (v15 != -1)
    {
      v17 = *(const void **)a2;
      v18 = *((_QWORD *)a2 + 1);
      goto LABEL_23;
    }
LABEL_142:
    sub_19C2E3454();
  }
  if (v15 == -1)
    goto LABEL_142;
  v18 = v5;
  v17 = a2;
LABEL_23:
  if (v18 >= v16)
    v19 = v16;
  else
    v19 = v18;
  if (!memcmp(v17, (const void *)language_modeling::v1::kClassLabelPluralNumber, v19) && v18 == v16)
  {
LABEL_28:
    if (SHIBYTE(v64) < 0)
    {
      __n[1] = 1;
      v20 = (size_t *)__n[0];
      v12 = (size_t *)(__n[0] + 1);
    }
    else
    {
      HIBYTE(v64) = 1;
      v20 = __n;
    }
    v21 = 57;
LABEL_32:
    *(_BYTE *)v20 = v21;
    goto LABEL_33;
  }
  v31 = strlen((const char *)language_modeling::v1::kClassLabelSingularNumber);
  v32 = v31;
  if (v9)
  {
    if (v31 != -1)
    {
      v33 = *(const void **)a2;
      v34 = *((_QWORD *)a2 + 1);
      goto LABEL_68;
    }
LABEL_143:
    sub_19C2E3454();
  }
  if (v31 == -1)
    goto LABEL_143;
  v34 = v5;
  v33 = a2;
LABEL_68:
  if (v34 >= v32)
    v36 = v32;
  else
    v36 = v34;
  if (!memcmp(v33, (const void *)language_modeling::v1::kClassLabelSingularNumber, v36) && v34 == v32)
  {
    if (SHIBYTE(v64) < 0)
    {
      __n[1] = 1;
      v20 = (size_t *)__n[0];
      v12 = (size_t *)(__n[0] + 1);
    }
    else
    {
      HIBYTE(v64) = 1;
      v20 = __n;
    }
    v21 = 49;
    goto LABEL_32;
  }
  v37 = strlen((const char *)language_modeling::v1::kClassLabelPause);
  v38 = v37;
  if (v9)
  {
    if (v37 != -1)
    {
      v39 = *(const void **)a2;
      v40 = *((_QWORD *)a2 + 1);
      goto LABEL_83;
    }
LABEL_144:
    sub_19C2E3454();
  }
  if (v37 == -1)
    goto LABEL_144;
  v40 = v5;
  v39 = a2;
LABEL_83:
  if (v40 >= v38)
    v41 = v38;
  else
    v41 = v40;
  if (!memcmp(v39, (const void *)language_modeling::v1::kClassLabelPause, v41) && v40 == v38)
  {
    if (SHIBYTE(v64) < 0)
    {
      __n[1] = 3;
      v42 = (size_t *)__n[0];
      v12 = (size_t *)(__n[0] + 3);
    }
    else
    {
      v12 = (size_t *)((char *)__n + 3);
      HIBYTE(v64) = 3;
      v42 = __n;
    }
    *((_BYTE *)v42 + 2) = 46;
    *(_WORD *)v42 = 11822;
    goto LABEL_33;
  }
  v43 = strlen((const char *)language_modeling::v1::kClassLabelSentenceDelimiter);
  v44 = v43;
  if (v9)
  {
    if (v43 != -1)
    {
      v45 = *(const void **)a2;
      v46 = *((_QWORD *)a2 + 1);
      goto LABEL_97;
    }
LABEL_145:
    sub_19C2E3454();
  }
  if (v43 == -1)
    goto LABEL_145;
  v46 = v5;
  v45 = a2;
LABEL_97:
  if (v46 >= v44)
    v47 = v44;
  else
    v47 = v46;
  if (!memcmp(v45, (const void *)language_modeling::v1::kClassLabelSentenceDelimiter, v47) && v46 == v44)
  {
    if (SHIBYTE(v64) < 0)
    {
      __n[1] = 1;
      v20 = (size_t *)__n[0];
      v12 = (size_t *)(__n[0] + 1);
    }
    else
    {
      HIBYTE(v64) = 1;
      v20 = __n;
    }
    v21 = 46;
    goto LABEL_32;
  }
  v48 = strlen((const char *)language_modeling::v1::kClassLabelReplacementCharacter);
  v49 = v48;
  if (v9)
  {
    if (v48 != -1)
    {
      v50 = *(const void **)a2;
      v51 = *((_QWORD *)a2 + 1);
      goto LABEL_111;
    }
LABEL_146:
    sub_19C2E3454();
  }
  if (v48 == -1)
    goto LABEL_146;
  v51 = v5;
  v50 = a2;
LABEL_111:
  if (v51 >= v49)
    v52 = v49;
  else
    v52 = v51;
  if (!memcmp(v50, (const void *)language_modeling::v1::kClassLabelReplacementCharacter, v52) && v51 == v49)
  {
    if ((SHIBYTE(v64) & 0x80000000) == 0)
    {
LABEL_117:
      HIBYTE(v64) = 0;
      v12 = __n;
      goto LABEL_33;
    }
LABEL_134:
    __n[1] = 0;
    v12 = (size_t *)__n[0];
    goto LABEL_33;
  }
  v53 = strlen((const char *)language_modeling::v1::kClassLabelUsername);
  v54 = v53;
  if (v9)
  {
    if (v53 != -1)
    {
      v55 = *(const void **)a2;
      v56 = *((_QWORD *)a2 + 1);
      goto LABEL_125;
    }
LABEL_147:
    sub_19C2E3454();
  }
  if (v53 == -1)
    goto LABEL_147;
  v56 = v5;
  v55 = a2;
LABEL_125:
  if (v56 >= v54)
    v57 = v54;
  else
    v57 = v56;
  if (!memcmp(v55, (const void *)language_modeling::v1::kClassLabelUsername, v57) && v56 == v54)
  {
    if (SHIBYTE(v64) < 0)
    {
      __n[1] = 4;
      v58 = (size_t *)__n[0];
      v12 = (size_t *)(__n[0] + 4);
    }
    else
    {
      v12 = (size_t *)((char *)__n + 4);
      HIBYTE(v64) = 4;
      v58 = __n;
    }
    *(_DWORD *)v58 = 1852337994;
  }
  else
  {
    if (std::string::compare((const std::string *)a2, (const std::string::value_type *)language_modeling::v1::kClassLabelLink))
    {
      if ((SHIBYTE(v64) & 0x80000000) == 0)
        goto LABEL_117;
      goto LABEL_134;
    }
    if (SHIBYTE(v64) < 0)
    {
      __n[1] = 7;
      v59 = (size_t *)__n[0];
      v12 = (size_t *)(__n[0] + 7);
    }
    else
    {
      v12 = (size_t *)((char *)__n + 7);
      HIBYTE(v64) = 7;
      v59 = __n;
    }
    *(_DWORD *)((char *)v59 + 3) = 1836016430;
    *(_DWORD *)v59 = 779778424;
  }
LABEL_33:
  *(_BYTE *)v12 = 0;
  v22 = __n[1];
  if (v64 >= 0)
    v23 = HIBYTE(v64);
  else
    v23 = __n[1];
  v24 = a2[23];
  v25 = (char)v24;
  v26 = *((_QWORD *)a2 + 1);
  if ((v24 & 0x80u) != 0)
    v24 = *((_QWORD *)a2 + 1);
  if (v23 == v24)
  {
    v27 = *(void **)a2;
    if (v25 >= 0)
      v28 = a2;
    else
      v28 = *(unsigned __int8 **)a2;
    if (v64 < 0)
    {
      v35 = (void *)__n[0];
      if (memcmp((const void *)__n[0], v28, __n[1]))
        goto LABEL_55;
    }
    else if (HIBYTE(v64))
    {
      v29 = __n;
      v30 = HIBYTE(v64);
      while (*(unsigned __int8 *)v29 == *v28)
      {
        v29 = (size_t *)((char *)v29 + 1);
        ++v28;
        if (!--v30)
          goto LABEL_60;
      }
      goto LABEL_48;
    }
LABEL_60:
    if (v25 < 0)
    {
      sub_19C2B5238(__dst, v27, v26);
    }
    else
    {
      *(_OWORD *)__dst = *(_OWORD *)a2;
      __dst[2] = *((_QWORD *)a2 + 2);
    }
    *((_DWORD *)__dst + 6) = *((_DWORD *)a2 + 6);
    if (SHIBYTE(v64) < 0)
      goto LABEL_58;
    return;
  }
LABEL_48:
  if ((v64 & 0x8000000000000000) == 0)
  {
    *(_OWORD *)__p = *(_OWORD *)__n;
    v61 = v64;
    goto LABEL_56;
  }
  v35 = (void *)__n[0];
LABEL_55:
  sub_19C2B5238(__p, v35, v22);
LABEL_56:
  v62 = 0;
  sub_19C297950(__dst, (const UInt8 *)__p);
  *((_DWORD *)__dst + 6) = v62;
  if ((SHIBYTE(v61) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v64) & 0x80000000) == 0)
      return;
    goto LABEL_58;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v64) < 0)
LABEL_58:
    operator delete((void *)__n[0]);
}

void sub_19C3FBAB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if ((a21 & 0x80000000) == 0)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19C3FBB18(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  void **v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  _DWORD *v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  __int128 *v14;
  _OWORD *v15;
  uint64_t v16;
  __int128 v17;
  int v18;
  void *exception;
  std::string *v20;
  std::string v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  void *__p[2];
  uint64_t v27;

  if (*(char *)(a2 + 23) < 0)
  {
    sub_19C2B5238(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v27 = *(_QWORD *)(a2 + 16);
  }
  v23 = 0;
  v24 = 0;
  v25 = 0;
  if (v27 >= 0)
    v5 = __p;
  else
    v5 = (void **)__p[0];
  if (v27 >= 0)
    v6 = HIBYTE(v27);
  else
    v6 = (uint64_t)__p[1];
  sub_19C2AA7D8(a1 + 128, (uint64_t)v5, v6, &v23, &v22);
  if (v22)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    sub_19C2CD6DC((uint64_t)&v22, &v21);
    if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v20 = &v21;
    else
      v20 = (std::string *)v21.__r_.__value_.__r.__words[0];
    MEMORY[0x1A1AD3154](exception, v20);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  sub_19C2CD3C8(&v22);
  v7 = v23;
  v8 = v24;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  v9 = v8 - v7;
  if (v8 == v7)
  {
LABEL_21:
    if (!v7)
      goto LABEL_23;
    goto LABEL_22;
  }
  if (v9 < 0)
    sub_19C2A18E8();
  v10 = operator new(v8 - v7);
  *a3 = v10;
  a3[2] = &v10[v9 >> 2];
  bzero(v10, v8 - v7);
  a3[1] = (char *)v10 + v9;
  if ((unint64_t)(v9 - 4) < 0x1C)
  {
    v11 = v7;
    do
    {
LABEL_20:
      v18 = *(_DWORD *)v11;
      v11 += 4;
      *v10++ = v18;
    }
    while (v11 != v8);
    goto LABEL_21;
  }
  v11 = v7;
  if ((unint64_t)((char *)v10 - v7) < 0x20)
    goto LABEL_20;
  v12 = ((unint64_t)(v9 - 4) >> 2) + 1;
  v13 = 4 * (v12 & 0x7FFFFFFFFFFFFFF8);
  v14 = (__int128 *)(v7 + 16);
  v15 = v10 + 4;
  v16 = v12 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    v17 = *v14;
    *(v15 - 1) = *(v14 - 1);
    *v15 = v17;
    v14 += 2;
    v15 += 2;
    v16 -= 8;
  }
  while (v16);
  if (v12 != (v12 & 0x7FFFFFFFFFFFFFF8))
  {
    v11 = &v7[v13];
    v10 = (_DWORD *)((char *)v10 + v13);
    goto LABEL_20;
  }
LABEL_22:
  v24 = v7;
  operator delete(v7);
LABEL_23:
  if (SHIBYTE(v27) < 0)
    operator delete(__p[0]);
}

void sub_19C3FBD04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (__p)
  {
    operator delete(__p);
    if ((a25 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a25 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a20);
  _Unwind_Resume(exception_object);
}

void sub_19C3FBDAC(uint64_t a1, uint64_t a2)
{
  int v4;
  const UInt8 *v5;
  CFIndex v6;
  const __CFString *v7;
  const __CFString *v8;
  const __CFLocale *v9;
  CFIndex Length;
  __CFString *MutableCopy;
  const __CFString *v12;
  CFTypeID TypeID;
  unsigned int v14;
  void **v15;
  void **v16;
  std::string::size_type v17;
  std::string *v18;
  std::string::size_type v19;
  char v20;
  CFTypeRef v21;
  void *exception;
  void *v23;
  CFTypeRef cf;
  void *__p[2];
  unsigned __int8 v26;
  std::string v27;
  _QWORD v28[3];

  v28[2] = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 292) && sub_19C3F8D78(a1, a2))
  {
    *((_BYTE *)&v27.__r_.__value_.__s + 23) = 7;
    strcpy((char *)&v27, "_U_CAP_");
    v4 = *(char *)(a2 + 23);
    if (v4 >= 0)
      v5 = (const UInt8 *)a2;
    else
      v5 = *(const UInt8 **)a2;
    if (v4 >= 0)
      v6 = *(unsigned __int8 *)(a2 + 23);
    else
      v6 = *(_QWORD *)(a2 + 8);
    v7 = CFStringCreateWithBytes(0, v5, v6, 0x8000100u, 0);
    v8 = v7;
    if (!v7)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1A1AD3154](exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
    }
    v9 = *(const __CFLocale **)(a1 + 56);
    Length = CFStringGetLength(v7);
    MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], Length, v8);
    CFStringLowercase(MutableCopy, v9);
    sub_19C297DB4(&cf, MutableCopy);
    v12 = (const __CFString *)cf;
    if (!cf)
    {
      v23 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1A1AD3154](v23, "Could not construct");
      __cxa_throw(v23, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
    }
    TypeID = CFStringGetTypeID();
    if (TypeID == CFGetTypeID(v12))
    {
      sub_19C2E50A4(__p, v12);
      v14 = v26;
      v15 = (void **)__p[0];
    }
    else
    {
      v15 = 0;
      v14 = 0;
      __p[0] = 0;
      v26 = 0;
    }
    if ((v14 & 0x80u) == 0)
      v16 = __p;
    else
      v16 = v15;
    if ((v14 & 0x80u) == 0)
      v17 = v14;
    else
      v17 = (std::string::size_type)__p[1];
    v18 = std::string::append(&v27, (const std::string::value_type *)v16, v17);
    v19 = v18->__r_.__value_.__r.__words[0];
    v28[0] = v18->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)v28 + 7) = *(std::string::size_type *)((char *)&v18->__r_.__value_.__r.__words[1] + 7);
    v20 = HIBYTE(v18->__r_.__value_.__r.__words[2]);
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    *(_QWORD *)a2 = v19;
    *(_QWORD *)(a2 + 8) = v28[0];
    *(_QWORD *)(a2 + 15) = *(_QWORD *)((char *)v28 + 7);
    *(_BYTE *)(a2 + 23) = v20;
    if ((char)v26 < 0)
    {
      operator delete(__p[0]);
      v21 = cf;
      if (!cf)
        goto LABEL_27;
    }
    else
    {
      v21 = cf;
      if (!cf)
      {
LABEL_27:
        CFRelease(v8);
        if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v27.__r_.__value_.__l.__data_);
        return;
      }
    }
    CFRelease(v21);
    goto LABEL_27;
  }
}

void sub_19C3FC018(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, const void *a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  sub_19C2E5670(&a11);
  sub_19C2E5670(&a10);
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_19C3FC0A8(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  __int128 v5;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_QWORD *)a2 = &unk_1E3D329A8;
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == ((unint64_t)"N5boost9algorithm6detail13first_finderFINSt3__111__wrap_iterIPKcEENS0_8is_equalEEE" & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)((unint64_t)"N5boost9algorithm6detail13first_finderFINSt3__111__wrap_iterIPKcEENS0_8is_equalEEE" & 0x7FFFFFFFFFFFFFFFLL)), !(_DWORD)result))
      {
        *(_QWORD *)a2 = v4;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
  }
  else
  {
    v5 = *(_OWORD *)result;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

uint64_t sub_19C3FC144(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = a2;
  if (a2 != a3)
  {
    v4 = *a1;
    v5 = a1[1];
    if (*a1 == v5)
      return a3;
    while (1)
    {
      v6 = 0;
      do
      {
        if (*(unsigned __int8 *)(v3 + v6) != *(unsigned __int8 *)(v4 + v6))
          break;
        if (++v6 + v3 == a3)
          break;
      }
      while (v6 + v4 != v5);
      if (v4 + v6 == v5)
        break;
      if (++v3 == a3)
        return a3;
    }
  }
  return v3;
}

_QWORD *sub_19C3FC1C0(uint64_t a1)
{
  void **v2;
  void *v3;
  void **v4;
  void *v5;
  void **v6;
  void **v7;
  void *v8;
  _QWORD *v9;
  _QWORD *v10;
  void *v11;

  *(_QWORD *)a1 = &off_1E3D35930;
  v2 = *(void ***)(a1 + 448);
  if (v2)
  {
    do
    {
      v6 = (void **)*v2;
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v6;
    }
    while (v6);
  }
  v3 = *(void **)(a1 + 432);
  *(_QWORD *)(a1 + 432) = 0;
  if (v3)
    operator delete(v3);
  v4 = *(void ***)(a1 + 408);
  if (v4)
  {
    do
    {
      v7 = (void **)*v4;
      if (*((char *)v4 + 39) < 0)
        operator delete(v4[2]);
      operator delete(v4);
      v4 = v7;
    }
    while (v7);
  }
  v5 = *(void **)(a1 + 392);
  *(_QWORD *)(a1 + 392) = 0;
  if (v5)
    operator delete(v5);
  if (*(char *)(a1 + 391) < 0)
  {
    operator delete(*(void **)(a1 + 368));
    if (!*(_BYTE *)(a1 + 360))
      goto LABEL_19;
  }
  else if (!*(_BYTE *)(a1 + 360))
  {
    goto LABEL_19;
  }
  if (*(char *)(a1 + 359) < 0)
    operator delete(*(void **)(a1 + 336));
LABEL_19:
  *(_QWORD *)a1 = off_1E3D34F88;
  v8 = *(void **)(a1 + 296);
  if (v8)
    operator delete(v8);
  v9 = *(_QWORD **)(a1 + 264);
  if (v9)
  {
    do
    {
      v10 = (_QWORD *)*v9;
      operator delete(v9);
      v9 = v10;
    }
    while (v10);
  }
  v11 = *(void **)(a1 + 248);
  *(_QWORD *)(a1 + 248) = 0;
  if (v11)
    operator delete(v11);
  return sub_19C3FC2E8((_QWORD *)a1);
}

_QWORD *sub_19C3FC2E8(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  const void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;

  *a1 = off_1E3D36050;
  sub_19C2A77D4(a1 + 16);
  v2 = (_QWORD *)a1[13];
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)a1[11];
  a1[11] = 0;
  if (v4)
    operator delete(v4);
  v5 = (const void *)a1[7];
  if (v5)
    CFRelease(v5);
  a1[7] = 0;
  v6 = a1[4];
  if (v6)
  {
    v7 = a1[5];
    v8 = (void *)a1[4];
    if (v7 != v6)
    {
      do
      {
        if (*(char *)(v7 - 1) < 0)
          operator delete(*(void **)(v7 - 24));
        v7 -= 24;
      }
      while (v7 != v6);
      v8 = (void *)a1[4];
    }
    a1[5] = v6;
    operator delete(v8);
  }
  v9 = a1[1];
  if (v9)
  {
    v10 = a1[2];
    v11 = (void *)a1[1];
    if (v10 != v9)
    {
      do
      {
        if (*(char *)(v10 - 1) < 0)
          operator delete(*(void **)(v10 - 24));
        v10 -= 24;
      }
      while (v10 != v9);
      v11 = (void *)a1[1];
    }
    a1[2] = v9;
    operator delete(v11);
  }
  return a1;
}

_QWORD *sub_19C3FC3FC(_QWORD *result, CFArrayRef theArray)
{
  uint64_t v3;
  CFIndex v4;
  __int128 v5;
  const __CFString *ValueAtIndex;
  unint64_t v7;
  char *v8;
  int v9;
  void *__p[2];
  uint64_t v11;

  *result = 0;
  result[1] = 0;
  result[2] = 0;
  if (theArray)
  {
    v3 = (uint64_t)result;
    v4 = 0;
    while (1)
    {
      result = (_QWORD *)CFArrayGetCount(theArray);
      if (v4 >= (uint64_t)result)
        break;
      ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(theArray, v4);
      sub_19C29CEF8(ValueAtIndex, __p);
      v7 = *(_QWORD *)(v3 + 8);
      if (v7 < *(_QWORD *)(v3 + 16))
      {
        v5 = *(_OWORD *)__p;
        *(_QWORD *)(v7 + 16) = v11;
        *(_OWORD *)v7 = v5;
        *(_QWORD *)(v3 + 8) = v7 + 24;
        ++v4;
      }
      else
      {
        v8 = sub_19C307C78((void **)v3, (uint64_t)__p);
        v9 = SHIBYTE(v11);
        *(_QWORD *)(v3 + 8) = v8;
        if (v9 < 0)
          operator delete(__p[0]);
        ++v4;
      }
    }
  }
  return result;
}

void sub_19C3FC4B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void **v15;

  if (a15 < 0)
    operator delete(__p);
  sub_19C307B68(v15);
  _Unwind_Resume(a1);
}

uint64_t *sub_19C3FC4E4(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*(char *)(v2 + 95) < 0)
    {
      operator delete(*(void **)(v2 + 72));
      if ((*(char *)(v2 + 71) & 0x80000000) == 0)
      {
LABEL_4:
        if ((*(char *)(v2 + 47) & 0x80000000) == 0)
          goto LABEL_5;
        goto LABEL_10;
      }
    }
    else if ((*(char *)(v2 + 71) & 0x80000000) == 0)
    {
      goto LABEL_4;
    }
    operator delete(*(void **)(v2 + 48));
    if ((*(char *)(v2 + 47) & 0x80000000) == 0)
    {
LABEL_5:
      if ((*(char *)(v2 + 23) & 0x80000000) == 0)
      {
LABEL_6:
        MEMORY[0x1A1AD355C](v2, 0x1012C4003C2D8E3);
        return a1;
      }
LABEL_11:
      operator delete(*(void **)v2);
      goto LABEL_6;
    }
LABEL_10:
    operator delete(*(void **)(v2 + 24));
    if ((*(char *)(v2 + 23) & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_11;
  }
  return a1;
}

char *sub_19C3FC584(char *__dst, __int128 *a2)
{
  __int128 v4;
  int v5;
  char **v6;
  __int128 v7;
  __int128 v8;
  char *v9;
  char *v10;

  if (*((char *)a2 + 23) < 0)
  {
    sub_19C2B5238(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  v5 = *((_DWORD *)a2 + 6);
  *((_QWORD *)__dst + 4) = 0;
  v6 = (char **)(__dst + 32);
  *((_DWORD *)__dst + 6) = v5;
  if (*((char *)a2 + 63) < 0)
  {
    sub_19C2B5238(__dst + 40, *((void **)a2 + 5), *((_QWORD *)a2 + 6));
  }
  else
  {
    v7 = *(__int128 *)((char *)a2 + 40);
    *((_QWORD *)__dst + 7) = *((_QWORD *)a2 + 7);
    *(_OWORD *)(__dst + 40) = v7;
  }
  if (*((char *)a2 + 87) < 0)
  {
    sub_19C2B5238(__dst + 64, *((void **)a2 + 8), *((_QWORD *)a2 + 9));
  }
  else
  {
    v8 = a2[4];
    *((_QWORD *)__dst + 10) = *((_QWORD *)a2 + 10);
    *((_OWORD *)__dst + 4) = v8;
  }
  if (*((_QWORD *)a2 + 4))
  {
    v9 = (char *)operator new();
    sub_19C3FC770(v9, *((__int128 **)a2 + 4));
    v10 = *v6;
    *v6 = v9;
    if (v10)
    {
      if (v10[95] < 0)
      {
        operator delete(*((void **)v10 + 9));
        if ((v10[71] & 0x80000000) == 0)
        {
LABEL_14:
          if ((v10[47] & 0x80000000) == 0)
            goto LABEL_15;
          goto LABEL_20;
        }
      }
      else if ((v10[71] & 0x80000000) == 0)
      {
        goto LABEL_14;
      }
      operator delete(*((void **)v10 + 6));
      if ((v10[47] & 0x80000000) == 0)
      {
LABEL_15:
        if ((v10[23] & 0x80000000) == 0)
        {
LABEL_16:
          MEMORY[0x1A1AD355C](v10, 0x1012C4003C2D8E3);
          return __dst;
        }
LABEL_21:
        operator delete(*(void **)v10);
        goto LABEL_16;
      }
LABEL_20:
      operator delete(*((void **)v10 + 3));
      if ((v10[23] & 0x80000000) == 0)
        goto LABEL_16;
      goto LABEL_21;
    }
  }
  return __dst;
}

void sub_19C3FC6FC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;
  void **v3;

  if (*(char *)(v1 + 63) < 0)
    operator delete(*v3);
  sub_19C3FC4E4(v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(a1);
}

char *sub_19C3FC770(char *__dst, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _BYTE *v7;
  __int128 v8;

  if (*((char *)a2 + 23) < 0)
  {
    sub_19C2B5238(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    sub_19C2B5238(__dst + 24, *((void **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v5 = *(__int128 *)((char *)a2 + 24);
    *((_QWORD *)__dst + 5) = *((_QWORD *)a2 + 5);
    *(_OWORD *)(__dst + 24) = v5;
  }
  if (*((char *)a2 + 71) < 0)
  {
    sub_19C2B5238(__dst + 48, *((void **)a2 + 6), *((_QWORD *)a2 + 7));
  }
  else
  {
    v6 = a2[3];
    *((_QWORD *)__dst + 8) = *((_QWORD *)a2 + 8);
    *((_OWORD *)__dst + 3) = v6;
  }
  v7 = __dst + 72;
  if (*((char *)a2 + 95) < 0)
  {
    sub_19C2B5238(v7, *((void **)a2 + 9), *((_QWORD *)a2 + 10));
  }
  else
  {
    v8 = *(__int128 *)((char *)a2 + 72);
    *((_QWORD *)__dst + 11) = *((_QWORD *)a2 + 11);
    *(_OWORD *)v7 = v8;
  }
  return __dst;
}

void sub_19C3FC850(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;

  if (*(char *)(v1 + 71) < 0)
  {
    operator delete(*v3);
    if ((*(char *)(v1 + 47) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v1 + 23) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((*(char *)(v1 + 47) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v2);
  if ((*(char *)(v1 + 23) & 0x80000000) == 0)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_19C3FC8C4(_QWORD *a1, CFArrayRef theArray, unint64_t a3)
{
  const void *ValueAtIndex;
  const void *v7;

  if (CFArrayGetCount(theArray) <= a3
    || (ValueAtIndex = CFArrayGetValueAtIndex(theArray, a3), (v7 = ValueAtIndex) == 0))
  {
    __cxa_allocate_exception(0x10uLL);
    sub_19C31D944();
  }
  CFRetain(ValueAtIndex);
  return sub_19C297DB4(a1, v7);
}

void sub_19C3FC934()
{
  void *v0;

  __cxa_throw(v0, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
}

void sub_19C3FC94C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19C3FC96C(uint64_t a1)
{
  const void *v2;

  if (*(_BYTE *)(a1 + 8))
  {
    v2 = *(const void **)a1;
    if (*(_QWORD *)a1)
      CFRelease(v2);
  }
  return a1;
}

uint64_t sub_19C3FC9A4(uint64_t a1, uint64_t a2)
{
  CFTypeRef v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE *v7;
  int64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  __int128 v12;
  uint64_t *v13;
  void **v14;
  uint64_t v15;
  const void *v16;

  *(_QWORD *)a1 = 850045863;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  sub_19C3FC584((char *)(a1 + 88), (__int128 *)(a2 + 88));
  v4 = *(CFTypeRef *)(a2 + 176);
  if (v4)
    v4 = CFRetain(v4);
  *(_QWORD *)(a1 + 176) = v4;
  *(_QWORD *)(a1 + 184) = 0;
  *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
  *(_QWORD *)(a1 + 196) = *(_QWORD *)(a2 + 196);
  *(_OWORD *)(a1 + 204) = *(_OWORD *)(a2 + 204);
  *(_OWORD *)(a1 + 220) = *(_OWORD *)(a2 + 220);
  *(_QWORD *)(a1 + 236) = *(_QWORD *)(a2 + 236);
  *(_DWORD *)(a1 + 244) = *(_DWORD *)(a2 + 244);
  v5 = *(_QWORD *)(a2 + 248);
  *(_DWORD *)(a1 + 256) = *(_DWORD *)(a2 + 256);
  *(_QWORD *)(a1 + 248) = v5;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  v7 = *(_BYTE **)(a2 + 264);
  v6 = *(_BYTE **)(a2 + 272);
  v8 = v6 - v7;
  if (v6 != v7)
  {
    if (v8 < 0)
      sub_19C2A18E8();
    v9 = (char *)operator new(v6 - v7);
    *(_QWORD *)(a1 + 264) = v9;
    *(_QWORD *)(a1 + 272) = v9;
    v10 = &v9[4 * (v8 >> 2)];
    *(_QWORD *)(a1 + 280) = v10;
    memcpy(v9, v7, v8);
    *(_QWORD *)(a1 + 272) = v10;
  }
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
  v11 = *(_QWORD *)(a2 + 296);
  *(_DWORD *)(a1 + 304) = *(_DWORD *)(a2 + 304);
  *(_QWORD *)(a1 + 296) = v11;
  *(_DWORD *)(a1 + 308) = *(_DWORD *)(a2 + 308);
  *(_DWORD *)(a1 + 312) = *(_DWORD *)(a2 + 312);
  *(_DWORD *)(a1 + 316) = *(_DWORD *)(a2 + 316);
  *(_DWORD *)(a1 + 320) = *(_DWORD *)(a2 + 320);
  *(_OWORD *)(a1 + 324) = *(_OWORD *)(a2 + 324);
  *(_DWORD *)(a1 + 340) = *(_DWORD *)(a2 + 340);
  *(_BYTE *)(a1 + 344) = *(_BYTE *)(a2 + 344);
  *(_DWORD *)(a1 + 348) = *(_DWORD *)(a2 + 348);
  *(_DWORD *)(a1 + 352) = *(_DWORD *)(a2 + 352);
  *(_QWORD *)(a1 + 356) = *(_QWORD *)(a2 + 356);
  *(_WORD *)(a1 + 364) = *(_WORD *)(a2 + 364);
  *(_OWORD *)(a1 + 368) = *(_OWORD *)(a2 + 368);
  *(_DWORD *)(a1 + 384) = *(_DWORD *)(a2 + 384);
  *(_DWORD *)(a1 + 388) = *(_DWORD *)(a2 + 388);
  *(_QWORD *)(a1 + 392) = *(_QWORD *)(a2 + 392);
  *(_WORD *)(a1 + 400) = *(_WORD *)(a2 + 400);
  *(_QWORD *)(a1 + 408) = 0;
  *(_DWORD *)(a1 + 416) = *(_DWORD *)(a2 + 416);
  *(_DWORD *)(a1 + 420) = *(_DWORD *)(a2 + 420);
  *(_DWORD *)(a1 + 424) = *(_DWORD *)(a2 + 424);
  *(_WORD *)(a1 + 428) = *(_WORD *)(a2 + 428);
  if (*(char *)(a2 + 455) < 0)
  {
    sub_19C2B5238((_BYTE *)(a1 + 432), *(void **)(a2 + 432), *(_QWORD *)(a2 + 440));
  }
  else
  {
    v12 = *(_OWORD *)(a2 + 432);
    *(_QWORD *)(a1 + 448) = *(_QWORD *)(a2 + 448);
    *(_OWORD *)(a1 + 432) = v12;
  }
  *(_DWORD *)(a1 + 456) = *(_DWORD *)(a2 + 456);
  *(_QWORD *)(a1 + 464) = *(_QWORD *)(a2 + 464);
  if (*(_QWORD *)(a2 + 184))
  {
    v13 = (uint64_t *)operator new();
    sub_19C352610(v13, *(__int128 ***)(a2 + 184));
    v14 = *(void ***)(a1 + 184);
    *(_QWORD *)(a1 + 184) = v13;
    if (v14)
      sub_19C2F5DD8(v14);
  }
  v15 = *(_QWORD *)(a2 + 408);
  if (*(_QWORD *)(a1 + 408) != v15)
  {
    CFRetain(*(CFTypeRef *)(a2 + 408));
    v16 = *(const void **)(a1 + 408);
    if (v16)
      CFRelease(v16);
    *(_QWORD *)(a1 + 408) = v15;
  }
  return a1;
}

void sub_19C3FCC14(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  const void *v4;
  void *v5;
  void **v6;
  const void *v7;
  void *v8;

  v4 = *(const void **)(v1 + 408);
  if (v4)
    CFRelease(v4);
  *(_QWORD *)(v1 + 408) = 0;
  v5 = *(void **)(v1 + 264);
  if (v5)
  {
    *(_QWORD *)(v1 + 272) = v5;
    operator delete(v5);
  }
  v6 = *(void ***)(v1 + 184);
  *(_QWORD *)(v1 + 184) = 0;
  if (v6)
    sub_19C2F5DD8(v6);
  v7 = *(const void **)(v1 + 176);
  if (v7)
    CFRelease(v7);
  *(_QWORD *)(v1 + 176) = 0;
  sub_19C2F5EB4(v2);
  v8 = *(void **)(v1 + 64);
  if (v8)
  {
    *(_QWORD *)(v1 + 72) = v8;
    operator delete(v8);
  }
  std::mutex::~mutex((std::mutex *)v1);
  _Unwind_Resume(a1);
}

float sub_19C3FCCE8(uint64_t a1, unsigned int a2, unsigned int a3)
{
  int v4;
  int v5;
  int v6;
  BOOL v7;
  char v8;
  unsigned int v9;
  unsigned int v10;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;

  if (a2 == a3)
    return *(float *)(a1 + 228);
  v4 = *(_DWORD *)(a1 + 348);
  v5 = a2 & 0x3F;
  if (v4 != 8)
    v5 = (a2 >> 6);
  v6 = a3 & 0x3F;
  if (v4 == 8)
  {
    v7 = 0;
  }
  else
  {
    v6 = (a3 >> 6);
    v7 = ((a3 ^ a2) & 0x3F) == 0;
  }
  if (v7)
  {
    v7 = v5 == v6;
    v14 = a1 + 236;
    if (!v7)
      v14 = a1 + 240;
    return *(float *)v14;
  }
  else
  {
    v8 = v4 - 2;
    v9 = a2 >> (v4 - 2);
    v10 = a3 >> v8;
    if (v9 == v10 || v5 == v6)
    {
      v12 = v5 != v6 && v9 == v10;
      v13 = a1 + 236;
      if (v12)
        v13 = a1 + 224;
      return *(float *)v13;
    }
    else
    {
      return *(float *)(a1 + 232);
    }
  }
}

float sub_19C3FCD84(uint64_t a1, unsigned int a2, unsigned int a3)
{
  int v3;
  char v4;
  unsigned int v5;
  float result;
  uint64_t v7;
  BOOL v8;
  int v9;
  int v10;
  unsigned int v11;

  v3 = *(_DWORD *)(a1 + 348);
  v4 = v3 - 2;
  v5 = a3 >> (v3 - 2);
  result = 0.0;
  if (v5 != 1)
  {
    if (a2 == a3)
    {
      v7 = a1 + 228;
    }
    else
    {
      v8 = v3 == 8;
      if (v3 == 8)
        v9 = a2 & 0x3F;
      else
        v9 = (a2 >> 6);
      v10 = a3 & 0x3F;
      if (v8 || (v10 = (a3 >> 6), ((a3 ^ a2) & 0x3F) != 0))
      {
        v11 = a2 >> v4;
        if (v11 == v5 || v9 == v10)
        {
          if (v9 == v10 || v11 != v5)
            v7 = a1 + 236;
          else
            v7 = a1 + 224;
        }
        else
        {
          v7 = a1 + 232;
        }
      }
      else
      {
        v7 = a1 + 236;
        if (v9 != (a3 >> 6))
          v7 = a1 + 240;
      }
    }
    return *(float *)v7;
  }
  return result;
}

float sub_19C3FCE28(uint64_t a1, int a2, int a3)
{
  float result;

  result = 0.0;
  if (a2 == a3)
    return *(float *)(a1 + 228);
  return result;
}

_QWORD *sub_19C3FCE3C(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E3D34DF0;
  v2 = (void *)a1[1];
  if (v2)
    munmap(v2, a1[2]);
  a1[2] = 0;
  return a1;
}

void sub_19C3FCE80(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E3D34DF0;
  v2 = (void *)a1[1];
  if (v2)
    munmap(v2, a1[2]);
  a1[2] = 0;
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C3FCED4(uint64_t a1, unsigned int a2, _WORD *a3)
{
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  int *v8;
  unint64_t v9;
  unint64_t v10;
  int *v11;
  unsigned int v12;
  int *v13;
  int v14;

  v3 = HIWORD(a2);
  v4 = *(_DWORD *)(a1 + 40);
  if (HIWORD(a2) >= v4)
    return 0;
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 32);
  v7 = (int *)(v5 + 4 * *(unsigned int *)(v6 + 4 * v3));
  if (v3 == v4 - 1)
  {
    v8 = (int *)(*(_QWORD *)(a1 + 8) + *(_QWORD *)(a1 + 16));
    if (v7 == v8)
      return 0;
  }
  else
  {
    v8 = (int *)(v5 + 4 * *(unsigned int *)(v6 + 4 * (v3 + 1)));
    if (v7 == v8)
      return 0;
  }
  v9 = v8 - v7;
  do
  {
    v10 = v9 >> 1;
    v11 = &v7[v9 >> 1];
    v12 = *((unsigned __int16 *)v11 + 1);
    v13 = v11 + 1;
    v9 += ~(v9 >> 1);
    if (v12 < (unsigned __int16)a2)
      v7 = v13;
    else
      v9 = v10;
  }
  while (v9);
  if (v7 >= v8)
    return 0;
  v14 = *v7;
  if ((v14 ^ (a2 << 16)) >> 16)
    return 0;
  if (a3)
    *a3 = v14;
  return 1;
}

void sub_19C3FCF88(_QWORD *a1, const __CFURL *a2)
{
  _QWORD v2[35];

  *a1 = &off_1E3D34DF0;
  sub_19C2E15E8(a2, v2);
}

uint64_t sub_19C3FCFC4()
{
  uint64_t v0;
  _QWORD *v1;
  _DWORD *v2;
  uint64_t v3;
  _DWORD *v4;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  void *exception;
  std::string::size_type v10;
  std::string *v11;
  _BYTE *v12;
  char *v13;
  _BYTE *v14;
  char *v15;
  unint64_t v16;
  const void **v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  std::string *v21;
  __int128 v22;
  std::string v23;
  __int128 v24;
  std::string::size_type v25;
  void *v26[2];
  uint64_t v27;
  _QWORD v28[3];
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;

  sub_19C3663C0(v1, (uint64_t)v26);
  if (SHIBYTE(v27) < 0)
    operator delete(v26[0]);
  *(_QWORD *)(v0 + 24) = 0;
  *(_QWORD *)(v0 + 32) = 0;
  *(_DWORD *)(v0 + 40) = 0;
  if (*(_QWORD *)(v0 + 16) <= 0x27uLL)
  {
    sub_19C2B4F08((uint64_t)v26);
    sub_19C2A1B24(&v27, (uint64_t)"(file_size=", 11);
    v6 = (_QWORD *)std::ostream::operator<<();
    sub_19C2A1B24(v6, (uint64_t)", offset=", 9);
    v7 = (_QWORD *)std::ostream::operator<<();
    sub_19C2A1B24(v7, (uint64_t)", object_size=", 14);
    v8 = (_QWORD *)std::ostream::operator<<();
    sub_19C2A1B24(v8, (uint64_t)")", 1);
    exception = __cxa_allocate_exception(0x10uLL);
    if ((v32 & 0x10) != 0)
    {
      v16 = v31;
      if (v31 < v30)
      {
        v31 = v30;
        v16 = v30;
      }
      v17 = (const void **)&v29;
    }
    else
    {
      if ((v32 & 8) == 0)
      {
        v10 = 0;
        *((_BYTE *)&v23.__r_.__value_.__s + 23) = 0;
        v11 = &v23;
        goto LABEL_25;
      }
      v17 = (const void **)v28;
      v16 = v28[2];
    }
    v18 = *v17;
    v10 = v16 - (_QWORD)*v17;
    if (v10 >= 0x7FFFFFFFFFFFFFF8)
      sub_19C2A1A54();
    if (v10 >= 0x17)
    {
      v19 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v10 | 7) != 0x17)
        v19 = v10 | 7;
      v20 = v19 + 1;
      v11 = (std::string *)operator new(v19 + 1);
      v23.__r_.__value_.__l.__size_ = v10;
      v23.__r_.__value_.__r.__words[2] = v20 | 0x8000000000000000;
      v23.__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
    }
    else
    {
      *((_BYTE *)&v23.__r_.__value_.__s + 23) = v16 - *(_BYTE *)v17;
      v11 = &v23;
      if (!v10)
      {
LABEL_25:
        v11->__r_.__value_.__s.__data_[v10] = 0;
        v21 = std::string::insert(&v23, 0, "attempted to read beyond the end of the mapped file ", 0x34uLL);
        v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
        v25 = v21->__r_.__value_.__r.__words[2];
        v24 = v22;
        v21->__r_.__value_.__l.__size_ = 0;
        v21->__r_.__value_.__r.__words[2] = 0;
        v21->__r_.__value_.__r.__words[0] = 0;
        MEMORY[0x1A1AD3160](exception, &v24);
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
      }
    }
    memmove(v11, v18, v10);
    goto LABEL_25;
  }
  v2 = (_DWORD *)*v1;
  if (*(_DWORD *)*v1 != -1036487430)
  {
    v12 = __cxa_allocate_exception(0x20uLL);
    v13 = (char *)operator new(0x20uLL);
    strcpy(v13, "morphology file is invalid");
    *(_QWORD *)v12 = off_1E3D38838;
    sub_19C2B5238(v12 + 8, v13, 0x1AuLL);
    __cxa_throw(v12, (struct type_info *)&unk_1E3D32968, (void (*)(void *))sub_19C3123E4);
  }
  if (v2[1] != 1)
  {
    v14 = __cxa_allocate_exception(0x20uLL);
    v15 = (char *)operator new(0x30uLL);
    strcpy(v15, "morphology file version is not supported");
    *(_QWORD *)v14 = off_1E3D38838;
    sub_19C2B5238(v14 + 8, v15, 0x28uLL);
    __cxa_throw(v14, (struct type_info *)&unk_1E3D32968, (void (*)(void *))sub_19C3123E4);
  }
  v3 = v2[2];
  v4 = v2 + 10;
  *(_DWORD *)(v0 + 40) = v3;
  *(_QWORD *)(v0 + 24) = &v4[v3];
  *(_QWORD *)(v0 + 32) = v4;
  return v0;
}

void sub_19C3FD2C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41)
{
  uint64_t v41;
  void **v42;
  void *v43;
  int v44;
  uint64_t v46;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v44 & 1) == 0)
    {
LABEL_8:
      a22 = *MEMORY[0x1E0DE4F50];
      v46 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
      *(uint64_t *)((char *)&a22 + *(_QWORD *)(a22 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
      a24 = v46;
      a25 = MEMORY[0x1E0DE4FB8] + 16;
      if (a38 < 0)
        operator delete(a33);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x1A1AD34CC](&a41);
      if (*v42)
        munmap(*v42, *(_QWORD *)(v41 + 16));
      *(_QWORD *)(v41 + 16) = 0;
      _Unwind_Resume(a1);
    }
  }
  else if (!v44)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v43);
  goto LABEL_8;
}

void sub_19C3FD3EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19C3FD3E0);
}

void sub_19C3FD40C(_QWORD *a1)
{
  sub_19C36B630(a1);
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C3FD430(uint64_t a1, unsigned int a2, unint64_t a3, unint64_t a4, double *a5, unint64_t *a6)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  const float *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  BOOL v14;
  uint32x4_t v16;
  int8x16_t *v17;
  int8x16_t *v18;
  unint64_t v19;
  int8x16_t v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int *v27;
  double v28;
  double v29;

  v6 = *(_QWORD *)(a1 + 16);
  v7 = v6 - 1;
  v8 = a3 + 4 * a4 + 4 * (1 - v6);
  if (a4 < v6)
  {
    v8 = a3;
    v7 = a4;
  }
  if (v7)
  {
    v9 = (const float *)(a1 + 24);
    v10 = *(_QWORD *)(a1 + 56);
    if (v7 >= 8)
    {
      v11 = 0;
      v12 = v10 + 4 * v7;
      v14 = v10 < a1 + 28 && (unint64_t)v9 < v12;
      if ((v8 >= v12 || v10 >= v8 + 4 * v7) && !v14)
      {
        v11 = v7 & 0xFFFFFFFFFFFFFFF8;
        v16 = (uint32x4_t)vld1q_dup_f32(v9);
        v17 = (int8x16_t *)(v8 + 16);
        v18 = (int8x16_t *)(v10 + 16);
        v19 = v7 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          v20 = vbicq_s8(*v17, (int8x16_t)vcgtq_u32(*(uint32x4_t *)v17, v16));
          v18[-1] = vbicq_s8(v17[-1], (int8x16_t)vcgtq_u32((uint32x4_t)v17[-1], v16));
          *v18 = v20;
          v17 += 2;
          v18 += 2;
          v19 -= 8;
        }
        while (v19);
        if (v7 == v11)
          goto LABEL_25;
      }
    }
    else
    {
      v11 = 0;
    }
    v21 = v7 - v11;
    v22 = 4 * v11;
    v23 = (unsigned int *)(v10 + v22);
    v24 = (unsigned int *)(v8 + v22);
    do
    {
      v26 = *v24++;
      v25 = v26;
      if (v26 > *(_DWORD *)v9)
        v25 = 0;
      *v23++ = v25;
      --v21;
    }
    while (v21);
  }
LABEL_25:
  if (*(_DWORD *)(a1 + 24) >= a2)
  {
    v29 = *(double *)(a1 + 32);
    v27 = *(unsigned int **)(a1 + 56);
    v27[v7] = a2;
    v28 = 0.0;
  }
  else
  {
    v27 = *(unsigned int **)(a1 + 56);
    v27[v7] = 0;
    v28 = -*(double *)(a1 + 40);
    v29 = 0.0;
  }
  *a5 = sub_19C3FE0C0(a1, v27, v7 + 1, a6, 1, v29) + v28;
  return 1;
}

uint64_t sub_19C3FD588(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  const float *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  double v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t *v26;
  int v27;
  int v29;
  uint64_t v30;
  void *v31;
  char *v32;
  char *v33;
  unint64_t v34;
  BOOL v36;
  uint32x4_t v38;
  int8x16_t *v39;
  int8x16_t *v40;
  unint64_t v41;
  int8x16_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD v51[4];
  void *v52[2];
  __int128 v53;
  void *__p[2];
  uint64_t v55;
  uint64_t v56;
  int v57;

  v6 = *(_QWORD *)(a1 + 16);
  if (a3 >= v6)
    v7 = v6 - 1;
  else
    v7 = a3;
  if (a3 >= v6)
    v8 = a2 + 4 * a3 + 4 * (1 - v6);
  else
    v8 = a2;
  if (v7 < a4)
    return 0;
  if (v7)
  {
    v14 = (const float *)(a1 + 24);
    v15 = *(_QWORD *)(a1 + 56);
    if (v7 < 8)
    {
      v16 = 0;
      goto LABEL_12;
    }
    v16 = 0;
    v34 = v15 + 4 * v7;
    v36 = v15 < a1 + 28 && (unint64_t)v14 < v34;
    if (v8 < v34 && v15 < v8 + 4 * v7)
      goto LABEL_12;
    if (v36)
      goto LABEL_12;
    v16 = v7 & 0xFFFFFFFFFFFFFFF8;
    v38 = (uint32x4_t)vld1q_dup_f32(v14);
    v39 = (int8x16_t *)(v8 + 16);
    v40 = (int8x16_t *)(v15 + 16);
    v41 = v7 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v42 = vbicq_s8(*v39, (int8x16_t)vcgtq_u32(*(uint32x4_t *)v39, v38));
      v40[-1] = vbicq_s8(v39[-1], (int8x16_t)vcgtq_u32((uint32x4_t)v39[-1], v38));
      *v40 = v42;
      v39 += 2;
      v40 += 2;
      v41 -= 8;
    }
    while (v41);
    if (v7 != v16)
    {
LABEL_12:
      v17 = v7 - v16;
      v18 = 4 * v16;
      v19 = (unsigned int *)(v15 + v18);
      v20 = (unsigned int *)(v8 + v18);
      do
      {
        v22 = *v20++;
        v21 = v22;
        if (v22 > *(_DWORD *)v14)
          v21 = 0;
        *v19++ = v21;
        --v17;
      }
      while (v17);
    }
  }
  v23 = 0.0;
  if (v7 > a4)
  {
    v24 = 0;
    v25 = v7;
    do
    {
      if (sub_19C3B962C(*(uint64_t ***)(a1 + 80), (unsigned int *)(*(_QWORD *)(a1 + 56) + v24), v25, v51) != 2)
        v23 = *(double *)(**(_QWORD **)(a1 + 96) + 8 * BYTE1(v51[0])) + v23;
      --v25;
      v24 += 4;
    }
    while (v25 > a4);
  }
  if (a4 || a5 >> 31)
  {
    v9 = operator new();
    v31 = (void *)(*(_QWORD *)(a1 + 56) + 4 * v7 - 4 * a4);
    *(_QWORD *)v9 = &off_1E3D373A8;
    *(_QWORD *)(v9 + 8) = a1;
    *(_QWORD *)(v9 + 16) = a6;
    *(double *)(v9 + 24) = v23;
    *(_OWORD *)(v9 + 32) = 0u;
    *(_OWORD *)(v9 + 48) = 0u;
    if (a4)
    {
      if ((a4 & 0x8000000000000000) != 0)
        sub_19C2A18E8();
      v32 = (char *)operator new(4 * a4);
      *(_QWORD *)(v9 + 40) = v32;
      v33 = &v32[4 * a4];
      *(_QWORD *)(v9 + 56) = v33;
      memcpy(v32, v31, 4 * a4);
      *(_QWORD *)(v9 + 48) = v33;
    }
    *(_QWORD *)(v9 + 64) = 0;
    *(_QWORD *)(v9 + 72) = 0;
    *(_QWORD *)(v9 + 80) = 0;
    *(_QWORD *)(v9 + 88) = sub_19C3BAA78(*(uint64_t **)(a1 + 80), (unsigned int *)v31, a4);
    *(_DWORD *)(v9 + 96) = *(_DWORD *)(a1 + 144);
  }
  else
  {
    if (!*(_QWORD *)(a1 + 88))
    {
      v51[0] = &off_1E3D373A8;
      v51[1] = a1;
      v51[2] = a6;
      *(double *)&v51[3] = v23;
      *(_OWORD *)v52 = 0u;
      v53 = 0u;
      *(_OWORD *)__p = 0u;
      v55 = 0;
      v26 = *(uint64_t **)(a1 + 80);
      v27 = *(_DWORD *)(*v26 + 32);
      if (v27 == 5 || v27 == 3)
      {
        v29 = *(_DWORD *)(*v26 + 12) + 1;
        v43 = operator new();
        v30 = *v26;
        *(_QWORD *)v43 = off_1E3D338B0;
        *(_QWORD *)(v43 + 8) = v30;
        *(_OWORD *)(v43 + 16) = 0u;
        *(_OWORD *)(v43 + 32) = 0u;
        *(_DWORD *)(v43 + 48) = v29;
        *(_DWORD *)(v43 + 56) = 0;
        *(_QWORD *)(v43 + 85) = 0;
        *(_QWORD *)(v43 + 72) = 0;
        *(_QWORD *)(v43 + 80) = 0;
        *(_QWORD *)(v43 + 64) = 0;
      }
      else
      {
        v43 = operator new();
        *(_QWORD *)v43 = off_1E3D339B0;
      }
      v56 = v43;
      v57 = *(_DWORD *)(a1 + 144);
      v44 = operator new();
      sub_19C3CBA68(v44, (uint64_t)v51);
      v45 = *(_QWORD *)(a1 + 88);
      *(_QWORD *)(a1 + 88) = v44;
      if (v45)
      {
        v46 = *(void **)(v45 + 24);
        if (v46)
        {
          *(_QWORD *)(v45 + 32) = v46;
          operator delete(v46);
        }
        v47 = *(void **)v45;
        if (*(_QWORD *)v45)
        {
          *(_QWORD *)(v45 + 8) = v47;
          operator delete(v47);
        }
        MEMORY[0x1A1AD355C](v45, 0x30C400D66AB62);
      }
      v48 = v56;
      v51[0] = &off_1E3D373A8;
      v56 = 0;
      if (v48)
        (*(void (**)(uint64_t))(*(_QWORD *)v48 + 24))(v48);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      if (v52[1])
      {
        *(void **)&v53 = v52[1];
        operator delete(v52[1]);
      }
    }
    v9 = operator new();
    v49 = *(_QWORD *)(a1 + 88);
    *(_QWORD *)v9 = &off_1E3D36D68;
    *(_QWORD *)(v9 + 8) = v49;
    *(_QWORD *)(v9 + 16) = -1;
  }
  return v9;
}

void sub_19C3FD988(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  MEMORY[0x1A1AD355C](v2, 0x30C400D66AB62);
  sub_19C3FDA0C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19C3FD9BC(_Unwind_Exception *a1)
{
  void **v1;
  uint64_t v2;
  void **v3;
  void *v5;
  void *v6;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v2 + 72) = v5;
    operator delete(v5);
  }
  v6 = *v1;
  if (*v1)
  {
    *(_QWORD *)(v2 + 48) = v6;
    operator delete(v6);
  }
  MEMORY[0x1A1AD355C](v2, 0x10B1C4025CEEBF4);
  _Unwind_Resume(a1);
}

_QWORD *sub_19C3FDA0C(_QWORD *a1)
{
  uint64_t v2;
  void *v3;
  void *v4;

  *a1 = &off_1E3D373A8;
  v2 = a1[11];
  a1[11] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  v3 = (void *)a1[8];
  if (v3)
  {
    a1[9] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[5];
  if (v4)
  {
    a1[6] = v4;
    operator delete(v4);
  }
  return a1;
}

void sub_19C3FDA70(_QWORD *a1)
{
  uint64_t v2;
  void *v3;
  void *v4;

  *a1 = &off_1E3D373A8;
  v2 = a1[11];
  a1[11] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  v3 = (void *)a1[8];
  if (v3)
  {
    a1[9] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[5];
  if (v4)
  {
    a1[6] = v4;
    operator delete(v4);
  }
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C3FDAE4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  unint64_t v8;
  char *v9;
  _BYTE *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int *v15;
  char *v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t result;
  unsigned int v21;
  double v22;
  uint64_t v23;
  unint64_t v24;
  double *v25;
  double *v26;
  double *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  _DWORD *v34;
  char *v35;
  unint64_t v36;
  __int128 v37;
  unint64_t v38;
  __int128 v39;
  unsigned __int8 v40;
  _QWORD v41[3];

  if ((unint64_t)(*(_QWORD *)(a1 + 32) - 1) > 2)
    goto LABEL_22;
  if (*(_QWORD *)(a1 + 16) < 2uLL)
    goto LABEL_22;
  v2 = *(_QWORD *)(a1 + 64);
  v3 = *(_QWORD *)(a1 + 72);
  v4 = (v3 - v2) >> 4;
  v5 = *(_QWORD *)(a1 + 8);
  if (v4 >= *(_QWORD *)(v5 + 16) - 1)
    goto LABEL_22;
  v6 = *(_QWORD *)(a1 + 40);
  v7 = *(_BYTE **)(a1 + 48);
  v8 = (unint64_t)&v7[-v6];
  v38 = (uint64_t)&v7[-v6] >> 2;
  if (v38 <= v4)
    goto LABEL_22;
  memset(v41, 0, sizeof(v41));
  if ((v8 & 0x8000000000000000) != 0)
    sub_19C2A18E8();
  v9 = (char *)operator new((size_t)&v7[-v6]);
  bzero(v9, (size_t)&v7[-v6]);
  v10 = (_BYTE *)(v6 + 4 * v4);
  if (v7 != v10)
    memmove(v9, v10, v7 - v10);
  if (v3 != v2)
  {
    if (v4 <= 1)
      v11 = 1;
    else
      v11 = (v3 - v2) >> 4;
    if (v11 > 0xF
      && ((unint64_t)&v9[v8 - 4 * v4] >= v2 + 16 * v11 - 4
       || v2 + 8 >= (unint64_t)&v9[v8 + 4 * v11 - 4 * v4]))
    {
      v12 = v11 & 0xFFFFFFFFFFFFFFFCLL;
      v34 = (_DWORD *)(v2 + 40);
      v35 = &v9[4 * v38 + -4 * v4];
      v36 = v11 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        LODWORD(v37) = *(v34 - 8);
        DWORD1(v37) = *(v34 - 4);
        DWORD2(v37) = *v34;
        HIDWORD(v37) = v34[4];
        *(_OWORD *)v35 = v37;
        v35 += 16;
        v34 += 16;
        v36 -= 4;
      }
      while (v36);
      if (v11 == v12)
        goto LABEL_18;
      v13 = v38 - v4 + v12;
    }
    else
    {
      v12 = 0;
      v13 = v38 - v4;
    }
    v14 = v11 - v12;
    v15 = (int *)(v2 + 16 * v12 + 8);
    v16 = &v9[4 * v13];
    do
    {
      v17 = *v15;
      v15 += 4;
      *(_DWORD *)v16 = v17;
      v16 += 4;
      --v14;
    }
    while (v14);
  }
LABEL_18:
  v18 = sub_19C3BAA78(*(uint64_t **)(v5 + 80), (unsigned int *)v9, v8 >> 2);
  if ((**(unsigned int (***)(uint64_t))v18)(v18))
  {
    v40 = 0;
    v19 = (*(uint64_t (**)(uint64_t, unsigned __int8 *))(*(_QWORD *)v18 + 8))(v18, &v40);
    if (*(double *)(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 104) + 8 * v40) > -0.75)
    {
      *(_QWORD *)&v39 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 104) + 8 * v40);
      *((_QWORD *)&v39 + 1) = v19;
      sub_19C3FDFC4((char **)(a1 + 64), &v39);
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 24))(v18);
      operator delete(v9);
      return 1;
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v18 + 24))(v18);
  operator delete(v9);
LABEL_22:
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a1 + 64);
  result = (***(uint64_t (****)(_QWORD))(a1 + 88))(*(_QWORD *)(a1 + 88));
  if (!(_DWORD)result)
    return result;
  LOBYTE(v41[0]) = 0;
  v21 = (*(uint64_t (**)(_QWORD, _QWORD *))(**(_QWORD **)(a1 + 88) + 8))(*(_QWORD *)(a1 + 88), v41);
  v22 = *(double *)(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 104) + 8 * LOBYTE(v41[0])) + *(double *)(a1 + 24);
  v23 = v21;
  v25 = *(double **)(a1 + 72);
  v24 = *(_QWORD *)(a1 + 80);
  if ((unint64_t)v25 >= v24)
  {
    v27 = *(double **)(a1 + 64);
    v28 = ((char *)v25 - (char *)v27) >> 4;
    v29 = v28 + 1;
    if ((unint64_t)(v28 + 1) >> 60)
      sub_19C2A18E8();
    v30 = v24 - (_QWORD)v27;
    if (v30 >> 3 > v29)
      v29 = v30 >> 3;
    if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF0)
      v31 = 0xFFFFFFFFFFFFFFFLL;
    else
      v31 = v29;
    if (v31)
    {
      if (v31 >> 60)
        sub_19C2A143C();
      v32 = (char *)operator new(16 * v31);
    }
    else
    {
      v32 = 0;
    }
    v33 = &v32[16 * v28];
    *(double *)v33 = v22;
    *((_QWORD *)v33 + 1) = v23;
    v26 = (double *)(v33 + 16);
    if (v25 != v27)
    {
      do
      {
        *((_OWORD *)v33 - 1) = *((_OWORD *)v25 - 1);
        v33 -= 16;
        v25 -= 2;
      }
      while (v25 != v27);
      v25 = *(double **)(a1 + 64);
    }
    *(_QWORD *)(a1 + 64) = v33;
    *(_QWORD *)(a1 + 72) = v26;
    *(_QWORD *)(a1 + 80) = &v32[16 * v31];
    if (v25)
      operator delete(v25);
  }
  else
  {
    *v25 = v22;
    *((_QWORD *)v25 + 1) = v21;
    v26 = v25 + 2;
  }
  *(_QWORD *)(a1 + 72) = v26;
  ++*(_QWORD *)(a1 + 32);
  return 1;
}

void sub_19C3FDE70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  void *v15;

  operator delete(v15);
  _Unwind_Resume(a1);
}

unint64_t sub_19C3FDEA0(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  double *v7;
  double v8;
  int v9;
  unint64_t v10;
  double *v11;
  double v12;
  unint64_t v13;
  double v14;
  double v15;
  double v16;
  unint64_t v17;
  double *v18;
  double v19;

  v3 = *(_QWORD *)(a1 + 64);
  v4 = *(_QWORD *)(a1 + 72) - v3;
  v5 = v4 >> 4;
  if (!v4)
  {
    v8 = 0.0;
    goto LABEL_17;
  }
  if (v5 <= 1)
    v6 = 1;
  else
    v6 = v4 >> 4;
  if (a2)
  {
    v7 = (double *)(v3 + 8);
    v8 = 0.0;
    do
    {
      v8 = *(v7 - 1) + v8;
      v9 = *(_DWORD *)v7;
      v7 += 2;
      *a2++ = v9;
      --v6;
    }
    while (v6);
    goto LABEL_17;
  }
  if (v6 < 2)
  {
    v10 = 0;
    v8 = 0.0;
LABEL_15:
    v17 = v6 - v10;
    v18 = (double *)(v3 + 16 * v10);
    do
    {
      v19 = *v18;
      v18 += 2;
      v8 = v19 + v8;
      --v17;
    }
    while (v17);
    goto LABEL_17;
  }
  v10 = v6 & 0xFFFFFFFFFFFFFFFELL;
  v11 = (double *)(v3 + 16);
  v12 = 0.0;
  v13 = v6 & 0xFFFFFFFFFFFFFFFELL;
  v14 = 0.0;
  do
  {
    v15 = *(v11 - 2);
    v16 = *v11;
    v11 += 4;
    v12 = v15 + v12;
    v14 = v16 + v14;
    v13 -= 2;
  }
  while (v13);
  v8 = v14 + v12;
  if (v6 != v10)
    goto LABEL_15;
LABEL_17:
  if (a3)
  {
    *(_QWORD *)(a3 + 8) = 0xFFEFFFFFFFFFFFFFLL;
    *(_QWORD *)(a3 + 16) = 0;
    *(_WORD *)(a3 + 24) = 0;
    *(_BYTE *)(a3 + 32) = 1;
    *(_OWORD *)(a3 + 40) = xmmword_19C46DE10;
    *(_DWORD *)(a3 + 56) = 0;
    *(_OWORD *)(a3 + 64) = xmmword_19C46DE10;
    *(_QWORD *)(a3 + 88) = 0;
    *(_QWORD *)(a3 + 96) = 0;
    *(_QWORD *)(a3 + 80) = 0xFFEFFFFFFFFFFFFFLL;
    *(double *)a3 = v8;
    *(_DWORD *)(a3 + 116) = *(_DWORD *)(a1 + 96);
    *(_BYTE *)(a3 + 112) = 0;
    *(_QWORD *)(a3 + 104) = (*(uint64_t (**)(_QWORD, _DWORD *))(**(_QWORD **)(a1 + 88) + 32))(*(_QWORD *)(a1 + 88), a2);
  }
  return v5;
}

void sub_19C3FDFC4(char **a1, _OWORD *a2)
{
  unint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;

  v5 = a1[1];
  v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v4)
  {
    v7 = *a1;
    v8 = (v5 - *a1) >> 4;
    v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 60)
      sub_19C2A18E8();
    v10 = v4 - (_QWORD)v7;
    if (v10 >> 3 > v9)
      v9 = v10 >> 3;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0)
      v11 = 0xFFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 >> 60)
        sub_19C2A143C();
      v12 = (char *)operator new(16 * v11);
    }
    else
    {
      v12 = 0;
    }
    v13 = &v12[16 * v8];
    *(_OWORD *)v13 = *a2;
    v6 = v13 + 16;
    if (v5 != v7)
    {
      do
      {
        *((_OWORD *)v13 - 1) = *((_OWORD *)v5 - 1);
        v13 -= 16;
        v5 -= 16;
      }
      while (v5 != v7);
      v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v6;
    a1[2] = &v12[16 * v11];
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_OWORD *)v5 = *a2;
    v6 = v5 + 16;
  }
  a1[1] = v6;
}

double sub_19C3FE0C0(uint64_t a1, unsigned int *a2, unint64_t a3, unint64_t *a4, uint64_t a5, double a6)
{
  double v8;
  uint64_t **v9;
  int v14;
  double v15;
  double v16;
  _BYTE v18[2];

  v8 = *(double *)(a1 + 128) - a6;
  v9 = *(uint64_t ***)(a1 + 80);
  if (v9)
  {
    v14 = sub_19C3B962C(v9, a2, a3, v18);
    if (v14 == 1)
    {
      if (a3 >= 2)
      {
        v16 = 0.0;
        if ((_DWORD)a5)
          v16 = *(double *)(**(_QWORD **)(a1 + 96) + 8 * v18[1]);
        return sub_19C3FE0C0(a1, a2 + 1, a3 - 1, a4, a5, a6) + v16;
      }
    }
    else if (v14)
    {
      if (a3 >= 2)
        return sub_19C3FE0C0(a1, a2 + 1, a3 - 1, a4, a5, a6);
    }
    else
    {
      v8 = *(double *)(**(_QWORD **)(a1 + 104) + 8 * v18[0]);
      if (a3 == 1)
      {
        v15 = 0.0;
        if (!*a2)
          v15 = a6;
        v8 = v8 - v15;
      }
      if (a4)
        *a4 = a3;
    }
  }
  return v8;
}

void sub_19C3FE1DC(uint64_t a1, CFDictionaryRef *a2, uint64_t a3)
{
  const __CFNumber *Value;
  double v7;
  const __CFNumber *v8;
  const __CFURL *v9;
  _QWORD valuePtr[2];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  Value = (const __CFNumber *)CFDictionaryGetValue(*a2, CFSTR("Weight"));
  if (Value)
  {
    valuePtr[0] = 0;
    CFNumberGetValue(Value, kCFNumberDoubleType, valuePtr);
    v7 = *(double *)valuePtr;
  }
  else
  {
    v7 = 1.0;
  }
  *(double *)(a1 + 8) = v7;
  *(_QWORD *)a1 = &off_1E3D34E18;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(double *)(a1 + 40) = *(float *)(a3 + 296);
  LODWORD(valuePtr[0]) = 0;
  v8 = (const __CFNumber *)CFDictionaryGetValue(*a2, CFSTR("Type"));
  CFNumberGetValue(v8, kCFNumberIntType, valuePtr);
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 48) = valuePtr[0];
  *(_OWORD *)(a1 + 88) = 0u;
  *(_QWORD *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 72) = 0u;
  v9 = (const __CFURL *)CFDictionaryGetValue(*a2, CFSTR("URL"));
  sub_19C2E15E8(v9, valuePtr);
}

void sub_19C3FE904(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t *a11, uint64_t **a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  uint64_t v34;
  void **v35;
  int v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  void *v43;

  if (*(char *)(v41 - 121) < 0)
    operator delete(*(void **)(v41 - 144));
  if (a28 < 0)
  {
    operator delete(__p);
    if ((v36 & 1) == 0)
    {
LABEL_8:
      sub_19C2B5034((uint64_t)&a29);
      sub_19C36678C(v39);
      sub_19C3FEA68(v38);
      sub_19C3FEA68(v37);
      sub_19C3FEABC(a11);
      sub_19C3FEB20(a12);
      v43 = *v35;
      if (!*v35)
        _Unwind_Resume(a1);
      *(_QWORD *)(v34 + 64) = v43;
      operator delete(v43);
      _Unwind_Resume(a1);
    }
  }
  else if (!v36)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v40);
  goto LABEL_8;
}

uint64_t *sub_19C3FEA68(uint64_t *a1)
{
  uint64_t v2;
  void *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(void **)v2;
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)(v2 + 8) = v3;
      operator delete(v3);
    }
    MEMORY[0x1A1AD355C](v2, 0x1080C409A65DFB4);
  }
  return a1;
}

uint64_t *sub_19C3FEABC(uint64_t *a1)
{
  uint64_t v2;
  void *v3;
  void *v4;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(void **)(v2 + 24);
    if (v3)
    {
      *(_QWORD *)(v2 + 32) = v3;
      operator delete(v3);
    }
    v4 = *(void **)v2;
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)(v2 + 8) = v4;
      operator delete(v4);
    }
    MEMORY[0x1A1AD355C](v2, 0x30C400D66AB62);
  }
  return a1;
}

uint64_t **sub_19C3FEB20(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *v2;
    if (*v2)
    {
      v4 = *(_QWORD *)(v3 + 24);
      if (v4)
      {
        sub_19C3B4094(v4 + 8);
        MEMORY[0x1A1AD355C](v4, 0x1020C403F824CD1);
        if (*(_QWORD *)v3)
          free(*(void **)v3);
      }
      MEMORY[0x1A1AD355C](v3, 0x1030C40FC63861FLL);
    }
    MEMORY[0x1A1AD355C](v2, 0x20C4093837F09);
  }
  return a1;
}

double sub_19C3FEBC0(uint64_t a1, unsigned int *a2, unint64_t *a3, uint64_t a4, unsigned int *a5, uint64_t a6, uint64_t a7, int a8, double a9)
{
  unint64_t v10;
  unsigned int *v16;
  unint64_t v18;
  _BOOL4 v19;
  char v20;
  unsigned int *v21;
  _QWORD *v22;
  uint64_t v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  unsigned int v31;
  double v32;
  double v33;
  _BOOL4 v35;
  unsigned int v36;
  uint64_t v37;

  if (!a4)
    return 1.0;
  v10 = *a3;
  if (a4 != 1 && v10 > 1)
    a8 = 1;
  if (!v10)
    return 0.0;
  v16 = a2;
  v18 = a6 + 1;
  v37 = a4 - 1;
  v19 = a4 == 1;
  if (a4 == 1)
    v20 = 1;
  else
    v20 = a8;
  v21 = &a2[v10];
  v22 = a3 + 1;
  if (!a7)
    v19 = 0;
  v35 = v19;
  if ((v20 & 1) != 0)
  {
    v36 = a8;
    v23 = 0;
    v24 = 0.0;
    v25 = 0.0;
    do
    {
      a5[a6] = v16[v23];
      v26 = sub_19C3FE0C0(a1, a5, v18, 0, 1, a9);
      v27 = __exp10(v26);
      v28 = sub_19C3FEBC0(a1, v21, v22, v37, a5, v18, a7, v36, a9) * v27;
      if (a4 == 1)
      {
        v25 = 1.0;
        if (v35)
          v28 = *(double *)(a7 + 8 * v23) * v28;
      }
      else
      {
        v25 = v25 + v29 * v27;
      }
      v24 = v28 + v24;
      ++v23;
    }
    while (v10 != v23);
  }
  else
  {
    v24 = 0.0;
    v30 = 0.0;
    do
    {
      v31 = *v16++;
      a5[a6] = v31;
      v32 = sub_19C3FEBC0(a1, v21, v22, v37, a5, v18, a7, 0, a9);
      v30 = v33 + v30;
      v24 = v32 + v24;
      --v10;
    }
    while (v10);
  }
  return v24;
}

void sub_19C3FED98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_19C318EA4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19C3FEDF4(uint64_t a1)
{
  sub_19C400E8C(a1);
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C3FEE18(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 328);
  if (result != *(_QWORD *)(a1 + 200))
    __assert_rtn("outputSize", "CoreLMInferenceEngine.cpp", 232, "m_coreOutputSize == MontrealInferenceEngine::outputSize()");
  return result;
}

uint64_t sub_19C3FEE5C(uint64_t a1)
{
  uint64_t result;

  result = sub_19C29D56C((uint64_t *)(a1 + 224));
  if ((_DWORD)result)
    return sub_19C29D56C((uint64_t *)(a1 + 16));
  return result;
}

uint64_t sub_19C3FEE94(uint64_t a1)
{
  uint64_t result;

  result = sub_19C353EAC((uint64_t *)(a1 + 224));
  if ((_DWORD)result)
    return sub_19C353EAC((uint64_t *)(a1 + 16));
  return result;
}

void sub_19C3FEECC(uint64_t a1)
{
  sub_19C40C170((uint64_t *)(a1 + 16));
  sub_19C40C170((uint64_t *)(a1 + 224));
}

void sub_19C3FEEF4(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  _BYTE *v6;
  _BYTE *v7;
  int64_t v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  int64x2_t v27;
  uint64_t *v28;
  int8x16_t v29;
  unint64_t v30;
  int8x16_t v31;
  int64x2_t v32;
  int64x2_t v33;
  int64x2_t v34;
  int64x2_t v35;
  int64x2_t v36;
  int8x16_t v37;
  int8x16_t v38;
  int8x16_t v39;
  unint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  unint64_t v44;
  _BYTE *v45;
  _BYTE *v46;
  int64_t v47;
  char *v48;
  uint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t *v52;
  uint64_t *v53;
  unint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  _QWORD *v57;
  char *v58;
  unint64_t *v59;
  char *v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  _DWORD *v64;
  _DWORD *v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t *v73;
  NSObject *v74;
  char *v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  _DWORD *v80;
  _DWORD *v81;
  unint64_t *v82;
  unint64_t v83;
  void *v84;
  unint64_t *v85;
  unint64_t *v86;
  unint64_t v87;
  unint64_t *v88;
  unint64_t v89;
  unint64_t *v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _DWORD *v99;
  float *v100;
  unsigned int *v101;
  uint64_t v102;
  float *v103;
  unsigned int v104;
  uint64_t v105;
  BOOL v106;
  uint64_t v107;
  unint64_t v108;
  float *v109;
  uint32x4_t *v110;
  unint64_t v111;
  int64x2_t v112;
  int64x2_t v113;
  __int128 v114;
  float32x4_t v115;
  float32x4_t v116;
  float *v117;
  uint64_t v118;
  _OWORD *v119;
  unint64_t *v120;
  uint64_t v121;
  __int128 v122;
  char *v123;
  uint64_t i;
  size_t v125;
  char *v126;
  uint64_t v127;
  const void *v128;
  _QWORD *v129;
  const void *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t *v135;
  uint64_t v136;
  char *v137;
  char *v138;
  char *v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  unint64_t v145;
  unint64_t v146;
  _BYTE *v147;
  char *v148;
  unint64_t v149;
  char *v150;
  int v151;
  uint64_t v152;
  _OWORD *v153;
  char *v154;
  uint64_t v155;
  __int128 v156;
  _QWORD *v157;
  void *v158;
  BOOL v159;
  int64_t v160;
  char *v161;
  char *v162;
  char *v163;
  unint64_t v164;
  unint64_t v165;
  int64x2_t v166;
  int64x2_t v167;
  unint64_t v169;
  unint64_t v170;
  uint64_t *v171;
  unint64_t v172;
  uint64_t v173;
  _QWORD *v174;
  _QWORD *v175;
  uint64_t v176;
  uint64_t v177;
  char *__p;
  char *__pa;
  _QWORD *__pb;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t v185;
  _QWORD *v186;
  _QWORD *v187;
  uint64_t v188;
  unint64_t *v189;
  _DWORD *v190;
  _DWORD *v191;
  _DWORD *v192;
  void *v193[2];
  char v194;
  unint64_t v195;
  uint8_t buf[24];
  unint64_t v197;
  uint64_t v198;
  float32x4x3_t v199;

  v198 = *MEMORY[0x1E0C80C00];
  v7 = *(_BYTE **)a3;
  v6 = *(_BYTE **)(a3 + 8);
  v191 = 0;
  v192 = 0;
  v190 = 0;
  v8 = v6 - v7;
  if (v6 == v7)
  {
    v9 = 0;
  }
  else
  {
    if (v8 < 0)
      sub_19C2A18E8();
    v9 = operator new(v6 - v7);
    v190 = v9;
    v192 = &v9[v8 >> 2];
    memmove(v9, v7, v8);
    v191 = v192;
    if (*v9 == 1)
      goto LABEL_7;
  }
  sub_19C40002C((void **)&v190, v9, byte_19C477EC8);
  if (*v190 != 1)
    __assert_rtn("conditionalProbability", "CoreLMInferenceEngine.cpp", 177, "workingContext[0] == kMontrealTokenIDBeginningOfSentence");
LABEL_7:
  v11 = *a2;
  v10 = a2[1];
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  v12 = v10 - v11;
  v170 = 0xAAAAAAAAAAAAAAABLL * (v12 >> 3);
  if (!v12)
  {
    v164 = 0;
    goto LABEL_182;
  }
  v171 = a1 + 28;
  v172 = 0;
  v167 = vdupq_n_s64(4uLL);
  v166 = vdupq_n_s64(8uLL);
  v174 = a4;
  v186 = a1;
  do
  {
    if (v191 == v190)
      __assert_rtn("_bestConfigurationMatch", "CoreLMInferenceEngine.cpp", 91, "contextLength > 0");
    v13 = v170 - v172;
    v14 = (unint64_t *)a1[45];
    v15 = (unint64_t *)a1[46];
    if (v15 != v14)
    {
      v16 = v15 - v14;
      do
      {
        v17 = v16 >> 1;
        v18 = &v14[v16 >> 1];
        v20 = *v18;
        v19 = v18 + 1;
        v16 += ~(v16 >> 1);
        if (v20 < v13)
          v14 = v19;
        else
          v16 = v17;
      }
      while (v16);
    }
    v21 = *a2;
    if (v14 == v15)
      v14 = v15 - 1;
    v22 = *v14;
    if (v13 >= *v14)
      v23 = *v14;
    else
      v23 = v170 - v172;
    if (!v23)
    {
      v26 = 0;
      goto LABEL_33;
    }
    v24 = v191 - v190;
    if (v23 > 3)
    {
      v27 = vdupq_n_s64(v24);
      v25 = v23 & 0xFFFFFFFFFFFFFFFCLL;
      v28 = (uint64_t *)(v21 + 24 * v172 + 48);
      v29 = 0uLL;
      v30 = v23 & 0xFFFFFFFFFFFFFFFCLL;
      v31 = 0uLL;
      do
      {
        v32.i64[0] = *(v28 - 5);
        v32.i64[1] = *(v28 - 2);
        v34.i64[0] = *v28;
        v33.i64[0] = v28[1];
        v33.i64[1] = v28[4];
        v35.i64[0] = *(v28 - 6);
        v35.i64[1] = *(v28 - 3);
        v34.i64[1] = v28[3];
        v36 = vsubq_s64(v33, v34);
        v37 = (int8x16_t)vsraq_n_s64(v27, vsubq_s64(v32, v35), 2uLL);
        v38 = (int8x16_t)vsraq_n_s64(v27, v36, 2uLL);
        v29 = vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v29, (uint64x2_t)v37), v29, v37);
        v31 = vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v31, (uint64x2_t)v38), v31, v38);
        v28 += 12;
        v30 -= 4;
      }
      while (v30);
      v39 = vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v29, (uint64x2_t)v31), v29, v31);
      v40 = vextq_s8(v39, v39, 8uLL).u64[0];
      v26 = (unint64_t)vbsl_s8((int8x8_t)vcgtd_u64(v39.u64[0], v40), *(int8x8_t *)v39.i8, (int8x8_t)v40);
      if (v23 == v25)
        goto LABEL_33;
    }
    else
    {
      v25 = 0;
      v26 = 0;
    }
    v41 = v23 - v25;
    v42 = (_QWORD *)(v21 + 24 * v25 + 24 * v172 + 8);
    do
    {
      if (v26 <= v24 + ((uint64_t)(*v42 - *(v42 - 1)) >> 2))
        v26 = v24 + ((uint64_t)(*v42 - *(v42 - 1)) >> 2);
      v42 += 3;
      --v41;
    }
    while (v41);
LABEL_33:
    v43 = (_QWORD *)a1[43];
    if (!v43)
LABEL_196:
      sub_19C2B41E0("map::at:  key not found");
    while (1)
    {
      while (1)
      {
        v44 = v43[4];
        if (v22 >= v44)
          break;
        v43 = (_QWORD *)*v43;
        if (!v43)
          goto LABEL_196;
      }
      if (v44 >= v22)
        break;
      v43 = (_QWORD *)v43[1];
      if (!v43)
        goto LABEL_196;
    }
    memset(buf, 0, sizeof(buf));
    v46 = (_BYTE *)v43[5];
    v45 = (_BYTE *)v43[6];
    v47 = v45 - v46;
    if (v45 == v46)
    {
      v56 = MEMORY[0xFFFFFFFFFFFFFFF8];
    }
    else
    {
      if (v47 < 0)
        sub_19C2A18E8();
      v48 = (char *)operator new(v45 - v46);
      memcpy(v48, v46, v47);
      v49 = (uint64_t *)v48;
      v50 = v47 >> 3;
      do
      {
        v51 = v50 >> 1;
        v52 = &v49[v50 >> 1];
        v54 = *v52;
        v53 = v52 + 1;
        v50 += ~(v50 >> 1);
        if (v54 < v26)
          v49 = v53;
        else
          v50 = v51;
      }
      while (v50);
      v55 = (uint64_t *)&v48[8 * (v47 >> 3)];
      if (v49 == v55)
        v49 = v55 - 1;
      v56 = *v49;
      operator delete(v48);
      v21 = *a2;
      a1 = v186;
    }
    v184 = v21 + 24 * v172;
    v189 = 0;
    v169 = v22 * v56;
    bzero((void *)a1[52], 12 * v22 * v56);
    if (v22 + v172 <= v170)
      v57 = (_QWORD *)v22;
    else
      v57 = (_QWORD *)(v170 - v172);
    v181 = v56;
    v185 = (unint64_t)v57;
    if (v57)
    {
      v165 = v22;
      v58 = 0;
      v59 = 0;
      v60 = 0;
      v61 = 0;
      v62 = 0;
      v63 = 3 * v56;
      v65 = v190;
      v64 = v191;
      v66 = 12 * v56;
      v67 = 60;
      v182 = 12 * v56;
      v173 = 3 * v56;
      while (1)
      {
        v68 = (_QWORD *)(v184 + 24 * v62);
        v69 = v68 + 1;
        v70 = v56 - ((uint64_t)(v68[1] - *v68) >> 2);
        v71 = v64 - v65;
        v72 = v71 - v70;
        v187 = v68 + 1;
        if (v71 > v70)
        {
          __p = v60;
          v73 = v61;
          if (v72 < v71)
          {
            do
            {
              if (((*(uint64_t (**)(_QWORD, _DWORD **, unint64_t))(*(_QWORD *)a1[26] + 136))(a1[26], &v190, v72 - 1) & 1) != 0)break;
              ++v72;
            }
            while (v72 < v191 - v190);
          }
          if (qword_1EE41C548 != -1)
            dispatch_once(&qword_1EE41C548, &unk_1E3D3C550);
          v74 = qword_1EE41C540;
          if (os_log_type_enabled((os_log_t)qword_1EE41C540, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 134218496;
            *(_QWORD *)&buf[4] = v191 - v190 - v72;
            *(_WORD *)&buf[12] = 2048;
            *(_QWORD *)&buf[14] = v191 - v190;
            *(_WORD *)&buf[22] = 2048;
            v197 = v72;
            _os_log_impl(&dword_19C291000, v74, OS_LOG_TYPE_INFO, "limiting forward passes to %ld, with contextLength=%zu and priorContextLength=%zu", buf, 0x20u);
          }
          v65 = v190;
          v64 = v191;
          v71 = v191 - v190 - v72;
          v61 = v73;
          v68 = (_QWORD *)(v184 + 24 * v62);
          v69 = v187;
          v63 = v173;
          v60 = __p;
          v66 = v182;
        }
        if (v61 < (unint64_t *)v60)
        {
          *v61++ = v71;
          goto LABEL_86;
        }
        v176 = v67;
        __pa = v58;
        v75 = (char *)((char *)v61 - (char *)v59);
        v76 = v61 - v59;
        v77 = v76 + 1;
        if ((unint64_t)(v76 + 1) >> 61)
          sub_19C2A18E8();
        v78 = v63;
        if ((v60 - (char *)v59) >> 2 > v77)
          v77 = (v60 - (char *)v59) >> 2;
        if ((unint64_t)(v60 - (char *)v59) >= 0x7FFFFFFFFFFFFFF8)
          v79 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v79 = v77;
        v175 = v68;
        if (v79)
        {
          if (v79 >> 61)
            sub_19C2A143C();
          v80 = v65;
          v81 = v64;
          v82 = v61;
          v83 = v79;
          v84 = operator new(8 * v79);
          v61 = v82;
          v64 = v81;
          v65 = v80;
          v79 = v83;
        }
        else
        {
          v84 = 0;
        }
        v85 = (unint64_t *)((char *)v84 + 8 * v76);
        *v85 = v71;
        v86 = v85 + 1;
        if (v61 == v59)
        {
          a1 = v186;
          v69 = v187;
          v63 = v78;
        }
        else
        {
          v87 = (char *)(v61 - 1) - (char *)v59;
          if (v87 < 0x168
            || &v75[(_QWORD)v84 - 8 - (v87 & 0xFFFFFFFFFFFFFFF8)] > &v75[(_QWORD)v84 - 8]
            || (unint64_t *)((char *)v61 - (v87 & 0xFFFFFFFFFFFFFFF8) - 8) > v61 - 1
            || (unint64_t)((char *)v61 - &v75[(_QWORD)v84]) < 0x20)
          {
            v88 = v61;
            a1 = v186;
            v69 = v187;
            v63 = v78;
          }
          else
          {
            v118 = (v87 >> 3) + 1;
            v88 = &v61[-(v118 & 0x3FFFFFFFFFFFFFFCLL)];
            v119 = (char *)v84 + 8 * v76 - 16;
            v120 = v61 - 2;
            v121 = v118 & 0x3FFFFFFFFFFFFFFCLL;
            a1 = v186;
            do
            {
              v122 = *(_OWORD *)v120;
              *(v119 - 1) = *((_OWORD *)v120 - 1);
              *v119 = v122;
              v119 -= 2;
              v120 -= 4;
              v121 -= 4;
            }
            while (v121);
            v85 -= v118 & 0x3FFFFFFFFFFFFFFCLL;
            v63 = v78;
            v69 = v187;
            if (v118 == (v118 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_83;
          }
          do
          {
            v89 = *--v88;
            *--v85 = v89;
          }
          while (v88 != v59);
        }
LABEL_83:
        v60 = (char *)v84 + 8 * v79;
        v189 = v85;
        v67 = v176;
        if (v59)
        {
          v90 = v59;
          v91 = v63;
          v92 = v60;
          operator delete(v90);
          v60 = v92;
          v63 = v91;
          v65 = v190;
          v64 = v191;
        }
        v59 = v85;
        v61 = v86;
        v56 = v181;
        v66 = v182;
        v58 = __pa;
        v68 = v175;
LABEL_86:
        v93 = v63 * v62;
        v94 = a1[52];
        if (!v71)
          goto LABEL_92;
        v95 = v94 + 4 * v93;
        *(_DWORD *)(v95 + 8) = 0;
        *(_QWORD *)v95 = 1065353216;
        v96 = v71 - 1;
        if (v71 == 1)
          goto LABEL_92;
        v97 = v64 - v65;
        if (v71 <= 0x10
          || (v105 = v66 * v62,
              v106 = !is_mul_ok(v71 - 2, 0xCuLL),
              v107 = 12 * (v71 - 2),
              v94 + v66 * v62 + 20 + v107 < v94 + v66 * v62 + 20)
          || v94 + v105 + 16 + v107 < (unint64_t)(v94 + v105 + 16)
          || v94 + v105 + 12 + v107 < (unint64_t)(v94 + v105 + 12))
        {
          v98 = 1;
        }
        else
        {
          v98 = 1;
          if (!v106)
          {
            v108 = v96 & 0xFFFFFFFFFFFFFFF8;
            v109 = (float *)(v94 + v67);
            v110 = (uint32x4_t *)&v65[v97 - v71 + 5];
            v111 = v96 & 0xFFFFFFFFFFFFFFF8;
            v112 = (int64x2_t)xmmword_19C46DFD0;
            v113 = (int64x2_t)xmmword_19C46DFC0;
            v114 = 0u;
            do
            {
              v115 = vcvtq_f32_u32(v110[-1]);
              v116 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vcvtq_f64_u64((uint64x2_t)v112)), vcvtq_f64_u64((uint64x2_t)v113));
              v199.val[0] = vcvtq_f32_u32(*v110);
              v199.val[1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vcvtq_f64_u64((uint64x2_t)vaddq_s64(v112, v167))), vcvtq_f64_u64((uint64x2_t)vaddq_s64(v113, v167)));
              v199.val[2] = 0u;
              v117 = v109 - 12;
              vst3q_f32(v117, *(float32x4x3_t *)(&v114 - 2));
              vst3q_f32(v109, v199);
              v113 = vaddq_s64(v113, v166);
              v112 = vaddq_s64(v112, v166);
              v109 += 24;
              v110 += 2;
              v111 -= 8;
            }
            while (v111);
            if (v96 == v108)
              goto LABEL_92;
            v98 = v108 | 1;
          }
        }
        v99 = &v65[v97 - v71];
        v100 = (float *)&v58[12 * v98 + v94];
        do
        {
          *v100 = (float)v99[v98];
          v100[1] = (float)(unint64_t)v98;
          v100[2] = 0.0;
          ++v98;
          v100 += 3;
        }
        while (v71 != v98);
LABEL_92:
        v101 = (unsigned int *)*v68;
        v102 = (uint64_t)(*v69 - *v68) >> 2;
        if (v71 < v102 + v71)
        {
          v103 = (float *)&v58[12 * v71 + v94];
          do
          {
            if (v71)
              v104 = *v101;
            else
              v104 = 1;
            *v103 = (float)v104;
            v103[1] = (float)v71;
            v103[2] = 0.0;
            ++v71;
            ++v101;
            v103 += 3;
            --v102;
          }
          while (v102);
        }
        if (*(float *)(v94 + 4 * v93) != 1.0)
          __assert_rtn("_copyInput", "CoreLMInferenceEngine.cpp", 148, "m_inputs[offset] == kMontrealTokenIDBeginningOfSentence");
        ++v62;
        v67 += v66;
        v58 += v66;
        if (v62 >= v185)
        {
          v57 = v189;
          v22 = v165;
          goto LABEL_117;
        }
      }
    }
    v61 = 0;
LABEL_117:
    __pb = v57;
    if (v185 != v61 - v57)
      __assert_rtn("conditionalProbability", "CoreLMInferenceEngine.cpp", 208, "truncatedContextLengths.size() == numInputs");
    v123 = (char *)a1[49];
    if ((uint64_t)(v169 * v56) >= 1)
      memset_pattern16((void *)a1[49], &unk_19C46E090, 4 * (v169 * v56 - (((v169 * v56) & 0x3FFFFFFFFFFFFFFFLL) != 0)) + 4);
    if (v22 && v56)
    {
      for (i = 0; i != v22; ++i)
      {
        v125 = 4 * v56;
        v126 = v123;
        v127 = v56;
        do
        {
          bzero(v126, v125);
          v126 += 4 * v56 + 4;
          v125 -= 4;
          --v127;
        }
        while (v127);
        v123 += 4 * v56 * v56;
      }
    }
    a1 = v186;
    v128 = (const void *)v186[52];
    buf[23] = 5;
    strcpy((char *)buf, "input");
    sub_19C400384((uint64_t)v171, v128, v56, (uint64_t)buf, 3, v22);
    v129 = v174;
    if ((char)buf[23] < 0)
      operator delete(*(void **)buf);
    v130 = (const void *)v186[49];
    buf[23] = 7;
    strcpy((char *)buf, "qk_mask");
    sub_19C400384((uint64_t)v171, v130, v56, (uint64_t)buf, v56, v22);
    if ((char)buf[23] < 0)
      operator delete(*(void **)buf);
    *(_QWORD *)buf = 0;
    sub_19C40BD7C(v171, 0);
    v131 = v186[41];
    if (v131 != v186[25])
      goto LABEL_189;
    v195 = v131 * v169;
    v194 = 6;
    strcpy((char *)v193, "output");
    sub_19C35476C((uint64_t)buf, v171, (int *)&v195, (uint64_t)v193);
    if (v194 < 0)
      operator delete(v193[0]);
    if (v186[41] != v186[25])
LABEL_189:
      __assert_rtn("outputSize", "CoreLMInferenceEngine.cpp", 232, "m_coreOutputSize == MontrealInferenceEngine::outputSize()");
    if (v185)
    {
      v132 = 0;
      v177 = *(_QWORD *)&buf[16];
      do
      {
        v133 = a1[25];
        if (a1[41] != v133)
          __assert_rtn("outputSize", "CoreLMInferenceEngine.cpp", 232, "m_coreOutputSize == MontrealInferenceEngine::outputSize()");
        v134 = __pb[v132];
        v135 = (uint64_t *)(v184 + 24 * v132);
        memset(buf, 0, sizeof(buf));
        v136 = *v135;
        v183 = v132;
        if (v135[1] != *v135)
        {
          v137 = 0;
          v138 = 0;
          v139 = 0;
          v140 = 0;
          v188 = v177 + 4 * v133 * (v134 + v132 * v56 - 1);
          while (1)
          {
            v142 = a1[25];
            if (a1[41] != v142)
              __assert_rtn("outputSize", "CoreLMInferenceEngine.cpp", 232, "m_coreOutputSize == MontrealInferenceEngine::outputSize()");
            v143 = *(unsigned int *)(v136 + 4 * v140) + v142 * v140;
            if (v139 >= v138)
              break;
            *(_DWORD *)v139 = *(_DWORD *)(v188 + 4 * v143);
            v141 = (uint64_t)(v139 + 4);
LABEL_142:
            *(_QWORD *)&buf[8] = v141;
            ++v140;
            v136 = *v135;
            v139 = (char *)v141;
            if (v140 >= (v135[1] - *v135) >> 2)
              goto LABEL_170;
          }
          v144 = (v139 - v137) >> 2;
          v145 = v144 + 1;
          if ((unint64_t)(v144 + 1) >> 62)
            sub_19C2A18E8();
          if ((v138 - v137) >> 1 > v145)
            v145 = (v138 - v137) >> 1;
          if ((unint64_t)(v138 - v137) >= 0x7FFFFFFFFFFFFFFCLL)
            v146 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v146 = v145;
          if (v146)
          {
            if (v146 >> 62)
              sub_19C2A143C();
            v147 = operator new(4 * v146);
          }
          else
          {
            v147 = 0;
          }
          v148 = &v147[4 * v144];
          *(_DWORD *)v148 = *(_DWORD *)(v188 + 4 * v143);
          v141 = (uint64_t)(v148 + 4);
          if (v139 == v137)
          {
            a1 = v186;
          }
          else
          {
            v149 = v139 - 4 - v137;
            if (v149 < 0x2C || (unint64_t)(v137 - v147) < 0x20)
            {
              v150 = v139;
              a1 = v186;
              goto LABEL_159;
            }
            v152 = (v149 >> 2) + 1;
            v150 = &v139[-4 * (v152 & 0x7FFFFFFFFFFFFFF8)];
            v153 = &v147[4 * v144 - 16];
            v154 = v139 - 16;
            v155 = v152 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v156 = *(_OWORD *)v154;
              *(v153 - 1) = *((_OWORD *)v154 - 1);
              *v153 = v156;
              v153 -= 2;
              v154 -= 32;
              v155 -= 8;
            }
            while (v155);
            v148 -= 4 * (v152 & 0x7FFFFFFFFFFFFFF8);
            a1 = v186;
            if (v152 != (v152 & 0x7FFFFFFFFFFFFFF8))
            {
              do
              {
LABEL_159:
                v151 = *((_DWORD *)v150 - 1);
                v150 -= 4;
                *((_DWORD *)v148 - 1) = v151;
                v148 -= 4;
              }
              while (v150 != v137);
            }
          }
          v138 = &v147[4 * v146];
          *(_QWORD *)buf = v148;
          *(_QWORD *)&buf[8] = v141;
          *(_QWORD *)&buf[16] = v138;
          if (v137)
            operator delete(v137);
          v137 = v148;
          goto LABEL_142;
        }
        v141 = 0;
LABEL_170:
        v129 = v174;
        v157 = (_QWORD *)v174[1];
        if ((unint64_t)v157 >= v174[2])
        {
          v163 = sub_19C34E0E8((char **)v174, *(const void **)buf, v141);
          v158 = *(void **)buf;
          v56 = v181;
          v174[1] = v163;
          if (!v158)
            goto LABEL_137;
        }
        else
        {
          *v157 = 0;
          v157[1] = 0;
          v157[2] = 0;
          v158 = *(void **)buf;
          v160 = v141 - *(_QWORD *)buf;
          v159 = v141 == *(_QWORD *)buf;
          v56 = v181;
          if (!v159)
          {
            if (v160 < 0)
              sub_19C2A18E8();
            v161 = (char *)operator new(v160);
            *v157 = v161;
            v157[1] = v161;
            v162 = &v161[4 * (v160 >> 2)];
            v157[2] = v162;
            memcpy(v161, v158, v160);
            v157[1] = v162;
          }
          v174[1] = v157 + 3;
          v174[1] = v157 + 3;
          if (!v158)
            goto LABEL_137;
        }
        operator delete(v158);
LABEL_137:
        v132 = v183 + 1;
      }
      while (v183 + 1 < v185);
    }
    if (__pb)
      operator delete(__pb);
    v172 += v185;
  }
  while (v172 < v170);
  v164 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v129[1] - *v129) >> 3);
LABEL_182:
  if (v164 != v170)
    __assert_rtn("conditionalProbability", "CoreLMInferenceEngine.cpp", 226, "conditionalProbabilities.size() == numQueries");
  if (v190)
  {
    v191 = v190;
    operator delete(v190);
  }
}

void sub_19C3FFE80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  uint64_t v35;
  void *v37;

  v37 = *(void **)(v35 - 200);
  if (v37)
  {
    *(_QWORD *)(v35 - 192) = v37;
    operator delete(v37);
  }
  _Unwind_Resume(exception_object);
}

void sub_19C40002C(void **a1, _BYTE *a2, char *a3)
{
  char *v3;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  int *v13;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  BOOL v19;
  _DWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  __int128 *v24;
  uint64_t v25;
  __int128 v26;
  int v27;
  unint64_t v28;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  unint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  unint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  __int128 *v43;
  uint64_t v44;
  __int128 v45;
  unint64_t v46;
  int v47;
  char *v48;
  int64_t v49;
  char *v50;
  size_t v51;
  char *v52;

  v3 = a3;
  v6 = (unint64_t)*a1;
  v5 = (unint64_t)a1[1];
  v7 = a2 - (_BYTE *)*a1;
  v8 = v7 >> 2;
  v9 = (char *)*a1 + (v7 & 0xFFFFFFFFFFFFFFFCLL);
  v10 = (unint64_t)a1[2];
  if (v5 < v10)
  {
    if (v9 == (char *)v5)
    {
      *(_DWORD *)v9 = *(_DWORD *)a3;
      a1[1] = v9 + 4;
    }
    else
    {
      v11 = v5 - (_QWORD)(v9 + 4);
      v12 = v11 >> 2;
      v13 = (int *)(v5 - 4);
      if (v5 < 4)
      {
        v20 = a1[1];
      }
      else
      {
        v14 = (v7 & 0xFFFFFFFFFFFFFFFCLL) + v11;
        v15 = (char *)(v14 + v6);
        v16 = v14 + v6 + 4;
        if (v5 > v16)
          v16 = (unint64_t)a1[1];
        v17 = v16 + ~v6 - v14;
        v18 = v5 - (_QWORD)v15;
        v19 = v17 >= 0x2C && v18 > 0x1F;
        v20 = a1[1];
        if (!v19)
          goto LABEL_65;
        v21 = (v17 >> 2) + 1;
        v22 = 4 * (v21 & 0x7FFFFFFFFFFFFFF8);
        v13 = (int *)((char *)v13 + v22);
        v23 = (_OWORD *)(v5 + 16);
        v24 = (__int128 *)(4 * v12 + 4 * v8 + v6 + 16);
        v25 = v21 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v26 = *v24;
          *(v23 - 1) = *(v24 - 1);
          *v23 = v26;
          v23 += 2;
          v24 += 2;
          v25 -= 8;
        }
        while (v25);
        v20 = (_DWORD *)(v5 + v22);
        if (v21 != (v21 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_65:
          do
          {
            v27 = *v13++;
            *v20++ = v27;
          }
          while ((unint64_t)v13 < v5);
        }
      }
      a1[1] = v20;
      if ((char *)v5 != v9 + 4)
        memmove((void *)(v5 - 4 * v12), v9, v11);
      if (v9 <= v3)
        v3 += 4 * (a1[1] > v3);
      *(_DWORD *)v9 = *(_DWORD *)v3;
    }
    return;
  }
  v28 = ((uint64_t)(v5 - v6) >> 2) + 1;
  if (v28 >> 62)
    sub_19C2A18E8();
  v30 = v10 - v6;
  if (v30 >> 1 > v28)
    v28 = v30 >> 1;
  if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL)
    v31 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v31 = v28;
  if (v31)
  {
    if (v31 >> 62)
      sub_19C2A143C();
    v32 = (char *)operator new(4 * v31);
  }
  else
  {
    v32 = 0;
  }
  v33 = &v32[4 * v8];
  v34 = &v32[4 * v31];
  if (v8 != v31)
    goto LABEL_32;
  if (v7 >= 1)
  {
    v35 = v8 + 2;
    if (v8 >= -1)
      v35 = v8 + 1;
    v33 -= 4 * (v35 >> 1);
LABEL_32:
    v36 = (char *)v6;
    goto LABEL_33;
  }
  if ((_BYTE *)v6 == a2)
    v46 = 1;
  else
    v46 = v7 >> 1;
  if (v46 >> 62)
    sub_19C2A143C();
  v33 = (char *)operator new(4 * v46);
  v34 = &v33[4 * v46];
  if (!v32)
    goto LABEL_32;
  operator delete(v32);
  v34 = &v33[4 * v46];
  v36 = (char *)*a1;
LABEL_33:
  *(_DWORD *)v33 = *(_DWORD *)v3;
  v37 = v33 + 4;
  if (v36 != v9)
  {
    v38 = (char *)((v7 & 0xFFFFFFFFFFFFFFFCLL) + v6);
    v39 = v38 - v36 - 4;
    if (v39 < 0x2C)
    {
      v41 = v9;
    }
    else if ((unint64_t)(v38 - v33) < 0x20)
    {
      v41 = v9;
    }
    else
    {
      v40 = (v39 >> 2) + 1;
      v41 = &v9[-4 * (v40 & 0x7FFFFFFFFFFFFFF8)];
      v42 = v33 - 16;
      v43 = (__int128 *)(v6 + 4 * v8 - 16);
      v44 = v40 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v45 = *v43;
        *((_OWORD *)v42 - 1) = *(v43 - 1);
        *(_OWORD *)v42 = v45;
        v42 -= 32;
        v43 -= 2;
        v44 -= 8;
      }
      while (v44);
      v33 -= 4 * (v40 & 0x7FFFFFFFFFFFFFF8);
      if (v40 == (v40 & 0x7FFFFFFFFFFFFFF8))
        goto LABEL_55;
    }
    do
    {
      v47 = *((_DWORD *)v41 - 1);
      v41 -= 4;
      *((_DWORD *)v33 - 1) = v47;
      v33 -= 4;
    }
    while (v41 != v36);
  }
LABEL_55:
  v48 = (char *)a1[1];
  v49 = v48 - v9;
  if (v48 != v9)
  {
    v50 = v9;
    v51 = v48 - v9;
    v52 = v34;
    memmove(v37, v50, v51);
    v34 = v52;
    v36 = (char *)*a1;
  }
  *a1 = v33;
  a1[1] = &v37[v49];
  a1[2] = v34;
  if (v36)
    operator delete(v36);
}

void sub_19C40036C(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void sub_19C400384(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  const UInt8 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  CFDictionaryRef v22;
  void *v23;
  void *v24;
  uint64_t v25;
  uint64_t **v26;
  uint64_t **v27;
  uint64_t *v28;
  uint64_t *v29;
  void *v30;
  void *v31;
  uint64_t v32;
  int v33;
  const UInt8 *v34;
  CFIndex v35;
  CFStringRef v36;
  uint64_t *v37;
  void *v38;
  void *v39;
  __CFError *v40;
  char *v41;
  CFStringRef v42;
  NSObject *v43;
  NSObject *v44;
  const UInt8 *v45;
  void *exception;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  __CFError *v51;
  void *v52;
  _BYTE v53[24];
  CFTypeRef v54;
  CFTypeRef v55;
  CFTypeRef v56;
  CFTypeRef v57;
  CFTypeRef cf;
  __int128 valuePtr;
  uint64_t v60;
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  v12 = *(_QWORD *)(a1 + 8);
  v13 = *(_QWORD *)(a1 + 16);
  if (v12 != v13)
  {
    v14 = *(_BYTE *)(a4 + 23);
    if (v14 >= 0)
      v15 = *(unsigned __int8 *)(a4 + 23);
    else
      v15 = *(_QWORD *)(a4 + 8);
    if (v14 >= 0)
      v16 = (const UInt8 *)a4;
    else
      v16 = *(const UInt8 **)a4;
    while (1)
    {
      v17 = *(unsigned __int8 *)(v12 + 23);
      if ((v17 & 0x80u) == 0)
        v18 = *(unsigned __int8 *)(v12 + 23);
      else
        v18 = *(_QWORD *)(v12 + 8);
      if (v18 == v15)
      {
        if ((v17 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v12, v16, *(_QWORD *)(v12 + 8)))
            break;
        }
        else
        {
          if (!*(_BYTE *)(v12 + 23))
            break;
          v19 = 0;
          while (*(unsigned __int8 *)(v12 + v19) == v16[v19])
          {
            if (v17 == ++v19)
              goto LABEL_19;
          }
        }
      }
      v12 += 24;
      if (v12 == v13)
        goto LABEL_75;
    }
  }
LABEL_19:
  if (v12 == v13)
  {
LABEL_75:
    if (qword_1EDB97228 != -1)
      dispatch_once(&qword_1EDB97228, &unk_1E3D3ABD0);
    v44 = qword_1EDB97220;
    if (os_log_type_enabled((os_log_t)qword_1EDB97220, OS_LOG_TYPE_ERROR))
    {
      if (*(char *)(a4 + 23) >= 0)
        v45 = (const UInt8 *)a4;
      else
        v45 = *(const UInt8 **)a4;
      *(_DWORD *)v53 = 136315138;
      *(_QWORD *)&v53[4] = v45;
      _os_log_error_impl(&dword_19C291000, v44, OS_LOG_TYPE_ERROR, "%s() not found as neural network input", v53, 0xCu);
    }
    __assert_rtn("setInputTensorANE", "NeuralNetwork.hpp", 204, "false");
  }
  v20 = (uint64_t *)(a5 * a3 * a6);
  sub_19C354C0C(a1, a2, v20, (const void **)a4);
  v21 = sub_19C354CF4((uint64_t **)(a1 + 56), (const void **)a4, a4)[7];
  sub_19C3550F4((CFStringRef *)v53, "ShapeDimension");
  LODWORD(valuePtr) = 5;
  *(_QWORD *)&v53[8] = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!*(_QWORD *)&v53[8])
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD3154](exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  sub_19C3550F4((CFStringRef *)&v53[16], "Width");
  *(_QWORD *)&valuePtr = a5;
  v54 = CFNumberCreate(0, kCFNumberLongType, &valuePtr);
  if (!v54)
  {
    v47 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD3154](v47, "Could not construct");
    __cxa_throw(v47, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  sub_19C3550F4((CFStringRef *)&v55, "Height");
  LODWORD(valuePtr) = 1;
  v56 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!v56)
  {
    v48 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD3154](v48, "Could not construct");
    __cxa_throw(v48, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  sub_19C3550F4((CFStringRef *)&v57, "Channel");
  *(_QWORD *)&valuePtr = a3;
  cf = CFNumberCreate(0, kCFNumberLongType, &valuePtr);
  if (!cf)
  {
    v49 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD3154](v49, "Could not construct");
    __cxa_throw(v49, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v22 = sub_19C32BCAC((uint64_t *)v53, 4uLL);
  v51 = v22;
  if (cf)
    CFRelease(cf);
  if (v57)
    CFRelease(v57);
  if (v56)
    CFRelease(v56);
  if (v55)
    CFRelease(v55);
  if (v54)
    CFRelease(v54);
  if (*(_QWORD *)&v53[16])
    CFRelease(*(CFTypeRef *)&v53[16]);
  if (*(_QWORD *)&v53[8])
    CFRelease(*(CFTypeRef *)&v53[8]);
  if (*(_QWORD *)v53)
    CFRelease(*(CFTypeRef *)v53);
  *(_QWORD *)v53 = 0;
  *(_QWORD *)&v53[8] = v53;
  *(_QWORD *)&v53[16] = 0x2000000000;
  v23 = off_1EE41C558;
  v54 = off_1EE41C558;
  if (!off_1EE41C558)
  {
    v52 = 0;
    if (qword_1EE41C550)
    {
      v24 = (void *)qword_1EE41C550;
    }
    else
    {
      valuePtr = xmmword_1E3D3C570;
      v60 = 0;
      qword_1EE41C550 = _sl_dlopen();
      v24 = (void *)qword_1EE41C550;
      if (!qword_1EE41C550)
        goto LABEL_86;
    }
    v23 = dlsym(v24, "MRLNeuralNetworkTensorCreate");
    *(_QWORD *)(*(_QWORD *)&v53[8] + 24) = v23;
    off_1EE41C558 = v23;
  }
  _Block_object_dispose(v53, 8);
  if (!v23)
    goto LABEL_85;
  v25 = ((uint64_t (*)(CFDictionaryRef))v23)(v22);
  CFRelease(v22);
  v26 = (uint64_t **)(a1 + 80);
  v27 = sub_19C354E78((uint64_t **)(a1 + 80), (const void **)a4, a4);
  v28 = v27[7];
  if (v28)
    CFRelease(v28);
  v27[7] = (uint64_t *)v25;
  v29 = sub_19C354E78((uint64_t **)(a1 + 80), (const void **)a4, a4)[7];
  *(_QWORD *)v53 = 0;
  *(_QWORD *)&v53[8] = v53;
  *(_QWORD *)&v53[16] = 0x2000000000;
  v30 = off_1EE41C560;
  v54 = off_1EE41C560;
  if (!off_1EE41C560)
  {
    v52 = 0;
    if (qword_1EE41C550)
    {
      v31 = (void *)qword_1EE41C550;
    }
    else
    {
      valuePtr = xmmword_1E3D3C570;
      v60 = 0;
      qword_1EE41C550 = _sl_dlopen();
      v31 = (void *)qword_1EE41C550;
      if (!qword_1EE41C550)
        goto LABEL_86;
    }
    v30 = dlsym(v31, "MRLNeuralNetworkTensorAppendData");
    *(_QWORD *)(*(_QWORD *)&v53[8] + 24) = v30;
    off_1EE41C560 = v30;
  }
  _Block_object_dispose(v53, 8);
  if (!v30)
  {
LABEL_85:
    dlerror();
    abort_report_np();
    goto LABEL_92;
  }
  ((void (*)(uint64_t *, uint64_t *, uint64_t))v30)(v29, v21, 4 * (_QWORD)v20);
  v51 = 0;
  v32 = *(_QWORD *)a1;
  v33 = *(char *)(a4 + 23);
  if (v33 >= 0)
    v34 = (const UInt8 *)a4;
  else
    v34 = *(const UInt8 **)a4;
  if (v33 >= 0)
    v35 = *(unsigned __int8 *)(a4 + 23);
  else
    v35 = *(_QWORD *)(a4 + 8);
  v36 = CFStringCreateWithBytes(0, v34, v35, 0x8000100u, 0);
  if (!v36)
  {
    v50 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD3154](v50, "Could not construct");
    __cxa_throw(v50, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v37 = sub_19C354E78(v26, (const void **)a4, a4)[7];
  *(_QWORD *)v53 = 0;
  *(_QWORD *)&v53[8] = v53;
  *(_QWORD *)&v53[16] = 0x2000000000;
  v38 = off_1EE41C568;
  v54 = off_1EE41C568;
  if (!off_1EE41C568)
  {
    v52 = 0;
    if (qword_1EE41C550)
    {
      v39 = (void *)qword_1EE41C550;
LABEL_65:
      v38 = dlsym(v39, "MRLNeuralNetworkSetInputTensor");
      *(_QWORD *)(*(_QWORD *)&v53[8] + 24) = v38;
      off_1EE41C568 = v38;
      goto LABEL_66;
    }
    valuePtr = xmmword_1E3D3C570;
    v60 = 0;
    qword_1EE41C550 = _sl_dlopen();
    v39 = (void *)qword_1EE41C550;
    if (qword_1EE41C550)
      goto LABEL_65;
LABEL_86:
    abort_report_np();
LABEL_92:
    __break(1u);
  }
LABEL_66:
  _Block_object_dispose(v53, 8);
  if (!v38)
    goto LABEL_85;
  ((void (*)(uint64_t, CFStringRef, uint64_t *, __CFError **))v38)(v32, v36, v37, &v51);
  CFRelease(v36);
  v40 = v51;
  if (!v51)
    return;
  v41 = (char *)operator new(0x20uLL);
  strcpy(v41, "MRLNeuralNetworkSetInputTensor");
  *(_QWORD *)&valuePtr = v40;
  v42 = CFErrorCopyDescription(v40);
  if (qword_1EDB97228 != -1)
    dispatch_once(&qword_1EDB97228, &unk_1E3D3ABD0);
  v43 = qword_1EDB97220;
  if (os_log_type_enabled((os_log_t)qword_1EDB97220, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)v53 = 136315394;
    *(_QWORD *)&v53[4] = v41;
    *(_WORD *)&v53[12] = 2112;
    *(_QWORD *)&v53[14] = v42;
    _os_log_error_impl(&dword_19C291000, v43, OS_LOG_TYPE_ERROR, "%s() failed: %@", v53, 0x16u);
    if (!v42)
      goto LABEL_73;
    goto LABEL_72;
  }
  if (v42)
LABEL_72:
    CFRelease(v42);
LABEL_73:
  CFRelease(v40);
  operator delete(v41);
}

void sub_19C400C2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, CFTypeRef a17, uint64_t a18, CFTypeRef a19, uint64_t a20,CFTypeRef a21,uint64_t a22,CFTypeRef cf,char a24)
{
  if (a2)
    sub_19C2CDAC8(exception_object);
  _Unwind_Resume(exception_object);
}

os_log_t sub_19C400E60()
{
  os_log_t result;

  result = os_log_create("com.apple.LanguageModeling", "CoreLMInferenceEngine");
  qword_1EE41C540 = (uint64_t)result;
  return result;
}

uint64_t sub_19C400E8C(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  *(_QWORD *)a1 = &off_1E3D36640;
  v2 = *(void **)(a1 + 416);
  if (v2)
  {
    *(_QWORD *)(a1 + 424) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 392);
  if (v3)
  {
    *(_QWORD *)(a1 + 400) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 360);
  if (v4)
  {
    *(_QWORD *)(a1 + 368) = v4;
    operator delete(v4);
  }
  sub_19C394750(*(_QWORD **)(a1 + 344));
  sub_19C3553FC(a1 + 224);
  v5 = *(std::__shared_weak_count **)(a1 + 216);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  *(_QWORD *)a1 = off_1E3D36B68;
  if ((*(char *)(a1 + 191) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 167) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_17:
    operator delete(*(void **)(a1 + 144));
    if ((*(char *)(a1 + 143) & 0x80000000) == 0)
      goto LABEL_15;
LABEL_18:
    operator delete(*(void **)(a1 + 120));
    goto LABEL_15;
  }
  operator delete(*(void **)(a1 + 168));
  if (*(char *)(a1 + 167) < 0)
    goto LABEL_17;
LABEL_14:
  if (*(char *)(a1 + 143) < 0)
    goto LABEL_18;
LABEL_15:
  sub_19C3553FC(a1 + 16);
  return a1;
}

void sub_19C400F88(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;

  for (i = 0; i != 256; ++i)
  {
    v3 = a1 + 8 * i;
    v6 = *(_QWORD *)(v3 + 16);
    v5 = (_QWORD *)(v3 + 16);
    v4 = v6;
    v7 = v6 & 3;
    if (v7 == 2)
    {
      v8 = (_QWORD *)(v4 & 0xFFFFFFFFFFFFFFFCLL);
      do
      {
        v9 = (_QWORD *)*v8;
        free(v8);
        v8 = v9;
      }
      while (v9);
    }
    else if (v7 == 1)
    {
      sub_19C400F88(v4 & 0xFFFFFFFFFFFFFFFCLL);
      free((void *)(*v5 & 0xFFFFFFFFFFFFFFFCLL));
    }
  }
}

void sub_19C40100C(uint64_t a1, unsigned __int32 *a2, __n128 a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  _QWORD v9[2];

  if (a2)
    v4 = (uint64_t)(a2 + 5);
  else
    v4 = 0;
  if (a2)
  {
    v5 = a2[4];
    v6 = a2[2];
    a3.n128_u32[0] = *a2;
  }
  else
  {
    v6 = 0;
    v5 = 0;
    a3.n128_u32[0] = 0;
  }
  if (!*(_QWORD *)(a1 + 2084))
  {
    v9[0] = 0;
    v9[1] = 0;
    v8 = 0;
    if ((_DWORD)v6)
    {
      if ((v5 - 1) <= 0x3FE)
      {
        v7 = 0;
        sub_19C4010C0(a1, a1, v4, v5, 0, v6, (float *)&v7, &v8, a3, v9);
        if (v8 == 2)
          ++*(_DWORD *)(a1 + 2064);
      }
    }
  }
}

void sub_19C4010C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, float *a7, int *a8, __n128 a9, _QWORD *a10)
{
  float v12;
  int v13;
  int v14;
  unsigned __int8 *v18;
  uint64_t v19;
  float v20;
  float v21;
  float (*v22)(_QWORD, uint64_t, uint64_t);
  unint64_t v23;
  float v24;
  float (*v25)(_QWORD, uint64_t, uint64_t, __n128);
  size_t v26;
  unint64_t v27;
  unint64_t v28;

  v12 = a9.n128_f32[0];
  v13 = a6;
  v14 = a4;
  if (a5 >= a4)
  {
    *a8 = 1;
    v20 = *(float *)(a2 + 8);
    if (v20 == 0.0)
      *a8 = 2;
    v21 = v20 + v12;
    *(_DWORD *)(a2 + 12) = a6;
    *(float *)(a2 + 4) = v21;
    *(float *)(a2 + 8) = v21;
    if (a10)
    {
      v22 = (float (*)(_QWORD, uint64_t, uint64_t))a10[1];
      if (v22)
        v21 = v22(*a10, a4, a6);
    }
    *(float *)(a2 + 4) = v21;
    *a7 = v21;
  }
  else
  {
    v18 = (unsigned __int8 *)(a3 + a5);
    v19 = *(_QWORD *)(a2 + 8 * *v18 + 16);
    if ((v19 & 3) == 2)
    {
      v28 = v19 & 0xFFFFFFFFFFFFFFFCLL;
      if (sub_19C4012E8(a1, (uint64_t *)&v28, a3, a4, a5 + 1, a6, a7, a8, a9.n128_f32[0], a10) >= *(_DWORD *)(a1 + 2092))
        v23 = (unint64_t)sub_19C401858(a1, (unsigned __int16 *)v28, a7, a10) | 1;
      else
        v23 = v28 | 2;
    }
    else
    {
      if ((v19 & 3) == 1)
      {
        sub_19C4010C0(a1, v19 & 0xFFFFFFFFFFFFFFFCLL, a9);
        goto LABEL_19;
      }
      v24 = a9.n128_f32[0];
      if (a10)
      {
        v25 = (float (*)(_QWORD, uint64_t, uint64_t, __n128))a10[1];
        v24 = a9.n128_f32[0];
        if (v25)
          v24 = v25(*a10, a4, a6, a9);
      }
      *a7 = v24;
      v26 = ~a5 + v14;
      v27 = (unint64_t)malloc_type_calloc(1uLL, v26 + 27, 0xBAFAEA8FuLL);
      memcpy((void *)(v27 + 26), v18 + 1, v26);
      *(_BYTE *)(v27 + 26 + v26) = 0;
      *(_WORD *)(v27 + 24) = v26;
      *(_DWORD *)(v27 + 20) = v13;
      *(float *)(v27 + 12) = v24;
      *(float *)(v27 + 16) = v12;
      *(float *)(v27 + 8) = v24;
      *(_QWORD *)v27 = 0;
      v23 = v27 | 2;
      *a8 = 2;
    }
    *(_QWORD *)(a2 + 8 * *v18 + 16) = v23;
  }
LABEL_19:
  if (*a7 > *(float *)a2)
    *(float *)a2 = *a7;
}

unint64_t sub_19C4012E8(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, _DWORD *a7, int *a8, float a9, _QWORD *a10)
{
  uint64_t v14;
  int v15;
  uint64_t v16;
  int8x16_t *v17;
  int8x16_t *v18;
  int8x16_t *v19;
  _QWORD *v20;
  int8x16_t *v21;
  size_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  _BYTE *v26;
  float v27;
  float (*v28)(_QWORD, uint64_t, _QWORD);
  uint64_t *v29;
  int8x16_t *v30;
  unint64_t v31;
  int8x16_t *v32;
  uint64_t v33;
  uint64_t v34;
  int8x16_t *v35;
  int8x16_t *v36;
  uint64_t v37;
  int8x16_t v38;
  int8x16_t *v39;
  float v40;
  float (*v41)(_QWORD, uint64_t, _QWORD, float);
  size_t v42;
  char *v43;
  int v44;
  uint64_t v45;
  unint64_t v46;
  _BYTE *v47;
  _QWORD *v48;
  unint64_t v49;
  int8x16_t *v50;
  uint64_t v51;
  int8x16_t *v52;
  int8x16_t *v53;
  uint64_t v54;
  int8x16_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t *v64;
  _QWORD *v65;
  uint64_t v66;
  int v72;
  void *__s1;
  BOOL (*v75)(uint64_t, uint64_t);

  v14 = *a2;
  v15 = *(_DWORD *)(a1 + 2092);
  v16 = (v15 + 1);
  if (v15 == -1)
  {
    v17 = 0;
    v18 = 0;
  }
  else
  {
    v19 = (int8x16_t *)operator new(8 * v16);
    v18 = (int8x16_t *)((char *)v19 + 8 * v16);
    v17 = v19;
  }
  v20 = a10;
  __s1 = (void *)(a3 + a5);
  if (!v14)
  {
    v39 = v17;
    v40 = a9;
    if (!a10)
      goto LABEL_49;
LABEL_47:
    v41 = (float (*)(_QWORD, uint64_t, _QWORD, float))v20[1];
    v40 = a9;
    if (v41)
      v40 = v41(*v20, a4, a6, a9);
LABEL_49:
    v42 = a4 - a5;
    v43 = (char *)malloc_type_calloc(1uLL, v42 + 27, 0xBAFAEA8FuLL);
    memcpy(v43 + 26, __s1, v42);
    v43[v42 + 26] = 0;
    *((_WORD *)v43 + 12) = v42;
    *((_DWORD *)v43 + 5) = a6;
    *((float *)v43 + 3) = v40;
    *((float *)v43 + 4) = a9;
    *((float *)v43 + 2) = v40;
    *(_QWORD *)v43 = 0;
    if (v39 < v18)
    {
      v39->i64[0] = (uint64_t)v43;
      v44 = 2;
      v21 = (int8x16_t *)&v39->u64[1];
      goto LABEL_73;
    }
    v45 = ((char *)v39 - (char *)v17) >> 3;
    v46 = v45 + 1;
    if ((unint64_t)(v45 + 1) >> 61)
      sub_19C2A18E8();
    if (((char *)v18 - (char *)v17) >> 2 > v46)
      v46 = ((char *)v18 - (char *)v17) >> 2;
    if ((unint64_t)((char *)v18 - (char *)v17) >= 0x7FFFFFFFFFFFFFF8)
      v46 = 0x1FFFFFFFFFFFFFFFLL;
    if (v46)
    {
      if (v46 >> 61)
        sub_19C2A143C();
      v47 = operator new(8 * v46);
    }
    else
    {
      v47 = 0;
    }
    v48 = &v47[8 * v45];
    *v48 = v43;
    v21 = (int8x16_t *)(v48 + 1);
    if (v39 == v17)
      goto LABEL_70;
    v49 = (char *)v39 - (char *)v17 - 8;
    if (v49 >= 0x58)
    {
      if ((unint64_t)((char *)v17 - v47) >= 0x20)
      {
        v51 = (v49 >> 3) + 1;
        v50 = (int8x16_t *)((char *)v39 - 8 * (v51 & 0x3FFFFFFFFFFFFFFCLL));
        v52 = (int8x16_t *)&v47[8 * v45 - 16];
        v53 = v39 - 1;
        v54 = v51 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v55 = *v53;
          v52[-1] = v53[-1];
          *v52 = v55;
          v52 -= 2;
          v53 -= 2;
          v54 -= 4;
        }
        while (v54);
        v48 -= v51 & 0x3FFFFFFFFFFFFFFCLL;
        if (v51 == (v51 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_70;
      }
      else
      {
        v50 = v39;
      }
    }
    else
    {
      v50 = v39;
    }
    do
    {
      v56 = v50[-1].i64[1];
      v50 = (int8x16_t *)((char *)v50 - 8);
      *--v48 = v56;
    }
    while (v50 != v17);
LABEL_70:
    if (v17)
      operator delete(v17);
    v44 = 2;
    v17 = (int8x16_t *)v48;
    goto LABEL_73;
  }
  v72 = 2;
  v21 = v17;
  do
  {
    while (1)
    {
      v22 = *(unsigned __int16 *)(v14 + 24);
      if ((_DWORD)v22 + a5 == (_DWORD)a4 && !memcmp(__s1, (const void *)(v14 + 26), v22))
        break;
      if (v21 >= v18)
        goto LABEL_10;
LABEL_6:
      v21->i64[0] = v14;
      v21 = (int8x16_t *)((char *)v21 + 8);
      v14 = *(_QWORD *)v14;
      if (!v14)
        goto LABEL_43;
    }
    *(_DWORD *)(v14 + 20) = a6;
    v27 = *(float *)(v14 + 16) + a9;
    *(float *)(v14 + 12) = v27;
    *(float *)(v14 + 16) = v27;
    if (a10)
    {
      v28 = (float (*)(_QWORD, uint64_t, _QWORD))a10[1];
      if (v28)
        v27 = v28(*a10, a4, a6);
    }
    *(float *)(v14 + 12) = v27;
    v72 = 1;
    if (v21 < v18)
      goto LABEL_6;
LABEL_10:
    v23 = ((char *)v21 - (char *)v17) >> 3;
    v24 = v23 + 1;
    if ((unint64_t)(v23 + 1) >> 61)
      sub_19C2A18E8();
    if (((char *)v18 - (char *)v17) >> 2 > v24)
      v24 = ((char *)v18 - (char *)v17) >> 2;
    if ((unint64_t)((char *)v18 - (char *)v17) >= 0x7FFFFFFFFFFFFFF8)
      v25 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v25 = v24;
    if (v25)
    {
      if (v25 >> 61)
        sub_19C2A143C();
      v26 = operator new(8 * v25);
    }
    else
    {
      v26 = 0;
    }
    v29 = (uint64_t *)&v26[8 * v23];
    *v29 = v14;
    v30 = (int8x16_t *)(v29 + 1);
    if (v21 != v17)
    {
      v31 = (char *)&v21[-1].u64[1] - (char *)v17;
      if (v31 < 0x168)
      {
        v32 = v21;
        goto LABEL_28;
      }
      if (&v26[(char *)v21 - (char *)v17 - 8 - (v31 & 0xFFFFFFFFFFFFFFF8)] > &v26[(char *)v21 - (char *)v17 - 8])
      {
        v32 = v21;
        do
        {
LABEL_28:
          v33 = v32[-1].i64[1];
          v32 = (int8x16_t *)((char *)v32 - 8);
          *--v29 = v33;
        }
        while (v32 != v17);
        goto LABEL_29;
      }
      if ((unint64_t *)((char *)&v21[-1].u64[1] - (v31 & 0xFFFFFFFFFFFFFFF8)) > &v21[-1].u64[1])
      {
        v32 = v21;
        goto LABEL_28;
      }
      if ((unint64_t)((char *)v17 - v26) < 0x20)
      {
        v32 = v21;
        goto LABEL_28;
      }
      v34 = (v31 >> 3) + 1;
      v32 = (int8x16_t *)((char *)v21 - 8 * (v34 & 0x3FFFFFFFFFFFFFFCLL));
      v35 = (int8x16_t *)&v26[8 * v23 - 16];
      v36 = v21 - 1;
      v37 = v34 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v38 = *v36;
        v35[-1] = v36[-1];
        *v35 = v38;
        v35 -= 2;
        v36 -= 2;
        v37 -= 4;
      }
      while (v37);
      v29 -= v34 & 0x3FFFFFFFFFFFFFFCLL;
      if (v34 != (v34 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_28;
    }
LABEL_29:
    v18 = (int8x16_t *)&v26[8 * v25];
    if (v17)
      operator delete(v17);
    v17 = (int8x16_t *)v29;
    v21 = v30;
    v14 = *(_QWORD *)v14;
  }
  while (v14);
LABEL_43:
  if (v72 == 2)
  {
    v39 = v21;
    v20 = a10;
    v40 = a9;
    if (!a10)
      goto LABEL_49;
    goto LABEL_47;
  }
  v44 = 1;
LABEL_73:
  v57 = ((char *)v21 - (char *)v17) >> 3;
  v58 = 126 - 2 * __clz(v57);
  v59 = (char *)v21 - (char *)v17;
  v75 = sub_19C401A14;
  if (v21 == v17)
    v60 = 0;
  else
    v60 = v58;
  sub_19C401A40((uint64_t)v17, v21, (unsigned int (**)(uint64_t))&v75, v60, 1);
  v61 = (_QWORD *)v17->i64[0];
  *a7 = *(_DWORD *)(v17->i64[0] + 12);
  v62 = v61;
  if (v59 != 8)
  {
    v63 = v57 - 1;
    if (v57 - 1 <= 1)
      v63 = 1;
    v64 = &v17->i64[1];
    v65 = v61;
    do
    {
      v66 = *v64++;
      v62 = (_QWORD *)v66;
      *v65 = v66;
      *(_DWORD *)(v66 + 8) = *a7;
      v65 = (_QWORD *)v66;
      --v63;
    }
    while (v63);
  }
  *v62 = 0;
  *a2 = (uint64_t)v61;
  if (a8)
    *a8 = v44;
  if (v57 > *(unsigned int *)(a1 + 2092))
    __assert_rtn("completionTrieAddListNode", "LMCompletionTrie.cpp", 458, "nodes.size() <= trie->reserved[CONTAINER_SIZE]");
  operator delete(v17);
  return v59 >> 3;
}

void sub_19C40182C(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

float *sub_19C401858(uint64_t a1, unsigned __int16 *a2, float *a3, _QWORD *a4)
{
  float *v8;
  float v9;
  unsigned __int16 *v10;
  uint64_t v11;
  unsigned int v12;
  float v13;
  float v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  size_t v19;
  unint64_t v20;
  float v22;
  unint64_t v23;

  v8 = (float *)malloc_type_calloc(1uLL, 0x810uLL, 0x1000040A9A4BCADuLL);
  *a3 = 0.0;
  if (a2)
  {
    do
    {
      v22 = 0.0;
      v11 = a2[12];
      v12 = *((_DWORD *)a2 + 5);
      v14 = *((float *)a2 + 3);
      v13 = *((float *)a2 + 4);
      if (a2[12])
      {
        v15 = *(_QWORD *)&v8[2 * *((unsigned __int8 *)a2 + 26) + 4];
        if (v15)
        {
          v23 = v15 & 0xFFFFFFFFFFFFFFFCLL;
          v16 = sub_19C4012E8(a1, (uint64_t *)&v23, (uint64_t)(a2 + 13), v11, 1u, v12, &v22, 0, v13, a4);
          v17 = v23;
          if (v16 >= *(_DWORD *)(a1 + 2092))
          {
            v17 = sub_19C401858(a1, v23, &v22, a4);
            v18 = 1;
          }
          else
          {
            v18 = 2;
          }
          *(_QWORD *)&v8[2 * *((unsigned __int8 *)a2 + 26) + 4] = v18 | v17;
          v14 = v22;
        }
        else
        {
          v19 = (v11 - 1);
          v20 = (unint64_t)malloc_type_calloc(1uLL, v19 + 27, 0xBAFAEA8FuLL);
          memcpy((void *)(v20 + 26), (char *)a2 + 27, v19);
          *(_BYTE *)(v20 + 26 + v19) = 0;
          *(_WORD *)(v20 + 24) = v19;
          *(_DWORD *)(v20 + 20) = v12;
          *(float *)(v20 + 12) = v14;
          *(float *)(v20 + 16) = v13;
          *(float *)(v20 + 8) = v14;
          *(_QWORD *)v20 = 0;
          *(_QWORD *)&v8[2 * *((unsigned __int8 *)a2 + 26) + 4] = v20 | 2;
        }
      }
      else
      {
        v8[1] = v14;
        v8[2] = v13;
        *((_DWORD *)v8 + 3) = v12;
      }
      *a3 = fmaxf(v14, *a3);
      v10 = *(unsigned __int16 **)a2;
      free(a2);
      a2 = v10;
    }
    while (v10);
    v9 = *a3;
  }
  else
  {
    v9 = 0.0;
  }
  *v8 = v9;
  return v8;
}

BOOL sub_19C401A14(uint64_t a1, uint64_t a2)
{
  float v2;
  float v3;

  v2 = *(float *)(a1 + 12);
  v3 = *(float *)(a2 + 12);
  if (v2 == v3)
    return *(_DWORD *)(a1 + 20) > *(_DWORD *)(a2 + 20);
  else
    return v2 > v3;
}

uint64_t sub_19C401A40(uint64_t result, int8x16_t *a2, unsigned int (**a3)(uint64_t), uint64_t a4, char a5)
{
  int8x16_t *v7;
  int8x16_t *v8;
  uint64_t *v9;
  int8x16_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int (*v14)(uint64_t);
  char v15;
  int v16;
  uint64_t v17;
  char v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t *v54;
  int8x16_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  int8x16_t *v61;
  int8x16_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  BOOL v66;
  uint64_t v67;
  int8x16_t *v68;
  int8x16_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  int8x16_t *v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  BOOL v86;
  char v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int64_t v95;
  BOOL v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t *v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t *v113;
  unint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t *v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t *v120;
  unint64_t v121;
  uint64_t *v122;
  uint64_t v123;
  uint64_t v124;
  int64_t v126;

  v7 = (int8x16_t *)result;
LABEL_2:
  v8 = a2;
  v9 = &a2[-1].i64[1];
  v10 = v7;
  while (2)
  {
    v7 = v10;
    v11 = (char *)v8 - (char *)v10;
    v12 = ((char *)v8 - (char *)v10) >> 3;
    switch(v12)
    {
      case 0:
      case 1:
        return result;
      case 2:
        result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(*v9, v10->i64[0]);
        if ((_DWORD)result)
        {
          v75 = v10->i64[0];
          v10->i64[0] = *v9;
          goto LABEL_165;
        }
        return result;
      case 3:
        v76 = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v10->i64[1], v10->i64[0]);
        result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(*v9, v10->i64[1]);
        if ((v76 & 1) != 0)
        {
          v77 = v10->i64[0];
          if ((_DWORD)result)
          {
            v10->i64[0] = *v9;
            *v9 = v77;
          }
          else
          {
            v10->i64[0] = v10->i64[1];
            v10->i64[1] = v77;
            result = ((uint64_t (*)(uint64_t))*a3)(*v9);
            if ((_DWORD)result)
            {
              v75 = v10->i64[1];
              v10->i64[1] = *v9;
LABEL_165:
              *v9 = v75;
            }
          }
        }
        else if ((_DWORD)result)
        {
          v103 = v10->i64[1];
          v10->i64[1] = *v9;
          *v9 = v103;
          result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v10->i64[1], v10->i64[0]);
          goto LABEL_138;
        }
        return result;
      case 4:
        return sub_19C402570(v10, &v10->i64[1], (int8x16_t *)v10[1].i64, v9, a3);
      case 5:
        v78 = v10 + 1;
        v79 = &v10[1].i64[1];
        sub_19C402570(v10, &v10->i64[1], (int8x16_t *)v10[1].i64, &v10[1].i64[1], a3);
        result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(*v9, v10[1].i64[1]);
        if ((_DWORD)result)
        {
          v80 = *v79;
          *v79 = *v9;
          *v9 = v80;
          result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(*v79, v78->i64[0]);
          if ((_DWORD)result)
          {
            v81 = v78->i64[0];
            v78->i64[0] = *v79;
            *v79 = v81;
            result = ((uint64_t (*)(void))*a3)();
            if ((_DWORD)result)
            {
              v83 = v10->i64[1];
              v82 = v10[1].i64[0];
              v84 = v10->i64[0];
              v10->i64[1] = v82;
              v10[1].i64[0] = v83;
              result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v82, v84);
LABEL_138:
              if ((_DWORD)result)
                *v10 = vextq_s8(*v10, *v10, 8uLL);
            }
          }
        }
        return result;
      default:
        if (v11 <= 191)
        {
          v85 = &v10->i64[1];
          v86 = v10 == v8 || v85 == (uint64_t *)v8;
          v87 = v86;
          if ((a5 & 1) != 0)
          {
            if ((v87 & 1) == 0)
            {
              v88 = 0;
              v89 = (uint64_t *)v10;
              do
              {
                v92 = *v89;
                v91 = v89[1];
                v89 = v85;
                result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v91, v92);
                if ((_DWORD)result)
                {
                  v93 = *v89;
                  v94 = v88;
                  do
                  {
                    *(uint64_t *)((char *)&v10->i64[1] + v94) = *(uint64_t *)((char *)v10->i64 + v94);
                    if (!v94)
                    {
                      v90 = (uint64_t *)v10;
                      goto LABEL_113;
                    }
                    result = ((uint64_t (*)(uint64_t, _QWORD))*a3)(v93, *(uint64_t *)((char *)&v10->i64[-1] + v94));
                    v94 -= 8;
                  }
                  while ((result & 1) != 0);
                  v90 = (uint64_t *)((char *)&v10->i64[1] + v94);
LABEL_113:
                  *v90 = v93;
                }
                v85 = v89 + 1;
                v88 += 8;
              }
              while (v89 + 1 != (uint64_t *)a2);
            }
          }
          else if ((v87 & 1) == 0)
          {
            do
            {
              v105 = v7->i64[0];
              v104 = v7->i64[1];
              v7 = (int8x16_t *)v85;
              result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v104, v105);
              if ((_DWORD)result)
              {
                v106 = v7->i64[0];
                v107 = (uint64_t *)v7;
                do
                {
                  v108 = v107;
                  v109 = *--v107;
                  *v108 = v109;
                  result = ((uint64_t (*)(uint64_t, _QWORD))*a3)(v106, *(v108 - 2));
                }
                while ((result & 1) != 0);
                *v107 = v106;
              }
              v85 = &v7->i64[1];
            }
            while (&v7->u64[1] != (unint64_t *)a2);
          }
          return result;
        }
        if (!a4)
        {
          if (v10 != v8)
          {
            v95 = (unint64_t)(v12 - 2) >> 1;
            v126 = v95;
            do
            {
              if (v126 >= v95)
              {
                v97 = (2 * v95) | 1;
                v98 = &v7->i64[v97];
                if (2 * v95 + 2 < v12 && ((unsigned int (*)(uint64_t, uint64_t))*a3)(*v98, v98[1]))
                {
                  ++v98;
                  v97 = 2 * v95 + 2;
                }
                v99 = &v7->i64[v95];
                result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(*v98, *v99);
                if ((result & 1) == 0)
                {
                  v124 = *v99;
                  do
                  {
                    v100 = v98;
                    *v99 = *v98;
                    if (v126 < v97)
                      break;
                    v101 = (2 * v97) | 1;
                    v98 = &v7->i64[v101];
                    v102 = 2 * v97 + 2;
                    if (v102 < v12 && ((unsigned int (*)(uint64_t, uint64_t))*a3)(*v98, v98[1]))
                    {
                      ++v98;
                      v101 = v102;
                    }
                    result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(*v98, v124);
                    v99 = v100;
                    v97 = v101;
                  }
                  while (!(_DWORD)result);
                  *v100 = v124;
                }
              }
              v96 = v95-- <= 0;
            }
            while (!v96);
            v110 = (unint64_t)v11 >> 3;
            do
            {
              v111 = 0;
              v112 = v7->i64[0];
              v113 = (uint64_t *)v7;
              do
              {
                v114 = (unint64_t *)&v113[v111 + 1];
                v115 = (2 * v111) | 1;
                v116 = 2 * v111 + 2;
                if (v116 < v110)
                {
                  result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v113[v111 + 1], v113[v111 + 2]);
                  if ((_DWORD)result)
                  {
                    ++v114;
                    v115 = v116;
                  }
                }
                *v113 = *v114;
                v113 = (uint64_t *)v114;
                v111 = v115;
              }
              while (v115 <= (uint64_t)((unint64_t)(v110 - 2) >> 1));
              v117 = &a2[-1].i64[1];
              v86 = v114 == &a2[-1].u64[1];
              a2 = (int8x16_t *)((char *)a2 - 8);
              if (v86)
              {
                *v114 = v112;
              }
              else
              {
                *v114 = *v117;
                *v117 = v112;
                v118 = (char *)v114 - (char *)v7 + 8;
                if (v118 >= 9)
                {
                  v119 = (((unint64_t)v118 >> 3) - 2) >> 1;
                  v120 = &v7->i64[v119];
                  result = ((uint64_t (*)(uint64_t, unint64_t))*a3)(*v120, *v114);
                  if ((_DWORD)result)
                  {
                    v121 = *v114;
                    do
                    {
                      v122 = v120;
                      *v114 = *v120;
                      if (!v119)
                        break;
                      v119 = (v119 - 1) >> 1;
                      v120 = &v7->i64[v119];
                      result = ((uint64_t (*)(uint64_t, unint64_t))*a3)(*v120, v121);
                      v114 = (unint64_t *)v122;
                    }
                    while ((result & 1) != 0);
                    *v122 = v121;
                  }
                }
              }
              v96 = v110-- <= 2;
            }
            while (!v96);
          }
          return result;
        }
        v13 = (unint64_t)v12 >> 1;
        v14 = *a3;
        if ((unint64_t)v11 < 0x401)
        {
          v18 = ((uint64_t (*)(uint64_t, uint64_t))v14)(v7->i64[0], v7->i64[v13]);
          v19 = ((uint64_t (*)(uint64_t, uint64_t))*a3)(*v9, v7->i64[0]);
          if ((v18 & 1) != 0)
          {
            v20 = v7->i64[v13];
            if (v19)
            {
              v7->i64[v13] = *v9;
              *v9 = v20;
            }
            else
            {
              v7->i64[v13] = v7->i64[0];
              v7->i64[0] = v20;
              if ((*a3)(*v9))
              {
                v33 = v7->i64[0];
                v7->i64[0] = *v9;
                *v9 = v33;
              }
            }
          }
          else if (v19)
          {
            v23 = v7->i64[0];
            v7->i64[0] = *v9;
            *v9 = v23;
            if (((unsigned int (*)(uint64_t, uint64_t))*a3)(v7->i64[0], v7->i64[v13]))
            {
              v24 = v7->i64[v13];
              v7->i64[v13] = v7->i64[0];
              v7->i64[0] = v24;
            }
          }
        }
        else
        {
          v15 = ((uint64_t (*)(uint64_t, uint64_t))v14)(v7->i64[v13], v7->i64[0]);
          v16 = ((uint64_t (*)(uint64_t, uint64_t))*a3)(*v9, v7->i64[v13]);
          if ((v15 & 1) != 0)
          {
            v17 = v7->i64[0];
            if (v16)
            {
              v7->i64[0] = *v9;
              *v9 = v17;
            }
            else
            {
              v7->i64[0] = v7->i64[v13];
              v7->i64[v13] = v17;
              if ((*a3)(*v9))
              {
                v25 = v7->i64[v13];
                v7->i64[v13] = *v9;
                *v9 = v25;
              }
            }
          }
          else if (v16)
          {
            v21 = v7->i64[v13];
            v7->i64[v13] = *v9;
            *v9 = v21;
            if (((unsigned int (*)(uint64_t, uint64_t))*a3)(v7->i64[v13], v7->i64[0]))
            {
              v22 = v7->i64[0];
              v7->i64[0] = v7->i64[v13];
              v7->i64[v13] = v22;
            }
          }
          v26 = v13 - 1;
          v27 = v13 - 1;
          v28 = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v7->i64[v27], v7->i64[1]);
          v29 = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v8[-1].i64[0], v7->i64[v27]);
          v123 = a4;
          if ((v28 & 1) != 0)
          {
            v30 = v7->i64[1];
            if (v29)
            {
              v7->i64[1] = v8[-1].i64[0];
              v8[-1].i64[0] = v30;
            }
            else
            {
              v7->i64[1] = v7->i64[v27];
              v7->i64[v27] = v30;
              if ((*a3)(v8[-1].i64[0]))
              {
                v34 = v7->i64[v27];
                v7->i64[v27] = v8[-1].i64[0];
                v8[-1].i64[0] = v34;
              }
            }
          }
          else if (v29)
          {
            v31 = v7->i64[v27];
            v7->i64[v27] = v8[-1].i64[0];
            v8[-1].i64[0] = v31;
            if (((unsigned int (*)(uint64_t, uint64_t))*a3)(v7->i64[v27], v7->i64[1]))
            {
              v32 = v7->i64[1];
              v7->i64[1] = v7->i64[v27];
              v7->i64[v27] = v32;
            }
          }
          v35 = v13 + 1;
          v36 = v13 + 1;
          v37 = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v7->i64[v36], v7[1].i64[0]);
          v38 = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v8[-2].i64[1], v7->i64[v36]);
          if ((v37 & 1) != 0)
          {
            v39 = v7[1].i64[0];
            if (v38)
            {
              v7[1].i64[0] = v8[-2].i64[1];
              v8[-2].i64[1] = v39;
            }
            else
            {
              v7[1].i64[0] = v7->i64[v36];
              v7->i64[v36] = v39;
              if ((*a3)(v8[-2].i64[1]))
              {
                v42 = v7->i64[v36];
                v7->i64[v36] = v8[-2].i64[1];
                v8[-2].i64[1] = v42;
              }
            }
          }
          else if (v38)
          {
            v40 = v7->i64[v36];
            v7->i64[v36] = v8[-2].i64[1];
            v8[-2].i64[1] = v40;
            if (((unsigned int (*)(uint64_t, uint64_t))*a3)(v7->i64[v36], v7[1].i64[0]))
            {
              v41 = v7[1].i64[0];
              v7[1].i64[0] = v7->i64[v36];
              v7->i64[v36] = v41;
            }
          }
          v43 = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v7->i64[v13], v7->i64[v26]);
          v44 = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v7->i64[v35], v7->i64[v13]);
          if ((v43 & 1) != 0)
          {
            v45 = v7->i64[v26];
            if (v44)
            {
              v7->i64[v26] = v7->i64[v36];
              v7->i64[v36] = v45;
              v46 = v7->i64[v13];
              v9 = &a2[-1].i64[1];
            }
            else
            {
              v7->i64[v26] = v7->i64[v13];
              v7->i64[v13] = v45;
              v49 = (*a3)(v7->i64[v35]);
              v46 = v7->i64[v13];
              v9 = &a2[-1].i64[1];
              if (v49)
              {
                v50 = v7->i64[v36];
                v7->i64[v13] = v50;
                v7->i64[v36] = v46;
                v46 = v50;
              }
            }
            a4 = v123;
          }
          else
          {
            v46 = v7->i64[v13];
            a4 = v123;
            if (v44)
            {
              v7->i64[v13] = v7->i64[v36];
              v7->i64[v36] = v46;
              v47 = ((uint64_t (*)(void))*a3)();
              v46 = v7->i64[v13];
              if (v47)
              {
                v48 = v7->i64[v27];
                v7->i64[v27] = v46;
                v7->i64[v13] = v48;
                v46 = v48;
              }
            }
            v9 = &a2[-1].i64[1];
          }
          v51 = v7->i64[0];
          v7->i64[0] = v46;
          v7->i64[v13] = v51;
        }
        --a4;
        v52 = v7->i64[0];
        if ((a5 & 1) == 0)
        {
          v53 = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v7[-1].i64[1], v7->i64[0]);
          v52 = v7->i64[0];
          if ((v53 & 1) == 0)
          {
            result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v7->i64[0], *v9);
            if ((result & 1) != 0)
            {
              v10 = v7;
              do
              {
                v67 = v10->i64[1];
                v10 = (int8x16_t *)((char *)v10 + 8);
                result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v52, v67);
              }
              while ((result & 1) == 0);
            }
            else
            {
              v68 = (int8x16_t *)&v7->u64[1];
              do
              {
                v10 = v68;
                if (v68 >= a2)
                  break;
                v68 = (int8x16_t *)((char *)v68 + 8);
                result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v52, v10->i64[0]);
              }
              while (!(_DWORD)result);
            }
            v8 = a2;
            v69 = a2;
            if (v10 < a2)
            {
              v69 = a2;
              do
              {
                v70 = v69[-1].i64[1];
                v69 = (int8x16_t *)((char *)v69 - 8);
                result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v52, v70);
              }
              while ((result & 1) != 0);
            }
            while (v10 < v69)
            {
              v71 = v10->i64[0];
              v10->i64[0] = v69->i64[0];
              v69->i64[0] = v71;
              do
              {
                v72 = v10->i64[1];
                v10 = (int8x16_t *)((char *)v10 + 8);
              }
              while (!((unsigned int (*)(uint64_t, uint64_t))*a3)(v52, v72));
              do
              {
                v73 = v69[-1].i64[1];
                v69 = (int8x16_t *)((char *)v69 - 8);
                result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v52, v73);
              }
              while ((result & 1) != 0);
            }
            v74 = &v10[-1].i64[1];
            if (&v10[-1].u64[1] != (unint64_t *)v7)
              v7->i64[0] = *v74;
            a5 = 0;
            *v74 = v52;
            continue;
          }
        }
        v54 = (uint64_t *)v7;
        do
        {
          v55 = (int8x16_t *)v54;
          v56 = v54[1];
          ++v54;
        }
        while ((((uint64_t (*)(uint64_t, uint64_t))*a3)(v56, v52) & 1) != 0);
        v57 = a4;
        v58 = (uint64_t *)v8;
        if (v55 == v7)
        {
          v58 = (uint64_t *)v8;
          do
          {
            if (v54 >= v58)
              break;
            v60 = *--v58;
          }
          while ((((uint64_t (*)(uint64_t, uint64_t))*a3)(v60, v52) & 1) == 0);
        }
        else
        {
          do
            v59 = *--v58;
          while (!((unsigned int (*)(uint64_t, uint64_t))*a3)(v59, v52));
        }
        if (v54 < v58)
        {
          v61 = (int8x16_t *)v54;
          v62 = (int8x16_t *)v58;
          do
          {
            v63 = v61->i64[0];
            v61->i64[0] = v62->i64[0];
            v62->i64[0] = v63;
            do
            {
              v55 = v61;
              v64 = v61->i64[1];
              v61 = (int8x16_t *)((char *)v61 + 8);
            }
            while ((((uint64_t (*)(uint64_t, uint64_t))*a3)(v64, v52) & 1) != 0);
            do
            {
              v65 = v62[-1].i64[1];
              v62 = (int8x16_t *)((char *)v62 - 8);
            }
            while (!((unsigned int (*)(uint64_t, uint64_t))*a3)(v65, v52));
          }
          while (v61 < v62);
        }
        if (v55 != v7)
          v7->i64[0] = v55->i64[0];
        v55->i64[0] = v52;
        v8 = a2;
        a4 = v57;
        if (v54 < v58)
        {
LABEL_71:
          result = sub_19C401A40(v7, v55, a3, a4, a5 & 1);
          a5 = 0;
          v10 = (int8x16_t *)&v55->u64[1];
          continue;
        }
        v66 = sub_19C4026C0(v7, v55, a3);
        v10 = (int8x16_t *)&v55->u64[1];
        result = sub_19C4026C0(&v55->i64[1], a2, a3);
        if (!(_DWORD)result)
        {
          if (v66)
            continue;
          goto LABEL_71;
        }
        a2 = v55;
        if (!v66)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t sub_19C402570(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, unsigned int (**a5)(_QWORD))
{
  char v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v10 = ((uint64_t (*)(_QWORD, _QWORD))*a5)(*a2, *a1);
  v11 = ((uint64_t (*)(_QWORD, _QWORD))*a5)(*a3, *a2);
  if ((v10 & 1) != 0)
  {
    v12 = *a1;
    if (v11)
    {
      *a1 = *a3;
      *a3 = v12;
    }
    else
    {
      *a1 = *a2;
      *a2 = v12;
      if ((*a5)(*a3))
      {
        v15 = *a2;
        *a2 = *a3;
        *a3 = v15;
      }
    }
  }
  else if (v11)
  {
    v13 = *a2;
    *a2 = *a3;
    *a3 = v13;
    if (((unsigned int (*)(_QWORD, _QWORD))*a5)(*a2, *a1))
    {
      v14 = *a1;
      *a1 = *a2;
      *a2 = v14;
    }
  }
  result = ((uint64_t (*)(_QWORD, _QWORD))*a5)(*a4, *a3);
  if ((_DWORD)result)
  {
    v17 = *a3;
    *a3 = *a4;
    *a4 = v17;
    result = ((uint64_t (*)(_QWORD, _QWORD))*a5)(*a3, *a2);
    if ((_DWORD)result)
    {
      v18 = *a2;
      *a2 = *a3;
      *a3 = v18;
      result = ((uint64_t (*)(_QWORD, _QWORD))*a5)(*a2, *a1);
      if ((_DWORD)result)
      {
        v19 = *a1;
        *a1 = *a2;
        *a2 = v19;
      }
    }
  }
  return result;
}

BOOL sub_19C4026C0(_QWORD *a1, _QWORD *a2, unsigned int (**a3)(uint64_t))
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  char v20;
  _QWORD *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  int v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (((unsigned int (*)(_QWORD, _QWORD))*a3)(*(a2 - 1), *a1))
      {
        v8 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return 1;
    case 3:
      v9 = ((uint64_t (*)(_QWORD, _QWORD))*a3)(a1[1], *a1);
      v10 = ((uint64_t (*)(_QWORD, _QWORD))*a3)(*(a2 - 1), a1[1]);
      if ((v9 & 1) != 0)
      {
        v11 = *a1;
        if (v10)
        {
          *a1 = *(a2 - 1);
          *(a2 - 1) = v11;
        }
        else
        {
          *a1 = a1[1];
          a1[1] = v11;
          if ((*a3)(*(a2 - 1)))
          {
            v26 = a1[1];
            a1[1] = *(a2 - 1);
            *(a2 - 1) = v26;
          }
        }
      }
      else if (v10)
      {
        v24 = a1[1];
        a1[1] = *(a2 - 1);
        *(a2 - 1) = v24;
        v19 = ((uint64_t (*)(_QWORD, _QWORD))*a3)(a1[1], *a1);
LABEL_17:
        if (v19)
          *(int8x16_t *)a1 = vextq_s8(*(int8x16_t *)a1, *(int8x16_t *)a1, 8uLL);
      }
      return 1;
    case 4:
      sub_19C402570(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      v12 = a1 + 2;
      v13 = a1 + 3;
      sub_19C402570(a1, a1 + 1, a1 + 2, a1 + 3, a3);
      if (!((unsigned int (*)(_QWORD, _QWORD))*a3)(*(a2 - 1), a1[3]))
        return 1;
      v14 = *v13;
      *v13 = *(a2 - 1);
      *(a2 - 1) = v14;
      if (!((unsigned int (*)(_QWORD, _QWORD))*a3)(*v13, *v12))
        return 1;
      v15 = *v12;
      *v12 = *v13;
      *v13 = v15;
      if (!((unsigned int (*)(void))*a3)())
        return 1;
      v17 = a1[1];
      v16 = a1[2];
      v18 = *a1;
      a1[1] = v16;
      a1[2] = v17;
      v19 = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v16, v18);
      goto LABEL_17;
    default:
      v20 = ((uint64_t (*)(_QWORD, _QWORD))*a3)(a1[1], *a1);
      v21 = a1 + 2;
      v22 = ((uint64_t (*)(_QWORD, _QWORD))*a3)(a1[2], a1[1]);
      if ((v20 & 1) != 0)
      {
        v23 = *a1;
        if (v22)
        {
          *a1 = a1[2];
          a1[2] = v23;
        }
        else
        {
          v27 = a1[2];
          *a1 = a1[1];
          a1[1] = v23;
          if ((*a3)(v27))
            *(int8x16_t *)(a1 + 1) = vextq_s8(*(int8x16_t *)(a1 + 1), *(int8x16_t *)(a1 + 1), 8uLL);
        }
      }
      else if (v22)
      {
        v25 = a1[1];
        a1[1] = a1[2];
        a1[2] = v25;
        if (((unsigned int (*)(void))*a3)())
          *(int8x16_t *)a1 = vextq_s8(*(int8x16_t *)a1, *(int8x16_t *)a1, 8uLL);
      }
      v28 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v29 = 0;
      v30 = 0;
      break;
  }
  while (1)
  {
    if (((unsigned int (*)(_QWORD, _QWORD))*a3)(*v28, *v21))
    {
      v32 = *v28;
      v33 = v29;
      do
      {
        v34 = (char *)a1 + v33;
        *(_QWORD *)((char *)a1 + v33 + 24) = *(_QWORD *)((char *)a1 + v33 + 16);
        if (v33 == -16)
        {
          v31 = a1;
          goto LABEL_29;
        }
        v33 -= 8;
      }
      while ((((uint64_t (*)(uint64_t, _QWORD))*a3)(v32, *((_QWORD *)v34 + 1)) & 1) != 0);
      v31 = (_QWORD *)((char *)a1 + v33 + 24);
LABEL_29:
      *v31 = v32;
      if (++v30 == 8)
        return v28 + 1 == a2;
    }
    v21 = v28;
    v29 += 8;
    if (++v28 == a2)
      return 1;
  }
}

uint64_t sub_19C4029D0(uint64_t result, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v9;
  _BYTE *v10;
  uint64_t v11;

  if (a3 <= 0x3FF)
  {
    v9 = result;
    if (qword_1EE41C000 != -1)
      dispatch_once(&qword_1EE41C000, &unk_1E3D3C5A8);
    v10 = pthread_getspecific(qword_1EE41BFF8);
    if (!v10)
    {
      v10 = malloc_type_malloc(0x400uLL, 0x55DFA995uLL);
      pthread_setspecific(qword_1EE41BFF8, v10);
    }
    memcpy(v10, a2, a3);
    v10[a3] = 0;
    v11 = *(_QWORD *)(v9 + 2084);
    if (v11)
      return sub_19C402B08(v9, (*(_DWORD *)(v11 + 4) & 0xFFFFFFFC) + v11, v10, a3, 0, a4, a5);
    else
      return sub_19C402DF0(v9, v10, a3, 0, a4, a5);
  }
  return result;
}

uint64_t sub_19C402B08(uint64_t a1, uint64_t a2, _BYTE *a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7)
{
  unsigned int v8;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  _DWORD *v19;
  _BOOL4 v20;
  uint64_t result;
  void (*v22)(_QWORD, _DWORD *, char *);
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  char v28;
  char v29;

  v8 = a4;
  v12 = (_QWORD *)(a1 + 2084);
  v13 = a5;
  if (a5 <= a4)
    v14 = a4;
  else
    v14 = a5;
  if (v14 != a5)
  {
    while (1)
    {
      v15 = *(_DWORD *)(a2 + 4 * a3[v13]);
      v16 = v15 & 3;
      if (v16 != 1)
        break;
      a2 = (v15 & 0xFFFFFFFC) + *v12;
      if (v14 == ++v13)
        goto LABEL_7;
    }
    if (v16 == 2)
      return sub_19C4035F4(*(_DWORD *)(a1 + 2068), (unsigned int *)((v15 & 0xFFFFFFFC) + *v12), a3, a4, (int)v13 + 1, a6, a7);
    if (v16 == 3)
      return sub_19C4031E8(a1, (int8x8_t *)((v15 & 0xFFFFFFFC) + *v12), a3, a4, (int)v13 + 1, a6, a7);
    return 0;
  }
LABEL_7:
  v17 = *(_DWORD *)(a2 + 1024);
  if (!v17)
  {
    if ((a6 & 1) != 0)
      return 0;
LABEL_25:
    v24 = 0;
    v25 = v8 + 1;
    while (1)
    {
      v26 = *(_DWORD *)(a2 + 4 * v24);
      a3[v13] = v24;
      v27 = v26 & 3;
      if (v27 == 1)
      {
        if ((sub_19C402B08(a1, (v26 & 0xFFFFFFFC) + *v12, a3, v25, (v13 + 1), 0, a7) & 1) != 0)
          return 1;
      }
      else if (v27 == 2)
      {
        if ((sub_19C4035F4(*(_DWORD *)(a1 + 2068), (unsigned int *)((v26 & 0xFFFFFFFC) + *v12), a3, v25, (int)v13 + 1, 0, a7) & 1) != 0)return 1;
      }
      else if (v27 == 3
             && (sub_19C4031E8(a1, (int8x8_t *)((v26 & 0xFFFFFFFC) + *v12), a3, v25, (int)v13 + 1, 0, a7) & 1) != 0)
      {
        return 1;
      }
      if (++v24 == 256)
        return 0;
    }
  }
  v28 = a6;
  v18 = *(_DWORD *)(a2 + 1032);
  v19 = malloc_type_malloc(a4 + 21, 0x18AD45BuLL);
  v19[4] = v8;
  *((_BYTE *)v19 + v8 + 20) = 0;
  memcpy(v19 + 5, a3, v8);
  v19[1] = 1065353216;
  v19[2] = v17;
  *v19 = v18;
  v19[3] = 1;
  if (!a7)
    goto LABEL_20;
  if (*(_DWORD *)a7 <= 1u)
  {
    *(_DWORD *)(a7 + 4) = v17;
    *(_DWORD *)(a7 + 8) = v18;
    v20 = 1;
    goto LABEL_21;
  }
  v29 = 0;
  v22 = *(void (**)(_QWORD, _DWORD *, char *))(a7 + 24);
  if (v22)
  {
    v22(*(_QWORD *)(a7 + 16), v19, &v29);
    v20 = v29 != 0;
  }
  else
  {
LABEL_20:
    v20 = 0;
  }
LABEL_21:
  v23 = v19[3] - 1;
  v19[3] = v23;
  if (!v23)
    free(v19);
  result = v20;
  if (!v20 && (v28 & 1) == 0)
    goto LABEL_25;
  return result;
}

uint64_t sub_19C402DF0(unint64_t a1, _BYTE *a2, unsigned int a3, unsigned int a4, char a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  _DWORD *v16;
  _BOOL4 v17;
  uint64_t result;
  void (*v19)(_QWORD, _DWORD *, char *);
  int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;

  v11 = a4;
  if (a4 <= a3)
    v12 = a3;
  else
    v12 = a4;
  if (v12 != a4)
  {
    while (1)
    {
      v13 = *(_QWORD *)(a1 + 8 * a2[v11] + 16);
      if ((v13 & 3) != 1)
        break;
      a1 = v13 & 0xFFFFFFFFFFFFFFFCLL;
      if (v12 == ++v11)
        goto LABEL_7;
    }
    if ((v13 & 3) == 2)
      return sub_19C403020(v13 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, (int)v11 + 1, a5, a6);
    return 0;
  }
LABEL_7:
  v14 = *(_DWORD *)(a1 + 12);
  if (!v14)
  {
    if ((a5 & 1) != 0)
      return 0;
    v15 = v11;
LABEL_24:
    v21 = 0;
    v22 = a3 + 1;
    v23 = a1 + 16;
    while (1)
    {
      v24 = *(_QWORD *)(v23 + 8 * v21);
      a2[v15] = v21;
      if ((v24 & 3) == 1)
      {
        if ((sub_19C402DF0(v24 & 0xFFFFFFFFFFFFFFFCLL, a2, v22, (v11 + 1), 0, a6) & 1) != 0)
          return 1;
      }
      else if ((v24 & 3) == 2 && (sub_19C403020(v24 & 0xFFFFFFFFFFFFFFFCLL, a2, v22, (int)v11 + 1, 0, a6) & 1) != 0)
      {
        return 1;
      }
      if (++v21 == 256)
        return 0;
    }
  }
  v15 = v11;
  v25 = *(_QWORD *)(a1 + 4);
  v16 = malloc_type_malloc(v11 + 21, 0x18AD45BuLL);
  v16[4] = v11;
  *((_BYTE *)v16 + v11 + 20) = 0;
  memcpy(v16 + 5, a2, v11);
  *(_QWORD *)v16 = v25;
  v16[2] = v14;
  v16[3] = 1;
  if (!a6)
    goto LABEL_19;
  if (*(_DWORD *)a6 <= 1u)
  {
    *(_DWORD *)(a6 + 4) = v14;
    *(_DWORD *)(a6 + 8) = v25;
    v17 = 1;
    goto LABEL_20;
  }
  v26 = 0;
  v19 = *(void (**)(_QWORD, _DWORD *, char *))(a6 + 24);
  if (v19)
  {
    v19(*(_QWORD *)(a6 + 16), v16, &v26);
    v17 = v26 != 0;
  }
  else
  {
LABEL_19:
    v17 = 0;
  }
LABEL_20:
  v20 = v16[3] - 1;
  v16[3] = v20;
  if (!v20)
    free(v16);
  result = v17;
  if (!v17 && (a5 & 1) == 0)
    goto LABEL_24;
  return result;
}

uint64_t sub_19C403020(uint64_t result, _BYTE *a2, unsigned int a3, int a4, char a5, uint64_t a6)
{
  char v7;
  int v8;
  uint64_t v10;
  char *v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  int v16;
  size_t v17;
  size_t v18;
  int v19;
  _DWORD *v20;
  _BOOL4 v21;
  void (*v22)(_QWORD, _DWORD *, char *);
  int v23;
  char *__dst;
  size_t v27;
  uint64_t v29;
  char v30;

  if (result)
  {
    v7 = a5;
    v8 = a4;
    v10 = result;
    v11 = &a2[a4];
    v12 = (int)(a3 - a4);
    v27 = a3;
    __dst = &a2[a3];
    while (1)
    {
      v13 = *(unsigned __int16 *)(v10 + 24);
      if ((int)v12 > (int)v13
        || memcmp((const void *)(v10 + 26), v11, v12)
        || (_DWORD)v12 != (_DWORD)v13 && (v7 & 1) != 0)
      {
        goto LABEL_4;
      }
      v14 = a6;
      v15 = (v13 + v8);
      v16 = a3;
      v17 = v15 - a3;
      v18 = v27;
      if ((int)v17 >= 1)
      {
        memcpy(__dst, (const void *)(v10 + 26 + v13 - (int)v17), v17);
        v18 = v15;
        v16 = v15;
      }
      a2[v18] = 0;
      v19 = *(_DWORD *)(v10 + 20);
      v29 = *(_QWORD *)(v10 + 12);
      v20 = malloc_type_malloc(v18 + 21, 0x18AD45BuLL);
      v20[4] = v16;
      *((_BYTE *)v20 + v18 + 20) = 0;
      memcpy(v20 + 5, a2, v18);
      *(_QWORD *)v20 = v29;
      v20[2] = v19;
      v20[3] = 1;
      a6 = v14;
      if (v14)
      {
        if (*(_DWORD *)v14 == 1)
          goto LABEL_15;
        if (*(_DWORD *)v14)
        {
          v30 = 0;
          v22 = *(void (**)(_QWORD, _DWORD *, char *))(v14 + 24);
          if (v22)
          {
            v22(*(_QWORD *)(v14 + 16), v20, &v30);
            v21 = v30 != 0;
            goto LABEL_19;
          }
        }
        else if ((_DWORD)v12 == (_DWORD)v13)
        {
LABEL_15:
          *(_DWORD *)(v14 + 4) = v19;
          *(_DWORD *)(v14 + 8) = v29;
          v21 = 1;
          goto LABEL_19;
        }
      }
      v21 = 0;
LABEL_19:
      v8 = a4;
      v7 = a5;
      v23 = v20[3] - 1;
      v20[3] = v23;
      if (!v23)
        free(v20);
      if (v21)
        return 1;
LABEL_4:
      v10 = *(_QWORD *)v10;
      if (!v10)
        return 0;
    }
  }
  return result;
}

uint64_t sub_19C4031E8(uint64_t a1, int8x8_t *a2, _BYTE *a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7)
{
  unsigned int v8;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int8x8_t v16;
  __int32 v17;
  uint8x8_t v18;
  uint8x8_t v19;
  uint8x8_t v20;
  uint8x8_t v21;
  __int32 v22;
  int v23;
  __int32 v24;
  __int32 v25;
  _DWORD *v26;
  _BOOL4 v27;
  uint64_t result;
  void (*v29)(_QWORD, _DWORD *, char *);
  int v30;
  unsigned int v31;
  uint64_t v32;
  int v33;
  int8x8_t v34;
  __int32 v35;
  uint8x8_t v36;
  uint8x8_t v37;
  uint8x8_t v38;
  uint8x8_t v39;
  __int32 v40;
  int v41;
  char v42;
  char v43;

  v8 = a4;
  v12 = (_QWORD *)(a1 + 2084);
  if (a5 <= a4)
    v13 = a4;
  else
    v13 = a5;
  if ((_DWORD)v13 != a5)
  {
    do
    {
      v14 = a3[a5];
      v15 = v14 >> 6;
      v16 = a2[v14 >> 6];
      if (((1 << v14) & *(_QWORD *)&v16) == 0)
        return 0;
      if (v14 >= 0x40)
      {
        v18 = (uint8x8_t)vcnt_s8(*a2);
        v18.i16[0] = vaddlv_u8(v18);
        v17 = v18.i32[0];
        if ((v14 & 0x80) != 0)
        {
          if (v15 <= 1)
            LODWORD(v15) = 1;
          v19 = (uint8x8_t)vcnt_s8(a2[1]);
          v19.i16[0] = vaddlv_u8(v19);
          v17 += v19.i32[0];
          if ((_DWORD)v15 != 2)
          {
            v20 = (uint8x8_t)vcnt_s8(a2[2]);
            v20.i16[0] = vaddlv_u8(v20);
            v17 += v20.i32[0];
          }
        }
      }
      else
      {
        v17 = 0;
      }
      v21 = (uint8x8_t)vcnt_s8((int8x8_t)(((1 << v14) - 1) & *(_QWORD *)&v16));
      v21.i16[0] = vaddlv_u8(v21);
      v22 = a2[5].i32[v17 + v21.i32[0] + 1];
      v23 = v22 & 3;
      if (v23 != 3)
      {
        if (v23 == 1)
          return sub_19C402B08(a1, (v22 & 0xFFFFFFFC) + *v12, a3, a4, a5 + 1, a6, a7);
        if (v23 == 2)
          return sub_19C4035F4(*(_DWORD *)(a1 + 2068), (unsigned int *)((v22 & 0xFFFFFFFC) + *v12), a3, a4, a5 + 1, a6, a7);
        return 0;
      }
      a2 = (int8x8_t *)((v22 & 0xFFFFFFFC) + *v12);
    }
    while ((_DWORD)v13 != ++a5);
  }
  v24 = a2[5].i32[0];
  if (!v24)
  {
    if ((a6 & 1) != 0)
      return 0;
LABEL_33:
    v31 = 0;
    v32 = v8 + 1;
    while (1)
    {
      if (v31 >> 6 <= 1)
        v33 = 1;
      else
        v33 = v31 >> 6;
      v34 = a2[v31 >> 6];
      if ((*(_QWORD *)&v34 & (1 << v31)) != 0)
      {
        if (v31 > 0x3F)
        {
          v36 = (uint8x8_t)vcnt_s8(*a2);
          v36.i16[0] = vaddlv_u8(v36);
          v35 = v36.i32[0];
          if (v31 >= 0x80)
          {
            v37 = (uint8x8_t)vcnt_s8(a2[1]);
            v37.i16[0] = vaddlv_u8(v37);
            v35 += v37.i32[0];
            if (v33 != 2)
            {
              v38 = (uint8x8_t)vcnt_s8(a2[2]);
              v38.i16[0] = vaddlv_u8(v38);
              v35 += v38.i32[0];
            }
          }
        }
        else
        {
          v35 = 0;
        }
        v39 = (uint8x8_t)vcnt_s8((int8x8_t)(*(_QWORD *)&v34 & ((1 << v31) - 1)));
        v39.i16[0] = vaddlv_u8(v39);
        v40 = a2[5].i32[v35 + v39.i32[0] + 1];
        a3[v13] = v31;
        v41 = v40 & 3;
        if (v41 == 1)
        {
          if ((sub_19C402B08(a1, *v12 + (v40 & 0xFFFFFFFC), a3, v32, (v13 + 1), 0, a7) & 1) != 0)
            return 1;
        }
        else if (v41 == 2)
        {
          if ((sub_19C4035F4(*(_DWORD *)(a1 + 2068), (unsigned int *)(*v12 + (v40 & 0xFFFFFFFC)), a3, v32, (int)v13 + 1, 0, a7) & 1) != 0)return 1;
        }
        else if (v41 == 3
               && (sub_19C4031E8(a1, *v12 + (v40 & 0xFFFFFFFC), a3, v32, (v13 + 1), 0, a7) & 1) != 0)
        {
          return 1;
        }
      }
      if (++v31 == 256)
        return 0;
    }
  }
  v42 = a6;
  v25 = a2[4].i32[1];
  v26 = malloc_type_malloc(a4 + 21, 0x18AD45BuLL);
  v26[4] = v8;
  *((_BYTE *)v26 + v8 + 20) = 0;
  memcpy(v26 + 5, a3, v8);
  v26[1] = 1065353216;
  v26[2] = v24;
  *v26 = v25;
  v26[3] = 1;
  if (!a7)
    goto LABEL_28;
  if (*(_DWORD *)a7 <= 1u)
  {
    *(_DWORD *)(a7 + 4) = v24;
    *(_DWORD *)(a7 + 8) = v25;
    v27 = 1;
    goto LABEL_29;
  }
  v43 = 0;
  v29 = *(void (**)(_QWORD, _DWORD *, char *))(a7 + 24);
  if (v29)
  {
    v29(*(_QWORD *)(a7 + 16), v26, &v43);
    v27 = v43 != 0;
  }
  else
  {
LABEL_28:
    v27 = 0;
  }
LABEL_29:
  v30 = v26[3] - 1;
  v26[3] = v30;
  if (!v30)
    free(v26);
  result = v27;
  if (!v27 && (v42 & 1) == 0)
    goto LABEL_33;
  return result;
}

uint64_t sub_19C4035F4(char a1, unsigned int *a2, _BYTE *a3, unsigned int a4, int a5, char a6, uint64_t a7)
{
  char v7;
  int v8;
  int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  size_t v18;
  size_t v19;
  size_t v20;
  int v21;
  int v22;
  _DWORD *v23;
  _BOOL4 v24;
  void (*v25)(_QWORD, _DWORD *, _OWORD *);
  int v26;
  char *v27;
  unsigned int v28;
  int v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  int v34;
  unsigned int v35;
  size_t v36;
  unsigned int v37;
  int v38;
  int v39;
  int v40;
  _BYTE *v41;
  int v42;
  int v43;
  _DWORD *v44;
  _BOOL4 v45;
  void (*v46)(_QWORD, _DWORD *, char *);
  int v47;
  char *__dst;
  size_t v50;
  char *v51;
  unsigned int v54;
  unsigned int v55;
  int v60;
  char *__s2;
  char *__s2a;
  char v64;
  _OWORD __s1[16];
  uint64_t v66;

  v7 = a6;
  v8 = a5;
  v66 = *MEMORY[0x1E0C80C00];
  v10 = a4 - a5;
  v11 = *a2;
  if ((a1 & 2) == 0)
  {
    if (v11)
    {
      v12 = a4;
      v13 = 0;
      __s2 = &a3[a5];
      v50 = a4;
      __dst = &a3[a4];
      v54 = *a2;
      do
      {
        v15 = (char *)a2 + v13;
        v14 = *((unsigned __int16 *)v15 + 8);
        if (v10 > (int)v14)
          goto LABEL_6;
        v16 = v15 + 8;
        v17 = v15 + 18;
        if (memcmp(v15 + 18, __s2, v10) || v10 != (_DWORD)v14 && (v7 & 1) != 0)
          goto LABEL_6;
        v18 = (v14 + v8);
        v19 = (v18 - v12);
        v20 = v50;
        if ((int)v19 >= 1)
        {
          memcpy(__dst, &v17[v14 - (int)v19], v19);
          v20 = v18;
          v12 = v18;
        }
        a3[v20] = 0;
        v21 = *((_DWORD *)v16 + 1);
        v22 = *(_DWORD *)v16;
        v23 = malloc_type_malloc(v20 + 21, 0x18AD45BuLL);
        v23[4] = v12;
        *((_BYTE *)v23 + v20 + 20) = 0;
        memcpy(v23 + 5, a3, v20);
        v23[1] = 1065353216;
        v23[2] = v21;
        *v23 = v22;
        v23[3] = 1;
        if (a7)
        {
          v7 = a6;
          v12 = a4;
          if (*(_DWORD *)a7 != 1)
          {
            v11 = v54;
            if (*(_DWORD *)a7)
            {
              LOBYTE(__s1[0]) = 0;
              v25 = *(void (**)(_QWORD, _DWORD *, _OWORD *))(a7 + 24);
              if (v25)
              {
                v25(*(_QWORD *)(a7 + 16), v23, __s1);
                v24 = LOBYTE(__s1[0]) != 0;
                goto LABEL_23;
              }
            }
            else if (v10 == (_DWORD)v14)
            {
              *(_DWORD *)(a7 + 4) = v21;
              *(_DWORD *)(a7 + 8) = v22;
              v24 = 1;
LABEL_23:
              v8 = a5;
              goto LABEL_24;
            }
            v24 = 0;
            goto LABEL_23;
          }
          *(_DWORD *)(a7 + 4) = v21;
          *(_DWORD *)(a7 + 8) = v22;
          v24 = 1;
          v11 = v54;
          v8 = a5;
        }
        else
        {
          v24 = 0;
          v7 = a6;
          v11 = v54;
          v8 = a5;
          v12 = a4;
        }
LABEL_24:
        v26 = v23[3] - 1;
        v23[3] = v26;
        if (!v26)
          free(v23);
        if (v24)
          return 1;
        LODWORD(v14) = *((unsigned __int16 *)v16 + 4);
LABEL_6:
        v13 += v14 + 10;
      }
      while (v13 < v11);
    }
    return 0;
  }
  memset(__s1, 0, sizeof(__s1));
  if (!v11)
    return 0;
  v27 = 0;
  v28 = 0;
  v60 = a5 - a4;
  __s2a = &a3[a5];
  v51 = &a3[a4];
  v55 = v11;
  while (1)
  {
    v30 = (char *)a2 + v28;
    v31 = v30[18];
    if (v27)
    {
      v32 = v27[10];
      if (v31 > v32)
        memcpy((char *)__s1 + v32, v27 + 11, v31 - v32);
    }
    v27 = v30 + 8;
    v33 = *((unsigned __int16 *)v30 + 8);
    v34 = v33 + v31;
    if ((int)(v33 + v31) < v10)
      goto LABEL_32;
    if (a4 != v8)
    {
      v29 = (int)v31 >= v10 ? v10 : v31;
      if (memcmp(__s1, __s2a, v29))
        goto LABEL_32;
    }
    v35 = v10 - v31;
    if (v10 - (int)v31 >= 0)
    {
      v36 = (int)v33 >= (int)v35 ? v35 : v33;
      if (memcmp(v27 + 11, &__s2a[v31], v36))
        goto LABEL_32;
    }
    if (v10 != v34 && (v7 & 1) != 0)
      goto LABEL_32;
    v37 = v31 + v8;
    v38 = v37 - a4;
    if ((int)(v37 - a4) < 1)
    {
      v37 = a4;
    }
    else
    {
      memcpy(v51, (char *)__s1 + v31 - v38, v37 - a4);
      v33 = *((unsigned __int16 *)v27 + 4);
      LODWORD(v31) = v27[10];
    }
    v39 = v60 + v33 + v31;
    if (v39 < 1)
    {
      v41 = a3;
    }
    else
    {
      v40 = v39 - (v38 & ~(v38 >> 31));
      v41 = a3;
      memcpy(&a3[v37], &v27[v33 - v40 + 11], v40);
      v37 += v40;
    }
    v41[v37] = 0;
    v42 = *((_DWORD *)v27 + 1);
    v43 = *(_DWORD *)v27;
    v44 = malloc_type_malloc(v37 + 21, 0x18AD45BuLL);
    v44[4] = v37;
    *((_BYTE *)v44 + v37 + 20) = 0;
    memcpy(v44 + 5, v41, v37);
    v44[1] = 1065353216;
    v44[2] = v42;
    *v44 = v43;
    v44[3] = 1;
    if (!a7)
    {
      v45 = 0;
      v11 = v55;
      v8 = a5;
      goto LABEL_60;
    }
    v11 = v55;
    v8 = a5;
    if (*(_DWORD *)a7 == 1)
      goto LABEL_55;
    if (*(_DWORD *)a7)
    {
      v64 = 0;
      v46 = *(void (**)(_QWORD, _DWORD *, char *))(a7 + 24);
      if (v46)
      {
        v46(*(_QWORD *)(a7 + 16), v44, &v64);
        v45 = v64 != 0;
        goto LABEL_60;
      }
    }
    else if (v10 == v34)
    {
LABEL_55:
      *(_DWORD *)(a7 + 4) = v42;
      *(_DWORD *)(a7 + 8) = v43;
      v45 = 1;
      goto LABEL_60;
    }
    v45 = 0;
LABEL_60:
    v47 = v44[3] - 1;
    v44[3] = v47;
    if (!v47)
      free(v44);
    if (v45)
      return 1;
    v33 = *((unsigned __int16 *)v27 + 4);
    v7 = a6;
LABEL_32:
    v28 += v33 + 11;
    if (v28 >= v11)
      return 0;
  }
}

uint64_t sub_19C403AC4()
{
  return pthread_key_create((pthread_key_t *)&qword_1EE41BFF8, (void (__cdecl *)(void *))MEMORY[0x1E0C834A8]);
}

uint64_t sub_19C403AD8(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = a2;
  if (a2)
    ++*(_DWORD *)(a2 + 12);
  return result;
}

void sub_19C403AF0(int a1, _DWORD *a2)
{
  int v2;

  if (a2)
  {
    v2 = a2[3] - 1;
    a2[3] = v2;
    if (!v2)
      free(a2);
  }
}

uint64_t sub_19C403B10(uint64_t a1, uint64_t a2)
{
  float v2;
  float v3;
  size_t v4;
  int v5;
  int v6;
  uint64_t v8;

  v2 = *(float *)(a1 + 8);
  v3 = *(float *)(a2 + 8);
  if (v2 == v3)
  {
    v4 = *(unsigned int *)(a1 + 16);
    v5 = *(_DWORD *)(a2 + 16);
    if ((_DWORD)v4 == v5)
      v6 = memcmp((const void *)(a1 + 20), (const void *)(a2 + 20), v4);
    else
      v6 = v4 - v5;
    v8 = -1;
    if (v6 <= 0)
      v8 = 1;
    if (v6)
      return v8;
    else
      return 0;
  }
  else if (v2 <= v3)
  {
    return 1;
  }
  else
  {
    return -1;
  }
}

uint64_t sub_19C403B74(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = a2;
  if (a2)
    ++*(_DWORD *)(a2 + 12);
  return result;
}

void sub_19C403B8C(int a1, _DWORD *a2)
{
  int v2;

  if (a2)
  {
    v2 = a2[3] - 1;
    a2[3] = v2;
    if (!v2)
      free(a2);
  }
}

uint64_t sub_19C403BAC(uint64_t a1, uint64_t a2)
{
  size_t v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  if (*(float *)a1 != *(float *)a2)
  {
    if (*(float *)a1 <= *(float *)a2)
      return 1;
    else
      return -1;
  }
  v2 = *(unsigned int *)(a1 + 16);
  v3 = *(_DWORD *)(a2 + 16);
  if ((_DWORD)v2 != v3)
  {
    v4 = v2 - v3;
LABEL_15:
    if (v4 > 0)
      return -1;
    else
      return 1;
  }
  v4 = *(_DWORD *)(a1 + 8) - *(_DWORD *)(a2 + 8);
  if (v4)
    goto LABEL_15;
  v5 = memcmp((const void *)(a1 + 20), (const void *)(a2 + 20), v2);
  v6 = -1;
  if (v5 <= 0)
    v6 = 1;
  if (v5)
    return v6;
  else
    return 0;
}

uint64_t sub_19C403C34(uint64_t a1, uint64_t a2)
{
  size_t v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  if (*(float *)a1 != *(float *)a2)
  {
    if (*(float *)a1 >= *(float *)a2)
      return 1;
    else
      return -1;
  }
  v2 = *(unsigned int *)(a1 + 16);
  v3 = *(_DWORD *)(a2 + 16);
  if ((_DWORD)v2 != v3)
  {
    v4 = v2 - v3;
LABEL_15:
    if (v4 < 0)
      return -1;
    else
      return 1;
  }
  v4 = *(_DWORD *)(a1 + 8) - *(_DWORD *)(a2 + 8);
  if (v4)
    goto LABEL_15;
  v5 = memcmp((const void *)(a1 + 20), (const void *)(a2 + 20), v2);
  v6 = -1;
  if (v5 >= 0)
    v6 = 1;
  if (v5)
    return v6;
  else
    return 0;
}

uint64_t sub_19C403CBC(uint64_t a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4, unsigned int a5, __CFBinaryHeap *a6, __CFBinaryHeap *a7)
{
  unsigned int v8;
  _QWORD *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  _DWORD *v21;
  int v22;
  char v23;
  int v24;

  v8 = a4;
  if (a5 >= a4)
  {
LABEL_5:
    if (qword_1EE41C000 != -1)
      dispatch_once(&qword_1EE41C000, &unk_1E3D3C5A8);
    v16 = pthread_getspecific(qword_1EE41BFF8);
    if (!v16)
    {
      v16 = malloc_type_malloc(0x400uLL, 0x55DFA995uLL);
      pthread_setspecific(qword_1EE41BFF8, v16);
    }
    if ((int)(v8 + 1) <= 1023)
    {
      memcpy(v16, a3, v8);
      v17 = 0;
      *((_BYTE *)v16 + (int)(v8 + 1)) = 0;
      do
      {
        v18 = *(unsigned int *)(a2 + 4 * v17);
        *((_BYTE *)v16 + v8) = v17;
        sub_19C40434C(*(_QWORD *)(a1 + 2084), v18, v16, v8 + 1, a6);
        ++v17;
      }
      while (v17 != 256);
    }
    v19 = *(_DWORD *)(a2 + 1024);
    if (!v19)
      goto LABEL_15;
    v20 = *(_DWORD *)(a2 + 1032);
    v21 = malloc_type_malloc(v8 + 21, 0x18AD45BuLL);
    v21[4] = v8;
    *((_BYTE *)v21 + v8 + 20) = 0;
    memcpy(v21 + 5, a3, v8);
    v21[1] = 1065353216;
    v21[2] = v19;
    *v21 = v20;
    v21[3] = 1;
    v22 = sub_19C404474((float *)v21, a6, a7);
    v23 = v22;
    v24 = v21[3] - 1;
    v21[3] = v24;
    if (v24)
    {
      if (v22)
      {
LABEL_15:
        sub_19C40467C(a1, a6, a7);
        return 1;
      }
    }
    else
    {
      free(v21);
      if ((v23 & 1) != 0)
        goto LABEL_15;
    }
    return 0;
  }
  v11 = (_QWORD *)(a1 + 2084);
  v12 = a5;
  while (1)
  {
    v13 = *(_DWORD *)(a2 + 4 * a3[v12]);
    v14 = v13 & 3;
    if (v14 != 1)
      break;
    a2 = (v13 & 0xFFFFFFFC) + *v11;
    if ((_DWORD)a4 == (_DWORD)++v12)
      goto LABEL_5;
  }
  if (v14 != 2)
  {
    if (v14 == 3)
      return sub_19C40488C(a1, (int8x8_t *)((v13 & 0xFFFFFFFC) + *v11), a3, a4, (int)v12 + 1, a6, a7);
    return 1;
  }
  return sub_19C404C6C(a1, (unsigned int *)((v13 & 0xFFFFFFFC) + *v11), (char *)a3, a4, (int)v12 + 1, a6, a7);
}

uint64_t sub_19C403F40(uint64_t a1, unint64_t a2, unsigned __int8 *a3, unsigned int a4, unsigned int a5, __CFBinaryHeap *a6, __CFBinaryHeap *a7)
{
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  _DWORD *v20;
  int v21;
  int v22;
  int v23;
  __CFBinaryHeap *v25;

  if (a5 >= a4)
  {
LABEL_5:
    if (qword_1EE41C000 != -1)
      dispatch_once(&qword_1EE41C000, &unk_1E3D3C5A8);
    v25 = a7;
    v15 = pthread_getspecific(qword_1EE41BFF8);
    if (!v15)
    {
      v15 = malloc_type_malloc(0x400uLL, 0x55DFA995uLL);
      pthread_setspecific(qword_1EE41BFF8, v15);
    }
    memcpy(v15, a3, a4);
    v16 = 0;
    *((_BYTE *)v15 + (int)(a4 + 1)) = 0;
    do
    {
      v17 = *(_QWORD *)(a2 + 16 + 8 * v16);
      *((_BYTE *)v15 + a4) = v16;
      sub_19C40434C(*(_QWORD *)(a1 + 2084), v17, v15, a4 + 1, a6);
      ++v16;
    }
    while (v16 != 256);
    v18 = *(_DWORD *)(a2 + 12);
    if (!v18)
      return sub_19C40467C(a1, a6);
    v19 = *(_DWORD *)(a2 + 4);
    v20 = malloc_type_malloc(a4 + 21, 0x18AD45BuLL);
    v20[4] = a4;
    *((_BYTE *)v20 + a4 + 20) = 0;
    memcpy(v20 + 5, a3, a4);
    v20[1] = 1065353216;
    v20[2] = v18;
    *v20 = v19;
    v20[3] = 1;
    v21 = sub_19C404474((float *)v20, a6, v25);
    v22 = v21;
    v23 = v20[3] - 1;
    v20[3] = v23;
    if (v23)
    {
      if (v21)
        return sub_19C40467C(a1, a6);
    }
    else
    {
      free(v20);
      if (v22)
        return sub_19C40467C(a1, a6);
    }
    return 0;
  }
  v13 = a5;
  while (1)
  {
    v14 = *(_QWORD *)(a2 + 8 * a3[v13] + 16);
    if ((v14 & 3) != 1)
      break;
    a2 = v14 & 0xFFFFFFFFFFFFFFFCLL;
    if (a4 == (_DWORD)++v13)
      goto LABEL_5;
  }
  if ((v14 & 3) == 2)
    return sub_19C40418C((uint64_t *)(v14 & 0xFFFFFFFFFFFFFFFCLL), (char *)a3, a4, (int)v13 + 1, a6, a7);
  else
    return 1;
}

uint64_t sub_19C40418C(uint64_t *a1, char *a2, int a3, unsigned int a4, __CFBinaryHeap *a5, __CFBinaryHeap *a6)
{
  char v6;
  char *v11;
  int v12;
  char *v13;
  size_t v14;
  int v15;
  int v16;
  _DWORD *v17;
  int v18;

  if (a4 <= 0x3FF)
  {
    if (qword_1EE41C000 != -1)
      dispatch_once(&qword_1EE41C000, &unk_1E3D3C5A8);
    v11 = (char *)pthread_getspecific(qword_1EE41BFF8);
    if (!v11)
    {
      v11 = (char *)malloc_type_malloc(0x400uLL, 0x55DFA995uLL);
      pthread_setspecific(qword_1EE41BFF8, v11);
    }
    memcpy(v11, a2, a4);
    v11[a4] = 0;
    if (a1)
    {
      v12 = a3 - a4;
      v13 = &a2[a4];
      v6 = 1;
      do
      {
        memcpy(&v11[a4], (char *)a1 + 26, *((unsigned __int16 *)a1 + 12));
        v14 = *((unsigned __int16 *)a1 + 12) + (unint64_t)a4;
        v11[v14] = 0;
        if (v12 <= *((unsigned __int16 *)a1 + 12) && !memcmp((char *)a1 + 26, v13, v12))
        {
          v15 = *((_DWORD *)a1 + 5);
          v16 = *((_DWORD *)a1 + 3);
          v17 = malloc_type_malloc(v14 + 21, 0x18AD45BuLL);
          v17[4] = v14;
          *((_BYTE *)v17 + v14 + 20) = 0;
          memcpy(v17 + 5, v11, v14);
          v17[1] = 1065353216;
          v17[2] = v15;
          *v17 = v16;
          v17[3] = 1;
          v6 = sub_19C404474((float *)v17, a5, a6);
          v18 = v17[3] - 1;
          v17[3] = v18;
          if (!v18)
            free(v17);
        }
        a1 = (uint64_t *)*a1;
      }
      while (a1);
    }
    else
    {
      v6 = 1;
    }
  }
  else
  {
    v6 = 0;
  }
  return v6 & 1;
}

void sub_19C40434C(uint64_t a1, uint64_t a2, const void *a3, unsigned int a4, __CFBinaryHeap *a5)
{
  uint64_t v9;
  int v10;
  _DWORD *v11;
  int v12;

  v9 = a2 & 3;
  if (a1)
  {
    switch(v9)
    {
      case 3:
        v10 = *(_DWORD *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + a1 + 32);
        break;
      case 2:
        v10 = *(_DWORD *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + a1 + 4);
        break;
      case 1:
        v10 = *(_DWORD *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + a1 + 1028);
        break;
      default:
        return;
    }
  }
  else if (v9 == 2)
  {
    v10 = *(_DWORD *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  }
  else
  {
    if (v9 != 1)
      return;
    v10 = *(_DWORD *)(a2 & 0xFFFFFFFFFFFFFFFCLL);
  }
  v11 = malloc_type_malloc(a4 + 25, 0x752CEB8EuLL);
  *(_QWORD *)v11 = a2;
  v11[2] = v10;
  v11[3] = 1;
  v11[4] = a4;
  *((_BYTE *)v11 + a4 + 20) = 0;
  memcpy(v11 + 5, a3, a4);
  CFBinaryHeapAddValue(a5, v11);
  v12 = v11[3] - 1;
  v11[3] = v12;
  if (!v12)
    free(v11);
}

uint64_t sub_19C404474(float *value, __CFBinaryHeap *a2, CFBinaryHeapRef heap)
{
  float *Minimum;
  float *v7;
  float v8;
  float v9;
  float v10;
  uint64_t v11;
  float *v12;
  float v13;
  float v14;
  uint64_t v15;
  const void *v16;
  size_t v17;
  float v18;
  float *v19;
  int v20;
  uint64_t v22;
  char *v23;
  size_t v24;
  float v25;
  float *v26;
  int v27;

  if (CFBinaryHeapContainsValue(heap, value) || CFBinaryHeapGetCount(heap) < 10)
    goto LABEL_13;
  Minimum = (float *)CFBinaryHeapGetMinimum(heap);
  v7 = (float *)CFBinaryHeapGetMinimum(a2);
  v8 = 0.0;
  v9 = 0.0;
  if (value)
    v9 = *value;
  if (Minimum)
    v8 = *Minimum;
  if (v9 > v8 || v7 && (!Minimum ? (v10 = 0.0) : (v10 = *Minimum), v10 < v7[2]))
LABEL_13:
    v11 = 1;
  else
    v11 = 0;
  if (!CFBinaryHeapContainsValue(heap, value))
  {
    if (CFBinaryHeapGetCount(heap) < 10)
    {
LABEL_24:
      CFBinaryHeapAddValue(heap, value);
      return v11;
    }
    v12 = (float *)CFBinaryHeapGetMinimum(heap);
    v13 = 0.0;
    v14 = 0.0;
    if (v12)
      v14 = *v12;
    if (value)
      v13 = *value;
    if (v14 < v13)
    {
      v15 = (4 * *((_DWORD *)v12 + 2));
      v16 = v12 + 5;
      v17 = *((unsigned int *)v12 + 4);
      v18 = *v12;
      v19 = (float *)malloc_type_malloc(v17 + 25, 0x752CEB8EuLL);
      *(_QWORD *)v19 = v15;
      v19[2] = v18;
      *((_DWORD *)v19 + 3) = 1;
      *((_DWORD *)v19 + 4) = v17;
      *((_BYTE *)v19 + v17 + 20) = 0;
      memcpy(v19 + 5, v16, v17);
      CFBinaryHeapAddValue(a2, v19);
      v20 = *((_DWORD *)v19 + 3) - 1;
      *((_DWORD *)v19 + 3) = v20;
      if (!v20)
        free(v19);
      CFBinaryHeapRemoveMinimumValue(heap);
      goto LABEL_24;
    }
    v22 = (4 * *((_DWORD *)value + 2));
    v23 = (char *)(value + 5);
    v24 = *((unsigned int *)value + 4);
    v25 = *value;
    v26 = (float *)malloc_type_malloc(v24 + 25, 0x752CEB8EuLL);
    *(_QWORD *)v26 = v22;
    v26[2] = v25;
    *((_DWORD *)v26 + 3) = 1;
    *((_DWORD *)v26 + 4) = v24;
    *((_BYTE *)v26 + v24 + 20) = 0;
    memcpy(v26 + 5, v23, v24);
    CFBinaryHeapAddValue(a2, v26);
    v27 = *((_DWORD *)v26 + 3) - 1;
    *((_DWORD *)v26 + 3) = v27;
    if (!v27)
      free(v26);
  }
  return v11;
}

BOOL sub_19C40467C(uint64_t a1, CFBinaryHeapRef heap, __CFBinaryHeap *a3)
{
  _QWORD *v6;
  CFIndex Count;
  char *Minimum;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  int8x8_t *v12;
  unsigned __int8 *v13;
  char v14;
  unint64_t v15;
  size_t v16;
  unsigned int v17;
  _DWORD *v18;
  char v19;
  int v20;
  int v21;

  v6 = (_QWORD *)(a1 + 2084);
  do
  {
    Count = CFBinaryHeapGetCount(heap);
    if (!Count)
      break;
    Minimum = (char *)CFBinaryHeapGetMinimum(heap);
    v9 = Minimum;
    if (Minimum)
      ++*((_DWORD *)Minimum + 3);
    CFBinaryHeapRemoveMinimumValue(heap);
    v10 = *(_QWORD *)v9;
    v11 = *(_QWORD *)v9 & 3;
    if (!v11)
    {
      v15 = v10 >> 2;
      v16 = *((unsigned int *)v9 + 4);
      v17 = *((_DWORD *)v9 + 2);
      v18 = malloc_type_malloc(v16 + 21, 0x18AD45BuLL);
      v18[4] = v16;
      *((_BYTE *)v18 + v16 + 20) = 0;
      memcpy(v18 + 5, v9 + 20, v16);
      v18[1] = 1065353216;
      v18[2] = v15;
      *v18 = v17;
      v18[3] = 1;
      v19 = sub_19C404474((float *)v18, heap, a3);
      v20 = v18[3] - 1;
      v18[3] = v20;
      if (!v20)
        free(v18);
      goto LABEL_20;
    }
    if (*v6)
    {
      v12 = (int8x8_t *)((v10 & 0xFFFFFFFFFFFFFFFCLL) + *v6);
      v13 = (unsigned __int8 *)(v9 + 20);
      if (v11 == 3)
      {
        v14 = sub_19C40488C(a1, v12, v13, *((unsigned int *)v9 + 4), *((_DWORD *)v9 + 4), heap, a3);
      }
      else if (v11 == 1)
      {
        v14 = sub_19C403CBC(a1, v12, v13, *((unsigned int *)v9 + 4), *((unsigned int *)v9 + 4), heap);
      }
      else
      {
        v14 = sub_19C404C6C(a1, (unsigned int *)v12, (char *)v13, *((_DWORD *)v9 + 4), *((_DWORD *)v9 + 4), heap, a3);
      }
    }
    else if (v11 == 2)
    {
      v14 = sub_19C40418C((uint64_t *)(v10 & 0xFFFFFFFFFFFFFFFCLL), v9 + 20, *((_DWORD *)v9 + 4), *((_DWORD *)v9 + 4), heap, a3);
    }
    else
    {
      if (v11 != 1)
      {
        v19 = 1;
        goto LABEL_20;
      }
      v14 = sub_19C403F40(a1, v10 & 0xFFFFFFFFFFFFFFFCLL, (unsigned __int8 *)v9 + 20, *((_DWORD *)v9 + 4), *((_DWORD *)v9 + 4), heap, a3);
    }
    v19 = v14;
LABEL_20:
    v21 = *((_DWORD *)v9 + 3) - 1;
    *((_DWORD *)v9 + 3) = v21;
    if (!v21)
      free(v9);
  }
  while ((v19 & 1) != 0);
  return Count == 0;
}

uint64_t sub_19C40488C(uint64_t a1, int8x8_t *a2, unsigned __int8 *a3, uint64_t a4, unsigned int a5, __CFBinaryHeap *a6, __CFBinaryHeap *a7)
{
  unsigned int v8;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int8x8_t v16;
  uint64_t result;
  __int32 v18;
  uint8x8_t v19;
  uint8x8_t v20;
  uint8x8_t v21;
  uint8x8_t v22;
  __int32 v23;
  int v24;
  void *v25;
  __int32 v26;
  __int32 v27;
  _DWORD *v28;
  int v29;
  int v30;
  int v31;
  unsigned int v32;
  __int32 v33;
  uint8x8_t v34;
  uint64_t v35;
  int v36;
  int8x8_t v37;
  uint8x8_t v38;
  uint8x8_t v39;
  uint8x8_t v40;
  int v42[2];

  v8 = a4;
  if (a5 >= a4)
  {
LABEL_13:
    *(_QWORD *)v42 = a1;
    if (qword_1EE41C000 != -1)
      dispatch_once(&qword_1EE41C000, &unk_1E3D3C5A8);
    v25 = pthread_getspecific(qword_1EE41BFF8);
    if (!v25)
    {
      v25 = malloc_type_malloc(0x400uLL, 0x55DFA995uLL);
      pthread_setspecific(qword_1EE41BFF8, v25);
    }
    if ((int)(v8 + 1) <= 1023)
    {
      memcpy(v25, a3, v8);
      v32 = 0;
      *((_BYTE *)v25 + (int)(v8 + 1)) = 0;
      do
      {
        if (v32 >> 6 <= 1)
          v36 = 1;
        else
          v36 = v32 >> 6;
        v37 = a2[v32 >> 6];
        if (((1 << v32) & *(_QWORD *)&v37) != 0)
        {
          if (v32 <= 0x3F)
          {
            v33 = 0;
          }
          else
          {
            v38 = (uint8x8_t)vcnt_s8(*a2);
            v38.i16[0] = vaddlv_u8(v38);
            v33 = v38.i32[0];
            if (v32 >= 0x80)
            {
              v39 = (uint8x8_t)vcnt_s8(a2[1]);
              v39.i16[0] = vaddlv_u8(v39);
              v33 += v39.i32[0];
              if (v36 != 2)
              {
                v40 = (uint8x8_t)vcnt_s8(a2[2]);
                v40.i16[0] = vaddlv_u8(v40);
                v33 += v40.i32[0];
              }
            }
          }
          v34 = (uint8x8_t)vcnt_s8((int8x8_t)(((1 << v32) - 1) & *(_QWORD *)&v37));
          v34.i16[0] = vaddlv_u8(v34);
          v35 = a2[5].u32[v33 + v34.i32[0] + 1];
          *((_BYTE *)v25 + v8) = v32;
          sub_19C40434C(*(_QWORD *)(*(_QWORD *)v42 + 2084), v35, v25, v8 + 1, a6);
        }
        ++v32;
      }
      while (v32 != 256);
    }
    v26 = a2[5].i32[0];
    if (!v26)
      return sub_19C40467C(v42[0], a6);
    v27 = a2[4].i32[1];
    v28 = malloc_type_malloc(v8 + 21, 0x18AD45BuLL);
    v28[4] = v8;
    *((_BYTE *)v28 + v8 + 20) = 0;
    memcpy(v28 + 5, a3, v8);
    v28[1] = 1065353216;
    v28[2] = v26;
    *v28 = v27;
    v28[3] = 1;
    v29 = sub_19C404474((float *)v28, a6, a7);
    v30 = v29;
    v31 = v28[3] - 1;
    v28[3] = v31;
    if (v31)
    {
      if (v29)
        return sub_19C40467C(v42[0], a6);
    }
    else
    {
      free(v28);
      if (v30)
        return sub_19C40467C(v42[0], a6);
    }
    return 0;
  }
  v12 = (_QWORD *)(a1 + 2084);
  v13 = a5;
  while (1)
  {
    v14 = a3[v13];
    v15 = v14 >> 6;
    v16 = a2[v14 >> 6];
    result = 1;
    if (((1 << v14) & *(_QWORD *)&v16) == 0)
      return result;
    if (v14 >= 0x40)
    {
      v19 = (uint8x8_t)vcnt_s8(*a2);
      v19.i16[0] = vaddlv_u8(v19);
      v18 = v19.i32[0];
      if ((v14 & 0x80) != 0)
      {
        if (v15 <= 1)
          LODWORD(v15) = 1;
        v20 = (uint8x8_t)vcnt_s8(a2[1]);
        v20.i16[0] = vaddlv_u8(v20);
        v18 += v20.i32[0];
        if ((_DWORD)v15 != 2)
        {
          v21 = (uint8x8_t)vcnt_s8(a2[2]);
          v21.i16[0] = vaddlv_u8(v21);
          v18 += v21.i32[0];
        }
      }
    }
    else
    {
      v18 = 0;
    }
    v22 = (uint8x8_t)vcnt_s8((int8x8_t)(((1 << v14) - 1) & *(_QWORD *)&v16));
    v22.i16[0] = vaddlv_u8(v22);
    v23 = a2[5].i32[v18 + v22.i32[0] + 1];
    v24 = v23 & 3;
    if (v24 != 3)
    {
      if (v24 == 1)
        return sub_19C403CBC(a1, (v23 & 0xFFFFFFFC) + *v12, a3, a4, (v13 + 1), a6);
      if (v24 == 2)
        return sub_19C404C6C(a1, (unsigned int *)((v23 & 0xFFFFFFFC) + *v12), (char *)a3, a4, (int)v13 + 1, a6, a7);
      return 1;
    }
    a2 = (int8x8_t *)((v23 & 0xFFFFFFFC) + *v12);
    if (a4 == ++v13)
      goto LABEL_13;
  }
}

uint64_t sub_19C404C6C(uint64_t a1, unsigned int *a2, char *a3, unsigned int a4, unsigned int a5, __CFBinaryHeap *a6, __CFBinaryHeap *a7)
{
  char *v12;
  int v13;
  char *v14;
  unsigned int v15;
  char *v16;
  char *v17;
  size_t v18;
  int v19;
  int v20;
  _DWORD *v21;
  int v22;
  unsigned int v23;
  char *v24;
  unsigned int v25;
  int v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  unsigned int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  _DWORD *v38;
  int v39;
  char *__dst;
  unsigned int v42;
  char *__s2;
  char *__s2a;
  unsigned int v47;
  unsigned int v48;
  _OWORD __s1[16];
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v48 = *a2;
  if (qword_1EE41C000 != -1)
    dispatch_once(&qword_1EE41C000, &unk_1E3D3C5A8);
  v12 = (char *)pthread_getspecific(qword_1EE41BFF8);
  if (!v12)
  {
    v12 = (char *)malloc_type_malloc(0x400uLL, 0x55DFA995uLL);
    pthread_setspecific(qword_1EE41BFF8, v12);
  }
  v13 = a4 - a5;
  v47 = a5;
  if ((*(_BYTE *)(a1 + 2068) & 2) != 0)
  {
    if (a4 <= 0x3FF)
    {
      v23 = a4;
      memcpy(v12, a3, a4);
      __dst = &v12[a4];
      *__dst = 0;
      memset(__s1, 0, sizeof(__s1));
      if (v48)
      {
        v24 = 0;
        v25 = 0;
        v42 = v47 - a4;
        __s2a = &a3[v47];
        while (1)
        {
          v27 = (char *)a2 + v25;
          v28 = v27[18];
          if (v24)
          {
            v29 = v24[10];
            if (v28 > v29)
              memcpy((char *)__s1 + v29, v24 + 11, v28 - v29);
          }
          v24 = v27 + 8;
          v30 = *((unsigned __int16 *)v27 + 8);
          if (v30 + (int)v28 >= v13)
          {
            if (v23 == v47 || ((int)v28 >= v13 ? (v26 = v13) : (v26 = v28), !memcmp(__s1, __s2a, v26)))
            {
              v31 = v13 - v28;
              if (v13 == (_DWORD)v28)
                goto LABEL_32;
              if (v30 < v31)
                v31 = v30;
              if (!memcmp(v27 + 19, &__s2a[v28], v31))
              {
LABEL_32:
                v32 = v28 + v47;
                v33 = v28 + v47 - v23;
                if (v33 < 1)
                {
                  v32 = v23;
                }
                else
                {
                  memcpy(__dst, (char *)__s1 + v28 - v33, v32 - v23);
                  v30 = *((unsigned __int16 *)v24 + 4);
                  LODWORD(v28) = v24[10];
                }
                v34 = v42 + v30 + v28;
                if (v34 >= 1)
                {
                  v35 = v34 - (v33 & ~(v33 >> 31));
                  memcpy(&v12[v32], &v24[v30 - v35 + 11], v35);
                  v32 += v35;
                }
                v12[v32] = 0;
                v36 = *((_DWORD *)v24 + 1);
                v37 = *(_DWORD *)v24;
                v38 = malloc_type_malloc(v32 + 21, 0x18AD45BuLL);
                v38[4] = v32;
                *((_BYTE *)v38 + v32 + 20) = 0;
                memcpy(v38 + 5, v12, v32);
                v38[1] = 1065353216;
                v38[2] = v36;
                *v38 = v37;
                v38[3] = 1;
                LODWORD(a3) = sub_19C404474((float *)v38, a6, a7);
                v39 = v38[3] - 1;
                v38[3] = v39;
                if (!v39)
                  free(v38);
                if (!(_DWORD)a3)
                  return a3 & 1;
                v30 = *((unsigned __int16 *)v24 + 4);
              }
            }
          }
          v25 += v30 + 11;
          if (v25 >= v48)
            goto LABEL_41;
        }
      }
      goto LABEL_41;
    }
LABEL_15:
    LOBYTE(a3) = 0;
    return a3 & 1;
  }
  if (a5 > 0x3FF)
    goto LABEL_15;
  memcpy(v12, a3, a5);
  v14 = &v12[a5];
  *v14 = 0;
  if (!v48)
  {
LABEL_41:
    LOBYTE(a3) = 1;
    return a3 & 1;
  }
  v15 = 0;
  __s2 = &a3[a5];
  LOBYTE(a3) = 1;
  do
  {
    v16 = (char *)a2 + v15;
    v17 = v16 + 8;
    memcpy(v14, v16 + 18, *((unsigned __int16 *)v16 + 8));
    v18 = *((unsigned __int16 *)v16 + 8) + (unint64_t)a5;
    v12[v18] = 0;
    if (v13 <= *((unsigned __int16 *)v16 + 8) && !memcmp(v16 + 18, __s2, v13))
    {
      v19 = *((_DWORD *)v16 + 3);
      v20 = *(_DWORD *)v17;
      v21 = malloc_type_malloc(v18 + 21, 0x18AD45BuLL);
      v21[4] = v18;
      *((_BYTE *)v21 + v18 + 20) = 0;
      memcpy(v21 + 5, v12, v18);
      v21[1] = 1065353216;
      v21[2] = v19;
      *v21 = v20;
      v21[3] = 1;
      LOBYTE(a3) = sub_19C404474((float *)v21, a6, a7);
      v22 = v21[3] - 1;
      v21[3] = v22;
      if (!v22)
        free(v21);
    }
    v15 += *((unsigned __int16 *)v17 + 4) + 10;
    a5 = v47;
  }
  while (v15 < v48);
  return a3 & 1;
}

void sub_19C4050AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  _DWORD *v18;
  size_t v19;
  int8x16_t *v20;
  int8x16_t *v21;
  int8x16_t *v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _BYTE *v27;
  _QWORD *v28;
  int8x16_t *v29;
  unint64_t v30;
  int8x16_t *v31;
  uint64_t v32;
  uint64_t v33;
  int8x16_t *v34;
  int8x16_t *v35;
  uint64_t v36;
  int8x16_t v37;
  int8x16_t *v38;
  int8x16_t *v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  _BYTE *v44;
  _QWORD *v45;
  int8x16_t *v46;
  unint64_t v47;
  int8x16_t *v48;
  uint64_t v49;
  uint64_t v50;
  int8x16_t *v51;
  int8x16_t *v52;
  uint64_t v53;
  int8x16_t v54;
  unint64_t v55;
  uint64_t v56;
  unsigned int v57;
  int8x16_t *v58;
  uint64_t v59;
  char *v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int8x16_t *v64;
  unsigned int v65;
  uint64_t v66;
  char *v67;
  unsigned __int16 v68;
  uint64_t v69;
  uint64_t v70;
  _DWORD *v71;
  unsigned int __fd;
  int v75;
  uint64_t *v76;
  uint64_t v77;
  BOOL (*v79)(uint64_t, uint64_t);

  v4 = a4;
  v5 = a2;
  v6 = a1;
  v7 = 0;
  __fd = a4;
  do
  {
    v8 = v5 + 8 * v7;
    v11 = *(_QWORD *)(v8 + 16);
    v10 = (uint64_t *)(v8 + 16);
    v9 = v11;
    v12 = v11 & 3;
    if (v12 != 2)
    {
      if (v12 == 1)
        sub_19C4050AC(v6, v9 & 0xFFFFFFFFFFFFFFFCLL, a3, v4);
      goto LABEL_2;
    }
    v13 = (_DWORD *)(v9 & 0xFFFFFFFFFFFFFFFCLL);
    v14 = lseek(v4, 0, 1);
    v15 = *(_DWORD *)(v6 + 2092);
    if (v15 <= 1)
      v16 = 1;
    else
      v16 = v15;
    v17 = v13[2];
    v18 = malloc_type_malloc(1035 * v16 + 8, 0x774667DFuLL);
    v19 = 8 * v16;
    v76 = v10;
    v77 = v7;
    v75 = v14;
    if ((*(_BYTE *)(v6 + 2068) & 2) != 0)
    {
      v38 = (int8x16_t *)operator new(v19);
      v39 = (int8x16_t *)((char *)v38 + 8 * v16);
      v22 = v38;
      v40 = v13;
      while (1)
      {
        while (v38 < v39)
        {
          v38->i64[0] = (uint64_t)v40;
          v38 = (int8x16_t *)((char *)v38 + 8);
          v40 = (_QWORD *)*v40;
          if (!v40)
            goto LABEL_80;
        }
        v41 = ((char *)v38 - (char *)v22) >> 3;
        v42 = v41 + 1;
        if ((unint64_t)(v41 + 1) >> 61)
          sub_19C2A18E8();
        if (((char *)v39 - (char *)v22) >> 2 > v42)
          v42 = ((char *)v39 - (char *)v22) >> 2;
        if ((unint64_t)((char *)v39 - (char *)v22) >= 0x7FFFFFFFFFFFFFF8)
          v43 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v43 = v42;
        if (v43)
        {
          if (v43 >> 61)
            sub_19C2A143C();
          v44 = operator new(8 * v43);
        }
        else
        {
          v44 = 0;
        }
        v45 = &v44[8 * v41];
        v39 = (int8x16_t *)&v44[8 * v43];
        *v45 = v40;
        v46 = (int8x16_t *)(v45 + 1);
        if (v38 == v22)
        {
LABEL_59:
          operator delete(v22);
          goto LABEL_60;
        }
        v47 = (char *)&v38[-1].u64[1] - (char *)v22;
        if (v47 < 0x168)
        {
          v48 = v38;
          goto LABEL_57;
        }
        if (&v44[(char *)v38 - (char *)v22 - 8 - (v47 & 0xFFFFFFFFFFFFFFF8)] > &v44[(char *)v38 - (char *)v22 - 8])
          break;
        if ((unint64_t *)((char *)&v38[-1].u64[1] - (v47 & 0xFFFFFFFFFFFFFFF8)) > &v38[-1].u64[1])
        {
          v48 = v38;
          goto LABEL_57;
        }
        if ((unint64_t)((char *)v22 - v44) < 0x20)
        {
          v48 = v38;
          goto LABEL_57;
        }
        v50 = (v47 >> 3) + 1;
        v48 = (int8x16_t *)((char *)v38 - 8 * (v50 & 0x3FFFFFFFFFFFFFFCLL));
        v51 = (int8x16_t *)&v44[8 * v41 - 16];
        v52 = v38 - 1;
        v53 = v50 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v54 = *v52;
          v51[-1] = v52[-1];
          *v51 = v54;
          v51 -= 2;
          v52 -= 2;
          v53 -= 4;
        }
        while (v53);
        v45 -= v50 & 0x3FFFFFFFFFFFFFFCLL;
        if (v50 != (v50 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_57;
LABEL_58:
        if (v22)
          goto LABEL_59;
LABEL_60:
        v22 = (int8x16_t *)v45;
        v38 = v46;
        v40 = (_QWORD *)*v40;
        if (!v40)
        {
LABEL_80:
          v61 = 126 - 2 * __clz(((char *)v38 - (char *)v22) >> 3);
          v79 = sub_19C405A2C;
          if (v38 == v22)
            v62 = 0;
          else
            v62 = v61;
          sub_19C401A40((uint64_t)v22, v38, (unsigned int (**)(uint64_t))&v79, v62, 1);
          if (v38 == v22)
          {
            v57 = 0;
          }
          else
          {
            v57 = 0;
            v63 = 0;
            v64 = v22;
            do
            {
              v69 = v63;
              v63 = v64->i64[0];
              if (!v69)
              {
                v65 = 0;
                LOWORD(v66) = *(_WORD *)(v63 + 24);
                goto LABEL_86;
              }
              v70 = 0;
              v66 = *(unsigned __int16 *)(v63 + 24);
              v65 = *(_WORD *)(v63 + 24);
              while (1)
              {
                if (v66 == v70)
                  goto LABEL_86;
                if (*(unsigned __int16 *)(v69 + 24) <= (unsigned __int16)v70
                  || *(unsigned __int8 *)(v63 + 26 + v70) != *(unsigned __int8 *)(v69 + 26 + v70))
                {
                  break;
                }
                if (++v70 == 255)
                {
                  v65 = 255;
                  goto LABEL_86;
                }
              }
              v65 = v70;
LABEL_86:
              v67 = (char *)v18 + v57;
              v68 = v66 - v65;
              *((_WORD *)v67 + 8) = v68;
              *((_DWORD *)v67 + 2) = *(_DWORD *)(v63 + 12);
              *((_DWORD *)v67 + 3) = *(_DWORD *)(v63 + 20);
              v67[18] = v65;
              memcpy(v67 + 19, (const void *)(v63 + v65 + 26), v68);
              v57 = v57 - v65 + *(unsigned __int16 *)(v63 + 24) + 11;
              v64 = (int8x16_t *)((char *)v64 + 8);
            }
            while (v64 != v38);
          }
          v4 = __fd;
          if (!v22)
            goto LABEL_98;
LABEL_97:
          operator delete(v22);
          goto LABEL_98;
        }
      }
      v48 = v38;
      do
      {
LABEL_57:
        v49 = v48[-1].i64[1];
        v48 = (int8x16_t *)((char *)v48 - 8);
        *--v45 = v49;
      }
      while (v48 != v22);
      goto LABEL_58;
    }
    v20 = (int8x16_t *)operator new(v19);
    v21 = (int8x16_t *)((char *)v20 + 8 * v16);
    v22 = v20;
    v23 = v13;
    do
    {
      while (v20 < v21)
      {
        v20->i64[0] = (uint64_t)v23;
        v20 = (int8x16_t *)((char *)v20 + 8);
        v23 = (_QWORD *)*v23;
        if (!v23)
          goto LABEL_72;
      }
      v24 = ((char *)v20 - (char *)v22) >> 3;
      v25 = v24 + 1;
      if ((unint64_t)(v24 + 1) >> 61)
        sub_19C2A18E8();
      if (((char *)v21 - (char *)v22) >> 2 > v25)
        v25 = ((char *)v21 - (char *)v22) >> 2;
      if ((unint64_t)((char *)v21 - (char *)v22) >= 0x7FFFFFFFFFFFFFF8)
        v26 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v26 = v25;
      if (v26)
      {
        if (v26 >> 61)
          sub_19C2A143C();
        v27 = operator new(8 * v26);
      }
      else
      {
        v27 = 0;
      }
      v28 = &v27[8 * v24];
      v21 = (int8x16_t *)&v27[8 * v26];
      *v28 = v23;
      v29 = (int8x16_t *)(v28 + 1);
      if (v20 != v22)
      {
        v30 = (char *)&v20[-1].u64[1] - (char *)v22;
        if (v30 >= 0x168)
        {
          if (&v27[(char *)v20 - (char *)v22 - 8 - (v30 & 0xFFFFFFFFFFFFFFF8)] > &v27[(char *)v20 - (char *)v22 - 8])
          {
            v31 = v20;
          }
          else if ((unint64_t *)((char *)&v20[-1].u64[1] - (v30 & 0xFFFFFFFFFFFFFFF8)) > &v20[-1].u64[1])
          {
            v31 = v20;
          }
          else if ((unint64_t)((char *)v22 - v27) >= 0x20)
          {
            v33 = (v30 >> 3) + 1;
            v31 = (int8x16_t *)((char *)v20 - 8 * (v33 & 0x3FFFFFFFFFFFFFFCLL));
            v34 = (int8x16_t *)&v27[8 * v24 - 16];
            v35 = v20 - 1;
            v36 = v33 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v37 = *v35;
              v34[-1] = v35[-1];
              *v34 = v37;
              v34 -= 2;
              v35 -= 2;
              v36 -= 4;
            }
            while (v36);
            v28 -= v33 & 0x3FFFFFFFFFFFFFFCLL;
            if (v33 == (v33 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_27:
              if (!v22)
                goto LABEL_29;
              goto LABEL_28;
            }
          }
          else
          {
            v31 = v20;
          }
        }
        else
        {
          v31 = v20;
        }
        do
        {
          v32 = v31[-1].i64[1];
          v31 = (int8x16_t *)((char *)v31 - 8);
          *--v28 = v32;
        }
        while (v31 != v22);
        goto LABEL_27;
      }
LABEL_28:
      operator delete(v22);
LABEL_29:
      v22 = (int8x16_t *)v28;
      v20 = v29;
      v23 = (_QWORD *)*v23;
    }
    while (v23);
LABEL_72:
    v55 = 126 - 2 * __clz(((char *)v20 - (char *)v22) >> 3);
    v79 = sub_19C401A14;
    if (v20 == v22)
      v56 = 0;
    else
      v56 = v55;
    sub_19C401A40((uint64_t)v22, v20, (unsigned int (**)(uint64_t))&v79, v56, 1);
    v4 = __fd;
    v57 = 0;
    if (v20 != v22)
    {
      v58 = v22;
      do
      {
        v59 = v58->i64[0];
        v58 = (int8x16_t *)((char *)v58 + 8);
        v60 = (char *)v18 + v57;
        *((_WORD *)v60 + 8) = *(_WORD *)(v59 + 24);
        *((_DWORD *)v60 + 2) = *(_DWORD *)(v59 + 12);
        *((_DWORD *)v60 + 3) = *(_DWORD *)(v59 + 20);
        memcpy(v60 + 18, (const void *)(v59 + 26), *(unsigned __int16 *)(v59 + 24));
        v57 += *(unsigned __int16 *)(v59 + 24) + 10;
      }
      while (v58 != v20);
    }
    if (v22)
      goto LABEL_97;
LABEL_98:
    *v18 = v57;
    v18[1] = v17;
    write(v4, v18, (v57 + 11) & 0x1FFFFFFFCLL);
    free(v18);
    do
    {
      v71 = *(_DWORD **)v13;
      free(v13);
      v13 = v71;
    }
    while (v71);
    v7 = v77;
    *v76 = (v75 - a3) | 2;
    v6 = a1;
    v5 = a2;
LABEL_2:
    ++v7;
  }
  while (v7 != 256);
}

void sub_19C4056E0(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C40570C(_DWORD *a1, uint64_t a2, unsigned int a3, int a4, int a5, int *a6)
{
  uint64_t v10;
  int32x4_t v11;
  int32x4_t v12;
  unsigned int v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  size_t v20;
  uint64_t v21;
  uint64_t v22;
  int8x16_t *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  __int8 *v27;
  int v28;
  int v29;
  uint64_t v31;
  uint64_t v32;
  size_t v33;
  int v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  _DWORD v38[257];
  uint64_t v39;
  uint64_t v40;

  v37 = a3;
  v10 = 0;
  v40 = *MEMORY[0x1E0C80C00];
  v11 = 0uLL;
  v12 = 0uLL;
  do
  {
    v11 = vsubq_s32(v11, (int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_s64(*(int64x2_t *)&a1[v10 + 4]), (int32x4_t)vceqzq_s64(*(int64x2_t *)&a1[v10 + 8]))));
    v12 = vsubq_s32(v12, (int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_s64(*(int64x2_t *)&a1[v10 + 12]), (int32x4_t)vceqzq_s64(*(int64x2_t *)&a1[v10 + 16]))));
    v10 += 16;
  }
  while (v10 != 512);
  v13 = vaddvq_s32(vaddq_s32(v12, v11));
  if (v13 > 0xC7)
    a5 = 1;
  v36 = a5;
  if ((a5 & 1) != 0)
  {
    v15 = 0;
    v16 = *a6;
    *a6 = v16 + 1036;
    do
    {
      v17 = *(_QWORD *)&a1[2 * v15 + 4];
      if ((v17 & 3) == 1)
      {
        v18 = *a6;
        if (sub_19C40570C(v17 & 0xFFFFFFFFFFFFFFFCLL, a2, v37, 1, 0, a6))
          v19 = v18 | 1;
        else
          v19 = v18 | 3;
        v38[v15] = v19;
      }
      else
      {
        v38[v15] = v17;
      }
      ++v15;
    }
    while (v15 != 256);
    v38[256] = a1[3];
    v39 = *(_QWORD *)a1;
    pwrite(v37, v38, 0x40CuLL, v16 + a2);
    if (a4)
LABEL_26:
      free(a1);
  }
  else
  {
    v34 = a4;
    v35 = v13;
    v20 = 4 * v13 + 44;
    v21 = *a6;
    MEMORY[0x1E0C80A78](a1, a2);
    v23 = (int8x16_t *)((char *)&v31 - v22);
    bzero((char *)&v31 - v22, v20);
    bzero(v23, v20);
    v24 = 0;
    v25 = 0;
    v32 = v21;
    v33 = v20;
    *a6 = v21 + v20;
    do
    {
      v26 = *(_QWORD *)&a1[2 * v24 + 4];
      if (v26)
      {
        v23->i64[v24 >> 6] |= 1 << v24;
        v27 = &v23->i8[4 * v25];
        if ((v26 & 3) == 1)
        {
          v28 = *a6;
          if (sub_19C40570C(v26 & 0xFFFFFFFFFFFFFFFCLL, a2, v37, 1, 0, a6))
            v29 = v28 | 1;
          else
            v29 = v28 | 3;
          *((_DWORD *)v27 + 11) = v29;
        }
        else
        {
          *((_DWORD *)v27 + 11) = v26;
        }
        ++v25;
      }
      ++v24;
    }
    while (v24 != 256);
    if (vaddvq_s32(vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(*v23)))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(v23[1])))))) != (_DWORD)v35)__assert_rtn("completionTrieSerializeLevels", "LMCompletionTrie.cpp", 1734, "bitcount == count");
    v23[2].i32[2] = a1[3];
    v23[2].i64[0] = *(_QWORD *)a1;
    pwrite(v37, v23, v33, v32 + a2);
    if (v34)
      goto LABEL_26;
  }
  return v36;
}

BOOL sub_19C405A2C(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  size_t v4;
  int v5;

  v2 = *(unsigned __int16 *)(a2 + 24);
  v3 = *(unsigned __int16 *)(a1 + 24);
  if (v2 >= v3)
    v4 = *(unsigned __int16 *)(a1 + 24);
  else
    v4 = *(unsigned __int16 *)(a2 + 24);
  v5 = memcmp((const void *)(a1 + 26), (const void *)(a2 + 26), v4);
  if (v5)
    return v5 < 0;
  else
    return v3 < v2;
}

_QWORD *sub_19C405A7C(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E3D35138;
  v2 = (void *)a1[1];
  if (v2)
    munmap(v2, a1[2]);
  a1[2] = 0;
  return a1;
}

void sub_19C405AC0(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E3D35138;
  v2 = (void *)a1[1];
  if (v2)
    munmap(v2, a1[2]);
  a1[2] = 0;
  JUMPOUT(0x1A1AD355CLL);
}

void *sub_19C405B14()
{
  return &unk_19C477F10;
}

uint64_t sub_19C405B20(uint64_t a1)
{
  return a1 + 32;
}

_DWORD *sub_19C405B28(uint64_t a1, unsigned int *a2)
{
  unint64_t v2;
  unsigned int v3;
  _DWORD *v4;
  _DWORD *v5;
  unint64_t v6;
  unsigned int *v7;
  _DWORD *v8;
  unsigned int v9;

  v2 = *(_QWORD *)(a1 + 56);
  if (!v2)
    return (_DWORD *)(a1 + 32);
  v3 = *a2;
  v4 = *(_DWORD **)(a1 + 48);
  v5 = &v4[2 * v2];
  do
  {
    v6 = v2 >> 1;
    v7 = &v4[2 * (v2 >> 1)];
    v9 = *v7;
    v8 = v7 + 2;
    v2 += ~(v2 >> 1);
    if (v9 < v3)
      v4 = v8;
    else
      v2 = v6;
  }
  while (v2);
  if (v4 != v5 && *v4 == v3)
    return v4 + 1;
  else
    return (_DWORD *)(a1 + 32);
}

void *sub_19C405B84()
{
  return &unk_19C477F10;
}

uint64_t sub_19C405B90(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *exception;
  std::string::size_type v16;
  std::string *p_dst;
  _QWORD *v18;
  _QWORD *v19;
  void *v20;
  std::string::size_type v21;
  std::string *v22;
  void *v23;
  _QWORD *v24;
  _QWORD *v25;
  void *v26;
  size_t v27;
  __int128 *v28;
  _QWORD *v29;
  _QWORD *v30;
  void *v31;
  size_t v32;
  __int128 *v33;
  unint64_t v34;
  const void **v35;
  unint64_t v36;
  const void **v37;
  unint64_t v38;
  const void **v39;
  const void *v40;
  const void *v41;
  const void *v42;
  uint64_t v43;
  uint64_t v44;
  std::string *v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  const void **v52;
  const void *v53;
  uint64_t v54;
  uint64_t v55;
  std::string *v56;
  __int128 v57;
  std::string __dst;
  __int128 v59;
  unint64_t v60;
  void *__p[2];
  _QWORD v62[3];
  _BYTE v63[16];
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  int v68;

  *(_QWORD *)a1 = &off_1E3D35138;
  v3 = (_QWORD *)(a1 + 8);
  if (*(char *)(a2 + 23) < 0)
  {
    sub_19C2B5238(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v62[0] = *(_QWORD *)(a2 + 16);
  }
  sub_19C3663C0(v3, (uint64_t)__p);
  if (SHIBYTE(v62[0]) < 0)
    operator delete(__p[0]);
  v4 = *(_QWORD *)(a1 + 16);
  if (v4 <= 0x13)
  {
    sub_19C2B4F08((uint64_t)__p);
    sub_19C2A1B24(v62, (uint64_t)"(file_size=", 11);
    v12 = (_QWORD *)std::ostream::operator<<();
    sub_19C2A1B24(v12, (uint64_t)", offset=", 9);
    v13 = (_QWORD *)std::ostream::operator<<();
    sub_19C2A1B24(v13, (uint64_t)", object_size=", 14);
    v14 = (_QWORD *)std::ostream::operator<<();
    sub_19C2A1B24(v14, (uint64_t)")", 1);
    exception = __cxa_allocate_exception(0x10uLL);
    if ((v68 & 0x10) != 0)
    {
      v51 = v67;
      if (v67 < v66)
      {
        v67 = v66;
        v51 = v66;
      }
      v52 = (const void **)&v65;
    }
    else
    {
      if ((v68 & 8) == 0)
      {
        v16 = 0;
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 0;
        p_dst = &__dst;
        goto LABEL_81;
      }
      v52 = (const void **)v63;
      v51 = v64;
    }
    v53 = *v52;
    v16 = v51 - (_QWORD)*v52;
    if (v16 > 0x7FFFFFFFFFFFFFF7)
      sub_19C2A1A54();
    if (v16 >= 0x17)
    {
      v54 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v16 | 7) != 0x17)
        v54 = v16 | 7;
      v55 = v54 + 1;
      p_dst = (std::string *)operator new(v54 + 1);
      __dst.__r_.__value_.__l.__size_ = v16;
      __dst.__r_.__value_.__r.__words[2] = v55 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v51 - *(_BYTE *)v52;
      p_dst = &__dst;
      if (!v16)
      {
LABEL_81:
        p_dst->__r_.__value_.__s.__data_[v16] = 0;
        v56 = std::string::insert(&__dst, 0, "attempted to read beyond the end of the mapped file ", 0x34uLL);
        v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
        v60 = v56->__r_.__value_.__r.__words[2];
        v59 = v57;
        v56->__r_.__value_.__l.__size_ = 0;
        v56->__r_.__value_.__r.__words[2] = 0;
        v56->__r_.__value_.__r.__words[0] = 0;
        MEMORY[0x1A1AD3160](exception, &v59);
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
      }
    }
    memmove(p_dst, v53, v16);
    goto LABEL_81;
  }
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_DWORD *)(v5 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v5;
  *(_DWORD *)(a1 + 40) = v6;
  v7 = *(unsigned int *)(a1 + 36);
  v8 = v4 > v7;
  v9 = v4 - v7;
  if (!v8)
  {
    sub_19C2B4F08((uint64_t)__p);
    sub_19C2A1B24(v62, (uint64_t)"(file_size=", 11);
    v18 = (_QWORD *)std::ostream::operator<<();
    sub_19C2A1B24(v18, (uint64_t)", offset=", 9);
    v19 = (_QWORD *)std::ostream::operator<<();
    sub_19C2A1B24(v19, (uint64_t)")", 1);
    v20 = __cxa_allocate_exception(0x10uLL);
    if ((v68 & 0x10) != 0)
    {
      v34 = v67;
      if (v67 < v66)
      {
        v67 = v66;
        v34 = v66;
      }
      v35 = (const void **)&v65;
    }
    else
    {
      if ((v68 & 8) == 0)
      {
        v21 = 0;
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 0;
        v22 = &__dst;
        goto LABEL_57;
      }
      v35 = (const void **)v63;
      v34 = v64;
    }
    v40 = *v35;
    v21 = v34 - (_QWORD)*v35;
    if (v21 > 0x7FFFFFFFFFFFFFF7)
      sub_19C2A1A54();
    if (v21 >= 0x17)
    {
      v43 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v21 | 7) != 0x17)
        v43 = v21 | 7;
      v44 = v43 + 1;
      v22 = (std::string *)operator new(v43 + 1);
      __dst.__r_.__value_.__l.__size_ = v21;
      __dst.__r_.__value_.__r.__words[2] = v44 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v22;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v34 - *(_BYTE *)v35;
      v22 = &__dst;
      if (!v21)
      {
LABEL_57:
        v22->__r_.__value_.__s.__data_[v21] = 0;
        v45 = std::string::insert(&__dst, 0, "attempted to read beyond the end of the mapped file ", 0x34uLL);
        v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
        v60 = v45->__r_.__value_.__r.__words[2];
        v59 = v46;
        v45->__r_.__value_.__l.__size_ = 0;
        v45->__r_.__value_.__r.__words[2] = 0;
        v45->__r_.__value_.__r.__words[0] = 0;
        MEMORY[0x1A1AD3160](v20, &v59);
        __cxa_throw(v20, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
      }
    }
    memmove(v22, v40, v21);
    goto LABEL_57;
  }
  v10 = v9 >> 3;
  *(_QWORD *)(a1 + 48) = v5 + v7;
  *(_QWORD *)(a1 + 56) = v10;
  if (*(_DWORD *)(a1 + 24) != 952409662)
  {
    v23 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD3154](v23, "Invalid blocklistID map: mismatched magic number");
    __cxa_throw(v23, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  if (*(_DWORD *)(a1 + 28) != 1)
  {
    sub_19C2B4F08((uint64_t)__p);
    sub_19C2A1B24(v62, (uint64_t)"Unsupported blocklistID map version (recorded=", 46);
    v24 = (_QWORD *)std::ostream::operator<<();
    sub_19C2A1B24(v24, (uint64_t)", required=", 11);
    v25 = (_QWORD *)std::ostream::operator<<();
    sub_19C2A1B24(v25, (uint64_t)")", 1);
    v26 = __cxa_allocate_exception(0x10uLL);
    if ((v68 & 0x10) != 0)
    {
      v36 = v67;
      if (v67 < v66)
      {
        v67 = v66;
        v36 = v66;
      }
      v37 = (const void **)&v65;
    }
    else
    {
      if ((v68 & 8) == 0)
      {
        v27 = 0;
        HIBYTE(v60) = 0;
        v28 = &v59;
        goto LABEL_62;
      }
      v37 = (const void **)v63;
      v36 = v64;
    }
    v41 = *v37;
    v27 = v36 - (_QWORD)*v37;
    if (v27 > 0x7FFFFFFFFFFFFFF7)
      sub_19C2A1A54();
    if (v27 >= 0x17)
    {
      v47 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v27 | 7) != 0x17)
        v47 = v27 | 7;
      v48 = v47 + 1;
      v28 = (__int128 *)operator new(v47 + 1);
      *((_QWORD *)&v59 + 1) = v27;
      v60 = v48 | 0x8000000000000000;
      *(_QWORD *)&v59 = v28;
    }
    else
    {
      HIBYTE(v60) = v36 - *(_BYTE *)v37;
      v28 = &v59;
      if (!v27)
      {
LABEL_62:
        *((_BYTE *)v28 + v27) = 0;
        MEMORY[0x1A1AD3160](v26, &v59);
        __cxa_throw(v26, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
      }
    }
    memmove(v28, v41, v27);
    goto LABEL_62;
  }
  if (v10 != *(_DWORD *)(a1 + 40))
  {
    sub_19C2B4F08((uint64_t)__p);
    sub_19C2A1B24(v62, (uint64_t)"Corrupt blocklistID map: entry count mismatch (recorded=", 56);
    v29 = (_QWORD *)std::ostream::operator<<();
    sub_19C2A1B24(v29, (uint64_t)", actual=", 9);
    v30 = (_QWORD *)std::ostream::operator<<();
    sub_19C2A1B24(v30, (uint64_t)")", 1);
    v31 = __cxa_allocate_exception(0x10uLL);
    if ((v68 & 0x10) != 0)
    {
      v38 = v67;
      if (v67 < v66)
      {
        v67 = v66;
        v38 = v66;
      }
      v39 = (const void **)&v65;
    }
    else
    {
      if ((v68 & 8) == 0)
      {
        v32 = 0;
        HIBYTE(v60) = 0;
        v33 = &v59;
        goto LABEL_67;
      }
      v39 = (const void **)v63;
      v38 = v64;
    }
    v42 = *v39;
    v32 = v38 - (_QWORD)*v39;
    if (v32 > 0x7FFFFFFFFFFFFFF7)
      sub_19C2A1A54();
    if (v32 >= 0x17)
    {
      v49 = (v32 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v32 | 7) != 0x17)
        v49 = v32 | 7;
      v50 = v49 + 1;
      v33 = (__int128 *)operator new(v49 + 1);
      *((_QWORD *)&v59 + 1) = v32;
      v60 = v50 | 0x8000000000000000;
      *(_QWORD *)&v59 = v33;
    }
    else
    {
      HIBYTE(v60) = v38 - *(_BYTE *)v39;
      v33 = &v59;
      if (!v32)
      {
LABEL_67:
        *((_BYTE *)v33 + v32) = 0;
        MEMORY[0x1A1AD3160](v31, &v59);
        __cxa_throw(v31, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
      }
    }
    memmove(v33, v42, v32);
    goto LABEL_67;
  }
  return a1;
}

void sub_19C40629C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42)
{
  uint64_t v42;
  void **v43;
  void *v44;
  int v45;
  uint64_t v47;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v45 & 1) == 0)
      goto LABEL_8;
  }
  else if (!v45)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v44);
LABEL_8:
  a23 = *MEMORY[0x1E0DE4F50];
  v47 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(uint64_t *)((char *)&a23 + *(_QWORD *)(a23 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  a25 = v47;
  a26 = MEMORY[0x1E0DE4FB8] + 16;
  if (a39 < 0)
    operator delete(a34);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1A1AD34CC](&a42);
  if (*v43)
    munmap(*v43, *(_QWORD *)(v42 + 16));
  *(_QWORD *)(v42 + 16) = 0;
  _Unwind_Resume(a1);
}

void sub_19C406400(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19C4063F8);
}

void sub_19C406424(uint64_t a1)
{
  sub_19C4067E0(a1);
  JUMPOUT(0x1A1AD355CLL);
}

BOOL sub_19C406448(_QWORD *a1)
{
  unint64_t v1;

  v1 = a1[10] + 1;
  a1[10] = v1;
  return v1 < 0x8E38E38E38E38E39 * ((uint64_t)(a1[35] - a1[34]) >> 3);
}

unint64_t sub_19C406480(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;
  __int128 v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  double v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  size_t v18;
  float *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unsigned __int128 *v23;
  const float *v24;
  unint64_t v25;
  const float *v26;
  unsigned __int128 v27;
  unsigned __int128 v28;
  unint64_t v29;
  _DWORD *v30;
  float *v31;
  int v32;
  float v33;
  double v34;
  float v35;
  uint64_t v36;
  float v38;
  __int128 __p;
  uint64_t v40;
  __int128 v41;
  char *v42;
  char *v43;
  char *v44;

  v6 = *(_QWORD *)(a1 + 80);
  v7 = *(_QWORD *)(a1 + 272);
  v8 = v7 + 72 * v6;
  v38 = *(float *)v8;
  v9 = (void **)(v8 + 8);
  if (*(char *)(v8 + 31) < 0)
  {
    sub_19C2B5238(&__p, *v9, *(_QWORD *)(v7 + 72 * v6 + 16));
  }
  else
  {
    v10 = *(_OWORD *)v9;
    v40 = *(_QWORD *)(v8 + 24);
    __p = v10;
  }
  v11 = v7 + 72 * v6;
  v41 = *(_OWORD *)(v11 + 32);
  v43 = 0;
  v44 = 0;
  v42 = 0;
  v13 = *(_BYTE **)(v11 + 48);
  v12 = *(_BYTE **)(v11 + 56);
  v14 = -10.0;
  v15 = v12 - v13;
  if (v12 == v13)
  {
    v17 = 0;
    v16 = 0;
LABEL_14:
    v19 = 0;
    goto LABEL_26;
  }
  if (v15 < 0)
    sub_19C2A18E8();
  v16 = (char *)operator new(v12 - v13);
  v17 = v15 >> 3;
  v42 = v16;
  v43 = v16;
  v44 = &v16[8 * (v15 >> 3)];
  v18 = v15 & 0xFFFFFFFFFFFFFFF8;
  memcpy(v16, v13, v18);
  v43 = &v16[v18];
  if (!v18)
    goto LABEL_14;
  v19 = (float *)operator new(v18);
  memcpy(v19, v16, v18);
  if (a2)
  {
    if (v17 <= 1)
      v20 = 1;
    else
      v20 = v17;
    if (v20 > 8)
    {
      v22 = v20 & 7;
      if ((v20 & 7) == 0)
        v22 = 8;
      v21 = v20 - v22;
      v23 = (unsigned __int128 *)(a2 + 16);
      v24 = v19 + 8;
      v25 = v21;
      do
      {
        v26 = v24 - 8;
        v27 = (unsigned __int128)vld2q_f32(v26);
        v28 = (unsigned __int128)vld2q_f32(v24);
        *(v23 - 1) = v27;
        *v23 = v28;
        v23 += 2;
        v24 += 16;
        v25 -= 8;
      }
      while (v25);
    }
    else
    {
      v21 = 0;
    }
    v29 = v20 - v21;
    v30 = (_DWORD *)(a2 + 4 * v21);
    v31 = &v19[2 * v21];
    do
    {
      v32 = *(_DWORD *)v31;
      v31 += 2;
      *v30++ = v32;
      --v29;
    }
    while (v29);
  }
  if (v38 > 0.0)
  {
    v33 = log10f(*(float *)&v16[v18 - 4] / v38);
    v34 = 1.0;
    if (v17 != 1)
    {
      if (!v17)
        __assert_rtn("normalizationFactor", "LMDynamicInlineCompletionEnumerator.hpp", 78, "numWords >= 1");
      v35 = 1.15368974 / (float)(sqrtf((float)v17 + 0.1) * (float)((float)v17 + 0.1));
      v34 = v35;
    }
    v14 = v34 * v33;
  }
LABEL_26:
  if (a3)
  {
    v36 = (uint64_t)(*(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 104)) >> 2;
    *(_QWORD *)(a3 + 96) = 0;
    *(_QWORD *)(a3 + 104) = v36;
    *(_QWORD *)(a3 + 8) = 0xFFEFFFFFFFFFFFFFLL;
    *(_QWORD *)(a3 + 16) = 0;
    *(_WORD *)(a3 + 24) = 0;
    *(_BYTE *)(a3 + 32) = 1;
    *(_OWORD *)(a3 + 40) = xmmword_19C46DE10;
    *(_DWORD *)(a3 + 56) = 0;
    *(_QWORD *)(a3 + 88) = 0;
    *(double *)a3 = v14;
    *(_DWORD *)(a3 + 116) = *(_DWORD *)(a1 + 72);
    *(_BYTE *)(a3 + 112) = 1;
    *(_OWORD *)(a3 + 72) = xmmword_19C46DFE0;
    *(double *)(a3 + 64) = v14;
  }
  if (v19)
  {
    operator delete(v19);
    v16 = v42;
  }
  if (v16)
  {
    v43 = v16;
    operator delete(v16);
  }
  if (SHIBYTE(v40) < 0)
    operator delete((void *)__p);
  return v17;
}

void sub_19C406740(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20)
{
  sub_19C4067A0((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_19C4067A0(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

_QWORD *sub_19C4067E0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  *(_QWORD *)a1 = &off_1E3D374C8;
  v2 = *(_QWORD *)(a1 + 272);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 280);
    v4 = *(void **)(a1 + 272);
    if (v3 != v2)
    {
      do
      {
        v5 = *(void **)(v3 - 24);
        if (v5)
        {
          *(_QWORD *)(v3 - 16) = v5;
          operator delete(v5);
        }
        if (*(char *)(v3 - 41) < 0)
          operator delete(*(void **)(v3 - 64));
        v3 -= 72;
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 272);
    }
    *(_QWORD *)(a1 + 280) = v2;
    operator delete(v4);
  }
  v6 = *(_QWORD **)(a1 + 248);
  if (v6)
  {
    do
    {
      v7 = (_QWORD *)*v6;
      operator delete(v6);
      v6 = v7;
    }
    while (v7);
  }
  v8 = *(void **)(a1 + 232);
  *(_QWORD *)(a1 + 232) = 0;
  if (v8)
    operator delete(v8);
  v9 = *(std::__shared_weak_count **)(a1 + 216);
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
      if (!*(_BYTE *)(a1 + 192))
        return sub_19C4068E8((_QWORD *)a1);
      goto LABEL_20;
    }
  }
  if (*(_BYTE *)(a1 + 192))
LABEL_20:
    std::recursive_mutex::unlock(*(std::recursive_mutex **)(a1 + 184));
  return sub_19C4068E8((_QWORD *)a1);
}

_QWORD *sub_19C4068E8(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;

  *a1 = &off_1E3D375B8;
  v2 = a1 + 19;
  v3 = (_QWORD *)a1[22];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = (void *)a1[16];
  if (v5)
  {
    a1[17] = v5;
    operator delete(v5);
  }
  v6 = (void *)a1[13];
  if (v6)
  {
    a1[14] = v6;
    operator delete(v6);
  }
  v7 = a1[6];
  a1[6] = 0;
  if (v7)
  {
    v8 = *(void **)v7;
    if (*(_QWORD *)v7)
    {
      *(_QWORD *)(v7 + 8) = v8;
      operator delete(v8);
    }
    MEMORY[0x1A1AD355C](v7, 0x1020C4016EE4530);
  }
  v9 = (std::__shared_weak_count *)a1[5];
  if (!v9)
    goto LABEL_18;
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    v12 = (std::__shared_weak_count *)a1[3];
    if (!v12)
      return a1;
  }
  else
  {
LABEL_18:
    v12 = (std::__shared_weak_count *)a1[3];
    if (!v12)
      return a1;
  }
  v13 = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  return a1;
}

void sub_19C406A14(std::string *this, uint64_t a2, uint64_t a3)
{
  _BYTE *v6;
  _BYTE *v7;
  int64_t v8;
  char *v9;
  size_t v10;
  uint64_t i;
  uint64_t v12;
  void **v13;
  std::string::size_type v14;
  void **v15;
  std::string::size_type v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float v21;
  uint64_t v22;
  double v23;
  float v24;
  std::string *v25;
  __int128 v26;
  void **v27;
  std::string::size_type v28;
  uint64_t v29;
  unsigned int *v30;
  uint64_t v31;
  uint64_t v32;
  void **v33;
  std::string::size_type v34;
  std::string *v35;
  __int128 v36;
  void **v37;
  std::string::size_type v38;
  uint64_t v39;
  float v40;
  std::string *v41;
  __int128 v42;
  void **v43;
  std::string::size_type v44;
  std::string v45;
  void *__p[2];
  int64_t v47;

  *((_BYTE *)&this->__r_.__value_.__s + 23) = 12;
  strcpy((char *)this, "Completion: ");
  v7 = *(_BYTE **)(a3 + 48);
  v6 = *(_BYTE **)(a3 + 56);
  v8 = v6 - v7;
  if (v6 != v7)
  {
    if (v8 < 0)
      sub_19C2A18E8();
    v9 = (char *)operator new(v6 - v7);
    v10 = v8 & 0xFFFFFFFFFFFFFFF8;
    memcpy(v9, v7, v10);
    if (v10)
    {
      for (i = 0; i != v10; i += 8)
      {
        v12 = *(_QWORD *)(a2 + 208);
        if (*(_DWORD *)(a2 + 296))
          sub_19C3BE34C((uint64_t)__p, *(std::recursive_mutex **)(v12 + 464), *(unsigned int *)&v9[i]);
        else
          sub_19C319420((_QWORD *)v12, *(unsigned int *)&v9[i], (uint64_t)__p);
        if (v47 >= 0)
          v13 = __p;
        else
          v13 = (void **)__p[0];
        if (v47 >= 0)
          v14 = HIBYTE(v47);
        else
          v14 = (std::string::size_type)__p[1];
        std::string::append(this, (const std::string::value_type *)v13, v14);
        if (SHIBYTE(v47) < 0)
          operator delete(__p[0]);
        std::string::append(this, " ", 1uLL);
      }
    }
    operator delete(v9);
  }
  std::string::append(this, "\n Prefix: ", 0xAuLL);
  if (*(char *)(a3 + 31) < 0)
  {
    sub_19C2B5238(__p, *(void **)(a3 + 8), *(_QWORD *)(a3 + 16));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)(a3 + 8);
    v47 = *(_QWORD *)(a3 + 24);
  }
  if (v47 >= 0)
    v15 = __p;
  else
    v15 = (void **)__p[0];
  if (v47 >= 0)
    v16 = HIBYTE(v47);
  else
    v16 = (std::string::size_type)__p[1];
  std::string::append(this, (const std::string::value_type *)v15, v16);
  if (SHIBYTE(v47) < 0)
    operator delete(__p[0]);
  v17 = -10.0;
  if (*(float *)a3 > 0.0)
  {
    v19 = *(_QWORD *)(a3 + 48);
    v18 = *(_QWORD *)(a3 + 56);
    v20 = v18 - v19;
    if (v18 != v19)
    {
      v21 = log10f(*(float *)(v18 - 4) / *(float *)a3);
      v22 = v20 >> 3;
      v23 = 1.0;
      if (v20 >> 3 != 1)
      {
        if (!v22)
          __assert_rtn("normalizationFactor", "LMDynamicInlineCompletionEnumerator.hpp", 78, "numWords >= 1");
        v24 = 1.15368974
            / (float)(sqrtf((float)(unint64_t)v22 + 0.1) * (float)((float)(unint64_t)v22 + 0.1));
        v23 = v24;
      }
      v17 = v23 * v21;
    }
  }
  std::to_string(&v45, v17);
  v25 = std::string::insert(&v45, 0, "\n Score (normalized log probability): ", 0x26uLL);
  v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  v47 = v25->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v26;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  if (v47 >= 0)
    v27 = __p;
  else
    v27 = (void **)__p[0];
  if (v47 >= 0)
    v28 = HIBYTE(v47);
  else
    v28 = (std::string::size_type)__p[1];
  std::string::append(this, (const std::string::value_type *)v27, v28);
  if (SHIBYTE(v47) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v45.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_43;
  }
  else if ((SHIBYTE(v45.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_43;
  }
  operator delete(v45.__r_.__value_.__l.__data_);
LABEL_43:
  std::string::append(this, "\n Context: ", 0xBuLL);
  v29 = *(_QWORD *)(a3 + 40);
  if (v29)
  {
    v30 = *(unsigned int **)(a3 + 32);
    v31 = 4 * v29;
    do
    {
      v32 = *(_QWORD *)(a2 + 208);
      if (*(_DWORD *)(a2 + 296))
        sub_19C3BE34C((uint64_t)__p, *(std::recursive_mutex **)(v32 + 464), *v30);
      else
        sub_19C319420((_QWORD *)v32, *v30, (uint64_t)__p);
      if (v47 >= 0)
        v33 = __p;
      else
        v33 = (void **)__p[0];
      if (v47 >= 0)
        v34 = HIBYTE(v47);
      else
        v34 = (std::string::size_type)__p[1];
      std::string::append(this, (const std::string::value_type *)v33, v34);
      if (SHIBYTE(v47) < 0)
        operator delete(__p[0]);
      std::string::append(this, " ", 1uLL);
      ++v30;
      v31 -= 4;
    }
    while (v31);
  }
  std::to_string(&v45, (unint64_t)*(float *)a3);
  v35 = std::string::insert(&v45, 0, "\n Context count: ", 0x11uLL);
  v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
  v47 = v35->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v36;
  v35->__r_.__value_.__l.__size_ = 0;
  v35->__r_.__value_.__r.__words[2] = 0;
  v35->__r_.__value_.__r.__words[0] = 0;
  if (v47 >= 0)
    v37 = __p;
  else
    v37 = (void **)__p[0];
  if (v47 >= 0)
    v38 = HIBYTE(v47);
  else
    v38 = (std::string::size_type)__p[1];
  std::string::append(this, (const std::string::value_type *)v37, v38);
  if (SHIBYTE(v47) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v45.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_65;
  }
  else if ((SHIBYTE(v45.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_65;
  }
  operator delete(v45.__r_.__value_.__l.__data_);
LABEL_65:
  v39 = *(_QWORD *)(a3 + 56);
  if (v39 == *(_QWORD *)(a3 + 48))
    v40 = 0.0;
  else
    v40 = *(float *)(v39 - 4);
  std::to_string(&v45, v40);
  v41 = std::string::insert(&v45, 0, "\n Completion count: ", 0x14uLL);
  v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
  v47 = v41->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v42;
  v41->__r_.__value_.__l.__size_ = 0;
  v41->__r_.__value_.__r.__words[2] = 0;
  v41->__r_.__value_.__r.__words[0] = 0;
  if (v47 >= 0)
    v43 = __p;
  else
    v43 = (void **)__p[0];
  if (v47 >= 0)
    v44 = HIBYTE(v47);
  else
    v44 = (std::string::size_type)__p[1];
  std::string::append(this, (const std::string::value_type *)v43, v44);
  if ((SHIBYTE(v47) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v45.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_82:
    operator delete(v45.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_82;
}

void sub_19C406EB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (*(char *)(v21 + 23) < 0)
    operator delete(*(void **)v21);
  _Unwind_Resume(exception_object);
}

void sub_19C406F74(float *a1, unint64_t a2, _OWORD *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t prime;
  void *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  size_t v25;
  size_t v26;
  size_t v27;
  _QWORD *i;
  size_t v29;
  uint64_t v30;
  unint64_t v31;
  uint8x8_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  size_t v36;
  _QWORD *v37;
  _QWORD *v38;
  unint64_t v39;
  _QWORD *v40;

  v5 = a2;
  v7 = *((_QWORD *)a1 + 1);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = (_QWORD *)*v9;
      if (v10)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (v10[2] == a2)
                return;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (v10[2] == a2)
              return;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v13 = operator new(0x20uLL);
  *v13 = 0;
  v13[1] = v5;
  *((_OWORD *)v13 + 1) = *a3;
  v14 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v15 = a1[8];
  if (v7 && (float)(v15 * (float)v7) >= v14)
  {
    v5 = v3;
    goto LABEL_72;
  }
  v16 = 1;
  if (v7 >= 3)
    v16 = (v7 & (v7 - 1)) != 0;
  v17 = v16 | (2 * v7);
  v18 = vcvtps_u32_f32(v14 / v15);
  if (v17 <= v18)
    prime = v18;
  else
    prime = v17;
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
    v7 = *((_QWORD *)a1 + 1);
  }
  if (prime > v7)
  {
LABEL_35:
    if (prime >> 61)
      sub_19C2A143C();
    v20 = operator new(8 * prime);
    v21 = *(_QWORD **)a1;
    *(_QWORD *)a1 = v20;
    if (v21)
      operator delete(v21);
    v22 = 0;
    *((_QWORD *)a1 + 1) = prime;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v22++) = 0;
    while (prime != v22);
    v24 = (uint64_t *)(a1 + 4);
    v23 = (_QWORD *)*((_QWORD *)a1 + 2);
    if (!v23)
      goto LABEL_59;
    v25 = v23[1];
    v26 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v27 = v25 & v26;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v27) = v24;
      for (i = (_QWORD *)*v23; *v23; i = (_QWORD *)*v23)
      {
        v29 = i[1] & v26;
        if (v29 == v27)
        {
          v23 = i;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v29))
        {
          *v23 = *i;
          v30 = 8 * v29;
          *i = **(_QWORD **)(*(_QWORD *)a1 + v30);
          **(_QWORD **)(*(_QWORD *)a1 + v30) = i;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v29) = v23;
          v23 = i;
          v27 = v29;
        }
      }
LABEL_59:
      v7 = prime;
      goto LABEL_60;
    }
    if (v25 >= prime)
      v25 %= prime;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v25) = v24;
    v34 = (_QWORD *)*v23;
    if (!*v23)
      goto LABEL_59;
    while (1)
    {
      v36 = v34[1];
      if (v36 >= prime)
        v36 %= prime;
      if (v36 != v25)
      {
        if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v36))
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v36) = v23;
          goto LABEL_64;
        }
        *v23 = *v34;
        v35 = 8 * v36;
        *v34 = **(_QWORD **)(*(_QWORD *)a1 + v35);
        **(_QWORD **)(*(_QWORD *)a1 + v35) = v34;
        v34 = v23;
      }
      v36 = v25;
LABEL_64:
      v23 = v34;
      v34 = (_QWORD *)*v34;
      v25 = v36;
      if (!v34)
        goto LABEL_59;
    }
  }
  if (prime >= v7)
    goto LABEL_60;
  v31 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
  if (v7 < 3 || (v32 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v32.i16[0] = vaddlv_u8(v32), v32.u32[0] > 1uLL))
  {
    v31 = std::__next_prime(v31);
  }
  else
  {
    v33 = 1 << -(char)__clz(v31 - 1);
    if (v31 >= 2)
      v31 = v33;
  }
  if (prime <= v31)
    prime = v31;
  if (prime < v7)
  {
    if (!prime)
    {
      v40 = *(_QWORD **)a1;
      *(_QWORD *)a1 = 0;
      if (v40)
        operator delete(v40);
      v7 = 0;
      *((_QWORD *)a1 + 1) = 0;
      goto LABEL_60;
    }
    goto LABEL_35;
  }
  v7 = *((_QWORD *)a1 + 1);
LABEL_60:
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v5)
      v5 %= v7;
  }
  else
  {
    v5 &= v7 - 1;
  }
LABEL_72:
  v37 = *(_QWORD **)a1;
  v38 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
  if (v38)
  {
    *v13 = *v38;
LABEL_80:
    *v38 = v13;
    goto LABEL_81;
  }
  *v13 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v13;
  v37[v5] = a1 + 4;
  if (*v13)
  {
    v39 = *(_QWORD *)(*v13 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v39 >= v7)
        v39 %= v7;
    }
    else
    {
      v39 &= v7 - 1;
    }
    v38 = (_QWORD *)(*(_QWORD *)a1 + 8 * v39);
    goto LABEL_80;
  }
LABEL_81:
  ++*((_QWORD *)a1 + 3);
}

void sub_19C4073BC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19C4073D0(uint64_t a1, const void *a2, uint64_t a3, unint64_t a4, unsigned __int8 *a5, std::string *a6)
{
  int v10;
  std::string *v11;
  const std::string::value_type *v12;
  std::string::size_type v13;
  uint64_t v14;
  std::string::size_type v15;
  std::string *v16;
  std::string::size_type size;
  float v18;
  const std::string::value_type *v19;
  std::string::size_type v20;
  uint64_t v21;
  std::string::size_type v22;
  std::string *v23;
  _QWORD *v24;
  _QWORD *v25;
  char *v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  size_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  float v40;
  uint64_t v41;
  __int128 v42;
  _BYTE *v43;
  _BYTE *v44;
  uint64_t v45;
  float *v46;
  size_t v47;
  uint64_t v48;
  void *v49;
  char *v50;
  char *v51;
  float *v52;
  int64_t v53;
  float *v54;
  unint64_t v55;
  uint64_t v56;
  float *v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unsigned __int128 *v62;
  const float *v63;
  unint64_t v64;
  const float *v65;
  unsigned __int128 v66;
  unsigned __int128 v67;
  char *v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  uint64_t *v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  size_t v79;
  uint64_t v80;
  int v81;
  size_t v82;
  size_t v83;
  void *v84;
  __int128 *v85;
  void **v86;
  uint64_t v87;
  int v88;
  unint64_t v89;
  unsigned __int8 *v90;
  unsigned __int8 *v91;
  int v92;
  float *v93;
  int64_t v94;
  char *v95;
  size_t v96;
  char *v97;
  int64_t v98;
  char *v99;
  size_t v100;
  int v101;
  __int128 *v102;
  __int128 *v103;
  std::string *v104;
  void **v105;
  std::string::size_type v106;
  uint64_t v107;
  std::string::size_type v108;
  std::string *v109;
  std::string::size_type v110;
  char *v111;
  char *v112;
  char *v113;
  int64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  char *v119;
  uint64_t *v120;
  unint64_t v121;
  uint64_t v122;
  char *v123;
  char *v124;
  uint64_t v125;
  __int128 v126;
  uint64_t v127;
  const std::string::value_type *v128;
  std::string::size_type v129;
  uint64_t v130;
  std::string::size_type v131;
  std::string *v132;
  std::string::size_type v133;
  void **v134;
  uint64_t v135;
  uint64_t v136;
  std::string::size_type v137;
  std::string::size_type v138;
  int *v139;
  __int128 v140;
  _BYTE *v141;
  _BYTE *v142;
  uint64_t v143;
  float *v144;
  int64_t v145;
  float *v146;
  _BOOL4 v147;
  std::string *v148;
  uint64_t v149;
  uint64_t v150;
  _QWORD *v151;
  unsigned __int16 v152;
  char *v153;
  std::string::size_type v154;
  std::string::size_type v155;
  void *v156;
  void *v157;
  uint64_t v158;
  uint64_t v159;
  std::string *v160;
  const std::string::value_type *v161;
  std::string::size_type v162;
  uint64_t v163;
  std::string::size_type v164;
  std::string *v165;
  std::string::size_type v166;
  char *v167;
  char *v168;
  void *v169;
  uint64_t v170;
  uint64_t v171;
  int *v172;
  int *v173;
  uint64_t v175;
  void **v176;
  uint64_t v177;
  void *v178;
  void *v179;
  std::string::size_type v180;
  void *v181;
  uint64_t v182;
  uint64_t v183;
  void *v184;
  void *v185;
  uint64_t v186;
  uint64_t v187;
  void *v188;
  void *v189;
  _QWORD *v190;
  uint64_t v191;
  uint64_t v192;
  void *v193;
  void *v194;
  int v195;
  const char *v196;
  _QWORD *v197;
  uint64_t v198;
  std::string *v199;
  unsigned __int8 *v200;
  unint64_t v201;
  size_t v203;
  _QWORD *v204;
  _QWORD *v205;
  std::string v207;
  void *v208[2];
  unsigned __int8 v209;
  void *v210[2];
  uint64_t v211;
  std::string v212;
  uint64_t v213;
  const void *v214;
  uint64_t v215;
  void *v216;
  char *v217;
  char *v218;
  void *__dst[2];
  uint64_t v220;
  void *__p[2];
  uint64_t v222;
  int v223;
  __int128 v224;
  uint64_t v225;
  const void *v226;
  uint64_t v227;
  void *v228;
  void *v229;
  uint64_t v230;
  __int128 v231;
  char *v232;
  __int128 v233;
  char *v234;
  _BYTE v235[24];
  uint64_t v236;
  __int128 v237;
  float *v238;
  char *v239;
  char *v240;

  v10 = *(_DWORD *)(a1 + 88);
  if ((char)a5[23] < 0)
  {
    sub_19C2B5238(__p, *(void **)a5, *((_QWORD *)a5 + 1));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a5;
    v222 = *((_QWORD *)a5 + 2);
  }
  v223 = v10;
  if (SHIBYTE(v222) < 0)
  {
    sub_19C2B5238(&v224, __p[0], (unint64_t)__p[1]);
  }
  else
  {
    v224 = *(_OWORD *)__p;
    v225 = v222;
  }
  v226 = a2;
  v227 = a3;
  v229 = 0;
  v230 = 0;
  v228 = 0;
  if (SHIBYTE(v222) < 0)
    operator delete(__p[0]);
  if (qword_1EE41C578 != -1)
    dispatch_once(&qword_1EE41C578, &unk_1E3D3C5E8);
  sub_19C406A14(&v212, a1, (uint64_t)&v223);
  if ((v212.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v11 = &v212;
  else
    v11 = (std::string *)v212.__r_.__value_.__r.__words[0];
  sub_19C34EC30("Starting dynamic inline completion beam search , for context length %zu, seeded with empty completion: %s, with ", (uint64_t)v235, a3, v11);
  if (v235[23] >= 0)
    v12 = v235;
  else
    v12 = *(const std::string::value_type **)v235;
  if (v235[23] >= 0)
    v13 = v235[23];
  else
    v13 = *(_QWORD *)&v235[8];
  std::string::append(a6, v12, v13);
  if (SHIBYTE(a6->__r_.__value_.__r.__words[2]) < 0)
  {
    size = a6->__r_.__value_.__l.__size_;
    if (size)
    {
      v16 = (std::string *)a6->__r_.__value_.__r.__words[0];
      if (!*(_BYTE *)(a6->__r_.__value_.__r.__words[0] + size - 1))
      {
        v15 = size - 1;
        a6->__r_.__value_.__l.__size_ = v15;
        goto LABEL_27;
      }
    }
  }
  else
  {
    v14 = HIBYTE(a6->__r_.__value_.__r.__words[2]);
    if (*((_BYTE *)&a6->__r_.__value_.__s + 23) && !a6->__r_.__value_.__s.__data_[v14 - 1])
    {
      v15 = v14 - 1;
      *((_BYTE *)&a6->__r_.__value_.__s + 23) = v14 - 1;
      v16 = a6;
LABEL_27:
      v16->__r_.__value_.__s.__data_[v15] = 0;
    }
  }
  std::string::push_back(a6, 10);
  if ((v235[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v235);
    if ((SHIBYTE(v212.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_30;
  }
  else if ((SHIBYTE(v212.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_30;
  }
  operator delete(v212.__r_.__value_.__l.__data_);
LABEL_30:
  v18 = (float)a4;
  if (*(float *)(a1 + 88) < (float)a4)
  {
    if (qword_1EE41C578 != -1)
      dispatch_once(&qword_1EE41C578, &unk_1E3D3C5E8);
    sub_19C34EC30("Abandoning dynamic inline completion beam search , minimum count threshold %zu not met for context of length %zu", (uint64_t)v235, a4, a3);
    if (v235[23] >= 0)
      v19 = v235;
    else
      v19 = *(const std::string::value_type **)v235;
    if (v235[23] >= 0)
      v20 = v235[23];
    else
      v20 = *(_QWORD *)&v235[8];
    std::string::append(a6, v19, v20);
    if (SHIBYTE(a6->__r_.__value_.__r.__words[2]) < 0)
    {
      v180 = a6->__r_.__value_.__l.__size_;
      if (!v180)
        goto LABEL_362;
      v23 = (std::string *)a6->__r_.__value_.__r.__words[0];
      if (*(_BYTE *)(a6->__r_.__value_.__r.__words[0] + v180 - 1))
        goto LABEL_362;
      v22 = v180 - 1;
      a6->__r_.__value_.__l.__size_ = v22;
    }
    else
    {
      v21 = HIBYTE(a6->__r_.__value_.__r.__words[2]);
      if (!*((_BYTE *)&a6->__r_.__value_.__s + 23) || a6->__r_.__value_.__s.__data_[v21 - 1])
        goto LABEL_362;
      v22 = v21 - 1;
      *((_BYTE *)&a6->__r_.__value_.__s + 23) = v21 - 1;
      v23 = a6;
    }
    v23->__r_.__value_.__s.__data_[v22] = 0;
LABEL_362:
    std::string::push_back(a6, 10);
    if ((v235[23] & 0x80000000) == 0)
      goto LABEL_401;
    v181 = *(void **)v235;
    goto LABEL_400;
  }
  if ((char)a5[23] < 0)
  {
    sub_19C2B5238(__dst, *(void **)a5, *((_QWORD *)a5 + 1));
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)a5;
    v220 = *((_QWORD *)a5 + 2);
  }
  v24 = (_QWORD *)operator new();
  sub_19C408FF0(v24, 6uLL);
  sub_19C4090FC(v24, (uint64_t)&v223);
  v25 = (_QWORD *)operator new();
  sub_19C408FF0(v25, 6uLL);
  v197 = (_QWORD *)operator new();
  sub_19C408FF0(v197, *(_QWORD *)(a1 + 64));
  if (*(_QWORD *)(a1 + 56))
  {
    v200 = a5;
    v201 = 0;
    v199 = a6;
    v203 = 4 * a3;
    v198 = (uint64_t)&a6[-1].__r_.__value_.__r.__words[2] + 7;
    while (v24[2] != v24[3])
    {
      v204 = (_QWORD *)operator new();
      sub_19C408FF0(v204, 6uLL);
      if (v25)
      {
        v29 = v25[2];
        if (v29)
        {
          v30 = v25[3];
          v31 = (void *)v25[2];
          if (v30 != v29)
          {
            do
            {
              v32 = *(void **)(v30 - 24);
              if (v32)
              {
                *(_QWORD *)(v30 - 16) = v32;
                operator delete(v32);
              }
              if (*(char *)(v30 - 41) < 0)
                operator delete(*(void **)(v30 - 64));
              v30 -= 72;
            }
            while (v30 != v29);
            v31 = (void *)v25[2];
          }
          v25[3] = v29;
          operator delete(v31);
        }
        MEMORY[0x1A1AD355C](v25, 0x1020C402564D6C4);
      }
      v33 = v24[2];
      v34 = v24[3];
      v205 = v24;
      if (v33 == v34)
        goto LABEL_246;
      v35 = v201 + a3;
      v36 = 4 * (v201 + a3);
      while (1)
      {
        v37 = v204[2];
        v38 = v204[3];
        if (0x8E38E38E38E38E39 * ((v38 - v37) >> 3) >= v204[1])
        {
          v39 = *(_QWORD *)(v34 - 16);
          if (v39 == *(_QWORD *)(v34 - 24))
          {
            v40 = 0.0;
            if (v37 == v38)
            {
LABEL_407:
              v195 = 55;
              v196 = "worst";
              goto LABEL_408;
            }
          }
          else
          {
            v40 = *(float *)(v39 - 4);
            if (v37 == v38)
              goto LABEL_407;
          }
          v41 = *(_QWORD *)(v37 + 56);
          if (v41 == *(_QWORD *)(v37 + 48))
          {
            if (v40 <= 0.0)
              goto LABEL_246;
          }
          else if (v40 <= *(float *)(v41 - 4))
          {
            goto LABEL_246;
          }
        }
        if (*(_QWORD *)(a1 + 224) >= 0x32uLL)
          break;
        if (v33 == v34)
          __assert_rtn("best", "PriorityQueue.h", 46, "!m_predictions.empty()");
        *(_DWORD *)v235 = *(_DWORD *)(v34 - 72);
        if (*(char *)(v34 - 41) < 0)
        {
          sub_19C2B5238(&v235[8], *(void **)(v34 - 64), *(_QWORD *)(v34 - 56));
        }
        else
        {
          v42 = *(_OWORD *)(v34 - 64);
          v236 = *(_QWORD *)(v34 - 48);
          *(_OWORD *)&v235[8] = v42;
        }
        v237 = *(_OWORD *)(v34 - 40);
        v239 = 0;
        v240 = 0;
        v238 = 0;
        v44 = *(_BYTE **)(v34 - 24);
        v43 = *(_BYTE **)(v34 - 16);
        v45 = v43 - v44;
        if (v43 != v44)
        {
          if (v45 < 0)
            sub_19C2A18E8();
          v46 = (float *)operator new(v43 - v44);
          v238 = v46;
          v239 = (char *)v46;
          v240 = (char *)&v46[2 * (v45 >> 3)];
          v47 = v45 & 0xFFFFFFFFFFFFFFF8;
          memcpy(v46, v44, v47);
          v239 = (char *)v46 + v47;
        }
        v48 = v24[3];
        v49 = *(void **)(v48 - 24);
        if (v49)
        {
          *(_QWORD *)(v48 - 16) = v49;
          operator delete(v49);
        }
        if (*(char *)(v48 - 41) < 0)
          operator delete(*(void **)(v48 - 64));
        v24[3] = v48 - 72;
        v233 = 0uLL;
        v234 = 0;
        if (v35)
        {
          if (v35 >> 62)
            sub_19C2A18E8();
          v50 = (char *)operator new(v36);
          *(_QWORD *)&v233 = v50;
          v234 = &v50[4 * v35];
          bzero(v50, v36);
          v51 = &v50[v36];
          *((_QWORD *)&v233 + 1) = &v50[v36];
          if (!a3)
            goto LABEL_94;
        }
        else
        {
          v51 = 0;
          v50 = 0;
          if (!a3)
            goto LABEL_94;
        }
        memmove(v50, a2, v203);
LABEL_94:
        v52 = v238;
        v53 = v239 - (char *)v238;
        if (v239 != (char *)v238)
        {
          if (v53 < 0)
            sub_19C2A18E8();
          v54 = (float *)operator new(v239 - (char *)v238);
          memcpy(v54, v52, v53 & 0xFFFFFFFFFFFFFFF8);
          if ((v53 & 0xFFFFFFFFFFFFFFF8) != 0)
          {
            v55 = v53 - 8;
            v56 = a3;
            v57 = v54;
            if ((unint64_t)(v53 - 8) > 0x5F)
            {
              v58 = v55 >> 3;
              if (&v50[v203] >= (char *)v54 + (v55 & 0xFFFFFFFFFFFFFFF8) + 4
                || (v56 = a3, v57 = v54, v54 >= (float *)&v50[4 * a3 + 4 + 4 * v58]))
              {
                v59 = v58 + 1;
                v60 = (v58 + 1) & 7;
                if (!v60)
                  v60 = 8;
                v61 = v59 - v60;
                v62 = (unsigned __int128 *)&v50[4 * a3 + 16];
                v63 = v54 + 8;
                v64 = v61;
                do
                {
                  v65 = v63 - 8;
                  v66 = (unsigned __int128)vld2q_f32(v65);
                  v67 = (unsigned __int128)vld2q_f32(v63);
                  *(v62 - 1) = v66;
                  *v62 = v67;
                  v62 += 2;
                  v63 += 16;
                  v64 -= 8;
                }
                while (v64);
                v56 = a3 + v61;
                v57 = &v54[2 * v61];
              }
            }
            v68 = &v50[4 * v56];
            do
            {
              v69 = *(_DWORD *)v57;
              v57 += 2;
              *(_DWORD *)v68 = v69;
              v68 += 4;
            }
            while (v57 != (float *)((char *)v54 + (v53 & 0xFFFFFFFFFFFFFFF8)));
          }
          operator delete(v54);
          v24 = v205;
        }
        v70 = operator new();
        sub_19C4305EC(v70, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), (uint64_t)v50, (v51 - v50) >> 2, *(_QWORD *)(a1 + 16) + 88, a1 + 152);
        v71 = *(_QWORD *)(a1 + 48);
        *(_QWORD *)(a1 + 48) = v70;
        if (v71)
        {
          v72 = *(void **)v71;
          if (*(_QWORD *)v71)
          {
            *(_QWORD *)(v71 + 8) = v72;
            operator delete(v72);
          }
          MEMORY[0x1A1AD355C](v71, 0x1020C4016EE4530);
        }
        ++*(_QWORD *)(a1 + 224);
LABEL_113:
        v73 = *(uint64_t **)(a1 + 48);
        v74 = *v73;
        v75 = (v73[1] - *v73) >> 3;
        v76 = v73[3] + 1;
        while (1)
        {
          v73[3] = v76;
          if (v76 >= v75)
            break;
          v77 = *(_QWORD *)(v74 + 8 * v76++);
          if (v77 >= 0x1F4)
          {
            v78 = *(_QWORD *)(a1 + 208);
            if (*(_DWORD *)(a1 + 296))
              sub_19C3BE34C((uint64_t)&v231, *(std::recursive_mutex **)(v78 + 464), v77);
            else
              sub_19C319420((_QWORD *)v78, v77, (uint64_t)&v231);
            if (v220 >= 0)
              v79 = HIBYTE(v220);
            else
              v79 = (size_t)__dst[1];
            v80 = HIBYTE(v232);
            v81 = SHIBYTE(v232);
            v82 = *((_QWORD *)&v231 + 1);
            if (SHIBYTE(v232) >= 0)
              v83 = HIBYTE(v232);
            else
              v83 = *((_QWORD *)&v231 + 1);
            if (v83 >= v79)
            {
              v84 = (void *)v231;
              if (SHIBYTE(v232) >= 0)
                v85 = &v231;
              else
                v85 = (__int128 *)v231;
              if (v220 >= 0)
                v86 = __dst;
              else
                v86 = (void **)__dst[0];
              if (memcmp(v85, v86, v79))
              {
LABEL_133:
                v24 = v205;
                goto LABEL_134;
              }
              v87 = v200[23];
              v88 = (char)v87;
              v89 = *((_QWORD *)v200 + 1);
              if ((v87 & 0x80u) != 0)
                v87 = *((_QWORD *)v200 + 1);
              if (v83 == v87)
              {
                if (v88 >= 0)
                  v90 = v200;
                else
                  v90 = *(unsigned __int8 **)v200;
                if ((v81 & 0x80000000) == 0)
                {
                  v24 = v205;
                  if (v81)
                  {
                    v91 = (unsigned __int8 *)&v231;
                    while (*v91 == *v90)
                    {
                      ++v91;
                      ++v90;
                      if (!--v80)
                        goto LABEL_133;
                    }
                    goto LABEL_151;
                  }
LABEL_137:
                  v36 = 4 * (v201 + a3);
                  goto LABEL_113;
                }
                if (memcmp(v84, v90, v82))
                  goto LABEL_151;
LABEL_136:
                operator delete(v84);
                v24 = v205;
                goto LABEL_137;
              }
LABEL_151:
              v92 = *(_DWORD *)(a1 + 88);
              if (v88 < 0)
              {
                sub_19C2B5238(v210, *(void **)v200, v89);
              }
              else
              {
                *(_OWORD *)v210 = *(_OWORD *)v200;
                v211 = *((_QWORD *)v200 + 2);
              }
              v93 = v238;
              v94 = v239 - (char *)v238;
              if (v239 == (char *)v238)
              {
                v95 = 0;
                v97 = 0;
              }
              else
              {
                if (v94 < 0)
                  sub_19C2A18E8();
                v95 = (char *)operator new(v239 - (char *)v238);
                v96 = v94 & 0xFFFFFFFFFFFFFFF8;
                memcpy(v95, v93, v96);
                v97 = &v95[v96];
              }
              LODWORD(v212.__r_.__value_.__l.__data_) = v92;
              if (SHIBYTE(v211) < 0)
              {
                sub_19C2B5238(&v212.__r_.__value_.__s.__data_[8], v210[0], (unint64_t)v210[1]);
              }
              else
              {
                *(_OWORD *)&v212.__r_.__value_.__r.__words[1] = *(_OWORD *)v210;
                v213 = v211;
              }
              v214 = a2;
              v215 = a3;
              v217 = 0;
              v218 = 0;
              v216 = 0;
              v98 = v97 - v95;
              if (v98)
              {
                if (v98 < 0)
                  sub_19C2A18E8();
                v99 = (char *)operator new(v98);
                v216 = v99;
                v218 = &v99[8 * (v98 >> 3)];
                v100 = v98 & 0xFFFFFFFFFFFFFFF8;
                memcpy(v99, v95, v100);
                v217 = &v99[v100];
              }
              if (v95)
                operator delete(v95);
              if (SHIBYTE(v211) < 0)
                operator delete(v210[0]);
              if (qword_1EE41C578 != -1)
                dispatch_once(&qword_1EE41C578, &unk_1E3D3C5E8);
              v101 = SHIBYTE(v232);
              v102 = (__int128 *)v231;
              sub_19C406A14(&v207, a1, (uint64_t)&v212);
              v103 = &v231;
              if (v101 < 0)
                v103 = v102;
              v104 = &v207;
              if ((v207.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v104 = (std::string *)v207.__r_.__value_.__r.__words[0];
              sub_19C34EC30("Produced next word:  %s, for dynamic inline completion candidate : %s ", (uint64_t)v208, v103, v104);
              if ((v209 & 0x80u) == 0)
                v105 = v208;
              else
                v105 = (void **)v208[0];
              if ((v209 & 0x80u) == 0)
                v106 = v209;
              else
                v106 = (std::string::size_type)v208[1];
              std::string::append(v199, (const std::string::value_type *)v105, v106);
              if (SHIBYTE(v199->__r_.__value_.__r.__words[2]) < 0)
              {
                v110 = v199->__r_.__value_.__l.__size_;
                if (v110)
                {
                  v109 = (std::string *)v199->__r_.__value_.__r.__words[0];
                  if (!*(_BYTE *)(v199->__r_.__value_.__r.__words[0] + v110 - 1))
                  {
                    v108 = v110 - 1;
                    v199->__r_.__value_.__l.__size_ = v108;
LABEL_187:
                    v109->__r_.__value_.__s.__data_[v108] = 0;
                  }
                }
              }
              else
              {
                v107 = HIBYTE(v199->__r_.__value_.__r.__words[2]);
                if (*((_BYTE *)&v199->__r_.__value_.__s + 23) && !*(_BYTE *)(v198 + v107))
                {
                  v108 = v107 - 1;
                  *((_BYTE *)&v199->__r_.__value_.__s + 23) = v107 - 1;
                  v109 = v199;
                  goto LABEL_187;
                }
              }
              std::string::push_back(v199, 10);
              if ((char)v209 < 0)
              {
                operator delete(v208[0]);
                if ((SHIBYTE(v207.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_190;
              }
              else if ((SHIBYTE(v207.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_190:
                v111 = v217;
                if (v217 >= v218)
                {
                  v113 = (char *)v216;
                  v114 = v217 - (_BYTE *)v216;
                  v115 = (v217 - (_BYTE *)v216) >> 3;
                  v116 = v115 + 1;
                  if ((unint64_t)(v115 + 1) >> 61)
                    sub_19C2A18E8();
                  v117 = v218 - (_BYTE *)v216;
                  if ((v218 - (_BYTE *)v216) >> 2 > v116)
                    v116 = v117 >> 2;
                  if ((unint64_t)v117 >= 0x7FFFFFFFFFFFFFF8)
                    v118 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v118 = v116;
                  if (v118)
                  {
                    if (v118 >> 61)
                      sub_19C2A143C();
                    v119 = (char *)operator new(8 * v118);
                  }
                  else
                  {
                    v119 = 0;
                  }
                  v120 = (uint64_t *)&v119[8 * v115];
                  *v120 = v77;
                  v112 = (char *)(v120 + 1);
                  if (v111 == v113)
                  {
                    v113 = v111;
                  }
                  else
                  {
                    v121 = v111 - 8 - v113;
                    if (v121 < 0x58)
                      goto LABEL_423;
                    if ((unint64_t)(v111 - &v119[v114]) < 0x20)
                      goto LABEL_423;
                    v122 = (v121 >> 3) + 1;
                    v123 = &v119[8 * v115 - 16];
                    v124 = v111 - 16;
                    v125 = v122 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      v126 = *(_OWORD *)v124;
                      *((_OWORD *)v123 - 1) = *((_OWORD *)v124 - 1);
                      *(_OWORD *)v123 = v126;
                      v123 -= 32;
                      v124 -= 32;
                      v125 -= 4;
                    }
                    while (v125);
                    v120 -= v122 & 0x3FFFFFFFFFFFFFFCLL;
                    v111 -= 8 * (v122 & 0x3FFFFFFFFFFFFFFCLL);
                    if (v122 != (v122 & 0x3FFFFFFFFFFFFFFCLL))
                    {
LABEL_423:
                      do
                      {
                        v127 = *((_QWORD *)v111 - 1);
                        v111 -= 8;
                        *--v120 = v127;
                      }
                      while (v111 != v113);
                      v113 = (char *)v216;
                    }
                  }
                  v216 = v120;
                  v217 = v112;
                  v218 = &v119[8 * v118];
                  if (v113)
                    operator delete(v113);
                }
                else
                {
                  *(_QWORD *)v217 = v77;
                  v112 = v111 + 8;
                }
                v217 = v112;
                sub_19C4090FC(v204, (uint64_t)&v212);
                if (v216)
                {
                  v217 = (char *)v216;
                  operator delete(v216);
                }
                v24 = v205;
                if (SHIBYTE(v213) < 0)
                  operator delete((void *)v212.__r_.__value_.__l.__size_);
                if ((HIBYTE(v232) & 0x80) == 0)
                  goto LABEL_137;
LABEL_135:
                v84 = (void *)v231;
                goto LABEL_136;
              }
              operator delete(v207.__r_.__value_.__l.__data_);
              goto LABEL_190;
            }
LABEL_134:
            if ((v81 & 0x80) == 0)
              goto LABEL_137;
            goto LABEL_135;
          }
        }
        if ((_QWORD)v233)
          operator delete((void *)v233);
        if (v238)
        {
          v239 = (char *)v238;
          operator delete(v238);
        }
        if (SHIBYTE(v236) < 0)
          operator delete(*(void **)&v235[8]);
        v33 = v24[2];
        v34 = v24[3];
        if (v33 == v34)
          goto LABEL_246;
      }
      if (qword_1EE41C578 != -1)
        dispatch_once(&qword_1EE41C578, &unk_1E3D3C5E8);
      sub_19C34EC30("Maximum no. of inline nGramPoolEnumerations reached: %zu", (uint64_t)v235, 50);
      if (v235[23] >= 0)
        v128 = v235;
      else
        v128 = *(const std::string::value_type **)v235;
      if (v235[23] >= 0)
        v129 = v235[23];
      else
        v129 = *(_QWORD *)&v235[8];
      std::string::append(v199, v128, v129);
      if (SHIBYTE(v199->__r_.__value_.__r.__words[2]) < 0)
      {
        v133 = v199->__r_.__value_.__l.__size_;
        if (v133)
        {
          v132 = (std::string *)v199->__r_.__value_.__r.__words[0];
          if (!*(_BYTE *)(v199->__r_.__value_.__r.__words[0] + v133 - 1))
          {
            v131 = v133 - 1;
            v199->__r_.__value_.__l.__size_ = v131;
LABEL_244:
            v132->__r_.__value_.__s.__data_[v131] = 0;
          }
        }
      }
      else
      {
        v130 = HIBYTE(v199->__r_.__value_.__r.__words[2]);
        if (*((_BYTE *)&v199->__r_.__value_.__s + 23) && !*(_BYTE *)(v198 + v130))
        {
          v131 = v130 - 1;
          *((_BYTE *)&v199->__r_.__value_.__s + 23) = v130 - 1;
          v132 = v199;
          goto LABEL_244;
        }
      }
      std::string::push_back(v199, 10);
      if ((v235[23] & 0x80000000) != 0)
      {
        operator delete(*(void **)v235);
        if (SHIBYTE(v220) < 0)
          goto LABEL_249;
LABEL_247:
        HIBYTE(v220) = 0;
        v134 = __dst;
      }
      else
      {
LABEL_246:
        if ((SHIBYTE(v220) & 0x80000000) == 0)
          goto LABEL_247;
LABEL_249:
        __dst[1] = 0;
        v134 = (void **)__dst[0];
      }
      *(_BYTE *)v134 = 0;
      if (++v201 < *(_QWORD *)(a1 + 200))
        goto LABEL_330;
      v135 = v204[2];
      v136 = v204[3];
      if (v135 == v136)
        goto LABEL_330;
      memset(&v212, 0, sizeof(v212));
      sub_19C4098C4((uint64_t)&v212, v135, v136, 0x8E38E38E38E38E39 * ((v136 - v135) >> 3));
      v137 = v212.__r_.__value_.__l.__size_;
      v138 = v212.__r_.__value_.__r.__words[0];
      if (v212.__r_.__value_.__r.__words[0] == v212.__r_.__value_.__l.__size_)
        goto LABEL_416;
      v139 = (int *)(v212.__r_.__value_.__l.__size_ - 72);
      if (v212.__r_.__value_.__l.__size_ - 72 > v212.__r_.__value_.__r.__words[0])
      {
        do
        {
          sub_19C4099E0((int *)v138, v139);
          v138 += 72;
          v139 -= 18;
        }
        while (v138 < (unint64_t)v139);
        v137 = v212.__r_.__value_.__l.__size_;
        v138 = v212.__r_.__value_.__r.__words[0];
      }
      if (v137 == v138)
LABEL_416:
        sub_19C30F73C();
      *(_DWORD *)v235 = *(_DWORD *)v138;
      if (*(char *)(v138 + 31) < 0)
      {
        sub_19C2B5238(&v235[8], *(void **)(v138 + 8), *(_QWORD *)(v138 + 16));
      }
      else
      {
        v140 = *(_OWORD *)(v138 + 8);
        v236 = *(_QWORD *)(v138 + 24);
        *(_OWORD *)&v235[8] = v140;
      }
      v237 = *(_OWORD *)(v138 + 32);
      v239 = 0;
      v240 = 0;
      v238 = 0;
      v142 = *(_BYTE **)(v138 + 48);
      v141 = *(_BYTE **)(v138 + 56);
      v143 = v141 - v142;
      if (v141 == v142)
        goto LABEL_265;
      if (v143 < 0)
        sub_19C2A18E8();
      v144 = (float *)operator new(v141 - v142);
      v238 = v144;
      v239 = (char *)v144;
      v240 = (char *)&v144[2 * (v143 >> 3)];
      v145 = v143 & 0xFFFFFFFFFFFFFFF8;
      memcpy(v144, v142, v145);
      v146 = (float *)((char *)v144 + v145);
      v239 = (char *)v144 + v145;
      if (!v145)
      {
LABEL_265:
        v148 = v199;
        if (v18 > 0.0)
          goto LABEL_291;
      }
      else
      {
        if (*(v146 - 1) < v18)
        {
          v147 = 0;
          v148 = v199;
          goto LABEL_292;
        }
        v148 = v199;
        if (v145 < 0)
          sub_19C2A18E8();
        if ((v145 & 0xFFFFFFFFFFFFFFF8) == 8)
        {
          if (v146 == v144)
            v149 = 0;
          else
            v149 = *((_QWORD *)v146 - 1);
          v150 = *(_QWORD *)(a1 + 208);
          if (*(_DWORD *)(a1 + 296))
            sub_19C3BE34C((uint64_t)&v233, *(std::recursive_mutex **)(v150 + 464), v149);
          else
            sub_19C319420((_QWORD *)v150, v149, (uint64_t)&v233);
          v151 = *(_QWORD **)(a1 + 208);
          if (SHIBYTE(v234) < 0)
          {
            sub_19C2B5238(&v231, (void *)v233, *((unint64_t *)&v233 + 1));
          }
          else
          {
            v231 = v233;
            v232 = v234;
          }
          v152 = sub_19C32EC10(v151, (uint64_t)&v231);
          if (SHIBYTE(v232) < 0)
            operator delete((void *)v231);
          if (v152 >= 0x100u && (_BYTE)v152)
          {
            if (SHIBYTE(v234) < 0)
              operator delete((void *)v233);
LABEL_291:
            v147 = 0;
LABEL_292:
            v153 = (char *)v238;
            if (v238)
              goto LABEL_293;
            goto LABEL_294;
          }
          if (SHIBYTE(v234) < 0)
            operator delete((void *)v233);
        }
      }
      if (v212.__r_.__value_.__l.__size_ - v212.__r_.__value_.__r.__words[0] == 72)
      {
        v147 = 1;
        goto LABEL_292;
      }
      if (*(float *)v235 <= 0.0)
        goto LABEL_291;
      v153 = v239;
      if (v239 != (char *)v238)
      {
        v147 = log10f(*((float *)v239 - 1) / *(float *)v235) >= -0.125;
        goto LABEL_292;
      }
      v147 = 0;
      if (v239)
      {
LABEL_293:
        v239 = v153;
        operator delete(v153);
      }
LABEL_294:
      if (SHIBYTE(v236) < 0)
      {
        operator delete(*(void **)&v235[8]);
        v154 = v212.__r_.__value_.__r.__words[0];
        if (!v212.__r_.__value_.__r.__words[0])
          goto LABEL_307;
LABEL_296:
        v155 = v212.__r_.__value_.__l.__size_;
        v156 = (void *)v154;
        if (v212.__r_.__value_.__l.__size_ != v154)
        {
          do
          {
            v157 = *(void **)(v155 - 24);
            if (v157)
            {
              *(_QWORD *)(v155 - 16) = v157;
              operator delete(v157);
            }
            if (*(char *)(v155 - 41) < 0)
              operator delete(*(void **)(v155 - 64));
            v155 -= 72;
          }
          while (v155 != v154);
          v156 = (void *)v212.__r_.__value_.__r.__words[0];
        }
        v212.__r_.__value_.__l.__size_ = v154;
        operator delete(v156);
        v148 = v199;
        if (!v147)
          goto LABEL_330;
LABEL_308:
        v158 = v204[3];
        if (v204[2] != v158)
        {
          sub_19C4090FC(v197, v158 - 72);
          if (qword_1EE41C578 != -1)
            dispatch_once(&qword_1EE41C578, &unk_1E3D3C5E8);
          v159 = v204[3];
          if (v204[2] == v159)
            __assert_rtn("best", "PriorityQueue.h", 46, "!m_predictions.empty()");
          sub_19C406A14(&v212, a1, v159 - 72);
          v160 = &v212;
          if ((v212.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v160 = (std::string *)v212.__r_.__value_.__r.__words[0];
          sub_19C34EC30("Dynamic inline completion candidate: %s", (uint64_t)v235, v160);
          if (v235[23] >= 0)
            v161 = v235;
          else
            v161 = *(const std::string::value_type **)v235;
          if (v235[23] >= 0)
            v162 = v235[23];
          else
            v162 = *(_QWORD *)&v235[8];
          std::string::append(v148, v161, v162);
          if (SHIBYTE(v148->__r_.__value_.__r.__words[2]) < 0)
          {
            v166 = v148->__r_.__value_.__l.__size_;
            if (v166)
            {
              v165 = (std::string *)v148->__r_.__value_.__r.__words[0];
              if (!*(_BYTE *)(v148->__r_.__value_.__r.__words[0] + v166 - 1))
              {
                v164 = v166 - 1;
                v148->__r_.__value_.__l.__size_ = v164;
LABEL_327:
                v165->__r_.__value_.__s.__data_[v164] = 0;
              }
            }
          }
          else
          {
            v163 = HIBYTE(v148->__r_.__value_.__r.__words[2]);
            if (*((_BYTE *)&v148->__r_.__value_.__s + 23) && !*(_BYTE *)(v198 + v163))
            {
              v164 = v163 - 1;
              *((_BYTE *)&v148->__r_.__value_.__s + 23) = v163 - 1;
              v165 = v148;
              goto LABEL_327;
            }
          }
          std::string::push_back(v148, 10);
          if ((v235[23] & 0x80000000) != 0)
          {
            operator delete(*(void **)v235);
            if ((SHIBYTE(v212.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_330;
          }
          else if ((SHIBYTE(v212.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            goto LABEL_330;
          }
          operator delete(v212.__r_.__value_.__l.__data_);
          v167 = (char *)v24[2];
          if (v167)
            goto LABEL_331;
          goto LABEL_52;
        }
        v195 = 46;
        v196 = "best";
LABEL_408:
        __assert_rtn(v196, "PriorityQueue.h", v195, "!m_predictions.empty()");
      }
      v154 = v212.__r_.__value_.__r.__words[0];
      if (v212.__r_.__value_.__r.__words[0])
        goto LABEL_296;
LABEL_307:
      if (v147)
        goto LABEL_308;
LABEL_330:
      v167 = (char *)v24[2];
      if (v167)
      {
LABEL_331:
        v168 = (char *)v24[3];
        v26 = v167;
        if (v168 != v167)
        {
          do
          {
            v169 = (void *)*((_QWORD *)v168 - 3);
            if (v169)
            {
              *((_QWORD *)v168 - 2) = v169;
              operator delete(v169);
            }
            if (*(v168 - 41) < 0)
              operator delete(*((void **)v168 - 8));
            v168 -= 72;
          }
          while (v168 != v167);
          v26 = (char *)v24[2];
        }
        v24[3] = v167;
        operator delete(v26);
      }
LABEL_52:
      MEMORY[0x1A1AD355C](v24, 0x1020C402564D6C4);
      v25 = 0;
      v27 = 0;
      v28 = v204;
      v24 = v204;
      if (v201 >= *(_QWORD *)(a1 + 56))
        goto LABEL_344;
    }
  }
  v28 = v24;
  v27 = v25;
LABEL_344:
  v170 = v197[2];
  v171 = v197[3];
  memset(v235, 0, sizeof(v235));
  sub_19C4098C4((uint64_t)v235, v170, v171, 0x8E38E38E38E38E39 * ((v171 - v170) >> 3));
  v172 = *(int **)v235;
  v173 = (int *)(*(_QWORD *)&v235[8] - 72);
  if (*(_QWORD *)v235 != *(_QWORD *)&v235[8] && (unint64_t)v173 > *(_QWORD *)v235)
  {
    do
    {
      sub_19C4099E0(v172, v173);
      v172 += 18;
      v173 -= 18;
    }
    while (v172 < v173);
  }
  v175 = *(_QWORD *)(a1 + 272);
  if (v175)
  {
    v176 = (void **)(a1 + 272);
    v177 = *(_QWORD *)(a1 + 280);
    v178 = *(void **)(a1 + 272);
    if (v177 != v175)
    {
      do
      {
        v179 = *(void **)(v177 - 24);
        if (v179)
        {
          *(_QWORD *)(v177 - 16) = v179;
          operator delete(v179);
        }
        if (*(char *)(v177 - 41) < 0)
          operator delete(*(void **)(v177 - 64));
        v177 -= 72;
      }
      while (v177 != v175);
      v178 = *v176;
    }
    *(_QWORD *)(a1 + 280) = v175;
    operator delete(v178);
    *v176 = 0;
    *(_QWORD *)(a1 + 280) = 0;
    *(_QWORD *)(a1 + 288) = 0;
  }
  *(_OWORD *)(a1 + 272) = *(_OWORD *)v235;
  *(_QWORD *)(a1 + 288) = *(_QWORD *)&v235[16];
  v182 = v197[2];
  if (v182)
  {
    v183 = v197[3];
    v184 = (void *)v197[2];
    if (v183 != v182)
    {
      do
      {
        v185 = *(void **)(v183 - 24);
        if (v185)
        {
          *(_QWORD *)(v183 - 16) = v185;
          operator delete(v185);
        }
        if (*(char *)(v183 - 41) < 0)
          operator delete(*(void **)(v183 - 64));
        v183 -= 72;
      }
      while (v183 != v182);
      v184 = (void *)v197[2];
    }
    v197[3] = v182;
    operator delete(v184);
  }
  MEMORY[0x1A1AD355C](v197, 0x1020C402564D6C4);
  if (v27)
  {
    v186 = v27[2];
    if (v186)
    {
      v187 = v27[3];
      v188 = (void *)v27[2];
      if (v187 != v186)
      {
        do
        {
          v189 = *(void **)(v187 - 24);
          if (v189)
          {
            *(_QWORD *)(v187 - 16) = v189;
            operator delete(v189);
          }
          if (*(char *)(v187 - 41) < 0)
            operator delete(*(void **)(v187 - 64));
          v187 -= 72;
        }
        while (v187 != v186);
        v188 = (void *)v27[2];
      }
      v27[3] = v186;
      operator delete(v188);
    }
    MEMORY[0x1A1AD355C](v27, 0x1020C402564D6C4);
  }
  v190 = v28;
  v191 = v28[2];
  if (v191)
  {
    v192 = v28[3];
    v193 = (void *)v28[2];
    if (v192 != v191)
    {
      do
      {
        v194 = *(void **)(v192 - 24);
        if (v194)
        {
          *(_QWORD *)(v192 - 16) = v194;
          operator delete(v194);
        }
        if (*(char *)(v192 - 41) < 0)
          operator delete(*(void **)(v192 - 64));
        v192 -= 72;
      }
      while (v192 != v191);
      v190 = v28;
      v193 = (void *)v28[2];
    }
    v190[3] = v191;
    operator delete(v193);
  }
  MEMORY[0x1A1AD355C](v190, 0x1020C402564D6C4);
  if (SHIBYTE(v220) < 0)
  {
    v181 = __dst[0];
LABEL_400:
    operator delete(v181);
  }
LABEL_401:
  if (v228)
  {
    v229 = v228;
    operator delete(v228);
  }
  if (SHIBYTE(v225) < 0)
    operator delete((void *)v224);
}

void sub_19C4089E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,void *a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void *a60,uint64_t a61,int a62,__int16 a63)
{
  char a65;
  void *a68;
  uint64_t a69;
  uint64_t v69;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  void *v83;

  if (*(char *)(v69 - 193) < 0)
    operator delete(*(void **)(v69 - 216));
  sub_19C4067A0(v69 - 192);
  sub_19C408F70(&a40);
  v71 = a12;
  v72 = *(_QWORD *)(a12 + 16);
  if (v72)
  {
    v73 = *(_QWORD *)(a12 + 24);
    v74 = *(void **)(a12 + 16);
    if (v73 != v72)
    {
      do
      {
        v75 = *(void **)(v73 - 24);
        if (v75)
        {
          *(_QWORD *)(v73 - 16) = v75;
          operator delete(v75);
        }
        if (*(char *)(v73 - 41) < 0)
          operator delete(*(void **)(v73 - 64));
        v73 -= 72;
      }
      while (v73 != v72);
      v71 = a12;
      v74 = *(void **)(a12 + 16);
    }
    *(_QWORD *)(v71 + 24) = v72;
    operator delete(v74);
  }
  MEMORY[0x1A1AD355C](v71, 0x1020C402564D6C4);
  if (a28)
  {
    v76 = *(_QWORD *)(a28 + 16);
    if (v76)
    {
      v77 = *(_QWORD *)(a28 + 24);
      v78 = *(void **)(a28 + 16);
      if (v77 != v76)
      {
        do
        {
          v79 = *(void **)(v77 - 24);
          if (v79)
          {
            *(_QWORD *)(v77 - 16) = v79;
            operator delete(v79);
          }
          if (*(char *)(v77 - 41) < 0)
            operator delete(*(void **)(v77 - 64));
          v77 -= 72;
        }
        while (v77 != v76);
        v78 = *(void **)(a28 + 16);
      }
      *(_QWORD *)(a28 + 24) = v76;
      operator delete(v78);
    }
    MEMORY[0x1A1AD355C](a28, 0x1020C402564D6C4);
    if (!a29)
    {
LABEL_15:
      if ((a54 & 0x80000000) == 0)
        goto LABEL_40;
      goto LABEL_39;
    }
  }
  else if (!a29)
  {
    goto LABEL_15;
  }
  v80 = *(_QWORD *)(a29 + 16);
  if (v80)
  {
    v81 = *(_QWORD *)(a29 + 24);
    v82 = *(void **)(a29 + 16);
    if (v81 != v80)
    {
      do
      {
        v83 = *(void **)(v81 - 24);
        if (v83)
        {
          *(_QWORD *)(v81 - 16) = v83;
          operator delete(v83);
        }
        if (*(char *)(v81 - 41) < 0)
          operator delete(*(void **)(v81 - 64));
        v81 -= 72;
      }
      while (v81 != v80);
      v82 = *(void **)(a29 + 16);
    }
    *(_QWORD *)(a29 + 24) = v80;
    operator delete(v82);
  }
  MEMORY[0x1A1AD355C](a29, 0x1020C402564D6C4);
  if ((a54 & 0x80000000) == 0)
  {
LABEL_40:
    if (a68)
    {
      a69 = (uint64_t)a68;
      operator delete(a68);
    }
    if (a65 < 0)
      operator delete(a60);
    _Unwind_Resume(a1);
  }
LABEL_39:
  operator delete(__p);
  goto LABEL_40;
}

void **sub_19C408F70(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  void *v5;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (void *)*((_QWORD *)v3 - 3);
        if (v5)
        {
          *((_QWORD *)v3 - 2) = v5;
          operator delete(v5);
        }
        if (*(v3 - 41) < 0)
          operator delete(*((void **)v3 - 8));
        v3 -= 72;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

_QWORD *sub_19C408FF0(_QWORD *a1, unint64_t a2)
{
  char *v4;

  a1[2] = 0;
  a1[1] = a2;
  a1[3] = 0;
  a1[4] = 0;
  if (!a2)
    __assert_rtn("PriorityQueue", "PriorityQueue.hpp", 21, "m_maxPredictionCount > 0");
  if (a2 >= 0x38E38E38E38E38FLL)
    sub_19C2A18E8();
  v4 = (char *)operator new(72 * a2);
  a1[2] = v4;
  a1[3] = v4;
  a1[4] = &v4[72 * a2];
  return a1;
}

void sub_19C409098(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  char *v4;
  char *v5;
  void *v6;
  void *v7;

  v4 = (char *)*v2;
  if (*v2)
  {
    v5 = *(char **)(v1 + 24);
    v6 = *v2;
    if (v5 != v4)
    {
      do
      {
        v7 = (void *)*((_QWORD *)v5 - 3);
        if (v7)
        {
          *((_QWORD *)v5 - 2) = v7;
          operator delete(v7);
        }
        if (*(v5 - 41) < 0)
          operator delete(*((void **)v5 - 8));
        v5 -= 72;
      }
      while (v5 != v4);
      v6 = *v2;
    }
    *(_QWORD *)(v1 + 24) = v4;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

void sub_19C4090FC(_QWORD *a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int *v8;
  uint64_t v9;
  unint64_t v10;
  int *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  __int128 v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void **v26;
  __int128 v27;
  void *v28;
  _QWORD *v29;
  void *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  void **v35;
  char v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  int *v40;
  int *v41;
  int *v42;
  _BOOL4 v43;
  BOOL v44;
  void **v45;
  char v46;
  __int128 v47;
  void *v48;
  size_t v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  __int128 v58;
  char *v59;
  __int128 v60;
  char *v61;
  char *v62;
  void *v63;
  void *v64;
  size_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;

  v2 = a2;
  v4 = a1[2];
  v5 = a1[3];
  v6 = 0x8E38E38E38E38E39 * ((v5 - v4) >> 3);
  if (v6 >= a1[1])
  {
    if (v4 == v5)
      __assert_rtn("worst", "PriorityQueue.h", 55, "!m_predictions.empty()");
    if (!sub_19C409CDC(a2, v4))
    {
      v8 = (int *)a1[2];
      v9 = a1[3] - (_QWORD)v8;
      if (v9)
      {
        v10 = 0x8E38E38E38E38E39 * (v9 >> 3);
        do
        {
          if (sub_19C409CDC(v2, (uint64_t)&v8[18 * (v10 >> 1)]))
          {
            v10 >>= 1;
          }
          else
          {
            v8 += 18 * (v10 >> 1) + 18;
            v10 += ~(v10 >> 1);
          }
        }
        while (v10);
        v11 = (int *)a1[2];
      }
      else
      {
        v11 = (int *)a1[2];
      }
      v40 = v11 + 18;
      if (v11 + 18 != v8)
      {
        while (1)
        {
          v41 = v11 + 18;
          sub_19C4099E0(v11, v11 + 18);
          if (v11 + 36 == v8)
            break;
          if (v41 == v40)
            v40 = v11 + 36;
          v11 += 18;
        }
        if (v41 != v40)
        {
          v42 = v40;
          while (1)
          {
            sub_19C4099E0(v41, v40);
            v40 += 18;
            v43 = v41 + 18 == v42;
            if (v40 == v8)
            {
              if (v41 + 18 == v42)
                break;
              v40 = v42 + 18;
              v41 += 36;
              while (1)
              {
                sub_19C4099E0(v41 - 18, v42);
                v43 = v41 == v42;
                if (v40 != v8)
                  break;
                v44 = v41 == v42;
                v41 += 18;
                if (v44)
                  goto LABEL_70;
              }
            }
            else
            {
              v41 += 18;
            }
            if (v43)
              v42 = v40;
          }
        }
      }
LABEL_70:
      *(v8 - 18) = *(_DWORD *)v2;
      if (v8 - 18 == (int *)v2)
      {
        *(_OWORD *)(v8 - 10) = *(_OWORD *)(v2 + 32);
        return;
      }
      v45 = (void **)(v8 - 16);
      v46 = *(_BYTE *)(v2 + 31);
      if (*((char *)v8 - 41) < 0)
      {
        if (v46 >= 0)
          v48 = (void *)(v2 + 8);
        else
          v48 = *(void **)(v2 + 8);
        if (v46 >= 0)
          v49 = *(unsigned __int8 *)(v2 + 31);
        else
          v49 = *(_QWORD *)(v2 + 16);
        sub_19C2E54A8(v45, v48, v49);
      }
      else if ((*(_BYTE *)(v2 + 31) & 0x80) != 0)
      {
        sub_19C2E53E4(v45, *(void **)(v2 + 8), *(_QWORD *)(v2 + 16));
      }
      else
      {
        v47 = *(_OWORD *)(v2 + 8);
        *((_QWORD *)v8 - 6) = *(_QWORD *)(v2 + 24);
        *(_OWORD *)v45 = v47;
      }
      *(_OWORD *)(v8 - 10) = *(_OWORD *)(v2 + 32);
      v66 = (uint64_t)(v8 - 6);
      goto LABEL_117;
    }
  }
  else
  {
    if (v5 == v4)
    {
      v7 = a1[3];
      v4 = v7;
    }
    else
    {
      do
      {
        if (sub_19C409CDC(v2, v4 + 72 * (v6 >> 1)))
        {
          v6 >>= 1;
        }
        else
        {
          v4 += 72 * (v6 >> 1) + 72;
          v6 += ~(v6 >> 1);
        }
      }
      while (v6);
      v5 = a1[2];
      v7 = a1[3];
    }
    v12 = (v4 - v5) / 72;
    v13 = (char *)(v5 + 72 * v12);
    v14 = a1[4];
    if (v7 >= v14)
    {
      v31 = 0x8E38E38E38E38E39 * ((uint64_t)(v7 - v5) >> 3) + 1;
      if (v31 > 0x38E38E38E38E38ELL)
        sub_19C2A18E8();
      v32 = 0x8E38E38E38E38E39 * ((uint64_t)(v14 - v5) >> 3);
      if (2 * v32 > v31)
        v31 = 2 * v32;
      if (v32 >= 0x1C71C71C71C71C7)
        v33 = 0x38E38E38E38E38ELL;
      else
        v33 = v31;
      if (v33)
      {
        if (v33 > 0x38E38E38E38E38ELL)
          sub_19C2A143C();
        v34 = (char *)operator new(72 * v33);
      }
      else
      {
        v34 = 0;
      }
      v38 = (uint64_t)&v34[72 * v12];
      v70 = v38;
      v71 = v38;
      v72 = &v34[72 * v33];
      if (v12 == v33)
      {
        if (v4 - v5 < 1)
        {
          if (v4 == v5)
            v50 = 1;
          else
            v50 = 2 * v12;
          if (v50 > 0x38E38E38E38E38ELL)
            sub_19C2A143C();
          v51 = (char *)operator new(72 * v50);
          v38 = (uint64_t)&v51[72 * (v50 >> 2)];
          v70 = v38;
          v71 = v38;
          v72 = &v51[72 * v50];
          if (v34)
            operator delete(v34);
        }
        else
        {
          v39 = v12 + 2;
          if (v12 >= -1)
            v39 = v12 + 1;
          v38 -= 72 * (v39 >> 1);
          v70 = v38;
          v71 = v38;
        }
      }
      sub_19C409B44(v38, v2);
      v52 = v70;
      v53 = v71 + 72;
      v54 = (char *)a1[2];
      if (v54 != v13)
      {
        v55 = 0;
        do
        {
          v56 = v70 + v55;
          v57 = &v13[v55];
          *(_DWORD *)(v56 - 72) = *(_DWORD *)&v13[v55 - 72];
          v58 = *(_OWORD *)&v13[v55 - 64];
          *(_QWORD *)(v56 - 48) = *(_QWORD *)&v13[v55 - 48];
          *(_OWORD *)(v56 - 64) = v58;
          *((_QWORD *)v57 - 7) = 0;
          *((_QWORD *)v57 - 6) = 0;
          *((_QWORD *)v57 - 8) = 0;
          *(_OWORD *)(v56 - 40) = *(_OWORD *)&v13[v55 - 40];
          *(_QWORD *)(v56 - 16) = 0;
          *(_QWORD *)(v56 - 8) = 0;
          *(_QWORD *)(v56 - 24) = 0;
          *(_OWORD *)(v56 - 24) = *(_OWORD *)&v13[v55 - 24];
          *(_QWORD *)(v56 - 8) = *(_QWORD *)&v13[v55 - 8];
          *((_QWORD *)v57 - 3) = 0;
          *((_QWORD *)v57 - 2) = 0;
          *((_QWORD *)v57 - 1) = 0;
          v55 -= 72;
        }
        while (&v13[v55] != v54);
        v52 = v70 + v55;
      }
      v59 = (char *)a1[3];
      if (v59 != v13)
      {
        do
        {
          *(_DWORD *)v53 = *(_DWORD *)v13;
          v60 = *(_OWORD *)(v13 + 8);
          *(_QWORD *)(v53 + 24) = *((_QWORD *)v13 + 3);
          *(_OWORD *)(v53 + 8) = v60;
          *((_QWORD *)v13 + 2) = 0;
          *((_QWORD *)v13 + 3) = 0;
          *((_QWORD *)v13 + 1) = 0;
          *(_OWORD *)(v53 + 32) = *((_OWORD *)v13 + 2);
          *(_QWORD *)(v53 + 56) = 0;
          *(_QWORD *)(v53 + 64) = 0;
          *(_QWORD *)(v53 + 48) = 0;
          *(_OWORD *)(v53 + 48) = *((_OWORD *)v13 + 3);
          *(_QWORD *)(v53 + 64) = *((_QWORD *)v13 + 8);
          *((_QWORD *)v13 + 6) = 0;
          *((_QWORD *)v13 + 7) = 0;
          *((_QWORD *)v13 + 8) = 0;
          v53 += 72;
          v13 += 72;
        }
        while (v13 != v59);
        v13 = (char *)a1[3];
      }
      v61 = (char *)a1[2];
      a1[2] = v52;
      a1[3] = v53;
      a1[4] = v72;
      if (v13 == v61)
      {
        if (!v13)
          return;
      }
      else
      {
        do
        {
          v62 = v13 - 72;
          v63 = (void *)*((_QWORD *)v13 - 3);
          if (v63)
          {
            *((_QWORD *)v13 - 2) = v63;
            operator delete(v63);
          }
          if (*(v13 - 41) < 0)
            operator delete(*((void **)v13 - 8));
          v13 -= 72;
        }
        while (v62 != v61);
        v13 = v61;
        if (!v61)
          return;
      }
      operator delete(v13);
      return;
    }
    if (v13 == (char *)v7)
    {
      sub_19C409B44(v7, v2);
      a1[3] = v7 + 72;
      return;
    }
    v15 = v13 + 72;
    v16 = v7 - 72;
    v17 = v7;
    if (v7 >= 0x48)
    {
      v17 = v7;
      do
      {
        *(_DWORD *)v17 = *(_DWORD *)v16;
        v18 = *(_OWORD *)(v16 + 8);
        *(_QWORD *)(v17 + 24) = *(_QWORD *)(v16 + 24);
        *(_OWORD *)(v17 + 8) = v18;
        *(_QWORD *)(v16 + 16) = 0;
        *(_QWORD *)(v16 + 24) = 0;
        *(_QWORD *)(v16 + 8) = 0;
        *(_OWORD *)(v17 + 32) = *(_OWORD *)(v16 + 32);
        *(_QWORD *)(v17 + 56) = 0;
        *(_QWORD *)(v17 + 64) = 0;
        *(_QWORD *)(v17 + 48) = 0;
        *(_OWORD *)(v17 + 48) = *(_OWORD *)(v16 + 48);
        *(_QWORD *)(v17 + 64) = *(_QWORD *)(v16 + 64);
        *(_QWORD *)(v16 + 48) = 0;
        *(_QWORD *)(v16 + 56) = 0;
        *(_QWORD *)(v16 + 64) = 0;
        v17 += 72;
        v16 += 72;
      }
      while (v16 < v7);
    }
    v68 = a1;
    v69 = (v4 - v5) / 72;
    a1[3] = v17;
    if ((char *)v7 != v15)
    {
      v19 = 0;
      v20 = 0x8E38E38E38E38E39 * ((uint64_t)(v7 - (_QWORD)v15) >> 3);
      v21 = v5 + 72 * v20 + 72 * v69;
      v22 = -72 * v20;
      do
      {
        v24 = v21 + v19;
        v25 = v7 + v19;
        *(_DWORD *)(v7 + v19 - 72) = *(_DWORD *)(v21 + v19 - 72);
        v26 = (void **)(v7 + v19 - 64);
        if (*(char *)(v7 + v19 - 41) < 0)
          operator delete(*v26);
        v27 = *(_OWORD *)(v24 - 64);
        *(_QWORD *)(v7 + v19 - 48) = *(_QWORD *)(v24 - 48);
        *(_OWORD *)v26 = v27;
        *(_BYTE *)(v24 - 41) = 0;
        *(_BYTE *)(v24 - 64) = 0;
        v30 = *(void **)(v25 - 24);
        v29 = (_QWORD *)(v25 - 24);
        v28 = v30;
        *((_OWORD *)v29 - 1) = *(_OWORD *)(v24 - 40);
        if (v30)
        {
          *(_QWORD *)(v7 + v19 - 16) = v28;
          operator delete(v28);
          *v29 = 0;
          v29[1] = 0;
          v29[2] = 0;
        }
        v23 = v21 + v19;
        *(_OWORD *)v29 = *(_OWORD *)(v21 + v19 - 24);
        *(_QWORD *)(v7 + v19 - 8) = *(_QWORD *)(v21 + v19 - 8);
        *(_QWORD *)(v23 - 24) = 0;
        *(_QWORD *)(v23 - 16) = 0;
        *(_QWORD *)(v23 - 8) = 0;
        v19 -= 72;
      }
      while (v22 != v19);
    }
    if ((unint64_t)v13 <= v2)
      v2 += 72 * (v68[3] > v2);
    *(_DWORD *)v13 = *(_DWORD *)v2;
    if (v13 != (char *)v2)
    {
      v35 = (void **)(v5 + 72 * v69 + 8);
      v36 = *(_BYTE *)(v2 + 31);
      if (v13[31] < 0)
      {
        if (v36 >= 0)
          v64 = (void *)(v2 + 8);
        else
          v64 = *(void **)(v2 + 8);
        if (v36 >= 0)
          v65 = *(unsigned __int8 *)(v2 + 31);
        else
          v65 = *(_QWORD *)(v2 + 16);
        sub_19C2E54A8(v35, v64, v65);
      }
      else if ((*(_BYTE *)(v2 + 31) & 0x80) != 0)
      {
        sub_19C2E53E4(v35, *(void **)(v2 + 8), *(_QWORD *)(v2 + 16));
      }
      else
      {
        v37 = *(_OWORD *)(v2 + 8);
        *(_QWORD *)(v5 + 72 * v69 + 24) = *(_QWORD *)(v2 + 24);
        *(_OWORD *)v35 = v37;
      }
      v67 = v5 + 72 * v69;
      *(_OWORD *)(v67 + 32) = *(_OWORD *)(v2 + 32);
      v66 = v67 + 48;
LABEL_117:
      sub_19C409E18(v66, *(_QWORD *)(v2 + 48), *(char **)(v2 + 56), (uint64_t)(*(_QWORD *)(v2 + 56) - *(_QWORD *)(v2 + 48)) >> 3);
    }
  }
}

void sub_19C4098A8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 24) = v1;
  _Unwind_Resume(a1);
}

void sub_19C4098B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_19C40A174((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19C4098C4(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  if (a4)
  {
    if (a4 >= 0x38E38E38E38E38FLL)
      sub_19C2A18E8();
    v7 = (_QWORD *)result;
    result = (uint64_t)operator new(72 * a4);
    v8 = result;
    *v7 = result;
    v7[1] = result;
    v7[2] = result + 72 * a4;
    if (a2 != a3)
    {
      v9 = 0;
      do
      {
        result = sub_19C409B44(v8 + v9, a2 + v9);
        v9 += 72;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v7[1] = v8;
  }
  return result;
}

void sub_19C409984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_19C409C4C(&a9);
  _Unwind_Resume(a1);
}

void sub_19C4099E0(int *a1, int *a2)
{
  int v4;
  uint64_t v5;
  char v6;
  _QWORD *v7;
  uint64_t v8;
  __int128 v9;
  void *v10;
  void *v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[15];

  v4 = *a1;
  v5 = *((_QWORD *)a1 + 1);
  *(_QWORD *)v14 = *((_QWORD *)a1 + 2);
  *(_QWORD *)&v14[7] = *(_QWORD *)((char *)a1 + 23);
  v6 = *((_BYTE *)a1 + 31);
  *((_QWORD *)a1 + 2) = 0;
  *((_QWORD *)a1 + 3) = 0;
  *((_QWORD *)a1 + 1) = 0;
  v7 = a1 + 12;
  v12 = *((_OWORD *)a1 + 3);
  v13 = *((_OWORD *)a1 + 2);
  v8 = *((_QWORD *)a1 + 8);
  *((_QWORD *)a1 + 7) = 0;
  *((_QWORD *)a1 + 8) = 0;
  *((_QWORD *)a1 + 6) = 0;
  *a1 = *a2;
  v9 = *(_OWORD *)(a2 + 2);
  *((_QWORD *)a1 + 3) = *((_QWORD *)a2 + 3);
  *(_OWORD *)(a1 + 2) = v9;
  *((_BYTE *)a2 + 31) = 0;
  *((_BYTE *)a2 + 8) = 0;
  *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
  v10 = (void *)*((_QWORD *)a1 + 6);
  if (v10)
  {
    *((_QWORD *)a1 + 7) = v10;
    operator delete(v10);
    *v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
  }
  v11 = 0;
  *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
  *((_QWORD *)a1 + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 6) = 0;
  *((_QWORD *)a2 + 7) = 0;
  *((_QWORD *)a2 + 8) = 0;
  *a2 = v4;
  if (*((char *)a2 + 31) < 0)
  {
    operator delete(*((void **)a2 + 1));
    v11 = (void *)*((_QWORD *)a2 + 6);
  }
  *((_QWORD *)a2 + 1) = v5;
  *((_QWORD *)a2 + 2) = *(_QWORD *)v14;
  *(_QWORD *)((char *)a2 + 23) = *(_QWORD *)&v14[7];
  *((_BYTE *)a2 + 31) = v6;
  *((_OWORD *)a2 + 2) = v13;
  if (v11)
  {
    *((_QWORD *)a2 + 7) = v11;
    operator delete(v11);
  }
  *((_OWORD *)a2 + 3) = v12;
  *((_QWORD *)a2 + 8) = v8;
}

uint64_t sub_19C409B44(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  char *v9;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_19C2B5238((_BYTE *)(a1 + 8), *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  v5 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  v7 = *(_BYTE **)(a2 + 48);
  v6 = *(_BYTE **)(a2 + 56);
  v8 = v6 - v7;
  if (v6 != v7)
  {
    if (v8 < 0)
      sub_19C2A18E8();
    v9 = (char *)operator new(v6 - v7);
    *(_QWORD *)(a1 + 48) = v9;
    *(_QWORD *)(a1 + 56) = v9;
    *(_QWORD *)(a1 + 64) = &v9[8 * (v8 >> 3)];
    memcpy(v9, v7, v8 & 0xFFFFFFFFFFFFFFF8);
    *(_QWORD *)(a1 + 56) = &v9[v8 & 0xFFFFFFFFFFFFFFF8];
  }
  return a1;
}

void sub_19C409C10(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 56) = v5;
    operator delete(v5);
    if ((*(char *)(v1 + 31) & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((*(char *)(v1 + 31) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void ***sub_19C409C4C(void ***a1)
{
  void **v2;
  char *v3;
  char *v4;
  void *v5;
  void *v6;

  if (!*((_BYTE *)a1 + 8))
  {
    v2 = *a1;
    v3 = (char *)**a1;
    if (v3)
    {
      v4 = (char *)v2[1];
      v5 = **a1;
      if (v4 != v3)
      {
        do
        {
          v6 = (void *)*((_QWORD *)v4 - 3);
          if (v6)
          {
            *((_QWORD *)v4 - 2) = v6;
            operator delete(v6);
          }
          if (*(v4 - 41) < 0)
            operator delete(*((void **)v4 - 8));
          v4 -= 72;
        }
        while (v4 != v3);
        v5 = **a1;
      }
      v2[1] = v3;
      operator delete(v5);
    }
  }
  return a1;
}

BOOL sub_19C409CDC(uint64_t a1, uint64_t a2)
{
  double v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  double v10;
  float v11;
  float v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  uint64_t v17;
  double v18;
  float v19;

  v3 = -10.0;
  v4 = -10.0;
  if (*(float *)a1 > 0.0)
  {
    v6 = *(_QWORD *)(a1 + 48);
    v5 = *(_QWORD *)(a1 + 56);
    v7 = v5 - v6;
    if (v5 != v6)
    {
      v8 = log10f(*(float *)(v5 - 4) / *(float *)a1);
      v9 = v7 >> 3;
      v10 = 1.0;
      if (v7 >> 3 != 1)
      {
        if (!v9)
          goto LABEL_14;
        v11 = 1.15368974
            / (float)(sqrtf((float)(unint64_t)v9 + 0.1) * (float)((float)(unint64_t)v9 + 0.1));
        v10 = v11;
      }
      v4 = v10 * v8;
    }
  }
  v12 = *(float *)a2;
  if (*(float *)a2 > 0.0)
  {
    v14 = *(_QWORD *)(a2 + 48);
    v13 = *(_QWORD *)(a2 + 56);
    v15 = v13 - v14;
    if (v13 != v14)
    {
      v16 = log10f(*(float *)(v13 - 4) / v12);
      v17 = v15 >> 3;
      v18 = 1.0;
      if (v15 >> 3 == 1)
      {
LABEL_12:
        v3 = v18 * v16;
        return v4 < v3;
      }
      if (v17)
      {
        v19 = 1.15368974
            / (float)(sqrtf((float)(unint64_t)v17 + 0.1) * (float)((float)(unint64_t)v17 + 0.1));
        v18 = v19;
        goto LABEL_12;
      }
LABEL_14:
      __assert_rtn("normalizationFactor", "LMDynamicInlineCompletionEnumerator.hpp", 78, "numWords >= 1");
    }
  }
  return v4 < v3;
}

_DWORD *sub_19C409E18(uint64_t a1, unint64_t a2, char *a3, size_t __sz)
{
  char *v6;
  uint64_t v8;
  _DWORD *result;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  char *v14;
  int64_t v15;
  _QWORD *v16;
  _DWORD *v17;
  int64_t v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  _OWORD *v28;
  __int128 *v29;
  uint64_t v30;
  __int128 v31;
  unint64_t v32;
  char *v33;
  unint64_t v34;
  char *v35;
  unint64_t v36;
  BOOL v37;
  char v38;
  BOOL v39;
  unint64_t v40;
  uint64_t v41;
  __int128 *v42;
  _OWORD *v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  unint64_t v49;
  char *v50;
  unint64_t v51;
  unint64_t v52;
  BOOL v54;
  uint64_t v56;
  uint64_t v57;
  __int128 *v58;
  _OWORD *v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;

  v6 = (char *)a2;
  v8 = *(_QWORD *)(a1 + 16);
  result = *(_DWORD **)a1;
  if (__sz <= (v8 - (uint64_t)result) >> 3)
  {
    v17 = *(_DWORD **)(a1 + 8);
    v16 = (_QWORD *)(a1 + 8);
    v13 = v17;
    v18 = (char *)v17 - (char *)result;
    v19 = ((char *)v17 - (char *)result) >> 3;
    if (v19 < __sz)
    {
      v20 = (uint64_t *)(a2 + 8 * v19);
      if (v13 == result)
        goto LABEL_18;
      if ((unint64_t)(v18 - 8) >= 0x78)
      {
        v34 = (v18 & 0xFFFFFFFFFFFFFFF8) - 4;
        v35 = (char *)result + v34;
        v36 = a2 + v34;
        v37 = (unint64_t)(result + 1) >= a2 + (v18 & 0xFFFFFFFFFFFFFFF8)
           || a2 + 4 >= (unint64_t)result + (v18 & 0xFFFFFFFFFFFFFFF8);
        v38 = !v37;
        v21 = (uint64_t *)a2;
        v39 = (unint64_t)v35 <= a2 || (unint64_t)result >= v36;
        if (v39 && (v38 & 1) == 0)
        {
          v40 = ((unint64_t)(v18 - 8) >> 3) + 1;
          v41 = 8 * (v40 & 0x3FFFFFFFFFFFFFF8);
          v42 = (__int128 *)(a2 + 32);
          v43 = result + 8;
          v44 = v40 & 0x3FFFFFFFFFFFFFF8;
          do
          {
            v46 = *(v42 - 2);
            v45 = *(v42 - 1);
            v48 = *v42;
            v47 = v42[1];
            v42 += 4;
            *(v43 - 2) = v46;
            *(v43 - 1) = v45;
            *v43 = v48;
            v43[1] = v47;
            v43 += 4;
            v44 -= 8;
          }
          while (v44);
          if (v40 == (v40 & 0x3FFFFFFFFFFFFFF8))
          {
LABEL_18:
            if (v20 == (uint64_t *)a3)
            {
              v15 = 0;
              goto LABEL_68;
            }
            v22 = v18 + a2;
            v23 = (unint64_t)&a3[-v22 - 8];
            if (v23 < 0x38)
            {
              v25 = (char *)v13;
            }
            else
            {
              v24 = (unint64_t)v13 - v22;
              v25 = (char *)v13;
              if (v24 >= 0x20)
              {
                v26 = (v23 >> 3) + 1;
                v27 = 2 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
                v20 = (uint64_t *)((char *)v20 + v27 * 4);
                v28 = v13 + 4;
                v29 = (__int128 *)(a2 + 8 * v19 + 16);
                v30 = v26 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v31 = *v29;
                  *(v28 - 1) = *(v29 - 1);
                  *v28 = v31;
                  v28 += 2;
                  v29 += 2;
                  v30 -= 4;
                }
                while (v30);
                v25 = (char *)&v13[v27];
                if (v26 == (v26 & 0x3FFFFFFFFFFFFFFCLL))
                  goto LABEL_67;
              }
            }
            do
            {
              v65 = *v20++;
              *(_QWORD *)v25 = v65;
              v25 += 8;
            }
            while (v20 != (uint64_t *)a3);
LABEL_67:
            v15 = v25 - (char *)v13;
            goto LABEL_68;
          }
          v21 = (uint64_t *)(a2 + v41);
          result = (_DWORD *)((char *)result + v41);
        }
      }
      else
      {
        v21 = (uint64_t *)a2;
      }
      do
      {
        *result = *(_DWORD *)v21;
        result[1] = *((_DWORD *)v21++ + 1);
        result += 2;
      }
      while (v21 != v20);
      goto LABEL_18;
    }
    if ((char *)a2 == a3)
    {
      v33 = (char *)result;
    }
    else
    {
      v32 = (unint64_t)&a3[-a2 - 8];
      if (v32 >= 0x78)
      {
        v49 = v32 & 0xFFFFFFFFFFFFFFF8 | 4;
        v50 = (char *)result + v49;
        v51 = a2 + v49;
        v52 = (v32 & 0xFFFFFFFFFFFFFFF8) + 8;
        v54 = (unint64_t)(result + 1) < a2 + v52 && a2 + 4 < (unint64_t)result + v52;
        if ((unint64_t)v50 <= a2 || (unint64_t)result >= v51)
        {
          if (v54)
          {
            v33 = (char *)result;
          }
          else
          {
            v56 = (v32 >> 3) + 1;
            v57 = 2 * (v56 & 0x3FFFFFFFFFFFFFF8);
            v33 = (char *)&result[v57];
            v58 = (__int128 *)(a2 + 32);
            v59 = result + 8;
            v60 = v56 & 0x3FFFFFFFFFFFFFF8;
            do
            {
              v62 = *(v58 - 2);
              v61 = *(v58 - 1);
              v64 = *v58;
              v63 = v58[1];
              v58 += 4;
              *(v59 - 2) = v62;
              *(v59 - 1) = v61;
              *v59 = v64;
              v59[1] = v63;
              v59 += 4;
              v60 -= 8;
            }
            while (v60);
            if (v56 == (v56 & 0x3FFFFFFFFFFFFFF8))
              goto LABEL_32;
            v6 = (char *)(a2 + v57 * 4);
          }
        }
        else
        {
          v33 = (char *)result;
        }
      }
      else
      {
        v33 = (char *)result;
      }
      do
      {
        *(_DWORD *)v33 = *(_DWORD *)v6;
        *((_DWORD *)v33 + 1) = *((_DWORD *)v6 + 1);
        v33 += 8;
        v6 += 8;
      }
      while (v6 != a3);
    }
LABEL_32:
    v15 = v33 - (char *)result;
    v13 = result;
    goto LABEL_68;
  }
  if (result)
  {
    *(_QWORD *)(a1 + 8) = result;
    operator delete(result);
    v8 = 0;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  if (__sz >> 61)
    goto LABEL_70;
  v10 = v8 >> 2;
  if (v8 >> 2 <= __sz)
    v10 = __sz;
  v37 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8;
  v11 = 0x1FFFFFFFFFFFFFFFLL;
  if (!v37)
    v11 = v10;
  if (v11 >> 61)
LABEL_70:
    sub_19C2A18E8();
  v12 = 2 * v11;
  result = operator new(8 * v11);
  v13 = result;
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = result;
  *(_QWORD *)(a1 + 16) = &result[v12];
  v14 = (char *)result;
  if (v6 != a3)
  {
    result = memcpy(result, v6, ((a3 - v6 - 8) & 0xFFFFFFFFFFFFFFF8) + 8);
    v14 = (char *)v13 + ((a3 - v6 - 8) & 0xFFFFFFFFFFFFFFF8) + 8;
  }
  v15 = v14 - (char *)v13;
  v16 = (_QWORD *)(a1 + 8);
LABEL_68:
  *v16 = (char *)v13 + v15;
  return result;
}

uint64_t sub_19C40A174(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  void *v4;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 72;
    v4 = *(void **)(i - 24);
    if (v4)
    {
      *(_QWORD *)(i - 16) = v4;
      operator delete(v4);
    }
    if (*(char *)(i - 41) < 0)
      operator delete(*(void **)(i - 64));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

os_log_t sub_19C40A1E8()
{
  os_log_t result;

  result = os_log_create("com.apple.LanguageModeling", "DynamicInlineCompletion");
  qword_1EE41C570 = (uint64_t)result;
  return result;
}

const __CFString *sub_19C40A214(const __CFString *result)
{
  const __CFString *v1;
  CFIndex Length;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const UniChar *v6;
  CFIndex v7;
  CFIndex v8;
  UniChar CharacterAtIndex;
  int16x4_t v10;
  int16x4_t v11;
  UniChar v12;
  unsigned __int32 v13;
  int8x8_t v14;
  int8x8_t v15;
  int8x8_t v16;
  unint64_t v17;
  int v18;
  CFIndex v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  __int16 v26;
  unsigned __int16 *v27;
  int v28;
  __int16 v29;
  __int16 v30;
  int v31;
  __int16 v32;
  CFIndex v33;
  unsigned __int16 v34;
  __int16 v35;
  int v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  unsigned int v41;
  unint64_t v42;
  unsigned __int16 *v43;
  unint64_t v44;
  UniChar v45;
  uint64_t v46;
  unint64_t v47;
  UniChar v48;
  CFIndex v49;
  _QWORD v50[2];

  v50[1] = *MEMORY[0x1E0C80C00];
  if (result)
  {
    v1 = result;
    if (CFStringGetLength(result))
    {
      Length = CFStringGetLength(v1);
      v50[0] = v50;
      v4 = MEMORY[0x1E0C80A78](Length, v3);
      v6 = (const UniChar *)((char *)v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
      if (v4 < 1)
      {
        v8 = 0;
      }
      else
      {
        v7 = 0;
        v8 = 0;
        do
        {
          CharacterAtIndex = CFStringGetCharacterAtIndex(v1, v7);
          if ((unsigned __int16)((unsigned __int16)(CharacterAtIndex + 21504) >> 2) > 0xAE8u)
          {
            v6[v8] = CharacterAtIndex;
LABEL_6:
            ++v8;
          }
          else
          {
            v10.i32[0] = 0;
            v12 = 0;
            LOWORD(v13) = ((28533 * (unsigned __int16)(CharacterAtIndex + 21504)) >> 24) | 0x1100;
            HIWORD(v13) = (unsigned __int16)(CharacterAtIndex + 21504) % 0x24Cu / 0x1C + 4449;
            v11.i32[0] = (unsigned __int16)(CharacterAtIndex + 21504) % 0x1Cu;
            v14 = (int8x8_t)vdup_lane_s16(vceq_s16(v11, v10), 0);
            v15.i32[0] = v13;
            v15.i32[1] = (unsigned __int16)((unsigned __int16)(CharacterAtIndex + 21504) % 0x1Cu + 4519);
            v16 = vbsl_s8(v14, (int8x8_t)v13, v15);
            v17 = v16.u16[0] - 4352;
            if (v17 <= 0x12)
              v12 = word_19C470E3A[v17];
            v18 = 0;
            v19 = v8 + 1;
            v6[v8] = v12;
            v20 = 22;
            while (1)
            {
              v21 = v20 + v18;
              if (v20 + v18 < 0 != __OFADD__(v20, v18))
                ++v21;
              v22 = v21 >> 1;
              v23 = (uint64_t)v21 >> 1;
              v24 = word_19C470F1C[3 * v22 + 2];
              if (v24 == v16.u16[1])
                break;
              if (v24 >= v16.u16[1])
                v20 = v23 - 1;
              else
                v18 = v23 + 1;
              if (v18 > v20)
              {
                v25 = v16.u16[1] - 4449;
                if (v25 > 0x14)
                {
                  if (v16.u16[1] == 4514)
                    v35 = 4514;
                  else
                    v35 = 0;
                  if (v16.u16[1] == 4510)
                    v26 = 12685;
                  else
                    v26 = v35;
                }
                else
                {
                  v26 = word_19C470E60[v25];
                }
                v8 += 2;
                v6[v19] = v26;
                v34 = v16.u16[2];
                if (!v16.i16[2])
                  goto LABEL_7;
                goto LABEL_45;
              }
            }
            v27 = &word_19C470F1C[3 * (int)v23];
            v28 = *v27;
            if ((v28 - 4449) > 0x14)
            {
              if (v28 == 4514)
                v30 = 4514;
              else
                v30 = 0;
              if (v28 == 4510)
                v29 = 12685;
              else
                v29 = v30;
            }
            else
            {
              v29 = word_19C470E60[v28 - 4449];
            }
            v31 = v27[1];
            v6[v19] = v29;
            if ((v31 - 4449) > 0x14)
            {
              if (v31 == 4514)
                v32 = 4514;
              else
                v32 = 0;
              if (v31 == 4510)
                v32 = 12685;
            }
            else
            {
              v32 = word_19C470E60[v31 - 4449];
            }
            v33 = v8 + 2;
            v8 += 3;
            v6[v33] = v32;
            v34 = v16.u16[2];
            if (!v16.i16[2])
              goto LABEL_7;
LABEL_45:
            v36 = 0;
            v37 = 22;
            while (1)
            {
              v38 = v37 + v36;
              if (v37 + v36 < 0 != __OFADD__(v37, v36))
                ++v38;
              v39 = v38 >> 1;
              v40 = (uint64_t)v38 >> 1;
              v41 = word_19C470F1C[3 * v39 + 2];
              if (v41 == v34)
                break;
              if (v41 >= v34)
                v37 = v40 - 1;
              else
                v36 = v40 + 1;
              if (v36 > v37)
              {
                v42 = v34 - 4520;
                if (v42 > 0x1A)
                  v6[v8] = 0;
                else
                  v6[v8] = word_19C470E8A[v42];
                goto LABEL_6;
              }
            }
            v43 = &word_19C470F1C[3 * (int)v40];
            v44 = *v43 - 4520;
            if (v44 > 0x1A)
              v45 = 0;
            else
              v45 = word_19C470E8A[v44];
            v46 = v43[1];
            v6[v8] = v45;
            v47 = v46 - 4520;
            if (v47 > 0x1A)
              v48 = 0;
            else
              v48 = word_19C470E8A[v47];
            v49 = v8 + 1;
            v8 += 2;
            v6[v49] = v48;
          }
LABEL_7:
          ++v7;
        }
        while (v7 != Length);
      }
      return CFStringCreateWithCharacters((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v6, v8);
    }
    else
    {
      return &stru_1E3D3CA98;
    }
  }
  return result;
}

os_log_t sub_19C40A5F8()
{
  os_log_t result;

  result = os_log_create("com.apple.LanguageModeling", "NeuralNetwork");
  qword_1EE41C588 = (uint64_t)result;
  return result;
}

uint64_t sub_19C40A624(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v5 = 0;
  v6 = &v5;
  v7 = 0x2000000000;
  v2 = off_1EDB970C8;
  v8 = off_1EDB970C8;
  if (off_1EDB970C8)
    goto LABEL_7;
  v9 = 0;
  if (qword_1EE41C580)
  {
    v2 = (void *)qword_1EE41C580;
  }
  else
  {
    v10 = xmmword_1E3D3C608;
    v11 = 0;
    qword_1EE41C580 = _sl_dlopen();
    v3 = v9;
    v2 = (void *)qword_1EE41C580;
    if (!qword_1EE41C580)
    {
      v3 = (void *)abort_report_np();
      goto LABEL_11;
    }
    if (v9)
      goto LABEL_12;
  }
  while (1)
  {
    v2 = dlsym(v2, "MRLNeuralNetworkCopyInputNamesAndDimensions");
    v6[3] = (uint64_t)v2;
    off_1EDB970C8 = v2;
LABEL_7:
    _Block_object_dispose(&v5, 8);
    if (v2)
      break;
    dlerror();
    v3 = (void *)abort_report_np();
LABEL_11:
    __break(1u);
LABEL_12:
    free(v3);
  }
  return ((uint64_t (*)(uint64_t))v2)(a1);
}

void sub_19C40A768(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19C40A784(_QWORD *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  const void *v4;
  CFTypeRef v5;
  _BYTE *v6;
  _BYTE *v7;
  unint64_t v8;
  uint64_t v9;
  const __CFString *v11;
  CFTypeID TypeID;
  CFTypeID v13;
  CFIndex Count;
  int v15;
  char *v16;
  char *v17;
  CFIndex v18;
  uint64_t v19;
  char *v20;
  const __CFNumber *ValueAtIndex;
  CFTypeID v22;
  int Value;
  CFTypeID v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unsigned __int8 v31;
  int v32;
  uint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  _BYTE *v39;
  char *v40;
  char *v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  _OWORD *v45;
  char *v46;
  uint64_t v47;
  __int128 v48;
  int v49;
  void *v50;
  unint64_t v51;
  char *v52;
  char *v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  char *v58;
  void *v59;
  char *v60;
  char *v61;
  __int128 v62;
  char *v63;
  char *v64;
  char *v65;
  void **v66;
  void *v67;
  void *v68;
  void *v69;
  std::logic_error *exception;
  _QWORD *v71;
  void **v72;
  uint64_t v73;
  const void *cf;
  void *cfa;
  void *__p[2];
  char *v77;
  void *v78;
  __int128 v79;
  void *v80[2];
  void *v81[2];
  __int128 v82;
  __int128 v83;
  void *v84[2];
  void *v85[2];
  __int128 v86;
  CFTypeRef v87;
  __int128 v88;
  char *v89;
  double valuePtr;
  __int128 v91;
  char *v92;
  char *v93;
  _QWORD *v94;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = (const void *)a2(a3);
  sub_19C29438C(&v87, v4);
  v5 = v87;
  if (v87)
  {
    CFRetain(v87);
    CFRelease(v5);
    sub_19C40B38C((uint64_t)&v83, (CFDictionaryRef)v5);
    sub_19C40B38C((uint64_t)&v79, (CFDictionaryRef)v5);
    v7 = v80[0];
    v6 = v80[1];
  }
  else
  {
    v7 = 0;
    v6 = 0;
    *(_OWORD *)v85 = 0u;
    v86 = 0u;
    v83 = 0u;
    *(_OWORD *)v84 = 0u;
    *(_OWORD *)v81 = 0u;
    v82 = 0u;
    v79 = 0u;
    *(_OWORD *)v80 = 0u;
  }
  *((_QWORD *)&v79 + 1) = (v6 - v7) >> 3;
  v71 = a1 + 2;
  v72 = (void **)a1;
  while (1)
  {
    if ((_QWORD)v83)
    {
      v8 = *((_QWORD *)&v83 + 1);
      v9 = v79;
      if (*((_QWORD *)&v83 + 1) != ((char *)v84[1] - (char *)v84[0]) >> 3)
        goto LABEL_13;
      if (!(_QWORD)v79)
        break;
    }
    else
    {
      v9 = v79;
      if (!(_QWORD)v79)
        break;
    }
    if (*((_QWORD *)&v79 + 1) == ((char *)v80[1] - (char *)v80[0]) >> 3)
      break;
    v8 = *((_QWORD *)&v83 + 1);
LABEL_13:
    if ((_QWORD)v83 == v9 && v8 == *((_QWORD *)&v79 + 1))
      break;
    if ((v8 & 0x8000000000000000) != 0 || v8 >= ((char *)v84[1] - (char *)v84[0]) >> 3)
    {
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "DictionaryRef_iterator iterator out of range.");
      exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
      __cxa_throw(exception, (struct type_info *)off_1E3D2F2C0, MEMORY[0x1E0DE42E0]);
    }
    v11 = (const __CFString *)*((_QWORD *)v84[0] + v8);
    if (!v11 || (TypeID = CFStringGetTypeID(), TypeID != CFGetTypeID(v11)))
    {
      v69 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1A1AD3154](v69, "Could not convert");
      __cxa_throw(v69, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
    }
    sub_19C297E60(&v91, v11);
    cf = (const void *)*((_QWORD *)v85[1] + *((_QWORD *)&v83 + 1));
    if (!cf || (v13 = CFArrayGetTypeID(), v13 != CFGetTypeID(cf)))
    {
      v68 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1A1AD3154](v68, "Could not convert");
      __cxa_throw(v68, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
    }
    Count = CFArrayGetCount((CFArrayRef)cf);
    v15 = Count;
    v88 = 0uLL;
    v89 = 0;
    if (!(Count << 32))
    {
      v17 = 0;
      v16 = 0;
      if ((int)Count < 1)
        goto LABEL_95;
LABEL_28:
      v18 = 0;
      v19 = v15;
      v20 = v16;
      v73 = v15;
      while (2)
      {
        ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex((CFArrayRef)cf, v18);
        if (!ValueAtIndex)
          goto LABEL_141;
        v22 = CFNumberGetTypeID();
        if (v22 == CFGetTypeID(ValueAtIndex))
        {
          switch(CFNumberGetType(ValueAtIndex))
          {
            case kCFNumberSInt8Type:
              LOBYTE(valuePtr) = 0;
              Value = CFNumberGetValue(ValueAtIndex, kCFNumberSInt8Type, &valuePtr);
              goto LABEL_56;
            case kCFNumberSInt16Type:
              LOWORD(valuePtr) = 0;
              v29 = CFNumberGetValue(ValueAtIndex, kCFNumberSInt16Type, &valuePtr);
              goto LABEL_49;
            case kCFNumberSInt32Type:
              LODWORD(valuePtr) = 0;
              v27 = CFNumberGetValue(ValueAtIndex, kCFNumberSInt32Type, &valuePtr);
              goto LABEL_64;
            case kCFNumberSInt64Type:
              valuePtr = 0.0;
              v27 = CFNumberGetValue(ValueAtIndex, kCFNumberSInt64Type, &valuePtr);
              goto LABEL_64;
            case kCFNumberFloat32Type:
              LODWORD(valuePtr) = 0;
              v27 = CFNumberGetValue(ValueAtIndex, kCFNumberFloat32Type, &valuePtr);
              goto LABEL_41;
            case kCFNumberFloat64Type:
              valuePtr = 0.0;
              v27 = CFNumberGetValue(ValueAtIndex, kCFNumberFloat64Type, &valuePtr);
              goto LABEL_53;
            case kCFNumberCharType:
              LOBYTE(valuePtr) = 0;
              Value = CFNumberGetValue(ValueAtIndex, kCFNumberCharType, &valuePtr);
LABEL_56:
              v30 = Value != 0;
              if (Value)
                v31 = LOBYTE(valuePtr);
              else
                v31 = 0;
              v32 = -256;
              if ((v30 & (SLOBYTE(valuePtr) < 0)) == 0)
                v32 = 0;
              v33 = v30 << 32;
              LODWORD(v25) = v32 & 0xFFFFFF00 | v31;
              v34 = v25 & 0xFFFFFF00;
              break;
            case kCFNumberShortType:
              LOWORD(valuePtr) = 0;
              v29 = CFNumberGetValue(ValueAtIndex, kCFNumberShortType, &valuePtr);
LABEL_49:
              if (v29)
                v25 = SLOWORD(valuePtr) | 0x100000000;
              else
                v25 = 0;
              goto LABEL_67;
            case kCFNumberIntType:
              LODWORD(valuePtr) = 0;
              v27 = CFNumberGetValue(ValueAtIndex, kCFNumberIntType, &valuePtr);
              goto LABEL_64;
            case kCFNumberLongType:
              valuePtr = 0.0;
              v27 = CFNumberGetValue(ValueAtIndex, kCFNumberLongType, &valuePtr);
              goto LABEL_64;
            case kCFNumberLongLongType:
              valuePtr = 0.0;
              v27 = CFNumberGetValue(ValueAtIndex, kCFNumberLongLongType, &valuePtr);
              goto LABEL_64;
            case kCFNumberFloatType:
              LODWORD(valuePtr) = 0;
              v27 = CFNumberGetValue(ValueAtIndex, kCFNumberFloatType, &valuePtr);
LABEL_41:
              v28 = *(float *)&valuePtr;
              goto LABEL_65;
            case kCFNumberDoubleType:
              valuePtr = 0.0;
              v27 = CFNumberGetValue(ValueAtIndex, kCFNumberDoubleType, &valuePtr);
              goto LABEL_53;
            case kCFNumberCFIndexType:
              valuePtr = 0.0;
              v27 = CFNumberGetValue(ValueAtIndex, kCFNumberCFIndexType, &valuePtr);
              goto LABEL_64;
            case kCFNumberNSIntegerType:
              valuePtr = 0.0;
              v27 = CFNumberGetValue(ValueAtIndex, kCFNumberNSIntegerType, &valuePtr);
LABEL_64:
              v28 = LODWORD(valuePtr);
              goto LABEL_65;
            case kCFNumberCGFloatType:
              valuePtr = 0.0;
              v27 = CFNumberGetValue(ValueAtIndex, kCFNumberCGFloatType, &valuePtr);
LABEL_53:
              v28 = valuePtr;
LABEL_65:
              v25 = v28 | 0x100000000;
              if (!v27)
                v25 = 0;
LABEL_67:
              v34 = v25 & 0xFFFFFF00;
              v33 = v25 & 0x100000000;
              break;
            default:
              v34 = 0;
              v33 = 0;
              LOBYTE(v25) = 0;
              break;
          }
          v26 = v33 | v34 & 0xFFFFFF00;
          v25 = v25;
        }
        else
        {
          v24 = CFBooleanGetTypeID();
          if (v24 == CFGetTypeID(ValueAtIndex))
          {
            v25 = CFBooleanGetValue(ValueAtIndex);
            v26 = 0x100000000;
          }
          else
          {
            v25 = 0;
            v26 = 0;
          }
        }
        v35 = v26 | v25;
        if (!((v26 | (unint64_t)v25) >> 32))
        {
LABEL_141:
          v89 = v17;
          *(_QWORD *)&v88 = v16;
          v67 = __cxa_allocate_exception(0x10uLL);
          MEMORY[0x1A1AD3154](v67, "Could not convert");
          __cxa_throw(v67, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
        }
        if (v20 < v17)
        {
          *(_DWORD *)v20 = v35;
          v20 += 4;
        }
        else
        {
          v36 = (v20 - v16) >> 2;
          v37 = v36 + 1;
          if ((unint64_t)(v36 + 1) >> 62)
          {
            *((_QWORD *)&v88 + 1) = v20;
            v89 = v17;
            *(_QWORD *)&v88 = v16;
            sub_19C2A18E8();
          }
          if ((v17 - v16) >> 1 > v37)
            v37 = (v17 - v16) >> 1;
          if ((unint64_t)(v17 - v16) >= 0x7FFFFFFFFFFFFFFCLL)
            v38 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v38 = v37;
          if (v38)
          {
            if (v38 >> 62)
            {
              *((_QWORD *)&v88 + 1) = v20;
              v89 = v17;
              *(_QWORD *)&v88 = v16;
              sub_19C2A143C();
            }
            v39 = operator new(4 * v38);
          }
          else
          {
            v39 = 0;
          }
          v40 = &v39[4 * v36];
          *(_DWORD *)v40 = v35;
          v41 = v40 + 4;
          if (v20 != v16)
          {
            v42 = v20 - 4 - v16;
            if (v42 < 0x2C)
            {
              v43 = v20;
              goto LABEL_89;
            }
            if ((unint64_t)(v16 - v39) < 0x20)
            {
              v43 = v20;
              goto LABEL_89;
            }
            v44 = (v42 >> 2) + 1;
            v43 = &v20[-4 * (v44 & 0x7FFFFFFFFFFFFFF8)];
            v45 = &v39[4 * v36 - 16];
            v46 = v20 - 16;
            v47 = v44 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v48 = *(_OWORD *)v46;
              *(v45 - 1) = *((_OWORD *)v46 - 1);
              *v45 = v48;
              v45 -= 2;
              v46 -= 32;
              v47 -= 8;
            }
            while (v47);
            v40 -= 4 * (v44 & 0x7FFFFFFFFFFFFFF8);
            if (v44 != (v44 & 0x7FFFFFFFFFFFFFF8))
            {
              do
              {
LABEL_89:
                v49 = *((_DWORD *)v43 - 1);
                v43 -= 4;
                *((_DWORD *)v40 - 1) = v49;
                v40 -= 4;
              }
              while (v43 != v16);
            }
          }
          v17 = &v39[4 * v38];
          if (v16)
            operator delete(v16);
          v16 = v40;
          v20 = v41;
          v19 = v73;
        }
        if (++v18 == v19)
        {
          *((_QWORD *)&v88 + 1) = v20;
          v89 = v17;
          *(_QWORD *)&v88 = v16;
          goto LABEL_95;
        }
        continue;
      }
    }
    if (Count << 32 < 0)
      sub_19C2A18E8();
    v16 = (char *)operator new((4 * Count) & 0x3FFFFFFFFLL);
    v17 = &v16[4 * v15];
    *(_QWORD *)&v88 = v16;
    *((_QWORD *)&v88 + 1) = v16;
    if (v15 >= 1)
      goto LABEL_28;
LABEL_95:
    *(_OWORD *)__p = v91;
    v77 = v92;
    v50 = (void *)v88;
    v78 = (void *)v88;
    v52 = (char *)v72[1];
    v51 = (unint64_t)v72[2];
    if ((unint64_t)v52 < v51)
    {
      if (SHIBYTE(v92) < 0)
      {
        cfa = (void *)v88;
        sub_19C2B5238(v72[1], (void *)v91, *((unint64_t *)&v91 + 1));
        v50 = cfa;
      }
      else
      {
        *((_QWORD *)v52 + 2) = v92;
        *(_OWORD *)v52 = *(_OWORD *)__p;
      }
      v59 = v50;
      v72[1] = v52 + 24;
      v72[1] = v52 + 24;
      if (v50)
        goto LABEL_109;
      goto LABEL_110;
    }
    v53 = (char *)*v72;
    v54 = 0xAAAAAAAAAAAAAAABLL * ((v52 - (_BYTE *)*v72) >> 3);
    v55 = v54 + 1;
    if (v54 + 1 > 0xAAAAAAAAAAAAAAALL)
      sub_19C2A18E8();
    v56 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v51 - (_QWORD)v53) >> 3);
    if (2 * v56 > v55)
      v55 = 2 * v56;
    if (v56 >= 0x555555555555555)
      v57 = 0xAAAAAAAAAAAAAAALL;
    else
      v57 = v55;
    v94 = v71;
    if (v57)
    {
      if (v57 > 0xAAAAAAAAAAAAAAALL)
        sub_19C2A143C();
      v58 = (char *)operator new(24 * v57);
    }
    else
    {
      v58 = 0;
    }
    v60 = &v58[24 * v54];
    *(_QWORD *)&v91 = v58;
    *((_QWORD *)&v91 + 1) = v60;
    v92 = v60;
    v93 = &v58[24 * v57];
    if (SHIBYTE(v77) < 0)
    {
      sub_19C2B5238(v60, __p[0], (unint64_t)__p[1]);
      v53 = (char *)*v72;
      v52 = (char *)v72[1];
      v60 = (char *)*((_QWORD *)&v91 + 1);
      v61 = v92;
      if (v52 == *v72)
      {
LABEL_119:
        v63 = v53;
        goto LABEL_120;
      }
    }
    else
    {
      *(_OWORD *)v60 = *(_OWORD *)__p;
      *((_QWORD *)v60 + 2) = v77;
      v61 = &v58[24 * v54];
      if (v52 == v53)
        goto LABEL_119;
    }
    do
    {
      v62 = *(_OWORD *)(v52 - 24);
      *((_QWORD *)v60 - 1) = *((_QWORD *)v52 - 1);
      *(_OWORD *)(v60 - 24) = v62;
      v60 -= 24;
      *((_QWORD *)v52 - 2) = 0;
      *((_QWORD *)v52 - 1) = 0;
      *((_QWORD *)v52 - 3) = 0;
      v52 -= 24;
    }
    while (v52 != v53);
    v63 = (char *)*v72;
    v53 = (char *)v72[1];
LABEL_120:
    v64 = v61 + 24;
    *v72 = v60;
    v72[1] = v61 + 24;
    v65 = (char *)v72[2];
    v72[2] = v93;
    v93 = v65;
    *(_QWORD *)&v91 = v63;
    *((_QWORD *)&v91 + 1) = v63;
    if (v53 != v63)
    {
      v66 = (void **)(v53 - 24);
      do
      {
        v92 = (char *)v66;
        if (*((char *)v66 + 23) < 0)
          operator delete(*v66);
        v66 -= 3;
      }
      while (v66 + 3 != (void **)v63);
      v53 = v63;
    }
    if (v53)
      operator delete(v53);
    v59 = v78;
    v72[1] = v64;
    if (v78)
LABEL_109:
      operator delete(v59);
LABEL_110:
    if (SHIBYTE(v77) < 0)
      operator delete(__p[0]);
    ++*((_QWORD *)&v83 + 1);
  }
  if (v81[1])
  {
    *(void **)&v82 = v81[1];
    operator delete(v81[1]);
  }
  if (v80[0])
  {
    v80[1] = v80[0];
    operator delete(v80[0]);
  }
  if (v85[1])
  {
    *(void **)&v86 = v85[1];
    operator delete(v85[1]);
  }
  if (v84[0])
  {
    v84[1] = v84[0];
    operator delete(v84[0]);
  }
  if (v87)
    CFRelease(v87);
}

void sub_19C40B0EC(_Unwind_Exception *a1)
{
  void **v1;

  sub_19C307B68(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19C40B1F8(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v5 = 0;
  v6 = &v5;
  v7 = 0x2000000000;
  v2 = off_1EDB970D8;
  v8 = off_1EDB970D8;
  if (off_1EDB970D8)
    goto LABEL_7;
  v9 = 0;
  if (qword_1EE41C580)
  {
    v2 = (void *)qword_1EE41C580;
  }
  else
  {
    v10 = xmmword_1E3D3C608;
    v11 = 0;
    qword_1EE41C580 = _sl_dlopen();
    v3 = v9;
    v2 = (void *)qword_1EE41C580;
    if (!qword_1EE41C580)
    {
      v3 = (void *)abort_report_np();
      goto LABEL_11;
    }
    if (v9)
      goto LABEL_12;
  }
  while (1)
  {
    v2 = dlsym(v2, "MRLNeuralNetworkCopyOutputNamesAndDimensions");
    v6[3] = (uint64_t)v2;
    off_1EDB970D8 = v2;
LABEL_7:
    _Block_object_dispose(&v5, 8);
    if (v2)
      break;
    dlerror();
    v3 = (void *)abort_report_np();
LABEL_11:
    __break(1u);
LABEL_12:
    free(v3);
  }
  return ((uint64_t (*)(uint64_t))v2)(a1);
}

void sub_19C40B33C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

const void **sub_19C40B358(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  *a1 = 0;
  return a1;
}

uint64_t sub_19C40B38C(uint64_t a1, CFDictionaryRef theDict)
{
  const void ***v3;
  unint64_t Count;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  const void **v8;
  unint64_t v9;

  *(_QWORD *)a1 = theDict;
  *(_OWORD *)(a1 + 40) = 0u;
  v3 = (const void ***)(a1 + 40);
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)(a1 + 56) = 0;
  if (theDict)
  {
    Count = CFDictionaryGetCount(theDict);
    v5 = Count;
    v6 = *(_QWORD *)(a1 + 16);
    v7 = (*(_QWORD *)(a1 + 24) - v6) >> 3;
    if (Count <= v7)
    {
      if (Count < v7)
        *(_QWORD *)(a1 + 24) = v6 + 8 * Count;
    }
    else
    {
      sub_19C2E56A0(a1 + 16, Count - v7);
    }
    v8 = *(const void ***)(a1 + 40);
    v9 = (uint64_t)(*(_QWORD *)(a1 + 48) - (_QWORD)v8) >> 3;
    if (v5 <= v9)
    {
      if (v5 < v9)
        *(_QWORD *)(a1 + 48) = &v8[v5];
    }
    else
    {
      sub_19C2E56A0((uint64_t)v3, v5 - v9);
      v8 = *v3;
    }
    CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)a1, *(const void ***)(a1 + 16), v8);
  }
  return a1;
}

uint64_t sub_19C40B44C(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_19C40B48C(uint64_t a1, const UInt8 *a2, uint64_t a3)
{
  const void **v6;
  void *v7;
  const void *v8;
  int v9;
  const UInt8 *v10;
  CFIndex v11;
  CFURLRef v12;
  const void **v13;
  void *v14;
  const void *v15;
  int v16;
  const UInt8 *v17;
  CFIndex v18;
  CFStringRef v19;
  CFTypeRef v20;
  CFTypeRef v21;
  CFDictionaryRef v22;
  void *v23;
  void *v24;
  uint64_t v25;
  void **v26;
  void **v27;
  void **v28;
  void **v29;
  void *v30;
  void **v31;
  void **v32;
  void *v33;
  NSObject *v34;
  const UInt8 *v35;
  void *exception;
  void *v38;
  NSObject *v39;
  _QWORD *v40;
  CFTypeRef v41[2];
  CFTypeRef cf;
  void *v43;
  _BYTE v44[24];
  CFTypeRef v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)v44 = 0;
  *(_QWORD *)&v44[8] = v44;
  *(_QWORD *)&v44[16] = 0x2000000000;
  v6 = (const void **)qword_1EDB970B0;
  v45 = (CFTypeRef)qword_1EDB970B0;
  if (!qword_1EDB970B0)
  {
    v43 = 0;
    if (qword_1EE41C580)
    {
      v7 = (void *)qword_1EE41C580;
    }
    else
    {
      v46 = xmmword_1E3D3C608;
      v47 = 0;
      qword_1EE41C580 = _sl_dlopen();
      v7 = (void *)qword_1EE41C580;
      if (!qword_1EE41C580)
      {
        abort_report_np();
        goto LABEL_98;
      }
    }
    v6 = (const void **)dlsym(v7, "kMRLNeuralNetworkOptionModelURLKey");
    *(_QWORD *)(*(_QWORD *)&v44[8] + 24) = v6;
    qword_1EDB970B0 = (uint64_t)v6;
  }
  _Block_object_dispose(v44, 8);
  if (!v6)
  {
    dlerror();
    abort_report_np();
    goto LABEL_98;
  }
  v8 = *v6;
  if (v8)
  {
    CFRetain(v8);
    sub_19C297DB4(&cf, v8);
  }
  else
  {
    cf = 0;
  }
  v9 = *((char *)a2 + 23);
  if (v9 >= 0)
    v10 = a2;
  else
    v10 = *(const UInt8 **)a2;
  if (v9 >= 0)
    v11 = a2[23];
  else
    v11 = *((_QWORD *)a2 + 1);
  v12 = CFURLCreateWithBytes(0, v10, v11, 0, 0);
  v41[1] = v12;
  if (!v12)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD3154](exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  *(_QWORD *)v44 = 0;
  *(_QWORD *)&v44[8] = v44;
  *(_QWORD *)&v44[16] = 0x2000000000;
  v13 = (const void **)qword_1EDB970C0;
  v45 = (CFTypeRef)qword_1EDB970C0;
  if (!qword_1EDB970C0)
  {
    v43 = 0;
    if (qword_1EE41C580)
    {
      v14 = (void *)qword_1EE41C580;
    }
    else
    {
      v46 = xmmword_1E3D3C608;
      v47 = 0;
      qword_1EE41C580 = _sl_dlopen();
      v14 = (void *)qword_1EE41C580;
      if (!qword_1EE41C580)
      {
        abort_report_np();
        goto LABEL_98;
      }
      if (v43)
        free(v43);
    }
    v13 = (const void **)dlsym(v14, "kMRLNeuralNetworkOptionEngineKey");
    *(_QWORD *)(*(_QWORD *)&v44[8] + 24) = v13;
    qword_1EDB970C0 = (uint64_t)v13;
  }
  _Block_object_dispose(v44, 8);
  if (!v13)
  {
    dlerror();
    abort_report_np();
    goto LABEL_98;
  }
  v15 = *v13;
  if (v15)
    CFRetain(v15);
  sub_19C297DB4(v41, v15);
  v16 = *(char *)(a3 + 23);
  if (v16 >= 0)
    v17 = (const UInt8 *)a3;
  else
    v17 = *(const UInt8 **)a3;
  if (v16 >= 0)
    v18 = *(unsigned __int8 *)(a3 + 23);
  else
    v18 = *(_QWORD *)(a3 + 8);
  v19 = CFStringCreateWithBytes(0, v17, v18, 0x8000100u, 0);
  *(_QWORD *)&v46 = v19;
  if (!v19)
  {
    v38 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD3154](v38, "Could not construct");
    __cxa_throw(v38, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v20 = cf;
  if (cf)
    CFRetain(cf);
  *(_QWORD *)v44 = v20;
  CFRetain(v12);
  *(_QWORD *)&v44[8] = v12;
  v21 = v41[0];
  if (v41[0])
    CFRetain(v41[0]);
  *(_QWORD *)&v44[16] = v21;
  CFRetain(v19);
  v45 = v19;
  v22 = sub_19C32BCAC((uint64_t *)v44, 2uLL);
  if (v45)
    CFRelease(v45);
  if (*(_QWORD *)&v44[16])
    CFRelease(*(CFTypeRef *)&v44[16]);
  if (*(_QWORD *)&v44[8])
    CFRelease(*(CFTypeRef *)&v44[8]);
  if (*(_QWORD *)v44)
    CFRelease(*(CFTypeRef *)v44);
  CFRelease(v19);
  if (v41[0])
    CFRelease(v41[0]);
  CFRelease(v12);
  if (cf)
    CFRelease(cf);
  *(_QWORD *)v44 = 0;
  *(_QWORD *)&v44[8] = v44;
  *(_QWORD *)&v44[16] = 0x2000000000;
  v23 = off_1EDB970B8;
  v45 = off_1EDB970B8;
  if (!off_1EDB970B8)
  {
    v43 = 0;
    if (qword_1EE41C580)
    {
      v24 = (void *)qword_1EE41C580;
LABEL_56:
      v23 = dlsym(v24, "MRLNeuralNetworkCreate");
      *(_QWORD *)(*(_QWORD *)&v44[8] + 24) = v23;
      off_1EDB970B8 = v23;
      goto LABEL_57;
    }
    v46 = xmmword_1E3D3C608;
    v47 = 0;
    qword_1EE41C580 = _sl_dlopen();
    v24 = (void *)qword_1EE41C580;
    if (qword_1EE41C580)
    {
      if (v43)
        free(v43);
      goto LABEL_56;
    }
    abort_report_np();
LABEL_98:
    __break(1u);
  }
LABEL_57:
  _Block_object_dispose(v44, 8);
  if (!v23)
  {
    dlerror();
    abort_report_np();
    goto LABEL_98;
  }
  v25 = ((uint64_t (*)(CFDictionaryRef, _QWORD))v23)(v22, 0);
  *(_OWORD *)(a1 + 8) = 0u;
  v26 = (void **)(a1 + 8);
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  v27 = (void **)(a1 + 32);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 56) = a1 + 64;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_QWORD *)a1 = v25;
  if (!v25)
  {
    if (qword_1EDB97228 != -1)
      dispatch_once(&qword_1EDB97228, &unk_1E3D3ABD0);
    v39 = qword_1EDB97220;
    if (os_log_type_enabled((os_log_t)qword_1EDB97220, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v44 = 0;
      _os_log_error_impl(&dword_19C291000, v39, OS_LOG_TYPE_ERROR, "Unable to load network model", v44, 2u);
    }
    v40 = __cxa_allocate_exception(0x20uLL);
    sub_19C2A6D48(v44, "MRLNeuralNetworkCreate returned nullptr");
    sub_19C31237C(v40, (__int128 *)v44);
    __cxa_throw(v40, (struct type_info *)&unk_1E3D32968, (void (*)(void *))sub_19C3123E4);
  }
  sub_19C40A784(v44, sub_19C40A624, v25);
  v28 = (void **)*v26;
  if (*v26)
  {
    v29 = *(void ***)(a1 + 16);
    v30 = *v26;
    if (v29 != v28)
    {
      do
      {
        if (*((char *)v29 - 1) < 0)
          operator delete(*(v29 - 3));
        v29 -= 3;
      }
      while (v29 != v28);
      v30 = *v26;
    }
    *(_QWORD *)(a1 + 16) = v28;
    operator delete(v30);
    *v26 = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
  }
  *(_OWORD *)(a1 + 8) = *(_OWORD *)v44;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)&v44[16];
  sub_19C40A784(v44, sub_19C40B1F8, *(_QWORD *)a1);
  v31 = (void **)*v27;
  if (*v27)
  {
    v32 = *(void ***)(a1 + 40);
    v33 = *v27;
    if (v32 != v31)
    {
      do
      {
        if (*((char *)v32 - 1) < 0)
          operator delete(*(v32 - 3));
        v32 -= 3;
      }
      while (v32 != v31);
      v33 = *v27;
    }
    *(_QWORD *)(a1 + 40) = v31;
    operator delete(v33);
    *v27 = 0;
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 48) = 0;
  }
  *(_OWORD *)(a1 + 32) = *(_OWORD *)v44;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)&v44[16];
  if (v22)
    CFRelease(v22);
  if (qword_1EE41C590 != -1)
    dispatch_once(&qword_1EE41C590, &unk_1E3D3C640);
  v34 = qword_1EE41C588;
  if (os_log_type_enabled((os_log_t)qword_1EE41C588, OS_LOG_TYPE_DEFAULT))
  {
    if (*((char *)a2 + 23) >= 0)
      v35 = a2;
    else
      v35 = *(const UInt8 **)a2;
    *(_DWORD *)v44 = 136315394;
    *(_QWORD *)&v44[4] = "NeuralNetwork";
    *(_WORD *)&v44[12] = 2080;
    *(_QWORD *)&v44[14] = v35;
    _os_log_impl(&dword_19C291000, v34, OS_LOG_TYPE_DEFAULT, "%s: Loaded neural language model: %s", v44, 0x16u);
  }
  return a1;
}

void sub_19C40BBF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, __int16 a11, char a12, char a13, int a14, __int16 a15, char a16, char a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,char a30)
{
  uint64_t v30;
  void *v31;
  void **v32;
  void **v33;
  int v34;

  if (a28 < 0)
  {
    operator delete(__p);
    if ((v34 & 1) == 0)
    {
LABEL_6:
      sub_19C3555B8(*(char **)(v30 + 88));
      sub_19C35561C(*(char **)(v30 + 64));
      sub_19C307B68(v32);
      sub_19C307B68(v33);
      sub_19C40B358((const void **)v30);
      sub_19C2E5608(&a10);
      _Unwind_Resume(a1);
    }
  }
  else if (!v34)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v31);
  goto LABEL_6;
}

void sub_19C40BD7C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  __CFError *v4;
  void *__p;
  __int128 v6;
  __CFError *v7;

  v7 = 0;
  v3 = *a1;
  if (a2)
    sub_19C40BEB8(v3, a2, (uint64_t)&v7);
  else
    sub_19C40BEB8(v3, 0, (uint64_t)&v7);
  sub_19C3554E0((uint64_t)a1);
  v4 = v7;
  if (v7)
  {
    __p = operator new(0x19uLL);
    v6 = xmmword_19C46DFA0;
    strcpy((char *)__p, "MRLNeuralNetworkPredict");
    sub_19C40C030((uint64_t *)&__p, v4);
    if (SHIBYTE(v6) < 0)
      operator delete(__p);
  }
}

void sub_19C40BE20(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  NSObject *v15;

  if (a14 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  if (qword_1EDB97228 != -1)
    dispatch_once(&qword_1EDB97228, &unk_1E3D3ABD0);
  v15 = qword_1EDB97220;
  if (os_log_type_enabled((os_log_t)qword_1EDB97220, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(__p) = 0;
    _os_log_impl(&dword_19C291000, v15, OS_LOG_TYPE_DEFAULT, "Unable to run inference on the NN Model", (uint8_t *)&__p, 2u);
  }
  __cxa_end_catch();
  JUMPOUT(0x19C40BE10);
}

uint64_t sub_19C40BEB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  void *v7;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v9 = 0;
  v10 = &v9;
  v11 = 0x2000000000;
  v6 = off_1EDB97040;
  v12 = off_1EDB97040;
  if (off_1EDB97040)
    goto LABEL_7;
  v13 = 0;
  if (qword_1EE41C580)
  {
    v6 = (void *)qword_1EE41C580;
  }
  else
  {
    v14 = xmmword_1E3D3C608;
    v15 = 0;
    qword_1EE41C580 = _sl_dlopen();
    v7 = v13;
    v6 = (void *)qword_1EE41C580;
    if (!qword_1EE41C580)
    {
      v7 = (void *)abort_report_np();
      goto LABEL_11;
    }
    if (v13)
      goto LABEL_12;
  }
  while (1)
  {
    v6 = dlsym(v6, "MRLNeuralNetworkPredict");
    v10[3] = (uint64_t)v6;
    off_1EDB97040 = v6;
LABEL_7:
    _Block_object_dispose(&v9, 8);
    if (v6)
      break;
    dlerror();
    v7 = (void *)abort_report_np();
LABEL_11:
    __break(1u);
LABEL_12:
    free(v7);
  }
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v6)(a1, a2, a3);
}

void sub_19C40C014(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19C40C030(uint64_t *a1, CFErrorRef err)
{
  CFStringRef v4;
  NSObject *v5;
  uint64_t *v6;
  uint8_t buf[4];
  uint64_t *v8;
  __int16 v9;
  CFStringRef v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v4 = CFErrorCopyDescription(err);
  if (qword_1EDB97228 != -1)
    dispatch_once(&qword_1EDB97228, &unk_1E3D3ABD0);
  v5 = qword_1EDB97220;
  if (os_log_type_enabled((os_log_t)qword_1EDB97220, OS_LOG_TYPE_ERROR))
  {
    if (*((char *)a1 + 23) >= 0)
      v6 = a1;
    else
      v6 = (uint64_t *)*a1;
    *(_DWORD *)buf = 136315394;
    v8 = v6;
    v9 = 2112;
    v10 = v4;
    _os_log_error_impl(&dword_19C291000, v5, OS_LOG_TYPE_ERROR, "%s() failed: %@", buf, 0x16u);
    if (v4)
      goto LABEL_5;
  }
  else if (v4)
  {
LABEL_5:
    CFRelease(v4);
  }
  CFRelease(err);
}

void sub_19C40C148(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2)
    sub_19C2CDAC8(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_19C40C170(uint64_t *a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  v5 = 0;
  v6 = &v5;
  v7 = 0x2000000000;
  v3 = off_1EDB96E48;
  v8 = off_1EDB96E48;
  if (off_1EDB96E48)
    goto LABEL_7;
  v9 = 0;
  if (qword_1EE41C580)
  {
    v3 = (void *)qword_1EE41C580;
  }
  else
  {
    v10 = xmmword_1E3D3C608;
    v11 = 0;
    qword_1EE41C580 = _sl_dlopen();
    v4 = v9;
    v3 = (void *)qword_1EE41C580;
    if (!qword_1EE41C580)
    {
      v4 = (void *)abort_report_np();
      goto LABEL_11;
    }
    if (v9)
      goto LABEL_12;
  }
  while (1)
  {
    v3 = dlsym(v3, "MRLNeuralNetworkClear");
    v6[3] = (uint64_t)v3;
    off_1EDB96E48 = v3;
LABEL_7:
    _Block_object_dispose(&v5, 8);
    if (v3)
      break;
    dlerror();
    v4 = (void *)abort_report_np();
LABEL_11:
    __break(1u);
LABEL_12:
    free(v4);
  }
  ((void (*)(uint64_t, _QWORD))v3)(v2, 0);
  sub_19C3554E0((uint64_t)a1);
}

void sub_19C40C2C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_19C40C2E0(uint64_t a1, const UInt8 *a2)
{
  CFIndex v3;
  CFIndex v4;
  CFStringRef v5;
  CFStringRef v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *exception;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = *((_QWORD *)a2 + 1);
  if (*((char *)a2 + 23) >= 0)
  {
    v4 = a2[23];
  }
  else
  {
    a2 = *(const UInt8 **)a2;
    v4 = v3;
  }
  v5 = CFStringCreateWithBytes(0, a2, v4, 0x8000100u, 0);
  if (!v5)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD3154](exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v6 = v5;
  v12 = 0;
  v13 = &v12;
  v14 = 0x2000000000;
  v7 = off_1EDB970D0;
  v15 = off_1EDB970D0;
  if (off_1EDB970D0)
    goto LABEL_11;
  v16 = 0;
  if (qword_1EE41C580)
  {
    v7 = (void *)qword_1EE41C580;
  }
  else
  {
    v17 = xmmword_1E3D3C608;
    v18 = 0;
    qword_1EE41C580 = _sl_dlopen();
    v8 = v16;
    v7 = (void *)qword_1EE41C580;
    if (!qword_1EE41C580)
    {
      v8 = (void *)abort_report_np();
      goto LABEL_15;
    }
    if (v16)
      goto LABEL_16;
  }
  while (1)
  {
    v7 = dlsym(v7, "MRLNeuralNetworkGetOutputDimension");
    v13[3] = (uint64_t)v7;
    off_1EDB970D0 = v7;
LABEL_11:
    _Block_object_dispose(&v12, 8);
    if (v7)
      break;
    dlerror();
    v8 = (void *)abort_report_np();
LABEL_15:
    __break(1u);
LABEL_16:
    free(v8);
  }
  v9 = ((uint64_t (*)(uint64_t, CFStringRef))v7)(a1, v6);
  CFRelease(v6);
  return v9;
}

void sub_19C40C4A0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19C40C4B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, int a12, __int16 a13, char a14, char a15)
{
  if (a2)
    sub_19C2CDAC8(exception_object);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_19C40C4EC(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E3D37140;
  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  return a1;
}

void sub_19C40C52C(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_1E3D37140;
  v1 = a1[2];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C40C57C(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = (***(uint64_t (****)(_QWORD))(a1 + 16))(*(_QWORD *)(a1 + 16));
  v4 = 0;
  if ((_DWORD)v2)
  {
    (*(void (**)(_QWORD, char *))(**(_QWORD **)(a1 + 16) + 8))(*(_QWORD *)(a1 + 16), &v4);
    if (!v4)
      return 0;
  }
  return v2;
}

uint64_t sub_19C40C5E0(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v5;
  unsigned __int8 v7;

  v7 = 0;
  if (a2)
    *a2 = (*(uint64_t (**)(_QWORD, unsigned __int8 *))(**(_QWORD **)(a1 + 16) + 8))(*(_QWORD *)(a1 + 16), &v7);
  if (a3)
  {
    *(int64x2_t *)a3 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
    *(_QWORD *)(a3 + 16) = 0;
    *(_WORD *)(a3 + 24) = 0;
    *(_BYTE *)(a3 + 32) = 1;
    *(_OWORD *)(a3 + 40) = xmmword_19C46DE10;
    *(_DWORD *)(a3 + 56) = 0;
    *(_OWORD *)(a3 + 64) = xmmword_19C46DE10;
    *(_QWORD *)(a3 + 88) = 0;
    *(_QWORD *)(a3 + 96) = 0;
    *(_QWORD *)(a3 + 80) = 0xFFEFFFFFFFFFFFFFLL;
    v5 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)a3 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 24) + 8 * v7);
    *(_QWORD *)(a3 + 104) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
    *(_DWORD *)(a3 + 116) = 9;
    *(_BYTE *)(a3 + 112) = 0;
  }
  return 1;
}

void sub_19C40C6A8(uint64_t a1, const __CFURL *a2)
{
  void *__p;

  sub_19C2E15E8(a2, &__p);
}

void sub_19C40CB08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,_QWORD *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41)
{
  uint64_t v41;
  void *v42;
  int v43;
  uint64_t **v44;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v43 & 1) == 0)
    {
LABEL_8:
      a22 = (_QWORD *)*MEMORY[0x1E0DE4F50];
      v46 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
      *(_QWORD **)((char *)&a22 + *(a22 - 3)) = *(_QWORD **)(MEMORY[0x1E0DE4F50] + 64);
      a24 = v46;
      a25 = MEMORY[0x1E0DE4FB8] + 16;
      if (a38 < 0)
        operator delete(a33);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x1A1AD34CC](&a41);
      v47 = *(_QWORD *)(v41 + 24);
      *(_QWORD *)(v41 + 24) = 0;
      if (v47)
      {
        v48 = *(void **)v47;
        if (*(_QWORD *)v47)
        {
          *(_QWORD *)(v47 + 8) = v48;
          operator delete(v48);
        }
        MEMORY[0x1A1AD355C](v47, 0x1080C409A65DFB4);
      }
      v49 = *v44;
      *v44 = 0;
      if (v49)
      {
        v50 = *v49;
        if (*v49)
        {
          v51 = *(_QWORD *)(v50 + 24);
          if (v51)
          {
            sub_19C3B4094(v51 + 8);
            MEMORY[0x1A1AD355C](v51, 0x1020C403F824CD1);
            if (*(_QWORD *)v50)
              free(*(void **)v50);
          }
          MEMORY[0x1A1AD355C](v50, 0x1030C40FC63861FLL);
        }
        MEMORY[0x1A1AD355C](v49, 0x20C4093837F09);
      }
      if (*(_QWORD *)v41)
        munmap(*(void **)v41, *(_QWORD *)(v41 + 8));
      *(_QWORD *)(v41 + 8) = 0;
      _Unwind_Resume(a1);
    }
  }
  else if (!v43)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v42);
  goto LABEL_8;
}

void sub_19C40CD38(uint64_t a1)
{
  sub_19C40E3F0(a1);
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C40CD5C()
{
  uint64_t v0;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  int v5;

  v2 = 0;
  v3 = &v2;
  v5 = 0;
  v4 = 0x2000000000;
  LXLexiconEnumerateEntriesForString();
  v0 = *((unsigned int *)v3 + 6);
  _Block_object_dispose(&v2, 8);
  return v0;
}

void sub_19C40CDE8(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_19C40CE00(uint64_t a1, const UInt8 *a2)
{
  return sub_19C412D1C(*(_QWORD *)(a1 + 24), a2);
}

void sub_19C40CE08(uint64_t a1@<X8>)
{
  sub_19C412E64(a1);
}

_QWORD *sub_19C40CE18@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 24);
  v7[0] = &off_1E3D38AB0;
  v8 = v7;
  sub_19C412F18(a3, v4, a2, v7, 2);
  result = v8;
  if (v8 == v7)
  {
    v6 = 4;
    result = v7;
  }
  else
  {
    if (!v8)
      return result;
    v6 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v6))();
}

void sub_19C40CEBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_19C40CEF8()
{
  sub_19C413280();
}

_QWORD *sub_19C40CF00@<X0>(_QWORD *a1@<X8>)
{
  uint64_t RootCursor;
  _QWORD *result;

  RootCursor = LXLexiconCreateRootCursor();
  result = (_QWORD *)operator new();
  *result = &off_1E3D35378;
  result[1] = RootCursor;
  *a1 = result;
  return result;
}

uint64_t sub_19C40CF50(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

void sub_19C40CF58()
{
  const void *RootCursor;

  RootCursor = (const void *)LXLexiconCreateRootCursor();
  LXCursorEnumerateEntriesRecursively();
  if (RootCursor)
    CFRelease(RootCursor);
}

void sub_19C40CFD4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_19C338870((const void **)(v1 - 24));
  _Unwind_Resume(a1);
}

uint64_t sub_19C40CFE8()
{
  const void *RootCursor;
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  int v6;

  v3 = 0;
  v4 = &v3;
  v6 = 0;
  v5 = 0x2000000000;
  RootCursor = (const void *)LXLexiconCreateRootCursor();
  LXCursorEnumerateEntriesRecursivelyWithPolicy();
  v1 = *((unsigned int *)v4 + 6);
  if (RootCursor)
    CFRelease(RootCursor);
  _Block_object_dispose(&v3, 8);
  return v1;
}

void sub_19C40D08C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  const void *v7;
  va_list va;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, const void *);
  sub_19C338870((const void **)va);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_19C40D0B4()
{
  return LXLexiconSerializedSize();
}

uint64_t sub_19C40D0BC()
{
  return LXLexiconClear();
}

uint64_t sub_19C40D0C4()
{
  return LXLexiconWriteDebugDump();
}

BOOL sub_19C40D0CC(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  CFStringRef v5;
  int v6;
  _BOOL8 v7;
  int v8;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;

  v5 = sub_19C2E1370(a2);
  v10 = 0;
  v11 = &v10;
  v13 = 0;
  v12 = 0x2000000000;
  LXLexiconEnumerateEntriesForString();
  v6 = *((_DWORD *)v11 + 6);
  _Block_object_dispose(&v10, 8);
  if (v6 || (CEMStringContainsEmoji(), v8 = LXLexiconAdd(), (*a4 = v8) == 0))
  {
    v7 = 0;
    if (!v5)
      return v7;
    goto LABEL_6;
  }
  LXLexiconSetUserBitfield();
  v7 = *a4 != 0;
  if (v5)
LABEL_6:
    CFRelease(v5);
  return v7;
}

void sub_19C40D1F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  sub_19C2FE810(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_19C40D220()
{
  return LXLexiconRemoveEntry();
}

uint64_t sub_19C40D228()
{
  uint64_t result;
  const void *v1;
  unsigned int MetaFlags;

  result = LXLexiconCopyEntryForTokenID();
  if (result)
  {
    v1 = (const void *)result;
    MetaFlags = LXEntryGetMetaFlags();
    CFRelease(v1);
    return (MetaFlags >> 29) & 1;
  }
  return result;
}

void sub_19C40D274(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C3387E0((const void **)va);
  _Unwind_Resume(a1);
}

void sub_19C40D28C()
{
  __assert_rtn("createPrunedCopy", "LMDynamicLexiconImpl.cpp", 251, "false");
}

uint64_t sub_19C40D2B4(uint64_t a1)
{
  sub_19C40DB64(a1);
  return LXLexiconWrite();
}

void sub_19C40D2D8(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  int *i;
  int v9;
  const void *v10;
  const void *v11;
  NSObject *v12;
  uint64_t v13;
  CFTypeRef cf;
  _QWORD v15[4];
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  __n128 (*v19)(_QWORD *, uint64_t);
  void (*v20)(uint64_t);
  void *__p;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  __n128 (*v27)(_QWORD *, uint64_t);
  void (*v28)(uint64_t);
  void *v29;
  void *v30;
  uint64_t v31;
  const void *v32;
  uint8_t buf[8];
  __int16 v34;
  uint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v24 = 0;
  v25 = &v24;
  v26 = 0x4002000000;
  v27 = sub_19C40DF34;
  v28 = sub_19C40DF58;
  v30 = 0;
  v31 = 0;
  v29 = 0;
  v16 = 0;
  v17 = &v16;
  v18 = 0x4002000000;
  v19 = sub_19C40DF34;
  v20 = sub_19C40DF58;
  v22 = 0;
  v23 = 0;
  __p = 0;
  v15[0] = 0;
  v15[1] = v15;
  v15[2] = 0x2000000000;
  v15[3] = a2;
  cf = (CFTypeRef)LXLexiconCreateRootCursor();
  LXCursorEnumerateEntriesRecursively();
  v4 = v25;
  v5 = v25[5];
  v6 = v25[6];
  if (v5 != v6)
  {
    do
    {
      LXLexiconRemoveEntry();
      v5 += 4;
    }
    while (v5 != v6);
    v4 = v25;
  }
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 160))(a2, v4 + 5);
  v7 = (int *)v17[5];
  for (i = (int *)v17[6]; v7 != i; ++v7)
  {
    v9 = *v7;
    v10 = (const void *)LXLexiconCopyEntryForTokenID();
    v32 = v10;
    if (v10)
    {
      LXEntryGetUserBitfield();
      v11 = (const void *)LXEntryCopyString();
      *(_QWORD *)buf = v11;
      LXLexiconSetUserBitfield();
      if (v11)
        CFRelease(v11);
      CFRelease(v10);
    }
    else
    {
      if (qword_1EE41C5A0 != -1)
        dispatch_once(&qword_1EE41C5A0, &unk_1E3D3C6F8);
      v12 = qword_1EE41C598;
      if (os_log_type_enabled((os_log_t)qword_1EE41C598, OS_LOG_TYPE_DEFAULT))
      {
        v13 = *(_QWORD *)(a1 + 16);
        *(_DWORD *)buf = 67109378;
        *(_DWORD *)&buf[4] = v9;
        v34 = 2112;
        v35 = v13;
        _os_log_impl(&dword_19C291000, v12, OS_LOG_TYPE_DEFAULT, "Entry for tokenID=%u is missing from the '%@' lexicon", buf, 0x12u);
      }
    }
  }
  if (cf)
    CFRelease(cf);
  _Block_object_dispose(v15, 8);
  _Block_object_dispose(&v16, 8);
  if (__p)
  {
    v22 = __p;
    operator delete(__p);
  }
  _Block_object_dispose(&v24, 8);
  if (v29)
  {
    v30 = v29;
    operator delete(v29);
  }
}

void sub_19C40D5BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41)
{
  if (a2)
    sub_19C2CDAC8(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_19C40D660(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const __CFString *v5;
  const void *v6;

  if (a3 >= 0x1F4)
  {
    v5 = sub_19C2E1370(a2);
    v6 = (const void *)LXLexiconCopyEntryForTokenID();
    if (v6 || (sub_19C40DD04(*(_QWORD *)(a1 + 24), v5, a3) & 1) != 0)
    {
      LXLexiconIncrementUsageCount();
      if (v6)
        CFRelease(v6);
    }
    if (v5)
      CFRelease(v5);
  }
}

void sub_19C40D710(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C2FE810((const void **)va);
  _Unwind_Resume(a1);
}

void sub_19C40D734(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const __CFString *v5;
  const void *v6;

  if (a3 >= 0x1F4)
  {
    v5 = sub_19C2E1370(a2);
    v6 = (const void *)LXLexiconCopyEntryForTokenID();
    if (v6 || (sub_19C40DD04(*(_QWORD *)(a1 + 24), v5, a3) & 1) != 0)
    {
      LXLexiconIncrementPenaltyCount();
      if (v6)
        CFRelease(v6);
    }
    if (v5)
      CFRelease(v5);
  }
}

void sub_19C40D7E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C2FE810((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19C40D808()
{
  uint64_t v0;
  const void *v1;
  uint64_t PenaltyCount;

  v0 = LXLexiconCopyEntryForTokenID();
  if (!v0)
    return 0;
  v1 = (const void *)v0;
  PenaltyCount = LXEntryGetPenaltyCount();
  CFRelease(v1);
  return PenaltyCount;
}

void sub_19C40D85C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C3387E0((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19C40D870()
{
  uint64_t v0;
  const void *v1;
  uint64_t UsageCount;

  v0 = LXLexiconCopyEntryForTokenID();
  if (!v0)
    return 0;
  v1 = (const void *)v0;
  UsageCount = LXEntryGetUsageCount();
  CFRelease(v1);
  return UsageCount;
}

void sub_19C40D8C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C3387E0((const void **)va);
  _Unwind_Resume(a1);
}

void sub_19C40D8D8()
{
  uint64_t v0;
  const void *v1;
  const void *v2;

  v0 = LXLexiconCopyEntryForTokenID();
  if (!v0)
    __assert_rtn("blocklistToken", "LMDynamicLexiconImpl.cpp", 474, "entry");
  v1 = (const void *)v0;
  v2 = (const void *)LXEntryCopyString();
  if (v2)
  {
    LXEntryGetUserBitfield();
    LXLexiconSetUserBitfield();
    CFRelease(v2);
  }
  CFRelease(v1);
}

void sub_19C40D97C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C3387E0((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19C40D9A4()
{
  uint64_t result;
  const void *v1;
  unsigned int UserBitfield;

  result = LXLexiconCopyEntryForTokenID();
  if (result)
  {
    v1 = (const void *)result;
    UserBitfield = LXEntryGetUserBitfield();
    CFRelease(v1);
    return (UserBitfield >> 1) & 1;
  }
  return result;
}

void sub_19C40D9F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C3387E0((const void **)va);
  _Unwind_Resume(a1);
}

void sub_19C40DA04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::mutex *v6;
  uint64_t v7;
  const __CFString *v8;
  const void *v9;
  const void *v10;

  v6 = (std::mutex *)(a1 + 32);
  std::mutex::lock((std::mutex *)(a1 + 32));
  if (a3 >= 0x1F4)
  {
    v7 = *(unsigned __int8 *)(a2 + 23);
    if ((v7 & 0x80u) != 0)
      v7 = *(_QWORD *)(a2 + 8);
    if (v7)
    {
      v8 = sub_19C2E1370(a2);
      v9 = (const void *)LXLexiconCopyEntryForTokenID();
      if (v9 || (sub_19C40DD04(*(_QWORD *)(a1 + 24), v8, a3) & 1) != 0)
      {
        v10 = (const void *)LXLexiconCopyEntryForTokenID();
        if (v9)
          CFRelease(v9);
        if ((LXEntryGetMetaFlags() & 0x4000000) == 0)
        {
          LXLexiconUpdateMetaFlags();
          LXLexiconIncrementUsageCount();
          sub_19C357A04((float *)(a1 + 96), a3, a3);
        }
        if (v10)
          CFRelease(v10);
      }
      if (v8)
        CFRelease(v8);
    }
  }
  std::mutex::unlock(v6);
}

void sub_19C40DB2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  std::mutex *v2;
  va_list va;

  va_start(va, a2);
  sub_19C2FE810((const void **)va);
  std::mutex::unlock(v2);
  _Unwind_Resume(a1);
}

void sub_19C40DB64(uint64_t a1)
{
  std::mutex *v2;
  _QWORD *i;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t j;
  const void *v8;
  const void *v9;

  v2 = (std::mutex *)(a1 + 32);
  std::mutex::lock((std::mutex *)(a1 + 32));
  for (i = *(_QWORD **)(a1 + 112); i; i = (_QWORD *)*i)
  {
    v8 = (const void *)LXLexiconCopyEntryForTokenID();
    if (v8)
    {
      if ((LXEntryGetMetaFlags() & 0x4000000) != 0)
      {
        if (LXEntryGetUsageCount() > 3)
        {
          v9 = (const void *)LXEntryCopyString();
          LXLexiconUpdateMetaFlags();
          LXLexiconIncrementUsageCount();
          if (v9)
            CFRelease(v9);
        }
        else
        {
          LXEntryGetTokenID();
          LXLexiconRemoveEntry();
        }
      }
      CFRelease(v8);
    }
  }
  if (*(_QWORD *)(a1 + 120))
  {
    v4 = *(_QWORD **)(a1 + 112);
    if (v4)
    {
      do
      {
        v5 = (_QWORD *)*v4;
        operator delete(v4);
        v4 = v5;
      }
      while (v5);
    }
    *(_QWORD *)(a1 + 112) = 0;
    v6 = *(_QWORD *)(a1 + 104);
    if (v6)
    {
      for (j = 0; j != v6; ++j)
        *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8 * j) = 0;
    }
    *(_QWORD *)(a1 + 120) = 0;
  }
  std::mutex::unlock(v2);
}

void sub_19C40DC9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  std::mutex *v2;
  va_list va;

  va_start(va, a2);
  sub_19C3387E0((const void **)va);
  std::mutex::unlock(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_19C40DCDC()
{
  return 3;
}

uint64_t sub_19C40DCE4()
{
  return 0;
}

uint64_t sub_19C40DCEC()
{
  return 0;
}

uint64_t sub_19C40DCF4()
{
  return 0;
}

uint64_t sub_19C40DCFC()
{
  return 0;
}

uint64_t sub_19C40DD04(uint64_t a1, const __CFString *a2, uint64_t a3)
{
  const void *Mutable;
  uint64_t v6;
  char *v7;
  _BYTE *v8;
  NSObject *v9;
  void *v11;
  char v12;
  const void *v13;
  _BYTE __p[12];
  char v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  CEMStringContainsEmoji();
  Mutable = (const void *)LXEntryCreateMutable();
  v13 = Mutable;
  v6 = LXLexiconAddEntryWithTokenID();
  if ((v6 & 1) == 0)
  {
    v7 = (char *)operator new(0x28uLL);
    strcpy(v7, "Failed to add new entry into lexicon");
    sub_19C29CEF8(a2, __p);
    if (v15 >= 0)
      v8 = __p;
    else
      v8 = *(_BYTE **)__p;
    sub_19C34EC30("failed to add new entry with string=%s, tokenID=%u", (uint64_t)&v11, v8, a3);
    if (v15 < 0)
      operator delete(*(void **)__p);
    if (qword_1EE41C5A0 != -1)
      dispatch_once(&qword_1EE41C5A0, &unk_1E3D3C6F8);
    v9 = qword_1EE41C598;
    if (os_log_type_enabled((os_log_t)qword_1EE41C598, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__p = 136315138;
      *(_QWORD *)&__p[4] = v7;
      _os_log_impl(&dword_19C291000, v9, OS_LOG_TYPE_INFO, "%s", __p, 0xCu);
    }
    if (v12 < 0)
      operator delete(v11);
    operator delete(v7);
  }
  if (Mutable)
    CFRelease(Mutable);
  return v6;
}

void sub_19C40DEB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, const void *a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;

  if (a20 < 0)
    operator delete(__p);
  operator delete(v20);
  sub_19C3E9CA4(&a14);
  _Unwind_Resume(a1);
}

os_log_t sub_19C40DF08()
{
  os_log_t result;

  result = os_log_create("com.apple.LanguageModeling", "DynamicLexiconImpl");
  qword_1EE41C598 = (uint64_t)result;
  return result;
}

__n128 sub_19C40DF34(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

void sub_19C40DF58(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

void sub_19C40DF70(uint64_t a1)
{
  char Timestamp;
  int TokenID;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  int v14;
  _QWORD *v15;
  unint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _BYTE *v23;
  unint64_t v24;
  _DWORD *v25;
  _DWORD *v26;
  char *v27;
  _DWORD *v28;
  unint64_t v29;
  uint64_t v30;
  _OWORD *v31;
  char *v32;
  uint64_t v33;
  __int128 v34;
  int v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  _BYTE *v40;
  _DWORD *v41;
  char *v42;
  unint64_t v43;
  uint64_t v44;
  _OWORD *v45;
  char *v46;
  uint64_t v47;
  __int128 v48;
  int v49;
  unint64_t v50;
  uint64_t v51;
  _OWORD *v52;
  char *v53;
  uint64_t v54;
  __int128 v55;
  int v56;
  int v57;
  double v58;

  if ((LXEntryGetUserBitfield() & 1) != 0)
  {
    v58 = 0.0;
    Timestamp = LXEntryGetTimestamp();
    TokenID = LXEntryGetTokenID();
    v57 = TokenID;
    if ((Timestamp & 1) != 0)
    {
      if (v58 >= *(double *)(a1 + 56))
        return;
      v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
      if ((*(float (**)(uint64_t, int *, uint64_t, double))(*(_QWORD *)v4 + 80))(v4, &v57, 1, v58) <= 1.0)
      {
        v5 = *(_QWORD **)(*(_QWORD *)(a1 + 48) + 8);
        v7 = (char *)v5[6];
        v24 = v5[7];
        if ((unint64_t)v7 >= v24)
        {
          v8 = (char *)v5[5];
          v36 = (v7 - v8) >> 2;
          v37 = v36 + 1;
          if (!((unint64_t)(v36 + 1) >> 62))
          {
            v38 = v24 - (_QWORD)v8;
            if (v38 >> 1 > v37)
              v37 = v38 >> 1;
            if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFFCLL)
              v39 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v39 = v37;
            if (v39)
            {
              if (v39 >> 62)
                goto LABEL_70;
              v40 = operator new(4 * v39);
            }
            else
            {
              v40 = 0;
            }
            v41 = &v40[4 * v36];
            v42 = &v40[4 * v39];
            *v41 = v57;
            v25 = v41 + 1;
            if (v7 != v8)
            {
              v50 = v7 - v8 - 4;
              if (v50 < 0x2C)
                goto LABEL_73;
              if ((unint64_t)(v8 - v40) < 0x20)
                goto LABEL_73;
              v51 = (v50 >> 2) + 1;
              v52 = &v40[4 * v36 - 16];
              v53 = v7 - 16;
              v54 = v51 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v55 = *(_OWORD *)v53;
                *(v52 - 1) = *((_OWORD *)v53 - 1);
                *v52 = v55;
                v52 -= 2;
                v53 -= 32;
                v54 -= 8;
              }
              while (v54);
              v41 -= v51 & 0x7FFFFFFFFFFFFFF8;
              v7 -= 4 * (v51 & 0x7FFFFFFFFFFFFFF8);
              if (v51 != (v51 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_73:
                do
                {
                  v56 = *((_DWORD *)v7 - 1);
                  v7 -= 4;
                  *--v41 = v56;
                }
                while (v7 != v8);
              }
            }
            goto LABEL_65;
          }
LABEL_69:
          sub_19C2A18E8();
        }
      }
      else
      {
        v5 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 8);
        v7 = (char *)v5[6];
        v6 = v5[7];
        if ((unint64_t)v7 >= v6)
        {
          v8 = (char *)v5[5];
          v9 = (v7 - v8) >> 2;
          v10 = v9 + 1;
          if (!((unint64_t)(v9 + 1) >> 62))
          {
            v11 = v6 - (_QWORD)v8;
            if (v11 >> 1 > v10)
              v10 = v11 >> 1;
            if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
              v12 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v12 = v10;
            if (!v12)
            {
              v13 = 0;
              goto LABEL_49;
            }
            if (!(v12 >> 62))
            {
              v13 = operator new(4 * v12);
LABEL_49:
              v41 = &v13[4 * v9];
              v42 = &v13[4 * v12];
              *v41 = v57;
              v25 = v41 + 1;
              if (v7 != v8)
              {
                v43 = v7 - v8 - 4;
                if (v43 < 0x2C)
                  goto LABEL_74;
                if ((unint64_t)(v8 - v13) < 0x20)
                  goto LABEL_74;
                v44 = (v43 >> 2) + 1;
                v45 = &v13[4 * v9 - 16];
                v46 = v7 - 16;
                v47 = v44 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  v48 = *(_OWORD *)v46;
                  *(v45 - 1) = *((_OWORD *)v46 - 1);
                  *v45 = v48;
                  v45 -= 2;
                  v46 -= 32;
                  v47 -= 8;
                }
                while (v47);
                v41 -= v44 & 0x7FFFFFFFFFFFFFF8;
                v7 -= 4 * (v44 & 0x7FFFFFFFFFFFFFF8);
                if (v44 != (v44 & 0x7FFFFFFFFFFFFFF8))
                {
LABEL_74:
                  do
                  {
                    v49 = *((_DWORD *)v7 - 1);
                    v7 -= 4;
                    *--v41 = v49;
                  }
                  while (v7 != v8);
                }
              }
LABEL_65:
              v5[5] = v41;
              v5[6] = v25;
              v5[7] = v42;
              if (v8)
                operator delete(v8);
              goto LABEL_67;
            }
LABEL_70:
            sub_19C2A143C();
          }
          goto LABEL_69;
        }
      }
      *(_DWORD *)v7 = v57;
      v25 = v7 + 4;
LABEL_67:
      v5[6] = v25;
      return;
    }
    v14 = TokenID;
    v15 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 8);
    v17 = (char *)v15[6];
    v16 = v15[7];
    if ((unint64_t)v17 < v16)
    {
      *(_DWORD *)v17 = TokenID;
      v15[6] = v17 + 4;
      return;
    }
    v18 = (char *)v15[5];
    v19 = (v17 - v18) >> 2;
    v20 = v19 + 1;
    if ((unint64_t)(v19 + 1) >> 62)
      goto LABEL_69;
    v21 = v16 - (_QWORD)v18;
    if (v21 >> 1 > v20)
      v20 = v21 >> 1;
    if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFFCLL)
      v22 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v22 = v20;
    if (v22)
    {
      if (v22 >> 62)
        goto LABEL_70;
      v23 = operator new(4 * v22);
    }
    else
    {
      v23 = 0;
    }
    v26 = &v23[4 * v19];
    v27 = &v23[4 * v22];
    *v26 = v14;
    v28 = v26 + 1;
    if (v17 != v18)
    {
      v29 = v17 - v18 - 4;
      if (v29 < 0x2C)
        goto LABEL_75;
      if ((unint64_t)(v18 - v23) < 0x20)
        goto LABEL_75;
      v30 = (v29 >> 2) + 1;
      v31 = &v23[4 * v19 - 16];
      v32 = v17 - 16;
      v33 = v30 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v34 = *(_OWORD *)v32;
        *(v31 - 1) = *((_OWORD *)v32 - 1);
        *v31 = v34;
        v31 -= 2;
        v32 -= 32;
        v33 -= 8;
      }
      while (v33);
      v26 -= v30 & 0x7FFFFFFFFFFFFFF8;
      v17 -= 4 * (v30 & 0x7FFFFFFFFFFFFFF8);
      if (v30 != (v30 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_75:
        do
        {
          v35 = *((_DWORD *)v17 - 1);
          v17 -= 4;
          *--v26 = v35;
        }
        while (v17 != v18);
      }
    }
    v15[5] = v26;
    v15[6] = v28;
    v15[7] = v27;
    if (v18)
      operator delete(v18);
    v15[6] = v28;
  }
}

uint64_t sub_19C40E388(uint64_t result)
{
  ++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24);
  return result;
}

uint64_t sub_19C40E3A0(uint64_t a1)
{
  LXEntryGetTokenID();
  LXEntryGetProbability();
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_19C40E3F0(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  const void *v5;
  const void *v6;
  const void *v7;

  *(_QWORD *)a1 = &off_1E3D35CB0;
  v2 = *(_QWORD **)(a1 + 112);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)(a1 + 96);
  *(_QWORD *)(a1 + 96) = 0;
  if (v4)
    operator delete(v4);
  std::mutex::~mutex((std::mutex *)(a1 + 32));
  v5 = *(const void **)(a1 + 24);
  if (v5)
    CFRelease(v5);
  *(_QWORD *)(a1 + 24) = 0;
  v6 = *(const void **)(a1 + 16);
  if (v6)
    CFRelease(v6);
  *(_QWORD *)(a1 + 16) = 0;
  v7 = *(const void **)(a1 + 8);
  if (v7)
    CFRelease(v7);
  *(_QWORD *)(a1 + 8) = 0;
  return a1;
}

uint64_t sub_19C40E488(uint64_t a1, uint64_t a2, const void *a3, CFStringRef theString, const void *a5)
{
  CFAllocatorRef *v10;
  __CFString *Copy;
  const __CFString *v12;
  _QWORD *v13;
  const void *v14;
  __CFDictionary *Mutable;
  CFStringRef v16;
  const __CFString *v17;
  uint64_t v18;
  const void *v19;
  _BYTE *exception;
  char *v22;
  uint64_t v23;

  *(_QWORD *)a1 = &off_1E3D35CB0;
  *(_QWORD *)(a1 + 8) = 0;
  v10 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
  if (theString)
  {
    Copy = (__CFString *)CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], theString);
  }
  else
  {
    Copy = CFStringCreateMutable(0, 0);
    CFStringAppend(Copy, CFSTR("Dynamic"));
    CFStringAppend(Copy, CFSTR("."));
    v12 = (const __CFString *)MEMORY[0x1A1AD2A04](a3);
    CFStringAppend(Copy, v12);
  }
  *(_QWORD *)(a1 + 16) = Copy;
  if (a5
    && (v13 = __dynamic_cast(a5, (const struct __class_type_info *)&unk_1E3D31758, (const struct __class_type_info *)&unk_1E3D31A80, 0)) != 0)
  {
    v14 = (const void *)v13[3];
  }
  else
  {
    v14 = 0;
  }
  Mutable = CFDictionaryCreateMutable(*v10, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v16 = sub_19C2E1370(a2);
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0D437C8], Copy);
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0D43798], v16);
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0D437B8], a3);
  v17 = (const __CFString *)MEMORY[0x1A1AD2A04](a3);
  if (CFStringCompare(v17, CFSTR("mul"), 0) == kCFCompareEqualTo)
    CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0D437D0], (const void *)*MEMORY[0x1E0C9AE50]);
  if (v14)
    CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0D43790], v14);
  v23 = 0;
  v18 = LXLexiconCreateMutable();
  if (!v18)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    v22 = (char *)operator new(0x28uLL);
    strcpy(v22, "Failed to create the lexicon: (null)");
    *(_QWORD *)exception = off_1E3D38838;
    sub_19C2B5238(exception + 8, v22, 0x24uLL);
    __cxa_throw(exception, (struct type_info *)&unk_1E3D32968, (void (*)(void *))sub_19C3123E4);
  }
  if (v16)
    CFRelease(v16);
  if (Mutable)
    CFRelease(Mutable);
  *(_QWORD *)(a1 + 32) = 850045863;
  *(_QWORD *)(a1 + 24) = v18;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_QWORD *)(a1 + 120) = 0;
  *(_DWORD *)(a1 + 128) = 1065353216;
  if (*(const void **)(a1 + 8) != a3)
  {
    CFRetain(a3);
    v19 = *(const void **)(a1 + 8);
    if (v19)
      CFRelease(v19);
    *(_QWORD *)(a1 + 8) = a3;
  }
  if (theString)
    LXLexiconRepositoryAddOrUpdate();
  return a1;
}

void sub_19C40E7B8(_Unwind_Exception *a1)
{
  uint64_t v1;
  const void *v2;
  const void *v3;
  const void *v4;
  void *v5;
  const void *v7;
  const void *v8;

  operator delete(v5);
  CFRelease(v4);
  if (v3)
    CFRelease(v3);
  if (v2)
    CFRelease(v2);
  v7 = *(const void **)(v1 + 16);
  if (v7)
    CFRelease(v7);
  *(_QWORD *)(v1 + 16) = 0;
  v8 = *(const void **)(v1 + 8);
  if (v8)
    CFRelease(v8);
  *(_QWORD *)(v1 + 8) = 0;
  _Unwind_Resume(a1);
}

uint64_t sub_19C40E8F8(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_1E3D36800;
  std::mutex::~mutex((std::mutex *)(a1 + 16));
  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_19C40E940(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_1E3D36800;
  std::mutex::~mutex((std::mutex *)(a1 + 16));
  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C40E998(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::mutex *v6;
  uint64_t v7;

  v6 = (std::mutex *)(a1 + 16);
  std::mutex::lock((std::mutex *)(a1 + 16));
  v7 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), a2, a3);
  std::mutex::unlock(v6);
  return v7;
}

void sub_19C40E9F8(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19C40EA0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::mutex *v6;
  uint64_t v7;

  v6 = (std::mutex *)(a1 + 16);
  std::mutex::lock((std::mutex *)(a1 + 16));
  v7 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8), a2, a3);
  std::mutex::unlock(v6);
  return v7;
}

void sub_19C40EA6C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19C40EA80(uint64_t a1, uint64_t a2)
{
  std::mutex *v4;

  v4 = (std::mutex *)(a1 + 16);
  std::mutex::lock((std::mutex *)(a1 + 16));
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), a2);
  std::mutex::unlock(v4);
}

void sub_19C40EAD4(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19C40EAE8(uint64_t a1, uint64_t a2)
{
  std::mutex *v4;

  v4 = (std::mutex *)(a1 + 16);
  std::mutex::lock((std::mutex *)(a1 + 16));
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), a2);
  std::mutex::unlock(v4);
}

void sub_19C40EB3C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19C40EB50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::mutex *v6;

  v6 = (std::mutex *)(a1 + 16);
  std::mutex::lock((std::mutex *)(a1 + 16));
  (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8), a2, a3);
  std::mutex::unlock(v6);
}

void sub_19C40EBA4(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19C40EBB8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

void sub_19C40EBC8(uint64_t a1, uint64_t a2)
{
  std::mutex *v4;
  uint64_t *v5;
  unsigned int v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  double *v15;
  unsigned int *v16;
  BOOL v17;
  char v18;
  _QWORD v19[5];
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  __n128 (*v23)(_QWORD *, uint64_t);
  void (*v24)(uint64_t);
  void *__p;
  void *v26;
  uint64_t v27;

  v20 = 0;
  v21 = &v20;
  v22 = 0x4002000000;
  v23 = sub_19C40F708;
  v24 = sub_19C40F72C;
  v26 = 0;
  v27 = 0;
  __p = 0;
  v4 = (std::mutex *)(a1 + 16);
  std::mutex::lock((std::mutex *)(a1 + 16));
  v5 = v21;
  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 96))(*(_QWORD *)(a1 + 8));
  v7 = v6;
  v8 = (_BYTE *)v5[5];
  if (v6 > (unint64_t)((v5[7] - (uint64_t)v8) >> 4))
  {
    v9 = (_BYTE *)v5[6];
    v10 = (char *)operator new(16 * v6);
    v11 = &v10[(v9 - v8) & 0xFFFFFFFFFFFFFFF0];
    v12 = v11;
    if (v9 != v8)
    {
      v13 = &v10[(v9 - v8) & 0xFFFFFFFFFFFFFFF0];
      do
      {
        v12 = v13 - 16;
        *((_OWORD *)v13 - 1) = *((_OWORD *)v9 - 1);
        v9 -= 16;
        v13 -= 16;
      }
      while (v9 != v8);
    }
    v5[5] = (uint64_t)v12;
    v5[6] = (uint64_t)v11;
    v5[7] = (uint64_t)&v10[16 * v7];
    if (v8)
      operator delete(v8);
  }
  v14 = *(_QWORD *)(a1 + 8);
  v19[0] = MEMORY[0x1E0C809B0];
  v19[1] = 0x40000000;
  v19[2] = sub_19C40F744;
  v19[3] = &unk_1E3D3C720;
  v19[4] = &v20;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v14 + 88))(v14, v19);
  std::mutex::unlock(v4);
  v18 = 0;
  v15 = (double *)v21[5];
  v16 = (unsigned int *)v21[6];
  if (v15 != (double *)v16)
  {
    do
    {
      (*(void (**)(uint64_t, _QWORD, char *, double))(a2 + 16))(a2, *(unsigned int *)v15, &v18, v15[1]);
      v15 += 2;
      if (v18)
        v17 = 1;
      else
        v17 = v15 == (double *)v16;
    }
    while (!v17);
  }
  _Block_object_dispose(&v20, 8);
  if (__p)
  {
    v26 = __p;
    operator delete(__p);
  }
}

void sub_19C40ED78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  _Block_object_dispose(&a15, 8);
  if (__p)
  {
    a21 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_19C40EDB4(uint64_t a1)
{
  std::mutex *v2;
  uint64_t v3;

  v2 = (std::mutex *)(a1 + 16);
  std::mutex::lock((std::mutex *)(a1 + 16));
  v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 96))(*(_QWORD *)(a1 + 8));
  std::mutex::unlock(v2);
  return v3;
}

void sub_19C40EDFC(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19C40EE10(uint64_t a1)
{
  std::mutex *v2;
  uint64_t v3;

  v2 = (std::mutex *)(a1 + 16);
  std::mutex::lock((std::mutex *)(a1 + 16));
  v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 104))(*(_QWORD *)(a1 + 8));
  std::mutex::unlock(v2);
  return v3;
}

void sub_19C40EE58(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19C40EE6C(uint64_t a1)
{
  std::mutex *v2;

  v2 = (std::mutex *)(a1 + 16);
  std::mutex::lock((std::mutex *)(a1 + 16));
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 112))(*(_QWORD *)(a1 + 8));
  std::mutex::unlock(v2);
}

void sub_19C40EEA8(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19C40EEBC(uint64_t a1, uint64_t a2)
{
  std::mutex *v4;

  v4 = (std::mutex *)(a1 + 16);
  std::mutex::lock((std::mutex *)(a1 + 16));
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 120))(*(_QWORD *)(a1 + 8), a2);
  std::mutex::unlock(v4);
}

void sub_19C40EF08(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19C40EF1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::mutex *v8;
  uint64_t v9;

  v8 = (std::mutex *)(a1 + 16);
  std::mutex::lock((std::mutex *)(a1 + 16));
  v9 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 128))(*(_QWORD *)(a1 + 8), a2, a3, a4);
  std::mutex::unlock(v8);
  return v9;
}

void sub_19C40EF8C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19C40EFA0(uint64_t a1, uint64_t a2)
{
  std::mutex *v4;
  uint64_t v5;

  v4 = (std::mutex *)(a1 + 16);
  std::mutex::lock((std::mutex *)(a1 + 16));
  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 136))(*(_QWORD *)(a1 + 8), a2);
  std::mutex::unlock(v4);
  return v5;
}

void sub_19C40EFF8(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19C40F00C(uint64_t a1, uint64_t a2)
{
  std::mutex *v4;
  uint64_t v5;

  v4 = (std::mutex *)(a1 + 16);
  std::mutex::lock((std::mutex *)(a1 + 16));
  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 144))(*(_QWORD *)(a1 + 8), a2);
  std::mutex::unlock(v4);
  return v5;
}

void sub_19C40F064(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19C40F078(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t result;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;

  (*(void (**)(uint64_t **__return_ptr, uint64_t))(*(_QWORD *)a2 + 216))(&v15, a2);
  std::mutex::lock((std::mutex *)(a1 + 16));
  (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t *, uint64_t))(**(_QWORD **)(a1 + 8) + 160))(&v14, *(_QWORD *)(a1 + 8), v15, a3);
  v6 = v14;
  v14 = 0;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  if (v7)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    v8 = v14;
    v14 = 0;
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
  std::mutex::unlock((std::mutex *)(a1 + 16));
  v9 = v15;
  v15 = 0;
  v13 = v9;
  result = (*(uint64_t (**)(uint64_t, uint64_t **))(*(_QWORD *)a2 + 224))(a2, &v13);
  v11 = v13;
  v13 = 0;
  if (v11)
  {
    if (*v11)
    {
      sub_19C29A56C(v11);
      if (*v11)
        MEMORY[0x1A1AD355C](*v11, 0x1010C4006136809);
    }
    result = MEMORY[0x1A1AD355C](v11, 0x20C4093837F09);
  }
  v12 = v15;
  v15 = 0;
  if (v12)
  {
    if (*v12)
    {
      sub_19C29A56C(v12);
      if (*v12)
        MEMORY[0x1A1AD355C](*v12, 0x1010C4006136809);
    }
    return MEMORY[0x1A1AD355C](v12, 0x20C4093837F09);
  }
  return result;
}

void sub_19C40F1E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t *v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, uint64_t *);
  v5 = va_arg(va1, _QWORD);
  sub_19C342C34((uint64_t **)va);
  sub_19C342C34((uint64_t **)va1);
  _Unwind_Resume(a1);
}

void sub_19C40F21C(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void sub_19C40F224(uint64_t a1)
{
  std::mutex *v2;

  v2 = (std::mutex *)(a1 + 16);
  std::mutex::lock((std::mutex *)(a1 + 16));
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 168))(*(_QWORD *)(a1 + 8));
  std::mutex::unlock(v2);
}

void sub_19C40F260(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19C40F274(uint64_t a1, uint64_t a2, double a3)
{
  std::mutex *v6;

  v6 = (std::mutex *)(a1 + 16);
  std::mutex::lock((std::mutex *)(a1 + 16));
  (*(void (**)(_QWORD, uint64_t, double))(**(_QWORD **)(a1 + 8) + 176))(*(_QWORD *)(a1 + 8), a2, a3);
  std::mutex::unlock(v6);
}

void sub_19C40F2D0(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19C40F2E4(uint64_t a1, uint64_t a2, uint64_t a3, float a4)
{
  std::mutex *v8;

  v8 = (std::mutex *)(a1 + 16);
  std::mutex::lock((std::mutex *)(a1 + 16));
  (*(void (**)(_QWORD, uint64_t, uint64_t, float))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8), a2, a3, a4);
  std::mutex::unlock(v8);
}

void sub_19C40F348(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19C40F35C()
{
  __assert_rtn("incrementPenaltyCount", "LMPrunableSharedLexicon.cpp", 163, "false && \"incrementPenaltyCount() is not supported in PrunableSharedLexicon\"");
}

void sub_19C40F384()
{
  __assert_rtn("getPenaltyCount", "LMPrunableSharedLexicon.cpp", 168, "false && \"getPenaltyCount() is not supported in PrunableSharedLexicon\"");
}

void sub_19C40F3AC()
{
  __assert_rtn("getUsageCount", "LMPrunableSharedLexicon.cpp", 174, "false && \"getUsageCount() is not supported in PrunableSharedLexicon\"");
}

void sub_19C40F3D4()
{
  __assert_rtn("blocklistToken", "LMPrunableSharedLexicon.cpp", 180, "false && \"blocklistToken() is not supported in PrunableSharedLexicon\"");
}

uint64_t sub_19C40F3FC()
{
  return 0;
}

void sub_19C40F404(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::mutex *v6;

  v6 = (std::mutex *)(a1 + 16);
  std::mutex::lock((std::mutex *)(a1 + 16));
  (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 232))(*(_QWORD *)(a1 + 8), a2, a3);
  std::mutex::unlock(v6);
}

void sub_19C40F458(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19C40F46C(uint64_t a1)
{
  std::mutex *v2;

  v2 = (std::mutex *)(a1 + 16);
  std::mutex::lock((std::mutex *)(a1 + 16));
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 240))(*(_QWORD *)(a1 + 8));
  std::mutex::unlock(v2);
}

void sub_19C40F4A8(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19C40F4BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::mutex *v6;
  uint64_t v7;

  v6 = (std::mutex *)(a1 + 16);
  std::mutex::lock((std::mutex *)(a1 + 16));
  v7 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 248))(*(_QWORD *)(a1 + 8), a2, a3);
  std::mutex::unlock(v6);
  return v7;
}

void sub_19C40F51C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19C40F530(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::mutex *v6;
  uint64_t v7;

  v6 = (std::mutex *)(a1 + 16);
  std::mutex::lock((std::mutex *)(a1 + 16));
  v7 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 256))(*(_QWORD *)(a1 + 8), a2, a3);
  std::mutex::unlock(v6);
  return v7;
}

void sub_19C40F590(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19C40F5A4(uint64_t a1, uint64_t a2)
{
  std::mutex *v4;
  uint64_t v5;

  v4 = (std::mutex *)(a1 + 16);
  std::mutex::lock((std::mutex *)(a1 + 16));
  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 264))(*(_QWORD *)(a1 + 8), a2);
  std::mutex::unlock(v4);
  return v5;
}

void sub_19C40F5FC(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19C40F610(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::mutex *v8;
  uint64_t v9;

  v8 = (std::mutex *)(a1 + 16);
  std::mutex::lock((std::mutex *)(a1 + 16));
  v9 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 272))(*(_QWORD *)(a1 + 8), a2, a3, a4);
  std::mutex::unlock(v8);
  return v9;
}

void sub_19C40F680(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19C40F694(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::mutex *v6;
  uint64_t v7;

  v6 = (std::mutex *)(a1 + 16);
  std::mutex::lock((std::mutex *)(a1 + 16));
  v7 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 280))(*(_QWORD *)(a1 + 8), a2, a3);
  std::mutex::unlock(v6);
  return v7;
}

void sub_19C40F6F4(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

__n128 sub_19C40F708(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

void sub_19C40F72C(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

void sub_19C40F744(uint64_t a1, int a2, double a3)
{
  _QWORD *v5;
  unint64_t v6;
  double *v7;
  double *v8;
  double *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  BOOL v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  double *v17;
  char *v18;

  v5 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 8);
  v7 = (double *)v5[6];
  v6 = v5[7];
  if ((unint64_t)v7 >= v6)
  {
    v9 = (double *)v5[5];
    v10 = ((char *)v7 - (char *)v9) >> 4;
    v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60)
      sub_19C2A18E8();
    v12 = v6 - (_QWORD)v9;
    if (v12 >> 3 > v11)
      v11 = v12 >> 3;
    v13 = (unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0;
    v14 = 0xFFFFFFFFFFFFFFFLL;
    if (!v13)
      v14 = v11;
    if (v14 >> 60)
      sub_19C2A143C();
    v15 = 16 * v14;
    v16 = (char *)operator new(16 * v14);
    v17 = (double *)&v16[16 * v10];
    *(_DWORD *)v17 = a2;
    v17[1] = a3;
    v8 = v17 + 2;
    if (v7 == v9)
    {
      v18 = &v16[16 * v10];
    }
    else
    {
      do
      {
        v18 = (char *)(v17 - 2);
        *((_OWORD *)v17 - 1) = *((_OWORD *)v7 - 1);
        v7 -= 2;
        v17 -= 2;
      }
      while (v7 != v9);
    }
    v5[5] = v18;
    v5[6] = v8;
    v5[7] = &v16[v15];
    if (v9)
      operator delete(v9);
  }
  else
  {
    *(_DWORD *)v7 = a2;
    v7[1] = a3;
    v8 = v7 + 2;
  }
  v5[6] = v8;
}

void sub_19C40F850(uint64_t a1, CFStringRef theString)
{
  uint64_t Length;
  __int16 v5;
  unsigned __int16 v6;
  void *v7;
  char *v8;
  __int16 v9;
  unsigned __int16 v10;
  __int128 *v11;
  int v12;
  char v13;
  __int128 *v14;
  CFIndex maxBufLen;
  CFIndex usedBufLen;
  _BYTE buffer[6];
  char v18;
  __int128 *v19;
  __int128 v20;
  uint64_t v21;
  CFRange v22;
  CFRange v23;
  CFRange v24;

  v21 = *MEMORY[0x1E0C80C00];
  if (!theString)
    goto LABEL_20;
  Length = CFStringGetLength(theString);
  maxBufLen = 0;
  usedBufLen = 0;
  if (Length > 165)
  {
    v23.location = 0;
    v23.length = Length;
    if (Length != CFStringGetBytes(theString, v23, 0x8000100u, 0, 0, 0, 0, &maxBufLen))
      goto LABEL_20;
    v8 = (char *)malloc_type_malloc(maxBufLen + 1, 0xFC12D035uLL);
    if (!v8)
      goto LABEL_20;
    *(_WORD *)(a1 + 4) = 0;
    *(_DWORD *)a1 = 0x100000;
    *(_BYTE *)(a1 + 6) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_BYTE *)(a1 + 16) = 0;
    v24.location = 0;
    v24.length = Length;
    if (Length == CFStringGetBytes(theString, v24, 0x8000100u, 0, 0, (UInt8 *)v8, maxBufLen, &usedBufLen))
    {
      v8[usedBufLen] = 0;
      *(_WORD *)&buffer[4] = 0;
      *(_DWORD *)buffer = 0x100000;
      v18 = 1;
      v19 = 0;
      v9 = strlen(v8);
      v10 = v9;
      v20 = 0uLL;
      if (v9)
      {
        sub_19C40FB64((unsigned __int16 *)buffer, v9);
        if (*(unsigned __int16 *)&buffer[2] < v10)
          __assert_rtn("initialize", "LMTIString.cpp", 269, "len <= m_capacity");
        if (v19)
          v11 = v19;
        else
          v11 = &v20;
        memcpy(v11, v8, v10);
        v12 = *(_DWORD *)&buffer[2];
        v13 = v18;
        v14 = v19;
        *(_WORD *)a1 = v10;
        *(_DWORD *)(a1 + 2) = v12;
        *(_BYTE *)(a1 + 6) = v13;
        *(_QWORD *)(a1 + 8) = v14;
        if (!v14)
          *(_OWORD *)(a1 + 16) = v20;
        goto LABEL_25;
      }
      *(_WORD *)a1 = v9;
      *(_DWORD *)(a1 + 2) = 16;
      *(_BYTE *)(a1 + 6) = 1;
    }
    else
    {
      *(_WORD *)(a1 + 4) = 0;
      *(_DWORD *)a1 = 0x100000;
      *(_BYTE *)(a1 + 6) = 0;
    }
    *(_QWORD *)(a1 + 8) = 0;
    *(_BYTE *)(a1 + 16) = 0;
LABEL_25:
    free(v8);
    return;
  }
  v22.location = 0;
  v22.length = Length;
  if (Length != CFStringGetBytes(theString, v22, 0x8000100u, 0, 0, buffer, 1000, &usedBufLen))
  {
LABEL_20:
    *(_WORD *)(a1 + 4) = 0;
    *(_DWORD *)a1 = 0x100000;
    *(_BYTE *)(a1 + 6) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_BYTE *)(a1 + 16) = 0;
    return;
  }
  buffer[usedBufLen] = 0;
  *(_WORD *)(a1 + 4) = 0;
  *(_DWORD *)a1 = 0x100000;
  *(_BYTE *)(a1 + 6) = 1;
  *(_QWORD *)(a1 + 8) = 0;
  v5 = strlen(buffer);
  v6 = v5;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  if (v5)
  {
    sub_19C40FB64((unsigned __int16 *)a1, v5);
    if (*(unsigned __int16 *)(a1 + 2) < v6)
      __assert_rtn("initialize", "LMTIString.cpp", 269, "len <= m_capacity");
    if (*(_QWORD *)(a1 + 8))
      v7 = *(void **)(a1 + 8);
    else
      v7 = (void *)(a1 + 16);
    memcpy(v7, buffer, v6);
    *(_WORD *)a1 = v6;
  }
}

void sub_19C40FB64(unsigned __int16 *a1, __int16 a2)
{
  unsigned int v2;
  unsigned __int16 v3;
  const void *v5;
  size_t v6;
  void *v7;
  unsigned __int16 v8;
  void *v9;
  uint64_t v10;
  char *v11;
  void *v12;

  v2 = a1[1];
  if (v2 <= 0xF)
    __assert_rtn("ensure_capacity", "LMTIString.cpp", 303, "m_capacity >= InitialCapacity");
  v3 = a2 + 1;
  if (v2 <= (unsigned __int16)(a2 + 1))
  {
    if (!*((_BYTE *)a1 + 6))
    {
      *((_BYTE *)a1 + 6) = 1;
      v5 = (const void *)*((_QWORD *)a1 + 1);
      *((_QWORD *)a1 + 1) = 0;
      v6 = *a1;
      *((_QWORD *)a1 + 2) = 0;
      *((_QWORD *)a1 + 3) = 0;
      if (v5)
      {
        if ((_DWORD)v6)
        {
          sub_19C40FB64(a1, v6);
          if (a1[1] < v6)
            __assert_rtn("initialize", "LMTIString.cpp", 269, "len <= m_capacity");
          if (*((_QWORD *)a1 + 1))
            v7 = (void *)*((_QWORD *)a1 + 1);
          else
            v7 = a1 + 8;
          memcpy(v7, v5, v6);
          *a1 = v6;
          v2 = a1[1];
        }
      }
    }
    v8 = v2;
    if (v2 < v3)
    {
      v8 = v2;
      do
        v8 = 2 * v8 + 16;
      while ((v8 & 0xFFFEu) < v3);
      a1[1] = v8;
    }
    if (v8 >= 0x11u)
    {
      if (*((_BYTE *)a1 + 6) == 1 && (v9 = (void *)*((_QWORD *)a1 + 1)) != 0)
      {
        v10 = v2;
        v11 = (char *)malloc_type_realloc(v9, v8 + 1, 0xF65CB5B5uLL);
        *((_QWORD *)a1 + 1) = v11;
        bzero(&v11[v10], a1[1] - v10 + 1);
      }
      else
      {
        v12 = malloc_type_malloc(v8 + 1, 0x3EEE0C76uLL);
        *((_QWORD *)a1 + 1) = v12;
        bzero(v12, a1[1] + 1);
        if (*a1)
        {
          strlcpy(*((char **)a1 + 1), (const char *)a1 + 16, a1[1] + 1);
          *((_QWORD *)a1 + 2) = 0;
          *((_QWORD *)a1 + 3) = 0;
        }
      }
      if (*((_BYTE *)a1 + 6) != 1 || !*((_QWORD *)a1 + 1))
        __assert_rtn("ensure_capacity", "LMTIString.cpp", 329, "data_in_allocated_internal_buffer()");
    }
  }
}

void sub_19C40FD44(uint64_t a1, unsigned __int16 *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  unint64_t i;
  unint64_t v9;
  unsigned __int16 v10;
  unsigned __int16 v11;
  unsigned __int16 *v12;
  const char *v13;
  unsigned __int16 v14;
  unsigned __int16 v15;
  unsigned int v16;
  void *v17;
  __CFString *Mutable;
  __CFString *v19;
  const char *v20;
  _QWORD v21[2];

  v21[1] = *MEMORY[0x1E0C80C00];
  v4 = *a2;
  if (a2[2])
  {
    if (v4 == a2[2])
    {
LABEL_3:
      v5 = *a2;
      MEMORY[0x1E0C80A78]();
      v7 = (char *)v21 - v6;
      if (v5)
      {
        for (i = 0; i != v5; ++i)
        {
          v9 = *a2;
          v10 = v9 - 1;
          if (!*a2)
            v10 = 0;
          if (i >= v9)
            v11 = v10;
          else
            v11 = i;
          v12 = (unsigned __int16 *)*((_QWORD *)a2 + 1);
          if (!v12)
            v12 = a2 + 8;
          v7[i] = __tolower(*((char *)v12 + v11));
        }
      }
      v7[v5] = 0;
      if (*((_QWORD *)a2 + 1))
        v13 = (const char *)*((_QWORD *)a2 + 1);
      else
        v13 = (const char *)(a2 + 8);
      if (!strcmp(v13, v7))
      {
        sub_19C4100C4(a1, a2);
      }
      else
      {
        *(_WORD *)(a1 + 4) = 0;
        *(_DWORD *)a1 = 0x100000;
        *(_BYTE *)(a1 + 6) = 1;
        *(_QWORD *)(a1 + 8) = 0;
        v14 = strlen(v7);
        v15 = v14;
        *(_QWORD *)(a1 + 16) = 0;
        *(_QWORD *)(a1 + 24) = 0;
        if (v14)
        {
          v16 = v14;
          sub_19C40FB64((unsigned __int16 *)a1, v14);
          if (*(unsigned __int16 *)(a1 + 2) < v16)
            __assert_rtn("initialize", "LMTIString.cpp", 269, "len <= m_capacity");
          if (*(_QWORD *)(a1 + 8))
            v17 = *(void **)(a1 + 8);
          else
            v17 = (void *)(a1 + 16);
          memcpy(v17, v7, v15);
          *(_WORD *)a1 = v15;
        }
      }
      return;
    }
  }
  else
  {
    sub_19C40FF9C(a2);
    if (v4 == a2[2])
      goto LABEL_3;
  }
  Mutable = CFStringCreateMutable(0, 0);
  v19 = Mutable;
  if (*((_QWORD *)a2 + 1))
    v20 = (const char *)*((_QWORD *)a2 + 1);
  else
    v20 = (const char *)(a2 + 8);
  CFStringAppendCString(Mutable, v20, 0x8000100u);
  CFStringLowercase(v19, 0);
  sub_19C40F850(a1, v19);
  if (v19)
    CFRelease(v19);
}

void sub_19C40FF78(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 8);
  if (v3)
  {
    if (*(_BYTE *)(v1 + 6) == 1)
      free(v3);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int16 *sub_19C40FF9C(unsigned __int16 *result)
{
  unsigned int v1;
  int v2;
  __int16 v3;
  unsigned __int16 *v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  int v9;
  int v10;

  result[2] = 0;
  v1 = *result;
  if (*result)
  {
    v2 = 0;
    v3 = 0;
    v4 = (unsigned __int16 *)*((_QWORD *)result + 1);
    if (!v4)
      v4 = result + 8;
    do
    {
      v6 = (unsigned __int16)v2 + 1;
      if (v1 == (unsigned __int16)(v2 + 1))
        goto LABEL_7;
      v7 = *((unsigned __int8 *)v4 + (unsigned __int16)v2);
      if ((v7 + 11) < 0xCDu)
        goto LABEL_7;
      v8 = *((unsigned __int8 *)v4 + v6);
      if ((v7 & 0xF0) == 0xE0)
      {
        if (((a00000000000000[v7 & 0xF] >> (*((_BYTE *)v4 + v6) >> 5)) & 1) != 0)
        {
          LODWORD(v6) = v2 + 2;
          if (v1 == (unsigned __int16)(v2 + 2))
            goto LABEL_23;
          v9 = *((char *)v4 + (unsigned __int16)(v2 + 2));
          v10 = v2 + 3;
LABEL_14:
          if (v9 < -64)
            LODWORD(v6) = v10;
        }
      }
      else
      {
        if (v7 <= 0xDF)
        {
          v5 = v2 + 2;
          if ((char)v8 < -64)
            LODWORD(v6) = v5;
          goto LABEL_7;
        }
        if (((byte_19C477FF9[v8 >> 4] >> (v7 & 7)) & 1) != 0)
        {
          LODWORD(v6) = v2 + 2;
          if (v1 == (unsigned __int16)(v2 + 2))
            goto LABEL_23;
          if (*((char *)v4 + (unsigned __int16)(v2 + 2)) <= -65)
          {
            LODWORD(v6) = v2 + 3;
            if (v1 == (unsigned __int16)(v2 + 3))
            {
LABEL_23:
              result[2] = v3 + 1;
              return result;
            }
            v9 = *((char *)v4 + (unsigned __int16)(v2 + 3));
            v10 = v2 + 4;
            goto LABEL_14;
          }
        }
      }
LABEL_7:
      result[2] = ++v3;
      v2 = v6;
    }
    while (v1 > (unsigned __int16)v6);
  }
  return result;
}

uint64_t sub_19C4100C4(uint64_t a1, unsigned __int16 *a2)
{
  int v4;
  unsigned __int16 v5;
  const void *v6;
  size_t v7;
  void *v8;

  *(_WORD *)(a1 + 4) = 0;
  *(_DWORD *)a1 = 0x100000;
  v4 = *((unsigned __int8 *)a2 + 6);
  *(_BYTE *)(a1 + 6) = v4;
  *(_QWORD *)(a1 + 8) = 0;
  if (v4 == 1)
  {
    if (*((_QWORD *)a2 + 1))
      v6 = (const void *)*((_QWORD *)a2 + 1);
    else
      v6 = a2 + 8;
    v7 = *a2;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    if (v7)
    {
      sub_19C40FB64((unsigned __int16 *)a1, v7);
      if (*(unsigned __int16 *)(a1 + 2) < v7)
        __assert_rtn("initialize", "LMTIString.cpp", 269, "len <= m_capacity");
      if (*(_QWORD *)(a1 + 8))
        v8 = *(void **)(a1 + 8);
      else
        v8 = (void *)(a1 + 16);
      memcpy(v8, v6, v7);
      *(_WORD *)a1 = v7;
    }
  }
  else if (!v4)
  {
    *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
    *(_WORD *)a1 = *a2;
    v5 = a2[2];
    if (!v5)
    {
      sub_19C40FF9C(a2);
      v5 = a2[2];
    }
    *(_WORD *)(a1 + 4) = v5;
    *(_BYTE *)(a1 + 17) = 0;
  }
  return a1;
}

_QWORD *sub_19C4101B8(_QWORD *a1)
{
  void *v2;
  const void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v2 = (void *)a1[22];
  if (v2)
  {
    a1[23] = v2;
    operator delete(v2);
  }
  sub_19C361744(a1 + 5);
  v3 = (const void *)a1[3];
  if (v3)
    CFRelease(v3);
  a1[3] = 0;
  v4 = (std::__shared_weak_count *)a1[2];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return a1;
}

void sub_19C41023C(_QWORD *a1)
{
  void *v2;
  const void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v2 = (void *)a1[22];
  if (v2)
  {
    a1[23] = v2;
    operator delete(v2);
  }
  sub_19C361744(a1 + 5);
  v3 = (const void *)a1[3];
  if (v3)
    CFRelease(v3);
  a1[3] = 0;
  v4 = (std::__shared_weak_count *)a1[2];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  JUMPOUT(0x1A1AD355CLL);
}

void sub_19C4102D0(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, void **a4@<X3>, unint64_t *a5@<X8>)
{
  NSObject *v8;
  _QWORD *v9;
  char *v10;
  std::__shared_weak_count_vtbl *v11;
  std::__shared_weak_count *v12;
  BOOL v13;
  BOOL v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  char v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  int v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  std::__shared_weak_count_vtbl *v28;
  int64_t v29;
  char *v30;
  char *v31;
  const void *v32;
  int64_t v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  _BYTE *v41;
  char *v42;
  unint64_t v43;
  char *v44;
  int v45;
  uint64_t v46;
  _OWORD *v47;
  char *v48;
  uint64_t v49;
  __int128 v50;
  unsigned int *v51;
  __int128 *v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  float *v60;
  float *v61;
  void *v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count_vtbl *v67;
  int64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  char *v75;
  char *v76;
  _DWORD *v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  __int128 v84;
  int v85;
  float v86;
  float v87;
  uint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t *v92;
  unint64_t v93;
  int v94;
  void *v95;
  unint64_t v96;
  const void *v97;
  size_t v98;
  unint64_t *v100;
  unint64_t v101;
  const __CFString *v102;
  std::__shared_weak_count *v103;
  std::__shared_weak_count_vtbl *v104;
  _QWORD *v105;
  _QWORD *v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  float v110;
  float v111;
  float v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  std::__shared_weak_count_vtbl *v119;
  void *v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t *v125;
  unint64_t v126;
  __int128 v127;
  unint64_t v128;
  unint64_t v129;
  uint64_t v130;
  int v131;
  uint64_t v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  unint64_t *v136;
  unint64_t v137;
  uint64_t v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  unint64_t *v143;
  unint64_t v144;
  _QWORD *v145;
  _QWORD *v146;
  unint64_t *v147;
  unint64_t v148;
  uint64_t v149;
  const void *v150;
  int64_t v151;
  char *v152;
  std::__shared_weak_count_vtbl *v153;
  __int128 *v154;
  float *v155;
  char *v156;
  int64_t v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  unint64_t v161;
  _BYTE *v162;
  float *v163;
  unint64_t v164;
  char *v165;
  int v166;
  uint64_t v167;
  _OWORD *v168;
  __int128 *v169;
  uint64_t v170;
  __int128 v171;
  uint64_t v172;
  std::__shared_weak_count *v173;
  unint64_t *v174;
  unint64_t v175;
  unint64_t *v176;
  unint64_t v177;
  int v178;
  size_t v179;
  unint64_t v180;
  void *p_dst;
  uint64_t v182;
  uint64_t v183;
  __int128 *v184;
  float v185;
  void *v186;
  char *v187;
  char *v188;
  int64_t v189;
  unint64_t v190;
  char *v191;
  char *v192;
  __int128 v193;
  unint64_t v194;
  __int128 *v195;
  char *v197;
  char *v198;
  char *v199;
  void *v200;
  uint64_t v201;
  void *v202;
  _QWORD *v203;
  uint64_t v204;
  uint64_t v205;
  void *v206;
  NSObject *v207;
  void **v208;
  os_signpost_id_t spid;
  unint64_t v211;
  uint64_t *v212;
  uint64_t **v214;
  _QWORD *v215;
  _QWORD v216[3];
  _QWORD *v217;
  void *v218[3];
  void *v219;
  _QWORD *v220;
  _QWORD *v221;
  std::__shared_weak_count_vtbl *v222;
  void *v223[2];
  char v224;
  void *v225[2];
  uint64_t v226;
  __int128 v227;
  __int128 v228;
  void *v229[35];
  void *v230;
  unint64_t v231;
  char *v232;
  __int128 __dst;
  unint64_t v234;
  float v235;
  void *v236[23];
  void *__p;
  float *v238;
  char *v239;
  uint8_t buf[8];
  __int128 *v241;
  __int128 *v242;
  float v243;
  float v244;
  uint64_t v245;
  _QWORD v246[4];
  uint64_t v247;
  _BYTE *v248;
  _BYTE *v249;
  _QWORD *v250;
  _QWORD *v251;
  char *v252;
  char *v253;
  char *v254;
  char *v255;
  char *v256;
  std::__shared_weak_count_vtbl *v257;
  std::__shared_weak_count *v258;
  uint64_t v259;
  uint64_t v260;

  v260 = *MEMORY[0x1E0C80C00];
  if (qword_1EDB971E0 != -1)
    dispatch_once(&qword_1EDB971E0, &unk_1E3D3AC10);
  spid = os_signpost_id_generate((os_log_t)qword_1EDB971D8);
  if (qword_1EDB971E0 != -1)
    dispatch_once(&qword_1EDB971E0, &unk_1E3D3AC10);
  if (spid - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v8 = qword_1EDB971D8;
    if (os_signpost_enabled((os_log_t)qword_1EDB971D8))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_19C291000, v8, OS_SIGNPOST_INTERVAL_BEGIN, spid, "ToucanGenerateCompletions", (const char *)&unk_19C47C5B5, buf, 2u);
    }
  }
  if (*(_QWORD *)a2 == *(_QWORD *)(a2 + 8))
    __assert_rtn("generateCompletions", "SingleWordBeamSearchPredictor.cpp", 199, "!stems.empty()");
  v9 = (_QWORD *)operator new();
  v9[1] = 6;
  v9[2] = 0;
  v9[3] = 0;
  v9[4] = 0;
  v10 = (char *)operator new(0x720uLL);
  v9[2] = v10;
  v9[3] = v10;
  v9[4] = v10 + 1824;
  v217 = v9;
  sub_19C319804(*(_QWORD **)(a1 + 72), (uint64_t *)buf);
  v11 = *(std::__shared_weak_count_vtbl **)buf;
  v216[0] = *(_QWORD *)buf;
  if (*(_QWORD *)buf)
  {
    v12 = (std::__shared_weak_count *)operator new();
    v12->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D39C88;
    v12->__shared_owners_ = 0;
    v12->__shared_weak_owners_ = 0;
    v12[1].__vftable = v11;
  }
  else
  {
    v12 = 0;
  }
  v216[1] = v12;
  v216[2] = 0;
  v214 = (uint64_t **)(a1 + 40);
  v13 = sub_19C3E85F0(a1 + 40, v9, *(_QWORD **)a2, *(_QWORD **)(a2 + 8), (uint64_t)a4, v216);
  v14 = v13;
  if (!v12)
    goto LABEL_16;
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v16 = __ldaxr(p_shared_owners);
  while (__stlxr(v16 - 1, p_shared_owners));
  if (v16)
  {
LABEL_16:
    if (v13)
      goto LABEL_17;
LABEL_337:
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    goto LABEL_353;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  if (!v14)
    goto LABEL_337;
LABEL_17:
  v17 = (_QWORD *)operator new();
  v17[2] = 0;
  v17[1] = a3;
  v17[3] = 0;
  v17[4] = 0;
  v208 = (void **)(v17 + 2);
  if (!a3)
    __assert_rtn("PriorityQueue", "PriorityQueue.hpp", 21, "m_maxPredictionCount > 0");
  v211 = a3;
  sub_19C35D178((uint64_t)(v17 + 2), a3);
  v215 = v17;
  v212 = (uint64_t *)(a1 + 176);
  v18 = v217;
LABEL_22:
  if (sub_19C3E8478(v18[2], v18[3], v17))
  {
    if ((unint64_t)*a4 < 0xD)
      goto LABEL_33;
    v20 = *(_QWORD *)(a1 + 56);
    v21 = *(std::__shared_weak_count **)(a1 + 64);
    *(_QWORD *)buf = v20;
    v241 = (__int128 *)v21;
    if (v21)
    {
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 112))(v20);
    if (v21)
    {
      v25 = (unint64_t *)&v21->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    if (v24 != 1)
    {
LABEL_33:
      v27 = v18[3];
      if (v18[2] == v27)
        __assert_rtn("best", "PriorityQueue.h", 46, "!m_predictions.empty()");
      sub_19C35CA40((uint64_t)buf, v27 - 304);
      __dst = 0uLL;
      v234 = 0;
      v28 = *(std::__shared_weak_count_vtbl **)buf;
      v29 = (int64_t)v241 - *(_QWORD *)buf;
      if (v241 == *(__int128 **)buf)
      {
        v30 = 0;
        v31 = 0;
      }
      else
      {
        if (v29 < 0)
          sub_19C2A18E8();
        v30 = (char *)operator new((size_t)v241 - *(_QWORD *)buf);
        v31 = &v30[4 * (v29 >> 2)];
        *(_QWORD *)&__dst = v30;
        v234 = (unint64_t)v31;
        memcpy(v30, v28, v29);
        *((_QWORD *)&__dst + 1) = v31;
      }
      v18[3] = sub_19C35CBE8(v18[3] - 304);
      if ((unint64_t)(v31 - v30) > 0x24)
      {
        v19 = 0;
        if (!v30)
          goto LABEL_21;
        goto LABEL_20;
      }
      if (v243 < -20.0)
      {
        v19 = 1;
        if (!v30)
          goto LABEL_21;
        goto LABEL_20;
      }
      v32 = v248;
      v253 = 0;
      v254 = 0;
      v252 = 0;
      v33 = v249 - v248;
      if (v249 == v248)
      {
        v34 = 0;
      }
      else
      {
        if (v33 < 0)
          sub_19C2A18E8();
        v252 = (char *)operator new(v249 - v248);
        v253 = v252;
        v34 = &v252[4 * (v33 >> 2)];
        v254 = v34;
        memmove(v252, v32, v33);
        v253 = v34;
      }
      while (1)
      {
        if (v30 == v31)
        {
          v51 = *(unsigned int **)buf;
          v52 = v241;
          if (*(__int128 **)buf == v241)
          {
            v57 = 1;
            v17 = v215;
          }
          else
          {
            v17 = v215;
            if ((__int128 *)((char *)v241 - *(_QWORD *)buf) == (__int128 *)4)
            {
              v53 = *(_QWORD *)(a1 + 40);
              v54 = *(std::__shared_weak_count **)(a1 + 48);
              *(_QWORD *)&v227 = v53;
              *((_QWORD *)&v227 + 1) = v54;
              if (v54)
              {
                v55 = (unint64_t *)&v54->__shared_owners_;
                do
                  v56 = __ldxr(v55);
                while (__stxr(v56 + 1, v55));
                v52 = v241;
              }
              if (v52 == (__int128 *)v51)
                sub_19C30F73C();
              v57 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v53 + 104))(v53, *v51);
              if (v54)
              {
                v58 = (unint64_t *)&v54->__shared_owners_;
                do
                  v59 = __ldaxr(v58);
                while (__stlxr(v59 - 1, v58));
                if (!v59)
                {
                  ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
                  std::__shared_weak_count::__release_weak(v54);
                }
              }
            }
            else
            {
              v57 = 0;
            }
          }
          v227 = 0u;
          v228 = 0u;
          LODWORD(v229[0]) = 1065353216;
          sub_19C3E73BC(&__p, v214, v212, (uint64_t)&v252, (uint64_t)&v245, v57, v211, (uint64_t)a4, &v227);
          v60 = (float *)__p;
          v61 = v238;
          if (__p == v238)
          {
            if (!__p)
              goto LABEL_93;
            goto LABEL_92;
          }
LABEL_101:
          if ((*(unsigned int (**)(_QWORD, float *, uint64_t))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), v60, v57))
          {
            v63 = *(_QWORD *)(a1 + 40);
            v64 = *(std::__shared_weak_count **)(a1 + 48);
            *(_QWORD *)&v227 = v63;
            *((_QWORD *)&v227 + 1) = v64;
            if (v64)
            {
              v65 = (unint64_t *)&v64->__shared_owners_;
              do
                v66 = __ldxr(v65);
              while (__stxr(v66 + 1, v65));
            }
            if (((*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v63 + 160))(v63, *(unsigned int *)v60) & 1) != 0
              || (*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)v63 + 112))(v63, *(unsigned int *)v60))
            {
              HIBYTE(v232) = 0;
              LOBYTE(v230) = 0;
            }
            else
            {
              (*(void (**)(void **__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v63 + 40))(&v230, v63, *(unsigned int *)v60);
            }
            if (!v64)
              goto LABEL_142;
            v92 = (unint64_t *)&v64->__shared_owners_;
            do
              v93 = __ldaxr(v92);
            while (__stlxr(v93 - 1, v92));
            if (v93)
            {
LABEL_142:
              if ((_DWORD)v57)
                goto LABEL_143;
              goto LABEL_193;
            }
            ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
            std::__shared_weak_count::__release_weak(v64);
            if (!(_DWORD)v57)
              goto LABEL_193;
LABEL_143:
            v94 = SHIBYTE(v232);
            v95 = v230;
            if (SHIBYTE(v232) >= 0)
              v96 = HIBYTE(v232);
            else
              v96 = v231;
            if (SHIBYTE(v232) >= 0)
              v97 = &v230;
            else
              v97 = v230;
            if (v96 >= 2)
              v98 = 2;
            else
              v98 = v96;
            if (memcmp(v97, "'s", v98) || v96 != 2)
            {
LABEL_193:
              (*(void (**)(__int128 *__return_ptr, _QWORD, uint8_t *, float *, void **))(**(_QWORD **)(a1 + 8)
                                                                                                  + 24))(&v227, *(_QWORD *)(a1 + 8), buf, v60, &v230);
              v120 = *(void **)(a1 + 40);
              v121 = *(std::__shared_weak_count **)(a1 + 48);
              v223[0] = v120;
              v223[1] = v121;
              if (v121)
              {
                v122 = (unint64_t *)&v121->__shared_owners_;
                do
                  v123 = __ldxr(v122);
                while (__stxr(v123 + 1, v122));
              }
              (*(void (**)(void **__return_ptr, void *, _QWORD, uint64_t))(*(_QWORD *)v120 + 32))(v225, v120, v227, (uint64_t)(*((_QWORD *)&v227 + 1) - v227) >> 2);
              v124 = sub_19C3E8528((uint64_t)v225);
              if (SHIBYTE(v226) < 0)
              {
                operator delete(v225[0]);
                if (!v121)
                  goto LABEL_204;
              }
              else if (!v121)
              {
                goto LABEL_204;
              }
              v125 = (unint64_t *)&v121->__shared_owners_;
              do
                v126 = __ldaxr(v125);
              while (__stlxr(v126 - 1, v125));
              if (!v126)
              {
                ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
                std::__shared_weak_count::__release_weak(v121);
              }
LABEL_204:
              if (v246[3] == v247)
              {
                HIBYTE(v226) = 0;
                LOBYTE(v225[0]) = 0;
              }
              else if (*(char *)(v247 - 9) < 0)
              {
                sub_19C2B5238(v225, *(void **)(v247 - 32), *(_QWORD *)(v247 - 24));
              }
              else
              {
                v127 = *(_OWORD *)(v247 - 32);
                v226 = *(_QWORD *)(v247 - 16);
                *(_OWORD *)v225 = v127;
              }
              v128 = sub_19C3E8528((uint64_t)v225);
              v129 = v128;
              if (SHIBYTE(v226) < 0)
              {
                operator delete(v225[0]);
                if (v124 < v129)
                  goto LABEL_214;
              }
              else if (v124 < v128)
              {
LABEL_214:
                sub_19C35CBE8((uint64_t)&v227);
                if (SHIBYTE(v232) < 0)
                {
                  v62 = v230;
LABEL_99:
                  operator delete(v62);
                }
                goto LABEL_100;
              }
              sub_19C35E950(v17, (uint64_t)&v227);
              goto LABEL_214;
            }
            if (v94 < 0)
            {
              v62 = v95;
              goto LABEL_99;
            }
LABEL_100:
            v60 += 2;
            if (v60 == v61)
            {
              v60 = (float *)__p;
              if (!__p)
              {
LABEL_93:
                if (v252)
                {
                  v253 = v252;
                  operator delete(v252);
                }
                v19 = 0;
                v30 = (char *)__dst;
                if (!(_QWORD)__dst)
                {
LABEL_21:
                  sub_19C35CBE8((uint64_t)buf);
                  if ((v19 & 1) == 0)
                    goto LABEL_22;
                  break;
                }
LABEL_20:
                *((_QWORD *)&__dst + 1) = v30;
                operator delete(v30);
                goto LABEL_21;
              }
LABEL_92:
              operator delete(v60);
              goto LABEL_93;
            }
            goto LABEL_101;
          }
          v231 = 0;
          v230 = 0;
          v232 = 0;
          v67 = *(std::__shared_weak_count_vtbl **)buf;
          v68 = (int64_t)v241 - *(_QWORD *)buf;
          if (v241 == *(__int128 **)buf)
          {
            v69 = 0;
            v70 = 0;
          }
          else
          {
            if (v68 < 0)
              sub_19C2A18E8();
            v69 = (char *)operator new((size_t)v241 - *(_QWORD *)buf);
            v230 = v69;
            v231 = (unint64_t)v69;
            v70 = &v69[4 * (v68 >> 2)];
            v232 = v70;
            memcpy(v69, v67, v68);
            v231 = (unint64_t)v70;
          }
          v71 = v70 - v69;
          v72 = (v70 - v69) >> 2;
          v73 = v72 + 1;
          if ((unint64_t)(v72 + 1) >> 62)
            sub_19C2A18E8();
          if (v71 >> 1 > v73)
            v73 = v71 >> 1;
          if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFFCLL)
            v74 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v74 = v73;
          if (v74)
          {
            if (v74 >> 62)
              sub_19C2A143C();
            v75 = (char *)operator new(4 * v74);
          }
          else
          {
            v75 = 0;
          }
          v76 = &v75[4 * v72];
          *(float *)v76 = *v60;
          v77 = v76 + 4;
          if (v70 != v69)
          {
            v78 = v70 - v69 - 4;
            if (v78 < 0x1C)
            {
              v79 = v70;
              goto LABEL_128;
            }
            v80 = (v78 >> 2) + 1;
            v79 = &v70[-4 * (v80 & 0x7FFFFFFFFFFFFFF8)];
            v81 = &v75[4 * v72 - 16];
            v82 = v70 - 16;
            v83 = v80 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v84 = *(_OWORD *)v82;
              *((_OWORD *)v81 - 1) = *((_OWORD *)v82 - 1);
              *(_OWORD *)v81 = v84;
              v81 -= 32;
              v82 -= 32;
              v83 -= 8;
            }
            while (v83);
            v76 -= 4 * (v80 & 0x7FFFFFFFFFFFFFF8);
            if (v80 != (v80 & 0x7FFFFFFFFFFFFFF8))
            {
              do
              {
LABEL_128:
                v85 = *((_DWORD *)v79 - 1);
                v79 -= 4;
                *((_DWORD *)v76 - 1) = v85;
                v76 -= 4;
              }
              while (v79 != v69);
            }
          }
          v230 = v76;
          v231 = (unint64_t)v77;
          v232 = &v75[4 * v74];
          if (v69)
            operator delete(v69);
          v231 = (unint64_t)v77;
          v86 = v243;
          v87 = log10f(v60[1]);
          sub_19C3E80A0((uint64_t)v225, v214, (unsigned int *)v60, (uint64_t)buf);
          v88 = *(_QWORD *)(a1 + 40);
          v89 = *(std::__shared_weak_count **)(a1 + 48);
          *(_QWORD *)&v227 = v88;
          *((_QWORD *)&v227 + 1) = v89;
          v17 = v215;
          if (v89)
          {
            v90 = (unint64_t *)&v89->__shared_owners_;
            do
              v91 = __ldxr(v90);
            while (__stxr(v91 + 1, v90));
          }
          if (((*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v88 + 160))(v88, *(unsigned int *)v60) & 1) != 0
            || (*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)v88 + 112))(v88, *(unsigned int *)v60))
          {
            v224 = 0;
            LOBYTE(v223[0]) = 0;
          }
          else
          {
            (*(void (**)(void **__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v88 + 40))(v223, v88, *(unsigned int *)v60);
          }
          if (v89)
          {
            v100 = (unint64_t *)&v89->__shared_owners_;
            do
              v101 = __ldaxr(v100);
            while (__stlxr(v101 - 1, v100));
            if (!v101)
            {
              ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
              std::__shared_weak_count::__release_weak(v89);
            }
          }
          (*(void (**)(std::__shared_weak_count_vtbl **__return_ptr, _QWORD, void **))(*(_QWORD *)*v250 + 24))(&v222, *v250, v223);
          v102 = (const __CFString *)MEMORY[0x1A1AD2A04](*(_QWORD *)(a1 + 24));
          if (CFStringCompare(v102, CFSTR("zh-Hans"), 0) == kCFCompareEqualTo
            || (*((unsigned int (**)(std::__shared_weak_count_vtbl *))v222->~__shared_weak_count + 2))(v222))
          {
            v257 = v222;
            if (v222)
            {
              v103 = (std::__shared_weak_count *)operator new();
              v104 = v222;
              v103->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D39C88;
              v103->__shared_owners_ = 0;
              v103->__shared_weak_owners_ = 0;
              v103[1].__vftable = v104;
            }
            else
            {
              v103 = 0;
            }
            v221 = 0;
            v222 = 0;
            v258 = v103;
            v259 = 0;
            v219 = 0;
            v220 = 0;
            v105 = operator new(0x18uLL);
            v106 = v105;
            v219 = v105;
            v221 = v105 + 3;
            v107 = v258;
            *v105 = v257;
            v105[1] = v107;
            if (v107)
            {
              v108 = (unint64_t *)&v107->__shared_owners_;
              do
                v109 = __ldxr(v108);
              while (__stxr(v109 + 1, v108));
            }
            v110 = v87 + v86;
            v105[2] = v259;
            v220 = v105 + 3;
            v111 = v244;
            v112 = log10f(v60[1]);
            memset(v218, 0, sizeof(v218));
            sub_19C3A9F98((uint64_t)&v227, (uint64_t)&v230, (__int128 *)v225, (uint64_t)v246, (uint64_t)&v219, 0, 1, (uint64_t)v218, v110, v112 + v111);
            v113 = (std::__shared_weak_count *)v106[1];
            if (v113)
            {
              v114 = (unint64_t *)&v113->__shared_owners_;
              do
                v115 = __ldaxr(v114);
              while (__stlxr(v115 - 1, v114));
              if (!v115)
              {
                ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
                std::__shared_weak_count::__release_weak(v113);
              }
            }
            v220 = v106;
            operator delete(v219);
            v116 = v258;
            if (v258)
            {
              v117 = (unint64_t *)&v258->__shared_owners_;
              do
                v118 = __ldaxr(v117);
              while (__stlxr(v118 - 1, v117));
              if (!v118)
              {
                ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
                std::__shared_weak_count::__release_weak(v116);
              }
            }
            sub_19C35E950(v18, (uint64_t)&v227);
            sub_19C35CBE8((uint64_t)&v227);
          }
          v119 = v222;
          v222 = 0;
          if (v119)
            (*((void (**)(std::__shared_weak_count_vtbl *))v119->~__shared_weak_count + 1))(v119);
          if (v224 < 0)
          {
            operator delete(v223[0]);
            if ((SHIBYTE(v226) & 0x80000000) == 0)
              goto LABEL_190;
LABEL_97:
            operator delete(v225[0]);
            v62 = v230;
            if (!v230)
              goto LABEL_100;
          }
          else
          {
            if (SHIBYTE(v226) < 0)
              goto LABEL_97;
LABEL_190:
            v62 = v230;
            if (!v230)
              goto LABEL_100;
          }
          v231 = (unint64_t)v62;
          goto LABEL_99;
        }
        if (v34 < v254)
        {
          *(_DWORD *)v34 = *(_DWORD *)v30;
          v35 = v34 + 4;
          goto LABEL_47;
        }
        v36 = v252;
        v37 = (v34 - v252) >> 2;
        v38 = v37 + 1;
        if ((unint64_t)(v37 + 1) >> 62)
          sub_19C2A18E8();
        v39 = v254 - v252;
        if ((v254 - v252) >> 1 > v38)
          v38 = v39 >> 1;
        if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFFCLL)
          v40 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v40 = v38;
        if (v40)
        {
          if (v40 >> 62)
            sub_19C2A143C();
          v41 = operator new(4 * v40);
        }
        else
        {
          v41 = 0;
        }
        v42 = &v41[4 * v37];
        *(_DWORD *)v42 = *(_DWORD *)v30;
        v35 = v42 + 4;
        if (v34 != v36)
        {
          v43 = v34 - 4 - v36;
          if (v43 < 0xBC)
          {
            v44 = v34;
            goto LABEL_63;
          }
          if (&v41[v34 - v36 - 4 - (v43 & 0xFFFFFFFFFFFFFFFCLL)] > &v41[v34 - v36 - 4])
          {
            v44 = v34;
            do
            {
LABEL_63:
              v45 = *((_DWORD *)v44 - 1);
              v44 -= 4;
              *((_DWORD *)v42 - 1) = v45;
              v42 -= 4;
            }
            while (v44 != v36);
            goto LABEL_64;
          }
          if (&v34[-(v43 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v34 - 4)
          {
            v44 = v34;
            goto LABEL_63;
          }
          if ((unint64_t)(v36 - v41) < 0x20)
          {
            v44 = v34;
            goto LABEL_63;
          }
          v46 = (v43 >> 2) + 1;
          v44 = &v34[-4 * (v46 & 0x7FFFFFFFFFFFFFF8)];
          v47 = &v41[4 * v37 - 16];
          v48 = v34 - 16;
          v49 = v46 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v50 = *(_OWORD *)v48;
            *(v47 - 1) = *((_OWORD *)v48 - 1);
            *v47 = v50;
            v47 -= 2;
            v48 -= 32;
            v49 -= 8;
          }
          while (v49);
          v42 -= 4 * (v46 & 0x7FFFFFFFFFFFFFF8);
          if (v46 != (v46 & 0x7FFFFFFFFFFFFFF8))
            goto LABEL_63;
        }
LABEL_64:
        v252 = v42;
        v253 = v35;
        v254 = &v41[4 * v40];
        if (v36)
          operator delete(v36);
LABEL_47:
        v253 = v35;
        v30 += 4;
        v34 = v35;
      }
    }
  }
  v230 = *a4;
  v253 = (char *)v211;
  v254 = 0;
  v255 = 0;
  v256 = 0;
  if (v211 > 0x12F684BDA12F684)
    sub_19C2A18E8();
  v254 = (char *)operator new(216 * v211);
  v255 = v254;
  v256 = &v254[216 * v211];
  v130 = v17[3];
  if (v17[2] == v130)
  {
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    goto LABEL_339;
  }
  v131 = 0;
  while (2)
  {
    sub_19C35CA40((uint64_t)buf, v130 - 304);
    v17[3] = sub_19C35CBE8(v17[3] - 304);
    v132 = *(_QWORD *)(a1 + 40);
    v133 = *(std::__shared_weak_count **)(a1 + 48);
    *(_QWORD *)&__dst = v132;
    *((_QWORD *)&__dst + 1) = v133;
    if (v133)
    {
      v134 = (unint64_t *)&v133->__shared_owners_;
      do
        v135 = __ldxr(v134);
      while (__stxr(v135 + 1, v134));
    }
    (*(void (**)(__int128 *__return_ptr, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v132 + 32))(&v227, v132, *(_QWORD *)buf, ((uint64_t)v241 - *(_QWORD *)buf) >> 2);
    *((float *)&v228 + 2) = v243;
    sub_19C2E1F84((uint64_t)v229, (uint64_t)v246);
    if (v133)
    {
      v136 = (unint64_t *)&v133->__shared_owners_;
      do
        v137 = __ldaxr(v136);
      while (__stlxr(v137 - 1, v136));
      if (!v137)
      {
        ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
        std::__shared_weak_count::__release_weak(v133);
      }
    }
    sub_19C411FA0(&v252, &v227);
    if (0xAAAAAAAAAAAAAAABLL * (v251 - v250) >= 2)
      __assert_rtn("_extractPredictionsFromQueue", "SingleWordBeamSearchPredictor.cpp", 136, "hypothesis.cursors().size() <= 1");
    v138 = *(_QWORD *)(a1 + 40);
    v139 = *(std::__shared_weak_count **)(a1 + 48);
    *(_QWORD *)&__dst = v138;
    *((_QWORD *)&__dst + 1) = v139;
    if (v139)
    {
      v140 = (unint64_t *)&v139->__shared_owners_;
      do
        v141 = __ldxr(v140);
      while (__stxr(v141 + 1, v140));
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v138 + 176))(v138) != 2 || v131 != 0)
    {
      if (v139)
      {
        v143 = (unint64_t *)&v139->__shared_owners_;
        do
          v144 = __ldaxr(v143);
        while (__stlxr(v144 - 1, v143));
        if (!v144)
        {
          ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
          std::__shared_weak_count::__release_weak(v139);
        }
      }
      goto LABEL_320;
    }
    v145 = v250;
    v146 = v251;
    if (!v139)
      goto LABEL_247;
    v147 = (unint64_t *)&v139->__shared_owners_;
    do
      v148 = __ldaxr(v147);
    while (__stlxr(v148 - 1, v147));
    if (!v148)
    {
      ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
      std::__shared_weak_count::__release_weak(v139);
      if (v145 == v146)
      {
LABEL_256:
        v131 = 0;
        goto LABEL_320;
      }
    }
    else
    {
LABEL_247:
      if (v145 == v146)
        goto LABEL_256;
    }
    if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v250 + 16))(*v250) & 1) == 0)
      goto LABEL_256;
    v149 = *v250;
    HIBYTE(v234) = 2;
    strcpy((char *)&__dst, "'s");
    (*(void (**)(void **__return_ptr, uint64_t, __int128 *))(*(_QWORD *)v149 + 24))(v225, v149, &__dst);
    if (SHIBYTE(v234) < 0)
      operator delete((void *)__dst);
    if (((*(uint64_t (**)(void *))(*(_QWORD *)v225[0] + 16))(v225[0]) & 1) == 0)
    {
      v131 = 0;
      goto LABEL_318;
    }
    v150 = v248;
    v239 = 0;
    __p = 0;
    v238 = 0;
    v151 = v249 - v248;
    if (v249 == v248)
    {
      v152 = 0;
    }
    else
    {
      if (v151 < 0)
        sub_19C2A18E8();
      __p = operator new(v249 - v248);
      v238 = (float *)__p;
      v152 = (char *)__p + 4 * (v151 >> 2);
      v239 = v152;
      memmove(__p, v150, v151);
      v238 = (float *)v152;
    }
    v153 = *(std::__shared_weak_count_vtbl **)buf;
    v154 = v241;
    while (v153 != (std::__shared_weak_count_vtbl *)v154)
    {
      if (v152 < v239)
      {
        *(_DWORD *)v152 = v153->~__shared_weak_count;
        v155 = (float *)(v152 + 4);
        goto LABEL_261;
      }
      v156 = (char *)__p;
      v157 = v152 - (_BYTE *)__p;
      v158 = (v152 - (_BYTE *)__p) >> 2;
      v159 = v158 + 1;
      if ((unint64_t)(v158 + 1) >> 62)
        sub_19C2A18E8();
      v160 = v239 - (_BYTE *)__p;
      if ((v239 - (_BYTE *)__p) >> 1 > v159)
        v159 = v160 >> 1;
      if ((unint64_t)v160 >= 0x7FFFFFFFFFFFFFFCLL)
        v161 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v161 = v159;
      if (v161)
      {
        if (v161 >> 62)
          sub_19C2A143C();
        v162 = operator new(4 * v161);
      }
      else
      {
        v162 = 0;
      }
      v163 = (float *)&v162[4 * v158];
      *v163 = *(float *)&v153->~__shared_weak_count;
      v155 = v163 + 1;
      if (v152 != v156)
      {
        v164 = v152 - 4 - v156;
        if (v164 < 0xBC)
        {
          v165 = v152;
          goto LABEL_277;
        }
        if (&v162[v157 - 4 - (v164 & 0xFFFFFFFFFFFFFFFCLL)] > &v162[v157 - 4])
        {
          v165 = v152;
          do
          {
LABEL_277:
            v166 = *((_DWORD *)v165 - 1);
            v165 -= 4;
            *((_DWORD *)v163-- - 1) = v166;
          }
          while (v165 != v156);
          goto LABEL_278;
        }
        if (&v152[-(v164 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v152 - 4)
        {
          v165 = v152;
          goto LABEL_277;
        }
        if ((unint64_t)(v152 - v162 - v157) < 0x20)
        {
          v165 = v152;
          goto LABEL_277;
        }
        v167 = (v164 >> 2) + 1;
        v165 = &v152[-4 * (v167 & 0x7FFFFFFFFFFFFFF8)];
        v168 = &v162[4 * v158 - 16];
        v169 = (__int128 *)(v152 - 16);
        v170 = v167 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v171 = *v169;
          *(v168 - 1) = *(v169 - 1);
          *v168 = v171;
          v168 -= 2;
          v169 -= 2;
          v170 -= 8;
        }
        while (v170);
        v163 -= v167 & 0x7FFFFFFFFFFFFFF8;
        if (v167 != (v167 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_277;
      }
LABEL_278:
      __p = v163;
      v238 = v155;
      v239 = &v162[4 * v161];
      if (v156)
        operator delete(v156);
LABEL_261:
      v238 = v155;
      v153 = (std::__shared_weak_count_vtbl *)((char *)v153 + 4);
      v152 = (char *)v155;
    }
    v172 = *(_QWORD *)(a1 + 56);
    v173 = *(std::__shared_weak_count **)(a1 + 64);
    *(_QWORD *)&__dst = v172;
    *((_QWORD *)&__dst + 1) = v173;
    if (v173)
    {
      v174 = (unint64_t *)&v173->__shared_owners_;
      do
        v175 = __ldxr(v174);
      while (__stxr(v175 + 1, v174));
    }
    (*(void (**)(uint64_t, void **, uint64_t *, void **))(*(_QWORD *)v172 + 48))(v172, &__p, v212, &v230);
    if (v173)
    {
      v176 = (unint64_t *)&v173->__shared_owners_;
      do
        v177 = __ldaxr(v176);
      while (__stlxr(v177 - 1, v176));
      if (!v177)
      {
        ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
        std::__shared_weak_count::__release_weak(v173);
      }
    }
    v178 = SBYTE7(v228);
    if ((SBYTE7(v228) & 0x80u) == 0)
      v179 = BYTE7(v228);
    else
      v179 = *((_QWORD *)&v227 + 1);
    v180 = v179 + 2;
    if (v179 + 2 >= 0x7FFFFFFFFFFFFFF8)
      sub_19C2A1A54();
    if (v180 >= 0x17)
    {
      v182 = (v180 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v180 | 7) != 0x17)
        v182 = v180 | 7;
      v183 = v182 + 1;
      p_dst = operator new(v182 + 1);
      v234 = v183 | 0x8000000000000000;
      *(_QWORD *)&__dst = p_dst;
      *((_QWORD *)&__dst + 1) = v179 + 2;
      v17 = v215;
    }
    else
    {
      v234 = 0;
      __dst = 0uLL;
      p_dst = &__dst;
      HIBYTE(v234) = v179 + 2;
      v17 = v215;
      if (!v179)
        goto LABEL_312;
    }
    if (v178 >= 0)
      v184 = &v227;
    else
      v184 = (__int128 *)v227;
    memmove(p_dst, v184, v179);
LABEL_312:
    strcpy((char *)p_dst + v179, "'s");
    if (!*(_BYTE *)(a1 + 36))
      sub_19C30F5A0();
    v185 = *((float *)&v228 + 2);
    v235 = log10f(*(float *)(*(_QWORD *)(a1 + 176) + 4 * *(int *)(a1 + 32))) + v185;
    sub_19C2E1F84((uint64_t)v236, (uint64_t)v229);
    sub_19C411FA0(&v252, &__dst);
    sub_19C2E25C8(v236);
    if (SHIBYTE(v234) < 0)
      operator delete((void *)__dst);
    if (__p)
    {
      v238 = (float *)__p;
      operator delete(__p);
    }
    v131 = 1;
LABEL_318:
    v186 = v225[0];
    v225[0] = 0;
    if (v186)
      (*(void (**)(void *))(*(_QWORD *)v186 + 8))(v186);
LABEL_320:
    sub_19C2E25C8(v229);
    if (SBYTE7(v228) < 0)
      operator delete((void *)v227);
    sub_19C35CBE8((uint64_t)buf);
    v130 = v17[3];
    if (v17[2] != v130)
      continue;
    break;
  }
  v187 = v254;
  v188 = v255;
  a5[2] = 0;
  *a5 = 0;
  a5[1] = 0;
  v189 = v188 - v187;
  if (v188 != v187)
  {
    v190 = 0x84BDA12F684BDA13 * (v189 >> 3);
    if (v190 > 0x12F684BDA12F684)
      sub_19C2A18E8();
    v191 = (char *)operator new(v189);
    *a5 = (unint64_t)v191;
    a5[1] = (unint64_t)v191;
    a5[2] = (unint64_t)&v191[216 * v190];
    *(_QWORD *)&v227 = v191;
    *(_QWORD *)&__dst = v191;
    *(_QWORD *)buf = a5 + 2;
    v241 = &__dst;
    v242 = &v227;
    LOBYTE(v243) = 0;
    v192 = v191;
    do
    {
      if (v187[23] < 0)
      {
        sub_19C2B5238(v192, *(void **)v187, *((_QWORD *)v187 + 1));
      }
      else
      {
        v193 = *(_OWORD *)v187;
        *((_QWORD *)v192 + 2) = *((_QWORD *)v187 + 2);
        *(_OWORD *)v192 = v193;
      }
      *((_DWORD *)v192 + 6) = *((_DWORD *)v187 + 6);
      sub_19C2E1F84((uint64_t)(v192 + 32), (uint64_t)(v187 + 32));
      v187 += 216;
      v192 = (char *)(v227 + 216);
      *(_QWORD *)&v227 = v227 + 216;
    }
    while (v187 != v188);
    v194 = *a5;
    a5[1] = (unint64_t)v192;
    v195 = (__int128 *)(v192 - 216);
    if ((char *)v194 != v192 && (unint64_t)v195 > v194)
    {
      do
      {
        sub_19C4129EC(v194, v195);
        v194 += 216;
        v195 = (__int128 *)((char *)v195 - 216);
      }
      while (v194 < (unint64_t)v195);
    }
  }
LABEL_339:
  v197 = v254;
  if (v254)
  {
    v198 = v255;
    v199 = v254;
    if (v255 != v254)
    {
      do
      {
        sub_19C2E25C8((void **)v198 - 23);
        if (*(v198 - 193) < 0)
          operator delete(*((void **)v198 - 27));
        v198 -= 216;
      }
      while (v198 != v197);
      v199 = v254;
    }
    v255 = v197;
    operator delete(v199);
  }
  v200 = *v208;
  if (*v208)
  {
    v201 = v17[3];
    v202 = *v208;
    if ((void *)v201 != v200)
    {
      do
        v201 = sub_19C35CBE8(v201 - 304);
      while ((void *)v201 != v200);
      v202 = *v208;
    }
    v17[3] = v200;
    operator delete(v202);
  }
  MEMORY[0x1A1AD355C](v17, 0x1020C402564D6C4);
LABEL_353:
  v203 = v217;
  v217 = 0;
  if (v203)
  {
    v204 = v203[2];
    if (v204)
    {
      v205 = v203[3];
      v206 = (void *)v203[2];
      if (v205 != v204)
      {
        do
          v205 = sub_19C35CBE8(v205 - 304);
        while (v205 != v204);
        v206 = (void *)v203[2];
      }
      v203[3] = v204;
      operator delete(v206);
    }
    MEMORY[0x1A1AD355C](v203, 0x1020C402564D6C4);
  }
  if (qword_1EDB971E0 != -1)
    dispatch_once(&qword_1EDB971E0, &unk_1E3D3AC10);
  if (spid - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v207 = qword_1EDB971D8;
    if (os_signpost_enabled((os_log_t)qword_1EDB971D8))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_19C291000, v207, OS_SIGNPOST_INTERVAL_END, spid, "ToucanGenerateCompletions", (const char *)&unk_19C47C5B5, buf, 2u);
    }
  }
}

void sub_19C411A84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41)
{
  uint64_t v41;
  void *v43;
  void *v44;

  v43 = (void *)STACK[0x328];
  if (STACK[0x328])
  {
    STACK[0x330] = (unint64_t)v43;
    operator delete(v43);
  }
  v44 = a37;
  a37 = 0;
  if (v44)
    (*(void (**)(void *))(*(_QWORD *)v44 + 8))(v44);
  sub_19C360700((uint64_t)&a41);
  sub_19C35CBE8((uint64_t)&STACK[0x340]);
  sub_19C412B70(v41 - 200);
  sub_19C35E470(&a22);
  sub_19C35E470(&a26);
  _Unwind_Resume(a1);
}

void sub_19C411FA0(_QWORD *a1, __int128 *a2)
{
  void **v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  int64_t v13;
  double v14;
  __int128 *v15;
  unint64_t v16;
  char *v17;
  double v18;
  __int128 *v19;
  __int128 *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  __int128 v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  __int128 *v33;
  _BOOL4 v34;
  BOOL v35;
  void **v36;
  char v37;
  __int128 v38;
  __int128 v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  __int128 *v44;
  __int128 v45;
  uint64_t v46;
  void **v47;
  char v48;
  __int128 v49;
  void *v50;
  size_t v51;
  unint64_t v52;
  char *v53;
  __int128 v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  __int128 v62;
  __int128 v63;
  uint64_t i;
  __int128 v65;
  void *v66;
  __int128 v67;
  uint64_t v68;
  void *v69;
  size_t v70;
  uint64_t v71;
  char **v72;
  uint64_t v73;
  uint64_t v74;
  int64_t v75;
  char *v76;
  __int128 v77;

  v2 = (void **)a2;
  v3 = a1[2];
  v4 = a1[3];
  v5 = 0x84BDA12F684BDA13 * ((uint64_t)(v4 - v3) >> 3);
  if (v5 >= a1[1])
  {
    if (v3 == v4)
      __assert_rtn("worst", "PriorityQueue.h", 55, "!m_predictions.empty()");
    v14 = *((double *)a2 + 20) + *((float *)a2 + 6);
    if (v14 >= *(double *)(v3 + 160) + *(float *)(v3 + 24))
    {
      v15 = (__int128 *)a1[2];
      do
      {
        v16 = v5 >> 1;
        v17 = (char *)v15 + 216 * (v5 >> 1);
        v18 = *((double *)v17 + 20) + *((float *)v17 + 6);
        v19 = (__int128 *)(v17 + 216);
        v5 += ~(v5 >> 1);
        if (v14 < v18)
          v5 = v16;
        else
          v15 = v19;
      }
      while (v5);
      v20 = (__int128 *)(v3 + 216);
      if ((__int128 *)(v3 + 216) != v15)
      {
        while (1)
        {
          v21 = v3 + 216;
          sub_19C4129EC(v3, (__int128 *)(v3 + 216));
          if ((__int128 *)(v3 + 432) == v15)
            break;
          if ((__int128 *)v21 == v20)
            v20 = (__int128 *)(v3 + 432);
          v3 += 216;
        }
        if ((__int128 *)v21 != v20)
        {
          v33 = v20;
          while (1)
          {
            sub_19C4129EC(v21, v33);
            v33 = (__int128 *)((char *)v33 + 216);
            v34 = v21 + 216 == (_QWORD)v20;
            if (v33 == v15)
            {
              if ((__int128 *)(v21 + 216) == v20)
                break;
              v33 = (__int128 *)((char *)v20 + 216);
              v21 += 432;
              while (1)
              {
                sub_19C4129EC(v21 - 216, v20);
                v34 = v21 == (_QWORD)v20;
                if (v33 != v15)
                  break;
                v35 = v21 == (_QWORD)v20;
                v21 += 216;
                if (v35)
                  goto LABEL_49;
              }
            }
            else
            {
              v21 += 216;
            }
            if (v34)
              v20 = v33;
          }
        }
      }
LABEL_49:
      v36 = (void **)v15 - 27;
      if ((void **)((char *)v15 - 216) != v2)
      {
        v37 = *((_BYTE *)v2 + 23);
        if (*((char *)v15 - 193) < 0)
        {
          if (v37 >= 0)
            v50 = v2;
          else
            v50 = *v2;
          if (v37 >= 0)
            v51 = *((unsigned __int8 *)v2 + 23);
          else
            v51 = (size_t)v2[1];
          sub_19C2E54A8(v36, v50, v51);
        }
        else if ((*((_BYTE *)v2 + 23) & 0x80) != 0)
        {
          sub_19C2E53E4(v36, *v2, (size_t)v2[1]);
        }
        else
        {
          v38 = *(_OWORD *)v2;
          *((_QWORD *)v15 - 25) = v2[2];
          *(_OWORD *)v36 = v38;
        }
      }
      *((_DWORD *)v15 - 48) = *((_DWORD *)v2 + 6);
      v71 = (uint64_t)v15 - 184;
      v72 = (char **)(v2 + 4);
      goto LABEL_119;
    }
  }
  else
  {
    if (v4 == v3)
    {
      v13 = 0x84BDA12F684BDA13 * ((uint64_t)(v4 - v3) >> 3);
    }
    else
    {
      v7 = 0x84BDA12F684BDA13 * ((uint64_t)(v4 - v3) >> 3);
      v8 = a1[2];
      do
      {
        v9 = v7 >> 1;
        v10 = v8 + 216 * (v7 >> 1);
        v11 = *(double *)(v10 + 160) + *(float *)(v10 + 24);
        v12 = v10 + 216;
        v7 += ~(v7 >> 1);
        if (*((double *)a2 + 20) + *((float *)a2 + 6) < v11)
          v7 = v9;
        else
          v8 = v12;
      }
      while (v7);
      v13 = 0x84BDA12F684BDA13 * ((v8 - v3) >> 3);
    }
    v22 = v3 + 216 * v13;
    v23 = a1[4];
    if (v4 >= v23)
    {
      v29 = v5 + 1;
      if (v29 > 0x12F684BDA12F684)
        sub_19C2A18E8();
      v30 = 0x84BDA12F684BDA13 * ((uint64_t)(v23 - v3) >> 3);
      if (2 * v30 > v29)
        v29 = 2 * v30;
      if (v30 >= 0x97B425ED097B42)
        v31 = 0x12F684BDA12F684;
      else
        v31 = v29;
      if (v31)
      {
        if (v31 > 0x12F684BDA12F684)
          sub_19C2A143C();
        v32 = (char *)operator new(216 * v31);
      }
      else
      {
        v32 = 0;
      }
      v40 = &v32[216 * v13];
      v76 = v40;
      *(_QWORD *)&v77 = v40;
      *((_QWORD *)&v77 + 1) = &v32[216 * v31];
      v41 = v40;
      if (v13 == v31)
      {
        if (v13 < 1)
        {
          if (v13)
            v52 = 2 * v13;
          else
            v52 = 1;
          if (v52 > 0x12F684BDA12F684)
            sub_19C2A143C();
          v53 = (char *)operator new(216 * v52);
          v41 = &v53[216 * (v52 >> 2)];
          *(_QWORD *)&v54 = v41;
          *((_QWORD *)&v54 + 1) = &v53[216 * v52];
          v55 = v40;
          v76 = v41;
          v77 = v54;
          while (v55 != v40)
          {
            sub_19C2E25C8((void **)v55 - 23);
            if (*(v55 - 193) < 0)
              operator delete(*((void **)v55 - 27));
            v55 -= 216;
          }
          if (v32)
            operator delete(v32);
        }
        else
        {
          v41 = &v40[-216 * ((v13 + 1) >> 1)];
          v76 = v41;
          *(_QWORD *)&v77 = v41;
        }
      }
      if (*((char *)v2 + 23) < 0)
      {
        sub_19C2B5238(v41, *v2, (unint64_t)v2[1]);
      }
      else
      {
        *(_OWORD *)v41 = *(_OWORD *)v2;
        *((_QWORD *)v41 + 2) = v2[2];
      }
      *((_DWORD *)v41 + 6) = *((_DWORD *)v2 + 6);
      sub_19C2E1F84((uint64_t)(v41 + 32), (uint64_t)(v2 + 4));
      v56 = v76;
      v57 = v77 + 216;
      v58 = a1[2];
      if (v22 != v58)
      {
        v59 = 0;
        do
        {
          v60 = v22 + v59;
          v61 = &v76[v59];
          v62 = *(_OWORD *)(v22 + v59 - 216);
          *((_QWORD *)v61 - 25) = *(_QWORD *)(v22 + v59 - 200);
          *(_OWORD *)(v61 - 216) = v62;
          *(_QWORD *)(v60 - 208) = 0;
          *(_QWORD *)(v60 - 200) = 0;
          *(_QWORD *)(v60 - 216) = 0;
          LODWORD(v62) = *(_DWORD *)(v22 + v59 - 192);
          *((_QWORD *)v61 - 22) = 0;
          *((_QWORD *)v61 - 21) = 0;
          *((_QWORD *)v61 - 23) = 0;
          *((_DWORD *)v61 - 48) = v62;
          *(_OWORD *)(v61 - 184) = *(_OWORD *)(v22 + v59 - 184);
          *((_QWORD *)v61 - 21) = *(_QWORD *)(v22 + v59 - 168);
          *(_QWORD *)(v60 - 184) = 0;
          *(_QWORD *)(v60 - 176) = 0;
          *(_QWORD *)(v60 - 168) = 0;
          *((_QWORD *)v61 - 20) = 0;
          *((_QWORD *)v61 - 19) = 0;
          *((_QWORD *)v61 - 18) = 0;
          *((_OWORD *)v61 - 10) = *(_OWORD *)(v22 + v59 - 160);
          *((_QWORD *)v61 - 18) = *(_QWORD *)(v22 + v59 - 144);
          *(_QWORD *)(v60 - 160) = 0;
          *(_QWORD *)(v60 - 152) = 0;
          *(_QWORD *)(v60 - 144) = 0;
          *((_QWORD *)v61 - 17) = 0;
          *((_QWORD *)v61 - 16) = 0;
          *((_QWORD *)v61 - 15) = 0;
          *(_OWORD *)(v61 - 136) = *(_OWORD *)(v22 + v59 - 136);
          *((_QWORD *)v61 - 15) = *(_QWORD *)(v22 + v59 - 120);
          *(_QWORD *)(v60 - 136) = 0;
          *(_QWORD *)(v60 - 128) = 0;
          *(_QWORD *)(v60 - 120) = 0;
          *((_QWORD *)v61 - 14) = 0;
          *((_QWORD *)v61 - 13) = 0;
          *((_QWORD *)v61 - 12) = 0;
          *((_OWORD *)v61 - 7) = *(_OWORD *)(v22 + v59 - 112);
          *((_QWORD *)v61 - 12) = *(_QWORD *)(v22 + v59 - 96);
          *(_QWORD *)(v60 - 112) = 0;
          *(_QWORD *)(v60 - 104) = 0;
          *(_QWORD *)(v60 - 96) = 0;
          *((_QWORD *)v61 - 11) = 0;
          *((_QWORD *)v61 - 10) = 0;
          *((_QWORD *)v61 - 9) = 0;
          *(_OWORD *)(v61 - 88) = *(_OWORD *)(v22 + v59 - 88);
          *((_QWORD *)v61 - 9) = *(_QWORD *)(v22 + v59 - 72);
          *(_QWORD *)(v60 - 80) = 0;
          *(_QWORD *)(v60 - 72) = 0;
          v63 = *(_OWORD *)(v22 + v59 - 64);
          *(_QWORD *)(v60 - 88) = 0;
          *((_OWORD *)v61 - 4) = v63;
          *((_QWORD *)v61 - 5) = 0;
          *((_QWORD *)v61 - 4) = 0;
          *((_QWORD *)v61 - 6) = 0;
          *((_OWORD *)v61 - 3) = *(_OWORD *)(v22 + v59 - 48);
          *((_QWORD *)v61 - 4) = *(_QWORD *)(v22 + v59 - 32);
          *(_QWORD *)(v60 - 48) = 0;
          *(_QWORD *)(v60 - 40) = 0;
          *(_QWORD *)(v60 - 32) = 0;
          *((_QWORD *)v61 - 3) = 0;
          *((_QWORD *)v61 - 2) = 0;
          *((_QWORD *)v61 - 1) = 0;
          *(_OWORD *)(v61 - 24) = *(_OWORD *)(v22 + v59 - 24);
          *((_QWORD *)v61 - 1) = *(_QWORD *)(v22 + v59 - 8);
          *(_QWORD *)(v60 - 24) = 0;
          *(_QWORD *)(v60 - 16) = 0;
          *(_QWORD *)(v60 - 8) = 0;
          v59 -= 216;
        }
        while (v22 + v59 != v58);
        v56 = &v76[v59];
      }
      for (i = a1[3]; v22 != i; v22 += 216)
      {
        v65 = *(_OWORD *)v22;
        *(_QWORD *)(v57 + 16) = *(_QWORD *)(v22 + 16);
        *(_OWORD *)v57 = v65;
        *(_QWORD *)(v22 + 8) = 0;
        *(_QWORD *)(v22 + 16) = 0;
        *(_QWORD *)v22 = 0;
        *(_DWORD *)(v57 + 24) = *(_DWORD *)(v22 + 24);
        *(_QWORD *)(v57 + 40) = 0;
        *(_QWORD *)(v57 + 48) = 0;
        *(_QWORD *)(v57 + 32) = 0;
        *(_OWORD *)(v57 + 32) = *(_OWORD *)(v22 + 32);
        *(_QWORD *)(v57 + 48) = *(_QWORD *)(v22 + 48);
        *(_QWORD *)(v22 + 32) = 0;
        *(_QWORD *)(v22 + 40) = 0;
        *(_QWORD *)(v22 + 48) = 0;
        *(_QWORD *)(v57 + 56) = 0;
        *(_QWORD *)(v57 + 64) = 0;
        *(_QWORD *)(v57 + 72) = 0;
        *(_OWORD *)(v57 + 56) = *(_OWORD *)(v22 + 56);
        *(_QWORD *)(v57 + 72) = *(_QWORD *)(v22 + 72);
        *(_QWORD *)(v22 + 56) = 0;
        *(_QWORD *)(v22 + 64) = 0;
        *(_QWORD *)(v22 + 72) = 0;
        *(_QWORD *)(v57 + 80) = 0;
        *(_QWORD *)(v57 + 88) = 0;
        *(_QWORD *)(v57 + 96) = 0;
        *(_OWORD *)(v57 + 80) = *(_OWORD *)(v22 + 80);
        *(_QWORD *)(v57 + 96) = *(_QWORD *)(v22 + 96);
        *(_QWORD *)(v22 + 80) = 0;
        *(_QWORD *)(v22 + 88) = 0;
        *(_QWORD *)(v22 + 96) = 0;
        *(_QWORD *)(v57 + 104) = 0;
        *(_QWORD *)(v57 + 112) = 0;
        *(_QWORD *)(v57 + 120) = 0;
        *(_OWORD *)(v57 + 104) = *(_OWORD *)(v22 + 104);
        *(_QWORD *)(v57 + 120) = *(_QWORD *)(v22 + 120);
        *(_QWORD *)(v22 + 104) = 0;
        *(_QWORD *)(v22 + 112) = 0;
        *(_QWORD *)(v22 + 120) = 0;
        *(_QWORD *)(v57 + 128) = 0;
        *(_QWORD *)(v57 + 136) = 0;
        *(_QWORD *)(v57 + 144) = 0;
        *(_OWORD *)(v57 + 128) = *(_OWORD *)(v22 + 128);
        *(_QWORD *)(v57 + 144) = *(_QWORD *)(v22 + 144);
        *(_QWORD *)(v22 + 136) = 0;
        *(_QWORD *)(v22 + 144) = 0;
        *(_QWORD *)(v22 + 128) = 0;
        *(_OWORD *)(v57 + 152) = *(_OWORD *)(v22 + 152);
        *(_QWORD *)(v57 + 176) = 0;
        *(_QWORD *)(v57 + 184) = 0;
        *(_QWORD *)(v57 + 168) = 0;
        *(_OWORD *)(v57 + 168) = *(_OWORD *)(v22 + 168);
        *(_QWORD *)(v57 + 184) = *(_QWORD *)(v22 + 184);
        *(_QWORD *)(v22 + 168) = 0;
        *(_QWORD *)(v22 + 176) = 0;
        *(_QWORD *)(v22 + 184) = 0;
        *(_QWORD *)(v57 + 192) = 0;
        *(_QWORD *)(v57 + 200) = 0;
        *(_QWORD *)(v57 + 208) = 0;
        *(_OWORD *)(v57 + 192) = *(_OWORD *)(v22 + 192);
        *(_QWORD *)(v57 + 208) = *(_QWORD *)(v22 + 208);
        *(_QWORD *)(v22 + 192) = 0;
        *(_QWORD *)(v22 + 200) = 0;
        *(_QWORD *)(v22 + 208) = 0;
        v57 += 216;
      }
      v66 = (void *)a1[2];
      v67 = *(_OWORD *)(a1 + 3);
      a1[2] = v56;
      a1[3] = v57;
      a1[4] = *((_QWORD *)&v77 + 1);
      if ((void *)v67 != v66)
      {
        v68 = v67 - 216;
        do
        {
          sub_19C2E25C8((void **)(v68 + 32));
          if (*(char *)(v68 + 23) < 0)
            operator delete(*(void **)v68);
          v68 -= 216;
        }
        while ((void *)(v68 + 216) != v66);
      }
      if (v66)
        operator delete(v66);
    }
    else
    {
      if (v22 != v4)
      {
        v24 = v22 + 216;
        v25 = v4 - 216;
        v75 = v13;
        if (v4 < 0xD8)
        {
          v27 = a1[3];
        }
        else
        {
          v26 = v4 - 216;
          v27 = a1[3];
          do
          {
            v28 = *(_OWORD *)v26;
            *(_QWORD *)(v27 + 16) = *(_QWORD *)(v26 + 16);
            *(_OWORD *)v27 = v28;
            *(_QWORD *)(v26 + 8) = 0;
            *(_QWORD *)(v26 + 16) = 0;
            *(_QWORD *)v26 = 0;
            *(_DWORD *)(v27 + 24) = *(_DWORD *)(v26 + 24);
            *(_QWORD *)(v27 + 40) = 0;
            *(_QWORD *)(v27 + 48) = 0;
            *(_QWORD *)(v27 + 32) = 0;
            *(_OWORD *)(v27 + 32) = *(_OWORD *)(v26 + 32);
            *(_QWORD *)(v27 + 48) = *(_QWORD *)(v26 + 48);
            *(_QWORD *)(v26 + 32) = 0;
            *(_QWORD *)(v26 + 40) = 0;
            *(_QWORD *)(v26 + 48) = 0;
            *(_QWORD *)(v27 + 56) = 0;
            *(_QWORD *)(v27 + 64) = 0;
            *(_QWORD *)(v27 + 72) = 0;
            *(_OWORD *)(v27 + 56) = *(_OWORD *)(v26 + 56);
            *(_QWORD *)(v27 + 72) = *(_QWORD *)(v26 + 72);
            *(_QWORD *)(v26 + 56) = 0;
            *(_QWORD *)(v26 + 64) = 0;
            *(_QWORD *)(v26 + 72) = 0;
            *(_QWORD *)(v27 + 80) = 0;
            *(_QWORD *)(v27 + 88) = 0;
            *(_QWORD *)(v27 + 96) = 0;
            *(_OWORD *)(v27 + 80) = *(_OWORD *)(v26 + 80);
            *(_QWORD *)(v27 + 96) = *(_QWORD *)(v26 + 96);
            *(_QWORD *)(v26 + 80) = 0;
            *(_QWORD *)(v26 + 88) = 0;
            *(_QWORD *)(v26 + 96) = 0;
            *(_QWORD *)(v27 + 104) = 0;
            *(_QWORD *)(v27 + 112) = 0;
            *(_QWORD *)(v27 + 120) = 0;
            *(_OWORD *)(v27 + 104) = *(_OWORD *)(v26 + 104);
            *(_QWORD *)(v27 + 120) = *(_QWORD *)(v26 + 120);
            *(_QWORD *)(v26 + 104) = 0;
            *(_QWORD *)(v26 + 112) = 0;
            *(_QWORD *)(v26 + 120) = 0;
            *(_QWORD *)(v27 + 128) = 0;
            *(_QWORD *)(v27 + 136) = 0;
            *(_QWORD *)(v27 + 144) = 0;
            *(_OWORD *)(v27 + 128) = *(_OWORD *)(v26 + 128);
            *(_QWORD *)(v27 + 144) = *(_QWORD *)(v26 + 144);
            *(_QWORD *)(v26 + 136) = 0;
            *(_QWORD *)(v26 + 144) = 0;
            *(_QWORD *)(v26 + 128) = 0;
            *(_OWORD *)(v27 + 152) = *(_OWORD *)(v26 + 152);
            *(_QWORD *)(v27 + 176) = 0;
            *(_QWORD *)(v27 + 184) = 0;
            *(_QWORD *)(v27 + 168) = 0;
            *(_OWORD *)(v27 + 168) = *(_OWORD *)(v26 + 168);
            *(_QWORD *)(v27 + 184) = *(_QWORD *)(v26 + 184);
            *(_QWORD *)(v26 + 168) = 0;
            *(_QWORD *)(v26 + 176) = 0;
            *(_QWORD *)(v26 + 184) = 0;
            *(_QWORD *)(v27 + 192) = 0;
            *(_QWORD *)(v27 + 200) = 0;
            *(_QWORD *)(v27 + 208) = 0;
            *(_OWORD *)(v27 + 192) = *(_OWORD *)(v26 + 192);
            *(_QWORD *)(v27 + 208) = *(_QWORD *)(v26 + 208);
            *(_QWORD *)(v26 + 192) = 0;
            *(_QWORD *)(v26 + 200) = 0;
            *(_QWORD *)(v26 + 208) = 0;
            v27 += 216;
            v26 += 216;
          }
          while (v26 < v4);
        }
        a1[3] = v27;
        if (v4 != v24)
        {
          v42 = 0;
          v43 = -8 * ((uint64_t)(v4 - v24) >> 3);
          do
          {
            v46 = v4 + v42;
            v47 = (void **)(v4 + v42 - 216);
            if (*(char *)(v4 + v42 - 193) < 0)
              operator delete(*v47);
            v44 = (__int128 *)(v25 + v42 - 216);
            v45 = *v44;
            *(_QWORD *)(v4 + v42 - 200) = *(_QWORD *)(v25 + v42 - 200);
            *(_OWORD *)v47 = v45;
            *(_BYTE *)(v25 + v42 - 193) = 0;
            *(_BYTE *)v44 = 0;
            *(_DWORD *)(v46 - 192) = *(_DWORD *)(v25 + v42 - 192);
            sub_19C35E680(v46 - 184, v25 + v42 - 184);
            v42 -= 216;
          }
          while (v43 != v42);
        }
        if (v22 <= (unint64_t)v2)
          v2 += 27 * (a1[3] > (unint64_t)v2);
        if ((void **)v22 != v2)
        {
          v48 = *((_BYTE *)v2 + 23);
          if (*(char *)(v22 + 23) < 0)
          {
            if (v48 >= 0)
              v69 = v2;
            else
              v69 = *v2;
            if (v48 >= 0)
              v70 = *((unsigned __int8 *)v2 + 23);
            else
              v70 = (size_t)v2[1];
            sub_19C2E54A8((void **)v22, v69, v70);
          }
          else if ((*((_BYTE *)v2 + 23) & 0x80) != 0)
          {
            sub_19C2E53E4((_QWORD *)v22, *v2, (size_t)v2[1]);
          }
          else
          {
            v49 = *(_OWORD *)v2;
            *(_QWORD *)(v22 + 16) = v2[2];
            *(_OWORD *)v22 = v49;
          }
        }
        v74 = v3 + 216 * v75;
        *(_DWORD *)(v74 + 24) = *((_DWORD *)v2 + 6);
        v71 = v74 + 32;
        v72 = (char **)(v2 + 4);
LABEL_119:
        sub_19C35FA6C(v71, v72);
        return;
      }
      if (*((char *)a2 + 23) < 0)
      {
        sub_19C2B5238((_BYTE *)a1[3], *(void **)a2, *((_QWORD *)a2 + 1));
      }
      else
      {
        v39 = *a2;
        *(_QWORD *)(v4 + 16) = *((_QWORD *)a2 + 2);
        *(_OWORD *)v4 = v39;
      }
      v73 = v3 + 216 * v13;
      *(_DWORD *)(v73 + 24) = *((_DWORD *)v2 + 6);
      sub_19C2E1F84(v73 + 32, (uint64_t)(v2 + 4));
      a1[3] = v4 + 216;
    }
  }
}

void sub_19C412998(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 24) = v2;
  _Unwind_Resume(exception_object);
}

void sub_19C4129C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C361614((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19C4129EC(uint64_t a1, __int128 *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  void *__p[2];
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  *(_OWORD *)__p = *(_OWORD *)a1;
  v9 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  v3 = *(_DWORD *)(a1 + 24);
  v10 = *(_OWORD *)(a1 + 32);
  v11 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v12 = *(_OWORD *)(a1 + 56);
  v13 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  v14 = *(_OWORD *)(a1 + 80);
  v15 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  v16 = *(_OWORD *)(a1 + 104);
  v17 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  v18 = *(_OWORD *)(a1 + 128);
  v4 = *(_QWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  v20 = *(_OWORD *)(a1 + 152);
  v21 = *(_OWORD *)(a1 + 168);
  v5 = *(_QWORD *)(a1 + 184);
  v19 = v4;
  v22 = v5;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  v23 = *(_OWORD *)(a1 + 192);
  v24 = *(_QWORD *)(a1 + 208);
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  v6 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v6;
  *((_BYTE *)a2 + 23) = 0;
  *(_BYTE *)a2 = 0;
  v7 = (uint64_t)(a2 + 2);
  *(_DWORD *)(a1 + 24) = *((_DWORD *)a2 + 6);
  sub_19C35E680(a1 + 32, (uint64_t)(a2 + 2));
  if (*((char *)a2 + 23) < 0)
    operator delete(*(void **)a2);
  *a2 = *(_OWORD *)__p;
  *((_QWORD *)a2 + 2) = v9;
  *((_DWORD *)a2 + 6) = v3;
  sub_19C35E680(v7, (uint64_t)&v10);
  sub_19C2E25C8((void **)&v10);
}

uint64_t sub_19C412B70(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 24);
    v4 = *(void **)(a1 + 16);
    if (v3 != v2)
    {
      do
      {
        sub_19C2E25C8((void **)(v3 - 184));
        if (*(char *)(v3 - 193) < 0)
          operator delete(*(void **)(v3 - 216));
        v3 -= 216;
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 16);
    }
    *(_QWORD *)(a1 + 24) = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_19C412BE8(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(_QWORD **)(a1 + 16);
    v4 = **(_QWORD **)(a1 + 8);
    while (v3 != v4)
    {
      sub_19C2E25C8((void **)(v3 - 184));
      if (*(char *)(v3 - 193) < 0)
        operator delete(*(void **)(v3 - 216));
      v3 -= 216;
    }
  }
  return a1;
}

void sub_19C412C50(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  const __CFString *v6;
  int TokenID;
  int v8;
  uint64_t v9;

  v6 = (const __CFString *)LXEntryCopyString();
  if (CFStringCompare(*(CFStringRef *)(a1 + 40), v6, 0) == kCFCompareEqualTo)
  {
    if (a2)
    {
      TokenID = LXEntryGetTokenID();
      if (TokenID)
        v8 = TokenID;
      else
        v8 = 500;
    }
    else
    {
      v8 = 0;
    }
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v8;
    if (*(_QWORD *)(a1 + 48))
    {
      LXEntryGetProbability();
      **(_QWORD **)(a1 + 48) = v9;
    }
    if (a3)
      *a3 = 1;
  }
  if (v6)
    CFRelease(v6);
}

void sub_19C412D08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C2FE810((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19C412D1C(uint64_t a1, const UInt8 *a2)
{
  CFIndex v2;
  CFIndex v3;
  CFStringRef v4;
  CFStringRef v5;
  uint64_t v6;
  void *exception;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;

  v2 = *((_QWORD *)a2 + 1);
  if (*((char *)a2 + 23) >= 0)
  {
    v3 = a2[23];
  }
  else
  {
    a2 = *(const UInt8 **)a2;
    v3 = v2;
  }
  v4 = CFStringCreateWithBytes(0, a2, v3, 0x8000100u, 0);
  if (!v4)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD3154](exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v5 = v4;
  v9 = 0;
  v10 = &v9;
  v12 = 0;
  v11 = 0x2000000000;
  LXLexiconEnumerateEntriesForString();
  v6 = *((unsigned int *)v10 + 6);
  _Block_object_dispose(&v9, 8);
  CFRelease(v5);
  return v6;
}

void sub_19C412E2C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19C412E44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  _Block_object_dispose(&a17, 8);
  sub_19C2E5670(&a9);
  _Unwind_Resume(a1);
}

void sub_19C412E64(uint64_t a1)
{
  uint64_t v2;
  const void *v3;
  const __CFString *v4;
  const __CFString *v5;
  __int128 v6;
  uint64_t v7;
  const __CFString *v8;
  uint64_t v9;

  *(_BYTE *)(a1 + 23) = 0;
  *(_BYTE *)a1 = 0;
  v2 = LXLexiconCopyEntryForTokenID();
  v9 = v2;
  if (v2)
  {
    v3 = (const void *)v2;
    v4 = (const __CFString *)LXEntryCopyString();
    v5 = v4;
    v8 = v4;
    if (v4)
    {
      sub_19C29CEF8(v4, &v6);
      *(_OWORD *)a1 = v6;
      *(_QWORD *)(a1 + 16) = v7;
      CFRelease(v5);
    }
    CFRelease(v3);
  }
}

void sub_19C412EF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  const void *v6;
  va_list va;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, const void *);
  sub_19C2FE810((const void **)va);
  sub_19C3387E0((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_19C412F18(uint64_t *a1, uint64_t a2, uint64_t a3, _QWORD *a4, int a5)
{
  const void *RootCursor;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _BYTE v14[24];
  _BYTE *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  RootCursor = (const void *)LXLexiconCreateRootCursor();
  v9 = (const void *)LXCursorCreateByAdvancing();
  v10 = operator new();
  v11 = a4[3];
  if (!v11)
    goto LABEL_4;
  if ((_QWORD *)v11 != a4)
  {
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
LABEL_4:
    v15 = (_BYTE *)v11;
    goto LABEL_6;
  }
  v15 = v14;
  (*(void (**)(_QWORD *, _BYTE *))(*a4 + 24))(a4, v14);
LABEL_6:
  sub_19C36C900(v10, v9, (uint64_t)v14, a5);
  v12 = v15;
  if (v15 == v14)
  {
    v13 = 4;
    v12 = v14;
  }
  else
  {
    if (!v15)
      goto LABEL_11;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_11:
  *a1 = v10;
  if (v9)
    CFRelease(v9);
  if (RootCursor)
    CFRelease(RootCursor);
}

void sub_19C413060(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a2)
    sub_19C2CDAC8(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_19C4130F0()
{
  JUMPOUT(0x1A1AD355CLL);
}

_QWORD *sub_19C413104()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E3D38AB0;
  return result;
}

void sub_19C413128(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E3D38AB0;
}

uint64_t sub_19C413140()
{
  return 1;
}

uint64_t sub_19C413148(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN2LM12LexiconUtils19makeTokenEnumeratorEPK10_LXLexiconPK10__CFStringNS_11TokenSourceEE3$_0"
    || ((v3 & (unint64_t)"ZN2LM12LexiconUtils19makeTokenEnumeratorEPK10_LXLexiconPK10__CFStringNS_11TokenSourceEE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN2LM12LexiconUtils19makeTokenEnumeratorEPK10_LXLexiconPK10__CFStringNS_11TokenSourceEE3$_0")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN2LM12LexiconUtils19makeTokenEnumeratorEPK10_LXLexiconPK10__CFStringNS_11TokenSourceEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *sub_19C41319C()
{
  return &unk_1E3D334E0;
}

void sub_19C4131AC()
{
  JUMPOUT(0x1A1AD355CLL);
}

_QWORD *sub_19C4131C0()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E3D38B08;
  return result;
}

void sub_19C4131E4(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E3D38B08;
}

BOOL sub_19C4131FC()
{
  return (LXEntryGetMetaFlags() & 0x86) == 0;
}

uint64_t sub_19C413220(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN2LM12LexiconUtils25makePoliteTokenEnumeratorEPK10_LXLexiconPK10__CFStringNS_11TokenSourceEE3$_0"
    || ((v3 & (unint64_t)"ZN2LM12LexiconUtils25makePoliteTokenEnumeratorEPK10_LXLexiconPK10__CFStringNS_11TokenSourceEE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN2LM12LexiconUtils25makePoliteTokenEnumeratorEPK10_LXLexiconPK10__CFStringNS_11TokenSourceEE3$_0")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN2LM12LexiconUtils25makePoliteTokenEnumeratorEPK10_LXLexiconPK10__CFStringNS_11TokenSourceEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *sub_19C413274()
{
  return &unk_1E3D334F0;
}

void sub_19C413280()
{
  const void *RootCursor;
  const void *v1;

  RootCursor = (const void *)LXLexiconCreateRootCursor();
  v1 = (const void *)LXCursorCreateByAdvancingWithUTF8();
  if (v1)
  {
    LXCursorEnumerateEntries();
    CFRelease(v1);
  }
  if (RootCursor)
    CFRelease(RootCursor);
}

void sub_19C41333C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  sub_19C338870((const void **)va);
  sub_19C338870((const void **)(v7 - 40));
  _Unwind_Resume(a1);
}

void sub_19C413360(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  const void *v6;
  uint64_t v7;
  int TokenID;
  int v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  int v14;
  const void *v15;

  v12 = 0;
  v6 = (const void *)LXEntryCopyString();
  v7 = *(_QWORD *)(a1 + 32);
  if (a2)
  {
    TokenID = LXEntryGetTokenID();
    if (TokenID)
      v9 = TokenID;
    else
      v9 = 500;
  }
  else
  {
    v9 = 0;
  }
  LXEntryGetProbability();
  v15 = v6;
  v14 = v9;
  v13 = v10;
  v11 = *(_QWORD *)(v7 + 24);
  if (!v11)
    sub_19C2CCC60();
  (*(void (**)(uint64_t, const void **, int *, uint64_t *, char *))(*(_QWORD *)v11 + 48))(v11, &v15, &v14, &v13, &v12);
  *a3 = v12;
  if (v6)
    CFRelease(v6);
}

void sub_19C41342C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C2FE810((const void **)va);
  _Unwind_Resume(a1);
}

void sub_19C413444(_QWORD *a1)
{
  sub_19C413D50(a1);
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C413468(_QWORD *a1, CFStringRef theString, double *a3)
{
  uint64_t Length;
  void *v7;
  uint64_t **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  double v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  long double v29;
  double v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t v37;
  CFStringRef v39;
  double *v40;
  _QWORD v41[7];
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  int v49;
  _QWORD v50[6];
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  char v54;
  CFRange v55;

  v46 = 0;
  v47 = &v46;
  v49 = 0;
  v48 = 0x2000000000;
  Length = CFStringGetLength(theString);
  v42 = 0;
  v43 = &v42;
  v44 = 0x2000000000;
  v45 = 0;
  if (Length >= 1)
  {
    v7 = (void *)operator new[]();
    v40 = a3;
    bzero(v7, 2 * Length);
    v55.location = 0;
    v55.length = Length;
    CFStringGetCharacters(theString, v55, (UniChar *)v7);
    v39 = theString;
    v8 = (uint64_t **)a1[6];
    v9 = **v8;
    v10 = sub_19C413F1C(v8);
    v11 = a1[3];
    if (a1[4] != v11)
    {
      v12 = 0;
      v13 = 0;
      v14 = 0x5000000000;
      do
      {
        v15 = (*(double (**)(_QWORD, uint64_t, uint64_t, void *, uint64_t))(**(_QWORD **)(v11 + 8 * v12) + 24))(*(_QWORD *)(v11 + 8 * v12), v9 + (v14 >> 32), v10 + (v14 >> 32), v7, Length);
        v16 = *(_QWORD *)(a1[3] + 8 * v12);
        if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 32))(v16, v10 + (v14 >> 32)))
        {
          if (*((double *)v43 + 3) == 0.0)
            *((double *)v43 + 3) = v15;
          v13 = 1;
        }
        ++v12;
        v11 = a1[3];
        v14 += 0x5000000000;
      }
      while (v12 < (a1[4] - v11) >> 3);
      if ((v13 & 1) != 0)
      {
        v17 = 0;
        v18 = 0x5000000000;
        while (1)
        {
          v19 = a1[3];
          if (v17 >= (a1[4] - v19) >> 3)
            break;
          v20 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v19 + 8 * v17) + 48))(*(_QWORD *)(v19 + 8 * v17), v10 + (v18 >> 32));
          ++v17;
          v18 += 0x5000000000;
          if (v20)
          {
            v21 = a1[3];
            if (a1[4] == v21)
            {
              v24 = 0.0;
            }
            else
            {
              v22 = 0;
              v23 = 0x5000000000;
              do
              {
                v24 = (*(double (**)(_QWORD, uint64_t))(**(_QWORD **)(v21 + 8 * v22) + 80))(*(_QWORD *)(v21 + 8 * v22), v10 + (v23 >> 32));
                if (v24 != 0.0)
                  break;
                ++v22;
                v21 = a1[3];
                v23 += 0x5000000000;
              }
              while (v22 < (a1[4] - v21) >> 3);
            }
            v25 = 0;
            *((double *)v43 + 3) = *((double *)v43 + 3) * v24;
            v41[0] = MEMORY[0x1E0C809B0];
            v41[1] = 0x40000000;
            v41[2] = sub_19C414018;
            v41[3] = &unk_1E3D3C7B8;
            v41[4] = &v46;
            v41[5] = &v42;
            v41[6] = v39;
            v51 = 0;
            v52 = &v51;
            v53 = 0x2000000000;
            v54 = 0;
            v26 = 0x5000000000;
            do
            {
              v27 = a1[3];
              if (v25 >= (a1[4] - v27) >> 3)
                break;
              v28 = *(_QWORD *)(v27 + 8 * v25);
              v50[0] = MEMORY[0x1E0C809B0];
              v50[1] = 0x40000000;
              v50[2] = sub_19C4140FC;
              v50[3] = &unk_1E3D3C790;
              v50[4] = v41;
              v50[5] = &v51;
              (*(void (**)(uint64_t, uint64_t, void *, uint64_t, _QWORD *))(*(_QWORD *)v28 + 56))(v28, v10 + (v26 >> 32), v7, Length, v50);
              ++v25;
              v26 += 0x5000000000;
            }
            while (!*((_BYTE *)v52 + 24));
            _Block_object_dispose(&v51, 8);
            if (v40 && *((_DWORD *)v47 + 6))
            {
              v29 = *((double *)v43 + 3);
              v30 = log(v29);
              if (v29 <= 0.0)
                v30 = -99.0;
              *v40 = v30;
            }
            break;
          }
        }
      }
    }
    v31 = a1[3];
    if (a1[4] != v31)
    {
      v32 = 0;
      v33 = 0x5000000000;
      do
      {
        if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(v31 + 8 * v32) + 144))(*(_QWORD *)(v31 + 8 * v32)))
        {
          v34 = *(_QWORD *)(a1[3] + 8 * v32);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v34 + 152))(v34, v10 + (v33 >> 32));
        }
        ++v32;
        v31 = a1[3];
        v33 += 0x5000000000;
      }
      while (v32 < (a1[4] - v31) >> 3);
    }
    v35 = (_QWORD *)a1[6];
    v36 = v35[4];
    if (v36 > v35[3])
    {
      v35[4] = v36 - v35[5];
      --v35[7];
    }
    MEMORY[0x1A1AD3538](v7, 0x1000C80BDFB0063);
  }
  v37 = *((unsigned int *)v47 + 6);
  _Block_object_dispose(&v42, 8);
  _Block_object_dispose(&v46, 8);
  return v37;
}

void sub_19C413878(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v10;
  uint64_t v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a10);
  va_start(va, a10);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  MEMORY[0x1A1AD3538](v10, 0x1000C80BDFB0063);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_19C4138EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFStringRef v5;
  uint64_t v6;

  v5 = sub_19C2E1370(a2);
  v6 = (*(uint64_t (**)(uint64_t, CFStringRef, uint64_t))(*(_QWORD *)a1 + 16))(a1, v5, a3);
  if (v5)
    CFRelease(v5);
  return v6;
}

void sub_19C41395C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C2FE810((const void **)va);
  _Unwind_Resume(a1);
}

void sub_19C413970(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  const __CFString *v7;
  const __CFString *cf;

  v4 = *(_QWORD **)(a1 + 24);
  v5 = *(_QWORD **)(a1 + 32);
  if (v4 == v5)
  {
LABEL_4:
    v7 = 0;
  }
  else
  {
    while (1)
    {
      v7 = (const __CFString *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v4 + 128))(*v4, a2);
      if (v7)
        break;
      if (++v4 == v5)
        goto LABEL_4;
    }
  }
  cf = v7;
  sub_19C29CEF8(v7, a3);
  if (cf)
    CFRelease(cf);
}

void sub_19C4139F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C2FE810((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19C413A04@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  v2 = *(_QWORD **)(result + 24);
  if (v2 != *(_QWORD **)(result + 32))
    return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v2 + 136))(*v2);
  *a2 = 0;
  return result;
}

CFComparisonResult sub_19C413A28(uint64_t a1)
{
  const __CFString *v1;
  CFComparisonResult result;

  v1 = (const __CFString *)MEMORY[0x1A1AD2A04](*(_QWORD *)(a1 + 56));
  result = CFStringCompare(v1, CFSTR("zh-Hans"), 0);
  if (result)
    __assert_rtn("enumerateSortkeyEquivalentEntries", "LMCompositeLexicon.cpp", 648, "false && \"not implemented\"");
  return result;
}

_QWORD *sub_19C413A74@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  const __CFString *v3;
  _QWORD *result;

  v3 = (const __CFString *)MEMORY[0x1A1AD2A04](*(_QWORD *)(a1 + 56));
  if (CFStringCompare(v3, CFSTR("zh-Hans"), 0))
    __assert_rtn("createLXCursorRoot", "LMCompositeLexicon.cpp", 655, "false && \"not implemented\"");
  result = (_QWORD *)operator new();
  *result = &off_1E3D35378;
  result[1] = 0;
  *a2 = result;
  return result;
}

uint64_t sub_19C413AF4(uint64_t a1)
{
  return *(_QWORD *)(a1 + 56);
}

_QWORD *sub_19C413AFC(uint64_t a1)
{
  return sub_19C413D50((_QWORD *)(a1 - 16));
}

void sub_19C413B04(uint64_t a1)
{
  sub_19C413D50((_QWORD *)(a1 - 16));
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C413B2C(uint64_t a1, const __CFString *a2, double *a3)
{
  return sub_19C413468((_QWORD *)(a1 - 16), a2, a3);
}

uint64_t sub_19C413B34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFStringRef v5;
  uint64_t v6;

  v5 = sub_19C2E1370(a2);
  v6 = (*(uint64_t (**)(uint64_t, CFStringRef, uint64_t))(*(_QWORD *)(a1 - 16) + 16))(a1 - 16, v5, a3);
  if (v5)
    CFRelease(v5);
  return v6;
}

void sub_19C413B98(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_19C413BB4(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v7;
  const __CFString *v8;

  v4 = *(_QWORD **)(a1 + 8);
  v5 = *(_QWORD **)(a1 + 16);
  if (v4 == v5)
  {
LABEL_4:
    v8 = 0;
  }
  else
  {
    while (1)
    {
      v7 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v4 + 128))(*v4, a2);
      if (v7)
        break;
      if (++v4 == v5)
        goto LABEL_4;
    }
    v8 = (const __CFString *)v7;
  }
  sub_19C29CEF8(v8, a3);
  if (v8)
    CFRelease(v8);
}

void sub_19C413C3C(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C413C58@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  v2 = *(_QWORD **)(result + 8);
  if (v2 != *(_QWORD **)(result + 16))
    return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v2 + 136))(*v2);
  *a2 = 0;
  return result;
}

CFComparisonResult sub_19C413C7C(uint64_t a1)
{
  const __CFString *v1;
  CFComparisonResult result;

  v1 = (const __CFString *)MEMORY[0x1A1AD2A04](*(_QWORD *)(a1 + 40));
  result = CFStringCompare(v1, CFSTR("zh-Hans"), 0);
  if (result)
    __assert_rtn("enumerateSortkeyEquivalentEntries", "LMCompositeLexicon.cpp", 648, "false && \"not implemented\"");
  return result;
}

_QWORD *sub_19C413CC8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  const __CFString *v3;
  _QWORD *result;

  v3 = (const __CFString *)MEMORY[0x1A1AD2A04](*(_QWORD *)(a1 + 40));
  if (CFStringCompare(v3, CFSTR("zh-Hans"), 0))
    __assert_rtn("createLXCursorRoot", "LMCompositeLexicon.cpp", 655, "false && \"not implemented\"");
  result = (_QWORD *)operator new();
  *result = &off_1E3D35378;
  result[1] = 0;
  *a2 = result;
  return result;
}

uint64_t sub_19C413D48(uint64_t a1)
{
  return *(_QWORD *)(a1 + 40);
}

_QWORD *sub_19C413D50(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  const void *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;

  *a1 = &off_1E3D35608;
  a1[2] = &unk_1E3D35660;
  if (a1[6])
  {
    v2 = a1[3];
    if (a1[4] != v2)
    {
      v3 = 0;
      do
      {
        if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(v2 + 8 * v3) + 144))(*(_QWORD *)(v2 + 8 * v3)))
        {
          v4 = (_QWORD *)a1[6];
          if (v4[7])
          {
            v5 = 0;
            do
            {
              v6 = *(_QWORD *)(a1[3] + 8 * v3);
              (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v6 + 152))(v6, *(_QWORD *)(*v4 + ((v5 >> 4) & 0xFFFFFFFFFFFFFF8))+ v4[5] * (v5 & 0x7F)+ ((uint64_t)(0x5000000000 * v3 + 0x5000000000) >> 32));
              ++v5;
              v4 = (_QWORD *)a1[6];
            }
            while (v5 < v4[7]);
          }
        }
        ++v3;
        v2 = a1[3];
      }
      while (v3 < (a1[4] - v2) >> 3);
    }
  }
  v7 = (const void *)a1[7];
  if (v7)
    CFRelease(v7);
  v8 = (_QWORD *)a1[6];
  a1[6] = 0;
  a1[7] = 0;
  if (v8)
  {
    v9 = (_QWORD *)*v8;
    if (*v8)
    {
      v10 = (_QWORD *)v8[1];
      v11 = (_QWORD *)*v8;
      if (v10 != v9)
      {
        do
        {
          v13 = *--v10;
          v12 = v13;
          *v10 = 0;
          if (v13)
            MEMORY[0x1A1AD3538](v12, 0x1000C8077774924);
        }
        while (v10 != v9);
        v11 = (_QWORD *)*v8;
      }
      v8[1] = v9;
      operator delete(v11);
    }
    MEMORY[0x1A1AD355C](v8, 0x1030C404F540F20);
  }
  v14 = (_QWORD *)a1[3];
  if (v14)
  {
    v15 = (_QWORD *)a1[4];
    v16 = (void *)a1[3];
    if (v15 != v14)
    {
      do
      {
        v18 = *--v15;
        v17 = v18;
        *v15 = 0;
        if (v18)
          (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
      }
      while (v15 != v14);
      v16 = (void *)a1[3];
    }
    a1[4] = v14;
    operator delete(v16);
  }
  return a1;
}

uint64_t sub_19C413F1C(_QWORD *a1)
{
  uint64_t result;
  size_t v3;
  void *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  result = a1[4];
  v3 = result - a1[3];
  if (v3 == a1[6])
  {
    v4 = (void *)operator new[]();
    bzero(v4, v3);
    v8 = (uint64_t)v4;
    a1[3] = v4;
    a1[4] = v4;
    v5 = (_QWORD *)a1[1];
    if ((unint64_t)v5 >= a1[2])
    {
      v6 = sub_19C41414C(a1, &v8);
      v7 = v8;
      a1[1] = v6;
      if (v7)
        MEMORY[0x1A1AD3538](v7, 0x1000C8077774924);
    }
    else
    {
      *v5 = v4;
      a1[1] = v5 + 1;
    }
    result = a1[4];
  }
  ++a1[7];
  a1[4] = result + a1[5];
  return result;
}

void sub_19C413FF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    MEMORY[0x1A1AD3538](a10, 0x1000C8077774924);
  _Unwind_Resume(exception_object);
}

void sub_19C414018(uint64_t a1, int a2, char *cStr, double a4, uint64_t a5, uint64_t a6, _BYTE *a7)
{
  const __CFString *v11;
  const __CFString *v12;

  if (cStr)
  {
    v11 = CFStringCreateWithCStringNoCopy(0, cStr, 0x8000100u, (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
    if (v11)
    {
      v12 = v11;
      if (CFStringCompare(*(CFStringRef *)(a1 + 48), v11, 0) == kCFCompareEqualTo)
      {
        *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = a2;
        *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8)
                                                                                + 24)
                                                                    * a4;
        *a7 = 1;
      }
      CFRelease(v12);
    }
  }
  else if (a2)
  {
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = a2;
    *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8)
                                                                            + 24)
                                                                * a4;
    *a7 = 1;
  }
}

uint64_t sub_19C4140FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _BYTE *a6)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))
    *a6 = 1;
  return result;
}

_QWORD *sub_19C41414C(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;

  v2 = a1[1] - *a1;
  v3 = v2 >> 3;
  v4 = (v2 >> 3) + 1;
  if (v4 >> 61)
    sub_19C2A18E8();
  v7 = a1[2] - *a1;
  if (v7 >> 2 > v4)
    v4 = v7 >> 2;
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8)
    v8 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v8 = v4;
  if (v8)
  {
    if (v8 >> 61)
      sub_19C2A143C();
    v9 = (char *)operator new(8 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[8 * v3];
  v11 = &v9[8 * v8];
  v12 = *a2;
  *a2 = 0;
  *(_QWORD *)v10 = v12;
  v13 = v10 + 8;
  v14 = (char *)*a1;
  v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v10;
    a1[1] = v13;
    a1[2] = v11;
    goto LABEL_25;
  }
  v16 = (unint64_t)&v15[-*a1 - 8];
  if (v16 > 0x77
    && (&v15[-(v16 & 0xFFFFFFFFFFFFFFF8) - 8] >= v10 || &v9[v2 - (v16 & 0xFFFFFFFFFFFFFFF8) - 8] >= v15))
  {
    v17 = (v16 >> 3) + 1;
    v10 -= 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    v18 = v15 - 32;
    v19 = &v9[8 * v3 - 16];
    v20 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v22 = *(_OWORD *)v18;
      v21 = *((_OWORD *)v18 + 1);
      *(_OWORD *)v18 = 0uLL;
      *((_OWORD *)v18 + 1) = 0uLL;
      v18 -= 32;
      *((_OWORD *)v19 - 1) = v22;
      *(_OWORD *)v19 = v21;
      v19 -= 32;
      v20 -= 4;
    }
    while (v20);
    if (v17 == (v17 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_20;
    v15 -= 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
  }
  do
  {
    v23 = *((_QWORD *)v15 - 1);
    v15 -= 8;
    *(_QWORD *)v15 = 0;
    *((_QWORD *)v10 - 1) = v23;
    v10 -= 8;
  }
  while (v15 != v14);
LABEL_20:
  v15 = (char *)*a1;
  v24 = (char *)a1[1];
  *a1 = v10;
  a1[1] = v13;
  a1[2] = v11;
  while (v24 != v15)
  {
    v26 = *((_QWORD *)v24 - 1);
    v24 -= 8;
    v25 = v26;
    *(_QWORD *)v24 = 0;
    if (v26)
      MEMORY[0x1A1AD3538](v25, 0x1000C8077774924);
  }
LABEL_25:
  if (v15)
    operator delete(v15);
  return v13;
}

uint64_t sub_19C4142E8(const __CFLocale *a1, int a2)
{
  const __CFString *Value;
  const __CFString *v4;

  if (!a2)
    return 0xFFFFFFFFLL;
  Value = (const __CFString *)CFLocaleGetValue(a1, (CFLocaleKey)*MEMORY[0x1E0C9B088]);
  v4 = (const __CFString *)CFLocaleGetValue(a1, (CFLocaleKey)*MEMORY[0x1E0C9B090]);
  if (CFStringCompare(Value, CFSTR("zh"), 0) == kCFCompareEqualTo)
    return v4 && CFStringCompare(v4, CFSTR("Hant"), 0) == kCFCompareEqualTo;
  if (CFStringCompare(Value, CFSTR("yue"), 0))
  {
    if (CFStringCompare(Value, CFSTR("ja"), 0))
      return 0xFFFFFFFFLL;
    else
      return 2;
  }
  else if (v4)
  {
    if (CFStringCompare(v4, CFSTR("Hant"), 0))
      return 0xFFFFFFFFLL;
    else
      return 3;
  }
  else
  {
    return 0xFFFFFFFFLL;
  }
}

void sub_19C4143E8(const __CFDictionary *a1, const __CFLocale *a2, uint64_t a3, uint64_t a4)
{
  const __CFString *Value;
  _BOOL4 v9;
  const __CFArray *v10;
  CFTypeID TypeID;
  CFTypeRef *v12;
  unint64_t v13;
  int64_t v14;
  _QWORD *v15;
  CFTypeRef v16;
  const void *v17;
  const void *v18;
  CFTypeRef *v19;
  CFTypeRef *v20;
  void *v21;
  const void *v22;
  const void *v23;
  void *v24;
  unint64_t j;
  const void *v26;
  const void *v27;
  void *v28;
  unint64_t k;
  const void *v30;
  const void *v31;
  CFTypeRef *v32;
  char *v33;
  void *v34;
  const void *v35;
  const void *v36;
  unint64_t i;
  const void *v38;
  const void *v39;
  const __CFString *v40;
  __CFArray *v41;
  CFTypeRef v42;
  CFTypeID v43;
  CFIndex Count;
  int v45;
  CFTypeRef *v46;
  char *v47;
  CFIndex v48;
  uint64_t v49;
  char *v50;
  const void *ValueAtIndex;
  const void *v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  char *v56;
  char *v57;
  char *v58;
  int64_t v59;
  unint64_t v60;
  char *v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  __int128 v66;
  uint64_t v67;
  const void *v68;
  const void *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  unint64_t v73;
  int64_t v74;
  int64_t v75;
  char *v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  CFTypeRef *v83;
  CFTypeRef *v84;
  char *v85;
  CFTypeRef v86;
  char *v87;
  uint64_t v88;
  char *v89;
  char *v90;
  CFTypeRef v91;
  char *v92;
  char *v93;
  unint64_t v94;
  char *v95;
  unint64_t v96;
  unint64_t v97;
  char *v98;
  BOOL v99;
  uint64_t v100;
  _OWORD *v101;
  char *v102;
  uint64_t v103;
  __int128 v104;
  uint64_t v105;
  unint64_t v106;
  char *v107;
  unint64_t v108;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  __int128 v114;
  char *v115;
  uint64_t v116;
  char *v117;
  char *v118;
  unint64_t v119;
  char *v120;
  unint64_t v121;
  unint64_t v122;
  char *v123;
  BOOL v124;
  uint64_t v125;
  uint64_t v126;
  _OWORD *v127;
  char *v128;
  uint64_t v129;
  __int128 v130;
  char *v131;
  uint64_t *v132;
  uint64_t v133;
  uint64_t v134;
  const void *v135;
  CFTypeRef v136;
  char *v137;
  const void *v138;
  const void *v139;
  const void *v140;
  CFTypeID v141;
  uint64_t v142;
  unint64_t v143;
  __CFArray *v144;
  const void *v145;
  CFTypeID v146;
  uint64_t v147;
  const __CFDictionary *v148;
  const void *v149;
  CFTypeID v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  const __CFArray *v154;
  const __CFString *v155;
  CFAllocatorRef *v156;
  CFLocaleRef v157;
  const __CFString *v158;
  uint64_t v159;
  const __CFArray *v160;
  CFIndex v161;
  CFIndex v162;
  CFIndex v163;
  const __CFAllocator *v164;
  __CFArray *MutableCopy;
  CFIndex v166;
  const __CFURL *v167;
  CFURLRef v168;
  __CFArray *v169;
  const void *v170;
  CFTypeID v171;
  uint64_t v172;
  const __CFArray *v173;
  char *v174;
  char *v175;
  const void *v176;
  const void *v177;
  const __CFArray *v178;
  const __CFString *v179;
  const __CFString *v180;
  const __CFString *v181;
  __n128 *v182;
  std::__shared_weak_count *v183;
  unint64_t *p_shared_owners;
  unint64_t v185;
  __n128 *v186;
  unint64_t *v187;
  unint64_t v188;
  const __CFString *v189;
  const __CFString *v190;
  CFComparisonResult v191;
  int v192;
  int v193;
  std::__shared_weak_count *v194;
  unint64_t *v195;
  unint64_t v196;
  const __CFString *v197;
  const __CFString *v198;
  const __CFString *v199;
  const __CFString *v200;
  std::__shared_weak_count *v201;
  unint64_t *v202;
  unint64_t v203;
  const __CFString *v204;
  __n128 *v205;
  unint64_t v206;
  unint64_t *v207;
  unint64_t v208;
  __n128 *v209;
  BOOL v210;
  __n128 *v211;
  unint64_t v212;
  unint64_t *v213;
  unint64_t v214;
  __n128 *v215;
  std::__shared_weak_count *v216;
  unint64_t *v217;
  unint64_t v218;
  unint64_t *v219;
  char *v220;
  char *m;
  const void *v222;
  const void *v223;
  uint64_t v224;
  unint64_t v225;
  __int128 *v226;
  char *v227;
  uint64_t v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  void *exception;
  uint64_t v233;
  int64_t v234;
  int64_t v235;
  char *v236;
  char *v237;
  char *v238;
  unint64_t v239;
  int64_t v240;
  uint64_t v241;
  int v242;
  uint64_t v243;
  _BOOL4 v244;
  const __CFLocale *locale;
  __CFArray *Mutable;
  __CFArray *theArray;
  const __CFDictionary *theDict;
  unint64_t theDict_8;
  char *v250;
  char *v251;
  CFTypeRef cf;
  void *__p;
  CFTypeRef *v254;
  void *v255;
  char *v256;
  _QWORD *v257;
  void *v258[2];
  uint64_t v259;
  const __CFArray *v260;
  const __CFLocale *v261;
  const __CFArray *v262;
  __n128 v263;
  void (*v264)(uint64_t, const void *, int, int, CFStringRef);
  void *v265;
  __n128 *v266;
  uint64_t v267;
  __n128 v268;
  uint64_t v269;
  CFMutableArrayRef v270;
  CFTypeRef v271[3];
  CFRange v272;
  CFRange v273;
  CFRange v274;

  v271[1] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  if (!a2)
    return;
  v258[0] = 0;
  v258[1] = 0;
  v259 = 0;
  Value = (const __CFString *)CFDictionaryGetValue(a1, (const void *)kLMLanguageModelIsSiriModelKey);
  v244 = sub_19C29CB48(Value, 0);
  v9 = CFDictionaryContainsKey(a1, (const void *)kLMLanguageModelEnableSearchQueryModelLoadingKey) == 0;
  v243 = a3;
  v241 = a4;
  locale = a2;
  theDict = a1;
  v242 = sub_19C4142E8(a2, v9);
  if (!a1)
  {
    v263.n128_u8[0] = 0;
    LOBYTE(v265) = 0;
    goto LABEL_23;
  }
  if (kLMLanguageModelCustomResourceDirectoryKey
    && (v10 = (const __CFArray *)CFDictionaryGetValue(a1, (const void *)kLMLanguageModelCustomResourceDirectoryKey)) != 0
    && (TypeID = CFArrayGetTypeID(), TypeID == CFGetTypeID(v10)))
  {
    sub_19C3478B4((uint64_t)&v263, v10);
    if ((_BYTE)v265)
    {
      v256 = 0;
      v257 = 0;
      v255 = 0;
      v13 = v263.n128_u64[1];
      v12 = (CFTypeRef *)v263.n128_u64[0];
      v14 = v263.n128_u64[1] - v263.n128_u64[0];
      if (v263.n128_u64[1] == v263.n128_u64[0])
      {
        v15 = 0;
        v32 = 0;
      }
      else
      {
        if (v14 < 0)
          sub_19C2A18E8();
        v15 = operator new(v263.n128_u64[1] - v263.n128_u64[0]);
        v255 = v15;
        v256 = (char *)v15;
        v257 = &v15[v14 >> 3];
        do
        {
          v16 = *v12;
          if (*v12)
            CFRetain(*v12);
          *v15++ = v16;
          ++v12;
        }
        while (v12 != (CFTypeRef *)v13);
        v32 = (CFTypeRef *)v255;
        v256 = (char *)v15;
      }
      sub_19C415DA8(&v268, v32, (CFTypeRef *)v15);
      *(__n128 *)v258 = v268;
      v259 = v269;
      v269 = 0;
      v268 = 0uLL;
      if (!v255)
        goto LABEL_358;
      v33 = v256;
      v34 = v255;
      if (v256 != v255)
      {
        do
        {
          v36 = (const void *)*((_QWORD *)v33 - 1);
          v33 -= 8;
          v35 = v36;
          if (v36)
            CFRelease(v35);
        }
        while (v33 != v255);
        v34 = v255;
      }
      v256 = (char *)v255;
      operator delete(v34);
      if ((_BYTE)v265)
      {
LABEL_358:
        v28 = (void *)v263.n128_u64[0];
        if (v263.n128_u64[0])
        {
          for (i = v263.n128_u64[1]; (void *)i != v28; i -= 8)
          {
            v39 = *(const void **)(i - 8);
            v38 = v39;
            if (v39)
              CFRelease(v38);
          }
LABEL_55:
          operator delete(v28);
          goto LABEL_56;
        }
      }
      goto LABEL_56;
    }
  }
  else
  {
    v263.n128_u8[0] = 0;
    LOBYTE(v265) = 0;
  }
  if (!kLMLanguageModelCustomResourceDirectoryKey
    || (v17 = CFDictionaryGetValue(a1, (const void *)kLMLanguageModelCustomResourceDirectoryKey), (v18 = v17) == 0))
  {
LABEL_23:
    if ((_BYTE)v265)
    {
      v24 = (void *)v263.n128_u64[0];
      if (v263.n128_u64[0])
      {
        for (j = v263.n128_u64[1]; (void *)j != v24; j -= 8)
        {
          v27 = *(const void **)(j - 8);
          v26 = v27;
          if (v27)
            CFRelease(v26);
        }
        operator delete(v24);
      }
    }
    goto LABEL_57;
  }
  CFRetain(v17);
  CFRetain(v18);
  v271[0] = v18;
  sub_19C31CEA4(&__p, v271, 1uLL);
  sub_19C415DA8(&v268, (CFTypeRef *)__p, v254);
  v19 = (CFTypeRef *)__p;
  *(__n128 *)v258 = v268;
  v259 = v269;
  v269 = 0;
  v268 = 0uLL;
  if (__p)
  {
    v20 = v254;
    v21 = __p;
    if (v254 != __p)
    {
      do
      {
        v23 = *--v20;
        v22 = v23;
        if (v23)
          CFRelease(v22);
      }
      while (v20 != v19);
      v21 = __p;
    }
    v254 = v19;
    operator delete(v21);
  }
  if (v271[0])
    CFRelease(v271[0]);
  CFRelease(v18);
  if ((_BYTE)v265)
  {
    v28 = (void *)v263.n128_u64[0];
    if (v263.n128_u64[0])
    {
      for (k = v263.n128_u64[1]; (void *)k != v28; k -= 8)
      {
        v31 = *(const void **)(k - 8);
        v30 = v31;
        if (v31)
          CFRelease(v30);
      }
      goto LABEL_55;
    }
  }
LABEL_56:
  v40 = (const __CFString *)CFDictionaryGetValue(a1, (const void *)kLMLanguageModelAddSystemToCustomResourcesKey);
  if (!sub_19C29CB48(v40, 0))
  {
    Mutable = 0;
    theArray = 0;
    goto LABEL_244;
  }
LABEL_57:
  theArray = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  v41 = sub_19C294FA8(a2);
  sub_19C31D164(&cf, v41);
  v42 = cf;
  if (!cf)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD3154](exception, "Could not construct");
    goto LABEL_351;
  }
  v43 = CFArrayGetTypeID();
  if (v43 != CFGetTypeID(v42))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD3154](exception, "Could not convert");
LABEL_351:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  Count = CFArrayGetCount((CFArrayRef)v42);
  v45 = Count;
  v250 = 0;
  v251 = 0;
  if (Count << 32)
  {
    if (Count << 32 < 0)
      sub_19C2A18E8();
    v46 = (CFTypeRef *)operator new(8 * (int)Count);
    v47 = (char *)&v46[v45];
    v250 = (char *)v46;
    v251 = (char *)v46;
    if (v45 >= 1)
      goto LABEL_62;
  }
  else
  {
    v47 = 0;
    v46 = 0;
    if ((int)Count >= 1)
    {
LABEL_62:
      v48 = 0;
      v49 = v45;
      v50 = (char *)v46;
      while (1)
      {
        ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)v42, v48);
        v52 = ValueAtIndex;
        if (ValueAtIndex)
          CFRetain(ValueAtIndex);
        sub_19C2952E8(&v263, v52);
        if (v50 >= v47)
          break;
        *(_QWORD *)v50 = v263.n128_u64[0];
        v50 += 8;
LABEL_64:
        if (++v48 == v49)
        {
          v251 = v50;
          v250 = (char *)v46;
          goto LABEL_99;
        }
      }
      v53 = (v50 - (char *)v46) >> 3;
      v54 = v53 + 1;
      if ((unint64_t)(v53 + 1) >> 61)
        sub_19C2A18E8();
      if ((v47 - (char *)v46) >> 2 > v54)
        v54 = (v47 - (char *)v46) >> 2;
      if ((unint64_t)(v47 - (char *)v46) >= 0x7FFFFFFFFFFFFFF8)
        v55 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v55 = v54;
      if (v55)
      {
        if (v55 >> 61)
          sub_19C2A143C();
        v56 = (char *)operator new(8 * v55);
      }
      else
      {
        v56 = 0;
      }
      v57 = &v56[8 * v53];
      v47 = &v56[8 * v55];
      *(_QWORD *)v57 = v263.n128_u64[0];
      v58 = v57 + 8;
      v263.n128_u64[0] = 0;
      v59 = v50 - (char *)v46;
      if (v50 == (char *)v46)
      {
LABEL_91:
        if (v46)
          operator delete(v46);
        if (v263.n128_u64[0])
          CFRelease((CFTypeRef)v263.n128_u64[0]);
        v46 = (CFTypeRef *)v57;
        v50 = v58;
        goto LABEL_64;
      }
      v60 = v59 - 8;
      if ((unint64_t)(v59 - 8) >= 0x78)
      {
        if (&v56[v50 - (char *)v46 - (v60 & 0xFFFFFFFFFFFFFFF8) - 8] >= v50
          || (v61 = v50, &v50[-(v60 & 0xFFFFFFFFFFFFFFF8) - 8] >= v57))
        {
          v62 = (v60 >> 3) + 1;
          v57 -= 8 * (v62 & 0x3FFFFFFFFFFFFFFCLL);
          v63 = v50 - 32;
          v64 = &v56[8 * v53 - 16];
          v65 = v62 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v66 = *((_OWORD *)v63 + 1);
            *((_OWORD *)v64 - 1) = *(_OWORD *)v63;
            *(_OWORD *)v64 = v66;
            *(_OWORD *)v63 = 0uLL;
            *((_OWORD *)v63 + 1) = 0uLL;
            v63 -= 32;
            v64 -= 32;
            v65 -= 4;
          }
          while (v65);
          if (v62 == (v62 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_88:
            while (v50 != (char *)v46)
            {
              v69 = (const void *)*((_QWORD *)v50 - 1);
              v50 -= 8;
              v68 = v69;
              if (v69)
                CFRelease(v68);
            }
            goto LABEL_91;
          }
          v61 = &v50[-8 * (v62 & 0x3FFFFFFFFFFFFFFCLL)];
        }
      }
      else
      {
        v61 = v50;
      }
      do
      {
        v67 = *((_QWORD *)v61 - 1);
        v61 -= 8;
        *((_QWORD *)v57 - 1) = v67;
        v57 -= 8;
        *(_QWORD *)v61 = 0;
      }
      while (v61 != (char *)v46);
      goto LABEL_88;
    }
  }
  v50 = (char *)v46;
LABEL_99:
  v70 = v50 - (char *)v46;
  if (v50 - (char *)v46 >= 1)
  {
    v71 = v70 >> 3;
    v73 = (unint64_t)v258[0];
    v72 = (char *)v258[1];
    v74 = (char *)v258[1] - (char *)v258[0];
    v75 = ((char *)v258[1] - (char *)v258[0]) >> 3;
    v76 = (char *)v258[0] + (((char *)v258[1] - (char *)v258[0]) & 0xFFFFFFFFFFFFFFF8);
    if (v70 >> 3 > (int64_t)(v259 - (unint64_t)v258[1]) >> 3)
    {
      v239 = (char *)v258[1] - (char *)v258[0];
      v77 = v75 + v71;
      if ((unint64_t)(v75 + v71) >> 61)
        sub_19C2A18E8();
      v78 = v259 - (unint64_t)v258[0];
      if ((int64_t)(v259 - (unint64_t)v258[0]) >> 2 > v77)
        v77 = v78 >> 2;
      if ((unint64_t)v78 >= 0x7FFFFFFFFFFFFFF8)
        v79 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v79 = v77;
      if (v79)
      {
        if (v79 >> 61)
          sub_19C2A143C();
        v80 = (char *)operator new(8 * v79);
      }
      else
      {
        v80 = 0;
      }
      v235 = v75;
      v87 = &v80[8 * v75];
      v236 = &v80[8 * v79];
      v238 = v80;
      v88 = 8 * v71;
      v89 = &v87[8 * v71];
      v233 = v88;
      v90 = v87;
      do
      {
        v91 = *v46;
        if (*v46)
          CFRetain(*v46);
        *(_QWORD *)v90 = v91;
        v90 += 8;
        ++v46;
        v88 -= 8;
      }
      while (v88);
      if (v239 < 8)
      {
        v92 = v236;
        v93 = v238;
        goto LABEL_139;
      }
      v94 = (v239 & 0xFFFFFFFFFFFFFFF8) - 8;
      v92 = v236;
      if (v94 >= 0x78)
      {
        v96 = (v239 & 0xFFFFFFFFFFFFFFF8) - (v94 & 0xFFFFFFFFFFFFFFF8) - 8;
        v93 = v238;
        v97 = (unint64_t)&v238[v96];
        v98 = (char *)(v73 + v96);
        v99 = v97 >= (unint64_t)v76 || v98 >= v87;
        v95 = v76;
        if (v99)
        {
          v100 = (v94 >> 3) + 1;
          v87 -= 8 * (v100 & 0x3FFFFFFFFFFFFFFCLL);
          v101 = (_OWORD *)(8 * v235 + v73 - 32);
          v102 = &v238[8 * v235 - 16];
          v103 = v100 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v104 = v101[1];
            *((_OWORD *)v102 - 1) = *v101;
            *(_OWORD *)v102 = v104;
            *v101 = 0uLL;
            v101[1] = 0uLL;
            v101 -= 2;
            v102 -= 32;
            v103 -= 4;
          }
          while (v103);
          if (v100 == (v100 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_139;
          v95 = &v76[-8 * (v100 & 0x3FFFFFFFFFFFFFFCLL)];
        }
      }
      else
      {
        v95 = v76;
        v93 = v238;
      }
      do
      {
        v105 = *((_QWORD *)v95 - 1);
        v95 -= 8;
        *((_QWORD *)v87 - 1) = v105;
        v87 -= 8;
        *(_QWORD *)v95 = 0;
      }
      while (v95 != (char *)v73);
      v72 = (char *)v258[1];
LABEL_139:
      if (v72 == v76)
      {
LABEL_182:
        v137 = (char *)v258[0];
        v258[0] = v87;
        v258[1] = v89;
        v259 = (uint64_t)v92;
        while (v76 != v137)
        {
          v139 = (const void *)*((_QWORD *)v76 - 1);
          v76 -= 8;
          v138 = v139;
          if (v139)
            CFRelease(v138);
        }
        if (v137)
          operator delete(v137);
        goto LABEL_188;
      }
      v106 = (unint64_t)&v72[-(v239 & 0xFFFFFFFFFFFFFFF8) - v73 - 8];
      if (v106 >= 0xA8)
      {
        v108 = (v239 & 0xFFFFFFFFFFFFFFF8) + (v106 & 0xFFFFFFFFFFFFFFF8);
        if ((unint64_t)v89 >= v108 + v73 + 8 || v76 >= &v93[v70 + 8 + v108])
        {
          v110 = (v106 >> 3) + 1;
          v111 = 8 * (v110 & 0x3FFFFFFFFFFFFFFCLL);
          v107 = &v76[v111];
          v112 = &v93[8 * v235 + 16 + v233];
          v113 = v110 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v114 = *((_OWORD *)v76 + 1);
            *((_OWORD *)v112 - 1) = *(_OWORD *)v76;
            *(_OWORD *)v112 = v114;
            *(_OWORD *)v76 = 0uLL;
            *((_OWORD *)v76 + 1) = 0uLL;
            v76 += 32;
            v112 += 32;
            v113 -= 4;
          }
          while (v113);
          v89 += v111;
          if (v110 == (v110 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_181;
        }
        else
        {
          v107 = v76;
        }
      }
      else
      {
        v107 = v76;
      }
      do
      {
        *(_QWORD *)v89 = *(_QWORD *)v107;
        v89 += 8;
        *(_QWORD *)v107 = 0;
        v107 += 8;
      }
      while (v107 != v72);
LABEL_181:
      v76 = v72;
      goto LABEL_182;
    }
    v81 = (char *)v258[1] - (char *)v76;
    v82 = ((char *)v258[1] - (char *)v76) >> 3;
    if (v82 >= v71)
    {
      v83 = &v46[v71];
      v85 = (char *)v258[1];
      goto LABEL_153;
    }
    v83 = &v46[v82];
    if (v83 == (CFTypeRef *)v50)
    {
      v85 = (char *)v258[1];
    }
    else
    {
      v237 = (char *)((char *)v258[1] - (char *)v76);
      v240 = (char *)v258[1] - (char *)v258[0];
      v234 = ((char *)v258[1] - (char *)v258[0]) >> 3;
      v84 = &v46[v82];
      v85 = (char *)v258[1];
      do
      {
        v86 = *v84;
        if (*v84)
          CFRetain(*v84);
        *(_QWORD *)v85 = v86;
        v85 += 8;
        ++v84;
      }
      while (v84 != (CFTypeRef *)v50);
      v75 = v234;
      v81 = (uint64_t)v237;
      v74 = v240;
    }
    v258[1] = v85;
    if (v81 >= 1)
    {
LABEL_153:
      v115 = &v76[8 * v71];
      v116 = v85 - v115;
      v117 = &v85[-8 * v71];
      v118 = v85;
      if (v117 < v72)
      {
        v119 = (v74 & 0xFFFFFFFFFFFFFFF8) + v116;
        v120 = (char *)(v119 + v73);
        v121 = v119 + v73 + 8;
        if ((unint64_t)v72 > v121)
          v121 = (unint64_t)v72;
        v122 = v121 + ~v73 - v119;
        v123 = &v85[-8 * v71];
        v118 = v85;
        if (v122 <= 0xE7)
          goto LABEL_359;
        v124 = v85 >= &v120[(v122 & 0xFFFFFFFFFFFFFFF8) + 8] || v117 >= &v85[(v122 & 0xFFFFFFFFFFFFFFF8) + 8];
        v123 = &v85[-8 * v71];
        v118 = v85;
        if (!v124)
          goto LABEL_359;
        v125 = (v122 >> 3) + 1;
        v126 = 8 * (v125 & 0x3FFFFFFFFFFFFFFCLL);
        v123 = &v117[v126];
        v127 = v85 + 16;
        v128 = &v85[-8 * v71];
        v129 = v125 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v130 = *((_OWORD *)v128 + 1);
          *(v127 - 1) = *(_OWORD *)v128;
          *v127 = v130;
          *(_OWORD *)v128 = 0uLL;
          *((_OWORD *)v128 + 1) = 0uLL;
          v128 += 32;
          v127 += 2;
          v129 -= 4;
        }
        while (v129);
        v118 = &v85[v126];
        if (v125 != (v125 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_359:
          do
          {
            *(_QWORD *)v118 = *(_QWORD *)v123;
            v118 += 8;
            *(_QWORD *)v123 = 0;
            v123 += 8;
          }
          while (v123 < v72);
        }
      }
      v258[1] = v118;
      if (v85 == v115)
        goto LABEL_173;
      if ((unint64_t)(v116 - 8) >= 0x68
        && (&v85[-(v116 & 0xFFFFFFFFFFFFFFF8)] >= v117
         || v73 + v116 + (v74 & 0xFFFFFFFFFFFFFFF8) - (v116 & 0xFFFFFFFFFFFFFFF8) >= (unint64_t)v85))
      {
        v224 = v116 >> 3;
        v225 = ((unint64_t)(v116 - 8) >> 3) + 1;
        v131 = &v85[-8 * (v225 & 0x3FFFFFFFFFFFFFFCLL)];
        v226 = (__int128 *)(8 * v224 + 8 * v75 + v73 - 16);
        v227 = v85 - 16;
        v228 = v225 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v230 = *((_OWORD *)v227 - 1);
          v229 = *(_OWORD *)v227;
          v231 = *v226;
          *((_OWORD *)v227 - 1) = *(v226 - 1);
          *(_OWORD *)v227 = v231;
          *(v226 - 1) = v230;
          *v226 = v229;
          v226 -= 2;
          v227 -= 32;
          v228 -= 4;
        }
        while (v228);
        if (v225 == (v225 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_173:
          while (v46 != v83)
          {
            v135 = *(const void **)v76;
            v136 = *v46;
            *(_QWORD *)v76 = *v46;
            if (v136)
              CFRetain(v136);
            if (v135)
              CFRelease(v135);
            ++v46;
            v76 += 8;
          }
          goto LABEL_188;
        }
        v117 -= 8 * (v225 & 0x3FFFFFFFFFFFFFFCLL);
      }
      else
      {
        v131 = v85;
      }
      v132 = (uint64_t *)(v131 - 8);
      do
      {
        v133 = *((_QWORD *)v117 - 1);
        v117 -= 8;
        v134 = *v132;
        *v132-- = v133;
        *(_QWORD *)v117 = v134;
      }
      while (v117 != v76);
      goto LABEL_173;
    }
  }
LABEL_188:
  if (!v244)
  {
    v148 = theDict;
    if (theDict)
    {
      if (CFDictionaryContainsKey(theDict, (const void *)kLMLanguageModelShouldExcludeMobileAssetsKey))
      {
        v149 = CFDictionaryGetValue(theDict, (const void *)kLMLanguageModelShouldExcludeMobileAssetsKey);
        v150 = CFGetTypeID(v149);
        if (v150 == CFBooleanGetTypeID())
          CFBooleanGetValue((CFBooleanRef)v149);
      }
    }
    v151 = *MEMORY[0x1E0D43860];
    v268.n128_u64[0] = 0;
    v268.n128_u64[1] = (unint64_t)&v268;
    v269 = 0x2000000000;
    v270 = 0;
    v270 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
    v152 = MEMORY[0x1E0C809B0];
    v263.n128_u64[0] = MEMORY[0x1E0C809B0];
    v263.n128_u64[1] = 0x40000000;
    v264 = sub_19C29CAF8;
    v265 = &unk_1E3D3A0E0;
    v266 = &v268;
    v267 = v151;
    LDEnumerateAssetDataItems();
    v144 = *(__CFArray **)(v268.n128_u64[1] + 24);
    _Block_object_dispose(&v268, 8);
    v271[0] = v144;
    v153 = *MEMORY[0x1E0D43868];
    v268.n128_u64[0] = 0;
    v268.n128_u64[1] = (unint64_t)&v268;
    v269 = 0x2000000000;
    v270 = 0;
    v270 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
    v263.n128_u64[0] = v152;
    v263.n128_u64[1] = 0x40000000;
    v264 = sub_19C29CAF8;
    v265 = &unk_1E3D3A0E0;
    v266 = &v268;
    v267 = v153;
    LDEnumerateAssetDataItems();
    v154 = *(const __CFArray **)(v268.n128_u64[1] + 24);
    _Block_object_dispose(&v268, 8);
    v262 = v154;
    v155 = (const __CFString *)CFLocaleGetValue(locale, (CFLocaleKey)*MEMORY[0x1E0C9B090]);
    v261 = 0;
    CFRetain(locale);
    v261 = locale;
    v156 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
    v157 = locale;
    if (v155)
    {
      v157 = locale;
      if (CFStringCompare(v155, CFSTR("Latn"), 0) == kCFCompareEqualTo)
      {
        v158 = (const __CFString *)CFLocaleGetValue(locale, (CFLocaleKey)*MEMORY[0x1E0C9B088]);
        v157 = CFLocaleCreate(*v156, v158);
        CFRelease(locale);
        v261 = v157;
      }
    }
    v159 = *MEMORY[0x1E0D438A0];
    v268.n128_u64[0] = 0;
    v268.n128_u64[1] = (unint64_t)&v268;
    v269 = 0x2000000000;
    v270 = 0;
    v270 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
    v263.n128_u64[0] = MEMORY[0x1E0C809B0];
    v263.n128_u64[1] = 0x40000000;
    v264 = sub_19C29CAF8;
    v265 = &unk_1E3D3A0E0;
    v266 = &v268;
    v267 = v159;
    LDEnumerateAssetDataItems();
    v160 = *(const __CFArray **)(v268.n128_u64[1] + 24);
    _Block_object_dispose(&v268, 8);
    v260 = v160;
    if (CFArrayGetCount(v154) || CFArrayGetCount(v160))
    {
      v161 = CFArrayGetCount(v144);
      v162 = CFArrayGetCount(v154);
      v163 = v162 + v161 + CFArrayGetCount(v160);
      v164 = *v156;
      MutableCopy = CFArrayCreateMutableCopy(*v156, v163, v144);
      v166 = 0;
      v263.n128_u64[0] = (unint64_t)MutableCopy;
      while (v166 < CFArrayGetCount(v154))
      {
        v167 = (const __CFURL *)CFArrayGetValueAtIndex(v154, v166);
        v168 = CFURLCreateCopyAppendingPathComponent(v164, v167, CFSTR("morpheme.dat"), 0);
        v268.n128_u64[0] = (unint64_t)v168;
        CFArrayAppendValue(MutableCopy, v168);
        if (v168)
          CFRelease(v168);
        ++v166;
      }
      v272.length = CFArrayGetCount(v160);
      v272.location = 0;
      CFArrayAppendArray(MutableCopy, v160, v272);
      v169 = v144;
      v144 = MutableCopy;
      v148 = theDict;
      if (!v160)
        goto LABEL_214;
    }
    else
    {
      v169 = 0;
      v271[0] = 0;
      if (!v160)
        goto LABEL_214;
    }
    CFRelease(v160);
LABEL_214:
    if (v157)
      CFRelease(v157);
    if (v154)
      CFRelease(v154);
    if (v169)
      CFRelease(v169);
    if (v148)
    {
      if (CFDictionaryContainsKey(v148, (const void *)kLMLanguageModelShouldExcludeMobileAssetsKey))
      {
        v170 = CFDictionaryGetValue(v148, (const void *)kLMLanguageModelShouldExcludeMobileAssetsKey);
        v171 = CFGetTypeID(v170);
        if (v171 == CFBooleanGetTypeID())
          CFBooleanGetValue((CFBooleanRef)v170);
      }
    }
    v172 = *MEMORY[0x1E0D43840];
    v268.n128_u64[0] = 0;
    v268.n128_u64[1] = (unint64_t)&v268;
    v269 = 0x2000000000;
    v270 = 0;
    v270 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
    v263.n128_u64[0] = MEMORY[0x1E0C809B0];
    v263.n128_u64[1] = 0x40000000;
    v264 = sub_19C29CAF8;
    v265 = &unk_1E3D3A0E0;
    v266 = &v268;
    v267 = v172;
    LDEnumerateAssetDataItems();
    goto LABEL_225;
  }
  if (theDict)
  {
    if (CFDictionaryContainsKey(theDict, (const void *)kLMLanguageModelShouldExcludeMobileAssetsKey))
    {
      v140 = CFDictionaryGetValue(theDict, (const void *)kLMLanguageModelShouldExcludeMobileAssetsKey);
      v141 = CFGetTypeID(v140);
      if (v141 == CFBooleanGetTypeID())
        CFBooleanGetValue((CFBooleanRef)v140);
    }
  }
  v142 = *MEMORY[0x1E0D43890];
  v268.n128_u64[0] = 0;
  v268.n128_u64[1] = (unint64_t)&v268;
  v269 = 0x2000000000;
  v270 = 0;
  v270 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  v143 = MEMORY[0x1E0C809B0];
  v263.n128_u64[0] = MEMORY[0x1E0C809B0];
  v263.n128_u64[1] = 0x40000000;
  v264 = sub_19C29CAF8;
  v265 = &unk_1E3D3A0E0;
  v266 = &v268;
  v267 = v142;
  LDEnumerateAssetDataItems();
  v144 = *(__CFArray **)(v268.n128_u64[1] + 24);
  _Block_object_dispose(&v268, 8);
  if (theDict)
  {
    if (CFDictionaryContainsKey(theDict, (const void *)kLMLanguageModelShouldExcludeMobileAssetsKey))
    {
      v145 = CFDictionaryGetValue(theDict, (const void *)kLMLanguageModelShouldExcludeMobileAssetsKey);
      v146 = CFGetTypeID(v145);
      if (v146 == CFBooleanGetTypeID())
        CFBooleanGetValue((CFBooleanRef)v145);
    }
  }
  v147 = *MEMORY[0x1E0D43898];
  v268.n128_u64[0] = 0;
  v268.n128_u64[1] = (unint64_t)&v268;
  v269 = 0x2000000000;
  v270 = 0;
  v270 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  v263.n128_u64[0] = v143;
  v263.n128_u64[1] = 0x40000000;
  v264 = sub_19C29CAF8;
  v265 = &unk_1E3D3A0E0;
  v266 = &v268;
  v267 = v147;
  LDEnumerateAssetDataItems();
LABEL_225:
  v173 = *(const __CFArray **)(v268.n128_u64[1] + 24);
  _Block_object_dispose(&v268, 8);
  if (v144 && CFArrayGetCount(v144) >= 1)
  {
    v273.length = CFArrayGetCount(v144);
    v273.location = 0;
    CFArrayAppendArray(theArray, v144, v273);
  }
  if (v173)
  {
    if (CFArrayGetCount(v173) >= 1)
    {
      v274.length = CFArrayGetCount(v173);
      v274.location = 0;
      CFArrayAppendArray(Mutable, v173, v274);
    }
    CFRelease(v173);
  }
  if (v144)
    CFRelease(v144);
  if (v250)
  {
    v174 = v251;
    v175 = v250;
    if (v251 != v250)
    {
      do
      {
        v177 = (const void *)*((_QWORD *)v174 - 1);
        v174 -= 8;
        v176 = v177;
        if (v177)
          CFRelease(v176);
      }
      while (v174 != v250);
      v175 = v250;
    }
    operator delete(v175);
  }
  if (cf)
    CFRelease(cf);
LABEL_244:
  v178 = sub_19C29D8E8((char *)v258[0], (char *)v258[1]);
  if (CFDictionaryContainsKey(theDict, (const void *)kLMLanguageModelCustomLexiconNameKey))
    v179 = (const __CFString *)CFDictionaryGetValue(theDict, (const void *)kLMLanguageModelCustomLexiconNameKey);
  else
    v179 = 0;
  if (CFDictionaryContainsKey(theDict, (const void *)kLMLanguageModelCustomLexiconDeltaNameKey))
    v180 = (const __CFString *)CFDictionaryGetValue(theDict, (const void *)kLMLanguageModelCustomLexiconDeltaNameKey);
  else
    v180 = 0;
  if (v242 != -1)
  {
    if (v179)
      v181 = v179;
    else
      v181 = CFSTR("lexicon");
    sub_19C415F10(&v263, theArray, v178, v181, 18);
    if (v263.n128_u64[0])
    {
      v182 = *(__n128 **)(v243 + 8);
      if ((unint64_t)v182 >= *(_QWORD *)(v243 + 16))
      {
        theDict_8 = v263.n128_u64[1];
        v186 = sub_19C328140(v243, v263);
        v183 = (std::__shared_weak_count *)theDict_8;
      }
      else
      {
        v182->n128_u64[0] = v263.n128_u64[0];
        v183 = (std::__shared_weak_count *)v263.n128_u64[1];
        v182->n128_u64[1] = v263.n128_u64[1];
        if (v183)
        {
          p_shared_owners = (unint64_t *)&v183->__shared_owners_;
          do
            v185 = __ldxr(p_shared_owners);
          while (__stxr(v185 + 1, p_shared_owners));
        }
        v186 = v182 + 1;
      }
      *(_QWORD *)(v243 + 8) = v186;
      if (!v183)
        goto LABEL_330;
    }
    else
    {
      v183 = (std::__shared_weak_count *)v263.n128_u64[1];
      if (!v263.n128_u64[1])
        goto LABEL_330;
    }
    v187 = (unint64_t *)&v183->__shared_owners_;
    do
      v188 = __ldaxr(v187);
    while (__stlxr(v188 - 1, v187));
    goto LABEL_329;
  }
  if (!v179)
  {
    v189 = (const __CFString *)*MEMORY[0x1E0C9B088];
    v190 = (const __CFString *)CFLocaleGetValue(locale, (CFLocaleKey)*MEMORY[0x1E0C9B088]);
    v191 = CFStringCompare(v190, CFSTR("ko"), 0);
    v192 = _os_feature_enabled_impl();
    if (v191)
      v193 = v192;
    else
      v193 = 0;
    if (v193 == 1)
    {
      sub_19C415F10(&v263, theArray, v178, CFSTR("morpheme"), 20);
      if (v263.n128_u64[0])
        goto LABEL_295;
      v194 = (std::__shared_weak_count *)v263.n128_u64[1];
      if (v263.n128_u64[1])
      {
        v195 = (unint64_t *)(v263.n128_u64[1] + 8);
        do
          v196 = __ldaxr(v195);
        while (__stlxr(v196 - 1, v195));
        if (!v196)
        {
          ((void (*)(std::__shared_weak_count *))v194->__on_zero_shared)(v194);
          std::__shared_weak_count::__release_weak(v194);
        }
      }
    }
    if (v244)
    {
      v197 = CFSTR("Siri-Unigrams");
    }
    else
    {
      v198 = (const __CFString *)CFLocaleGetValue(locale, v189);
      v199 = (const __CFString *)CFLocaleGetValue(locale, (CFLocaleKey)*MEMORY[0x1E0C9B090]);
      if (!v198
        || (v200 = v199, CFStringCompare(v198, CFSTR("hi"), 0))
        || !v200
        || CFStringCompare(v200, CFSTR("Latn"), 0))
      {
        sub_19C416210(&v263, theArray, v178, locale, CFSTR("UnifiedTransliteration"), 20);
        if (v263.n128_u64[0])
          goto LABEL_295;
        v201 = (std::__shared_weak_count *)v263.n128_u64[1];
        if (v263.n128_u64[1])
        {
          v202 = (unint64_t *)(v263.n128_u64[1] + 8);
          do
            v203 = __ldaxr(v202);
          while (__stlxr(v203 - 1, v202));
          if (!v203)
          {
            ((void (*)(std::__shared_weak_count *))v201->__on_zero_shared)(v201);
            std::__shared_weak_count::__release_weak(v201);
          }
        }
      }
      v197 = CFSTR("Unigrams");
    }
    sub_19C416210(&v263, theArray, v178, locale, v197, 20);
    goto LABEL_295;
  }
  sub_19C415F10(&v263, theArray, v178, v179, 20);
LABEL_295:
  if (v180)
  {
    sub_19C415F10(&v268, Mutable, v178, v180, 26);
  }
  else
  {
    if (v244)
      v204 = CFSTR("Siri-Delta");
    else
      v204 = CFSTR("Delta");
    sub_19C416210(&v268, Mutable, v178, locale, v204, 26);
  }
  if (v263.n128_u64[0])
  {
    v205 = *(__n128 **)(v243 + 8);
    if ((unint64_t)v205 >= *(_QWORD *)(v243 + 16))
    {
      v209 = sub_19C328140(v243, v263);
    }
    else
    {
      v205->n128_u64[0] = v263.n128_u64[0];
      v206 = v263.n128_u64[1];
      v205->n128_u64[1] = v263.n128_u64[1];
      if (v206)
      {
        v207 = (unint64_t *)(v206 + 8);
        do
          v208 = __ldxr(v207);
        while (__stxr(v208 + 1, v207));
      }
      v209 = v205 + 1;
    }
    *(_QWORD *)(v243 + 8) = v209;
  }
  if (v268.n128_u64[0])
    v210 = !v244;
  else
    v210 = 0;
  if (v210)
  {
    v211 = *(__n128 **)(v241 + 8);
    if ((unint64_t)v211 >= *(_QWORD *)(v241 + 16))
    {
      v215 = sub_19C328140(v241, v268);
    }
    else
    {
      v211->n128_u64[0] = v268.n128_u64[0];
      v212 = v268.n128_u64[1];
      v211->n128_u64[1] = v268.n128_u64[1];
      if (v212)
      {
        v213 = (unint64_t *)(v212 + 8);
        do
          v214 = __ldxr(v213);
        while (__stxr(v214 + 1, v213));
      }
      v215 = v211 + 1;
    }
    *(_QWORD *)(v241 + 8) = v215;
  }
  v216 = (std::__shared_weak_count *)v268.n128_u64[1];
  if (v268.n128_u64[1])
  {
    v217 = (unint64_t *)(v268.n128_u64[1] + 8);
    do
      v218 = __ldaxr(v217);
    while (__stlxr(v218 - 1, v217));
    if (!v218)
    {
      ((void (*)(std::__shared_weak_count *))v216->__on_zero_shared)(v216);
      std::__shared_weak_count::__release_weak(v216);
    }
  }
  v183 = (std::__shared_weak_count *)v263.n128_u64[1];
  if (!v263.n128_u64[1])
    goto LABEL_330;
  v219 = (unint64_t *)(v263.n128_u64[1] + 8);
  do
    v188 = __ldaxr(v219);
  while (__stlxr(v188 - 1, v219));
LABEL_329:
  if (!v188)
  {
    ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
    std::__shared_weak_count::__release_weak(v183);
    if (!theArray)
      goto LABEL_332;
    goto LABEL_331;
  }
LABEL_330:
  if (theArray)
LABEL_331:
    CFRelease(theArray);
LABEL_332:
  if (Mutable)
    CFRelease(Mutable);
  CFRelease(v178);
  v220 = (char *)v258[0];
  if (v258[0])
  {
    for (m = (char *)v258[1]; m != v220; m -= 8)
    {
      v223 = (const void *)*((_QWORD *)m - 1);
      v222 = v223;
      if (v223)
        CFRelease(v222);
    }
    operator delete(v220);
  }
}

void sub_19C415AF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,void *a35)
{
  uint64_t v35;

  sub_19C31D0F8(&a32);
  sub_19C347BD0((char **)(v35 - 208));
  sub_19C347D0C(&a35);
  _Unwind_Resume(a1);
}

void sub_19C415DA8(_QWORD *a1, CFTypeRef *a2, CFTypeRef *a3)
{
  CFTypeRef *v4;
  _QWORD *v6;
  const __CFString *v7;
  CFTypeID v8;
  CFURLRef v9;
  CFTypeID v10;
  CFURLRef v11;
  CFTypeID v12;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2 != a3)
  {
    v4 = a2;
    v6 = 0;
    do
    {
      v7 = (const __CFString *)*v4;
      if (*v4)
      {
        v8 = CFGetTypeID(*v4);
        if (v8 == CFStringGetTypeID())
        {
          v9 = CFURLCreateWithFileSystemPath(0, v7, kCFURLPOSIXPathStyle, 1u);
LABEL_9:
          v11 = v9;
          if (v9)
          {
            v12 = CFGetTypeID(v9);
            if (v12 != CFURLGetTypeID()
              || ((unint64_t)v6 >= a1[2]
                ? (v6 = sub_19C416764((uint64_t)a1, v11))
                : (CFRetain(v11), *v6 = v11, ++v6),
                  a1[1] = v6,
                  v11))
            {
              CFRelease(v11);
            }
          }
          goto LABEL_3;
        }
        v10 = CFGetTypeID(v7);
        if (v10 == CFURLGetTypeID())
        {
          v9 = CFURLCopyAbsoluteURL((CFURLRef)v7);
          goto LABEL_9;
        }
      }
LABEL_3:
      ++v4;
    }
    while (v4 != a3);
  }
}

void sub_19C415ED8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void **v2;
  va_list va;

  va_start(va, a2);
  sub_19C32BC18((const void **)va);
  sub_19C347D0C(v2);
  _Unwind_Resume(a1);
}

void sub_19C415F10(_QWORD *a1, const __CFArray *a2, CFArrayRef theArray, const __CFString *a4, int a5)
{
  const __CFString *v9;
  const __CFURL *v10;
  CFIndex v11;
  const __CFURL *ValueAtIndex;
  const __CFURL *v13;
  const __CFString *v14;
  CFIndex v15;
  const __CFURL *v16;
  CFURLRef v17;
  CFNumberRef v18;
  CFNumberRef v19;
  _QWORD *v20;
  __CFDictionary *theDict;
  uint64_t v22;
  CFTypeRef cf;
  int valuePtr;

  valuePtr = a5;
  v22 = 0;
  cf = 0;
  if (!a2)
    goto LABEL_9;
  v9 = CFStringCreateWithFormat(0, 0, CFSTR("%@.dat"), a4);
  v10 = 0;
  v11 = 0;
  do
  {
    if (v11 >= CFArrayGetCount(a2))
      break;
    ValueAtIndex = (const __CFURL *)CFArrayGetValueAtIndex(a2, v11);
    v13 = CFURLCopyAbsoluteURL(ValueAtIndex);
    v14 = CFURLCopyFileSystemPath(v13, kCFURLPOSIXPathStyle);
    if (CFStringHasSuffix(v14, v9))
    {
      cf = v13;
      v10 = v13;
    }
    else
    {
      CFRelease(v13);
      v13 = 0;
    }
    CFRelease(v14);
    ++v11;
  }
  while (!v13);
  CFRelease(v9);
  if (v10)
  {
LABEL_12:
    theDict = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v17 = CFURLCopyAbsoluteURL(v10);
    v18 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    v19 = CFNumberCreate(0, kCFNumberCFIndexType, &v22);
    CFDictionarySetValue(theDict, CFSTR("URL"), v17);
    CFDictionarySetValue(theDict, CFSTR("Name"), a4);
    CFDictionarySetValue(theDict, CFSTR("Type"), v18);
    CFDictionarySetValue(theDict, CFSTR("Priority"), v19);
    v20 = operator new(0x28uLL);
    v20[1] = 0;
    v20[2] = 0;
    *v20 = &off_1E3D39B70;
    v20[4] = 0;
    v20[3] = CFRetain(theDict);
    *a1 = v20 + 3;
    a1[1] = v20;
    if (v19)
      CFRelease(v19);
    if (v18)
      CFRelease(v18);
    if (v17)
      CFRelease(v17);
    if (theDict)
      CFRelease(theDict);
    if (cf)
      CFRelease(cf);
  }
  else
  {
LABEL_9:
    v15 = 0;
    while (v15 < CFArrayGetCount(theArray))
    {
      v16 = (const __CFURL *)CFArrayGetValueAtIndex(theArray, v15);
      v10 = CFBundleCopyResourceURLInDirectory(v16, a4, CFSTR("dat"), 0);
      cf = v10;
      ++v15;
      if (v10)
        goto LABEL_12;
    }
    *a1 = 0;
    a1[1] = 0;
  }
}

void sub_19C416188(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, const void *a11, const void *a12, const void *a13, uint64_t a14, const void *a15)
{
  std::__shared_weak_count *v15;
  void *v17;

  std::__shared_weak_count::~__shared_weak_count(v15);
  operator delete(v17);
  sub_19C347E20(&a10);
  sub_19C347E20(&a11);
  sub_19C31352C(&a12);
  sub_19C32BBE4(&a13);
  sub_19C31352C(&a15);
  _Unwind_Resume(a1);
}

void sub_19C416210(_QWORD *a1, const __CFArray *a2, const __CFArray *a3, CFLocaleRef locale, const __CFString *a5, int a6)
{
  const __CFString *Value;
  CFTypeRef v12;
  CFTypeRef v13;
  const __CFString *v14;
  const __CFString *v15;
  __int128 v16;
  const __CFString *v17;
  __int128 v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  const __CFString *v24;
  __int128 v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  const __CFString *v32;
  __int128 v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  const __CFString *v40;
  __int128 v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  const __CFString *v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  __int128 v51;
  unint64_t *p_shared_owners;
  unint64_t v53;
  unint64_t *v54;
  __int128 v56;

  *a1 = 0;
  a1[1] = 0;
  Value = (const __CFString *)CFLocaleGetValue(locale, (CFLocaleKey)*MEMORY[0x1E0C9B088]);
  v12 = CFLocaleGetValue(locale, (CFLocaleKey)*MEMORY[0x1E0C9B090]);
  v13 = CFLocaleGetValue(locale, (CFLocaleKey)*MEMORY[0x1E0C9B060]);
  if (CFStringCompare(Value, CFSTR("ars"), 0))
    v14 = Value;
  else
    v14 = CFSTR("ar");
  if (!v12)
  {
    if (v13)
    {
      v48 = CFStringCreateWithFormat(0, 0, CFSTR("%@-%@_%@"), a5, v14, v13);
      sub_19C415F10(&v56, a2, a3, v48, a6);
      v50 = (std::__shared_weak_count *)*((_QWORD *)&v56 + 1);
      v49 = v56;
      *a1 = v56;
      a1[1] = v50;
      CFRelease(v48);
      if (v49)
        return;
    }
    else
    {
      v50 = 0;
    }
    v40 = CFStringCreateWithFormat(0, 0, CFSTR("%@-%@"), a5, v14);
    sub_19C415F10(&v56, a2, a3, v40, a6);
    v51 = v56;
    v56 = 0uLL;
    *(_OWORD *)a1 = v51;
    if (v50)
    {
      p_shared_owners = (unint64_t *)&v50->__shared_owners_;
      do
        v53 = __ldaxr(p_shared_owners);
      while (__stlxr(v53 - 1, p_shared_owners));
      if (!v53)
      {
        ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
        std::__shared_weak_count::__release_weak(v50);
      }
    }
    v45 = (std::__shared_weak_count *)*((_QWORD *)&v56 + 1);
    if (!*((_QWORD *)&v56 + 1))
      goto LABEL_64;
    v54 = (unint64_t *)(*((_QWORD *)&v56 + 1) + 8);
    do
      v47 = __ldaxr(v54);
    while (__stlxr(v47 - 1, v54));
    goto LABEL_62;
  }
  if (!v13)
    goto LABEL_67;
  v15 = CFStringCreateWithFormat(0, 0, CFSTR("%@-%@-%@_%@"), a5, v14, v12, v13);
  sub_19C415F10(&v56, a2, a3, v15, a6);
  v16 = v56;
  *(_OWORD *)a1 = v56;
  CFRelease(v15);
  if (!(_QWORD)v16)
  {
    v17 = CFStringCreateWithFormat(0, 0, CFSTR("%@-%@_%@_%@"), a5, v14, v12, v13);
    sub_19C415F10(&v56, a2, a3, v17, a6);
    v18 = v56;
    v56 = 0uLL;
    *(_OWORD *)a1 = v18;
    if (*((_QWORD *)&v16 + 1))
    {
      v19 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v16 + 1) + 16))(*((_QWORD *)&v16 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v16 + 1));
      }
    }
    v21 = (std::__shared_weak_count *)*((_QWORD *)&v56 + 1);
    if (*((_QWORD *)&v56 + 1))
    {
      v22 = (unint64_t *)(*((_QWORD *)&v56 + 1) + 8);
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    CFRelease(v17);
    if (!*a1)
    {
LABEL_67:
      v24 = CFStringCreateWithFormat(0, 0, CFSTR("%@-%@-%@"), a5, v14, v12);
      sub_19C415F10(&v56, a2, a3, v24, a6);
      v25 = v56;
      v56 = 0uLL;
      v26 = (std::__shared_weak_count *)a1[1];
      *(_OWORD *)a1 = v25;
      if (v26)
      {
        v27 = (unint64_t *)&v26->__shared_owners_;
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      v29 = (std::__shared_weak_count *)*((_QWORD *)&v56 + 1);
      if (*((_QWORD *)&v56 + 1))
      {
        v30 = (unint64_t *)(*((_QWORD *)&v56 + 1) + 8);
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 - 1, v30));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
      CFRelease(v24);
      if (!*a1)
      {
        v32 = CFStringCreateWithFormat(0, 0, CFSTR("%@-%@_%@"), a5, v14, v12);
        sub_19C415F10(&v56, a2, a3, v32, a6);
        v33 = v56;
        v56 = 0uLL;
        v34 = (std::__shared_weak_count *)a1[1];
        *(_OWORD *)a1 = v33;
        if (v34)
        {
          v35 = (unint64_t *)&v34->__shared_owners_;
          do
            v36 = __ldaxr(v35);
          while (__stlxr(v36 - 1, v35));
          if (!v36)
          {
            ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
            std::__shared_weak_count::__release_weak(v34);
          }
        }
        v37 = (std::__shared_weak_count *)*((_QWORD *)&v56 + 1);
        if (*((_QWORD *)&v56 + 1))
        {
          v38 = (unint64_t *)(*((_QWORD *)&v56 + 1) + 8);
          do
            v39 = __ldaxr(v38);
          while (__stlxr(v39 - 1, v38));
          if (!v39)
          {
            ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
            std::__shared_weak_count::__release_weak(v37);
          }
        }
        CFRelease(v32);
        if (!*a1 && CFStringCompare(a5, CFSTR("UnifiedTransliteration"), 0) == kCFCompareEqualTo)
        {
          v40 = CFStringCreateWithFormat(0, 0, CFSTR("%@-%@"), a5, v14);
          sub_19C415F10(&v56, a2, a3, v40, a6);
          v41 = v56;
          v56 = 0uLL;
          v42 = (std::__shared_weak_count *)a1[1];
          *(_OWORD *)a1 = v41;
          if (v42)
          {
            v43 = (unint64_t *)&v42->__shared_owners_;
            do
              v44 = __ldaxr(v43);
            while (__stlxr(v44 - 1, v43));
            if (!v44)
            {
              ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
              std::__shared_weak_count::__release_weak(v42);
            }
          }
          v45 = (std::__shared_weak_count *)*((_QWORD *)&v56 + 1);
          if (!*((_QWORD *)&v56 + 1))
            goto LABEL_64;
          v46 = (unint64_t *)(*((_QWORD *)&v56 + 1) + 8);
          do
            v47 = __ldaxr(v46);
          while (__stlxr(v47 - 1, v46));
LABEL_62:
          if (!v47)
          {
            ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
            std::__shared_weak_count::__release_weak(v45);
          }
LABEL_64:
          CFRelease(v40);
        }
      }
    }
  }
}

void sub_19C41672C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_19C2B43C8(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_19C416764(uint64_t a1, const void *a2)
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  char *v22;
  const void *v23;
  const void *v24;

  v2 = *(char **)a1;
  v3 = *(char **)(a1 + 8);
  v4 = (uint64_t)&v3[-*(_QWORD *)a1];
  v5 = v4 >> 3;
  v6 = (v4 >> 3) + 1;
  if (v6 >> 61)
    sub_19C2A18E8();
  v9 = *(_QWORD *)(a1 + 16) - (_QWORD)v2;
  if (v9 >> 2 > v6)
    v6 = v9 >> 2;
  if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
    v10 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v10 = v6;
  if (!v10)
  {
    v11 = 0;
    if (!a2)
      goto LABEL_13;
    goto LABEL_12;
  }
  if (v10 >> 61)
    sub_19C2A143C();
  v11 = (char *)operator new(8 * v10);
  if (a2)
  {
LABEL_12:
    CFRetain(a2);
    v2 = *(char **)a1;
    v3 = *(char **)(a1 + 8);
  }
LABEL_13:
  v12 = &v11[8 * v5];
  v13 = &v11[8 * v10];
  *(_QWORD *)v12 = a2;
  v14 = v12 + 8;
  if (v3 == v2)
  {
    *(_QWORD *)a1 = v12;
    *(_QWORD *)(a1 + 8) = v14;
    *(_QWORD *)(a1 + 16) = v13;
    goto LABEL_27;
  }
  v15 = v3 - v2 - 8;
  if (v15 > 0x77
    && (&v11[v4 - (v15 & 0xFFFFFFFFFFFFFFF8) - 8] >= v3 || &v3[-(v15 & 0xFFFFFFFFFFFFFFF8) - 8] >= v12))
  {
    v16 = (v15 >> 3) + 1;
    v12 -= 8 * (v16 & 0x3FFFFFFFFFFFFFFCLL);
    v17 = v3 - 32;
    v18 = &v11[8 * v5 - 16];
    v19 = v16 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v20 = *((_OWORD *)v17 + 1);
      *((_OWORD *)v18 - 1) = *(_OWORD *)v17;
      *(_OWORD *)v18 = v20;
      *(_OWORD *)v17 = 0uLL;
      *((_OWORD *)v17 + 1) = 0uLL;
      v17 -= 32;
      v18 -= 32;
      v19 -= 4;
    }
    while (v19);
    if (v16 == (v16 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_22;
    v3 -= 8 * (v16 & 0x3FFFFFFFFFFFFFFCLL);
  }
  do
  {
    v21 = *((_QWORD *)v3 - 1);
    v3 -= 8;
    *((_QWORD *)v12 - 1) = v21;
    v12 -= 8;
    *(_QWORD *)v3 = 0;
  }
  while (v3 != v2);
LABEL_22:
  v2 = *(char **)a1;
  v22 = *(char **)(a1 + 8);
  *(_QWORD *)a1 = v12;
  *(_QWORD *)(a1 + 8) = v14;
  *(_QWORD *)(a1 + 16) = v13;
  while (v22 != v2)
  {
    v24 = (const void *)*((_QWORD *)v22 - 1);
    v22 -= 8;
    v23 = v24;
    if (v24)
      CFRelease(v23);
  }
LABEL_27:
  if (v2)
    operator delete(v2);
  return v14;
}

void ***sub_19C416908(void ***a1)
{
  void **v2;
  char *v3;
  char *v4;
  void *v5;
  const void *v6;
  const void *v7;

  if (!*((_BYTE *)a1 + 8))
  {
    v2 = *a1;
    v3 = (char *)**a1;
    if (v3)
    {
      v4 = (char *)v2[1];
      v5 = **a1;
      if (v4 != v3)
      {
        do
        {
          v7 = (const void *)*((_QWORD *)v4 - 1);
          v4 -= 8;
          v6 = v7;
          if (v7)
            CFRelease(v6);
        }
        while (v4 != v3);
        v5 = **a1;
      }
      v2[1] = v3;
      operator delete(v5);
    }
  }
  return a1;
}

void sub_19C416984(uint64_t a1, CFDictionaryRef theDict, uint64_t *a3, _QWORD *a4)
{
  _BOOL4 v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  const __CFURL *v11;
  const __CFString *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t **v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  char *v20;
  uint64_t v21;
  __int128 v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  const __CFURL *Value;
  CFStringRef v31;
  const __CFURL *v32;
  CFStringRef v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  void *v39;
  _QWORD *v40;
  void *v41;
  _BYTE *exception;
  char *v43;
  _QWORD *v44;
  int v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  CFStringRef v49;
  void *__p[2];
  char v51;

  v7 = CFDictionaryContainsKey(theDict, (const void *)kLMLanguageModelEnableSearchQueryModelLoadingKey) == 0;
  v45 = sub_19C4142E8(*(const __CFLocale **)(a1 + 56), v7);
  v8 = *a3;
  v46 = a3;
  if (a3[1] != *a3)
  {
    v44 = (_QWORD *)(a1 + 24);
    if (v45 == -1)
    {
      v28 = 0;
      v29 = 0;
      do
      {
        Value = (const __CFURL *)CFDictionaryGetValue(**(CFDictionaryRef **)(v8 + v28), CFSTR("URL"));
        v31 = CFURLCopyFileSystemPath(Value, kCFURLPOSIXPathStyle);
        v49 = v31;
        if (v29 >= (uint64_t)(a4[1] - *a4) >> 4)
        {
          v36 = (_QWORD *)operator new();
          sub_19C425508(v36, v31, 0);
          __p[0] = v36;
          v37 = *(_QWORD **)(a1 + 32);
          if ((unint64_t)v37 >= *(_QWORD *)(a1 + 40))
          {
            v38 = sub_19C32F5A4(v44, (uint64_t *)__p);
            v39 = __p[0];
            *(_QWORD *)(a1 + 32) = v38;
            if (v39)
              (*(void (**)(void *))(*(_QWORD *)v39 + 8))(v39);
          }
          else
          {
            *v37 = v36;
            *(_QWORD *)(a1 + 32) = v37 + 1;
          }
        }
        else
        {
          v32 = (const __CFURL *)CFDictionaryGetValue(**(CFDictionaryRef **)(*a4 + v28), CFSTR("URL"));
          v33 = CFURLCopyFileSystemPath(v32, kCFURLPOSIXPathStyle);
          v34 = (_QWORD *)operator new();
          sub_19C425508(v34, v31, v33);
          __p[0] = v34;
          v35 = *(_QWORD **)(a1 + 32);
          if ((unint64_t)v35 >= *(_QWORD *)(a1 + 40))
          {
            v40 = sub_19C32F5A4(v44, (uint64_t *)__p);
            v41 = __p[0];
            *(_QWORD *)(a1 + 32) = v40;
            if (v41)
              (*(void (**)(void *))(*(_QWORD *)v41 + 8))(v41);
          }
          else
          {
            *v35 = v34;
            *(_QWORD *)(a1 + 32) = v35 + 1;
          }
          CFRelease(v33);
        }
        if (v31)
          CFRelease(v31);
        ++v29;
        v8 = *a3;
        v28 += 16;
      }
      while (v29 < (a3[1] - *a3) >> 4);
    }
    else
    {
      v9 = 0;
      v10 = 0;
      do
      {
        v11 = (const __CFURL *)CFDictionaryGetValue(**(CFDictionaryRef **)(v8 + v9), CFSTR("URL"));
        v12 = CFURLCopyFileSystemPath(v11, kCFURLPOSIXPathStyle);
        v49 = v12;
        v13 = (_QWORD *)operator new();
        *v13 = &off_1E3D36698;
        v13[1] = 0;
        v47 = (uint64_t)v13;
        v14 = operator new();
        *(_DWORD *)(v14 + 8) = v45;
        *(_OWORD *)(v14 + 16) = 0u;
        v15 = (uint64_t **)(v14 + 16);
        *(_OWORD *)(v14 + 32) = 0u;
        *(_QWORD *)(v14 + 56) = 0;
        *(_QWORD *)(v14 + 64) = 100;
        *(_DWORD *)(v14 + 72) = 0;
        *(_QWORD *)(v14 + 48) = 0;
        *(_QWORD *)v14 = &off_1E3D37330;
        sub_19C29CEF8(v12, __p);
        sub_19C3663C0((_QWORD *)(v14 + 80), (uint64_t)__p);
        v16 = a1;
        if (v51 < 0)
          operator delete(__p[0]);
        v17 = *(_QWORD *)(v14 + 80);
        v18 = *(_QWORD *)(v14 + 88);
        v19 = (uint64_t *)operator new();
        *v19 = 0;
        __p[0] = (void *)0x11181BE3ELL;
        if (*(_QWORD *)v17 != 0x11181BE3ELL)
        {
          exception = __cxa_allocate_exception(0x20uLL);
          v43 = (char *)operator new(0x20uLL);
          strcpy(v43, "burst trie header check failed");
          *(_QWORD *)exception = off_1E3D38838;
          sub_19C2B5238(exception + 8, v43, 0x1EuLL);
          __cxa_throw(exception, (struct type_info *)&unk_1E3D32968, (void (*)(void *))sub_19C3123E4);
        }
        v20 = (char *)malloc_type_malloc(0x48uLL, 0x108004094C1867FuLL);
        if (v20)
        {
          *((_QWORD *)v20 + 8) = 0;
          *((_OWORD *)v20 + 2) = 0u;
          *((_OWORD *)v20 + 3) = 0u;
          *(_OWORD *)v20 = 0u;
          *((_OWORD *)v20 + 1) = 0u;
          *((_QWORD *)v20 + 1) = v17 + 8;
          *((_QWORD *)v20 + 5) = v18 - 8;
          if ((unint64_t)(v18 - 8) >= 0x18)
          {
            *(_DWORD *)v20 = *(_DWORD *)(v17 + 12);
            *((_QWORD *)v20 + 2) = v17 + 8 + *(unsigned int *)(v17 + 20);
            v21 = *(_QWORD *)(v17 + 24);
            *(_QWORD *)&v22 = v21;
            *((_QWORD *)&v22 + 1) = HIDWORD(v21);
            *(_OWORD *)(v20 + 24) = v22;
          }
        }
        *v19 = (uint64_t)v20;
        v23 = *v15;
        *v15 = v19;
        a1 = v16;
        if (v23)
        {
          v24 = *v23;
          if (*v23)
          {
            if (*(_DWORD *)(v24 + 48))
              free(*(void **)(v24 + 8));
            free((void *)v24);
          }
          MEMORY[0x1A1AD355C](v23, 0x80C40B8603338);
        }
        *(_QWORD *)(v47 + 8) = v14;
        v48 = v47;
        v25 = *(uint64_t **)(v16 + 32);
        if ((unint64_t)v25 >= *(_QWORD *)(v16 + 40))
        {
          v26 = sub_19C32F5A4(v44, &v48);
          v27 = v48;
          *(_QWORD *)(v16 + 32) = v26;
          if (v27)
            (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
        }
        else
        {
          *v25 = v47;
          *(_QWORD *)(v16 + 32) = v25 + 1;
        }
        if (v12)
          CFRelease(v12);
        ++v10;
        v8 = *v46;
        v9 += 16;
      }
      while (v10 < (v46[1] - *v46) >> 4);
    }
  }
}

void sub_19C416E44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, const void *a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (__p)
    (*(void (**)(void *))(*(_QWORD *)__p + 8))(__p);
  sub_19C2FE810(&a15);
  _Unwind_Resume(a1);
}

void sub_19C417018(char **a1)
{
  char *v2;
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  void *v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *a1;
  v3 = a1[1];
  if ((unint64_t)(v3 - *a1) < 9)
  {
    if (v2 == v3)
    {
      v7 = (size_t)a1[6];
      v8 = (void *)operator new[]();
      bzero(v8, v7);
      v13 = (uint64_t)v8;
      v9 = a1[1];
      if (v9 >= a1[2])
      {
        v11 = (char *)sub_19C41414C(a1, &v13);
        v12 = v13;
        a1[1] = v11;
        if (v12)
          MEMORY[0x1A1AD3538](v12, 0x1000C8077774924);
      }
      else
      {
        *(_QWORD *)v9 = v8;
        a1[1] = v9 + 8;
      }
    }
  }
  else
  {
    v4 = v2 + 8;
    while (v3 != v4)
    {
      v6 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      v5 = v6;
      *(_QWORD *)v3 = 0;
      if (v6)
        MEMORY[0x1A1AD3538](v5, 0x1000C8077774924);
    }
    a1[1] = v4;
  }
  v10 = *(char **)*a1;
  a1[3] = v10;
  a1[4] = v10;
  a1[7] = 0;
}

void sub_19C417118(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    MEMORY[0x1A1AD3538](a10, 0x1000C8077774924);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C417140(_QWORD *a1)
{
  char **v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = (char **)a1[6];
  if (v2)
  {
    v3 = a1[3];
    if (a1[4] != v3)
    {
      v4 = 0;
      do
      {
        if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(v3 + 8 * v4) + 144))(*(_QWORD *)(v3 + 8 * v4)))
        {
          v5 = (_QWORD *)a1[6];
          if (v5[7])
          {
            v6 = 0;
            do
            {
              v7 = *(_QWORD *)(a1[3] + 8 * v4);
              (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v7 + 152))(v7, *(_QWORD *)(*v5 + ((v6 >> 4) & 0xFFFFFFFFFFFFFF8))+ v5[5] * (v6 & 0x7F)+ ((uint64_t)(0x5000000000 * v4 + 0x5000000000) >> 32));
              ++v6;
              v5 = (_QWORD *)a1[6];
            }
            while (v6 < v5[7]);
          }
        }
        ++v4;
        v3 = a1[3];
      }
      while (v4 < (a1[4] - v3) >> 3);
      v2 = (char **)a1[6];
    }
  }
  sub_19C417018(v2);
  result = sub_19C413F1C((_QWORD *)a1[6]);
  v9 = a1[3];
  if (a1[4] != v9)
  {
    v10 = result;
    v11 = 0;
    v12 = 0x5000000000;
    do
    {
      (*(void (**)(_QWORD))(**(_QWORD **)(v9 + 8 * v11) + 120))(*(_QWORD *)(v9 + 8 * v11));
      v13 = *(_QWORD *)(a1[3] + 8 * v11);
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 16))(v13, v10 + (v12 >> 32));
      ++v11;
      v9 = a1[3];
      v12 += 0x5000000000;
    }
    while (v11 < (a1[4] - v9) >> 3);
  }
  return result;
}

uint64_t sub_19C417288(uint64_t a1, CFDictionaryRef theDict)
{
  const __CFString *Value;
  const __CFString *v4;
  CFTypeID v5;
  const __CFString *v6;
  CFTypeID v7;
  CFLocaleRef v8;
  const __CFArray *v9;
  _BOOL4 v10;
  int v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  CFIndex Count;
  CFIndex v16;
  char *v17;
  const __CFString *ValueAtIndex;
  CFIndex Length;
  const UniChar *CharactersPtr;
  size_t v21;
  __int128 *v22;
  UniChar *v23;
  __int128 *p_dst;
  uint64_t v25;
  uint64_t v26;
  _OWORD *v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  _OWORD *v31;
  __int128 v32;
  char *v33;
  char *v34;
  int64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  char *v41;
  unint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  __int128 v47;
  int v48;
  __n128 *v49;
  const void **v50;
  unint64_t v51;
  const std::nothrow_t *v52;
  unint64_t v53;
  __n128 *v54;
  BOOL v55;
  __n128 *v56;
  char *v57;
  char *v58;
  std::__shared_weak_count *v59;
  unint64_t *p_shared_owners;
  unint64_t v61;
  char *v62;
  char *v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  _DWORD *v67;
  char *v68;
  CFIndex v69;
  size_t v70;
  unint64_t v71;
  unint64_t v72;
  unsigned __int8 *v73;
  unsigned __int8 *v74;
  uint64_t *v75;
  _QWORD *v76;
  _QWORD *v77;
  char *v78;
  char *v79;
  char *v80;
  _QWORD *v81;
  char *v82;
  int64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  _BYTE *v88;
  char *v89;
  char *v90;
  unint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  char *v96;
  char *v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  void *v102;
  char *v103;
  unint64_t v104;
  uint64_t v105;
  char *v106;
  __int128 *v107;
  uint64_t v108;
  __int128 v109;
  uint64_t v110;
  uint64_t v111;
  _OWORD *v112;
  __int128 *v113;
  uint64_t v114;
  __int128 v115;
  unsigned __int8 **v116;
  char *v117;
  unsigned int *v118;
  char *v119;
  unint64_t v120;
  void *v121;
  uint64_t v122;
  uint64_t *v123;
  unsigned __int8 **v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  size_t v129;
  size_t v130;
  char *v131;
  __int128 v132;
  int v133;
  _DWORD *v134;
  size_t v135;
  int v136;
  size_t v137;
  uint64_t **v138;
  int v139;
  size_t v140;
  char *v141;
  unint64_t v142;
  int v143;
  size_t v144;
  size_t v145;
  size_t v146;
  size_t v147;
  char *v148;
  int v149;
  void *v150;
  _DWORD *v151;
  int v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  uint64_t *v156;
  uint64_t v157;
  char *v158;
  char *v159;
  void *v160;
  uint64_t *v161;
  _QWORD *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  _QWORD *v168;
  _QWORD *v169;
  _QWORD *v170;
  _QWORD *v171;
  uint64_t v172;
  uint64_t v173;
  _BYTE *exception;
  char *v176;
  unsigned __int8 **v177;
  char *v178;
  uint64_t **v179;
  uint64_t *v180;
  uint64_t v181;
  uint64_t v182;
  _QWORD *v183;
  _QWORD *v184;
  uint64_t v186;
  void *v187;
  char *v188;
  char *v189;
  void *v190;
  char *v191;
  unint64_t v192;
  char *v193;
  char *v194;
  char *v195;
  void *__p;
  char *v197;
  char *v198;
  __int128 __dst;
  unint64_t v200;
  int v201;
  void *v202;
  size_t v203;
  size_t __n;
  uint64_t v205;
  int v206;
  void *__src;
  size_t v208;
  size_t size;
  size_t v210;
  int v211;
  _DWORD *v212;
  __int128 v213;
  void *ptr;
  unint64_t v215;
  unsigned int v216;
  CFRange v217;

  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = &off_1E3D35608;
  *(_QWORD *)(a1 + 16) = &unk_1E3D35660;
  *(_OWORD *)(a1 + 24) = 0u;
  v184 = (_QWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 40) = 0u;
  Value = (const __CFString *)CFDictionaryGetValue(theDict, (const void *)kLMLanguageModelLocaleKey);
  v4 = Value;
  if (Value)
  {
    v5 = CFGetTypeID(Value);
    if (v5 == CFStringGetTypeID())
    {
      v6 = (const __CFString *)CFLocaleCreate(0, v4);
LABEL_6:
      v4 = v6;
      goto LABEL_8;
    }
    v7 = CFGetTypeID(v4);
    if (v7 == CFLocaleGetTypeID())
    {
      v6 = (const __CFString *)CFRetain(v4);
      goto LABEL_6;
    }
    v4 = 0;
  }
LABEL_8:
  if (sub_19C294438((const __CFLocale *)v4, CFSTR("ars")))
  {
    v8 = sub_19C2E1B3C((uint64_t)v4, CFSTR("ar"));
    CFRelease(v4);
    v4 = (const __CFString *)v8;
  }
  *(_QWORD *)(a1 + 56) = v4;
  if (v4)
  {
    v9 = (const __CFArray *)CFDictionaryGetValue(theDict, (const void *)kLMLanguageModelCustomWordsKey);
    if (v9)
    {
      v10 = CFDictionaryContainsKey(theDict, (const void *)kLMLanguageModelEnableSearchQueryModelLoadingKey) == 0;
      v11 = sub_19C4142E8(*(const __CFLocale **)(a1 + 56), v10);
      v12 = (_QWORD *)operator new();
      *v12 = &off_1E3D36698;
      v12[1] = 0;
      v181 = (uint64_t)v12;
      v13 = operator new();
      *(_DWORD *)(v13 + 8) = v11;
      *(_OWORD *)(v13 + 16) = 0u;
      v14 = v13 + 16;
      *(_OWORD *)(v13 + 32) = 0u;
      *(_QWORD *)(v13 + 56) = 0;
      *(_QWORD *)(v13 + 64) = 100;
      *(_DWORD *)(v13 + 72) = 0;
      *(_QWORD *)(v13 + 48) = 0;
      v182 = v13;
      *(_QWORD *)v13 = &off_1E3D37028;
      v190 = 0;
      v191 = 0;
      v192 = 0;
      v187 = 0;
      v188 = 0;
      v189 = 0;
      if (CFArrayGetCount(v9) < 1)
      {
LABEL_245:
        if (v187)
        {
          v188 = (char *)v187;
          operator delete(v187);
        }
        v158 = (char *)v190;
        if (v190)
        {
          v159 = v191;
          v160 = v190;
          if (v191 != v190)
          {
            do
            {
              if (*(v159 - 1) < 0)
                operator delete(*((void **)v159 - 3));
              v159 -= 24;
            }
            while (v159 != v158);
            v160 = v190;
          }
          v191 = v158;
          operator delete(v160);
        }
        *(_QWORD *)(v181 + 8) = v182;
        v186 = v181;
        v161 = *(uint64_t **)(a1 + 32);
        if ((unint64_t)v161 >= *(_QWORD *)(a1 + 40))
        {
          v162 = sub_19C32F5A4(v184, &v186);
          v163 = v186;
          *(_QWORD *)(a1 + 32) = v162;
          if (v163)
            (*(void (**)(uint64_t))(*(_QWORD *)v163 + 8))(v163);
        }
        else
        {
          *v161 = v181;
          *(_QWORD *)(a1 + 32) = v161 + 1;
        }
        goto LABEL_259;
      }
      v179 = (uint64_t **)v14;
      Count = CFArrayGetCount(v9);
      if (Count >= 1)
      {
        v16 = 0;
        while (1)
        {
          ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v9, v16);
          Length = CFStringGetLength(ValueAtIndex);
          CharactersPtr = CFStringGetCharactersPtr(ValueAtIndex);
          v21 = 2 * Length;
          if (!CharactersPtr)
          {
            v23 = (UniChar *)operator new[]();
            v217.location = 0;
            v217.length = Length;
            CFStringGetCharacters(ValueAtIndex, v217, v23);
            if (v21 > 0x7FFFFFFFFFFFFFF7)
              sub_19C2A1A54();
            if (v21 >= 0x17)
            {
              v29 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v21 | 7) != 0x17)
                v29 = v21 | 7;
              v30 = v29 + 1;
              p_dst = (__int128 *)operator new(v29 + 1);
              *((_QWORD *)&__dst + 1) = v21;
              v200 = v30 | 0x8000000000000000;
              *(_QWORD *)&__dst = p_dst;
            }
            else
            {
              HIBYTE(v200) = 2 * Length;
              p_dst = &__dst;
              if (!v21)
                goto LABEL_38;
            }
            memcpy(p_dst, v23, v21);
LABEL_38:
            *((_BYTE *)p_dst + v21) = 0;
            v31 = v191;
            if ((unint64_t)v191 >= v192)
            {
              v191 = sub_19C307C78(&v190, (uint64_t)&__dst);
              if (SHIBYTE(v200) < 0)
                operator delete((void *)__dst);
            }
            else
            {
              v32 = __dst;
              *((_QWORD *)v191 + 2) = v200;
              *v31 = v32;
              v191 = (char *)v31 + 24;
            }
            MEMORY[0x1A1AD3538](v23, 0x1000C80BDFB0063);
            goto LABEL_43;
          }
          if (v21 > 0x7FFFFFFFFFFFFFF7)
            sub_19C2A1A54();
          if (v21 >= 0x17)
            break;
          HIBYTE(v200) = 2 * Length;
          v22 = &__dst;
          if (v21)
            goto LABEL_29;
LABEL_30:
          *((_BYTE *)v22 + v21) = 0;
          v27 = v191;
          if ((unint64_t)v191 >= v192)
          {
            v191 = sub_19C307C78(&v190, (uint64_t)&__dst);
            if (SHIBYTE(v200) < 0)
              operator delete((void *)__dst);
          }
          else
          {
            v28 = __dst;
            *((_QWORD *)v191 + 2) = v200;
            *v27 = v28;
            v191 = (char *)v27 + 24;
          }
LABEL_43:
          v33 = v188;
          if (v188 < v189)
          {
            *(_DWORD *)v188 = 0x40000000;
            v17 = v33 + 4;
          }
          else
          {
            v34 = (char *)v187;
            v35 = v188 - (_BYTE *)v187;
            v36 = (v188 - (_BYTE *)v187) >> 2;
            v37 = v36 + 1;
            if ((unint64_t)(v36 + 1) >> 62)
              sub_19C2A18E8();
            v38 = v189 - (_BYTE *)v187;
            if ((v189 - (_BYTE *)v187) >> 1 > v37)
              v37 = v38 >> 1;
            if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFFCLL)
              v39 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v39 = v37;
            if (v39)
            {
              if (v39 >> 62)
                sub_19C2A143C();
              v40 = (char *)operator new(4 * v39);
            }
            else
            {
              v40 = 0;
            }
            v41 = &v40[4 * v36];
            *(_DWORD *)v41 = 0x40000000;
            v17 = v41 + 4;
            if (v33 != v34)
            {
              v42 = v33 - 4 - v34;
              if (v42 < 0x2C)
                goto LABEL_283;
              if ((unint64_t)(v33 - &v40[v35]) < 0x20)
                goto LABEL_283;
              v43 = (v42 >> 2) + 1;
              v44 = &v40[4 * v36 - 16];
              v45 = v33 - 16;
              v46 = v43 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v47 = *(_OWORD *)v45;
                *((_OWORD *)v44 - 1) = *((_OWORD *)v45 - 1);
                *(_OWORD *)v44 = v47;
                v44 -= 32;
                v45 -= 32;
                v46 -= 8;
              }
              while (v46);
              v41 -= 4 * (v43 & 0x7FFFFFFFFFFFFFF8);
              v33 -= 4 * (v43 & 0x7FFFFFFFFFFFFFF8);
              if (v43 != (v43 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_283:
                do
                {
                  v48 = *((_DWORD *)v33 - 1);
                  v33 -= 4;
                  *((_DWORD *)v41 - 1) = v48;
                  v41 -= 4;
                }
                while (v33 != v34);
              }
            }
            v187 = v41;
            v188 = v17;
            v189 = &v40[4 * v39];
            if (v34)
              operator delete(v34);
          }
          v188 = v17;
          if (++v16 == Count)
            goto LABEL_65;
        }
        v25 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v21 | 7) != 0x17)
          v25 = v21 | 7;
        v26 = v25 + 1;
        v22 = (__int128 *)operator new(v25 + 1);
        *((_QWORD *)&__dst + 1) = v21;
        v200 = v26 | 0x8000000000000000;
        *(_QWORD *)&__dst = v22;
LABEL_29:
        memmove(v22, CharactersPtr, v21);
        goto LABEL_30;
      }
LABEL_65:
      v49 = (__n128 *)v190;
      v50 = (const void **)v191;
      v51 = 0xAAAAAAAAAAAAAAABLL * ((v191 - (_BYTE *)v190) >> 3);
      if (v191 - (_BYTE *)v190 < 1)
      {
LABEL_69:
        v56 = 0;
        v53 = 0;
      }
      else
      {
        v52 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
        v53 = 0xAAAAAAAAAAAAAAABLL * ((v191 - (_BYTE *)v190) >> 3);
        while (1)
        {
          v54 = (__n128 *)operator new(24 * v53, v52);
          if (v54)
            break;
          v55 = v53 > 1;
          v53 >>= 1;
          if (!v55)
            goto LABEL_69;
        }
        v56 = v54;
      }
      sub_19C3CF3AC(v49, v50, (uint64_t)&__dst, v51, v56, v53);
      if (v56)
        operator delete(v56);
      v67 = v187;
      if (Count != 1)
      {
        v68 = (char *)v190 + 47;
        v69 = Count - 1;
        while (1)
        {
          v70 = *(v68 - 24);
          if (*(v68 - 24) < 0)
            v71 = *(_QWORD *)(v68 - 39);
          else
            v71 = *(v68 - 24);
          v72 = *v68;
          if (*v68 < 0)
          {
            if (v71 >= *(_QWORD *)(v68 - 15))
              goto LABEL_98;
          }
          else if (v71 >= v72)
          {
            goto LABEL_98;
          }
          v73 = (unsigned __int8 *)(v68 - 47);
          if ((v70 & 0x80) != 0)
          {
            v73 = *(unsigned __int8 **)v73;
            v74 = (unsigned __int8 *)(v68 - 23);
            if ((v72 & 0x80) == 0)
            {
LABEL_109:
              if ((v70 & 0x80) == 0)
                goto LABEL_113;
              goto LABEL_97;
            }
          }
          else
          {
            v74 = (unsigned __int8 *)(v68 - 23);
            if ((v72 & 0x80) == 0)
              goto LABEL_109;
          }
          v74 = *(unsigned __int8 **)v74;
          if ((v70 & 0x80) == 0)
          {
LABEL_113:
            if (!memcmp(v73, v74, v70))
              goto LABEL_99;
LABEL_98:
            *v67 |= 0x80000000;
            goto LABEL_99;
          }
LABEL_97:
          if (memcmp(v73, v74, *(_QWORD *)(v68 - 39)))
            goto LABEL_98;
LABEL_99:
          ++v67;
          v68 += 24;
          if (!--v69)
          {
            v67 = v187;
            break;
          }
        }
      }
      v67[Count - 1] |= 0x80000000;
      v75 = (uint64_t *)operator new();
      *v75 = 0;
      v180 = v75;
      v76 = malloc_type_malloc(0x48uLL, 0x108004094C1867FuLL);
      if (v76)
      {
        v76[8] = 0;
        *((_OWORD *)v76 + 2) = 0u;
        *((_OWORD *)v76 + 3) = 0u;
        *(_OWORD *)v76 = 0u;
        *((_OWORD *)v76 + 1) = 0u;
      }
      __p = 0;
      v197 = 0;
      v198 = 0;
      v193 = 0;
      v194 = 0;
      v195 = 0;
      v77 = v190;
      v78 = v191;
      v183 = v76;
      if (v190 != v191)
      {
        v79 = 0;
        while (1)
        {
          v81 = v77;
          if (*((char *)v77 + 23) < 0)
            v81 = (_QWORD *)*v77;
          if (v79 >= v198)
            break;
          *(_QWORD *)v79 = v81;
          v79 += 8;
LABEL_145:
          v197 = v79;
          if (*((char *)v77 + 23) < 0)
            v94 = v77[1];
          else
            v94 = *((unsigned __int8 *)v77 + 23);
          v95 = v194;
          if (v194 < v195)
          {
            *(_QWORD *)v194 = v94;
            v80 = v95 + 8;
          }
          else
          {
            v96 = v193;
            v97 = (char *)(v194 - v193);
            v98 = (v194 - v193) >> 3;
            v99 = v98 + 1;
            if ((unint64_t)(v98 + 1) >> 61)
              sub_19C2A18E8();
            v100 = v195 - v193;
            if ((v195 - v193) >> 2 > v99)
              v99 = v100 >> 2;
            if ((unint64_t)v100 >= 0x7FFFFFFFFFFFFFF8)
              v101 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v101 = v99;
            if (v101)
            {
              if (v101 >> 61)
                sub_19C2A143C();
              v102 = operator new(8 * v101);
            }
            else
            {
              v102 = 0;
            }
            v103 = (char *)v102 + 8 * v98;
            *(_QWORD *)v103 = v94;
            v80 = v103 + 8;
            if (v95 != v96)
            {
              v104 = v95 - 8 - v96;
              if (v104 < 0x58)
                goto LABEL_284;
              if ((unint64_t)(v95 - &v97[(_QWORD)v102]) < 0x20)
                goto LABEL_284;
              v105 = (v104 >> 3) + 1;
              v106 = (char *)v102 + 8 * v98 - 16;
              v107 = (__int128 *)(v95 - 16);
              v108 = v105 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v109 = *v107;
                *((_OWORD *)v106 - 1) = *(v107 - 1);
                *(_OWORD *)v106 = v109;
                v106 -= 32;
                v107 -= 2;
                v108 -= 4;
              }
              while (v108);
              v103 -= 8 * (v105 & 0x3FFFFFFFFFFFFFFCLL);
              v95 -= 8 * (v105 & 0x3FFFFFFFFFFFFFFCLL);
              if (v105 != (v105 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_284:
                do
                {
                  v110 = *((_QWORD *)v95 - 1);
                  v95 -= 8;
                  *((_QWORD *)v103 - 1) = v110;
                  v103 -= 8;
                }
                while (v95 != v96);
              }
            }
            v193 = v103;
            v195 = (char *)v102 + 8 * v101;
            if (v96)
              operator delete(v96);
          }
          v194 = v80;
          v77 += 3;
          if (v77 == (_QWORD *)v78)
          {
            v116 = (unsigned __int8 **)__p;
            v117 = v193;
            goto LABEL_180;
          }
        }
        v82 = (char *)__p;
        v83 = v79 - (_BYTE *)__p;
        v84 = (v79 - (_BYTE *)__p) >> 3;
        v85 = v84 + 1;
        if ((unint64_t)(v84 + 1) >> 61)
          sub_19C2A18E8();
        v86 = v198 - (_BYTE *)__p;
        if ((v198 - (_BYTE *)__p) >> 2 > v85)
          v85 = v86 >> 2;
        if ((unint64_t)v86 >= 0x7FFFFFFFFFFFFFF8)
          v87 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v87 = v85;
        if (v87)
        {
          if (v87 >> 61)
            sub_19C2A143C();
          v88 = operator new(8 * v87);
        }
        else
        {
          v88 = 0;
        }
        v89 = &v88[8 * v84];
        *(_QWORD *)v89 = v81;
        v90 = v89 + 8;
        if (v79 == v82)
        {
          v82 = v79;
        }
        else
        {
          v91 = v79 - 8 - v82;
          if (v91 < 0x168)
          {
            v92 = v79;
            goto LABEL_139;
          }
          if (&v88[v83 - 8 - (v91 & 0xFFFFFFFFFFFFFFF8)] > &v88[v83 - 8])
          {
            v92 = v79;
            goto LABEL_139;
          }
          if (&v79[-(v91 & 0xFFFFFFFFFFFFFFF8) - 8] > v79 - 8)
          {
            v92 = v79;
            goto LABEL_139;
          }
          if ((unint64_t)(v79 - v88 - v83) < 0x20)
          {
            v92 = v79;
            goto LABEL_139;
          }
          v111 = (v91 >> 3) + 1;
          v92 = &v79[-8 * (v111 & 0x3FFFFFFFFFFFFFFCLL)];
          v112 = &v88[8 * v84 - 16];
          v113 = (__int128 *)(v79 - 16);
          v114 = v111 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v115 = *v113;
            *(v112 - 1) = *(v113 - 1);
            *v112 = v115;
            v112 -= 2;
            v113 -= 2;
            v114 -= 4;
          }
          while (v114);
          v89 -= 8 * (v111 & 0x3FFFFFFFFFFFFFFCLL);
          if (v111 != (v111 & 0x3FFFFFFFFFFFFFFCLL))
          {
            do
            {
LABEL_139:
              v93 = *((_QWORD *)v92 - 1);
              v92 -= 8;
              *((_QWORD *)v89 - 1) = v93;
              v89 -= 8;
            }
            while (v92 != v82);
            v82 = (char *)__p;
          }
        }
        __p = v89;
        v198 = &v88[8 * v87];
        if (v82)
          operator delete(v82);
        v79 = v90;
        goto LABEL_145;
      }
      v117 = 0;
      v116 = 0;
      v79 = 0;
LABEL_180:
      v118 = (unsigned int *)v187;
      v216 = 1024;
      v202 = malloc_type_malloc(0x10000uLL, 0x4E7D212CuLL);
      v201 = 0;
      bzero(v202, 0x10000uLL);
      __n = 0;
      v205 = 0;
      v203 = 0x10000;
      v119 = (char *)malloc_type_malloc(0x10000uLL, 0x4E7D212CuLL);
      __src = v119;
      v206 = 0;
      bzero(v119, 0x10000uLL);
      size = 0;
      v210 = 0;
      v208 = v183[5];
      v120 = v208;
      v121 = (void *)v183[1];
      v213 = *(_OWORD *)(v183 + 7);
      v212 = v183 + 6;
      ptr = v121;
      v211 = 1;
      bzero(v121, v208);
      __dst = xmmword_19C46E010;
      v200 = 0;
      v215 = 0x300000000;
      if (v79 != (char *)v116)
      {
        v122 = (v79 - (char *)v116) >> 3;
        v123 = (uint64_t *)v117;
        v124 = v116;
        while (1)
        {
          v126 = *v123++;
          v125 = v126;
          if ((unint64_t)(v126 - 257) <= 0xFFFFFFFFFFFFFEFFLL)
            break;
          sub_19C368DC8((uint64_t)&__dst, v215, *v124++, v125, *v118++);
          if (!--v122)
          {
            v127 = *((_QWORD *)&__dst + 1);
            v120 = v208;
            v119 = (char *)__src;
            v128 = v205 & 0xFFFFFFFC;
            v129 = (size + 3) & 0xFFFFFFFFFFFFFFFCLL;
            goto LABEL_186;
          }
        }
        if (v202)
          free(v202);
        v138 = v179;
        if (__src)
          free(__src);
        *v180 = (uint64_t)v183;
LABEL_236:
        operator delete(v117);
LABEL_237:
        if (v116)
          operator delete(v116);
        v156 = *v138;
        *v138 = v180;
        if (v156)
        {
          v157 = *v156;
          if (*v156)
          {
            if (*(_DWORD *)(v157 + 48))
              free(*(void **)(v157 + 8));
            free((void *)v157);
          }
          MEMORY[0x1A1AD355C](v156, 0x80C40B8603338);
        }
        goto LABEL_245;
      }
      v129 = 0;
      v128 = 0;
      v127 = 1028;
LABEL_186:
      *(_QWORD *)&__dst = v127;
      v203 = v128 + *(unsigned int *)&v119[v128] + 4;
      __n = v203;
      v130 = v129 + 24;
      v178 = v117;
      if (v129 + 24 <= v120)
        goto LABEL_211;
      v131 = (char *)ptr;
      if (v211)
      {
        v177 = v116;
        v132 = v213;
        v133 = 1;
        v134 = v212;
        v135 = v208;
        while (1)
        {
          v136 = 2 * v120;
          if (!(2 * (_DWORD)v120))
            v136 = 0x10000;
          v137 = v136;
          if (v133)
          {
            if ((_QWORD)v132)
            {
              v131 = (char *)((uint64_t (*)(char *, _QWORD, _QWORD))v132)(v131, v136, *((_QWORD *)&v132 + 1));
              goto LABEL_198;
            }
            v131 = (char *)malloc_type_realloc(v131, v136, 0x837F6817uLL);
            *v134 = 1;
          }
          else
          {
            v131 = (char *)malloc_type_realloc(v131, v136, 0x46E4E2A4uLL);
            if (!v131)
            {
              ptr = 0;
              v208 = v135;
              v129 = -1;
              v116 = v177;
              goto LABEL_212;
            }
          }
          bzero(&v131[v120], v137 - v120);
LABEL_198:
          if (v130 <= v137)
          {
            ptr = v131;
            v208 = v137;
            v116 = v177;
            goto LABEL_211;
          }
          v133 = v211;
          v135 = v137;
          v120 = v137;
        }
      }
      do
      {
        v139 = 2 * v120;
        if (!(2 * (_DWORD)v120))
          v139 = 0x10000;
        v140 = v139;
        v141 = (char *)malloc_type_realloc(v131, v139, 0x46E4E2A4uLL);
        v131 = v141;
        if (!v141)
        {
          ptr = 0;
          v129 = -1;
          goto LABEL_212;
        }
        bzero(&v141[v120], v140 - v120);
        v208 = v140;
        v120 = v140;
      }
      while (v130 > v140);
      ptr = v131;
LABEL_211:
      size = v129 + 24;
      v210 = v129;
LABEL_212:
      v142 = sub_19C36904C((uint64_t)&__dst, v215, (uint64_t)&v208, 1);
      LODWORD(v144) = v208;
      v143 = size;
      v145 = (size + 4095) & 0xFFFFFFFFFFFFF000;
      v146 = __n;
      v147 = v145 + __n;
      if (v145 + __n <= v208)
      {
        v210 = (size + 4095) & 0xFFFFFFFFFFFFF000;
LABEL_227:
        size = v147;
        memcpy((char *)ptr + v145, __src, v146);
        v150 = ptr;
        v151 = (char *)ptr + v129;
        v152 = HIDWORD(v142) + 4 * v142;
        *v151 = 1;
        v151[1] = v152;
        v151[2] = v143;
        v151[3] = v145;
        v153 = __n;
        v151[4] = __n;
        v154 = v216;
        v151[5] = v216;
        *(_DWORD *)v183 = v152;
        v183[3] = v153;
        v183[4] = v154;
        v208 = size;
        if ((_QWORD)v213)
          v155 = (char *)((uint64_t (*)(void))v213)();
        else
          v155 = (char *)malloc_type_realloc(v150, size, 0xDB3458CCuLL);
        ptr = v155;
        v183[1] = v155;
        v183[2] = &v155[v145];
LABEL_231:
        if (v202)
          free(v202);
        v117 = v178;
        v138 = v179;
        if (__src)
          free(__src);
        *v180 = (uint64_t)v183;
        if (!v178)
          goto LABEL_237;
        goto LABEL_236;
      }
      while (1)
      {
        if (2 * (_DWORD)v144)
          v149 = 2 * v144;
        else
          v149 = 0x10000;
        if (v211)
        {
          v144 = v149;
          if ((_QWORD)v213)
          {
            ptr = (void *)((uint64_t (*)(void *, _QWORD, _QWORD))v213)(ptr, v149, *((_QWORD *)&v213 + 1));
            goto LABEL_216;
          }
          v148 = (char *)malloc_type_realloc(ptr, v149, 0x837F6817uLL);
          ptr = v148;
          *v212 = 1;
        }
        else
        {
          v144 = v149;
          v148 = (char *)malloc_type_realloc(ptr, v149, 0x46E4E2A4uLL);
          ptr = v148;
          if (!v148)
            goto LABEL_231;
        }
        bzero(&v148[v208], v144 - v208);
LABEL_216:
        v208 = v144;
        if (v147 <= v144)
        {
          v210 = v145;
          v146 = __n;
          goto LABEL_227;
        }
      }
    }
    __dst = 0uLL;
    v200 = 0;
    __p = 0;
    v197 = 0;
    v198 = 0;
    sub_19C4143E8(theDict, *(const __CFLocale **)(a1 + 56), (uint64_t)&__dst, (uint64_t)&__p);
    sub_19C416984(a1, theDict, (uint64_t *)&__dst, &__p);
    v57 = (char *)__p;
    if (__p)
    {
      v58 = v197;
      if (v197 != __p)
      {
        do
        {
          v59 = (std::__shared_weak_count *)*((_QWORD *)v58 - 1);
          if (v59)
          {
            p_shared_owners = (unint64_t *)&v59->__shared_owners_;
            do
              v61 = __ldaxr(p_shared_owners);
            while (__stlxr(v61 - 1, p_shared_owners));
            if (!v61)
            {
              ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
              std::__shared_weak_count::__release_weak(v59);
            }
          }
          v58 -= 16;
        }
        while (v58 != v57);
        v57 = (char *)__p;
      }
      operator delete(v57);
    }
    v62 = (char *)__dst;
    if ((_QWORD)__dst)
    {
      v63 = (char *)*((_QWORD *)&__dst + 1);
      if (*((_QWORD *)&__dst + 1) != (_QWORD)__dst)
      {
        do
        {
          v64 = (std::__shared_weak_count *)*((_QWORD *)v63 - 1);
          if (v64)
          {
            v65 = (unint64_t *)&v64->__shared_owners_;
            do
              v66 = __ldaxr(v65);
            while (__stlxr(v66 - 1, v65));
            if (!v66)
            {
              ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
              std::__shared_weak_count::__release_weak(v64);
            }
          }
          v63 -= 16;
        }
        while (v63 != v62);
        v62 = (char *)__dst;
      }
      operator delete(v62);
    }
  }
LABEL_259:
  v164 = *(_QWORD *)(a1 + 24);
  v165 = *(_QWORD *)(a1 + 32);
  if (v164 == v165)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    v176 = (char *)operator new(0x20uLL);
    strcpy(v176, "Lexicon resources not found");
    *(_QWORD *)exception = off_1E3D38838;
    sub_19C2B5238(exception + 8, v176, 0x1BuLL);
    __cxa_throw(exception, (struct type_info *)&unk_1E3D32968, (void (*)(void *))sub_19C3123E4);
  }
  v166 = operator new();
  *(_QWORD *)v166 = 0;
  *(_QWORD *)(v166 + 8) = 0;
  *(_QWORD *)(v166 + 16) = 0;
  v167 = 80 * ((v165 - v164) >> 3) + 80;
  *(_QWORD *)(v166 + 40) = v167;
  *(_QWORD *)(v166 + 48) = v167 << 7;
  sub_19C417018((char **)v166);
  v168 = *(_QWORD **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v166;
  if (v168)
  {
    v169 = (_QWORD *)*v168;
    if (*v168)
    {
      v170 = (_QWORD *)v168[1];
      v171 = (_QWORD *)*v168;
      if (v170 != v169)
      {
        do
        {
          v173 = *--v170;
          v172 = v173;
          *v170 = 0;
          if (v173)
            MEMORY[0x1A1AD3538](v172, 0x1000C8077774924);
        }
        while (v170 != v169);
        v171 = (_QWORD *)*v168;
      }
      v168[1] = v169;
      operator delete(v171);
    }
    MEMORY[0x1A1AD355C](v168, 0x1030C404F540F20);
  }
  sub_19C417140((_QWORD *)a1);
  return a1;
}

void sub_19C418470(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, _QWORD *a16, _QWORD *a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  const void *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;

  if (a18)
    (*(void (**)(uint64_t))(*(_QWORD *)a18 + 8))(a18);
  v37 = (const void *)a17[7];
  if (v37)
    CFRelease(v37);
  a17[7] = 0;
  v38 = (_QWORD *)a17[6];
  a17[6] = 0;
  if (v38)
  {
    v39 = (_QWORD *)*v38;
    if (*v38)
    {
      v40 = (_QWORD *)v38[1];
      v41 = (_QWORD *)*v38;
      if (v40 != v39)
      {
        do
        {
          v43 = *--v40;
          v42 = v43;
          *v40 = 0;
          if (v43)
            MEMORY[0x1A1AD3538](v42, 0x1000C8077774924);
        }
        while (v40 != v39);
        v41 = (_QWORD *)*v38;
      }
      v38[1] = v39;
      operator delete(v41);
    }
    MEMORY[0x1A1AD355C](v38, 0x1030C404F540F20);
  }
  v44 = (_QWORD *)*a16;
  if (*a16)
  {
    v45 = (_QWORD *)a17[4];
    v46 = (_QWORD *)*a16;
    if (v45 != v44)
    {
      do
      {
        v48 = *--v45;
        v47 = v48;
        *v45 = 0;
        if (v48)
          (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
      }
      while (v45 != v44);
      v46 = (_QWORD *)*a16;
    }
    a17[4] = v44;
    operator delete(v46);
  }
  _Unwind_Resume(exception_object);
}

void sub_19C418918()
{
  JUMPOUT(0x19C418838);
}

uint64_t sub_19C418924(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  double *v26;

  v10 = sub_19C413F1C(*(_QWORD **)(a1 + 48));
  v11 = *(_QWORD *)(a1 + 24);
  if (*(_QWORD *)(a1 + 32) != v11)
  {
    v12 = v10;
    v26 = a5;
    v13 = 0;
    v14 = 0;
    v15 = 0.0;
    v16 = 0x5000000000;
    do
    {
      v18 = (*(double (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(v11 + 8 * v13) + 24))(*(_QWORD *)(v11 + 8 * v13), a2 + (v16 >> 32), v12 + (v16 >> 32), a3, a4);
      v19 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v13);
      if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v19 + 32))(v19, v12 + (v16 >> 32)))
      {
        v14 = 1;
        if (v15 == 0.0)
          v15 = v18;
      }
      ++v13;
      v11 = *(_QWORD *)(a1 + 24);
      v17 = *(_QWORD *)(a1 + 32);
      v16 += 0x5000000000;
    }
    while (v13 < (v17 - v11) >> 3);
    if ((v14 & 1) != 0)
    {
      if (v26)
        *v26 = v15;
      return v12;
    }
    if (v17 != v11)
    {
      v20 = 0;
      v21 = 0x5000000000;
      do
      {
        if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(v11 + 8 * v20) + 144))(*(_QWORD *)(v11 + 8 * v20)))
        {
          v22 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v20);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v22 + 152))(v22, v12 + (v21 >> 32));
        }
        ++v20;
        v11 = *(_QWORD *)(a1 + 24);
        v21 += 0x5000000000;
      }
      while (v20 < (*(_QWORD *)(a1 + 32) - v11) >> 3);
    }
  }
  v23 = *(_QWORD **)(a1 + 48);
  v24 = v23[4];
  v12 = 0;
  if (v24 > v23[3])
  {
    v23[4] = v24 - v23[5];
    --v23[7];
  }
  return v12;
}

double sub_19C418AD8(std::string *a1, uint64_t **a2, int a3, __n128 a4)
{
  std::string *v5;
  std::string *p_dst;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  __int128 v10;
  const void **v11;
  int v12;
  size_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  const std::string::value_type *v20;
  std::string::size_type v21;
  uint64_t j;
  int v23;
  const std::string::value_type *v24;
  std::string::size_type v25;
  uint64_t *v26;
  void **v27;
  uint64_t v28;
  char v30;
  __int128 v31;
  void *v32;
  size_t v33;
  int v34;
  size_t v35;
  unint64_t v36;
  std::string *v37;
  uint64_t v38;
  uint64_t v39;
  const void *v40;
  std::string *v41;
  std::string::size_type v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  __int128 v47;
  const void **v48;
  int v49;
  size_t v50;
  unint64_t v51;
  uint64_t *v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD **v55;
  uint64_t *v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  std::string::size_type v61;
  char *v62;
  const void **v63;
  const void **v64;
  int v65;
  size_t v66;
  unint64_t v67;
  _BYTE *v68;
  const std::string::value_type *v69;
  const std::string::value_type *v70;
  const std::string::value_type *v71;
  int v72;
  const std::string::value_type *v73;
  std::string::size_type v74;
  std::string *v75;
  __int128 v76;
  std::string *v77;
  __int128 v78;
  std::string *v79;
  __int128 v80;
  __int128 v81;
  int v82;
  const std::string::value_type *v83;
  std::string::size_type v84;
  uint64_t i;
  int v86;
  const std::string::value_type *v87;
  std::string::size_type v88;
  unint64_t v89;
  std::string::size_type v90;
  std::string::size_type size;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  char v96;
  std::string::value_type v97;
  unsigned int v98;
  size_t v99;
  unint64_t v100;
  const void **v101;
  int v102;
  size_t v103;
  unint64_t v104;
  _BYTE *v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  _BYTE *v109;
  std::string *v110;
  __int128 v111;
  std::string *v112;
  std::string::size_type v113;
  uint64_t v114;
  uint64_t v115;
  _DWORD *v116;
  const void *v117;
  std::string *v118;
  uint64_t v119;
  const void *v120;
  uint64_t v121;
  uint64_t v122;
  const void *v123;
  const std::string::value_type *v124;
  std::string::size_type v125;
  int v126;
  const std::string::value_type *v127;
  std::string::size_type v128;
  const void *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  const void **v133;
  const std::string::value_type *v134;
  const std::string::value_type *v135;
  std::string::size_type v136;
  int v137;
  size_t v138;
  unint64_t v139;
  _BYTE *v140;
  const std::string::value_type *v141;
  uint64_t v142;
  uint64_t v143;
  const void *v144;
  const std::string::value_type *v145;
  std::string::size_type v146;
  int v147;
  int v148;
  size_t v149;
  unint64_t v150;
  _BYTE *v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  uint64_t *v155;
  const std::string::value_type *v156;
  std::string::size_type v157;
  std::string v161;
  std::string v162;
  _BYTE v163[25];
  _BYTE v164[7];
  _BYTE v165[32];
  uint64_t v166;
  _QWORD v167[3];
  uint64_t v168;
  unint64_t v169;
  void *__p;
  char v171;
  unint64_t v172;
  int v173;
  uint64_t v174;
  std::string __dst;
  uint64_t v176;

  v176 = *MEMORY[0x1E0C80C00];
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  v5 = a1;
  p_dst = &__dst;
  switch(a3)
  {
    case 3:
      memset(&v162, 0, sizeof(v162));
      v7 = **a2;
      v8 = (*a2)[1];
      if (v7 != v8)
      {
        v9 = 0;
        do
        {
          if ((unint64_t)v9 < v162.__r_.__value_.__r.__words[2])
          {
            if (*(char *)(v7 + 23) < 0)
            {
              sub_19C2B5238(v9, *(void **)v7, *(_QWORD *)(v7 + 8));
            }
            else
            {
              v10 = *(_OWORD *)v7;
              *((_QWORD *)v9 + 2) = *(_QWORD *)(v7 + 16);
              *(_OWORD *)v9 = v10;
            }
            v9 += 24;
          }
          else
          {
            v9 = sub_19C318C78(&v162.__r_.__value_.__l.__data_, v7);
          }
          v162.__r_.__value_.__l.__size_ = (std::string::size_type)v9;
          v7 += 48;
        }
        while (v7 != v8);
      }
      v163[23] = 12;
      strcpy(v163, "INSERT INTO ");
      v71 = (const std::string::value_type *)a2[1];
      v70 = (const std::string::value_type *)(a2 + 1);
      v69 = v71;
      v72 = v70[23];
      if (v72 >= 0)
        v73 = v70;
      else
        v73 = v69;
      if (v72 >= 0)
        v74 = *((unsigned __int8 *)v70 + 23);
      else
        v74 = *((_QWORD *)v70 + 1);
      v75 = std::string::append((std::string *)v163, v73, v74);
      v76 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
      __dst.__r_.__value_.__r.__words[2] = v75->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v76;
      v75->__r_.__value_.__l.__size_ = 0;
      v75->__r_.__value_.__r.__words[2] = 0;
      v75->__r_.__value_.__r.__words[0] = 0;
      v77 = std::string::append(&__dst, " (TokenID", 9uLL);
      v78 = *(_OWORD *)&v77->__r_.__value_.__l.__data_;
      *(_QWORD *)&v165[16] = *((_QWORD *)&v77->__r_.__value_.__l + 2);
      *(_OWORD *)v165 = v78;
      v77->__r_.__value_.__l.__size_ = 0;
      v77->__r_.__value_.__r.__words[2] = 0;
      v77->__r_.__value_.__r.__words[0] = 0;
      v79 = std::string::append((std::string *)v165, ", ", 2uLL);
      v80 = *(_OWORD *)&v79->__r_.__value_.__l.__data_;
      v161.__r_.__value_.__r.__words[2] = v79->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v161.__r_.__value_.__l.__data_ = v80;
      v79->__r_.__value_.__l.__size_ = 0;
      v79->__r_.__value_.__r.__words[2] = 0;
      v79->__r_.__value_.__r.__words[0] = 0;
      if ((v165[23] & 0x80000000) != 0)
      {
        operator delete(*(void **)v165);
        if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_120:
          if ((v163[23] & 0x80000000) == 0)
            goto LABEL_121;
          goto LABEL_188;
        }
      }
      else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_120;
      }
      operator delete(__dst.__r_.__value_.__l.__data_);
      if ((v163[23] & 0x80000000) == 0)
        goto LABEL_121;
LABEL_188:
      operator delete(*(void **)v163);
LABEL_121:
      v81 = *(_OWORD *)&v162.__r_.__value_.__l.__data_;
      if (v162.__r_.__value_.__r.__words[0] != v162.__r_.__value_.__l.__size_)
      {
        v82 = *(char *)(v162.__r_.__value_.__r.__words[0] + 23);
        v83 = v82 >= 0
            ? (const std::string::value_type *)v162.__r_.__value_.__r.__words[0]
            : *(const std::string::value_type **)v162.__r_.__value_.__l.__data_;
        v84 = v82 >= 0
            ? *(unsigned __int8 *)(v162.__r_.__value_.__r.__words[0] + 23)
            : *(_QWORD *)(v162.__r_.__value_.__r.__words[0] + 8);
        std::string::append(&v161, v83, v84);
        for (i = v81 + 24; (_QWORD)v81 + 24 != *((_QWORD *)&v81 + 1); i = v81 + 24)
        {
          std::string::append(&v161, ", ", 2uLL);
          v86 = *(char *)(i + 23);
          if (v86 >= 0)
            v87 = (const std::string::value_type *)i;
          else
            v87 = *(const std::string::value_type **)i;
          if (v86 >= 0)
            v88 = *(unsigned __int8 *)(i + 23);
          else
            v88 = *(_QWORD *)(i + 8);
          std::string::append(&v161, v87, v88);
        }
      }
      std::string::append(&v161, ") VALUES (?", 0xBuLL);
      if (v162.__r_.__value_.__l.__size_ != v162.__r_.__value_.__r.__words[0])
      {
        v89 = 0;
        do
        {
          std::string::append(&v161, ",?", 2uLL);
          ++v89;
        }
        while (0xAAAAAAAAAAAAAAABLL
              * ((uint64_t)(v162.__r_.__value_.__l.__size_ - v162.__r_.__value_.__r.__words[0]) >> 3) > v89);
      }
      std::string::append(&v161, ")", 1uLL);
      v90 = v162.__r_.__value_.__r.__words[0];
      if (v162.__r_.__value_.__r.__words[0])
      {
        size = v162.__r_.__value_.__l.__size_;
        v92 = (void *)v162.__r_.__value_.__r.__words[0];
        if (v162.__r_.__value_.__l.__size_ != v162.__r_.__value_.__r.__words[0])
        {
          do
          {
            if (*(char *)(size - 1) < 0)
              operator delete(*(void **)(size - 24));
            size -= 24;
          }
          while (size != v90);
          v92 = (void *)v162.__r_.__value_.__r.__words[0];
        }
        v162.__r_.__value_.__l.__size_ = v90;
        operator delete(v92);
      }
      a4.n128_u64[0] = v161.__r_.__value_.__r.__words[0];
      *v5 = v161;
      return a4.n128_f64[0];
    case 4:
      memset(v165, 0, 24);
      v44 = **a2;
      v45 = (*a2)[1];
      if (v44 != v45)
      {
        v46 = 0;
        do
        {
          if ((unint64_t)v46 < *(_QWORD *)&v165[16])
          {
            if (*(char *)(v44 + 23) < 0)
            {
              sub_19C2B5238(v46, *(void **)v44, *(_QWORD *)(v44 + 8));
            }
            else
            {
              v47 = *(_OWORD *)v44;
              *((_QWORD *)v46 + 2) = *(_QWORD *)(v44 + 16);
              *(_OWORD *)v46 = v47;
            }
            v46 += 24;
          }
          else
          {
            v46 = sub_19C318C78((char **)v165, v44);
          }
          *(_QWORD *)&v165[8] = v46;
          v44 += 48;
        }
        while (v44 != v45);
      }
      sub_19C419D38(&__dst, (uint64_t)a2, (const void ***)v165);
      v93 = *(_QWORD *)v165;
      if (*(_QWORD *)v165)
      {
        v94 = *(_QWORD *)&v165[8];
        v95 = *(void **)v165;
        if (*(_QWORD *)&v165[8] != *(_QWORD *)v165)
        {
          do
          {
            if (*(char *)(v94 - 1) < 0)
              operator delete(*(void **)(v94 - 24));
            v94 -= 24;
          }
          while (v94 != v93);
          v95 = *(void **)v165;
        }
        *(_QWORD *)&v165[8] = v93;
        operator delete(v95);
      }
      a4.n128_u64[0] = __dst.__r_.__value_.__r.__words[0];
      *v5 = __dst;
      return a4.n128_f64[0];
    case 5:
      v165[23] = 7;
      strcpy(v165, "SELECT ");
      v17 = **a2;
      v18 = (*a2)[1];
      if (v17 != v18)
      {
        v19 = *(char *)(v17 + 23);
        v20 = v19 >= 0 ? (const std::string::value_type *)**a2 : *(const std::string::value_type **)v17;
        v21 = v19 >= 0 ? *(unsigned __int8 *)(v17 + 23) : *(_QWORD *)(v17 + 8);
        std::string::append((std::string *)v165, v20, v21);
        for (j = v17 + 48; j != v18; j += 48)
        {
          std::string::append((std::string *)v165, ", ", 2uLL);
          v23 = *(char *)(j + 23);
          if (v23 >= 0)
            v24 = (const std::string::value_type *)j;
          else
            v24 = *(const std::string::value_type **)j;
          if (v23 >= 0)
            v25 = *(unsigned __int8 *)(j + 23);
          else
            v25 = *(_QWORD *)(j + 8);
          std::string::append((std::string *)v165, v24, v25);
        }
      }
      std::string::append((std::string *)v165, " FROM Words WHERE TokenID = ?", 0x1DuLL);
      a4.n128_u64[0] = *(_QWORD *)v165;
      *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)v165;
      v5->__r_.__value_.__r.__words[2] = *(_QWORD *)&v165[16];
      return a4.n128_f64[0];
    case 6:
      *((_BYTE *)&v162.__r_.__value_.__s + 23) = 7;
      strcpy((char *)&v162, "SELECT ");
      v26 = *a2;
      memset(v165, 0, 24);
      v27 = (void **)*v26;
      v28 = v26[1];
      if (*v26 != v28)
      {
        while (1)
        {
          if (v27 != (void **)v165 && *((_BYTE *)v27 + 37) != 0)
          {
            v30 = *((_BYTE *)v27 + 23);
            if ((v165[23] & 0x80000000) != 0)
            {
              if (v30 >= 0)
                v32 = v27;
              else
                v32 = *v27;
              if (v30 >= 0)
                v33 = *((unsigned __int8 *)v27 + 23);
              else
                v33 = (size_t)v27[1];
              sub_19C2E54A8((void **)v165, v32, v33);
            }
            else if ((*((_BYTE *)v27 + 23) & 0x80) != 0)
            {
              sub_19C2E53E4(v165, *v27, (size_t)v27[1]);
            }
            else
            {
              v31 = *(_OWORD *)v27;
              *(_QWORD *)&v165[16] = v27[2];
              *(_OWORD *)v165 = v31;
            }
          }
          v34 = *((char *)v27 + 23);
          if (v34 >= 0)
            v35 = *((unsigned __int8 *)v27 + 23);
          else
            v35 = (size_t)v27[1];
          v36 = v35 + 2;
          if (v35 + 2 > 0x7FFFFFFFFFFFFFF7)
            sub_19C2A1A54();
          if (v36 >= 0x17)
            break;
          memset(&__dst, 0, sizeof(__dst));
          v37 = &__dst;
          *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v35 + 2;
          if (v35)
            goto LABEL_64;
LABEL_68:
          strcpy((char *)v37 + v35, ", ");
          if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v41 = &__dst;
          else
            v41 = (std::string *)__dst.__r_.__value_.__r.__words[0];
          if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v42 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
          else
            v42 = __dst.__r_.__value_.__l.__size_;
          std::string::append(&v162, (const std::string::value_type *)v41, v42);
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__dst.__r_.__value_.__l.__data_);
          v27 += 6;
          if (v27 == (void **)v28)
          {
            v98 = v165[23];
            v99 = *(_QWORD *)&v165[8];
            v5 = a1;
            goto LABEL_163;
          }
        }
        v38 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v36 | 7) != 0x17)
          v38 = v36 | 7;
        v39 = v38 + 1;
        v37 = (std::string *)operator new(v38 + 1);
        __dst.__r_.__value_.__l.__size_ = v35 + 2;
        __dst.__r_.__value_.__r.__words[2] = v39 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v37;
LABEL_64:
        if (v34 >= 0)
          v40 = v27;
        else
          v40 = *v27;
        memmove(v37, v40, v35);
        goto LABEL_68;
      }
      v99 = 0;
      v98 = 0;
LABEL_163:
      v102 = (char)v98;
      if ((v98 & 0x80u) == 0)
        v103 = v98;
      else
        v103 = v99;
      v104 = v103 + 25;
      if (v103 + 25 > 0x7FFFFFFFFFFFFFF7)
        sub_19C2A1A54();
      if (v104 > 0x16)
      {
        v106 = (v104 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v104 | 7) != 0x17)
          v106 = v104 | 7;
        v107 = v106 + 1;
        v108 = (char *)operator new(v106 + 1);
        *(_QWORD *)&v163[8] = v103 + 25;
        *(_QWORD *)&v163[16] = v107 | 0x8000000000000000;
        *(_QWORD *)v163 = v108;
        qmemcpy(v108, "TokenID FROM Words WHERE ", 25);
        v105 = v108 + 25;
        if (!v103)
        {
LABEL_176:
          v105[v103] = 0;
          v110 = std::string::append((std::string *)v163, " = ?", 4uLL);
          v111 = *(_OWORD *)&v110->__r_.__value_.__l.__data_;
          __dst.__r_.__value_.__r.__words[2] = v110->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v111;
          v110->__r_.__value_.__l.__size_ = 0;
          v110->__r_.__value_.__r.__words[2] = 0;
          v110->__r_.__value_.__r.__words[0] = 0;
          if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v112 = &__dst;
          else
            v112 = (std::string *)__dst.__r_.__value_.__r.__words[0];
          if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v113 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
          else
            v113 = __dst.__r_.__value_.__l.__size_;
          std::string::append(&v162, (const std::string::value_type *)v112, v113);
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(__dst.__r_.__value_.__l.__data_);
            if ((v163[23] & 0x80000000) == 0)
            {
LABEL_184:
              if ((v165[23] & 0x80000000) == 0)
              {
LABEL_185:
                a4.n128_u64[0] = v162.__r_.__value_.__r.__words[0];
                *v5 = v162;
                return a4.n128_f64[0];
              }
LABEL_191:
              operator delete(*(void **)v165);
              goto LABEL_185;
            }
          }
          else if ((v163[23] & 0x80000000) == 0)
          {
            goto LABEL_184;
          }
          operator delete(*(void **)v163);
          if ((v165[23] & 0x80000000) == 0)
            goto LABEL_185;
          goto LABEL_191;
        }
      }
      else
      {
        qmemcpy(v163, "TokenID FROM Words WHERE ", sizeof(v163));
        v105 = v164;
      }
      if (v102 >= 0)
        v109 = v165;
      else
        v109 = *(_BYTE **)v165;
      memmove(v105, v109, v103);
      goto LABEL_176;
    case 7:
      v11 = (const void **)(*a2)[8];
      if (!v11)
        goto LABEL_151;
      v12 = *((char *)v11 + 23);
      if (v12 >= 0)
        v13 = *((unsigned __int8 *)v11 + 23);
      else
        v13 = (size_t)v11[1];
      v14 = v13 + 7;
      if (v13 + 7 > 0x7FFFFFFFFFFFFFF7)
        sub_19C2A1A54();
      if (v14 >= 0x17)
      {
        v114 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v14 | 7) != 0x17)
          v114 = v14 | 7;
        v115 = v114 + 1;
        v116 = operator new(v114 + 1);
        *(_QWORD *)&v165[8] = v13 + 7;
        *(_QWORD *)&v165[16] = v115 | 0x8000000000000000;
        *(_QWORD *)v165 = v116;
        v15 = (char *)v116 + 7;
        *v116 = 1162626387;
        *(_DWORD *)((char *)v116 + 3) = 542393157;
      }
      else
      {
        *(_OWORD *)&v165[8] = 0uLL;
        v165[23] = v13 + 7;
        v15 = &v165[7];
        strcpy(v165, "SELECT ");
        if (!v13)
          goto LABEL_199;
      }
      if (v12 >= 0)
        v117 = v11;
      else
        v117 = *v11;
      memmove(v15, v117, v13);
LABEL_199:
      v15[v13] = 0;
      v118 = std::string::append((std::string *)v165, " FROM Words WHERE TokenID = ?", 0x1DuLL);
      goto LABEL_208;
    case 8:
      v48 = (const void **)(*a2)[8];
      if (!v48)
      {
LABEL_151:
        v96 = 0;
        v97 = 0;
        goto LABEL_210;
      }
      v49 = *((char *)v48 + 23);
      if (v49 >= 0)
        v50 = *((unsigned __int8 *)v48 + 23);
      else
        v50 = (size_t)v48[1];
      v51 = v50 + 32;
      if (v50 + 32 > 0x7FFFFFFFFFFFFFF7)
        sub_19C2A1A54();
      if (v51 > 0x16)
      {
        v119 = (v51 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v51 | 7) != 0x17)
          v119 = v51 | 7;
        *(_QWORD *)&v165[8] = v50 + 32;
        *(_QWORD *)&v165[16] = (v119 + 1) | 0x8000000000000000;
        *(_QWORD *)v165 = operator new(v119 + 1);
        v52 = (uint64_t *)(*(_QWORD *)v165 + 32);
        qmemcpy(*(void **)v165, "SELECT TokenID FROM Words WHERE ", 32);
        if (!v50)
        {
LABEL_207:
          *((_BYTE *)v52 + v50) = 0;
          v118 = std::string::append((std::string *)v165, " = ? LIMIT 1", 0xCuLL);
LABEL_208:
          v97 = v118->__r_.__value_.__s.__data_[0];
          *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = *(_OWORD *)((char *)&v118->__r_.__value_.__l.__data_ + 1);
          *(std::string::size_type *)((char *)&__dst.__r_.__value_.__r.__words[1] + 6) = *(std::string::size_type *)((char *)&v118->__r_.__value_.__r.__words[1] + 7);
          v96 = HIBYTE(v118->__r_.__value_.__r.__words[2]);
          v118->__r_.__value_.__l.__size_ = 0;
          v118->__r_.__value_.__r.__words[2] = 0;
          v118->__r_.__value_.__r.__words[0] = 0;
          if ((v165[23] & 0x80000000) != 0)
            operator delete(*(void **)v165);
LABEL_210:
          v5->__r_.__value_.__s.__data_[0] = v97;
          a4.n128_u64[0] = __dst.__r_.__value_.__r.__words[0];
          *(_OWORD *)((char *)&v5->__r_.__value_.__l.__data_ + 1) = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
          *(std::string::size_type *)((char *)&v5->__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)&__dst.__r_.__value_.__r.__words[1] + 6);
          *((_BYTE *)&v5->__r_.__value_.__s + 23) = v96;
          return a4.n128_f64[0];
        }
      }
      else
      {
        v52 = &v166;
        qmemcpy(v165, "SELECT TokenID FROM Words WHERE ", sizeof(v165));
      }
      if (v49 >= 0)
        v120 = v48;
      else
        v120 = *v48;
      memmove(v52, v120, v50);
      goto LABEL_207;
    case 9:
      sub_19C2B4F08((uint64_t)v165);
      v53 = sub_19C2A1B24(&v165[16], (uint64_t)"UPDATE ", 7);
      v56 = a2[1];
      v55 = a2 + 1;
      v54 = (uint64_t)v56;
      v57 = *((char *)v55 + 23);
      if (v57 >= 0)
        v58 = (uint64_t)v55;
      else
        v58 = v54;
      if (v57 >= 0)
        v59 = *((unsigned __int8 *)v55 + 23);
      else
        v59 = (uint64_t)v55[1];
      v60 = sub_19C2A1B24(v53, v58, v59);
      sub_19C2A1B24(v60, (uint64_t)"SET TokenID = ? WHERE TokenID = ?", 33);
      if ((v173 & 0x10) != 0)
      {
        v100 = v172;
        if (v172 < v169)
        {
          v172 = v169;
          v100 = v169;
        }
        v101 = (const void **)&v168;
      }
      else
      {
        if ((v173 & 8) == 0)
        {
          v61 = 0;
          *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 0;
          goto LABEL_238;
        }
        v101 = (const void **)v167;
        v100 = v167[2];
      }
      v129 = *v101;
      v61 = v100 - (_QWORD)*v101;
      if (v61 > 0x7FFFFFFFFFFFFFF7)
        sub_19C2A1A54();
      if (v61 >= 0x17)
      {
        v130 = (v61 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v61 | 7) != 0x17)
          v130 = v61 | 7;
        v131 = v130 + 1;
        p_dst = (std::string *)operator new(v130 + 1);
        __dst.__r_.__value_.__l.__size_ = v61;
        __dst.__r_.__value_.__r.__words[2] = v131 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
      }
      else
      {
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v100 - *(_BYTE *)v101;
        if (!v61)
          goto LABEL_238;
      }
      memmove(p_dst, v129, v61);
LABEL_238:
      p_dst->__r_.__value_.__s.__data_[v61] = 0;
      *(_QWORD *)v165 = *MEMORY[0x1E0DE4F50];
      v132 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
      *(_QWORD *)&v165[*(_QWORD *)(*(_QWORD *)v165 - 24)] = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
      *(_QWORD *)&v165[16] = v132;
      *(_QWORD *)&v165[24] = MEMORY[0x1E0DE4FB8] + 16;
      if (v171 < 0)
        operator delete(__p);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x1A1AD34CC](&v174);
      if (&__dst != v5)
      {
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          sub_19C2E53E4(v5, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        }
        else
        {
          a4.n128_u64[0] = __dst.__r_.__value_.__r.__words[0];
          *v5 = __dst;
        }
      }
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__dst.__r_.__value_.__l.__data_);
      return a4.n128_f64[0];
    case 10:
      v43 = (char *)operator new(0x20uLL);
      strcpy(v43, "SELECT MAX(TokenID) from Words");
      v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v43;
      a4 = (__n128)xmmword_19C46DE90;
      goto LABEL_103;
    case 11:
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 7;
      strcpy((char *)&__dst, "SELECT ");
      v63 = (const void **)**a2;
      v64 = (const void **)(*a2)[1];
      if (v63 == v64)
        goto LABEL_278;
      v65 = *((char *)v63 + 23);
      if (v65 >= 0)
        v66 = *((unsigned __int8 *)v63 + 23);
      else
        v66 = (size_t)v63[1];
      v67 = v66 + 1;
      if (v66 + 1 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_303;
      if (v67 >= 0x17)
      {
        v121 = (v67 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v67 | 7) != 0x17)
          v121 = v67 | 7;
        v122 = v121 + 1;
        v68 = operator new(v121 + 1);
        *(_QWORD *)&v165[8] = v66 + 1;
        *(_QWORD *)&v165[16] = v122 | 0x8000000000000000;
        *(_QWORD *)v165 = v68;
      }
      else
      {
        memset(v165, 0, 24);
        v68 = v165;
        v165[23] = v66 + 1;
        if (!v66)
          goto LABEL_218;
      }
      if (v65 >= 0)
        v123 = v63;
      else
        v123 = *v63;
      memmove(v68, v123, v66);
LABEL_218:
      *(_WORD *)&v68[v66] = 32;
      if (v165[23] >= 0)
        v124 = v165;
      else
        v124 = *(const std::string::value_type **)v165;
      if (v165[23] >= 0)
        v125 = v165[23];
      else
        v125 = *(_QWORD *)&v165[8];
      std::string::append(&__dst, v124, v125);
      if ((v165[23] & 0x80000000) != 0)
        operator delete(*(void **)v165);
      v126 = *((_DWORD *)v63 + 8);
      if (v126)
      {
        if (v126 != 1)
          goto LABEL_248;
        v127 = "INTEGER";
        v128 = 7;
      }
      else
      {
        v127 = "BLOB";
        v128 = 4;
      }
      std::string::append(&__dst, v127, v128);
LABEL_248:
      v133 = v63 + 6;
      if (v63 + 6 == v64)
        goto LABEL_278;
      v134 = ", ";
      break;
    case 12:
      v16 = (char *)operator new(0x20uLL);
      strcpy(v16, "SELECT TokenID from Words");
      v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
      a4 = (__n128)xmmword_19C46DEA0;
      goto LABEL_103;
    case 13:
      v62 = (char *)operator new(0x28uLL);
      strcpy(v62, "SELECT COUNT(TokenID) from Words");
      v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v62;
      a4 = (__n128)xmmword_19C46E020;
LABEL_103:
      *(__n128 *)&v5->__r_.__value_.__r.__words[1] = a4;
      return a4.n128_f64[0];
    default:
      return a4.n128_f64[0];
  }
  do
  {
    std::string::append(&__dst, v134, 2uLL);
    v137 = *((char *)v133 + 23);
    if (v137 >= 0)
      v138 = *((unsigned __int8 *)v133 + 23);
    else
      v138 = (size_t)v133[1];
    v139 = v138 + 1;
    if (v138 + 1 > 0x7FFFFFFFFFFFFFF7)
LABEL_303:
      sub_19C2A1A54();
    if (v139 >= 0x17)
    {
      v141 = v134;
      v142 = (v139 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v139 | 7) != 0x17)
        v142 = v139 | 7;
      v143 = v142 + 1;
      v140 = operator new(v142 + 1);
      *(_QWORD *)&v165[8] = v138 + 1;
      *(_QWORD *)&v165[16] = v143 | 0x8000000000000000;
      *(_QWORD *)v165 = v140;
      v134 = v141;
    }
    else
    {
      memset(v165, 0, 24);
      v140 = v165;
      v165[23] = v138 + 1;
      if (!v138)
        goto LABEL_267;
    }
    if (v137 >= 0)
      v144 = v133;
    else
      v144 = *v133;
    memmove(v140, v144, v138);
LABEL_267:
    *(_WORD *)&v140[v138] = 32;
    if (v165[23] >= 0)
      v145 = v165;
    else
      v145 = *(const std::string::value_type **)v165;
    if (v165[23] >= 0)
      v146 = v165[23];
    else
      v146 = *(_QWORD *)&v165[8];
    std::string::append(&__dst, v145, v146);
    if ((v165[23] & 0x80000000) != 0)
      operator delete(*(void **)v165);
    v147 = *((_DWORD *)v133 + 8);
    if (v147 == 1)
    {
      v135 = "INTEGER";
      v136 = 7;
LABEL_251:
      std::string::append(&__dst, v135, v136);
      goto LABEL_252;
    }
    if (!v147)
    {
      v135 = "BLOB";
      v136 = 4;
      goto LABEL_251;
    }
LABEL_252:
    v133 += 6;
  }
  while (v133 != v64);
LABEL_278:
  v148 = *((char *)a2 + 31);
  if (v148 >= 0)
    v149 = *((unsigned __int8 *)a2 + 31);
  else
    v149 = (size_t)a2[2];
  v150 = v149 + 6;
  if (v149 + 6 > 0x7FFFFFFFFFFFFFF7)
    sub_19C2A1A54();
  if (v150 >= 0x17)
  {
    v152 = (v150 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v150 | 7) != 0x17)
      v152 = v150 | 7;
    v153 = v152 + 1;
    v154 = (char *)operator new(v152 + 1);
    *(_QWORD *)&v165[8] = v149 + 6;
    *(_QWORD *)&v165[16] = v153 | 0x8000000000000000;
    *(_QWORD *)v165 = v154;
    *(_DWORD *)v154 = 1330791968;
    v151 = v154 + 6;
    *((_WORD *)v154 + 2) = 8269;
  }
  else
  {
    *(_OWORD *)&v165[8] = 0uLL;
    v165[23] = v149 + 6;
    v151 = &v165[6];
    *(_QWORD *)v165 = 0x204D4F524620;
    if (!v149)
      goto LABEL_292;
  }
  if (v148 >= 0)
    v155 = (uint64_t *)(a2 + 1);
  else
    v155 = a2[1];
  memmove(v151, v155, v149);
LABEL_292:
  v151[v149] = 0;
  if (v165[23] >= 0)
    v156 = v165;
  else
    v156 = *(const std::string::value_type **)v165;
  if (v165[23] >= 0)
    v157 = v165[23];
  else
    v157 = *(_QWORD *)&v165[8];
  std::string::append(&__dst, v156, v157);
  if ((v165[23] & 0x80000000) != 0)
    operator delete(*(void **)v165);
  a4.n128_u64[0] = __dst.__r_.__value_.__r.__words[0];
  *a1 = __dst;
  return a4.n128_f64[0];
}

void sub_19C419B40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;
  uint64_t v36;

  if (*(char *)(v36 - 105) < 0)
    operator delete(*(void **)(v36 - 128));
  if (*(char *)(v35 + 23) < 0)
    operator delete(*(void **)v35);
  _Unwind_Resume(exception_object);
}

std::string *sub_19C419D38(std::string *a1, uint64_t a2, const void ***a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::string::size_type v8;
  std::string::size_type v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  __int128 v13;
  const void **v14;
  const void **v15;
  int v16;
  size_t v17;
  unint64_t v18;
  void *p_dst;
  uint64_t v20;
  uint64_t v21;
  const void *v22;
  std::string *v23;
  std::string::size_type size;
  const void **v25;
  const std::string::value_type *v26;
  int v27;
  size_t v28;
  unint64_t v29;
  char *v30;
  const std::string::value_type *v31;
  uint64_t v32;
  uint64_t v33;
  const void *v34;
  std::string *v35;
  std::string::size_type v36;
  std::string v38;
  std::string __dst;

  *((_BYTE *)&v38.__r_.__value_.__s + 23) = 7;
  strcpy((char *)&v38, "UPDATE ");
  v7 = *(_QWORD *)(a2 + 8);
  v5 = a2 + 8;
  v6 = v7;
  v8 = *(_QWORD *)(v5 + 8);
  if (*(char *)(v5 + 23) >= 0)
  {
    v9 = *(unsigned __int8 *)(v5 + 23);
  }
  else
  {
    v5 = v6;
    v9 = v8;
  }
  v10 = std::string::append(&v38, (const std::string::value_type *)v5, v9);
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  __dst.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  v12 = std::string::append(&__dst, " SET ", 5uLL);
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  a1->__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&a1->__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_6;
  }
  else if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_6;
  }
  operator delete(v38.__r_.__value_.__l.__data_);
LABEL_6:
  v14 = *a3;
  v15 = a3[1];
  if (*a3 == v15)
    return std::string::append(a1, " WHERE TokenID=?", 0x10uLL);
  v16 = *((char *)v14 + 23);
  if (v16 >= 0)
    v17 = *((unsigned __int8 *)v14 + 23);
  else
    v17 = (size_t)v14[1];
  v18 = v17 + 2;
  if (v17 + 2 > 0x7FFFFFFFFFFFFFF7)
LABEL_57:
    sub_19C2A1A54();
  if (v18 >= 0x17)
  {
    v20 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17)
      v20 = v18 | 7;
    v21 = v20 + 1;
    p_dst = operator new(v20 + 1);
    __dst.__r_.__value_.__l.__size_ = v17 + 2;
    __dst.__r_.__value_.__r.__words[2] = v21 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v17 + 2;
    if (!v17)
      goto LABEL_23;
  }
  if (v16 >= 0)
    v22 = v14;
  else
    v22 = *v14;
  memmove(p_dst, v22, v17);
LABEL_23:
  strcpy((char *)p_dst + v17, "=?");
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v23 = &__dst;
  else
    v23 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  else
    size = __dst.__r_.__value_.__l.__size_;
  std::string::append(a1, (const std::string::value_type *)v23, size);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  v25 = v14 + 3;
  if (v14 + 3 != v15)
  {
    v26 = ", ";
    while (1)
    {
      std::string::append(a1, v26, 2uLL);
      v27 = *((char *)v25 + 23);
      if (v27 >= 0)
        v28 = *((unsigned __int8 *)v25 + 23);
      else
        v28 = (size_t)v25[1];
      v29 = v28 + 2;
      if (v28 + 2 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_57;
      if (v29 >= 0x17)
        break;
      memset(&__dst, 0, sizeof(__dst));
      v30 = (char *)&__dst;
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v28 + 2;
      if (v28)
        goto LABEL_44;
LABEL_48:
      strcpy(&v30[v28], "=?");
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v35 = &__dst;
      else
        v35 = (std::string *)__dst.__r_.__value_.__r.__words[0];
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v36 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
      else
        v36 = __dst.__r_.__value_.__l.__size_;
      std::string::append(a1, (const std::string::value_type *)v35, v36);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__dst.__r_.__value_.__l.__data_);
      v25 += 3;
      if (v25 == v15)
        return std::string::append(a1, " WHERE TokenID=?", 0x10uLL);
    }
    v31 = v26;
    v32 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v29 | 7) != 0x17)
      v32 = v29 | 7;
    v33 = v32 + 1;
    v30 = (char *)operator new(v32 + 1);
    __dst.__r_.__value_.__l.__size_ = v28 + 2;
    __dst.__r_.__value_.__r.__words[2] = v33 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v30;
    v26 = v31;
LABEL_44:
    if (v27 >= 0)
      v34 = v25;
    else
      v34 = *v25;
    memmove(v30, v34, v28);
    goto LABEL_48;
  }
  return std::string::append(a1, " WHERE TokenID=?", 0x10uLL);
}

void sub_19C41A050(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (*(char *)(v21 + 23) < 0)
    operator delete(*(void **)v21);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_19C41A0C4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;

  *a1 = &off_1E3D36180;
  sub_19C2F5D3C((uint64_t)(a1 + 3));
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
  {
    v3 = sub_19C3CD35C(v2);
    MEMORY[0x1A1AD355C](v3, 0x1060C4064AC95D2);
  }
  v4 = (uint64_t *)a1[1];
  a1[1] = 0;
  if (v4)
  {
    if (*v4)
    {
      sub_19C29A56C(v4);
      if (*v4)
        MEMORY[0x1A1AD355C](*v4, 0x1010C4006136809);
    }
    MEMORY[0x1A1AD355C](v4, 0x20C4093837F09);
  }
  return a1;
}

void sub_19C41A168(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;

  *a1 = &off_1E3D36180;
  sub_19C2F5D3C((uint64_t)(a1 + 3));
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
  {
    v3 = sub_19C3CD35C(v2);
    MEMORY[0x1A1AD355C](v3, 0x1060C4064AC95D2);
  }
  v4 = (uint64_t *)a1[1];
  a1[1] = 0;
  if (v4)
  {
    if (*v4)
    {
      sub_19C29A56C(v4);
      if (*v4)
        MEMORY[0x1A1AD355C](*v4, 0x1010C4006136809);
    }
    MEMORY[0x1A1AD355C](v4, 0x20C4093837F09);
  }
  JUMPOUT(0x1A1AD355CLL);
}

double sub_19C41A21C(uint64_t a1, _QWORD *a2)
{
  void **v4;
  char v5;
  __int128 v6;
  void *v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  void **v11;
  char v12;
  __int128 v13;
  void *v14;
  size_t v15;
  void **v16;
  char v17;
  __int128 v18;
  const void *v19;
  void *v20;
  size_t v21;
  const void *v22;
  uint64_t *v23;
  void **v24;
  uint64_t v25;
  uint64_t v26;
  void **v27;
  char v28;
  __int128 v29;
  void *v30;
  size_t v31;
  double result;

  if ((_QWORD *)(a1 + 24) == a2)
    return result;
  v4 = (void **)(a1 + 112);
  v5 = *((_BYTE *)a2 + 111);
  if (*(char *)(a1 + 135) < 0)
  {
    if (v5 >= 0)
      v7 = a2 + 11;
    else
      v7 = (void *)a2[11];
    if (v5 >= 0)
      v8 = *((unsigned __int8 *)a2 + 111);
    else
      v8 = a2[12];
    sub_19C2E54A8(v4, v7, v8);
  }
  else if ((*((_BYTE *)a2 + 111) & 0x80) != 0)
  {
    sub_19C2E53E4(v4, (void *)a2[11], a2[12]);
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 11);
    *(_QWORD *)(a1 + 128) = a2[13];
    *(_OWORD *)v4 = v6;
  }
  *(_DWORD *)(a1 + 136) = *((_DWORD *)a2 + 28);
  if (a2[15])
  {
    v9 = (char *)operator new();
    sub_19C3FC770(v9, (__int128 *)a2[15]);
    v10 = *(_QWORD *)(a1 + 144);
    *(_QWORD *)(a1 + 144) = v9;
    if (v10)
    {
      if (*(char *)(v10 + 95) < 0)
      {
        operator delete(*(void **)(v10 + 72));
        if ((*(char *)(v10 + 71) & 0x80000000) == 0)
        {
LABEL_17:
          if ((*(char *)(v10 + 47) & 0x80000000) == 0)
            goto LABEL_18;
          goto LABEL_66;
        }
      }
      else if ((*(char *)(v10 + 71) & 0x80000000) == 0)
      {
        goto LABEL_17;
      }
      operator delete(*(void **)(v10 + 48));
      if ((*(char *)(v10 + 47) & 0x80000000) == 0)
      {
LABEL_18:
        if ((*(char *)(v10 + 23) & 0x80000000) == 0)
        {
LABEL_19:
          MEMORY[0x1A1AD355C](v10, 0x1012C4003C2D8E3);
          goto LABEL_20;
        }
LABEL_67:
        operator delete(*(void **)v10);
        goto LABEL_19;
      }
LABEL_66:
      operator delete(*(void **)(v10 + 24));
      if ((*(char *)(v10 + 23) & 0x80000000) == 0)
        goto LABEL_19;
      goto LABEL_67;
    }
  }
LABEL_20:
  v11 = (void **)(a1 + 152);
  v12 = *((_BYTE *)a2 + 151);
  if (*(char *)(a1 + 175) < 0)
  {
    if (v12 >= 0)
      v14 = a2 + 16;
    else
      v14 = (void *)a2[16];
    if (v12 >= 0)
      v15 = *((unsigned __int8 *)a2 + 151);
    else
      v15 = a2[17];
    sub_19C2E54A8(v11, v14, v15);
  }
  else if ((*((_BYTE *)a2 + 151) & 0x80) != 0)
  {
    sub_19C2E53E4(v11, (void *)a2[16], a2[17]);
  }
  else
  {
    v13 = *((_OWORD *)a2 + 8);
    *(_QWORD *)(a1 + 168) = a2[18];
    *(_OWORD *)v11 = v13;
  }
  v16 = (void **)(a1 + 176);
  v17 = *((_BYTE *)a2 + 175);
  if (*(char *)(a1 + 199) < 0)
  {
    if (v17 >= 0)
      v20 = a2 + 19;
    else
      v20 = (void *)a2[19];
    if (v17 >= 0)
      v21 = *((unsigned __int8 *)a2 + 175);
    else
      v21 = a2[20];
    sub_19C2E54A8(v16, v20, v21);
    v19 = (const void *)a2[22];
    if (!v19)
      goto LABEL_46;
    goto LABEL_42;
  }
  if ((*((_BYTE *)a2 + 175) & 0x80) == 0)
  {
    v18 = *(_OWORD *)(a2 + 19);
    *(_QWORD *)(a1 + 192) = a2[21];
    *(_OWORD *)v16 = v18;
    v19 = (const void *)a2[22];
    if (!v19)
      goto LABEL_46;
LABEL_42:
    if (*(const void **)(a1 + 200) != v19)
    {
      CFRetain(v19);
      v22 = *(const void **)(a1 + 200);
      if (v22)
        CFRelease(v22);
      *(_QWORD *)(a1 + 200) = v19;
    }
    goto LABEL_46;
  }
  sub_19C2E53E4(v16, (void *)a2[19], a2[20]);
  v19 = (const void *)a2[22];
  if (v19)
    goto LABEL_42;
LABEL_46:
  if (a2[23])
  {
    v23 = (uint64_t *)operator new();
    sub_19C352610(v23, (__int128 **)a2[23]);
    v24 = *(void ***)(a1 + 208);
    *(_QWORD *)(a1 + 208) = v23;
    if (v24)
      sub_19C2F5DD8(v24);
  }
  *(_BYTE *)(a1 + 216) = *((_BYTE *)a2 + 192);
  *(_QWORD *)(a1 + 220) = *(_QWORD *)((char *)a2 + 196);
  *(_OWORD *)(a1 + 228) = *(_OWORD *)((char *)a2 + 204);
  *(_OWORD *)(a1 + 244) = *(_OWORD *)((char *)a2 + 220);
  *(_QWORD *)(a1 + 260) = *(_QWORD *)((char *)a2 + 236);
  *(_DWORD *)(a1 + 268) = *((_DWORD *)a2 + 61);
  v25 = a2[31];
  *(_DWORD *)(a1 + 280) = *((_DWORD *)a2 + 64);
  *(_QWORD *)(a1 + 272) = v25;
  sub_19C35F928((_QWORD *)(a1 + 288), (char *)a2[33], (char *)a2[34], (uint64_t)(a2[34] - a2[33]) >> 2);
  *(_QWORD *)(a1 + 312) = a2[36];
  v26 = a2[37];
  *(_DWORD *)(a1 + 328) = *((_DWORD *)a2 + 76);
  *(_QWORD *)(a1 + 320) = v26;
  *(_DWORD *)(a1 + 332) = *((_DWORD *)a2 + 77);
  *(_DWORD *)(a1 + 336) = *((_DWORD *)a2 + 78);
  *(_DWORD *)(a1 + 340) = *((_DWORD *)a2 + 79);
  *(_DWORD *)(a1 + 344) = *((_DWORD *)a2 + 80);
  *(_OWORD *)(a1 + 348) = *(_OWORD *)((char *)a2 + 324);
  *(_DWORD *)(a1 + 364) = *((_DWORD *)a2 + 85);
  *(_BYTE *)(a1 + 368) = *((_BYTE *)a2 + 344);
  *(_DWORD *)(a1 + 372) = *((_DWORD *)a2 + 87);
  *(_DWORD *)(a1 + 376) = *((_DWORD *)a2 + 88);
  *(_BYTE *)(a1 + 424) = *((_BYTE *)a2 + 400);
  *(_QWORD *)(a1 + 380) = *(_QWORD *)((char *)a2 + 356);
  *(_WORD *)(a1 + 388) = *((_WORD *)a2 + 182);
  *(_OWORD *)(a1 + 392) = *((_OWORD *)a2 + 23);
  *(_DWORD *)(a1 + 408) = *((_DWORD *)a2 + 96);
  *(_DWORD *)(a1 + 412) = *((_DWORD *)a2 + 97);
  *(_BYTE *)(a1 + 425) = *((_BYTE *)a2 + 401);
  *(_QWORD *)(a1 + 416) = a2[49];
  *(_DWORD *)(a1 + 440) = *((_DWORD *)a2 + 104);
  *(_WORD *)(a1 + 452) = *((_WORD *)a2 + 214);
  *(_DWORD *)(a1 + 480) = *((_DWORD *)a2 + 114);
  v27 = (void **)(a1 + 456);
  v28 = *((_BYTE *)a2 + 455);
  if (*(char *)(a1 + 479) < 0)
  {
    if (v28 >= 0)
      v30 = a2 + 54;
    else
      v30 = (void *)a2[54];
    if (v28 >= 0)
      v31 = *((unsigned __int8 *)a2 + 455);
    else
      v31 = a2[55];
    sub_19C2E54A8(v27, v30, v31);
  }
  else if ((*((_BYTE *)a2 + 455) & 0x80) != 0)
  {
    sub_19C2E53E4(v27, (void *)a2[54], a2[55]);
  }
  else
  {
    v29 = *((_OWORD *)a2 + 27);
    *(_QWORD *)(a1 + 472) = a2[56];
    *(_OWORD *)v27 = v29;
  }
  result = *((double *)a2 + 58);
  *(double *)(a1 + 488) = result;
  return result;
}

void sub_19C41A5E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD355C](v1, 0x1012C4003C2D8E3);
  _Unwind_Resume(a1);
}

BOOL sub_19C41A628(uint64_t a1)
{
  return *(_DWORD *)(**(_QWORD **)(a1 + 8) + 16) == 0;
}

uint64_t sub_19C41A640(uint64_t a1)
{
  return *(unsigned __int8 *)(**(_QWORD **)(a1 + 8) + 5);
}

uint64_t sub_19C41A650(uint64_t a1)
{
  return *(unsigned int *)(**(_QWORD **)(a1 + 8) + 12);
}

float sub_19C41A660(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  float v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[5];
  uint64_t v8;
  float *v9;
  uint64_t v10;
  int v11;
  int v12;

  v8 = 0;
  v9 = (float *)&v8;
  v10 = 0x2000000000;
  v11 = 0;
  v1 = *(uint64_t **)(a1 + 8);
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 0x40000000;
  v7[2] = sub_19C41D198;
  v7[3] = &unk_1E3D3C7E0;
  v7[4] = &v8;
  v2 = *v1;
  v3 = 0.0;
  if (*v1)
  {
    v4 = *(_QWORD *)(v2 + 32);
    if (v4)
    {
      v5 = *(unsigned __int8 *)(v2 + 6);
      v12 = 0;
      sub_19C427D18(v4, 1u, v5, (uint64_t)&v12, 1u, 0, v4 + 4, 1, 0, 1u, (uint64_t)v7);
      v3 = v9[6];
    }
  }
  _Block_object_dispose(&v8, 8);
  return v3;
}

void sub_19C41A730(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_19C41A748(uint64_t a1, int a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v8;
  unsigned int v9;
  _OWORD *v10;
  __int128 v11;

  v2 = *(uint64_t **)(a1 + 8);
  v3 = *v2;
  if (!*v2)
    return 0;
  v4 = *(_QWORD *)(v3 + 24);
  if (!v4 || *(_DWORD *)(v3 + 16) == 0)
    return 0;
  v8 = *(_DWORD *)(v3 + 20);
  v9 = *(unsigned __int8 *)(v3 + 7);
  if (!*(_QWORD *)(v3 + 40))
  {
    v10 = malloc_type_malloc(0x30uLL, 0x100004052888210uLL);
    *(_QWORD *)(v3 + 40) = v10;
    if (v10)
    {
      *(_QWORD *)&v11 = -1;
      *((_QWORD *)&v11 + 1) = -1;
      v10[1] = v11;
      v10[2] = v11;
      *v10 = v11;
    }
  }
  return sub_19C42817C(v4, v8, v9, *(_DWORD **)(*v2 + 40), a2, 0, 0);
}

uint64_t sub_19C41A808(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1 && (v2 = *(_QWORD *)(v1 + 8)) != 0)
    return *(_QWORD *)(v2 + 16);
  else
    return 0;
}

uint64_t sub_19C41A828(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unsigned int v4;

  result = *(_QWORD *)(a1 + 16);
  if (result)
  {
    v4 = sub_19C3CD46C(result, a2);
    if (*(_QWORD *)(a1 + 16))
      return v4 >> (*(_BYTE *)(a1 + 372) - 2);
    else
      return 0;
  }
  return result;
}

float sub_19C41A86C(uint64_t a1, int *a2, unsigned int a3)
{
  _QWORD *v3;
  float v4;
  _QWORD v6[5];
  uint64_t v7;
  float *v8;
  uint64_t v9;
  int v10;

  v7 = 0;
  v8 = (float *)&v7;
  v9 = 0x2000000000;
  v10 = 0;
  v3 = *(_QWORD **)(a1 + 8);
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 0x40000000;
  v6[2] = sub_19C41D198;
  v6[3] = &unk_1E3D3C7E0;
  v6[4] = &v7;
  sub_19C427BC8(v3, a2, a3, (uint64_t)v6);
  v4 = v8[6];
  _Block_object_dispose(&v7, 8);
  return v4;
}

void sub_19C41A900(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_19C41A918(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  v3 = 0;
  sub_19C426EA0(**(_QWORD **)(a1 + 8), a2, &v3, 0.0);
  return v3;
}

uint64_t sub_19C41A94C(uint64_t a1, unsigned int a2, float a3)
{
  unsigned int v4;

  v4 = 0;
  sub_19C426EA0(**(_QWORD **)(a1 + 8), a2, &v4, a3);
  return v4;
}

_QWORD *sub_19C41A97C(uint64_t a1, int *a2, unsigned int a3, uint64_t a4, int a5, float *a6, float *a7)
{
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int v23;
  uint64_t v24;
  _QWORD *v25;
  void *v26;
  uint64_t *v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  BOOL v31;
  unsigned int v32;
  _OWORD *v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *result;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  _BYTE v42[24];
  _BYTE *v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v13 = *(_QWORD *)(a1 + 16);
  if (v13)
  {
    v14 = sub_19C3CD46C(v13, a4);
    if (a5 == 2)
      goto LABEL_22;
  }
  else
  {
    v15 = *(unsigned __int8 *)(a4 + 87);
    v16 = (char)v15;
    if ((v15 & 0x80u) != 0)
      v15 = *(_QWORD *)(a4 + 72);
    if (v15 == 10)
    {
      v19 = *(_QWORD *)(a4 + 64);
      v17 = a4 + 64;
      v18 = v19;
      if (v16 >= 0)
        v20 = v17;
      else
        v20 = v18;
      v21 = 0x73656C6653656E64;
      v22 = bswap64(*(_QWORD *)v20);
      if (v22 == 0x73656C6653656E64
        && (v22 = bswap32(*(unsigned __int16 *)(v20 + 8)) >> 16, v21 = 25970, (_DWORD)v22 == 25970))
      {
        v23 = 0;
      }
      else if (v22 < v21)
      {
        v23 = -1;
      }
      else
      {
        v23 = 1;
      }
      v14 = v23 != 0;
      if (a5 == 2)
        goto LABEL_22;
    }
    else
    {
      v14 = 1;
      if (a5 == 2)
      {
LABEL_22:
        v24 = a1 + 24;
        v25 = operator new(0x20uLL);
        v26 = sub_19C3FCD84;
        goto LABEL_23;
      }
    }
  }
  if (a5 == 1)
  {
    v24 = a1 + 24;
    v25 = operator new(0x20uLL);
    v26 = sub_19C3FCCE8;
  }
  else
  {
    if (a5)
      __assert_rtn("weightFunction", "LMNgramPoolFacadeImpl.cpp", 248, "false");
    v24 = a1 + 24;
    v25 = operator new(0x20uLL);
    v26 = sub_19C3FCE28;
  }
LABEL_23:
  *v25 = &off_1E3D388F8;
  v25[1] = v26;
  v25[2] = 0;
  v25[3] = v24;
  v43 = v25;
  v27 = *(uint64_t **)(a1 + 8);
  if (a6)
    *a6 = 0.0;
  if (a7)
    *a7 = 0.0;
  v28 = *v27;
  if (*v27)
  {
    v29 = *(unsigned __int8 *)(v28 + 5);
    if (v29 + 1 >= a3)
    {
      v40 = *(unsigned __int8 *)(v28 + 6);
      if (a3)
      {
        v30 = *(_QWORD *)(v28 + 24);
        if (v30)
          v31 = *(_DWORD *)(v28 + 16) == 0;
        else
          v31 = 1;
        if (!v31)
        {
          v39 = *(unsigned __int8 *)(v28 + 7);
          v32 = *(_DWORD *)(v28 + 20);
          v41 = 0;
          if (!*(_QWORD *)(v28 + 40))
          {
            v33 = malloc_type_malloc(0x30uLL, 0x100004052888210uLL);
            *(_QWORD *)(v28 + 40) = v33;
            if (v33)
            {
              *(_QWORD *)&v34 = -1;
              *((_QWORD *)&v34 + 1) = -1;
              v33[1] = v34;
              v33[2] = v34;
              *v33 = v34;
            }
          }
          if (sub_19C42817C(v30, v32, v39, *(_DWORD **)(*v27 + 40), *a2, 0, (unint64_t *)&v41))
            sub_19C428814(v41, v29, v40, (uint64_t)a2, a3, 0, v41 + ((6 * (unint64_t)v29 + 4) >> 3) + 3, 1, 0, 1u, v14, (uint64_t)v42, a6, a7);
        }
        if (a3 == 1 && a7)
        {
          v35 = *(_QWORD *)(*v27 + 32);
          if (v35)
          {
            LODWORD(v41) = 0;
            sub_19C428814(v35, 1u, v40, (uint64_t)&v41, 1, 0, v35 + 4, 1, 0, 1u, v14, (uint64_t)v42, a7, 0);
          }
        }
      }
      else
      {
        v36 = *(_QWORD *)(v28 + 32);
        if (v36)
        {
          LODWORD(v41) = 0;
          sub_19C428814(v36, 1u, v40, (uint64_t)&v41, 1, 0, v36 + 4, 1, 0, 1u, v14, (uint64_t)v42, a6, 0);
        }
      }
    }
  }
  result = v43;
  if (v43 == v42)
  {
    v38 = 4;
    result = v42;
  }
  else
  {
    if (!v43)
      return result;
    v38 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v38))();
}

void sub_19C41AD14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char *a19)
{
  char *v20;
  uint64_t v21;

  v20 = a19;
  if (a19 == &a16)
  {
    v21 = 4;
    v20 = &a16;
  }
  else
  {
    if (!a19)
      goto LABEL_6;
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_19C41AD50(uint64_t a1@<X0>, int *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  _QWORD *v10;
  int v11;
  _QWORD *v12;
  __n128 v13;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int v23;
  uint64_t *v24;
  _BYTE *v25;
  _BYTE *v26;
  int64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  __n128 (*v36)(_QWORD *, uint64_t);
  void (*v37)(uint64_t);
  void *__p;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t, int, int, float);
  void *v44;
  uint64_t *v45;
  _BYTE v46[24];
  _BYTE *v47;
  int v48;
  _QWORD v49[3];
  _QWORD *v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v33 = 0;
  v34 = &v33;
  v35 = 0x4002000000;
  v36 = sub_19C41CE60;
  v37 = sub_19C41CE84;
  v39 = 0;
  v40 = 0;
  __p = 0;
  v10 = operator new(0x20uLL);
  *v10 = &off_1E3D388F8;
  v10[1] = sub_19C3FCCE8;
  v10[2] = 0;
  v10[3] = a1 + 24;
  v50 = v10;
  if (!*(_QWORD *)(a1 + 16))
  {
    v15 = *(unsigned __int8 *)(a4 + 87);
    v16 = (char)v15;
    if ((v15 & 0x80u) != 0)
      v15 = *(_QWORD *)(a4 + 72);
    if (v15 == 10)
    {
      v19 = *(_QWORD *)(a4 + 64);
      v18 = a4 + 64;
      v17 = v19;
      if (v16 >= 0)
        v20 = v18;
      else
        v20 = v17;
      v21 = 0x73656C6653656E64;
      v22 = bswap64(*(_QWORD *)v20);
      if (v22 == 0x73656C6653656E64
        && (v22 = bswap32(*(unsigned __int16 *)(v20 + 8)) >> 16, v21 = 25970, (_DWORD)v22 == 25970))
      {
        v23 = 0;
      }
      else if (v22 < v21)
      {
        v23 = -1;
      }
      else
      {
        v23 = 1;
      }
      v11 = v23 != 0;
    }
    else
    {
      v11 = 1;
    }
    v12 = *(_QWORD **)(a1 + 8);
    v41 = MEMORY[0x1E0C809B0];
    v42 = 1174405120;
    v43 = sub_19C41CE9C;
    v44 = &unk_1E3D3C808;
    v14 = v46;
LABEL_20:
    v10 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v10 + 16))(v10);
    goto LABEL_21;
  }
  v11 = sub_19C3CD46C(*(_QWORD *)(a1 + 16), a4);
  v10 = v50;
  v12 = *(_QWORD **)(a1 + 8);
  v41 = MEMORY[0x1E0C809B0];
  v13.n128_u64[0] = 1174405120;
  v42 = 1174405120;
  v43 = sub_19C41CE9C;
  v44 = &unk_1E3D3C808;
  v14 = v46;
  if (v50)
  {
    if (v50 == v49)
    {
      v47 = v46;
      (*(void (**)(_QWORD *, _BYTE *))(v49[0] + 24))(v49, v46);
      goto LABEL_22;
    }
    goto LABEL_20;
  }
LABEL_21:
  v47 = v10;
LABEL_22:
  v48 = v11;
  v45 = &v33;
  sub_19C428D94(v12, a2, a3, (uint64_t)&v41, v13);
  v24 = v34;
  a5[1] = 0;
  a5[2] = 0;
  *a5 = 0;
  v26 = (_BYTE *)v24[5];
  v25 = (_BYTE *)v24[6];
  v27 = v25 - v26;
  if (v25 != v26)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v27 >> 2) >= 0x1555555555555556)
      sub_19C2A18E8();
    v28 = (char *)operator new(v27);
    *a5 = v28;
    v29 = &v28[4 * (v27 >> 2)];
    a5[2] = v29;
    memcpy(v28, v26, v27);
    a5[1] = v29;
  }
  if (v47 == v46)
  {
    v30 = 4;
  }
  else
  {
    if (!v47)
      goto LABEL_30;
    v30 = 5;
    v14 = v47;
  }
  (*(void (**)(_QWORD *))(*v14 + 8 * v30))(v14);
LABEL_30:
  v31 = v50;
  if (v50 == v49)
  {
    v32 = 4;
    v31 = v49;
  }
  else
  {
    if (!v50)
      goto LABEL_35;
    v32 = 5;
  }
  (*(void (**)(void))(*v31 + 8 * v32))();
LABEL_35:
  _Block_object_dispose(&v33, 8);
  if (__p)
  {
    v39 = __p;
    operator delete(__p);
  }
}

void sub_19C41B074(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,_QWORD *a26)
{
  _QWORD *v26;
  uint64_t v27;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;

  if (a26 == v26)
  {
    v29 = 4;
  }
  else
  {
    if (!a26)
      goto LABEL_6;
    v29 = 5;
    v26 = a26;
  }
  (*(void (**)(_QWORD *))(*v26 + 8 * v29))(v26);
LABEL_6:
  v30 = *(_QWORD **)(v27 - 80);
  if (v30 == (_QWORD *)(v27 - 104))
  {
    v31 = 4;
    v30 = (_QWORD *)(v27 - 104);
  }
  else
  {
    if (!v30)
      goto LABEL_11;
    v31 = 5;
  }
  (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_11:
  _Block_object_dispose(&a10, 8);
  if (__p)
  {
    a16 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_19C41B110(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, float a5)
{
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t *v21;
  unsigned int v22;
  unsigned int *v23;
  uint64_t v24;

  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    v10 = sub_19C3CD46C(v9, a4);
  }
  else
  {
    v11 = *(unsigned __int8 *)(a4 + 87);
    v12 = (char)v11;
    if ((v11 & 0x80u) != 0)
      v11 = *(_QWORD *)(a4 + 72);
    if (v11 == 10)
    {
      v15 = *(_QWORD *)(a4 + 64);
      v13 = a4 + 64;
      v14 = v15;
      if (v12 >= 0)
        v16 = v13;
      else
        v16 = v14;
      v17 = 0x73656C6653656E64;
      v18 = bswap64(*(_QWORD *)v16);
      if (v18 == 0x73656C6653656E64
        && (v18 = bswap32(*(unsigned __int16 *)(v16 + 8)) >> 16, v17 = 25970, (_DWORD)v18 == 25970))
      {
        v19 = 0;
      }
      else if (v18 < v17)
      {
        v19 = -1;
      }
      else
      {
        v19 = 1;
      }
      v10 = v19 != 0;
    }
    else
    {
      v10 = 1;
    }
  }
  v20 = 0;
  v21 = *(uint64_t **)(a1 + 8);
  v22 = *(unsigned __int8 *)(*v21 + 5);
  if (v22 >= a3)
    v22 = a3;
  v23 = (unsigned int *)(a2 + 4 * a3);
  v24 = v22 + 1;
  do
    sub_19C429718(*v21, v23--, v20++, v10, a5);
  while (v24 != v20);
}

void sub_19C41B234(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t *v19;
  unsigned int v20;
  unsigned int *v21;
  uint64_t v22;

  v7 = *(_QWORD *)(a1 + 16);
  if (v7)
  {
    v8 = sub_19C3CD46C(v7, a4);
  }
  else
  {
    v9 = *(unsigned __int8 *)(a4 + 87);
    v10 = (char)v9;
    if ((v9 & 0x80u) != 0)
      v9 = *(_QWORD *)(a4 + 72);
    if (v9 == 10)
    {
      v13 = *(_QWORD *)(a4 + 64);
      v11 = a4 + 64;
      v12 = v13;
      if (v10 >= 0)
        v14 = v11;
      else
        v14 = v12;
      v15 = 0x73656C6653656E64;
      v16 = bswap64(*(_QWORD *)v14);
      if (v16 == 0x73656C6653656E64
        && (v16 = bswap32(*(unsigned __int16 *)(v14 + 8)) >> 16, v15 = 25970, (_DWORD)v16 == 25970))
      {
        v17 = 0;
      }
      else if (v16 < v15)
      {
        v17 = -1;
      }
      else
      {
        v17 = 1;
      }
      v8 = v17 != 0;
    }
    else
    {
      v8 = 1;
    }
  }
  v18 = 0;
  v19 = *(uint64_t **)(a1 + 8);
  v20 = *(unsigned __int8 *)(*v19 + 5);
  if (v20 >= a3)
    v20 = a3;
  v21 = (unsigned int *)(a2 + 4 * a3);
  v22 = v20 + 1;
  do
    sub_19C429718(*v19, v21--, v18++, v8, -1.0);
  while (v22 != v18);
}

uint64_t sub_19C41B34C(uint64_t result, float a2)
{
  uint64_t v2;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  BOOL v9;
  int v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = **(_QWORD **)(result + 8);
  if (v2)
  {
    v4 = *(unsigned __int8 *)(v2 + 5);
    v5 = *(unsigned __int8 *)(v2 + 7);
    v6 = *(unsigned __int8 *)(v2 + 6);
    v7 = *(_DWORD *)(v2 + 20);
    v8 = *(_QWORD *)(v2 + 24);
    result = *(_QWORD *)(v2 + 32);
    if (result)
      result = sub_19C42B954(result, 1u, *(unsigned __int8 *)(v2 + 6), result + 4, a2);
    if (v8)
      v9 = v7 == 0;
    else
      v9 = 1;
    if (!v9 && (_DWORD)v5 != 0)
    {
      v11 = 0;
      v12 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v5;
      do
      {
        v13 = ((v11 + 24) >> 3) + v8;
        v14 = v13 & 0xFFFFFFFFFFFFFFF8;
        v15 = v11 & 7 | (8 * (v13 & 7));
        v16 = *(_QWORD *)(v13 & 0xFFFFFFFFFFFFFFF8) >> v15;
        if ((unint64_t)(v15 + v5) >= 0x41)
          v16 |= *(_QWORD *)(v14 + 8) << -(char)v15;
        result = v16 & v12;
        if ((v16 & v12) != 0)
          result = sub_19C42B954(result, v4, v6, result + ((6 * (unint64_t)v4 + 4) >> 3) + 3, a2);
        v11 += v5 + 24;
        --v7;
      }
      while (v7);
    }
  }
  return result;
}

uint64_t sub_19C41B46C(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v10;
  int v12;
  unint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = **(_QWORD **)(a1 + 8);
  if (!v1)
    return 1;
  v2 = *(unsigned __int8 *)(v1 + 5);
  if (*(_BYTE *)(v1 + 5))
  {
    v3 = *(unsigned __int8 *)(v1 + 7);
    v4 = *(unsigned __int8 *)(v1 + 6);
    v5 = *(_DWORD *)(v1 + 20);
    v7 = *(_QWORD *)(v1 + 24);
    v6 = *(_QWORD *)(v1 + 32);
    if (v6)
      v8 = sub_19C42DC40(v6, 1u, *(unsigned __int8 *)(v1 + 6));
    else
      v8 = 1;
    if (v7)
      v10 = v5 == 0;
    else
      v10 = 1;
    if (v10 || v8 == 0)
      return v8 & 1;
    if ((_DWORD)v3)
    {
      v12 = 0;
      v13 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v3;
      v14 = 1;
      LOBYTE(v8) = 1;
      do
      {
        v15 = ((v12 + 24) >> 3) + v7;
        v16 = v15 & 0xFFFFFFFFFFFFFFF8;
        v17 = v12 & 7 | (8 * (v15 & 7));
        v18 = *(_QWORD *)(v15 & 0xFFFFFFFFFFFFFFF8) >> v17;
        if ((unint64_t)(v17 + v3) >= 0x41)
          v18 |= *(_QWORD *)(v16 + 8) << -(char)v17;
        if ((v18 & v13) != 0)
          LOBYTE(v8) = sub_19C42DC40(v18 & v13, v2, v4);
        if ((v8 & 1) == 0)
          break;
        v12 += v3 + 24;
      }
      while (v14++ < v5);
      return v8 & 1;
    }
  }
  LOBYTE(v8) = 1;
  return v8 & 1;
}

uint64_t sub_19C41B590(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unsigned int v4;
  float v5;
  _DWORD *v6;
  uint64_t v7;
  BOOL v8;
  int v10;
  unsigned int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  int v22;
  int v23;
  unint64_t v24;
  int v25;
  char v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  int v30;
  unsigned int v31;
  char v32;
  uint64_t v33;
  int v34;
  int v35;
  unint64_t v36;
  _DWORD *v37;
  uint64_t v38;
  int v39;
  unsigned int v40;
  unint64_t v41;
  uint64_t v42;
  int v43;
  unsigned int v44;
  unint64_t v45;
  int v46;
  unsigned int v47;
  unsigned int v48;
  unint64_t v49;
  _DWORD *v50;
  uint64_t v51;
  int v52;
  unint64_t v53;
  _DWORD *v54;
  uint64_t v55;
  int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  float v61;
  int v62;
  float v63;
  float v64;
  float v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unsigned int v69;
  int32x4_t v70;
  uint64_t v71;
  int32x4_t v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  float v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  int v80;
  _OWORD *v81;
  __int128 v82;
  BOOL v83;
  uint64_t result;
  unint64_t v87;
  unsigned int v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int v95;
  uint64_t *v96;
  unint64_t v97;
  unint64_t v98;
  unsigned int v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  _QWORD v105[5];
  int v106;

  v96 = *(uint64_t **)(a1 + 8);
  v2 = *v96;
  if (*v96)
  {
    v3 = *(unsigned int *)(v2 + 12);
    if (v3 > a2)
    {
      if (*(_DWORD *)(v2 + 16))
      {
        v4 = 0;
        v5 = (float)a2 * 0.95;
        v93 = a2;
        while (1)
        {
          v95 = v3;
          v94 = v4;
          v6 = malloc_type_calloc(0x2710uLL, 4uLL, 0x100004052888210uLL);
          v7 = *(_QWORD *)(v2 + 24);
          v8 = !v7 || *(_DWORD *)(v2 + 16) == 0;
          v103 = *(_DWORD *)(v2 + 20);
          if (!v8 && *(_DWORD *)(v2 + 20) != 0)
          {
            v101 = *(unsigned __int8 *)(v2 + 7);
            if (*(_BYTE *)(v2 + 7))
              break;
          }
LABEL_64:
          v70 = 0uLL;
          v71 = -40000;
          v72 = 0uLL;
          do
          {
            v70 = vaddq_s32(*(int32x4_t *)((char *)v6 + v71 + 40000), v70);
            v72 = vaddq_s32(*(int32x4_t *)((char *)v6 + v71 + 40016), v72);
            v71 += 32;
          }
          while (v71);
          v73 = 0;
          v74 = vaddvq_s32(vaddq_s32(v72, v70));
          v75 = v74 - (float)((float)(v5 * (float)v74) / (float)v95);
          while (1)
          {
            v73 += v6[v71];
            if (v73 >= v75)
              break;
            if (++v71 == 10000)
            {
              v76 = 1000.0;
              goto LABEL_71;
            }
          }
          v76 = (float)((float)v71 * 0.1) + 0.05;
LABEL_71:
          free(v6);
          v77 = *v96;
          v99 = *(unsigned __int8 *)(*v96 + 5);
          v104 = *(unsigned __int8 *)(*v96 + 7);
          v78 = *(unsigned __int8 *)(*v96 + 6);
          v79 = *(_DWORD *)(*v96 + 16);
          v80 = *(_DWORD *)(*v96 + 20);
          v102 = *(_QWORD *)(*v96 + 24);
          v81 = *(_OWORD **)(*v96 + 40);
          if (v81)
          {
            *(_QWORD *)&v82 = -1;
            *((_QWORD *)&v82 + 1) = -1;
            v81[1] = v82;
            v81[2] = v82;
            *v81 = v82;
          }
          if (v102)
            v83 = v79 == 0;
          else
            v83 = 1;
          if (!v83 && v80 != 0 && (_DWORD)v104 != 0)
          {
            v87 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v104;
            v88 = 24;
            do
            {
              v89 = (v88 >> 3) + v102;
              v90 = v89 & 0xFFFFFFFFFFFFFFF8;
              v91 = ((_BYTE)v88 - 24) & 7 | (8 * (v89 & 7));
              v92 = *(_QWORD *)(v89 & 0xFFFFFFFFFFFFFFF8) >> v91;
              if ((unint64_t)(v91 + v104) >= 0x41)
                v92 |= *(_QWORD *)(v90 + 8) << -(char)v91;
              if ((v92 & v87) != 0)
              {
                v105[0] = MEMORY[0x1E0C809B0];
                v105[1] = 0x40000000;
                v105[2] = sub_19C42D2E4;
                v105[3] = &unk_1E3D3C958;
                v105[4] = v77;
                v106 = v78;
                sub_19C42D348(v92 & v87, v99, v78, 0, (v92 & v87) + ((6 * (unint64_t)v99 + 4) >> 3) + 3, 1, 0, 1u, v76, (uint64_t)v105);
              }
              v88 += v104 + 24;
              --v80;
            }
            while (v80);
          }
          sub_19C42BD40(v77, 0, 0, *(_BYTE *)(v77 + 6));
          v2 = *v96;
          LODWORD(v3) = *(_DWORD *)(*v96 + 12);
          if (v3 <= v93)
            return 1;
          result = 1;
          if (*(_DWORD *)(v2 + 16))
          {
            v4 = v94 + 1;
            if (v94 <= 1)
              continue;
          }
          return result;
        }
        v10 = 0;
        v11 = *(unsigned __int8 *)(v2 + 5);
        v12 = *(unsigned __int8 *)(v2 + 6);
        v100 = v101 + 24;
        v98 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v101;
        v97 = ((6 * (unint64_t)*(unsigned __int8 *)(v2 + 5) + 4) >> 3) + 3;
        v13 = ((_WORD)v12 + 31) & 0x1F8;
        while (1)
        {
          v14 = ((v10 * v100 + 24) >> 3) + v7;
          v15 = (v10 * v100) & 7 | (8 * (v14 & 7));
          v16 = *(_QWORD *)(v14 & 0xFFFFFFFFFFFFFFF8) >> v15;
          if ((unint64_t)(v15 + v101) >= 0x41)
            v16 |= *(_QWORD *)((v14 & 0xFFFFFFFFFFFFFFF8) + 8) << -(char)v15;
          v17 = v16 & v98;
          if ((v16 & v98) != 0)
            break;
LABEL_14:
          if (++v10 == v103)
            goto LABEL_64;
        }
        v18 = 0;
        v19 = v17 + v97;
        v20 = v17 + 3;
        v21 = 1;
        while (1)
        {
          if (v18)
            v22 = 24;
          else
            v22 = 0;
          v23 = 6 * v18;
          v24 = (((3 * v18) >> 2) & 0x1FFFFFFF) + v20;
          v25 = *(_DWORD *)(v24 & 0xFFFFFFFFFFFFFFFCLL) >> ((6 * v18++) & 6 | (8 * (v24 & 3)));
          if (v18 >= v11)
          {
            v31 = 0;
          }
          else
          {
            v26 = v23 + 3;
            v27 = ((v23 + 3) >> 3) + v20;
            v28 = v27 & 0xFFFFFFFFFFFFFFFCLL;
            v29 = v26 & 7 | (8 * (v27 & 3));
            v30 = *(_DWORD *)(v27 & 0xFFFFFFFFFFFFFFFCLL) >> v29;
            if (v29 >= 0x1E)
              v30 |= *(_DWORD *)(v28 + 4) << -(char)v29;
            v31 = 4 * (v30 & 7);
          }
          v32 = 4 * v25;
          v33 = v32 & 0x1C;
          v34 = ((v32 & 0x1C) + (_BYTE)v22 + (_BYTE)v31 + 7) & 0xF8;
          v35 = v34 * (v21 - 1);
          if ((v32 & 0x1C) != 0)
          {
            v36 = ((v35 + v22) >> 3) + v19;
            v37 = (_DWORD *)(v36 & 0xFFFFFFFFFFFFFFFCLL);
            v38 = 8 * (v36 & 3);
            v39 = *v37 >> v38;
            if (v38 + (unint64_t)(v32 & 0x1C) >= 0x21)
              v39 |= v37[1] << -(char)v38;
            v40 = v39 & (0xFFFFFFFF >> -(v32 & 0x1C));
            if (v31)
            {
LABEL_31:
              v41 = ((v35 + v33 + v22) >> 3) + v19;
              v42 = v32 & 4 | (8 * (v41 & 3));
              v43 = *(_DWORD *)(v41 & 0xFFFFFFFFFFFFFFFCLL) >> v42;
              if (v42 + (unint64_t)v31 >= 0x21)
                v43 |= *(_DWORD *)((v41 & 0xFFFFFFFFFFFFFFFCLL) + 4) << -(char)v42;
              v44 = v43 & (0xFFFFFFFF >> -(char)v31);
              goto LABEL_36;
            }
          }
          else
          {
            v40 = 0;
            if (v31)
              goto LABEL_31;
          }
          v44 = 0;
LABEL_36:
          v45 = v19 + ((v34 * v21) >> 3);
          if ((_DWORD)v33)
          {
            v46 = 0;
            v47 = 0xFFFFFFFF >> -(char)v33;
            do
            {
              v49 = ((v22 + v46 * v34) >> 3) + v19;
              v50 = (_DWORD *)(v49 & 0xFFFFFFFFFFFFFFFCLL);
              v51 = 8 * (v49 & 3);
              v52 = *v50 >> v51;
              if ((unint64_t)(v51 + v33) >= 0x21)
                v52 |= v50[1] << -(char)v51;
              if (v46)
              {
                v53 = ((v22 + (v46 - 1) * v34) >> 3) + v19;
                v54 = (_DWORD *)(v53 & 0xFFFFFFFFFFFFFFFCLL);
                v55 = 8 * (v53 & 3);
                v56 = *v54 >> v55;
                if ((unint64_t)(v55 + v33) >= 0x21)
                  v56 |= v54[1] << -(char)v55;
                v57 = v56 & v47;
              }
              else
              {
                v57 = 0;
              }
              v58 = v52 & v47;
              v59 = v58 - v57;
              if (v58 <= v57)
                goto LABEL_38;
              v60 = v12 + v13 * v57;
              v61 = 0.0;
              do
              {
                v66 = (v60 >> 3) + v45;
                v67 = v66 & 0xFFFFFFFFFFFFFFFCLL;
                v68 = v12 & 7 | (8 * (v66 & 3));
                v69 = *(_DWORD *)(v66 & 0xFFFFFFFFFFFFFFFCLL) >> v68;
                if (v68 >= 9)
                  v69 |= *(_DWORD *)(v67 + 4) << -(char)v68;
                v62 = (v69 >> 22) & 3;
                v63 = (float)(v69 & 0x3FFFFF);
                v64 = v63 * 0.0078125;
                v65 = v63 * 0.000061035;
                if (!v62)
                  v63 = v63 * 0.00000095367;
                if (v62 == 1)
                  v63 = v65;
                if (v62 == 2)
                  v63 = v64;
                v61 = v63 + v61;
                v60 += v13;
                --v59;
              }
              while (v59);
              if (v61 <= 0.0)
              {
LABEL_38:
                v48 = 0;
              }
              else
              {
                v48 = (float)((float)(v61 * 10.0) + 0.5);
                if (v48 >= 0x270F)
                  v48 = 9999;
              }
              ++v6[v48];
              ++v46;
            }
            while (v46 != v21);
          }
          if (v18 < v11)
          {
            v19 = v45 + ((v40 * v13) >> 3);
            v21 = v44;
            if (v44)
              continue;
          }
          goto LABEL_14;
        }
      }
    }
  }
  return 0;
}

void sub_19C41BCA0(uint64_t a1, _QWORD *a2)
{
  uint64_t *v2;
  _QWORD v3[5];

  if (*a2 != a2[1])
  {
    v2 = *(uint64_t **)(a1 + 8);
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 0x40000000;
    v3[2] = sub_19C41CE18;
    v3[3] = &unk_1E3D3C838;
    v3[4] = a2;
    sub_19C42C7F8(*v2, (uint64_t)v3, 0);
  }
}

uint64_t sub_19C41BD08(uint64_t a1, int __fd)
{
  _QWORD *v2;
  uint64_t v3;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  BOOL v11;
  ssize_t v12;
  _BOOL4 v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  size_t v22;
  uint64_t result;
  void *v24;
  uint64_t v25;
  int v26;
  BOOL v27;
  ssize_t v28;
  size_t v29;
  int v30;
  unint64_t v31;
  unsigned int v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  const void *v41;
  size_t v42;
  ssize_t v43;
  uint64_t v44;
  unsigned int v46;
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  int v57;
  _QWORD *v58;
  uint64_t v59;
  unsigned int v60;
  int v61;
  char v62;
  char v63;
  char v64;
  int __buf;
  char v66;
  char v67;
  char v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;

  v2 = *(_QWORD **)(a1 + 8);
  v3 = *v2;
  if (!*v2)
    return 1;
  v5 = *(_DWORD *)(v3 + 16);
  v6 = *(unsigned int *)(v3 + 20);
  v7 = *(unsigned __int8 *)(v3 + 7);
  v8 = *(unsigned __int8 *)(v3 + 6);
  v9 = *(unsigned __int8 *)(v3 + 5);
  v10 = *(_QWORD *)(v3 + 24);
  __buf = -1381269244;
  v66 = 0;
  v60 = v9;
  v67 = v9;
  v69 = 64;
  v61 = v8;
  v68 = v8;
  v71 = 0;
  v70 = *(_QWORD *)(v3 + 8);
  v73 = 0;
  v74 = 0;
  if (v10)
    v11 = v5 == 0;
  else
    v11 = 1;
  v72 = 0;
  if (!v11)
  {
    LODWORD(v71) = v5;
    HIDWORD(v71) = v5;
  }
  v12 = write(__fd, &__buf, 0x18uLL);
  v13 = v12 == 24;
  if (v12 == 24)
    v14 = 24;
  else
    v14 = 0;
  if (v10)
    v15 = v12 == 24;
  else
    v15 = 0;
  if (!v15 || v5 == 0)
  {
    v59 = v14;
    v58 = v2;
    goto LABEL_19;
  }
  v22 = (3 * v5) & 0x1FFFFFFF;
  result = (uint64_t)malloc_type_calloc(v22, 1uLL, 0xD214B0D8uLL);
  if (result)
  {
    v24 = (void *)result;
    v25 = v14;
    v58 = v2;
    v26 = v7 + 24;
    if ((_DWORD)v6)
      v27 = (_DWORD)v7 == 0;
    else
      v27 = 1;
    if (!v27)
    {
      v46 = 0;
      v47 = 0;
      v48 = v6;
      do
      {
        v50 = ((v46 + 24) >> 3) + v10;
        v51 = v50 & 0xFFFFFFFFFFFFFFF8;
        v52 = v46 & 7 | (8 * (v50 & 7));
        v53 = *(_QWORD *)(v50 & 0xFFFFFFFFFFFFFFF8) >> v52;
        if ((unint64_t)(v52 + v7) >= 0x41)
          v53 |= *(_QWORD *)(v51 + 8) << -(char)v52;
        if ((v53 & (0xFFFFFFFFFFFFFFFFLL >> -(char)v7)) != 0)
        {
          v54 = (v46 >> 3) + v10;
          v55 = v54 & 0xFFFFFFFFFFFFFFFCLL;
          v56 = v46 & 7 | (8 * (v54 & 3));
          v57 = *(_DWORD *)(v54 & 0xFFFFFFFFFFFFFFFCLL) >> v56;
          if (v56 >= 9)
            v57 |= *(_DWORD *)(v55 + 4) << -(char)v56;
          v49 = result + ((unint64_t)(24 * v47) >> 3);
          *(_WORD *)v49 = v57;
          *(_BYTE *)(v49 + 2) = BYTE2(v57);
          ++v47;
        }
        v46 += v26;
        --v48;
      }
      while (v48);
    }
    v28 = write(__fd, (const void *)result, v22);
    free(v24);
    v13 = v28 == v22;
    if (v28 == v22)
      v29 = v22;
    else
      v29 = 0;
    v59 = v29 + v25;
    if (v28 == v22 && (_DWORD)v6)
    {
      if (!(_DWORD)v7)
      {
LABEL_20:
        v17 = *v58;
        v18 = *(_QWORD *)(*v58 + 32);
        if (!v18)
        {
          v21 = v59;
          return v21 == *(unsigned int *)(v17 + 12);
        }
        v19 = sub_19C426CE8(*(_QWORD *)(*v58 + 32), 1u, v61, 0, v18 + 4, 1u) - v18 + 3;
        v62 = v19 >> 2;
        v63 = v19 >> 10;
        v64 = v19 >> 18;
        if (write(__fd, &v62, 3uLL) == 3)
        {
          v20 = v19 & 0xFFFFFFFC;
          if (write(__fd, (const void *)(v18 + 3), v20 - 3) == v20 - 3)
          {
            v21 = v59 + v20;
            v17 = *v58;
            return v21 == *(unsigned int *)(v17 + 12);
          }
        }
        return 0;
      }
      v30 = 0;
      v31 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v7;
      v32 = 1;
      do
      {
        v33 = ((v30 + 24) >> 3) + v10;
        v34 = v33 & 0xFFFFFFFFFFFFFFF8;
        v35 = v30 & 7 | (8 * (v33 & 7));
        v36 = *(_QWORD *)(v33 & 0xFFFFFFFFFFFFFFF8) >> v35;
        if ((unint64_t)(v35 + v7) >= 0x41)
          v36 |= *(_QWORD *)(v34 + 8) << -(char)v35;
        v37 = v36 & v31;
        if ((v36 & v31) != 0)
        {
          v38 = v6;
          v39 = sub_19C426CE8(v36 & v31, v60, v61, 0, v37 + ((6 * (unint64_t)v60 + 4) >> 3) + 3, 1u) - v37 + 3;
          v62 = v39 >> 2;
          v63 = v39 >> 10;
          v64 = v39 >> 18;
          if (write(__fd, &v62, 3uLL) == 3)
          {
            v40 = v39 & 0xFFFFFFFC;
            v41 = (const void *)(v37 + 3);
            v42 = (v40 - 3);
            v43 = write(__fd, v41, v42);
            v13 = v43 == v42;
            if (v43 == v42)
              v44 = v40;
            else
              v44 = 0;
            v59 += v44;
          }
          else
          {
            v13 = 0;
          }
          v6 = v38;
        }
        else
        {
          v13 = 1;
        }
        if (!v13)
          break;
        v30 += v26;
      }
      while (v32++ < v6);
    }
LABEL_19:
    if (!v13)
      return 0;
    goto LABEL_20;
  }
  return result;
}

void sub_19C41C114(uint64_t a1)
{
  uint64_t *v1;
  _QWORD v2[5];

  v1 = *(uint64_t **)(a1 + 8);
  v2[0] = MEMORY[0x1E0C809B0];
  v2[1] = 0x40000000;
  v2[2] = sub_19C41CDFC;
  v2[3] = &unk_1E3D3C858;
  v2[4] = a1;
  sub_19C42C7F8(*v1, 0, (uint64_t)v2);
}

uint64_t sub_19C41C170(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  _BOOL4 v4;
  uint64_t v5;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    v2 = *(uint64_t **)(a1 + 8);
    v3 = *(_QWORD *)(v1 + 8);
    if (v3)
    {
      v4 = sub_19C3CDCF8(v3, v2);
      v5 = *(_QWORD *)(v1 + 16);
      if (!v5)
        return v4 | v5;
    }
    else
    {
      v4 = 0;
      v5 = *(_QWORD *)(v1 + 16);
      if (!v5)
        return v4 | v5;
    }
    LODWORD(v5) = sub_19C3CDCF8(v5, v2);
    return v4 | v5;
  }
  return 0;
}

void sub_19C41C1DC(uint64_t a1, const __CFURL *a2)
{
  const __CFURL *v3;
  __CFDictionary *v4;

  v3 = CFURLCreateCopyAppendingPathComponent(0, a2, CFSTR("tags.plist"), 0);
  v4 = sub_19C3CE5C4(*(_QWORD *)(a1 + 16));
  sub_19C2E1684(v4, v3, kCFPropertyListXMLFormat_v1_0, 1, 0);
  if (v4)
    CFRelease(v4);
  if (v3)
    CFRelease(v3);
}

void sub_19C41C260(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
  sub_19C31D680(&a9);
  sub_19C31352C(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_19C41C284(uint64_t a1, CFErrorRef *a2)
{
  CFURLRef *v2;
  __CFDictionary *v4;
  _BOOL8 v5;

  v2 = *(CFURLRef **)(a1 + 16);
  if (!v2)
    return 1;
  v4 = sub_19C3CE5C4(*(_QWORD *)(a1 + 16));
  v5 = sub_19C2E1684(v4, *v2, kCFPropertyListBinaryFormat_v1_0, 1, a2);
  CFRelease(v4);
  return v5;
}

void sub_19C41C2E8(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  size_t v4;
  char *v5;
  char *v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  unint64_t v15;
  BOOL v16;
  unsigned int v17;
  int v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const void *v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  int v32;
  unint64_t v33;
  size_t v34;
  char *v35;
  const void *v36;
  unsigned int v37;
  const void *v38;
  unsigned int v39;
  size_t v40;
  char *v41;
  _DWORD *v42;
  uint64_t v43;
  unint64_t v44;
  int v45;
  _BYTE *v46;
  unint64_t v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  _DWORD *v52;
  unint64_t v53;
  int v54;
  unint64_t v55;
  unint64_t v56;
  int v57;
  size_t v58;
  void *v60;
  unint64_t v61;
  char *v62;
  char *v63;
  uint64x2_t v64;
  int32x2_t v65;
  int16x8_t v66;
  unsigned int v67;
  void *v68;
  uint64_t v69;
  unsigned int v70;
  unint64_t v71;
  _DWORD *v72;
  unint64_t v73;
  int v74;
  size_t v75;
  void *v76;
  void *v77;
  char *v78;
  char *v79;
  char *v80;
  char *exception;
  char *v82;
  char *v83;
  char *v84;
  char *v85;
  char *v86;
  unint64_t v87;
  uint64_t v89;
  int v90;
  unint64_t v91;
  unint64_t v92;
  char *v93;
  int v94;
  uint64_t v95;
  unsigned int v96;

  v2 = *(uint64_t **)(a1 + 8);
  v3 = *v2;
  v4 = *(unsigned int *)(*v2 + 12);
  if ((_DWORD)v4)
  {
    v5 = (char *)operator new(*(unsigned int *)(*v2 + 12));
    v6 = &v5[v4];
    bzero(v5, v4);
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v92 = v6 - v5;
  v93 = v5;
  if ((unint64_t)(v6 - v5) < 0x18)
    goto LABEL_31;
  v7 = *(_DWORD *)(v3 + 16);
  v8 = *(_DWORD *)(v3 + 20);
  v9 = *(unsigned __int8 *)(v3 + 7);
  v10 = *(unsigned __int8 *)(v3 + 6);
  v11 = *(unsigned __int8 *)(v3 + 5);
  v12 = *(_QWORD *)(v3 + 24);
  *(_DWORD *)v93 = -1381269244;
  v93[4] = 0;
  v93[5] = v11;
  v93[7] = 64;
  v93[6] = v10;
  *((_QWORD *)v93 + 2) = 0;
  if (v7)
    v13 = v12 == 0;
  else
    v13 = 1;
  *((_QWORD *)v93 + 1) = *(_QWORD *)(v3 + 8);
  if (v13)
  {
    v14 = 24;
LABEL_28:
    v38 = *(const void **)(v3 + 32);
    if (v38)
    {
      v39 = sub_19C426CE8(*(_QWORD *)(v3 + 32), 1u, v10, 0, (uint64_t)v38 + 4, 1u) - (_DWORD)v38 + 3;
      v40 = v39 & 0xFFFFFFFC;
      if (v14 + v40 <= v92)
      {
        v41 = &v93[v14];
        memcpy(&v93[v14], v38, v40);
        *v41 = v39 >> 2;
        v41[1] = v39 >> 10;
        v41[2] = v39 >> 18;
      }
    }
    goto LABEL_31;
  }
  *((_DWORD *)v93 + 4) = v7;
  *((_DWORD *)v93 + 5) = v7;
  v15 = ((3 * v7) & 0x1FFFFFFFu) + 24;
  if (v92 < v15)
    goto LABEL_31;
  if (v8)
    v16 = (_DWORD)v9 == 0;
  else
    v16 = 1;
  if (v16)
  {
    v14 = ((3 * v7) & 0x1FFFFFFFu) + 24;
    goto LABEL_28;
  }
  v17 = 0;
  v18 = 0;
  v19 = v9 + 24;
  v20 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v9;
  v21 = ((6 * (unint64_t)v11 + 4) >> 3) + 3;
  while (1)
  {
    v22 = v19 * v17;
    while (1)
    {
      v23 = ((v22 + 24) >> 3) + v12;
      v24 = v23 & 0xFFFFFFFFFFFFFFF8;
      v25 = v22 & 7 | (8 * (v23 & 7));
      v26 = *(_QWORD *)(v23 & 0xFFFFFFFFFFFFFFF8) >> v25;
      if ((unint64_t)(v25 + v9) >= 0x41)
        v26 |= *(_QWORD *)(v24 + 8) << -(char)v25;
      v27 = (const void *)(v26 & v20);
      if ((v26 & v20) != 0)
        break;
      ++v17;
      v22 += v19;
      if (v17 >= v8)
      {
        v14 = v15;
        goto LABEL_28;
      }
    }
    v91 = v15;
    v94 = v18;
    v87 = v21;
    v89 = v11;
    v90 = v10;
    v28 = sub_19C426CE8(v26 & v20, v11, v10, 0, (uint64_t)v27 + v21, 1u);
    v29 = (v22 >> 3) + v12;
    v30 = v29 & 0xFFFFFFFFFFFFFFFCLL;
    v31 = v22 & 7 | (8 * (v29 & 3));
    v32 = *(_DWORD *)(v29 & 0xFFFFFFFFFFFFFFFCLL) >> v31;
    if (v31 >= 9)
      v32 |= *(_DWORD *)(v30 + 4) << -(char)v31;
    v33 = (unint64_t)&v93[((unint64_t)(24 * v94) >> 3) + 24];
    *(_WORD *)v33 = v32;
    *(_BYTE *)(v33 + 2) = BYTE2(v32);
    v34 = (v28 - (_DWORD)v27 + 3) & 0xFFFFFFFC;
    v14 = v91 + v34;
    if (v91 + v34 > v92)
      break;
    v35 = &v93[v91];
    v36 = v27;
    v37 = v28 - (_DWORD)v27 + 3;
    memcpy(&v93[v91], v36, v34);
    v11 = v89;
    v10 = v90;
    *v35 = v37 >> 2;
    v35[1] = v37 >> 10;
    v35[2] = v37 >> 18;
    v18 = v94 + 1;
    ++v17;
    v15 = v14;
    v21 = v87;
    if (v17 >= v8)
      goto LABEL_28;
  }
LABEL_31:
  v95 = operator new();
  v42 = v93;
  v43 = operator new();
  v44 = v92;
  *(_QWORD *)v95 = v43;
  if (v92 < 0x18 || *(_DWORD *)v93 != -1381269244 || v93[4] || v92 != *((_DWORD *)v93 + 3))
  {
    exception = (char *)__cxa_allocate_exception(0x20uLL);
    *(_QWORD *)exception = off_1E3D38838;
    strcpy(exception + 8, "Invalid dynamic data");
    exception[31] = 20;
    __cxa_throw(exception, (struct type_info *)&unk_1E3D32968, (void (*)(void *))sub_19C3123E4);
  }
  *(_DWORD *)v43 = -1381269244;
  *(_BYTE *)(v43 + 4) = 0;
  *(_WORD *)(v43 + 5) = *(_WORD *)(v93 + 5);
  *(_BYTE *)(v43 + 7) = 64;
  *(_QWORD *)(v43 + 16) = 0;
  *(_QWORD *)(v43 + 24) = 0;
  *(_DWORD *)(v43 + 8) = *((_DWORD *)v93 + 2);
  *(_DWORD *)(v43 + 12) = v92;
  *(_QWORD *)(v43 + 32) = 0;
  *(_QWORD *)(v43 + 40) = 0;
  v45 = *((_DWORD *)v93 + 4);
  if (v45 && *((_DWORD *)v93 + 5) == v45)
  {
    v96 = 0;
    v46 = malloc_type_malloc(((11 * v45) & 0x1FFFFFF8u) + 8, 0x71805AB1uLL);
    if (!v46)
    {
      v85 = (char *)__cxa_allocate_exception(0x20uLL);
      *(_QWORD *)v85 = off_1E3D38838;
      strcpy(v85 + 8, "Unable to allocate");
      v85[31] = 18;
      __cxa_throw(v85, (struct type_info *)&unk_1E3D32968, (void (*)(void *))sub_19C3123E4);
    }
    LODWORD(v47) = ((3 * v45) & 0x1FFFFFFF) + 24;
    if (*((_DWORD *)v93 + 4))
    {
      v48 = 0;
      v49 = 0;
      v50 = 0;
      do
      {
        v51 = (uint64_t)&v93[(v48 >> 3) + 24];
        v52 = (_DWORD *)(v51 & 0xFFFFFFFFFFFFFFFCLL);
        v53 = 8 * (v51 & 3);
        v54 = *v52 >> v53;
        if (v53 >= 9)
          v54 |= v52[1] << -(char)v53;
        if (v44 < (v47 + 3))
        {
          v79 = (char *)__cxa_allocate_exception(0x20uLL);
          *(_QWORD *)v79 = off_1E3D38838;
          strcpy(v79 + 8, "Invalid dynamic data");
          v79[31] = 20;
          __cxa_throw(v79, (struct type_info *)&unk_1E3D32968, (void (*)(void *))sub_19C3123E4);
        }
        v55 = (unint64_t)v42 + v47;
        v56 = 8 * (((_BYTE)v42 + (_BYTE)v47) & 3);
        v57 = *(_DWORD *)(v55 & 0xFFFFFFFFFFFFFFFCLL) >> v56;
        if (v56 >= 9)
          v57 |= *(_DWORD *)((v55 & 0xFFFFFFFFFFFFFFFCLL) + 4) << (-8 * (((_BYTE)v42 + v47) & 3));
        v58 = 4 * (v57 & 0xFFFFFFu);
        v47 = (v58 + v47);
        if (v58 < ((6 * *(unsigned __int8 *)(*(_QWORD *)v95 + 5) + 4) >> 3) + 3
          || v44 < v47)
        {
          v78 = (char *)__cxa_allocate_exception(0x20uLL);
          *(_QWORD *)v78 = off_1E3D38838;
          strcpy(v78 + 8, "Invalid dynamic data");
          v78[31] = 20;
          __cxa_throw(v78, (struct type_info *)&unk_1E3D32968, (void (*)(void *))sub_19C3123E4);
        }
        v60 = malloc_type_malloc(v58, 0x942D75C5uLL);
        v61 = (unint64_t)v60;
        if (!v60)
        {
          v80 = (char *)__cxa_allocate_exception(0x20uLL);
          *(_QWORD *)v80 = off_1E3D38838;
          strcpy(v80 + 8, "Unable to allocate");
          v80[31] = 18;
          __cxa_throw(v80, (struct type_info *)&unk_1E3D32968, (void (*)(void *))sub_19C3123E4);
        }
        memcpy(v60, (const void *)v55, v58);
        v46[(unint64_t)v49 >> 3] = v54;
        v62 = &v46[v49 >> 3];
        v62[1] = BYTE1(v54);
        v62[2] = BYTE2(v54);
        v63 = &v46[(unint64_t)(v49 + 24) >> 3];
        *v63 = v61;
        v64 = (uint64x2_t)vdupq_n_s64(v61);
        v65 = vmovn_s64((int64x2_t)vshlq_u64(v64, (uint64x2_t)xmmword_19C46E040));
        v66 = (int16x8_t)vshlq_u64(v64, (uint64x2_t)xmmword_19C46E030);
        *(int32x2_t *)v66.i8 = vmovn_s64((int64x2_t)v66);
        v66.i16[1] = v66.i16[2];
        v66.i16[2] = v65.i16[0];
        v66.i16[3] = v65.i16[2];
        *(_DWORD *)(v63 + 1) = vmovn_s16(v66).u32[0];
        v63[5] = BYTE5(v61);
        v63[6] = BYTE6(v61);
        v63[7] = HIBYTE(v61);
        ++v50;
        v44 = v92;
        v42 = v93;
        v67 = *((_DWORD *)v93 + 4);
        v49 += 88;
        v48 += 24;
      }
      while (v50 < v67);
    }
    else
    {
      v67 = 0;
    }
    v68 = sub_19C4273A4((uint64_t)v46, v67, v42[5], 0x40u, 0x40u, &v96);
    if (!v68)
    {
      v86 = (char *)__cxa_allocate_exception(0x20uLL);
      *(_QWORD *)v86 = off_1E3D38838;
      strcpy(v86 + 8, "Unable to allocate");
      v86[31] = 18;
      __cxa_throw(v86, (struct type_info *)&unk_1E3D32968, (void (*)(void *))sub_19C3123E4);
    }
    v69 = *(_QWORD *)v95;
    *(_BYTE *)(v69 + 7) = 64;
    v70 = v96;
    *(_DWORD *)(v69 + 16) = v42[4];
    *(_DWORD *)(v69 + 20) = v70;
    *(_QWORD *)(v69 + 24) = v68;
    free(v46);
  }
  else
  {
    LODWORD(v47) = 24;
  }
  v71 = v47;
  if (v44 >= (v47 + 3))
  {
    v72 = (_DWORD *)(((unint64_t)v42 + v47) & 0xFFFFFFFFFFFFFFFCLL);
    v73 = 8 * (((_BYTE)v42 + (_BYTE)v47) & 3);
    v74 = *v72 >> v73;
    if (v73 >= 9)
      v74 |= v72[1] << (-8 * (((_BYTE)v42 + v47) & 3));
    v75 = 4 * (v74 & 0xFFFFFFu);
    if (!(_DWORD)v75 || (v71 = (v75 + v47), v44 < v71))
    {
      v82 = (char *)__cxa_allocate_exception(0x20uLL);
      *(_QWORD *)v82 = off_1E3D38838;
      strcpy(v82 + 8, "Invalid dynamic data");
      v82[31] = 20;
      __cxa_throw(v82, (struct type_info *)&unk_1E3D32968, (void (*)(void *))sub_19C3123E4);
    }
    v76 = malloc_type_malloc(4 * (v74 & 0xFFFFFFu), 0x4F5AE6D1uLL);
    v77 = v76;
    if (!v76)
    {
      v84 = (char *)__cxa_allocate_exception(0x20uLL);
      *(_QWORD *)v84 = off_1E3D38838;
      strcpy(v84 + 8, "Unable to allocate");
      v84[31] = 18;
      __cxa_throw(v84, (struct type_info *)&unk_1E3D32968, (void (*)(void *))sub_19C3123E4);
    }
    memcpy(v76, (char *)v42 + v47, v75);
    *(_QWORD *)(*(_QWORD *)v95 + 32) = v77;
  }
  if (v44 != v71)
  {
    v83 = (char *)__cxa_allocate_exception(0x20uLL);
    *(_QWORD *)v83 = off_1E3D38838;
    strcpy(v83 + 8, "Invalid dynamic data");
    v83[31] = 20;
    __cxa_throw(v83, (struct type_info *)&unk_1E3D32968, (void (*)(void *))sub_19C3123E4);
  }
  *a2 = v95;
  operator delete(v42);
}

void sub_19C41CD20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  MEMORY[0x1A1AD355C](a19, 0x20C4093837F09);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_19C41CD84(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;

  v2 = *a2;
  *a2 = 0;
  v3 = *(uint64_t **)(result + 8);
  *(_QWORD *)(result + 8) = v2;
  if (v3)
  {
    if (*v3)
    {
      sub_19C29A56C(v3);
      if (*v3)
        MEMORY[0x1A1AD355C](*v3, 0x1010C4006136809);
    }
    JUMPOUT(0x1A1AD355CLL);
  }
  return result;
}

BOOL sub_19C41CDFC(uint64_t a1, unsigned int a2)
{
  return a2 >> (*(_DWORD *)(*(_QWORD *)(a1 + 32) + 372) - 2) != 1;
}

BOOL sub_19C41CE18(uint64_t a1, __int32 a2)
{
  __int32 **v3;
  __int32 *v4;
  __int32 *v5;
  __int32 *v6;

  v3 = *(__int32 ***)(a1 + 32);
  v4 = v3[1];
  v5 = wmemchr(*v3, a2, v4 - *v3);
  if (v5)
    v6 = v5;
  else
    v6 = v4;
  return v6 == *(__int32 **)(*(_QWORD *)(a1 + 32) + 8);
}

__n128 sub_19C41CE60(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

void sub_19C41CE84(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

void sub_19C41CE9C(uint64_t a1, int a2, int a3, float a4)
{
  int v5;
  uint64_t v6;
  float v9;
  float v10;
  _QWORD *v11;
  unint64_t v12;
  char *v13;
  char *i;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  float *v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;

  v5 = *(_DWORD *)(a1 + 72);
  v24 = a3;
  v25 = v5;
  v6 = *(_QWORD *)(a1 + 64);
  if (!v6)
    sub_19C2CCC60();
  v9 = (*(float (**)(uint64_t, int *, int *))(*(_QWORD *)v6 + 48))(v6, &v25, &v24);
  v10 = v9;
  v11 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 8);
  v13 = (char *)v11[6];
  v12 = v11[7];
  if ((unint64_t)v13 >= v12)
  {
    v15 = (char *)v11[5];
    v16 = 0xAAAAAAAAAAAAAAABLL * ((v13 - v15) >> 2) + 1;
    if (v16 > 0x1555555555555555)
      sub_19C2A18E8();
    v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - (_QWORD)v15) >> 2);
    if (2 * v17 > v16)
      v16 = 2 * v17;
    if (v17 >= 0xAAAAAAAAAAAAAAALL)
      v18 = 0x1555555555555555;
    else
      v18 = v16;
    if (v18 > 0x1555555555555555)
      sub_19C2A143C();
    v19 = 12 * v18;
    v20 = (char *)operator new(12 * v18);
    v21 = (float *)&v20[4 * ((v13 - v15) >> 2)];
    *(_DWORD *)v21 = a2;
    v21[1] = v10;
    v21[2] = a4;
    for (i = (char *)(v21 + 3); v13 != v15; *((_DWORD *)v21 + 2) = v23)
    {
      v22 = *(_QWORD *)(v13 - 12);
      v13 -= 12;
      v23 = *((_DWORD *)v13 + 2);
      *(_QWORD *)(v21 - 3) = v22;
      v21 -= 3;
    }
    v11[5] = v21;
    v11[6] = i;
    v11[7] = &v20[v19];
    if (v15)
      operator delete(v15);
  }
  else
  {
    *(_DWORD *)v13 = a2;
    i = v13 + 12;
    *((float *)v13 + 1) = v9;
    *((float *)v13 + 2) = a4;
  }
  v11[6] = i;
}

uint64_t sub_19C41CFF4(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = *(_QWORD *)(a2 + 64);
  if (result)
  {
    if (result == a2 + 40)
    {
      *(_QWORD *)(a1 + 64) = a1 + 40;
      return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 64) + 24))(*(_QWORD *)(a2 + 64), a1 + 40);
    }
    else
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
      *(_QWORD *)(a1 + 64) = result;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 64) = 0;
  }
  return result;
}

_QWORD *sub_19C41D060(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 40);
  result = *(_QWORD **)(a1 + 64);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_19C41D098()
{
  JUMPOUT(0x1A1AD355CLL);
}

__n128 sub_19C41D0AC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E3D388F8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_19C41D0EC(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E3D388F8;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_19C41D114(_QWORD *a1, unsigned int *a2, unsigned int *a3)
{
  uint64_t v3;
  uint64_t (*v4)(_QWORD *, _QWORD, _QWORD);
  _QWORD *v5;

  v3 = a1[2];
  v4 = (uint64_t (*)(_QWORD *, _QWORD, _QWORD))a1[1];
  v5 = (_QWORD *)(a1[3] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*v5 + v4);
  return v4(v5, *a2, *a3);
}

uint64_t sub_19C41D138(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__16__bindIMN2LM10ParametersEKFfjjEJPKS2_RKNS_12placeholders4__phILi1EEERKNS8_ILi2EEEEEE"
    || ((v3 & (unint64_t)"NSt3__16__bindIMN2LM10ParametersEKFfjjEJPKS2_RKNS_12placeholders4__phILi1EEERKNS8_ILi2EEEEEE" & 0x8000000000000000) != 0) != __OFSUB__(v3, "NSt3__16__bindIMN2LM10ParametersEKFfjjEJPKS2_RKNS_12placeholders4__phILi1EEERKNS8_ILi2EEEEEE")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__16__bindIMN2LM10ParametersEKFfjjEJPKS2_RKNS_12placeholders4__phILi1EEERKNS8_ILi2EEEEEE" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *sub_19C41D18C()
{
  return &unk_1E3D33430;
}

float sub_19C41D198(uint64_t a1, float a2)
{
  uint64_t v2;
  float result;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  result = *(float *)(v2 + 24) + a2;
  *(float *)(v2 + 24) = result;
  return result;
}

void sub_19C41D1B4(_QWORD *a1)
{
  sub_19C361680(a1);
  JUMPOUT(0x1A1AD355CLL);
}

void sub_19C41D1D8(uint64_t a1@<X0>, uint64_t a2@<X2>, _QWORD *a3@<X3>, unint64_t a4@<X4>, unint64_t a5@<X5>, int a6@<W6>, std::string *a7@<X7>, uint64_t a8@<X8>, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v11;
  float v12;
  float v13;
  uint64_t *v14;
  NSObject *v15;
  const char *v16;
  _QWORD *v17;
  char *v18;
  BOOL v19;
  BOOL v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  unint64_t v26;
  uint64_t v27;
  float v28;
  uint64_t v29;
  __int128 v30;
  unint64_t v31;
  float v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  const void *v37;
  int64_t v38;
  _DWORD *v39;
  _DWORD *v40;
  const void *v41;
  int64_t v42;
  char *v43;
  _DWORD *v44;
  char *v45;
  int64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  _BYTE *v51;
  _DWORD *v52;
  unint64_t v53;
  char *v54;
  int v55;
  uint64_t v56;
  _OWORD *v57;
  __int128 *v58;
  uint64_t v59;
  __int128 v60;
  unsigned int *v61;
  unsigned int *v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  __int128 v72;
  float *v73;
  std::__shared_weak_count *v74;
  uint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t *v78;
  unint64_t v79;
  float v80;
  float v81;
  int v82;
  unint64_t v83;
  void **v84;
  size_t v85;
  void *v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t v91;
  const void *v92;
  int64_t v93;
  char *v94;
  std::string::size_type v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  char *v100;
  char *v101;
  std::string::size_type v102;
  unint64_t v103;
  char *v104;
  uint64_t v105;
  char *v106;
  __int128 *v107;
  uint64_t v108;
  __int128 v109;
  int v110;
  float v111;
  float v112;
  std::__shared_weak_count *v113;
  uint64_t v114;
  unint64_t *v115;
  unint64_t v116;
  unint64_t *v117;
  unint64_t v118;
  uint64_t v119;
  int v120;
  unint64_t *v121;
  unint64_t v122;
  _QWORD *v123;
  _QWORD *v124;
  float v125;
  int v126;
  std::string::size_type v127;
  _QWORD *v128;
  std::string::size_type v129;
  std::string::size_type v130;
  _QWORD *v131;
  _QWORD *v132;
  _QWORD *v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  char *v137;
  std::string::size_type *v138;
  char *v139;
  _QWORD *v140;
  __int128 v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  char *v148;
  float v149;
  float v150;
  uint64_t v151;
  const void *v152;
  int64_t v153;
  void *v154;
  std::string::size_type v155;
  float v156;
  char *v157;
  char *v158;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  void *v162;
  uint64_t v163;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  int v167;
  unint64_t *v168;
  unint64_t v169;
  _QWORD *v170;
  _QWORD *v171;
  uint64_t v172;
  int v173;
  float v174;
  float v175;
  std::__shared_weak_count *v176;
  uint64_t v177;
  unint64_t *v178;
  unint64_t v179;
  uint64_t v180;
  _QWORD *v181;
  unint64_t *v182;
  unint64_t v183;
  uint64_t v184;
  const void *v185;
  int64_t v186;
  char *v187;
  char *v188;
  std::string::size_type v189;
  std::string::size_type v190;
  void *v191;
  std::__shared_weak_count *v192;
  unint64_t *v193;
  unint64_t v194;
  unint64_t *v195;
  unint64_t v196;
  void *v197;
  std::__shared_weak_count *v198;
  unint64_t *v199;
  unint64_t v200;
  std::string *v201;
  const std::string::value_type *v202;
  std::string::size_type v203;
  uint64_t v204;
  std::string::size_type v205;
  std::string *v206;
  void *v207;
  unint64_t *v208;
  unint64_t v209;
  std::string *v210;
  const std::string::value_type *v211;
  std::string::size_type v212;
  uint64_t v213;
  std::string::size_type v214;
  std::string *v215;
  std::string::size_type v216;
  std::string::size_type v217;
  unint64_t *v218;
  unint64_t v219;
  unint64_t *v220;
  void *v221;
  char *v222;
  char *v223;
  void *v224;
  std::__shared_weak_count *v225;
  unint64_t *v226;
  unint64_t v227;
  void *v228;
  uint64_t v229;
  _QWORD *v230;
  uint64_t v231;
  uint64_t v232;
  _QWORD *v233;
  uint64_t v234;
  _QWORD *v235;
  char *v236;
  std::__shared_weak_count *v237;
  unint64_t *v238;
  unint64_t v239;
  uint64_t v240;
  _QWORD *v241;
  char *v242;
  std::__shared_weak_count *v243;
  unint64_t *v244;
  unint64_t v245;
  _QWORD *v246;
  float v247;
  uint64_t v248;
  const void *v249;
  int64_t v250;
  void *v251;
  std::string::size_type v252;
  void *v253;
  std::__shared_weak_count *v254;
  unint64_t *v255;
  unint64_t v256;
  std::string *v257;
  const std::string::value_type *v258;
  std::string::size_type v259;
  uint64_t v260;
  std::string::size_type v261;
  std::string *v262;
  std::string::size_type size;
  unint64_t *v264;
  unint64_t v265;
  _QWORD *v266;
  void *v267;
  std::__shared_weak_count *v268;
  unint64_t *v269;
  unint64_t v270;
  uint64_t *v271;
  NSObject *v272;
  NSObject *v273;
  const char *v274;
  uint32_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  unsigned int **v279;
  unsigned int **v280;
  unint64_t v281;
  uint64_t v282;
  std::__shared_weak_count *v283;
  unint64_t *v284;
  unint64_t v285;
  std::string *v286;
  const std::string::value_type *p_p;
  std::string::size_type v288;
  uint64_t v289;
  std::string::size_type v290;
  std::string *v291;
  std::string::size_type v292;
  unint64_t *v293;
  unint64_t v294;
  uint64_t v295;
  unsigned int **v296;
  _QWORD *v297;
  uint64_t v298;
  uint64_t v299;
  void *v300;
  unint64_t v301;
  uint64_t v302;
  uint64_t v303;
  unint64_t v304;
  unint64_t v305;
  BOOL v306;
  uint64_t v307;
  uint64_t *v308;
  __int128 v309;
  NSObject *v310;
  uint64_t v311;
  uint64_t v312;
  void *v313;
  uint64_t v314;
  uint64_t v315;
  void *v316;
  uint64_t v317;
  uint64_t v318;
  void *v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  void *v323;
  unint64_t v325;
  unint64_t v326;
  _QWORD *v329;
  uint64_t *v330;
  unint64_t v331;
  _QWORD *v332;
  uint64_t **v334;
  unsigned int v335;
  unint64_t v336;
  uint64_t v337;
  _QWORD *v338;
  float *v340;
  uint64_t v342;
  _QWORD *v344;
  _QWORD *v345;
  _QWORD *v346;
  uint64_t v347;
  std::__shared_weak_count *v348;
  _QWORD *v349;
  void *v350;
  void *v351;
  char *v352;
  std::string v353;
  __int128 v354;
  char *v355;
  __int128 v356;
  uint64_t v357;
  void *v358;
  char v359;
  void *v360;
  void *v361;
  char *v362;
  void *v363;
  void *v364;
  void *v365;
  _QWORD *v366;
  unint64_t v367;
  std::string v368;
  float v369;
  _QWORD v370[26];
  unint64_t v371;
  _BYTE *v372;
  _BYTE *v373;
  __int128 __p;
  int64_t v375;
  void *v376;
  uint64_t v377;
  unsigned __int8 v378;
  void *v379;
  float *v380;
  void *v381;
  void *v382;
  char *v383;
  _DWORD *v384;
  _DWORD *v385;
  _DWORD *v386;
  __int128 buf;
  uint64_t v388;
  float v389;
  float v390;
  uint64_t v391;
  _QWORD v392[4];
  uint64_t v393;
  _BYTE *v394;
  _BYTE *v395;
  _QWORD *v396;
  _QWORD *v397;
  uint64_t v398;
  _BYTE *v399;
  _BYTE *v400;
  uint64_t v401;

  v401 = *MEMORY[0x1E0C80C00];
  v9 = *(_QWORD **)a2;
  if (0xD37A6F4DE9BD37A7 * ((uint64_t)(*(_QWORD *)(a2 + 8) - (_QWORD)v9) >> 3) >= 2)
    __assert_rtn("_completions", "MultiWordBeamSearchPredictorV2.cpp", 262, "stems.size()<2");
  v11 = a1;
  if (byte_1EE41B1B9)
  {
    sub_19C3E6D34((_QWORD *)(a1 + 72), (uint64_t *)(a1 + 208), v9, (uint64_t)a3);
    v13 = v12;
    if (v12 > 0.0001)
      __assert_rtn("_completions", "MultiWordBeamSearchPredictorV2.cpp", 268, "prefixProbabilityFirstWord<=1e-4");
  }
  else
  {
    v13 = 0.0;
  }
  v14 = &qword_1EE41C000;
  if (a6)
  {
    if (qword_1EE41C5B0 != -1)
    {
      dispatch_once(&qword_1EE41C5B0, &unk_1E3D3C898);
      v14 = &qword_1EE41C000;
    }
    v15 = v14[181];
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf) = 0;
      v16 = "Starting Inline Completions Beam Search in Lexicon Constrained Prediction Mode";
LABEL_15:
      _os_log_impl(&dword_19C291000, v15, OS_LOG_TYPE_DEFAULT, v16, (uint8_t *)&buf, 2u);
    }
  }
  else
  {
    if (qword_1EE41C5B0 != -1)
    {
      dispatch_once(&qword_1EE41C5B0, &unk_1E3D3C898);
      v14 = &qword_1EE41C000;
    }
    v15 = v14[181];
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf) = 0;
      v16 = "Starting Inline Completions Beam Search in Open Ended Prediction Mode";
      goto LABEL_15;
    }
  }
  v17 = (_QWORD *)operator new();
  v17[1] = 6;
  v17[2] = 0;
  v17[3] = 0;
  v17[4] = 0;
  v18 = (char *)operator new(0x720uLL);
  v17[2] = v18;
  v17[3] = v18;
  v17[4] = v18 + 1824;
  v349 = v17;
  sub_19C35CF10(&v347, v11, a6 == 0);
  v334 = (uint64_t **)(v11 + 72);
  v19 = sub_19C3E85F0(v11 + 72, v17, *(_QWORD **)a2, *(_QWORD **)(a2 + 8), (uint64_t)a3, &v347);
  v20 = v19;
  v21 = v348;
  if (v348)
  {
    p_shared_owners = (unint64_t *)&v348->__shared_owners_;
    do
      v23 = __ldaxr(p_shared_owners);
    while (__stlxr(v23 - 1, p_shared_owners));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
      if (v20)
        goto LABEL_21;
LABEL_555:
      *(_QWORD *)a8 = 0;
      *(_QWORD *)(a8 + 8) = 0;
      *(_QWORD *)(a8 + 16) = 0;
      goto LABEL_596;
    }
  }
  if (!v19)
    goto LABEL_555;
LABEL_21:
  v24 = (_QWORD *)operator new();
  v24[2] = 0;
  v24[1] = 6;
  v24[3] = 0;
  v24[4] = 0;
  sub_19C35D178((uint64_t)(v24 + 2), 6uLL);
  v346 = v24;
  sub_19C35D3C0(v11, (uint64_t)v349, a6 == 0, v24, a4, a5, a7);
  v25 = (_QWORD *)operator new();
  v25[2] = 0;
  v25[1] = 6;
  v25[3] = 0;
  v25[4] = 0;
  sub_19C35D178((uint64_t)(v25 + 2), 6uLL);
  v345 = v25;
  if (a5)
  {
    v26 = 0;
    v329 = (_QWORD *)(v11 + 32);
    v330 = (uint64_t *)(v11 + 208);
    v337 = (uint64_t)&a7[-1].__r_.__value_.__r.__words[2] + 7;
    v342 = v11;
    while (1)
    {
      v27 = *(_QWORD *)(a9 + 24);
      if (v27 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v27 + 48))(v27))
      {
        if (qword_1EE41C5B0 != -1)
          dispatch_once(&qword_1EE41C5B0, &unk_1E3D3C898);
        v310 = qword_1EE41C5A8;
        if (os_log_type_enabled((os_log_t)qword_1EE41C5A8, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(buf) = 0;
          _os_log_impl(&dword_19C291000, v310, OS_LOG_TYPE_DEFAULT, "Stopped beam search as abort signal was received via shouldAbort", (uint8_t *)&buf, 2u);
        }
        goto LABEL_558;
      }
      if (v26)
        v28 = 0.0;
      else
        v28 = v13;
      v29 = *(_QWORD *)(*(_QWORD *)a2 + 32);
      if (*(_QWORD *)(*(_QWORD *)a2 + 24) == v29)
      {
        HIBYTE(v388) = 0;
        LOBYTE(buf) = 0;
      }
      else if (*(char *)(v29 - 9) < 0)
      {
        sub_19C2B5238(&buf, *(void **)(v29 - 32), *(_QWORD *)(v29 - 24));
      }
      else
      {
        v30 = *(_OWORD *)(v29 - 32);
        v388 = *(_QWORD *)(v29 - 16);
        buf = v30;
      }
      if (v388 >= 0)
        v31 = HIBYTE(v388);
      else
        v31 = *((_QWORD *)&buf + 1);
      v325 = v26 + 1;
      v32 = sub_19C3E6760(v334, v31, v26 + 1, 2);
      if (SHIBYTE(v388) < 0)
        operator delete((void *)buf);
      v326 = v26;
      v33 = (_QWORD *)operator new();
      v33[2] = 0;
      v33[1] = 6;
      v33[3] = 0;
      v33[4] = 0;
      v34 = v33;
      sub_19C35D178((uint64_t)(v33 + 2), 6uLL);
      v344 = v34;
      v332 = v34;
      v338 = v24;
LABEL_42:
      if (!sub_19C3E8478(v24[2], v24[3], v332))
        goto LABEL_499;
      v35 = *(_QWORD *)(a9 + 24);
      if (v35 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v35 + 48))(v35))
      {
        if (qword_1EE41C5B0 != -1)
          dispatch_once(&qword_1EE41C5B0, &unk_1E3D3C898);
        v276 = qword_1EE41C5A8;
        if (!os_log_type_enabled((os_log_t)qword_1EE41C5A8, OS_LOG_TYPE_DEFAULT))
          goto LABEL_499;
        LOWORD(buf) = 0;
        v273 = v276;
        v274 = "Stopped beam search as abort signal was received via shouldAbort";
        v275 = 2;
      }
      else
      {
        if (*a3 < 0x2EuLL)
        {
          v36 = v24[3];
          if (v24[2] == v36)
            __assert_rtn("best", "PriorityQueue.h", 46, "!m_predictions.empty()");
          sub_19C35CA40((uint64_t)&buf, v36 - 304);
          v385 = 0;
          v384 = 0;
          v386 = 0;
          v37 = (const void *)buf;
          v38 = *((_QWORD *)&buf + 1) - buf;
          if (*((_QWORD *)&buf + 1) == (_QWORD)buf)
          {
            v39 = 0;
            v40 = 0;
          }
          else
          {
            if (v38 < 0)
              sub_19C2A18E8();
            v39 = operator new(*((_QWORD *)&buf + 1) - buf);
            v40 = &v39[v38 >> 2];
            v384 = v39;
            v386 = v40;
            memcpy(v39, v37, v38);
            v385 = v40;
          }
          v338[3] = sub_19C35CBE8(v338[3] - 304);
          if (10 * a5 - 1 < v40 - v39)
          {
            v24 = v338;
            if (!v39)
              goto LABEL_41;
            goto LABEL_40;
          }
          v41 = v394;
          v383 = 0;
          v381 = 0;
          v382 = 0;
          v42 = v395 - v394;
          if (v395 == v394)
          {
            v43 = 0;
          }
          else
          {
            if (v42 < 0)
              sub_19C2A18E8();
            v381 = operator new(v395 - v394);
            v382 = v381;
            v43 = (char *)v381 + 4 * (v42 >> 2);
            v383 = v43;
            memmove(v381, v41, v42);
            v382 = v43;
          }
          while (2)
          {
            if (v39 != v40)
            {
              if (v43 < v383)
              {
                *(_DWORD *)v43 = *v39;
                v44 = v43 + 4;
              }
              else
              {
                v45 = (char *)v381;
                v46 = v43 - (_BYTE *)v381;
                v47 = (v43 - (_BYTE *)v381) >> 2;
                v48 = v47 + 1;
                if ((unint64_t)(v47 + 1) >> 62)
                  sub_19C2A18E8();
                v49 = v383 - (_BYTE *)v381;
                if ((v383 - (_BYTE *)v381) >> 1 > v48)
                  v48 = v49 >> 1;
                if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFFCLL)
                  v50 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v50 = v48;
                if (v50)
                {
                  if (v50 >> 62)
                    sub_19C2A143C();
                  v51 = operator new(4 * v50);
                }
                else
                {
                  v51 = 0;
                }
                v52 = &v51[4 * v47];
                *v52 = *v39;
                v44 = v52 + 1;
                if (v43 != v45)
                {
                  v53 = v43 - 4 - v45;
                  if (v53 < 0xBC)
                  {
                    v54 = v43;
                    goto LABEL_73;
                  }
                  if (&v51[v46 - 4 - (v53 & 0xFFFFFFFFFFFFFFFCLL)] > &v51[v46 - 4])
                  {
                    v54 = v43;
                    goto LABEL_73;
                  }
                  if (&v43[-(v53 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v43 - 4)
                  {
                    v54 = v43;
                    goto LABEL_73;
                  }
                  if ((unint64_t)(v43 - v51 - v46) < 0x20)
                  {
                    v54 = v43;
                    goto LABEL_73;
                  }
                  v56 = (v53 >> 2) + 1;
                  v54 = &v43[-4 * (v56 & 0x7FFFFFFFFFFFFFF8)];
                  v57 = &v51[4 * v47 - 16];
                  v58 = (__int128 *)(v43 - 16);
                  v59 = v56 & 0x7FFFFFFFFFFFFFF8;
                  do
                  {
                    v60 = *v58;
                    *(v57 - 1) = *(v58 - 1);
                    *v57 = v60;
                    v57 -= 2;
                    v58 -= 2;
                    v59 -= 8;
                  }
                  while (v59);
                  v52 -= v56 & 0x7FFFFFFFFFFFFFF8;
                  if (v56 != (v56 & 0x7FFFFFFFFFFFFFF8))
                  {
                    do
                    {
LABEL_73:
                      v55 = *((_DWORD *)v54 - 1);
                      v54 -= 4;
                      *--v52 = v55;
                    }
                    while (v54 != v45);
                  }
                }
                v381 = v52;
                v382 = v44;
                v383 = &v51[4 * v50];
                if (v45)
                  operator delete(v45);
              }
              v382 = v44;
              ++v39;
              v43 = (char *)v44;
              continue;
            }
            break;
          }
          v62 = (unsigned int *)*((_QWORD *)&buf + 1);
          v61 = (unsigned int *)buf;
          if ((_QWORD)buf == *((_QWORD *)&buf + 1))
          {
            v67 = 1;
            v24 = v338;
          }
          else
          {
            v24 = v338;
            if (*((_QWORD *)&buf + 1) - (_QWORD)buf == 4)
            {
              v63 = *(_QWORD *)(v11 + 72);
              v64 = *(std::__shared_weak_count **)(v11 + 80);
              *(_QWORD *)&__p = v63;
              *((_QWORD *)&__p + 1) = v64;
              if (v64)
              {
                v65 = (unint64_t *)&v64->__shared_owners_;
                do
                  v66 = __ldxr(v65);
                while (__stxr(v66 + 1, v65));
                v62 = (unsigned int *)*((_QWORD *)&buf + 1);
              }
              if (v62 == v61)
                sub_19C30F73C();
              v67 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v63 + 104))(v63, *v61);
              if (v64)
              {
                v68 = (unint64_t *)&v64->__shared_owners_;
                do
                  v69 = __ldaxr(v68);
                while (__stlxr(v69 - 1, v68));
                if (!v69)
                {
                  ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
                  std::__shared_weak_count::__release_weak(v64);
                }
              }
            }
            else
            {
              v67 = 0;
            }
          }
          sub_19C3E73BC(&v379, v334, v330, (uint64_t)&v381, (uint64_t)&v391, v67, 6, (uint64_t)a3, v329);
          v70 = 126 - 2 * __clz(((char *)v380 - (_BYTE *)v379) >> 3);
          if (v380 == v379)
            v71 = 0;
          else
            v71 = v70;
          sub_19C4207A0((float *)v379, v380, v71, 1);
          if (v392[3] == v393)
          {
            HIBYTE(v375) = 0;
            LOBYTE(__p) = 0;
          }
          else if (*(char *)(v393 - 9) < 0)
          {
            sub_19C2B5238(&__p, *(void **)(v393 - 32), *(_QWORD *)(v393 - 24));
          }
          else
          {
            v72 = *(_OWORD *)(v393 - 32);
            v375 = *(_QWORD *)(v393 - 16);
            __p = v72;
          }
          v336 = sub_19C3E8528((uint64_t)&__p);
          if (SHIBYTE(v375) < 0)
            operator delete((void *)__p);
          v73 = (float *)v379;
          v340 = v380;
          v335 = v67;
          if (v379 == v380)
          {
            if (!v379)
              goto LABEL_113;
            goto LABEL_112;
          }
          while (2)
          {
            v75 = *(_QWORD *)(v11 + 72);
            v74 = *(std::__shared_weak_count **)(v11 + 80);
            *(_QWORD *)&__p = v75;
            *((_QWORD *)&__p + 1) = v74;
            if (v74)
            {
              v76 = (unint64_t *)&v74->__shared_owners_;
              do
                v77 = __ldxr(v76);
              while (__stxr(v77 + 1, v76));
            }
            if (((*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v75 + 160))(v75, *(unsigned int *)v73) & 1) != 0
              || (*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)v75 + 112))(v75, *(unsigned int *)v73))
            {
              v378 = 0;
              LOBYTE(v376) = 0;
            }
            else
            {
              (*(void (**)(void **__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v75 + 40))(&v376, v75, *(unsigned int *)v73);
            }
            if (v74)
            {
              v78 = (unint64_t *)&v74->__shared_owners_;
              do
                v79 = __ldaxr(v78);
              while (__stlxr(v79 - 1, v78));
              if (!v79)
              {
                ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
                std::__shared_weak_count::__release_weak(v74);
              }
            }
            v80 = v390;
            v81 = log10f(v73[1]) + v80;
            if ((float)(v81 - v28) < v32)
            {
              v82 = 6;
              if (((char)v378 & 0x80000000) == 0)
                goto LABEL_483;
              goto LABEL_132;
            }
            if ((*(unsigned int (**)(_QWORD, float *, uint64_t, float))(**(_QWORD **)(v11 + 16) + 16))(*(_QWORD *)(v11 + 16), v73, v67, v81 - v28))
            {
              if ((_DWORD)v67)
              {
                v83 = (v378 & 0x80u) == 0 ? v378 : v377;
                v84 = (v378 & 0x80u) == 0 ? &v376 : (void **)v376;
                v85 = v83 >= 2 ? 2 : v83;
                if (!memcmp(v84, "'s", v85) && v83 == 2)
                {
                  v82 = 7;
                  if (((char)v378 & 0x80000000) == 0)
                    goto LABEL_483;
                  goto LABEL_132;
                }
              }
              (*(void (**)(__int128 *__return_ptr, _QWORD, __int128 *, float *, void **))(**(_QWORD **)(v11 + 16) + 24))(&__p, *(_QWORD *)(v11 + 16), &buf, v73, &v376);
              sub_19C3E6B00((uint64_t)&v368, (uint64_t)&__p, v81);
              v87 = *(void **)(v11 + 72);
              v88 = *(std::__shared_weak_count **)(v11 + 80);
              v365 = v87;
              v366 = &v88->__vftable;
              if (v88)
              {
                v89 = (unint64_t *)&v88->__shared_owners_;
                do
                  v90 = __ldxr(v89);
                while (__stxr(v90 + 1, v89));
              }
              (*(void (**)(__int128 *__return_ptr, void *, std::string::size_type, uint64_t))(*(_QWORD *)v87 + 32))(&v356, v87, v368.__r_.__value_.__r.__words[0], (uint64_t)(v368.__r_.__value_.__l.__size_ - v368.__r_.__value_.__r.__words[0]) >> 2);
              v91 = sub_19C3E8528((uint64_t)&v356);
              if (SHIBYTE(v357) < 0)
              {
                operator delete((void *)v356);
                if (!v88)
                  goto LABEL_189;
              }
              else if (!v88)
              {
                goto LABEL_189;
              }
              v117 = (unint64_t *)&v88->__shared_owners_;
              do
                v118 = __ldaxr(v117);
              while (__stlxr(v118 - 1, v117));
              if (!v118)
              {
                ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
                std::__shared_weak_count::__release_weak(v88);
              }
LABEL_189:
              if (v91 < v336)
              {
                v82 = 7;
                goto LABEL_481;
              }
              v366 = 0;
              v365 = 0;
              v367 = 0;
              v119 = v378;
              if ((v378 & 0x80u) != 0)
                v119 = v377;
              v331 = v91;
              if (v119)
              {
                v120 = 0;
              }
              else
              {
                v163 = *(_QWORD *)(v11 + 72);
                v164 = *(std::__shared_weak_count **)(v11 + 80);
                *(_QWORD *)&v356 = v163;
                *((_QWORD *)&v356 + 1) = v164;
                if (v164)
                {
                  v165 = (unint64_t *)&v164->__shared_owners_;
                  do
                    v166 = __ldxr(v165);
                  while (__stxr(v166 + 1, v165));
                }
                v167 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v163 + 120))(v163, *(unsigned int *)v73);
                if (v164)
                {
                  v168 = (unint64_t *)&v164->__shared_owners_;
                  do
                    v169 = __ldaxr(v168);
                  while (__stlxr(v169 - 1, v168));
                  if (!v169)
                  {
                    ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
                    std::__shared_weak_count::__release_weak(v164);
                  }
                }
                v120 = v167 ^ 1;
              }
              v170 = (_QWORD *)v370[23];
              v171 = (_QWORD *)v370[24];
LABEL_281:
              if (v170 == v171)
              {
                v246 = v365;
                v67 = v335;
                if (v365 == v366)
                {
                  v24 = v338;
                  if (v365)
                    goto LABEL_470;
                }
                else
                {
                  v247 = v369;
                  HIBYTE(v355) = 0;
                  LOBYTE(v354) = 0;
                  memset(&v353, 0, sizeof(v353));
                  v248 = v371;
                  v249 = v372;
                  v250 = v373 - v372;
                  v24 = v338;
                  if (v373 != v372)
                  {
                    if (v250 < 0)
                      sub_19C2A18E8();
                    v251 = operator new(v373 - v372);
                    v252 = (std::string::size_type)v251 + 4 * (v250 >> 2);
                    v353.__r_.__value_.__r.__words[0] = (std::string::size_type)v251;
                    v353.__r_.__value_.__r.__words[2] = v252;
                    memcpy(v251, v249, v250);
                    v353.__r_.__value_.__l.__size_ = v252;
                    v11 = v342;
                  }
                  sub_19C3A9F98((uint64_t)&v356, (uint64_t)&v368, &v354, (uint64_t)v370, (uint64_t)&v365, v248, 0, (uint64_t)&v353, v247, 0.0);
                  if (v353.__r_.__value_.__r.__words[0])
                  {
                    v353.__r_.__value_.__l.__size_ = v353.__r_.__value_.__r.__words[0];
                    operator delete(v353.__r_.__value_.__l.__data_);
                  }
                  sub_19C35E950(v332, (uint64_t)&v356);
                  if (qword_1EE41C5B0 != -1)
                    dispatch_once(&qword_1EE41C5B0, &unk_1E3D3C898);
                  v253 = *(void **)(v11 + 72);
                  v254 = *(std::__shared_weak_count **)(v11 + 80);
                  v350 = v253;
                  v351 = v254;
                  if (v254)
                  {
                    v255 = (unint64_t *)&v254->__shared_owners_;
                    do
                      v256 = __ldxr(v255);
                    while (__stxr(v256 + 1, v255));
                  }
                  sub_19C3E29F8(&v353, (unsigned int **)&v356, (uint64_t)v253);
                  v257 = &v353;
                  if ((v353.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                    v257 = (std::string *)v353.__r_.__value_.__r.__words[0];
                  sub_19C34EC30("Next word hypothesis = [%s]", (uint64_t)&v354, v257);
                  if (SHIBYTE(v355) >= 0)
                    v258 = (const std::string::value_type *)&v354;
                  else
                    v258 = (const std::string::value_type *)v354;
                  if (SHIBYTE(v355) >= 0)
                    v259 = HIBYTE(v355);
                  else
                    v259 = *((_QWORD *)&v354 + 1);
                  std::string::append(a7, v258, v259);
                  if (SHIBYTE(a7->__r_.__value_.__r.__words[2]) < 0)
                  {
                    size = a7->__r_.__value_.__l.__size_;
                    if (size)
                    {
                      v262 = (std::string *)a7->__r_.__value_.__r.__words[0];
                      if (!*(_BYTE *)(a7->__r_.__value_.__r.__words[0] + size - 1))
                      {
                        v261 = size - 1;
                        a7->__r_.__value_.__l.__size_ = v261;
LABEL_458:
                        v262->__r_.__value_.__s.__data_[v261] = 0;
                      }
                    }
                  }
                  else
                  {
                    v260 = HIBYTE(a7->__r_.__value_.__r.__words[2]);
                    if (*((_BYTE *)&a7->__r_.__value_.__s + 23) && !*(_BYTE *)(v337 + v260))
                    {
                      v261 = v260 - 1;
                      *((_BYTE *)&a7->__r_.__value_.__s + 23) = v260 - 1;
                      v262 = a7;
                      goto LABEL_458;
                    }
                  }
                  std::string::push_back(a7, 10);
                  if (SHIBYTE(v355) < 0)
                  {
                    operator delete((void *)v354);
                    if (SHIBYTE(v353.__r_.__value_.__r.__words[2]) < 0)
                      goto LABEL_464;
LABEL_461:
                    if (v254)
                    {
LABEL_465:
                      v264 = (unint64_t *)&v254->__shared_owners_;
                      do
                        v265 = __ldaxr(v264);
                      while (__stlxr(v265 - 1, v264));
                      if (!v265)
                      {
                        ((void (*)(std::__shared_weak_count *))v254->__on_zero_shared)(v254);
                        std::__shared_weak_count::__release_weak(v254);
                      }
                    }
                  }
                  else
                  {
                    if ((SHIBYTE(v353.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                      goto LABEL_461;
LABEL_464:
                    operator delete(v353.__r_.__value_.__l.__data_);
                    if (v254)
                      goto LABEL_465;
                  }
                  sub_19C35CBE8((uint64_t)&v356);
                  v246 = v365;
                  if (v365)
                  {
LABEL_470:
                    v266 = v366;
                    v267 = v246;
                    if (v366 != v246)
                    {
                      do
                      {
                        v268 = (std::__shared_weak_count *)*(v266 - 2);
                        if (v268)
                        {
                          v269 = (unint64_t *)&v268->__shared_owners_;
                          do
                            v270 = __ldaxr(v269);
                          while (__stlxr(v270 - 1, v269));
                          if (!v270)
                          {
                            ((void (*)(std::__shared_weak_count *))v268->__on_zero_shared)(v268);
                            std::__shared_weak_count::__release_weak(v268);
                          }
                        }
                        v266 -= 3;
                      }
                      while (v266 != v246);
                      v267 = v365;
                    }
                    v366 = v246;
                    operator delete(v267);
                  }
                }
                v82 = 0;
                v91 = v331;
LABEL_481:
                sub_19C35CBE8((uint64_t)&v368);
                sub_19C35CBE8((uint64_t)&__p);
                if (v91 < v336)
                {
                  if (((char)v378 & 0x80000000) == 0)
                    goto LABEL_483;
LABEL_132:
                  operator delete(v376);
                  if (v82 == 7)
                  {
LABEL_117:
                    v73 += 2;
                    if (v73 != v340)
                      continue;
LABEL_488:
                    v73 = (float *)v379;
                    if (!v379)
                    {
LABEL_113:
                      if (v381)
                      {
                        v382 = v381;
                        operator delete(v381);
                      }
                      v39 = v384;
                      if (!v384)
                      {
LABEL_41:
                        sub_19C35CBE8((uint64_t)&buf);
                        goto LABEL_42;
                      }
LABEL_40:
                      v385 = v39;
                      operator delete(v39);
                      goto LABEL_41;
                    }
LABEL_112:
                    operator delete(v73);
                    goto LABEL_113;
                  }
LABEL_484:
                  if (!v82)
                    goto LABEL_117;
                  goto LABEL_488;
                }
LABEL_486:
                v82 = 0;
                if ((char)v378 < 0)
                  goto LABEL_132;
LABEL_483:
                if (v82 == 7)
                  goto LABEL_117;
                goto LABEL_484;
              }
              if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v170 + 16))(*v170) & 1) == 0)
                __assert_rtn("_nextWordCompletions", "MultiWordBeamSearchPredictorV2.cpp", 104, "cursor.lexiconCursor->isValid()");
              if (v371 < a4)
                v173 = 1;
              else
                v173 = v120;
              if (v173 == 1)
              {
                if (v120)
                {
                  if (v371 > a4)
                    goto LABEL_289;
                  goto LABEL_280;
                }
LABEL_401:
                if (a6)
                {
                  v229 = *v170;
                  HIBYTE(v357) = 1;
                  LOWORD(v356) = 32;
                  (*(void (**)(__int128 *__return_ptr, uint64_t, __int128 *))(*(_QWORD *)v229 + 24))(&v354, v229, &v356);
                  if (SHIBYTE(v357) < 0)
                    operator delete((void *)v356);
                  if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v354 + 16))(v354))
                  {
                    *(_QWORD *)&v356 = v354;
                    if ((_QWORD)v354)
                    {
                      v230 = (_QWORD *)operator new();
                      v231 = v354;
                      *v230 = &off_1E3D39C88;
                      v230[1] = 0;
                      v230[2] = 0;
                      v230[3] = v231;
                    }
                    else
                    {
                      v230 = 0;
                    }
                    *(_QWORD *)&v354 = 0;
                    v240 = v170[2];
                    *((_QWORD *)&v356 + 1) = v230;
                    v357 = v240;
                    v241 = v366;
                    if ((unint64_t)v366 < v367)
                    {
                      *v366 = v356;
                      v241[1] = v230;
                      v241[2] = v240;
                      v366 = v241 + 3;
                    }
                    else
                    {
                      v242 = sub_19C35F304((char **)&v365, (uint64_t)&v356);
                      v243 = (std::__shared_weak_count *)*((_QWORD *)&v356 + 1);
                      v366 = v242;
                      if (*((_QWORD *)&v356 + 1))
                      {
                        v244 = (unint64_t *)(*((_QWORD *)&v356 + 1) + 8);
                        do
                          v245 = __ldaxr(v244);
                        while (__stlxr(v245 - 1, v244));
                        if (!v245)
                        {
                          ((void (*)(std::__shared_weak_count *))v243->__on_zero_shared)(v243);
                          std::__shared_weak_count::__release_weak(v243);
                        }
                      }
                    }
                  }
                  v172 = v354;
                  *(_QWORD *)&v354 = 0;
                  if (!v172)
                    goto LABEL_280;
                }
                else
                {
                  sub_19C319804(*(_QWORD **)(v11 + 104), (uint64_t *)&v354);
                  v232 = v354;
                  *(_QWORD *)&v356 = v354;
                  if ((_QWORD)v354)
                  {
                    v233 = (_QWORD *)operator new();
                    *v233 = &off_1E3D39C88;
                    v233[1] = 0;
                    v233[2] = 0;
                    v233[3] = v232;
                  }
                  else
                  {
                    v233 = 0;
                  }
                  *(_QWORD *)&v354 = 0;
                  v234 = v170[2];
                  *((_QWORD *)&v356 + 1) = v233;
                  v357 = v234;
                  v235 = v366;
                  if ((unint64_t)v366 >= v367)
                  {
                    v236 = sub_19C35F304((char **)&v365, (uint64_t)&v356);
                    v237 = (std::__shared_weak_count *)*((_QWORD *)&v356 + 1);
                    v366 = v236;
                    if (*((_QWORD *)&v356 + 1))
                    {
                      v238 = (unint64_t *)(*((_QWORD *)&v356 + 1) + 8);
                      do
                        v239 = __ldaxr(v238);
                      while (__stlxr(v239 - 1, v238));
                      if (!v239)
                      {
                        ((void (*)(std::__shared_weak_count *))v237->__on_zero_shared)(v237);
                        std::__shared_weak_count::__release_weak(v237);
                      }
                    }
                  }
                  else
                  {
                    *v366 = v356;
                    v235[1] = v233;
                    v235[2] = v234;
                    v366 = v235 + 3;
                  }
                  v172 = v354;
                  if (!(_QWORD)v354)
                    goto LABEL_280;
                }
                (*(void (**)(uint64_t))(*(_QWORD *)v172 + 8))(v172);
LABEL_280:
                v170 += 3;
                goto LABEL_281;
              }
LABEL_289:
              v174 = v369;
              if (v371 == 1)
              {
                v175 = 1.0;
              }
              else
              {
                if (!v371)
                  __assert_rtn("normalizationFactor", "BeamSearchPredictionHelper.hpp", 71, "numWords >= 1");
                v175 = 3.0 / (double)(v371 + 2);
              }
              HIBYTE(v355) = 0;
              LOBYTE(v354) = 0;
              v177 = *v170;
              v176 = (std::__shared_weak_count *)v170[1];
              if (v176)
              {
                v178 = (unint64_t *)&v176->__shared_owners_;
                do
                  v179 = __ldxr(v178);
                while (__stxr(v179 + 1, v178));
              }
              v180 = v170[2];
              memset(&v353, 0, sizeof(v353));
              v181 = operator new(0x18uLL);
              v353.__r_.__value_.__r.__words[0] = (std::string::size_type)v181;
              v353.__r_.__value_.__l.__size_ = (std::string::size_type)v181;
              v353.__r_.__value_.__r.__words[2] = (std::string::size_type)(v181 + 3);
              *v181 = v177;
              v181[1] = v176;
              if (v176)
              {
                v182 = (unint64_t *)&v176->__shared_owners_;
                do
                  v183 = __ldxr(v182);
                while (__stxr(v183 + 1, v182));
              }
              v181[2] = v180;
              v353.__r_.__value_.__l.__size_ = (std::string::size_type)(v181 + 3);
              v350 = 0;
              v351 = 0;
              v352 = 0;
              v184 = v371;
              v185 = v372;
              v186 = v373 - v372;
              if (v373 != v372)
              {
                if (v186 < 0)
                  sub_19C2A18E8();
                v187 = (char *)operator new(v373 - v372);
                v188 = &v187[4 * (v186 >> 2)];
                v350 = v187;
                v352 = v188;
                memcpy(v187, v185, v186);
                v351 = v188;
                v11 = v342;
              }
              sub_19C3A9F98((uint64_t)&v356, (uint64_t)&v368, &v354, (uint64_t)v370, (uint64_t)&v353, v184, 0, (uint64_t)&v350, v175 * v174, 0.0);
              if (v350)
              {
                v351 = v350;
                operator delete(v350);
              }
              v189 = v353.__r_.__value_.__r.__words[0];
              if (v353.__r_.__value_.__r.__words[0])
              {
                v190 = v353.__r_.__value_.__l.__size_;
                v191 = (void *)v353.__r_.__value_.__r.__words[0];
                if (v353.__r_.__value_.__l.__size_ != v353.__r_.__value_.__r.__words[0])
                {
                  do
                  {
                    v192 = *(std::__shared_weak_count **)(v190 - 16);
                    if (v192)
                    {
                      v193 = (unint64_t *)&v192->__shared_owners_;
                      do
                        v194 = __ldaxr(v193);
                      while (__stlxr(v194 - 1, v193));
                      if (!v194)
                      {
                        ((void (*)(std::__shared_weak_count *))v192->__on_zero_shared)(v192);
                        std::__shared_weak_count::__release_weak(v192);
                      }
                    }
                    v190 -= 24;
                  }
                  while (v190 != v189);
                  v191 = (void *)v353.__r_.__value_.__r.__words[0];
                }
                v353.__r_.__value_.__l.__size_ = v189;
                operator delete(v191);
              }
              if (!v176)
                goto LABEL_319;
              v195 = (unint64_t *)&v176->__shared_owners_;
              do
                v196 = __ldaxr(v195);
              while (__stlxr(v196 - 1, v195));
              if (!v196)
              {
                ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
                std::__shared_weak_count::__release_weak(v176);
                if (SHIBYTE(v355) < 0)
LABEL_320:
                  operator delete((void *)v354);
              }
              else
              {
LABEL_319:
                if (SHIBYTE(v355) < 0)
                  goto LABEL_320;
              }
              sub_19C35E950(v345, (uint64_t)&v356);
              if (v120)
              {
                if (qword_1EE41C5B0 != -1)
                  dispatch_once(&qword_1EE41C5B0, &unk_1E3D3C898);
                v197 = *(void **)(v11 + 72);
                v198 = *(std::__shared_weak_count **)(v11 + 80);
                v350 = v197;
                v351 = v198;
                if (v198)
                {
                  v199 = (unint64_t *)&v198->__shared_owners_;
                  do
                    v200 = __ldxr(v199);
                  while (__stxr(v200 + 1, v199));
                }
                sub_19C3E29F8(&v353, (unsigned int **)&v356, (uint64_t)v197);
                v201 = &v353;
                if ((v353.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  v201 = (std::string *)v353.__r_.__value_.__r.__words[0];
                sub_19C34EC30("Stopped at a terminating punctuation, inline completion hypothesis  = [%s], with prefix probability for first word = [%f]", (uint64_t)&v354, v201, v28);
                if (SHIBYTE(v355) >= 0)
                  v202 = (const std::string::value_type *)&v354;
                else
                  v202 = (const std::string::value_type *)v354;
                if (SHIBYTE(v355) >= 0)
                  v203 = HIBYTE(v355);
                else
                  v203 = *((_QWORD *)&v354 + 1);
                std::string::append(a7, v202, v203);
                if (SHIBYTE(a7->__r_.__value_.__r.__words[2]) < 0)
                {
                  v216 = a7->__r_.__value_.__l.__size_;
                  if (v216)
                  {
                    v206 = (std::string *)a7->__r_.__value_.__r.__words[0];
                    if (!*(_BYTE *)(a7->__r_.__value_.__r.__words[0] + v216 - 1))
                    {
                      v205 = v216 - 1;
                      a7->__r_.__value_.__l.__size_ = v205;
LABEL_361:
                      v206->__r_.__value_.__s.__data_[v205] = 0;
                    }
                  }
                }
                else
                {
                  v204 = HIBYTE(a7->__r_.__value_.__r.__words[2]);
                  if (*((_BYTE *)&a7->__r_.__value_.__s + 23) && !*(_BYTE *)(v337 + v204))
                  {
                    v205 = v204 - 1;
                    *((_BYTE *)&a7->__r_.__value_.__s + 23) = v204 - 1;
                    v206 = a7;
                    goto LABEL_361;
                  }
                }
                std::string::push_back(a7, 10);
                if ((SHIBYTE(v355) & 0x80000000) == 0)
                {
                  if ((SHIBYTE(v353.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    goto LABEL_364;
LABEL_375:
                  operator delete(v353.__r_.__value_.__l.__data_);
                  if (v198)
                    goto LABEL_376;
LABEL_384:
                  v221 = v363;
                  if (v363)
                  {
LABEL_385:
                    v364 = v221;
                    operator delete(v221);
                  }
LABEL_386:
                  v222 = (char *)v361;
                  if (v361)
                  {
                    v223 = v362;
                    v224 = v361;
                    if (v362 != v361)
                    {
                      do
                      {
                        v225 = (std::__shared_weak_count *)*((_QWORD *)v223 - 2);
                        if (v225)
                        {
                          v226 = (unint64_t *)&v225->__shared_owners_;
                          do
                            v227 = __ldaxr(v226);
                          while (__stlxr(v227 - 1, v226));
                          if (!v227)
                          {
                            ((void (*)(std::__shared_weak_count *))v225->__on_zero_shared)(v225);
                            std::__shared_weak_count::__release_weak(v225);
                          }
                        }
                        v223 -= 24;
                      }
                      while (v223 != v222);
                      v224 = v361;
                    }
                    v362 = v222;
                    operator delete(v224);
                  }
                  sub_19C2E25C8(&v360);
                  if (v359 < 0)
                  {
                    operator delete(v358);
                    v228 = (void *)v356;
                    if ((_QWORD)v356)
                    {
LABEL_399:
                      *((_QWORD *)&v356 + 1) = v228;
                      operator delete(v228);
                    }
                  }
                  else
                  {
                    v228 = (void *)v356;
                    if ((_QWORD)v356)
                      goto LABEL_399;
                  }
                  if ((v120 & 1) != 0)
                    goto LABEL_280;
                  goto LABEL_401;
                }
                operator delete((void *)v354);
                if (SHIBYTE(v353.__r_.__value_.__r.__words[2]) < 0)
                  goto LABEL_375;
LABEL_364:
                if (!v198)
                  goto LABEL_384;
LABEL_376:
                v218 = (unint64_t *)&v198->__shared_owners_;
                do
                  v219 = __ldaxr(v218);
                while (__stlxr(v219 - 1, v218));
LABEL_383:
                if (v219)
                  goto LABEL_384;
                ((void (*)(std::__shared_weak_count *))v198->__on_zero_shared)(v198);
                std::__shared_weak_count::__release_weak(v198);
                v221 = v363;
                if (v363)
                  goto LABEL_385;
                goto LABEL_386;
              }
              if (qword_1EE41C5B0 != -1)
                dispatch_once(&qword_1EE41C5B0, &unk_1E3D3C898);
              v207 = *(void **)(v11 + 72);
              v198 = *(std::__shared_weak_count **)(v11 + 80);
              v350 = v207;
              v351 = v198;
              if (v198)
              {
                v208 = (unint64_t *)&v198->__shared_owners_;
                do
                  v209 = __ldxr(v208);
                while (__stxr(v209 + 1, v208));
              }
              sub_19C3E29F8(&v353, (unsigned int **)&v356, (uint64_t)v207);
              v210 = &v353;
              if ((v353.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v210 = (std::string *)v353.__r_.__value_.__r.__words[0];
              sub_19C34EC30("Inline Completion Hypothesis  = [%s] with prefix probability for first word = [%f]", (uint64_t)&v354, v210, v28);
              if (SHIBYTE(v355) >= 0)
                v211 = (const std::string::value_type *)&v354;
              else
                v211 = (const std::string::value_type *)v354;
              if (SHIBYTE(v355) >= 0)
                v212 = HIBYTE(v355);
              else
                v212 = *((_QWORD *)&v354 + 1);
              std::string::append(a7, v211, v212);
              if (SHIBYTE(a7->__r_.__value_.__r.__words[2]) < 0)
              {
                v217 = a7->__r_.__value_.__l.__size_;
                if (v217)
                {
                  v215 = (std::string *)a7->__r_.__value_.__r.__words[0];
                  if (!*(_BYTE *)(a7->__r_.__value_.__r.__words[0] + v217 - 1))
                  {
                    v214 = v217 - 1;
                    a7->__r_.__value_.__l.__size_ = v214;
LABEL_369:
                    v215->__r_.__value_.__s.__data_[v214] = 0;
                  }
                }
              }
              else
              {
                v213 = HIBYTE(a7->__r_.__value_.__r.__words[2]);
                if (*((_BYTE *)&a7->__r_.__value_.__s + 23) && !*(_BYTE *)(v337 + v213))
                {
                  v214 = v213 - 1;
                  *((_BYTE *)&a7->__r_.__value_.__s + 23) = v213 - 1;
                  v215 = a7;
                  goto LABEL_369;
                }
              }
              std::string::push_back(a7, 10);
              if (SHIBYTE(v355) < 0)
              {
                operator delete((void *)v354);
                if ((SHIBYTE(v353.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_372;
              }
              else if ((SHIBYTE(v353.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_372:
                if (!v198)
                  goto LABEL_384;
                goto LABEL_381;
              }
              operator delete(v353.__r_.__value_.__l.__data_);
              if (!v198)
                goto LABEL_384;
LABEL_381:
              v220 = (unint64_t *)&v198->__shared_owners_;
              do
                v219 = __ldaxr(v220);
              while (__stlxr(v219 - 1, v220));
              goto LABEL_383;
            }
            break;
          }
          memset(&v368, 0, sizeof(v368));
          v92 = (const void *)buf;
          v93 = *((_QWORD *)&buf + 1) - buf;
          if (*((_QWORD *)&buf + 1) == (_QWORD)buf)
          {
            v94 = 0;
            v95 = 0;
          }
          else
          {
            if (v93 < 0)
              sub_19C2A18E8();
            v94 = (char *)operator new(*((_QWORD *)&buf + 1) - buf);
            v368.__r_.__value_.__r.__words[0] = (std::string::size_type)v94;
            v368.__r_.__value_.__l.__size_ = (std::string::size_type)v94;
            v95 = (std::string::size_type)&v94[4 * (v93 >> 2)];
            v368.__r_.__value_.__r.__words[2] = v95;
            memcpy(v94, v92, v93);
            v368.__r_.__value_.__l.__size_ = v95;
          }
          v96 = v95 - (_QWORD)v94;
          v97 = (uint64_t)(v95 - (_QWORD)v94) >> 2;
          v98 = v97 + 1;
          if ((unint64_t)(v97 + 1) >> 62)
            sub_19C2A18E8();
          if (v96 >> 1 > v98)
            v98 = v96 >> 1;
          if ((unint64_t)v96 >= 0x7FFFFFFFFFFFFFFCLL)
            v99 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v99 = v98;
          if (v99)
          {
            if (v99 >> 62)
              sub_19C2A143C();
            v100 = (char *)operator new(4 * v99);
          }
          else
          {
            v100 = 0;
          }
          v101 = &v100[4 * v97];
          *(float *)v101 = *v73;
          v102 = (std::string::size_type)(v101 + 4);
          if ((char *)v95 != v94)
          {
            v103 = v95 - (_QWORD)v94 - 4;
            if (v103 < 0x1C)
            {
              v104 = (char *)v95;
              goto LABEL_175;
            }
            v105 = (v103 >> 2) + 1;
            v104 = (char *)(v95 - 4 * (v105 & 0x7FFFFFFFFFFFFFF8));
            v106 = &v100[4 * v97 - 16];
            v107 = (__int128 *)(v95 - 16);
            v108 = v105 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v109 = *v107;
              *((_OWORD *)v106 - 1) = *(v107 - 1);
              *(_OWORD *)v106 = v109;
              v106 -= 32;
              v107 -= 2;
              v108 -= 8;
            }
            while (v108);
            v101 -= 4 * (v105 & 0x7FFFFFFFFFFFFFF8);
            if (v105 != (v105 & 0x7FFFFFFFFFFFFFF8))
            {
              do
              {
LABEL_175:
                v110 = *((_DWORD *)v104 - 1);
                v104 -= 4;
                *((_DWORD *)v101 - 1) = v110;
                v101 -= 4;
              }
              while (v104 != v94);
            }
          }
          v368.__r_.__value_.__r.__words[0] = (std::string::size_type)v101;
          v368.__r_.__value_.__l.__size_ = v102;
          v368.__r_.__value_.__r.__words[2] = (std::string::size_type)&v100[4 * v99];
          if (v94)
            operator delete(v94);
          v368.__r_.__value_.__l.__size_ = v102;
          v111 = v389;
          v112 = log10f(v73[1]);
          sub_19C3E80A0((uint64_t)&v356, v334, (unsigned int *)v73, (uint64_t)&buf);
          v114 = *(_QWORD *)(v11 + 72);
          v113 = *(std::__shared_weak_count **)(v11 + 80);
          *(_QWORD *)&__p = v114;
          *((_QWORD *)&__p + 1) = v113;
          if (v113)
          {
            v115 = (unint64_t *)&v113->__shared_owners_;
            do
              v116 = __ldxr(v115);
            while (__stxr(v116 + 1, v115));
          }
          if (((*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v114 + 160))(v114, *(unsigned int *)v73) & 1) != 0
            || (*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)v114 + 112))(v114, *(unsigned int *)v73))
          {
            HIBYTE(v367) = 0;
            LOBYTE(v365) = 0;
          }
          else
          {
            (*(void (**)(void **__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v114 + 40))(&v365, v114, *(unsigned int *)v73);
          }
          if (v113)
          {
            v121 = (unint64_t *)&v113->__shared_owners_;
            do
              v122 = __ldaxr(v121);
            while (__stlxr(v122 - 1, v121));
            if (!v122)
            {
              ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
              std::__shared_weak_count::__release_weak(v113);
            }
          }
          v354 = 0uLL;
          v355 = 0;
          v123 = v396;
          v124 = v397;
          if (v396 != v397)
          {
            v125 = v112 + v111;
            while (1)
            {
              (*(void (**)(std::string *__return_ptr, _QWORD, void **))(*(_QWORD *)*v123 + 24))(&v353, *v123, &v365);
              v126 = (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v353.__r_.__value_.__l.__data_ + 16))(v353.__r_.__value_.__r.__words[0]);
              v127 = v353.__r_.__value_.__r.__words[0];
              if (v126)
                break;
LABEL_237:
              v353.__r_.__value_.__r.__words[0] = 0;
              if (v127)
                (*(void (**)(std::string::size_type))(*(_QWORD *)v127 + 8))(v127);
              v123 += 3;
              if (v123 == v124)
              {
                v148 = (char *)*((_QWORD *)&v354 + 1);
                if ((_QWORD)v354 != *((_QWORD *)&v354 + 1))
                {
                  v149 = v390;
                  v150 = v73[1];
                  memset(&v353, 0, sizeof(v353));
                  v151 = v398;
                  v152 = v399;
                  v153 = v400 - v399;
                  if (v400 != v399)
                  {
                    if (v153 < 0)
                      sub_19C2A18E8();
                    v154 = operator new(v400 - v399);
                    v155 = (std::string::size_type)v154 + 4 * (v153 >> 2);
                    v353.__r_.__value_.__r.__words[0] = (std::string::size_type)v154;
                    v353.__r_.__value_.__r.__words[2] = v155;
                    memcpy(v154, v152, v153);
                    v353.__r_.__value_.__l.__size_ = v155;
                    v11 = v342;
                  }
                  v156 = log10f(v150);
                  sub_19C3A9F98((uint64_t)&__p, (uint64_t)&v368, &v356, (uint64_t)v392, (uint64_t)&v354, v151, 1, (uint64_t)&v353, v125, v156 + v149);
                  if (v353.__r_.__value_.__r.__words[0])
                  {
                    v353.__r_.__value_.__l.__size_ = v353.__r_.__value_.__r.__words[0];
                    operator delete(v353.__r_.__value_.__l.__data_);
                  }
                  sub_19C35E950(v338, (uint64_t)&__p);
                  sub_19C35CBE8((uint64_t)&__p);
                  v148 = (char *)v354;
                }
                if (v148)
                {
                  v157 = (char *)*((_QWORD *)&v354 + 1);
                  v158 = v148;
                  if (*((char **)&v354 + 1) != v148)
                  {
                    do
                    {
                      v159 = (std::__shared_weak_count *)*((_QWORD *)v157 - 2);
                      if (v159)
                      {
                        v160 = (unint64_t *)&v159->__shared_owners_;
                        do
                          v161 = __ldaxr(v160);
                        while (__stlxr(v161 - 1, v160));
                        if (!v161)
                        {
                          ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
                          std::__shared_weak_count::__release_weak(v159);
                        }
                      }
                      v157 -= 24;
                    }
                    while (v157 != v148);
                    v158 = (char *)v354;
                  }
                  *((_QWORD *)&v354 + 1) = v148;
                  operator delete(v158);
                }
                goto LABEL_259;
              }
            }
            *(_QWORD *)&__p = v353.__r_.__value_.__r.__words[0];
            if (v353.__r_.__value_.__r.__words[0])
            {
              v128 = (_QWORD *)operator new();
              v129 = v353.__r_.__value_.__r.__words[0];
              *v128 = &off_1E3D39C88;
              v128[1] = 0;
              v128[2] = 0;
              v128[3] = v129;
            }
            else
            {
              v128 = 0;
            }
            v353.__r_.__value_.__r.__words[0] = 0;
            v130 = v123[2];
            *((_QWORD *)&__p + 1) = v128;
            v375 = v130;
            v131 = (_QWORD *)*((_QWORD *)&v354 + 1);
            if (*((_QWORD *)&v354 + 1) < (unint64_t)v355)
            {
              **((_QWORD **)&v354 + 1) = v127;
              v131[1] = v128;
              __p = 0uLL;
              v132 = v131 + 3;
              v131[2] = v130;
              goto LABEL_231;
            }
            v133 = (_QWORD *)v354;
            v134 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v354 + 1) - v354) >> 3);
            v135 = v134 + 1;
            if (v134 + 1 > 0xAAAAAAAAAAAAAAALL)
              sub_19C2A18E8();
            if (0x5555555555555556 * ((uint64_t)&v355[-v354] >> 3) > v135)
              v135 = 0x5555555555555556 * ((uint64_t)&v355[-v354] >> 3);
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v355[-v354] >> 3) >= 0x555555555555555)
              v136 = 0xAAAAAAAAAAAAAAALL;
            else
              v136 = v135;
            if (v136 > 0xAAAAAAAAAAAAAAALL)
              sub_19C2A143C();
            v137 = (char *)operator new(24 * v136);
            v138 = (std::string::size_type *)&v137[24 * v134];
            *v138 = v127;
            v138[1] = (std::string::size_type)v128;
            v139 = &v137[24 * v136];
            __p = 0uLL;
            v138[2] = v130;
            v132 = v138 + 3;
            if (v131 == v133)
            {
              *(_QWORD *)&v354 = v138;
              *((_QWORD *)&v354 + 1) = v138 + 3;
              v355 = &v137[24 * v136];
              v11 = v342;
              if (v131)
                goto LABEL_230;
            }
            else
            {
              v140 = v131;
              v11 = v342;
              do
              {
                v141 = *(_OWORD *)(v140 - 3);
                v140 -= 3;
                *(_OWORD *)(v138 - 3) = v141;
                v138 -= 3;
                *v140 = 0;
                v140[1] = 0;
                v138[2] = v140[2];
              }
              while (v140 != v133);
              *(_QWORD *)&v354 = v138;
              *((_QWORD *)&v354 + 1) = v132;
              v355 = v139;
              do
              {
                v142 = (std::__shared_weak_count *)*(v131 - 2);
                if (v142)
                {
                  v143 = (unint64_t *)&v142->__shared_owners_;
                  do
                    v144 = __ldaxr(v143);
                  while (__stlxr(v144 - 1, v143));
                  if (!v144)
                  {
                    ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
                    std::__shared_weak_count::__release_weak(v142);
                  }
                }
                v131 -= 3;
              }
              while (v131 != v133);
              v131 = v133;
              if (!v133)
                goto LABEL_231;
LABEL_230:
              operator delete(v131);
            }
LABEL_231:
            *((_QWORD *)&v354 + 1) = v132;
            v145 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
            if (*((_QWORD *)&__p + 1))
            {
              v146 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
              do
                v147 = __ldaxr(v146);
              while (__stlxr(v147 - 1, v146));
              if (!v147)
              {
                ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
                std::__shared_weak_count::__release_weak(v145);
              }
            }
            v127 = v353.__r_.__value_.__r.__words[0];
            goto LABEL_237;
          }
LABEL_259:
          if (SHIBYTE(v367) < 0)
            operator delete(v365);
          v67 = v335;
          if (SHIBYTE(v357) < 0)
          {
            operator delete((void *)v356);
            v162 = (void *)v368.__r_.__value_.__r.__words[0];
            if (v368.__r_.__value_.__r.__words[0])
            {
LABEL_263:
              v368.__r_.__value_.__l.__size_ = (std::string::size_type)v162;
              operator delete(v162);
            }
          }
          else
          {
            v162 = (void *)v368.__r_.__value_.__r.__words[0];
            if (v368.__r_.__value_.__r.__words[0])
              goto LABEL_263;
          }
          v24 = v338;
          goto LABEL_486;
        }
        v271 = &qword_1EE41C000;
        if (qword_1EE41C5B0 != -1)
        {
          dispatch_once(&qword_1EE41C5B0, &unk_1E3D3C898);
          v271 = &qword_1EE41C000;
        }
        v272 = v271[181];
        if (!os_log_type_enabled(v272, OS_LOG_TYPE_DEFAULT))
          goto LABEL_499;
        LODWORD(buf) = 134217984;
        *(_QWORD *)((char *)&buf + 4) = 45;
        v273 = v272;
        v274 = "Stopped beam search as limit for max model updates (%zu) reached";
        v275 = 12;
      }
      _os_log_impl(&dword_19C291000, v273, OS_LOG_TYPE_DEFAULT, v274, (uint8_t *)&buf, v275);
LABEL_499:
      v277 = v332[2];
      v278 = v332[3];
      v388 = 0;
      buf = 0uLL;
      sub_19C35E1DC((uint64_t)&buf, v277, v278, 0x86BCA1AF286BCA1BLL * ((v278 - v277) >> 4));
      v280 = (unsigned int **)*((_QWORD *)&buf + 1);
      v279 = (unsigned int **)buf;
      if ((_QWORD)buf == *((_QWORD *)&buf + 1))
        goto LABEL_539;
      v281 = *((_QWORD *)&buf + 1) - 304;
      if (*((_QWORD *)&buf + 1) - 304 <= (unint64_t)buf)
      {
        if ((_QWORD)buf != *((_QWORD *)&buf + 1))
          goto LABEL_507;
LABEL_505:
        v279 = v280;
        goto LABEL_539;
      }
      do
      {
        sub_19C35E2D8((uint64_t)v279, v281);
        v279 += 38;
        v281 -= 304;
      }
      while ((unint64_t)v279 < v281);
      v280 = (unsigned int **)*((_QWORD *)&buf + 1);
      v279 = (unsigned int **)buf;
      if ((_QWORD)buf == *((_QWORD *)&buf + 1))
        goto LABEL_505;
      do
      {
LABEL_507:
        if (qword_1EE41C5B0 != -1)
          dispatch_once(&qword_1EE41C5B0, &unk_1E3D3C898);
        v282 = *(_QWORD *)(v11 + 72);
        v283 = *(std::__shared_weak_count **)(v11 + 80);
        *(_QWORD *)&v356 = v282;
        *((_QWORD *)&v356 + 1) = v283;
        if (v283)
        {
          v284 = (unint64_t *)&v283->__shared_owners_;
          do
            v285 = __ldxr(v284);
          while (__stxr(v285 + 1, v284));
        }
        sub_19C3E29F8(&v368, v279, v282);
        v286 = &v368;
        if ((v368.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v286 = (std::string *)v368.__r_.__value_.__r.__words[0];
        sub_19C34EC30("Next word candidate hypothesis = [%s]", (uint64_t)&__p, v286);
        if (v375 >= 0)
          p_p = (const std::string::value_type *)&__p;
        else
          p_p = (const std::string::value_type *)__p;
        if (v375 >= 0)
          v288 = HIBYTE(v375);
        else
          v288 = *((_QWORD *)&__p + 1);
        std::string::append(a7, p_p, v288);
        if (SHIBYTE(a7->__r_.__value_.__r.__words[2]) < 0)
        {
          v292 = a7->__r_.__value_.__l.__size_;
          if (v292)
          {
            v291 = (std::string *)a7->__r_.__value_.__r.__words[0];
            if (!*(_BYTE *)(a7->__r_.__value_.__r.__words[0] + v292 - 1))
            {
              v290 = v292 - 1;
              a7->__r_.__value_.__l.__size_ = v290;
              goto LABEL_527;
            }
          }
        }
        else
        {
          v289 = HIBYTE(a7->__r_.__value_.__r.__words[2]);
          if (*((_BYTE *)&a7->__r_.__value_.__s + 23) && !*(_BYTE *)(v337 + v289))
          {
            v290 = v289 - 1;
            *((_BYTE *)&a7->__r_.__value_.__s + 23) = v289 - 1;
            v291 = a7;
LABEL_527:
            v291->__r_.__value_.__s.__data_[v290] = 0;
          }
        }
        std::string::push_back(a7, 10);
        if (SHIBYTE(v375) < 0)
        {
          operator delete((void *)__p);
          if ((SHIBYTE(v368.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_530:
            if (!v283)
              goto LABEL_506;
            goto LABEL_534;
          }
        }
        else if ((SHIBYTE(v368.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_530;
        }
        operator delete(v368.__r_.__value_.__l.__data_);
        if (!v283)
          goto LABEL_506;
LABEL_534:
        v293 = (unint64_t *)&v283->__shared_owners_;
        do
          v294 = __ldaxr(v293);
        while (__stlxr(v294 - 1, v293));
        if (!v294)
        {
          ((void (*)(std::__shared_weak_count *))v283->__on_zero_shared)(v283);
          std::__shared_weak_count::__release_weak(v283);
        }
LABEL_506:
        v279 += 38;
      }
      while (v279 != v280);
      v279 = (unsigned int **)buf;
LABEL_539:
      if (v279)
      {
        v295 = *((_QWORD *)&buf + 1);
        v296 = v279;
        if (*((unsigned int ***)&buf + 1) != v279)
        {
          do
            v295 = sub_19C35CBE8(v295 - 304);
          while ((unsigned int **)v295 != v279);
          v296 = (unsigned int **)buf;
        }
        *((_QWORD *)&buf + 1) = v279;
        operator delete(v296);
      }
      v24 = v344;
      v297 = v346;
      v346 = v344;
      if (v297)
      {
        v298 = v297[2];
        if (v298)
        {
          v299 = v297[3];
          v300 = (void *)v297[2];
          if (v299 != v298)
          {
            do
              v299 = sub_19C35CBE8(v299 - 304);
            while (v299 != v298);
            v300 = (void *)v297[2];
          }
          v297[3] = v298;
          operator delete(v300);
        }
        MEMORY[0x1A1AD355C](v297, 0x1020C402564D6C4);
      }
      v301 = v326;
      if (v344[2] == v344[3])
        goto LABEL_557;
      v26 = v325;
      if (v325 == a5)
      {
        v301 = a5;
        goto LABEL_557;
      }
    }
  }
  v301 = 0;
LABEL_557:
  if (v301 >= a4)
  {
    v302 = v345[2];
    v303 = v345[3];
    v388 = 0;
    buf = 0uLL;
    sub_19C35E1DC((uint64_t)&buf, v302, v303, 0x86BCA1AF286BCA1BLL * ((v303 - v302) >> 4));
    v304 = buf;
    if ((_QWORD)buf != *((_QWORD *)&buf + 1) && *((_QWORD *)&buf + 1) - 304 > (unint64_t)buf)
    {
      v305 = *((_QWORD *)&buf + 1) - 608;
      do
      {
        sub_19C35E2D8(v304, v305 + 304);
        v304 += 304;
        v306 = v304 >= v305;
        v305 -= 304;
      }
      while (!v306);
    }
    v307 = *(_QWORD *)(*(_QWORD *)a2 + 32);
    if (*(_QWORD *)(*(_QWORD *)a2 + 24) == v307)
    {
      HIBYTE(v375) = 0;
      LOBYTE(__p) = 0;
      v308 = (uint64_t *)a7;
    }
    else
    {
      v308 = (uint64_t *)a7;
      if (*(char *)(v307 - 9) < 0)
      {
        sub_19C2B5238(&__p, *(void **)(v307 - 32), *(_QWORD *)(v307 - 24));
        v308 = (uint64_t *)a7;
      }
      else
      {
        v309 = *(_OWORD *)(v307 - 32);
        v375 = *(_QWORD *)(v307 - 16);
        __p = v309;
      }
    }
    sub_19C358A5C(v11, (uint64_t)&buf, a6 == 0, a5, (uint64_t *)&__p, 1, (void **)a8, v13, 0, v308);
    if (SHIBYTE(v375) < 0)
      operator delete((void *)__p);
    v311 = buf;
    if ((_QWORD)buf)
    {
      v312 = *((_QWORD *)&buf + 1);
      v313 = (void *)buf;
      if (*((_QWORD *)&buf + 1) != (_QWORD)buf)
      {
        do
          v312 = sub_19C35CBE8(v312 - 304);
        while (v312 != v311);
        v313 = (void *)buf;
      }
      *((_QWORD *)&buf + 1) = v311;
      operator delete(v313);
    }
  }
  else
  {
LABEL_558:
    *(_QWORD *)a8 = 0;
    *(_QWORD *)(a8 + 8) = 0;
    *(_QWORD *)(a8 + 16) = 0;
  }
  if (v345)
  {
    v314 = v345[2];
    if (v314)
    {
      v315 = v345[3];
      v316 = (void *)v345[2];
      if (v315 != v314)
      {
        do
          v315 = sub_19C35CBE8(v315 - 304);
        while (v315 != v314);
        v316 = (void *)v345[2];
      }
      v345[3] = v314;
      operator delete(v316);
    }
    MEMORY[0x1A1AD355C](v345, 0x1020C402564D6C4);
  }
  if (v346)
  {
    v317 = v346[2];
    if (v317)
    {
      v318 = v346[3];
      v319 = (void *)v346[2];
      if (v318 != v317)
      {
        do
          v318 = sub_19C35CBE8(v318 - 304);
        while (v318 != v317);
        v319 = (void *)v346[2];
      }
      v346[3] = v317;
      operator delete(v319);
    }
    MEMORY[0x1A1AD355C](v346, 0x1020C402564D6C4);
  }
LABEL_596:
  v320 = (uint64_t)v349;
  v349 = 0;
  if (v320)
  {
    v321 = *(_QWORD *)(v320 + 16);
    if (v321)
    {
      v322 = *(_QWORD *)(v320 + 24);
      v323 = *(void **)(v320 + 16);
      if (v322 != v321)
      {
        do
          v322 = sub_19C35CBE8(v322 - 304);
        while (v322 != v321);
        v323 = *(void **)(v320 + 16);
      }
      *(_QWORD *)(v320 + 24) = v321;
      operator delete(v323);
    }
    MEMORY[0x1A1AD355C](v320, 0x1020C402564D6C4);
  }
}

void sub_19C41F720(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_19C2CDAC8(a1);
}

void sub_19C41F8E4()
{
  void *v0;
  void *v1;

  sub_19C2B43C8((uint64_t)&STACK[0x3F0]);
  v0 = (void *)STACK[0x550];
  if (STACK[0x550])
  {
    STACK[0x558] = (unint64_t)v0;
    operator delete(v0);
    v1 = (void *)STACK[0x568];
    if (!STACK[0x568])
      goto LABEL_6;
  }
  else
  {
    v1 = (void *)STACK[0x568];
    if (!STACK[0x568])
    {
LABEL_6:
      sub_19C35CBE8((uint64_t)&STACK[0x580]);
      JUMPOUT(0x19C41FDBCLL);
    }
  }
  operator delete(v1);
  goto LABEL_6;
}

void sub_19C41F900(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56)
{
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *p_shared_owners;
  unint64_t v63;

  sub_19C2B43C8((uint64_t)&a56);
  v56 = (void *)STACK[0x2A8];
  if (STACK[0x2A8])
  {
    v60 = STACK[0x2B0];
    if ((void *)STACK[0x2B0] != v56)
    {
      do
      {
        v61 = *(std::__shared_weak_count **)(v60 - 16);
        if (v61)
        {
          p_shared_owners = (unint64_t *)&v61->__shared_owners_;
          do
            v63 = __ldaxr(p_shared_owners);
          while (__stlxr(v63 - 1, p_shared_owners));
          if (!v63)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        v60 -= 24;
      }
      while ((void *)v60 != v56);
      v56 = (void *)STACK[0x2A8];
    }
    operator delete(v56);
  }
  sub_19C35CBE8((uint64_t)&STACK[0x2C0]);
  sub_19C35CBE8((uint64_t)&STACK[0x3F0]);
  if (SLOBYTE(STACK[0x537]) < 0)
  {
    operator delete((void *)STACK[0x520]);
    v57 = (void *)STACK[0x538];
    if (!STACK[0x538])
      goto LABEL_19;
  }
  else
  {
    v57 = (void *)STACK[0x538];
    if (!STACK[0x538])
    {
LABEL_19:
      v58 = (void *)STACK[0x550];
      if (!STACK[0x550])
      {
LABEL_20:
        v59 = (void *)STACK[0x568];
        if (!STACK[0x568])
        {
LABEL_22:
          sub_19C35CBE8((uint64_t)&STACK[0x580]);
          JUMPOUT(0x19C41FDBCLL);
        }
LABEL_21:
        operator delete(v59);
        goto LABEL_22;
      }
LABEL_5:
      STACK[0x558] = (unint64_t)v58;
      operator delete(v58);
      v59 = (void *)STACK[0x568];
      if (!STACK[0x568])
        goto LABEL_22;
      goto LABEL_21;
    }
  }
  operator delete(v57);
  v58 = (void *)STACK[0x550];
  if (!STACK[0x550])
    goto LABEL_20;
  goto LABEL_5;
}

void sub_19C41F91C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p)
{
  void *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *p_shared_owners;
  unint64_t v54;

  if (__p)
  {
    operator delete(__p);
    v50 = (void *)STACK[0x2A8];
    if (!STACK[0x2A8])
      goto LABEL_15;
  }
  else
  {
    v50 = (void *)STACK[0x2A8];
    if (!STACK[0x2A8])
      goto LABEL_15;
  }
  v51 = STACK[0x2B0];
  if ((void *)STACK[0x2B0] != v50)
  {
    do
    {
      v52 = *(std::__shared_weak_count **)(v51 - 16);
      if (v52)
      {
        p_shared_owners = (unint64_t *)&v52->__shared_owners_;
        do
          v54 = __ldaxr(p_shared_owners);
        while (__stlxr(v54 - 1, p_shared_owners));
        if (!v54)
        {
          ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
          std::__shared_weak_count::__release_weak(v52);
        }
      }
      v51 -= 24;
    }
    while ((void *)v51 != v50);
    v50 = (void *)STACK[0x2A8];
  }
  operator delete(v50);
LABEL_15:
  sub_19C35CBE8((uint64_t)&STACK[0x2C0]);
  sub_19C35CBE8((uint64_t)&STACK[0x3F0]);
  if ((SLOBYTE(STACK[0x537]) & 0x80000000) == 0)
  {
    if (!STACK[0x538])
    {
      if (!STACK[0x550])
        JUMPOUT(0x19C41FDA8);
      JUMPOUT(0x19C41FCB8);
    }
    JUMPOUT(0x19C41FCACLL);
  }
  JUMPOUT(0x19C41FC9CLL);
}

void sub_19C41F948(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51,int a52,__int16 a53,char a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  void *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *p_shared_owners;
  unint64_t v63;

  if (a55 < 0)
    operator delete(__p);
  sub_19C2B43C8((uint64_t)&a47);
  sub_19C35CBE8((uint64_t)&a59);
  v59 = (void *)STACK[0x2A8];
  if (STACK[0x2A8])
  {
    v60 = STACK[0x2B0];
    if ((void *)STACK[0x2B0] != v59)
    {
      do
      {
        v61 = *(std::__shared_weak_count **)(v60 - 16);
        if (v61)
        {
          p_shared_owners = (unint64_t *)&v61->__shared_owners_;
          do
            v63 = __ldaxr(p_shared_owners);
          while (__stlxr(v63 - 1, p_shared_owners));
          if (!v63)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        v60 -= 24;
      }
      while ((void *)v60 != v59);
      v59 = (void *)STACK[0x2A8];
    }
    operator delete(v59);
  }
  sub_19C35CBE8((uint64_t)&STACK[0x2C0]);
  sub_19C35CBE8((uint64_t)&STACK[0x3F0]);
  if ((SLOBYTE(STACK[0x537]) & 0x80000000) == 0)
  {
    if (!STACK[0x538])
    {
      if (!STACK[0x550])
        JUMPOUT(0x19C41FDA8);
      JUMPOUT(0x19C41FCB8);
    }
    JUMPOUT(0x19C41FCACLL);
  }
  JUMPOUT(0x19C41FC9CLL);
}

void sub_19C41F950()
{
  JUMPOUT(0x19C41FBE8);
}

void sub_19C41F95C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  void *v61;

  sub_19C35CE78(&a53);
  if (SLOBYTE(STACK[0x2BF]) < 0)
  {
    operator delete((void *)STACK[0x2A8]);
    if ((a61 & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((a61 & 0x80000000) == 0)
  {
LABEL_3:
    v61 = (void *)STACK[0x2C0];
    if (!STACK[0x2C0])
      goto LABEL_4;
    goto LABEL_10;
  }
  operator delete(a56);
  v61 = (void *)STACK[0x2C0];
  if (!STACK[0x2C0])
  {
LABEL_4:
    if (SLOBYTE(STACK[0x537]) < 0)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_10:
  STACK[0x2C8] = (unint64_t)v61;
  operator delete(v61);
  if (SLOBYTE(STACK[0x537]) < 0)
  {
LABEL_5:
    operator delete((void *)STACK[0x520]);
    if (STACK[0x538])
    {
      operator delete((void *)STACK[0x538]);
      if (STACK[0x550])
        JUMPOUT(0x19C41FCB8);
      JUMPOUT(0x19C41FDA8);
    }
    JUMPOUT(0x19C41FDA0);
  }
LABEL_15:
  JUMPOUT(0x19C41FD98);
}

void sub_19C41F964(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  if (__p)
    operator delete(__p);
  sub_19C35CE78(&a53);
  if (SLOBYTE(STACK[0x2BF]) < 0)
  {
    operator delete((void *)STACK[0x2A8]);
    if ((a61 & 0x80000000) == 0)
    {
      if (!STACK[0x2C0])
      {
        if (SLOBYTE(STACK[0x537]) < 0)
          JUMPOUT(0x19C41FC9CLL);
        JUMPOUT(0x19C41FD98);
      }
      JUMPOUT(0x19C41FCE4);
    }
    JUMPOUT(0x19C41FCD4);
  }
  JUMPOUT(0x19C41FCCCLL);
}

void sub_19C41F9D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56)
{
  void *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *p_shared_owners;
  unint64_t v60;

  sub_19C2B43C8((uint64_t)&a56);
  if (a53)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a53 + 8))(a53);
    v56 = (void *)STACK[0x2A8];
    if (!STACK[0x2A8])
      goto LABEL_15;
  }
  else
  {
    v56 = (void *)STACK[0x2A8];
    if (!STACK[0x2A8])
      goto LABEL_15;
  }
  v57 = STACK[0x2B0];
  if ((void *)STACK[0x2B0] != v56)
  {
    do
    {
      v58 = *(std::__shared_weak_count **)(v57 - 16);
      if (v58)
      {
        p_shared_owners = (unint64_t *)&v58->__shared_owners_;
        do
          v60 = __ldaxr(p_shared_owners);
        while (__stlxr(v60 - 1, p_shared_owners));
        if (!v60)
        {
          ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
          std::__shared_weak_count::__release_weak(v58);
        }
      }
      v57 -= 24;
    }
    while ((void *)v57 != v56);
    v56 = (void *)STACK[0x2A8];
  }
  operator delete(v56);
LABEL_15:
  sub_19C35CBE8((uint64_t)&STACK[0x2C0]);
  sub_19C35CBE8((uint64_t)&STACK[0x3F0]);
  if ((SLOBYTE(STACK[0x537]) & 0x80000000) == 0)
  {
    if (!STACK[0x538])
    {
      if (!STACK[0x550])
        JUMPOUT(0x19C41FDA8);
      JUMPOUT(0x19C41FCB8);
    }
    JUMPOUT(0x19C41FCACLL);
  }
  JUMPOUT(0x19C41FC9CLL);
}

void sub_19C41F9E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56)
{
  if (SLOBYTE(STACK[0x2D7]) < 0)
    operator delete((void *)STACK[0x2C0]);
  sub_19C2B43C8((uint64_t)&a56);
  JUMPOUT(0x19C41FA88);
}

void sub_19C41FA98()
{
  if (STACK[0x2C0])
    JUMPOUT(0x19C41FCE4);
  JUMPOUT(0x19C41FC94);
}

void sub_19C41FAAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  sub_19C2B43C8((uint64_t)&STACK[0x3F0]);
  if (a61 < 0)
    JUMPOUT(0x19C41FCD4);
  JUMPOUT(0x19C41FC8CLL);
}

void sub_19C41FAC8()
{
  if (SLOBYTE(STACK[0x537]) < 0)
  {
    operator delete((void *)STACK[0x520]);
    if (STACK[0x538])
    {
      operator delete((void *)STACK[0x538]);
      if (STACK[0x550])
        JUMPOUT(0x19C41FCB8);
      JUMPOUT(0x19C41FDA8);
    }
    JUMPOUT(0x19C41FDA0);
  }
  JUMPOUT(0x19C41FD98);
}

void sub_19C41FAD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
  if (a55 < 0)
    operator delete(a50);
  sub_19C2B43C8(&a47);
  sub_19C35CBE8(&a59);
  if (!STACK[0x2A8])
    JUMPOUT(0x19C41FD80);
  JUMPOUT(0x19C41FD1CLL);
}

void sub_19C41FAE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
  if (a55 < 0)
    operator delete(a50);
  sub_19C2B43C8(&a47);
  sub_19C35CBE8(&a59);
  if (!STACK[0x2A8])
    JUMPOUT(0x19C41FD80);
  JUMPOUT(0x19C41FD1CLL);
}

void sub_19C41FAE8()
{
  JUMPOUT(0x19C41FBE8);
}

void sub_19C41FAF0()
{
  JUMPOUT(0x19C41FBE8);
}

void sub_19C41FB20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  if (a61 < 0)
  {
    operator delete(a56);
    if (!STACK[0x2A8])
      goto LABEL_7;
  }
  else if (!STACK[0x2A8])
  {
LABEL_7:
    JUMPOUT(0x19C41FD80);
  }
  JUMPOUT(0x19C41FD1CLL);
}

void sub_19C41FB34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  std::__shared_weak_count *v58;
  unint64_t *p_shared_owners;
  unint64_t v60;

  sub_19C35CE78(&a50);
  if (v58)
  {
    p_shared_owners = (unint64_t *)&v58->__shared_owners_;
    do
      v60 = __ldaxr(p_shared_owners);
    while (__stlxr(v60 - 1, p_shared_owners));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  if (a58 < 0)
    JUMPOUT(0x19C41FBB4);
  if (!STACK[0x2A8])
    JUMPOUT(0x19C41FD80);
  JUMPOUT(0x19C41FD1CLL);
}

void sub_19C41FB44()
{
  JUMPOUT(0x19C41FBF0);
}

void sub_19C41FB4C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,uint64_t a49,void *a50)
{
  uint64_t v50;

  if (__p)
    operator delete(__p);
  sub_19C35CE78(&a50);
  if (!v50)
    JUMPOUT(0x19C41FBA8);
  JUMPOUT(0x19C41FB78);
}

void sub_19C41FB70()
{
  uint64_t v0;

  if (v0)
    JUMPOUT(0x19C41FB78);
  JUMPOUT(0x19C41FBA8);
}

void sub_19C41FBC4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54,int a55,__int16 a56,char a57,char a58,uint64_t a59)
{
  if (a58 < 0)
    operator delete(__p);
  if (SHIBYTE(a52) < 0)
    operator delete(a50);
  sub_19C2B43C8((uint64_t)&a47);
  sub_19C35CBE8((uint64_t)&a59);
  if (!STACK[0x2A8])
    JUMPOUT(0x19C41FD80);
  JUMPOUT(0x19C41FD1CLL);
}

void sub_19C41FC04()
{
  void *v0;
  void *v1;

  v0 = (void *)STACK[0x550];
  if (STACK[0x550])
  {
    STACK[0x558] = (unint64_t)v0;
    operator delete(v0);
    v1 = (void *)STACK[0x568];
    if (!STACK[0x568])
      goto LABEL_6;
  }
  else
  {
    v1 = (void *)STACK[0x568];
    if (!STACK[0x568])
    {
LABEL_6:
      sub_19C35CBE8(&STACK[0x580]);
      JUMPOUT(0x19C41FDBCLL);
    }
  }
  operator delete(v1);
  goto LABEL_6;
}

void sub_19C41FC14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  sub_19C2B43C8((uint64_t)&STACK[0x3F0]);
  if (a50)
    (*(void (**)(uint64_t))(*(_QWORD *)a50 + 8))(a50);
  sub_19C35CE78(&a53);
  if (SLOBYTE(STACK[0x2BF]) < 0)
  {
    operator delete((void *)STACK[0x2A8]);
    if ((a61 & 0x80000000) == 0)
    {
      if (!STACK[0x2C0])
      {
        if (SLOBYTE(STACK[0x537]) < 0)
          JUMPOUT(0x19C41FC9CLL);
        JUMPOUT(0x19C41FD98);
      }
      JUMPOUT(0x19C41FCE4);
    }
    JUMPOUT(0x19C41FCD4);
  }
  JUMPOUT(0x19C41FCCCLL);
}

void sub_19C41FCF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46)
{
  sub_19C35E470(&a40);
  sub_19C35E470(&a41);
  sub_19C35E470(&a42);
  sub_19C35E470(&a46);
  _Unwind_Resume(a1);
}

void sub_19C41FD10()
{
  if (STACK[0x2A8])
    JUMPOUT(0x19C41FD1CLL);
  JUMPOUT(0x19C41FD80);
}

uint64_t sub_19C41FDE4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, std::string *a4@<X3>, void **a5@<X8>, float a6@<S0>)
{
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::string *v19;
  const std::string::value_type *v20;
  std::string::size_type v21;
  uint64_t v22;
  std::string::size_type v23;
  std::string *v24;
  uint64_t v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  std::string *p_p;
  const std::string::value_type *v29;
  std::string::size_type v30;
  uint64_t v31;
  std::string::size_type v32;
  std::string *v33;
  std::string::size_type v34;
  std::string::size_type size;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  _BYTE *v39;
  _BYTE *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  std::string::value_type *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  std::string __p;
  unsigned int *v62[3];
  float v63;
  unint64_t v64;
  std::string::value_type *v65;
  std::string::size_type v66;
  uint64_t v67;
  char *v68;
  _QWORD *v69;

  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  sub_19C35CA40((uint64_t)v62, *a2);
  v12 = *a2;
  v13 = a2[1];
  if (v12 == v13)
    return sub_19C35CBE8((uint64_t)v62);
  v14 = 0;
  do
  {
    if ((v14 & 1) != 0 && *(_QWORD *)(v12 + 264) < v64)
      goto LABEL_4;
    if (sub_19C4205CC(a1, (_QWORD *)v12, a3, 0, a6)
      || *(_QWORD *)(v12 + 264) >= 2uLL && sub_19C4205CC(a1, (_QWORD *)v12, a3, 1, a6))
    {
      if ((v14 & 1) == 0 || *(_QWORD *)(v12 + 264) > v64 || *(float *)(v12 + 24) > v63)
        sub_19C35F4F8((uint64_t)v62, v12);
LABEL_4:
      v14 = 1;
    }
    v12 += 304;
  }
  while (v12 != v13);
  if ((v14 & 1) == 0)
    return sub_19C35CBE8((uint64_t)v62);
  if (!sub_19C4205CC(a1, v62, a3, 0, a6))
  {
    if (qword_1EE41C5B0 != -1)
      dispatch_once(&qword_1EE41C5B0, &unk_1E3D3C898);
    v25 = *(_QWORD *)(a1 + 72);
    v16 = *(std::__shared_weak_count **)(a1 + 80);
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v27 = __ldxr(p_shared_owners);
      while (__stxr(v27 + 1, p_shared_owners));
    }
    sub_19C3E29F8(&__p, v62, v25);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    sub_19C34EC30("Found final hypothesis satisfying secondary policy  = [%s]", (uint64_t)&v65, p_p);
    if (v67 >= 0)
      v29 = (const std::string::value_type *)&v65;
    else
      v29 = v65;
    if (v67 >= 0)
      v30 = HIBYTE(v67);
    else
      v30 = v66;
    std::string::append(a4, v29, v30);
    if (SHIBYTE(a4->__r_.__value_.__r.__words[2]) < 0)
    {
      size = a4->__r_.__value_.__l.__size_;
      if (size)
      {
        v33 = (std::string *)a4->__r_.__value_.__r.__words[0];
        if (!*(_BYTE *)(a4->__r_.__value_.__r.__words[0] + size - 1))
        {
          v32 = size - 1;
          a4->__r_.__value_.__l.__size_ = v32;
          goto LABEL_65;
        }
      }
    }
    else
    {
      v31 = HIBYTE(a4->__r_.__value_.__r.__words[2]);
      if (*((_BYTE *)&a4->__r_.__value_.__s + 23) && !a4->__r_.__value_.__s.__data_[v31 - 1])
      {
        v32 = v31 - 1;
        *((_BYTE *)&a4->__r_.__value_.__s + 23) = v31 - 1;
        v33 = a4;
LABEL_65:
        v33->__r_.__value_.__s.__data_[v32] = 0;
      }
    }
    std::string::push_back(a4, 10);
    if (SHIBYTE(v67) < 0)
    {
      operator delete(v65);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_68:
        if (!v16)
          goto LABEL_81;
        goto LABEL_77;
      }
    }
    else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_68;
    }
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v16)
      goto LABEL_81;
LABEL_77:
    v38 = (unint64_t *)&v16->__shared_owners_;
    do
      v37 = __ldaxr(v38);
    while (__stlxr(v37 - 1, v38));
    goto LABEL_79;
  }
  if (qword_1EE41C5B0 != -1)
    dispatch_once(&qword_1EE41C5B0, &unk_1E3D3C898);
  v15 = *(_QWORD *)(a1 + 72);
  v16 = *(std::__shared_weak_count **)(a1 + 80);
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  sub_19C3E29F8(&__p, v62, v15);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v19 = &__p;
  else
    v19 = (std::string *)__p.__r_.__value_.__r.__words[0];
  sub_19C34EC30("Found final hypothesis satisfying primary policy  = [%s]", (uint64_t)&v65, v19);
  if (v67 >= 0)
    v20 = (const std::string::value_type *)&v65;
  else
    v20 = v65;
  if (v67 >= 0)
    v21 = HIBYTE(v67);
  else
    v21 = v66;
  std::string::append(a4, v20, v21);
  if (SHIBYTE(a4->__r_.__value_.__r.__words[2]) < 0)
  {
    v34 = a4->__r_.__value_.__l.__size_;
    if (v34)
    {
      v24 = (std::string *)a4->__r_.__value_.__r.__words[0];
      if (!*(_BYTE *)(a4->__r_.__value_.__r.__words[0] + v34 - 1))
      {
        v23 = v34 - 1;
        a4->__r_.__value_.__l.__size_ = v23;
LABEL_57:
        v24->__r_.__value_.__s.__data_[v23] = 0;
      }
    }
  }
  else
  {
    v22 = HIBYTE(a4->__r_.__value_.__r.__words[2]);
    if (*((_BYTE *)&a4->__r_.__value_.__s + 23) && !a4->__r_.__value_.__s.__data_[v22 - 1])
    {
      v23 = v22 - 1;
      *((_BYTE *)&a4->__r_.__value_.__s + 23) = v22 - 1;
      v24 = a4;
      goto LABEL_57;
    }
  }
  std::string::push_back(a4, 10);
  if (SHIBYTE(v67) < 0)
  {
    operator delete(v65);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_71;
LABEL_60:
    if (!v16)
      goto LABEL_81;
LABEL_72:
    v36 = (unint64_t *)&v16->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
LABEL_79:
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    goto LABEL_81;
  }
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_60;
LABEL_71:
  operator delete(__p.__r_.__value_.__l.__data_);
  if (v16)
    goto LABEL_72;
LABEL_81:
  v39 = a5[2];
  v40 = a5[1];
  if (v40 < v39)
  {
    sub_19C35CA40((uint64_t)a5[1], (uint64_t)v62);
    v41 = (uint64_t)(v40 + 304);
    a5[1] = (void *)v41;
    goto LABEL_100;
  }
  v42 = 0x86BCA1AF286BCA1BLL * ((v40 - (_BYTE *)*a5) >> 4);
  if (v42 + 1 > 0xD79435E50D7943)
    sub_19C2A18E8();
  v43 = 0x86BCA1AF286BCA1BLL * ((v39 - (_BYTE *)*a5) >> 4);
  v44 = 2 * v43;
  if (2 * v43 <= v42 + 1)
    v44 = v42 + 1;
  if (v43 >= 0x6BCA1AF286BCA1)
    v45 = 0xD79435E50D7943;
  else
    v45 = v44;
  v69 = a5 + 2;
  if (v45)
  {
    if (v45 > 0xD79435E50D7943)
      sub_19C2A143C();
    v46 = (std::string::value_type *)operator new(304 * v45);
  }
  else
  {
    v46 = 0;
  }
  v65 = v46;
  v66 = (std::string::size_type)&v46[304 * v42];
  v67 = v66;
  v68 = &v46[304 * v45];
  sub_19C35CA40(v66, (uint64_t)v62);
  v47 = v66;
  v41 = v67 + 304;
  v48 = (char *)*a5;
  v49 = (char *)a5[1];
  if (v49 == *a5)
  {
    *a5 = (void *)v66;
    a5[1] = (void *)v41;
    a5[2] = v68;
    if (v49)
      goto LABEL_99;
  }
  else
  {
    v50 = 0;
    do
    {
      v51 = v47 + v50;
      v52 = (_QWORD *)(v47 + v50 - 304);
      v53 = &v49[v50];
      v54 = (uint64_t)&v49[v50 - 304];
      *(_QWORD *)(v47 + v50 - 296) = 0;
      *v52 = 0;
      v52[2] = 0;
      *(_OWORD *)v52 = *(_OWORD *)v54;
      *(_QWORD *)(v47 + v50 - 288) = *(_QWORD *)&v49[v50 - 288];
      *(_QWORD *)&v49[v50 - 296] = 0;
      *(_QWORD *)v54 = 0;
      *(_QWORD *)(v54 + 16) = 0;
      *(_QWORD *)(v47 + v50 - 280) = *(_QWORD *)&v49[v50 - 280];
      v55 = (uint64_t)&v49[v50 - 272];
      v56 = *(_OWORD *)v55;
      *(_QWORD *)(v51 - 256) = *(_QWORD *)&v49[v50 - 256];
      *(_OWORD *)(v47 + v50 - 272) = v56;
      *((_QWORD *)v53 - 32) = 0;
      *(_QWORD *)v55 = 0;
      *(_QWORD *)(v55 + 8) = 0;
      *(_QWORD *)(v51 - 248) = 0;
      *(_QWORD *)(v51 - 240) = 0;
      *(_QWORD *)(v51 - 232) = 0;
      *(_OWORD *)(v51 - 248) = *(_OWORD *)&v49[v50 - 248];
      *(_QWORD *)(v51 - 232) = *(_QWORD *)&v49[v50 - 232];
      *((_QWORD *)v53 - 31) = 0;
      *((_QWORD *)v53 - 30) = 0;
      *((_QWORD *)v53 - 29) = 0;
      *(_QWORD *)(v51 - 224) = 0;
      *(_QWORD *)(v51 - 216) = 0;
      *(_QWORD *)(v51 - 208) = 0;
      *(_OWORD *)(v51 - 224) = *(_OWORD *)&v49[v50 - 224];
      *(_QWORD *)(v51 - 208) = *(_QWORD *)&v49[v50 - 208];
      *((_QWORD *)v53 - 28) = 0;
      *((_QWORD *)v53 - 27) = 0;
      *((_QWORD *)v53 - 26) = 0;
      *(_QWORD *)(v51 - 200) = 0;
      *(_QWORD *)(v51 - 192) = 0;
      *(_QWORD *)(v51 - 184) = 0;
      *(_OWORD *)(v51 - 200) = *(_OWORD *)&v49[v50 - 200];
      *(_QWORD *)(v51 - 184) = *(_QWORD *)&v49[v50 - 184];
      *((_QWORD *)v53 - 25) = 0;
      *((_QWORD *)v53 - 24) = 0;
      *((_QWORD *)v53 - 23) = 0;
      *(_QWORD *)(v51 - 176) = 0;
      *(_QWORD *)(v51 - 168) = 0;
      *(_QWORD *)(v51 - 160) = 0;
      *(_OWORD *)(v51 - 176) = *(_OWORD *)&v49[v50 - 176];
      *(_QWORD *)(v51 - 160) = *(_QWORD *)&v49[v50 - 160];
      *((_QWORD *)v53 - 22) = 0;
      *((_QWORD *)v53 - 21) = 0;
      *((_QWORD *)v53 - 20) = 0;
      *(_QWORD *)(v51 - 152) = 0;
      *(_QWORD *)(v51 - 144) = 0;
      *(_QWORD *)(v51 - 136) = 0;
      *(_OWORD *)(v51 - 152) = *(_OWORD *)&v49[v50 - 152];
      *(_QWORD *)(v51 - 136) = *(_QWORD *)&v49[v50 - 136];
      *((_QWORD *)v53 - 18) = 0;
      *((_QWORD *)v53 - 17) = 0;
      v57 = *(_OWORD *)&v49[v50 - 128];
      *((_QWORD *)v53 - 19) = 0;
      *(_OWORD *)(v51 - 128) = v57;
      *(_QWORD *)(v51 - 104) = 0;
      *(_QWORD *)(v51 - 96) = 0;
      *(_QWORD *)(v51 - 112) = 0;
      *(_OWORD *)(v51 - 112) = *(_OWORD *)&v49[v50 - 112];
      *(_QWORD *)(v51 - 96) = *(_QWORD *)&v49[v50 - 96];
      *((_QWORD *)v53 - 14) = 0;
      *((_QWORD *)v53 - 13) = 0;
      *((_QWORD *)v53 - 12) = 0;
      *(_QWORD *)(v51 - 88) = 0;
      *(_QWORD *)(v51 - 80) = 0;
      *(_QWORD *)(v51 - 72) = 0;
      *(_OWORD *)(v51 - 88) = *(_OWORD *)&v49[v50 - 88];
      *(_QWORD *)(v51 - 72) = *(_QWORD *)&v49[v50 - 72];
      *((_QWORD *)v53 - 11) = 0;
      *((_QWORD *)v53 - 10) = 0;
      *((_QWORD *)v53 - 9) = 0;
      *(_QWORD *)(v51 - 64) = 0;
      *(_QWORD *)(v51 - 56) = 0;
      *(_QWORD *)(v51 - 48) = 0;
      *(_OWORD *)(v51 - 64) = *(_OWORD *)&v49[v50 - 64];
      *(_QWORD *)(v51 - 48) = *(_QWORD *)&v49[v50 - 48];
      *((_QWORD *)v53 - 8) = 0;
      *((_QWORD *)v53 - 7) = 0;
      *((_QWORD *)v53 - 6) = 0;
      v58 = *(_QWORD *)&v49[v50 - 40];
      *(_DWORD *)(v51 - 32) = *(_DWORD *)&v49[v50 - 32];
      *(_QWORD *)(v51 - 16) = 0;
      *(_QWORD *)(v51 - 8) = 0;
      *(_QWORD *)(v51 - 40) = v58;
      *(_QWORD *)(v51 - 24) = 0;
      *(_OWORD *)(v51 - 24) = *(_OWORD *)&v49[v50 - 24];
      *(_QWORD *)(v51 - 8) = *(_QWORD *)&v49[v50 - 8];
      *((_QWORD *)v53 - 3) = 0;
      *((_QWORD *)v53 - 2) = 0;
      *((_QWORD *)v53 - 1) = 0;
      v50 -= 304;
    }
    while (&v49[v50] != v48);
    v49 = (char *)*a5;
    v59 = (uint64_t)a5[1];
    *a5 = (void *)(v47 + v50);
    a5[1] = (void *)v41;
    for (a5[2] = v68; (char *)v59 != v49; v59 = sub_19C35CBE8(v59 - 304))
      ;
    if (v49)
LABEL_99:
      operator delete(v49);
  }
LABEL_100:
  a5[1] = (void *)v41;
  return sub_19C35CBE8((uint64_t)v62);
}

void sub_19C4204DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  void **v19;
  uint64_t v20;

  sub_19C360240(v20 - 120);
  sub_19C35CBE8((uint64_t)&a19);
  sub_19C35E418(v19);
  _Unwind_Resume(a1);
}

double sub_19C420574@<D0>(uint64_t a1@<X8>)
{
  char *v2;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)a1 = v2;
  *(_OWORD *)(a1 + 8) = xmmword_19C46E050;
  strcpy(v2, "Beam Search V2 (Word-by-Word thresholding with early stopping)");
  return *(double *)" early stopping)";
}

BOOL sub_19C4205CC(uint64_t a1, _QWORD *a2, uint64_t a3, int a4, float a5)
{
  _QWORD *v9;
  unint64_t v10;
  float v11;
  const void **v12;
  uint64_t v13;
  const void *v14;
  size_t v15;
  float *v16;
  float v17;
  unint64_t i;
  unint64_t v19;
  _BOOL8 result;
  unint64_t v21;
  float v22;
  uint64_t v23;
  const void *v24;
  int64_t v25;
  void *v26;
  float v27;

  if (!a2[33])
    return 1;
  v9 = (_QWORD *)(a1 + 72);
  if (*(char *)(a3 + 23) >= 0)
    v10 = *(unsigned __int8 *)(a3 + 23);
  else
    v10 = *(_QWORD *)(a3 + 8);
  v11 = sub_19C3E6760((_QWORD *)(a1 + 72), v10, 1uLL, a4);
  v12 = (const void **)(a2 + 35);
  v13 = a2[36];
  v14 = (const void *)a2[35];
  v15 = v13 - (_QWORD)v14;
  if (v13 - (uint64_t)v14 < 0)
    sub_19C2A18E8();
  v16 = (float *)operator new(v13 - (_QWORD)v14);
  memcpy(v16, v14, v15);
  v17 = *v16 - a5;
  operator delete(v16);
  if (v17 < v11)
    return 0;
  for (i = 1; ; ++i)
  {
    v19 = a2[33];
    result = i >= v19;
    if (i >= v19)
      break;
    if (*(char *)(a3 + 23) >= 0)
      v21 = *(unsigned __int8 *)(a3 + 23);
    else
      v21 = *(_QWORD *)(a3 + 8);
    v22 = sub_19C3E6760(v9, v21, i + 1, a4);
    v23 = a2[36];
    v24 = *v12;
    v25 = v23 - (_QWORD)*v12;
    if (v25 < 0)
      sub_19C2A18E8();
    v26 = operator new(v23 - (_QWORD)*v12);
    memcpy(v26, v24, v25);
    v27 = *((float *)v26 + i);
    operator delete(v26);
    if (v27 < v22)
      return 0;
  }
  return result;
}

void sub_19C420754(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

os_log_t sub_19C420774()
{
  os_log_t result;

  result = os_log_create("com.apple.LanguageModeling", "InlineCompletionHypothesis");
  qword_1EE41C5A8 = (uint64_t)result;
  return result;
}

float *sub_19C4207A0(float *result, float *a2, uint64_t a3, char a4)
{
  float *v7;
  float *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  float *v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  int v19;
  int v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float *v29;
  float *v30;
  float v31;
  float v32;
  float v33;
  int v34;
  float v35;
  float v36;
  float v37;
  int v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float *v43;
  float *v44;
  float v45;
  float v46;
  float v47;
  int v48;
  float v49;
  float v50;
  float v51;
  int v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float *v62;
  float *v63;
  float *v64;
  float *v65;
  float v66;
  float *v67;
  float v68;
  float *v69;
  float v70;
  int v71;
  float v72;
  float v73;
  BOOL v74;
  float *v75;
  float v76;
  float *v77;
  float v78;
  float *v79;
  float *v80;
  float v81;
  float v82;
  int v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  int v92;
  float v93;
  float v94;
  int v95;
  float v96;
  float v97;
  int v98;
  int v99;
  float v100;
  int v101;
  float v102;
  float v103;
  float *v104;
  BOOL v106;
  uint64_t v107;
  float *v108;
  uint64_t v109;
  float v110;
  float v111;
  float v112;
  uint64_t v113;
  float *v114;
  int64_t v115;
  int64_t v116;
  BOOL v117;
  uint64_t v118;
  float *v119;
  float *v120;
  float v121;
  int v122;
  float *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  float v128;
  float v129;
  float *v130;
  float *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  float *v136;
  int v137;
  float *v138;
  int v139;
  int v140;
  float *v141;
  float v142;
  float v143;
  float v144;
  float *v145;
  float v146;
  float v147;

  v7 = result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = ((char *)a2 - (char *)v8) >> 3;
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v86 = *(a2 - 1);
        v87 = v8[1];
        if (v86 > v87)
        {
          v88 = *v8;
          *v8 = *(a2 - 2);
          *(a2 - 2) = v88;
          v8[1] = v86;
          *(a2 - 1) = v87;
        }
        return result;
      case 3:
        v89 = v8[3];
        v90 = v8[1];
        v91 = *(a2 - 1);
        if (v89 <= v90)
        {
          if (v91 > v89)
          {
            v139 = *((_DWORD *)v8 + 2);
            v8[2] = *(a2 - 2);
            *((_DWORD *)a2 - 2) = v139;
            v8[3] = v91;
            *(a2 - 1) = v89;
            v96 = v8[3];
            v102 = v8[1];
            if (v96 > v102)
            {
              v140 = *(_DWORD *)v8;
              *v8 = v8[2];
              *((_DWORD *)v8 + 2) = v140;
              goto LABEL_163;
            }
          }
        }
        else
        {
          v92 = *(_DWORD *)v8;
          if (v91 <= v89)
          {
            *v8 = v8[2];
            *((_DWORD *)v8 + 2) = v92;
            v8[1] = v89;
            v8[3] = v90;
            v147 = *(a2 - 1);
            if (v147 <= v90)
              return result;
            v8[2] = *(a2 - 2);
            *((_DWORD *)a2 - 2) = v92;
            v8[3] = v147;
          }
          else
          {
            *v8 = *(a2 - 2);
            *((_DWORD *)a2 - 2) = v92;
            v8[1] = v91;
          }
          *(a2 - 1) = v90;
        }
        return result;
      case 4:
        return sub_19C4212FC(v8, v8 + 2, v8 + 4, a2 - 2);
      case 5:
        result = sub_19C4212FC(v8, v8 + 2, v8 + 4, v8 + 6);
        v93 = *(a2 - 1);
        v94 = v8[7];
        if (v93 > v94)
        {
          v95 = *((_DWORD *)v8 + 6);
          v8[6] = *(a2 - 2);
          *((_DWORD *)a2 - 2) = v95;
          v8[7] = v93;
          *(a2 - 1) = v94;
          v96 = v8[7];
          v97 = v8[5];
          if (v96 > v97)
          {
            v98 = *((_DWORD *)v8 + 4);
            v99 = *((_DWORD *)v8 + 6);
            *((_DWORD *)v8 + 4) = v99;
            *((_DWORD *)v8 + 6) = v98;
            v8[5] = v96;
            v8[7] = v97;
            v100 = v8[3];
            if (v96 > v100)
            {
              v101 = *((_DWORD *)v8 + 2);
              *((_DWORD *)v8 + 2) = v99;
              *((_DWORD *)v8 + 4) = v101;
              v8[3] = v96;
              v8[5] = v100;
              v102 = v8[1];
              if (v96 > v102)
              {
                v103 = *v8;
                *(_DWORD *)v8 = v99;
                v8[2] = v103;
LABEL_163:
                v8[1] = v96;
                v8[3] = v102;
              }
            }
          }
        }
        return result;
      default:
        if (v9 <= 191)
        {
          v104 = v8 + 2;
          v106 = v8 == a2 || v104 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v106)
            {
              v107 = 0;
              v108 = v8;
              do
              {
                v110 = v108[3];
                v111 = v108[1];
                v108 = v104;
                if (v110 > v111)
                {
                  v112 = *v104;
                  v113 = v107;
                  do
                  {
                    v114 = (float *)((char *)v8 + v113);
                    v114[2] = *(float *)((char *)v8 + v113);
                    v114[3] = *(float *)((char *)v8 + v113 + 4);
                    if (!v113)
                    {
                      v109 = (uint64_t)v8;
                      goto LABEL_122;
                    }
                    v113 -= 8;
                  }
                  while (v110 > *(v114 - 1));
                  v109 = (uint64_t)v8 + v113 + 8;
LABEL_122:
                  *(float *)v109 = v112;
                  *(float *)(v109 + 4) = v110;
                }
                v104 = v108 + 2;
                v107 += 8;
              }
              while (v108 + 2 != a2);
            }
          }
          else if (!v106)
          {
            v141 = v8 + 1;
            do
            {
              v142 = v7[3];
              v143 = v7[1];
              v7 = v104;
              if (v142 > v143)
              {
                v144 = *v104;
                v145 = v141;
                do
                {
                  v145[1] = *(v145 - 1);
                  v145[2] = *v145;
                  v146 = *(v145 - 2);
                  v145 -= 2;
                }
                while (v142 > v146);
                v145[1] = v144;
                v145[2] = v142;
              }
              v104 = v7 + 2;
              v141 += 2;
            }
            while (v7 + 2 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v8 == a2)
            return result;
          v115 = (unint64_t)(v10 - 2) >> 1;
          v116 = v115;
          do
          {
            if (v115 >= v116)
            {
              v118 = (2 * v116) | 1;
              v119 = &v8[2 * v118];
              if (2 * v116 + 2 < v10 && v119[1] > v119[3])
              {
                v119 += 2;
                v118 = 2 * v116 + 2;
              }
              v120 = &v8[2 * v116];
              v121 = v120[1];
              if (v119[1] <= v121)
              {
                v122 = *(_DWORD *)v120;
                do
                {
                  v123 = v120;
                  v120 = v119;
                  *v123 = *v119;
                  v123[1] = v119[1];
                  if (v115 < v118)
                    break;
                  v124 = 2 * v118;
                  v118 = (2 * v118) | 1;
                  v119 = &v8[2 * v118];
                  v125 = v124 + 2;
                  if (v125 < v10 && v119[1] > v119[3])
                  {
                    v119 += 2;
                    v118 = v125;
                  }
                }
                while (v119[1] <= v121);
                *(_DWORD *)v120 = v122;
                v120[1] = v121;
              }
            }
            v117 = v116-- <= 0;
          }
          while (!v117);
          v126 = (unint64_t)v9 >> 3;
          while (2)
          {
            v127 = 0;
            v128 = *v8;
            v129 = v8[1];
            v130 = v8;
            do
            {
              v131 = v130;
              v130 += 2 * v127 + 2;
              v132 = 2 * v127;
              v127 = (2 * v127) | 1;
              v133 = v132 + 2;
              if (v133 < v126 && v130[1] > v130[3])
              {
                v130 += 2;
                v127 = v133;
              }
              *v131 = *v130;
              v131[1] = v130[1];
            }
            while (v127 <= (uint64_t)((unint64_t)(v126 - 2) >> 1));
            if (v130 != a2 - 2)
            {
              *v130 = *(a2 - 2);
              v130[1] = *(a2 - 1);
              *(a2 - 2) = v128;
              *(a2 - 1) = v129;
              v134 = (char *)v130 - (char *)v8 + 8;
              if (v134 >= 9)
              {
                v135 = (((unint64_t)v134 >> 3) - 2) >> 1;
                v136 = &v8[2 * v135];
                v129 = v130[1];
                if (v136[1] > v129)
                {
                  v137 = *(_DWORD *)v130;
                  do
                  {
                    v138 = v130;
                    v130 = v136;
                    *v138 = *v136;
                    v138[1] = v136[1];
                    if (!v135)
                      break;
                    v135 = (v135 - 1) >> 1;
                    v136 = &v8[2 * v135];
                  }
                  while (v136[1] > v129);
                  *(_DWORD *)v130 = v137;
LABEL_146:
                  v130[1] = v129;
                }
              }
              a2 -= 2;
              v117 = v126-- <= 2;
              if (v117)
                return result;
              continue;
            }
            break;
          }
          *v130 = v128;
          goto LABEL_146;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = &v8[2 * ((unint64_t)v10 >> 1)];
        v13 = *(a2 - 1);
        if ((unint64_t)v9 < 0x401)
        {
          v17 = v8[1];
          v18 = v12[1];
          if (v17 <= v18)
          {
            if (v13 > v17)
            {
              v24 = *v8;
              *v8 = *(a2 - 2);
              *(a2 - 2) = v24;
              v8[1] = v13;
              *(a2 - 1) = v17;
              v25 = v8[1];
              v26 = v12[1];
              if (v25 > v26)
              {
                v27 = *v12;
                *v12 = *v8;
                *v8 = v27;
                v12[1] = v25;
                v8[1] = v26;
                --a3;
                if ((a4 & 1) != 0)
                  goto LABEL_33;
                goto LABEL_57;
              }
            }
          }
          else
          {
            v19 = *(_DWORD *)v12;
            if (v13 <= v17)
            {
              *v12 = *v8;
              *(_DWORD *)v8 = v19;
              v12[1] = v17;
              v8[1] = v18;
              v39 = *(a2 - 1);
              if (v39 <= v18)
                goto LABEL_32;
              *v8 = *(a2 - 2);
              *((_DWORD *)a2 - 2) = v19;
              v8[1] = v39;
            }
            else
            {
              *v12 = *(a2 - 2);
              *((_DWORD *)a2 - 2) = v19;
              v12[1] = v13;
            }
            *(a2 - 1) = v18;
          }
LABEL_32:
          --a3;
          if ((a4 & 1) != 0)
            goto LABEL_33;
LABEL_57:
          v41 = v8[1];
          v40 = *v8;
          if (*(v8 - 1) > v41)
            goto LABEL_58;
          if (v41 <= *(a2 - 1))
          {
            v77 = v8 + 2;
            do
            {
              v8 = v77;
              if (v77 >= a2)
                break;
              v78 = v77[1];
              v77 += 2;
            }
            while (v41 <= v78);
          }
          else
          {
            v75 = v8;
            do
            {
              v8 = v75 + 2;
              v76 = v75[3];
              v75 += 2;
            }
            while (v41 <= v76);
          }
          v79 = a2;
          if (v8 < a2)
          {
            v80 = a2;
            do
            {
              v79 = v80 - 2;
              v81 = *(v80 - 1);
              v80 -= 2;
            }
            while (v41 > v81);
          }
          while (v8 < v79)
          {
            v82 = *v8;
            *v8 = *v79;
            *v79 = v82;
            v83 = *((_DWORD *)v8 + 1);
            v8[1] = v79[1];
            *((_DWORD *)v79 + 1) = v83;
            do
            {
              v84 = v8[3];
              v8 += 2;
            }
            while (v41 <= v84);
            do
            {
              v85 = *(v79 - 1);
              v79 -= 2;
            }
            while (v41 > v85);
          }
          if (v8 - 2 != v7)
          {
            *v7 = *(v8 - 2);
            v7[1] = *(v8 - 1);
          }
          a4 = 0;
          *(v8 - 2) = v40;
          *(v8 - 1) = v41;
          continue;
        }
        v14 = v12[1];
        v15 = v8[1];
        if (v14 <= v15)
        {
          if (v13 > v14)
          {
            v20 = *(_DWORD *)v12;
            *v12 = *(a2 - 2);
            *((_DWORD *)a2 - 2) = v20;
            v12[1] = v13;
            *(a2 - 1) = v14;
            v21 = v12[1];
            v22 = v8[1];
            if (v21 > v22)
            {
              v23 = *v8;
              *v8 = *v12;
              *v12 = v23;
              v8[1] = v21;
              v12[1] = v22;
            }
          }
        }
        else
        {
          v16 = *v8;
          if (v13 > v14)
          {
            *v8 = *(a2 - 2);
            *(a2 - 2) = v16;
            v8[1] = v13;
            goto LABEL_22;
          }
          *v8 = *v12;
          *v12 = v16;
          v8[1] = v14;
          v12[1] = v15;
          v28 = *(a2 - 1);
          if (v28 > v15)
          {
            *v12 = *(a2 - 2);
            *(a2 - 2) = v16;
            v12[1] = v28;
LABEL_22:
            *(a2 - 1) = v15;
          }
        }
        v29 = &v8[2 * v11];
        v30 = v29 - 2;
        v31 = *(v29 - 1);
        v32 = v8[3];
        v33 = *(a2 - 3);
        if (v31 <= v32)
        {
          if (v33 > v31)
          {
            v35 = *v30;
            *v30 = *(a2 - 4);
            *(a2 - 4) = v35;
            v30[1] = v33;
            *(a2 - 3) = v31;
            v36 = v30[1];
            v37 = v8[3];
            if (v36 > v37)
            {
              v38 = *((_DWORD *)v8 + 2);
              v8[2] = *v30;
              *(_DWORD *)v30 = v38;
              v8[3] = v36;
              v30[1] = v37;
            }
          }
        }
        else
        {
          v34 = *((_DWORD *)v8 + 2);
          if (v33 > v31)
          {
            v8[2] = *(a2 - 4);
            *((_DWORD *)a2 - 4) = v34;
            v8[3] = v33;
            goto LABEL_36;
          }
          v8[2] = *v30;
          *(_DWORD *)v30 = v34;
          v8[3] = v31;
          v30[1] = v32;
          v42 = *(a2 - 3);
          if (v42 > v32)
          {
            *v30 = *(a2 - 4);
            *((_DWORD *)a2 - 4) = v34;
            v30[1] = v42;
LABEL_36:
            *(a2 - 3) = v32;
          }
        }
        v43 = &v8[2 * v11];
        v44 = v43 + 2;
        v45 = v43[3];
        v46 = v8[5];
        v47 = *(a2 - 5);
        if (v45 <= v46)
        {
          if (v47 > v45)
          {
            v49 = *v44;
            *v44 = *(a2 - 6);
            *(a2 - 6) = v49;
            v44[1] = v47;
            *(a2 - 5) = v45;
            v50 = v44[1];
            v51 = v8[5];
            if (v50 > v51)
            {
              v52 = *((_DWORD *)v8 + 4);
              v8[4] = *v44;
              *(_DWORD *)v44 = v52;
              v8[5] = v50;
              v44[1] = v51;
            }
          }
        }
        else
        {
          v48 = *((_DWORD *)v8 + 4);
          if (v47 > v45)
          {
            v8[4] = *(a2 - 6);
            *((_DWORD *)a2 - 6) = v48;
            v8[5] = v47;
            goto LABEL_45;
          }
          v8[4] = *v44;
          *(_DWORD *)v44 = v48;
          v8[5] = v45;
          v44[1] = v46;
          v53 = *(a2 - 5);
          if (v53 > v46)
          {
            *v44 = *(a2 - 6);
            *((_DWORD *)a2 - 6) = v48;
            v44[1] = v53;
LABEL_45:
            *(a2 - 5) = v46;
          }
        }
        v54 = v12[1];
        v55 = v30[1];
        v56 = v44[1];
        if (v54 <= v55)
        {
          v57 = *v12;
          if (v56 <= v54)
          {
            v55 = v12[1];
          }
          else
          {
            v58 = *v44;
            *v12 = *v44;
            *v44 = v57;
            v12[1] = v56;
            v44[1] = v54;
            if (v56 <= v55)
            {
              v55 = v56;
              v57 = v58;
            }
            else
            {
              v57 = *v30;
              *v30 = v58;
              *v12 = v57;
              v30[1] = v56;
              v12[1] = v55;
            }
          }
        }
        else
        {
          v57 = *v30;
          if (v56 <= v54)
          {
            *v30 = *v12;
            *v12 = v57;
            v30[1] = v54;
            v12[1] = v55;
            if (v56 > v55)
            {
              v59 = *v44;
              *v12 = *v44;
              *v44 = v57;
              v12[1] = v56;
              v44[1] = v55;
              v55 = v56;
              v57 = v59;
            }
          }
          else
          {
            *v30 = *v44;
            *v44 = v57;
            v30[1] = v56;
            v44[1] = v55;
            v57 = *v12;
            v55 = v54;
          }
        }
        v60 = *v8;
        *v8 = v57;
        *v12 = v60;
        v61 = v8[1];
        v8[1] = v55;
        v8[2 * v11 + 1] = v61;
        --a3;
        if ((a4 & 1) == 0)
          goto LABEL_57;
LABEL_33:
        v40 = *v8;
        v41 = v8[1];
LABEL_58:
        v62 = v8;
        do
        {
          v63 = v62;
          v62 += 2;
        }
        while (v63[3] > v41);
        v64 = a2;
        if (v63 == v8)
        {
          v67 = a2;
          while (v62 < v67)
          {
            v65 = v67 - 2;
            v68 = *(v67 - 1);
            v67 -= 2;
            if (v68 > v41)
              goto LABEL_68;
          }
          v65 = v67;
        }
        else
        {
          do
          {
            v65 = v64 - 2;
            v66 = *(v64 - 1);
            v64 -= 2;
          }
          while (v66 <= v41);
        }
LABEL_68:
        v8 = v62;
        if (v62 < v65)
        {
          v69 = v65;
          do
          {
            v70 = *v8;
            *v8 = *v69;
            *v69 = v70;
            v71 = *((_DWORD *)v8 + 1);
            v8[1] = v69[1];
            *((_DWORD *)v69 + 1) = v71;
            do
            {
              v72 = v8[3];
              v8 += 2;
            }
            while (v72 > v41);
            do
            {
              v73 = *(v69 - 1);
              v69 -= 2;
            }
            while (v73 <= v41);
          }
          while (v8 < v69);
        }
        if (v8 - 2 != v7)
        {
          *v7 = *(v8 - 2);
          v7[1] = *(v8 - 1);
        }
        *(v8 - 2) = v40;
        *(v8 - 1) = v41;
        if (v62 < v65)
        {
LABEL_79:
          result = (float *)sub_19C4207A0(v7, v8 - 2, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v74 = sub_19C421438(v7, v8 - 2);
        result = (float *)sub_19C421438(v8, a2);
        if (!(_DWORD)result)
        {
          if (v74)
            continue;
          goto LABEL_79;
        }
        a2 = v8 - 2;
        if (!v74)
          goto LABEL_2;
        return result;
    }
  }
}

float *sub_19C4212FC(float *result, float *a2, float *a3, float *a4)
{
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;

  v4 = a2[1];
  v5 = result[1];
  v6 = a3[1];
  if (v4 <= v5)
  {
    if (v6 <= v4)
    {
      v4 = a3[1];
    }
    else
    {
      v8 = *a2;
      *a2 = *a3;
      *a3 = v8;
      a2[1] = v6;
      a3[1] = v4;
      v9 = a2[1];
      v10 = result[1];
      if (v9 > v10)
      {
        v11 = *result;
        *result = *a2;
        *a2 = v11;
        result[1] = v9;
        a2[1] = v10;
        v4 = a3[1];
      }
    }
  }
  else
  {
    v7 = *result;
    if (v6 > v4)
    {
      *result = *a3;
      *a3 = v7;
      result[1] = v6;
LABEL_9:
      a3[1] = v5;
      v4 = v5;
      goto LABEL_11;
    }
    *result = *a2;
    *a2 = v7;
    result[1] = v4;
    a2[1] = v5;
    v4 = a3[1];
    if (v4 > v5)
    {
      *a2 = *a3;
      *a3 = v7;
      a2[1] = v4;
      goto LABEL_9;
    }
  }
LABEL_11:
  v12 = a4[1];
  if (v12 > v4)
  {
    v13 = *a3;
    *a3 = *a4;
    *a4 = v13;
    a3[1] = v12;
    a4[1] = v4;
    v14 = a3[1];
    v15 = a2[1];
    if (v14 > v15)
    {
      v16 = *a2;
      *a2 = *a3;
      *a3 = v16;
      a2[1] = v14;
      a3[1] = v15;
      v17 = a2[1];
      v18 = result[1];
      if (v17 > v18)
      {
        v19 = *result;
        *result = *a2;
        *a2 = v19;
        result[1] = v17;
        a2[1] = v18;
      }
    }
  }
  return result;
}

BOOL sub_19C421438(float *a1, float *a2)
{
  uint64_t v4;
  _BOOL8 result;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  int v12;
  float v13;
  float *v14;
  float v15;
  float v16;
  float v17;
  float *v18;
  float v19;
  float v20;
  int v21;
  float v22;
  float v23;
  int v24;
  int v25;
  float v26;
  int v27;
  float v28;
  float v29;
  int v30;
  float v31;
  float v32;
  int v33;
  int v34;
  int v35;
  float v36;
  float v37;
  float *v38;
  uint64_t v39;
  int v40;
  float *v41;
  uint64_t v42;
  float v43;
  int v44;
  uint64_t v45;
  float *v46;

  v4 = ((char *)a2 - (char *)a1) >> 3;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = a1[1];
      if (v6 > v7)
      {
        v8 = *a1;
        *a1 = *(a2 - 2);
        *(a2 - 2) = v8;
        a1[1] = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      v9 = a1[3];
      v10 = a1[1];
      v11 = *(a2 - 1);
      if (v9 <= v10)
      {
        if (v11 > v9)
        {
          v30 = *((_DWORD *)a1 + 2);
          a1[2] = *(a2 - 2);
          *((_DWORD *)a2 - 2) = v30;
          a1[3] = v11;
          *(a2 - 1) = v9;
          v31 = a1[3];
          v32 = a1[1];
          if (v31 > v32)
          {
            v33 = *(_DWORD *)a1;
            *a1 = a1[2];
            *((_DWORD *)a1 + 2) = v33;
            a1[1] = v31;
            a1[3] = v32;
          }
        }
      }
      else
      {
        v12 = *(_DWORD *)a1;
        if (v11 <= v9)
        {
          *a1 = a1[2];
          *((_DWORD *)a1 + 2) = v12;
          a1[1] = v9;
          a1[3] = v10;
          v37 = *(a2 - 1);
          if (v37 > v10)
          {
            a1[2] = *(a2 - 2);
            *((_DWORD *)a2 - 2) = v12;
            a1[3] = v37;
            *(a2 - 1) = v10;
          }
        }
        else
        {
          *a1 = *(a2 - 2);
          *((_DWORD *)a2 - 2) = v12;
          a1[1] = v11;
          *(a2 - 1) = v10;
        }
      }
      return result;
    case 4:
      sub_19C4212FC(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      sub_19C4212FC(a1, a1 + 2, a1 + 4, a1 + 6);
      v19 = *(a2 - 1);
      v20 = a1[7];
      if (v19 > v20)
      {
        v21 = *((_DWORD *)a1 + 6);
        a1[6] = *(a2 - 2);
        *((_DWORD *)a2 - 2) = v21;
        a1[7] = v19;
        *(a2 - 1) = v20;
        v22 = a1[7];
        v23 = a1[5];
        if (v22 > v23)
        {
          v24 = *((_DWORD *)a1 + 4);
          v25 = *((_DWORD *)a1 + 6);
          *((_DWORD *)a1 + 4) = v25;
          *((_DWORD *)a1 + 6) = v24;
          a1[5] = v22;
          a1[7] = v23;
          v26 = a1[3];
          if (v22 > v26)
          {
            v27 = *((_DWORD *)a1 + 2);
            *((_DWORD *)a1 + 2) = v25;
            *((_DWORD *)a1 + 4) = v27;
            a1[3] = v22;
            a1[5] = v26;
            v28 = a1[1];
            if (v22 > v28)
            {
              v29 = *a1;
              *(_DWORD *)a1 = v25;
              a1[2] = v29;
              a1[1] = v22;
              a1[3] = v28;
            }
          }
        }
      }
      return 1;
    default:
      v13 = a1[1];
      v14 = a1 + 3;
      v15 = a1[3];
      v16 = a1[5];
      if (v15 > v13)
      {
        v17 = *a1;
        if (v16 <= v15)
        {
          *a1 = a1[2];
          a1[2] = v17;
          a1[1] = v15;
          a1[3] = v13;
          if (v16 <= v13)
            goto LABEL_28;
          a1[2] = a1[4];
          a1[4] = v17;
          v18 = a1 + 3;
        }
        else
        {
          *a1 = a1[4];
          a1[4] = v17;
          v18 = a1 + 1;
        }
        v14 = a1 + 5;
        goto LABEL_27;
      }
      if (v16 > v15)
      {
        v34 = *((_DWORD *)a1 + 2);
        v35 = *((_DWORD *)a1 + 4);
        *((_DWORD *)a1 + 2) = v35;
        *((_DWORD *)a1 + 4) = v34;
        a1[3] = v16;
        a1[5] = v15;
        if (v16 > v13)
        {
          v36 = *a1;
          *(_DWORD *)a1 = v35;
          a1[2] = v36;
          v18 = a1 + 1;
LABEL_27:
          *v18 = v16;
          *v14 = v13;
        }
      }
LABEL_28:
      v38 = a1 + 6;
      if (a1 + 6 == a2)
        return 1;
      v39 = 0;
      v40 = 0;
      v41 = a1 + 4;
      while (1)
      {
        v43 = v38[1];
        if (v43 > v41[1])
        {
          v44 = *(_DWORD *)v38;
          v45 = v39;
          do
          {
            v46 = (float *)((char *)a1 + v45);
            v46[6] = *(float *)((char *)a1 + v45 + 16);
            v46[7] = *(float *)((char *)a1 + v45 + 20);
            if (v45 == -16)
            {
              v42 = (uint64_t)a1;
              goto LABEL_31;
            }
            v45 -= 8;
          }
          while (v43 > v46[3]);
          v42 = (uint64_t)a1 + v45 + 24;
LABEL_31:
          *(_DWORD *)v42 = v44;
          *(float *)(v42 + 4) = v43;
          if (++v40 == 8)
            return v38 + 2 == a2;
        }
        v41 = v38;
        v39 += 8;
        v38 += 2;
        if (v38 == a2)
          return 1;
      }
  }
}

__CFDictionary *sub_19C421790(uint64_t a1)
{
  const __CFAllocator *v2;
  __CFDictionary *Mutable;
  const void *v4;
  size_t v5;
  std::string::size_type v6;
  std::string *p_dst;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  unsigned __int8 v11;
  std::string::size_type size;
  std::string *v13;
  int v14;
  const void *v15;
  std::string *v16;
  std::string::size_type v17;
  CFStringRef v18;
  const void *v19;
  size_t v20;
  const void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  std::string::size_type v27;
  std::string::size_type v28;
  char *v29;
  CFStringRef *v30;
  __int128 v31;
  unsigned __int8 v32;
  std::string::size_type v33;
  std::string *p_p;
  int v35;
  std::string *v37;
  std::string::size_type v38;
  CFStringRef v39;
  CFStringRef v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  char *v46;
  CFStringRef *v47;
  void *v48;
  unint64_t v49;
  const __CFString *v50;
  char *v51;
  char *v52;
  const void *v53;
  const void *v54;
  uint64_t v55;
  CFStringRef *v56;
  char *v57;
  uint64_t v58;
  __int128 v59;
  CFStringRef *v60;
  size_t v61;
  BOOL v62;
  __CFDictionary *v63;
  const void *v64;
  char *v65;
  char *v66;
  char *v67;
  CFStringRef *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  __int128 v74;
  uint64_t v75;
  CFArrayRef v76;
  std::string::size_type v77;
  std::string::size_type v78;
  void *v79;
  const void *v80;
  const void *v81;
  const void *v82;
  size_t v83;
  std::string::size_type v84;
  std::string *v85;
  uint64_t v86;
  uint64_t v87;
  const void *v88;
  size_t v89;
  std::string::size_type v90;
  std::string *v91;
  uint64_t v92;
  uint64_t v93;
  const void *v94;
  size_t v95;
  std::string::size_type v96;
  std::string *v97;
  uint64_t v98;
  uint64_t v99;
  const void *v100;
  size_t v101;
  std::string::size_type v102;
  std::string *v103;
  uint64_t v104;
  uint64_t v105;
  const void *v106;
  size_t v107;
  std::string::size_type v108;
  std::string *v109;
  uint64_t v110;
  uint64_t v111;
  const void *v112;
  size_t v113;
  std::string::size_type v114;
  std::string *v115;
  uint64_t v116;
  uint64_t v117;
  const void *v118;
  size_t v119;
  std::string::size_type v120;
  std::string *v121;
  uint64_t v122;
  uint64_t v123;
  const void *v124;
  uint64_t *v125;
  const void *v126;
  const void *v127;
  size_t v128;
  std::string::size_type v129;
  std::string *v130;
  uint64_t v131;
  uint64_t v132;
  const void *v133;
  uint64_t *v134;
  const void *v135;
  const void *v136;
  size_t v137;
  std::string::size_type v138;
  std::string *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t *v142;
  const void *v143;
  CFArrayRef ArrayBySeparatingStrings;
  const __CFArray *v145;
  CFIndex Count;
  CFIndex v147;
  std::string::size_type v148;
  CFIndex v149;
  char *v150;
  unint64_t v151;
  const __CFString *v152;
  CFStringRef v153;
  const void *v154;
  CFArrayRef v155;
  void *v156;
  std::string::size_type i;
  const void *v158;
  const void *v159;
  const void *v160;
  size_t v161;
  std::string::size_type v162;
  std::string *v163;
  uint64_t v164;
  uint64_t v165;
  const void *v166;
  size_t v167;
  std::string::size_type v168;
  std::string *v169;
  uint64_t v170;
  uint64_t v171;
  const void *v172;
  size_t v173;
  std::string::size_type v174;
  std::string *v175;
  uint64_t v176;
  uint64_t v177;
  const void *v178;
  uint64_t *v179;
  uint64_t *v180;
  uint64_t v181;
  uint64_t v182;
  int v183;
  uint64_t *v184;
  uint64_t v185;
  void *v186;
  const void *v187;
  size_t v188;
  std::string::size_type v189;
  std::string *v190;
  uint64_t v191;
  uint64_t v192;
  const void *v193;
  size_t v194;
  std::string::size_type v195;
  std::string *v196;
  uint64_t v197;
  uint64_t v198;
  const void *v199;
  size_t v200;
  std::string::size_type v201;
  std::string *v202;
  uint64_t v203;
  uint64_t v204;
  const void *v205;
  size_t v206;
  std::string::size_type v207;
  std::string *v208;
  uint64_t v209;
  uint64_t v210;
  const void *v211;
  size_t v212;
  std::string::size_type v213;
  std::string *v214;
  uint64_t v215;
  uint64_t v216;
  const void *v217;
  uint64_t *v218;
  const void *v219;
  const void *v220;
  size_t v221;
  std::string::size_type v222;
  std::string *v223;
  uint64_t v224;
  uint64_t v225;
  const void *v226;
  uint64_t *v227;
  const void *v228;
  const void *v229;
  size_t v230;
  std::string::size_type v231;
  std::string *v232;
  uint64_t v233;
  uint64_t v234;
  const void *v235;
  uint64_t *v236;
  const void *v237;
  const void *v238;
  size_t v239;
  std::string::size_type v240;
  std::string *v241;
  uint64_t v242;
  uint64_t v243;
  const void *v244;
  uint64_t *v245;
  const void *v246;
  const void *v247;
  size_t v248;
  std::string::size_type v249;
  std::string *v250;
  uint64_t v251;
  uint64_t v252;
  const void *v253;
  size_t v254;
  std::string::size_type v255;
  std::string *v256;
  uint64_t v257;
  uint64_t v258;
  const void *v259;
  uint64_t *v260;
  const void *v261;
  const void *v262;
  size_t v263;
  std::string::size_type v264;
  std::string *v265;
  uint64_t v266;
  uint64_t v267;
  const void *v268;
  uint64_t *v269;
  const void *v270;
  const void *v271;
  size_t v272;
  std::string::size_type v273;
  std::string *v274;
  uint64_t v275;
  uint64_t v276;
  const void *v277;
  uint64_t *v278;
  const void *v279;
  unint64_t v281;
  const __CFString *v282;
  CFStringRef v283;
  void *v284;
  void *v285;
  void *exception;
  void *v287;
  void *v288;
  uint64_t v289;
  const __CFAllocator *v290;
  const void *v291;
  __CFDictionary *v292;
  uint64_t *v293;
  __CFDictionary *v294;
  CFTypeRef cf[2];
  unint64_t v296;
  std::string __p;
  void *value[2];
  CFStringRef *v299;
  CFStringRef v300;
  std::string __dst;

  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v294 = Mutable;
  v4 = (const void *)language_modeling::v1::kLocaleIdentifierOptionKey;
  v5 = strlen((const char *)language_modeling::v1::kLocaleIdentifierOptionKey);
  if (v5 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_483;
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    p_dst = (std::string *)operator new(v8 + 1);
    __dst.__r_.__value_.__l.__size_ = v6;
    __dst.__r_.__value_.__r.__words[2] = v9 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_8;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v5;
  p_dst = &__dst;
  if (v5)
LABEL_8:
    memmove(p_dst, v4, v6);
  p_dst->__r_.__value_.__s.__data_[v6] = 0;
  v10 = sub_19C29A674(a1, (const void **)&__dst.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  v293 = (uint64_t *)(a1 + 8);
  if ((uint64_t *)(a1 + 8) != v10)
  {
    if (*((_DWORD *)v10 + 20) != 1)
      sub_19C2F5A74();
    if (*((char *)v10 + 79) < 0)
      sub_19C2B5238(&__dst, (void *)v10[7], v10[8]);
    else
      __dst = *(std::string *)(v10 + 7);
    v11 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    {
      v13 = (std::string *)__dst.__r_.__value_.__r.__words[0];
      if (__dst.__r_.__value_.__l.__size_ >= 3)
        size = 3;
      else
        size = __dst.__r_.__value_.__l.__size_;
    }
    else
    {
      if (HIBYTE(__dst.__r_.__value_.__r.__words[2]) >= 3u)
        size = 3;
      else
        size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
      v13 = &__dst;
    }
    v14 = memcmp(v13, "ars", size);
    if (size >= 3 && !v14)
    {
      std::string::replace(&__dst, 0, 3uLL, "ar", 2uLL);
      v11 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    }
    v15 = (const void *)kLMLanguageModelLocaleKey;
    if ((v11 & 0x80u) == 0)
      v16 = &__dst;
    else
      v16 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    if ((v11 & 0x80u) == 0)
      v17 = v11;
    else
      v17 = __dst.__r_.__value_.__l.__size_;
    v18 = CFStringCreateWithBytes(0, (const UInt8 *)v16, v17, 0x8000100u, 0);
    value[0] = (void *)v18;
    if (!v18)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1A1AD3154](exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
    }
    CFDictionaryAddValue(Mutable, v15, v18);
    CFRelease(v18);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
  }
  v19 = (const void *)language_modeling::v1::kLanguageLocalesOptionKey;
  v20 = strlen((const char *)language_modeling::v1::kLanguageLocalesOptionKey);
  if (v20 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_483;
  v21 = (const void *)v20;
  if (v20 >= 0x17)
  {
    v23 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v20 | 7) != 0x17)
      v23 = v20 | 7;
    v24 = v23 + 1;
    v22 = operator new(v23 + 1);
    cf[1] = v21;
    v296 = v24 | 0x8000000000000000;
    cf[0] = v22;
  }
  else
  {
    HIBYTE(v296) = v20;
    v22 = cf;
    if (!v20)
      goto LABEL_44;
  }
  memmove(v22, v19, (size_t)v21);
LABEL_44:
  *((_BYTE *)v21 + (_QWORD)v22) = 0;
  v25 = kLMLanguageLocalesKey;
  v26 = sub_19C29A674(a1, cf);
  if (v293 == v26)
    goto LABEL_142;
  if (*((_DWORD *)v26 + 20) != 1)
    sub_19C2F5A74();
  if (*((char *)v26 + 79) < 0)
  {
    sub_19C2B5238(value, (void *)v26[7], v26[8]);
  }
  else
  {
    *(_OWORD *)value = *(_OWORD *)(v26 + 7);
    v299 = (CFStringRef *)v26[9];
  }
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 1;
  LOWORD(__p.__r_.__value_.__l.__data_) = 44;
  sub_19C34F0F8((uint64_t)&__dst, (__int128 *)value, (unsigned __int8 *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v291 = (const void *)v25;
  v292 = Mutable;
  v290 = v2;
  if (SHIBYTE(v299) < 0)
    operator delete(value[0]);
  value[0] = 0;
  value[1] = 0;
  v299 = 0;
  v27 = __dst.__r_.__value_.__l.__size_;
  v28 = __dst.__r_.__value_.__r.__words[0];
  if (__dst.__r_.__value_.__r.__words[0] == __dst.__r_.__value_.__l.__size_)
  {
    v30 = 0;
    v60 = 0;
    v65 = 0;
    v66 = 0;
    v62 = 1;
    v64 = v291;
    v63 = v292;
    goto LABEL_124;
  }
  v289 = a1;
  v29 = 0;
  v30 = 0;
  do
  {
    if (*(char *)(v28 + 23) < 0)
    {
      sub_19C2B5238(&__p, *(void **)v28, *(_QWORD *)(v28 + 8));
    }
    else
    {
      v31 = *(_OWORD *)v28;
      __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v28 + 16);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v31;
    }
    v32 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__l.__size_ >= 3)
        v33 = 3;
      else
        v33 = __p.__r_.__value_.__l.__size_;
    }
    else
    {
      if (HIBYTE(__p.__r_.__value_.__r.__words[2]) >= 3u)
        v33 = 3;
      else
        v33 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      p_p = &__p;
    }
    v35 = memcmp(p_p, "ars", v33);
    if (v33 >= 3 && v35 == 0)
    {
      std::string::replace(&__p, 0, 3uLL, "ar", 2uLL);
      v32 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    if ((v32 & 0x80u) == 0)
      v37 = &__p;
    else
      v37 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((v32 & 0x80u) == 0)
      v38 = v32;
    else
      v38 = __p.__r_.__value_.__l.__size_;
    v39 = CFStringCreateWithBytes(0, (const UInt8 *)v37, v38, 0x8000100u, 0);
    v40 = v39;
    v300 = v39;
    if (!v39)
    {
      v284 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1A1AD3154](v284, "Could not construct");
      __cxa_throw(v284, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
    }
    if (v30 < v299)
    {
      *v30++ = v39;
      value[1] = v30;
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_56;
LABEL_105:
      operator delete(__p.__r_.__value_.__l.__data_);
      goto LABEL_56;
    }
    v41 = ((char *)v30 - v29) >> 3;
    v42 = v41 + 1;
    if ((unint64_t)(v41 + 1) >> 61)
      sub_19C2A18E8();
    v43 = (char *)v299 - v29;
    if (((char *)v299 - v29) >> 2 > v42)
      v42 = v43 >> 2;
    if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF8)
      v44 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v44 = v42;
    if (v44)
    {
      if (v44 >> 61)
        sub_19C2A143C();
      v45 = v44;
      v46 = (char *)operator new(8 * v44);
      v44 = v45;
    }
    else
    {
      v46 = 0;
    }
    v47 = (CFStringRef *)&v46[8 * v41];
    *v47 = v40;
    v48 = v47 + 1;
    v300 = 0;
    if (v30 != (CFStringRef *)v29)
    {
      v49 = (char *)v30 - v29 - 8;
      if (v49 < 0x78
        || &v46[(char *)v30 - v29 - (v49 & 0xFFFFFFFFFFFFFFF8) - 8] < (char *)v30
        && (CFStringRef *)((char *)v30 - (v49 & 0xFFFFFFFFFFFFFFF8) - 8) < v47)
      {
        goto LABEL_96;
      }
      v55 = (v49 >> 3) + 1;
      v47 -= v55 & 0x3FFFFFFFFFFFFFFCLL;
      v56 = v30 - 4;
      v57 = &v46[8 * v41 - 16];
      v58 = v55 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v59 = *((_OWORD *)v56 + 1);
        *((_OWORD *)v57 - 1) = *(_OWORD *)v56;
        *(_OWORD *)v57 = v59;
        *(_OWORD *)v56 = 0uLL;
        *((_OWORD *)v56 + 1) = 0uLL;
        v56 -= 4;
        v57 -= 32;
        v58 -= 4;
      }
      while (v58);
      if (v55 != (v55 & 0x3FFFFFFFFFFFFFFCLL))
      {
        v30 -= v55 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
LABEL_96:
          v50 = *--v30;
          *--v47 = v50;
          *v30 = 0;
        }
        while (v30 != (CFStringRef *)v29);
      }
    }
    v52 = (char *)value[0];
    v51 = (char *)value[1];
    value[0] = v47;
    value[1] = v48;
    v299 = (CFStringRef *)&v46[8 * v44];
    while (v51 != v52)
    {
      v54 = (const void *)*((_QWORD *)v51 - 1);
      v51 -= 8;
      v53 = v54;
      if (v54)
        CFRelease(v53);
    }
    if (v52)
      operator delete(v52);
    value[1] = v48;
    if (v300)
    {
      CFRelease(v300);
      v29 = (char *)v47;
      v30 = (CFStringRef *)v48;
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_56;
      goto LABEL_105;
    }
    v29 = (char *)v47;
    v30 = (CFStringRef *)v48;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_105;
LABEL_56:
    v28 += 24;
  }
  while (v28 != v27);
  v60 = (CFStringRef *)value[0];
  v61 = (char *)v30 - (char *)value[0];
  v62 = v30 == value[0];
  v64 = v291;
  v63 = v292;
  if (v30 == value[0])
  {
    v65 = 0;
    v66 = 0;
    a1 = v289;
  }
  else
  {
    a1 = v289;
    if ((v61 & 0x8000000000000000) != 0)
      sub_19C2A18E8();
    v65 = (char *)operator new((char *)v30 - (char *)value[0]);
    bzero(v65, v61);
    v66 = &v65[v61];
    v67 = v65;
    v68 = v60;
    if (v61 - 8 < 0x18 || (v67 = v65, v68 = v60, (unint64_t)(v65 - (char *)v60) < 0x20))
    {
      do
      {
LABEL_120:
        v75 = (uint64_t)*v68++;
        *(_QWORD *)v67 = v75;
        v67 += 8;
      }
      while (v68 != v30);
    }
    else
    {
      v69 = 0;
      v70 = ((v61 - 8) >> 3) + 1;
      v71 = v70 & 0x3FFFFFFFFFFFFFFCLL;
      v67 = &v65[v71 * 8];
      v72 = v70 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v73 = &v65[v69 * 8];
        v74 = *(_OWORD *)&v60[v69 + 2];
        *(_OWORD *)v73 = *(_OWORD *)&v60[v69];
        *((_OWORD *)v73 + 1) = v74;
        v69 += 4;
        v72 -= 4;
      }
      while (v72);
      if (v70 != (v70 & 0x3FFFFFFFFFFFFFFCLL))
      {
        v68 = &v60[v71];
        goto LABEL_120;
      }
    }
  }
LABEL_124:
  v76 = CFArrayCreate(0, (const void **)v65, (v66 - v65) >> 3, MEMORY[0x1E0C9B378]);
  if (!v76)
  {
    v288 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD3154](v288, "Could not construct");
    __cxa_throw(v288, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  if (v65)
    operator delete(v65);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v76;
  CFDictionarySetValue(v63, v64, v76);
  CFRelease(v76);
  if (v60)
  {
    if (!v62)
    {
      do
      {
        v81 = *--v30;
        v80 = v81;
        if (v81)
          CFRelease(v80);
      }
      while (v30 != v60);
    }
    operator delete(v60);
  }
  v77 = __dst.__r_.__value_.__r.__words[0];
  if (__dst.__r_.__value_.__r.__words[0])
  {
    v78 = __dst.__r_.__value_.__l.__size_;
    v79 = (void *)__dst.__r_.__value_.__r.__words[0];
    if (__dst.__r_.__value_.__l.__size_ != __dst.__r_.__value_.__r.__words[0])
    {
      do
      {
        if (*(char *)(v78 - 1) < 0)
          operator delete(*(void **)(v78 - 24));
        v78 -= 24;
      }
      while (v78 != v77);
      v79 = (void *)__dst.__r_.__value_.__r.__words[0];
    }
    __dst.__r_.__value_.__l.__size_ = v77;
    operator delete(v79);
  }
  v2 = v290;
LABEL_142:
  if (SHIBYTE(v296) < 0)
    operator delete((void *)cf[0]);
  v82 = (const void *)language_modeling::v1::kEnableMultilingualDynamicOptionKey;
  v83 = strlen((const char *)language_modeling::v1::kEnableMultilingualDynamicOptionKey);
  if (v83 > 0x7FFFFFFFFFFFFFF7)
    sub_19C2A1A54();
  v84 = v83;
  if (v83 >= 0x17)
  {
    v86 = (v83 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v83 | 7) != 0x17)
      v86 = v83 | 7;
    v87 = v86 + 1;
    v85 = (std::string *)operator new(v86 + 1);
    __dst.__r_.__value_.__l.__size_ = v84;
    __dst.__r_.__value_.__r.__words[2] = v87 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v85;
    goto LABEL_151;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v83;
  v85 = &__dst;
  if (v83)
LABEL_151:
    memmove(v85, v82, v84);
  v85->__r_.__value_.__s.__data_[v84] = 0;
  sub_19C4239DC(a1, (const void **)&__dst.__r_.__value_.__l.__data_, v294, (const void *)kLMEnableMultilingualDynamicKey);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  v88 = (const void *)language_modeling::v1::kMultilingualDynamicSeparateLexiconPerLocaleOptionKey;
  v89 = strlen((const char *)language_modeling::v1::kMultilingualDynamicSeparateLexiconPerLocaleOptionKey);
  if (v89 > 0x7FFFFFFFFFFFFFF7)
    sub_19C2A1A54();
  v90 = v89;
  if (v89 >= 0x17)
  {
    v92 = (v89 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v89 | 7) != 0x17)
      v92 = v89 | 7;
    v93 = v92 + 1;
    v91 = (std::string *)operator new(v92 + 1);
    __dst.__r_.__value_.__l.__size_ = v90;
    __dst.__r_.__value_.__r.__words[2] = v93 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v91;
    goto LABEL_161;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v89;
  v91 = &__dst;
  if (v89)
LABEL_161:
    memmove(v91, v88, v90);
  v91->__r_.__value_.__s.__data_[v90] = 0;
  sub_19C4239DC(a1, (const void **)&__dst.__r_.__value_.__l.__data_, v294, (const void *)kLMMultilingualDynamicSeparateLexiconPerLocaleKey);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  v94 = (const void *)language_modeling::v1::kIsMultilingualModelOptionKey;
  v95 = strlen((const char *)language_modeling::v1::kIsMultilingualModelOptionKey);
  if (v95 > 0x7FFFFFFFFFFFFFF7)
    sub_19C2A1A54();
  v96 = v95;
  if (v95 >= 0x17)
  {
    v98 = (v95 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v95 | 7) != 0x17)
      v98 = v95 | 7;
    v99 = v98 + 1;
    v97 = (std::string *)operator new(v98 + 1);
    __dst.__r_.__value_.__l.__size_ = v96;
    __dst.__r_.__value_.__r.__words[2] = v99 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v97;
    goto LABEL_171;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v95;
  v97 = &__dst;
  if (v95)
LABEL_171:
    memmove(v97, v94, v96);
  v97->__r_.__value_.__s.__data_[v96] = 0;
  sub_19C4239DC(a1, (const void **)&__dst.__r_.__value_.__l.__data_, v294, (const void *)kLMLanguageModelIsMultilingualModelKey);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  v100 = (const void *)language_modeling::v1::kIsSiriModelOptionKey;
  v101 = strlen((const char *)language_modeling::v1::kIsSiriModelOptionKey);
  if (v101 > 0x7FFFFFFFFFFFFFF7)
    sub_19C2A1A54();
  v102 = v101;
  if (v101 >= 0x17)
  {
    v104 = (v101 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v101 | 7) != 0x17)
      v104 = v101 | 7;
    v105 = v104 + 1;
    v103 = (std::string *)operator new(v104 + 1);
    __dst.__r_.__value_.__l.__size_ = v102;
    __dst.__r_.__value_.__r.__words[2] = v105 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v103;
    goto LABEL_181;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v101;
  v103 = &__dst;
  if (v101)
LABEL_181:
    memmove(v103, v100, v102);
  v103->__r_.__value_.__s.__data_[v102] = 0;
  sub_19C4239DC(a1, (const void **)&__dst.__r_.__value_.__l.__data_, v294, (const void *)kLMLanguageModelIsSiriModelKey);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  v106 = (const void *)language_modeling::v1::kEnableAdaptationOptionKey;
  v107 = strlen((const char *)language_modeling::v1::kEnableAdaptationOptionKey);
  if (v107 > 0x7FFFFFFFFFFFFFF7)
    sub_19C2A1A54();
  v108 = v107;
  if (v107 >= 0x17)
  {
    v110 = (v107 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v107 | 7) != 0x17)
      v110 = v107 | 7;
    v111 = v110 + 1;
    v109 = (std::string *)operator new(v110 + 1);
    __dst.__r_.__value_.__l.__size_ = v108;
    __dst.__r_.__value_.__r.__words[2] = v111 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v109;
    goto LABEL_191;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v107;
  v109 = &__dst;
  if (v107)
LABEL_191:
    memmove(v109, v106, v108);
  v109->__r_.__value_.__s.__data_[v108] = 0;
  sub_19C4239DC(a1, (const void **)&__dst.__r_.__value_.__l.__data_, v294, (const void *)kLMLanguageModelAdaptationEnabledKey);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  v112 = (const void *)language_modeling::v1::kEnableNeuralLanguageModelOptionKey;
  v113 = strlen((const char *)language_modeling::v1::kEnableNeuralLanguageModelOptionKey);
  if (v113 > 0x7FFFFFFFFFFFFFF7)
    sub_19C2A1A54();
  v114 = v113;
  if (v113 >= 0x17)
  {
    v116 = (v113 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v113 | 7) != 0x17)
      v116 = v113 | 7;
    v117 = v116 + 1;
    v115 = (std::string *)operator new(v116 + 1);
    __dst.__r_.__value_.__l.__size_ = v114;
    __dst.__r_.__value_.__r.__words[2] = v117 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v115;
    goto LABEL_201;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v113;
  v115 = &__dst;
  if (v113)
LABEL_201:
    memmove(v115, v112, v114);
  v115->__r_.__value_.__s.__data_[v114] = 0;
  sub_19C4239DC(a1, (const void **)&__dst.__r_.__value_.__l.__data_, v294, (const void *)kLMLanguageModelUseMontrealKey);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  v118 = (const void *)language_modeling::v1::kDynamicLexiconNameOptionKey;
  v119 = strlen((const char *)language_modeling::v1::kDynamicLexiconNameOptionKey);
  if (v119 > 0x7FFFFFFFFFFFFFF7)
    sub_19C2A1A54();
  v120 = v119;
  if (v119 >= 0x17)
  {
    v122 = (v119 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v119 | 7) != 0x17)
      v122 = v119 | 7;
    v123 = v122 + 1;
    v121 = (std::string *)operator new(v122 + 1);
    __dst.__r_.__value_.__l.__size_ = v120;
    __dst.__r_.__value_.__r.__words[2] = v123 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v121;
  }
  else
  {
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v119;
    v121 = &__dst;
    if (!v119)
      goto LABEL_212;
  }
  memmove(v121, v118, v120);
LABEL_212:
  v121->__r_.__value_.__s.__data_[v120] = 0;
  v124 = (const void *)kLMLanguageModelDynamicLexiconNameKey;
  v125 = sub_19C29A674(a1, (const void **)&__dst.__r_.__value_.__l.__data_);
  if (v293 != v125)
  {
    sub_19C423A84((CFStringRef *)value, v125 + 7);
    v126 = value[0];
    CFDictionaryAddValue(v294, v124, value[0]);
    if (v126)
      CFRelease(v126);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  v127 = (const void *)language_modeling::v1::kMultilingualDynamicLexiconNameOptionKey;
  v128 = strlen((const char *)language_modeling::v1::kMultilingualDynamicLexiconNameOptionKey);
  if (v128 > 0x7FFFFFFFFFFFFFF7)
    sub_19C2A1A54();
  v129 = v128;
  if (v128 >= 0x17)
  {
    v131 = (v128 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v128 | 7) != 0x17)
      v131 = v128 | 7;
    v132 = v131 + 1;
    v130 = (std::string *)operator new(v131 + 1);
    __dst.__r_.__value_.__l.__size_ = v129;
    __dst.__r_.__value_.__r.__words[2] = v132 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v130;
  }
  else
  {
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v128;
    v130 = &__dst;
    if (!v128)
      goto LABEL_225;
  }
  memmove(v130, v127, v129);
LABEL_225:
  v130->__r_.__value_.__s.__data_[v129] = 0;
  v133 = (const void *)kLMLanguageModelMultilingualDynamicLexiconNameKey;
  v134 = sub_19C29A674(a1, (const void **)&__dst.__r_.__value_.__l.__data_);
  if (v293 != v134)
  {
    sub_19C423A84((CFStringRef *)value, v134 + 7);
    v135 = value[0];
    CFDictionaryAddValue(v294, v133, value[0]);
    if (v135)
      CFRelease(v135);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  v136 = (const void *)language_modeling::v1::kCustomResourceDirectoryPathOptionKey;
  v137 = strlen((const char *)language_modeling::v1::kCustomResourceDirectoryPathOptionKey);
  if (v137 > 0x7FFFFFFFFFFFFFF7)
LABEL_483:
    sub_19C2A1A54();
  v138 = v137;
  if (v137 >= 0x17)
  {
    v140 = (v137 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v137 | 7) != 0x17)
      v140 = v137 | 7;
    v141 = v140 + 1;
    v139 = (std::string *)operator new(v140 + 1);
    __dst.__r_.__value_.__l.__size_ = v138;
    __dst.__r_.__value_.__r.__words[2] = v141 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v139;
    goto LABEL_237;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v137;
  v139 = &__dst;
  if (v137)
LABEL_237:
    memmove(v139, v136, v138);
  v139->__r_.__value_.__s.__data_[v138] = 0;
  v142 = sub_19C29A674(a1, (const void **)&__dst.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if (v293 == v142)
    goto LABEL_268;
  sub_19C423A84((CFStringRef *)value, v142 + 7);
  v143 = value[0];
  ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings(v2, (CFStringRef)value[0], CFSTR(","));
  sub_19C31D164(&__p, ArrayBySeparatingStrings);
  memset(&__dst, 0, sizeof(__dst));
  v145 = (const __CFArray *)__p.__r_.__value_.__r.__words[0];
  if (!__p.__r_.__value_.__r.__words[0])
    goto LABEL_257;
  Count = CFArrayGetCount((CFArrayRef)__p.__r_.__value_.__l.__data_);
  v147 = Count;
  v148 = __p.__r_.__value_.__r.__words[0];
  if (!__p.__r_.__value_.__r.__words[0])
  {
    v149 = 0;
    if (!Count)
      goto LABEL_257;
LABEL_244:
    if (v145 == (const __CFArray *)v148)
    {
      v150 = 0;
      v151 = 0;
      while (1)
      {
        if (v149 == v151)
          goto LABEL_258;
        sub_19C3FC8C4(cf, v145, v151);
        v152 = (const __CFString *)MEMORY[0x1A1AD2D94](0, cf[0], 0, 1, 0);
        v153 = v152;
        v300 = v152;
        if (!v152)
          goto LABEL_481;
        if ((unint64_t)v150 >= __dst.__r_.__value_.__r.__words[2])
        {
          v150 = (char *)sub_19C416764((uint64_t)&__dst, v152);
          __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v150;
        }
        else
        {
          CFRetain(v152);
          *(_QWORD *)v150 = v153;
          v150 += 8;
          v153 = v300;
          __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v150;
          if (!v300)
            goto LABEL_254;
        }
        CFRelease(v153);
LABEL_254:
        if (cf[0])
          CFRelease(cf[0]);
        if (v147 == ++v151)
          goto LABEL_258;
      }
    }
    v150 = 0;
    v281 = 0;
    while (1)
    {
      sub_19C3FC8C4(cf, v145, v281);
      v282 = (const __CFString *)MEMORY[0x1A1AD2D94](0, cf[0], 0, 1, 0);
      v283 = v282;
      v300 = v282;
      if (!v282)
      {
LABEL_481:
        v285 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1A1AD3154](v285, "Could not construct");
        __cxa_throw(v285, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
      }
      if ((unint64_t)v150 >= __dst.__r_.__value_.__r.__words[2])
      {
        v150 = (char *)sub_19C416764((uint64_t)&__dst, v282);
        __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v150;
      }
      else
      {
        CFRetain(v282);
        *(_QWORD *)v150 = v283;
        v150 += 8;
        v283 = v300;
        __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v150;
        if (!v300)
          goto LABEL_477;
      }
      CFRelease(v283);
LABEL_477:
      if (cf[0])
        CFRelease(cf[0]);
      if (v147 == ++v281)
        goto LABEL_258;
    }
  }
  v149 = CFArrayGetCount((CFArrayRef)__p.__r_.__value_.__l.__data_);
  if (v147)
    goto LABEL_244;
LABEL_257:
  v150 = 0;
LABEL_258:
  v154 = (const void *)kLMLanguageModelCustomResourceDirectoryKey;
  v155 = sub_19C29D8E8(__dst.__r_.__value_.__l.__data_, v150);
  cf[0] = v155;
  CFDictionarySetValue(v294, v154, v155);
  CFRelease(v155);
  v156 = (void *)__dst.__r_.__value_.__r.__words[0];
  if (__dst.__r_.__value_.__r.__words[0])
  {
    for (i = __dst.__r_.__value_.__l.__size_; (void *)i != v156; i -= 8)
    {
      v159 = *(const void **)(i - 8);
      v158 = v159;
      if (v159)
        CFRelease(v158);
    }
    operator delete(v156);
  }
  if (__p.__r_.__value_.__r.__words[0])
    CFRelease(__p.__r_.__value_.__l.__data_);
  if (v143)
    CFRelease(v143);
LABEL_268:
  v160 = (const void *)language_modeling::v1::kAddSystemResourcesOptionKey;
  v161 = strlen((const char *)language_modeling::v1::kAddSystemResourcesOptionKey);
  if (v161 > 0x7FFFFFFFFFFFFFF7)
    sub_19C2A1A54();
  v162 = v161;
  if (v161 >= 0x17)
  {
    v164 = (v161 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v161 | 7) != 0x17)
      v164 = v161 | 7;
    v165 = v164 + 1;
    v163 = (std::string *)operator new(v164 + 1);
    __dst.__r_.__value_.__l.__size_ = v162;
    __dst.__r_.__value_.__r.__words[2] = v165 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v163;
    goto LABEL_275;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v161;
  v163 = &__dst;
  if (v161)
LABEL_275:
    memmove(v163, v160, v162);
  v163->__r_.__value_.__s.__data_[v162] = 0;
  sub_19C4239DC(a1, (const void **)&__dst.__r_.__value_.__l.__data_, v294, (const void *)kLMLanguageModelAddSystemToCustomResourcesKey);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  v166 = (const void *)language_modeling::v1::kIgnoreSystemLanguageModelsOptionKey;
  v167 = strlen((const char *)language_modeling::v1::kIgnoreSystemLanguageModelsOptionKey);
  if (v167 > 0x7FFFFFFFFFFFFFF7)
    sub_19C2A1A54();
  v168 = v167;
  if (v167 >= 0x17)
  {
    v170 = (v167 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v167 | 7) != 0x17)
      v170 = v167 | 7;
    v171 = v170 + 1;
    v169 = (std::string *)operator new(v170 + 1);
    __dst.__r_.__value_.__l.__size_ = v168;
    __dst.__r_.__value_.__r.__words[2] = v171 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v169;
    goto LABEL_285;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v167;
  v169 = &__dst;
  if (v167)
LABEL_285:
    memmove(v169, v166, v168);
  v169->__r_.__value_.__s.__data_[v168] = 0;
  sub_19C4239DC(a1, (const void **)&__dst.__r_.__value_.__l.__data_, v294, (const void *)kLMLanguageModelIgnoreSystemLanguageModelsKey);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  v172 = (const void *)language_modeling::v1::kCustomDynamicResourceDirectoryPathOptionKey;
  v173 = strlen((const char *)language_modeling::v1::kCustomDynamicResourceDirectoryPathOptionKey);
  if (v173 > 0x7FFFFFFFFFFFFFF7)
    sub_19C2A1A54();
  v174 = v173;
  if (v173 >= 0x17)
  {
    v176 = (v173 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v173 | 7) != 0x17)
      v176 = v173 | 7;
    v177 = v176 + 1;
    v175 = (std::string *)operator new(v176 + 1);
    __dst.__r_.__value_.__l.__size_ = v174;
    __dst.__r_.__value_.__r.__words[2] = v177 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v175;
    goto LABEL_295;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v173;
  v175 = &__dst;
  if (v173)
LABEL_295:
    memmove(v175, v172, v174);
  v175->__r_.__value_.__s.__data_[v174] = 0;
  v178 = (const void *)kLMLanguageModelCustomDynamicResourceDirectoryKey;
  v179 = sub_19C29A674(a1, (const void **)&__dst.__r_.__value_.__l.__data_);
  if (v293 != v179)
  {
    if (*((_DWORD *)v179 + 20) != 1)
      sub_19C2F5A74();
    v182 = v179[7];
    v180 = v179 + 7;
    v181 = v182;
    v183 = *((char *)v180 + 23);
    if (v183 >= 0)
      v184 = v180;
    else
      v184 = (uint64_t *)v181;
    if (v183 >= 0)
      v185 = *((unsigned __int8 *)v180 + 23);
    else
      v185 = v180[1];
    v186 = (void *)MEMORY[0x1A1AD2D70](0, v184, v185, 1, 0);
    value[0] = v186;
    if (!v186)
    {
      v287 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1A1AD3154](v287, "Could not construct");
      __cxa_throw(v287, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
    }
    CFDictionaryAddValue(v294, v178, v186);
    CFRelease(v186);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  v187 = (const void *)language_modeling::v1::kPreheatFSTOptionKey;
  v188 = strlen((const char *)language_modeling::v1::kPreheatFSTOptionKey);
  if (v188 > 0x7FFFFFFFFFFFFFF7)
    sub_19C2A1A54();
  v189 = v188;
  if (v188 >= 0x17)
  {
    v191 = (v188 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v188 | 7) != 0x17)
      v191 = v188 | 7;
    v192 = v191 + 1;
    v190 = (std::string *)operator new(v191 + 1);
    __dst.__r_.__value_.__l.__size_ = v189;
    __dst.__r_.__value_.__r.__words[2] = v192 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v190;
    goto LABEL_315;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v188;
  v190 = &__dst;
  if (v188)
LABEL_315:
    memmove(v190, v187, v189);
  v190->__r_.__value_.__s.__data_[v189] = 0;
  sub_19C4239DC(a1, (const void **)&__dst.__r_.__value_.__l.__data_, v294, (const void *)kLMLanguageModelGenerateFstPrimingTokenKey);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  v193 = (const void *)language_modeling::v1::kExcludeMobileAssetsKey;
  v194 = strlen((const char *)language_modeling::v1::kExcludeMobileAssetsKey);
  if (v194 > 0x7FFFFFFFFFFFFFF7)
    sub_19C2A1A54();
  v195 = v194;
  if (v194 >= 0x17)
  {
    v197 = (v194 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v194 | 7) != 0x17)
      v197 = v194 | 7;
    v198 = v197 + 1;
    v196 = (std::string *)operator new(v197 + 1);
    __dst.__r_.__value_.__l.__size_ = v195;
    __dst.__r_.__value_.__r.__words[2] = v198 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v196;
    goto LABEL_325;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v194;
  v196 = &__dst;
  if (v194)
LABEL_325:
    memmove(v196, v193, v195);
  v196->__r_.__value_.__s.__data_[v195] = 0;
  sub_19C4239DC(a1, (const void **)&__dst.__r_.__value_.__l.__data_, v294, (const void *)kLMLanguageModelShouldExcludeMobileAssetsKey);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  v199 = (const void *)language_modeling::v1::kDisableDynamicLanguageModelsKey;
  v200 = strlen((const char *)language_modeling::v1::kDisableDynamicLanguageModelsKey);
  if (v200 > 0x7FFFFFFFFFFFFFF7)
    sub_19C2A1A54();
  v201 = v200;
  if (v200 >= 0x17)
  {
    v203 = (v200 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v200 | 7) != 0x17)
      v203 = v200 | 7;
    v204 = v203 + 1;
    v202 = (std::string *)operator new(v203 + 1);
    __dst.__r_.__value_.__l.__size_ = v201;
    __dst.__r_.__value_.__r.__words[2] = v204 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v202;
    goto LABEL_335;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v200;
  v202 = &__dst;
  if (v200)
LABEL_335:
    memmove(v202, v199, v201);
  v202->__r_.__value_.__s.__data_[v201] = 0;
  sub_19C4239DC(a1, (const void **)&__dst.__r_.__value_.__l.__data_, v294, (const void *)kLMLanguageModelDisableDynamicLanguageModelsKey);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  v205 = (const void *)language_modeling::v1::kCacheStaticPredictionsForEmptyContextKey;
  v206 = strlen((const char *)language_modeling::v1::kCacheStaticPredictionsForEmptyContextKey);
  if (v206 > 0x7FFFFFFFFFFFFFF7)
    sub_19C2A1A54();
  v207 = v206;
  if (v206 >= 0x17)
  {
    v209 = (v206 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v206 | 7) != 0x17)
      v209 = v206 | 7;
    v210 = v209 + 1;
    v208 = (std::string *)operator new(v209 + 1);
    __dst.__r_.__value_.__l.__size_ = v207;
    __dst.__r_.__value_.__r.__words[2] = v210 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v208;
    goto LABEL_345;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v206;
  v208 = &__dst;
  if (v206)
LABEL_345:
    memmove(v208, v205, v207);
  v208->__r_.__value_.__s.__data_[v207] = 0;
  sub_19C29471C((CFStringRef *)value, (char *)language_modeling::v1::kCacheStaticPredictionsForEmptyContextKey);
  sub_19C4239DC(a1, (const void **)&__dst.__r_.__value_.__l.__data_, v294, value[0]);
  if (value[0])
    CFRelease(value[0]);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  v211 = (const void *)language_modeling::v1::kLanguageModelForCompletionsAndPredictionsKey;
  v212 = strlen((const char *)language_modeling::v1::kLanguageModelForCompletionsAndPredictionsKey);
  if (v212 > 0x7FFFFFFFFFFFFFF7)
    sub_19C2A1A54();
  v213 = v212;
  if (v212 >= 0x17)
  {
    v215 = (v212 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v212 | 7) != 0x17)
      v215 = v212 | 7;
    v216 = v215 + 1;
    v214 = (std::string *)operator new(v215 + 1);
    __dst.__r_.__value_.__l.__size_ = v213;
    __dst.__r_.__value_.__r.__words[2] = v216 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v214;
    goto LABEL_357;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v212;
  v214 = &__dst;
  if (v212)
LABEL_357:
    memmove(v214, v211, v213);
  v214->__r_.__value_.__s.__data_[v213] = 0;
  sub_19C29471C((CFStringRef *)&__p, (char *)language_modeling::v1::kLanguageModelForCompletionsAndPredictionsKey);
  v217 = (const void *)__p.__r_.__value_.__r.__words[0];
  v218 = sub_19C29A674(a1, (const void **)&__dst.__r_.__value_.__l.__data_);
  if (v293 != v218)
  {
    sub_19C423A84((CFStringRef *)value, v218 + 7);
    v219 = value[0];
    CFDictionaryAddValue(v294, v217, value[0]);
    if (v219)
      CFRelease(v219);
    v217 = (const void *)__p.__r_.__value_.__r.__words[0];
  }
  if (v217)
    CFRelease(v217);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  v220 = (const void *)language_modeling::v1::kLanguageModelForConditionalProbabilityKey;
  v221 = strlen((const char *)language_modeling::v1::kLanguageModelForConditionalProbabilityKey);
  if (v221 > 0x7FFFFFFFFFFFFFF7)
    sub_19C2A1A54();
  v222 = v221;
  if (v221 >= 0x17)
  {
    v224 = (v221 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v221 | 7) != 0x17)
      v224 = v221 | 7;
    v225 = v224 + 1;
    v223 = (std::string *)operator new(v224 + 1);
    __dst.__r_.__value_.__l.__size_ = v222;
    __dst.__r_.__value_.__r.__words[2] = v225 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v223;
    goto LABEL_373;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v221;
  v223 = &__dst;
  if (v221)
LABEL_373:
    memmove(v223, v220, v222);
  v223->__r_.__value_.__s.__data_[v222] = 0;
  sub_19C29471C((CFStringRef *)&__p, (char *)language_modeling::v1::kLanguageModelForConditionalProbabilityKey);
  v226 = (const void *)__p.__r_.__value_.__r.__words[0];
  v227 = sub_19C29A674(a1, (const void **)&__dst.__r_.__value_.__l.__data_);
  if (v293 != v227)
  {
    sub_19C423A84((CFStringRef *)value, v227 + 7);
    v228 = value[0];
    CFDictionaryAddValue(v294, v226, value[0]);
    if (v228)
      CFRelease(v228);
    v226 = (const void *)__p.__r_.__value_.__r.__words[0];
  }
  if (v226)
    CFRelease(v226);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  v229 = (const void *)language_modeling::v1::kLanguageModelForConditionalProbabilityUserSettingKey;
  v230 = strlen((const char *)language_modeling::v1::kLanguageModelForConditionalProbabilityUserSettingKey);
  if (v230 > 0x7FFFFFFFFFFFFFF7)
    sub_19C2A1A54();
  v231 = v230;
  if (v230 >= 0x17)
  {
    v233 = (v230 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v230 | 7) != 0x17)
      v233 = v230 | 7;
    v234 = v233 + 1;
    v232 = (std::string *)operator new(v233 + 1);
    __dst.__r_.__value_.__l.__size_ = v231;
    __dst.__r_.__value_.__r.__words[2] = v234 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v232;
    goto LABEL_389;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v230;
  v232 = &__dst;
  if (v230)
LABEL_389:
    memmove(v232, v229, v231);
  v232->__r_.__value_.__s.__data_[v231] = 0;
  sub_19C29471C((CFStringRef *)&__p, (char *)language_modeling::v1::kLanguageModelForConditionalProbabilityUserSettingKey);
  v235 = (const void *)__p.__r_.__value_.__r.__words[0];
  v236 = sub_19C29A674(a1, (const void **)&__dst.__r_.__value_.__l.__data_);
  if (v293 != v236)
  {
    sub_19C423A84((CFStringRef *)value, v236 + 7);
    v237 = value[0];
    CFDictionaryAddValue(v294, v235, value[0]);
    if (v237)
      CFRelease(v237);
    v235 = (const void *)__p.__r_.__value_.__r.__words[0];
  }
  if (v235)
    CFRelease(v235);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  v238 = (const void *)language_modeling::v1::kCustomStaticPhraseLexiconPathKey;
  v239 = strlen((const char *)language_modeling::v1::kCustomStaticPhraseLexiconPathKey);
  if (v239 > 0x7FFFFFFFFFFFFFF7)
    sub_19C2A1A54();
  v240 = v239;
  if (v239 >= 0x17)
  {
    v242 = (v239 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v239 | 7) != 0x17)
      v242 = v239 | 7;
    v243 = v242 + 1;
    v241 = (std::string *)operator new(v242 + 1);
    __dst.__r_.__value_.__l.__size_ = v240;
    __dst.__r_.__value_.__r.__words[2] = v243 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v241;
  }
  else
  {
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v239;
    v241 = &__dst;
    if (!v239)
      goto LABEL_406;
  }
  memmove(v241, v238, v240);
LABEL_406:
  v241->__r_.__value_.__s.__data_[v240] = 0;
  v244 = (const void *)kLMLanguageModelCustomStaticPhraseLexiconPathKey;
  v245 = sub_19C29A674(a1, (const void **)&__dst.__r_.__value_.__l.__data_);
  if (v293 != v245)
  {
    sub_19C423A84((CFStringRef *)value, v245 + 7);
    v246 = value[0];
    CFDictionaryAddValue(v294, v244, value[0]);
    if (v246)
      CFRelease(v246);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  v247 = (const void *)language_modeling::v1::kUseBeamSearchV1;
  v248 = strlen((const char *)language_modeling::v1::kUseBeamSearchV1);
  if (v248 > 0x7FFFFFFFFFFFFFF7)
    sub_19C2A1A54();
  v249 = v248;
  if (v248 >= 0x17)
  {
    v251 = (v248 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v248 | 7) != 0x17)
      v251 = v248 | 7;
    v252 = v251 + 1;
    v250 = (std::string *)operator new(v251 + 1);
    __dst.__r_.__value_.__l.__size_ = v249;
    __dst.__r_.__value_.__r.__words[2] = v252 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v250;
    goto LABEL_418;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v248;
  v250 = &__dst;
  if (v248)
LABEL_418:
    memmove(v250, v247, v249);
  v250->__r_.__value_.__s.__data_[v249] = 0;
  sub_19C29471C((CFStringRef *)value, (char *)language_modeling::v1::kUseBeamSearchV1);
  sub_19C4239DC(a1, (const void **)&__dst.__r_.__value_.__l.__data_, v294, value[0]);
  if (value[0])
    CFRelease(value[0]);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  v253 = (const void *)language_modeling::v1::kLanguageModelMontrealFullCacheSizeCategoryKey;
  v254 = strlen((const char *)language_modeling::v1::kLanguageModelMontrealFullCacheSizeCategoryKey);
  if (v254 > 0x7FFFFFFFFFFFFFF7)
    sub_19C2A1A54();
  v255 = v254;
  if (v254 >= 0x17)
  {
    v257 = (v254 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v254 | 7) != 0x17)
      v257 = v254 | 7;
    v258 = v257 + 1;
    v256 = (std::string *)operator new(v257 + 1);
    __dst.__r_.__value_.__l.__size_ = v255;
    __dst.__r_.__value_.__r.__words[2] = v258 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v256;
    goto LABEL_430;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v254;
  v256 = &__dst;
  if (v254)
LABEL_430:
    memmove(v256, v253, v255);
  v256->__r_.__value_.__s.__data_[v255] = 0;
  sub_19C29471C((CFStringRef *)&__p, (char *)language_modeling::v1::kLanguageModelMontrealFullCacheSizeCategoryKey);
  v259 = (const void *)__p.__r_.__value_.__r.__words[0];
  v260 = sub_19C29A674(a1, (const void **)&__dst.__r_.__value_.__l.__data_);
  if (v293 != v260)
  {
    sub_19C423A84((CFStringRef *)value, v260 + 7);
    v261 = value[0];
    CFDictionaryAddValue(v294, v259, value[0]);
    if (v261)
      CFRelease(v261);
    v259 = (const void *)__p.__r_.__value_.__r.__words[0];
  }
  if (v259)
    CFRelease(v259);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  v262 = (const void *)language_modeling::v1::kLanguageModelInlineCompletionPrecisionOperatingPointKey;
  v263 = strlen((const char *)language_modeling::v1::kLanguageModelInlineCompletionPrecisionOperatingPointKey);
  if (v263 > 0x7FFFFFFFFFFFFFF7)
    sub_19C2A1A54();
  v264 = v263;
  if (v263 >= 0x17)
  {
    v266 = (v263 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v263 | 7) != 0x17)
      v266 = v263 | 7;
    v267 = v266 + 1;
    v265 = (std::string *)operator new(v266 + 1);
    __dst.__r_.__value_.__l.__size_ = v264;
    __dst.__r_.__value_.__r.__words[2] = v267 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v265;
    goto LABEL_446;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v263;
  v265 = &__dst;
  if (v263)
LABEL_446:
    memmove(v265, v262, v264);
  v265->__r_.__value_.__s.__data_[v264] = 0;
  sub_19C29471C((CFStringRef *)&__p, (char *)language_modeling::v1::kLanguageModelInlineCompletionPrecisionOperatingPointKey);
  v268 = (const void *)__p.__r_.__value_.__r.__words[0];
  v269 = sub_19C29A674(a1, (const void **)&__dst.__r_.__value_.__l.__data_);
  if (v293 != v269)
  {
    sub_19C423A84((CFStringRef *)value, v269 + 7);
    v270 = value[0];
    CFDictionaryAddValue(v294, v268, value[0]);
    if (v270)
      CFRelease(v270);
    v268 = (const void *)__p.__r_.__value_.__r.__words[0];
  }
  if (v268)
    CFRelease(v268);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  v271 = (const void *)language_modeling::v1::kCustomInlineCompletionParametersPath;
  v272 = strlen((const char *)language_modeling::v1::kCustomInlineCompletionParametersPath);
  if (v272 > 0x7FFFFFFFFFFFFFF7)
    sub_19C2A1A54();
  v273 = v272;
  if (v272 >= 0x17)
  {
    v275 = (v272 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v272 | 7) != 0x17)
      v275 = v272 | 7;
    v276 = v275 + 1;
    v274 = (std::string *)operator new(v275 + 1);
    __dst.__r_.__value_.__l.__size_ = v273;
    __dst.__r_.__value_.__r.__words[2] = v276 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v274;
  }
  else
  {
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v272;
    v274 = &__dst;
    if (!v272)
      goto LABEL_463;
  }
  memmove(v274, v271, v273);
LABEL_463:
  v274->__r_.__value_.__s.__data_[v273] = 0;
  v277 = (const void *)kLMCustomInlineCompletionParametersPathKey;
  v278 = sub_19C29A674(a1, (const void **)&__dst.__r_.__value_.__l.__data_);
  if (v293 != v278)
  {
    sub_19C423A84((CFStringRef *)value, v278 + 7);
    v279 = value[0];
    CFDictionaryAddValue(v294, v277, value[0]);
    if (v279)
      CFRelease(v279);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  return v294;
}

void sub_19C42360C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, const void *a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  void *v34;
  void *v35;
  uint64_t v36;

  __cxa_free_exception(v34);
  if (v35)
    operator delete(v35);
  sub_19C3C0B60(&a29);
  sub_19C307B68((void **)(v36 - 112));
  if (a21 < 0)
    operator delete(__p);
  sub_19C32BBE4(&a15);
  _Unwind_Resume(a1);
}

void sub_19C4239DC(uint64_t a1, const void **a2, __CFDictionary *a3, const void *a4)
{
  uint64_t *v7;
  const void **v8;
  const void *v9;

  v7 = sub_19C29A674(a1, a2);
  if ((uint64_t *)(a1 + 8) != v7)
  {
    if (*((_DWORD *)v7 + 20))
      sub_19C2F5A74();
    if (*((_BYTE *)v7 + 56))
      v8 = (const void **)MEMORY[0x1E0C9AE50];
    else
      v8 = (const void **)MEMORY[0x1E0C9AE40];
    v9 = *v8;
    CFDictionaryAddValue(a3, a4, *v8);
    if (v9)
      CFRelease(v9);
  }
}

void sub_19C423A70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C423B28((const void **)va);
  _Unwind_Resume(a1);
}

CFStringRef sub_19C423A84(CFStringRef *a1, uint64_t *a2)
{
  CFIndex v3;
  CFIndex v4;
  CFStringRef result;
  void *exception;

  if (*((_DWORD *)a2 + 6) != 1)
    sub_19C2F5A74();
  v3 = a2[1];
  if (*((char *)a2 + 23) >= 0)
  {
    v4 = *((unsigned __int8 *)a2 + 23);
  }
  else
  {
    a2 = (uint64_t *)*a2;
    v4 = v3;
  }
  result = CFStringCreateWithBytes(0, (const UInt8 *)a2, v4, 0x8000100u, 0);
  *a1 = result;
  if (!result)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD3154](exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  return result;
}

void sub_19C423B14(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

const void **sub_19C423B28(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

void sub_19C423B58(_BYTE *a1, const UInt8 *a2)
{
  int v2;
  CFIndex v3;
  const __CFString *v5;
  const __CFString *v6;
  const __CFLocale *v7;
  const __CFString *Value;
  CFComparisonResult v9;
  size_t v10;
  void *exception;

  v2 = *((char *)a2 + 23);
  if (v2 >= 0)
    v3 = a2[23];
  else
    v3 = *((_QWORD *)a2 + 1);
  if (!v3)
    __assert_rtn("wordSeparatorForLocale", "AdapterUtils.cpp", 154, "!localeIdentifier.empty()");
  if (v2 < 0)
    a2 = *(const UInt8 **)a2;
  v5 = CFStringCreateWithBytes(0, a2, v3, 0x8000100u, 0);
  if (!v5)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD3154](exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v6 = v5;
  v7 = CFLocaleCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v5);
  CFRelease(v6);
  Value = (const __CFString *)CFLocaleGetValue(v7, (CFLocaleKey)*MEMORY[0x1E0C9B088]);
  v9 = CFStringCompare(Value, CFSTR("th"), 0);
  v10 = v9 != kCFCompareEqualTo;
  a1[23] = v10;
  if (v9)
    memcpy(a1, " ", v10);
  a1[v10] = 0;
  if (v7)
    CFRelease(v7);
}

void sub_19C423C94(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19C423CB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  sub_19C2E5670(&a9);
  _Unwind_Resume(a1);
}

void sub_19C423CC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C313560((const void **)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_19C423CD8(_QWORD *result, CFTypeRef cf)
{
  _QWORD *v2;

  v2 = result;
  if (cf)
  {
    CFRetain(cf);
    return sub_19C2952E8(v2, cf);
  }
  else
  {
    *result = 0;
  }
  return result;
}

_QWORD *sub_19C423D20(_QWORD *result)
{
  if (!*result)
  {
    __cxa_allocate_exception(0x10uLL);
    sub_19C3AF258();
  }
  return result;
}

void sub_19C423D50()
{
  void *v0;

  __cxa_throw(v0, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
}

void sub_19C423D68(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_19C423D7C(_QWORD *result)
{
  if (!*result)
  {
    __cxa_allocate_exception(0x10uLL);
    sub_19C3AF258();
  }
  return result;
}

void sub_19C423DAC()
{
  void *v0;

  __cxa_throw(v0, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
}

void sub_19C423DC4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unint64_t sub_19C423DD8(_QWORD *a1, const __CFString *a2)
{
  CFTypeID TypeID;

  if (!a2 || (TypeID = CFStringGetTypeID(), TypeID != CFGetTypeID(a2)))
  {
    __cxa_allocate_exception(0x10uLL);
    sub_19C32EC04();
  }
  return sub_19C297E60(a1, a2);
}

void sub_19C423E34()
{
  void *v0;

  __cxa_throw(v0, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
}

void sub_19C423E4C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19C423E60(uint64_t a1, unsigned int a2, unsigned int *a3, _QWORD *a4)
{
  int v4;
  unsigned int *v5;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned __int8 *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v26;

  if (a2 <= 0x1F3)
  {
    if (!a3)
      goto LABEL_33;
LABEL_32:
    *a3 = a2;
    goto LABEL_33;
  }
  if (*(_DWORD *)(a1 + 180) <= a2 && *(_DWORD *)(a1 + 184) >= a2)
  {
    if (a3)
      *a3 = 0;
    goto LABEL_33;
  }
  v4 = *(_DWORD *)(a1 + 188);
  if (v4 != 1)
  {
    v7 = *(_QWORD *)(a1 + 16);
    if (a2 < (unint64_t)((*(_QWORD *)(a1 + 24) - v7) >> 2))
    {
      v8 = (unsigned int *)(v7 + 4 * a2);
      goto LABEL_28;
    }
    if (a3)
    {
LABEL_31:
      a2 = *(unsigned __int8 *)(a1 + 176);
      goto LABEL_32;
    }
LABEL_33:
    if (a4)
    {
      *a4 = 0;
      return 1;
    }
    return 1;
  }
  v5 = *(unsigned int **)(a1 + 40);
  if (*(_BYTE *)(a1 + 192))
  {
    if (a2 < *v5 || *(_DWORD *)(*(_QWORD *)(a1 + 48) - 8) < a2)
      goto LABEL_29;
    v5 += 2 * (a2 - *v5);
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 48) - (_QWORD)v5;
    if (v9)
    {
      v10 = v9 >> 3;
      do
      {
        v11 = v10 >> 1;
        v12 = &v5[2 * (v10 >> 1)];
        v14 = *v12;
        v13 = v12 + 2;
        v10 += ~(v10 >> 1);
        if (v14 < a2)
          v5 = v13;
        else
          v10 = v11;
      }
      while (v10);
    }
    if (*v5 != a2)
    {
LABEL_29:
      if (!a3)
        goto LABEL_33;
      if (v4 == 1)
        goto LABEL_32;
      goto LABEL_31;
    }
  }
  v8 = v5 + 1;
LABEL_28:
  v15 = *v8;
  v16 = v15 >> 28;
  if (!(v15 >> 28))
    goto LABEL_29;
  v18 = (unsigned __int8 *)(*(_QWORD *)(a1 + 64) + (v15 & 0xFFFFFFF));
  if (a4)
  {
    v19 = **(_QWORD **)(a1 + 80);
    if (a3)
    {
      v20 = *(_QWORD *)(a1 + 128);
      *a3 = *(_DWORD *)(v20 + 4 * *v18);
      *a4 = *(_QWORD *)(v19 + 8 * v18[1]);
      if (v15 >> 29)
      {
        a3[1] = *(_DWORD *)(v20 + 4 * v18[2]);
        a4[1] = *(_QWORD *)(v19 + 8 * v18[3]);
        v21 = v15 >> 28;
        if (v15 >> 28 < 3)
          return 2;
        a3[2] = *(_DWORD *)(v20 + 4 * v18[4]);
        a4[2] = *(_QWORD *)(v19 + 8 * v18[5]);
        if (!(v15 >> 30))
          return 3;
        a3[3] = *(_DWORD *)(v20 + 4 * v18[6]);
        a4[3] = *(_QWORD *)(v19 + 8 * v18[7]);
        if (v21 < 5)
          return 4;
        a3[4] = *(_DWORD *)(v20 + 4 * v18[8]);
        a4[4] = *(_QWORD *)(v19 + 8 * v18[9]);
        if (v15 >> 29 < 3)
          return 5;
        a3[5] = *(_DWORD *)(v20 + 4 * v18[10]);
        a4[5] = *(_QWORD *)(v19 + 8 * v18[11]);
        if (v21 < 7)
          return 6;
        a3[6] = *(_DWORD *)(v20 + 4 * v18[12]);
        a4[6] = *(_QWORD *)(v19 + 8 * v18[13]);
        if ((v15 & 0x80000000) == 0)
          return 7;
        a3[7] = *(_DWORD *)(v20 + 4 * v18[14]);
LABEL_85:
        a4[7] = *(_QWORD *)(v19 + 8 * v18[15]);
        return 8;
      }
    }
    else
    {
      *a4 = *(_QWORD *)(v19 + 8 * v18[1]);
      if (v15 >> 29)
      {
        a4[1] = *(_QWORD *)(v19 + 8 * v18[3]);
        v26 = v15 >> 28;
        if (v15 >> 28 < 3)
          return 2;
        a4[2] = *(_QWORD *)(v19 + 8 * v18[5]);
        if (!(v15 >> 30))
          return 3;
        a4[3] = *(_QWORD *)(v19 + 8 * v18[7]);
        if (v26 < 5)
          return 4;
        a4[4] = *(_QWORD *)(v19 + 8 * v18[9]);
        if (v15 >> 29 < 3)
          return 5;
        a4[5] = *(_QWORD *)(v19 + 8 * v18[11]);
        if (v26 < 7)
          return 6;
        a4[6] = *(_QWORD *)(v19 + 8 * v18[13]);
        if ((v15 & 0x80000000) == 0)
          return 7;
        goto LABEL_85;
      }
    }
    return 1;
  }
  if (a3)
  {
    v22 = *(_QWORD *)(a1 + 128);
    *a3 = *(_DWORD *)(v22 + 4 * *v18);
    if (!(v15 >> 29))
      return 1;
    a3[1] = *(_DWORD *)(v22 + 4 * v18[2]);
    v23 = v15 >> 28;
    if (v15 >> 28 >= 3)
    {
      a3[2] = *(_DWORD *)(v22 + 4 * v18[4]);
      if (v15 >> 30)
      {
        a3[3] = *(_DWORD *)(v22 + 4 * v18[6]);
        if (v23 >= 5)
        {
          a3[4] = *(_DWORD *)(v22 + 4 * v18[8]);
          if (v15 >> 29 >= 3)
          {
            a3[5] = *(_DWORD *)(v22 + 4 * v18[10]);
            if (v23 >= 7)
            {
              a3[6] = *(_DWORD *)(v22 + 4 * v18[12]);
              if ((v15 & 0x80000000) != 0)
              {
                a3[7] = *(_DWORD *)(v22 + 4 * v18[14]);
                return 8;
              }
              else
              {
                return 7;
              }
            }
            else
            {
              return 6;
            }
          }
          else
          {
            return 5;
          }
        }
        else
        {
          return 4;
        }
      }
      else
      {
        return 3;
      }
    }
    else
    {
      return 2;
    }
  }
  else
  {
    if (v16 <= 1)
      v24 = 1;
    else
      v24 = v16;
    v25 = v24 - 1;
    if (v25 >= 7)
      v25 = 7;
    return v25 + 1;
  }
}

_QWORD *sub_19C424270(_QWORD *a1)
{
  const void *v2;

  *a1 = &off_1E3D36AB8;
  v2 = (const void *)a1[1];
  if (v2)
    CFRelease(v2);
  a1[1] = 0;
  return a1;
}

void sub_19C4242B0(_QWORD *a1)
{
  const void *v2;

  *a1 = &off_1E3D36AB8;
  v2 = (const void *)a1[1];
  if (v2)
    CFRelease(v2);
  a1[1] = 0;
  JUMPOUT(0x1A1AD355CLL);
}

void sub_19C424300(uint64_t a1, CFTypeRef *a2)
{
  const void *RootCursor;
  const void *v4;
  CFTypeRef v5;

  RootCursor = (const void *)LXLexiconCreateRootCursor();
  *a2 = 0;
  if (RootCursor)
  {
    v4 = RootCursor;
    v5 = CFRetain(RootCursor);
    if (*a2)
      CFRelease(*a2);
    *a2 = v5;
    CFRelease(v4);
  }
}

void sub_19C42436C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  CFTypeRef *v2;
  va_list va;

  va_start(va, a2);
  if (*v2)
    CFRelease(*v2);
  *v2 = 0;
  sub_19C338870((const void **)va);
  _Unwind_Resume(a1);
}

void sub_19C424394(int a1, int a2, CFTypeRef *a3, UniChar *chars, CFIndex numChars)
{
  CFStringRef v6;
  const void *v7;
  const void *v8;
  CFTypeRef v9;
  double v10;
  double v11;

  v6 = CFStringCreateWithCharactersNoCopy(0, chars, numChars, (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
  v7 = (const void *)LXCursorCreateByAdvancing();
  v8 = v7;
  *a3 = 0;
  if (v7)
  {
    v9 = CFRetain(v7);
    if (*a3)
      CFRelease(*a3);
    *a3 = v9;
  }
  LXCursorConditionalProbability();
  v11 = v10;
  if (v8)
    CFRelease(v8);
  if (v6)
    CFRelease(v6);
  __exp10(v11);
}

void sub_19C424464(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
  CFTypeRef *v10;

  if (*v10)
    CFRelease(*v10);
  *v10 = 0;
  sub_19C338870(&a9);
  sub_19C2FE810(&a10);
  _Unwind_Resume(a1);
}

BOOL sub_19C4244A4(uint64_t a1, _QWORD *a2)
{
  if (!*a2)
    return 0;
  if (LXCursorHasEntries())
    return 1;
  return LXCursorHasChildren() != 0;
}

uint64_t sub_19C4244F0(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (*a2)
    return LXCursorIsRoot() != 0;
  return result;
}

uint64_t sub_19C424514(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (*a2)
    return LXCursorHasEntries() != 0;
  return result;
}

uint64_t sub_19C424538()
{
  return LXCursorEnumerateEntries();
}

BOOL sub_19C42458C()
{
  return LXCursorHasChildren() != 0;
}

double sub_19C4245AC()
{
  double v0;

  LXCursorConditionalProbability();
  return __exp10(v0);
}

double sub_19C4245C8()
{
  double v0;

  LXCursorTerminationProbability();
  return __exp10(v0);
}

uint64_t sub_19C4245E4()
{
  return LXCursorHash();
}

uint64_t sub_19C4245EC()
{
  uint64_t v0;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  int v5;

  v2 = 0;
  v3 = &v2;
  v5 = 0;
  v4 = 0x2000000000;
  LXCursorEnumerateEntries();
  v0 = *((unsigned int *)v3 + 6);
  _Block_object_dispose(&v2, 8);
  return v0;
}

void sub_19C424674(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_19C42468C()
{
  return 0;
}

uint64_t sub_19C424694()
{
  return 0;
}

uint64_t sub_19C4246A0()
{
  uint64_t v0;
  const void *v1;
  uint64_t v2;

  v0 = LXLexiconCopyEntryForTokenID();
  if (!v0)
    return 0;
  v1 = (const void *)v0;
  v2 = LXEntryCopyString();
  CFRelease(v1);
  return v2;
}

void sub_19C4246F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C3387E0((const void **)va);
  _Unwind_Resume(a1);
}

void sub_19C424708(uint64_t *a1@<X8>)
{
  const void *RootCursor;
  const void *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  RootCursor = (const void *)LXLexiconCreateRootCursor();
  v3 = (const void *)LXCursorCreateByAdvancing();
  if (!v3)
  {
    *a1 = 0;
    goto LABEL_9;
  }
  v4 = operator new();
  v7[0] = &off_1E3D393F8;
  v8 = v7;
  sub_19C36C900(v4, v3, (uint64_t)v7, 0);
  v5 = v8;
  if (v8 == v7)
  {
    v6 = 4;
    v5 = v7;
    goto LABEL_7;
  }
  if (v8)
  {
    v6 = 5;
LABEL_7:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  *a1 = v4;
  CFRelease(v3);
LABEL_9:
  if (RootCursor)
    CFRelease(RootCursor);
}

void sub_19C42481C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a2)
    sub_19C2CDAC8(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C4248A0()
{
  return 1;
}

void sub_19C4248A8(uint64_t a1, CFTypeRef *a2)
{
  if (*a2)
    CFRelease(*a2);
  *a2 = 0;
}

void sub_19C4248DC()
{
  JUMPOUT(0x1A1AD355CLL);
}

_QWORD *sub_19C4248F0()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E3D393F8;
  return result;
}

void sub_19C424914(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E3D393F8;
}

uint64_t sub_19C42492C()
{
  return 1;
}

uint64_t sub_19C424934(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK2LM23LexiconFrameworkAdaptor19makeTokenEnumeratorEPK10__CFStringE3$_0"
    || ((v3 & (unint64_t)"ZNK2LM23LexiconFrameworkAdaptor19makeTokenEnumeratorEPK10__CFStringE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZNK2LM23LexiconFrameworkAdaptor19makeTokenEnumeratorEPK10__CFStringE3$_0")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK2LM23LexiconFrameworkAdaptor19makeTokenEnumeratorEPK10__CFStringE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *sub_19C424988()
{
  return &unk_1E3D33740;
}

uint64_t sub_19C424994(uint64_t result, uint64_t a2, _BYTE *a3)
{
  uint64_t v4;
  int v5;

  v4 = result;
  if (a2)
  {
    result = LXEntryGetTokenID();
    if ((_DWORD)result)
      v5 = result;
    else
      v5 = 500;
  }
  else
  {
    v5 = 0;
  }
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 32) + 8) + 24) = v5;
  *a3 = 1;
  return result;
}

void sub_19C4249E8(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  const __CFString *v6;
  unsigned int TokenID;
  uint64_t v8;
  double v9;
  double v10;
  char MetaFlags;
  uint64_t v12;
  void **v13;
  char v14;
  void *__p[2];
  char v16;
  const __CFString *v17;

  v6 = (const __CFString *)LXEntryCopyString();
  v17 = v6;
  if (a2)
  {
    TokenID = LXEntryGetTokenID();
    if (TokenID)
      v8 = TokenID;
    else
      v8 = 500;
  }
  else
  {
    v8 = 0;
  }
  sub_19C29CEF8(v6, __p);
  LXEntryGetPartialProbability();
  v10 = __exp10(v9);
  MetaFlags = LXEntryGetMetaFlags();
  v12 = LXEntryGetMetaFlags() & 0x200021;
  v14 = 0;
  if (v16 >= 0)
    v13 = __p;
  else
    v13 = (void **)__p[0];
  (*(void (**)(_QWORD, uint64_t, void **, _QWORD, uint64_t, char *, double))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), v8, v13, MetaFlags & 0x86, v12, &v14, v10);
  if (v14)
    *a3 = 1;
  if (v16 < 0)
  {
    operator delete(__p[0]);
    if (!v6)
      return;
    goto LABEL_15;
  }
  if (v6)
LABEL_15:
    CFRelease(v6);
}

void sub_19C424B08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, const void *a17)
{
  sub_19C2FE810(&a17);
  _Unwind_Resume(a1);
}

_QWORD *sub_19C424B44(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E3D36698;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_19C424B84(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_1E3D36698;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x1A1AD355CLL);
}

_QWORD *sub_19C424BD4(_QWORD *result, uint64_t a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  char v8;
  _QWORD v9[2];
  char v10;

  v3 = result[1];
  v4 = **(_DWORD ***)(v3 + 16);
  if (v4)
  {
    if (qword_1EE41C1B0 != -1)
      dispatch_once(&qword_1EE41C1B0, &unk_1E3D3A5F0);
    v5 = *(_QWORD *)(qword_1EE41C1B8 + 8 * (*v4 & 3));
    result = (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t, _DWORD *))(*(_QWORD *)v5 + 32))(v9, v5, v4);
    v6 = v9[0];
    v7 = v9[1];
    v8 = v10;
  }
  else
  {
    v7 = 0;
    v8 = 0;
    v6 = 0;
  }
  *(_DWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = &off_1E3D36E20;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 24) = v3;
  *(_DWORD *)(a2 + 32) = v6;
  *(_QWORD *)(a2 + 40) = v7;
  *(_BYTE *)(a2 + 48) = v8;
  return result;
}

double sub_19C424C9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  __int16 v10;

  v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, a4, a5);
  if (!v7)
  {
    v10 = 0;
    v7 = (*(uint64_t (**)(uint64_t, __int16 *, uint64_t))(*(_QWORD *)a2 + 16))(a2, &v10, 1);
  }
  *(_QWORD *)a3 = off_1E3D36438;
  v8 = *(_QWORD *)(v7 + 8);
  *(_DWORD *)(a3 + 16) = *(_DWORD *)(v7 + 16);
  *(_QWORD *)a3 = &off_1E3D36E20;
  *(_QWORD *)(a3 + 8) = v8;
  *(_QWORD *)(a3 + 24) = *(_QWORD *)(v7 + 24);
  *(_DWORD *)(a3 + 32) = *(_DWORD *)(v7 + 32);
  *(_QWORD *)(a3 + 40) = *(_QWORD *)(v7 + 40);
  *(_BYTE *)(a3 + 48) = *(_BYTE *)(v7 + 48);
  return 0.0;
}

uint64_t sub_19C424D44(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
}

BOOL sub_19C424D54(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return a2[4] == a3[4] && a2[5] == a3[5] && a2[6] == a3[6];
}

uint64_t sub_19C424D78(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2);
}

uint64_t sub_19C424D88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v8;
  char v9;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2);
  if ((_DWORD)result)
  {
    v9 = 0;
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 48))(a2);
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, char *, double))(a5 + 16))(a5, v8, 0, 0, 0, &v9, 0.0);
  }
  return result;
}

uint64_t sub_19C424DFC(uint64_t a1, uint64_t a2)
{
  return (*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2) ^ 1;
}

double sub_19C424E20()
{
  return 0.0;
}

double sub_19C424E28()
{
  return 0.0;
}

uint64_t sub_19C424E30(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
}

uint64_t sub_19C424E40(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2);
  if ((_DWORD)result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 48))(a2);
  return result;
}

uint64_t sub_19C424E88(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 64))(a2);
}

unint64_t sub_19C424E98(uint64_t a1, unint64_t a2, int8x16_t *a3, unint64_t a4)
{
  unint64_t v4;
  char *v6;
  char *v7;
  char *v8;
  int8x16_t *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  __int16 v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  _WORD *v23;
  unint64_t v24;
  char *v25;
  __int16 v26;
  char *v27;
  unint64_t v28;
  char *v29;
  __int16 v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  _WORD *v37;
  unint64_t v38;
  char *v39;
  __int16 v40;
  uint64_t v41;
  _OWORD *v42;
  char *v43;
  unint64_t v44;
  __int128 v45;
  uint64_t v46;
  _OWORD *v47;
  char *v48;
  unint64_t v49;
  __int128 v50;
  uint64_t v51;
  _OWORD *v52;
  char *v53;
  unint64_t v54;
  __int128 v55;
  unint64_t v56;
  int8x16_t *v57;
  __int16 v58;
  unint64_t v59;
  uint64_t v60;
  int16x8_t *v61;
  int8x16_t *v62;
  unint64_t v63;
  int8x16_t v64;
  int8x16_t v65;
  __int16 v66;
  unint64_t v68;
  int16x8_t *v69;
  int8x16_t *v70;
  unint64_t v71;
  int8x16_t v72;
  int8x16_t v73;

  v4 = a2;
  if (!a2)
    return v4;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  while (*(_QWORD *)(v4 + 8))
  {
    v10 = *(_DWORD *)(v4 + 16);
    if (HIWORD(v10))
    {
      v16 = v10 & 0x3FF | 0xDC00;
      if (v6 < v7)
      {
        *(_WORD *)v6 = v16;
        v17 = v6 + 2;
LABEL_46:
        v31 = (*(_DWORD *)(v4 + 16) >> 10) - 10304;
        if (v17 >= v7)
        {
          v32 = v17 - v8;
          if (v17 - v8 <= -3)
            sub_19C2A18E8();
          v33 = v32 >> 1;
          if (v7 - v8 <= (unint64_t)((v32 >> 1) + 1))
            v34 = v33 + 1;
          else
            v34 = v7 - v8;
          if ((unint64_t)(v7 - v8) >= 0x7FFFFFFFFFFFFFFELL)
            v35 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v35 = v34;
          if (v35)
          {
            if (v35 < 0)
              sub_19C2A143C();
            v36 = operator new(2 * v35);
          }
          else
          {
            v36 = 0;
          }
          v37 = &v36[2 * v33];
          *v37 = v31;
          v9 = (int8x16_t *)(v37 + 1);
          if (v17 != v8)
          {
            v38 = v17 - 2 - v8;
            if (v38 < 0x5E)
            {
              v39 = v17;
              goto LABEL_62;
            }
            if (&v36[(v32 & 0xFFFFFFFFFFFFFFFELL) - 2 - (v38 & 0xFFFFFFFFFFFFFFFELL)] > &v36[(v32 & 0xFFFFFFFFFFFFFFFELL)
                                                                                            - 2])
            {
              v39 = v17;
              goto LABEL_62;
            }
            if (&v17[-(v38 & 0xFFFFFFFFFFFFFFFELL) - 2] > v17 - 2)
            {
              v39 = v17;
              goto LABEL_62;
            }
            if (v17 - v36 - (v32 & 0xFFFFFFFFFFFFFFFELL) < 0x20)
            {
              v39 = v17;
              goto LABEL_62;
            }
            v51 = (v38 >> 1) + 1;
            v39 = &v17[-2 * (v51 & 0xFFFFFFFFFFFFFFF0)];
            v52 = &v36[2 * v33 - 16];
            v53 = v17 - 16;
            v54 = v51 & 0xFFFFFFFFFFFFFFF0;
            do
            {
              v55 = *(_OWORD *)v53;
              *(v52 - 1) = *((_OWORD *)v53 - 1);
              *v52 = v55;
              v52 -= 2;
              v53 -= 32;
              v54 -= 16;
            }
            while (v54);
            v37 -= v51 & 0xFFFFFFFFFFFFFFF0;
            if (v51 != (v51 & 0xFFFFFFFFFFFFFFF0))
            {
              do
              {
LABEL_62:
                v40 = *((_WORD *)v39 - 1);
                v39 -= 2;
                *--v37 = v40;
              }
              while (v39 != v8);
            }
          }
          v7 = &v36[2 * v35];
          if (v8)
            operator delete(v8);
          v8 = (char *)v37;
          goto LABEL_4;
        }
        *(_WORD *)v17 = v31;
        v9 = (int8x16_t *)(v17 + 2);
        goto LABEL_4;
      }
      v18 = v6 - v8;
      if (v6 - v8 <= -3)
        sub_19C2A18E8();
      v19 = v18 >> 1;
      if (v7 - v8 <= (unint64_t)((v18 >> 1) + 1))
        v20 = v19 + 1;
      else
        v20 = v7 - v8;
      if ((unint64_t)(v7 - v8) >= 0x7FFFFFFFFFFFFFFELL)
        v21 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v21 = v20;
      if (v21)
      {
        if (v21 < 0)
          sub_19C2A143C();
        v22 = operator new(2 * v21);
      }
      else
      {
        v22 = 0;
      }
      v27 = &v22[2 * v19];
      *(_WORD *)v27 = v16;
      v17 = v27 + 2;
      if (v6 != v8)
      {
        v28 = v6 - 2 - v8;
        if (v28 < 0x5E)
        {
          v29 = v6;
          goto LABEL_42;
        }
        if (&v22[(v18 & 0xFFFFFFFFFFFFFFFELL) - 2 - (v28 & 0xFFFFFFFFFFFFFFFELL)] > &v22[(v18 & 0xFFFFFFFFFFFFFFFELL)
                                                                                        - 2])
        {
          v29 = v6;
          goto LABEL_42;
        }
        if (&v6[-(v28 & 0xFFFFFFFFFFFFFFFELL) - 2] > v6 - 2)
        {
          v29 = v6;
          goto LABEL_42;
        }
        if (v6 - v22 - (v18 & 0xFFFFFFFFFFFFFFFELL) < 0x20)
        {
          v29 = v6;
          goto LABEL_42;
        }
        v46 = (v28 >> 1) + 1;
        v29 = &v6[-2 * (v46 & 0xFFFFFFFFFFFFFFF0)];
        v47 = &v22[2 * v19 - 16];
        v48 = v6 - 16;
        v49 = v46 & 0xFFFFFFFFFFFFFFF0;
        do
        {
          v50 = *(_OWORD *)v48;
          *(v47 - 1) = *((_OWORD *)v48 - 1);
          *v47 = v50;
          v47 -= 2;
          v48 -= 32;
          v49 -= 16;
        }
        while (v49);
        v27 -= 2 * (v46 & 0xFFFFFFFFFFFFFFF0);
        if (v46 != (v46 & 0xFFFFFFFFFFFFFFF0))
        {
          do
          {
LABEL_42:
            v30 = *((_WORD *)v29 - 1);
            v29 -= 2;
            *((_WORD *)v27 - 1) = v30;
            v27 -= 2;
          }
          while (v29 != v8);
        }
      }
      v7 = &v22[2 * v21];
      if (v8)
        operator delete(v8);
      v8 = v27;
      goto LABEL_46;
    }
    if (v6 >= v7)
    {
      v11 = v6 - v8;
      if (v6 - v8 <= -3)
        sub_19C2A18E8();
      v12 = v11 >> 1;
      if (v7 - v8 <= (unint64_t)((v11 >> 1) + 1))
        v13 = v12 + 1;
      else
        v13 = v7 - v8;
      if ((unint64_t)(v7 - v8) >= 0x7FFFFFFFFFFFFFFELL)
        v14 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v14 = v13;
      if (v14)
      {
        if (v14 < 0)
          sub_19C2A143C();
        v15 = operator new(2 * v14);
      }
      else
      {
        v15 = 0;
      }
      v23 = &v15[2 * v12];
      *v23 = v10;
      v9 = (int8x16_t *)(v23 + 1);
      if (v6 != v8)
      {
        v24 = v6 - 2 - v8;
        if (v24 < 0x5E)
        {
          v25 = v6;
          goto LABEL_34;
        }
        if (&v15[(v11 & 0xFFFFFFFFFFFFFFFELL) - 2 - (v24 & 0xFFFFFFFFFFFFFFFELL)] > &v15[(v11 & 0xFFFFFFFFFFFFFFFELL)
                                                                                        - 2])
        {
          v25 = v6;
          goto LABEL_34;
        }
        if (&v6[-(v24 & 0xFFFFFFFFFFFFFFFELL) - 2] > v6 - 2)
        {
          v25 = v6;
          goto LABEL_34;
        }
        if ((unint64_t)(v6 - &v15[v11 & 0xFFFFFFFFFFFFFFFELL]) < 0x20)
        {
          v25 = v6;
          goto LABEL_34;
        }
        v41 = (v24 >> 1) + 1;
        v25 = &v6[-2 * (v41 & 0xFFFFFFFFFFFFFFF0)];
        v42 = &v15[2 * v12 - 16];
        v43 = v6 - 16;
        v44 = v41 & 0xFFFFFFFFFFFFFFF0;
        do
        {
          v45 = *(_OWORD *)v43;
          *(v42 - 1) = *((_OWORD *)v43 - 1);
          *v42 = v45;
          v42 -= 2;
          v43 -= 32;
          v44 -= 16;
        }
        while (v44);
        v23 -= v41 & 0xFFFFFFFFFFFFFFF0;
        if (v41 != (v41 & 0xFFFFFFFFFFFFFFF0))
        {
          do
          {
LABEL_34:
            v26 = *((_WORD *)v25 - 1);
            v25 -= 2;
            *--v23 = v26;
          }
          while (v25 != v8);
        }
      }
      v7 = &v15[2 * v14];
      if (v8)
        operator delete(v8);
      v8 = (char *)v23;
      goto LABEL_4;
    }
    *(_WORD *)v6 = v10;
    v9 = (int8x16_t *)(v6 + 2);
LABEL_4:
    v4 = *(_QWORD *)(v4 + 8);
    v6 = (char *)v9;
    if (!v4)
      goto LABEL_97;
  }
  v9 = (int8x16_t *)v6;
LABEL_97:
  v4 = ((char *)v9 - v8) >> 1;
  if (v4 <= a4)
  {
    if (v9 != (int8x16_t *)v8)
    {
      v59 = (char *)v9 - v8 - 2;
      if (v59 >= 0x2E
        && (v9 <= a3
         || (char *)v9 - (v59 & 0xFFFFFFFFFFFFFFFELL) - 2 >= (char *)&a3->i16[1] + (v59 & 0xFFFFFFFFFFFFFFFELL)))
      {
        v60 = (v59 >> 1) + 1;
        v61 = (int16x8_t *)&v9[-1];
        v62 = a3 + 1;
        v63 = v60 & 0xFFFFFFFFFFFFFFF0;
        do
        {
          v64 = (int8x16_t)vrev64q_s16(*v61);
          v65 = (int8x16_t)vrev64q_s16(v61[-1]);
          v62[-1] = vextq_s8(v64, v64, 8uLL);
          *v62 = vextq_s8(v65, v65, 8uLL);
          v61 -= 2;
          v62 += 2;
          v63 -= 16;
        }
        while (v63);
        if (v60 == (v60 & 0xFFFFFFFFFFFFFFF0))
          goto LABEL_114;
        a3 = (int8x16_t *)((char *)a3 + 2 * (v60 & 0xFFFFFFFFFFFFFFF0));
        v9 = (int8x16_t *)((char *)v9 - 2 * (v60 & 0xFFFFFFFFFFFFFFF0));
      }
      do
      {
        v66 = v9[-1].i16[7];
        v9 = (int8x16_t *)((char *)v9 - 2);
        a3->i16[0] = v66;
        a3 = (int8x16_t *)((char *)a3 + 2);
      }
      while (v9 != (int8x16_t *)v8);
    }
  }
  else if (a4)
  {
    v56 = (a4 - 1) & 0x7FFFFFFFFFFFFFFFLL;
    if (v56 >= 0x17 && (v9 <= a3 || (char *)v9 - 2 * a4 >= (char *)a3 + 2 * a4))
    {
      v68 = v56 + 1;
      v69 = (int16x8_t *)&v9[-1];
      v70 = a3 + 1;
      v71 = v68 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        v72 = (int8x16_t)vrev64q_s16(*v69);
        v73 = (int8x16_t)vrev64q_s16(v69[-1]);
        v70[-1] = vextq_s8(v72, v72, 8uLL);
        *v70 = vextq_s8(v73, v73, 8uLL);
        v69 -= 2;
        v70 += 2;
        v71 -= 16;
      }
      while (v71);
      if (v68 != (v68 & 0xFFFFFFFFFFFFFFF0))
      {
        a3 = (int8x16_t *)((char *)a3 + 2 * (v68 & 0xFFFFFFFFFFFFFFF0));
        v57 = (int8x16_t *)((char *)v9 - 2 * (v68 & 0xFFFFFFFFFFFFFFF0));
        goto LABEL_103;
      }
    }
    else
    {
      v57 = v9;
      do
      {
LABEL_103:
        v58 = v57[-1].i16[7];
        v57 = (int8x16_t *)((char *)v57 - 2);
        a3->i16[0] = v58;
        a3 = (int8x16_t *)((char *)a3 + 2);
      }
      while (v57 != (int8x16_t *)((char *)v9 - 2 * a4));
    }
  }
LABEL_114:
  if (v8)
    operator delete(v8);
  return v4;
}

void sub_19C4254B0(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C4254DC(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_19C4254EC()
{
  return 0;
}

void sub_19C4254F4(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_19C4254FC()
{
  return 0;
}

_QWORD *sub_19C425508(_QWORD *a1, const void *a2, const void *a3)
{
  const __CFAllocator *v6;
  __CFDictionary *Mutable;
  __CFArray *v8;
  uint64_t v9;
  const void *v10;
  void *exception;
  char *v13;
  __int128 v14;
  CFErrorRef err;

  *a1 = &off_1E3D36AB8;
  a1[1] = 0;
  v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0D43798], a2);
  if (a3)
  {
    v8 = CFArrayCreateMutable(v6, 0, MEMORY[0x1E0C9B378]);
    CFArrayAppendValue(v8, a3);
    CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0D437A0], v8);
    if (v8)
      CFRelease(v8);
  }
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0D437A8], (const void *)*MEMORY[0x1E0C9AE50]);
  err = 0;
  v9 = LXLexiconCreate();
  v10 = (const void *)a1[1];
  if (v10)
    CFRelease(v10);
  a1[1] = v9;
  if (!v9)
  {
    if (err)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      v13 = (char *)operator new(0x30uLL);
      v14 = xmmword_19C46E060;
      strcpy(v13, "Failed to create the lexicon framework adapter");
      sub_19C3A3C5C((uint64_t)exception, (const void **)&v13, err);
      __cxa_throw(exception, (struct type_info *)&unk_1E3D32968, (void (*)(void *))sub_19C3123E4);
    }
    __assert_rtn("LexiconFrameworkAdaptor", "LMLexiconAdaptor.cpp", 59, "error");
  }
  if (Mutable)
    CFRelease(Mutable);
  return a1;
}

void sub_19C4256CC(_Unwind_Exception *a1)
{
  uint64_t v1;
  const void *v2;
  const void *v3;
  void *v4;
  const void *v6;

  operator delete(v4);
  CFRelease(v3);
  if (v2)
    CFRelease(v2);
  v6 = *(const void **)(v1 + 8);
  if (v6)
    CFRelease(v6);
  *(_QWORD *)(v1 + 8) = 0;
  _Unwind_Resume(a1);
}

_QWORD *sub_19C42576C(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  *a1 = &off_1E3D35178;
  v2 = (void *)a1[26];
  if (v2)
  {
    a1[27] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[23];
  if (v3)
  {
    a1[24] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[20];
  if (v4)
  {
    a1[21] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[17];
  if (v5)
  {
    a1[18] = v5;
    operator delete(v5);
  }
  v6 = (void *)a1[1];
  if (v6)
    munmap(v6, a1[2]);
  a1[2] = 0;
  return a1;
}

void sub_19C4257F0(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  *a1 = &off_1E3D35178;
  v2 = (void *)a1[26];
  if (v2)
  {
    a1[27] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[23];
  if (v3)
  {
    a1[24] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[20];
  if (v4)
  {
    a1[21] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[17];
  if (v5)
  {
    a1[18] = v5;
    operator delete(v5);
  }
  v6 = (void *)a1[1];
  if (v6)
    munmap(v6, a1[2]);
  a1[2] = 0;
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C425884(uint64_t a1)
{
  return a1 + 8;
}

uint64_t sub_19C42588C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 80);
}

uint64_t sub_19C425894()
{
  return 4;
}

void sub_19C42589C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, char **a5@<X8>)
{
  uint64_t v9;
  unint64_t v10;
  const void *v11;
  int64_t v12;
  char *v13;
  char *v14;
  double *v15;
  double *v16;
  char *v17;
  char *v18;
  double *v19;
  _BYTE *v20;
  _BYTE *v21;
  int64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  int32x4_t *v27;
  int32x4_t *v28;
  unsigned int v29;
  unint64_t v30;
  uint64_t v31;
  int32x4_t v32;
  int32x4_t *v33;
  uint64_t v34;
  int32x4_t v35;
  int32x4_t v36;
  unsigned int *v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  unsigned int *v43;
  unsigned int *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  unsigned int v50;
  unsigned int *v51;
  unsigned int *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unsigned int *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int *v63;
  unsigned int v64;
  unsigned int *v65;
  unint64_t v66;
  void *v67;
  int64_t v68;
  char *v69;
  int32x4_t *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _DWORD *v75;
  unsigned int v76;
  float v77;
  float v78;
  double v79;
  unint64_t v80;
  unint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  _BYTE *v88;
  char *v89;
  unint64_t v90;
  uint64_t v91;
  _OWORD *v92;
  __int128 *v93;
  uint64_t v94;
  __int128 v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  int *v99;
  int v100;
  float v101;
  float v102;
  double v103;
  int v104;
  unint64_t v105;
  double *v106;
  unint64_t v107;
  double *v108;
  double v109;
  double *v110;
  uint64_t v111;
  double v112;
  double *v113;
  double *v114;
  double v115;
  double *v116;
  double *v117;
  int v118;
  _QWORD *v119;
  _QWORD *v120;
  uint64_t v121;
  _QWORD *v122;
  double *v123;
  double *v124;
  int v125;
  int v126;
  double *v127;
  int v128;
  double *v129;
  int v130;
  uint64_t v131;
  _BOOL4 v132;
  int v133;
  uint64_t v134;
  uint64_t v135;
  int v136;
  double *v137;
  __int128 *v138;
  _OWORD *v139;
  __int128 v140;
  _QWORD *v141;
  uint64_t v142;
  unint64_t v143;
  unint64_t v144;
  int v145;
  char *v146;
  char *v147;
  unint64_t v148;
  unint64_t v149;
  int v150;
  double *v151;
  uint64_t v152;
  char *v153;
  _OWORD *v154;
  __int128 v155;
  unint64_t v156;
  char *v157;
  int64_t v158;
  char *v159;
  uint64_t v160;
  char *v161;
  uint64_t v162;
  char *v163;
  unint64_t i;
  int v165;
  uint64_t v166;
  char *v167;
  void *v168;
  void *v169;
  uint64_t v171;
  char *v172;
  unint64_t v173;
  double *v174;
  uint64_t v175;
  unsigned int *v176;
  uint64_t v177;
  uint64_t v178;
  double *v179;
  __int128 v180;
  void *v181;
  _BYTE *v182;
  char *v183;
  void *v184[2];
  void *v185;
  char *v186;
  char *v187;
  float v188;
  void *__p[2];
  __int128 v190;
  uint64_t v191;
  float v192;
  char *v193;
  char *v194;
  char *v195;
  uint64_t v196;
  int32x4_t *v197;
  char *v198;
  __int32 *v199;

  v9 = *(unsigned int *)(a1 + 64);
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 64))(a2) - 1 != v9)
    __assert_rtn("predictions", "Network.cpp", 372, "largestInputId() == neuralModel.outputLayerSize() - 1");
  v10 = *(_QWORD *)(a1 + 32);
  v184[1] = (void *)v10;
  v185 = 0;
  v186 = 0;
  v187 = 0;
  if (!v10)
    __assert_rtn("PriorityQueue", "PriorityQueue.hpp", 21, "m_maxPredictionCount > 0");
  if (v10 >= 0x666666666666667)
    sub_19C2A18E8();
  v185 = operator new(40 * v10);
  v186 = (char *)v185;
  v187 = (char *)v185 + 40 * v10;
  v188 = 0.0;
  *(_OWORD *)__p = 0u;
  v190 = 0u;
  v11 = *(const void **)a3;
  v12 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
  if (v12)
  {
    if (v12 < 0)
      sub_19C2A18E8();
    v13 = (char *)operator new(v12);
    v14 = &v13[4 * (v12 >> 2)];
    __p[1] = v13;
    *((_QWORD *)&v190 + 1) = v14;
    memcpy(v13, v11, v12);
    *(_QWORD *)&v190 = v14;
  }
  sub_19C3AF5DC(v184, (unint64_t)&v188);
  if (__p[1])
  {
    *(void **)&v190 = __p[1];
    operator delete(__p[1]);
  }
  if (*(_QWORD *)(a1 + 24) < a4)
    a4 = *(_QWORD *)(a1 + 24);
  if (!a4)
    __assert_rtn("PriorityQueue", "PriorityQueue.hpp", 21, "m_maxPredictionCount > 0");
  if (a4 >> 60)
    sub_19C2A18E8();
  v15 = (double *)operator new(16 * a4);
  v16 = v15;
  v17 = (char *)v185;
  v18 = v186;
  if (v185 == v186)
  {
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    goto LABEL_204;
  }
  v19 = v15;
  v172 = (char *)&v15[2 * a4];
  v173 = a4;
  v171 = a1 + 8;
LABEL_16:
  if (v173 > ((char *)v19 - (char *)v16) >> 4)
    goto LABEL_19;
  if (v16 == v19)
    __assert_rtn("worst", "PriorityQueue.h", 55, "!m_predictions.empty()");
  if (*((double *)v18 - 4) > v16[1])
  {
LABEL_19:
    if (v17 == v18)
      __assert_rtn("best", "PriorityQueue.h", 46, "!m_predictions.empty()");
    v179 = v19;
    v180 = *(_OWORD *)(v18 - 40);
    v182 = 0;
    v183 = 0;
    v181 = 0;
    v21 = (_BYTE *)*((_QWORD *)v18 - 3);
    v20 = (_BYTE *)*((_QWORD *)v18 - 2);
    v22 = v20 - v21;
    if (v20 == v21)
    {
      v23 = v173;
      if (v21)
      {
LABEL_23:
        *((_QWORD *)v18 - 2) = v21;
        operator delete(v21);
      }
    }
    else
    {
      v23 = v173;
      if (v22 < 0)
        sub_19C2A18E8();
      v181 = operator new(v20 - v21);
      v182 = v181;
      v24 = (char *)v181 + 4 * (v22 >> 2);
      v183 = v24;
      memcpy(v181, v21, v22);
      v182 = v24;
      v21 = (_BYTE *)*((_QWORD *)v18 - 3);
      if (v21)
        goto LABEL_23;
    }
    v186 = v18 - 40;
    v25 = *(_QWORD *)(a1 + 88);
    v26 = *(unsigned int *)(v25 + 12 * v180);
    v197 = 0;
    v198 = 0;
    v199 = 0;
    if ((_DWORD)v26)
    {
      v27 = (int32x4_t *)operator new(4 * v26);
      v197 = v27;
      v199 = &v27->i32[v26];
      bzero(v27, 4 * v26);
      v28 = (int32x4_t *)((char *)v27 + 4 * v26);
      v198 = (char *)v28;
      v29 = *(_DWORD *)(v25 + 12 * v180 + 4);
      if ((unint64_t)(4 * v26 - 4) >= 0x1C)
      {
        v30 = ((unint64_t)(4 * v26 - 4) >> 2) + 1;
        v31 = v30 & 0x7FFFFFFFFFFFFFF8;
        v32 = vaddq_s32(vdupq_n_s32(v29), (int32x4_t)xmmword_19C46E070);
        v33 = v27 + 1;
        v34 = v30 & 0x7FFFFFFFFFFFFFF8;
        v35.i64[0] = 0x400000004;
        v35.i64[1] = 0x400000004;
        v36.i64[0] = 0x800000008;
        v36.i64[1] = 0x800000008;
        do
        {
          v33[-1] = v32;
          *v33 = vaddq_s32(v32, v35);
          v32 = vaddq_s32(v32, v36);
          v33 += 2;
          v34 -= 8;
        }
        while (v34);
        if (v30 == v31)
          goto LABEL_31;
        v29 += v31;
        v27 = (int32x4_t *)((char *)v27 + 4 * (v30 & 0x7FFFFFFFFFFFFFF8));
      }
      do
      {
        v27->i32[0] = v29;
        v27 = (int32x4_t *)((char *)v27 + 4);
        ++v29;
      }
      while (v27 != v28);
    }
LABEL_31:
    v196 = 0;
    (*(void (**)(uint64_t, void **, uint64_t, uint64_t *))(*(_QWORD *)a2 + 48))(a2, &v181, a1 + 184, &v196);
    v38 = (char *)v197;
    v37 = (unsigned int *)v198;
    if ((unint64_t)((v198 - (char *)v197) >> 2) >= *(_QWORD *)(a1 + 40))
      v39 = *(_QWORD *)(a1 + 40);
    else
      v39 = (v198 - (char *)v197) >> 2;
    if (v39)
    {
      if (v39 >= 2)
      {
        v40 = (unint64_t)(v39 - 2) >> 1;
        v41 = v40 + 1;
        v42 = &v197->i8[4 * v40];
        do
        {
          sub_19C3AF4A8((uint64_t)v38, v171, v39, v42);
          v42 -= 4;
          --v41;
        }
        while (v41);
      }
      v43 = (unsigned int *)&v38[4 * v39];
      if (v43 != v37)
      {
        v44 = (unsigned int *)&v38[4 * v39];
        do
        {
          v45 = *v44;
          v46 = *(unsigned int *)v38;
          if (*(float *)(*(_QWORD *)(a1 + 184) + 4 * *(unsigned int *)(*(_QWORD *)(a1 + 104) + 16 * v45 + 8)) > *(float *)(*(_QWORD *)(a1 + 184) + 4 * *(unsigned int *)(*(_QWORD *)(a1 + 104) + 16 * v46 + 8)))
          {
            *v44 = v46;
            *(_DWORD *)v38 = v45;
            sub_19C3AF4A8((uint64_t)v38, v171, v39, v38);
          }
          ++v44;
        }
        while (v44 != v37);
      }
      if (v39 >= 2)
      {
        v47 = v39 & 0x3FFFFFFFFFFFFFFFLL;
        do
        {
          v49 = 0;
          v50 = *(_DWORD *)v38;
          v51 = (unsigned int *)v38;
          do
          {
            v52 = v51;
            v51 += v49 + 1;
            v53 = 2 * v49;
            v49 = (2 * v49) | 1;
            v54 = v53 + 2;
            if (v54 < v47
              && *(float *)(*(_QWORD *)(a1 + 184) + 4 * *(unsigned int *)(*(_QWORD *)(a1 + 104) + 16 * *v51 + 8)) > *(float *)(*(_QWORD *)(a1 + 184) + 4 * *(unsigned int *)(*(_QWORD *)(a1 + 104) + 16 * v51[1] + 8)))
            {
              ++v51;
              v49 = v54;
            }
            *v52 = *v51;
          }
          while (v49 <= (uint64_t)((unint64_t)(v47 - 2) >> 1));
          if (v51 == --v43)
          {
            *v51 = v50;
          }
          else
          {
            *v51 = *v43;
            *v43 = v50;
            v55 = (char *)v51 - v38 + 4;
            if (v55 >= 5)
            {
              v56 = (((unint64_t)v55 >> 2) - 2) >> 1;
              v57 = (unsigned int *)&v38[4 * v56];
              v58 = *v57;
              v59 = *v51;
              v60 = *(_QWORD *)(a1 + 104);
              v61 = *(_QWORD *)(a1 + 184);
              v62 = v60 + 16 * v59;
              v64 = *(_DWORD *)(v62 + 8);
              v63 = (unsigned int *)(v62 + 8);
              if (*(float *)(v61 + 4 * *(unsigned int *)(v60 + 16 * v58 + 8)) > *(float *)(v61 + 4 * v64))
              {
                do
                {
                  v65 = v57;
                  *v51 = v58;
                  if (!v56)
                    break;
                  v56 = (v56 - 1) >> 1;
                  v57 = (unsigned int *)&v38[4 * v56];
                  v58 = *v57;
                  v51 = v65;
                }
                while (*(float *)(v61 + 4 * *(unsigned int *)(v60 + 16 * v58 + 8)) > *(float *)(v61 + 4 * *v63));
                *v65 = v59;
              }
            }
          }
        }
        while (v47-- > 2);
      }
    }
    v66 = (v198 - (char *)v197) >> 2;
    if (v39 <= v66)
    {
      if (v39 < v66)
        v198 = &v197->i8[4 * v39];
    }
    else
    {
      sub_19C316738((uint64_t)&v197, v39 - v66);
    }
    v67 = v181;
    v194 = 0;
    v195 = 0;
    v193 = 0;
    v68 = v182 - (_BYTE *)v181;
    if (v182 == v181)
    {
      v69 = 0;
    }
    else
    {
      if (v68 < 0)
        sub_19C2A18E8();
      v69 = (char *)operator new(v182 - (_BYTE *)v181);
      v193 = v69;
      v194 = v69;
      v195 = &v69[4 * (v68 >> 2)];
      memmove(v69, v67, v68);
      v194 = &v69[4 * (v68 >> 2)];
    }
    v70 = v197;
    v176 = (unsigned int *)v198;
    if (v197 == (int32x4_t *)v198)
    {
      if (!v69)
        goto LABEL_71;
      goto LABEL_70;
    }
    while (1)
    {
      v72 = v70->u32[0];
      v73 = *(_QWORD *)(a1 + 104);
      v192 = 0.0;
      v191 = 0;
      v178 = v73;
      v74 = v73 + 16 * v72;
      v76 = *(_DWORD *)(v74 + 8);
      v75 = (_DWORD *)(v74 + 8);
      (*(void (**)(uint64_t, _QWORD, char **, float *, uint64_t *))(*(_QWORD *)a2 + 16))(a2, v76, &v193, &v192, &v191);
      v77 = v192;
      v78 = log10f(v192);
      if (v77 <= 0.0)
        v78 = -10.0;
      v79 = *((double *)&v180 + 1) + v78;
      v80 = (unint64_t)v179;
      v81 = ((char *)v179 - (char *)v16) >> 4;
      if (v81 >= v23)
      {
        if (v16 == v179)
          __assert_rtn("worst", "PriorityQueue.h", 55, "!m_predictions.empty()");
        if (v79 < v16[1])
          goto LABEL_77;
      }
      v175 = (char *)v179 - (char *)v16;
      v177 = v72;
      v82 = v194;
      if (v194 >= v195)
      {
        v174 = v16;
        v83 = v193;
        v84 = (v194 - v193) >> 2;
        v85 = v84 + 1;
        if ((unint64_t)(v84 + 1) >> 62)
          sub_19C2A18E8();
        v86 = v195 - v193;
        if ((v195 - v193) >> 1 > v85)
          v85 = v86 >> 1;
        v87 = (unint64_t)v86 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v85;
        if (v87)
        {
          if (v87 >> 62)
            sub_19C2A143C();
          v88 = operator new(4 * v87);
        }
        else
        {
          v88 = 0;
        }
        v89 = &v88[4 * v84];
        *(_DWORD *)v89 = *v75;
        v71 = v89 + 4;
        if (v82 != v83)
        {
          v90 = v82 - 4 - v83;
          if (v90 < 0x2C)
            goto LABEL_234;
          if ((unint64_t)(v83 - v88) < 0x20)
            goto LABEL_234;
          v91 = (v90 >> 2) + 1;
          v92 = &v88[4 * v84 - 16];
          v93 = (__int128 *)(v82 - 16);
          v94 = v91 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v95 = *v93;
            *(v92 - 1) = *(v93 - 1);
            *v92 = v95;
            v92 -= 2;
            v93 -= 2;
            v94 -= 8;
          }
          while (v94);
          v89 -= 4 * (v91 & 0x7FFFFFFFFFFFFFF8);
          v82 -= 4 * (v91 & 0x7FFFFFFFFFFFFFF8);
          if (v91 != (v91 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_234:
            do
            {
              v96 = *((_DWORD *)v82 - 1);
              v82 -= 4;
              *((_DWORD *)v89 - 1) = v96;
              v89 -= 4;
            }
            while (v82 != v83);
          }
        }
        v193 = v89;
        v194 = v71;
        v195 = &v88[4 * v87];
        if (v83)
          operator delete(v83);
        v23 = v173;
        v16 = v174;
        v80 = (unint64_t)v179;
      }
      else
      {
        *(_DWORD *)v194 = *v75;
        v71 = v82 + 4;
      }
      v97 = v72;
      v194 = v71;
      v98 = v178 + 16 * v72;
      v100 = *(_DWORD *)(v98 + 12);
      v99 = (int *)(v98 + 12);
      if (v100)
        break;
LABEL_183:
      if (*(_DWORD *)(*(_QWORD *)(a1 + 104) + 16 * v97 + 4) != 1)
      {
        v156 = v80;
        v188 = *(float *)(v178 + 16 * v97 + 4);
        __p[0] = *(void **)&v79;
        v190 = 0uLL;
        __p[1] = 0;
        v157 = v193;
        v158 = v71 - v193;
        if (v71 != v193)
        {
          if (v158 < 0)
            sub_19C2A18E8();
          __p[1] = operator new(v71 - v193);
          *(void **)&v190 = __p[1];
          v159 = (char *)__p[1] + 4 * (v158 >> 2);
          *((_QWORD *)&v190 + 1) = v159;
          memcpy(__p[1], v157, v158);
          *(_QWORD *)&v190 = v159;
        }
        sub_19C3AF5DC(v184, (unint64_t)&v188);
        v80 = v156;
        if (__p[1])
        {
          *(void **)&v190 = __p[1];
          operator delete(__p[1]);
        }
        v71 = v194;
      }
      v179 = (double *)v80;
      v194 = v71 - 4;
LABEL_77:
      v70 = (int32x4_t *)((char *)v70 + 4);
      if (v70 == (int32x4_t *)v176)
      {
        v69 = v193;
        if (!v193)
        {
LABEL_71:
          if (v197)
          {
            v198 = (char *)v197;
            operator delete(v197);
          }
          v19 = v179;
          if (v181)
          {
            v182 = v181;
            operator delete(v181);
          }
          v17 = (char *)v185;
          v18 = v186;
          if (v185 != v186)
            goto LABEL_16;
          goto LABEL_193;
        }
LABEL_70:
        v194 = v69;
        operator delete(v69);
        goto LABEL_71;
      }
    }
    v188 = 0.0;
    (*(void (**)(uint64_t, uint64_t, char **, float *, uint64_t *))(*(_QWORD *)a2 + 16))(a2, 4, &v193, &v188, &v191);
    v101 = v188;
    v102 = log10f(v188);
    if (v101 <= 0.0)
      v102 = -10.0;
    v103 = v79 + v102;
    v104 = *v99;
    if (v81 >= v23)
    {
      if (v16 == (double *)v80)
        __assert_rtn("worst", "PriorityQueue.h", 55, "!m_predictions.empty()");
      v112 = v16[1];
      if (v103 >= v112)
      {
        v113 = v16;
        do
        {
          v114 = &v113[2 * (v81 >> 1)];
          v115 = v114[1];
          v116 = v114 + 2;
          if (v103 < v115)
          {
            v81 >>= 1;
          }
          else
          {
            v113 = v116;
            v81 += ~(v81 >> 1);
          }
        }
        while (v81);
        v117 = v16 + 2;
        if (v16 + 2 != v113)
        {
          v118 = *(_DWORD *)v16;
          *(_DWORD *)v16 = *((_DWORD *)v16 + 4);
          *((_DWORD *)v16 + 4) = v118;
          v16[1] = v16[3];
          v16[3] = v112;
          if (v16 + 4 != v113)
          {
            v119 = v16 + 5;
            do
            {
              v120 = v119;
              v121 = *(v119 - 2);
              *(v119 - 2) = *v119;
              *v119 = v121;
              v122 = v119 + 2;
              v123 = (double *)(v119 + 1);
              v126 = *((_DWORD *)v119 - 6);
              v124 = (double *)(v119 - 3);
              v125 = v126;
              v128 = *((_DWORD *)v120 - 2);
              v127 = (double *)(v120 - 1);
              *(_DWORD *)v124 = v128;
              if (v124 == v117)
                v117 = v127;
              *(_DWORD *)v127 = v125;
              v119 = v122;
            }
            while (v123 != v113);
            if (v127 != v117)
            {
              v129 = v117;
              while (1)
              {
                v130 = *(_DWORD *)v127;
                *(_DWORD *)v127 = *(_DWORD *)v129;
                *(_DWORD *)v129 = v130;
                v131 = *((_QWORD *)v127 + 1);
                v127[1] = v129[1];
                *((_QWORD *)v129 + 1) = v131;
                v127 += 2;
                v129 += 2;
                v132 = v127 == v117;
                if (v129 == v113)
                {
                  if (v127 == v117)
                    break;
                  v129 = v117 + 2;
                  v133 = *(_DWORD *)v117;
                  v134 = *((_QWORD *)v117 + 1);
                  while (1)
                  {
                    v135 = v134;
                    v136 = *(_DWORD *)v127;
                    *(_DWORD *)v127 = v133;
                    *(_DWORD *)v117 = v136;
                    v134 = *((_QWORD *)v127 + 1);
                    *((_QWORD *)v127 + 1) = v135;
                    *((_QWORD *)v117 + 1) = v134;
                    v127 += 2;
                    v132 = v127 == v117;
                    if (v129 != v113)
                      break;
                    v133 = v136;
                    if (v127 == v117)
                      goto LABEL_138;
                  }
                }
                if (v132)
                  v117 = v129;
              }
            }
          }
        }
LABEL_138:
        *((_DWORD *)v113 - 4) = v104;
        *(v113 - 1) = v103;
      }
      goto LABEL_182;
    }
    if ((double *)v80 == v16)
    {
      v111 = v81;
      v106 = (double *)v80;
    }
    else
    {
      v105 = v81;
      v106 = v16;
      do
      {
        v107 = v105 >> 1;
        v108 = &v106[2 * (v105 >> 1)];
        v109 = v108[1];
        v110 = v108 + 2;
        v105 += ~(v105 >> 1);
        if (v103 < v109)
          v105 = v107;
        else
          v106 = v110;
      }
      while (v105);
      v175 = (char *)v106 - (char *)v16;
      v111 = ((char *)v106 - (char *)v16) >> 4;
    }
    v137 = &v16[2 * v111];
    if (v80 < (unint64_t)v172)
    {
      if (v137 == (double *)v80)
      {
        *(_DWORD *)v80 = v104;
        *(double *)(v80 + 8) = v103;
        v80 += 16;
      }
      else
      {
        v138 = (__int128 *)(v80 - 16);
        v139 = (_OWORD *)v80;
        if (v80 >= 0x10)
        {
          do
          {
            v140 = *v138++;
            *v139++ = v140;
          }
          while ((unint64_t)v138 < v80);
        }
        if ((double *)v80 != v137 + 2)
        {
          v141 = (_QWORD *)(v80 - 8);
          v142 = 2 * ((uint64_t)(v80 - (_QWORD)(v137 + 2)) >> 4);
          do
          {
            *((_DWORD *)v141 - 2) = LODWORD(v137[v142 - 2]);
            *v141 = *(_QWORD *)&v137[v142 - 1];
            v141 -= 2;
            v142 -= 2;
          }
          while (v142 * 8);
        }
        *(_DWORD *)v137 = v104;
        v16[2 * v111 + 1] = v103;
        v80 = (unint64_t)v139;
      }
      v23 = v173;
      goto LABEL_181;
    }
    v143 = v81 + 1;
    if ((v81 + 1) >> 60)
      sub_19C2A18E8();
    if ((v172 - (char *)v16) >> 3 > v143)
      v143 = (v172 - (char *)v16) >> 3;
    if ((unint64_t)(v172 - (char *)v16) >= 0x7FFFFFFFFFFFFFF0)
      v144 = 0xFFFFFFFFFFFFFFFLL;
    else
      v144 = v143;
    if (v144)
    {
      if (v144 >> 60)
        sub_19C2A143C();
      v145 = v104;
      v146 = (char *)operator new(16 * v144);
      v104 = v145;
    }
    else
    {
      v146 = 0;
    }
    v147 = &v146[16 * v111];
    v172 = &v146[16 * v144];
    if (v111 == v144)
    {
      if (v175 < 1)
      {
        if (v106 == v16)
          v149 = 1;
        else
          v149 = v175 >> 3;
        if (v149 >> 60)
          sub_19C2A143C();
        v150 = v104;
        v147 = (char *)operator new(16 * v149);
        v172 = &v147[16 * v149];
        if (v146)
          operator delete(v146);
        v104 = v150;
      }
      else
      {
        v148 = v111 + 2;
        if (v111 >= -1)
          v148 = v111 + 1;
        v147 -= 16 * (v148 >> 1);
      }
    }
    *(_DWORD *)v147 = v104;
    *((double *)v147 + 1) = v103;
    v151 = (double *)v147;
    if (v111)
    {
      v152 = 2 * v111;
      v153 = v147;
      do
      {
        v151 = (double *)(v153 - 16);
        *((_OWORD *)v153 - 1) = *(_OWORD *)&v16[v152 - 2];
        v153 -= 16;
        v152 -= 2;
      }
      while (v152 * 8);
    }
    v154 = v147 + 16;
    if (v179 == v137)
    {
      v23 = v173;
      if (!v16)
        goto LABEL_180;
    }
    else
    {
      v23 = v173;
      do
      {
        v155 = *(_OWORD *)v137;
        v137 += 2;
        *v154++ = v155;
      }
      while (v137 != v179);
      if (!v16)
        goto LABEL_180;
    }
    operator delete(v16);
LABEL_180:
    v80 = (unint64_t)v154;
    v16 = v151;
LABEL_181:
    v97 = v177;
LABEL_182:
    v71 = v194;
    goto LABEL_183;
  }
LABEL_193:
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  v160 = (char *)v19 - (char *)v16;
  if (v19 != v16)
  {
    if (v160 < 0)
      sub_19C2A18E8();
    v161 = (char *)operator new((char *)v19 - (char *)v16);
    v162 = 0;
    *a5 = v161;
    a5[1] = v161;
    a5[2] = &v161[16 * (v160 >> 4)];
    do
    {
      *(_OWORD *)&v161[v162 * 8] = *(_OWORD *)&v16[v162];
      v162 += 2;
    }
    while (&v16[v162] != v19);
    v163 = &v161[v162 * 8];
    a5[1] = v163;
    if (v163 != v161)
    {
      for (i = (unint64_t)(v163 - 16); (unint64_t)v161 < i; i -= 16)
      {
        v165 = *(_DWORD *)v161;
        *(_DWORD *)v161 = *(_DWORD *)i;
        *(_DWORD *)i = v165;
        v166 = *((_QWORD *)v161 + 1);
        *((_QWORD *)v161 + 1) = *(_QWORD *)(i + 8);
        *(_QWORD *)(i + 8) = v166;
        v161 += 16;
      }
    }
  }
  if (v16)
  {
LABEL_204:
    operator delete(v16);
    v17 = (char *)v185;
    if (!v185)
      return;
    goto LABEL_205;
  }
  if (!v17)
    return;
LABEL_205:
  v167 = v186;
  v168 = v17;
  if (v186 != v17)
  {
    do
    {
      v169 = (void *)*((_QWORD *)v167 - 3);
      if (v169)
      {
        *((_QWORD *)v167 - 2) = v169;
        operator delete(v169);
      }
      v167 -= 40;
    }
    while (v167 != v17);
    v168 = v185;
  }
  v186 = v17;
  operator delete(v168);
}

void sub_19C4267A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39)
{
  void *v39;
  void *v41;
  uint64_t v42;
  void *v43;
  void *v44;

  if (v39)
  {
    operator delete(v39);
    v41 = __p;
    if (!__p)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v41 = __p;
    if (!__p)
      goto LABEL_3;
  }
  v42 = (uint64_t)a34;
  v43 = v41;
  if (a34 != v41)
  {
    do
    {
      v44 = *(void **)(v42 - 24);
      if (v44)
      {
        *(_QWORD *)(v42 - 16) = v44;
        operator delete(v44);
      }
      v42 -= 40;
    }
    while ((void *)v42 != v41);
    v43 = __p;
  }
  operator delete(v43);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C426994(uint64_t a1, unsigned int a2, unsigned int *a3, unint64_t a4)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;

  if (a4 < *(unsigned int *)(a1 + 80))
    __assert_rtn("findSinglePathForOutputId", "LMFSTNetwork.cpp", 43, "nnTokenIDs.size() >= maxMontrealTokensForLMTokenID()");
  if (!a4)
    return 0;
  if (a2 - 1 <= 1)
  {
    *a3 = a2;
    return 1;
  }
  if (*(_DWORD *)(a1 + 68) <= a2)
    goto LABEL_8;
  v5 = *(unsigned int *)(*(_QWORD *)(a1 + 120) + 4 * a2);
  if ((_DWORD)v5 == -1)
    return 0;
  if ((_DWORD)v5 == *(_DWORD *)(a1 + 76))
  {
LABEL_8:
    *(_QWORD *)a3 = 0x400000003;
    return 2;
  }
  if (*(_DWORD *)(a1 + 56) <= v5)
LABEL_26:
    __assert_rtn("getEdge", "Network.h", 203, "edgeIdx < getNrOfEdges()");
  v6 = *(_QWORD *)(a1 + 104);
  *a3 = 4;
  a3[1] = *(_DWORD *)(v6 + 16 * (int)v5 + 8);
  v7 = *(unsigned int *)(v6 + 16 * v5);
  if (*(unsigned int *)(a1 + 52) <= v7)
LABEL_18:
    __assert_rtn("isInitial", "Network.h", 223, "n < getNrOfNodes()");
  v8 = 2;
  if (a4 <= 2)
    v9 = 2;
  else
    v9 = a4;
  while (*(_DWORD *)(a1 + 48) != v7)
  {
    if (v9 == v8)
      return 0;
    v10 = *(unsigned int *)(*(_QWORD *)(a1 + 88) + 12 * v7 + 8);
    if (*(_DWORD *)(a1 + 56) <= v10)
      goto LABEL_26;
    v11 = (unsigned int *)(v6 + 16 * v10);
    a3[v8++] = v11[2];
    v7 = *v11;
    if (*(unsigned int *)(a1 + 52) <= v7)
      goto LABEL_18;
  }
  result = v8;
  v12 = &a3[v8 - 1];
  if (v12 > a3)
  {
    v13 = a3 + 1;
    do
    {
      v14 = *(v13 - 1);
      *(v13 - 1) = *v12;
      *v12-- = v14;
    }
    while (v13++ < v12);
  }
  return result;
}

uint64_t sub_19C426B48(uint64_t a1, unsigned int *a2, uint64_t a3, _QWORD *a4)
{
  char *v6;
  uint64_t v7;
  size_t v8;
  _DWORD *v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (a3)
  {
    v6 = *(char **)(a1 + 208);
    v7 = *(_QWORD *)(a1 + 216);
    if (a3 == 1 && *a2 == 3)
    {
      *(_DWORD *)v6 = 4;
      v8 = 1;
LABEL_21:
      sub_19C39F614(a4, v6, &v6[4 * v8], v8);
      return 1;
    }
    v9 = (_DWORD *)sub_19C3AF264(a1 + 8, a2, a3);
    v10 = v9[1];
    v11 = (v10 + *v9);
    if (v10 < v11)
    {
      v12 = 0;
      v13 = (16 * v10) | 8;
      while (1)
      {
        v15 = v12;
        if ((v7 - (uint64_t)v6) >> 2 <= (unint64_t)v12)
          return 0;
        if (v10 >= *(unsigned int *)(a1 + 56))
          goto LABEL_23;
        v16 = *(_QWORD *)(a1 + 104);
        if (v12)
        {
          v14 = *(_DWORD *)(v16 + v13);
          if (*(_DWORD *)&v6[4 * v12 - 4] == v14)
            goto LABEL_9;
        }
        else
        {
          v14 = *(_DWORD *)(v16 + v13);
        }
        ++v12;
        *(_DWORD *)&v6[4 * v15] = v14;
LABEL_9:
        ++v10;
        v13 += 16;
        if (v11 == v10)
          goto LABEL_16;
      }
    }
    v12 = 0;
LABEL_16:
    v17 = v9[2];
    if (*(_DWORD *)(a1 + 56) <= v17)
LABEL_23:
      __assert_rtn("getEdge", "Network.h", 203, "edgeIdx < getNrOfEdges()");
    if (*(_DWORD *)(*(_QWORD *)(a1 + 104) + 16 * v17 + 12))
      *(_DWORD *)&v6[4 * v12++] = 4;
    if (v12)
    {
      v8 = v12;
      v6 = *(char **)(a1 + 208);
      goto LABEL_21;
    }
  }
  return 0;
}

BOOL sub_19C426C98(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  if (!a3)
    return 1;
  if (a3 == 1 && *a2 == 3)
    return 0;
  return *(_DWORD *)sub_19C3AF264(a1 + 8, a2, a3) > 0xFA0u;
}

uint64_t sub_19C426CE8(uint64_t a1, unsigned int a2, int a3, unsigned int a4, uint64_t a5, unsigned int a6)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  _DWORD *v9;
  unint64_t v10;
  int v11;
  unsigned int v12;
  char v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  uint64_t result;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  int v26;

  v6 = a1 + 3;
  v7 = 6 * a4;
  while (a6)
  {
    if (a4)
      v8 = 24;
    else
      v8 = 0;
    if (++a4 >= a2)
    {
      v12 = 0;
    }
    else
    {
      v9 = (_DWORD *)((((v7 + 3) >> 3) + v6) & 0xFFFFFFFFFFFFFFFCLL);
      v10 = (v7 + 3) & 7 | (8 * ((((v7 + 3) >> 3) + v6) & 3));
      v11 = *v9 >> v10;
      if (v10 >= 0x1E)
        v11 |= v9[1] << -(char)v10;
      v12 = 4 * (v11 & 7);
    }
    v13 = 4 * (*(_DWORD *)(((v7 >> 3) + v6) & 0xFFFFFFFFFFFFFFFCLL) >> (v7 & 6 | (8 * (((v7 >> 3) + v6) & 3))));
    v14 = (v13 & 0x1C) + v8;
    v15 = ((v13 & 0x1C) + (_BYTE)v8 + (_BYTE)v12 + 7) & 0xF8;
    v16 = v15 * (a6 - 1);
    if ((v13 & 0x1C) != 0)
    {
      v17 = ((v16 + v8) >> 3) + a5;
      v18 = v17 & 0xFFFFFFFFFFFFFFFCLL;
      v19 = 8 * (v17 & 3);
      v20 = *(_DWORD *)(v17 & 0xFFFFFFFFFFFFFFFCLL) >> v19;
      if (v19 + (unint64_t)(v13 & 0x1C) >= 0x21)
        v20 |= *(_DWORD *)(v18 + 4) << -(char)v19;
      v21 = v20 & (0xFFFFFFFF >> -(v13 & 0x1C));
    }
    else
    {
      v21 = 0;
    }
    result = a5 + ((v21 * ((a3 + 31) & 0xFFFFFFF8)) >> 3) + ((v15 * a6) >> 3);
    if (a4 < a2 && v12)
    {
      v23 = ((v16 + v14) >> 3) + a5;
      v24 = v23 & 0xFFFFFFFFFFFFFFFCLL;
      v25 = v13 & 4 | (8 * (v23 & 3));
      v26 = *(_DWORD *)(v23 & 0xFFFFFFFFFFFFFFFCLL) >> v25;
      if (v25 + (unint64_t)v12 >= 0x21)
        v26 |= *(_DWORD *)(v24 + 4) << -(char)v25;
      v7 += 6;
      a5 = result;
      a6 = v26 & (0xFFFFFFFF >> -(char)v12);
      if (a6)
        continue;
    }
    return result;
  }
  return a5;
}

uint64_t sub_19C426EA0(uint64_t result, unsigned int a2, _DWORD *a3, float a4)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  int v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v22;
  uint64_t v23;
  uint64_t v24;

  v24 = 0;
  if (result)
  {
    v22 = *(unsigned __int8 *)(result + 6);
    if (a2)
    {
      v6 = *(unsigned __int8 *)(result + 7);
      v7 = *(unsigned __int8 *)(result + 5);
      v8 = *(_QWORD *)(result + 24);
      v9 = *(_DWORD *)(result + 20);
      if (v7 >= a2 && v8 != 0 && *(_DWORD *)(result + 16) != 0 && v9 != 0 && (_DWORD)v6 != 0)
      {
        v14 = 0;
        v15 = 0;
        v16 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v6;
        do
        {
          v17 = ((v14 + 24) >> 3) + v8;
          v18 = v17 & 0xFFFFFFFFFFFFFFF8;
          v19 = v14 & 7 | (8 * (v17 & 7));
          v20 = *(_QWORD *)(v17 & 0xFFFFFFFFFFFFFFF8) >> v19;
          if ((unint64_t)(v19 + v6) >= 0x41)
            v20 |= *(_QWORD *)(v18 + 8) << -(char)v19;
          result = v20 & v16;
          if ((v20 & v16) != 0)
          {
            v23 = 0;
            result = sub_19C42701C(result, v7, v22, a2, result + ((6 * (unint64_t)v7 + 4) >> 3) + 3, (int *)&v23 + 1, (unsigned int *)&v23, a4);
            v15 += HIDWORD(v23);
            HIDWORD(v24) = v15;
          }
          v14 += v6 + 24;
          --v9;
        }
        while (v9);
      }
    }
    else
    {
      result = *(_QWORD *)(result + 32);
      if (result)
        result = sub_19C42701C(result, 1u, v22, 1u, result + 4, (int *)&v24 + 1, (unsigned int *)&v24, a4);
    }
  }
  if (a3)
    *a3 = HIDWORD(v24);
  return result;
}

uint64_t sub_19C42701C(uint64_t a1, unsigned int a2, int a3, unsigned int a4, uint64_t a5, int *a6, unsigned int *a7, float a8)
{
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t result;
  int i;
  int v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  int v28;
  unsigned int v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  int v33;
  unsigned int v34;
  int v35;
  int v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  int v44;
  unsigned int v45;
  unsigned int v46;
  float v47;
  BOOL v48;
  unsigned int v49;
  unsigned int v50;
  int v51;
  float v52;
  float v53;
  float v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unsigned int v58;

  v8 = a1 + 3;
  v9 = (a3 + 31) & 0xFFFFFFF8;
  v10 = 1;
  v11 = 3;
  result = 24;
  for (i = 1; ; i = v34)
  {
    v14 = v10 == 1 ? 0 : 24;
    v15 = *(_DWORD *)((((v11 - 3) >> 3) + v8) & 0xFFFFFFFFFFFFFFFCLL) >> ((v11 - 3) & 6 | (8
                                                                                         * ((((v11 - 3) >> 3) + v8) & 3)));
    if (v10 >= a2)
    {
      v20 = 0;
    }
    else
    {
      v16 = (v11 >> 3) + v8;
      v17 = v16 & 0xFFFFFFFFFFFFFFFCLL;
      v18 = v11 & 7 | (8 * (v16 & 3));
      v19 = *(_DWORD *)(v16 & 0xFFFFFFFFFFFFFFFCLL) >> v18;
      if (v18 >= 0x1E)
        v19 |= *(_DWORD *)(v17 + 4) << -(char)v18;
      v20 = 4 * (v19 & 7);
    }
    v21 = 4 * v15;
    v22 = (4 * (_BYTE)v15) & 0x1C;
    v23 = (((4 * (_BYTE)v15) & 0x1C) + (_BYTE)v14 + (_BYTE)v20 + 7) & 0xF8;
    v24 = v23 * (i - 1);
    if ((_DWORD)v22)
      break;
    v29 = 0;
    if (a4 == v10)
      goto LABEL_23;
LABEL_16:
    if (v10 >= a4 || v10 >= a2 || !v20)
      return result;
    v30 = ((v24 + v22 + v14) >> 3) + a5;
    v31 = v30 & 0xFFFFFFFFFFFFFFFCLL;
    v32 = v21 & 4 | (8 * (v30 & 3));
    v33 = *(_DWORD *)(v30 & 0xFFFFFFFFFFFFFFFCLL) >> v32;
    if (v32 + (unint64_t)v20 >= 0x21)
      v33 |= *(_DWORD *)(v31 + 4) << -(char)v32;
    v34 = v33 & (0xFFFFFFFF >> -(char)v20);
    if (!v34)
      return result;
    a5 += ((v29 * v9) >> 3) + (unint64_t)((v23 * i) >> 3);
    ++v10;
    v11 += 6;
  }
  v25 = ((v24 + v14) >> 3) + a5;
  v26 = v25 & 0xFFFFFFFFFFFFFFFCLL;
  v27 = 8 * (v25 & 3);
  v28 = *(_DWORD *)(v25 & 0xFFFFFFFFFFFFFFFCLL) >> v27;
  if (v27 + (unint64_t)v22 >= 0x21)
    v28 |= *(_DWORD *)(v26 + 4) << -(char)v27;
  v29 = v28 & (0xFFFFFFFF >> -(char)v22);
  if (a4 != v10)
    goto LABEL_16;
LABEL_23:
  if (a8 <= 0.0)
  {
    v36 = i;
    goto LABEL_51;
  }
  if ((_DWORD)v22)
  {
    v35 = 0;
    v29 = 0;
    v36 = 0;
    result = 0xFFFFFFFF >> -(char)v22;
    do
    {
      v37 = ((v35 * v23 + v14) >> 3) + a5;
      v38 = v37 & 0xFFFFFFFFFFFFFFFCLL;
      v39 = 8 * (v37 & 3);
      v40 = *(_DWORD *)(v37 & 0xFFFFFFFFFFFFFFFCLL) >> v39;
      if ((unint64_t)(v39 + v22) >= 0x21)
        v40 |= *(_DWORD *)(v38 + 4) << -(char)v39;
      if (v35)
      {
        v41 = (((v35 - 1) * v23 + v14) >> 3) + a5;
        v42 = v41 & 0xFFFFFFFFFFFFFFFCLL;
        v43 = 8 * (v41 & 3);
        v44 = *(_DWORD *)(v41 & 0xFFFFFFFFFFFFFFFCLL) >> v43;
        if ((unint64_t)(v43 + v22) >= 0x21)
          v44 |= *(_DWORD *)(v42 + 4) << -(char)v43;
        v45 = v44 & result;
      }
      else
      {
        v45 = 0;
      }
      v46 = v40 & result;
      v47 = 0.0;
      v48 = v46 >= v45;
      v49 = v46 - v45;
      if (v49 != 0 && v48)
      {
        v50 = a3 + ((a3 + 31) & 0xFFFFFFF8) * v45;
        do
        {
          v55 = (v50 >> 3) + a5 + ((v23 * i) >> 3);
          v56 = v55 & 0xFFFFFFFFFFFFFFFCLL;
          v57 = a3 & 7 | (8 * (v55 & 3));
          v58 = *(_DWORD *)(v55 & 0xFFFFFFFFFFFFFFFCLL) >> v57;
          if (v57 >= 9)
            v58 |= *(_DWORD *)(v56 + 4) << -(char)v57;
          v51 = (v58 >> 22) & 3;
          v52 = (float)(v58 & 0x3FFFFF);
          v53 = v52 * 0.0078125;
          v54 = v52 * 0.000061035;
          if (!v51)
            v52 = v52 * 0.00000095367;
          if (v51 == 1)
            v52 = v54;
          if (v51 == 2)
            v52 = v53;
          v47 = v52 + v47;
          if (v52 >= a8)
            ++v29;
          v50 += v9;
          --v49;
        }
        while (v49);
      }
      if (v47 >= a8)
        ++v36;
      ++v35;
    }
    while (v35 != i);
LABEL_51:
    if (a6)
LABEL_52:
      *a6 = v36;
  }
  else
  {
    v29 = 0;
    if (a8 > 0.0)
      v36 = 0;
    else
      v36 = i;
    if (a6)
      goto LABEL_52;
  }
  if (a7)
    *a7 = v29;
  return result;
}

