void sub_19C2FAC34(uint64_t a1, uint64_t *a2)
{
  sub_19C43877C(*(_QWORD *)(a1 + 176), a2);
}

void sub_19C2FAC3C(uint64_t a1, const UInt8 *a2)
{
  sub_19C438B28(*(_QWORD *)(a1 + 176), a2);
}

void sub_19C2FAC44(uint64_t a1)
{
  sub_19C330B68(*(_QWORD **)(*(_QWORD *)(a1 + 176) + 72));
}

uint64_t sub_19C2FAC50(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(result + 176) + 72);
  if (*(_BYTE *)(*(_QWORD *)(v1 + 232) + 192))
  {
    v2 = *(_QWORD *)(v1 + 264);
    if (v2)
      return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 8) + 168))(*(_QWORD *)(v2 + 8));
  }
  return result;
}

_QWORD *sub_19C2FAC80(uint64_t a1)
{
  return sub_19C3307E4(*(_QWORD **)(*(_QWORD *)(a1 + 176) + 72));
}

uint64_t sub_19C2FAC8C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v1 = *(_QWORD *)(a1 + 176);
  sub_19C330D00(*(_QWORD *)(v1 + 72));
  *(_BYTE *)(v1 + 88) = 0;
  v2 = *(_QWORD *)(v1 + 96);
  *(_QWORD *)(v1 + 96) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  result = *(_QWORD *)(v1 + 112);
  *(_QWORD *)(v1 + 112) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_19C2FACEC(uint64_t a1, uint64_t a2)
{
  sub_19C438C90(*(_QWORD *)(a1 + 176), a2);
}

uint64_t sub_19C2FACF4()
{
  return 1;
}

BOOL sub_19C2FACFC(uint64_t a1)
{
  const void **v1;
  int v2;
  size_t v3;
  const void **v4;
  const void *v5;

  v1 = *(const void ***)(a1 + 8);
  v2 = *((char *)v1 + 23);
  if (v2 >= 0)
    v3 = *((unsigned __int8 *)v1 + 23);
  else
    v3 = (size_t)v1[1];
  if (v3 == strlen((const char *)language_modeling::v1::kLanguageModelTypeToucan))
  {
    v4 = v2 >= 0 ? v1 : (const void **)*v1;
    if (!memcmp(v4, (const void *)language_modeling::v1::kLanguageModelTypeToucan, v3))
      return 1;
  }
  if (v3 != strlen((const char *)language_modeling::v1::kLanguageModelTypeToucanCPU))
    return 0;
  if (v2 >= 0)
    v5 = v1;
  else
    v5 = *v1;
  return memcmp(v5, (const void *)language_modeling::v1::kLanguageModelTypeToucanCPU, v3) == 0;
}

BOOL sub_19C2FADB0(uint64_t a1)
{
  uint64_t v2;
  int v3;
  size_t v4;
  const void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  _BOOL8 v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  __int128 *v20;
  int v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v25;
  uint64_t v26;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(char *)(v2 + 23);
  if (v3 >= 0)
    v4 = *(unsigned __int8 *)(v2 + 23);
  else
    v4 = *(_QWORD *)(v2 + 8);
  if (v4 == strlen((const char *)language_modeling::v1::kLanguageModelTypeTokenID))
  {
    v5 = v3 >= 0 ? (const void *)v2 : *(const void **)v2;
    if (!memcmp(v5, (const void *)language_modeling::v1::kLanguageModelTypeTokenID, v4))
    {
      v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 176) + 72) + 232);
      if (*(char *)(v19 + 455) < 0)
      {
        sub_19C2B5238(&v25, *(void **)(v19 + 432), *(_QWORD *)(v19 + 440));
        v21 = SHIBYTE(v26);
        if ((SHIBYTE(v26) & 0x80000000) == 0)
          return v21 != 0;
      }
      else
      {
        v20 = (__int128 *)(v19 + 432);
        v25 = *v20;
        v26 = *((_QWORD *)v20 + 2);
        v21 = SHIBYTE(v26);
        if ((SHIBYTE(v26) & 0x80000000) == 0)
          return v21 != 0;
      }
      v16 = *((_QWORD *)&v25 + 1) != 0;
      operator delete((void *)v25);
      return v16;
    }
  }
  v6 = *(_QWORD *)(a1 + 176);
  v7 = *(_QWORD *)(v6 + 72);
  v8 = *(std::__shared_weak_count **)(v6 + 80);
  *(_QWORD *)&v25 = v7;
  *((_QWORD *)&v25 + 1) = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  if (!*(_QWORD *)(v7 + 120)
    || !(*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 112) + 184))(*(_QWORD *)(a1 + 112)))
  {
    v16 = 0;
    if (!v8)
      return v16;
    goto LABEL_28;
  }
  v11 = *(_QWORD *)(a1 + 176);
  v12 = *(_QWORD *)(v11 + 72);
  v13 = *(std::__shared_weak_count **)(v11 + 80);
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
    v16 = *(unsigned __int8 *)(*(_QWORD *)(v12 + 232) + 429) != 0;
    v17 = (unint64_t *)&v13->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  else
  {
    v16 = *(unsigned __int8 *)(*(_QWORD *)(v12 + 232) + 429) != 0;
  }
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v25 + 1);
  if (*((_QWORD *)&v25 + 1))
  {
LABEL_28:
    v22 = (unint64_t *)&v8->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return v16;
}

void sub_19C2FAF90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_19C2B43C8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19C2FAFA4(_QWORD *a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t *a4@<X3>, void ***a5@<X8>)
{
  uint64_t v10;
  int v11;
  size_t v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  uint64_t v19;
  const void *v20;
  const void *v21;
  const __CFString *v22;
  CFTypeID TypeID;
  unint64_t *v24;
  unint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  CFTypeRef *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  void *exception;
  void *__p[2];
  char v40;
  uint64_t v41;
  _QWORD v42[3];
  _QWORD *v43;
  _BYTE v44[24];
  _BYTE *v45;
  CFTypeRef cf[3];
  CFTypeRef *v47;
  _QWORD v48[3];
  _QWORD *v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v10 = a1[1];
  v11 = *(char *)(v10 + 23);
  if (v11 >= 0)
    v12 = *(unsigned __int8 *)(v10 + 23);
  else
    v12 = *(_QWORD *)(v10 + 8);
  if (v12 == strlen((const char *)language_modeling::v1::kLanguageModelTypeTokenID))
  {
    v13 = v11 >= 0 ? (const void *)v10 : *(const void **)v10;
    if (!memcmp(v13, (const void *)language_modeling::v1::kLanguageModelTypeTokenID, v12))
    {
      sub_19C438F7C(a1[22], a2, a3, a4, a5);
      return;
    }
  }
  v41 = 0;
  if (a2[1] - *a2 != a3[1] - *a3)
    __assert_rtn("normalizedNameTokenConditionalProbability", "ToucanLanguageModelSession.cpp", 1165, "tokens.size() == tokensMetadata.size()");
  v14 = a1[22];
  v15 = *(_QWORD *)(v14 + 72);
  v16 = *(std::__shared_weak_count **)(v14 + 80);
  v48[0] = v15;
  v48[1] = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(p_shared_owners);
    while (__stxr(v18 + 1, p_shared_owners));
  }
  v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 64))(v15);
  v20 = (const void *)MEMORY[0x1A1AD2A04](v19);
  v21 = v20;
  if (v20)
    CFRetain(v20);
  sub_19C297DB4(cf, v21);
  v22 = (const __CFString *)cf[0];
  if (!cf[0])
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD3154](exception, "Could not construct");
    goto LABEL_51;
  }
  TypeID = CFStringGetTypeID();
  if (TypeID != CFGetTypeID(v22))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD3154](exception, "Could not convert");
LABEL_51:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  sub_19C297E60(__p, v22);
  if (cf[0])
    CFRelease(cf[0]);
  if (v16)
  {
    v24 = (unint64_t *)&v16->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v26 = operator new(0x20uLL);
  v26[1] = __p;
  v27 = v26 + 1;
  *v26 = &off_1E3D39190;
  v26[2] = a1;
  v26[3] = &v41;
  v49 = v26;
  cf[0] = &off_1E3D391E8;
  cf[1] = a1;
  v47 = cf;
  v28 = a1[22];
  v29 = (char *)operator new(0x20uLL);
  *(_QWORD *)v29 = &off_1E3D39190;
  *(_OWORD *)(v29 + 8) = *(_OWORD *)v27;
  *((_QWORD *)v29 + 3) = v27[2];
  v45 = v29;
  v43 = v42;
  v42[0] = &off_1E3D391E8;
  v42[1] = a1;
  sub_19C4391B0(a5, v28, a2, a3, a4, (uint64_t)v44, (uint64_t)v42);
  v30 = v43;
  if (v43 == v42)
  {
    v31 = 4;
    v30 = v42;
  }
  else
  {
    if (!v43)
      goto LABEL_29;
    v31 = 5;
  }
  (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_29:
  v32 = v45;
  if (v45 == v44)
  {
    v33 = 4;
    v32 = v44;
  }
  else
  {
    if (!v45)
      goto LABEL_34;
    v33 = 5;
  }
  (*(void (**)(void))(*v32 + 8 * v33))();
LABEL_34:
  v34 = v47;
  if (v47 == cf)
  {
    v35 = 4;
    v34 = cf;
  }
  else
  {
    if (!v47)
      goto LABEL_39;
    v35 = 5;
  }
  (*((void (**)(void))*v34 + v35))();
LABEL_39:
  v36 = v49;
  if (v49 == v48)
  {
    v37 = 4;
    v36 = v48;
  }
  else
  {
    if (!v49)
      goto LABEL_44;
    v37 = 5;
  }
  (*(void (**)(void))(*v36 + 8 * v37))();
LABEL_44:
  if (v40 < 0)
    operator delete(__p[0]);
}

void sub_19C2FB360(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,const void *a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  void *v28;
  uint64_t v29;

  __cxa_free_exception(v28);
  sub_19C2E5670(&a25);
  sub_19C2B43C8(v29 - 120);
  _Unwind_Resume(a1);
}

void sub_19C2FB4A0()
{
  JUMPOUT(0x1A1AD355CLL);
}

_QWORD *sub_19C2FB4B4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E3D391E8;
  result[1] = v3;
  return result;
}

uint64_t sub_19C2FB4E8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E3D391E8;
  a2[1] = v2;
  return result;
}

void sub_19C2FB504(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v6;
  void *v7[2];
  uint64_t v8;
  int v9;
  void *__p[2];
  char v11;
  int v12;

  *(_OWORD *)v7 = *(_OWORD *)a2;
  v8 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v9 = *(_DWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a1 + 8);
  sub_19C297950(__p, (const UInt8 *)v7);
  v12 = v9;
  sub_19C2F7888(v6, (unsigned __int8 *)__p, a3, a4);
  if ((v11 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v8) & 0x80000000) == 0)
      return;
LABEL_5:
    operator delete(v7[0]);
    return;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v8) < 0)
    goto LABEL_5;
}

void sub_19C2FB5AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
  {
    operator delete(__p);
    if ((a14 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a9);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C2FB5F8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK17language_modeling2v126ToucanLanguageModelSession41normalizedNameTokenConditionalProbabilityERK"
                     "NSt3__16vectorINS3_INS0_5TokenENS2_9allocatorIS4_EEEENS5_IS7_EEEERKNS3_INS3_INS0_13TokenMetadataENS"
                     "5_ISC_EEEENS5_ISE_EEEERKNS0_17LinguisticContextEE3$_1"
    || ((v3 & (unint64_t)"ZNK17language_modeling2v126ToucanLanguageModelSession41normalizedNameTokenConditionalPro"
                                "babilityERKNSt3__16vectorINS3_INS0_5TokenENS2_9allocatorIS4_EEEENS5_IS7_EEEERKNS3_INS3_I"
                                "NS0_13TokenMetadataENS5_ISC_EEEENS5_ISE_EEEERKNS0_17LinguisticContextEE3$_1" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZNK17language_modeling2v126ToucanLanguageModelSession41normalizedNameTokenConditionalProbabilityERKNSt3__16vectorINS3_INS0_5TokenENS2_9allocatorIS4_EEEENS5_IS7_EEEERKNS3_INS3_INS0_13TokenMetadataENS5_ISC_EEEENS5_ISE_EEEERKNS0_17LinguisticContextEE3$_1")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK17language_modeling2v126ToucanLanguageModelSession41normalizedNameTokenConditionalProbabilityERKNSt3__16vectorINS3_INS0_5TokenENS2_9allocatorIS4_EEEENS5_IS7_EEEERKNS3_INS3_INS0_13TokenMetadataENS5_ISC_EEEENS5_ISE_EEEERKNS0_17LinguisticContextEE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *sub_19C2FB64C()
{
  return &unk_1E3D33660;
}

void sub_19C2FB65C()
{
  JUMPOUT(0x1A1AD355CLL);
}

__n128 sub_19C2FB670(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E3D39190;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_19C2FB6B0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E3D39190;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

double sub_19C2FB6D8(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t *v6;
  uint64_t v7;
  void **v8;
  _QWORD *v9;
  _QWORD *v10;
  void *v11;
  void **v12;
  void **v13;
  void **v14;
  void **v15;
  void **v16;
  void *v17;
  unsigned __int16 *v18;
  int v19;
  int v20;
  _BOOL4 v22;
  void *v23;
  _QWORD *v24;
  uint64_t v25;
  double v26;
  void **v27;
  void **v28;
  void **v29;
  void **v30;
  void *v32;
  void **v33;
  void *v34[2];
  uint64_t v35;
  int v36;
  _DWORD v37[2];
  void *__p;
  _QWORD *v39;
  _QWORD *v40;
  void **v41;
  void **v42;
  char v43;
  void *v44;
  void **v45;
  unint64_t *v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)v34 = *(_OWORD *)a2;
  v35 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v36 = *(_DWORD *)(a2 + 24);
  v5 = a1[2];
  v45 = 0;
  v46 = 0;
  v44 = 0;
  v42 = &v44;
  v43 = 0;
  v6 = (unint64_t *)operator new(0x20uLL);
  v45 = (void **)(v6 + 4);
  v46 = v6 + 4;
  *v6 = 0;
  *((_DWORD *)v6 + 4) = v37[0];
  *(_DWORD *)((char *)v6 + 19) = *(_DWORD *)((char *)v37 + 3);
  *((_BYTE *)v6 + 23) = 0;
  v6[3] = 0;
  v44 = v6;
  sub_19C3515D8((uint64_t **)&__p, v6, v6 + 4);
  v7 = *(_QWORD *)__p;
  v8 = (void **)operator new();
  sub_19C2E1F84((uint64_t)v8, v7);
  v41 = v8;
  v9 = __p;
  if (__p)
  {
    v10 = v39;
    v11 = __p;
    if (v39 != __p)
    {
      do
      {
        v13 = (void **)*--v10;
        v12 = v13;
        *v10 = 0;
        if (v13)
        {
          v14 = sub_19C2E25C8(v12);
          MEMORY[0x1A1AD355C](v14, 0x1030C403C62F202);
        }
      }
      while (v10 != v9);
      v11 = __p;
    }
    v39 = v9;
    operator delete(v11);
  }
  v15 = (void **)v44;
  if (v44)
  {
    v16 = v45;
    v17 = v44;
    if (v45 != v44)
    {
      do
      {
        if (*((char *)v16 - 9) < 0)
          operator delete(*(v16 - 4));
        v16 -= 4;
      }
      while (v16 != v15);
      v17 = v44;
    }
    v45 = v15;
    operator delete(v17);
  }
  v18 = (unsigned __int16 *)a1[1];
  if (*((char *)v18 + 23) < 0)
  {
    v18 = *(unsigned __int16 **)v18;
    if (*(_QWORD *)(a1[1] + 8) < 3uLL)
      goto LABEL_25;
  }
  else if (*((unsigned __int8 *)v18 + 23) < 3uLL)
  {
    goto LABEL_25;
  }
  v19 = *v18;
  v20 = *((unsigned __int8 *)v18 + 2);
  if (v19 != 28261 || v20 != 95)
    goto LABEL_25;
  if (SHIBYTE(v35) < 0)
  {
    v32 = v34[1];
    if (v34[1] > (void *)1)
    {
      v33 = (void **)v34[0];
      goto LABEL_36;
    }
LABEL_25:
    v22 = 0;
    goto LABEL_26;
  }
  v32 = (void *)HIBYTE(v35);
  if (HIBYTE(v35) <= 1u)
    goto LABEL_25;
  v33 = v34;
LABEL_36:
  v22 = *(unsigned __int16 *)((char *)v33 + (_QWORD)v32 - 2) == 29479;
LABEL_26:
  v23 = (void *)operator new();
  sub_19C2E1F84((uint64_t)v23, (uint64_t)v8);
  v44 = v23;
  v39 = 0;
  v24 = operator new(8uLL);
  __p = v24;
  v40 = v24 + 1;
  v25 = operator new();
  sub_19C2E1F84(v25, (uint64_t)v23);
  *v24 = v25;
  v39 = v24 + 1;
  v26 = sub_19C2FBB90(v5, *(void **)(*(_QWORD *)a3 + 24), *(_QWORD *)(*(_QWORD *)a3 + 32), (uint64_t **)&__p, a1[3], v22);
  v27 = (void **)*v24;
  *v24 = 0;
  if (v27)
  {
    v28 = sub_19C2E25C8(v27);
    MEMORY[0x1A1AD355C](v28, 0x1030C403C62F202);
  }
  operator delete(v24);
  v29 = sub_19C2E25C8((void **)v23);
  MEMORY[0x1A1AD355C](v29, 0x1030C403C62F202);
  v30 = sub_19C2E25C8(v8);
  MEMORY[0x1A1AD355C](v30, 0x1030C403C62F202);
  if (SHIBYTE(v35) < 0)
    operator delete(v34[0]);
  return v26;
}

void sub_19C2FBA2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void **a21,__int16 a22,char a23,char a24,uint64_t a25,void *a26,uint64_t a27)
{
  void ***v27;

  language_modeling::v1::CompletionStem::~CompletionStem(v27);
  operator delete(__p);
  language_modeling::v1::CompletionStem::~CompletionStem((void ***)&a26);
  language_modeling::v1::CompletionStem::~CompletionStem(&a21);
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(a1);
}

uint64_t sub_19C2FBB30(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK17language_modeling2v126ToucanLanguageModelSession41normalizedNameTokenConditionalProbabilityERK"
                     "NSt3__16vectorINS3_INS0_5TokenENS2_9allocatorIS4_EEEENS5_IS7_EEEERKNS3_INS3_INS0_13TokenMetadataENS"
                     "5_ISC_EEEENS5_ISE_EEEERKNS0_17LinguisticContextEE3$_0"
    || ((v3 & (unint64_t)"ZNK17language_modeling2v126ToucanLanguageModelSession41normalizedNameTokenConditionalPro"
                                "babilityERKNSt3__16vectorINS3_INS0_5TokenENS2_9allocatorIS4_EEEENS5_IS7_EEEERKNS3_INS3_I"
                                "NS0_13TokenMetadataENS5_ISC_EEEENS5_ISE_EEEERKNS0_17LinguisticContextEE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZNK17language_modeling2v126ToucanLanguageModelSession41normalizedNameTokenConditionalProbabilityERKNSt3__16vectorINS3_INS0_5TokenENS2_9allocatorIS4_EEEENS5_IS7_EEEERKNS3_INS3_INS0_13TokenMetadataENS5_ISC_EEEENS5_ISE_EEEERKNS0_17LinguisticContextEE3$_0")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK17language_modeling2v126ToucanLanguageModelSession41normalizedNameTokenConditionalProbabilityERKNSt3__16vectorINS3_INS0_5TokenENS2_9allocatorIS4_EEEENS5_IS7_EEEERKNS3_INS3_INS0_13TokenMetadataENS5_ISC_EEEENS5_ISE_EEEERKNS0_17LinguisticContextEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *sub_19C2FBB84()
{
  return &unk_1E3D33650;
}

double sub_19C2FBB90(uint64_t a1, void *a2, uint64_t a3, uint64_t **a4, uint64_t a5, int a6)
{
  const void *v10;
  int64_t v11;
  std::string *v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  float v16;
  uint64_t v17;
  void **v18;
  void **v19;
  void **v20;
  void **v21;
  void **v22;
  float v23;
  char v25[24];
  std::string::value_type __s[8];
  char v27;
  int v28;
  std::string v29;
  int v30;
  void *__p[3];
  float v32;
  void *v33;
  void *v34;
  char *v35;
  void *v36[12];
  _BYTE *v37;
  _BYTE *v38;
  void **v39;
  void **v40;
  void **v41;
  void **v42;

  v36[0] = a2;
  v36[1] = (void *)((a3 - (uint64_t)a2) >> 5);
  sub_19C3E37B4(&v41, (__int128 **)v36);
  sub_19C2FBF40((uint64_t *)&v39, a1, (uint64_t)&v41, a4);
  sub_19C2E1F84((uint64_t)v36, (uint64_t)v39);
  v10 = v37;
  v34 = 0;
  v35 = 0;
  v33 = 0;
  v11 = v38 - v37;
  if (v38 != v37)
  {
    if (v11 < 0)
      sub_19C2A18E8();
    v33 = operator new(v38 - v37);
    v35 = (char *)v33 + 4 * (v11 >> 2);
    memmove(v33, v10, v11);
    v34 = v35;
  }
  v32 = 0.0;
  if (!a6)
  {
    v13 = 0x3830544E5F555FLL;
    v14 = 7;
    goto LABEL_11;
  }
  *((_BYTE *)&v29.__r_.__value_.__s + 23) = 7;
  strcpy((char *)&v29, "_U_NT08");
  v27 = 2;
  strcpy(__s, "'s");
  v12 = std::string::append(&v29, __s, 2uLL);
  v13 = v12->__r_.__value_.__r.__words[0];
  v14 = HIBYTE(v12->__r_.__value_.__r.__words[2]);
  v12->__r_.__value_.__r.__words[0] = 0;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  if (v27 < 0)
  {
    operator delete(*(void **)__s);
    if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_11;
  }
  else if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_11;
  }
  operator delete(v29.__r_.__value_.__l.__data_);
LABEL_11:
  v15 = *(_QWORD *)(a1 + 112);
  v25[23] = 7;
  strcpy(v25, "_U_NT08");
  sub_19C351494(__s, (uint64_t)v25);
  sub_19C297950(&v29, (const UInt8 *)__s);
  v30 = v28;
  (*(void (**)(void **__return_ptr, uint64_t, std::string *))(*(_QWORD *)v15 + 16))(__p, v15, &v29);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v29.__r_.__value_.__l.__data_);
    if ((v27 & 0x80000000) == 0)
      goto LABEL_13;
  }
  else if ((v27 & 0x80000000) == 0)
  {
    goto LABEL_13;
  }
  operator delete(*(void **)__s);
LABEL_13:
  (*(void (**)(_QWORD, void **, void **, float *, uint64_t))(**(_QWORD **)(a1 + 96) + 24))(*(_QWORD *)(a1 + 96), __p, &v33, &v32, a5);
  v16 = v32;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v14 < 0)
    operator delete((void *)v13);
  if (v33)
  {
    v34 = v33;
    operator delete(v33);
  }
  sub_19C2E25C8(v36);
  v17 = (uint64_t)v39;
  if (v39)
  {
    v18 = v40;
    v19 = v39;
    if (v40 != v39)
    {
      do
        v18 = sub_19C2E25C8(v18 - 23);
      while (v18 != (void **)v17);
      v19 = v39;
    }
    v40 = (void **)v17;
    operator delete(v19);
  }
  v20 = v41;
  if (v41)
  {
    v21 = v42;
    v22 = v41;
    if (v42 != v41)
    {
      do
      {
        if (*((char *)v21 - 9) < 0)
          operator delete(*(v21 - 4));
        v21 -= 4;
      }
      while (v21 != v20);
      v22 = v41;
    }
    v42 = v20;
    operator delete(v22);
  }
  v23 = log10f(v16);
  if (v16 <= 0.0)
    return -10.0;
  return v23;
}

void sub_19C2FBE80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,void *a34)
{
  uint64_t v34;

  if (a18 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  if (a31)
    operator delete(a31);
  sub_19C2E25C8(&a34);
  sub_19C2FCDA4((void **)(v34 - 128));
  sub_19C2E23C0((void **)(v34 - 104));
  _Unwind_Resume(a1);
}

void sub_19C2FBF40(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t **a4)
{
  uint64_t v6;
  int v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  char v16;
  char v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  unint64_t v25;
  void *v26;
  size_t v27;
  void **v28;
  __int128 v29;
  void **v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  void **v37;
  __int128 v38;
  void **v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  __int128 v43;
  __int128 v44;
  void **v45;
  char *v46;
  uint64_t v47;
  void **v48;
  uint64_t v49;
  void **v50;
  __int128 v51;
  void **v52;
  int64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  char *v58;
  void *v59;
  __int128 v60;
  void **v61;
  unsigned __int8 *v62;
  unsigned __int8 v63;
  __int128 v64;
  __int128 v65;
  void *v66;
  size_t v67;
  unint64_t v68;
  char *v69;
  size_t v70;
  void **v71;
  __int128 v72;
  void **v73;
  int64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char *v78;
  char *v79;
  void *v80;
  __int128 v81;
  void **v82;
  _DWORD *v83;
  uint64_t v84;
  char v85;
  __int128 v86;
  __int128 v87;
  _DWORD *v88;
  __int128 *v89;
  __int128 v90;
  void **v91;
  void **v92;
  void *v93;
  void **v94;
  void **v95;
  void *v96;
  _QWORD *v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  void **v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t *v104;
  _QWORD *i;
  uint64_t v106;
  unint64_t v107;
  __int128 *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t *v116;
  uint64_t *v117;
  void *v118;
  void **v119;
  void **v120;
  void **v121;
  uint64_t v122;
  uint64_t *v123;
  uint64_t v124;
  void *v125;
  uint64_t *v126;
  void **v127;
  void *v128;
  void *v129;
  unint64_t v130;
  void *__p[2];
  void *v132;
  int v133;
  void *v134;
  void **v135;
  char *v136;
  _QWORD v137[3];
  _QWORD *v138;
  __int128 __dst;
  uint64_t v140;
  __int128 *p_dst;
  char v142;
  uint64_t v143;

  v143 = *MEMORY[0x1E0C80C00];
  if (a4[1] == *a4)
    __assert_rtn("_buildCompletionStems", "ToucanLanguageModelSession.cpp", 455, "stems.size() > 0");
  v6 = a2;
  v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 112) + 192))(*(_QWORD *)(a2 + 112));
  sub_19C34F930((uint64_t)&v125, *a4, a4[1], v8);
  v9 = *(_QWORD *)(v6 + 176);
  v10 = *(_QWORD *)(v9 + 72);
  v11 = *(std::__shared_weak_count **)(v9 + 80);
  *(_QWORD *)&__dst = v10;
  *((_QWORD *)&__dst + 1) = v11;
  if (!v11)
  {
    if (!*(_QWORD *)(v10 + 120))
      goto LABEL_187;
    goto LABEL_11;
  }
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldxr(p_shared_owners);
  while (__stxr(v13 + 1, p_shared_owners));
  if (*(_QWORD *)(v10 + 120))
  {
LABEL_11:
    v16 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 112) + 184))(*(_QWORD *)(v6 + 112));
    v17 = v16;
    if (!v11)
      goto LABEL_15;
    v18 = (unint64_t *)&v11->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      if ((v17 & 1) == 0)
        goto LABEL_187;
    }
    else
    {
LABEL_15:
      if ((v16 & 1) == 0)
        goto LABEL_187;
    }
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
    v20 = (uint64_t *)v125;
    v123 = v126;
    if (v125 == v126)
    {
LABEL_188:
      v102 = 0;
      goto LABEL_189;
    }
    v122 = a3;
    v124 = v6;
    while (1)
    {
      v21 = *v20;
      v22 = operator new();
      sub_19C2E1F84(v22, v21);
      v127 = (void **)v22;
      sub_19C3D80D8(v22, v122);
      v137[0] = &off_1E3D390E0;
      v137[1] = v124;
      v138 = v137;
      LOBYTE(__dst) = 0;
      v142 = 0;
      v134 = 0;
      v135 = 0;
      v136 = 0;
      v23 = *(_QWORD *)(v22 + 160);
      v24 = (uint64_t *)(v22 + 160);
      if (*(_QWORD *)(v22 + 168) == v23)
      {
        v46 = 0;
        v45 = 0;
      }
      else
      {
        v25 = 0;
        do
        {
          if (!v138)
            sub_19C2CCC60();
          (*(void (**)(void **__return_ptr, _QWORD *, unint64_t, __int128 *, void **))(*v138 + 48))(__p, v138, v23 + 32 * v25, &__dst, &v134);
          v28 = v135;
          if (v135 >= (void **)v136)
          {
            v30 = (void **)v134;
            v31 = ((char *)v135 - (_BYTE *)v134) >> 5;
            v32 = v31 + 1;
            if ((unint64_t)(v31 + 1) >> 59)
              sub_19C2A18E8();
            v33 = v136 - (_BYTE *)v134;
            if ((v136 - (_BYTE *)v134) >> 4 > v32)
              v32 = v33 >> 4;
            if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFE0)
              v34 = 0x7FFFFFFFFFFFFFFLL;
            else
              v34 = v32;
            if (v34 >> 59)
              sub_19C2A143C();
            v35 = (char *)operator new(32 * v34);
            v36 = &v35[32 * v31];
            *(_OWORD *)v36 = *(_OWORD *)__p;
            *((_QWORD *)v36 + 2) = v132;
            __p[1] = 0;
            v132 = 0;
            __p[0] = 0;
            *((_DWORD *)v36 + 6) = v133;
            v37 = (void **)(v36 + 32);
            if (v28 == v30)
            {
              v134 = v36;
              v135 = (void **)(v36 + 32);
              v136 = &v35[32 * v34];
            }
            else
            {
              do
              {
                v38 = *((_OWORD *)v28 - 2);
                *((_QWORD *)v36 - 2) = *(v28 - 2);
                *((_OWORD *)v36 - 2) = v38;
                *(v28 - 3) = 0;
                *(v28 - 2) = 0;
                *(v28 - 4) = 0;
                *((_DWORD *)v36 - 2) = *((_DWORD *)v28 - 2);
                v36 -= 32;
                v28 -= 4;
              }
              while (v28 != v30);
              v28 = (void **)v134;
              v39 = v135;
              v134 = v36;
              v135 = v37;
              v136 = &v35[32 * v34];
              while (v39 != v28)
              {
                if (*((char *)v39 - 9) < 0)
                  operator delete(*(v39 - 4));
                v39 -= 4;
              }
            }
            if (v28)
              operator delete(v28);
            v135 = v37;
            if (SHIBYTE(v132) < 0)
              operator delete(__p[0]);
          }
          else
          {
            v29 = *(_OWORD *)__p;
            v135[2] = v132;
            *(_OWORD *)v28 = v29;
            *((_DWORD *)v28 + 6) = v133;
            v135 = v28 + 4;
          }
          v40 = *v24;
          v41 = *v24 + 32 * v25;
          if (v142)
          {
            if (&__dst != (__int128 *)v41)
            {
              v42 = *(_BYTE *)(v41 + 23);
              if (SHIBYTE(v140) < 0)
              {
                if (v42 >= 0)
                  v26 = (void *)(*v24 + 32 * v25);
                else
                  v26 = *(void **)v41;
                if (v42 >= 0)
                  v27 = *(unsigned __int8 *)(v41 + 23);
                else
                  v27 = *(_QWORD *)(v41 + 8);
                sub_19C2E54A8((void **)&__dst, v26, v27);
              }
              else if ((*(_BYTE *)(v41 + 23) & 0x80) != 0)
              {
                sub_19C2E53E4(&__dst, *(void **)v41, *(_QWORD *)(v41 + 8));
              }
              else
              {
                v43 = *(_OWORD *)v41;
                v140 = *(_QWORD *)(v41 + 16);
                __dst = v43;
              }
            }
            LODWORD(p_dst) = *(_DWORD *)(v40 + 32 * v25 + 24);
          }
          else
          {
            if (*(char *)(v41 + 23) < 0)
            {
              sub_19C2B5238(&__dst, *(void **)v41, *(_QWORD *)(v41 + 8));
            }
            else
            {
              v44 = *(_OWORD *)v41;
              v140 = *(_QWORD *)(v41 + 16);
              __dst = v44;
            }
            LODWORD(p_dst) = *(_DWORD *)(v40 + 32 * v25 + 24);
            v142 = 1;
          }
          ++v25;
          v23 = *(_QWORD *)(v22 + 160);
        }
        while (v25 < (*(_QWORD *)(v22 + 168) - v23) >> 5);
        v45 = (void **)v134;
        v46 = (char *)v135;
      }
      sub_19C35FEA0((void ***)(v22 + 160), v45, v46, (v46 - (char *)v45) >> 5);
      v128 = 0;
      v129 = 0;
      v130 = 0;
      v47 = *(_QWORD *)(v22 + 48);
      v49 = *(_QWORD *)(v22 + 56);
      v48 = (void **)(v22 + 48);
      if (v49 - v47 != 32)
      {
        if (!v138)
          goto LABEL_223;
        (*(void (**)(void **__return_ptr))(*v138 + 48))(__p);
        v50 = (void **)v129;
        if ((unint64_t)v129 >= v130)
        {
          v52 = (void **)v128;
          v53 = ((_BYTE *)v129 - (_BYTE *)v128) >> 5;
          v54 = v53 + 1;
          if ((unint64_t)(v53 + 1) >> 59)
            sub_19C2A18E8();
          v55 = v130 - (_QWORD)v128;
          if ((uint64_t)(v130 - (_QWORD)v128) >> 4 > v54)
            v54 = v55 >> 4;
          if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFE0)
            v56 = 0x7FFFFFFFFFFFFFFLL;
          else
            v56 = v54;
          if (v56 >> 59)
            sub_19C2A143C();
          v57 = (char *)operator new(32 * v56);
          v58 = &v57[32 * v53];
          *(_OWORD *)v58 = *(_OWORD *)__p;
          *((_QWORD *)v58 + 2) = v132;
          __p[1] = 0;
          v132 = 0;
          __p[0] = 0;
          *((_DWORD *)v58 + 6) = v133;
          v59 = v58 + 32;
          if (v50 == v52)
          {
            v128 = v58;
            v129 = v58 + 32;
            v130 = (unint64_t)&v57[32 * v56];
          }
          else
          {
            do
            {
              v60 = *((_OWORD *)v50 - 2);
              *((_QWORD *)v58 - 2) = *(v50 - 2);
              *((_OWORD *)v58 - 2) = v60;
              *(v50 - 3) = 0;
              *(v50 - 2) = 0;
              *(v50 - 4) = 0;
              *((_DWORD *)v58 - 2) = *((_DWORD *)v50 - 2);
              v58 -= 32;
              v50 -= 4;
            }
            while (v50 != v52);
            v50 = (void **)v128;
            v61 = (void **)v129;
            v128 = v58;
            v129 = v59;
            v130 = (unint64_t)&v57[32 * v56];
            while (v61 != v50)
            {
              if (*((char *)v61 - 9) < 0)
                operator delete(*(v61 - 4));
              v61 -= 4;
            }
          }
          if (v50)
            operator delete(v50);
          v129 = v59;
          if (SHIBYTE(v132) < 0)
            operator delete(__p[0]);
        }
        else
        {
          v51 = *(_OWORD *)__p;
          *((_QWORD *)v129 + 2) = v132;
          *(_OWORD *)v50 = v51;
          *((_DWORD *)v50 + 6) = v133;
          v129 = v50 + 4;
        }
        v62 = (unsigned __int8 *)*v48;
        if (v142)
        {
          if (&__dst != (__int128 *)v62)
          {
            v63 = v62[23];
            if (SHIBYTE(v140) < 0)
            {
              if ((v63 & 0x80u) == 0)
                v66 = *v48;
              else
                v66 = *(void **)v62;
              if ((v63 & 0x80u) == 0)
                v67 = v62[23];
              else
                v67 = *((_QWORD *)v62 + 1);
              sub_19C2E54A8((void **)&__dst, v66, v67);
            }
            else if ((v62[23] & 0x80) != 0)
            {
              sub_19C2E53E4(&__dst, *(void **)v62, *((_QWORD *)v62 + 1));
            }
            else
            {
              v64 = *(_OWORD *)v62;
              v140 = *((_QWORD *)v62 + 2);
              __dst = v64;
            }
          }
          LODWORD(p_dst) = *((_DWORD *)v62 + 6);
        }
        else
        {
          if ((char)v62[23] < 0)
          {
            sub_19C2B5238(&__dst, *(void **)v62, *((_QWORD *)v62 + 1));
          }
          else
          {
            v65 = *(_OWORD *)v62;
            v140 = *((_QWORD *)v62 + 2);
            __dst = v65;
          }
          LODWORD(p_dst) = *((_DWORD *)v62 + 6);
          v142 = 1;
        }
        v47 = *(_QWORD *)(v22 + 48);
        v49 = *(_QWORD *)(v22 + 56);
        if ((unint64_t)(((v49 - v47) >> 5) - 3) <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v68 = 1;
          while (v138)
          {
            (*(void (**)(void **__return_ptr, _QWORD *, unint64_t, __int128 *, void **))(*v138 + 48))(__p, v138, v47 + 32 * v68, &__dst, &v128);
            v71 = (void **)v129;
            if ((unint64_t)v129 >= v130)
            {
              v73 = (void **)v128;
              v74 = ((_BYTE *)v129 - (_BYTE *)v128) >> 5;
              v75 = v74 + 1;
              if ((unint64_t)(v74 + 1) >> 59)
                sub_19C2A18E8();
              v76 = v130 - (_QWORD)v128;
              if ((uint64_t)(v130 - (_QWORD)v128) >> 4 > v75)
                v75 = v76 >> 4;
              if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFE0)
                v77 = 0x7FFFFFFFFFFFFFFLL;
              else
                v77 = v75;
              if (v77 >> 59)
                sub_19C2A143C();
              v78 = (char *)operator new(32 * v77);
              v79 = &v78[32 * v74];
              *(_OWORD *)v79 = *(_OWORD *)__p;
              *((_QWORD *)v79 + 2) = v132;
              __p[1] = 0;
              v132 = 0;
              __p[0] = 0;
              *((_DWORD *)v79 + 6) = v133;
              v80 = v79 + 32;
              if (v71 == v73)
              {
                v128 = v79;
                v129 = v79 + 32;
                v130 = (unint64_t)&v78[32 * v77];
              }
              else
              {
                do
                {
                  v81 = *((_OWORD *)v71 - 2);
                  *((_QWORD *)v79 - 2) = *(v71 - 2);
                  *((_OWORD *)v79 - 2) = v81;
                  *(v71 - 3) = 0;
                  *(v71 - 2) = 0;
                  *(v71 - 4) = 0;
                  *((_DWORD *)v79 - 2) = *((_DWORD *)v71 - 2);
                  v79 -= 32;
                  v71 -= 4;
                }
                while (v71 != v73);
                v71 = (void **)v128;
                v82 = (void **)v129;
                v128 = v79;
                v129 = v80;
                v130 = (unint64_t)&v78[32 * v77];
                while (v82 != v71)
                {
                  if (*((char *)v82 - 9) < 0)
                    operator delete(*(v82 - 4));
                  v82 -= 4;
                }
              }
              if (v71)
                operator delete(v71);
              v129 = v80;
              if (SHIBYTE(v132) < 0)
                operator delete(__p[0]);
            }
            else
            {
              v72 = *(_OWORD *)__p;
              *((_QWORD *)v129 + 2) = v132;
              *(_OWORD *)v71 = v72;
              *((_DWORD *)v71 + 6) = v133;
              v129 = v71 + 4;
            }
            v83 = *v48;
            v84 = (uint64_t)*v48 + 32 * v68;
            if (v142)
            {
              if (&__dst != (__int128 *)v84)
              {
                v85 = *(_BYTE *)(v84 + 23);
                if (SHIBYTE(v140) < 0)
                {
                  if (v85 >= 0)
                    v69 = (char *)*v48 + 32 * v68;
                  else
                    v69 = *(char **)v84;
                  if (v85 >= 0)
                    v70 = *(unsigned __int8 *)(v84 + 23);
                  else
                    v70 = *(_QWORD *)(v84 + 8);
                  sub_19C2E54A8((void **)&__dst, v69, v70);
                }
                else if ((*(_BYTE *)(v84 + 23) & 0x80) != 0)
                {
                  sub_19C2E53E4(&__dst, *(void **)v84, *(_QWORD *)(v84 + 8));
                }
                else
                {
                  v86 = *(_OWORD *)v84;
                  v140 = *(_QWORD *)(v84 + 16);
                  __dst = v86;
                }
              }
              LODWORD(p_dst) = v83[8 * v68 + 6];
            }
            else
            {
              if (*(char *)(v84 + 23) < 0)
              {
                sub_19C2B5238(&__dst, *(void **)v84, *(_QWORD *)(v84 + 8));
              }
              else
              {
                v87 = *(_OWORD *)v84;
                v140 = *(_QWORD *)(v84 + 16);
                __dst = v87;
              }
              LODWORD(p_dst) = v83[8 * v68 + 6];
              v142 = 1;
            }
            ++v68;
            v47 = *(_QWORD *)(v22 + 48);
            v49 = *(_QWORD *)(v22 + 56);
            if (((v49 - v47) >> 5) - 1 <= v68)
              goto LABEL_148;
          }
LABEL_223:
          sub_19C2CCC60();
        }
      }
LABEL_148:
      v88 = v129;
      if (v49 != v47)
      {
        v89 = (__int128 *)(v49 - 32);
        if ((unint64_t)v129 >= v130)
        {
          v88 = (_DWORD *)sub_19C3079AC((char **)&v128, (uint64_t)v89);
        }
        else
        {
          if (*(char *)(v49 - 9) < 0)
          {
            sub_19C2B5238(v129, *(void **)(v49 - 32), *(_QWORD *)(v49 - 24));
          }
          else
          {
            v90 = *v89;
            *((_QWORD *)v129 + 2) = *(_QWORD *)(v49 - 16);
            *(_OWORD *)v88 = v90;
          }
          v88[6] = *(_DWORD *)(v49 - 8);
          v88 += 8;
        }
        v129 = v88;
      }
      sub_19C35FEA0((void ***)(v22 + 48), (void **)v128, (char *)v88, ((char *)v88 - (_BYTE *)v128) >> 5);
      v91 = (void **)v128;
      if (v128)
      {
        v92 = (void **)v129;
        v93 = v128;
        if (v129 != v128)
        {
          do
          {
            if (*((char *)v92 - 9) < 0)
              operator delete(*(v92 - 4));
            v92 -= 4;
          }
          while (v92 != v91);
          v93 = v128;
        }
        v129 = v91;
        operator delete(v93);
      }
      v94 = (void **)v134;
      if (v134)
      {
        v95 = v135;
        v96 = v134;
        if (v135 != v134)
        {
          do
          {
            if (*((char *)v95 - 9) < 0)
              operator delete(*(v95 - 4));
            v95 -= 4;
          }
          while (v95 != v94);
          v96 = v134;
        }
        v135 = v94;
        operator delete(v96);
      }
      if (v142 && SHIBYTE(v140) < 0)
        operator delete((void *)__dst);
      v97 = v138;
      if (v138 == v137)
        break;
      if (v138)
      {
        v98 = 5;
LABEL_179:
        (*(void (**)(void))(*v97 + 8 * v98))();
      }
      v99 = a1[1];
      if (v99 >= a1[2])
      {
        v100 = sub_19C2FD69C(a1, v22);
      }
      else
      {
        sub_19C2E1F84(a1[1], v22);
        v100 = v99 + 184;
        a1[1] = v99 + 184;
      }
      a1[1] = v100;
      if (v127)
      {
        v101 = sub_19C2E25C8(v127);
        MEMORY[0x1A1AD355C](v101, 0x1030C403C62F202);
      }
      if (++v20 == v123)
      {
        v102 = a1[1];
        v6 = v124;
        goto LABEL_189;
      }
    }
    v97 = v137;
    v98 = 4;
    goto LABEL_179;
  }
  v14 = (unint64_t *)&v11->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_187:
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v103 = (uint64_t *)v125;
  v104 = v126;
  if (v125 == v126)
    goto LABEL_188;
  do
  {
    v106 = *v103;
    sub_19C3D80D8(*v103, a3);
    v107 = a1[1];
    if (v107 >= a1[2])
    {
      v102 = sub_19C2FD69C(a1, v106);
    }
    else
    {
      sub_19C2E1F84(a1[1], v106);
      v102 = v107 + 184;
      a1[1] = v107 + 184;
    }
    a1[1] = v102;
    ++v103;
  }
  while (v103 != v104);
LABEL_189:
  for (i = (_QWORD *)*a1; i != (_QWORD *)v102; i += 23)
  {
    *(_QWORD *)&__dst = &off_1E3D39088;
    *((_QWORD *)&__dst + 1) = v6;
    p_dst = &__dst;
    i[13] = i[12];
    v110 = i[20];
    if (i[21] != v110)
    {
      v111 = 0;
      v112 = 0;
      while (p_dst)
      {
        (*(void (**)(__int128 *, uint64_t, _QWORD *))(*(_QWORD *)p_dst + 48))(p_dst, v110 + v111, i + 12);
        ++v112;
        v110 = i[20];
        v111 += 32;
        if (v112 >= (i[21] - v110) >> 5)
          goto LABEL_202;
      }
LABEL_218:
      sub_19C2CCC60();
    }
LABEL_202:
    v113 = i[6];
    if (i[7] - v113 != 32)
    {
      v114 = 0;
      v115 = 0;
      while (p_dst)
      {
        (*(void (**)(__int128 *, uint64_t, _QWORD *))(*(_QWORD *)p_dst + 48))(p_dst, v113 + v114, i + 12);
        ++v115;
        v113 = i[6];
        v114 += 32;
        if (((i[7] - v113) >> 5) - 1 <= v115)
          goto LABEL_206;
      }
      goto LABEL_218;
    }
LABEL_206:
    v108 = p_dst;
    if (p_dst == &__dst)
    {
      v108 = &__dst;
      v109 = 4;
    }
    else
    {
      if (!p_dst)
        continue;
      v109 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v108 + 8 * v109))();
  }
  v116 = (uint64_t *)v125;
  if (v125)
  {
    v117 = v126;
    v118 = v125;
    if (v126 != v125)
    {
      do
      {
        v120 = (void **)*--v117;
        v119 = v120;
        *v117 = 0;
        if (v120)
        {
          v121 = sub_19C2E25C8(v119);
          MEMORY[0x1A1AD355C](v121, 0x1030C403C62F202);
        }
      }
      while (v117 != v116);
      v118 = v125;
    }
    v126 = v116;
    operator delete(v118);
  }
}

void sub_19C2FCBEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  uint64_t v36;

  sub_19C2B43C8(v36 - 144);
  sub_19C2F06DC(&a13);
  _Unwind_Resume(a1);
}

void **sub_19C2FCDA4(void **a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = (void **)*a1;
  if (*a1)
  {
    v3 = (void **)a1[1];
    v4 = v2;
    if (v3 != v2)
    {
      do
        v3 = sub_19C2E25C8(v3 - 23);
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_19C2FCE00()
{
  JUMPOUT(0x1A1AD355CLL);
}

_QWORD *sub_19C2FCE14(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E3D39088;
  result[1] = v3;
  return result;
}

uint64_t sub_19C2FCE48(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E3D39088;
  a2[1] = v2;
  return result;
}

void sub_19C2FCE64(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  char *v9;
  char *v10;
  unsigned int v11;
  unint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _BYTE *v19;
  unsigned int *v20;
  unint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  uint64_t v24;
  _OWORD *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  unsigned int *v29;
  unsigned int *v30;
  void *__p[2];
  char v32;

  v4 = *(_QWORD *)(a1 + 8);
  sub_19C2FD184((uint64_t)__p, v4, a2, *(unsigned int **)a3, *(unsigned int **)(a3 + 8));
  (*(void (**)(unsigned int **__return_ptr, _QWORD, void **))(**(_QWORD **)(v4 + 112) + 16))(&v29, *(_QWORD *)(v4 + 112), __p);
  v5 = v29;
  if (v30 == v29)
  {
LABEL_36:
    v7 = v29;
  }
  else
  {
    v6 = 4 * (v30 - v29);
    do
    {
      if (((*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v4 + 112) + 96))(*(_QWORD *)(v4 + 112), *v5) & 1) != 0)
        goto LABEL_36;
      ++v5;
      v6 -= 4;
    }
    while (v6);
    v7 = v29;
    v8 = v30;
    if (v29 != v30)
    {
      v9 = *(char **)(a3 + 8);
      while (1)
      {
        v11 = *v7;
        v12 = *(_QWORD *)(a3 + 16);
        if ((unint64_t)v9 >= v12)
          break;
        *(_DWORD *)v9 = v11;
        v10 = v9 + 4;
LABEL_8:
        *(_QWORD *)(a3 + 8) = v10;
        ++v7;
        v9 = v10;
        if (v7 == v8)
          goto LABEL_36;
      }
      v13 = *(unsigned int **)a3;
      v14 = (uint64_t)&v9[-*(_QWORD *)a3];
      v15 = v14 >> 2;
      v16 = (v14 >> 2) + 1;
      if (v16 >> 62)
        sub_19C2A18E8();
      v17 = v12 - (_QWORD)v13;
      if (v17 >> 1 > v16)
        v16 = v17 >> 1;
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL)
        v18 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v18 = v16;
      if (v18)
      {
        if (v18 >> 62)
          sub_19C2A143C();
        v19 = operator new(4 * v18);
      }
      else
      {
        v19 = 0;
      }
      v20 = (unsigned int *)&v19[4 * v15];
      *v20 = v11;
      v10 = (char *)(v20 + 1);
      if (v9 == (char *)v13)
        goto LABEL_24;
      v21 = v9 - 4 - (char *)v13;
      if (v21 < 0xBC)
      {
        v22 = (unsigned int *)v9;
        goto LABEL_23;
      }
      if (&v19[v14 - 4 - (v21 & 0xFFFFFFFFFFFFFFFCLL)] > &v19[v14 - 4])
      {
        v22 = (unsigned int *)v9;
      }
      else
      {
        if (&v9[-(v21 & 0xFFFFFFFFFFFFFFFCLL) - 4] <= v9 - 4)
        {
          if ((unint64_t)(v9 - v19 - v14) < 0x20)
          {
            v22 = (unsigned int *)v9;
            goto LABEL_23;
          }
          v24 = (v21 >> 2) + 1;
          v22 = (unsigned int *)&v9[-4 * (v24 & 0x7FFFFFFFFFFFFFF8)];
          v25 = &v19[4 * v15 - 16];
          v26 = v9 - 16;
          v27 = v24 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v28 = *(_OWORD *)v26;
            *(v25 - 1) = *((_OWORD *)v26 - 1);
            *v25 = v28;
            v25 -= 2;
            v26 -= 32;
            v27 -= 8;
          }
          while (v27);
          v20 -= v24 & 0x7FFFFFFFFFFFFFF8;
          if (v24 != (v24 & 0x7FFFFFFFFFFFFFF8))
            goto LABEL_23;
LABEL_24:
          *(_QWORD *)a3 = v20;
          *(_QWORD *)(a3 + 8) = v10;
          *(_QWORD *)(a3 + 16) = &v19[4 * v18];
          if (v13)
            operator delete(v13);
          goto LABEL_8;
        }
        v22 = (unsigned int *)v9;
      }
      do
      {
LABEL_23:
        v23 = *--v22;
        *--v20 = v23;
      }
      while (v22 != v13);
      goto LABEL_24;
    }
  }
  if (v7)
  {
    v30 = v7;
    operator delete(v7);
  }
  if (v32 < 0)
    operator delete(__p[0]);
}

void sub_19C2FD0D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if ((a18 & 0x80000000) == 0)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C2FD124(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK17language_modeling2v126ToucanLanguageModelSession21_buildCompletionStemsERNSt3__16vectorINS0_14"
                     "SanitizedTokenENS2_9allocatorIS4_EEEERKNS3_INS0_14CompletionStemENS5_IS9_EEEEE3$_0"
    || ((v3 & (unint64_t)"ZNK17language_modeling2v126ToucanLanguageModelSession21_buildCompletionStemsERNSt3__16ve"
                                "ctorINS0_14SanitizedTokenENS2_9allocatorIS4_EEEERKNS3_INS0_14CompletionStemENS5_IS9_EEEEE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZNK17language_modeling2v126ToucanLanguageModelSession21_buildCompletionStemsERNSt3__16vectorINS0_14SanitizedTokenENS2_9allocatorIS4_EEEERKNS3_INS0_14CompletionStemENS5_IS9_EEEEE3$_0")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK17language_modeling2v126ToucanLanguageModelSession21_buildCompletionStemsERNSt3__16vectorINS0_14SanitizedTokenENS2_9allocatorIS4_EEEERKNS3_INS0_14CompletionStemENS5_IS9_EEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *sub_19C2FD178()
{
  return &unk_1E3D33620;
}

void sub_19C2FD184(uint64_t a1, uint64_t a2, unsigned __int8 *a3, unsigned int *a4, unsigned int *a5)
{
  int v8;
  _BOOL4 v9;
  int v10;
  BOOL v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::string::size_type size;
  int v17;
  std::string *p_p;
  uint64_t v19;
  unsigned __int8 *v20;
  int v21;
  int v22;
  int v23;
  int v24;
  BOOL v26;
  int v27;
  const UInt8 *v28;
  CFIndex v29;
  const __CFString *v30;
  uint64_t v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  const __CFLocale *v36;
  CFIndex Length;
  __CFString *MutableCopy;
  const __CFString *v39;
  CFTypeID TypeID;
  int v41;
  CFTypeRef v42;
  unint64_t *v43;
  unint64_t v44;
  const __CFString *v45;
  void *exception;
  void *v47;
  const __CFString *v48;
  CFTypeRef cf;
  std::locale v50;
  char v51;
  int v52;
  std::string __p;
  int v54;

  if (a4 == a5)
  {
    v8 = 1;
    if (*(_BYTE *)(a2 + 80))
      goto LABEL_7;
  }
  else
  {
    if ((char *)a5 - (char *)a4 == 4)
    {
      v8 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a2 + 112) + 104))(*(_QWORD *)(a2 + 112), *a4);
      if (!*(_BYTE *)(a2 + 80))
        goto LABEL_4;
LABEL_7:
      MEMORY[0x1A1AD3478](&v50);
      v10 = (char)a3[23];
      v11 = v10 < 0;
      if (v10 >= 0)
        v12 = (char *)a3;
      else
        v12 = *(char **)a3;
      v13 = a3[23];
      if (v11)
        v13 = *((_QWORD *)a3 + 1);
      sub_19C2FD5E4(&__p, v12, &v50, &v12[v13]);
      v14 = a3[23];
      if ((v14 & 0x80u) == 0)
        v15 = a3[23];
      else
        v15 = *((_QWORD *)a3 + 1);
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      v17 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = __p.__r_.__value_.__l.__size_;
      if (v15 != size)
      {
        v9 = 0;
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_36;
        goto LABEL_33;
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((v14 & 0x80) != 0)
      {
        v9 = memcmp(*(const void **)a3, p_p, *((_QWORD *)a3 + 1)) == 0;
      }
      else
      {
        if (!a3[23])
        {
          v9 = 1;
          if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_36:
            std::locale::~locale(&v50);
            if ((char)a3[23] < 0)
              goto LABEL_5;
            goto LABEL_37;
          }
LABEL_33:
          operator delete(__p.__r_.__value_.__l.__data_);
          goto LABEL_36;
        }
        v19 = v14 - 1;
        v20 = a3;
        do
        {
          v22 = *v20++;
          v21 = v22;
          v24 = p_p->__r_.__value_.__s.__data_[0];
          p_p = (std::string *)((char *)p_p + 1);
          v23 = v24;
          v26 = v19-- != 0;
          v9 = v21 == v23;
        }
        while (v21 == v23 && v26);
      }
      if ((v17 & 0x80000000) == 0)
        goto LABEL_36;
      goto LABEL_33;
    }
    v8 = 0;
    if (*(_BYTE *)(a2 + 80))
      goto LABEL_7;
  }
LABEL_4:
  v9 = 0;
  if ((char)a3[23] < 0)
  {
LABEL_5:
    sub_19C2B5238((_BYTE *)a1, *(void **)a3, *((_QWORD *)a3 + 1));
    goto LABEL_38;
  }
LABEL_37:
  *(_OWORD *)a1 = *(_OWORD *)a3;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a3 + 2);
LABEL_38:
  *(_DWORD *)(a1 + 24) = *((_DWORD *)a3 + 6);
  if ((v8 & v9) != 1)
    return;
  v27 = (char)a3[23];
  if (v27 >= 0)
    v28 = a3;
  else
    v28 = *(const UInt8 **)a3;
  if (v27 >= 0)
    v29 = a3[23];
  else
    v29 = *((_QWORD *)a3 + 1);
  v30 = CFStringCreateWithBytes(0, v28, v29, 0x8000100u, 0);
  v48 = v30;
  if (!v30)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD3154](exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v31 = *(_QWORD *)(a2 + 176);
  v32 = *(_QWORD *)(v31 + 72);
  v33 = *(std::__shared_weak_count **)(v31 + 80);
  if (v33)
  {
    p_shared_owners = (unint64_t *)&v33->__shared_owners_;
    do
      v35 = __ldxr(p_shared_owners);
    while (__stxr(v35 + 1, p_shared_owners));
  }
  v36 = (const __CFLocale *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 64))(v32);
  Length = CFStringGetLength(v30);
  MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], Length, v30);
  CFStringCapitalize(MutableCopy, v36);
  sub_19C297DB4(&cf, MutableCopy);
  v39 = (const __CFString *)cf;
  if (!cf)
  {
    v47 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD3154](v47, "Could not construct");
    __cxa_throw(v47, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  TypeID = CFStringGetTypeID();
  if (TypeID == CFGetTypeID(v39))
  {
    sub_19C2E50A4(&v50, v39);
  }
  else
  {
    v50.__locale_ = 0;
    v51 = 0;
  }
  v52 = *((_DWORD *)a3 + 6);
  sub_19C297950(&__p, (const UInt8 *)&v50);
  v41 = v52;
  v54 = v52;
  if (*(char *)(a1 + 23) < 0)
  {
    operator delete(*(void **)a1);
    v41 = v54;
  }
  *(std::string *)a1 = __p;
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
  __p.__r_.__value_.__s.__data_[0] = 0;
  *(_DWORD *)(a1 + 24) = v41;
  if ((v51 & 0x80000000) == 0)
  {
    v42 = cf;
    if (!cf)
      goto LABEL_60;
    goto LABEL_59;
  }
  operator delete(v50.__locale_);
  v42 = cf;
  if (cf)
LABEL_59:
    CFRelease(v42);
LABEL_60:
  if (!v33)
    goto LABEL_64;
  v43 = (unint64_t *)&v33->__shared_owners_;
  do
    v44 = __ldaxr(v43);
  while (__stlxr(v44 - 1, v43));
  if (v44)
  {
LABEL_64:
    v45 = v48;
    if (!v48)
      return;
    goto LABEL_65;
  }
  ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
  std::__shared_weak_count::__release_weak(v33);
  v45 = v48;
  if (v48)
LABEL_65:
    CFRelease(v45);
}

void sub_19C2FD540(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, const void *a11, const void *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;

  sub_19C2E5670(&a12);
  sub_19C2B43C8((uint64_t)&a9);
  sub_19C2E5670(&a11);
  if (*(char *)(v18 + 23) < 0)
    operator delete(*(void **)v18);
  _Unwind_Resume(a1);
}

void sub_19C2FD5E4(std::string *a1, char *a2, std::locale *this, char *a4)
{
  char *v6;
  std::locale::id *v8;
  char v9;
  const std::locale::facet *v10;
  std::string::value_type v11;

  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  if (a2 != a4)
  {
    v6 = a2;
    v8 = (std::locale::id *)MEMORY[0x1E0DE4A90];
    do
    {
      v9 = *v6;
      v10 = std::locale::use_facet(this, v8);
      v11 = ((uint64_t (*)(const std::locale::facet *, _QWORD))v10->__vftable[1].__on_zero_shared)(v10, v9);
      std::string::push_back(a1, v11);
      ++v6;
    }
    while (v6 != a4);
  }
}

void sub_19C2FD66C(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  __cxa_rethrow();
}

void sub_19C2FD688(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_19C2FD69C(uint64_t *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  void **v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  void **v13;
  __int128 v14;
  void **v15;
  uint64_t v17;
  char *v18;

  v2 = 0xD37A6F4DE9BD37A7 * ((a1[1] - *a1) >> 3);
  v3 = v2 + 1;
  if (v2 + 1 > 0x1642C8590B21642)
    sub_19C2A18E8();
  if (0xA6F4DE9BD37A6F4ELL * ((a1[2] - *a1) >> 3) > v3)
    v3 = 0xA6F4DE9BD37A6F4ELL * ((a1[2] - *a1) >> 3);
  if (0xD37A6F4DE9BD37A7 * ((a1[2] - *a1) >> 3) >= 0xB21642C8590B21)
    v6 = 0x1642C8590B21642;
  else
    v6 = v3;
  if (v6)
  {
    if (v6 > 0x1642C8590B21642)
      sub_19C2A143C();
    v7 = (char *)operator new(184 * v6);
  }
  else
  {
    v7 = 0;
  }
  v17 = (uint64_t)&v7[184 * v2];
  v18 = &v7[184 * v6];
  sub_19C2E1F84(v17, a2);
  v8 = v17 + 184;
  v9 = (void **)*a1;
  v10 = (void **)a1[1];
  if (v10 == (void **)*a1)
  {
    *a1 = v17;
    a1[1] = v8;
    a1[2] = (uint64_t)v18;
    if (!v10)
      return v17 + 184;
    goto LABEL_17;
  }
  v11 = 0;
  do
  {
    v12 = v17 + v11 * 8;
    v13 = &v10[v11];
    *(_QWORD *)(v12 - 184) = 0;
    *(_QWORD *)(v12 - 176) = 0;
    *(_QWORD *)(v12 - 168) = 0;
    *(_OWORD *)(v12 - 184) = *(_OWORD *)&v10[v11 - 23];
    *(_QWORD *)(v12 - 168) = v10[v11 - 21];
    *(v13 - 23) = 0;
    *(v13 - 22) = 0;
    *(v13 - 21) = 0;
    *(_QWORD *)(v12 - 160) = 0;
    *(_QWORD *)(v12 - 152) = 0;
    *(_QWORD *)(v12 - 144) = 0;
    *(_OWORD *)(v12 - 160) = *(_OWORD *)&v10[v11 - 20];
    *(_QWORD *)(v12 - 144) = v10[v11 - 18];
    *(v13 - 20) = 0;
    *(v13 - 19) = 0;
    *(v13 - 18) = 0;
    *(_QWORD *)(v12 - 136) = 0;
    *(_QWORD *)(v12 - 128) = 0;
    *(_QWORD *)(v12 - 120) = 0;
    *(_OWORD *)(v12 - 136) = *(_OWORD *)&v10[v11 - 17];
    *(_QWORD *)(v12 - 120) = v10[v11 - 15];
    *(v13 - 17) = 0;
    *(v13 - 16) = 0;
    *(v13 - 15) = 0;
    *(_QWORD *)(v12 - 112) = 0;
    *(_QWORD *)(v12 - 104) = 0;
    *(_QWORD *)(v12 - 96) = 0;
    *(_OWORD *)(v12 - 112) = *(_OWORD *)&v10[v11 - 14];
    *(_QWORD *)(v12 - 96) = v10[v11 - 12];
    *(v13 - 14) = 0;
    *(v13 - 13) = 0;
    *(v13 - 12) = 0;
    *(_QWORD *)(v12 - 88) = 0;
    *(_QWORD *)(v12 - 80) = 0;
    *(_QWORD *)(v12 - 72) = 0;
    *(_OWORD *)(v12 - 88) = *(_OWORD *)&v10[v11 - 11];
    *(_QWORD *)(v12 - 72) = v10[v11 - 9];
    *(v13 - 10) = 0;
    *(v13 - 9) = 0;
    v14 = *(_OWORD *)&v10[v11 - 8];
    *(v13 - 11) = 0;
    *(_OWORD *)(v12 - 64) = v14;
    *(_QWORD *)(v12 - 40) = 0;
    *(_QWORD *)(v12 - 32) = 0;
    *(_QWORD *)(v12 - 48) = 0;
    *(_OWORD *)(v12 - 48) = *(_OWORD *)&v10[v11 - 6];
    *(_QWORD *)(v12 - 32) = v10[v11 - 4];
    *(v13 - 6) = 0;
    *(v13 - 5) = 0;
    *(v13 - 4) = 0;
    *(_QWORD *)(v12 - 24) = 0;
    *(_QWORD *)(v12 - 16) = 0;
    *(_QWORD *)(v12 - 8) = 0;
    *(_OWORD *)(v12 - 24) = *(_OWORD *)&v10[v11 - 3];
    *(_QWORD *)(v12 - 8) = v10[v11 - 1];
    *(v13 - 3) = 0;
    *(v13 - 2) = 0;
    *(v13 - 1) = 0;
    v11 -= 23;
  }
  while (&v10[v11] != v9);
  v10 = (void **)*a1;
  v15 = (void **)a1[1];
  *a1 = v17 + v11 * 8;
  a1[1] = v8;
  for (a1[2] = (uint64_t)v18; v15 != v10; v15 = sub_19C2E25C8(v15 - 23))
    ;
  if (v10)
LABEL_17:
    operator delete(v10);
  return v17 + 184;
}

void sub_19C2FD8F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C2FEF74((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19C2FD90C()
{
  JUMPOUT(0x1A1AD355CLL);
}

_QWORD *sub_19C2FD920(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E3D390E0;
  result[1] = v3;
  return result;
}

uint64_t sub_19C2FD954(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E3D390E0;
  a2[1] = v2;
  return result;
}

void sub_19C2FD970(uint64_t a1@<X0>, std::string *a2@<X1>, const void **a3@<X2>, void **a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;

  v9 = *(_QWORD *)(a1 + 8);
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(v9 + 112) + 176))(*(_QWORD *)(v9 + 112)) == 2)
    sub_19C2FDA58(a5, v9, a4, a3, (uint64_t)a2);
  else
    sub_19C2FDFF4(a5, v9, a2);
}

uint64_t sub_19C2FD9F8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK17language_modeling2v126ToucanLanguageModelSession22_normalizeStemsForBiasERKNSt3__16vectorINS0_"
                     "14CompletionStemENS2_9allocatorIS4_EEEERKNS3_INS0_14SanitizedTokenENS5_ISA_EEEEE3$_0"
    || ((v3 & (unint64_t)"ZNK17language_modeling2v126ToucanLanguageModelSession22_normalizeStemsForBiasERKNSt3__16"
                                "vectorINS0_14CompletionStemENS2_9allocatorIS4_EEEERKNS3_INS0_14SanitizedTokenENS5_ISA_EEEEE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZNK17language_modeling2v126ToucanLanguageModelSession22_normalizeStemsForBiasERKNSt3__16vectorINS0_14CompletionStemENS2_9allocatorIS4_EEEERKNS3_INS0_14SanitizedTokenENS5_ISA_EEEEE3$_0")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK17language_modeling2v126ToucanLanguageModelSession22_normalizeStemsForBiasERKNSt3__16vectorINS0_14CompletionStemENS2_9allocatorIS4_EEEERKNS3_INS0_14SanitizedTokenENS5_ISA_EEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *sub_19C2FDA4C()
{
  return &unk_1E3D33630;
}

void sub_19C2FDA58(uint64_t a1, uint64_t a2, void **a3, const void **a4, uint64_t a5)
{
  int v10;
  size_t v11;
  unint64_t v12;
  std::string *p_dst;
  uint64_t v14;
  uint64_t v15;
  const void *v16;
  int v17;
  const std::string::value_type *v18;
  std::string::size_type v19;
  std::string *v20;
  __int128 v21;
  uint64_t v22;
  std::string::size_type v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  int v27;
  int v28;
  unint64_t *v29;
  unint64_t v30;
  char *v31;
  void **v32;
  _QWORD *v33;
  __int128 v34;
  std::string::size_type size;
  char v36;
  std::string *p_p;
  int data;
  int v39;
  uint64_t v41;
  std::string::size_type v42;
  std::__shared_weak_count *v43;
  unint64_t *p_shared_owners;
  unint64_t v45;
  int v46;
  unint64_t *v47;
  unint64_t v48;
  void *v49;
  char *v50;
  int v51;
  char *v52;
  void **v53;
  std::string v54;
  int v55;
  std::string __dst;
  int v57;
  std::string __p;
  void *v59[2];
  std::string::size_type v60;

  if (!*((_BYTE *)a4 + 32)
    || ((v10 = *((char *)a4 + 23), v10 >= 0) ? (v11 = *((unsigned __int8 *)a4 + 23)) : (v11 = (size_t)a4[1]), !v11))
  {
LABEL_51:
    v41 = *(_QWORD *)(a2 + 176);
    v42 = *(_QWORD *)(v41 + 72);
    v43 = *(std::__shared_weak_count **)(v41 + 80);
    __dst.__r_.__value_.__r.__words[0] = v42;
    __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v43;
    if (v43)
    {
      p_shared_owners = (unint64_t *)&v43->__shared_owners_;
      do
        v45 = __ldxr(p_shared_owners);
      while (__stxr(v45 + 1, p_shared_owners));
    }
    v46 = sub_19C3947D8((uint64_t *)(v42 + 120), (const char *)a5);
    if (v43)
    {
      v47 = (unint64_t *)&v43->__shared_owners_;
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
    }
    sub_19C2FE844((char *)&v54, a5, v46, a3);
    if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
      sub_19C2B5238(&__dst, v54.__r_.__value_.__l.__data_, v54.__r_.__value_.__l.__size_);
    else
      __dst = v54;
    v57 = *(_DWORD *)(a5 + 24);
    sub_19C297950((_QWORD *)a1, (const UInt8 *)&__dst);
    *(_DWORD *)(a1 + 24) = v57;
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__dst.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v54.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return;
    }
    else if ((SHIBYTE(v54.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      return;
    }
    v49 = (void *)v54.__r_.__value_.__r.__words[0];
    goto LABEL_67;
  }
  v12 = v11 + 1;
  if (v11 + 1 >= 0x7FFFFFFFFFFFFFF8)
    sub_19C2A1A54();
  if (v12 > 0x16)
  {
    v14 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17)
      v14 = v12 | 7;
    v15 = v14 + 1;
    p_dst = (std::string *)operator new(v14 + 1);
    __dst.__r_.__value_.__l.__size_ = v11 + 1;
    __dst.__r_.__value_.__r.__words[2] = v15 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v11 + 1;
  }
  if (v10 >= 0)
    v16 = a4;
  else
    v16 = *a4;
  memmove(p_dst, v16, v11);
  *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v11) = 32;
  v17 = *(char *)(a5 + 23);
  if (v17 >= 0)
    v18 = (const std::string::value_type *)a5;
  else
    v18 = *(const std::string::value_type **)a5;
  if (v17 >= 0)
    v19 = *(unsigned __int8 *)(a5 + 23);
  else
    v19 = *(_QWORD *)(a5 + 8);
  v20 = std::string::append(&__dst, v18, v19);
  v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v60 = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)v59 = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  v22 = *(_QWORD *)(a2 + 176);
  v23 = *(_QWORD *)(v22 + 72);
  v24 = *(std::__shared_weak_count **)(v22 + 80);
  __dst.__r_.__value_.__r.__words[0] = v23;
  __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v24;
  if (v24)
  {
    v25 = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  v27 = sub_19C3947D8((uint64_t *)(v23 + 120), (const char *)v59);
  v28 = v27;
  if (!v24)
    goto LABEL_30;
  v29 = (unint64_t *)&v24->__shared_owners_;
  do
    v30 = __ldaxr(v29);
  while (__stlxr(v30 - 1, v29));
  if (v30)
  {
LABEL_30:
    if (v27)
      goto LABEL_31;
LABEL_49:
    if (SHIBYTE(v60) < 0)
      operator delete(v59[0]);
    goto LABEL_51;
  }
  ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
  std::__shared_weak_count::__release_weak(v24);
  if (!v28)
    goto LABEL_49;
LABEL_31:
  sub_19C2FE844((char *)&__p, (uint64_t)v59, v28, a3);
  if ((v28 - 11) <= 3)
  {
    v31 = (char *)a3[1];
    if (*a3 != v31)
    {
      v32 = (void **)(v31 - 32);
      if (*(v31 - 9) < 0)
        operator delete(*v32);
      a3[1] = v32;
      *((_BYTE *)&v54.__r_.__value_.__s + 23) = 7;
      strcpy((char *)&v54, "_U_NT52");
      v55 = 0;
      sub_19C297950(&__dst, (const UInt8 *)&v54);
      v57 = v55;
      v33 = a3[1];
      if (v33 >= a3[2])
      {
        v50 = sub_19C2FEE40(a3, (uint64_t)&__dst);
        v51 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
        a3[1] = v50;
        if (v51 < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
      }
      else
      {
        v34 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
        v33[2] = *((_QWORD *)&__dst.__r_.__value_.__l + 2);
        *(_OWORD *)v33 = v34;
        memset(&__dst, 0, sizeof(__dst));
        *((_DWORD *)v33 + 6) = v57;
        a3[1] = v33 + 4;
      }
      if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v54.__r_.__value_.__l.__data_);
    }
    if (*(char *)(a5 + 23) < 0)
    {
      sub_19C2B5238((_BYTE *)a1, *(void **)a5, *(_QWORD *)(a5 + 8));
    }
    else
    {
      *(_OWORD *)a1 = *(_OWORD *)a5;
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a5 + 16);
    }
    *(_DWORD *)(a1 + 24) = *(_DWORD *)(a5 + 24);
    goto LABEL_77;
  }
  size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  v36 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __p.__r_.__value_.__l.__size_;
  if (size < 5)
    goto LABEL_46;
  p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  data = (int)p_p->__r_.__value_.__l.__data_;
  v39 = p_p->__r_.__value_.__s.__data_[4];
  if (data != 1314870623 || v39 != 84)
  {
LABEL_46:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    goto LABEL_49;
  }
  v52 = (char *)a3[1];
  if (v52 != *a3)
  {
    v53 = (void **)(v52 - 32);
    if (*(v52 - 9) < 0)
    {
      operator delete(*v53);
      v36 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    a3[1] = v53;
  }
  if (v36 < 0)
    sub_19C2B5238(&__dst, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    __dst = __p;
  v57 = *(_DWORD *)(a5 + 24);
  sub_19C297950((_QWORD *)a1, (const UInt8 *)&__dst);
  *(_DWORD *)(a1 + 24) = v57;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_77:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v60) < 0)
  {
    v49 = v59[0];
LABEL_67:
    operator delete(v49);
  }
}

void sub_19C2FDF14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a29 < 0)
    operator delete(__p);
  if (a35 < 0)
  {
    operator delete(a30);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_19C2FDFF4(uint64_t a1, uint64_t a2, std::string *a3)
{
  void **v6;
  __int16 v7;
  unsigned __int16 v8;
  std::string::value_type *size;
  const char *v10;
  size_t v11;
  void *v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  CFStringRef v17;
  uint64_t v18;
  std::string::size_type v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  const __CFString *v26;
  unint64_t *v27;
  unint64_t v28;
  int v29;
  BOOL v30;
  char *v31;
  std::string::size_type v32;
  uint64_t v33;
  std::string::size_type v34;
  std::string::size_type v35;
  int v36;
  std::string *p_p;
  uint64_t v38;
  std::string *v39;
  int v40;
  int v41;
  int v42;
  int v43;
  BOOL v45;
  _BOOL4 v46;
  signed __int8 v47;
  std::string::size_type v48;
  std::string *v49;
  int data;
  int v51;
  _BOOL4 v53;
  std::string *v54;
  std::string *v55;
  __int128 v56;
  std::string *v57;
  size_t v58;
  std::string v59;
  const __CFString *v60;
  CFTypeRef cf;
  void *__dst[2];
  int64_t v63;
  void *v64[2];
  char v65;
  std::string v66;
  void *v67;
  std::string __p;
  uint64_t v69;
  std::string v70;
  void *v71;
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  memset(&v66, 0, sizeof(v66));
  v6 = v64;
  sub_19C34E95C(v64, (const char *)a3);
  if (v65 < 0)
    v6 = (void **)v64[0];
  WORD2(__p.__r_.__value_.__r.__words[0]) = 0;
  LODWORD(__p.__r_.__value_.__l.__data_) = 0x100000;
  __p.__r_.__value_.__s.__data_[6] = 1;
  __p.__r_.__value_.__l.__size_ = 0;
  if (v6)
  {
    v7 = strlen((const char *)v6);
    v8 = v7;
    __p.__r_.__value_.__r.__words[2] = 0;
    v69 = 0;
    if (v7)
    {
      sub_19C40FB64((unsigned __int16 *)&__p, v7);
      if (*(unsigned __int16 *)&__p.__r_.__value_.__s.__data_[2] < v8)
        __assert_rtn("initialize", "LMTIString.cpp", 269, "len <= m_capacity");
      if (__p.__r_.__value_.__l.__size_)
        size = (std::string::value_type *)__p.__r_.__value_.__l.__size_;
      else
        size = &__p.__r_.__value_.__s.__data_[16];
      memcpy(size, v6, v8);
      LOWORD(__p.__r_.__value_.__l.__data_) = v8;
    }
  }
  else
  {
    __p.__r_.__value_.__r.__words[2] = 0;
    v69 = 0;
  }
  sub_19C40FD44((uint64_t)&v70, (unsigned __int16 *)&__p);
  if (v70.__r_.__value_.__l.__size_)
    v10 = (const char *)v70.__r_.__value_.__l.__size_;
  else
    v10 = &v70.__r_.__value_.__s.__data_[16];
  v11 = strlen(v10);
  if (v11 >= 0x7FFFFFFFFFFFFFF8)
    sub_19C2A1A54();
  v12 = (void *)v11;
  if (v11 >= 0x17)
  {
    v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v14 = v11 | 7;
    v15 = v14 + 1;
    v13 = (void **)operator new(v14 + 1);
    __dst[1] = v12;
    v63 = v15 | 0x8000000000000000;
    __dst[0] = v13;
  }
  else
  {
    HIBYTE(v63) = v11;
    v13 = __dst;
    if (!v11)
      goto LABEL_22;
  }
  memmove(v13, v10, (size_t)v12);
LABEL_22:
  *((_BYTE *)v12 + (_QWORD)v13) = 0;
  if (v70.__r_.__value_.__l.__size_ && v70.__r_.__value_.__s.__data_[6] == 1)
    free((void *)v70.__r_.__value_.__l.__size_);
  if (__p.__r_.__value_.__l.__size_ && __p.__r_.__value_.__s.__data_[6] == 1)
    free((void *)__p.__r_.__value_.__l.__size_);
  if (v63 >= 0)
    v16 = (const char *)__dst;
  else
    v16 = (const char *)__dst[0];
  v17 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v16, 0x8000100u);
  cf = v17;
  v18 = *(_QWORD *)(a2 + 176);
  v19 = *(_QWORD *)(v18 + 72);
  v20 = *(std::__shared_weak_count **)(v18 + 80);
  v59.__r_.__value_.__r.__words[0] = v19;
  v59.__r_.__value_.__l.__size_ = (std::string::size_type)v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldxr(p_shared_owners);
    while (__stxr(v22 + 1, p_shared_owners));
  }
  v23 = *(_QWORD *)(v19 + 120);
  v70.__r_.__value_.__r.__words[0] = 0;
  v70.__r_.__value_.__l.__size_ = (std::string::size_type)&v70;
  v70.__r_.__value_.__r.__words[2] = 0x2000000000;
  v24 = off_1EE41C148;
  v71 = off_1EE41C148;
  if (!off_1EE41C148)
  {
    v67 = 0;
    if (qword_1EE41C150)
    {
      v25 = (void *)qword_1EE41C150;
    }
    else
    {
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = xmmword_1E3D3A0C0;
      __p.__r_.__value_.__r.__words[2] = 0;
      qword_1EE41C150 = _sl_dlopen();
      v25 = (void *)qword_1EE41C150;
      if (!qword_1EE41C150)
      {
        abort_report_np();
LABEL_141:
        __break(1u);
      }
      if (v67)
        free(v67);
    }
    v24 = dlsym(v25, "NLGazetteerCopyLabel");
    *(_QWORD *)(v70.__r_.__value_.__l.__size_ + 24) = v24;
    off_1EE41C148 = v24;
  }
  _Block_object_dispose(&v70, 8);
  if (!v24)
  {
    dlerror();
    abort_report_np();
    goto LABEL_141;
  }
  v26 = (const __CFString *)((uint64_t (*)(uint64_t, CFStringRef))v24)(v23, v17);
  v60 = v26;
  if (v20)
  {
    v27 = (unint64_t *)&v20->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
    v26 = v60;
  }
  if (v26)
  {
    sub_19C29CEF8(v26, &v70);
    MEMORY[0x1A1AD3478](&v59);
    v29 = SHIBYTE(a3->__r_.__value_.__r.__words[2]);
    v30 = v29 < 0;
    if (v29 >= 0)
      v31 = (char *)a3;
    else
      v31 = (char *)a3->__r_.__value_.__r.__words[0];
    v32 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
    if (v30)
      v32 = a3->__r_.__value_.__l.__size_;
    sub_19C2FD5E4(&__p, v31, (std::locale *)&v59, &v31[v32]);
    v33 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
    if ((v33 & 0x80u) == 0)
      v34 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
    else
      v34 = a3->__r_.__value_.__l.__size_;
    v35 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    v36 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v35 = __p.__r_.__value_.__l.__size_;
    if (v34 == v35)
    {
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((v33 & 0x80) != 0)
      {
        v46 = memcmp(a3->__r_.__value_.__l.__data_, p_p, a3->__r_.__value_.__l.__size_) == 0;
      }
      else
      {
        if (!*((_BYTE *)&a3->__r_.__value_.__s + 23))
        {
          v46 = 1;
          if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_81;
          goto LABEL_80;
        }
        v38 = v33 - 1;
        v39 = a3;
        do
        {
          v41 = v39->__r_.__value_.__s.__data_[0];
          v39 = (std::string *)((char *)v39 + 1);
          v40 = v41;
          v43 = p_p->__r_.__value_.__s.__data_[0];
          p_p = (std::string *)((char *)p_p + 1);
          v42 = v43;
          v45 = v38-- != 0;
          v46 = v40 == v42;
        }
        while (v40 == v42 && v45);
      }
      if (v36 < 0)
LABEL_80:
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    else
    {
      v46 = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_80;
    }
LABEL_81:
    std::locale::~locale((std::locale *)&v59);
    if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v48 = HIBYTE(v70.__r_.__value_.__r.__words[2]);
    else
      v48 = v70.__r_.__value_.__l.__size_;
    if (v48 == 7)
    {
      v49 = (std::string *)v70.__r_.__value_.__r.__words[0];
      if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v49 = &v70;
      data = (int)v49->__r_.__value_.__l.__data_;
      v51 = *(_DWORD *)((char *)v49->__r_.__value_.__r.__words + 3);
      v53 = data == 1314870623 && v51 == 942691406;
    }
    else
    {
      v53 = 0;
    }
    if (v46 || v53)
    {
      if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
        sub_19C2B5238(&__p, v70.__r_.__value_.__l.__data_, v70.__r_.__value_.__l.__size_);
      else
        __p = v70;
      if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v66.__r_.__value_.__l.__data_);
      v66 = __p;
    }
    else
    {
      *((_BYTE *)&v59.__r_.__value_.__s + 23) = 7;
      strcpy((char *)&v59, "_U_CAP_");
      if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v54 = &v70;
      else
        v54 = (std::string *)v70.__r_.__value_.__r.__words[0];
      v55 = std::string::append(&v59, (const std::string::value_type *)v54, v48);
      v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v55->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v56;
      v55->__r_.__value_.__l.__size_ = 0;
      v55->__r_.__value_.__r.__words[2] = 0;
      v55->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v66.__r_.__value_.__l.__data_);
      v66 = __p;
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
      __p.__r_.__value_.__s.__data_[0] = 0;
      if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v59.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v70.__r_.__value_.__l.__data_);
    goto LABEL_120;
  }
  if (&v66 != a3)
  {
    v47 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
    if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v47 >= 0)
        v57 = a3;
      else
        v57 = (std::string *)a3->__r_.__value_.__r.__words[0];
      if (v47 >= 0)
        v58 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
      else
        v58 = a3->__r_.__value_.__l.__size_;
      sub_19C2E54A8((void **)&v66.__r_.__value_.__l.__data_, v57, v58);
    }
    else if ((*((_BYTE *)&a3->__r_.__value_.__s + 23) & 0x80) != 0)
    {
      sub_19C2E53E4(&v66, a3->__r_.__value_.__l.__data_, a3->__r_.__value_.__l.__size_);
    }
    else
    {
      v66 = *a3;
    }
  }
LABEL_120:
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
    sub_19C2B5238(&v70, v66.__r_.__value_.__l.__data_, v66.__r_.__value_.__l.__size_);
  else
    v70 = v66;
  LODWORD(v71) = a3[1].__r_.__value_.__l.__data_;
  sub_19C297950((_QWORD *)a1, (const UInt8 *)&v70);
  *(_DWORD *)(a1 + 24) = (_DWORD)v71;
  if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v70.__r_.__value_.__l.__data_);
    if (!v26)
      goto LABEL_128;
    goto LABEL_127;
  }
  if (v26)
LABEL_127:
    CFRelease(v26);
LABEL_128:
  if (cf)
    CFRelease(cf);
  if (SHIBYTE(v63) < 0)
  {
    operator delete(__dst[0]);
    if ((v65 & 0x80000000) == 0)
    {
LABEL_132:
      if ((SHIBYTE(v66.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return;
LABEL_136:
      operator delete(v66.__r_.__value_.__l.__data_);
      return;
    }
  }
  else if ((v65 & 0x80000000) == 0)
  {
    goto LABEL_132;
  }
  operator delete(v64[0]);
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_136;
}

void sub_19C2FE6E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, const void *a16, const void *a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,int a37,__int16 a38,char a39,void *a40)
{
  uint64_t v40;

  if (*(char *)(v40 - 89) < 0)
    operator delete(*(void **)(v40 - 112));
  sub_19C2FE810(&a16);
  sub_19C2FE810(&a17);
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
    operator delete(a24);
  if (a35 < 0)
    operator delete(a30);
  _Unwind_Resume(a1);
}

const void **sub_19C2FE810(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  *a1 = 0;
  return a1;
}

void sub_19C2FE844(char *__dst, uint64_t a2, int a3, _QWORD *a4)
{
  int v6;
  uint64_t v7;
  void **v8;
  char v9;
  int *v10;
  unint64_t v11;
  uint64_t v12;
  void **v13;
  char v14;
  int *v15;
  unint64_t v16;
  uint64_t v17;
  int *v18;
  unint64_t v19;
  uint64_t v20;
  void **v21;
  char v22;
  int *v23;
  unint64_t v24;
  std::string *v25;
  int v26;
  int v27;
  int v29;
  int v30;
  __int128 v32;
  int v33;
  int v34;
  int v36;
  int v37;
  BOOL v38;
  void *__p[2];
  char v40;
  std::string v41;

  switch(a3)
  {
    case 0:
    case 11:
    case 12:
    case 13:
    case 14:
      goto LABEL_2;
    case 1:
      v7 = a4[1];
      if (v7 == *a4)
        goto LABEL_62;
      v8 = (void **)(v7 - 32);
      v9 = *(_BYTE *)(v7 - 9);
      if (v9 < 0)
      {
        v10 = *(int **)(v7 - 32);
        v11 = *(_QWORD *)(v7 - 24);
      }
      else
      {
        v10 = (int *)(v7 - 32);
        v11 = *(unsigned __int8 *)(v7 - 9);
      }
      if (v11 < 7)
        goto LABEL_62;
      v26 = *v10;
      v27 = *(int *)((char *)v10 + 3);
      if (v26 != 1314870623 || v27 != 942691406)
        goto LABEL_62;
      goto LABEL_59;
    case 2:
      v12 = a4[1];
      if (v12 != *a4)
      {
        v13 = (void **)(v12 - 32);
        v14 = *(_BYTE *)(v12 - 9);
        if (v14 < 0)
        {
          v15 = *(int **)(v12 - 32);
          v16 = *(_QWORD *)(v12 - 24);
        }
        else
        {
          v15 = (int *)(v12 - 32);
          v16 = *(unsigned __int8 *)(v12 - 9);
        }
        if (v16 >= 7)
        {
          v29 = *v15;
          v30 = *(int *)((char *)v15 + 3);
          if (v29 == 1314870623 && v30 == 942691406)
          {
            if (v14 < 0)
              operator delete(*v13);
            a4[1] = v13;
          }
        }
      }
      *((_BYTE *)&v41.__r_.__value_.__s + 23) = 7;
      strcpy((char *)&v41, "_U_NT08");
      v40 = 2;
      strcpy((char *)__p, "'s");
      v25 = std::string::append(&v41, (const std::string::value_type *)__p, 2uLL);
      goto LABEL_47;
    case 3:
      v17 = a4[1];
      if (v17 == *a4)
        goto LABEL_2;
      v8 = (void **)(v17 - 32);
      v9 = *(_BYTE *)(v17 - 9);
      if (v9 < 0)
      {
        v18 = *(int **)(v17 - 32);
        v19 = *(_QWORD *)(v17 - 24);
      }
      else
      {
        v18 = (int *)(v17 - 32);
        v19 = *(unsigned __int8 *)(v17 - 9);
      }
      if (v19 < 7)
        goto LABEL_2;
      v33 = *v18;
      v34 = *(int *)((char *)v18 + 3);
      if (v33 != 1314870623 || v34 != 942691406)
        goto LABEL_2;
LABEL_59:
      if (v9 < 0)
        operator delete(*v8);
      a4[1] = v8;
LABEL_62:
      __dst[23] = 7;
      *(_DWORD *)__dst = 1314870623;
      v6 = 942691406;
      goto LABEL_63;
    case 4:
      v20 = a4[1];
      if (v20 == *a4)
        goto LABEL_2;
      v21 = (void **)(v20 - 32);
      v22 = *(_BYTE *)(v20 - 9);
      if (v22 < 0)
      {
        v23 = *(int **)(v20 - 32);
        v24 = *(_QWORD *)(v20 - 24);
      }
      else
      {
        v23 = (int *)(v20 - 32);
        v24 = *(unsigned __int8 *)(v20 - 9);
      }
      if (v24 >= 7
        && ((v36 = *v23, v37 = *(int *)((char *)v23 + 3), v36 == 1314870623) ? (v38 = v37 == 942691406) : (v38 = 0), v38))
      {
        if (v22 < 0)
          operator delete(*v21);
        a4[1] = v21;
        *((_BYTE *)&v41.__r_.__value_.__s + 23) = 7;
        strcpy((char *)&v41, "_U_NT08");
        v40 = 2;
        strcpy((char *)__p, "'s");
        v25 = std::string::append(&v41, (const std::string::value_type *)__p, 2uLL);
LABEL_47:
        v32 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
        *((_QWORD *)__dst + 2) = *((_QWORD *)&v25->__r_.__value_.__l + 2);
        *(_OWORD *)__dst = v32;
        v25->__r_.__value_.__l.__size_ = 0;
        v25->__r_.__value_.__r.__words[2] = 0;
        v25->__r_.__value_.__r.__words[0] = 0;
        if (v40 < 0)
        {
          operator delete(__p[0]);
          if ((SHIBYTE(v41.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            return;
        }
        else if ((SHIBYTE(v41.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          return;
        }
        operator delete(v41.__r_.__value_.__l.__data_);
      }
      else
      {
LABEL_2:
        if (*(char *)(a2 + 23) < 0)
        {
          sub_19C2B5238(__dst, *(void **)a2, *(_QWORD *)(a2 + 8));
        }
        else
        {
          *(_OWORD *)__dst = *(_OWORD *)a2;
          *((_QWORD *)__dst + 2) = *(_QWORD *)(a2 + 16);
        }
      }
      return;
    case 5:
      __dst[23] = 7;
      *(_DWORD *)__dst = 1314870623;
      v6 = 825578574;
      goto LABEL_63;
    case 6:
      *((_BYTE *)&v41.__r_.__value_.__s + 23) = 7;
      strcpy((char *)&v41, "_U_NT51");
      v40 = 2;
      strcpy((char *)__p, "'s");
      v25 = std::string::append(&v41, (const std::string::value_type *)__p, 2uLL);
      goto LABEL_47;
    case 7:
    case 9:
      __dst[23] = 7;
      *(_DWORD *)__dst = 1314870623;
      v6 = 842355790;
      goto LABEL_63;
    case 8:
      *((_BYTE *)&v41.__r_.__value_.__s + 23) = 7;
      strcpy((char *)&v41, "_U_NT52");
      v40 = 2;
      strcpy((char *)__p, "'s");
      v25 = std::string::append(&v41, (const std::string::value_type *)__p, 2uLL);
      goto LABEL_47;
    case 10:
      *((_BYTE *)&v41.__r_.__value_.__s + 23) = 7;
      strcpy((char *)&v41, "_U_NT52");
      v40 = 1;
      LOWORD(__p[0]) = 39;
      v25 = std::string::append(&v41, (const std::string::value_type *)__p, 1uLL);
      goto LABEL_47;
    case 15:
      __dst[23] = 7;
      *(_DWORD *)__dst = 1314870623;
      v6 = 909464654;
      goto LABEL_63;
    case 16:
      *((_BYTE *)&v41.__r_.__value_.__s + 23) = 7;
      strcpy((char *)&v41, "_U_NT56");
      v40 = 2;
      strcpy((char *)__p, "'s");
      v25 = std::string::append(&v41, (const std::string::value_type *)__p, 2uLL);
      goto LABEL_47;
    case 17:
      __dst[23] = 7;
      *(_DWORD *)__dst = 1314870623;
      v6 = 875910222;
      goto LABEL_63;
    case 18:
      *((_BYTE *)&v41.__r_.__value_.__s + 23) = 7;
      strcpy((char *)&v41, "_U_NT54");
      v40 = 2;
      strcpy((char *)__p, "'s");
      v25 = std::string::append(&v41, (const std::string::value_type *)__p, 2uLL);
      goto LABEL_47;
    case 19:
      __dst[23] = 7;
      *(_DWORD *)__dst = 1314870623;
      v6 = 892687438;
LABEL_63:
      *(_DWORD *)(__dst + 3) = v6;
      __dst[7] = 0;
      return;
    case 20:
      *((_BYTE *)&v41.__r_.__value_.__s + 23) = 7;
      strcpy((char *)&v41, "_U_NT55");
      v40 = 1;
      LOWORD(__p[0]) = 39;
      v25 = std::string::append(&v41, (const std::string::value_type *)__p, 1uLL);
      goto LABEL_47;
    default:
      __assert_rtn("operator()", "ToucanLanguageModelSession.cpp", 1333, "false");
  }
}

void sub_19C2FEDE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((a20 & 0x80000000) == 0)
  {
LABEL_3:
    _Unwind_Resume(a1);
  }
  operator delete(a15);
  _Unwind_Resume(a1);
}

char *sub_19C2FEE40(void **a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  void **v14;
  void **v15;
  __int128 v16;
  void **v17;

  v2 = ((_BYTE *)a1[1] - (_BYTE *)*a1) >> 5;
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 59)
    sub_19C2A18E8();
  v5 = (_BYTE *)a1[2] - (_BYTE *)*a1;
  if (v5 >> 4 > v3)
    v3 = v5 >> 4;
  v6 = (unint64_t)v5 >= 0x7FFFFFFFFFFFFFE0;
  v7 = 0x7FFFFFFFFFFFFFFLL;
  if (!v6)
    v7 = v3;
  if (v7 >> 59)
    sub_19C2A143C();
  v9 = 32 * v7;
  v10 = (char *)operator new(32 * v7);
  v11 = &v10[32 * v2];
  v12 = &v10[v9];
  *(_OWORD *)v11 = *(_OWORD *)a2;
  *((_QWORD *)v11 + 2) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *((_DWORD *)v11 + 6) = *(_DWORD *)(a2 + 24);
  v13 = v11 + 32;
  v14 = (void **)*a1;
  v15 = (void **)a1[1];
  if (v15 == *a1)
  {
    *a1 = v11;
    a1[1] = v13;
    a1[2] = v12;
  }
  else
  {
    do
    {
      v16 = *((_OWORD *)v15 - 2);
      *((_QWORD *)v11 - 2) = *(v15 - 2);
      *((_OWORD *)v11 - 2) = v16;
      *(v15 - 3) = 0;
      *(v15 - 2) = 0;
      *(v15 - 4) = 0;
      *((_DWORD *)v11 - 2) = *((_DWORD *)v15 - 2);
      v11 -= 32;
      v15 -= 4;
    }
    while (v15 != v14);
    v15 = (void **)*a1;
    v17 = (void **)a1[1];
    *a1 = v11;
    a1[1] = v13;
    a1[2] = v12;
    while (v17 != v15)
    {
      if (*((char *)v17 - 9) < 0)
        operator delete(*(v17 - 4));
      v17 -= 4;
    }
  }
  if (v15)
    operator delete(v15);
  return v13;
}

uint64_t sub_19C2FEF74(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 184;
    sub_19C2E25C8((void **)(i - 184));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *sub_19C2FEFC4(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = (_QWORD *)*a1;
  if (*a1)
  {
    v3 = (_QWORD *)a1[1];
    v4 = (_QWORD *)*a1;
    if (v3 != v2)
    {
      do
      {
        v7 = *--v3;
        v6 = v7;
        *v3 = 0;
        if (v7)
        {
          if (*(char *)(v6 + 287) < 0)
            operator delete(*(void **)(v6 + 264));
          v5 = sub_19C296378(v6);
          MEMORY[0x1A1AD355C](v5, 0x1032C40D90104AELL);
        }
      }
      while (v3 != v2);
      v4 = (_QWORD *)*a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_19C2FF058(_QWORD *a1, uint64_t a2, uint64_t *a3, const void *****a4, _QWORD *a5, uint64_t a6, int a7, int a8, int a9, std::string *a10, uint64_t a11)
{
  unint64_t v11;
  int v15;
  void **v16;
  void **v17;
  __int128 *p_len;
  std::string *v19;
  std::string::size_type size;
  uint64_t v21;
  std::string::size_type v22;
  std::string *v23;
  std::string::size_type v24;
  std::string::size_type v25;
  void *v26;
  void *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint8x8_t v31;
  uint64_t **v32;
  uint64_t *v33;
  std::string::size_type v34;
  std::string *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  const void **v39;
  std::string *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  const void **v44;
  std::string *v45;
  _QWORD *v46;
  _QWORD *v47;
  _BYTE *v48;
  float v49;
  _BOOL8 v50;
  unint64_t v51;
  unint64_t v52;
  size_t prime;
  void *v54;
  void *v55;
  uint64_t v56;
  _QWORD **v57;
  size_t v58;
  size_t v59;
  size_t v60;
  _QWORD *i;
  size_t v62;
  uint64_t v63;
  unint64_t v64;
  uint8x8_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  size_t v69;
  _QWORD *v70;
  void *v71;
  unint64_t v72;
  std::string::size_type v73;
  std::string::size_type v74;
  char *v75;
  size_t v76;
  int v77;
  uint64_t *v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint8x8_t v83;
  unint64_t v84;
  uint64_t **v85;
  uint64_t *v86;
  char v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  void *v100;
  void *v101;
  const void **v102;
  void **v103;
  void **v104;
  char v105;
  __int128 v106;
  _OWORD *v107;
  __int128 v108;
  char *v109;
  char v110;
  __int128 v111;
  void *v112;
  size_t v113;
  std::string::size_type v114;
  void *v115;
  char *v116;
  char *v117;
  BOOL v118;
  int v119;
  std::ios_base *v120;
  uint64_t *v121;
  uint64_t *v122;
  unint64_t v123;
  uint64_t v124;
  int v125;
  const UInt8 *v126;
  uint64_t v127;
  size_t v128;
  void **v129;
  const char *v130;
  int v131;
  uint64_t v132;
  uint64_t v133;
  size_t v134;
  int v135;
  uint64_t v136;
  uint64_t v137;
  size_t v138;
  void *v139;
  void *v140;
  int64_t v141;
  const void **v142;
  int64_t v143;
  const void **v144;
  const void *v145;
  uint64_t v146;
  uint64_t v147;
  const void *v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  uint64_t v152;
  void **v153;
  char *v154;
  size_t v155;
  void **p_dst;
  uint64_t v157;
  uint64_t v158;
  int v159;
  const UInt8 *v160;
  CFIndex v161;
  CFStringRef v162;
  std::string *v163;
  std::string::size_type v164;
  const __CFString *v165;
  CFComparisonResult v166;
  double v167;
  uint64_t v168;
  uint64_t v169;
  __int128 *v170;
  uint64_t v171;
  uint64_t v172;
  __int128 v173;
  size_t v174;
  void **v175;
  int v176;
  int v177;
  __int128 v179;
  uint64_t v180;
  const void ****v181;
  std::string::size_type v182;
  uint64_t v183;
  void **v184;
  _QWORD *v185;
  uint64_t v186;
  void **v187;
  void **v188;
  void **v189;
  void **v190;
  const void *v191;
  int64_t v192;
  char *v193;
  char v194;
  const void ***v195;
  const void **v196;
  const void **v197;
  __int128 v198;
  _QWORD *v199;
  void **v200;
  void **v201;
  void **v202;
  const UInt8 *v203;
  CFIndex v204;
  CFStringRef v205;
  uint64_t v206;
  uint64_t v207;
  std::__shared_weak_count *v208;
  unint64_t *p_shared_owners;
  unint64_t v210;
  const __CFLocale *v211;
  _BOOL4 v212;
  unint64_t *v213;
  unint64_t v214;
  uint64_t v215;
  void **v216;
  uint64_t v217;
  double v218;
  char *v219;
  __int128 v220;
  size_t v221;
  char v222;
  __int128 *p_src;
  void *v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  void *v228;
  std::__shared_weak_count *v229;
  unint64_t *v230;
  unint64_t v231;
  BOOL v232;
  BOOL v233;
  unint64_t *v234;
  unint64_t v235;
  void *v236;
  int64_t v237;
  char *v238;
  uint64_t v239;
  char *v240;
  uint64_t v241;
  uint64_t v242;
  char *v243;
  unint64_t v244;
  int64_t v245;
  int64_t v246;
  char *v247;
  unint64_t v248;
  uint64_t v249;
  unint64_t v250;
  int64_t v251;
  char *v252;
  _BYTE *v253;
  uint64_t v254;
  uint64_t v255;
  char *v256;
  uint64_t v257;
  char *v258;
  int64_t v259;
  char *v260;
  char *v261;
  int64_t v262;
  char *v263;
  char *v264;
  unint64_t v265;
  unint64_t v266;
  unint64_t v267;
  char *v268;
  char *v269;
  char *v270;
  unint64_t v271;
  uint64_t v272;
  __int128 *v273;
  _OWORD *v274;
  uint64_t v275;
  __int128 v276;
  int v277;
  char *v278;
  unint64_t v279;
  __int128 *v280;
  _OWORD *v281;
  uint64_t v282;
  __int128 v283;
  int v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  _OWORD *v288;
  __int128 *v289;
  uint64_t v290;
  __int128 v291;
  int v292;
  char *v293;
  float v294;
  float v295;
  float v296;
  uint64_t v298;
  const void ***v299;
  const void **v300;
  const void **v301;
  __int128 v302;
  size_t v303;
  const void ***v304;
  const void **v305;
  const void **v306;
  __int128 v307;
  size_t v308;
  int v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  void **v314;
  void *v315;
  void **v316;
  void **v317;
  void *v318;
  uint64_t v319;
  unint64_t v320;
  unint64_t v321;
  uint64_t v322;
  unint64_t v323;
  unint64_t v324;
  char *v325;
  uint64_t v326;
  uint64_t v327;
  _OWORD *v328;
  uint64_t v329;
  __int128 v330;
  uint64_t v331;
  _BYTE *v332;
  size_t v333;
  size_t v334;
  const void *v335;
  size_t v336;
  __int128 *v337;
  uint64_t v338;
  uint64_t v339;
  __int128 *v340;
  void **v341;
  int v342;
  void **v343;
  void **v344;
  void *v345;
  std::string *v346;
  std::string::size_type v347;
  uint64_t v348;
  std::string::size_type v349;
  std::string *v350;
  std::string::size_type v351;
  __int128 *v352;
  uint64_t v353;
  _BYTE *v354;
  uint64_t *v355;
  _QWORD *v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  void **v360;
  void **v361;
  void **v362;
  void *v363;
  void **v364;
  void **v365;
  void *v366;
  void **v367;
  void **v368;
  void *v369;
  void *v370;
  void *exception;
  void *v372;
  std::string::size_type v375;
  std::string::size_type v376;
  std::string::size_type v377;
  uint64_t v378;
  std::string::size_type v379;
  std::string::size_type v380;
  uint64_t v382;
  const void ****v383;
  uint64_t v384;
  void **v385;
  _QWORD *v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  char v391;
  void *v392[2];
  uint64_t v393;
  char *v394;
  void *v395[2];
  int64_t v396;
  __int128 v397;
  double v398;
  __int128 v399;
  __int128 v400;
  unint64_t v401;
  uint64_t v402;
  uint64_t v403;
  void **__dst;
  size_t v405;
  int64_t v406;
  void *__p;
  void *v408;
  unint64_t v409;
  void *v410;
  void **v411;
  void *v412;
  void **v413;
  void *v414;
  void **v415;
  __int128 __len;
  __int128 v417;
  float v418;
  void *v419;
  __int128 v420;
  int v421;
  void *v422;
  _BYTE *v423;
  void *v424;
  void *v425;
  char *v426;
  float v427;
  void *v428[2];
  unint64_t v429;
  size_t v430;
  __int128 __src;
  uint64_t v432;
  CFTypeRef cf;
  void *v434;
  char *v435;
  void *v436;
  int v437[2];
  uint64_t v438;
  void *v439;
  void *v440;
  char *v441;
  void *v442;
  void **v443;
  char v444;
  std::string v445;
  __int128 v446;
  int64_t v447;
  __int128 v448;
  double v449;
  __int128 v450;
  __int128 v451;
  uint64_t v452;
  uint64_t v453[19];
  void **v454;
  char *v455;
  char v456;
  int v457;
  uint64_t v458;

  v458 = *MEMORY[0x1E0C80C00];
  v382 = *a3;
  if (qword_1EE41C060 != -1)
    dispatch_once(&qword_1EE41C060, &unk_1E3D3A068);
  sub_19C3070E8(v395, a4);
  v15 = SHIBYTE(v396);
  v16 = (void **)v395[0];
  sub_19C306C68(&__len, (__int128 **)v382);
  v17 = v395;
  if (v15 < 0)
    v17 = v16;
  if ((SBYTE7(v417) & 0x80u) == 0)
    p_len = &__len;
  else
    p_len = (__int128 *)__len;
  sub_19C34EC30("(%zu) inline completions requested for stems={'%s'} with context='%s'", (uint64_t)&v445, 8, v17, p_len);
  if ((v445.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v19 = &v445;
  else
    v19 = (std::string *)v445.__r_.__value_.__r.__words[0];
  if ((v445.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v445.__r_.__value_.__r.__words[2]);
  else
    size = v445.__r_.__value_.__l.__size_;
  std::string::append(a10, (const std::string::value_type *)v19, size);
  if (SHIBYTE(a10->__r_.__value_.__r.__words[2]) < 0)
  {
    v24 = a10->__r_.__value_.__l.__size_;
    if (v24)
    {
      v23 = (std::string *)a10->__r_.__value_.__r.__words[0];
      if (!*(_BYTE *)(a10->__r_.__value_.__r.__words[0] + v24 - 1))
      {
        v22 = v24 - 1;
        a10->__r_.__value_.__l.__size_ = v22;
        goto LABEL_21;
      }
    }
  }
  else
  {
    v21 = HIBYTE(a10->__r_.__value_.__r.__words[2]);
    if (*((_BYTE *)&a10->__r_.__value_.__s + 23) && !a10->__r_.__value_.__s.__data_[v21 - 1])
    {
      v22 = v21 - 1;
      *((_BYTE *)&a10->__r_.__value_.__s + 23) = v21 - 1;
      v23 = a10;
LABEL_21:
      v23->__r_.__value_.__s.__data_[v22] = 0;
    }
  }
  std::string::push_back(a10, 10);
  if ((SHIBYTE(v445.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SBYTE7(v417) & 0x80000000) == 0)
      goto LABEL_24;
LABEL_734:
    operator delete((void *)__len);
    if ((SHIBYTE(v396) & 0x80000000) == 0)
      goto LABEL_25;
    goto LABEL_735;
  }
  operator delete(v445.__r_.__value_.__l.__data_);
  if (SBYTE7(v417) < 0)
    goto LABEL_734;
LABEL_24:
  if ((SHIBYTE(v396) & 0x80000000) == 0)
    goto LABEL_25;
LABEL_735:
  operator delete(v395[0]);
LABEL_25:
  v25 = (uint64_t)(*(_QWORD *)(v382 + 32) - *(_QWORD *)(v382 + 24)) >> 5;
  v445.__r_.__value_.__r.__words[0] = *(_QWORD *)(v382 + 24);
  v445.__r_.__value_.__l.__size_ = v25;
  sub_19C3E37B4(&v414, (__int128 **)&v445);
  sub_19C2FBF40((uint64_t *)&v412, a2, (uint64_t)&v414, (uint64_t **)a4);
  (*(void (**)(void **__return_ptr))(**(_QWORD **)a6 + 16))(&v410);
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v26 = v410;
  v385 = v411;
  if (v410 != v411)
  {
    v376 = *MEMORY[0x1E0DE4F60];
    v379 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
    v380 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
    v375 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
    v378 = MEMORY[0x1E0DE4FE0] + 64;
    v377 = MEMORY[0x1E0DE4FB8] + 16;
    v386 = a5;
    v389 = a2;
    while (1)
    {
      v388 = (uint64_t)v26;
      HIBYTE(v396) = 1;
      LOWORD(v395[0]) = 111;
      HIBYTE(v398) = 6;
      strcpy((char *)&v397, "'clock");
      BYTE7(v400) = 7;
      strcpy((char *)&v399, "o'clock");
      *((_BYTE *)&v445.__r_.__value_.__s + 23) = 6;
      strcpy((char *)&v445, "'clock");
      v446 = *(_OWORD *)v395;
      v447 = v396;
      v395[0] = 0;
      v395[1] = 0;
      v396 = 0;
      v449 = v398;
      v448 = v397;
      v397 = 0uLL;
      v398 = 0.0;
      *(_QWORD *)&v451 = v400;
      v450 = v399;
      v399 = 0uLL;
      *(_QWORD *)&v400 = 0;
      __len = 0u;
      v417 = 0u;
      v418 = 1.0;
      v28 = sub_19C2A0F2C((uint64_t)&v419, (uint64_t *)&v445, 6uLL);
      v29 = v28;
      v30 = *((_QWORD *)&__len + 1);
      if (*((_QWORD *)&__len + 1))
      {
        v31 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&__len + 8));
        v31.i16[0] = vaddlv_u8(v31);
        if (v31.u32[0] > 1uLL)
        {
          v11 = v28;
          if (v28 >= *((_QWORD *)&__len + 1))
            v11 = v28 % *((_QWORD *)&__len + 1);
        }
        else
        {
          v11 = (*((_QWORD *)&__len + 1) - 1) & v28;
        }
        v32 = *(uint64_t ***)(__len + 8 * v11);
        if (v32)
        {
          v33 = *v32;
          if (*v32)
          {
            if ((v445.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v34 = HIBYTE(v445.__r_.__value_.__r.__words[2]);
            else
              v34 = v445.__r_.__value_.__l.__size_;
            if ((v445.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v35 = &v445;
            else
              v35 = (std::string *)v445.__r_.__value_.__r.__words[0];
            if (v31.u32[0] < 2uLL)
            {
              while (1)
              {
                v41 = v33[1];
                if (v41 == v29)
                {
                  v42 = *((unsigned __int8 *)v33 + 39);
                  if ((v42 & 0x80u) == 0)
                    v43 = *((unsigned __int8 *)v33 + 39);
                  else
                    v43 = v33[3];
                  if (v43 == v34)
                  {
                    v44 = (const void **)(v33 + 2);
                    if ((v42 & 0x80) != 0)
                    {
                      if (!memcmp(*v44, v35, v33[3]))
                        goto LABEL_150;
                    }
                    else
                    {
                      if (!*((_BYTE *)v33 + 39))
                        goto LABEL_150;
                      v45 = v35;
                      while (*(unsigned __int8 *)v44 == v45->__r_.__value_.__s.__data_[0])
                      {
                        v44 = (const void **)((char *)v44 + 1);
                        v45 = (std::string *)((char *)v45 + 1);
                        if (!--v42)
                          goto LABEL_150;
                      }
                    }
                  }
                }
                else if ((v41 & (v30 - 1)) != v11)
                {
                  goto LABEL_77;
                }
                v33 = (uint64_t *)*v33;
                if (!v33)
                  goto LABEL_77;
              }
            }
            do
            {
              v36 = v33[1];
              if (v36 == v29)
              {
                v37 = *((unsigned __int8 *)v33 + 39);
                if ((v37 & 0x80u) == 0)
                  v38 = *((unsigned __int8 *)v33 + 39);
                else
                  v38 = v33[3];
                if (v38 == v34)
                {
                  v39 = (const void **)(v33 + 2);
                  if ((v37 & 0x80) != 0)
                  {
                    if (!memcmp(*v39, v35, v33[3]))
                      goto LABEL_150;
                  }
                  else
                  {
                    if (!*((_BYTE *)v33 + 39))
                      goto LABEL_150;
                    v40 = v35;
                    while (*(unsigned __int8 *)v39 == v40->__r_.__value_.__s.__data_[0])
                    {
                      v39 = (const void **)((char *)v39 + 1);
                      v40 = (std::string *)((char *)v40 + 1);
                      if (!--v37)
                        goto LABEL_150;
                    }
                  }
                }
              }
              else
              {
                if (v36 >= v30)
                  v36 %= v30;
                if (v36 != v11)
                  break;
              }
              v33 = (uint64_t *)*v33;
            }
            while (v33);
          }
        }
      }
LABEL_77:
      v46 = operator new(0x70uLL);
      v47 = v46;
      v419 = v46;
      *(_QWORD *)&v420 = &v417;
      BYTE8(v420) = 0;
      *v46 = 0;
      v46[1] = v29;
      if (SHIBYTE(v445.__r_.__value_.__r.__words[2]) < 0)
        sub_19C2B5238((_BYTE *)v46 + 16, v445.__r_.__value_.__l.__data_, v445.__r_.__value_.__l.__size_);
      else
        *(std::string *)(v46 + 2) = v445;
      if (SHIBYTE(v447) < 0)
      {
        sub_19C2B5238((_BYTE *)v47 + 40, (void *)v446, *((unint64_t *)&v446 + 1));
      }
      else
      {
        *(_OWORD *)(v47 + 5) = v446;
        v47[7] = v447;
      }
      if (SHIBYTE(v449) < 0)
      {
        sub_19C2B5238((_BYTE *)v47 + 64, (void *)v448, *((unint64_t *)&v448 + 1));
      }
      else
      {
        *((_OWORD *)v47 + 4) = v448;
        *((double *)v47 + 10) = v449;
      }
      v48 = v47 + 11;
      if (SBYTE7(v451) < 0)
      {
        sub_19C2B5238(v48, (void *)v450, *((unint64_t *)&v450 + 1));
      }
      else
      {
        *(_OWORD *)v48 = v450;
        v47[13] = v451;
      }
      BYTE8(v420) = 1;
      v49 = (float)(unint64_t)(*((_QWORD *)&v417 + 1) + 1);
      a2 = v389;
      if (!v30 || (float)(v418 * (float)v30) < v49)
        break;
LABEL_140:
      v70 = *(_QWORD **)(__len + 8 * v11);
      v71 = v419;
      if (v70)
      {
        *(_QWORD *)v419 = *v70;
LABEL_148:
        *v70 = v71;
        goto LABEL_149;
      }
      *(_QWORD *)v419 = v417;
      *(_QWORD *)&v417 = v71;
      *(_QWORD *)(__len + 8 * v11) = &v417;
      if (*(_QWORD *)v71)
      {
        v72 = *(_QWORD *)(*(_QWORD *)v71 + 8);
        if ((v30 & (v30 - 1)) != 0)
        {
          if (v72 >= v30)
            v72 %= v30;
        }
        else
        {
          v72 &= v30 - 1;
        }
        v70 = (_QWORD *)(__len + 8 * v72);
        goto LABEL_148;
      }
LABEL_149:
      ++*((_QWORD *)&v417 + 1);
LABEL_150:
      if (SBYTE7(v451) < 0)
        operator delete((void *)v450);
      v11 = 0x8000000000000000;
      if (SHIBYTE(v449) < 0)
      {
        operator delete((void *)v448);
        if ((SHIBYTE(v447) & 0x80000000) == 0)
        {
LABEL_154:
          if (SHIBYTE(v445.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_267;
          goto LABEL_155;
        }
      }
      else if ((SHIBYTE(v447) & 0x80000000) == 0)
      {
        goto LABEL_154;
      }
      operator delete((void *)v446);
      if (SHIBYTE(v445.__r_.__value_.__r.__words[2]) < 0)
LABEL_267:
        operator delete(v445.__r_.__value_.__l.__data_);
LABEL_155:
      HIBYTE(v396) = 1;
      LOWORD(v395[0]) = 32;
      sub_19C34F0F8((uint64_t)&v445, (__int128 *)v388, (unsigned __int8 *)v395);
      if (SHIBYTE(v396) < 0)
        operator delete(v395[0]);
      HIBYTE(v396) = 0;
      LOBYTE(v395[0]) = 0;
      v409 = 0;
      __p = 0;
      v408 = 0;
      v73 = v445.__r_.__value_.__l.__size_;
      v74 = v445.__r_.__value_.__r.__words[0];
      if (v445.__r_.__value_.__r.__words[0] == v445.__r_.__value_.__l.__size_)
      {
        if (!v445.__r_.__value_.__r.__words[0])
          goto LABEL_276;
        goto LABEL_269;
      }
      while (2)
      {
        v77 = *(char *)(v74 + 23);
        if (v77 >= 0)
          v78 = (uint64_t *)v74;
        else
          v78 = *(uint64_t **)v74;
        if (v77 >= 0)
          v79 = *(unsigned __int8 *)(v74 + 23);
        else
          v79 = *(_QWORD *)(v74 + 8);
        v80 = sub_19C2A0F2C((uint64_t)&v419, v78, v79);
        v81 = *((_QWORD *)&__len + 1);
        if (!*((_QWORD *)&__len + 1))
          goto LABEL_242;
        v82 = v80;
        v83 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&__len + 8));
        v83.i16[0] = vaddlv_u8(v83);
        if (v83.u32[0] > 1uLL)
        {
          v84 = v80;
          if (v80 >= *((_QWORD *)&__len + 1))
            v84 = v80 % *((_QWORD *)&__len + 1);
        }
        else
        {
          v84 = (*((_QWORD *)&__len + 1) - 1) & v80;
        }
        v85 = *(uint64_t ***)(__len + 8 * v84);
        if (!v85)
          goto LABEL_242;
        v86 = *v85;
        if (!*v85)
          goto LABEL_242;
        v87 = *(_BYTE *)(v74 + 23);
        if (v87 >= 0)
          v88 = *(unsigned __int8 *)(v74 + 23);
        else
          v88 = *(_QWORD *)(v74 + 8);
        if (v87 >= 0)
          v89 = (uint64_t *)v74;
        else
          v89 = *(uint64_t **)v74;
        if (v83.u32[0] < 2uLL)
        {
          v90 = *((_QWORD *)&__len + 1) - 1;
          while (1)
          {
            v95 = v86[1];
            if (v82 == v95)
            {
              v96 = *((unsigned __int8 *)v86 + 39);
              if ((v96 & 0x80u) == 0)
                v97 = *((unsigned __int8 *)v86 + 39);
              else
                v97 = v86[3];
              if (v97 == v88)
              {
                if ((v96 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v86[2], v89, v86[3]))
                    goto LABEL_222;
                }
                else
                {
                  if (!*((_BYTE *)v86 + 39))
                    goto LABEL_222;
                  v98 = 0;
                  while (*((unsigned __int8 *)v86 + v98 + 16) == *((unsigned __int8 *)v89 + v98))
                  {
                    if (v96 == ++v98)
                      goto LABEL_221;
                  }
                }
              }
            }
            else if ((v95 & v90) != v84)
            {
              goto LABEL_242;
            }
            v86 = (uint64_t *)*v86;
            if (!v86)
              goto LABEL_242;
          }
        }
        while (1)
        {
          v91 = v86[1];
          if (v82 != v91)
          {
            if (v91 >= v81)
              v91 %= v81;
            if (v91 != v84)
              goto LABEL_242;
            goto LABEL_190;
          }
          v92 = *((unsigned __int8 *)v86 + 39);
          if ((v92 & 0x80u) == 0)
            v93 = *((unsigned __int8 *)v86 + 39);
          else
            v93 = v86[3];
          if (v93 != v88)
            goto LABEL_190;
          if ((v92 & 0x80) != 0)
            break;
          if (!*((_BYTE *)v86 + 39))
            goto LABEL_222;
          v94 = 0;
          while (*((unsigned __int8 *)v86 + v94 + 16) == *((unsigned __int8 *)v89 + v94))
          {
            if (v92 == ++v94)
            {
LABEL_221:
              if (!v86)
                goto LABEL_242;
              goto LABEL_222;
            }
          }
LABEL_190:
          v86 = (uint64_t *)*v86;
          if (!v86)
            goto LABEL_242;
        }
        if (memcmp((const void *)v86[2], v89, v86[3]))
          goto LABEL_190;
LABEL_222:
        v99 = *((unsigned __int8 *)v86 + 63);
        if ((v99 & 0x80u) == 0)
          v100 = (void *)*((unsigned __int8 *)v86 + 63);
        else
          v100 = (void *)v86[6];
        v101 = (void *)HIBYTE(v396);
        if (v396 < 0)
          v101 = v395[1];
        if (v100 != v101)
          goto LABEL_242;
        v102 = (const void **)(v86 + 5);
        if (v396 >= 0)
          v103 = v395;
        else
          v103 = (void **)v395[0];
        if ((v99 & 0x80) != 0)
        {
          if (memcmp(*v102, v103, v86[6]))
            goto LABEL_242;
LABEL_237:
          if (__p == v408)
            goto LABEL_242;
          v104 = (void **)((char *)v408 - 24);
          v11 = 0x8000000000000000;
          if ((char *)v408 - 24 != (char *)(v86 + 11))
          {
            v105 = *((_BYTE *)v86 + 111);
            if (*((char *)v408 - 1) < 0)
            {
              if (v105 >= 0)
                v112 = v86 + 11;
              else
                v112 = (void *)v86[11];
              if (v105 >= 0)
                v113 = *((unsigned __int8 *)v86 + 111);
              else
                v113 = v86[12];
              sub_19C2E54A8(v104, v112, v113);
            }
            else if ((*((_BYTE *)v86 + 111) & 0x80) != 0)
            {
              sub_19C2E53E4(v104, (void *)v86[11], v86[12]);
            }
            else
            {
              v106 = *(_OWORD *)(v86 + 11);
              *((_QWORD *)v408 - 1) = v86[13];
              *(_OWORD *)v104 = v106;
            }
          }
          goto LABEL_249;
        }
        if (!*((_BYTE *)v86 + 63))
          goto LABEL_237;
        while (*(unsigned __int8 *)v102 == *(unsigned __int8 *)v103)
        {
          v102 = (const void **)((char *)v102 + 1);
          v103 = (void **)((char *)v103 + 1);
          if (!--v99)
            goto LABEL_237;
        }
LABEL_242:
        v107 = v408;
        if ((unint64_t)v408 >= v409)
        {
          v109 = sub_19C318C78((char **)&__p, v74);
          v11 = 0x8000000000000000;
        }
        else
        {
          if (*(char *)(v74 + 23) < 0)
          {
            sub_19C2B5238(v408, *(void **)v74, *(_QWORD *)(v74 + 8));
          }
          else
          {
            v108 = *(_OWORD *)v74;
            *((_QWORD *)v408 + 2) = *(_QWORD *)(v74 + 16);
            *v107 = v108;
          }
          v109 = (char *)v107 + 24;
          v11 = 0x8000000000000000;
        }
        v408 = v109;
LABEL_249:
        if (v395 != (void **)((char *)v408 - 24))
        {
          v110 = *((char *)v408 - 1);
          if (SHIBYTE(v396) < 0)
          {
            if (v110 >= 0)
              v75 = (char *)v408 - 24;
            else
              v75 = (char *)*((_QWORD *)v408 - 3);
            if (v110 >= 0)
              v76 = *((char *)v408 - 1);
            else
              v76 = *((_QWORD *)v408 - 2);
            sub_19C2E54A8(v395, v75, v76);
          }
          else if (*((char *)v408 - 1) < 0)
          {
            sub_19C2E53E4(v395, *((void **)v408 - 3), *((_QWORD *)v408 - 2));
          }
          else
          {
            v111 = *(_OWORD *)((char *)v408 - 24);
            v396 = *((_QWORD *)v408 - 1);
            *(_OWORD *)v395 = v111;
          }
        }
        v74 += 24;
        if (v74 != v73)
          continue;
        break;
      }
      if (SHIBYTE(v396) < 0)
      {
        operator delete(v395[0]);
        v74 = v445.__r_.__value_.__r.__words[0];
        if (!v445.__r_.__value_.__r.__words[0])
          goto LABEL_276;
      }
      else
      {
        v74 = v445.__r_.__value_.__r.__words[0];
        if (!v445.__r_.__value_.__r.__words[0])
          goto LABEL_276;
      }
LABEL_269:
      v114 = v445.__r_.__value_.__l.__size_;
      v115 = (void *)v74;
      if (v445.__r_.__value_.__l.__size_ != v74)
      {
        do
        {
          if (*(char *)(v114 - 1) < 0)
            operator delete(*(void **)(v114 - 24));
          v114 -= 24;
        }
        while (v114 != v74);
        v115 = (void *)v445.__r_.__value_.__r.__words[0];
      }
      v445.__r_.__value_.__l.__size_ = v74;
      operator delete(v115);
LABEL_276:
      sub_19C3E3CDC((uint64_t)&__len);
      v116 = (char *)__p;
      v117 = (char *)v408;
      if (__p == v408)
        goto LABEL_725;
      v118 = 1;
      do
      {
        while (!v118)
        {
          v118 = 0;
          v116 += 24;
          if (v116 == v117)
            goto LABEL_724;
        }
        sub_19C443CD4(&v445, *(_QWORD *)(a2 + 176), (uint64_t)v116, 0);
        v119 = v446;
        v118 = (_BYTE)v446 != 0;
        if ((_BYTE)v446 && SHIBYTE(v445.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v445.__r_.__value_.__l.__data_);
        v116 += 24;
      }
      while (v116 != v117);
      if (v119)
      {
        BYTE7(v417) = 1;
        LOWORD(__len) = 32;
        v453[0] = v378;
        v445.__r_.__value_.__r.__words[0] = v380;
        *(std::string::size_type *)((char *)v445.__r_.__value_.__r.__words + *(_QWORD *)(v380 - 24)) = v379;
        v120 = (std::ios_base *)((char *)&v445 + *(_QWORD *)(v445.__r_.__value_.__r.__words[0] - 24));
        std::ios_base::init(v120, &v445.__r_.__value_.__r.__words[1]);
        v120[1].__vftable = 0;
        v120[1].__fmtflags_ = -1;
        v445.__r_.__value_.__r.__words[0] = MEMORY[0x1E0DE4FE0] + 24;
        v453[0] = MEMORY[0x1E0DE4FE0] + 64;
        std::streambuf::basic_streambuf();
        v445.__r_.__value_.__l.__size_ = v377;
        v450 = 0u;
        v451 = 0u;
        LODWORD(v452) = 16;
        v121 = (uint64_t *)__p;
        v122 = (uint64_t *)v408;
        v123 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)v408 - (_BYTE *)__p) >> 3);
        if (v123 != 1)
        {
          if (!v123)
          {
            __dst = 0;
            v405 = 0;
            v406 = 0;
            v124 = v388;
            goto LABEL_370;
          }
          if ((SBYTE7(v417) & 0x80u) == 0)
            v130 = (const char *)&__len;
          else
            v130 = (const char *)__len;
          if (__p != v408)
          {
            if (v130)
            {
              do
              {
                v131 = *((char *)v121 + 23);
                if (v131 >= 0)
                  v132 = (uint64_t)v121;
                else
                  v132 = *v121;
                if (v131 >= 0)
                  v133 = *((unsigned __int8 *)v121 + 23);
                else
                  v133 = v121[1];
                sub_19C2A1B24(&v445, v132, v133);
                v134 = strlen(v130);
                sub_19C2A1B24(&v445, (uint64_t)v130, v134);
                v121 += 3;
              }
              while (v121 != v122);
            }
            else
            {
              do
              {
                v135 = *((char *)v121 + 23);
                if (v135 >= 0)
                  v136 = (uint64_t)v121;
                else
                  v136 = *v121;
                if (v135 >= 0)
                  v137 = *((unsigned __int8 *)v121 + 23);
                else
                  v137 = v121[1];
                sub_19C2A1B24(&v445, v136, v137);
                v121 += 3;
              }
              while (v121 != v122);
            }
          }
          if ((v452 & 0x10) != 0)
          {
            v143 = *((_QWORD *)&v451 + 1);
            v144 = (const void **)&v448;
            v124 = v388;
            if (*((_QWORD *)&v451 + 1) < *((_QWORD *)&v448 + 1))
            {
              *((_QWORD *)&v451 + 1) = *((_QWORD *)&v448 + 1);
              v143 = *((_QWORD *)&v448 + 1);
              v144 = (const void **)&v448;
            }
          }
          else
          {
            v124 = v388;
            if ((v452 & 8) == 0)
            {
              v138 = 0;
              HIBYTE(v396) = 0;
              v139 = v395;
              goto LABEL_352;
            }
            v143 = v447;
            v144 = (const void **)&v446;
          }
          v148 = *v144;
          v138 = v143 - (_QWORD)*v144;
          if (v138 > 0x7FFFFFFFFFFFFFF7)
            sub_19C2A1A54();
          if (v138 >= 0x17)
          {
            v149 = (v138 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v138 | 7) != 0x17)
              v149 = v138 | 7;
            v150 = v149 + 1;
            v139 = operator new(v149 + 1);
            v395[1] = (void *)v138;
            v396 = v150 | 0x8000000000000000;
            v395[0] = v139;
LABEL_351:
            memmove(v139, v148, v138);
            goto LABEL_352;
          }
          HIBYTE(v396) = v143 - *(_BYTE *)v144;
          v139 = v395;
          if (v138)
            goto LABEL_351;
LABEL_352:
          *((_BYTE *)v139 + v138) = 0;
          v151 = (char *)HIBYTE(v396);
          v152 = BYTE7(v417);
          if (SBYTE7(v417) < 0)
            v152 = *((_QWORD *)&__len + 1);
          if (v396 >= 0)
          {
            v153 = v395;
          }
          else
          {
            v151 = (char *)v395[1];
            v153 = (void **)v395[0];
          }
          v154 = &v151[-v152];
          if (v151 >= v154)
            v155 = (size_t)v154;
          else
            v155 = (size_t)v151;
          if (v155 > 0x7FFFFFFFFFFFFFF7)
            sub_19C2A1A54();
          if (v155 >= 0x17)
          {
            v157 = (v155 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v155 | 7) != 0x17)
              v157 = v155 | 7;
            v158 = v157 + 1;
            p_dst = (void **)operator new(v157 + 1);
            v405 = v155;
            v406 = v158 | 0x8000000000000000;
            __dst = p_dst;
            a2 = v389;
          }
          else
          {
            HIBYTE(v406) = v155;
            p_dst = (void **)&__dst;
            if (!v155)
              goto LABEL_368;
          }
          memmove(p_dst, v153, v155);
LABEL_368:
          *((_BYTE *)p_dst + v155) = 0;
          if (SHIBYTE(v396) < 0)
            operator delete(v395[0]);
LABEL_370:
          v445.__r_.__value_.__r.__words[0] = v376;
          *(std::string::size_type *)((char *)v445.__r_.__value_.__r.__words + *(_QWORD *)(v376 - 24)) = v375;
          v445.__r_.__value_.__l.__size_ = MEMORY[0x1E0DE4FB8] + 16;
          if (SBYTE7(v451) < 0)
            operator delete((void *)v450);
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          MEMORY[0x1A1AD34CC](v453);
          if (SBYTE7(v417) < 0)
            operator delete((void *)__len);
          v159 = *((char *)__p + 23);
          if (v159 >= 0)
            v160 = (const UInt8 *)__p;
          else
            v160 = *(const UInt8 **)__p;
          if (v159 >= 0)
            v161 = *((unsigned __int8 *)__p + 23);
          else
            v161 = *((_QWORD *)__p + 1);
          v162 = CFStringCreateWithBytes(0, v160, v161, 0x8000100u, 0);
          v395[0] = (void *)v162;
          if (!v162)
          {
            exception = __cxa_allocate_exception(0x10uLL);
            MEMORY[0x1A1AD3154](exception, "Could not construct");
            __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
          }
          sub_19C3D81B4(&v445, (_QWORD *)(v124 + 32));
          if ((v445.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v163 = &v445;
          else
            v163 = (std::string *)v445.__r_.__value_.__r.__words[0];
          if ((v445.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v164 = HIBYTE(v445.__r_.__value_.__r.__words[2]);
          else
            v164 = v445.__r_.__value_.__l.__size_;
          v165 = CFStringCreateWithBytes(0, (const UInt8 *)v163, v164, 0x8000100u, 0);
          *(_QWORD *)&__len = v165;
          if (!v165)
          {
            v370 = __cxa_allocate_exception(0x10uLL);
            MEMORY[0x1A1AD3154](v370, "Could not construct");
            __cxa_throw(v370, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
          }
          v166 = CFStringCompare(v162, v165, 0x81uLL);
          CFRelease(v165);
          if (SHIBYTE(v445.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v445.__r_.__value_.__l.__data_);
          CFRelease(v162);
          if (v166 == kCFCompareEqualTo || sub_19C308364(v124, (uint64_t)v414, (uint64_t)v415))
            goto LABEL_722;
          v396 = 0;
          LOWORD(v397) = 0;
          BYTE8(v397) = 1;
          v400 = xmmword_19C46DE10;
          v401 = 0xFFEFFFFFFFFFFFFFLL;
          v402 = 0;
          v403 = 0;
          v167 = *(float *)(v124 + 24);
          *(_QWORD *)&v399 = 0x3FF0000000000000;
          v398 = v167;
          DWORD2(v399) = 2;
          *(double *)v395 = v167;
          *(double *)&v395[1] = v167;
          v168 = *(_QWORD *)(v124 + 152);
          v169 = v124;
          v170 = *(__int128 **)v382;
          v171 = *(_QWORD *)(v382 + 8);
          v172 = *(_QWORD *)(v169 + 64);
          if (*(_QWORD *)(v169 + 56) == v172)
          {
            *((_BYTE *)&v445.__r_.__value_.__s + 23) = 0;
            v445.__r_.__value_.__s.__data_[0] = 0;
          }
          else if (*(char *)(v172 - 9) < 0)
          {
            sub_19C2B5238(&v445, *(void **)(v172 - 32), *(_QWORD *)(v172 - 24));
          }
          else
          {
            v173 = *(_OWORD *)(v172 - 32);
            v445.__r_.__value_.__r.__words[2] = *(_QWORD *)(v172 - 16);
            *(_OWORD *)&v445.__r_.__value_.__l.__data_ = v173;
          }
          sub_19C3067B0(&v394, (uint64_t)&__dst, v388, (uint64_t)v395, (v171 - (uint64_t)v170) >> 5, v168, (__int128 *)&v445, 4);
          if (SHIBYTE(v445.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v445.__r_.__value_.__l.__data_);
          v174 = HIBYTE(v406);
          if (v406 < 0)
            v174 = v405;
          if (v174 != 7)
            goto LABEL_408;
          v175 = (void **)&__dst;
          if (v406 < 0)
            v175 = __dst;
          v176 = *(_DWORD *)v175;
          v177 = *(_DWORD *)((char *)v175 + 3);
          if (v176 == 1818437487 && v177 == 1801678700)
          {
            v215 = 128;
          }
          else
          {
LABEL_408:
            if (v394[23] < 0)
            {
              sub_19C2B5238(v392, *(void **)v394, *((_QWORD *)v394 + 1));
            }
            else
            {
              v179 = *(_OWORD *)v394;
              v393 = *((_QWORD *)v394 + 2);
              *(_OWORD *)v392 = v179;
            }
            v180 = *(_QWORD *)(v388 + 152);
            v181 = *a4;
            v182 = (uint64_t)(*(_QWORD *)(*a3 + 32) - *(_QWORD *)(*a3 + 24)) >> 5;
            v445.__r_.__value_.__r.__words[0] = *(_QWORD *)(*a3 + 24);
            v445.__r_.__value_.__l.__size_ = v182;
            sub_19C3E37B4(&v442, (__int128 **)&v445);
            v183 = (uint64_t)v181[v180];
            v184 = (void **)operator new();
            sub_19C2E1F84((uint64_t)v184, v183);
            v454 = v184;
            v419 = 0;
            v420 = 0uLL;
            v185 = operator new(8uLL);
            v419 = v185;
            *(_QWORD *)&v420 = v185;
            *((_QWORD *)&v420 + 1) = v185 + 1;
            v186 = operator new();
            sub_19C2E1F84(v186, (uint64_t)v184);
            *v185 = v186;
            *(_QWORD *)&v420 = v185 + 1;
            sub_19C2FBF40((uint64_t *)&__len, a2, (uint64_t)&v442, (uint64_t **)&v419);
            sub_19C2E1F84((uint64_t)&v445, __len);
            v187 = (void **)__len;
            if ((_QWORD)__len)
            {
              v188 = (void **)*((_QWORD *)&__len + 1);
              if (*((_QWORD *)&__len + 1) == (_QWORD)__len)
              {
                *((_QWORD *)&__len + 1) = __len;
                operator delete((void *)__len);
              }
              else
              {
                do
                  v188 = sub_19C2E25C8(v188 - 23);
                while (v188 != v187);
                v185 = v419;
                *((_QWORD *)&__len + 1) = v187;
                operator delete((void *)__len);
                if (!v185)
                {
                  v189 = v454;
                  if (v454)
                    goto LABEL_416;
                  goto LABEL_417;
                }
              }
            }
            v199 = (_QWORD *)v420;
            while (v199 != v185)
            {
              v201 = (void **)*--v199;
              v200 = v201;
              *v199 = 0;
              if (v201)
              {
                v202 = sub_19C2E25C8(v200);
                MEMORY[0x1A1AD355C](v202, 0x1030C403C62F202);
              }
            }
            *(_QWORD *)&v420 = v185;
            operator delete(v185);
            v189 = v454;
            if (v454)
            {
LABEL_416:
              v190 = sub_19C2E25C8(v189);
              MEMORY[0x1A1AD355C](v190, 0x1030C403C62F202);
            }
LABEL_417:
            v191 = (const void *)*((_QWORD *)&v451 + 1);
            v441 = 0;
            v439 = 0;
            v440 = 0;
            v192 = v452 - *((_QWORD *)&v451 + 1);
            if (v452 != *((_QWORD *)&v451 + 1))
            {
              if (v192 < 0)
                sub_19C2A18E8();
              v439 = operator new(v452 - *((_QWORD *)&v451 + 1));
              v440 = v439;
              v193 = (char *)v439 + 4 * (v192 >> 2);
              v441 = v193;
              memmove(v439, v191, v192);
              v440 = v193;
            }
            *(_QWORD *)v437 = 0;
            v436 = 0;
            v438 = 0;
            if (v393 >= 0)
              v194 = HIBYTE(v393);
            else
              v194 = (char)v392[1];
            BYTE7(v417) = 1;
            LOWORD(__len) = 32;
            sub_19C34F0F8((uint64_t)&v434, (__int128 *)v392, (unsigned __int8 *)&__len);
            if (SBYTE7(v417) < 0)
              operator delete((void *)__len);
            v195 = v181[v180];
            v197 = v195[3];
            v196 = v195[4];
            if (v197 == v196)
            {
              BYTE7(v417) = 0;
              LOBYTE(__len) = 0;
            }
            else if (*((char *)v196 - 9) < 0)
            {
              sub_19C2B5238(&__len, (void *)*(v196 - 4), (unint64_t)*(v196 - 3));
            }
            else
            {
              v198 = *((_OWORD *)v196 - 2);
              *(_QWORD *)&v417 = *(v196 - 2);
              __len = v198;
            }
            if ((SBYTE7(v417) & 0x80u) == 0)
              v203 = (const UInt8 *)&__len;
            else
              v203 = (const UInt8 *)__len;
            if ((SBYTE7(v417) & 0x80u) == 0)
              v204 = BYTE7(v417);
            else
              v204 = *((_QWORD *)&__len + 1);
            v205 = CFStringCreateWithBytes(0, v203, v204, 0x8000100u, 0);
            cf = v205;
            if (!v205)
            {
              v372 = __cxa_allocate_exception(0x10uLL);
              MEMORY[0x1A1AD3154](v372, "Could not construct");
              __cxa_throw(v372, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
            }
            if (SBYTE7(v417) < 0)
              operator delete((void *)__len);
            v206 = *(_QWORD *)(a2 + 176);
            v207 = *(_QWORD *)(v206 + 72);
            v208 = *(std::__shared_weak_count **)(v206 + 80);
            *(_QWORD *)&__len = v207;
            *((_QWORD *)&__len + 1) = v208;
            if (v208)
            {
              p_shared_owners = (unint64_t *)&v208->__shared_owners_;
              do
                v210 = __ldxr(p_shared_owners);
              while (__stxr(v210 + 1, p_shared_owners));
            }
            v211 = (const __CFLocale *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v207 + 64))(v207);
            v212 = sub_19C43336C(v205, v211);
            if (v208)
            {
              v213 = (unint64_t *)&v208->__shared_owners_;
              do
                v214 = __ldaxr(v213);
              while (__stlxr(v214 - 1, v213));
              if (!v214)
              {
                ((void (*)(std::__shared_weak_count *))v208->__on_zero_shared)(v208);
                std::__shared_weak_count::__release_weak(v208);
              }
            }
            v383 = v181;
            v384 = v180;
            v215 = 1 << v194;
            v216 = (void **)v435;
            if (v435 != v434)
            {
              v217 = 0;
              v391 = 0;
              if (v212)
                v218 = -2.60899997;
              else
                v218 = -3.04299998;
              v216 = (void **)v434;
              do
              {
                v219 = (char *)&v216[3 * v217];
                v387 = v217;
                if (v219[23] < 0)
                {
                  sub_19C2B5238(&__src, *(void **)v219, *((_QWORD *)v219 + 1));
                }
                else
                {
                  v220 = *(_OWORD *)v219;
                  v432 = *((_QWORD *)v219 + 2);
                  __src = v220;
                }
                *(_QWORD *)&__len = 0;
                sub_19C34EADC((uint64_t *)&__src, (uint64_t *)&__len);
                v221 = __len;
                if (v387)
                  goto LABEL_464;
                v299 = v383[v384];
                v301 = v299[3];
                v300 = v299[4];
                if (v301 == v300)
                  goto LABEL_464;
                if (*((char *)v300 - 9) < 0)
                {
                  sub_19C2B5238(&__len, (void *)*(v300 - 4), (unint64_t)*(v300 - 3));
                }
                else
                {
                  v302 = *((_OWORD *)v300 - 2);
                  *(_QWORD *)&v417 = *(v300 - 2);
                  __len = v302;
                }
                if ((SBYTE7(v417) & 0x80u) == 0)
                  v303 = BYTE7(v417);
                else
                  v303 = *((_QWORD *)&__len + 1);
                if (SBYTE7(v417) < 0)
                {
                  operator delete((void *)__len);
                  if (v221 >= v303)
                    goto LABEL_464;
                }
                else if (v221 >= v303)
                {
                  goto LABEL_464;
                }
                v304 = v383[v384];
                v306 = v304[3];
                v305 = v304[4];
                if (v306 == v305)
                {
                  v308 = 0;
                  BYTE7(v417) = 0;
                  LOBYTE(__len) = 0;
                }
                else
                {
                  if (*((char *)v305 - 9) < 0)
                  {
                    sub_19C2B5238(&__len, (void *)*(v305 - 4), (unint64_t)*(v305 - 3));
                  }
                  else
                  {
                    v307 = *((_OWORD *)v305 - 2);
                    *(_QWORD *)&v417 = *(v305 - 2);
                    __len = v307;
                  }
                  v308 = BYTE7(v417);
                }
                v419 = 0;
                v309 = (char)v308;
                if ((v308 & 0x80u) == 0)
                  v221 = v308;
                else
                  v221 = *((_QWORD *)&__len + 1);
                if (v221)
                {
                  v310 = 0;
                  do
                  {
                    v311 = v310;
                    sub_19C34EADC((uint64_t *)&__len, (uint64_t *)&v419);
                    v310 = v311 + 1;
                  }
                  while ((unint64_t)v419 < v221);
                  v419 = 0;
                  if (v311 == -1)
                  {
                    v221 = 0;
                    if ((v309 & 0x80000000) == 0)
                      goto LABEL_464;
LABEL_608:
                    operator delete((void *)__len);
                    goto LABEL_464;
                  }
                  v312 = ~v311;
                  do
                    sub_19C34EADC((uint64_t *)&__src, (uint64_t *)&v419);
                  while (!__CFADD__(v312++, 1));
                  v221 = (size_t)v419;
                }
                if (v309 < 0)
                  goto LABEL_608;
LABEL_464:
                v430 = v221;
                while ((SHIBYTE(v432) & 0x80000000) == 0)
                {
                  v222 = HIBYTE(v432);
                  if (v221 >= HIBYTE(v432))
                    goto LABEL_571;
                  p_src = &__src;
LABEL_473:
                  if (v221 > 0x7FFFFFFFFFFFFFF7)
                    sub_19C2A1A54();
                  if (v221 >= 0x17)
                  {
                    v225 = (v221 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v221 | 7) != 0x17)
                      v225 = v221 | 7;
                    v226 = v225 + 1;
                    v224 = operator new(v225 + 1);
                    v429 = v226 | 0x8000000000000000;
                    v428[0] = v224;
                    v428[1] = (void *)v221;
LABEL_480:
                    memmove(v224, p_src, v221);
                    goto LABEL_481;
                  }
                  HIBYTE(v429) = v221;
                  v224 = v428;
                  if (v221)
                    goto LABEL_480;
LABEL_481:
                  *((_BYTE *)v224 + v221) = 0;
                  sub_19C443CD4(&__len, *(_QWORD *)(a2 + 176), (uint64_t)v428, 0);
                  if (!BYTE8(v417))
                    goto LABEL_465;
                  if (!sub_19C44391C(*(_QWORD *)(a2 + 176), (uint64_t)v428))
                  {
                    if (*a5 < 0x2EuLL)
                    {
                      v427 = 0.0;
                      v236 = v436;
                      v426 = 0;
                      v424 = 0;
                      v425 = 0;
                      v237 = *(_QWORD *)v437 - (_QWORD)v436;
                      if (*(void **)v437 != v436)
                      {
                        if (v237 < 0)
                          sub_19C2A18E8();
                        v424 = operator new(*(_QWORD *)v437 - (_QWORD)v436);
                        v425 = v424;
                        v238 = (char *)v424 + 4 * (v237 >> 2);
                        v426 = v238;
                        memmove(v424, v236, v237);
                        v425 = v238;
                      }
                      v239 = *(_QWORD *)(a2 + 112);
                      sub_19C351494(&v454, (uint64_t)v428);
                      sub_19C297950(&v419, (const UInt8 *)&v454);
                      v421 = v457;
                      (*(void (**)(void **__return_ptr, uint64_t, void **))(*(_QWORD *)v239 + 16))(&v422, v239, &v419);
                      if (SHIBYTE(v420) < 0)
                        operator delete(v419);
                      v390 = v215;
                      if (v456 < 0)
                        operator delete(v454);
                      v240 = (char *)v422;
                      v241 = v423 - (_BYTE *)v422;
                      if (v423 - (_BYTE *)v422 < 1)
                        goto LABEL_558;
                      v242 = v241 >> 2;
                      v243 = (char *)v425;
                      v244 = (unint64_t)v424;
                      v245 = (_BYTE *)v425 - (_BYTE *)v424;
                      v246 = ((_BYTE *)v425 - (_BYTE *)v424) >> 2;
                      v247 = (char *)v424 + (((_BYTE *)v425 - (_BYTE *)v424) & 0xFFFFFFFFFFFFFFFCLL);
                      if (v241 >> 2 > (v426 - (_BYTE *)v425) >> 2)
                      {
                        v248 = v246 + v242;
                        if ((unint64_t)(v246 + v242) >> 62)
                          sub_19C2A18E8();
                        v249 = v426 - (_BYTE *)v424;
                        if ((v426 - (_BYTE *)v424) >> 1 > v248)
                          v248 = v249 >> 1;
                        if ((unint64_t)v249 >= 0x7FFFFFFFFFFFFFFCLL)
                          v250 = 0x3FFFFFFFFFFFFFFFLL;
                        else
                          v250 = v248;
                        if (v250)
                        {
                          if (v250 >> 62)
                            sub_19C2A143C();
                          v251 = ((_BYTE *)v425 - (_BYTE *)v424) >> 2;
                          v252 = (char *)v424 + (((_BYTE *)v425 - (_BYTE *)v424) & 0xFFFFFFFFFFFFFFFCLL);
                          v253 = operator new(4 * v250);
                          v247 = v252;
                          v246 = v251;
                        }
                        else
                        {
                          v253 = 0;
                        }
                        v268 = &v253[4 * v246];
                        v269 = &v268[4 * v242];
                        if ((unint64_t)(v241 - 4) >= 0x1C)
                        {
                          v270 = &v253[4 * v246];
                          if ((unint64_t)(&v253[v245 & 0xFFFFFFFFFFFFFFFCLL] - v240) < 0x20)
                            goto LABEL_536;
                          v271 = ((unint64_t)(v241 - 4) >> 2) + 1;
                          v272 = 4 * (v271 & 0x7FFFFFFFFFFFFFF8);
                          v270 = &v268[v272];
                          v273 = (__int128 *)(v240 + 16);
                          v274 = &v253[4 * v246 + 16];
                          v275 = v271 & 0x7FFFFFFFFFFFFFF8;
                          do
                          {
                            v276 = *v273;
                            *(v274 - 1) = *(v273 - 1);
                            *v274 = v276;
                            v273 += 2;
                            v274 += 2;
                            v275 -= 8;
                          }
                          while (v275);
                          if (v271 != (v271 & 0x7FFFFFFFFFFFFFF8))
                          {
                            v240 += v272;
                            goto LABEL_536;
                          }
                        }
                        else
                        {
                          v270 = &v253[4 * v246];
                          do
                          {
LABEL_536:
                            v277 = *(_DWORD *)v240;
                            v240 += 4;
                            *(_DWORD *)v270 = v277;
                            v270 += 4;
                          }
                          while (v270 != v269);
                        }
                        if ((char *)v244 != v243)
                        {
                          if ((unint64_t)(v245 - 4) < 0x3C)
                          {
                            v278 = v247;
                            goto LABEL_544;
                          }
                          v278 = v247;
                          if (v244
                             + (v245 & 0xFFFFFFFFFFFFFFFCLL)
                             - (unint64_t)&v253[v245 & 0xFFFFFFFFFFFFFFFCLL] < 0x20)
                            goto LABEL_773;
                          v279 = ((unint64_t)(v245 - 4) >> 2) + 1;
                          v278 = &v247[-4 * (v279 & 0x7FFFFFFFFFFFFFF8)];
                          v280 = (__int128 *)(v244 + 4 * v246 - 16);
                          v281 = &v253[4 * v246 - 16];
                          v282 = v279 & 0x7FFFFFFFFFFFFFF8;
                          do
                          {
                            v283 = *v280;
                            *(v281 - 1) = *(v280 - 1);
                            *v281 = v283;
                            v280 -= 2;
                            v281 -= 2;
                            v282 -= 8;
                          }
                          while (v282);
                          v268 -= 4 * (v279 & 0x7FFFFFFFFFFFFFF8);
                          if (v279 != (v279 & 0x7FFFFFFFFFFFFFF8))
                          {
LABEL_773:
                            do
                            {
LABEL_544:
                              v284 = *((_DWORD *)v278 - 1);
                              v278 -= 4;
                              *((_DWORD *)v268 - 1) = v284;
                              v268 -= 4;
                            }
                            while (v278 != (char *)v244);
                          }
                        }
                        v285 = v243 - v247;
                        if (v243 != v247)
                          memmove(v269, v247, v243 - v247);
                        v424 = v268;
                        v425 = &v269[v285];
                        v426 = &v253[4 * v250];
                        a5 = v386;
                        v11 = 0x8000000000000000;
                        if (v244)
                          operator delete((void *)v244);
LABEL_558:
                        a2 = v389;
                        (*(void (**)(_QWORD, void **, void **, float *, _QWORD *))(**(_QWORD **)(v389 + 96)
                                                                                            + 24))(*(_QWORD *)(v389 + 96), &v424, &v439, &v427, a5);
                        v294 = v427;
                        v295 = log10f(v427);
                        if (v294 <= 0.0)
                          v296 = -10.0;
                        else
                          v296 = v295;
                        v215 = v390;
                        if (v422)
                        {
                          v423 = v422;
                          operator delete(v422);
                        }
                        if (v424)
                        {
                          v425 = v424;
                          operator delete(v424);
                        }
                        if (v296 < -6.521 || v296 - v167 <= v218)
                          goto LABEL_484;
                        goto LABEL_483;
                      }
                      v254 = (_BYTE *)v425 - v247;
                      v255 = ((_BYTE *)v425 - v247) >> 2;
                      if (v255 >= v242)
                      {
                        v256 = (char *)v422 + 4 * v242;
                        v260 = (char *)v425;
                      }
                      else
                      {
                        v256 = (char *)v422 + 4 * v255;
                        v257 = v423 - v256;
                        if (v423 != v256)
                        {
                          v258 = (char *)v424 + (((_BYTE *)v425 - (_BYTE *)v424) & 0xFFFFFFFFFFFFFFFCLL);
                          v259 = ((_BYTE *)v425 - (_BYTE *)v424) >> 2;
                          memmove(v425, (char *)v422 + 4 * v255, v423 - v256);
                          v246 = v259;
                          v247 = v258;
                          v11 = 0x8000000000000000;
                        }
                        v260 = &v243[v257];
                        v425 = &v243[v257];
                        a5 = v386;
                        if (v254 < 1)
                          goto LABEL_558;
                      }
                      v261 = &v247[4 * v242];
                      v262 = v260 - v261;
                      v263 = &v260[-4 * v242];
                      v264 = v260;
                      if (v263 < v243)
                      {
                        v265 = (v245 & 0xFFFFFFFFFFFFFFFCLL) + v262;
                        v266 = v244 + v265 + 4;
                        if ((unint64_t)v243 > v266)
                          v266 = (unint64_t)v243;
                        v267 = v266 + ~v244 - v265;
                        if (v267 <= 0x2B)
                        {
                          v264 = v260;
                          goto LABEL_553;
                        }
                        v264 = v260;
                        if ((unint64_t)&v261[-(v245 & 0xFFFFFFFFFFFFFFFCLL) - v244] < 0x20)
                          goto LABEL_774;
                        v286 = (v267 >> 2) + 1;
                        v287 = 4 * (v286 & 0x7FFFFFFFFFFFFFF8);
                        v263 += v287;
                        v288 = v260 + 16;
                        v289 = (__int128 *)(v244 + v262 + 4 * v246 + 16);
                        v290 = v286 & 0x7FFFFFFFFFFFFFF8;
                        do
                        {
                          v291 = *v289;
                          *(v288 - 1) = *(v289 - 1);
                          *v288 = v291;
                          v288 += 2;
                          v289 += 2;
                          v290 -= 8;
                        }
                        while (v290);
                        v264 = &v260[v287];
                        if (v286 != (v286 & 0x7FFFFFFFFFFFFFF8))
                        {
LABEL_774:
                          do
                          {
LABEL_553:
                            v292 = *(_DWORD *)v263;
                            v263 += 4;
                            *(_DWORD *)v264 = v292;
                            v264 += 4;
                          }
                          while (v263 < v243);
                        }
                      }
                      v425 = v264;
                      if (v260 != v261)
                      {
                        v293 = v247;
                        memmove(&v260[-4 * (v262 >> 2)], v247, v262);
                        v247 = v293;
                      }
                      if (v256 != v240)
                        memmove(v247, v240, v256 - v240);
                      goto LABEL_558;
                    }
                    v227 = *(_QWORD *)(a2 + 176);
                    v228 = *(void **)(v227 + 72);
                    v229 = *(std::__shared_weak_count **)(v227 + 80);
                    v419 = v228;
                    *(_QWORD *)&v420 = v229;
                    if (v229)
                    {
                      v230 = (unint64_t *)&v229->__shared_owners_;
                      do
                        v231 = __ldxr(v230);
                      while (__stxr(v231 + 1, v230));
                    }
                    v232 = sub_19C43306C((uint64_t)v228, (uint64_t)v428);
                    v233 = v232;
                    if (!v229)
                      goto LABEL_495;
                    v234 = (unint64_t *)&v229->__shared_owners_;
                    do
                      v235 = __ldaxr(v234);
                    while (__stlxr(v235 - 1, v234));
                    if (!v235)
                    {
                      ((void (*)(std::__shared_weak_count *))v229->__on_zero_shared)(v229);
                      std::__shared_weak_count::__release_weak(v229);
                      if (!v233)
                        goto LABEL_484;
                    }
                    else
                    {
LABEL_495:
                      if (!v232)
                        goto LABEL_484;
                    }
                  }
LABEL_483:
                  v215 |= 1 << (v391 + v430);
LABEL_484:
                  if (BYTE8(v417) && SBYTE7(v417) < 0)
                    operator delete((void *)__len);
LABEL_465:
                  if (SHIBYTE(v429) < 0)
                    operator delete(v428[0]);
                  sub_19C34EADC((uint64_t *)&__src, (uint64_t *)&v430);
                  v221 = v430;
                }
                v222 = BYTE8(__src);
                if (v221 < *((_QWORD *)&__src + 1))
                {
                  p_src = (__int128 *)__src;
                  goto LABEL_473;
                }
LABEL_571:
                v298 = *(_QWORD *)(a2 + 112);
                sub_19C351494(&v419, (uint64_t)&__src);
                sub_19C297950(&__len, (const UInt8 *)&v419);
                DWORD2(v417) = v421;
                (*(void (**)(void ***__return_ptr, uint64_t, __int128 *))(*(_QWORD *)v298 + 16))(&v454, v298, &__len);
                if (SBYTE7(v417) < 0)
                {
                  operator delete((void *)__len);
                  if (SHIBYTE(v420) < 0)
                    goto LABEL_581;
                }
                else
                {
                  if ((SHIBYTE(v420) & 0x80000000) == 0)
                    goto LABEL_573;
LABEL_581:
                  operator delete(v419);
                }
LABEL_573:
                sub_19C308C6C((char **)&v436, *(_BYTE **)v437, (char *)v454, v455, (v455 - (char *)v454) >> 2);
                if (v454)
                {
                  v455 = (char *)v454;
                  operator delete(v454);
                }
                if (SHIBYTE(v432) < 0)
                  operator delete((void *)__src);
                v391 += v222 + 1;
                v217 = v387 + 1;
                v216 = (void **)v434;
              }
              while (0xAAAAAAAAAAAAAAABLL * ((v435 - (_BYTE *)v434) >> 3) > v387 + 1);
            }
            if (cf)
            {
              CFRelease(cf);
              v216 = (void **)v434;
            }
            if (v216)
            {
              v314 = (void **)v435;
              v315 = v216;
              if (v435 != (char *)v216)
              {
                do
                {
                  if (*((char *)v314 - 1) < 0)
                    operator delete(*(v314 - 3));
                  v314 -= 3;
                }
                while (v314 != v216);
                v315 = v434;
              }
              v435 = (char *)v216;
              operator delete(v315);
            }
            if (v436)
            {
              *(_QWORD *)v437 = v436;
              operator delete(v436);
            }
            if (v439)
            {
              v440 = v439;
              operator delete(v439);
            }
            sub_19C2E25C8((void **)&v445.__r_.__value_.__l.__data_);
            v316 = (void **)v442;
            if (v442)
            {
              v317 = v443;
              v318 = v442;
              if (v443 != v442)
              {
                do
                {
                  if (*((char *)v317 - 9) < 0)
                    operator delete(*(v317 - 4));
                  v317 -= 4;
                }
                while (v317 != v316);
                v318 = v442;
              }
              v443 = v316;
              operator delete(v318);
            }
            if (SHIBYTE(v393) < 0)
              operator delete(v392[0]);
          }
          v319 = 0;
          v320 = v215;
          do
          {
            v321 = 0x8000000000000000 >> v319;
            v322 = v320 | (1 << v319);
            if ((v320 & (0x8000000000000000 >> v319)) == 0)
              v322 = v320 & ~(1 << v319);
            v323 = v322 & ~v321;
            v324 = v322 | v321;
            if ((v320 & (1 << v319)) != 0)
              v320 = v324;
            else
              v320 = v323;
            ++v319;
          }
          while (v319 != 32);
          if (qword_1EE41C060 != -1)
            dispatch_once(&qword_1EE41C060, &unk_1E3D3A068);
          v325 = v394;
          if (v394[23] < 0)
            v325 = *(char **)v394;
          v326 = v388;
          if (*(char *)(v388 + 23) < 0)
            v326 = *(_QWORD *)v388;
          v327 = *((_QWORD *)v394 + 6);
          v328 = operator new(0x48uLL);
          v329 = 0;
          v419 = v328;
          v420 = xmmword_19C46DE30;
          *(_QWORD *)&v330 = 0x3030303030303030;
          *((_QWORD *)&v330 + 1) = 0x3030303030303030;
          *v328 = v330;
          v328[1] = v330;
          v328[2] = v330;
          v328[3] = v330;
          v331 = 63;
          *((_BYTE *)v328 + 64) = 0;
          do
          {
            if (((v320 >> v329) & 1) != 0)
            {
              v332 = &v419;
              if (v420 < 0)
                v332 = v419;
              v332[v331] = 49;
            }
            ++v329;
            --v331;
          }
          while (v329 != 64);
          if (*(char *)(v388 + 23) < 0)
            v333 = *(_QWORD *)(v388 + 8);
          else
            v333 = *(unsigned __int8 *)(v388 + 23);
          v334 = HIBYTE(v420);
          if (v420 >= 0)
          {
            v335 = &v419;
          }
          else
          {
            v334 = v420;
            v335 = v419;
          }
          if (v334 >= v333)
            v336 = v333;
          else
            v336 = v334;
          if (v336 > 0x7FFFFFFFFFFFFFF7)
            sub_19C2A1A54();
          if (v336 >= 0x17)
          {
            v338 = (v336 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v336 | 7) != 0x17)
              v338 = v336 | 7;
            v339 = v338 + 1;
            v337 = (__int128 *)operator new(v338 + 1);
            *(_QWORD *)&v417 = v339 | 0x8000000000000000;
            *(_QWORD *)&__len = v337;
            *((_QWORD *)&__len + 1) = v336;
          }
          else
          {
            BYTE7(v417) = v336;
            v337 = &__len;
            if (!v336)
            {
LABEL_672:
              *((_BYTE *)v337 + v336) = 0;
              if ((SBYTE7(v417) & 0x80u) == 0)
                v340 = &__len;
              else
                v340 = (__int128 *)__len;
              sub_19C2E3008((char *)&v454, (uint64_t)(v394 + 48));
              if (v456 >= 0)
                v341 = (void **)&v454;
              else
                v341 = v454;
              sub_19C306C68(&v442, (__int128 **)v382);
              v342 = v444;
              v343 = (void **)v442;
              sub_19C3070E8(&v439, a4);
              v344 = &v442;
              if (v342 < 0)
                v344 = v343;
              v345 = &v439;
              if (SHIBYTE(v441) < 0)
                v345 = v439;
              sub_19C34EC30("Generated static inline completion='%s' (%s), score=%f, word-boundary-bitMask=%s,details=%s - for context=%s & stems=%s", (uint64_t)&v445, v325, v326, v327, v340, v341, v344, v345);
              if ((v445.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v346 = &v445;
              else
                v346 = (std::string *)v445.__r_.__value_.__r.__words[0];
              if ((v445.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v347 = HIBYTE(v445.__r_.__value_.__r.__words[2]);
              else
                v347 = v445.__r_.__value_.__l.__size_;
              std::string::append(a10, (const std::string::value_type *)v346, v347);
              if (SHIBYTE(a10->__r_.__value_.__r.__words[2]) < 0)
              {
                v351 = a10->__r_.__value_.__l.__size_;
                if (v351)
                {
                  v350 = (std::string *)a10->__r_.__value_.__r.__words[0];
                  if (!*(_BYTE *)(a10->__r_.__value_.__r.__words[0] + v351 - 1))
                  {
                    v349 = v351 - 1;
                    a10->__r_.__value_.__l.__size_ = v349;
                    goto LABEL_695;
                  }
                }
              }
              else
              {
                v348 = HIBYTE(a10->__r_.__value_.__r.__words[2]);
                if (*((_BYTE *)&a10->__r_.__value_.__s + 23)
                  && !*((_BYTE *)&a10[-1].__r_.__value_.__r.__words[2] + v348 + 7))
                {
                  v349 = v348 - 1;
                  *((_BYTE *)&a10->__r_.__value_.__s + 23) = v348 - 1;
                  v350 = a10;
LABEL_695:
                  v350->__r_.__value_.__s.__data_[v349] = 0;
                }
              }
              std::string::push_back(a10, 10);
              if (SHIBYTE(v445.__r_.__value_.__r.__words[2]) < 0)
              {
                operator delete(v445.__r_.__value_.__l.__data_);
                if ((SHIBYTE(v441) & 0x80000000) == 0)
                {
LABEL_698:
                  if ((v444 & 0x80000000) == 0)
                    goto LABEL_699;
                  goto LABEL_706;
                }
              }
              else if ((SHIBYTE(v441) & 0x80000000) == 0)
              {
                goto LABEL_698;
              }
              operator delete(v439);
              if ((v444 & 0x80000000) == 0)
              {
LABEL_699:
                if ((v456 & 0x80000000) == 0)
                  goto LABEL_700;
                goto LABEL_707;
              }
LABEL_706:
              operator delete(v442);
              if ((v456 & 0x80000000) == 0)
              {
LABEL_700:
                if ((SBYTE7(v417) & 0x80000000) == 0)
                  goto LABEL_701;
                goto LABEL_708;
              }
LABEL_707:
              operator delete(v454);
              if ((SBYTE7(v417) & 0x80000000) == 0)
              {
LABEL_701:
                if ((SHIBYTE(v420) & 0x80000000) == 0)
                {
LABEL_702:
                  v352 = (__int128 *)v394;
                  v353 = operator new();
                  if (SHIBYTE(a10->__r_.__value_.__r.__words[2]) < 0)
                    sub_19C2B5238(&v445, a10->__r_.__value_.__l.__data_, a10->__r_.__value_.__l.__size_);
                  else
                    v445 = *a10;
                  sub_19C29769C((char *)v353, v352);
                  *(_QWORD *)(v353 + 256) = v215;
                  v354 = (_BYTE *)(v353 + 264);
                  if (SHIBYTE(v445.__r_.__value_.__r.__words[2]) < 0)
                  {
                    sub_19C2B5238(v354, v445.__r_.__value_.__l.__data_, v445.__r_.__value_.__l.__size_);
                    if (SHIBYTE(v445.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v445.__r_.__value_.__l.__data_);
                  }
                  else
                  {
                    *(_OWORD *)v354 = *(_OWORD *)&v445.__r_.__value_.__l.__data_;
                    *(_QWORD *)(v353 + 280) = *((_QWORD *)&v445.__r_.__value_.__l + 2);
                  }
                  *(_QWORD *)&__len = v353;
                  v355 = (uint64_t *)a1[1];
                  if ((unint64_t)v355 >= a1[2])
                  {
                    v356 = sub_19C307614(a1, (uint64_t *)&__len);
                    v357 = __len;
                    a1[1] = v356;
                    if (v357)
                    {
                      if (*(char *)(v357 + 287) < 0)
                        operator delete(*(void **)(v357 + 264));
                      v358 = sub_19C296378(v357);
                      MEMORY[0x1A1AD355C](v358, 0x1032C40D90104AELL);
                    }
                  }
                  else
                  {
                    *(_QWORD *)&__len = 0;
                    *v355 = v353;
                    a1[1] = v355 + 1;
                  }
                  v359 = sub_19C296378((uint64_t)v352);
                  MEMORY[0x1A1AD355C](v359, 0x1032C4057ACE4D0);
LABEL_722:
                  if (SHIBYTE(v406) < 0)
                    operator delete(__dst);
                  goto LABEL_724;
                }
LABEL_709:
                operator delete(v419);
                goto LABEL_702;
              }
LABEL_708:
              operator delete((void *)__len);
              if ((SHIBYTE(v420) & 0x80000000) == 0)
                goto LABEL_702;
              goto LABEL_709;
            }
          }
          memmove(v337, v335, v336);
          goto LABEL_672;
        }
        v125 = *((char *)__p + 23);
        if (v125 >= 0)
          v126 = (const UInt8 *)__p;
        else
          v126 = *(const UInt8 **)__p;
        if (v125 >= 0)
          v127 = *((unsigned __int8 *)__p + 23);
        else
          v127 = *((_QWORD *)__p + 1);
        sub_19C2A1B24(&v445, (uint64_t)v126, v127);
        v124 = v388;
        if ((v452 & 0x10) != 0)
        {
          v141 = *((_QWORD *)&v451 + 1);
          v142 = (const void **)&v448;
          if (*((_QWORD *)&v451 + 1) < *((_QWORD *)&v448 + 1))
          {
            *((_QWORD *)&v451 + 1) = *((_QWORD *)&v448 + 1);
            v141 = *((_QWORD *)&v448 + 1);
            v142 = (const void **)&v448;
          }
        }
        else
        {
          if ((v452 & 8) == 0)
          {
            v128 = 0;
            HIBYTE(v406) = 0;
            v129 = (void **)&__dst;
            goto LABEL_342;
          }
          v141 = v447;
          v142 = (const void **)&v446;
        }
        v145 = *v142;
        v128 = v141 - (_QWORD)*v142;
        if (v128 > 0x7FFFFFFFFFFFFFF7)
          sub_19C2A1A54();
        if (v128 >= 0x17)
        {
          v146 = (v128 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v128 | 7) != 0x17)
            v146 = v128 | 7;
          v147 = v146 + 1;
          v129 = (void **)operator new(v146 + 1);
          v405 = v128;
          v406 = v147 | 0x8000000000000000;
          __dst = v129;
        }
        else
        {
          HIBYTE(v406) = v141 - *(_BYTE *)v142;
          v129 = (void **)&__dst;
          if (!v128)
            goto LABEL_342;
        }
        memmove(v129, v145, v128);
LABEL_342:
        *((_BYTE *)v129 + v128) = 0;
        goto LABEL_370;
      }
LABEL_724:
      v116 = (char *)__p;
LABEL_725:
      if (v116)
      {
        v360 = (void **)v408;
        v27 = v116;
        if (v408 != v116)
        {
          do
          {
            if (*((char *)v360 - 1) < 0)
              operator delete(*(v360 - 3));
            v360 -= 3;
          }
          while (v360 != (void **)v116);
          v27 = __p;
        }
        v408 = v116;
        operator delete(v27);
      }
      v26 = (void *)(v388 + 216);
      if ((void **)(v388 + 216) == v385)
      {
        v361 = (void **)v410;
        if (!v410)
          goto LABEL_744;
        goto LABEL_737;
      }
    }
    v50 = v30 < 3 || (v30 & (v30 - 1)) != 0;
    v51 = v50 | (2 * v30);
    v52 = vcvtps_u32_f32(v49 / v418);
    if (v51 <= v52)
      prime = v52;
    else
      prime = v51;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v30 = *((_QWORD *)&__len + 1);
    if (prime <= *((_QWORD *)&__len + 1))
    {
      if (prime >= *((_QWORD *)&__len + 1))
        goto LABEL_127;
      v64 = vcvtps_u32_f32((float)*((unint64_t *)&v417 + 1) / v418);
      if (*((_QWORD *)&__len + 1) < 3uLL
        || (v65 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&__len + 8)), v65.i16[0] = vaddlv_u8(v65), v65.u32[0] > 1uLL))
      {
        v64 = std::__next_prime(v64);
      }
      else
      {
        v66 = 1 << -(char)__clz(v64 - 1);
        if (v64 >= 2)
          v64 = v66;
      }
      if (prime <= v64)
        prime = v64;
      if (prime >= v30)
      {
        v30 = *((_QWORD *)&__len + 1);
LABEL_127:
        if ((v30 & (v30 - 1)) != 0)
        {
          if (v29 >= v30)
            v11 = v29 % v30;
          else
            v11 = v29;
        }
        else
        {
          v11 = (v30 - 1) & v29;
        }
        goto LABEL_140;
      }
      if (!prime)
      {
        v140 = (void *)__len;
        *(_QWORD *)&__len = 0;
        if (v140)
          operator delete(v140);
        v30 = 0;
        *((_QWORD *)&__len + 1) = 0;
        goto LABEL_127;
      }
    }
    if (prime >> 61)
      sub_19C2A143C();
    v54 = operator new(8 * prime);
    v55 = (void *)__len;
    *(_QWORD *)&__len = v54;
    if (v55)
      operator delete(v55);
    v56 = 0;
    *((_QWORD *)&__len + 1) = prime;
    do
      *(_QWORD *)(__len + 8 * v56++) = 0;
    while (prime != v56);
    v57 = (_QWORD **)v417;
    if (!(_QWORD)v417)
    {
LABEL_126:
      v30 = prime;
      goto LABEL_127;
    }
    v58 = *(_QWORD *)(v417 + 8);
    v59 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v60 = v58 & v59;
      *(_QWORD *)(__len + 8 * v60) = &v417;
      for (i = *v57; *v57; i = *v57)
      {
        v62 = i[1] & v59;
        if (v62 == v60)
        {
          v57 = (_QWORD **)i;
        }
        else if (*(_QWORD *)(__len + 8 * v62))
        {
          *v57 = (_QWORD *)*i;
          v63 = 8 * v62;
          *i = **(_QWORD **)(__len + v63);
          **(_QWORD **)(__len + v63) = i;
        }
        else
        {
          *(_QWORD *)(__len + 8 * v62) = v57;
          v57 = (_QWORD **)i;
          v60 = v62;
        }
      }
      goto LABEL_126;
    }
    if (v58 >= prime)
      v58 %= prime;
    *(_QWORD *)(__len + 8 * v58) = &v417;
    v67 = *v57;
    if (!*v57)
      goto LABEL_126;
    while (1)
    {
      v69 = v67[1];
      if (v69 >= prime)
        v69 %= prime;
      if (v69 != v58)
      {
        if (!*(_QWORD *)(__len + 8 * v69))
        {
          *(_QWORD *)(__len + 8 * v69) = v57;
          goto LABEL_131;
        }
        *v57 = (_QWORD *)*v67;
        v68 = 8 * v69;
        *v67 = **(_QWORD **)(__len + v68);
        **(_QWORD **)(__len + v68) = v67;
        v67 = v57;
      }
      v69 = v58;
LABEL_131:
      v57 = (_QWORD **)v67;
      v67 = (_QWORD *)*v67;
      v58 = v69;
      if (!v67)
        goto LABEL_126;
    }
  }
  v361 = (void **)v410;
  if (!v410)
    goto LABEL_744;
LABEL_737:
  v362 = v411;
  v363 = v361;
  if (v411 != v361)
  {
    do
    {
      sub_19C2E25C8(v362 - 23);
      if (*((char *)v362 - 193) < 0)
        operator delete(*(v362 - 27));
      v362 -= 27;
    }
    while (v362 != v361);
    v363 = v410;
  }
  v411 = v361;
  operator delete(v363);
LABEL_744:
  v364 = (void **)v412;
  if (v412)
  {
    v365 = v413;
    v366 = v412;
    if (v413 != v412)
    {
      do
        v365 = sub_19C2E25C8(v365 - 23);
      while (v365 != v364);
      v366 = v412;
    }
    v413 = v364;
    operator delete(v366);
  }
  v367 = (void **)v414;
  if (v414)
  {
    v368 = v415;
    v369 = v414;
    if (v415 != v414)
    {
      do
      {
        if (*((char *)v368 - 9) < 0)
          operator delete(*(v368 - 4));
        v368 -= 4;
      }
      while (v368 != v367);
      v369 = v414;
    }
    v415 = v367;
    operator delete(v369);
  }
}

void sub_19C301988(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_19C2CDAC8(a1);
}

void sub_19C30200C()
{
  JUMPOUT(0x19C302028);
}

void sub_19C302064(uint64_t a1, uint64_t a2, const void *****a3, uint64_t a4, unint64_t a5, std::string *a6, _QWORD *a7)
{
  uint64_t v11;
  void **v12;
  unint64_t v13;
  char *v14;
  size_t v15;
  char *v16;
  __int128 v17;
  char *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  __int128 v28;
  _DWORD *v29;
  char *v30;
  char v31;
  __int128 v32;
  __int128 v33;
  unsigned __int8 *v34;
  __int128 v35;
  char *v36;
  char *v37;
  const void ***v38;
  const void **v39;
  const void **v40;
  __int128 v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  void **v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  size_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  char *v56;
  uint64_t v57;
  int v58;
  __int128 *p_s1;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  unint64_t v65;
  unsigned int v66;
  unint64_t v67;
  _BYTE *v69;
  int *v73;
  int v76;
  int v77;
  uint64_t *v79;
  __int128 v80;
  int v81;
  char *v82;
  uint64_t v83;
  _DWORD *v84;
  char *v85;
  __int128 v86;
  unsigned int *v87;
  uint64_t v88;
  int *v89;
  int *v90;
  char *v91;
  char *v92;
  int v93;
  char *v94;
  int64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  _BYTE *v100;
  char *v101;
  unint64_t v102;
  char *v103;
  int v104;
  uint64_t v105;
  _OWORD *v106;
  char *v107;
  uint64_t v108;
  __int128 v109;
  uint64_t v110;
  CFTypeRef *v111;
  uint64_t v112;
  CFTypeRef v113;
  uint64_t v114;
  uint64_t v115;
  void *v116;
  void *v117;
  int v118;
  void ***v119;
  char *v120;
  char *v121;
  char v122;
  __int128 v123;
  char *v124;
  size_t v125;
  const void *v126;
  char *v127;
  unint64_t v128;
  uint64_t v129;
  int v130;
  char *v131;
  __int128 *v132;
  unsigned __int8 *j;
  void **v134;
  void *v135;
  uint64_t v136;
  uint64_t v137;
  _DWORD *v138;
  char *v139;
  unint64_t i;
  char *v141;
  __int128 v142;
  unsigned int *v143;
  uint64_t v144;
  int *v145;
  int *v146;
  char *v147;
  char *v148;
  int v149;
  char *v150;
  int64_t v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  unint64_t v155;
  _BYTE *v156;
  char *v157;
  unint64_t v158;
  char *v159;
  int v160;
  uint64_t v161;
  _OWORD *v162;
  char *v163;
  uint64_t v164;
  __int128 v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t *v168;
  uint64_t v169;
  CFTypeRef *v170;
  uint64_t v171;
  CFTypeRef v172;
  uint64_t v173;
  uint64_t v174;
  void *v175;
  void *v176;
  _QWORD *v177;
  unsigned __int16 v178;
  char *v179;
  unint64_t v180;
  unint64_t v181;
  uint64_t v182;
  const void *v183;
  const UInt8 *v184;
  CFIndex v185;
  const __CFString *v186;
  char *v187;
  int v188;
  const UInt8 *v189;
  CFIndex v190;
  char *v191;
  unint64_t v192;
  const __CFArray *v193;
  CFIndex Count;
  CFIndex v195;
  const __CFArray *v196;
  CFIndex v197;
  unint64_t v198;
  void *ValueAtIndex;
  void *v200;
  CFComparisonResult v201;
  unint64_t v202;
  void *v203;
  void *v204;
  CFComparisonResult v205;
  char v206;
  int v207;
  int v208;
  size_t v209;
  unint64_t v210;
  std::string *p_dst;
  uint64_t v212;
  uint64_t v213;
  void **v214;
  void **v215;
  std::string::size_type v216;
  std::string *v217;
  __int128 v218;
  unint64_t v219;
  unint64_t v220;
  uint64_t v221;
  uint64_t v222;
  unint64_t v223;
  __int128 v224;
  unint64_t v225;
  __int128 *v226;
  __int128 v227;
  unint64_t v228;
  unint64_t v229;
  _QWORD *v230;
  _QWORD *v231;
  _BOOL4 v233;
  void **v234;
  char v235;
  __int128 v236;
  __int128 v237;
  uint64_t v238;
  char *v239;
  uint64_t v240;
  unint64_t v241;
  char *v242;
  __int128 v243;
  uint64_t v244;
  uint64_t v245;
  __int128 v246;
  void *v247;
  void *v248;
  unint64_t v249;
  char *v250;
  unint64_t v251;
  int8x8_t v252;
  unint64_t v253;
  uint8x8_t v254;
  unint64_t v255;
  _QWORD *v256;
  _QWORD *v257;
  uint64_t v258;
  unint64_t v259;
  uint64_t v260;
  int8x8_t v261;
  uint8x8_t v262;
  unint64_t v263;
  float **v264;
  float *v265;
  uint64_t v266;
  unint64_t v267;
  uint64_t v268;
  char *v269;
  char *v270;
  BOOL v271;
  float *v272;
  float v273;
  char *v274;
  float v275;
  BOOL v276;
  __int128 **v277;
  void **v278;
  __int128 v279;
  void **v280;
  size_t v281;
  uint64_t v282;
  char *v283;
  int64_t v284;
  char *v285;
  char *v286;
  char *v287;
  char *v288;
  int v289;
  char *v290;
  int64_t v291;
  uint64_t v292;
  unint64_t v293;
  uint64_t v294;
  unint64_t v295;
  _BYTE *v296;
  char *v297;
  unint64_t v298;
  char *v299;
  int v300;
  uint64_t v301;
  _OWORD *v302;
  char *v303;
  uint64_t v304;
  __int128 v305;
  char *v306;
  uint64_t v307;
  unsigned __int8 *v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  int v313;
  unsigned __int8 *v314;
  unsigned __int8 *v315;
  unsigned __int8 *v316;
  unsigned __int8 *v317;
  size_t v318;
  size_t v319;
  __int128 *v320;
  __int128 *v321;
  char *v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  int v327;
  unsigned __int8 *v328;
  unsigned __int8 *v329;
  unsigned __int8 *v330;
  unsigned __int8 *v331;
  void **v332;
  void **v333;
  uint64_t v334;
  uint64_t v335;
  void *v336;
  char *v337;
  uint64_t v338;
  void *v339;
  uint64_t v340;
  void **v341;
  uint64_t v342;
  size_t v343;
  char **v344;
  __int128 *v345;
  int v346;
  void **v347;
  void **v348;
  __int128 *v349;
  _QWORD *v350;
  uint64_t v351;
  _QWORD *v352;
  int v353;
  const char *v354;
  void *v355;
  void *v356;
  void *exception;
  void **v358;
  std::string *v359;
  unint64_t v360;
  const void *****v361;
  _QWORD *v362;
  unint64_t v365;
  unint64_t v366;
  uint64_t v368;
  uint64_t v369;
  _QWORD *v370;
  uint64_t v371;
  void *__p[2];
  __int128 v373;
  void **v374;
  __int128 v375;
  int v376;
  __int128 v377;
  unint64_t v378;
  uint64_t v379;
  uint64_t v380;
  void *v381[2];
  uint64_t v382;
  __int128 __s1;
  void *v384;
  char v385;
  __int128 v386;
  uint64_t v387;
  void *v388;
  char *v389;
  char *v390;
  __int128 v391;
  uint64_t v392;
  int v393;
  char v394;
  void *v395;
  void **v396;
  std::string __dst;
  __int128 v398;
  uint64_t v399;
  __int128 v400;
  uint64_t v401;
  CFTypeRef v402;
  void *__src[2];
  uint64_t v404;
  __int128 v405;
  void *v406;
  char *v407;
  char *v408;
  char *v409;
  char *v410;
  char *v411;
  unint64_t v412;
  void *v413;
  __int128 v414;
  uint64_t v415;
  int v416;
  uint64_t v417;
  CFRange v418;
  CFRange v419;

  v417 = *MEMORY[0x1E0C80C00];
  if ((char *)a3[1] - (char *)*a3 != 8)
    __assert_rtn("_embeddingBasedPredictions", "ToucanLanguageModelSession.cpp", 659, "stems.size() == 1");
  v11 = *(_QWORD *)(a2 + 32);
  __p[0] = *(void **)(a2 + 24);
  __p[1] = (void *)((int64_t)(v11 - (unint64_t)__p[0]) >> 5);
  sub_19C3E37B4(&v395, (__int128 **)__p);
  v12 = (void **)v395;
  if ((unint64_t)((char *)v396 - (_BYTE *)v395) < 0x80)
    goto LABEL_275;
  v359 = a6;
  v360 = a5;
  LOBYTE(v391) = 0;
  v394 = 0;
  v388 = 0;
  v389 = 0;
  v390 = 0;
  v361 = a3;
  v362 = a7;
  if (v396 != v395)
  {
    v13 = 0;
    while (1)
    {
      if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 112) + 176))(*(_QWORD *)(a1 + 112)) == 2)
        sub_19C2FDA58((uint64_t)__p, a1, &v388, (const void **)&v391, (uint64_t)&v12[4 * v13]);
      else
        sub_19C2FDFF4((uint64_t)__p, a1, (std::string *)&v12[4 * v13]);
      v16 = v389;
      if (v389 >= v390)
        break;
      v17 = *(_OWORD *)__p;
      *((_QWORD *)v389 + 2) = v373;
      *(_OWORD *)v16 = v17;
      *((_DWORD *)v16 + 6) = DWORD2(v373);
      v18 = v16 + 32;
      v389 = v16 + 32;
LABEL_37:
      v29 = v395;
      v30 = (char *)v395 + 32 * v13;
      if (v394)
      {
        if (&v391 != (__int128 *)v30)
        {
          v31 = v30[23];
          if (SHIBYTE(v392) < 0)
          {
            if (v31 >= 0)
              v14 = (char *)v395 + 32 * v13;
            else
              v14 = *(char **)v30;
            if (v31 >= 0)
              v15 = v30[23];
            else
              v15 = *((_QWORD *)v30 + 1);
            sub_19C2E54A8((void **)&v391, v14, v15);
          }
          else if (v30[23] < 0)
          {
            sub_19C2E53E4(&v391, *(void **)v30, *((_QWORD *)v30 + 1));
          }
          else
          {
            v32 = *(_OWORD *)v30;
            v392 = *((_QWORD *)v30 + 2);
            v391 = v32;
          }
        }
        v393 = v29[8 * v13 + 6];
      }
      else
      {
        if (v30[23] < 0)
        {
          sub_19C2B5238(&v391, *(void **)v30, *((_QWORD *)v30 + 1));
        }
        else
        {
          v33 = *(_OWORD *)v30;
          v392 = *((_QWORD *)v30 + 2);
          v391 = v33;
        }
        v393 = v29[8 * v13 + 6];
        v394 = 1;
      }
      ++v13;
      v12 = (void **)v395;
      if (v13 >= ((char *)v396 - (_BYTE *)v395) >> 5)
      {
        v34 = (unsigned __int8 *)v388;
        a7 = v362;
        goto LABEL_51;
      }
    }
    v19 = (char *)v388;
    v20 = (v389 - (_BYTE *)v388) >> 5;
    v21 = v20 + 1;
    if ((unint64_t)(v20 + 1) >> 59)
      sub_19C2A18E8();
    v22 = v390 - (_BYTE *)v388;
    if ((v390 - (_BYTE *)v388) >> 4 > v21)
      v21 = v22 >> 4;
    if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFE0)
      v23 = 0x7FFFFFFFFFFFFFFLL;
    else
      v23 = v21;
    if (v23 >> 59)
      sub_19C2A143C();
    v24 = (char *)operator new(32 * v23);
    v25 = &v24[32 * v20];
    *(_OWORD *)v25 = *(_OWORD *)__p;
    *((_QWORD *)v25 + 2) = v373;
    __p[1] = 0;
    *(_QWORD *)&v373 = 0;
    __p[0] = 0;
    *((_DWORD *)v25 + 6) = DWORD2(v373);
    if (v16 == v19)
    {
      v388 = v25;
      v390 = &v24[32 * v23];
      if (!v16)
      {
LABEL_35:
        v18 = v25 + 32;
        v389 = v25 + 32;
        if (SBYTE7(v373) < 0)
          operator delete(__p[0]);
        goto LABEL_37;
      }
    }
    else
    {
      v26 = v25;
      v27 = v16;
      do
      {
        v28 = *((_OWORD *)v27 - 2);
        *((_QWORD *)v26 - 2) = *((_QWORD *)v27 - 2);
        *((_OWORD *)v26 - 2) = v28;
        *((_QWORD *)v27 - 3) = 0;
        *((_QWORD *)v27 - 2) = 0;
        *((_QWORD *)v27 - 4) = 0;
        *((_DWORD *)v26 - 2) = *((_DWORD *)v27 - 2);
        v26 -= 32;
        v27 -= 32;
      }
      while (v27 != v19);
      v388 = v26;
      v390 = &v24[32 * v23];
      do
      {
        if (*(v16 - 9) < 0)
          operator delete(*((void **)v16 - 4));
        v16 -= 32;
      }
      while (v16 != v19);
      v16 = v19;
      if (!v19)
        goto LABEL_35;
    }
    operator delete(v16);
    goto LABEL_35;
  }
  v34 = 0;
  v18 = 0;
LABEL_51:
  if ((unint64_t)(v18 - (char *)v34) < 0x80)
    goto LABEL_264;
  sub_19C2FD184((uint64_t)__p, a1, v34, 0, 0);
  if ((char)v34[23] < 0)
    operator delete(*(void **)v34);
  v35 = *(_OWORD *)__p;
  *((_QWORD *)v34 + 2) = v373;
  *(_OWORD *)v34 = v35;
  *((_DWORD *)v34 + 6) = DWORD2(v373);
  (*(void (**)(__int128 *__return_ptr, _QWORD, unsigned __int8 *))(**(_QWORD **)(a1 + 112) + 16))(&v414, *(_QWORD *)(a1 + 112), v34);
  sub_19C2FD184((uint64_t)__p, a1, v34 + 32, (unsigned int *)v414, *((unsigned int **)&v414 + 1));
  v36 = (char *)v388;
  v37 = (char *)v388 + 32;
  if (*((char *)v388 + 55) < 0)
    operator delete(*(void **)v37);
  *(_OWORD *)v37 = *(_OWORD *)__p;
  *((_QWORD *)v37 + 2) = v373;
  BYTE7(v373) = 0;
  LOBYTE(__p[0]) = 0;
  *((_DWORD *)v36 + 14) = DWORD2(v373);
  if ((_QWORD)v414)
  {
    *((_QWORD *)&v414 + 1) = v414;
    operator delete((void *)v414);
  }
  v38 = **a3;
  v40 = v38[3];
  v39 = v38[4];
  if (v40 == v39)
  {
    HIBYTE(v387) = 0;
    LOBYTE(v386) = 0;
  }
  else if (*((char *)v39 - 9) < 0)
  {
    sub_19C2B5238(&v386, (void *)*(v39 - 4), (unint64_t)*(v39 - 3));
  }
  else
  {
    v41 = *((_OWORD *)v39 - 2);
    v387 = (uint64_t)*(v39 - 2);
    v386 = v41;
  }
  v42 = HIBYTE(v387);
  if (SHIBYTE(v387) < 0)
  {
    v43 = *((_QWORD *)&v386 + 1);
    if (*((_QWORD *)&v386 + 1))
    {
      v44 = v386;
LABEL_68:
      if (*(_BYTE *)(v44 + v43 - 1) != 32)
        goto LABEL_259;
    }
  }
  else if (HIBYTE(v387))
  {
    v43 = HIBYTE(v387);
    v44 = (uint64_t)&v386;
    goto LABEL_68;
  }
  v45 = *(void ***)(a1 + 160);
  v358 = v45 + 13;
  if (*((char *)v45 + 127) < 0)
  {
    sub_19C2B5238(&v405, v45[13], (unint64_t)v45[14]);
  }
  else
  {
    v405 = *(_OWORD *)(v45 + 13);
    v406 = v45[15];
  }
  __s1 = v405;
  v384 = v406;
  v406 = 0;
  v405 = 0uLL;
  v385 = 1;
  v46 = v389;
  v47 = v389 - v36;
  if ((unint64_t)(v389 - v36) < 0x80)
  {
    v354 = "contextTokens.size() >= kMinContextForEmbeddingBasePredictions";
    v353 = 76;
    goto LABEL_751;
  }
  v48 = (v47 >> 5) - 1;
  v49 = (v47 >> 5) - 4;
  if (v49 <= 3)
    v49 = 3;
  if (v48 <= 3)
    v50 = 3;
  else
    v50 = v49;
  v366 = (v47 >> 5) - 1;
  if (v48 <= v50)
  {
    v61 = (v47 >> 5) - 1;
    goto LABEL_100;
  }
  v51 = *((_QWORD *)&__s1 + 1);
  if (SHIBYTE(v384) >= 0)
    v52 = HIBYTE(v384);
  else
    v52 = *((_QWORD *)&__s1 + 1);
  if ((HIBYTE(v384) & 0x80) != 0)
  {
    v126 = (const void *)__s1;
    v127 = v389 - 64;
    v128 = (v47 >> 5) - 1;
    while (1)
    {
      v129 = v127[23];
      v130 = (char)v129;
      if ((v129 & 0x80u) != 0)
        v129 = *((_QWORD *)v127 + 1);
      if (v52 == v129)
      {
        v131 = v130 >= 0 ? v127 : *(char **)v127;
        if (!memcmp(v126, v131, v51))
          break;
      }
      --v128;
      v127 -= 32;
      if (v128 <= v50)
      {
        v53 = v366;
        goto LABEL_702;
      }
    }
    v61 = v128;
    if (v128 <= v366)
      goto LABEL_100;
  }
  else if (HIBYTE(v384))
  {
    v53 = (v47 >> 5) - 1;
    v54 = v53;
    do
    {
      v55 = v54 - 1;
      v56 = &v36[32 * v54 - 32];
      v57 = v56[23];
      v58 = (char)v57;
      if ((v57 & 0x80u) != 0)
        v57 = *((_QWORD *)v56 + 1);
      if (v52 == v57)
      {
        if (v58 < 0)
          v56 = *(char **)v56;
        p_s1 = &__s1;
        v60 = HIBYTE(v384);
        while (*(unsigned __int8 *)p_s1 == *v56)
        {
          p_s1 = (__int128 *)((char *)p_s1 + 1);
          ++v56;
          if (!--v60)
            goto LABEL_94;
        }
      }
      --v54;
    }
    while (v55 > v50);
LABEL_702:
    v61 = v50;
    if (v50 <= v53)
    {
LABEL_100:
      while (1)
      {
        v62 = v61 <= 1 ? 1 : v61;
        v369 = v62;
        if (v61 <= 2)
          break;
        v410 = 0;
        v411 = 0;
        v412 = 0;
        v63 = (char *)v388 + 32 * v61;
        if (*((_DWORD *)v63 + 6))
        {
          ++v61;
        }
        else
        {
          v64 = 0;
          v65 = v61 - 3;
          v365 = v61;
          while (1)
          {
            v66 = v63[23];
            v67 = *((_QWORD *)v63 + 1);
            if ((v66 & 0x80u) == 0 ? v63[23] : *((_QWORD *)v63 + 1))
            {
              v69 = *(_BYTE **)v63;
              if ((v66 & 0x80u) == 0)
                v69 = v63;
              if (*v69 == 95)
                break;
            }
            if ((v66 & 0x80) != 0)
            {
              if (v67 >= 5)
              {
                v73 = *(int **)v63;
                if (**(_DWORD **)v63 == 1281977941 && *(_BYTE *)(*(_QWORD *)v63 + 4) == 77)
                  break;
                if (v67 >= 6 && *v73 == 1348425055 && *((_WORD *)v73 + 2) == 17746)
                  break;
                v76 = *v73;
                v77 = *((unsigned __int8 *)v73 + 4);
                if (v76 == 1314870623 && v77 == 84)
                  break;
              }
            }
            else if (v66 >= 5)
            {
              if (*(_DWORD *)v63 == 1281977941 && v63[4] == 77)
                break;
              if (v66 >= 6 && *(_DWORD *)v63 == 1348425055 && *((_WORD *)v63 + 2) == 17746)
                break;
              if (*(_DWORD *)v63 == 1314870623 && v63[4] == 84)
                break;
            }
            v79 = sub_19C3C19A0(v45 + 8, (uint64_t)v63);
            v64 = v411;
            if (!v79)
            {
              if ((unint64_t)v411 >= v412)
              {
                v64 = sub_19C318C78(&v410, (uint64_t)v63);
              }
              else
              {
                if (v63[23] < 0)
                {
                  sub_19C2B5238(v411, *(void **)v63, *((_QWORD *)v63 + 1));
                }
                else
                {
                  v80 = *(_OWORD *)v63;
                  *((_QWORD *)v411 + 2) = *((_QWORD *)v63 + 2);
                  *(_OWORD *)v64 = v80;
                }
                v64 += 24;
              }
              v411 = v64;
              if (--v61 > v65)
              {
                v81 = *((_DWORD *)v63 - 2);
                v63 -= 32;
                if (!v81)
                  continue;
              }
            }
            break;
          }
          v82 = v410;
          if (v410 != v64)
          {
            v83 = 0;
            v407 = 0;
            v408 = 0;
            v409 = 0;
            do
            {
              v84 = v388;
              v85 = (char *)v388 + 32 * v83;
              if (v85[23] < 0)
              {
                sub_19C2B5238(__p, *(void **)v85, *((_QWORD *)v85 + 1));
              }
              else
              {
                v86 = *(_OWORD *)v85;
                *(_QWORD *)&v373 = *((_QWORD *)v85 + 2);
                *(_OWORD *)__p = v86;
              }
              DWORD2(v373) = v84[8 * v83 + 6];
              (*(void (**)(__int128 *__return_ptr, void *, void **))(*(_QWORD *)*v45 + 16))(&v414, *v45, __p);
              v87 = (unsigned int *)v414;
              if (*((_QWORD *)&v414 + 1) == (_QWORD)v414)
              {
LABEL_194:
                v89 = (int *)v414;
              }
              else
              {
                v88 = 4 * ((uint64_t)(*((_QWORD *)&v414 + 1) - v414) >> 2);
                do
                {
                  if (((*(uint64_t (**)(void *, _QWORD))(*(_QWORD *)*v45 + 96))(*v45, *v87) & 1) != 0)
                    goto LABEL_194;
                  ++v87;
                  v88 -= 4;
                }
                while (v88);
                v90 = (int *)*((_QWORD *)&v414 + 1);
                v89 = (int *)v414;
                if ((_QWORD)v414 != *((_QWORD *)&v414 + 1))
                {
                  v91 = v408;
                  while (1)
                  {
                    v93 = *v89;
                    if (v91 >= v409)
                      break;
                    *(_DWORD *)v91 = v93;
                    v92 = v91 + 4;
LABEL_166:
                    v408 = v92;
                    ++v89;
                    v91 = v92;
                    if (v89 == v90)
                      goto LABEL_194;
                  }
                  v94 = v407;
                  v95 = v91 - v407;
                  v96 = (v91 - v407) >> 2;
                  v97 = v96 + 1;
                  if ((unint64_t)(v96 + 1) >> 62)
                    sub_19C2A18E8();
                  v98 = v409 - v407;
                  if ((v409 - v407) >> 1 > v97)
                    v97 = v98 >> 1;
                  if ((unint64_t)v98 >= 0x7FFFFFFFFFFFFFFCLL)
                    v99 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v99 = v97;
                  if (v99)
                  {
                    if (v99 >> 62)
                      sub_19C2A143C();
                    v100 = operator new(4 * v99);
                  }
                  else
                  {
                    v100 = 0;
                  }
                  v101 = &v100[4 * v96];
                  *(_DWORD *)v101 = v93;
                  v92 = v101 + 4;
                  if (v91 != v94)
                  {
                    v102 = v91 - 4 - v94;
                    if (v102 < 0xBC)
                    {
                      v103 = v91;
                      goto LABEL_181;
                    }
                    if (&v100[v95 - 4 - (v102 & 0xFFFFFFFFFFFFFFFCLL)] > &v100[v95 - 4])
                    {
                      v103 = v91;
                      goto LABEL_181;
                    }
                    if (&v91[-(v102 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v91 - 4)
                    {
                      v103 = v91;
                      goto LABEL_181;
                    }
                    if ((unint64_t)(v94 - v100) < 0x20)
                    {
                      v103 = v91;
                      goto LABEL_181;
                    }
                    v105 = (v102 >> 2) + 1;
                    v103 = &v91[-4 * (v105 & 0x7FFFFFFFFFFFFFF8)];
                    v106 = &v100[v95 - 16];
                    v107 = v91 - 16;
                    v108 = v105 & 0x7FFFFFFFFFFFFFF8;
                    do
                    {
                      v109 = *(_OWORD *)v107;
                      *(v106 - 1) = *((_OWORD *)v107 - 1);
                      *v106 = v109;
                      v106 -= 2;
                      v107 -= 32;
                      v108 -= 8;
                    }
                    while (v108);
                    v101 -= 4 * (v105 & 0x7FFFFFFFFFFFFFF8);
                    if (v105 != (v105 & 0x7FFFFFFFFFFFFFF8))
                    {
                      do
                      {
LABEL_181:
                        v104 = *((_DWORD *)v103 - 1);
                        v103 -= 4;
                        *((_DWORD *)v101 - 1) = v104;
                        v101 -= 4;
                      }
                      while (v103 != v94);
                    }
                  }
                  v407 = v101;
                  v408 = v92;
                  v409 = &v100[4 * v99];
                  if (v94)
                    operator delete(v94);
                  goto LABEL_166;
                }
              }
              if (v89)
              {
                *((_QWORD *)&v414 + 1) = v89;
                operator delete(v89);
              }
              if (SBYTE7(v373) < 0)
                operator delete(__p[0]);
              ++v83;
            }
            while (v83 != v369);
            v110 = (*(uint64_t (**)(void *, char **, uint64_t))(*(_QWORD *)v45[2] + 56))(v45[2], &v407, a4);
            if (v110)
            {
              v111 = (CFTypeRef *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v110 + 16))(v110);
              v112 = (uint64_t)v45[6];
              v113 = *v111;
              if (*v111)
                CFRetain(*v111);
              *(_QWORD *)&v400 = v113;
              if (!*(_BYTE *)(v112 + 88))
                sub_19C3AE164(v112);
              v114 = *(_QWORD *)(v112 + 96);
              v115 = *(_QWORD *)v112;
              __p[0] = 0;
              __p[1] = __p;
              *(_QWORD *)&v373 = 0x2000000000;
              v116 = off_1EE41C418;
              *((_QWORD *)&v373 + 1) = off_1EE41C418;
              if (!off_1EE41C418)
              {
                __src[0] = 0;
                if (qword_1EE41C400)
                {
                  v117 = (void *)qword_1EE41C400;
                }
                else
                {
                  v414 = xmmword_1E3D3AFA0;
                  v415 = 0;
                  qword_1EE41C400 = _sl_dlopen();
                  v117 = (void *)qword_1EE41C400;
                  if (!qword_1EE41C400)
                    goto LABEL_756;
                  if (__src[0])
                    free(__src[0]);
                }
                v116 = dlsym(v117, "MRLEmbeddingMemoryModelAddEmbedding");
                *((_QWORD *)__p[1] + 3) = v116;
                off_1EE41C418 = v116;
              }
              _Block_object_dispose(__p, 8);
              if (!v116)
                goto LABEL_753;
              v118 = ((uint64_t (*)(uint64_t, CFTypeRef, _QWORD, const __CFString *, uint64_t, _QWORD))v116)(v114, v113, 0, CFSTR("ane_gpt2_transformer_layer_3d_5/attn_v_s"), v115, 0);
              if ((v118 & 0x80000000) == 0 && *(_QWORD *)(v112 + 8) > (unint64_t)v118)
              {
                v119 = (void ***)(*(_QWORD *)(v112 + 64) + 24 * v118);
                if (v119 != (void ***)&v410)
                  sub_19C3388A4(v119, (void **)v410, (void **)v411, 0xAAAAAAAAAAAAAAABLL * ((v411 - v410) >> 3));
              }
              if (v113)
                CFRelease(v113);
            }
            if (v407)
            {
              v408 = v407;
              operator delete(v407);
            }
            v82 = v410;
          }
          v61 = v365 + 1;
          if (v82)
          {
            v120 = v411;
            v121 = v82;
            if (v411 != v82)
            {
              do
              {
                if (*(v120 - 1) < 0)
                  operator delete(*((void **)v120 - 3));
                v120 -= 24;
              }
              while (v120 != v82);
              v121 = v410;
            }
            v411 = v82;
            operator delete(v121);
          }
        }
        if (v61 > v366)
        {
          v46 = v389;
          goto LABEL_230;
        }
      }
      v353 = 96;
      v354 = "newTokenIdx >= kMaxOrder";
LABEL_751:
      __assert_rtn("consumeContext", "EmbeddingAugmentedPredictor.cpp", v353, v354);
    }
  }
  else
  {
    v337 = v389 - 56;
    v53 = (v47 >> 5) - 1;
    v54 = v53;
    while (1)
    {
      v338 = v337[15];
      if ((v338 & 0x80u) != 0)
        v338 = *(_QWORD *)v337;
      if (v52 == v338)
        break;
      --v54;
      v337 -= 32;
      if (v54 <= v50)
        goto LABEL_702;
    }
LABEL_94:
    v61 = v54;
    if (v54 <= v53)
      goto LABEL_100;
  }
LABEL_230:
  if (v358 != (void **)(v46 - 32))
  {
    v122 = *(v46 - 9);
    if (*((char *)v45 + 127) < 0)
    {
      if (v122 >= 0)
        v124 = v46 - 32;
      else
        v124 = (char *)*((_QWORD *)v46 - 4);
      if (v122 >= 0)
        v125 = *(v46 - 9);
      else
        v125 = *((_QWORD *)v46 - 3);
      sub_19C2E54A8(v358, v124, v125);
    }
    else if (*(v46 - 9) < 0)
    {
      sub_19C2E53E4(v358, *((void **)v46 - 4), *((_QWORD *)v46 - 3));
    }
    else
    {
      v123 = *((_OWORD *)v46 - 2);
      v45[15] = (void *)*((_QWORD *)v46 - 2);
      *(_OWORD *)v358 = v123;
    }
  }
  if (v385 && SHIBYTE(v384) < 0)
    operator delete((void *)__s1);
  a7 = v362;
  if (SHIBYTE(v406) < 0)
    operator delete((void *)v405);
  v42 = HIBYTE(v387);
LABEL_259:
  if (*a7 != a7[1])
    goto LABEL_260;
  if ((v42 & 0x80) != 0)
  {
    v137 = *((_QWORD *)&v386 + 1);
    v132 = (__int128 *)v386;
    v136 = a1;
    if (!*((_QWORD *)&v386 + 1))
    {
LABEL_262:
      operator delete(v132);
      goto LABEL_263;
    }
  }
  else
  {
    v136 = a1;
    if (!v42)
      goto LABEL_263;
    v137 = v42;
    v132 = &v386;
  }
  if (*((_BYTE *)v132 + v137 - 1) == 32)
    goto LABEL_260;
  v370 = *(_QWORD **)(v136 + 160);
  v407 = 0;
  v408 = 0;
  v409 = 0;
  v138 = v388;
  v139 = v389;
  if (v389 != v388)
  {
    for (i = 0; i < (v139 - (_BYTE *)v388) >> 5; ++i)
    {
      v141 = (char *)&v138[8 * i];
      if (v141[23] < 0)
      {
        sub_19C2B5238(__p, *(void **)v141, *((_QWORD *)v141 + 1));
      }
      else
      {
        v142 = *(_OWORD *)v141;
        *(_QWORD *)&v373 = *((_QWORD *)v141 + 2);
        *(_OWORD *)__p = v142;
      }
      DWORD2(v373) = v138[8 * i + 6];
      (*(void (**)(__int128 *__return_ptr, _QWORD, void **))(*(_QWORD *)*v370 + 16))(&v414, *v370, __p);
      v143 = (unsigned int *)v414;
      if (*((_QWORD *)&v414 + 1) == (_QWORD)v414)
      {
LABEL_330:
        v145 = (int *)v414;
      }
      else
      {
        v144 = 4 * ((uint64_t)(*((_QWORD *)&v414 + 1) - v414) >> 2);
        do
        {
          if (((*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v370 + 96))(*v370, *v143) & 1) != 0)
            goto LABEL_330;
          ++v143;
          v144 -= 4;
        }
        while (v144);
        v146 = (int *)*((_QWORD *)&v414 + 1);
        v145 = (int *)v414;
        if ((_QWORD)v414 != *((_QWORD *)&v414 + 1))
        {
          v147 = v408;
          while (1)
          {
            v149 = *v145;
            if (v147 >= v409)
              break;
            *(_DWORD *)v147 = v149;
            v148 = v147 + 4;
LABEL_302:
            v408 = v148;
            ++v145;
            v147 = v148;
            if (v145 == v146)
              goto LABEL_330;
          }
          v150 = v407;
          v151 = v147 - v407;
          v152 = (v147 - v407) >> 2;
          v153 = v152 + 1;
          if ((unint64_t)(v152 + 1) >> 62)
            sub_19C2A18E8();
          v154 = v409 - v407;
          if ((v409 - v407) >> 1 > v153)
            v153 = v154 >> 1;
          if ((unint64_t)v154 >= 0x7FFFFFFFFFFFFFFCLL)
            v155 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v155 = v153;
          if (v155)
          {
            if (v155 >> 62)
              sub_19C2A143C();
            v156 = operator new(4 * v155);
          }
          else
          {
            v156 = 0;
          }
          v157 = &v156[4 * v152];
          *(_DWORD *)v157 = v149;
          v148 = v157 + 4;
          if (v147 != v150)
          {
            v158 = v147 - 4 - v150;
            if (v158 < 0xBC)
            {
              v159 = v147;
              goto LABEL_317;
            }
            if (&v156[v151 - 4 - (v158 & 0xFFFFFFFFFFFFFFFCLL)] > &v156[v151 - 4])
            {
              v159 = v147;
              goto LABEL_317;
            }
            if (&v147[-(v158 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v147 - 4)
            {
              v159 = v147;
              goto LABEL_317;
            }
            if ((unint64_t)(v150 - v156) < 0x20)
            {
              v159 = v147;
              goto LABEL_317;
            }
            v161 = (v158 >> 2) + 1;
            v159 = &v147[-4 * (v161 & 0x7FFFFFFFFFFFFFF8)];
            v162 = &v156[v151 - 16];
            v163 = v147 - 16;
            v164 = v161 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v165 = *(_OWORD *)v163;
              *(v162 - 1) = *((_OWORD *)v163 - 1);
              *v162 = v165;
              v162 -= 2;
              v163 -= 32;
              v164 -= 8;
            }
            while (v164);
            v157 -= 4 * (v161 & 0x7FFFFFFFFFFFFFF8);
            if (v161 != (v161 & 0x7FFFFFFFFFFFFFF8))
            {
              do
              {
LABEL_317:
                v160 = *((_DWORD *)v159 - 1);
                v159 -= 4;
                *((_DWORD *)v157 - 1) = v160;
                v157 -= 4;
              }
              while (v159 != v150);
            }
          }
          v407 = v157;
          v408 = v148;
          v409 = &v156[4 * v155];
          if (v150)
            operator delete(v150);
          goto LABEL_302;
        }
      }
      if (v145)
      {
        *((_QWORD *)&v414 + 1) = v145;
        operator delete(v145);
      }
      if (SBYTE7(v373) < 0)
        operator delete(__p[0]);
      v138 = v388;
    }
  }
  v405 = 0uLL;
  v406 = 0;
  HIBYTE(v382) = 0;
  v166 = 3;
  if (v360 < 3)
    v166 = v360;
  LOBYTE(v381[0]) = 0;
  v368 = v166;
  if (!v166)
    goto LABEL_690;
  v167 = 0;
  v168 = &qword_1EE41C000;
  while (2)
  {
    v169 = (*(uint64_t (**)(_QWORD, char **, uint64_t))(*(_QWORD *)v370[2] + 56))(v370[2], &v407, a4);
    if (!v169)
      goto LABEL_690;
    v170 = (CFTypeRef *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v169 + 16))(v169);
    v171 = v370[6];
    v172 = *v170;
    if (*v170)
      CFRetain(*v170);
    v402 = v172;
    if (!*(_BYTE *)(v171 + 88))
    {
      sub_19C3AE164(v171);
      goto LABEL_351;
    }
    if (*(_QWORD *)(v171 + 16) <= v167 || 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v405 + 1) - v405) >> 3) < v167)
    {
LABEL_351:
      HIBYTE(v404) = 0;
      LOBYTE(__src[0]) = 0;
      if (!v172)
        goto LABEL_353;
      goto LABEL_352;
    }
    v410 = 0;
    v411 = 0;
    v412 = 0;
    v173 = *(_QWORD *)(v171 + 96);
    v174 = *(_QWORD *)v171;
    __p[0] = 0;
    __p[1] = __p;
    *(_QWORD *)&v373 = 0x2000000000;
    v175 = off_1EE41C420;
    *((_QWORD *)&v373 + 1) = off_1EE41C420;
    if (!off_1EE41C420)
    {
      v413 = 0;
      if (v168[128])
      {
        v176 = (void *)v168[128];
        if (!v176)
        {
LABEL_756:
          abort_report_np();
          goto LABEL_773;
        }
      }
      else
      {
        v414 = xmmword_1E3D3AFA0;
        v415 = 0;
        v168[128] = _sl_dlopen();
        v176 = (void *)v168[128];
        if (!v176)
          goto LABEL_756;
        if (v413)
          free(v413);
      }
      v175 = dlsym(v176, "MRLEmbeddingMemoryModelGetOutputDistances");
      *((_QWORD *)__p[1] + 3) = v175;
      off_1EE41C420 = v175;
    }
    _Block_object_dispose(__p, 8);
    if (!v175)
    {
LABEL_753:
      dlerror();
      abort_report_np();
LABEL_773:
      __break(1u);
      return;
    }
    v250 = (char *)((uint64_t (*)(uint64_t, CFTypeRef, _QWORD, const __CFString *, uint64_t, _QWORD))v175)(v173, v172, 0, CFSTR("ane_gpt2_transformer_layer_3d_5/attn_v_s"), v174, 0);
    if (v250)
      sub_19C35F928(&v410, v250, &v250[4 * *(_QWORD *)(v171 + 8)], *(_QWORD *)(v171 + 8));
    v251 = HIBYTE(v387);
    if (v387 < 0)
      v251 = *((_QWORD *)&v386 + 1);
    v252 = *(int8x8_t *)(v171 + 32);
    v253 = 1;
    if (v167)
      v253 = 2;
    if (v251 >= 4)
      v251 = 4;
    if (!*(_QWORD *)&v252)
      goto LABEL_759;
    v254 = (uint8x8_t)vcnt_s8(v252);
    v254.i16[0] = vaddlv_u8(v254);
    if (v254.u32[0] > 1uLL)
    {
      v255 = v253;
      if (v253 >= *(_QWORD *)&v252)
        v255 = v253 % *(_QWORD *)&v252;
    }
    else
    {
      v255 = (*(_QWORD *)&v252 + 3) & v253;
    }
    v256 = *(_QWORD **)(*(_QWORD *)(v171 + 24) + 8 * v255);
    if (!v256 || (v257 = (_QWORD *)*v256) == 0)
LABEL_759:
      sub_19C2B41E0("unordered_map::at: key not found");
    if (v254.u32[0] < 2uLL)
    {
      v258 = *(_QWORD *)&v252 - 1;
      while (1)
      {
        v260 = v257[1];
        if (v253 == v260)
        {
          if (v257[2] == v253)
            goto LABEL_536;
        }
        else if ((v260 & v258) != v255)
        {
          goto LABEL_759;
        }
        v257 = (_QWORD *)*v257;
        if (!v257)
          goto LABEL_759;
      }
    }
    while (1)
    {
      v259 = v257[1];
      if (v253 == v259)
        break;
      if (v259 >= *(_QWORD *)&v252)
        v259 %= *(_QWORD *)&v252;
      if (v259 != v255)
        goto LABEL_759;
LABEL_526:
      v257 = (_QWORD *)*v257;
      if (!v257)
        goto LABEL_759;
    }
    if (v257[2] != v253)
      goto LABEL_526;
LABEL_536:
    v261 = (int8x8_t)v257[4];
    if (!*(_QWORD *)&v261)
      goto LABEL_759;
    v262 = (uint8x8_t)vcnt_s8(v261);
    v262.i16[0] = vaddlv_u8(v262);
    if (v262.u32[0] > 1uLL)
    {
      v263 = v251;
      if (v251 >= *(_QWORD *)&v261)
        v263 = v251 % *(_QWORD *)&v261;
    }
    else
    {
      v263 = (*(_QWORD *)&v261 + 7) & v251;
    }
    v264 = *(float ***)(v257[3] + 8 * v263);
    if (!v264)
      goto LABEL_759;
    v265 = *v264;
    if (!v265)
      goto LABEL_759;
    if (v262.u32[0] < 2uLL)
    {
      v266 = *(_QWORD *)&v261 - 1;
      while (1)
      {
        v268 = *((_QWORD *)v265 + 1);
        if (v251 == v268)
        {
          if (*((_QWORD *)v265 + 2) == v251)
            goto LABEL_556;
        }
        else if ((v268 & v266) != v263)
        {
          goto LABEL_759;
        }
        v265 = *(float **)v265;
        if (!v265)
          goto LABEL_759;
      }
    }
    while (1)
    {
      v267 = *((_QWORD *)v265 + 1);
      if (v251 == v267)
        break;
      if (v267 >= *(_QWORD *)&v261)
        v267 %= *(_QWORD *)&v261;
      if (v267 != v263)
        goto LABEL_759;
LABEL_546:
      v265 = *(float **)v265;
      if (!v265)
        goto LABEL_759;
    }
    if (*((_QWORD *)v265 + 2) != v251)
      goto LABEL_546;
LABEL_556:
    v269 = v410;
    v270 = v410 + 4;
    v271 = v410 == v411 || v270 == v411;
    v272 = (float *)v410;
    if (!v271)
    {
      v273 = *(float *)v410;
      v272 = (float *)v410;
      v274 = v410 + 4;
      do
      {
        v275 = *(float *)v274;
        v274 += 4;
        v276 = v273 < v275;
        v273 = fmaxf(v273, v275);
        if (v276)
          v272 = (float *)v270;
        v270 = v274;
      }
      while (v274 != v411);
    }
    if (*v272 < v265[6])
    {
      HIBYTE(v404) = 0;
      LOBYTE(__src[0]) = 0;
      goto LABEL_686;
    }
    v277 = (__int128 **)(*(_QWORD *)(v171 + 64) + 24 * (((char *)v272 - v410) >> 2));
    __p[1] = 0;
    *(_QWORD *)&v373 = 0;
    __p[0] = 0;
    sub_19C2B5440((char *)__p, *v277, v277[1], 0xAAAAAAAAAAAAAAABLL * (((char *)v277[1] - (char *)*v277) >> 3));
    v278 = (void **)__p[0];
    if (0xAAAAAAAAAAAAAAABLL * (((char *)__p[1] - (char *)__p[0]) >> 3) <= v167)
    {
      HIBYTE(v404) = 0;
      LOBYTE(__src[0]) = 0;
      goto LABEL_677;
    }
    if (*((char *)__p[0] + 23) < 0)
    {
      sub_19C2B5238(&v414, *(void **)__p[0], *((_QWORD *)__p[0] + 1));
    }
    else
    {
      v279 = *(_OWORD *)__p[0];
      v415 = *((_QWORD *)__p[0] + 2);
      v414 = v279;
    }
    if (!v167)
    {
      if (v387 >= 0)
        v318 = HIBYTE(v387);
      else
        v318 = *((_QWORD *)&v386 + 1);
      v319 = HIBYTE(v415);
      if (v415 < 0)
        v319 = *((_QWORD *)&v414 + 1);
      if (v319 < v318)
        goto LABEL_673;
      v320 = v415 >= 0 ? &v414 : (__int128 *)v414;
      v321 = v387 >= 0 ? &v386 : (__int128 *)v386;
      if (memcmp(v320, v321, v318))
        goto LABEL_673;
LABEL_675:
      *(_OWORD *)__src = v414;
      v404 = v415;
      v415 = 0;
      v414 = 0uLL;
      goto LABEL_676;
    }
    v306 = (char *)__p[0];
    v307 = v405;
    v308 = (unsigned __int8 *)__p[0] + 24 * v167;
    v309 = 24 * v167 + v405;
    v310 = v308[23];
    if ((v310 & 0x80u) == 0)
      v311 = v308[23];
    else
      v311 = *((_QWORD *)v308 + 1);
    v312 = *(unsigned __int8 *)(v309 - 1);
    v313 = (char)v312;
    if ((v312 & 0x80u) != 0)
      v312 = *(_QWORD *)(v309 - 16);
    if (v311 != v312)
      goto LABEL_673;
    v316 = *(unsigned __int8 **)(v309 - 24);
    v314 = (unsigned __int8 *)(v309 - 24);
    v315 = v316;
    if (v313 >= 0)
      v317 = v314;
    else
      v317 = v315;
    if ((v310 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v308, v317, *((_QWORD *)v308 + 1)))
        goto LABEL_673;
LABEL_657:
      if (v167 != 1)
      {
        v322 = &v306[24 * v167 - 24];
        v323 = v307 + 24 * v167;
        v324 = v322[23];
        if ((v324 & 0x80u) == 0)
          v325 = v322[23];
        else
          v325 = *((_QWORD *)v322 + 1);
        v326 = *(unsigned __int8 *)(v323 - 25);
        v327 = (char)v326;
        if ((v326 & 0x80u) != 0)
          v326 = *(_QWORD *)(v323 - 40);
        if (v325 != v326)
          goto LABEL_673;
        v330 = *(unsigned __int8 **)(v323 - 48);
        v328 = (unsigned __int8 *)(v323 - 48);
        v329 = v330;
        if (v327 >= 0)
          v331 = v328;
        else
          v331 = v329;
        if ((v324 & 0x80) != 0)
        {
          if (memcmp(*(const void **)v322, v331, *((_QWORD *)v322 + 1)))
            goto LABEL_673;
        }
        else if (v322[23])
        {
          while (*v322 == *v331)
          {
            ++v322;
            ++v331;
            if (!--v324)
              goto LABEL_675;
          }
          goto LABEL_673;
        }
      }
      goto LABEL_675;
    }
    if (!v308[23])
      goto LABEL_657;
    while (*v308 == *v317)
    {
      ++v308;
      ++v317;
      if (!--v310)
        goto LABEL_657;
    }
LABEL_673:
    HIBYTE(v404) = 0;
    LOBYTE(__src[0]) = 0;
    if (SHIBYTE(v415) < 0)
      operator delete((void *)v414);
LABEL_676:
    v278 = (void **)__p[0];
LABEL_677:
    if (v278)
    {
      v332 = (void **)__p[1];
      v333 = v278;
      if (__p[1] != v278)
      {
        do
        {
          if (*((char *)v332 - 1) < 0)
            operator delete(*(v332 - 3));
          v332 -= 3;
        }
        while (v332 != v278);
        v333 = (void **)__p[0];
      }
      __p[1] = v278;
      operator delete(v333);
    }
    v269 = v410;
LABEL_686:
    if (v269)
    {
      v411 = v269;
      operator delete(v269);
    }
    v172 = v402;
    if (v402)
LABEL_352:
      CFRelease(v172);
LABEL_353:
    if ((SHIBYTE(v404) & 0x80000000) == 0)
    {
      if (HIBYTE(v404))
      {
        v177 = (_QWORD *)v370[4];
        v400 = *(_OWORD *)__src;
        v401 = v404;
        goto LABEL_358;
      }
      goto LABEL_690;
    }
    if (!__src[1])
    {
      v207 = 7;
      goto LABEL_428;
    }
    v177 = (_QWORD *)v370[4];
    sub_19C2B5238(&v400, __src[0], (unint64_t)__src[1]);
LABEL_358:
    v178 = sub_19C32EC10(v177, (uint64_t)&v400);
    if (SHIBYTE(v401) < 0)
      operator delete((void *)v400);
    if (v178 >= 0x100u && (_BYTE)v178)
      goto LABEL_415;
    if (SHIBYTE(v404) < 0)
    {
      sub_19C2B5238(&v398, __src[0], (unint64_t)__src[1]);
    }
    else
    {
      v398 = *(_OWORD *)__src;
      v399 = v404;
    }
    v179 = (char *)v388;
    v180 = (v389 - (_BYTE *)v388) >> 5;
    if ((unint64_t)(v389 - (_BYTE *)v388) <= 0x140)
      v181 = 0;
    else
      v181 = v180 - 10;
    v182 = v370[4];
    v183 = *(const void **)(v182 + 176);
    if (v183)
    {
      CFRetain(*(CFTypeRef *)(v182 + 176));
      sub_19C31D164(__p, v183);
    }
    else
    {
      __p[0] = 0;
    }
    if (v399 >= 0)
      v184 = (const UInt8 *)&v398;
    else
      v184 = (const UInt8 *)v398;
    if (v399 >= 0)
      v185 = HIBYTE(v399);
    else
      v185 = *((_QWORD *)&v398 + 1);
    v186 = CFStringCreateWithBytes(0, v184, v185, 0x8000100u, 0);
    *(_QWORD *)&v414 = v186;
    if (!v186)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1A1AD3154](exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
    }
    if (v181 >= v180)
    {
      v206 = 0;
      goto LABEL_409;
    }
    while (2)
    {
      v187 = &v179[32 * v181];
      v188 = v187[23];
      if (v188 >= 0)
        v189 = (const UInt8 *)&v179[32 * v181];
      else
        v189 = *(const UInt8 **)v187;
      if (v188 >= 0)
        v190 = v187[23];
      else
        v190 = *((_QWORD *)v187 + 1);
      v191 = (char *)CFStringCreateWithBytes(0, v189, v190, 0x8000100u, 0);
      v410 = v191;
      if (!v191)
      {
        v356 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1A1AD3154](v356, "Could not construct");
        __cxa_throw(v356, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
      }
      v192 = v167;
      v193 = (const __CFArray *)__p[0];
      if (!__p[0])
      {
LABEL_404:
        CFRelease(v191);
        v167 = v192;
        v168 = &qword_1EE41C000;
        ++v181;
        v179 = (char *)v388;
        if (v181 >= (v389 - (_BYTE *)v388) >> 5)
        {
          v206 = 0;
          v186 = (const __CFString *)v414;
          goto LABEL_408;
        }
        continue;
      }
      break;
    }
    Count = CFArrayGetCount((CFArrayRef)__p[0]);
    v195 = Count;
    v196 = (const __CFArray *)__p[0];
    if (__p[0])
    {
      v197 = CFArrayGetCount((CFArrayRef)__p[0]);
      if (!v195)
        goto LABEL_404;
    }
    else
    {
      v197 = 0;
      if (!Count)
        goto LABEL_404;
    }
    if (v193 == v196)
    {
      v198 = 0;
      do
      {
        if (v197 == v198)
          break;
        if (CFArrayGetCount(v193) <= v198)
          goto LABEL_763;
        ValueAtIndex = (void *)CFArrayGetValueAtIndex(v193, v198);
        v200 = ValueAtIndex;
        if (!ValueAtIndex)
          goto LABEL_763;
        CFRetain(ValueAtIndex);
        v413 = v200;
        v186 = (const __CFString *)v414;
        v418.length = CFStringGetLength((CFStringRef)v191);
        v418.location = 0;
        v201 = CFStringCompareWithOptionsAndLocale((CFStringRef)v191, v186, v418, 1uLL, (CFLocaleRef)v200);
        CFRelease(v200);
        if (v201 == kCFCompareEqualTo)
          goto LABEL_407;
        ++v198;
      }
      while (v195 != v198);
      goto LABEL_404;
    }
    v202 = 0;
    while (1)
    {
      if (CFArrayGetCount(v193) <= v202 || (v203 = (void *)CFArrayGetValueAtIndex(v193, v202), (v204 = v203) == 0))
      {
LABEL_763:
        v355 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1A1AD3154](v355, "Could not find item");
        __cxa_throw(v355, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
      }
      CFRetain(v203);
      v413 = v204;
      v186 = (const __CFString *)v414;
      v419.length = CFStringGetLength((CFStringRef)v191);
      v419.location = 0;
      v205 = CFStringCompareWithOptionsAndLocale((CFStringRef)v191, v186, v419, 1uLL, (CFLocaleRef)v204);
      CFRelease(v204);
      if (v205 == kCFCompareEqualTo)
        break;
      if (v195 == ++v202)
        goto LABEL_404;
    }
LABEL_407:
    CFRelease(v191);
    v206 = 1;
    v167 = v192;
    v168 = &qword_1EE41C000;
LABEL_408:
    if (v186)
LABEL_409:
      CFRelease(v186);
    if (__p[0])
      CFRelease(__p[0]);
    if (SHIBYTE(v399) < 0)
      operator delete((void *)v398);
    if ((v206 & 1) != 0)
    {
LABEL_415:
      v207 = 7;
      goto LABEL_416;
    }
    if (v167)
    {
      v208 = SHIBYTE(v382);
      if (v382 >= 0)
        v209 = HIBYTE(v382);
      else
        v209 = (size_t)v381[1];
      v210 = v209 + 1;
      if (v209 + 1 >= 0x7FFFFFFFFFFFFFF8)
        sub_19C2A1A54();
      if (v210 >= 0x17)
      {
        v212 = (v210 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v210 | 7) != 0x17)
          v212 = v210 | 7;
        v213 = v212 + 1;
        p_dst = (std::string *)operator new(v212 + 1);
        __dst.__r_.__value_.__l.__size_ = v209 + 1;
        __dst.__r_.__value_.__r.__words[2] = v213 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
      }
      else
      {
        memset(&__dst, 0, sizeof(__dst));
        p_dst = &__dst;
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v209 + 1;
        if (!v209)
          goto LABEL_440;
      }
      if (v208 >= 0)
        v214 = v381;
      else
        v214 = (void **)v381[0];
      memmove(p_dst, v214, v209);
LABEL_440:
      *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v209) = 32;
      if (v404 >= 0)
        v215 = __src;
      else
        v215 = (void **)__src[0];
      if (v404 >= 0)
        v216 = HIBYTE(v404);
      else
        v216 = (std::string::size_type)__src[1];
      v217 = std::string::append(&__dst, (const std::string::value_type *)v215, v216);
      v218 = *(_OWORD *)&v217->__r_.__value_.__l.__data_;
      *(_QWORD *)&v373 = *((_QWORD *)&v217->__r_.__value_.__l + 2);
      *(_OWORD *)__p = v218;
      v217->__r_.__value_.__l.__size_ = 0;
      v217->__r_.__value_.__r.__words[2] = 0;
      v217->__r_.__value_.__r.__words[0] = 0;
    }
    else if (SHIBYTE(v404) < 0)
    {
      sub_19C2B5238(__p, __src[0], (unint64_t)__src[1]);
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)__src;
      *(_QWORD *)&v373 = v404;
    }
    if (SHIBYTE(v382) < 0)
      operator delete(v381[0]);
    *(_OWORD *)v381 = *(_OWORD *)__p;
    v382 = v373;
    BYTE7(v373) = 0;
    LOBYTE(__p[0]) = 0;
    if (v167 && SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
    v219 = *((_QWORD *)&v405 + 1);
    v220 = v405;
    if (*((_QWORD *)&v405 + 1) >= (unint64_t)v406)
    {
      v228 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v405 + 1) - v405) >> 3) + 1;
      if (v228 > 0xAAAAAAAAAAAAAAALL)
        sub_19C2A18E8();
      if (0x5555555555555556 * (((uint64_t)v406 - (uint64_t)v405) >> 3) > v228)
        v228 = 0x5555555555555556 * (((uint64_t)v406 - (uint64_t)v405) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v406 - (uint64_t)v405) >> 3) >= 0x555555555555555)
        v229 = 0xAAAAAAAAAAAAAAALL;
      else
        v229 = v228;
      v374 = &v406;
      if (v229)
      {
        if (v229 > 0xAAAAAAAAAAAAAAALL)
          sub_19C2A143C();
        v230 = operator new(24 * v229);
        __p[1] = v230;
        *(_QWORD *)&v373 = v230;
        v231 = &v230[3 * v229];
        __p[0] = v230;
      }
      else
      {
        *(_OWORD *)__p = 0u;
        v373 = 0u;
        v230 = operator new(0x18uLL);
        v231 = v230 + 3;
        __p[0] = v230;
        __p[1] = v230;
        *(_QWORD *)&v373 = v230;
      }
      *((_QWORD *)&v373 + 1) = v231;
      if (SHIBYTE(v404) < 0)
      {
        sub_19C2B5238(v230, __src[0], (unint64_t)__src[1]);
      }
      else
      {
        *(_OWORD *)v230 = *(_OWORD *)__src;
        v230[2] = v404;
      }
      v239 = (char *)__p[1];
      v238 = v373;
      v240 = v405;
      if ((_QWORD)v405 == v220)
      {
        v242 = (char *)__p[1];
      }
      else
      {
        v241 = v220;
        do
        {
          v242 = v239 - 24;
          v243 = *(_OWORD *)(v241 - 24);
          *((_QWORD *)v239 - 1) = *(_QWORD *)(v241 - 8);
          *(_OWORD *)(v239 - 24) = v243;
          *(_QWORD *)(v241 - 16) = 0;
          *(_QWORD *)(v241 - 8) = 0;
          *(_QWORD *)(v241 - 24) = 0;
          v239 -= 24;
          v241 -= 24;
        }
        while (v241 != v240);
      }
      v244 = v238 + 24;
      v245 = *((_QWORD *)&v405 + 1);
      if (*((_QWORD *)&v405 + 1) != v220)
      {
        do
        {
          v246 = *(_OWORD *)v220;
          *(_QWORD *)(v244 + 16) = *(_QWORD *)(v220 + 16);
          *(_OWORD *)v244 = v246;
          v244 += 24;
          *(_QWORD *)(v220 + 8) = 0;
          *(_QWORD *)(v220 + 16) = 0;
          *(_QWORD *)v220 = 0;
          v220 += 24;
        }
        while (v220 != v245);
        v220 = *((_QWORD *)&v405 + 1);
      }
      v247 = (void *)v405;
      v248 = v406;
      *(_QWORD *)&v405 = v242;
      *((_QWORD *)&v405 + 1) = v244;
      v406 = (void *)*((_QWORD *)&v373 + 1);
      *(_QWORD *)&v373 = v220;
      *((_QWORD *)&v373 + 1) = v248;
      __p[0] = v247;
      __p[1] = v247;
      if ((void *)v220 != v247)
      {
        v249 = v220 - 24;
        do
        {
          *(_QWORD *)&v373 = v249;
          if (*(char *)(v249 + 23) < 0)
            operator delete(*(void **)v249);
          v249 -= 24;
        }
        while ((void *)(v249 + 24) != v247);
        v220 = (unint64_t)v247;
      }
      if (v220)
        operator delete((void *)v220);
    }
    else if ((_QWORD)v405 == *((_QWORD *)&v405 + 1))
    {
      if (SHIBYTE(v404) < 0)
      {
        sub_19C2B5238((_BYTE *)v405, __src[0], (unint64_t)__src[1]);
      }
      else
      {
        v237 = *(_OWORD *)__src;
        *(_QWORD *)(v405 + 16) = v404;
        *(_OWORD *)v220 = v237;
      }
      *((_QWORD *)&v405 + 1) = v220 + 24;
    }
    else
    {
      v221 = *((_QWORD *)&v405 + 1) - 24;
      v222 = *((_QWORD *)&v405 + 1);
      v223 = *((_QWORD *)&v405 + 1) - 24;
      if (*((_QWORD *)&v405 + 1) >= 0x18uLL)
      {
        do
        {
          v224 = *(_OWORD *)v223;
          *(_QWORD *)(v222 + 16) = *(_QWORD *)(v223 + 16);
          *(_OWORD *)v222 = v224;
          v222 += 24;
          *(_QWORD *)(v223 + 8) = 0;
          *(_QWORD *)(v223 + 16) = 0;
          *(_QWORD *)v223 = 0;
          v223 += 24;
        }
        while (v223 < v219);
      }
      *((_QWORD *)&v405 + 1) = v222;
      if (v219 != v220 + 24)
      {
        v225 = v219 - (v220 + 24);
        do
        {
          if (*(char *)(v221 + 23) < 0)
            operator delete(*(void **)v221);
          v226 = (__int128 *)(v220 + v225 - 24);
          v227 = *v226;
          *(_QWORD *)(v221 + 16) = *(_QWORD *)(v220 + v225 - 8);
          *(_OWORD *)v221 = v227;
          v221 -= 24;
          *(_BYTE *)(v220 + v225 - 1) = 0;
          *(_BYTE *)v226 = 0;
          v225 -= 24;
        }
        while (v225);
      }
      v233 = v220 <= (unint64_t)__src && *((_QWORD *)&v405 + 1) > (unint64_t)__src;
      v234 = &__src[3 * v233];
      if ((void **)v220 != v234)
      {
        v235 = *((_BYTE *)v234 + 23);
        if (*(char *)(v220 + 23) < 0)
        {
          if (v235 >= 0)
            v280 = v234;
          else
            v280 = (void **)__src[0];
          if (v235 >= 0)
            v281 = *((unsigned __int8 *)v234 + 23);
          else
            v281 = (size_t)v234[1];
          sub_19C2E54A8((void **)v220, v280, v281);
        }
        else if ((*((_BYTE *)v234 + 23) & 0x80) != 0)
        {
          sub_19C2E53E4((_QWORD *)v220, __src[0], (size_t)v234[1]);
        }
        else
        {
          v236 = *(_OWORD *)v234;
          *(_QWORD *)(v220 + 16) = v234[2];
          *(_OWORD *)v220 = v236;
        }
      }
    }
    v282 = *v370;
    sub_19C351494(&v414, (uint64_t)__src);
    sub_19C297950(__p, (const UInt8 *)&v414);
    DWORD2(v373) = v416;
    (*(void (**)(char **__return_ptr, uint64_t, void **))(*(_QWORD *)v282 + 16))(&v410, v282, __p);
    if (SBYTE7(v373) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v415) < 0)
      operator delete((void *)v414);
    v283 = v410;
    if (v411 == v410)
    {
      v207 = 0;
      goto LABEL_621;
    }
    v284 = 4 * ((v411 - v410) >> 2);
    do
    {
      if (((*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v370 + 96))(*v370, *(unsigned int *)v283) & 1) != 0)
      {
        v207 = 9;
        goto LABEL_621;
      }
      v283 += 4;
      v284 -= 4;
    }
    while (v284);
    v286 = v410;
    v285 = v411;
    if (v410 == v411)
    {
      v207 = 0;
      if (v410)
        goto LABEL_622;
      goto LABEL_416;
    }
    v287 = v408;
    while (2)
    {
      v289 = *(_DWORD *)v286;
      if (v287 < v409)
      {
        *(_DWORD *)v287 = v289;
        v288 = v287 + 4;
      }
      else
      {
        v290 = v407;
        v291 = v287 - v407;
        v292 = (v287 - v407) >> 2;
        v293 = v292 + 1;
        if ((unint64_t)(v292 + 1) >> 62)
          sub_19C2A18E8();
        v294 = v409 - v407;
        if ((v409 - v407) >> 1 > v293)
          v293 = v294 >> 1;
        if ((unint64_t)v294 >= 0x7FFFFFFFFFFFFFFCLL)
          v295 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v295 = v293;
        if (v295)
        {
          if (v295 >> 62)
            sub_19C2A143C();
          v296 = operator new(4 * v295);
        }
        else
        {
          v296 = 0;
        }
        v297 = &v296[4 * v292];
        *(_DWORD *)v297 = v289;
        v288 = v297 + 4;
        if (v287 != v290)
        {
          v298 = v287 - 4 - v290;
          if (v298 < 0xBC)
          {
            v299 = v287;
            goto LABEL_605;
          }
          if (&v296[v291 - 4 - (v298 & 0xFFFFFFFFFFFFFFFCLL)] > &v296[v291 - 4])
          {
            v299 = v287;
            goto LABEL_605;
          }
          if (&v287[-(v298 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v287 - 4)
          {
            v299 = v287;
            goto LABEL_605;
          }
          if ((unint64_t)(v290 - v296) < 0x20)
          {
            v299 = v287;
            goto LABEL_605;
          }
          v301 = (v298 >> 2) + 1;
          v299 = &v287[-4 * (v301 & 0x7FFFFFFFFFFFFFF8)];
          v302 = &v296[v291 - 16];
          v303 = v287 - 16;
          v304 = v301 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v305 = *(_OWORD *)v303;
            *(v302 - 1) = *((_OWORD *)v303 - 1);
            *v302 = v305;
            v302 -= 2;
            v303 -= 32;
            v304 -= 8;
          }
          while (v304);
          v297 -= 4 * (v301 & 0x7FFFFFFFFFFFFFF8);
          if (v301 != (v301 & 0x7FFFFFFFFFFFFFF8))
          {
            do
            {
LABEL_605:
              v300 = *((_DWORD *)v299 - 1);
              v299 -= 4;
              *((_DWORD *)v297 - 1) = v300;
              v297 -= 4;
            }
            while (v299 != v290);
          }
        }
        v407 = v297;
        v408 = v288;
        v409 = &v296[4 * v295];
        if (v290)
          operator delete(v290);
      }
      v408 = v288;
      v286 += 4;
      v287 = v288;
      if (v286 != v285)
        continue;
      break;
    }
    v207 = 0;
    v168 = &qword_1EE41C000;
LABEL_621:
    v286 = v410;
    if (v410)
    {
LABEL_622:
      v411 = v286;
      operator delete(v286);
    }
LABEL_416:
    if (SHIBYTE(v404) < 0)
    {
LABEL_428:
      operator delete(__src[0]);
      if (v207 == 9)
        goto LABEL_339;
      break;
    }
    if (v207 == 9)
    {
LABEL_339:
      if (++v167 == v368)
        goto LABEL_690;
      continue;
    }
    break;
  }
  if (!v207)
    goto LABEL_339;
LABEL_690:
  v334 = v405;
  if ((_QWORD)v405)
  {
    v335 = *((_QWORD *)&v405 + 1);
    v336 = (void *)v405;
    if (*((_QWORD *)&v405 + 1) != (_QWORD)v405)
    {
      do
      {
        if (*(char *)(v335 - 1) < 0)
          operator delete(*(void **)(v335 - 24));
        v335 -= 24;
      }
      while (v335 != v334);
      v336 = (void *)v405;
    }
    *((_QWORD *)&v405 + 1) = v334;
    operator delete(v336);
  }
  if (v407)
  {
    v408 = v407;
    operator delete(v407);
  }
  v339 = (void *)HIBYTE(v382);
  if (v382 < 0)
    v339 = v381[1];
  if (v339 && !sub_19C304F84((uint64_t)v381, (uint64_t)v395, (uint64_t)v396, (uint64_t)(**v361)[3], (uint64_t)(**v361)[4]))
  {
    *(_QWORD *)&v373 = 0;
    WORD4(v373) = 0;
    LOBYTE(v374) = 1;
    v377 = xmmword_19C46DE10;
    v379 = 0;
    v380 = 0;
    v378 = 0xFFEFFFFFFFFFFFFFLL;
    v375 = xmmword_19C46DE40;
    v376 = 2;
    *(int64x2_t *)__p = vdupq_n_s64(0xBF847AE147AE147BLL);
    sub_19C3067B0((char **)&v398, (uint64_t)v381, (uint64_t)v381, (uint64_t)__p, (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 5, (uint64_t)(**v361)[15], &v386, 4);
    v413 = 0;
    if (qword_1EE41C060 != -1)
      dispatch_once(&qword_1EE41C060, &unk_1E3D3A068);
    v340 = v398;
    if (*(char *)(v398 + 23) < 0)
      v340 = *(_QWORD *)v398;
    if (v382 >= 0)
      v341 = v381;
    else
      v341 = (void **)v381[0];
    v342 = *(_QWORD *)(v398 + 48);
    sub_19C306B2C((uint64_t *)&v407, &v413);
    if (v382 >= 0)
      v343 = HIBYTE(v382);
    else
      v343 = (size_t)v381[1];
    v344 = &v410;
    sub_19C306BB8(&v410, &v407, v343);
    if ((v412 & 0x8000000000000000) != 0)
      v344 = (char **)v410;
    v345 = &v405;
    sub_19C2E3008((char *)&v405, v398 + 48);
    if (SHIBYTE(v406) < 0)
      v345 = (__int128 *)v405;
    sub_19C306C68(__src, (__int128 **)a2);
    v346 = SHIBYTE(v404);
    v347 = (void **)__src[0];
    sub_19C3070E8(&v400, v361);
    v348 = __src;
    if (v346 < 0)
      v348 = v347;
    if (v401 >= 0)
      v349 = &v400;
    else
      v349 = (__int128 *)v400;
    sub_19C34EC30("Generated static inline completion='%s' (%s), score=%f, word-boundary-bitMask=%s,details=%s - for context=%s & stems=%s", (uint64_t)&v414, v340, v341, v342, v344, v345, v348, v349);
    sub_19C351404(v359, (const std::string::value_type *)&v414);
    if ((SHIBYTE(v415) & 0x80000000) == 0)
    {
      if ((SHIBYTE(v401) & 0x80000000) == 0)
        goto LABEL_733;
LABEL_745:
      operator delete((void *)v400);
      if (SHIBYTE(v404) < 0)
        goto LABEL_746;
LABEL_734:
      if ((SHIBYTE(v406) & 0x80000000) == 0)
        goto LABEL_735;
LABEL_747:
      operator delete((void *)v405);
      if (SHIBYTE(v412) < 0)
        goto LABEL_748;
LABEL_736:
      if ((SHIBYTE(v409) & 0x80000000) == 0)
        goto LABEL_737;
LABEL_749:
      operator delete(v407);
      goto LABEL_737;
    }
    operator delete((void *)v414);
    if (SHIBYTE(v401) < 0)
      goto LABEL_745;
LABEL_733:
    if ((SHIBYTE(v404) & 0x80000000) == 0)
      goto LABEL_734;
LABEL_746:
    operator delete(__src[0]);
    if (SHIBYTE(v406) < 0)
      goto LABEL_747;
LABEL_735:
    if ((SHIBYTE(v412) & 0x80000000) == 0)
      goto LABEL_736;
LABEL_748:
    operator delete(v410);
    if (SHIBYTE(v409) < 0)
      goto LABEL_749;
LABEL_737:
    LODWORD(v410) = 0;
    sub_19C307444(&v371, (__int128 *)v398, (int *)&v410, (uint64_t)v359);
    sub_19C307568(&v414, &v371);
    v350 = (_QWORD *)v362[1];
    if ((unint64_t)v350 >= v362[2])
    {
      v352 = sub_19C307614(v362, (uint64_t *)&v414);
    }
    else
    {
      v351 = v414;
      *(_QWORD *)&v414 = 0;
      *v350 = v351;
      v352 = v350 + 1;
    }
    v362[1] = v352;
    language_modeling::v1::InlineCompletion::~InlineCompletion((language_modeling::v1::InlineCompletion *)&v414);
    sub_19C307578(&v371);
    sub_19C3075D0((uint64_t *)&v398);
  }
  if (SHIBYTE(v382) < 0)
    operator delete(v381[0]);
  LOBYTE(v42) = HIBYTE(v387);
LABEL_260:
  if ((v42 & 0x80) != 0)
  {
    v132 = (__int128 *)v386;
    goto LABEL_262;
  }
LABEL_263:
  v34 = (unsigned __int8 *)v388;
LABEL_264:
  if (v34)
  {
    for (j = (unsigned __int8 *)v389; j != v34; j -= 32)
    {
      if ((char)*(j - 9) < 0)
        operator delete(*((void **)j - 4));
    }
    v389 = (char *)v34;
    operator delete(v34);
  }
  if (v394 && SHIBYTE(v392) < 0)
    operator delete((void *)v391);
  v12 = (void **)v395;
LABEL_275:
  if (v12)
  {
    v134 = v396;
    v135 = v12;
    if (v396 != v12)
    {
      do
      {
        if (*((char *)v134 - 9) < 0)
          operator delete(*(v134 - 4));
        v134 -= 4;
      }
      while (v134 != v12);
      v135 = v395;
    }
    v396 = v12;
    operator delete(v135);
  }
}

void sub_19C304744(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59,void *a60,uint64_t a61,uint64_t a62,void *a63)
{
  char a68;
  char a70;
  void *a72;
  uint64_t v72;
  void *v74;
  void *v75;

  sub_19C307B68(&a29);
  v74 = *(void **)(v72 - 192);
  if (v74)
  {
    *(_QWORD *)(v72 - 184) = v74;
    operator delete(v74);
  }
  sub_19C31D650((const void **)&STACK[0x218]);
  if (a48 < 0)
    operator delete(__p);
  sub_19C307B68((void **)(v72 - 240));
  v75 = *(void **)(v72 - 216);
  if (v75)
  {
    *(_QWORD *)(v72 - 208) = v75;
    operator delete(v75);
  }
  if (a59 < 0)
    operator delete(a54);
  sub_19C2E23C0(&a60);
  if (a70)
  {
    if (a68 < 0)
      operator delete(a63);
  }
  sub_19C2E23C0(&a72);
  _Unwind_Resume(a1);
}

void sub_19C304CD4()
{
  JUMPOUT(0x1A1AD355CLL);
}

_QWORD *sub_19C304CE8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E3D30BB8;
  result[1] = v3;
  return result;
}

uint64_t sub_19C304D1C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E3D30BB8;
  a2[1] = v2;
  return result;
}

BOOL sub_19C304D38(uint64_t a1, language_modeling::v1::InlineCompletion *a2)
{
  language_modeling::v1::InlineCompletion **v4;
  language_modeling::v1::InlineCompletion *v5;
  unint64_t v6;
  language_modeling::v1::InlineCompletion *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  language_modeling::v1::InlineCompletion *v15;
  language_modeling::v1::InlineCompletion *v16;
  language_modeling::v1::InlineCompletion *v17;
  language_modeling::v1::InlineCompletion *v18;
  unint64_t v19;
  uint64_t v21;
  uint64_t v22;
  language_modeling::v1::InlineCompletion *v23;
  char *v24;
  __int128 *v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  language_modeling::v1::InlineCompletion *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v4 = *(language_modeling::v1::InlineCompletion ***)(a1 + 8);
  v5 = v4[1];
  v6 = (unint64_t)v4[2];
  if ((unint64_t)v5 >= v6)
  {
    v8 = v5 - *v4;
    v9 = v8 >> 3;
    v10 = (v8 >> 3) + 1;
    if (v10 >> 61)
      sub_19C2A18E8();
    v11 = v6 - (_QWORD)*v4;
    v12 = v11 >> 2;
    if (v11 >> 2 <= v10)
      v12 = (v8 >> 3) + 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    if (v13)
    {
      if (v13 >> 61)
        sub_19C2A143C();
      v14 = (char *)operator new(8 * v13);
    }
    else
    {
      v14 = 0;
    }
    v15 = (language_modeling::v1::InlineCompletion *)&v14[8 * v13];
    v16 = language_modeling::v1::InlineCompletion::InlineCompletion((language_modeling::v1::InlineCompletion *)&v14[8 * v9], a2);
    v7 = (language_modeling::v1::InlineCompletion *)((char *)v16 + 8);
    v17 = *v4;
    v18 = v4[1];
    if (v18 == *v4)
    {
      *v4 = v16;
      v4[1] = v7;
      v4[2] = v15;
    }
    else
    {
      v19 = v18 - *v4 - 8;
      if (v19 < 0x78)
        goto LABEL_38;
      if ((language_modeling::v1::InlineCompletion *)((char *)v18 - (v19 & 0xFFFFFFFFFFFFFFF8) - 8) < v16
        && &v14[v8 - (v19 & 0xFFFFFFFFFFFFFFF8) - 8] < (char *)v18)
      {
        goto LABEL_38;
      }
      v21 = (v19 >> 3) + 1;
      v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
      v23 = (language_modeling::v1::InlineCompletion *)((char *)v18 - v22);
      v16 = (language_modeling::v1::InlineCompletion *)((char *)v16 - v22);
      v24 = &v14[8 * v9 - 16];
      v25 = (__int128 *)((char *)v18 - 16);
      v26 = v21 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v28 = *(v25 - 1);
        v27 = *v25;
        *(v25 - 1) = 0uLL;
        *v25 = 0uLL;
        *((_OWORD *)v24 - 1) = v28;
        *(_OWORD *)v24 = v27;
        v24 -= 32;
        v25 -= 2;
        v26 -= 4;
      }
      while (v26);
      v18 = v23;
      if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_38:
        do
        {
          v29 = *((_QWORD *)v18 - 1);
          v18 = (language_modeling::v1::InlineCompletion *)((char *)v18 - 8);
          *(_QWORD *)v18 = 0;
          *((_QWORD *)v16 - 1) = v29;
          v16 = (language_modeling::v1::InlineCompletion *)((char *)v16 - 8);
        }
        while (v18 != v17);
      }
      v18 = *v4;
      v30 = v4[1];
      *v4 = v16;
      v4[1] = v7;
      v4[2] = v15;
      while (v30 != v18)
      {
        v33 = *((_QWORD *)v30 - 1);
        v30 = (language_modeling::v1::InlineCompletion *)((char *)v30 - 8);
        v32 = v33;
        *(_QWORD *)v30 = 0;
        if (v33)
        {
          if (*(char *)(v32 + 287) < 0)
            operator delete(*(void **)(v32 + 264));
          v31 = sub_19C296378(v32);
          MEMORY[0x1A1AD355C](v31, 0x1032C40D90104AELL);
        }
      }
    }
    if (v18)
      operator delete(v18);
  }
  else
  {
    v7 = (language_modeling::v1::InlineCompletion *)((char *)language_modeling::v1::InlineCompletion::InlineCompletion(v5, a2)+ 8);
  }
  v4[1] = v7;
  return **(_QWORD **)(a1 + 8) == *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
}

uint64_t sub_19C304F24(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK17language_modeling2v126ToucanLanguageModelSession21_multiWordCompletionsERKNS0_17LinguisticCont"
                     "extERKNSt3__16vectorINS0_14CompletionStemENS5_9allocatorIS7_EEEEmmmPK14__CFDictionarybbRNS5_12basic"
                     "_stringIcNS5_11char_traitsIcEENS8_IcEEEERKNS5_8functionIFbvEEEE3$_0"
    || ((v3 & (unint64_t)"ZNK17language_modeling2v126ToucanLanguageModelSession21_multiWordCompletionsERKNS0_17Lin"
                                "guisticContextERKNSt3__16vectorINS0_14CompletionStemENS5_9allocatorIS7_EEEEmmmPK14__CFDi"
                                "ctionarybbRNS5_12basic_stringIcNS5_11char_traitsIcEENS8_IcEEEERKNS5_8functionIFbvEEEE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZNK17language_modeling2v126ToucanLanguageModelSession21_multiWordCompletionsERKNS0_17LinguisticContextERKNSt3__16vectorINS0_14CompletionStemENS5_9allocatorIS7_EEEEmmmPK14__CFDictionarybbRNS5_12basic_stringIcNS5_11char_traitsIcEENS8_IcEEEERKNS5_8functionIFbvEEEE3$_0")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK17language_modeling2v126ToucanLanguageModelSession21_multiWordCompletionsERKNS0_17LinguisticContextERKNSt3__16vectorINS0_14CompletionStemENS5_9allocatorIS7_EEEEmmmPK14__CFDictionarybbRNS5_12basic_stringIcNS5_11char_traitsIcEENS8_IcEEEERKNS5_8functionIFbvEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *sub_19C304F78()
{
  return &unk_1E3D30110;
}

BOOL sub_19C304F84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _BOOL8 v9;
  size_t v11;
  void *v12;
  const void *p_src;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  size_t v17;
  std::locale::__imp *v18;
  void **v19;
  size_t locale;
  std::locale::__imp *v21;
  int v22;
  char *v23;
  uint64_t v24;
  void *v25;
  void **v26;
  size_t v27;
  void *v28;
  void **v29;
  size_t v30;
  void *v31;
  void **v32;
  size_t v33;
  void *v34;
  const void *v35;
  size_t v36;
  void *v37;
  const void *v38;
  size_t v39;
  uint64_t v40;
  _BYTE *v41;
  const void *v42;
  size_t v43;
  std::locale::__imp *v44;
  _BYTE *v45;
  std::locale *v46;
  std::locale *v47;
  std::locale::__imp *v48;
  std::locale::__imp *v49;
  std::locale::__imp *v50;
  char *v51;
  unint64_t v52;
  char *v53;
  char *v54;
  void (*v55)(uint64_t, _WORD *, int);
  unint64_t v56;
  std::locale::__imp *v57;
  BOOL v58;
  int v59;
  uint64_t v60;
  char *v61;
  char *v62;
  unint64_t v63;
  _BYTE *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  _BYTE *v68;
  __int128 *v69;
  _OWORD *v70;
  unint64_t v71;
  __int128 v72;
  char v73;
  _OWORD *v74;
  __int128 v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void (*v79)(_BYTE *, _BYTE *, uint64_t);
  void (*v80)(std::locale *, std::locale *, uint64_t);
  void (*v81)(__int128 *, __int128 *, uint64_t);
  void (*v82)(__int128 *, __int128 *, uint64_t);
  __int128 v83;
  void (*v84)(__int128 *, __int128 *, uint64_t);
  void (*v85)(__int128 *, __int128 *, uint64_t);
  void **v86;
  uint64_t i;
  int v88;
  void **v89;
  __int128 v90;
  void **v91;
  int64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  char *v96;
  std::locale *v97;
  std::locale *v98;
  __int128 v99;
  void **v100;
  int64_t v101;
  uint64_t v102;
  std::locale::id *v103;
  char *v104;
  char *v105;
  int v106;
  _BYTE *v107;
  uint64_t v108;
  int v109;
  char *v110;
  uint64_t v111;
  BOOL v112;
  _BOOL4 v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  char v118;
  const std::locale::facet *v119;
  int v120;
  char v121;
  const std::locale::facet *v122;
  uint64_t v123;
  unint64_t v124;
  char *v125;
  char *v126;
  int v127;
  char *v128;
  uint64_t v129;
  int v130;
  char *v131;
  uint64_t v132;
  BOOL v133;
  char *v134;
  char *v135;
  char *v136;
  char *v137;
  char *v138;
  int v139;
  char *v140;
  uint64_t v141;
  int v142;
  _BYTE *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  char v148;
  const std::locale::facet *v149;
  int v150;
  char v151;
  const std::locale::facet *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  char v157;
  const std::locale::facet *v158;
  int v159;
  char v160;
  const std::locale::facet *v161;
  uint64_t v162;
  char *v163;
  char *v164;
  char *v165;
  char *v166;
  char *v167;
  int v168;
  char *v169;
  uint64_t v170;
  int v171;
  char *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  char *v176;
  char v177;
  const std::locale::facet *v178;
  int v179;
  char v180;
  const std::locale::facet *v181;
  uint64_t v182;
  void **v184;
  void *v185;
  void **v186;
  void *v187;
  int64_t v189;
  void **v190;
  int64_t v191;
  int64_t v192;
  char *v193;
  _BYTE *v194;
  unint64_t v195;
  int64_t v196;
  unint64_t v197;
  __int128 v198;
  _BYTE *v199;
  unint64_t v200;
  uint64_t v201;
  char *v202;
  _BYTE v203[24];
  void *v204;
  void *v205;
  unint64_t v206;
  void *v207[3];
  unint64_t v208;
  __int128 v209;
  uint64_t v210;
  __int128 v211;
  __int128 v212;
  char v213;
  unint64_t v214;
  __int128 v215;
  uint64_t v216;
  __int128 v217;
  __int128 v218;
  char v219;
  void **v220;
  char v221;
  void *__src;
  size_t __n;
  void *v224[2];
  size_t v225;
  void *__dst[2];
  size_t v227;
  int v228;
  void *v229;
  __int128 v230;
  uint64_t v231;
  __int128 v232;
  __int128 v233;
  char v234;
  void *v235;
  __int128 v236;
  uint64_t v237;
  __int128 v238;
  __int128 v239;
  char v240;
  void *v241;
  __int128 v242;
  uint64_t v243;
  __int128 v244;
  __int128 v245;
  char v246;
  void *v247[2];
  size_t v248;
  int v249;
  void *__p[2];
  size_t v251;
  int v252;
  _BYTE v253[24];
  uint64_t v254;
  void *__s2[2];
  __int128 v256;
  char v257;
  std::locale v258[3];
  uint64_t v259;
  __int128 v260;
  __int128 v261;
  char v262;
  uint64_t v263;

  v5 = a4;
  v263 = *MEMORY[0x1E0C80C00];
  v6 = a5 - a4;
  v7 = (a5 - a4) >> 5;
  v8 = (a3 - a2) >> 5;
  if (v8 + v7 < 8)
    return 0;
  v204 = 0;
  v205 = 0;
  v206 = 0;
  sub_19C2E229C(&v204, a2, a3, v8);
  if (v6 >= 0x40)
  {
    v14 = (unint64_t)v205;
    v15 = 32 * v7 - 32 * (v7 != 0);
    do
    {
      if (v14 < v206)
      {
        if (*(char *)(v5 + 23) < 0)
        {
          sub_19C2B5238((_BYTE *)v14, *(void **)v5, *(_QWORD *)(v5 + 8));
        }
        else
        {
          v16 = *(_OWORD *)v5;
          *(_QWORD *)(v14 + 16) = *(_QWORD *)(v5 + 16);
          *(_OWORD *)v14 = v16;
        }
        *(_DWORD *)(v14 + 24) = *(_DWORD *)(v5 + 24);
        v14 += 32;
      }
      else
      {
        v14 = sub_19C3079AC((char **)&v204, v5);
      }
      v205 = (void *)v14;
      v5 += 32;
      v15 -= 32;
    }
    while (v15);
  }
  memset(v203, 0, sizeof(v203));
  __n = 1;
  __src = (void *)32;
  std::__sort<std::__less<char,char> &,char *>();
  v11 = __n;
  v225 = __n;
  v224[0] = 0;
  if (__n >= 0x11)
  {
    v12 = (void *)operator new[]();
    v224[0] = v12;
    p_src = __src;
  }
  else
  {
    v12 = v224;
    p_src = &__src;
  }
  memcpy(v12, p_src, v11);
  v17 = v225;
  v258[2].__locale_ = (std::locale::__imp *)v225;
  v258[0].__locale_ = 0;
  if (v225 >= 0x11)
  {
    v18 = (std::locale::__imp *)operator new[]();
    v258[0].__locale_ = v18;
    v19 = (void **)v224[0];
  }
  else
  {
    v18 = (std::locale::__imp *)v258;
    v19 = v224;
  }
  memcpy(v18, v19, v17);
  locale = (size_t)v258[2].__locale_;
  v227 = (size_t)v258[2].__locale_;
  __dst[0] = 0;
  v200 = v17;
  if (v258[2].__locale_ > (std::locale::__imp *)0x10)
  {
    __dst[0] = (void *)operator new[]();
    v21 = v258[0].__locale_;
    memcpy(__dst[0], v258[0].__locale_, locale);
    v228 = 1;
    if (v21)
      MEMORY[0x1A1AD3538](v21, 0x1000C8077774924);
  }
  else
  {
    memcpy(__dst, v258, (size_t)v258[2].__locale_);
    v228 = 1;
    locale = v227;
  }
  v22 = *(char *)(a1 + 23);
  if (v22 >= 0)
    v23 = (char *)a1;
  else
    v23 = *(char **)a1;
  if (v22 >= 0)
    v24 = *(unsigned __int8 *)(a1 + 23);
  else
    v24 = *(_QWORD *)(a1 + 8);
  v248 = locale;
  v247[0] = 0;
  if (locale >= 0x11)
  {
    v25 = (void *)operator new[]();
    v247[0] = v25;
    v26 = (void **)__dst[0];
  }
  else
  {
    v25 = v247;
    v26 = __dst;
  }
  memcpy(v25, v26, locale);
  v249 = 1;
  v27 = v248;
  v251 = v248;
  __p[0] = 0;
  if (v248 >= 0x11)
  {
    v28 = (void *)operator new[]();
    __p[0] = v28;
    v29 = (void **)v247[0];
  }
  else
  {
    v28 = __p;
    v29 = v247;
  }
  v197 = v27;
  memcpy(v28, v29, v27);
  v252 = 1;
  v30 = v251;
  *((_QWORD *)&v230 + 1) = v251;
  v229 = 0;
  if (v251 >= 0x11)
  {
    v31 = (void *)operator new[]();
    v229 = v31;
    v32 = (void **)__p[0];
  }
  else
  {
    v31 = &v229;
    v32 = __p;
  }
  memcpy(v31, v32, v30);
  LODWORD(v231) = 1;
  v208 = 0;
  v33 = *((_QWORD *)&v230 + 1);
  *((_QWORD *)&v236 + 1) = *((_QWORD *)&v230 + 1);
  v235 = 0;
  if (*((_QWORD *)&v230 + 1) >= 0x11uLL)
  {
    v34 = (void *)operator new[]();
    v235 = v34;
    v35 = v229;
  }
  else
  {
    v34 = &v235;
    v35 = &v229;
  }
  memcpy(v34, v35, v33);
  LODWORD(v237) = 1;
  v36 = *((_QWORD *)&v236 + 1);
  *((_QWORD *)&v242 + 1) = *((_QWORD *)&v236 + 1);
  v241 = 0;
  if (*((_QWORD *)&v236 + 1) >= 0x11uLL)
  {
    v37 = (void *)operator new[]();
    v241 = v37;
    v38 = v235;
  }
  else
  {
    v37 = &v241;
    v38 = &v235;
  }
  memcpy(v37, v38, v36);
  LODWORD(v243) = 1;
  v39 = *((_QWORD *)&v242 + 1);
  *(_QWORD *)&v253[16] = *((_QWORD *)&v242 + 1);
  *(_QWORD *)v253 = 0;
  if (*((_QWORD *)&v242 + 1) >= 0x11uLL)
  {
    v41 = (_BYTE *)operator new[]();
    v40 = v24;
    *(_QWORD *)v253 = v41;
    v42 = v241;
  }
  else
  {
    v40 = v24;
    v41 = v253;
    v42 = &v241;
  }
  memcpy(v41, v42, v39);
  LODWORD(v254) = 1;
  v43 = *(_QWORD *)&v253[16];
  v258[2] = *(std::locale *)&v253[16];
  v258[0].__locale_ = 0;
  if (*(_QWORD *)&v253[16] >= 0x11uLL)
  {
    v44 = (std::locale::__imp *)operator new[]();
    v258[0].__locale_ = v44;
    v45 = *(_BYTE **)v253;
  }
  else
  {
    v44 = (std::locale::__imp *)v258;
    v45 = v253;
  }
  memcpy(v44, v45, v43);
  LODWORD(v259) = 1;
  v46 = (std::locale *)operator new();
  v47 = v46;
  v48 = v258[2].__locale_;
  v46[2].__locale_ = (std::locale::__imp *)v258[2];
  v46->__locale_ = 0;
  if ((unint64_t)v48 > 0x10)
  {
    v49 = (std::locale::__imp *)operator new[]();
    v47->__locale_ = v49;
    v50 = v258[0].__locale_;
    memcpy(v49, v258[0].__locale_, (size_t)v47[2].__locale_);
    LODWORD(v47[3].__locale_) = 1;
    *(_QWORD *)&v209 = v47;
    if (v50)
      MEMORY[0x1A1AD3538](v50, 0x1000C8077774924);
  }
  else
  {
    memcpy(v46, v258, (size_t)v48);
    LODWORD(v47[3].__locale_) = 1;
    *(_QWORD *)&v209 = v47;
  }
  if (v43 >= 0x11 && *(_QWORD *)v253)
    MEMORY[0x1A1AD3538](*(_QWORD *)v253, 0x1000C8077774924);
  if (v39 >= 0x11 && v241)
    MEMORY[0x1A1AD3538](v241, 0x1000C8077774924);
  v208 = (unint64_t)off_1E3D39E70;
  if (v36 >= 0x11 && v235)
    MEMORY[0x1A1AD3538](v235, 0x1000C8077774924);
  if (v33 >= 0x11 && v229)
    MEMORY[0x1A1AD3538](v229, 0x1000C8077774924);
  v51 = &v23[v40];
  if (v30 >= 0x11 && __p[0])
    MEMORY[0x1A1AD3538](__p[0], 0x1000C8077774924);
  *(_QWORD *)&v211 = v23;
  *((_QWORD *)&v211 + 1) = v23;
  *(_QWORD *)&v212 = v23;
  *((_QWORD *)&v212 + 1) = &v23[v40];
  v213 = 0;
  v52 = v208;
  if (!v40)
    goto LABEL_77;
  if (!v208)
  {
    v54 = &v23[v40];
    v53 = &v23[v40];
    goto LABEL_73;
  }
  v53 = (*(char *(**)(const void ***, char *, char *))((v208 & 0xFFFFFFFFFFFFFFFELL) + 8))((const void ***)&v209, v23, &v23[v40]);
  v51 = (char *)*((_QWORD *)&v212 + 1);
  if (v53 == *((char **)&v212 + 1))
  {
LABEL_73:
    if (v54 == v51 && *((char **)&v211 + 1) == v51)
      v213 = 1;
  }
  v52 = v208;
  *(_QWORD *)&v211 = v212;
  *((_QWORD *)&v211 + 1) = v53;
  *(_QWORD *)&v212 = v54;
LABEL_77:
  v214 = 0;
  if (v52)
  {
    v214 = v52;
    if ((v52 & 1) != 0)
    {
      v215 = v209;
      v216 = v210;
    }
    else
    {
      (*(void (**)(uint64_t, _WORD *, int))(v52 & 0xFFFFFFFFFFFFFFFELL))((uint64_t)&v209, &v215, 0);
      v52 = v208;
    }
  }
  v217 = v211;
  v218 = v212;
  v219 = v213;
  if (v52)
  {
    if ((v52 & 1) == 0)
    {
      v55 = *(void (**)(uint64_t, _WORD *, int))(v52 & 0xFFFFFFFFFFFFFFFELL);
      if (v55)
        v55((uint64_t)&v209, &v209, 2);
    }
    v208 = 0;
  }
  if (v197 >= 0x11 && v247[0])
    MEMORY[0x1A1AD3538](v247[0], 0x1000C8077774924);
  v241 = 0;
  v244 = 0u;
  v245 = 0u;
  v246 = 1;
  v235 = 0;
  v56 = v214;
  if (v214)
  {
    v235 = (void *)v214;
    if ((v214 & 1) != 0)
    {
      v56 = 0;
      v236 = v215;
      v237 = v216;
    }
    else
    {
      (*(void (**)(__int128 *, __int128 *, _QWORD))(v214 & 0xFFFFFFFFFFFFFFFELL))(&v215, &v236, 0);
      v56 = (unint64_t)v241;
    }
  }
  v238 = v217;
  v239 = v218;
  v240 = v219;
  v229 = 0;
  if (v56)
  {
    v229 = (void *)v56;
    if ((v56 & 1) != 0)
    {
      v230 = v242;
      v231 = v243;
    }
    else
    {
      (*(void (**)(__int128 *, __int128 *, _QWORD))(v56 & 0xFFFFFFFFFFFFFFFELL))(&v242, &v230, 0);
    }
  }
  v232 = v244;
  v233 = v245;
  v234 = v246;
  memset(v207, 0, sizeof(v207));
  v258[0].__locale_ = 0;
  if (v235)
  {
    v258[0].__locale_ = (std::locale::__imp *)v235;
    if ((v235 & 1) != 0)
    {
      *(_OWORD *)&v258[1].__locale_ = v236;
      v259 = v237;
    }
    else
    {
      (*(void (**)(__int128 *, std::locale *, _QWORD))((unint64_t)v235 & 0xFFFFFFFFFFFFFFFELL))(&v236, &v258[1], 0);
    }
  }
  v260 = v238;
  v261 = v239;
  v262 = v240;
  *(_QWORD *)v253 = 0;
  if (v229)
  {
    *(_QWORD *)v253 = v229;
    if ((v229 & 1) != 0)
    {
      *(_OWORD *)&v253[8] = v230;
      v254 = v231;
    }
    else
    {
      (*(void (**)(__int128 *, _BYTE *, _QWORD))((unint64_t)v229 & 0xFFFFFFFFFFFFFFFELL))(&v230, &v253[8], 0);
    }
  }
  *(_OWORD *)__s2 = v232;
  v256 = v233;
  v257 = v234;
  v220 = v207;
  v221 = 0;
  while (1)
  {
    v57 = v258[0].__locale_;
    if (v258[0].__locale_)
      v58 = v262 == 0;
    else
      v58 = 0;
    v59 = !v58;
    v60 = *(_QWORD *)v253;
    if (!*(_QWORD *)v253)
    {
      if (v59)
        goto LABEL_154;
      goto LABEL_122;
    }
    if (((v257 == 0) & ~v59) != 0)
      break;
    if (((v59 ^ (v257 != 0)) & 1) == 0)
      goto LABEL_150;
LABEL_122:
    v62 = (char *)*((_QWORD *)&v260 + 1);
    v61 = (char *)v260;
    v63 = *((_QWORD *)&v260 + 1) - v260;
    if (*((_QWORD *)&v260 + 1) - (_QWORD)v260 >= 0x7FFFFFFFFFFFFFF8uLL)
      sub_19C2A1A54();
    if (v63 > 0x16)
    {
      v65 = (v63 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v63 | 7) != 0x17)
        v65 = v63 | 7;
      v66 = v65 + 1;
      v64 = operator new(v65 + 1);
      v251 = v66 | 0x8000000000000000;
      __p[0] = v64;
      __p[1] = (void *)(v62 - v61);
      if (v61 == v62)
        goto LABEL_139;
    }
    else
    {
      HIBYTE(v251) = BYTE8(v260) - v260;
      v64 = __p;
      if ((_QWORD)v260 == *((_QWORD *)&v260 + 1))
        goto LABEL_139;
    }
    if (v63 < 0x20 || (unint64_t)(v64 - v61) < 0x20)
    {
      v68 = v64;
    }
    else
    {
      v67 = v63 & 0xFFFFFFFFFFFFFFE0;
      v68 = &v64[v63 & 0xFFFFFFFFFFFFFFE0];
      v69 = (__int128 *)(v61 + 16);
      v70 = v64 + 16;
      v71 = v63 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v72 = *v69;
        *(v70 - 1) = *(v69 - 1);
        *v70 = v72;
        v69 += 2;
        v70 += 2;
        v71 -= 32;
      }
      while (v71);
      if (v63 == v67)
      {
        v64 += v63 & 0xFFFFFFFFFFFFFFE0;
        goto LABEL_139;
      }
      v61 += v67;
    }
    v64 = v68;
    do
    {
      v73 = *v61++;
      *v64++ = v73;
    }
    while (v61 != v62);
LABEL_139:
    *v64 = 0;
    v74 = v207[1];
    if (v207[1] >= v207[2])
    {
      v207[1] = sub_19C307C78(v207, (uint64_t)__p);
      if (SHIBYTE(v251) < 0)
        operator delete(__p[0]);
    }
    else
    {
      v75 = *(_OWORD *)__p;
      *((_QWORD *)v207[1] + 2) = v251;
      *v74 = v75;
      v207[1] = (char *)v74 + 24;
    }
    v76 = *((_QWORD *)&v261 + 1);
    if (v258[0].__locale_)
    {
      v77 = (*(uint64_t (**)(std::locale *, _QWORD, _QWORD))(((unint64_t)v258[0].__locale_ & 0xFFFFFFFFFFFFFFFELL)
                                                                     + 8))(&v258[1], v261, *((_QWORD *)&v261 + 1));
      v76 = *((_QWORD *)&v261 + 1);
      if (v77 != *((_QWORD *)&v261 + 1))
        goto LABEL_106;
    }
    else
    {
      v78 = *((_QWORD *)&v261 + 1);
      v77 = *((_QWORD *)&v261 + 1);
    }
    if (v78 == v76 && *((_QWORD *)&v260 + 1) == v76)
      v262 = 1;
LABEL_106:
    *(_QWORD *)&v260 = v261;
    *((_QWORD *)&v260 + 1) = v77;
    *(_QWORD *)&v261 = v78;
  }
  if ((void *)(*((_QWORD *)&v260 + 1) - v260) != (void *)((char *)__s2[1] - (char *)__s2[0])
    || memcmp((const void *)v260, __s2[0], *((_QWORD *)&v260 + 1) - v260)
    || v261 != v256)
  {
    goto LABEL_122;
  }
LABEL_150:
  if ((v60 & 1) == 0)
  {
    v79 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v60 & 0xFFFFFFFFFFFFFFFELL);
    if (v79)
    {
      v79(&v253[8], &v253[8], 2);
      v57 = v258[0].__locale_;
    }
  }
  *(_QWORD *)v253 = 0;
LABEL_154:
  if (v57)
  {
    if ((v57 & 1) == 0)
    {
      v80 = *(void (**)(std::locale *, std::locale *, uint64_t))((unint64_t)v57 & 0xFFFFFFFFFFFFFFFELL);
      if (v80)
        v80(&v258[1], &v258[1], 2);
    }
  }
  if (v229)
  {
    if ((v229 & 1) == 0)
    {
      v81 = *(void (**)(__int128 *, __int128 *, uint64_t))((unint64_t)v229 & 0xFFFFFFFFFFFFFFFELL);
      if (v81)
        v81(&v230, &v230, 2);
    }
    v229 = 0;
  }
  if (v235)
  {
    if ((v235 & 1) == 0)
    {
      v82 = *(void (**)(__int128 *, __int128 *, uint64_t))((unint64_t)v235 & 0xFFFFFFFFFFFFFFFELL);
      if (v82)
        v82(&v236, &v236, 2);
    }
    v235 = 0;
  }
  v83 = *(_OWORD *)v207;
  v207[0] = *(void **)v203;
  v198 = v83;
  *(_OWORD *)&v207[1] = *(_OWORD *)&v203[8];
  if (*(_QWORD *)v203)
  {
    v207[1] = *(void **)v203;
    operator delete(*(void **)v203);
  }
  if (v241)
  {
    if ((v241 & 1) == 0)
    {
      v84 = *(void (**)(__int128 *, __int128 *, uint64_t))((unint64_t)v241 & 0xFFFFFFFFFFFFFFFELL);
      if (v84)
        v84(&v242, &v242, 2);
    }
  }
  if (v214)
  {
    if ((v214 & 1) == 0)
    {
      v85 = *(void (**)(__int128 *, __int128 *, uint64_t))(v214 & 0xFFFFFFFFFFFFFFFELL);
      if (v85)
        v85(&v215, &v215, 2);
    }
  }
  if (v227 >= 0x11 && __dst[0])
    MEMORY[0x1A1AD3538](__dst[0], 0x1000C8077774924);
  if (v200 >= 0x11 && v224[0])
    MEMORY[0x1A1AD3538](v224[0], 0x1000C8077774924);
  v86 = (void **)*((_QWORD *)&v198 + 1);
  v190 = (void **)v198;
  if (__n >= 0x11 && __src)
    MEMORY[0x1A1AD3538](__src, 0x1000C8077774924);
  if ((_QWORD)v198 != *((_QWORD *)&v198 + 1))
  {
    for (i = v198; (void **)i != v86; i += 24)
    {
      if (*(char *)(i + 23) < 0)
      {
        if (!*(_QWORD *)(i + 8))
          continue;
      }
      else if (!*(_BYTE *)(i + 23))
      {
        continue;
      }
      if (*(char *)(a1 + 23) < 0)
      {
        sub_19C2B5238(v253, *(void **)a1, *(_QWORD *)(a1 + 8));
      }
      else
      {
        *(_OWORD *)v253 = *(_OWORD *)a1;
        *(_QWORD *)&v253[16] = *(_QWORD *)(a1 + 16);
      }
      LODWORD(v254) = 0;
      sub_19C297950(v258, v253);
      v88 = v254;
      LODWORD(v259) = v254;
      v89 = (void **)v205;
      if ((unint64_t)v205 >= v206)
      {
        v91 = (void **)v204;
        v92 = ((_BYTE *)v205 - (_BYTE *)v204) >> 5;
        v93 = v92 + 1;
        if ((unint64_t)(v92 + 1) >> 59)
          sub_19C2A18E8();
        v94 = v206 - (_QWORD)v204;
        if ((uint64_t)(v206 - (_QWORD)v204) >> 4 > v93)
          v93 = v94 >> 4;
        if ((unint64_t)v94 >= 0x7FFFFFFFFFFFFFE0)
          v95 = 0x7FFFFFFFFFFFFFFLL;
        else
          v95 = v93;
        if (v95 >> 59)
          sub_19C2A143C();
        v96 = (char *)operator new(32 * v95);
        v97 = (std::locale *)&v96[32 * v92];
        *(_OWORD *)&v97->__locale_ = *(_OWORD *)&v258[0].__locale_;
        v97[2].__locale_ = (std::locale::__imp *)v258[2];
        memset(v258, 0, sizeof(v258));
        LODWORD(v97[3].__locale_) = v88;
        v98 = v97 + 4;
        if (v89 == v91)
        {
          v204 = &v96[32 * v92];
          v205 = &v97[4];
          v206 = (unint64_t)&v96[32 * v95];
        }
        else
        {
          do
          {
            v99 = *((_OWORD *)v89 - 2);
            v97[-2].__locale_ = (std::locale::__imp *)*(v89 - 2);
            *(_OWORD *)&v97[-4].__locale_ = v99;
            *(v89 - 3) = 0;
            *(v89 - 2) = 0;
            *(v89 - 4) = 0;
            LODWORD(v97[-1].__locale_) = *((_DWORD *)v89 - 2);
            v97 -= 4;
            v89 -= 4;
          }
          while (v89 != v91);
          v89 = (void **)v204;
          v100 = (void **)v205;
          v204 = v97;
          v205 = v98;
          v206 = (unint64_t)&v96[32 * v95];
          while (v100 != v89)
          {
            if (*((char *)v100 - 9) < 0)
              operator delete(*(v100 - 4));
            v100 -= 4;
          }
        }
        v86 = (void **)*((_QWORD *)&v198 + 1);
        if (v89)
          operator delete(v89);
        v205 = v98;
        if (SHIBYTE(v258[2].__locale_) < 0)
        {
          operator delete(v258[0].__locale_);
          if ((v253[23] & 0x80000000) != 0)
LABEL_220:
            operator delete(*(void **)v253);
        }
        else if ((v253[23] & 0x80000000) != 0)
        {
          goto LABEL_220;
        }
      }
      else
      {
        v90 = *(_OWORD *)&v258[0].__locale_;
        *((std::locale *)v205 + 2) = v258[2];
        *(_OWORD *)v89 = v90;
        memset(v258, 0, sizeof(v258));
        *((_DWORD *)v89 + 6) = v259;
        v205 = v89 + 4;
        if ((v253[23] & 0x80000000) != 0)
          goto LABEL_220;
      }
    }
  }
  v101 = ((_BYTE *)v205 - (_BYTE *)v204) >> 5;
  v196 = v101 - 4;
  if (v101 == 4)
    __assert_rtn("isPredictionResultingInLoop", "ToucanLanguageModelSession.cpp", 441, "index > 0");
  v195 = v101 - 8;
  if (v101 != 8)
  {
    v191 = v101 - 2;
    v192 = v101 - 3;
    v189 = v101 - 1;
    v102 = 1;
    v103 = (std::locale::id *)MEMORY[0x1E0DE4A90];
    while (1)
    {
      v201 = v102;
      v104 = (char *)v204 + 32 * v102;
      v105 = (char *)v204 + 32 * v196;
      MEMORY[0x1A1AD3478](v253);
      std::locale::locale(v258, (const std::locale *)v253);
      v106 = v104[23];
      if (v106 >= 0)
        v107 = v104;
      else
        v107 = *(_BYTE **)v104;
      if (v106 >= 0)
        v108 = v104[23];
      else
        v108 = *((_QWORD *)v104 + 1);
      v109 = v105[23];
      if (v109 >= 0)
        v110 = v105;
      else
        v110 = *(char **)v105;
      if (v109 >= 0)
        v111 = v105[23];
      else
        v111 = *((_QWORD *)v105 + 1);
      if (v108)
        v112 = v111 == 0;
      else
        v112 = 1;
      v199 = v107;
      if (v112)
      {
        v117 = v110;
LABEL_242:
        v114 = v107 == &v199[v108] && v117 == &v110[v111];
      }
      else
      {
        v115 = v111 - 1;
        v116 = v108 - 1;
        v117 = v110;
        while (1)
        {
          v118 = *v107;
          v119 = std::locale::use_facet(v258, v103);
          v120 = ((uint64_t (*)(const std::locale::facet *, _QWORD))v119->__vftable[1].~facet)(v119, v118);
          v121 = *v117;
          v122 = std::locale::use_facet(v258, v103);
          if (v120 != ((unsigned int (*)(const std::locale::facet *, _QWORD))v122->__vftable[1].~facet)(v122, v121))break;
          ++v107;
          ++v117;
          if (v116)
          {
            v123 = v115--;
            --v116;
            if (v123)
              continue;
          }
          goto LABEL_242;
        }
        v114 = 0;
      }
      std::locale::~locale(v258);
      std::locale::~locale((std::locale *)v253);
      v124 = v201 + 1;
      if (!v114)
      {
        v9 = 0;
        v86 = (void **)*((_QWORD *)&v198 + 1);
        goto LABEL_331;
      }
      *(_QWORD *)&v198 = v201 + 1;
      v125 = (char *)v204 + 32 * v124;
      v126 = (char *)v204 + 32 * v192;
      MEMORY[0x1A1AD3478](v253);
      std::locale::locale(v258, (const std::locale *)v253);
      v127 = v125[23];
      v128 = v127 >= 0 ? v125 : *(char **)v125;
      v129 = v127 >= 0 ? v125[23] : *((_QWORD *)v125 + 1);
      v130 = v126[23];
      v131 = v130 >= 0 ? v126 : *(char **)v126;
      v132 = v130 >= 0 ? v126[23] : *((_QWORD *)v126 + 1);
      v133 = !v129 || v132 == 0;
      v193 = v131;
      if (!v133)
        break;
      v156 = v128;
LABEL_272:
      std::locale::~locale(v258);
      std::locale::~locale((std::locale *)v253);
      v9 = 0;
      if (v156 != &v128[v129])
        goto LABEL_330;
      v86 = (void **)*((_QWORD *)&v198 + 1);
      v124 = v201 + 1;
      if (v131 != &v193[v132])
        goto LABEL_331;
      v134 = (char *)v204 + 32 * v201;
      v135 = (char *)v204 + 32 * v191;
      MEMORY[0x1A1AD3478](v253);
      std::locale::locale(v258, (const std::locale *)v253);
      v138 = (char *)*((_QWORD *)v134 + 8);
      v137 = v134 + 64;
      v136 = v138;
      v139 = v137[23];
      if (v139 >= 0)
        v140 = v137;
      else
        v140 = v136;
      if (v139 >= 0)
        v141 = v137[23];
      else
        v141 = *((_QWORD *)v137 + 1);
      v142 = v135[23];
      if (v142 >= 0)
        v143 = v135;
      else
        v143 = *(_BYTE **)v135;
      if (v142 >= 0)
        v144 = v135[23];
      else
        v144 = *((_QWORD *)v135 + 1);
      v194 = v143;
      if (v141 && v144)
      {
        v145 = v144 - 1;
        v146 = v141 - 1;
        v147 = v140;
        while (1)
        {
          v148 = *v147;
          v149 = std::locale::use_facet(v258, v103);
          v150 = ((uint64_t (*)(const std::locale::facet *, _QWORD))v149->__vftable[1].~facet)(v149, v148);
          v151 = *v143;
          v152 = std::locale::use_facet(v258, v103);
          if (v150 != ((unsigned int (*)(const std::locale::facet *, _QWORD))v152->__vftable[1].~facet)(v152, v151))break;
          ++v147;
          ++v143;
          if (v146)
          {
            v153 = v145--;
            --v146;
            if (v153)
              continue;
          }
          goto LABEL_300;
        }
LABEL_298:
        std::locale::~locale(v258);
        std::locale::~locale((std::locale *)v253);
        v9 = 0;
        goto LABEL_330;
      }
      v147 = v140;
LABEL_300:
      std::locale::~locale(v258);
      std::locale::~locale((std::locale *)v253);
      v9 = 0;
      if (v147 == &v140[v141])
      {
        v86 = (void **)*((_QWORD *)&v198 + 1);
        v124 = v201 + 1;
        if (v143 != &v194[v144])
          goto LABEL_331;
        v163 = (char *)v204 + 32 * v201;
        v164 = (char *)v204 + 32 * v189;
        MEMORY[0x1A1AD3478](v253);
        std::locale::locale(v258, (const std::locale *)v253);
        v167 = (char *)*((_QWORD *)v163 + 12);
        v166 = v163 + 96;
        v165 = v167;
        v168 = v166[23];
        if (v168 >= 0)
          v169 = v166;
        else
          v169 = v165;
        if (v168 >= 0)
          v170 = v166[23];
        else
          v170 = *((_QWORD *)v166 + 1);
        v171 = v164[23];
        if (v171 >= 0)
          v172 = v164;
        else
          v172 = *(char **)v164;
        if (v171 >= 0)
          v173 = v164[23];
        else
          v173 = *((_QWORD *)v164 + 1);
        v202 = v169;
        if (v170 && v173)
        {
          v174 = v173 - 1;
          v175 = v170 - 1;
          v176 = v172;
          while (1)
          {
            v177 = *v169;
            v178 = std::locale::use_facet(v258, v103);
            v179 = ((uint64_t (*)(const std::locale::facet *, _QWORD))v178->__vftable[1].~facet)(v178, v177);
            v180 = *v176;
            v181 = std::locale::use_facet(v258, v103);
            if (v179 != ((unsigned int (*)(const std::locale::facet *, _QWORD))v181->__vftable[1].~facet)(v181, v180))break;
            ++v169;
            ++v176;
            if (v175)
            {
              v182 = v174--;
              --v175;
              if (v182)
                continue;
            }
            goto LABEL_322;
          }
          v9 = 0;
        }
        else
        {
          v176 = v172;
LABEL_322:
          v9 = v169 == &v202[v170] && v176 == &v172[v173];
        }
        std::locale::~locale(v258);
        std::locale::~locale((std::locale *)v253);
      }
LABEL_330:
      v86 = (void **)*((_QWORD *)&v198 + 1);
      v124 = v198;
LABEL_331:
      if (!v9)
      {
        v102 = v124;
        if (v124 <= v195)
          continue;
      }
      v184 = v190;
      if (v190)
        goto LABEL_334;
LABEL_341:
      v185 = v204;
      if (v204)
        goto LABEL_342;
      return v9;
    }
    v154 = v132 - 1;
    v155 = v129 - 1;
    v156 = v128;
    while (1)
    {
      v157 = *v156;
      v158 = std::locale::use_facet(v258, v103);
      v159 = ((uint64_t (*)(const std::locale::facet *, _QWORD))v158->__vftable[1].~facet)(v158, v157);
      v160 = *v131;
      v161 = std::locale::use_facet(v258, v103);
      if (v159 != ((unsigned int (*)(const std::locale::facet *, _QWORD))v161->__vftable[1].~facet)(v161, v160))goto LABEL_298;
      ++v156;
      ++v131;
      if (v155)
      {
        v162 = v154--;
        --v155;
        if (v162)
          continue;
      }
      goto LABEL_272;
    }
  }
  v9 = 0;
  v184 = (void **)v198;
  if (!(_QWORD)v198)
    goto LABEL_341;
LABEL_334:
  while (v86 != v184)
  {
    if (*((char *)v86 - 1) < 0)
      operator delete(*(v86 - 3));
    v86 -= 3;
  }
  operator delete(v184);
  v185 = v204;
  if (v204)
  {
LABEL_342:
    v186 = (void **)v205;
    v187 = v185;
    if (v205 != v185)
    {
      do
      {
        if (*((char *)v186 - 9) < 0)
          operator delete(*(v186 - 4));
        v186 -= 4;
      }
      while (v186 != v185);
      v187 = v204;
    }
    v205 = v185;
    operator delete(v187);
  }
  return v9;
}

void sub_19C306448(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_19C2CDAC8(a1);
  _Unwind_Resume(a1);
}

void sub_19C306644()
{
  JUMPOUT(0x19C3067A0);
}

void sub_19C306654(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  void *v15;
  va_list va;
  uint64_t v17;
  uint64_t v18;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v15 = va_arg(va1, void *);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  if (*(char *)(v13 - 161) < 0)
    operator delete(*(void **)(v13 - 184));
  if (SLOBYTE(STACK[0x2E7]) < 0)
    operator delete((void *)STACK[0x2D0]);
  sub_19C307B68((void **)va);
  sub_19C2E23C0((void **)va1);
  _Unwind_Resume(a1);
}

void sub_19C306690(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void **a49)
{
  if (SLOBYTE(STACK[0x2C7]) < 0)
    operator delete((void *)STACK[0x2B0]);
  sub_19C307DCC(&a49);
  sub_19C307C28((uint64_t *)&STACK[0x2D0]);
  JUMPOUT(0x19C3066CCLL);
}

void sub_19C30677C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  void *v14;
  va_list va;
  uint64_t v16;
  uint64_t v17;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, void *);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  sub_19C307B68((void **)va);
  sub_19C2E23C0((void **)va1);
  _Unwind_Resume(a1);
}

void sub_19C306784()
{
  uint64_t v0;

  std::locale::~locale((std::locale *)(v0 - 184));
  std::locale::~locale((std::locale *)&STACK[0x2D0]);
  JUMPOUT(0x19C306798);
}

void sub_19C3067B0(char **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, __int128 *a7, int a8)
{
  _QWORD *v16;
  _QWORD *v17;
  void **v18;
  _QWORD *v19;
  _QWORD *v20;
  void **v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  char *v25;
  void **v26;
  void **v27;
  void *v28;
  void **v29;
  void **v30;
  void *v31;
  void *v32;
  void **v33;
  _QWORD *v34;
  void *v35;
  void **v36;
  _QWORD *v37;
  void **v38;
  char v39;
  void *__p[2];
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  int v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  if (*(char *)(a2 + 23) < 0)
  {
    sub_19C2B5238(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    *(_QWORD *)&v41 = *(_QWORD *)(a2 + 16);
  }
  DWORD2(v41) = 0;
  v36 = 0;
  v37 = 0;
  v35 = 0;
  v32 = &v35;
  LOBYTE(v33) = 0;
  v16 = operator new(0x20uLL);
  v17 = v16;
  v35 = v16;
  v36 = (void **)v16;
  v18 = (void **)(v16 + 4);
  v37 = v16 + 4;
  if (SBYTE7(v41) < 0)
  {
    sub_19C2B5238(v16, __p[0], (unint64_t)__p[1]);
  }
  else
  {
    *(_OWORD *)v16 = *(_OWORD *)__p;
    v16[2] = v41;
  }
  *((_DWORD *)v17 + 6) = DWORD2(v41);
  v36 = v18;
  if (SBYTE7(v41) < 0)
  {
    operator delete(__p[0]);
    if ((*(char *)(a3 + 23) & 0x80000000) == 0)
      goto LABEL_9;
  }
  else if ((*(char *)(a3 + 23) & 0x80000000) == 0)
  {
LABEL_9:
    *(_OWORD *)__p = *(_OWORD *)a3;
    *(_QWORD *)&v41 = *(_QWORD *)(a3 + 16);
    goto LABEL_12;
  }
  sub_19C2B5238(__p, *(void **)a3, *(_QWORD *)(a3 + 8));
LABEL_12:
  DWORD2(v41) = 0;
  v33 = 0;
  v34 = 0;
  v32 = 0;
  v38 = &v32;
  v39 = 0;
  v19 = operator new(0x20uLL);
  v20 = v19;
  v32 = v19;
  v33 = (void **)v19;
  v21 = (void **)(v19 + 4);
  v34 = v19 + 4;
  if (SBYTE7(v41) < 0)
  {
    sub_19C2B5238(v19, __p[0], (unint64_t)__p[1]);
  }
  else
  {
    *(_OWORD *)v19 = *(_OWORD *)__p;
    v19[2] = v41;
  }
  *((_DWORD *)v20 + 6) = DWORD2(v41);
  v33 = v21;
  if (SBYTE7(v41) < 0)
    operator delete(__p[0]);
  v22 = *(_OWORD *)(a4 + 80);
  v44 = *(_OWORD *)(a4 + 64);
  v45 = v22;
  v46 = *(_QWORD *)(a4 + 96);
  v23 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)__p = *(_OWORD *)a4;
  v41 = v23;
  v24 = *(_OWORD *)(a4 + 48);
  v42 = *(_OWORD *)(a4 + 32);
  v43 = v24;
  v47 = *(_DWORD *)(a4 + 24) & 1 | (2 * ((*(_DWORD *)(a4 + 24) >> 8) & 1));
  v25 = (char *)operator new();
  sub_19C3077FC(v25, (__int128 *)a2, (__int128 *)a3, (__int128 *)__p, (uint64_t *)&v35, (uint64_t *)&v32, a7, a5, a8, a6);
  *a1 = v25;
  v26 = (void **)v32;
  if (v32)
  {
    v27 = v33;
    v28 = v32;
    if (v33 != v32)
    {
      do
      {
        if (*((char *)v27 - 9) < 0)
          operator delete(*(v27 - 4));
        v27 -= 4;
      }
      while (v27 != v26);
      v28 = v32;
    }
    v33 = v26;
    operator delete(v28);
  }
  v29 = (void **)v35;
  if (v35)
  {
    v30 = v36;
    v31 = v35;
    if (v36 != v35)
    {
      do
      {
        if (*((char *)v30 - 9) < 0)
          operator delete(*(v30 - 4));
        v30 -= 4;
      }
      while (v30 != v29);
      v31 = v35;
    }
    v36 = v29;
    operator delete(v31);
  }
}

void sub_19C306A88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void **a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  sub_19C2E2430(&a17);
  if (a24 < 0)
    operator delete(__p);
  sub_19C2E23C0(&a14);
  _Unwind_Resume(a1);
}

_OWORD *sub_19C306B2C(uint64_t *a1, _QWORD *a2)
{
  _OWORD *result;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t *v8;

  result = operator new(0x48uLL);
  v5 = 0;
  *a1 = (uint64_t)result;
  *(_OWORD *)(a1 + 1) = xmmword_19C46DE30;
  *(_QWORD *)&v6 = 0x3030303030303030;
  *((_QWORD *)&v6 + 1) = 0x3030303030303030;
  *result = v6;
  result[1] = v6;
  result[2] = v6;
  result[3] = v6;
  *((_BYTE *)result + 64) = 0;
  v7 = 63;
  do
  {
    if (((*a2 >> v5) & 1) != 0)
    {
      if (*((char *)a1 + 23) >= 0)
        v8 = a1;
      else
        v8 = (uint64_t *)*a1;
      *((_BYTE *)v8 + v7) = 49;
    }
    ++v5;
    --v7;
  }
  while (v5 != 64);
  return result;
}

_QWORD *sub_19C306BB8(_QWORD *__dst, _QWORD *__src, size_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  size_t v5;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v3 = __src;
  v4 = __dst;
  if (*((char *)__src + 23) < 0)
  {
    v3 = (_QWORD *)*__src;
    v5 = __src[1];
  }
  else
  {
    v5 = *((unsigned __int8 *)__src + 23);
  }
  if (v5 >= a3)
    v6 = a3;
  else
    v6 = v5;
  if (v6 >= 0x7FFFFFFFFFFFFFF8)
    sub_19C2A1A54();
  if (v6 >= 0x17)
  {
    v7 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v7 = v6 | 7;
    v8 = v7 + 1;
    v9 = operator new(v7 + 1);
    v4[1] = v6;
    v4[2] = v8 | 0x8000000000000000;
    *v4 = v9;
    v4 = v9;
  }
  else
  {
    *((_BYTE *)__dst + 23) = v6;
    if (!v6)
      goto LABEL_15;
  }
  __dst = memmove(v4, v3, v6);
LABEL_15:
  *((_BYTE *)v4 + v6) = 0;
  return __dst;
}

uint64_t sub_19C306C68(_BYTE *a1, __int128 **a2)
{
  __int128 *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  __int128 *p_dst;
  unint64_t v8;
  const void **v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 *v15;
  uint64_t v16;
  _QWORD *v17;
  size_t v18;
  unint64_t v19;
  const void **v20;
  const void *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  NSObject *v27;
  int v28;
  __int128 __dst;
  int64_t v31;
  _QWORD v32[2];
  _QWORD v33[3];
  _BYTE v34[16];
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  void *__p;
  char v39;
  unint64_t v40;
  int v41;
  uint64_t v42;
  uint8_t buf[4];
  int v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  sub_19C2B4F08((uint64_t)v32);
  v3 = *a2;
  v4 = (char *)a2[1] - (char *)*a2;
  if (v4)
  {
    v5 = 32 * (v4 >> 5);
    while (1)
    {
      if ((v41 & 0x10) != 0)
      {
        v8 = v40;
        v9 = (const void **)&v36;
        if (v40 < v37)
        {
          v40 = v37;
          v8 = v37;
          v9 = (const void **)&v36;
        }
      }
      else
      {
        if ((v41 & 8) == 0)
        {
          v6 = 0;
          HIBYTE(v31) = 0;
          p_dst = &__dst;
          goto LABEL_18;
        }
        v8 = v35;
        v9 = (const void **)v34;
      }
      v10 = *v9;
      v6 = v8 - (_QWORD)*v9;
      if (v6 > 0x7FFFFFFFFFFFFFF7)
        sub_19C2A1A54();
      if (v6 >= 0x17)
        break;
      HIBYTE(v31) = v8 - *(_BYTE *)v9;
      p_dst = &__dst;
      if (v6)
        goto LABEL_17;
LABEL_18:
      *((_BYTE *)p_dst + v6) = 0;
      if ((SHIBYTE(v31) & 0x80000000) == 0)
      {
        if (!HIBYTE(v31))
          goto LABEL_23;
LABEL_22:
        sub_19C2A1B24(v33, (uint64_t)" ", 1);
        goto LABEL_23;
      }
      v13 = *((_QWORD *)&__dst + 1);
      operator delete((void *)__dst);
      if (v13)
        goto LABEL_22;
LABEL_23:
      switch(*((_DWORD *)v3 + 6))
      {
        case 0:
        case 3:
          if (*((char *)v3 + 23) < 0)
          {
            sub_19C2B5238(&__dst, *(void **)v3, *((_QWORD *)v3 + 1));
          }
          else
          {
            v14 = *v3;
            v31 = *((_QWORD *)v3 + 2);
            __dst = v14;
          }
          break;
        case 1:
          HIBYTE(v31) = 3;
          LODWORD(__dst) = 4092732;
          break;
        case 2:
          HIBYTE(v31) = 4;
          strcpy((char *)&__dst, "</s>");
          break;
        default:
          if (qword_1EDB97228 != -1)
            dispatch_once(&qword_1EDB97228, &unk_1E3D3ABD0);
          v27 = qword_1EDB97220;
          if (os_log_type_enabled((os_log_t)qword_1EDB97220, OS_LOG_TYPE_ERROR))
          {
            v28 = *((_DWORD *)v3 + 6);
            *(_DWORD *)buf = 67109120;
            v44 = v28;
            _os_log_error_impl(&dword_19C291000, v27, OS_LOG_TYPE_ERROR, "Unsupported token type: %d", buf, 8u);
          }
          __assert_rtn("toString", "TokenIDAdapterUtils.hpp", 89, "false");
      }
      if (v31 >= 0)
        v15 = &__dst;
      else
        v15 = (__int128 *)__dst;
      if (v31 >= 0)
        v16 = HIBYTE(v31);
      else
        v16 = *((_QWORD *)&__dst + 1);
      sub_19C2A1B24(v33, (uint64_t)v15, v16);
      if (SHIBYTE(v31) < 0)
        operator delete((void *)__dst);
      v3 += 2;
      v5 -= 32;
      if (!v5)
        goto LABEL_37;
    }
    v11 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v11 = v6 | 7;
    v12 = v11 + 1;
    p_dst = (__int128 *)operator new(v11 + 1);
    *((_QWORD *)&__dst + 1) = v6;
    v31 = v12 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
LABEL_17:
    memmove(p_dst, v10, v6);
    goto LABEL_18;
  }
LABEL_37:
  if ((v41 & 0x10) != 0)
  {
    v19 = v40;
    v17 = a1;
    if (v40 < v37)
    {
      v40 = v37;
      v19 = v37;
    }
    v20 = (const void **)&v36;
  }
  else
  {
    v17 = a1;
    if ((v41 & 8) == 0)
    {
      v18 = 0;
      a1[23] = 0;
      goto LABEL_52;
    }
    v20 = (const void **)v34;
    v19 = v35;
  }
  v21 = *v20;
  v18 = v19 - (_QWORD)*v20;
  if (v18 > 0x7FFFFFFFFFFFFFF7)
    sub_19C2A1A54();
  if (v18 >= 0x17)
  {
    v22 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17)
      v22 = v18 | 7;
    v23 = v22 + 1;
    v24 = operator new(v22 + 1);
    v17[1] = v18;
    v17[2] = v23 | 0x8000000000000000;
    *v17 = v24;
    v17 = v24;
    goto LABEL_51;
  }
  *((_BYTE *)v17 + 23) = v18;
  if (v18)
LABEL_51:
    memmove(v17, v21, v18);
LABEL_52:
  *((_BYTE *)v17 + v18) = 0;
  v32[0] = *MEMORY[0x1E0DE4F50];
  v25 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v32 + *(_QWORD *)(v32[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v33[0] = v25;
  v33[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v39 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1A1AD34CC](&v42);
}

void sub_19C307098(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_19C2B5034((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19C3070C0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  JUMPOUT(0x19C3070B0);
}

uint64_t sub_19C3070E8(_QWORD *a1, const void *****a2)
{
  const void ****v3;
  const void ****v4;
  std::string::size_type v5;
  std::string *p_dst;
  unint64_t v7;
  const void **v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  std::string::size_type size;
  std::string *v13;
  std::string::size_type v14;
  _QWORD *v15;
  _QWORD *v16;
  size_t v17;
  void *v18;
  unint64_t v19;
  const void **v20;
  const void *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  std::string __dst;
  _QWORD v29[2];
  _QWORD v30[3];
  _BYTE v31[16];
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  void *__p;
  char v36;
  unint64_t v37;
  int v38;
  uint64_t v39;

  sub_19C2B4F08((uint64_t)v29);
  v3 = *a2;
  v4 = a2[1];
  if (*a2 != v4)
  {
    while (1)
    {
      if ((v38 & 0x10) != 0)
      {
        v7 = v37;
        v8 = (const void **)&v33;
        if (v37 < v34)
        {
          v37 = v34;
          v7 = v34;
          v8 = (const void **)&v33;
        }
      }
      else
      {
        if ((v38 & 8) == 0)
        {
          v5 = 0;
          *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 0;
          p_dst = &__dst;
          goto LABEL_18;
        }
        v7 = v32;
        v8 = (const void **)v31;
      }
      v9 = *v8;
      v5 = v7 - (_QWORD)*v8;
      if (v5 > 0x7FFFFFFFFFFFFFF7)
        sub_19C2A1A54();
      if (v5 >= 0x17)
        break;
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v7 - *(_BYTE *)v8;
      p_dst = &__dst;
      if (v5)
        goto LABEL_17;
LABEL_18:
      p_dst->__r_.__value_.__s.__data_[v5] = 0;
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        if (!*((_BYTE *)&__dst.__r_.__value_.__s + 23))
          goto LABEL_23;
LABEL_22:
        sub_19C2A1B24(v30, (uint64_t)" ", 1);
        goto LABEL_23;
      }
      size = __dst.__r_.__value_.__l.__size_;
      operator delete(__dst.__r_.__value_.__l.__data_);
      if (size)
        goto LABEL_22;
LABEL_23:
      sub_19C3D8294(&__dst, **v3, (*v3)[1]);
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v13 = &__dst;
      else
        v13 = (std::string *)__dst.__r_.__value_.__r.__words[0];
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v14 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
      else
        v14 = __dst.__r_.__value_.__l.__size_;
      v15 = sub_19C2A1B24(v30, (uint64_t)v13, v14);
      sub_19C2A1B24(v15, (uint64_t)"(", 1);
      v16 = (_QWORD *)std::ostream::operator<<();
      sub_19C2A1B24(v16, (uint64_t)")", 1);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__dst.__r_.__value_.__l.__data_);
      if (++v3 == v4)
        goto LABEL_31;
    }
    v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v10 = v5 | 7;
    v11 = v10 + 1;
    p_dst = (std::string *)operator new(v10 + 1);
    __dst.__r_.__value_.__l.__size_ = v5;
    __dst.__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
LABEL_17:
    memmove(p_dst, v9, v5);
    goto LABEL_18;
  }
LABEL_31:
  if ((v38 & 0x10) != 0)
  {
    v19 = v37;
    if (v37 < v34)
    {
      v37 = v34;
      v19 = v34;
    }
    v20 = (const void **)&v33;
  }
  else
  {
    if ((v38 & 8) == 0)
    {
      v17 = 0;
      v18 = a1;
      *((_BYTE *)a1 + 23) = 0;
      goto LABEL_46;
    }
    v20 = (const void **)v31;
    v19 = v32;
  }
  v21 = *v20;
  v17 = v19 - (_QWORD)*v20;
  if (v17 > 0x7FFFFFFFFFFFFFF7)
    sub_19C2A1A54();
  if (v17 >= 0x17)
  {
    v22 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17)
      v22 = v17 | 7;
    v23 = v22 + 1;
    v24 = operator new(v22 + 1);
    a1[1] = v17;
    a1[2] = v23 | 0x8000000000000000;
    *a1 = v24;
    v18 = v24;
    goto LABEL_45;
  }
  v18 = a1;
  *((_BYTE *)a1 + 23) = v17;
  if (v17)
LABEL_45:
    memmove(v18, v21, v17);
LABEL_46:
  *((_BYTE *)v18 + v17) = 0;
  v29[0] = *MEMORY[0x1E0DE4F50];
  v25 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v29 + *(_QWORD *)(v29[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v30[0] = v25;
  v30[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v36 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1A1AD34CC](&v39);
}

void sub_19C30740C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  sub_19C2B5034((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void sub_19C307444(uint64_t *a1, __int128 *a2, int *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  int v11;
  void *__p[2];
  uint64_t v13;

  v8 = operator new();
  v9 = *a3;
  if (*(char *)(a4 + 23) < 0)
  {
    sub_19C2B5238(__p, *(void **)a4, *(_QWORD *)(a4 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a4;
    v13 = *(_QWORD *)(a4 + 16);
  }
  sub_19C29769C((char *)v8, a2);
  *(_QWORD *)(v8 + 256) = v9;
  v10 = (_BYTE *)(v8 + 264);
  if (SHIBYTE(v13) < 0)
  {
    sub_19C2B5238(v10, __p[0], (unint64_t)__p[1]);
    v11 = SHIBYTE(v13);
    *a1 = v8;
    if (v11 < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_OWORD *)v10 = *(_OWORD *)__p;
    *(_QWORD *)(v8 + 280) = v13;
    *a1 = v8;
  }
}

void sub_19C30751C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  sub_19C296378(v14);
  if (a14 < 0)
    operator delete(__p);
  MEMORY[0x1A1AD355C](v14, 0x1032C40D90104AELL);
  _Unwind_Resume(a1);
}

_QWORD *sub_19C307568(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *a2 = 0;
  *result = v2;
  return result;
}

uint64_t *sub_19C307578(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*(char *)(v2 + 287) < 0)
      operator delete(*(void **)(v2 + 264));
    v3 = sub_19C296378(v2);
    MEMORY[0x1A1AD355C](v3, 0x1032C40D90104AELL);
  }
  return a1;
}

uint64_t *sub_19C3075D0(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = sub_19C296378(v2);
    MEMORY[0x1A1AD355C](v3, 0x1032C4057ACE4D0);
  }
  return a1;
}

_QWORD *sub_19C307614(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v2 = a1[1] - *a1;
  v3 = v2 >> 3;
  v4 = (v2 >> 3) + 1;
  if (v4 >> 61)
    sub_19C2A18E8();
  v7 = a1[2] - *a1;
  if (v7 >> 2 > v4)
    v4 = v7 >> 2;
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8)
    v8 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v8 = v4;
  if (v8)
  {
    if (v8 >> 61)
      sub_19C2A143C();
    v9 = (char *)operator new(8 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[8 * v3];
  v11 = &v9[8 * v8];
  v12 = *a2;
  *a2 = 0;
  *(_QWORD *)v10 = v12;
  v13 = v10 + 8;
  v14 = (char *)*a1;
  v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v10;
    a1[1] = v13;
    a1[2] = v11;
  }
  else
  {
    v16 = (unint64_t)&v15[-*a1 - 8];
    if (v16 < 0x78 || &v15[-(v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v10 && &v9[v2 - (v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v15)
      goto LABEL_33;
    v17 = (v16 >> 3) + 1;
    v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    v19 = &v15[-v18];
    v10 -= v18;
    v20 = &v9[8 * v3 - 16];
    v21 = v15 - 16;
    v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v24 = *((_OWORD *)v21 - 1);
      v23 = *(_OWORD *)v21;
      *((_OWORD *)v21 - 1) = 0uLL;
      *(_OWORD *)v21 = 0uLL;
      *((_OWORD *)v20 - 1) = v24;
      *(_OWORD *)v20 = v23;
      v20 -= 32;
      v21 -= 32;
      v22 -= 4;
    }
    while (v22);
    v15 = v19;
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_33:
      do
      {
        v25 = *((_QWORD *)v15 - 1);
        v15 -= 8;
        *(_QWORD *)v15 = 0;
        *((_QWORD *)v10 - 1) = v25;
        v10 -= 8;
      }
      while (v15 != v14);
    }
    v15 = (char *)*a1;
    v26 = (char *)a1[1];
    *a1 = v10;
    a1[1] = v13;
    a1[2] = v11;
    while (v26 != v15)
    {
      v29 = *((_QWORD *)v26 - 1);
      v26 -= 8;
      v28 = v29;
      *(_QWORD *)v26 = 0;
      if (v29)
      {
        if (*(char *)(v28 + 287) < 0)
          operator delete(*(void **)(v28 + 264));
        v27 = sub_19C296378(v28);
        MEMORY[0x1A1AD355C](v27, 0x1032C40D90104AELL);
      }
    }
  }
  if (v15)
    operator delete(v15);
  return v13;
}

os_log_t sub_19C3077D0()
{
  os_log_t result;

  result = os_log_create("com.apple.LanguageModeling", "ToucanInlineCompletion");
  qword_1EE41C058 = (uint64_t)result;
  return result;
}

char *sub_19C3077FC(char *__dst, __int128 *a2, __int128 *a3, __int128 *a4, uint64_t *a5, uint64_t *a6, __int128 *a7, uint64_t a8, int a9, uint64_t a10)
{
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _BYTE *v26;
  __int128 v27;

  if (*((char *)a2 + 23) < 0)
  {
    sub_19C2B5238(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v17 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v17;
  }
  if (*((char *)a3 + 23) < 0)
  {
    sub_19C2B5238(__dst + 24, *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v18 = *a3;
    *((_QWORD *)__dst + 5) = *((_QWORD *)a3 + 2);
    *(_OWORD *)(__dst + 24) = v18;
  }
  v19 = a4[4];
  v20 = a4[5];
  v21 = a4[6];
  v22 = *a4;
  v23 = a4[1];
  v25 = a4[2];
  v24 = a4[3];
  *((_QWORD *)__dst + 20) = 0;
  *((_OWORD *)__dst + 3) = v22;
  *((_OWORD *)__dst + 4) = v23;
  *((_OWORD *)__dst + 8) = v20;
  *((_OWORD *)__dst + 9) = v21;
  *((_OWORD *)__dst + 6) = v24;
  *((_OWORD *)__dst + 7) = v19;
  *((_OWORD *)__dst + 5) = v25;
  *((_QWORD *)__dst + 21) = 0;
  *((_QWORD *)__dst + 22) = 0;
  sub_19C2E2178((_QWORD *)__dst + 20, *a5, a5[1], (a5[1] - *a5) >> 5);
  *((_QWORD *)__dst + 23) = 0;
  *((_QWORD *)__dst + 24) = 0;
  *((_QWORD *)__dst + 25) = 0;
  sub_19C2E2178((_QWORD *)__dst + 23, *a6, a6[1], (a6[1] - *a6) >> 5);
  v26 = __dst + 208;
  if (*((char *)a7 + 23) < 0)
  {
    sub_19C2B5238(v26, *(void **)a7, *((_QWORD *)a7 + 1));
  }
  else
  {
    v27 = *a7;
    *((_QWORD *)__dst + 28) = *((_QWORD *)a7 + 2);
    *(_OWORD *)v26 = v27;
  }
  *((_QWORD *)__dst + 29) = a8;
  *((_DWORD *)__dst + 60) = a9;
  *((_QWORD *)__dst + 31) = a10;
  return __dst;
}

void sub_19C307940(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void **v4;

  sub_19C2E23C0(v4);
  sub_19C2E23C0(v3);
  if (*(char *)(v1 + 47) < 0)
  {
    operator delete(*v2);
    if ((*(char *)(v1 + 23) & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if ((*(char *)(v1 + 23) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19C3079AC(char **a1, uint64_t a2)
{
  char *v2;
  char *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v8;
  unint64_t v9;
  _DWORD *v10;
  char *v11;
  uint64_t v12;
  __int128 v13;
  char *v14;
  void **v15;
  char *v17;

  v2 = *a1;
  v3 = a1[1];
  v4 = (v3 - *a1) >> 5;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59)
    sub_19C2A18E8();
  v8 = a1[2] - v2;
  if (v8 >> 4 > v5)
    v5 = v8 >> 4;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0)
    v9 = 0x7FFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  if (v9)
  {
    if (v9 >> 59)
      sub_19C2A143C();
    v10 = operator new(32 * v9);
  }
  else
  {
    v10 = 0;
  }
  v11 = (char *)&v10[8 * v4];
  v17 = (char *)&v10[8 * v9];
  if (*(char *)(a2 + 23) < 0)
  {
    sub_19C2B5238(v11, *(void **)a2, *(_QWORD *)(a2 + 8));
    v2 = *a1;
    v3 = a1[1];
    v11 = (char *)&v10[8 * v4];
  }
  else
  {
    *(_OWORD *)v11 = *(_OWORD *)a2;
    *((_QWORD *)v11 + 2) = *(_QWORD *)(a2 + 16);
  }
  v10[8 * v4 + 6] = *(_DWORD *)(a2 + 24);
  v12 = (uint64_t)&v10[8 * v4 + 8];
  if (v3 == v2)
  {
    v14 = v2;
  }
  else
  {
    do
    {
      v13 = *((_OWORD *)v3 - 2);
      *((_QWORD *)v11 - 2) = *((_QWORD *)v3 - 2);
      *((_OWORD *)v11 - 2) = v13;
      *((_QWORD *)v3 - 3) = 0;
      *((_QWORD *)v3 - 2) = 0;
      *((_QWORD *)v3 - 4) = 0;
      *((_DWORD *)v11 - 2) = *((_DWORD *)v3 - 2);
      v11 -= 32;
      v3 -= 32;
    }
    while (v3 != v2);
    v14 = *a1;
    v2 = a1[1];
  }
  *a1 = v11;
  a1[1] = (char *)v12;
  a1[2] = v17;
  if (v2 != v14)
  {
    v15 = (void **)(v2 - 32);
    do
    {
      if (*((char *)v15 + 23) < 0)
        operator delete(*v15);
      v15 -= 4;
    }
    while (v15 + 4 != (void **)v14);
    v2 = v14;
  }
  if (v2)
    operator delete(v2);
  return v12;
}

void sub_19C307B54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C308300((uint64_t)va);
  _Unwind_Resume(a1);
}

void **sub_19C307B68(void **a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = (void **)*a1;
  if (*a1)
  {
    v3 = (void **)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*((char *)v3 - 1) < 0)
          operator delete(*(v3 - 3));
        v3 -= 3;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t *sub_19C307BD8(uint64_t *a1)
{
  uint64_t v2;
  void (*v3)(uint64_t *, uint64_t *, uint64_t);

  v2 = *a1;
  if (*a1)
  {
    if ((v2 & 1) == 0)
    {
      v3 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3)
        v3(a1 + 1, a1 + 1, 2);
    }
    *a1 = 0;
  }
  return a1;
}

uint64_t *sub_19C307C28(uint64_t *a1)
{
  uint64_t v2;
  void (*v3)(uint64_t *, uint64_t *, uint64_t);

  v2 = *a1;
  if (*a1)
  {
    if ((v2 & 1) == 0)
    {
      v3 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3)
        v3(a1 + 1, a1 + 1, 2);
    }
    *a1 = 0;
  }
  return a1;
}

char *sub_19C307C78(void **a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  void **v11;
  void **v12;
  __int128 v13;
  void **v14;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_19C2A18E8();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_19C2A143C();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v9 = &v7[24 * v6];
  *(_OWORD *)v8 = *(_OWORD *)a2;
  *((_QWORD *)v8 + 2) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v10 = v8 + 24;
  v11 = (void **)*a1;
  v12 = (void **)a1[1];
  if (v12 == *a1)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
  }
  else
  {
    do
    {
      v13 = *(_OWORD *)(v12 - 3);
      *((_QWORD *)v8 - 1) = *(v12 - 1);
      *(_OWORD *)(v8 - 24) = v13;
      v8 -= 24;
      *(v12 - 2) = 0;
      *(v12 - 1) = 0;
      *(v12 - 3) = 0;
      v12 -= 3;
    }
    while (v12 != v11);
    v12 = (void **)*a1;
    v14 = (void **)a1[1];
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
    while (v14 != v12)
    {
      if (*((char *)v14 - 1) < 0)
        operator delete(*(v14 - 3));
      v14 -= 3;
    }
  }
  if (v12)
    operator delete(v12);
  return v10;
}

void ***sub_19C307DCC(void ***a1)
{
  void **v2;
  void **v3;
  void **v4;
  void *v5;

  if (!*((_BYTE *)a1 + 8))
  {
    v2 = *a1;
    v3 = (void **)**a1;
    if (v3)
    {
      v4 = (void **)v2[1];
      v5 = **a1;
      if (v4 != v3)
      {
        do
        {
          if (*((char *)v4 - 1) < 0)
            operator delete(*(v4 - 3));
          v4 -= 3;
        }
        while (v4 != v3);
        v5 = **a1;
      }
      v2[1] = v3;
      operator delete(v5);
    }
  }
  return a1;
}

uint64_t *sub_19C307E4C(uint64_t *a1)
{
  uint64_t v2;
  void (*v3)(uint64_t *, uint64_t *, uint64_t);

  v2 = *a1;
  if (*a1)
  {
    if ((v2 & 1) == 0)
    {
      v3 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3)
        v3(a1 + 1, a1 + 1, 2);
    }
    *a1 = 0;
  }
  return a1;
}

uint64_t sub_19C307E9C(uint64_t result, _WORD *a2, int a3)
{
  _QWORD *v4;
  _DWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  size_t v8;
  const void *v9;
  _QWORD *v10;

  v4 = (_QWORD *)result;
  switch(a3)
  {
    case 0:
      v5 = *(_DWORD **)result;
      v6 = (_QWORD *)operator new();
      v7 = v6;
      v8 = *((_QWORD *)v5 + 2);
      v6[2] = v8;
      *v6 = 0;
      if (v8 >= 0x11)
      {
        v6 = (_QWORD *)operator new[]();
        *v7 = v6;
        v9 = *(const void **)v5;
        v8 = v7[2];
      }
      else
      {
        v9 = v5;
      }
      result = (uint64_t)memcpy(v6, v9, v8);
      *((_DWORD *)v7 + 6) = v5[6];
      *(_QWORD *)a2 = v7;
      break;
    case 1:
      *(_QWORD *)a2 = *(_QWORD *)result;
      *(_QWORD *)result = 0;
      break;
    case 2:
      v10 = *(_QWORD **)a2;
      if (*(_QWORD *)a2)
      {
        if (v10[2] >= 0x11uLL && *v10)
          MEMORY[0x1A1AD3538](*v10, 0x1000C8077774924);
        result = MEMORY[0x1A1AD355C](v10, 0x1012C405C87E9CELL);
      }
      goto LABEL_13;
    case 3:
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == ((unint64_t)"N5boost9algorithm6detail13token_finderFINS1_10is_any_ofFIcEEEE" & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)((unint64_t)"N5boost9algorithm6detail13token_finderFINS1_10is_any_ofFIcEEEE" & 0x7FFFFFFFFFFFFFFFLL)), !(_DWORD)result))
      {
        *(_QWORD *)a2 = *v4;
      }
      else
      {
LABEL_13:
        *(_QWORD *)a2 = 0;
      }
      break;
    default:
      *(_QWORD *)a2 = &unk_1E3D329C8;
      a2[4] = 0;
      break;
  }
  return result;
}

void sub_19C308008(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD355C](v1, 0x1012C405C87E9CELL);
  _Unwind_Resume(a1);
}

char *sub_19C30802C(const void ***a1, char *a2, char *a3)
{
  const void **v5;
  size_t v6;
  _QWORD *v7;
  const void *v8;
  int v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  int v15;
  int v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  int v22;
  unint64_t v23;
  char *v24;
  int v25;
  char *v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  int v31;
  char *v32;
  int v33;
  char *v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  int v39;
  _QWORD v41[2];
  unint64_t v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v5 = *a1;
  v6 = (size_t)(*a1)[2];
  v42 = v6;
  v41[0] = 0;
  if (v6 >= 0x11)
  {
    v7 = (_QWORD *)operator new[]();
    v41[0] = v7;
    v8 = *v5;
  }
  else
  {
    v7 = v41;
    v8 = v5;
  }
  memcpy(v7, v8, v6);
  if (a2 == a3)
  {
LABEL_28:
    a2 = a3;
    if (v42 < 0x11)
      goto LABEL_31;
    goto LABEL_29;
  }
  if (v42 > 0x10)
  {
    while (1)
    {
      v16 = *a2;
      v17 = (char *)v41[0];
      v18 = v42;
      do
      {
        v19 = v18 >> 1;
        v20 = &v17[v18 >> 1];
        v22 = *v20;
        v21 = v20 + 1;
        v18 += ~(v18 >> 1);
        if (v22 < v16)
          v17 = v21;
        else
          v18 = v19;
      }
      while (v18);
      if (v17 != (char *)(v41[0] + v42) && *v17 <= v16)
        break;
      if (++a2 == a3)
        goto LABEL_28;
    }
  }
  else
  {
    if (!v42)
      return a3;
    while (1)
    {
      v9 = *a2;
      v10 = v41;
      v11 = v42;
      do
      {
        v12 = v11 >> 1;
        v13 = (char *)v10 + (v11 >> 1);
        v15 = *v13;
        v14 = v13 + 1;
        v11 += ~(v11 >> 1);
        if (v15 < v9)
          v10 = v14;
        else
          v11 = v12;
      }
      while (v11);
      if (v10 != (_QWORD *)((char *)v41 + v42) && *(char *)v10 <= v9)
        break;
      if (++a2 == a3)
        goto LABEL_28;
    }
  }
  if (v42 >= 0x11)
  {
LABEL_29:
    if (v41[0])
      MEMORY[0x1A1AD3538](v41[0], 0x1000C8077774924);
  }
LABEL_31:
  if (a2 == a3)
    return a3;
  if (*((_DWORD *)v5 + 6))
    return a2;
  v23 = (unint64_t)v5[2];
  if (v23 > 0x10)
  {
    v32 = a2;
    while (1)
    {
      v33 = *v32;
      v34 = (char *)*v5;
      v35 = (unint64_t)v5[2];
      do
      {
        v36 = v35 >> 1;
        v37 = &v34[v35 >> 1];
        v39 = *v37;
        v38 = v37 + 1;
        v35 += ~(v35 >> 1);
        if (v39 < v33)
          v34 = v38;
        else
          v35 = v36;
      }
      while (v35);
      if (v34 == (char *)*v5 + v23 || *v34 > v33)
        break;
      if (++v32 == a3)
        return a2;
    }
  }
  else
  {
    if (!v23)
      return a2;
    v24 = a2;
    while (1)
    {
      v25 = *v24;
      v26 = (char *)v5;
      v27 = (unint64_t)v5[2];
      do
      {
        v28 = v27 >> 1;
        v29 = &v26[v27 >> 1];
        v31 = *v29;
        v30 = v29 + 1;
        v27 += ~(v27 >> 1);
        if (v31 < v25)
          v26 = v30;
        else
          v27 = v28;
      }
      while (v27);
      if (v26 == (char *)v5 + v23 || *v26 > v25)
        break;
      if (++v24 == a3)
        return a2;
    }
  }
  return a2;
}

uint64_t sub_19C308300(uint64_t a1)
{
  void **v2;
  void **v3;
  void **v5;

  v3 = *(void ***)(a1 + 8);
  v2 = *(void ***)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      v5 = v2 - 4;
      *(_QWORD *)(a1 + 16) = v2 - 4;
      if (*((char *)v2 - 9) < 0)
      {
        operator delete(*v5);
        v5 = *(void ***)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != v3);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

BOOL sub_19C308364(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _BOOL8 v7;
  unint64_t v9;
  uint64_t v10;
  __int128 v11;
  int v12;
  char *v13;
  __int128 v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  __int128 v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  std::locale::id *v28;
  char *v29;
  char *v30;
  int v31;
  char *v32;
  uint64_t v33;
  int v34;
  char *v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char v42;
  const std::locale::facet *v43;
  int v44;
  char v45;
  const std::locale::facet *v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  char *v50;
  int v51;
  char *v52;
  uint64_t v53;
  int v54;
  char *v55;
  uint64_t v56;
  BOOL v57;
  char *v58;
  char *v59;
  char *v60;
  char *v61;
  char *v62;
  int v63;
  char *v64;
  uint64_t v65;
  int v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char v72;
  const std::locale::facet *v73;
  int v74;
  char v75;
  const std::locale::facet *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char v81;
  const std::locale::facet *v82;
  int v83;
  char v84;
  const std::locale::facet *v85;
  uint64_t v86;
  char *v87;
  char *v88;
  char *v89;
  char *v90;
  char *v91;
  int v92;
  char *v93;
  uint64_t v94;
  int v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  char *v101;
  char v102;
  const std::locale::facet *v103;
  int v104;
  char v105;
  const std::locale::facet *v106;
  uint64_t v107;
  char *v109;
  char *v110;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  char *v116;
  unint64_t v117;
  uint64_t v118;
  char *v119;
  unint64_t v120;
  uint64_t v121;
  char *v122;
  void *__p[2];
  uint64_t v124;
  int v125;
  std::locale v126[2];
  uint64_t v127;
  int v128;
  char *v129;
  char *v130;
  char *v131;

  v3 = *(_QWORD *)(a1 + 56);
  v4 = *(_QWORD *)(a1 + 64) - v3;
  v5 = v4 >> 5;
  v6 = (a3 - a2) >> 5;
  if (v6 + (v4 >> 5) < 8)
    return 0;
  v129 = 0;
  v130 = 0;
  v131 = 0;
  sub_19C2E229C(&v129, a2, a3, v6);
  if ((unint64_t)v4 >= 0x40)
  {
    v9 = (unint64_t)v130;
    v10 = 32 * v5 - 32 * (v5 != 0);
    do
    {
      if (v9 < (unint64_t)v131)
      {
        if (*(char *)(v3 + 23) < 0)
        {
          sub_19C2B5238((_BYTE *)v9, *(void **)v3, *(_QWORD *)(v3 + 8));
        }
        else
        {
          v11 = *(_OWORD *)v3;
          *(_QWORD *)(v9 + 16) = *(_QWORD *)(v3 + 16);
          *(_OWORD *)v9 = v11;
        }
        *(_DWORD *)(v9 + 24) = *(_DWORD *)(v3 + 24);
        v9 += 32;
      }
      else
      {
        v9 = sub_19C3079AC(&v129, v3);
      }
      v130 = (char *)v9;
      v3 += 32;
      v10 -= 32;
    }
    while (v10);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    sub_19C2B5238(__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a1;
    v124 = *(_QWORD *)(a1 + 16);
  }
  v125 = 0;
  sub_19C297950(v126, (const UInt8 *)__p);
  v12 = v125;
  v128 = v125;
  v13 = v130;
  if (v130 >= v131)
  {
    v15 = v129;
    v16 = (v130 - v129) >> 5;
    v17 = v16 + 1;
    if ((unint64_t)(v16 + 1) >> 59)
      sub_19C2A18E8();
    v18 = v131 - v129;
    if ((v131 - v129) >> 4 > v17)
      v17 = v18 >> 4;
    if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFE0)
      v19 = 0x7FFFFFFFFFFFFFFLL;
    else
      v19 = v17;
    if (v19 >> 59)
      sub_19C2A143C();
    v20 = (char *)operator new(32 * v19);
    v21 = &v20[32 * v16];
    *(_OWORD *)v21 = *(_OWORD *)&v126[0].__locale_;
    *((_QWORD *)v21 + 2) = v127;
    v126[1].__locale_ = 0;
    v127 = 0;
    v126[0].__locale_ = 0;
    *((_DWORD *)v21 + 6) = v12;
    v22 = v21 + 32;
    if (v13 == v15)
    {
      v129 = &v20[32 * v16];
      v130 = v21 + 32;
      v131 = &v20[32 * v19];
    }
    else
    {
      do
      {
        v23 = *((_OWORD *)v13 - 2);
        *((_QWORD *)v21 - 2) = *((_QWORD *)v13 - 2);
        *((_OWORD *)v21 - 2) = v23;
        *((_QWORD *)v13 - 3) = 0;
        *((_QWORD *)v13 - 2) = 0;
        *((_QWORD *)v13 - 4) = 0;
        *((_DWORD *)v21 - 2) = *((_DWORD *)v13 - 2);
        v21 -= 32;
        v13 -= 32;
      }
      while (v13 != v15);
      v13 = v129;
      v24 = v130;
      v129 = v21;
      v130 = v22;
      v131 = &v20[32 * v19];
      while (v24 != v13)
      {
        if (*(v24 - 9) < 0)
          operator delete(*((void **)v24 - 4));
        v24 -= 32;
      }
    }
    if (v13)
      operator delete(v13);
    v130 = v22;
    if (SHIBYTE(v127) < 0)
    {
      operator delete(v126[0].__locale_);
      if ((SHIBYTE(v124) & 0x80000000) == 0)
        goto LABEL_37;
    }
    else if ((SHIBYTE(v124) & 0x80000000) == 0)
    {
      goto LABEL_37;
    }
    goto LABEL_17;
  }
  v14 = *(_OWORD *)&v126[0].__locale_;
  *((_QWORD *)v130 + 2) = v127;
  *(_OWORD *)v13 = v14;
  v126[1].__locale_ = 0;
  v127 = 0;
  v126[0].__locale_ = 0;
  *((_DWORD *)v13 + 6) = v128;
  v130 = v13 + 32;
  if (SHIBYTE(v124) < 0)
LABEL_17:
    operator delete(__p[0]);
LABEL_37:
  v25 = v129;
  v26 = (v130 - v129) >> 5;
  v118 = v26 - 4;
  if (v26 == 4)
    __assert_rtn("isPredictionResultingInLoop", "ToucanLanguageModelSession.cpp", 409, "index > 0");
  v117 = v26 - 8;
  if (v26 == 8)
  {
    v7 = 0;
    if (v129)
      goto LABEL_151;
    return v7;
  }
  v113 = v26 - 2;
  v114 = v26 - 3;
  v112 = v26 - 1;
  v27 = 1;
  v28 = (std::locale::id *)MEMORY[0x1E0DE4A90];
  do
  {
    v121 = v27;
    v29 = &v129[32 * v27];
    v30 = &v129[32 * v118];
    MEMORY[0x1A1AD3478](__p);
    std::locale::locale(v126, (const std::locale *)__p);
    v31 = v29[23];
    if (v31 >= 0)
      v32 = v29;
    else
      v32 = *(char **)v29;
    if (v31 >= 0)
      v33 = v29[23];
    else
      v33 = *((_QWORD *)v29 + 1);
    v34 = v30[23];
    if (v34 >= 0)
      v35 = v30;
    else
      v35 = *(char **)v30;
    if (v34 >= 0)
      v36 = v30[23];
    else
      v36 = *((_QWORD *)v30 + 1);
    if (v33)
      v37 = v36 == 0;
    else
      v37 = 1;
    v119 = v32;
    if (v37)
    {
      v41 = v35;
LABEL_58:
      v7 = v32 == &v119[v33] && v41 == &v35[v36];
    }
    else
    {
      v39 = v36 - 1;
      v40 = v33 - 1;
      v41 = v35;
      while (1)
      {
        v42 = *v32;
        v43 = std::locale::use_facet(v126, v28);
        v44 = ((uint64_t (*)(const std::locale::facet *, _QWORD))v43->__vftable[1].~facet)(v43, v42);
        v45 = *v41;
        v46 = std::locale::use_facet(v126, v28);
        if (v44 != ((unsigned int (*)(const std::locale::facet *, _QWORD))v46->__vftable[1].~facet)(v46, v45))break;
        ++v32;
        ++v41;
        if (v40)
        {
          v47 = v39--;
          --v40;
          if (v47)
            continue;
        }
        goto LABEL_58;
      }
      v7 = 0;
    }
    std::locale::~locale(v126);
    std::locale::~locale((std::locale *)__p);
    v48 = v121 + 1;
    if (v7)
    {
      v120 = v121 + 1;
      v49 = &v129[32 * v48];
      v50 = &v129[32 * v114];
      MEMORY[0x1A1AD3478](__p);
      std::locale::locale(v126, (const std::locale *)__p);
      v51 = v49[23];
      if (v51 >= 0)
        v52 = v49;
      else
        v52 = *(char **)v49;
      if (v51 >= 0)
        v53 = v49[23];
      else
        v53 = *((_QWORD *)v49 + 1);
      v54 = v50[23];
      if (v54 >= 0)
        v55 = v50;
      else
        v55 = *(char **)v50;
      if (v54 >= 0)
        v56 = v50[23];
      else
        v56 = *((_QWORD *)v50 + 1);
      if (v53)
        v57 = v56 == 0;
      else
        v57 = 1;
      v115 = v55;
      if (!v57)
      {
        v78 = v56 - 1;
        v79 = v53 - 1;
        v80 = v52;
        while (1)
        {
          v81 = *v80;
          v82 = std::locale::use_facet(v126, v28);
          v83 = ((uint64_t (*)(const std::locale::facet *, _QWORD))v82->__vftable[1].~facet)(v82, v81);
          v84 = *v55;
          v85 = std::locale::use_facet(v126, v28);
          if (v83 != ((unsigned int (*)(const std::locale::facet *, _QWORD))v85->__vftable[1].~facet)(v85, v84))goto LABEL_113;
          ++v80;
          ++v55;
          if (v79)
          {
            v86 = v78--;
            --v79;
            if (v86)
              continue;
          }
          goto LABEL_88;
        }
      }
      v80 = v52;
LABEL_88:
      std::locale::~locale(v126);
      std::locale::~locale((std::locale *)__p);
      v7 = 0;
      if (v80 != &v52[v53])
        goto LABEL_145;
      v48 = v121 + 1;
      if (v55 == &v115[v56])
      {
        v58 = &v129[32 * v121];
        v59 = &v129[32 * v113];
        MEMORY[0x1A1AD3478](__p);
        std::locale::locale(v126, (const std::locale *)__p);
        v62 = (char *)*((_QWORD *)v58 + 8);
        v61 = v58 + 64;
        v60 = v62;
        v63 = v61[23];
        if (v63 >= 0)
          v64 = v61;
        else
          v64 = v60;
        if (v63 >= 0)
          v65 = v61[23];
        else
          v65 = *((_QWORD *)v61 + 1);
        v66 = v59[23];
        if (v66 >= 0)
          v67 = v59;
        else
          v67 = *(char **)v59;
        if (v66 >= 0)
          v68 = v59[23];
        else
          v68 = *((_QWORD *)v59 + 1);
        v116 = v67;
        if (v65 && v68)
        {
          v69 = v68 - 1;
          v70 = v65 - 1;
          v71 = v64;
          while (1)
          {
            v72 = *v71;
            v73 = std::locale::use_facet(v126, v28);
            v74 = ((uint64_t (*)(const std::locale::facet *, _QWORD))v73->__vftable[1].~facet)(v73, v72);
            v75 = *v67;
            v76 = std::locale::use_facet(v126, v28);
            if (v74 != ((unsigned int (*)(const std::locale::facet *, _QWORD))v76->__vftable[1].~facet)(v76, v75))break;
            ++v71;
            ++v67;
            if (v70)
            {
              v77 = v69--;
              --v70;
              if (v77)
                continue;
            }
            goto LABEL_115;
          }
LABEL_113:
          std::locale::~locale(v126);
          std::locale::~locale((std::locale *)__p);
          v7 = 0;
LABEL_145:
          v48 = v120;
          goto LABEL_146;
        }
        v71 = v64;
LABEL_115:
        std::locale::~locale(v126);
        std::locale::~locale((std::locale *)__p);
        v7 = 0;
        if (v71 != &v64[v65])
          goto LABEL_145;
        v48 = v121 + 1;
        if (v67 == &v116[v68])
        {
          v87 = &v129[32 * v121];
          v88 = &v129[32 * v112];
          MEMORY[0x1A1AD3478](__p);
          std::locale::locale(v126, (const std::locale *)__p);
          v91 = (char *)*((_QWORD *)v87 + 12);
          v90 = v87 + 96;
          v89 = v91;
          v92 = v90[23];
          if (v92 >= 0)
            v93 = v90;
          else
            v93 = v89;
          if (v92 >= 0)
            v94 = v90[23];
          else
            v94 = *((_QWORD *)v90 + 1);
          v95 = v88[23];
          if (v95 >= 0)
            v96 = v88;
          else
            v96 = *(char **)v88;
          if (v95 >= 0)
            v97 = v88[23];
          else
            v97 = *((_QWORD *)v88 + 1);
          v122 = v93;
          if (v94 && v97)
          {
            v98 = v97 - 1;
            v99 = v94 - 1;
            v100 = v96;
            v101 = v93;
            while (1)
            {
              v102 = *v101;
              v103 = std::locale::use_facet(v126, v28);
              v104 = ((uint64_t (*)(const std::locale::facet *, _QWORD))v103->__vftable[1].~facet)(v103, v102);
              v105 = *v100;
              v106 = std::locale::use_facet(v126, v28);
              if (v104 != ((unsigned int (*)(const std::locale::facet *, _QWORD))v106->__vftable[1].~facet)(v106, v105))break;
              ++v101;
              ++v100;
              if (v99)
              {
                v107 = v98--;
                --v99;
                if (v107)
                  continue;
              }
              goto LABEL_137;
            }
            v7 = 0;
          }
          else
          {
            v101 = v93;
            v100 = v96;
LABEL_137:
            v7 = v101 == &v122[v94] && v100 == &v96[v97];
          }
          std::locale::~locale(v126);
          std::locale::~locale((std::locale *)__p);
          goto LABEL_145;
        }
      }
    }
LABEL_146:
    if (v7)
      break;
    v27 = v48;
  }
  while (v48 <= v117);
  v25 = v129;
  if (!v129)
    return v7;
LABEL_151:
  v109 = v130;
  v110 = v25;
  if (v130 != v25)
  {
    do
    {
      if (*(v109 - 9) < 0)
        operator delete(*((void **)v109 - 4));
      v109 -= 32;
    }
    while (v109 != v25);
    v110 = v129;
  }
  v130 = v25;
  operator delete(v110);
  return v7;
}

void sub_19C308B70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,std::locale a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;

  sub_19C2E23C0((void **)(v29 - 112));
  _Unwind_Resume(a1);
}

void **sub_19C308BF4(void **a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = (void **)*a1;
  if (*a1)
  {
    v3 = (void **)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        sub_19C2E25C8(v3 - 23);
        if (*((char *)v3 - 193) < 0)
          operator delete(*(v3 - 27));
        v3 -= 27;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_19C308C6C(char **a1, _BYTE *a2, char *__src, char *a4, uint64_t a5)
{
  uint64_t v5;
  char *v7;
  char **v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  int64_t v25;
  unint64_t v26;
  char *v27;
  size_t v28;
  uint64_t v29;
  int *v30;
  char *v31;
  unint64_t v32;
  char *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  _OWORD *v40;
  __int128 *v41;
  uint64_t v42;
  __int128 v43;
  int v44;
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  __int128 *v51;
  _OWORD *v52;
  uint64_t v53;
  __int128 v54;
  int v55;
  char *v56;
  unint64_t v57;
  uint64_t v58;
  __int128 *v59;
  _OWORD *v60;
  uint64_t v61;
  __int128 v62;
  int v63;
  char *v64;
  size_t v65;
  unint64_t v67;

  v5 = a5 - 1;
  if (a5 < 1)
    return;
  v7 = __src;
  v9 = a1;
  v11 = (unint64_t)*a1;
  v10 = (unint64_t)a1[1];
  v12 = a2 - *a1;
  v13 = v12 >> 2;
  v14 = &(*a1)[v12 & 0xFFFFFFFFFFFFFFFCLL];
  v15 = a1[2];
  if (a5 > (uint64_t)&v15[-v10] >> 2)
  {
    v16 = a5 + ((uint64_t)(v10 - v11) >> 2);
    if (v16 >> 62)
      sub_19C2A18E8();
    v17 = (uint64_t)&v15[-v11];
    if (v17 >> 1 > v16)
      v16 = v17 >> 1;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL)
      v18 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v18 = v16;
    if (v18)
    {
      if (v18 >> 62)
        sub_19C2A143C();
      v19 = (unint64_t)&(*a1)[v12 & 0xFFFFFFFFFFFFFFFCLL];
      v20 = v18;
      v21 = operator new(4 * v18);
      v18 = v20;
      v14 = (char *)v19;
      v13 = v12 >> 2;
      v9 = a1;
    }
    else
    {
      v21 = 0;
    }
    v46 = &v21[4 * v13];
    v47 = &v46[4 * a5];
    v48 = v46;
    if ((v5 & 0x3FFFFFFFFFFFFFFFuLL) >= 7)
    {
      v48 = &v21[4 * v13];
      if ((unint64_t)(&v21[v12 & 0xFFFFFFFFFFFFFFFCLL] - v7) >= 0x20)
      {
        v49 = (v5 & 0x3FFFFFFFFFFFFFFFLL) + 1;
        v50 = 4 * (v49 & 0x7FFFFFFFFFFFFFF8);
        v48 = &v46[v50];
        v51 = (__int128 *)(v7 + 16);
        v52 = &v21[4 * v13 + 16];
        v53 = v49 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v54 = *v51;
          *(v52 - 1) = *(v51 - 1);
          *v52 = v54;
          v51 += 2;
          v52 += 2;
          v53 -= 8;
        }
        while (v53);
        if (v49 == (v49 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_42:
          if ((_BYTE *)v11 != a2)
          {
            if ((unint64_t)(v12 - 4) >= 0x3C)
            {
              v56 = v14;
              if ((v12 & 0xFFFFFFFFFFFFFFFCLL) + v11 - (unint64_t)&v21[v12 & 0xFFFFFFFFFFFFFFFCLL] >= 0x20)
              {
                v57 = ((unint64_t)(v12 - 4) >> 2) + 1;
                v56 = &v14[-4 * (v57 & 0x7FFFFFFFFFFFFFF8)];
                v58 = 4 * v13 - 16;
                v59 = (__int128 *)(v11 + v58);
                v60 = &v21[v58];
                v61 = v57 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  v62 = *v59;
                  *(v60 - 1) = *(v59 - 1);
                  *v60 = v62;
                  v59 -= 2;
                  v60 -= 2;
                  v61 -= 8;
                }
                while (v61);
                v46 -= 4 * (v57 & 0x7FFFFFFFFFFFFFF8);
                if (v57 == (v57 & 0x7FFFFFFFFFFFFFF8))
                  goto LABEL_50;
              }
            }
            else
            {
              v56 = v14;
            }
            do
            {
              v63 = *((_DWORD *)v56 - 1);
              v56 -= 4;
              *((_DWORD *)v46 - 1) = v63;
              v46 -= 4;
            }
            while (v56 != (char *)v11);
          }
LABEL_50:
          v64 = &v21[4 * v18];
          v65 = v10 - (_QWORD)v14;
          if (v65)
            memmove(v47, v14, v65);
          *v9 = v46;
          v9[1] = &v47[v65];
          v9[2] = v64;
          if (v11)
            operator delete((void *)v11);
          return;
        }
        v7 += v50;
      }
    }
    do
    {
      v55 = *(_DWORD *)v7;
      v7 += 4;
      *(_DWORD *)v48 = v55;
      v48 += 4;
    }
    while (v48 != v47);
    goto LABEL_42;
  }
  v22 = v10 - (_QWORD)v14;
  v23 = (uint64_t)(v10 - (_QWORD)v14) >> 2;
  if (v23 >= a5)
  {
    v24 = &__src[4 * a5];
    v26 = (unint64_t)a1[1];
LABEL_18:
    v27 = &v14[4 * a5];
    v28 = v26 - (_QWORD)v27;
    v29 = (uint64_t)(v26 - (_QWORD)v27) >> 2;
    v30 = (int *)(v26 - 4 * a5);
    v31 = (char *)v26;
    if ((unint64_t)v30 < v10)
    {
      v32 = (v12 & 0xFFFFFFFFFFFFFFFCLL) + v28;
      v33 = (char *)(v32 + v11);
      v34 = v32 + v11 + 4;
      if (v10 > v34)
        v34 = v10;
      v35 = v34 + ~v11 - v32;
      v36 = v26 - (_QWORD)v33;
      v37 = v35 >= 0x2C && v36 > 0x1F;
      v31 = (char *)v26;
      if (!v37)
        goto LABEL_59;
      v38 = (v35 >> 2) + 1;
      v39 = 4 * (v38 & 0x7FFFFFFFFFFFFFF8);
      v30 = (int *)((char *)v30 + v39);
      v40 = (_OWORD *)(v26 + 16);
      v41 = (__int128 *)(4 * v29 + 4 * v13 + v11 + 16);
      v42 = v38 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v43 = *v41;
        *(v40 - 1) = *(v41 - 1);
        *v40 = v43;
        v40 += 2;
        v41 += 2;
        v42 -= 8;
      }
      while (v42);
      v31 = (char *)(v26 + v39);
      if (v38 != (v38 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_59:
        do
        {
          v44 = *v30++;
          *(_DWORD *)v31 = v44;
          v31 += 4;
        }
        while ((unint64_t)v30 < v10);
      }
    }
    v9[1] = v31;
    if ((char *)v26 != v27)
    {
      v45 = v14;
      memmove((void *)(v26 - 4 * v29), v14, v28);
      v14 = v45;
    }
    if (v24 != v7)
      memmove(v14, v7, v24 - v7);
    return;
  }
  v24 = &__src[4 * v23];
  v25 = a4 - v24;
  if (a4 != v24)
  {
    v67 = (unint64_t)&(*a1)[v12 & 0xFFFFFFFFFFFFFFFCLL];
    memmove(a1[1], &__src[4 * v23], a4 - v24);
    v13 = v12 >> 2;
    v14 = (char *)v67;
  }
  v26 = v10 + v25;
  v9[1] = (char *)(v10 + v25);
  if (v22 >= 1)
    goto LABEL_18;
}

void sub_19C309028()
{
  JUMPOUT(0x1A1AD355CLL);
}

__n128 sub_19C30903C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E3D30C10;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_19C30907C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E3D30C10;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_19C3090A4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  std::string *v4;
  __int128 v5;
  uint64_t v6;
  int v7;
  const std::string::value_type *v8;
  std::string::size_type v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::string *v16;

  v3 = *a2;
  v4 = (std::string *)operator new();
  sub_19C29769C((char *)v4, (__int128 *)v3);
  v4[10].__r_.__value_.__r.__words[2] = *(_QWORD *)(v3 + 256);
  if (*(char *)(v3 + 287) < 0)
  {
    sub_19C2B5238(&v4[11], *(void **)(v3 + 264), *(_QWORD *)(v3 + 272));
  }
  else
  {
    v5 = *(_OWORD *)(v3 + 264);
    v4[11].__r_.__value_.__r.__words[2] = *(_QWORD *)(v3 + 280);
    *(_OWORD *)&v4[11].__r_.__value_.__l.__data_ = v5;
  }
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(char *)(v6 + 23);
  if (v7 >= 0)
    v8 = *(const std::string::value_type **)(a1 + 8);
  else
    v8 = *(const std::string::value_type **)v6;
  if (v7 >= 0)
    v9 = *(unsigned __int8 *)(v6 + 23);
  else
    v9 = *(_QWORD *)(v6 + 8);
  std::string::append(v4 + 11, v8, v9);
  v10 = *(_QWORD *)(a1 + 8);
  if (*(char *)(v10 + 23) < 0)
  {
    **(_BYTE **)v10 = 0;
    *(_QWORD *)(v10 + 8) = 0;
  }
  else
  {
    *(_BYTE *)v10 = 0;
    *(_BYTE *)(v10 + 23) = 0;
  }
  v16 = v4;
  v11 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24);
  if (!v11)
    sub_19C2CCC60();
  v12 = (*(uint64_t (**)(uint64_t, std::string **))(*(_QWORD *)v11 + 48))(v11, &v16);
  v13 = (uint64_t)v16;
  v16 = 0;
  if (v13)
  {
    if (*(char *)(v13 + 287) < 0)
      operator delete(*(void **)(v13 + 264));
    v14 = sub_19C296378(v13);
    MEMORY[0x1A1AD355C](v14, 0x1032C40D90104AELL);
  }
  return v12;
}

void sub_19C3091E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_19C296378(v1);
  MEMORY[0x1A1AD355C](v1, 0x1032C40D90104AELL);
  _Unwind_Resume(a1);
}

void sub_19C309234(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  language_modeling::v1::InlineCompletion::~InlineCompletion((language_modeling::v1::InlineCompletion *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19C309248(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK17language_modeling2v126ToucanLanguageModelSession26enumerateInlineCompletionsERKNS0_17Linguisti"
                     "cContextERKNSt3__16vectorINS0_14CompletionStemENS5_9allocatorIS7_EEEERKNS5_8functionIFbRKNS0_16Inli"
                     "neCompletionEEEEPK14__CFDictionaryRKNSD_IFbvEEEE3$_0"
    || ((v3 & (unint64_t)"ZNK17language_modeling2v126ToucanLanguageModelSession26enumerateInlineCompletionsERKNS0_"
                                "17LinguisticContextERKNSt3__16vectorINS0_14CompletionStemENS5_9allocatorIS7_EEEERKNS5_8f"
                                "unctionIFbRKNS0_16InlineCompletionEEEEPK14__CFDictionaryRKNSD_IFbvEEEE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZNK17language_modeling2v126ToucanLanguageModelSession26enumerateInlineCompletionsERKNS0_17LinguisticContextERKNSt3__16vectorINS0_14CompletionStemENS5_9allocatorIS7_EEEERKNS5_8functionIFbRKNS0_16InlineCompletionEEEEPK14__CFDictionaryRKNSD_IFbvEEEE3$_0")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK17language_modeling2v126ToucanLanguageModelSession26enumerateInlineCompletionsERKNS0_17LinguisticContextERKNSt3__16vectorINS0_14CompletionStemENS5_9allocatorIS7_EEEERKNS5_8functionIFbRKNS0_16InlineCompletionEEEEPK14__CFDictionaryRKNSD_IFbvEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *sub_19C30929C()
{
  return &unk_1E3D30120;
}

void sub_19C3092A8(_QWORD *a1, _QWORD *a2, uint64_t *a3, uint64_t **a4, unint64_t a5, unint64_t a6)
{
  void **v11;
  __int128 **v12;
  __int128 **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t **v24;
  std::string *p_p;
  std::string::size_type size;
  unint64_t v27;
  int8x8_t v28;
  unint64_t v29;
  uint8x8_t v30;
  unint64_t v31;
  uint64_t **v32;
  uint64_t *v33;
  std::string::size_type v34;
  std::string *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *i;
  std::string *p_s1;
  void **v47;
  void **v48;
  uint64_t v49;
  std::string::size_type *v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  std::string::size_type v54;
  uint64_t v55;
  uint64_t v56;
  __int128 *v57;
  uint64_t v58;
  uint64_t *v59;
  std::__shared_weak_count *v60;
  uint64_t v61;
  unint64_t *p_shared_owners;
  unint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t *v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v70;
  std::string::size_type v71;
  std::string::size_type v72;
  int v73;
  const UInt8 *v74;
  CFIndex v75;
  const __CFString *v76;
  const UInt8 *v77;
  CFIndex v78;
  const __CFString *v79;
  CFComparisonResult v80;
  double v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  std::string::size_type v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  uint64_t v89;
  const __CFString *v90;
  CFComparisonResult v91;
  CFComparisonResult v92;
  unint64_t *v93;
  unint64_t v94;
  std::string *v95;
  char v96;
  __int128 v97;
  int v98;
  int v99;
  size_t v100;
  int v101;
  int v102;
  int v103;
  std::string *v104;
  size_t v105;
  __int128 v106;
  size_t v107;
  size_t v108;
  int v109;
  std::string *v110;
  std::string::size_type v111;
  CFStringRef v112;
  int v113;
  const UInt8 *v114;
  CFIndex v115;
  const __CFString *v116;
  CFIndex Length;
  uint64_t v118;
  std::string::size_type v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  const __CFLocale *v123;
  CFComparisonResult v124;
  CFComparisonResult v125;
  unint64_t *v126;
  unint64_t v127;
  int v128;
  std::string *v129;
  std::string::size_type v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  __int128 v135;
  std::string::size_type v136;
  std::string::size_type v137;
  uint64_t v138;
  std::string::size_type v139;
  void *v140;
  std::string::size_type v141;
  std::string::size_type v142;
  void *v143;
  std::string::size_type v144;
  std::string::size_type v145;
  void *v146;
  unint64_t *v147;
  unint64_t v148;
  uint64_t v149;
  _QWORD *v150;
  __int128 *v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t *v154;
  char *v155;
  uint64_t *v156;
  uint64_t *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t *v160;
  unint64_t v161;
  uint64_t v162;
  char *v163;
  char *v164;
  char *v165;
  uint64_t v166;
  char *v167;
  unint64_t v168;
  uint8x8_t v169;
  unint64_t v170;
  _QWORD *v171;
  _QWORD *v172;
  unint64_t v173;
  uint64_t v174;
  char *v175;
  uint64_t v176;
  uint64_t j;
  void **v178;
  char *v179;
  uint64_t v180;
  void **v181;
  std::string *v182;
  std::string::size_type v183;
  std::string *v184;
  std::string::size_type v185;
  unint64_t v186;
  int8x8_t v187;
  unint64_t v188;
  uint8x8_t v189;
  unint64_t v190;
  uint64_t **v191;
  uint64_t *v192;
  std::string::size_type v193;
  std::string *v194;
  uint64_t v195;
  uint64_t *v196;
  unint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  std::string::size_type v201;
  int v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  std::string::size_type v207;
  int v208;
  char *v209;
  uint64_t v210;
  std::string *v211;
  std::string::size_type v212;
  unint64_t v213;
  int64_t v214;
  uint64_t v215;
  unint64_t v216;
  uint64_t v217;
  unint64_t v218;
  char *v219;
  char *v220;
  uint64_t v221;
  char *v222;
  char *v223;
  char *v224;
  char *v225;
  uint64_t v226;
  char *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  unint64_t v231;
  unint64_t v232;
  unint64_t v233;
  uint64_t v234;
  char *v235;
  char *v236;
  uint64_t v237;
  __int128 v238;
  __int128 v239;
  _QWORD *v240;
  void *v241;
  std::string::size_type v242;
  _QWORD *v243;
  void *v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  _QWORD *v248;
  void **v249;
  void *v250;
  void **v251;
  __int128 **v252;
  __int128 **v253;
  void *v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t *v258;
  uint64_t *v259;
  void *v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  void *exception;
  void *v266;
  void *v267;
  void *v268;
  unint64_t v269;
  unint64_t v270;
  unint64_t v271;
  unint64_t v272;
  std::__shared_weak_count *v273;
  unint64_t v274;
  uint64_t **v275;
  uint64_t *v276;
  _QWORD *v277;
  uint64_t *v278;
  uint64_t v280;
  void *v281;
  __int128 **v282;
  unint64_t v283;
  void *v284;
  uint64_t *v285;
  void *v286;
  std::string v287;
  std::string cf;
  CFTypeRef v289;
  void **v290;
  uint64_t v291;
  std::string v292;
  std::string v293;
  std::string __s1;
  unsigned __int8 v295;
  std::string __dst;
  std::string v297;
  std::string v298;
  std::string __p;
  std::string v300;
  __int128 v301;
  __int128 v302;
  int v303;
  double v304;
  uint64_t v305;
  int v306;
  __int128 v307;
  unint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  CFRange v312;

  v11 = (void **)a1;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v311 = *MEMORY[0x1E0C80C00];
  v284 = 0;
  v285 = 0;
  v286 = 0;
  v282 = 0;
  v283 = 0;
  v281 = 0;
  v276 = a3;
  v15 = *a3;
  v16 = *(_QWORD *)(*a3 + 24);
  v277 = a2;
  if (*(_QWORD *)(*a3 + 32) - v16 != 32)
    goto LABEL_138;
  if (*(_DWORD *)(v16 + 24) != 1 || (char *)a4[1] - (char *)*a4 != 8)
  {
    v12 = 0;
    v13 = 0;
    v14 = 0;
    goto LABEL_138;
  }
  v17 = **a4;
  v19 = *(_QWORD *)(v17 + 24);
  v18 = *(_QWORD *)(v17 + 32);
  if (v19 == v18)
  {
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 0;
    __dst.__r_.__value_.__s.__data_[0] = 0;
  }
  else if (*(char *)(v18 - 9) < 0)
  {
    sub_19C2B5238(&__dst, *(void **)(v18 - 32), *(_QWORD *)(v18 - 24));
  }
  else
  {
    v20 = *(_OWORD *)(v18 - 32);
    __dst.__r_.__value_.__r.__words[2] = *(_QWORD *)(v18 - 16);
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v20;
  }
  memset(&v293, 0, sizeof(v293));
  if (*(char *)(v15 + 231) < 0)
    sub_19C2B5238(&v292, *(void **)(v15 + 208), *(_QWORD *)(v15 + 216));
  else
    v292 = *(std::string *)(v15 + 208);
  v21 = a2[22];
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    sub_19C2B5238(&cf, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
  else
    cf = __dst;
  if (SHIBYTE(v292.__r_.__value_.__r.__words[2]) < 0)
    sub_19C2B5238(&v287, v292.__r_.__value_.__l.__data_, v292.__r_.__value_.__l.__size_);
  else
    v287 = v292;
  v22 = *(_QWORD *)(v21 + 72);
  if (SHIBYTE(cf.__r_.__value_.__r.__words[2]) < 0)
    sub_19C2B5238(&v298, cf.__r_.__value_.__l.__data_, cf.__r_.__value_.__l.__size_);
  else
    v298 = cf;
  if (SHIBYTE(v287.__r_.__value_.__r.__words[2]) < 0)
    sub_19C2B5238(&v297, v287.__r_.__value_.__l.__data_, v287.__r_.__value_.__l.__size_);
  else
    v297 = v287;
  v23 = *(_QWORD **)(v22 + 480);
  if (SHIBYTE(v298.__r_.__value_.__r.__words[2]) < 0)
    sub_19C2B5238(&v300, v298.__r_.__value_.__l.__data_, v298.__r_.__value_.__l.__size_);
  else
    v300 = v298;
  v269 = a5;
  v271 = a6;
  if (SHIBYTE(v297.__r_.__value_.__r.__words[2]) < 0)
    sub_19C2B5238(&__p, v297.__r_.__value_.__l.__data_, v297.__r_.__value_.__l.__size_);
  else
    __p = v297;
  v24 = a4;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v27 = sub_19C2A0F2C((uint64_t)&v301, (uint64_t *)p_p, size);
  v28 = (int8x8_t)v23[1];
  if (v28)
  {
    v29 = v27;
    v30 = (uint8x8_t)vcnt_s8(v28);
    v30.i16[0] = vaddlv_u8(v30);
    if (v30.u32[0] > 1uLL)
    {
      v31 = v27;
      if (v27 >= *(_QWORD *)&v28)
        v31 = v27 % *(_QWORD *)&v28;
    }
    else
    {
      v31 = (*(_QWORD *)&v28 - 1) & v27;
    }
    v32 = *(uint64_t ***)(*v23 + 8 * v31);
    if (v32)
    {
      v33 = *v32;
      if (*v32)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v34 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v34 = __p.__r_.__value_.__l.__size_;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v35 = &__p;
        else
          v35 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if (v30.u32[0] < 2uLL)
        {
          v36 = *(_QWORD *)&v28 - 1;
          while (1)
          {
            v41 = v33[1];
            if (v41 == v29)
            {
              v42 = *((unsigned __int8 *)v33 + 39);
              if ((v42 & 0x80u) == 0)
                v43 = *((unsigned __int8 *)v33 + 39);
              else
                v43 = v33[3];
              if (v43 == v34)
              {
                if ((v42 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v33[2], v35, v33[3]))
                    goto LABEL_85;
                }
                else
                {
                  if (!*((_BYTE *)v33 + 39))
                    goto LABEL_85;
                  v44 = 0;
                  while (*((unsigned __int8 *)v33 + v44 + 16) == v35->__r_.__value_.__s.__data_[v44])
                  {
                    if (v42 == ++v44)
                      goto LABEL_84;
                  }
                }
              }
            }
            else if ((v41 & v36) != v31)
            {
              goto LABEL_87;
            }
            v33 = (uint64_t *)*v33;
            if (!v33)
              goto LABEL_87;
          }
        }
        do
        {
          v37 = v33[1];
          if (v37 == v29)
          {
            v38 = *((unsigned __int8 *)v33 + 39);
            if ((v38 & 0x80u) == 0)
              v39 = *((unsigned __int8 *)v33 + 39);
            else
              v39 = v33[3];
            if (v39 == v34)
            {
              if ((v38 & 0x80) != 0)
              {
                if (!memcmp((const void *)v33[2], v35, v33[3]))
                {
LABEL_85:
                  v289 = 0;
                  v290 = 0;
                  v291 = 0;
                  if (SHIBYTE(v300.__r_.__value_.__r.__words[2]) < 0)
                  {
                    sub_19C2B5238(&v301, v300.__r_.__value_.__l.__data_, v300.__r_.__value_.__l.__size_);
                  }
                  else
                  {
                    v301 = *(_OWORD *)&v300.__r_.__value_.__l.__data_;
                    *(_QWORD *)&v302 = *((_QWORD *)&v300.__r_.__value_.__l + 2);
                  }
                  a4 = v24;
                  sub_19C3C2FFC(v33 + 5, (uint64_t)&v301, (void **)&v293.__r_.__value_.__l.__data_, (char **)&v289);
                  if (SBYTE7(v302) < 0)
                  {
                    p_s1 = (std::string *)&v301;
LABEL_93:
                    operator delete(p_s1->__r_.__value_.__l.__data_);
                  }
                  goto LABEL_94;
                }
              }
              else
              {
                if (!*((_BYTE *)v33 + 39))
                  goto LABEL_85;
                v40 = 0;
                while (*((unsigned __int8 *)v33 + v40 + 16) == v35->__r_.__value_.__s.__data_[v40])
                {
                  if (v38 == ++v40)
                  {
LABEL_84:
                    if (!v33)
                      goto LABEL_87;
                    goto LABEL_85;
                  }
                }
              }
            }
          }
          else
          {
            if (v37 >= *(_QWORD *)&v28)
              v37 %= *(_QWORD *)&v28;
            if (v37 != v31)
              break;
          }
          v33 = (uint64_t *)*v33;
        }
        while (v33);
      }
    }
  }
LABEL_87:
  if (SHIBYTE(v300.__r_.__value_.__r.__words[2]) < 0)
    sub_19C2B5238(&__s1, v300.__r_.__value_.__l.__data_, v300.__r_.__value_.__l.__size_);
  else
    __s1 = v300;
  a4 = v24;
  v290 = 0;
  v291 = 0;
  v289 = 0;
  for (i = (_QWORD *)v23[2]; i; i = (_QWORD *)*i)
  {
    if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
    {
      sub_19C2B5238(&v301, __s1.__r_.__value_.__l.__data_, __s1.__r_.__value_.__l.__size_);
    }
    else
    {
      v301 = *(_OWORD *)&__s1.__r_.__value_.__l.__data_;
      *(_QWORD *)&v302 = *((_QWORD *)&__s1.__r_.__value_.__l + 2);
    }
    sub_19C3C2FFC(i + 5, (uint64_t)&v301, (void **)&v293.__r_.__value_.__l.__data_, (char **)&v289);
    if (SBYTE7(v302) < 0)
      operator delete((void *)v301);
  }
  if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
  {
    p_s1 = &__s1;
    goto LABEL_93;
  }
LABEL_94:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v300.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_96:
      if ((SHIBYTE(v297.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_97;
      goto LABEL_118;
    }
  }
  else if ((SHIBYTE(v300.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_96;
  }
  operator delete(v300.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v297.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_97:
    if ((SHIBYTE(v298.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_98;
    goto LABEL_119;
  }
LABEL_118:
  operator delete(v297.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v298.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_98:
    if ((SHIBYTE(v287.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_99;
LABEL_120:
    operator delete(v287.__r_.__value_.__l.__data_);
    if ((SHIBYTE(cf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_100;
LABEL_121:
    operator delete(cf.__r_.__value_.__l.__data_);
    goto LABEL_100;
  }
LABEL_119:
  operator delete(v298.__r_.__value_.__l.__data_);
  if (SHIBYTE(v287.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_120;
LABEL_99:
  if (SHIBYTE(cf.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_121;
LABEL_100:
  v47 = (void **)v289;
  v48 = v290;
  if (v290 == v289)
  {
    v47 = v290;
  }
  else
  {
    v49 = 0;
    v50 = 0;
    v51 = 0;
    v52 = v293.__r_.__value_.__r.__words[0];
    v53 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v293.__r_.__value_.__l.__size_ - v293.__r_.__value_.__r.__words[0]) >> 3);
    do
    {
      if (v53 == v51)
        sub_19C30F73C();
      sub_19C3067B0((char **)&v301, (uint64_t)&v47[v49], (uint64_t)&v47[v49], v52, 1, 0, (__int128 *)&__dst, 3);
      v54 = v301;
      *(_QWORD *)&v301 = 0;
      v300.__r_.__value_.__r.__words[0] = 0;
      __s1.__r_.__value_.__r.__words[0] = v54;
      if ((unint64_t)v50 >= v283)
      {
        v50 = sub_19C2F1218(&v281, (uint64_t *)&__s1);
      }
      else
      {
        __s1.__r_.__value_.__r.__words[0] = 0;
        *v50++ = v54;
      }
      v282 = (__int128 **)v50;
      if (__s1.__r_.__value_.__r.__words[0])
      {
        v55 = sub_19C296378((uint64_t)__s1.__r_.__value_.__l.__data_);
        MEMORY[0x1A1AD355C](v55, 0x1032C4057ACE4D0);
      }
      v300.__r_.__value_.__r.__words[0] = 0;
      v47 = (void **)v289;
      v48 = v290;
      ++v51;
      v52 += 120;
      v49 += 3;
    }
    while (0xAAAAAAAAAAAAAAABLL * (((char *)v290 - (_BYTE *)v289) >> 3) > v51);
    a4 = v24;
  }
  v11 = (void **)a1;
  a5 = v269;
  a6 = v271;
  if (v47)
  {
    if (v48 != v47)
    {
      do
      {
        if (*((char *)v48 - 1) < 0)
          operator delete(*(v48 - 3));
        v48 -= 3;
      }
      while (v48 != v47);
      v48 = (void **)v289;
    }
    v290 = v47;
    operator delete(v48);
  }
  if (SHIBYTE(v292.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v292.__r_.__value_.__l.__data_);
  a2 = v277;
  if (v293.__r_.__value_.__r.__words[0])
    operator delete(v293.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  v14 = (uint64_t)v285;
  v13 = (__int128 **)v281;
  v12 = v282;
LABEL_138:
  sub_19C30B2EC((uint64_t **)&v284, v14, v13, v12, v12 - v13);
  v56 = a2[22];
  *(_QWORD *)&v301 = &off_1E3D38F80;
  *((_QWORD *)&v301 + 1) = &v284;
  *((_QWORD *)&v302 + 1) = &v301;
  sub_19C43D228(v56, v276, *a4, a4[1], a5, 1, (uint64_t)&v301);
  v57 = (__int128 *)*((_QWORD *)&v302 + 1);
  if (*((__int128 **)&v302 + 1) == &v301)
  {
    v58 = 4;
    v57 = &v301;
    goto LABEL_142;
  }
  if (*((_QWORD *)&v302 + 1))
  {
    v58 = 5;
LABEL_142:
    (*(void (**)(void))(*(_QWORD *)v57 + 8 * v58))();
  }
  v59 = v285;
  v274 = ((char *)v285 - (_BYTE *)v284) >> 3;
  if (v274 >= a6)
  {
    *v11 = v284;
    v11[1] = v59;
    v11[2] = v286;
    v285 = 0;
    v286 = 0;
    v284 = 0;
    goto LABEL_506;
  }
  v275 = a4;
  v61 = a2[16];
  v60 = (std::__shared_weak_count *)a2[17];
  v280 = 0;
  if (v60)
  {
    p_shared_owners = (unint64_t *)&v60->__shared_owners_;
    do
      v63 = __ldxr(p_shared_owners);
    while (__stxr(v63 + 1, p_shared_owners));
  }
  v64 = (uint64_t *)*v276;
  v65 = *(_QWORD *)*v276;
  v273 = v60;
  if (*(_QWORD *)(*v276 + 8) - v65 == 32 && *(_DWORD *)(v65 + 24) == 1)
  {
    v66 = *v275;
    if ((char *)v275[1] - (char *)*v275 == 8)
    {
      v67 = (_QWORD *)*v66;
      v68 = *(_QWORD *)*v66;
      if (v67[1] - v68 == 32 && !(*(char *)(v68 + 23) < 0 ? *(_QWORD *)(v68 + 8) : *(unsigned __int8 *)(v68 + 23)))
      {
        v264 = a2[24];
        if (v264)
        {
          if (*(_QWORD *)v264 != *(_QWORD *)(v264 + 8))
          {
            sub_19C297588((char ***)&v292, (__int128 ***)v264);
            goto LABEL_323;
          }
        }
      }
    }
  }
  v70 = (v64[4] - v64[3]) >> 5;
  *(_QWORD *)&v301 = v64[3];
  *((_QWORD *)&v301 + 1) = v70;
  sub_19C3E37B4(&v300, (__int128 **)&v301);
  sub_19C2FBF40((uint64_t *)&__p, (uint64_t)a2, (uint64_t)&v300, v275);
  v270 = a5;
  v272 = a6;
  (*(void (**)(std::string *__return_ptr, uint64_t, std::string *, _QWORD, uint64_t *))(*(_QWORD *)v61 + 16))(&v298, v61, &__p, a2[11], &v280);
  memset(&v292, 0, sizeof(v292));
  v71 = v298.__r_.__value_.__l.__size_;
  v72 = v298.__r_.__value_.__r.__words[0];
  if (v298.__r_.__value_.__r.__words[0] == v298.__r_.__value_.__l.__size_)
    goto LABEL_302;
  do
  {
    v73 = *(char *)(v72 + 23);
    if (v73 >= 0)
      v74 = (const UInt8 *)v72;
    else
      v74 = *(const UInt8 **)v72;
    if (v73 >= 0)
      v75 = *(unsigned __int8 *)(v72 + 23);
    else
      v75 = *(_QWORD *)(v72 + 8);
    v76 = CFStringCreateWithBytes(0, v74, v75, 0x8000100u, 0);
    __s1.__r_.__value_.__r.__words[0] = (std::string::size_type)v76;
    if (!v76)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1A1AD3154](exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
    }
    sub_19C3D81B4(&v301, (_QWORD *)(v72 + 32));
    if ((SBYTE7(v302) & 0x80u) == 0)
      v77 = (const UInt8 *)&v301;
    else
      v77 = (const UInt8 *)v301;
    if ((SBYTE7(v302) & 0x80u) == 0)
      v78 = BYTE7(v302);
    else
      v78 = *((_QWORD *)&v301 + 1);
    v79 = CFStringCreateWithBytes(0, v77, v78, 0x8000100u, 0);
    v297.__r_.__value_.__r.__words[0] = (std::string::size_type)v79;
    if (!v79)
    {
      v266 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1A1AD3154](v266, "Could not construct");
      __cxa_throw(v266, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
    }
    v80 = CFStringCompare(v76, v79, 0x81uLL);
    CFRelease(v79);
    if (SBYTE7(v302) < 0)
      operator delete((void *)v301);
    CFRelease(v76);
    if (v80 && !sub_19C308364(v72, (uint64_t)v300.__r_.__value_.__l.__data_, v300.__r_.__value_.__l.__size_))
    {
      *(_QWORD *)&v302 = 0;
      WORD4(v302) = 0;
      LOBYTE(v303) = 1;
      v307 = xmmword_19C46DE10;
      v308 = 0xFFEFFFFFFFFFFFFFLL;
      v309 = 0;
      v310 = 0;
      v81 = *(float *)(v72 + 24);
      v305 = 0x3FF0000000000000;
      v304 = v81;
      v306 = 2;
      *(double *)&v301 = v81;
      *((double *)&v301 + 1) = v81;
      if (*(char *)(v72 + 23) < 0)
      {
        sub_19C2B5238(&v297, *(void **)v72, *(_QWORD *)(v72 + 8));
      }
      else
      {
        v82 = *(_OWORD *)v72;
        v297.__r_.__value_.__r.__words[2] = *(_QWORD *)(v72 + 16);
        *(_OWORD *)&v297.__r_.__value_.__l.__data_ = v82;
      }
      if (*(char *)(v72 + 23) < 0)
      {
        sub_19C2B5238(&__dst, *(void **)v72, *(_QWORD *)(v72 + 8));
      }
      else
      {
        v83 = *(_OWORD *)v72;
        __dst.__r_.__value_.__r.__words[2] = *(_QWORD *)(v72 + 16);
        *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v83;
      }
      v84 = a2[22];
      v85 = *(_QWORD *)(v84 + 72);
      v86 = *(std::__shared_weak_count **)(v84 + 80);
      __s1.__r_.__value_.__r.__words[0] = v85;
      __s1.__r_.__value_.__l.__size_ = (std::string::size_type)v86;
      if (v86)
      {
        v87 = (unint64_t *)&v86->__shared_owners_;
        do
          v88 = __ldxr(v87);
        while (__stxr(v88 + 1, v87));
      }
      v89 = (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v85 + 64))(v85);
      v90 = (const __CFString *)MEMORY[0x1A1AD2A04](v89);
      v91 = CFStringCompare(v90, CFSTR("zh-Hans"), 0);
      v92 = v91;
      if (!v86)
        goto LABEL_192;
      v93 = (unint64_t *)&v86->__shared_owners_;
      do
        v94 = __ldaxr(v93);
      while (__stlxr(v94 - 1, v93));
      if (!v94)
      {
        ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
        std::__shared_weak_count::__release_weak(v86);
        if (v92)
        {
LABEL_193:
          sub_19C443CD4(&__s1, a2[22], v72, 0);
          if (!v295)
            goto LABEL_298;
          if (v64[1] == *v64)
          {
            v98 = SHIBYTE(__s1.__r_.__value_.__r.__words[2]);
            if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
            {
              v106 = *(_OWORD *)&__s1.__r_.__value_.__l.__data_;
              v107 = __s1.__r_.__value_.__l.__size_ != 0;
              if (!memcmp(__s1.__r_.__value_.__l.__data_, "I", v107) && *((_QWORD *)&v106 + 1) == 1
                || (*((_QWORD *)&v106 + 1) >= 3uLL ? (v108 = 3) : (v108 = *((_QWORD *)&v106 + 1)),
                    !memcmp((const void *)v106, "I'm", v108) && *((_QWORD *)&v106 + 1) == 3
                 || !memcmp((const void *)v106, "i", v107) && *((_QWORD *)&v106 + 1) == 1
                 || (v109 = memcmp((const void *)v106, "i'm", v108), v95 = &__s1, !v109)
                 && *((_QWORD *)&v106 + 1) == 3))
              {
                operator delete((void *)v106);
                goto LABEL_298;
              }
            }
            else
            {
              v99 = memcmp(&__s1, "I", SHIBYTE(__s1.__r_.__value_.__r.__words[2]) != 0);
              if (v98 == 1 && !v99)
                goto LABEL_298;
              v100 = v98 >= 3u ? 3 : v98;
              v101 = memcmp(&__s1, "I'm", v100);
              if (v98 == 3 && !v101)
                goto LABEL_298;
              v102 = memcmp(&__s1, "i", v98 != 0);
              if (v98 == 1 && !v102)
                goto LABEL_298;
              v95 = &__s1;
              v103 = memcmp(&__s1, "i'm", v100);
              if (v98 == 3 && !v103)
                goto LABEL_298;
            }
          }
          else
          {
            v95 = (std::string *)v72;
            if (&__dst == (std::string *)v72)
              goto LABEL_234;
          }
          v96 = HIBYTE(v95->__r_.__value_.__r.__words[2]);
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          {
            if (v96 >= 0)
              v104 = v95;
            else
              v104 = (std::string *)v95->__r_.__value_.__r.__words[0];
            if (v96 >= 0)
              v105 = HIBYTE(v95->__r_.__value_.__r.__words[2]);
            else
              v105 = v95->__r_.__value_.__l.__size_;
            sub_19C2E54A8((void **)&__dst.__r_.__value_.__l.__data_, v104, v105);
          }
          else if ((*((_BYTE *)&v95->__r_.__value_.__s + 23) & 0x80) != 0)
          {
            sub_19C2E53E4(&__dst, v95->__r_.__value_.__l.__data_, v95->__r_.__value_.__l.__size_);
          }
          else
          {
            v97 = *(_OWORD *)&v95->__r_.__value_.__l.__data_;
            __dst.__r_.__value_.__r.__words[2] = v95->__r_.__value_.__r.__words[2];
            *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v97;
          }
LABEL_234:
          if (!v295)
            sub_19C30F5A0();
          if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v110 = &__s1;
          else
            v110 = (std::string *)__s1.__r_.__value_.__r.__words[0];
          if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v111 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
          else
            v111 = __s1.__r_.__value_.__l.__size_;
          v112 = CFStringCreateWithBytes(0, (const UInt8 *)v110, v111, 0x8000100u, 0);
          v289 = v112;
          if (!v112)
          {
            v268 = __cxa_allocate_exception(0x10uLL);
            MEMORY[0x1A1AD3154](v268, "Could not construct");
            __cxa_throw(v268, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
          }
          v113 = *(char *)(v72 + 23);
          if (v113 >= 0)
            v114 = (const UInt8 *)v72;
          else
            v114 = *(const UInt8 **)v72;
          if (v113 >= 0)
            v115 = *(unsigned __int8 *)(v72 + 23);
          else
            v115 = *(_QWORD *)(v72 + 8);
          v116 = CFStringCreateWithBytes(0, v114, v115, 0x8000100u, 0);
          cf.__r_.__value_.__r.__words[0] = (std::string::size_type)v116;
          if (!v116)
          {
            v267 = __cxa_allocate_exception(0x10uLL);
            MEMORY[0x1A1AD3154](v267, "Could not construct");
            __cxa_throw(v267, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
          }
          Length = CFStringGetLength(v112);
          v118 = v277[22];
          v119 = *(_QWORD *)(v118 + 72);
          v120 = *(std::__shared_weak_count **)(v118 + 80);
          v293.__r_.__value_.__r.__words[0] = v119;
          v293.__r_.__value_.__l.__size_ = (std::string::size_type)v120;
          if (v120)
          {
            v121 = (unint64_t *)&v120->__shared_owners_;
            do
              v122 = __ldxr(v121);
            while (__stxr(v122 + 1, v121));
          }
          v123 = (const __CFLocale *)(*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v119 + 64))(v119);
          v312.location = 0;
          v312.length = Length;
          v124 = CFStringCompareWithOptionsAndLocale(v112, v116, v312, 0x80uLL, v123);
          v125 = v124;
          if (!v120)
            goto LABEL_256;
          v126 = (unint64_t *)&v120->__shared_owners_;
          do
            v127 = __ldaxr(v126);
          while (__stlxr(v127 - 1, v126));
          if (!v127)
          {
            ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
            std::__shared_weak_count::__release_weak(v120);
            v128 = v295;
            if (v125 == kCFCompareEqualTo)
              goto LABEL_257;
          }
          else
          {
LABEL_256:
            v128 = v295;
            if (v124 == kCFCompareEqualTo)
            {
LABEL_257:
              if (v128)
              {
                if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
                  sub_19C2B5238(&v293, __s1.__r_.__value_.__l.__data_, __s1.__r_.__value_.__l.__size_);
                else
                  v293 = __s1;
              }
              else
              {
                *((_BYTE *)&v293.__r_.__value_.__s + 23) = 0;
                v293.__r_.__value_.__s.__data_[0] = 0;
              }
              if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__dst.__r_.__value_.__l.__data_);
              __dst = v293;
              v128 = v295;
            }
          }
          if (!v128)
            sub_19C30F5A0();
          if (SHIBYTE(v297.__r_.__value_.__r.__words[2]) < 0)
          {
            if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v129 = &__s1;
            else
              v129 = (std::string *)__s1.__r_.__value_.__r.__words[0];
            if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v130 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
            else
              v130 = __s1.__r_.__value_.__l.__size_;
            sub_19C2E54A8((void **)&v297.__r_.__value_.__l.__data_, v129, v130);
          }
          else if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
          {
            sub_19C2E53E4(&v297, __s1.__r_.__value_.__l.__data_, __s1.__r_.__value_.__l.__size_);
          }
          else
          {
            v297 = __s1;
          }
          if (cf.__r_.__value_.__r.__words[0])
            CFRelease(cf.__r_.__value_.__l.__data_);
          if (v289)
            CFRelease(v289);
          if (v295 && SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__s1.__r_.__value_.__l.__data_);
        }
      }
      else
      {
LABEL_192:
        if (v91)
          goto LABEL_193;
      }
      v131 = *(_QWORD *)(v72 + 152);
      v132 = *v64;
      v133 = v64[1];
      v134 = *(_QWORD *)(v72 + 64);
      if (*(_QWORD *)(v72 + 56) == v134)
      {
        *((_BYTE *)&__s1.__r_.__value_.__s + 23) = 0;
        __s1.__r_.__value_.__s.__data_[0] = 0;
      }
      else if (*(char *)(v134 - 9) < 0)
      {
        sub_19C2B5238(&__s1, *(void **)(v134 - 32), *(_QWORD *)(v134 - 24));
      }
      else
      {
        v135 = *(_OWORD *)(v134 - 32);
        __s1.__r_.__value_.__r.__words[2] = *(_QWORD *)(v134 - 16);
        *(_OWORD *)&__s1.__r_.__value_.__l.__data_ = v135;
      }
      sub_19C3067B0(&v293.__r_.__value_.__l.__data_, (uint64_t)&v297, (uint64_t)&__dst, (uint64_t)&v301, (v133 - v132) >> 5, v131, (__int128 *)&__s1, 1);
      if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__s1.__r_.__value_.__l.__data_);
      v136 = v293.__r_.__value_.__r.__words[0];
      v293.__r_.__value_.__r.__words[0] = 0;
      v287.__r_.__value_.__r.__words[0] = 0;
      __s1.__r_.__value_.__r.__words[0] = v136;
      v137 = v292.__r_.__value_.__l.__size_;
      if (v292.__r_.__value_.__l.__size_ >= v292.__r_.__value_.__r.__words[2])
      {
        v292.__r_.__value_.__l.__size_ = (std::string::size_type)sub_19C2F1218(&v292, (uint64_t *)&__s1);
        if (__s1.__r_.__value_.__r.__words[0])
        {
          v138 = sub_19C296378((uint64_t)__s1.__r_.__value_.__l.__data_);
          MEMORY[0x1A1AD355C](v138, 0x1032C4057ACE4D0);
        }
      }
      else
      {
        *(_QWORD *)v292.__r_.__value_.__l.__size_ = v136;
        v292.__r_.__value_.__l.__size_ = v137 + 8;
      }
      v287.__r_.__value_.__r.__words[0] = 0;
LABEL_298:
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__dst.__r_.__value_.__l.__data_);
        if (SHIBYTE(v297.__r_.__value_.__r.__words[2]) < 0)
LABEL_300:
          operator delete(v297.__r_.__value_.__l.__data_);
      }
      else if (SHIBYTE(v297.__r_.__value_.__r.__words[2]) < 0)
      {
        goto LABEL_300;
      }
      a2 = v277;
    }
    v72 += 216;
  }
  while (v72 != v71);
  v72 = v298.__r_.__value_.__r.__words[0];
LABEL_302:
  v11 = (void **)a1;
  a5 = v270;
  a6 = v272;
  if (v72)
  {
    v139 = v298.__r_.__value_.__l.__size_;
    v140 = (void *)v72;
    if (v298.__r_.__value_.__l.__size_ != v72)
    {
      do
      {
        sub_19C2E25C8((void **)(v139 - 184));
        if (*(char *)(v139 - 193) < 0)
          operator delete(*(void **)(v139 - 216));
        v139 -= 216;
      }
      while (v139 != v72);
      v140 = (void *)v298.__r_.__value_.__r.__words[0];
    }
    v298.__r_.__value_.__l.__size_ = v72;
    operator delete(v140);
  }
  v141 = __p.__r_.__value_.__r.__words[0];
  if (__p.__r_.__value_.__r.__words[0])
  {
    v142 = __p.__r_.__value_.__l.__size_;
    v143 = (void *)__p.__r_.__value_.__r.__words[0];
    if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
    {
      do
        v142 = (std::string::size_type)sub_19C2E25C8((void **)(v142 - 184));
      while (v142 != v141);
      v143 = (void *)__p.__r_.__value_.__r.__words[0];
    }
    __p.__r_.__value_.__l.__size_ = v141;
    operator delete(v143);
  }
  v144 = v300.__r_.__value_.__r.__words[0];
  if (v300.__r_.__value_.__r.__words[0])
  {
    v145 = v300.__r_.__value_.__l.__size_;
    v146 = (void *)v300.__r_.__value_.__r.__words[0];
    if (v300.__r_.__value_.__l.__size_ != v300.__r_.__value_.__r.__words[0])
    {
      do
      {
        if (*(char *)(v145 - 9) < 0)
          operator delete(*(void **)(v145 - 32));
        v145 -= 32;
      }
      while (v145 != v144);
      v146 = (void *)v300.__r_.__value_.__r.__words[0];
    }
    v300.__r_.__value_.__l.__size_ = v144;
    operator delete(v146);
  }
LABEL_323:
  if (v273)
  {
    v147 = (unint64_t *)&v273->__shared_owners_;
    do
      v148 = __ldaxr(v147);
    while (__stlxr(v148 - 1, v147));
    if (!v148)
    {
      ((void (*)(std::__shared_weak_count *))v273->__on_zero_shared)(v273);
      std::__shared_weak_count::__release_weak(v273);
    }
  }
  sub_19C30B2EC((uint64_t **)&v284, (uint64_t)v285, (__int128 **)v292.__r_.__value_.__l.__data_, (__int128 **)v292.__r_.__value_.__l.__size_, (uint64_t)(v292.__r_.__value_.__l.__size_ - v292.__r_.__value_.__r.__words[0]) >> 3);
  __p.__r_.__value_.__r.__words[0] = 0;
  v298.__r_.__value_.__r.__words[0] = 0;
  v149 = a2[22];
  v150 = operator new(0x38uLL);
  *v150 = &off_1E3D38FD8;
  v150[1] = &v298;
  v150[2] = &v284;
  v150[3] = &__p;
  v150[4] = v275;
  v150[5] = v276;
  v150[6] = a2;
  *((_QWORD *)&v302 + 1) = v150;
  sub_19C43D228(v149, v276, *v275, v275[1], a5, 2, (uint64_t)&v301);
  v151 = (__int128 *)*((_QWORD *)&v302 + 1);
  if (*((__int128 **)&v302 + 1) == &v301)
  {
    v152 = 4;
    v151 = &v301;
LABEL_332:
    (*(void (**)(void))(*(_QWORD *)v151 + 8 * v152))();
  }
  else if (*((_QWORD *)&v302 + 1))
  {
    v152 = 5;
    goto LABEL_332;
  }
  v153 = v274 + a6;
  v155 = (char *)v284;
  v154 = v285;
  if (v274 + a6 >= ((char *)v285 - (_BYTE *)v284) >> 3)
  {
    v157 = v285;
  }
  else
  {
    v156 = v285 - 1;
    v157 = v285;
    do
    {
      v158 = *v156;
      *v156 = 0;
      if (v158)
      {
        v159 = sub_19C296378(v158);
        MEMORY[0x1A1AD355C](v159, 0x1032C4057ACE4D0);
      }
      v285 = v156;
      v155 = (char *)v284;
      --v157;
      --v156;
    }
    while (v153 < ((char *)v157 - (_BYTE *)v284) >> 3);
    v154 = v156 + 1;
  }
  v160 = (uint64_t *)&v155[8 * v274];
  v161 = 126 - 2 * __clz(v157 - v160);
  if (v154 == v160)
    v162 = 0;
  else
    v162 = v161;
  sub_19C30B830(v160, v154, v162, 1);
  *v11 = 0;
  v11[1] = 0;
  v11[2] = 0;
  v301 = 0u;
  v302 = 0u;
  v303 = 1065353216;
  v163 = (char *)v284;
  v278 = v285;
  if (v284 != v285)
  {
    v164 = 0;
    v165 = 0;
    while (1)
    {
      v168 = *(_QWORD *)(*(_QWORD *)v163 + 248);
      v297.__r_.__value_.__r.__words[0] = v168;
      if (*((_QWORD *)&v301 + 1))
      {
        v169 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v301 + 8));
        v169.i16[0] = vaddlv_u8(v169);
        if (v169.u32[0] > 1uLL)
        {
          v170 = v168;
          if (v168 >= *((_QWORD *)&v301 + 1))
            v170 = v168 % *((_QWORD *)&v301 + 1);
        }
        else
        {
          v170 = (*((_QWORD *)&v301 + 1) - 1) & v168;
        }
        v171 = *(_QWORD **)(v301 + 8 * v170);
        if (v171)
        {
          v172 = (_QWORD *)*v171;
          if (v172)
          {
            if (v169.u32[0] < 2uLL)
            {
              while (1)
              {
                v174 = v172[1];
                if (v174 == v168)
                {
                  if (v172[2] == v168)
                    goto LABEL_372;
                }
                else if ((v174 & (*((_QWORD *)&v301 + 1) - 1)) != v170)
                {
                  goto LABEL_368;
                }
                v172 = (_QWORD *)*v172;
                if (!v172)
                  goto LABEL_368;
              }
            }
            do
            {
              v173 = v172[1];
              if (v173 == v168)
              {
                if (v172[2] == v168)
                  goto LABEL_372;
              }
              else
              {
                if (v173 >= *((_QWORD *)&v301 + 1))
                  v173 %= *((_QWORD *)&v301 + 1);
                if (v173 != v170)
                  break;
              }
              v172 = (_QWORD *)*v172;
            }
            while (v172);
          }
        }
      }
LABEL_368:
      v175 = sub_19C30C2C4((uint64_t *)&v301, v168, &v297);
      v176 = *((_QWORD *)v175 + 4);
      if (v176)
      {
        for (j = 0; j != v176; ++j)
          *(_QWORD *)(*((_QWORD *)v175 + 3) + 8 * j) = 0;
        v178 = (void **)*((_QWORD *)v175 + 5);
        *((_QWORD *)v175 + 5) = 0;
        *((_QWORD *)v175 + 6) = 0;
        if (v178)
        {
          do
          {
            v181 = (void **)*v178;
            if (*((char *)v178 + 39) < 0)
              operator delete(v178[2]);
            operator delete(v178);
            v178 = v181;
          }
          while (v181);
        }
      }
LABEL_372:
      v179 = sub_19C30C2C4((uint64_t *)&v301, v168, &v297);
      v180 = *(_QWORD *)v163;
      if (*(char *)(*(_QWORD *)v163 + 47) < 0)
        sub_19C2B5238(&v300, *(void **)(v180 + 24), *(_QWORD *)(v180 + 32));
      else
        v300 = *(std::string *)(v180 + 24);
      MEMORY[0x1A1AD3478](&__dst);
      if ((v300.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v182 = &v300;
      else
        v182 = (std::string *)v300.__r_.__value_.__r.__words[0];
      v183 = HIBYTE(v300.__r_.__value_.__r.__words[2]);
      if ((v300.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v183 = v300.__r_.__value_.__l.__size_;
      sub_19C2FD5E4(&__s1, (char *)v182, (std::locale *)&__dst, (char *)v182 + v183);
      if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v184 = &__s1;
      else
        v184 = (std::string *)__s1.__r_.__value_.__r.__words[0];
      if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v185 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
      else
        v185 = __s1.__r_.__value_.__l.__size_;
      v186 = sub_19C2A0F2C((uint64_t)&v293, (uint64_t *)v184, v185);
      v187 = *(int8x8_t *)(v179 + 32);
      if (v187)
      {
        v188 = v186;
        v189 = (uint8x8_t)vcnt_s8(v187);
        v189.i16[0] = vaddlv_u8(v189);
        if (v189.u32[0] > 1uLL)
        {
          v190 = v186;
          if (v186 >= *(_QWORD *)&v187)
            v190 = v186 % *(_QWORD *)&v187;
        }
        else
        {
          v190 = (*(_QWORD *)&v187 - 1) & v186;
        }
        v191 = *(uint64_t ***)(*((_QWORD *)v179 + 3) + 8 * v190);
        if (v191)
        {
          v192 = *v191;
          if (*v191)
          {
            if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v193 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
            else
              v193 = __s1.__r_.__value_.__l.__size_;
            if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v194 = &__s1;
            else
              v194 = (std::string *)__s1.__r_.__value_.__r.__words[0];
            if (v189.u32[0] < 2uLL)
            {
              v195 = *(_QWORD *)&v187 - 1;
              while (1)
              {
                v203 = v192[1];
                if (v203 == v188)
                {
                  v204 = *((unsigned __int8 *)v192 + 39);
                  if ((v204 & 0x80u) == 0)
                    v205 = *((unsigned __int8 *)v192 + 39);
                  else
                    v205 = v192[3];
                  if (v205 == v193)
                  {
                    if ((v204 & 0x80) != 0)
                    {
                      v207 = v193;
                      v208 = memcmp((const void *)v192[2], v194, v192[3]);
                      v193 = v207;
                      if (!v208)
                        goto LABEL_435;
                    }
                    else
                    {
                      if (!*((_BYTE *)v192 + 39))
                        goto LABEL_435;
                      v206 = 0;
                      while (*((unsigned __int8 *)v192 + v206 + 16) == v194->__r_.__value_.__s.__data_[v206])
                      {
                        if (v204 == ++v206)
                          goto LABEL_435;
                      }
                    }
                  }
                }
                else if ((v203 & v195) != v190)
                {
                  goto LABEL_436;
                }
                v196 = 0;
                v192 = (uint64_t *)*v192;
                if (!v192)
                  goto LABEL_437;
              }
            }
            while (1)
            {
              v197 = v192[1];
              if (v197 == v188)
              {
                v198 = *((unsigned __int8 *)v192 + 39);
                if ((v198 & 0x80u) == 0)
                  v199 = *((unsigned __int8 *)v192 + 39);
                else
                  v199 = v192[3];
                if (v199 == v193)
                {
                  if ((v198 & 0x80) != 0)
                  {
                    v201 = v193;
                    v202 = memcmp((const void *)v192[2], v194, v192[3]);
                    v193 = v201;
                    if (!v202)
                    {
LABEL_435:
                      v196 = v192;
                      goto LABEL_437;
                    }
                  }
                  else
                  {
                    if (!*((_BYTE *)v192 + 39))
                      goto LABEL_435;
                    v200 = 0;
                    while (*((unsigned __int8 *)v192 + v200 + 16) == v194->__r_.__value_.__s.__data_[v200])
                    {
                      if (v198 == ++v200)
                        goto LABEL_435;
                    }
                  }
                }
              }
              else
              {
                if (v197 >= *(_QWORD *)&v187)
                  v197 %= *(_QWORD *)&v187;
                if (v197 != v190)
                  break;
              }
              v196 = 0;
              v192 = (uint64_t *)*v192;
              if (!v192)
                goto LABEL_437;
            }
          }
        }
      }
LABEL_436:
      v196 = 0;
LABEL_437:
      sub_19C30C2C4((uint64_t *)&v301, v168, &v297);
      if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__s1.__r_.__value_.__l.__data_);
      std::locale::~locale((std::locale *)&__dst);
      if (SHIBYTE(v300.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v300.__r_.__value_.__l.__data_);
        if (v196)
          goto LABEL_347;
      }
      else if (v196)
      {
        goto LABEL_347;
      }
      v209 = sub_19C30C2C4((uint64_t *)&v301, v168, &v297);
      v210 = *(_QWORD *)v163;
      if (*(char *)(*(_QWORD *)v163 + 47) < 0)
        sub_19C2B5238(&v300, *(void **)(v210 + 24), *(_QWORD *)(v210 + 32));
      else
        v300 = *(std::string *)(v210 + 24);
      MEMORY[0x1A1AD3478](&__dst);
      if ((v300.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v211 = &v300;
      else
        v211 = (std::string *)v300.__r_.__value_.__r.__words[0];
      v212 = HIBYTE(v300.__r_.__value_.__r.__words[2]);
      if ((v300.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v212 = v300.__r_.__value_.__l.__size_;
      sub_19C2FD5E4(&__s1, (char *)v211, (std::locale *)&__dst, (char *)v211 + v212);
      sub_19C30C750((uint64_t)(v209 + 24), (uint64_t)&__s1, (uint64_t)&__s1);
      if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__s1.__r_.__value_.__l.__data_);
      std::locale::~locale((std::locale *)&__dst);
      if (SHIBYTE(v300.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v300.__r_.__value_.__l.__data_);
      v213 = a1[2];
      if ((unint64_t)v165 >= v213)
        break;
      v166 = *(_QWORD *)v163;
      *(_QWORD *)v163 = 0;
      *(_QWORD *)v165 = v166;
      v167 = v165 + 8;
LABEL_346:
      a1[1] = v167;
      v165 = v167;
LABEL_347:
      v163 += 8;
      if (v163 == (char *)v278)
      {
        v240 = (_QWORD *)v302;
        if ((_QWORD)v302)
        {
          do
          {
            v248 = (_QWORD *)*v240;
            v249 = (void **)v240[5];
            if (v249)
            {
              do
              {
                v251 = (void **)*v249;
                if (*((char *)v249 + 39) < 0)
                  operator delete(v249[2]);
                operator delete(v249);
                v249 = v251;
              }
              while (v251);
            }
            v250 = (void *)v240[3];
            v240[3] = 0;
            if (v250)
              operator delete(v250);
            operator delete(v240);
            v240 = v248;
          }
          while (v248);
        }
        v241 = (void *)v301;
        *(_QWORD *)&v301 = 0;
        if (v241)
          operator delete(v241);
        goto LABEL_491;
      }
    }
    v214 = v165 - v164;
    v215 = (v165 - v164) >> 3;
    v216 = v215 + 1;
    if ((unint64_t)(v215 + 1) >> 61)
      sub_19C2A18E8();
    v217 = v213 - (_QWORD)v164;
    if (v217 >> 2 > v216)
      v216 = v217 >> 2;
    if ((unint64_t)v217 >= 0x7FFFFFFFFFFFFFF8)
      v218 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v218 = v216;
    if (v218)
    {
      if (v218 >> 61)
        sub_19C2A143C();
      v219 = (char *)operator new(8 * v218);
    }
    else
    {
      v219 = 0;
    }
    v164 = &v219[8 * v215];
    v220 = &v219[8 * v218];
    v221 = *(_QWORD *)v163;
    *(_QWORD *)v163 = 0;
    *(_QWORD *)v164 = v221;
    v167 = v164 + 8;
    v222 = (char *)*a1;
    v223 = &v165[-*a1];
    if (v165 == (char *)*a1)
    {
      *a1 = v164;
      a1[1] = v167;
      a1[2] = v220;
    }
    else
    {
      v224 = v223 - 8;
      if ((unint64_t)(v223 - 8) < 0x138)
      {
        v225 = v165;
        goto LABEL_469;
      }
      v231 = (unint64_t)v224 & 0xFFFFFFFFFFFFFFF8;
      if (&v165[-((unint64_t)v224 & 0xFFFFFFFFFFFFFFF8) - 8] > v165 - 8)
      {
        v225 = v165;
        goto LABEL_469;
      }
      if (&v219[v214 - 8 - v231] > &v219[v214 - 8])
      {
        v225 = v165;
        goto LABEL_469;
      }
      v232 = (unint64_t)v224 >> 3;
      if (&v165[-8 * v232 - 8] < v164 && &v219[v214 - v231 - 8] < v165)
      {
        v225 = v165;
        goto LABEL_469;
      }
      v233 = v232 + 1;
      v234 = 8 * (v233 & 0x3FFFFFFFFFFFFFFCLL);
      v225 = &v165[-v234];
      v164 -= v234;
      v235 = &v219[8 * v215 - 16];
      v236 = v165 - 16;
      v237 = v233 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v239 = *((_OWORD *)v236 - 1);
        v238 = *(_OWORD *)v236;
        *((_OWORD *)v236 - 1) = 0uLL;
        *(_OWORD *)v236 = 0uLL;
        *((_OWORD *)v235 - 1) = v239;
        *(_OWORD *)v235 = v238;
        v235 -= 32;
        v236 -= 32;
        v237 -= 4;
      }
      while (v237);
      if (v233 != (v233 & 0x3FFFFFFFFFFFFFFCLL))
      {
        do
        {
LABEL_469:
          v226 = *((_QWORD *)v225 - 1);
          v225 -= 8;
          *(_QWORD *)v225 = 0;
          *((_QWORD *)v164 - 1) = v226;
          v164 -= 8;
        }
        while (v225 != v222);
      }
      v165 = (char *)*a1;
      v227 = (char *)a1[1];
      *a1 = v164;
      a1[1] = v167;
      a1[2] = v220;
      while (v227 != v165)
      {
        v229 = *((_QWORD *)v227 - 1);
        v227 -= 8;
        v228 = v229;
        *(_QWORD *)v227 = 0;
        if (v229)
        {
          v230 = sub_19C296378(v228);
          MEMORY[0x1A1AD355C](v230, 0x1032C4057ACE4D0);
        }
      }
    }
    if (v165)
      operator delete(v165);
    goto LABEL_346;
  }
LABEL_491:
  v242 = v292.__r_.__value_.__r.__words[0];
  if (v292.__r_.__value_.__r.__words[0])
  {
    v243 = (_QWORD *)v292.__r_.__value_.__l.__size_;
    v244 = (void *)v292.__r_.__value_.__r.__words[0];
    if (v292.__r_.__value_.__l.__size_ != v292.__r_.__value_.__r.__words[0])
    {
      do
      {
        v246 = *--v243;
        v245 = v246;
        *v243 = 0;
        if (v246)
        {
          v247 = sub_19C296378(v245);
          MEMORY[0x1A1AD355C](v247, 0x1032C4057ACE4D0);
        }
      }
      while (v243 != (_QWORD *)v242);
      v244 = (void *)v292.__r_.__value_.__r.__words[0];
    }
    v292.__r_.__value_.__l.__size_ = v242;
    operator delete(v244);
  }
LABEL_506:
  v252 = (__int128 **)v281;
  if (v281)
  {
    v253 = v282;
    v254 = v281;
    if (v282 != v281)
    {
      do
      {
        v256 = (uint64_t)*--v253;
        v255 = v256;
        *v253 = 0;
        if (v256)
        {
          v257 = sub_19C296378(v255);
          MEMORY[0x1A1AD355C](v257, 0x1032C4057ACE4D0);
        }
      }
      while (v253 != v252);
      v254 = v281;
    }
    v282 = v252;
    operator delete(v254);
  }
  v258 = (uint64_t *)v284;
  if (v284)
  {
    v259 = v285;
    v260 = v284;
    if (v285 != v284)
    {
      do
      {
        v262 = *--v259;
        v261 = v262;
        *v259 = 0;
        if (v262)
        {
          v263 = sub_19C296378(v261);
          MEMORY[0x1A1AD355C](v263, 0x1032C4057ACE4D0);
        }
      }
      while (v259 != v258);
      v260 = v284;
    }
    v285 = v258;
    operator delete(v260);
  }
}

void sub_19C30AE10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,uint64_t a59,std::locale a60,uint64_t a61,int a62,__int16 a63)
{
  char a65;
  void *a67;
  char a72;
  void *__p;
  char a74;
  void *a75;
  char a76;
  uint64_t v76;
  void *v78;

  sub_19C307B68(&a42);
  if (a76 < 0)
  {
    operator delete(a75);
    if (*(char *)(v76 - 217) < 0)
    {
LABEL_3:
      operator delete(*(void **)(v76 - 240));
      if ((a72 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if (*(char *)(v76 - 217) < 0)
  {
    goto LABEL_3;
  }
  if ((a72 & 0x80000000) == 0)
  {
LABEL_4:
    if (a74 < 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a67);
  if (a74 < 0)
  {
LABEL_5:
    operator delete(__p);
    if ((a34 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  if ((a34 & 0x80000000) == 0)
  {
LABEL_6:
    if (a41 < 0)
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  operator delete(a29);
  if (a41 < 0)
  {
LABEL_7:
    operator delete(a36);
    if (a50 < 0)
    {
LABEL_15:
      operator delete(a45);
      v78 = a52;
      if (a52)
        goto LABEL_16;
      goto LABEL_19;
    }
LABEL_18:
    v78 = a52;
    if (a52)
    {
LABEL_16:
      operator delete(v78);
      if ((a65 & 0x80000000) == 0)
        goto LABEL_21;
LABEL_20:
      operator delete(a60.__locale_);
LABEL_21:
      sub_19C2F0F74(&a23);
      sub_19C2F0F74(&a26);
      _Unwind_Resume(a1);
    }
LABEL_19:
    if ((a65 & 0x80000000) == 0)
      goto LABEL_21;
    goto LABEL_20;
  }
LABEL_14:
  if (a50 < 0)
    goto LABEL_15;
  goto LABEL_18;
}

void sub_19C30B2EC(uint64_t **a1, uint64_t a2, __int128 **a3, __int128 **a4, uint64_t a5)
{
  __int128 **v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 **v20;
  __int128 **v21;
  char **v22;
  __int128 *v23;
  char *v24;
  char **v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t *v28;
  char **v29;
  __int128 *v30;
  char *v31;
  uint64_t *v32;
  uint64_t v33;
  char *v34;
  uint64_t *v35;
  unint64_t v36;
  uint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  __int128 *v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  char *v50;
  uint64_t *v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  __int128 *v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  char **v69;
  char **v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  BOOL v76;
  uint64_t v77;
  uint64_t v78;
  _OWORD *v79;
  uint64_t *v80;
  uint64_t v81;
  __int128 v82;
  __int128 v83;
  char *v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t *v94;
  uint64_t *v95;
  uint64_t **v96;
  uint64_t **v97;
  uint64_t v98;

  if (a5 < 1)
    return;
  v6 = a3;
  v7 = *a1;
  v8 = (unint64_t)a1[1];
  v9 = a2 - (_QWORD)*a1;
  v10 = v9 >> 3;
  v11 = (uint64_t *)((char *)*a1 + (v9 & 0xFFFFFFFFFFFFFFF8));
  v12 = a1[2];
  v98 = v9;
  if (a5 > (uint64_t)((uint64_t)v12 - v8) >> 3)
  {
    v13 = a5 + ((uint64_t)(v8 - (_QWORD)v7) >> 3);
    if (v13 >> 61)
      sub_19C2A18E8();
    v14 = (char *)v12 - (char *)v7;
    if (v14 >> 2 > v13)
      v13 = v14 >> 2;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
      v15 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    v94 = *a1;
    v96 = a1;
    if (v15)
    {
      if (v15 >> 61)
        sub_19C2A143C();
      v16 = (char *)operator new(8 * v15);
    }
    else
    {
      v16 = 0;
    }
    v92 = v10;
    v93 = v16;
    v25 = (char **)&v16[8 * v10];
    v26 = (uint64_t *)&v16[8 * v15];
    v27 = 8 * a5;
    v28 = (uint64_t *)&v25[a5];
    v29 = v25;
    do
    {
      v30 = *v6;
      v31 = (char *)operator new();
      sub_19C29769C(v31, v30);
      *v29++ = v31;
      ++v6;
      v27 -= 8;
    }
    while (v27);
    v32 = *v96;
    if (*v96 == v11)
    {
      v34 = v93;
      v35 = v94;
      v33 = v98;
    }
    else
    {
      v33 = v98;
      v34 = v93;
      v35 = v94;
      v36 = (char *)v94 + (v98 & 0xFFFFFFFFFFFFFFF8) - (char *)v32 - 8;
      if (v36 >= 0x78)
      {
        v38 = (v98 & 0xFFFFFFFFFFFFFFF8) - (v36 & 0xFFFFFFFFFFFFFFF8) - 8;
        v39 = (unint64_t)v94 + v38;
        v40 = (unint64_t)&v93[v38];
        v41 = v39 >= (unint64_t)v25 || v40 >= (unint64_t)v11;
        v37 = v11;
        if (v41)
        {
          v42 = (v36 >> 3) + 1;
          v43 = 8 * (v42 & 0x3FFFFFFFFFFFFFFCLL);
          v37 = &v11[v43 / 0xFFFFFFFFFFFFFFF8];
          v25 = (char **)((char *)v25 - v43);
          v44 = 8 * v92 - 16;
          v45 = &v93[v44];
          v46 = (__int128 *)((char *)v94 + v44);
          v47 = v42 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v49 = *(v46 - 1);
            v48 = *v46;
            *(v46 - 1) = 0uLL;
            *v46 = 0uLL;
            *((_OWORD *)v45 - 1) = v49;
            *(_OWORD *)v45 = v48;
            v45 -= 32;
            v46 -= 2;
            v47 -= 4;
          }
          while (v47);
          if (v42 == (v42 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_34;
        }
      }
      else
      {
        v37 = v11;
      }
      do
      {
        v50 = (char *)*--v37;
        *v37 = 0;
        *--v25 = v50;
      }
      while (v37 != v32);
    }
LABEL_34:
    v51 = v96[1];
    if (v51 != v11)
    {
      v52 = (char *)v51 - ((char *)v35 + (v33 & 0xFFFFFFFFFFFFFFF8)) - 8;
      if (v52 < 0xA8)
        goto LABEL_80;
      v53 = (v33 & 0xFFFFFFFFFFFFFFF8) + (v52 & 0xFFFFFFFFFFFFFFF8);
      if (v11 < (uint64_t *)&v34[8 * a5 + 8 + v53] && v28 < (uint64_t *)((char *)v35 + v53 + 8))
        goto LABEL_80;
      v55 = (v52 >> 3) + 1;
      v56 = 8 * (v55 & 0x3FFFFFFFFFFFFFFCLL);
      v11 = (uint64_t *)((char *)v11 + v56);
      v28 = (uint64_t *)((char *)v28 + v56);
      v57 = &v34[8 * v92 + 16 + 8 * a5];
      v58 = (__int128 *)&v35[v92 + 2];
      v59 = v55 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v60 = *(v58 - 1);
        v61 = *v58;
        *(v58 - 1) = 0uLL;
        *v58 = 0uLL;
        *((_OWORD *)v57 - 1) = v60;
        *(_OWORD *)v57 = v61;
        v57 += 32;
        v58 += 2;
        v59 -= 4;
      }
      while (v59);
      if (v55 != (v55 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_80:
        do
        {
          v62 = *v11;
          *v11++ = 0;
          *v28++ = v62;
        }
        while (v11 != v51);
      }
      v11 = v96[1];
    }
    v63 = *v96;
    *v96 = (uint64_t *)v25;
    v96[1] = v28;
    v96[2] = v26;
    while (v11 != v63)
    {
      v65 = *--v11;
      v64 = v65;
      *v11 = 0;
      if (v65)
      {
        v66 = sub_19C296378(v64);
        MEMORY[0x1A1AD355C](v66, 0x1032C4057ACE4D0);
      }
    }
    if (v63)
      operator delete(v63);
    return;
  }
  v17 = v8 - (_QWORD)v11;
  v18 = (uint64_t)(v8 - (_QWORD)v11) >> 3;
  if (v18 >= a5)
  {
    v20 = &a3[a5];
    v22 = (char **)a1[1];
  }
  else
  {
    v20 = &a3[v18];
    if (v20 == a4)
    {
      v22 = (char **)a1[1];
    }
    else
    {
      v91 = v9 >> 3;
      v95 = *a1;
      v97 = a1;
      v21 = &a3[v18];
      v22 = (char **)a1[1];
      do
      {
        v23 = *v21;
        v24 = (char *)operator new();
        sub_19C29769C(v24, v23);
        *v22++ = v24;
        ++v21;
      }
      while (v21 != a4);
      v7 = v95;
      a1 = v97;
      v10 = v91;
      v17 = v8 - (_QWORD)v11;
    }
    a1[1] = (uint64_t *)v22;
    if (v17 < 1)
      return;
  }
  v67 = &v11[a5];
  v68 = ((char *)v22 - (char *)v67) >> 3;
  v69 = &v22[-a5];
  v70 = v22;
  if ((unint64_t)v69 < v8)
  {
    v71 = (v98 & 0xFFFFFFFFFFFFFFF8) + (char *)v22 - (char *)v67;
    v72 = (uint64_t)v7 + v71;
    v73 = (unint64_t)v7 + v71 + 8;
    if (v8 > v73)
      v73 = v8;
    v74 = v73 + ~(unint64_t)v7 - v71;
    if (v74 >= 0xE8)
    {
      v75 = v72 + (v74 & 0xFFFFFFFFFFFFFFF8) + 8;
      v76 = v69 >= (char **)((char *)v22 + (v74 & 0xFFFFFFFFFFFFFFF8) + 8) || (unint64_t)v22 >= v75;
      v70 = v22;
      if (v76)
      {
        v77 = (v74 >> 3) + 1;
        v78 = v77 & 0x3FFFFFFFFFFFFFFCLL;
        v69 = (char **)((char *)v69 + v78 * 8);
        v70 = &v22[v78];
        v79 = v22 + 2;
        v80 = &v7[v68 + 2 + v10];
        v81 = v77 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v82 = *((_OWORD *)v80 - 1);
          v83 = *(_OWORD *)v80;
          *((_OWORD *)v80 - 1) = 0uLL;
          *(_OWORD *)v80 = 0uLL;
          *(v79 - 1) = v82;
          *v79 = v83;
          v79 += 2;
          v80 += 4;
          v81 -= 4;
        }
        while (v81);
        if (v77 == (v77 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_68;
      }
    }
    else
    {
      v70 = v22;
    }
    do
    {
      v84 = *v69;
      *v69++ = 0;
      *v70++ = v84;
    }
    while ((unint64_t)v69 < v8);
  }
LABEL_68:
  a1[1] = (uint64_t *)v70;
  if (v22 != (char **)v67)
  {
    v85 = (uint64_t *)(v22 - 1);
    v86 = (uint64_t)&v7[v10 - 1];
    v87 = 8 * v68;
    do
    {
      v88 = *(_QWORD *)(v86 + v87);
      *(_QWORD *)(v86 + v87) = 0;
      v89 = *v85;
      *v85 = v88;
      if (v89)
      {
        v90 = sub_19C296378(v89);
        MEMORY[0x1A1AD355C](v90, 0x1032C4057ACE4D0);
      }
      --v85;
      v87 -= 8;
    }
    while (v87);
  }
  for (; v6 != v20; ++v11)
    language_modeling::v1::Prediction::operator=(v11, v6++);
}

void sub_19C30B800(void *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD355C](v1, 0x1032C4057ACE4D0);
  sub_19C2CDAC8(a1);
}

void sub_19C30B830(uint64_t *a1, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  BOOL v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  double v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  BOOL v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t i;
  uint64_t *v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  int64_t v85;
  int64_t v86;
  int64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t *v123;
  uint64_t v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t *v128;
  uint64_t v129;
  uint64_t v130;
  double v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t *v138;
  uint64_t *v139;
  uint64_t *v141;

LABEL_1:
  v141 = a2 - 1;
  v138 = a2 - 3;
  v139 = a2 - 2;
  v7 = a1;
  while (2)
  {
    a1 = v7;
    v8 = (char *)a2 - (char *)v7;
    v9 = a2 - v7;
    switch(v9)
    {
      case 0:
      case 1:
        return;
      case 2:
        v65 = *v7;
        if (*(double *)(*v141 + 48) > *(double *)(*v7 + 48))
        {
          *v7 = 0;
          v66 = *v141;
          *v141 = 0;
          v67 = *v7;
          *v7 = v66;
          if (v67)
          {
            v68 = sub_19C296378(v67);
            MEMORY[0x1A1AD355C](v68, 0x1032C4057ACE4D0);
          }
          v69 = *v141;
          *v141 = v65;
          if (v69)
          {
            sub_19C296378(v69);
            JUMPOUT(0x1A1AD355CLL);
          }
        }
        return;
      case 3:
        sub_19C30D0D4(v7, v7 + 1, v141);
        return;
      case 4:
        sub_19C30D2CC(v7, v7 + 1, v7 + 2, v141);
        return;
      case 5:
        sub_19C30D45C(v7, v7 + 1, v7 + 2, v7 + 3, v141);
        return;
      default:
        if (v8 <= 191)
        {
          v70 = v7 + 1;
          v72 = v7 == a2 || v70 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v72)
            {
              v73 = 0;
              v74 = v7;
              do
              {
                v75 = *v74;
                v76 = v74[1];
                v74 = v70;
                if (*(double *)(v76 + 48) > *(double *)(v75 + 48))
                {
                  v77 = a2;
                  v78 = 0;
                  *v70 = 0;
                  for (i = v73; ; i -= 8)
                  {
                    v80 = (uint64_t *)((char *)a1 + i);
                    *v80 = 0;
                    v80[1] = v75;
                    if (v78)
                    {
                      v81 = sub_19C296378(v78);
                      MEMORY[0x1A1AD355C](v81, 0x1032C4057ACE4D0);
                    }
                    if (!i)
                      break;
                    v82 = (uint64_t *)((char *)a1 + i);
                    v75 = *(uint64_t *)((char *)a1 + i - 8);
                    if (*(double *)(v76 + 48) <= *(double *)(v75 + 48))
                      goto LABEL_95;
                    v78 = *v80;
                  }
                  v82 = a1;
LABEL_95:
                  v83 = *v82;
                  *v82 = v76;
                  a2 = v77;
                  if (v83)
                  {
                    v84 = sub_19C296378(v83);
                    MEMORY[0x1A1AD355C](v84, 0x1032C4057ACE4D0);
                  }
                }
                v70 = v74 + 1;
                v73 += 8;
              }
              while (v74 + 1 != a2);
            }
          }
          else if (!v72)
          {
            do
            {
              v128 = a1;
              a1 = v70;
              v129 = *v128;
              v130 = v128[1];
              v131 = *(double *)(v130 + 48);
              if (v131 > *(double *)(*v128 + 48))
              {
                *a1 = 0;
                *v128 = 0;
                v128[1] = v129;
                while (1)
                {
                  v134 = v128 - 1;
                  v133 = *(v128 - 1);
                  if (v131 <= *(double *)(v133 + 48))
                    break;
                  v135 = *v128--;
                  *v134 = 0;
                  v134[1] = v133;
                  if (v135)
                  {
                    v132 = sub_19C296378(v135);
                    MEMORY[0x1A1AD355C](v132, 0x1032C4057ACE4D0);
                    v131 = *(double *)(v130 + 48);
                  }
                }
                v136 = *v128;
                *v128 = v130;
                if (v136)
                {
                  v137 = sub_19C296378(v136);
                  MEMORY[0x1A1AD355C](v137, 0x1032C4057ACE4D0);
                }
              }
              v70 = a1 + 1;
            }
            while (a1 + 1 != a2);
          }
          return;
        }
        if (!a3)
        {
          if (v7 == a2)
            return;
          v85 = (unint64_t)(v9 - 2) >> 1;
          v86 = v85;
          do
          {
            v87 = v86;
            if (v85 >= v86)
            {
              v88 = (2 * v86) | 1;
              v89 = &a1[v88];
              if (2 * v87 + 2 < v9 && *(double *)(*v89 + 48) > *(double *)(v89[1] + 48))
              {
                ++v89;
                v88 = 2 * v87 + 2;
              }
              v90 = &a1[v87];
              v91 = *v90;
              if (*(double *)(*v89 + 48) <= *(double *)(*v90 + 48))
              {
                *v90 = 0;
                v92 = *v89;
                do
                {
                  v93 = v89;
                  *v89 = 0;
                  v94 = *v90;
                  *v90 = v92;
                  if (v94)
                  {
                    v95 = sub_19C296378(v94);
                    MEMORY[0x1A1AD355C](v95, 0x1032C4057ACE4D0);
                  }
                  if (v85 < v88)
                    break;
                  v96 = 2 * v88;
                  v88 = (2 * v88) | 1;
                  v89 = &a1[v88];
                  v97 = v96 + 2;
                  if (v97 < v9 && *(double *)(*v89 + 48) > *(double *)(v89[1] + 48))
                  {
                    ++v89;
                    v88 = v97;
                  }
                  v92 = *v89;
                  v90 = v93;
                }
                while (*(double *)(*v89 + 48) <= *(double *)(v91 + 48));
                v98 = *v93;
                *v93 = v91;
                if (v98)
                {
                  v99 = sub_19C296378(v98);
                  MEMORY[0x1A1AD355C](v99, 0x1032C4057ACE4D0);
                }
              }
            }
            v86 = v87 - 1;
          }
          while (v87);
          v100 = (unint64_t)v8 >> 3;
          while (2)
          {
            v104 = a2;
            v105 = 0;
            v106 = *a1;
            *a1 = 0;
            v107 = a1;
            do
            {
              v108 = &v107[v105 + 1];
              v109 = 2 * v105;
              v105 = (2 * v105) | 1;
              v110 = v109 + 2;
              if (v110 < v100 && *(double *)(*v108 + 48) > *(double *)(v108[1] + 48))
              {
                ++v108;
                v105 = v110;
              }
              v111 = *v108;
              *v108 = 0;
              v112 = *v107;
              *v107 = v111;
              if (v112)
              {
                v113 = sub_19C296378(v112);
                MEMORY[0x1A1AD355C](v113, 0x1032C4057ACE4D0);
              }
              v107 = v108;
            }
            while (v105 <= (uint64_t)((unint64_t)(v100 - 2) >> 1));
            --a2;
            if (v108 == v104 - 1)
            {
              v101 = *v108;
              *v108 = v106;
              if (!v101)
                goto LABEL_118;
            }
            else
            {
              v114 = *a2;
              *a2 = 0;
              v115 = *v108;
              *v108 = v114;
              if (v115)
              {
                v116 = sub_19C296378(v115);
                MEMORY[0x1A1AD355C](v116, 0x1032C4057ACE4D0);
              }
              v117 = *a2;
              *a2 = v106;
              if (v117)
              {
                v118 = sub_19C296378(v117);
                MEMORY[0x1A1AD355C](v118, 0x1032C4057ACE4D0);
              }
              v119 = (char *)(v108 + 1) - (char *)a1;
              if (v119 < 9)
                goto LABEL_118;
              v120 = (((unint64_t)v119 >> 3) - 2) >> 1;
              v121 = &a1[v120];
              v122 = *v108;
              if (*(double *)(*v121 + 48) <= *(double *)(*v108 + 48))
                goto LABEL_118;
              v123 = v104 - 1;
              *v108 = 0;
              v124 = *v121;
              do
              {
                v125 = v121;
                *v121 = 0;
                v126 = *v108;
                *v108 = v124;
                if (v126)
                {
                  v127 = sub_19C296378(v126);
                  MEMORY[0x1A1AD355C](v127, 0x1032C4057ACE4D0);
                }
                if (!v120)
                  break;
                v120 = (v120 - 1) >> 1;
                v121 = &a1[v120];
                v124 = *v121;
                v108 = v125;
              }
              while (*(double *)(*v121 + 48) > *(double *)(v122 + 48));
              v101 = *v125;
              *v125 = v122;
              a2 = v123;
              if (!v101)
              {
LABEL_118:
                if (v100-- <= 2)
                  return;
                continue;
              }
            }
            break;
          }
          v102 = sub_19C296378(v101);
          MEMORY[0x1A1AD355C](v102, 0x1032C4057ACE4D0);
          goto LABEL_118;
        }
        v10 = (unint64_t)v9 >> 1;
        v11 = &v7[(unint64_t)v9 >> 1];
        if ((unint64_t)v8 < 0x401)
        {
          sub_19C30D0D4(v11, v7, v141);
        }
        else
        {
          sub_19C30D0D4(v7, v11, v141);
          v12 = v10;
          v13 = &v7[v12];
          sub_19C30D0D4(v7 + 1, &v7[v12 - 1], v139);
          sub_19C30D0D4(v7 + 2, &v7[v12 + 1], v138);
          sub_19C30D0D4(&v7[v12 - 1], v11, &v7[v12 + 1]);
          v14 = *v7;
          *v7 = 0;
          v15 = *v13;
          *v13 = 0;
          v16 = *v7;
          *v7 = v15;
          if (v16)
          {
            v17 = sub_19C296378(v16);
            MEMORY[0x1A1AD355C](v17, 0x1032C4057ACE4D0);
          }
          v18 = *v11;
          *v11 = v14;
          if (v18)
          {
            v19 = sub_19C296378(v18);
            MEMORY[0x1A1AD355C](v19, 0x1032C4057ACE4D0);
          }
        }
        --a3;
        v20 = *v7;
        if ((a4 & 1) == 0)
        {
          v21 = *(double *)(v20 + 48);
          if (*(double *)(*(v7 - 1) + 48) > v21)
            goto LABEL_14;
          *v7 = 0;
          if (v21 <= *(double *)(*v141 + 48))
          {
            v47 = v7 + 1;
            do
            {
              v7 = v47;
              if (v47 >= a2)
                break;
              ++v47;
            }
            while (v21 <= *(double *)(*v7 + 48));
          }
          else
          {
            do
            {
              v46 = v7[1];
              ++v7;
            }
            while (v21 <= *(double *)(v46 + 48));
          }
          v48 = a2;
          if (v7 < a2)
          {
            v48 = a2;
            do
              v49 = *--v48;
            while (v21 > *(double *)(v49 + 48));
          }
          if (v7 < v48)
          {
            v50 = *v7;
            do
            {
              *v7 = 0;
              v51 = *v48;
              *v48 = 0;
              v52 = *v7;
              *v7 = v51;
              if (v52)
              {
                v53 = sub_19C296378(v52);
                MEMORY[0x1A1AD355C](v53, 0x1032C4057ACE4D0);
              }
              v54 = *v48;
              *v48 = v50;
              if (v54)
              {
                v55 = sub_19C296378(v54);
                MEMORY[0x1A1AD355C](v55, 0x1032C4057ACE4D0);
              }
              v56 = *(double *)(v20 + 48);
              do
              {
                v57 = v7[1];
                ++v7;
                v50 = v57;
              }
              while (v56 <= *(double *)(v57 + 48));
              do
                v58 = *--v48;
              while (v56 > *(double *)(v58 + 48));
            }
            while (v7 < v48);
          }
          v59 = v7 - 1;
          if (v7 - 1 != a1)
          {
            v60 = *v59;
            *v59 = 0;
            v61 = *a1;
            *a1 = v60;
            if (v61)
            {
              v62 = sub_19C296378(v61);
              MEMORY[0x1A1AD355C](v62, 0x1032C4057ACE4D0);
            }
          }
          a4 = 0;
          v63 = *v59;
          *v59 = v20;
          if (v63)
          {
            v64 = sub_19C296378(v63);
            MEMORY[0x1A1AD355C](v64, 0x1032C4057ACE4D0);
            a4 = 0;
          }
          continue;
        }
        v21 = *(double *)(v20 + 48);
LABEL_14:
        *v7 = 0;
        v22 = v7;
        do
        {
          v23 = v22;
          v25 = v22[1];
          ++v22;
          v24 = v25;
        }
        while (*(double *)(v25 + 48) > v21);
        v26 = a2;
        if (v23 == a1)
        {
          do
          {
            if (v22 >= a2)
              break;
            v28 = *--a2;
          }
          while (*(double *)(v28 + 48) <= v21);
        }
        else
        {
          do
            v27 = *--a2;
          while (*(double *)(v27 + 48) <= v21);
        }
        if (v22 < a2)
        {
          v29 = v22;
          v30 = a2;
          do
          {
            *v29 = 0;
            v31 = *v30;
            *v30 = 0;
            v32 = *v29;
            *v29 = v31;
            if (v32)
            {
              v33 = sub_19C296378(v32);
              MEMORY[0x1A1AD355C](v33, 0x1032C4057ACE4D0);
            }
            v34 = *v30;
            *v30 = v24;
            if (v34)
            {
              v35 = sub_19C296378(v34);
              MEMORY[0x1A1AD355C](v35, 0x1032C4057ACE4D0);
            }
            v36 = *(double *)(v20 + 48);
            do
            {
              v23 = v29;
              v37 = v29[1];
              ++v29;
              v24 = v37;
            }
            while (*(double *)(v37 + 48) > v36);
            do
              v38 = *--v30;
            while (*(double *)(v38 + 48) <= v36);
          }
          while (v29 < v30);
        }
        if (v23 != a1)
        {
          v39 = *v23;
          *v23 = 0;
          v40 = *a1;
          *a1 = v39;
          if (v40)
          {
            v41 = sub_19C296378(v40);
            MEMORY[0x1A1AD355C](v41, 0x1032C4057ACE4D0);
          }
        }
        v42 = *v23;
        *v23 = v20;
        if (v42)
        {
          v43 = sub_19C296378(v42);
          MEMORY[0x1A1AD355C](v43, 0x1032C4057ACE4D0);
        }
        v44 = v22 >= a2;
        a2 = v26;
        if (!v44)
        {
LABEL_40:
          sub_19C30B830(a1, v23, a3, a4 & 1);
          a4 = 0;
          v7 = v23 + 1;
          continue;
        }
        v45 = sub_19C30D65C(a1, v23);
        v7 = v23 + 1;
        if (!sub_19C30D65C(v23 + 1, v26))
        {
          if (v45)
            continue;
          goto LABEL_40;
        }
        a2 = v23;
        if (!v45)
          goto LABEL_1;
        return;
    }
  }
}

  v9 = (__n128 *)((char *)a2 - 24);
  v10 = a2 - 3;
  v11 = &a2[-5].n128_i8[8];
  v12 = a1;
  while (2)
  {
    a1 = v12;
    v13 = (uint64_t)a2 - v12;
    v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v12) >> 3);
    switch(v14)
    {
      case 0:
      case 1:
        return a5.n128_f64[0];
      case 2:
        a5.n128_u64[0] = a2[-1].n128_u64[1];
        if (a5.n128_f64[0] > *(double *)(v12 + 16))
          goto LABEL_103;
        return a5.n128_f64[0];
      case 3:
        v90 = (__n128 *)(v12 + 24);
        a5.n128_u64[0] = *(_QWORD *)(v12 + 40);
        v91 = a2[-1].n128_f64[1];
        if (a5.n128_f64[0] <= *(double *)(v12 + 16))
        {
          if (v91 > a5.n128_f64[0])
          {
            a5 = *v90;
            v132 = *(_QWORD *)(v12 + 40);
            v133 = a2[-1].n128_u64[1];
            *v90 = *v9;
            *(_QWORD *)(v12 + 40) = v133;
            a2[-1].n128_u64[1] = v132;
            *v9 = a5;
            a5.n128_u64[0] = *(_QWORD *)(v12 + 40);
            if (a5.n128_f64[0] > *(double *)(v12 + 16))
            {
              v190 = *(_QWORD *)(v12 + 16);
              v166 = *(__n128 *)v12;
              *(__n128 *)v12 = *v90;
              *(_QWORD *)(v12 + 16) = *(_QWORD *)(v12 + 40);
              a5.n128_u64[0] = v166.n128_u64[0];
              *v90 = v166;
              *(_QWORD *)(v12 + 40) = v190;
            }
          }
        }
        else
        {
          if (v91 > a5.n128_f64[0])
          {
LABEL_103:
            v187 = *(_QWORD *)(v12 + 16);
            v161 = *(__n128 *)v12;
            v92 = *v9;
            *(_QWORD *)(v12 + 16) = a2[-1].n128_u64[1];
            *(__n128 *)v12 = v92;
            a5 = v161;
            a2[-1].n128_u64[1] = v187;
LABEL_104:
            *v9 = a5;
            return a5.n128_f64[0];
          }
          v191 = *(_QWORD *)(v12 + 16);
          v168 = *(__n128 *)v12;
          *(__n128 *)v12 = *v90;
          *(_QWORD *)(v12 + 16) = *(_QWORD *)(v12 + 40);
          *v90 = v168;
          *(_QWORD *)(v12 + 40) = v191;
          a5.n128_u64[0] = a2[-1].n128_u64[1];
          if (a5.n128_f64[0] > *(double *)(v12 + 40))
          {
            a5 = *v90;
            v137 = *(_QWORD *)(v12 + 40);
            v138 = a2[-1].n128_u64[1];
            *v90 = *v9;
            *(_QWORD *)(v12 + 40) = v138;
            a2[-1].n128_u64[1] = v137;
            goto LABEL_104;
          }
        }
        return a5.n128_f64[0];
      case 4:
        a5.n128_u64[0] = sub_19C364434((__n128 *)v12, (__n128 *)(v12 + 24), (__n128 *)(v12 + 48), (__n128 *)((char *)a2 - 24), a5).n128_u64[0];
        return a5.n128_f64[0];
      case 5:
        v93 = (__n128 *)(v12 + 24);
        v94 = (__n128 *)(v12 + 48);
        v95 = (__n128 *)(v12 + 72);
        sub_19C364434((__n128 *)a1, (__n128 *)(a1 + 24), (__n128 *)(a1 + 48), (__n128 *)(a1 + 72), a5);
        a5.n128_u64[0] = a2[-1].n128_u64[1];
        if (a5.n128_f64[0] > *(double *)(a1 + 88))
        {
          a5 = *v95;
          v96 = *(_QWORD *)(a1 + 88);
          v97 = a2[-1].n128_u64[1];
          *v95 = *v9;
          *(_QWORD *)(a1 + 88) = v97;
          a2[-1].n128_u64[1] = v96;
          *v9 = a5;
          a5.n128_u64[0] = *(_QWORD *)(a1 + 88);
          if (a5.n128_f64[0] > *(double *)(a1 + 64))
          {
            v98 = *(_QWORD *)(a1 + 64);
            a5 = *v94;
            *v94 = *v95;
            *(_QWORD *)(a1 + 64) = *(_QWORD *)(a1 + 88);
            *v95 = a5;
            *(_QWORD *)(a1 + 88) = v98;
            a5.n128_u64[0] = *(_QWORD *)(a1 + 64);
            if (a5.n128_f64[0] > *(double *)(a1 + 40))
            {
              v99 = *(_QWORD *)(a1 + 40);
              a5 = *v93;
              *v93 = *v94;
              *(_QWORD *)(a1 + 40) = *(_QWORD *)(a1 + 64);
              *v94 = a5;
              *(_QWORD *)(a1 + 64) = v99;
              a5.n128_u64[0] = *(_QWORD *)(a1 + 40);
              if (a5.n128_f64[0] > *(double *)(a1 + 16))
              {
                v188 = *(_QWORD *)(a1 + 16);
                v162 = *(__n128 *)a1;
                *(__n128 *)a1 = *v93;
                *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 40);
                a5.n128_u64[0] = v162.n128_u64[0];
                *v93 = v162;
                *(_QWORD *)(a1 + 40) = v188;
              }
            }
          }
        }
        return a5.n128_f64[0];
      default:
        if (v13 > 575)
        {
          if (!a3)
          {
            if ((__n128 *)v12 != a2)
            {
              v109 = (unint64_t)(v14 - 2) >> 1;
              v110 = v109;
              do
              {
                if (v109 >= v110)
                {
                  v112 = (2 * v110) | 1;
                  v113 = v12 + 24 * v112;
                  if (2 * v110 + 2 < v14 && *(double *)(v113 + 16) > *(double *)(v113 + 40))
                  {
                    v113 += 24;
                    v112 = 2 * v110 + 2;
                  }
                  v114 = v12 + 24 * v110;
                  v115 = *(double *)(v114 + 16);
                  if (*(double *)(v113 + 16) <= v115)
                  {
                    v164 = *(_OWORD *)v114;
                    do
                    {
                      v116 = v114;
                      v114 = v113;
                      v117 = *(_OWORD *)v113;
                      *(_QWORD *)(v116 + 16) = *(_QWORD *)(v113 + 16);
                      *(_OWORD *)v116 = v117;
                      if (v109 < v112)
                        break;
                      v118 = 2 * v112;
                      v112 = (2 * v112) | 1;
                      v113 = v12 + 24 * v112;
                      v119 = v118 + 2;
                      if (v119 < v14 && *(double *)(v113 + 16) > *(double *)(v113 + 40))
                      {
                        v113 += 24;
                        v112 = v119;
                      }
                    }
                    while (*(double *)(v113 + 16) <= v115);
                    *(_OWORD *)v114 = v164;
                    *(double *)(v114 + 16) = v115;
                  }
                }
                v111 = v110-- <= 0;
              }
              while (!v111);
              v120 = v13 / 0x18uLL;
              do
              {
                v121 = 0;
                v189 = *(_QWORD *)(v12 + 16);
                v165 = *(__n128 *)v12;
                v122 = (__n128 *)v12;
                do
                {
                  v124 = v122;
                  v122 = (__n128 *)((char *)v122 + 24 * v121 + 24);
                  v125 = 2 * v121;
                  v121 = (2 * v121) | 1;
                  v126 = v125 + 2;
                  if (v126 < v120 && v122[1].n128_f64[0] > v122[2].n128_f64[1])
                  {
                    v122 = (__n128 *)((char *)v122 + 24);
                    v121 = v126;
                  }
                  v123 = *v122;
                  v124[1].n128_u64[0] = v122[1].n128_u64[0];
                  *v124 = v123;
                }
                while (v121 <= (uint64_t)((unint64_t)(v120 - 2) >> 1));
                a2 = (__n128 *)((char *)a2 - 24);
                if (v122 == a2)
                {
                  a5.n128_u64[0] = v165.n128_u64[0];
                  v122[1].n128_u64[0] = v189;
                  *v122 = v165;
                }
                else
                {
                  a5 = *a2;
                  v122[1].n128_u64[0] = a2[1].n128_u64[0];
                  *v122 = a5;
                  a5.n128_u64[0] = v165.n128_u64[0];
                  a2[1].n128_u64[0] = v189;
                  *a2 = v165;
                  v127 = (uint64_t)&v122[1].n128_i64[1] - v12;
                  if (v127 >= 25)
                  {
                    v128 = (v127 / 0x18uLL - 2) >> 1;
                    v129 = v12 + 24 * v128;
                    a5.n128_u64[0] = v122[1].n128_u64[0];
                    if (*(double *)(v129 + 16) > a5.n128_f64[0])
                    {
                      v142 = *v122;
                      do
                      {
                        v130 = v122;
                        v122 = (__n128 *)v129;
                        v131 = *(__n128 *)v129;
                        v130[1].n128_u64[0] = *(_QWORD *)(v129 + 16);
                        *v130 = v131;
                        if (!v128)
                          break;
                        v128 = (v128 - 1) >> 1;
                        v129 = v12 + 24 * v128;
                      }
                      while (*(double *)(v129 + 16) > a5.n128_f64[0]);
                      *v122 = v142;
                      v122[1].n128_u64[0] = a5.n128_u64[0];
                    }
                  }
                }
                v111 = v120-- <= 2;
              }
              while (!v111);
            }
            return a5.n128_f64[0];
          }
          v15 = (unint64_t)v14 >> 1;
          v16 = (__n128 *)(v12 + 24 * ((unint64_t)v14 >> 1));
          v17 = a2[-1].n128_f64[1];
          if ((unint64_t)v13 < 0xC01)
          {
            v20 = *(double *)(v12 + 16);
            if (v20 <= v16[1].n128_f64[0])
            {
              if (v17 > v20)
              {
                v173 = *(_QWORD *)(v12 + 16);
                v147 = *(__n128 *)v12;
                a5 = *v9;
                *(_QWORD *)(v12 + 16) = a2[-1].n128_u64[1];
                *(__n128 *)v12 = a5;
                a5.n128_u64[1] = v147.n128_u64[1];
                a2[-1].n128_u64[1] = v173;
                *v9 = v147;
                if (*(double *)(v12 + 16) > v16[1].n128_f64[0])
                {
                  v174 = v16[1].n128_u64[0];
                  v148 = *v16;
                  a5 = *(__n128 *)v12;
                  v16[1].n128_u64[0] = *(_QWORD *)(v12 + 16);
                  *v16 = a5;
                  a5.n128_u64[1] = v148.n128_u64[1];
                  *(_QWORD *)(v12 + 16) = v174;
                  *(__n128 *)v12 = v148;
                  --a3;
                  if ((a4 & 1) != 0)
                    goto LABEL_32;
                  goto LABEL_55;
                }
              }
            }
            else
            {
              if (v17 <= v20)
              {
                v177 = v16[1].n128_u64[0];
                v151 = *v16;
                a5 = *(__n128 *)v12;
                v16[1].n128_u64[0] = *(_QWORD *)(v12 + 16);
                *v16 = a5;
                a5.n128_u64[1] = v151.n128_u64[1];
                *(_QWORD *)(v12 + 16) = v177;
                *(__n128 *)v12 = v151;
                if (a2[-1].n128_f64[1] <= *(double *)(v12 + 16))
                  goto LABEL_31;
                v170 = *(_QWORD *)(v12 + 16);
                v144 = *(__n128 *)v12;
                v38 = *v9;
                *(_QWORD *)(v12 + 16) = a2[-1].n128_u64[1];
                *(__n128 *)v12 = v38;
              }
              else
              {
                v170 = v16[1].n128_u64[0];
                v144 = *v16;
                v21 = *v9;
                v16[1].n128_u64[0] = a2[-1].n128_u64[1];
                *v16 = v21;
              }
              a5.n128_u64[1] = v144.n128_u64[1];
              a2[-1].n128_u64[1] = v170;
              *v9 = v144;
            }
LABEL_31:
            --a3;
            if ((a4 & 1) != 0)
              goto LABEL_32;
LABEL_55:
            a5.n128_u64[0] = *(_QWORD *)(v12 + 16);
            if (*(double *)(v12 - 8) > a5.n128_f64[0])
              goto LABEL_56;
            a5 = *(__n128 *)v12;
            v141 = *(__n128 *)v12;
            a5.n128_u64[0] = *(_QWORD *)(v12 + 16);
            if (a5.n128_f64[0] <= a2[-1].n128_f64[1])
            {
              v80 = v12 + 24;
              do
              {
                v12 = v80;
                if (v80 >= (unint64_t)a2)
                  break;
                v81 = *(double *)(v80 + 16);
                v80 += 24;
              }
              while (a5.n128_f64[0] <= v81);
            }
            else
            {
              v78 = v12;
              do
              {
                v12 = v78 + 24;
                v79 = *(double *)(v78 + 40);
                v78 += 24;
              }
              while (a5.n128_f64[0] <= v79);
            }
            v82 = a2;
            if (v12 < (unint64_t)a2)
            {
              v83 = a2;
              do
              {
                v82 = (__n128 *)((char *)v83 - 24);
                v84 = v83[-1].n128_f64[1];
                v83 = (__n128 *)((char *)v83 - 24);
              }
              while (a5.n128_f64[0] > v84);
            }
            while (v12 < (unint64_t)v82)
            {
              v186 = *(_QWORD *)(v12 + 16);
              v160 = *(__n128 *)v12;
              v85 = *v82;
              *(_QWORD *)(v12 + 16) = v82[1].n128_u64[0];
              *(__n128 *)v12 = v85;
              v82[1].n128_u64[0] = v186;
              *v82 = v160;
              do
              {
                v86 = *(double *)(v12 + 40);
                v12 += 24;
              }
              while (a5.n128_f64[0] <= v86);
              do
              {
                v87 = v82[-1].n128_f64[1];
                v82 = (__n128 *)((char *)v82 - 24);
              }
              while (a5.n128_f64[0] > v87);
            }
            v88 = (__n128 *)(v12 - 24);
            if (v12 - 24 != a1)
            {
              v89 = *v88;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(v12 - 8);
              *(__n128 *)a1 = v89;
            }
            a4 = 0;
            *v88 = v141;
            *(_QWORD *)(v12 - 8) = a5.n128_u64[0];
            continue;
          }
          v18 = v16[1].n128_f64[0];
          if (v18 <= *(double *)(v12 + 16))
          {
            if (v17 > v18)
            {
              v171 = v16[1].n128_u64[0];
              v145 = *v16;
              v22 = *v9;
              v16[1].n128_u64[0] = a2[-1].n128_u64[1];
              *v16 = v22;
              a2[-1].n128_u64[1] = v171;
              *v9 = v145;
              if (v16[1].n128_f64[0] > *(double *)(v12 + 16))
              {
                v172 = *(_QWORD *)(v12 + 16);
                v146 = *(__n128 *)v12;
                v23 = *v16;
                *(_QWORD *)(v12 + 16) = v16[1].n128_u64[0];
                *(__n128 *)v12 = v23;
                v16[1].n128_u64[0] = v172;
                *v16 = v146;
              }
            }
          }
          else
          {
            if (v17 <= v18)
            {
              v175 = *(_QWORD *)(v12 + 16);
              v149 = *(__n128 *)v12;
              v24 = *v16;
              *(_QWORD *)(v12 + 16) = v16[1].n128_u64[0];
              *(__n128 *)v12 = v24;
              v16[1].n128_u64[0] = v175;
              *v16 = v149;
              if (a2[-1].n128_f64[1] <= v16[1].n128_f64[0])
                goto LABEL_22;
              v169 = v16[1].n128_u64[0];
              v143 = *v16;
              v25 = *v9;
              v16[1].n128_u64[0] = a2[-1].n128_u64[1];
              *v16 = v25;
            }
            else
            {
              v169 = *(_QWORD *)(v12 + 16);
              v143 = *(__n128 *)v12;
              v19 = *v9;
              *(_QWORD *)(v12 + 16) = a2[-1].n128_u64[1];
              *(__n128 *)v12 = v19;
            }
            a2[-1].n128_u64[1] = v169;
            *v9 = v143;
          }
LABEL_22:
          v26 = (__n128 *)(v12 + 24);
          v27 = v12 + 24 * v15;
          v28 = (__n128 *)(v27 - 24);
          v29 = *(double *)(v27 - 8);
          v30 = a2[-2].n128_f64[0];
          if (v29 <= *(double *)(v12 + 40))
          {
            if (v30 > v29)
            {
              v176 = *(_QWORD *)(v27 - 8);
              v150 = *v28;
              v34 = *v10;
              *(_QWORD *)(v27 - 8) = a2[-2].n128_u64[0];
              *v28 = v34;
              a2[-2].n128_u64[0] = v176;
              *v10 = v150;
              if (*(double *)(v27 - 8) > *(double *)(v12 + 40))
              {
                v35 = *v26;
                v36 = *(_QWORD *)(v12 + 40);
                v37 = v28[1].n128_i64[0];
                *v26 = *v28;
                *(_QWORD *)(v12 + 40) = v37;
                v28[1].n128_u64[0] = v36;
                *v28 = v35;
              }
            }
          }
          else
          {
            if (v30 <= v29)
            {
              v39 = *v26;
              v40 = *(_QWORD *)(v12 + 40);
              v41 = v28[1].n128_i64[0];
              *v26 = *v28;
              *(_QWORD *)(v12 + 40) = v41;
              v28[1].n128_u64[0] = v40;
              *v28 = v39;
              if (a2[-2].n128_f64[0] <= v28[1].n128_f64[0])
                goto LABEL_36;
              v178 = v28[1].n128_u64[0];
              v152 = *v28;
              v42 = *v10;
              v28[1].n128_u64[0] = a2[-2].n128_u64[0];
              *v28 = v42;
              v31 = v152;
              a2[-2].n128_u64[0] = v178;
            }
            else
            {
              v31 = *v26;
              v32 = *(_QWORD *)(v12 + 40);
              v33 = a2[-2].n128_u64[0];
              *v26 = *v10;
              *(_QWORD *)(v12 + 40) = v33;
              a2[-2].n128_u64[0] = v32;
            }
            *v10 = v31;
          }
LABEL_36:
          v43 = (__n128 *)(v12 + 48);
          v44 = v12 + 24 * v15;
          v45 = (__n128 *)(v44 + 24);
          v46 = *(double *)(v44 + 40);
          v47 = a2[-4].n128_f64[1];
          if (v46 <= *(double *)(v12 + 64))
          {
            if (v47 > v46)
            {
              v179 = *(_QWORD *)(v44 + 40);
              v153 = *v45;
              v51 = *(__n128 *)v11;
              *(_QWORD *)(v44 + 40) = a2[-4].n128_u64[1];
              *v45 = v51;
              a2[-4].n128_u64[1] = v179;
              *(__n128 *)v11 = v153;
              if (*(double *)(v44 + 40) > *(double *)(v12 + 64))
              {
                v52 = *v43;
                v53 = *(_QWORD *)(v12 + 64);
                v54 = v45[1].n128_i64[0];
                *v43 = *v45;
                *(_QWORD *)(v12 + 64) = v54;
                v45[1].n128_u64[0] = v53;
                *v45 = v52;
              }
            }
          }
          else
          {
            if (v47 <= v46)
            {
              v55 = *v43;
              v56 = *(_QWORD *)(v12 + 64);
              v57 = v45[1].n128_i64[0];
              *v43 = *v45;
              *(_QWORD *)(v12 + 64) = v57;
              v45[1].n128_u64[0] = v56;
              *v45 = v55;
              if (a2[-4].n128_f64[1] <= v45[1].n128_f64[0])
                goto LABEL_45;
              v180 = v45[1].n128_u64[0];
              v154 = *v45;
              v58 = *(__n128 *)v11;
              v45[1].n128_u64[0] = a2[-4].n128_u64[1];
              *v45 = v58;
              v48 = v154;
              a2[-4].n128_u64[1] = v180;
            }
            else
            {
              v48 = *v43;
              v49 = *(_QWORD *)(v12 + 64);
              v50 = a2[-4].n128_u64[1];
              *v43 = *(__n128 *)v11;
              *(_QWORD *)(v12 + 64) = v50;
              a2[-4].n128_u64[1] = v49;
            }
            *(__n128 *)v11 = v48;
          }
LABEL_45:
          v59 = v16[1].n128_f64[0];
          v60 = v45[1].n128_f64[0];
          if (v59 <= v28[1].n128_f64[0])
          {
            if (v60 > v59)
            {
              v182 = v16[1].n128_u64[0];
              v156 = *v16;
              *v16 = *v45;
              v16[1].n128_u64[0] = v45[1].n128_u64[0];
              v45[1].n128_u64[0] = v182;
              *v45 = v156;
              if (v16[1].n128_f64[0] > v28[1].n128_f64[0])
              {
                v183 = v28[1].n128_u64[0];
                v157 = *v28;
                *v28 = *v16;
                v28[1].n128_u64[0] = v16[1].n128_u64[0];
                v16[1].n128_u64[0] = v183;
                *v16 = v157;
              }
            }
          }
          else
          {
            if (v60 <= v59)
            {
              v184 = v28[1].n128_u64[0];
              v158 = *v28;
              *v28 = *v16;
              v28[1].n128_u64[0] = v16[1].n128_u64[0];
              v16[1].n128_u64[0] = v184;
              *v16 = v158;
              if (v45[1].n128_f64[0] <= v16[1].n128_f64[0])
                goto LABEL_54;
              v181 = v16[1].n128_u64[0];
              v155 = *v16;
              *v16 = *v45;
              v16[1].n128_u64[0] = v45[1].n128_u64[0];
            }
            else
            {
              v181 = v28[1].n128_u64[0];
              v155 = *v28;
              *v28 = *v45;
              v28[1].n128_u64[0] = v45[1].n128_u64[0];
            }
            v45[1].n128_u64[0] = v181;
            *v45 = v155;
          }
LABEL_54:
          v185 = *(_QWORD *)(v12 + 16);
          v159 = *(__n128 *)v12;
          a5 = *v16;
          *(_QWORD *)(v12 + 16) = v16[1].n128_u64[0];
          *(__n128 *)v12 = a5;
          a5.n128_u64[1] = v159.n128_u64[1];
          v16[1].n128_u64[0] = v185;
          *v16 = v159;
          --a3;
          if ((a4 & 1) == 0)
            goto LABEL_55;
LABEL_32:
          a5.n128_u64[0] = *(_QWORD *)(v12 + 16);
LABEL_56:
          v140 = *(__n128 *)v12;
          v61 = v12;
          do
          {
            v62 = v61;
            v61 += 24;
          }
          while (*(double *)(v62 + 40) > a5.n128_f64[0]);
          v63 = a2;
          if (v62 == v12)
          {
            v66 = a2;
            while (v61 < (unint64_t)v66)
            {
              v64 = (__n128 *)((char *)v66 - 24);
              v67 = v66[-1].n128_f64[1];
              v66 = (__n128 *)((char *)v66 - 24);
              if (v67 > a5.n128_f64[0])
                goto LABEL_66;
            }
            v64 = v66;
          }
          else
          {
            do
            {
              v64 = (__n128 *)((char *)v63 - 24);
              v65 = v63[-1].n128_f64[1];
              v63 = (__n128 *)((char *)v63 - 24);
            }
            while (v65 <= a5.n128_f64[0]);
          }
LABEL_66:
          v12 = v61;
          if (v61 < (unint64_t)v64)
          {
            v68 = (unint64_t)v64;
            do
            {
              v69 = *(__n128 *)v12;
              v70 = *(_QWORD *)(v12 + 16);
              v71 = *(_QWORD *)(v68 + 16);
              *(_OWORD *)v12 = *(_OWORD *)v68;
              *(_QWORD *)(v12 + 16) = v71;
              *(_QWORD *)(v68 + 16) = v70;
              *(__n128 *)v68 = v69;
              do
              {
                v72 = *(double *)(v12 + 40);
                v12 += 24;
              }
              while (v72 > a5.n128_f64[0]);
              do
              {
                v73 = *(double *)(v68 - 8);
                v68 -= 24;
              }
              while (v73 <= a5.n128_f64[0]);
            }
            while (v12 < v68);
          }
          v74 = (__n128 *)(v12 - 24);
          if (v12 - 24 != a1)
          {
            v75 = *v74;
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(v12 - 8);
            *(__n128 *)a1 = v75;
          }
          *v74 = v140;
          *(_QWORD *)(v12 - 8) = a5.n128_u64[0];
          if (v61 < (unint64_t)v64)
            goto LABEL_77;
          v76 = sub_19C3645BC(a1, v12 - 24, a5);
          if (!sub_19C3645BC(v12, (uint64_t)a2, v77))
          {
            if (v76)
              continue;
LABEL_77:
            sub_19C3634E0(a1, v12 - 24, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = (__n128 *)(v12 - 24);
          if (v76)
            return a5.n128_f64[0];
          goto LABEL_1;
        }
        v100 = (__n128 *)(v12 + 24);
        v102 = (__n128 *)v12 == a2 || v100 == a2;
        if ((a4 & 1) != 0)
        {
          if (!v102)
          {
            v103 = 0;
            v104 = (__n128 *)v12;
            do
            {
              a5.n128_u64[0] = v104[2].n128_u64[1];
              v106 = v104[1].n128_f64[0];
              v104 = v100;
              if (a5.n128_f64[0] > v106)
              {
                v163 = *v100;
                v107 = v103;
                do
                {
                  v108 = v12 + v107;
                  *(_OWORD *)(v108 + 24) = *(_OWORD *)(v12 + v107);
                  *(_QWORD *)(v108 + 40) = *(_QWORD *)(v12 + v107 + 16);
                  if (!v107)
                  {
                    v105 = v12;
                    goto LABEL_121;
                  }
                  v107 -= 24;
                }
                while (a5.n128_f64[0] > *(double *)(v108 - 8));
                v105 = v12 + v107 + 24;
LABEL_121:
                *(__n128 *)v105 = v163;
                *(_QWORD *)(v105 + 16) = a5.n128_u64[0];
              }
              v100 = (__n128 *)((char *)v104 + 24);
              v103 += 24;
            }
            while (&v104[1].n128_i8[8] != (__int8 *)a2);
          }
        }
        else if (!v102)
        {
          do
          {
            a5.n128_u64[0] = *(_QWORD *)(a1 + 40);
            v134 = *(double *)(a1 + 16);
            a1 = (uint64_t)v100;
            if (a5.n128_f64[0] > v134)
            {
              v167 = *v100;
              v135 = v100;
              do
              {
                *v135 = *(__n128 *)((char *)v135 - 24);
                v135[1].n128_u64[0] = v135[-1].n128_u64[1];
                v136 = v135[-2].n128_f64[0];
                v135 = (__n128 *)((char *)v135 - 24);
              }
              while (a5.n128_f64[0] > v136);
              *v135 = v167;
              v135[1].n128_u64[0] = a5.n128_u64[0];
            }
            v100 = (__n128 *)((char *)v100 + 24);
          }
          while ((__n128 *)(a1 + 24) != a2);
        }
        return a5.n128_f64[0];
    }
  }
}

  if (!(*(unsigned int (**)(_QWORD))(*(_QWORD *)*a2 + 72))(*a2)
    || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 72))(*a3) & 1) == 0)
  {
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*a3 + 72))(*a3))
    {
      (*(void (**)(_QWORD))(*(_QWORD *)*a2 + 88))(*a2);
      if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 72))(*a2) & 1) == 0)
      {
        do
        {
          v6 = *(_DWORD *)(a1 + 28);
          v7 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 80))(*a2);
          v8 = (unsigned int *)(v7 + 4);
          if (v6)
            v8 = (unsigned int *)v7;
          if (((*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a3 + 64))(*a3, *v8) & 1) != 0)
            break;
          (*(void (**)(_QWORD))(*(_QWORD *)*a2 + 88))(*a2);
        }
        while (!(*(unsigned int (**)(_QWORD))(*(_QWORD *)*a2 + 72))(*a2));
      }
    }
    while (1)
    {
      while (1)
      {
        while (1)
        {
          while (1)
          {
            if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 72))(*a3) & 1) != 0)
              goto LABEL_1;
            v10 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 80))(*a2);
            v11 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 80))(*a3);
            (*(void (**)(_QWORD))(*(_QWORD *)*a3 + 88))(*a3);
            v12 = *(_DWORD *)(a1 + 28);
            v13 = v12 == 0;
            v14 = v12 ? v11 : v10;
            v15 = *(_QWORD *)v14;
            v16 = *(float *)(v14 + 8);
            v17 = *(_DWORD *)(v14 + 12);
            v18 = v13 ? v11 : v10;
            v19 = *(_QWORD *)v18;
            v20 = *(float *)(v18 + 8);
            v21 = *(_DWORD *)(v18 + 12);
            v22 = *(unsigned __int8 **)(*(_QWORD *)(a1 + 16) + 136);
            if ((_DWORD)v19 != -1)
              break;
            v9 = v22[40];
            if (v22[40])
            {
              if (v9 == 1)
                goto LABEL_34;
            }
            else
            {
              if (v22[44])
                goto LABEL_33;
              if (!v22[42])
              {
                LOBYTE(v9) = 1;
                goto LABEL_34;
              }
            }
          }
          if (HIDWORD(v15))
            break;
          LOBYTE(v9) = v22[40];
          if (!(_BYTE)v9)
            goto LABEL_34;
        }
        if (HIDWORD(v15) != -1)
          goto LABEL_33;
        v9 = v22[40];
        if (!v22[40])
          break;
        if (v9 == 2)
          goto LABEL_34;
      }
      if (v22[43])
        break;
      if (!v22[41])
      {
        LOBYTE(v9) = 2;
        goto LABEL_34;
      }
    }
LABEL_33:
    LOBYTE(v9) = 0;
LABEL_34:
    v34 = __PAIR64__(v21, v17);
    v35 = v9;
    *(_DWORD *)(a1 + 68) = v15;
    *(_DWORD *)(a1 + 72) = HIDWORD(v19);
    v23 = atomic_load((unsigned __int8 *)&qword_1EDB96FE8);
    if ((v23 & 1) == 0)
    {
      v30 = v20;
      v32 = v16;
      v28 = __cxa_guard_acquire(&qword_1EDB96FE8);
      v20 = v30;
      v16 = v32;
      if (v28)
      {
        dword_1EDB96FF0 = -8388609;
        __cxa_guard_release(&qword_1EDB96FE8);
        v20 = v30;
        v16 = v32;
      }
    }
    if (v16 == *(float *)&dword_1EDB96FF0)
      goto LABEL_44;
    v24 = atomic_load((unsigned __int8 *)&qword_1EDB96FE8);
    if ((v24 & 1) == 0)
    {
      v31 = v20;
      v33 = v16;
      v29 = __cxa_guard_acquire(&qword_1EDB96FE8);
      v20 = v31;
      v16 = v33;
      if (v29)
      {
        dword_1EDB96FF0 = -8388609;
        __cxa_guard_release(&qword_1EDB96FE8);
        v20 = v31;
        v16 = v33;
      }
    }
    if (v20 == *(float *)&dword_1EDB96FF0)
    {
LABEL_44:
      v26 = NAN;
    }
    else
    {
      v25 = v20 == 3.4028e38 || v16 == 3.4028e38;
      v26 = v20 + v16;
      if (v25)
        v26 = 3.4028e38;
    }
    *(float *)(a1 + 76) = v26;
    *(_DWORD *)(a1 + 80) = sub_19C385428(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 176), (uint64_t *)&v34);
    return 1;
  }
  return 0;
}

  if (!(*(unsigned int (**)(_QWORD))(*(_QWORD *)*a2 + 72))(*a2)
    || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 72))(*a3) & 1) == 0)
  {
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*a3 + 72))(*a3))
    {
      (*(void (**)(_QWORD))(*(_QWORD *)*a2 + 88))(*a2);
      if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 72))(*a2) & 1) == 0)
      {
        do
        {
          v6 = *(_DWORD *)(a1 + 28);
          v7 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 80))(*a2);
          v8 = (unsigned int *)(v7 + 4);
          if (v6)
            v8 = (unsigned int *)v7;
          if (((*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a3 + 64))(*a3, *v8) & 1) != 0)
            break;
          (*(void (**)(_QWORD))(*(_QWORD *)*a2 + 88))(*a2);
        }
        while (!(*(unsigned int (**)(_QWORD))(*(_QWORD *)*a2 + 72))(*a2));
      }
    }
    while (1)
    {
      while (1)
      {
        if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 72))(*a3) & 1) != 0)
          goto LABEL_1;
        v9 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 80))(*a2);
        v10 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 80))(*a3);
        (*(void (**)(_QWORD))(*(_QWORD *)*a3 + 88))(*a3);
        v11 = *(_DWORD *)(a1 + 28);
        v12 = v11 == 0;
        v13 = v11 ? v10 : v9;
        v14 = *(_QWORD *)v13;
        v15 = *(float *)(v13 + 8);
        v16 = *(_DWORD *)(v13 + 12);
        v17 = v12 ? v10 : v9;
        v18 = *(_QWORD *)v17;
        v19 = *(float *)(v17 + 8);
        v20 = *(_DWORD *)(v17 + 12);
        v21 = *(_BYTE **)(*(_QWORD *)(a1 + 16) + 136);
        if ((_DWORD)v18 == -1)
          break;
        if (HIDWORD(v14) && (HIDWORD(v14) != -1 || v21[32] != 1))
        {
          v22 = 0;
          goto LABEL_24;
        }
      }
      if (!v21[33])
      {
        v22 = v21[34] ^ 1;
LABEL_24:
        v34 = __PAIR64__(v20, v16);
        v35 = v22;
        *(_DWORD *)(a1 + 68) = v14;
        *(_DWORD *)(a1 + 72) = HIDWORD(v18);
        v23 = atomic_load((unsigned __int8 *)&qword_1EDB96FE8);
        if ((v23 & 1) == 0)
        {
          v30 = v19;
          v32 = v15;
          v28 = __cxa_guard_acquire(&qword_1EDB96FE8);
          v19 = v30;
          v15 = v32;
          if (v28)
          {
            dword_1EDB96FF0 = -8388609;
            __cxa_guard_release(&qword_1EDB96FE8);
            v19 = v30;
            v15 = v32;
          }
        }
        if (v15 == *(float *)&dword_1EDB96FF0)
          goto LABEL_34;
        v24 = atomic_load((unsigned __int8 *)&qword_1EDB96FE8);
        if ((v24 & 1) == 0)
        {
          v31 = v19;
          v33 = v15;
          v29 = __cxa_guard_acquire(&qword_1EDB96FE8);
          v19 = v31;
          v15 = v33;
          if (v29)
          {
            dword_1EDB96FF0 = -8388609;
            __cxa_guard_release(&qword_1EDB96FE8);
            v19 = v31;
            v15 = v33;
          }
        }
        if (v19 == *(float *)&dword_1EDB96FF0)
        {
LABEL_34:
          v26 = NAN;
        }
        else
        {
          v25 = v19 == 3.4028e38 || v15 == 3.4028e38;
          v26 = v19 + v15;
          if (v25)
            v26 = 3.4028e38;
        }
        *(float *)(a1 + 76) = v26;
        *(_DWORD *)(a1 + 80) = sub_19C385428(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 176), (uint64_t *)&v34);
        return 1;
      }
    }
  }
  return 0;
}

  if (!(*(unsigned int (**)(_QWORD))(*(_QWORD *)*a2 + 72))(*a2)
    || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 72))(*a3) & 1) == 0)
  {
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*a3 + 72))(*a3))
    {
      (*(void (**)(_QWORD))(*(_QWORD *)*a2 + 88))(*a2);
      if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 72))(*a2) & 1) == 0)
      {
        do
        {
          v6 = *(_DWORD *)(a1 + 28);
          v7 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 80))(*a2);
          v8 = (unsigned int *)(v7 + 4);
          if (v6)
            v8 = (unsigned int *)v7;
          if (((*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a3 + 64))(*a3, *v8) & 1) != 0)
            break;
          (*(void (**)(_QWORD))(*(_QWORD *)*a2 + 88))(*a2);
        }
        while (!(*(unsigned int (**)(_QWORD))(*(_QWORD *)*a2 + 72))(*a2));
      }
    }
    while (1)
    {
      while (1)
      {
        if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 72))(*a3) & 1) != 0)
          goto LABEL_1;
        v9 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 80))(*a2);
        v10 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 80))(*a3);
        (*(void (**)(_QWORD))(*(_QWORD *)*a3 + 88))(*a3);
        v11 = *(_DWORD *)(a1 + 28);
        v12 = v11 == 0;
        v13 = v11 ? v10 : v9;
        v14 = *(_QWORD *)v13;
        v15 = HIDWORD(*(_QWORD *)v13);
        v16 = *(float *)(v13 + 8);
        v17 = *(_DWORD *)(v13 + 12);
        v18 = v12 ? v10 : v9;
        v19 = *(_QWORD *)v18;
        v20 = *(float *)(v18 + 8);
        v21 = *(_DWORD *)(v18 + 12);
        v22 = *(_BYTE **)(*(_QWORD *)(a1 + 16) + 136);
        if ((_DWORD)v15 == -1)
          break;
        if ((_DWORD)v19 == -1)
        {
          v23 = v22[32];
          if (!v23)
            goto LABEL_25;
        }
        else if ((_DWORD)v15)
        {
          v23 = 0;
          goto LABEL_25;
        }
      }
      if (!v22[33])
      {
        v23 = v22[34] ^ 1;
LABEL_25:
        v35 = __PAIR64__(v21, v17);
        v36 = v23;
        *(_DWORD *)(a1 + 68) = v14;
        *(_DWORD *)(a1 + 72) = HIDWORD(v19);
        v24 = atomic_load((unsigned __int8 *)&qword_1EDB96FE8);
        if ((v24 & 1) == 0)
        {
          v31 = v20;
          v33 = v16;
          v29 = __cxa_guard_acquire(&qword_1EDB96FE8);
          v20 = v31;
          v16 = v33;
          if (v29)
          {
            dword_1EDB96FF0 = -8388609;
            __cxa_guard_release(&qword_1EDB96FE8);
            v20 = v31;
            v16 = v33;
          }
        }
        if (v16 == *(float *)&dword_1EDB96FF0)
          goto LABEL_35;
        v25 = atomic_load((unsigned __int8 *)&qword_1EDB96FE8);
        if ((v25 & 1) == 0)
        {
          v32 = v20;
          v34 = v16;
          v30 = __cxa_guard_acquire(&qword_1EDB96FE8);
          v20 = v32;
          v16 = v34;
          if (v30)
          {
            dword_1EDB96FF0 = -8388609;
            __cxa_guard_release(&qword_1EDB96FE8);
            v20 = v32;
            v16 = v34;
          }
        }
        if (v20 == *(float *)&dword_1EDB96FF0)
        {
LABEL_35:
          v27 = NAN;
        }
        else
        {
          v26 = v20 == 3.4028e38 || v16 == 3.4028e38;
          v27 = v20 + v16;
          if (v26)
            v27 = 3.4028e38;
        }
        *(float *)(a1 + 76) = v27;
        *(_DWORD *)(a1 + 80) = sub_19C385428(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 176), (uint64_t *)&v35);
        return 1;
      }
    }
  }
  return 0;
}

  v200 = (int *)(a2 - 304);
  v204 = (int *)(a2 - 152);
  v197 = (int *)(a2 - 456);
  v194 = a2 - 144;
  v7 = a1;
  while (2)
  {
    a1 = v7;
    v8 = a2 - v7;
    v9 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(a2 - v7) >> 3);
    switch(v9)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v92 = (__int128 *)(v7 + 8);
        if (*(double *)v194 > *(double *)(v7 + 8))
        {
          v93 = *(_DWORD *)v7;
          *(_DWORD *)v7 = *(_DWORD *)(a2 - 152);
          *(_DWORD *)(a2 - 152) = v93;
          v230 = *(_OWORD *)(v7 + 24);
          v238 = *(_OWORD *)(v7 + 40);
          v222 = *v92;
          v270 = *(_QWORD *)(v7 + 104);
          v254 = *(_OWORD *)(v7 + 72);
          v262 = *(_OWORD *)(v7 + 88);
          v246 = *(_OWORD *)(v7 + 56);
          v95 = *(_OWORD *)(v194 + 64);
          v94 = *(_OWORD *)(v194 + 80);
          v96 = *(_OWORD *)(v194 + 48);
          *(_QWORD *)(v7 + 104) = *(_QWORD *)(v194 + 96);
          *(_OWORD *)(v7 + 72) = v95;
          *(_OWORD *)(v7 + 88) = v94;
          *(_OWORD *)(v7 + 56) = v96;
          v97 = *(_OWORD *)v194;
          v98 = *(_OWORD *)(v194 + 32);
          *(_OWORD *)(v7 + 24) = *(_OWORD *)(v194 + 16);
          *(_OWORD *)(v7 + 40) = v98;
          *v92 = v97;
          *(_OWORD *)(v194 + 16) = v230;
          *(_OWORD *)(v194 + 32) = v238;
          *(_OWORD *)v194 = v222;
          *(_QWORD *)(v194 + 96) = v270;
          *(_OWORD *)(v194 + 64) = v254;
          *(_OWORD *)(v194 + 80) = v262;
          *(_OWORD *)(v194 + 48) = v246;
          v99 = *(_OWORD *)(v7 + 112);
          v100 = *(_QWORD *)(v7 + 128);
          v101 = *(_QWORD *)(a2 - 24);
          *(_OWORD *)(v7 + 112) = *(_OWORD *)(a2 - 40);
          *(_QWORD *)(v7 + 128) = v101;
          *(_QWORD *)(a2 - 24) = v100;
          *(_OWORD *)(a2 - 40) = v99;
          LODWORD(v100) = *(_DWORD *)(v7 + 136);
          *(_DWORD *)(v7 + 136) = *(_DWORD *)(a2 - 16);
          *(_DWORD *)(a2 - 16) = v100;
          v102 = *(_QWORD *)(v7 + 144);
          *(_QWORD *)(v7 + 144) = *(_QWORD *)(a2 - 8);
          *(_QWORD *)(a2 - 8) = v102;
        }
        return;
      case 3uLL:
        sub_19C440BC4((int *)v7, (int *)(v7 + 152), v204);
        return;
      case 4uLL:
        sub_19C440FC0(v7, v7 + 152, v7 + 304, (uint64_t)v204);
        return;
      case 5uLL:
        sub_19C441274(v7, v7 + 152, v7 + 304, v7 + 456, (uint64_t)v204);
        return;
      default:
        if (v8 <= 3647)
        {
          v103 = (_DWORD *)(v7 + 152);
          v105 = v7 == a2 || v103 == (_DWORD *)a2;
          if ((a4 & 1) != 0)
          {
            if (!v105)
            {
              v106 = 0;
              v107 = v7;
              do
              {
                v108 = v103;
                v109 = *(double *)(v107 + 160);
                if (v109 > *(double *)(v107 + 8))
                {
                  v214 = *v103;
                  v223 = *(_OWORD *)(v107 + 168);
                  v231 = *(_OWORD *)(v107 + 184);
                  v255 = *(_OWORD *)(v107 + 232);
                  v263 = *(_OWORD *)(v107 + 248);
                  v239 = *(_OWORD *)(v107 + 200);
                  v247 = *(_OWORD *)(v107 + 216);
                  v110 = *(void **)(v107 + 264);
                  *(_QWORD *)v277 = *(_QWORD *)(v107 + 272);
                  *(_QWORD *)&v277[7] = *(_QWORD *)(v107 + 279);
                  v111 = *(_BYTE *)(v107 + 287);
                  *(_QWORD *)(v107 + 264) = 0;
                  *(_QWORD *)(v107 + 272) = 0;
                  *(_QWORD *)(v107 + 280) = 0;
                  v112 = *(_DWORD *)(v107 + 288);
                  v113 = v106;
                  v209 = *(_QWORD *)(v107 + 296);
                  while (1)
                  {
                    v114 = a1 + v113;
                    *(_DWORD *)(v114 + 152) = *(_DWORD *)(a1 + v113);
                    v115 = *(_OWORD *)(a1 + v113 + 56);
                    v116 = *(_OWORD *)(a1 + v113 + 88);
                    *(_OWORD *)(v114 + 224) = *(_OWORD *)(a1 + v113 + 72);
                    *(_OWORD *)(v114 + 240) = v116;
                    *(_QWORD *)(v114 + 256) = *(_QWORD *)(a1 + v113 + 104);
                    v117 = *(_OWORD *)(a1 + v113 + 24);
                    *(_OWORD *)(v114 + 160) = *(_OWORD *)(a1 + v113 + 8);
                    *(_OWORD *)(v114 + 176) = v117;
                    *(_OWORD *)(v114 + 192) = *(_OWORD *)(a1 + v113 + 40);
                    *(_OWORD *)(v114 + 208) = v115;
                    v118 = (void **)(a1 + v113 + 264);
                    if (*(char *)(a1 + v113 + 287) < 0)
                      operator delete(*v118);
                    *(_OWORD *)v118 = *(_OWORD *)(v114 + 112);
                    *(_QWORD *)(a1 + v113 + 280) = *(_QWORD *)(v114 + 128);
                    *(_BYTE *)(v114 + 135) = 0;
                    *(_BYTE *)(v114 + 112) = 0;
                    *(_DWORD *)(v114 + 288) = *(_DWORD *)(v114 + 136);
                    *(_QWORD *)(v114 + 296) = *(_QWORD *)(v114 + 144);
                    if (!v113)
                      break;
                    v119 = a1 + v113;
                    v120 = *(double *)(a1 + v113 - 144);
                    v113 -= 152;
                    if (v109 <= v120)
                    {
                      v121 = a1 + v113 + 152;
                      v122 = (double *)(v119 + 8);
                      v123 = (void **)(v119 + 112);
                      goto LABEL_87;
                    }
                  }
                  v122 = (double *)(a1 + 8);
                  v123 = (void **)(a1 + 112);
                  v121 = a1;
LABEL_87:
                  *(_DWORD *)v121 = v214;
                  *v122 = v109;
                  *(_OWORD *)(v121 + 32) = v231;
                  *(_OWORD *)(v121 + 48) = v239;
                  *(_OWORD *)(v121 + 64) = v247;
                  *(_OWORD *)(v121 + 80) = v255;
                  *(_OWORD *)(v121 + 96) = v263;
                  *(_OWORD *)(v121 + 16) = v223;
                  if (*(char *)(v121 + 135) < 0)
                    operator delete(*v123);
                  *v123 = v110;
                  *(_QWORD *)(v121 + 120) = *(_QWORD *)v277;
                  *(_QWORD *)(v121 + 127) = *(_QWORD *)&v277[7];
                  *(_BYTE *)(v121 + 135) = v111;
                  *(_DWORD *)(v121 + 136) = v112;
                  *(_QWORD *)(v121 + 144) = v209;
                }
                v103 = v108 + 38;
                v106 += 152;
                v107 = (unint64_t)v108;
              }
              while (v108 + 38 != (_DWORD *)a2);
            }
          }
          else if (!v105)
          {
            v179 = v7 - 144;
            do
            {
              v181 = v103;
              v182 = *(double *)(a1 + 160);
              if (v182 > *(double *)(a1 + 8))
              {
                v183 = *v103;
                v225 = *(_OWORD *)(a1 + 168);
                v233 = *(_OWORD *)(a1 + 184);
                v257 = *(_OWORD *)(a1 + 232);
                v265 = *(_OWORD *)(a1 + 248);
                v241 = *(_OWORD *)(a1 + 200);
                v249 = *(_OWORD *)(a1 + 216);
                v184 = *(_QWORD *)(a1 + 264);
                *(_QWORD *)v280 = *(_QWORD *)(a1 + 272);
                *(_QWORD *)&v280[7] = *(_QWORD *)(a1 + 279);
                v185 = *(_BYTE *)(a1 + 287);
                *(_QWORD *)(a1 + 264) = 0;
                *(_QWORD *)(a1 + 272) = 0;
                *(_QWORD *)(a1 + 280) = 0;
                v186 = *(_DWORD *)(a1 + 288);
                v187 = v179;
                v188 = *(_QWORD *)(a1 + 296);
                do
                {
                  v189 = v187;
                  *(_DWORD *)(v187 + 296) = *(_DWORD *)(v187 + 144);
                  v190 = *(_OWORD *)(v187 + 200);
                  v191 = *(_OWORD *)(v187 + 232);
                  *(_OWORD *)(v187 + 368) = *(_OWORD *)(v187 + 216);
                  *(_OWORD *)(v187 + 384) = v191;
                  *(_QWORD *)(v187 + 400) = *(_QWORD *)(v187 + 248);
                  v192 = *(_OWORD *)(v187 + 168);
                  *(_OWORD *)(v187 + 304) = *(_OWORD *)(v187 + 152);
                  *(_OWORD *)(v187 + 320) = v192;
                  *(_OWORD *)(v187 + 336) = *(_OWORD *)(v187 + 184);
                  *(_OWORD *)(v187 + 352) = v190;
                  v193 = v187 + 408;
                  if (*(char *)(v189 + 431) < 0)
                    operator delete(*(void **)v193);
                  *(_OWORD *)v193 = *(_OWORD *)(v189 + 256);
                  *(_QWORD *)(v193 + 16) = *(_QWORD *)(v189 + 272);
                  *(_BYTE *)(v189 + 279) = 0;
                  *(_BYTE *)(v189 + 256) = 0;
                  *(_DWORD *)(v189 + 432) = *(_DWORD *)(v189 + 280);
                  v187 = v189 - 152;
                  v142 = v182 <= *(double *)v189;
                  *(_QWORD *)(v189 + 440) = *(_QWORD *)(v189 + 288);
                }
                while (!v142);
                v180 = v189 + 144;
                *(_DWORD *)(v187 + 296) = v183;
                *(double *)(v187 + 304) = v182;
                *(_OWORD *)(v180 + 16) = v225;
                *(_OWORD *)(v180 + 32) = v233;
                *(_OWORD *)(v180 + 80) = v257;
                *(_OWORD *)(v180 + 96) = v265;
                *(_OWORD *)(v180 + 48) = v241;
                *(_OWORD *)(v180 + 64) = v249;
                if (*(char *)(v187 + 431) < 0)
                  operator delete(*(void **)(v187 + 408));
                *(_QWORD *)(v187 + 408) = v184;
                *(_QWORD *)(v180 + 127) = *(_QWORD *)&v280[7];
                *(_QWORD *)(v180 + 120) = *(_QWORD *)v280;
                *(_BYTE *)(v187 + 431) = v185;
                *(_DWORD *)(v187 + 432) = v186;
                *(_QWORD *)(v187 + 440) = v188;
              }
              v103 = v181 + 38;
              v179 += 152;
              a1 = (uint64_t)v181;
            }
            while (v181 + 38 != (_DWORD *)a2);
          }
          return;
        }
        if (!a3)
        {
          if (v7 != a2)
          {
            v124 = (v9 - 2) >> 1;
            v125 = v124;
            do
            {
              v126 = v125;
              if (v124 >= v125)
              {
                v127 = (2 * v125) | 1;
                v128 = a1 + 152 * v127;
                if (2 * v126 + 2 < (uint64_t)v9 && *(double *)(v128 + 8) > *(double *)(v128 + 160))
                {
                  v128 += 152;
                  v127 = 2 * v126 + 2;
                }
                v129 = a1 + 152 * v126;
                v130 = *(double *)(v129 + 8);
                if (*(double *)(v128 + 8) <= v130)
                {
                  v198 = *(_DWORD *)v129;
                  v224 = *(_OWORD *)(v129 + 16);
                  v232 = *(_OWORD *)(v129 + 32);
                  v256 = *(_OWORD *)(v129 + 80);
                  v264 = *(_OWORD *)(v129 + 96);
                  v240 = *(_OWORD *)(v129 + 48);
                  v248 = *(_OWORD *)(v129 + 64);
                  v215 = *(_QWORD *)(v129 + 112);
                  *(_QWORD *)&v278[7] = *(_QWORD *)(v129 + 127);
                  *(_QWORD *)v278 = *(_QWORD *)(v129 + 120);
                  v210 = *(_BYTE *)(v129 + 135);
                  *(_QWORD *)(v129 + 112) = 0;
                  *(_QWORD *)(v129 + 120) = 0;
                  *(_QWORD *)(v129 + 128) = 0;
                  v205 = *(_DWORD *)(v129 + 136);
                  v201 = *(_QWORD *)(v129 + 144);
                  do
                  {
                    v131 = v129;
                    v129 = v128;
                    *(_DWORD *)v131 = *(_DWORD *)v128;
                    v132 = *(_OWORD *)(v128 + 8);
                    v133 = *(_OWORD *)(v128 + 24);
                    *(_OWORD *)(v131 + 40) = *(_OWORD *)(v128 + 40);
                    *(_OWORD *)(v131 + 24) = v133;
                    *(_OWORD *)(v131 + 8) = v132;
                    v134 = *(_OWORD *)(v128 + 56);
                    v135 = *(_OWORD *)(v128 + 72);
                    v136 = *(_OWORD *)(v128 + 88);
                    *(_QWORD *)(v131 + 104) = *(_QWORD *)(v128 + 104);
                    *(_OWORD *)(v131 + 88) = v136;
                    *(_OWORD *)(v131 + 72) = v135;
                    *(_OWORD *)(v131 + 56) = v134;
                    v137 = (void **)(v131 + 112);
                    if (*(char *)(v131 + 135) < 0)
                      operator delete(*v137);
                    v138 = *(_OWORD *)(v129 + 112);
                    *(_QWORD *)(v131 + 128) = *(_QWORD *)(v129 + 128);
                    *(_OWORD *)v137 = v138;
                    *(_BYTE *)(v129 + 135) = 0;
                    *(_BYTE *)(v129 + 112) = 0;
                    *(_DWORD *)(v131 + 136) = *(_DWORD *)(v129 + 136);
                    *(_QWORD *)(v131 + 144) = *(_QWORD *)(v129 + 144);
                    if (v124 < v127)
                      break;
                    v139 = 2 * v127;
                    v127 = (2 * v127) | 1;
                    v128 = a1 + 152 * v127;
                    v140 = v139 + 2;
                    if (v140 < (uint64_t)v9 && *(double *)(v128 + 8) > *(double *)(v128 + 160))
                    {
                      v128 += 152;
                      v127 = v140;
                    }
                  }
                  while (*(double *)(v128 + 8) <= v130);
                  *(_DWORD *)v129 = v198;
                  *(double *)(v129 + 8) = v130;
                  *(_OWORD *)(v129 + 48) = v240;
                  *(_OWORD *)(v129 + 64) = v248;
                  *(_OWORD *)(v129 + 80) = v256;
                  *(_OWORD *)(v129 + 96) = v264;
                  *(_OWORD *)(v129 + 16) = v224;
                  *(_OWORD *)(v129 + 32) = v232;
                  if (*(char *)(v129 + 135) < 0)
                    operator delete(*(void **)(v129 + 112));
                  *(_QWORD *)(v129 + 112) = v215;
                  *(_QWORD *)(v129 + 120) = *(_QWORD *)v278;
                  *(_QWORD *)(v129 + 127) = *(_QWORD *)&v278[7];
                  *(_BYTE *)(v129 + 135) = v210;
                  *(_DWORD *)(v129 + 136) = v205;
                  *(_QWORD *)(v129 + 144) = v201;
                }
              }
              v125 = v126 - 1;
            }
            while (v126);
            v141 = v8 / 0x98uLL;
            do
            {
              v143 = 0;
              v199 = *(_DWORD *)a1;
              v234 = *(_OWORD *)(a1 + 24);
              v242 = *(_OWORD *)(a1 + 40);
              v226 = *(_OWORD *)(a1 + 8);
              v271 = *(_QWORD *)(a1 + 104);
              v258 = *(_OWORD *)(a1 + 72);
              v266 = *(_OWORD *)(a1 + 88);
              v250 = *(_OWORD *)(a1 + 56);
              v211 = *(_QWORD *)(a1 + 112);
              *(_QWORD *)&v218[7] = *(_QWORD *)(a1 + 127);
              *(_QWORD *)v218 = *(_QWORD *)(a1 + 120);
              v216 = *(_BYTE *)(a1 + 135);
              *(_QWORD *)(a1 + 112) = 0;
              *(_QWORD *)(a1 + 120) = 0;
              *(_QWORD *)(a1 + 128) = 0;
              v206 = *(_DWORD *)(a1 + 136);
              v144 = a1;
              v202 = *(_QWORD *)(a1 + 144);
              do
              {
                v152 = v144 + 152 * v143 + 152;
                v153 = 2 * v143;
                v143 = (2 * v143) | 1;
                v154 = v153 + 2;
                if (v154 < v141 && *(double *)(v152 + 8) > *(double *)(v152 + 160))
                {
                  v152 += 152;
                  v143 = v154;
                }
                *(_DWORD *)v144 = *(_DWORD *)v152;
                v145 = *(_OWORD *)(v152 + 8);
                v146 = *(_OWORD *)(v152 + 24);
                *(_OWORD *)(v144 + 40) = *(_OWORD *)(v152 + 40);
                *(_OWORD *)(v144 + 24) = v146;
                *(_OWORD *)(v144 + 8) = v145;
                v147 = *(_OWORD *)(v152 + 56);
                v148 = *(_OWORD *)(v152 + 72);
                v149 = *(_OWORD *)(v152 + 88);
                *(_QWORD *)(v144 + 104) = *(_QWORD *)(v152 + 104);
                *(_OWORD *)(v144 + 88) = v149;
                *(_OWORD *)(v144 + 72) = v148;
                *(_OWORD *)(v144 + 56) = v147;
                v150 = (void **)(v144 + 112);
                if (*(char *)(v144 + 135) < 0)
                  operator delete(*v150);
                v151 = *(_OWORD *)(v152 + 112);
                *(_QWORD *)(v144 + 128) = *(_QWORD *)(v152 + 128);
                *(_OWORD *)v150 = v151;
                *(_BYTE *)(v152 + 135) = 0;
                *(_BYTE *)(v152 + 112) = 0;
                *(_DWORD *)(v144 + 136) = *(_DWORD *)(v152 + 136);
                *(_QWORD *)(v144 + 144) = *(_QWORD *)(v152 + 144);
                v144 = v152;
              }
              while (v143 <= (uint64_t)((unint64_t)(v141 - 2) >> 1));
              v155 = (double *)(v152 + 8);
              v156 = (void **)(v152 + 112);
              v157 = a2 - 152;
              if (v152 == a2 - 152)
              {
                *(_DWORD *)v152 = v199;
                *(_OWORD *)(v152 + 24) = v234;
                *(_OWORD *)(v152 + 40) = v242;
                *(_OWORD *)v155 = v226;
                *(_QWORD *)(v152 + 104) = v271;
                *(_OWORD *)(v152 + 72) = v258;
                *(_OWORD *)(v152 + 88) = v266;
                *(_OWORD *)(v152 + 56) = v250;
                if (*(char *)(v152 + 135) < 0)
                  operator delete(*v156);
                *(_QWORD *)(v152 + 112) = v211;
                *(_QWORD *)(v152 + 120) = *(_QWORD *)v218;
                *(_QWORD *)(v152 + 127) = *(_QWORD *)&v218[7];
                *(_BYTE *)(v152 + 135) = v216;
                *(_DWORD *)(v152 + 136) = v206;
                *(_QWORD *)(v152 + 144) = v202;
              }
              else
              {
                *(_DWORD *)v152 = *(_DWORD *)(a2 - 152);
                v158 = *(_OWORD *)(a2 - 144);
                v159 = *(_OWORD *)(a2 - 112);
                *(_OWORD *)(v152 + 24) = *(_OWORD *)(a2 - 128);
                *(_OWORD *)(v152 + 40) = v159;
                *(_OWORD *)v155 = v158;
                v160 = *(_OWORD *)(a2 - 96);
                v161 = *(_OWORD *)(a2 - 80);
                v162 = *(_OWORD *)(a2 - 64);
                *(_QWORD *)(v152 + 104) = *(_QWORD *)(a2 - 48);
                *(_OWORD *)(v152 + 72) = v161;
                *(_OWORD *)(v152 + 88) = v162;
                *(_OWORD *)(v152 + 56) = v160;
                if (*(char *)(v152 + 135) < 0)
                  operator delete(*v156);
                v163 = a2 - 144;
                v164 = *(_OWORD *)(a2 - 40);
                *(_QWORD *)(v152 + 128) = *(_QWORD *)(a2 - 24);
                *(_OWORD *)v156 = v164;
                *(_BYTE *)(a2 - 17) = 0;
                *(_BYTE *)(a2 - 40) = 0;
                *(_DWORD *)(v152 + 136) = *(_DWORD *)(a2 - 16);
                *(_QWORD *)(v152 + 144) = *(_QWORD *)(a2 - 8);
                *(_DWORD *)(a2 - 152) = v199;
                *(_OWORD *)v163 = v226;
                *(_OWORD *)(v163 + 16) = v234;
                *(_OWORD *)(v163 + 32) = v242;
                *(_QWORD *)(v163 + 96) = v271;
                *(_OWORD *)(v163 + 64) = v258;
                *(_OWORD *)(v163 + 80) = v266;
                *(_OWORD *)(v163 + 48) = v250;
                if (*(char *)(a2 - 17) < 0)
                  operator delete(*(void **)(a2 - 40));
                *(_QWORD *)(a2 - 40) = v211;
                *(_QWORD *)(a2 - 25) = *(_QWORD *)&v218[7];
                *(_QWORD *)(a2 - 32) = *(_QWORD *)v218;
                *(_BYTE *)(a2 - 17) = v216;
                *(_DWORD *)(a2 - 16) = v206;
                *(_QWORD *)(a2 - 8) = v202;
                v165 = v152 + 152 - a1;
                if (v165 >= 153)
                {
                  v166 = (v165 / 0x98uLL - 2) >> 1;
                  v167 = a1 + 152 * v166;
                  v168 = *v155;
                  if (*(double *)(v167 + 8) > *v155)
                  {
                    v169 = *(_DWORD *)v152;
                    v279 = *(_OWORD *)(v152 + 16);
                    v283 = *(_OWORD *)(v152 + 32);
                    v292 = *(_OWORD *)(v152 + 80);
                    v295 = *(_OWORD *)(v152 + 96);
                    v286 = *(_OWORD *)(v152 + 48);
                    v289 = *(_OWORD *)(v152 + 64);
                    v212 = *(_QWORD *)(v152 + 112);
                    v217 = a2 - 152;
                    *(_QWORD *)&v274[7] = *(_QWORD *)(v152 + 127);
                    *(_QWORD *)v274 = *(_QWORD *)(v152 + 120);
                    v207 = *(_BYTE *)(v152 + 135);
                    *v156 = 0;
                    *(_QWORD *)(v152 + 120) = 0;
                    *(_QWORD *)(v152 + 128) = 0;
                    v203 = *(_DWORD *)(v152 + 136);
                    v170 = *(_QWORD *)(v152 + 144);
                    do
                    {
                      v171 = v167;
                      *(_DWORD *)v152 = *(_DWORD *)v167;
                      v172 = *(_OWORD *)(v167 + 8);
                      v173 = *(_OWORD *)(v167 + 24);
                      *(_OWORD *)(v152 + 40) = *(_OWORD *)(v167 + 40);
                      *(_OWORD *)(v152 + 24) = v173;
                      *(_OWORD *)(v152 + 8) = v172;
                      v174 = *(_OWORD *)(v167 + 56);
                      v175 = *(_OWORD *)(v167 + 72);
                      v176 = *(_OWORD *)(v167 + 88);
                      *(_QWORD *)(v152 + 104) = *(_QWORD *)(v167 + 104);
                      *(_OWORD *)(v152 + 88) = v176;
                      *(_OWORD *)(v152 + 72) = v175;
                      *(_OWORD *)(v152 + 56) = v174;
                      v177 = (void **)(v152 + 112);
                      if (*(char *)(v152 + 135) < 0)
                        operator delete(*v177);
                      v178 = *(_OWORD *)(v171 + 112);
                      *(_QWORD *)(v152 + 128) = *(_QWORD *)(v171 + 128);
                      *(_OWORD *)v177 = v178;
                      *(_BYTE *)(v171 + 135) = 0;
                      *(_BYTE *)(v171 + 112) = 0;
                      *(_DWORD *)(v152 + 136) = *(_DWORD *)(v171 + 136);
                      *(_QWORD *)(v152 + 144) = *(_QWORD *)(v171 + 144);
                      if (!v166)
                        break;
                      v166 = (v166 - 1) >> 1;
                      v167 = a1 + 152 * v166;
                      v152 = v171;
                    }
                    while (*(double *)(v167 + 8) > v168);
                    *(_DWORD *)v171 = v169;
                    *(double *)(v171 + 8) = v168;
                    *(_OWORD *)(v171 + 48) = v286;
                    *(_OWORD *)(v171 + 64) = v289;
                    *(_OWORD *)(v171 + 80) = v292;
                    *(_OWORD *)(v171 + 96) = v295;
                    *(_OWORD *)(v171 + 16) = v279;
                    *(_OWORD *)(v171 + 32) = v283;
                    if (*(char *)(v171 + 135) < 0)
                      operator delete(*(void **)(v171 + 112));
                    v157 = v217;
                    *(_QWORD *)(v171 + 112) = v212;
                    *(_QWORD *)(v171 + 120) = *(_QWORD *)v274;
                    *(_QWORD *)(v171 + 127) = *(_QWORD *)&v274[7];
                    *(_BYTE *)(v171 + 135) = v207;
                    *(_DWORD *)(v171 + 136) = v203;
                    *(_QWORD *)(v171 + 144) = v170;
                  }
                }
              }
              a2 = v157;
              v142 = v141-- <= 2;
            }
            while (!v142);
          }
          return;
        }
        v10 = v7 + 152 * (v9 >> 1);
        if ((unint64_t)v8 < 0x4C01)
        {
          sub_19C440BC4((int *)(a1 + 152 * (v9 >> 1)), (int *)a1, v204);
        }
        else
        {
          sub_19C440BC4((int *)a1, (int *)(a1 + 152 * (v9 >> 1)), v204);
          v11 = 152 * (v9 >> 1);
          sub_19C440BC4((int *)(a1 + 152), (int *)(v11 + a1 - 152), v200);
          sub_19C440BC4((int *)(a1 + 304), (int *)(a1 + 152 + v11), v197);
          sub_19C440BC4((int *)(v11 + a1 - 152), (int *)(a1 + v11), (int *)(a1 + 152 + v11));
          v12 = *(_DWORD *)a1;
          *(_DWORD *)a1 = *(_DWORD *)v10;
          *(_DWORD *)v10 = v12;
          v267 = *(_QWORD *)(a1 + 104);
          v219 = *(_OWORD *)(a1 + 8);
          v227 = *(_OWORD *)(a1 + 24);
          v251 = *(_OWORD *)(a1 + 72);
          v259 = *(_OWORD *)(a1 + 88);
          v235 = *(_OWORD *)(a1 + 40);
          v243 = *(_OWORD *)(a1 + 56);
          v13 = *(_OWORD *)(v10 + 72);
          v14 = *(_OWORD *)(v10 + 88);
          v15 = *(_QWORD *)(v10 + 104);
          *(_OWORD *)(a1 + 56) = *(_OWORD *)(v10 + 56);
          *(_QWORD *)(a1 + 104) = v15;
          *(_OWORD *)(a1 + 88) = v14;
          *(_OWORD *)(a1 + 72) = v13;
          v16 = *(_OWORD *)(v10 + 8);
          v17 = *(_OWORD *)(v10 + 24);
          *(_OWORD *)(a1 + 40) = *(_OWORD *)(v10 + 40);
          *(_OWORD *)(a1 + 24) = v17;
          *(_OWORD *)(a1 + 8) = v16;
          *(_OWORD *)(v10 + 40) = v235;
          *(_OWORD *)(v10 + 24) = v227;
          *(_OWORD *)(v10 + 8) = v219;
          *(_QWORD *)(v10 + 104) = v267;
          *(_OWORD *)(v10 + 88) = v259;
          *(_OWORD *)(v10 + 72) = v251;
          *(_OWORD *)(v10 + 56) = v243;
          v18 = *(_OWORD *)(a1 + 112);
          v19 = *(_QWORD *)(a1 + 128);
          v20 = *(_QWORD *)(v10 + 128);
          *(_OWORD *)(a1 + 112) = *(_OWORD *)(v10 + 112);
          *(_QWORD *)(a1 + 128) = v20;
          *(_QWORD *)(v10 + 128) = v19;
          *(_OWORD *)(v10 + 112) = v18;
          LODWORD(v19) = *(_DWORD *)(a1 + 136);
          *(_DWORD *)(a1 + 136) = *(_DWORD *)(v10 + 136);
          *(_DWORD *)(v10 + 136) = v19;
          v21 = *(_QWORD *)(a1 + 144);
          *(_QWORD *)(a1 + 144) = *(_QWORD *)(v10 + 144);
          *(_QWORD *)(v10 + 144) = v21;
        }
        v213 = --a3;
        if ((a4 & 1) == 0)
        {
          v22 = *(double *)(a1 + 8);
          if (*(double *)(a1 - 144) > v22)
            goto LABEL_11;
          v61 = *(_DWORD *)a1;
          v291 = *(_OWORD *)(a1 + 80);
          v294 = *(_OWORD *)(a1 + 96);
          v285 = *(_OWORD *)(a1 + 48);
          v288 = *(_OWORD *)(a1 + 64);
          v276 = *(_OWORD *)(a1 + 16);
          v282 = *(_OWORD *)(a1 + 32);
          v62 = (void **)(a1 + 112);
          v63 = *(_QWORD *)(a1 + 112);
          *(_QWORD *)v273 = *(_QWORD *)(a1 + 120);
          *(_QWORD *)&v273[7] = *(_QWORD *)(a1 + 127);
          v64 = *(_BYTE *)(a1 + 135);
          *(_QWORD *)(a1 + 112) = 0;
          *(_QWORD *)(a1 + 120) = 0;
          *(_QWORD *)(a1 + 128) = 0;
          if (v22 <= *(double *)v194)
          {
            v67 = a1 + 152;
            do
            {
              v7 = v67;
              if (v67 >= a2)
                break;
              v68 = *(double *)(v67 + 8);
              v67 += 152;
            }
            while (v22 <= v68);
          }
          else
          {
            v65 = a1;
            do
            {
              v7 = v65 + 152;
              v66 = *(double *)(v65 + 160);
              v65 += 152;
            }
            while (v22 <= v66);
          }
          v69 = a2;
          if (v7 < a2)
          {
            v70 = a2;
            do
            {
              v69 = v70 - 152;
              v71 = *(double *)(v70 - 144);
              v70 -= 152;
            }
            while (v22 > v71);
          }
          v72 = *(_DWORD *)(a1 + 136);
          v73 = *(_QWORD *)(a1 + 144);
          while (v7 < v69)
          {
            v74 = *(_DWORD *)v7;
            *(_DWORD *)v7 = *(_DWORD *)v69;
            *(_DWORD *)v69 = v74;
            v269 = *(_QWORD *)(v7 + 104);
            v221 = *(_OWORD *)(v7 + 8);
            v229 = *(_OWORD *)(v7 + 24);
            v253 = *(_OWORD *)(v7 + 72);
            v261 = *(_OWORD *)(v7 + 88);
            v237 = *(_OWORD *)(v7 + 40);
            v245 = *(_OWORD *)(v7 + 56);
            v75 = *(_OWORD *)(v69 + 72);
            v76 = *(_OWORD *)(v69 + 88);
            v77 = *(_QWORD *)(v69 + 104);
            *(_OWORD *)(v7 + 56) = *(_OWORD *)(v69 + 56);
            *(_QWORD *)(v7 + 104) = v77;
            *(_OWORD *)(v7 + 88) = v76;
            *(_OWORD *)(v7 + 72) = v75;
            v78 = *(_OWORD *)(v69 + 8);
            v79 = *(_OWORD *)(v69 + 24);
            *(_OWORD *)(v7 + 40) = *(_OWORD *)(v69 + 40);
            *(_OWORD *)(v7 + 24) = v79;
            *(_OWORD *)(v7 + 8) = v78;
            *(_QWORD *)(v69 + 104) = v269;
            *(_OWORD *)(v69 + 40) = v237;
            *(_OWORD *)(v69 + 24) = v229;
            *(_OWORD *)(v69 + 8) = v221;
            *(_OWORD *)(v69 + 88) = v261;
            *(_OWORD *)(v69 + 72) = v253;
            *(_OWORD *)(v69 + 56) = v245;
            v80 = *(_QWORD *)(v7 + 128);
            v81 = *(_OWORD *)(v7 + 112);
            v82 = *(_QWORD *)(v69 + 128);
            *(_OWORD *)(v7 + 112) = *(_OWORD *)(v69 + 112);
            *(_QWORD *)(v7 + 128) = v82;
            *(_OWORD *)(v69 + 112) = v81;
            *(_QWORD *)(v69 + 128) = v80;
            LODWORD(v80) = *(_DWORD *)(v7 + 136);
            *(_DWORD *)(v7 + 136) = *(_DWORD *)(v69 + 136);
            *(_DWORD *)(v69 + 136) = v80;
            v83 = *(_QWORD *)(v7 + 144);
            *(_QWORD *)(v7 + 144) = *(_QWORD *)(v69 + 144);
            *(_QWORD *)(v69 + 144) = v83;
            do
            {
              v84 = *(double *)(v7 + 160);
              v7 += 152;
            }
            while (v22 <= v84);
            do
            {
              v85 = *(double *)(v69 - 144);
              v69 -= 152;
            }
            while (v22 > v85);
          }
          if (v7 - 152 != a1)
          {
            *(_DWORD *)a1 = *(_DWORD *)(v7 - 152);
            v86 = *(_OWORD *)(v7 - 144);
            v87 = *(_OWORD *)(v7 - 112);
            *(_OWORD *)(a1 + 24) = *(_OWORD *)(v7 - 128);
            *(_OWORD *)(a1 + 40) = v87;
            *(_OWORD *)(a1 + 8) = v86;
            v88 = *(_OWORD *)(v7 - 96);
            v89 = *(_OWORD *)(v7 - 80);
            v90 = *(_OWORD *)(v7 - 64);
            *(_QWORD *)(a1 + 104) = *(_QWORD *)(v7 - 48);
            *(_OWORD *)(a1 + 72) = v89;
            *(_OWORD *)(a1 + 88) = v90;
            *(_OWORD *)(a1 + 56) = v88;
            if (*(char *)(a1 + 135) < 0)
              operator delete(*v62);
            v91 = *(_OWORD *)(v7 - 40);
            *(_QWORD *)(a1 + 128) = *(_QWORD *)(v7 - 24);
            *(_OWORD *)v62 = v91;
            *(_BYTE *)(v7 - 17) = 0;
            *(_BYTE *)(v7 - 40) = 0;
            *(_DWORD *)(a1 + 136) = *(_DWORD *)(v7 - 16);
            *(_QWORD *)(a1 + 144) = *(_QWORD *)(v7 - 8);
          }
          *(_DWORD *)(v7 - 152) = v61;
          *(double *)(v7 - 144) = v22;
          *(_OWORD *)(v7 - 120) = v282;
          *(_OWORD *)(v7 - 136) = v276;
          *(_OWORD *)(v7 - 56) = v294;
          *(_OWORD *)(v7 - 72) = v291;
          *(_OWORD *)(v7 - 88) = v288;
          *(_OWORD *)(v7 - 104) = v285;
          if (*(char *)(v7 - 17) < 0)
            operator delete(*(void **)(v7 - 40));
          a4 = 0;
          *(_QWORD *)(v7 - 40) = v63;
          *(_QWORD *)(v7 - 25) = *(_QWORD *)&v273[7];
          *(_QWORD *)(v7 - 32) = *(_QWORD *)v273;
          *(_BYTE *)(v7 - 17) = v64;
          *(_DWORD *)(v7 - 16) = v72;
          *(_QWORD *)(v7 - 8) = v73;
          continue;
        }
        v22 = *(double *)(a1 + 8);
LABEL_11:
        v23 = *(_DWORD *)a1;
        v290 = *(_OWORD *)(a1 + 80);
        v293 = *(_OWORD *)(a1 + 96);
        v284 = *(_OWORD *)(a1 + 48);
        v287 = *(_OWORD *)(a1 + 64);
        v25 = (void **)(a1 + 112);
        v24 = *(_QWORD *)(a1 + 112);
        v275 = *(_OWORD *)(a1 + 16);
        v281 = *(_OWORD *)(a1 + 32);
        *(_QWORD *)v272 = *(_QWORD *)(a1 + 120);
        *(_QWORD *)&v272[7] = *(_QWORD *)(a1 + 127);
        v26 = *(_BYTE *)(a1 + 135);
        *(_QWORD *)(a1 + 112) = 0;
        *(_QWORD *)(a1 + 120) = 0;
        *(_QWORD *)(a1 + 128) = 0;
        v27 = *(_DWORD *)(a1 + 136);
        v28 = a1;
        v29 = *(_QWORD *)(a1 + 144);
        do
        {
          v30 = v28;
          v28 += 152;
        }
        while (*(double *)(v30 + 160) > v22);
        v31 = a2;
        if (v30 == a1)
        {
          v34 = a2;
          while (v28 < v34)
          {
            v32 = v34 - 152;
            v35 = *(double *)(v34 - 144);
            v34 -= 152;
            if (v35 > v22)
              goto LABEL_21;
          }
          v32 = v34;
        }
        else
        {
          do
          {
            v32 = v31 - 152;
            v33 = *(double *)(v31 - 144);
            v31 -= 152;
          }
          while (v33 <= v22);
        }
LABEL_21:
        v7 = v28;
        if (v28 < v32)
        {
          v36 = v32;
          do
          {
            v37 = *(_DWORD *)v7;
            *(_DWORD *)v7 = *(_DWORD *)v36;
            *(_DWORD *)v36 = v37;
            v268 = *(_QWORD *)(v7 + 104);
            v220 = *(_OWORD *)(v7 + 8);
            v228 = *(_OWORD *)(v7 + 24);
            v252 = *(_OWORD *)(v7 + 72);
            v260 = *(_OWORD *)(v7 + 88);
            v236 = *(_OWORD *)(v7 + 40);
            v244 = *(_OWORD *)(v7 + 56);
            v38 = *(_OWORD *)(v36 + 72);
            v39 = *(_OWORD *)(v36 + 88);
            v40 = *(_QWORD *)(v36 + 104);
            *(_OWORD *)(v7 + 56) = *(_OWORD *)(v36 + 56);
            *(_QWORD *)(v7 + 104) = v40;
            *(_OWORD *)(v7 + 88) = v39;
            *(_OWORD *)(v7 + 72) = v38;
            v41 = *(_OWORD *)(v36 + 8);
            v42 = *(_OWORD *)(v36 + 24);
            *(_OWORD *)(v7 + 40) = *(_OWORD *)(v36 + 40);
            *(_OWORD *)(v7 + 24) = v42;
            *(_OWORD *)(v7 + 8) = v41;
            *(_QWORD *)(v36 + 104) = v268;
            *(_OWORD *)(v36 + 40) = v236;
            *(_OWORD *)(v36 + 24) = v228;
            *(_OWORD *)(v36 + 8) = v220;
            *(_OWORD *)(v36 + 88) = v260;
            *(_OWORD *)(v36 + 72) = v252;
            *(_OWORD *)(v36 + 56) = v244;
            v43 = *(_QWORD *)(v7 + 128);
            v44 = *(_OWORD *)(v7 + 112);
            v45 = *(_QWORD *)(v36 + 128);
            *(_OWORD *)(v7 + 112) = *(_OWORD *)(v36 + 112);
            *(_QWORD *)(v7 + 128) = v45;
            *(_OWORD *)(v36 + 112) = v44;
            *(_QWORD *)(v36 + 128) = v43;
            LODWORD(v43) = *(_DWORD *)(v7 + 136);
            *(_DWORD *)(v7 + 136) = *(_DWORD *)(v36 + 136);
            *(_DWORD *)(v36 + 136) = v43;
            v46 = *(_QWORD *)(v7 + 144);
            *(_QWORD *)(v7 + 144) = *(_QWORD *)(v36 + 144);
            *(_QWORD *)(v36 + 144) = v46;
            do
            {
              v47 = *(double *)(v7 + 160);
              v7 += 152;
            }
            while (v47 > v22);
            do
            {
              v48 = *(double *)(v36 - 144);
              v36 -= 152;
            }
            while (v48 <= v22);
          }
          while (v7 < v36);
        }
        if (v7 - 152 != a1)
        {
          *(_DWORD *)a1 = *(_DWORD *)(v7 - 152);
          v49 = *(_OWORD *)(v7 - 144);
          v50 = *(_OWORD *)(v7 - 112);
          *(_OWORD *)(a1 + 24) = *(_OWORD *)(v7 - 128);
          *(_OWORD *)(a1 + 40) = v50;
          *(_OWORD *)(a1 + 8) = v49;
          v51 = *(_OWORD *)(v7 - 96);
          v52 = *(_OWORD *)(v7 - 80);
          v53 = *(_OWORD *)(v7 - 64);
          *(_QWORD *)(a1 + 104) = *(_QWORD *)(v7 - 48);
          *(_OWORD *)(a1 + 72) = v52;
          *(_OWORD *)(a1 + 88) = v53;
          *(_OWORD *)(a1 + 56) = v51;
          if (*(char *)(a1 + 135) < 0)
          {
            v195 = v26;
            v54 = v24;
            v196 = a2;
            v55 = v23;
            v56 = v29;
            operator delete(*v25);
            v29 = v56;
            v23 = v55;
            a2 = v196;
            v24 = v54;
            v26 = v195;
          }
          v57 = *(_OWORD *)(v7 - 40);
          *(_QWORD *)(a1 + 128) = *(_QWORD *)(v7 - 24);
          *(_OWORD *)v25 = v57;
          *(_BYTE *)(v7 - 17) = 0;
          *(_BYTE *)(v7 - 40) = 0;
          *(_DWORD *)(a1 + 136) = *(_DWORD *)(v7 - 16);
          *(_QWORD *)(a1 + 144) = *(_QWORD *)(v7 - 8);
        }
        *(_DWORD *)(v7 - 152) = v23;
        *(double *)(v7 - 144) = v22;
        *(_OWORD *)(v7 - 120) = v281;
        *(_OWORD *)(v7 - 136) = v275;
        *(_OWORD *)(v7 - 56) = v293;
        *(_OWORD *)(v7 - 72) = v290;
        *(_OWORD *)(v7 - 88) = v287;
        *(_OWORD *)(v7 - 104) = v284;
        if (*(char *)(v7 - 17) < 0)
        {
          v58 = v24;
          v59 = v29;
          operator delete(*(void **)(v7 - 40));
          v29 = v59;
          v24 = v58;
        }
        *(_QWORD *)(v7 - 40) = v24;
        *(_QWORD *)(v7 - 25) = *(_QWORD *)&v272[7];
        *(_QWORD *)(v7 - 32) = *(_QWORD *)v272;
        *(_BYTE *)(v7 - 17) = v26;
        *(_DWORD *)(v7 - 16) = v27;
        *(_QWORD *)(v7 - 8) = v29;
        a3 = v213;
        if (v28 < v32)
        {
LABEL_36:
          sub_19C43F2A0(a1, v7 - 152, v213, a4 & 1);
          a4 = 0;
          continue;
        }
        v60 = sub_19C4415FC(a1, v7 - 152);
        if (!sub_19C4415FC(v7, a2))
        {
          if (v60)
            continue;
          goto LABEL_36;
        }
        a2 = v7 - 152;
        if (!v60)
          goto LABEL_1;
        return;
    }
  }
}

  v141 = a2 - 1;
  v138 = a2 - 3;
  v139 = a2 - 2;
  v7 = a1;
  while (2)
  {
    a1 = v7;
    v8 = (char *)a2 - (char *)v7;
    v9 = a2 - v7;
    switch(v9)
    {
      case 0:
      case 1:
        return;
      case 2:
        v65 = *v7;
        if (*(double *)(*v141 + 48) > *(double *)(*v7 + 48))
        {
          *v7 = 0;
          v66 = *v141;
          *v141 = 0;
          v67 = *v7;
          *v7 = v66;
          if (v67)
          {
            v68 = sub_19C296378(v67);
            MEMORY[0x1A1AD355C](v68, 0x1032C4057ACE4D0);
          }
          v69 = *v141;
          *v141 = v65;
          if (v69)
          {
            sub_19C296378(v69);
            JUMPOUT(0x1A1AD355CLL);
          }
        }
        return;
      case 3:
        sub_19C30D0D4(v7, v7 + 1, v141);
        return;
      case 4:
        sub_19C30D2CC(v7, v7 + 1, v7 + 2, v141);
        return;
      case 5:
        sub_19C30D45C(v7, v7 + 1, v7 + 2, v7 + 3, v141);
        return;
      default:
        if (v8 <= 191)
        {
          v70 = v7 + 1;
          v72 = v7 == a2 || v70 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v72)
            {
              v73 = 0;
              v74 = v7;
              do
              {
                v75 = *v74;
                v76 = v74[1];
                v74 = v70;
                if (*(double *)(v76 + 48) > *(double *)(v75 + 48))
                {
                  v77 = a2;
                  v78 = 0;
                  *v70 = 0;
                  for (i = v73; ; i -= 8)
                  {
                    v80 = (uint64_t *)((char *)a1 + i);
                    *v80 = 0;
                    v80[1] = v75;
                    if (v78)
                    {
                      v81 = sub_19C296378(v78);
                      MEMORY[0x1A1AD355C](v81, 0x1032C4057ACE4D0);
                    }
                    if (!i)
                      break;
                    v82 = (uint64_t *)((char *)a1 + i);
                    v75 = *(uint64_t *)((char *)a1 + i - 8);
                    if (*(double *)(v76 + 48) <= *(double *)(v75 + 48))
                      goto LABEL_95;
                    v78 = *v80;
                  }
                  v82 = a1;
LABEL_95:
                  v83 = *v82;
                  *v82 = v76;
                  a2 = v77;
                  if (v83)
                  {
                    v84 = sub_19C296378(v83);
                    MEMORY[0x1A1AD355C](v84, 0x1032C4057ACE4D0);
                  }
                }
                v70 = v74 + 1;
                v73 += 8;
              }
              while (v74 + 1 != a2);
            }
          }
          else if (!v72)
          {
            do
            {
              v128 = a1;
              a1 = v70;
              v129 = *v128;
              v130 = v128[1];
              v131 = *(double *)(v130 + 48);
              if (v131 > *(double *)(*v128 + 48))
              {
                *a1 = 0;
                *v128 = 0;
                v128[1] = v129;
                while (1)
                {
                  v134 = v128 - 1;
                  v133 = *(v128 - 1);
                  if (v131 <= *(double *)(v133 + 48))
                    break;
                  v135 = *v128--;
                  *v134 = 0;
                  v134[1] = v133;
                  if (v135)
                  {
                    v132 = sub_19C296378(v135);
                    MEMORY[0x1A1AD355C](v132, 0x1032C4057ACE4D0);
                    v131 = *(double *)(v130 + 48);
                  }
                }
                v136 = *v128;
                *v128 = v130;
                if (v136)
                {
                  v137 = sub_19C296378(v136);
                  MEMORY[0x1A1AD355C](v137, 0x1032C4057ACE4D0);
                }
              }
              v70 = a1 + 1;
            }
            while (a1 + 1 != a2);
          }
          return;
        }
        if (!a3)
        {
          if (v7 == a2)
            return;
          v85 = (unint64_t)(v9 - 2) >> 1;
          v86 = v85;
          do
          {
            v87 = v86;
            if (v85 >= v86)
            {
              v88 = (2 * v86) | 1;
              v89 = &a1[v88];
              if (2 * v87 + 2 < v9 && *(double *)(*v89 + 48) > *(double *)(v89[1] + 48))
              {
                ++v89;
                v88 = 2 * v87 + 2;
              }
              v90 = &a1[v87];
              v91 = *v90;
              if (*(double *)(*v89 + 48) <= *(double *)(*v90 + 48))
              {
                *v90 = 0;
                v92 = *v89;
                do
                {
                  v93 = v89;
                  *v89 = 0;
                  v94 = *v90;
                  *v90 = v92;
                  if (v94)
                  {
                    v95 = sub_19C296378(v94);
                    MEMORY[0x1A1AD355C](v95, 0x1032C4057ACE4D0);
                  }
                  if (v85 < v88)
                    break;
                  v96 = 2 * v88;
                  v88 = (2 * v88) | 1;
                  v89 = &a1[v88];
                  v97 = v96 + 2;
                  if (v97 < v9 && *(double *)(*v89 + 48) > *(double *)(v89[1] + 48))
                  {
                    ++v89;
                    v88 = v97;
                  }
                  v92 = *v89;
                  v90 = v93;
                }
                while (*(double *)(*v89 + 48) <= *(double *)(v91 + 48));
                v98 = *v93;
                *v93 = v91;
                if (v98)
                {
                  v99 = sub_19C296378(v98);
                  MEMORY[0x1A1AD355C](v99, 0x1032C4057ACE4D0);
                }
              }
            }
            v86 = v87 - 1;
          }
          while (v87);
          v100 = (unint64_t)v8 >> 3;
          while (2)
          {
            v104 = a2;
            v105 = 0;
            v106 = *a1;
            *a1 = 0;
            v107 = a1;
            do
            {
              v108 = &v107[v105 + 1];
              v109 = 2 * v105;
              v105 = (2 * v105) | 1;
              v110 = v109 + 2;
              if (v110 < v100 && *(double *)(*v108 + 48) > *(double *)(v108[1] + 48))
              {
                ++v108;
                v105 = v110;
              }
              v111 = *v108;
              *v108 = 0;
              v112 = *v107;
              *v107 = v111;
              if (v112)
              {
                v113 = sub_19C296378(v112);
                MEMORY[0x1A1AD355C](v113, 0x1032C4057ACE4D0);
              }
              v107 = v108;
            }
            while (v105 <= (uint64_t)((unint64_t)(v100 - 2) >> 1));
            --a2;
            if (v108 == v104 - 1)
            {
              v101 = *v108;
              *v108 = v106;
              if (!v101)
                goto LABEL_118;
            }
            else
            {
              v114 = *a2;
              *a2 = 0;
              v115 = *v108;
              *v108 = v114;
              if (v115)
              {
                v116 = sub_19C296378(v115);
                MEMORY[0x1A1AD355C](v116, 0x1032C4057ACE4D0);
              }
              v117 = *a2;
              *a2 = v106;
              if (v117)
              {
                v118 = sub_19C296378(v117);
                MEMORY[0x1A1AD355C](v118, 0x1032C4057ACE4D0);
              }
              v119 = (char *)(v108 + 1) - (char *)a1;
              if (v119 < 9)
                goto LABEL_118;
              v120 = (((unint64_t)v119 >> 3) - 2) >> 1;
              v121 = &a1[v120];
              v122 = *v108;
              if (*(double *)(*v121 + 48) <= *(double *)(*v108 + 48))
                goto LABEL_118;
              v123 = v104 - 1;
              *v108 = 0;
              v124 = *v121;
              do
              {
                v125 = v121;
                *v121 = 0;
                v126 = *v108;
                *v108 = v124;
                if (v126)
                {
                  v127 = sub_19C296378(v126);
                  MEMORY[0x1A1AD355C](v127, 0x1032C4057ACE4D0);
                }
                if (!v120)
                  break;
                v120 = (v120 - 1) >> 1;
                v121 = &a1[v120];
                v124 = *v121;
                v108 = v125;
              }
              while (*(double *)(*v121 + 48) > *(double *)(v122 + 48));
              v101 = *v125;
              *v125 = v122;
              a2 = v123;
              if (!v101)
              {
LABEL_118:
                if (v100-- <= 2)
                  return;
                continue;
              }
            }
            break;
          }
          v102 = sub_19C296378(v101);
          MEMORY[0x1A1AD355C](v102, 0x1032C4057ACE4D0);
          goto LABEL_118;
        }
        v10 = (unint64_t)v9 >> 1;
        v11 = &v7[(unint64_t)v9 >> 1];
        if ((unint64_t)v8 < 0x401)
        {
          sub_19C30D0D4(v11, v7, v141);
        }
        else
        {
          sub_19C30D0D4(v7, v11, v141);
          v12 = v10;
          v13 = &v7[v12];
          sub_19C30D0D4(v7 + 1, &v7[v12 - 1], v139);
          sub_19C30D0D4(v7 + 2, &v7[v12 + 1], v138);
          sub_19C30D0D4(&v7[v12 - 1], v11, &v7[v12 + 1]);
          v14 = *v7;
          *v7 = 0;
          v15 = *v13;
          *v13 = 0;
          v16 = *v7;
          *v7 = v15;
          if (v16)
          {
            v17 = sub_19C296378(v16);
            MEMORY[0x1A1AD355C](v17, 0x1032C4057ACE4D0);
          }
          v18 = *v11;
          *v11 = v14;
          if (v18)
          {
            v19 = sub_19C296378(v18);
            MEMORY[0x1A1AD355C](v19, 0x1032C4057ACE4D0);
          }
        }
        --a3;
        v20 = *v7;
        if ((a4 & 1) == 0)
        {
          v21 = *(double *)(v20 + 48);
          if (*(double *)(*(v7 - 1) + 48) > v21)
            goto LABEL_14;
          *v7 = 0;
          if (v21 <= *(double *)(*v141 + 48))
          {
            v47 = v7 + 1;
            do
            {
              v7 = v47;
              if (v47 >= a2)
                break;
              ++v47;
            }
            while (v21 <= *(double *)(*v7 + 48));
          }
          else
          {
            do
            {
              v46 = v7[1];
              ++v7;
            }
            while (v21 <= *(double *)(v46 + 48));
          }
          v48 = a2;
          if (v7 < a2)
          {
            v48 = a2;
            do
              v49 = *--v48;
            while (v21 > *(double *)(v49 + 48));
          }
          if (v7 < v48)
          {
            v50 = *v7;
            do
            {
              *v7 = 0;
              v51 = *v48;
              *v48 = 0;
              v52 = *v7;
              *v7 = v51;
              if (v52)
              {
                v53 = sub_19C296378(v52);
                MEMORY[0x1A1AD355C](v53, 0x1032C4057ACE4D0);
              }
              v54 = *v48;
              *v48 = v50;
              if (v54)
              {
                v55 = sub_19C296378(v54);
                MEMORY[0x1A1AD355C](v55, 0x1032C4057ACE4D0);
              }
              v56 = *(double *)(v20 + 48);
              do
              {
                v57 = v7[1];
                ++v7;
                v50 = v57;
              }
              while (v56 <= *(double *)(v57 + 48));
              do
                v58 = *--v48;
              while (v56 > *(double *)(v58 + 48));
            }
            while (v7 < v48);
          }
          v59 = v7 - 1;
          if (v7 - 1 != a1)
          {
            v60 = *v59;
            *v59 = 0;
            v61 = *a1;
            *a1 = v60;
            if (v61)
            {
              v62 = sub_19C296378(v61);
              MEMORY[0x1A1AD355C](v62, 0x1032C4057ACE4D0);
            }
          }
          a4 = 0;
          v63 = *v59;
          *v59 = v20;
          if (v63)
          {
            v64 = sub_19C296378(v63);
            MEMORY[0x1A1AD355C](v64, 0x1032C4057ACE4D0);
            a4 = 0;
          }
          continue;
        }
        v21 = *(double *)(v20 + 48);
LABEL_14:
        *v7 = 0;
        v22 = v7;
        do
        {
          v23 = v22;
          v25 = v22[1];
          ++v22;
          v24 = v25;
        }
        while (*(double *)(v25 + 48) > v21);
        v26 = a2;
        if (v23 == a1)
        {
          do
          {
            if (v22 >= a2)
              break;
            v28 = *--a2;
          }
          while (*(double *)(v28 + 48) <= v21);
        }
        else
        {
          do
            v27 = *--a2;
          while (*(double *)(v27 + 48) <= v21);
        }
        if (v22 < a2)
        {
          v29 = v22;
          v30 = a2;
          do
          {
            *v29 = 0;
            v31 = *v30;
            *v30 = 0;
            v32 = *v29;
            *v29 = v31;
            if (v32)
            {
              v33 = sub_19C296378(v32);
              MEMORY[0x1A1AD355C](v33, 0x1032C4057ACE4D0);
            }
            v34 = *v30;
            *v30 = v24;
            if (v34)
            {
              v35 = sub_19C296378(v34);
              MEMORY[0x1A1AD355C](v35, 0x1032C4057ACE4D0);
            }
            v36 = *(double *)(v20 + 48);
            do
            {
              v23 = v29;
              v37 = v29[1];
              ++v29;
              v24 = v37;
            }
            while (*(double *)(v37 + 48) > v36);
            do
              v38 = *--v30;
            while (*(double *)(v38 + 48) <= v36);
          }
          while (v29 < v30);
        }
        if (v23 != a1)
        {
          v39 = *v23;
          *v23 = 0;
          v40 = *a1;
          *a1 = v39;
          if (v40)
          {
            v41 = sub_19C296378(v40);
            MEMORY[0x1A1AD355C](v41, 0x1032C4057ACE4D0);
          }
        }
        v42 = *v23;
        *v23 = v20;
        if (v42)
        {
          v43 = sub_19C296378(v42);
          MEMORY[0x1A1AD355C](v43, 0x1032C4057ACE4D0);
        }
        v44 = v22 >= a2;
        a2 = v26;
        if (!v44)
        {
LABEL_40:
          sub_19C441BB4(a1, v23, a3, a4 & 1);
          a4 = 0;
          v7 = v23 + 1;
          continue;
        }
        v45 = sub_19C442648(a1, v23);
        v7 = v23 + 1;
        if (!sub_19C442648(v23 + 1, v26))
        {
          if (v45)
            continue;
          goto LABEL_40;
        }
        a2 = v23;
        if (!v45)
          goto LABEL_1;
        return;
    }
  }
}

char *sub_19C30C2C4(uint64_t *a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t prime;
  void *v20;
  void *v21;
  uint64_t v22;
  _QWORD *v23;
  size_t v24;
  size_t v25;
  size_t v26;
  _QWORD *i;
  size_t v28;
  uint64_t v29;
  unint64_t v30;
  uint8x8_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  size_t v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  void *v40;

  v5 = a2;
  v7 = a1[1];
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(void ***)(*a1 + 8 * v3);
    if (v9)
    {
      v10 = (char *)*v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = *((_QWORD *)v10 + 1);
            if (v12 == a2)
            {
              if (*((_QWORD *)v10 + 2) == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = *(char **)v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = *((_QWORD *)v10 + 1);
          if (v11 == a2)
          {
            if (*((_QWORD *)v10 + 2) == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = *(char **)v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v13 = a1 + 2;
  v10 = (char *)operator new(0x40uLL);
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = v5;
  *((_QWORD *)v10 + 2) = *a3;
  *(_OWORD *)(v10 + 24) = 0u;
  *(_OWORD *)(v10 + 40) = 0u;
  *((_DWORD *)v10 + 14) = 1065353216;
  v14 = (float)(unint64_t)(a1[3] + 1);
  v15 = *((float *)a1 + 8);
  if (v7 && (float)(v15 * (float)v7) >= v14)
  {
    v5 = v3;
    goto LABEL_72;
  }
  v16 = 1;
  if (v7 >= 3)
    v16 = (v7 & (v7 - 1)) != 0;
  v17 = v16 | (2 * v7);
  v18 = vcvtps_u32_f32(v14 / v15);
  if (v17 <= v18)
    prime = v18;
  else
    prime = v17;
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
    v7 = a1[1];
  }
  if (prime > v7)
  {
LABEL_35:
    if (prime >> 61)
      sub_19C2A143C();
    v20 = operator new(8 * prime);
    v21 = (void *)*a1;
    *a1 = (uint64_t)v20;
    if (v21)
      operator delete(v21);
    v22 = 0;
    a1[1] = prime;
    do
      *(_QWORD *)(*a1 + 8 * v22++) = 0;
    while (prime != v22);
    v23 = (_QWORD *)*v13;
    if (!*v13)
      goto LABEL_59;
    v24 = v23[1];
    v25 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v26 = v24 & v25;
      *(_QWORD *)(*a1 + 8 * v26) = v13;
      for (i = (_QWORD *)*v23; *v23; i = (_QWORD *)*v23)
      {
        v28 = i[1] & v25;
        if (v28 == v26)
        {
          v23 = i;
        }
        else if (*(_QWORD *)(*a1 + 8 * v28))
        {
          *v23 = *i;
          v29 = 8 * v28;
          *i = **(_QWORD **)(*a1 + v29);
          **(_QWORD **)(*a1 + v29) = i;
        }
        else
        {
          *(_QWORD *)(*a1 + 8 * v28) = v23;
          v23 = i;
          v26 = v28;
        }
      }
LABEL_59:
      v7 = prime;
      goto LABEL_60;
    }
    if (v24 >= prime)
      v24 %= prime;
    *(_QWORD *)(*a1 + 8 * v24) = v13;
    v33 = (_QWORD *)*v23;
    if (!*v23)
      goto LABEL_59;
    while (1)
    {
      v35 = v33[1];
      if (v35 >= prime)
        v35 %= prime;
      if (v35 != v24)
      {
        if (!*(_QWORD *)(*a1 + 8 * v35))
        {
          *(_QWORD *)(*a1 + 8 * v35) = v23;
          goto LABEL_64;
        }
        *v23 = *v33;
        v34 = 8 * v35;
        *v33 = **(_QWORD **)(*a1 + v34);
        **(_QWORD **)(*a1 + v34) = v33;
        v33 = v23;
      }
      v35 = v24;
LABEL_64:
      v23 = v33;
      v33 = (_QWORD *)*v33;
      v24 = v35;
      if (!v33)
        goto LABEL_59;
    }
  }
  if (prime >= v7)
    goto LABEL_60;
  v30 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
  if (v7 < 3 || (v31 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v31.i16[0] = vaddlv_u8(v31), v31.u32[0] > 1uLL))
  {
    v30 = std::__next_prime(v30);
  }
  else
  {
    v32 = 1 << -(char)__clz(v30 - 1);
    if (v30 >= 2)
      v30 = v32;
  }
  if (prime <= v30)
    prime = v30;
  if (prime < v7)
  {
    if (!prime)
    {
      v40 = (void *)*a1;
      *a1 = 0;
      if (v40)
        operator delete(v40);
      v7 = 0;
      a1[1] = 0;
      goto LABEL_60;
    }
    goto LABEL_35;
  }
  v7 = a1[1];
LABEL_60:
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v5)
      v5 %= v7;
  }
  else
  {
    v5 &= v7 - 1;
  }
LABEL_72:
  v36 = *a1;
  v37 = *(_QWORD **)(*a1 + 8 * v5);
  if (v37)
  {
    *(_QWORD *)v10 = *v37;
LABEL_80:
    *v37 = v10;
    goto LABEL_81;
  }
  *(_QWORD *)v10 = *v13;
  *v13 = v10;
  *(_QWORD *)(v36 + 8 * v5) = v13;
  if (*(_QWORD *)v10)
  {
    v38 = *(_QWORD *)(*(_QWORD *)v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v38 >= v7)
        v38 %= v7;
    }
    else
    {
      v38 &= v7 - 1;
    }
    v37 = (_QWORD *)(*a1 + 8 * v38);
    goto LABEL_80;
  }
LABEL_81:
  ++a1[3];
  return v10;
}

void sub_19C30C73C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C30D050((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19C30C750(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  _BYTE *v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t **v13;
  uint64_t *v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const void **v20;
  unsigned __int8 *j;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const void **v25;
  unsigned __int8 *i;
  _QWORD *v27;
  _QWORD *v28;
  float v29;
  float v30;
  _BOOL8 v31;
  unint64_t v32;
  unint64_t v33;
  size_t prime;
  int8x8_t v35;
  unint64_t v36;
  uint8x8_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  _QWORD v42[2];
  char v43;

  v5 = (_BYTE *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v8 = v7;
  }
  v9 = sub_19C2A0F2C((uint64_t)v42, (uint64_t *)a2, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v3 = v9;
      if (v9 >= v11)
        v3 = v9 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v9;
    }
    v13 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        v15 = v5[23];
        if (v15 >= 0)
          v16 = v5[23];
        else
          v16 = *((_QWORD *)v5 + 1);
        if (v15 < 0)
          v5 = *(_BYTE **)v5;
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v22 = v14[1];
            if (v22 == v10)
            {
              v23 = *((unsigned __int8 *)v14 + 39);
              if ((v23 & 0x80u) == 0)
                v24 = *((unsigned __int8 *)v14 + 39);
              else
                v24 = v14[3];
              if (v24 == v16)
              {
                v25 = (const void **)(v14 + 2);
                if ((v23 & 0x80) != 0)
                {
                  if (!memcmp(*v25, v5, v14[3]))
                    return;
                }
                else
                {
                  if (!*((_BYTE *)v14 + 39))
                    return;
                  for (i = v5; *(unsigned __int8 *)v25 == *i; ++i)
                  {
                    v25 = (const void **)((char *)v25 + 1);
                    if (!--v23)
                      return;
                  }
                }
              }
            }
            else if ((v22 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            v14 = (uint64_t *)*v14;
            if (!v14)
              goto LABEL_51;
          }
        }
        do
        {
          v17 = v14[1];
          if (v17 == v10)
          {
            v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0)
              v19 = *((unsigned __int8 *)v14 + 39);
            else
              v19 = v14[3];
            if (v19 == v16)
            {
              v20 = (const void **)(v14 + 2);
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp(*v20, v5, v14[3]))
                  return;
              }
              else
              {
                if (!*((_BYTE *)v14 + 39))
                  return;
                for (j = v5; *(unsigned __int8 *)v20 == *j; ++j)
                {
                  v20 = (const void **)((char *)v20 + 1);
                  if (!--v18)
                    return;
                }
              }
            }
          }
          else
          {
            if (v17 >= v11)
              v17 %= v11;
            if (v17 != v3)
              break;
          }
          v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  v27 = (_QWORD *)(a1 + 16);
  v28 = operator new(0x28uLL);
  v42[0] = v28;
  v42[1] = a1 + 16;
  *v28 = 0;
  v28[1] = v10;
  *((_OWORD *)v28 + 1) = *(_OWORD *)a3;
  v28[4] = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v43 = 1;
  v29 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v30 = *(float *)(a1 + 32);
  if (!v11 || (float)(v30 * (float)v11) < v29)
  {
    v31 = 1;
    if (v11 >= 3)
      v31 = (v11 & (v11 - 1)) != 0;
    v32 = v31 | (2 * v11);
    v33 = vcvtps_u32_f32(v29 / v30);
    if (v32 <= v33)
      prime = v33;
    else
      prime = v32;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v35 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v35)
      goto LABEL_63;
    if (prime < *(_QWORD *)&v35)
    {
      v36 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v35 < 3uLL || (v37 = (uint8x8_t)vcnt_s8(v35), v37.i16[0] = vaddlv_u8(v37), v37.u32[0] > 1uLL))
      {
        v36 = std::__next_prime(v36);
      }
      else
      {
        v38 = 1 << -(char)__clz(v36 - 1);
        if (v36 >= 2)
          v36 = v38;
      }
      if (prime <= v36)
        prime = v36;
      if (prime < *(_QWORD *)&v35)
LABEL_63:
        sub_19C2EC6BC(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v3 = v10 % v11;
      else
        v3 = v10;
    }
    else
    {
      v3 = (v11 - 1) & v10;
    }
  }
  v39 = *(_QWORD *)a1;
  v40 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v40)
  {
    *v28 = *v40;
LABEL_87:
    *v40 = v28;
    goto LABEL_88;
  }
  *v28 = *v27;
  *v27 = v28;
  *(_QWORD *)(v39 + 8 * v3) = v27;
  if (*v28)
  {
    v41 = *(_QWORD *)(*v28 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v41 >= v11)
        v41 %= v11;
    }
    else
    {
      v41 &= v11 - 1;
    }
    v40 = (_QWORD *)(*(_QWORD *)a1 + 8 * v41);
    goto LABEL_87;
  }
LABEL_88:
  ++*(_QWORD *)(a1 + 24);
}

void sub_19C30CB30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C30CBE8((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19C30CB48(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v5;
  void **v6;
  void *v7;
  void **v8;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = (_QWORD *)*v2;
      v6 = (void **)v2[5];
      if (v6)
      {
        do
        {
          v8 = (void **)*v6;
          if (*((char *)v6 + 39) < 0)
            operator delete(v6[2]);
          operator delete(v6);
          v6 = v8;
        }
        while (v8);
      }
      v7 = (void *)v2[3];
      v2[3] = 0;
      if (v7)
        operator delete(v7);
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

uint64_t *sub_19C30CBE8(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16) && *(char *)(v2 + 39) < 0)
      operator delete(*(void **)(v2 + 16));
    operator delete((void *)v2);
  }
  return a1;
}

void sub_19C30CC34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  _BYTE *v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t **v13;
  uint64_t *v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const void **v20;
  unsigned __int8 *j;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const void **v25;
  unsigned __int8 *i;
  _QWORD *v27;
  _QWORD *v28;
  float v29;
  float v30;
  _BOOL8 v31;
  unint64_t v32;
  unint64_t v33;
  size_t prime;
  int8x8_t v35;
  unint64_t v36;
  uint8x8_t v37;
  uint64_t v38;
  _QWORD *v39;
  unint64_t v40;
  _QWORD v41[2];
  char v42;

  v5 = (_BYTE *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v8 = v7;
  }
  v9 = sub_19C2A0F2C((uint64_t)v41, (uint64_t *)a2, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v3 = v9;
      if (v9 >= v11)
        v3 = v9 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v9;
    }
    v13 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        v15 = v5[23];
        if (v15 >= 0)
          v16 = v5[23];
        else
          v16 = *((_QWORD *)v5 + 1);
        if (v15 < 0)
          v5 = *(_BYTE **)v5;
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v22 = v14[1];
            if (v22 == v10)
            {
              v23 = *((unsigned __int8 *)v14 + 39);
              if ((v23 & 0x80u) == 0)
                v24 = *((unsigned __int8 *)v14 + 39);
              else
                v24 = v14[3];
              if (v24 == v16)
              {
                v25 = (const void **)(v14 + 2);
                if ((v23 & 0x80) != 0)
                {
                  if (!memcmp(*v25, v5, v14[3]))
                    return;
                }
                else
                {
                  if (!*((_BYTE *)v14 + 39))
                    return;
                  for (i = v5; *(unsigned __int8 *)v25 == *i; ++i)
                  {
                    v25 = (const void **)((char *)v25 + 1);
                    if (!--v23)
                      return;
                  }
                }
              }
            }
            else if ((v22 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            v14 = (uint64_t *)*v14;
            if (!v14)
              goto LABEL_51;
          }
        }
        do
        {
          v17 = v14[1];
          if (v17 == v10)
          {
            v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0)
              v19 = *((unsigned __int8 *)v14 + 39);
            else
              v19 = v14[3];
            if (v19 == v16)
            {
              v20 = (const void **)(v14 + 2);
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp(*v20, v5, v14[3]))
                  return;
              }
              else
              {
                if (!*((_BYTE *)v14 + 39))
                  return;
                for (j = v5; *(unsigned __int8 *)v20 == *j; ++j)
                {
                  v20 = (const void **)((char *)v20 + 1);
                  if (!--v18)
                    return;
                }
              }
            }
          }
          else
          {
            if (v17 >= v11)
              v17 %= v11;
            if (v17 != v3)
              break;
          }
          v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  v27 = operator new(0x28uLL);
  v41[0] = v27;
  v41[1] = a1 + 16;
  v42 = 0;
  *v27 = 0;
  v27[1] = v10;
  v28 = v27 + 2;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_19C2B5238(v28, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)v28 = *(_OWORD *)a3;
    v28[2] = *(_QWORD *)(a3 + 16);
  }
  v42 = 1;
  v29 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v30 = *(float *)(a1 + 32);
  if (!v11 || (float)(v30 * (float)v11) < v29)
  {
    v31 = 1;
    if (v11 >= 3)
      v31 = (v11 & (v11 - 1)) != 0;
    v32 = v31 | (2 * v11);
    v33 = vcvtps_u32_f32(v29 / v30);
    if (v32 <= v33)
      prime = v33;
    else
      prime = v32;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v35 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v35)
      goto LABEL_66;
    if (prime < *(_QWORD *)&v35)
    {
      v36 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v35 < 3uLL || (v37 = (uint8x8_t)vcnt_s8(v35), v37.i16[0] = vaddlv_u8(v37), v37.u32[0] > 1uLL))
      {
        v36 = std::__next_prime(v36);
      }
      else
      {
        v38 = 1 << -(char)__clz(v36 - 1);
        if (v36 >= 2)
          v36 = v38;
      }
      if (prime <= v36)
        prime = v36;
      if (prime < *(_QWORD *)&v35)
LABEL_66:
        sub_19C2EC6BC(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v3 = v10 % v11;
      else
        v3 = v10;
    }
    else
    {
      v3 = (v11 - 1) & v10;
    }
  }
  v39 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v39)
  {
    *(_QWORD *)v41[0] = *v39;
    *v39 = v41[0];
  }
  else
  {
    *(_QWORD *)v41[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v41[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v41[0])
    {
      v40 = *(_QWORD *)(*(_QWORD *)v41[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v40 >= v11)
          v40 %= v11;
      }
      else
      {
        v40 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v40) = v41[0];
    }
  }
  ++*(_QWORD *)(a1 + 24);
}

void sub_19C30D034(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C30CBE8((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19C30D050(uint64_t a1)
{
  _QWORD *v2;
  void **v3;
  void *v4;
  void **v6;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = (void **)v2[5];
      if (v3)
      {
        do
        {
          v6 = (void **)*v3;
          if (*((char *)v3 + 39) < 0)
            operator delete(v3[2]);
          operator delete(v3);
          v3 = v6;
        }
        while (v6);
      }
      v4 = (void *)v2[3];
      v2[3] = 0;
      if (v4)
        operator delete(v4);
    }
    operator delete(v2);
  }
  return a1;
}

double sub_19C30D0D4(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  double result;
  uint64_t v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v6 = *a2;
  result = *(double *)(*a2 + 48);
  v8 = *a1;
  v9 = *(double *)(*a3 + 48);
  if (result <= *(double *)(*a1 + 48))
  {
    if (v9 > result)
    {
      *a2 = 0;
      v14 = *a3;
      *a3 = 0;
      v15 = *a2;
      *a2 = v14;
      if (v15)
      {
        v16 = sub_19C296378(v15);
        MEMORY[0x1A1AD355C](v16, 0x1032C4057ACE4D0);
      }
      v17 = *a3;
      *a3 = v6;
      if (v17)
      {
        v18 = sub_19C296378(v17);
        MEMORY[0x1A1AD355C](v18, 0x1032C4057ACE4D0);
      }
      result = *(double *)(*a2 + 48);
      v19 = *a1;
      if (result > *(double *)(*a1 + 48))
      {
        *a1 = 0;
        v20 = *a2;
        *a2 = 0;
        v21 = *a1;
        *a1 = v20;
        if (v21)
        {
          v22 = sub_19C296378(v21);
          MEMORY[0x1A1AD355C](v22, 0x1032C4057ACE4D0);
        }
        v13 = *a2;
        *a2 = v19;
        if (v13)
          goto LABEL_16;
      }
    }
  }
  else
  {
    *a1 = 0;
    if (v9 > result)
    {
      v10 = *a3;
      *a3 = 0;
      v11 = *a1;
      *a1 = v10;
      if (!v11)
        goto LABEL_5;
      goto LABEL_4;
    }
    v23 = *a2;
    *a2 = 0;
    v24 = *a1;
    *a1 = v23;
    if (v24)
    {
      v25 = sub_19C296378(v24);
      MEMORY[0x1A1AD355C](v25, 0x1032C4057ACE4D0);
    }
    v26 = *a2;
    *a2 = v8;
    if (v26)
    {
      v27 = sub_19C296378(v26);
      MEMORY[0x1A1AD355C](v27, 0x1032C4057ACE4D0);
      v8 = *a2;
    }
    result = *(double *)(*a3 + 48);
    if (result > *(double *)(v8 + 48))
    {
      *a2 = 0;
      v28 = *a3;
      *a3 = 0;
      v11 = *a2;
      *a2 = v28;
      if (!v11)
      {
LABEL_5:
        v13 = *a3;
        *a3 = v8;
        if (!v13)
          return result;
LABEL_16:
        sub_19C296378(v13);
        JUMPOUT(0x1A1AD355CLL);
      }
LABEL_4:
      v12 = sub_19C296378(v11);
      MEMORY[0x1A1AD355C](v12, 0x1032C4057ACE4D0);
      goto LABEL_5;
    }
  }
  return result;
}

void sub_19C30D2CC(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  sub_19C30D0D4(a1, a2, a3);
  v8 = *a3;
  if (*(double *)(*a4 + 48) > *(double *)(*a3 + 48))
  {
    *a3 = 0;
    v9 = *a4;
    *a4 = 0;
    v10 = *a3;
    *a3 = v9;
    if (v10)
    {
      v11 = sub_19C296378(v10);
      MEMORY[0x1A1AD355C](v11, 0x1032C4057ACE4D0);
    }
    v12 = *a4;
    *a4 = v8;
    if (v12)
    {
      v13 = sub_19C296378(v12);
      MEMORY[0x1A1AD355C](v13, 0x1032C4057ACE4D0);
    }
    v14 = *a2;
    if (*(double *)(*a3 + 48) > *(double *)(*a2 + 48))
    {
      *a2 = 0;
      v15 = *a3;
      *a3 = 0;
      v16 = *a2;
      *a2 = v15;
      if (v16)
      {
        v17 = sub_19C296378(v16);
        MEMORY[0x1A1AD355C](v17, 0x1032C4057ACE4D0);
      }
      v18 = *a3;
      *a3 = v14;
      if (v18)
      {
        v19 = sub_19C296378(v18);
        MEMORY[0x1A1AD355C](v19, 0x1032C4057ACE4D0);
      }
      v20 = *a1;
      if (*(double *)(*a2 + 48) > *(double *)(*a1 + 48))
      {
        *a1 = 0;
        v21 = *a2;
        *a2 = 0;
        v22 = *a1;
        *a1 = v21;
        if (v22)
        {
          v23 = sub_19C296378(v22);
          MEMORY[0x1A1AD355C](v23, 0x1032C4057ACE4D0);
        }
        v24 = *a2;
        *a2 = v20;
        if (v24)
        {
          sub_19C296378(v24);
          JUMPOUT(0x1A1AD355CLL);
        }
      }
    }
  }
}

void sub_19C30D45C(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  sub_19C30D2CC(a1, a2, a3, a4);
  v10 = *a4;
  if (*(double *)(*a5 + 48) > *(double *)(*a4 + 48))
  {
    *a4 = 0;
    v11 = *a5;
    *a5 = 0;
    v12 = *a4;
    *a4 = v11;
    if (v12)
    {
      v13 = sub_19C296378(v12);
      MEMORY[0x1A1AD355C](v13, 0x1032C4057ACE4D0);
    }
    v14 = *a5;
    *a5 = v10;
    if (v14)
    {
      v15 = sub_19C296378(v14);
      MEMORY[0x1A1AD355C](v15, 0x1032C4057ACE4D0);
    }
    v16 = *a3;
    if (*(double *)(*a4 + 48) > *(double *)(*a3 + 48))
    {
      *a3 = 0;
      v17 = *a4;
      *a4 = 0;
      v18 = *a3;
      *a3 = v17;
      if (v18)
      {
        v19 = sub_19C296378(v18);
        MEMORY[0x1A1AD355C](v19, 0x1032C4057ACE4D0);
      }
      v20 = *a4;
      *a4 = v16;
      if (v20)
      {
        v21 = sub_19C296378(v20);
        MEMORY[0x1A1AD355C](v21, 0x1032C4057ACE4D0);
      }
      v22 = *a2;
      if (*(double *)(*a3 + 48) > *(double *)(*a2 + 48))
      {
        *a2 = 0;
        v23 = *a3;
        *a3 = 0;
        v24 = *a2;
        *a2 = v23;
        if (v24)
        {
          v25 = sub_19C296378(v24);
          MEMORY[0x1A1AD355C](v25, 0x1032C4057ACE4D0);
        }
        v26 = *a3;
        *a3 = v22;
        if (v26)
        {
          v27 = sub_19C296378(v26);
          MEMORY[0x1A1AD355C](v27, 0x1032C4057ACE4D0);
        }
        v28 = *a1;
        if (*(double *)(*a2 + 48) > *(double *)(*a1 + 48))
        {
          *a1 = 0;
          v29 = *a2;
          *a2 = 0;
          v30 = *a1;
          *a1 = v29;
          if (v30)
          {
            v31 = sub_19C296378(v30);
            MEMORY[0x1A1AD355C](v31, 0x1032C4057ACE4D0);
          }
          v32 = *a2;
          *a2 = v28;
          if (v32)
          {
            sub_19C296378(v32);
            JUMPOUT(0x1A1AD355CLL);
          }
        }
      }
    }
  }
}

BOOL sub_19C30D65C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t i;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *a1;
      if (*(double *)(*(a2 - 1) + 48) > *(double *)(*a1 + 48))
      {
        *a1 = 0;
        v7 = *(a2 - 1);
        *(a2 - 1) = 0;
        v8 = *a1;
        *a1 = v7;
        if (v8)
        {
          v9 = sub_19C296378(v8);
          MEMORY[0x1A1AD355C](v9, 0x1032C4057ACE4D0);
        }
        v10 = *(a2 - 1);
        *(a2 - 1) = v6;
        if (v10)
        {
          v11 = sub_19C296378(v10);
          MEMORY[0x1A1AD355C](v11, 0x1032C4057ACE4D0);
        }
        return 1;
      }
      return result;
    case 3:
      sub_19C30D0D4(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      sub_19C30D2CC(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      sub_19C30D45C(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v12 = a1 + 2;
      sub_19C30D0D4(a1, a1 + 1, a1 + 2);
      v13 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v14 = 0;
      v15 = 16;
      break;
  }
  while (1)
  {
    v16 = *v13;
    v17 = *v12;
    if (*(double *)(*v13 + 48) > *(double *)(*v12 + 48))
    {
      v18 = 0;
      *v13 = 0;
      for (i = v15; ; i -= 8)
      {
        v20 = (uint64_t *)((char *)a1 + i);
        *v20 = 0;
        v20[1] = v17;
        if (v18)
        {
          v21 = sub_19C296378(v18);
          MEMORY[0x1A1AD355C](v21, 0x1032C4057ACE4D0);
        }
        if (!i)
          break;
        v22 = (uint64_t *)((char *)a1 + i);
        v17 = *(uint64_t *)((char *)a1 + i - 8);
        if (*(double *)(v16 + 48) <= *(double *)(v17 + 48))
          goto LABEL_19;
        v18 = *v20;
      }
      v22 = a1;
LABEL_19:
      v23 = *v22;
      *v22 = v16;
      if (v23)
      {
        v24 = sub_19C296378(v23);
        MEMORY[0x1A1AD355C](v24, 0x1032C4057ACE4D0);
      }
      if (++v14 == 8)
        return v13 + 1 == a2;
    }
    v12 = v13;
    v15 += 8;
    if (++v13 == a2)
      return 1;
  }
}

void sub_19C30D878()
{
  JUMPOUT(0x1A1AD355CLL);
}

__n128 sub_19C30D88C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x38uLL);
  *(_QWORD *)v2 = &off_1E3D38FD8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 sub_19C30D8D4(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E3D38FD8;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_19C30D904(uint64_t a1, __int128 **a2)
{
  uint64_t v4;
  int v5;
  BOOL v6;
  uint64_t result;
  BOOL v8;
  uint64_t v9;
  char **v10;
  __int128 *v11;
  char *v12;
  char **v13;
  uint64_t v14;
  _QWORD *v15;
  __int128 *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 *v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  void *v34[2];
  uint64_t v35;
  void *v36[2];
  uint64_t v37;
  char *v38;
  void *__p[2];
  uint64_t v40;
  int v41;
  _BYTE v42[104];
  __int128 __dst;
  uint64_t v44;
  int v45;
  _QWORD *v46;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *((_DWORD *)*a2 + 60);
  v6 = v5 == 8 || v5 == 1;
  if (v6 && **(_QWORD **)(a1 + 8) >= 0xAuLL)
  {
    result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 96) + 112))(*(_QWORD *)(v4 + 96));
    if ((_DWORD)result == 1)
      return result;
    v5 = *((_DWORD *)*a2 + 60);
  }
  v8 = v5 == 8 || v5 == 1;
  if (v8
    && (**(_QWORD **)(a1 + 8) < 0xAuLL
     || !(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v4 + 96) + 112))(*(_QWORD *)(v4 + 96))))
  {
    v14 = **(_QWORD **)(a1 + 40);
    v15 = (_QWORD *)operator new();
    sub_19C2967D8((uint64_t)v15, v14);
    v46 = v15;
    v16 = *a2;
    v17 = *(uint64_t **)(**(_QWORD **)(a1 + 32) + 8 * *((_QWORD *)*a2 + 31));
    v18 = *v17;
    v19 = v17[1] - *v17;
    if ((unint64_t)v19 >= 0x40)
    {
      v20 = 32 * (v19 >> 5) - 32 * (v19 >> 5 != 0);
      do
      {
        language_modeling::v1::LinguisticContext::try_push_back((uint64_t *)&v46, v18);
        v18 += 32;
        v20 -= 32;
      }
      while (v20);
      v16 = *a2;
    }
    if (*((char *)v16 + 47) < 0)
    {
      sub_19C2B5238(&__dst, *((void **)v16 + 3), *((_QWORD *)v16 + 4));
    }
    else
    {
      __dst = *(__int128 *)((char *)v16 + 24);
      v44 = *((_QWORD *)v16 + 5);
    }
    v45 = 0;
    sub_19C297950(__p, (const UInt8 *)&__dst);
    v41 = v45;
    sub_19C30DDEC((uint64_t)v42, v4, (unsigned __int8 *)__p, (uint64_t *)&v46, 0, *(_QWORD *)(a1 + 8), 1);
    if (SHIBYTE(v40) < 0)
      operator delete(__p[0]);
    v21 = *a2;
    if (*((char *)*a2 + 23) < 0)
    {
      sub_19C2B5238(__p, *(void **)v21, *((_QWORD *)v21 + 1));
      v21 = *a2;
      if ((*((char *)*a2 + 47) & 0x80000000) == 0)
        goto LABEL_31;
    }
    else
    {
      v22 = *v21;
      v40 = *((_QWORD *)v21 + 2);
      *(_OWORD *)__p = v22;
      if ((*((char *)v21 + 47) & 0x80000000) == 0)
      {
LABEL_31:
        *(_OWORD *)v36 = *(__int128 *)((char *)v21 + 24);
        v37 = *((_QWORD *)v21 + 5);
        goto LABEL_34;
      }
    }
    sub_19C2B5238(v36, *((void **)v21 + 3), *((_QWORD *)v21 + 4));
    v21 = *a2;
LABEL_34:
    v23 = *v15;
    v24 = v15[1];
    v25 = *((_QWORD *)v21 + 31);
    if (*((char *)v21 + 231) < 0)
    {
      sub_19C2B5238(v34, *((void **)v21 + 26), *((_QWORD *)v21 + 27));
    }
    else
    {
      *(_OWORD *)v34 = v21[13];
      v35 = *((_QWORD *)v21 + 28);
    }
    sub_19C3067B0(&v38, (uint64_t)__p, (uint64_t)v36, (uint64_t)v42, (v24 - v23) >> 5, v25, (__int128 *)v34, 1);
    if (SHIBYTE(v35) < 0)
    {
      operator delete(v34[0]);
      if ((SHIBYTE(v37) & 0x80000000) == 0)
      {
LABEL_39:
        if ((SHIBYTE(v40) & 0x80000000) == 0)
        {
LABEL_40:
          v26 = *(_QWORD **)(a1 + 16);
          __p[0] = v38;
          v27 = (_QWORD *)v26[1];
          if ((unint64_t)v27 >= v26[2])
          {
            v28 = sub_19C2F1218(v26, (uint64_t *)__p);
            v29 = __p[0];
            v26[1] = v28;
            if (v29)
            {
              v30 = sub_19C296378((uint64_t)v29);
              MEMORY[0x1A1AD355C](v30, 0x1032C4057ACE4D0);
            }
          }
          else
          {
            *v27 = v38;
            v26[1] = v27 + 1;
          }
          if (SHIBYTE(v44) < 0)
            operator delete((void *)__dst);
          v31 = sub_19C295FA0((uint64_t)v15);
          MEMORY[0x1A1AD355C](v31, 0x10B2C4009D90DC4);
          goto LABEL_47;
        }
LABEL_51:
        operator delete(__p[0]);
        goto LABEL_40;
      }
    }
    else if ((SHIBYTE(v37) & 0x80000000) == 0)
    {
      goto LABEL_39;
    }
    operator delete(v36[0]);
    if ((SHIBYTE(v40) & 0x80000000) == 0)
      goto LABEL_40;
    goto LABEL_51;
  }
  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(char ***)(v9 + 8);
  v11 = *a2;
  if ((unint64_t)v10 >= *(_QWORD *)(v9 + 16))
  {
    v13 = sub_19C30E95C(*(char ****)(a1 + 16), v11);
  }
  else
  {
    v12 = (char *)operator new();
    sub_19C29769C(v12, v11);
    *v10 = v12;
    v13 = v10 + 1;
  }
  *(_QWORD *)(v9 + 8) = v13;
LABEL_47:
  v32 = *(unint64_t **)(a1 + 24);
  v33 = *v32 + 1;
  *v32 = v33;
  return v33 < 2;
}

void sub_19C30DCB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  language_modeling::v1::Prediction::~Prediction((language_modeling::v1::Prediction *)&a23);
  if (*(char *)(v28 - 89) < 0)
    operator delete(*(void **)(v28 - 112));
  language_modeling::v1::LinguisticContext::~LinguisticContext((language_modeling::v1::LinguisticContext *)(v28 - 72));
  _Unwind_Resume(a1);
}

void sub_19C30DD64()
{
  JUMPOUT(0x19C30DD7CLL);
}

uint64_t sub_19C30DD8C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK17language_modeling2v126ToucanLanguageModelSession12_completionsERKNS0_17LinguisticContextERKNSt"
                     "3__16vectorINS0_14CompletionStemENS5_9allocatorIS7_EEEEmmE3$_2"
    || ((v3 & (unint64_t)"ZNK17language_modeling2v126ToucanLanguageModelSession12_completionsERKNS0_17LinguisticCo"
                                "ntextERKNSt3__16vectorINS0_14CompletionStemENS5_9allocatorIS7_EEEEmmE3$_2" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZNK17language_modeling2v126ToucanLanguageModelSession12_completionsERKNS0_17LinguisticContextERKNSt3__16vectorINS0_14CompletionStemENS5_9allocatorIS7_EEEEmmE3$_2")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK17language_modeling2v126ToucanLanguageModelSession12_completionsERKNS0_17LinguisticContextERKNSt3__16vectorINS0_14CompletionStemENS5_9allocatorIS7_EEEEmmE3$_2" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *sub_19C30DDE0()
{
  return &unk_1E3D33600;
}

void sub_19C30DDEC(uint64_t a1, uint64_t a2, unsigned __int8 *a3, uint64_t *a4, int a5, uint64_t a6, int a7)
{
  uint64_t v7;
  int v8;
  uint64_t *v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  int v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  __int128 v25;
  int v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  __int128 v36;
  void **v37;
  __int128 v38;
  _DWORD *v39;
  unsigned __int8 *v40;
  unint64_t v41;
  unsigned int *v42;
  uint64_t v43;
  std::string::size_type size;
  int *v45;
  char *v46;
  void *v47;
  int v48;
  char *v49;
  int64_t v50;
  uint64_t v51;
  unint64_t v52;
  int64_t v53;
  unint64_t v54;
  _BYTE *v55;
  _DWORD *v56;
  unint64_t v57;
  char *v58;
  int v59;
  uint64_t v60;
  _OWORD *v61;
  char *v62;
  uint64_t v63;
  __int128 v64;
  float v65;
  unsigned int *v66;
  uint64_t v67;
  float v68;
  double v69;
  uint64_t v70;
  uint64_t v71;
  __int128 *v72;
  uint64_t v73;
  double v74;
  uint64_t v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  double v92;
  uint64_t v98;
  uint64_t v99;
  std::string v100;
  int v101;
  void *__p[2];
  void *v103;
  int v104;
  char v105;
  char *v106;
  char *v107;
  char *v108;
  void *v109[2];
  void *v110;
  __int128 v111;
  void *v112;
  __int128 *v113;
  uint64_t v114;

  v7 = a6;
  v8 = a5;
  v9 = a4;
  v10 = a3;
  v11 = a2;
  v12 = a1;
  v114 = *MEMORY[0x1E0C80C00];
  v13 = (uint64_t *)*a4;
  v109[0] = 0;
  v109[1] = 0;
  v110 = 0;
  if (!a7)
    goto LABEL_48;
  v14 = *(_QWORD *)(a2 + 176);
  v15 = *(_QWORD **)(v14 + 72);
  v16 = *(std::__shared_weak_count **)(v14 + 80);
  __p[0] = v15;
  __p[1] = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(p_shared_owners);
    while (__stxr(v18 + 1, p_shared_owners));
  }
  if (v15[15])
  {
    v19 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 112) + 184))(*(_QWORD *)(a2 + 112));
    if (!v16)
      goto LABEL_13;
  }
  else
  {
    v19 = 0;
    if (!v16)
      goto LABEL_13;
  }
  v20 = (unint64_t *)&v16->__shared_owners_;
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 - 1, v20));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
LABEL_13:
  v12 = a1;
  v8 = a5;
  v9 = a4;
  v10 = a3;
  v7 = a6;
  if (!v19)
  {
LABEL_48:
    sub_19C30EB50((char **)__p, v11, v13);
    if (v109[0])
    {
      v109[1] = v109[0];
      operator delete(v109[0]);
    }
    v38 = *(_OWORD *)__p;
    *(_OWORD *)v109 = *(_OWORD *)__p;
    v110 = v103;
    goto LABEL_109;
  }
  v98 = v11;
  v106 = 0;
  v107 = 0;
  v108 = 0;
  LOBYTE(__p[0]) = 0;
  v105 = 0;
  v23 = *v13;
  v22 = v13[1];
  if (v22 != *v13)
  {
    v24 = 0;
    while (1)
    {
      sub_19C297950(&v100, (const UInt8 *)v23);
      v101 = *(_DWORD *)(v23 + 24);
      if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(v11 + 112) + 176))(*(_QWORD *)(v11 + 112)) == 2)
      {
        sub_19C2FDA58((uint64_t)&v111, v11, (void **)&v106, (const void **)__p, (uint64_t)&v100);
        v24 = v107;
      }
      else
      {
        sub_19C2FDFF4((uint64_t)&v111, v11, &v100);
      }
      if (v24 >= v108)
      {
        v27 = v106;
        v28 = (v24 - v106) >> 5;
        v29 = v28 + 1;
        if ((unint64_t)(v28 + 1) >> 59)
          sub_19C2A18E8();
        v30 = v108 - v106;
        if ((v108 - v106) >> 4 > v29)
          v29 = v30 >> 4;
        if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFE0)
          v31 = 0x7FFFFFFFFFFFFFFLL;
        else
          v31 = v29;
        if (v31 >> 59)
          sub_19C2A143C();
        v32 = (char *)operator new(32 * v31);
        v33 = &v32[32 * v28];
        v34 = &v32[32 * v31];
        *(_OWORD *)v33 = v111;
        *((_QWORD *)v33 + 2) = v112;
        v112 = 0;
        v111 = 0uLL;
        *((_DWORD *)v33 + 6) = (_DWORD)v113;
        v35 = v33 + 32;
        if (v24 == v27)
        {
          v106 = v33;
          v107 = v33 + 32;
          v108 = &v32[32 * v31];
        }
        else
        {
          do
          {
            v36 = *((_OWORD *)v24 - 2);
            *((_QWORD *)v33 - 2) = *((_QWORD *)v24 - 2);
            *((_OWORD *)v33 - 2) = v36;
            *((_QWORD *)v24 - 3) = 0;
            *((_QWORD *)v24 - 2) = 0;
            *((_QWORD *)v24 - 4) = 0;
            *((_DWORD *)v33 - 2) = *((_DWORD *)v24 - 2);
            v33 -= 32;
            v24 -= 32;
          }
          while (v24 != v27);
          v24 = v106;
          v37 = (void **)v107;
          v106 = v33;
          v107 = v35;
          v108 = v34;
          while (v37 != (void **)v24)
          {
            if (*((char *)v37 - 9) < 0)
              operator delete(*(v37 - 4));
            v37 -= 4;
          }
        }
        if (v24)
          operator delete(v24);
        v107 = v35;
        if (SHIBYTE(v112) < 0)
          operator delete((void *)v111);
        v24 = v35;
        if ((SHIBYTE(v100.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_23:
          if (v105)
            goto LABEL_24;
          goto LABEL_47;
        }
      }
      else
      {
        v25 = v111;
        *((_QWORD *)v24 + 2) = v112;
        *(_OWORD *)v24 = v25;
        v112 = 0;
        v111 = 0uLL;
        *((_DWORD *)v24 + 6) = (_DWORD)v113;
        v24 += 32;
        v107 = v24;
        if ((SHIBYTE(v100.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_23;
      }
      operator delete(v100.__r_.__value_.__l.__data_);
      if (v105)
      {
LABEL_24:
        sub_19C297950(&v111, (const UInt8 *)v23);
        v26 = *(_DWORD *)(v23 + 24);
        LODWORD(v113) = v26;
        if (SHIBYTE(v103) < 0)
        {
          operator delete(__p[0]);
          v26 = (int)v113;
        }
        *(_OWORD *)__p = v111;
        v103 = v112;
        v104 = v26;
        goto LABEL_17;
      }
LABEL_47:
      sub_19C297950(__p, (const UInt8 *)v23);
      v104 = *(_DWORD *)(v23 + 24);
      v105 = 1;
LABEL_17:
      v23 += 32;
      if (v23 == v22)
        goto LABEL_52;
    }
  }
  v24 = 0;
LABEL_52:
  v39 = v109[0];
  if (v110 == v109[0])
  {
    if (v110)
    {
      v109[1] = v110;
      operator delete(v110);
      v109[0] = 0;
      v109[1] = 0;
      v110 = 0;
    }
    v39 = operator new(4uLL);
    v109[0] = v39;
    v109[1] = v39;
    v110 = v39 + 1;
  }
  *v39 = 1;
  v109[1] = v39 + 1;
  v40 = (unsigned __int8 *)v24;
  if (v24 != v106)
  {
    v41 = 0;
    v40 = (unsigned __int8 *)v106;
    do
    {
      sub_19C2FD184((uint64_t)&v111, v11, &v40[32 * v41], (unsigned int *)v109[0], (unsigned int *)v109[1]);
      (*(void (**)(std::string *__return_ptr, _QWORD, __int128 *))(**(_QWORD **)(v11 + 112) + 16))(&v100, *(_QWORD *)(v11 + 112), &v111);
      v42 = (unsigned int *)v100.__r_.__value_.__r.__words[0];
      if (v100.__r_.__value_.__l.__size_ == v100.__r_.__value_.__r.__words[0])
      {
LABEL_93:
        v45 = (int *)v100.__r_.__value_.__r.__words[0];
      }
      else
      {
        v43 = 4 * ((uint64_t)(v100.__r_.__value_.__l.__size_ - v100.__r_.__value_.__r.__words[0]) >> 2);
        do
        {
          if (((*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v11 + 112) + 96))(*(_QWORD *)(v11 + 112), *v42) & 1) != 0)goto LABEL_93;
          ++v42;
          v43 -= 4;
        }
        while (v43);
        size = v100.__r_.__value_.__l.__size_;
        v45 = (int *)v100.__r_.__value_.__r.__words[0];
        if (v100.__r_.__value_.__r.__words[0] != v100.__r_.__value_.__l.__size_)
        {
          v46 = (char *)v109[1];
          while (1)
          {
            v48 = *v45;
            if (v46 >= v110)
              break;
            *(_DWORD *)v46 = v48;
            v47 = v46 + 4;
LABEL_66:
            v109[1] = v47;
            ++v45;
            v46 = (char *)v47;
            if (v45 == (int *)size)
              goto LABEL_93;
          }
          v49 = (char *)v109[0];
          v50 = v46 - (char *)v109[0];
          v51 = (v46 - (char *)v109[0]) >> 2;
          v52 = v51 + 1;
          if ((unint64_t)(v51 + 1) >> 62)
            sub_19C2A18E8();
          v53 = (_BYTE *)v110 - (char *)v109[0];
          if ((int64_t)((uint64_t)v110 - (unint64_t)v109[0]) >> 1 > v52)
            v52 = v53 >> 1;
          if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFFCLL)
            v54 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v54 = v52;
          if (v54)
          {
            if (v54 >> 62)
              sub_19C2A143C();
            v55 = operator new(4 * v54);
          }
          else
          {
            v55 = 0;
          }
          v56 = &v55[4 * v51];
          *v56 = v48;
          v47 = v56 + 1;
          if (v46 == v49)
          {
            v11 = v98;
            goto LABEL_84;
          }
          v57 = v46 - 4 - v49;
          if (v57 < 0xBC
            || &v55[v50 - 4 - (v57 & 0xFFFFFFFFFFFFFFFCLL)] > &v55[v50 - 4]
            || &v46[-(v57 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v46 - 4
            || (unint64_t)(v46 - v55 - v50) < 0x20)
          {
            v58 = v46;
            v11 = v98;
          }
          else
          {
            v60 = (v57 >> 2) + 1;
            v58 = &v46[-4 * (v60 & 0x7FFFFFFFFFFFFFF8)];
            v61 = &v55[4 * v51 - 16];
            v62 = v46 - 16;
            v63 = v60 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v64 = *(_OWORD *)v62;
              *(v61 - 1) = *((_OWORD *)v62 - 1);
              *v61 = v64;
              v61 -= 2;
              v62 -= 32;
              v63 -= 8;
            }
            while (v63);
            v56 -= v60 & 0x7FFFFFFFFFFFFFF8;
            v11 = v98;
            if (v60 == (v60 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_84:
              v109[0] = v56;
              v109[1] = v47;
              v110 = &v55[4 * v54];
              if (v49)
                operator delete(v49);
              goto LABEL_66;
            }
          }
          do
          {
            v59 = *((_DWORD *)v58 - 1);
            v58 -= 4;
            *--v56 = v59;
          }
          while (v58 != v49);
          goto LABEL_84;
        }
      }
      if (v45)
      {
        v100.__r_.__value_.__l.__size_ = (std::string::size_type)v45;
        operator delete(v45);
      }
      if (SHIBYTE(v112) < 0)
        operator delete((void *)v111);
      ++v41;
      v40 = (unsigned __int8 *)v106;
      v24 = v107;
    }
    while (v41 < (v107 - v106) >> 5);
  }
  if (v105 && SHIBYTE(v103) < 0)
    operator delete(__p[0]);
  if (v40)
  {
    while (v24 != (char *)v40)
    {
      if (*(v24 - 9) < 0)
        operator delete(*((void **)v24 - 4));
      v24 -= 32;
    }
    v107 = (char *)v40;
    operator delete(v40);
  }
  v38 = *(_OWORD *)v109;
  v12 = a1;
  v8 = a5;
  v9 = a4;
  v10 = a3;
  v7 = a6;
LABEL_109:
  sub_19C2FD184((uint64_t)__p, v11, v10, (unsigned int *)v38, *((unsigned int **)&v38 + 1));
  (*(void (**)(std::string *__return_ptr, _QWORD, void **))(**(_QWORD **)(v11 + 112) + 16))(&v100, *(_QWORD *)(v11 + 112), __p);
  LODWORD(v106) = 1065353216;
  if (*(_BYTE *)(v11 + 81)
    || (v66 = (unsigned int *)v100.__r_.__value_.__r.__words[0],
        v100.__r_.__value_.__l.__size_ == v100.__r_.__value_.__r.__words[0]))
  {
LABEL_110:
    if ((*(unsigned int (**)(_QWORD, std::string *, void **, char **, uint64_t))(**(_QWORD **)(v11 + 96)
                                                                                          + 24))(*(_QWORD *)(v11 + 96), &v100, v109, &v106, v7))
    {
      v65 = *(float *)&v106;
      goto LABEL_118;
    }
  }
  else
  {
    v67 = 4 * ((uint64_t)(v100.__r_.__value_.__l.__size_ - v100.__r_.__value_.__r.__words[0]) >> 2);
    while (!(*(unsigned int (**)(_QWORD, _QWORD))(**(_QWORD **)(v11 + 112) + 96))(*(_QWORD *)(v11 + 112), *v66))
    {
      ++v66;
      v67 -= 4;
      if (!v67)
        goto LABEL_110;
    }
  }
  LODWORD(v106) = 0;
  v65 = 0.0;
LABEL_118:
  v68 = log10f(v65);
  *(_QWORD *)(v12 + 16) = 0;
  *(_WORD *)(v12 + 24) = 0;
  if (v65 <= 0.0)
    v68 = -10.0;
  v69 = v68;
  *(_BYTE *)(v12 + 32) = 1;
  *(_OWORD *)(v12 + 64) = xmmword_19C46DE10;
  *(_QWORD *)(v12 + 88) = 0;
  *(_QWORD *)(v12 + 96) = 0;
  *(_QWORD *)(v12 + 80) = 0xFFEFFFFFFFFFFFFFLL;
  *(_QWORD *)(v12 + 48) = 0x3FF0000000000000;
  *(double *)(v12 + 40) = v69;
  *(_DWORD *)(v12 + 56) = 2;
  *(double *)v12 = v69;
  *(double *)(v12 + 8) = v69;
  if (*(_DWORD *)(v11 + 48) != 3)
  {
    v70 = *(_QWORD *)(v11 + 176);
    *(_QWORD *)&v111 = &off_1E3D39138;
    v113 = &v111;
    sub_19C43AAE4(&v99, v70, (uint64_t)v10, *v9, v12, v8, &v111);
    v71 = v99;
    v99 = 0;
    if (v71)
      MEMORY[0x1A1AD355C](v71, 0x1000C4065B674BELL);
    v72 = v113;
    if (v113 == &v111)
    {
      v73 = 4;
      v72 = &v111;
    }
    else
    {
      if (!v113)
        goto LABEL_128;
      v73 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v72 + 8 * v73))();
LABEL_128:
    v74 = *(double *)(v12 + 72);
    if (v74 <= 0.0)
      goto LABEL_150;
    if (*(double *)(v12 + 48) <= 0.0)
    {
      *(_QWORD *)(v12 + 48) = 0;
      if (v74 > 0.0)
      {
LABEL_141:
        v81 = *(_QWORD *)(v11 + 176);
        v82 = *(_QWORD *)(v81 + 72);
        v83 = *(std::__shared_weak_count **)(v81 + 80);
        if (v83)
        {
          v84 = (unint64_t *)&v83->__shared_owners_;
          do
            v85 = __ldxr(v84);
          while (__stxr(v85 + 1, v84));
          *(double *)(v12 + 72) = *(float *)(*(_QWORD *)(v82 + 232) + 424);
          do
            v86 = __ldaxr(v84);
          while (__stlxr(v86 - 1, v84));
          if (!v86)
          {
            ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
            std::__shared_weak_count::__release_weak(v83);
          }
        }
        else
        {
          *(double *)(v12 + 72) = *(float *)(*(_QWORD *)(v82 + 232) + 424);
        }
        goto LABEL_149;
      }
    }
    else
    {
      v75 = *(_QWORD *)(v11 + 176);
      v76 = *(_QWORD *)(v75 + 72);
      v77 = *(std::__shared_weak_count **)(v75 + 80);
      if (v77)
      {
        v78 = (unint64_t *)&v77->__shared_owners_;
        do
          v79 = __ldxr(v78);
        while (__stxr(v79 + 1, v78));
        *(double *)(v12 + 48) = *(float *)(*(_QWORD *)(v76 + 232) + 420);
        do
          v80 = __ldaxr(v78);
        while (__stlxr(v80 - 1, v78));
        if (!v80)
        {
          ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
          std::__shared_weak_count::__release_weak(v77);
        }
      }
      else
      {
        *(double *)(v12 + 48) = *(float *)(*(_QWORD *)(v76 + 232) + 420);
      }
      if (*(double *)(v12 + 72) > 0.0)
        goto LABEL_141;
    }
    *(_QWORD *)(v12 + 72) = 0;
LABEL_149:
    v87 = *(double *)(v12 + 48);
    v88 = __exp10(*(double *)(v12 + 40)) * v87;
    v89 = *(double *)(v12 + 72);
    v90 = v88 + __exp10(*(double *)(v12 + 64)) * v89;
    v91 = *(double *)(v12 + 88);
    v92 = __exp10(*(double *)(v12 + 80));
    *(long double *)v12 = log10(v90 + v92 * v91) - *(double *)(v12 + 96);
  }
LABEL_150:
  if (v100.__r_.__value_.__r.__words[0])
  {
    v100.__r_.__value_.__l.__size_ = v100.__r_.__value_.__r.__words[0];
    operator delete(v100.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v103) < 0)
    operator delete(__p[0]);
  if (v109[0])
  {
    v109[1] = v109[0];
    operator delete(v109[0]);
  }
}

void sub_19C30E7E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,char a31,int a32,void *a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37)
{
  if (a31 && a29 < 0)
    operator delete(__p);
  sub_19C2E23C0(&a33);
  if (a36)
  {
    a37 = (uint64_t)a36;
    operator delete(a36);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

char **sub_19C30E95C(char ***a1, __int128 *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  char **v11;
  char *v12;
  char **v13;
  char *v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v2 = (char *)a1[1] - (char *)*a1;
  v3 = v2 >> 3;
  v4 = (v2 >> 3) + 1;
  if (v4 >> 61)
    sub_19C2A18E8();
  v7 = (char *)a1[2] - (char *)*a1;
  if (v7 >> 2 > v4)
    v4 = v7 >> 2;
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8)
    v8 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v8 = v4;
  if (v8)
  {
    if (v8 >> 61)
      sub_19C2A143C();
    v9 = (char *)operator new(8 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = (char *)operator new();
  sub_19C29769C(v10, a2);
  v11 = (char **)&v9[8 * v3];
  v12 = &v9[8 * v8];
  *v11 = v10;
  v13 = v11 + 1;
  v14 = (char *)*a1;
  v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v11;
    a1[1] = v13;
    a1[2] = (char **)v12;
  }
  else
  {
    v16 = v15 - (char *)*a1 - 8;
    if (v16 < 0x78
      || &v15[-(v16 & 0xFFFFFFFFFFFFFFF8) - 8] < (char *)v11 && &v9[v2 - (v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v15)
    {
      goto LABEL_31;
    }
    v17 = (v16 >> 3) + 1;
    v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    v19 = &v15[-v18];
    v11 = (char **)((char *)v11 - v18);
    v20 = &v9[8 * v3 - 16];
    v21 = v15 - 16;
    v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v24 = *((_OWORD *)v21 - 1);
      v23 = *(_OWORD *)v21;
      *((_OWORD *)v21 - 1) = 0uLL;
      *(_OWORD *)v21 = 0uLL;
      *((_OWORD *)v20 - 1) = v24;
      *(_OWORD *)v20 = v23;
      v20 -= 32;
      v21 -= 32;
      v22 -= 4;
    }
    while (v22);
    v15 = v19;
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_31:
      do
      {
        v25 = (char *)*((_QWORD *)v15 - 1);
        v15 -= 8;
        *(_QWORD *)v15 = 0;
        *--v11 = v25;
      }
      while (v15 != v14);
    }
    v15 = (char *)*a1;
    v26 = (char *)a1[1];
    *a1 = v11;
    a1[1] = v13;
    a1[2] = (char **)v12;
    while (v26 != v15)
    {
      v28 = *((_QWORD *)v26 - 1);
      v26 -= 8;
      v27 = v28;
      *(_QWORD *)v26 = 0;
      if (v28)
      {
        v29 = sub_19C296378(v27);
        MEMORY[0x1A1AD355C](v29, 0x1032C4057ACE4D0);
      }
    }
  }
  if (v15)
    operator delete(v15);
  return v13;
}

void sub_19C30EB28(void *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD355C](v1, 0x1032C4057ACE4D0);
  sub_19C2CDAC8(a1);
}

void sub_19C30EB50(char **a1, uint64_t a2, _QWORD *a3)
{
  unint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  uint64_t i;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _BYTE *v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  uint64_t *v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  _QWORD *v27;
  char **v28;
  uint64_t v29;
  int8x8_t v30;
  uint8x8_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t **v34;
  uint64_t *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  int v44;
  char *v45;
  int v46;
  char *v47;
  int *v48;
  char *v49;
  int v50;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  _BYTE *v55;
  char *v56;
  unint64_t v57;
  char *v58;
  int v59;
  uint64_t v60;
  _OWORD *v61;
  char *v62;
  uint64_t v63;
  __int128 v64;
  unint64_t v65;
  void **v68;
  int *v69;
  int v70;
  _QWORD *v71;
  int v72;
  int v73;
  _QWORD v74[3];
  _QWORD *v75;
  uint64_t v76;

  v76 = *MEMORY[0x1E0C80C00];
  v4 = *(unsigned __int16 *)(a2 + 16);
  v74[0] = &off_1E3D39030;
  v74[1] = a2;
  v75 = v74;
  v73 = v4;
  v71 = sub_19C316B5C((uint64_t)(a3 + 16), v4, &v73);
  v5 = sub_19C316438((uint64_t)(a3 + 21), v4, &v73);
  v65 = v4;
  v68 = (void **)(v5 + 3);
  v6 = (uint64_t)(v5[4] - v5[3]) >> 3;
  for (i = a3[3]; v6 < (a3[4] - i) >> 5; i = a3[3])
  {
    if (!v75)
      sub_19C2CCC60();
    (*(void (**)(_QWORD *, unint64_t, _QWORD *))(*v75 + 48))(v75, i + 32 * v6, v71 + 3);
    v9 = (uint64_t)(v71[4] - v71[3]) >> 2;
    v11 = (uint64_t *)v5[4];
    v10 = v5[5];
    if ((unint64_t)v11 < v10)
    {
      *v11 = v9;
      v8 = v11 + 1;
    }
    else
    {
      v12 = (uint64_t *)*v68;
      v13 = (char *)v11 - (_BYTE *)*v68;
      v14 = v13 >> 3;
      v15 = (v13 >> 3) + 1;
      if (v15 >> 61)
        sub_19C2A18E8();
      v16 = v10 - (_QWORD)v12;
      if (v16 >> 2 > v15)
        v15 = v16 >> 2;
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
        v17 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v17 = v15;
      if (v17)
      {
        if (v17 >> 61)
          sub_19C2A143C();
        v18 = operator new(8 * v17);
      }
      else
      {
        v18 = 0;
      }
      v19 = (uint64_t *)&v18[8 * v14];
      *v19 = v9;
      v8 = v19 + 1;
      if (v11 != v12)
      {
        v20 = (char *)(v11 - 1) - (char *)v12;
        if (v20 < 0x58)
          goto LABEL_98;
        if ((unint64_t)((char *)v11 - &v18[v13]) < 0x20)
          goto LABEL_98;
        v21 = (v20 >> 3) + 1;
        v22 = &v18[8 * v14 - 16];
        v23 = v11 - 2;
        v24 = v21 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v25 = *(_OWORD *)v23;
          *(v22 - 1) = *((_OWORD *)v23 - 1);
          *v22 = v25;
          v22 -= 2;
          v23 -= 4;
          v24 -= 4;
        }
        while (v24);
        v19 -= v21 & 0x3FFFFFFFFFFFFFFCLL;
        v11 -= v21 & 0x3FFFFFFFFFFFFFFCLL;
        if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_98:
          do
          {
            v26 = *--v11;
            *--v19 = v26;
          }
          while (v11 != v12);
        }
      }
      v5[3] = v19;
      v5[4] = v8;
      v5[5] = &v18[8 * v17];
      if (v12)
        operator delete(v12);
    }
    v5[4] = v8;
    ++v6;
  }
  v27 = v75;
  if (v75 == v74)
  {
    v29 = 4;
    v27 = v74;
    v28 = a1;
  }
  else
  {
    v28 = a1;
    if (!v75)
      goto LABEL_31;
    v29 = 5;
  }
  (*(void (**)(void))(*v27 + 8 * v29))();
LABEL_31:
  v30 = (int8x8_t)a3[17];
  if (!*(_QWORD *)&v30)
    goto LABEL_51;
  v31 = (uint8x8_t)vcnt_s8(v30);
  v31.i16[0] = vaddlv_u8(v31);
  if (v31.u32[0] > 1uLL)
  {
    v32 = v65;
    v33 = v65;
    if (*(_QWORD *)&v30 <= v65)
      v33 = v65 % *(_QWORD *)&v30;
  }
  else
  {
    v32 = v65;
    v33 = (v30.i32[0] - 1) & v65;
  }
  v34 = *(uint64_t ***)(a3[16] + 8 * v33);
  if (!v34 || (v35 = *v34) == 0)
  {
LABEL_51:
    v39 = 0;
    v40 = 0;
    goto LABEL_52;
  }
  if (v31.u32[0] < 2uLL)
  {
    v36 = *(_QWORD *)&v30 - 1;
    while (1)
    {
      v38 = v35[1];
      if (v38 == v32)
      {
        if (*((_DWORD *)v35 + 4) == (_DWORD)v32)
          goto LABEL_90;
      }
      else if ((v38 & v36) != v33)
      {
        goto LABEL_51;
      }
      v35 = (uint64_t *)*v35;
      if (!v35)
        goto LABEL_51;
    }
  }
  while (1)
  {
    v37 = v35[1];
    if (v37 == v32)
      break;
    if (v37 >= *(_QWORD *)&v30)
      v37 %= *(_QWORD *)&v30;
    if (v37 != v33)
      goto LABEL_51;
LABEL_41:
    v35 = (uint64_t *)*v35;
    if (!v35)
      goto LABEL_51;
  }
  if (*((_DWORD *)v35 + 4) != (_DWORD)v32)
    goto LABEL_41;
LABEL_90:
  v40 = (int *)v35[3];
  v39 = (v35[4] - (uint64_t)v40) >> 2;
LABEL_52:
  v41 = *(_QWORD *)(a2 + 112);
  v72 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v41 + 64))(v41, 1);
  v70 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v41 + 64))(v41, 2);
  v28[1] = 0;
  v28[2] = 0;
  *v28 = 0;
  v42 = (char *)operator new(4uLL);
  v43 = v42;
  *v28 = v42;
  v44 = v72;
  *(_DWORD *)v42 = v72;
  v45 = v42 + 4;
  v28[2] = v42 + 4;
  v28[1] = v42 + 4;
  v46 = v70;
  if (v39)
  {
    v47 = v42 + 4;
    v48 = &v40[v39];
    v69 = v48;
    while (1)
    {
      v50 = *v40;
      if (*v40 == v44 || v50 == v46)
        goto LABEL_56;
      if (v47 >= v45)
        break;
      *(_DWORD *)v47 = v50;
      v49 = v47 + 4;
LABEL_55:
      v28[1] = v49;
      v47 = v49;
LABEL_56:
      if (++v40 == v48)
        return;
    }
    v52 = (v47 - v43) >> 2;
    v53 = v52 + 1;
    if ((unint64_t)(v52 + 1) >> 62)
      sub_19C2A18E8();
    if ((v45 - v43) >> 1 > v53)
      v53 = (v45 - v43) >> 1;
    if ((unint64_t)(v45 - v43) >= 0x7FFFFFFFFFFFFFFCLL)
      v54 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v54 = v53;
    if (v54)
    {
      if (v54 >> 62)
        sub_19C2A143C();
      v55 = operator new(4 * v54);
    }
    else
    {
      v55 = 0;
    }
    v56 = &v55[4 * v52];
    *(_DWORD *)v56 = v50;
    v49 = v56 + 4;
    if (v47 == v43)
      goto LABEL_76;
    v57 = v47 - 4 - v43;
    if (v57 < 0xBC)
    {
      v58 = v47;
      goto LABEL_75;
    }
    if (&v55[v47 - v43 - 4 - (v57 & 0xFFFFFFFFFFFFFFFCLL)] > &v55[v47 - v43 - 4])
    {
      v58 = v47;
    }
    else
    {
      if (&v47[-(v57 & 0xFFFFFFFFFFFFFFFCLL) - 4] <= v47 - 4)
      {
        if ((unint64_t)(v43 - v55) < 0x20)
        {
          v58 = v47;
          goto LABEL_75;
        }
        v60 = (v57 >> 2) + 1;
        v58 = &v47[-4 * (v60 & 0x7FFFFFFFFFFFFFF8)];
        v61 = &v55[4 * v52 - 16];
        v62 = v47 - 16;
        v63 = v60 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v64 = *(_OWORD *)v62;
          *(v61 - 1) = *((_OWORD *)v62 - 1);
          *v61 = v64;
          v61 -= 2;
          v62 -= 32;
          v63 -= 8;
        }
        while (v63);
        v56 -= 4 * (v60 & 0x7FFFFFFFFFFFFFF8);
        if (v60 != (v60 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_75;
LABEL_76:
        v45 = &v55[4 * v54];
        v28 = a1;
        *a1 = v56;
        a1[1] = v49;
        a1[2] = v45;
        if (v43)
          operator delete(v43);
        v43 = v56;
        v44 = v72;
        v46 = v70;
        v48 = v69;
        goto LABEL_55;
      }
      v58 = v47;
    }
    do
    {
LABEL_75:
      v59 = *((_DWORD *)v58 - 1);
      v58 -= 4;
      *((_DWORD *)v56 - 1) = v59;
      v56 -= 4;
    }
    while (v58 != v43);
    goto LABEL_76;
  }
}

void sub_19C30F114(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_19C30F120(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  void *v19;

  if (v19)
  {
    *(_QWORD *)(a11 + 8) = v19;
    operator delete(v19);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_19C30F19C()
{
  JUMPOUT(0x1A1AD355CLL);
}

_QWORD *sub_19C30F1B0()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E3D39138;
  return result;
}

void sub_19C30F1D4(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E3D39138;
}

double sub_19C30F1EC()
{
  return 1.0;
}

uint64_t sub_19C30F1F4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK17language_modeling2v126ToucanLanguageModelSession31_combinedConditionalProbabilityERKNS0_14Sani"
                     "tizedTokenERKNS0_17LinguisticContextEbRmbE3$_2"
    || ((v3 & (unint64_t)"ZNK17language_modeling2v126ToucanLanguageModelSession31_combinedConditionalProbabilityER"
                                "KNS0_14SanitizedTokenERKNS0_17LinguisticContextEbRmbE3$_2" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZNK17language_modeling2v126ToucanLanguageModelSession31_combinedConditionalProbabilityERKNS0_14SanitizedTokenERKNS0_17LinguisticContextEbRmbE3$_2")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK17language_modeling2v126ToucanLanguageModelSession31_combinedConditionalProbabilityERKNS0_14SanitizedTokenERKNS0_17LinguisticContextEbRmbE3$_2" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *sub_19C30F248()
{
  return &unk_1E3D33640;
}

void sub_19C30F258()
{
  JUMPOUT(0x1A1AD355CLL);
}

_QWORD *sub_19C30F26C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E3D39030;
  result[1] = v3;
  return result;
}

uint64_t sub_19C30F2A0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E3D39030;
  a2[1] = v2;
  return result;
}

void sub_19C30F2BC(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4;
  _DWORD *v5;
  _DWORD *v6;
  char *v7;
  char *v8;
  int v9;
  unint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _BYTE *v17;
  _DWORD *v18;
  unint64_t v19;
  unsigned int *v20;
  int v21;
  uint64_t v22;
  _OWORD *v23;
  char *v24;
  uint64_t v25;
  __int128 v26;
  _DWORD *v27;
  _DWORD *v28;
  void *__p[2];
  char v30;

  v4 = *(_QWORD *)(a1 + 8);
  sub_19C2FD184((uint64_t)__p, v4, a2, *(unsigned int **)a3, *(unsigned int **)(a3 + 8));
  (*(void (**)(_DWORD **__return_ptr, _QWORD, void **))(**(_QWORD **)(v4 + 112) + 16))(&v27, *(_QWORD *)(v4 + 112), __p);
  v5 = v27;
  v6 = v28;
  if (v27 != v28)
  {
    v7 = *(char **)(a3 + 8);
    while (1)
    {
      v9 = *v5;
      v10 = *(_QWORD *)(a3 + 16);
      if ((unint64_t)v7 >= v10)
        break;
      *(_DWORD *)v7 = v9;
      v8 = v7 + 4;
LABEL_4:
      *(_QWORD *)(a3 + 8) = v8;
      ++v5;
      v7 = v8;
      if (v5 == v6)
      {
        v5 = v27;
        goto LABEL_33;
      }
    }
    v11 = *(unsigned int **)a3;
    v12 = (uint64_t)&v7[-*(_QWORD *)a3];
    v13 = v12 >> 2;
    v14 = (v12 >> 2) + 1;
    if (v14 >> 62)
      sub_19C2A18E8();
    v15 = v10 - (_QWORD)v11;
    if (v15 >> 1 > v14)
      v14 = v15 >> 1;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL)
      v16 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v16 = v14;
    if (v16)
    {
      if (v16 >> 62)
        sub_19C2A143C();
      v17 = operator new(4 * v16);
    }
    else
    {
      v17 = 0;
    }
    v18 = &v17[4 * v13];
    *v18 = v9;
    v8 = (char *)(v18 + 1);
    if (v7 == (char *)v11)
      goto LABEL_20;
    v19 = v7 - 4 - (char *)v11;
    if (v19 < 0xBC)
    {
      v20 = (unsigned int *)v7;
      goto LABEL_19;
    }
    if (&v17[v12 - 4 - (v19 & 0xFFFFFFFFFFFFFFFCLL)] > &v17[v12 - 4])
    {
      v20 = (unsigned int *)v7;
    }
    else
    {
      if (&v7[-(v19 & 0xFFFFFFFFFFFFFFFCLL) - 4] <= v7 - 4)
      {
        if ((unint64_t)(v7 - v17 - v12) < 0x20)
        {
          v20 = (unsigned int *)v7;
          goto LABEL_19;
        }
        v22 = (v19 >> 2) + 1;
        v20 = (unsigned int *)&v7[-4 * (v22 & 0x7FFFFFFFFFFFFFF8)];
        v23 = &v17[4 * v13 - 16];
        v24 = v7 - 16;
        v25 = v22 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v26 = *(_OWORD *)v24;
          *(v23 - 1) = *((_OWORD *)v24 - 1);
          *v23 = v26;
          v23 -= 2;
          v24 -= 32;
          v25 -= 8;
        }
        while (v25);
        v18 -= v22 & 0x7FFFFFFFFFFFFFF8;
        if (v22 != (v22 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_19;
LABEL_20:
        *(_QWORD *)a3 = v18;
        *(_QWORD *)(a3 + 8) = v8;
        *(_QWORD *)(a3 + 16) = &v17[4 * v16];
        if (v11)
          operator delete(v11);
        goto LABEL_4;
      }
      v20 = (unsigned int *)v7;
    }
    do
    {
LABEL_19:
      v21 = *--v20;
      *--v18 = v21;
    }
    while (v20 != v11);
    goto LABEL_20;
  }
LABEL_33:
  if (v5)
  {
    v28 = v5;
    operator delete(v5);
  }
  if (v30 < 0)
    operator delete(__p[0]);
}

void sub_19C30F4F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if ((a18 & 0x80000000) == 0)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C30F540(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK17language_modeling2v126ToucanLanguageModelSession12_fragmentIDsERNS0_21LinguisticContextImplEE3$_0"
    || ((v3 & (unint64_t)"ZNK17language_modeling2v126ToucanLanguageModelSession12_fragmentIDsERNS0_21LinguisticContextImplEE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZNK17language_modeling2v126ToucanLanguageModelSession12_fragmentIDsERNS0_21LinguisticContextImplEE3$_0")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK17language_modeling2v126ToucanLanguageModelSession12_fragmentIDsERNS0_21LinguisticContextImplEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *sub_19C30F594()
{
  return &unk_1E3D33610;
}

void sub_19C30F5A0()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x1E0DE5048] + 16;
  __cxa_throw(exception, MEMORY[0x1E0DE4E90], MEMORY[0x1E0DE4380]);
}

void sub_19C30F5D8()
{
  JUMPOUT(0x1A1AD355CLL);
}

_QWORD *sub_19C30F5EC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E3D38F80;
  result[1] = v3;
  return result;
}

uint64_t sub_19C30F620(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E3D38F80;
  a2[1] = v2;
  return result;
}

uint64_t sub_19C30F63C(uint64_t a1, __int128 **a2)
{
  uint64_t v2;
  char **v3;
  __int128 *v4;
  char *v5;
  char **v6;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(char ***)(v2 + 8);
  v4 = *a2;
  if ((unint64_t)v3 >= *(_QWORD *)(v2 + 16))
  {
    v6 = sub_19C30E95C(*(char ****)(a1 + 8), *a2);
  }
  else
  {
    v5 = (char *)operator new();
    sub_19C29769C(v5, v4);
    *v3 = v5;
    v6 = v3 + 1;
  }
  *(_QWORD *)(v2 + 8) = v6;
  return 1;
}

void sub_19C30F6B4(void *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD355C](v1, 0x1032C4057ACE4D0);
  sub_19C2CDAC8(a1);
}

uint64_t sub_19C30F6DC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK17language_modeling2v126ToucanLanguageModelSession12_completionsERKNS0_17LinguisticContextERKNSt"
                     "3__16vectorINS0_14CompletionStemENS5_9allocatorIS7_EEEEmmE3$_0"
    || ((v3 & (unint64_t)"ZNK17language_modeling2v126ToucanLanguageModelSession12_completionsERKNS0_17LinguisticCo"
                                "ntextERKNSt3__16vectorINS0_14CompletionStemENS5_9allocatorIS7_EEEEmmE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZNK17language_modeling2v126ToucanLanguageModelSession12_completionsERKNS0_17LinguisticContextERKNSt3__16vectorINS0_14CompletionStemENS5_9allocatorIS7_EEEEmmE3$_0")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK17language_modeling2v126ToucanLanguageModelSession12_completionsERKNS0_17LinguisticContextERKNSt3__16vectorINS0_14CompletionStemENS5_9allocatorIS7_EEEEmmE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *sub_19C30F730()
{
  return &unk_1E3D335F0;
}

void sub_19C30F73C()
{
  sub_19C2B41E0("vector");
}

void sub_19C30F750(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4, uint64_t *a5)
{
  uint64_t v6;
  int v7;
  size_t v8;
  const void *v9;
  _QWORD *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unsigned int v14;
  _QWORD *v15;
  __int128 *v16;
  __int128 v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  __int128 v25;
  char *v26;
  char *v27;
  void *v28;
  void *v29;
  unsigned int *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  char *v41;
  unint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  char *v49;
  void *v50;
  int64_t v51;
  char *v52;
  char *v53;
  char *v54;
  void **v55;
  char *v56;
  char *v57;
  char *v58;
  void *v59;
  void *v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  char *v64;
  void **v65;
  void **v66;
  void **v67;
  void **v68;
  __int128 v69;
  void **v70;
  void **v71;
  void *v72;
  char *v73;
  char *v74;
  char *v75;
  char *v76;
  void *v77;
  void *v78;
  _QWORD *v79;
  char *v80;
  char *v81;
  void *v82;
  void *v83;
  float **v84;
  float *v85;
  float *v86;
  double *v87;
  double *v88;
  double *v89;
  double *v90;
  float v91;
  float v92;
  double v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  _BYTE *v97;
  double *v98;
  unint64_t v99;
  double *v100;
  uint64_t v101;
  _OWORD *v102;
  double *v103;
  uint64_t v104;
  __int128 v105;
  uint64_t v106;
  _QWORD *v107;
  void *v108;
  int64_t v109;
  char *v110;
  char *v111;
  float **v112;
  _QWORD *v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  char *v117;
  char *v118;
  char *v119;
  uint64_t v120;
  char **v121;
  void *v122;
  int64_t v123;
  char *v124;
  char *v125;
  _QWORD *v126;
  char *v127;
  __int128 v128;
  _QWORD *v129;
  _QWORD *v130;
  void *v131;
  void *v132;
  uint64_t **v133;
  uint64_t *v134;
  uint64_t *v135;
  char *v136;
  char *v137;
  char *v138;
  uint64_t v139;
  unint64_t v140;
  unint64_t v141;
  char *v142;
  char *v143;
  char *v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  char *v150;
  _QWORD *v151;
  int64_t v152;
  char *v153;
  char *v154;
  _QWORD *v155;
  uint64_t **v156;
  _QWORD *v157;
  unint64_t v158;
  unint64_t v159;
  unint64_t v160;
  char *v161;
  char *v162;
  char *v163;
  int64_t v164;
  char *v165;
  char *v166;
  char *v167;
  __int128 v168;
  _QWORD *v169;
  _QWORD *v170;
  void *v171;
  void *v172;
  char *v173;
  uint64_t v174;
  unint64_t v175;
  _QWORD *v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t v180;
  uint64_t v181;
  unint64_t v182;
  uint64_t *v183;
  unint64_t v184;
  uint64_t v185;
  unint64_t v186;
  uint64_t *v187;
  uint64_t v188;
  __int128 **v189;
  _QWORD *v190;
  __int128 *v191;
  __int128 *v192;
  uint64_t *v193;
  uint64_t *v194;
  uint64_t v195;
  uint64_t v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  int64_t v202;
  uint64_t v203;
  unint64_t v204;
  uint64_t v205;
  unint64_t v206;
  char *v207;
  char *v208;
  uint64_t *v209;
  char *v210;
  char *v211;
  uint64_t *v212;
  uint64_t v213;
  uint64_t *v214;
  uint64_t v215;
  uint64_t v216;
  unint64_t v217;
  unint64_t v218;
  unint64_t v219;
  uint64_t v220;
  char *v221;
  uint64_t *v222;
  uint64_t v223;
  __int128 v224;
  __int128 v225;
  char *v226;
  char *v227;
  _QWORD *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  _QWORD *v232;
  void **v233;
  void **v234;
  void *v235;
  void **v236;
  void *v237;
  _QWORD *v238;
  _QWORD *v239;
  _QWORD *v240;
  uint64_t v241;
  uint64_t v242;
  __int128 v243;
  void *v244;
  __int128 *p_dst;
  uint64_t v246;
  __int128 **v247;
  __int128 **v248;
  _QWORD *v249;
  __int128 *v250;
  __int128 *v251;
  unint64_t v252;
  char *v253;
  uint64_t v254;
  double v255;
  uint64_t v256;
  uint64_t v257;
  std::__shared_weak_count *v258;
  unint64_t *p_shared_owners;
  unint64_t v260;
  unint64_t v261;
  uint64_t v262;
  uint64_t v263;
  std::__shared_weak_count *v264;
  unint64_t *v265;
  unint64_t v266;
  unint64_t v267;
  double v268;
  double v269;
  double v270;
  double v271;
  double v272;
  double v273;
  uint64_t v274;
  uint64_t v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  __int128 v280;
  char *v281;
  char *v282;
  uint64_t v283;
  unint64_t v284;
  uint64_t v285;
  unint64_t v286;
  char *v287;
  uint64_t *v288;
  unint64_t v289;
  char *v290;
  unint64_t v291;
  unint64_t v292;
  unint64_t v293;
  uint64_t v294;
  char *v295;
  char *v296;
  char *v297;
  uint64_t v298;
  __int128 v299;
  __int128 v300;
  uint64_t v301;
  char *v302;
  uint64_t v303;
  uint64_t v304;
  _QWORD *v305;
  uint64_t v306;
  uint64_t v307;
  void **v308;
  void **v309;
  void *v310;
  void **v311;
  void *v312;
  _QWORD *v313;
  _QWORD *v314;
  _QWORD *v315;
  uint64_t v316;
  uint64_t v317;
  char *v318;
  char *v319;
  void *v320;
  char *v321;
  void *v322;
  void *v323;
  char *v324;
  char *v325;
  void *v326;
  char *v327;
  void *v328;
  void *v329;
  char *v330;
  _QWORD *v331;
  void *v332;
  char *v333;
  void *v334;
  void *v335;
  char *v336;
  char *v337;
  char *v338;
  char *v339;
  void *v340;
  void *v341;
  void **v342;
  void **v343;
  void **v344;
  void **v345;
  void *v346;
  char *v347;
  char *v348;
  char *v349;
  char *v350;
  void *v351;
  void *v352;
  char *v356;
  char **v357;
  uint64_t **v358;
  _QWORD *v360;
  float **v361;
  uint64_t **v362;
  __int128 **v363;
  _QWORD *v364;
  float **v365;
  __int128 **v366;
  __int128 **v367;
  void *v368;
  void **v369;
  void *v370[2];
  void *v371;
  uint64_t v372;
  void *v373[2];
  uint64_t v374;
  int v375;
  void *v376;
  __int128 v377;
  void *__p;
  __int128 v379;
  char *v380;
  char *v381;
  unint64_t v382;
  void **v383;
  void **v384;
  unint64_t v385;
  char *v386;
  unsigned int *v387;
  __int128 __dst;
  __int128 v389;
  unint64_t *v390;
  uint64_t v391;

  v391 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(char *)(v6 + 23);
  if (v7 >= 0)
    v8 = *(unsigned __int8 *)(v6 + 23);
  else
    v8 = *(_QWORD *)(v6 + 8);
  if (v8 == strlen((const char *)language_modeling::v1::kLanguageModelTypeTokenID))
  {
    v9 = v7 >= 0 ? (const void *)v6 : *(const void **)v6;
    if (!memcmp(v9, (const void *)language_modeling::v1::kLanguageModelTypeTokenID, v8))
    {
      sub_19C436CFC(*(_QWORD *)(a2 + 176), a3, a4, a5, (void ***)a1);
      return;
    }
  }
  sub_19C30EB50(&v386, a2, (_QWORD *)*a5);
  v383 = 0;
  v384 = 0;
  v385 = 0;
  v380 = 0;
  v381 = 0;
  v382 = 0;
  v10 = (_QWORD *)*a3;
  v360 = (_QWORD *)a3[1];
  if ((_QWORD *)*a3 != v360)
  {
    while (1)
    {
      __p = 0;
      v379 = 0uLL;
      v377 = 0uLL;
      v376 = 0;
      v11 = *v10;
      if (v10[1] != *v10)
      {
        v12 = 0;
        v13 = 0;
        v14 = 0;
        v364 = v10;
        do
        {
          v16 = (__int128 *)(v11 + 32 * v13);
          if (*((char *)v16 + 23) < 0)
          {
            sub_19C2B5238(&__dst, *(void **)v16, *((_QWORD *)v16 + 1));
          }
          else
          {
            v17 = *v16;
            *(_QWORD *)&v389 = *((_QWORD *)v16 + 2);
            __dst = v17;
          }
          DWORD2(v389) = *(_DWORD *)(v11 + 32 * v13 + 24);
          if (!v14)
          {
            sub_19C2FD184((uint64_t)v373, a2, (unsigned __int8 *)(*v10 + 32 * v13), (unsigned int *)v386, v387);
            if (SBYTE7(v389) < 0)
              operator delete((void *)__dst);
            __dst = *(_OWORD *)v373;
            *(_QWORD *)&v389 = v374;
            DWORD2(v389) = v375;
          }
          (*(void (**)(void **__return_ptr, _QWORD, __int128 *))(**(_QWORD **)(a2 + 112) + 16))(v373, *(_QWORD *)(a2 + 112), &__dst);
          if ((unint64_t)v12 >= *((_QWORD *)&v379 + 1))
          {
            v18 = (char *)__p;
            v19 = 0xAAAAAAAAAAAAAAABLL * ((v12 - (_BYTE *)__p) >> 3);
            v20 = v19 + 1;
            if (v19 + 1 > 0xAAAAAAAAAAAAAAALL)
              sub_19C2A18E8();
            if (0x5555555555555556 * ((uint64_t)(*((_QWORD *)&v379 + 1) - (_QWORD)__p) >> 3) > v20)
              v20 = 0x5555555555555556 * ((uint64_t)(*((_QWORD *)&v379 + 1) - (_QWORD)__p) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v379 + 1) - (_QWORD)__p) >> 3) >= 0x555555555555555)
              v21 = 0xAAAAAAAAAAAAAAALL;
            else
              v21 = v20;
            if (v21 > 0xAAAAAAAAAAAAAAALL)
              sub_19C2A143C();
            v22 = (char *)operator new(24 * v21);
            v23 = &v22[24 * v19];
            *(_OWORD *)v23 = *(_OWORD *)v373;
            *((_QWORD *)v23 + 2) = v374;
            v373[0] = 0;
            v373[1] = 0;
            v374 = 0;
            v24 = v23 + 24;
            if (v12 == v18)
            {
              __p = v23;
              *(_QWORD *)&v379 = v23 + 24;
              *((_QWORD *)&v379 + 1) = &v22[24 * v21];
            }
            else
            {
              do
              {
                v25 = *(_OWORD *)(v12 - 24);
                v12 -= 24;
                *(_OWORD *)(v23 - 24) = v25;
                v23 -= 24;
                *((_QWORD *)v23 + 2) = *((_QWORD *)v12 + 2);
                *(_QWORD *)v12 = 0;
                *((_QWORD *)v12 + 1) = 0;
                *((_QWORD *)v12 + 2) = 0;
              }
              while (v12 != v18);
              v12 = (char *)__p;
              v26 = (char *)v379;
              __p = v23;
              *(_QWORD *)&v379 = v24;
              *((_QWORD *)&v379 + 1) = &v22[24 * v21];
              if (v26 != v12)
              {
                v27 = v26;
                do
                {
                  v29 = (void *)*((_QWORD *)v27 - 3);
                  v27 -= 24;
                  v28 = v29;
                  if (v29)
                  {
                    *((_QWORD *)v26 - 2) = v28;
                    operator delete(v28);
                  }
                  v26 = v27;
                }
                while (v27 != v12);
              }
            }
            if (v12)
              operator delete(v12);
            *(_QWORD *)&v379 = v24;
            if (v373[0])
            {
              v373[1] = v373[0];
              operator delete(v373[0]);
            }
            v12 = v24;
          }
          else
          {
            *(_QWORD *)v12 = 0;
            *((_QWORD *)v12 + 1) = 0;
            *((_QWORD *)v12 + 2) = 0;
            *(_OWORD *)v12 = *(_OWORD *)v373;
            *((_QWORD *)v12 + 2) = v374;
            v12 += 24;
            *(_QWORD *)&v379 = v12;
          }
          v30 = (unsigned int *)*((_QWORD *)v12 - 3);
          v31 = *((_QWORD *)v12 - 2) - (_QWORD)v30;
          if (v31)
          {
            v32 = 4 * (v31 >> 2);
            while (!(*(unsigned int (**)(_QWORD, _QWORD))(**(_QWORD **)(a2 + 112) + 96))(*(_QWORD *)(a2 + 112), *v30))
            {
              ++v30;
              v32 -= 4;
              if (!v32)
                goto LABEL_17;
            }
            v33 = (char *)v377;
            if ((unint64_t)v377 < *((_QWORD *)&v377 + 1))
            {
              *(_QWORD *)v377 = v13;
              v15 = v33 + 8;
            }
            else
            {
              v34 = (char *)v376;
              v35 = v377 - (_QWORD)v376;
              v36 = (uint64_t)(v377 - (_QWORD)v376) >> 3;
              v37 = v36 + 1;
              if ((unint64_t)(v36 + 1) >> 61)
                sub_19C2A18E8();
              v38 = *((_QWORD *)&v377 + 1) - (_QWORD)v376;
              if ((uint64_t)(*((_QWORD *)&v377 + 1) - (_QWORD)v376) >> 2 > v37)
                v37 = v38 >> 2;
              if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF8)
                v39 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v39 = v37;
              if (v39)
              {
                if (v39 >> 61)
                  sub_19C2A143C();
                v40 = (char *)operator new(8 * v39);
              }
              else
              {
                v40 = 0;
              }
              v41 = &v40[8 * v36];
              *(_QWORD *)v41 = v13;
              v15 = v41 + 8;
              if (v33 != v34)
              {
                v42 = v33 - 8 - v34;
                if (v42 < 0x58)
                  goto LABEL_499;
                if ((unint64_t)(v33 - &v40[v35]) < 0x20)
                  goto LABEL_499;
                v43 = (v42 >> 3) + 1;
                v44 = &v40[8 * v36 - 16];
                v45 = v33 - 16;
                v46 = v43 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v47 = *(_OWORD *)v45;
                  *((_OWORD *)v44 - 1) = *((_OWORD *)v45 - 1);
                  *(_OWORD *)v44 = v47;
                  v44 -= 32;
                  v45 -= 32;
                  v46 -= 4;
                }
                while (v46);
                v41 -= 8 * (v43 & 0x3FFFFFFFFFFFFFFCLL);
                v33 -= 8 * (v43 & 0x3FFFFFFFFFFFFFFCLL);
                if (v43 != (v43 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_499:
                  do
                  {
                    v48 = *((_QWORD *)v33 - 1);
                    v33 -= 8;
                    *((_QWORD *)v41 - 1) = v48;
                    v41 -= 8;
                  }
                  while (v33 != v34);
                }
              }
              v376 = v41;
              *((_QWORD *)&v377 + 1) = &v40[8 * v39];
              if (v34)
                operator delete(v34);
            }
            v10 = v364;
            *(_QWORD *)&v377 = v15;
          }
LABEL_17:
          if (SBYTE7(v389) < 0)
            operator delete((void *)__dst);
          v11 = *v10;
          v13 = ++v14;
        }
        while (v14 < (unint64_t)((uint64_t)(v10[1] - *v10) >> 5));
      }
      v49 = v381;
      if ((unint64_t)v381 >= v382)
      {
        v50 = v376;
        v54 = sub_19C3116D0(&v380, v376, v377);
      }
      else
      {
        *(_QWORD *)v381 = 0;
        *((_QWORD *)v49 + 1) = 0;
        *((_QWORD *)v49 + 2) = 0;
        v50 = v376;
        v51 = v377 - (_QWORD)v376;
        if ((void *)v377 != v376)
        {
          if (v51 < 0)
            sub_19C2A18E8();
          v52 = (char *)operator new(v377 - (_QWORD)v376);
          *(_QWORD *)v49 = v52;
          *((_QWORD *)v49 + 1) = v52;
          v53 = &v52[8 * (v51 >> 3)];
          *((_QWORD *)v49 + 2) = v53;
          memcpy(v52, v50, v51);
          *((_QWORD *)v49 + 1) = v53;
        }
        v54 = v49 + 24;
      }
      v381 = v54;
      v55 = v384;
      if ((unint64_t)v384 >= v385)
        break;
      sub_19C3118C0(v384, (uint64_t *)&__p);
      v384 = v55 + 3;
      if (v50)
        goto LABEL_85;
LABEL_86:
      v56 = (char *)__p;
      if (__p)
      {
        v57 = (char *)v379;
        if ((void *)v379 != __p)
        {
          v58 = (char *)v379;
          do
          {
            v60 = (void *)*((_QWORD *)v58 - 3);
            v58 -= 24;
            v59 = v60;
            if (v60)
            {
              *((_QWORD *)v57 - 2) = v59;
              operator delete(v59);
            }
            v57 = v58;
          }
          while (v58 != v56);
        }
        operator delete(v56);
      }
      v10 += 3;
      if (v10 == v360)
        goto LABEL_120;
    }
    v61 = 0xAAAAAAAAAAAAAAABLL * (v384 - v383);
    v62 = v61 + 1;
    if (v61 + 1 > 0xAAAAAAAAAAAAAAALL)
      sub_19C2A18E8();
    if (0x5555555555555556 * ((uint64_t)(v385 - (_QWORD)v383) >> 3) > v62)
      v62 = 0x5555555555555556 * ((uint64_t)(v385 - (_QWORD)v383) >> 3);
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v385 - (_QWORD)v383) >> 3) >= 0x555555555555555)
      v63 = 0xAAAAAAAAAAAAAAALL;
    else
      v63 = v62;
    v390 = &v385;
    if (v63)
    {
      if (v63 > 0xAAAAAAAAAAAAAAALL)
        sub_19C2A143C();
      v64 = (char *)operator new(24 * v63);
    }
    else
    {
      v64 = 0;
    }
    *(_QWORD *)&__dst = v64;
    *((_QWORD *)&__dst + 1) = &v64[24 * v61];
    *(_QWORD *)&v389 = *((_QWORD *)&__dst + 1);
    *((_QWORD *)&v389 + 1) = &v64[24 * v63];
    sub_19C3118C0(*((_QWORD **)&__dst + 1), (uint64_t *)&__p);
    v65 = (void **)*((_QWORD *)&__dst + 1);
    v66 = (void **)(v389 + 24);
    v67 = v383;
    v68 = v384;
    if (v384 == v383)
    {
      v383 = (void **)*((_QWORD *)&__dst + 1);
      v384 = (void **)(v389 + 24);
      v385 = *((_QWORD *)&v389 + 1);
    }
    else
    {
      do
      {
        *(v65 - 3) = 0;
        *(v65 - 2) = 0;
        v65 -= 3;
        v65[2] = 0;
        v69 = *(_OWORD *)(v68 - 3);
        v68 -= 3;
        *(_OWORD *)v65 = v69;
        v65[2] = v68[2];
        *v68 = 0;
        v68[1] = 0;
        v68[2] = 0;
      }
      while (v68 != v67);
      v68 = v383;
      v70 = v384;
      v383 = v65;
      v384 = v66;
      v385 = *((_QWORD *)&v389 + 1);
      if (v70 != v68)
      {
        v71 = v70;
        do
        {
          v74 = (char *)*(v71 - 3);
          v71 -= 3;
          v73 = v74;
          if (v74)
          {
            v75 = (char *)*(v70 - 2);
            v72 = v73;
            if (v75 != v73)
            {
              v76 = (char *)*(v70 - 2);
              do
              {
                v78 = (void *)*((_QWORD *)v76 - 3);
                v76 -= 24;
                v77 = v78;
                if (v78)
                {
                  *((_QWORD *)v75 - 2) = v77;
                  operator delete(v77);
                }
                v75 = v76;
              }
              while (v76 != v73);
              v72 = *v71;
            }
            *(v70 - 2) = v73;
            operator delete(v72);
          }
          v70 = v71;
        }
        while (v71 != v68);
      }
    }
    if (v68)
      operator delete(v68);
    v50 = v376;
    v384 = v66;
    if (!v376)
      goto LABEL_86;
LABEL_85:
    *(_QWORD *)&v377 = v50;
    operator delete(v50);
    goto LABEL_86;
  }
LABEL_120:
  v373[0] = 0;
  v373[1] = 0;
  v374 = 0;
  v372 = 0;
  if (((*(uint64_t (**)(_QWORD, void ***, _QWORD *, char **, void **, uint64_t *))(**(_QWORD **)(a2 + 96)
                                                                                           + 32))(*(_QWORD *)(a2 + 96), &v383, a4, &v386, v373, &v372) & 1) == 0)
  {
    v80 = (char *)v373[0];
    v79 = v373[1];
    if (v373[1] != v373[0])
    {
      v81 = (char *)v373[1];
      do
      {
        v83 = (void *)*((_QWORD *)v81 - 3);
        v81 -= 24;
        v82 = v83;
        if (v83)
        {
          *(v79 - 2) = v82;
          operator delete(v82);
        }
        v79 = v81;
      }
      while (v81 != v80);
    }
    v373[1] = v80;
  }
  if (!*(_BYTE *)(a2 + 81))
  {
    v173 = v380;
    if (v381 != v380)
    {
      v174 = 0;
      v175 = (v381 - v380) / 24;
      v176 = v373[0];
      if (v175 <= 1)
        v175 = 1;
      do
      {
        v177 = &v173[24 * v174];
        v178 = *(_QWORD *)v177;
        v179 = *((_QWORD *)v177 + 1) - *(_QWORD *)v177;
        if (v179)
        {
          v180 = v179 >> 3;
          v181 = v176[3 * v174];
          if (v180 <= 1)
            v180 = 1;
          if (v180 > 1)
          {
            v182 = v180 & 0xFFFFFFFFFFFFFFFELL;
            v183 = (uint64_t *)(v178 + 8);
            v184 = v180 & 0xFFFFFFFFFFFFFFFELL;
            do
            {
              v185 = *v183;
              *(_DWORD *)(v181 + 4 * *(v183 - 1)) = 0;
              *(_DWORD *)(v181 + 4 * v185) = 0;
              v183 += 2;
              v184 -= 2;
            }
            while (v184);
            if (v180 == v182)
              goto LABEL_254;
          }
          else
          {
            v182 = 0;
          }
          v186 = v180 - v182;
          v187 = (uint64_t *)(v178 + 8 * v182);
          do
          {
            v188 = *v187++;
            *(_DWORD *)(v181 + 4 * v188) = 0;
            --v186;
          }
          while (v186);
        }
LABEL_254:
        ++v174;
      }
      while (v174 != v175);
    }
  }
  __p = 0;
  v379 = 0uLL;
  v84 = (float **)v373[0];
  v361 = (float **)v373[1];
  if (v373[0] == v373[1])
  {
    v376 = 0;
    v377 = 0uLL;
    goto LABEL_267;
  }
  do
  {
    v376 = 0;
    v377 = 0uLL;
    v85 = *v84;
    v86 = v84[1];
    v365 = v84;
    if (*v84 != v86)
    {
      v87 = 0;
      v88 = 0;
      v89 = 0;
      while (1)
      {
        v91 = *v85;
        v92 = log10f(*v85);
        if (v91 <= 0.0)
          v92 = -10.0;
        v93 = v92;
        if (v89 >= v88)
          break;
        *v89 = v93;
        v90 = v89 + 1;
LABEL_134:
        *(_QWORD *)&v377 = v90;
        ++v85;
        v89 = v90;
        if (v85 == v86)
          goto LABEL_161;
      }
      v94 = v89 - v87;
      v95 = v94 + 1;
      if ((unint64_t)(v94 + 1) >> 61)
        sub_19C2A18E8();
      if (((char *)v88 - (char *)v87) >> 2 > v95)
        v95 = ((char *)v88 - (char *)v87) >> 2;
      if ((unint64_t)((char *)v88 - (char *)v87) >= 0x7FFFFFFFFFFFFFF8)
        v96 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v96 = v95;
      if (v96)
      {
        if (v96 >> 61)
          sub_19C2A143C();
        v97 = operator new(8 * v96);
      }
      else
      {
        v97 = 0;
      }
      v98 = (double *)&v97[8 * v94];
      *v98 = v93;
      v90 = v98 + 1;
      if (v89 != v87)
      {
        v99 = (char *)(v89 - 1) - (char *)v87;
        if (v99 >= 0x58)
        {
          if ((unint64_t)((char *)v87 - v97) >= 0x20)
          {
            v101 = (v99 >> 3) + 1;
            v100 = &v89[-(v101 & 0x3FFFFFFFFFFFFFFCLL)];
            v102 = &v97[8 * v94 - 16];
            v103 = v89 - 2;
            v104 = v101 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v105 = *(_OWORD *)v103;
              *(v102 - 1) = *((_OWORD *)v103 - 1);
              *v102 = v105;
              v102 -= 2;
              v103 -= 4;
              v104 -= 4;
            }
            while (v104);
            v98 -= v101 & 0x3FFFFFFFFFFFFFFCLL;
            if (v101 == (v101 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_157;
          }
          else
          {
            v100 = v89;
          }
        }
        else
        {
          v100 = v89;
        }
        do
        {
          v106 = *((_QWORD *)v100-- - 1);
          *((_QWORD *)v98-- - 1) = v106;
        }
        while (v100 != v87);
      }
LABEL_157:
      v88 = (double *)&v97[8 * v96];
      v376 = v98;
      *(_QWORD *)&v377 = v90;
      *((_QWORD *)&v377 + 1) = v88;
      if (v87)
        operator delete(v87);
      v87 = v98;
      goto LABEL_134;
    }
    v90 = 0;
LABEL_161:
    v107 = (_QWORD *)v379;
    if ((unint64_t)v379 >= *((_QWORD *)&v379 + 1))
    {
      v113 = __p;
      v114 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v379 - (_QWORD)__p) >> 3);
      v115 = v114 + 1;
      if (v114 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_19C2A18E8();
      if (0x5555555555555556 * ((uint64_t)(*((_QWORD *)&v379 + 1) - (_QWORD)__p) >> 3) > v115)
        v115 = 0x5555555555555556 * ((uint64_t)(*((_QWORD *)&v379 + 1) - (_QWORD)__p) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v379 + 1) - (_QWORD)__p) >> 3) >= 0x555555555555555)
        v116 = 0xAAAAAAAAAAAAAAALL;
      else
        v116 = v115;
      v390 = (unint64_t *)&v379 + 1;
      if (v116)
      {
        if (v116 > 0xAAAAAAAAAAAAAAALL)
          sub_19C2A143C();
        v117 = (char *)operator new(24 * v116);
      }
      else
      {
        v117 = 0;
      }
      *(_QWORD *)&__dst = v117;
      *((_QWORD *)&__dst + 1) = &v117[24 * v114];
      v119 = &v117[24 * v116];
      *(_QWORD *)&v389 = *((_QWORD *)&__dst + 1);
      *((_QWORD *)&v389 + 1) = v119;
      v120 = *((_QWORD *)&__dst + 1);
      *(_QWORD *)(*((_QWORD *)&__dst + 1) + 8) = 0;
      v121 = (char **)(v120 + 8);
      v118 = &v117[24 * v114];
      *((_QWORD *)v118 + 2) = 0;
      *(_QWORD *)v118 = 0;
      v122 = v376;
      v123 = (char *)v90 - (_BYTE *)v376;
      if (v90 != v376)
      {
        if (v123 < 0)
          sub_19C2A18E8();
        v124 = (char *)operator new((char *)v90 - (_BYTE *)v376);
        *(_QWORD *)v118 = v124;
        *v121 = v124;
        v125 = &v124[8 * (v123 >> 3)];
        *((_QWORD *)v118 + 2) = v125;
        memcpy(v124, v122, v123);
        *v121 = v125;
      }
      v126 = v118 + 24;
      *(_QWORD *)&v389 = v118 + 24;
      if (v107 == v113)
      {
        __p = v118;
        *(_QWORD *)&v379 = v118 + 24;
        *((_QWORD *)&v379 + 1) = v119;
        v112 = v365;
      }
      else
      {
        v112 = v365;
        do
        {
          v127 = v118;
          *((_QWORD *)v118 - 2) = 0;
          *((_QWORD *)v118 - 1) = 0;
          v128 = *(_OWORD *)(v107 - 3);
          v107 -= 3;
          *(_OWORD *)(v118 - 24) = v128;
          v118 -= 24;
          *((_QWORD *)v127 - 1) = v107[2];
          *v107 = 0;
          v107[1] = 0;
          v107[2] = 0;
        }
        while (v107 != v113);
        v107 = __p;
        v129 = (_QWORD *)v379;
        __p = v118;
        v379 = v389;
        v126 = (_QWORD *)v389;
        if (v129 != v107)
        {
          v130 = v129;
          do
          {
            v132 = (void *)*(v130 - 3);
            v130 -= 3;
            v131 = v132;
            if (v132)
            {
              *(v129 - 2) = v131;
              operator delete(v131);
            }
            v129 = v130;
          }
          while (v130 != v107);
        }
      }
      if (v107)
        operator delete(v107);
      v108 = v376;
      *(_QWORD *)&v379 = v126;
      if (v376)
LABEL_192:
        operator delete(v108);
    }
    else
    {
      *(_QWORD *)v379 = 0;
      v107[1] = 0;
      v107[2] = 0;
      v108 = v376;
      v109 = (char *)v90 - (_BYTE *)v376;
      if (v90 != v376)
      {
        if (v109 < 0)
          sub_19C2A18E8();
        v110 = (char *)operator new((char *)v90 - (_BYTE *)v376);
        *v107 = v110;
        v107[1] = v110;
        v111 = &v110[8 * (v109 >> 3)];
        v107[2] = v111;
        memcpy(v110, v108, v109);
        v107[1] = v111;
      }
      v112 = v365;
      *(_QWORD *)&v379 = v107 + 3;
      if (v108)
        goto LABEL_192;
    }
    v84 = v112 + 3;
  }
  while (v84 != v361);
  v133 = (uint64_t **)__p;
  v376 = 0;
  v377 = 0uLL;
  v358 = (uint64_t **)v379;
  if (__p != (void *)v379)
  {
    do
    {
      v135 = *v133;
      v134 = v133[1];
      v362 = v133;
      if (*v133 == v134)
      {
        v138 = 0;
        v137 = 0;
      }
      else
      {
        v136 = 0;
        v137 = 0;
        v138 = 0;
        do
        {
          __dst = 0uLL;
          v139 = *v135;
          if (v138 < v136)
          {
            *(_QWORD *)v138 = v139;
            *((_QWORD *)v138 + 1) = v139;
            *((_QWORD *)v138 + 2) = 0;
            *((_WORD *)v138 + 12) = 0;
            v138[32] = 1;
            *((_QWORD *)v138 + 5) = v139;
            *((_QWORD *)v138 + 6) = 0x3FF0000000000000;
            *((_DWORD *)v138 + 14) = 2;
            *((_OWORD *)v138 + 4) = xmmword_19C46DE10;
            *((_QWORD *)v138 + 10) = 0xFFEFFFFFFFFFFFFFLL;
            *(_OWORD *)(v138 + 88) = __dst;
            v138 += 104;
          }
          else
          {
            v140 = 0x4EC4EC4EC4EC4EC5 * ((v138 - v137) >> 3) + 1;
            if (v140 > 0x276276276276276)
              sub_19C2A18E8();
            if (0x9D89D89D89D89D8ALL * ((v136 - v137) >> 3) > v140)
              v140 = 0x9D89D89D89D89D8ALL * ((v136 - v137) >> 3);
            if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((v136 - v137) >> 3)) >= 0x13B13B13B13B13BLL)
              v141 = 0x276276276276276;
            else
              v141 = v140;
            if (v141)
            {
              if (v141 > 0x276276276276276)
                sub_19C2A143C();
              v142 = (char *)operator new(104 * v141);
            }
            else
            {
              v142 = 0;
            }
            v143 = &v142[8 * ((v138 - v137) >> 3)];
            *(_QWORD *)v143 = v139;
            *((_QWORD *)v143 + 1) = v139;
            *((_QWORD *)v143 + 2) = 0;
            *((_WORD *)v143 + 12) = 0;
            v143[32] = 1;
            *((_QWORD *)v143 + 5) = v139;
            *((_QWORD *)v143 + 6) = 0x3FF0000000000000;
            *((_DWORD *)v143 + 14) = 2;
            *((_OWORD *)v143 + 4) = xmmword_19C46DE10;
            *((_QWORD *)v143 + 11) = 0;
            *((_QWORD *)v143 + 12) = 0;
            *((_QWORD *)v143 + 10) = 0xFFEFFFFFFFFFFFFFLL;
            if (v138 == v137)
            {
              v150 = &v142[8 * ((v138 - v137) >> 3)];
            }
            else
            {
              v144 = &v142[8 * ((v138 - v137) >> 3)];
              do
              {
                v145 = *(_OWORD *)(v138 - 104);
                v146 = *(_OWORD *)(v138 - 88);
                *(_OWORD *)(v144 - 72) = *(_OWORD *)(v138 - 72);
                *(_OWORD *)(v144 - 88) = v146;
                *(_OWORD *)(v144 - 104) = v145;
                v147 = *(_OWORD *)(v138 - 56);
                v148 = *(_OWORD *)(v138 - 40);
                v149 = *(_OWORD *)(v138 - 24);
                v150 = v144 - 104;
                *((_QWORD *)v144 - 1) = *((_QWORD *)v138 - 1);
                *(_OWORD *)(v144 - 24) = v149;
                *(_OWORD *)(v144 - 40) = v148;
                *(_OWORD *)(v144 - 56) = v147;
                v138 -= 104;
                v144 -= 104;
              }
              while (v138 != v137);
            }
            v136 = &v142[104 * v141];
            v138 = v143 + 104;
            if (v137)
              operator delete(v137);
            v137 = v150;
          }
          ++v135;
        }
        while (v135 != v134);
      }
      v151 = (_QWORD *)v377;
      if ((unint64_t)v377 >= *((_QWORD *)&v377 + 1))
      {
        v157 = v376;
        v158 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v377 - (_QWORD)v376) >> 3);
        v159 = v158 + 1;
        if (v158 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_19C2A18E8();
        if (0x5555555555555556 * ((uint64_t)(*((_QWORD *)&v377 + 1) - (_QWORD)v376) >> 3) > v159)
          v159 = 0x5555555555555556 * ((uint64_t)(*((_QWORD *)&v377 + 1) - (_QWORD)v376) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v377 + 1) - (_QWORD)v376) >> 3) >= 0x555555555555555)
          v160 = 0xAAAAAAAAAAAAAAALL;
        else
          v160 = v159;
        v390 = (unint64_t *)&v377 + 1;
        if (v160)
        {
          if (v160 > 0xAAAAAAAAAAAAAAALL)
            sub_19C2A143C();
          v161 = (char *)operator new(24 * v160);
        }
        else
        {
          v161 = 0;
        }
        v162 = &v161[24 * v158];
        *(_QWORD *)&__dst = v161;
        *((_QWORD *)&__dst + 1) = v162;
        v163 = &v161[24 * v160];
        *((_QWORD *)v162 + 1) = 0;
        *(_QWORD *)&v389 = v162;
        *((_QWORD *)&v389 + 1) = v163;
        *((_QWORD *)v162 + 2) = 0;
        *(_QWORD *)v162 = 0;
        v164 = v138 - v137;
        if (v164)
        {
          v356 = &v161[24 * v160];
          v357 = (char **)(v162 + 8);
          if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * (v164 >> 3)) > 0x276276276276276)
            sub_19C2A18E8();
          v165 = (char *)operator new(v164);
          *(_QWORD *)v162 = v165;
          *v357 = v165;
          v166 = &v165[8 * (v164 >> 3)];
          *((_QWORD *)v162 + 2) = v166;
          memcpy(v165, v137, v164);
          v163 = v356;
          *v357 = v166;
        }
        v155 = v162 + 24;
        *(_QWORD *)&v389 = v162 + 24;
        if (v151 == v157)
        {
          v376 = v162;
          *(_QWORD *)&v377 = v162 + 24;
          *((_QWORD *)&v377 + 1) = v163;
        }
        else
        {
          do
          {
            v167 = v162;
            *((_QWORD *)v162 - 2) = 0;
            *((_QWORD *)v162 - 1) = 0;
            v168 = *(_OWORD *)(v151 - 3);
            v151 -= 3;
            *(_OWORD *)(v162 - 24) = v168;
            v162 -= 24;
            *((_QWORD *)v167 - 1) = v151[2];
            *v151 = 0;
            v151[1] = 0;
            v151[2] = 0;
          }
          while (v151 != v157);
          v151 = v376;
          v169 = (_QWORD *)v377;
          v376 = v162;
          v377 = v389;
          v155 = (_QWORD *)v389;
          if (v169 != v151)
          {
            v170 = v169;
            do
            {
              v172 = (void *)*(v170 - 3);
              v170 -= 3;
              v171 = v172;
              if (v172)
              {
                *(v169 - 2) = v171;
                operator delete(v171);
              }
              v169 = v170;
            }
            while (v170 != v151);
          }
        }
        v156 = v362;
        if (v151)
          operator delete(v151);
      }
      else
      {
        *(_OWORD *)v377 = 0uLL;
        v151[2] = 0;
        v152 = v138 - v137;
        if (v152)
        {
          if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * (v152 >> 3)) > 0x276276276276276)
            sub_19C2A18E8();
          v153 = (char *)operator new(v152);
          *v151 = v153;
          v151[1] = v153;
          v154 = &v153[8 * (v152 >> 3)];
          v151[2] = v154;
          memcpy(v153, v137, v152);
          v151[1] = v154;
        }
        v155 = v151 + 3;
        v156 = v362;
      }
      *(_QWORD *)&v377 = v155;
      if (v137)
        operator delete(v137);
      v133 = v156 + 3;
    }
    while (v133 != v358);
  }
LABEL_267:
  v370[0] = 0;
  v370[1] = 0;
  v371 = 0;
  if (*(_DWORD *)(a2 + 48) != 3)
  {
    v231 = *(_QWORD *)(a2 + 176);
    *(_QWORD *)&__dst = &off_1E3D38A58;
    *((_QWORD *)&v389 + 1) = &__dst;
    sub_19C442BD0((void ***)&v368, v231, a3, a4, a5, &v376, 0, &__dst);
    v232 = (_QWORD *)a1;
    v233 = (void **)v368;
    if (v368)
    {
      v234 = v369;
      v235 = v368;
      if (v369 != v368)
      {
        v236 = v369;
        do
        {
          v239 = *(v236 - 3);
          v236 -= 3;
          v238 = v239;
          if (v239)
          {
            v240 = *(v234 - 2);
            v237 = v238;
            if (v240 != v238)
            {
              do
              {
                v242 = *--v240;
                v241 = v242;
                *v240 = 0;
                if (v242)
                  MEMORY[0x1A1AD355C](v241, 0x1000C4065B674BELL);
              }
              while (v240 != v238);
              v237 = *v236;
            }
            *(v234 - 2) = v238;
            operator delete(v237);
          }
          v234 = v236;
        }
        while (v236 != v233);
        v235 = v368;
        v232 = (_QWORD *)a1;
      }
      v369 = v233;
      operator delete(v235);
    }
    p_dst = (__int128 *)*((_QWORD *)&v389 + 1);
    if (*((__int128 **)&v389 + 1) == &__dst)
    {
      v246 = 4;
      p_dst = &__dst;
    }
    else
    {
      if (!*((_QWORD *)&v389 + 1))
        goto LABEL_343;
      v246 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)p_dst + 8 * v246))();
LABEL_343:
    *v232 = 0;
    v232[1] = 0;
    v232[2] = 0;
    v247 = (__int128 **)v376;
    v248 = (__int128 **)v377;
    v363 = (__int128 **)v377;
    while (1)
    {
      if (v247 == v248)
      {
        v308 = (void **)v370[0];
        if (v370[0])
        {
          v309 = (void **)v370[1];
          v310 = v370[0];
          if (v370[1] != v370[0])
          {
            v311 = (void **)v370[1];
            do
            {
              v314 = *(v311 - 3);
              v311 -= 3;
              v313 = v314;
              if (v314)
              {
                v315 = *(v309 - 2);
                v312 = v313;
                if (v315 != v313)
                {
                  do
                  {
                    v317 = *--v315;
                    v316 = v317;
                    *v315 = 0;
                    if (v317)
                      MEMORY[0x1A1AD355C](v316, 0x1000C4065B674BELL);
                  }
                  while (v315 != v313);
                  v312 = *v311;
                }
                *(v309 - 2) = v313;
                operator delete(v312);
              }
              v309 = v311;
            }
            while (v311 != v308);
            v310 = v370[0];
          }
          v370[1] = v308;
          operator delete(v310);
        }
        goto LABEL_425;
      }
      __dst = 0uLL;
      *(_QWORD *)&v389 = 0;
      v250 = *v247;
      v251 = v247[1];
      v367 = v247;
      if (*v247 != v251)
        break;
      v249 = 0;
LABEL_350:
      v252 = *(_QWORD *)(a1 + 8);
      if (v252 >= *(_QWORD *)(a1 + 16))
      {
        v253 = sub_19C311C18((void ***)a1, (__int128 ***)&__dst);
        v254 = a1;
      }
      else
      {
        sub_19C311AF8(*(_QWORD **)(a1 + 8), (__int128 ***)&__dst);
        v253 = (char *)(v252 + 24);
        v254 = a1;
        *(_QWORD *)(a1 + 8) = v252 + 24;
      }
      *(_QWORD *)(v254 + 8) = v253;
      v305 = (_QWORD *)__dst;
      if ((_QWORD)__dst)
      {
        if (v249 != (_QWORD *)__dst)
        {
          do
          {
            v307 = *--v249;
            v306 = v307;
            *v249 = 0;
            if (v307)
              MEMORY[0x1A1AD355C](v306, 0x1000C4065B674BELL);
          }
          while (v249 != v305);
          v249 = (_QWORD *)__dst;
        }
        *((_QWORD *)&__dst + 1) = v305;
        operator delete(v249);
      }
      v248 = v363;
      v247 = v367 + 3;
    }
    while (1)
    {
      v255 = *((double *)v250 + 9);
      if (v255 <= 0.0)
        goto LABEL_376;
      if (*((double *)v250 + 6) <= 0.0)
      {
        *((_QWORD *)v250 + 6) = 0;
        if (v255 > 0.0)
          goto LABEL_367;
      }
      else
      {
        v256 = *(_QWORD *)(a2 + 176);
        v257 = *(_QWORD *)(v256 + 72);
        v258 = *(std::__shared_weak_count **)(v256 + 80);
        if (v258)
        {
          p_shared_owners = (unint64_t *)&v258->__shared_owners_;
          do
            v260 = __ldxr(p_shared_owners);
          while (__stxr(v260 + 1, p_shared_owners));
          *((double *)v250 + 6) = *(float *)(*(_QWORD *)(v257 + 232) + 420);
          do
            v261 = __ldaxr(p_shared_owners);
          while (__stlxr(v261 - 1, p_shared_owners));
          if (!v261)
          {
            ((void (*)(std::__shared_weak_count *))v258->__on_zero_shared)(v258);
            std::__shared_weak_count::__release_weak(v258);
          }
        }
        else
        {
          *((double *)v250 + 6) = *(float *)(*(_QWORD *)(v257 + 232) + 420);
        }
        if (*((double *)v250 + 9) > 0.0)
        {
LABEL_367:
          v262 = *(_QWORD *)(a2 + 176);
          v263 = *(_QWORD *)(v262 + 72);
          v264 = *(std::__shared_weak_count **)(v262 + 80);
          if (v264)
          {
            v265 = (unint64_t *)&v264->__shared_owners_;
            do
              v266 = __ldxr(v265);
            while (__stxr(v266 + 1, v265));
            *((double *)v250 + 9) = *(float *)(*(_QWORD *)(v263 + 232) + 424);
            do
              v267 = __ldaxr(v265);
            while (__stlxr(v267 - 1, v265));
            if (!v267)
            {
              ((void (*)(std::__shared_weak_count *))v264->__on_zero_shared)(v264);
              std::__shared_weak_count::__release_weak(v264);
            }
          }
          else
          {
            *((double *)v250 + 9) = *(float *)(*(_QWORD *)(v263 + 232) + 424);
          }
          goto LABEL_375;
        }
      }
      *((_QWORD *)v250 + 9) = 0;
LABEL_375:
      v268 = *((double *)v250 + 6);
      v269 = __exp10(*((double *)v250 + 5)) * v268;
      v270 = *((double *)v250 + 9);
      v271 = v269 + __exp10(*((double *)v250 + 8)) * v270;
      v272 = *((double *)v250 + 11);
      v273 = __exp10(*((double *)v250 + 10));
      *(long double *)v250 = log10(v271 + v273 * v272) - *((double *)v250 + 12);
LABEL_376:
      v274 = operator new();
      v275 = v274;
      v276 = *v250;
      v277 = v250[2];
      *(_OWORD *)(v274 + 16) = v250[1];
      *(_OWORD *)(v274 + 32) = v277;
      *(_OWORD *)v274 = v276;
      v278 = v250[3];
      v279 = v250[4];
      v280 = v250[5];
      *(_QWORD *)(v274 + 96) = *((_QWORD *)v250 + 12);
      *(_OWORD *)(v274 + 64) = v279;
      *(_OWORD *)(v274 + 80) = v280;
      *(_OWORD *)(v274 + 48) = v278;
      *(_DWORD *)(v274 + 104) = *((_DWORD *)v250 + 6) & 1 | (2 * ((*((_DWORD *)v250 + 6) >> 8) & 1));
      v281 = (char *)*((_QWORD *)&__dst + 1);
      if (*((_QWORD *)&__dst + 1) >= (unint64_t)v389)
      {
        v282 = (char *)__dst;
        v283 = (uint64_t)(*((_QWORD *)&__dst + 1) - __dst) >> 3;
        v284 = v283 + 1;
        if ((unint64_t)(v283 + 1) >> 61)
          sub_19C2A18E8();
        v285 = v389 - __dst;
        if ((uint64_t)(v389 - __dst) >> 2 > v284)
          v284 = v285 >> 2;
        if ((unint64_t)v285 >= 0x7FFFFFFFFFFFFFF8)
          v286 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v286 = v284;
        if (v286)
        {
          if (v286 >> 61)
            sub_19C2A143C();
          v287 = (char *)operator new(8 * v286);
        }
        else
        {
          v287 = 0;
        }
        v288 = (uint64_t *)&v287[8 * v283];
        *v288 = v275;
        if (v281 == v282)
        {
          *(_QWORD *)&__dst = &v287[8 * v283];
          *(_QWORD *)&v389 = &v287[8 * v286];
        }
        else
        {
          v289 = v281 - v282 - 8;
          if (v289 < 0x78)
          {
            v290 = &v287[8 * v283];
            goto LABEL_399;
          }
          v291 = v289 >> 3;
          if (&v281[-8 * (v289 >> 3) - 8] < (char *)v288)
          {
            v292 = (unint64_t)&v287[v281 - v282 - (v289 & 0xFFFFFFFFFFFFFFF8) - 8];
            v290 = &v287[8 * v283];
            if (v292 < (unint64_t)v281)
              goto LABEL_500;
          }
          v293 = v291 + 1;
          v294 = 8 * (v293 & 0x3FFFFFFFFFFFFFFCLL);
          v295 = &v281[-v294];
          v290 = (char *)&v288[v294 / 0xFFFFFFFFFFFFFFF8];
          v296 = &v287[8 * v283 - 16];
          v297 = v281 - 16;
          v298 = v293 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v300 = *((_OWORD *)v297 - 1);
            v299 = *(_OWORD *)v297;
            *((_OWORD *)v297 - 1) = 0uLL;
            *(_OWORD *)v297 = 0uLL;
            *((_OWORD *)v296 - 1) = v300;
            *(_OWORD *)v296 = v299;
            v296 -= 32;
            v297 -= 32;
            v298 -= 4;
          }
          while (v298);
          v281 = v295;
          if (v293 != (v293 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_500:
            do
            {
LABEL_399:
              v301 = *((_QWORD *)v281 - 1);
              v281 -= 8;
              *(_QWORD *)v281 = 0;
              *((_QWORD *)v290 - 1) = v301;
              v290 -= 8;
            }
            while (v281 != v282);
          }
          v302 = (char *)*((_QWORD *)&__dst + 1);
          v281 = (char *)__dst;
          *(_QWORD *)&__dst = v290;
          *(_QWORD *)&v389 = &v287[8 * v286];
          while (v302 != v281)
          {
            v304 = *((_QWORD *)v302 - 1);
            v302 -= 8;
            v303 = v304;
            *(_QWORD *)v302 = 0;
            if (v304)
              MEMORY[0x1A1AD355C](v303, 0x1000C4065B674BELL);
          }
        }
        if (v281)
          operator delete(v281);
        v281 = (char *)v288;
        goto LABEL_353;
      }
      **((_QWORD **)&__dst + 1) = v274;
LABEL_353:
      v249 = v281 + 8;
      *((_QWORD *)&__dst + 1) = v249;
      v250 = (__int128 *)((char *)v250 + 104);
      if (v250 == v251)
        goto LABEL_350;
    }
  }
  v189 = (__int128 **)v376;
  v366 = (__int128 **)v377;
  if (v376 != (void *)v377)
  {
    while (1)
    {
      __dst = 0uLL;
      *(_QWORD *)&v389 = 0;
      v191 = *v189;
      v192 = v189[1];
      if (*v189 != v192)
        break;
      v190 = 0;
LABEL_311:
      v226 = (char *)v370[1];
      if (v370[1] >= v371)
      {
        v227 = sub_19C311C18((void ***)v370, (__int128 ***)&__dst);
      }
      else
      {
        sub_19C311AF8((_QWORD *)v370[1], (__int128 ***)&__dst);
        v227 = v226 + 24;
      }
      v370[1] = v227;
      v228 = (_QWORD *)__dst;
      if ((_QWORD)__dst)
      {
        if (v190 != (_QWORD *)__dst)
        {
          do
          {
            v230 = *--v190;
            v229 = v230;
            *v190 = 0;
            if (v230)
              MEMORY[0x1A1AD355C](v229, 0x1000C4065B674BELL);
          }
          while (v190 != v228);
          v190 = (_QWORD *)__dst;
        }
        *((_QWORD *)&__dst + 1) = v228;
        operator delete(v190);
      }
      v189 += 3;
      if (v189 == v366)
      {
        v243 = *(_OWORD *)v370;
        v244 = v371;
        goto LABEL_340;
      }
    }
    v193 = 0;
    v194 = 0;
    while (2)
    {
      v195 = operator new();
      v196 = v195;
      v197 = *v191;
      v198 = v191[2];
      *(_OWORD *)(v195 + 16) = v191[1];
      *(_OWORD *)(v195 + 32) = v198;
      *(_OWORD *)v195 = v197;
      v199 = v191[3];
      v200 = v191[4];
      v201 = v191[5];
      *(_QWORD *)(v195 + 96) = *((_QWORD *)v191 + 12);
      *(_OWORD *)(v195 + 64) = v200;
      *(_OWORD *)(v195 + 80) = v201;
      *(_OWORD *)(v195 + 48) = v199;
      *(_DWORD *)(v195 + 104) = *((_DWORD *)v191 + 6) & 1 | (2 * ((*((_DWORD *)v191 + 6) >> 8) & 1));
      if ((unint64_t)v194 < (unint64_t)v389)
      {
        *v194 = v195;
        v190 = v194 + 1;
      }
      else
      {
        v202 = (char *)v194 - (char *)v193;
        v203 = v194 - v193;
        v204 = v203 + 1;
        if ((unint64_t)(v203 + 1) >> 61)
          sub_19C2A18E8();
        v205 = v389 - (_QWORD)v193;
        if ((uint64_t)(v389 - (_QWORD)v193) >> 2 > v204)
          v204 = v205 >> 2;
        if ((unint64_t)v205 >= 0x7FFFFFFFFFFFFFF8)
          v206 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v206 = v204;
        if (v206)
        {
          if (v206 >> 61)
            sub_19C2A143C();
          v207 = (char *)operator new(8 * v206);
        }
        else
        {
          v207 = 0;
        }
        v193 = (uint64_t *)&v207[8 * v203];
        v208 = &v207[8 * v206];
        *v193 = v196;
        v190 = v193 + 1;
        v209 = (uint64_t *)__dst;
        v210 = (char *)v194 - __dst;
        if (v194 == (uint64_t *)__dst)
        {
          *(_QWORD *)&__dst = &v207[8 * v203];
          *((_QWORD *)&__dst + 1) = v193 + 1;
          *(_QWORD *)&v389 = v208;
        }
        else
        {
          v211 = v210 - 8;
          if ((unint64_t)(v210 - 8) < 0x138)
          {
            v212 = v194;
            goto LABEL_291;
          }
          v217 = (unint64_t)v211 & 0xFFFFFFFFFFFFFFF8;
          if ((uint64_t *)((char *)v194 - ((unint64_t)v211 & 0xFFFFFFFFFFFFFFF8) - 8) > v194 - 1)
          {
            v212 = v194;
            goto LABEL_291;
          }
          if (&v207[v202 - 8 - v217] > &v207[v202 - 8])
          {
            v212 = v194;
            goto LABEL_291;
          }
          v218 = (unint64_t)v211 >> 3;
          if (&v194[-v218 - 1] < v193 && &v207[v202 - v217 - 8] < (char *)v194)
          {
            v212 = v194;
            goto LABEL_291;
          }
          v219 = v218 + 1;
          v220 = 8 * (v219 & 0x3FFFFFFFFFFFFFFCLL);
          v212 = &v194[v220 / 0xFFFFFFFFFFFFFFF8];
          v193 = (uint64_t *)((char *)v193 - v220);
          v221 = &v207[8 * v203 - 16];
          v222 = v194 - 2;
          v223 = v219 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v225 = *((_OWORD *)v222 - 1);
            v224 = *(_OWORD *)v222;
            *((_OWORD *)v222 - 1) = 0uLL;
            *(_OWORD *)v222 = 0uLL;
            *((_OWORD *)v221 - 1) = v225;
            *(_OWORD *)v221 = v224;
            v221 -= 32;
            v222 -= 4;
            v223 -= 4;
          }
          while (v223);
          if (v219 != (v219 & 0x3FFFFFFFFFFFFFFCLL))
          {
            do
            {
LABEL_291:
              v213 = *--v212;
              *v212 = 0;
              *--v193 = v213;
            }
            while (v212 != v209);
          }
          v214 = (uint64_t *)*((_QWORD *)&__dst + 1);
          v194 = (uint64_t *)__dst;
          *(_QWORD *)&__dst = v193;
          *((_QWORD *)&__dst + 1) = v190;
          *(_QWORD *)&v389 = v208;
          while (v214 != v194)
          {
            v216 = *--v214;
            v215 = v216;
            *v214 = 0;
            if (v216)
              MEMORY[0x1A1AD355C](v215, 0x1000C4065B674BELL);
          }
        }
        if (v194)
          operator delete(v194);
      }
      *((_QWORD *)&__dst + 1) = v190;
      v191 = (__int128 *)((char *)v191 + 104);
      v194 = v190;
      if (v191 == v192)
        goto LABEL_311;
      continue;
    }
  }
  v244 = 0;
  v243 = 0uLL;
LABEL_340:
  *(_OWORD *)a1 = v243;
  *(_QWORD *)(a1 + 16) = v244;
LABEL_425:
  v318 = (char *)v376;
  if (v376)
  {
    v319 = (char *)v377;
    v320 = v376;
    if ((void *)v377 != v376)
    {
      v321 = (char *)v377;
      do
      {
        v323 = (void *)*((_QWORD *)v321 - 3);
        v321 -= 24;
        v322 = v323;
        if (v323)
        {
          *((_QWORD *)v319 - 2) = v322;
          operator delete(v322);
        }
        v319 = v321;
      }
      while (v321 != v318);
      v320 = v376;
    }
    *(_QWORD *)&v377 = v318;
    operator delete(v320);
  }
  v324 = (char *)__p;
  if (__p)
  {
    v325 = (char *)v379;
    v326 = __p;
    if ((void *)v379 != __p)
    {
      v327 = (char *)v379;
      do
      {
        v329 = (void *)*((_QWORD *)v327 - 3);
        v327 -= 24;
        v328 = v329;
        if (v329)
        {
          *((_QWORD *)v325 - 2) = v328;
          operator delete(v328);
        }
        v325 = v327;
      }
      while (v327 != v324);
      v326 = __p;
    }
    *(_QWORD *)&v379 = v324;
    operator delete(v326);
  }
  v330 = (char *)v373[0];
  if (v373[0])
  {
    v331 = v373[1];
    v332 = v373[0];
    if (v373[1] != v373[0])
    {
      v333 = (char *)v373[1];
      do
      {
        v335 = (void *)*((_QWORD *)v333 - 3);
        v333 -= 24;
        v334 = v335;
        if (v335)
        {
          *(v331 - 2) = v334;
          operator delete(v334);
        }
        v331 = v333;
      }
      while (v333 != v330);
      v332 = v373[0];
    }
    v373[1] = v330;
    operator delete(v332);
  }
  v336 = v380;
  if (v380)
  {
    v337 = v381;
    v338 = v380;
    if (v381 != v380)
    {
      v339 = v381;
      do
      {
        v341 = (void *)*((_QWORD *)v339 - 3);
        v339 -= 24;
        v340 = v341;
        if (v341)
        {
          *((_QWORD *)v337 - 2) = v340;
          operator delete(v340);
        }
        v337 = v339;
      }
      while (v339 != v336);
      v338 = v380;
    }
    v381 = v336;
    operator delete(v338);
  }
  v342 = v383;
  if (v383)
  {
    v343 = v384;
    v344 = v383;
    if (v384 != v383)
    {
      v345 = v384;
      do
      {
        v348 = (char *)*(v345 - 3);
        v345 -= 3;
        v347 = v348;
        if (v348)
        {
          v349 = (char *)*(v343 - 2);
          v346 = v347;
          if (v349 != v347)
          {
            v350 = (char *)*(v343 - 2);
            do
            {
              v352 = (void *)*((_QWORD *)v350 - 3);
              v350 -= 24;
              v351 = v352;
              if (v352)
              {
                *((_QWORD *)v349 - 2) = v351;
                operator delete(v351);
              }
              v349 = v350;
            }
            while (v350 != v347);
            v346 = *v345;
          }
          *(v343 - 2) = v347;
          operator delete(v346);
        }
        v343 = v345;
      }
      while (v345 != v342);
      v344 = v383;
    }
    v384 = v342;
    operator delete(v344);
  }
  if (v386)
  {
    v387 = (unsigned int *)v386;
    operator delete(v386);
  }
}

void sub_19C31132C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void **a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,uint64_t a36,void *a37,uint64_t a38)
{
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v41;
  uint64_t v42;
  void *v43;

  v41 = *(_QWORD **)(v39 - 136);
  if (v41 == v38)
  {
    v42 = 4;
    v41 = (_QWORD *)(v39 - 160);
  }
  else
  {
    if (!v41)
      goto LABEL_6;
    v42 = 5;
  }
  (*(void (**)(void))(*v41 + 8 * v42))();
LABEL_6:
  sub_19C311614(&a25);
  sub_19C311A84(&__p);
  sub_19C311A84(&a37);
  sub_19C311A84(&a29);
  sub_19C311A84((void **)(v39 - 232));
  sub_19C311E60((void ***)(v39 - 208));
  v43 = *(void **)(v39 - 184);
  if (!v43)
    _Unwind_Resume(a1);
  *(_QWORD *)(v39 - 176) = v43;
  operator delete(v43);
  _Unwind_Resume(a1);
}

void sub_19C3115F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  uint64_t v34;

  if (*(char *)(v34 - 137) < 0)
  {
    operator delete(*(void **)(v34 - 160));
    if (!a34)
      JUMPOUT(0x19C3115A4);
    JUMPOUT(0x19C31159CLL);
  }
  JUMPOUT(0x19C311594);
}

void ***sub_19C311614(void ***a1)
{
  void **v2;
  void **v3;
  void **v4;
  void **v5;
  void *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *a1;
  if (*a1)
  {
    v3 = a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      v5 = a1[1];
      do
      {
        v8 = *(v5 - 3);
        v5 -= 3;
        v7 = v8;
        if (v8)
        {
          v9 = *(v3 - 2);
          v6 = v7;
          if (v9 != v7)
          {
            do
            {
              v11 = *--v9;
              v10 = v11;
              *v9 = 0;
              if (v11)
                MEMORY[0x1A1AD355C](v10, 0x1000C4065B674BELL);
            }
            while (v9 != v7);
            v6 = *v5;
          }
          *(v3 - 2) = v7;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

char *sub_19C3116D0(char **a1, const void *a2, uint64_t a3)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  int64_t v14;
  void *v15;
  unint64_t v16;
  char *v17;
  char *v18;
  __int128 v19;
  char *v20;
  char *v21;
  void *v22;
  void *v23;
  __int128 v25;

  v4 = *a1;
  v3 = a1[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_19C2A18E8();
  if (0x5555555555555556 * ((a1[2] - v4) >> 3) > v6)
    v6 = 0x5555555555555556 * ((a1[2] - v4) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v4) >> 3) >= 0x555555555555555)
    v10 = 0xAAAAAAAAAAAAAAALL;
  else
    v10 = v6;
  if (v10)
  {
    if (v10 > 0xAAAAAAAAAAAAAAALL)
      sub_19C2A143C();
    v11 = (char *)operator new(24 * v10);
  }
  else
  {
    v11 = 0;
  }
  v12 = &v11[24 * v5];
  v13 = &v11[24 * v10];
  *((_QWORD *)&v25 + 1) = v13;
  *((_QWORD *)v12 + 1) = 0;
  *(_QWORD *)v12 = 0;
  *((_QWORD *)v12 + 2) = 0;
  v14 = a3 - (_QWORD)a2;
  if (v14)
  {
    if (v14 < 0)
      sub_19C2A18E8();
    v15 = operator new(v14);
    *(_QWORD *)v12 = v15;
    v16 = (unint64_t)v15 + 8 * (v14 >> 3);
    memcpy(v15, a2, v14);
    *(int64x2_t *)(v12 + 8) = vdupq_n_s64(v16);
  }
  v17 = v12 + 24;
  *(_QWORD *)&v25 = v12 + 24;
  if (v3 == v4)
  {
    *a1 = v12;
    a1[1] = v17;
    a1[2] = v13;
  }
  else
  {
    do
    {
      v18 = v12;
      *((_QWORD *)v12 - 2) = 0;
      *((_QWORD *)v12 - 1) = 0;
      v19 = *(_OWORD *)(v3 - 24);
      v3 -= 24;
      *(_OWORD *)(v12 - 24) = v19;
      v12 -= 24;
      *((_QWORD *)v18 - 1) = *((_QWORD *)v3 + 2);
      *(_QWORD *)v3 = 0;
      *((_QWORD *)v3 + 1) = 0;
      *((_QWORD *)v3 + 2) = 0;
    }
    while (v3 != v4);
    v3 = *a1;
    v20 = a1[1];
    *a1 = v12;
    *(_OWORD *)(a1 + 1) = v25;
    v17 = (char *)v25;
    if (v20 != v3)
    {
      v21 = v20;
      do
      {
        v23 = (void *)*((_QWORD *)v21 - 3);
        v21 -= 24;
        v22 = v23;
        if (v23)
        {
          *((_QWORD *)v20 - 2) = v22;
          operator delete(v22);
        }
        v20 = v21;
      }
      while (v21 != v3);
    }
  }
  if (v3)
    operator delete(v3);
  return v17;
}

void sub_19C31189C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void **v2;
  _QWORD *v3;
  void *v5;
  va_list va;

  va_start(va, a2);
  v5 = *v2;
  if (*v2)
  {
    *v3 = v5;
    operator delete(v5);
  }
  sub_19C2F020C((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_19C3118C0(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  int64_t v14;
  char *v15;

  a1[2] = 0;
  *a1 = 0;
  a1[1] = 0;
  v3 = *a2;
  v4 = a2[1];
  v5 = v4 - *a2;
  if (v4 != *a2)
  {
    v6 = 0xAAAAAAAAAAAAAAABLL * (v5 >> 3);
    if (v6 >= 0xAAAAAAAAAAAAAABLL)
      sub_19C2A18E8();
    v7 = (char *)operator new(v5);
    v8 = 0;
    *a1 = v7;
    a1[1] = v7;
    a1[2] = &v7[24 * v6];
    do
    {
      v10 = &v7[v8];
      v11 = v3 + v8;
      *(_QWORD *)v10 = 0;
      *((_QWORD *)v10 + 1) = 0;
      *((_QWORD *)v10 + 2) = 0;
      v13 = *(_BYTE **)(v3 + v8);
      v12 = *(_BYTE **)(v3 + v8 + 8);
      v14 = v12 - v13;
      if (v12 != v13)
      {
        if (v14 < 0)
          sub_19C2A18E8();
        v15 = (char *)operator new(v12 - v13);
        *(_QWORD *)v10 = v15;
        *((_QWORD *)v10 + 1) = v15;
        v9 = &v15[4 * (v14 >> 2)];
        *((_QWORD *)v10 + 2) = v9;
        memcpy(v15, v13, v14);
        *((_QWORD *)v10 + 1) = v9;
      }
      v8 += 24;
    }
    while (v11 + 24 != v4);
    a1[1] = &v7[v8];
  }
  return a1;
}

void sub_19C311A00(_Unwind_Exception *exception_object)
{
  void **v1;
  char *v3;
  char *v4;
  void *v5;
  char *v6;
  void *v7;
  void *v8;

  v3 = (char *)*v1;
  if (*v1)
  {
    v4 = (char *)v1[1];
    v5 = *v1;
    if (v4 != v3)
    {
      v6 = (char *)v1[1];
      do
      {
        v8 = (void *)*((_QWORD *)v6 - 3);
        v6 -= 24;
        v7 = v8;
        if (v8)
        {
          *((_QWORD *)v4 - 2) = v7;
          operator delete(v7);
        }
        v4 = v6;
      }
      while (v6 != v3);
      v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void **sub_19C311A84(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  char *v5;
  void *v6;
  void *v7;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      v5 = (char *)a1[1];
      do
      {
        v7 = (void *)*((_QWORD *)v5 - 3);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *((_QWORD *)v3 - 2) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

_QWORD *sub_19C311AF8(_QWORD *a1, __int128 ***a2)
{
  __int128 **v3;
  __int128 **v4;
  uint64_t v5;
  _QWORD *v6;
  __int128 *v7;
  _OWORD *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v3 = *a2;
  v4 = a2[1];
  v5 = (char *)v4 - (char *)*a2;
  if (v4 != *a2)
  {
    if (v5 < 0)
      sub_19C2A18E8();
    v6 = operator new((char *)v4 - (char *)*a2);
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[v5 >> 3];
    do
    {
      v7 = *v3;
      v8 = (_OWORD *)operator new();
      v9 = *v7;
      v10 = v7[2];
      v8[1] = v7[1];
      v8[2] = v10;
      *v8 = v9;
      v11 = v7[3];
      v12 = v7[4];
      v13 = v7[6];
      v8[5] = v7[5];
      v8[6] = v13;
      v8[3] = v11;
      v8[4] = v12;
      *v6++ = v8;
      ++v3;
    }
    while (v3 != v4);
    a1[1] = v6;
  }
  return a1;
}

void sub_19C311BB4(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v3 = (_QWORD *)*v1;
  if (*v1)
  {
    v4 = (_QWORD *)v1[1];
    v5 = (_QWORD *)*v1;
    if (v4 != v3)
    {
      do
      {
        v7 = *--v4;
        v6 = v7;
        *v4 = 0;
        if (v7)
          MEMORY[0x1A1AD355C](v6, 0x1000C4065B674BELL);
      }
      while (v4 != v3);
      v5 = (_QWORD *)*v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

char *sub_19C311C18(void ***a1, __int128 ***a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v6;
  char *v7;
  void **v8;
  void **v9;
  void **v10;
  void **v11;
  __int128 v12;
  void **v13;
  void **v14;
  void *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  char *v22;
  void **v23;

  v2 = 0xAAAAAAAAAAAAAAABLL * (a1[1] - *a1);
  v3 = v2 + 1;
  if (v2 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_19C2A18E8();
  if (0x5555555555555556 * (a1[2] - *a1) > v3)
    v3 = 0x5555555555555556 * (a1[2] - *a1);
  if (0xAAAAAAAAAAAAAAABLL * (a1[2] - *a1) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v3;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_19C2A143C();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v22 = &v7[24 * v2];
  v23 = (void **)&v7[24 * v6];
  sub_19C311AF8(v22, a2);
  v8 = (void **)v22;
  v9 = (void **)(v22 + 24);
  v10 = *a1;
  v11 = a1[1];
  if (v11 == *a1)
  {
    *a1 = (void **)v22;
    a1[1] = v9;
    a1[2] = v23;
  }
  else
  {
    do
    {
      *(v8 - 3) = 0;
      *(v8 - 2) = 0;
      v8 -= 3;
      v8[2] = 0;
      v12 = *(_OWORD *)(v11 - 3);
      v11 -= 3;
      *(_OWORD *)v8 = v12;
      v8[2] = v11[2];
      *v11 = 0;
      v11[1] = 0;
      v11[2] = 0;
    }
    while (v11 != v10);
    v11 = *a1;
    v13 = a1[1];
    *a1 = v8;
    a1[1] = v9;
    a1[2] = v23;
    if (v13 != v11)
    {
      v14 = v13;
      do
      {
        v17 = *(v14 - 3);
        v14 -= 3;
        v16 = v17;
        if (v17)
        {
          v18 = *(v13 - 2);
          v15 = v16;
          if (v18 != v16)
          {
            do
            {
              v20 = *--v18;
              v19 = v20;
              *v18 = 0;
              if (v20)
                MEMORY[0x1A1AD355C](v19, 0x1000C4065B674BELL);
            }
            while (v18 != v16);
            v15 = *v14;
          }
          *(v13 - 2) = v16;
          operator delete(v15);
        }
        v13 = v14;
      }
      while (v14 != v11);
    }
  }
  if (v11)
    operator delete(v11);
  return v22 + 24;
}

void sub_19C311DD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C311FD0((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_19C311DE4(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = (_QWORD *)*a1;
  if (*a1)
  {
    v3 = (_QWORD *)a1[1];
    v4 = (_QWORD *)*a1;
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          MEMORY[0x1A1AD355C](v5, 0x1000C4065B674BELL);
      }
      while (v3 != v2);
      v4 = (_QWORD *)*a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void ***sub_19C311E60(void ***a1)
{
  void **v2;
  void **v3;
  void **v4;
  void **v5;
  void *v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  void *v11;
  void *v12;

  v2 = *a1;
  if (*a1)
  {
    v3 = a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      v5 = a1[1];
      do
      {
        v8 = (char *)*(v5 - 3);
        v5 -= 3;
        v7 = v8;
        if (v8)
        {
          v9 = (char *)*(v3 - 2);
          v6 = v7;
          if (v9 != v7)
          {
            v10 = (char *)*(v3 - 2);
            do
            {
              v12 = (void *)*((_QWORD *)v10 - 3);
              v10 -= 24;
              v11 = v12;
              if (v12)
              {
                *((_QWORD *)v9 - 2) = v11;
                operator delete(v11);
              }
              v9 = v10;
            }
            while (v10 != v7);
            v6 = *v5;
          }
          *(v3 - 2) = v7;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_19C311F18()
{
  JUMPOUT(0x1A1AD355CLL);
}

_QWORD *sub_19C311F2C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E3D38A58;
  return result;
}

void sub_19C311F50(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E3D38A58;
}

double sub_19C311F68()
{
  return 1.0;
}

uint64_t sub_19C311F70(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN17language_modeling2v126ToucanLanguageModelSession31_combinedConditionalProbabilityERKNSt3__16vec"
                     "torINS3_INS0_14SanitizedTokenENS2_9allocatorIS4_EEEENS5_IS7_EEEERKNS3_INS3_INS0_13TokenMetadataENS5"
                     "_ISC_EEEENS5_ISE_EEEERKNS0_17LinguisticContextEE3$_0"
    || ((v3 & (unint64_t)"ZN17language_modeling2v126ToucanLanguageModelSession31_combinedConditionalProbabilityERK"
                                "NSt3__16vectorINS3_INS0_14SanitizedTokenENS2_9allocatorIS4_EEEENS5_IS7_EEEERKNS3_INS3_IN"
                                "S0_13TokenMetadataENS5_ISC_EEEENS5_ISE_EEEERKNS0_17LinguisticContextEE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN17language_modeling2v126ToucanLanguageModelSession31_combinedConditionalProbabilityERKNSt3__16vectorINS3_INS0_14SanitizedTokenENS2_9allocatorIS4_EEEENS5_IS7_EEEERKNS3_INS3_INS0_13TokenMetadataENS5_ISC_EEEENS5_ISE_EEEERKNS0_17LinguisticContextEE3$_0")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN17language_modeling2v126ToucanLanguageModelSession31_combinedConditionalProbabilityERKNSt3__16vectorINS3_INS0_14SanitizedTokenENS2_9allocatorIS4_EEEENS5_IS7_EEEERKNS3_INS3_INS0_13TokenMetadataENS5_ISC_EEEENS5_ISE_EEEERKNS0_17LinguisticContextEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *sub_19C311FC4()
{
  return &unk_1E3D33490;
}

uint64_t sub_19C311FD0(uint64_t a1)
{
  void **v2;
  void **v3;
  void **v4;
  void *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  if (v3 != v2)
  {
    v4 = *(void ***)(a1 + 16);
    do
    {
      v7 = *(v4 - 3);
      v4 -= 3;
      v6 = v7;
      *(_QWORD *)(a1 + 16) = v4;
      if (v7)
      {
        v8 = *(v3 - 2);
        v5 = v6;
        if (v8 != v6)
        {
          do
          {
            v10 = *--v8;
            v9 = v10;
            *v8 = 0;
            if (v10)
              MEMORY[0x1A1AD355C](v9, 0x1000C4065B674BELL);
          }
          while (v8 != v6);
          v5 = *v4;
        }
        *(v3 - 2) = v6;
        operator delete(v5);
        v4 = *(void ***)(a1 + 16);
      }
      v3 = v4;
    }
    while (v4 != v2);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_19C312088(uint64_t a1)
{
  void **v2;
  void **v3;
  void **v4;
  void *v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  void *v10;
  void *v11;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  if (v3 != v2)
  {
    v4 = *(void ***)(a1 + 16);
    do
    {
      v7 = (char *)*(v4 - 3);
      v4 -= 3;
      v6 = v7;
      *(_QWORD *)(a1 + 16) = v4;
      if (v7)
      {
        v8 = (char *)*(v3 - 2);
        v5 = v6;
        if (v8 != v6)
        {
          v9 = (char *)*(v3 - 2);
          do
          {
            v11 = (void *)*((_QWORD *)v9 - 3);
            v9 -= 24;
            v10 = v11;
            if (v11)
            {
              *((_QWORD *)v8 - 2) = v10;
              operator delete(v10);
            }
            v8 = v9;
          }
          while (v9 != v6);
          v5 = *v4;
        }
        *(v3 - 2) = v6;
        operator delete(v5);
        v4 = *(void ***)(a1 + 16);
      }
      v3 = v4;
    }
    while (v4 != v2);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_19C312138(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(_QWORD **)(a1 + 16);
    v4 = **(_QWORD **)(a1 + 8);
    if (v3 != v4)
    {
      v5 = **(_QWORD **)(a1 + 16);
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v4);
    }
  }
  return a1;
}

_QWORD *sub_19C3121A4(_QWORD *a1, _OWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  _OWORD *v10;
  __int128 v11;
  char *v12;
  char *v13;
  __int128 v14;
  __int128 v15;
  _QWORD *v16;
  char *v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;

  v2 = a1[1] - *a1;
  v3 = v2 >> 3;
  v4 = (v2 >> 3) + 1;
  if (v4 >> 61)
    sub_19C2A18E8();
  v7 = a1[2] - *a1;
  if (v7 >> 2 > v4)
    v4 = v7 >> 2;
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8)
    v8 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v8 = v4;
  if (v8)
  {
    if (v8 >> 61)
      sub_19C2A143C();
    v9 = (char *)operator new(8 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = (_OWORD *)operator new();
  v11 = a2[5];
  v12 = &v9[8 * v3];
  v10[4] = a2[4];
  v10[5] = v11;
  v13 = &v9[8 * v8];
  v10[6] = a2[6];
  v14 = a2[1];
  *v10 = *a2;
  v10[1] = v14;
  v15 = a2[3];
  v10[2] = a2[2];
  v10[3] = v15;
  *(_QWORD *)v12 = v10;
  v16 = v12 + 8;
  v17 = (char *)*a1;
  v18 = (char *)a1[1];
  if (v18 == (char *)*a1)
  {
    *a1 = v12;
    a1[1] = v16;
    a1[2] = v13;
  }
  else
  {
    v19 = (unint64_t)&v18[-*a1 - 8];
    if (v19 < 0x78 || &v18[-(v19 & 0xFFFFFFFFFFFFFFF8) - 8] < v12 && &v9[v2 - (v19 & 0xFFFFFFFFFFFFFFF8) - 8] < v18)
      goto LABEL_31;
    v20 = (v19 >> 3) + 1;
    v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
    v22 = &v18[-v21];
    v12 -= v21;
    v23 = &v9[8 * v3 - 16];
    v24 = v18 - 16;
    v25 = v20 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v27 = *((_OWORD *)v24 - 1);
      v26 = *(_OWORD *)v24;
      *((_OWORD *)v24 - 1) = 0uLL;
      *(_OWORD *)v24 = 0uLL;
      *((_OWORD *)v23 - 1) = v27;
      *(_OWORD *)v23 = v26;
      v23 -= 32;
      v24 -= 32;
      v25 -= 4;
    }
    while (v25);
    v18 = v22;
    if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_31:
      do
      {
        v28 = *((_QWORD *)v18 - 1);
        v18 -= 8;
        *(_QWORD *)v18 = 0;
        *((_QWORD *)v12 - 1) = v28;
        v12 -= 8;
      }
      while (v18 != v17);
    }
    v18 = (char *)*a1;
    v29 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v16;
    a1[2] = v13;
    while (v29 != v18)
    {
      v31 = *((_QWORD *)v29 - 1);
      v29 -= 8;
      v30 = v31;
      *(_QWORD *)v29 = 0;
      if (v31)
        MEMORY[0x1A1AD355C](v30, 0x1000C4065B674BELL);
    }
  }
  if (v18)
    operator delete(v18);
  return v16;
}

_QWORD *sub_19C31237C(_QWORD *a1, __int128 *a2)
{
  _QWORD *v3;
  __int128 v4;

  *a1 = off_1E3D38838;
  v3 = a1 + 1;
  if (*((char *)a2 + 23) < 0)
  {
    sub_19C2B5238(v3, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    v3[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)v3 = v4;
  }
  return a1;
}

void sub_19C3123D0(_Unwind_Exception *a1)
{
  std::exception *v1;

  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

void sub_19C3123E4(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)off_1E3D38838;
  if (SHIBYTE(this[3].__vftable) < 0)
    operator delete(this[1].__vftable);
  std::exception::~exception(this);
}

os_log_t sub_19C312420()
{
  os_log_t result;

  result = os_log_create("com.apple.LanguageModeling", "ToucanAutoCorrection");
  qword_1EDB96E98 = (uint64_t)result;
  return result;
}

void sub_19C31244C(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)off_1E3D38838;
  if (SHIBYTE(this[3].__vftable) < 0)
    operator delete(this[1].__vftable);
  std::exception::~exception(this);
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C31249C(uint64_t a1)
{
  uint64_t result;

  result = a1 + 8;
  if (*(char *)(a1 + 31) < 0)
    return *(_QWORD *)result;
  return result;
}

uint64_t sub_19C3124B8(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, _QWORD *a6, _QWORD *a7, __int128 *a8, uint64_t a9, uint64_t *a10, _QWORD *a11, uint64_t a12)
{
  int v14;
  unsigned __int16 v15;
  __int128 v16;
  const void *v17;
  size_t v18;
  size_t v19;
  void **p_dst;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  int v25;
  const void *v26;
  size_t v27;
  std::string::size_type v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  __int128 v33;
  const void *v34;
  size_t v35;
  size_t v36;
  void **v37;
  uint64_t v38;
  uint64_t v39;
  const void *v40;
  size_t v41;
  std::string::size_type v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  std::string *v47;
  unint64_t *p_size;
  size_t v49;
  std::string::size_type v50;
  char v51;
  std::string *v52;
  std::string::size_type size;
  size_t v54;
  BOOL v55;
  BOOL v56;
  const void *v57;
  size_t v58;
  size_t v59;
  void **v60;
  uint64_t v61;
  uint64_t v62;
  const void *v63;
  size_t v64;
  std::string::size_type v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  std::string *v70;
  unint64_t *v71;
  size_t v72;
  std::string::size_type v73;
  char v74;
  std::string *v75;
  std::string::size_type v76;
  size_t v77;
  BOOL v78;
  BOOL v79;
  const void *v80;
  size_t v81;
  size_t v82;
  void **v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  std::string *v87;
  unint64_t *v88;
  int v89;
  uint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t *v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t *v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t *v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t *v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t *v107;
  unint64_t v108;
  NSObject *v109;
  std::string::size_type v110;
  _QWORD *exception;
  int v113;
  size_t v114;
  unint64_t v115;
  std::string::value_type *v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  void **v120;
  _BYTE *v121;
  __int128 v122;
  std::string v127;
  void **__dst;
  size_t v129;
  int64_t v130;
  std::string __p[2];

  __p[1].__r_.__value_.__l.__size_ = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = &off_1E3D34C30;
  *(_QWORD *)(a1 + 8) = a2;
  v14 = atomic_load(word_1EDB96DF8);
  if (v14 == 0xFFFF)
    atomic_store(0, word_1EDB96DF8);
  do
    v15 = __ldaxr(word_1EDB96DF8);
  while (__stlxr(v15 + 1, word_1EDB96DF8));
  *(_WORD *)(a1 + 16) = v15;
  if (*((char *)a8 + 23) < 0)
  {
    sub_19C2B5238((_BYTE *)(a1 + 24), *(void **)a8, *((_QWORD *)a8 + 1));
  }
  else
  {
    v16 = *a8;
    *(_QWORD *)(a1 + 40) = *((_QWORD *)a8 + 2);
    *(_OWORD *)(a1 + 24) = v16;
  }
  v17 = (const void *)language_modeling::v1::kEnvironmentSessionTypeKey;
  v18 = strlen((const char *)language_modeling::v1::kEnvironmentSessionTypeKey);
  if (v18 > 0x7FFFFFFFFFFFFFF7)
    sub_19C2A1A54();
  v19 = v18;
  if (v18 >= 0x17)
  {
    v21 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17)
      v21 = v18 | 7;
    v22 = v21 + 1;
    p_dst = (void **)operator new(v21 + 1);
    v129 = v19;
    v130 = v22 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_14;
  }
  HIBYTE(v130) = v18;
  p_dst = (void **)&__dst;
  if (v18)
LABEL_14:
    memmove(p_dst, v17, v19);
  *((_BYTE *)p_dst + v19) = 0;
  v23 = sub_19C29A674(a9, (const void **)&__dst);
  v24 = (uint64_t *)(a9 + 8);
  if ((uint64_t *)(a9 + 8) == v23)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    v113 = SHIBYTE(v130);
    if (v130 >= 0)
      v114 = HIBYTE(v130);
    else
      v114 = v129;
    v115 = v114 + 37;
    if (v114 + 37 > 0x7FFFFFFFFFFFFFF7)
      sub_19C2A1A54();
    if (v115 > 0x16)
    {
      v117 = (v115 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v115 | 7) != 0x17)
        v117 = v115 | 7;
      v118 = v117 + 1;
      v119 = (char *)operator new(v117 + 1);
      __p[0].__r_.__value_.__l.__size_ = v114 + 37;
      __p[0].__r_.__value_.__r.__words[2] = v118 | 0x8000000000000000;
      __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v119;
      qmemcpy(v119, "Environment is missing required key: ", 37);
      v116 = v119 + 37;
      if (!v114)
      {
LABEL_192:
        v116[v114] = 0;
        *exception = off_1E3D38838;
        v121 = exception + 1;
        if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
        {
          sub_19C2B5238(v121, __p[0].__r_.__value_.__l.__data_, __p[0].__r_.__value_.__l.__size_);
        }
        else
        {
          v122 = *(_OWORD *)&__p[0].__r_.__value_.__l.__data_;
          exception[3] = *((_QWORD *)&__p[0].__r_.__value_.__l + 2);
          *(_OWORD *)v121 = v122;
        }
        __cxa_throw(exception, (struct type_info *)&unk_1E3D32968, (void (*)(void *))sub_19C3123E4);
      }
    }
    else
    {
      qmemcpy(__p, "Environment is missing required key: ", 37);
      v116 = &__p[1].__r_.__value_.__s.__data_[13];
    }
    if (v113 >= 0)
      v120 = (void **)&__dst;
    else
      v120 = __dst;
    memmove(v116, v120, v114);
    goto LABEL_192;
  }
  if (*((_DWORD *)v23 + 20))
    sub_19C2F5A74();
  v25 = *((_DWORD *)v23 + 14);
  if (SHIBYTE(v130) < 0)
    operator delete(__dst);
  *(_DWORD *)(a1 + 48) = v25;
  v26 = (const void *)language_modeling::v1::kEnvironmentRecipientIdentifierKey;
  v27 = strlen((const char *)language_modeling::v1::kEnvironmentRecipientIdentifierKey);
  if (v27 > 0x7FFFFFFFFFFFFFF7)
    sub_19C2A1A54();
  v28 = v27;
  if (v27 >= 0x17)
  {
    v30 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v27 | 7) != 0x17)
      v30 = v27 | 7;
    v31 = v30 + 1;
    v29 = operator new(v30 + 1);
    __p[0].__r_.__value_.__l.__size_ = v28;
    __p[0].__r_.__value_.__r.__words[2] = v31 | 0x8000000000000000;
    __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v29;
    goto LABEL_26;
  }
  *((_BYTE *)&__p[0].__r_.__value_.__s + 23) = v27;
  v29 = __p;
  if (v27)
LABEL_26:
    memmove(v29, v26, v28);
  *((_BYTE *)v29 + v28) = 0;
  v32 = sub_19C29A674(a9, (const void **)&__p[0].__r_.__value_.__l.__data_);
  if (v24 == v32)
  {
    strcpy((char *)(a1 + 56), "DefaultRecipientID");
    *(_BYTE *)(a1 + 79) = 18;
  }
  else
  {
    if (*((_DWORD *)v32 + 20) != 1)
      sub_19C2F5A74();
    if (*((char *)v32 + 79) < 0)
    {
      sub_19C2B5238((_BYTE *)(a1 + 56), (void *)v32[7], v32[8]);
    }
    else
    {
      v33 = *(_OWORD *)(v32 + 7);
      *(_QWORD *)(a1 + 72) = v32[9];
      *(_OWORD *)(a1 + 56) = v33;
    }
  }
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  v34 = (const void *)language_modeling::v1::kQueryCaseNormalizationForCPKey;
  v35 = strlen((const char *)language_modeling::v1::kQueryCaseNormalizationForCPKey);
  if (v35 > 0x7FFFFFFFFFFFFFF7)
    sub_19C2A1A54();
  v36 = v35;
  if (v35 >= 0x17)
  {
    v38 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v35 | 7) != 0x17)
      v38 = v35 | 7;
    v39 = v38 + 1;
    v37 = (void **)operator new(v38 + 1);
    v129 = v36;
    v130 = v39 | 0x8000000000000000;
    __dst = v37;
    goto LABEL_42;
  }
  HIBYTE(v130) = v35;
  v37 = (void **)&__dst;
  if (v35)
LABEL_42:
    memmove(v37, v34, v36);
  *((_BYTE *)v37 + v36) = 0;
  v40 = (const void *)language_modeling::v1::kCaseNormalizationCapitalizeWordWithEmptyContext;
  v41 = strlen((const char *)language_modeling::v1::kCaseNormalizationCapitalizeWordWithEmptyContext);
  if (v41 > 0x7FFFFFFFFFFFFFF7)
    sub_19C2A1A54();
  v42 = v41;
  if (v41 >= 0x17)
  {
    v44 = (v41 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v41 | 7) != 0x17)
      v44 = v41 | 7;
    v45 = v44 + 1;
    v43 = operator new(v44 + 1);
    v127.__r_.__value_.__l.__size_ = v42;
    v127.__r_.__value_.__r.__words[2] = v45 | 0x8000000000000000;
    v127.__r_.__value_.__r.__words[0] = (std::string::size_type)v43;
    goto LABEL_50;
  }
  *((_BYTE *)&v127.__r_.__value_.__s + 23) = v41;
  v43 = &v127;
  if (v41)
LABEL_50:
    memmove(v43, v40, v42);
  *((_BYTE *)v43 + v42) = 0;
  v46 = sub_19C29A674(a9, (const void **)&__dst);
  if (v24 == v46)
  {
    v47 = &v127;
    if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0)
    {
      p_size = &v127.__r_.__value_.__l.__size_;
      goto LABEL_58;
    }
LABEL_56:
    __p[0] = *v47;
    goto LABEL_59;
  }
  if (*((_DWORD *)v46 + 20) != 1)
    sub_19C2F5A74();
  v47 = (std::string *)(v46 + 7);
  if ((*((char *)v46 + 79) & 0x80000000) == 0)
    goto LABEL_56;
  p_size = (unint64_t *)(v46 + 8);
LABEL_58:
  sub_19C2B5238(__p, v47->__r_.__value_.__l.__data_, *p_size);
LABEL_59:
  v49 = strlen((const char *)language_modeling::v1::kCaseNormalizationCapitalizeWordWithEmptyContext);
  v50 = v49;
  v51 = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
  if ((SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v49 != -1)
    {
      v52 = __p;
      size = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
      goto LABEL_64;
    }
LABEL_174:
    sub_19C2E3454();
  }
  if (v49 == -1)
    goto LABEL_174;
  size = __p[0].__r_.__value_.__l.__size_;
  v52 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
LABEL_64:
  if (size >= v50)
    v54 = v50;
  else
    v54 = size;
  v55 = memcmp(v52, (const void *)language_modeling::v1::kCaseNormalizationCapitalizeWordWithEmptyContext, v54) == 0;
  v56 = size == v50 && v55;
  if ((v51 & 0x80) == 0)
  {
    if ((SHIBYTE(v127.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_72;
LABEL_94:
    operator delete(v127.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v130) & 0x80000000) == 0)
      goto LABEL_73;
    goto LABEL_95;
  }
  operator delete(__p[0].__r_.__value_.__l.__data_);
  if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_94;
LABEL_72:
  if ((SHIBYTE(v130) & 0x80000000) == 0)
    goto LABEL_73;
LABEL_95:
  operator delete(__dst);
LABEL_73:
  *(_BYTE *)(a1 + 80) = v56;
  v57 = (const void *)language_modeling::v1::kNonZeroProbabilitiesForUNKKey;
  v58 = strlen((const char *)language_modeling::v1::kNonZeroProbabilitiesForUNKKey);
  if (v58 > 0x7FFFFFFFFFFFFFF7)
    sub_19C2A1A54();
  v59 = v58;
  if (v58 >= 0x17)
  {
    v61 = (v58 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v58 | 7) != 0x17)
      v61 = v58 | 7;
    v62 = v61 + 1;
    v60 = (void **)operator new(v61 + 1);
    v129 = v59;
    v130 = v62 | 0x8000000000000000;
    __dst = v60;
    goto LABEL_80;
  }
  HIBYTE(v130) = v58;
  v60 = (void **)&__dst;
  if (v58)
LABEL_80:
    memmove(v60, v57, v59);
  *((_BYTE *)v60 + v59) = 0;
  v63 = (const void *)language_modeling::v1::kZeroProbabilitiesForUNK;
  v64 = strlen((const char *)language_modeling::v1::kZeroProbabilitiesForUNK);
  if (v64 > 0x7FFFFFFFFFFFFFF7)
    sub_19C2A1A54();
  v65 = v64;
  if (v64 >= 0x17)
  {
    v67 = (v64 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v64 | 7) != 0x17)
      v67 = v64 | 7;
    v68 = v67 + 1;
    v66 = operator new(v67 + 1);
    v127.__r_.__value_.__l.__size_ = v65;
    v127.__r_.__value_.__r.__words[2] = v68 | 0x8000000000000000;
    v127.__r_.__value_.__r.__words[0] = (std::string::size_type)v66;
    goto LABEL_88;
  }
  *((_BYTE *)&v127.__r_.__value_.__s + 23) = v64;
  v66 = &v127;
  if (v64)
LABEL_88:
    memmove(v66, v63, v65);
  *((_BYTE *)v66 + v65) = 0;
  v69 = sub_19C29A674(a9, (const void **)&__dst);
  if (v24 == v69)
  {
    v70 = &v127;
    if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0)
    {
      v71 = &v127.__r_.__value_.__l.__size_;
      goto LABEL_99;
    }
LABEL_97:
    __p[0] = *v70;
    goto LABEL_100;
  }
  if (*((_DWORD *)v69 + 20) != 1)
    sub_19C2F5A74();
  v70 = (std::string *)(v69 + 7);
  if ((*((char *)v69 + 79) & 0x80000000) == 0)
    goto LABEL_97;
  v71 = (unint64_t *)(v69 + 8);
LABEL_99:
  sub_19C2B5238(__p, v70->__r_.__value_.__l.__data_, *v71);
LABEL_100:
  v72 = strlen((const char *)language_modeling::v1::kNonZeroProbabilitiesForUNK);
  v73 = v72;
  v74 = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
  if ((SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v72 != -1)
    {
      v75 = __p;
      v76 = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
      goto LABEL_105;
    }
LABEL_177:
    sub_19C2E3454();
  }
  if (v72 == -1)
    goto LABEL_177;
  v76 = __p[0].__r_.__value_.__l.__size_;
  v75 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
LABEL_105:
  if (v76 >= v73)
    v77 = v73;
  else
    v77 = v76;
  v78 = memcmp(v75, (const void *)language_modeling::v1::kNonZeroProbabilitiesForUNK, v77) == 0;
  v79 = v76 == v73 && v78;
  if ((v74 & 0x80) == 0)
  {
    if ((SHIBYTE(v127.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_113;
LABEL_127:
    operator delete(v127.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v130) & 0x80000000) == 0)
      goto LABEL_114;
    goto LABEL_128;
  }
  operator delete(__p[0].__r_.__value_.__l.__data_);
  if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_127;
LABEL_113:
  if ((SHIBYTE(v130) & 0x80000000) == 0)
    goto LABEL_114;
LABEL_128:
  operator delete(__dst);
LABEL_114:
  *(_BYTE *)(a1 + 81) = v79;
  v80 = (const void *)language_modeling::v1::kMaxStaticCandidatesCountKey;
  v81 = strlen((const char *)language_modeling::v1::kMaxStaticCandidatesCountKey);
  if (v81 > 0x7FFFFFFFFFFFFFF7)
    sub_19C2A1A54();
  v82 = v81;
  if (v81 >= 0x17)
  {
    v84 = (v81 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v81 | 7) != 0x17)
      v84 = v81 | 7;
    v85 = v84 + 1;
    v83 = (void **)operator new(v84 + 1);
    v129 = v82;
    v130 = v85 | 0x8000000000000000;
    __dst = v83;
    goto LABEL_121;
  }
  HIBYTE(v130) = v81;
  v83 = (void **)&__dst;
  if (v81)
LABEL_121:
    memmove(v83, v80, v82);
  *((_BYTE *)v83 + v82) = 0;
  std::to_string(&v127, 6uLL);
  v86 = sub_19C29A674(a9, (const void **)&__dst);
  if (v24 == v86)
  {
    v87 = &v127;
    if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0)
    {
      v88 = &v127.__r_.__value_.__l.__size_;
      goto LABEL_132;
    }
LABEL_130:
    __p[0] = *v87;
    goto LABEL_133;
  }
  if (*((_DWORD *)v86 + 20) != 1)
    sub_19C2F5A74();
  v87 = (std::string *)(v86 + 7);
  if ((*((char *)v86 + 79) & 0x80000000) == 0)
    goto LABEL_130;
  v88 = (unint64_t *)(v86 + 8);
LABEL_132:
  sub_19C2B5238(__p, v87->__r_.__value_.__l.__data_, *v88);
LABEL_133:
  v89 = std::stoi(__p, 0, 10);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p[0].__r_.__value_.__l.__data_);
    if ((SHIBYTE(v127.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_135;
  }
  else if ((SHIBYTE(v127.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_135;
  }
  operator delete(v127.__r_.__value_.__l.__data_);
LABEL_135:
  if (SHIBYTE(v130) < 0)
    operator delete(__dst);
  *(_QWORD *)(a1 + 88) = v89;
  *(_QWORD *)(a1 + 96) = *a3;
  v90 = a3[1];
  *(_QWORD *)(a1 + 104) = v90;
  if (v90)
  {
    v91 = (unint64_t *)(v90 + 8);
    do
      v92 = __ldxr(v91);
    while (__stxr(v92 + 1, v91));
  }
  *(_QWORD *)(a1 + 112) = *a4;
  v93 = a4[1];
  *(_QWORD *)(a1 + 120) = v93;
  if (v93)
  {
    v94 = (unint64_t *)(v93 + 8);
    do
      v95 = __ldxr(v94);
    while (__stxr(v95 + 1, v94));
  }
  *(_QWORD *)(a1 + 128) = *a5;
  v96 = a5[1];
  *(_QWORD *)(a1 + 136) = v96;
  if (v96)
  {
    v97 = (unint64_t *)(v96 + 8);
    do
      v98 = __ldxr(v97);
    while (__stxr(v98 + 1, v97));
  }
  *(_QWORD *)(a1 + 144) = *a6;
  v99 = a6[1];
  *(_QWORD *)(a1 + 152) = v99;
  if (v99)
  {
    v100 = (unint64_t *)(v99 + 8);
    do
      v101 = __ldxr(v100);
    while (__stxr(v101 + 1, v100));
  }
  *(_QWORD *)(a1 + 160) = *a7;
  v102 = a7[1];
  *(_QWORD *)(a1 + 168) = v102;
  if (v102)
  {
    v103 = (unint64_t *)(v102 + 8);
    do
      v104 = __ldxr(v103);
    while (__stxr(v104 + 1, v103));
  }
  v105 = *a10;
  *a10 = 0;
  *(_QWORD *)(a1 + 176) = v105;
  *(_QWORD *)(a1 + 184) = a12;
  *(_QWORD *)(a1 + 192) = *a11;
  v106 = a11[1];
  *(_QWORD *)(a1 + 200) = v106;
  if (v106)
  {
    v107 = (unint64_t *)(v106 + 8);
    do
      v108 = __ldxr(v107);
    while (__stxr(v108 + 1, v107));
  }
  if (qword_1EDB96EA0 != -1)
    dispatch_once(&qword_1EDB96EA0, &unk_1E3D39ED0);
  v109 = qword_1EDB96E98;
  if (os_log_type_enabled((os_log_t)qword_1EDB96E98, OS_LOG_TYPE_INFO))
  {
    v110 = *(_QWORD *)(a1 + 8);
    if (*(char *)(v110 + 23) < 0)
      v110 = *(_QWORD *)v110;
    LODWORD(__p[0].__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words + 4) = v110;
    _os_log_impl(&dword_19C291000, v109, OS_LOG_TYPE_INFO, "Model type selected for conditional probablity: %s", (uint8_t *)__p, 0xCu);
  }
  return a1;
}

void sub_19C313008(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  uint64_t v36;
  void *v37;
  std::exception *v38;

  std::exception::~exception(v38);
  operator delete(v37);
  __cxa_free_exception(v38);
  if (a30 < 0)
    operator delete(__p);
  if (*(char *)(v36 + 47) < 0)
    operator delete(*a11);
  _Unwind_Resume(a1);
}

void sub_19C313148()
{
  JUMPOUT(0x19C31312CLL);
}

void sub_19C313150()
{
  JUMPOUT(0x19C31312CLL);
}

__CFArray *sub_19C313158(uint64_t a1, int a2, int a3)
{
  const void *v3;
  const __CFArray *v4;
  __CFArray *MutableCopy;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  CFMutableArrayRef Mutable;
  CFRange v11;

  if (a2)
  {
    v7 = 0;
    v8 = &v7;
    v9 = 0x2000000000;
    Mutable = 0;
    Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
    LDEnumerateAssetDataItems();
    v3 = (const void *)v8[3];
    _Block_object_dispose(&v7, 8);
    if (!v3)
      goto LABEL_9;
  }
  else if (a3)
  {
    v7 = 0;
    v8 = &v7;
    v9 = 0x2000000000;
    Mutable = 0;
    Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
    LDEnumerateAssetDataItems();
    v3 = (const void *)v8[3];
    _Block_object_dispose(&v7, 8);
    if (!v3)
      goto LABEL_9;
  }
  else
  {
    v7 = 0;
    v8 = &v7;
    v9 = 0x2000000000;
    Mutable = 0;
    Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
    LDEnumerateAssetDataItems();
    v3 = (const void *)v8[3];
    _Block_object_dispose(&v7, 8);
    if (!v3)
      goto LABEL_9;
  }
  CFRetain(v3);
  CFRelease(v3);
LABEL_9:
  v7 = 0;
  v8 = &v7;
  v9 = 0x2000000000;
  Mutable = 0;
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  LDEnumerateAssetDataItems();
  v4 = (const __CFArray *)v8[3];
  _Block_object_dispose(&v7, 8);
  MutableCopy = CFArrayCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, (CFArrayRef)v3);
  v11.length = CFArrayGetCount(v4);
  v11.location = 0;
  CFArrayAppendArray(MutableCopy, v4, v11);
  if (v4)
    CFRelease(v4);
  if (v3)
    CFRelease(v3);
  return MutableCopy;
}

void sub_19C313448(_Unwind_Exception *a1, uint64_t a2, ...)
{
  const void *v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, const void *);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  _Block_object_dispose(va1, 8);
  sub_19C3134F8((const void **)va);
  _Unwind_Resume(a1);
}

const void **sub_19C3134C4(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  *a1 = 0;
  return a1;
}

const void **sub_19C3134F8(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  *a1 = 0;
  return a1;
}

const void **sub_19C31352C(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  *a1 = 0;
  return a1;
}

const void **sub_19C313560(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  *a1 = 0;
  return a1;
}

uint64_t sub_19C313594(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (a3 >= 4)
    __assert_rtn("convertAssetBundleType", "LMLinguisticData.cpp", 109, "false && \"unsupported LinguisticData asset type\"");
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_19C3135D4(uint64_t a1, CFTypeRef *a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t a6)
{
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD v11[2];
  _QWORD v12[2];
  _QWORD v13[2];

  v13[0] = a3;
  v13[1] = a4;
  if (a4)
  {
    v6 = (unint64_t *)(a4 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = a5[1];
  v12[0] = *a5;
  v12[1] = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v11[0] = 0;
  v11[1] = 0;
  sub_19C3EE644(a1, a2, (uint64_t)v13, (uint64_t)v12, a6, (uint64_t)v11, 0);
}

void sub_19C3136D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  sub_19C2B43C8((uint64_t)&a9);
  sub_19C2B43C8((uint64_t)&a11);
  sub_19C2B43C8((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_19C3136F8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D398D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_19C313708(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D398D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C313738(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_19C31374C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C313770(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_19C313788(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN2LM21MontrealTokenIDMapperEEE"
    || ((v3 & (unint64_t)"NSt3__114default_deleteIN2LM21MontrealTokenIDMapperEEE" & 0x8000000000000000) != 0) != __OFSUB__(v3, "NSt3__114default_deleteIN2LM21MontrealTokenIDMapperEEE")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN2LM21MontrealTokenIDMapperEEE" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_19C3137E0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D397F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_19C3137F0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D397F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AD355CLL);
}

void *sub_19C313820(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *result;

  v2 = (void *)a1[13];
  if (v2)
  {
    a1[14] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[10];
  if (v3)
  {
    a1[11] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[7];
  if (v4)
  {
    a1[8] = v4;
    operator delete(v4);
  }
  result = (void *)a1[3];
  if (result)
    result = (void *)munmap(result, a1[4]);
  a1[4] = 0;
  return result;
}

void sub_19C313888(char *a1)
{
  if (a1)
  {
    sub_19C313888(*(_QWORD *)a1);
    sub_19C313888(*((_QWORD *)a1 + 1));
    sub_19C2EAC08(*((char **)a1 + 8));
    if (a1[55] < 0)
      operator delete(*((void **)a1 + 4));
    operator delete(a1);
  }
}

uint64_t sub_19C3138D8(uint64_t a1)
{
  int v2;
  char v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (*(_QWORD *)a1)
  {
    sub_19C3E26C4(a1 + 48);
    v2 = sqlite3_close(*(sqlite3 **)a1);
    v3 = v2;
    if (v2)
    {
      if (qword_1EDB97100 != -1)
        dispatch_once(&qword_1EDB97100, &unk_1E3D3BED0);
      v4 = (int *)qword_1EDB970F8;
      sqlite3_errmsg(*(sqlite3 **)a1);
      sub_19C3E8FF4(v4, v5, "Failed to close database, error code: %d  error message: %s\n", v6, v7, v8, v9, v10, v3);
    }
  }
  sub_19C3E26C4(a1 + 48);
  sub_19C33275C(*(_QWORD **)(a1 + 80));
  sub_19C33275C(*(_QWORD **)(a1 + 56));
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void sub_19C3139A4(uint64_t a1)
{
  _QWORD *v2;
  char *v3;
  uint64_t v4;
  const std::__fs::filesystem::path *v5;
  const char *v6;
  std::error_code *v7;
  int v8;
  size_t v9;
  unint64_t v10;
  const void *v11;
  std::__fs::filesystem::path *v12;
  uint64_t v13;
  size_t v14;
  char *v15;
  char *v16;
  unint64_t v17;
  std::error_code *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int st_gid_high;
  void *v25;
  stat *p_dst;
  std::error_code *v27;
  int v28;
  std::__fs::filesystem::path *v29;
  const std::__fs::filesystem::path *v30;
  char v31;
  const std::__fs::filesystem::path *v32;
  size_t v33;
  int64_t v34;
  stat __dst;

  v2 = (_QWORD *)(a1 + 104);
  sub_19C313888(*(char **)(a1 + 104));
  *(_QWORD *)(a1 + 96) = v2;
  *(_QWORD *)(a1 + 112) = 0;
  *v2 = 0;
  sub_19C2EAC08(*(char **)(a1 + 128));
  v4 = a1 + 152;
  v3 = *(char **)(a1 + 152);
  *(_QWORD *)(a1 + 120) = a1 + 128;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  sub_19C2EAC08(v3);
  *(_QWORD *)(a1 + 144) = a1 + 152;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  v5 = (const std::__fs::filesystem::path *)(a1 + 168);
  v6 = (const char *)(a1 + 168);
  if (*(char *)(a1 + 191) < 0)
    v6 = (const char *)v5->__pn_.__r_.__value_.__r.__words[0];
  if (stat(v6, &__dst))
    return;
  v8 = *(char *)(a1 + 191);
  if (v8 >= 0)
    v9 = *(unsigned __int8 *)(a1 + 191);
  else
    v9 = *(_QWORD *)(a1 + 176);
  v10 = v9 + 4;
  if (v9 + 4 >= 0x7FFFFFFFFFFFFFF8)
    sub_19C2A1A54();
  if (v10 > 0x16)
  {
    v13 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v13 = v10 | 7;
    v14 = v13 + 1;
    v15 = (char *)operator new(v13 + 1);
    v16 = v15;
    v17 = v14 | 0x8000000000000000;
    __dst.st_ino = v9 + 4;
    *(_QWORD *)&__dst.st_uid = v14 | 0x8000000000000000;
    *(_QWORD *)&__dst.st_dev = v15;
    if (v8 >= 0)
      v11 = (const void *)(v4 + 16);
    else
      v11 = (const void *)v5->__pn_.__r_.__value_.__r.__words[0];
    memmove(v15, v11, v9);
    strcpy(&v16[v9], "-wal");
    v12 = (std::__fs::filesystem::path *)operator new(v14);
    v33 = v9 + 4;
    v34 = v17;
    v32 = v12;
  }
  else
  {
    memset(&__dst, 0, 24);
    HIBYTE(__dst.st_gid) = v9 + 4;
    if (!v9)
    {
      __dst.st_dev = 1818326829;
      v33 = 0;
      v34 = 0;
      v32 = 0;
      v12 = (std::__fs::filesystem::path *)&v32;
      HIBYTE(v34) = v9 + 4;
      goto LABEL_21;
    }
    if (v8 >= 0)
      v11 = (const void *)(v4 + 16);
    else
      v11 = (const void *)v5->__pn_.__r_.__value_.__r.__words[0];
    memmove(&__dst, v11, v9);
    strcpy((char *)&__dst + v9, "-wal");
    v33 = 0;
    v34 = 0;
    v32 = 0;
    v12 = (std::__fs::filesystem::path *)&v32;
    HIBYTE(v34) = v9 + 4;
  }
  memmove(v12, v11, v9);
LABEL_21:
  strcpy((char *)v12 + v9, "-shm");
  if (v8 < 0)
    v5 = (const std::__fs::filesystem::path *)v5->__pn_.__r_.__value_.__r.__words[0];
  if (remove(v5, v7) < 0)
  {
    if (qword_1EDB97100 != -1)
      dispatch_once(&qword_1EDB97100, &unk_1E3D3BED0);
    sub_19C3E8FF4((int *)qword_1EDB970F8, (uint64_t)v18, "failed to remove dynamic languagelikelihood model", v19, v20, v21, v22, v23, v31);
  }
  st_gid_high = SHIBYTE(__dst.st_gid);
  v25 = *(void **)&__dst.st_dev;
  if ((__dst.st_gid & 0x80000000) == 0)
    p_dst = &__dst;
  else
    p_dst = *(stat **)&__dst.st_dev;
  remove((const std::__fs::filesystem::path *)p_dst, v18);
  v28 = SHIBYTE(v34);
  v29 = (std::__fs::filesystem::path *)v32;
  if (v34 >= 0)
    v30 = (const std::__fs::filesystem::path *)&v32;
  else
    v30 = v32;
  remove(v30, v27);
  if ((v28 & 0x80000000) == 0)
  {
    if ((st_gid_high & 0x80000000) == 0)
      return;
LABEL_37:
    operator delete(v25);
    return;
  }
  operator delete(v29);
  if (st_gid_high < 0)
    goto LABEL_37;
}

void sub_19C313C2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C313C78(sqlite3 **a1)
{
  uint64_t v2;
  sqlite3 *v3;
  int v4;
  unint64_t v5;
  void *exception;
  void *__p[2];
  char v9;
  uint64_t v10;

  sub_19C31452C(a1, "DROP TABLE IF EXISTS LangMatrix");
  sub_19C31452C(a1, "DROP TABLE IF EXISTS RecipientByLangMatrix");
  sub_19C31452C(a1, "DROP TABLE IF EXISTS OfflineAdaptationTimeByApp");
  sub_19C31452C(a1, "DROP TABLE IF EXISTS MetaData");
  sub_19C31452C(a1, "DROP TABLE IF EXISTS EmojiByApp");
  sub_19C31452C(a1, "CREATE TABLE RecipientByLangMatrix (RecipientId TEXT, Language TEXT, CharCount, PRIMARY KEY(RecipientId, Language))");
  sub_19C31452C(a1, "CREATE TABLE OfflineAdaptationTimeByApp (ApplicationId TEXT PRIMARY KEY, Time DOUBLE)");
  sub_19C31452C(a1, "CREATE TABLE MetaData (MetaData TEXT PRIMARY KEY, Value TEXT)");
  sub_19C31452C(a1, "CREATE TABLE EmojiByApp (ApplicationId TEXT PRIMARY KEY, Count INT, Time DOUBLE)");
  v2 = operator new();
  v3 = *a1;
  *(_QWORD *)v2 = 0;
  *(_QWORD *)(v2 + 8) = 0;
  *(_QWORD *)(v2 + 16) = v3;
  *(_DWORD *)(v2 + 24) = 1;
  sub_19C3A48A0(v2, "INSERT INTO MetaData VALUES (?,?)");
  v10 = v2;
  v9 = 7;
  strcpy((char *)__p, "Version");
  sub_19C3A4F88(v2, (uint64_t)__p);
  if (v9 < 0)
    operator delete(__p[0]);
  v9 = 3;
  LODWORD(__p[0]) = 3223091;
  sub_19C3A4F88(v2, (uint64_t)__p);
  if (v9 < 0)
    operator delete(__p[0]);
  v4 = sqlite3_step(*(sqlite3_stmt **)(v2 + 8));
  if (v4 == 26 || v4 == 11)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    sub_19C314618((uint64_t)exception, 1);
    __cxa_throw(exception, (struct type_info *)&unk_1E3D31E20, (void (*)(void *))sub_19C3146A4);
  }
  sub_19C3A4A38(v2);
  v5 = sub_19C3A495C(v2);
  return MEMORY[0x1A1AD355C](v5, 0x1020C4055CCDE27);
}

void sub_19C313E40(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  __break(1u);
}

void sub_19C313EE0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t **sub_19C313F04(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  int v7;
  const void *v8;
  const void *v9;
  uint64_t **v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  const void *v16;
  size_t v17;
  int v18;
  int v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;

  v6 = a1 + 1;
  v5 = a1[1];
  if (!v5)
  {
    v10 = a1 + 1;
    goto LABEL_29;
  }
  v7 = *((char *)a2 + 23);
  if (v7 >= 0)
    v8 = a2;
  else
    v8 = *a2;
  if (v7 >= 0)
    v9 = (const void *)*((unsigned __int8 *)a2 + 23);
  else
    v9 = a2[1];
  do
  {
    while (1)
    {
      v10 = (uint64_t **)v5;
      v13 = v5[4];
      v11 = v5 + 4;
      v12 = (_QWORD *)v13;
      v14 = *((char *)v11 + 23);
      v15 = v14 >= 0 ? v11 : v12;
      v16 = v14 >= 0 ? (const void *)*((unsigned __int8 *)v11 + 23) : (const void *)v11[1];
      v17 = (size_t)(v16 >= v9 ? v9 : v16);
      v18 = memcmp(v8, v15, v17);
      if (v18)
        break;
      if (v9 >= v16)
        goto LABEL_22;
LABEL_8:
      v5 = *v10;
      v6 = v10;
      if (!*v10)
        goto LABEL_29;
    }
    if (v18 < 0)
      goto LABEL_8;
LABEL_22:
    v19 = memcmp(v15, v8, v17);
    if (v19)
    {
      if ((v19 & 0x80000000) == 0)
        return v10;
    }
    else if (v16 >= v9)
    {
      return v10;
    }
    v5 = v10[1];
  }
  while (v5);
  v6 = v10 + 1;
LABEL_29:
  v20 = (uint64_t *)v10;
  v10 = (uint64_t **)operator new(0x40uLL);
  *((_OWORD *)v10 + 2) = *(_OWORD *)a3;
  v21 = *(uint64_t **)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v10[6] = v21;
  v10[7] = 0;
  *v10 = 0;
  v10[1] = 0;
  v10[2] = v20;
  *v6 = (uint64_t *)v10;
  v22 = (uint64_t *)**a1;
  v23 = (uint64_t *)v10;
  if (v22)
  {
    *a1 = v22;
    v23 = *v6;
  }
  sub_19C2A2310(a1[1], v23);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v10;
}

uint64_t **sub_19C314058(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  int v7;
  const void *v8;
  size_t v9;
  uint64_t **v10;
  _QWORD *v11;
  const void *v12;
  const void *v13;
  int v14;
  const void *v15;
  size_t v16;
  size_t v17;
  int v18;
  int v19;
  _QWORD *v20;
  _BYTE *v21;
  uint64_t *v22;
  uint64_t *v23;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *((char *)a2 + 23);
    if (v7 >= 0)
      v8 = a2;
    else
      v8 = *a2;
    if (v7 >= 0)
      v9 = *((unsigned __int8 *)a2 + 23);
    else
      v9 = (size_t)a2[1];
    while (1)
    {
      v10 = (uint64_t **)v5;
      v13 = (const void *)v5[4];
      v11 = v5 + 4;
      v12 = v13;
      v14 = *((char *)v11 + 23);
      if (v14 >= 0)
        v15 = v11;
      else
        v15 = v12;
      if (v14 >= 0)
        v16 = *((unsigned __int8 *)v11 + 23);
      else
        v16 = v11[1];
      if (v16 >= v9)
        v17 = v9;
      else
        v17 = v16;
      v18 = memcmp(v8, v15, v17);
      if (v18)
      {
        if (v18 < 0)
          goto LABEL_8;
LABEL_22:
        v19 = memcmp(v15, v8, v17);
        if (v19)
        {
          if ((v19 & 0x80000000) == 0)
            return v10;
        }
        else if (v16 >= v9)
        {
          return v10;
        }
        v5 = v10[1];
        if (!v5)
        {
          v6 = v10 + 1;
          goto LABEL_29;
        }
      }
      else
      {
        if (v9 >= v16)
          goto LABEL_22;
LABEL_8:
        v5 = *v10;
        v6 = v10;
        if (!*v10)
          goto LABEL_29;
      }
    }
  }
  v10 = a1 + 1;
LABEL_29:
  v20 = operator new(0x50uLL);
  v21 = v20 + 4;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_19C2B5238(v21, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)v21 = *(_OWORD *)a3;
    v20[6] = *(_QWORD *)(a3 + 16);
  }
  v20[9] = 0;
  v20[8] = 0;
  v20[7] = v20 + 8;
  *v20 = 0;
  v20[1] = 0;
  v20[2] = v10;
  *v6 = v20;
  v22 = (uint64_t *)**a1;
  v23 = v20;
  if (v22)
  {
    *a1 = v22;
    v23 = *v6;
  }
  sub_19C2A2310(a1[1], v23);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return (uint64_t **)v20;
}

void sub_19C3141D0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t **sub_19C3141E4(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  int v7;
  const void *v8;
  size_t v9;
  uint64_t **v10;
  _QWORD *v11;
  const void *v12;
  const void *v13;
  int v14;
  const void *v15;
  size_t v16;
  size_t v17;
  int v18;
  int v19;
  char *v20;
  _BYTE *v21;
  uint64_t *v22;
  uint64_t *v23;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *((char *)a2 + 23);
    if (v7 >= 0)
      v8 = a2;
    else
      v8 = *a2;
    if (v7 >= 0)
      v9 = *((unsigned __int8 *)a2 + 23);
    else
      v9 = (size_t)a2[1];
    while (1)
    {
      v10 = (uint64_t **)v5;
      v13 = (const void *)v5[4];
      v11 = v5 + 4;
      v12 = v13;
      v14 = *((char *)v11 + 23);
      if (v14 >= 0)
        v15 = v11;
      else
        v15 = v12;
      if (v14 >= 0)
        v16 = *((unsigned __int8 *)v11 + 23);
      else
        v16 = v11[1];
      if (v16 >= v9)
        v17 = v9;
      else
        v17 = v16;
      v18 = memcmp(v8, v15, v17);
      if (v18)
      {
        if (v18 < 0)
          goto LABEL_8;
LABEL_22:
        v19 = memcmp(v15, v8, v17);
        if (v19)
        {
          if ((v19 & 0x80000000) == 0)
            return v10;
        }
        else if (v16 >= v9)
        {
          return v10;
        }
        v5 = v10[1];
        if (!v5)
        {
          v6 = v10 + 1;
          goto LABEL_29;
        }
      }
      else
      {
        if (v9 >= v16)
          goto LABEL_22;
LABEL_8:
        v5 = *v10;
        v6 = v10;
        if (!*v10)
          goto LABEL_29;
      }
    }
  }
  v10 = a1 + 1;
LABEL_29:
  v20 = (char *)operator new(0x40uLL);
  v21 = v20 + 32;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_19C2B5238(v21, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)v21 = *(_OWORD *)a3;
    *((_QWORD *)v20 + 6) = *(_QWORD *)(a3 + 16);
  }
  *((_DWORD *)v20 + 14) = 0;
  *(_QWORD *)v20 = 0;
  *((_QWORD *)v20 + 1) = 0;
  *((_QWORD *)v20 + 2) = v10;
  *v6 = (uint64_t *)v20;
  v22 = (uint64_t *)**a1;
  v23 = (uint64_t *)v20;
  if (v22)
  {
    *a1 = v22;
    v23 = *v6;
  }
  sub_19C2A2310(a1[1], v23);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return (uint64_t **)v20;
}

void sub_19C314350(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t **sub_19C314364(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  int v7;
  const void *v8;
  size_t v9;
  uint64_t **v10;
  _QWORD *v11;
  const void *v12;
  const void *v13;
  int v14;
  const void *v15;
  size_t v16;
  size_t v17;
  int v18;
  int v19;
  char *v20;
  _BYTE *v21;
  uint64_t *v22;
  uint64_t *v23;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *((char *)a2 + 23);
    if (v7 >= 0)
      v8 = a2;
    else
      v8 = *a2;
    if (v7 >= 0)
      v9 = *((unsigned __int8 *)a2 + 23);
    else
      v9 = (size_t)a2[1];
    while (1)
    {
      v10 = (uint64_t **)v5;
      v13 = (const void *)v5[4];
      v11 = v5 + 4;
      v12 = v13;
      v14 = *((char *)v11 + 23);
      if (v14 >= 0)
        v15 = v11;
      else
        v15 = v12;
      if (v14 >= 0)
        v16 = *((unsigned __int8 *)v11 + 23);
      else
        v16 = v11[1];
      if (v16 >= v9)
        v17 = v9;
      else
        v17 = v16;
      v18 = memcmp(v8, v15, v17);
      if (v18)
      {
        if (v18 < 0)
          goto LABEL_8;
LABEL_22:
        v19 = memcmp(v15, v8, v17);
        if (v19)
        {
          if ((v19 & 0x80000000) == 0)
            return v10;
        }
        else if (v16 >= v9)
        {
          return v10;
        }
        v5 = v10[1];
        if (!v5)
        {
          v6 = v10 + 1;
          goto LABEL_29;
        }
      }
      else
      {
        if (v9 >= v16)
          goto LABEL_22;
LABEL_8:
        v5 = *v10;
        v6 = v10;
        if (!*v10)
          goto LABEL_29;
      }
    }
  }
  v10 = a1 + 1;
LABEL_29:
  v20 = (char *)operator new(0x48uLL);
  v21 = v20 + 32;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_19C2B5238(v21, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)v21 = *(_OWORD *)a3;
    *((_QWORD *)v20 + 6) = *(_QWORD *)(a3 + 16);
  }
  *((_DWORD *)v20 + 14) = 0;
  *((_QWORD *)v20 + 8) = 0;
  *(_QWORD *)v20 = 0;
  *((_QWORD *)v20 + 1) = 0;
  *((_QWORD *)v20 + 2) = v10;
  *v6 = (uint64_t *)v20;
  v22 = (uint64_t *)**a1;
  v23 = (uint64_t *)v20;
  if (v22)
  {
    *a1 = v22;
    v23 = *v6;
  }
  sub_19C2A2310(a1[1], v23);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return (uint64_t **)v20;
}

void sub_19C3144D4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

unint64_t *sub_19C3144E8(unint64_t *a1)
{
  unint64_t v2;
  unint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = sub_19C3A495C(v2);
    MEMORY[0x1A1AD355C](v3, 0x1020C4055CCDE27);
  }
  return a1;
}

uint64_t sub_19C31452C(sqlite3 **a1, const char *a2)
{
  char v2;
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *exception;

  v2 = (char)a2;
  v4 = sqlite3_exec(*a1, a2, 0, 0, 0);
  if ((_DWORD)v4)
  {
    if (qword_1EDB97100 != -1)
      dispatch_once(&qword_1EDB97100, &unk_1E3D3BED0);
    v5 = (int *)qword_1EDB970F8;
    sqlite3_errmsg(*a1);
    sub_19C3E8FF4(v5, v6, "Could not execute SQL \"%s\", error message: %s\n", v7, v8, v9, v10, v11, v2);
    if ((_DWORD)v4 == 26 || (_DWORD)v4 == 11)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      sub_19C314618((uint64_t)exception, 1);
      __cxa_throw(exception, (struct type_info *)&unk_1E3D31E20, (void (*)(void *))sub_19C3146A4);
    }
  }
  return v4;
}

void sub_19C314604(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19C314618(uint64_t a1, int a2)
{
  *(_QWORD *)a1 = off_1E3D36BC0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  sub_19C29D01C((void **)(a1 + 8), off_1E3D3A128[a2 - 1], qword_19C46FE90[a2 - 1]);
  return a1;
}

void sub_19C314680(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  std::exception::~exception((std::exception *)v1);
  _Unwind_Resume(a1);
}

void sub_19C3146A4(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)off_1E3D36BC0;
  if (SHIBYTE(this[3].__vftable) < 0)
    operator delete(this[1].__vftable);
  std::exception::~exception(this);
}

void sub_19C3146E0(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)off_1E3D36BC0;
  if (SHIBYTE(this[3].__vftable) < 0)
    operator delete(this[1].__vftable);
  std::exception::~exception(this);
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C314730(uint64_t a1)
{
  uint64_t result;

  result = a1 + 8;
  if (*(char *)(a1 + 31) < 0)
    return *(_QWORD *)result;
  return result;
}

void **sub_19C31474C(void **a1, char *__s)
{
  size_t v4;

  v4 = strlen(__s);
  return sub_19C29D01C(a1, __s, v4);
}

sqlite3 *sub_19C314780(uint64_t a1, int a2)
{
  const char *v4;
  int v5;
  sqlite3 **p_ppDb;
  sqlite3 *v7;
  sqlite3 **v8;
  sqlite3 *v9;
  sqlite3_backup *v10;
  sqlite3_backup *v11;
  sqlite3 *result;
  void *exception;
  sqlite3 *ppDb;

  ppDb = 0;
  v4 = (const char *)(a1 + 16);
  if (*(char *)(a1 + 39) < 0)
    v4 = *(const char **)v4;
  v5 = sqlite3_open(v4, &ppDb);
  if (!v5)
  {
    if (a2)
      p_ppDb = (sqlite3 **)a1;
    else
      p_ppDb = &ppDb;
    v7 = *p_ppDb;
    if (a2)
      v8 = &ppDb;
    else
      v8 = (sqlite3 **)a1;
    v9 = *v8;
    if (a2 && *(_BYTE *)(a1 + 41))
      sqlite3_exec(ppDb, "PRAGMA journal_mode = WAL;", 0, 0, 0);
    v10 = sqlite3_backup_init(v9, "main", v7, "main");
    if (v10)
    {
      v11 = v10;
      sqlite3_backup_step(v10, -1);
      sqlite3_backup_finish(v11);
    }
    v5 = sqlite3_errcode(ppDb);
  }
  result = ppDb;
  if (ppDb)
    result = (sqlite3 *)sqlite3_close(ppDb);
  if (v5)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    sub_19C314618((uint64_t)exception, 3);
    __cxa_throw(exception, (struct type_info *)&unk_1E3D31E20, (void (*)(void *))sub_19C3146A4);
  }
  return result;
}

void sub_19C31488C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19C3148A0(uint64_t a1, const void **a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  void **v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  char v10;
  uint64_t v11;
  char v12;
  void *v13;
  size_t v14;
  void *v15;
  char v16;
  void **v17;
  void **v18;
  void **v19;
  void *v20;
  char **v21;
  char **v22;
  char *v23;
  _QWORD *v24;
  const void *v25;
  int v26;
  const void *v27;
  size_t v28;
  size_t v29;
  int v30;
  int v31;
  void **v32;
  void **v33;
  void **v34;
  _QWORD *v35;
  char *v36;
  _BYTE *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  _BYTE *v43;
  int v44;
  uint64_t v45;
  int v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t **v55;
  uint64_t **v56;
  void **v57;
  void **v58;
  void **v59;
  void **v60;
  int v61;
  const void *v62;
  size_t v63;
  int v64;
  const void *v65;
  size_t v66;
  size_t v67;
  int v68;
  void **v69;
  void **v70;
  size_t v71;
  void *v72;
  const void *v73;
  size_t v74;
  size_t v75;
  int v76;
  int v77;
  uint64_t *v78;
  uint64_t *v79;
  _BYTE *v80;
  __int128 v81;
  uint64_t *v82;
  uint64_t **v83;
  uint64_t *v84;
  uint64_t *v85;
  uint64_t **v86;
  int v87;
  char *v88;
  char *v89;
  char **v90;
  int v91;
  uint64_t *v92;
  size_t v93;
  char *v94;
  char *v95;
  char *v96;
  int v97;
  char *v98;
  size_t v99;
  size_t v100;
  int v101;
  int v102;
  char *v103;
  _BYTE *v104;
  __int128 v105;
  char *v106;
  char *v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  _BYTE *v111;
  int v112;
  uint64_t v113;
  int v114;
  uint64_t *v115;
  uint64_t v116;
  int v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t *v121;
  uint64_t **v122;
  uint64_t *v123;
  const void **v124;
  int v125;
  const void *v126;
  size_t v127;
  uint64_t **v128;
  uint64_t *v129;
  int v130;
  uint64_t *v131;
  size_t v132;
  size_t v133;
  int v134;
  int v135;
  uint64_t *v136;
  size_t v137;
  size_t v138;
  int v139;
  int v140;
  uint64_t **v141;
  uint64_t *v142;
  uint64_t *v143;
  uint64_t **v144;
  unint64_t v145;
  const void *v146;
  const void *v147;
  uint64_t **v148;
  size_t v149;
  int v150;
  const void *v151;
  size_t v152;
  size_t v153;
  int v154;
  unint64_t v155;
  BOOL v156;
  void **v158;
  uint64_t *v159;
  uint64_t *v160;
  uint64_t **v161;
  void **v162;
  void **v163;
  int v164;
  uint64_t *v165;
  size_t v166;
  size_t v167;
  int v168;
  double *v169;
  double v170;
  _OWORD *v171;
  _QWORD *v172;
  _OWORD *v173;
  _OWORD *v174;
  double v175;
  double *v176;
  double *v177;
  BOOL v178;
  double v179;
  double *v180;
  double *v181;
  void **v182;
  double v183;
  double v184;
  void **v185;
  void **v186;
  _QWORD *v187;
  void *__src;
  uint64_t **__srca;
  void *v192;
  uint64_t *v193;
  uint64_t v194;
  int v195;
  uint64_t *v196;
  char *v197;
  void **__s1;
  uint64_t **__s1a;
  void *__p[3];
  int v201;
  __int128 v202;
  unint64_t v203;
  __int128 v204;
  uint64_t v205;
  uint64_t v206;

  v206 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 208))
  {
    v3 = *(_QWORD **)(a1 + 96);
    v194 = a1;
    v4 = (_QWORD *)(a1 + 104);
    if (v3 != (_QWORD *)(a1 + 104))
    {
      v187 = (_QWORD *)(a1 + 104);
      do
      {
        *(_QWORD *)((char *)&v202 + 7) = 0;
        *(_QWORD *)&v202 = 0;
        memset(__p, 0, sizeof(__p));
        v201 = 0;
        v5 = (void **)v3[7];
        v6 = (void **)(v3 + 8);
        if (v5 == v3 + 8)
        {
          v9 = 0;
          v10 = 0;
LABEL_72:
          if (SHIBYTE(__p[2]) < 0)
            goto LABEL_111;
LABEL_73:
          if (v10 < 0)
            goto LABEL_112;
          goto LABEL_74;
        }
        v7 = 0;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        do
        {
          v11 = v7;
          if (*((_DWORD *)v5 + 14) > (int)v7)
          {
            if (__p != v5 + 4)
            {
              v12 = *((_BYTE *)v5 + 55);
              if (SHIBYTE(__p[2]) < 0)
              {
                if (v12 >= 0)
                  v13 = v5 + 4;
                else
                  v13 = v5[4];
                if (v12 >= 0)
                  v14 = *((unsigned __int8 *)v5 + 55);
                else
                  v14 = (size_t)v5[5];
                sub_19C2E54A8(__p, v13, v14);
              }
              else if ((*((_BYTE *)v5 + 55) & 0x80) != 0)
              {
                sub_19C2E53E4(__p, v5[4], (size_t)v5[5]);
              }
              else
              {
                *(_OWORD *)__p = *((_OWORD *)v5 + 2);
                __p[2] = v5[6];
              }
            }
            v11 = *((unsigned int *)v5 + 14);
            v201 = *((_DWORD *)v5 + 14);
          }
          if ((int)v11 <= (int)v8)
          {
            v7 = v11;
            v17 = (void **)v5[1];
            if (!v17)
            {
              do
              {
LABEL_28:
                v18 = (void **)v5[2];
                v156 = *v18 == v5;
                v5 = v18;
              }
              while (!v156);
              goto LABEL_7;
            }
          }
          else
          {
            *(_QWORD *)&v204 = v202;
            *(_QWORD *)((char *)&v204 + 7) = *(_QWORD *)((char *)&v202 + 7);
            v15 = __p[0];
            *(void **)&v202 = __p[1];
            *(void **)((char *)&v202 + 7) = *(void **)((char *)&__p[1] + 7);
            v16 = HIBYTE(__p[2]);
            __p[0] = v9;
            __p[1] = (void *)v204;
            *(void **)((char *)&__p[1] + 7) = *(void **)((char *)&v204 + 7);
            HIBYTE(__p[2]) = v10;
            v201 = v8;
            v7 = v8;
            v10 = v16;
            v9 = v15;
            v8 = v11;
            v17 = (void **)v5[1];
            if (!v17)
              goto LABEL_28;
          }
          do
          {
            v18 = v17;
            v17 = (void **)*v17;
          }
          while (v17);
LABEL_7:
          v5 = v18;
        }
        while (v18 != v6);
        if ((int)v8 < 2001 || (int)v7 <= 0 || (double)(int)v7 / (double)(int)v8 >= 0.05)
          goto LABEL_72;
        v195 = SHIBYTE(__p[2]);
        v19 = (void **)__p[0];
        __src = __p[0];
        if (SHIBYTE(__p[2]) >= 0)
          v19 = __p;
        v197 = (char *)v3[8];
        __s1 = v19;
        v192 = __p[1];
        if (SHIBYTE(__p[2]) >= 0)
          v20 = (void *)HIBYTE(__p[2]);
        else
          v20 = __p[1];
        v21 = (char **)(v3 + 8);
        v22 = (char **)(v3 + 8);
        if (!v3[8])
          goto LABEL_76;
        while (2)
        {
          v23 = v197;
LABEL_42:
          while (2)
          {
            v22 = (char **)v23;
            v24 = v23 + 32;
            v25 = (const void *)*((_QWORD *)v23 + 4);
            v26 = *((char *)v24 + 23);
            if (v26 >= 0)
              v27 = v24;
            else
              v27 = v25;
            if (v26 >= 0)
              v28 = *((unsigned __int8 *)v24 + 23);
            else
              v28 = v24[1];
            if (v28 >= (unint64_t)v20)
              v29 = (size_t)v20;
            else
              v29 = v28;
            v30 = memcmp(__s1, v27, v29);
            if (v30)
            {
              if (v30 < 0)
                goto LABEL_41;
            }
            else if ((unint64_t)v20 < v28)
            {
LABEL_41:
              v23 = *v22;
              v21 = v22;
              if (!*v22)
                goto LABEL_76;
              continue;
            }
            break;
          }
          v31 = memcmp(v27, __s1, v29);
          if (v31)
          {
            if (v31 < 0)
              break;
            goto LABEL_57;
          }
          if (v28 >= (unint64_t)v20)
          {
LABEL_57:
            if (*((int *)v22 + 14) < 2001)
              goto LABEL_110;
            v32 = (void **)v3[7];
            v23 = v197;
            if (v32 != v6)
            {
              do
              {
                *((_DWORD *)v32 + 14) = (int)((double)*((int *)v32 + 14) * 0.95);
                v33 = (void **)v32[1];
                if (v33)
                {
                  do
                  {
                    v34 = v33;
                    v33 = (void **)*v33;
                  }
                  while (v33);
                }
                else
                {
                  do
                  {
                    v34 = (void **)v32[2];
                    v156 = *v34 == v32;
                    v32 = v34;
                  }
                  while (!v156);
                }
                v32 = v34;
              }
              while (v34 != v6);
              continue;
            }
            goto LABEL_42;
          }
          break;
        }
        v23 = v22[1];
        if (v23)
          goto LABEL_42;
        v21 = v22 + 1;
LABEL_76:
        v36 = (char *)operator new(0x40uLL);
        v37 = v36 + 32;
        if (v195 < 0)
        {
          sub_19C2B5238(v37, __src, (unint64_t)v192);
        }
        else
        {
          *(_OWORD *)v37 = *(_OWORD *)__p;
          *((void **)v36 + 6) = __p[2];
        }
        *((_DWORD *)v36 + 14) = 0;
        *(_QWORD *)v36 = 0;
        *((_QWORD *)v36 + 1) = 0;
        *((_QWORD *)v36 + 2) = v22;
        *v21 = v36;
        v38 = *(_QWORD *)v3[7];
        if (v38)
        {
          v3[7] = v38;
          v36 = *v21;
        }
        v39 = (char *)*v6;
        v156 = v36 == *v6;
        v36[24] = v156;
        if (!v156)
        {
          do
          {
            v40 = *((_QWORD *)v36 + 2);
            if (*(_BYTE *)(v40 + 24))
              break;
            v41 = *(char **)(v40 + 16);
            v42 = *(_QWORD *)v41;
            if (*(_QWORD *)v41 == v40)
            {
              v45 = *((_QWORD *)v41 + 1);
              if (!v45 || (v46 = *(unsigned __int8 *)(v45 + 24), v43 = (_BYTE *)(v45 + 24), v46))
              {
                if (*(char **)v40 == v36)
                {
                  v47 = (uint64_t *)*((_QWORD *)v36 + 2);
                }
                else
                {
                  v47 = *(uint64_t **)(v40 + 8);
                  v48 = *v47;
                  *(_QWORD *)(v40 + 8) = *v47;
                  if (v48)
                  {
                    *(_QWORD *)(v48 + 16) = v40;
                    v41 = *(char **)(v40 + 16);
                  }
                  v47[2] = (uint64_t)v41;
                  *(_QWORD *)(*(_QWORD *)(v40 + 16) + 8 * (**(_QWORD **)(v40 + 16) != v40)) = v47;
                  *v47 = v40;
                  *(_QWORD *)(v40 + 16) = v47;
                  v41 = (char *)v47[2];
                  v40 = *(_QWORD *)v41;
                }
                *((_BYTE *)v47 + 24) = 1;
                v41[24] = 0;
                v51 = *(_QWORD *)(v40 + 8);
                *(_QWORD *)v41 = v51;
                if (v51)
                  *(_QWORD *)(v51 + 16) = v41;
                *(_QWORD *)(v40 + 16) = *((_QWORD *)v41 + 2);
                *(_QWORD *)(*((_QWORD *)v41 + 2) + 8 * (**((_QWORD **)v41 + 2) != (_QWORD)v41)) = v40;
                *(_QWORD *)(v40 + 8) = v41;
                goto LABEL_108;
              }
            }
            else if (!v42 || (v44 = *(unsigned __int8 *)(v42 + 24), v43 = (_BYTE *)(v42 + 24), v44))
            {
              if (*(char **)v40 == v36)
              {
                v49 = *((_QWORD *)v36 + 1);
                *(_QWORD *)v40 = v49;
                if (v49)
                {
                  *(_QWORD *)(v49 + 16) = v40;
                  v41 = *(char **)(v40 + 16);
                }
                *((_QWORD *)v36 + 2) = v41;
                *(_QWORD *)(*(_QWORD *)(v40 + 16) + 8 * (**(_QWORD **)(v40 + 16) != v40)) = v36;
                *((_QWORD *)v36 + 1) = v40;
                *(_QWORD *)(v40 + 16) = v36;
                v41 = (char *)*((_QWORD *)v36 + 2);
              }
              else
              {
                v36 = (char *)*((_QWORD *)v36 + 2);
              }
              v36[24] = 1;
              v41[24] = 0;
              v40 = *((_QWORD *)v41 + 1);
              v50 = *(char **)v40;
              *((_QWORD *)v41 + 1) = *(_QWORD *)v40;
              if (v50)
                *((_QWORD *)v50 + 2) = v41;
              *(_QWORD *)(v40 + 16) = *((_QWORD *)v41 + 2);
              *(_QWORD *)(*((_QWORD *)v41 + 2) + 8 * (**((_QWORD **)v41 + 2) != (_QWORD)v41)) = v40;
              *(_QWORD *)v40 = v41;
LABEL_108:
              *((_QWORD *)v41 + 2) = v40;
              break;
            }
            *(_BYTE *)(v40 + 24) = 1;
            v36 = v41;
            v41[24] = v41 == v39;
            *v43 = 1;
          }
          while (v41 != v39);
        }
        ++v3[9];
LABEL_110:
        *(_BYTE *)(v194 + 192) = 1;
        v4 = v187;
        if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
          goto LABEL_73;
LABEL_111:
        operator delete(__p[0]);
        if (v10 < 0)
        {
LABEL_112:
          operator delete(v9);
          v35 = (_QWORD *)v3[1];
          if (v35)
            goto LABEL_113;
          do
          {
LABEL_115:
            v52 = (_QWORD *)v3[2];
            v156 = *v52 == (_QWORD)v3;
            v3 = v52;
          }
          while (!v156);
          goto LABEL_4;
        }
LABEL_74:
        v35 = (_QWORD *)v3[1];
        if (!v35)
          goto LABEL_115;
        do
        {
LABEL_113:
          v52 = v35;
          v35 = (_QWORD *)*v35;
        }
        while (v35);
LABEL_4:
        v3 = v52;
      }
      while (v52 != v4);
    }
    a1 = v194;
    *(_BYTE *)(v194 + 208) = 0;
  }
  v53 = a1;
  __p[1] = 0;
  __p[2] = 0;
  __p[0] = &__p[1];
  v54 = *(uint64_t **)a3;
  v193 = (uint64_t *)(a3 + 8);
  if (*(_QWORD *)a3 != a3 + 8)
  {
    while (1)
    {
      v57 = (void **)__p[1];
      v58 = &__p[1];
      if (__p[0] == &__p[1])
        break;
      v59 = (void **)__p[1];
      v60 = &__p[1];
      if (__p[1])
      {
        do
        {
          v58 = v59;
          v59 = (void **)v59[1];
        }
        while (v59);
      }
      else
      {
        do
        {
          v58 = (void **)v60[2];
          v156 = *v58 == v60;
          v60 = v58;
        }
        while (v156);
      }
      v61 = *((char *)v58 + 55);
      if (v61 >= 0)
        v62 = v58 + 4;
      else
        v62 = v58[4];
      if (v61 >= 0)
        v63 = *((unsigned __int8 *)v58 + 55);
      else
        v63 = (size_t)v58[5];
      v64 = *((char *)v54 + 55);
      if (v64 >= 0)
        v65 = v54 + 4;
      else
        v65 = (const void *)v54[4];
      if (v64 >= 0)
        v66 = *((unsigned __int8 *)v54 + 55);
      else
        v66 = v54[5];
      if (v66 >= v63)
        v67 = v63;
      else
        v67 = v66;
      v68 = memcmp(v62, v65, v67);
      if (v68)
      {
        if (v68 < 0)
          break;
      }
      else if (v63 < v66)
      {
        break;
      }
      v69 = &__p[1];
      v70 = &__p[1];
      if (v57)
      {
        v70 = &__p[1];
        while (1)
        {
          v69 = v57;
          v71 = *((unsigned __int8 *)v57 + 55);
          v72 = v57[5];
          if ((v71 & 0x80u) == 0)
            v73 = v57 + 4;
          else
            v73 = v57[4];
          if ((v71 & 0x80u) == 0)
            v74 = v71;
          else
            v74 = (size_t)v72;
          if (v74 >= v66)
            v75 = v66;
          else
            v75 = v74;
          v76 = memcmp(v65, v73, v75);
          if (v76)
          {
            if (v76 < 0)
              goto LABEL_147;
LABEL_161:
            v77 = memcmp(v73, v65, v75);
            if (v77)
            {
              if ((v77 & 0x80000000) == 0)
                break;
            }
            else if (v74 >= v66)
            {
              break;
            }
            v70 = v69 + 1;
            v57 = (void **)v69[1];
            if (!v57)
              goto LABEL_177;
          }
          else
          {
            if (v66 >= v74)
              goto LABEL_161;
LABEL_147:
            v57 = (void **)*v69;
            v70 = v69;
            if (!*v69)
              goto LABEL_177;
          }
        }
      }
LABEL_174:
      if (*v70)
      {
        v78 = (uint64_t *)v54[1];
        if (!v78)
          goto LABEL_185;
      }
      else
      {
LABEL_177:
        v79 = (uint64_t *)operator new(0x40uLL);
        v80 = v79 + 4;
        if (*((char *)v54 + 55) < 0)
        {
          sub_19C2B5238(v80, (void *)v54[4], v54[5]);
        }
        else
        {
          v81 = *((_OWORD *)v54 + 2);
          v79[6] = v54[6];
          *(_OWORD *)v80 = v81;
        }
        v79[7] = v54[7];
        *v79 = 0;
        v79[1] = 0;
        v79[2] = (uint64_t)v69;
        *v70 = v79;
        if (*(_QWORD *)__p[0])
        {
          __p[0] = *(void **)__p[0];
          v79 = (uint64_t *)*v70;
        }
        sub_19C2A2310((uint64_t *)__p[1], v79);
        ++__p[2];
        v78 = (uint64_t *)v54[1];
        if (!v78)
        {
          do
          {
LABEL_185:
            v82 = (uint64_t *)v54[2];
            v156 = *v82 == (_QWORD)v54;
            v54 = v82;
          }
          while (!v156);
          goto LABEL_122;
        }
      }
      do
      {
        v82 = v78;
        v78 = (uint64_t *)*v78;
      }
      while (v78);
LABEL_122:
      v54 = v82;
      if (v82 == v193)
        goto LABEL_120;
    }
    if (v57)
      v69 = v58;
    else
      v69 = &__p[1];
    if (v57)
      v70 = v58 + 1;
    else
      v70 = &__p[1];
    goto LABEL_174;
  }
LABEL_120:
  *((_QWORD *)&v204 + 1) = 0;
  v205 = 0;
  *(_QWORD *)&v204 = (char *)&v204 + 8;
  v55 = *(uint64_t ***)(v53 + 96);
  v56 = (uint64_t **)(v53 + 104);
  __srca = (uint64_t **)(v53 + 104);
  if (v55 != (uint64_t **)(v53 + 104))
  {
    while (1)
    {
      v83 = (uint64_t **)v55[7];
      v196 = (uint64_t *)v55;
      __s1a = v55 + 8;
      if (v83 != v55 + 8)
        break;
LABEL_190:
      v84 = v196;
      v85 = (uint64_t *)v196[1];
      if (v85)
      {
        do
        {
          v86 = (uint64_t **)v85;
          v85 = (uint64_t *)*v85;
        }
        while (v85);
      }
      else
      {
        do
        {
          v86 = (uint64_t **)v84[2];
          v156 = *v86 == v84;
          v84 = (uint64_t *)v86;
        }
        while (!v156);
      }
      v55 = v86;
      v56 = (uint64_t **)(v53 + 104);
      if (v86 == __srca)
        goto LABEL_265;
    }
    while (1)
    {
      v87 = *((_DWORD *)v83 + 14);
      v88 = (char *)*((_QWORD *)&v204 + 1);
      v89 = (char *)&v204 + 8;
      v90 = (char **)&v204 + 1;
      if (*((_QWORD *)&v204 + 1))
        break;
LABEL_221:
      v103 = (char *)operator new(0x40uLL);
      v104 = v103 + 32;
      if (*((char *)v83 + 55) < 0)
      {
        sub_19C2B5238(v104, v83[4], (unint64_t)v83[5]);
      }
      else
      {
        v105 = *((_OWORD *)v83 + 2);
        *((_QWORD *)v103 + 6) = v83[6];
        *(_OWORD *)v104 = v105;
      }
      *((_DWORD *)v103 + 14) = 0;
      *(_QWORD *)v103 = 0;
      *((_QWORD *)v103 + 1) = 0;
      *((_QWORD *)v103 + 2) = v89;
      *v90 = v103;
      v106 = v103;
      if (*(_QWORD *)v204)
      {
        *(_QWORD *)&v204 = *(_QWORD *)v204;
        v106 = *v90;
      }
      v107 = (char *)*((_QWORD *)&v204 + 1);
      v156 = v106 == *((char **)&v204 + 1);
      v106[24] = v106 == *((char **)&v204 + 1);
      if (!v156)
      {
        do
        {
          v108 = *((_QWORD *)v106 + 2);
          if (*(_BYTE *)(v108 + 24))
            break;
          v109 = *(char **)(v108 + 16);
          v110 = *(_QWORD *)v109;
          if (*(_QWORD *)v109 == v108)
          {
            v113 = *((_QWORD *)v109 + 1);
            if (!v113 || (v114 = *(unsigned __int8 *)(v113 + 24), v111 = (_BYTE *)(v113 + 24), v114))
            {
              if (*(char **)v108 == v106)
              {
                v115 = (uint64_t *)*((_QWORD *)v106 + 2);
              }
              else
              {
                v115 = *(uint64_t **)(v108 + 8);
                v116 = *v115;
                *(_QWORD *)(v108 + 8) = *v115;
                if (v116)
                {
                  *(_QWORD *)(v116 + 16) = v108;
                  v109 = *(char **)(v108 + 16);
                }
                v115[2] = (uint64_t)v109;
                *(_QWORD *)(*(_QWORD *)(v108 + 16) + 8 * (**(_QWORD **)(v108 + 16) != v108)) = v115;
                *v115 = v108;
                *(_QWORD *)(v108 + 16) = v115;
                v109 = (char *)v115[2];
                v108 = *(_QWORD *)v109;
              }
              *((_BYTE *)v115 + 24) = 1;
              v109[24] = 0;
              v120 = *(_QWORD *)(v108 + 8);
              *(_QWORD *)v109 = v120;
              if (v120)
                *(_QWORD *)(v120 + 16) = v109;
              *(_QWORD *)(v108 + 16) = *((_QWORD *)v109 + 2);
              *(_QWORD *)(*((_QWORD *)v109 + 2) + 8 * (**((_QWORD **)v109 + 2) != (_QWORD)v109)) = v108;
              *(_QWORD *)(v108 + 8) = v109;
              goto LABEL_254;
            }
          }
          else if (!v110 || (v112 = *(unsigned __int8 *)(v110 + 24), v111 = (_BYTE *)(v110 + 24), v112))
          {
            if (*(char **)v108 == v106)
            {
              v118 = *((_QWORD *)v106 + 1);
              *(_QWORD *)v108 = v118;
              if (v118)
              {
                *(_QWORD *)(v118 + 16) = v108;
                v109 = *(char **)(v108 + 16);
              }
              *((_QWORD *)v106 + 2) = v109;
              *(_QWORD *)(*(_QWORD *)(v108 + 16) + 8 * (**(_QWORD **)(v108 + 16) != v108)) = v106;
              *((_QWORD *)v106 + 1) = v108;
              *(_QWORD *)(v108 + 16) = v106;
              v109 = (char *)*((_QWORD *)v106 + 2);
            }
            else
            {
              v106 = (char *)*((_QWORD *)v106 + 2);
            }
            v106[24] = 1;
            v109[24] = 0;
            v108 = *((_QWORD *)v109 + 1);
            v119 = *(char **)v108;
            *((_QWORD *)v109 + 1) = *(_QWORD *)v108;
            if (v119)
              *((_QWORD *)v119 + 2) = v109;
            *(_QWORD *)(v108 + 16) = *((_QWORD *)v109 + 2);
            *(_QWORD *)(*((_QWORD *)v109 + 2) + 8 * (**((_QWORD **)v109 + 2) != (_QWORD)v109)) = v108;
            *(_QWORD *)v108 = v109;
LABEL_254:
            *((_QWORD *)v109 + 2) = v108;
            break;
          }
          *(_BYTE *)(v108 + 24) = 1;
          v106 = v109;
          v109[24] = v109 == v107;
          *v111 = 1;
        }
        while (v109 != v107);
      }
      v117 = 0;
      ++v205;
LABEL_256:
      *((_DWORD *)v103 + 14) = v117 + v87;
      v121 = v83[1];
      if (v121)
      {
        do
        {
          v122 = (uint64_t **)v121;
          v121 = (uint64_t *)*v121;
        }
        while (v121);
      }
      else
      {
        do
        {
          v122 = (uint64_t **)v83[2];
          v156 = *v122 == (uint64_t *)v83;
          v83 = v122;
        }
        while (!v156);
      }
      v83 = v122;
      if (v122 == __s1a)
        goto LABEL_190;
    }
    v91 = *((char *)v83 + 55);
    if (v91 >= 0)
      v92 = (uint64_t *)(v83 + 4);
    else
      v92 = v83[4];
    if (v91 >= 0)
      v93 = *((unsigned __int8 *)v83 + 55);
    else
      v93 = (size_t)v83[5];
    while (1)
    {
      v89 = v88;
      v96 = (char *)*((_QWORD *)v88 + 4);
      v94 = v88 + 32;
      v95 = v96;
      v97 = v94[23];
      if (v97 >= 0)
        v98 = v94;
      else
        v98 = v95;
      if (v97 >= 0)
        v99 = v94[23];
      else
        v99 = *((_QWORD *)v94 + 1);
      if (v99 >= v93)
        v100 = v93;
      else
        v100 = v99;
      v101 = memcmp(v92, v98, v100);
      if (v101)
      {
        if (v101 < 0)
          goto LABEL_201;
LABEL_215:
        v102 = memcmp(v98, v92, v100);
        if (v102)
        {
          if ((v102 & 0x80000000) == 0)
            goto LABEL_241;
        }
        else if (v99 >= v93)
        {
LABEL_241:
          v117 = *((_DWORD *)v89 + 14);
          v103 = v89;
          goto LABEL_256;
        }
        v88 = (char *)*((_QWORD *)v89 + 1);
        if (!v88)
        {
          v90 = (char **)(v89 + 8);
          goto LABEL_221;
        }
      }
      else
      {
        if (v93 >= v99)
          goto LABEL_215;
LABEL_201:
        v88 = *(char **)v89;
        v90 = (char **)v89;
        if (!*(_QWORD *)v89)
          goto LABEL_221;
      }
    }
  }
LABEL_265:
  sub_19C315A14((uint64_t **)&v204, a3);
  v123 = *v56;
  v124 = a2;
  v125 = *((char *)a2 + 23);
  if (!*v56)
  {
    v140 = 0;
    goto LABEL_336;
  }
  if (v125 >= 0)
    v126 = a2;
  else
    v126 = *a2;
  if (v125 >= 0)
    v127 = *((unsigned __int8 *)a2 + 23);
  else
    v127 = (size_t)a2[1];
  v128 = v56;
  v129 = *v56;
  do
  {
    while (1)
    {
      v130 = *((char *)v129 + 55);
      v131 = v130 >= 0 ? v129 + 4 : (uint64_t *)v129[4];
      v132 = v130 >= 0 ? *((unsigned __int8 *)v129 + 55) : v129[5];
      v133 = v127 >= v132 ? v132 : v127;
      v134 = memcmp(v131, v126, v133);
      if (v134)
        break;
      if (v132 >= v127)
        goto LABEL_287;
LABEL_273:
      v129 = (uint64_t *)v129[1];
      if (!v129)
        goto LABEL_288;
    }
    if (v134 < 0)
      goto LABEL_273;
LABEL_287:
    v128 = (uint64_t **)v129;
    v129 = (uint64_t *)*v129;
  }
  while (v129);
LABEL_288:
  if (v128 == v56)
    goto LABEL_312;
  v135 = *((char *)v128 + 55);
  if (v135 >= 0)
    v136 = (uint64_t *)(v128 + 4);
  else
    v136 = v128[4];
  if (v135 >= 0)
    v137 = *((unsigned __int8 *)v128 + 55);
  else
    v137 = (size_t)v128[5];
  if (v137 >= v127)
    v138 = v127;
  else
    v138 = v137;
  v139 = memcmp(v126, v136, v138);
  if (v139)
  {
    if (v139 < 0)
    {
LABEL_312:
      v140 = 0;
      v124 = a2;
      goto LABEL_313;
    }
  }
  else if (v127 < v137)
  {
    goto LABEL_312;
  }
  v141 = (uint64_t **)v128[7];
  if (v141 == v128 + 8)
    goto LABEL_312;
  v140 = 0;
  v124 = a2;
  do
  {
    v142 = v141[1];
    v143 = (uint64_t *)v141;
    if (v142)
    {
      do
      {
        v144 = (uint64_t **)v142;
        v142 = (uint64_t *)*v142;
      }
      while (v142);
    }
    else
    {
      do
      {
        v144 = (uint64_t **)v143[2];
        v156 = *v144 == v143;
        v143 = (uint64_t *)v144;
      }
      while (!v156);
    }
    v140 += *((_DWORD *)v141 + 14);
    v141 = v144;
  }
  while (v144 != v128 + 8);
LABEL_313:
  v145 = *((unsigned __int8 *)v124 + 23);
  v125 = (char)v145;
  if (!v123)
  {
LABEL_336:
    v146 = v124[1];
    v145 = v125;
    goto LABEL_337;
  }
  v146 = v124[1];
  if ((v145 & 0x80u) == 0)
    v147 = v124;
  else
    v147 = *v124;
  v148 = v56;
  if ((v145 & 0x80u) == 0)
    v149 = *((unsigned __int8 *)v124 + 23);
  else
    v149 = (size_t)v124[1];
  while (2)
  {
    v150 = *((char *)v123 + 55);
    if (v150 >= 0)
      v151 = v123 + 4;
    else
      v151 = (const void *)v123[4];
    if (v150 >= 0)
      v152 = *((unsigned __int8 *)v123 + 55);
    else
      v152 = v123[5];
    if (v149 >= v152)
      v153 = v152;
    else
      v153 = v149;
    v154 = memcmp(v151, v147, v153);
    if (!v154)
    {
      if (v152 < v149)
        goto LABEL_335;
      goto LABEL_320;
    }
    if ((v154 & 0x80000000) == 0)
    {
LABEL_320:
      v148 = (uint64_t **)v123;
      goto LABEL_321;
    }
LABEL_335:
    ++v123;
LABEL_321:
    v123 = (uint64_t *)*v123;
    if (v123)
      continue;
    break;
  }
  if (v148 == __srca)
  {
    v56 = (uint64_t **)(v53 + 104);
    goto LABEL_337;
  }
  v164 = *((char *)v148 + 55);
  if (v164 >= 0)
    v165 = (uint64_t *)(v148 + 4);
  else
    v165 = v148[4];
  if (v164 >= 0)
    v166 = *((unsigned __int8 *)v148 + 55);
  else
    v166 = (size_t)v148[5];
  if (v166 >= v149)
    v167 = v149;
  else
    v167 = v166;
  v168 = memcmp(v147, v165, v167);
  if (v168)
  {
    v56 = (uint64_t **)(v53 + 104);
    if (v168 < 0)
      goto LABEL_337;
  }
  else
  {
    v178 = v149 >= v166;
    v56 = (uint64_t **)(v53 + 104);
    if (!v178)
LABEL_337:
      v148 = v56;
  }
  if (v125 >= 0)
    v155 = v145;
  else
    v155 = (unint64_t)v146;
  if (v155)
    v156 = v56 == v148;
  else
    v156 = 1;
  if (!v156 && v140 >= 1)
  {
    sub_19C315A14(v148 + 7, (uint64_t)__p);
    *((_QWORD *)&v202 + 1) = 0;
    v203 = 0;
    *(_QWORD *)&v202 = (char *)&v202 + 8;
    v158 = (void **)__p[0];
    if (__p[0] != &__p[1])
    {
      do
      {
        v159 = sub_19C29A674(a3, (const void **)v158 + 4);
        if (v193 == v159)
        {
          v161 = sub_19C2EAA88((uint64_t **)&v202, (const void **)v158 + 4, (uint64_t)(v158 + 4));
          v160 = 0;
        }
        else
        {
          v160 = (uint64_t *)v159[7];
          v161 = sub_19C2EAA88((uint64_t **)&v202, (const void **)v158 + 4, (uint64_t)(v158 + 4));
        }
        v161[7] = v160;
        v162 = (void **)v158[1];
        if (v162)
        {
          do
          {
            v163 = v162;
            v162 = (void **)*v162;
          }
          while (v162);
        }
        else
        {
          do
          {
            v163 = (void **)v158[2];
            v156 = *v163 == v158;
            v158 = v163;
          }
          while (!v156);
        }
        v158 = v163;
      }
      while (v163 != &__p[1]);
      if (v203)
      {
        v169 = (double *)v202;
        if ((__int128 *)v202 != (__int128 *)((char *)&v202 + 8))
        {
          v170 = 0.0;
          v171 = (_OWORD *)v202;
          do
          {
            v172 = (_QWORD *)*((_QWORD *)v171 + 1);
            v173 = v171;
            if (v172)
            {
              do
              {
                v174 = v172;
                v172 = (_QWORD *)*v172;
              }
              while (v172);
            }
            else
            {
              do
              {
                v174 = (_OWORD *)*((_QWORD *)v173 + 2);
                v156 = *(_QWORD *)v174 == (_QWORD)v173;
                v173 = v174;
              }
              while (!v156);
            }
            v170 = *((double *)v171 + 7) + v170;
            v171 = v174;
          }
          while (v174 != (__int128 *)((char *)&v202 + 8));
          if (v170 <= 0.0)
          {
            v179 = 1.0 / (double)v203;
            do
            {
              v169[7] = v179;
              v180 = (double *)*((_QWORD *)v169 + 1);
              if (v180)
              {
                do
                {
                  v181 = v180;
                  v180 = *(double **)v180;
                }
                while (v180);
              }
              else
              {
                do
                {
                  v181 = (double *)*((_QWORD *)v169 + 2);
                  v156 = *(_QWORD *)v181 == (_QWORD)v169;
                  v169 = v181;
                }
                while (!v156);
              }
              v169 = v181;
            }
            while (v181 != (double *)((char *)&v202 + 8));
          }
          else
          {
            v175 = 1.0 / v170;
            do
            {
              v169[7] = v169[7] * v175;
              v176 = (double *)*((_QWORD *)v169 + 1);
              if (v176)
              {
                do
                {
                  v177 = v176;
                  v176 = *(double **)v176;
                }
                while (v176);
              }
              else
              {
                do
                {
                  v177 = (double *)*((_QWORD *)v169 + 2);
                  v156 = *(_QWORD *)v177 == (_QWORD)v169;
                  v169 = v177;
                }
                while (!v156);
              }
              v169 = v177;
            }
            while (v177 != (double *)((char *)&v202 + 8));
          }
        }
      }
    }
    sub_19C2EAC08(*(char **)(a3 + 8));
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)a3 = v193;
    v182 = (void **)__p[0];
    if (__p[0] != &__p[1])
    {
      do
      {
        v183 = *((double *)v182 + 7);
        v184 = *((double *)sub_19C2EAA88((uint64_t **)&v202, (const void **)v182 + 4, (uint64_t)(v182 + 4)) + 7);
        *((double *)sub_19C2EAA88((uint64_t **)a3, (const void **)v182 + 4, (uint64_t)(v182 + 4)) + 7) = v183 * 0.8 + v184 * 0.2;
        v185 = (void **)v182[1];
        if (v185)
        {
          do
          {
            v186 = v185;
            v185 = (void **)*v185;
          }
          while (v185);
        }
        else
        {
          do
          {
            v186 = (void **)v182[2];
            v156 = *v186 == v182;
            v182 = v186;
          }
          while (!v156);
        }
        v182 = v186;
      }
      while (v186 != &__p[1]);
    }
    sub_19C2EAC08(*((char **)&v202 + 1));
  }
  sub_19C2EAC08(*((char **)&v204 + 1));
  sub_19C2EAC08((char *)__p[1]);
}

void sub_19C31596C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, char *a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char *a30)
{
  sub_19C2EAC08(a30);
  sub_19C2EAC08(a20);
  _Unwind_Resume(a1);
}

uint64_t **sub_19C315A14(uint64_t **result, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  int v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  double v15;
  char v16;
  const void *v17;
  size_t v18;
  _QWORD *v19;
  uint64_t *v20;
  int v21;
  uint64_t *v22;
  size_t v23;
  size_t v24;
  int v25;
  const void *v26;
  size_t v27;
  size_t v28;
  uint64_t *v29;
  uint64_t *v30;
  double v31;
  int v32;
  double v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t *v38;
  double v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t *v43;
  double v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t *v48;
  unint64_t v49;

  v2 = result + 1;
  v3 = *result;
  if (*result == (uint64_t *)(result + 1))
    return result;
  v5 = 0;
  v6 = *result;
  do
  {
    v7 = (_QWORD *)v6[1];
    v8 = v6;
    if (v7)
    {
      do
      {
        v9 = v7;
        v7 = (_QWORD *)*v7;
      }
      while (v7);
    }
    else
    {
      do
      {
        v9 = (_QWORD *)v8[2];
        v10 = *v9 == (_QWORD)v8;
        v8 = v9;
      }
      while (!v10);
    }
    v5 += *((_DWORD *)v6 + 14);
    v6 = v9;
  }
  while (v9 != v2);
  if (v5 < 1)
    return result;
  v11 = *(_QWORD *)(a2 + 16);
  if (!v11)
  {
    v31 = 1.0 / (double)v5;
    do
    {
      v32 = *((_DWORD *)v3 + 14);
      if (v32 >= 2001)
      {
        v33 = (double)v32 * v31;
        if (v33 > 0.05)
        {
          result = sub_19C2EAA88((uint64_t **)a2, (const void **)v3 + 4, (uint64_t)(v3 + 4));
          *((double *)result + 7) = v33;
        }
      }
      v34 = (_QWORD *)v3[1];
      if (v34)
      {
        do
        {
          v35 = v34;
          v34 = (_QWORD *)*v34;
        }
        while (v34);
      }
      else
      {
        do
        {
          v35 = (_QWORD *)v3[2];
          v10 = *v35 == (_QWORD)v3;
          v3 = v35;
        }
        while (!v10);
      }
      v3 = v35;
    }
    while (v35 != v2);
    v11 = *(_QWORD *)(a2 + 16);
    if (!v11)
      return result;
LABEL_73:
    v38 = *(uint64_t **)a2;
    v37 = (uint64_t *)(a2 + 8);
    v36 = v38;
    if (v38 != v37)
    {
      v39 = 0.0;
      v40 = v36;
      do
      {
        v41 = (uint64_t *)v40[1];
        v42 = v40;
        if (v41)
        {
          do
          {
            v43 = v41;
            v41 = (uint64_t *)*v41;
          }
          while (v41);
        }
        else
        {
          do
          {
            v43 = (uint64_t *)v42[2];
            v10 = *v43 == (_QWORD)v42;
            v42 = v43;
          }
          while (!v10);
        }
        v39 = *((double *)v40 + 7) + v39;
        v40 = v43;
      }
      while (v43 != v37);
      if (v39 <= 0.0)
      {
        do
        {
          *((double *)v36 + 7) = 1.0 / (double)v11;
          v47 = (uint64_t *)v36[1];
          if (v47)
          {
            do
            {
              v48 = v47;
              v47 = (uint64_t *)*v47;
            }
            while (v47);
          }
          else
          {
            do
            {
              v48 = (uint64_t *)v36[2];
              v10 = *v48 == (_QWORD)v36;
              v36 = v48;
            }
            while (!v10);
          }
          v36 = v48;
        }
        while (v48 != v37);
      }
      else
      {
        v44 = 1.0 / v39;
        do
        {
          *((double *)v36 + 7) = *((double *)v36 + 7) * v44;
          v45 = (uint64_t *)v36[1];
          if (v45)
          {
            do
            {
              v46 = v45;
              v45 = (uint64_t *)*v45;
            }
            while (v45);
          }
          else
          {
            do
            {
              v46 = (uint64_t *)v36[2];
              v10 = *v46 == (_QWORD)v36;
              v36 = v46;
            }
            while (!v10);
          }
          v36 = v46;
        }
        while (v46 != v37);
      }
    }
    return result;
  }
  v12 = (uint64_t *)(a2 + 8);
  v13 = *(uint64_t **)a2;
  if (*(_QWORD *)a2 == a2 + 8)
    goto LABEL_73;
  v49 = *(_QWORD *)(a2 + 16);
  v14 = (uint64_t *)*v2;
  v15 = 1.0 / (double)v5;
  while (2)
  {
    if (!v14)
      goto LABEL_51;
    v16 = *((_BYTE *)v13 + 55);
    if (v16 >= 0)
      v17 = v13 + 4;
    else
      v17 = (const void *)v13[4];
    if (v16 >= 0)
      v18 = *((unsigned __int8 *)v13 + 55);
    else
      v18 = v13[5];
    v19 = v2;
    v20 = v14;
    do
    {
      while (1)
      {
        v21 = *((char *)v20 + 55);
        v22 = v21 >= 0 ? v20 + 4 : (uint64_t *)v20[4];
        v23 = v21 >= 0 ? *((unsigned __int8 *)v20 + 55) : v20[5];
        v24 = v18 >= v23 ? v23 : v18;
        result = (uint64_t **)memcmp(v22, v17, v24);
        if ((_DWORD)result)
          break;
        if (v23 >= v18)
          goto LABEL_37;
LABEL_23:
        v20 = (uint64_t *)v20[1];
        if (!v20)
          goto LABEL_38;
      }
      if ((result & 0x80000000) != 0)
        goto LABEL_23;
LABEL_37:
      v19 = v20;
      v20 = (uint64_t *)*v20;
    }
    while (v20);
LABEL_38:
    if (v19 != v2)
    {
      v25 = *((char *)v19 + 55);
      if (v25 >= 0)
        v26 = v19 + 4;
      else
        v26 = (const void *)v19[4];
      if (v25 >= 0)
        v27 = *((unsigned __int8 *)v19 + 55);
      else
        v27 = v19[5];
      if (v27 >= v18)
        v28 = v18;
      else
        v28 = v27;
      result = (uint64_t **)memcmp(v17, v26, v28);
      if ((_DWORD)result)
      {
        if ((result & 0x80000000) == 0)
          goto LABEL_50;
      }
      else if (v18 >= v27)
      {
LABEL_50:
        *((double *)v13 + 7) = (double)*((int *)v19 + 14) * v15;
      }
    }
LABEL_51:
    v29 = (uint64_t *)v13[1];
    if (v29)
    {
      do
      {
        v30 = v29;
        v29 = (uint64_t *)*v29;
      }
      while (v29);
    }
    else
    {
      do
      {
        v30 = (uint64_t *)v13[2];
        v10 = *v30 == (_QWORD)v13;
        v13 = v30;
      }
      while (!v10);
    }
    v13 = v30;
    if (v30 != v12)
      continue;
    break;
  }
  v11 = v49;
  if (v49)
    goto LABEL_73;
  return result;
}

uint64_t sub_19C315DCC(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  void **v14;
  void **v15;
  __int128 v16;
  void **v17;
  unint64_t v18;
  __int128 v19;
  uint64_t result;
  char *v21;
  char *v22;

  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 32);
  if (v5 >= v4)
  {
    v7 = *(_QWORD *)(a1 + 24);
    v8 = (uint64_t)(v5 - v7) >> 5;
    if ((unint64_t)(v8 + 1) >> 59)
      sub_19C2A18E8();
    v9 = v4 - v7;
    v10 = v9 >> 4;
    if (v9 >> 4 <= (unint64_t)(v8 + 1))
      v10 = v8 + 1;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFE0)
      v11 = 0x7FFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    if (v11)
    {
      if (v11 >> 59)
        sub_19C2A143C();
      v12 = (char *)operator new(32 * v11);
    }
    else
    {
      v12 = 0;
    }
    v21 = &v12[32 * v8];
    v22 = &v12[32 * v11];
    sub_19C297950(v21, (const UInt8 *)a2);
    *((_DWORD *)v21 + 6) = *(_DWORD *)(a2 + 24);
    v13 = v21;
    v6 = v21 + 32;
    v14 = *(void ***)(a1 + 24);
    v15 = *(void ***)(a1 + 32);
    if (v15 == v14)
    {
      *(_QWORD *)(a1 + 24) = v21;
      *(_QWORD *)(a1 + 32) = v6;
      *(_QWORD *)(a1 + 40) = v22;
    }
    else
    {
      do
      {
        v16 = *((_OWORD *)v15 - 2);
        *((_QWORD *)v13 - 2) = *(v15 - 2);
        *((_OWORD *)v13 - 2) = v16;
        *(v15 - 3) = 0;
        *(v15 - 2) = 0;
        *(v15 - 4) = 0;
        *((_DWORD *)v13 - 2) = *((_DWORD *)v15 - 2);
        v13 -= 32;
        v15 -= 4;
      }
      while (v15 != v14);
      v15 = *(void ***)(a1 + 24);
      v17 = *(void ***)(a1 + 32);
      *(_QWORD *)(a1 + 24) = v13;
      *(_QWORD *)(a1 + 32) = v6;
      *(_QWORD *)(a1 + 40) = v22;
      while (v17 != v15)
      {
        if (*((char *)v17 - 9) < 0)
          operator delete(*(v17 - 4));
        v17 -= 4;
      }
    }
    if (v15)
      operator delete(v15);
  }
  else
  {
    sub_19C297950(*(_QWORD **)(a1 + 32), (const UInt8 *)a2);
    *(_DWORD *)(v5 + 24) = *(_DWORD *)(a2 + 24);
    v6 = (char *)(v5 + 32);
    *(_QWORD *)(a1 + 32) = v5 + 32;
  }
  *(_QWORD *)(a1 + 32) = v6;
  v18 = *(_QWORD *)(a1 + 8);
  if (v18 >= *(_QWORD *)(a1 + 16))
  {
    result = sub_19C315FD0((char **)a1, a2);
  }
  else
  {
    if (*(char *)(a2 + 23) < 0)
    {
      sub_19C2B5238(*(_BYTE **)(a1 + 8), *(void **)a2, *(_QWORD *)(a2 + 8));
    }
    else
    {
      v19 = *(_OWORD *)a2;
      *(_QWORD *)(v18 + 16) = *(_QWORD *)(a2 + 16);
      *(_OWORD *)v18 = v19;
    }
    *(_DWORD *)(v18 + 24) = *(_DWORD *)(a2 + 24);
    result = v18 + 32;
    *(_QWORD *)(a1 + 8) = v18 + 32;
  }
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void sub_19C315FAC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_19C315FB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C308300((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19C315FC8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 32) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_19C315FD0(char **a1, uint64_t a2)
{
  char *v2;
  char *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v8;
  unint64_t v9;
  _DWORD *v10;
  char *v11;
  uint64_t v12;
  __int128 v13;
  char *v14;
  void **v15;
  char *v17;

  v2 = *a1;
  v3 = a1[1];
  v4 = (v3 - *a1) >> 5;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59)
    sub_19C2A18E8();
  v8 = a1[2] - v2;
  if (v8 >> 4 > v5)
    v5 = v8 >> 4;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0)
    v9 = 0x7FFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  if (v9)
  {
    if (v9 >> 59)
      sub_19C2A143C();
    v10 = operator new(32 * v9);
  }
  else
  {
    v10 = 0;
  }
  v11 = (char *)&v10[8 * v4];
  v17 = (char *)&v10[8 * v9];
  if (*(char *)(a2 + 23) < 0)
  {
    sub_19C2B5238(v11, *(void **)a2, *(_QWORD *)(a2 + 8));
    v2 = *a1;
    v3 = a1[1];
    v11 = (char *)&v10[8 * v4];
  }
  else
  {
    *(_OWORD *)v11 = *(_OWORD *)a2;
    *((_QWORD *)v11 + 2) = *(_QWORD *)(a2 + 16);
  }
  v10[8 * v4 + 6] = *(_DWORD *)(a2 + 24);
  v12 = (uint64_t)&v10[8 * v4 + 8];
  if (v3 == v2)
  {
    v14 = v2;
  }
  else
  {
    do
    {
      v13 = *((_OWORD *)v3 - 2);
      *((_QWORD *)v11 - 2) = *((_QWORD *)v3 - 2);
      *((_OWORD *)v11 - 2) = v13;
      *((_QWORD *)v3 - 3) = 0;
      *((_QWORD *)v3 - 2) = 0;
      *((_QWORD *)v3 - 4) = 0;
      *((_DWORD *)v11 - 2) = *((_DWORD *)v3 - 2);
      v11 -= 32;
      v3 -= 32;
    }
    while (v3 != v2);
    v14 = *a1;
    v2 = a1[1];
  }
  *a1 = v11;
  a1[1] = (char *)v12;
  a1[2] = v17;
  if (v2 != v14)
  {
    v15 = (void **)(v2 - 32);
    do
    {
      if (*((char *)v15 + 23) < 0)
        operator delete(*v15);
      v15 -= 4;
    }
    while (v15 + 4 != (void **)v14);
    v2 = v14;
  }
  if (v2)
    operator delete(v2);
  return v12;
}

void sub_19C316178(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C308300((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19C31618C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v4;
  void **v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  const void *v16;
  uint64_t v17;
  const void *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;

  v1 = a1[1];
  v2 = a1[4];
  if (v1 - *a1 != v2 - a1[3])
    __assert_rtn("pop_back", "LinguisticContextImpl.cpp", 22, "m_tokens.size() == m_sanitizedTokens.size()");
  v4 = (void **)(v1 - 32);
  if (*(char *)(v1 - 9) < 0)
  {
    operator delete(*v4);
    v2 = a1[4];
  }
  a1[1] = v4;
  v5 = (void **)(v2 - 32);
  if (*(char *)(v2 - 9) < 0)
    operator delete(*v5);
  a1[4] = v5;
  v6 = a1 + 8;
  while (1)
  {
    v6 = (_QWORD *)*v6;
    if (!v6)
      break;
    v7 = v6[3];
    v8 = v6[4];
    v9 = (v8 - v7) >> 2;
    v10 = (uint64_t)(a1[1] - *a1) >> 5;
    if (v9 > v10)
    {
      v6[4] = v8 - 4;
      v9 = (v8 - 4 - v7) >> 2;
    }
    if (v9 > v10)
      __assert_rtn("pop_back", "LinguisticContextImpl.cpp", 28, "cache.size() <= m_tokens.size()");
  }
  v11 = a1 + 13;
  while (1)
  {
    v11 = (_QWORD *)*v11;
    if (!v11)
      break;
    v13 = v11[3];
    v14 = v11[4];
    v12 = (v14 - v13) >> 3;
    v15 = (uint64_t)(a1[1] - *a1) >> 5;
    if (v12 > v15)
    {
      v18 = *(const void **)(v14 - 8);
      v17 = v14 - 8;
      v16 = v18;
      if (v18)
      {
        CFRelease(v16);
        v13 = v11[3];
        v15 = (uint64_t)(a1[1] - *a1) >> 5;
      }
      v11[4] = v17;
      v12 = (v17 - v13) >> 3;
    }
    if (v12 > v15)
      __assert_rtn("pop_back", "LinguisticContextImpl.cpp", 33, "wordCache.size() <= m_tokens.size()");
  }
  if (a1[19] != a1[24])
    __assert_rtn("pop_back", "LinguisticContextImpl.cpp", 36, "m_fragmentCaches.size() == m_cumulativeFragmentCounts.size()");
  v19 = a1 + 18;
  while (1)
  {
    v19 = (_QWORD *)*v19;
    if (!v19)
      break;
    v21 = sub_19C316438((uint64_t)(a1 + 21), *((_DWORD *)v19 + 4), (_DWORD *)v19 + 4);
    v22 = v21[3];
    v23 = v21[4];
    v24 = (uint64_t)(a1[1] - *a1) >> 5;
    if (v24 >= (v23 - v22) >> 3)
    {
      v20 = v21[4];
    }
    else
    {
      v25 = v21;
      v20 = v23 - 8;
      v21[4] = v23 - 8;
      if (v22 == v23 - 8)
      {
        v26 = 0;
        v27 = v19 + 4;
        v28 = v19[3];
        v29 = (v19[4] - v28) >> 2;
      }
      else
      {
        v26 = *(_QWORD *)(v23 - 16);
        v27 = v19 + 4;
        v28 = v19[3];
        v29 = (v19[4] - v28) >> 2;
        if (v26 > v29)
        {
          sub_19C316738((uint64_t)(v19 + 3), v26 - v29);
          v22 = v25[3];
          v20 = v25[4];
          v24 = (uint64_t)(a1[1] - *a1) >> 5;
          goto LABEL_21;
        }
      }
      if (v29 > v26)
        *v27 = v28 + 4 * v26;
    }
LABEL_21:
    if (v24 < (v20 - v22) >> 3)
      __assert_rtn("pop_back", "LinguisticContextImpl.cpp", 44, "counts.size() <= m_tokens.size()");
  }
}

_QWORD *sub_19C316438(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t prime;
  unint64_t v20;
  uint8x8_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v6 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & a2;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (*((_DWORD *)v10 + 4) == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v13 = (_QWORD *)(a1 + 16);
  v10 = operator new(0x30uLL);
  *v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  v10[4] = 0;
  v10[5] = 0;
  v10[3] = 0;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (v7 && (float)(v15 * (float)v7) >= v14)
  {
    v6 = v3;
  }
  else
  {
    v16 = 1;
    if (v7 >= 3)
      v16 = (v7 & (v7 - 1)) != 0;
    v17 = v16 | (2 * v7);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      prime = v18;
    else
      prime = v17;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_35;
    if (prime < v7)
    {
      v20 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v21 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v21.i16[0] = vaddlv_u8(v21), v21.u32[0] > 1uLL))
      {
        v20 = std::__next_prime(v20);
      }
      else
      {
        v22 = 1 << -(char)__clz(v20 - 1);
        if (v20 >= 2)
          v20 = v22;
      }
      if (prime <= v20)
        prime = v20;
      if (prime < v7)
LABEL_35:
        sub_19C2EC6BC(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v6 %= v7;
    }
    else
    {
      v6 = ((_DWORD)v7 - 1) & v6;
    }
  }
  v23 = *(_QWORD *)a1;
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v6);
  if (v24)
  {
    *v10 = *v24;
LABEL_58:
    *v24 = v10;
    goto LABEL_59;
  }
  *v10 = *v13;
  *v13 = v10;
  *(_QWORD *)(v23 + 8 * v6) = v13;
  if (*v10)
  {
    v25 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v25 >= v7)
        v25 %= v7;
    }
    else
    {
      v25 &= v7 - 1;
    }
    v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_58;
  }
LABEL_59:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_19C316724(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C2EC85C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19C316738(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  int v24;

  v5 = *(char **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v6 = v5;
  if (a2 <= (v4 - (uint64_t)v5) >> 2)
  {
    if (a2)
    {
      bzero(v5, 4 * a2);
      v6 = &v5[4 * a2];
    }
    *(_QWORD *)(a1 + 8) = v6;
  }
  else
  {
    v7 = *(char **)a1;
    v8 = (uint64_t)&v5[-*(_QWORD *)a1];
    v9 = v8 >> 2;
    v10 = (v8 >> 2) + a2;
    if (v10 >> 62)
      sub_19C2A18E8();
    v11 = v4 - (_QWORD)v7;
    if (v11 >> 1 > v10)
      v10 = v11 >> 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
      v12 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 62)
        sub_19C2A143C();
      v13 = operator new(4 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[4 * v9];
    v15 = 4 * a2;
    v16 = &v13[4 * v12];
    bzero(v14, v15);
    v17 = &v14[v15];
    if (v5 != v7)
    {
      v18 = v5 - v7 - 4;
      if (v18 < 0x2C)
        goto LABEL_29;
      if ((unint64_t)(v5 - v13 - v8) < 0x20)
        goto LABEL_29;
      v19 = (v18 >> 2) + 1;
      v6 = &v5[-4 * (v19 & 0x7FFFFFFFFFFFFFF8)];
      v20 = &v13[4 * v9 - 16];
      v21 = v5 - 16;
      v22 = v19 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v23 = *(_OWORD *)v21;
        *(v20 - 1) = *((_OWORD *)v21 - 1);
        *v20 = v23;
        v20 -= 2;
        v21 -= 32;
        v22 -= 8;
      }
      while (v22);
      v14 -= 4 * (v19 & 0x7FFFFFFFFFFFFFF8);
      if (v19 != (v19 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_29:
        do
        {
          v24 = *((_DWORD *)v6 - 1);
          v6 -= 4;
          *((_DWORD *)v14 - 1) = v24;
          v14 -= 4;
        }
        while (v6 != v7);
      }
    }
    *(_QWORD *)a1 = v14;
    *(_QWORD *)(a1 + 8) = v17;
    *(_QWORD *)(a1 + 16) = v16;
    if (v7)
      operator delete(v7);
  }
}

void sub_19C3168D8(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  const void *v16;
  const void *v17;
  unint64_t v18;
  void **v19;
  _DWORD *v20;
  uint64_t v21;
  int v22;
  int v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  _BYTE *v33;
  _DWORD *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  _OWORD *v38;
  char *v39;
  uint64_t v40;
  __int128 v41;
  int v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  unsigned int v46;

  v46 = a2;
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (*(_QWORD *)(a1 + 32) - v6) >> 5;
  v8 = sub_19C316B5C(a1 + 48, a2, &v46);
  v9 = sub_19C316E5C(a1 + 88, a2, &v46);
  v11 = v9 + 3;
  v10 = v9[3];
  v12 = v9[4];
  v13 = (v12 - v10) >> 3;
  v45 = v9 + 3;
  if (v7 <= v13)
  {
    if (v7 < v13)
    {
      v14 = v9;
      v15 = v10 + 8 * v7;
      while (v12 != v15)
      {
        v17 = *(const void **)(v12 - 8);
        v12 -= 8;
        v16 = v17;
        if (v17)
          CFRelease(v16);
      }
      v14[4] = v15;
      v11 = v45;
    }
  }
  else
  {
    sub_19C31715C((uint64_t)(v9 + 3), v7 - v13);
  }
  v18 = (uint64_t)(v8[4] - v8[3]) >> 2;
  if (v18 < v7)
  {
    v19 = (void **)(v8 + 3);
    v43 = v7;
    v44 = v6;
    while (1)
    {
      v21 = *(_QWORD *)(a3 + 24);
      if (!v21)
        sub_19C2CCC60();
      v22 = (*(uint64_t (**)(uint64_t, unint64_t, unint64_t, void **))(*(_QWORD *)v21 + 48))(v21, v6 + 32 * v18, *v11 + 8 * v18, v19);
      v23 = v22;
      v25 = (char *)v8[4];
      v24 = v8[5];
      if ((unint64_t)v25 >= v24)
        break;
      *(_DWORD *)v25 = v22;
      v20 = v25 + 4;
LABEL_12:
      v8[4] = v20;
      ++v18;
      v19 = (void **)(v8 + 3);
      if (v18 == v7)
        return;
    }
    v26 = a3;
    v27 = (char *)*v19;
    v28 = v25 - (_BYTE *)*v19;
    v29 = v28 >> 2;
    v30 = (v28 >> 2) + 1;
    if (v30 >> 62)
      sub_19C2A18E8();
    v31 = v24 - (_QWORD)v27;
    if (v31 >> 1 > v30)
      v30 = v31 >> 1;
    if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFFCLL)
      v32 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v32 = v30;
    if (v32)
    {
      if (v32 >> 62)
        sub_19C2A143C();
      v33 = operator new(4 * v32);
    }
    else
    {
      v33 = 0;
    }
    v34 = &v33[4 * v29];
    *v34 = v23;
    v20 = v34 + 1;
    if (v25 == v27)
    {
      v11 = v45;
      goto LABEL_34;
    }
    v35 = v25 - 4 - v27;
    if (v35 >= 0x2C)
    {
      v36 = v25 - &v33[v28];
      v11 = v45;
      if (v36 >= 0x20)
      {
        v37 = (v35 >> 2) + 1;
        v38 = &v33[4 * v29 - 16];
        v39 = v25 - 16;
        v40 = v37 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v41 = *(_OWORD *)v39;
          *(v38 - 1) = *((_OWORD *)v39 - 1);
          *v38 = v41;
          v38 -= 2;
          v39 -= 32;
          v40 -= 8;
        }
        while (v40);
        v34 -= v37 & 0x7FFFFFFFFFFFFFF8;
        v25 -= 4 * (v37 & 0x7FFFFFFFFFFFFFF8);
        if (v37 == (v37 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_34:
          v8[3] = v34;
          v8[4] = v20;
          v8[5] = &v33[4 * v32];
          if (v27)
            operator delete(v27);
          a3 = v26;
          v7 = v43;
          v6 = v44;
          goto LABEL_12;
        }
      }
    }
    else
    {
      v11 = v45;
    }
    do
    {
      v42 = *((_DWORD *)v25 - 1);
      v25 -= 4;
      *--v34 = v42;
    }
    while (v25 != v27);
    goto LABEL_34;
  }
}

_QWORD *sub_19C316B5C(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t prime;
  unint64_t v20;
  uint8x8_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v6 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & a2;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (*((_DWORD *)v10 + 4) == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v13 = (_QWORD *)(a1 + 16);
  v10 = operator new(0x30uLL);
  *v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  v10[4] = 0;
  v10[5] = 0;
  v10[3] = 0;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (v7 && (float)(v15 * (float)v7) >= v14)
  {
    v6 = v3;
  }
  else
  {
    v16 = 1;
    if (v7 >= 3)
      v16 = (v7 & (v7 - 1)) != 0;
    v17 = v16 | (2 * v7);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      prime = v18;
    else
      prime = v17;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_35;
    if (prime < v7)
    {
      v20 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v21 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v21.i16[0] = vaddlv_u8(v21), v21.u32[0] > 1uLL))
      {
        v20 = std::__next_prime(v20);
      }
      else
      {
        v22 = 1 << -(char)__clz(v20 - 1);
        if (v20 >= 2)
          v20 = v22;
      }
      if (prime <= v20)
        prime = v20;
      if (prime < v7)
LABEL_35:
        sub_19C2EC6BC(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v6 %= v7;
    }
    else
    {
      v6 = ((_DWORD)v7 - 1) & v6;
    }
  }
  v23 = *(_QWORD *)a1;
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v6);
  if (v24)
  {
    *v10 = *v24;
LABEL_58:
    *v24 = v10;
    goto LABEL_59;
  }
  *v10 = *v13;
  *v13 = v10;
  *(_QWORD *)(v23 + 8 * v6) = v13;
  if (*v10)
  {
    v25 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v25 >= v7)
        v25 %= v7;
    }
    else
    {
      v25 &= v7 - 1;
    }
    v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_58;
  }
LABEL_59:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_19C316E48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C2EC85C((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_19C316E5C(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t prime;
  unint64_t v20;
  uint8x8_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v6 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & a2;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (*((_DWORD *)v10 + 4) == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v13 = (_QWORD *)(a1 + 16);
  v10 = operator new(0x30uLL);
  *v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  v10[4] = 0;
  v10[5] = 0;
  v10[3] = 0;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (v7 && (float)(v15 * (float)v7) >= v14)
  {
    v6 = v3;
  }
  else
  {
    v16 = 1;
    if (v7 >= 3)
      v16 = (v7 & (v7 - 1)) != 0;
    v17 = v16 | (2 * v7);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      prime = v18;
    else
      prime = v17;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_35;
    if (prime < v7)
    {
      v20 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v21 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v21.i16[0] = vaddlv_u8(v21), v21.u32[0] > 1uLL))
      {
        v20 = std::__next_prime(v20);
      }
      else
      {
        v22 = 1 << -(char)__clz(v20 - 1);
        if (v20 >= 2)
          v20 = v22;
      }
      if (prime <= v20)
        prime = v20;
      if (prime < v7)
LABEL_35:
        sub_19C2EC6BC(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v6 %= v7;
    }
    else
    {
      v6 = ((_DWORD)v7 - 1) & v6;
    }
  }
  v23 = *(_QWORD *)a1;
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v6);
  if (v24)
  {
    *v10 = *v24;
LABEL_58:
    *v24 = v10;
    goto LABEL_59;
  }
  *v10 = *v13;
  *v13 = v10;
  *(_QWORD *)(v23 + 8 * v6) = v13;
  if (*v10)
  {
    v25 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v25 >= v7)
        v25 %= v7;
    }
    else
    {
      v25 &= v7 - 1;
    }
    v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_58;
  }
LABEL_59:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_19C317148(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C2EC960((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19C31715C(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  size_t v14;
  char *v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  char *v24;
  const void *v25;
  const void *v26;

  v5 = *(char **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (a2 > (v4 - (uint64_t)v5) >> 3)
  {
    v6 = *(char **)a1;
    v7 = (uint64_t)&v5[-*(_QWORD *)a1];
    v8 = v7 >> 3;
    v9 = (v7 >> 3) + a2;
    if (v9 >> 61)
      sub_19C2A18E8();
    v10 = v4 - (_QWORD)v6;
    if (v10 >> 2 > v9)
      v9 = v10 >> 2;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 >> 61)
        sub_19C2A143C();
      v12 = (char *)operator new(8 * v11);
    }
    else
    {
      v12 = 0;
    }
    v13 = &v12[8 * v8];
    v14 = 8 * a2;
    v15 = &v12[8 * v11];
    bzero(v13, v14);
    v16 = &v13[v14];
    if (v5 == v6)
    {
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v16;
      *(_QWORD *)(a1 + 16) = v15;
      goto LABEL_29;
    }
    v17 = v5 - v6 - 8;
    if (v17 > 0x77
      && (&v12[v7 - (v17 & 0xFFFFFFFFFFFFFFF8) - 8] >= v5 || &v5[-(v17 & 0xFFFFFFFFFFFFFFF8) - 8] >= v13))
    {
      v18 = (v17 >> 3) + 1;
      v13 -= 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
      v19 = v5 - 32;
      v20 = &v12[8 * v8 - 16];
      v21 = v18 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v22 = *((_OWORD *)v19 + 1);
        *((_OWORD *)v20 - 1) = *(_OWORD *)v19;
        *(_OWORD *)v20 = v22;
        *(_OWORD *)v19 = 0uLL;
        *((_OWORD *)v19 + 1) = 0uLL;
        v19 -= 32;
        v20 -= 32;
        v21 -= 4;
      }
      while (v21);
      if (v18 == (v18 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_24;
      v5 -= 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
    }
    do
    {
      v23 = *((_QWORD *)v5 - 1);
      v5 -= 8;
      *((_QWORD *)v13 - 1) = v23;
      v13 -= 8;
      *(_QWORD *)v5 = 0;
    }
    while (v5 != v6);
LABEL_24:
    v5 = *(char **)a1;
    v24 = *(char **)(a1 + 8);
    *(_QWORD *)a1 = v13;
    *(_QWORD *)(a1 + 8) = v16;
    *(_QWORD *)(a1 + 16) = v15;
    while (v24 != v5)
    {
      v26 = (const void *)*((_QWORD *)v24 - 1);
      v24 -= 8;
      v25 = v26;
      if (v26)
        CFRelease(v25);
    }
LABEL_29:
    if (v5)
      operator delete(v5);
    return;
  }
  if (a2)
  {
    bzero(*(void **)(a1 + 8), 8 * a2);
    v5 += 8 * a2;
  }
  *(_QWORD *)(a1 + 8) = v5;
}

void sub_19C31733C(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  _DWORD *v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  unint64_t v21;
  char *v22;
  _QWORD *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  _DWORD *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _OWORD *v35;
  char *v36;
  uint64_t v37;
  __int128 v38;
  int v39;
  unint64_t v40;
  uint64_t v41;
  void **v42;
  unint64_t v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;

  v7 = a1;
  v45 = a3;
  v46 = a2;
  v8 = *(_QWORD *)(a1 + 24);
  v9 = (*(_QWORD *)(a1 + 32) - v8) >> 5;
  v44 = sub_19C316E5C(a1 + 88, a2, &v46)[3];
  v7 += 48;
  v10 = sub_19C316B5C(v7, a2, &v46);
  v11 = sub_19C316B5C(v7, a3, &v45);
  v42 = (void **)(v11 + 3);
  v11[4] = v11[3];
  v12 = v10[3];
  v13 = (v10[4] - v12) >> 2;
  if (v13 >= v9)
    v13 = v9;
  if (v13)
  {
    v14 = v11;
    v15 = 0;
    v40 = v9;
    v41 = v8;
    while (1)
    {
      v18 = *(_QWORD *)(a4 + 24);
      if (!v18)
        sub_19C2CCC60();
      v19 = (*(uint64_t (**)(uint64_t, unint64_t, unint64_t, unint64_t))(*(_QWORD *)v18 + 48))(v18, v8 + 32 * v15, v44 + 8 * v15, v12 + 4 * v15);
      v20 = v19;
      v22 = (char *)v14[4];
      v21 = v14[5];
      if ((unint64_t)v22 >= v21)
        break;
      *(_DWORD *)v22 = v19;
      v16 = v22 + 4;
LABEL_6:
      v14[4] = v16;
      ++v15;
      v12 = v10[3];
      v17 = (v10[4] - v12) >> 2;
      if (v17 >= v9)
        v17 = v9;
      if (v17 <= v15)
        return;
    }
    v23 = v10;
    v24 = a4;
    v25 = (char *)*v42;
    v26 = v22 - (_BYTE *)*v42;
    v27 = v26 >> 2;
    v28 = (v26 >> 2) + 1;
    if (v28 >> 62)
      sub_19C2A18E8();
    v29 = v21 - (_QWORD)v25;
    if (v29 >> 1 > v28)
      v28 = v29 >> 1;
    if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFFCLL)
      v28 = 0x3FFFFFFFFFFFFFFFLL;
    v43 = v28;
    if (v28)
    {
      if (v28 >> 62)
        sub_19C2A143C();
      v30 = operator new(4 * v28);
    }
    else
    {
      v30 = 0;
    }
    v31 = &v30[4 * v27];
    *v31 = v20;
    v16 = v31 + 1;
    if (v22 == v25)
    {
      a4 = v24;
      v10 = v23;
    }
    else
    {
      v32 = v22 - 4 - v25;
      if (v32 >= 0x2C)
      {
        v33 = v22 - &v30[v26];
        a4 = v24;
        v10 = v23;
        if (v33 >= 0x20)
        {
          v34 = (v32 >> 2) + 1;
          v35 = &v30[4 * v27 - 16];
          v36 = v22 - 16;
          v37 = v34 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v38 = *(_OWORD *)v36;
            *(v35 - 1) = *((_OWORD *)v36 - 1);
            *v35 = v38;
            v35 -= 2;
            v36 -= 32;
            v37 -= 8;
          }
          while (v37);
          v31 -= v34 & 0x7FFFFFFFFFFFFFF8;
          v22 -= 4 * (v34 & 0x7FFFFFFFFFFFFFF8);
          if (v34 == (v34 & 0x7FFFFFFFFFFFFFF8))
            goto LABEL_29;
        }
      }
      else
      {
        a4 = v24;
        v10 = v23;
      }
      do
      {
        v39 = *((_DWORD *)v22 - 1);
        v22 -= 4;
        *--v31 = v39;
      }
      while (v22 != v25);
    }
LABEL_29:
    v14[3] = v31;
    v14[4] = v16;
    v14[5] = &v30[4 * v43];
    if (v25)
      operator delete(v25);
    v9 = v40;
    v8 = v41;
    goto LABEL_6;
  }
}

void sub_19C3175C0(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v5 = *(char **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v6 = v5;
  if (a2 <= (v4 - (uint64_t)v5) >> 3)
  {
    if (a2)
    {
      bzero(v5, 8 * a2);
      v6 = &v5[8 * a2];
    }
    *(_QWORD *)(a1 + 8) = v6;
  }
  else
  {
    v7 = *(char **)a1;
    v8 = (uint64_t)&v5[-*(_QWORD *)a1];
    v9 = v8 >> 3;
    v10 = (v8 >> 3) + a2;
    if (v10 >> 61)
      sub_19C2A18E8();
    v11 = v4 - (_QWORD)v7;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 61)
        sub_19C2A143C();
      v13 = operator new(8 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[8 * v9];
    v15 = 8 * a2;
    v16 = &v13[8 * v12];
    bzero(v14, v15);
    v17 = &v14[v15];
    if (v5 != v7)
    {
      v18 = v5 - v7 - 8;
      if (v18 < 0x58)
        goto LABEL_29;
      if ((unint64_t)(v5 - v13 - v8) < 0x20)
        goto LABEL_29;
      v19 = (v18 >> 3) + 1;
      v6 = &v5[-8 * (v19 & 0x3FFFFFFFFFFFFFFCLL)];
      v20 = &v13[8 * v9 - 16];
      v21 = v5 - 16;
      v22 = v19 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v23 = *(_OWORD *)v21;
        *(v20 - 1) = *((_OWORD *)v21 - 1);
        *v20 = v23;
        v20 -= 2;
        v21 -= 32;
        v22 -= 4;
      }
      while (v22);
      v14 -= 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
      if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_29:
        do
        {
          v24 = *((_QWORD *)v6 - 1);
          v6 -= 8;
          *((_QWORD *)v14 - 1) = v24;
          v14 -= 8;
        }
        while (v6 != v7);
      }
    }
    *(_QWORD *)a1 = v14;
    *(_QWORD *)(a1 + 8) = v17;
    *(_QWORD *)(a1 + 16) = v16;
    if (v7)
      operator delete(v7);
  }
}

uint64_t *sub_19C317760(_QWORD *a1, uint64_t a2)
{
  _BYTE *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t **v11;
  uint64_t *v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *result;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  v2 = (_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v5 = v4;
  }
  v6 = sub_19C2A0F2C((uint64_t)&v25, (uint64_t *)a2, v5);
  v7 = (int8x8_t)a1[1];
  if (v7)
  {
    v8 = v6;
    v9 = (uint8x8_t)vcnt_s8(v7);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v10 = v6;
      if (v6 >= *(_QWORD *)&v7)
        v10 = v6 % *(_QWORD *)&v7;
    }
    else
    {
      v10 = (*(_QWORD *)&v7 - 1) & v6;
    }
    v11 = *(uint64_t ***)(*a1 + 8 * v10);
    if (v11)
    {
      v12 = *v11;
      if (*v11)
      {
        v13 = v2[23];
        if (v13 >= 0)
          v14 = v2[23];
        else
          v14 = *((_QWORD *)v2 + 1);
        if (v13 < 0)
          v2 = *(_BYTE **)v2;
        if (v9.u32[0] < 2uLL)
        {
          v15 = *(_QWORD *)&v7 - 1;
          while (1)
          {
            v21 = v12[1];
            if (v21 == v8)
            {
              v22 = *((unsigned __int8 *)v12 + 39);
              if ((v22 & 0x80u) == 0)
                v23 = *((unsigned __int8 *)v12 + 39);
              else
                v23 = v12[3];
              if (v23 == v14)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v12[2], v2, v12[3]))
                    return v12;
                }
                else
                {
                  if (!*((_BYTE *)v12 + 39))
                    return v12;
                  v24 = 0;
                  while (*((unsigned __int8 *)v12 + v24 + 16) == v2[v24])
                  {
                    if (v22 == ++v24)
                      return v12;
                  }
                }
              }
            }
            else if ((v21 & v15) != v10)
            {
              return 0;
            }
            result = 0;
            v12 = (uint64_t *)*v12;
            if (!v12)
              return result;
          }
        }
        while (1)
        {
          v17 = v12[1];
          if (v17 == v8)
          {
            v18 = *((unsigned __int8 *)v12 + 39);
            if ((v18 & 0x80u) == 0)
              v19 = *((unsigned __int8 *)v12 + 39);
            else
              v19 = v12[3];
            if (v19 == v14)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v12[2], v2, v12[3]))
                  return v12;
              }
              else
              {
                if (!*((_BYTE *)v12 + 39))
                  return v12;
                v20 = 0;
                while (*((unsigned __int8 *)v12 + v20 + 16) == v2[v20])
                {
                  if (v18 == ++v20)
                    return v12;
                }
              }
            }
          }
          else
          {
            if (v17 >= *(_QWORD *)&v7)
              v17 %= *(_QWORD *)&v7;
            if (v17 != v10)
              return 0;
          }
          result = 0;
          v12 = (uint64_t *)*v12;
          if (!v12)
            return result;
        }
      }
    }
  }
  return 0;
}

uint64_t *sub_19C31795C(uint64_t a1, uint64_t a2, __int128 **a3)
{
  unint64_t v3;
  _BYTE *v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t **v13;
  uint64_t *v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _BYTE *v26;
  __int128 *v27;
  __int128 v28;
  float v29;
  float v30;
  _BOOL8 v31;
  unint64_t v32;
  unint64_t v33;
  size_t prime;
  int8x8_t v35;
  unint64_t v36;
  uint8x8_t v37;
  uint64_t v38;
  _QWORD *v39;
  unint64_t v40;
  _QWORD v42[2];
  char v43;

  v5 = (_BYTE *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v8 = v7;
  }
  v9 = sub_19C2A0F2C((uint64_t)v42, (uint64_t *)a2, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v3 = v9;
      if (v9 >= v11)
        v3 = v9 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v9;
    }
    v13 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        v15 = v5[23];
        if (v15 >= 0)
          v16 = v5[23];
        else
          v16 = *((_QWORD *)v5 + 1);
        if (v15 < 0)
          v5 = *(_BYTE **)v5;
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v21 = v14[1];
            if (v21 == v10)
            {
              v22 = *((unsigned __int8 *)v14 + 39);
              if ((v22 & 0x80u) == 0)
                v23 = *((unsigned __int8 *)v14 + 39);
              else
                v23 = v14[3];
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v14[2], v5, v14[3]))
                    return v14;
                }
                else
                {
                  if (!*((_BYTE *)v14 + 39))
                    return v14;
                  v24 = 0;
                  while (*((unsigned __int8 *)v14 + v24 + 16) == v5[v24])
                  {
                    if (v22 == ++v24)
                      return v14;
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            v14 = (uint64_t *)*v14;
            if (!v14)
              goto LABEL_51;
          }
        }
        do
        {
          v17 = v14[1];
          if (v17 == v10)
          {
            v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0)
              v19 = *((unsigned __int8 *)v14 + 39);
            else
              v19 = v14[3];
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v14[2], v5, v14[3]))
                  return v14;
              }
              else
              {
                if (!*((_BYTE *)v14 + 39))
                  return v14;
                v20 = 0;
                while (*((unsigned __int8 *)v14 + v20 + 16) == v5[v20])
                {
                  if (v18 == ++v20)
                    return v14;
                }
              }
            }
          }
          else
          {
            if (v17 >= v11)
              v17 %= v11;
            if (v17 != v3)
              break;
          }
          v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  v25 = (char *)operator new(0x30uLL);
  v42[0] = v25;
  v42[1] = a1 + 16;
  v43 = 0;
  *(_QWORD *)v25 = 0;
  *((_QWORD *)v25 + 1) = v10;
  v26 = v25 + 16;
  v27 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    sub_19C2B5238(v26, *(void **)v27, *((_QWORD *)v27 + 1));
  }
  else
  {
    v28 = *v27;
    *((_QWORD *)v25 + 4) = *((_QWORD *)v27 + 2);
    *(_OWORD *)v26 = v28;
  }
  *((_DWORD *)v25 + 10) = 0;
  v43 = 1;
  v29 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v30 = *(float *)(a1 + 32);
  if (!v11 || (float)(v30 * (float)v11) < v29)
  {
    v31 = 1;
    if (v11 >= 3)
      v31 = (v11 & (v11 - 1)) != 0;
    v32 = v31 | (2 * v11);
    v33 = vcvtps_u32_f32(v29 / v30);
    if (v32 <= v33)
      prime = v33;
    else
      prime = v32;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v35 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v35)
      goto LABEL_66;
    if (prime < *(_QWORD *)&v35)
    {
      v36 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v35 < 3uLL || (v37 = (uint8x8_t)vcnt_s8(v35), v37.i16[0] = vaddlv_u8(v37), v37.u32[0] > 1uLL))
      {
        v36 = std::__next_prime(v36);
      }
      else
      {
        v38 = 1 << -(char)__clz(v36 - 1);
        if (v36 >= 2)
          v36 = v38;
      }
      if (prime <= v36)
        prime = v36;
      if (prime < *(_QWORD *)&v35)
LABEL_66:
        sub_19C2EC6BC(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v3 = v10 % v11;
      else
        v3 = v10;
    }
    else
    {
      v3 = (v11 - 1) & v10;
    }
  }
  v39 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v39)
  {
    *(_QWORD *)v42[0] = *v39;
    *v39 = v42[0];
  }
  else
  {
    *(_QWORD *)v42[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v42[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v42[0])
    {
      v40 = *(_QWORD *)(*(_QWORD *)v42[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v40 >= v11)
          v40 %= v11;
      }
      else
      {
        v40 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v40) = v42[0];
    }
  }
  v14 = (uint64_t *)v42[0];
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_19C317D68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C30CBE8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19C317D84(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  _QWORD *v9;
  char *v10;
  uint64_t *v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _BYTE *v16;
  char *v17;
  unint64_t v18;
  char *v19;
  int v20;
  uint64_t v21;
  _OWORD *v22;
  char *v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  __int128 v41;
  const void *v42;
  int64_t v43;
  char *v44;
  unint64_t v45;
  size_t v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  __int128 *v51;
  __int128 v52;
  uint64_t *v53;
  uint64_t v54;
  double v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  char *v61;
  void *v62;
  char *v63;
  uint64_t v64;
  char *v65;
  int v66;
  double *v67;
  double *v68;
  int *v69;
  uint64_t v70;
  unsigned int **v71;
  unsigned int *v72;
  int *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  double v77;
  uint64_t v78;
  double *v79;
  uint64_t v80;
  unsigned int **v81;
  unsigned int *v82;
  int *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  double v87;
  uint64_t v88;
  double *v89;
  double *v90;
  double v91;
  double *v92;
  double v93;
  BOOL v94;
  uint64_t v95;
  double v96;
  double v97;
  uint64_t v98;
  double v99;
  uint64_t v100;
  int v101;
  double v102;
  uint64_t v103;
  signed int v104;
  double v105;
  double v106;
  uint64_t v107;
  __int128 *v108;
  __int128 v109;
  char *v110;
  _QWORD *v112;
  void *v114[2];
  void *v115[2];
  int *v116;
  void *__p[2];
  uint64_t v118;
  void *__dst[2];
  uint64_t v120;
  char *v121;
  char *v122;
  char *v123;
  __int128 v124;
  char *v125;

  v3 = a3;
  __p[0] = 0;
  v116 = 0;
  *(_OWORD *)v115 = 0u;
  *(_OWORD *)v114 = 0u;
  v5 = *(_QWORD *)(a3 + 24);
  if (v5 != *(_QWORD *)(a3 + 32))
  {
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = (_QWORD *)(a2 + 144);
    v10 = 0;
    v112 = (_QWORD *)(a2 + 144);
    while (1)
    {
      v11 = sub_19C318A7C(v9, v5);
      if (!v11)
        goto LABEL_4;
      v12 = *((_DWORD *)v11 + 10);
      if (v12 < 0)
        goto LABEL_4;
      if (v6 >= v8)
        break;
      *(_DWORD *)v6 = v12;
      v6 += 4;
      v10 = v6;
LABEL_4:
      v5 += 24;
      if (v5 == *(_QWORD *)(v3 + 32))
      {
        v114[1] = v10;
        v114[0] = v7;
        goto LABEL_33;
      }
    }
    v13 = (v6 - v7) >> 2;
    v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 62)
      sub_19C2A18E8();
    if ((v8 - v7) >> 1 > v14)
      v14 = (v8 - v7) >> 1;
    if ((unint64_t)(v8 - v7) >= 0x7FFFFFFFFFFFFFFCLL)
      v15 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v15 = v14;
    if (v15)
    {
      if (v15 >> 62)
        sub_19C2A143C();
      v16 = operator new(4 * v15);
    }
    else
    {
      v16 = 0;
    }
    v17 = &v16[4 * v13];
    *(_DWORD *)v17 = v12;
    if (v6 == v7)
    {
      v3 = a3;
      v10 = v17 + 4;
      v8 = &v16[4 * v15];
      if (!v7)
        goto LABEL_25;
      goto LABEL_24;
    }
    v18 = v6 - 4 - v7;
    if (v18 >= 0x2C && (unint64_t)(v7 - v16) >= 0x20)
    {
      v21 = (v18 >> 2) + 1;
      v19 = &v6[-4 * (v21 & 0x7FFFFFFFFFFFFFF8)];
      v22 = &v16[4 * v13 - 16];
      v23 = v6 - 16;
      v24 = v21 & 0x7FFFFFFFFFFFFFF8;
      v10 = v17 + 4;
      do
      {
        v25 = *(_OWORD *)v23;
        *(v22 - 1) = *((_OWORD *)v23 - 1);
        *v22 = v25;
        v22 -= 2;
        v23 -= 32;
        v24 -= 8;
      }
      while (v24);
      v17 -= 4 * (v21 & 0x7FFFFFFFFFFFFFF8);
      v3 = a3;
      if (v21 == (v21 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_23:
        v8 = &v16[4 * v15];
        if (!v7)
        {
LABEL_25:
          v6 = v10;
          v7 = v17;
          v9 = v112;
          goto LABEL_4;
        }
LABEL_24:
        operator delete(v7);
        goto LABEL_25;
      }
    }
    else
    {
      v19 = v6;
      v3 = a3;
      v10 = v17 + 4;
    }
    do
    {
      v20 = *((_DWORD *)v19 - 1);
      v19 -= 4;
      *((_DWORD *)v17 - 1) = v20;
      v17 -= 4;
    }
    while (v19 != v7);
    goto LABEL_23;
  }
LABEL_33:
  v26 = *(_QWORD *)(v3 + 48);
  if (v26 != *(_QWORD *)(v3 + 56))
  {
    v27 = 0;
    v28 = 0;
    v29 = 0;
    do
    {
      v30 = sub_19C318A7C((_QWORD *)(a2 + 144), v26);
      if (v30)
      {
        v31 = *((_DWORD *)v30 + 10);
        if ((v31 & 0x80000000) == 0)
        {
          v32 = *(_QWORD *)(v26 + 24);
          if (v29 < v28)
          {
            *(_DWORD *)v29 = v31;
            *((_QWORD *)v29 + 1) = v32;
            v29 += 16;
          }
          else
          {
            v33 = (v29 - v27) >> 4;
            v34 = v33 + 1;
            if ((unint64_t)(v33 + 1) >> 60)
              sub_19C2A18E8();
            if ((v28 - v27) >> 3 > v34)
              v34 = (v28 - v27) >> 3;
            if ((unint64_t)(v28 - v27) >= 0x7FFFFFFFFFFFFFF0)
              v35 = 0xFFFFFFFFFFFFFFFLL;
            else
              v35 = v34;
            if (v35)
            {
              if (v35 >> 60)
                sub_19C2A143C();
              v36 = (char *)operator new(16 * v35);
            }
            else
            {
              v36 = 0;
            }
            v37 = &v36[16 * v33];
            *(_DWORD *)v37 = v31;
            *((_QWORD *)v37 + 1) = v32;
            if (v29 == v27)
            {
              v39 = &v36[16 * v33];
            }
            else
            {
              v38 = &v36[16 * v33];
              do
              {
                v39 = v38 - 16;
                *((_OWORD *)v38 - 1) = *((_OWORD *)v29 - 1);
                v29 -= 16;
                v38 -= 16;
              }
              while (v29 != v27);
            }
            v28 = &v36[16 * v35];
            v29 = v37 + 16;
            if (v27)
              operator delete(v27);
            v27 = v39;
            v3 = a3;
          }
        }
      }
      v26 += 32;
    }
    while (v26 != *(_QWORD *)(v3 + 56));
    v116 = (int *)v29;
    v115[1] = v27;
  }
  v40 = *(_QWORD *)(a2 + 424);
  if (!v40)
    goto LABEL_101;
  sub_19C317D84(&v124, v40, v3);
  *(_OWORD *)__p = v124;
  v41 = v124;
  v118 = (uint64_t)v125;
  v124 = 0uLL;
  v125 = 0;
  v42 = (const void *)v41;
  v43 = *((_QWORD *)&v41 + 1) - v41;
  if (*((_QWORD *)&v41 + 1) == (_QWORD)v41)
  {
    v44 = 0;
  }
  else
  {
    if (v43 < 0)
      sub_19C2A18E8();
    v44 = (char *)operator new(*((_QWORD *)&v41 + 1) - v41);
    *(_QWORD *)&v124 = v44;
    v125 = &v44[8 * (v43 >> 3)];
    memcpy(v44, v42, v43);
    *((_QWORD *)&v124 + 1) = &v44[8 * (v43 >> 3)];
  }
  v45 = *(int *)(a2 + 272);
  v122 = 0;
  v123 = 0;
  v121 = 0;
  if (!(_DWORD)v45)
  {
    if (v44)
      goto LABEL_100;
    goto LABEL_101;
  }
  if ((v45 & 0x80000000) != 0)
    sub_19C2A18E8();
  v46 = 8 * v45;
  v47 = (char *)operator new(8 * v45);
  v121 = v47;
  v123 = &v47[8 * v45];
  bzero(v47, 8 * v45);
  v48 = 0;
  v49 = 0;
  v110 = v123;
  v122 = v123;
  do
  {
    *(_QWORD *)&v47[8 * v49] = 0;
    v50 = *(_QWORD *)(a2 + 112);
    if ((uint64_t)v49 >= (int)(-1431655765 * ((unint64_t)(*(_QWORD *)(a2 + 120) - v50) >> 3)))
      __assert_rtn("Str", "maxent.h", 235, "id >= 0 && id < (int)id2str.size()");
    v51 = (__int128 *)(v50 + v48);
    if (*((char *)v51 + 23) < 0)
    {
      sub_19C2B5238(__dst, *(void **)v51, *((_QWORD *)v51 + 1));
    }
    else
    {
      v52 = *v51;
      v120 = *((_QWORD *)v51 + 2);
      *(_OWORD *)__dst = v52;
    }
    v53 = sub_19C318A7C((_QWORD *)(*(_QWORD *)(a2 + 424) + 72), (uint64_t)__dst);
    if (!v53 || (v54 = *((int *)v53 + 10), (_DWORD)v54 == -1))
    {
      if (*(double *)&v47[8 * v49] != 0.0)
        goto LABEL_78;
LABEL_77:
      *(_QWORD *)&v47[8 * v49] = 0x3F50624DD2F1A9FCLL;
      goto LABEL_78;
    }
    v55 = *(double *)&v44[8 * v54];
    *(double *)&v47[8 * v49] = v55;
    if (v55 == 0.0)
      goto LABEL_77;
LABEL_78:
    if (SHIBYTE(v120) < 0)
      operator delete(__dst[0]);
    ++v49;
    v48 += 24;
  }
  while (v49 < v45);
  v56 = v118;
  v57 = __p[0];
  if (v45 > (int64_t)(v118 - (unint64_t)__p[0]) >> 3)
  {
    if (__p[0])
    {
      operator delete(__p[0]);
      v56 = 0;
    }
    v58 = v56 >> 2;
    if (v56 >> 2 <= v45)
      v58 = v45;
    if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF8)
      v59 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v59 = v58;
    if (v59 >> 61)
      sub_19C2A18E8();
    __p[0] = operator new(8 * v59);
    memcpy(__p[0], v47, 8 * v45);
    goto LABEL_99;
  }
  v60 = ((char *)__p[1] - (char *)__p[0]) >> 3;
  if (v60 >= v45)
  {
    v62 = __p[0];
    v63 = v47;
    goto LABEL_98;
  }
  v61 = &v47[8 * v60];
  if (__p[1] != __p[0])
  {
    memmove(__p[0], v47, (char *)__p[1] - (char *)__p[0]);
    v57 = __p[1];
  }
  v46 = v110 - v61;
  if (v61 != v110)
  {
    v62 = v57;
    v63 = v61;
LABEL_98:
    memmove(v62, v63, v46);
  }
LABEL_99:
  operator delete(v47);
  if (v44)
LABEL_100:
    operator delete(v44);
LABEL_101:
  v64 = *(int *)(a2 + 272);
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  if ((_DWORD)v64)
  {
    if ((v64 & 0x80000000) != 0)
      sub_19C2A18E8();
    v65 = (char *)operator new(8 * v64);
    *a1 = v65;
    a1[2] = &v65[8 * v64];
    bzero(v65, 8 * v64);
    a1[1] = &v65[8 * v64];
    v66 = v64;
    v124 = 0uLL;
    v125 = 0;
    v67 = (double *)operator new(8 * v64);
    v68 = &v67[v64];
    bzero(v67, 8 * v64);
  }
  else
  {
    v65 = 0;
    v66 = 0;
    v68 = 0;
    v67 = 0;
    v124 = 0uLL;
    v125 = 0;
  }
  v69 = (int *)v114[0];
  if (v114[0] != v114[1])
  {
    v70 = *(_QWORD *)(a2 + 328);
    do
    {
      v71 = (unsigned int **)(v70 + 24 * *v69);
      v72 = *v71;
      v73 = (int *)v71[1];
      if (v72 != (unsigned int *)v73)
      {
        v74 = *(_QWORD *)(a2 + 184);
        do
        {
          v75 = (int)*v72;
          if ((v75 & 0x80000000) != 0
            || (v76 = *(_QWORD *)(a2 + 248), (int)v75 >= (int)((unint64_t)(*(_QWORD *)(a2 + 256) - v76) >> 2)))
          {
            __assert_rtn("Feature", "maxent.h", 178, "id >= 0 && id < (int)id2mef.size()");
          }
          v77 = *(double *)(v74 + 8 * v75);
          v78 = *(unsigned __int8 *)(v76 + 4 * *v72);
          v67[v78] = v67[v78] + v77;
          ++v72;
        }
        while (v72 != (unsigned int *)v73);
      }
      ++v69;
    }
    while (v69 != v114[1]);
  }
  v79 = (double *)v115[1];
  if (v115[1] != v116)
  {
    v80 = *(_QWORD *)(a2 + 328);
    do
    {
      v81 = (unsigned int **)(v80 + 24 * *(int *)v79);
      v82 = *v81;
      v83 = (int *)v81[1];
      if (v82 != (unsigned int *)v83)
      {
        v84 = *(_QWORD *)(a2 + 184);
        do
        {
          v85 = (int)*v82;
          if ((v85 & 0x80000000) != 0
            || (v86 = *(_QWORD *)(a2 + 248), (int)v85 >= (int)((unint64_t)(*(_QWORD *)(a2 + 256) - v86) >> 2)))
          {
            __assert_rtn("Feature", "maxent.h", 178, "id >= 0 && id < (int)id2mef.size()");
          }
          v87 = *(double *)(v84 + 8 * v85);
          v88 = *(unsigned __int8 *)(v86 + 4 * *v82);
          v67[v88] = v67[v88] + v79[1] * v87;
          ++v82;
        }
        while (v82 != (unsigned int *)v83);
      }
      v79 += 2;
    }
    while (v79 != (double *)v116);
  }
  v89 = v67;
  if (v67 != v68)
  {
    v90 = v67 + 1;
    v89 = v67;
    if (v67 + 1 != v68)
    {
      v91 = *v67;
      v89 = v67;
      v92 = v67 + 1;
      do
      {
        v93 = *v92++;
        v94 = v91 < v93;
        v91 = fmax(v91, v93);
        if (v94)
          v89 = v90;
        v90 = v92;
      }
      while (v92 != v68);
    }
  }
  if ((int)v64 >= 1)
  {
    v95 = 0;
    v96 = 0.0;
    v97 = fmax(*v89 + -700.0, 0.0);
    v98 = *(_QWORD *)(a2 + 424);
    do
    {
      v99 = exp(v67[v95] - v97);
      if (v98)
        v99 = *(double *)((char *)__p[0] + v95 * 8) * v99;
      if (v99 == 0.0)
        __assert_rtn("conditional_probability", "maxent.cpp", 126, "prod != 0");
      *(double *)&v65[v95 * 8] = v99;
      v96 = v99 + v96;
      ++v95;
    }
    while (v64 != v95);
    v100 = 0;
    v101 = 0;
    do
    {
      v102 = *(double *)&v65[8 * v100] * (1.0 / v96);
      *(double *)&v65[8 * v100] = v102;
      if (v102 > *(double *)&v65[8 * v101])
        v101 = v100;
      ++v100;
    }
    while (v64 != v100);
    v3 = a3;
    if (v101 < 0)
      __assert_rtn("conditional_probability", "maxent.cpp", 134, "max_label >= 0");
  }
  if (v67)
    operator delete(v67);
  if ((_DWORD)v64)
  {
    v103 = 0;
    v104 = 0;
    v105 = 0.0;
    do
    {
      v106 = *(double *)&v65[8 * v103];
      if (v106 > v105)
        v104 = v103;
      v105 = fmax(v106, v105);
      ++v103;
    }
    while (v66 != v103);
    if (v104 < 0)
LABEL_167:
      __assert_rtn("Str", "maxent.h", 235, "id >= 0 && id < (int)id2str.size()");
  }
  else
  {
    v104 = 0;
  }
  v107 = *(_QWORD *)(a2 + 112);
  if (v104 >= (int)(-1431655765 * ((unint64_t)(*(_QWORD *)(a2 + 120) - v107) >> 3)))
    goto LABEL_167;
  v108 = (__int128 *)(v107 + 24 * v104);
  if (*((char *)v108 + 23) < 0)
  {
    sub_19C2B5238(&v124, *(void **)v108, *((_QWORD *)v108 + 1));
  }
  else
  {
    v109 = *v108;
    v125 = (char *)*((_QWORD *)v108 + 2);
    v124 = v109;
  }
  if (*(char *)(v3 + 23) < 0)
    operator delete(*(void **)v3);
  *(_OWORD *)v3 = v124;
  *(_QWORD *)(v3 + 16) = v125;
  if (__p[0])
    operator delete(__p[0]);
  if (v115[1])
    operator delete(v115[1]);
  if (v114[0])
    operator delete(v114[0]);
}

void sub_19C318850(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  void *v27;
  void *v28;

  operator delete(v28);
  if (v27)
    operator delete(v27);
  sub_19C318A2C(&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_19C318964(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = *(_QWORD *)(a1 + 48);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 56);
    v4 = *(void **)(a1 + 48);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 9) < 0)
          operator delete(*(void **)(v3 - 32));
        v3 -= 32;
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 48);
    }
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v4);
  }
  v5 = *(_QWORD *)(a1 + 24);
  if (v5)
  {
    v6 = *(_QWORD *)(a1 + 32);
    v7 = *(void **)(a1 + 24);
    if (v6 != v5)
    {
      do
      {
        if (*(char *)(v6 - 1) < 0)
          operator delete(*(void **)(v6 - 24));
        v6 -= 24;
      }
      while (v6 != v5);
      v7 = *(void **)(a1 + 24);
    }
    *(_QWORD *)(a1 + 32) = v5;
    operator delete(v7);
  }
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *sub_19C318A2C(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[1];
  if (v4)
  {
    a1[2] = v4;
    operator delete(v4);
  }
  return a1;
}

uint64_t *sub_19C318A7C(_QWORD *a1, uint64_t a2)
{
  _BYTE *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t **v11;
  uint64_t *v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *result;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  v2 = (_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v5 = v4;
  }
  v6 = sub_19C2A0F2C((uint64_t)&v25, (uint64_t *)a2, v5);
  v7 = (int8x8_t)a1[1];
  if (v7)
  {
    v8 = v6;
    v9 = (uint8x8_t)vcnt_s8(v7);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v10 = v6;
      if (v6 >= *(_QWORD *)&v7)
        v10 = v6 % *(_QWORD *)&v7;
    }
    else
    {
      v10 = (*(_QWORD *)&v7 - 1) & v6;
    }
    v11 = *(uint64_t ***)(*a1 + 8 * v10);
    if (v11)
    {
      v12 = *v11;
      if (*v11)
      {
        v13 = v2[23];
        if (v13 >= 0)
          v14 = v2[23];
        else
          v14 = *((_QWORD *)v2 + 1);
        if (v13 < 0)
          v2 = *(_BYTE **)v2;
        if (v9.u32[0] < 2uLL)
        {
          v15 = *(_QWORD *)&v7 - 1;
          while (1)
          {
            v21 = v12[1];
            if (v8 == v21)
            {
              v22 = *((unsigned __int8 *)v12 + 39);
              if ((v22 & 0x80u) == 0)
                v23 = *((unsigned __int8 *)v12 + 39);
              else
                v23 = v12[3];
              if (v23 == v14)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v12[2], v2, v12[3]))
                    return v12;
                }
                else
                {
                  if (!*((_BYTE *)v12 + 39))
                    return v12;
                  v24 = 0;
                  while (*((unsigned __int8 *)v12 + v24 + 16) == v2[v24])
                  {
                    if (v22 == ++v24)
                      return v12;
                  }
                }
              }
            }
            else if ((v21 & v15) != v10)
            {
              return 0;
            }
            result = 0;
            v12 = (uint64_t *)*v12;
            if (!v12)
              return result;
          }
        }
        while (1)
        {
          v17 = v12[1];
          if (v8 == v17)
          {
            v18 = *((unsigned __int8 *)v12 + 39);
            if ((v18 & 0x80u) == 0)
              v19 = *((unsigned __int8 *)v12 + 39);
            else
              v19 = v12[3];
            if (v19 == v14)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v12[2], v2, v12[3]))
                  return v12;
              }
              else
              {
                if (!*((_BYTE *)v12 + 39))
                  return v12;
                v20 = 0;
                while (*((unsigned __int8 *)v12 + v20 + 16) == v2[v20])
                {
                  if (v18 == ++v20)
                    return v12;
                }
              }
            }
          }
          else
          {
            if (v17 >= *(_QWORD *)&v7)
              v17 %= *(_QWORD *)&v7;
            if (v17 != v10)
              return 0;
          }
          result = 0;
          v12 = (uint64_t *)*v12;
          if (!v12)
            return result;
        }
      }
    }
  }
  return 0;
}

char *sub_19C318C78(char **a1, uint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;
  char *v14;
  void **v15;
  char *v17;
  char *v18;
  char *v19;

  v3 = *a1;
  v4 = a1[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_19C2A18E8();
  if (0x5555555555555556 * ((a1[2] - v3) >> 3) > v6)
    v6 = 0x5555555555555556 * ((a1[2] - v3) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3) >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  else
    v8 = v6;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      sub_19C2A143C();
    v9 = (char *)operator new(24 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[24 * v5];
  v17 = v10;
  v18 = v10;
  v19 = &v9[24 * v8];
  if (*(char *)(a2 + 23) < 0)
  {
    sub_19C2B5238(v10, *(void **)a2, *(_QWORD *)(a2 + 8));
    v3 = *a1;
    v4 = a1[1];
    v10 = v17;
    v11 = v18;
  }
  else
  {
    *(_OWORD *)v10 = *(_OWORD *)a2;
    *((_QWORD *)v10 + 2) = *(_QWORD *)(a2 + 16);
    v11 = &v9[24 * v5];
  }
  v12 = v11 + 24;
  if (v4 == v3)
  {
    v14 = v3;
  }
  else
  {
    do
    {
      v13 = *(_OWORD *)(v4 - 24);
      *((_QWORD *)v10 - 1) = *((_QWORD *)v4 - 1);
      *(_OWORD *)(v10 - 24) = v13;
      v10 -= 24;
      *((_QWORD *)v4 - 2) = 0;
      *((_QWORD *)v4 - 1) = 0;
      *((_QWORD *)v4 - 3) = 0;
      v4 -= 24;
    }
    while (v4 != v3);
    v14 = *a1;
    v3 = a1[1];
  }
  *a1 = v10;
  a1[1] = v12;
  a1[2] = v19;
  if (v3 != v14)
  {
    v15 = (void **)(v3 - 24);
    do
    {
      if (*((char *)v15 + 23) < 0)
        operator delete(*v15);
      v15 -= 3;
    }
    while (v15 + 3 != (void **)v14);
    v3 = v14;
  }
  if (v3)
    operator delete(v3);
  return v12;
}

void sub_19C318E2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C318E40((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19C318E40(uint64_t a1)
{
  void **v2;
  void **v3;
  void **v5;

  v3 = *(void ***)(a1 + 8);
  v2 = *(void ***)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      v5 = v2 - 3;
      *(_QWORD *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        v5 = *(void ***)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != v3);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_19C318EA4(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      return a1;
LABEL_5:
    operator delete(*(void **)a1);
    return a1;
  }
  if (*(char *)(a1 + 23) < 0)
    goto LABEL_5;
  return a1;
}

void sub_19C318EF4(uint64_t a1)
{
  sub_19C31B528(a1);
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C318F18(_QWORD *a1, const __CFString *a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  void (__cdecl *v11)(std::__shared_weak_count *__hidden);
  void (__cdecl *on_zero_shared)(std::__shared_count *__hidden);
  uint64_t v13;
  int v14;
  std::__shared_weak_count *v15;
  void *v16;
  std::__shared_weak_count *shared_weak_owners;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BOOL4 v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  unsigned int v32;
  unint64_t *v33;
  unint64_t v34;
  CFIndex Length;
  CFIndex v36;
  uint64_t v37;
  UChar32 CharacterAtIndex;
  int v39;
  BOOL v40;
  void *v42;
  char v43;
  void *__p;
  std::__shared_weak_count *v45;
  char v46;

  sub_19C29CEF8(a2, &v42);
  if (!*(_BYTE *)(a1[29] + 365) || (v6 = (_QWORD *)a1[3], v7 = (_QWORD *)a1[4], v6 == v7))
  {
LABEL_5:
    sub_19C31B408(&__p, (uint64_t)(a1 + 23));
    v9 = (std::__shared_weak_count *)__p;
    v10 = v45;
    if (__p == v45)
    {
      v13 = 0;
      v14 = 1;
      if (!v45)
      {
LABEL_25:
        if (!v14)
        {
LABEL_23:
          v8 = v13;
          goto LABEL_59;
        }
LABEL_26:
        v20 = a1[29];
        if (!*(_BYTE *)(v20 + 365))
        {
          v29 = (_QWORD *)a1[3];
          v30 = (_QWORD *)a1[4];
          if (v29 != v30)
          {
            while (1)
            {
              v8 = (*(uint64_t (**)(_QWORD, const __CFString *, uint64_t))(*(_QWORD *)*v29 + 64))(*v29, a2, a3);
              if ((_DWORD)v8)
                goto LABEL_59;
              if (++v29 == v30)
              {
                v20 = a1[29];
                break;
              }
            }
          }
        }
        if (!*(_BYTE *)(v20 + 192))
        {
LABEL_58:
          v8 = 0;
          goto LABEL_59;
        }
        v21 = a1[6];
        v22 = *(void **)(v21 + 560);
        v23 = *(std::__shared_weak_count **)(v21 + 568);
        __p = v22;
        v45 = v23;
        if (v23)
        {
          p_shared_owners = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldxr(p_shared_owners);
          while (__stxr(v25 + 1, p_shared_owners));
        }
        if (!v22
          || (v8 = (*(uint64_t (**)(void *, const __CFString *, uint64_t))(*(_QWORD *)v22 + 16))(v22, a2, a3),
              !(_DWORD)v8))
        {
          if (!*(_BYTE *)(a1[29] + 192))
            goto LABEL_48;
          v26 = a1[37];
          if (v26)
          {
            v8 = (*(uint64_t (**)(_QWORD, const __CFString *, uint64_t))(**(_QWORD **)(v26 + 16) + 16))(*(_QWORD *)(v26 + 16), a2, a3);
            if ((_DWORD)v8)
              goto LABEL_39;
            if (!*(_BYTE *)(a1[29] + 192))
              goto LABEL_48;
          }
          v27 = a1[38];
          if (v27)
          {
            v8 = (*(uint64_t (**)(_QWORD, const __CFString *, uint64_t))(**(_QWORD **)(v27 + 16) + 16))(*(_QWORD *)(v27 + 16), a2, a3);
            if ((_DWORD)v8)
              goto LABEL_39;
            if (!*(_BYTE *)(a1[29] + 192))
              goto LABEL_48;
          }
          v31 = a1[36];
          if (v31)
            v32 = (*(uint64_t (**)(_QWORD, const __CFString *, uint64_t))(**(_QWORD **)(v31 + 16) + 16))(*(_QWORD *)(v31 + 16), a2, a3);
          else
LABEL_48:
            v32 = 0;
          v28 = v32 != 0;
          if (v32)
            v8 = v32;
          else
            v8 = v13;
          if (!v23)
            goto LABEL_57;
          goto LABEL_53;
        }
LABEL_39:
        v28 = 1;
        if (!v23)
          goto LABEL_57;
LABEL_53:
        v33 = (unint64_t *)&v23->__shared_owners_;
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
LABEL_57:
        if (v28)
          goto LABEL_59;
        goto LABEL_58;
      }
    }
    else
    {
      while (1)
      {
        v11 = v9->~__shared_weak_count_0;
        on_zero_shared = v9->__on_zero_shared;
        if ((char *)v11 != (char *)on_zero_shared)
          break;
LABEL_9:
        v9 = (std::__shared_weak_count *)((char *)v9 + 16);
        if (v9 == v10)
        {
          v13 = 0;
          v14 = 1;
          v10 = (std::__shared_weak_count *)__p;
          if (__p)
            goto LABEL_13;
          goto LABEL_25;
        }
      }
      while (1)
      {
        v13 = (*(uint64_t (**)(_QWORD, const __CFString *, uint64_t))(**(_QWORD **)v11 + 16))(*(_QWORD *)v11, a2, a3);
        if ((_DWORD)v13)
          break;
        v11 = (void (__cdecl *)(std::__shared_weak_count *__hidden))((char *)v11 + 8);
        if ((char *)v11 == (char *)on_zero_shared)
          goto LABEL_9;
      }
      v14 = 0;
      v10 = (std::__shared_weak_count *)__p;
      if (!__p)
        goto LABEL_25;
    }
LABEL_13:
    v15 = v45;
    v16 = v10;
    if (v45 != v10)
    {
      do
      {
        shared_weak_owners = (std::__shared_weak_count *)v15[-1].__shared_weak_owners_;
        if (shared_weak_owners)
        {
          v18 = (unint64_t *)&shared_weak_owners->__shared_owners_;
          do
            v19 = __ldaxr(v18);
          while (__stlxr(v19 - 1, v18));
          if (!v19)
          {
            ((void (*)(std::__shared_weak_count *))shared_weak_owners->__on_zero_shared)(shared_weak_owners);
            std::__shared_weak_count::__release_weak(shared_weak_owners);
          }
        }
        v15 = (std::__shared_weak_count *)((char *)v15 - 16);
      }
      while (v15 != v10);
      v16 = __p;
    }
    v45 = v10;
    operator delete(v16);
    if (!v14)
      goto LABEL_23;
    goto LABEL_26;
  }
  while (1)
  {
    v8 = (*(uint64_t (**)(_QWORD, const __CFString *, uint64_t))(*(_QWORD *)*v6 + 64))(*v6, a2, a3);
    if ((_DWORD)v8)
      break;
    if (++v6 == v7)
      goto LABEL_5;
  }
LABEL_59:
  if (v43 < 0)
  {
    operator delete(v42);
    if ((_DWORD)v8)
      return v8;
  }
  else if ((_DWORD)v8)
  {
    return v8;
  }
  if (!*(_BYTE *)(a1[29] + 358))
    goto LABEL_72;
  Length = CFStringGetLength(a2);
  if (Length < 1)
    return 3;
  v36 = Length;
  v37 = 1;
  do
  {
    CharacterAtIndex = CFStringGetCharacterAtIndex(a2, v37 - 1);
    v39 = (1 << u_charType(CharacterAtIndex)) & 0xE00;
    if (v39)
      v40 = v37 < v36;
    else
      v40 = 0;
    ++v37;
  }
  while (v40);
  if (v39)
    return 3;
LABEL_72:
  sub_19C29CEF8(a2, &__p);
  v8 = sub_19C3B2F0C((uint64_t)&__p);
  if (v46 < 0)
    operator delete(__p);
  return v8;
}

void sub_19C319330(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  sub_19C2B43C8((uint64_t)&a19);
  sub_19C31B3A8((uint64_t)&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_19C31939C(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v6[2];
  char v7;

  LOBYTE(v6[0]) = 0;
  v7 = 0;
  if (a3)
  {
    *a3 = 0;
    result = sub_19C31AF60(a1, a2, (uint64_t)a3, v6);
  }
  else
  {
    result = sub_19C31AF60(a1, a2, 0, v6);
  }
  if (!(_DWORD)result)
    return sub_19C3C1B9C(a2, *(unsigned __int8 *)(a1[29] + 358));
  return result;
}

void sub_19C31940C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C31B3A8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19C319420(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  int v21;
  _BOOL4 v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  if (a2 <= 0x1F3)
  {
    sub_19C3B2A7C((_QWORD *)a3, a2);
    return;
  }
  v6 = (_QWORD *)a1[3];
  v7 = (_QWORD *)a1[4];
  while (v6 != v7)
  {
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v6 + 56))(*v6, a2);
    v8 = *(unsigned __int8 *)(a3 + 23);
    v9 = (char)v8;
    if ((v8 & 0x80u) != 0)
      v8 = *(_QWORD *)(a3 + 8);
    if (v8)
      return;
    if (v9 < 0)
      operator delete(*(void **)a3);
    ++v6;
  }
  v10 = a1[23];
  v11 = a1[24];
  while (v10 != v11)
  {
    v12 = *(_QWORD **)(*(_QWORD *)v10 + 8);
    v13 = *(_QWORD **)(*(_QWORD *)v10 + 16);
    while (v12 != v13)
    {
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v12 + 32))(*v12, a2);
      v14 = *(unsigned __int8 *)(a3 + 23);
      v15 = (char)v14;
      if ((v14 & 0x80u) != 0)
        v14 = *(_QWORD *)(a3 + 8);
      if (v14)
        return;
      if (v15 < 0)
        operator delete(*(void **)a3);
      ++v12;
    }
    v10 += 16;
  }
  if (!*(_BYTE *)(a1[29] + 192))
  {
LABEL_61:
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    return;
  }
  v16 = a1[6];
  if (!v16)
  {
LABEL_40:
    v25 = a1[37];
    if (v25 && (a2 & 0x80000000) != 0)
    {
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v25 + 16) + 32))(*(_QWORD *)(v25 + 16), a2);
      if (*(char *)(a3 + 23) < 0)
      {
        if (*(_QWORD *)(a3 + 8))
          return;
        operator delete(*(void **)a3);
      }
      else if (*(_BYTE *)(a3 + 23))
      {
        return;
      }
    }
    v26 = a1[38];
    if (v26 && (a2 & 0x80000000) != 0)
    {
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v26 + 16) + 32))(*(_QWORD *)(v26 + 16), a2);
      if (*(char *)(a3 + 23) < 0)
      {
        if (*(_QWORD *)(a3 + 8))
          return;
        operator delete(*(void **)a3);
      }
      else if (*(_BYTE *)(a3 + 23))
      {
        return;
      }
    }
    v27 = a1[36];
    if (v27 && (a2 & 0x80000000) != 0)
    {
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v27 + 16) + 32))(*(_QWORD *)(v27 + 16), a2);
      if (*(char *)(a3 + 23) < 0)
      {
        if (*(_QWORD *)(a3 + 8))
          return;
        operator delete(*(void **)a3);
      }
      else if (*(_BYTE *)(a3 + 23))
      {
        return;
      }
    }
    goto LABEL_61;
  }
  v17 = *(_QWORD *)(v16 + 560);
  v18 = *(std::__shared_weak_count **)(v16 + 568);
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(p_shared_owners);
    while (__stxr(v20 + 1, p_shared_owners));
  }
  if (!v17)
    goto LABEL_33;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v17 + 32))(v17, a2);
  v21 = *(char *)(a3 + 23);
  if (v21 < 0)
  {
    if (*(_QWORD *)(a3 + 8))
    {
      v22 = 0;
      goto LABEL_34;
    }
    operator delete(*(void **)a3);
LABEL_33:
    v22 = 1;
    goto LABEL_34;
  }
  v22 = v21 == 0;
LABEL_34:
  if (v18)
  {
    v23 = (unint64_t *)&v18->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  if (v22)
    goto LABEL_40;
}

void sub_19C3196DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_19C2B43C8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19C3196F0(uint64_t a1@<X0>, const __CFString *a2@<X1>, uint64_t *a3@<X8>)
{
  _OWORD v3[4];

  memset(v3, 0, sizeof(v3));
  sub_19C31A4AC(a3, *(_QWORD *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), (uint64_t *)v3, 0, a2, 0);
}

_QWORD *sub_19C319730(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;
  uint64_t v4;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = &off_1E3D31088;
  v5[1] = a3;
  v6 = v5;
  sub_19C319CA4(a1, a2, 0, (uint64_t)v5);
  result = v6;
  if (v6 == v5)
  {
    v4 = 4;
    result = v5;
  }
  else
  {
    if (!v6)
      return result;
    v4 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
}

void sub_19C3197C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

double sub_19C319804@<D0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  const __CFString *v33;
  uint64_t v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *p_shared_owners;
  unint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  double result;
  uint64_t v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  _QWORD *v51;
  __int128 v52;
  unint64_t v53;

  v52 = 0uLL;
  v53 = 0;
  v2 = a1[23];
  v48 = a1[24];
  if (v2 != v48)
  {
    v3 = 0;
    do
    {
      v4 = *(_QWORD *)(*(_QWORD *)v2 + 8);
      v5 = *(_QWORD *)(*(_QWORD *)v2 + 16);
      while (v4 != v5)
      {
        (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)v4 + 56))(&v49);
        if ((unint64_t)v3 < v53)
        {
          v6 = v49;
          v49 = 0;
          *(_QWORD *)v3 = v6;
          v3 += 8;
          goto LABEL_36;
        }
        v7 = (char *)v52;
        v8 = &v3[-v52];
        v9 = (uint64_t)&v3[-v52] >> 3;
        v10 = v9 + 1;
        if ((unint64_t)(v9 + 1) >> 61)
          sub_19C2A18E8();
        v11 = v53 - v52;
        if ((uint64_t)(v53 - v52) >> 2 > v10)
          v10 = v11 >> 2;
        if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
          v12 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v12 = v10;
        if (v12)
        {
          if (v12 >> 61)
            sub_19C2A143C();
          v13 = (char *)operator new(8 * v12);
        }
        else
        {
          v13 = 0;
        }
        v14 = &v13[8 * v9];
        v15 = &v13[8 * v12];
        v16 = v49;
        v49 = 0;
        *(_QWORD *)v14 = v16;
        v17 = v14 + 8;
        v18 = (char *)(v3 - v7);
        if (v3 != v7)
        {
          v19 = v18 - 8;
          if ((unint64_t)(v18 - 8) <= 0x77
            || &v3[-8 * ((unint64_t)v19 >> 3) - 8] < v14
            && &v8[(_QWORD)v13 - ((unint64_t)v19 & 0xFFFFFFFFFFFFFFF8) - 8] < v3)
          {
            do
            {
LABEL_27:
              v26 = *((_QWORD *)v3 - 1);
              v3 -= 8;
              *(_QWORD *)v3 = 0;
              *((_QWORD *)v14 - 1) = v26;
              v14 -= 8;
            }
            while (v3 != v7);
          }
          else
          {
            v20 = ((unint64_t)v19 >> 3) + 1;
            v14 -= 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
            v21 = v3 - 32;
            v22 = &v13[8 * v9 - 16];
            v23 = v20 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v25 = *(_OWORD *)v21;
              v24 = *((_OWORD *)v21 + 1);
              *(_OWORD *)v21 = 0uLL;
              *((_OWORD *)v21 + 1) = 0uLL;
              v21 -= 32;
              *((_OWORD *)v22 - 1) = v25;
              *(_OWORD *)v22 = v24;
              v22 -= 32;
              v23 -= 4;
            }
            while (v23);
            if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL))
            {
              v3 -= 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
              goto LABEL_27;
            }
          }
          v27 = (char *)*((_QWORD *)&v52 + 1);
          v3 = (char *)v52;
          *(_QWORD *)&v52 = v14;
          *((_QWORD *)&v52 + 1) = v17;
          v53 = (unint64_t)v15;
          while (v27 != v3)
          {
            v29 = *((_QWORD *)v27 - 1);
            v27 -= 8;
            v28 = v29;
            *(_QWORD *)v27 = 0;
            if (v29)
              (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
          }
          goto LABEL_33;
        }
        *(_QWORD *)&v52 = &v13[8 * v9];
        *((_QWORD *)&v52 + 1) = v14 + 8;
        v53 = (unint64_t)v15;
LABEL_33:
        if (v3)
          operator delete(v3);
        v3 = v17;
LABEL_36:
        *((_QWORD *)&v52 + 1) = v3;
        v30 = v49;
        v49 = 0;
        if (v30)
          (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
        v4 += 8;
      }
      v2 += 16;
    }
    while (v2 != v48);
  }
  v31 = (_QWORD *)operator new();
  *v31 = &off_1E3D35378;
  v31[1] = 0;
  v32 = (*(uint64_t (**)(_QWORD *))(*a1 + 64))(a1);
  v33 = (const __CFString *)MEMORY[0x1A1AD2A04](v32);
  if (CFStringCompare(v33, CFSTR("zh-Hans"), 0))
  {
    v34 = a1[6];
    if (v34)
    {
      v35 = *(_QWORD *)(v34 + 560);
      v36 = *(std::__shared_weak_count **)(v34 + 568);
      v49 = v35;
      v50 = v36;
      if (v36)
      {
        p_shared_owners = (unint64_t *)&v36->__shared_owners_;
        do
          v38 = __ldxr(p_shared_owners);
        while (__stxr(v38 + 1, p_shared_owners));
      }
      (*(void (**)(_QWORD **__return_ptr))(*(_QWORD *)v35 + 56))(&v51);
      v39 = v51;
    }
    else
    {
      v39 = (_QWORD *)operator new();
      *v39 = &off_1E3D35378;
      v39[1] = 0;
    }
    v51 = 0;
    (*(void (**)(_QWORD *))(*v31 + 8))(v31);
    v40 = v51;
    v51 = 0;
    if (v40)
      (*(void (**)(_QWORD *))(*v40 + 8))(v40);
    if (v34)
    {
      v41 = v50;
      if (v50)
      {
        v42 = (unint64_t *)&v50->__shared_owners_;
        do
          v43 = __ldaxr(v42);
        while (__stlxr(v43 - 1, v42));
        if (!v43)
        {
          ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
          std::__shared_weak_count::__release_weak(v41);
        }
      }
    }
  }
  else
  {
    v39 = v31;
  }
  v44 = operator new();
  *(_QWORD *)v44 = &off_1E3D369D0;
  result = *(double *)&v52;
  *(_OWORD *)(v44 + 8) = v52;
  *(_QWORD *)(v44 + 24) = v53;
  *(_QWORD *)(v44 + 32) = v39;
  *a2 = v44;
  return result;
}

void sub_19C319BA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  sub_19C319C30((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19C319C1C(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 416) + 8);
}

_QWORD *sub_19C319C30(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = (_QWORD *)*a1;
  if (*a1)
  {
    v3 = (_QWORD *)a1[1];
    v4 = (_QWORD *)*a1;
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      }
      while (v3 != v2);
      v4 = (_QWORD *)*a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_19C319CA4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  const __CFString *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const void *v13;
  CFTypeRef *v14;
  CFTypeRef *v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  void *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  CFTypeRef *v32;
  CFTypeRef *v33;
  uint64_t v34;
  int v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  const void *v39;
  CFTypeRef *v40;
  CFTypeRef *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *i;
  int v47;
  int v48;
  const UInt8 *v49;
  CFIndex v50;
  CFStringRef v51;
  uint64_t v52;
  const __CFArray *v53;
  const void *ValueAtIndex;
  uint64_t v55;
  int v56;
  void *exception;
  void *__p[2];
  unsigned __int8 v59;
  uint64_t v60;
  const void *v61;
  int v62;
  uint64_t v63;
  int v64;
  CFStringRef v65;
  CFTypeRef cf[2];
  CFTypeRef *v67;
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  v9 = (const __CFString *)MEMORY[0x1A1AD2A04](v8);
  if (CFStringCompare(v9, CFSTR("zh-Hans"), 0) == kCFCompareEqualTo)
    return;
  if (a3 != 3)
  {
    v18 = *(_QWORD *)(a1 + 184);
    v19 = *(_QWORD *)(a1 + 192);
    if (v18 != v19)
    {
      while (!sub_19C3C1838(a2, *(_QWORD *)(*(_QWORD *)v18 + 8), *(_QWORD *)(*(_QWORD *)v18 + 16), a4))
      {
        v18 += 16;
        if (v18 == v19)
          goto LABEL_17;
      }
      return;
    }
LABEL_17:
    if (a3 == 2)
      return;
    v20 = *(_QWORD *)(a1 + 48);
    if (!v20)
      goto LABEL_33;
    v21 = *(_QWORD *)(v20 + 560);
    v22 = *(std::__shared_weak_count **)(v20 + 568);
    if (v22)
    {
      p_shared_owners = (unint64_t *)&v22->__shared_owners_;
      do
        v24 = __ldxr(p_shared_owners);
      while (__stxr(v24 + 1, p_shared_owners));
      v25 = (unint64_t *)&v22->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    if (!v21)
    {
LABEL_33:
      if (a3 == 1)
        return;
      goto LABEL_44;
    }
    v27 = *(_QWORD *)(a1 + 48);
    v28 = *(void **)(v27 + 560);
    v29 = *(std::__shared_weak_count **)(v27 + 568);
    __p[0] = v28;
    __p[1] = v29;
    if (v29)
    {
      v30 = (unint64_t *)&v29->__shared_owners_;
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
    }
    LODWORD(v65) = 1;
    LOBYTE(v63) = 0;
    v32 = (CFTypeRef *)operator new(0x28uLL);
    *v32 = &off_1E3D30A58;
    v32[1] = (CFTypeRef)a4;
    v32[2] = &v65;
    v32[3] = v28;
    v32[4] = &v63;
    v67 = v32;
    (*(void (**)(void *, uint64_t, CFTypeRef *))(*(_QWORD *)v28 + 48))(v28, a2, cf);
    v33 = v67;
    if (v67 == cf)
    {
      v34 = 4;
      v33 = cf;
    }
    else
    {
      if (!v67)
      {
LABEL_37:
        v35 = v63;
        if (v29)
        {
          v36 = (unint64_t *)&v29->__shared_owners_;
          do
            v37 = __ldaxr(v36);
          while (__stlxr(v37 - 1, v36));
          if (!v37)
          {
            ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
            std::__shared_weak_count::__release_weak(v29);
          }
        }
        if (a3 == 1 || v35)
          return;
LABEL_44:
        v38 = *(_QWORD *)(a1 + 296);
        if (!v38)
        {
LABEL_51:
          v43 = *(_QWORD *)(a1 + 304);
          if (!v43 || (sub_19C3C158C(a2, *(_QWORD *)(v43 + 16), 3, a4) & 1) == 0)
          {
            v44 = *(_QWORD *)(a1 + 288);
            if (!v44 || (sub_19C3C158C(a2, *(_QWORD *)(v44 + 16), 4, a4) & 1) == 0)
            {
              v45 = *(_QWORD **)(a1 + 24);
              for (i = *(_QWORD **)(a1 + 32); v45 != i; ++v45)
              {
                v60 = 0;
                v47 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t *))(*(_QWORD *)*v45 + 72))(*v45, a2, &v60);
                if (v47)
                {
                  v59 = 0;
                  v48 = *(char *)(a2 + 23);
                  if (v48 >= 0)
                    v49 = (const UInt8 *)a2;
                  else
                    v49 = *(const UInt8 **)a2;
                  if (v48 >= 0)
                    v50 = *(unsigned __int8 *)(a2 + 23);
                  else
                    v50 = *(_QWORD *)(a2 + 8);
                  v51 = CFStringCreateWithBytes(0, v49, v50, 0x8000100u, 0);
                  cf[0] = v51;
                  if (!v51)
                  {
                    exception = __cxa_allocate_exception(0x10uLL);
                    MEMORY[0x1A1AD3154](exception, "Could not construct");
                    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
                  }
                  v52 = v60;
                  v53 = *(const __CFArray **)(a1 + 176);
                  if (v53 && CFArrayGetCount(v53))
                    ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 176), 0);
                  else
                    ValueAtIndex = *(const void **)(*(_QWORD *)(a1 + 416) + 8);
                  v65 = v51;
                  v64 = v47;
                  v63 = v52;
                  v62 = 2;
                  v61 = ValueAtIndex;
                  v55 = *(_QWORD *)(a4 + 24);
                  if (!v55)
                    sub_19C2CCC60();
                  (*(void (**)(uint64_t, CFStringRef *, int *, uint64_t *, int *, const void **, unsigned __int8 *))(*(_QWORD *)v55 + 48))(v55, &v65, &v64, &v63, &v62, &v61, &v59);
                  v56 = v59;
                  if (cf[0])
                    CFRelease(cf[0]);
                  if (v56)
                    break;
                }
              }
            }
          }
          return;
        }
        v39 = *(const void **)(v38 + 16);
        LODWORD(__p[0]) = 5;
        LOBYTE(v65) = 0;
        v40 = (CFTypeRef *)operator new(0x28uLL);
        *v40 = &off_1E3D30A58;
        v40[1] = (CFTypeRef)a4;
        v40[2] = __p;
        v40[3] = v39;
        v40[4] = &v65;
        v67 = v40;
        (*(void (**)(const void *, uint64_t, CFTypeRef *))(*(_QWORD *)v39 + 48))(v39, a2, cf);
        v41 = v67;
        if (v67 == cf)
        {
          v42 = 4;
          v41 = cf;
        }
        else
        {
          if (!v67)
            goto LABEL_50;
          v42 = 5;
        }
        (*((void (**)(void))*v41 + v42))();
LABEL_50:
        if ((_BYTE)v65)
          return;
        goto LABEL_51;
      }
      v34 = 5;
    }
    (*((void (**)(void))*v33 + v34))();
    goto LABEL_37;
  }
  v10 = *(_QWORD *)(a1 + 208);
  v11 = *(_QWORD *)(a1 + 216);
  if (v10 != v11)
  {
    v12 = v10 + 8;
    while (1)
    {
      v13 = *(const void **)(v12 - 8);
      LODWORD(__p[0]) = 0;
      LOBYTE(v65) = 0;
      v14 = (CFTypeRef *)operator new(0x28uLL);
      *v14 = &off_1E3D30A58;
      v14[1] = (CFTypeRef)a4;
      v14[2] = __p;
      v14[3] = v13;
      v14[4] = &v65;
      v67 = v14;
      (*(void (**)(const void *, uint64_t, CFTypeRef *))(*(_QWORD *)v13 + 48))(v13, a2, cf);
      v15 = v67;
      if (v67 == cf)
      {
        v15 = cf;
        v16 = 4;
      }
      else
      {
        if (!v67)
          goto LABEL_10;
        v16 = 5;
      }
      (*((void (**)(void))*v15 + v16))();
LABEL_10:
      if (!(_BYTE)v65)
      {
        v17 = v12 == v11;
        v12 += 8;
        if (!v17)
          continue;
      }
      return;
    }
  }
}

void sub_19C31A2A4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  _Unwind_Exception *v28;

  if (a28 < 0)
    operator delete(__p);
  __cxa_end_catch();
  _Unwind_Resume(v28);
}

void sub_19C31A2D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, _Unwind_Exception *exception_object, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,char *a26)
{
  char *v26;
  char *v27;
  uint64_t v28;

  v27 = a26;
  if (a26 == v26)
  {
    v28 = 4;
    v27 = &a23;
  }
  else
  {
    if (!a26)
      JUMPOUT(0x19C31A2E4);
    v28 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v27 + 8 * v28))();
  _Unwind_Resume(a1);
}

void sub_19C31A2F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, _Unwind_Exception *exception_object, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,char *a26)
{
  char *v26;
  char *v27;
  uint64_t v28;

  v27 = a26;
  if (a26 == v26)
  {
    v28 = 4;
    v27 = &a23;
  }
  else
  {
    if (!a26)
      goto LABEL_6;
    v28 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v27 + 8 * v28))();
LABEL_6:
  sub_19C2B43C8((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_19C31A33C(void *a1, int a2)
{
  _Unwind_Exception *v2;

  if (a2)
    sub_19C2CDAC8(a1);
  _Unwind_Resume(v2);
}

void sub_19C31A34C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, _Unwind_Exception *exception_object)
{
  _Unwind_Resume(a1);
}

void sub_19C31A358(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,char *a26)
{
  if (a26 == &a23)
    JUMPOUT(0x19C31A36CLL);
  JUMPOUT(0x19C31A2E0);
}

void sub_19C31A38C()
{
  JUMPOUT(0x1A1AD355CLL);
}

_QWORD *sub_19C31A3A0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E3D31088;
  result[1] = v3;
  return result;
}

uint64_t sub_19C31A3D4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E3D31088;
  a2[1] = v2;
  return result;
}

uint64_t sub_19C31A3F0(uint64_t a1, uint64_t *a2, int *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  int v12;
  uint64_t v13;

  v7 = *a3;
  v8 = *a4;
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24);
  v13 = *a2;
  v12 = v7;
  v11 = v8;
  if (!v9)
    sub_19C2CCC60();
  return (*(uint64_t (**)(uint64_t, uint64_t *, int *, uint64_t *, uint64_t))(*(_QWORD *)v9 + 48))(v9, &v13, &v12, &v11, a7);
}

uint64_t sub_19C31A44C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK2LM22CompositeLanguageModel33enumerateSortkeyEquivalentEntriesERKNSt3__112basic_stringIcNS1_11ch"
                     "ar_traitsIcEENS1_9allocatorIcEEEERKNS1_8functionIFvPK10__CFStringjdRbEEEE3$_0"
    || ((v3 & (unint64_t)"ZNK2LM22CompositeLanguageModel33enumerateSortkeyEquivalentEntriesERKNSt3__112basic_strin"
                                "gIcNS1_11char_traitsIcEENS1_9allocatorIcEEEERKNS1_8functionIFvPK10__CFStringjdRbEEEE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZNK2LM22CompositeLanguageModel33enumerateSortkeyEquivalentEntriesERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEERKNS1_8functionIFvPK10__CFStringjdRbEEEE3$_0")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK2LM22CompositeLanguageModel33enumerateSortkeyEquivalentEntriesERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEERKNS1_8functionIFvPK10__CFStringjdRbEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *sub_19C31A4A0()
{
  return &unk_1E3D33720;
}

void sub_19C31A4AC(uint64_t *a1, uint64_t a2, std::__shared_weak_count *this, uint64_t *a4, __int16 a5, const __CFString *a6, int a7)
{
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  __int128 v26;
  unint64_t v27;
  uint64_t *v28;
  _QWORD *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  uint64_t *v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t *v42;
  char *v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  std::recursive_mutex *v65;
  _QWORD *v66;
  _QWORD *v67;
  char *v68;
  __int128 v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  __int128 *v84;
  char *v85;
  uint64_t v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  void *v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t *v99;
  _QWORD *v100;
  uint64_t v101;
  unint64_t *v102;
  unint64_t v103;
  unint64_t *v104;
  unint64_t v105;
  std::recursive_mutex *v106;
  std::__shared_weak_count *v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  __int128 v116;
  uint64_t **v117;
  const __CFString *v118;
  std::__shared_weak_count *v119;
  uint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  _QWORD *v123;

  if (!this || (v12 = std::__shared_weak_count::lock(this), (v119 = v12) == 0))
    sub_19C31AF2C();
  v13 = v12;
  v14 = operator new();
  v15 = v14;
  v16 = *a4;
  v17 = a4[1];
  v110 = a4[5];
  v111 = a4[4];
  v108 = a4[7];
  v109 = a4[6];
  *(_QWORD *)v14 = &off_1E3D36CD0;
  *(_QWORD *)(v14 + 8) = a2;
  p_shared_owners = (unint64_t *)&v13->__shared_owners_;
  *(_QWORD *)(v14 + 16) = v13;
  do
    v19 = __ldxr(p_shared_owners);
  while (__stxr(v19 + 1, p_shared_owners));
  v113 = v17;
  v114 = v16;
  *(_QWORD *)(v14 + 24) = 0;
  v117 = (uint64_t **)(v14 + 24);
  *(_BYTE *)(v14 + 48) = 0;
  *(_QWORD *)(v14 + 32) = 0;
  *(_QWORD *)(v14 + 40) = 0;
  *(_QWORD *)(v14 + 64) = 0;
  *(_QWORD *)(v14 + 56) = v14 + 64;
  *(_QWORD *)(v14 + 72) = 0;
  *(_QWORD *)(v14 + 80) = v14 + 64;
  *(_QWORD *)v14 = &off_1E3D371A8;
  *(_WORD *)(v14 + 88) = 0;
  if ((a5 & 0xFF00) != 0)
    *(_WORD *)(v14 + 88) = a5;
  v118 = a6;
  if (a7 != 2)
  {
    if (a7 == 1)
    {
      *a1 = v14;
LABEL_121:
      v104 = (unint64_t *)&v13->__shared_owners_;
      do
        v105 = __ldaxr(v104);
      while (__stlxr(v105 - 1, v104));
      if (!v105)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
      return;
    }
    v20 = *(_QWORD *)(v14 + 8);
    v22 = *(_QWORD *)(v20 + 184);
    v21 = *(_QWORD *)(v20 + 192);
    v115 = v21;
LABEL_12:
    if (v22 == v21)
      goto LABEL_47;
    v23 = *(_QWORD **)(*(_QWORD *)v22 + 8);
    v24 = *(_QWORD **)(*(_QWORD *)v22 + 16);
    while (1)
    {
      if (v23 == v24)
      {
        v22 += 16;
        v21 = v115;
        goto LABEL_12;
      }
      (*(void (**)(_QWORD **__return_ptr, _QWORD, const __CFString *))(*(_QWORD *)*v23 + 40))(&v122, *v23, a6);
      v25 = (uint64_t)v122;
      v26 = 0uLL;
      if (v122)
        break;
LABEL_14:
      ++v23;
    }
    v28 = *(uint64_t **)(v15 + 32);
    v27 = *(_QWORD *)(v15 + 40);
    if ((unint64_t)v28 < v27)
    {
      v122 = 0;
      *v28 = v25;
      v29 = v28 + 1;
LABEL_45:
      *(_QWORD *)(v15 + 32) = v29;
      v51 = (uint64_t)v122;
      v122 = 0;
      if (v51)
        (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
      goto LABEL_14;
    }
    v30 = *v117;
    v31 = (char *)v28 - (char *)*v117;
    v32 = v31 >> 3;
    v33 = (v31 >> 3) + 1;
    if (v33 >> 61)
      sub_19C2A18E8();
    v34 = v27 - (_QWORD)v30;
    if (v34 >> 2 > v33)
      v33 = v34 >> 2;
    if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8)
      v35 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v35 = v33;
    if (v35)
    {
      if (v35 >> 61)
        sub_19C2A143C();
      v36 = (char *)operator new(8 * v35);
      v26 = 0uLL;
    }
    else
    {
      v36 = 0;
    }
    v37 = (uint64_t *)&v36[8 * v32];
    v38 = &v36[8 * v35];
    v122 = 0;
    *v37 = v25;
    v29 = v37 + 1;
    v39 = (char *)((char *)v28 - (char *)v30);
    if (v28 == v30)
    {
      *(_QWORD *)(v15 + 24) = v37;
      *(_QWORD *)(v15 + 32) = v29;
      *(_QWORD *)(v15 + 40) = v38;
      goto LABEL_43;
    }
    v40 = v39 - 8;
    if ((unint64_t)(v39 - 8) > 0x77
      && (&v28[-((unint64_t)v40 >> 3) - 1] >= v37
       || &v36[v31 - ((unint64_t)v40 & 0xFFFFFFFFFFFFFFF8) - 8] >= (char *)v28))
    {
      v41 = ((unint64_t)v40 >> 3) + 1;
      v37 -= v41 & 0x3FFFFFFFFFFFFFFCLL;
      v42 = v28 - 4;
      v43 = &v36[8 * v32 - 16];
      v44 = v41 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v46 = *(_OWORD *)v42;
        v45 = *((_OWORD *)v42 + 1);
        *(_OWORD *)v42 = v26;
        *((_OWORD *)v42 + 1) = v26;
        v42 -= 4;
        *((_OWORD *)v43 - 1) = v46;
        *(_OWORD *)v43 = v45;
        v43 -= 32;
        v44 -= 4;
      }
      while (v44);
      if (v41 == (v41 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_38:
        v28 = *(uint64_t **)(v15 + 24);
        v48 = *(uint64_t **)(v15 + 32);
        *(_QWORD *)(v15 + 24) = v37;
        *(_QWORD *)(v15 + 32) = v29;
        *(_QWORD *)(v15 + 40) = v38;
        while (v48 != v28)
        {
          v50 = *--v48;
          v49 = v50;
          *v48 = 0;
          if (v50)
            (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
        }
LABEL_43:
        a6 = v118;
        if (v28)
          operator delete(v28);
        goto LABEL_45;
      }
      v28 -= v41 & 0x3FFFFFFFFFFFFFFCLL;
    }
    do
    {
      v47 = *--v28;
      *v28 = 0;
      *--v37 = v47;
    }
    while (v28 != v30);
    goto LABEL_38;
  }
LABEL_47:
  v52 = *(_QWORD *)(v15 + 8);
  if (*(_BYTE *)(*(_QWORD *)(v52 + 232) + 192))
  {
    v53 = *(_QWORD *)(v52 + 48);
    v54 = *(_QWORD *)(v53 + 560);
    v55 = *(std::__shared_weak_count **)(v53 + 568);
    if (v55)
    {
      v56 = (unint64_t *)&v55->__shared_owners_;
      do
        v57 = __ldxr(v56);
      while (__stxr(v57 + 1, v56));
    }
    v59 = v113;
    v58 = v114;
    if (v54)
    {
      (*(void (**)(_QWORD **__return_ptr, uint64_t, const __CFString *))(*(_QWORD *)v54 + 40))(&v122, v54, a6);
      v60 = (uint64_t)v122;
      if (v122)
      {
        v61 = *(uint64_t **)(v15 + 32);
        if ((unint64_t)v61 >= *(_QWORD *)(v15 + 40))
        {
          v62 = sub_19C32F5A4(v117, (uint64_t *)&v122);
        }
        else
        {
          v122 = 0;
          *v61 = v60;
          v62 = v61 + 1;
        }
        *(_QWORD *)(v15 + 32) = v62;
        v63 = (uint64_t)v122;
        v122 = 0;
        if (v63)
          (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
      }
    }
  }
  else
  {
    v55 = 0;
    v59 = v113;
    v58 = v114;
  }
  v64 = *(_QWORD *)(v15 + 8);
  v65 = *(std::recursive_mutex **)(v64 + 464);
  if (v65)
  {
    v107 = v55;
    std::recursive_mutex::lock(*(std::recursive_mutex **)(v64 + 464));
    v106 = v65;
    sub_19C3BE128(&v122, v65[2].__m_.__sig + 616);
    v66 = v122;
    v67 = v123;
    if (v122 != v123)
    {
      v68 = 0;
      v116 = 0u;
      while (1)
      {
        (*(void (**)(uint64_t *__return_ptr, _QWORD, const __CFString *))(*(_QWORD *)*v66 + 40))(&v121, *v66, a6);
        v70 = (_QWORD *)*((_QWORD *)&v116 + 1);
        if (*((_QWORD *)&v116 + 1) >= (unint64_t)v68)
          break;
        v71 = v121;
        v121 = 0;
        **((_QWORD **)&v116 + 1) = v71;
        v72 = *((_QWORD *)&v116 + 1) + 8;
LABEL_95:
        v92 = v121;
        v121 = 0;
        if (v92)
          (*(void (**)(uint64_t))(*(_QWORD *)v92 + 8))(v92);
        *(_QWORD *)&v69 = v116;
        *((_QWORD *)&v69 + 1) = v72;
        v116 = v69;
        v66 += 2;
        if (v66 == v67)
        {
          v66 = v122;
          if (!v122)
            goto LABEL_110;
          goto LABEL_100;
        }
      }
      v73 = (_QWORD *)v116;
      v74 = (uint64_t)(*((_QWORD *)&v116 + 1) - v116) >> 3;
      v75 = v74 + 1;
      if ((unint64_t)(v74 + 1) >> 61)
        sub_19C2A18E8();
      if ((uint64_t)&v68[-v116] >> 2 > v75)
        v75 = (uint64_t)&v68[-v116] >> 2;
      if ((unint64_t)&v68[-v116] >= 0x7FFFFFFFFFFFFFF8)
        v76 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v76 = v75;
      if (v76)
      {
        if (v76 >> 61)
          sub_19C2A143C();
        v77 = (char *)operator new(8 * v76);
      }
      else
      {
        v77 = 0;
      }
      v78 = &v77[8 * v74];
      v79 = v121;
      v121 = 0;
      *(_QWORD *)v78 = v79;
      v72 = (uint64_t)(v78 + 8);
      v80 = *((_QWORD *)&v116 + 1) - v116;
      if (*((_QWORD *)&v116 + 1) == (_QWORD)v116)
      {
        *(_QWORD *)&v116 = &v77[8 * v74];
        a6 = v118;
        v68 = &v77[8 * v76];
        if (!*((_QWORD *)&v116 + 1))
          goto LABEL_95;
        goto LABEL_94;
      }
      v81 = v80 - 8;
      if ((unint64_t)(v80 - 8) > 0x77)
      {
        if (*((_QWORD *)&v116 + 1) - (v81 & 0xFFFFFFFFFFFFFFF8) - 8 >= (unint64_t)v78
          || (v82 = (_QWORD *)*((_QWORD *)&v116 + 1),
              (unint64_t)&v77[*((_QWORD *)&v116 + 1) - v116 - (v81 & 0xFFFFFFFFFFFFFFF8) - 8] >= *((_QWORD *)&v116 + 1)))
        {
          v83 = (v81 >> 3) + 1;
          v78 -= 8 * (v83 & 0x3FFFFFFFFFFFFFFCLL);
          v84 = (__int128 *)(*((_QWORD *)&v116 + 1) - 32);
          v85 = &v77[8 * v74 - 16];
          v86 = v83 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v88 = *v84;
            v87 = v84[1];
            *v84 = 0uLL;
            v84[1] = 0uLL;
            v84 -= 2;
            *((_OWORD *)v85 - 1) = v88;
            *(_OWORD *)v85 = v87;
            v85 -= 32;
            v86 -= 4;
          }
          while (v86);
          if (v83 == (v83 & 0x3FFFFFFFFFFFFFFCLL))
          {
            a6 = v118;
LABEL_89:
            *(_QWORD *)&v116 = v78;
            do
            {
              v91 = *--v70;
              v90 = v91;
              *v70 = 0;
              if (v91)
                (*(void (**)(uint64_t))(*(_QWORD *)v90 + 8))(v90);
            }
            while (v70 != v73);
            v70 = v73;
            v68 = &v77[8 * v76];
            if (!v73)
              goto LABEL_95;
LABEL_94:
            operator delete(v70);
            goto LABEL_95;
          }
          v82 = (_QWORD *)(*((_QWORD *)&v116 + 1) - 8 * (v83 & 0x3FFFFFFFFFFFFFFCLL));
        }
      }
      else
      {
        v82 = (_QWORD *)*((_QWORD *)&v116 + 1);
      }
      a6 = v118;
      do
      {
        v89 = *--v82;
        *v82 = 0;
        *((_QWORD *)v78 - 1) = v89;
        v78 -= 8;
      }
      while (v82 != (_QWORD *)v116);
      goto LABEL_89;
    }
    v68 = 0;
    v116 = 0u;
    if (!v122)
      goto LABEL_110;
LABEL_100:
    v93 = v123;
    v94 = v66;
    if (v123 != v66)
    {
      do
      {
        v95 = (std::__shared_weak_count *)*(v93 - 1);
        if (v95)
        {
          v96 = (unint64_t *)&v95->__shared_owners_;
          do
            v97 = __ldaxr(v96);
          while (__stlxr(v97 - 1, v96));
          if (!v97)
          {
            ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
            std::__shared_weak_count::__release_weak(v95);
          }
        }
        v93 -= 2;
      }
      while (v93 != v66);
      v94 = v122;
    }
    v123 = v66;
    operator delete(v94);
LABEL_110:
    v98 = operator new();
    *(_QWORD *)v98 = &off_1E3D30190;
    *(_OWORD *)(v98 + 8) = v116;
    *(_QWORD *)(v98 + 24) = v68;
    v120 = v98;
    std::recursive_mutex::unlock(v106);
    v99 = *(uint64_t **)(v15 + 32);
    v59 = v113;
    v58 = v114;
    if ((unint64_t)v99 >= *(_QWORD *)(v15 + 40))
    {
      v55 = v107;
      v100 = sub_19C32F5A4(v117, &v120);
      v101 = v120;
      *(_QWORD *)(v15 + 32) = v100;
      *(_BYTE *)(v15 + 48) = 1;
      if (v101)
        (*(void (**)(uint64_t))(*(_QWORD *)v101 + 8))(v101);
    }
    else
    {
      *v99 = v98;
      *(_QWORD *)(v15 + 32) = v99 + 1;
      *(_BYTE *)(v15 + 48) = 1;
      v55 = v107;
    }
    v64 = *(_QWORD *)(v15 + 8);
  }
  sub_19C3B375C(v15, *(_QWORD **)(v64 + 296), v111, v110, v58, v59, a6);
  sub_19C3B375C(v15, *(_QWORD **)(*(_QWORD *)(v15 + 8) + 288), v109, v108, v58, v59, a6);
  if (v55)
  {
    v102 = (unint64_t *)&v55->__shared_owners_;
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  v13 = v119;
  *a1 = v15;
  if (v119)
    goto LABEL_121;
}

void sub_19C31AF2C()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x1E0DE4F80] + 16;
  __cxa_throw(exception, MEMORY[0x1E0DE4E28], MEMORY[0x1E0DE43F0]);
}

uint64_t sub_19C31AF60(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  _QWORD *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  std::__shared_weak_count *v22;
  void (__cdecl *v23)(std::__shared_weak_count *__hidden);
  void (__cdecl *on_zero_shared)(std::__shared_count *__hidden);
  uint64_t v25;
  int v26;
  std::__shared_weak_count *v27;
  void *v28;
  std::__shared_weak_count *shared_weak_owners;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _BOOL4 v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  unsigned int v44;
  unint64_t *v45;
  unint64_t v46;
  void *__p;
  std::__shared_weak_count *v49;
  _QWORD *v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(a1[29] + 365) || (v8 = (_QWORD *)a1[3], v9 = (_QWORD *)a1[4], v8 == v9))
  {
LABEL_5:
    if (*((_BYTE *)a4 + 16))
    {
      v11 = (std::__shared_weak_count *)a4[1];
      v51 = *a4;
      v52 = v11;
      if (v11)
      {
        p_shared_owners = (unint64_t *)&v11->__shared_owners_;
        do
          v13 = __ldxr(p_shared_owners);
        while (__stxr(v13 + 1, p_shared_owners));
      }
      v14 = operator new(0x10uLL);
      __p = v14;
      v49 = (std::__shared_weak_count *)v14;
      v50 = v14 + 2;
      v15 = v52;
      *v14 = v51;
      v14[1] = v15;
      if (v15)
      {
        v16 = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
        v49 = (std::__shared_weak_count *)(v14 + 2);
        if (v52)
        {
          v18 = &v52->__shared_owners_;
          do
            v19 = __ldaxr((unint64_t *)v18);
          while (__stlxr(v19 - 1, (unint64_t *)v18));
          if (!v19)
          {
            ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
            std::__shared_weak_count::__release_weak(v52);
          }
        }
      }
      else
      {
        v49 = (std::__shared_weak_count *)(v14 + 2);
      }
    }
    else
    {
      sub_19C31B408(&__p, (uint64_t)(a1 + 23));
    }
    v22 = (std::__shared_weak_count *)__p;
    v21 = v49;
    if (__p == v49)
    {
      v25 = 0;
      v26 = 1;
      if (!__p)
      {
LABEL_40:
        if (!v26)
          return v25;
LABEL_41:
        v32 = a1[29];
        if (!*(_BYTE *)(v32 + 365))
        {
          v41 = (_QWORD *)a1[3];
          v42 = (_QWORD *)a1[4];
          if (v41 != v42)
          {
            while (1)
            {
              v20 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v41 + 72))(*v41, a2, a3);
              if ((_DWORD)v20)
                return v20;
              if (++v41 == v42)
              {
                v32 = a1[29];
                break;
              }
            }
          }
        }
        if (!*(_BYTE *)(v32 + 192))
          return 0;
        v33 = a1[6];
        v34 = *(void **)(v33 + 560);
        v35 = *(std::__shared_weak_count **)(v33 + 568);
        __p = v34;
        v49 = v35;
        if (v35)
        {
          v36 = (unint64_t *)&v35->__shared_owners_;
          do
            v37 = __ldxr(v36);
          while (__stxr(v37 + 1, v36));
        }
        if (!v34
          || (v20 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(_QWORD *)v34 + 24))(v34, a2, a3),
              !(_DWORD)v20))
        {
          if (!*(_BYTE *)(a1[29] + 192))
            goto LABEL_63;
          v38 = a1[37];
          if (v38)
          {
            v20 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v38 + 16) + 24))(*(_QWORD *)(v38 + 16), a2, a3);
            if ((_DWORD)v20)
              goto LABEL_54;
            if (!*(_BYTE *)(a1[29] + 192))
              goto LABEL_63;
          }
          v39 = a1[38];
          if (v39)
          {
            v20 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v39 + 16) + 24))(*(_QWORD *)(v39 + 16), a2, a3);
            if ((_DWORD)v20)
              goto LABEL_54;
            if (!*(_BYTE *)(a1[29] + 192))
              goto LABEL_63;
          }
          v43 = a1[36];
          if (v43)
            v44 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v43 + 16) + 24))(*(_QWORD *)(v43 + 16), a2, a3);
          else
LABEL_63:
            v44 = 0;
          v40 = v44 != 0;
          if (v44)
            v20 = v44;
          else
            v20 = v25;
          if (!v35)
          {
LABEL_72:
            if (v40)
              return v20;
            return 0;
          }
LABEL_68:
          v45 = (unint64_t *)&v35->__shared_owners_;
          do
            v46 = __ldaxr(v45);
          while (__stlxr(v46 - 1, v45));
          if (!v46)
          {
            ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
            std::__shared_weak_count::__release_weak(v35);
          }
          goto LABEL_72;
        }
LABEL_54:
        v40 = 1;
        if (!v35)
          goto LABEL_72;
        goto LABEL_68;
      }
    }
    else
    {
      while (1)
      {
        v23 = v22->~__shared_weak_count_0;
        on_zero_shared = v22->__on_zero_shared;
        if ((char *)v23 != (char *)on_zero_shared)
          break;
LABEL_24:
        v22 = (std::__shared_weak_count *)((char *)v22 + 16);
        if (v22 == v21)
        {
          v25 = 0;
          v26 = 1;
          v22 = (std::__shared_weak_count *)__p;
          if (__p)
            goto LABEL_28;
          goto LABEL_40;
        }
      }
      while (1)
      {
        v25 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)v23 + 24))(*(_QWORD *)v23, a2, a3);
        if ((_DWORD)v25)
          break;
        v23 = (void (__cdecl *)(std::__shared_weak_count *__hidden))((char *)v23 + 8);
        if ((char *)v23 == (char *)on_zero_shared)
          goto LABEL_24;
      }
      v26 = 0;
      v22 = (std::__shared_weak_count *)__p;
      if (!__p)
        goto LABEL_40;
    }
LABEL_28:
    v27 = v49;
    v28 = v22;
    if (v49 != v22)
    {
      do
      {
        shared_weak_owners = (std::__shared_weak_count *)v27[-1].__shared_weak_owners_;
        if (shared_weak_owners)
        {
          v30 = (unint64_t *)&shared_weak_owners->__shared_owners_;
          do
            v31 = __ldaxr(v30);
          while (__stlxr(v31 - 1, v30));
          if (!v31)
          {
            ((void (*)(std::__shared_weak_count *))shared_weak_owners->__on_zero_shared)(shared_weak_owners);
            std::__shared_weak_count::__release_weak(shared_weak_owners);
          }
        }
        v27 = (std::__shared_weak_count *)((char *)v27 - 16);
      }
      while (v27 != v22);
      v28 = __p;
    }
    v49 = v22;
    operator delete(v28);
    if (!v26)
      return v25;
    goto LABEL_41;
  }
  while (1)
  {
    v10 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v8 + 72))(*v8, a2, a3);
    if ((_DWORD)v10)
      return v10;
    if (++v8 == v9)
      goto LABEL_5;
  }
}

void sub_19C31B35C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_19C2B43C8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19C31B37C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_19C2B43C8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19C31B394(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_19C2F5AA8(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_19C31B3A8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (*(_BYTE *)(a1 + 16))
  {
    v2 = *(std::__shared_weak_count **)(a1 + 8);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
  }
  return a1;
}

_QWORD *sub_19C31B408(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v3 = *(_QWORD **)a2;
  v4 = *(_QWORD **)(a2 + 8);
  v5 = (uint64_t)v4 - *(_QWORD *)a2;
  if (v4 != *(_QWORD **)a2)
  {
    if (v5 < 0)
      sub_19C2A18E8();
    v6 = operator new((size_t)v4 - *(_QWORD *)a2);
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[2 * (v5 >> 4)];
    do
    {
      v7 = v3[1];
      *v6 = *v3;
      v6[1] = v7;
      if (v7)
      {
        v8 = (unint64_t *)(v7 + 8);
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
      }
      v3 += 2;
      v6 += 2;
    }
    while (v3 != v4);
    a1[1] = v6;
  }
  return a1;
}

void sub_19C31B4AC(_Unwind_Exception *exception_object)
{
  void **v1;
  char *v3;
  char *v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v3 = (char *)*v1;
  if (*v1)
  {
    v4 = (char *)v1[1];
    v5 = *v1;
    if (v4 != v3)
    {
      do
      {
        v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
        if (v6)
        {
          p_shared_owners = (unint64_t *)&v6->__shared_owners_;
          do
            v8 = __ldaxr(p_shared_owners);
          while (__stlxr(v8 - 1, p_shared_owners));
          if (!v8)
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
        }
        v4 -= 16;
      }
      while (v4 != v3);
      v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C31B528(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  int64_t v6;
  std::recursive_mutex *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  const void *v12;
  const void *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  const void *v47;
  _QWORD *v48;
  _QWORD *v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  const void *v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  const void *v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  void *v73;
  std::__shared_weak_count *v74;

  *(_QWORD *)a1 = &off_1E3D36968;
  v2 = *(_QWORD *)(a1 + 232);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 264);
    if (v3)
    {
      std::mutex::lock(*(std::mutex **)(a1 + 232));
      v5 = *(char **)(v2 + 64);
      v4 = *(char **)(v2 + 72);
      if (v5 != v4)
      {
        while (*(_QWORD *)v5 != v3 + 120)
        {
          v5 += 8;
          if (v5 == v4)
          {
            v5 = *(char **)(v2 + 72);
            break;
          }
        }
      }
      if (v5 != v4)
      {
        v6 = v4 - (v5 + 8);
        if (v4 != v5 + 8)
          memmove(v5, v5 + 8, v4 - (v5 + 8));
        *(_QWORD *)(v2 + 72) = &v5[v6];
      }
      std::mutex::unlock((std::mutex *)v2);
    }
  }
  v7 = *(std::recursive_mutex **)(a1 + 464);
  if (v7)
    sub_19C3BBBD8(v7, a1, 0);
  v8 = *(_QWORD *)(a1 + 480);
  *(_QWORD *)(a1 + 480) = 0;
  if (v8)
    sub_19C31BB34(v8);
  v9 = *(std::__shared_weak_count **)(a1 + 472);
  if (!v9)
    goto LABEL_20;
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (v11)
  {
LABEL_20:
    v12 = *(const void **)(a1 + 456);
    if (!v12)
      goto LABEL_22;
    goto LABEL_21;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  v12 = *(const void **)(a1 + 456);
  if (v12)
LABEL_21:
    CFRelease(v12);
LABEL_22:
  *(_QWORD *)(a1 + 456) = 0;
  v13 = *(const void **)(a1 + 432);
  if (v13)
    CFRelease(v13);
  *(_QWORD *)(a1 + 432) = 0;
  v14 = *(std::__shared_weak_count **)(a1 + 424);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  *(_QWORD *)(a1 + 344) = &off_1E3D34E50;
  sub_19C31BBFC(*(_QWORD **)(a1 + 400));
  sub_19C31BC44(*(_QWORD **)(a1 + 376));
  v17 = *(_QWORD *)(a1 + 336);
  *(_QWORD *)(a1 + 336) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *(_QWORD *)(a1 + 328);
  *(_QWORD *)(a1 + 328) = 0;
  if (v18)
  {
    CFRelease(*(CFTypeRef *)v18);
    v19 = *(void **)(v18 + 16);
    if (v19)

    MEMORY[0x1A1AD355C](v18, 0x10E0C40F5622EBCLL);
  }
  v20 = *(_QWORD *)(a1 + 320);
  *(_QWORD *)(a1 + 320) = 0;
  if (v20)
  {
    CFRelease(*(CFTypeRef *)v20);
    v21 = *(void **)(v20 + 16);
    if (v21)

    MEMORY[0x1A1AD355C](v20, 0x10E0C40F5622EBCLL);
  }
  v22 = *(_QWORD *)(a1 + 312);
  *(_QWORD *)(a1 + 312) = 0;
  if (v22)
  {
    CFRelease(*(CFTypeRef *)v22);
    v23 = *(void **)(v22 + 16);
    if (v23)

    MEMORY[0x1A1AD355C](v22, 0x10E0C40F5622EBCLL);
  }
  v24 = *(_QWORD *)(a1 + 304);
  *(_QWORD *)(a1 + 304) = 0;
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  v25 = *(_QWORD *)(a1 + 296);
  *(_QWORD *)(a1 + 296) = 0;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  v26 = *(_QWORD *)(a1 + 288);
  *(_QWORD *)(a1 + 288) = 0;
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  v27 = *(_QWORD *)(a1 + 280);
  *(_QWORD *)(a1 + 280) = 0;
  if (v27)
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  v28 = *(_QWORD *)(a1 + 272);
  *(_QWORD *)(a1 + 272) = 0;
  if (v28)
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
  v29 = *(_QWORD *)(a1 + 264);
  *(_QWORD *)(a1 + 264) = 0;
  if (v29)
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
  v30 = *(std::__shared_weak_count **)(a1 + 256);
  if (v30)
  {
    v31 = (unint64_t *)&v30->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  v33 = *(std::__shared_weak_count **)(a1 + 240);
  if (v33)
  {
    v34 = (unint64_t *)&v33->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  v36 = *(_QWORD **)(a1 + 208);
  if (v36)
  {
    v37 = *(_QWORD **)(a1 + 216);
    v38 = *(void **)(a1 + 208);
    if (v37 != v36)
    {
      do
      {
        v40 = *--v37;
        v39 = v40;
        *v37 = 0;
        if (v40)
          (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
      }
      while (v37 != v36);
      v38 = *(void **)(a1 + 208);
    }
    *(_QWORD *)(a1 + 216) = v36;
    operator delete(v38);
  }
  v41 = *(_QWORD *)(a1 + 184);
  if (v41)
  {
    v42 = *(_QWORD *)(a1 + 192);
    v43 = *(void **)(a1 + 184);
    if (v42 != v41)
    {
      do
      {
        v44 = *(std::__shared_weak_count **)(v42 - 8);
        if (v44)
        {
          v45 = (unint64_t *)&v44->__shared_owners_;
          do
            v46 = __ldaxr(v45);
          while (__stlxr(v46 - 1, v45));
          if (!v46)
          {
            ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
            std::__shared_weak_count::__release_weak(v44);
          }
        }
        v42 -= 16;
      }
      while (v42 != v41);
      v43 = *(void **)(a1 + 184);
    }
    *(_QWORD *)(a1 + 192) = v41;
    operator delete(v43);
  }
  v47 = *(const void **)(a1 + 176);
  if (v47)
    CFRelease(v47);
  *(_QWORD *)(a1 + 176) = 0;
  v48 = *(_QWORD **)(a1 + 152);
  if (v48)
  {
    v49 = *(_QWORD **)(a1 + 160);
    v50 = *(void **)(a1 + 152);
    if (v49 != v48)
    {
      do
      {
        v52 = *--v49;
        v51 = v52;
        *v49 = 0;
        if (v52)
          (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
      }
      while (v49 != v48);
      v50 = *(void **)(a1 + 152);
    }
    *(_QWORD *)(a1 + 160) = v48;
    operator delete(v50);
  }
  v53 = *(_QWORD *)(a1 + 128);
  if (v53)
  {
    v54 = *(_QWORD *)(a1 + 136);
    v55 = *(void **)(a1 + 128);
    if (v54 != v53)
    {
      do
      {
        v56 = *(std::__shared_weak_count **)(v54 - 8);
        if (v56)
        {
          v57 = (unint64_t *)&v56->__shared_owners_;
          do
            v58 = __ldaxr(v57);
          while (__stlxr(v58 - 1, v57));
          if (!v58)
          {
            ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
            std::__shared_weak_count::__release_weak(v56);
          }
        }
        v54 -= 16;
      }
      while (v54 != v53);
      v55 = *(void **)(a1 + 128);
    }
    *(_QWORD *)(a1 + 136) = v53;
    operator delete(v55);
  }
  v59 = *(const void **)(a1 + 120);
  if (v59)
    CFRelease(v59);
  *(_QWORD *)(a1 + 120) = 0;
  v60 = *(_QWORD *)(a1 + 96);
  if (v60)
  {
    v61 = *(_QWORD *)(a1 + 104);
    v62 = *(void **)(a1 + 96);
    if (v61 != v60)
    {
      do
      {
        v61 -= 40;
        sub_19C31BC8C(v61);
      }
      while (v61 != v60);
      v62 = *(void **)(a1 + 96);
    }
    *(_QWORD *)(a1 + 104) = v60;
    operator delete(v62);
  }
  v63 = *(const void **)(a1 + 88);
  if (v63)
    CFRelease(v63);
  *(_QWORD *)(a1 + 88) = 0;
  v64 = *(_QWORD *)(a1 + 64);
  if (v64)
  {
    v65 = *(_QWORD *)(a1 + 72);
    v66 = *(void **)(a1 + 64);
    if (v65 != v64)
    {
      do
      {
        v67 = *(std::__shared_weak_count **)(v65 - 8);
        if (v67)
        {
          v68 = (unint64_t *)&v67->__shared_owners_;
          do
            v69 = __ldaxr(v68);
          while (__stlxr(v69 - 1, v68));
          if (!v69)
          {
            ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
            std::__shared_weak_count::__release_weak(v67);
          }
        }
        v65 -= 16;
      }
      while (v65 != v64);
      v66 = *(void **)(a1 + 64);
    }
    *(_QWORD *)(a1 + 72) = v64;
    operator delete(v66);
  }
  v70 = *(std::__shared_weak_count **)(a1 + 56);
  if (v70)
  {
    v71 = (unint64_t *)&v70->__shared_owners_;
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  v73 = *(void **)(a1 + 24);
  if (v73)
  {
    *(_QWORD *)(a1 + 32) = v73;
    operator delete(v73);
  }
  v74 = *(std::__shared_weak_count **)(a1 + 16);
  if (v74)
    std::__shared_weak_count::__release_weak(v74);
  return a1;
}

void sub_19C31BB34(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void **v5;
  void *v6;
  void **v7;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 48);
    v4 = *(void **)(a1 + 40);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0)
          operator delete(*(void **)(v3 - 24));
        v3 -= 24;
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 40);
    }
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v4);
  }
  v5 = *(void ***)(a1 + 16);
  if (v5)
  {
    do
    {
      v7 = (void **)*v5;
      sub_19C31BF28((uint64_t)(v5 + 5));
      if (*((char *)v5 + 39) < 0)
        operator delete(v5[2]);
      operator delete(v5);
      v5 = v7;
    }
    while (v7);
  }
  v6 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v6)
    operator delete(v6);
  JUMPOUT(0x1A1AD355CLL);
}

void sub_19C31BBFC(_QWORD *a1)
{
  if (a1)
  {
    sub_19C31BBFC(*a1);
    sub_19C31BBFC(a1[1]);
    sub_19C2E457C(a1[9]);
    sub_19C2E457C(a1[6]);
    operator delete(a1);
  }
}

void sub_19C31BC44(_QWORD *a1)
{
  if (a1)
  {
    sub_19C31BC44(*a1);
    sub_19C31BC44(a1[1]);
    sub_19C2E457C(a1[8]);
    sub_19C2E457C(a1[5]);
    operator delete(a1);
  }
}

void *sub_19C31BC8C(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  void *result;

  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v2)
  {
    v3 = *(void **)v2;
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)(v2 + 8) = v3;
      operator delete(v3);
    }
    MEMORY[0x1A1AD355C](v2, 0x1080C409A65DFB4);
  }
  v4 = *(uint64_t **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v4)
  {
    v5 = *v4;
    if (*v4)
    {
      v6 = *(_QWORD *)(v5 + 24);
      if (v6)
      {
        sub_19C3B4094(v6 + 8);
        MEMORY[0x1A1AD355C](v6, 0x1020C403F824CD1);
        if (*(_QWORD *)v5)
          free(*(void **)v5);
      }
      MEMORY[0x1A1AD355C](v5, 0x1030C40FC63861FLL);
    }
    MEMORY[0x1A1AD355C](v4, 0x20C4093837F09);
  }
  result = *(void **)a1;
  if (*(_QWORD *)a1)
    result = (void *)munmap(result, *(_QWORD *)(a1 + 8));
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

uint64_t sub_19C31BD74(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E3D34E50;
  sub_19C31BBFC(*(_QWORD **)(a1 + 56));
  sub_19C31BC44(*(_QWORD **)(a1 + 32));
  return a1;
}

void sub_19C31BDB0(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E3D34E50;
  sub_19C31BBFC(*(_QWORD **)(a1 + 56));
  sub_19C31BC44(*(_QWORD **)(a1 + 32));
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C31BDFC(uint64_t a1, unint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  BOOL v8;
  BOOL v9;

  v4 = *(_QWORD **)(a1 + 32);
  v2 = (_QWORD *)(a1 + 32);
  v3 = v4;
  if (!v4)
    return 0;
  v5 = v2;
  do
  {
    if ((unint64_t)(v3 + 4) >= a2)
      v6 = v3;
    else
      v6 = v3 + 1;
    if ((unint64_t)(v3 + 4) >= a2)
      v5 = v3;
    v3 = (_QWORD *)*v6;
  }
  while (*v6);
  v7 = (unint64_t)(v5 + 4);
  if (v5 == v2)
  {
    v8 = 1;
    v9 = 0;
  }
  else
  {
    v8 = v7 >= a2;
    v9 = v7 == a2;
  }
  if (!v9 && v8)
    return 0;
  else
    return *((unsigned int *)v5 + 20);
}

uint64_t *sub_19C31BE44@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  unsigned int v8;
  BOOL v9;
  uint64_t *v10;
  uint64_t *v11;

  v6 = *(_QWORD *)(a1 + 56);
  result = (uint64_t *)(a1 + 56);
  v5 = v6;
  if (!v6)
    goto LABEL_12;
  v7 = result;
  do
  {
    v8 = *(_DWORD *)(v5 + 32);
    v9 = v8 >= a2;
    if (v8 >= a2)
      v10 = (uint64_t *)v5;
    else
      v10 = (uint64_t *)(v5 + 8);
    if (v9)
      v7 = (uint64_t *)v5;
    v5 = *v10;
  }
  while (*v10);
  if (v7 != result && *((_DWORD *)v7 + 8) <= a2)
  {
    a3[1] = 0;
    a3[2] = 0;
    *a3 = (uint64_t)(a3 + 1);
    sub_19C2E4334(a3, (_QWORD *)v7[5], v7 + 6);
    a3[4] = 0;
    a3[3] = (uint64_t)(a3 + 4);
    v11 = a3 + 3;
    v11[2] = 0;
    return sub_19C2E4334(v11, (_QWORD *)v7[8], v7 + 9);
  }
  else
  {
LABEL_12:
    a3[1] = 0;
    *a3 = (uint64_t)(a3 + 1);
    a3[5] = 0;
    a3[4] = 0;
    a3[2] = 0;
    a3[3] = (uint64_t)(a3 + 4);
  }
  return result;
}

void sub_19C31BF04(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t *v2;

  sub_19C2E457C(*v2);
  sub_19C2E457C(*v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19C31BF28(uint64_t a1)
{
  char *v2;
  void *v3;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v2 = *(char **)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = *(char **)v2;
      v6 = *((_QWORD *)v2 + 5);
      if (v6)
      {
        v7 = *((_QWORD *)v2 + 6);
        v8 = (void *)*((_QWORD *)v2 + 5);
        if (v7 != v6)
        {
          do
          {
            if (*(char *)(v7 - 1) < 0)
              operator delete(*(void **)(v7 - 24));
            v7 -= 24;
          }
          while (v7 != v6);
          v8 = (void *)*((_QWORD *)v2 + 5);
        }
        *((_QWORD *)v2 + 6) = v6;
        operator delete(v8);
      }
      if (v2[39] < 0)
        operator delete(*((void **)v2 + 2));
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

void sub_19C31BFE4(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C31C008(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_19C31C020(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN2LM22CompositeLanguageModelEE27__shared_ptr_default_deleteIS2_S2_EE"
    || ((v3 & (unint64_t)"NSt3__110shared_ptrIN2LM22CompositeLanguageModelEE27__shared_ptr_default_deleteIS2_S2_EE" & 0x8000000000000000) != 0) != __OFSUB__(v3, "NSt3__110shared_ptrIN2LM22CompositeLanguageModelEE27__shared_ptr_default_deleteIS2_S2_EE")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN2LM22CompositeLanguageModelEE27__shared_ptr_default_deleteIS2_S2_EE" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_19C31C078(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 48))
  {
    sub_19C2E457C(*(_QWORD *)(a1 + 32));
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_19C31C0B8(uint64_t a1, CFTypeRef cf, uint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  void *v6;
  const __CFDictionary *v7;
  const void *Value;
  CFTypeID TypeID;
  CFIndex Count;
  int v11;
  char *v12;
  char *v13;
  int64x2_t v14;
  CFLocaleIdentifier *v15;
  CFLocaleIdentifier *v16;
  char *v17;
  CFLocaleRef v18;
  const __CFString *v19;
  int *v20;
  CFTypeID v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  CFTypeRef *v28;
  void *exception;
  CFLocaleIdentifier *v30;
  CFLocaleIdentifier *v31;
  const void *v32;
  const void *v33;
  const __CFArray *v34;
  char *i;
  const void *v36;
  const void *v37;
  CFArrayRef v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  const void *v42;
  const void *v43;
  CFTypeRef v44;
  const __CFArray *v45;
  CFIndex v46;
  CFIndex v47;
  const __CFArray *v48;
  CFIndex v49;
  unint64_t v50;
  uint64_t v51;
  const void *v52;
  uint64_t *v53;
  _QWORD *v54;
  char *v55;
  NSObject *v56;
  void **v57;
  const char *v58;
  void **v59;
  void **v60;
  CFTypeRef v61;
  CFIndex v63;
  const void *ValueAtIndex;
  const void *v65;
  CFTypeID v66;
  char *v67;
  int64x2_t v68;
  char *v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  char *v73;
  char *v74;
  _QWORD *v75;
  uint64_t v76;
  unint64_t v77;
  _QWORD *v78;
  int64x2_t v79;
  uint64_t v80;
  _OWORD *v81;
  char *v82;
  uint64_t v83;
  __int128 v84;
  uint64_t v85;
  const void *v86;
  const void *v87;
  uint64_t v88;
  const void *v89;
  const void *v90;
  char *v91;
  const void *v92;
  const void *v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  void *v98;
  void *v99;
  int v100;
  int64x2_t v101;
  char *v102;
  char **v103;
  CFTypeRef *v104;
  CFTypeRef cfa[2];
  char v106;
  uint8_t buf[24];
  CFTypeRef v108;
  CFLocaleIdentifier *v109;
  CFLocaleIdentifier *v110;
  uint64_t v111;
  uint64_t v112;

  v112 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &off_1E3D36968;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  v103 = (char **)(a1 + 184);
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  v104 = (CFTypeRef *)(a1 + 176);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_DWORD *)(a1 + 360) = -1;
  *(_QWORD *)(a1 + 344) = &off_1E3D34E50;
  *(_QWORD *)(a1 + 352) = 0xC0000000C0000000;
  *(_QWORD *)(a1 + 368) = a1 + 376;
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 400) = 0;
  *(_QWORD *)(a1 + 408) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 392) = a1 + 400;
  *(_OWORD *)(a1 + 416) = *(_OWORD *)a3;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a1 + 432) = CFRetain(cf);
  *(_QWORD *)(a1 + 448) = 50;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  v5 = *(_QWORD *)(a1 + 416);
  v6 = *(void **)(v5 + 8);
  v95 = *(unsigned __int8 *)(v5 + 16);
  v100 = *(unsigned __int8 *)(v5 + 17);
  v96 = MEMORY[0x1A1AD2A04](v6);
  v7 = *(const __CFDictionary **)(a1 + 432);
  memset(buf, 0, sizeof(buf));
  if (!v7
    || !kLMLanguageLocalesKey
    || (Value = CFDictionaryGetValue(v7, (const void *)kLMLanguageLocalesKey)) == 0
    || (TypeID = CFArrayGetTypeID(), TypeID != CFGetTypeID(Value)))
  {
    LOBYTE(cfa[0]) = 0;
    goto LABEL_9;
  }
  Count = CFArrayGetCount((CFArrayRef)Value);
  v11 = Count;
  if (Count << 32)
  {
    if (Count << 32 < 0)
      sub_19C2A18E8();
    v12 = (char *)operator new(8 * (int)Count);
    v13 = &v12[8 * v11];
    v14 = vdupq_n_s64((unint64_t)v12);
  }
  else
  {
    v13 = 0;
    v14 = 0uLL;
  }
  v101 = v14;
  v99 = v6;
  if (v11 < 1)
  {
LABEL_148:
    *(int64x2_t *)cfa = v101;
    v88 = v101.i64[1];
    v110 = 0;
    v111 = 0;
    v109 = 0;
    sub_19C2EC8A8(&v109, (CFTypeRef *)v101.i64[0], (CFTypeRef *)v101.i64[1], (v101.i64[1] - v101.i64[0]) >> 3);
    v6 = v99;
    if (v101.i64[0])
    {
      while (v88 != v101.i64[0])
      {
        v90 = *(const void **)(v88 - 8);
        v88 -= 8;
        v89 = v90;
        if (v90)
          CFRelease(v89);
      }
      operator delete((void *)v101.i64[0]);
    }
    goto LABEL_10;
  }
  v63 = 0;
  v94 = v11;
  while (1)
  {
    v3 = (unint64_t)Value;
    ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)Value, v63);
    v65 = ValueAtIndex;
    if (!ValueAtIndex)
      break;
    CFRetain(ValueAtIndex);
    v66 = CFGetTypeID(v65);
    if (v66 != CFStringGetTypeID())
    {
      CFRelease(v65);
      break;
    }
    v67 = (char *)v101.i64[1];
    v68.i64[0] = v101.i64[0];
    if (v101.i64[1] >= (unint64_t)v13)
    {
      v69 = (char *)v101.i64[0];
      v70 = (v101.i64[1] - v101.i64[0]) >> 3;
      v71 = v70 + 1;
      if ((unint64_t)(v70 + 1) >> 61)
        sub_19C2A18E8();
      if ((uint64_t)&v13[-v101.i64[0]] >> 2 > v71)
        v71 = (uint64_t)&v13[-v101.i64[0]] >> 2;
      if ((unint64_t)&v13[-v101.i64[0]] >= 0x7FFFFFFFFFFFFFF8)
        v72 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v72 = v71;
      if (v72)
      {
        if (v72 >> 61)
          sub_19C2A143C();
        v73 = (char *)operator new(8 * v72);
      }
      else
      {
        v73 = 0;
      }
      v74 = &v73[8 * v70];
      *(_QWORD *)v74 = v65;
      v75 = v74 + 8;
      v76 = v101.i64[1] - v101.i64[0];
      if (v101.i64[1] == v101.i64[0])
      {
        v102 = &v73[8 * v70];
      }
      else
      {
        v77 = v76 - 8;
        if ((unint64_t)(v76 - 8) < 0x78)
        {
          v78 = (_QWORD *)v101.i64[1];
          goto LABEL_143;
        }
        if ((unint64_t)&v73[v101.i64[1] - v101.i64[0] - (v77 & 0xFFFFFFFFFFFFFFF8) - 8] < v101.i64[1]
          && (v78 = (_QWORD *)v101.i64[1], v101.i64[1] - (v77 & 0xFFFFFFFFFFFFFFF8) - 8 < (unint64_t)v74))
        {
          do
          {
LABEL_143:
            v85 = *--v78;
            *((_QWORD *)v74 - 1) = v85;
            v74 -= 8;
            *v78 = 0;
          }
          while (v78 != (_QWORD *)v101.i64[0]);
        }
        else
        {
          v80 = (v77 >> 3) + 1;
          v74 -= 8 * (v80 & 0x3FFFFFFFFFFFFFFCLL);
          v81 = (_OWORD *)(v101.i64[1] - 32);
          v82 = &v73[8 * v70 - 16];
          v83 = v80 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v84 = v81[1];
            *((_OWORD *)v82 - 1) = *v81;
            *(_OWORD *)v82 = v84;
            *v81 = 0uLL;
            v81[1] = 0uLL;
            v81 -= 2;
            v82 -= 32;
            v83 -= 4;
          }
          while (v83);
          if (v80 != (v80 & 0x3FFFFFFFFFFFFFFCLL))
          {
            v78 = (_QWORD *)(v101.i64[1] - 8 * (v80 & 0x3FFFFFFFFFFFFFFCLL));
            goto LABEL_143;
          }
        }
        v102 = v74;
        while (v67 != v69)
        {
          v87 = (const void *)*((_QWORD *)v67 - 1);
          v67 -= 8;
          v86 = v87;
          if (v87)
            CFRelease(v86);
        }
      }
      if (v69)
        operator delete(v69);
      v13 = &v73[8 * v72];
      v79.i64[0] = (uint64_t)v102;
      v79.i64[1] = (uint64_t)v75;
      v101 = v79;
      goto LABEL_116;
    }
    *(_QWORD *)v101.i64[1] = v65;
    v68.i64[1] = v101.i64[1] + 8;
    v101 = v68;
LABEL_116:
    if (++v63 == v94)
      goto LABEL_148;
  }
  LOBYTE(cfa[0]) = 0;
  v6 = v99;
  if (v101.i64[0])
  {
    v91 = (char *)v101.i64[1];
    if (v101.i64[1] != v101.i64[0])
    {
      do
      {
        v93 = (const void *)*((_QWORD *)v91 - 1);
        v91 -= 8;
        v92 = v93;
        if (v93)
          CFRelease(v92);
      }
      while (v91 != (char *)v101.i64[0]);
      v91 = (char *)v101.i64[0];
    }
    operator delete(v91);
  }
LABEL_9:
  v109 = 0;
  v110 = 0;
  v111 = 0;
LABEL_10:
  v16 = v109;
  v15 = v110;
  if (v109 == v110)
  {
    v17 = 0;
    if (!v110)
      goto LABEL_39;
    goto LABEL_32;
  }
  v98 = v6;
  v17 = 0;
  do
  {
    v18 = CFLocaleCreate(0, *v16);
    if (v18)
    {
      cfa[0] = v18;
      if ((unint64_t)v17 < *(_QWORD *)&buf[16])
      {
        *(_QWORD *)v17 = v18;
        v17 += 8;
        *(_QWORD *)&buf[8] = v17;
      }
      else
      {
        v17 = sub_19C345028((char **)buf, cfa);
        *(_QWORD *)&buf[8] = v17;
        if (cfa[0])
          CFRelease(cfa[0]);
      }
    }
    else
    {
      if (qword_1EDB97100 == -1)
      {
        v19 = *v16;
        if (!*v16)
          goto LABEL_28;
      }
      else
      {
        dispatch_once(&qword_1EDB97100, &unk_1E3D3BED0);
        v19 = *v16;
        if (!*v16)
        {
LABEL_28:
          exception = __cxa_allocate_exception(0x10uLL);
          MEMORY[0x1A1AD3154](exception, "Could not construct");
          __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
        }
      }
      v20 = (int *)qword_1EDB970F8;
      v21 = CFStringGetTypeID();
      v3 &= 0xFFFFFFFFFFFFFF00;
      if (v21 == CFGetTypeID(v19))
      {
        sub_19C2E50A4(cfa, v19);
        v28 = cfa;
        if (v106 < 0)
          LOBYTE(v28) = cfa[0];
      }
      else
      {
        cfa[0] = (CFTypeRef)v3;
        v106 = 0;
        v28 = cfa;
      }
      sub_19C3E8FF4(v20, v22, "Unable to construct locale: %s", v23, v24, v25, v26, v27, (char)v28);
      if (v106 < 0)
        operator delete((void *)cfa[0]);
    }
    ++v16;
  }
  while (v16 != v15);
  v15 = v109;
  v6 = v98;
  if (v109)
  {
LABEL_32:
    v30 = v110;
    v31 = v15;
    if (v110 != v15)
    {
      do
      {
        v33 = *--v30;
        v32 = v33;
        if (v33)
          CFRelease(v32);
      }
      while (v30 != v15);
      v31 = v109;
    }
    v110 = v15;
    operator delete(v31);
    v17 = *(char **)&buf[8];
  }
LABEL_39:
  if (*(char **)buf == v17)
  {
    v34 = 0;
    if (!v17)
      goto LABEL_48;
  }
  else
  {
    v34 = sub_19C31CF90(*(char **)buf, v17);
    v17 = *(char **)buf;
    if (!*(_QWORD *)buf)
      goto LABEL_48;
  }
  for (i = *(char **)&buf[8]; i != v17; i -= 8)
  {
    v37 = (const void *)*((_QWORD *)i - 1);
    v36 = v37;
    if (v37)
      CFRelease(v36);
  }
  *(_QWORD *)&buf[8] = v17;
  operator delete(v17);
LABEL_48:
  if (*v104)
    CFRelease(*v104);
  *v104 = v34;
  if (v34 && CFArrayGetCount(v34))
  {
LABEL_65:
    v44 = *v104;
    if (*v104)
      CFRetain(*v104);
    sub_19C31D164(cfa, v44);
    v45 = (const __CFArray *)cfa[0];
    if (cfa[0])
    {
      v46 = CFArrayGetCount((CFArrayRef)cfa[0]);
      v47 = v46;
      v48 = (const __CFArray *)cfa[0];
      if (cfa[0])
      {
        v49 = CFArrayGetCount((CFArrayRef)cfa[0]);
        if (!v47)
          goto LABEL_85;
      }
      else
      {
        v49 = 0;
        if (!v46)
          goto LABEL_85;
      }
      v50 = 0;
      do
      {
        if (v45 == v48 && v49 == v50)
          break;
        sub_19C31D210(buf, v45, v50);
        v51 = operator new();
        v52 = *(const void **)buf;
        *(_OWORD *)v51 = 0u;
        *(_OWORD *)(v51 + 16) = 0u;
        *(_OWORD *)(v51 + 32) = 0u;
        *(_OWORD *)(v51 + 48) = 0u;
        *(_OWORD *)(v51 + 64) = 0u;
        *(_OWORD *)(v51 + 80) = 0u;
        *(_OWORD *)(v51 + 96) = 0u;
        *(_OWORD *)(v51 + 112) = 0u;
        *(_OWORD *)(v51 + 128) = 0u;
        if (v52)
        {
          CFRetain(v52);
          if (*(_QWORD *)v51)
            CFRelease(*(CFTypeRef *)v51);
          *(_QWORD *)v51 = v52;
        }
        v53 = *(uint64_t **)(a1 + 192);
        if ((unint64_t)v53 >= *(_QWORD *)(a1 + 200))
        {
          v55 = sub_19C31D480(v103, v51);
        }
        else
        {
          *v53 = v51;
          v54 = (_QWORD *)operator new();
          *v54 = &off_1E3D31150;
          v54[1] = 0;
          v54[2] = 0;
          v54[3] = v51;
          v53[1] = (uint64_t)v54;
          v55 = (char *)(v53 + 2);
          *(_QWORD *)(a1 + 192) = v53 + 2;
        }
        *(_QWORD *)(a1 + 192) = v55;
        if (v52)
          CFRelease(v52);
        ++v50;
      }
      while (v47 != v50);
    }
LABEL_85:
    sub_19C3C07CC((uint64_t)&v109, *v104);
    if (v100)
    {
      if (qword_1EDB971F8 != -1)
        dispatch_once(&qword_1EDB971F8, &unk_1E3D3A1E0);
      v56 = qword_1EDB971F0;
      if (os_log_type_enabled((os_log_t)qword_1EDB971F0, OS_LOG_TYPE_DEFAULT))
      {
        v57 = (void **)&v109;
        if (v111 < 0)
          v57 = (void **)v109;
        *(_DWORD *)buf = 138412802;
        *(_QWORD *)&buf[4] = v96;
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = v57;
        *(_WORD *)&buf[22] = 2112;
        v108 = cf;
        v58 = "Creating Siri CompositeLanguageModel (%@) for locale(s) (%s):\n%@";
LABEL_105:
        _os_log_impl(&dword_19C291000, v56, OS_LOG_TYPE_DEFAULT, v58, buf, 0x20u);
      }
    }
    else if (v95)
    {
      if (qword_1EDB971F8 != -1)
        dispatch_once(&qword_1EDB971F8, &unk_1E3D3A1E0);
      v56 = qword_1EDB971F0;
      if (os_log_type_enabled((os_log_t)qword_1EDB971F0, OS_LOG_TYPE_DEFAULT))
      {
        v59 = (void **)&v109;
        if (v111 < 0)
          v59 = (void **)v109;
        *(_DWORD *)buf = 138412802;
        *(_QWORD *)&buf[4] = v96;
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = v59;
        *(_WORD *)&buf[22] = 2112;
        v108 = cf;
        v58 = "Creating multilingual CompositeLanguageModel (%@) for locale(s) (%s):\n%@";
        goto LABEL_105;
      }
    }
    else
    {
      if (qword_1EDB971F8 != -1)
        dispatch_once(&qword_1EDB971F8, &unk_1E3D3A1E0);
      v56 = qword_1EDB971F0;
      if (os_log_type_enabled((os_log_t)qword_1EDB971F0, OS_LOG_TYPE_DEFAULT))
      {
        v60 = (void **)&v109;
        if (v111 < 0)
          v60 = (void **)v109;
        *(_DWORD *)buf = 138412802;
        *(_QWORD *)&buf[4] = v96;
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = v60;
        *(_WORD *)&buf[22] = 2112;
        v108 = cf;
        v58 = "Creating CompositeLanguageModel (%@) for locale(s) (%s):\n%@";
        goto LABEL_105;
      }
    }
    if (SHIBYTE(v111) < 0)
    {
      operator delete(v109);
      v61 = cfa[0];
      if (!cfa[0])
        return a1;
    }
    else
    {
      v61 = cfa[0];
      if (!cfa[0])
        return a1;
    }
    CFRelease(v61);
    return a1;
  }
  if (v6)
  {
    CFRetain(v6);
    v109 = (CFLocaleIdentifier *)v6;
    sub_19C31CEA4(buf, (CFTypeRef *)&v109, 1uLL);
    v38 = sub_19C31CF90(*(char **)buf, *(char **)&buf[8]);
    if (*v104)
      CFRelease(*v104);
    *v104 = v38;
    v39 = *(_QWORD *)buf;
    if (*(_QWORD *)buf)
    {
      v40 = *(_QWORD *)&buf[8];
      v41 = *(void **)buf;
      if (*(_QWORD *)&buf[8] != *(_QWORD *)buf)
      {
        do
        {
          v43 = *(const void **)(v40 - 8);
          v40 -= 8;
          v42 = v43;
          if (v43)
            CFRelease(v42);
        }
        while (v40 != v39);
        v41 = *(void **)buf;
      }
      *(_QWORD *)&buf[8] = v39;
      operator delete(v41);
    }
    if (v109)
      CFRelease(v109);
    goto LABEL_65;
  }
  return a1;
}

void sub_19C31CBA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a2)
    sub_19C2CDAC8(exception_object);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_19C31CEA4(_QWORD *a1, CFTypeRef *a2, unint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  CFTypeRef v7;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    if (a3 >> 61)
      sub_19C2A18E8();
    v5 = a3;
    v6 = operator new(8 * a3);
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[v5];
    do
    {
      v7 = *a2;
      if (*a2)
        CFRetain(*a2);
      *v6++ = v7;
      ++a2;
      --v5;
    }
    while (v5 * 8);
    a1[1] = v6;
  }
  return a1;
}

void sub_19C31CF3C(_Unwind_Exception *exception_object)
{
  void **v1;
  char *v3;
  char *v4;
  void *v5;
  const void *v6;
  const void *v7;

  v3 = (char *)*v1;
  if (*v1)
  {
    v4 = (char *)v1[1];
    v5 = *v1;
    if (v4 != v3)
    {
      do
      {
        v7 = (const void *)*((_QWORD *)v4 - 1);
        v4 -= 8;
        v6 = v7;
        if (v7)
          CFRelease(v6);
      }
      while (v4 != v3);
      v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

CFArrayRef sub_19C31CF90(char *a1, char *a2)
{
  size_t v2;
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  __int128 v13;
  uint64_t v14;
  CFArrayRef v15;
  void *exception;

  v2 = a2 - a1;
  if (a2 == a1)
  {
    v5 = 0;
    v6 = 0;
    goto LABEL_13;
  }
  if ((v2 & 0x8000000000000000) != 0)
    sub_19C2A18E8();
  v4 = a1;
  v5 = (char *)operator new(a2 - a1);
  bzero(v5, v2);
  v6 = &v5[v2];
  if (v2 - 8 < 0x18)
  {
    v10 = v5;
    do
    {
LABEL_12:
      v14 = *(_QWORD *)v4;
      v4 += 8;
      *(_QWORD *)v10 = v14;
      v10 += 8;
    }
    while (v4 != a2);
    goto LABEL_13;
  }
  if ((unint64_t)(v5 - v4) < 0x20)
  {
    v10 = v5;
    goto LABEL_12;
  }
  v7 = 0;
  v8 = ((v2 - 8) >> 3) + 1;
  v9 = 8 * (v8 & 0x3FFFFFFFFFFFFFFCLL);
  v10 = &v5[v9];
  v11 = v8 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v12 = &v5[v7];
    v13 = *(_OWORD *)&v4[v7 + 16];
    *(_OWORD *)v12 = *(_OWORD *)&v4[v7];
    *((_OWORD *)v12 + 1) = v13;
    v7 += 32;
    v11 -= 4;
  }
  while (v11);
  if (v8 != (v8 & 0x3FFFFFFFFFFFFFFCLL))
  {
    v4 += v9;
    goto LABEL_12;
  }
LABEL_13:
  v15 = CFArrayCreate(0, (const void **)v5, (v6 - v5) >> 3, MEMORY[0x1E0C9B378]);
  if (!v15)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD3154](exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  if (v5)
    operator delete(v5);
  return v15;
}

void sub_19C31D0D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  __cxa_free_exception(v2);
  if (v1)
    operator delete(v1);
  _Unwind_Resume(a1);
}

void **sub_19C31D0F8(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  const void *v5;
  const void *v6;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v6 = (const void *)*((_QWORD *)v3 - 1);
        v3 -= 8;
        v5 = v6;
        if (v6)
          CFRelease(v5);
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

_QWORD *sub_19C31D164(_QWORD *a1, CFTypeRef cf)
{
  CFTypeID v3;
  void *exception;

  *a1 = cf;
  if (cf)
  {
    v3 = CFGetTypeID(cf);
    if (v3 != CFArrayGetTypeID())
    {
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1A1AD3154](exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
    }
  }
  return a1;
}

void sub_19C31D1E0(_Unwind_Exception *a1)
{
  CFTypeRef *v1;
  void *v2;

  __cxa_free_exception(v2);
  if (*v1)
    CFRelease(*v1);
  _Unwind_Resume(a1);
}

CFTypeRef sub_19C31D210(_QWORD *a1, CFArrayRef theArray, unint64_t a3)
{
  const void *ValueAtIndex;
  const void *v7;
  CFTypeRef result;

  if (CFArrayGetCount(theArray) <= a3
    || (ValueAtIndex = CFArrayGetValueAtIndex(theArray, a3), (v7 = ValueAtIndex) == 0))
  {
    __cxa_allocate_exception(0x10uLL);
    sub_19C31D944();
  }
  result = CFRetain(ValueAtIndex);
  *a1 = v7;
  return result;
}

void sub_19C31D27C()
{
  void *v0;

  __cxa_throw(v0, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
}

void sub_19C31D294(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19C31D2B4(uint64_t a1)
{
  const void *v2;
  uint64_t v3;
  const void *v4;
  const void *v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  _QWORD *v22;
  _QWORD *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;

  v2 = *(const void **)(a1 + 136);
  if (v2)
    CFRelease(v2);
  v3 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  if (v3)
  {
    v4 = *(const void **)(v3 + 16);
    if (v4)
      CFRelease(v4);
    v5 = *(const void **)(v3 + 8);
    if (v5)
      CFRelease(v5);
    MEMORY[0x1A1AD355C](v3, 0x1060C40950A32C8);
  }
  v6 = *(_QWORD **)(a1 + 104);
  if (v6)
  {
    v7 = *(_QWORD **)(a1 + 112);
    v8 = *(void **)(a1 + 104);
    if (v7 != v6)
    {
      do
      {
        v10 = *--v7;
        v9 = v10;
        *v7 = 0;
        if (v10)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      }
      while (v7 != v6);
      v8 = *(void **)(a1 + 104);
    }
    *(_QWORD *)(a1 + 112) = v6;
    operator delete(v8);
  }
  v11 = *(_QWORD **)(a1 + 80);
  if (v11)
  {
    v12 = *(_QWORD **)(a1 + 88);
    v13 = *(void **)(a1 + 80);
    if (v12 != v11)
    {
      do
      {
        v15 = *--v12;
        v14 = v15;
        *v12 = 0;
        if (v15)
          (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
      }
      while (v12 != v11);
      v13 = *(void **)(a1 + 80);
    }
    *(_QWORD *)(a1 + 88) = v11;
    operator delete(v13);
  }
  v16 = *(_QWORD **)(a1 + 56);
  if (v16)
  {
    v17 = *(_QWORD **)(a1 + 64);
    v18 = *(void **)(a1 + 56);
    if (v17 != v16)
    {
      do
      {
        v20 = *--v17;
        v19 = v20;
        *v17 = 0;
        if (v20)
          (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
      }
      while (v17 != v16);
      v18 = *(void **)(a1 + 56);
    }
    *(_QWORD *)(a1 + 64) = v16;
    operator delete(v18);
  }
  v21 = *(void **)(a1 + 32);
  if (v21)
  {
    *(_QWORD *)(a1 + 40) = v21;
    operator delete(v21);
  }
  v22 = *(_QWORD **)(a1 + 8);
  if (v22)
  {
    v23 = *(_QWORD **)(a1 + 16);
    v24 = *(void **)(a1 + 8);
    if (v23 != v22)
    {
      do
      {
        v26 = *--v23;
        v25 = v26;
        *v23 = 0;
        if (v26)
          (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
      }
      while (v23 != v22);
      v24 = *(void **)(a1 + 8);
    }
    *(_QWORD *)(a1 + 16) = v22;
    operator delete(v24);
  }
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
  *(_QWORD *)a1 = 0;
  return a1;
}

char *sub_19C31D480(char **a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  _QWORD *v11;
  char *v12;
  char *v13;
  char *v14;
  __int128 v15;
  char *v16;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  char *v21;
  char *v22;

  v2 = (a1[1] - *a1) >> 4;
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 60)
    sub_19C2A18E8();
  v6 = a1[2] - *a1;
  if (v6 >> 3 > v3)
    v3 = v6 >> 3;
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF0)
    v7 = 0xFFFFFFFFFFFFFFFLL;
  else
    v7 = v3;
  if (v7)
  {
    if (v7 >> 60)
      sub_19C2A143C();
    v8 = (char *)operator new(16 * v7);
  }
  else
  {
    v8 = 0;
  }
  v9 = &v8[16 * v2];
  v10 = &v8[16 * v7];
  *(_QWORD *)v9 = a2;
  v11 = (_QWORD *)operator new();
  *v11 = &off_1E3D31150;
  v11[1] = 0;
  v11[2] = 0;
  v11[3] = a2;
  *((_QWORD *)v9 + 1) = v11;
  v12 = v9 + 16;
  v21 = v9 + 16;
  v14 = *a1;
  v13 = a1[1];
  if (v13 == *a1)
  {
    v16 = a1[1];
  }
  else
  {
    do
    {
      v15 = *((_OWORD *)v13 - 1);
      v13 -= 16;
      *((_OWORD *)v9 - 1) = v15;
      v9 -= 16;
      *(_QWORD *)v13 = 0;
      *((_QWORD *)v13 + 1) = 0;
    }
    while (v13 != v14);
    v16 = *a1;
    v13 = a1[1];
    v12 = v21;
  }
  *a1 = v9;
  a1[1] = v12;
  a1[2] = v10;
  if (v13 == v16)
  {
    if (v13)
LABEL_17:
      operator delete(v13);
  }
  else
  {
    do
    {
      v22 = v13 - 16;
      v18 = (std::__shared_weak_count *)*((_QWORD *)v13 - 1);
      if (v18)
      {
        p_shared_owners = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v13 = v22;
    }
    while (v22 != v16);
    v13 = v16;
    if (v16)
      goto LABEL_17;
  }
  return v12;
}

void sub_19C31D61C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;

  va_start(va, a2);
  if (v2)
  {
    v4 = sub_19C31D2B4(v2);
    MEMORY[0x1A1AD355C](v4, 0x10E0C405C30B098);
  }
  sub_19C31D804((uint64_t)va);
  _Unwind_Resume(a1);
}

const void **sub_19C31D650(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

const void **sub_19C31D680(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  *a1 = 0;
  return a1;
}

uint64_t *sub_19C31D6B4(uint64_t *a1)
{
  uint64_t v2;
  void *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    CFRelease(*(CFTypeRef *)v2);
    v3 = *(void **)(v2 + 16);
    if (v3)

    MEMORY[0x1A1AD355C](v2, 0x10E0C40F5622EBCLL);
  }
  return a1;
}

const void **sub_19C31D710(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  *a1 = 0;
  return a1;
}

void **sub_19C31D744(void **a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  v2 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = *a1;
    if ((void *)v3 != v2)
    {
      do
      {
        v3 -= 40;
        sub_19C31BC8C(v3);
      }
      while ((void *)v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

const void **sub_19C31D7A4(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  *a1 = 0;
  return a1;
}

os_log_t sub_19C31D7D8()
{
  os_log_t result;

  result = os_log_create("com.apple.LanguageModeling", "CompositeLanguageModel");
  qword_1EDB971F0 = (uint64_t)result;
  return result;
}

uint64_t sub_19C31D804(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 16;
    v4 = *(std::__shared_weak_count **)(i - 8);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_19C31D894(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C31D8B8(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
  {
    sub_19C31D2B4(result);
    JUMPOUT(0x1A1AD355CLL);
  }
  return result;
}

uint64_t sub_19C31D8EC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN2LM23LocaleSpecificResourcesEE27__shared_ptr_default_deleteIS2_S2_EE"
    || ((v3 & (unint64_t)"NSt3__110shared_ptrIN2LM23LocaleSpecificResourcesEE27__shared_ptr_default_deleteIS2_S2_EE" & 0x8000000000000000) != 0) != __OFSUB__(v3, "NSt3__110shared_ptrIN2LM23LocaleSpecificResourcesEE27__shared_ptr_default_deleteIS2_S2_EE")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN2LM23LocaleSpecificResourcesEE27__shared_ptr_default_deleteIS2_S2_EE" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_19C31D944()
{
  JUMPOUT(0x1A1AD3154);
}

void sub_19C31D950(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  const __CFString *Value;
  uint64_t v9;
  const __CFString *v10;
  uint64_t v11;
  __CFDictionary *Mutable;
  _QWORD *v13;
  _QWORD *v14;
  const void *v15;
  uint64_t v16;
  unint64_t Count;
  int64_t v18;
  void *v19;
  const void **v20;
  int v21;
  const UInt8 *v22;
  CFIndex v23;
  CFStringRef v24;
  CFStringRef v25;
  int v26;
  const UInt8 *v27;
  CFIndex v28;
  CFStringRef v29;
  _QWORD *v30;
  _QWORD *v31;
  int64_t v32;
  uint64_t v33;
  const __CFArray *v34;
  const __CFArray *v35;
  CFIndex v36;
  const void *ValueAtIndex;
  _QWORD *v38;
  const __CFDictionary *v39;
  const __CFNumber *v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  BOOL v44;
  const __CFDictionary *v45;
  uint64_t *v46;
  CFDictionaryRef ***v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  const void *v51;
  const void *v52;
  CFMutableDictionaryRef v53;
  _QWORD *v54;
  uint64_t v55;
  const __CFArray *v56;
  const void *v57;
  uint64_t *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  CFTypeRef v69;
  NSObject *v70;
  const char *v71;
  CFDictionaryRef *v72;
  CFMutableDictionaryRef v73;
  const void **v74;
  void *v75;
  const void *v76;
  const void *v77;
  void *v78;
  void *v79;
  uint64_t v80;
  const void *v81;
  CFDictionaryRef *v82;
  CFDictionaryRef *v83;
  const __CFURL *v84;
  const __CFURL *v85;
  CFDictionaryRef **v86;
  uint64_t v87;
  uint64_t j;
  const __CFURL *v89;
  _BYTE *v90;
  CFDictionaryRef **v91;
  CFDictionaryRef *v92;
  uint64_t v93;
  _QWORD *v94;
  CFDictionaryRef **v95;
  CFDictionaryRef *v96;
  uint64_t v97;
  _QWORD *v98;
  CFDictionaryRef **v99;
  CFDictionaryRef **i;
  CFDictionaryRef *v101;
  const __CFNumber *v102;
  uint64_t v103;
  uint64_t v104;
  CFDictionaryRef *v105;
  uint64_t v106;
  CFDictionaryRef **v107;
  CFDictionaryRef *v108;
  uint64_t v109;
  _QWORD *v110;
  NSObject *v111;
  CFDictionaryRef *v112;
  uint64_t v113;
  _QWORD *v114;
  CFDictionaryRef **v115;
  CFDictionaryRef *v116;
  uint64_t v117;
  _QWORD *v118;
  _QWORD *v119;
  void *v120;
  void *v121;
  _QWORD *exception;
  void *v123;
  __n128 *v124;
  CFStringRef *v125;
  _QWORD *v126;
  __int128 *p_valuePtr;
  CFTypeRef **v128;
  CFTypeRef **v129;
  char v130;
  unint64_t v131;
  char v132;
  CFTypeRef v133;
  CFTypeID v134;
  int v135;
  const __CFNumber *v136;
  CFTypeID TypeID;
  CFTypeID v138;
  CFTypeRef **k;
  char v140;
  CFTypeRef v141;
  CFTypeID v142;
  int v143;
  const __CFNumber *v144;
  CFTypeID v145;
  CFTypeID v146;
  uint64_t v147;
  char *v148;
  char *v149;
  BOOL v150;
  unint64_t v151;
  double v152;
  char *v153;
  uint64_t v154;
  uint64_t *v155;
  uint64_t v156;
  double v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  double v161;
  uint64_t v162;
  char *v163;
  char *v164;
  unint64_t v166;
  double v167;
  char *v168;
  uint64_t v169;
  _QWORD *v170;
  uint64_t v171;
  double v172;
  uint64_t v173;
  double v174;
  uint64_t v175;
  uint64_t v176;
  const void *v177;
  char *v178;
  const void *v179;
  char *v180;
  char *v181;
  std::__shared_weak_count *v182;
  unint64_t *v183;
  unint64_t v184;
  char *v185;
  char *v186;
  void *v187;
  std::__shared_weak_count *v188;
  unint64_t *v189;
  unint64_t v190;
  char *v191;
  char *v192;
  void *v193;
  std::__shared_weak_count *v194;
  unint64_t *v195;
  unint64_t v196;
  char *v197;
  char *v198;
  void *v199;
  std::__shared_weak_count *v200;
  unint64_t *v201;
  unint64_t v202;
  char *v203;
  char *v204;
  void *v205;
  std::__shared_weak_count *v206;
  unint64_t *v207;
  unint64_t v208;
  char *v209;
  char *v210;
  void *v211;
  std::__shared_weak_count *v212;
  unint64_t *v213;
  unint64_t v214;
  char *v215;
  char *v216;
  void *v217;
  std::__shared_weak_count *v218;
  unint64_t *v219;
  unint64_t v220;
  char *v221;
  char *v222;
  void *v223;
  std::__shared_weak_count *v224;
  unint64_t *v225;
  unint64_t v226;
  char *v227;
  char *v228;
  void *v229;
  std::__shared_weak_count *v230;
  unint64_t *v231;
  unint64_t v232;
  char *v233;
  char *v234;
  void *v235;
  std::__shared_weak_count *v236;
  unint64_t *v237;
  unint64_t v238;
  char *v239;
  char *v240;
  void *v241;
  std::__shared_weak_count *v242;
  unint64_t *v243;
  unint64_t v244;
  std::__shared_weak_count *v245;
  unint64_t *v246;
  unint64_t v247;
  std::__shared_weak_count *v248;
  unint64_t *v249;
  unint64_t v250;
  std::__shared_weak_count *v251;
  unint64_t *v252;
  unint64_t v253;
  std::__shared_weak_count *v254;
  unint64_t *v255;
  unint64_t v256;
  std::__shared_weak_count *v257;
  unint64_t *v258;
  unint64_t v259;
  std::__shared_weak_count *v260;
  unint64_t *v261;
  unint64_t v262;
  std::__shared_weak_count *v263;
  unint64_t *v264;
  unint64_t v265;
  std::__shared_weak_count *v266;
  unint64_t *v267;
  unint64_t v268;
  void *v269;
  void *v270;
  void *__pa;
  const void **__p;
  const __CFAllocator *allocator;
  CFTypeRef v275[2];
  CFTypeRef v276[2];
  uint64_t v277;
  _QWORD v278[2];
  void (*v279)(_QWORD *, uint64_t);
  void *v280;
  CFStringRef *v281;
  uint64_t *v282;
  uint64_t *v283;
  uint64_t *v284;
  uint64_t *v285;
  uint64_t *v286;
  uint64_t *v287;
  uint64_t *v288;
  uint64_t *v289;
  uint64_t *v290;
  uint64_t *v291;
  uint64_t *v292;
  uint64_t *v293;
  uint64_t *v294;
  uint64_t *v295;
  uint64_t *v296;
  uint64_t *v297;
  uint64_t *v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t *v301;
  uint64_t v302;
  __n128 (*v303)(_QWORD *, uint64_t);
  void (*v304)(uint64_t);
  void *v305;
  char *v306;
  uint64_t v307;
  uint64_t v308;
  __n128 **v309;
  uint64_t v310;
  __n128 (*v311)(_QWORD *, uint64_t);
  void (*v312)(uint64_t);
  void *v313;
  char *v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t *v317;
  uint64_t v318;
  __n128 (*v319)(_QWORD *, uint64_t);
  void (*v320)(uint64_t);
  void *v321;
  char *v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t *v325;
  uint64_t v326;
  __n128 (*v327)(_QWORD *, uint64_t);
  void (*v328)(uint64_t);
  void *v329;
  char *v330;
  uint64_t v331;
  uint64_t v332;
  CFDictionaryRef ***v333;
  uint64_t v334;
  __n128 (*v335)(_QWORD *, uint64_t);
  void (*v336)(uint64_t);
  void *v337;
  char *v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t *v341;
  uint64_t v342;
  __n128 (*v343)(_QWORD *, uint64_t);
  void (*v344)(uint64_t);
  void *v345;
  char *v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t *v349;
  uint64_t v350;
  __n128 (*v351)(_QWORD *, uint64_t);
  void (*v352)(uint64_t);
  void *v353;
  char *v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t *v357;
  uint64_t v358;
  __n128 (*v359)(_QWORD *, uint64_t);
  void (*v360)(uint64_t);
  void *v361;
  char *v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t *v365;
  uint64_t v366;
  __n128 (*v367)(_QWORD *, uint64_t);
  void (*v368)(uint64_t);
  void *v369;
  char *v370;
  uint64_t v371;
  CFStringRef v372;
  CFStringRef *v373;
  uint64_t v374;
  __n128 (*v375)(_QWORD *, uint64_t);
  void (*v376)(uint64_t);
  void *v377;
  char *v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t *v381;
  uint64_t v382;
  __n128 (*v383)(uint64_t, uint64_t);
  void (*v384)(uint64_t);
  uint64_t v385;
  std::__shared_weak_count *v386;
  uint64_t v387;
  uint64_t *v388;
  uint64_t v389;
  __n128 (*v390)(uint64_t, uint64_t);
  void (*v391)(uint64_t);
  uint64_t v392;
  std::__shared_weak_count *v393;
  uint64_t v394;
  uint64_t *v395;
  uint64_t v396;
  __n128 (*v397)(uint64_t, uint64_t);
  void (*v398)(uint64_t);
  uint64_t v399;
  std::__shared_weak_count *v400;
  uint64_t v401;
  uint64_t *v402;
  uint64_t v403;
  __n128 (*v404)(uint64_t, uint64_t);
  void (*v405)(uint64_t);
  uint64_t v406;
  std::__shared_weak_count *v407;
  uint64_t v408;
  uint64_t *v409;
  uint64_t v410;
  __n128 (*v411)(uint64_t, uint64_t);
  void (*v412)(uint64_t);
  uint64_t v413;
  std::__shared_weak_count *v414;
  uint64_t v415;
  uint64_t *v416;
  uint64_t v417;
  __n128 (*v418)(uint64_t, uint64_t);
  void (*v419)(uint64_t);
  uint64_t v420;
  std::__shared_weak_count *v421;
  uint64_t v422;
  uint64_t *v423;
  uint64_t v424;
  __n128 (*v425)(uint64_t, uint64_t);
  void (*v426)(uint64_t);
  uint64_t v427;
  std::__shared_weak_count *v428;
  uint64_t v429;
  uint64_t *v430;
  uint64_t v431;
  __n128 (*v432)(uint64_t, uint64_t);
  void (*v433)(uint64_t);
  uint64_t v434;
  std::__shared_weak_count *v435;
  void *key[2];
  __int128 cf;
  uint64_t v438;
  void *v439;
  __int128 valuePtr;
  uint64_t v441;
  uint64_t v442;

  v442 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 416);
  if (*(_QWORD *)(v1 + 72))
  {
    v2 = operator new();
    sub_19C3FC9A4(v2, *(_QWORD *)(v1 + 72));
  }
  else
  {
    v2 = 0;
  }
  v3 = (_QWORD *)operator new();
  *v3 = &off_1E3D39C18;
  v3[1] = 0;
  v3[2] = 0;
  v3[3] = v2;
  v4 = *(std::__shared_weak_count **)(a1 + 240);
  *(_QWORD *)(a1 + 232) = v2;
  *(_QWORD *)(a1 + 240) = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    v2 = *(_QWORD *)(a1 + 232);
  }
  if (!v2)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    sub_19C2A6D48(&cf, "invalid language model creation options");
    sub_19C31237C(exception, &cf);
    __cxa_throw(exception, (struct type_info *)&unk_1E3D32968, (void (*)(void *))sub_19C3123E4);
  }
  if (CFDictionaryContainsKey(*(CFDictionaryRef *)(a1 + 432), (const void *)kLMLanguageModelUseMontrealKey))
  {
    v7 = *(_QWORD *)(a1 + 232);
    Value = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 432), (const void *)kLMLanguageModelUseMontrealKey);
    *(_BYTE *)(v7 + 360) = sub_19C29CB48(Value, 1);
  }
  if (CFDictionaryContainsKey(*(CFDictionaryRef *)(a1 + 432), (const void *)kLMLanguageModelUseLegacyStaticNgramModelsKey))
  {
    v9 = *(_QWORD *)(a1 + 232);
    v10 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 432), (const void *)kLMLanguageModelUseLegacyStaticNgramModelsKey);
    *(_BYTE *)(v9 + 361) = sub_19C29CB48(v10, 1);
  }
  v11 = *(_QWORD *)(a1 + 416);
  allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (*(_BYTE *)(v11 + 128))
  {
    v13 = *(_QWORD **)(v11 + 104);
    v14 = (_QWORD *)(v11 + 112);
    if (v13 != v14)
    {
      do
      {
        v21 = *((char *)v13 + 55);
        if (v21 >= 0)
          v22 = (const UInt8 *)(v13 + 4);
        else
          v22 = (const UInt8 *)v13[4];
        if (v21 >= 0)
          v23 = *((unsigned __int8 *)v13 + 55);
        else
          v23 = v13[5];
        v24 = CFStringCreateWithBytes(0, v22, v23, 0x8000100u, 0);
        *(_QWORD *)&cf = v24;
        if (!v24)
        {
          v120 = __cxa_allocate_exception(0x10uLL);
          MEMORY[0x1A1AD3154](v120, "Could not construct");
          __cxa_throw(v120, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
        }
        v25 = v24;
        v26 = *((char *)v13 + 79);
        if (v26 >= 0)
          v27 = (const UInt8 *)(v13 + 7);
        else
          v27 = (const UInt8 *)v13[7];
        if (v26 >= 0)
          v28 = *((unsigned __int8 *)v13 + 79);
        else
          v28 = v13[8];
        v29 = CFStringCreateWithBytes(0, v27, v28, 0x8000100u, 0);
        v372 = v29;
        if (!v29)
        {
          v121 = __cxa_allocate_exception(0x10uLL);
          MEMORY[0x1A1AD3154](v121, "Could not construct");
          __cxa_throw(v121, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
        }
        CFDictionaryAddValue(Mutable, v25, v29);
        CFRelease(v29);
        if ((_QWORD)cf)
          CFRelease((CFTypeRef)cf);
        v30 = (_QWORD *)v13[1];
        if (v30)
        {
          do
          {
            v31 = v30;
            v30 = (_QWORD *)*v30;
          }
          while (v30);
        }
        else
        {
          do
          {
            v31 = (_QWORD *)v13[2];
            v150 = *v31 == (_QWORD)v13;
            v13 = v31;
          }
          while (!v150);
        }
        v13 = v31;
      }
      while (v31 != v14);
    }
  }
  v15 = *(const void **)(a1 + 456);
  if (v15)
    CFRelease(v15);
  *(_QWORD *)(a1 + 456) = Mutable;
  v429 = 0;
  v430 = &v429;
  v431 = 0x3802000000;
  v432 = sub_19C3227E0;
  v433 = sub_19C3227F0;
  v435 = 0;
  v434 = 0;
  v422 = 0;
  v423 = &v422;
  v424 = 0x3802000000;
  v425 = sub_19C322848;
  v426 = sub_19C322858;
  v428 = 0;
  v427 = 0;
  v415 = 0;
  v416 = &v415;
  v417 = 0x3802000000;
  v418 = sub_19C322848;
  v419 = sub_19C322858;
  v421 = 0;
  v420 = 0;
  v408 = 0;
  v409 = &v408;
  v410 = 0x3802000000;
  v411 = sub_19C322848;
  v412 = sub_19C322858;
  v414 = 0;
  v413 = 0;
  v401 = 0;
  v402 = &v401;
  v403 = 0x3802000000;
  v404 = sub_19C322848;
  v405 = sub_19C322858;
  v407 = 0;
  v406 = 0;
  v394 = 0;
  v395 = &v394;
  v396 = 0x3802000000;
  v397 = sub_19C322848;
  v398 = sub_19C322858;
  v400 = 0;
  v399 = 0;
  v387 = 0;
  v388 = &v387;
  v389 = 0x3802000000;
  v390 = sub_19C322848;
  v391 = sub_19C322858;
  v393 = 0;
  v392 = 0;
  v380 = 0;
  v381 = &v380;
  v382 = 0x3802000000;
  v383 = sub_19C322848;
  v384 = sub_19C322858;
  v386 = 0;
  v385 = 0;
  v372 = 0;
  v373 = &v372;
  v374 = 0x4002000000;
  v375 = sub_19C3228B0;
  v376 = sub_19C3228D4;
  v379 = 0;
  v377 = 0;
  v378 = 0;
  v364 = 0;
  v365 = &v364;
  v366 = 0x4002000000;
  v367 = sub_19C3228B0;
  v368 = sub_19C3228D4;
  v371 = 0;
  v369 = 0;
  v370 = 0;
  v356 = 0;
  v357 = &v356;
  v358 = 0x4002000000;
  v359 = sub_19C3228B0;
  v360 = sub_19C3228D4;
  v363 = 0;
  v361 = 0;
  v362 = 0;
  v348 = 0;
  v349 = &v348;
  v350 = 0x4002000000;
  v351 = sub_19C3228B0;
  v352 = sub_19C3228D4;
  v355 = 0;
  v353 = 0;
  v354 = 0;
  v340 = 0;
  v341 = &v340;
  v342 = 0x4002000000;
  v343 = sub_19C3228B0;
  v344 = sub_19C3228D4;
  v347 = 0;
  v345 = 0;
  v346 = 0;
  v332 = 0;
  v333 = (CFDictionaryRef ***)&v332;
  v334 = 0x4002000000;
  v335 = sub_19C3228B0;
  v336 = sub_19C3228D4;
  v339 = 0;
  v337 = 0;
  v338 = 0;
  v324 = 0;
  v325 = &v324;
  v326 = 0x4002000000;
  v327 = sub_19C3228B0;
  v328 = sub_19C3228D4;
  v331 = 0;
  v329 = 0;
  v330 = 0;
  v316 = 0;
  v317 = &v316;
  v318 = 0x4002000000;
  v319 = sub_19C3228B0;
  v320 = sub_19C3228D4;
  v323 = 0;
  v321 = 0;
  v322 = 0;
  v308 = 0;
  v309 = (__n128 **)&v308;
  v310 = 0x4002000000;
  v311 = sub_19C3228B0;
  v312 = sub_19C3228D4;
  v314 = 0;
  v315 = 0;
  v313 = 0;
  v300 = 0;
  v301 = &v300;
  v302 = 0x4002000000;
  v303 = sub_19C3228B0;
  v304 = sub_19C3228D4;
  v306 = 0;
  v307 = 0;
  v305 = 0;
  v16 = *(_QWORD *)(a1 + 416);
  v278[0] = MEMORY[0x1E0C809B0];
  v278[1] = 0x40000000;
  v279 = sub_19C322974;
  v280 = &unk_1E3D3A158;
  v298 = &v380;
  v299 = a1;
  v281 = &v372;
  v282 = &v364;
  v283 = &v356;
  v284 = &v340;
  v285 = &v332;
  v286 = &v348;
  v287 = &v415;
  v288 = &v422;
  v289 = &v429;
  v290 = &v324;
  v291 = &v394;
  v292 = &v408;
  v293 = &v387;
  v294 = &v401;
  v295 = &v308;
  v296 = &v300;
  v297 = &v316;
  if (*(_QWORD *)v16 && *(_BYTE *)(*(_QWORD *)(v16 + 72) + 344))
  {
    Count = CFDictionaryGetCount(*(CFDictionaryRef *)v16);
    v18 = Count;
    if (Count)
    {
      if (Count >> 61)
        sub_19C2A18E8();
      __pa = operator new(8 * Count);
      bzero(__pa, 8 * v18);
      v19 = operator new(8 * v18);
      bzero(v19, 8 * v18);
      v20 = (const void **)__pa;
    }
    else
    {
      v20 = 0;
      v19 = 0;
    }
    __p = v20;
    CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)v16, v20, (const void **)v19);
    LOBYTE(key[0]) = 0;
    if (v18)
    {
      v32 = 0;
      v33 = 0;
      while (1)
      {
        v34 = (const __CFArray *)CFDictionaryGetValue(*((CFDictionaryRef *)v19 + v32), CFSTR("Resources"));
        if (LOBYTE(key[0]))
          break;
        v35 = v34;
        v36 = 0;
        while (v36 < CFArrayGetCount(v35))
        {
          ValueAtIndex = CFArrayGetValueAtIndex(v35, v36);
          v38 = operator new(0x28uLL);
          v38[1] = 0;
          v38[2] = 0;
          *v38 = &off_1E3D39B70;
          v38[4] = v33;
          v39 = (const __CFDictionary *)CFRetain(ValueAtIndex);
          v38[3] = v39;
          *(_QWORD *)&cf = v38 + 3;
          *((_QWORD *)&cf + 1) = v38;
          LODWORD(valuePtr) = 0;
          v40 = (const __CFNumber *)CFDictionaryGetValue(v39, CFSTR("Type"));
          CFNumberGetValue(v40, kCFNumberIntType, &valuePtr);
          if ((_DWORD)valuePtr != 15)
            ((void (*)(_QWORD *, __int128 *, void **))v279)(v278, &cf, key);
          v41 = (std::__shared_weak_count *)*((_QWORD *)&cf + 1);
          if (*((_QWORD *)&cf + 1))
          {
            v42 = (unint64_t *)(*((_QWORD *)&cf + 1) + 8);
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          ++v33;
          ++v36;
          if (LOBYTE(key[0]))
            goto LABEL_65;
        }
        ++v32;
        if (LOBYTE(key[0]))
          v44 = 0;
        else
          v44 = v32 < v18;
        if (!v44)
          goto LABEL_65;
      }
    }
    else
    {
LABEL_65:
      if (!v19)
      {
LABEL_67:
        if (__p)
          operator delete(__p);
        v16 = *(_QWORD *)(a1 + 416);
        goto LABEL_70;
      }
    }
    operator delete(v19);
    goto LABEL_67;
  }
LABEL_70:
  if (*(_BYTE *)(v16 + 16))
  {
    sub_19C323E94(a1, *(CFTypeRef *)(a1 + 176));
  }
  else
  {
    v45 = *(const __CFDictionary **)(a1 + 432);
    v46 = v341;
    v47 = v333;
    v48 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 232) + 344);
    v49 = sub_19C324E84((char **)a1);
    sub_19C3C0BCC(v45, v46 + 5, v47 + 5, v48 != 0, v49);
    v50 = sub_19C324E84((char **)a1);
    sub_19C324FE0(v50, v309 + 5, (uint64_t)(v301 + 5));
    sub_19C325D58((_QWORD *)a1);
  }
  if (!CFDictionaryContainsKey(*(CFDictionaryRef *)(a1 + 432), (const void *)kLMLanguageModelCustomStaticPhraseLexiconPathKey))goto LABEL_111;
  v51 = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 432), (const void *)kLMLanguageModelCustomStaticPhraseLexiconPathKey);
  v52 = (const void *)MEMORY[0x1A1AD2D94](0, v51, 0, 0, 0);
  v276[0] = v52;
  if (!v52)
  {
    v123 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD3154](v123, "Could not construct");
    __cxa_throw(v123, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v53 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v275[0] = v53;
  CFDictionarySetValue(v53, CFSTR("URL"), v52);
  CFDictionarySetValue(v53, CFSTR("Name"), CFSTR("PhrasesStatic-en"));
  CFDictionarySetValue(v53, (const void *)*MEMORY[0x1E0D437D8], (const void *)*MEMORY[0x1E0D437E0]);
  v54 = operator new(0x28uLL);
  v54[1] = 0;
  v54[2] = 0;
  *v54 = &off_1E3D39B70;
  v54[4] = 0;
  v54[3] = CFRetain(v53);
  key[0] = v54 + 3;
  key[1] = v54;
  v55 = operator new();
  v56 = *(const __CFArray **)(a1 + 176);
  if (v56 && CFArrayGetCount(v56))
    v57 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 176), 0);
  else
    v57 = *(const void **)(*(_QWORD *)(a1 + 416) + 8);
  cf = 0uLL;
  v438 = 0;
  sub_19C33821C(v55, v57, (CFDictionaryRef *)v54 + 3, (CFDictionaryRef ***)&cf);
  v58 = *(uint64_t **)(a1 + 216);
  if ((unint64_t)v58 >= *(_QWORD *)(a1 + 224))
  {
    v59 = sub_19C326B48((char **)(a1 + 208), v55);
  }
  else
  {
    *v58 = v55;
    v59 = (char *)(v58 + 1);
  }
  *(_QWORD *)(a1 + 216) = v59;
  v60 = cf;
  if ((_QWORD)cf)
  {
    v61 = *((_QWORD *)&cf + 1);
    v62 = (void *)cf;
    if (*((_QWORD *)&cf + 1) != (_QWORD)cf)
    {
      do
      {
        v63 = *(std::__shared_weak_count **)(v61 - 8);
        if (v63)
        {
          v64 = (unint64_t *)&v63->__shared_owners_;
          do
            v65 = __ldaxr(v64);
          while (__stlxr(v65 - 1, v64));
          if (!v65)
          {
            ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
            std::__shared_weak_count::__release_weak(v63);
          }
        }
        v61 -= 16;
      }
      while (v61 != v60);
      v62 = (void *)cf;
    }
    *((_QWORD *)&cf + 1) = v60;
    operator delete(v62);
  }
  v66 = (std::__shared_weak_count *)key[1];
  if (!key[1])
    goto LABEL_97;
  v67 = (unint64_t *)((char *)key[1] + 8);
  do
    v68 = __ldaxr(v67);
  while (__stlxr(v68 - 1, v67));
  if (v68)
  {
LABEL_97:
    v69 = v275[0];
    if (!v275[0])
      goto LABEL_99;
    goto LABEL_98;
  }
  ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
  std::__shared_weak_count::__release_weak(v66);
  v69 = v275[0];
  if (v275[0])
LABEL_98:
    CFRelease(v69);
LABEL_99:
  if (v276[0])
    CFRelease(v276[0]);
  if (*(_QWORD *)(a1 + 216) == *(_QWORD *)(a1 + 208))
  {
    if (qword_1EDB971F8 != -1)
      dispatch_once(&qword_1EDB971F8, &unk_1E3D3A1E0);
    v70 = qword_1EDB971F0;
    if (os_log_type_enabled((os_log_t)qword_1EDB971F0, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(cf) = 0;
      v71 = "Side loading of custom lexicon for inline completions failed.";
      goto LABEL_110;
    }
  }
  else
  {
    if (qword_1EDB971F8 != -1)
      dispatch_once(&qword_1EDB971F8, &unk_1E3D3A1E0);
    v70 = qword_1EDB971F0;
    if (os_log_type_enabled((os_log_t)qword_1EDB971F0, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(cf) = 0;
      v71 = "Successfully sideloaded custom  lexicon for inline completions";
LABEL_110:
      _os_log_impl(&dword_19C291000, v70, OS_LOG_TYPE_DEFAULT, v71, (uint8_t *)&cf, 2u);
    }
  }
LABEL_111:
  v72 = (CFDictionaryRef *)v381[5];
  if (!v72)
    goto LABEL_135;
  v73 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v276[0] = v73;
  *(_QWORD *)&cf = 0;
  *((_QWORD *)&cf + 1) = &cf;
  v438 = 0x2020000000;
  v74 = (const void **)qword_1EDB970F0;
  v439 = (void *)qword_1EDB970F0;
  if (!qword_1EDB970F0)
  {
    key[0] = 0;
    if (qword_1EE41C3B8)
    {
      v75 = (void *)qword_1EE41C3B8;
    }
    else
    {
      valuePtr = xmmword_1E3D3ACF0;
      v441 = 0;
      qword_1EE41C3B8 = _sl_dlopen();
      v75 = (void *)qword_1EE41C3B8;
      if (!qword_1EE41C3B8)
        goto LABEL_178;
      if (key[0])
        free(key[0]);
    }
    v74 = (const void **)dlsym(v75, "kNLGazetteerCompressedModelURL");
    *(_QWORD *)(*((_QWORD *)&cf + 1) + 24) = v74;
    qword_1EDB970F0 = (uint64_t)v74;
  }
  _Block_object_dispose(&cf, 8);
  if (!v74)
  {
LABEL_176:
    dlerror();
    abort_report_np();
LABEL_432:
    __break(1u);
    return;
  }
  v76 = *v74;
  v77 = CFDictionaryGetValue(*v72, CFSTR("URL"));
  CFDictionaryAddValue(v73, v76, v77);
  *(_QWORD *)&cf = 0;
  *((_QWORD *)&cf + 1) = &cf;
  v438 = 0x2020000000;
  v78 = off_1EE41C0C0;
  v439 = off_1EE41C0C0;
  if (!off_1EE41C0C0)
  {
    key[0] = 0;
    if (qword_1EE41C3B8)
    {
      v79 = (void *)qword_1EE41C3B8;
LABEL_128:
      v78 = dlsym(v79, "NLGazetteerCreate");
      *(_QWORD *)(*((_QWORD *)&cf + 1) + 24) = v78;
      off_1EE41C0C0 = v78;
      goto LABEL_129;
    }
    valuePtr = xmmword_1E3D3ACF0;
    v441 = 0;
    qword_1EE41C3B8 = _sl_dlopen();
    v79 = (void *)qword_1EE41C3B8;
    if (qword_1EE41C3B8)
    {
      if (key[0])
        free(key[0]);
      goto LABEL_128;
    }
LABEL_178:
    abort_report_np();
    goto LABEL_432;
  }
LABEL_129:
  _Block_object_dispose(&cf, 8);
  if (!v78)
    goto LABEL_176;
  v80 = ((uint64_t (*)(CFMutableDictionaryRef, _QWORD))v78)(v73, 0);
  if (v73)
    CFRelease(v73);
  v81 = *(const void **)(a1 + 120);
  if (v81)
    CFRelease(v81);
  *(_QWORD *)(a1 + 120) = v80;
LABEL_135:
  sub_19C325FB0((_QWORD *)a1);
  v82 = (CFDictionaryRef *)v409[5];
  if (v82 && *(_BYTE *)(*(_QWORD *)(a1 + 232) + 360) && v395[5])
  {
    v276[0] = 0;
    v276[1] = 0;
    v277 = 0;
    v83 = (CFDictionaryRef *)v402[5];
    if (v83)
    {
      v84 = (const __CFURL *)CFDictionaryGetValue(*v83, CFSTR("URL"));
      sub_19C2E15E8(v84, &cf);
    }
    v85 = (const __CFURL *)CFDictionaryGetValue(*v82, CFSTR("URL"));
    sub_19C2E15E8(v85, v275);
  }
  if (!*(_QWORD *)(a1 + 248))
  {
    v90 = *(_BYTE **)(a1 + 232);
    if (v90[361])
    {
      v90[360] = 0;
      if (v90[362])
      {
        v91 = (CFDictionaryRef **)v317[5];
        if (v91 != (CFDictionaryRef **)v317[6])
        {
          v92 = *v91;
          v93 = *(_QWORD *)(a1 + 232);
          v94 = operator new(0xB0uLL);
          v94[2] = 0;
          *v94 = &off_1E3D396A0;
          v94[1] = 0;
          sub_19C3FE1DC((uint64_t)(v94 + 3), v92, v93);
        }
      }
      else
      {
        v95 = (CFDictionaryRef **)v373[5];
        if (v95 != (CFDictionaryRef **)v373[6])
        {
          v96 = *v95;
          v97 = *(_QWORD *)(a1 + 232);
          v98 = operator new(0xB0uLL);
          v98[2] = 0;
          *v98 = &off_1E3D396A0;
          v98[1] = 0;
          sub_19C3FE1DC((uint64_t)(v98 + 3), v96, v97);
        }
        if (*(_QWORD *)(a1 + 128) == *(_QWORD *)(a1 + 136))
        {
          v115 = (CFDictionaryRef **)v365[5];
          if (v115 != (CFDictionaryRef **)v365[6])
          {
            v116 = *v115;
            v117 = *(_QWORD *)(a1 + 232);
            v118 = operator new(0xB0uLL);
            v118[2] = 0;
            *v118 = &off_1E3D396A0;
            v118[1] = 0;
            sub_19C3FE1DC((uint64_t)(v118 + 3), v116, v117);
          }
        }
        v99 = (CFDictionaryRef **)v357[5];
        for (i = (CFDictionaryRef **)v357[6]; v99 != i; v99 += 2)
        {
          if (v430[5])
          {
            v101 = *v99;
            LODWORD(cf) = 0;
            v102 = (const __CFNumber *)CFDictionaryGetValue(*v101, CFSTR("Type"));
            CFNumberGetValue(v102, kCFNumberIntType, &cf);
            if ((_DWORD)cf == 5)
            {
              v104 = operator new();
              v105 = *v99;
              v106 = *(_QWORD *)(a1 + 232);
              cf = 0uLL;
              sub_19C433DF8(v104, v105, (uint64_t)(v430 + 5), v106);
            }
            if ((_DWORD)cf == 1)
            {
              v103 = operator new();
              sub_19C433DF8(v103, *v99, (uint64_t)(v430 + 5), *(_QWORD *)(a1 + 232));
            }
          }
        }
        if (v416[5])
        {
          if (v423[5])
          {
            v107 = (CFDictionaryRef **)v349[5];
            if (v107 != (CFDictionaryRef **)v349[6])
            {
              v108 = *v107;
              CFDictionaryGetValue(*(CFDictionaryRef *)v423[5], CFSTR("URL"));
              v109 = *(_QWORD *)(a1 + 232);
              v110 = operator new(0x1E8uLL);
              v110[1] = 0;
              v110[2] = 0;
              *v110 = &off_1E3D39710;
              sub_19C3FE1DC((uint64_t)(v110 + 3), v108, v109);
            }
          }
        }
        if (*(_QWORD *)(a1 + 128) == *(_QWORD *)(a1 + 136) && v388[5])
        {
          if (qword_1EDB971F8 != -1)
            dispatch_once(&qword_1EDB971F8, &unk_1E3D3A1E0);
          v111 = qword_1EDB971F0;
          if (os_log_type_enabled((os_log_t)qword_1EDB971F0, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(cf) = 0;
            _os_log_impl(&dword_19C291000, v111, OS_LOG_TYPE_DEFAULT, "No traditional n-gram models to load: falling back on the montreal supplemental model", (uint8_t *)&cf, 2u);
          }
          v112 = (CFDictionaryRef *)v388[5];
          v113 = *(_QWORD *)(a1 + 232);
          v114 = operator new(0xB0uLL);
          v114[1] = 0;
          v114[2] = 0;
          *v114 = &off_1E3D396A0;
          sub_19C3FE1DC((uint64_t)(v114 + 3), v112, v113);
        }
      }
    }
  }
  v86 = (CFDictionaryRef **)v325[5];
  if (v86 != (CFDictionaryRef **)v325[6])
  {
    v87 = *(_QWORD *)(a1 + 184);
    for (j = *(_QWORD *)(a1 + 192); v87 != j; v87 += 16)
    {
      if (*(_QWORD *)(*(_QWORD *)v87 + 8) != *(_QWORD *)(*(_QWORD *)v87 + 16))
      {
        v89 = (const __CFURL *)CFDictionaryGetValue(**v86, CFSTR("URL"));
        sub_19C2E15E8(v89, v276);
      }
    }
    v119 = __cxa_allocate_exception(0x20uLL);
    sub_19C2A6D48(&cf, "No static lexicons to associate with FST grammar");
    sub_19C31237C(v119, &cf);
    __cxa_throw(v119, (struct type_info *)&unk_1E3D32968, (void (*)(void *))sub_19C3123E4);
  }
  valuePtr = 0uLL;
  v441 = 0;
  if (v395[5])
  {
    v124 = sub_19C328140((uint64_t)&valuePtr, *(__n128 *)(v395 + 5));
    *((_QWORD *)&valuePtr + 1) = v124;
  }
  else
  {
    v124 = 0;
  }
  v125 = v373;
  v126 = operator new(0x10uLL);
  p_valuePtr = &valuePtr;
  *v126 = v125 + 5;
  v126[1] = &valuePtr;
  v128 = (CFTypeRef **)v125[5];
  v129 = (CFTypeRef **)v125[6];
  if (v128 == v129)
  {
    v131 = 0;
    v130 = 0;
  }
  else
  {
    v130 = 0;
    v131 = 0;
    do
    {
      v133 = **v128;
      if (v133)
      {
        CFRetain(**v128);
        v276[0] = v133;
        v134 = CFGetTypeID(v133);
        if (v134 != CFDictionaryGetTypeID())
        {
LABEL_427:
          v269 = __cxa_allocate_exception(0x10uLL);
          MEMORY[0x1A1AD3154](v269, "Could not construct");
          __cxa_throw(v269, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
        }
        sub_19C29471C((CFStringRef *)key, "MaxDynamicPredictions");
        v135 = CFDictionaryContainsKey((CFDictionaryRef)v133, key[0]);
        if (key[0])
          CFRelease(key[0]);
        if (v135)
        {
          if (v130)
LABEL_428:
            __assert_rtn("extractMaxDynamicPredictions", "LMCompositeLanguageModel.cpp", 161, "false && \"Malformed resource bundle: duplicate MaxDynamicPredictions keys.\"");
          sub_19C29471C((CFStringRef *)key, "MaxDynamicPredictions");
          v136 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)v133, key[0]);
          if (key[0])
            CFRelease(key[0]);
          if (!v136)
          {
LABEL_430:
            v270 = __cxa_allocate_exception(0x10uLL);
            MEMORY[0x1A1AD3154](v270, "Could not find item");
LABEL_431:
            __cxa_throw(v270, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
          }
          TypeID = CFNumberGetTypeID();
          if (TypeID == CFGetTypeID(v136))
          {
            v131 = sub_19C328290(v136);
          }
          else
          {
            v138 = CFBooleanGetTypeID();
            if (v138 == CFGetTypeID(v136))
            {
              v131 = CFBooleanGetValue(v136);
              v132 = 1;
            }
            else
            {
              v132 = 0;
              v131 = 0;
            }
          }
          if (!v132)
          {
LABEL_429:
            v270 = __cxa_allocate_exception(0x10uLL);
            MEMORY[0x1A1AD3154](v270, "Could not convert");
            goto LABEL_431;
          }
          v130 = 1;
        }
        CFRelease(v133);
      }
      v128 += 2;
    }
    while (v128 != v129);
    p_valuePtr = (__int128 *)v126[1];
    v124 = (__n128 *)*((_QWORD *)p_valuePtr + 1);
  }
  for (k = *(CFTypeRef ***)p_valuePtr; k != (CFTypeRef **)v124; k += 2)
  {
    v141 = **k;
    if (v141)
    {
      CFRetain(**k);
      v276[0] = v141;
      v142 = CFGetTypeID(v141);
      if (v142 != CFDictionaryGetTypeID())
        goto LABEL_427;
      sub_19C29471C((CFStringRef *)key, "MaxDynamicPredictions");
      v143 = CFDictionaryContainsKey((CFDictionaryRef)v141, key[0]);
      if (key[0])
        CFRelease(key[0]);
      if (v143)
      {
        if (v130)
          goto LABEL_428;
        sub_19C29471C((CFStringRef *)key, "MaxDynamicPredictions");
        v144 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)v141, key[0]);
        if (key[0])
          CFRelease(key[0]);
        if (!v144)
          goto LABEL_430;
        v145 = CFNumberGetTypeID();
        if (v145 == CFGetTypeID(v144))
        {
          v131 = sub_19C328290(v144);
        }
        else
        {
          v146 = CFBooleanGetTypeID();
          if (v146 == CFGetTypeID(v144))
          {
            v131 = CFBooleanGetValue(v144);
            v140 = 1;
          }
          else
          {
            v140 = 0;
            v131 = 0;
          }
        }
        if (!v140)
          goto LABEL_429;
        v130 = 1;
      }
      CFRelease(v141);
    }
  }
  v147 = 50;
  if (v130)
    v147 = v131;
  *(_QWORD *)(a1 + 448) = v147;
  operator delete(v126);
  if (*(_BYTE *)(*(_QWORD *)(a1 + 232) + 192))
    sub_19C3284D4(a1);
  v149 = *(char **)(a1 + 128);
  v148 = *(char **)(a1 + 136);
  v150 = (unint64_t)(v148 - v149) < 0x11 || v149 == v148;
  if (!v150)
  {
    v151 = v148 - v149 - 16;
    v152 = 0.0;
    v153 = *(char **)(a1 + 128);
    if (v151 > 0xF)
    {
      v154 = (v151 >> 4) + 1;
      v155 = (uint64_t *)(v149 + 16);
      v156 = v154 & 0x1FFFFFFFFFFFFFFELL;
      v157 = 0.0;
      do
      {
        v158 = *(v155 - 2);
        v159 = *v155;
        v155 += 4;
        v152 = *(double *)(v158 + 8) + v152;
        v157 = *(double *)(v159 + 8) + v157;
        v156 -= 2;
      }
      while (v156);
      v152 = v157 + v152;
      if (v154 == (v154 & 0x1FFFFFFFFFFFFFFELL))
        goto LABEL_244;
      v153 = &v149[16 * (v154 & 0x1FFFFFFFFFFFFFFELL)];
    }
    do
    {
      v160 = *(_QWORD *)v153;
      v153 += 16;
      v152 = *(double *)(v160 + 8) + v152;
    }
    while (v153 != v148);
LABEL_244:
    v161 = 1.0 / v152;
    do
    {
      v162 = *(_QWORD *)v149;
      v149 += 16;
      *(double *)(v162 + 8) = *(double *)(v162 + 8) * v161;
    }
    while (v149 != v148);
  }
  v164 = *(char **)(a1 + 152);
  v163 = *(char **)(a1 + 160);
  if ((unint64_t)(v163 - v164) >= 9 && v164 != v163)
  {
    v166 = v163 - v164 - 8;
    v167 = 0.0;
    v168 = *(char **)(a1 + 152);
    if (v166 > 7)
    {
      v169 = (v166 >> 3) + 1;
      v170 = v164 + 8;
      v171 = v169 & 0x3FFFFFFFFFFFFFFELL;
      v172 = 0.0;
      do
      {
        v167 = *(double *)(*(v170 - 1) + 8) + v167;
        v172 = *(double *)(*v170 + 8) + v172;
        v170 += 2;
        v171 -= 2;
      }
      while (v171);
      v167 = v172 + v167;
      if (v169 == (v169 & 0x3FFFFFFFFFFFFFFELL))
        goto LABEL_256;
      v168 = &v164[8 * (v169 & 0x3FFFFFFFFFFFFFFELL)];
    }
    do
    {
      v173 = *(_QWORD *)v168;
      v168 += 8;
      v167 = *(double *)(v173 + 8) + v167;
    }
    while (v168 != v163);
LABEL_256:
    v174 = 1.0 / v167;
    do
    {
      v175 = *(_QWORD *)v164;
      v164 += 8;
      *(double *)(v175 + 8) = *(double *)(v175 + 8) * v174;
    }
    while (v164 != v163);
  }
  *(_BYTE *)(a1 + 440) = *(_BYTE *)(*(_QWORD *)(a1 + 232) + 416);
  if (*(_QWORD *)(*(_QWORD *)(a1 + 416) + 8))
  {
    MEMORY[0x1A1AD2A04]();
    v176 = LXLemmatizerCreate();
    v177 = *(const void **)(a1 + 88);
    if (v177)
      CFRelease(v177);
    *(_QWORD *)(a1 + 88) = v176;
    v178 = (char *)valuePtr;
    if (!(_QWORD)valuePtr)
      goto LABEL_276;
  }
  else
  {
    v179 = *(const void **)(a1 + 88);
    if (v179)
      CFRelease(v179);
    *(_QWORD *)(a1 + 88) = 0;
    v178 = (char *)valuePtr;
    if (!(_QWORD)valuePtr)
      goto LABEL_276;
  }
  v180 = (char *)*((_QWORD *)&valuePtr + 1);
  v181 = v178;
  if (*((char **)&valuePtr + 1) != v178)
  {
    do
    {
      v182 = (std::__shared_weak_count *)*((_QWORD *)v180 - 1);
      if (v182)
      {
        v183 = (unint64_t *)&v182->__shared_owners_;
        do
          v184 = __ldaxr(v183);
        while (__stlxr(v184 - 1, v183));
        if (!v184)
        {
          ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
          std::__shared_weak_count::__release_weak(v182);
        }
      }
      v180 -= 16;
    }
    while (v180 != v178);
    v181 = (char *)valuePtr;
  }
  *((_QWORD *)&valuePtr + 1) = v178;
  operator delete(v181);
LABEL_276:
  _Block_object_dispose(&v300, 8);
  v185 = (char *)v305;
  if (v305)
  {
    v186 = v306;
    v187 = v305;
    if (v306 != v305)
    {
      do
      {
        v188 = (std::__shared_weak_count *)*((_QWORD *)v186 - 1);
        if (v188)
        {
          v189 = (unint64_t *)&v188->__shared_owners_;
          do
            v190 = __ldaxr(v189);
          while (__stlxr(v190 - 1, v189));
          if (!v190)
          {
            ((void (*)(std::__shared_weak_count *))v188->__on_zero_shared)(v188);
            std::__shared_weak_count::__release_weak(v188);
          }
        }
        v186 -= 16;
      }
      while (v186 != v185);
      v187 = v305;
    }
    v306 = v185;
    operator delete(v187);
  }
  _Block_object_dispose(&v308, 8);
  v191 = (char *)v313;
  if (v313)
  {
    v192 = v314;
    v193 = v313;
    if (v314 != v313)
    {
      do
      {
        v194 = (std::__shared_weak_count *)*((_QWORD *)v192 - 1);
        if (v194)
        {
          v195 = (unint64_t *)&v194->__shared_owners_;
          do
            v196 = __ldaxr(v195);
          while (__stlxr(v196 - 1, v195));
          if (!v196)
          {
            ((void (*)(std::__shared_weak_count *))v194->__on_zero_shared)(v194);
            std::__shared_weak_count::__release_weak(v194);
          }
        }
        v192 -= 16;
      }
      while (v192 != v191);
      v193 = v313;
    }
    v314 = v191;
    operator delete(v193);
  }
  _Block_object_dispose(&v316, 8);
  v197 = (char *)v321;
  if (v321)
  {
    v198 = v322;
    v199 = v321;
    if (v322 != v321)
    {
      do
      {
        v200 = (std::__shared_weak_count *)*((_QWORD *)v198 - 1);
        if (v200)
        {
          v201 = (unint64_t *)&v200->__shared_owners_;
          do
            v202 = __ldaxr(v201);
          while (__stlxr(v202 - 1, v201));
          if (!v202)
          {
            ((void (*)(std::__shared_weak_count *))v200->__on_zero_shared)(v200);
            std::__shared_weak_count::__release_weak(v200);
          }
        }
        v198 -= 16;
      }
      while (v198 != v197);
      v199 = v321;
    }
    v322 = v197;
    operator delete(v199);
  }
  _Block_object_dispose(&v324, 8);
  v203 = (char *)v329;
  if (v329)
  {
    v204 = v330;
    v205 = v329;
    if (v330 != v329)
    {
      do
      {
        v206 = (std::__shared_weak_count *)*((_QWORD *)v204 - 1);
        if (v206)
        {
          v207 = (unint64_t *)&v206->__shared_owners_;
          do
            v208 = __ldaxr(v207);
          while (__stlxr(v208 - 1, v207));
          if (!v208)
          {
            ((void (*)(std::__shared_weak_count *))v206->__on_zero_shared)(v206);
            std::__shared_weak_count::__release_weak(v206);
          }
        }
        v204 -= 16;
      }
      while (v204 != v203);
      v205 = v329;
    }
    v330 = v203;
    operator delete(v205);
  }
  _Block_object_dispose(&v332, 8);
  v209 = (char *)v337;
  if (v337)
  {
    v210 = v338;
    v211 = v337;
    if (v338 != v337)
    {
      do
      {
        v212 = (std::__shared_weak_count *)*((_QWORD *)v210 - 1);
        if (v212)
        {
          v213 = (unint64_t *)&v212->__shared_owners_;
          do
            v214 = __ldaxr(v213);
          while (__stlxr(v214 - 1, v213));
          if (!v214)
          {
            ((void (*)(std::__shared_weak_count *))v212->__on_zero_shared)(v212);
            std::__shared_weak_count::__release_weak(v212);
          }
        }
        v210 -= 16;
      }
      while (v210 != v209);
      v211 = v337;
    }
    v338 = v209;
    operator delete(v211);
  }
  _Block_object_dispose(&v340, 8);
  v215 = (char *)v345;
  if (v345)
  {
    v216 = v346;
    v217 = v345;
    if (v346 != v345)
    {
      do
      {
        v218 = (std::__shared_weak_count *)*((_QWORD *)v216 - 1);
        if (v218)
        {
          v219 = (unint64_t *)&v218->__shared_owners_;
          do
            v220 = __ldaxr(v219);
          while (__stlxr(v220 - 1, v219));
          if (!v220)
          {
            ((void (*)(std::__shared_weak_count *))v218->__on_zero_shared)(v218);
            std::__shared_weak_count::__release_weak(v218);
          }
        }
        v216 -= 16;
      }
      while (v216 != v215);
      v217 = v345;
    }
    v346 = v215;
    operator delete(v217);
  }
  _Block_object_dispose(&v348, 8);
  v221 = (char *)v353;
  if (v353)
  {
    v222 = v354;
    v223 = v353;
    if (v354 != v353)
    {
      do
      {
        v224 = (std::__shared_weak_count *)*((_QWORD *)v222 - 1);
        if (v224)
        {
          v225 = (unint64_t *)&v224->__shared_owners_;
          do
            v226 = __ldaxr(v225);
          while (__stlxr(v226 - 1, v225));
          if (!v226)
          {
            ((void (*)(std::__shared_weak_count *))v224->__on_zero_shared)(v224);
            std::__shared_weak_count::__release_weak(v224);
          }
        }
        v222 -= 16;
      }
      while (v222 != v221);
      v223 = v353;
    }
    v354 = v221;
    operator delete(v223);
  }
  _Block_object_dispose(&v356, 8);
  v227 = (char *)v361;
  if (v361)
  {
    v228 = v362;
    v229 = v361;
    if (v362 != v361)
    {
      do
      {
        v230 = (std::__shared_weak_count *)*((_QWORD *)v228 - 1);
        if (v230)
        {
          v231 = (unint64_t *)&v230->__shared_owners_;
          do
            v232 = __ldaxr(v231);
          while (__stlxr(v232 - 1, v231));
          if (!v232)
          {
            ((void (*)(std::__shared_weak_count *))v230->__on_zero_shared)(v230);
            std::__shared_weak_count::__release_weak(v230);
          }
        }
        v228 -= 16;
      }
      while (v228 != v227);
      v229 = v361;
    }
    v362 = v227;
    operator delete(v229);
  }
  _Block_object_dispose(&v364, 8);
  v233 = (char *)v369;
  if (v369)
  {
    v234 = v370;
    v235 = v369;
    if (v370 != v369)
    {
      do
      {
        v236 = (std::__shared_weak_count *)*((_QWORD *)v234 - 1);
        if (v236)
        {
          v237 = (unint64_t *)&v236->__shared_owners_;
          do
            v238 = __ldaxr(v237);
          while (__stlxr(v238 - 1, v237));
          if (!v238)
          {
            ((void (*)(std::__shared_weak_count *))v236->__on_zero_shared)(v236);
            std::__shared_weak_count::__release_weak(v236);
          }
        }
        v234 -= 16;
      }
      while (v234 != v233);
      v235 = v369;
    }
    v370 = v233;
    operator delete(v235);
  }
  _Block_object_dispose(&v372, 8);
  v239 = (char *)v377;
  if (v377)
  {
    v240 = v378;
    v241 = v377;
    if (v378 != v377)
    {
      do
      {
        v242 = (std::__shared_weak_count *)*((_QWORD *)v240 - 1);
        if (v242)
        {
          v243 = (unint64_t *)&v242->__shared_owners_;
          do
            v244 = __ldaxr(v243);
          while (__stlxr(v244 - 1, v243));
          if (!v244)
          {
            ((void (*)(std::__shared_weak_count *))v242->__on_zero_shared)(v242);
            std::__shared_weak_count::__release_weak(v242);
          }
        }
        v240 -= 16;
      }
      while (v240 != v239);
      v241 = v377;
    }
    v378 = v239;
    operator delete(v241);
  }
  _Block_object_dispose(&v380, 8);
  v245 = v386;
  if (v386)
  {
    v246 = (unint64_t *)&v386->__shared_owners_;
    do
      v247 = __ldaxr(v246);
    while (__stlxr(v247 - 1, v246));
    if (!v247)
    {
      ((void (*)(std::__shared_weak_count *))v245->__on_zero_shared)(v245);
      std::__shared_weak_count::__release_weak(v245);
    }
  }
  _Block_object_dispose(&v387, 8);
  v248 = v393;
  if (v393)
  {
    v249 = (unint64_t *)&v393->__shared_owners_;
    do
      v250 = __ldaxr(v249);
    while (__stlxr(v250 - 1, v249));
    if (!v250)
    {
      ((void (*)(std::__shared_weak_count *))v248->__on_zero_shared)(v248);
      std::__shared_weak_count::__release_weak(v248);
    }
  }
  _Block_object_dispose(&v394, 8);
  v251 = v400;
  if (v400)
  {
    v252 = (unint64_t *)&v400->__shared_owners_;
    do
      v253 = __ldaxr(v252);
    while (__stlxr(v253 - 1, v252));
    if (!v253)
    {
      ((void (*)(std::__shared_weak_count *))v251->__on_zero_shared)(v251);
      std::__shared_weak_count::__release_weak(v251);
    }
  }
  _Block_object_dispose(&v401, 8);
  v254 = v407;
  if (v407)
  {
    v255 = (unint64_t *)&v407->__shared_owners_;
    do
      v256 = __ldaxr(v255);
    while (__stlxr(v256 - 1, v255));
    if (!v256)
    {
      ((void (*)(std::__shared_weak_count *))v254->__on_zero_shared)(v254);
      std::__shared_weak_count::__release_weak(v254);
    }
  }
  _Block_object_dispose(&v408, 8);
  v257 = v414;
  if (v414)
  {
    v258 = (unint64_t *)&v414->__shared_owners_;
    do
      v259 = __ldaxr(v258);
    while (__stlxr(v259 - 1, v258));
    if (!v259)
    {
      ((void (*)(std::__shared_weak_count *))v257->__on_zero_shared)(v257);
      std::__shared_weak_count::__release_weak(v257);
    }
  }
  _Block_object_dispose(&v415, 8);
  v260 = v421;
  if (v421)
  {
    v261 = (unint64_t *)&v421->__shared_owners_;
    do
      v262 = __ldaxr(v261);
    while (__stlxr(v262 - 1, v261));
    if (!v262)
    {
      ((void (*)(std::__shared_weak_count *))v260->__on_zero_shared)(v260);
      std::__shared_weak_count::__release_weak(v260);
    }
  }
  _Block_object_dispose(&v422, 8);
  v263 = v428;
  if (v428)
  {
    v264 = (unint64_t *)&v428->__shared_owners_;
    do
      v265 = __ldaxr(v264);
    while (__stlxr(v265 - 1, v264));
    if (!v265)
    {
      ((void (*)(std::__shared_weak_count *))v263->__on_zero_shared)(v263);
      std::__shared_weak_count::__release_weak(v263);
    }
  }
  _Block_object_dispose(&v429, 8);
  v266 = v435;
  if (v435)
  {
    v267 = (unint64_t *)&v435->__shared_owners_;
    do
      v268 = __ldaxr(v267);
    while (__stlxr(v268 - 1, v267));
    if (!v268)
    {
      ((void (*)(std::__shared_weak_count *))v266->__on_zero_shared)(v266);
      std::__shared_weak_count::__release_weak(v266);
    }
  }
}

void sub_19C3224D0(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_19C2CDAC8(a1);
  _Unwind_Resume(a1);
}

void sub_19C3224D8(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_19C2CDAC8(a1);
  _Unwind_Resume(a1);
}

void sub_19C3224E0(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_19C2CDAC8(a1);
  _Unwind_Resume(a1);
}

void sub_19C3224F8()
{
  void *v0;
  const void *v1;
  uint64_t v2;

  CFRelease(v1);
  operator delete(v0);
  sub_19C2F5AA8((void **)(v2 - 192));
  JUMPOUT(0x19C3225CCLL);
}

void sub_19C322540(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_19C2CDAC8(a1);
  _Unwind_Resume(a1);
}

void sub_19C322560(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_19C2CDAC8(a1);
  _Unwind_Resume(a1);
}

void sub_19C322568(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_19C2CDAC8(a1);
  _Unwind_Resume(a1);
}

void sub_19C322570(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_19C2CDAC8(a1);
  _Unwind_Resume(a1);
}

void sub_19C32257C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_19C2CDAC8(a1);
  _Unwind_Resume(a1);
}

void sub_19C3225A8(_Unwind_Exception *a1, int a2)
{
  if (a2)
    JUMPOUT(0x19C3225ACLL);
  _Unwind_Resume(a1);
}

void sub_19C3225B0(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x19C3225B4);
  sub_19C2CDAC8(a1);
}

__n128 sub_19C3227E0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  return result;
}

void sub_19C3227F0(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

__n128 sub_19C322848(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  return result;
}

void sub_19C322858(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

__n128 sub_19C3228B0(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

void sub_19C3228D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v1 = *(_QWORD *)(a1 + 40);
  if (v1)
  {
    v3 = *(_QWORD *)(a1 + 48);
    v4 = *(void **)(a1 + 40);
    if (v3 != v1)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v1);
      v4 = *(void **)(a1 + 40);
    }
    *(_QWORD *)(a1 + 48) = v1;
    operator delete(v4);
  }
}

void sub_19C322974(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  CFDictionaryRef *v5;
  const __CFNumber *Value;
  const __CFURL *v7;
  CFDictionaryRef *v8;
  const __CFNumber *v9;
  uint64_t v10;
  __n128 *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  __n128 *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  CFDictionaryRef *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  CFDictionaryRef *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t *v50;
  const __CFURL *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  NSObject *v55;
  uint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  const __CFURL *v59;
  uint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  const __CFLocale *v72;
  const __CFURL *v73;
  const __CFString *v74;
  uint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  CFDictionaryRef *v80;
  unint64_t *v81;
  unint64_t v82;
  unint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  CFDictionaryRef *v86;
  unint64_t *v87;
  unint64_t v88;
  unint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  CFDictionaryRef *v92;
  unint64_t *v93;
  unint64_t v94;
  unint64_t *p_shared_owners;
  const __CFURL *v96;
  _QWORD *v97;
  _QWORD *v98;
  uint64_t v99;
  int v100;
  void *v101;
  uint64_t __dst;
  __int128 __p;
  __int128 valuePtr;
  uint64_t v105;

  v105 = *MEMORY[0x1E0C80C00];
  v4 = a1[22];
  if (qword_1EDB971F8 != -1)
    dispatch_once(&qword_1EDB971F8, &unk_1E3D3A1E0);
  if (os_log_type_enabled((os_log_t)qword_1EDB971F0, OS_LOG_TYPE_INFO))
  {
    v5 = *(CFDictionaryRef **)a2;
    LODWORD(valuePtr) = 0;
    Value = (const __CFNumber *)CFDictionaryGetValue(*v5, CFSTR("Type"));
    CFNumberGetValue(Value, kCFNumberIntType, &valuePtr);
    v7 = (const __CFURL *)CFDictionaryGetValue(**(CFDictionaryRef **)a2, CFSTR("URL"));
    sub_19C2E15E8(v7, &__p);
  }
  v8 = *(CFDictionaryRef **)a2;
  LODWORD(valuePtr) = 0;
  v9 = (const __CFNumber *)CFDictionaryGetValue(*v8, CFSTR("Type"));
  CFNumberGetValue(v9, kCFNumberIntType, &valuePtr);
  switch((int)valuePtr)
  {
    case 0:
      v16 = *(_QWORD *)(a1[4] + 8);
      v17 = *(_QWORD **)(v16 + 48);
      if ((unint64_t)v17 >= *(_QWORD *)(v16 + 56))
        goto LABEL_135;
      *v17 = *(_QWORD *)a2;
      v63 = *(_QWORD *)(a2 + 8);
      v17[1] = v63;
      if (v63)
      {
        v64 = (unint64_t *)(v63 + 8);
        do
          v65 = __ldxr(v64);
        while (__stxr(v65 + 1, v64));
      }
      goto LABEL_106;
    case 1:
    case 5:
      v16 = *(_QWORD *)(a1[6] + 8);
      v17 = *(_QWORD **)(v16 + 48);
      if ((unint64_t)v17 >= *(_QWORD *)(v16 + 56))
        goto LABEL_135;
      *v17 = *(_QWORD *)a2;
      v18 = *(_QWORD *)(a2 + 8);
      v17[1] = v18;
      if (v18)
      {
        v19 = (unint64_t *)(v18 + 8);
        do
          v20 = __ldxr(v19);
        while (__stxr(v20 + 1, v19));
      }
      goto LABEL_106;
    case 2:
      sub_19C324E84((char **)v4);
      operator new();
      v59 = (const __CFURL *)CFDictionaryGetValue(**(CFDictionaryRef **)a2, CFSTR("URL"));
      sub_19C2E15E8(v59, &v101);
    case 4:
      if (!*(_QWORD *)(*(_QWORD *)(a1[12] + 8) + 40))
      {
        v51 = (const __CFURL *)CFDictionaryGetValue(**(CFDictionaryRef **)a2, CFSTR("URL"));
        sub_19C32C61C((uint64_t)&valuePtr, v51);
      }
      return;
    case 7:
      v16 = *(_QWORD *)(a1[5] + 8);
      v17 = *(_QWORD **)(v16 + 48);
      if ((unint64_t)v17 >= *(_QWORD *)(v16 + 56))
        goto LABEL_135;
      *v17 = *(_QWORD *)a2;
      v66 = *(_QWORD *)(a2 + 8);
      v17[1] = v66;
      if (v66)
      {
        v67 = (unint64_t *)(v66 + 8);
        do
          v68 = __ldxr(v67);
        while (__stxr(v68 + 1, v67));
      }
      goto LABEL_106;
    case 10:
    case 41:
    case 42:
      v10 = *(_QWORD *)(a1[18] + 8);
      v11 = *(__n128 **)(v10 + 48);
      if ((unint64_t)v11 >= *(_QWORD *)(v10 + 56))
      {
        v15 = sub_19C328140(v10 + 40, *(__n128 *)a2);
      }
      else
      {
        v11->n128_u64[0] = *(_QWORD *)a2;
        v12 = *(_QWORD *)(a2 + 8);
        v11->n128_u64[1] = v12;
        if (v12)
        {
          v13 = (unint64_t *)(v12 + 8);
          do
            v14 = __ldxr(v13);
          while (__stxr(v14 + 1, v13));
        }
        v15 = v11 + 1;
      }
      *(_QWORD *)(v10 + 48) = v15;
      v16 = *(_QWORD *)(a1[19] + 8);
      v17 = *(_QWORD **)(v16 + 48);
      if ((unint64_t)v17 >= *(_QWORD *)(v16 + 56))
        goto LABEL_135;
      *v17 = *(_QWORD *)a2;
      v21 = *(_QWORD *)(a2 + 8);
      v17[1] = v21;
      if (v21)
      {
        v22 = (unint64_t *)(v21 + 8);
        do
          v23 = __ldxr(v22);
        while (__stxr(v23 + 1, v22));
      }
      goto LABEL_106;
    case 12:
      v16 = *(_QWORD *)(a1[9] + 8);
      v17 = *(_QWORD **)(v16 + 48);
      if ((unint64_t)v17 >= *(_QWORD *)(v16 + 56))
        goto LABEL_135;
      *v17 = *(_QWORD *)a2;
      v75 = *(_QWORD *)(a2 + 8);
      v17[1] = v75;
      if (v75)
      {
        v76 = (unint64_t *)(v75 + 8);
        do
          v77 = __ldxr(v76);
        while (__stxr(v77 + 1, v76));
      }
      goto LABEL_106;
    case 13:
      v90 = *(_QWORD *)(a1[10] + 8);
      v92 = *(CFDictionaryRef **)a2;
      v91 = *(_QWORD *)(a2 + 8);
      if (v91)
      {
        v93 = (unint64_t *)(v91 + 8);
        do
          v94 = __ldxr(v93);
        while (__stxr(v94 + 1, v93));
      }
      v32 = *(std::__shared_weak_count **)(v90 + 48);
      *(_QWORD *)(v90 + 40) = v92;
      *(_QWORD *)(v90 + 48) = v91;
      if (!v32)
        return;
      p_shared_owners = (unint64_t *)&v32->__shared_owners_;
      do
        v34 = __ldaxr(p_shared_owners);
      while (__stlxr(v34 - 1, p_shared_owners));
      goto LABEL_129;
    case 14:
      v45 = *(_QWORD *)(a1[11] + 8);
      v47 = *(CFDictionaryRef **)a2;
      v46 = *(_QWORD *)(a2 + 8);
      if (v46)
      {
        v48 = (unint64_t *)(v46 + 8);
        do
          v49 = __ldxr(v48);
        while (__stxr(v49 + 1, v48));
      }
      v32 = *(std::__shared_weak_count **)(v45 + 48);
      *(_QWORD *)(v45 + 40) = v47;
      *(_QWORD *)(v45 + 48) = v46;
      if (!v32)
        return;
      v50 = (unint64_t *)&v32->__shared_owners_;
      do
        v34 = __ldaxr(v50);
      while (__stlxr(v34 - 1, v50));
      goto LABEL_129;
    case 16:
      v96 = (const __CFURL *)CFDictionaryGetValue(**(CFDictionaryRef **)a2, CFSTR("URL"));
      if (*(_QWORD *)(v4 + 104) < *(_QWORD *)(v4 + 112))
        sub_19C40C6A8(*(_QWORD *)(v4 + 104), v96);
      sub_19C32D5E8((_QWORD *)(v4 + 96), v96);
    case 17:
      v72 = *(const __CFLocale **)(*(_QWORD *)(v4 + 416) + 8);
      v73 = (const __CFURL *)CFDictionaryGetValue(**(CFDictionaryRef **)a2, CFSTR("URL"));
      *(_QWORD *)&valuePtr = v73;
      v74 = (const __CFString *)CFLocaleGetValue(v72, (CFLocaleKey)*MEMORY[0x1E0C9B088]);
      if (CFStringCompare(v74, CFSTR("de"), 0) == kCFCompareEqualTo)
      {
        v98 = (_QWORD *)operator new();
        *v98 = &off_1E3D37208;
        v98[1] = 0x4014000000000000;
        sub_19C3FCF88(v98 + 2, v73);
      }
      if (CFStringCompare(v74, CFSTR("it"), 0) == kCFCompareEqualTo
        || CFStringCompare(v74, CFSTR("fr"), 0) == kCFCompareEqualTo
        || CFStringCompare(v74, CFSTR("pt"), 0) == kCFCompareEqualTo
        || CFStringCompare(v74, CFSTR("es"), 0) == kCFCompareEqualTo)
      {
        v97 = (_QWORD *)operator new();
        *v97 = &off_1E3D373D8;
        v97[1] = 0x4014000000000000;
        sub_19C3FCF88(v97 + 2, v73);
      }
      if (CFStringCompare(v74, CFSTR("ru"), 0) == kCFCompareEqualTo)
        sub_19C3D6418((uint64_t)&__dst, (const __CFURL **)&valuePtr);
      if (CFStringCompare(v74, CFSTR("tr"), 0) == kCFCompareEqualTo)
        sub_19C3D649C((uint64_t)&__dst, (const __CFURL **)&valuePtr);
      v99 = *(_QWORD *)(v4 + 336);
      *(_QWORD *)(v4 + 336) = 0;
      if (v99)
        (*(void (**)(uint64_t))(*(_QWORD *)v99 + 8))(v99);
      return;
    case 20:
      v16 = *(_QWORD *)(a1[7] + 8);
      v17 = *(_QWORD **)(v16 + 48);
      if ((unint64_t)v17 >= *(_QWORD *)(v16 + 56))
        goto LABEL_135;
      *v17 = *(_QWORD *)a2;
      v42 = *(_QWORD *)(a2 + 8);
      v17[1] = v42;
      if (v42)
      {
        v43 = (unint64_t *)(v42 + 8);
        do
          v44 = __ldxr(v43);
        while (__stxr(v44 + 1, v43));
      }
      goto LABEL_106;
    case 26:
      v16 = *(_QWORD *)(a1[8] + 8);
      v17 = *(_QWORD **)(v16 + 48);
      if ((unint64_t)v17 >= *(_QWORD *)(v16 + 56))
        goto LABEL_135;
      *v17 = *(_QWORD *)a2;
      v36 = *(_QWORD *)(a2 + 8);
      v17[1] = v36;
      if (v36)
      {
        v37 = (unint64_t *)(v36 + 8);
        do
          v38 = __ldxr(v37);
        while (__stxr(v38 + 1, v37));
      }
      goto LABEL_106;
    case 27:
      v16 = *(_QWORD *)(a1[13] + 8);
      v17 = *(_QWORD **)(v16 + 48);
      if ((unint64_t)v17 >= *(_QWORD *)(v16 + 56))
        goto LABEL_135;
      *v17 = *(_QWORD *)a2;
      v39 = *(_QWORD *)(a2 + 8);
      v17[1] = v39;
      if (v39)
      {
        v40 = (unint64_t *)(v39 + 8);
        do
          v41 = __ldxr(v40);
        while (__stxr(v41 + 1, v40));
      }
      goto LABEL_106;
    case 29:
      v27 = *(_QWORD *)(a1[14] + 8);
      if (*(_QWORD *)(v27 + 40))
      {
        if (qword_1EDB971F8 != -1)
          dispatch_once(&qword_1EDB971F8, &unk_1E3D3A1E0);
        if (os_log_type_enabled((os_log_t)qword_1EDB971F0, OS_LOG_TYPE_ERROR))
          sub_19C445804(&valuePtr, **(CFDictionaryRef **)(*(_QWORD *)(a1[14] + 8) + 40));
        v100 = 278;
        break;
      }
      v29 = *(CFDictionaryRef **)a2;
      v28 = *(_QWORD *)(a2 + 8);
      if (v28)
      {
        v30 = (unint64_t *)(v28 + 8);
        do
          v31 = __ldxr(v30);
        while (__stxr(v31 + 1, v30));
      }
      v32 = *(std::__shared_weak_count **)(v27 + 48);
      *(_QWORD *)(v27 + 40) = v29;
      *(_QWORD *)(v27 + 48) = v28;
      if (v32)
      {
        v33 = (unint64_t *)&v32->__shared_owners_;
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        goto LABEL_129;
      }
      return;
    case 30:
      v35 = a1[15];
      goto LABEL_62;
    case 31:
      v78 = *(_QWORD *)(a1[16] + 8);
      if (!*(_QWORD *)(v78 + 40))
      {
        v80 = *(CFDictionaryRef **)a2;
        v79 = *(_QWORD *)(a2 + 8);
        if (v79)
        {
          v81 = (unint64_t *)(v79 + 8);
          do
            v82 = __ldxr(v81);
          while (__stxr(v82 + 1, v81));
        }
        v32 = *(std::__shared_weak_count **)(v78 + 48);
        *(_QWORD *)(v78 + 40) = v80;
        *(_QWORD *)(v78 + 48) = v79;
        if (!v32)
          return;
        v83 = (unint64_t *)&v32->__shared_owners_;
        do
          v34 = __ldaxr(v83);
        while (__stlxr(v34 - 1, v83));
        goto LABEL_129;
      }
      if (qword_1EDB971F8 != -1)
        dispatch_once(&qword_1EDB971F8, &unk_1E3D3A1E0);
      if (os_log_type_enabled((os_log_t)qword_1EDB971F0, OS_LOG_TYPE_ERROR))
        sub_19C445804(&valuePtr, **(CFDictionaryRef **)(*(_QWORD *)(a1[16] + 8) + 40));
      v100 = 290;
      break;
    case 34:
      v35 = a1[17];
LABEL_62:
      v52 = *(_QWORD *)(v35 + 8);
      v54 = *(_QWORD *)(v52 + 40);
      v53 = (_QWORD *)(v52 + 40);
      if (!v54)
        sub_19C32D76C(v53, *(_QWORD *)a2, *(_QWORD *)(a2 + 8));
      return;
    case 35:
      if (qword_1EDB971F8 != -1)
        dispatch_once(&qword_1EDB971F8, &unk_1E3D3A1E0);
      v55 = qword_1EDB971F0;
      if (os_log_type_enabled((os_log_t)qword_1EDB971F0, OS_LOG_TYPE_ERROR))
      {
        LOWORD(valuePtr) = 0;
        _os_log_error_impl(&dword_19C291000, v55, OS_LOG_TYPE_ERROR, "Skipping unsupported resource: LanguageModelFSTBlocklistResourceType", (uint8_t *)&valuePtr, 2u);
      }
      return;
    case 40:
      v16 = *(_QWORD *)(a1[20] + 8);
      v17 = *(_QWORD **)(v16 + 48);
      if ((unint64_t)v17 >= *(_QWORD *)(v16 + 56))
        goto LABEL_135;
      *v17 = *(_QWORD *)a2;
      v69 = *(_QWORD *)(a2 + 8);
      v17[1] = v69;
      if (v69)
      {
        v70 = (unint64_t *)(v69 + 8);
        do
          v71 = __ldxr(v70);
        while (__stxr(v71 + 1, v70));
      }
      goto LABEL_106;
    case 48:
      v16 = *(_QWORD *)(a1[7] + 8);
      v17 = *(_QWORD **)(v16 + 48);
      if ((unint64_t)v17 >= *(_QWORD *)(v16 + 56))
        goto LABEL_135;
      *v17 = *(_QWORD *)a2;
      v60 = *(_QWORD *)(a2 + 8);
      v17[1] = v60;
      if (v60)
      {
        v61 = (unint64_t *)(v60 + 8);
        do
          v62 = __ldxr(v61);
        while (__stxr(v62 + 1, v61));
      }
      goto LABEL_106;
    case 49:
      v84 = *(_QWORD *)(a1[21] + 8);
      if (!*(_QWORD *)(v84 + 40))
      {
        v86 = *(CFDictionaryRef **)a2;
        v85 = *(_QWORD *)(a2 + 8);
        if (v85)
        {
          v87 = (unint64_t *)(v85 + 8);
          do
            v88 = __ldxr(v87);
          while (__stxr(v88 + 1, v87));
        }
        v32 = *(std::__shared_weak_count **)(v84 + 48);
        *(_QWORD *)(v84 + 40) = v86;
        *(_QWORD *)(v84 + 48) = v85;
        if (!v32)
          return;
        v89 = (unint64_t *)&v32->__shared_owners_;
        do
          v34 = __ldaxr(v89);
        while (__stlxr(v34 - 1, v89));
LABEL_129:
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
        }
        return;
      }
      if (qword_1EDB971F8 != -1)
        dispatch_once(&qword_1EDB971F8, &unk_1E3D3A1E0);
      if (os_log_type_enabled((os_log_t)qword_1EDB971F0, OS_LOG_TYPE_ERROR))
        sub_19C445804(&valuePtr, **(CFDictionaryRef **)(*(_QWORD *)(a1[21] + 8) + 40));
      v100 = 320;
      break;
    case 50:
      v16 = *(_QWORD *)(a1[18] + 8);
      v17 = *(_QWORD **)(v16 + 48);
      if ((unint64_t)v17 >= *(_QWORD *)(v16 + 56))
        goto LABEL_135;
      *v17 = *(_QWORD *)a2;
      v56 = *(_QWORD *)(a2 + 8);
      v17[1] = v56;
      if (v56)
      {
        v57 = (unint64_t *)(v56 + 8);
        do
          v58 = __ldxr(v57);
        while (__stxr(v58 + 1, v57));
      }
      goto LABEL_106;
    case 52:
      v16 = *(_QWORD *)(a1[19] + 8);
      v17 = *(_QWORD **)(v16 + 48);
      if ((unint64_t)v17 >= *(_QWORD *)(v16 + 56))
      {
LABEL_135:
        *(_QWORD *)(v16 + 48) = sub_19C328140(v16 + 40, *(__n128 *)a2);
      }
      else
      {
        *v17 = *(_QWORD *)a2;
        v24 = *(_QWORD *)(a2 + 8);
        v17[1] = v24;
        if (v24)
        {
          v25 = (unint64_t *)(v24 + 8);
          do
            v26 = __ldxr(v25);
          while (__stxr(v26 + 1, v25));
        }
LABEL_106:
        *(_QWORD *)(v16 + 48) = v17 + 2;
      }
      return;
    default:
      return;
  }
  __assert_rtn("initialize_block_invoke", "LMCompositeLanguageModel.cpp", v100, "false");
}

void sub_19C323A9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,__int128 __p,int a26,__int16 a27,char a28,char a29,uint64_t a30,_QWORD *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
  uint64_t v50;
  void **v51;
  void *v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v57;
  void *v58;
  NSObject *v59;
  uint64_t v60;

  if (a29 < 0)
    operator delete((void *)__p);
  if (a23 < 0)
  {
    operator delete(a18);
    if ((v53 & 1) == 0)
      goto LABEL_8;
  }
  else if (!v53)
  {
LABEL_8:
    a31 = (_QWORD *)*MEMORY[0x1E0DE4F50];
    v57 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
    *(_QWORD **)((char *)&a31 + *(a31 - 3)) = *(_QWORD **)(MEMORY[0x1E0DE4F50] + 64);
    a33 = v57;
    a34 = MEMORY[0x1E0DE4FB8] + 16;
    if (a47 < 0)
      operator delete(a42);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x1A1AD34CC](&a50);
    if (*v51)
      munmap(*v51, *(_QWORD *)(v50 + 32));
    *(_QWORD *)(v50 + 32) = 0;
    if (a17 < 0)
      operator delete(a12);
    MEMORY[0x1A1AD355C](v50, 0x10F1C40E875E8CALL);
    if (a2 == 1)
    {
      v58 = __cxa_begin_catch(a1);
      if (*(_QWORD *)(v54 + 504) != -1)
        dispatch_once(&qword_1EDB971F8, &unk_1E3D3A1E0);
      v59 = *(NSObject **)(v55 + 496);
      if (os_log_type_enabled(v59, OS_LOG_TYPE_ERROR))
      {
        v60 = (*(uint64_t (**)(void *))(*(_QWORD *)v58 + 16))(v58);
        LODWORD(__p) = 136315138;
        *(_QWORD *)((char *)&__p + 4) = v60;
        _os_log_error_impl(&dword_19C291000, v59, OS_LOG_TYPE_ERROR, "Resource initialization failed: %s", (uint8_t *)&__p, 0xCu);
      }
      __cxa_end_catch();
      JUMPOUT(0x19C3233F4);
    }
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v52);
  goto LABEL_8;
}

void sub_19C323E94(uint64_t a1, CFTypeRef cf)
{
  const void *v3;
  uint64_t v4;
  char **v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  const __CFArray *v10;
  CFIndex Count;
  CFIndex v12;
  CFArrayRef v13;
  CFIndex v14;
  std::recursive_mutex *v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  NSObject *v20;
  void **v21;
  const char *v22;
  void **v23;
  unint64_t v24;
  uint64_t v25;
  const void *v26;
  uint64_t *v27;
  _QWORD *v28;
  void **v29;
  _QWORD *v30;
  __CFDictionary *MutableCopy;
  uint64_t **v32;
  unint64_t v33;
  size_t v34;
  const void *v35;
  CFIndex v36;
  const UInt8 *v37;
  CFIndex v38;
  __CFString *v39;
  const UInt8 *v40;
  CFIndex v41;
  CFLocaleRef v42;
  void **v43;
  void *v44;
  const __CFDictionary *v45;
  char *v46;
  char *v47;
  void *v48;
  void **v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  char *v53;
  char *v54;
  void *v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  char *v59;
  char *v60;
  void *v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  char *v65;
  char *v66;
  void *v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  char *v71;
  char *v72;
  void *v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  CFTypeRef **v77;
  CFTypeRef **v78;
  CFTypeRef *v79;
  int v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  _QWORD *v84;
  const void *v85;
  const void *v86;
  CFArrayRef v87;
  void *exception;
  void *v89;
  uint64_t **v90;
  uint64_t v91;
  void *v92[2];
  char v93;
  CFArrayRef theArray;
  void *v95;
  char *v96;
  void *v97;
  char *v98;
  void *v99;
  char *v100;
  void *v101;
  char *v102;
  unsigned __int8 v103;
  CFTypeRef v104;
  CFMutableDictionaryRef theDict;
  void *__p[2];
  void *v107[2];
  int v108;
  _BYTE cfa[22];
  char v110;
  void *v111[2];
  char v112;
  void *v113[2];
  char v114;
  void *v115[2];
  char v116;
  void *v117[2];
  char v118;
  void *v119[2];
  char v120;
  void *v121[2];
  char v122;
  uint64_t v123;

  v123 = *MEMORY[0x1E0C80C00];
  v91 = a1;
  if (*(CFTypeRef *)(a1 + 176) != cf)
  {
    CFRetain(cf);
    v3 = *(const void **)(v91 + 176);
    if (v3)
      CFRelease(v3);
    a1 = v91;
    *(_QWORD *)(v91 + 176) = cf;
  }
  v4 = *(_QWORD *)(a1 + 184);
  v6 = *(_QWORD *)(a1 + 192);
  v5 = (char **)(a1 + 184);
  while (v6 != v4)
  {
    v7 = *(std::__shared_weak_count **)(v6 - 8);
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v6 -= 16;
  }
  *(_QWORD *)(v91 + 192) = v4;
  if (!cf)
  {
    theArray = 0;
    goto LABEL_19;
  }
  CFRetain(cf);
  sub_19C31D164(&theArray, cf);
  v10 = theArray;
  if (!theArray)
    goto LABEL_19;
  Count = CFArrayGetCount(theArray);
  v12 = Count;
  v13 = theArray;
  if (!theArray)
  {
    v14 = 0;
    if (!Count)
      goto LABEL_19;
    goto LABEL_36;
  }
  v14 = CFArrayGetCount(theArray);
  if (v12)
  {
LABEL_36:
    v24 = 0;
    while (1)
    {
      if (v10 == v13 && v14 == v24)
        goto LABEL_19;
      sub_19C31D210(cfa, v10, v24);
      v25 = operator new();
      v26 = *(const void **)cfa;
      *(_OWORD *)v25 = 0u;
      *(_OWORD *)(v25 + 16) = 0u;
      *(_OWORD *)(v25 + 32) = 0u;
      *(_OWORD *)(v25 + 48) = 0u;
      *(_OWORD *)(v25 + 64) = 0u;
      *(_OWORD *)(v25 + 80) = 0u;
      *(_OWORD *)(v25 + 96) = 0u;
      *(_OWORD *)(v25 + 112) = 0u;
      *(_OWORD *)(v25 + 128) = 0u;
      if (v26)
      {
        CFRetain(v26);
        if (*(_QWORD *)v25)
          CFRelease(*(CFTypeRef *)v25);
        *(_QWORD *)v25 = v26;
      }
      v27 = *(uint64_t **)(v91 + 192);
      if ((unint64_t)v27 < *(_QWORD *)(v91 + 200))
        break;
      *(_QWORD *)(v91 + 192) = sub_19C31D480(v5, v25);
      if (v26)
        goto LABEL_48;
LABEL_37:
      if (v12 == ++v24)
        goto LABEL_19;
    }
    *v27 = v25;
    v28 = (_QWORD *)operator new();
    *v28 = &off_1E3D31150;
    v28[1] = 0;
    v28[2] = 0;
    v28[3] = v25;
    v27[1] = (uint64_t)v28;
    *(_QWORD *)(v91 + 192) = v27 + 2;
    *(_QWORD *)(v91 + 192) = v27 + 2;
    if (!v26)
      goto LABEL_37;
LABEL_48:
    CFRelease(v26);
    goto LABEL_37;
  }
LABEL_19:
  v15 = *(std::recursive_mutex **)(v91 + 464);
  if (v15)
    sub_19C3BBBD8(v15, v91, *(const __CFArray **)(v91 + 176));
  v16 = *(_QWORD *)(v91 + 416);
  v17 = *(unsigned __int8 *)(v16 + 16);
  v18 = *(unsigned __int8 *)(v16 + 17);
  v19 = MEMORY[0x1A1AD2A04](*(_QWORD *)(v16 + 8));
  sub_19C3C07CC((uint64_t)v92, cf);
  if (v18)
  {
    if (qword_1EDB971F8 != -1)
      dispatch_once(&qword_1EDB971F8, &unk_1E3D3A1E0);
    v20 = qword_1EDB971F0;
    if (os_log_type_enabled((os_log_t)qword_1EDB971F0, OS_LOG_TYPE_DEFAULT))
    {
      v21 = v92;
      if (v93 < 0)
        v21 = (void **)v92[0];
      *(_DWORD *)cfa = 138412546;
      *(_QWORD *)&cfa[4] = v19;
      *(_WORD *)&cfa[12] = 2080;
      *(_QWORD *)&cfa[14] = v21;
      v22 = "Reloading Siri CompositeLanguageModel (%@) for locale(s) (%s)";
LABEL_55:
      _os_log_impl(&dword_19C291000, v20, OS_LOG_TYPE_DEFAULT, v22, cfa, 0x16u);
    }
  }
  else if (v17)
  {
    if (qword_1EDB971F8 != -1)
      dispatch_once(&qword_1EDB971F8, &unk_1E3D3A1E0);
    v20 = qword_1EDB971F0;
    if (os_log_type_enabled((os_log_t)qword_1EDB971F0, OS_LOG_TYPE_DEFAULT))
    {
      v23 = v92;
      if (v93 < 0)
        v23 = (void **)v92[0];
      *(_DWORD *)cfa = 138412546;
      *(_QWORD *)&cfa[4] = v19;
      *(_WORD *)&cfa[12] = 2080;
      *(_QWORD *)&cfa[14] = v23;
      v22 = "Reloading multilingual CompositeLanguageModel (%@) for locale(s) (%s)";
      goto LABEL_55;
    }
  }
  else
  {
    if (qword_1EDB971F8 != -1)
      dispatch_once(&qword_1EDB971F8, &unk_1E3D3A1E0);
    v20 = qword_1EDB971F0;
    if (os_log_type_enabled((os_log_t)qword_1EDB971F0, OS_LOG_TYPE_DEFAULT))
    {
      v29 = v92;
      if (v93 < 0)
        v29 = (void **)v92[0];
      *(_DWORD *)cfa = 138412546;
      *(_QWORD *)&cfa[4] = v19;
      *(_WORD *)&cfa[12] = 2080;
      *(_QWORD *)&cfa[14] = v29;
      v22 = "Reloading CompositeLanguageModel (%@) for locale (%s)";
      goto LABEL_55;
    }
  }
  v30 = (_QWORD *)v91;
  sub_19C3C1334(*(_QWORD *)(v91 + 416), *(CFDictionaryRef *)(v91 + 432), *(unsigned __int8 *)(*(_QWORD *)(v91 + 232) + 344), (const void ****)v5);
  sub_19C325D58((_QWORD *)v91);
  MutableCopy = CFDictionaryCreateMutableCopy(0, 0, *(CFDictionaryRef *)(v91 + 432));
  theDict = MutableCopy;
  CFDictionaryRemoveValue(MutableCopy, (const void *)kLMLanguageLocalesKey);
  CFDictionarySetValue(MutableCopy, (const void *)kLMLanguageModelIgnoreSystemLanguageModelsKey, (const void *)*MEMORY[0x1E0C9AE50]);
  CFDictionarySetValue(MutableCopy, (const void *)kLMLanguageModelIsMultilingualModelKey, (const void *)*MEMORY[0x1E0C9AE40]);
  v32 = *(uint64_t ***)(v91 + 184);
  v90 = *(uint64_t ***)(v91 + 192);
  if (v32 == v90)
    goto LABEL_168;
  do
  {
    sub_19C32BADC(&v101, **v32);
    v110 = 7;
    strcpy(cfa, "hi-Latn");
    v112 = 7;
    strcpy((char *)v111, "gu-Latn");
    v114 = 7;
    strcpy((char *)v113, "mr-Latn");
    v116 = 7;
    strcpy((char *)v115, "te-Latn");
    v118 = 7;
    strcpy((char *)v117, "ta-Latn");
    v120 = 7;
    strcpy((char *)v119, "pa-Latn");
    v122 = 7;
    strcpy((char *)v121, "bn-Latn");
    *(_OWORD *)__p = 0u;
    *(_OWORD *)v107 = 0u;
    v108 = 1065353216;
    sub_19C30CC34((uint64_t)__p, (uint64_t)cfa, (uint64_t)cfa);
    sub_19C30CC34((uint64_t)__p, (uint64_t)v111, (uint64_t)v111);
    sub_19C30CC34((uint64_t)__p, (uint64_t)v113, (uint64_t)v113);
    sub_19C30CC34((uint64_t)__p, (uint64_t)v115, (uint64_t)v115);
    sub_19C30CC34((uint64_t)__p, (uint64_t)v117, (uint64_t)v117);
    sub_19C30CC34((uint64_t)__p, (uint64_t)v119, (uint64_t)v119);
    sub_19C30CC34((uint64_t)__p, (uint64_t)v121, (uint64_t)v121);
    if (v122 < 0)
    {
      operator delete(v121[0]);
      if ((v120 & 0x80000000) == 0)
      {
LABEL_61:
        if ((v118 & 0x80000000) == 0)
          goto LABEL_62;
        goto LABEL_79;
      }
    }
    else if ((v120 & 0x80000000) == 0)
    {
      goto LABEL_61;
    }
    operator delete(v119[0]);
    if ((v118 & 0x80000000) == 0)
    {
LABEL_62:
      if ((v116 & 0x80000000) == 0)
        goto LABEL_63;
      goto LABEL_80;
    }
LABEL_79:
    operator delete(v117[0]);
    if ((v116 & 0x80000000) == 0)
    {
LABEL_63:
      if ((v114 & 0x80000000) == 0)
        goto LABEL_64;
      goto LABEL_81;
    }
LABEL_80:
    operator delete(v115[0]);
    if ((v114 & 0x80000000) == 0)
    {
LABEL_64:
      if (v112 < 0)
        goto LABEL_82;
      goto LABEL_65;
    }
LABEL_81:
    operator delete(v113[0]);
    if (v112 < 0)
    {
LABEL_82:
      operator delete(v111[0]);
      if ((v110 & 0x80000000) == 0)
        goto LABEL_66;
      goto LABEL_83;
    }
LABEL_65:
    if ((v110 & 0x80000000) == 0)
      goto LABEL_66;
LABEL_83:
    operator delete(*(void **)cfa);
LABEL_66:
    if (sub_19C3C19A0(__p, (uint64_t)&v101))
    {
      v33 = v103;
      if ((v103 & 0x80u) != 0)
        v33 = (unint64_t)v102;
      if (v33 >= 2)
        v34 = 2;
      else
        v34 = v33;
      v110 = v34;
      if (v34)
      {
        if ((v103 & 0x80u) == 0)
          v35 = &v101;
        else
          v35 = v101;
        memmove(cfa, v35, v34);
        v36 = v110;
      }
      else
      {
        v36 = 0;
      }
      cfa[v34] = 0;
      if ((v36 & 0x80u) == 0)
        v40 = cfa;
      else
        v40 = *(const UInt8 **)cfa;
      if ((v36 & 0x80u) == 0)
        v41 = v36;
      else
        v41 = *(_QWORD *)&cfa[8];
      v39 = (__CFString *)CFStringCreateWithBytes(0, v40, v41, 0x8000100u, 0);
      v99 = v39;
      if (!v39)
      {
        exception = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1A1AD3154](exception, "Could not construct");
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
      }
      if (v110 < 0)
        operator delete(*(void **)cfa);
    }
    else
    {
      if ((v103 & 0x80u) == 0)
        v37 = (const UInt8 *)&v101;
      else
        v37 = (const UInt8 *)v101;
      if ((v103 & 0x80u) == 0)
        v38 = v103;
      else
        v38 = (CFIndex)v102;
      v39 = (__CFString *)CFStringCreateWithBytes(0, v37, v38, 0x8000100u, 0);
      v99 = v39;
      if (!v39)
      {
        v89 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1A1AD3154](v89, "Could not construct");
        __cxa_throw(v89, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
      }
    }
    v42 = CFLocaleCreate(0, v39);
    v104 = v42;
    CFRelease(v39);
    v43 = (void **)v107[0];
    if (v107[0])
    {
      do
      {
        v49 = (void **)*v43;
        if (*((char *)v43 + 39) < 0)
          operator delete(v43[2]);
        operator delete(v43);
        v43 = v49;
      }
      while (v49);
    }
    v44 = __p[0];
    __p[0] = 0;
    if (v44)
      operator delete(v44);
    if ((char)v103 < 0)
      operator delete(v101);
    v45 = theDict;
    CFDictionarySetValue(theDict, (const void *)kLMLanguageModelLocaleKey, v42);
    sub_19C346094((uint64_t)cfa, v45, (void **)(*(_QWORD *)(v91 + 416) + 80));
    sub_19C348B90((uint64_t)__p, *(CFTypeRef *)cfa, 42);
    sub_19C348B90((uint64_t)&v101, *(CFTypeRef *)cfa, 10);
    sub_19C32C14C(__p, (uint64_t)__p[1], v101, v102, (v102 - (_BYTE *)v101) >> 4);
    sub_19C348B90((uint64_t)&v99, *(CFTypeRef *)cfa, 41);
    sub_19C32C14C(__p, (uint64_t)__p[1], v99, v100, (v100 - (_BYTE *)v99) >> 4);
    sub_19C348B90((uint64_t)&v97, *(CFTypeRef *)cfa, 50);
    sub_19C348B90((uint64_t)&v95, *(CFTypeRef *)cfa, 52);
    sub_19C32C14C(&v95, (uint64_t)v96, (_QWORD *)__p[0], (_QWORD *)__p[1], ((char *)__p[1] - (char *)__p[0]) >> 4);
    sub_19C32C14C(&v97, (uint64_t)v98, (_QWORD *)__p[0], (_QWORD *)__p[1], ((char *)__p[1] - (char *)__p[0]) >> 4);
    sub_19C324FE0((uint64_t)*v32, (__n128 **)&v97, (uint64_t)&v95);
    v46 = (char *)v95;
    if (v95)
    {
      v47 = v96;
      v48 = v95;
      if (v96 != v95)
      {
        do
        {
          v50 = (std::__shared_weak_count *)*((_QWORD *)v47 - 1);
          if (v50)
          {
            v51 = (unint64_t *)&v50->__shared_owners_;
            do
              v52 = __ldaxr(v51);
            while (__stlxr(v52 - 1, v51));
            if (!v52)
            {
              ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
              std::__shared_weak_count::__release_weak(v50);
            }
          }
          v47 -= 16;
        }
        while (v47 != v46);
        v48 = v95;
      }
      v96 = v46;
      operator delete(v48);
    }
    v53 = (char *)v97;
    if (v97)
    {
      v54 = v98;
      v55 = v97;
      if (v98 != v97)
      {
        do
        {
          v56 = (std::__shared_weak_count *)*((_QWORD *)v54 - 1);
          if (v56)
          {
            v57 = (unint64_t *)&v56->__shared_owners_;
            do
              v58 = __ldaxr(v57);
            while (__stlxr(v58 - 1, v57));
            if (!v58)
            {
              ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
              std::__shared_weak_count::__release_weak(v56);
            }
          }
          v54 -= 16;
        }
        while (v54 != v53);
        v55 = v97;
      }
      v98 = v53;
      operator delete(v55);
    }
    v59 = (char *)v99;
    if (v99)
    {
      v60 = v100;
      v61 = v99;
      if (v100 != v99)
      {
        do
        {
          v62 = (std::__shared_weak_count *)*((_QWORD *)v60 - 1);
          if (v62)
          {
            v63 = (unint64_t *)&v62->__shared_owners_;
            do
              v64 = __ldaxr(v63);
            while (__stlxr(v64 - 1, v63));
            if (!v64)
            {
              ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
              std::__shared_weak_count::__release_weak(v62);
            }
          }
          v60 -= 16;
        }
        while (v60 != v59);
        v61 = v99;
      }
      v100 = v59;
      operator delete(v61);
    }
    v65 = (char *)v101;
    if (v101)
    {
      v66 = v102;
      v67 = v101;
      if (v102 != v101)
      {
        do
        {
          v68 = (std::__shared_weak_count *)*((_QWORD *)v66 - 1);
          if (v68)
          {
            v69 = (unint64_t *)&v68->__shared_owners_;
            do
              v70 = __ldaxr(v69);
            while (__stlxr(v70 - 1, v69));
            if (!v70)
            {
              ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
              std::__shared_weak_count::__release_weak(v68);
            }
          }
          v66 -= 16;
        }
        while (v66 != v65);
        v67 = v101;
      }
      v102 = v65;
      operator delete(v67);
    }
    v71 = (char *)__p[0];
    if (__p[0])
    {
      v72 = (char *)__p[1];
      v73 = __p[0];
      if (__p[1] != __p[0])
      {
        do
        {
          v74 = (std::__shared_weak_count *)*((_QWORD *)v72 - 1);
          if (v74)
          {
            v75 = (unint64_t *)&v74->__shared_owners_;
            do
              v76 = __ldaxr(v75);
            while (__stlxr(v76 - 1, v75));
            if (!v76)
            {
              ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
              std::__shared_weak_count::__release_weak(v74);
            }
          }
          v72 -= 16;
        }
        while (v72 != v71);
        v73 = __p[0];
      }
      __p[1] = v71;
      operator delete(v73);
    }
    sub_19C2F5B40((uint64_t)cfa);
    if (v104)
      CFRelease(v104);
    v32 += 2;
  }
  while (v32 != v90);
  MutableCopy = theDict;
  v30 = (_QWORD *)v91;
LABEL_168:
  if (MutableCopy)
    CFRelease(MutableCopy);
  if (*(_BYTE *)(v30[29] + 192) && v30[6] && v30[34])
  {
    v77 = (CFTypeRef **)v30[23];
    v78 = (CFTypeRef **)v30[24];
    while (v77 != v78)
    {
      v79 = *v77;
      v80 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v30[34] + 8) + 72))(*(_QWORD *)(v30[34] + 8), v30[29] + 88);
      v81 = v30[6];
      v82 = *(unsigned __int8 *)(v30[29] + 356);
      v83 = operator new();
      sub_19C340530(v83, *v79, v80, *(_QWORD *)(v81 + 328), v82 != 0);
      v84 = (*v77)[16];
      (*v77)[16] = (CFTypeRef)v83;
      v30 = (_QWORD *)v91;
      if (v84)
      {
        v85 = (const void *)v84[2];
        if (v85)
          CFRelease(v85);
        v86 = (const void *)v84[1];
        if (v86)
          CFRelease(v86);
        MEMORY[0x1A1AD355C](v84, 0x1060C40950A32C8);
      }
      v77 += 2;
    }
  }
  sub_19C325FB0(v30);
  if (v93 < 0)
  {
    operator delete(v92[0]);
    v87 = theArray;
    if (theArray)
      goto LABEL_186;
  }
  else
  {
    v87 = theArray;
    if (!theArray)
      return;
LABEL_186:
    CFRelease(v87);
  }
}

void sub_19C324B78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36,int a37,__int16 a38,char a39,char a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_19C2CDAC8(exception_object);
}

void sub_19C324D2C()
{
  JUMPOUT(0x19C324CE0);
}

void sub_19C324D34()
{
  JUMPOUT(0x19C324CE0);
}

void sub_19C324D3C()
{
  JUMPOUT(0x19C324CD8);
}

void sub_19C324D44()
{
  JUMPOUT(0x19C324CD0);
}

void sub_19C324D4C()
{
  JUMPOUT(0x19C324CC8);
}

void sub_19C324D54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, const void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,const void *a34,void *a35,uint64_t a36,void *__p,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58,void *a59,uint64_t a60,int a61,__int16 a62,char a63)
{
  char a64;
  void *a65;
  char a70;
  void *a71;
  char a72;
  void *a73;
  char a74;
  void **v75;
  void *v76;
  void **v77;

  v75 = (void **)__p;
  if (__p)
  {
    do
    {
      v77 = (void **)*v75;
      if (*((char *)v75 + 39) < 0)
        operator delete(v75[2]);
      operator delete(v75);
      v75 = v77;
    }
    while (v77);
  }
  v76 = a35;
  a35 = 0;
  if (v76)
  {
    operator delete(v76);
    if ((a74 & 0x80000000) == 0)
    {
LABEL_4:
      if ((a72 & 0x80000000) == 0)
        goto LABEL_5;
      goto LABEL_20;
    }
  }
  else if ((a74 & 0x80000000) == 0)
  {
    goto LABEL_4;
  }
  operator delete(a73);
  if ((a72 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a70 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_21;
  }
LABEL_20:
  operator delete(a71);
  if ((a70 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a64 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_22;
  }
LABEL_21:
  operator delete(a65);
  if ((a64 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a58 & 0x80000000) == 0)
      goto LABEL_8;
    goto LABEL_23;
  }
LABEL_22:
  operator delete(a59);
  if ((a58 & 0x80000000) == 0)
  {
LABEL_8:
    if ((a52 & 0x80000000) == 0)
      goto LABEL_9;
    goto LABEL_24;
  }
LABEL_23:
  operator delete(a53);
  if ((a52 & 0x80000000) == 0)
  {
LABEL_9:
    if ((a46 & 0x80000000) == 0)
      goto LABEL_10;
    goto LABEL_25;
  }
LABEL_24:
  operator delete(a47);
  if ((a46 & 0x80000000) == 0)
  {
LABEL_10:
    if ((a32 & 0x80000000) == 0)
      goto LABEL_12;
    goto LABEL_11;
  }
LABEL_25:
  operator delete(a41);
  if ((a32 & 0x80000000) == 0)
  {
LABEL_12:
    sub_19C32BBE4(&a34);
    if (a16 < 0)
      operator delete(a11);
    sub_19C31D650(&a17);
    _Unwind_Resume(a1);
  }
LABEL_11:
  operator delete(a27);
  goto LABEL_12;
}

uint64_t sub_19C324E84(char **a1)
{
  char *v3;
  char *v4;
  char **v5;
  uint64_t v6;
  const void *v7;
  const void *v8;
  uint64_t *v9;
  _QWORD *v10;

  v4 = a1[23];
  v3 = a1[24];
  v5 = a1 + 23;
  if (v4 == v3)
  {
    v6 = operator new();
    v7 = (const void *)(*((uint64_t (**)(char **))*a1 + 8))(a1);
    v8 = v7;
    *(_OWORD *)(v6 + 112) = 0u;
    *(_OWORD *)(v6 + 128) = 0u;
    *(_OWORD *)(v6 + 80) = 0u;
    *(_OWORD *)(v6 + 96) = 0u;
    *(_OWORD *)(v6 + 48) = 0u;
    *(_OWORD *)(v6 + 64) = 0u;
    *(_OWORD *)(v6 + 16) = 0u;
    *(_OWORD *)(v6 + 32) = 0u;
    *(_OWORD *)v6 = 0u;
    if (v7)
    {
      CFRetain(v7);
      if (*(_QWORD *)v6)
        CFRelease(*(CFTypeRef *)v6);
      *(_QWORD *)v6 = v8;
    }
    v9 = (uint64_t *)a1[24];
    if (v9 >= (uint64_t *)a1[25])
    {
      v3 = sub_19C31D480(v5, v6);
    }
    else
    {
      *v9 = v6;
      v10 = (_QWORD *)operator new();
      *v10 = &off_1E3D31150;
      v10[1] = 0;
      v10[2] = 0;
      v10[3] = v6;
      v9[1] = (uint64_t)v10;
      v3 = (char *)(v9 + 2);
      a1[24] = (char *)(v9 + 2);
    }
    a1[24] = v3;
    v4 = a1[23];
  }
  if (v3 == v4)
    sub_19C30F73C();
  return *(_QWORD *)v4;
}

void sub_19C324F8C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v5 = sub_19C31D2B4(v2);
  MEMORY[0x1A1AD355C](v5, 0x10E0C405C30B098);
  *(_QWORD *)(v1 + 192) = v3;
  _Unwind_Resume(a1);
}

void sub_19C324FBC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD355C](v1, 0x10E0C405C30B098);
  _Unwind_Resume(a1);
}

void sub_19C324FE0(uint64_t a1, __n128 **a2, uint64_t a3)
{
  void **v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  CFTypeRef v12;
  CFTypeRef v13;
  NSObject *v14;
  void **v15;
  _QWORD *v16;
  _QWORD *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  CFTypeRef v21;
  CFTypeRef v22;
  NSObject *v23;
  __n128 *v24;
  __n128 *v25;
  __n128 *v26;
  CFDictionaryRef *v27;
  const __CFNumber *Value;
  __n128 *v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  CFDictionaryRef **v33;
  CFDictionaryRef **v34;
  const __CFAllocator *v35;
  const void *v36;
  const __CFDictionary *InfoDictionary;
  const __CFArray *v38;
  CFIndex v39;
  const __CFDictionary *ValueAtIndex;
  const __CFNumber *v41;
  __CFDictionary *v42;
  uint64_t v43;
  uint64_t v44;
  const void *v45;
  uint64_t *v46;
  char *v47;
  char *v48;
  char *v49;
  void *v50;
  std::__shared_weak_count *v51;
  unint64_t *p_shared_owners;
  unint64_t v53;
  CFDictionaryRef **v54;
  CFDictionaryRef **v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t *v59;
  void **v60;
  void *v61;
  const void *v62;
  void *v63;
  CFTypeRef v64;
  CFDictionaryRef v65;
  uint64_t v66;
  const void *v67;
  const __CFString *v68;
  NSObject *v69;
  void **v70;
  CFTypeRef *v71;
  CFTypeRef *v72;
  void **v73;
  void **v74;
  int v75;
  const char *v76;
  const char *v77;
  void *v78[2];
  char v79;
  CFTypeRef v80;
  CFTypeRef v81;
  __CFDictionary *valuePtr;
  CFTypeRef cf[2];
  void *v84[2];
  int v85;
  const __CFString *v86;
  CFErrorRef err;
  void *__p[4];
  CFTypeRef v89[3];
  void *v90[2];
  char v91;
  void *v92[2];
  char v93;
  void *v94[2];
  char v95;
  void *v96[2];
  char v97;
  void *v98[2];
  char v99;
  void *v100[2];
  char v101;
  uint64_t v102;

  v102 = *MEMORY[0x1E0C80C00];
  sub_19C32BADC(v78, *(_QWORD *)a1);
  *(_BYTE *)(a1 + 145) = 0;
  sub_19C3498C8(v89, a2, 50);
  v6 = (void **)(a1 + 56);
  v7 = *(_QWORD **)(a1 + 56);
  if (v7)
  {
    v8 = *(_QWORD **)(a1 + 64);
    v9 = *(void **)(a1 + 56);
    if (v8 != v7)
    {
      do
      {
        v11 = *--v8;
        v10 = v11;
        *v8 = 0;
        if (v11)
          (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
      }
      while (v8 != v7);
      v9 = *v6;
    }
    *(_QWORD *)(a1 + 64) = v7;
    operator delete(v9);
    *v6 = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 72) = 0;
  }
  v12 = v89[0];
  *(CFTypeRef *)(a1 + 56) = v89[0];
  v13 = v89[1];
  *(_OWORD *)(a1 + 64) = *(_OWORD *)&v89[1];
  if (v12 == v13 && *a2 != a2[1])
  {
    if (qword_1EDB971F8 != -1)
      dispatch_once(&qword_1EDB971F8, &unk_1E3D3A1E0);
    v14 = qword_1EDB971F0;
    if (os_log_type_enabled((os_log_t)qword_1EDB971F0, OS_LOG_TYPE_ERROR))
    {
      v73 = v78;
      if (v79 < 0)
        v73 = (void **)v78[0];
      LODWORD(v89[0]) = 136315138;
      *(CFTypeRef *)((char *)v89 + 4) = v73;
      _os_log_error_impl(&dword_19C291000, v14, OS_LOG_TYPE_ERROR, "Failed to load default blocklist for locale: %s", (uint8_t *)v89, 0xCu);
    }
  }
  if (*(_QWORD *)a3 != *(_QWORD *)(a3 + 8))
  {
    sub_19C3498C8(v89, (__n128 **)a3, 52);
    v15 = (void **)(a1 + 80);
    v16 = *(_QWORD **)(a1 + 80);
    if (v16)
    {
      v17 = *(_QWORD **)(a1 + 88);
      v18 = *(void **)(a1 + 80);
      if (v17 != v16)
      {
        do
        {
          v20 = *--v17;
          v19 = v20;
          *v17 = 0;
          if (v20)
            (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
        }
        while (v17 != v16);
        v18 = *v15;
      }
      *(_QWORD *)(a1 + 88) = v16;
      operator delete(v18);
      *v15 = 0;
      *(_QWORD *)(a1 + 88) = 0;
      *(_QWORD *)(a1 + 96) = 0;
    }
    v21 = v89[0];
    *(CFTypeRef *)(a1 + 80) = v89[0];
    v22 = v89[1];
    *(_OWORD *)(a1 + 88) = *(_OWORD *)&v89[1];
    if (v21 == v22)
    {
      if (qword_1EDB971F8 != -1)
        dispatch_once(&qword_1EDB971F8, &unk_1E3D3A1E0);
      v23 = qword_1EDB971F0;
      if (os_log_type_enabled((os_log_t)qword_1EDB971F0, OS_LOG_TYPE_ERROR))
      {
        v74 = v78;
        if (v79 < 0)
          v74 = (void **)v78[0];
        LODWORD(v89[0]) = 136315138;
        *(CFTypeRef *)((char *)v89 + 4) = v74;
        _os_log_error_impl(&dword_19C291000, v23, OS_LOG_TYPE_ERROR, "Failed to load quickpath blocklist for locale: %s", (uint8_t *)v89, 0xCu);
      }
    }
  }
  *(_BYTE *)(a1 + 144) = 0;
  memset(v89, 0, sizeof(v89));
  v24 = *a2;
  v25 = a2[1];
  if (*a2 != v25)
  {
    do
    {
      v27 = (CFDictionaryRef *)v24->n128_u64[0];
      LODWORD(valuePtr) = 0;
      Value = (const __CFNumber *)CFDictionaryGetValue(*v27, CFSTR("Type"));
      CFNumberGetValue(Value, kCFNumberIntType, &valuePtr);
      if ((_DWORD)valuePtr == 50)
      {
        v29 = (__n128 *)v89[1];
        if (v89[1] >= v89[2])
        {
          v26 = sub_19C328140((uint64_t)v89, *v24);
        }
        else
        {
          *(_QWORD *)v89[1] = v24->n128_u64[0];
          v30 = v24->n128_u64[1];
          v29->n128_u64[1] = v30;
          if (v30)
          {
            v31 = (unint64_t *)(v30 + 8);
            do
              v32 = __ldxr(v31);
            while (__stxr(v32 + 1, v31));
          }
          v26 = v29 + 1;
        }
        v89[1] = v26;
      }
      ++v24;
    }
    while (v24 != v25);
    v33 = (CFDictionaryRef **)v89[0];
    v34 = (CFDictionaryRef **)v89[1];
    if (v89[0] != v89[1])
    {
      v35 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      while (1)
      {
        v36 = CFDictionaryGetValue(**v33, CFSTR("URL"));
        v80 = CFRetain(v36);
        v81 = CFBundleCreate(v35, (CFURLRef)v80);
        InfoDictionary = CFBundleGetInfoDictionary((CFBundleRef)v81);
        if (!InfoDictionary)
          break;
        v38 = (const __CFArray *)CFDictionaryGetValue(InfoDictionary, CFSTR("Contents"));
        if (!v38)
        {
          v75 = 229;
          v77 = "_getContents";
          v76 = "(contents != 0) && \"There should files contained within the blocklist bundle\"";
LABEL_145:
          __assert_rtn(v77, "BlocklistBundle.cpp", v75, v76);
        }
        v39 = 0;
        while (v39 < CFArrayGetCount(v38))
        {
          ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v38, v39);
          LODWORD(valuePtr) = 0;
          v41 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, CFSTR("Type"));
          CFNumberGetValue(v41, kCFNumberIntType, &valuePtr);
          ++v39;
          if ((_DWORD)valuePtr == 53)
          {
            v42 = sub_19C3A2CFC((CFURLRef *)&v80, ValueAtIndex);
            valuePtr = v42;
            cf[1] = 0;
            cf[0] = CFRetain(v42);
            LOBYTE(v84[0]) = 1;
            if (!v42 || (CFRelease(v42), LOBYTE(v84[0])))
            {
              v43 = operator new();
              v44 = v43;
              if (!LOBYTE(v84[0]))
                sub_19C30F5A0();
              v45 = *(const void **)a1;
              memset(__p, 0, 24);
              sub_19C33821C(v43, v45, (CFDictionaryRef *)cf, (CFDictionaryRef ***)__p);
              v46 = *(uint64_t **)(a1 + 112);
              if ((unint64_t)v46 >= *(_QWORD *)(a1 + 120))
              {
                v47 = sub_19C326B48((char **)(a1 + 104), v44);
              }
              else
              {
                *v46 = v44;
                v47 = (char *)(v46 + 1);
              }
              *(_QWORD *)(a1 + 112) = v47;
              v48 = (char *)__p[0];
              if (__p[0])
              {
                v49 = (char *)__p[1];
                v50 = __p[0];
                if (__p[1] != __p[0])
                {
                  do
                  {
                    v51 = (std::__shared_weak_count *)*((_QWORD *)v49 - 1);
                    if (v51)
                    {
                      p_shared_owners = (unint64_t *)&v51->__shared_owners_;
                      do
                        v53 = __ldaxr(p_shared_owners);
                      while (__stlxr(v53 - 1, p_shared_owners));
                      if (!v53)
                      {
                        ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                        std::__shared_weak_count::__release_weak(v51);
                      }
                    }
                    v49 -= 16;
                  }
                  while (v49 != v48);
                  v50 = __p[0];
                }
                __p[1] = v48;
                operator delete(v50);
              }
              *(_BYTE *)(a1 + 144) = 1;
              if (LOBYTE(v84[0]) && cf[0])
                CFRelease(cf[0]);
            }
            break;
          }
        }
        if (v81)
          CFRelease(v81);
        v81 = 0;
        if (v80)
          CFRelease(v80);
        v33 += 2;
        if (v33 == v34)
        {
          v33 = (CFDictionaryRef **)v89[0];
          goto LABEL_71;
        }
      }
      v75 = 218;
      v76 = "d && \"An Info.plist file was unable to be read from the bundle\"";
      v77 = "_getInfoDictionary";
      goto LABEL_145;
    }
LABEL_71:
    if (v33)
    {
      v54 = (CFDictionaryRef **)v89[1];
      v55 = v33;
      if (v89[1] != v33)
      {
        do
        {
          v56 = (std::__shared_weak_count *)*(v54 - 1);
          if (v56)
          {
            v57 = (unint64_t *)&v56->__shared_owners_;
            do
              v58 = __ldaxr(v57);
            while (__stlxr(v58 - 1, v57));
            if (!v58)
            {
              ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
              std::__shared_weak_count::__release_weak(v56);
            }
          }
          v54 -= 2;
        }
        while (v54 != v33);
        v55 = (CFDictionaryRef **)v89[0];
      }
      v89[1] = v33;
      operator delete(v55);
    }
  }
  HIBYTE(v89[2]) = 7;
  strcpy((char *)v89, "hi-Latn");
  v91 = 7;
  strcpy((char *)v90, "gu-Latn");
  v93 = 7;
  strcpy((char *)v92, "mr-Latn");
  v95 = 7;
  strcpy((char *)v94, "te-Latn");
  v97 = 7;
  strcpy((char *)v96, "ta-Latn");
  v99 = 7;
  strcpy((char *)v98, "pa-Latn");
  v101 = 7;
  strcpy((char *)v100, "bn-Latn");
  *(_OWORD *)cf = 0u;
  *(_OWORD *)v84 = 0u;
  v85 = 1065353216;
  sub_19C30CC34((uint64_t)cf, (uint64_t)v89, (uint64_t)v89);
  sub_19C30CC34((uint64_t)cf, (uint64_t)v90, (uint64_t)v90);
  sub_19C30CC34((uint64_t)cf, (uint64_t)v92, (uint64_t)v92);
  sub_19C30CC34((uint64_t)cf, (uint64_t)v94, (uint64_t)v94);
  sub_19C30CC34((uint64_t)cf, (uint64_t)v96, (uint64_t)v96);
  sub_19C30CC34((uint64_t)cf, (uint64_t)v98, (uint64_t)v98);
  sub_19C30CC34((uint64_t)cf, (uint64_t)v100, (uint64_t)v100);
  if (v101 < 0)
  {
    operator delete(v100[0]);
    if ((v99 & 0x80000000) == 0)
    {
LABEL_84:
      if ((v97 & 0x80000000) == 0)
        goto LABEL_85;
      goto LABEL_120;
    }
  }
  else if ((v99 & 0x80000000) == 0)
  {
    goto LABEL_84;
  }
  operator delete(v98[0]);
  if ((v97 & 0x80000000) == 0)
  {
LABEL_85:
    if ((v95 & 0x80000000) == 0)
      goto LABEL_86;
    goto LABEL_121;
  }
LABEL_120:
  operator delete(v96[0]);
  if ((v95 & 0x80000000) == 0)
  {
LABEL_86:
    if ((v93 & 0x80000000) == 0)
      goto LABEL_87;
    goto LABEL_122;
  }
LABEL_121:
  operator delete(v94[0]);
  if ((v93 & 0x80000000) == 0)
  {
LABEL_87:
    if ((v91 & 0x80000000) == 0)
      goto LABEL_88;
LABEL_123:
    operator delete(v90[0]);
    if ((SHIBYTE(v89[2]) & 0x80000000) == 0)
      goto LABEL_89;
    goto LABEL_124;
  }
LABEL_122:
  operator delete(v92[0]);
  if (v91 < 0)
    goto LABEL_123;
LABEL_88:
  if ((SHIBYTE(v89[2]) & 0x80000000) == 0)
    goto LABEL_89;
LABEL_124:
  operator delete((void *)v89[0]);
LABEL_89:
  v59 = sub_19C3C19A0(cf, (uint64_t)v78);
  v60 = (void **)v84[0];
  if (v84[0])
  {
    do
    {
      v70 = (void **)*v60;
      if (*((char *)v60 + 39) < 0)
        operator delete(v60[2]);
      operator delete(v60);
      v60 = v70;
    }
    while (v70);
  }
  v61 = (void *)cf[0];
  cf[0] = 0;
  if (v61)
    operator delete(v61);
  if (v59)
  {
    *(_BYTE *)(a1 + 145) = 1;
    v62 = (const void *)*MEMORY[0x1E0D437B8];
    if (*MEMORY[0x1E0D437B8])
      CFRetain((CFTypeRef)*MEMORY[0x1E0D437B8]);
    sub_19C297DB4(cf, v62);
    v63 = *(void **)a1;
    if (*(_QWORD *)a1)
      CFRetain(*(CFTypeRef *)a1);
    __p[0] = v63;
    v64 = cf[0];
    if (cf[0])
      CFRetain(cf[0]);
    v89[0] = v64;
    v89[1] = v63;
    __p[0] = 0;
    v65 = sub_19C32BCAC((uint64_t *)v89, 1uLL);
    v80 = v65;
    if (v89[1])
      CFRelease(v89[1]);
    if (v89[0])
      CFRelease(v89[0]);
    if (cf[0])
      CFRelease(cf[0]);
    err = 0;
    v66 = LXTransliterationCreate();
    v67 = *(const void **)(a1 + 136);
    if (v67)
      CFRelease(v67);
    *(_QWORD *)(a1 + 136) = v66;
    if (!err)
      goto LABEL_133;
    v68 = CFErrorCopyDescription(err);
    v86 = v68;
    CFRelease(err);
    sub_19C29CEF8(v68, v89);
    sub_19C32BADC(cf, *(_QWORD *)a1);
    if (qword_1EDB971F8 != -1)
      dispatch_once(&qword_1EDB971F8, &unk_1E3D3A1E0);
    v69 = qword_1EDB971F0;
    if (os_log_type_enabled((os_log_t)qword_1EDB971F0, OS_LOG_TYPE_ERROR))
    {
      v71 = cf;
      if (SHIBYTE(v84[0]) < 0)
        v71 = (CFTypeRef *)cf[0];
      v72 = v89;
      if (SHIBYTE(v89[2]) < 0)
        v72 = (CFTypeRef *)v89[0];
      LODWORD(__p[0]) = 136315394;
      *(void **)((char *)__p + 4) = v71;
      WORD2(__p[1]) = 2080;
      *(void **)((char *)&__p[1] + 6) = v72;
      _os_log_error_impl(&dword_19C291000, v69, OS_LOG_TYPE_ERROR, "Failed to load transliteration lexicon for locale: %s, Error: %s", (uint8_t *)__p, 0x16u);
      if ((SHIBYTE(v84[0]) & 0x80000000) == 0)
      {
LABEL_112:
        if ((SHIBYTE(v89[2]) & 0x80000000) == 0)
          goto LABEL_113;
        goto LABEL_131;
      }
    }
    else if ((SHIBYTE(v84[0]) & 0x80000000) == 0)
    {
      goto LABEL_112;
    }
    operator delete((void *)cf[0]);
    if ((SHIBYTE(v89[2]) & 0x80000000) == 0)
    {
LABEL_113:
      if (!v68)
        goto LABEL_133;
      goto LABEL_132;
    }
LABEL_131:
    operator delete((void *)v89[0]);
    if (!v68)
    {
LABEL_133:
      CFRelease(v65);
      goto LABEL_134;
    }
LABEL_132:
    CFRelease(v68);
    goto LABEL_133;
  }
LABEL_134:
  if (v79 < 0)
    operator delete(v78[0]);
}

void sub_19C325A40(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_19C2CDAC8(a1);
}

void sub_19C325C88(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  JUMPOUT(0x19C325CCCLL);
}

void sub_19C325CA4()
{
  JUMPOUT(0x19C325CCCLL);
}

void sub_19C325CB8()
{
  JUMPOUT(0x19C325CC4);
}

void sub_19C325D48()
{
  __cxa_end_catch();
  JUMPOUT(0x19C325C54);
}

void sub_19C325D58(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t *i;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  const void *v15;
  const void *RootCursor;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[5];

  v1 = (uint64_t *)a1[23];
  for (i = (uint64_t *)a1[24]; v1 != i; v1 += 2)
  {
    v4 = (_QWORD *)*v1;
    v6 = *(_QWORD *)(*v1 + 8);
    v5 = *(_QWORD *)(*v1 + 16);
    v7 = v5 - v6;
    if (v5 == v6)
    {
      v9 = 0;
      v8 = 0;
    }
    else
    {
      if (v7 < 0)
        sub_19C2A18E8();
      v8 = (char *)operator new(v5 - v6);
      v9 = &v8[8 * (v7 >> 3)];
      bzero(v8, v7 & 0xFFFFFFFFFFFFFFF8);
    }
    v10 = (void *)v4[4];
    if (v10)
    {
      v4[5] = v10;
      operator delete(v10);
      v4[4] = 0;
      v4[5] = 0;
      v4[6] = 0;
    }
    v4[4] = v8;
    v4[5] = v9;
    v4[6] = v9;
    v11 = a1[29];
    if (!*(_BYTE *)(v11 + 361) && !*(_BYTE *)(v11 + 360))
    {
      v12 = *v1;
      v13 = *(_QWORD *)(*v1 + 8);
      if (*(_QWORD *)(*v1 + 16) != v13)
      {
        v14 = 0;
        do
        {
          v15 = *(const void **)(v13 + 8 * v14);
          if (v15
            && __dynamic_cast(v15, (const struct __class_type_info *)&unk_1E3D32218, (const struct __class_type_info *)&unk_1E3D316B0, 0))
          {
            v22[0] = 0;
            v22[1] = v22;
            v22[2] = 0x2000000000;
            v22[3] = 0;
            v18 = 0;
            v19 = &v18;
            v20 = 0x2000000000;
            v21 = 0;
            RootCursor = (const void *)LXLexiconCreateRootCursor();
            LXCursorEnumerateEntriesRecursivelyWithPolicy();
            v17 = v19[3];
            if (RootCursor)
              CFRelease(RootCursor);
            _Block_object_dispose(&v18, 8);
            _Block_object_dispose(v22, 8);
            v12 = *v1;
            *(_QWORD *)(*(_QWORD *)(*v1 + 32) + 8 * v14) = v17;
          }
          ++v14;
          v13 = *(_QWORD *)(v12 + 8);
        }
        while (v14 < (*(_QWORD *)(v12 + 16) - v13) >> 3);
      }
    }
  }
}

void sub_19C325F5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19C325F7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v11;
  va_list va;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a10);
  va_start(va, a10);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_19C325FB0(_QWORD *a1)
{
  unint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t **v5;
  uint64_t **v6;
  __int128 *v7;
  __int128 *v8;
  __int128 v9;
  _OWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  void **v14;
  __int128 *v15;
  __int128 v16;
  uint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint8x8_t v22;
  _QWORD *v23;
  _QWORD *v24;
  void *v25;
  void **v26;
  unint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  _QWORD *v35;
  float v36;
  float v37;
  _BOOL8 v38;
  unint64_t v39;
  unint64_t v40;
  size_t prime;
  int8x8_t v42;
  unint64_t v43;
  uint8x8_t v44;
  uint64_t v45;
  _QWORD *v46;
  unint64_t v47;
  _QWORD *v48;
  char *v49;
  uint64_t v50;
  uint64_t j;
  char *v52;
  void **v53;
  char v54;
  __int128 v55;
  void *v56;
  size_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t *v61;
  __int128 v62;
  int v63;
  uint64_t *v64;
  unint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  void **v70;
  void **v71;
  void **v72;
  void *v73;
  char *v74;
  char *v75;
  void *v76;
  __int128 *v77;
  void *v78;
  void **v79;
  uint64_t v80;
  void *v81;
  char *v82;
  unint64_t v83;
  void *v84[2];
  uint64_t v85;
  void *__p[2];
  char *v87;
  int v88;
  void *__dst[2];
  uint64_t v90;
  _BYTE v91[9];

  if (!a1[60])
  {
    v3 = operator new();
    *(_OWORD *)v3 = 0u;
    *(_OWORD *)(v3 + 16) = 0u;
    *(_DWORD *)(v3 + 32) = 1065353216;
    *(_QWORD *)(v3 + 48) = 0;
    *(_QWORD *)(v3 + 56) = 0;
    *(_QWORD *)(v3 + 40) = 0;
    v4 = a1[60];
    a1[60] = v3;
    if (v4)
      sub_19C31BB34(v4);
  }
  v81 = 0;
  v82 = 0;
  v83 = 0;
  v5 = (uint64_t **)a1[23];
  v6 = (uint64_t **)a1[24];
  if (v5 == v6)
  {
    v7 = 0;
    v8 = 0;
  }
  else
  {
    do
    {
      sub_19C32BADC(__p, **v5);
      v10 = v82;
      if ((unint64_t)v82 < v83)
      {
        v9 = *(_OWORD *)__p;
        *((_QWORD *)v82 + 2) = v87;
        *v10 = v9;
        v82 = (char *)v10 + 24;
      }
      else
      {
        v82 = sub_19C307C78(&v81, (uint64_t)__p);
        if (SHIBYTE(v87) < 0)
          operator delete(__p[0]);
      }
      v5 += 2;
    }
    while (v5 != v6);
    v8 = (__int128 *)v81;
    v7 = (__int128 *)v82;
  }
  v11 = a1[60];
  v79 = 0;
  v80 = 0;
  v78 = 0;
  sub_19C2B5440((char *)&v78, v8, v7, 0xAAAAAAAAAAAAAAABLL * (((char *)v7 - (char *)v8) >> 3));
  if ((void **)(v11 + 40) != &v78)
    sub_19C3388A4((void ***)(v11 + 40), (void **)v78, v79, 0xAAAAAAAAAAAAAAABLL * (((char *)v79 - (_BYTE *)v78) >> 3));
  v12 = *(_QWORD *)(v11 + 8);
  if (v12)
  {
    for (i = 0; i != v12; ++i)
      *(_QWORD *)(*(_QWORD *)v11 + 8 * i) = 0;
    v14 = *(void ***)(v11 + 16);
    *(_QWORD *)(v11 + 16) = 0;
    *(_QWORD *)(v11 + 24) = 0;
    if (v14)
    {
      do
      {
        v70 = (void **)*v14;
        sub_19C31BF28((uint64_t)(v14 + 5));
        if (*((char *)v14 + 39) < 0)
          operator delete(v14[2]);
        operator delete(v14);
        v14 = v70;
      }
      while (v70);
    }
  }
  v15 = *(__int128 **)(v11 + 40);
  v77 = *(__int128 **)(v11 + 48);
  if (v15 != v77)
  {
    while (1)
    {
      if (*((char *)v15 + 23) < 0)
      {
        sub_19C2B5238(__dst, *(void **)v15, *((_QWORD *)v15 + 1));
      }
      else
      {
        v16 = *v15;
        v90 = *((_QWORD *)v15 + 2);
        *(_OWORD *)__dst = v16;
      }
      if (SHIBYTE(v90) < 0)
      {
        sub_19C2B5238(v84, __dst[0], (unint64_t)__dst[1]);
      }
      else
      {
        *(_OWORD *)v84 = *(_OWORD *)__dst;
        v85 = v90;
      }
      sub_19C3C37E0();
      if (v90 >= 0)
        v17 = (uint64_t *)__dst;
      else
        v17 = (uint64_t *)__dst[0];
      if (v90 >= 0)
        v18 = HIBYTE(v90);
      else
        v18 = (unint64_t)__dst[1];
      v19 = sub_19C2A0F2C((uint64_t)v91, v17, v18);
      v20 = v19;
      v21 = *(_QWORD *)(v11 + 8);
      if (v21)
      {
        v22 = (uint8x8_t)vcnt_s8((int8x8_t)v21);
        v22.i16[0] = vaddlv_u8(v22);
        if (v22.u32[0] > 1uLL)
        {
          v1 = v19;
          if (v19 >= v21)
            v1 = v19 % v21;
        }
        else
        {
          v1 = (v21 - 1) & v19;
        }
        v23 = *(_QWORD **)(*(_QWORD *)v11 + 8 * v1);
        if (v23)
        {
          v24 = (_QWORD *)*v23;
          if (*v23)
          {
            if (v90 >= 0)
              v25 = (void *)HIBYTE(v90);
            else
              v25 = __dst[1];
            if (v90 >= 0)
              v26 = __dst;
            else
              v26 = (void **)__dst[0];
            if (v22.u32[0] < 2uLL)
            {
              while (1)
              {
                v31 = v24[1];
                if (v31 == v20)
                {
                  v32 = *((unsigned __int8 *)v24 + 39);
                  if ((v32 & 0x80u) == 0)
                    v33 = (void *)*((unsigned __int8 *)v24 + 39);
                  else
                    v33 = (void *)v24[3];
                  if (v33 == v25)
                  {
                    if ((v32 & 0x80) != 0)
                    {
                      if (!memcmp((const void *)v24[2], v26, v24[3]))
                        goto LABEL_121;
                    }
                    else
                    {
                      if (!*((_BYTE *)v24 + 39))
                        goto LABEL_121;
                      v34 = 0;
                      while (*((unsigned __int8 *)v24 + v34 + 16) == *((unsigned __int8 *)v26 + v34))
                      {
                        if (v32 == ++v34)
                          goto LABEL_121;
                      }
                    }
                  }
                }
                else if ((v31 & (v21 - 1)) != v1)
                {
                  goto LABEL_80;
                }
                v24 = (_QWORD *)*v24;
                if (!v24)
                  goto LABEL_80;
              }
            }
            do
            {
              v27 = v24[1];
              if (v27 == v20)
              {
                v28 = *((unsigned __int8 *)v24 + 39);
                if ((v28 & 0x80u) == 0)
                  v29 = (void *)*((unsigned __int8 *)v24 + 39);
                else
                  v29 = (void *)v24[3];
                if (v29 == v25)
                {
                  if ((v28 & 0x80) != 0)
                  {
                    if (!memcmp((const void *)v24[2], v26, v24[3]))
                      goto LABEL_121;
                  }
                  else
                  {
                    if (!*((_BYTE *)v24 + 39))
                      goto LABEL_121;
                    v30 = 0;
                    while (*((unsigned __int8 *)v24 + v30 + 16) == *((unsigned __int8 *)v26 + v30))
                    {
                      if (v28 == ++v30)
                        goto LABEL_121;
                    }
                  }
                }
              }
              else
              {
                if (v27 >= v21)
                  v27 %= v21;
                if (v27 != v1)
                  break;
              }
              v24 = (_QWORD *)*v24;
            }
            while (v24);
          }
        }
      }
LABEL_80:
      v35 = operator new(0x50uLL);
      v24 = v35;
      *v35 = 0;
      v35[1] = v20;
      if (SHIBYTE(v90) < 0)
      {
        sub_19C2B5238((_BYTE *)v35 + 16, __dst[0], (unint64_t)__dst[1]);
      }
      else
      {
        *((_OWORD *)v35 + 1) = *(_OWORD *)__dst;
        v35[4] = v90;
      }
      *(_OWORD *)(v24 + 5) = 0u;
      *(_OWORD *)(v24 + 7) = 0u;
      *((_DWORD *)v24 + 18) = 1065353216;
      v36 = (float)(unint64_t)(*(_QWORD *)(v11 + 24) + 1);
      v37 = *(float *)(v11 + 32);
      if (!v21 || (float)(v37 * (float)v21) < v36)
      {
        v38 = (v21 & (v21 - 1)) != 0;
        if (v21 < 3)
          v38 = 1;
        v39 = v38 | (2 * v21);
        v40 = vcvtps_u32_f32(v36 / v37);
        if (v39 <= v40)
          prime = v40;
        else
          prime = v39;
        if (prime == 1)
        {
          prime = 2;
        }
        else if ((prime & (prime - 1)) != 0)
        {
          prime = std::__next_prime(prime);
        }
        v42 = *(int8x8_t *)(v11 + 8);
        if (prime > *(_QWORD *)&v42)
          goto LABEL_95;
        if (prime < *(_QWORD *)&v42)
        {
          v43 = vcvtps_u32_f32((float)*(unint64_t *)(v11 + 24) / *(float *)(v11 + 32));
          if (*(_QWORD *)&v42 < 3uLL || (v44 = (uint8x8_t)vcnt_s8(v42), v44.i16[0] = vaddlv_u8(v44), v44.u32[0] > 1uLL))
          {
            v43 = std::__next_prime(v43);
          }
          else
          {
            v45 = 1 << -(char)__clz(v43 - 1);
            if (v43 >= 2)
              v43 = v45;
          }
          if (prime <= v43)
            prime = v43;
          if (prime < *(_QWORD *)&v42)
LABEL_95:
            sub_19C2EC6BC(v11, prime);
        }
        v21 = *(_QWORD *)(v11 + 8);
        if ((v21 & (v21 - 1)) != 0)
        {
          if (v20 >= v21)
            v1 = v20 % v21;
          else
            v1 = v20;
        }
        else
        {
          v1 = (v21 - 1) & v20;
        }
      }
      v46 = *(_QWORD **)(*(_QWORD *)v11 + 8 * v1);
      if (v46)
        break;
      *v24 = *(_QWORD *)(v11 + 16);
      *(_QWORD *)(v11 + 16) = v24;
      *(_QWORD *)(*(_QWORD *)v11 + 8 * v1) = v11 + 16;
      if (*v24)
      {
        v47 = *(_QWORD *)(*v24 + 8);
        if ((v21 & (v21 - 1)) != 0)
        {
          if (v47 >= v21)
            v47 %= v21;
        }
        else
        {
          v47 &= v21 - 1;
        }
        v46 = (_QWORD *)(*(_QWORD *)v11 + 8 * v47);
        goto LABEL_119;
      }
LABEL_120:
      ++*(_QWORD *)(v11 + 24);
LABEL_121:
      v48 = v24 + 5;
      if (v24 + 5 != __p)
      {
        *((_DWORD *)v24 + 18) = v88;
        v49 = v87;
        v50 = v24[6];
        if (!v50)
          goto LABEL_141;
        for (j = 0; j != v50; ++j)
          *(_QWORD *)(*v48 + 8 * j) = 0;
        v52 = (char *)v24[7];
        v24[7] = 0;
        v24[8] = 0;
        if (v52)
        {
          while (v49)
          {
            if (v52 != v49)
            {
              v53 = (void **)(v52 + 16);
              v54 = v49[39];
              if (v52[39] < 0)
              {
                if (v54 >= 0)
                  v56 = v49 + 16;
                else
                  v56 = (void *)*((_QWORD *)v49 + 2);
                if (v54 >= 0)
                  v57 = v49[39];
                else
                  v57 = *((_QWORD *)v49 + 3);
                sub_19C2E54A8(v53, v56, v57);
              }
              else if (v49[39] < 0)
              {
                sub_19C2E53E4(v53, *((void **)v49 + 2), *((_QWORD *)v49 + 3));
              }
              else
              {
                v55 = *((_OWORD *)v49 + 1);
                *((_QWORD *)v52 + 4) = *((_QWORD *)v49 + 4);
                *(_OWORD *)v53 = v55;
              }
              sub_19C3388A4((void ***)v52 + 5, *((void ***)v49 + 5), *((void ***)v49 + 6), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v49 + 6) - *((_QWORD *)v49 + 5)) >> 3));
            }
            v58 = *(char **)v52;
            sub_19C3C6EC8((uint64_t)v48, (uint64_t)v52);
            v49 = *(char **)v49;
            v52 = v58;
            if (!v58)
              goto LABEL_141;
          }
          do
          {
            v66 = *(char **)v52;
            v67 = *((_QWORD *)v52 + 5);
            if (v67)
            {
              v68 = *((_QWORD *)v52 + 6);
              v69 = (void *)*((_QWORD *)v52 + 5);
              if (v68 != v67)
              {
                do
                {
                  if (*(char *)(v68 - 1) < 0)
                    operator delete(*(void **)(v68 - 24));
                  v68 -= 24;
                }
                while (v68 != v67);
                v69 = (void *)*((_QWORD *)v52 + 5);
              }
              *((_QWORD *)v52 + 6) = v67;
              operator delete(v69);
            }
            if (v52[39] < 0)
              operator delete(*((void **)v52 + 2));
            operator delete(v52);
            v52 = v66;
          }
          while (v66);
        }
        else
        {
LABEL_141:
          while (v49)
          {
            v59 = (char *)operator new(0x40uLL);
            v60 = (uint64_t)v59;
            v61 = (uint64_t *)(v59 + 16);
            *(_QWORD *)v59 = 0;
            *((_QWORD *)v59 + 1) = 0;
            if (v49[39] < 0)
            {
              sub_19C2B5238(v59 + 16, *((void **)v49 + 2), *((_QWORD *)v49 + 3));
            }
            else
            {
              v62 = *((_OWORD *)v49 + 1);
              *((_QWORD *)v59 + 4) = *((_QWORD *)v49 + 4);
              *(_OWORD *)v61 = v62;
            }
            *(_QWORD *)(v60 + 40) = 0;
            *(_QWORD *)(v60 + 48) = 0;
            *(_QWORD *)(v60 + 56) = 0;
            sub_19C2B5440((char *)(v60 + 40), *((__int128 **)v49 + 5), *((__int128 **)v49 + 6), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v49 + 6) - *((_QWORD *)v49 + 5)) >> 3));
            v63 = *(char *)(v60 + 39);
            if (v63 >= 0)
              v64 = v61;
            else
              v64 = *(uint64_t **)(v60 + 16);
            if (v63 >= 0)
              v65 = *(unsigned __int8 *)(v60 + 39);
            else
              v65 = *(_QWORD *)(v60 + 24);
            *(_QWORD *)(v60 + 8) = sub_19C2A0F2C((uint64_t)v91, v64, v65);
            sub_19C3C6EC8((uint64_t)v48, v60);
            v49 = *(char **)v49;
          }
        }
      }
      sub_19C31BF28((uint64_t)__p);
      if (SHIBYTE(v85) < 0)
      {
        operator delete(v84[0]);
        if (SHIBYTE(v90) < 0)
LABEL_167:
          operator delete(__dst[0]);
      }
      else if (SHIBYTE(v90) < 0)
      {
        goto LABEL_167;
      }
      v15 = (__int128 *)((char *)v15 + 24);
      if (v15 == v77)
        goto LABEL_171;
    }
    *v24 = *v46;
LABEL_119:
    *v46 = v24;
    goto LABEL_120;
  }
LABEL_171:
  v71 = (void **)v78;
  if (v78)
  {
    v72 = v79;
    v73 = v78;
    if (v79 != v78)
    {
      do
      {
        if (*((char *)v72 - 1) < 0)
          operator delete(*(v72 - 3));
        v72 -= 3;
      }
      while (v72 != v71);
      v73 = v78;
    }
    v79 = v71;
    operator delete(v73);
  }
  v74 = (char *)v81;
  if (v81)
  {
    v75 = v82;
    v76 = v81;
    if (v82 != v81)
    {
      do
      {
        if (*(v75 - 1) < 0)
          operator delete(*((void **)v75 - 3));
        v75 -= 24;
      }
      while (v75 != v74);
      v76 = v81;
    }
    v82 = v74;
    operator delete(v76);
  }
}

void sub_19C326868(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  sub_19C307B68(&a11);
  sub_19C307B68(&a14);
  _Unwind_Resume(a1);
}

char *sub_19C326A20(char **a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  __int128 v16;
  char *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;

  v2 = (a1[1] - *a1) >> 4;
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 60)
    sub_19C2A18E8();
  v5 = a1[2] - *a1;
  if (v5 >> 3 > v3)
    v3 = v5 >> 3;
  v6 = (unint64_t)v5 >= 0x7FFFFFFFFFFFFFF0;
  v7 = 0xFFFFFFFFFFFFFFFLL;
  if (!v6)
    v7 = v3;
  if (v7 >> 60)
    sub_19C2A143C();
  v9 = 16 * v7;
  v10 = (char *)operator new(16 * v7);
  v11 = &v10[16 * v2];
  *(_OWORD *)v11 = *(_OWORD *)a2;
  v12 = v11 + 16;
  v13 = &v10[v9];
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v14 = *a1;
  v15 = a1[1];
  if (v15 == *a1)
  {
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v13;
  }
  else
  {
    do
    {
      v16 = *((_OWORD *)v15 - 1);
      v15 -= 16;
      *((_OWORD *)v11 - 1) = v16;
      v11 -= 16;
      *(_QWORD *)v15 = 0;
      *((_QWORD *)v15 + 1) = 0;
    }
    while (v15 != v14);
    v15 = *a1;
    v17 = a1[1];
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v13;
    while (v17 != v15)
    {
      v18 = (std::__shared_weak_count *)*((_QWORD *)v17 - 1);
      if (v18)
      {
        p_shared_owners = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v17 -= 16;
    }
  }
  if (v15)
    operator delete(v15);
  return v12;
}

char *sub_19C326B48(char **a1, uint64_t a2)
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;

  v3 = *a1;
  v2 = a1[1];
  v4 = v2 - *a1;
  v5 = v4 >> 3;
  v6 = (v4 >> 3) + 1;
  if (v6 >> 61)
    sub_19C2A18E8();
  v9 = a1[2] - v3;
  if (v9 >> 2 > v6)
    v6 = v9 >> 2;
  if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
    v10 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v10 = v6;
  if (v10)
  {
    if (v10 >> 61)
      sub_19C2A143C();
    v11 = (char *)operator new(8 * v10);
  }
  else
  {
    v11 = 0;
  }
  v12 = &v11[8 * v5];
  v13 = &v11[8 * v10];
  *(_QWORD *)v12 = a2;
  v14 = v12 + 8;
  if (v2 == v3)
  {
    *a1 = v12;
    a1[1] = v14;
    a1[2] = v13;
    goto LABEL_25;
  }
  v15 = v2 - v3 - 8;
  if (v15 > 0x77
    && (&v2[-(v15 & 0xFFFFFFFFFFFFFFF8) - 8] >= v12 || &v11[v4 - (v15 & 0xFFFFFFFFFFFFFFF8) - 8] >= v2))
  {
    v16 = (v15 >> 3) + 1;
    v12 -= 8 * (v16 & 0x3FFFFFFFFFFFFFFCLL);
    v17 = v2 - 32;
    v18 = &v11[8 * v5 - 16];
    v19 = v16 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v21 = *(_OWORD *)v17;
      v20 = *((_OWORD *)v17 + 1);
      *(_OWORD *)v17 = 0uLL;
      *((_OWORD *)v17 + 1) = 0uLL;
      v17 -= 32;
      *((_OWORD *)v18 - 1) = v21;
      *(_OWORD *)v18 = v20;
      v18 -= 32;
      v19 -= 4;
    }
    while (v19);
    if (v16 == (v16 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_20;
    v2 -= 8 * (v16 & 0x3FFFFFFFFFFFFFFCLL);
  }
  do
  {
    v22 = *((_QWORD *)v2 - 1);
    v2 -= 8;
    *(_QWORD *)v2 = 0;
    *((_QWORD *)v12 - 1) = v22;
    v12 -= 8;
  }
  while (v2 != v3);
LABEL_20:
  v2 = *a1;
  v23 = a1[1];
  *a1 = v12;
  a1[1] = v14;
  a1[2] = v13;
  while (v23 != v2)
  {
    v25 = *((_QWORD *)v23 - 1);
    v23 -= 8;
    v24 = v25;
    *(_QWORD *)v23 = 0;
    if (v25)
      (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  }
LABEL_25:
  if (v2)
    operator delete(v2);
  return v14;
}

uint64_t sub_19C326CD8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  void *v5;
  void **v6;
  int v7;
  int v8;
  uint64_t v10;
  int v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  int v16;
  int v17;
  uint64_t v19;
  _BYTE *v20;
  _BYTE *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t (**v28)();
  _QWORD *v29;
  _QWORD *v30;
  void **v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  __int128 *v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  void **v45;
  uint64_t v46;
  _QWORD *v47;
  unint64_t v48;
  _QWORD *v49;
  _BYTE *v50;
  _BYTE *v51;
  char *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  _QWORD *v58;
  unint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  char *v69;
  char *v70;
  char *v71;
  char *v72;
  _QWORD *v73;
  _QWORD *v74;
  _QWORD *v75;
  void **v76;
  uint64_t v77;
  _QWORD *v78;
  _QWORD *v80;
  _QWORD *v81;
  _QWORD *v82;
  _QWORD *exception;
  _QWORD *v84;
  _QWORD *v85;
  _QWORD *v86;
  uint64_t v87;
  char v88;
  _QWORD *v89;
  _QWORD *v90;
  void *__dst[2];
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  __int16 v97;
  char v98[8];
  void *v99[2];
  void *v100[2];
  __int128 v101;
  __int128 v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  int v108;
  void *__p[2];
  char v110;
  unint64_t v111;
  int v112;
  uint64_t v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD v121[2];
  _BYTE v122[408];
  _QWORD v123[23];

  v123[20] = *MEMORY[0x1E0C80C00];
  v2 = operator new();
  v3 = *(_QWORD *)(a1 + 32);
  v88 = *(_BYTE *)(a1 + 40);
  v89 = (_QWORD *)operator new();
  *v89 = 0;
  sub_19C34EFE0(v121);
  if ((v122[*(_QWORD *)(v121[0] - 24) + 16] & 5) != 0)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    std::operator+<char>();
    sub_19C31237C(exception, (__int128 *)&v113);
    __cxa_throw(exception, (struct type_info *)&unk_1E3D32968, (void (*)(void *))sub_19C3123E4);
  }
  v101 = 0u;
  v102 = 0u;
  *(_OWORD *)v99 = 0u;
  *(_OWORD *)v100 = 0u;
  v104 = 0;
  v105 = 0;
  v103 = -1;
  if ((sub_19C433648((uint64_t)v98, (uint64_t)v121, v3) & 1) == 0)
  {
    v84 = __cxa_allocate_exception(0x20uLL);
    std::operator+<char>();
    sub_19C31237C(v84, (__int128 *)&v113);
    __cxa_throw(v84, (struct type_info *)&unk_1E3D32968, (void (*)(void *))sub_19C3123E4);
  }
  if (*(char *)(v3 + 23) < 0)
  {
    sub_19C2B5238(__dst, *(void **)v3, *(_QWORD *)(v3 + 8));
  }
  else
  {
    v4 = *(_OWORD *)v3;
    v92 = *(_QWORD *)(v3 + 16);
    *(_OWORD *)__dst = v4;
  }
  v94 = 0;
  v95 = 0;
  v97 = 257;
  v96 = 0;
  v5 = (void *)HIBYTE(v100[0]);
  v93 = v98;
  if (SHIBYTE(v100[0]) < 0)
    v5 = v99[1];
  if (v5 == (void *)6)
  {
    if (SHIBYTE(v100[0]) >= 0)
      v15 = v99;
    else
      v15 = (void **)v99[0];
    v16 = *(_DWORD *)v15;
    v17 = *((unsigned __int16 *)v15 + 2);
    if (v16 != 1952671094 || v17 != 29295)
    {
LABEL_180:
      v82 = __cxa_allocate_exception(0x20uLL);
      std::operator+<char>();
      sub_19C31237C(v82, (__int128 *)&v113);
      __cxa_throw(v82, (struct type_info *)&unk_1E3D32968, (void (*)(void *))sub_19C3123E4);
    }
    v10 = operator new();
    v87 = v2;
    *(_QWORD *)(v10 + 40) = 0;
    *(_QWORD *)(v10 + 48) = 0;
    *(_DWORD *)(v10 + 56) = 1;
    *(_QWORD *)(v10 + 64) = 0;
    v90 = (_QWORD *)(v10 + 64);
    *(_QWORD *)(v10 + 72) = 0;
    *(_QWORD *)(v10 + 80) = 0;
    *(_DWORD *)(v10 + 88) = -1;
    strcpy((char *)(v10 + 16), "vector");
    *(_BYTE *)(v10 + 39) = 6;
    *(_QWORD *)v10 = &off_1E3D37E70;
    *(_QWORD *)(v10 + 8) = 0x156A5A950003;
    v117 = 0u;
    v116 = 0u;
    v115 = 0u;
    v114 = 0u;
    v119 = 0;
    v120 = 0;
    v118 = -1;
    if ((sub_19C376C8C(v10, v121, (uint64_t)__dst, (uint64_t)&v113) & 1) == 0)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
      v10 = 0;
      goto LABEL_139;
    }
    v19 = v119;
    *(_DWORD *)(v10 + 88) = v118;
    if (v19 == -1)
      goto LABEL_90;
    v20 = *(_BYTE **)(v10 + 64);
    if ((int)v19 <= (unint64_t)((uint64_t)(*(_QWORD *)(v10 + 80) - (_QWORD)v20) >> 3))
    {
LABEL_77:
      if (v19 != -1 && v19 < 1)
      {
        LODWORD(v42) = 0;
        goto LABEL_80;
      }
LABEL_90:
      v86 = (_QWORD *)v10;
      v42 = 0;
      while (1)
      {
        v47 = (_QWORD *)std::istream::read();
        if ((*((_BYTE *)v47 + *(_QWORD *)(*v47 - 24) + 32) & 5) != 0)
          break;
        sub_19C372700(v86);
        **(_DWORD **)(*v90 + 8 * v42) = v112;
        v111 = 0;
        std::istream::read();
        if ((v122[*(_QWORD *)(v121[0] - 24) + 16] & 5) != 0)
        {
          v110 = 5;
          strcpy((char *)__p, "ERROR");
          v2 = v87;
          v81 = sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)__p, 5);
          sub_19C2A1B24(v81, (uint64_t)": ", 2);
          v74 = sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)"VectorFst::Read: read failed: ", 30);
          v75 = v86;
          if (v92 >= 0)
            v76 = __dst;
          else
            v76 = (void **)__dst[0];
          if (v92 >= 0)
            v77 = HIBYTE(v92);
          else
            v77 = (uint64_t)__dst[1];
LABEL_135:
          sub_19C2A1B24(v74, (uint64_t)v76, v77);
          sub_19C351928();
          if (v110 < 0)
            operator delete(__p[0]);
          (*(void (**)(_QWORD *))(*v75 + 8))(v75);
LABEL_138:
          v10 = 0;
          goto LABEL_139;
        }
        v48 = v111;
        v49 = *(_QWORD **)(*v90 + 8 * v42);
        v50 = (_BYTE *)v49[3];
        if (v111 > (uint64_t)(v49[5] - (_QWORD)v50) >> 4)
        {
          if (v111 >> 60)
            sub_19C2A18E8();
          v51 = (_BYTE *)v49[4];
          v52 = (char *)operator new(16 * v111);
          v53 = &v52[v51 - v50];
          v54 = v53;
          if (v51 != v50)
          {
            v55 = 0;
            do
            {
              v56 = &v53[v55];
              *((_QWORD *)v56 - 2) = *(_QWORD *)&v51[v55 - 16];
              *((_DWORD *)v56 - 2) = *(_DWORD *)&v51[v55 - 8];
              *((_DWORD *)v56 - 1) = *(_DWORD *)&v51[v55 - 4];
              v55 -= 16;
            }
            while (&v51[v55] != v50);
            v54 = &v53[v55];
          }
          v49[3] = v54;
          v49[4] = v53;
          v49[5] = &v52[16 * v48];
          if (v50)
          {
            operator delete(v50);
            v48 = v111;
            goto LABEL_101;
          }
LABEL_102:
          v57 = 0;
          while (2)
          {
            std::istream::read();
            std::istream::read();
            std::istream::read();
            std::istream::read();
            if ((v122[*(_QWORD *)(v121[0] - 24) + 16] & 5) != 0)
            {
              v110 = 5;
              strcpy((char *)__p, "ERROR");
              v2 = v87;
              v73 = sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)__p, 5);
              sub_19C2A1B24(v73, (uint64_t)": ", 2);
              v74 = sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)"VectorFst::Read: read failed: ", 30);
              v75 = v86;
              if (v92 >= 0)
                v76 = __dst;
              else
                v76 = (void **)__dst[0];
              if (v92 >= 0)
                v77 = HIBYTE(v92);
              else
                v77 = (uint64_t)__dst[1];
              goto LABEL_135;
            }
            v58 = *(_QWORD **)(*v90 + 8 * v42);
            if ((_DWORD)v106)
            {
              if (HIDWORD(v106))
                goto LABEL_108;
LABEL_121:
              ++v58[2];
            }
            else
            {
              ++v58[1];
              if (!HIDWORD(v106))
                goto LABEL_121;
            }
LABEL_108:
            v60 = (char *)v58[4];
            v59 = v58[5];
            if ((unint64_t)v60 < v59)
            {
              *(_QWORD *)v60 = v106;
              *((_DWORD *)v60 + 2) = v107;
              *((_DWORD *)v60 + 3) = v108;
              v58[4] = v60 + 16;
            }
            else
            {
              v61 = (char *)v58[3];
              v62 = (v60 - v61) >> 4;
              v63 = v62 + 1;
              if ((unint64_t)(v62 + 1) >> 60)
                sub_19C2A18E8();
              v64 = v59 - (_QWORD)v61;
              if (v64 >> 3 > v63)
                v63 = v64 >> 3;
              if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFF0)
                v65 = 0xFFFFFFFFFFFFFFFLL;
              else
                v65 = v63;
              if (v65 >> 60)
                sub_19C2A143C();
              v66 = (char *)operator new(16 * v65);
              v67 = &v66[16 * v62];
              *(_QWORD *)v67 = v106;
              *((_DWORD *)v67 + 2) = v107;
              *((_DWORD *)v67 + 3) = v108;
              if (v60 == v61)
              {
                v70 = &v66[16 * v62];
              }
              else
              {
                v68 = 0;
                do
                {
                  v69 = &v67[v68];
                  *((_QWORD *)v69 - 2) = *(_QWORD *)&v60[v68 - 16];
                  *((_DWORD *)v69 - 2) = *(_DWORD *)&v60[v68 - 8];
                  *((_DWORD *)v69 - 1) = *(_DWORD *)&v60[v68 - 4];
                  v68 -= 16;
                }
                while (&v60[v68] != v61);
                v70 = &v67[v68];
              }
              v71 = &v66[16 * v65];
              v72 = v67 + 16;
              v58[3] = v70;
              v58[4] = v67 + 16;
              v58[5] = v71;
              if (v61)
                operator delete(v61);
              v58[4] = v72;
            }
            if (++v57 >= v111)
              goto LABEL_126;
            continue;
          }
        }
LABEL_101:
        if (v48)
          goto LABEL_102;
LABEL_126:
        ++v42;
        v19 = v119;
        v2 = v87;
        if (v119 != -1 && v119 <= v42)
        {
          v10 = (uint64_t)v86;
          goto LABEL_80;
        }
      }
      v19 = v119;
      v10 = (uint64_t)v86;
      if (v119 != -1)
      {
LABEL_80:
        if (v19 != v42)
        {
          v110 = 5;
          strcpy((char *)__p, "ERROR");
          v43 = sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)__p, 5);
          sub_19C2A1B24(v43, (uint64_t)": ", 2);
          v44 = sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)"VectorFst::Read: unexpected end of file: ", 41);
          if (v92 >= 0)
            v45 = __dst;
          else
            v45 = (void **)__dst[0];
          if (v92 >= 0)
            v46 = HIBYTE(v92);
          else
            v46 = (uint64_t)__dst[1];
          sub_19C2A1B24(v44, (uint64_t)v45, v46);
          sub_19C351928();
          if (v110 < 0)
            operator delete(__p[0]);
          (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
          goto LABEL_138;
        }
      }
LABEL_139:
      if (SHIBYTE(v116) < 0)
      {
        operator delete(*((void **)&v115 + 1));
        if ((SBYTE7(v115) & 0x80000000) == 0)
        {
LABEL_141:
          if (v10)
          {
LABEL_142:
            v27 = (_QWORD *)operator new();
            v28 = &off_1E3D38710;
            goto LABEL_143;
          }
LABEL_146:
          v27 = 0;
          goto LABEL_147;
        }
      }
      else if ((SBYTE7(v115) & 0x80000000) == 0)
      {
        goto LABEL_141;
      }
      operator delete((void *)v114);
      if (v10)
        goto LABEL_142;
      goto LABEL_146;
    }
    if ((v19 & 0x80000000) != 0)
      sub_19C2A18E8();
    v21 = *(_BYTE **)(v10 + 72);
    v22 = (char *)operator new(8 * (int)v19);
    v23 = v21 - v20;
    v24 = &v22[(v21 - v20) & 0xFFFFFFFFFFFFFFF8];
    v25 = v24;
    if (v21 != v20)
    {
      if ((unint64_t)(v23 - 8) < 0x58)
      {
        v25 = &v22[(v21 - v20) & 0xFFFFFFFFFFFFFFF8];
        do
        {
LABEL_74:
          v41 = *((_QWORD *)v21 - 1);
          v21 -= 8;
          *((_QWORD *)v25 - 1) = v41;
          v25 -= 8;
        }
        while (v21 != v20);
        goto LABEL_75;
      }
      v25 = &v22[(v21 - v20) & 0xFFFFFFFFFFFFFFF8];
      if (v21 - v22 - (v23 & 0xFFFFFFFFFFFFFFF8) < 0x20)
        goto LABEL_74;
      v35 = v23 >> 3;
      v36 = ((unint64_t)(v23 - 8) >> 3) + 1;
      v37 = &v22[8 * v35 - 16];
      v38 = (__int128 *)(v21 - 16);
      v39 = v36 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v40 = *v38;
        *((_OWORD *)v37 - 1) = *(v38 - 1);
        *(_OWORD *)v37 = v40;
        v37 -= 32;
        v38 -= 2;
        v39 -= 4;
      }
      while (v39);
      v25 = &v24[-8 * (v36 & 0x3FFFFFFFFFFFFFFCLL)];
      v21 -= 8 * (v36 & 0x3FFFFFFFFFFFFFFCLL);
      if (v36 != (v36 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_74;
    }
LABEL_75:
    *(_QWORD *)(v10 + 64) = v25;
    *(_QWORD *)(v10 + 72) = v24;
    *(_QWORD *)(v10 + 80) = &v22[8 * (int)v19];
    if (v20)
    {
      operator delete(v20);
      v19 = v119;
    }
    goto LABEL_77;
  }
  if (v5 != (void *)5)
    goto LABEL_180;
  v6 = SHIBYTE(v100[0]) >= 0 ? v99 : (void **)v99[0];
  v7 = *(_DWORD *)v6;
  v8 = *((unsigned __int8 *)v6 + 4);
  if (v7 != 1936617315 || v8 != 116)
    goto LABEL_180;
  v96 = 1;
  v10 = operator new();
  *(_QWORD *)(v10 + 40) = 0;
  *(_QWORD *)(v10 + 48) = 0;
  *(_DWORD *)(v10 + 56) = 1;
  *(_OWORD *)(v10 + 64) = 0u;
  *(_QWORD *)(v10 + 104) = 0;
  *(_OWORD *)(v10 + 80) = 0u;
  *(_DWORD *)(v10 + 96) = 0;
  *(_DWORD *)(v10 + 112) = -1;
  strcpy((char *)(v10 + 16), "const");
  *(_BYTE *)(v10 + 39) = 5;
  *(_QWORD *)v10 = off_1E3D37D50;
  *(_QWORD *)(v10 + 8) = 0x156A5A950001;
  v117 = 0u;
  v116 = 0u;
  v115 = 0u;
  v114 = 0u;
  v119 = 0;
  v120 = 0;
  v118 = -1;
  if ((sub_19C376C8C(v10, v121, (uint64_t)__dst, (uint64_t)&v113) & 1) == 0)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    v10 = 0;
LABEL_48:
    v26 = v89;
    if ((SHIBYTE(v116) & 0x80000000) == 0)
      goto LABEL_49;
    goto LABEL_167;
  }
  *(_DWORD *)(v10 + 112) = v118;
  v11 = v119;
  *(_DWORD *)(v10 + 96) = v119;
  *(_QWORD *)(v10 + 104) = v120;
  v12 = BYTE4(v117);
  if ((_DWORD)v117 == 1)
  {
    v12 = BYTE4(v117) | 4;
    DWORD1(v117) |= 4u;
  }
  if ((v12 & 4) != 0)
  {
    if (!sub_19C432B5C())
    {
      v110 = 5;
      strcpy((char *)__p, "ERROR");
      v33 = sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)__p, 5);
      sub_19C2A1B24(v33, (uint64_t)": ", 2);
      v26 = v89;
      v30 = sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)"ConstFst::Read: Alignment failed: ", 34);
      if (v92 >= 0)
        v31 = __dst;
      else
        v31 = (void **)__dst[0];
      if (v92 >= 0)
        v32 = HIBYTE(v92);
      else
        v32 = (uint64_t)__dst[1];
      goto LABEL_164;
    }
    v11 = *(_DWORD *)(v10 + 96);
  }
  v13 = sub_19C3519C4((uint64_t)v121, v96 == 1, (uint64_t)__dst, 20 * v11);
  *(_QWORD *)(v10 + 64) = v13;
  if ((v122[*(_QWORD *)(v121[0] - 24) + 16] & 5) != 0 || !v13)
  {
    v110 = 5;
    strcpy((char *)__p, "ERROR");
    v29 = sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)__p, 5);
    sub_19C2A1B24(v29, (uint64_t)": ", 2);
    v26 = v89;
    v30 = sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)"ConstFst::Read: Read failed: ", 29);
    if (v92 >= 0)
      v31 = __dst;
    else
      v31 = (void **)__dst[0];
    if (v92 >= 0)
      v32 = HIBYTE(v92);
    else
      v32 = (uint64_t)__dst[1];
  }
  else
  {
    *(_QWORD *)(v10 + 80) = *(_QWORD *)(v13 + 8);
    if ((BYTE4(v117) & 4) != 0 && !sub_19C432B5C())
    {
      v110 = 5;
      strcpy((char *)__p, "ERROR");
      v80 = sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)__p, 5);
      sub_19C2A1B24(v80, (uint64_t)": ", 2);
      v26 = v89;
      v30 = sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)"ConstFst::Read: Alignment failed: ", 34);
      if (v92 >= 0)
        v31 = __dst;
      else
        v31 = (void **)__dst[0];
      if (v92 >= 0)
        v32 = HIBYTE(v92);
      else
        v32 = (uint64_t)__dst[1];
    }
    else
    {
      v14 = sub_19C3519C4((uint64_t)v121, v96 == 1, (uint64_t)__dst, 16 * *(_QWORD *)(v10 + 104));
      *(_QWORD *)(v10 + 72) = v14;
      if ((v122[*(_QWORD *)(v121[0] - 24) + 16] & 5) == 0 && v14)
      {
        *(_QWORD *)(v10 + 88) = *(_QWORD *)(v14 + 8);
        goto LABEL_48;
      }
      v110 = 5;
      strcpy((char *)__p, "ERROR");
      v26 = v89;
      v34 = sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)__p, 5);
      sub_19C2A1B24(v34, (uint64_t)": ", 2);
      v30 = sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)"ConstFst::Read: Read failed: ", 29);
      if (v92 >= 0)
        v31 = __dst;
      else
        v31 = (void **)__dst[0];
      if (v92 >= 0)
        v32 = HIBYTE(v92);
      else
        v32 = (uint64_t)__dst[1];
    }
  }
LABEL_164:
  sub_19C2A1B24(v30, (uint64_t)v31, v32);
  sub_19C351928();
  if (v110 < 0)
    operator delete(__p[0]);
  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v10 = 0;
  if ((SHIBYTE(v116) & 0x80000000) == 0)
  {
LABEL_49:
    if ((SBYTE7(v115) & 0x80000000) == 0)
      goto LABEL_50;
LABEL_168:
    operator delete((void *)v114);
    if (v10)
      goto LABEL_51;
    goto LABEL_169;
  }
LABEL_167:
  operator delete(*((void **)&v115 + 1));
  if (SBYTE7(v115) < 0)
    goto LABEL_168;
LABEL_50:
  if (v10)
  {
LABEL_51:
    v27 = (_QWORD *)operator new();
    v28 = &off_1E3D38410;
LABEL_143:
    *v27 = v28;
    v27[1] = v10;
LABEL_147:
    v26 = v89;
    goto LABEL_148;
  }
LABEL_169:
  v27 = 0;
LABEL_148:
  v78 = (_QWORD *)*v26;
  *v26 = v27;
  if (v78)
  {
    (*(void (**)(_QWORD *))(*v78 + 8))(v78);
    v27 = (_QWORD *)*v26;
  }
  *((_BYTE *)v26 + 8) = v88;
  if (!v27)
  {
    v85 = __cxa_allocate_exception(0x20uLL);
    sub_19C2A6D48(&v113, "Failed to load FST grammar");
    sub_19C31237C(v85, (__int128 *)&v113);
    __cxa_throw(v85, (struct type_info *)&unk_1E3D32968, (void (*)(void *))sub_19C3123E4);
  }
  if ((SHIBYTE(v92) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v101) & 0x80000000) == 0)
      goto LABEL_153;
LABEL_156:
    operator delete(v100[1]);
    if ((SHIBYTE(v100[0]) & 0x80000000) == 0)
      goto LABEL_154;
LABEL_157:
    operator delete(v99[0]);
    goto LABEL_154;
  }
  operator delete(__dst[0]);
  if (SHIBYTE(v101) < 0)
    goto LABEL_156;
LABEL_153:
  if (SHIBYTE(v100[0]) < 0)
    goto LABEL_157;
LABEL_154:
  v121[0] = *MEMORY[0x1E0DE4F40];
  *(_QWORD *)((char *)v121 + *(_QWORD *)(v121[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 24);
  MEMORY[0x1A1AD3238](v122);
  std::istream::~istream();
  MEMORY[0x1A1AD34CC](v123);
  *(_QWORD *)v2 = v89;
  *(_QWORD *)(v2 + 8) = 850045863;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_QWORD *)(v2 + 64) = 0;
  return v2;
}

void sub_19C327C84(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,__int128 buf)
{
  uint64_t v63;
  void *v64;
  void *v65;
  uint64_t v66;
  uint64_t **v67;
  uint64_t v68;
  const char *v69;
  NSObject *v70;
  uint32_t v71;
  uint64_t v72;
  uint64_t **v73;

  if (!a2)
    _Unwind_Resume(a1);
  sub_19C351928();
  if (a46 < 0)
    operator delete(__p);
  sub_19C370018((uint64_t)&a49);
  if (a22 < 0)
    operator delete(a17);
  sub_19C370018((uint64_t)&a27);
  sub_19C2A7A14(&buf);
  v63 = *a14;
  *a14 = 0;
  if (v63)
    (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
  MEMORY[0x1A1AD355C](a14, 0x1020C405F07FB98);
  MEMORY[0x1A1AD355C](a12, 0x1020C40AF0ADC4FLL);
  v64 = __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    v65 = v64;
    if (qword_1EDB97228 != -1)
      dispatch_once(&qword_1EDB97228, &unk_1E3D3ABD0);
    v66 = qword_1EDB97220;
    if (os_log_type_enabled((os_log_t)qword_1EDB97220, OS_LOG_TYPE_DEFAULT))
    {
      v67 = *(uint64_t ***)(a10 + 32);
      if (*((char *)v67 + 23) < 0)
        v67 = (uint64_t **)*v67;
      v68 = (*(uint64_t (**)(void *))(*(_QWORD *)v65 + 16))(v65);
      LODWORD(buf) = 136315394;
      *(_QWORD *)((char *)&buf + 4) = v67;
      WORD6(buf) = 2080;
      *(_QWORD *)((char *)&buf + 14) = v68;
      v69 = "failed to create the FST Grammar from file=%s [%s]";
      v70 = v66;
      v71 = 22;
LABEL_21:
      _os_log_impl(&dword_19C291000, v70, OS_LOG_TYPE_DEFAULT, v69, (uint8_t *)&buf, v71);
    }
  }
  else
  {
    if (qword_1EDB97228 != -1)
      dispatch_once(&qword_1EDB97228, &unk_1E3D3ABD0);
    v72 = qword_1EDB97220;
    if (os_log_type_enabled((os_log_t)qword_1EDB97220, OS_LOG_TYPE_DEFAULT))
    {
      v73 = *(uint64_t ***)(a10 + 32);
      if (*((char *)v73 + 23) < 0)
        v73 = (uint64_t **)*v73;
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = v73;
      v69 = "failed to create the FST grammar from file=%s [unknown exception]";
      v70 = v72;
      v71 = 12;
      goto LABEL_21;
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x19C327930);
}

__n128 *sub_19C328140(uint64_t a1, __n128 a2)
{
  __n128 *v2;
  __n128 *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  __n128 *v10;
  unint64_t *v11;
  unint64_t v12;
  char *v13;
  __n128 *v14;
  __n128 v15;
  __n128 *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;

  v2 = *(__n128 **)a1;
  v3 = *(__n128 **)(a1 + 8);
  v4 = ((uint64_t)v3 - *(_QWORD *)a1) >> 4;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60)
    sub_19C2A18E8();
  v7 = *(_QWORD *)(a1 + 16) - (_QWORD)v2;
  if (v7 >> 3 > v5)
    v5 = v7 >> 3;
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF0)
    v5 = 0xFFFFFFFFFFFFFFFLL;
  if (v5 >> 60)
    sub_19C2A143C();
  v8 = 16 * v5;
  v9 = (char *)operator new(16 * v5);
  v10 = (__n128 *)&v9[16 * v4];
  *v10 = a2;
  if (a2.n128_u64[1])
  {
    v11 = (unint64_t *)(a2.n128_u64[1] + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
    v2 = *(__n128 **)a1;
    v3 = *(__n128 **)(a1 + 8);
  }
  v13 = &v9[v8];
  v14 = v10 + 1;
  if (v3 == v2)
  {
    *(_QWORD *)a1 = v10;
    *(_QWORD *)(a1 + 8) = v14;
    *(_QWORD *)(a1 + 16) = v13;
  }
  else
  {
    do
    {
      v15 = v3[-1];
      --v3;
      v10[-1] = v15;
      --v10;
      v3->n128_u64[0] = 0;
      v3->n128_u64[1] = 0;
    }
    while (v3 != v2);
    v2 = *(__n128 **)a1;
    v16 = *(__n128 **)(a1 + 8);
    *(_QWORD *)a1 = v10;
    *(_QWORD *)(a1 + 8) = v14;
    *(_QWORD *)(a1 + 16) = v13;
    while (v16 != v2)
    {
      v17 = (std::__shared_weak_count *)v16[-1].n128_u64[1];
      if (v17)
      {
        p_shared_owners = (unint64_t *)&v17->__shared_owners_;
        do
          v19 = __ldaxr(p_shared_owners);
        while (__stlxr(v19 - 1, p_shared_owners));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      --v16;
    }
  }
  if (v2)
    operator delete(v2);
  return v14;
}

unint64_t sub_19C328290(const __CFNumber *a1)
{
  const __CFNumber *v2;
  CFNumberType v3;
  unint64_t v4;
  unint64_t v5;
  const __CFNumber *v6;
  CFNumberType v7;
  const __CFNumber *v8;
  CFNumberType v9;
  const __CFNumber *v10;
  CFNumberType v11;
  const __CFNumber *v12;
  CFNumberType v13;
  const __CFNumber *v14;
  CFNumberType v15;
  int Value;
  char v17;
  BOOL v18;
  unsigned __int8 v19;
  uint64_t v20;
  unint64_t v21;
  BOOL v22;
  double valuePtr;

  switch(CFNumberGetType(a1))
  {
    case kCFNumberSInt8Type:
      LOBYTE(valuePtr) = 0;
      v2 = a1;
      v3 = kCFNumberSInt8Type;
      goto LABEL_10;
    case kCFNumberSInt16Type:
      LOWORD(valuePtr) = 0;
      v6 = a1;
      v7 = kCFNumberSInt16Type;
      goto LABEL_18;
    case kCFNumberSInt32Type:
      LODWORD(valuePtr) = 0;
      v8 = a1;
      v9 = kCFNumberSInt32Type;
      goto LABEL_20;
    case kCFNumberSInt64Type:
      valuePtr = 0.0;
      v10 = a1;
      v11 = kCFNumberSInt64Type;
      goto LABEL_31;
    case kCFNumberFloat32Type:
      LODWORD(valuePtr) = 0;
      v12 = a1;
      v13 = kCFNumberFloat32Type;
      goto LABEL_27;
    case kCFNumberFloat64Type:
      valuePtr = 0.0;
      v14 = a1;
      v15 = kCFNumberFloat64Type;
      goto LABEL_33;
    case kCFNumberCharType:
      LOBYTE(valuePtr) = 0;
      v2 = a1;
      v3 = kCFNumberCharType;
LABEL_10:
      Value = CFNumberGetValue(v2, v3, &valuePtr);
      if (Value)
        v17 = LOBYTE(valuePtr);
      else
        v17 = 0;
      if (Value != 0 && SLOBYTE(valuePtr) < 0)
        v4 = -256;
      else
        v4 = 0;
      LOBYTE(v5) = v17;
      return v5 | v4;
    case kCFNumberShortType:
      LOWORD(valuePtr) = 0;
      v6 = a1;
      v7 = kCFNumberShortType;
LABEL_18:
      v18 = CFNumberGetValue(v6, v7, &valuePtr) == 0;
      v19 = LOBYTE(valuePtr);
      v20 = SLOWORD(valuePtr);
      goto LABEL_21;
    case kCFNumberIntType:
      LODWORD(valuePtr) = 0;
      v8 = a1;
      v9 = kCFNumberIntType;
LABEL_20:
      v18 = CFNumberGetValue(v8, v9, &valuePtr) == 0;
      v19 = LOBYTE(valuePtr);
      v20 = SLODWORD(valuePtr);
LABEL_21:
      v21 = v20 & 0xFFFFFFFFFFFFFF00 | v19;
      if (v18)
        v5 = 0;
      else
        v5 = v21;
      goto LABEL_37;
    case kCFNumberLongType:
      valuePtr = 0.0;
      v10 = a1;
      v11 = kCFNumberLongType;
      goto LABEL_31;
    case kCFNumberLongLongType:
      valuePtr = 0.0;
      v10 = a1;
      v11 = kCFNumberLongLongType;
      goto LABEL_31;
    case kCFNumberFloatType:
      LODWORD(valuePtr) = 0;
      v12 = a1;
      v13 = kCFNumberFloatType;
LABEL_27:
      v22 = CFNumberGetValue(v12, v13, &valuePtr) == 0;
      v5 = (unint64_t)*(float *)&valuePtr;
      goto LABEL_34;
    case kCFNumberDoubleType:
      valuePtr = 0.0;
      v14 = a1;
      v15 = kCFNumberDoubleType;
      goto LABEL_33;
    case kCFNumberCFIndexType:
      valuePtr = 0.0;
      v10 = a1;
      v11 = kCFNumberCFIndexType;
      goto LABEL_31;
    case kCFNumberNSIntegerType:
      valuePtr = 0.0;
      v10 = a1;
      v11 = kCFNumberNSIntegerType;
LABEL_31:
      v22 = CFNumberGetValue(v10, v11, &valuePtr) == 0;
      v5 = *(_QWORD *)&valuePtr;
      goto LABEL_34;
    case kCFNumberCGFloatType:
      valuePtr = 0.0;
      v14 = a1;
      v15 = kCFNumberCGFloatType;
LABEL_33:
      v22 = CFNumberGetValue(v14, v15, &valuePtr) == 0;
      v5 = (unint64_t)valuePtr;
LABEL_34:
      if (v22)
        v5 = 0;
LABEL_37:
      v4 = v5 & 0xFFFFFFFFFFFFFF00;
      break;
    default:
      v4 = 0;
      LOBYTE(v5) = 0;
      break;
  }
  return v5 | v4;
}

void sub_19C3284D4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  int64_t v6;
  uint64_t v7;
  void *__p[2];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a1 + 48))
    __assert_rtn("loadDynamicData", "LMCompositeLanguageModel.cpp", 775, "!m_dynamicData");
  v2 = *(_QWORD *)(a1 + 232);
  if (!*(_QWORD *)(v2 + 184))
    sub_19C349234((int)&v7, *(_QWORD *)(a1 + 416));
  v3 = *(_QWORD *)(a1 + 264);
  if (v3)
  {
    std::mutex::lock(*(std::mutex **)(a1 + 232));
    v5 = *(char **)(v2 + 64);
    v4 = *(char **)(v2 + 72);
    if (v5 != v4)
    {
      do
      {
        if (*(_QWORD *)v5 == v3 + 120)
          goto LABEL_9;
        v5 += 8;
      }
      while (v5 != v4);
      v5 = *(char **)(v2 + 72);
    }
LABEL_9:
    if (v5 != v4)
    {
      v6 = v4 - (v5 + 8);
      if (v4 != v5 + 8)
        memmove(v5, v5 + 8, v4 - (v5 + 8));
      *(_QWORD *)(v2 + 72) = &v5[v6];
    }
    std::mutex::unlock((std::mutex *)v2);
  }
  sub_19C349428((uint64_t)__p, *(_QWORD *)(a1 + 416));
}

void sub_19C32A584(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_19C2CDAC8(a1);
  _Unwind_Resume(a1);
}

uint64_t sub_19C32AD8C(uint64_t a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;

  std::mutex::~mutex((std::mutex *)(a1 + 64));
  v2 = *(const void **)(a1 + 56);
  if (v2)
    CFRelease(v2);
  *(_QWORD *)(a1 + 56) = 0;
  v3 = *(const void **)(a1 + 48);
  if (v3)
    CFRelease(v3);
  *(_QWORD *)(a1 + 48) = 0;
  if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
    v4 = *(const void **)(a1 + 16);
    if (!v4)
      goto LABEL_10;
    goto LABEL_9;
  }
  v4 = *(const void **)(a1 + 16);
  if (v4)
LABEL_9:
    CFRelease(v4);
LABEL_10:
  *(_QWORD *)(a1 + 16) = 0;
  v5 = *(const void **)(a1 + 8);
  if (v5)
    CFRelease(v5);
  *(_QWORD *)(a1 + 8) = 0;
  return a1;
}

uint64_t *sub_19C32AE20(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = sub_19C32AD8C(v2);
    MEMORY[0x1A1AD355C](v3, 0x1072C40AE5FB29CLL);
  }
  return a1;
}

uint64_t sub_19C32AE64(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  const void *v4;

  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v2)
  {
    v3 = sub_19C32AD8C(v2);
    MEMORY[0x1A1AD355C](v3, 0x1072C40AE5FB29CLL);
  }
  v4 = *(const void **)(a1 + 8);
  if (v4)
    CFRelease(v4);
  *(_QWORD *)(a1 + 8) = 0;
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
  *(_QWORD *)a1 = 0;
  return a1;
}

__n128 sub_19C32AED0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  return result;
}

void sub_19C32AEE0(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_19C32AF38(_QWORD *a1)
{
  unint64_t v1;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  uint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  uint64_t **v13;
  uint64_t *v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  __int128 *v42;
  int v43;
  uint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint8x8_t v49;
  uint64_t **v50;
  uint64_t *v51;
  char v52;
  uint64_t v53;
  uint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  _BYTE *v64;
  __int128 v65;
  float v66;
  _BOOL8 v67;
  unint64_t v68;
  unint64_t v69;
  size_t prime;
  void *v71;
  void *v72;
  uint64_t v73;
  _QWORD **v74;
  size_t v75;
  size_t v76;
  size_t v77;
  _QWORD *i;
  size_t v79;
  uint64_t v80;
  unint64_t v81;
  uint8x8_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  size_t v86;
  _QWORD *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  void *v90;
  _QWORD v91[2];
  char v92;

  v3 = atomic_load((unsigned __int8 *)&qword_1EDB97208);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_1EDB97208))
  {
    xmmword_1EDB97230 = 0u;
    *(_OWORD *)&qword_1EDB97240 = 0u;
    dword_1EDB97250 = 1065353216;
    __cxa_guard_release(&qword_1EDB97208);
  }
  v4 = (uint64_t *)a1[6];
  v5 = *((char *)v4 + 23);
  if (v5 >= 0)
    v6 = (uint64_t *)a1[6];
  else
    v6 = (uint64_t *)*v4;
  if (v5 >= 0)
    v7 = *((unsigned __int8 *)v4 + 23);
  else
    v7 = v4[1];
  v8 = sub_19C2A0F2C((uint64_t)v91, v6, v7);
  v9 = *((_QWORD *)&xmmword_1EDB97230 + 1);
  if (*((_QWORD *)&xmmword_1EDB97230 + 1))
  {
    v10 = v8;
    v11 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_1EDB97230 + 8));
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v12 = v8;
      if (v8 >= *((_QWORD *)&xmmword_1EDB97230 + 1))
        v12 = v8 % *((_QWORD *)&xmmword_1EDB97230 + 1);
    }
    else
    {
      v12 = (*((_QWORD *)&xmmword_1EDB97230 + 1) - 1) & v8;
    }
    v13 = *(uint64_t ***)(xmmword_1EDB97230 + 8 * v12);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        v15 = *((_BYTE *)v4 + 23);
        if (v15 >= 0)
          v1 = *((unsigned __int8 *)v4 + 23);
        else
          v1 = v4[1];
        if (v15 < 0)
          v4 = (uint64_t *)*v4;
        if (v11.u32[0] < 2uLL)
        {
          v16 = *((_QWORD *)&xmmword_1EDB97230 + 1) - 1;
          while (1)
          {
            v21 = v14[1];
            if (v21 == v10)
            {
              v22 = *((unsigned __int8 *)v14 + 39);
              if ((v22 & 0x80u) == 0)
                v23 = *((unsigned __int8 *)v14 + 39);
              else
                v23 = v14[3];
              if (v23 == v1)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v14[2], v4, v14[3]))
                    goto LABEL_55;
                }
                else
                {
                  if (!*((_BYTE *)v14 + 39))
                    goto LABEL_55;
                  v24 = 0;
                  while (*((unsigned __int8 *)v14 + v24 + 16) == *((unsigned __int8 *)v4 + v24))
                  {
                    if (v22 == ++v24)
                      goto LABEL_54;
                  }
                }
              }
            }
            else if ((v21 & v16) != v12)
            {
              goto LABEL_64;
            }
            v14 = (uint64_t *)*v14;
            if (!v14)
              goto LABEL_64;
          }
        }
        do
        {
          v17 = v14[1];
          if (v17 == v10)
          {
            v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0)
              v19 = *((unsigned __int8 *)v14 + 39);
            else
              v19 = v14[3];
            if (v19 == v1)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v14[2], v4, v14[3]))
                {
LABEL_55:
                  v25 = (std::__shared_weak_count *)v14[6];
                  if (v25 && (v25 = std::__shared_weak_count::lock(v25)) != 0)
                    v26 = v14[5];
                  else
                    v26 = 0;
                  v27 = *(_QWORD *)(a1[5] + 8);
                  v28 = *(std::__shared_weak_count **)(v27 + 48);
                  *(_QWORD *)(v27 + 40) = v26;
                  *(_QWORD *)(v27 + 48) = v25;
                  if (v28)
                  {
                    p_shared_owners = (unint64_t *)&v28->__shared_owners_;
                    do
                      v30 = __ldaxr(p_shared_owners);
                    while (__stlxr(v30 - 1, p_shared_owners));
                    if (!v30)
                    {
                      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
                      std::__shared_weak_count::__release_weak(v28);
                    }
                  }
                  break;
                }
              }
              else
              {
                if (!*((_BYTE *)v14 + 39))
                  goto LABEL_55;
                v20 = 0;
                while (*((unsigned __int8 *)v14 + v20 + 16) == *((unsigned __int8 *)v4 + v20))
                {
                  if (v18 == ++v20)
                  {
LABEL_54:
                    if (!v14)
                      goto LABEL_64;
                    goto LABEL_55;
                  }
                }
              }
            }
          }
          else
          {
            if (v17 >= v9)
              v17 %= v9;
            if (v17 != v12)
              break;
          }
          v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_64:
  v31 = *(_QWORD *)(a1[5] + 8);
  if (!*(_QWORD *)(v31 + 40))
  {
    v32 = (*(uint64_t (**)(void))(a1[4] + 16))();
    v33 = (_QWORD *)operator new();
    *v33 = &off_1E3D39BE0;
    v33[1] = 0;
    v33[2] = 0;
    v33[3] = v32;
    v34 = *(std::__shared_weak_count **)(v31 + 48);
    *(_QWORD *)(v31 + 40) = v32;
    *(_QWORD *)(v31 + 48) = v33;
    if (v34)
    {
      v35 = (unint64_t *)&v34->__shared_owners_;
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    v37 = *(_QWORD *)(a1[5] + 8);
    v38 = *(_QWORD *)(v37 + 40);
    if (v38)
    {
      v39 = *(_QWORD *)(v37 + 48);
      if (v39)
      {
        v40 = (unint64_t *)(v39 + 16);
        do
          v41 = __ldxr(v40);
        while (__stxr(v41 + 1, v40));
      }
      v42 = (__int128 *)a1[6];
      v43 = *((char *)v42 + 23);
      if (v43 >= 0)
        v44 = (uint64_t *)a1[6];
      else
        v44 = *(uint64_t **)v42;
      if (v43 >= 0)
        v45 = *((unsigned __int8 *)v42 + 23);
      else
        v45 = *((_QWORD *)v42 + 1);
      v46 = sub_19C2A0F2C((uint64_t)v91, v44, v45);
      v47 = v46;
      v48 = *((_QWORD *)&xmmword_1EDB97230 + 1);
      if (*((_QWORD *)&xmmword_1EDB97230 + 1))
      {
        v49 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_1EDB97230 + 8));
        v49.i16[0] = vaddlv_u8(v49);
        if (v49.u32[0] > 1uLL)
        {
          v1 = v46;
          if (v46 >= *((_QWORD *)&xmmword_1EDB97230 + 1))
            v1 = v46 % *((_QWORD *)&xmmword_1EDB97230 + 1);
        }
        else
        {
          v1 = (*((_QWORD *)&xmmword_1EDB97230 + 1) - 1) & v46;
        }
        v50 = *(uint64_t ***)(xmmword_1EDB97230 + 8 * v1);
        if (v50)
        {
          v51 = *v50;
          if (*v50)
          {
            v52 = *((_BYTE *)v42 + 23);
            if (v52 >= 0)
              v53 = *((unsigned __int8 *)v42 + 23);
            else
              v53 = *((_QWORD *)v42 + 1);
            if (v52 >= 0)
              v54 = (uint64_t *)v42;
            else
              v54 = *(uint64_t **)v42;
            if (v49.u32[0] < 2uLL)
            {
              while (1)
              {
                v59 = v51[1];
                if (v59 == v47)
                {
                  v60 = *((unsigned __int8 *)v51 + 39);
                  if ((v60 & 0x80u) == 0)
                    v61 = *((unsigned __int8 *)v51 + 39);
                  else
                    v61 = v51[3];
                  if (v61 == v53)
                  {
                    if ((v60 & 0x80) != 0)
                    {
                      if (!memcmp((const void *)v51[2], v54, v51[3]))
                        goto LABEL_191;
                    }
                    else
                    {
                      if (!*((_BYTE *)v51 + 39))
                        goto LABEL_191;
                      v62 = 0;
                      while (*((unsigned __int8 *)v51 + v62 + 16) == *((unsigned __int8 *)v54 + v62))
                      {
                        if (v60 == ++v62)
                          goto LABEL_191;
                      }
                    }
                  }
                }
                else if ((v59 & (v48 - 1)) != v1)
                {
                  goto LABEL_129;
                }
                v51 = (uint64_t *)*v51;
                if (!v51)
                  goto LABEL_129;
              }
            }
            do
            {
              v55 = v51[1];
              if (v55 == v47)
              {
                v56 = *((unsigned __int8 *)v51 + 39);
                if ((v56 & 0x80u) == 0)
                  v57 = *((unsigned __int8 *)v51 + 39);
                else
                  v57 = v51[3];
                if (v57 == v53)
                {
                  if ((v56 & 0x80) != 0)
                  {
                    if (!memcmp((const void *)v51[2], v54, v51[3]))
                      goto LABEL_191;
                  }
                  else
                  {
                    if (!*((_BYTE *)v51 + 39))
                      goto LABEL_191;
                    v58 = 0;
                    while (*((unsigned __int8 *)v51 + v58 + 16) == *((unsigned __int8 *)v54 + v58))
                    {
                      if (v56 == ++v58)
                        goto LABEL_191;
                    }
                  }
                }
              }
              else
              {
                if (v55 >= v48)
                  v55 %= v48;
                if (v55 != v1)
                  break;
              }
              v51 = (uint64_t *)*v51;
            }
            while (v51);
          }
        }
      }
LABEL_129:
      v63 = operator new(0x38uLL);
      v91[0] = v63;
      v91[1] = &qword_1EDB97240;
      v92 = 0;
      *v63 = 0;
      v63[1] = v47;
      v64 = v63 + 2;
      if (*((char *)v42 + 23) < 0)
      {
        sub_19C2B5238(v64, *(void **)v42, *((_QWORD *)v42 + 1));
      }
      else
      {
        v65 = *v42;
        v63[4] = *((_QWORD *)v42 + 2);
        *(_OWORD *)v64 = v65;
      }
      v63[5] = 0;
      v63[6] = 0;
      v92 = 1;
      v66 = (float)(unint64_t)(qword_1EDB97248 + 1);
      if (v48 && (float)(*(float *)&dword_1EDB97250 * (float)v48) >= v66)
        goto LABEL_182;
      v67 = 1;
      if (v48 >= 3)
        v67 = (v48 & (v48 - 1)) != 0;
      v68 = v67 | (2 * v48);
      v69 = vcvtps_u32_f32(v66 / *(float *)&dword_1EDB97250);
      if (v68 <= v69)
        prime = v69;
      else
        prime = v68;
      if (prime == 1)
      {
        prime = 2;
      }
      else if ((prime & (prime - 1)) != 0)
      {
        prime = std::__next_prime(prime);
      }
      v48 = *((_QWORD *)&xmmword_1EDB97230 + 1);
      if (prime <= *((_QWORD *)&xmmword_1EDB97230 + 1))
      {
        if (prime >= *((_QWORD *)&xmmword_1EDB97230 + 1))
          goto LABEL_169;
        v81 = vcvtps_u32_f32((float)(unint64_t)qword_1EDB97248 / *(float *)&dword_1EDB97250);
        if (*((_QWORD *)&xmmword_1EDB97230 + 1) < 3uLL
          || (v82 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_1EDB97230 + 8)),
              v82.i16[0] = vaddlv_u8(v82),
              v82.u32[0] > 1uLL))
        {
          v81 = std::__next_prime(v81);
        }
        else
        {
          v83 = 1 << -(char)__clz(v81 - 1);
          if (v81 >= 2)
            v81 = v83;
        }
        if (prime <= v81)
          prime = v81;
        if (prime >= v48)
        {
          v48 = *((_QWORD *)&xmmword_1EDB97230 + 1);
LABEL_169:
          if ((v48 & (v48 - 1)) != 0)
          {
            if (v47 >= v48)
              v1 = v47 % v48;
            else
              v1 = v47;
          }
          else
          {
            v1 = (v48 - 1) & v47;
          }
LABEL_182:
          v87 = *(_QWORD **)(xmmword_1EDB97230 + 8 * v1);
          if (v87)
          {
            *(_QWORD *)v91[0] = *v87;
            *v87 = v91[0];
          }
          else
          {
            *(_QWORD *)v91[0] = qword_1EDB97240;
            qword_1EDB97240 = v91[0];
            *(_QWORD *)(xmmword_1EDB97230 + 8 * v1) = &qword_1EDB97240;
            if (*(_QWORD *)v91[0])
            {
              v88 = *(_QWORD *)(*(_QWORD *)v91[0] + 8);
              if ((v48 & (v48 - 1)) != 0)
              {
                if (v88 >= v48)
                  v88 %= v48;
              }
              else
              {
                v88 &= v48 - 1;
              }
              *(_QWORD *)(xmmword_1EDB97230 + 8 * v88) = v91[0];
            }
          }
          v51 = (uint64_t *)v91[0];
          ++qword_1EDB97248;
LABEL_191:
          v89 = (std::__shared_weak_count *)v51[6];
          v51[5] = v38;
          v51[6] = v39;
          if (v89)
            std::__shared_weak_count::__release_weak(v89);
          return;
        }
        if (!prime)
        {
          v90 = (void *)xmmword_1EDB97230;
          *(_QWORD *)&xmmword_1EDB97230 = 0;
          if (v90)
            operator delete(v90);
          v48 = 0;
          *((_QWORD *)&xmmword_1EDB97230 + 1) = 0;
          goto LABEL_169;
        }
      }
      if (prime >> 61)
        sub_19C2A143C();
      v71 = operator new(8 * prime);
      v72 = (void *)xmmword_1EDB97230;
      *(_QWORD *)&xmmword_1EDB97230 = v71;
      if (v72)
        operator delete(v72);
      v73 = 0;
      *((_QWORD *)&xmmword_1EDB97230 + 1) = prime;
      do
        *(_QWORD *)(xmmword_1EDB97230 + 8 * v73++) = 0;
      while (prime != v73);
      v74 = (_QWORD **)qword_1EDB97240;
      if (!qword_1EDB97240)
      {
LABEL_168:
        v48 = prime;
        goto LABEL_169;
      }
      v75 = *(_QWORD *)(qword_1EDB97240 + 8);
      v76 = prime - 1;
      if ((prime & (prime - 1)) == 0)
      {
        v77 = v75 & v76;
        *(_QWORD *)(xmmword_1EDB97230 + 8 * v77) = &qword_1EDB97240;
        for (i = *v74; *v74; i = *v74)
        {
          v79 = i[1] & v76;
          if (v79 == v77)
          {
            v74 = (_QWORD **)i;
          }
          else if (*(_QWORD *)(xmmword_1EDB97230 + 8 * v79))
          {
            *v74 = (_QWORD *)*i;
            v80 = 8 * v79;
            *i = **(_QWORD **)(xmmword_1EDB97230 + v80);
            **(_QWORD **)(xmmword_1EDB97230 + v80) = i;
          }
          else
          {
            *(_QWORD *)(xmmword_1EDB97230 + 8 * v79) = v74;
            v74 = (_QWORD **)i;
            v77 = v79;
          }
        }
        goto LABEL_168;
      }
      if (v75 >= prime)
        v75 %= prime;
      *(_QWORD *)(xmmword_1EDB97230 + 8 * v75) = &qword_1EDB97240;
      v84 = *v74;
      if (!*v74)
        goto LABEL_168;
      while (1)
      {
        v86 = v84[1];
        if (v86 >= prime)
          v86 %= prime;
        if (v86 != v75)
        {
          if (!*(_QWORD *)(xmmword_1EDB97230 + 8 * v86))
          {
            *(_QWORD *)(xmmword_1EDB97230 + 8 * v86) = v74;
            goto LABEL_173;
          }
          *v74 = (_QWORD *)*v84;
          v85 = 8 * v86;
          *v84 = **(_QWORD **)(xmmword_1EDB97230 + v85);
          **(_QWORD **)(xmmword_1EDB97230 + v85) = v84;
          v84 = v74;
        }
        v86 = v75;
LABEL_173:
        v74 = (_QWORD **)v84;
        v84 = (_QWORD *)*v84;
        v75 = v86;
        if (!v84)
          goto LABEL_168;
      }
    }
  }
}

void sub_19C32B830(_Unwind_Exception *a1, uint64_t a2, ...)
{
  std::__shared_weak_count *v2;
  va_list va;

  va_start(va, a2);
  sub_19C32B890((uint64_t *)va);
  if (v2)
  {
    std::__shared_weak_count::__release_weak(v2);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_19C32B890(uint64_t *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      v3 = *(std::__shared_weak_count **)(v2 + 48);
      if (v3)
        std::__shared_weak_count::__release_weak(v3);
      if (*(char *)(v2 + 39) < 0)
        operator delete(*(void **)(v2 + 16));
    }
    operator delete((void *)v2);
  }
  return a1;
}

void sub_19C32B8EC(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C32B910(uint64_t result)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    std::mutex::~mutex((std::mutex *)(v1 + 8));
    v2 = *(uint64_t **)v1;
    *(_QWORD *)v1 = 0;
    if (v2)
    {
      v3 = *v2;
      *v2 = 0;
      if (v3)
        (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
      MEMORY[0x1A1AD355C](v2, 0x1020C405F07FB98);
    }
    JUMPOUT(0x1A1AD355CLL);
  }
  return result;
}

uint64_t sub_19C32B994(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN2LM10FSTGrammarEE27__shared_ptr_default_deleteIS2_S2_EE"
    || ((v3 & (unint64_t)"NSt3__110shared_ptrIN2LM10FSTGrammarEE27__shared_ptr_default_deleteIS2_S2_EE" & 0x8000000000000000) != 0) != __OFSUB__(v3, "NSt3__110shared_ptrIN2LM10FSTGrammarEE27__shared_ptr_default_deleteIS2_S2_EE")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN2LM10FSTGrammarEE27__shared_ptr_default_deleteIS2_S2_EE" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_19C32B9EC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D39710;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_19C32B9FC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D39710;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C32BA2C(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_19C32BA3C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D396A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_19C32BA4C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D396A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C32BA7C(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_19C32BA8C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D39940;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_19C32BA9C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D39940;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C32BACC(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_19C32BADC(_QWORD *a1, uint64_t a2)
{
  const void *v3;
  const void *v4;
  const __CFString *v5;
  CFTypeID TypeID;
  void *exception;
  CFTypeRef cf;

  v3 = (const void *)MEMORY[0x1A1AD2A04](a2);
  if (!v3)
  {
    cf = 0;
    goto LABEL_8;
  }
  v4 = v3;
  CFRetain(v3);
  sub_19C297DB4(&cf, v4);
  v5 = (const __CFString *)cf;
  if (!cf)
  {
LABEL_8:
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD3154](exception, "Could not construct");
    goto LABEL_10;
  }
  TypeID = CFStringGetTypeID();
  if (TypeID != CFGetTypeID(v5))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD3154](exception, "Could not convert");
LABEL_10:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  sub_19C297E60(a1, v5);
  if (cf)
    CFRelease(cf);
}

void sub_19C32BBB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
  void *v10;

  __cxa_free_exception(v10);
  sub_19C2E5670(&a10);
  _Unwind_Resume(a1);
}

const void **sub_19C32BBE4(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  *a1 = 0;
  return a1;
}

const void **sub_19C32BC18(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

void sub_19C32BC48(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D39B70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_19C32BC58(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D39B70;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AD355CLL);
}

void sub_19C32BC88(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 24);
  if (v1)
    CFRelease(v1);
}

CFDictionaryRef sub_19C32BCAC(uint64_t *a1, unint64_t a2)
{
  size_t v3;
  char *v5;
  const void **v6;
  char *v7;
  char *v8;
  const void **v9;
  uint64_t *v10;
  const void **v11;
  const void **v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  _BYTE *v19;
  char *v20;
  char *v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  _OWORD *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  char *v30;
  const void *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  _BYTE *v36;
  const void **v37;
  unint64_t v38;
  const void **v39;
  uint64_t v40;
  _OWORD *v41;
  const void **v42;
  uint64_t v43;
  __int128 v44;
  const void *v45;
  const void **v46;
  char *v47;
  CFDictionaryRef v48;
  void *exception;
  const void **v52;
  char *v53;
  uint64_t *v54;

  if (a2)
  {
    if (a2 >> 61)
      sub_19C2A18E8();
    v3 = 8 * a2;
    v5 = (char *)operator new(8 * a2);
    v6 = (const void **)operator new(v3);
    v7 = &v5[v3];
    v8 = v5;
    v9 = v6;
    v10 = &a1[2 * a2];
    v11 = &v6[v3 / 8];
    v54 = v10;
    while (1)
    {
      v13 = *a1;
      if (v8 < v7)
      {
        *(_QWORD *)v8 = v13;
        v8 += 8;
        goto LABEL_30;
      }
      v52 = v11;
      v14 = v8 - v5;
      v15 = (v8 - v5) >> 3;
      v16 = v15 + 1;
      if ((unint64_t)(v15 + 1) >> 61)
        sub_19C2A18E8();
      if ((v7 - v5) >> 2 > v16)
        v16 = (v7 - v5) >> 2;
      if ((unint64_t)(v7 - v5) >= 0x7FFFFFFFFFFFFFF8)
        v17 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v17 = v16;
      if (v17)
      {
        if (v17 >> 61)
          sub_19C2A143C();
        v18 = v8;
        v19 = operator new(8 * v17);
        v8 = v18;
      }
      else
      {
        v19 = 0;
      }
      v20 = &v19[8 * v15];
      *(_QWORD *)v20 = v13;
      v21 = v20 + 8;
      if (v8 != v5)
      {
        v22 = v8 - 8 - v5;
        if (v22 >= 0x58)
        {
          if ((unint64_t)(v8 - &v19[v14]) >= 0x20)
          {
            v24 = (v22 >> 3) + 1;
            v23 = &v8[-8 * (v24 & 0x3FFFFFFFFFFFFFFCLL)];
            v25 = &v19[8 * v15 - 16];
            v26 = v8 - 16;
            v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v28 = *(_OWORD *)v26;
              *(v25 - 1) = *((_OWORD *)v26 - 1);
              *v25 = v28;
              v25 -= 2;
              v26 -= 32;
              v27 -= 4;
            }
            while (v27);
            v20 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
            if (v24 == (v24 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_27;
          }
          else
          {
            v23 = v8;
          }
        }
        else
        {
          v23 = v8;
        }
        do
        {
          v29 = *((_QWORD *)v23 - 1);
          v23 -= 8;
          *((_QWORD *)v20 - 1) = v29;
          v20 -= 8;
        }
        while (v23 != v5);
      }
LABEL_27:
      v7 = &v19[8 * v17];
      if (v5)
      {
        v30 = &v19[8 * v17];
        operator delete(v5);
        v7 = v30;
      }
      v5 = v20;
      v8 = v21;
      v11 = v52;
LABEL_30:
      v31 = (const void *)a1[1];
      if (v9 >= v11)
      {
        v32 = v9 - v6;
        v33 = v32 + 1;
        if ((unint64_t)(v32 + 1) >> 61)
          sub_19C2A18E8();
        if (((char *)v11 - (char *)v6) >> 2 > v33)
          v33 = ((char *)v11 - (char *)v6) >> 2;
        if ((unint64_t)((char *)v11 - (char *)v6) >= 0x7FFFFFFFFFFFFFF8)
          v34 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v34 = v33;
        v53 = v7;
        if (v34)
        {
          if (v34 >> 61)
            sub_19C2A143C();
          v35 = v8;
          v36 = operator new(8 * v34);
          v8 = v35;
        }
        else
        {
          v36 = 0;
        }
        v37 = (const void **)&v36[8 * v32];
        *v37 = v31;
        v12 = v37 + 1;
        if (v9 != v6)
        {
          v38 = (char *)(v9 - 1) - (char *)v6;
          if (v38 < 0x58)
          {
            v39 = v9;
            goto LABEL_49;
          }
          if ((unint64_t)((char *)v6 - v36) < 0x20)
          {
            v39 = v9;
            goto LABEL_49;
          }
          v40 = (v38 >> 3) + 1;
          v39 = &v9[-(v40 & 0x3FFFFFFFFFFFFFFCLL)];
          v41 = &v36[8 * v32 - 16];
          v42 = v9 - 2;
          v43 = v40 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v44 = *(_OWORD *)v42;
            *(v41 - 1) = *((_OWORD *)v42 - 1);
            *v41 = v44;
            v41 -= 2;
            v42 -= 4;
            v43 -= 4;
          }
          while (v43);
          v37 -= v40 & 0x3FFFFFFFFFFFFFFCLL;
          if (v40 != (v40 & 0x3FFFFFFFFFFFFFFCLL))
          {
            do
            {
LABEL_49:
              v45 = *--v39;
              *--v37 = v45;
            }
            while (v39 != v6);
          }
        }
        v11 = (const void **)&v36[8 * v34];
        if (v6)
        {
          v46 = v6;
          v47 = v8;
          operator delete(v46);
          v8 = v47;
        }
        v6 = v37;
        v7 = v53;
        goto LABEL_5;
      }
      *v9 = v31;
      v12 = v9 + 1;
LABEL_5:
      a1 += 2;
      v9 = v12;
      if (a1 == v54)
        goto LABEL_54;
    }
  }
  v5 = 0;
  v6 = 0;
LABEL_54:
  v48 = CFDictionaryCreate(0, (const void **)v5, v6, a2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!v48)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD3154](exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  if (v6)
    operator delete(v6);
  if (v5)
    operator delete(v5);
  return v48;
}

void sub_19C32C06C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  __cxa_free_exception(v3);
  if (v2)
  {
    operator delete(v2);
    if (!v1)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if (!v1)
  {
    goto LABEL_3;
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19C32C0C4(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 8);
  if (v2)
    CFRelease(v2);
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
  return a1;
}

uint64_t sub_19C32C104(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 8);
  if (v2)
    CFRelease(v2);
  *(_QWORD *)(a1 + 8) = 0;
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
  *(_QWORD *)a1 = 0;
  return a1;
}

void sub_19C32C14C(void **a1, uint64_t a2, _QWORD *a3, _QWORD *a4, uint64_t a5)
{
  _QWORD *v6;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  _BYTE *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  __int128 v32;
  void *v33;
  void *v34;
  std::__shared_weak_count *v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  _QWORD *v38;
  _OWORD *v39;
  _QWORD *v40;
  __int128 v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;

  if (a5 < 1)
    return;
  v6 = a3;
  v9 = *a1;
  v8 = (unint64_t)a1[1];
  v10 = a2 - (_QWORD)*a1;
  v11 = (unint64_t)*a1 + (v10 & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[2];
  if (a5 > (uint64_t)&v12[-v8] >> 4)
  {
    v13 = a5 + ((uint64_t)(v8 - (_QWORD)v9) >> 4);
    if (v13 >> 60)
      sub_19C2A18E8();
    v14 = v12 - (_BYTE *)v9;
    if (v14 >> 3 > v13)
      v13 = v14 >> 3;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
      v15 = 0xFFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    if (v15)
    {
      if (v15 >> 60)
        sub_19C2A143C();
      v16 = (char *)operator new(16 * v15);
    }
    else
    {
      v16 = 0;
    }
    v24 = &v16[16 * (v10 >> 4)];
    v25 = &v24[16 * a5];
    v26 = v24;
    do
    {
      v27 = v6[1];
      *(_QWORD *)v26 = *v6;
      *((_QWORD *)v26 + 1) = v27;
      if (v27)
      {
        v28 = (unint64_t *)(v27 + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      v26 += 16;
      v6 += 2;
    }
    while (v26 != v25);
    v30 = *a1;
    if (*a1 != (void *)v11)
    {
      v31 = (_QWORD *)v11;
      do
      {
        v32 = *((_OWORD *)v31 - 1);
        v31 -= 2;
        *((_OWORD *)v24 - 1) = v32;
        v24 -= 16;
        *v31 = 0;
        v31[1] = 0;
      }
      while (v31 != v30);
    }
    v33 = a1[1];
    if (v33 != (void *)v11)
    {
      do
      {
        *(_OWORD *)v25 = *(_OWORD *)v11;
        v25 += 16;
        *(_QWORD *)v11 = 0;
        *(_QWORD *)(v11 + 8) = 0;
        v11 += 16;
      }
      while ((void *)v11 != v33);
      v11 = (unint64_t)a1[1];
    }
    v34 = *a1;
    *a1 = v24;
    a1[1] = v25;
    a1[2] = &v16[16 * v15];
    while ((void *)v11 != v34)
    {
      v35 = *(std::__shared_weak_count **)(v11 - 8);
      if (v35)
      {
        p_shared_owners = (unint64_t *)&v35->__shared_owners_;
        do
          v37 = __ldaxr(p_shared_owners);
        while (__stlxr(v37 - 1, p_shared_owners));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
        }
      }
      v11 -= 16;
    }
    if (v34)
      operator delete(v34);
    return;
  }
  v17 = (uint64_t)(v8 - v11) >> 4;
  if (v17 >= a5)
  {
    v18 = &a3[2 * a5];
    v20 = a1[1];
LABEL_46:
    v38 = &v20[-2 * a5];
    v39 = v20;
    if ((unint64_t)v38 < v8)
    {
      v40 = &v20[-2 * a5];
      v39 = v20;
      do
      {
        *v39++ = *(_OWORD *)v40;
        *v40 = 0;
        v40[1] = 0;
        v40 += 2;
      }
      while ((unint64_t)v40 < v8);
    }
    a1[1] = v39;
    if (v20 != (_QWORD *)(v11 + 16 * a5))
    {
      do
      {
        v41 = *((_OWORD *)v38 - 1);
        v38 -= 2;
        *v38 = 0;
        v38[1] = 0;
        v42 = (std::__shared_weak_count *)*(v20 - 1);
        *((_OWORD *)v20 - 1) = v41;
        v20 -= 2;
        if (v42)
        {
          v43 = (unint64_t *)&v42->__shared_owners_;
          do
            v44 = __ldaxr(v43);
          while (__stlxr(v44 - 1, v43));
          if (!v44)
          {
            ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
            std::__shared_weak_count::__release_weak(v42);
          }
        }
      }
      while (v38 != (_QWORD *)v11);
    }
    for (; v6 != v18; v11 += 16)
    {
      v46 = *v6;
      v45 = v6[1];
      if (v45)
      {
        v47 = (unint64_t *)(v45 + 8);
        do
          v48 = __ldxr(v47);
        while (__stxr(v48 + 1, v47));
      }
      v49 = *(std::__shared_weak_count **)(v11 + 8);
      *(_QWORD *)v11 = v46;
      *(_QWORD *)(v11 + 8) = v45;
      if (v49)
      {
        v50 = (unint64_t *)&v49->__shared_owners_;
        do
          v51 = __ldaxr(v50);
        while (__stlxr(v51 - 1, v50));
        if (!v51)
        {
          ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
          std::__shared_weak_count::__release_weak(v49);
        }
      }
      v6 += 2;
    }
    return;
  }
  v18 = &a3[2 * v17];
  if (v18 == a4)
  {
    v20 = a1[1];
  }
  else
  {
    v19 = &a3[2 * v17];
    v20 = a1[1];
    do
    {
      v21 = v19[1];
      *v20 = *v19;
      v20[1] = v21;
      if (v21)
      {
        v22 = (unint64_t *)(v21 + 8);
        do
          v23 = __ldxr(v22);
        while (__stxr(v23 + 1, v22));
      }
      v19 += 2;
      v20 += 2;
    }
    while (v19 != a4);
  }
  a1[1] = v20;
  if ((uint64_t)(v8 - v11) >= 1)
    goto LABEL_46;
}

char *sub_19C32C480(char **a1, uint64_t a2)
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;

  v3 = *a1;
  v2 = a1[1];
  v4 = v2 - *a1;
  v5 = v4 >> 3;
  v6 = (v4 >> 3) + 1;
  if (v6 >> 61)
    sub_19C2A18E8();
  v9 = a1[2] - v3;
  if (v9 >> 2 > v6)
    v6 = v9 >> 2;
  if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
    v10 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v10 = v6;
  if (v10)
  {
    if (v10 >> 61)
      sub_19C2A143C();
    v11 = (char *)operator new(8 * v10);
  }
  else
  {
    v11 = 0;
  }
  v12 = &v11[8 * v5];
  v13 = &v11[8 * v10];
  v14 = a2 + 8;
  if (!a2)
    v14 = 0;
  *(_QWORD *)v12 = v14;
  v15 = v12 + 8;
  if (v2 == v3)
  {
    *a1 = v12;
    a1[1] = v15;
    a1[2] = v13;
    goto LABEL_27;
  }
  v16 = v2 - v3 - 8;
  if (v16 > 0x77
    && (&v2[-(v16 & 0xFFFFFFFFFFFFFFF8) - 8] >= v12 || &v11[v4 - (v16 & 0xFFFFFFFFFFFFFFF8) - 8] >= v2))
  {
    v17 = (v16 >> 3) + 1;
    v12 -= 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    v18 = v2 - 32;
    v19 = &v11[8 * v5 - 16];
    v20 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v22 = *(_OWORD *)v18;
      v21 = *((_OWORD *)v18 + 1);
      *(_OWORD *)v18 = 0uLL;
      *((_OWORD *)v18 + 1) = 0uLL;
      v18 -= 32;
      *((_OWORD *)v19 - 1) = v22;
      *(_OWORD *)v19 = v21;
      v19 -= 32;
      v20 -= 4;
    }
    while (v20);
    if (v17 == (v17 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_22;
    v2 -= 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
  }
  do
  {
    v23 = *((_QWORD *)v2 - 1);
    v2 -= 8;
    *(_QWORD *)v2 = 0;
    *((_QWORD *)v12 - 1) = v23;
    v12 -= 8;
  }
  while (v2 != v3);
LABEL_22:
  v2 = *a1;
  v24 = a1[1];
  *a1 = v12;
  a1[1] = v15;
  a1[2] = v13;
  while (v24 != v2)
  {
    v26 = *((_QWORD *)v24 - 1);
    v24 -= 8;
    v25 = v26;
    *(_QWORD *)v24 = 0;
    if (v26)
      (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  }
LABEL_27:
  if (v2)
    operator delete(v2);
  return v15;
}

void sub_19C32C61C(uint64_t a1, const __CFURL *a2)
{
  _QWORD *v3;
  __int128 __p;

  v3 = operator new(0xE0uLL);
  v3[1] = 0;
  v3[2] = 0;
  *v3 = &off_1E3D39978;
  sub_19C2E15E8(a2, &__p);
}

void sub_19C32D344(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, void **a14, void **a15, uint64_t a16, void **a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,_QWORD *a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
  std::__shared_weak_count *v59;
  int v60;
  void *v61;
  uint64_t v63;
  void *v64;
  void *v65;
  _QWORD *shared_owners;
  _QWORD *v67;
  void *shared_weak_owners;
  uint64_t v69;
  void *v70;
  std::__shared_weak_count_vtbl *v71;
  std::__shared_weak_count_vtbl *v72;
  void *v73;

  if (a39 < 0)
    operator delete(__p);
  if (a33 < 0)
  {
    operator delete(a28);
    if ((v60 & 1) == 0)
    {
LABEL_8:
      a40 = (_QWORD *)*MEMORY[0x1E0DE4F50];
      v63 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
      *(_QWORD **)((char *)&a40 + *(a40 - 3)) = *(_QWORD **)(MEMORY[0x1E0DE4F50] + 64);
      a42 = v63;
      a43 = MEMORY[0x1E0DE4FB8] + 16;
      if (a56 < 0)
        operator delete(a51);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x1A1AD34CC](&a59);
      v64 = *a15;
      if (*a15)
      {
        v59[7].__shared_weak_owners_ = (uint64_t)v64;
        operator delete(v64);
      }
      v65 = *a17;
      if (*a17)
      {
        v59[6].__shared_weak_owners_ = (uint64_t)v65;
        operator delete(v65);
      }
      shared_owners = (_QWORD *)v59[5].__shared_owners_;
      if (shared_owners)
      {
        do
        {
          v67 = (_QWORD *)*shared_owners;
          operator delete(shared_owners);
          shared_owners = v67;
        }
        while (v67);
      }
      shared_weak_owners = (void *)v59[4].__shared_weak_owners_;
      v59[4].__shared_weak_owners_ = 0;
      if (shared_weak_owners)
        operator delete(shared_weak_owners);
      v69 = v59[4].__shared_owners_;
      v59[4].__shared_owners_ = 0;
      if (v69)
      {
        v70 = *(void **)v69;
        if (*(_QWORD *)v69)
        {
          *(_QWORD *)(v69 + 8) = v70;
          operator delete(v70);
        }
        MEMORY[0x1A1AD355C](v69, 0x1080C409A65DFB4);
      }
      v71 = (std::__shared_weak_count_vtbl *)v59[2].__shared_weak_owners_;
      if (v71)
      {
        v59[3].__vftable = v71;
        operator delete(v71);
      }
      v72 = (std::__shared_weak_count_vtbl *)*a14;
      if (*a14)
      {
        v59[2].__vftable = v72;
        operator delete(v72);
      }
      if (*a13)
        munmap(*a13, v59[1].__shared_owners_);
      v59[1].__shared_owners_ = 0;
      std::__shared_weak_count::~__shared_weak_count(v59);
      operator delete(v73);
      _Unwind_Resume(a1);
    }
  }
  else if (!v60)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v61);
  goto LABEL_8;
}

void sub_19C32D5E8(_QWORD *a1, const __CFURL *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v5;
  void *v6;

  v2 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a1[1] - *a1) >> 3);
  v3 = v2 + 1;
  if (v2 + 1 <= 0x666666666666666)
  {
    if (0x999999999999999ALL * ((uint64_t)(a1[2] - *a1) >> 3) > v3)
      v3 = 0x999999999999999ALL * ((uint64_t)(a1[2] - *a1) >> 3);
    if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a1[2] - *a1) >> 3) >= 0x333333333333333)
      v5 = 0x666666666666666;
    else
      v5 = v3;
    if (v5)
    {
      if (v5 > 0x666666666666666)
        sub_19C2A143C();
      v6 = operator new(40 * v5);
    }
    else
    {
      v6 = 0;
    }
    sub_19C40C6A8((uint64_t)v6 + 40 * v2, a2);
  }
  sub_19C2A18E8();
}

void sub_19C32D758(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_19C32D7E0((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_19C32D76C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  if (a3)
  {
    v4 = (unint64_t *)(a3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = (std::__shared_weak_count *)a1[1];
  *a1 = a2;
  a1[1] = a3;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return a1;
}

uint64_t sub_19C32D7E0(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 40;
    sub_19C31BC8C(i - 40);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_19C32D830(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D39978;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_19C32D840(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D39978;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AD355CLL);
}

void *sub_19C32D870(_QWORD *a1)
{
  void *v2;
  void *v3;
  _QWORD *v4;
  _QWORD *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *result;

  v2 = (void *)a1[22];
  if (v2)
  {
    a1[23] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[19];
  if (v3)
  {
    a1[20] = v3;
    operator delete(v3);
  }
  v4 = (_QWORD *)a1[16];
  if (v4)
  {
    do
    {
      v5 = (_QWORD *)*v4;
      operator delete(v4);
      v4 = v5;
    }
    while (v5);
  }
  v6 = (void *)a1[14];
  a1[14] = 0;
  if (v6)
    operator delete(v6);
  v7 = a1[13];
  a1[13] = 0;
  if (v7)
  {
    v8 = *(void **)v7;
    if (*(_QWORD *)v7)
    {
      *(_QWORD *)(v7 + 8) = v8;
      operator delete(v8);
    }
    MEMORY[0x1A1AD355C](v7, 0x1080C409A65DFB4);
  }
  v9 = (void *)a1[8];
  if (v9)
  {
    a1[9] = v9;
    operator delete(v9);
  }
  v10 = (void *)a1[5];
  if (v10)
  {
    a1[6] = v10;
    operator delete(v10);
  }
  result = (void *)a1[3];
  if (result)
    result = (void *)munmap(result, a1[4]);
  a1[4] = 0;
  return result;
}

void sub_19C32D948(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C32D96C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
  {
    sub_19C2F5D3C(result);
    JUMPOUT(0x1A1AD355CLL);
  }
  return result;
}

uint64_t sub_19C32D9A0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN2LM10ParametersEE27__shared_ptr_default_deleteIS2_S2_EE"
    || ((v3 & (unint64_t)"NSt3__110shared_ptrIN2LM10ParametersEE27__shared_ptr_default_deleteIS2_S2_EE" & 0x8000000000000000) != 0) != __OFSUB__(v3, "NSt3__110shared_ptrIN2LM10ParametersEE27__shared_ptr_default_deleteIS2_S2_EE")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN2LM10ParametersEE27__shared_ptr_default_deleteIS2_S2_EE" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_19C32D9F8(_QWORD *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  _QWORD *v10;
  _QWORD *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *p_shared_weak_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;

  v10 = (_QWORD *)operator new();
  v11 = v10;
  v13 = *a2;
  v12 = (std::__shared_weak_count *)a2[1];
  if (v12)
  {
    p_shared_weak_owners = (unint64_t *)&v12->__shared_weak_owners_;
    do
      v15 = __ldxr(p_shared_weak_owners);
    while (__stxr(v15 + 1, p_shared_weak_owners));
  }
  v17 = *a3;
  v16 = (std::__shared_weak_count *)a3[1];
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v19 = __ldxr(p_shared_owners);
    while (__stxr(v19 + 1, p_shared_owners));
  }
  v20 = *a4;
  v21 = *a5;
  *v10 = &off_1E3D36A38;
  v10[1] = 0x3FF0000000000000;
  v22 = operator new();
  *(_QWORD *)(v22 + 40) = 0;
  *(_QWORD *)v22 = &off_1E3D35738;
  *(_OWORD *)(v22 + 8) = 0u;
  *(_OWORD *)(v22 + 24) = 0u;
  *(_DWORD *)(v22 + 40) = 1065353216;
  v11[2] = v22;
  v23 = (_QWORD *)operator new();
  *v23 = &off_1E3D39D68;
  v23[1] = 0;
  v23[2] = 0;
  v23[3] = v22;
  v11[3] = v23;
  v11[4] = v13;
  v11[5] = v12;
  if (v12)
  {
    v24 = (unint64_t *)&v12->__shared_weak_owners_;
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  v11[6] = v17;
  v11[7] = v16;
  if (v16)
  {
    v26 = (unint64_t *)&v16->__shared_owners_;
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
    v11[8] = v20;
    v11[9] = v21;
    *a1 = v11;
    do
      v28 = __ldaxr(v26);
    while (__stlxr(v28 - 1, v26));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    if (v12)
      goto LABEL_18;
  }
  else
  {
    v11[8] = v20;
    v11[9] = v21;
    *a1 = v11;
    if (v12)
LABEL_18:
      std::__shared_weak_count::__release_weak(v12);
  }
}

void sub_19C32DBCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__shared_weak_count *v9;
  uint64_t v10;
  uint64_t v11;

  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  sub_19C2B43C8((uint64_t)&a9);
  if (v9)
    std::__shared_weak_count::__release_weak(v9);
  MEMORY[0x1A1AD355C](v10, 0x10A1C40417A30D1);
  _Unwind_Resume(a1);
}

uint64_t sub_19C32DC1C(_QWORD *a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _OWORD v11[2];
  __n128 v12;
  __int128 v13;
  _QWORD v14[3];
  _QWORD *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v5 = *(_OWORD *)(a3 + 16);
  v11[0] = *(_OWORD *)a3;
  v11[1] = v5;
  v6 = *(_OWORD *)(a3 + 48);
  v12 = *(__n128 *)(a3 + 32);
  v13 = v6;
  v15 = 0;
  v7 = sub_19C32DD08(a1, a2 | ((unint64_t)a2 << 32), (uint64_t *)v11, a4, a5, 1, 1, v14, v12);
  v8 = v15;
  if (v15 == v14)
  {
    v9 = 4;
    v8 = v14;
    goto LABEL_5;
  }
  if (v15)
  {
    v9 = 5;
LABEL_5:
    (*(void (**)(void))(*v8 + 8 * v9))();
  }
  return v7;
}

void sub_19C32DCD0(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = *(_QWORD **)(v2 - 32);
  if (v4 == v1)
  {
    v5 = 4;
    v4 = (_QWORD *)(v2 - 56);
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C32DD08(_QWORD *a1, unint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, int a6, int a7, _QWORD *a8, __n128 a9)
{
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  unsigned int v32;
  int v33;
  int v34;
  _QWORD *v35;
  _QWORD *v36;
  BOOL v37;
  uint64_t v38;
  int v39;
  _BOOL8 v40;
  double v41;
  float *v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  _QWORD *v49;
  float v50;
  float v51;
  float v52;
  double v53;
  _QWORD *v54;
  uint64_t v55;
  float v56;
  unint64_t v57;
  std::mutex *v58;
  unint64_t v59;
  double v60;
  double v61;
  void *v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  double v66;
  int v67;
  _QWORD *v68;
  _QWORD *v69;
  int v70;
  uint64_t v71;
  int v72;
  _QWORD *v73;
  _QWORD *v74;
  __int128 v75;
  __int128 v76;
  double v77;
  double v78;
  uint64_t v79;
  uint64_t v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  uint64_t v86;
  double v87;
  _QWORD *v88;
  _QWORD *v89;
  int v90;
  void **v92;
  uint64_t v93;
  _QWORD *v96;
  int v97;
  unsigned int v98;
  long double __x;
  double v100;
  double v101;
  uint64_t v102;
  void *__p;
  __int16 v104;
  char v105;
  void **p_p;
  uint64_t v107;

  v107 = *MEMORY[0x1E0C80C00];
  v102 = a5;
  v14 = a3[1];
  if (v14)
  {
    v15 = *a3;
    v16 = 4 * v14;
    v17 = *a3 + 4 * v14;
    while (v16)
    {
      v18 = *(_DWORD *)(v15 + v16 - 4);
      v16 -= 4;
      if (v18 == 1)
      {
        v19 = (v17 - (v15 + v16 + 4)) >> 2;
        v14 = v19 + 1;
        v15 = v17 + 4 * ~v19;
        break;
      }
    }
  }
  else
  {
    v15 = 0;
  }
  *a3 = v15;
  a3[1] = v14;
  v20 = a3[3];
  if (v20 >= v14)
    v21 = v14;
  else
    v21 = a3[3];
  a3[2] = a3[2] + 4 * v20 - 4 * v21;
  a3[3] = v21;
  v22 = a3[5];
  if (v22 >= v14)
    v23 = v14;
  else
    v23 = a3[5];
  a3[4] = a3[4] + 4 * v22 - 4 * v23;
  a3[5] = v23;
  v24 = a3[7];
  if (v24 < v14)
    v14 = a3[7];
  a3[6] = a3[6] + 4 * v24 - 4 * v14;
  a3[7] = v14;
  v25 = a8[3];
  if (!v25)
  {
    *(_QWORD *)(a4 + 16) = 0;
    *(_WORD *)(a4 + 24) = 0;
    *(_BYTE *)(a4 + 32) = 1;
    *(_OWORD *)(a4 + 40) = xmmword_19C46DE10;
    *(_DWORD *)(a4 + 56) = 0;
    *(_OWORD *)(a4 + 64) = xmmword_19C46DE10;
    *(_QWORD *)(a4 + 88) = 0;
    *(_QWORD *)(a4 + 96) = 0;
    *(_QWORD *)(a4 + 80) = 0xFFEFFFFFFFFFFFFFLL;
    a9.n128_u64[1] = 0xFFEFFFFFFFFFFFFFLL;
    *(_OWORD *)a4 = xmmword_19C46DE60;
  }
  if (a1[36])
    v26 = a6;
  else
    v26 = 0;
  if (a1[37])
    v27 = a6;
  else
    v27 = 0;
  if (a1[38])
    v28 = a6;
  else
    v28 = 0;
  v29 = a1[29];
  if (*(_BYTE *)(v29 + 192))
  {
    if (*(_BYTE *)(v29 + 419))
      v30 = 0;
    else
      v30 = a6;
    v97 = v30;
    v31 = a1[35];
    if (v31)
    {
LABEL_31:
      v98 = a6 & ~(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v31 + 8) + 24))(*(_QWORD *)(v31 + 8));
      if ((_DWORD)a2 == 1)
        goto LABEL_32;
LABEL_36:
      v96 = a8;
      if ((a2 & 0x80000000) != 0)
        v33 = v27;
      else
        v33 = 0;
      if (v33 == 1)
      {
        __p = 0;
        if (sub_19C3AA490((_QWORD *)a1[37], a2, (uint64_t)a3, a4, (double *)&__p))
          goto LABEL_62;
      }
      v32 = a2 >> 31;
      if ((a2 & 0x80000000) != 0)
        v34 = v28;
      else
        v34 = 0;
      if (v34 == 1)
      {
        v101 = 0.0;
        if (sub_19C3AA490((_QWORD *)a1[38], a2, (uint64_t)a3, a4, &v101))
          goto LABEL_58;
        v36 = (_QWORD *)a1[3];
        v35 = (_QWORD *)a1[4];
        if (v36 != v35)
        {
          v37 = 0;
          do
          {
            if ((*(unsigned int (**)(_QWORD, unint64_t))(*(_QWORD *)*v36 + 80))(*v36, a2))
            {
              (*(void (**)(void **__return_ptr))(*(_QWORD *)*v36 + 56))(&__p);
              v100 = 0.0;
              if (*(_BYTE *)(a1[29] + 192))
              {
                v38 = a1[38];
                if (v38)
                {
                  v39 = (*(uint64_t (**)(_QWORD, void **, double *))(**(_QWORD **)(v38 + 16) + 24))(*(_QWORD *)(v38 + 16), &__p, &v100);
                  if (v39)
                    v37 = sub_19C3AA490((_QWORD *)a1[38], v39, (uint64_t)a3, a4, &v101);
                }
              }
              if (v105 < 0)
                operator delete(__p);
            }
            ++v36;
          }
          while (v36 != v35);
          if (v37)
          {
LABEL_58:
            v41 = v101;
            if (v101 > *(double *)a4)
            {
              *(_QWORD *)(a4 + 8) = 0xFFEFFFFFFFFFFFFFLL;
              *(_QWORD *)(a4 + 16) = 0;
              *(_WORD *)(a4 + 24) = 0;
              v40 = 1;
              *(_BYTE *)(a4 + 32) = 1;
              *(_OWORD *)(a4 + 40) = xmmword_19C46DE10;
              *(_DWORD *)(a4 + 56) = 0;
              *(_OWORD *)(a4 + 64) = xmmword_19C46DE10;
LABEL_63:
              *(double *)a4 = v41;
              *(double *)(a4 + 80) = v41;
              *(_QWORD *)(a4 + 88) = 0x3FF0000000000000;
              *(_QWORD *)(a4 + 96) = 0;
              return v40;
            }
          }
        }
      }
LABEL_60:
      if ((v26 & v32) == 1)
      {
        __p = 0;
        if (sub_19C3AA490((_QWORD *)a1[36], a2, (uint64_t)a3, a4, (double *)&__p))
        {
LABEL_62:
          *(_QWORD *)(a4 + 8) = 0xFFEFFFFFFFFFFFFFLL;
          *(_QWORD *)(a4 + 16) = 0;
          *(_WORD *)(a4 + 24) = 0;
          v40 = 1;
          *(_BYTE *)(a4 + 32) = 1;
          *(_OWORD *)(a4 + 40) = xmmword_19C46DE10;
          *(_DWORD *)(a4 + 56) = 0;
          *(_OWORD *)(a4 + 64) = xmmword_19C46DE10;
          v41 = *(double *)&__p;
          goto LABEL_63;
        }
      }
      v101 = 0.0;
      v42 = (float *)a1[29];
      v43 = v42[84];
      v44 = v42[51];
      v45 = v42[62];
      v46 = (float)(v44 + v43) + v45;
      v47 = 1.0;
      if (v98)
        v47 = 1.0 - v42[81];
      if (v46 > 0.0)
      {
        v48 = 1.0 / v46;
        v42[84] = (float)(v47 * v43) * v48;
        v44 = (float)(v47 * v44) * v48;
        v42[51] = v44;
        v42[62] = (float)(v47 * v45) * v48;
      }
      v49 = v96;
      v50 = v42[85];
      v51 = v42[63];
      v52 = v51 + v50;
      if ((float)(v51 + v50) > 0.0)
      {
        v42[85] = v50 / v52;
        v42[63] = v51 / v52;
      }
      v53 = 0.0;
      if (v97)
      {
        v54 = (_QWORD *)a1[34];
        if (v54)
        {
          v55 = 248;
          if ((unint64_t)a3[3] < 2)
            v55 = 252;
          v56 = *(float *)(v54[3] + v55);
          v57 = v54[7];
          if (v57)
          {
            v58 = (std::mutex *)(v57 + 96);
            std::mutex::lock((std::mutex *)(v57 + 96));
            v57 = *(_QWORD *)(v57 + 40);
            std::mutex::unlock(v58);
          }
          v59 = (*(uint64_t (**)(_QWORD *))(*v54 + 32))(v54);
          if (v57 < v59)
            v56 = (float)((float)((float)v57 / (float)v59) * (float)((float)v57 / (float)v59)) * v56;
          v60 = v56;
          v42 = (float *)a1[29];
          v44 = v42[51];
          v49 = v96;
        }
        else
        {
          v60 = 0.0;
        }
        v61 = v44;
        if (!v98)
        {
LABEL_81:
          if (v25)
          {
            v62 = 0;
            v40 = 1;
          }
          else
          {
            v63 = v49;
            v64 = (_QWORD *)a1[16];
            v65 = (_QWORD *)a1[17];
            if (v64 == v65)
            {
              v62 = 0;
              v67 = 1;
              v66 = 0.0;
            }
            else
            {
              v62 = 0;
              v66 = 0.0;
              v67 = 1;
              do
              {
                __p = 0;
                v104 = 0;
                v67 &= (*(uint64_t (**)(_QWORD, unint64_t, uint64_t, uint64_t, double *, void **, uint64_t))(*(_QWORD *)*v64 + 16))(*v64, a2, *a3, a3[1], &v101, &__p, v102);
                if ((uint64_t)__p > (uint64_t)v62)
                  v62 = __p;
                if (v67 == 1)
                  *(double *)a4 = *(double *)a4 + v101 * *(double *)(*v64 + 8);
                if (a1[20] != a1[19])
                {
                  v100 = 0.0;
                  (*(void (**)(_QWORD, unint64_t, _QWORD, _QWORD, double *, _QWORD, uint64_t))(*(_QWORD *)*v64 + 16))(*v64, a2, 0, 0, &v100, 0, v102);
                  v66 = v100 + v66;
                }
                v64 += 2;
              }
              while (v64 != v65);
            }
            v68 = (_QWORD *)a1[19];
            v69 = (_QWORD *)a1[20];
            while (v68 != v69)
            {
              v70 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t, uint64_t, double *, _QWORD, uint64_t))(*(_QWORD *)*v68 + 16))(*v68, a2, *a3, a3[1], &v101, 0, v102);
              if ((_BYTE)v67)
                v67 = v70;
              else
                v67 = 0;
              if (v67)
                *(double *)a4 = *(double *)a4 + v101 * *(double *)(*v68 + 8);
              ++v68;
            }
            v71 = a1[31];
            if (v71)
            {
              v72 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t, double *, _QWORD, uint64_t))(*(_QWORD *)v71 + 16))(v71, a2, *a3, a3[1], &v101, 0, v102) ^ 1;
              if (!v67)
                LOBYTE(v72) = 1;
              if ((v72 & 1) != 0)
              {
                v67 = 0;
              }
              else
              {
                *(double *)a4 = *(double *)a4 + v101 * *(double *)(a1[31] + 8);
                v67 = 1;
              }
            }
            v49 = v63;
            if (a1[20] != a1[19] && a1[17] != a1[16])
              *(double *)a4 = *(double *)a4 - v66;
            *(_DWORD *)(a4 + 56) = 1;
            v40 = v67 != 0;
          }
          a9.n128_u64[0] = *(_QWORD *)a4;
          if (*(double *)a4 < 0.0)
          {
            *(_QWORD *)(a4 + 40) = a9.n128_u64[0];
            *(_QWORD *)(a4 + 48) = 0x3FF0000000000000;
            *(_QWORD *)(a4 + 8) = a9.n128_u64[0];
          }
          v73 = (_QWORD *)v49[3];
          if (v73)
          {
            if (v73 == v49)
            {
              p_p = &__p;
              (*(void (**)(_QWORD *, void **, __n128))(*v49 + 24))(v49, &__p, a9);
              if (!v97)
                goto LABEL_136;
              goto LABEL_124;
            }
            v74 = (_QWORD *)(*(uint64_t (**)(_QWORD *, __n128))(*v73 + 16))(v73, a9);
          }
          else
          {
            if (!a1[31])
            {
              p_p = 0;
              if (!v97)
                goto LABEL_136;
LABEL_124:
              v77 = *(double *)a4;
              v100 = 0.0;
              v78 = 0.0;
              if (v61 > 0.0)
              {
                v79 = a1[33];
                if (v79)
                {
                  if (sub_19C431F64(v79, HIDWORD(a2), a3[2], a3[3], &v100, (uint64_t)&__p, a7))
                    v78 = v100 * v61;
                }
              }
              __x = 0.0;
              if (v60 > 0.0)
              {
                v80 = a1[34];
                if (v80)
                {
                  if (sub_19C431F64(v80, HIDWORD(a2), a3[2], a3[3], &__x, (uint64_t)&__p, a7))
                  {
                    v78 = __x * v60 + v78;
                    if (__x * v60 > 0.0)
                    {
                      *(long double *)(a4 + 64) = log10(__x);
                      *(double *)(a4 + 72) = v60;
                    }
                  }
                }
              }
              v81 = 1.0 - (v60 + v61 + v53);
              if (v78 > 0.0)
                *(_BYTE *)(a4 + 24) = 1;
              *(double *)(a4 + 40) = v77;
              *(double *)(a4 + 48) = v81;
              *(double *)(a4 + 8) = v77;
              v82 = __exp10(v77);
              *(long double *)a4 = log10(v78 + v82 * v81);
LABEL_136:
              v100 = 0.0;
              if (v98)
              {
                if (a1[35])
                {
                  if (sub_19C32E740(a1, HIDWORD(a2)))
                  {
                    if (sub_19C431F64(a1[35], HIDWORD(a2), a3[2], a3[3], &v100, (uint64_t)&__p, a7))
                    {
                      v83 = v100;
                      v84 = __exp10(*(double *)a4);
                      v85 = v83 * v53;
                      *(long double *)a4 = log10(v84 + v85);
                      if (v85 > 0.0)
                        *(_BYTE *)(a4 + 25) = 1;
                    }
                  }
                }
              }
              v86 = a1[42];
              if (v86
                && ((*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t))(*(_QWORD *)v86 + 16))(v86, a2, *a3, a3[1]) & 1) == 0)
              {
                v87 = (*(double (**)(_QWORD))(*(_QWORD *)a1[42] + 24))(a1[42]);
                *(double *)a4 = *(double *)a4 - v87;
                *(double *)(a4 + 96) = *(double *)(a4 + 96) + v87;
              }
              v89 = (_QWORD *)a1[3];
              v88 = (_QWORD *)a1[4];
              if (v89 != v88)
              {
                while (1)
                {
                  v90 = (*(uint64_t (**)(_QWORD, unint64_t))(*(_QWORD *)*v89 + 80))(*v89, a2);
                  if (v90 && v90 != (_DWORD)a2)
                    break;
                  if (++v89 == v88)
                    goto LABEL_152;
                }
                *(double *)a4 = *(double *)a4 + -3.0;
                *(double *)(a4 + 96) = *(double *)(a4 + 96) + 3.0;
              }
LABEL_152:
              *(_QWORD *)(a4 + 16) = v62;
              v92 = p_p;
              if (p_p == &__p)
              {
                v93 = 4;
                v92 = &__p;
              }
              else
              {
                if (!p_p)
                  return v40;
                v93 = 5;
              }
              (*((void (**)(void))*v92 + v93))();
              return v40;
            }
            v74 = operator new(0x60uLL);
            *v74 = &off_1E3D31030;
            v74[1] = a2;
            v75 = *((_OWORD *)a3 + 1);
            *((_OWORD *)v74 + 1) = *(_OWORD *)a3;
            *((_OWORD *)v74 + 2) = v75;
            v76 = *((_OWORD *)a3 + 3);
            *((_OWORD *)v74 + 3) = *((_OWORD *)a3 + 2);
            *((_OWORD *)v74 + 4) = v76;
            v74[10] = &v102;
            v74[11] = a1;
          }
          p_p = (void **)v74;
          if (!v97)
            goto LABEL_136;
          goto LABEL_124;
        }
      }
      else
      {
        v60 = 0.0;
        v61 = 0.0;
        if (!v98)
          goto LABEL_81;
      }
      v53 = v42[81];
      goto LABEL_81;
    }
  }
  else
  {
    v97 = 0;
    v31 = a1[35];
    if (v31)
      goto LABEL_31;
  }
  v98 = 0;
  if ((_DWORD)a2 != 1)
    goto LABEL_36;
LABEL_32:
  if (a3[1])
  {
    v96 = a8;
    v32 = a2 >> 31;
    goto LABEL_60;
  }
  return 1;
}

void sub_19C32E6CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void **a22)
{
  void **p_p;
  uint64_t v24;

  p_p = a22;
  if (a22 == &__p)
  {
    v24 = 4;
    p_p = &__p;
  }
  else
  {
    if (!a22)
      _Unwind_Resume(exception_object);
    v24 = 5;
  }
  (*((void (**)(void))*p_p + v24))();
  _Unwind_Resume(exception_object);
}

BOOL sub_19C32E740(_QWORD *a1, uint64_t a2)
{
  const UInt8 *p_p;
  CFIndex v3;
  CFStringRef v4;
  int v5;
  void *exception;
  void *__p;
  void **v9;
  uint64_t v10;
  char v11;
  CFStringRef v12;

  if (!a1[11])
    return 0;
  sub_19C319420(a1, a2, (uint64_t)&__p);
  if (v10 >= 0)
    p_p = (const UInt8 *)&__p;
  else
    p_p = (const UInt8 *)__p;
  if (v10 >= 0)
    v3 = HIBYTE(v10);
  else
    v3 = (CFIndex)v9;
  v4 = CFStringCreateWithBytes(0, p_p, v3, 0x8000100u, 0);
  v12 = v4;
  if (!v4)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD3154](exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  if (SHIBYTE(v10) < 0)
    operator delete(__p);
  __p = 0;
  v9 = &__p;
  v10 = 0x2000000000;
  v11 = 0;
  LXLemmatizerEnumerateLemmasforString();
  v5 = *((unsigned __int8 *)v9 + 24);
  _Block_object_dispose(&__p, 8);
  CFRelease(v4);
  return v5 != 0;
}

void sub_19C32E878(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C32E8CC(uint64_t result, uint64_t a2, int a3, _BYTE *a4)
{
  if ((a3 - 1) <= 2)
  {
    *a4 = 1;
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = 1;
  }
  return result;
}

void sub_19C32E8F4()
{
  JUMPOUT(0x1A1AD355CLL);
}

__n128 sub_19C32E908(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x60uLL);
  *(_QWORD *)v2 = &off_1E3D31030;
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
  *((_QWORD *)v2 + 11) = *(_QWORD *)(a1 + 88);
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_19C32E968(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  *(_QWORD *)a2 = &off_1E3D31030;
  v2 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  result = *(__n128 *)(a1 + 40);
  v4 = *(_OWORD *)(a1 + 56);
  v5 = *(_OWORD *)(a1 + 72);
  *(_QWORD *)(a2 + 88) = *(_QWORD *)(a1 + 88);
  *(_OWORD *)(a2 + 72) = v5;
  *(_OWORD *)(a2 + 56) = v4;
  *(__n128 *)(a2 + 40) = result;
  return result;
}

double sub_19C32E9B0(uint64_t a1, _QWORD *a2, __n128 a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  double v15;
  double v16;

  v4 = *(_QWORD **)(*(_QWORD *)(a1 + 88) + 248);
  v5 = v4[3];
  a3.n128_u64[0] = 1.0;
  if (v5)
  {
    v6 = *(_QWORD *)(a1 + 24);
    v7 = v6 - *a2;
    if (v6 != *a2)
    {
      v8 = *(unsigned int *)(a1 + 8);
      if ((v8 - 5) > 0x3B || ((1 << (v8 - 5)) & 0xC00000000040005) == 0)
      {
        v10 = *(_QWORD *)(a1 + 16);
        v11 = **(_QWORD **)(a1 + 80);
        v16 = 0.0;
        v12 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, double *, _QWORD, uint64_t, __n128))(*(_QWORD *)v5 + 16))(v5, v8, 0, 0, &v16, 0, v11, a3);
        a3.n128_u64[0] = 1.0;
        if (v12)
        {
          v15 = 0.0;
          v13 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t, double *, _QWORD, uint64_t, double))(*v4 + 16))(v4, v8, v10, v7, &v15, 0, v11, 1.0);
          a3.n128_u64[0] = 1.0;
          if (v13)
            a3.n128_f64[0] = __exp10(v15 - v16);
        }
      }
    }
  }
  return a3.n128_f64[0];
}

uint64_t sub_19C32EAB4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK2LM22CompositeLanguageModel22conditionalProbabilityENS_11SingleTokenENS_13ContextTokensERNS_18Co"
                     "mpositeScoreInfoEPNS_6LoggerEbbRKNSt3__18functionIFdmEEEE3$_0"
    || ((v3 & (unint64_t)"ZNK2LM22CompositeLanguageModel22conditionalProbabilityENS_11SingleTokenENS_13ContextToke"
                                "nsERNS_18CompositeScoreInfoEPNS_6LoggerEbbRKNSt3__18functionIFdmEEEE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZNK2LM22CompositeLanguageModel22conditionalProbabilityENS_11SingleTokenENS_13ContextTokensERNS_18CompositeScoreInfoEPNS_6LoggerEbbRKNSt3__18functionIFdmEEEE3$_0")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK2LM22CompositeLanguageModel22conditionalProbabilityENS_11SingleTokenENS_13ContextTokensERNS_18CompositeScoreInfoEPNS_6LoggerEbbRKNSt3__18functionIFdmEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *sub_19C32EB08()
{
  return &unk_1E3D30170;
}

unint64_t sub_19C32EB14(_QWORD *a1, const __CFString *a2)
{
  CFTypeID TypeID;

  if (!a2 || (TypeID = CFStringGetTypeID(), TypeID != CFGetTypeID(a2)))
  {
    __cxa_allocate_exception(0x10uLL);
    sub_19C32EC04();
  }
  return sub_19C297E60(a1, a2);
}

void sub_19C32EB70()
{
  void *v0;

  __cxa_throw(v0, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
}

void sub_19C32EB88(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19C32EB9C(uint64_t a1)
{
  void **v2;
  void *v3;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = (void **)*v2;
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

void sub_19C32EC04()
{
  JUMPOUT(0x1A1AD3154);
}

uint64_t sub_19C32EC10(_QWORD *a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  BOOL v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  double v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  const UInt8 *v14;
  CFIndex v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  _QWORD *v19;
  uint64_t v20;
  void *exception;
  CFTypeRef cf;
  int v23;
  double v24;
  _BYTE v25[24];
  _BYTE *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v3 = a1[29];
  if (!*(_BYTE *)(v3 + 361) && !*(_BYTE *)(v3 + 360))
  {
    v7 = a1[23];
    v8 = a1[24];
    if (v7 == v8)
    {
      v4 = 0;
      v5 = 1;
      return v4 | (v5 << 8);
    }
    v10 = *MEMORY[0x1E0D437E8];
    while (1)
    {
      v11 = *(_QWORD *)(*(_QWORD *)v7 + 8);
      if (*(_QWORD *)(*(_QWORD *)v7 + 16) != v11)
        break;
LABEL_7:
      v4 = 0;
      v7 += 16;
      v5 = 1;
      if (v7 == v8)
        return v4 | (v5 << 8);
    }
    v12 = 0;
    while (1)
    {
      v24 = v10;
      v23 = 0;
      v23 = (*(uint64_t (**)(_QWORD, uint64_t, double *))(**(_QWORD **)(v11 + 8 * v12) + 24))(*(_QWORD *)(v11 + 8 * v12), a2, &v24);
      if (v23)
      {
        v4 = v24 > *(double *)(*(_QWORD *)(*(_QWORD *)v7 + 32) + 8 * v12);
        v5 = 1;
        return v4 | (v5 << 8);
      }
      v13 = *(char *)(a2 + 23);
      if (v13 >= 0)
        v14 = (const UInt8 *)a2;
      else
        v14 = *(const UInt8 **)a2;
      if (v13 >= 0)
        v15 = *(unsigned __int8 *)(a2 + 23);
      else
        v15 = *(_QWORD *)(a2 + 8);
      cf = CFStringCreateWithBytes(0, v14, v15, 0x8000100u, 0);
      if (!cf)
      {
        exception = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1A1AD3154](exception, "Could not construct");
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
      }
      v16 = operator new(0x28uLL);
      *v16 = &off_1E3D39348;
      v16[1] = &cf;
      v16[2] = v7;
      v16[3] = &v24;
      v16[4] = &v23;
      v26 = v16;
      v17 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v7 + 8) + 8 * v12);
      (*(void (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v17 + 48))(v17, a2, v25);
      v18 = v23;
      if (v23)
        v2 = v24 > *(double *)(*(_QWORD *)(*(_QWORD *)v7 + 32) + 8 * v12);
      v19 = v26;
      if (v26 == v25)
      {
        v19 = v25;
        v20 = 4;
      }
      else
      {
        if (!v26)
          goto LABEL_25;
        v20 = 5;
      }
      (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_25:
      if (cf)
        CFRelease(cf);
      if (v18)
      {
        v5 = 1;
        v4 = v2;
        return v4 | (v5 << 8);
      }
      ++v12;
      v11 = *(_QWORD *)(*(_QWORD *)v7 + 8);
      if (v12 >= (*(_QWORD *)(*(_QWORD *)v7 + 16) - v11) >> 3)
        goto LABEL_7;
    }
  }
  v4 = 0;
  v5 = 0;
  return v4 | (v5 << 8);
}

void sub_19C32EE80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void sub_19C32EF14()
{
  JUMPOUT(0x1A1AD355CLL);
}

__n128 sub_19C32EF28(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E3D39348;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_19C32EF68(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E3D39348;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

CFComparisonResult sub_19C32EF90(uint64_t a1, const __CFString **a2, int *a3, double *a4)
{
  const __CFString *v5;
  int v6;
  double v7;
  const __CFString *v8;
  CFComparisonResult result;
  BOOL v10;
  double *v11;
  CFRange v12;

  v5 = *a2;
  v6 = *a3;
  v7 = *a4;
  v8 = **(const __CFString ***)(a1 + 8);
  v12.length = CFStringGetLength(v8);
  v12.location = 0;
  result = CFStringCompareWithOptionsAndLocale(v8, v5, v12, 0x81uLL, ***(CFLocaleRef ***)(a1 + 16));
  if (v6)
    v10 = result == kCFCompareEqualTo;
  else
    v10 = 0;
  if (v10)
  {
    v11 = *(double **)(a1 + 24);
    if (*v11 < v7)
    {
      *v11 = v7;
      **(_DWORD **)(a1 + 32) = v6;
    }
  }
  return result;
}

uint64_t sub_19C32F024(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK2LM22CompositeLanguageModel29isCommonWordFromStaticLexiconENSt3__112basic_stringIcNS1_11char_tra"
                     "itsIcEENS1_9allocatorIcEEEEE3$_0"
    || ((v3 & (unint64_t)"ZNK2LM22CompositeLanguageModel29isCommonWordFromStaticLexiconENSt3__112basic_stringIcNS1"
                                "_11char_traitsIcEENS1_9allocatorIcEEEEE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZNK2LM22CompositeLanguageModel29isCommonWordFromStaticLexiconENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEE3$_0")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK2LM22CompositeLanguageModel29isCommonWordFromStaticLexiconENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *sub_19C32F078()
{
  return &unk_1E3D33710;
}

_QWORD *sub_19C32F084(_QWORD *result, uint64_t a2, uint64_t a3, double *a4)
{
  _QWORD *v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  double v10;
  __n128 v11;
  uint64_t v12;
  int v13;
  int64x2_t v15;
  int64x2_t v16;
  uint64_t v17;
  __int16 v18;
  char v19;
  __int128 v20;
  int v21;
  __int128 v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26[8];
  _QWORD v27[3];
  _QWORD *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    v6 = result;
    v7 = 0;
    v8 = 0.0;
    v15 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
    while (1)
    {
      v16 = v15;
      v17 = 0;
      v18 = 0;
      v19 = 1;
      v11 = (__n128)xmmword_19C46DE10;
      v20 = xmmword_19C46DE10;
      v21 = 0;
      v22 = xmmword_19C46DE10;
      v23 = 0xFFEFFFFFFFFFFFFFLL;
      v24 = 0;
      v25 = 0;
      v12 = *(unsigned int *)(a2 + 4 * v7);
      if (qword_1EDB97100 != -1)
        dispatch_once(&qword_1EDB97100, &unk_1E3D3BED0);
      v26[0] = a2;
      v26[1] = v7;
      v26[2] = a2;
      v26[3] = v7;
      v26[4] = a2;
      v26[5] = v7;
      v26[6] = a2;
      v26[7] = v7;
      v28 = 0;
      v13 = sub_19C32DD08(v6, v12 | (v12 << 32), v26, (uint64_t)&v16, qword_1EDB970F8, 1, 1, v27, v11);
      result = v28;
      if (v28 == v27)
      {
        result = v27;
        v9 = 4;
      }
      else
      {
        if (!v28)
          goto LABEL_5;
        v9 = 5;
      }
      result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
LABEL_5:
      v10 = *(double *)v16.i64;
      if (!v13)
        v10 = -0.0;
      v8 = v10 + v8;
      if (a3 == ++v7)
        goto LABEL_14;
    }
  }
  v8 = 0.0;
LABEL_14:
  if (a4)
    *a4 = v8;
  return result;
}

void sub_19C32F238(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = *(_QWORD **)(v1 - 120);
  if (v3 == (_QWORD *)(v1 - 144))
  {
    v4 = 4;
    v3 = (_QWORD *)(v1 - 144);
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_19C32F274(uint64_t a1, uint64_t *a2, __int16 a3, uint64_t a4, unint64_t a5, int a6)
{
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;

  v12 = a2[1];
  if (v12)
  {
    v13 = *a2;
    v14 = 4 * v12;
    v15 = *a2 + 4 * v12;
    while (v14)
    {
      v16 = *(_DWORD *)(v13 + v14 - 4);
      v14 -= 4;
      if (v16 == 1)
      {
        v17 = (v15 - (v13 + v14 + 4)) >> 2;
        v12 = v17 + 1;
        v13 = v15 + 4 * ~v17;
        break;
      }
    }
  }
  else
  {
    v13 = 0;
  }
  *a2 = v13;
  a2[1] = v12;
  v18 = a2[3];
  if (v18 >= v12)
    v19 = v12;
  else
    v19 = a2[3];
  a2[2] = a2[2] + 4 * v18 - 4 * v19;
  a2[3] = v19;
  v20 = a2[5];
  if (v20 >= v12)
    v21 = v12;
  else
    v21 = a2[5];
  a2[4] = a2[4] + 4 * v20 - 4 * v21;
  a2[5] = v21;
  v22 = a2[7];
  if (v22 < v12)
    v12 = a2[7];
  a2[6] = a2[6] + 4 * v22 - 4 * v12;
  a2[7] = v12;
  v23 = (_QWORD *)operator new();
  v25 = *(_QWORD *)(a1 + 8);
  v24 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v24 || (v26 = std::__shared_weak_count::lock(v24)) == 0)
    sub_19C31AF2C();
  v27 = v26;
  sub_19C3D1A44(v23, v25, (uint64_t)v26, a2, a3, a4, a6, a5);
  p_shared_owners = (unint64_t *)&v27->__shared_owners_;
  do
    v29 = __ldaxr(p_shared_owners);
  while (__stlxr(v29 - 1, p_shared_owners));
  if (!v29)
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
  }
  return v23;
}

void sub_19C32F3F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_19C2B43C8((uint64_t)&a9);
  MEMORY[0x1A1AD355C](v9, 0x10B1C40598E04D2);
  _Unwind_Resume(a1);
}

uint64_t sub_19C32F42C(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *i;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  int v17;
  unint64_t *v18;
  unint64_t v19;

  v4 = a1[23];
  v5 = a1[24];
  while (v4 != v5)
  {
    v6 = *(_QWORD **)(*(_QWORD *)v4 + 8);
    for (i = *(_QWORD **)(*(_QWORD *)v4 + 16); v6 != i; ++v6)
    {
      v8 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*v6 + 24))(*v6, a2, 0);
      if ((_DWORD)v8)
        return v8;
    }
    v4 += 16;
  }
  v11 = a1[29];
  if (!*(_BYTE *)(v11 + 192))
    return sub_19C3C1B9C(a2, *(unsigned __int8 *)(v11 + 358));
  v12 = a1[6];
  v13 = *(_QWORD *)(v12 + 560);
  v14 = *(std::__shared_weak_count **)(v12 + 568);
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
  }
  if (!v13
    || (v9 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v13 + 24))(v13, a2, 0), !(_DWORD)v9))
  {
    v9 = 0;
    v17 = 1;
    if (!v14)
      goto LABEL_23;
LABEL_19:
    v18 = (unint64_t *)&v14->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
    goto LABEL_23;
  }
  v17 = 0;
  if (v14)
    goto LABEL_19;
LABEL_23:
  if (!v17 || (_DWORD)v9)
    return v9;
  v11 = a1[29];
  return sub_19C3C1B9C(a2, *(unsigned __int8 *)(v11 + 358));
}

void sub_19C32F590(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_19C2B43C8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_19C32F5A4(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;

  v2 = a1[1] - *a1;
  v3 = v2 >> 3;
  v4 = (v2 >> 3) + 1;
  if (v4 >> 61)
    sub_19C2A18E8();
  v7 = a1[2] - *a1;
  if (v7 >> 2 > v4)
    v4 = v7 >> 2;
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8)
    v8 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v8 = v4;
  if (v8)
  {
    if (v8 >> 61)
      sub_19C2A143C();
    v9 = (char *)operator new(8 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[8 * v3];
  v11 = &v9[8 * v8];
  v12 = *a2;
  *a2 = 0;
  *(_QWORD *)v10 = v12;
  v13 = v10 + 8;
  v14 = (char *)*a1;
  v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v10;
    a1[1] = v13;
    a1[2] = v11;
    goto LABEL_25;
  }
  v16 = (unint64_t)&v15[-*a1 - 8];
  if (v16 > 0x77
    && (&v15[-(v16 & 0xFFFFFFFFFFFFFFF8) - 8] >= v10 || &v9[v2 - (v16 & 0xFFFFFFFFFFFFFFF8) - 8] >= v15))
  {
    v17 = (v16 >> 3) + 1;
    v10 -= 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    v18 = v15 - 32;
    v19 = &v9[8 * v3 - 16];
    v20 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v22 = *(_OWORD *)v18;
      v21 = *((_OWORD *)v18 + 1);
      *(_OWORD *)v18 = 0uLL;
      *((_OWORD *)v18 + 1) = 0uLL;
      v18 -= 32;
      *((_OWORD *)v19 - 1) = v22;
      *(_OWORD *)v19 = v21;
      v19 -= 32;
      v20 -= 4;
    }
    while (v20);
    if (v17 == (v17 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_20;
    v15 -= 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
  }
  do
  {
    v23 = *((_QWORD *)v15 - 1);
    v15 -= 8;
    *(_QWORD *)v15 = 0;
    *((_QWORD *)v10 - 1) = v23;
    v10 -= 8;
  }
  while (v15 != v14);
LABEL_20:
  v15 = (char *)*a1;
  v24 = (char *)a1[1];
  *a1 = v10;
  a1[1] = v13;
  a1[2] = v11;
  while (v24 != v15)
  {
    v26 = *((_QWORD *)v24 - 1);
    v24 -= 8;
    v25 = v26;
    *(_QWORD *)v24 = 0;
    if (v26)
      (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  }
LABEL_25:
  if (v15)
    operator delete(v15);
  return v13;
}

uint64_t sub_19C32F738(uint64_t a1, const __CFString *a2, int *a3)
{
  uint64_t v3;
  uint64_t v7;
  void *__p[3];

  v3 = *(_QWORD *)(a1 + 232);
  if (!*(_BYTE *)(v3 + 192))
    return 0;
  if (*(_BYTE *)(v3 + 356))
    sub_19C3C2C78(__p, *(_QWORD *)(a1 + 184), *(_QWORD *)(a1 + 192));
  else
    memset(__p, 0, sizeof(__p));
  v7 = sub_19C3C1DEC(a2, a3, *(_QWORD *)(a1 + 48), (uint64_t)__p, *(const void **)(a1 + 176), 0);
  if (__p[0])
    operator delete(__p[0]);
  return v7;
}

void sub_19C32F7D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19C32F7E8(_QWORD *a1, const __CFString *a2)
{
  uint64_t v2;
  const __CFLocale ***v5;
  uint64_t v6;
  const __CFLocale **v7;
  const __CFLocale *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const __CFLocale ***v18;
  unsigned int v19;
  float v20;

  v2 = a1[29];
  if (*(_BYTE *)(v2 + 192) && *(_BYTE *)(v2 + 359))
  {
    v5 = (const __CFLocale ***)(a1 + 39);
    if (!a1[39])
    {
      v6 = operator new();
      sub_19C34C81C(v6, *(_QWORD *)(a1[52] + 8), 0, 0);
      v7 = *v5;
      *v5 = (const __CFLocale **)v6;
      if (v7)
      {
        CFRelease(*v7);
        v8 = v7[2];
        if (v8)

        MEMORY[0x1A1AD355C](v7, 0x10E0C40F5622EBCLL);
      }
    }
    v9 = a1 + 40;
    if (!a1[40])
    {
      v10 = operator new();
      sub_19C34C81C(v10, *(_QWORD *)(a1[52] + 8), 1, 0);
      v11 = *v9;
      *v9 = v10;
      if (v11)
      {
        CFRelease(*(CFTypeRef *)v11);
        v12 = *(void **)(v11 + 16);
        if (v12)

        MEMORY[0x1A1AD355C](v11, 0x10E0C40F5622EBCLL);
      }
    }
    v13 = sub_19C318F18(a1, a2, 0);
    v19 = v13;
    v14 = a1[6];
    if (*(_DWORD *)(v14 + 328) <= v13 && *(_DWORD *)(v14 + 332) >= v13)
    {
      v15 = a1[34];
      if (v15)
      {
        v20 = 0.0;
        v16 = *(_QWORD *)(v15 + 24);
        if (*(_BYTE *)(v16 + 401))
          v17 = 2;
        else
          v17 = 1;
        (*(void (**)(_QWORD, unsigned int *, uint64_t, uint64_t, uint64_t, float *, _QWORD))(**(_QWORD **)(v15 + 8) + 104))(*(_QWORD *)(v15 + 8), &v19, 1, v16 + 88, v17, &v20, 0);
        if (v20 == 0.0)
          v18 = v5;
        else
          v18 = (const __CFLocale ***)(a1 + 40);
        sub_19C34C9AC(*v18, a2);
      }
    }
  }
}

void sub_19C32F9AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD355C](v1, 0x10E0C40F5622EBCLL);
  _Unwind_Resume(a1);
}

void sub_19C32F9D8(_QWORD *a1, CFStringRef theString)
{
  uint64_t v2;
  uint64_t v3;
  int v6;
  _QWORD *v7;
  _QWORD *v8;
  const __CFLocale **v9;
  uint64_t v10;
  void *v11;

  v2 = a1[23];
  v3 = a1[24];
  if (v2 != v3)
  {
    v6 = 0;
    do
    {
LABEL_4:
      v7 = *(_QWORD **)(*(_QWORD *)v2 + 8);
      v8 = *(_QWORD **)(*(_QWORD *)v2 + 16);
      if (v7 != v8)
      {
        while (1)
        {
          v6 = (*(uint64_t (**)(_QWORD, CFStringRef, _QWORD))(*(_QWORD *)*v7 + 16))(*v7, theString, 0);
          if (v6)
            break;
          if (++v7 == v8)
          {
            v6 = 0;
            v2 += 16;
            if (v2 != v3)
              goto LABEL_4;
            return;
          }
        }
      }
      v2 += 16;
    }
    while (v2 != v3);
    if (v6 && *(_BYTE *)(a1[29] + 359))
    {
      v9 = (const __CFLocale **)a1[41];
      if (!v9)
      {
        v9 = (const __CFLocale **)operator new();
        sub_19C34C81C((uint64_t)v9, *(_QWORD *)(a1[52] + 8), 2, 0);
        v10 = a1[41];
        a1[41] = v9;
        if (v10)
        {
          CFRelease(*(CFTypeRef *)v10);
          v11 = *(void **)(v10 + 16);
          if (v11)

          MEMORY[0x1A1AD355C](v10, 0x10E0C40F5622EBCLL);
          v9 = (const __CFLocale **)a1[41];
        }
      }
      sub_19C34C9AC(v9, theString);
    }
  }
}

void sub_19C32FB18(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD355C](v1, 0x10E0C40F5622EBCLL);
  _Unwind_Resume(a1);
}

uint64_t sub_19C32FB3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, _QWORD *a8)
{
  uint64_t v8;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;

  v8 = a3;
  if (a3)
  {
    if (!a7)
    {
      v23 = (_QWORD *)a8[10];
      v24 = (_QWORD *)a8[11];
      if (v23 != v24)
      {
        while (((*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)*v23 + 16))(*v23, a2, v8, a4, a5, a6) & 1) == 0)
        {
          if (++v23 == v24)
            goto LABEL_6;
        }
        return 1;
      }
    }
    v14 = (_QWORD *)a8[7];
    v15 = (_QWORD *)a8[8];
    if (v14 != v15)
    {
      while (((*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)*v14 + 16))(*v14, a2, v8, a4, a5, a6) & 1) == 0)
      {
        if (++v14 == v15)
          goto LABEL_6;
      }
      return 1;
    }
LABEL_6:
    if (*(_BYTE *)(*(_QWORD *)(a1 + 232) + 192))
    {
      v16 = *(_QWORD *)(a1 + 48);
      v17 = *(_QWORD *)(v16 + 560);
      v18 = *(std::__shared_weak_count **)(v16 + 568);
      if (v18)
      {
        p_shared_owners = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldxr(p_shared_owners);
        while (__stxr(v20 + 1, p_shared_owners));
      }
      v8 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v17 + 224))(v17, *(unsigned int *)(a2 + 4 * v8 - 4));
      if (v18)
      {
        v21 = (unint64_t *)&v18->__shared_owners_;
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return v8;
}

void sub_19C32FCAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_19C2B43C8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_19C32FCC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v28;

  if (!*(_BYTE *)(*(_QWORD *)(a1 + 232) + 192))
    return 0;
  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(v4 + 560);
  v6 = *(std::__shared_weak_count **)(v4 + 568);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
      if (v5)
        goto LABEL_9;
      return 0;
    }
  }
  if (!v5)
    return 0;
LABEL_9:
  if (*(_BYTE *)(*(_QWORD *)(a1 + 232) + 192))
  {
    v11 = *(_QWORD *)(a1 + 48);
    v12 = *(_QWORD *)(v11 + 560);
    v13 = *(std::__shared_weak_count **)(v11 + 568);
    v28 = v13;
    if (v13)
    {
      v14 = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
  }
  else
  {
    v12 = 0;
    v28 = 0;
  }
  v17 = *(_QWORD *)(a1 + 48);
  v18 = *(_QWORD *)(v17 + 560);
  v19 = *(std::__shared_weak_count **)(v17 + 568);
  if (v19)
  {
    v20 = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  v22 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v18 + 24))(v18, a2, 0);
  v16 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 208))(v12, v22);
  if (v19)
  {
    v23 = (unint64_t *)&v19->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  if (v28)
  {
    v25 = (unint64_t *)&v28->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  return v16;
}

void sub_19C32FE64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_19C2B43C8((uint64_t)&a9);
  sub_19C2B43C8((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_19C32FE80(_QWORD *a1, int a2, double *a3, uint64_t a4, _DWORD *a5, unint64_t a6)
{
  unint64_t v6;
  _DWORD *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  void *__p[2];
  char v27;

  v6 = a6;
  if (!a6)
  {
    v11 = 0;
    if (a2 == 2)
      return;
LABEL_9:
    if (!*(_BYTE *)(a1[29] + 192))
      return;
    if (!a2
      && (v15 = a1[33]) != 0
      && (v27 = 10, strcpy((char *)__p, "selfSender"), sub_19C431B2C(v15, 0, 0, a4, v11, v6, __p), v27 < 0))
    {
      operator delete(__p[0]);
      v16 = a1[34];
      if (v16)
      {
LABEL_14:
        v27 = 10;
        strcpy((char *)__p, "selfSender");
        sub_19C431B2C(v16, a2, a3, a4, v11, v6, __p);
        if (v27 < 0)
          operator delete(__p[0]);
      }
    }
    else
    {
      v16 = a1[34];
      if (v16)
        goto LABEL_14;
    }
    sub_19C319420(a1, a4, (uint64_t)__p);
    v17 = v27;
    v18 = v27;
    if (v27 < 0)
      v17 = (unint64_t)__p[1];
    if (v17)
    {
      v19 = a1[6];
      v20 = *(_QWORD *)(v19 + 560);
      v21 = *(std::__shared_weak_count **)(v19 + 568);
      if (v21)
      {
        p_shared_owners = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldxr(p_shared_owners);
        while (__stxr(v23 + 1, p_shared_owners));
      }
      (*(void (**)(uint64_t, void **, uint64_t, float))(*(_QWORD *)v20 + 184))(v20, __p, a4, 1.0);
      if (v21)
      {
        v24 = (unint64_t *)&v21->__shared_owners_;
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      v18 = v27;
    }
    if (v18 < 0)
      operator delete(__p[0]);
    return;
  }
  v11 = a5;
  v12 = a6;
  while (v12 * 4)
  {
    v13 = a5[--v12];
    if (v13 == 1)
    {
      v14 = (uint64_t)(4 * a6 - (v12 * 4 + 4)) >> 2;
      v6 = v14 + 1;
      v11 = &a5[a6 + ~v14];
      break;
    }
  }
  if (a2 != 2)
    goto LABEL_9;
}

void sub_19C330098(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19C3300C8(_QWORD *a1, int a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v5;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  void *__p[2];
  unsigned __int8 v24;

  v5 = a5;
  if (!a5)
  {
    v8 = 0;
    if (a2 == 2)
      return;
    goto LABEL_9;
  }
  v8 = a4;
  v9 = 4 * a5;
  while (v9)
  {
    v10 = *(_DWORD *)(a4 + v9 - 4);
    v9 -= 4;
    if (v10 == 1)
    {
      v11 = (uint64_t)(4 * a5 - (v9 + 4)) >> 2;
      v5 = v11 + 1;
      v8 = a4 + 4 * a5 + 4 * ~v11;
      break;
    }
  }
  if (a2 != 2)
  {
LABEL_9:
    if (*(_BYTE *)(a1[29] + 192))
    {
      if (!a2)
      {
        v12 = a1[33];
        if (v12)
          sub_19C431E28(v12, a3, v8, v5);
      }
      v13 = a1[34];
      if (v13)
        sub_19C431E28(v13, a3, v8, v5);
      sub_19C319420(a1, a3, (uint64_t)__p);
      v14 = v24;
      v15 = v24;
      if ((v24 & 0x80u) != 0)
        v14 = (unint64_t)__p[1];
      if (v14)
      {
        v16 = a1[6];
        v17 = *(_QWORD *)(v16 + 560);
        v18 = *(std::__shared_weak_count **)(v16 + 568);
        if (v18)
        {
          p_shared_owners = (unint64_t *)&v18->__shared_owners_;
          do
            v20 = __ldxr(p_shared_owners);
          while (__stxr(v20 + 1, p_shared_owners));
        }
        (*(void (**)(uint64_t, void **, uint64_t, float))(*(_QWORD *)v17 + 184))(v17, __p, a3, -1.0);
        if (v18)
        {
          v21 = (unint64_t *)&v18->__shared_owners_;
          do
            v22 = __ldaxr(v21);
          while (__stlxr(v22 - 1, v21));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
            std::__shared_weak_count::__release_weak(v18);
          }
        }
        v15 = v24;
      }
      if ((v15 & 0x80) != 0)
        operator delete(__p[0]);
    }
  }
}

void sub_19C330244(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  sub_19C2B43C8((uint64_t)&a10);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_19C330268(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  _BOOL4 v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  void *__p[2];
  unsigned __int8 v29;

  sub_19C319420(a1, a2, (uint64_t)__p);
  v4 = v29;
  if ((v29 & 0x80u) != 0)
    v4 = (unint64_t)__p[1];
  if (v4 && *(_BYTE *)(a1[29] + 192))
  {
    v5 = a1[6];
    v6 = *(_QWORD *)(v5 + 560);
    v7 = *(std::__shared_weak_count **)(v5 + 568);
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    (*(void (**)(uint64_t, void **, uint64_t, uint64_t))(*(_QWORD *)v6 + 192))(v6, __p, a2, 1);
    if (v7)
    {
      v10 = (unint64_t *)&v7->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v12 = a1[29];
    v13 = a1[6];
    v14 = *(_QWORD *)(v13 + 560);
    v15 = *(std::__shared_weak_count **)(v13 + 568);
    if (v15)
    {
      v16 = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
    if (*(_BYTE *)(v12 + 192)
      && (*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 200))(v14, a2) >= *(_DWORD *)(v12 + 392))
    {
      v18 = (*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 208))(v14, a2) < *(_DWORD *)(v12 + 396);
      if (!v15)
        goto LABEL_24;
    }
    else
    {
      v18 = 0;
      if (!v15)
        goto LABEL_24;
    }
    v19 = (unint64_t *)&v15->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
      if (!v18)
        goto LABEL_34;
      goto LABEL_25;
    }
LABEL_24:
    if (!v18)
      goto LABEL_34;
LABEL_25:
    v21 = a1[6];
    v22 = *(_QWORD *)(v21 + 560);
    v23 = *(std::__shared_weak_count **)(v21 + 568);
    if (v23)
    {
      v24 = (unint64_t *)&v23->__shared_owners_;
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 1, v24));
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v22 + 216))(v22, a2);
    if (v23)
    {
      v26 = (unint64_t *)&v23->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
  }
LABEL_34:
  if ((char)v29 < 0)
    operator delete(__p[0]);
}

void sub_19C33047C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  sub_19C2B43C8((uint64_t)&a10);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL sub_19C3304A8(uint64_t *a1, const __CFString *a2, CFIndex a3, CFIndex a4)
{
  char *v6;
  uint64_t v7;
  char *v8;
  _BOOL8 v10;
  uint64_t v11;
  __CFStringTokenizer *v12;
  CFRange v13;
  unint64_t v14;
  CFRange CurrentTokenRange;
  int v16;
  char *v18;
  char *v19;
  CFRange v20;
  void *__p;
  char *v22;
  _QWORD v23[6];
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  char v27;

  v20.location = a3;
  v20.length = a4;
  sub_19C3C2C78(&__p, a1[23], a1[24]);
  if (!a2)
  {
    v10 = 0;
    v6 = (char *)__p;
    if (!__p)
      return v10;
    goto LABEL_26;
  }
  v6 = (char *)__p;
  if (!a1[34] || (v19 = v22, __p == v22))
  {
    v10 = 0;
    if (!__p)
      return v10;
LABEL_26:
    v22 = v6;
    operator delete(v6);
    return v10;
  }
  v7 = MEMORY[0x1E0C809B0];
  v18 = (char *)__p;
  v8 = (char *)__p;
LABEL_13:
  v11 = *(_QWORD *)v8;
  v12 = *(__CFStringTokenizer **)(*(_QWORD *)v8 + 8);
  v13 = v20;
  if (v12)
    CFStringTokenizerSetString(v12, a2, v13);
  else
    *(_QWORD *)(v11 + 8) = CFStringTokenizerCreate(0, a2, v13, 0, *(CFLocaleRef *)(v11 + 16));
  v14 = 0;
  while (CFStringTokenizerAdvanceToNextToken(*(CFStringTokenizerRef *)(v11 + 8)))
  {
    CurrentTokenRange = CFStringTokenizerGetCurrentTokenRange((CFStringTokenizerRef)*(_QWORD *)(v11 + 8));
    if (*(_BYTE *)(v11 + 36))
    {
      if (*(_QWORD *)v11)
      {
        v24 = 0;
        v25 = &v24;
        v26 = 0x2000000000;
        v27 = 1;
        v23[0] = v7;
        v23[1] = 0x40000000;
        v23[2] = sub_19C34061C;
        v23[3] = &unk_1E3D3A380;
        v23[4] = &v24;
        v23[5] = v11;
        sub_19C2E13BC(a2, CurrentTokenRange.location, CurrentTokenRange.length, (uint64_t)v23);
        v16 = *((unsigned __int8 *)v25 + 24);
        _Block_object_dispose(&v24, 8);
        if (!v16)
        {
          v10 = 0;
LABEL_12:
          v8 += 8;
          if (v8 == v19)
            goto LABEL_23;
          goto LABEL_13;
        }
      }
    }
    ++v14;
  }
  v10 = *(_DWORD *)(v11 + 24) != 2 || v14 > 5;
  if (!v10)
    goto LABEL_12;
LABEL_23:
  v6 = v18;
  if (v18)
    goto LABEL_26;
  return v10;
}

void sub_19C330674(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_19C3306A4(uint64_t *a1, unsigned int *a2, unint64_t a3)
{
  float v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  _BOOL8 v14;
  void *__p;
  uint64_t *v17;

  sub_19C3C2C78(&__p, a1[23], a1[24]);
  if (!a1[34])
  {
    v14 = 0;
LABEL_23:
    if (!__p)
      return v14;
LABEL_24:
    operator delete(__p);
    return v14;
  }
  if (__p != v17)
  {
    v6 = 1.0 / (float)a3;
    v7 = (uint64_t *)__p;
    while (1)
    {
      if (a3)
      {
        v8 = 0;
        v9 = 0;
        v10 = *v7;
        v11 = 4 * a3;
        v12 = a2;
        do
        {
          v13 = *v12;
          if (!*v12 || *(_DWORD *)(v10 + 28) <= v13 && v13 <= *(_DWORD *)(v10 + 32))
            ++v8;
          if (v13 - 10 < 0x35)
            ++v9;
          ++v12;
          v11 -= 4;
        }
        while (v11);
        v14 = (float)(v6 * (float)v9) < 0.2 && (float)(v6 * (float)v8) < 0.15;
        if (v14)
          goto LABEL_23;
      }
      else
      {
        v14 = 0;
      }
      if (++v7 == v17)
        goto LABEL_23;
    }
  }
  v14 = 0;
  if (__p)
    goto LABEL_24;
  return v14;
}

_QWORD *sub_19C3307E4(_QWORD *result)
{
  uint64_t v1;
  const __CFURL *v2;
  uint64_t v3;
  const __CFURL *v4;
  void *__p[4];

  __p[3] = *(void **)MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(result[29] + 192))
  {
    if (result[33])
    {
      v1 = result[6];
      std::mutex::lock((std::mutex *)(v1 + 664));
      sub_19C3A4034(*(_QWORD *)(v1 + 24), 11, CFSTR("cache"));
      v2 = sub_19C3A427C(*(_QWORD *)(v1 + 24), CFSTR("cache"));
      sub_19C2E15E8(v2, __p);
    }
    if (result[35])
    {
      v3 = result[6];
      std::mutex::lock((std::mutex *)(v3 + 664));
      sub_19C3A4034(*(_QWORD *)(v3 + 24), 39, CFSTR("recency"));
      v4 = sub_19C3A427C(*(_QWORD *)(v3 + 24), CFSTR("recency"));
      sub_19C2E15E8(v4, __p);
    }
  }
  return result;
}

void sub_19C3309A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 __p, int a12, __int16 a13, char a14, char a15)
{
  std::mutex *v15;
  void *v18;
  NSObject *v19;
  uint64_t v20;

  if (a15 < 0)
    operator delete((void *)__p);
  if (a2 == 1)
  {
    v18 = __cxa_begin_catch(a1);
    if (qword_1EE41C1A8 != -1)
      dispatch_once(&qword_1EE41C1A8, &unk_1E3D3A4C8);
    v19 = qword_1EE41C1A0;
    if (os_log_type_enabled((os_log_t)qword_1EE41C1A0, OS_LOG_TYPE_ERROR))
    {
      v20 = (*(uint64_t (**)(void *))(*(_QWORD *)v18 + 16))(v18);
      LODWORD(__p) = 136315138;
      *(_QWORD *)((char *)&__p + 4) = v20;
      _os_log_error_impl(&dword_19C291000, v19, OS_LOG_TYPE_ERROR, "recency flush failed: %s", (uint8_t *)&__p, 0xCu);
    }
    __cxa_end_catch();
    JUMPOUT(0x19C330970);
  }
  std::mutex::unlock(v15);
  _Unwind_Resume(a1);
}

void sub_19C330B68(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;

  if (*(_BYTE *)(a1[29] + 192))
  {
    v2 = a1[6];
    v3 = *(_QWORD *)(v2 + 560);
    v4 = *(std::__shared_weak_count **)(v2 + 568);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 240))(v3);
    if (!v4)
      goto LABEL_9;
    v7 = (unint64_t *)&v4->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (v8)
    {
LABEL_9:
      v9 = a1[35];
      if (!v9)
        return;
      goto LABEL_10;
    }
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    v9 = a1[35];
    if (v9)
LABEL_10:
      (*(void (**)(_QWORD))(**(_QWORD **)(v9 + 8) + 168))(*(_QWORD *)(v9 + 8));
  }
}

void sub_19C330C2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_19C2B43C8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19C330C40(uint64_t a1, char a2)
{
  uint64_t v4;
  std::recursive_mutex *v5;
  uint64_t v6;

  if ((a2 & 0x10) != 0)
  {
LABEL_10:
    v6 = *(_QWORD *)(a1 + 280);
    if (v6)
      (*(void (**)(_QWORD))(**(_QWORD **)(v6 + 8) + 168))(*(_QWORD *)(v6 + 8));
    return;
  }
  if (!*(_BYTE *)(*(_QWORD *)(a1 + 232) + 192))
  {
    if ((a2 & 2) != 0)
      return;
    goto LABEL_10;
  }
  v4 = *(_QWORD *)(a1 + 264);
  if (v4)
    (*(void (**)(_QWORD))(**(_QWORD **)(v4 + 8) + 168))(*(_QWORD *)(v4 + 8));
  if ((a2 & 2) == 0)
  {
    sub_19C342CA4(*(_QWORD *)(a1 + 48));
    v5 = *(std::recursive_mutex **)(a1 + 464);
    if (v5)
    {
      std::recursive_mutex::lock(*(std::recursive_mutex **)(a1 + 464));
      sub_19C342CA4(v5[2].__m_.__sig);
      std::recursive_mutex::unlock(v5);
    }
    goto LABEL_10;
  }
}

void sub_19C330CEC(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19C330D00(uint64_t a1)
{
  std::recursive_mutex *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;

  if (!*(_BYTE *)(*(_QWORD *)(a1 + 232) + 192))
    return;
  sub_19C343528(*(_QWORD *)(a1 + 48));
  v2 = *(std::recursive_mutex **)(a1 + 464);
  if (v2)
  {
    std::recursive_mutex::lock(*(std::recursive_mutex **)(a1 + 464));
    sub_19C343528(v2[2].__m_.__sig);
    std::recursive_mutex::unlock(v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 56);
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  if (!v3)
    goto LABEL_8;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v6 = *(_QWORD *)(a1 + 264);
    if (v6)
      goto LABEL_9;
  }
  else
  {
LABEL_8:
    v6 = *(_QWORD *)(a1 + 264);
    if (v6)
    {
LABEL_9:
      v7 = *(_QWORD *)(a1 + 232);
      std::mutex::lock((std::mutex *)v7);
      v9 = *(char **)(v7 + 64);
      v8 = *(char **)(v7 + 72);
      if (v9 != v8)
      {
        while (*(_QWORD *)v9 != v6 + 120)
        {
          v9 += 8;
          if (v9 == v8)
          {
            v9 = *(char **)(v7 + 72);
            break;
          }
        }
      }
      if (v9 != v8)
      {
        v10 = v8 - (v9 + 8);
        if (v8 != v9 + 8)
          memmove(v9, v9 + 8, v8 - (v9 + 8));
        *(_QWORD *)(v7 + 72) = &v9[v10];
      }
      std::mutex::unlock((std::mutex *)v7);
      v11 = *(_QWORD *)(a1 + 264);
      *(_QWORD *)(a1 + 264) = 0;
      if (v11)
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      goto LABEL_21;
    }
  }
  *(_QWORD *)(a1 + 264) = 0;
LABEL_21:
  v12 = *(_QWORD *)(a1 + 272);
  *(_QWORD *)(a1 + 272) = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v13 = *(_QWORD *)(a1 + 280);
  *(_QWORD *)(a1 + 280) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 472);
  *(_QWORD *)(a1 + 464) = 0;
  *(_QWORD *)(a1 + 472) = 0;
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  *(_BYTE *)(*(_QWORD *)(a1 + 232) + 192) = 0;
}

void sub_19C330EA0(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19C330EB4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  void *v7;
  void *__p[2];
  uint64_t v9;

  sub_19C319420(*(_QWORD **)(a1 + 32), a2, (uint64_t)__p);
  v6 = *(_QWORD *)(a1 + 40);
  if (!v6)
    goto LABEL_5;
  v7 = (void *)HIBYTE(v9);
  if (v9 < 0)
    v7 = __p[1];
  if (!v7)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 24))(v6, a2);
    if (SHIBYTE(v9) < 0)
      operator delete(__p[0]);
  }
  else
  {
LABEL_5:
    *(_OWORD *)a3 = *(_OWORD *)__p;
    *(_QWORD *)(a3 + 16) = v9;
  }
}

void sub_19C330F4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19C330F68(_QWORD *a1, CFStringRef theString1, _DWORD *a3, uint64_t a4)
{
  uint64_t v5;
  unint64_t i;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  void *__p[2];
  char v22;

  v5 = a1[29];
  if (*(_BYTE *)(v5 + 192))
  {
    if (!a1[35])
    {
      v19 = (uint64_t *)a1[6];
      if (v19)
      {
        if (*(float *)(v5 + 324) > 0.0)
        {
          sub_19C344520(__p, v19, a1 + 29);
          v20 = a1[35];
          a1[35] = __p[0];
          if (v20)
            (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
        }
      }
    }
    if (theString1 && a4)
    {
      for (i = 0; i != a4; ++i)
      {
        v10 = a1[35];
        if (v10)
        {
          v11 = a3[i];
          sub_19C29CEF8(theString1, __p);
          sub_19C431B2C(v10, 2, 0, v11, a3, i, __p);
          if (v22 < 0)
            operator delete(__p[0]);
        }
        if (CFStringCompare(theString1, (CFStringRef)kLMAdaptationContextSelfSender, 0) == kCFCompareEqualTo
          || !sub_19C32E740(a1, a3[i]))
        {
          continue;
        }
        v12 = a1[6];
        v13 = *(_QWORD *)(v12 + 560);
        v14 = *(std::__shared_weak_count **)(v12 + 568);
        if (v14)
        {
          p_shared_owners = (unint64_t *)&v14->__shared_owners_;
          do
            v16 = __ldxr(p_shared_owners);
          while (__stxr(v16 + 1, p_shared_owners));
        }
        sub_19C319420(a1, a3[i], (uint64_t)__p);
        (*(void (**)(uint64_t, void **, _QWORD))(*(_QWORD *)v13 + 232))(v13, __p, a3[i]);
        if (v22 < 0)
        {
          operator delete(__p[0]);
          if (v14)
          {
LABEL_19:
            v17 = (unint64_t *)&v14->__shared_owners_;
            do
              v18 = __ldaxr(v17);
            while (__stlxr(v18 - 1, v17));
            if (!v18)
            {
              ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
              std::__shared_weak_count::__release_weak(v14);
            }
          }
        }
        else if (v14)
        {
          goto LABEL_19;
        }
      }
    }
  }
}

void sub_19C331130(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  sub_19C2B43C8((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_19C33115C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19C331178(_QWORD *a1, uint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  unint64_t v8;
  _QWORD *v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  _QWORD *v16;
  char *v17;
  unint64_t v18;
  _OWORD *v19;
  char *v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;

  v4 = (char *)a1[3];
  v5 = (char *)a1[4];
  v6 = v5;
  v7 = v4;
  if (v4 != v5)
  {
    while (*(_QWORD *)v7 != a2)
    {
      v7 += 8;
      if (v7 == v5)
      {
        v7 = (char *)a1[4];
        break;
      }
    }
  }
  if (v7 == v5)
  {
    v8 = a1[5];
    if ((unint64_t)v5 >= v8)
    {
      v10 = v5 - v4;
      v11 = (v5 - v4) >> 3;
      v12 = v11 + 1;
      if ((unint64_t)(v11 + 1) >> 61)
        sub_19C2A18E8();
      v13 = v8 - (_QWORD)v4;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          sub_19C2A143C();
        v15 = operator new(8 * v14);
      }
      else
      {
        v15 = 0;
      }
      v16 = &v15[8 * v11];
      v17 = &v15[8 * v14];
      *v16 = a2;
      v9 = v16 + 1;
      if (v4 != v5)
      {
        if ((unint64_t)(v10 - 8) < 0x58)
          goto LABEL_35;
        if ((unint64_t)(v4 - v15) < 0x20)
          goto LABEL_35;
        v18 = ((unint64_t)(v10 - 8) >> 3) + 1;
        v6 = &v5[-8 * (v18 & 0x3FFFFFFFFFFFFFFCLL)];
        v19 = &v15[8 * v11 - 16];
        v20 = v5 - 16;
        v21 = v18 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v22 = *(_OWORD *)v20;
          *(v19 - 1) = *((_OWORD *)v20 - 1);
          *v19 = v22;
          v19 -= 2;
          v20 -= 32;
          v21 -= 4;
        }
        while (v21);
        v16 -= v18 & 0x3FFFFFFFFFFFFFFCLL;
        if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_35:
          do
          {
            v23 = *((_QWORD *)v6 - 1);
            v6 -= 8;
            *--v16 = v23;
          }
          while (v6 != v4);
          v4 = (char *)a1[3];
        }
      }
      a1[3] = v16;
      a1[4] = v9;
      a1[5] = v17;
      if (v4)
        operator delete(v4);
    }
    else
    {
      *(_QWORD *)v5 = a2;
      v9 = v5 + 8;
    }
    a1[4] = v9;
    v24 = a1[31];
    if (v24)
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(v24 + 16) + 16) + 96))(*(_QWORD *)(*(_QWORD *)(v24 + 16) + 16), a2);
  }
}

void sub_19C331338(uint64_t a1, const void *a2, unint64_t a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  const void *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  NSObject *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 buf;
  uint64_t v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  switch(a3)
  {
    case 0uLL:
      v24 = operator new();
      *(_QWORD *)v24 = &off_1E3D35068;
      *(_QWORD *)(v24 + 8) = a2;
      *(_QWORD *)(v24 + 16) = 0;
      v25 = sub_19C337C94();
      buf = 0uLL;
      v43 = 0;
      sub_19C337E1C(v24 + 24, v25, (uint64_t)&buf);
      v26 = sub_19C337C94();
      buf = 0uLL;
      v43 = 0;
      sub_19C337FF4(v24 + 152, v26, (char **)&buf);
      v27 = *(uint64_t **)(a1 + 216);
      v28 = *(_QWORD *)(a1 + 224);
      *(_DWORD *)(v24 + 280) = 1;
      if ((unint64_t)v27 >= v28)
      {
        v29 = sub_19C326B48((char **)(a1 + 208), v24);
      }
      else
      {
        *v27 = v24;
        v29 = (char *)(v27 + 1);
      }
      *(_QWORD *)(a1 + 216) = v29;
      return;
    case 1uLL:
    case 2uLL:
      v6 = *(_QWORD *)(a1 + 288);
      if (v6)
        goto LABEL_22;
      v7 = *(std::__shared_weak_count **)(a1 + 16);
      *(_QWORD *)&buf = *(_QWORD *)(a1 + 8);
      if (!v7)
        goto LABEL_39;
      v8 = std::__shared_weak_count::lock(v7);
      *((_QWORD *)&buf + 1) = v8;
      if (!v8)
        goto LABEL_39;
      v9 = v8;
      v40 = 1;
      v39 = 2;
      sub_19C32D9F8(&v41, (uint64_t *)&buf, (uint64_t *)(a1 + 232), &v40, &v39);
      v10 = v41;
      v41 = 0;
      v11 = *(_QWORD *)(a1 + 288);
      *(_QWORD *)(a1 + 288) = v10;
      if (v11)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
        v41 = 0;
      }
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
      v6 = *(_QWORD *)(a1 + 288);
      goto LABEL_22;
    case 3uLL:
    case 4uLL:
      v6 = *(_QWORD *)(a1 + 296);
      if (v6)
        goto LABEL_22;
      v14 = *(std::__shared_weak_count **)(a1 + 16);
      *(_QWORD *)&buf = *(_QWORD *)(a1 + 8);
      if (!v14)
        goto LABEL_39;
      v15 = std::__shared_weak_count::lock(v14);
      *((_QWORD *)&buf + 1) = v15;
      if (!v15)
        goto LABEL_39;
      v16 = v15;
      v40 = 3;
      v39 = 4;
      sub_19C32D9F8(&v41, (uint64_t *)&buf, (uint64_t *)(a1 + 232), &v40, &v39);
      v17 = v41;
      v41 = 0;
      v18 = *(_QWORD *)(a1 + 296);
      *(_QWORD *)(a1 + 296) = v17;
      if (v18)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
        v41 = 0;
      }
      v19 = (unint64_t *)&v16->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
      v6 = *(_QWORD *)(a1 + 296);
LABEL_22:
      v21 = *(_QWORD *)(v6 + 16);
      v22 = a2;
      v23 = a3;
      break;
    case 5uLL:
      v30 = *(_QWORD *)(a1 + 304);
      if (v30)
        goto LABEL_36;
      v31 = *(std::__shared_weak_count **)(a1 + 16);
      *(_QWORD *)&buf = *(_QWORD *)(a1 + 8);
      if (!v31 || (v32 = std::__shared_weak_count::lock(v31), (*((_QWORD *)&buf + 1) = v32) == 0))
LABEL_39:
        sub_19C31AF2C();
      v33 = v32;
      v39 = 5;
      v40 = 5;
      sub_19C32D9F8(&v41, (uint64_t *)&buf, (uint64_t *)(a1 + 232), &v40, &v39);
      v34 = v41;
      v41 = 0;
      v35 = *(_QWORD *)(a1 + 304);
      *(_QWORD *)(a1 + 304) = v34;
      if (v35)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
        v41 = 0;
      }
      v36 = (unint64_t *)&v33->__shared_owners_;
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
      v30 = *(_QWORD *)(a1 + 304);
LABEL_36:
      v21 = *(_QWORD *)(v30 + 16);
      v22 = a2;
      v23 = 5;
      break;
    default:
      if (qword_1EDB971F8 != -1)
        dispatch_once(&qword_1EDB971F8, &unk_1E3D3A1E0);
      v38 = qword_1EDB971F0;
      if (os_log_type_enabled((os_log_t)qword_1EDB971F0, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 134217984;
        *(_QWORD *)((char *)&buf + 4) = a3;
        _os_log_error_impl(&dword_19C291000, v38, OS_LOG_TYPE_ERROR, "Unknown external lexicon type: %ld", (uint8_t *)&buf, 0xCu);
      }
      __assert_rtn("addLexicon", "LMCompositeLanguageModel.cpp", 2357, "false && \"Unknown external lexicon type\"");
  }
  sub_19C3ABBB8(v21, v22, v23);
}

void sub_19C33173C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_19C2B43C8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19C331758(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_19C331764(_Unwind_Exception *a1)
{
  void **v1;
  _QWORD *v2;
  void *v4;
  void *v5;
  void *v6;
  void **v7;
  const void *v8;
  void **v9;
  void *v10;
  const void *v11;

  v4 = (void *)v2[12];
  if (v4)
  {
    v2[13] = v4;
    operator delete(v4);
    v5 = (void *)v2[9];
    if (!v5)
    {
LABEL_3:
      v6 = (void *)v2[6];
      if (!v6)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else
  {
    v5 = (void *)v2[9];
    if (!v5)
      goto LABEL_3;
  }
  v2[10] = v5;
  operator delete(v5);
  v6 = (void *)v2[6];
  if (!v6)
  {
LABEL_4:
    v7 = (void **)*v1;
    if (!*v1)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  v2[7] = v6;
  operator delete(v6);
  v7 = (void **)*v1;
  if (!*v1)
  {
LABEL_5:
    v8 = (const void *)v2[2];
    if (!v8)
      goto LABEL_18;
    goto LABEL_17;
  }
LABEL_10:
  v9 = (void **)v2[4];
  v10 = v7;
  if (v9 != v7)
  {
    do
    {
      if (*((char *)v9 - 1) < 0)
        operator delete(*(v9 - 3));
      v9 -= 3;
    }
    while (v9 != v7);
    v10 = *v1;
  }
  v2[4] = v7;
  operator delete(v10);
  v8 = (const void *)v2[2];
  if (!v8)
  {
LABEL_18:
    v2[2] = 0;
    v11 = (const void *)v2[1];
    if (v11)
      CFRelease(v11);
    v2[1] = 0;
    MEMORY[0x1A1AD355C](v2, 0x10F1C40EEDAF61BLL);
    _Unwind_Resume(a1);
  }
LABEL_17:
  CFRelease(v8);
  goto LABEL_18;
}

void sub_19C33185C(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_19C2CDAC8(exception_object);
}

void sub_19C331890(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  NSObject *v3;
  unint64_t v4;
  uint8_t buf[4];
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if (a2 - 1 < 2)
  {
    v2 = a1[36];
    if (v2)
      goto LABEL_10;
  }
  else
  {
    if (a2 - 3 < 2)
    {
      v2 = a1[37];
      if (!v2)
        return;
LABEL_10:
      sub_19C3D6D9C((uint64_t *)(*(_QWORD *)(v2 + 16) + 8), a2);
      return;
    }
    if (a2 != 5)
    {
      v4 = a2;
      if (qword_1EDB971F8 != -1)
        dispatch_once(&qword_1EDB971F8, &unk_1E3D3A1E0);
      v3 = qword_1EDB971F0;
      if (os_log_type_enabled((os_log_t)qword_1EDB971F0, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134217984;
        v6 = v4;
        _os_log_error_impl(&dword_19C291000, v3, OS_LOG_TYPE_ERROR, "Unknown external lexicon type: %ld", buf, 0xCu);
      }
      __assert_rtn("removeLexicon", "LMCompositeLanguageModel.cpp", 2380, "false && \"Unknown external lexicon type\"");
    }
    v2 = a1[38];
    if (v2)
    {
      a2 = 5;
      goto LABEL_10;
    }
  }
}

void sub_19C3319EC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const std::error_category *v5;
  const std::error_category *v6;
  NSObject *v7;
  std::string *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  std::string v15;
  std::error_code v16;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  std::string *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v2 = a1[16];
  v3 = a1[17];
  if (v2 != v3)
  {
    while (munlock(*(const void **)(*(_QWORD *)v2 + 112), *(_QWORD *)(*(_QWORD *)v2 + 120)))
    {
      v4 = *__error();
      v5 = std::generic_category();
      *(_QWORD *)&v16.__val_ = v4;
      v16.__cat_ = v5;
      if (!(_DWORD)v4)
        goto LABEL_8;
LABEL_3:
      v2 += 16;
      if (v2 == v3)
        goto LABEL_15;
    }
    v6 = std::system_category();
    *(_QWORD *)&v16.__val_ = 0;
    v16.__cat_ = v6;
LABEL_8:
    if (qword_1EDB97228 != -1)
      dispatch_once(&qword_1EDB97228, &unk_1E3D3ABD0);
    v7 = qword_1EDB97220;
    if (os_log_type_enabled((os_log_t)qword_1EDB97220, OS_LOG_TYPE_DEFAULT))
    {
      std::error_code::message(&v15, &v16);
      v8 = &v15;
      if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v8 = (std::string *)v15.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315394;
      v18 = "munlock";
      v19 = 2080;
      v20 = v8;
      _os_log_impl(&dword_19C291000, v7, OS_LOG_TYPE_DEFAULT, "%s: munlock() failed: %s", buf, 0x16u);
      if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v15.__r_.__value_.__l.__data_);
    }
    goto LABEL_3;
  }
LABEL_15:
  v9 = a1[23];
  v10 = a1[24];
  while (v9 != v10)
  {
    v11 = *(uint64_t **)(*(_QWORD *)v9 + 8);
    v12 = *(uint64_t **)(*(_QWORD *)v9 + 16);
    while (v11 != v12)
    {
      v13 = *v11++;
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 80))(v13);
    }
    v9 += 16;
  }
  v14 = a1[31];
  if (v14)
    (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v14 + 16) + 16) + 88))(*(_QWORD *)(*(_QWORD *)(v14 + 16) + 16));
}

void sub_19C331C08(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_19C2CDAC8(a1);
}

void sub_19C331C18(uint64_t a1)
{
  sub_19C332660(a1);
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C331C3C(uint64_t a1, const __CFString *a2, uint64_t a3)
{
  uint64_t v5;
  void *__p[2];
  char v8;

  sub_19C29CEF8(a2, __p);
  v5 = (*(uint64_t (**)(uint64_t, void **, uint64_t))(*(_QWORD *)a1 + 24))(a1, __p, a3);
  if (v8 < 0)
    operator delete(__p[0]);
  return v5;
}

void sub_19C331CA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C331CBC(uint64_t *a1, const void **a2, double *a3)
{
  const void **v4;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t *v10;
  uint64_t v11;
  _OWORD v12[2];

  v4 = a2;
  v6 = *((_BYTE *)a2 + 23);
  if (v6 >= 0)
    v7 = *((unsigned __int8 *)a2 + 23);
  else
    v7 = *((unsigned int *)a2 + 2);
  if (!(_DWORD)v7)
    goto LABEL_11;
  v8 = *(_QWORD *)(a1[17] + 8);
  if (v6 < 0)
    a2 = (const void **)*a2;
  v12[0] = xmmword_19C477EF0;
  v12[1] = unk_19C477F00;
  sub_19C4029D0(v8, a2, v7, 1, (uint64_t)v12);
  result = DWORD1(v12[0]);
  if ((DWORD1(v12[0]) & 0x80000000) != 0)
    goto LABEL_11;
  if (a3)
    *a3 = *((float *)v12 + 2);
  if (!(_DWORD)result)
  {
LABEL_11:
    v10 = sub_19C29A674((uint64_t)(a1 + 11), v4);
    if (a1 + 12 == v10 && (v11 = a1[18], v10 = sub_19C29A674(v11, v4), (uint64_t *)(v11 + 8) == v10))
      return 0;
    else
      return *((unsigned int *)v10 + 14);
  }
  return result;
}

void sub_19C331D94(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  BOOL v9;
  uint64_t *v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  BOOL v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  BOOL v26;
  uint64_t *v27;
  const char *v28;
  size_t v29;
  size_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;

  if ((a2 & 0x80000000) != 0)
  {
    v6 = *(_QWORD *)(a1 + 120);
    if (v6)
    {
      v7 = a1 + 120;
      do
      {
        v8 = *(_DWORD *)(v6 + 32);
        v9 = v8 >= a2;
        if (v8 >= a2)
          v10 = (uint64_t *)v6;
        else
          v10 = (uint64_t *)(v6 + 8);
        if (v9)
          v7 = v6;
        v6 = *v10;
      }
      while (*v10);
      if (v7 != a1 + 120 && *(_DWORD *)(v7 + 32) <= a2)
      {
        if (*(char *)(v7 + 63) < 0)
        {
          sub_19C2B5238((_BYTE *)a3, *(void **)(v7 + 40), *(_QWORD *)(v7 + 48));
        }
        else
        {
          v11 = *(_OWORD *)(v7 + 40);
          *(_QWORD *)(a3 + 16) = *(_QWORD *)(v7 + 56);
          *(_OWORD *)a3 = v11;
        }
        return;
      }
    }
  }
  if (*(_DWORD *)(a1 + 72) > a2 || *(_DWORD *)(a1 + 76) < a2)
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    return;
  }
  v12 = *(_QWORD *)(a1 + 136);
  v15 = *(_QWORD *)(v12 + 24);
  v13 = v12 + 24;
  v14 = v15;
  if (!v15)
    goto LABEL_29;
  v16 = v13;
  do
  {
    v17 = *(_DWORD *)(v14 + 28);
    v18 = v17 >= a2;
    if (v17 >= a2)
      v19 = (uint64_t *)v14;
    else
      v19 = (uint64_t *)(v14 + 8);
    if (v18)
      v16 = v14;
    v14 = *v19;
  }
  while (*v19);
  if (v16 == v13 || *(_DWORD *)(v16 + 28) > a2)
  {
LABEL_29:
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
LABEL_30:
    v20 = *(_QWORD *)(a1 + 144);
    v23 = *(_QWORD *)(v20 + 32);
    v21 = v20 + 32;
    v22 = v23;
    if (!v23)
      goto LABEL_41;
    v24 = v21;
    do
    {
      v25 = *(_DWORD *)(v22 + 32);
      v26 = v25 >= a2;
      if (v25 >= a2)
        v27 = (uint64_t *)v22;
      else
        v27 = (uint64_t *)(v22 + 8);
      if (v26)
        v24 = v22;
      v22 = *v27;
    }
    while (*v27);
    if (v24 != v21 && *(_DWORD *)(v24 + 32) <= a2)
    {
      if (*(char *)(v24 + 63) < 0)
      {
        sub_19C2B5238(&v35, *(void **)(v24 + 40), *(_QWORD *)(v24 + 48));
      }
      else
      {
        v35 = *(_OWORD *)(v24 + 40);
        v36 = *(_QWORD *)(v24 + 56);
      }
    }
    else
    {
LABEL_41:
      v35 = 0uLL;
      v36 = 0;
    }
    if (*(char *)(a3 + 23) < 0)
      operator delete(*(void **)a3);
    *(_OWORD *)a3 = v35;
    *(_QWORD *)(a3 + 16) = v36;
    return;
  }
  v28 = (const char *)(*(_QWORD *)(*(_QWORD *)(a1 + 136) + 40) + *(unsigned int *)(v16 + 32));
  v29 = strlen(v28);
  if (v29 >= 0x7FFFFFFFFFFFFFF8)
    sub_19C2A1A54();
  v30 = v29;
  if (v29 >= 0x17)
  {
    v32 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v29 | 7) != 0x17)
      v32 = v29 | 7;
    v33 = v32 + 1;
    v31 = operator new(v32 + 1);
    *(_QWORD *)(a3 + 8) = v30;
    *(_QWORD *)(a3 + 16) = v33 | 0x8000000000000000;
    *(_QWORD *)a3 = v31;
    goto LABEL_56;
  }
  *(_BYTE *)(a3 + 23) = v29;
  v31 = (void *)a3;
  if (v29)
LABEL_56:
    memmove(v31, v28, v30);
  *((_BYTE *)v31 + v30) = 0;
  v34 = *(unsigned __int8 *)(a3 + 23);
  if ((v34 & 0x80u) != 0)
    v34 = *(_QWORD *)(a3 + 8);
  if (!v34)
    goto LABEL_30;
}

void sub_19C332004(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

CFBinaryHeapRef sub_19C332020@<X0>(uint64_t a1@<X0>, const __CFString *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const __CFAllocator *v8;
  CFBinaryHeapRef result;
  CFBinaryHeapCallBacks callBacks;

  v5 = *(_QWORD *)(a1 + 136);
  v6 = operator new();
  *(_QWORD *)v6 = &off_1E3D36FF8;
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)(v6 + 8) = v7;
  *(_QWORD *)(v6 + 24) = 0;
  *(_QWORD *)(v6 + 32) = 0;
  *(_BYTE *)(v6 + 40) = 0;
  *(_DWORD *)(v6 + 44) = 2;
  *(_QWORD *)(v6 + 16) = CFStringCreateCopy(0, a2);
  callBacks.retain = (const void *(__cdecl *)(CFAllocatorRef, const void *))sub_19C403AD8;
  callBacks.release = (void (__cdecl *)(CFAllocatorRef, const void *))sub_19C403AF0;
  callBacks.compare = (CFComparisonResult (__cdecl *)(const void *, const void *, void *))sub_19C403B10;
  v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  *(_QWORD *)(v6 + 24) = CFBinaryHeapCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, &callBacks, 0);
  callBacks.retain = (const void *(__cdecl *)(CFAllocatorRef, const void *))sub_19C403B74;
  callBacks.release = (void (__cdecl *)(CFAllocatorRef, const void *))sub_19C403B8C;
  callBacks.compare = (CFComparisonResult (__cdecl *)(const void *, const void *, void *))sub_19C403BAC;
  result = CFBinaryHeapCreate(v8, 0, &callBacks, 0);
  *(_QWORD *)(v6 + 32) = result;
  *a3 = v6;
  return result;
}

void sub_19C332138(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD355C](v1, 0x10E1C40AD94C641);
  _Unwind_Resume(a1);
}

void sub_19C33215C()
{
  __assert_rtn("enumerateSortkeyEquivalentEntries", "LMLegacyDynamicLexicon.cpp", 184, "false && \"enumerateSortkeyEquivalentEntries() is not supported in LegacyDynamicLexicon\"");
}

void sub_19C332184()
{
  __assert_rtn("createLXCursorRoot", "LMLegacyDynamicLexicon.cpp", 189, "false && \"createLXCursorRoot() is not supported in LegacyDynamicLexicon\"");
}

uint64_t sub_19C3321AC()
{
  return 0;
}

uint64_t sub_19C3321B4(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  char v11;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 136) + 16))(*(_QWORD *)(a1 + 136));
  v5 = *(_QWORD *)(a1 + 144);
  v11 = 0;
  v6 = *(_QWORD **)(v5 + 24);
  v7 = (_QWORD *)(v5 + 32);
  if (v6 != (_QWORD *)(v5 + 32))
  {
    do
    {
      result = (*(uint64_t (**)(uint64_t, _QWORD, char *, double))(a2 + 16))(a2, *((unsigned int *)v6 + 8), &v11, 1.0);
      if (v11)
        break;
      v8 = (_QWORD *)v6[1];
      if (v8)
      {
        do
        {
          v9 = v8;
          v8 = (_QWORD *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (_QWORD *)v6[2];
          v10 = *v9 == (_QWORD)v6;
          v6 = v9;
        }
        while (!v10);
      }
      v6 = v9;
    }
    while (v9 != v7);
  }
  return result;
}

uint64_t sub_19C332268(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 136) + 32))(*(_QWORD *)(a1 + 136));
}

off_t sub_19C332278(uint64_t a1)
{
  const char *v2;
  stat v4;

  v2 = (const char *)(a1 + 16);
  if (*(char *)(a1 + 39) < 0)
    v2 = *(const char **)v2;
  if (stat(v2, &v4) >= 0)
    return 0;
  else
    return v4.st_size;
}

void sub_19C3322B8()
{
  __assert_rtn("clear", "LMLegacyDynamicLexicon.cpp", 167, "false && \"clear() is not supported in LegacyDynamicLexicon\"");
}

void sub_19C3322E0()
{
  __assert_rtn("writeDebugDump", "LMLegacyDynamicLexicon.cpp", 255, "false && \"writeDebugDump() is not supported in LegacyDynamicLexicon\"");
}

void sub_19C332308()
{
  __assert_rtn("add", "LMLegacyDynamicLexicon.cpp", 155, "false && \"add() is not supported in LegacyDynamicLexicon()\"");
}

void sub_19C332330()
{
  __assert_rtn("remove", "LMLegacyDynamicLexicon.cpp", 161, "false && \"remove() is not supported in LegacyDynamicLexicon()\"");
}

uint64_t sub_19C332358(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  BOOL v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  BOOL v18;
  uint64_t *v19;

  v2 = *(_QWORD *)(a1 + 136);
  v5 = *(_QWORD *)(v2 + 80);
  v3 = v2 + 80;
  v4 = v5;
  if (v5)
  {
    v6 = v3;
    do
    {
      v7 = *(_DWORD *)(v4 + 28);
      v8 = v7 >= a2;
      if (v7 >= a2)
        v9 = (uint64_t *)v4;
      else
        v9 = (uint64_t *)(v4 + 8);
      if (v8)
        v6 = v4;
      v4 = *v9;
    }
    while (*v9);
    if (v6 != v3 && *(_DWORD *)(v6 + 28) <= a2)
    {
      v10 = *(unsigned __int8 *)(v6 + 32);
      if ((_DWORD)v10)
        return v10;
    }
  }
  v12 = *(_QWORD *)(a1 + 144);
  v15 = *(_QWORD *)(v12 + 104);
  v13 = v12 + 104;
  v14 = v15;
  if (!v15)
    return 0;
  v16 = v13;
  do
  {
    v17 = *(_DWORD *)(v14 + 28);
    v18 = v17 >= a2;
    if (v17 >= a2)
      v19 = (uint64_t *)v14;
    else
      v19 = (uint64_t *)(v14 + 8);
    if (v18)
      v16 = v14;
    v14 = *v19;
  }
  while (*v19);
  if (v16 != v13 && *(_DWORD *)(v16 + 28) <= a2)
    return *(unsigned __int8 *)(v16 + 32);
  else
    return 0;
}

void sub_19C3323FC()
{
  __assert_rtn("prune", "LMLegacyDynamicLexicon.cpp", 260, "false && \"prune() is not supported in LegacyDynamicLexicon\"");
}

void sub_19C332424()
{
  __assert_rtn("createPrunedCopy", "LMLegacyDynamicLexicon.cpp", 266, "false && \"createPrunedCopy() is not supported in LegacyDynamicLexicon\"");
}

void sub_19C33244C()
{
  __assert_rtn("flushData", "LMLegacyDynamicLexicon.cpp", 250, "false && \"flushData() is not supported in LegacyDynamicLexicon\"");
}

void sub_19C332474()
{
  __assert_rtn("reviewProbationaryEntries", "LMLegacyDynamicLexicon.cpp", 330, "false && \"reviewProbationaryEntries() is not supported in LegacyDynamicLexicon\"");
}

void sub_19C33249C()
{
  __assert_rtn("incrementUsageCount", "LMLegacyDynamicLexicon.cpp", 277, "false && \"incrementUsageCount() is not supported in LegacyDynamicLexicon\"");
}

void sub_19C3324C4()
{
  __assert_rtn("incrementPenaltyCount", "LMLegacyDynamicLexicon.cpp", 282, "false && \"incrementPenaltyCount() is not supported in LegacyDynamicLexicon\"");
}

void sub_19C3324EC()
{
  __assert_rtn("getPenaltyCount", "LMLegacyDynamicLexicon.cpp", 287, "false && \"getPenaltyCount() is not supported in LegacyDynamicLexicon\"");
}

void sub_19C332514()
{
  __assert_rtn("getUsageCount", "LMLegacyDynamicLexicon.cpp", 293, "false && \"getUsageCount() is not supported in LegacyDynamicLexicon\"");
}

void sub_19C33253C()
{
  __assert_rtn("blocklistToken", "LMLegacyDynamicLexicon.cpp", 299, "false && \"blocklistToken() is not supported in LegacyDynamicLexicon\"");
}

uint64_t sub_19C332564()
{
  return 0;
}

void sub_19C33256C()
{
  __assert_rtn("incrementUsageCountForRecentToken", "LMLegacyDynamicLexicon.cpp", 315, "false && \"incrementUsageCountForRecentToken() is not supported in LegacyDynamicLexicon\"");
}

void sub_19C332598()
{
  __assert_rtn("addOrUpdateTokenWithAttributes", "LMLegacyDynamicLexicon.cpp", 335, "false && \"addOrUpdateTokenWithAttributes() is not supported in LegacyDynamicLexicon\"");
}

void sub_19C3325C0()
{
  __assert_rtn("updateAttributesForToken", "LMLegacyDynamicLexicon.cpp", 341, "false && \"updateAttributesForToken() is not supported in LegacyDynamicLexicon\"");
}

void sub_19C3325E8()
{
  __assert_rtn("copyTokenAttributes", "LMLegacyDynamicLexicon.cpp", 347, "false && \"copyTokenAttributes() is not supported in LegacyDynamicLexicon\"");
}

void sub_19C332610()
{
  __assert_rtn("getIntegerAttributeValue", "LMLegacyDynamicLexicon.cpp", 353, "false && \"getIntegerAttributeValue() is not supported in LegacyDynamicLexicon\"");
}

void sub_19C332638()
{
  __assert_rtn("copyStringAttributeValue", "LMLegacyDynamicLexicon.cpp", 359, "false && \"copyStringAttributeValue() is not supported in LegacyDynamicLexicon\"");
}

uint64_t sub_19C332660(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  const void *v6;

  *(_QWORD *)a1 = &off_1E3D36308;
  v2 = *(_QWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 144) = 0;
  if (v2)
  {
    sub_19C33275C(*(_QWORD **)(v2 + 104));
    sub_19C332794(v2 + 48);
    sub_19C332918(*(char **)(v2 + 32));
    sub_19C2EAC08(*(char **)(v2 + 8));
    MEMORY[0x1A1AD355C](v2, 0x10A0C404AAAD15CLL);
  }
  v3 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 136) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  sub_19C332918(*(char **)(a1 + 120));
  sub_19C2EAC08(*(char **)(a1 + 96));
  v4 = *(_QWORD **)(a1 + 80);
  if (v4)
  {
    do
    {
      v5 = (_QWORD *)*v4;
      operator delete(v4);
      v4 = v5;
    }
    while (v5);
  }
  *(_QWORD *)(a1 + 80) = 0;
  if (*(char *)(a1 + 63) < 0)
  {
    operator delete(*(void **)(a1 + 40));
    if ((*(char *)(a1 + 39) & 0x80000000) == 0)
    {
LABEL_9:
      v6 = *(const void **)(a1 + 8);
      if (!v6)
        goto LABEL_14;
      goto LABEL_13;
    }
  }
  else if ((*(char *)(a1 + 39) & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(*(void **)(a1 + 16));
  v6 = *(const void **)(a1 + 8);
  if (v6)
LABEL_13:
    CFRelease(v6);
LABEL_14:
  *(_QWORD *)(a1 + 8) = 0;
  return a1;
}

void sub_19C33275C(_QWORD *a1)
{
  if (a1)
  {
    sub_19C33275C(*a1);
    sub_19C33275C(a1[1]);
    operator delete(a1);
  }
}

uint64_t sub_19C332794(uint64_t a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    v4 = (_QWORD *)(a1 + 40);
    v3 = *(void ***)(a1 + 8);
  }
  else
  {
    v4 = (_QWORD *)(a1 + 40);
    v5 = *(_QWORD *)(a1 + 32);
    v6 = &v2[v5 / 0x66];
    v7 = (unint64_t)*v6;
    v8 = (unint64_t)*v6 + 40 * (v5 % 0x66);
    v9 = (unint64_t)v2[(*(_QWORD *)(a1 + 40) + v5) / 0x66] + 40 * ((*(_QWORD *)(a1 + 40) + v5) % 0x66);
    if (v8 != v9)
    {
      do
      {
        if (*(char *)(v8 + 23) < 0)
        {
          operator delete(*(void **)v8);
          v7 = (unint64_t)*v6;
        }
        v8 += 40;
        if (v8 - v7 == 4080)
        {
          v10 = (unint64_t)v6[1];
          ++v6;
          v7 = v10;
          v8 = v10;
        }
      }
      while (v8 != v9);
      v2 = *(void ***)(a1 + 8);
      v3 = *(void ***)(a1 + 16);
    }
  }
  *v4 = 0;
  v11 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v11 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v12 = v11 >> 3;
  if (v12 == 1)
  {
    v13 = 51;
    goto LABEL_17;
  }
  if (v12 == 2)
  {
    v13 = 102;
LABEL_17:
    *(_QWORD *)(a1 + 32) = v13;
  }
  if (v2 != v3)
  {
    do
    {
      v14 = *v2++;
      operator delete(v14);
    }
    while (v2 != v3);
    v16 = *(_QWORD *)(a1 + 8);
    v15 = *(_QWORD *)(a1 + 16);
    if (v15 != v16)
      *(_QWORD *)(a1 + 16) = v15 + ((v16 - v15 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_19C332918(char *a1)
{
  if (a1)
  {
    sub_19C332918(*(_QWORD *)a1);
    sub_19C332918(*((_QWORD *)a1 + 1));
    if (a1[63] < 0)
      operator delete(*((void **)a1 + 5));
    operator delete(a1);
  }
}

int32x2_t *sub_19C332960(int32x2_t *a1, CFTypeRef cf, __int128 *a3, __int128 *a4, unsigned int *a5)
{
  const char *v7;
  int32x2_t *v9;
  __int128 v10;
  __int128 v11;
  int32x2_t v12;
  const __CFDictionary *v13;
  const __CFNumber *Value;
  const __CFNumber *v15;
  CFTypeID v16;
  uint64_t v17;
  const __CFNumber *v18;
  const __CFNumber *v19;
  CFTypeID v20;
  __int32 v21;
  const __CFNumber *v22;
  const __CFNumber *v23;
  CFTypeID v24;
  __int32 v25;
  const __CFNumber *v26;
  const __CFNumber *v27;
  CFTypeID v28;
  __int32 v29;
  const __CFNumber *v30;
  const __CFNumber *v31;
  CFTypeID v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t **v37;
  unsigned int v38;
  uint64_t v39;
  char *v40;
  char *v41;
  unint64_t v42;
  size_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  size_t v47;
  char *v48;
  char *v49;
  char *v50;
  unint64_t v51;
  char *v52;
  char *v53;
  unint64_t v54;
  __int128 v55;
  unint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  char *v60;
  char v61;
  unsigned int *v62;
  uint64_t v63;
  unint64_t v64;
  unsigned int v65;
  uint64_t *v66;
  uint64_t **v67;
  uint64_t **v68;
  unsigned int v69;
  _DWORD *v70;
  uint64_t v71;
  uint64_t *v72;
  int v73;
  unsigned int v74;
  int v75;
  unsigned int v76;
  unsigned int v77;
  int v78;
  uint64_t *v79;
  uint64_t **v80;
  uint64_t **v81;
  unsigned int v82;
  _DWORD *v83;
  uint64_t v84;
  uint64_t *v85;
  size_t v86;
  _DWORD *v87;
  char *v88;
  void **v89;
  unsigned int v90;
  char *v91;
  char *v92;
  int v93;
  int32x2_t v94;
  const char *v95;
  int v96;
  int v97;
  uint64_t v98;
  BOOL v99;
  uint64_t v100;
  size_t v101;
  void *v102;
  unsigned int v103;
  int v104;
  unsigned int v105;
  unsigned int v106;
  int v107;
  uint64_t *v108;
  uint64_t **v109;
  uint64_t **v110;
  unsigned int v111;
  _DWORD *v112;
  uint64_t v113;
  uint64_t *v114;
  unsigned int *v115;
  void *v116;
  uint64_t v117;
  unsigned int *v118;
  double *v119;
  uint64_t v120;
  unsigned int v121;
  uint64_t v122;
  double v123;
  BOOL v124;
  char *v125;
  size_t v126;
  size_t v127;
  __int128 *p_dst;
  uint64_t v129;
  uint64_t v130;
  unsigned int v131;
  uint64_t **v132;
  uint64_t *v133;
  uint64_t **v134;
  unsigned int v135;
  char *v136;
  uint64_t v137;
  uint64_t *v138;
  void **v139;
  __int128 *v140;
  size_t v141;
  char *v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  unint64_t v148;
  uint64_t v149;
  char *v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  int64_t v156;
  char *v157;
  char *v158;
  char *v159;
  unint64_t v160;
  char *v161;
  void *v162;
  char *v163;
  char *v164;
  void *v165;
  char *v166;
  unint64_t v167;
  char *v168;
  unint64_t v169;
  _BYTE *v170;
  unint64_t v171;
  char *v172;
  BOOL v173;
  int64_t v174;
  unint64_t v175;
  char *v176;
  void *v177;
  char *v178;
  unint64_t v179;
  char *v180;
  void *v181;
  char *v182;
  char *v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t v186;
  unint64_t v187;
  char *v188;
  unint64_t v189;
  int64_t v190;
  unint64_t v191;
  char *v192;
  char *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  __int128 *v197;
  char *v198;
  uint64_t v199;
  __int128 v200;
  uint64_t v201;
  unint64_t v202;
  char *v203;
  unint64_t v204;
  char *v205;
  char *v206;
  char *v207;
  char *v208;
  uint64_t v209;
  unint64_t v210;
  uint64_t v211;
  __int128 *v212;
  char *v213;
  uint64_t v214;
  __int128 v215;
  uint64_t v216;
  unint64_t v217;
  uint64_t v218;
  uint64_t v219;
  __int128 *v220;
  _OWORD *v221;
  uint64_t v222;
  __int128 v223;
  uint64_t v224;
  unint64_t v225;
  unint64_t v226;
  __int128 v227;
  int v228;
  uint64_t v229;
  char *v230;
  char *v231;
  uint64_t v232;
  char *v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  char *v237;
  int64_t v238;
  unint64_t v239;
  _BYTE *v240;
  unint64_t v241;
  char *v242;
  int64_t v243;
  unint64_t v244;
  char *v245;
  uint64_t v246;
  unint64_t v247;
  uint64_t v248;
  uint64_t v249;
  __int128 *v250;
  _OWORD *v251;
  uint64_t v252;
  __int128 v253;
  uint64_t v254;
  unint64_t v255;
  uint64_t v256;
  uint64_t *v257;
  uint64_t v258;
  unint64_t v259;
  uint64_t *v260;
  unint64_t v261;
  unint64_t v262;
  unint64_t v263;
  uint64_t v264;
  uint64_t v265;
  _BYTE *v266;
  char *v267;
  int32x2_t v268;
  uint64_t v269;
  uint64_t v270;
  int32x2_t v271;
  _QWORD *v272;
  _QWORD *v273;
  _BYTE *v274;
  char *v275;
  char *st_ino;
  uint64_t v277;
  unint64_t v278;
  unint64_t v279;
  _BYTE *v280;
  _DWORD *v281;
  char *v282;
  unint64_t v283;
  char *v284;
  int v285;
  _QWORD *v286;
  _QWORD *v287;
  uint64_t v288;
  _OWORD *v289;
  __int128 *v290;
  uint64_t v291;
  __int128 v292;
  uint64_t v293;
  _QWORD *v294;
  _QWORD *v295;
  size_t v296;
  char *v297;
  char *v298;
  char *v299;
  _QWORD *v300;
  uint64_t v301;
  unint64_t v302;
  unint64_t v303;
  _BYTE *v304;
  char *v305;
  unint64_t v306;
  char *v307;
  int v308;
  _QWORD *v309;
  uint64_t v310;
  _OWORD *v311;
  char *v312;
  uint64_t v313;
  __int128 v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  __darwin_ino64_t v321;
  unsigned __int32 *v322;
  unsigned __int32 v323;
  unsigned __int32 v324;
  unsigned __int32 v325;
  int32x2_t v326;
  _BYTE *v327;
  unint64_t v328;
  _BYTE *v329;
  unint64_t v330;
  uint64_t v331;
  size_t v332;
  _BYTE *v333;
  _QWORD *v334;
  uint64_t v335;
  int v336;
  void *v337;
  unsigned int v338;
  __darwin_ino64_t v339;
  unsigned int v340;
  _DWORD *v341;
  _DWORD *v342;
  unsigned int v343;
  unsigned int v344;
  _DWORD *v345;
  _DWORD *v346;
  char *v347;
  uint64_t v348;
  char **v349;
  void **v350;
  void **v351;
  _QWORD *v352;
  unint64_t v353;
  void **v354;
  unint64_t v355;
  unint64_t v356;
  unint64_t v357;
  unint64_t v358;
  unint64_t v359;
  uint64_t v360;
  uint64_t v361;
  _QWORD *v363;
  char *v364;
  _BYTE *v365;
  char *v366;
  _QWORD *exception;
  _QWORD *v368;
  _BYTE *v369;
  char *v370;
  _BYTE *v371;
  char *v372;
  _QWORD *v373;
  _BYTE *v374;
  char *v375;
  char *v376;
  char *v377;
  _QWORD *v378;
  _BYTE *v379;
  __int128 v380;
  __int128 v381;
  __int128 v382;
  void **v383;
  CFTypeRef *v384;
  unsigned int v385;
  char *v386;
  int v387;
  char *v388;
  double *v389;
  __int128 *v390;
  unsigned int *v391;
  unsigned int v392;
  unint64_t v393;
  char *v394;
  uint64_t *v395;
  int32x2_t *v396;
  int v397;
  uint64_t v398;
  int v399;
  int v400;
  const __CFDictionary *theDict;
  _BYTE valuePtr[24];
  size_t v404[2];
  uint64_t v405;
  __int128 v406;
  char *v407;
  void (*v408)(uint64_t, unsigned __int32 *, __n128);
  __int128 __dst;
  int64_t v410;
  uint64_t v411;
  char *v412;
  size_t __sz;
  stat v414;

  v7 = (const char *)a3;
  *a1 = (int32x2_t)&off_1E3D36308;
  v9 = a1 + 2;
  a1[1] = 0;
  v384 = (CFTypeRef *)&a1[1];
  if (*((char *)a3 + 23) < 0)
  {
    sub_19C2B5238(v9, *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v10 = *a3;
    a1[4] = (int32x2_t)a3[1];
    *(_OWORD *)v9->i8 = v10;
  }
  if (*((char *)a4 + 23) < 0)
  {
    sub_19C2B5238(&a1[5], *(void **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v11 = *a4;
    a1[7] = (int32x2_t)a4[1];
    *(_OWORD *)a1[5].i8 = v11;
  }
  a1[17] = 0;
  a1[12] = 0;
  a1[10] = 0;
  a1[11] = (int32x2_t)&a1[12];
  a1[16] = 0;
  a1[15] = 0;
  a1[13] = 0;
  a1[14] = (int32x2_t)&a1[15];
  a1[18] = 0;
  v395 = (uint64_t *)&a1[18];
  v396 = a1 + 17;
  if ((CFTypeRef)a1[1] != cf)
  {
    CFRetain(cf);
    if (*v384)
      CFRelease(*v384);
    *v384 = cf;
  }
  v12 = *(int32x2_t *)a5;
  a1[8] = *(int32x2_t *)a5;
  a1[9].i32[0] = v12.i32[1];
  a1[9].i32[1] = v12.i32[0];
  v385 = vcvtpd_u64_f64(log2((double)v12.u32[1]));
  v13 = (const __CFDictionary *)sub_19C2E19B8((const __CFURL *)cf, 0);
  if (!v13)
    v13 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  theDict = v13;
  if (CFDictionaryGetCount(v13))
  {
    Value = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("Version"));
    v15 = Value;
    *(_DWORD *)valuePtr = 0;
    if (Value && (v16 = CFGetTypeID(Value), v16 == CFNumberGetTypeID()))
    {
      CFNumberGetValue(v15, kCFNumberIntType, valuePtr);
      v17 = *(unsigned int *)valuePtr;
      if (*(_DWORD *)valuePtr == 1)
      {
        v18 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("dynamicRangeMin"));
        v19 = v18;
        *(_DWORD *)valuePtr = 0;
        if (v18 && (v20 = CFGetTypeID(v18), v20 == CFNumberGetTypeID()))
        {
          CFNumberGetValue(v19, kCFNumberIntType, valuePtr);
          v21 = *(_DWORD *)valuePtr;
        }
        else
        {
          v21 = 0;
        }
        v22 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("dynamicRangeMax"));
        v23 = v22;
        *(_DWORD *)valuePtr = 0;
        if (v22 && (v24 = CFGetTypeID(v22), v24 == CFNumberGetTypeID()))
        {
          CFNumberGetValue(v23, kCFNumberIntType, valuePtr);
          v25 = *(_DWORD *)valuePtr;
        }
        else
        {
          v25 = 0;
        }
        a1[9].i32[0] = v21;
        a1[9].i32[1] = v25;
        v26 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("dynamicLimitsMin"));
        v27 = v26;
        *(_DWORD *)valuePtr = 0;
        if (v26 && (v28 = CFGetTypeID(v26), v28 == CFNumberGetTypeID()))
        {
          CFNumberGetValue(v27, kCFNumberIntType, valuePtr);
          v29 = *(_DWORD *)valuePtr;
        }
        else
        {
          v29 = 0;
        }
        v30 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("dynamicLimitsMax"));
        v31 = v30;
        *(_DWORD *)valuePtr = 0;
        if (v30 && (v32 = CFGetTypeID(v30), v32 == CFNumberGetTypeID()))
        {
          CFNumberGetValue(v31, kCFNumberIntType, valuePtr);
          v33 = *(_DWORD *)valuePtr;
        }
        else
        {
          v33 = 0;
        }
        a1[8].i32[0] = v29;
        a1[8].i32[1] = v33;
        if (v29 != *a5 || v33 != a5[1])
        {
          exception = __cxa_allocate_exception(0x20uLL);
          sub_19C34EC30("dynamicids resource file is incompatible with the parameters the client has set (dynamicIDLimits [%d, %d], expected dynamicIDLimits [%d, %d])", (uint64_t)&v414, *a5, a5[1], a1[8].u32[0], a1[8].u32[1]);
          sub_19C31237C(exception, (__int128 *)&v414.st_dev);
          __cxa_throw(exception, (struct type_info *)&unk_1E3D32968, (void (*)(void *))sub_19C3123E4);
        }
        v385 = vcvtpd_u64_f64(log2((double)v33));
        goto LABEL_36;
      }
    }
    else
    {
      v17 = 0;
    }
    v363 = __cxa_allocate_exception(0x20uLL);
    sub_19C34EC30("dynamicids resource file is incompatible (version %d, expected version %d)", (uint64_t)&v414, v17, 1);
    sub_19C31237C(v363, (__int128 *)&v414.st_dev);
    __cxa_throw(v363, (struct type_info *)&unk_1E3D32968, (void (*)(void *))sub_19C3123E4);
  }
LABEL_36:
  if (v7[23] < 0)
    v7 = *(const char **)v7;
  v34 = open_dprotected_np(v7, 0, 3, 0, 0);
  v35 = v34;
  if ((v34 & 0x80000000) != 0)
    goto LABEL_122;
  fcntl(v34, 64, 3);
  v399 = v35;
  v390 = a4;
  v36 = operator new();
  *(_QWORD *)v36 = &off_1E3D35F38;
  *(_QWORD *)(v36 + 24) = 0;
  v37 = (uint64_t **)(v36 + 24);
  *(_QWORD *)(v36 + 32) = 0;
  *(_QWORD *)(v36 + 40) = 0;
  *(_QWORD *)(v36 + 16) = v36 + 24;
  *(_QWORD *)(v36 + 48) = 0;
  *(_QWORD *)(v36 + 56) = 0;
  *(_QWORD *)(v36 + 80) = 0;
  *(_QWORD *)(v36 + 88) = 0;
  *(_QWORD *)(v36 + 72) = v36 + 80;
  *(_DWORD *)(v36 + 96) = v385;
  if (fstat(v35, &v414) < 0)
  {
    v364 = (char *)__cxa_allocate_exception(0x20uLL);
    *(_QWORD *)v364 = off_1E3D38838;
    strcpy(v364 + 8, "fstat failed");
    v364[21] = 0;
    *((_WORD *)v364 + 11) = 0;
    v364[31] = 12;
    __cxa_throw(v364, (struct type_info *)&unk_1E3D32968, (void (*)(void *))sub_19C3123E4);
  }
  *(_QWORD *)valuePtr = 0x3BAFABAFALL;
  *(_OWORD *)&valuePtr[8] = 0u;
  *(_OWORD *)v404 = 0u;
  v405 = 0;
  read(v35, valuePtr, 0x30uLL);
  if (*(_DWORD *)valuePtr != -1157973254)
  {
    v365 = __cxa_allocate_exception(0x20uLL);
    v366 = (char *)operator new(0x19uLL);
    strcpy(v366, "lexicon file is invalid");
    *(_QWORD *)v365 = off_1E3D38838;
    sub_19C2B5238(v365 + 8, v366, 0x17uLL);
    __cxa_throw(v365, (struct type_info *)&unk_1E3D32968, (void (*)(void *))sub_19C3123E4);
  }
  if (*(_DWORD *)&valuePtr[4] != 3)
  {
    v368 = __cxa_allocate_exception(0x20uLL);
    sub_19C34EC30("lexicon trie file is incompatible (version %d, expected version %d)", (uint64_t)&v406, *(unsigned int *)&valuePtr[4], 3);
    *v368 = off_1E3D38838;
    v369 = v368 + 1;
    if (SHIBYTE(v407) < 0)
    {
      sub_19C2B5238(v369, (void *)v406, *((unint64_t *)&v406 + 1));
    }
    else
    {
      v380 = v406;
      v368[3] = v407;
      *(_OWORD *)v369 = v380;
    }
    __cxa_throw(v368, (struct type_info *)&unk_1E3D32968, (void (*)(void *))sub_19C3123E4);
  }
  if (*(_DWORD *)&valuePtr[12])
  {
    LODWORD(v35) = vcvtpd_u64_f64(log2((double)*(unsigned int *)&valuePtr[12]));
    if (*(_DWORD *)(v36 + 96) != (_DWORD)v35)
    {
      v378 = __cxa_allocate_exception(0x20uLL);
      sub_19C34EC30("dynamic id limits incompatible with lexicon trie header: %d, expected %d)", (uint64_t)&v406, *(unsigned int *)(v36 + 96), v35);
      *v378 = off_1E3D38838;
      v379 = v378 + 1;
      if (SHIBYTE(v407) < 0)
      {
        sub_19C2B5238(v379, (void *)v406, *((unint64_t *)&v406 + 1));
      }
      else
      {
        v382 = v406;
        v378[3] = v407;
        *(_OWORD *)v379 = v382;
      }
      __cxa_throw(v378, (struct type_info *)&unk_1E3D32968, (void (*)(void *))sub_19C3123E4);
    }
  }
  v397 = *(_DWORD *)&valuePtr[16];
  if (*(_DWORD *)&valuePtr[20] > *(_DWORD *)&valuePtr[16])
    v38 = *(_DWORD *)&valuePtr[20] - *(_DWORD *)&valuePtr[16] + 1;
  else
    v38 = 1;
  *(_DWORD *)(v36 + 64) = v404[1];
  v39 = LODWORD(v404[0]);
  v393 = HIDWORD(v404[0]);
  v41 = *(char **)(v36 + 40);
  v40 = *(char **)(v36 + 48);
  v42 = v40 - v41;
  v43 = LODWORD(v404[0]) - (v40 - v41);
  if (LODWORD(v404[0]) <= (unint64_t)(v40 - v41))
  {
    if (LODWORD(v404[0]) < (unint64_t)(v40 - v41))
      *(_QWORD *)(v36 + 48) = &v41[LODWORD(v404[0])];
    goto LABEL_76;
  }
  v44 = *(_QWORD *)(v36 + 56);
  if (v44 - (uint64_t)v40 < v43)
  {
    v45 = v44 - (_QWORD)v41;
    v46 = 2 * v45;
    if (2 * v45 <= LODWORD(v404[0]))
      v46 = LODWORD(v404[0]);
    if (v45 >= 0x3FFFFFFFFFFFFFFFLL)
      v47 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v47 = v46;
    v48 = (char *)operator new(v47);
    v386 = &v48[v47];
    v49 = v48;
    v388 = &v48[v39];
    v50 = &v48[v42];
    bzero(&v48[v42], v43);
    if (v40 == v41)
      goto LABEL_74;
    if (v42 < 8 || (unint64_t)(v41 - v49) < 0x20)
      goto LABEL_71;
    if (v42 >= 0x20)
    {
      v51 = v42 & 0xFFFFFFFFFFFFFFE0;
      v52 = v40 - 16;
      v53 = &v49[v40 - 16 - v41];
      v54 = v42 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v55 = *(_OWORD *)v52;
        *((_OWORD *)v53 - 1) = *((_OWORD *)v52 - 1);
        *(_OWORD *)v53 = v55;
        v53 -= 32;
        v52 -= 32;
        v54 -= 32;
      }
      while (v54);
      if (v42 == v51)
        goto LABEL_73;
      if ((v42 & 0x18) == 0)
      {
        v50 -= v51;
        v40 -= v51;
        goto LABEL_71;
      }
    }
    else
    {
      v51 = 0;
    }
    v56 = v51 - (v42 & 0xFFFFFFFFFFFFFFF8);
    v57 = &v40[-v51 - 8];
    v58 = (char *)(v57 - v41);
    do
    {
      v59 = *(_QWORD *)v57;
      v57 -= 8;
      *(_QWORD *)&v58[(_QWORD)v49] = v59;
      v58 -= 8;
      v56 += 8;
    }
    while (v56);
    if (v42 == (v42 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_73;
    v50 -= v42 & 0xFFFFFFFFFFFFFFF8;
    v40 -= v42 & 0xFFFFFFFFFFFFFFF8;
LABEL_71:
    v60 = v50 - 1;
    do
    {
      v61 = *--v40;
      *v60-- = v61;
    }
    while (v40 != v41);
LABEL_73:
    v40 = v41;
    v50 = v49;
LABEL_74:
    *(_QWORD *)(v36 + 40) = v50;
    *(_QWORD *)(v36 + 48) = v388;
    *(_QWORD *)(v36 + 56) = v386;
    if (v40)
      operator delete(v40);
    goto LABEL_76;
  }
  bzero(*(void **)(v36 + 48), LODWORD(v404[0]) - (v40 - v41));
  *(_QWORD *)(v36 + 48) = &v40[v43];
LABEL_76:
  v62 = (unsigned int *)operator new[]();
  read(v399, v62, 4 * v38);
  v63 = v38 - 1;
  do
  {
    v64 = v62[v63];
    if ((_DWORD)v64 && *(_QWORD *)(v36 + 48) - *(_QWORD *)(v36 + 40) > v64)
    {
      v65 = v397 + v63;
      v66 = *v37;
      v67 = (uint64_t **)(v36 + 24);
      v68 = (uint64_t **)(v36 + 24);
      if (*v37)
      {
        while (1)
        {
          while (1)
          {
            v68 = (uint64_t **)v66;
            v69 = *((_DWORD *)v66 + 7);
            if (v65 >= v69)
              break;
            v66 = *v68;
            v67 = v68;
            if (!*v68)
              goto LABEL_89;
          }
          if (v69 >= v65)
            break;
          v66 = v68[1];
          if (!v66)
          {
            v67 = v68 + 1;
            goto LABEL_89;
          }
        }
        v70 = v68;
      }
      else
      {
LABEL_89:
        v70 = operator new(0x28uLL);
        v70[7] = v65;
        v70[8] = 0;
        *(_QWORD *)v70 = 0;
        *((_QWORD *)v70 + 1) = 0;
        *((_QWORD *)v70 + 2) = v68;
        *v67 = (uint64_t *)v70;
        v71 = **(_QWORD **)(v36 + 16);
        v72 = (uint64_t *)v70;
        if (v71)
        {
          *(_QWORD *)(v36 + 16) = v71;
          v72 = *v67;
        }
        sub_19C2A2310(*(uint64_t **)(v36 + 24), v72);
        ++*(_QWORD *)(v36 + 32);
      }
      v70[8] = v64;
    }
    v124 = v63-- <= 0;
  }
  while (!v124);
  MEMORY[0x1A1AD3538](v62, 0x1000C8052888210);
  v73 = v399;
  read(v399, *(void **)(v36 + 40), LODWORD(v404[0]));
  if (HIDWORD(v404[1]))
  {
    v74 = 0;
    LODWORD(v406) = 0;
    v75 = ~(-1 << *(_DWORD *)(v36 + 96));
    do
    {
      read(v399, &v406, 4uLL);
      v76 = v406;
      v77 = v406 & v75;
      v78 = *(_DWORD *)(v36 + 96);
      v79 = *(uint64_t **)(v36 + 80);
      v80 = (uint64_t **)(v36 + 80);
      v81 = (uint64_t **)(v36 + 80);
      if (v79)
      {
        while (1)
        {
          while (1)
          {
            v81 = (uint64_t **)v79;
            v82 = *((_DWORD *)v79 + 7);
            if (v77 >= v82)
              break;
            v79 = *v81;
            v80 = v81;
            if (!*v81)
              goto LABEL_103;
          }
          if (v82 >= v77)
            break;
          v79 = v81[1];
          if (!v79)
          {
            v80 = v81 + 1;
            goto LABEL_103;
          }
        }
        v83 = v81;
      }
      else
      {
LABEL_103:
        v83 = operator new(0x28uLL);
        v83[7] = v77;
        *((_BYTE *)v83 + 32) = 0;
        *(_QWORD *)v83 = 0;
        *((_QWORD *)v83 + 1) = 0;
        *((_QWORD *)v83 + 2) = v81;
        *v80 = (uint64_t *)v83;
        v84 = **(_QWORD **)(v36 + 72);
        v85 = (uint64_t *)v83;
        if (v84)
        {
          *(_QWORD *)(v36 + 72) = v84;
          v85 = *v80;
        }
        sub_19C2A2310(*(uint64_t **)(v36 + 80), v85);
        ++*(_QWORD *)(v36 + 88);
      }
      *((_BYTE *)v83 + 32) = v76 >> v78;
      ++v74;
    }
    while (v74 < HIDWORD(v404[1]));
    v73 = v399;
  }
  if (lseek(v73, v393, 0) < 0)
  {
    v375 = (char *)__cxa_allocate_exception(0x20uLL);
    *(_QWORD *)v375 = off_1E3D38838;
    strcpy(v375 + 8, "lseek failed");
    v375[21] = 0;
    *((_WORD *)v375 + 11) = 0;
    v375[31] = 12;
    __cxa_throw(v375, (struct type_info *)&unk_1E3D32968, (void (*)(void *))sub_19C3123E4);
  }
  v86 = v414.st_size - v393;
  if (v414.st_size < v393)
  {
    v376 = (char *)__cxa_allocate_exception(0x20uLL);
    *(_QWORD *)v376 = off_1E3D38838;
    strcpy(v376 + 8, "malformed lexicon file");
    v376[31] = 22;
    __cxa_throw(v376, (struct type_info *)&unk_1E3D32968, (void (*)(void *))sub_19C3123E4);
  }
  v87 = (_DWORD *)operator new[]();
  read(v73, v87, v86);
  if (*v87 != -900339842)
  {
    *(_QWORD *)(v36 + 8) = 0;
    goto LABEL_505;
  }
  v88 = (char *)malloc_type_calloc(1uLL, 0x83CuLL, 0x105004056F6A631uLL);
  v89 = (void **)(v88 + 2084);
  *(_QWORD *)(v88 + 2084) = v87;
  *((_QWORD *)v88 + 259) = v87[2];
  *((_QWORD *)v88 + 258) = *(_QWORD *)(v87 + 3);
  v90 = v87[5];
  *(_QWORD *)(v88 + 2092) = v90;
  *((_DWORD *)v88 + 520) = 1;
  v91 = (char *)malloc_type_calloc(1uLL, 0x83CuLL, 0x105004056F6A631uLL);
  v92 = v91;
  if (v91)
  {
    *((_OWORD *)v91 + 129) = 0u;
    *((_DWORD *)v91 + 520) = 1;
    *(_QWORD *)(v91 + 2084) = 0;
    *((_DWORD *)v91 + 524) = 0;
    *((_DWORD *)v91 + 523) = v90;
  }
  v406 = 0xFFFFFFFF00000003;
  v407 = v91;
  v408 = sub_19C40100C;
  sub_19C4029D0((uint64_t)v88, 0, 0, 0, (uint64_t)&v406);
  *(_QWORD *)(v36 + 8) = v92;
  v93 = *((_DWORD *)v88 + 520) - 1;
  *((_DWORD *)v88 + 520) = v93;
  if (!v93)
  {
    if (*v89)
    {
      if (*((_DWORD *)v88 + 524))
        munmap(*v89, *((_QWORD *)v88 + 259));
    }
    else
    {
      sub_19C400F88((uint64_t)v88);
    }
    free(v88);
    v92 = *(char **)(v36 + 8);
  }
  if (!v92)
  {
LABEL_505:
    v377 = (char *)__cxa_allocate_exception(0x20uLL);
    *(_QWORD *)v377 = off_1E3D38838;
    strcpy(v377 + 8, "trie creation failed");
    v377[31] = 20;
    __cxa_throw(v377, (struct type_info *)&unk_1E3D32968, (void (*)(void *))sub_19C3123E4);
  }
  MEMORY[0x1A1AD3538](v87, 0x1000C8077774924);
  v94 = *v396;
  *v396 = (int32x2_t)v36;
  if (v94)
    (*(void (**)(int32x2_t))(**(_QWORD **)&v94 + 8))(v94);
  close(v399);
  a4 = v390;
LABEL_122:
  if (*((char *)a4 + 23) >= 0)
    v95 = (const char *)a4;
  else
    v95 = *(const char **)a4;
  v96 = open_dprotected_np(v95, 0, 3, 0, 0);
  v97 = v96;
  if (v96 < 0)
    goto LABEL_327;
  fcntl(v96, 64, 3);
  v400 = v97;
  v98 = operator new();
  *(_QWORD *)(v98 + 8) = 0;
  *(_QWORD *)v98 = v98 + 8;
  *(_QWORD *)(v98 + 32) = 0;
  *(_QWORD *)(v98 + 40) = 0;
  *(_QWORD *)(v98 + 16) = 0;
  *(_QWORD *)(v98 + 24) = v98 + 32;
  *(_OWORD *)(v98 + 48) = 0u;
  v383 = (void **)(v98 + 48);
  *(_OWORD *)(v98 + 64) = 0u;
  *(_OWORD *)(v98 + 80) = 0u;
  *(_QWORD *)(v98 + 104) = 0;
  *(_QWORD *)(v98 + 112) = 0;
  *(_QWORD *)(v98 + 96) = v98 + 104;
  *(_DWORD *)(v98 + 120) = v385;
  if (fstat(v97, &v414) < 0)
  {
    v370 = (char *)__cxa_allocate_exception(0x20uLL);
    *(_QWORD *)v370 = off_1E3D38838;
    strcpy(v370 + 8, "fstat failed");
    v370[21] = 0;
    *((_WORD *)v370 + 11) = 0;
    v370[31] = 12;
    __cxa_throw(v370, (struct type_info *)&unk_1E3D32968, (void (*)(void *))sub_19C3123E4);
  }
  v411 = 0x1BBFABBFALL;
  v412 = 0;
  __sz = 0;
  read(v97, &v411, 0x18uLL);
  if ((_DWORD)v411 != -1141195782)
  {
    v371 = __cxa_allocate_exception(0x20uLL);
    v372 = (char *)operator new(0x28uLL);
    strcpy(v372, "probation lexicon file is invalid");
    *(_QWORD *)v371 = off_1E3D38838;
    sub_19C2B5238(v371 + 8, v372, 0x21uLL);
    __cxa_throw(v371, (struct type_info *)&unk_1E3D32968, (void (*)(void *))sub_19C3123E4);
  }
  if (HIDWORD(v411) != 1)
  {
    v373 = __cxa_allocate_exception(0x20uLL);
    sub_19C34EC30("probation lexicon file is incompatible (version %d, expected version %d)", (uint64_t)valuePtr, HIDWORD(v411), 1);
    *v373 = off_1E3D38838;
    v374 = v373 + 1;
    if ((valuePtr[23] & 0x80000000) != 0)
    {
      sub_19C2B5238(v374, *(void **)valuePtr, *(unint64_t *)&valuePtr[8]);
    }
    else
    {
      v381 = *(_OWORD *)valuePtr;
      v373[3] = *(_QWORD *)&valuePtr[16];
      *(_OWORD *)v374 = v381;
    }
    __cxa_throw(v373, (struct type_info *)&unk_1E3D32968, (void (*)(void *))sub_19C3123E4);
  }
  v387 = (int)v412;
  if (HIDWORD(v412))
    v99 = HIDWORD(v412) >= v412;
  else
    v99 = 0;
  if (v99)
    v100 = (HIDWORD(v412) - (_DWORD)v412 + 1);
  else
    v100 = 1;
  v101 = __sz;
  v102 = operator new(__sz);
  bzero(v102, v101);
  v394 = (char *)v102;
  read(v97, v102, v101);
  v398 = v100;
  v392 = v101;
  if (HIDWORD(__sz))
  {
    v103 = 0;
    *(_DWORD *)valuePtr = 0;
    v104 = ~(-1 << *(_DWORD *)(v98 + 120));
    do
    {
      read(v97, valuePtr, 4uLL);
      v105 = *(_DWORD *)valuePtr;
      v106 = *(_DWORD *)valuePtr & v104;
      v107 = *(_DWORD *)(v98 + 120);
      v108 = *(uint64_t **)(v98 + 104);
      v109 = (uint64_t **)(v98 + 104);
      v110 = (uint64_t **)(v98 + 104);
      if (v108)
      {
        while (1)
        {
          while (1)
          {
            v110 = (uint64_t **)v108;
            v111 = *((_DWORD *)v108 + 7);
            if (v106 >= v111)
              break;
            v108 = *v110;
            v109 = v110;
            if (!*v110)
              goto LABEL_146;
          }
          if (v111 >= v106)
            break;
          v108 = v110[1];
          if (!v108)
          {
            v109 = v110 + 1;
            goto LABEL_146;
          }
        }
        v112 = v110;
      }
      else
      {
LABEL_146:
        v112 = operator new(0x28uLL);
        v112[7] = v106;
        *((_BYTE *)v112 + 32) = 0;
        *(_QWORD *)v112 = 0;
        *((_QWORD *)v112 + 1) = 0;
        *((_QWORD *)v112 + 2) = v110;
        *v109 = (uint64_t *)v112;
        v113 = **(_QWORD **)(v98 + 96);
        v114 = (uint64_t *)v112;
        if (v113)
        {
          *(_QWORD *)(v98 + 96) = v113;
          v114 = *v109;
        }
        sub_19C2A2310(*(uint64_t **)(v98 + 104), v114);
        ++*(_QWORD *)(v98 + 112);
      }
      v97 = v400;
      *((_BYTE *)v112 + 32) = v105 >> v107;
      ++v103;
    }
    while (v103 < HIDWORD(__sz));
    v100 = v398;
  }
  v115 = (unsigned int *)operator new(4 * v100);
  bzero(v115, 4 * v100);
  v391 = v115;
  read(v97, v115, 4 * v100);
  v116 = operator new(8 * v100);
  bzero(v116, 8 * v100);
  v389 = (double *)v116;
  read(v97, v116, 8 * v100);
  v117 = 0;
  v119 = (double *)v116;
  v118 = v391;
  v120 = v398;
  v121 = v392;
  do
  {
    v122 = v118[v117];
    if (!(_DWORD)v122)
      goto LABEL_151;
    v123 = v119[v117];
    v124 = v123 > 0.0 && v121 > v122;
    if (!v124)
      goto LABEL_151;
    v125 = &v394[v122];
    v126 = strlen(&v394[v122]);
    if (v126 >= 0x7FFFFFFFFFFFFFF8)
      sub_19C2A1A54();
    v127 = v126;
    if (v126 >= 0x17)
    {
      v129 = (v126 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v126 | 7) != 0x17)
        v129 = v126 | 7;
      v130 = v129 + 1;
      p_dst = (__int128 *)operator new(v129 + 1);
      *((_QWORD *)&__dst + 1) = v127;
      v410 = v130 | 0x8000000000000000;
      *(_QWORD *)&__dst = p_dst;
    }
    else
    {
      HIBYTE(v410) = v126;
      p_dst = &__dst;
      if (!v126)
        goto LABEL_166;
    }
    memmove(p_dst, v125, v127);
LABEL_166:
    *((_BYTE *)p_dst + v127) = 0;
    v131 = v387 + v117;
    *((_DWORD *)sub_19C36EB88((uint64_t **)v98, (const void **)&__dst, (uint64_t)&__dst) + 14) = v387 + v117;
    v132 = (uint64_t **)(v98 + 32);
    while (1)
    {
      v133 = *v132;
      v134 = v132;
      if (!*v132)
        break;
      while (1)
      {
        v132 = (uint64_t **)v133;
        v135 = *((_DWORD *)v133 + 8);
        if (v131 < v135)
          break;
        if (v135 >= v131)
        {
          v136 = (char *)v132;
          goto LABEL_176;
        }
        v133 = v132[1];
        if (!v133)
        {
          v134 = v132 + 1;
          goto LABEL_172;
        }
      }
    }
LABEL_172:
    v136 = (char *)operator new(0x40uLL);
    *((_DWORD *)v136 + 8) = v131;
    *((_QWORD *)v136 + 6) = 0;
    *((_QWORD *)v136 + 7) = 0;
    *((_QWORD *)v136 + 5) = 0;
    *(_QWORD *)v136 = 0;
    *((_QWORD *)v136 + 1) = 0;
    *((_QWORD *)v136 + 2) = v132;
    *v134 = (uint64_t *)v136;
    v137 = **(_QWORD **)(v98 + 24);
    v138 = (uint64_t *)v136;
    if (v137)
    {
      *(_QWORD *)(v98 + 24) = v137;
      v138 = *v134;
    }
    sub_19C2A2310(*(uint64_t **)(v98 + 32), v138);
    ++*(_QWORD *)(v98 + 40);
LABEL_176:
    v139 = (void **)(v136 + 40);
    if (v136 + 40 != (char *)&__dst)
    {
      if (v136[63] < 0)
      {
        if (v410 >= 0)
          v140 = &__dst;
        else
          v140 = (__int128 *)__dst;
        if (v410 >= 0)
          v141 = HIBYTE(v410);
        else
          v141 = *((_QWORD *)&__dst + 1);
        sub_19C2E54A8(v139, v140, v141);
      }
      else if (v410 < 0)
      {
        sub_19C2E53E4(v139, (void *)__dst, *((size_t *)&__dst + 1));
      }
      else
      {
        *(_OWORD *)v139 = __dst;
        *((_QWORD *)v136 + 7) = v410;
      }
    }
    v142 = *(char **)(v98 + 56);
    v143 = *(char **)(v98 + 64);
    v144 = v143 - v142;
    v145 = (v143 - v142) >> 3;
    if (v143 == v142)
      v146 = 0;
    else
      v146 = 102 * v145 - 1;
    v147 = *(_QWORD *)(v98 + 80);
    if (v146 == *(_QWORD *)(v98 + 88) + v147)
    {
      v99 = v147 >= 0x66;
      v148 = v147 - 102;
      if (!v99)
      {
        v158 = *(char **)(v98 + 72);
        v159 = *(char **)(v98 + 48);
        if (v145 < (unint64_t)((v158 - v159) >> 3))
        {
          if (v158 != v143)
          {
            *(_QWORD *)v143 = operator new(0xFF0uLL);
LABEL_276:
            v143 = (char *)(*(_QWORD *)(v98 + 64) + 8);
            *(_QWORD *)(v98 + 64) = v143;
LABEL_277:
            v142 = *(char **)(v98 + 56);
            goto LABEL_278;
          }
          v177 = operator new(0xFF0uLL);
          if (v142 != v159)
          {
            v178 = v142;
            goto LABEL_293;
          }
          if (v143 == v142)
            v202 = 1;
          else
            v202 = (v158 - v142) >> 2;
          if (v202 >> 61)
            goto LABEL_506;
          v203 = (char *)operator new(8 * v202);
          v204 = (v202 + 3) >> 2;
          v178 = &v203[8 * v204];
          v205 = &v203[8 * v202];
          v206 = v178;
          if (v143 != v142)
          {
            v206 = &v178[8 * v145];
            v207 = &v203[8 * v204];
            v208 = v142;
            if ((unint64_t)(v144 - 8) > 0x37)
            {
              v209 = 8 * v204;
              v207 = &v203[8 * v204];
              v208 = v142;
              if ((unint64_t)(v207 - v142) >= 0x20)
              {
                v210 = ((unint64_t)(v144 - 8) >> 3) + 1;
                v211 = 8 * (v210 & 0x3FFFFFFFFFFFFFFCLL);
                v207 = &v178[v211];
                v212 = (__int128 *)(v142 + 16);
                v213 = &v203[v209 + 16];
                v214 = v210 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v215 = *v212;
                  *((_OWORD *)v213 - 1) = *(v212 - 1);
                  *(_OWORD *)v213 = v215;
                  v212 += 2;
                  v213 += 32;
                  v214 -= 4;
                }
                while (v214);
                if (v210 == (v210 & 0x3FFFFFFFFFFFFFFCLL))
                {
                  *(_QWORD *)(v98 + 48) = v203;
                  *(_QWORD *)(v98 + 56) = v178;
                  *(_QWORD *)(v98 + 64) = v206;
                  *(_QWORD *)(v98 + 72) = v205;
LABEL_292:
                  operator delete(v142);
                  v178 = *(char **)(v98 + 56);
LABEL_293:
                  *((_QWORD *)v178 - 1) = v177;
                  v231 = *(char **)(v98 + 56);
                  v230 = *(char **)(v98 + 64);
                  *(_QWORD *)(v98 + 56) = v231 - 8;
                  v232 = *((_QWORD *)v231 - 1);
                  *(_QWORD *)(v98 + 56) = v231;
                  if (v230 != *(char **)(v98 + 72))
                  {
LABEL_294:
                    *(_QWORD *)v230 = v232;
                    goto LABEL_276;
                  }
                  v233 = (char *)*v383;
                  if (v231 > *v383)
                  {
                    v234 = (v231 - (_BYTE *)*v383) >> 3;
                    if (v234 >= -1)
                      v235 = v234 + 1;
                    else
                      v235 = v234 + 2;
                    v236 = v235 >> 1;
                    v237 = &v231[-8 * (v235 >> 1)];
                    v238 = v230 - v231;
                    if (v230 != v231)
                    {
                      memmove(&v231[-8 * (v235 >> 1)], v231, v230 - v231);
                      v231 = *(char **)(v98 + 56);
                    }
                    *(_QWORD *)(v98 + 56) = &v231[-8 * v236];
                    *(_QWORD *)(v98 + 64) = &v237[v238];
                    *(_QWORD *)&v237[v238] = v232;
                    goto LABEL_276;
                  }
                  if (v230 == v233)
                    v239 = 1;
                  else
                    v239 = (v230 - v233) >> 2;
                  if (v239 >> 61)
                    goto LABEL_506;
                  v240 = operator new(8 * v239);
                  v241 = v239 >> 2;
                  v242 = &v240[8 * (v239 >> 2)];
                  v243 = v230 - v231;
                  v173 = v230 == v231;
                  v230 = v242;
                  if (!v173)
                  {
                    v230 = &v242[v243 & 0xFFFFFFFFFFFFFFF8];
                    v244 = v243 - 8;
                    if (v244 < 0x38)
                    {
                      v245 = &v240[8 * (v239 >> 2)];
                      goto LABEL_314;
                    }
                    v246 = 8 * v241;
                    v247 = &v240[8 * v241] - v231;
                    v245 = &v240[8 * (v239 >> 2)];
                    if (v247 < 0x20)
                    {
                      do
                      {
LABEL_314:
                        v254 = *(_QWORD *)v231;
                        v231 += 8;
                        *(_QWORD *)v245 = v254;
                        v245 += 8;
                      }
                      while (v245 != v230);
                      goto LABEL_315;
                    }
                    v248 = (v244 >> 3) + 1;
                    v249 = 8 * (v248 & 0x3FFFFFFFFFFFFFFCLL);
                    v245 = &v242[v249];
                    v250 = (__int128 *)(v231 + 16);
                    v251 = &v240[v246 + 16];
                    v252 = v248 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      v253 = *v250;
                      *(v251 - 1) = *(v250 - 1);
                      *v251 = v253;
                      v250 += 2;
                      v251 += 2;
                      v252 -= 4;
                    }
                    while (v252);
                    if (v248 != (v248 & 0x3FFFFFFFFFFFFFFCLL))
                    {
                      v231 += v249;
                      goto LABEL_314;
                    }
                  }
LABEL_315:
                  *(_QWORD *)(v98 + 48) = v240;
                  *(_QWORD *)(v98 + 56) = v242;
                  *(_QWORD *)(v98 + 64) = v230;
                  *(_QWORD *)(v98 + 72) = &v240[8 * v239];
                  if (v233)
                  {
                    operator delete(v233);
                    v230 = *(char **)(v98 + 64);
                  }
                  goto LABEL_294;
                }
                v208 = &v142[v211];
              }
            }
            do
            {
              v229 = *(_QWORD *)v208;
              v208 += 8;
              *(_QWORD *)v207 = v229;
              v207 += 8;
            }
            while (v207 != v206);
          }
          *(_QWORD *)(v98 + 48) = v203;
          *(_QWORD *)(v98 + 56) = v178;
          *(_QWORD *)(v98 + 64) = v206;
          *(_QWORD *)(v98 + 72) = v205;
          if (!v142)
            goto LABEL_293;
          goto LABEL_292;
        }
        if (v158 == v159)
          v160 = 1;
        else
          v160 = (v158 - v159) >> 2;
        if (v160 >> 61)
          goto LABEL_506;
        v161 = (char *)operator new(8 * v160);
        v162 = operator new(0xFF0uLL);
        v163 = &v161[8 * v145];
        v164 = &v161[8 * v160];
        if (v145 == v160)
        {
          v165 = v162;
          if (v144 < 1)
          {
            if (v143 == v142)
              v179 = 1;
            else
              v179 = v144 >> 2;
            if (v179 >> 61)
              sub_19C2A143C();
            v163 = (char *)operator new(8 * v179);
            v168 = &v163[8 * v179];
            operator delete(v161);
            v166 = *(char **)(v98 + 56);
            v143 = *(char **)(v98 + 64);
            v161 = v163;
          }
          else
          {
            v166 = v142;
            v167 = v145 + 2;
            if (v145 >= -1)
              v167 = v145 + 1;
            v163 -= 8 * (v167 >> 1);
            v168 = v164;
          }
          v162 = v165;
        }
        else
        {
          v166 = v142;
          v168 = &v161[8 * v160];
        }
        *(_QWORD *)v163 = v162;
        v180 = v163 + 8;
        if (v143 == v166)
        {
LABEL_231:
          v181 = *(void **)(v98 + 48);
          *(_QWORD *)(v98 + 48) = v161;
          *(_QWORD *)(v98 + 56) = v163;
          v143 = v180;
          *(_QWORD *)(v98 + 64) = v180;
          *(_QWORD *)(v98 + 72) = v168;
          if (v181)
          {
            operator delete(v181);
            v143 = *(char **)(v98 + 64);
          }
          goto LABEL_277;
        }
        while (v163 != v161)
        {
          v182 = v163;
          v183 = v180;
LABEL_234:
          v184 = *((_QWORD *)v143 - 1);
          v143 -= 8;
          *((_QWORD *)v182 - 1) = v184;
          v163 = v182 - 8;
          v180 = v183;
          if (v143 == *(char **)(v98 + 56))
            goto LABEL_231;
        }
        if (v180 < v168)
        {
          v185 = (v168 - v180) >> 3;
          if (v185 >= -1)
            v186 = v185 + 1;
          else
            v186 = v185 + 2;
          v183 = &v180[8 * (v186 >> 1)];
          v182 = &v163[8 * (v186 >> 1)];
          if (v180 == v163)
          {
            v161 = v180;
          }
          else
          {
            memmove(&v163[8 * (v186 >> 1)], v163, v180 - v163);
            v161 = v163;
          }
          goto LABEL_234;
        }
        if (v168 == v163)
          v187 = 1;
        else
          v187 = (v168 - v163) >> 2;
        if (v187 >> 61)
          sub_19C2A143C();
        v188 = (char *)operator new(8 * v187);
        v161 = v188;
        v189 = (v187 + 3) >> 2;
        v182 = &v188[8 * v189];
        v183 = v182;
        v190 = v180 - v163;
        if (v180 != v163)
        {
          v183 = &v182[v190 & 0xFFFFFFFFFFFFFFF8];
          v191 = v190 - 8;
          v192 = &v188[8 * v189];
          v193 = v163;
          if (v191 >= 0x38)
          {
            v194 = 8 * v189;
            v192 = &v188[8 * v189];
            v193 = v163;
            if ((unint64_t)(v192 - v163) >= 0x20)
            {
              v195 = (v191 >> 3) + 1;
              v196 = 8 * (v195 & 0x3FFFFFFFFFFFFFFCLL);
              v192 = &v182[v196];
              v197 = (__int128 *)(v163 + 16);
              v198 = &v188[v194 + 16];
              v199 = v195 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v200 = *v197;
                *((_OWORD *)v198 - 1) = *(v197 - 1);
                *(_OWORD *)v198 = v200;
                v197 += 2;
                v198 += 32;
                v199 -= 4;
              }
              while (v199);
              if (v195 == (v195 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_254;
              v193 = &v163[v196];
            }
          }
          do
          {
            v201 = *(_QWORD *)v193;
            v193 += 8;
            *(_QWORD *)v192 = v201;
            v192 += 8;
          }
          while (v192 != v183);
        }
LABEL_254:
        v168 = &v188[8 * v187];
        operator delete(v163);
        goto LABEL_234;
      }
      *(_QWORD *)(v98 + 80) = v148;
      v150 = v142 + 8;
      v149 = *(_QWORD *)v142;
      *(_QWORD *)(v98 + 56) = v142 + 8;
      if (v143 != *(char **)(v98 + 72))
      {
LABEL_275:
        *(_QWORD *)v143 = v149;
        goto LABEL_276;
      }
      v151 = (char *)*v383;
      if (v150 > *v383)
      {
        v152 = (v150 - (_BYTE *)*v383) >> 3;
        if (v152 >= -1)
          v153 = v152 + 1;
        else
          v153 = v152 + 2;
        v154 = v153 >> 1;
        v155 = &v150[-8 * (v153 >> 1)];
        v156 = v143 - v150;
        if (v143 != v150)
        {
          memmove(&v150[-8 * (v153 >> 1)], v150, v143 - v150);
          v143 = *(char **)(v98 + 56);
        }
        v157 = &v143[-8 * v154];
        v143 = &v155[v156];
        *(_QWORD *)(v98 + 56) = v157;
        *(_QWORD *)(v98 + 64) = &v155[v156];
        goto LABEL_275;
      }
      if (v143 == v151)
        v169 = 1;
      else
        v169 = (v143 - v151) >> 2;
      if (v169 >> 61)
LABEL_506:
        sub_19C2A143C();
      v170 = operator new(8 * v169);
      v171 = v169 >> 2;
      v172 = &v170[8 * (v169 >> 2)];
      v174 = v143 - v150;
      v173 = v143 == v150;
      v143 = v172;
      if (!v173)
      {
        v143 = &v172[v174 & 0xFFFFFFFFFFFFFFF8];
        v175 = v174 - 8;
        if (v175 < 0x38)
        {
          v176 = &v170[8 * (v169 >> 2)];
          goto LABEL_272;
        }
        v216 = 8 * v171;
        v217 = &v170[8 * v171] - v150;
        v176 = &v170[8 * (v169 >> 2)];
        if (v217 < 0x20)
        {
          do
          {
LABEL_272:
            v224 = *(_QWORD *)v150;
            v150 += 8;
            *(_QWORD *)v176 = v224;
            v176 += 8;
          }
          while (v176 != v143);
          goto LABEL_273;
        }
        v218 = (v175 >> 3) + 1;
        v219 = 8 * (v218 & 0x3FFFFFFFFFFFFFFCLL);
        v176 = &v172[v219];
        v220 = (__int128 *)(v142 + 24);
        v221 = &v170[v216 + 16];
        v222 = v218 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v223 = *v220;
          *(v221 - 1) = *(v220 - 1);
          *v221 = v223;
          v220 += 2;
          v221 += 2;
          v222 -= 4;
        }
        while (v222);
        if (v218 != (v218 & 0x3FFFFFFFFFFFFFFCLL))
        {
          v150 += v219;
          goto LABEL_272;
        }
      }
LABEL_273:
      *(_QWORD *)(v98 + 48) = v170;
      *(_QWORD *)(v98 + 56) = v172;
      *(_QWORD *)(v98 + 64) = v143;
      *(_QWORD *)(v98 + 72) = &v170[8 * v169];
      if (v151)
      {
        operator delete(v151);
        v143 = *(char **)(v98 + 64);
      }
      goto LABEL_275;
    }
LABEL_278:
    if (v143 == v142)
    {
      v226 = 0;
      if (SHIBYTE(v410) < 0)
      {
LABEL_282:
        sub_19C2B5238(valuePtr, (void *)__dst, *((unint64_t *)&__dst + 1));
        goto LABEL_283;
      }
    }
    else
    {
      v225 = *(_QWORD *)(v98 + 88) + *(_QWORD *)(v98 + 80);
      v226 = *(_QWORD *)&v142[8 * (v225 / 0x66)] + 40 * (v225 % 0x66);
      if (SHIBYTE(v410) < 0)
        goto LABEL_282;
    }
    *(_OWORD *)valuePtr = __dst;
    *(_QWORD *)&valuePtr[16] = v410;
LABEL_283:
    if ((valuePtr[23] & 0x80000000) != 0)
    {
      v97 = v400;
      sub_19C2B5238((_BYTE *)v226, *(void **)valuePtr, *(unint64_t *)&valuePtr[8]);
      v228 = valuePtr[23];
      *(_DWORD *)(v226 + 24) = v131;
      *(double *)(v226 + 32) = v123;
      if (v228 < 0)
        operator delete(*(void **)valuePtr);
    }
    else
    {
      v227 = *(_OWORD *)valuePtr;
      *(_QWORD *)(v226 + 16) = *(_QWORD *)&valuePtr[16];
      *(_OWORD *)v226 = v227;
      *(_DWORD *)(v226 + 24) = v131;
      *(double *)(v226 + 32) = v123;
      v97 = v400;
    }
    ++*(_QWORD *)(v98 + 88);
    v119 = v389;
    v118 = v391;
    v120 = v398;
    v121 = v392;
    if (SHIBYTE(v410) < 0)
      operator delete((void *)__dst);
LABEL_151:
    ++v117;
  }
  while (v117 != v120);
  v255 = *(_QWORD *)(v98 + 80);
  v256 = *(_QWORD *)(v98 + 56);
  v257 = (uint64_t *)(v256 + 8 * (v255 / 0x66));
  if (*(_QWORD *)(v98 + 64) == v256)
  {
    v258 = 0;
    v261 = 0;
    v260 = (uint64_t *)(v256 + 8 * ((*(_QWORD *)(v98 + 88) + v255) / 0x66));
LABEL_323:
    v263 = 0;
    goto LABEL_324;
  }
  v258 = *(_QWORD *)(v256 + 8 * (v255 / 0x66)) + 40 * (v255 % 0x66);
  v259 = *(_QWORD *)(v98 + 88) + v255;
  v260 = (uint64_t *)(v256 + 8 * (v259 / 0x66));
  v261 = *v260 + 40 * (v259 % 0x66);
  if (v261 == v258)
    goto LABEL_323;
  v262 = 102 * (v260 - v257)
       - 0x3333333333333333 * ((uint64_t)(40 * (v259 % 0x66)) >> 3)
       + 0x3333333333333333 * ((v258 - *v257) >> 3);
  if (!v262)
    goto LABEL_323;
  v263 = 63 - __clz(v262);
LABEL_324:
  sub_19C36CAB4(v257, v258, v260, v261, 2 * v263, 1);
  operator delete(v119);
  operator delete(v118);
  operator delete(v394);
  v264 = *v395;
  *v395 = v98;
  if (v264)
  {
    sub_19C33275C(*(_QWORD **)(v264 + 104));
    sub_19C332794(v264 + 48);
    sub_19C332918(*(char **)(v264 + 32));
    sub_19C2EAC08(*(char **)(v264 + 8));
    MEMORY[0x1A1AD355C](v264, 0x10A0C404AAAD15CLL);
  }
  close(v97);
LABEL_327:
  if (theDict)
    CFRelease(theDict);
  if (!*(_QWORD *)v396)
  {
    v265 = operator new();
    *(_QWORD *)v265 = &off_1E3D35F38;
    *(_QWORD *)(v265 + 32) = 0;
    *(_QWORD *)(v265 + 40) = 0;
    *(_QWORD *)(v265 + 24) = 0;
    *(_QWORD *)(v265 + 16) = v265 + 24;
    *(_QWORD *)(v265 + 80) = 0;
    *(_QWORD *)(v265 + 88) = 0;
    *(_QWORD *)(v265 + 48) = 0;
    *(_QWORD *)(v265 + 56) = 0;
    *(_DWORD *)(v265 + 64) = 0;
    *(_QWORD *)(v265 + 72) = v265 + 80;
    *(_DWORD *)(v265 + 96) = v385;
    v266 = operator new(1uLL);
    *v266 = 0;
    *(_QWORD *)(v265 + 48) = v266 + 1;
    *(_QWORD *)(v265 + 56) = v266 + 1;
    *(_QWORD *)(v265 + 40) = v266;
    v267 = (char *)malloc_type_calloc(1uLL, 0x83CuLL, 0x105004056F6A631uLL);
    if (v267)
    {
      *((_OWORD *)v267 + 129) = 0u;
      *((_DWORD *)v267 + 520) = 1;
      *(_QWORD *)(v267 + 2084) = 0;
      *(_QWORD *)(v267 + 2092) = 64;
    }
    *(_QWORD *)(v265 + 8) = v267;
    v268 = *v396;
    *v396 = (int32x2_t)v265;
    if (v268)
      (*(void (**)(int32x2_t))(**(_QWORD **)&v268 + 8))(v268);
  }
  if (!*v395)
  {
    v269 = operator new();
    *(_QWORD *)(v269 + 8) = 0;
    *(_QWORD *)v269 = v269 + 8;
    *(_QWORD *)(v269 + 40) = 0;
    *(_QWORD *)(v269 + 32) = 0;
    *(_QWORD *)(v269 + 16) = 0;
    *(_QWORD *)(v269 + 24) = v269 + 32;
    *(_OWORD *)(v269 + 48) = 0u;
    *(_OWORD *)(v269 + 64) = 0u;
    *(_OWORD *)(v269 + 80) = 0u;
    *(_QWORD *)(v269 + 112) = 0;
    *(_QWORD *)(v269 + 104) = 0;
    *(_QWORD *)(v269 + 96) = v269 + 104;
    *(_DWORD *)(v269 + 120) = v385;
    v270 = *v395;
    *v395 = v269;
    if (v270)
    {
      sub_19C33275C(*(_QWORD **)(v270 + 104));
      sub_19C332794(v270 + 48);
      sub_19C332918(*(char **)(v270 + 32));
      sub_19C2EAC08(*(char **)(v270 + 8));
      MEMORY[0x1A1AD355C](v270, 0x10A0C404AAAD15CLL);
    }
  }
  v271 = *v396;
  memset(&v414, 0, 24);
  v272 = *(_QWORD **)(*(_QWORD *)&v271 + 16);
  v273 = (_QWORD *)(*(_QWORD *)&v271 + 24);
  if (v272 != (_QWORD *)(*(_QWORD *)&v271 + 24))
  {
    v274 = 0;
    v275 = 0;
    st_ino = 0;
    while (st_ino < v275)
    {
      *(_DWORD *)st_ino = *((_DWORD *)v272 + 7);
      st_ino += 4;
LABEL_359:
      v414.st_ino = (__darwin_ino64_t)st_ino;
      v286 = (_QWORD *)v272[1];
      if (v286)
      {
        do
        {
          v287 = v286;
          v286 = (_QWORD *)*v286;
        }
        while (v286);
      }
      else
      {
        do
        {
          v287 = (_QWORD *)v272[2];
          v173 = *v287 == (_QWORD)v272;
          v272 = v287;
        }
        while (!v173);
      }
      v272 = v287;
      if (v287 == v273)
        goto LABEL_376;
    }
    v277 = (st_ino - v274) >> 2;
    v278 = v277 + 1;
    if ((unint64_t)(v277 + 1) >> 62)
      sub_19C2A18E8();
    if ((v275 - v274) >> 1 > v278)
      v278 = (v275 - v274) >> 1;
    if ((unint64_t)(v275 - v274) >= 0x7FFFFFFFFFFFFFFCLL)
      v279 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v279 = v278;
    if (v279)
    {
      if (v279 >> 62)
        sub_19C2A143C();
      v280 = operator new(4 * v279);
    }
    else
    {
      v280 = 0;
    }
    v281 = &v280[4 * v277];
    *v281 = *((_DWORD *)v272 + 7);
    v282 = (char *)(v281 + 1);
    if (st_ino != v274)
    {
      v283 = st_ino - 4 - v274;
      if (v283 >= 0xBC)
      {
        if (&v280[st_ino - v274 - 4 - (v283 & 0xFFFFFFFFFFFFFFFCLL)] > &v280[st_ino - v274 - 4])
        {
          v284 = st_ino;
        }
        else if (&st_ino[-(v283 & 0xFFFFFFFFFFFFFFFCLL) - 4] > st_ino - 4)
        {
          v284 = st_ino;
        }
        else if ((unint64_t)(v274 - v280) >= 0x20)
        {
          v288 = (v283 >> 2) + 1;
          v284 = &st_ino[-4 * (v288 & 0x7FFFFFFFFFFFFFF8)];
          v289 = &v280[4 * v277 - 16];
          v290 = (__int128 *)(st_ino - 16);
          v291 = v288 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v292 = *v290;
            *(v289 - 1) = *(v290 - 1);
            *v289 = v292;
            v289 -= 2;
            v290 -= 2;
            v291 -= 8;
          }
          while (v291);
          v281 -= v288 & 0x7FFFFFFFFFFFFFF8;
          if (v288 == (v288 & 0x7FFFFFFFFFFFFFF8))
            goto LABEL_356;
        }
        else
        {
          v284 = st_ino;
        }
      }
      else
      {
        v284 = st_ino;
      }
      do
      {
        v285 = *((_DWORD *)v284 - 1);
        v284 -= 4;
        *--v281 = v285;
      }
      while (v284 != v274);
    }
LABEL_356:
    v275 = &v280[4 * v279];
    *(_QWORD *)&v414.st_dev = v281;
    *(_QWORD *)&v414.st_uid = v275;
    if (v274)
      operator delete(v274);
    v274 = v281;
    st_ino = v282;
    goto LABEL_359;
  }
  st_ino = 0;
LABEL_376:
  v293 = *v395;
  v412 = 0;
  __sz = 0;
  v411 = 0;
  v294 = *(_QWORD **)(v293 + 24);
  v295 = (_QWORD *)(v293 + 32);
  if (v294 != (_QWORD *)(v293 + 32))
  {
    v296 = 0;
    v297 = 0;
    v298 = 0;
    v299 = 0;
    while (1)
    {
      if ((unint64_t)v297 < v296)
      {
        *(_DWORD *)v297 = *((_DWORD *)v294 + 8);
        v297 += 4;
        v300 = (_QWORD *)v294[1];
        if (v300)
          goto LABEL_399;
        goto LABEL_401;
      }
      v301 = (v297 - v299) >> 2;
      v302 = v301 + 1;
      if ((unint64_t)(v301 + 1) >> 62)
      {
        v411 = (uint64_t)v298;
        v412 = v297;
        __sz = v296;
        sub_19C2A18E8();
      }
      if ((uint64_t)(v296 - (_QWORD)v299) >> 1 > v302)
        v302 = (uint64_t)(v296 - (_QWORD)v299) >> 1;
      if (v296 - (unint64_t)v299 >= 0x7FFFFFFFFFFFFFFCLL)
        v303 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v303 = v302;
      if (v303)
      {
        if (v303 >> 62)
        {
          v411 = (uint64_t)v298;
          __sz = v296;
          sub_19C2A143C();
        }
        v304 = operator new(4 * v303);
      }
      else
      {
        v304 = 0;
      }
      v298 = &v304[4 * v301];
      *(_DWORD *)v298 = *((_DWORD *)v294 + 8);
      v305 = v298 + 4;
      if (v297 != v299)
      {
        v306 = v297 - 4 - v299;
        if (v306 < 0xBC)
        {
          v307 = v297;
          goto LABEL_395;
        }
        if (&v304[v297 - v299 - 4 - (v306 & 0xFFFFFFFFFFFFFFFCLL)] > &v304[v297 - v299 - 4])
        {
          v307 = v297;
          do
          {
LABEL_395:
            v308 = *((_DWORD *)v307 - 1);
            v307 -= 4;
            *((_DWORD *)v298 - 1) = v308;
            v298 -= 4;
          }
          while (v307 != v299);
          goto LABEL_396;
        }
        if (&v297[-(v306 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v297 - 4)
        {
          v307 = v297;
          goto LABEL_395;
        }
        if ((unint64_t)(v299 - v304) < 0x20)
        {
          v307 = v297;
          goto LABEL_395;
        }
        v310 = (v306 >> 2) + 1;
        v307 = &v297[-4 * (v310 & 0x7FFFFFFFFFFFFFF8)];
        v311 = &v304[4 * v301 - 16];
        v312 = v297 - 16;
        v313 = v310 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v314 = *(_OWORD *)v312;
          *(v311 - 1) = *((_OWORD *)v312 - 1);
          *v311 = v314;
          v311 -= 2;
          v312 -= 32;
          v313 -= 8;
        }
        while (v313);
        v298 -= 4 * (v310 & 0x7FFFFFFFFFFFFFF8);
        if (v310 != (v310 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_395;
      }
LABEL_396:
      v296 = (size_t)&v304[4 * v303];
      if (v299)
        operator delete(v299);
      v299 = v298;
      v297 = v305;
      v300 = (_QWORD *)v294[1];
      if (v300)
      {
        do
        {
LABEL_399:
          v309 = v300;
          v300 = (_QWORD *)*v300;
        }
        while (v300);
        goto LABEL_378;
      }
      do
      {
LABEL_401:
        v309 = (_QWORD *)v294[2];
        v173 = *v309 == (_QWORD)v294;
        v294 = v309;
      }
      while (!v173);
LABEL_378:
      v294 = v309;
      if (v309 == v295)
      {
        v411 = (uint64_t)v298;
        v412 = v297;
        __sz = v296;
        st_ino = (char *)v414.st_ino;
        goto LABEL_416;
      }
    }
  }
  v297 = 0;
  v298 = 0;
LABEL_416:
  sub_19C308C6C((char **)&v414, st_ino, v298, v297, (v297 - v298) >> 2);
  std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
  v322 = *(unsigned __int32 **)&v414.st_dev;
  v321 = v414.st_ino;
  v323 = a1[9].u32[0];
  if (v414.st_ino == *(_QWORD *)&v414.st_dev)
  {
    v322 = (unsigned __int32 *)v414.st_ino;
  }
  else
  {
    v324 = a1[9].u32[1];
    if (v323 > v324)
    {
      v323 = **(_DWORD **)&v414.st_dev;
      a1[9].i32[0] = **(_DWORD **)&v414.st_dev;
      v324 = *(_DWORD *)(v321 - 4);
      a1[9].i32[1] = v324;
    }
    if (v324 < *(_DWORD *)(v321 - 4))
    {
      if (qword_1EDB97100 != -1)
        dispatch_once(&qword_1EDB97100, &unk_1E3D3BED0);
      sub_19C3E8FF4((int *)qword_1EDB970F8, v315, "Inconsistency in dynamic word id ranges: %d, expected max (%d)", v316, v317, v318, v319, v320, *(_DWORD *)(v414.st_ino - 4));
      v322 = *(unsigned __int32 **)&v414.st_dev;
      v321 = v414.st_ino;
      a1[9].i32[1] = *(_DWORD *)(v414.st_ino - 4);
      v323 = a1[9].u32[0];
    }
    if ((unsigned __int32 *)v321 != v322 && v323 > *v322)
    {
      if (qword_1EDB97100 != -1)
        dispatch_once(&qword_1EDB97100, &unk_1E3D3BED0);
      sub_19C3E8FF4((int *)qword_1EDB970F8, v315, "Inconsistency in dynamic word id ranges: %d, expected min (%d)", v316, v317, v318, v319, v320, **(_DWORD **)&v414.st_dev);
      v322 = *(unsigned __int32 **)&v414.st_dev;
      v323 = **(_DWORD **)&v414.st_dev;
      a1[9].i32[0] = **(_DWORD **)&v414.st_dev;
    }
  }
  if (v323 < a1[8].i32[0] || (v325 = a1[9].u32[1], v325 > a1[8].i32[1]))
  {
    if (qword_1EDB97100 != -1)
      dispatch_once(&qword_1EDB97100, &unk_1E3D3BED0);
    sub_19C3E8FF4((int *)qword_1EDB970F8, v315, "Unexpected dynamic word id ranges: (dynamicIDRanges [%d, %d], dynamicIDLimits [%d, %d])", v316, v317, v318, v319, v320, a1[9].i32[0]);
    v326 = *v396;
    v327 = *(_BYTE **)(*(_QWORD *)v396 + 40);
    *(_QWORD *)(*(_QWORD *)&v326 + 48) = v327;
    v328 = *(_QWORD *)(*(_QWORD *)&v326 + 56);
    if ((unint64_t)v327 >= v328)
    {
      v330 = v328 - (_QWORD)v327;
      v331 = 2 * v330;
      if (2 * v330 <= 1)
        v331 = 1;
      if (v330 >= 0x3FFFFFFFFFFFFFFFLL)
        v332 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v332 = v331;
      v333 = operator new(v332);
      *v333 = 0;
      v329 = v333 + 1;
      *(_QWORD *)(*(_QWORD *)&v326 + 40) = v333;
      *(_QWORD *)(*(_QWORD *)&v326 + 48) = v333 + 1;
      *(_QWORD *)(*(_QWORD *)&v326 + 56) = &v333[v332];
      if (v327)
        operator delete(v327);
    }
    else
    {
      *v327 = 0;
      v329 = v327 + 1;
    }
    v334 = *(_QWORD **)(*(_QWORD *)&v326 + 24);
    *(_QWORD *)(*(_QWORD *)&v326 + 48) = v329;
    sub_19C33275C(v334);
    *(_QWORD *)(*(_QWORD *)&v326 + 16) = *(_QWORD *)&v326 + 24;
    *(_QWORD *)(*(_QWORD *)&v326 + 24) = 0;
    *(_QWORD *)(*(_QWORD *)&v326 + 32) = 0;
    *(_DWORD *)(*(_QWORD *)&v326 + 64) = 0;
    v335 = *(_QWORD *)(*(_QWORD *)&v326 + 8);
    if (v335)
    {
      v336 = *(_DWORD *)(v335 + 2080) - 1;
      *(_DWORD *)(v335 + 2080) = v336;
      if (!v336)
      {
        v337 = *(void **)(v335 + 2084);
        if (v337)
        {
          if (*(_DWORD *)(v335 + 2096))
            munmap(v337, *(_QWORD *)(v335 + 2072));
        }
        else
        {
          sub_19C400F88(v335);
        }
        free((void *)v335);
      }
    }
    v347 = (char *)malloc_type_calloc(1uLL, 0x83CuLL, 0x105004056F6A631uLL);
    if (v347)
    {
      *((_OWORD *)v347 + 129) = 0u;
      *((_DWORD *)v347 + 520) = 1;
      *(_QWORD *)(v347 + 2084) = 0;
      *(_QWORD *)(v347 + 2092) = 64;
    }
    *(_QWORD *)(*(_QWORD *)&v326 + 8) = v347;
    v348 = *v395;
    v349 = (char **)(*v395 + 32);
    sub_19C332918(*v349);
    *(_QWORD *)(v348 + 24) = v349;
    *(_QWORD *)(v348 + 40) = 0;
    *v349 = 0;
    sub_19C2EAC08(*(char **)(v348 + 8));
    *(_QWORD *)v348 = v348 + 8;
    *(_QWORD *)(v348 + 16) = 0;
    *(_QWORD *)(v348 + 8) = 0;
    v350 = *(void ***)(v348 + 56);
    v351 = *(void ***)(v348 + 64);
    if (v351 == v350)
    {
      v352 = (_QWORD *)(v348 + 88);
      v351 = *(void ***)(v348 + 56);
    }
    else
    {
      v352 = (_QWORD *)(v348 + 88);
      v353 = *(_QWORD *)(v348 + 80);
      v354 = &v350[v353 / 0x66];
      v355 = (unint64_t)*v354;
      v356 = (unint64_t)*v354 + 40 * (v353 % 0x66);
      v357 = (unint64_t)v350[(*(_QWORD *)(v348 + 88) + v353) / 0x66]
           + 40 * ((*(_QWORD *)(v348 + 88) + v353) % 0x66);
      if (v356 != v357)
      {
        do
        {
          if (*(char *)(v356 + 23) < 0)
          {
            operator delete(*(void **)v356);
            v355 = (unint64_t)*v354;
          }
          v356 += 40;
          if (v356 - v355 == 4080)
          {
            v358 = (unint64_t)v354[1];
            ++v354;
            v355 = v358;
            v356 = v358;
          }
        }
        while (v356 != v357);
        v350 = *(void ***)(v348 + 56);
        v351 = *(void ***)(v348 + 64);
      }
    }
    *v352 = 0;
    v359 = (char *)v351 - (char *)v350;
    if ((unint64_t)((char *)v351 - (char *)v350) >= 0x11)
    {
      do
      {
        operator delete(*v350);
        v360 = *(_QWORD *)(v348 + 64);
        v350 = (void **)(*(_QWORD *)(v348 + 56) + 8);
        *(_QWORD *)(v348 + 56) = v350;
        v359 = v360 - (_QWORD)v350;
      }
      while (v359 > 0x10);
    }
    if (v359 >> 3 == 1)
    {
      v361 = 51;
    }
    else
    {
      if (v359 >> 3 != 2)
      {
LABEL_479:
        a1[9] = vrev64_s32(a1[8]);
        goto LABEL_480;
      }
      v361 = 102;
    }
    *(_QWORD *)(v348 + 80) = v361;
    goto LABEL_479;
  }
  v338 = v325 + 1;
  v339 = v414.st_ino;
  if ((unsigned __int32 *)v414.st_ino == v322)
  {
    v340 = v325 + 1;
  }
  else
  {
    do
    {
      v343 = *(_DWORD *)(v339 - 4);
      v339 -= 4;
      v340 = v343;
      v344 = v343 + 1;
      if (v343 + 1 < v338)
      {
        v345 = (_DWORD *)a1[10];
        do
        {
          v346 = operator new(0x10uLL);
          *(_QWORD *)v346 = v345;
          v346[2] = v344;
          a1[10] = (int32x2_t)v346;
          ++v344;
          v345 = v346;
        }
        while (v338 != v344);
      }
      v338 = v340;
    }
    while ((unsigned __int32 *)v339 != v322);
  }
  if (v323 < v340)
  {
    v341 = (_DWORD *)a1[10];
    do
    {
      v342 = operator new(0x10uLL);
      *(_QWORD *)v342 = v341;
      v342[2] = v323;
      a1[10] = (int32x2_t)v342;
      ++v323;
      v341 = v342;
    }
    while (v340 != v323);
  }
LABEL_480:
  if (v298)
  {
    v412 = v298;
    operator delete(v298);
  }
  if (*(_QWORD *)&v414.st_dev)
  {
    v414.st_ino = *(_QWORD *)&v414.st_dev;
    operator delete(*(void **)&v414.st_dev);
  }
  return a1;
}

#error "19C335534: call analysis failed (funcsize=114)"

uint64_t *sub_19C335644(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    sub_19C33275C(*(_QWORD **)(v2 + 104));
    sub_19C332794(v2 + 48);
    sub_19C332918(*(char **)(v2 + 32));
    sub_19C2EAC08(*(char **)(v2 + 8));
    MEMORY[0x1A1AD355C](v2, 0x10A0C404AAAD15CLL);
  }
  return a1;
}

language_modeling::v1::InlineCompletion *language_modeling::v1::InlineCompletion::InlineCompletion(language_modeling::v1::InlineCompletion *this, const language_modeling::v1::InlineCompletion *a2)
{
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  __int128 v6;

  v3 = *(_QWORD *)a2;
  v4 = operator new();
  sub_19C29769C((char *)v4, (__int128 *)v3);
  *(_QWORD *)(v4 + 256) = *(_QWORD *)(v3 + 256);
  v5 = (_BYTE *)(v4 + 264);
  if (*(char *)(v3 + 287) < 0)
  {
    sub_19C2B5238(v5, *(void **)(v3 + 264), *(_QWORD *)(v3 + 272));
  }
  else
  {
    v6 = *(_OWORD *)(v3 + 264);
    *(_QWORD *)(v4 + 280) = *(_QWORD *)(v3 + 280);
    *(_OWORD *)v5 = v6;
  }
  *(_QWORD *)this = v4;
  return this;
}

void sub_19C335730(void *a1)
{
  uint64_t v1;

  sub_19C296378(v1);
  MEMORY[0x1A1AD355C](v1, 0x1032C40D90104AELL);
  sub_19C2CDAC8(a1);
}

uint64_t *language_modeling::v1::InlineCompletion::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *a2;
  v4 = operator new();
  sub_19C29769C((char *)v4, (__int128 *)v3);
  *(_QWORD *)(v4 + 256) = *(_QWORD *)(v3 + 256);
  v5 = (_BYTE *)(v4 + 264);
  if (*(char *)(v3 + 287) < 0)
  {
    sub_19C2B5238(v5, *(void **)(v3 + 264), *(_QWORD *)(v3 + 272));
  }
  else
  {
    v6 = *(_OWORD *)(v3 + 264);
    *(_QWORD *)(v4 + 280) = *(_QWORD *)(v3 + 280);
    *(_OWORD *)v5 = v6;
  }
  v7 = *a1;
  *a1 = v4;
  if (v7)
  {
    if (*(char *)(v7 + 287) < 0)
      operator delete(*(void **)(v7 + 264));
    v8 = sub_19C296378(v7);
    MEMORY[0x1A1AD355C](v8, 0x1032C40D90104AELL);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a2;
  *a2 = 0;
  v4 = *a1;
  *a1 = v3;
  if (v4)
  {
    if (*(char *)(v4 + 287) < 0)
      operator delete(*(void **)(v4 + 264));
    v5 = sub_19C296378(v4);
    MEMORY[0x1A1AD355C](v5, 0x1032C40D90104AELL);
  }
  return a1;
}

void sub_19C335828(void *a1)
{
  uint64_t v1;

  sub_19C296378(v1);
  MEMORY[0x1A1AD355C](v1, 0x1032C40D90104AELL);
  sub_19C2CDAC8(a1);
}

_QWORD *language_modeling::v1::InlineCompletion::InlineCompletion(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *a2 = 0;
  *result = v2;
  return result;
}

{
  uint64_t v2;

  v2 = *a2;
  *a2 = 0;
  *result = v2;
  return result;
}

{
  uint64_t v2;

  v2 = *a2;
  *a2 = 0;
  *result = v2;
  return result;
}

{
  uint64_t v2;

  v2 = *a2;
  *a2 = 0;
  *result = v2;
  return result;
}

void language_modeling::v1::InlineCompletion::~InlineCompletion(language_modeling::v1::InlineCompletion *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v1)
  {
    if (*(char *)(v1 + 287) < 0)
      operator delete(*(void **)(v1 + 264));
    v2 = sub_19C296378(v1);
    MEMORY[0x1A1AD355C](v2, 0x1032C40D90104AELL);
  }
}

{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v1)
  {
    if (*(char *)(v1 + 287) < 0)
      operator delete(*(void **)(v1 + 264));
    v2 = sub_19C296378(v1);
    MEMORY[0x1A1AD355C](v2, 0x1032C40D90104AELL);
  }
}

__int128 **language_modeling::v1::InlineCompletion::string@<X0>(__int128 **this@<X0>, uint64_t a2@<X8>)
{
  __int128 *v2;
  __int128 v3;

  v2 = *this;
  if (*((char *)*this + 23) < 0)
    return (__int128 **)sub_19C2B5238((_BYTE *)a2, *(void **)v2, *((_QWORD *)v2 + 1));
  v3 = *v2;
  *(_QWORD *)(a2 + 16) = *((_QWORD *)v2 + 2);
  *(_OWORD *)a2 = v3;
  return this;
}

uint64_t language_modeling::v1::InlineCompletion::probability(language_modeling::v1::InlineCompletion *this)
{
  return *(_QWORD *)(*(_QWORD *)this + 48);
}

uint64_t *language_modeling::v1::InlineCompletion::prefix@<X0>(uint64_t *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __int128 v3;

  v2 = *this;
  if (*(char *)(*this + 231) < 0)
    return (uint64_t *)sub_19C2B5238((_BYTE *)a2, *(void **)(v2 + 208), *(_QWORD *)(v2 + 216));
  v3 = *(_OWORD *)(v2 + 208);
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(v2 + 224);
  *(_OWORD *)a2 = v3;
  return this;
}

uint64_t language_modeling::v1::InlineCompletion::contextSize(language_modeling::v1::InlineCompletion *this)
{
  return *(_QWORD *)(*(_QWORD *)this + 232);
}

BOOL language_modeling::v1::InlineCompletion::wordBoundaryAt(language_modeling::v1::InlineCompletion *this, char a2)
{
  return (*(_QWORD *)(*(_QWORD *)this + 256) & (1 << a2)) != 0;
}

uint64_t language_modeling::v1::InlineCompletion::source(language_modeling::v1::InlineCompletion *this)
{
  return *(unsigned int *)(*(_QWORD *)this + 240);
}

char *language_modeling::v1::InlineCompletion::underlyingPrediction@<X0>(language_modeling::v1::InlineCompletion *this@<X0>, char **a2@<X8>)
{
  uint64_t v3;
  __int128 *v4;
  __int128 *v5;
  uint64_t *v6;
  uint64_t *v7;
  __int128 *v8;
  char *v9;
  char *result;

  v3 = *(_QWORD *)this;
  v4 = (__int128 *)(*(_QWORD *)this + 24);
  v5 = (__int128 *)(*(_QWORD *)this + 48);
  v6 = (uint64_t *)(*(_QWORD *)this + 160);
  v7 = (uint64_t *)(*(_QWORD *)this + 184);
  v8 = (__int128 *)(*(_QWORD *)this + 208);
  v9 = (char *)operator new();
  result = sub_19C3077FC(v9, (__int128 *)v3, v4, v5, v6, v7, v8, *(_QWORD *)(v3 + 232), *(_DWORD *)(v3 + 240), *(_QWORD *)(v3 + 248));
  *a2 = v9;
  return result;
}

void sub_19C335B24(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD355C](v1, 0x1032C4057ACE4D0);
  _Unwind_Resume(a1);
}

uint64_t *language_modeling::v1::InlineCompletion::log@<X0>(uint64_t *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __int128 *v3;
  __int128 v4;

  v2 = *this;
  if (*(char *)(*this + 287) < 0)
    return (uint64_t *)sub_19C2B5238((_BYTE *)a2, *(void **)(v2 + 264), *(_QWORD *)(v2 + 272));
  v3 = (__int128 *)(v2 + 264);
  v4 = *v3;
  *(_QWORD *)(a2 + 16) = *((_QWORD *)v3 + 2);
  *(_OWORD *)a2 = v4;
  return this;
}

void sub_19C335B94(uint64_t a1)
{
  sub_19C3369C0(a1);
  JUMPOUT(0x1A1AD355CLL);
}

char *sub_19C335BB8@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  if (result[103] < 0)
    return (char *)sub_19C2B5238((_BYTE *)a2, *((void **)result + 10), *((_QWORD *)result + 11));
  *(_OWORD *)a2 = *((_OWORD *)result + 5);
  *(_QWORD *)(a2 + 16) = *((_QWORD *)result + 12);
  return result;
}

uint64_t sub_19C335BE4(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_19C39D404((uint64_t *)(a1 + 104), a2, a3, a4);
}

uint64_t sub_19C335BEC(uint64_t a1, uint64_t a2, uint64_t *a3, int a4)
{
  return sub_19C39D920((uint64_t *)(a1 + 104), a2, a3, a4);
}

void sub_19C335BF4(uint64_t a1, const void *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *__p[2];
  uint64_t v23;
  int v24;
  uint64_t v25;
  _QWORD *v26;

  v3 = (_QWORD *)(a1 + 104);
  sub_19C323E94(*(_QWORD *)(a1 + 168), a2);
  sub_19C39EBA8(v3);
  v4 = *(_QWORD **)(a1 + 520);
  if (v4 && *v4 != v4[1])
  {
    sub_19C3361A8((uint64_t *)&v26, a1);
    v5 = operator new();
    *(_OWORD *)(v5 + 96) = 0u;
    *(_OWORD *)(v5 + 112) = 0u;
    *(_OWORD *)(v5 + 176) = 0u;
    *(_OWORD *)(v5 + 192) = 0u;
    *(_OWORD *)(v5 + 144) = 0u;
    *(_OWORD *)(v5 + 160) = 0u;
    *(_OWORD *)(v5 + 128) = 0u;
    *(_OWORD *)(v5 + 64) = 0u;
    *(_OWORD *)(v5 + 80) = 0u;
    *(_OWORD *)(v5 + 32) = 0u;
    *(_OWORD *)(v5 + 48) = 0u;
    *(_OWORD *)v5 = 0u;
    *(_OWORD *)(v5 + 16) = 0u;
    *(_DWORD *)(v5 + 80) = 1065353216;
    *(_OWORD *)(v5 + 88) = 0u;
    *(_OWORD *)(v5 + 104) = 0u;
    *(_DWORD *)(v5 + 120) = 1065353216;
    *(_DWORD *)(v5 + 160) = 1065353216;
    *(_OWORD *)(v5 + 184) = 0u;
    *(_OWORD *)(v5 + 168) = 0u;
    *(_DWORD *)(v5 + 200) = 1065353216;
    *(_QWORD *)(v5 + 208) = 0;
    *(_QWORD *)(v5 + 216) = 0;
    *(_QWORD *)(v5 + 224) = 0;
    v25 = v5;
    HIBYTE(v23) = 0;
    LOBYTE(__p[0]) = 0;
    v24 = 1;
    language_modeling::v1::LinguisticContext::try_push_back(&v25, (uint64_t)__p);
    if (SHIBYTE(v23) < 0)
      operator delete(__p[0]);
    v6 = *(_QWORD **)(a1 + 520);
    v7 = (_QWORD *)*v6;
    v8 = (_QWORD *)v6[1];
    while (v8 != v7)
    {
      v10 = *--v8;
      v9 = v10;
      *v8 = 0;
      if (v10)
      {
        v11 = sub_19C296378(v9);
        MEMORY[0x1A1AD355C](v11, 0x1032C4057ACE4D0);
      }
    }
    v6[1] = v7;
    v12 = v26;
    sub_19C2F8278(v26, &v25, 6uLL, __p);
    v13 = *(_QWORD **)(a1 + 520);
    v14 = (_QWORD *)*v13;
    if (*v13)
    {
      v15 = (_QWORD *)v13[1];
      v16 = (_QWORD *)*v13;
      if (v15 != v14)
      {
        do
        {
          v18 = *--v15;
          v17 = v18;
          *v15 = 0;
          if (v18)
          {
            v19 = sub_19C296378(v17);
            MEMORY[0x1A1AD355C](v19, 0x1032C4057ACE4D0);
          }
        }
        while (v15 != v14);
        v16 = (_QWORD *)*v13;
      }
      v13[1] = v14;
      operator delete(v16);
      *v13 = 0;
      v13[1] = 0;
      v13[2] = 0;
    }
    *(_OWORD *)v13 = *(_OWORD *)__p;
    v13[2] = v23;
    v20 = v25;
    v25 = 0;
    if (v20)
    {
      v21 = sub_19C295FA0(v20);
      MEMORY[0x1A1AD355C](v21, 0x10B2C4009D90DC4);
    }
    if (v12)
      (*(void (**)(_QWORD *))(*v12 + 8))(v12);
  }
}

void sub_19C335DE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  language_modeling::v1::LinguisticContext::~LinguisticContext((language_modeling::v1::LinguisticContext *)va);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  _Unwind_Resume(a1);
}

uint64_t sub_19C335E14(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 168) + 176);
}

void sub_19C335E20(uint64_t a1, const void *a2, const void **a3)
{
  uint64_t v4;
  unint64_t v5;

  v4 = *(_QWORD *)(a1 + 168);
  v5 = sub_19C39E96C(a3);
  sub_19C331338(v4, a2, v5);
}

void sub_19C335E54(uint64_t a1, const void **a2)
{
  _QWORD *v2;
  unint64_t v3;

  v2 = *(_QWORD **)(a1 + 168);
  v3 = sub_19C39E96C(a2);
  sub_19C331890(v2, v3);
}

void sub_19C335E80(uint64_t a1, uint64_t *cf)
{
  if (!cf)
    __assert_rtn("addVocabulary", "TokenIDLanguageModel.cpp", 317, "vocabulary");
  CFRetain(cf);
  sub_19C331178(*(_QWORD **)(a1 + 168), cf[3]);
}

void sub_19C335ED4(uint64_t a1, _QWORD *cf)
{
  _QWORD *v3;
  uint64_t v4;
  char *v5;
  char *v6;
  int64_t v7;
  uint64_t v8;

  if (!cf)
    __assert_rtn("removeVocabulary", "TokenIDLanguageModel.cpp", 324, "vocabulary");
  v3 = *(_QWORD **)(a1 + 168);
  v4 = cf[3];
  v6 = (char *)v3[3];
  v5 = (char *)v3[4];
  if (v6 != v5)
  {
    while (*(_QWORD *)v6 != v4)
    {
      v6 += 8;
      if (v6 == v5)
      {
        v6 = (char *)v3[4];
        break;
      }
    }
  }
  if (v6 != v5)
  {
    v7 = v5 - (v6 + 8);
    if (v5 != v6 + 8)
      memmove(v6, v6 + 8, v5 - (v6 + 8));
    v3[4] = &v6[v7];
    v8 = v3[31];
    if (v8)
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(v8 + 16) + 16) + 104))(*(_QWORD *)(*(_QWORD *)(v8 + 16) + 16), v4);
  }
  CFRelease(cf);
}

void sub_19C335FA0(uint64_t a1)
{
  uint64_t *v1;
  std::recursive_mutex *v2;

  v1 = *(uint64_t **)(a1 + 168);
  if (*(_BYTE *)(v1[29] + 192))
  {
    sub_19C343528(v1[6]);
    v2 = (std::recursive_mutex *)v1[58];
    if (v2)
    {
      std::recursive_mutex::lock(v2);
      sub_19C343528(v2[2].__m_.__sig);
      std::recursive_mutex::unlock(v2);
    }
  }
}

void sub_19C335FF8(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19C33600C(uint64_t a1)
{
  sub_19C330C40(*(_QWORD *)(a1 + 168), 0);
}

void sub_19C336018(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  sub_19C3319EC(*(_QWORD **)(a1 + 168));
  v2 = *(_QWORD *)(a1 + 440);
  v3 = *(std::__shared_weak_count **)(a1 + 448);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 88))(v2);
  if (v3)
  {
    v6 = (unint64_t *)&v3->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_19C3360B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_19C2B43C8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19C3360C4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v2 = *(_QWORD *)(a1[21] + 248);
  if (v2)
    (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v2 + 16) + 16) + 72))(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 16));
  v3 = a1[55];
  v4 = (std::__shared_weak_count *)a1[56];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 72))(v3);
  if (v4)
  {
    v7 = (unint64_t *)&v4->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_19C336174(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_19C2B43C8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_19C336188(uint64_t a1)
{
  return a1 + 392;
}

void sub_19C336190(uint64_t a1@<X0>, int a2@<W1>, CFDictionaryRef *a3@<X8>)
{
  sub_19C39E630(a1 + 104, a2, a3);
}

void sub_19C336198(uint64_t a1@<X0>, CFDictionaryRef *a2@<X8>)
{
  sub_19C39E7D8(a1 + 104, a2);
}

uint64_t sub_19C3361A0()
{
  return 46;
}

void sub_19C3361A8(uint64_t *a1, uint64_t a2)
{
  const void *v4;
  size_t v5;
  size_t v6;
  __int128 *p_dst;
  uint64_t v8;
  uint64_t v9;
  const void *v10;
  size_t v11;
  const void *v12;
  const void **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  CFDictionaryRef *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  const __CFNumber *Value;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  uint64_t v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  CFDictionaryRef *v82;
  std::__shared_weak_count *v83;
  unsigned int **v84;
  unsigned int *v85[2];
  uint64_t v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 __dst;
  unint64_t v91;
  int v92[6];
  int v93;
  const void *v94[2];
  unint64_t v95;
  uint64_t v96;
  _BYTE v97[15];
  char v98;
  int v99;
  __int128 v100;
  uint64_t v101;

  v101 = *MEMORY[0x1E0C80C00];
  v4 = (const void *)language_modeling::v1::kEnvironmentSessionTypeKey;
  v5 = strlen((const char *)language_modeling::v1::kEnvironmentSessionTypeKey);
  if (v5 > 0x7FFFFFFFFFFFFFF7)
    sub_19C2A1A54();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    p_dst = (__int128 *)operator new(v8 + 1);
    *((_QWORD *)&__dst + 1) = v6;
    v91 = v9 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v91) = v5;
  p_dst = &__dst;
  if (v5)
LABEL_8:
    memmove(p_dst, v4, v6);
  *((_BYTE *)p_dst + v6) = 0;
  v92[0] = 3;
  v93 = 0;
  v10 = (const void *)language_modeling::v1::kEnvironmentAppIdentifierKey;
  v11 = strlen((const char *)language_modeling::v1::kEnvironmentAppIdentifierKey);
  if (v11 > 0x7FFFFFFFFFFFFFF7)
    sub_19C2A1A54();
  v12 = (const void *)v11;
  if (v11 >= 0x17)
  {
    v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v14 = v11 | 7;
    v15 = v14 + 1;
    v13 = (const void **)operator new(v14 + 1);
    v94[1] = v12;
    v95 = v15 | 0x8000000000000000;
    v94[0] = v13;
    goto LABEL_16;
  }
  HIBYTE(v95) = v11;
  v13 = v94;
  if (v11)
LABEL_16:
    memmove(v13, v10, (size_t)v12);
  *((_BYTE *)v12 + (_QWORD)v13) = 0;
  v96 = 0x746C7561666564;
  *(_QWORD *)v97 = v100;
  *(_QWORD *)&v97[7] = *(_QWORD *)((char *)&v100 + 7);
  v98 = 7;
  *(_QWORD *)&v100 = 0;
  *(_QWORD *)((char *)&v100 + 7) = 0;
  v99 = 1;
  v85[0] = 0;
  v85[1] = 0;
  v84 = v85;
  sub_19C2F6440((uint64_t *)&v84, (uint64_t)v85, (const void **)&__dst, (uint64_t)&__dst);
  sub_19C2F6440((uint64_t *)&v84, (uint64_t)v85, v94, (uint64_t)v94);
  if (v99 != -1)
    ((void (*)(__int128 *, uint64_t *))off_1E3D3A288[v99])(&v89, &v96);
  v99 = -1;
  if (SHIBYTE(v95) < 0)
    operator delete((void *)v94[0]);
  if (v93 != -1)
    ((void (*)(__int128 *, int *))off_1E3D3A288[v93])(&v89, v92);
  v93 = -1;
  if (SHIBYTE(v91) < 0)
    operator delete((void *)__dst);
  v16 = *(_QWORD *)(a2 + 8);
  v18 = *(CFDictionaryRef **)(v16 + 144);
  v17 = *(std::__shared_weak_count **)(v16 + 152);
  v82 = v18;
  v83 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v20 = __ldxr(p_shared_owners);
    while (__stxr(v20 + 1, p_shared_owners));
  }
  v21 = *(_QWORD *)(a2 + 448);
  *(_QWORD *)&v81 = *(_QWORD *)(a2 + 440);
  *((_QWORD *)&v81 + 1) = v21;
  if (v21)
  {
    v22 = (unint64_t *)(v21 + 8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  v24 = *(_QWORD *)(a2 + 464);
  *(_QWORD *)&v80 = *(_QWORD *)(a2 + 456);
  *((_QWORD *)&v80 + 1) = v24;
  if (v24)
  {
    v25 = (unint64_t *)(v24 + 8);
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  v27 = *(_QWORD *)(a2 + 480);
  *(_QWORD *)&v79 = *(_QWORD *)(a2 + 472);
  *((_QWORD *)&v79 + 1) = v27;
  if (v27)
  {
    v28 = (unint64_t *)(v27 + 8);
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  v30 = *(_QWORD *)(a2 + 496);
  *(_QWORD *)&v78 = *(_QWORD *)(a2 + 488);
  *((_QWORD *)&v78 + 1) = v30;
  if (v30)
  {
    v31 = (unint64_t *)(v30 + 8);
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
  }
  v33 = *(_QWORD *)(a2 + 512);
  *(_QWORD *)&v77 = *(_QWORD *)(a2 + 504);
  *((_QWORD *)&v77 + 1) = v33;
  if (v33)
  {
    v34 = (unint64_t *)(v33 + 8);
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
  }
  sub_19C298AC0(&v76, a2 + 104, (uint64_t)&v84);
  if (v18)
  {
    Value = (const __CFNumber *)CFDictionaryGetValue(*v18, CFSTR("MinAdditionalCharactersForInlineCompletions"));
    *(_QWORD *)&__dst = 0;
    CFNumberGetValue(Value, kCFNumberSInt64Type, &__dst);
    v37 = __dst;
  }
  else
  {
    v37 = 1;
  }
  v38 = operator new();
  v39 = v81;
  v81 = 0uLL;
  v100 = v80;
  v80 = 0uLL;
  v89 = v79;
  __dst = v39;
  v79 = 0uLL;
  v40 = v78;
  v78 = 0uLL;
  v87 = v77;
  v88 = v40;
  v75 = (std::__shared_weak_count *)*((_QWORD *)&v77 + 1);
  v77 = 0uLL;
  v41 = v76;
  v76 = 0;
  v86 = v41;
  sub_19C3124B8(v38, a2 + 32, &__dst, &v100, &v89, &v88, &v87, (__int128 *)(a2 + 80), (uint64_t)&v84, &v86, (_QWORD *)(a2 + 520), v37);
  *a1 = v38;
  v42 = v86;
  v86 = 0;
  if (v42)
    (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
  if (v75)
  {
    v43 = (unint64_t *)&v75->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  v45 = (std::__shared_weak_count *)*((_QWORD *)&v88 + 1);
  if (*((_QWORD *)&v88 + 1))
  {
    v46 = (unint64_t *)(*((_QWORD *)&v88 + 1) + 8);
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  v48 = (std::__shared_weak_count *)*((_QWORD *)&v89 + 1);
  if (*((_QWORD *)&v89 + 1))
  {
    v49 = (unint64_t *)(*((_QWORD *)&v89 + 1) + 8);
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  v51 = (std::__shared_weak_count *)*((_QWORD *)&v100 + 1);
  if (*((_QWORD *)&v100 + 1))
  {
    v52 = (unint64_t *)(*((_QWORD *)&v100 + 1) + 8);
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  v54 = (std::__shared_weak_count *)*((_QWORD *)&__dst + 1);
  if (*((_QWORD *)&__dst + 1))
  {
    v55 = (unint64_t *)(*((_QWORD *)&__dst + 1) + 8);
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  if (v76)
    (*(void (**)(uint64_t))(*(_QWORD *)v76 + 8))(v76);
  v57 = (std::__shared_weak_count *)*((_QWORD *)&v77 + 1);
  if (*((_QWORD *)&v77 + 1))
  {
    v58 = (unint64_t *)(*((_QWORD *)&v77 + 1) + 8);
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  v60 = (std::__shared_weak_count *)*((_QWORD *)&v78 + 1);
  if (*((_QWORD *)&v78 + 1))
  {
    v61 = (unint64_t *)(*((_QWORD *)&v78 + 1) + 8);
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  v63 = (std::__shared_weak_count *)*((_QWORD *)&v79 + 1);
  if (*((_QWORD *)&v79 + 1))
  {
    v64 = (unint64_t *)(*((_QWORD *)&v79 + 1) + 8);
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  v66 = (std::__shared_weak_count *)*((_QWORD *)&v80 + 1);
  if (*((_QWORD *)&v80 + 1))
  {
    v67 = (unint64_t *)(*((_QWORD *)&v80 + 1) + 8);
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  v69 = (std::__shared_weak_count *)*((_QWORD *)&v81 + 1);
  if (*((_QWORD *)&v81 + 1))
  {
    v70 = (unint64_t *)(*((_QWORD *)&v81 + 1) + 8);
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  v72 = v83;
  if (v83)
  {
    v73 = (unint64_t *)&v83->__shared_owners_;
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  sub_19C2F68B0(v85[0]);
}

void sub_19C33685C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,unsigned int *a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,char a35,uint64_t a36,char a37)
{
  uint64_t v37;
  uint64_t v38;

  if (a32)
    (*(void (**)(uint64_t))(*(_QWORD *)a32 + 8))(a32);
  sub_19C2B43C8((uint64_t)&a33);
  sub_19C2B43C8((uint64_t)&a35);
  sub_19C2B43C8((uint64_t)&a37);
  sub_19C2B43C8(v38 - 112);
  sub_19C2B43C8(v38 - 224);
  MEMORY[0x1A1AD355C](v37, 0x10F3C403524454CLL);
  sub_19C2B43C8((uint64_t)&a17);
  sub_19C2B43C8((uint64_t)&a19);
  sub_19C2B43C8((uint64_t)&a21);
  sub_19C2B43C8((uint64_t)&a23);
  sub_19C2B43C8((uint64_t)&a25);
  sub_19C2B43C8((uint64_t)&a27);
  sub_19C2F68B0(a30);
  _Unwind_Resume(a1);
}

uint64_t sub_19C336958(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 48);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_1E3D3A288[v2])(&v4, a1 + 24);
  *(_DWORD *)(a1 + 48) = -1;
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_19C3369C0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *(_QWORD *)a1 = &off_1E3D34A20;
  v2 = *(std::__shared_weak_count **)(a1 + 528);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  sub_19C336AC0(a1 + 416);
  sub_19C2E457C(*(_QWORD *)(a1 + 400));
  sub_19C336C2C(a1 + 104);
  if (*(char *)(a1 + 103) < 0)
  {
    operator delete(*(void **)(a1 + 80));
    if ((*(char *)(a1 + 79) & 0x80000000) == 0)
    {
LABEL_8:
      if ((*(char *)(a1 + 55) & 0x80000000) == 0)
        goto LABEL_9;
LABEL_13:
      operator delete(*(void **)(a1 + 32));
      v5 = *(std::__shared_weak_count **)(a1 + 16);
      if (!v5)
        return a1;
      goto LABEL_14;
    }
  }
  else if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    goto LABEL_8;
  }
  operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_13;
LABEL_9:
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
    return a1;
LABEL_14:
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  return a1;
}

uint64_t sub_19C336AC0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;

  v2 = *(std::__shared_weak_count **)(a1 + 96);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *(std::__shared_weak_count **)(a1 + 80);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 80);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v8)
    goto LABEL_15;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    v11 = *(std::__shared_weak_count **)(a1 + 48);
    if (!v11)
      goto LABEL_21;
  }
  else
  {
LABEL_15:
    v11 = *(std::__shared_weak_count **)(a1 + 48);
    if (!v11)
      goto LABEL_21;
  }
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_21:
  v14 = *(std::__shared_weak_count **)(a1 + 32);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
      if ((*(char *)(a1 + 23) & 0x80000000) == 0)
        return a1;
      goto LABEL_26;
    }
  }
  if (*(char *)(a1 + 23) < 0)
LABEL_26:
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_19C336C2C(uint64_t a1)
{
  void *v2;
  void **v3;
  void *v4;
  char *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void **v13;
  char *v14;
  uint64_t v15;

  *(_QWORD *)a1 = &off_1E3D34AD8;
  v2 = *(void **)(a1 + 264);
  if (v2)
  {
    *(_QWORD *)(a1 + 272) = v2;
    operator delete(v2);
  }
  sub_19C336DA8((void **)(a1 + 192));
  sub_19C2E457C(*(_QWORD *)(a1 + 176));
  v3 = *(void ***)(a1 + 144);
  if (v3)
  {
    do
    {
      v13 = (void **)*v3;
      if (*((char *)v3 + 39) < 0)
        operator delete(v3[2]);
      operator delete(v3);
      v3 = v13;
    }
    while (v13);
  }
  v4 = *(void **)(a1 + 128);
  *(_QWORD *)(a1 + 128) = 0;
  if (v4)
    operator delete(v4);
  v5 = *(char **)(a1 + 104);
  if (v5)
  {
    do
    {
      v14 = *(char **)v5;
      v15 = *((_QWORD *)v5 + 5);
      *((_QWORD *)v5 + 5) = 0;
      if (v15)
        (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
      if (v5[39] < 0)
        operator delete(*((void **)v5 + 2));
      operator delete(v5);
      v5 = v14;
    }
    while (v14);
  }
  v6 = *(void **)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v6)
    operator delete(v6);
  v7 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = 0;
  if (v7)
  {
    v8 = sub_19C2966B4(v7);
    MEMORY[0x1A1AD355C](v8, 0x10F0C4069D522A4);
  }
  v9 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v9)
    goto LABEL_15;
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (v11)
  {
LABEL_15:
    if ((*(char *)(a1 + 63) & 0x80000000) == 0)
      goto LABEL_16;
LABEL_27:
    operator delete(*(void **)(a1 + 40));
    if ((*(char *)(a1 + 39) & 0x80000000) == 0)
      return a1;
LABEL_28:
    operator delete(*(void **)(a1 + 16));
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (*(char *)(a1 + 63) < 0)
    goto LABEL_27;
LABEL_16:
  if (*(char *)(a1 + 39) < 0)
    goto LABEL_28;
  return a1;
}

void **sub_19C336DA8(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  const void *v5;
  const void *v6;
  void *v7;
  void **v8;
  void **v9;
  void *v10;

  v2 = (char *)a1[6];
  if (v2)
  {
    v3 = (char *)a1[7];
    v4 = a1[6];
    if (v3 != v2)
    {
      do
      {
        v6 = (const void *)*((_QWORD *)v3 - 1);
        v3 -= 8;
        v5 = v6;
        if (v6)
          CFRelease(v5);
      }
      while (v3 != v2);
      v4 = a1[6];
    }
    a1[7] = v2;
    operator delete(v4);
  }
  v7 = a1[3];
  if (v7)
  {
    a1[4] = v7;
    operator delete(v7);
  }
  v8 = (void **)*a1;
  if (*a1)
  {
    v9 = (void **)a1[1];
    v10 = *a1;
    if (v9 != v8)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = *a1;
    }
    a1[1] = v8;
    operator delete(v10);
  }
  return a1;
}

char *sub_19C336E6C(char *__dst, __int128 *a2)
{
  __int128 v4;

  *__dst = 0;
  __dst[48] = 0;
  if (*((_BYTE *)a2 + 48))
  {
    if (*((char *)a2 + 23) < 0)
    {
      sub_19C2B5238(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
    }
    else
    {
      v4 = *a2;
      *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
      *(_OWORD *)__dst = v4;
    }
    *((_QWORD *)__dst + 4) = 0;
    *((_QWORD *)__dst + 3) = __dst + 32;
    *((_QWORD *)__dst + 5) = 0;
    sub_19C2E4334((uint64_t *)__dst + 3, *((_QWORD **)a2 + 3), (_QWORD *)a2 + 4);
    __dst[48] = 1;
  }
  return __dst;
}

void sub_19C336EF0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_19C31C078(v1);
  _Unwind_Resume(a1);
}

void sub_19C336F24(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t *v6;
  uint64_t v7;
  uint64_t **v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  void **v13;
  char v14;
  __int128 v15;
  void *v16;
  size_t v17;
  void **v18;
  char v19;
  __int128 v20;
  void *v21;
  size_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t **v25;
  uint64_t **v26;
  int v27;
  const void *v28;
  size_t v29;
  _QWORD *v30;
  const void *v31;
  const void *v32;
  int v33;
  const void *v34;
  size_t v35;
  size_t v36;
  int v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  BOOL v41;
  _QWORD *v42;
  _QWORD *i;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t **v46;
  uint64_t **v47;
  int v48;
  const void *v49;
  unint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  int v54;
  _QWORD *v55;
  unint64_t v56;
  size_t v57;
  int v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;

  v4 = a2;
  if (*(_QWORD *)(a1 + 16))
  {
    v6 = *(uint64_t **)a1;
    v8 = (uint64_t **)(a1 + 8);
    v7 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)a1 = a1 + 8;
    *(_QWORD *)(v7 + 16) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    v9 = v6[1] ? v6[1] : (uint64_t)v6;
    v63 = a1;
    v65 = v9;
    if (v9)
    {
      v10 = *(_QWORD **)(v9 + 16);
      if (v10)
      {
        v11 = (_QWORD *)*v10;
        if (*v10 == v9)
        {
          *v10 = 0;
          while (1)
          {
            v62 = (_QWORD *)v10[1];
            if (!v62)
              break;
            do
            {
              v10 = v62;
              v62 = (_QWORD *)*v62;
            }
            while (v62);
          }
        }
        else
        {
          for (v10[1] = 0; v11; v11 = (_QWORD *)v10[1])
          {
            do
            {
              v10 = v11;
              v11 = (_QWORD *)*v11;
            }
            while (v11);
          }
        }
      }
      v64 = v10;
      if (a2 != a3)
      {
        v12 = a2;
        while (1)
        {
          if ((_QWORD *)v9 != v12)
          {
            v13 = (void **)(v9 + 32);
            v14 = *((_BYTE *)v12 + 55);
            if (*(char *)(v9 + 55) < 0)
            {
              if (v14 >= 0)
                v16 = v12 + 4;
              else
                v16 = (void *)v12[4];
              if (v14 >= 0)
                v17 = *((unsigned __int8 *)v12 + 55);
              else
                v17 = v12[5];
              sub_19C2E54A8(v13, v16, v17);
            }
            else if ((*((_BYTE *)v12 + 55) & 0x80) != 0)
            {
              sub_19C2E53E4(v13, (void *)v12[4], v12[5]);
            }
            else
            {
              v15 = *((_OWORD *)v12 + 2);
              *(_QWORD *)(v9 + 48) = v12[6];
              *(_OWORD *)v13 = v15;
            }
            v18 = (void **)(v9 + 56);
            v19 = *((_BYTE *)v12 + 79);
            if (*(char *)(v9 + 79) < 0)
            {
              if (v19 >= 0)
                v21 = v12 + 7;
              else
                v21 = (void *)v12[7];
              if (v19 >= 0)
                v22 = *((unsigned __int8 *)v12 + 79);
              else
                v22 = v12[8];
              sub_19C2E54A8(v18, v21, v22);
            }
            else if ((*((_BYTE *)v12 + 79) & 0x80) != 0)
            {
              sub_19C2E53E4(v18, (void *)v12[7], v12[8]);
            }
            else
            {
              v20 = *(_OWORD *)(v12 + 7);
              *(_QWORD *)(v9 + 72) = v12[9];
              *(_OWORD *)v18 = v20;
            }
          }
          v23 = (uint64_t *)v65;
          v24 = *v8;
          v25 = (uint64_t **)(a1 + 8);
          v26 = (uint64_t **)(a1 + 8);
          if (*v8)
          {
            v27 = *(char *)(v65 + 55);
            if (v27 >= 0)
              v28 = (const void *)(v65 + 32);
            else
              v28 = *(const void **)(v65 + 32);
            if (v27 >= 0)
              v29 = *(unsigned __int8 *)(v65 + 55);
            else
              v29 = *(_QWORD *)(v65 + 40);
            while (1)
            {
              v25 = (uint64_t **)v24;
              v32 = (const void *)v24[4];
              v30 = v24 + 4;
              v31 = v32;
              v33 = *((char *)v30 + 23);
              if (v33 >= 0)
                v34 = v30;
              else
                v34 = v31;
              if (v33 >= 0)
                v35 = *((unsigned __int8 *)v30 + 23);
              else
                v35 = v30[1];
              if (v35 >= v29)
                v36 = v29;
              else
                v36 = v35;
              v37 = memcmp(v28, v34, v36);
              if (v37)
              {
                if (v37 < 0)
                  goto LABEL_43;
LABEL_57:
                v24 = v25[1];
                if (!v24)
                {
                  v26 = v25 + 1;
                  break;
                }
              }
              else
              {
                if (v29 >= v35)
                  goto LABEL_57;
LABEL_43:
                v24 = *v25;
                v26 = v25;
                if (!*v25)
                  break;
              }
            }
          }
          *(_QWORD *)v65 = 0;
          v23[1] = 0;
          v23[2] = (uint64_t)v25;
          *v26 = v23;
          v38 = **(_QWORD **)a1;
          if (v38)
          {
            *(_QWORD *)a1 = v38;
            v23 = *v26;
          }
          sub_19C2A2310(*(uint64_t **)(a1 + 8), v23);
          ++*(_QWORD *)(a1 + 16);
          v9 = (uint64_t)v64;
          v65 = (uint64_t)v64;
          if (v64)
          {
            v10 = (_QWORD *)v64[2];
            if (v10)
            {
              v39 = (_QWORD *)*v10;
              if ((_QWORD *)*v10 == v64)
              {
                *v10 = 0;
                while (1)
                {
                  v42 = (_QWORD *)v10[1];
                  if (!v42)
                    break;
                  do
                  {
                    v10 = v42;
                    v42 = (_QWORD *)*v42;
                  }
                  while (v42);
                }
              }
              else
              {
                for (v10[1] = 0; v39; v39 = (_QWORD *)v10[1])
                {
                  do
                  {
                    v10 = v39;
                    v39 = (_QWORD *)*v39;
                  }
                  while (v39);
                }
              }
            }
            v64 = v10;
            v40 = (_QWORD *)v12[1];
            if (v40)
            {
              do
              {
LABEL_70:
                v4 = v40;
                v40 = (_QWORD *)*v40;
              }
              while (v40);
              goto LABEL_74;
            }
          }
          else
          {
            v10 = 0;
            v40 = (_QWORD *)v12[1];
            if (v40)
              goto LABEL_70;
          }
          do
          {
            v4 = (_QWORD *)v12[2];
            v41 = *v4 == (_QWORD)v12;
            v12 = v4;
          }
          while (!v41);
LABEL_74:
          if (v9)
          {
            v12 = v4;
            if (v4 != a3)
              continue;
          }
          break;
        }
      }
      sub_19C2E457C(v9);
      if (v10)
      {
        for (i = (_QWORD *)v10[2]; i; i = (_QWORD *)i[2])
          v10 = i;
        sub_19C2E457C((uint64_t)v10);
      }
    }
  }
  if (v4 == a3)
    return;
  while (2)
  {
    sub_19C2E4868((uint64_t)&v63, a1, (uint64_t)(v4 + 4));
    v44 = (uint64_t *)v63;
    v45 = *(uint64_t **)(a1 + 8);
    v46 = (uint64_t **)(a1 + 8);
    v47 = (uint64_t **)(a1 + 8);
    if (!v45)
      goto LABEL_111;
    v48 = *(char *)(v63 + 55);
    if (v48 >= 0)
      v49 = (const void *)(v63 + 32);
    else
      v49 = *(const void **)(v63 + 32);
    if (v48 >= 0)
      v50 = *(unsigned __int8 *)(v63 + 55);
    else
      v50 = *(_QWORD *)(v63 + 40);
    do
    {
      while (1)
      {
        v46 = (uint64_t **)v45;
        v53 = v45[4];
        v51 = v45 + 4;
        v52 = (_QWORD *)v53;
        v54 = *((char *)v51 + 23);
        v55 = v54 >= 0 ? v51 : v52;
        v56 = v54 >= 0 ? *((unsigned __int8 *)v51 + 23) : v51[1];
        v57 = v56 >= v50 ? v50 : v56;
        v58 = memcmp(v49, v55, v57);
        if (v58)
          break;
        if (v50 >= v56)
          goto LABEL_109;
LABEL_95:
        v45 = *v46;
        v47 = v46;
        if (!*v46)
          goto LABEL_111;
      }
      if (v58 < 0)
        goto LABEL_95;
LABEL_109:
      v45 = v46[1];
    }
    while (v45);
    v47 = v46 + 1;
LABEL_111:
    *v44 = 0;
    v44[1] = 0;
    v44[2] = (uint64_t)v46;
    *v47 = v44;
    v59 = **(_QWORD **)a1;
    if (v59)
    {
      *(_QWORD *)a1 = v59;
      v44 = *v47;
    }
    sub_19C2A2310(*(uint64_t **)(a1 + 8), v44);
    ++*(_QWORD *)(a1 + 16);
    v60 = (_QWORD *)v4[1];
    if (v60)
    {
      do
      {
        v61 = v60;
        v60 = (_QWORD *)*v60;
      }
      while (v60);
    }
    else
    {
      do
      {
        v61 = (_QWORD *)v4[2];
        v41 = *v61 == (_QWORD)v4;
        v4 = v61;
      }
      while (!v41);
    }
    v4 = v61;
    if (v61 != a3)
      continue;
    break;
  }
}

void sub_19C337378(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C337484((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19C33738C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D31118;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_19C33739C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D31118;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AD355CLL);
}

void sub_19C3373CC(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD **)(a1 + 24);
  if (v1)
  {
    v3 = *(_QWORD **)(a1 + 32);
    v4 = *(void **)(a1 + 24);
    if (v3 != v1)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
        {
          v7 = sub_19C296378(v5);
          MEMORY[0x1A1AD355C](v7, 0x1032C4057ACE4D0);
        }
      }
      while (v3 != v1);
      v4 = *(void **)(a1 + 24);
    }
    *(_QWORD *)(a1 + 32) = v1;
    operator delete(v4);
  }
}

os_log_t sub_19C337458()
{
  os_log_t result;

  result = os_log_create("com.apple.LanguageModeling", "ToucanLanguageModel");
  qword_1EDB96E38 = (uint64_t)result;
  return result;
}

uint64_t sub_19C337484(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  sub_19C2E457C(*(_QWORD *)(a1 + 16));
  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 16);
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = *(_QWORD *)(v3 + 16);
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    sub_19C2E457C(v2);
  }
  return a1;
}

void sub_19C3374D0(uint64_t a1, const __CFString *a2)
{
  CFTypeID TypeID;
  void *__p[2];
  uint64_t v6;
  char v7;

  if (a2 && (TypeID = CFStringGetTypeID(), TypeID == CFGetTypeID(a2)))
  {
    sub_19C2E50A4(__p, a2);
    v7 = 1;
    if (SHIBYTE(v6) < 0)
    {
      sub_19C2B5238((_BYTE *)a1, __p[0], (unint64_t)__p[1]);
      if (v7)
      {
        if (SHIBYTE(v6) < 0)
          operator delete(__p[0]);
      }
    }
    else
    {
      *(_OWORD *)a1 = *(_OWORD *)__p;
      *(_QWORD *)(a1 + 16) = v6;
    }
  }
  else
  {
    LOBYTE(__p[0]) = 0;
    v7 = 0;
    *(_BYTE *)(a1 + 23) = 0;
    *(_BYTE *)a1 = 0;
  }
}

void sub_19C337590(_QWORD *a1)
{
  sub_19C337AE8(a1);
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C3375B4()
{
  uint64_t v0;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  int v5;

  v2 = 0;
  v3 = &v2;
  v5 = 0;
  v4 = 0x2000000000;
  LXLexiconEnumerateEntriesForString();
  v0 = *((unsigned int *)v3 + 6);
  _Block_object_dispose(&v2, 8);
  return v0;
}

void sub_19C337640(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_19C337658(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double *v19;
  CFStringRef v20;
  int v21;
  double v22;
  unsigned int *v23;
  unint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  __int128 v34;
  unsigned __int8 *v35;
  size_t v36;
  uint64_t v37;
  uint64_t result;
  _QWORD v39[8];
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  int v43;

  v6 = *(unsigned int *)(a1 + 256);
  if ((int)v6 < 1)
    goto LABEL_23;
  v7 = 0;
  v8 = *(_QWORD *)(a1 + 152);
  v9 = *(_BYTE *)(a2 + 23);
  if (v9 >= 0)
    v10 = *(unsigned __int8 *)(a2 + 23);
  else
    v10 = *(_QWORD *)(a2 + 8);
  if (v9 >= 0)
    v11 = (unsigned __int8 *)a2;
  else
    v11 = *(unsigned __int8 **)a2;
  while (1)
  {
    v12 = (unsigned __int8 *)(v8 + 24 * v7);
    v13 = v12[23];
    if ((v13 & 0x80u) == 0)
      v14 = v12[23];
    else
      v14 = *((_QWORD *)v12 + 1);
    if (v14 != v10)
      goto LABEL_9;
    if ((v13 & 0x80) == 0)
      break;
    if (!memcmp(*(const void **)v12, v11, *((_QWORD *)v12 + 1)))
      goto LABEL_19;
LABEL_9:
    if (++v7 == v6)
      goto LABEL_23;
  }
  if (v12[23])
  {
    v15 = v11;
    while (*v12 == *v15)
    {
      ++v12;
      ++v15;
      if (!--v13)
        goto LABEL_19;
    }
    goto LABEL_9;
  }
LABEL_19:
  if ((v7 & 0x80000000) == 0)
  {
    ++*(_QWORD *)(a1 + 264);
    v16 = *(_QWORD *)(a1 + 200);
    v17 = *(_QWORD *)(a1 + 248);
    if (*(_QWORD *)(v16 + 8 * v7) != v17)
    {
      v18 = v17 + 1;
      *(_QWORD *)(a1 + 248) = v18;
      *(_QWORD *)(v16 + 8 * v7) = v18;
    }
    v19 = (double *)(*(_QWORD *)(a1 + 176) + 16 * v7);
    goto LABEL_57;
  }
LABEL_23:
  ++*(_QWORD *)(a1 + 272);
  v39[0] = 0;
  v20 = sub_19C2E1370(a2);
  v40 = 0;
  v41 = &v40;
  v43 = 0;
  v42 = 0x2000000000;
  v39[1] = MEMORY[0x1E0C809B0];
  v39[2] = 0x40000000;
  v39[3] = sub_19C412C50;
  v39[4] = &unk_1E3D3C748;
  v39[5] = &v40;
  v39[6] = v20;
  v39[7] = v39;
  LXLexiconEnumerateEntriesForString();
  v21 = *((_DWORD *)v41 + 6);
  _Block_object_dispose(&v40, 8);
  v22 = *(double *)v39;
  if (v20)
    CFRelease(v20);
  v19 = *(double **)(a1 + 224);
  v23 = *(unsigned int **)(a1 + 232);
  if (v19 != (double *)v23)
  {
    while (*(_DWORD *)v19 != v21 || v19[1] != v22)
    {
      v19 += 2;
      if (v19 == (double *)v23)
      {
        v19 = *(double **)(a1 + 232);
        break;
      }
    }
  }
  if (v19 == (double *)v23)
  {
    v25 = *(int *)(a1 + 256);
    v26 = *(_QWORD *)(a1 + 152);
    if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 160) - v26) >> 3) <= v25)
    {
      if ((int)v25 < 2)
      {
        LODWORD(v25) = 0;
      }
      else
      {
        v27 = *(unint64_t **)(a1 + 200);
        v28 = *v27;
        v29 = 1;
        LODWORD(v25) = 0;
        do
        {
          v30 = v27[v29];
          if (v28 > v30)
            LODWORD(v25) = v29;
          if (v28 >= v30)
            v28 = v27[v29];
          ++v29;
        }
        while (*(_DWORD *)(a1 + 256) != v29);
      }
    }
    else
    {
      *(_DWORD *)(a1 + 256) = v25 + 1;
    }
    v31 = (int)v25;
    v32 = v26 + 24 * (int)v25;
    if (v32 != a2)
    {
      v33 = *(_BYTE *)(a2 + 23);
      if (*(char *)(v32 + 23) < 0)
      {
        if (v33 >= 0)
          v35 = (unsigned __int8 *)a2;
        else
          v35 = *(unsigned __int8 **)a2;
        if (v33 >= 0)
          v36 = *(unsigned __int8 *)(a2 + 23);
        else
          v36 = *(_QWORD *)(a2 + 8);
        sub_19C2E54A8((void **)v32, v35, v36);
      }
      else if ((*(_BYTE *)(a2 + 23) & 0x80) != 0)
      {
        sub_19C2E53E4((_QWORD *)v32, *(void **)a2, *(_QWORD *)(a2 + 8));
      }
      else
      {
        v34 = *(_OWORD *)a2;
        *(_QWORD *)(v32 + 16) = *(_QWORD *)(a2 + 16);
        *(_OWORD *)v32 = v34;
      }
    }
    v19 = (double *)(*(_QWORD *)(a1 + 176) + 16 * v31);
    *(_DWORD *)v19 = v21;
    v19[1] = v22;
    v37 = *(_QWORD *)(a1 + 248) + 1;
    *(_QWORD *)(a1 + 248) = v37;
    *(_QWORD *)(*(_QWORD *)(a1 + 200) + 8 * v31) = v37;
  }
LABEL_57:
  result = *(unsigned int *)v19;
  if (a3)
  {
    if ((_DWORD)result)
      *a3 = *((_QWORD *)v19 + 1);
  }
  return result;
}

void sub_19C337968(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  const void *v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  if (v9)
    CFRelease(v9);
  _Unwind_Resume(a1);
}

void sub_19C337990(uint64_t a1@<X8>)
{
  sub_19C412E64(a1);
}

_QWORD *sub_19C3379A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  int v5;
  _QWORD *result;
  uint64_t v7;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_DWORD *)(a1 + 280);
  v8[0] = &off_1E3D38B08;
  v9 = v8;
  sub_19C412F18(a3, v4, a2, v8, v5);
  result = v9;
  if (v9 == v8)
  {
    v7 = 4;
    result = v8;
  }
  else
  {
    if (!v9)
      return result;
    v7 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
}

void sub_19C337A44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_19C337A80()
{
  sub_19C413280();
}

_QWORD *sub_19C337A88@<X0>(_QWORD *a1@<X8>)
{
  uint64_t RootCursor;
  _QWORD *result;

  RootCursor = LXLexiconCreateRootCursor();
  result = (_QWORD *)operator new();
  *result = &off_1E3D35378;
  result[1] = RootCursor;
  *a1 = result;
  return result;
}

uint64_t sub_19C337AD8(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t sub_19C337AE0()
{
  return LXLexiconUnlockMemory();
}

_QWORD *sub_19C337AE8(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const void *v14;
  const void *v15;

  *a1 = &off_1E3D35068;
  v2 = (void *)a1[28];
  if (v2)
  {
    a1[29] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[25];
  if (v3)
  {
    a1[26] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[22];
  if (v4)
  {
    a1[23] = v4;
    operator delete(v4);
  }
  v5 = a1[19];
  if (v5)
  {
    v6 = a1[20];
    v7 = (void *)a1[19];
    if (v6 != v5)
    {
      do
      {
        if (*(char *)(v6 - 1) < 0)
          operator delete(*(void **)(v6 - 24));
        v6 -= 24;
      }
      while (v6 != v5);
      v7 = (void *)a1[19];
    }
    a1[20] = v5;
    operator delete(v7);
  }
  v8 = (void *)a1[12];
  if (v8)
  {
    a1[13] = v8;
    operator delete(v8);
  }
  v9 = (void *)a1[9];
  if (v9)
  {
    a1[10] = v9;
    operator delete(v9);
  }
  v10 = (void *)a1[6];
  if (v10)
  {
    a1[7] = v10;
    operator delete(v10);
  }
  v11 = a1[3];
  if (v11)
  {
    v12 = a1[4];
    v13 = (void *)a1[3];
    if (v12 != v11)
    {
      do
      {
        if (*(char *)(v12 - 1) < 0)
          operator delete(*(void **)(v12 - 24));
        v12 -= 24;
      }
      while (v12 != v11);
      v13 = (void *)a1[3];
    }
    a1[4] = v11;
    operator delete(v13);
  }
  v14 = (const void *)a1[2];
  if (v14)
    CFRelease(v14);
  a1[2] = 0;
  v15 = (const void *)a1[1];
  if (v15)
    CFRelease(v15);
  a1[1] = 0;
  return a1;
}

__n128 sub_19C337C34(std::string *a1, char *__s, std::string *a3)
{
  std::string::size_type v6;
  __n128 *v7;
  __n128 result;

  v6 = strlen(__s);
  v7 = (__n128 *)std::string::insert(a3, 0, __s, v6);
  result = *v7;
  *a1 = *(std::string *)v7->n128_u8;
  v7->n128_u64[0] = 0;
  v7->n128_u64[1] = 0;
  v7[1].n128_u64[0] = 0;
  return result;
}

uint64_t sub_19C337C94()
{
  unsigned __int8 v0;
  NSObject *v1;
  uint64_t v3;
  _BYTE __p[12];
  __int16 v5;
  uint64_t v6;
  char v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v0 = atomic_load((unsigned __int8 *)&qword_1EDB97200);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_1EDB97200))
  {
    sub_19C2A6D48(__p, "StaticTokenIDCacheSize");
    qword_1EDB970A0 = sub_19C3AA22C((uint64_t)__p);
    *(_QWORD *)&byte_1EDB970A8 = v3;
    if (v7 < 0)
      operator delete(*(void **)__p);
    __cxa_guard_release(&qword_1EDB97200);
  }
  if (!byte_1EDB970A8)
    return 100;
  if (qword_1EDB97228 != -1)
    dispatch_once(&qword_1EDB97228, &unk_1E3D3ABD0);
  v1 = qword_1EDB97220;
  if (os_log_type_enabled((os_log_t)qword_1EDB97220, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__p = 136315394;
    *(_QWORD *)&__p[4] = "StaticTokenIDCacheSize";
    v5 = 2048;
    v6 = qword_1EDB970A0;
    _os_log_impl(&dword_19C291000, v1, OS_LOG_TYPE_DEFAULT, "Setting configuration value %s=%zu (overridden by user preferences)", __p, 0x16u);
  }
  return qword_1EDB970A0;
}

void sub_19C337DEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_1EDB97200);
  _Unwind_Resume(a1);
}

uint64_t sub_19C337E1C(uint64_t a1, unint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  char *v7;
  char *v8;
  _BYTE *v9;
  _BYTE *v10;
  int64_t v11;
  char *v12;
  char *v13;

  v6 = sub_19C2996C8((_QWORD *)a1, a2);
  v6[3] = 0;
  v6[4] = 0;
  v6[5] = 0;
  if (a2)
  {
    if (a2 >> 62)
      sub_19C2A18E8();
    v7 = (char *)operator new(4 * a2);
    *(_QWORD *)(a1 + 24) = v7;
    *(_QWORD *)(a1 + 40) = &v7[4 * a2];
    bzero(v7, 4 * a2);
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 32) = &v7[4 * a2];
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    if (a2 >> 61)
      sub_19C2A18E8();
    v8 = (char *)operator new(8 * a2);
    *(_QWORD *)(a1 + 48) = v8;
    *(_QWORD *)(a1 + 64) = &v8[8 * a2];
    bzero(v8, 8 * a2);
    *(_QWORD *)(a1 + 56) = &v8[8 * a2];
  }
  else
  {
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
  }
  v10 = *(_BYTE **)a3;
  v9 = *(_BYTE **)(a3 + 8);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  v11 = v9 - v10;
  if (v9 != v10)
  {
    if (v11 < 0)
      sub_19C2A18E8();
    v12 = (char *)operator new(v9 - v10);
    *(_QWORD *)(a1 + 72) = v12;
    *(_QWORD *)(a1 + 80) = v12;
    v13 = &v12[4 * (v11 >> 2)];
    *(_QWORD *)(a1 + 88) = v13;
    memmove(v12, v10, v11);
    *(_QWORD *)(a1 + 80) = v13;
  }
  *(_QWORD *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  return a1;
}

void sub_19C337F78(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void **v4;
  _QWORD *v5;
  void **v6;
  void *v8;
  void *v9;
  void *v10;

  v6 = v4;
  v8 = *v6;
  if (*v6)
  {
    *(_QWORD *)(v1 + 80) = v8;
    operator delete(v8);
    v9 = *v3;
    if (!*v3)
    {
LABEL_3:
      v10 = *v2;
      if (!*v2)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else
  {
    v9 = *v3;
    if (!*v3)
      goto LABEL_3;
  }
  *v5 = v9;
  operator delete(v9);
  v10 = *v2;
  if (!*v2)
  {
LABEL_5:
    sub_19C307B68((void **)v1);
    _Unwind_Resume(a1);
  }
LABEL_4:
  *(_QWORD *)(v1 + 32) = v10;
  operator delete(v10);
  goto LABEL_5;
}

void sub_19C337FE4()
{
  _QWORD *v0;

  if (!*v0)
    JUMPOUT(0x19C337FA0);
  JUMPOUT(0x19C337F98);
}

uint64_t sub_19C337FF4(uint64_t a1, unint64_t a2, char **a3)
{
  _QWORD *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  _OWORD *v16;
  __int128 v17;

  v6 = sub_19C2996C8((_QWORD *)a1, a2);
  v6[3] = 0;
  v6[4] = 0;
  v6[5] = 0;
  if (a2)
  {
    if (a2 >> 60)
      sub_19C2A18E8();
    v7 = (char *)operator new(16 * a2);
    *(_QWORD *)(a1 + 24) = v7;
    *(_QWORD *)(a1 + 32) = v7;
    v8 = &v7[16 * a2];
    *(_QWORD *)(a1 + 40) = v8;
    if (((a2 - 1) & 0xFFFFFFFFFFFFFFFLL) != 0)
    {
      v9 = ((a2 - 1) & 0xFFFFFFFFFFFFFFFLL) + 1;
      v10 = v7 + 16;
      v11 = v9 & 0x1FFFFFFFFFFFFFFELL;
      do
      {
        *((_DWORD *)v10 - 4) = 0;
        *(_DWORD *)v10 = 0;
        *((_QWORD *)v10 - 1) = 0;
        *((_QWORD *)v10 + 1) = 0;
        v10 += 32;
        v11 -= 2;
      }
      while (v11);
      if (v9 == (v9 & 0x1FFFFFFFFFFFFFFELL))
        goto LABEL_9;
      v7 += 16 * (v9 & 0x1FFFFFFFFFFFFFFELL);
    }
    do
    {
      *(_DWORD *)v7 = 0;
      *((_QWORD *)v7 + 1) = 0;
      v7 += 16;
    }
    while (v7 != v8);
LABEL_9:
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 32) = v8;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    v12 = (char *)operator new(8 * a2);
    *(_QWORD *)(a1 + 48) = v12;
    *(_QWORD *)(a1 + 64) = &v12[8 * a2];
    bzero(v12, 8 * a2);
    *(_QWORD *)(a1 + 56) = &v12[8 * a2];
    goto LABEL_11;
  }
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
LABEL_11:
  v13 = *a3;
  v14 = a3[1];
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  v15 = v14 - v13;
  if (v14 != v13)
  {
    if (v15 < 0)
      sub_19C2A18E8();
    v16 = operator new(v14 - v13);
    *(_QWORD *)(a1 + 72) = v16;
    *(_QWORD *)(a1 + 80) = v16;
    *(_QWORD *)(a1 + 88) = &v16[v15 >> 4];
    do
    {
      v17 = *(_OWORD *)v13;
      v13 += 16;
      *v16++ = v17;
    }
    while (v13 != v14);
    *(_QWORD *)(a1 + 80) = v16;
  }
  *(_QWORD *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  return a1;
}

void sub_19C33817C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 32) = v4;
    operator delete(v4);
  }
  sub_19C307B68((void **)v1);
  _Unwind_Resume(a1);
}

const void **sub_19C3381E8(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  *a1 = 0;
  return a1;
}

uint64_t sub_19C33821C(uint64_t a1, const void *a2, CFDictionaryRef *a3, CFDictionaryRef ***a4)
{
  __CFDictionary *Mutable;
  const __CFURL *Value;
  CFStringRef v10;
  __CFArray *v11;
  CFDictionaryRef **v12;
  CFDictionaryRef **v13;
  const __CFURL *v14;
  CFStringRef v15;
  const __CFDictionary *v16;
  const void *v17;
  const void *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  const void *v22;
  const void *v23;
  _BYTE *exception;
  char *v26;
  std::string v27;

  *(_QWORD *)a1 = &off_1E3D35068;
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  Value = (const __CFURL *)CFDictionaryGetValue(*a3, CFSTR("URL"));
  v10 = CFURLCopyFileSystemPath(Value, kCFURLPOSIXPathStyle);
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0D43798], v10);
  if (v10)
    CFRelease(v10);
  v11 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  v12 = *a4;
  v13 = a4[1];
  if (*a4 != v13)
  {
    do
    {
      v14 = (const __CFURL *)CFDictionaryGetValue(**v12, CFSTR("URL"));
      v15 = CFURLCopyFileSystemPath(v14, kCFURLPOSIXPathStyle);
      CFArrayAppendValue(v11, v15);
      if (v15)
        CFRelease(v15);
      v12 += 2;
    }
    while (v12 != v13);
  }
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0D437A0], v11);
  if (v11)
    CFRelease(v11);
  v16 = *a3;
  v17 = (const void *)*MEMORY[0x1E0D437D8];
  if (CFDictionaryContainsKey(v16, (const void *)*MEMORY[0x1E0D437D8]))
  {
    v18 = CFDictionaryGetValue(v16, v17);
    CFDictionaryAddValue(Mutable, v17, v18);
  }
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0D437B8], a2);
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0D437A8], (const void *)*MEMORY[0x1E0C9AE50]);
  v19 = LXLexiconCreate();
  if (!v19)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    v26 = (char *)operator new(0x20uLL);
    strcpy(v26, "Failed to create the lexicon");
    *(_QWORD *)exception = off_1E3D38838;
    sub_19C2B5238(exception + 8, v26, 0x1CuLL);
    __cxa_throw(exception, (struct type_info *)&unk_1E3D32968, (void (*)(void *))sub_19C3123E4);
  }
  if (Mutable)
    CFRelease(Mutable);
  *(_QWORD *)(a1 + 8) = v19;
  *(_QWORD *)(a1 + 16) = 0;
  v20 = sub_19C337C94();
  memset(&v27, 0, sizeof(v27));
  sub_19C337E1C(a1 + 24, v20, (uint64_t)&v27);
  v21 = sub_19C337C94();
  memset(&v27, 0, sizeof(v27));
  sub_19C337FF4(a1 + 152, v21, &v27.__r_.__value_.__l.__data_);
  v22 = *(const void **)(a1 + 16);
  *(_DWORD *)(a1 + 280) = 1;
  if (v22 != a2)
  {
    CFRetain(a2);
    v23 = *(const void **)(a1 + 16);
    if (v23)
      CFRelease(v23);
    *(_QWORD *)(a1 + 16) = a2;
  }
  return a1;
}

void sub_19C3385A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  const void *v17;
  const void *v18;
  std::exception *v19;
  void *v20;

  std::exception::~exception(v19);
  operator delete(v20);
  if (a17 < 0)
    operator delete(__p);
  __cxa_free_exception(v19);
  if (v18)
    CFRelease(v18);
  if (v17)
    CFRelease(v17);
  _Unwind_Resume(a1);
}

const void **sub_19C3387E0(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  *a1 = 0;
  return a1;
}

uint64_t sub_19C338814(uint64_t result, uint64_t a2, _BYTE *a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(*(_QWORD *)(result + 32) + 8);
  v4 = *(_QWORD *)(v3 + 24) + 1;
  *(_QWORD *)(v3 + 24) = v4;
  if (v4 <= *(_QWORD *)(result + 48))
  {
    v5 = result;
    result = LXEntryGetProbability();
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 40) + 8) + 24) = v6;
  }
  else
  {
    *a3 = 1;
  }
  return result;
}

const void **sub_19C338870(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  *a1 = 0;
  return a1;
}

void sub_19C3388A4(void ***a1, void **a2, void **a3, size_t __sz)
{
  void **v6;
  uint64_t v8;
  void **v9;
  void **v10;
  void **v11;
  void **v12;
  void **v13;
  uint64_t v14;
  void *v15;
  size_t v16;
  char v17;
  __int128 v18;
  void *v19;
  size_t v20;
  char v21;
  __int128 v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  void **v29;
  char *v30;
  uint64_t v31;
  __int128 v32;
  char *v33;
  void **v34;

  v6 = a2;
  v8 = (uint64_t)a1[2];
  v9 = *a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)*a1) >> 3) < __sz)
  {
    if (v9)
    {
      v10 = a1[1];
      v11 = *a1;
      if (v10 != v9)
      {
        do
        {
          if (*((char *)v10 - 1) < 0)
            operator delete(*(v10 - 3));
          v10 -= 3;
        }
        while (v10 != v9);
        v11 = *a1;
      }
      a1[1] = v9;
      operator delete(v11);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (__sz > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_70;
    v23 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    v24 = 2 * v23;
    if (2 * v23 <= __sz)
      v24 = __sz;
    v25 = v23 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v24;
    if (v25 > 0xAAAAAAAAAAAAAAALL)
LABEL_70:
      sub_19C2A18E8();
    v26 = 3 * v25;
    v9 = (void **)operator new(24 * v25);
    *a1 = v9;
    a1[1] = v9;
    a1[2] = &v9[v26];
    if (v6 != a3)
    {
      v27 = 0;
      do
      {
        v28 = (char *)&v9[v27];
        v29 = &v6[v27];
        if (SHIBYTE(v6[v27 + 2]) < 0)
        {
          sub_19C2B5238(&v9[v27], *v29, (unint64_t)v29[1]);
        }
        else
        {
          *(_OWORD *)v28 = *(_OWORD *)v29;
          *((_QWORD *)v28 + 2) = v29[2];
        }
        v27 += 3;
      }
      while (&v6[v27] != a3);
      v9 = (void **)((char *)v9 + v27 * 8);
    }
LABEL_55:
    a1[1] = v9;
    return;
  }
  v12 = a1[1];
  if (0xAAAAAAAAAAAAAAABLL * (v12 - v9) >= __sz)
  {
    if (a2 != a3)
    {
      do
      {
        if (v6 != v9)
        {
          v21 = *((_BYTE *)v6 + 23);
          if (*((char *)v9 + 23) < 0)
          {
            if (v21 >= 0)
              v19 = v6;
            else
              v19 = *v6;
            if (v21 >= 0)
              v20 = *((unsigned __int8 *)v6 + 23);
            else
              v20 = (size_t)v6[1];
            sub_19C2E54A8(v9, v19, v20);
          }
          else if ((*((_BYTE *)v6 + 23) & 0x80) != 0)
          {
            sub_19C2E53E4(v9, *v6, (size_t)v6[1]);
          }
          else
          {
            v22 = *(_OWORD *)v6;
            v9[2] = v6[2];
            *(_OWORD *)v9 = v22;
          }
        }
        v6 += 3;
        v9 += 3;
      }
      while (v6 != a3);
      v12 = a1[1];
    }
    while (v12 != v9)
    {
      if (*((char *)v12 - 1) < 0)
        operator delete(*(v12 - 3));
      v12 -= 3;
    }
    goto LABEL_55;
  }
  v13 = &a2[v12 - v9];
  if (v12 != v9)
  {
    v14 = 8 * (v12 - v9);
    do
    {
      if (v6 != v9)
      {
        v17 = *((_BYTE *)v6 + 23);
        if (*((char *)v9 + 23) < 0)
        {
          if (v17 >= 0)
            v15 = v6;
          else
            v15 = *v6;
          if (v17 >= 0)
            v16 = *((unsigned __int8 *)v6 + 23);
          else
            v16 = (size_t)v6[1];
          sub_19C2E54A8(v9, v15, v16);
        }
        else if ((*((_BYTE *)v6 + 23) & 0x80) != 0)
        {
          sub_19C2E53E4(v9, *v6, (size_t)v6[1]);
        }
        else
        {
          v18 = *(_OWORD *)v6;
          v9[2] = v6[2];
          *(_OWORD *)v9 = v18;
        }
      }
      v6 += 3;
      v9 += 3;
      v14 -= 24;
    }
    while (v14);
    v9 = a1[1];
  }
  v30 = (char *)v9;
  if (v13 != a3)
  {
    v31 = 0;
    do
    {
      v33 = (char *)&v9[v31];
      v34 = &v13[v31];
      if (SHIBYTE(v13[v31 + 2]) < 0)
      {
        sub_19C2B5238(&v9[v31], *v34, (unint64_t)v34[1]);
      }
      else
      {
        v32 = *(_OWORD *)v34;
        *((_QWORD *)v33 + 2) = v34[2];
        *(_OWORD *)v33 = v32;
      }
      v31 += 3;
    }
    while (&v13[v31] != a3);
    v30 = (char *)&v9[v31];
  }
  a1[1] = (void **)v30;
}

void sub_19C338C20(uint64_t a1, uint64_t *a2, const void **a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  _WORD *v12;
  int v13;
  size_t v14;
  unint64_t v15;
  __int128 *p_dst;
  uint64_t v17;
  uint64_t v18;
  const void *v19;
  char *v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  char *v24;
  unint64_t v25;
  unsigned int v26;
  int v27;
  size_t v28;
  unint64_t v29;
  __int128 *v30;
  uint64_t v31;
  uint64_t v32;
  const void *v33;
  unint64_t v34;
  __int128 v35;
  char *v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  _WORD *v42;
  const char *v43;
  unsigned __int8 v44;
  const __CFString *v45;
  CFIndex Length;
  const char *CStringPtr;
  unint64_t v48;
  uint64_t v49;
  UniChar v50;
  CFIndex v51;
  unsigned __int8 v52;
  int IsCharacterMember;
  unsigned __int8 v54;
  int v55;
  CFIndex v56;
  CFIndex v57;
  uint64_t v58;
  uint64_t v59;
  CFIndex v60;
  UniChar v61;
  unsigned __int8 v62;
  uint64_t v63;
  uint64_t v65;
  CFIndex v66;
  CFIndex v67;
  uint64_t v68;
  CFIndex v69;
  _BYTE *v70;
  _WORD *v71;
  _BYTE *v72;
  _WORD *v73;
  _BYTE *v74;
  _BYTE *p_p;
  char v76;
  int v77;
  size_t v78;
  unint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  const void *v83;
  std::string::size_type v84;
  const std::string::value_type *v85;
  std::string *v86;
  __int128 v87;
  const std::string::value_type *v88;
  std::string::size_type v89;
  std::string *v90;
  std::string *v91;
  char *v92;
  int v93;
  int v94;
  size_t v95;
  unint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  const void *v100;
  std::string *v101;
  __int128 v102;
  const std::string::value_type *v103;
  std::string::size_type v104;
  std::string *v105;
  std::string *v106;
  char *v107;
  int v108;
  int v109;
  size_t v110;
  unint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  const void *v115;
  const std::string::value_type *v116;
  std::string *v117;
  __int128 v118;
  const std::string::value_type *v119;
  std::string::size_type v120;
  std::string *v121;
  __int128 v122;
  std::string *v123;
  std::string *v124;
  char *v125;
  int v126;
  CFMutableStringRef v127;
  int v128;
  std::string v129;
  std::string v130;
  std::string v131;
  std::string v132;
  void *__p;
  uint64_t v134;
  uint64_t v135;
  void *v136;
  uint64_t v137;
  uint64_t v138;
  __int128 __dst;
  unint64_t v140;
  CFStringRef theString;
  const UniChar *CharactersPtr;
  const char *v143;
  uint64_t v144;
  CFIndex v145;
  uint64_t v146;
  uint64_t v147;
  CFMutableStringRef MutableCopy;
  CFStringRef v149;
  CFRange v150;
  CFRange v151;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v9 = *a2;
  v8 = a2[1];
  if (*a2 != v8)
  {
    while (1)
    {
      v10 = *(unsigned __int8 *)(v9 + 23);
      v11 = (char)v10;
      if ((v10 & 0x80u) != 0)
        v10 = *(_QWORD *)(v9 + 8);
      if (v10 == 2)
      {
        v12 = v11 >= 0 ? (_WORD *)v9 : *(_WORD **)v9;
        if (*v12 == 28261)
          break;
      }
      v9 += 24;
      if (v9 == v8)
        goto LABEL_60;
    }
  }
  if (v9 != v8)
  {
    v13 = *((char *)a3 + 23);
    v14 = v13 >= 0 ? *((unsigned __int8 *)a3 + 23) : (size_t)a3[1];
    if (v14)
    {
      v15 = v14 + 2;
      if (v14 + 2 > 0x7FFFFFFFFFFFFFF7)
        sub_19C2A1A54();
      if (v15 > 0x16)
      {
        v17 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v15 | 7) != 0x17)
          v17 = v15 | 7;
        v18 = v17 + 1;
        p_dst = (__int128 *)operator new(v17 + 1);
        *((_QWORD *)&__dst + 1) = v14 + 2;
        v140 = v18 | 0x8000000000000000;
        *(_QWORD *)&__dst = p_dst;
      }
      else
      {
        v140 = 0;
        __dst = 0uLL;
        p_dst = &__dst;
        HIBYTE(v140) = v14 + 2;
      }
      if (v13 >= 0)
        v19 = a3;
      else
        v19 = *a3;
      memmove(p_dst, v19, v14);
      strcpy((char *)p_dst + v14, "'s");
      v20 = sub_19C307C78((void **)a1, (uint64_t)&__dst);
      v21 = SHIBYTE(v140);
      *(_QWORD *)(a1 + 8) = v20;
      if (v21 < 0)
      {
        operator delete((void *)__dst);
        if (a4 != 69)
          goto LABEL_60;
      }
      else if (a4 != 69)
      {
        goto LABEL_60;
      }
      v22 = *((unsigned __int8 *)a3 + 23);
      if (*((char *)a3 + 23) < 0)
      {
        v25 = (unint64_t)a3[1];
        if (!v25)
          goto LABEL_60;
        v24 = (char *)*a3;
        v26 = *((char *)*a3 + v25 - 1) - 115;
        if (v26 <= 7 && ((1 << v26) & 0xA1) != 0)
          goto LABEL_60;
        if (v25 < 2)
        {
LABEL_42:
          v27 = (char)v22;
          if ((v22 & 0x80u) == 0)
            v28 = *((unsigned __int8 *)a3 + 23);
          else
            v28 = (size_t)a3[1];
          v29 = v28 + 1;
          if (v28 + 1 > 0x7FFFFFFFFFFFFFF7)
            sub_19C2A1A54();
          if (v29 >= 0x17)
          {
            v31 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v29 | 7) != 0x17)
              v31 = v29 | 7;
            v32 = v31 + 1;
            v30 = (__int128 *)operator new(v31 + 1);
            *((_QWORD *)&__dst + 1) = v28 + 1;
            v140 = v32 | 0x8000000000000000;
            *(_QWORD *)&__dst = v30;
          }
          else
          {
            v140 = 0;
            __dst = 0uLL;
            v30 = &__dst;
            HIBYTE(v140) = v28 + 1;
            if (!v28)
              goto LABEL_56;
          }
          if (v27 >= 0)
            v33 = a3;
          else
            v33 = *a3;
          memmove(v30, v33, v28);
LABEL_56:
          *(_WORD *)((char *)v30 + v28) = 115;
          v34 = *(_QWORD *)(a1 + 8);
          if (v34 >= *(_QWORD *)(a1 + 16))
          {
            v36 = sub_19C307C78((void **)a1, (uint64_t)&__dst);
            v37 = SHIBYTE(v140);
            *(_QWORD *)(a1 + 8) = v36;
            if (v37 < 0)
              operator delete((void *)__dst);
          }
          else
          {
            v35 = __dst;
            *(_QWORD *)(v34 + 16) = v140;
            *(_OWORD *)v34 = v35;
            *(_QWORD *)(a1 + 8) = v34 + 24;
          }
          goto LABEL_60;
        }
      }
      else
      {
        if (!*((_BYTE *)a3 + 23))
          goto LABEL_60;
        v23 = *((unsigned __int8 *)a3 + *((unsigned __int8 *)a3 + 23) - 1) - 115;
        if (v23 <= 7 && ((1 << v23) & 0xA1) != 0)
          goto LABEL_60;
        v24 = (char *)a3;
        v25 = *((unsigned __int8 *)a3 + 23);
        if (v22 < 2)
          goto LABEL_42;
      }
      if (*(_WORD *)&v24[v25 - 2] == 26739)
        goto LABEL_60;
      goto LABEL_42;
    }
  }
LABEL_60:
  v39 = *a2;
  v38 = a2[1];
  if (*a2 != v38)
  {
    while (1)
    {
      v40 = *(unsigned __int8 *)(v39 + 23);
      v41 = (char)v40;
      if ((v40 & 0x80u) != 0)
        v40 = *(_QWORD *)(v39 + 8);
      if (v40 == 2)
      {
        v42 = v41 >= 0 ? (_WORD *)v39 : *(_WORD **)v39;
        if (*v42 == 29300)
          break;
      }
      v39 += 24;
      if (v39 == v38)
        return;
    }
  }
  if (v39 != v38)
  {
    if (*((char *)a3 + 23) < 0)
    {
      if ((unint64_t)a3[1] <= 1)
        return;
      v43 = (const char *)*a3;
    }
    else
    {
      if (*((unsigned __int8 *)a3 + 23) < 2u)
        return;
      v43 = (const char *)a3;
    }
    v149 = CFStringCreateWithCString(0, v43, 0x8000100u);
    MutableCopy = CFStringCreateMutableCopy(0, 0, v149);
    v44 = atomic_load((unsigned __int8 *)&qword_1EE41C160);
    if ((v44 & 1) == 0 && __cxa_guard_acquire(&qword_1EE41C160))
    {
      qword_1EE41C158 = (uint64_t)CFLocaleCreate(0, CFSTR("tr"));
      __cxa_guard_release(&qword_1EE41C160);
    }
    v45 = MutableCopy;
    CFStringLowercase(MutableCopy, (CFLocaleRef)qword_1EE41C158);
    Length = CFStringGetLength(v45);
    theString = v45;
    v144 = 0;
    v145 = Length;
    CharactersPtr = CFStringGetCharactersPtr(v45);
    if (CharactersPtr)
      CStringPtr = 0;
    else
      CStringPtr = CFStringGetCStringPtr(v45, 0x600u);
    v146 = 0;
    v147 = 0;
    v143 = CStringPtr;
    v48 = Length - 1;
    if (Length >= 1 && (v49 = v145, v145 >= Length))
    {
      if (CharactersPtr)
      {
        v50 = CharactersPtr[v144 + v48];
      }
      else if (CStringPtr)
      {
        v50 = CStringPtr[v144 + v48];
      }
      else
      {
        v51 = Length - 5;
        if ((unint64_t)Length < 5)
          v51 = 0;
        if (v51 + 64 < v145)
          v49 = v51 + 64;
        v146 = v51;
        v147 = v49;
        v150.location = v144 + v51;
        v150.length = v49 - v51;
        CFStringGetCharacters(theString, v150, (UniChar *)&__dst);
        v50 = *((_WORD *)&__dst + v48 - v146);
      }
    }
    else
    {
      v50 = 0;
    }
    v52 = atomic_load((unsigned __int8 *)&qword_1EE41C170);
    if ((v52 & 1) == 0 && __cxa_guard_acquire(&qword_1EE41C170))
    {
      qword_1EE41C168 = (uint64_t)CFCharacterSetCreateWithCharactersInString(0, CFSTR("bcçdfgğhjklmnprsştvyz"));
      __cxa_guard_release(&qword_1EE41C170);
    }
    IsCharacterMember = CFCharacterSetIsCharacterMember((CFCharacterSetRef)qword_1EE41C168, v50);
    v54 = atomic_load((unsigned __int8 *)&qword_1EE41C180);
    if ((v54 & 1) == 0 && __cxa_guard_acquire(&qword_1EE41C180))
    {
      qword_1EE41C178 = (uint64_t)CFCharacterSetCreateWithCharactersInString(0, CFSTR("aeıioöuü"));
      __cxa_guard_release(&qword_1EE41C180);
    }
    v55 = CFCharacterSetIsCharacterMember((CFCharacterSetRef)qword_1EE41C178, v50);
    if (!(v55 | IsCharacterMember))
      goto LABEL_246;
    v128 = v55;
    v136 = 0;
    v137 = 0;
    v138 = 0;
    __p = 0;
    v134 = 0;
    v135 = 0;
    if (Length < 1)
      goto LABEL_244;
    v56 = 1 - Length;
    v57 = Length + 63;
    while (1)
    {
      v58 = Length - 1;
      v59 = v48 >= 4 ? 4 : v48;
      v60 = v145;
      if (v145 <= v58)
      {
        v61 = 0;
      }
      else if (CharactersPtr)
      {
        v61 = CharactersPtr[Length - 1 + v144];
      }
      else if (v143)
      {
        v61 = v143[v144 - 1 + Length];
      }
      else
      {
        v63 = v146;
        if (v147 <= v58 || v146 > v58)
        {
          v65 = v59 + v56;
          v66 = v57 - v59;
          v67 = Length - v59;
          v68 = v67 - 1;
          v69 = v67 + 63;
          if (v69 >= v145)
            v69 = v145;
          v146 = v68;
          v147 = v69;
          if (v145 >= v66)
            v60 = v66;
          v151.length = v60 + v65;
          v151.location = v68 + v144;
          CFStringGetCharacters(theString, v151, (UniChar *)&__dst);
          v63 = v146;
        }
        v61 = *((_WORD *)&v138 + Length - v63 + 3);
      }
      v62 = atomic_load((unsigned __int8 *)&qword_1EE41C180);
      if ((v62 & 1) == 0 && __cxa_guard_acquire(&qword_1EE41C180))
      {
        qword_1EE41C178 = (uint64_t)CFCharacterSetCreateWithCharactersInString(0, CFSTR("aeıioöuü"));
        __cxa_guard_release(&qword_1EE41C180);
      }
      if (CFCharacterSetIsCharacterMember((CFCharacterSetRef)qword_1EE41C178, v61))
        break;
      --v48;
      ++v56;
      --v57;
      Length = v58;
      if (v58 <= 0)
        goto LABEL_244;
    }
    if (v61 > 0xF5u)
    {
      v70 = (char *)&__p + 1;
      if (v61 == 246 || v61 == 252)
      {
        if (SHIBYTE(v138) < 0)
        {
          v137 = 2;
          v74 = v136;
        }
        else
        {
          HIBYTE(v138) = 2;
          v74 = &v136;
        }
        *(_WORD *)v74 = -17213;
        v74[2] = 0;
LABEL_149:
        if (SHIBYTE(v135) < 0)
        {
          v134 = 1;
          p_p = __p;
          v70 = (char *)__p + 1;
        }
        else
        {
          HIBYTE(v135) = 1;
          p_p = &__p;
        }
        v76 = 101;
      }
      else
      {
        if (v61 != 305)
          goto LABEL_154;
LABEL_131:
        if (SHIBYTE(v138) < 0)
        {
          v137 = 2;
          v72 = v136;
        }
        else
        {
          HIBYTE(v138) = 2;
          v72 = &v136;
        }
        *(_WORD *)v72 = -20028;
        v72[2] = 0;
LABEL_143:
        if (SHIBYTE(v135) < 0)
        {
          v134 = 1;
          p_p = __p;
          v70 = (char *)__p + 1;
        }
        else
        {
          HIBYTE(v135) = 1;
          p_p = &__p;
        }
        v76 = 97;
      }
      *p_p = v76;
      *v70 = 0;
    }
    else
    {
      v70 = (char *)&__p + 1;
      switch(v61)
      {
        case 'a':
          goto LABEL_131;
        case 'e':
        case 'i':
          if (SHIBYTE(v138) < 0)
          {
            v137 = 1;
            v71 = v136;
          }
          else
          {
            HIBYTE(v138) = 1;
            v71 = &v136;
          }
          *v71 = 105;
          goto LABEL_149;
        case 'o':
        case 'u':
          if (SHIBYTE(v138) < 0)
          {
            v137 = 1;
            v73 = v136;
          }
          else
          {
            HIBYTE(v138) = 1;
            v73 = &v136;
          }
          *v73 = 117;
          goto LABEL_143;
        default:
          break;
      }
    }
LABEL_154:
    v77 = *((char *)a3 + 23);
    if (v77 >= 0)
      v78 = *((unsigned __int8 *)a3 + 23);
    else
      v78 = (size_t)a3[1];
    v79 = v78 + 1;
    if (v78 + 1 > 0x7FFFFFFFFFFFFFF7)
      sub_19C2A1A54();
    if (v79 >= 0x17)
    {
      v81 = (v79 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v79 | 7) != 0x17)
        v81 = v79 | 7;
      v82 = v81 + 1;
      v80 = (char *)operator new(v81 + 1);
      v130.__r_.__value_.__l.__size_ = v78 + 1;
      v130.__r_.__value_.__r.__words[2] = v82 | 0x8000000000000000;
      v130.__r_.__value_.__r.__words[0] = (std::string::size_type)v80;
    }
    else
    {
      memset(&v130, 0, sizeof(v130));
      v80 = (char *)&v130;
      *((_BYTE *)&v130.__r_.__value_.__s + 23) = v78 + 1;
      if (!v78)
        goto LABEL_168;
    }
    if (v77 >= 0)
      v83 = a3;
    else
      v83 = *a3;
    memmove(v80, v83, v78);
LABEL_168:
    *(_WORD *)&v80[v78] = 39;
    v84 = v128 != 0;
    if (v128)
      v85 = "y";
    else
      v85 = "";
    v86 = std::string::append(&v130, v85, v84);
    v87 = *(_OWORD *)&v86->__r_.__value_.__l.__data_;
    v131.__r_.__value_.__r.__words[2] = v86->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v131.__r_.__value_.__l.__data_ = v87;
    v86->__r_.__value_.__l.__size_ = 0;
    v86->__r_.__value_.__r.__words[2] = 0;
    v86->__r_.__value_.__r.__words[0] = 0;
    if (v138 >= 0)
      v88 = (const std::string::value_type *)&v136;
    else
      v88 = (const std::string::value_type *)v136;
    if (v138 >= 0)
      v89 = HIBYTE(v138);
    else
      v89 = v137;
    v90 = std::string::append(&v131, v88, v89);
    v132 = *v90;
    v90->__r_.__value_.__l.__size_ = 0;
    v90->__r_.__value_.__r.__words[2] = 0;
    v90->__r_.__value_.__r.__words[0] = 0;
    v91 = *(std::string **)(a1 + 8);
    if ((unint64_t)v91 < *(_QWORD *)(a1 + 16))
    {
      *v91 = v132;
      *(_QWORD *)(a1 + 8) = v91 + 1;
      if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_179;
LABEL_183:
      if ((SHIBYTE(v130.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_184:
        v94 = *((char *)a3 + 23);
        if (v94 >= 0)
          v95 = *((unsigned __int8 *)a3 + 23);
        else
          v95 = (size_t)a3[1];
        v96 = v95 + 1;
        if (v95 + 1 > 0x7FFFFFFFFFFFFFF7)
          sub_19C2A1A54();
        if (v96 >= 0x17)
        {
          v98 = (v96 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v96 | 7) != 0x17)
            v98 = v96 | 7;
          v99 = v98 + 1;
          v97 = (char *)operator new(v98 + 1);
          v130.__r_.__value_.__l.__size_ = v95 + 1;
          v130.__r_.__value_.__r.__words[2] = v99 | 0x8000000000000000;
          v130.__r_.__value_.__r.__words[0] = (std::string::size_type)v97;
        }
        else
        {
          memset(&v130, 0, sizeof(v130));
          v97 = (char *)&v130;
          *((_BYTE *)&v130.__r_.__value_.__s + 23) = v95 + 1;
          if (!v95)
            goto LABEL_198;
        }
        if (v94 >= 0)
          v100 = a3;
        else
          v100 = *a3;
        memmove(v97, v100, v95);
LABEL_198:
        *(_WORD *)&v97[v95] = 39;
        v101 = std::string::append(&v130, v85, v84);
        v102 = *(_OWORD *)&v101->__r_.__value_.__l.__data_;
        v131.__r_.__value_.__r.__words[2] = v101->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v131.__r_.__value_.__l.__data_ = v102;
        v101->__r_.__value_.__l.__size_ = 0;
        v101->__r_.__value_.__r.__words[2] = 0;
        v101->__r_.__value_.__r.__words[0] = 0;
        if (v135 >= 0)
          v103 = (const std::string::value_type *)&__p;
        else
          v103 = (const std::string::value_type *)__p;
        if (v135 >= 0)
          v104 = HIBYTE(v135);
        else
          v104 = v134;
        v105 = std::string::append(&v131, v103, v104);
        v132 = *v105;
        v105->__r_.__value_.__l.__size_ = 0;
        v105->__r_.__value_.__r.__words[2] = 0;
        v105->__r_.__value_.__r.__words[0] = 0;
        v106 = *(std::string **)(a1 + 8);
        if ((unint64_t)v106 < *(_QWORD *)(a1 + 16))
        {
          *v106 = v132;
          *(_QWORD *)(a1 + 8) = v106 + 1;
          if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_206;
LABEL_210:
          if ((SHIBYTE(v130.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_211:
            v109 = *((char *)a3 + 23);
            if (v109 >= 0)
              v110 = *((unsigned __int8 *)a3 + 23);
            else
              v110 = (size_t)a3[1];
            v111 = v110 + 1;
            if (v110 + 1 > 0x7FFFFFFFFFFFFFF7)
              sub_19C2A1A54();
            if (v111 >= 0x17)
            {
              v113 = (v111 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v111 | 7) != 0x17)
                v113 = v111 | 7;
              v114 = v113 + 1;
              v112 = (char *)operator new(v113 + 1);
              v129.__r_.__value_.__l.__size_ = v110 + 1;
              v129.__r_.__value_.__r.__words[2] = v114 | 0x8000000000000000;
              v129.__r_.__value_.__r.__words[0] = (std::string::size_type)v112;
            }
            else
            {
              memset(&v129, 0, sizeof(v129));
              v112 = (char *)&v129;
              *((_BYTE *)&v129.__r_.__value_.__s + 23) = v110 + 1;
              if (!v110)
                goto LABEL_225;
            }
            if (v109 >= 0)
              v115 = a3;
            else
              v115 = *a3;
            memmove(v112, v115, v110);
LABEL_225:
            *(_WORD *)&v112[v110] = 39;
            if (v128)
              v116 = "n";
            else
              v116 = "";
            v117 = std::string::append(&v129, v116, v84);
            v118 = *(_OWORD *)&v117->__r_.__value_.__l.__data_;
            v130.__r_.__value_.__r.__words[2] = v117->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v130.__r_.__value_.__l.__data_ = v118;
            v117->__r_.__value_.__l.__size_ = 0;
            v117->__r_.__value_.__r.__words[2] = 0;
            v117->__r_.__value_.__r.__words[0] = 0;
            if (v138 >= 0)
              v119 = (const std::string::value_type *)&v136;
            else
              v119 = (const std::string::value_type *)v136;
            if (v138 >= 0)
              v120 = HIBYTE(v138);
            else
              v120 = v137;
            v121 = std::string::append(&v130, v119, v120);
            v122 = *(_OWORD *)&v121->__r_.__value_.__l.__data_;
            v131.__r_.__value_.__r.__words[2] = v121->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v131.__r_.__value_.__l.__data_ = v122;
            v121->__r_.__value_.__l.__size_ = 0;
            v121->__r_.__value_.__r.__words[2] = 0;
            v121->__r_.__value_.__r.__words[0] = 0;
            v123 = std::string::append(&v131, "n", 1uLL);
            v132 = *v123;
            v123->__r_.__value_.__l.__size_ = 0;
            v123->__r_.__value_.__r.__words[2] = 0;
            v123->__r_.__value_.__r.__words[0] = 0;
            v124 = *(std::string **)(a1 + 8);
            if ((unint64_t)v124 < *(_QWORD *)(a1 + 16))
            {
              *v124 = v132;
              *(_QWORD *)(a1 + 8) = v124 + 1;
              if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0)
                goto LABEL_236;
LABEL_242:
              if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0)
              {
LABEL_237:
                operator delete(v130.__r_.__value_.__l.__data_);
                if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0)
                  goto LABEL_238;
                goto LABEL_244;
              }
LABEL_243:
              if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0)
              {
LABEL_238:
                operator delete(v129.__r_.__value_.__l.__data_);
                if (SHIBYTE(v135) < 0)
                {
LABEL_251:
                  operator delete(__p);
                  if (SHIBYTE(v138) < 0)
                  {
LABEL_252:
                    operator delete(v136);
                    v127 = MutableCopy;
                    if (!MutableCopy)
                    {
LABEL_248:
                      if (v149)
                        CFRelease(v149);
                      return;
                    }
LABEL_247:
                    CFRelease(v127);
                    goto LABEL_248;
                  }
LABEL_246:
                  v127 = MutableCopy;
                  if (!MutableCopy)
                    goto LABEL_248;
                  goto LABEL_247;
                }
LABEL_245:
                if (SHIBYTE(v138) < 0)
                  goto LABEL_252;
                goto LABEL_246;
              }
LABEL_244:
              if (SHIBYTE(v135) < 0)
                goto LABEL_251;
              goto LABEL_245;
            }
            v125 = sub_19C307C78((void **)a1, (uint64_t)&v132);
            v126 = SHIBYTE(v132.__r_.__value_.__r.__words[2]);
            *(_QWORD *)(a1 + 8) = v125;
            if (v126 < 0)
            {
              operator delete(v132.__r_.__value_.__l.__data_);
              if ((SHIBYTE(v131.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_242;
            }
            else if ((SHIBYTE(v131.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
              goto LABEL_242;
            }
LABEL_236:
            operator delete(v131.__r_.__value_.__l.__data_);
            if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_237;
            goto LABEL_243;
          }
LABEL_207:
          operator delete(v130.__r_.__value_.__l.__data_);
          goto LABEL_211;
        }
        v107 = sub_19C307C78((void **)a1, (uint64_t)&v132);
        v108 = SHIBYTE(v132.__r_.__value_.__r.__words[2]);
        *(_QWORD *)(a1 + 8) = v107;
        if (v108 < 0)
        {
          operator delete(v132.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v131.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_210;
        }
        else if ((SHIBYTE(v131.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_210;
        }
LABEL_206:
        operator delete(v131.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v130.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_211;
        goto LABEL_207;
      }
LABEL_180:
      operator delete(v130.__r_.__value_.__l.__data_);
      goto LABEL_184;
    }
    v92 = sub_19C307C78((void **)a1, (uint64_t)&v132);
    v93 = SHIBYTE(v132.__r_.__value_.__r.__words[2]);
    *(_QWORD *)(a1 + 8) = v92;
    if (v93 < 0)
    {
      operator delete(v132.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v131.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_183;
    }
    else if ((SHIBYTE(v131.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_183;
    }
LABEL_179:
    operator delete(v131.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v130.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_184;
    goto LABEL_180;
  }
}

void sub_19C339A0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  void **v56;
  uint64_t v57;

  __cxa_guard_abort(&qword_1EE41C180);
  sub_19C339C1C((const void **)(v57 - 104));
  sub_19C2FE810((const void **)(v57 - 96));
  sub_19C307B68(v56);
  _Unwind_Resume(a1);
}

const void **sub_19C339C1C(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  *a1 = 0;
  return a1;
}

void sub_19C339C54(_QWORD *a1)
{
  sub_19C33AA18(a1);
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C339C78(uint64_t a1)
{
  return sub_19C33A8B8(*(_QWORD *)(a1 + 24));
}

uint64_t sub_19C339C80(uint64_t a1, uint64_t a2, int a3, unsigned int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v8;
  int v9;
  uint64_t v11;
  void *v12;
  void *v13;
  os_signpost_id_t v14;
  unint64_t v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  NSObject *v21;
  NSObject *v23;
  int v24;
  int v25;
  void *v26;
  uint8_t buf[8];
  uint8_t *v28;
  uint64_t v29;
  void *v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;

  v6 = a2;
  v33 = *MEMORY[0x1E0C80C00];
  v25 = a3;
  if (a6)
  {
    LODWORD(v8) = a4;
    if (a4 >= 6)
    {
      if (qword_1EDB97228 == -1)
        goto LABEL_40;
      goto LABEL_44;
    }
    v9 = a6;
    v24 = dword_19C470898[a4];
    v8 = *(_QWORD *)(a1 + 24);
    if (a2)
      v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    v11 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)buf = 0;
    v28 = buf;
    v29 = 0x2000000000;
    v12 = off_1EE41C0A8;
    v30 = off_1EE41C0A8;
    if (off_1EE41C0A8)
      goto LABEL_23;
    v26 = 0;
    if (qword_1EDB96F68)
    {
      v13 = (void *)qword_1EDB96F68;
LABEL_22:
      v12 = dlsym(v13, "MRLModelRecognizeIncrementalClassPlusSuffixIds");
      *((_QWORD *)v28 + 3) = v12;
      off_1EE41C0A8 = v12;
LABEL_23:
      _Block_object_dispose(buf, 8);
      if (v12)
      {
        ((void (*)(uint64_t, uint64_t, int *, uint64_t, uint64_t, int *, uint64_t, uint64_t, int))v12)(v8, v6, &v25, 1, v11, &v24, 1, a5, v9);
        return *(_QWORD *)(a1 + 32);
      }
      goto LABEL_33;
    }
    v31 = xmmword_1E3D3A2E8;
    v32 = 0;
    qword_1EDB96F68 = _sl_dlopen();
    v13 = (void *)qword_1EDB96F68;
    if (qword_1EDB96F68)
      goto LABEL_22;
LABEL_37:
    abort_report_np();
    goto LABEL_43;
  }
  if (qword_1EDB971E0 != -1)
    dispatch_once(&qword_1EDB971E0, &unk_1E3D3AC10);
  v14 = os_signpost_id_generate((os_log_t)qword_1EDB971D8);
  if (qword_1EDB971E0 != -1)
    dispatch_once(&qword_1EDB971E0, &unk_1E3D3AC10);
  v15 = v14 - 1;
  if (v14 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v16 = qword_1EDB971D8;
    if (os_signpost_enabled((os_log_t)qword_1EDB971D8))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_19C291000, v16, OS_SIGNPOST_INTERVAL_BEGIN, v14, "MontrealRecognizeIncremental", (const char *)&unk_19C47C5B5, buf, 2u);
    }
  }
  v17 = *(_QWORD *)(a1 + 24);
  if (v6)
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
  else
    v8 = 0;
  v18 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)buf = 0;
  v28 = buf;
  v29 = 0x2000000000;
  v19 = off_1EE41C0A0;
  v30 = off_1EE41C0A0;
  if (!off_1EE41C0A0)
  {
    v26 = 0;
    if (qword_1EDB96F68)
    {
      v20 = (void *)qword_1EDB96F68;
    }
    else
    {
      v31 = xmmword_1E3D3A2E8;
      v32 = 0;
      qword_1EDB96F68 = _sl_dlopen();
      v20 = (void *)qword_1EDB96F68;
      if (!qword_1EDB96F68)
        goto LABEL_37;
    }
    v19 = dlsym(v20, "MRLModelRecognizeIncremental");
    *((_QWORD *)v28 + 3) = v19;
    off_1EE41C0A0 = v19;
  }
  _Block_object_dispose(buf, 8);
  if (!v19)
  {
LABEL_33:
    dlerror();
    abort_report_np();
LABEL_43:
    __break(1u);
LABEL_44:
    dispatch_once(&qword_1EDB97228, &unk_1E3D3ABD0);
LABEL_40:
    v23 = qword_1EDB97220;
    if (os_log_type_enabled((os_log_t)qword_1EDB97220, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v8;
      _os_log_error_impl(&dword_19C291000, v23, OS_LOG_TYPE_ERROR, "unknown neural network output class: %d", buf, 8u);
    }
    __assert_rtn("convert", "LegacyMontreal.cpp", 80, "false");
  }
  ((void (*)(uint64_t, uint64_t, int *, uint64_t, uint64_t))v19)(v17, v8, &v25, 1, v18);
  if (qword_1EDB971E0 == -1)
  {
    if (v15 > 0xFFFFFFFFFFFFFFFDLL)
      return *(_QWORD *)(a1 + 32);
  }
  else
  {
    dispatch_once(&qword_1EDB971E0, &unk_1E3D3AC10);
    if (v15 > 0xFFFFFFFFFFFFFFFDLL)
      return *(_QWORD *)(a1 + 32);
  }
  v21 = qword_1EDB971D8;
  if (os_signpost_enabled((os_log_t)qword_1EDB971D8))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_19C291000, v21, OS_SIGNPOST_INTERVAL_END, v14, "MontrealRecognizeIncremental", (const char *)&unk_19C47C5B5, buf, 2u);
  }
  return *(_QWORD *)(a1 + 32);
}

void sub_19C33A13C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19C33A15C(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  _QWORD *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v4 = a1[3];
  v19 = 0;
  v20 = &v19;
  v21 = 0x2000000000;
  v5 = off_1EE41C090;
  v22 = off_1EE41C090;
  if (!off_1EE41C090)
  {
    v23 = 0;
    if (qword_1EDB96F68)
    {
      v6 = (void *)qword_1EDB96F68;
    }
    else
    {
      v24 = xmmword_1E3D3A2E8;
      v25 = 0;
      qword_1EDB96F68 = _sl_dlopen();
      v6 = (void *)qword_1EDB96F68;
      if (!qword_1EDB96F68)
        goto LABEL_28;
      if (v23)
        free(v23);
    }
    v5 = dlsym(v6, "MRLModelStateCreate");
    v20[3] = (uint64_t)v5;
    off_1EE41C090 = v5;
  }
  _Block_object_dispose(&v19, 8);
  if (!v5)
  {
LABEL_26:
    dlerror();
    abort_report_np();
    goto LABEL_31;
  }
  v7 = ((uint64_t (*)(uint64_t))v5)(v4);
  v8 = a1[3];
  v19 = 0;
  v20 = &v19;
  v21 = 0x2000000000;
  v9 = off_1EE41C088;
  v22 = off_1EE41C088;
  if (!off_1EE41C088)
  {
    v23 = 0;
    if (qword_1EDB96F68)
    {
      v10 = (void *)qword_1EDB96F68;
LABEL_15:
      v9 = dlsym(v10, "MRLModelStateSave");
      v20[3] = (uint64_t)v9;
      off_1EE41C088 = v9;
      goto LABEL_16;
    }
    v24 = xmmword_1E3D3A2E8;
    v25 = 0;
    qword_1EDB96F68 = _sl_dlopen();
    v10 = (void *)qword_1EDB96F68;
    if (qword_1EDB96F68)
    {
      if (v23)
        free(v23);
      goto LABEL_15;
    }
LABEL_28:
    abort_report_np();
LABEL_31:
    __break(1u);
  }
LABEL_16:
  _Block_object_dispose(&v19, 8);
  if (!v9)
    goto LABEL_26;
  ((void (*)(uint64_t, uint64_t, uint64_t))v9)(v8, v7, 1);
  v12 = a1[1];
  v11 = (std::__shared_weak_count *)a1[2];
  v19 = v12;
  if (!v11 || (v13 = std::__shared_weak_count::lock(v11), (v20 = (uint64_t *)v13) == 0))
    sub_19C31AF2C();
  v14 = v13;
  v15 = (_QWORD *)operator new();
  *v15 = &off_1E3D36158;
  v15[1] = v7;
  v15[2] = v12;
  v15[3] = v14;
  p_shared_owners = (unint64_t *)&v14->__shared_owners_;
  do
    v17 = __ldxr(p_shared_owners);
  while (__stxr(v17 + 1, p_shared_owners));
  *a2 = v15;
  do
    v18 = __ldaxr(p_shared_owners);
  while (__stlxr(v18 - 1, p_shared_owners));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
}

void sub_19C33A43C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C2B43C8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19C33A450(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_19C33A470(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 24);
  v5 = 0;
  v6 = &v5;
  v7 = 0x2000000000;
  v2 = off_1EE41C188;
  v8 = off_1EE41C188;
  if (off_1EE41C188)
    goto LABEL_7;
  v9 = 0;
  if (qword_1EDB96F68)
  {
    v2 = (void *)qword_1EDB96F68;
  }
  else
  {
    v10 = xmmword_1E3D3A2E8;
    v11 = 0;
    qword_1EDB96F68 = _sl_dlopen();
    v3 = v9;
    v2 = (void *)qword_1EDB96F68;
    if (!qword_1EDB96F68)
    {
      v3 = (void *)abort_report_np();
      goto LABEL_11;
    }
    if (v9)
      goto LABEL_12;
  }
  while (1)
  {
    v2 = dlsym(v2, "MRLModelLock");
    v6[3] = (uint64_t)v2;
    off_1EE41C188 = v2;
LABEL_7:
    _Block_object_dispose(&v5, 8);
    if (v2)
      break;
    dlerror();
    v3 = (void *)abort_report_np();
LABEL_11:
    __break(1u);
LABEL_12:
    free(v3);
  }
  return ((uint64_t (*)(uint64_t))v2)(v1);
}

void sub_19C33A5B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_19C33A5D0(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 24);
  v5 = 0;
  v6 = &v5;
  v7 = 0x2000000000;
  v2 = off_1EE41C190;
  v8 = off_1EE41C190;
  if (off_1EE41C190)
    goto LABEL_7;
  v9 = 0;
  if (qword_1EDB96F68)
  {
    v2 = (void *)qword_1EDB96F68;
  }
  else
  {
    v10 = xmmword_1E3D3A2E8;
    v11 = 0;
    qword_1EDB96F68 = _sl_dlopen();
    v3 = v9;
    v2 = (void *)qword_1EDB96F68;
    if (!qword_1EDB96F68)
    {
      v3 = (void *)abort_report_np();
      goto LABEL_11;
    }
    if (v9)
      goto LABEL_12;
  }
  while (1)
  {
    v2 = dlsym(v2, "MRLModelUnlock");
    v6[3] = (uint64_t)v2;
    off_1EE41C190 = v2;
LABEL_7:
    _Block_object_dispose(&v5, 8);
    if (v2)
      break;
    dlerror();
    v3 = (void *)abort_report_np();
LABEL_11:
    __break(1u);
LABEL_12:
    free(v3);
  }
  return ((uint64_t (*)(uint64_t))v2)(v1);
}

void sub_19C33A714(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_19C33A730(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 24);
  v5 = 0;
  v6 = &v5;
  v7 = 0x2000000000;
  v2 = off_1EE41C198;
  v8 = off_1EE41C198;
  if (off_1EE41C198)
    goto LABEL_7;
  v9 = 0;
  if (qword_1EDB96F68)
  {
    v2 = (void *)qword_1EDB96F68;
  }
  else
  {
    v10 = xmmword_1E3D3A2E8;
    v11 = 0;
    qword_1EDB96F68 = _sl_dlopen();
    v3 = v9;
    v2 = (void *)qword_1EDB96F68;
    if (!qword_1EDB96F68)
    {
      v3 = (void *)abort_report_np();
      goto LABEL_11;
    }
    if (v9)
      goto LABEL_12;
  }
  while (1)
  {
    v2 = dlsym(v2, "MRLModelReset");
    v6[3] = (uint64_t)v2;
    off_1EE41C198 = v2;
LABEL_7:
    _Block_object_dispose(&v5, 8);
    if (v2)
      break;
    dlerror();
    v3 = (void *)abort_report_np();
LABEL_11:
    __break(1u);
LABEL_12:
    free(v3);
  }
  return ((uint64_t (*)(uint64_t))v2)(v1);
}

void sub_19C33A874(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19C33A890()
{
  __assert_rtn("conditionalProbability", "LegacyMontreal.cpp", 196, "false && \"stateless conditional probability computation not supported\"");
}

uint64_t sub_19C33A8B8(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v5 = 0;
  v6 = &v5;
  v7 = 0x2000000000;
  v2 = off_1EDB96F78;
  v8 = off_1EDB96F78;
  if (off_1EDB96F78)
    goto LABEL_7;
  v9 = 0;
  if (qword_1EDB96F68)
  {
    v2 = (void *)qword_1EDB96F68;
  }
  else
  {
    v10 = xmmword_1E3D3A2E8;
    v11 = 0;
    qword_1EDB96F68 = _sl_dlopen();
    v3 = v9;
    v2 = (void *)qword_1EDB96F68;
    if (!qword_1EDB96F68)
    {
      v3 = (void *)abort_report_np();
      goto LABEL_11;
    }
    if (v9)
      goto LABEL_12;
  }
  while (1)
  {
    v2 = dlsym(v2, "MRLModelGetOutputSize");
    v6[3] = (uint64_t)v2;
    off_1EDB96F78 = v2;
LABEL_7:
    _Block_object_dispose(&v5, 8);
    if (v2)
      break;
    dlerror();
    v3 = (void *)abort_report_np();
LABEL_11:
    __break(1u);
LABEL_12:
    free(v3);
  }
  return ((uint64_t (*)(uint64_t))v2)(a1);
}

void sub_19C33A9FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

_QWORD *sub_19C33AA18(_QWORD *a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  std::__shared_weak_count *v6;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  *a1 = &off_1E3D35208;
  v2 = a1[3];
  v8 = 0;
  v9 = &v8;
  v10 = 0x2000000000;
  v3 = off_1EDB96F50;
  v11 = off_1EDB96F50;
  if (off_1EDB96F50)
    goto LABEL_7;
  v12 = 0;
  if (qword_1EDB96F68)
  {
    v3 = (void *)qword_1EDB96F68;
  }
  else
  {
    v13 = xmmword_1E3D3A2E8;
    v14 = 0;
    qword_1EDB96F68 = _sl_dlopen();
    v4 = v12;
    v3 = (void *)qword_1EDB96F68;
    if (!qword_1EDB96F68)
    {
      v4 = (void *)abort_report_np();
      goto LABEL_15;
    }
    if (v12)
      goto LABEL_16;
  }
  while (1)
  {
    v3 = dlsym(v3, "MRLModelRelease");
    v9[3] = (uint64_t)v3;
    off_1EDB96F50 = v3;
LABEL_7:
    _Block_object_dispose(&v8, 8);
    if (v3)
      break;
    dlerror();
    v4 = (void *)abort_report_np();
LABEL_15:
    __break(1u);
LABEL_16:
    free(v4);
  }
  ((void (*)(uint64_t))v3)(v2);
  v5 = (void *)a1[4];
  if (v5)
  {
    a1[5] = v5;
    operator delete(v5);
  }
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_19C33AB8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2)
  {
    _Block_object_dispose(&a10, 8);
    sub_19C2CDAC8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_19C33ABBC(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  int v24;

  v5 = *(char **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v6 = v5;
  if (a2 <= (v4 - (uint64_t)v5) >> 2)
  {
    if (a2)
    {
      bzero(v5, 4 * a2);
      v6 = &v5[4 * a2];
    }
    *(_QWORD *)(a1 + 8) = v6;
  }
  else
  {
    v7 = *(char **)a1;
    v8 = (uint64_t)&v5[-*(_QWORD *)a1];
    v9 = v8 >> 2;
    v10 = (v8 >> 2) + a2;
    if (v10 >> 62)
      sub_19C2A18E8();
    v11 = v4 - (_QWORD)v7;
    if (v11 >> 1 > v10)
      v10 = v11 >> 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
      v12 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 62)
        sub_19C2A143C();
      v13 = operator new(4 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[4 * v9];
    v15 = 4 * a2;
    v16 = &v13[4 * v12];
    bzero(v14, v15);
    v17 = &v14[v15];
    if (v5 != v7)
    {
      v18 = v5 - v7 - 4;
      if (v18 < 0x2C)
        goto LABEL_29;
      if ((unint64_t)(v5 - v13 - v8) < 0x20)
        goto LABEL_29;
      v19 = (v18 >> 2) + 1;
      v6 = &v5[-4 * (v19 & 0x7FFFFFFFFFFFFFF8)];
      v20 = &v13[4 * v9 - 16];
      v21 = v5 - 16;
      v22 = v19 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v23 = *(_OWORD *)v21;
        *(v20 - 1) = *((_OWORD *)v21 - 1);
        *v20 = v23;
        v20 -= 2;
        v21 -= 32;
        v22 -= 8;
      }
      while (v22);
      v14 -= 4 * (v19 & 0x7FFFFFFFFFFFFFF8);
      if (v19 != (v19 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_29:
        do
        {
          v24 = *((_DWORD *)v6 - 1);
          v6 -= 4;
          *((_DWORD *)v14 - 1) = v24;
          v14 -= 4;
        }
        while (v6 != v7);
      }
    }
    *(_QWORD *)a1 = v14;
    *(_QWORD *)(a1 + 8) = v17;
    *(_QWORD *)(a1 + 16) = v16;
    if (v7)
      operator delete(v7);
  }
}

void sub_19C33AD5C(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t *v17;
  char *v18;
  _QWORD *exception;
  _QWORD v20[6];
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  __n128 (*v24)(uint64_t, uint64_t);
  void (*v25)(uint64_t);
  void *__p;
  uint64_t v27;
  uint64_t v28;
  _QWORD block[7];
  __int128 v30;
  uint64_t v31;
  __n128 (*v32)(uint64_t, uint64_t);
  void (*v33)(uint64_t);
  uint64_t v34;
  std::__shared_weak_count *v35;

  v21 = 0;
  v22 = &v21;
  v23 = 0x4002000000;
  v24 = sub_19C33B0AC;
  v25 = sub_19C33B0C8;
  v28 = 0;
  v3 = MEMORY[0x1E0C809B0];
  __p = 0;
  v27 = 0;
  v20[0] = MEMORY[0x1E0C809B0];
  v20[1] = 0x40000000;
  v20[2] = sub_19C33B0DC;
  v20[3] = &unk_1E3D3A2C8;
  v20[4] = &v21;
  v20[5] = a2;
  *(_QWORD *)&v30 = 0;
  *((_QWORD *)&v30 + 1) = &v30;
  v31 = 0x3802000000;
  v32 = sub_19C33B6DC;
  v33 = sub_19C33B6EC;
  v34 = 0;
  v35 = 0;
  v4 = atomic_load((unsigned __int8 *)&qword_1EDB96F20);
  if ((v4 & 1) == 0)
  {
    v13 = a2;
    v14 = __cxa_guard_acquire(&qword_1EDB96F20);
    a2 = v13;
    if (v14)
    {
      qword_1EDB96F88 = (uint64_t)dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_USER_INITIATED, 0);
      __cxa_guard_release(&qword_1EDB96F20);
      a2 = v13;
    }
  }
  v5 = atomic_load((unsigned __int8 *)&qword_1EDB96F60);
  if ((v5 & 1) == 0)
  {
    v15 = a2;
    v16 = __cxa_guard_acquire(&qword_1EDB96F60);
    a2 = v15;
    if (v16)
    {
      qword_1EDB96F90 = (uint64_t)dispatch_queue_create("com.apple.NLPUtils.SingletonResourceManager", (dispatch_queue_attr_t)qword_1EDB96F88);
      __cxa_guard_release(&qword_1EDB96F60);
      a2 = v15;
    }
  }
  block[0] = v3;
  block[1] = 0x40000000;
  block[2] = sub_19C33B744;
  block[3] = &unk_1E3D3A308;
  block[5] = &v30;
  block[6] = a2;
  block[4] = v20;
  dispatch_sync((dispatch_queue_t)qword_1EDB96F90, block);
  v6 = *((_QWORD *)&v30 + 1);
  *a1 = *(_QWORD *)(*((_QWORD *)&v30 + 1) + 40);
  v7 = *(_QWORD *)(v6 + 48);
  a1[1] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  _Block_object_dispose(&v30, 8);
  v10 = v35;
  if (v35)
  {
    p_shared_owners = (unint64_t *)&v35->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (!*a1)
  {
    v17 = v22;
    if (*((char *)v22 + 63) < 0)
    {
      if (v22[6])
        goto LABEL_25;
      v22[6] = 13;
      v18 = (char *)v17[5];
    }
    else
    {
      if (*((_BYTE *)v22 + 63))
        goto LABEL_25;
      v18 = (char *)(v22 + 5);
      *((_BYTE *)v22 + 63) = 13;
    }
    strcpy(v18, "unknown error");
LABEL_25:
    exception = __cxa_allocate_exception(0x20uLL);
    std::operator+<char>();
    sub_19C31237C(exception, &v30);
    __cxa_throw(exception, (struct type_info *)&unk_1E3D32968, (void (*)(void *))sub_19C3123E4);
  }
  _Block_object_dispose(&v21, 8);
  if (SHIBYTE(v28) < 0)
    operator delete(__p);
}

void sub_19C33B050(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;
  void *v28;
  int v29;
  uint64_t v30;

  if (*(char *)(v30 - 81) < 0)
  {
    operator delete(*(void **)(v30 - 104));
    if ((v29 & 1) == 0)
    {
LABEL_6:
      sub_19C2B43C8(v27);
      _Block_object_dispose(&a17, 8);
      if (a27 < 0)
        operator delete(__p);
      _Unwind_Resume(a1);
    }
  }
  else if (!v29)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v28);
  goto LABEL_6;
}

__n128 sub_19C33B0AC(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(__n128 *)(a1 + 40) = result;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_19C33B0C8(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
}

uint64_t sub_19C33B0DC(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  const __CFAllocator *v4;
  __CFDictionary *Mutable;
  const char *v6;
  CFStringRef v7;
  const void **v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t result;
  char *v17;
  void **v18;
  std::string::size_type v19;
  std::string *v20;
  _QWORD *exception;
  _QWORD *v22;
  void *__p[2];
  unsigned __int8 v24;
  std::string v25;
  void *v26;
  std::string v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v2 = (_QWORD *)operator new();
  v3 = *(_QWORD *)(a1 + 40);
  v2[1] = 0;
  v2[2] = 0;
  *v2 = &off_1E3D35208;
  v2[4] = 0;
  v2[5] = 0;
  v2[6] = 0;
  if (!qword_1EDB96F68)
  {
    *(_OWORD *)&v25.__r_.__value_.__l.__data_ = xmmword_1E3D3A2E8;
    v25.__r_.__value_.__r.__words[2] = 0;
    qword_1EDB96F68 = _sl_dlopen();
  }
  if (!qword_1EDB96F68)
  {
    sub_19C2A6D48(&v27, "Failed to soft-link Montreal: ");
    v17 = dlerror();
    sub_19C2A6D48(__p, v17);
    if ((v24 & 0x80u) == 0)
      v18 = __p;
    else
      v18 = (void **)__p[0];
    if ((v24 & 0x80u) == 0)
      v19 = v24;
    else
      v19 = (std::string::size_type)__p[1];
    v20 = std::string::append(&v27, (const std::string::value_type *)v18, v19);
    v25 = *v20;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    if ((char)v24 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v27.__r_.__value_.__l.__data_);
    exception = __cxa_allocate_exception(0x20uLL);
    sub_19C31237C(exception, (__int128 *)&v25);
    __cxa_throw(exception, (struct type_info *)&unk_1E3D32968, (void (*)(void *))sub_19C3123E4);
  }
  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (*(char *)(v3 + 23) >= 0)
    v6 = (const char *)v3;
  else
    v6 = *(const char **)v3;
  v7 = CFStringCreateWithCString(v4, v6, 0x8000100u);
  v25.__r_.__value_.__r.__words[0] = 0;
  v25.__r_.__value_.__l.__size_ = (std::string::size_type)&v25;
  v25.__r_.__value_.__r.__words[2] = 0x2000000000;
  v8 = (const void **)qword_1EDB96F80;
  v26 = (void *)qword_1EDB96F80;
  if (!qword_1EDB96F80)
  {
    __p[0] = 0;
    if (qword_1EDB96F68)
    {
      v9 = (void *)qword_1EDB96F68;
    }
    else
    {
      *(_OWORD *)&v27.__r_.__value_.__l.__data_ = xmmword_1E3D3A2E8;
      v27.__r_.__value_.__r.__words[2] = 0;
      qword_1EDB96F68 = _sl_dlopen();
      v9 = (void *)qword_1EDB96F68;
      if (!qword_1EDB96F68)
        goto LABEL_30;
    }
    v8 = (const void **)dlsym(v9, "kMRLModelFileLocationKey");
    *(_QWORD *)(v25.__r_.__value_.__l.__size_ + 24) = v8;
    qword_1EDB96F80 = (uint64_t)v8;
  }
  _Block_object_dispose(&v25, 8);
  if (!v8)
  {
LABEL_29:
    dlerror();
    result = abort_report_np();
LABEL_44:
    __break(1u);
    return result;
  }
  CFDictionaryAddValue(Mutable, *v8, v7);
  v25.__r_.__value_.__r.__words[0] = 0;
  v25.__r_.__value_.__l.__size_ = (std::string::size_type)&v25;
  v25.__r_.__value_.__r.__words[2] = 0x2000000000;
  v10 = off_1EDB96F70;
  v26 = off_1EDB96F70;
  if (!off_1EDB96F70)
  {
    __p[0] = 0;
    if (qword_1EDB96F68)
    {
      v11 = (void *)qword_1EDB96F68;
LABEL_17:
      v10 = dlsym(v11, "MRLModelCreate");
      *(_QWORD *)(v25.__r_.__value_.__l.__size_ + 24) = v10;
      off_1EDB96F70 = v10;
      goto LABEL_18;
    }
    *(_OWORD *)&v27.__r_.__value_.__l.__data_ = xmmword_1E3D3A2E8;
    v27.__r_.__value_.__r.__words[2] = 0;
    qword_1EDB96F68 = _sl_dlopen();
    v11 = (void *)qword_1EDB96F68;
    if (qword_1EDB96F68)
      goto LABEL_17;
LABEL_30:
    result = abort_report_np();
    goto LABEL_44;
  }
LABEL_18:
  _Block_object_dispose(&v25, 8);
  if (!v10)
    goto LABEL_29;
  v12 = ((uint64_t (*)(__CFDictionary *))v10)(Mutable);
  v2[3] = v12;
  if (!v12)
  {
    v22 = __cxa_allocate_exception(0x20uLL);
    sub_19C2A6D48(&v25, "MRLModelCreate returned nullptr");
    sub_19C31237C(v22, (__int128 *)&v25);
    __cxa_throw(v22, (struct type_info *)&unk_1E3D32968, (void (*)(void *))sub_19C3123E4);
  }
  v13 = sub_19C33A8B8(v12);
  v14 = v2[4];
  v15 = (v2[5] - v14) >> 2;
  if (v13 <= v15)
  {
    if (v13 < v15)
      v2[5] = v14 + 4 * v13;
  }
  else
  {
    sub_19C33ABBC((uint64_t)(v2 + 4), v13 - v15);
  }
  if (v7)
    CFRelease(v7);
  if (Mutable)
    CFRelease(Mutable);
  return (uint64_t)v2;
}

void sub_19C33B520(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;
  uint64_t v34;
  void **v35;
  void *v38;
  std::__shared_weak_count *v39;
  void *v40;
  char *v41;

  if (a26 < 0)
    operator delete(__p);
  v38 = *v35;
  if (*v35)
  {
    *(_QWORD *)(v34 + 40) = v38;
    operator delete(v38);
  }
  v39 = *(std::__shared_weak_count **)(v34 + 16);
  if (v39)
    std::__shared_weak_count::__release_weak(v39);
  MEMORY[0x1A1AD355C](v34, 0xA1C40E92AFD59);
  if (a2 == 1)
  {
    v40 = __cxa_begin_catch(a1);
    v41 = (char *)(*(uint64_t (**)(void *))(*(_QWORD *)v40 + 16))(v40);
    sub_19C31474C((void **)(*(_QWORD *)(*(_QWORD *)(v33 + 32) + 8) + 40), v41);
    __cxa_end_catch();
    JUMPOUT(0x19C33B398);
  }
  _Unwind_Resume(a1);
}

void sub_19C33B6C0()
{
  __cxa_end_catch();
  JUMPOUT(0x19C33B5ECLL);
}

void sub_19C33B6CC(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x19C33B6D4);
  JUMPOUT(0x19C33B5ECLL);
}

__n128 sub_19C33B6DC(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  return result;
}

void sub_19C33B6EC(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_19C33B744(_QWORD *a1)
{
  unint64_t v1;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  uint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  uint64_t **v13;
  uint64_t *v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  std::__shared_weak_count *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t *p_shared_weak_owners;
  unint64_t v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  __int128 *v51;
  int v52;
  uint64_t *v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint8x8_t v58;
  uint64_t **v59;
  uint64_t *v60;
  char v61;
  uint64_t v62;
  uint64_t *v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  _BYTE *v73;
  __int128 v74;
  float v75;
  _BOOL8 v76;
  unint64_t v77;
  unint64_t v78;
  size_t prime;
  void *v80;
  void *v81;
  uint64_t v82;
  _QWORD **v83;
  size_t v84;
  size_t v85;
  size_t v86;
  _QWORD *i;
  size_t v88;
  uint64_t v89;
  unint64_t v90;
  uint8x8_t v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  size_t v95;
  _QWORD *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  void *v99;
  _QWORD v100[2];
  char v101;

  v3 = atomic_load((unsigned __int8 *)&qword_1EDB96F58);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_1EDB96F58))
  {
    xmmword_1EDB96F28 = 0u;
    *(_OWORD *)&qword_1EDB96F38 = 0u;
    dword_1EDB96F48 = 1065353216;
    __cxa_guard_release(&qword_1EDB96F58);
  }
  v4 = (uint64_t *)a1[6];
  v5 = *((char *)v4 + 23);
  if (v5 >= 0)
    v6 = (uint64_t *)a1[6];
  else
    v6 = (uint64_t *)*v4;
  if (v5 >= 0)
    v7 = *((unsigned __int8 *)v4 + 23);
  else
    v7 = v4[1];
  v8 = sub_19C2A0F2C((uint64_t)v100, v6, v7);
  v9 = *((_QWORD *)&xmmword_1EDB96F28 + 1);
  if (*((_QWORD *)&xmmword_1EDB96F28 + 1))
  {
    v10 = v8;
    v11 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_1EDB96F28 + 8));
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v12 = v8;
      if (v8 >= *((_QWORD *)&xmmword_1EDB96F28 + 1))
        v12 = v8 % *((_QWORD *)&xmmword_1EDB96F28 + 1);
    }
    else
    {
      v12 = (*((_QWORD *)&xmmword_1EDB96F28 + 1) - 1) & v8;
    }
    v13 = *(uint64_t ***)(xmmword_1EDB96F28 + 8 * v12);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        v15 = *((_BYTE *)v4 + 23);
        if (v15 >= 0)
          v1 = *((unsigned __int8 *)v4 + 23);
        else
          v1 = v4[1];
        if (v15 < 0)
          v4 = (uint64_t *)*v4;
        if (v11.u32[0] < 2uLL)
        {
          v16 = *((_QWORD *)&xmmword_1EDB96F28 + 1) - 1;
          while (1)
          {
            v21 = v14[1];
            if (v21 == v10)
            {
              v22 = *((unsigned __int8 *)v14 + 39);
              if ((v22 & 0x80u) == 0)
                v23 = *((unsigned __int8 *)v14 + 39);
              else
                v23 = v14[3];
              if (v23 == v1)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v14[2], v4, v14[3]))
                    goto LABEL_55;
                }
                else
                {
                  if (!*((_BYTE *)v14 + 39))
                    goto LABEL_55;
                  v24 = 0;
                  while (*((unsigned __int8 *)v14 + v24 + 16) == *((unsigned __int8 *)v4 + v24))
                  {
                    if (v22 == ++v24)
                      goto LABEL_54;
                  }
                }
              }
            }
            else if ((v21 & v16) != v12)
            {
              goto LABEL_64;
            }
            v14 = (uint64_t *)*v14;
            if (!v14)
              goto LABEL_64;
          }
        }
        do
        {
          v17 = v14[1];
          if (v17 == v10)
          {
            v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0)
              v19 = *((unsigned __int8 *)v14 + 39);
            else
              v19 = v14[3];
            if (v19 == v1)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v14[2], v4, v14[3]))
                {
LABEL_55:
                  v25 = (std::__shared_weak_count *)v14[6];
                  if (v25 && (v25 = std::__shared_weak_count::lock(v25)) != 0)
                    v26 = v14[5];
                  else
                    v26 = 0;
                  v27 = *(_QWORD *)(a1[5] + 8);
                  v28 = *(std::__shared_weak_count **)(v27 + 48);
                  *(_QWORD *)(v27 + 40) = v26;
                  *(_QWORD *)(v27 + 48) = v25;
                  if (v28)
                  {
                    p_shared_owners = (unint64_t *)&v28->__shared_owners_;
                    do
                      v30 = __ldaxr(p_shared_owners);
                    while (__stlxr(v30 - 1, p_shared_owners));
                    if (!v30)
                    {
                      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
                      std::__shared_weak_count::__release_weak(v28);
                    }
                  }
                  break;
                }
              }
              else
              {
                if (!*((_BYTE *)v14 + 39))
                  goto LABEL_55;
                v20 = 0;
                while (*((unsigned __int8 *)v14 + v20 + 16) == *((unsigned __int8 *)v4 + v20))
                {
                  if (v18 == ++v20)
                  {
LABEL_54:
                    if (!v14)
                      goto LABEL_64;
                    goto LABEL_55;
                  }
                }
              }
            }
          }
          else
          {
            if (v17 >= v9)
              v17 %= v9;
            if (v17 != v12)
              break;
          }
          v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_64:
  v31 = *(_QWORD *)(a1[5] + 8);
  if (!*(_QWORD *)(v31 + 40))
  {
    v32 = (*(uint64_t (**)(void))(a1[4] + 16))();
    v33 = (std::__shared_weak_count *)operator new();
    v33->__shared_owners_ = 0;
    v34 = (unint64_t *)&v33->__shared_owners_;
    v33->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D39CC0;
    v33->__shared_weak_owners_ = 0;
    v33[1].__vftable = (std::__shared_weak_count_vtbl *)v32;
    if (v32)
    {
      v35 = *(std::__shared_weak_count **)(v32 + 16);
      if (!v35)
      {
        do
          v39 = __ldxr(v34);
        while (__stxr(v39 + 1, v34));
        p_shared_weak_owners = (unint64_t *)&v33->__shared_weak_owners_;
        do
          v41 = __ldxr(p_shared_weak_owners);
        while (__stxr(v41 + 1, p_shared_weak_owners));
        *(_QWORD *)(v32 + 8) = v32;
        *(_QWORD *)(v32 + 16) = v33;
        do
LABEL_77:
          v42 = __ldaxr(v34);
        while (__stlxr(v42 - 1, v34));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
        goto LABEL_80;
      }
      if (v35->__shared_owners_ == -1)
      {
        do
          v36 = __ldxr(v34);
        while (__stxr(v36 + 1, v34));
        v37 = (unint64_t *)&v33->__shared_weak_owners_;
        do
          v38 = __ldxr(v37);
        while (__stxr(v38 + 1, v37));
        *(_QWORD *)(v32 + 8) = v32;
        *(_QWORD *)(v32 + 16) = v33;
        std::__shared_weak_count::__release_weak(v35);
        goto LABEL_77;
      }
    }
LABEL_80:
    v43 = *(std::__shared_weak_count **)(v31 + 48);
    *(_QWORD *)(v31 + 40) = v32;
    *(_QWORD *)(v31 + 48) = v33;
    if (v43)
    {
      v44 = (unint64_t *)&v43->__shared_owners_;
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
    }
    v46 = *(_QWORD *)(a1[5] + 8);
    v47 = *(_QWORD *)(v46 + 40);
    if (!v47)
      return;
    v48 = *(_QWORD *)(v46 + 48);
    if (v48)
    {
      v49 = (unint64_t *)(v48 + 16);
      do
        v50 = __ldxr(v49);
      while (__stxr(v50 + 1, v49));
    }
    v51 = (__int128 *)a1[6];
    v52 = *((char *)v51 + 23);
    if (v52 >= 0)
      v53 = (uint64_t *)a1[6];
    else
      v53 = *(uint64_t **)v51;
    if (v52 >= 0)
      v54 = *((unsigned __int8 *)v51 + 23);
    else
      v54 = *((_QWORD *)v51 + 1);
    v55 = sub_19C2A0F2C((uint64_t)v100, v53, v54);
    v56 = v55;
    v57 = *((_QWORD *)&xmmword_1EDB96F28 + 1);
    if (*((_QWORD *)&xmmword_1EDB96F28 + 1))
    {
      v58 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_1EDB96F28 + 8));
      v58.i16[0] = vaddlv_u8(v58);
      if (v58.u32[0] > 1uLL)
      {
        v1 = v55;
        if (v55 >= *((_QWORD *)&xmmword_1EDB96F28 + 1))
          v1 = v55 % *((_QWORD *)&xmmword_1EDB96F28 + 1);
      }
      else
      {
        v1 = (*((_QWORD *)&xmmword_1EDB96F28 + 1) - 1) & v55;
      }
      v59 = *(uint64_t ***)(xmmword_1EDB96F28 + 8 * v1);
      if (v59)
      {
        v60 = *v59;
        if (*v59)
        {
          v61 = *((_BYTE *)v51 + 23);
          if (v61 >= 0)
            v62 = *((unsigned __int8 *)v51 + 23);
          else
            v62 = *((_QWORD *)v51 + 1);
          if (v61 >= 0)
            v63 = (uint64_t *)v51;
          else
            v63 = *(uint64_t **)v51;
          if (v58.u32[0] < 2uLL)
          {
            while (1)
            {
              v68 = v60[1];
              if (v68 == v56)
              {
                v69 = *((unsigned __int8 *)v60 + 39);
                if ((v69 & 0x80u) == 0)
                  v70 = *((unsigned __int8 *)v60 + 39);
                else
                  v70 = v60[3];
                if (v70 == v62)
                {
                  if ((v69 & 0x80) != 0)
                  {
                    if (!memcmp((const void *)v60[2], v63, v60[3]))
                      goto LABEL_205;
                  }
                  else
                  {
                    if (!*((_BYTE *)v60 + 39))
                      goto LABEL_205;
                    v71 = 0;
                    while (*((unsigned __int8 *)v60 + v71 + 16) == *((unsigned __int8 *)v63 + v71))
                    {
                      if (v69 == ++v71)
                        goto LABEL_205;
                    }
                  }
                }
              }
              else if ((v68 & (v57 - 1)) != v1)
              {
                goto LABEL_143;
              }
              v60 = (uint64_t *)*v60;
              if (!v60)
                goto LABEL_143;
            }
          }
          do
          {
            v64 = v60[1];
            if (v64 == v56)
            {
              v65 = *((unsigned __int8 *)v60 + 39);
              if ((v65 & 0x80u) == 0)
                v66 = *((unsigned __int8 *)v60 + 39);
              else
                v66 = v60[3];
              if (v66 == v62)
              {
                if ((v65 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v60[2], v63, v60[3]))
                    goto LABEL_205;
                }
                else
                {
                  if (!*((_BYTE *)v60 + 39))
                    goto LABEL_205;
                  v67 = 0;
                  while (*((unsigned __int8 *)v60 + v67 + 16) == *((unsigned __int8 *)v63 + v67))
                  {
                    if (v65 == ++v67)
                      goto LABEL_205;
                  }
                }
              }
            }
            else
            {
              if (v64 >= v57)
                v64 %= v57;
              if (v64 != v1)
                break;
            }
            v60 = (uint64_t *)*v60;
          }
          while (v60);
        }
      }
    }
LABEL_143:
    v72 = operator new(0x38uLL);
    v100[0] = v72;
    v100[1] = &qword_1EDB96F38;
    v101 = 0;
    *v72 = 0;
    v72[1] = v56;
    v73 = v72 + 2;
    if (*((char *)v51 + 23) < 0)
    {
      sub_19C2B5238(v73, *(void **)v51, *((_QWORD *)v51 + 1));
    }
    else
    {
      v74 = *v51;
      v72[4] = *((_QWORD *)v51 + 2);
      *(_OWORD *)v73 = v74;
    }
    v72[5] = 0;
    v72[6] = 0;
    v101 = 1;
    v75 = (float)(unint64_t)(qword_1EDB96F40 + 1);
    if (v57 && (float)(*(float *)&dword_1EDB96F48 * (float)v57) >= v75)
      goto LABEL_196;
    v76 = 1;
    if (v57 >= 3)
      v76 = (v57 & (v57 - 1)) != 0;
    v77 = v76 | (2 * v57);
    v78 = vcvtps_u32_f32(v75 / *(float *)&dword_1EDB96F48);
    if (v77 <= v78)
      prime = v78;
    else
      prime = v77;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v57 = *((_QWORD *)&xmmword_1EDB96F28 + 1);
    if (prime <= *((_QWORD *)&xmmword_1EDB96F28 + 1))
    {
      if (prime >= *((_QWORD *)&xmmword_1EDB96F28 + 1))
        goto LABEL_183;
      v90 = vcvtps_u32_f32((float)(unint64_t)qword_1EDB96F40 / *(float *)&dword_1EDB96F48);
      if (*((_QWORD *)&xmmword_1EDB96F28 + 1) < 3uLL
        || (v91 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_1EDB96F28 + 8)),
            v91.i16[0] = vaddlv_u8(v91),
            v91.u32[0] > 1uLL))
      {
        v90 = std::__next_prime(v90);
      }
      else
      {
        v92 = 1 << -(char)__clz(v90 - 1);
        if (v90 >= 2)
          v90 = v92;
      }
      if (prime <= v90)
        prime = v90;
      if (prime >= v57)
      {
        v57 = *((_QWORD *)&xmmword_1EDB96F28 + 1);
LABEL_183:
        if ((v57 & (v57 - 1)) != 0)
        {
          if (v56 >= v57)
            v1 = v56 % v57;
          else
            v1 = v56;
        }
        else
        {
          v1 = (v57 - 1) & v56;
        }
LABEL_196:
        v96 = *(_QWORD **)(xmmword_1EDB96F28 + 8 * v1);
        if (v96)
        {
          *(_QWORD *)v100[0] = *v96;
          *v96 = v100[0];
        }
        else
        {
          *(_QWORD *)v100[0] = qword_1EDB96F38;
          qword_1EDB96F38 = v100[0];
          *(_QWORD *)(xmmword_1EDB96F28 + 8 * v1) = &qword_1EDB96F38;
          if (*(_QWORD *)v100[0])
          {
            v97 = *(_QWORD *)(*(_QWORD *)v100[0] + 8);
            if ((v57 & (v57 - 1)) != 0)
            {
              if (v97 >= v57)
                v97 %= v57;
            }
            else
            {
              v97 &= v57 - 1;
            }
            *(_QWORD *)(xmmword_1EDB96F28 + 8 * v97) = v100[0];
          }
        }
        v60 = (uint64_t *)v100[0];
        ++qword_1EDB96F40;
LABEL_205:
        v98 = (std::__shared_weak_count *)v60[6];
        v60[5] = v47;
        v60[6] = v48;
        if (v98)
          std::__shared_weak_count::__release_weak(v98);
        return;
      }
      if (!prime)
      {
        v99 = (void *)xmmword_1EDB96F28;
        *(_QWORD *)&xmmword_1EDB96F28 = 0;
        if (v99)
          operator delete(v99);
        v57 = 0;
        *((_QWORD *)&xmmword_1EDB96F28 + 1) = 0;
        goto LABEL_183;
      }
    }
    if (prime >> 61)
      sub_19C2A143C();
    v80 = operator new(8 * prime);
    v81 = (void *)xmmword_1EDB96F28;
    *(_QWORD *)&xmmword_1EDB96F28 = v80;
    if (v81)
      operator delete(v81);
    v82 = 0;
    *((_QWORD *)&xmmword_1EDB96F28 + 1) = prime;
    do
      *(_QWORD *)(xmmword_1EDB96F28 + 8 * v82++) = 0;
    while (prime != v82);
    v83 = (_QWORD **)qword_1EDB96F38;
    if (!qword_1EDB96F38)
    {
LABEL_182:
      v57 = prime;
      goto LABEL_183;
    }
    v84 = *(_QWORD *)(qword_1EDB96F38 + 8);
    v85 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v86 = v84 & v85;
      *(_QWORD *)(xmmword_1EDB96F28 + 8 * v86) = &qword_1EDB96F38;
      for (i = *v83; *v83; i = *v83)
      {
        v88 = i[1] & v85;
        if (v88 == v86)
        {
          v83 = (_QWORD **)i;
        }
        else if (*(_QWORD *)(xmmword_1EDB96F28 + 8 * v88))
        {
          *v83 = (_QWORD *)*i;
          v89 = 8 * v88;
          *i = **(_QWORD **)(xmmword_1EDB96F28 + v89);
          **(_QWORD **)(xmmword_1EDB96F28 + v89) = i;
        }
        else
        {
          *(_QWORD *)(xmmword_1EDB96F28 + 8 * v88) = v83;
          v83 = (_QWORD **)i;
          v86 = v88;
        }
      }
      goto LABEL_182;
    }
    if (v84 >= prime)
      v84 %= prime;
    *(_QWORD *)(xmmword_1EDB96F28 + 8 * v84) = &qword_1EDB96F38;
    v93 = *v83;
    if (!*v83)
      goto LABEL_182;
    while (1)
    {
      v95 = v93[1];
      if (v95 >= prime)
        v95 %= prime;
      if (v95 != v84)
      {
        if (!*(_QWORD *)(xmmword_1EDB96F28 + 8 * v95))
        {
          *(_QWORD *)(xmmword_1EDB96F28 + 8 * v95) = v83;
          goto LABEL_187;
        }
        *v83 = (_QWORD *)*v93;
        v94 = 8 * v95;
        *v93 = **(_QWORD **)(xmmword_1EDB96F28 + v94);
        **(_QWORD **)(xmmword_1EDB96F28 + v94) = v93;
        v93 = v83;
      }
      v95 = v84;
LABEL_187:
      v83 = (_QWORD **)v93;
      v93 = (_QWORD *)*v93;
      v84 = v95;
      if (!v93)
        goto LABEL_182;
    }
  }
}

void sub_19C33C0E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  std::__shared_weak_count *v2;
  va_list va;

  va_start(va, a2);
  sub_19C32B890((uint64_t *)va);
  if (v2)
  {
    std::__shared_weak_count::__release_weak(v2);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_19C33C13C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C33C160(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_19C33C178(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN2LM14LegacyMontrealEE27__shared_ptr_default_deleteIS2_S2_EE"
    || ((v3 & (unint64_t)"NSt3__110shared_ptrIN2LM14LegacyMontrealEE27__shared_ptr_default_deleteIS2_S2_EE" & 0x8000000000000000) != 0) != __OFSUB__(v3, "NSt3__110shared_ptrIN2LM14LegacyMontrealEE27__shared_ptr_default_deleteIS2_S2_EE")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN2LM14LegacyMontrealEE27__shared_ptr_default_deleteIS2_S2_EE" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_19C33C1D0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 24);
  v7 = 0;
  v8 = &v7;
  v9 = 0x2000000000;
  v4 = off_1EE41C098;
  v10 = off_1EE41C098;
  if (off_1EE41C098)
    goto LABEL_7;
  v11 = 0;
  if (qword_1EDB96F68)
  {
    v4 = (void *)qword_1EDB96F68;
  }
  else
  {
    v12 = xmmword_1E3D3A2E8;
    v13 = 0;
    qword_1EDB96F68 = _sl_dlopen();
    v5 = v11;
    v4 = (void *)qword_1EDB96F68;
    if (!qword_1EDB96F68)
    {
      v5 = (void *)abort_report_np();
      goto LABEL_11;
    }
    if (v11)
      goto LABEL_12;
  }
  while (1)
  {
    v4 = dlsym(v4, "MRLModelStateRelease");
    v8[3] = (uint64_t)v4;
    off_1EE41C098 = v4;
LABEL_7:
    _Block_object_dispose(&v7, 8);
    if (v4)
      break;
    dlerror();
    v5 = (void *)abort_report_np();
LABEL_11:
    __break(1u);
LABEL_12:
    free(v5);
  }
  return ((uint64_t (*)(uint64_t, uint64_t))v4)(v3, a2);
}

void sub_19C33C31C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

_QWORD *sub_19C33C338(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E3D37208;
  a1[2] = &off_1E3D34DF0;
  v2 = (void *)a1[3];
  if (v2)
    munmap(v2, a1[4]);
  a1[4] = 0;
  return a1;
}

void sub_19C33C388(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E3D37208;
  a1[2] = &off_1E3D34DF0;
  v2 = (void *)a1[3];
  if (v2)
    munmap(v2, a1[4]);
  a1[4] = 0;
  JUMPOUT(0x1A1AD355CLL);
}

BOOL sub_19C33C3E8(uint64_t a1, unsigned int a2, uint64_t a3, unint64_t a4)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  unsigned int v9;
  int *v10;
  unint64_t v11;
  unint64_t v12;
  int *v13;
  unsigned int v14;
  int *v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  _DWORD *v19;
  _DWORD *v20;
  unint64_t v21;
  unint64_t v22;
  _DWORD *v23;
  unsigned int v24;
  _DWORD *v25;
  unsigned int v26;

  if (!a4)
    return 1;
  v4 = HIWORD(a2);
  v5 = *(_DWORD *)(a1 + 56);
  if (HIWORD(a2) >= v5)
    return 1;
  v6 = *(_QWORD *)(a1 + 40);
  v7 = *(_QWORD *)(a1 + 48);
  v8 = (int *)(v6 + 4 * *(unsigned int *)(v7 + 4 * v4));
  v9 = v5 - 1;
  if (v4 == v5 - 1)
  {
    v10 = (int *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(a1 + 32));
    if (v8 == v10)
      return 1;
  }
  else
  {
    v10 = (int *)(v6 + 4 * *(unsigned int *)(v7 + 4 * (v4 + 1)));
    if (v8 == v10)
      return 1;
  }
  v11 = v10 - v8;
  do
  {
    v12 = v11 >> 1;
    v13 = &v8[v11 >> 1];
    v14 = *((unsigned __int16 *)v13 + 1);
    v15 = v13 + 1;
    v11 += ~(v11 >> 1);
    if (v14 < (unsigned __int16)a2)
      v8 = v15;
    else
      v11 = v12;
  }
  while (v11);
  if (v8 >= v10)
    return 1;
  v16 = *v8;
  if ((v16 ^ (a2 << 16)) >> 16)
    return 1;
  v17 = *(unsigned int *)(a3 + 4 * a4 - 4);
  v18 = v17 >> 16;
  if (HIWORD(*(_DWORD *)(a3 + 4 * a4 - 4)) >= v5)
    return (~(unsigned __int16)v16 & 0x8100) != 0;
  v19 = (_DWORD *)(v6 + 4 * *(unsigned int *)(v7 + 4 * v18));
  v20 = (_DWORD *)((_DWORD)v18 == v9
                 ? *(_QWORD *)(a1 + 24) + *(_QWORD *)(a1 + 32)
                 : v6 + 4 * *(unsigned int *)(v7 + 4 * (v18 + 1)));
  if (v19 == v20)
    return (~(unsigned __int16)v16 & 0x8100) != 0;
  v21 = v20 - v19;
  do
  {
    v22 = v21 >> 1;
    v23 = &v19[v21 >> 1];
    v24 = *((unsigned __int16 *)v23 + 1);
    v25 = v23 + 1;
    v21 += ~(v21 >> 1);
    if (v24 < (unsigned __int16)*(_DWORD *)(a3 + 4 * a4 - 4))
      v19 = v25;
    else
      v21 = v22;
  }
  while (v21);
  if (v19 >= v20 || (*v19 ^ ((_DWORD)v17 << 16)) >= 0x10000)
    return (~(unsigned __int16)v16 & 0x8100) != 0;
  v26 = (unsigned __int16)*v19;
  if (a4 >= 2 && *(_DWORD *)(a3 + 4 * a4 - 8) == 1 && (v16 & 0x80) != 0 && (*v19 & 0x20) != 0)
    return ((unsigned __int16)v16 & (unsigned __int16)v26 & 0x7E00) != 0;
  if ((v16 & 0x100) == 0)
    return 1;
  if ((*v19 & 0x40) != 0)
    return ((unsigned __int16)v16 & (unsigned __int16)v26 & 0x7E00) != 0;
  if ((v16 & 0x8000) == 0)
    return 1;
  return (v26 >> 4) & 1;
}

double sub_19C33C57C()
{
  return 2.0;
}

uint64_t sub_19C33C584(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_1E3D353A8;
  v2 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 136) = 0;
  if (v2)
  {
    if (*(char *)(v2 + 31) < 0)
      operator delete(*(void **)(v2 + 8));
    MEMORY[0x1A1AD355C](v2, 0x1072C408ACDB0FELL);
  }
  if (*(char *)(a1 + 135) < 0)
    operator delete(*(void **)(a1 + 112));
  sub_19C33F5DC(a1 + 16);
  return a1;
}

void sub_19C33C5FC(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_1E3D353A8;
  v2 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 136) = 0;
  if (v2)
  {
    if (*(char *)(v2 + 31) < 0)
      operator delete(*(void **)(v2 + 8));
    MEMORY[0x1A1AD355C](v2, 0x1072C408ACDB0FELL);
  }
  if (*(char *)(a1 + 135) < 0)
    operator delete(*(void **)(a1 + 112));
  sub_19C33F5DC(a1 + 16);
  JUMPOUT(0x1A1AD355CLL);
}

void sub_19C33C684(uint64_t a1, const __CFString *a2, __n128 a3)
{
  unint64_t v4;

  v4 = sub_19C33F498(a1, 8, a3);
  sub_19C3A4E04(v4, a2);
}

uint64_t sub_19C33C6A8()
{
  uint64_t v0;
  int v1;
  void *exception;

  v1 = sqlite3_step(*(sqlite3_stmt **)(v0 + 8));
  if (v1 == 100)
    return sqlite3_column_int(*(sqlite3_stmt **)(v0 + 8), 0);
  if (v1 == 26 || v1 == 11)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    sub_19C314618((uint64_t)exception, 1);
    __cxa_throw(exception, (struct type_info *)&unk_1E3D31E20, (void (*)(void *))sub_19C3146A4);
  }
  return 0;
}

void sub_19C33C714(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19C33C728(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFStringRef v5;
  uint64_t v6;

  v5 = sub_19C2E1370(a2);
  v6 = (*(uint64_t (**)(uint64_t, CFStringRef, uint64_t))(*(_QWORD *)a1 + 16))(a1, v5, a3);
  if (v5)
    CFRelease(v5);
  return v6;
}

void sub_19C33C798(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C2FE810((const void **)va);
  _Unwind_Resume(a1);
}

size_t sub_19C33C7AC@<X0>(uint64_t a1@<X0>, int a2@<W1>, _BYTE *a3@<X8>, __n128 a4@<Q0>)
{
  unint64_t v6;
  size_t result;
  void *exception;
  const char *v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;

  v6 = sub_19C33F498(a1, 7, a4);
  sub_19C3A4B80(v6, a2);
  result = sqlite3_step(*(sqlite3_stmt **)(v6 + 8));
  if ((_DWORD)result != 100)
  {
    if ((_DWORD)result == 26 || (_DWORD)result == 11)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      sub_19C314618((uint64_t)exception, 1);
      __cxa_throw(exception, (struct type_info *)&unk_1E3D31E20, (void (*)(void *))sub_19C3146A4);
    }
    goto LABEL_13;
  }
  result = *(_QWORD *)(v6 + 8);
  if (!result)
  {
LABEL_13:
    a3[23] = 0;
    *a3 = 0;
    return result;
  }
  v10 = (const char *)sqlite3_column_blob((sqlite3_stmt *)result, 0);
  result = strlen(v10);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    sub_19C2A1A54();
  v11 = result;
  if (result >= 0x17)
  {
    v12 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v12 = result | 7;
    v13 = v12 + 1;
    v14 = operator new(v12 + 1);
    *((_QWORD *)a3 + 1) = v11;
    *((_QWORD *)a3 + 2) = v13 | 0x8000000000000000;
    *(_QWORD *)a3 = v14;
    a3 = v14;
  }
  else
  {
    a3[23] = result;
    if (!result)
      goto LABEL_18;
  }
  result = (size_t)memmove(a3, v10, v11);
LABEL_18:
  a3[v11] = 0;
  return result;
}

void sub_19C33C8C4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19C33C8D8(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void sub_19C33C8E0()
{
  __assert_rtn("enumerateSortkeyEquivalentEntries", "LMLexiconDatabase.cpp", 123, "false && \"enumerateSortKeyEquivalentEntries is not supported in LexiconDatabase\"");
}

void sub_19C33C908()
{
  __assert_rtn("createLXCursorRoot", "LMLexiconDatabase.cpp", 128, "false && \"createLXCursorRoot is not supported in LexiconDatabase\"");
}

uint64_t sub_19C33C930(uint64_t a1, uint64_t a2, __n128 a3)
{
  unint64_t v4;
  uint64_t result;
  uint64_t v7;
  void *exception;
  char v11;

  v4 = sub_19C33F498(a1, 12, a3);
  result = sqlite3_step(*(sqlite3_stmt **)(v4 + 8));
  if ((_DWORD)result == 26 || (_DWORD)result == 11)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    sub_19C314618((uint64_t)exception, 1);
    goto LABEL_18;
  }
  v11 = 0;
  if ((_DWORD)result == 100)
  {
    while (1)
    {
      v7 = sqlite3_column_int(*(sqlite3_stmt **)(v4 + 8), 0);
      if ((_DWORD)v7)
        (*(void (**)(uint64_t, uint64_t, char *, double))(a2 + 16))(a2, v7, &v11, 0.0);
      result = sqlite3_step(*(sqlite3_stmt **)(v4 + 8));
      if ((_DWORD)result == 26 || (_DWORD)result == 11)
        break;
      if ((_DWORD)result != 100 || v11 != 0)
        return result;
    }
    exception = __cxa_allocate_exception(0x20uLL);
    sub_19C314618((uint64_t)exception, 1);
LABEL_18:
    __cxa_throw(exception, (struct type_info *)&unk_1E3D31E20, (void (*)(void *))sub_19C3146A4);
  }
  return result;
}

void sub_19C33CA10(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19C33CA28(uint64_t a1)
{
  return *(unsigned int *)(a1 + 156);
}

off_t sub_19C33CA30(uint64_t a1)
{
  const char *v2;
  stat v4;

  v2 = (const char *)(a1 + 112);
  if (*(char *)(a1 + 135) < 0)
    v2 = *(const char **)v2;
  if (stat(v2, &v4) >= 0)
    return 0;
  else
    return v4.st_size;
}

void sub_19C33CA70(uint64_t a1, std::error_code *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  const std::__fs::filesystem::path **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if (*(_BYTE *)(a1 + 56))
  {
    sub_19C3E26C4(a1 + 64);
    sub_19C33FC7C(a1 + 16);
  }
  v10 = *(_QWORD *)(a1 + 144);
  v11 = *(_DWORD *)(v10 + 288);
  *(_QWORD *)(a1 + 152) = v11;
  if (v11 <= *(_DWORD *)(v10 + 292))
    v12 = v11;
  else
    v12 = 0;
  *(_DWORD *)(a1 + 152) = v12;
  v13 = (const std::__fs::filesystem::path **)(a1 + 112);
  if (*(char *)(a1 + 135) < 0)
  {
    if ((remove(*v13, a2) & 0x80000000) == 0)
      return;
  }
  else if ((remove((const std::__fs::filesystem::path *)v13, a2) & 0x80000000) == 0)
  {
    return;
  }
  if (qword_1EDB97100 != -1)
    dispatch_once(&qword_1EDB97100, &unk_1E3D3BED0);
  sub_19C3E8FF4((int *)qword_1EDB970F8, v14, "failed to remove lexicon database", v15, v16, v17, v18, v19, a9);
}

BOOL sub_19C33CB2C(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  __CFDictionary *Mutable;
  const char *v9;
  CFStringRef v10;
  int v11;

  v7 = *(_QWORD *)(a1[1] + 64);
  Mutable = CFDictionaryCreateMutable(0, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (*(char *)(a2 + 23) >= 0)
    v9 = (const char *)a2;
  else
    v9 = *(const char **)a2;
  v10 = CFStringCreateWithCString(0, v9, 0x8000100u);
  CFDictionarySetValue(Mutable, *(const void **)(v7 + 24), v10);
  CFRelease(v10);
  v11 = (*(uint64_t (**)(_QWORD *, __CFDictionary *, uint64_t))(*a1 + 248))(a1, Mutable, a4);
  CFRelease(Mutable);
  return v11 == 0;
}

uint64_t sub_19C33CBF0()
{
  return 0;
}

uint64_t sub_19C33CBF8()
{
  return 0;
}

void sub_19C33CC00()
{
  __assert_rtn("prune", "LMLexiconDatabase.cpp", 533, "false");
}

uint64_t sub_19C33CC28@<X0>(__int128 *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  _QWORD v19[5];
  _QWORD v20[9];
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  char v24;
  _QWORD v25[6];
  _QWORD *v26[2];
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t, uint64_t);
  uint64_t (*v31)(uint64_t);
  uint64_t v32;

  v27 = 0;
  v28 = &v27;
  v29 = 0x3002000000;
  v30 = sub_19C33ED8C;
  v31 = sub_19C33ED9C;
  v8 = operator new();
  sub_19C33EDBC(v8, a3, a1 + 7, 0);
  v32 = v8;
  v25[0] = 0;
  v25[1] = v25;
  v25[2] = 0x4002000000;
  v25[3] = sub_19C33F248;
  v25[4] = sub_19C33F284;
  v26[0] = 0;
  v26[1] = 0;
  v25[5] = v26;
  v21 = 0;
  v22 = &v21;
  v23 = 0x2000000000;
  v9 = MEMORY[0x1E0C809B0];
  v24 = 1;
  v20[0] = MEMORY[0x1E0C809B0];
  v20[1] = 0x40000000;
  v20[2] = sub_19C33F28C;
  v20[3] = &unk_1E3D3A330;
  v20[7] = a1;
  v20[8] = a2;
  v20[4] = &v27;
  v20[5] = v25;
  v20[6] = &v21;
  (*(void (**)(__int128 *, _QWORD *))(*(_QWORD *)a1 + 88))(a1, v20);
  if (*((_BYTE *)v22 + 24))
  {
    v19[0] = v9;
    v19[1] = 0x40000000;
    v19[2] = sub_19C33F448;
    v19[3] = &unk_1E3D3A358;
    v19[4] = v25;
    if (*a2)
      sub_19C42BD40(*a2, (uint64_t)v19, 0, *(_BYTE *)(*a2 + 6));
  }
  else
  {
    if (qword_1EDB97100 != -1)
      dispatch_once(&qword_1EDB97100, &unk_1E3D3BED0);
    sub_19C3E8FF4((int *)qword_1EDB970F8, v10, "failed to prune lexicon database", v11, v12, v13, v14, v15, v19[0]);
    v16 = v28[5];
    v28[5] = 0;
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  }
  v17 = v28[5];
  v28[5] = 0;
  *a4 = v17;
  _Block_object_dispose(&v21, 8);
  _Block_object_dispose(v25, 8);
  sub_19C33275C(v26[0]);
  _Block_object_dispose(&v27, 8);
  result = v32;
  v32 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_19C33CE64(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD355C](v1, 0x10F3C401454C883);
  _Unwind_Resume(a1);
}

void sub_19C33CE88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,_QWORD *a33)
{
  uint64_t v33;
  uint64_t v35;

  _Block_object_dispose(&a23, 8);
  _Block_object_dispose(&a27, 8);
  sub_19C33275C(a33);
  _Block_object_dispose((const void *)(v33 - 128), 8);
  v35 = *(_QWORD *)(v33 - 88);
  *(_QWORD *)(v33 - 88) = 0;
  if (!v35)
    _Unwind_Resume(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  _Unwind_Resume(a1);
}

sqlite3 *sub_19C33CEE0(sqlite3 *result)
{
  if (*((_BYTE *)result + 56))
    return sub_19C33EC6C((uint64_t)result + 16, 1);
  return result;
}

void sub_19C33CFAC()
{
  __assert_rtn("incrementPenaltyCount", "LMLexiconDatabase.cpp", 619, "false && \"incrementPenaltyCount() is not supported in LexiconDatabase\"");
}

void sub_19C33CFD4()
{
  __assert_rtn("getPenaltyCount", "LMLexiconDatabase.cpp", 624, "false && \"getPenaltyCount() is not supported in LexiconDatabase\"");
}

void sub_19C33CFFC()
{
  __assert_rtn("getUsageCount", "LMLexiconDatabase.cpp", 630, "false && \"getUsageCount() is not supported in LexiconDatabase\"");
}

void sub_19C33D024()
{
  __assert_rtn("blocklistToken", "LMLexiconDatabase.cpp", 636, "false && \"blocklistToken() is not supported in LexiconDatabase\"");
}

uint64_t sub_19C33D04C()
{
  return 0;
}

void sub_19C33D054()
{
  __assert_rtn("incrementUsageCountForRecentToken", "LMLexiconDatabase.cpp", 652, "false && \"incrementUsageCountForRecentToken() is not supported in LexiconDatabase\"");
}

uint64_t sub_19C33D080(uint64_t a1, const __CFDictionary *a2, __n128 a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  __n128 *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  BOOL v12;
  uint64_t *v13;
  uint64_t v14;
  std::string *v15;
  const __CFString *Value;
  const __CFString *v17;
  CFTypeID v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v26;
  char *v27;
  char *v28;
  char v29;
  unint64_t v30;
  char *v32;
  char *v33;
  unint64_t v34;
  std::string v35;

  if (!a2)
    return 3;
  v4 = *(uint64_t **)(a1 + 8);
  v32 = 0;
  v33 = 0;
  v34 = 0;
  v5 = *v4;
  v6 = v4[1];
  if (*v4 != v6)
  {
    do
    {
      if (CFDictionaryContainsKey(a2, *(const void **)(v5 + 24)))
      {
        v8 = (__n128 *)v33;
        if ((unint64_t)v33 >= v34)
        {
          v7 = sub_19C318C78(&v32, v5);
        }
        else
        {
          if (*(char *)(v5 + 23) < 0)
          {
            sub_19C2B5238(v33, *(void **)v5, *(_QWORD *)(v5 + 8));
          }
          else
          {
            a3 = *(__n128 *)v5;
            *((_QWORD *)v33 + 2) = *(_QWORD *)(v5 + 16);
            *v8 = a3;
          }
          v7 = &v8[1].n128_i8[8];
        }
        v33 = v7;
      }
      v5 += 48;
    }
    while (v5 != v6);
  }
  v9 = *(_QWORD *)(a1 + 96);
  if (!v9)
    goto LABEL_25;
  v10 = a1 + 96;
  do
  {
    v11 = *(_DWORD *)(v9 + 32);
    v12 = v11 < 6;
    if (v11 >= 6)
      v13 = (uint64_t *)v9;
    else
      v13 = (uint64_t *)(v9 + 8);
    if (!v12)
      v10 = v9;
    v9 = *v13;
  }
  while (*v13);
  if (v10 != a1 + 96 && *(int *)(v10 + 32) <= 6 && (v14 = *(_QWORD *)(v10 + 40)) != 0)
  {
    v30 = *(_QWORD *)(v10 + 40);
    sub_19C3A4A38(v14);
  }
  else
  {
LABEL_25:
    sub_19C418AD8(&v35, *(uint64_t ***)(a1 + 136), 6, a3);
    if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v15 = &v35;
    else
      v15 = (std::string *)v35.__r_.__value_.__r.__words[0];
    v30 = sub_19C3A460C((uint64_t **)(a1 + 64), *(_QWORD *)(a1 + 16), (const char *)v15, 6);
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v35.__r_.__value_.__l.__data_);
  }
  Value = (const __CFString *)CFDictionaryGetValue(a2, *(const void **)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 24));
  v17 = Value;
  if (!Value || (v18 = CFGetTypeID(Value), v18 == CFStringGetTypeID()))
    sub_19C3A4E04(v30, v17);
  if (qword_1EDB97100 != -1)
    dispatch_once(&qword_1EDB97100, &unk_1E3D3BED0);
  sub_19C3E8FF4((int *)qword_1EDB970F8, v19, "binding attributes failed: missing or incompatible token string", v20, v21, v22, v23, v24, v29);
  v26 = v32;
  if (v32)
  {
    v27 = v33;
    v28 = v32;
    if (v33 != v32)
    {
      do
      {
        if (*(v27 - 1) < 0)
          operator delete(*((void **)v27 - 3));
        v27 -= 24;
      }
      while (v27 != v26);
      v28 = v32;
    }
    v33 = v26;
    operator delete(v28);
  }
  return 3;
}

void sub_19C33DB64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, int a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29)
{
  uint64_t v29;

  if (__p)
    operator delete(__p);
  sub_19C307B68((void **)(v29 - 136));
  _Unwind_Resume(a1);
}

const __CFDictionary *sub_19C33DDDC(uint64_t a1, CFDictionaryRef theDict, int a3)
{
  const __CFDictionary *v3;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _OWORD *v9;
  __int128 v10;
  int v11;
  std::string::size_type v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  std::string *p_p;
  int v17;
  unint64_t v18;
  char *v19;
  void **v20;
  void *v21;
  void *exception;
  std::string __p;
  unint64_t v25;
  void *v26;
  char *v27;
  unint64_t v28;
  int v29;

  v3 = theDict;
  v29 = a3;
  if (theDict)
  {
    v5 = *(uint64_t **)(a1 + 8);
    v26 = 0;
    v27 = 0;
    v28 = 0;
    v6 = *v5;
    v7 = v5[1];
    while (v6 != v7)
    {
      if (CFDictionaryContainsKey(v3, *(const void **)(v6 + 24)))
      {
        v9 = v27;
        if ((unint64_t)v27 >= v28)
        {
          v8 = sub_19C318C78((char **)&v26, v6);
        }
        else
        {
          if (*(char *)(v6 + 23) < 0)
          {
            sub_19C2B5238(v27, *(void **)v6, *(_QWORD *)(v6 + 8));
          }
          else
          {
            v10 = *(_OWORD *)v6;
            *((_QWORD *)v27 + 2) = *(_QWORD *)(v6 + 16);
            *v9 = v10;
          }
          v8 = (char *)v9 + 24;
        }
        v27 = v8;
      }
      v6 += 48;
    }
    sub_19C419D38(&__p, *(_QWORD *)(a1 + 136), (const void ***)&v26);
    v11 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    v12 = __p.__r_.__value_.__r.__words[0];
    v13 = operator new();
    v14 = v13;
    v15 = *(_QWORD *)(a1 + 16);
    if (v11 >= 0)
      p_p = &__p;
    else
      p_p = (std::string *)v12;
    *(_QWORD *)v13 = 0;
    *(_QWORD *)(v13 + 8) = 0;
    *(_QWORD *)(v13 + 16) = v15;
    *(_DWORD *)(v13 + 24) = 1;
    sub_19C3A48A0(v13, (const char *)p_p);
    v25 = v14;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if ((sub_19C33E904(*(uint64_t **)(a1 + 8), v3, &v29, 0, v14) & 1) != 0)
    {
      sub_19C3A4B80(v14, v29);
      v17 = sqlite3_step(*(sqlite3_stmt **)(v14 + 8));
      if (v17 == 26 || v17 == 11)
      {
        exception = __cxa_allocate_exception(0x20uLL);
        sub_19C314618((uint64_t)exception, 1);
        __cxa_throw(exception, (struct type_info *)&unk_1E3D31E20, (void (*)(void *))sub_19C3146A4);
      }
      v3 = (const __CFDictionary *)(v17 == 101);
    }
    else
    {
      v3 = 0;
    }
    v18 = sub_19C3A495C(v14);
    MEMORY[0x1A1AD355C](v18, 0x1020C4055CCDE27);
    v19 = (char *)v26;
    if (v26)
    {
      v20 = (void **)v27;
      v21 = v26;
      if (v27 != v26)
      {
        do
        {
          if (*((char *)v20 - 1) < 0)
            operator delete(*(v20 - 3));
          v20 -= 3;
        }
        while (v20 != (void **)v19);
        v21 = v26;
      }
      v27 = v19;
      operator delete(v21);
    }
  }
  return v3;
}

void sub_19C33DFF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17)
{
  void *v17;

  __cxa_free_exception(v17);
  sub_19C3144E8((unint64_t *)&a15);
  sub_19C307B68(&a16);
  _Unwind_Resume(a1);
}

__CFDictionary *sub_19C33E09C(uint64_t a1, int a2, __n128 a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t **v11;
  std::string *p_p;
  int v13;
  void *exception;
  std::string __p;

  v5 = *(_QWORD *)(a1 + 96);
  if (!v5)
    goto LABEL_13;
  v6 = a1 + 96;
  do
  {
    v7 = *(_DWORD *)(v5 + 32);
    v8 = v7 < 5;
    if (v7 >= 5)
      v9 = (uint64_t *)v5;
    else
      v9 = (uint64_t *)(v5 + 8);
    if (!v8)
      v6 = v5;
    v5 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 96 && *(int *)(v6 + 32) <= 5 && (v10 = *(_QWORD *)(v6 + 40)) != 0)
  {
    sub_19C3A4A38(*(_QWORD *)(v6 + 40));
  }
  else
  {
LABEL_13:
    v11 = (uint64_t **)(a1 + 64);
    sub_19C418AD8(&__p, *(uint64_t ***)(a1 + 136), 5, a3);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    v10 = sub_19C3A460C(v11, *(_QWORD *)(a1 + 16), (const char *)p_p, 5);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  sub_19C3A4B80(v10, a2);
  v13 = sqlite3_step(*(sqlite3_stmt **)(v10 + 8));
  if (v13 == 100)
    return sub_19C33E774(*(uint64_t **)(a1 + 8), v10, 0);
  if (v13 == 26 || v13 == 11)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    sub_19C314618((uint64_t)exception, 1);
    __cxa_throw(exception, (struct type_info *)&unk_1E3D31E20, (void (*)(void *))sub_19C3146A4);
  }
  return 0;
}

void sub_19C33E1D8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19C33E1EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C33E290(uint64_t a1, int a2, const __CFString *a3, _QWORD *a4, __n128 a5)
{
  uint64_t v9;
  uint64_t v10;
  int v11;
  BOOL v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t **v15;
  std::string *p_p;
  int v17;
  void *exception;
  uint64_t *v20;
  int v21;
  std::string __p;

  v9 = *(_QWORD *)(a1 + 96);
  if (!v9)
    goto LABEL_13;
  v10 = a1 + 96;
  do
  {
    v11 = *(_DWORD *)(v9 + 32);
    v12 = v11 < 5;
    if (v11 >= 5)
      v13 = (uint64_t *)v9;
    else
      v13 = (uint64_t *)(v9 + 8);
    if (!v12)
      v10 = v9;
    v9 = *v13;
  }
  while (*v13);
  if (v10 != a1 + 96 && *(int *)(v10 + 32) <= 5 && (v14 = *(_QWORD *)(v10 + 40)) != 0)
  {
    sub_19C3A4A38(*(_QWORD *)(v10 + 40));
  }
  else
  {
LABEL_13:
    v15 = (uint64_t **)(a1 + 64);
    sub_19C418AD8(&__p, *(uint64_t ***)(a1 + 136), 5, a5);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    v14 = sub_19C3A460C(v15, *(_QWORD *)(a1 + 16), (const char *)p_p, 5);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  sub_19C3A4B80(v14, a2);
  v17 = sqlite3_step(*(sqlite3_stmt **)(v14 + 8));
  if (v17 != 100)
  {
    if (v17 == 26 || v17 == 11)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      sub_19C314618((uint64_t)exception, 1);
      __cxa_throw(exception, (struct type_info *)&unk_1E3D31E20, (void (*)(void *))sub_19C3146A4);
    }
    return 0;
  }
  sub_19C29CEF8(a3, &__p);
  v20 = sub_19C318A7C((_QWORD *)(*(_QWORD *)(a1 + 8) + 24), (uint64_t)&__p);
  if (!v20 || (v21 = *((_DWORD *)v20 + 10), v21 == -1))
  {
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    return 0;
  }
  if (a4)
    *a4 = sqlite3_column_int(*(sqlite3_stmt **)(v14 + 8), v21);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return 1;
}

void sub_19C33E430(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

CFStringRef sub_19C33E4E8(uint64_t a1, int a2, const __CFString *a3, __n128 a4)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t **v13;
  std::string *p_p;
  int v15;
  CFStringRef v17;
  uint64_t *v18;
  int v19;
  const UInt8 *v20;
  int v21;
  BOOL v22;
  void *exception;
  std::string __p;

  v7 = *(_QWORD *)(a1 + 96);
  if (!v7)
    goto LABEL_13;
  v8 = a1 + 96;
  do
  {
    v9 = *(_DWORD *)(v7 + 32);
    v10 = v9 < 5;
    if (v9 >= 5)
      v11 = (uint64_t *)v7;
    else
      v11 = (uint64_t *)(v7 + 8);
    if (!v10)
      v8 = v7;
    v7 = *v11;
  }
  while (*v11);
  if (v8 != a1 + 96 && *(int *)(v8 + 32) <= 5 && (v12 = *(_QWORD *)(v8 + 40)) != 0)
  {
    sub_19C3A4A38(*(_QWORD *)(v8 + 40));
  }
  else
  {
LABEL_13:
    v13 = (uint64_t **)(a1 + 64);
    sub_19C418AD8(&__p, *(uint64_t ***)(a1 + 136), 5, a4);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    v12 = sub_19C3A460C(v13, *(_QWORD *)(a1 + 16), (const char *)p_p, 5);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  sub_19C3A4B80(v12, a2);
  v15 = sqlite3_step(*(sqlite3_stmt **)(v12 + 8));
  if (v15 == 100)
  {
    sub_19C29CEF8(a3, &__p);
    v18 = sub_19C318A7C((_QWORD *)(*(_QWORD *)(a1 + 8) + 24), (uint64_t)&__p);
    if (!v18
      || (v19 = *((_DWORD *)v18 + 10), v19 == -1)
      || ((v20 = (const UInt8 *)sqlite3_column_blob(*(sqlite3_stmt **)(v12 + 8), v19),
           v21 = sqlite3_column_bytes(*(sqlite3_stmt **)(v12 + 8), v19),
           v21 >= 1)
        ? (v22 = v20 == 0)
        : (v22 = 1),
          v22))
    {
      v17 = 0;
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return v17;
    }
    else
    {
      v17 = CFStringCreateWithBytes(0, v20, v21, 0x8000100u, 0);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return v17;
    }
    operator delete(__p.__r_.__value_.__l.__data_);
    return v17;
  }
  if (v15 == 26 || v15 == 11)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    sub_19C314618((uint64_t)exception, 1);
    __cxa_throw(exception, (struct type_info *)&unk_1E3D31E20, (void (*)(void *))sub_19C3146A4);
  }
  return 0;
}

void sub_19C33E6B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

__CFDictionary *sub_19C33E774(uint64_t *a1, uint64_t a2, int *a3)
{
  __CFDictionary *Mutable;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  const UInt8 *v12;
  int v13;
  CFStringRef v15;
  const void *v16;
  CFNumberRef v17;
  int valuePtr;

  Mutable = CFDictionaryCreateMutable(0, 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4), MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v7 = *a1;
  v8 = a1[1];
  if (*a1 != v8)
  {
    v9 = 0;
    while (1)
    {
      v11 = *(_DWORD *)(v7 + 32);
      if (v11 == 1)
        break;
      if (!v11)
      {
        v12 = (const UInt8 *)sqlite3_column_blob(*(sqlite3_stmt **)(a2 + 8), v9);
        v10 = (v9 + 1);
        v13 = sqlite3_column_bytes(*(sqlite3_stmt **)(a2 + 8), v9);
        if (v13 < 1 || v12 == 0)
          goto LABEL_4;
        v15 = CFStringCreateWithBytes(0, v12, v13, 0x8000100u, 0);
        if (!CFEqual(v15, *(CFTypeRef *)(v7 + 40)))
          CFDictionaryAddValue(Mutable, *(const void **)(v7 + 24), v15);
        v16 = v15;
        goto LABEL_17;
      }
      v10 = v9;
LABEL_4:
      v7 += 48;
      v9 = v10;
      if (v7 == v8)
        goto LABEL_19;
    }
    valuePtr = 0;
    valuePtr = sqlite3_column_int(*(sqlite3_stmt **)(a2 + 8), v9);
    v17 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (!CFEqual(v17, *(CFTypeRef *)(v7 + 40)))
      CFDictionaryAddValue(Mutable, *(const void **)(v7 + 24), v17);
    v10 = (v9 + 1);
    v16 = v17;
LABEL_17:
    CFRelease(v16);
    goto LABEL_4;
  }
  LODWORD(v10) = 0;
LABEL_19:
  if (a3)
    *a3 = sqlite3_column_int(*(sqlite3_stmt **)(a2 + 8), v10);
  return Mutable;
}

uint64_t sub_19C33E904(uint64_t *a1, CFDictionaryRef theDict, int *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  int v11;
  const __CFString *v12;
  int v13;
  CFTypeID v14;
  CFTypeID v15;
  const __CFString *v16;
  int v17;
  CFTypeID v18;
  CFTypeID v19;
  uint64_t v20;
  uint64_t v21;
  int v23;
  const __CFString *Value;
  int v25;
  CFTypeID v26;
  CFTypeID v27;
  int valuePtr;

  if (!a4)
  {
    v20 = *a1;
    v21 = a1[1];
    if (*a1 == v21)
      return 1;
    while (1)
    {
      v23 = CFDictionaryContainsKey(theDict, *(const void **)(v20 + 24));
      if (v23)
      {
        Value = (const __CFString *)CFDictionaryGetValue(theDict, *(const void **)(v20 + 24));
        v25 = *(_DWORD *)(v20 + 32);
        if (!v25)
          goto LABEL_37;
      }
      else
      {
        Value = *(const __CFString **)(v20 + 40);
        v25 = *(_DWORD *)(v20 + 32);
        if (!v25)
        {
LABEL_37:
          v27 = CFGetTypeID(Value);
          if (v27 != CFStringGetTypeID())
            return 0;
          if (a5 && v23)
            sub_19C3A4E04(a5, Value);
          goto LABEL_28;
        }
      }
      if (v25 == 1)
      {
        v26 = CFGetTypeID(Value);
        if (v26 != CFNumberGetTypeID())
          return 0;
        valuePtr = 0;
        CFNumberGetValue((CFNumberRef)Value, kCFNumberIntType, &valuePtr);
        if (a5 && v23)
          sub_19C3A4B80(a5, valuePtr);
      }
LABEL_28:
      v20 += 48;
      if (v20 == v21)
        return 1;
    }
  }
  if (!a3)
    return 0;
  sub_19C3A4B80(a4, *a3);
  v9 = *a1;
  v10 = a1[1];
  if (*a1 == v10)
    return 1;
  if (!a5)
  {
    while (1)
    {
      if (CFDictionaryContainsKey(theDict, *(const void **)(v9 + 24)))
      {
        v16 = (const __CFString *)CFDictionaryGetValue(theDict, *(const void **)(v9 + 24));
        v17 = *(_DWORD *)(v9 + 32);
        if (!v17)
          goto LABEL_24;
      }
      else
      {
        v16 = *(const __CFString **)(v9 + 40);
        v17 = *(_DWORD *)(v9 + 32);
        if (!v17)
        {
LABEL_24:
          v19 = CFGetTypeID(v16);
          if (v19 == CFStringGetTypeID())
            sub_19C3A4E04(a4, v16);
          return 0;
        }
      }
      if (v17 == 1)
      {
        v18 = CFGetTypeID(v16);
        if (v18 != CFNumberGetTypeID())
          return 0;
        valuePtr = 0;
        CFNumberGetValue((CFNumberRef)v16, kCFNumberIntType, &valuePtr);
        sub_19C3A4B80(a4, valuePtr);
      }
      v9 += 48;
      if (v9 == v10)
        return 1;
    }
  }
  while (1)
  {
    v11 = CFDictionaryContainsKey(theDict, *(const void **)(v9 + 24));
    if (v11)
      v12 = (const __CFString *)CFDictionaryGetValue(theDict, *(const void **)(v9 + 24));
    else
      v12 = *(const __CFString **)(v9 + 40);
    v13 = *(_DWORD *)(v9 + 32);
    if (v13 == 1)
    {
      v15 = CFGetTypeID(v12);
      if (v15 != CFNumberGetTypeID())
        return 0;
      valuePtr = 0;
      CFNumberGetValue((CFNumberRef)v12, kCFNumberIntType, &valuePtr);
      sub_19C3A4B80(a4, valuePtr);
      if (v11)
        sub_19C3A4B80(a5, valuePtr);
      goto LABEL_6;
    }
    if (!v13)
      break;
LABEL_6:
    v9 += 48;
    if (v9 == v10)
      return 1;
  }
  v14 = CFGetTypeID(v12);
  if (v14 == CFStringGetTypeID())
    sub_19C3A4E04(a4, v12);
  return 0;
}

void sub_19C33EC58()
{
  __cxa_end_catch();
  JUMPOUT(0x19C33EC60);
}

sqlite3 *sub_19C33EC6C(uint64_t a1, int a2)
{
  const char *v4;
  int v5;
  sqlite3 **p_ppDb;
  sqlite3 *v7;
  sqlite3 **v8;
  sqlite3 *v9;
  sqlite3_backup *v10;
  sqlite3_backup *v11;
  sqlite3 *result;
  void *exception;
  sqlite3 *ppDb;

  ppDb = 0;
  v4 = (const char *)(a1 + 16);
  if (*(char *)(a1 + 39) < 0)
    v4 = *(const char **)v4;
  v5 = sqlite3_open(v4, &ppDb);
  if (!v5)
  {
    if (a2)
      p_ppDb = (sqlite3 **)a1;
    else
      p_ppDb = &ppDb;
    v7 = *p_ppDb;
    if (a2)
      v8 = &ppDb;
    else
      v8 = (sqlite3 **)a1;
    v9 = *v8;
    if (a2 && *(_BYTE *)(a1 + 41))
      sqlite3_exec(ppDb, "PRAGMA journal_mode = WAL;", 0, 0, 0);
    v10 = sqlite3_backup_init(v9, "main", v7, "main");
    if (v10)
    {
      v11 = v10;
      sqlite3_backup_step(v10, -1);
      sqlite3_backup_finish(v11);
    }
    v5 = sqlite3_errcode(ppDb);
  }
  result = ppDb;
  if (ppDb)
    result = (sqlite3 *)sqlite3_close(ppDb);
  if (v5)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    sub_19C314618((uint64_t)exception, 3);
    __cxa_throw(exception, (struct type_info *)&unk_1E3D31E20, (void (*)(void *))sub_19C3146A4);
  }
  return result;
}

void sub_19C33ED78(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19C33ED8C(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(result + 40) = v2;
  return result;
}

uint64_t sub_19C33ED9C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_19C33EDBC(uint64_t a1, uint64_t a2, __int128 *a3, int a4)
{
  char *v5;
  sqlite3 **v8;
  void **v9;
  __int128 v10;
  uint64_t v11;
  __n128 v12;
  int v13;
  unint64_t v14;
  int v15;
  __n128 v16;
  void *v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  void *v23;
  void *exception;
  stat v26;

  v5 = (char *)a3;
  *(_QWORD *)a1 = off_1E3D353A8;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 16) = 0;
  v8 = (sqlite3 **)(a1 + 16);
  *(_QWORD *)(a1 + 24) = a1;
  *(_QWORD *)(a1 + 32) = 0;
  v9 = (void **)(a1 + 32);
  *(_WORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 64) = a1 + 72;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = a1 + 96;
  if (*((char *)a3 + 23) < 0)
  {
    sub_19C2B5238((_BYTE *)(a1 + 112), *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v10 = *a3;
    *(_QWORD *)(a1 + 128) = *((_QWORD *)a3 + 2);
    *(_OWORD *)(a1 + 112) = v10;
  }
  v11 = operator new();
  *(_QWORD *)v11 = *(_QWORD *)(a2 + 184);
  *(_BYTE *)(v11 + 31) = 5;
  strcpy((char *)(v11 + 8), "Words");
  *(_QWORD *)(a1 + 136) = v11;
  *(_QWORD *)(a1 + 144) = a2;
  *(_QWORD *)(a1 + 152) = 0;
  if (v5[23] < 0)
    v5 = *(char **)v5;
  if (v5 && !*(_QWORD *)(a1 + 16))
  {
    *(_BYTE *)(a1 + 56) = 1;
    sub_19C31474C(v9, v5);
    *(_BYTE *)(a1 + 57) = 0;
    v13 = sqlite3_open_v2(":memory:", v8, 3145730, 0);
    if (v13 == 26 || v13 == 11)
    {
      if ((sub_19C33FC7C((uint64_t)v8) & 1) != 0)
        goto LABEL_15;
      exception = __cxa_allocate_exception(0x20uLL);
      sub_19C314618((uint64_t)exception, 1);
    }
    else
    {
      if (!v13)
      {
        if (stat(v5, &v26) || !a4)
          sub_19C33F6A8(v8);
        else
          sub_19C33EC6C((uint64_t)v8, 0);
        goto LABEL_15;
      }
      exception = __cxa_allocate_exception(0x20uLL);
      sub_19C314618((uint64_t)exception, 2);
    }
    __cxa_throw(exception, (struct type_info *)&unk_1E3D31E20, (void (*)(void *))sub_19C3146A4);
  }
LABEL_15:
  v14 = sub_19C33F498(a1, 10, v12);
  v15 = sqlite3_step(*(sqlite3_stmt **)(v14 + 8));
  if (v15 == 100)
  {
    v18 = sqlite3_column_int(*(sqlite3_stmt **)(v14 + 8), 0);
    if (v18)
    {
      v19 = v18 + 1;
      v20 = *(_QWORD *)(a1 + 144);
      goto LABEL_22;
    }
  }
  else if (v15 == 26 || v15 == 11)
  {
    v17 = __cxa_allocate_exception(0x20uLL);
    sub_19C314618((uint64_t)v17, 1);
    __cxa_throw(v17, (struct type_info *)&unk_1E3D31E20, (void (*)(void *))sub_19C3146A4);
  }
  v20 = *(_QWORD *)(a1 + 144);
  v19 = *(_DWORD *)(v20 + 288);
LABEL_22:
  *(_DWORD *)(a1 + 152) = v19;
  if (v19 > *(_DWORD *)(v20 + 292))
    v19 = 0;
  *(_DWORD *)(a1 + 152) = v19;
  v21 = sub_19C33F498(a1, 13, v16);
  v22 = sqlite3_step(*(sqlite3_stmt **)(v21 + 8));
  if (v22 == 100)
  {
    *(_DWORD *)(a1 + 156) = sqlite3_column_int(*(sqlite3_stmt **)(v21 + 8), 0);
  }
  else if (v22 == 26 || v22 == 11)
  {
    v23 = __cxa_allocate_exception(0x20uLL);
    sub_19C314618((uint64_t)v23, 1);
    __cxa_throw(v23, (struct type_info *)&unk_1E3D31E20, (void (*)(void *))sub_19C3146A4);
  }
  return a1;
}

void sub_19C33F0B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, __int128 a10)
{
  uint64_t v10;
  uint64_t v11;
  void **v12;
  void *v13;
  _QWORD *exception;

  __cxa_free_exception(v13);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    exception = __cxa_allocate_exception(0x20uLL);
    sub_19C2A6D48(&a10, "Failed to create lexicon database");
    sub_19C31237C(exception, &a10);
    __cxa_throw(exception, (struct type_info *)&unk_1E3D32968, (void (*)(void *))sub_19C3123E4);
  }
  sub_19C33F588((uint64_t *)(v11 + 136));
  if (*(char *)(v11 + 135) < 0)
    operator delete(*v12);
  sub_19C33F5DC(v10);
  _Unwind_Resume(a1);
}

void sub_19C33F1E8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
      goto LABEL_6;
  }
  else if (!v16)
  {
LABEL_6:
    __cxa_end_catch();
    JUMPOUT(0x19C33F21CLL);
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

_QWORD *sub_19C33F248(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  result[5] = a2[5];
  v2 = a2 + 6;
  v3 = a2[6];
  result[6] = v3;
  v4 = result + 6;
  v5 = a2[7];
  result[7] = v5;
  if (v5)
  {
    *(_QWORD *)(v3 + 16) = v4;
    a2[5] = v2;
    *v2 = 0;
    a2[7] = 0;
  }
  else
  {
    result[5] = v4;
  }
  return result;
}

void sub_19C33F284(uint64_t a1)
{
  sub_19C33275C(*(_QWORD **)(a1 + 48));
}

void sub_19C33F28C(_QWORD *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  _OWORD *v11;
  __int128 v12;
  const void *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t **v18;
  _QWORD *v19;
  unsigned int v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t *v23;
  int v24;

  v2 = (uint64_t *)a1[8];
  v3 = *v2;
  if (*v2)
  {
    v4 = *(_QWORD *)(v3 + 24);
    if (v4 && *(_DWORD *)(v3 + 16) != 0)
    {
      v8 = a1[7];
      v9 = *(_DWORD *)(v3 + 20);
      v10 = *(unsigned __int8 *)(v3 + 7);
      if (!*(_QWORD *)(v3 + 40))
      {
        v11 = malloc_type_malloc(0x30uLL, 0x100004052888210uLL);
        *(_QWORD *)(v3 + 40) = v11;
        if (v11)
        {
          *(_QWORD *)&v12 = -1;
          *((_QWORD *)&v12 + 1) = -1;
          v11[1] = v12;
          v11[2] = v12;
          *v11 = v12;
        }
      }
      if (sub_19C42817C(v4, v9, v10, *(_DWORD **)(*v2 + 40), a2, 0, 0))
      {
        v24 = 0;
        v13 = (const void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 264))(v8, a2);
        v14 = *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 40);
        if ((*(unsigned int (**)(uint64_t, const void *, int *))(*(_QWORD *)v14 + 248))(v14, v13, &v24))
        {
          *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) = 0;
        }
        else
        {
          v15 = v24;
          v16 = *(_QWORD *)(a1[5] + 8);
          v18 = (uint64_t **)(v16 + 48);
          v17 = *(unsigned int **)(v16 + 48);
          if (v17)
          {
            while (1)
            {
              while (1)
              {
                v19 = v17;
                v20 = v17[7];
                if (v20 <= a2)
                  break;
                v17 = (unsigned int *)*v19;
                v18 = (uint64_t **)v19;
                if (!*v19)
                  goto LABEL_19;
              }
              if (v20 >= a2)
                break;
              v17 = (unsigned int *)v19[1];
              if (!v17)
              {
                v18 = (uint64_t **)(v19 + 1);
                goto LABEL_19;
              }
            }
          }
          else
          {
            v19 = (_QWORD *)(v16 + 48);
LABEL_19:
            v21 = v19;
            v19 = operator new(0x28uLL);
            *((_DWORD *)v19 + 7) = a2;
            *((_DWORD *)v19 + 8) = 0;
            *v19 = 0;
            v19[1] = 0;
            v19[2] = v21;
            *v18 = v19;
            v22 = **(_QWORD **)(v16 + 40);
            v23 = v19;
            if (v22)
            {
              *(_QWORD *)(v16 + 40) = v22;
              v23 = *v18;
            }
            sub_19C2A2310(*(uint64_t **)(v16 + 48), v23);
            ++*(_QWORD *)(v16 + 56);
          }
          *((_DWORD *)v19 + 8) = v15;
        }
        CFRelease(v13);
      }
    }
  }
}

uint64_t sub_19C33F448(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  BOOL v8;
  uint64_t *v9;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v5 = *(_QWORD *)(v2 + 48);
  v3 = v2 + 48;
  v4 = v5;
  if (v5)
  {
    v6 = v3;
    do
    {
      v7 = *(_DWORD *)(v4 + 28);
      v8 = v7 >= a2;
      if (v7 >= a2)
        v9 = (uint64_t *)v4;
      else
        v9 = (uint64_t *)(v4 + 8);
      if (v8)
        v6 = v4;
      v4 = *v9;
    }
    while (*v9);
    if (v6 != v3 && *(_DWORD *)(v6 + 28) <= a2)
      return *(unsigned int *)(v6 + 32);
  }
  return a2;
}

unint64_t sub_19C33F498(uint64_t a1, int a2, __n128 a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t **v11;
  std::string *p_p;
  std::string __p;

  v5 = *(_QWORD *)(a1 + 96);
  if (!v5)
    goto LABEL_13;
  v6 = a1 + 96;
  do
  {
    v7 = *(_DWORD *)(v5 + 32);
    v8 = v7 < a2;
    if (v7 >= a2)
      v9 = (uint64_t *)v5;
    else
      v9 = (uint64_t *)(v5 + 8);
    if (!v8)
      v6 = v5;
    v5 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 96 && *(_DWORD *)(v6 + 32) <= a2 && (v10 = *(_QWORD *)(v6 + 40)) != 0)
  {
    sub_19C3A4A38(*(_QWORD *)(v6 + 40));
  }
  else
  {
LABEL_13:
    v11 = (uint64_t **)(a1 + 64);
    sub_19C418AD8(&__p, *(uint64_t ***)(a1 + 136), a2, a3);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    v10 = sub_19C3A460C(v11, *(_QWORD *)(a1 + 16), (const char *)p_p, a2);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v10;
}

void sub_19C33F56C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_19C33F588(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*(char *)(v2 + 31) < 0)
      operator delete(*(void **)(v2 + 8));
    MEMORY[0x1A1AD355C](v2, 0x1072C408ACDB0FELL);
  }
  return a1;
}

uint64_t sub_19C33F5DC(uint64_t a1)
{
  int v2;
  char v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (*(_QWORD *)a1)
  {
    sub_19C3E26C4(a1 + 48);
    v2 = sqlite3_close(*(sqlite3 **)a1);
    v3 = v2;
    if (v2)
    {
      if (qword_1EDB97100 != -1)
        dispatch_once(&qword_1EDB97100, &unk_1E3D3BED0);
      v4 = (int *)qword_1EDB970F8;
      sqlite3_errmsg(*(sqlite3 **)a1);
      sub_19C3E8FF4(v4, v5, "Failed to close database, error code: %d  error message: %s\n", v6, v7, v8, v9, v10, v3);
    }
  }
  sub_19C3E26C4(a1 + 48);
  sub_19C33275C(*(_QWORD **)(a1 + 80));
  sub_19C33275C(*(_QWORD **)(a1 + 56));
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void sub_19C33F6A8(sqlite3 **a1)
{
  sqlite3 **v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  __int128 v11;
  void **v12;
  std::string::size_type v13;
  std::string *v14;
  __int128 v15;
  std::string *v16;
  __int128 v17;
  const void **v18;
  const void **v19;
  int v20;
  size_t v21;
  unint64_t v22;
  char *p_dst;
  uint64_t v24;
  uint64_t v25;
  const void *v26;
  std::string *v27;
  std::string::size_type size;
  int v29;
  const std::string::value_type *v30;
  std::string::size_type v31;
  const void **v32;
  const std::string::value_type *v33;
  std::string::size_type v34;
  int v35;
  size_t v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  const void *v41;
  std::string *v42;
  std::string::size_type v43;
  int v44;
  std::string *v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  void *exception;
  sqlite3 **v56;
  std::string v57;
  void *__p[2];
  uint64_t v59;
  std::string v60;
  std::string __dst;

  v1 = a1;
  v2 = sub_19C33FF10(a1, "BEGIN IMMEDIATE");
  v9 = v2;
  if ((v2 == 0) != (v2 != 5))
  {
    if (qword_1EDB97100 != -1)
      dispatch_once(&qword_1EDB97100, &unk_1E3D3BED0);
    sub_19C3E8FF4((int *)qword_1EDB970F8, v3, "Could not begin transaction, error %d", v4, v5, v6, v7, v8, v9);
  }
  if (*((_BYTE *)v1 + 40))
  {
    v10 = *((_QWORD *)v1[1] + 17);
    *((_BYTE *)&v60.__r_.__value_.__s + 23) = 13;
    strcpy((char *)&v60, "CREATE TABLE ");
    if (*(char *)(v10 + 31) < 0)
    {
      sub_19C2B5238(__p, *(void **)(v10 + 8), *(_QWORD *)(v10 + 16));
    }
    else
    {
      v11 = *(_OWORD *)(v10 + 8);
      v59 = *(_QWORD *)(v10 + 24);
      *(_OWORD *)__p = v11;
    }
    if (v59 >= 0)
      v12 = __p;
    else
      v12 = (void **)__p[0];
    if (v59 >= 0)
      v13 = HIBYTE(v59);
    else
      v13 = (std::string::size_type)__p[1];
    v14 = std::string::append(&v60, (const std::string::value_type *)v12, v13);
    v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    __dst.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    v16 = std::string::append(&__dst, " (TokenID INTEGER PRIMARY KEY, ", 0x1FuLL);
    v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v57.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__dst.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v59) & 0x80000000) == 0)
        goto LABEL_17;
    }
    else if ((SHIBYTE(v59) & 0x80000000) == 0)
    {
      goto LABEL_17;
    }
    operator delete(__p[0]);
LABEL_17:
    v56 = v1;
    if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v60.__r_.__value_.__l.__data_);
    v18 = **(const void ****)v10;
    v19 = *(const void ***)(*(_QWORD *)v10 + 8);
    if (v18 == v19)
    {
LABEL_79:
      std::string::append(&v57, ")", 1uLL);
      v1 = v56;
      sub_19C33FF10(v56, "PRAGMA journal_mode = WAL;");
      if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v45 = &v57;
      else
        v45 = (std::string *)v57.__r_.__value_.__r.__words[0];
      v46 = sub_19C33FF10(v56, (const char *)v45);
      if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v57.__r_.__value_.__l.__data_);
      if (v46)
      {
        exception = __cxa_allocate_exception(0x20uLL);
        sub_19C314618((uint64_t)exception, 4);
        __cxa_throw(exception, (struct type_info *)&unk_1E3D31E20, (void (*)(void *))sub_19C3146A4);
      }
      goto LABEL_85;
    }
    v20 = *((char *)v18 + 23);
    if (v20 >= 0)
      v21 = *((unsigned __int8 *)v18 + 23);
    else
      v21 = (size_t)v18[1];
    v22 = v21 + 1;
    if (v21 + 1 > 0x7FFFFFFFFFFFFFF7)
LABEL_90:
      sub_19C2A1A54();
    if (v22 >= 0x17)
    {
      v24 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v22 | 7) != 0x17)
        v24 = v22 | 7;
      v25 = v24 + 1;
      p_dst = (char *)operator new(v24 + 1);
      __dst.__r_.__value_.__l.__size_ = v21 + 1;
      __dst.__r_.__value_.__r.__words[2] = v25 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      memset(&__dst, 0, sizeof(__dst));
      p_dst = (char *)&__dst;
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v21 + 1;
      if (!v21)
        goto LABEL_36;
    }
    if (v20 >= 0)
      v26 = v18;
    else
      v26 = *v18;
    memmove(p_dst, v26, v21);
LABEL_36:
    *(_WORD *)&p_dst[v21] = 32;
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v27 = &__dst;
    else
      v27 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    else
      size = __dst.__r_.__value_.__l.__size_;
    std::string::append(&v57, (const std::string::value_type *)v27, size);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__dst.__r_.__value_.__l.__data_);
      v29 = *((_DWORD *)v18 + 8);
      if (v29)
        goto LABEL_44;
    }
    else
    {
      v29 = *((_DWORD *)v18 + 8);
      if (v29)
      {
LABEL_44:
        if (v29 != 1)
          goto LABEL_49;
        v30 = "INTEGER";
        v31 = 7;
LABEL_48:
        std::string::append(&v57, v30, v31);
LABEL_49:
        v32 = v18 + 6;
        if (v18 + 6 != v19)
        {
          while (1)
          {
            std::string::append(&v57, ", ", 2uLL);
            v35 = *((char *)v32 + 23);
            if (v35 >= 0)
              v36 = *((unsigned __int8 *)v32 + 23);
            else
              v36 = (size_t)v32[1];
            v37 = v36 + 1;
            if (v36 + 1 > 0x7FFFFFFFFFFFFFF7)
              goto LABEL_90;
            if (v37 >= 0x17)
            {
              v39 = (v37 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v37 | 7) != 0x17)
                v39 = v37 | 7;
              v40 = v39 + 1;
              v38 = (char *)operator new(v39 + 1);
              __dst.__r_.__value_.__l.__size_ = v36 + 1;
              __dst.__r_.__value_.__r.__words[2] = v40 | 0x8000000000000000;
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v38;
            }
            else
            {
              memset(&__dst, 0, sizeof(__dst));
              v38 = (char *)&__dst;
              *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v36 + 1;
              if (!v36)
                goto LABEL_68;
            }
            if (v35 >= 0)
              v41 = v32;
            else
              v41 = *v32;
            memmove(v38, v41, v36);
LABEL_68:
            *(_WORD *)&v38[v36] = 32;
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v42 = &__dst;
            else
              v42 = (std::string *)__dst.__r_.__value_.__r.__words[0];
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v43 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
            else
              v43 = __dst.__r_.__value_.__l.__size_;
            std::string::append(&v57, (const std::string::value_type *)v42, v43);
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__dst.__r_.__value_.__l.__data_);
            v44 = *((_DWORD *)v32 + 8);
            if (v44 == 1)
            {
              v33 = "INTEGER";
              v34 = 7;
            }
            else
            {
              if (v44)
                goto LABEL_53;
              v33 = "BLOB";
              v34 = 4;
            }
            std::string::append(&v57, v33, v34);
LABEL_53:
            v32 += 6;
            if (v32 == v19)
              goto LABEL_79;
          }
        }
        goto LABEL_79;
      }
    }
    v30 = "BLOB";
    v31 = 4;
    goto LABEL_48;
  }
LABEL_85:
  v47 = sub_19C33FF10(v1, "COMMIT");
  v54 = v47;
  if (v47)
  {
    if (qword_1EDB97100 != -1)
      dispatch_once(&qword_1EDB97100, &unk_1E3D3BED0);
    sub_19C3E8FF4((int *)qword_1EDB970F8, v48, "Could not commit transaction, error %d", v49, v50, v51, v52, v53, v54);
  }
}

void sub_19C33FBA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a18 < 0)
    operator delete(__p);
  sub_19C33FFFC((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_19C33FC7C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  const std::string::value_type *v4;
  const std::string::value_type *v5;
  int v6;
  const std::string::value_type *v7;
  std::string::size_type v8;
  std::string *v9;
  __int128 v10;
  void **v11;
  int v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *exception;
  void *__p[2];
  int64_t v23;
  std::string v24;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 136);
  *((_BYTE *)&v24.__r_.__value_.__s + 23) = 11;
  strcpy((char *)&v24, "DROP TABLE ");
  v5 = *(const std::string::value_type **)(v2 + 8);
  v3 = v2 + 8;
  v4 = v5;
  v6 = *(char *)(v3 + 23);
  if (v6 >= 0)
    v7 = (const std::string::value_type *)v3;
  else
    v7 = v4;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(v3 + 23);
  else
    v8 = *(_QWORD *)(v3 + 8);
  v9 = std::string::append(&v24, v7, v8);
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v23 = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (v23 >= 0)
    v11 = __p;
  else
    v11 = (void **)__p[0];
  v12 = sqlite3_exec(*(sqlite3 **)a1, (const char *)v11, 0, 0, 0);
  if (v12)
  {
    if (qword_1EDB97100 != -1)
      dispatch_once(&qword_1EDB97100, &unk_1E3D3BED0);
    v13 = (int *)qword_1EDB970F8;
    sqlite3_errmsg(*(sqlite3 **)a1);
    sub_19C3E8FF4(v13, v14, "Could not execute SQL \"%s\", error message: %s\n", v15, v16, v17, v18, v19, (char)v11);
    if (v12 == 26 || v12 == 11)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      *(_QWORD *)exception = off_1E3D36BC0;
      *((_QWORD *)exception + 1) = 0;
      *((_QWORD *)exception + 2) = 0;
      *((_QWORD *)exception + 3) = 0;
      sub_19C29D01C((void **)exception + 1, "SQLite database corrupted", 0x19uLL);
      __cxa_throw(exception, (struct type_info *)&unk_1E3D31E20, (void (*)(void *))sub_19C3146A4);
    }
  }
  if (SHIBYTE(v23) < 0)
    operator delete(__p[0]);
  sub_19C33F6A8((sqlite3 **)a1);
  return 1;
}

#error "19C33FED4: call analysis failed (funcsize=42)"

uint64_t sub_19C33FF10(sqlite3 **a1, const char *a2)
{
  char v2;
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *exception;

  v2 = (char)a2;
  v4 = sqlite3_exec(*a1, a2, 0, 0, 0);
  if ((_DWORD)v4)
  {
    if (qword_1EDB97100 != -1)
      dispatch_once(&qword_1EDB97100, &unk_1E3D3BED0);
    v5 = (int *)qword_1EDB970F8;
    sqlite3_errmsg(*a1);
    sub_19C3E8FF4(v5, v6, "Could not execute SQL \"%s\", error message: %s\n", v7, v8, v9, v10, v11, v2);
    if ((_DWORD)v4 == 26 || (_DWORD)v4 == 11)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      sub_19C314618((uint64_t)exception, 1);
      __cxa_throw(exception, (struct type_info *)&unk_1E3D31E20, (void (*)(void *))sub_19C3146A4);
    }
  }
  return v4;
}

void sub_19C33FFE8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19C33FFFC(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8))
    sub_19C33FF10(*(sqlite3 ***)a1, "ROLLBACK");
  return a1;
}

uint64_t sub_19C340038(uint64_t a1, int *a2)
{
  unsigned __int8 v4;
  unsigned __int8 v5;
  const __CFString *v6;
  uint64_t v7;
  void **v8;
  void *v9;
  uint64_t *v10;
  int v11;
  const void *v12;
  void *v13;
  size_t v14;
  int v15;
  int v16;
  const void *v17;
  size_t v18;
  size_t v19;
  int v20;
  uint64_t v21;
  uint64_t ExemplarSet;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void **v31;
  uint64_t v32;
  void **v33;
  void *v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t v37;
  const void *v38;
  const void *v39;
  int v40;
  const void *v41;
  size_t v42;
  size_t v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  _BYTE *v49;
  uint64_t *v50;
  void *__p[2];
  uint64_t v53;

  v4 = atomic_load((unsigned __int8 *)&qword_1EDB97110);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_1EDB97110))
  {
    qword_1EDB97180 = 0;
    qword_1EDB97178 = 0;
    qword_1EDB97170 = (uint64_t)&qword_1EDB97178;
    __cxa_guard_release(&qword_1EDB97110);
  }
  v5 = atomic_load((unsigned __int8 *)&qword_1EDB97108);
  if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_1EDB97108))
  {
    qword_1EDB97130 = 850045863;
    unk_1EDB97138 = 0u;
    unk_1EDB97148 = 0u;
    unk_1EDB97158 = 0u;
    qword_1EDB97168 = 0;
    __cxa_guard_release(&qword_1EDB97108);
  }
  if (!a1)
    return a1;
  v6 = (const __CFString *)MEMORY[0x1A1AD2A04](a1);
  sub_19C29CEF8(v6, __p);
  std::mutex::lock((std::mutex *)&qword_1EDB97130);
  v7 = qword_1EDB97178;
  if (!qword_1EDB97178)
    goto LABEL_41;
  if (v53 >= 0)
    v8 = __p;
  else
    v8 = (void **)__p[0];
  if (v53 >= 0)
    v9 = (void *)HIBYTE(v53);
  else
    v9 = __p[1];
  v10 = &qword_1EDB97178;
  do
  {
    while (1)
    {
      v11 = *(char *)(v7 + 55);
      v12 = v11 >= 0 ? (const void *)(v7 + 32) : *(const void **)(v7 + 32);
      v13 = v11 >= 0 ? (void *)*(unsigned __int8 *)(v7 + 55) : *(void **)(v7 + 40);
      v14 = (size_t)(v9 >= v13 ? v13 : v9);
      v15 = memcmp(v12, v8, v14);
      if (v15)
        break;
      if (v13 < v9)
        goto LABEL_14;
LABEL_12:
      v10 = (uint64_t *)v7;
      v7 = *(_QWORD *)v7;
      if (!v7)
        goto LABEL_29;
    }
    if ((v15 & 0x80000000) == 0)
      goto LABEL_12;
LABEL_14:
    v7 = *(_QWORD *)(v7 + 8);
  }
  while (v7);
LABEL_29:
  if (v10 == &qword_1EDB97178)
  {
LABEL_41:
    v21 = ulocdata_open();
    ExemplarSet = ulocdata_getExemplarSet();
    v23 = ulocdata_getExemplarSet();
    v24 = ulocdata_getExemplarSet();
    if (*a2 <= 0 && (v46 = v24, v47 = uset_openEmpty(), (a1 = v47) != 0))
    {
      MEMORY[0x1A1AD3D0C](v47, 48, 57);
      uset_addString();
      if (ExemplarSet)
      {
        MEMORY[0x1A1AD3D00](a1, ExemplarSet);
        uset_close();
      }
      if (v23)
      {
        MEMORY[0x1A1AD3D00](a1, v23);
        uset_close();
      }
      if (v46)
      {
        MEMORY[0x1A1AD3D00](a1, v46);
        uset_close();
      }
      if (v21)
        ulocdata_close();
    }
    else
    {
      if (qword_1EDB97100 != -1)
        dispatch_once(&qword_1EDB97100, &unk_1E3D3BED0);
      v31 = __p;
      if (v53 < 0)
        LOBYTE(v31) = __p[0];
      sub_19C3E8FF4((int *)qword_1EDB970F8, v25, "failed to initialize exemplar set for %s (error code %d)", v26, v27, v28, v29, v30, (char)v31);
      a1 = 0;
    }
    v32 = qword_1EDB97178;
    if (!qword_1EDB97178)
    {
      v35 = &qword_1EDB97178;
      v36 = &qword_1EDB97178;
LABEL_84:
      v48 = operator new(0x40uLL);
      v49 = v48 + 4;
      if (SHIBYTE(v53) < 0)
      {
        sub_19C2B5238(v49, __p[0], (unint64_t)__p[1]);
      }
      else
      {
        *(_OWORD *)v49 = *(_OWORD *)__p;
        v48[6] = v53;
      }
      v48[7] = 0;
      *v48 = 0;
      v48[1] = 0;
      v48[2] = v36;
      *v35 = (uint64_t)v48;
      v50 = v48;
      if (*(_QWORD *)qword_1EDB97170)
      {
        qword_1EDB97170 = *(_QWORD *)qword_1EDB97170;
        v50 = (uint64_t *)*v35;
      }
      sub_19C2A2310((uint64_t *)qword_1EDB97178, v50);
      ++qword_1EDB97180;
LABEL_91:
      v48[7] = a1;
      goto LABEL_94;
    }
    if (v53 >= 0)
      v33 = __p;
    else
      v33 = (void **)__p[0];
    if (v53 >= 0)
      v34 = (void *)HIBYTE(v53);
    else
      v34 = __p[1];
    while (1)
    {
      v36 = (uint64_t *)v32;
      v39 = *(const void **)(v32 + 32);
      v37 = v32 + 32;
      v38 = v39;
      v40 = *(char *)(v37 + 23);
      if (v40 >= 0)
        v41 = (const void *)v37;
      else
        v41 = v38;
      if (v40 >= 0)
        v42 = *(unsigned __int8 *)(v37 + 23);
      else
        v42 = *(_QWORD *)(v37 + 8);
      if (v42 >= (unint64_t)v34)
        v43 = (size_t)v34;
      else
        v43 = v42;
      v44 = memcmp(v33, v41, v43);
      if (v44)
      {
        if (v44 < 0)
          goto LABEL_54;
LABEL_68:
        v45 = memcmp(v41, v33, v43);
        if (v45)
        {
          if ((v45 & 0x80000000) == 0)
            goto LABEL_90;
        }
        else if (v42 >= (unint64_t)v34)
        {
LABEL_90:
          v48 = v36;
          goto LABEL_91;
        }
        v32 = v36[1];
        if (!v32)
        {
          v35 = v36 + 1;
          goto LABEL_84;
        }
      }
      else
      {
        if ((unint64_t)v34 >= v42)
          goto LABEL_68;
LABEL_54:
        v32 = *v36;
        v35 = v36;
        if (!*v36)
          goto LABEL_84;
      }
    }
  }
  v16 = *((char *)v10 + 55);
  if (v16 >= 0)
    v17 = v10 + 4;
  else
    v17 = (const void *)v10[4];
  if (v16 >= 0)
    v18 = *((unsigned __int8 *)v10 + 55);
  else
    v18 = v10[5];
  if (v18 >= (unint64_t)v9)
    v19 = (size_t)v9;
  else
    v19 = v18;
  v20 = memcmp(v8, v17, v19);
  if (v20)
  {
    if (v20 < 0)
      goto LABEL_41;
  }
  else if ((unint64_t)v9 < v18)
  {
    goto LABEL_41;
  }
  a1 = v10[7];
LABEL_94:
  std::mutex::unlock((std::mutex *)&qword_1EDB97130);
  if (SHIBYTE(v53) < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_19C3404F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;

  operator delete(v17);
  std::mutex::unlock((std::mutex *)&qword_1EDB97130);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_19C340530(uint64_t a1, CFTypeRef cf, int a3, uint64_t a4, char a5)
{
  const __CFLocale *v10;
  const __CFString *Value;
  int v13;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  if (cf)
  {
    v10 = (const __CFLocale *)CFRetain(cf);
    *(_QWORD *)(a1 + 16) = v10;
    *(_DWORD *)(a1 + 24) = a3;
    *(_QWORD *)(a1 + 28) = a4;
    *(_BYTE *)(a1 + 36) = a5;
    if (v10)
    {
      Value = (const __CFString *)CFLocaleGetValue(v10, (CFLocaleKey)*MEMORY[0x1E0C9B088]);
      if (CFStringCompare(Value, CFSTR("zh"), 0))
      {
        if (CFStringCompare(Value, CFSTR("ja"), 0) && CFStringCompare(Value, CFSTR("ko"), 0))
        {
          v13 = 0;
          *(_QWORD *)a1 = sub_19C340038((uint64_t)cf, &v13);
        }
      }
    }
  }
  else
  {
    *(_QWORD *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 24) = a3;
    *(_QWORD *)(a1 + 28) = a4;
    *(_BYTE *)(a1 + 36) = a5;
  }
  return a1;
}

uint64_t sub_19C34061C(uint64_t a1, UTF32Char a2, _BYTE *a3)
{
  uint64_t result;
  unsigned __int8 v7;

  result = MEMORY[0x1A1AD3D30](**(_QWORD **)(a1 + 40));
  if (!(_DWORD)result)
  {
    v7 = atomic_load((unsigned __int8 *)&qword_1EDB96FF8);
    if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_1EDB96FF8))
    {
      qword_1EDB97008 = CEMCreateEmojiCharacterSet();
      __cxa_guard_release(&qword_1EDB96FF8);
    }
    result = qword_1EDB97008;
    if (!qword_1EDB97008
      || (result = CFCharacterSetIsLongCharacterMember((CFCharacterSetRef)qword_1EDB97008, a2), !(_DWORD)result))
    {
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 0;
      *a3 = 1;
    }
  }
  return result;
}

void sub_19C3406BC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1EDB96FF8);
  _Unwind_Resume(a1);
}

uint64_t sub_19C3406D4(uint64_t a1)
{
  const __CFURL *buf;
  __int128 __p;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a1 + 40))
  {
    buf = sub_19C3A427C(**(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), CFSTR("dynamic"));
    sub_19C2E15E8(buf, &__p);
  }
  return 0;
}

void sub_19C341B88(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

os_log_t sub_19C341B94()
{
  os_log_t result;

  result = os_log_create("com.apple.LanguageModeling", "DynamicData");
  qword_1EE41C1A0 = (uint64_t)result;
  return result;
}

__n128 sub_19C341BC0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  return result;
}

void sub_19C341BD0(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

__guard sub_19C341C28()
{
  unsigned __int8 v0;
  unsigned __int8 v1;
  __guard *v2;
  int v4;

  v0 = atomic_load((unsigned __int8 *)&qword_1EDB97120);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_1EDB97120))
  {
    qword_1EDB971B0 = (uint64_t)dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_USER_INITIATED, 0);
    __cxa_guard_release(&qword_1EDB97120);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_1EDB97128);
  v2 = &qword_1EDB97000;
  if ((v1 & 1) == 0)
  {
    v4 = __cxa_guard_acquire(&qword_1EDB97128);
    v2 = &qword_1EDB97000;
    if (v4)
    {
      qword_1EDB971B8 = (uint64_t)dispatch_queue_create("com.apple.NLPUtils.SingletonResourceManager", (dispatch_queue_attr_t)qword_1EDB971B0);
      __cxa_guard_release(&qword_1EDB97128);
      v2 = &qword_1EDB97000;
    }
  }
  return v2[55];
}

void sub_19C341CDC(_QWORD *a1)
{
  unint64_t v1;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  uint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  uint64_t **v13;
  uint64_t *v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  __int128 *v42;
  int v43;
  uint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint8x8_t v49;
  uint64_t **v50;
  uint64_t *v51;
  char v52;
  uint64_t v53;
  uint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  _BYTE *v64;
  __int128 v65;
  float v66;
  _BOOL8 v67;
  unint64_t v68;
  unint64_t v69;
  size_t prime;
  void *v71;
  void *v72;
  uint64_t v73;
  _QWORD **v74;
  size_t v75;
  size_t v76;
  size_t v77;
  _QWORD *i;
  size_t v79;
  uint64_t v80;
  unint64_t v81;
  uint8x8_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  size_t v86;
  _QWORD *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  void *v90;
  _QWORD v91[2];
  char v92;

  v3 = atomic_load((unsigned __int8 *)&qword_1EDB97118);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_1EDB97118))
  {
    xmmword_1EDB97188 = 0u;
    *(_OWORD *)&qword_1EDB97198 = 0u;
    dword_1EDB971A8 = 1065353216;
    __cxa_guard_release(&qword_1EDB97118);
  }
  v4 = (uint64_t *)a1[6];
  v5 = *((char *)v4 + 23);
  if (v5 >= 0)
    v6 = (uint64_t *)a1[6];
  else
    v6 = (uint64_t *)*v4;
  if (v5 >= 0)
    v7 = *((unsigned __int8 *)v4 + 23);
  else
    v7 = v4[1];
  v8 = sub_19C2A0F2C((uint64_t)v91, v6, v7);
  v9 = *((_QWORD *)&xmmword_1EDB97188 + 1);
  if (*((_QWORD *)&xmmword_1EDB97188 + 1))
  {
    v10 = v8;
    v11 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_1EDB97188 + 8));
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v12 = v8;
      if (v8 >= *((_QWORD *)&xmmword_1EDB97188 + 1))
        v12 = v8 % *((_QWORD *)&xmmword_1EDB97188 + 1);
    }
    else
    {
      v12 = (*((_QWORD *)&xmmword_1EDB97188 + 1) - 1) & v8;
    }
    v13 = *(uint64_t ***)(xmmword_1EDB97188 + 8 * v12);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        v15 = *((_BYTE *)v4 + 23);
        if (v15 >= 0)
          v1 = *((unsigned __int8 *)v4 + 23);
        else
          v1 = v4[1];
        if (v15 < 0)
          v4 = (uint64_t *)*v4;
        if (v11.u32[0] < 2uLL)
        {
          v16 = *((_QWORD *)&xmmword_1EDB97188 + 1) - 1;
          while (1)
          {
            v21 = v14[1];
            if (v21 == v10)
            {
              v22 = *((unsigned __int8 *)v14 + 39);
              if ((v22 & 0x80u) == 0)
                v23 = *((unsigned __int8 *)v14 + 39);
              else
                v23 = v14[3];
              if (v23 == v1)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v14[2], v4, v14[3]))
                    goto LABEL_55;
                }
                else
                {
                  if (!*((_BYTE *)v14 + 39))
                    goto LABEL_55;
                  v24 = 0;
                  while (*((unsigned __int8 *)v14 + v24 + 16) == *((unsigned __int8 *)v4 + v24))
                  {
                    if (v22 == ++v24)
                      goto LABEL_54;
                  }
                }
              }
            }
            else if ((v21 & v16) != v12)
            {
              goto LABEL_64;
            }
            v14 = (uint64_t *)*v14;
            if (!v14)
              goto LABEL_64;
          }
        }
        do
        {
          v17 = v14[1];
          if (v17 == v10)
          {
            v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0)
              v19 = *((unsigned __int8 *)v14 + 39);
            else
              v19 = v14[3];
            if (v19 == v1)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v14[2], v4, v14[3]))
                {
LABEL_55:
                  v25 = (std::__shared_weak_count *)v14[6];
                  if (v25 && (v25 = std::__shared_weak_count::lock(v25)) != 0)
                    v26 = v14[5];
                  else
                    v26 = 0;
                  v27 = *(_QWORD *)(a1[5] + 8);
                  v28 = *(std::__shared_weak_count **)(v27 + 48);
                  *(_QWORD *)(v27 + 40) = v26;
                  *(_QWORD *)(v27 + 48) = v25;
                  if (v28)
                  {
                    p_shared_owners = (unint64_t *)&v28->__shared_owners_;
                    do
                      v30 = __ldaxr(p_shared_owners);
                    while (__stlxr(v30 - 1, p_shared_owners));
                    if (!v30)
                    {
                      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
                      std::__shared_weak_count::__release_weak(v28);
                    }
                  }
                  break;
                }
              }
              else
              {
                if (!*((_BYTE *)v14 + 39))
                  goto LABEL_55;
                v20 = 0;
                while (*((unsigned __int8 *)v14 + v20 + 16) == *((unsigned __int8 *)v4 + v20))
                {
                  if (v18 == ++v20)
                  {
LABEL_54:
                    if (!v14)
                      goto LABEL_64;
                    goto LABEL_55;
                  }
                }
              }
            }
          }
          else
          {
            if (v17 >= v9)
              v17 %= v9;
            if (v17 != v12)
              break;
          }
          v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_64:
  v31 = *(_QWORD *)(a1[5] + 8);
  if (!*(_QWORD *)(v31 + 40))
  {
    v32 = (*(uint64_t (**)(void))(a1[4] + 16))();
    v33 = (_QWORD *)operator new();
    *v33 = &off_1E3D39C50;
    v33[1] = 0;
    v33[2] = 0;
    v33[3] = v32;
    v34 = *(std::__shared_weak_count **)(v31 + 48);
    *(_QWORD *)(v31 + 40) = v32;
    *(_QWORD *)(v31 + 48) = v33;
    if (v34)
    {
      v35 = (unint64_t *)&v34->__shared_owners_;
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    v37 = *(_QWORD *)(a1[5] + 8);
    v38 = *(_QWORD *)(v37 + 40);
    if (v38)
    {
      v39 = *(_QWORD *)(v37 + 48);
      if (v39)
      {
        v40 = (unint64_t *)(v39 + 16);
        do
          v41 = __ldxr(v40);
        while (__stxr(v41 + 1, v40));
      }
      v42 = (__int128 *)a1[6];
      v43 = *((char *)v42 + 23);
      if (v43 >= 0)
        v44 = (uint64_t *)a1[6];
      else
        v44 = *(uint64_t **)v42;
      if (v43 >= 0)
        v45 = *((unsigned __int8 *)v42 + 23);
      else
        v45 = *((_QWORD *)v42 + 1);
      v46 = sub_19C2A0F2C((uint64_t)v91, v44, v45);
      v47 = v46;
      v48 = *((_QWORD *)&xmmword_1EDB97188 + 1);
      if (*((_QWORD *)&xmmword_1EDB97188 + 1))
      {
        v49 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_1EDB97188 + 8));
        v49.i16[0] = vaddlv_u8(v49);
        if (v49.u32[0] > 1uLL)
        {
          v1 = v46;
          if (v46 >= *((_QWORD *)&xmmword_1EDB97188 + 1))
            v1 = v46 % *((_QWORD *)&xmmword_1EDB97188 + 1);
        }
        else
        {
          v1 = (*((_QWORD *)&xmmword_1EDB97188 + 1) - 1) & v46;
        }
        v50 = *(uint64_t ***)(xmmword_1EDB97188 + 8 * v1);
        if (v50)
        {
          v51 = *v50;
          if (*v50)
          {
            v52 = *((_BYTE *)v42 + 23);
            if (v52 >= 0)
              v53 = *((unsigned __int8 *)v42 + 23);
            else
              v53 = *((_QWORD *)v42 + 1);
            if (v52 >= 0)
              v54 = (uint64_t *)v42;
            else
              v54 = *(uint64_t **)v42;
            if (v49.u32[0] < 2uLL)
            {
              while (1)
              {
                v59 = v51[1];
                if (v59 == v47)
                {
                  v60 = *((unsigned __int8 *)v51 + 39);
                  if ((v60 & 0x80u) == 0)
                    v61 = *((unsigned __int8 *)v51 + 39);
                  else
                    v61 = v51[3];
                  if (v61 == v53)
                  {
                    if ((v60 & 0x80) != 0)
                    {
                      if (!memcmp((const void *)v51[2], v54, v51[3]))
                        goto LABEL_191;
                    }
                    else
                    {
                      if (!*((_BYTE *)v51 + 39))
                        goto LABEL_191;
                      v62 = 0;
                      while (*((unsigned __int8 *)v51 + v62 + 16) == *((unsigned __int8 *)v54 + v62))
                      {
                        if (v60 == ++v62)
                          goto LABEL_191;
                      }
                    }
                  }
                }
                else if ((v59 & (v48 - 1)) != v1)
                {
                  goto LABEL_129;
                }
                v51 = (uint64_t *)*v51;
                if (!v51)
                  goto LABEL_129;
              }
            }
            do
            {
              v55 = v51[1];
              if (v55 == v47)
              {
                v56 = *((unsigned __int8 *)v51 + 39);
                if ((v56 & 0x80u) == 0)
                  v57 = *((unsigned __int8 *)v51 + 39);
                else
                  v57 = v51[3];
                if (v57 == v53)
                {
                  if ((v56 & 0x80) != 0)
                  {
                    if (!memcmp((const void *)v51[2], v54, v51[3]))
                      goto LABEL_191;
                  }
                  else
                  {
                    if (!*((_BYTE *)v51 + 39))
                      goto LABEL_191;
                    v58 = 0;
                    while (*((unsigned __int8 *)v51 + v58 + 16) == *((unsigned __int8 *)v54 + v58))
                    {
                      if (v56 == ++v58)
                        goto LABEL_191;
                    }
                  }
                }
              }
              else
              {
                if (v55 >= v48)
                  v55 %= v48;
                if (v55 != v1)
                  break;
              }
              v51 = (uint64_t *)*v51;
            }
            while (v51);
          }
        }
      }
LABEL_129:
      v63 = operator new(0x38uLL);
      v91[0] = v63;
      v91[1] = &qword_1EDB97198;
      v92 = 0;
      *v63 = 0;
      v63[1] = v47;
      v64 = v63 + 2;
      if (*((char *)v42 + 23) < 0)
      {
        sub_19C2B5238(v64, *(void **)v42, *((_QWORD *)v42 + 1));
      }
      else
      {
        v65 = *v42;
        v63[4] = *((_QWORD *)v42 + 2);
        *(_OWORD *)v64 = v65;
      }
      v63[5] = 0;
      v63[6] = 0;
      v92 = 1;
      v66 = (float)(unint64_t)(qword_1EDB971A0 + 1);
      if (v48 && (float)(*(float *)&dword_1EDB971A8 * (float)v48) >= v66)
        goto LABEL_182;
      v67 = 1;
      if (v48 >= 3)
        v67 = (v48 & (v48 - 1)) != 0;
      v68 = v67 | (2 * v48);
      v69 = vcvtps_u32_f32(v66 / *(float *)&dword_1EDB971A8);
      if (v68 <= v69)
        prime = v69;
      else
        prime = v68;
      if (prime == 1)
      {
        prime = 2;
      }
      else if ((prime & (prime - 1)) != 0)
      {
        prime = std::__next_prime(prime);
      }
      v48 = *((_QWORD *)&xmmword_1EDB97188 + 1);
      if (prime <= *((_QWORD *)&xmmword_1EDB97188 + 1))
      {
        if (prime >= *((_QWORD *)&xmmword_1EDB97188 + 1))
          goto LABEL_169;
        v81 = vcvtps_u32_f32((float)(unint64_t)qword_1EDB971A0 / *(float *)&dword_1EDB971A8);
        if (*((_QWORD *)&xmmword_1EDB97188 + 1) < 3uLL
          || (v82 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_1EDB97188 + 8)),
              v82.i16[0] = vaddlv_u8(v82),
              v82.u32[0] > 1uLL))
        {
          v81 = std::__next_prime(v81);
        }
        else
        {
          v83 = 1 << -(char)__clz(v81 - 1);
          if (v81 >= 2)
            v81 = v83;
        }
        if (prime <= v81)
          prime = v81;
        if (prime >= v48)
        {
          v48 = *((_QWORD *)&xmmword_1EDB97188 + 1);
LABEL_169:
          if ((v48 & (v48 - 1)) != 0)
          {
            if (v47 >= v48)
              v1 = v47 % v48;
            else
              v1 = v47;
          }
          else
          {
            v1 = (v48 - 1) & v47;
          }
LABEL_182:
          v87 = *(_QWORD **)(xmmword_1EDB97188 + 8 * v1);
          if (v87)
          {
            *(_QWORD *)v91[0] = *v87;
            *v87 = v91[0];
          }
          else
          {
            *(_QWORD *)v91[0] = qword_1EDB97198;
            qword_1EDB97198 = v91[0];
            *(_QWORD *)(xmmword_1EDB97188 + 8 * v1) = &qword_1EDB97198;
            if (*(_QWORD *)v91[0])
            {
              v88 = *(_QWORD *)(*(_QWORD *)v91[0] + 8);
              if ((v48 & (v48 - 1)) != 0)
              {
                if (v88 >= v48)
                  v88 %= v48;
              }
              else
              {
                v88 &= v48 - 1;
              }
              *(_QWORD *)(xmmword_1EDB97188 + 8 * v88) = v91[0];
            }
          }
          v51 = (uint64_t *)v91[0];
          ++qword_1EDB971A0;
LABEL_191:
          v89 = (std::__shared_weak_count *)v51[6];
          v51[5] = v38;
          v51[6] = v39;
          if (v89)
            std::__shared_weak_count::__release_weak(v89);
          return;
        }
        if (!prime)
        {
          v90 = (void *)xmmword_1EDB97188;
          *(_QWORD *)&xmmword_1EDB97188 = 0;
          if (v90)
            operator delete(v90);
          v48 = 0;
          *((_QWORD *)&xmmword_1EDB97188 + 1) = 0;
          goto LABEL_169;
        }
      }
      if (prime >> 61)
        sub_19C2A143C();
      v71 = operator new(8 * prime);
      v72 = (void *)xmmword_1EDB97188;
      *(_QWORD *)&xmmword_1EDB97188 = v71;
      if (v72)
        operator delete(v72);
      v73 = 0;
      *((_QWORD *)&xmmword_1EDB97188 + 1) = prime;
      do
        *(_QWORD *)(xmmword_1EDB97188 + 8 * v73++) = 0;
      while (prime != v73);
      v74 = (_QWORD **)qword_1EDB97198;
      if (!qword_1EDB97198)
      {
LABEL_168:
        v48 = prime;
        goto LABEL_169;
      }
      v75 = *(_QWORD *)(qword_1EDB97198 + 8);
      v76 = prime - 1;
      if ((prime & (prime - 1)) == 0)
      {
        v77 = v75 & v76;
        *(_QWORD *)(xmmword_1EDB97188 + 8 * v77) = &qword_1EDB97198;
        for (i = *v74; *v74; i = *v74)
        {
          v79 = i[1] & v76;
          if (v79 == v77)
          {
            v74 = (_QWORD **)i;
          }
          else if (*(_QWORD *)(xmmword_1EDB97188 + 8 * v79))
          {
            *v74 = (_QWORD *)*i;
            v80 = 8 * v79;
            *i = **(_QWORD **)(xmmword_1EDB97188 + v80);
            **(_QWORD **)(xmmword_1EDB97188 + v80) = i;
          }
          else
          {
            *(_QWORD *)(xmmword_1EDB97188 + 8 * v79) = v74;
            v74 = (_QWORD **)i;
            v77 = v79;
          }
        }
        goto LABEL_168;
      }
      if (v75 >= prime)
        v75 %= prime;
      *(_QWORD *)(xmmword_1EDB97188 + 8 * v75) = &qword_1EDB97198;
      v84 = *v74;
      if (!*v74)
        goto LABEL_168;
      while (1)
      {
        v86 = v84[1];
        if (v86 >= prime)
          v86 %= prime;
        if (v86 != v75)
        {
          if (!*(_QWORD *)(xmmword_1EDB97188 + 8 * v86))
          {
            *(_QWORD *)(xmmword_1EDB97188 + 8 * v86) = v74;
            goto LABEL_173;
          }
          *v74 = (_QWORD *)*v84;
          v85 = 8 * v86;
          *v84 = **(_QWORD **)(xmmword_1EDB97188 + v85);
          **(_QWORD **)(xmmword_1EDB97188 + v85) = v84;
          v84 = v74;
        }
        v86 = v75;
LABEL_173:
        v74 = (_QWORD **)v84;
        v84 = (_QWORD *)*v84;
        v75 = v86;
        if (!v84)
          goto LABEL_168;
      }
    }
  }
}

void sub_19C3425D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  std::__shared_weak_count *v2;
  va_list va;

  va_start(va, a2);
  sub_19C32B890((uint64_t *)va);
  if (v2)
  {
    std::__shared_weak_count::__release_weak(v2);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_19C342634(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  char *v11;
  void *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  char *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;

  std::mutex::~mutex((std::mutex *)(a1 + 664));
  v2 = *(std::__shared_weak_count **)(a1 + 648);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = *(_QWORD *)(a1 + 616);
  if (v5)
  {
    v6 = *(_QWORD *)(a1 + 624);
    v7 = *(void **)(a1 + 616);
    if (v6 != v5)
    {
      do
      {
        v8 = *(std::__shared_weak_count **)(v6 - 8);
        if (v8)
        {
          v9 = (unint64_t *)&v8->__shared_owners_;
          do
            v10 = __ldaxr(v9);
          while (__stlxr(v10 - 1, v9));
          if (!v10)
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
        v6 -= 16;
      }
      while (v6 != v5);
      v7 = *(void **)(a1 + 616);
    }
    *(_QWORD *)(a1 + 624) = v5;
    operator delete(v7);
  }
  v11 = *(char **)(a1 + 592);
  if (v11)
  {
    do
    {
      v23 = *(char **)v11;
      v24 = (std::__shared_weak_count *)*((_QWORD *)v11 + 6);
      if (v24)
      {
        v25 = (unint64_t *)&v24->__shared_owners_;
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
      if (v11[39] < 0)
        operator delete(*((void **)v11 + 2));
      operator delete(v11);
      v11 = v23;
    }
    while (v23);
  }
  v12 = *(void **)(a1 + 576);
  *(_QWORD *)(a1 + 576) = 0;
  if (v12)
    operator delete(v12);
  v13 = *(std::__shared_weak_count **)(a1 + 568);
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = *(std::__shared_weak_count **)(a1 + 552);
  if (!v16)
    goto LABEL_29;
  v17 = (unint64_t *)&v16->__shared_owners_;
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 - 1, v17));
  if (v18)
  {
LABEL_29:
    if ((*(char *)(a1 + 535) & 0x80000000) == 0)
      goto LABEL_31;
    goto LABEL_30;
  }
  ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
  std::__shared_weak_count::__release_weak(v16);
  if (*(char *)(a1 + 535) < 0)
LABEL_30:
    operator delete(*(void **)(a1 + 512));
LABEL_31:
  sub_19C2F5D3C(a1 + 40);
  v19 = *(const void **)(a1 + 32);
  if (v19)
    CFRelease(v19);
  v20 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  if (v20)
  {
    v21 = sub_19C32AD8C(v20);
    MEMORY[0x1A1AD355C](v21, 0x1072C40AE5FB29CLL);
  }
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void sub_19C342864(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C342888(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
  {
    sub_19C342634(result);
    JUMPOUT(0x1A1AD355CLL);
  }
  return result;
}

uint64_t sub_19C3428BC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN2LM11DynamicDataEE27__shared_ptr_default_deleteIS2_S2_EE"
    || ((v3 & (unint64_t)"NSt3__110shared_ptrIN2LM11DynamicDataEE27__shared_ptr_default_deleteIS2_S2_EE" & 0x8000000000000000) != 0) != __OFSUB__(v3, "NSt3__110shared_ptrIN2LM11DynamicDataEE27__shared_ptr_default_deleteIS2_S2_EE")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN2LM11DynamicDataEE27__shared_ptr_default_deleteIS2_S2_EE" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t *sub_19C342914(uint64_t *a1)
{
  uint64_t v2;
  const void *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    std::mutex::~mutex((std::mutex *)(v2 + 96));
    v3 = *(const void **)(v2 + 8);
    if (v3)
      CFRelease(v3);
    *(_QWORD *)(v2 + 8) = 0;
    if (*(_QWORD *)v2)
      CFRelease(*(CFTypeRef *)v2);
    *(_QWORD *)v2 = 0;
    MEMORY[0x1A1AD355C](v2, 0x1060C40530E8172);
  }
  return a1;
}

uint64_t sub_19C342988(_QWORD *a1, uint64_t a2, _DWORD *a3)
{
  const char *v5;
  int v6;
  int v7;
  _QWORD *v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  int v12;
  int v13;

  *a1 = 0;
  if (*(char *)(a2 + 23) >= 0)
    v5 = (const char *)a2;
  else
    v5 = *(const char **)a2;
  v6 = open_dprotected_np(v5, 0, 3, 0, 0);
  v7 = v6;
  if (v6 < 0
    || (fcntl(v6, 64, 3), v8 = (_QWORD *)operator new(), sub_19C4276DC(v8, v7), *a1 = v8, result = close(v7), !*a1))
  {
    v10 = (_QWORD *)operator new();
    v11 = a3[61];
    v12 = a3[87];
    v13 = a3[78];
    result = operator new();
    *v10 = result;
    *(_DWORD *)result = -1381269244;
    *(_BYTE *)(result + 4) = 0;
    *(_BYTE *)(result + 5) = v11;
    *(_BYTE *)(result + 7) = 64;
    *(_BYTE *)(result + 6) = v12;
    *(_DWORD *)(result + 20) = 0;
    *(_QWORD *)(result + 12) = 24;
    *(_DWORD *)(result + 8) = v13;
    *(_QWORD *)(result + 32) = 0;
    *(_QWORD *)(result + 40) = 0;
    *(_QWORD *)(result + 24) = 0;
    *a1 = v10;
  }
  return result;
}

void sub_19C342AE8(_Unwind_Exception *a1)
{
  uint64_t **v1;
  uint64_t v2;

  MEMORY[0x1A1AD355C](v2, 0x20C4093837F09);
  sub_19C342C34(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_19C342BF0(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = sub_19C3CD35C(v2);
    MEMORY[0x1A1AD355C](v3, 0x1060C4064AC95D2);
  }
  return a1;
}

uint64_t **sub_19C342C34(uint64_t **a1)
{
  uint64_t *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*v2)
    {
      sub_19C29A56C(v2);
      if (*v2)
        MEMORY[0x1A1AD355C](*v2, 0x1010C4006136809);
    }
    MEMORY[0x1A1AD355C](v2, 0x20C4093837F09);
  }
  return a1;
}

void sub_19C342CA4(uint64_t a1)
{
  std::mutex *v2;
  std::error_code *v3;
  const std::__fs::filesystem::path **v4;
  NSObject *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *i;
  uint64_t v9;
  const __CFURL *v10;
  uint8_t __p[23];

  v2 = (std::mutex *)(a1 + 664);
  std::mutex::lock((std::mutex *)(a1 + 664));
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 640) + 168))(*(_QWORD *)(a1 + 640));
  v4 = (const std::__fs::filesystem::path **)(a1 + 512);
  if (*(char *)(a1 + 535) < 0)
  {
    if ((remove(*v4, v3) & 0x80000000) == 0)
      goto LABEL_9;
  }
  else if ((remove((const std::__fs::filesystem::path *)v4, v3) & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  if (qword_1EE41C1A8 != -1)
    dispatch_once(&qword_1EE41C1A8, &unk_1E3D3A4C8);
  v5 = qword_1EE41C1A0;
  if (os_log_type_enabled((os_log_t)qword_1EE41C1A0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__p = 0;
    _os_log_impl(&dword_19C291000, v5, OS_LOG_TYPE_DEFAULT, "failed to remove dynamic model", __p, 2u);
  }
LABEL_9:
  v6 = *(_QWORD *)(a1 + 560);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 112))(v6);
  v7 = *(_QWORD **)(a1 + 616);
  for (i = *(_QWORD **)(a1 + 624); v7 != i; v7 += 2)
    (*(void (**)(_QWORD))(*(_QWORD *)*v7 + 112))(*v7);
  v9 = *(_QWORD *)(a1 + 544);
  std::mutex::lock((std::mutex *)(v9 + 96));
  *(_QWORD *)(v9 + 32) = 0;
  *(_QWORD *)(v9 + 40) = 0;
  *(CFAbsoluteTime *)(v9 + 48) = CFAbsoluteTimeGetCurrent();
  *(_OWORD *)(v9 + 56) = 0u;
  *(_OWORD *)(v9 + 72) = 0u;
  *(_QWORD *)(v9 + 88) = 0;
  *(_WORD *)(v9 + 24) = 257;
  v10 = *(const __CFURL **)(v9 + 8);
  if (v10)
    sub_19C2E15E8(v10, __p);
  std::mutex::unlock((std::mutex *)(v9 + 96));
  std::mutex::unlock(v2);
}

void sub_19C342E74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  std::mutex *v14;
  std::mutex *v15;

  if (a14 < 0)
    operator delete(__p);
  std::mutex::unlock(v15);
  std::mutex::unlock(v14);
  _Unwind_Resume(a1);
}

uint64_t sub_19C342EB8(uint64_t a1)
{
  char *v2;
  void *v3;
  char *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = *(char **)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = *(char **)v2;
      v6 = (std::__shared_weak_count *)*((_QWORD *)v2 + 6);
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      if (v2[39] < 0)
        operator delete(*((void **)v2 + 2));
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

void sub_19C342F5C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D397B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_19C342F6C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D397B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C342F9C(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_19C342FAC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D39908;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_19C342FBC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D39908;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C342FEC(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_19C343000(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C343024(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_19C34303C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN2LM15NgramPoolFacadeEEE"
    || ((v3 & (unint64_t)"NSt3__114default_deleteIN2LM15NgramPoolFacadeEEE" & 0x8000000000000000) != 0) != __OFSUB__(v3, "NSt3__114default_deleteIN2LM15NgramPoolFacadeEEE")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN2LM15NgramPoolFacadeEEE" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_19C343098(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C3430BC(uint64_t result)
{
  uint64_t v1;
  const void *v2;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    std::mutex::~mutex((std::mutex *)(v1 + 96));
    v2 = *(const void **)(v1 + 8);
    if (v2)
      CFRelease(v2);
    *(_QWORD *)(v1 + 8) = 0;
    if (*(_QWORD *)v1)
      CFRelease(*(CFTypeRef *)v1);
    *(_QWORD *)v1 = 0;
    JUMPOUT(0x1A1AD355CLL);
  }
  return result;
}

uint64_t sub_19C34312C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN2LM28DynamicLanguageModelMetadataEEE"
    || ((v3 & (unint64_t)"NSt3__114default_deleteIN2LM28DynamicLanguageModelMetadataEEE" & 0x8000000000000000) != 0) != __OFSUB__(v3, "NSt3__114default_deleteIN2LM28DynamicLanguageModelMetadataEEE")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN2LM28DynamicLanguageModelMetadataEEE" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_19C343184(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24);
  if (!v1)
    sub_19C2CCC60();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1);
}

void sub_19C3431AC(uint64_t a1)
{
  unsigned __int8 v2;
  _QWORD *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = atomic_load((unsigned __int8 *)&qword_1EDB97118);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_1EDB97118))
  {
    xmmword_1EDB97188 = 0u;
    *(_OWORD *)&qword_1EDB97198 = 0u;
    dword_1EDB971A8 = 1065353216;
    __cxa_guard_release(&qword_1EDB97118);
  }
  v3 = (_QWORD *)qword_1EDB97198;
  if (qword_1EDB97198)
  {
    do
    {
      v4 = (std::__shared_weak_count *)v3[6];
      if (v4)
      {
        v5 = std::__shared_weak_count::lock(v4);
        if (v5)
        {
          v6 = v5;
          v7 = v3[5];
          if (v7)
            (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), v7);
          p_shared_owners = (unint64_t *)&v6->__shared_owners_;
          do
            v9 = __ldaxr(p_shared_owners);
          while (__stlxr(v9 - 1, p_shared_owners));
          if (!v9)
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
        }
      }
      v3 = (_QWORD *)*v3;
    }
    while (v3);
  }
}

void sub_19C343298(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_19C2B43C8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19C3432AC(uint64_t *a1, int a2, double a3)
{
  std::mutex *v6;
  uint64_t v7;
  double v8;
  double v9;
  float v10;
  float v11;
  float v12;
  NSObject *v13;
  uint64_t *v14;
  uint64_t v15;
  const __CFURL *v16;
  const __CFURL *PathComponent;
  int buf;
  uint64_t *buf_4;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v6 = (std::mutex *)(a1 + 83);
  std::mutex::lock((std::mutex *)(a1 + 83));
  v7 = a1[68];
  std::mutex::lock((std::mutex *)(v7 + 96));
  v8 = *(double *)(v7 + 56);
  if (v8 == 0.0)
    v9 = *(double *)(v7 + 56);
  else
    v9 = a3 - v8;
  std::mutex::unlock((std::mutex *)(v7 + 96));
  v10 = floor(v9 / *((float *)a1 + 63));
  if (a2 && (v11 = 1.0, v10 < 1.0) || (v11 = v10, v10 > 0.0))
  {
    v12 = expf(*((float *)a1 + 62) * v11);
    if (qword_1EE41C1A8 != -1)
      dispatch_once(&qword_1EE41C1A8, &unk_1E3D3A4C8);
    v13 = qword_1EE41C1A0;
    if (os_log_type_enabled((os_log_t)qword_1EE41C1A0, OS_LOG_TYPE_INFO))
    {
      v14 = a1;
      if (*((char *)a1 + 23) < 0)
        v14 = (uint64_t *)*a1;
      buf = 136315138;
      buf_4 = v14;
      _os_log_impl(&dword_19C291000, v13, OS_LOG_TYPE_INFO, "applying exponential decay for dynamic model bundle: %s", (uint8_t *)&buf, 0xCu);
    }
    (*(void (**)(uint64_t, float))(*(_QWORD *)a1[80] + 136))(a1[80], v12);
    v15 = a1[68];
    std::mutex::lock((std::mutex *)(v15 + 96));
    *(CFAbsoluteTime *)(v15 + 56) = CFAbsoluteTimeGetCurrent();
    *(_QWORD *)(v15 + 32) = 0;
    *(_BYTE *)(v15 + 24) = 1;
    std::mutex::unlock((std::mutex *)(v15 + 96));
  }
  v16 = *(const __CFURL **)(a1[3] + 16);
  if (v16 && *((_BYTE *)a1 + 404))
  {
    PathComponent = CFURLCreateCopyDeletingLastPathComponent(0, v16);
    sub_19C3DF308(PathComponent);
  }
  std::mutex::unlock(v6);
}

void sub_19C3434DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2)
    sub_19C2CDAC8(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_19C343528(uint64_t a1)
{
  std::mutex *v2;
  uint64_t v3;
  std::mutex *v4;
  const char *v5;
  const std::__fs::filesystem::path *v6;
  size_t v7;
  void *v8;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  void **v19;
  uint64_t v20;
  int v21;
  std::error_code *v22;
  std::error_code *v23;
  const std::__fs::filesystem::path *v24;
  int v25;
  const std::__fs::filesystem::path *v26;
  _QWORD *v27;
  _QWORD *i;
  uint64_t v29;
  char v30;
  uint64_t v31;
  CFStringRef v32;
  __CFDictionary *v33;
  CFNumberRef v34;
  __CFDictionary *v35;
  CFNumberRef v36;
  __CFDictionary *v37;
  CFNumberRef v38;
  __CFDictionary *v39;
  CFNumberRef v40;
  __CFDictionary *v41;
  CFNumberRef v42;
  __CFDictionary *v43;
  CFNumberRef v44;
  __CFDictionary *v45;
  CFNumberRef v46;
  __CFDictionary *v47;
  CFNumberRef v48;
  const void **v49;
  BOOL v50;
  char v51;
  const __CFURL *v52;
  CFStringRef v53;
  CFStringRef v54;
  _QWORD v55[2];
  uint64_t (*v56)(uint64_t);
  void *v57;
  uint64_t v58;
  void *__dst[2];
  unint64_t v60;
  void *__p[2];
  char v62;

  v2 = (std::mutex *)(a1 + 664);
  std::mutex::lock((std::mutex *)(a1 + 664));
  v3 = *(_QWORD *)(a1 + 544);
  v4 = (std::mutex *)(v3 + 96);
  std::mutex::lock((std::mutex *)(v3 + 96));
  LODWORD(v3) = *(unsigned __int8 *)(v3 + 24);
  std::mutex::unlock(v4);
  if (!(_DWORD)v3)
    goto LABEL_50;
  v5 = (const char *)a1;
  if (*(char *)(a1 + 23) < 0)
    v5 = *(const char **)a1;
  v6 = (const std::__fs::filesystem::path *)(a1 + 512);
  if (*(char *)(a1 + 535) < 0)
    v6 = (const std::__fs::filesystem::path *)v6->__pn_.__r_.__value_.__r.__words[0];
  v55[0] = MEMORY[0x1E0C809B0];
  v55[1] = 0x40000000;
  v56 = sub_19C343B58;
  v57 = &unk_1E3D3A488;
  v58 = a1;
  *__error() = 0;
  v7 = strlen(v5);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_19C2A1A54();
  v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v9 = (void **)operator new(v10 + 1);
    __dst[1] = v8;
    v60 = v11 | 0x8000000000000000;
    __dst[0] = v9;
    goto LABEL_13;
  }
  HIBYTE(v60) = v7;
  v9 = __dst;
  if (v7)
LABEL_13:
    memcpy(v9, v5, (size_t)v8);
  *((_BYTE *)v8 + (_QWORD)v9) = 0;
  sub_19C2E18F8((uint64_t)__dst, (uint64_t)__p);
  if ((SHIBYTE(v60) & 0x80000000) == 0)
  {
    v18 = v62;
    if ((v62 & 0x80000000) == 0)
      goto LABEL_16;
LABEL_19:
    if (!__p[1])
      goto LABEL_32;
    v19 = (void **)__p[0];
LABEL_21:
    v20 = sub_19C34E924((const char *)v19, 1538, v12, v13, v14, v15, v16, v17, 0x180u);
    if ((v20 & 0x80000000) == 0)
    {
      v21 = ((uint64_t (*)(_QWORD *, uint64_t))v56)(v55, v20);
      close(v20);
      if (v21)
      {
        v24 = v62 >= 0 ? (const std::__fs::filesystem::path *)__p : (const std::__fs::filesystem::path *)__p[0];
        rename(v24, v6, v23);
        if ((v25 & 0x80000000) == 0)
        {
LABEL_32:
          if (v62 < 0)
            operator delete(__p[0]);
          goto LABEL_34;
        }
      }
      if (v62 >= 0)
        v26 = (const std::__fs::filesystem::path *)__p;
      else
        v26 = (const std::__fs::filesystem::path *)__p[0];
      remove(v26, v22);
    }
    __error();
    CFLog();
    goto LABEL_32;
  }
  operator delete(__dst[0]);
  v18 = v62;
  if (v62 < 0)
    goto LABEL_19;
LABEL_16:
  if (v18)
  {
    v19 = __p;
    goto LABEL_21;
  }
LABEL_34:
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 560) + 168))(*(_QWORD *)(a1 + 560));
  v27 = *(_QWORD **)(a1 + 616);
  for (i = *(_QWORD **)(a1 + 624); v27 != i; v27 += 2)
    (*(void (**)(_QWORD))(*(_QWORD *)*v27 + 168))(*v27);
  v29 = *(_QWORD *)(a1 + 640);
  __p[0] = 0;
  v30 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v29 + 208))(v29, __p);
  if (!__p[0])
    v30 = 1;
  if ((v30 & 1) == 0)
  {
    v53 = CFErrorCopyDescription((CFErrorRef)__p[0]);
    CFLog();
    CFRelease(v53);
    CFRelease(__p[0]);
  }
  v31 = *(_QWORD *)(a1 + 544);
  __p[0] = 0;
  std::mutex::lock((std::mutex *)(v31 + 96));
  v32 = CFStringCreateWithFormat(0, 0, CFSTR("%d.%d"), *(unsigned int *)(v31 + 16), *(unsigned int *)(v31 + 20));
  CFDictionarySetValue(*(CFMutableDictionaryRef *)v31, CFSTR("adaptationVersion"), v32);
  CFRelease(v32);
  *(CFAbsoluteTime *)(v31 + 88) = CFAbsoluteTimeGetCurrent();
  v33 = *(__CFDictionary **)v31;
  v34 = CFNumberCreate(0, kCFNumberDoubleType, (const void *)(v31 + 56));
  CFDictionarySetValue(v33, CFSTR("lastDecay"), v34);
  CFRelease(v34);
  v35 = *(__CFDictionary **)v31;
  v36 = CFNumberCreate(0, kCFNumberDoubleType, (const void *)(v31 + 64));
  CFDictionarySetValue(v35, CFSTR("lastPruning"), v36);
  CFRelease(v36);
  v37 = *(__CFDictionary **)v31;
  v38 = CFNumberCreate(0, kCFNumberDoubleType, (const void *)(v31 + 48));
  CFDictionarySetValue(v37, CFSTR("creationTime"), v38);
  CFRelease(v38);
  v39 = *(__CFDictionary **)v31;
  v40 = CFNumberCreate(0, kCFNumberCFIndexType, (const void *)(v31 + 32));
  CFDictionarySetValue(v39, CFSTR("wordsSinceLastDecay"), v40);
  CFRelease(v40);
  v41 = *(__CFDictionary **)v31;
  v42 = CFNumberCreate(0, kCFNumberDoubleType, (const void *)(v31 + 80));
  CFDictionarySetValue(v41, CFSTR("lastOfflineAdaptationTime1"), v42);
  CFRelease(v42);
  v43 = *(__CFDictionary **)v31;
  v44 = CFNumberCreate(0, kCFNumberDoubleType, (const void *)(v31 + 72));
  CFDictionarySetValue(v43, CFSTR("lastOfflineAdaptationTime2"), v44);
  CFRelease(v44);
  v45 = *(__CFDictionary **)v31;
  v46 = CFNumberCreate(0, kCFNumberDoubleType, (const void *)(v31 + 88));
  CFDictionarySetValue(v45, CFSTR("lastFlushTimeKey"), v46);
  CFRelease(v46);
  v47 = *(__CFDictionary **)v31;
  v48 = CFNumberCreate(0, kCFNumberLongType, (const void *)(v31 + 40));
  CFDictionarySetValue(v47, CFSTR("numberOfTokensTyped"), v48);
  CFRelease(v48);
  v49 = (const void **)MEMORY[0x1E0C9AE50];
  if (!*(_BYTE *)(v31 + 25))
    v49 = (const void **)MEMORY[0x1E0C9AE40];
  CFDictionarySetValue(*(CFMutableDictionaryRef *)v31, CFSTR("didResetMessages"), *v49);
  *(_BYTE *)(v31 + 24) = 0;
  v50 = sub_19C2E1684(*(const void **)v31, *(CFURLRef *)(v31 + 8), kCFPropertyListBinaryFormat_v1_0, 1, (CFErrorRef *)__p);
  std::mutex::unlock((std::mutex *)(v31 + 96));
  if (__p[0])
    v51 = v50;
  else
    v51 = 1;
  if ((v51 & 1) == 0)
  {
    v54 = CFErrorCopyDescription((CFErrorRef)__p[0]);
    CFLog();
    CFRelease(v54);
    CFRelease(__p[0]);
  }
  v52 = *(const __CFURL **)(*(_QWORD *)(a1 + 24) + 16);
  if (v52 && *(_BYTE *)(a1 + 404))
  {
    __dst[0] = CFURLCreateCopyDeletingLastPathComponent(0, v52);
    sub_19C3DF308((CFURLRef)__dst[0]);
  }
LABEL_50:
  std::mutex::unlock(v2);
}

void sub_19C343AE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  std::mutex *v28;

  sub_19C31352C((const void **)&a17);
  std::mutex::unlock(v28);
  _Unwind_Resume(a1);
}

uint64_t sub_19C343B58(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 32) + 640) + 176))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 640));
}

BOOL sub_19C343B6C(uint64_t a1, void **__s1)
{
  _QWORD *v2;
  size_t v3;
  size_t v4;
  void **v5;
  size_t v6;

  v2 = (_QWORD *)(a1 + 32);
  if (*(char *)(a1 + 55) < 0)
    v3 = *(_QWORD *)(a1 + 40);
  else
    v3 = *(unsigned __int8 *)(a1 + 55);
  if ((*((char *)__s1 + 23) & 0x80000000) == 0)
  {
    if (v3 != -1)
    {
      v4 = *((unsigned __int8 *)__s1 + 23);
      goto LABEL_9;
    }
LABEL_20:
    sub_19C2E3454();
  }
  if (v3 == -1)
    goto LABEL_20;
  v5 = __s1;
  __s1 = (void **)*__s1;
  v4 = (size_t)v5[1];
LABEL_9:
  if (v4 >= v3)
    v6 = v3;
  else
    v6 = v4;
  if (*(char *)(a1 + 55) < 0)
    v2 = (_QWORD *)*v2;
  return !memcmp(__s1, v2, v6) && v6 == v3;
}

void sub_19C343BFC(uint64_t a1)
{
  unsigned __int8 v2;
  uint64_t *v3;
  std::__shared_weak_count *v4;
  unint64_t v5;
  unint64_t v6;
  uint8x8_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;

  v2 = atomic_load((unsigned __int8 *)&qword_1EDB97118);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_1EDB97118))
  {
    xmmword_1EDB97188 = 0u;
    *(_OWORD *)&qword_1EDB97198 = 0u;
    dword_1EDB971A8 = 1065353216;
    __cxa_guard_release(&qword_1EDB97118);
  }
  v3 = (uint64_t *)qword_1EDB97198;
  if (qword_1EDB97198)
  {
    while (1)
    {
      v19 = 0;
      v4 = (std::__shared_weak_count *)v3[6];
      if (!v4)
        break;
      v19 = std::__shared_weak_count::lock(v4);
      if (!v19
        || !v3[5]
        || (*(unsigned int (**)(_QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32)))
      {
        break;
      }
      v3 = (uint64_t *)*v3;
      v16 = v19;
LABEL_40:
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldaxr(p_shared_owners);
      while (__stlxr(v18 - 1, p_shared_owners));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
LABEL_4:
      if (!v3)
        return;
    }
    v5 = *((_QWORD *)&xmmword_1EDB97188 + 1);
    v6 = v3[1];
    v7 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_1EDB97188 + 8));
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      if (v6 >= *((_QWORD *)&xmmword_1EDB97188 + 1))
        v6 %= *((_QWORD *)&xmmword_1EDB97188 + 1);
    }
    else
    {
      v6 &= *((_QWORD *)&xmmword_1EDB97188 + 1) - 1;
    }
    v8 = (uint64_t *)*v3;
    v9 = *(uint64_t **)(xmmword_1EDB97188 + 8 * v6);
    do
    {
      v10 = v9;
      v9 = (uint64_t *)*v9;
    }
    while (v9 != v3);
    if (v10 == &qword_1EDB97198)
      goto LABEL_50;
    v11 = v10[1];
    if (v7.u32[0] > 1uLL)
    {
      if (v11 >= *((_QWORD *)&xmmword_1EDB97188 + 1))
        v11 %= *((_QWORD *)&xmmword_1EDB97188 + 1);
    }
    else
    {
      v11 &= *((_QWORD *)&xmmword_1EDB97188 + 1) - 1;
    }
    v12 = *v3;
    if (v11 != v6)
    {
LABEL_50:
      if (v8)
      {
        v13 = v8[1];
        if (v7.u32[0] > 1uLL)
        {
          if (v13 >= *((_QWORD *)&xmmword_1EDB97188 + 1))
            v13 %= *((_QWORD *)&xmmword_1EDB97188 + 1);
        }
        else
        {
          v13 &= *((_QWORD *)&xmmword_1EDB97188 + 1) - 1;
        }
        v12 = *v3;
        if (v13 == v6)
        {
LABEL_29:
          v14 = *(_QWORD *)(v12 + 8);
          if (v7.u32[0] > 1uLL)
          {
            if (v14 >= v5)
              v14 %= v5;
          }
          else
          {
            v14 &= v5 - 1;
          }
          if (v14 != v6)
          {
            *(_QWORD *)(xmmword_1EDB97188 + 8 * v14) = v10;
            v12 = *v3;
          }
LABEL_35:
          *v10 = v12;
          *v3 = 0;
          --qword_1EDB971A0;
          v15 = (std::__shared_weak_count *)v3[6];
          if (v15)
            std::__shared_weak_count::__release_weak(v15);
          if (*((char *)v3 + 39) < 0)
            operator delete((void *)v3[2]);
          operator delete(v3);
          v3 = v8;
          v16 = v19;
          if (!v19)
            goto LABEL_4;
          goto LABEL_40;
        }
      }
      *(_QWORD *)(xmmword_1EDB97188 + 8 * v6) = 0;
      v12 = *v3;
    }
    if (!v12)
      goto LABEL_35;
    goto LABEL_29;
  }
}

void sub_19C343E80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_19C2B43C8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19C343E94(uint64_t a1)
{
  void *v2;
  DIR *v3;
  dirent *v4;
  unint64_t d_namlen;
  char *d_name;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, char *, char *);
  void *v11;
  uint64_t *v12;
  void *__p[2];
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  char v18;
  char v19;
  stat v20;

  v15 = 0;
  v16 = &v15;
  v17 = 0x2000000000;
  v18 = 1;
  if (*(char *)(a1 + 63) < 0)
  {
    v8 = MEMORY[0x1E0C809B0];
    v9 = 1174405120;
    v10 = sub_19C3440C4;
    v11 = &unk_1E3D3A420;
    v12 = &v15;
    v2 = *(void **)(a1 + 40);
    sub_19C2B5238(__p, v2, *(_QWORD *)(a1 + 48));
  }
  else
  {
    v2 = (void *)(a1 + 40);
    v8 = MEMORY[0x1E0C809B0];
    v9 = 1174405120;
    v10 = sub_19C3440C4;
    v11 = &unk_1E3D3A420;
    v12 = &v15;
    *(_OWORD *)__p = *(_OWORD *)(a1 + 40);
    v14 = *(_QWORD *)(a1 + 56);
  }
  if (!stat((const char *)v2, &v20) && (v20.st_mode & 0xF000) == 0x4000)
  {
    v19 = 0;
    v3 = opendir((const char *)v2);
    if (v3)
    {
      do
      {
        v4 = readdir(v3);
        if (!v4)
          break;
        d_namlen = v4->d_namlen;
        if (d_namlen >= 0xB)
        {
          d_name = v4->d_name;
          if (!strncmp((const char *)&v4->d_seekoff + d_namlen + 3, "dynamic.lm", 0xAuLL))
            v10((uint64_t)&v8, d_name, &v19);
        }
      }
      while (!v19);
      closedir(v3);
    }
  }
  v7 = *(_QWORD *)(a1 + 32);
  if (v7)
    (*(void (**)(uint64_t, _QWORD))(v7 + 16))(v7, *((unsigned __int8 *)v16 + 24));
  if (SHIBYTE(v14) < 0)
    operator delete(__p[0]);
  _Block_object_dispose(&v15, 8);
}

void sub_19C344048(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  _Block_object_dispose(&a21, 8);
  _Unwind_Resume(a1);
}

_QWORD *sub_19C344080(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  __int128 v3;

  result = (_QWORD *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
    return sub_19C2B5238(result, *(void **)(a2 + 40), *(_QWORD *)(a2 + 48));
  v3 = *(_OWORD *)(a2 + 40);
  result[2] = *(_QWORD *)(a2 + 56);
  *(_OWORD *)result = v3;
  return result;
}

void sub_19C3440B0(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
}

void sub_19C3440C4(uint64_t a1, char *__s, _BYTE *a3)
{
  int v3;
  size_t v4;
  unint64_t v5;
  std::string *p_dst;
  uint64_t v10;
  uint64_t v11;
  const void *v12;
  std::string::size_type v13;
  std::string *v14;
  __int128 v15;
  void **v16;
  DIR *v17;
  size_t v18;
  dirent *v19;
  const char *d_name;
  size_t v21;
  char *v22;
  int v23;
  BOOL v24;
  uint64_t v25;
  _BYTE *v26;
  std::string __dst;
  void *__p[2];
  int64_t v29;
  stat v30;

  v3 = *(char *)(a1 + 63);
  if (v3 >= 0)
    v4 = *(unsigned __int8 *)(a1 + 63);
  else
    v4 = *(_QWORD *)(a1 + 48);
  v5 = v4 + 1;
  if (v4 + 1 >= 0x7FFFFFFFFFFFFFF8)
    sub_19C2A1A54();
  if (v5 >= 0x17)
  {
    v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v10 = v5 | 7;
    v11 = v10 + 1;
    p_dst = (std::string *)operator new(v10 + 1);
    __dst.__r_.__value_.__l.__size_ = v4 + 1;
    __dst.__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v4 + 1;
    if (!v4)
      goto LABEL_15;
  }
  if (v3 >= 0)
    v12 = (const void *)(a1 + 40);
  else
    v12 = *(const void **)(a1 + 40);
  memmove(p_dst, v12, v4);
LABEL_15:
  *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v4) = 47;
  v13 = strlen(__s);
  v14 = std::string::append(&__dst, __s, v13);
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v29 = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  if (v29 >= 0)
    v16 = __p;
  else
    v16 = (void **)__p[0];
  v17 = opendir((const char *)v16);
  if (v17)
  {
    v26 = a3;
    v18 = strlen((const char *)v16) + 2;
    while (1)
    {
      v19 = readdir(v17);
      if (!v19)
        break;
      d_name = v19->d_name;
      if (strcmp(v19->d_name, ".") && strcmp(d_name, ".."))
      {
        v21 = v18 + strlen(d_name);
        v22 = (char *)operator new[]();
        snprintf(v22, v21, "%s/%s", (const char *)v16, d_name);
        if (stat(v22, &v30))
          v23 = 0;
        else
          v23 = (v30.st_mode & 0xF000) == 0x4000 ? -1 : unlink(v22);
        MEMORY[0x1A1AD3538](v22, 0x1000C8077774924);
        if (v23)
        {
          closedir(v17);
          a3 = v26;
          goto LABEL_30;
        }
      }
    }
    closedir(v17);
    a3 = v26;
    v24 = rmdir((const char *)v16) == 0;
  }
  else
  {
LABEL_30:
    v24 = 0;
  }
  v25 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  if (!*(_BYTE *)(v25 + 24))
    v24 = 0;
  *(_BYTE *)(v25 + 24) = v24;
  if (SHIBYTE(v29) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_36;
  }
  else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_36;
  }
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_36:
  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    *a3 = 1;
}

void sub_19C344384(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if ((a17 & 0x80000000) == 0)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_19C3443D4(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  __int128 v3;

  result = (_QWORD *)(a1 + 32);
  if (*(char *)(a2 + 55) < 0)
    return sub_19C2B5238(result, *(void **)(a2 + 32), *(_QWORD *)(a2 + 40));
  v3 = *(_OWORD *)(a2 + 32);
  result[2] = *(_QWORD *)(a2 + 48);
  *(_OWORD *)result = v3;
  return result;
}

void sub_19C344404(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
}

_QWORD *sub_19C344418(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;

  v4 = *a2;
  *a2 = 0;
  *a1 = &off_1E3D36180;
  a1[1] = v4;
  a1[2] = 0;
  sub_19C3FC9A4((uint64_t)(a1 + 3), a3);
  return a1;
}

void sub_19C344468(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t *a10)
{
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;

  v12 = *(_QWORD *)(v10 + 16);
  *(_QWORD *)(v10 + 16) = 0;
  if (v12)
  {
    v13 = sub_19C3CD35C(v12);
    MEMORY[0x1A1AD355C](v13, 0x1060C4064AC95D2);
  }
  v14 = *(uint64_t **)(v10 + 8);
  *(_QWORD *)(v10 + 8) = 0;
  if (v14)
  {
    v15 = sub_19C427B7C(v14);
    MEMORY[0x1A1AD355C](v15, 0x20C4093837F09);
  }
  sub_19C342BF0(&a9);
  sub_19C342C34(&a10);
  _Unwind_Resume(a1);
}

void sub_19C3444D0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D39828;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_19C3444E0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D39828;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C344510(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_19C344520(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  _QWORD v24[2];
  void *__p[2];
  CFTypeRef cf;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;

  if (*(_BYTE *)(*a3 + 357) && sub_19C3A4328(a2[3], CFSTR("recency")))
  {
    cf = sub_19C3A427C(a2[3], CFSTR("recency"));
    sub_19C2E15E8((const __CFURL *)cf, __p);
  }
  v6 = (uint64_t *)operator new();
  v7 = *(_DWORD *)(*a3 + 244);
  v8 = *(_DWORD *)(*a3 + 348);
  v9 = *(_DWORD *)(*a3 + 312);
  v10 = operator new();
  *v6 = v10;
  *(_DWORD *)v10 = -1381269244;
  *(_BYTE *)(v10 + 4) = 0;
  *(_BYTE *)(v10 + 5) = v7;
  *(_BYTE *)(v10 + 7) = 64;
  *(_BYTE *)(v10 + 6) = v8;
  *(_DWORD *)(v10 + 20) = 0;
  *(_QWORD *)(v10 + 12) = 24;
  *(_DWORD *)(v10 + 8) = v9;
  *(_QWORD *)(v10 + 32) = 0;
  *(_QWORD *)(v10 + 40) = 0;
  *(_QWORD *)(v10 + 24) = 0;
  v23 = v6;
  v11 = *a3;
  v12 = (std::__shared_weak_count *)operator new(0x208uLL);
  v12->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  v12->__shared_weak_owners_ = 0;
  v12->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D39828;
  sub_19C344418(&v12[1].__vftable, (uint64_t *)&v23, v11);
  v27 = v12 + 1;
  v28 = v12;
  v14 = operator new();
  v15 = (_QWORD *)v14;
  v24[0] = v12 + 1;
  v24[1] = v12;
  do
    v16 = __ldxr(p_shared_owners);
  while (__stxr(v16 + 1, p_shared_owners));
  v17 = a2[67];
  __p[0] = 0;
  __p[1] = 0;
  sub_19C431964(v14, v24, __p, a2 + 70, a3, v17);
  *v15 = &off_1E3D364E8;
  *a1 = v15;
  do
    v18 = __ldaxr(p_shared_owners);
  while (__stlxr(v18 - 1, p_shared_owners));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  v19 = v28;
  if (v28)
  {
    v20 = (unint64_t *)&v28->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = v23;
  if (v23)
  {
    if (*v23)
    {
      sub_19C29A56C(v23);
      if (*v22)
        MEMORY[0x1A1AD355C](*v22, 0x1010C4006136809);
    }
    MEMORY[0x1A1AD355C](v22, 0x20C4093837F09);
  }
}

void sub_19C344908(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t *a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,const void *a21)
{
  uint64_t v21;

  sub_19C2B43C8((uint64_t)&a10);
  MEMORY[0x1A1AD355C](v21, 0x10B1C403F1E130DLL);
  sub_19C2B43C8((uint64_t)&a12);
  sub_19C342C34(&a14);
  if (a20 < 0)
    operator delete(__p);
  sub_19C31352C(&a21);
  _Unwind_Resume(a1);
}

void sub_19C344998(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t *v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, uint64_t *);
  v6 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v7 = va_arg(va2, _QWORD);
  v9 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  sub_19C2B43C8((uint64_t)va1);
  MEMORY[0x1A1AD355C](v2, 0x10B1C403F1E130DLL);
  sub_19C2B43C8((uint64_t)va2);
  sub_19C342C34((uint64_t **)va);
  _Unwind_Resume(a1);
}

void sub_19C3449F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD355C](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

void sub_19C344A1C(_QWORD *a1, uint64_t a2, const void **a3)
{
  int v3;
  size_t v4;
  unint64_t v5;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  const void *v13;
  void *__p;
  size_t v15;
  unint64_t v16;
  CFStringRef theString;

  v3 = *((char *)a3 + 23);
  if (v3 >= 0)
    v4 = *((unsigned __int8 *)a3 + 23);
  else
    v4 = (size_t)a3[1];
  v5 = v4 + 1;
  if (v4 + 1 >= 0x7FFFFFFFFFFFFFF8)
    sub_19C2A1A54();
  if (v5 >= 0x17)
  {
    v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v10 = v5 | 7;
    v11 = v10 + 1;
    v12 = (char *)operator new(v10 + 1);
    v15 = v4 + 1;
    v16 = v11 | 0x8000000000000000;
    __p = v12;
    *v12 = 45;
    v9 = v12 + 1;
  }
  else
  {
    v15 = 0;
    v16 = 0;
    HIBYTE(v16) = v4 + 1;
    v9 = (char *)&__p + 1;
    __p = (void *)45;
    if (!v4)
      goto LABEL_15;
  }
  if (v3 >= 0)
    v13 = a3;
  else
    v13 = *a3;
  memmove(v9, v13, v4);
LABEL_15:
  v9[v4] = 0;
  sub_19C344BB0(&theString, CFSTR("dynamic-lexicon"), (uint64_t)&__p);
  if (SHIBYTE(v16) < 0)
    operator delete(__p);
  __p = sub_19C3A427C(*(_QWORD *)(a2 + 24), theString);
  sub_19C2E15E8((const __CFURL *)__p, a1);
}

void sub_19C344B70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, uint64_t a10, uint64_t a11, const void *a12)
{
  sub_19C31352C(&a9);
  sub_19C2E5670(&a12);
  _Unwind_Resume(a1);
}

void sub_19C344B94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19C344BB0(CFStringRef *a1, CFTypeRef cf, uint64_t a3)
{
  const __CFString *v6;
  CFTypeID TypeID;
  int v8;
  const UInt8 *v9;
  CFIndex v10;
  CFStringRef v11;
  void *v12;
  int v13;
  const std::string::value_type *v14;
  std::string::size_type v15;
  std::string *v16;
  __int128 v17;
  void **v18;
  CFIndex v19;
  CFStringRef v20;
  const __CFString *v21;
  void *exception;
  void *v23;
  std::string v24;
  void *__p[2];
  int64_t v26;
  const __CFString *v27;

  if (cf)
  {
    CFRetain(cf);
    sub_19C297DB4(&v27, cf);
    v6 = v27;
    if (!v27)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1A1AD3154](exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
    }
    TypeID = CFStringGetTypeID();
    if (TypeID == CFGetTypeID(v6))
    {
      sub_19C2E50A4(&v24, v6);
    }
    else
    {
      v24.__r_.__value_.__r.__words[0] = 0;
      *((_BYTE *)&v24.__r_.__value_.__s + 23) = 0;
    }
    v13 = *(char *)(a3 + 23);
    if (v13 >= 0)
      v14 = (const std::string::value_type *)a3;
    else
      v14 = *(const std::string::value_type **)a3;
    if (v13 >= 0)
      v15 = *(unsigned __int8 *)(a3 + 23);
    else
      v15 = *(_QWORD *)(a3 + 8);
    v16 = std::string::append(&v24, v14, v15);
    v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v26 = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v24.__r_.__value_.__l.__data_);
    if (v26 >= 0)
      v18 = __p;
    else
      v18 = (void **)__p[0];
    if (v26 >= 0)
      v19 = HIBYTE(v26);
    else
      v19 = (CFIndex)__p[1];
    v20 = CFStringCreateWithBytes(0, (const UInt8 *)v18, v19, 0x8000100u, 0);
    *a1 = v20;
    if (!v20)
    {
      v23 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1A1AD3154](v23, "Could not construct");
      __cxa_throw(v23, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
    }
    if (SHIBYTE(v26) < 0)
    {
      operator delete(__p[0]);
      v21 = v27;
      if (!v27)
        return;
    }
    else
    {
      v21 = v27;
      if (!v27)
        return;
    }
    CFRelease(v21);
  }
  else
  {
    v8 = *(char *)(a3 + 23);
    if (v8 >= 0)
      v9 = (const UInt8 *)a3;
    else
      v9 = *(const UInt8 **)a3;
    if (v8 >= 0)
      v10 = *(unsigned __int8 *)(a3 + 23);
    else
      v10 = *(_QWORD *)(a3 + 8);
    v11 = CFStringCreateWithBytes(0, v9, v10, 0x8000100u, 0);
    *a1 = v11;
    if (!v11)
    {
      v12 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1A1AD3154](v12, "Could not construct");
      __cxa_throw(v12, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
    }
  }
}

void sub_19C344DA8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19C344DBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a21 < 0)
    operator delete(__p);
  sub_19C2E5670((const void **)(v21 - 40));
  _Unwind_Resume(a1);
}

uint64_t *sub_19C344E2C(_QWORD *a1, uint64_t a2)
{
  _BYTE *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t **v11;
  uint64_t *v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *result;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  v2 = (_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v5 = v4;
  }
  v6 = sub_19C2A0F2C((uint64_t)&v25, (uint64_t *)a2, v5);
  v7 = (int8x8_t)a1[1];
  if (v7)
  {
    v8 = v6;
    v9 = (uint8x8_t)vcnt_s8(v7);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v10 = v6;
      if (v6 >= *(_QWORD *)&v7)
        v10 = v6 % *(_QWORD *)&v7;
    }
    else
    {
      v10 = (*(_QWORD *)&v7 - 1) & v6;
    }
    v11 = *(uint64_t ***)(*a1 + 8 * v10);
    if (v11)
    {
      v12 = *v11;
      if (*v11)
      {
        v13 = v2[23];
        if (v13 >= 0)
          v14 = v2[23];
        else
          v14 = *((_QWORD *)v2 + 1);
        if (v13 < 0)
          v2 = *(_BYTE **)v2;
        if (v9.u32[0] < 2uLL)
        {
          v15 = *(_QWORD *)&v7 - 1;
          while (1)
          {
            v21 = v12[1];
            if (v8 == v21)
            {
              v22 = *((unsigned __int8 *)v12 + 39);
              if ((v22 & 0x80u) == 0)
                v23 = *((unsigned __int8 *)v12 + 39);
              else
                v23 = v12[3];
              if (v23 == v14)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v12[2], v2, v12[3]))
                    return v12;
                }
                else
                {
                  if (!*((_BYTE *)v12 + 39))
                    return v12;
                  v24 = 0;
                  while (*((unsigned __int8 *)v12 + v24 + 16) == v2[v24])
                  {
                    if (v22 == ++v24)
                      return v12;
                  }
                }
              }
            }
            else if ((v21 & v15) != v10)
            {
              return 0;
            }
            result = 0;
            v12 = (uint64_t *)*v12;
            if (!v12)
              return result;
          }
        }
        while (1)
        {
          v17 = v12[1];
          if (v8 == v17)
          {
            v18 = *((unsigned __int8 *)v12 + 39);
            if ((v18 & 0x80u) == 0)
              v19 = *((unsigned __int8 *)v12 + 39);
            else
              v19 = v12[3];
            if (v19 == v14)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v12[2], v2, v12[3]))
                  return v12;
              }
              else
              {
                if (!*((_BYTE *)v12 + 39))
                  return v12;
                v20 = 0;
                while (*((unsigned __int8 *)v12 + v20 + 16) == v2[v20])
                {
                  if (v18 == ++v20)
                    return v12;
                }
              }
            }
          }
          else
          {
            if (v17 >= *(_QWORD *)&v7)
              v17 %= *(_QWORD *)&v7;
            if (v17 != v10)
              return 0;
          }
          result = 0;
          v12 = (uint64_t *)*v12;
          if (!v12)
            return result;
        }
      }
    }
  }
  return 0;
}

char *sub_19C345028(char **a1, _QWORD *a2)
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  unint64_t v15;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  char *v23;
  char *v24;
  const void *v25;
  const void *v26;

  v3 = *a1;
  v2 = a1[1];
  v4 = v2 - *a1;
  v5 = v4 >> 3;
  v6 = (v4 >> 3) + 1;
  if (v6 >> 61)
    sub_19C2A18E8();
  v9 = a1[2] - v3;
  if (v9 >> 2 > v6)
    v6 = v9 >> 2;
  if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
    v10 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v10 = v6;
  if (v10)
  {
    if (v10 >> 61)
      sub_19C2A143C();
    v11 = (char *)operator new(8 * v10);
  }
  else
  {
    v11 = 0;
  }
  v12 = &v11[8 * v5];
  v13 = &v11[8 * v10];
  *(_QWORD *)v12 = *a2;
  v14 = v12 + 8;
  *a2 = 0;
  if (v2 != v3)
  {
    v15 = v2 - v3 - 8;
    if (v15 < 0x78)
      goto LABEL_22;
    if (&v11[v4 - (v15 & 0xFFFFFFFFFFFFFFF8) - 8] < v2 && &v2[-(v15 & 0xFFFFFFFFFFFFFFF8) - 8] < v12)
      goto LABEL_22;
    v17 = (v15 >> 3) + 1;
    v12 -= 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    v18 = v2 - 32;
    v19 = &v11[8 * v5 - 16];
    v20 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v21 = *((_OWORD *)v18 + 1);
      *((_OWORD *)v19 - 1) = *(_OWORD *)v18;
      *(_OWORD *)v19 = v21;
      *(_OWORD *)v18 = 0uLL;
      *((_OWORD *)v18 + 1) = 0uLL;
      v18 -= 32;
      v19 -= 32;
      v20 -= 4;
    }
    while (v20);
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
    {
      v2 -= 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
      do
      {
LABEL_22:
        v22 = *((_QWORD *)v2 - 1);
        v2 -= 8;
        *((_QWORD *)v12 - 1) = v22;
        v12 -= 8;
        *(_QWORD *)v2 = 0;
      }
      while (v2 != v3);
    }
  }
  v23 = *a1;
  v24 = a1[1];
  *a1 = v12;
  a1[1] = v14;
  a1[2] = v13;
  while (v24 != v23)
  {
    v26 = (const void *)*((_QWORD *)v24 - 1);
    v24 -= 8;
    v25 = v26;
    if (v26)
      CFRelease(v25);
  }
  if (v23)
    operator delete(v23);
  return v14;
}

uint64_t *sub_19C3451AC(uint64_t *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      v3 = *(std::__shared_weak_count **)(v2 + 48);
      if (v3)
      {
        p_shared_owners = (unint64_t *)&v3->__shared_owners_;
        do
          v5 = __ldaxr(p_shared_owners);
        while (__stlxr(v5 - 1, p_shared_owners));
        if (!v5)
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
          if ((*(char *)(v2 + 39) & 0x80000000) == 0)
            goto LABEL_9;
          goto LABEL_8;
        }
      }
      if (*(char *)(v2 + 39) < 0)
LABEL_8:
        operator delete(*(void **)(v2 + 16));
    }
LABEL_9:
    operator delete((void *)v2);
  }
  return a1;
}

void sub_19C345244(uint64_t a1, unint64_t a2)
{
  char *v2;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  char *v20;
  const void *v21;
  const void *v22;

  v2 = *(char **)a1;
  if (a2 <= (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3)
    return;
  if (a2 >> 61)
    sub_19C2A18E8();
  v4 = *(char **)(a1 + 8);
  v5 = 8 * a2;
  v6 = (char *)operator new(8 * a2);
  v7 = &v6[v5];
  v8 = v4 - v2;
  v9 = (unint64_t)&v6[(v4 - v2) & 0xFFFFFFFFFFFFFFF8];
  if (v4 == v2)
  {
    *(_QWORD *)a1 = v9;
    *(_QWORD *)(a1 + 8) = v9;
    *(_QWORD *)(a1 + 16) = v7;
    goto LABEL_7;
  }
  v10 = v8 - 8;
  if ((unint64_t)(v8 - 8) > 0x77)
  {
    v12 = &v6[(v8 & 0xFFFFFFFFFFFFFFF8) - (v10 & 0xFFFFFFFFFFFFFFF8) - 8] >= v4
       || (unint64_t)&v4[-(v10 & 0xFFFFFFFFFFFFFFF8) - 8] >= v9;
    v11 = &v6[(v4 - v2) & 0xFFFFFFFFFFFFFFF8];
    if (v12)
    {
      v13 = v8 >> 3;
      v14 = (v10 >> 3) + 1;
      v11 = (char *)(v9 - 8 * (v14 & 0x3FFFFFFFFFFFFFFCLL));
      v15 = v4 - 32;
      v16 = &v6[8 * v13 - 16];
      v17 = v14 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v18 = *((_OWORD *)v15 + 1);
        *((_OWORD *)v16 - 1) = *(_OWORD *)v15;
        *(_OWORD *)v16 = v18;
        *(_OWORD *)v15 = 0uLL;
        *((_OWORD *)v15 + 1) = 0uLL;
        v15 -= 32;
        v16 -= 32;
        v17 -= 4;
      }
      while (v17);
      if (v14 == (v14 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_20;
      v4 -= 8 * (v14 & 0x3FFFFFFFFFFFFFFCLL);
    }
  }
  else
  {
    v11 = &v6[(v4 - v2) & 0xFFFFFFFFFFFFFFF8];
  }
  do
  {
    v19 = *((_QWORD *)v4 - 1);
    v4 -= 8;
    *((_QWORD *)v11 - 1) = v19;
    v11 -= 8;
    *(_QWORD *)v4 = 0;
  }
  while (v4 != v2);
LABEL_20:
  v2 = *(char **)a1;
  v20 = *(char **)(a1 + 8);
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + 8) = v9;
  *(_QWORD *)(a1 + 16) = v7;
  while (v20 != v2)
  {
    v22 = (const void *)*((_QWORD *)v20 - 1);
    v20 -= 8;
    v21 = v22;
    if (v22)
      CFRelease(v21);
  }
LABEL_7:
  if (v2)
    operator delete(v2);
}

char *sub_19C34539C(char **a1, _QWORD *a2)
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  unint64_t v15;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  char *v23;
  char *v24;
  const void *v25;
  const void *v26;

  v3 = *a1;
  v2 = a1[1];
  v4 = v2 - *a1;
  v5 = v4 >> 3;
  v6 = (v4 >> 3) + 1;
  if (v6 >> 61)
    sub_19C2A18E8();
  v9 = a1[2] - v3;
  if (v9 >> 2 > v6)
    v6 = v9 >> 2;
  if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
    v10 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v10 = v6;
  if (v10)
  {
    if (v10 >> 61)
      sub_19C2A143C();
    v11 = (char *)operator new(8 * v10);
  }
  else
  {
    v11 = 0;
  }
  v12 = &v11[8 * v5];
  v13 = &v11[8 * v10];
  *(_QWORD *)v12 = *a2;
  v14 = v12 + 8;
  *a2 = 0;
  if (v2 != v3)
  {
    v15 = v2 - v3 - 8;
    if (v15 < 0x78)
      goto LABEL_22;
    if (&v11[v4 - (v15 & 0xFFFFFFFFFFFFFFF8) - 8] < v2 && &v2[-(v15 & 0xFFFFFFFFFFFFFFF8) - 8] < v12)
      goto LABEL_22;
    v17 = (v15 >> 3) + 1;
    v12 -= 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    v18 = v2 - 32;
    v19 = &v11[8 * v5 - 16];
    v20 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v21 = *((_OWORD *)v18 + 1);
      *((_OWORD *)v19 - 1) = *(_OWORD *)v18;
      *(_OWORD *)v19 = v21;
      *(_OWORD *)v18 = 0uLL;
      *((_OWORD *)v18 + 1) = 0uLL;
      v18 -= 32;
      v19 -= 32;
      v20 -= 4;
    }
    while (v20);
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
    {
      v2 -= 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
      do
      {
LABEL_22:
        v22 = *((_QWORD *)v2 - 1);
        v2 -= 8;
        *((_QWORD *)v12 - 1) = v22;
        v12 -= 8;
        *(_QWORD *)v2 = 0;
      }
      while (v2 != v3);
    }
  }
  v23 = *a1;
  v24 = a1[1];
  *a1 = v12;
  a1[1] = v14;
  a1[2] = v13;
  while (v24 != v23)
  {
    v26 = (const void *)*((_QWORD *)v24 - 1);
    v24 -= 8;
    v25 = v26;
    if (v26)
      CFRelease(v25);
  }
  if (v23)
    operator delete(v23);
  return v14;
}

void sub_19C345520(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  std::ios_base *v10;
  __n128 v11;
  _QWORD v12[7];
  _QWORD v13[4];
  void *__p;
  void *v15;
  uint64_t v16;
  _QWORD v17[8];
  _QWORD v18[3];
  int v19;
  _QWORD v20[5];
  uint64_t v21;
  _BYTE v22[408];
  _QWORD v23[21];

  v23[19] = *MEMORY[0x1E0C80C00];
  v13[0] = 0;
  v13[1] = v13;
  v13[2] = 0x2000000000;
  v13[3] = 0;
  v20[0] = 0;
  v20[1] = v20;
  v20[2] = 0x26002000000;
  v20[3] = sub_19C3457F4;
  v20[4] = sub_19C3458E8;
  v5 = MEMORY[0x1E0DE4FB0];
  v6 = MEMORY[0x1E0DE4FB0] + 64;
  v7 = (uint64_t *)MEMORY[0x1E0DE4F48];
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F48] + 8);
  v9 = *(_QWORD *)(MEMORY[0x1E0DE4F48] + 16);
  v23[0] = MEMORY[0x1E0DE4FB0] + 64;
  v21 = v8;
  *(_QWORD *)&v22[*(_QWORD *)(v8 - 24) - 8] = v9;
  v10 = (std::ios_base *)&v22[*(_QWORD *)(v21 - 24) - 8];
  std::ios_base::init(v10, v22);
  v10[1].__vftable = 0;
  v10[1].__fmtflags_ = -1;
  v21 = v5 + 24;
  v23[0] = v6;
  MEMORY[0x1A1AD322C](v22);
  if (!std::filebuf::open())
    std::ios_base::clear((std::ios_base *)&v22[*(_QWORD *)(v21 - 24) - 8], *(_DWORD *)&v22[*(_QWORD *)(v21 - 24) + 24] | 4);
  v12[0] = MEMORY[0x1E0C809B0];
  v11.n128_u64[0] = 0x40000000;
  v12[1] = 0x40000000;
  v12[2] = sub_19C345938;
  v12[3] = &unk_1E3D3A4F0;
  v12[4] = a3;
  v12[5] = v20;
  v12[6] = v13;
  __p = 0;
  v15 = 0;
  v16 = 0;
  v17[0] = MEMORY[0x1E0C809B0];
  v18[0] = 0;
  v18[1] = v18;
  v19 = -1;
  v18[2] = 0x2000000000;
  v17[1] = 0x40000000;
  v17[2] = sub_19C345D8C;
  v17[3] = &unk_1E3D3A518;
  v17[4] = v12;
  v17[5] = v18;
  v17[6] = &__p;
  v17[7] = a1;
  sub_19C428D94(a1, 0, 0, (uint64_t)v17, v11);
  _Block_object_dispose(v18, 8);
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
  _Block_object_dispose(v20, 8);
  v21 = *v7;
  *(_QWORD *)&v22[*(_QWORD *)(v21 - 24) - 8] = v7[3];
  MEMORY[0x1A1AD3238](v22);
  std::ostream::~ostream();
  MEMORY[0x1A1AD34CC](v23);
  _Block_object_dispose(v13, 8);
}

void sub_19C345778(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  _QWORD *v35;

  _Block_object_dispose(&a31, 8);
  if (__p)
  {
    a21 = (uint64_t)__p;
    operator delete(__p);
  }
  _Block_object_dispose(&a35, 8);
  sub_19C34603C(v35);
  _Block_object_dispose(&a16, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_19C3457F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  std::ios_base *v7;
  std::ios_base *v8;
  uint64_t v9;
  uint64_t result;

  v4 = *(_QWORD *)(MEMORY[0x1E0DE4F48] + 8);
  v5 = *(_QWORD *)(MEMORY[0x1E0DE4F48] + 16);
  *(_QWORD *)(a1 + 40) = v4;
  v6 = (_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 456) = MEMORY[0x1E0DE4FF8] + 16;
  *(_QWORD *)(a1 + 40 + *(_QWORD *)(v4 - 24)) = v5;
  v7 = (std::ios_base *)(a1 + 40 + *(_QWORD *)(*(_QWORD *)(a1 + 40) - 24));
  v8 = (std::ios_base *)(a2 + 40 + *(_QWORD *)(*(_QWORD *)(a2 + 40) - 24));
  std::ios_base::move(v7, v8);
  v7[1].__vftable = v8[1].__vftable;
  v8[1].__vftable = 0;
  v7[1].__fmtflags_ = v8[1].__fmtflags_;
  v9 = MEMORY[0x1E0DE4FB0];
  *(_QWORD *)(a1 + 40) = MEMORY[0x1E0DE4FB0] + 24;
  *(_QWORD *)(a1 + 456) = v9 + 64;
  result = MEMORY[0x1A1AD3220](a1 + 48, a2 + 48);
  *(_QWORD *)((char *)v6 + *(_QWORD *)(*v6 - 24) + 40) = result;
  return result;
}

void sub_19C3458C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x1A1AD34CC](v1 + 416);
  _Unwind_Resume(a1);
}

void sub_19C3458E8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = MEMORY[0x1E0DE4F48];
  v2 = *MEMORY[0x1E0DE4F48];
  *(_QWORD *)(a1 + 40) = *MEMORY[0x1E0DE4F48];
  *(_QWORD *)(a1 + 40 + *(_QWORD *)(v2 - 24)) = *(_QWORD *)(v1 + 24);
  MEMORY[0x1A1AD3238](a1 + 48);
  std::ostream::~ostream();
  JUMPOUT(0x1A1AD34CCLL);
}

uint64_t sub_19C345938(_QWORD *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::ios_base *v9;
  _QWORD *v10;
  _QWORD *v11;
  unsigned int v12;
  unint64_t v13;
  void *p_p;
  uint64_t v15;
  size_t v16;
  _QWORD *v17;
  uint64_t v18;
  size_t v19;
  void *v20;
  unint64_t v21;
  const void **v22;
  const void *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  _QWORD *v28;
  const std::locale::facet *v29;
  void *__p;
  size_t v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[3];
  uint64_t v37;
  unint64_t v38;
  void *v39[2];
  __int128 v40;
  int v41;
  uint64_t v42[19];
  std::locale v43;

  v5 = MEMORY[0x1E0DE4FE0];
  v6 = MEMORY[0x1E0DE4FE0] + 64;
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v42[0] = MEMORY[0x1E0DE4FE0] + 64;
  v34 = v7;
  *(uint64_t *)((char *)&v34 + *(_QWORD *)(v7 - 24)) = v8;
  v9 = (std::ios_base *)((char *)&v34 + *(_QWORD *)(v34 - 24));
  std::ios_base::init(v9, &v35);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  v34 = v5 + 24;
  v42[0] = v6;
  std::streambuf::basic_streambuf();
  v35 = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v39 = 0u;
  v40 = 0u;
  v41 = 16;
  v10 = (_QWORD *)std::ostream::operator<<();
  sub_19C2A1B24(v10, (uint64_t)"|", 1);
  v11 = (_QWORD *)std::ostream::operator<<();
  sub_19C2A1B24(v11, (uint64_t)"|", 1);
  if (a3)
  {
    v12 = 1;
    do
    {
      if (v12 != 1)
        sub_19C2A1B24(&v34, (uint64_t)" ", 1);
      (*(void (**)(void **__return_ptr))(a1[4] + 16))(&__p);
      if (v33 >= 0)
        p_p = &__p;
      else
        p_p = __p;
      if (v33 >= 0)
        v15 = HIBYTE(v33);
      else
        v15 = v32;
      sub_19C2A1B24(&v34, (uint64_t)p_p, v15);
      v16 = HIBYTE(v33);
      if (v33 < 0)
        v16 = v32;
      if (v16)
      {
        if (v33 < 0)
          goto LABEL_18;
      }
      else
      {
        sub_19C2A1B24(&v34, (uint64_t)"[", 1);
        v17 = (_QWORD *)std::ostream::operator<<();
        sub_19C2A1B24(v17, (uint64_t)"]", 1);
        if (v33 < 0)
LABEL_18:
          operator delete(__p);
      }
      v13 = v12++;
    }
    while (a3 > v13);
  }
  v18 = *(_QWORD *)(a1[5] + 8);
  if ((v41 & 0x10) != 0)
  {
    v21 = *((_QWORD *)&v40 + 1);
    if (*((_QWORD *)&v40 + 1) < v38)
    {
      *((_QWORD *)&v40 + 1) = v38;
      v21 = v38;
    }
    v22 = (const void **)&v37;
  }
  else
  {
    if ((v41 & 8) == 0)
    {
      v19 = 0;
      HIBYTE(v33) = 0;
      v20 = &__p;
      goto LABEL_34;
    }
    v22 = (const void **)v36;
    v21 = v36[2];
  }
  v23 = *v22;
  v19 = v21 - (_QWORD)*v22;
  if (v19 >= 0x7FFFFFFFFFFFFFF8)
    sub_19C2A1A54();
  if (v19 >= 0x17)
  {
    v24 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v19 | 7) != 0x17)
      v24 = v19 | 7;
    v25 = v24 + 1;
    v20 = operator new(v24 + 1);
    v32 = v19;
    v33 = v25 | 0x8000000000000000;
    __p = v20;
    goto LABEL_33;
  }
  HIBYTE(v33) = v21 - *(_BYTE *)v22;
  v20 = &__p;
  if (v19)
LABEL_33:
    memmove(v20, v23, v19);
LABEL_34:
  *((_BYTE *)v20 + v19) = 0;
  if (v33 >= 0)
    v26 = &__p;
  else
    v26 = __p;
  if (v33 >= 0)
    v27 = HIBYTE(v33);
  else
    v27 = v32;
  v28 = sub_19C2A1B24((_QWORD *)(v18 + 40), (uint64_t)v26, v27);
  std::ios_base::getloc((const std::ios_base *)((char *)v28 + *(_QWORD *)(*v28 - 24)));
  v29 = std::locale::use_facet(&v43, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v29->__vftable[2].~facet_0)(v29, 10);
  std::locale::~locale(&v43);
  std::ostream::put();
  std::ostream::flush();
  if (SHIBYTE(v33) < 0)
    operator delete(__p);
  ++*(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24);
  v34 = *MEMORY[0x1E0DE4F60];
  *(uint64_t *)((char *)&v34 + *(_QWORD *)(v34 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v35 = MEMORY[0x1E0DE4FB8] + 16;
  if (SBYTE7(v40) < 0)
    operator delete(v39[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A1AD34CC](v42);
}

void sub_19C345D04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::ostream::~ostream();
  MEMORY[0x1A1AD34CC](a10);
  _Unwind_Resume(a1);
}

void sub_19C345D34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  sub_19C2B39CC((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_19C345D8C(_QWORD *a1, int a2, float a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  int64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  __int128 v26;
  int v27;
  __n128 v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  int *v32;
  void *__p;
  char *v34;
  char *v35;
  _QWORD v36[8];
  _QWORD v37[3];
  int v38;

  v6 = a1[6];
  v34 = 0;
  v35 = 0;
  __p = 0;
  v8 = *(_BYTE **)v6;
  v7 = *(_BYTE **)(v6 + 8);
  v9 = v7 - v8;
  if (v7 == v8)
  {
    v10 = 0;
    v11 = 0;
  }
  else
  {
    if (v9 < 0)
      sub_19C2A18E8();
    v10 = (char *)operator new(v7 - v8);
    v11 = &v10[4 * (v9 >> 2)];
    __p = v10;
    v35 = v11;
    memcpy(v10, v8, v9);
    v34 = v11;
  }
  v12 = v11 - v10;
  v13 = (v11 - v10) >> 2;
  v14 = v13 + 1;
  if ((unint64_t)(v13 + 1) >> 62)
    sub_19C2A18E8();
  if (v12 >> 1 > v14)
    v14 = v12 >> 1;
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
    v15 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v15 = v14;
  if (v15)
  {
    if (v15 >> 62)
      sub_19C2A143C();
    v16 = (char *)operator new(4 * v15);
  }
  else
  {
    v16 = 0;
  }
  v17 = &v16[4 * v13];
  v18 = &v16[4 * v15];
  *(_DWORD *)v17 = a2;
  v19 = v17 + 4;
  if (v11 != v10)
  {
    v20 = v11 - v10 - 4;
    if (v20 < 0x1C)
    {
      v21 = v11;
      do
      {
LABEL_21:
        v27 = *((_DWORD *)v21 - 1);
        v21 -= 4;
        *((_DWORD *)v17 - 1) = v27;
        v17 -= 4;
      }
      while (v21 != v10);
      goto LABEL_22;
    }
    v22 = (v20 >> 2) + 1;
    v21 = &v11[-4 * (v22 & 0x7FFFFFFFFFFFFFF8)];
    v23 = &v16[4 * v13 - 16];
    v24 = v11 - 16;
    v25 = v22 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v26 = *(_OWORD *)v24;
      *((_OWORD *)v23 - 1) = *((_OWORD *)v24 - 1);
      *(_OWORD *)v23 = v26;
      v23 -= 32;
      v24 -= 32;
      v25 -= 8;
    }
    while (v25);
    v17 -= 4 * (v22 & 0x7FFFFFFFFFFFFFF8);
    if (v22 != (v22 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_21;
  }
LABEL_22:
  __p = v17;
  v35 = v18;
  if (v10)
    operator delete(v10);
  v34 = v19;
  (*(void (**)(float))(a1[4] + 16))(a3);
  v29 = *(_QWORD *)(a1[5] + 8);
  if (*(_DWORD *)(v29 + 24) != a2)
  {
    v30 = (_QWORD *)a1[7];
    v31 = a1[4];
    if (v34 == __p)
      v32 = 0;
    else
      v32 = (int *)__p;
    v37[0] = 0;
    v37[1] = v37;
    v38 = -1;
    v37[2] = 0x2000000000;
    v36[0] = MEMORY[0x1E0C809B0];
    v28.n128_u64[0] = 0x40000000;
    v36[1] = 0x40000000;
    v36[2] = sub_19C345D8C;
    v36[3] = &unk_1E3D3A518;
    v36[4] = v31;
    v36[5] = v37;
    v36[6] = &__p;
    v36[7] = v30;
    sub_19C428D94(v30, v32, (unint64_t)(v34 - (_BYTE *)__p) >> 2, (uint64_t)v36, v28);
    _Block_object_dispose(v37, 8);
    v29 = *(_QWORD *)(a1[5] + 8);
  }
  *(_DWORD *)(v29 + 24) = a2;
  if (__p)
  {
    v34 = (char *)__p;
    operator delete(__p);
  }
}

void sub_19C346008(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  _Block_object_dispose(&a21, 8);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *sub_19C34603C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x1E0DE4F48];
  v3 = *MEMORY[0x1E0DE4F48];
  *a1 = *MEMORY[0x1E0DE4F48];
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  MEMORY[0x1A1AD3238](a1 + 1);
  std::ostream::~ostream();
  MEMORY[0x1A1AD34CC](a1 + 52);
  return a1;
}

uint64_t sub_19C346094(uint64_t a1, const __CFDictionary *a2, void **a3)
{
  CFTypeRef *v4;
  const __CFString *Value;
  const __CFString *v7;
  CFTypeID v8;
  CFLocaleRef v9;
  CFTypeID v10;
  CFTypeID TypeID;
  const __CFString *v12;
  const __CFString *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  char v17;
  __int128 v18;
  __int128 v19;
  void *v20;
  size_t v21;
  NSObject *v22;
  _BYTE *v23;
  const char *v24;
  int v25;
  int v26;
  int *v27;
  int *v28;
  NSObject *v29;
  const __CFString *v30;
  CFURLRef v31;
  const __CFString *v32;
  CFTypeID v33;
  CFStringRef Copy;
  const __CFArray *v35;
  CFTypeID v36;
  CFTypeRef *v37;
  CFTypeRef *v38;
  char *v39;
  const __CFString *v40;
  const __CFString *v41;
  CFTypeID v42;
  CFURLRef v43;
  const __CFString *v44;
  CFTypeID v45;
  CFURLRef v46;
  CFTypeID v47;
  CFTypeID v48;
  CFTypeRef *i;
  const void *v50;
  const void *v51;
  char *v52;
  const __CFString *v53;
  const __CFString *v54;
  __CFArray *v55;
  CFArrayRef v56;
  const __CFString *v57;
  __CFArray *v58;
  const __CFLocale *v59;
  const __CFArray *v60;
  const __CFString *v61;
  CFIndex Count;
  const __CFAllocator *v63;
  __CFArray *MutableCopy;
  const __CFString *v65;
  CFLocaleRef v66;
  __CFArray *v67;
  const __CFString *v68;
  const __CFString *v69;
  CFLocaleRef v70;
  __CFArray *v71;
  CFIndex j;
  const __CFURL *ValueAtIndex;
  __CFBundle *v74;
  __CFBundle *v75;
  CFIndex k;
  const __CFURL *v77;
  const __CFLocale *v78;
  __CFArray *v79;
  _BYTE *v80;
  uint64_t v81;
  uint64_t v82;
  const __CFURL *v83;
  CFIndex v84;
  const __CFURL *v85;
  __CFBundle *v86;
  CFURLRef v87;
  NSObject *v88;
  __CFArray *v89;
  const __CFArray *v90;
  CFIndex m;
  const __CFURL *v92;
  CFTypeRef v93;
  const __CFDictionary *v94;
  const __CFArray *v95;
  uint64_t v96;
  CFIndex v97;
  const __CFAllocator *v98;
  const CFDictionaryKeyCallBacks *v99;
  const CFDictionaryValueCallBacks *v100;
  const void *v101;
  const __CFDictionary *v102;
  const __CFURL *v103;
  const __CFDictionary *v104;
  uint64_t v105;
  const __CFString *v106;
  const __CFString *v107;
  CFTypeID v108;
  const __CFURL *v109;
  CFNumberRef v110;
  const __CFDictionary *v111;
  const __CFArray *v112;
  const __CFArray *v113;
  const void *v114;
  const __CFDictionary *v115;
  const __CFURL *v116;
  __int128 v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  CFTypeID v124;
  __int128 v125;
  std::__shared_weak_count *v126;
  unint64_t *p_shared_owners;
  unint64_t v128;
  unint64_t *v129;
  char *v130;
  char *n;
  const void *v132;
  const void *v133;
  _QWORD *exception;
  _QWORD *v136;
  void *v137;
  int v138;
  int v139;
  CFTypeRef *v140;
  CFMutableDictionaryRef Mutable;
  CFTypeRef *v142;
  int **v143;
  CFTypeRef *v144;
  __CFArray *v145;
  const void *v146;
  uint64_t *v147;
  void **__dst;
  CFTypeRef *v149;
  CFTypeRef *v150;
  CFTypeRef v152[2];
  CFTypeRef cf;
  char v154;
  CFNumberRef v155;
  int valuePtr;
  _BYTE v157[24];
  char v158;
  __int128 buf;
  unint64_t v160;
  uint64_t v161;
  CFRange v162;
  CFRange v163;

  v161 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = 0;
  v150 = (CFTypeRef *)(a1 + 8);
  *(_OWORD *)(a1 + 24) = 0u;
  v4 = (CFTypeRef *)(a1 + 24);
  *(_OWORD *)(a1 + 40) = 0u;
  v144 = (CFTypeRef *)(a1 + 40);
  *(_QWORD *)(a1 + 56) = 0;
  v149 = (CFTypeRef *)(a1 + 56);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_BYTE *)(a1 + 64) = 1;
  *(_BYTE *)(a1 + 80) = 0;
  v147 = (uint64_t *)(a1 + 72);
  __dst = (void **)(a1 + 80);
  *(_BYTE *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  v143 = (int **)(a1 + 136);
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  if (!a2)
    return a1;
  v140 = (CFTypeRef *)(a1 + 32);
  Value = (const __CFString *)CFDictionaryGetValue(a2, (const void *)kLMLanguageModelLocaleKey);
  v7 = Value;
  if (!Value)
    return a1;
  v8 = CFGetTypeID(Value);
  if (v8 == CFStringGetTypeID())
  {
    v9 = CFLocaleCreate(0, v7);
    if (*v150)
      CFRelease(*v150);
    *v150 = v9;
    goto LABEL_12;
  }
  v10 = CFGetTypeID(v7);
  TypeID = CFLocaleGetTypeID();
  v9 = (CFLocaleRef)*v150;
  if (v10 != TypeID)
  {
LABEL_12:
    if (!v9)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      sub_19C2A6D48(v157, "Locale is missing from ResourceLoader options");
      sub_19C31237C(exception, (__int128 *)v157);
      __cxa_throw(exception, (struct type_info *)&unk_1E3D32968, (void (*)(void *))sub_19C3123E4);
    }
    goto LABEL_13;
  }
  if (v9 != (CFLocaleRef)v7)
  {
    CFRetain(v7);
    if (*v150)
      CFRelease(*v150);
    *v150 = v7;
  }
LABEL_13:
  v12 = (const __CFString *)CFDictionaryGetValue(a2, (const void *)kLMLanguageModelIsMultilingualModelKey);
  *(_BYTE *)(a1 + 16) = sub_19C29CB48(v12, 0);
  v13 = (const __CFString *)CFDictionaryGetValue(a2, (const void *)kLMLanguageModelIsSiriModelKey);
  *(_BYTE *)(a1 + 17) = sub_19C29CB48(v13, 0);
  v14 = operator new();
  sub_19C294AB8(v14, *v150, a2);
  v15 = *v147;
  *v147 = v14;
  if (v15)
  {
    sub_19C2F5D3C(v15);
    MEMORY[0x1A1AD355C]();
  }
  v16 = *(unsigned __int8 *)(a1 + 128);
  if (v16 == *((unsigned __int8 *)a3 + 48))
  {
    if (__dst != a3 && *(_BYTE *)(a1 + 128))
    {
      v17 = *((_BYTE *)a3 + 23);
      if (*(char *)(a1 + 103) < 0)
      {
        if (v17 >= 0)
          v20 = a3;
        else
          v20 = *a3;
        if (v17 >= 0)
          v21 = *((unsigned __int8 *)a3 + 23);
        else
          v21 = (size_t)a3[1];
        sub_19C2E54A8(__dst, v20, v21);
      }
      else if ((*((_BYTE *)a3 + 23) & 0x80) != 0)
      {
        sub_19C2E53E4(__dst, *a3, (size_t)a3[1]);
      }
      else
      {
        v18 = *(_OWORD *)a3;
        __dst[2] = a3[2];
        *(_OWORD *)__dst = v18;
      }
      sub_19C336F24(a1 + 104, a3[3], a3 + 4);
      v16 = *(unsigned __int8 *)(a1 + 128);
    }
    if (!v16)
      goto LABEL_64;
  }
  else
  {
    if (*(_BYTE *)(a1 + 128))
    {
LABEL_61:
      sub_19C2E457C(*(_QWORD *)(a1 + 112));
      if (*(char *)(a1 + 103) < 0)
        operator delete(*__dst);
      *(_BYTE *)(a1 + 128) = 0;
      goto LABEL_64;
    }
    if (*((char *)a3 + 23) < 0)
    {
      sub_19C2B5238(__dst, *a3, (unint64_t)a3[1]);
    }
    else
    {
      v19 = *(_OWORD *)a3;
      __dst[2] = a3[2];
      *(_OWORD *)__dst = v19;
    }
    *(_QWORD *)(a1 + 112) = 0;
    *(_QWORD *)(a1 + 104) = a1 + 112;
    *(_QWORD *)(a1 + 120) = 0;
    sub_19C2E4334((uint64_t *)(a1 + 104), a3[3], a3 + 4);
    *(_BYTE *)(a1 + 128) = 1;
  }
  if (qword_1EDB97228 != -1)
    dispatch_once(&qword_1EDB97228, &unk_1E3D3ABD0);
  v22 = qword_1EDB97220;
  if (os_log_type_enabled((os_log_t)qword_1EDB97220, OS_LOG_TYPE_INFO))
  {
    LM::TrialParameters::description((LM::TrialParameters *)__dst, v157);
    v23 = v157[23] >= 0 ? v157 : *(_BYTE **)v157;
    LODWORD(buf) = 136315138;
    *(_QWORD *)((char *)&buf + 4) = v23;
    _os_log_impl(&dword_19C291000, v22, OS_LOG_TYPE_INFO, "Resource loader initialized with trial parameters: %s", (uint8_t *)&buf, 0xCu);
    if ((v157[23] & 0x80000000) != 0)
      operator delete(*(void **)v157);
  }
  if (*(char *)(a1 + 103) >= 0)
    v24 = (const char *)__dst;
  else
    v24 = *(const char **)(a1 + 80);
  v25 = open(v24, 0);
  v26 = v25;
  if (v25 != -1)
  {
    if (flock(v25, 5) != -1)
    {
      v27 = (int *)operator new();
      *v27 = v26;
      goto LABEL_52;
    }
    close(v26);
  }
  v27 = 0;
LABEL_52:
  v28 = *v143;
  *v143 = v27;
  if (v28)
  {
    if (*v28 != -1)
    {
      flock(*v28, 8);
      close(*v28);
    }
    MEMORY[0x1A1AD355C](v28, 0x1000C4052888210);
    v27 = *v143;
  }
  if (!v27)
  {
    if (qword_1EDB97228 != -1)
      dispatch_once(&qword_1EDB97228, &unk_1E3D3ABD0);
    v29 = qword_1EDB97220;
    if (os_log_type_enabled((os_log_t)qword_1EDB97220, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v157 = 136315138;
      *(_QWORD *)&v157[4] = "ResourceLoader";
      _os_log_error_impl(&dword_19C291000, v29, OS_LOG_TYPE_ERROR, "%s: Failed to acquire lock on the languageModelBundlePath.", v157, 0xCu);
      if (!*(_BYTE *)(a1 + 128))
        goto LABEL_64;
    }
    else if (!*(_BYTE *)(a1 + 128))
    {
      goto LABEL_64;
    }
    goto LABEL_61;
  }
LABEL_64:
  v30 = (const __CFString *)CFDictionaryGetValue(a2, (const void *)kLMLanguageModelCustomDynamicResourceDirectoryKey);
  v31 = sub_19C2983A4(v30);
  if (*v4)
    CFRelease(*v4);
  *v4 = v31;
  if (CFDictionaryContainsKey(a2, (const void *)kLMLanguageModelBundleNameKey))
  {
    v32 = (const __CFString *)CFDictionaryGetValue(a2, (const void *)kLMLanguageModelBundleNameKey);
    v33 = CFGetTypeID(v32);
    if (v33 != CFStringGetTypeID())
    {
      v136 = __cxa_allocate_exception(0x20uLL);
      sub_19C2A6D48(v157, "invalid type for bundle name");
      sub_19C31237C(v136, (__int128 *)v157);
      __cxa_throw(v136, (struct type_info *)&unk_1E3D32968, (void (*)(void *))sub_19C3123E4);
    }
    Copy = CFStringCreateCopy(0, v32);
    if (*v140)
      CFRelease(*v140);
    *v140 = Copy;
  }
  buf = 0uLL;
  v160 = 0;
  if (kLMLanguageModelCustomResourceDirectoryKey
    && (v35 = (const __CFArray *)CFDictionaryGetValue(a2, (const void *)kLMLanguageModelCustomResourceDirectoryKey)) != 0
    && (v36 = CFArrayGetTypeID(), v36 == CFGetTypeID(v35)))
  {
    sub_19C3478B4((uint64_t)v157, v35);
    if (v158)
    {
      v37 = *(CFTypeRef **)v157;
      v38 = *(CFTypeRef **)&v157[8];
      if (*(_QWORD *)v157 != *(_QWORD *)&v157[8])
      {
        v39 = 0;
        while (1)
        {
          v44 = (const __CFString *)*v37;
          if (*v37)
          {
            v45 = CFGetTypeID(*v37);
            if (v45 == CFStringGetTypeID())
            {
              v46 = CFURLCreateWithFileSystemPath(0, v44, kCFURLPOSIXPathStyle, 1u);
              goto LABEL_90;
            }
            v47 = CFGetTypeID(v44);
            if (v47 == CFURLGetTypeID())
            {
              v46 = CFURLCopyAbsoluteURL((CFURLRef)v44);
LABEL_90:
              if (v46)
              {
                sub_19C2952E8(&cf, v46);
                if ((unint64_t)v39 < v160)
                {
                  *(_QWORD *)v39 = cf;
                  v39 += 8;
                  *((_QWORD *)&buf + 1) = v39;
                }
                else
                {
                  v39 = sub_19C347A14((char **)&buf, &cf);
                  *((_QWORD *)&buf + 1) = v39;
                  if (cf)
                    CFRelease(cf);
                }
              }
            }
          }
          if (++v37 == v38)
            goto LABEL_102;
        }
      }
      v39 = 0;
      if (!*(_QWORD *)v157)
        goto LABEL_108;
LABEL_103:
      for (i = *(CFTypeRef **)&v157[8]; i != v37; --i)
      {
        v51 = *(i - 1);
        v50 = v51;
        if (v51)
          CFRelease(v50);
      }
      operator delete(v37);
      goto LABEL_108;
    }
  }
  else
  {
    v157[0] = 0;
    v158 = 0;
  }
  if (!kLMLanguageModelCustomResourceDirectoryKey
    || (v40 = (const __CFString *)CFDictionaryGetValue(a2, (const void *)kLMLanguageModelCustomResourceDirectoryKey),
        (v41 = v40) == 0))
  {
    v39 = 0;
    goto LABEL_101;
  }
  CFRetain(v40);
  cf = v41;
  v154 = 1;
  v42 = CFGetTypeID(v41);
  if (v42 == CFStringGetTypeID())
  {
    v43 = CFURLCreateWithFileSystemPath(0, v41, kCFURLPOSIXPathStyle, 1u);
  }
  else
  {
    v48 = CFGetTypeID(v41);
    if (v48 != CFURLGetTypeID())
      goto LABEL_99;
    v43 = CFURLCopyAbsoluteURL((CFURLRef)v41);
  }
  if (v43)
  {
    sub_19C2952E8(v152, v43);
    v39 = sub_19C347A14((char **)&buf, v152);
    *((_QWORD *)&buf + 1) = v39;
    if (v152[0])
      CFRelease(v152[0]);
    goto LABEL_100;
  }
LABEL_99:
  v39 = 0;
LABEL_100:
  CFRelease(v41);
LABEL_101:
  if (!v158)
    goto LABEL_108;
LABEL_102:
  v37 = *(CFTypeRef **)v157;
  if (*(_QWORD *)v157)
    goto LABEL_103;
LABEL_108:
  v52 = (char *)buf;
  if (v39 != (char *)buf)
  {
    v53 = (const __CFString *)CFDictionaryGetValue(a2, (const void *)kLMLanguageModelAddSystemToCustomResourcesKey);
    *(_BYTE *)(a1 + 64) = sub_19C29CB48(v53, 0);
  }
  v54 = (const __CFString *)CFDictionaryGetValue(a2, (const void *)kLMLanguageModelIgnoreSystemLanguageModelsKey);
  *(_BYTE *)(a1 + 65) = sub_19C29CB48(v54, 0);
  if (*(_BYTE *)(a1 + 64))
  {
    v55 = sub_19C294FA8((const __CFLocale *)*v150);
    if (*v144)
      CFRelease(*v144);
    *v144 = v55;
  }
  v56 = sub_19C29D8E8(v52, v39);
  if (*v149)
    CFRelease(*v149);
  *v149 = v56;
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
  *(_QWORD *)a1 = Mutable;
  v57 = (const __CFString *)CFDictionaryGetValue(a2, (const void *)kLMLanguageModelStaticModelsEnabledKey);
  if (sub_19C29CB48(v57, 1))
  {
    v58 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
    v59 = (const __CFLocale *)*v150;
    if (*v150)
    {
      v60 = *(const __CFArray **)(a1 + 40);
      if (*(_BYTE *)(a1 + 64))
      {
        v61 = *(const __CFString **)(a1 + 32);
        v138 = *(unsigned __int8 *)(a1 + 16);
        v139 = *(unsigned __int8 *)(a1 + 17);
        v145 = sub_19C313158((uint64_t)*v150, v139, v138);
        Count = CFArrayGetCount(v145);
        v63 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        MutableCopy = CFArrayCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], Count, v145);
        v65 = (const __CFString *)MEMORY[0x1A1AD2A04](v59);
        if (CFStringCompare(v65, CFSTR("hi-Latn"), 0) == kCFCompareEqualTo)
        {
          v66 = CFLocaleCreate(v63, CFSTR("hi"));
          v67 = sub_19C313158((uint64_t)v66, v139 != 0, v138 != 0);
          v162.length = CFArrayGetCount(v67);
          v162.location = 0;
          CFArrayAppendArray(MutableCopy, v67, v162);
          if (v67)
            CFRelease(v67);
          if (v66)
            CFRelease(v66);
        }
        v68 = (const __CFString *)MEMORY[0x1A1AD2A04](v59);
        if (CFStringCompare(v68, CFSTR("ars"), 0) == kCFCompareEqualTo
          || (v69 = (const __CFString *)MEMORY[0x1A1AD2A04](v59),
              CFStringCompare(v69, CFSTR("ars_SA"), 0) == kCFCompareEqualTo))
        {
          v70 = CFLocaleCreate(v63, CFSTR("ar"));
          v71 = sub_19C313158((uint64_t)v70, v139 != 0, v138 != 0);
          v163.length = CFArrayGetCount(v71);
          v163.location = 0;
          CFArrayAppendArray(MutableCopy, v71, v163);
          if (v71)
            CFRelease(v71);
          if (v70)
            CFRelease(v70);
        }
        if (MutableCopy)
        {
          for (j = 0; j < CFArrayGetCount(MutableCopy); ++j)
          {
            ValueAtIndex = (const __CFURL *)CFArrayGetValueAtIndex(MutableCopy, j);
            v74 = CFBundleCreate(0, ValueAtIndex);
            v75 = v74;
            if (v74)
            {
              if (sub_19C29802C(v74, v59, v61))
                CFArrayAppendValue(v58, v75);
              CFRelease(v75);
            }
          }
          CFRelease(MutableCopy);
        }
        if (v145)
          CFRelease(v145);
      }
      if (v60)
      {
        for (k = 0; k < CFArrayGetCount(v60); ++k)
        {
          v77 = (const __CFURL *)CFArrayGetValueAtIndex(v60, k);
          sub_19C348448(v77, *(const __CFLocale **)(a1 + 8), *(const __CFString **)(a1 + 32), v58, *(_BYTE *)(a1 + 17));
        }
      }
      if (*(_BYTE *)(a1 + 128))
      {
        v78 = (const __CFLocale *)*v150;
        v79 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
        if (*(char *)(a1 + 103) < 0)
        {
          sub_19C2B5238(v157, *(void **)(a1 + 80), *(_QWORD *)(a1 + 88));
        }
        else
        {
          *(_OWORD *)v157 = *(_OWORD *)__dst;
          *(_QWORD *)&v157[16] = __dst[2];
        }
        if (v157[23] >= 0)
          v80 = v157;
        else
          v80 = *(_BYTE **)v157;
        if (v157[23] >= 0)
          v81 = v157[23];
        else
          v81 = *(_QWORD *)&v157[8];
        v82 = MEMORY[0x1A1AD2D70](0, v80, v81, 1, 0);
        if (!v82)
        {
          v137 = __cxa_allocate_exception(0x10uLL);
          MEMORY[0x1A1AD3154](v137, "Could not construct");
          __cxa_throw(v137, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
        }
        v83 = (const __CFURL *)v82;
        if ((v157[23] & 0x80000000) != 0)
          operator delete(*(void **)v157);
        sub_19C348448(v83, v78, 0, v79, 0);
        v84 = 0;
        v85 = v83;
        while (CFArrayGetCount(v79) > v84)
        {
          v86 = (__CFBundle *)CFArrayGetValueAtIndex(v79, v84);
          v87 = CFBundleCopyBundleURL(v86);
          sub_19C2952E8(&cf, v87);
          if (qword_1EDB97228 != -1)
            dispatch_once(&qword_1EDB97228, &unk_1E3D3ABD0);
          v88 = qword_1EDB97220;
          if (os_log_type_enabled((os_log_t)qword_1EDB97220, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)v157 = 136315394;
            *(_QWORD *)&v157[4] = "appendTrialBundles";
            *(_WORD *)&v157[12] = 2112;
            *(_QWORD *)&v157[14] = cf;
            _os_log_impl(&dword_19C291000, v88, OS_LOG_TYPE_DEFAULT, "%s: Using A/B testing bundle at: %@", v157, 0x16u);
          }
          v85 = v83;
          CFArrayAppendValue(v58, v86);
          if (cf)
            CFRelease(cf);
          ++v84;
        }
        CFRelease(v85);
        if (v79)
          CFRelease(v79);
      }
    }
    *(_QWORD *)v157 = v58;
    sub_19C347F28((uint64_t)Mutable, (CFArrayRef *)v157);
    if (v58)
      CFRelease(v58);
    v89 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
    if (*v150)
    {
      v90 = (const __CFArray *)*v149;
      if (*v149)
      {
        for (m = 0; m < CFArrayGetCount(v90); ++m)
        {
          v92 = (const __CFURL *)CFArrayGetValueAtIndex(v90, m);
          sub_19C348448(v92, *(const __CFLocale **)(a1 + 8), *(const __CFString **)(a1 + 32), v89, *(_BYTE *)(a1 + 17));
        }
      }
    }
    cf = v89;
    sub_19C347F28((uint64_t)Mutable, (CFArrayRef *)&cf);
    if (v89)
      CFRelease(v89);
  }
  v93 = *v150;
  LODWORD(cf) = 15;
  *(_QWORD *)v157 = CFNumberCreate(0, kCFNumberIntType, &cf);
  v146 = *(const void **)v157;
  v94 = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)a1, *(const void **)v157);
  if (v94)
  {
    v95 = (const __CFArray *)CFDictionaryGetValue(v94, CFSTR("Resources"));
    v96 = operator new();
    *(_QWORD *)v96 = 850045863;
    *(_OWORD *)(v96 + 8) = 0u;
    *(_OWORD *)(v96 + 24) = 0u;
    *(_OWORD *)(v96 + 40) = 0u;
    *(_OWORD *)(v96 + 56) = 0u;
    *(_OWORD *)(v96 + 72) = 0u;
    sub_19C294894(v96 + 88, a2);
    *(_QWORD *)(v96 + 176) = 0;
    v142 = (CFTypeRef *)(v96 + 176);
    *(_QWORD *)(v96 + 184) = 0;
    *(_QWORD *)(v96 + 196) = 2;
    *(_QWORD *)(v96 + 272) = 0;
    *(_QWORD *)(v96 + 280) = 0;
    *(_QWORD *)(v96 + 264) = 0;
    *(_QWORD *)(v96 + 408) = 0;
    *(_QWORD *)(v96 + 440) = 0;
    *(_QWORD *)(v96 + 448) = 0;
    *(_QWORD *)(v96 + 432) = 0;
    sub_19C294C04(v96);
    if (v93 && *v142 != v93)
    {
      CFRetain(v93);
      if (*v142)
        CFRelease(*v142);
      *v142 = v93;
    }
    if (v95)
    {
      v97 = 0;
      v98 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v99 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
      v100 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
      while (v97 < CFArrayGetCount(v95))
      {
        v101 = CFArrayGetValueAtIndex(v95, v97);
        v102 = (const __CFDictionary *)CFRetain(v101);
        v103 = (const __CFURL *)CFDictionaryGetValue(v102, CFSTR("URL"));
        v104 = (const __CFDictionary *)sub_19C2E19B8(v103, 0);
        if (!v104)
          v104 = CFDictionaryCreate(v98, 0, 0, 0, v99, v100);
        sub_19C29AABC(v96, v104, 0);
        if (v104)
          CFRelease(v104);
        if (v102)
          CFRelease(v102);
        ++v97;
      }
    }
    sub_19C29AABC(v96, a2, 1);
  }
  else
  {
    v96 = operator new();
    sub_19C294AB8(v96, v93, a2);
  }
  if (v146)
    CFRelease(v146);
  v105 = *v147;
  *v147 = v96;
  if (v105)
  {
    sub_19C2F5D3C(v105);
    MEMORY[0x1A1AD355C]();
  }
  if (kLMCustomInlineCompletionParametersPathKey)
  {
    v106 = (const __CFString *)CFDictionaryGetValue(a2, (const void *)kLMCustomInlineCompletionParametersPathKey);
    v107 = v106;
    if (v106)
    {
      CFRetain(v106);
      cf = v107;
      v154 = 1;
      v108 = CFGetTypeID(v107);
      if (v108 == CFStringGetTypeID())
      {
        v109 = CFURLCreateWithFileSystemPath(0, v107, kCFURLPOSIXPathStyle, 1u);
      }
      else
      {
        v124 = CFGetTypeID(v107);
        if (v124 != CFURLGetTypeID())
          goto LABEL_236;
        v109 = CFURLCopyAbsoluteURL((CFURLRef)v107);
      }
      if (v109)
      {
        sub_19C347C44(v157, v109);
        v125 = *(_OWORD *)v157;
        *(_QWORD *)v157 = 0;
        *(_QWORD *)&v157[8] = 0;
        v126 = *(std::__shared_weak_count **)(a1 + 152);
        *(_OWORD *)(a1 + 144) = v125;
        if (v126)
        {
          p_shared_owners = (unint64_t *)&v126->__shared_owners_;
          do
            v128 = __ldaxr(p_shared_owners);
          while (__stlxr(v128 - 1, p_shared_owners));
          if (!v128)
          {
            ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
            std::__shared_weak_count::__release_weak(v126);
          }
        }
        v121 = *(std::__shared_weak_count **)&v157[8];
        if (*(_QWORD *)&v157[8])
        {
          v129 = (unint64_t *)(*(_QWORD *)&v157[8] + 8);
          do
            v123 = __ldaxr(v129);
          while (__stlxr(v123 - 1, v129));
          goto LABEL_235;
        }
      }
LABEL_236:
      if (v154)
        goto LABEL_237;
      goto LABEL_239;
    }
  }
  LOBYTE(cf) = 0;
  v154 = 0;
  valuePtr = 55;
  v110 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  v155 = v110;
  v111 = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)a1, v110);
  if (!v111 || (v112 = (const __CFArray *)CFDictionaryGetValue(v111, CFSTR("Resources")), (v113 = v112) == 0))
  {
    v152[0] = 0;
    v152[1] = 0;
    if (!v110)
      goto LABEL_215;
LABEL_214:
    CFRelease(v110);
    goto LABEL_215;
  }
  if (CFArrayGetCount(v112) != 1)
    __assert_rtn("loadInlineCompletionParameters", "LMResourceLoader.cpp", 622, "CFArrayGetCount(parameterResourceData) == 1");
  v114 = CFArrayGetValueAtIndex(v113, 0);
  *(_QWORD *)&v157[8] = 0;
  v115 = (const __CFDictionary *)CFRetain(v114);
  *(_QWORD *)v157 = v115;
  v116 = (const __CFURL *)CFDictionaryGetValue(v115, CFSTR("URL"));
  sub_19C347C44(v152, v116);
  if (v115)
    CFRelease(v115);
  if (v110)
    goto LABEL_214;
LABEL_215:
  v117 = *(_OWORD *)v152;
  v152[0] = 0;
  v152[1] = 0;
  v118 = *(std::__shared_weak_count **)(a1 + 152);
  *(_OWORD *)(a1 + 144) = v117;
  if (v118)
  {
    v119 = (unint64_t *)&v118->__shared_owners_;
    do
      v120 = __ldaxr(v119);
    while (__stlxr(v120 - 1, v119));
    if (!v120)
    {
      ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
      std::__shared_weak_count::__release_weak(v118);
    }
  }
  v121 = (std::__shared_weak_count *)v152[1];
  if (!v152[1])
    goto LABEL_236;
  v122 = (unint64_t *)((char *)v152[1] + 8);
  do
    v123 = __ldaxr(v122);
  while (__stlxr(v123 - 1, v122));
LABEL_235:
  if (v123)
    goto LABEL_236;
  ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
  std::__shared_weak_count::__release_weak(v121);
  if (v154)
  {
LABEL_237:
    if (cf)
      CFRelease(cf);
  }
LABEL_239:
  v130 = (char *)buf;
  if ((_QWORD)buf)
  {
    for (n = (char *)*((_QWORD *)&buf + 1); n != v130; n -= 8)
    {
      v133 = (const void *)*((_QWORD *)n - 1);
      v132 = v133;
      if (v133)
        CFRelease(v132);
    }
    operator delete(v130);
  }
  return a1;
}

void sub_19C3473CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, CFTypeRef cf, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,CFTypeRef a27,uint64_t a28,char a29)
{
  if (a2)
    sub_19C2CDAC8(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_19C3478B4(uint64_t a1, CFArrayRef theArray)
{
  int Count;
  CFIndex v5;
  uint64_t v6;
  const void *ValueAtIndex;
  const void *v8;
  char *v9;
  char *v10;
  char *v11;
  const void *v12;
  const void *v13;
  CFTypeRef cf;
  char v15;
  void *__p[2];
  void *v17;

  Count = CFArrayGetCount(theArray);
  __p[0] = 0;
  __p[1] = 0;
  v17 = 0;
  sub_19C345244((uint64_t)__p, Count);
  if (Count < 1)
  {
LABEL_10:
    *(_OWORD *)a1 = *(_OWORD *)__p;
    *(_QWORD *)(a1 + 16) = v17;
    *(_BYTE *)(a1 + 24) = 1;
  }
  else
  {
    v5 = 0;
    v6 = Count;
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(theArray, v5);
      v8 = ValueAtIndex;
      if (!ValueAtIndex)
        break;
      CFRetain(ValueAtIndex);
      cf = v8;
      v15 = 1;
      v9 = (char *)__p[1];
      if (__p[1] < v17)
      {
        *(_QWORD *)__p[1] = v8;
        __p[1] = v9 + 8;
      }
      else
      {
        __p[1] = sub_19C34539C((char **)__p, &cf);
        if (v15)
        {
          if (cf)
            CFRelease(cf);
        }
      }
      if (v6 == ++v5)
        goto LABEL_10;
    }
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 24) = 0;
    v10 = (char *)__p[0];
    if (__p[0])
    {
      v11 = (char *)__p[1];
      if (__p[1] != __p[0])
      {
        do
        {
          v13 = (const void *)*((_QWORD *)v11 - 1);
          v11 -= 8;
          v12 = v13;
          if (v13)
            CFRelease(v12);
        }
        while (v11 != v10);
        v10 = (char *)__p[0];
      }
      operator delete(v10);
    }
  }
}

char *sub_19C347A14(char **a1, _QWORD *a2)
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  unint64_t v15;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  char *v23;
  char *v24;
  const void *v25;
  const void *v26;

  v3 = *a1;
  v2 = a1[1];
  v4 = v2 - *a1;
  v5 = v4 >> 3;
  v6 = (v4 >> 3) + 1;
  if (v6 >> 61)
    sub_19C2A18E8();
  v9 = a1[2] - v3;
  if (v9 >> 2 > v6)
    v6 = v9 >> 2;
  if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
    v10 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v10 = v6;
  if (v10)
  {
    if (v10 >> 61)
      sub_19C2A143C();
    v11 = (char *)operator new(8 * v10);
  }
  else
  {
    v11 = 0;
  }
  v12 = &v11[8 * v5];
  v13 = &v11[8 * v10];
  *(_QWORD *)v12 = *a2;
  v14 = v12 + 8;
  *a2 = 0;
  if (v2 != v3)
  {
    v15 = v2 - v3 - 8;
    if (v15 < 0x78)
      goto LABEL_22;
    if (&v11[v4 - (v15 & 0xFFFFFFFFFFFFFFF8) - 8] < v2 && &v2[-(v15 & 0xFFFFFFFFFFFFFFF8) - 8] < v12)
      goto LABEL_22;
    v17 = (v15 >> 3) + 1;
    v12 -= 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    v18 = v2 - 32;
    v19 = &v11[8 * v5 - 16];
    v20 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v21 = *((_OWORD *)v18 + 1);
      *((_OWORD *)v19 - 1) = *(_OWORD *)v18;
      *(_OWORD *)v19 = v21;
      *(_OWORD *)v18 = 0uLL;
      *((_OWORD *)v18 + 1) = 0uLL;
      v18 -= 32;
      v19 -= 32;
      v20 -= 4;
    }
    while (v20);
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
    {
      v2 -= 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
      do
      {
LABEL_22:
        v22 = *((_QWORD *)v2 - 1);
        v2 -= 8;
        *((_QWORD *)v12 - 1) = v22;
        v12 -= 8;
        *(_QWORD *)v2 = 0;
      }
      while (v2 != v3);
    }
  }
  v23 = *a1;
  v24 = a1[1];
  *a1 = v12;
  a1[1] = v14;
  a1[2] = v13;
  while (v24 != v23)
  {
    v26 = (const void *)*((_QWORD *)v24 - 1);
    v24 -= 8;
    v25 = v26;
    if (v26)
      CFRelease(v25);
  }
  if (v23)
    operator delete(v23);
  return v14;
}

uint64_t sub_19C347B98(uint64_t a1)
{
  const void *v2;

  if (*(_BYTE *)(a1 + 8))
  {
    v2 = *(const void **)a1;
    if (*(_QWORD *)a1)
      CFRelease(v2);
  }
  return a1;
}

char **sub_19C347BD0(char **a1)
{
  char *v2;
  char *v3;
  char *v4;
  const void *v5;
  const void *v6;

  if (*((_BYTE *)a1 + 24))
  {
    v2 = *a1;
    if (*a1)
    {
      v3 = a1[1];
      v4 = *a1;
      if (v3 != v2)
      {
        do
        {
          v6 = (const void *)*((_QWORD *)v3 - 1);
          v3 -= 8;
          v5 = v6;
          if (v6)
            CFRelease(v5);
        }
        while (v3 != v2);
        v4 = *a1;
      }
      a1[1] = v2;
      operator delete(v4);
    }
  }
  return a1;
}

_QWORD *sub_19C347C44(_QWORD *a1, const __CFURL *a2)
{
  _QWORD *result;
  _QWORD *v4;
  _QWORD *v5;

  result = sub_19C2E19B8(a2, 0);
  if (result)
  {
    v4 = result;
    v5 = (_QWORD *)operator new();
    *v5 = v4;
    *a1 = v5;
    result = (_QWORD *)operator new();
    *result = &off_1E3D31188;
    result[1] = 0;
    result[2] = 0;
    result[3] = v5;
    a1[1] = result;
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
  }
  return result;
}

void sub_19C347CD4(_Unwind_Exception *a1)
{
  CFTypeRef *v1;

  if (*v1)
    CFRelease(*v1);
  *v1 = 0;
  MEMORY[0x1A1AD355C](v1, 0x60C4044C4A2DFLL);
  _Unwind_Resume(a1);
}

void **sub_19C347D0C(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  const void *v5;
  const void *v6;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v6 = (const void *)*((_QWORD *)v3 - 1);
        v3 -= 8;
        v5 = v6;
        if (v6)
          CFRelease(v5);
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

int **sub_19C347D78(int **a1)
{
  int *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*v2 != -1)
    {
      flock(*v2, 8);
      close(*v2);
    }
    MEMORY[0x1A1AD355C](v2, 0x1000C4052888210);
  }
  return a1;
}

uint64_t *sub_19C347DDC(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    sub_19C2F5D3C(v2);
    MEMORY[0x1A1AD355C]();
  }
  return a1;
}

const void **sub_19C347E20(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  *a1 = 0;
  return a1;
}

void sub_19C347E58(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C347E7C(uint64_t result)
{
  CFTypeRef *v1;

  v1 = *(CFTypeRef **)(result + 24);
  if (v1)
  {
    if (*v1)
      CFRelease(*v1);
    *v1 = 0;
    JUMPOUT(0x1A1AD355CLL);
  }
  return result;
}

uint64_t sub_19C347ED0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN2LM26InlineCompletionParametersEE27__shared_ptr_default_deleteIS2_S2_EE"
    || ((v3 & (unint64_t)"NSt3__110shared_ptrIN2LM26InlineCompletionParametersEE27__shared_ptr_default_deleteIS2_S2_EE" & 0x8000000000000000) != 0) != __OFSUB__(v3, "NSt3__110shared_ptrIN2LM26InlineCompletionParametersEE27__shared_ptr_default_deleteIS2_S2_EE")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN2LM26InlineCompletionParametersEE27__shared_ptr_default_deleteIS2_S2_EE" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_19C347F28(uint64_t a1, CFArrayRef *a2)
{
  const __CFString *v3;
  __CFBundle *ValueAtIndex;
  uint64_t v5;
  CFURLRef v6;
  void *__s1;
  char v8;

  v3 = (const __CFString *)LDCreateSystemLexiconCompatibilityVersion();
  sub_19C29CEF8(v3, &__s1);
  if (v3)
    CFRelease(v3);
  if (CFArrayGetCount(*a2) > 0)
  {
    ValueAtIndex = (__CFBundle *)CFArrayGetValueAtIndex(*a2, 0);
    v6 = CFBundleCopyBundleURL(ValueAtIndex);
    sub_19C3A30BC((int)&v5, v6);
  }
  if (v8 < 0)
    operator delete(__s1);
}

void sub_19C3483DC()
{
  uint64_t v0;

  sub_19C31352C(&v0);
  JUMPOUT(0x19C348428);
}

void sub_19C3483E4()
{
  __cxa_end_catch();
  JUMPOUT(0x19C3483ECLL);
}

void sub_19C348400(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_19C2FE810((const void **)va);
  _Unwind_Resume(a1);
}

void sub_19C34841C()
{
  JUMPOUT(0x19C348428);
}

void sub_19C348448(CFURLRef directoryURL, const __CFLocale *a2, const __CFString *a3, __CFArray *a4, char a5)
{
  const __CFArray *BundlesFromDirectory;
  CFIndex i;
  __CFBundle *ValueAtIndex;
  const __CFURL *v12;
  CFStringRef PathComponent;
  CFIndex j;
  __CFBundle *v15;
  const __CFURL *v16;
  const __CFString *v17;

  if (directoryURL && a2)
  {
    BundlesFromDirectory = CFBundleCreateBundlesFromDirectory(0, directoryURL, CFSTR("lm"));
    if ((a5 & 1) != 0)
    {
      for (i = 0; i < CFArrayGetCount(BundlesFromDirectory); ++i)
      {
        ValueAtIndex = (__CFBundle *)CFArrayGetValueAtIndex(BundlesFromDirectory, i);
        v12 = CFBundleCopyBundleURL(ValueAtIndex);
        PathComponent = CFURLCopyLastPathComponent(v12);
        if (sub_19C29802C(ValueAtIndex, a2, a3))
          CFArrayAppendValue(a4, ValueAtIndex);
        CFRelease(ValueAtIndex);
        if (PathComponent)
          CFRelease(PathComponent);
        if (v12)
          CFRelease(v12);
      }
    }
    else
    {
      for (j = 0; j < CFArrayGetCount(BundlesFromDirectory); ++j)
      {
        v15 = (__CFBundle *)CFArrayGetValueAtIndex(BundlesFromDirectory, j);
        v16 = CFBundleCopyBundleURL(v15);
        v17 = CFURLCopyLastPathComponent(v16);
        if (!CFStringHasPrefix(v17, CFSTR("Siri")))
        {
          if (sub_19C29802C(v15, a2, a3))
            CFArrayAppendValue(a4, v15);
          CFRelease(v15);
        }
        if (v17)
          CFRelease(v17);
        if (v16)
          CFRelease(v16);
      }
    }
    if (BundlesFromDirectory)
      CFRelease(BundlesFromDirectory);
  }
}

void sub_19C348604(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  const void *v4;
  va_list va;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, const void *);
  sub_19C31352C((const void **)va);
  sub_19C3134F8((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_19C348668(uint64_t a1, CFDictionaryRef theDict)
{
  __CFDictionary *v3;
  int v4;
  const __CFNumber *Value;
  const __CFNumber *v6;
  CFMutableDictionaryRef Mutable;
  const __CFDictionary *v8;
  const void *v9;
  const __CFNumber *v10;
  NSObject *v11;
  const __CFNumber *v12;
  const __CFArray *v13;
  const __CFNumber *v14;
  CFComparisonResult v15;
  const __CFString *v16;
  unint64_t v17;
  const __CFDictionary *ValueAtIndex;
  const void *v19;
  const void *v20;
  const void *v21;
  const __CFAllocator *v22;
  __CFDictionary *MutableCopy;
  CFDictionaryRef Copy;
  const void *v25;
  uint64_t v26;
  __CFArray *v27;
  uint64_t v28;
  _BYTE valuePtr[24];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v3 = *(__CFDictionary **)(a1 + 32);
  v4 = *(_DWORD *)(a1 + 40);
  Value = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("Type"));
  if (Value)
  {
    v6 = Value;
    *(_DWORD *)valuePtr = 999;
    if (!CFNumberGetValue(Value, kCFNumberIntType, valuePtr)
      || *(_DWORD *)valuePtr > 0x24u
      || ((0x1300080348uLL >> valuePtr[0]) & 1) == 0)
    {
      if (v4 != 1
        || (*(_DWORD *)valuePtr = 0, CFNumberGetValue(v6, kCFNumberIntType, valuePtr), *(_DWORD *)valuePtr > 0x2Eu)
        || ((0x4000A00030A3uLL >> valuePtr[0]) & 1) == 0)
      {
        if (!CFDictionaryContainsKey(v3, v6))
        {
          Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          CFDictionarySetValue(v3, v6, Mutable);
          if (Mutable)
            CFRelease(Mutable);
        }
        v8 = (const __CFDictionary *)CFDictionaryGetValue(v3, v6);
        if (CFDictionaryContainsKey(theDict, CFSTR("Priority")))
        {
          v9 = CFDictionaryGetValue(theDict, CFSTR("Priority"));
          v10 = (const __CFNumber *)CFRetain(v9);
        }
        else
        {
          *(_DWORD *)valuePtr = 0;
          v10 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberIntType, valuePtr);
        }
        v12 = v10;
        if (CFDictionaryContainsKey(v8, CFSTR("Resources")))
        {
          v13 = (const __CFArray *)CFDictionaryGetValue(v8, CFSTR("Resources"));
          v14 = (const __CFNumber *)CFDictionaryGetValue(v8, CFSTR("Priority"));
          v15 = CFNumberCompare(v12, v14, 0);
          if (v15)
          {
            if (v15 == kCFCompareGreaterThan)
            {
              if (theDict)
                CFRetain(theDict);
              sub_19C29438C(valuePtr, theDict);
              v16 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)valuePtr, CFSTR("UseExistingModelFiles"));
              if (sub_19C29CB48(v16, 0))
              {
                v17 = (unint64_t)CFDictionaryGetValue(*(CFDictionaryRef *)valuePtr, CFSTR("Name"));
                if (!(v17 | (unint64_t)CFDictionaryGetValue(*(CFDictionaryRef *)valuePtr, CFSTR("URL")))
                  && CFArrayGetCount(v13) == 1)
                {
                  ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v13, 0);
                  v19 = CFDictionaryGetValue(ValueAtIndex, CFSTR("Name"));
                  v20 = CFDictionaryGetValue(ValueAtIndex, CFSTR("URL"));
                  if (v19)
                  {
                    v21 = v20;
                    if (v20)
                    {
                      v22 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
                      MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, *(CFDictionaryRef *)valuePtr);
                      CFDictionarySetValue(MutableCopy, CFSTR("Name"), v19);
                      CFDictionarySetValue(MutableCopy, CFSTR("URL"), v21);
                      Copy = CFDictionaryCreateCopy(v22, MutableCopy);
                      sub_19C29438C(&v28, Copy);
                      v26 = v28;
                      v25 = *(const void **)valuePtr;
                      v28 = *(_QWORD *)valuePtr;
                      *(_QWORD *)valuePtr = v26;
                      if (v28)
                        CFRelease(v25);
                      if (MutableCopy)
                        CFRelease(MutableCopy);
                    }
                  }
                }
              }
              CFArrayRemoveAllValues(v13);
              CFArrayAppendValue(v13, *(const void **)valuePtr);
              CFDictionarySetValue(v8, CFSTR("Priority"), v12);
              if (*(_QWORD *)valuePtr)
                CFRelease(*(CFTypeRef *)valuePtr);
            }
          }
          else
          {
            CFArrayAppendValue(v13, theDict);
          }
        }
        else
        {
          v27 = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 1, MEMORY[0x1E0C9B378]);
          CFArrayAppendValue(v27, theDict);
          CFDictionarySetValue(v8, CFSTR("Resources"), v27);
          CFDictionarySetValue(v8, CFSTR("Priority"), v12);
          if (v27)
            CFRelease(v27);
        }
        if (v12)
          CFRelease(v12);
      }
    }
  }
  else
  {
    if (qword_1EDB97228 != -1)
      dispatch_once(&qword_1EDB97228, &unk_1E3D3ABD0);
    v11 = qword_1EDB97220;
    if (os_log_type_enabled((os_log_t)qword_1EDB97220, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)valuePtr = 138412290;
      *(_QWORD *)&valuePtr[4] = theDict;
      _os_log_error_impl(&dword_19C291000, v11, OS_LOG_TYPE_ERROR, "Malformed resource properties (missing resource type):\n%@", valuePtr, 0xCu);
    }
  }
}

void sub_19C348AB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, CFTypeRef cf)
{
  if (a2)
    sub_19C2CDAC8(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_19C348B90(uint64_t a1, CFTypeRef cf, int a3)
{
  const __CFDictionary *v6;
  CFNumberRef v7;
  int v8;
  const __CFDictionary *v9;
  CFNumberRef v10;
  const void *Value;
  const void *v12;
  const void *v13;
  const __CFArray *v14;
  CFIndex Count;
  CFIndex v16;
  CFArrayRef v17;
  CFIndex v18;
  unint64_t v19;
  const void *v20;
  std::__shared_weak_count *v21;
  _QWORD *v22;
  char *v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  unint64_t v27;
  const void *v28;
  std::__shared_weak_count *v29;
  _QWORD *v30;
  char *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  void *exception;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  CFNumberRef v40;
  std::__shared_weak_count *v41;
  CFArrayRef theArray;
  CFDictionaryRef valuePtr;
  CFTypeRef cfa;

  if (!cf)
  {
    cfa = 0;
    goto LABEL_46;
  }
  CFRetain(cf);
  sub_19C29438C(&cfa, cf);
  v6 = (const __CFDictionary *)cfa;
  if (!cfa)
  {
LABEL_46:
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD3154](exception, "Could not construct");
    goto LABEL_48;
  }
  LODWORD(valuePtr) = a3;
  v7 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  v40 = v7;
  if (!v7)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD3154](exception, "Could not construct");
LABEL_48:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v8 = CFDictionaryContainsKey(v6, v7);
  CFRelease(v7);
  if (!v8)
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    goto LABEL_42;
  }
  v9 = (const __CFDictionary *)cfa;
  if (!cfa)
  {
    v36 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD3154](v36, "Could not construct");
    goto LABEL_57;
  }
  LODWORD(theArray) = a3;
  v10 = CFNumberCreate(0, kCFNumberIntType, &theArray);
  v40 = v10;
  if (!v10)
  {
    v37 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD3154](v37, "Could not construct");
    __cxa_throw(v37, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  Value = CFDictionaryGetValue(v9, v10);
  CFRelease(v10);
  if (!Value)
  {
    v36 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD3154](v36, "Could not find item");
LABEL_57:
    __cxa_throw(v36, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  CFRetain(Value);
  sub_19C29438C(&valuePtr, Value);
  if (!valuePtr)
  {
    v38 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD3154](v38, "Could not construct");
    __cxa_throw(v38, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  if (!CFDictionaryContainsKey(valuePtr, CFSTR("Resources")))
    __assert_rtn("resources", "LMResourceLoader.cpp", 150, "resourceContainer->has_key(kResourcesKey)");
  if (!valuePtr)
  {
    v39 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD3154](v39, "Could not construct");
    goto LABEL_54;
  }
  v12 = CFDictionaryGetValue(valuePtr, CFSTR("Resources"));
  v13 = v12;
  if (!v12)
  {
    v39 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD3154](v39, "Could not find item");
LABEL_54:
    __cxa_throw(v39, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  CFRetain(v12);
  sub_19C31D164(&theArray, v13);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v14 = theArray;
  if (theArray)
  {
    Count = CFArrayGetCount(theArray);
    v16 = Count;
    v17 = theArray;
    if (theArray)
    {
      v18 = CFArrayGetCount(theArray);
      if (!v16)
      {
LABEL_38:
        if (theArray)
          CFRelease(theArray);
        goto LABEL_40;
      }
    }
    else
    {
      v18 = 0;
      if (!Count)
        goto LABEL_38;
    }
    if (v14 == v17)
    {
      v19 = 0;
      do
      {
        if (v19 == v18)
          break;
        v20 = sub_19C349184(v14, v19);
        v21 = (std::__shared_weak_count *)operator new(0x28uLL);
        v21->__shared_owners_ = 0;
        v21->__shared_weak_owners_ = 0;
        v21->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D39B70;
        v21[1].__shared_owners_ = v19;
        v21[1].__vftable = (std::__shared_weak_count_vtbl *)CFRetain(v20);
        v40 = (CFNumberRef)&v21[1];
        v41 = v21;
        v22 = *(_QWORD **)(a1 + 8);
        if ((unint64_t)v22 < *(_QWORD *)(a1 + 16))
        {
          *v22 = v21 + 1;
          v22[1] = v21;
          *(_QWORD *)(a1 + 8) = v22 + 2;
        }
        else
        {
          v23 = sub_19C326A20((char **)a1, (uint64_t)&v40);
          v24 = v41;
          *(_QWORD *)(a1 + 8) = v23;
          if (v24)
          {
            p_shared_owners = (unint64_t *)&v24->__shared_owners_;
            do
              v26 = __ldaxr(p_shared_owners);
            while (__stlxr(v26 - 1, p_shared_owners));
            if (!v26)
            {
              ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
              std::__shared_weak_count::__release_weak(v24);
            }
          }
        }
        ++v19;
      }
      while (v19 != v16);
    }
    else
    {
      v27 = 0;
      do
      {
        v28 = sub_19C349184(v14, v27);
        v29 = (std::__shared_weak_count *)operator new(0x28uLL);
        v29->__shared_owners_ = 0;
        v29->__shared_weak_owners_ = 0;
        v29->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D39B70;
        v29[1].__shared_owners_ = v27;
        v29[1].__vftable = (std::__shared_weak_count_vtbl *)CFRetain(v28);
        v40 = (CFNumberRef)&v29[1];
        v41 = v29;
        v30 = *(_QWORD **)(a1 + 8);
        if ((unint64_t)v30 < *(_QWORD *)(a1 + 16))
        {
          *v30 = v29 + 1;
          v30[1] = v29;
          *(_QWORD *)(a1 + 8) = v30 + 2;
        }
        else
        {
          v31 = sub_19C326A20((char **)a1, (uint64_t)&v40);
          v32 = v41;
          *(_QWORD *)(a1 + 8) = v31;
          if (v32)
          {
            v33 = (unint64_t *)&v32->__shared_owners_;
            do
              v34 = __ldaxr(v33);
            while (__stlxr(v34 - 1, v33));
            if (!v34)
            {
              ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
              std::__shared_weak_count::__release_weak(v32);
            }
          }
        }
        ++v27;
      }
      while (v27 != v16);
    }
    goto LABEL_38;
  }
LABEL_40:
  if (valuePtr)
    CFRelease(valuePtr);
LABEL_42:
  if (cfa)
    CFRelease(cfa);
}

void sub_19C3490DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  const void *v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, const void *);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  sub_19C349204((const void **)va);
  sub_19C2E5608((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_19C3490EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, const void *a14)
{
  void *v14;

  __cxa_free_exception(v14);
  sub_19C2E5608(&a14);
  _Unwind_Resume(a1);
}

void sub_19C349100()
{
  uint64_t v0;

  sub_19C2E5608(&v0);
  JUMPOUT(0x19C349174);
}

void sub_19C349108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_19C2E5608((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19C349110()
{
  JUMPOUT(0x19C34915CLL);
}

void sub_19C34911C()
{
  JUMPOUT(0x19C34915CLL);
}

void sub_19C349124(uint64_t a1, ...)
{
  void **v1;
  uint64_t v2;
  va_list va;
  uint64_t v4;
  va_list va1;

  va_start(va1, a1);
  va_start(va, a1);
  v2 = va_arg(va1, _QWORD);
  v4 = va_arg(va1, _QWORD);
  sub_19C2B43C8((uint64_t)va);
  sub_19C2F5AA8(v1);
  sub_19C31D650((const void **)va1);
  JUMPOUT(0x19C34916CLL);
}

const void *sub_19C349184(const __CFArray *a1, unint64_t a2)
{
  const void *result;

  if (CFArrayGetCount(a1) <= a2 || (result = CFArrayGetValueAtIndex(a1, a2)) == 0)
  {
    __cxa_allocate_exception(0x10uLL);
    sub_19C31D944();
  }
  return result;
}

void sub_19C3491D0()
{
  void *v0;

  __cxa_throw(v0, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
}

void sub_19C3491E8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

const void **sub_19C349204(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

void sub_19C349234(int a1, uint64_t a2)
{
  const __CFString *v4;
  const __CFString *Value;
  const __CFString *v6;
  __CFString *Mutable;
  __CFString *v8;
  const __CFString *v9;
  const __CFString *v10;
  const __CFURL *v11;

  v4 = (const __CFString *)*MEMORY[0x1E0C9B088];
  Value = (const __CFString *)CFLocaleGetValue(*(CFLocaleRef *)(a2 + 8), (CFLocaleKey)*MEMORY[0x1E0C9B088]);
  v6 = (const __CFString *)CFLocaleGetValue(*(CFLocaleRef *)(a2 + 8), (CFLocaleKey)*MEMORY[0x1E0C9B090]);
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  v8 = Mutable;
  if (*(_BYTE *)(a2 + 17))
    CFStringAppend(Mutable, CFSTR("siri-"));
  CFStringAppend(v8, Value);
  if (CFStringCompare(Value, CFSTR("mul"), 0) == kCFCompareEqualTo)
  {
    v9 = (const __CFString *)CFLocaleGetValue(*(CFLocaleRef *)(a2 + 8), (CFLocaleKey)*MEMORY[0x1E0C9B060]);
    if (v9)
    {
      CFStringAppend(v8, CFSTR("_"));
      CFStringAppend(v8, v9);
    }
  }
  if (v6)
  {
    CFStringAppend(v8, CFSTR("_"));
    CFStringAppend(v8, v6);
  }
  CFStringAppend(v8, CFSTR("-dynamic.lm"));
  v11 = CFURLCreateCopyAppendingPathComponent(0, *(CFURLRef *)(a2 + 24), v8, 1u);
  v10 = (const __CFString *)CFLocaleGetValue(*(CFLocaleRef *)(a2 + 8), v4);
  CFLocaleCreate(0, v10);
  sub_19C3A30BC(a1, v11);
}

void sub_19C3493A4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  const void *v20;
  const void *v21;
  const void *v22;

  if (v21)
    CFRelease(v21);
  if (v22)
    CFRelease(v22);
  if (v20)
    CFRelease(v20);
}

void sub_19C3493EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C339C1C((const void **)va);
  _Unwind_Resume(a1);
}

void sub_19C349428(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_19C349234((int)&v2, a2);
}

void sub_19C349790(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int16 a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  sub_19C2B43C8((uint64_t)&a11);
  _Block_object_dispose(&a23, 8);
  if (a32 < 0)
    operator delete(__p);
  sub_19C32AE20(&a10);
  _Unwind_Resume(a1);
}

int *sub_19C3497D0(int *a1, const __CFString *a2)
{
  int *v3;
  const __CFArray *ArrayBySeparatingStrings;
  CFIndex Count;
  CFIndex v6;
  uint64_t v7;
  const __CFString *ValueAtIndex;
  int *v9;
  char buffer[16];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  a1[1] = 0;
  v3 = a1 + 1;
  *a1 = 0;
  ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings(0, a2, CFSTR("."));
  Count = CFArrayGetCount(ArrayBySeparatingStrings);
  if (Count >= 1)
  {
    v6 = 0;
    if (Count == 1)
      v7 = 1;
    else
      v7 = 2;
    do
    {
      ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(ArrayBySeparatingStrings, v6);
      CFStringGetCString(ValueAtIndex, buffer, 16, 0x8000100u);
      v9 = a1;
      if (v6)
      {
        if (v6 != 1)
          goto LABEL_6;
        v9 = v3;
      }
      *v9 = atoi(buffer);
LABEL_6:
      ++v6;
    }
    while (v7 != v6);
  }
  CFRelease(ArrayBySeparatingStrings);
  return a1;
}

void sub_19C3498C8(_QWORD *a1, __n128 **a2, int a3)
{
  __n128 *v3;
  __n128 *v4;
  __n128 *v6;
  CFDictionaryRef *v7;
  const __CFNumber *Value;
  __n128 *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  __n128 *v13;
  const char *v14;
  const char *v15;
  const void *v16;
  __CFBundle *v17;
  const __CFDictionary *InfoDictionary;
  const __CFArray *v19;
  const __CFDictionary *ValueAtIndex;
  __CFDictionary *v21;
  const __CFURL *v22;
  const __CFDictionary *v23;
  const __CFURL *v24;
  _QWORD *v25;
  const __CFURL *v26;
  _QWORD *v27;
  const __CFDictionary *v28;
  const __CFArray *v29;
  CFIndex v30;
  const __CFDictionary *v31;
  const __CFNumber *v32;
  __CFDictionary *v33;
  _QWORD *v34;
  const __CFURL *v35;
  _QWORD *v36;
  __n128 *v37;
  void *v38;
  std::__shared_weak_count *v39;
  unint64_t *p_shared_owners;
  unint64_t v41;
  __n128 *v42;
  __n128 *v43;
  __n128 *v44;
  CFDictionaryRef *v45;
  const __CFNumber *v46;
  __n128 *v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  __n128 *v51;
  __n128 *v52;
  __n128 *v53;
  CFDictionaryRef *v54;
  const __CFNumber *v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  __n128 *v59;
  const __CFURL *v60;
  _QWORD *v61;
  __n128 *v62;
  __n128 *v63;
  void *v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  __n128 *v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  __n128 *v72;
  __n128 *v73;
  __n128 *v74;
  CFDictionaryRef *v75;
  const __CFNumber *v76;
  unint64_t v77;
  unint64_t *v78;
  unint64_t v79;
  const __CFURL *v80;
  _QWORD *v81;
  int v82;
  int v83;
  _QWORD *exception;
  _QWORD *v85;
  _QWORD *v86;
  _QWORD *v87;
  const __CFAllocator *allocator;
  CFURLRef anURL;
  void *__p;
  __n128 *v92;
  unint64_t v93;
  __int128 valuePtr;
  unint64_t v95;
  uint8_t v96[16];
  __int128 buf;
  unint64_t v98;
  uint64_t v99;

  v99 = *MEMORY[0x1E0C80C00];
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v3 = *a2;
  v4 = a2[1];
  __p = 0;
  v92 = 0;
  v93 = 0;
  if (v3 != v4)
  {
    do
    {
      v7 = (CFDictionaryRef *)v3->n128_u64[0];
      LODWORD(valuePtr) = 0;
      Value = (const __CFNumber *)CFDictionaryGetValue(*v7, CFSTR("Type"));
      CFNumberGetValue(Value, kCFNumberIntType, &valuePtr);
      if ((_DWORD)valuePtr == a3)
      {
        v9 = v92;
        if ((unint64_t)v92 >= v93)
        {
          v6 = sub_19C328140((uint64_t)&__p, *v3);
        }
        else
        {
          v92->n128_u64[0] = v3->n128_u64[0];
          v10 = v3->n128_u64[1];
          v9->n128_u64[1] = v10;
          if (v10)
          {
            v11 = (unint64_t *)(v10 + 8);
            do
              v12 = __ldxr(v11);
            while (__stxr(v12 + 1, v11));
          }
          v6 = v9 + 1;
        }
        v92 = v6;
      }
      ++v3;
    }
    while (v3 != v4);
    v13 = (__n128 *)__p;
    if (__p != v92)
    {
      allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v14 = "d && \"An Info.plist file was unable to be read from the bundle\"";
      v15 = "_getInfoDictionary";
      v16 = CFDictionaryGetValue(**(CFDictionaryRef **)__p, CFSTR("URL"));
      *(_QWORD *)v96 = CFRetain(v16);
      v17 = CFBundleCreate(allocator, *(CFURLRef *)v96);
      *(_QWORD *)&v96[8] = v17;
      if (sub_19C3A2A20(v17))
      {
        if (sub_19C3A2A20(v17))
        {
          InfoDictionary = CFBundleGetInfoDictionary(v17);
          if (InfoDictionary)
          {
            v19 = (const __CFArray *)CFDictionaryGetValue(InfoDictionary, CFSTR("Contents"));
            if (v19)
            {
              ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v19, 0);
              v21 = sub_19C3A2CFC((CFURLRef *)v96, ValueAtIndex);
              *(_QWORD *)&valuePtr = v21;
              v22 = (const __CFURL *)operator new();
              *((_QWORD *)v22 + 1) = 0;
              v23 = (const __CFDictionary *)CFRetain(v21);
              *(_QWORD *)v22 = v23;
              anURL = v22;
              if (v21)
              {
                CFRelease(v21);
                v23 = *(const __CFDictionary **)v22;
              }
              v24 = (const __CFURL *)CFDictionaryGetValue(v23, CFSTR("URL"));
              v25 = (_QWORD *)operator new();
              sub_19C3D733C(v25, v24);
            }
            v82 = 229;
            v15 = "_getContents";
            v14 = "(contents != 0) && \"There should files contained within the blocklist bundle\"";
          }
          else
          {
            v82 = 218;
          }
          __assert_rtn(v15, "BlocklistBundle.cpp", v82, v14);
        }
        exception = __cxa_allocate_exception(0x20uLL);
        sub_19C2A6D48(&valuePtr, "Malformed legacy blocklist bundle configuration: cannot load the legacy blocklist resource");
        sub_19C31237C(exception, &valuePtr);
        __cxa_throw(exception, (struct type_info *)&unk_1E3D32968, (void (*)(void *))sub_19C3123E4);
      }
      if (sub_19C3A2BF0(v17))
      {
        sub_19C3A2EA0(&anURL, (CFURLRef *)v96);
        v26 = (const __CFURL *)CFDictionaryGetValue(*(CFDictionaryRef *)anURL, CFSTR("URL"));
        v27 = (_QWORD *)operator new();
        sub_19C3D733C(v27, v26);
      }
      sub_19C3A2EA0(&anURL, (CFURLRef *)v96);
      if ((sub_19C3A2AE4(v17) & 1) == 0)
      {
        v85 = __cxa_allocate_exception(0x20uLL);
        sub_19C2A6D48(&valuePtr, "Malformed lemmatized blocklist bundle configuration: cannot load the blocklist id map resource");
        sub_19C31237C(v85, &valuePtr);
        __cxa_throw(v85, (struct type_info *)&unk_1E3D32968, (void (*)(void *))sub_19C3123E4);
      }
      v28 = CFBundleGetInfoDictionary(v17);
      if (v28)
      {
        v29 = (const __CFArray *)CFDictionaryGetValue(v28, CFSTR("Contents"));
        if (v29)
        {
          v30 = 0;
          do
          {
            if (v30 >= CFArrayGetCount(v29))
              goto LABEL_30;
            v31 = (const __CFDictionary *)CFArrayGetValueAtIndex(v29, v30);
            LODWORD(valuePtr) = 0;
            v32 = (const __CFNumber *)CFDictionaryGetValue(v31, CFSTR("Type"));
            CFNumberGetValue(v32, kCFNumberIntType, &valuePtr);
            ++v30;
          }
          while ((_DWORD)valuePtr != 42);
          v33 = sub_19C3A2CFC((CFURLRef *)v96, v31);
          *(_QWORD *)&valuePtr = v33;
          v34 = (_QWORD *)operator new();
          v34[1] = 0;
          *v34 = CFRetain(v33);
          if (v33)
            CFRelease(v33);
LABEL_30:
          v35 = (const __CFURL *)CFDictionaryGetValue(*(CFDictionaryRef *)anURL, CFSTR("URL"));
          v36 = (_QWORD *)operator new();
          sub_19C3D733C(v36, v35);
        }
        v83 = 229;
        v15 = "_getContents";
        v14 = "(contents != 0) && \"There should files contained within the blocklist bundle\"";
      }
      else
      {
        v83 = 218;
      }
      __assert_rtn(v15, "BlocklistBundle.cpp", v83, v14);
    }
    if (__p)
    {
      v37 = v92;
      v38 = __p;
      if (v92 != __p)
      {
        do
        {
          v39 = (std::__shared_weak_count *)v37[-1].n128_u64[1];
          if (v39)
          {
            p_shared_owners = (unint64_t *)&v39->__shared_owners_;
            do
              v41 = __ldaxr(p_shared_owners);
            while (__stlxr(v41 - 1, p_shared_owners));
            if (!v41)
            {
              ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
              std::__shared_weak_count::__release_weak(v39);
            }
          }
          --v37;
        }
        while (v37 != v13);
        v38 = __p;
      }
      v92 = v13;
      operator delete(v38);
    }
  }
  v42 = *a2;
  v43 = a2[1];
  v92 = 0;
  v93 = 0;
  __p = 0;
  if (v42 == v43)
  {
    v59 = 0;
    v53 = 0;
    buf = 0uLL;
    v98 = 0;
  }
  else
  {
    do
    {
      v45 = (CFDictionaryRef *)v42->n128_u64[0];
      LODWORD(valuePtr) = 0;
      v46 = (const __CFNumber *)CFDictionaryGetValue(*v45, CFSTR("Type"));
      CFNumberGetValue(v46, kCFNumberIntType, &valuePtr);
      if ((_DWORD)valuePtr == 41)
      {
        v47 = v92;
        if ((unint64_t)v92 >= v93)
        {
          v44 = sub_19C328140((uint64_t)&__p, *v42);
        }
        else
        {
          v92->n128_u64[0] = v42->n128_u64[0];
          v48 = v42->n128_u64[1];
          v47->n128_u64[1] = v48;
          if (v48)
          {
            v49 = (unint64_t *)(v48 + 8);
            do
              v50 = __ldxr(v49);
            while (__stxr(v50 + 1, v49));
          }
          v44 = v47 + 1;
        }
        v92 = v44;
      }
      ++v42;
    }
    while (v42 != v43);
    v51 = *a2;
    v52 = a2[1];
    buf = 0uLL;
    v98 = 0;
    if (v51 == v52)
    {
      v59 = 0;
      v53 = 0;
    }
    else
    {
      v53 = 0;
      do
      {
        v54 = (CFDictionaryRef *)v51->n128_u64[0];
        LODWORD(valuePtr) = 0;
        v55 = (const __CFNumber *)CFDictionaryGetValue(*v54, CFSTR("Type"));
        CFNumberGetValue(v55, kCFNumberIntType, &valuePtr);
        if ((_DWORD)valuePtr == 42)
        {
          if ((unint64_t)v53 >= v98)
          {
            v53 = sub_19C328140((uint64_t)&buf, *v51);
          }
          else
          {
            v53->n128_u64[0] = v51->n128_u64[0];
            v56 = v51->n128_u64[1];
            v53->n128_u64[1] = v56;
            if (v56)
            {
              v57 = (unint64_t *)(v56 + 8);
              do
                v58 = __ldxr(v57);
              while (__stxr(v58 + 1, v57));
            }
            ++v53;
          }
          *((_QWORD *)&buf + 1) = v53;
        }
        ++v51;
      }
      while (v51 != v52);
      v59 = (__n128 *)buf;
    }
  }
  if ((char *)v92 - (_BYTE *)__p != (char *)v53 - (char *)v59)
  {
    v86 = __cxa_allocate_exception(0x20uLL);
    sub_19C2A6D48(&valuePtr, "Malformed language model configuration: mismatched lemmatized blocklist resources");
    sub_19C31237C(v86, &valuePtr);
    __cxa_throw(v86, (struct type_info *)&unk_1E3D32968, (void (*)(void *))sub_19C3123E4);
  }
  if ((unint64_t)((char *)v92 - (_BYTE *)__p) >= 0x11)
  {
    v87 = __cxa_allocate_exception(0x20uLL);
    sub_19C2A6D48(&valuePtr, "Malformed language model configuration: too many lemmatized blocklist resources");
    sub_19C31237C(v87, &valuePtr);
    __cxa_throw(v87, (struct type_info *)&unk_1E3D32968, (void (*)(void *))sub_19C3123E4);
  }
  if (__p != v92)
  {
    v60 = (const __CFURL *)CFDictionaryGetValue(**(CFDictionaryRef **)__p, CFSTR("URL"));
    v61 = (_QWORD *)operator new();
    sub_19C3D733C(v61, v60);
  }
  if (!v59)
  {
    v62 = (__n128 *)__p;
    if (!__p)
      goto LABEL_95;
    goto LABEL_75;
  }
  v68 = v59;
  if (v53 != v59)
  {
    do
    {
      v69 = (std::__shared_weak_count *)v53[-1].n128_u64[1];
      if (v69)
      {
        v70 = (unint64_t *)&v69->__shared_owners_;
        do
          v71 = __ldaxr(v70);
        while (__stlxr(v71 - 1, v70));
        if (!v71)
        {
          ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
          std::__shared_weak_count::__release_weak(v69);
        }
      }
      --v53;
    }
    while (v53 != v59);
    v68 = (__n128 *)buf;
  }
  *((_QWORD *)&buf + 1) = v59;
  operator delete(v68);
  v62 = (__n128 *)__p;
  if (__p)
  {
LABEL_75:
    v63 = v92;
    v64 = v62;
    if (v92 != v62)
    {
      do
      {
        v65 = (std::__shared_weak_count *)v63[-1].n128_u64[1];
        if (v65)
        {
          v66 = (unint64_t *)&v65->__shared_owners_;
          do
            v67 = __ldaxr(v66);
          while (__stlxr(v67 - 1, v66));
          if (!v67)
          {
            ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
            std::__shared_weak_count::__release_weak(v65);
          }
        }
        --v63;
      }
      while (v63 != v62);
      v64 = __p;
    }
    v92 = v62;
    operator delete(v64);
  }
LABEL_95:
  v72 = *a2;
  v73 = a2[1];
  v95 = 0;
  valuePtr = 0uLL;
  if (v72 != v73)
  {
    v74 = 0;
    do
    {
      v75 = (CFDictionaryRef *)v72->n128_u64[0];
      LODWORD(__p) = 0;
      v76 = (const __CFNumber *)CFDictionaryGetValue(*v75, CFSTR("Type"));
      CFNumberGetValue(v76, kCFNumberIntType, &__p);
      if ((_DWORD)__p == 10)
      {
        if ((unint64_t)v74 >= v95)
        {
          v74 = sub_19C328140((uint64_t)&valuePtr, *v72);
        }
        else
        {
          v74->n128_u64[0] = v72->n128_u64[0];
          v77 = v72->n128_u64[1];
          v74->n128_u64[1] = v77;
          if (v77)
          {
            v78 = (unint64_t *)(v77 + 8);
            do
              v79 = __ldxr(v78);
            while (__stxr(v79 + 1, v78));
          }
          ++v74;
        }
        *((_QWORD *)&valuePtr + 1) = v74;
      }
      ++v72;
    }
    while (v72 != v73);
    if ((__n128 *)valuePtr != v74)
    {
      v80 = (const __CFURL *)CFDictionaryGetValue(**(CFDictionaryRef **)valuePtr, CFSTR("URL"));
      v81 = (_QWORD *)operator new();
      sub_19C3D733C(v81, v80);
    }
    if (v74)
    {
      *((_QWORD *)&valuePtr + 1) = v74;
      operator delete(v74);
    }
  }
}

void sub_19C34AEC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, _QWORD *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,const void *a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  uint64_t v32;
  void *v33;
  uint64_t v34;

  __cxa_free_exception(v33);
  sub_19C2E5670((const void **)&a22);
  sub_19C32BC18(&a23);
  (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
  sub_19C2F5AA8((void **)(v34 - 128));
  sub_19C2F5AA8((void **)&a24);
  sub_19C319C30(&a17);
  sub_19C319C30(a11);
  _Unwind_Resume(a1);
}

CFTypeRef **sub_19C34B3D0(CFTypeRef **a1)
{
  CFTypeRef *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*v2)
      CFRelease(*v2);
    MEMORY[0x1A1AD355C](v2, 0x1060C40C2E02434);
  }
  return a1;
}

uint64_t **sub_19C34B424(uint64_t **a1, _QWORD *a2, uint64_t *a3, uint64_t a4)
{
  _QWORD *v5;
  unint64_t v6;
  uint64_t i;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 *v12;
  __int128 v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  void **v17;
  void *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  int v22;
  _QWORD *v23;
  void *v24;
  size_t v25;
  int v26;
  int v27;
  _OWORD *v28;
  uint64_t *v29;
  uint64_t v31;
  unint64_t v33;
  void *__dst[2];
  uint64_t v37;
  __int128 __p;
  uint64_t v39;

  a1[1] = 0;
  v5 = a1 + 1;
  a1[2] = 0;
  a1[4] = 0;
  *a1 = (uint64_t *)(a1 + 1);
  a1[3] = (uint64_t *)(a1 + 4);
  v31 = (uint64_t)(a1 + 3);
  a1[5] = 0;
  v6 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3) < v6)
    v6 = 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3);
  v33 = v6;
  if (v6)
  {
    for (i = 0; i != v33; ++i)
    {
      v8 = 24 * i;
      v9 = *a2 + 24 * i;
      v10 = *a3;
      if (*(char *)(v9 + 23) < 0)
      {
        sub_19C2B5238(__dst, *(void **)v9, *(_QWORD *)(v9 + 8));
      }
      else
      {
        v11 = *(_OWORD *)v9;
        v37 = *(_QWORD *)(v9 + 16);
        *(_OWORD *)__dst = v11;
      }
      v12 = (__int128 *)(v10 + v8);
      if (*(char *)(v10 + v8 + 23) < 0)
      {
        sub_19C2B5238(&__p, *(void **)v12, *((_QWORD *)v12 + 1));
      }
      else
      {
        v13 = *v12;
        v39 = *((_QWORD *)v12 + 2);
        __p = v13;
      }
      v14 = (_QWORD *)*v5;
      v15 = v5;
      v16 = v5;
      if (!*v5)
        goto LABEL_39;
      if (v37 >= 0)
        v17 = __dst;
      else
        v17 = (void **)__dst[0];
      if (v37 >= 0)
        v18 = (void *)HIBYTE(v37);
      else
        v18 = __dst[1];
      do
      {
        while (1)
        {
          v16 = v14;
          v21 = (_QWORD *)v14[4];
          v19 = v14 + 4;
          v20 = v21;
          v22 = *((char *)v19 + 23);
          v23 = v22 >= 0 ? v19 : v20;
          v24 = v22 >= 0 ? (void *)*((unsigned __int8 *)v19 + 23) : (void *)v19[1];
          v25 = (size_t)(v24 >= v18 ? v18 : v24);
          v26 = memcmp(v17, v23, v25);
          if (v26)
            break;
          if (v18 >= v24)
            goto LABEL_33;
LABEL_19:
          v14 = (_QWORD *)*v16;
          v15 = v16;
          if (!*v16)
            goto LABEL_39;
        }
        if (v26 < 0)
          goto LABEL_19;
LABEL_33:
        v27 = memcmp(v23, v17, v25);
        if (v27)
        {
          if ((v27 & 0x80000000) == 0)
            goto LABEL_42;
        }
        else if (v24 >= v18)
        {
          goto LABEL_42;
        }
        v14 = (_QWORD *)v16[1];
      }
      while (v14);
      v15 = v16 + 1;
LABEL_39:
      v28 = operator new(0x50uLL);
      v28[2] = *(_OWORD *)__dst;
      *((_QWORD *)v28 + 6) = v37;
      __dst[1] = 0;
      v37 = 0;
      __dst[0] = 0;
      *(_OWORD *)((char *)v28 + 56) = __p;
      *((_QWORD *)v28 + 9) = v39;
      __p = 0uLL;
      v39 = 0;
      *(_QWORD *)v28 = 0;
      *((_QWORD *)v28 + 1) = 0;
      *((_QWORD *)v28 + 2) = v16;
      *v15 = v28;
      v29 = (uint64_t *)**a1;
      if (v29)
      {
        *a1 = v29;
        v28 = (_OWORD *)*v15;
      }
      sub_19C2A2310(a1[1], (uint64_t *)v28);
      a1[2] = (uint64_t *)((char *)a1[2] + 1);
LABEL_42:
      if (SHIBYTE(v39) < 0)
      {
        operator delete((void *)__p);
        if (SHIBYTE(v37) < 0)
          goto LABEL_46;
      }
      else if (SHIBYTE(v37) < 0)
      {
LABEL_46:
        operator delete(__dst[0]);
      }
    }
  }
  if (v31 != a4)
    sub_19C336F24(v31, *(_QWORD **)a4, (_QWORD *)(a4 + 8));
  return a1;
}

void sub_19C34B6D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t *v26;

  sub_19C2E457C(*a9);
  sub_19C2E457C(*v26);
  _Unwind_Resume(a1);
}

void sub_19C34B724(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
}

void sub_19C34B738(int a1@<W2>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = a1;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 0;
}

uint64_t sub_19C34B748()
{
  return 0;
}

unint64_t sub_19C34B750(uint64_t a1, uint64_t a2, int *a3)
{
  return (*a3 & 0xFFFFFFFFFFFFFFFCLL) + *(_QWORD *)(a2 + 8);
}

void sub_19C34B768()
{
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C34B77C(uint64_t a1, uint64_t a2, int *a3, unsigned int a4)
{
  uint64_t v7;

  if (qword_1EE41C1B0 != -1)
    dispatch_once(&qword_1EE41C1B0, &unk_1E3D3A5F0);
  v7 = *(_QWORD *)(qword_1EE41C1B8
                 + 8 * (*(_DWORD *)(*(_QWORD *)(a2 + 8) + (*a3 & 0xFFFFFFFFFFFFFFFCLL) + 4 * a4 + 4) & 3));
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 32))(v7, a2);
}

void sub_19C34B80C(uint64_t a1, uint64_t a2, int *a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7)
{
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t, uint64_t, uint64_t, _BYTE *);
  void *v27;
  uint64_t v28;
  uint64_t *v29;
  _QWORD v30[3];
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  _BYTE v34[8];

  v12 = *(_QWORD *)(a2 + 8);
  v13 = *a3 & 0xFFFFFFFFFFFFFFFCLL;
  v31 = 0;
  v32 = &v31;
  v33 = 0x2000000000;
  v34[0] = 0;
  v14 = *(unsigned int *)(v12 + v13);
  if ((_DWORD)v14)
  {
    (*(void (**)(uint64_t, uint64_t, unint64_t, _BYTE *))(a7 + 16))(a7, v14, a4, v34);
    v15 = *((_BYTE *)v32 + 24) != 0;
  }
  else
  {
    v15 = 0;
  }
  if (a5 - 1 >= a4 && !v15)
  {
    if (qword_1EE41C1B0 != -1)
      dispatch_once(&qword_1EE41C1B0, &unk_1E3D3A5F0);
    if (!*((_BYTE *)v32 + 24))
    {
      v16 = qword_1EE41C1B8;
      if (a6)
      {
        v17 = 0;
        v18 = v13 + v12 + 4;
        do
        {
          v19 = *(_QWORD *)(v16 + 8 * (*(_DWORD *)(v18 + 4 * v17) & 3));
          (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v19 + 32))(v30, v19, a2);
          *(_BYTE *)(a6 + a4) = v17;
          v24 = MEMORY[0x1E0C809B0];
          v25 = 0x40000000;
          v26 = sub_19C34BAB4;
          v27 = &unk_1E3D3A618;
          v28 = a7;
          v29 = &v31;
          v20 = *(_QWORD *)(v16 + 8 * (v30[0] & 3));
          (*(void (**)(uint64_t, uint64_t, _QWORD *, unint64_t, uint64_t, unint64_t, uint64_t *))(*(_QWORD *)v20 + 24))(v20, a2, v30, a4 + 1, a5, a6, &v24);
          if (*((_BYTE *)v32 + 24))
            break;
          v21 = v17++ >= 0xFF;
        }
        while (!v21);
      }
      else
      {
        do
        {
          v22 = *(_QWORD *)(v16 + 8 * (*(_DWORD *)(v13 + v12 + 4 + 4 * a6) & 3));
          (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v22 + 32))(v30, v22, a2);
          v24 = MEMORY[0x1E0C809B0];
          v25 = 0x40000000;
          v26 = sub_19C34BAB4;
          v27 = &unk_1E3D3A618;
          v28 = a7;
          v29 = &v31;
          v23 = *(_QWORD *)(v16 + 8 * (v30[0] & 3));
          (*(void (**)(uint64_t, uint64_t, _QWORD *, unint64_t, uint64_t, _QWORD, uint64_t *))(*(_QWORD *)v23 + 24))(v23, a2, v30, a4 + 1, a5, 0, &v24);
          if (*((_BYTE *)v32 + 24))
            break;
          v21 = a6++ >= 0xFF;
        }
        while (!v21);
      }
    }
  }
  _Block_object_dispose(&v31, 8);
}

void sub_19C34BA80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_19C34BAA0(uint64_t a1, uint64_t a2, int *a3)
{
  return *(unsigned int *)(*(_QWORD *)(a2 + 8) + (*a3 & 0xFFFFFFFFFFFFFFFCLL));
}

uint64_t sub_19C34BAB4(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  *a4 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
  return result;
}

_QWORD *sub_19C34BAFC()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *result;

  qword_1EE41C1B8 = operator new();
  v0 = (_QWORD *)operator new();
  *v0 = &off_1E3D36278;
  *(_QWORD *)qword_1EE41C1B8 = v0;
  v1 = (_QWORD *)operator new();
  *v1 = &off_1E3D36A70;
  *(_QWORD *)(qword_1EE41C1B8 + 24) = v1;
  v2 = (_QWORD *)operator new();
  *v2 = &off_1E3D36F50;
  *(_QWORD *)(qword_1EE41C1B8 + 16) = v2;
  result = (_QWORD *)operator new();
  *result = &off_1E3D36C88;
  *(_QWORD *)(qword_1EE41C1B8 + 8) = result;
  return result;
}

void sub_19C34BBE8()
{
  JUMPOUT(0x1A1AD355CLL);
}

void sub_19C34BBFC(uint64_t a1@<X1>, int *a2@<X2>, char a3@<W3>, uint64_t a4@<X8>)
{
  unsigned __int8 *v5;
  uint64_t v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  uint64_t v10;
  size_t v11;
  size_t v12;
  unsigned __int8 *v13;
  unint64_t v14;
  size_t v15;
  int v16;
  _OWORD v17[16];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v5 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
  if (!v5)
  {
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_BYTE *)(a4 + 16) = 0;
    return;
  }
  v7 = *a2;
  v8 = (unsigned __int8 *)(*(_QWORD *)(a1 + 16) + (v7 & 0xFFFFFFFFFFFFFFFCLL));
  v9 = v8 + 4;
  memset(v17, 0, sizeof(v17));
  if (v5 > v8 + 4)
  {
    v10 = *v5;
    v11 = *((unsigned __int8 *)a2 + 16);
    memcpy(v17, v5 + 1, v11);
    v12 = v11 + 1;
    *((_BYTE *)v17 + v11) = a3;
    if (v11 >= v10)
      v13 = &v5[v10 + 5];
    else
      v13 = v5;
LABEL_11:
    v14 = (unint64_t)&v9[*(unsigned int *)v8];
    while ((unint64_t)v13 < v14)
    {
      v15 = *v13;
      if (v12 <= v15)
      {
        v16 = memcmp(v13 + 1, v17, v12);
        if (v16 > 0)
          goto LABEL_8;
        if (!v16)
          goto LABEL_9;
      }
      v13 += v15 + 5;
    }
    goto LABEL_8;
  }
  if (v5 == v9)
  {
    v13 = v8 + 8;
    LOBYTE(v17[0]) = a3;
    v12 = 1;
    goto LABEL_11;
  }
LABEL_8:
  LODWORD(v7) = 0;
  v13 = 0;
  LOBYTE(v12) = 0;
LABEL_9:
  *(_DWORD *)a4 = v7;
  *(_QWORD *)(a4 + 8) = v13;
  *(_BYTE *)(a4 + 16) = v12;
}

void sub_19C34BD7C(uint64_t a1, uint64_t a2, int *a3, unint64_t a4, size_t a5, uint64_t a6, uint64_t a7)
{
  unsigned int *v7;
  BOOL v13;
  unsigned int *v14;
  unsigned int *v15;
  uint64_t v16;
  unsigned __int8 *v17;
  uint64_t v18;
  size_t v19;
  unsigned __int8 *v20;
  unint64_t v21;
  void *v22;
  char *v23;
  uint64_t v24;
  unsigned int v25;
  size_t v26;
  int v27;
  int v28;
  int v29;
  char *v30;
  uint64_t v31;
  unsigned int v32;
  size_t v33;
  int v34;
  char *v35;
  uint64_t v36;
  unsigned int v37;
  size_t v38;
  int v40;
  int v41;
  uint64_t v42;
  int v43;
  char *v44;
  uint64_t v45;
  unsigned int v46;
  int v47;
  uint64_t v48;
  unsigned __int8 v49;
  _OWORD __dst[16];
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v7 = (unsigned int *)*((_QWORD *)a3 + 1);
  if (!v7)
    return;
  v13 = 0;
  v49 = 0;
  v14 = (unsigned int *)(*(_QWORD *)(a2 + 16) + (*a3 & 0xFFFFFFFFFFFFFFFCLL));
  v15 = v14 + 1;
  if (v7 == v14 + 1)
  {
    v16 = *v7;
    if ((_DWORD)v16)
    {
      (*(void (**)(uint64_t, uint64_t, unint64_t, unsigned __int8 *))(a7 + 16))(a7, v16, a4, &v49);
      v13 = v49 != 0;
    }
    else
    {
      v13 = 0;
    }
  }
  if (a5 - 1 < a4 || v13)
    return;
  memset(__dst, 0, sizeof(__dst));
  v17 = (unsigned __int8 *)*((_QWORD *)a3 + 1);
  if (v17 <= (unsigned __int8 *)v15)
  {
    v19 = 0;
    v20 = (unsigned __int8 *)(v14 + 2);
    v21 = a4;
    if (a6)
      goto LABEL_13;
  }
  else
  {
    v18 = *v17;
    v19 = *((unsigned __int8 *)a3 + 16);
    memcpy(__dst, v17 + 1, v19);
    if (v19 <= v18)
      v20 = v17;
    else
      v20 = &v17[v18 + 5];
    v21 = a4 - v19;
    if (a6)
    {
LABEL_13:
      v22 = (void *)(a6 + a4);
      if (a5)
      {
        do
        {
          if (v20 >= (unsigned __int8 *)v15 + *v14)
            break;
          v25 = *v20;
          v23 = (char *)(v20 + 1);
          v24 = v25;
          v26 = v25 - v19;
          if (v25 < v19 || v26 > a5)
            goto LABEL_19;
          v27 = memcmp(v23, __dst, v19);
          if (v27 > 0)
            return;
          if (v27)
          {
LABEL_19:
            v28 = 0;
          }
          else
          {
            v28 = *(_DWORD *)&v23[v24];
            if (v28)
            {
              memcpy(v22, &v23[v19], v26);
              (*(void (**)(uint64_t, _QWORD, unint64_t, unsigned __int8 *))(a7 + 16))(a7, *(unsigned int *)&v23[v24], v21 + v24, &v49);
              v28 = v49;
            }
          }
          v20 = (unsigned __int8 *)&v23[v24 + 4];
        }
        while (!v28);
      }
      else
      {
        while (v20 < (unsigned __int8 *)v15 + *v14)
        {
          v32 = *v20;
          v30 = (char *)(v20 + 1);
          v31 = v32;
          v33 = v32 - v19;
          if (v32 < v19)
            goto LABEL_24;
          v34 = memcmp(v30, __dst, v19);
          if (v34 > 0)
            return;
          if (v34)
          {
LABEL_24:
            v29 = 0;
          }
          else
          {
            v29 = *(_DWORD *)&v30[v31];
            if (v29)
            {
              memcpy(v22, &v30[v19], v33);
              (*(void (**)(uint64_t, _QWORD, unint64_t, unsigned __int8 *))(a7 + 16))(a7, *(unsigned int *)&v30[v31], v21 + v31, &v49);
              v29 = v49;
            }
          }
          v20 = (unsigned __int8 *)&v30[v31 + 4];
          if (v29)
            return;
        }
      }
      return;
    }
  }
  if (a5)
  {
    do
    {
      if (v20 >= (unsigned __int8 *)v15 + *v14)
        break;
      v37 = *v20;
      v35 = (char *)(v20 + 1);
      v36 = v37;
      v38 = v37 - v19;
      if (v37 < v19 || v38 > a5)
        goto LABEL_41;
      v40 = memcmp(v35, __dst, v19);
      if (v40 > 0)
        return;
      if (v40 || (v42 = *(unsigned int *)&v35[v36], !(_DWORD)v42))
      {
LABEL_41:
        v41 = 0;
      }
      else
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t, unsigned __int8 *))(a7 + 16))(a7, v42, v21 + v36, &v49);
        v41 = v49;
      }
      v20 = (unsigned __int8 *)&v35[v36 + 4];
    }
    while (!v41);
  }
  else
  {
    while (v20 < (unsigned __int8 *)v15 + *v14)
    {
      v46 = *v20;
      v44 = (char *)(v20 + 1);
      v45 = v46;
      if (v19 > v46)
        goto LABEL_46;
      v47 = memcmp(v44, __dst, v19);
      if (v47 > 0)
        return;
      if (v47 || (v48 = *(unsigned int *)&v44[v45], !(_DWORD)v48))
      {
LABEL_46:
        v43 = 0;
      }
      else
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t, unsigned __int8 *))(a7 + 16))(a7, v48, v21 + v45, &v49);
        v43 = v49;
      }
      v20 = (unsigned __int8 *)&v44[v45 + 4];
      if (v43)
        return;
    }
  }
}

void sub_19C34C0D8(uint64_t a1@<X1>, int a2@<W2>, uint64_t a3@<X8>)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 16) + (int)(a2 & 0xFFFFFFFC);
  *(_DWORD *)a3 = a2;
  *(_QWORD *)(a3 + 8) = v3 + 4;
  *(_BYTE *)(a3 + 16) = 0;
}

uint64_t sub_19C34C0F8(uint64_t a1, uint64_t a2, int *a3)
{
  unsigned int *v3;
  uint64_t v4;

  v3 = (unsigned int *)*((_QWORD *)a3 + 1);
  if (v3 == (unsigned int *)(*(_QWORD *)(a2 + 16) + (*a3 & 0xFFFFFFFFFFFFFFFCLL) + 4))
    return *v3;
  v4 = *(unsigned __int8 *)v3;
  if ((_DWORD)v4 == *((unsigned __int8 *)a3 + 16))
    return *(unsigned int *)((char *)v3 + v4 + 1);
  else
    return 0;
}

uint64_t sub_19C34C144(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(unsigned __int8 *)(a3 + 16) + *(_QWORD *)(a3 + 8);
}

void sub_19C34C158()
{
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C34C16C@<X0>(uint64_t a1@<X1>, int *a2@<X2>, unsigned int a3@<W3>, uint64_t a4@<X8>, uint8x8_t a5@<D0>)
{
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  _DWORD *v8;
  unsigned int v9;
  int v12;
  __int32 v13;
  int v14;
  int v15;
  uint8x8_t v16;
  uint64_t v17;
  uint64_t result;

  v5 = (unsigned int *)(*(_QWORD *)(a1 + 8) + (*a2 & 0xFFFFFFFFFFFFFFFCLL));
  v6 = a3 >> 5;
  v7 = &v5[a3 >> 5];
  v9 = v7[1];
  v8 = v7 + 1;
  if (((v9 >> a3) & 1) != 0)
  {
    if (qword_1EE41C1B0 != -1)
      dispatch_once(&qword_1EE41C1B0, &unk_1E3D3A5F0);
    v12 = a3 & 0x1F;
    if (a3 >= 0x20)
    {
      if (v6 <= 1)
        v14 = 1;
      else
        v14 = v6;
      a5 = (uint8x8_t)vcnt_s8((int8x8_t)v5[1]);
      a5.i16[0] = vaddlv_u8(a5);
      v13 = a5.i32[0];
      if (a3 >= 0x40)
      {
        a5 = (uint8x8_t)vcnt_s8((int8x8_t)v5[2]);
        a5.i16[0] = vaddlv_u8(a5);
        v13 += a5.i32[0];
        if (v14 != 2)
        {
          a5 = (uint8x8_t)vcnt_s8((int8x8_t)v5[3]);
          a5.i16[0] = vaddlv_u8(a5);
          v13 += a5.i32[0];
          if (v14 != 3)
          {
            a5 = (uint8x8_t)vcnt_s8((int8x8_t)v5[4]);
            a5.i16[0] = vaddlv_u8(a5);
            v13 += a5.i32[0];
            if (v14 != 4)
            {
              a5 = (uint8x8_t)vcnt_s8((int8x8_t)v5[5]);
              a5.i16[0] = vaddlv_u8(a5);
              v13 += a5.i32[0];
              if (v14 != 5)
              {
                a5 = (uint8x8_t)vcnt_s8((int8x8_t)v5[6]);
                a5.i16[0] = vaddlv_u8(a5);
                v13 += a5.i32[0];
                if (v14 != 6)
                {
                  a5 = (uint8x8_t)vcnt_s8((int8x8_t)v5[7]);
                  a5.i16[0] = vaddlv_u8(a5);
                  v13 += a5.i32[0];
                }
              }
            }
          }
        }
      }
    }
    else
    {
      v13 = 0;
    }
    if (v12 == 31)
      v15 = 0x7FFFFFFF;
    else
      v15 = ~(-1 << v12);
    a5.i32[0] = *v8 & v15;
    v16 = (uint8x8_t)vcnt_s8((int8x8_t)a5);
    v16.i16[0] = vaddlv_u8(v16);
    v17 = *(_QWORD *)(qword_1EE41C1B8 + 8 * (v5[v16.i32[0] + v13 + 10] & 3));
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v17 + 32))(v17, a1);
  }
  else
  {
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_BYTE *)(a4 + 16) = 0;
  }
  return result;
}

void sub_19C34C354(uint64_t a1, uint64_t a2, int *a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  unsigned int *v12;
  int8x8_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t *v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  __int32 v21;
  int v22;
  uint8x8_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v27[6];
  _QWORD v28[3];
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  _BYTE v32[8];

  v12 = (unsigned int *)(*(_QWORD *)(a2 + 8) + (*a3 & 0xFFFFFFFFFFFFFFFCLL));
  v29 = 0;
  v30 = &v29;
  v13.i32[1] = 32;
  v31 = 0x2000000000;
  v32[0] = 0;
  v14 = *v12;
  if ((_DWORD)v14)
  {
    (*(void (**)(uint64_t, uint64_t, unint64_t, _BYTE *))(a7 + 16))(a7, v14, a4, v32);
    v15 = *((_BYTE *)v30 + 24) != 0;
  }
  else
  {
    v15 = 0;
  }
  if (a5 - 1 >= a4 && !v15)
  {
    if (qword_1EE41C1B0 != -1)
      dispatch_once(&qword_1EE41C1B0, &unk_1E3D3A5F0);
    v16 = v30;
    if (!*((_BYTE *)v30 + 24))
    {
      v17 = 0;
      v18 = qword_1EE41C1B8;
      do
      {
        v19 = v17 >> 5;
        v20 = v12[(v17 >> 5) + 1];
        if (((v20 >> v17) & 1) != 0)
        {
          if (v17 >= 0x20u)
          {
            if (v19 <= 1)
              v19 = 1;
            v13 = vcnt_s8((int8x8_t)v12[1]);
            v13.i16[0] = vaddlv_u8((uint8x8_t)v13);
            v21 = v13.i32[0];
            if (v17 >= 0x40)
            {
              v13 = vcnt_s8((int8x8_t)v12[2]);
              v13.i16[0] = vaddlv_u8((uint8x8_t)v13);
              v21 += v13.i32[0];
              if (v19 != 2)
              {
                v13 = vcnt_s8((int8x8_t)v12[3]);
                v13.i16[0] = vaddlv_u8((uint8x8_t)v13);
                v21 += v13.i32[0];
                if (v19 != 3)
                {
                  v13 = vcnt_s8((int8x8_t)v12[4]);
                  v13.i16[0] = vaddlv_u8((uint8x8_t)v13);
                  v21 += v13.i32[0];
                  if (v19 != 4)
                  {
                    v13 = vcnt_s8((int8x8_t)v12[5]);
                    v13.i16[0] = vaddlv_u8((uint8x8_t)v13);
                    v21 += v13.i32[0];
                    if (v19 != 5)
                    {
                      v13 = vcnt_s8((int8x8_t)v12[6]);
                      v13.i16[0] = vaddlv_u8((uint8x8_t)v13);
                      v21 += v13.i32[0];
                      if (v19 != 6)
                      {
                        v13 = vcnt_s8((int8x8_t)v12[7]);
                        v13.i16[0] = vaddlv_u8((uint8x8_t)v13);
                        v21 += v13.i32[0];
                      }
                    }
                  }
                }
              }
            }
          }
          else
          {
            v21 = 0;
          }
          if ((v17 & 0x1F) == 0x1F)
            v22 = 0x7FFFFFFF;
          else
            v22 = ~(-1 << (v17 & 0x1F));
          v13.i32[0] = v20 & v22;
          v23 = (uint8x8_t)vcnt_s8(v13);
          v23.i16[0] = vaddlv_u8(v23);
          v24 = *(_QWORD *)(v18 + 8 * (v12[v23.i32[0] + v21 + 10] & 3));
          (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v24 + 32))(v28, v24, a2);
          if (a6)
            *(_BYTE *)(a6 + a4) = v17;
          v27[0] = MEMORY[0x1E0C809B0];
          v27[1] = 0x40000000;
          v27[2] = sub_19C34C67C;
          v27[3] = &unk_1E3D3A640;
          v27[4] = a7;
          v27[5] = &v29;
          v25 = *(_QWORD *)(v18 + 8 * (v28[0] & 3));
          (*(void (**)(uint64_t, uint64_t, _QWORD *, unint64_t, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v25 + 24))(v25, a2, v28, a4 + 1, a5, a6, v27);
          v16 = v30;
        }
        if (*((_BYTE *)v16 + 24))
          break;
      }
      while (v17++ < 0xFF);
    }
  }
  _Block_object_dispose(&v29, 8);
}

void sub_19C34C64C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_19C34C668(uint64_t a1, uint64_t a2, int *a3)
{
  return *(unsigned int *)(*(_QWORD *)(a2 + 8) + (*a3 & 0xFFFFFFFFFFFFFFFCLL));
}

uint64_t sub_19C34C67C(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  *a4 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
  return result;
}

void sub_19C34C6C8()
{
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C34C6DC()
{
  return 0;
}

void *sub_19C34C6E4()
{
  void *result;
  const __CFURL *v1;
  BOOL v2;

  qword_1EE41BFE0 = (uint64_t)objc_lookUpClass("_DPWordRecorder");
  qword_1EE41BFD0 = (uint64_t)objc_lookUpClass("_DPWordRecord");
  result = objc_lookUpClass("_DPStringRecorder");
  qword_1EE41BFE8 = (uint64_t)result;
  if (!qword_1EE41BFE0)
  {
    v1 = CFURLCreateWithFileSystemPath((CFAllocatorRef)*MEMORY[0x1E0C9AE00], CFSTR("/System/Library/PrivateFrameworks/DifferentialPrivacy.framework"), kCFURLPOSIXPathStyle, 1u);
    qword_1EE41C1C0 = (uint64_t)CFBundleCreate(0, v1);
    CFRelease(v1);
    if (qword_1EE41C1C0)
    {
      CFBundleLoadExecutableAndReturnError((CFBundleRef)qword_1EE41C1C0, 0);
      qword_1EE41BFE0 = (uint64_t)objc_lookUpClass("_DPWordRecorder");
      qword_1EE41BFD0 = (uint64_t)objc_lookUpClass("_DPWordRecord");
      result = objc_lookUpClass("_DPStringRecorder");
      qword_1EE41BFE8 = (uint64_t)result;
    }
    else
    {
      result = (void *)qword_1EE41BFE8;
    }
  }
  if (qword_1EE41BFE0)
    v2 = qword_1EE41BFD0 == 0;
  else
    v2 = 1;
  if (!v2 && result != 0)
  {
    qword_1EE41BFD8 = (uint64_t)objc_lookUpClass("NSAutoreleasePool");
    result = dispatch_queue_create("com.apple.LanguageModeling.recorder", 0);
    qword_1EE41BFC8 = (uint64_t)result;
  }
  return result;
}

uint64_t sub_19C34C81C(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  const __CFLocale *v7;
  int v8;
  CFTypeRef Value;
  CFTypeRef v10;
  const __CFString *v11;
  CFStringRef v12;
  CFStringRef v13;
  uint64_t *v14;

  *(_QWORD *)a1 = MEMORY[0x1A1AD29EC](0);
  *(_DWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = 0;
  if (qword_1EE41BFF0 == -1)
  {
    if (a4)
    {
LABEL_3:
      *(_QWORD *)(a1 + 16) = a4;
      return a1;
    }
  }
  else
  {
    dispatch_once(&qword_1EE41BFF0, &unk_1E3D3A660);
    if (a4)
      goto LABEL_3;
  }
  v7 = *(const __CFLocale **)a1;
  v8 = *(_DWORD *)(a1 + 8);
  Value = CFLocaleGetValue(*(CFLocaleRef *)a1, (CFLocaleKey)*MEMORY[0x1E0C9B088]);
  v10 = CFLocaleGetValue(v7, (CFLocaleKey)*MEMORY[0x1E0C9B060]);
  if (v10)
  {
    v11 = CFSTR("RevisedWords");
    if (v8 == 1)
      v11 = CFSTR("LocalWords");
    if (!v8)
      v11 = CFSTR("NewWords");
  }
  else
  {
    v10 = (CFTypeRef)objc_msgSend(&unk_1E3D3FC98, "objectForKey:", Value);
    v11 = CFSTR("RevisedWords");
    if (v8 == 1)
      v11 = CFSTR("LocalWords");
    if (!v8)
      v11 = CFSTR("NewWords");
    if (!v10)
    {
      v12 = CFStringCreateWithFormat(0, 0, CFSTR("com.apple.keyboard.%@.%@"), v11, Value);
      goto LABEL_17;
    }
  }
  v12 = CFStringCreateWithFormat(0, 0, CFSTR("com.apple.keyboard.%@.%@_%@"), v11, Value, v10);
LABEL_17:
  v13 = v12;
  v14 = &qword_1EE41BFE8;
  if (a3 != 2)
    v14 = &qword_1EE41BFE0;
  *(_QWORD *)(a1 + 16) = objc_msgSend((id)objc_msgSend((id)*v14, "alloc"), "initWithKey:", v12);
  CFRelease(v13);
  return a1;
}

void sub_19C34C9AC(const __CFLocale **a1, CFStringRef theString)
{
  const __CFString *v2;
  const __CFLocale **v3;
  const __CFLocale *v4;
  CFIndex Length;
  CFMutableStringRef MutableCopy;
  const char *CStringPtr;
  BOOL v8;
  uint64_t v9;
  int64_t v10;
  int v11;
  unint64_t v12;
  CFIndex v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  UniChar *v23;
  UniChar v24;
  UniChar v25;
  int64_t v26;
  uint64_t v27;
  UniChar *v28;
  unsigned __int16 v29;
  CFIndex v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  CFIndex v37;
  uint64_t v38;
  const __CFLocale *v39;
  __CFArray *Mutable;
  NSObject *v41;
  _QWORD *v42;
  CFIndex v43;
  __CFString *v44;
  const __CFLocale **v45;
  const __CFString *v46;
  CFIndex v47;
  _QWORD block[6];
  _QWORD v49[6];
  UniChar buffer[4];
  UniChar *v51;
  uint64_t v52;
  void (*v53)(uint64_t, uint64_t);
  void (*v54)(uint64_t);
  const __CFLocale *v55;
  CFStringRef theStringa;
  const UniChar *CharactersPtr;
  const char *v58;
  uint64_t v59;
  int64_t v60;
  uint64_t v61;
  int64_t v62;
  CFMutableStringRef v63;
  CFRange v64;
  CFRange v65;
  CFRange v66;

  v2 = theString;
  v3 = a1;
  v4 = *a1;
  Length = CFStringGetLength(theString);
  if (Length < 3)
    return;
  v47 = Length;
  MutableCopy = CFStringCreateMutableCopy(0, 0, v2);
  v63 = MutableCopy;
  CFStringUppercase(MutableCopy, v4);
  if (CFStringCompare(v2, MutableCopy, 0) == kCFCompareEqualTo)
  {
    v8 = 0;
    if (MutableCopy)
      goto LABEL_73;
    goto LABEL_74;
  }
  theStringa = v2;
  v59 = 0;
  v60 = v47;
  CharactersPtr = CFStringGetCharactersPtr(v2);
  v45 = v3;
  v46 = v2;
  v44 = MutableCopy;
  if (CharactersPtr)
    CStringPtr = 0;
  else
    CStringPtr = CFStringGetCStringPtr(v2, 0x600u);
  v9 = 0;
  v10 = 0;
  v8 = 0;
  v11 = 0;
  v61 = 0;
  v62 = 0;
  v12 = v47;
  v13 = v47 - 1;
  v58 = CStringPtr;
  v14 = -1;
  v15 = 65;
  v16 = MEMORY[0x1E0C80978];
  v17 = 1;
  v18 = 1;
  do
  {
    v19 = v9 + 1;
    if (v17 >= 5)
      v20 = 5;
    else
      v20 = v17;
    if (v17 >= 4)
      v21 = 4;
    else
      v21 = v17;
    v22 = v60;
    if (v60 <= v19)
    {
      v24 = 0;
      if (v60 < v19)
        goto LABEL_22;
    }
    else
    {
      if (CharactersPtr)
      {
        v23 = (UniChar *)&CharactersPtr[v9 + v59];
        goto LABEL_18;
      }
      if (!v58)
      {
        if (v62 <= v19 || v10 > v19)
        {
          v30 = v13;
          v31 = v21 + v14;
          v32 = v15 - v21;
          v33 = v9 - v21;
          v34 = v33 + 1;
          v35 = v33 + 65;
          if (v35 >= v60)
            v35 = v60;
          v61 = v34;
          v62 = v35;
          if (v60 >= v32)
            v22 = v32;
          v64.length = v22 + v31;
          v64.location = v34 + v59;
          CFStringGetCharacters(theStringa, v64, buffer);
          v22 = v60;
          v10 = v61;
          v12 = v47;
          v13 = v30;
          v16 = MEMORY[0x1E0C80978];
        }
        v23 = &buffer[v9 - v10];
LABEL_18:
        v24 = v23[1];
        if (v22 < v19)
          goto LABEL_22;
        goto LABEL_19;
      }
      v24 = v58[v59 + 1 + v9];
      if (v60 < v19)
      {
LABEL_22:
        v25 = 0;
        goto LABEL_23;
      }
    }
LABEL_19:
    if (CharactersPtr)
    {
      v25 = CharactersPtr[v9 + v59];
    }
    else if (v58)
    {
      v25 = v58[v59 + v9];
    }
    else
    {
      if (v62 < v19 || v10 >= v19)
      {
        v43 = v13;
        v36 = v9 - v20 + 65;
        if (v36 >= v22)
          v36 = v22;
        v61 = v9 - v20 + 1;
        v62 = v36;
        if (v22 >= v15 - v20)
          v22 = v15 - v20;
        v65.length = v22 + v20 + v14;
        v65.location = v9 - v20 + 1 + v59;
        CFStringGetCharacters(theStringa, v65, buffer);
        v10 = v61;
        v12 = v47;
        v13 = v43;
        v16 = MEMORY[0x1E0C80978];
      }
      v25 = buffer[v9 - v10];
    }
LABEL_23:
    if (v24 <= 0xFFu && (*(_DWORD *)(v16 + 4 * v24 + 60) & 0x400) != 0)
      break;
    if ((unint64_t)v19 < 2 || (v26 = v9 - 1, v27 = v60, v60 <= v9 - 1))
    {
      v29 = 0;
    }
    else
    {
      if (CharactersPtr)
      {
        v28 = (UniChar *)&CharactersPtr[v9 + v59];
LABEL_29:
        v29 = *(v28 - 1);
        goto LABEL_31;
      }
      if (!v58)
      {
        if (v62 <= v26 || v10 > v26)
        {
          v37 = v13;
          v38 = v9 - 5;
          if ((unint64_t)v26 < 4)
            v38 = 0;
          if (v38 + 64 < v60)
            v27 = v38 + 64;
          v61 = v38;
          v62 = v27;
          v66.location = v59 + v38;
          v66.length = v27 - v38;
          CFStringGetCharacters(theStringa, v66, buffer);
          v10 = v61;
          v12 = v47;
          v13 = v37;
          v16 = MEMORY[0x1E0C80978];
        }
        v28 = &buffer[v9 - v10];
        goto LABEL_29;
      }
      v29 = v58[v59 - 1 + v9];
    }
LABEL_31:
    if (v24 == v29)
      ++v11;
    else
      v11 = 0;
    if (v24 == v25)
      ++v18;
    else
      v18 = 1;
    if (v18 == 3)
      break;
    if (v11 == 4)
      break;
    ++v17;
    v8 = v9 + 2 >= v12;
    ++v9;
    --v14;
    ++v15;
  }
  while (v13 != v9);
  v3 = v45;
  v2 = v46;
  MutableCopy = v44;
  if (v44)
LABEL_73:
    CFRelease(MutableCopy);
LABEL_74:
  if (v8)
  {
    v39 = v3[2];
    if (v39)
    {
      if (qword_1EE41BFC8)
      {
        if (*((_DWORD *)v3 + 2) == 2)
        {
          Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
          CFArrayAppendValue(Mutable, v2);
          *(_QWORD *)buffer = 0;
          v51 = buffer;
          v52 = 0x3052000000;
          v53 = sub_19C34CF4C;
          v54 = sub_19C34CF5C;
          v55 = 0;
          v55 = v3[2];
          v41 = qword_1EE41BFC8;
          v49[0] = MEMORY[0x1E0C809B0];
          v49[1] = 3221225472;
          v49[2] = sub_19C34CF68;
          v49[3] = &unk_1E3D3A688;
          v49[4] = buffer;
          v49[5] = Mutable;
          v42 = v49;
        }
        else
        {
          *(_QWORD *)buffer = 0;
          v51 = buffer;
          v52 = 0x3052000000;
          v53 = sub_19C34CF4C;
          v54 = sub_19C34CF5C;
          v55 = 0;
          v55 = v39;
          CFRetain(v2);
          v41 = qword_1EE41BFC8;
          block[0] = MEMORY[0x1E0C809B0];
          block[1] = 3221225472;
          block[2] = sub_19C34CFA8;
          block[3] = &unk_1E3D3A688;
          block[4] = buffer;
          block[5] = v2;
          v42 = block;
        }
        dispatch_async(v41, v42);
        _Block_object_dispose(buffer, 8);
      }
    }
  }
}

void sub_19C34CF0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  _Block_object_dispose(&a26, 8);
  _Unwind_Resume(a1);
}

void sub_19C34CF24(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_19C339C1C((const void **)(v1 - 96));
  _Unwind_Resume(a1);
}

void sub_19C34CF4C(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void sub_19C34CF5C(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void sub_19C34CF68(uint64_t a1)
{
  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "record:", *(_QWORD *)(a1 + 40));

  CFRelease(*(CFTypeRef *)(a1 + 40));
}

void sub_19C34CFA8(uint64_t a1)
{
  const __CFString *v2;
  void *v3;
  uint64_t Length;
  uint64_t v5;
  __CFArray *Mutable;
  CFStringRef v7;
  CFNumberRef v8;
  uint64_t v9;
  CFIndex location;
  CFIndex v11;
  __CFString *v12;
  uint64_t v13;
  CFRange RangeOfComposedCharactersAtIndex;
  const __CFString *v15;
  CFNumberRef v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t valuePtr;
  CFRange v21;

  v18 = objc_alloc_init((Class)qword_1EE41BFD8);
  v19 = a1;
  v2 = *(const __CFString **)(a1 + 40);
  v3 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  valuePtr = 0;
  Length = CFStringGetLength(v2);
  v17 = v3;
  v5 = objc_msgSend(v3, "wordFragmentWidth");
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  v21.location = 0;
  v21.length = Length;
  v7 = CFStringCreateWithSubstring(0, v2, v21);
  v8 = CFNumberCreate(0, kCFNumberCFIndexType, &valuePtr);
  CFArrayAppendValue(Mutable, (const void *)objc_msgSend((id)qword_1EE41BFD0, "word:atPosition:", v7, v8));
  CFRelease(v8);
  CFRelease(v7);
  if (v5 <= 1)
    v9 = 1;
  else
    v9 = v5;
  if (Length >= 1 && valuePtr < Length)
  {
    location = 0;
    v11 = 0;
    do
    {
      v12 = CFStringCreateMutable(0, 0);
      ++valuePtr;
      v13 = v9;
      do
      {
        if (v11 + location < Length)
        {
          RangeOfComposedCharactersAtIndex = CFStringGetRangeOfComposedCharactersAtIndex(v2, v11 + location);
          location = RangeOfComposedCharactersAtIndex.location;
          v11 = RangeOfComposedCharactersAtIndex.length;
          v15 = CFStringCreateWithSubstring(0, v2, RangeOfComposedCharactersAtIndex);
          CFStringAppend(v12, v15);
          CFRelease(v15);
        }
        --v13;
      }
      while (v13);
      v16 = CFNumberCreate(0, kCFNumberCFIndexType, &valuePtr);
      CFArrayAppendValue(Mutable, (const void *)objc_msgSend((id)qword_1EE41BFD0, "word:atPosition:", v12, v16));
      CFRelease(v16);
      CFRelease(v12);
    }
    while (location + v11 < Length && valuePtr < Length);
  }
  objc_msgSend(v17, "record:", Mutable);
  CFRelease(Mutable);

  CFRelease(*(CFTypeRef *)(v19 + 40));
}

_QWORD *sub_19C34D1C8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_1E3D35A10;
  v2 = (std::__shared_weak_count *)a1[27];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return sub_19C34E2D8(a1);
}

void sub_19C34D22C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_1E3D35A10;
  v2 = (std::__shared_weak_count *)a1[27];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  sub_19C34E2D8(a1);
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C34D2A4(uint64_t a1, uint64_t *a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v6;
  uint64_t v7;
  char ***v8;
  char ***v9;
  char **v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  int64_t v21;
  uint64_t v22;
  char *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  int64_t v32;
  char *v33;
  char *v34;
  size_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  unint64_t v45;
  uint64_t v46;
  __int128 *v47;
  _OWORD *v48;
  uint64_t v49;
  __int128 v50;
  int v51;
  char *v52;
  unint64_t v53;
  __int128 *v54;
  _OWORD *v55;
  uint64_t v56;
  __int128 v57;
  int v58;
  size_t v59;
  _BYTE *v60;
  uint64_t v61;
  uint64_t v62;
  _OWORD *v63;
  __int128 *v64;
  uint64_t v65;
  __int128 v66;
  int v67;
  char *v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  _BYTE *v76;
  char *v77;
  unint64_t v78;
  uint64_t v79;
  _OWORD *v80;
  char *v81;
  uint64_t v82;
  __int128 v83;
  uint64_t v84;
  _QWORD *v85;
  int64_t v86;
  char *v87;
  char *v88;
  _QWORD *v89;
  _QWORD *v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  char *v94;
  char *v95;
  char *v96;
  char *v97;
  char **v98;
  int64_t v99;
  char *v100;
  char *v101;
  char *v102;
  __int128 v103;
  _QWORD *v104;
  _QWORD *v105;
  void *v106;
  void *v107;
  char *v108;
  char *v109;
  int64_t v110;
  char *v111;
  char *v112;
  char *v113;
  char *v114;
  unint64_t v115;
  int v116;
  uint64_t v121;
  float *v122;
  float *v123;
  float *v124;
  uint64_t v125;
  unsigned int v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t *v129;
  uint64_t v130;
  uint64_t v131;
  float v132;
  uint64_t v133;
  uint64_t v134;
  float32x2_t *v135;
  unint64_t v136;
  float *v137;
  float32x2_t *v138;
  float32x2_t v139;
  uint64_t v140;
  float32x2_t v141;
  int8x8_t v142;
  int8x8_t v143;
  int8x8_t v144;
  int8x8_t v145;
  float v146;
  float v147;
  float v148;
  uint64_t v149;
  unint64_t v150;
  unint64_t v151;
  _BYTE *v152;
  float *v153;
  unint64_t v154;
  float *v155;
  int v156;
  uint64_t v157;
  _OWORD *v158;
  float *v159;
  uint64_t v160;
  __int128 v161;
  _QWORD *v162;
  float *v163;
  int64_t v164;
  char *v165;
  char *v166;
  char *v167;
  char *v168;
  char *v169;
  char *v170;
  void *v171;
  void *v172;
  char *v173;
  void *v174;
  char *v175;
  void *v176;
  void *v177;
  char *v178;
  char *v179;
  void *v180;
  char *v181;
  void *v182;
  void *v183;
  char ***v186;
  int v187;
  uint64_t v189;
  char ***v191;
  unint64_t v192;
  char *v193;
  float v194;
  float v195;
  unint64_t v196;
  float v197;
  int8x8_t v198;
  char **v199;
  float32x2_t v200;
  char *v201;
  char *v202;
  char *v203;
  unint64_t __p;
  float *__pa;
  char *v206;
  char *v207;
  void *v208;
  char *v209;
  unint64_t v210;
  void *v211;
  __int128 v212;
  char *v213;
  char *v214;
  __int128 v215;
  char *v216;

  v6 = a4;
  v7 = a1;
  v9 = (char ***)*a2;
  v8 = (char ***)a2[1];
  if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v8 - *a2) >> 3) <= 1)
  {
    sub_19C3ED1FC(a1, a2, a3, a4, a5, a6);
    return 1;
  }
  v211 = 0;
  v212 = 0uLL;
  v208 = 0;
  v209 = 0;
  v210 = 0;
  if (v9 != v8)
  {
    v186 = v8;
    while (1)
    {
      __p = 0;
      v206 = 0;
      v207 = 0;
      v201 = 0;
      v202 = 0;
      v203 = 0;
      v10 = *v9;
      v191 = v9;
      v199 = v9[1];
      if (*v9 != v199)
        break;
LABEL_82:
      v85 = (_QWORD *)v212;
      if ((unint64_t)v212 >= *((_QWORD *)&v212 + 1))
      {
        v90 = v211;
        v91 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v212 - (_QWORD)v211) >> 3);
        v92 = v91 + 1;
        if (v91 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_19C2A18E8();
        if (0x5555555555555556 * ((uint64_t)(*((_QWORD *)&v212 + 1) - (_QWORD)v211) >> 3) > v92)
          v92 = 0x5555555555555556 * ((uint64_t)(*((_QWORD *)&v212 + 1) - (_QWORD)v211) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v212 + 1) - (_QWORD)v211) >> 3) >= 0x555555555555555)
          v93 = 0xAAAAAAAAAAAAAAALL;
        else
          v93 = v92;
        v216 = (char *)&v212 + 8;
        if (v93)
        {
          if (v93 > 0xAAAAAAAAAAAAAAALL)
            sub_19C2A143C();
          v94 = (char *)operator new(24 * v93);
        }
        else
        {
          v94 = 0;
        }
        v213 = v94;
        v214 = &v94[24 * v91];
        v96 = &v94[24 * v93];
        *(_QWORD *)&v215 = v214;
        *((_QWORD *)&v215 + 1) = v96;
        v97 = v214;
        *((_QWORD *)v214 + 1) = 0;
        v98 = (char **)(v97 + 8);
        v95 = &v94[24 * v91];
        *((_QWORD *)v95 + 2) = 0;
        *(_QWORD *)v95 = 0;
        v99 = (int64_t)&v206[-__p];
        if (v206 != (char *)__p)
        {
          if (v99 < 0)
            sub_19C2A18E8();
          v100 = (char *)operator new((size_t)&v206[-__p]);
          *(_QWORD *)v95 = v100;
          *v98 = v100;
          v101 = &v100[4 * (v99 >> 2)];
          *((_QWORD *)v95 + 2) = v101;
          memcpy(v100, (const void *)__p, v99);
          *v98 = v101;
        }
        v89 = v95 + 24;
        *(_QWORD *)&v215 = v95 + 24;
        if (v85 == v90)
        {
          v211 = v95;
          *(_QWORD *)&v212 = v95 + 24;
          *((_QWORD *)&v212 + 1) = v96;
        }
        else
        {
          do
          {
            v102 = v95;
            *((_QWORD *)v95 - 2) = 0;
            *((_QWORD *)v95 - 1) = 0;
            v103 = *(_OWORD *)(v85 - 3);
            v85 -= 3;
            *(_OWORD *)(v95 - 24) = v103;
            v95 -= 24;
            *((_QWORD *)v102 - 1) = v85[2];
            *v85 = 0;
            v85[1] = 0;
            v85[2] = 0;
          }
          while (v85 != v90);
          v85 = v211;
          v104 = (_QWORD *)v212;
          v211 = v95;
          v212 = v215;
          v89 = (_QWORD *)v215;
          if (v104 != v85)
          {
            v105 = v104;
            do
            {
              v107 = (void *)*(v105 - 3);
              v105 -= 3;
              v106 = v107;
              if (v107)
              {
                *(v104 - 2) = v106;
                operator delete(v106);
              }
              v104 = v105;
            }
            while (v105 != v85);
          }
        }
        if (v85)
          operator delete(v85);
      }
      else
      {
        *(_OWORD *)v212 = 0uLL;
        v85[2] = 0;
        v86 = (int64_t)&v206[-__p];
        if (v206 != (char *)__p)
        {
          if (v86 < 0)
            sub_19C2A18E8();
          v87 = (char *)operator new((size_t)&v206[-__p]);
          *v85 = v87;
          v85[1] = v87;
          v88 = &v87[4 * (v86 >> 2)];
          v85[2] = v88;
          memcpy(v87, (const void *)__p, v86);
          v85[1] = v88;
        }
        v89 = v85 + 3;
      }
      *(_QWORD *)&v212 = v89;
      v108 = v209;
      if ((unint64_t)v209 >= v210)
      {
        v109 = v201;
        v113 = sub_19C3116D0((char **)&v208, v201, (uint64_t)v202);
      }
      else
      {
        *(_QWORD *)v209 = 0;
        *((_QWORD *)v108 + 1) = 0;
        *((_QWORD *)v108 + 2) = 0;
        v109 = v201;
        v110 = v202 - v201;
        if (v202 != v201)
        {
          if (v110 < 0)
            sub_19C2A18E8();
          v111 = (char *)operator new(v202 - v201);
          *(_QWORD *)v108 = v111;
          *((_QWORD *)v108 + 1) = v111;
          v112 = &v111[8 * (v110 >> 3)];
          *((_QWORD *)v108 + 2) = v112;
          memcpy(v111, v201, v110);
          *((_QWORD *)v108 + 1) = v112;
        }
        v113 = v108 + 24;
      }
      v209 = v113;
      v7 = a1;
      v6 = a4;
      if (v109)
        operator delete(v109);
      if (__p)
        operator delete((void *)__p);
      v9 = v191 + 3;
      if (v191 + 3 == v186)
        goto LABEL_120;
    }
    v11 = 0;
    v12 = 0;
    while (1)
    {
      v17 = *v10;
      v16 = v10[1];
      v18 = v16 - *v10;
      if (v18 >= 1)
      {
        v19 = v18 >> 2;
        v20 = (void *)__p;
        v21 = (int64_t)&v11[-__p];
        v22 = (uint64_t)&v11[-__p] >> 2;
        v23 = (char *)(__p + ((unint64_t)&v11[-__p] & 0xFFFFFFFFFFFFFFFCLL));
        if (v18 >> 2 > (v207 - v11) >> 2)
        {
          v24 = v22 + v19;
          if ((unint64_t)(v22 + v19) >> 62)
            sub_19C2A18E8();
          v25 = (uint64_t)&v207[-__p];
          if ((uint64_t)&v207[-__p] >> 1 > v24)
            v24 = v25 >> 1;
          _CF = (unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL;
          v27 = 0x3FFFFFFFFFFFFFFFLL;
          if (!_CF)
            v27 = v24;
          v196 = v27;
          if (v27)
          {
            if (v27 >> 62)
              sub_19C2A143C();
            v28 = operator new(4 * v27);
            v23 = (char *)(__p + ((unint64_t)&v11[-__p] & 0xFFFFFFFFFFFFFFFCLL));
            v22 = (uint64_t)&v11[-__p] >> 2;
          }
          else
          {
            v28 = 0;
          }
          v42 = &v28[4 * v22];
          v43 = &v42[4 * v19];
          if ((unint64_t)(v18 - 4) >= 0x1C)
          {
            v44 = &v28[4 * v22];
            if ((unint64_t)(&v28[v21 & 0xFFFFFFFFFFFFFFFCLL] - v17) < 0x20)
              goto LABEL_39;
            v45 = ((unint64_t)(v18 - 4) >> 2) + 1;
            v46 = 4 * (v45 & 0x7FFFFFFFFFFFFFF8);
            v44 = &v42[v46];
            v47 = (__int128 *)(v17 + 16);
            v48 = &v28[4 * v22 + 16];
            v49 = v45 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v50 = *v47;
              *(v48 - 1) = *(v47 - 1);
              *v48 = v50;
              v47 += 2;
              v48 += 2;
              v49 -= 8;
            }
            while (v49);
            if (v45 != (v45 & 0x7FFFFFFFFFFFFFF8))
            {
              v17 += v46;
              goto LABEL_39;
            }
          }
          else
          {
            v44 = &v28[4 * v22];
            do
            {
LABEL_39:
              v51 = *(_DWORD *)v17;
              v17 += 4;
              *(_DWORD *)v44 = v51;
              v44 += 4;
            }
            while (v44 != v43);
          }
          if ((char *)__p != v11)
          {
            if ((unint64_t)(v21 - 4) < 0x3C)
            {
              v52 = v23;
              goto LABEL_47;
            }
            v52 = v23;
            if (__p + (v21 & 0xFFFFFFFFFFFFFFFCLL) - (unint64_t)&v28[v21 & 0xFFFFFFFFFFFFFFFCLL] < 0x20)
              goto LABEL_212;
            v53 = ((unint64_t)(v21 - 4) >> 2) + 1;
            v52 = &v23[-4 * (v53 & 0x7FFFFFFFFFFFFFF8)];
            v54 = (__int128 *)(__p + 4 * v22 - 16);
            v55 = &v28[4 * v22 - 16];
            v56 = v53 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v57 = *v54;
              *(v55 - 1) = *(v54 - 1);
              *v55 = v57;
              v54 -= 2;
              v55 -= 2;
              v56 -= 8;
            }
            while (v56);
            v42 -= 4 * (v53 & 0x7FFFFFFFFFFFFFF8);
            if (v53 != (v53 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_212:
              do
              {
LABEL_47:
                v58 = *((_DWORD *)v52 - 1);
                v52 -= 4;
                *((_DWORD *)v42 - 1) = v58;
                v42 -= 4;
              }
              while (v52 != (char *)__p);
            }
          }
          v59 = v11 - v23;
          if (v59)
          {
            v60 = v28;
            memmove(v43, v23, v59);
            v28 = v60;
          }
          v11 = &v43[v59];
          __p = (unint64_t)v42;
          v206 = v11;
          v207 = &v28[4 * v196];
          if (v20)
            operator delete(v20);
          goto LABEL_62;
        }
        v29 = v11 - v23;
        v30 = (v11 - v23) >> 2;
        if (v30 >= v19)
        {
          v31 = &v17[4 * v19];
          v33 = v11;
LABEL_26:
          v34 = &v23[4 * v19];
          v35 = v33 - v34;
          v36 = (v33 - v34) >> 2;
          v37 = &v33[-4 * v19];
          v38 = v33;
          if (v37 < v11)
          {
            v39 = (v21 & 0xFFFFFFFFFFFFFFFCLL) + v35;
            v40 = __p + v39 + 4;
            if ((unint64_t)v11 > v40)
              v40 = (unint64_t)v11;
            v41 = v40 + ~__p - v39;
            if (v41 <= 0x2B)
            {
              v38 = v33;
              goto LABEL_56;
            }
            v38 = v33;
            if ((unint64_t)&v34[-(v21 & 0xFFFFFFFFFFFFFFFCLL) - __p] < 0x20)
              goto LABEL_213;
            v61 = (v41 >> 2) + 1;
            v62 = 4 * (v61 & 0x7FFFFFFFFFFFFFF8);
            v37 += v62;
            v63 = v33 + 16;
            v64 = (__int128 *)(__p + 4 * v36 + 4 * v22 + 16);
            v65 = v61 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v66 = *v64;
              *(v63 - 1) = *(v64 - 1);
              *v63 = v66;
              v63 += 2;
              v64 += 2;
              v65 -= 8;
            }
            while (v65);
            v38 = &v33[v62];
            if (v61 != (v61 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_213:
              do
              {
LABEL_56:
                v67 = *(_DWORD *)v37;
                v37 += 4;
                *(_DWORD *)v38 = v67;
                v38 += 4;
              }
              while (v37 < v11);
            }
          }
          v206 = v38;
          if (v33 != v34)
          {
            v68 = v23;
            memmove(&v33[-4 * v36], v23, v35);
            v23 = v68;
          }
          if (v31 != v17)
            memmove(v23, v17, v31 - v17);
          v11 = v38;
          goto LABEL_62;
        }
        v31 = &v17[4 * v30];
        v32 = v16 - v31;
        if (v16 != v31)
        {
          v193 = &v17[4 * v30];
          memmove(v11, v193, v16 - v31);
          v22 = (uint64_t)&v11[-__p] >> 2;
          v31 = v193;
          v23 = (char *)(__p + ((unint64_t)&v11[-__p] & 0xFFFFFFFFFFFFFFFCLL));
        }
        v33 = &v11[v32];
        v206 = &v11[v32];
        if (v29 >= 1)
          goto LABEL_26;
        v11 += v32;
      }
LABEL_62:
      v69 = v12 + ((v10[1] - *v10) >> 2);
      v70 = v202;
      if (v202 < v203)
      {
        *(_QWORD *)v202 = v69;
        v13 = v202 + 8;
      }
      else
      {
        v71 = v201;
        v72 = (v202 - v201) >> 3;
        v73 = v72 + 1;
        if ((unint64_t)(v72 + 1) >> 61)
          sub_19C2A18E8();
        v74 = v203 - v201;
        if ((v203 - v201) >> 2 > v73)
          v73 = v74 >> 2;
        if ((unint64_t)v74 >= 0x7FFFFFFFFFFFFFF8)
          v75 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v75 = v73;
        if (v75)
        {
          if (v75 >> 61)
            sub_19C2A143C();
          v76 = operator new(8 * v75);
        }
        else
        {
          v76 = 0;
        }
        v77 = &v76[8 * v72];
        *(_QWORD *)v77 = v69;
        v13 = v77 + 8;
        if (v202 != v201)
        {
          v78 = v202 - 8 - v201;
          if (v78 < 0x58)
            goto LABEL_214;
          if ((unint64_t)(v201 - v76) < 0x20)
            goto LABEL_214;
          v79 = (v78 >> 3) + 1;
          v80 = &v76[8 * v72 - 16];
          v81 = v202 - 16;
          v82 = v79 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v83 = *(_OWORD *)v81;
            *(v80 - 1) = *((_OWORD *)v81 - 1);
            *v80 = v83;
            v80 -= 2;
            v81 -= 32;
            v82 -= 4;
          }
          while (v82);
          v77 -= 8 * (v79 & 0x3FFFFFFFFFFFFFFCLL);
          v70 = &v202[-8 * (v79 & 0x3FFFFFFFFFFFFFFCLL)];
          if (v79 != (v79 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_214:
            do
            {
              v84 = *((_QWORD *)v70 - 1);
              v70 -= 8;
              *((_QWORD *)v77 - 1) = v84;
              v77 -= 8;
            }
            while (v70 != v201);
          }
        }
        v201 = v77;
        v203 = &v76[8 * v75];
        if (v71)
          operator delete(v71);
      }
      v202 = v13;
      v15 = *v10;
      v14 = v10[1];
      v10 += 3;
      v12 += (v14 - v15) >> 2;
      if (v10 == v199)
        goto LABEL_82;
    }
  }
LABEL_120:
  (*(void (**)(char **__return_ptr, _QWORD, void **, uint64_t))(**(_QWORD **)(v7 + 40) + 64))(&v213, *(_QWORD *)(v7 + 40), &v211, v6);
  v114 = v209;
  if (v209 != v208)
  {
    v115 = 0;
    v116 = 0;
    __asm { FMOV            V10.2S, #-10.0 }
    v114 = (char *)v208;
    do
    {
      v187 = v116;
      __pa = 0;
      v121 = *(_QWORD *)&v114[24 * v115];
      if (*(_QWORD *)&v114[24 * v115 + 8] != v121)
      {
        v122 = 0;
        v123 = 0;
        v124 = 0;
        v125 = 0;
        v126 = 0;
        v127 = 0;
        v192 = v115;
        while (1)
        {
          v131 = *(_QWORD *)(v121 + 8 * v125);
          v132 = 0.0;
          if (v127 != v131)
            break;
LABEL_138:
          v148 = __exp10(v132);
LABEL_139:
          if (v124 >= v123)
          {
            v149 = v124 - v122;
            v150 = v149 + 1;
            if ((unint64_t)(v149 + 1) >> 62)
              sub_19C2A18E8();
            if (((char *)v123 - (char *)v122) >> 1 > v150)
              v150 = ((char *)v123 - (char *)v122) >> 1;
            if ((unint64_t)((char *)v123 - (char *)v122) >= 0x7FFFFFFFFFFFFFFCLL)
              v151 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v151 = v150;
            if (v151)
            {
              if (v151 >> 62)
                sub_19C2A143C();
              v152 = operator new(4 * v151);
            }
            else
            {
              v152 = 0;
            }
            v153 = (float *)&v152[4 * v149];
            *v153 = v148;
            v128 = (uint64_t)(v153 + 1);
            if (v124 == v122)
            {
              v115 = v192;
            }
            else
            {
              v154 = (char *)(v124 - 1) - (char *)v122;
              if (v154 < 0x2C || (unint64_t)((char *)v122 - v152) < 0x20)
              {
                v155 = v124;
                v115 = v192;
                goto LABEL_154;
              }
              v157 = (v154 >> 2) + 1;
              v155 = &v124[-(v157 & 0x7FFFFFFFFFFFFFF8)];
              v158 = &v152[4 * v149 - 16];
              v159 = v124 - 4;
              v160 = v157 & 0x7FFFFFFFFFFFFFF8;
              v115 = v192;
              do
              {
                v161 = *(_OWORD *)v159;
                *(v158 - 1) = *((_OWORD *)v159 - 1);
                *v158 = v161;
                v158 -= 2;
                v159 -= 8;
                v160 -= 8;
              }
              while (v160);
              v153 -= v157 & 0x7FFFFFFFFFFFFFF8;
              if (v157 != (v157 & 0x7FFFFFFFFFFFFFF8))
              {
                do
                {
LABEL_154:
                  v156 = *((_DWORD *)v155-- - 1);
                  *((_DWORD *)v153-- - 1) = v156;
                }
                while (v155 != v122);
              }
            }
            v123 = (float *)&v152[4 * v151];
            __pa = v153;
            if (v122)
              operator delete(v122);
            v122 = v153;
            goto LABEL_127;
          }
          *v124 = v148;
          v128 = (uint64_t)(v124 + 1);
LABEL_127:
          v129 = (uint64_t *)((char *)v208 + 24 * v115);
          v121 = *v129;
          v130 = v129[1];
          v127 = *(_QWORD *)(*v129 + 8 * v125);
          v124 = (float *)v128;
          v125 = ++v126;
          if (v126 >= (unint64_t)((v130 - v121) >> 3))
            goto LABEL_165;
        }
        v133 = *(_QWORD *)&v213[24 * v115];
        v134 = 4 * v127;
        v135 = (float32x2_t *)(v133 + v134);
        v136 = 4 * v131 - v134 - 4;
        if (v136 >= 0xC)
        {
          v189 = (v136 >> 2) + 1;
          v137 = (float *)v135 + (v189 & 0x7FFFFFFFFFFFFFFCLL);
          v138 = v135 + 1;
          v139 = 0;
          v140 = v189 & 0x7FFFFFFFFFFFFFFCLL;
          v141 = 0;
          do
          {
            LODWORD(v194) = v138[-1];
            v200 = *v138;
            v142 = (int8x8_t)vcgtz_f32(v138[-1]);
            v143 = (int8x8_t)vcgtz_f32(*v138);
            v197 = log10f(COERCE_FLOAT(HIDWORD(*(_QWORD *)&v138[-1])));
            *(float *)v144.i32 = log10f(v194);
            *(float *)&v144.i32[1] = v197;
            v198 = v144;
            v195 = log10f(v200.f32[1]);
            *(float *)v145.i32 = log10f(v200.f32[0]);
            *(float *)&v145.i32[1] = v195;
            v139 = vadd_f32((float32x2_t)vbsl_s8(v142, v198, _D10), v139);
            v141 = vadd_f32((float32x2_t)vbsl_s8(v143, v145, _D10), v141);
            v138 += 2;
            v140 -= 4;
          }
          while (v140);
          v132 = vaddv_f32(vadd_f32(v141, v139));
          v115 = v192;
          if (v189 != (v189 & 0x7FFFFFFFFFFFFFFCLL))
            goto LABEL_134;
        }
        else
        {
          v137 = (float *)v135;
          do
          {
LABEL_134:
            v146 = *v137++;
            v147 = log10f(v146);
            if (v146 <= 0.0)
              v147 = -10.0;
            v132 = v147 + v132;
          }
          while (v137 != (float *)(v133 + 4 * v131));
        }
        v148 = 0.0;
        if (v132 <= -10.0)
          goto LABEL_139;
        goto LABEL_138;
      }
      v128 = 0;
LABEL_165:
      v162 = *(_QWORD **)(a5 + 8);
      if ((unint64_t)v162 >= *(_QWORD *)(a5 + 16))
      {
        v163 = __pa;
        *(_QWORD *)(a5 + 8) = sub_19C34E0E8((char **)a5, __pa, v128);
        if (!__pa)
          goto LABEL_123;
      }
      else
      {
        *v162 = 0;
        v162[1] = 0;
        v162[2] = 0;
        v163 = __pa;
        v164 = v128 - (_QWORD)__pa;
        if ((float *)v128 != __pa)
        {
          if (v164 < 0)
            sub_19C2A18E8();
          v165 = (char *)operator new(v128 - (_QWORD)__pa);
          *v162 = v165;
          v162[1] = v165;
          v166 = &v165[4 * (v164 >> 2)];
          v162[2] = v166;
          memcpy(v165, __pa, v164);
          v162[1] = v166;
        }
        *(_QWORD *)(a5 + 8) = v162 + 3;
        *(_QWORD *)(a5 + 8) = v162 + 3;
        if (!__pa)
          goto LABEL_123;
      }
      operator delete(v163);
LABEL_123:
      v115 = (v187 + 1);
      v114 = (char *)v208;
      v116 = v187 + 1;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((v209 - (_BYTE *)v208) >> 3) > v115);
  }
  v167 = v213;
  if (v213)
  {
    v168 = v214;
    v169 = v213;
    if (v214 != v213)
    {
      v170 = v214;
      do
      {
        v172 = (void *)*((_QWORD *)v170 - 3);
        v170 -= 24;
        v171 = v172;
        if (v172)
        {
          *((_QWORD *)v168 - 2) = v171;
          operator delete(v171);
        }
        v168 = v170;
      }
      while (v170 != v167);
      v169 = v213;
    }
    v214 = v167;
    operator delete(v169);
    v114 = (char *)v208;
  }
  if (v114)
  {
    v173 = v209;
    v174 = v114;
    if (v209 != v114)
    {
      v175 = v209;
      do
      {
        v177 = (void *)*((_QWORD *)v175 - 3);
        v175 -= 24;
        v176 = v177;
        if (v177)
        {
          *((_QWORD *)v173 - 2) = v176;
          operator delete(v176);
        }
        v173 = v175;
      }
      while (v175 != v114);
      v174 = v208;
    }
    v209 = v114;
    operator delete(v174);
  }
  v178 = (char *)v211;
  if (v211)
  {
    v179 = (char *)v212;
    v180 = v211;
    if ((void *)v212 != v211)
    {
      v181 = (char *)v212;
      do
      {
        v183 = (void *)*((_QWORD *)v181 - 3);
        v181 -= 24;
        v182 = v183;
        if (v183)
        {
          *((_QWORD *)v179 - 2) = v182;
          operator delete(v182);
        }
        v179 = v181;
      }
      while (v181 != v178);
      v180 = v211;
    }
    *(_QWORD *)&v212 = v178;
    operator delete(v180);
  }
  return 1;
}

void sub_19C34DFC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31)
{
  sub_19C311A84(&a27);
  sub_19C311A84(&a30);
  _Unwind_Resume(a1);
}

uint64_t sub_19C34E0D0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40));
}

uint64_t sub_19C34E0E0()
{
  return 1;
}

char *sub_19C34E0E8(char **a1, const void *a2, uint64_t a3)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  int64_t v14;
  void *v15;
  unint64_t v16;
  char *v17;
  char *v18;
  __int128 v19;
  char *v20;
  char *v21;
  void *v22;
  void *v23;
  __int128 v25;

  v4 = *a1;
  v3 = a1[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_19C2A18E8();
  if (0x5555555555555556 * ((a1[2] - v4) >> 3) > v6)
    v6 = 0x5555555555555556 * ((a1[2] - v4) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v4) >> 3) >= 0x555555555555555)
    v10 = 0xAAAAAAAAAAAAAAALL;
  else
    v10 = v6;
  if (v10)
  {
    if (v10 > 0xAAAAAAAAAAAAAAALL)
      sub_19C2A143C();
    v11 = (char *)operator new(24 * v10);
  }
  else
  {
    v11 = 0;
  }
  v12 = &v11[24 * v5];
  v13 = &v11[24 * v10];
  *((_QWORD *)&v25 + 1) = v13;
  *((_QWORD *)v12 + 1) = 0;
  *(_QWORD *)v12 = 0;
  *((_QWORD *)v12 + 2) = 0;
  v14 = a3 - (_QWORD)a2;
  if (v14)
  {
    if (v14 < 0)
      sub_19C2A18E8();
    v15 = operator new(v14);
    *(_QWORD *)v12 = v15;
    v16 = (unint64_t)v15 + 4 * (v14 >> 2);
    memcpy(v15, a2, v14);
    *(int64x2_t *)(v12 + 8) = vdupq_n_s64(v16);
  }
  v17 = v12 + 24;
  *(_QWORD *)&v25 = v12 + 24;
  if (v3 == v4)
  {
    *a1 = v12;
    a1[1] = v17;
    a1[2] = v13;
  }
  else
  {
    do
    {
      v18 = v12;
      *((_QWORD *)v12 - 2) = 0;
      *((_QWORD *)v12 - 1) = 0;
      v19 = *(_OWORD *)(v3 - 24);
      v3 -= 24;
      *(_OWORD *)(v12 - 24) = v19;
      v12 -= 24;
      *((_QWORD *)v18 - 1) = *((_QWORD *)v3 + 2);
      *(_QWORD *)v3 = 0;
      *((_QWORD *)v3 + 1) = 0;
      *((_QWORD *)v3 + 2) = 0;
    }
    while (v3 != v4);
    v3 = *a1;
    v20 = a1[1];
    *a1 = v12;
    *(_OWORD *)(a1 + 1) = v25;
    v17 = (char *)v25;
    if (v20 != v3)
    {
      v21 = v20;
      do
      {
        v23 = (void *)*((_QWORD *)v21 - 3);
        v21 -= 24;
        v22 = v23;
        if (v23)
        {
          *((_QWORD *)v20 - 2) = v22;
          operator delete(v22);
        }
        v20 = v21;
      }
      while (v21 != v3);
    }
  }
  if (v3)
    operator delete(v3);
  return v17;
}

void sub_19C34E2B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void **v2;
  _QWORD *v3;
  void *v5;
  va_list va;

  va_start(va, a2);
  v5 = *v2;
  if (*v2)
  {
    *v3 = v5;
    operator delete(v5);
  }
  sub_19C2F020C((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_19C34E2D8(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;

  *a1 = off_1E3D357A0;
  v2 = (void *)a1[23];
  if (v2)
  {
    a1[24] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[19];
  if (v3)
  {
    a1[20] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[16];
  if (v4)
  {
    a1[17] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[13];
  if (v5)
  {
    a1[14] = v5;
    operator delete(v5);
  }
  v6 = (std::__shared_weak_count *)a1[10];
  if (!v6)
    goto LABEL_13;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    v9 = (std::__shared_weak_count *)a1[8];
    if (!v9)
      goto LABEL_19;
  }
  else
  {
LABEL_13:
    v9 = (std::__shared_weak_count *)a1[8];
    if (!v9)
      goto LABEL_19;
  }
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
LABEL_19:
  v12 = (std::__shared_weak_count *)a1[6];
  if (!v12)
    goto LABEL_23;
  v13 = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (v14)
  {
LABEL_23:
    v15 = (void *)a1[2];
    if (!v15)
      goto LABEL_25;
    goto LABEL_24;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  v15 = (void *)a1[2];
  if (v15)
  {
LABEL_24:
    a1[3] = v15;
    operator delete(v15);
  }
LABEL_25:
  v16 = a1[1];
  a1[1] = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  return a1;
}

uint64_t sub_19C34E42C(UTF32Char theChar)
{
  unsigned __int8 v2;
  uint64_t result;

  v2 = atomic_load((unsigned __int8 *)&qword_1EDB96FF8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_1EDB96FF8))
  {
    qword_1EDB97008 = CEMCreateEmojiCharacterSet();
    __cxa_guard_release(&qword_1EDB96FF8);
  }
  result = qword_1EDB97008;
  if (qword_1EDB97008)
    return CFCharacterSetIsLongCharacterMember((CFCharacterSetRef)qword_1EDB97008, theChar) != 0;
  return result;
}

void sub_19C34E49C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1EDB96FF8);
  _Unwind_Resume(a1);
}

uint64_t sub_19C34E4B4(const __CFString *a1, uint64_t a2, uint64_t a3, char *a4, uint64_t a5, int a6)
{
  const char *CStringPtr;
  unsigned int v12;
  unsigned int v13;
  size_t v14;
  int64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  int __s2;
  UniChar buffer[64];
  const __CFString *v31;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v31 = a1;
  v34 = a2;
  v35 = a3;
  if (CFStringGetCharactersPtr(a1))
    CStringPtr = 0;
  else
    CStringPtr = CFStringGetCStringPtr(a1, 0x600u);
  v33 = CStringPtr;
  v36 = 0;
  v37 = 0;
  __s2 = 0;
  v12 = sub_19C34E798(buffer, 0);
  v13 = v12;
  if (a6 != 134217984)
  {
    v15 = 0;
    if (a5 >= 1)
    {
      v16 = 0;
      if (a3 >= 1)
      {
        v16 = 0;
        v15 = 0;
        do
        {
          if (!v16)
            v16 = a4;
          if (HIWORD(v13))
            v17 = 2;
          else
            v17 = 1;
          v15 += v17;
          v13 = sub_19C34E798(buffer, v15);
        }
        while (v15 < a3);
      }
      goto LABEL_48;
    }
LABEL_47:
    v16 = 0;
    goto LABEL_48;
  }
  if (v12 > 0x7F)
  {
    if (v12 > 0x7FF)
    {
      if (HIWORD(v12))
      {
        v19 = (v12 >> 18) | 0xFFFFFFF0;
        BYTE1(__s2) = (v12 >> 12) & 0x3F | 0x80;
        v20 = 2;
      }
      else
      {
        v19 = (v12 >> 12) | 0xFFFFFFE0;
        v20 = 1;
      }
      LOBYTE(__s2) = v19;
      v18 = v20 + 1;
      *(_BYTE *)((unint64_t)&__s2 | v20) = (v12 >> 6) & 0x3F | 0x80;
    }
    else
    {
      LOBYTE(__s2) = (v12 >> 6) | 0xC0;
      v18 = 1;
    }
    v14 = v18 + 1;
    *((_BYTE *)&buffer[-2] + v18) = v12 & 0x3F | 0x80;
  }
  else
  {
    LOBYTE(__s2) = v12;
    v14 = 1;
  }
  v15 = 0;
  if (a5 < 1)
    goto LABEL_47;
  v16 = 0;
  if (a3 > 0)
  {
    v16 = 0;
    v15 = 0;
    v21 = (unint64_t)&a4[a5];
    v22 = a4;
    do
    {
      if (!memcmp(v22, &__s2, v14))
      {
        if (!v16)
          v16 = v22;
        v22 += v14;
        if (HIWORD(v13))
          v23 = 2;
        else
          v23 = 1;
        v15 += v23;
        v24 = sub_19C34E798(buffer, v15);
        v13 = v24;
        if (v24 >= 0x80)
        {
          if (v24 >= 0x800)
          {
            if (v24 >= 0x10000)
            {
              v26 = (v24 >> 18) | 0xFFFFFFF0;
              BYTE1(__s2) = (v24 >> 12) & 0x3F | 0x80;
              v27 = 2;
            }
            else
            {
              v26 = (v24 >> 12) | 0xFFFFFFE0;
              v27 = 1;
            }
            LOBYTE(__s2) = v26;
            v25 = v27 + 1;
            *(_BYTE *)((unint64_t)&__s2 | v27) = (v24 >> 6) & 0x3F | 0x80;
          }
          else
          {
            LOBYTE(__s2) = (v24 >> 6) | 0xC0;
            v25 = 1;
          }
          v14 = v25 + 1;
          *((_BYTE *)&buffer[-2] + v25) = v24 & 0x3F | 0x80;
          if ((unint64_t)v22 >= v21)
            break;
        }
        else
        {
          LOBYTE(__s2) = v24;
          v14 = 1;
          if ((unint64_t)v22 >= v21)
            break;
        }
      }
      else
      {
        v16 = 0;
        if ((unint64_t)++v22 >= v21)
          break;
      }
    }
    while (v15 < a3);
  }
LABEL_48:
  if (v15 == a3)
    return v16 - a4;
  else
    return -1;
}

uint64_t sub_19C34E798(UniChar *buffer, int64_t a2)
{
  int64_t v4;
  uint64_t v5;
  UniChar v6;
  uint64_t v8;
  int64_t v9;
  int64_t v10;
  int64_t v11;
  int64_t v12;
  uint64_t v13;
  UniChar v14;
  uint64_t v15;
  int64_t v16;
  int64_t v17;
  CFRange v18;
  CFRange v19;

  if (a2 < 0)
    return 0;
  v4 = *((_QWORD *)buffer + 20);
  if (v4 <= a2)
    return 0;
  v5 = *((_QWORD *)buffer + 17);
  if (v5)
  {
    v6 = *(_WORD *)(v5 + 2 * (*((_QWORD *)buffer + 19) + a2));
  }
  else
  {
    v8 = *((_QWORD *)buffer + 18);
    if (v8)
    {
      v6 = *(char *)(v8 + *((_QWORD *)buffer + 19) + a2);
    }
    else
    {
      if (*((_QWORD *)buffer + 22) <= a2 || (v9 = *((_QWORD *)buffer + 21), v9 > a2))
      {
        v10 = a2 - 4;
        if ((unint64_t)a2 < 4)
          v10 = 0;
        if (v10 + 64 < v4)
          v4 = v10 + 64;
        *((_QWORD *)buffer + 21) = v10;
        *((_QWORD *)buffer + 22) = v4;
        v18.location = *((_QWORD *)buffer + 19) + v10;
        v18.length = v4 - v10;
        CFStringGetCharacters(*((CFStringRef *)buffer + 16), v18, buffer);
        v9 = *((_QWORD *)buffer + 21);
      }
      v6 = buffer[a2 - v9];
    }
  }
  if (v6 >> 10 != 54)
    return v6;
  v11 = a2 + 1;
  v12 = *((_QWORD *)buffer + 20);
  if (v12 <= a2 + 1)
    return v6;
  v13 = *((_QWORD *)buffer + 17);
  if (v13)
  {
    v14 = *(_WORD *)(v13 + 2 * (*((_QWORD *)buffer + 19) + v11));
  }
  else
  {
    v15 = *((_QWORD *)buffer + 18);
    if (v15)
    {
      v14 = *(char *)(v15 + *((_QWORD *)buffer + 19) + v11);
    }
    else
    {
      if (*((_QWORD *)buffer + 22) <= v11 || (v16 = *((_QWORD *)buffer + 21), v16 > v11))
      {
        v17 = a2 - 3;
        if ((unint64_t)a2 < 3)
          v17 = 0;
        if (v17 + 64 < v12)
          v12 = v17 + 64;
        *((_QWORD *)buffer + 21) = v17;
        *((_QWORD *)buffer + 22) = v12;
        v19.location = *((_QWORD *)buffer + 19) + v17;
        v19.length = v12 - v17;
        CFStringGetCharacters(*((CFStringRef *)buffer + 16), v19, buffer);
        v16 = *((_QWORD *)buffer + 21);
      }
      v14 = buffer[v11 - v16];
    }
  }
  if (v14 >> 10 != 55)
    return v6;
  return (v6 << 10) + v14 - 56613888;
}

uint64_t sub_19C34E924(const char *a1, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9)
{
  uint64_t v9;

  if ((a2 & 0x200) != 0)
    v9 = a9;
  else
    v9 = 0;
  return open_dprotected_np(a1, a2, 3, 0, v9);
}

void sub_19C34E95C(_QWORD *a1, const char *a2)
{
  const __CFAllocator *v3;
  const __CFString *v4;
  CFMutableStringRef MutableCopy;

  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (a2[23] < 0)
    a2 = *(const char **)a2;
  v4 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, 0x8000100u);
  MutableCopy = CFStringCreateMutableCopy(v3, 0, v4);
  CFStringTransform(MutableCopy, 0, (CFStringRef)*MEMORY[0x1E0C9B358], 0);
  sub_19C29CEF8(MutableCopy, a1);
  if (MutableCopy)
    CFRelease(MutableCopy);
  if (v4)
    CFRelease(v4);
}

void sub_19C34EA18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C2FE810((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19C34EA3C(char **a1, CFStringRef theString)
{
  CFIndex Length;
  CFIndex v5;
  char *v6;

  Length = CFStringGetLength(theString);
  v5 = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u) + 1;
  v6 = (char *)operator new[]();
  *a1 = v6;
  return CFStringGetCString(theString, v6, v5, 0x8000100u);
}

void sub_19C34EAB4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  *v1 = 0;
  MEMORY[0x1A1AD3538](v2, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

uint64_t *sub_19C34EADC(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;

  v2 = (uint64_t *)*result;
  if (*((char *)result + 23) >= 0)
    v2 = result;
  v3 = *a2;
  v4 = *a2 + 1;
  *a2 = v4;
  v5 = *((char *)v2 + v3);
  if ((v5 & 0x80000000) == 0)
    return result;
  v6 = *((unsigned __int8 *)result + 23);
  v7 = (char)v6;
  if ((v6 & 0x80u) != 0)
    v6 = result[1];
  if (v4 == v6)
    return result;
  if (v5 < 0xE0u)
  {
    if (v5 < 0xC2u)
      return result;
    goto LABEL_19;
  }
  if (v5 > 0xEFu)
  {
    if (v5 > 0xF4u)
      return result;
    v11 = v7 >= 0 ? (uint64_t)result : *result;
    if (((byte_19C477FF9[(unint64_t)*(unsigned __int8 *)(v11 + v4) >> 4] >> (v5 + 16)) & 1) == 0)
      return result;
    v4 = v3 + 2;
    *a2 = v3 + 2;
    if (*((char *)result + 23) < 0)
    {
      if (v4 == result[1])
        return result;
      v12 = (uint64_t *)*result;
    }
    else
    {
      v12 = result;
      if (v4 == *((unsigned __int8 *)result + 23))
        return result;
    }
    if (*((char *)v12 + v4) > -65)
      return result;
  }
  else
  {
    if (v7 >= 0)
      v8 = result;
    else
      v8 = (uint64_t *)*result;
    if (((a00000000000000[v5 & 0xF] >> (*((_BYTE *)v8 + v4) >> 5)) & 1) == 0)
      return result;
  }
  *a2 = ++v4;
  v9 = *((unsigned __int8 *)result + 23);
  v7 = (char)v9;
  if ((v9 & 0x80u) != 0)
    v9 = result[1];
  if (v4 != v9)
  {
LABEL_19:
    if (v7 >= 0)
      v10 = result;
    else
      v10 = (uint64_t *)*result;
    if (*((char *)v10 + v4) <= -65)
      *a2 = v4 + 1;
  }
  return result;
}

uint64_t sub_19C34EC30@<X0>(char *__format@<X0>, uint64_t a2@<X8>, ...)
{
  int v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  char *v10;
  size_t v11;
  va_list va;

  va_start(va, a2);
  v4 = vsnprintf(0, 0, __format, va);
  if (v4 <= -2)
    sub_19C2A1A54();
  v5 = v4 + 1;
  if (v5 >= 0x17)
  {
    v7 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v7 = v5 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    *(_QWORD *)(a2 + 8) = v5;
    *(_QWORD *)(a2 + 16) = v8 | 0x8000000000000000;
    *(_QWORD *)a2 = v6;
    goto LABEL_8;
  }
  *(_BYTE *)(a2 + 23) = v5;
  v6 = (void *)a2;
  if (v4 != -1)
LABEL_8:
    bzero(v6, v5);
  *((_BYTE *)v6 + v5) = 0;
  v9 = *(char *)(a2 + 23);
  if (v9 >= 0)
    v10 = (char *)a2;
  else
    v10 = *(char **)a2;
  if (v9 >= 0)
    v11 = *(unsigned __int8 *)(a2 + 23);
  else
    v11 = *(_QWORD *)(a2 + 8);
  return vsnprintf(v10, v11, __format, va);
}

void sub_19C34ED18(uint64_t *a1, os_log_t oslog)
{
  uint64_t *v4;
  int v5;
  const char *v6;
  __int16 v7;
  uint64_t *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (os_log_type_enabled(oslog, OS_LOG_TYPE_ERROR))
  {
    if (*((char *)a1 + 23) >= 0)
      v4 = a1;
    else
      v4 = (uint64_t *)*a1;
    v5 = 136315394;
    v6 = "logToErrorAndDebug";
    v7 = 2080;
    v8 = v4;
    _os_log_error_impl(&dword_19C291000, oslog, OS_LOG_TYPE_ERROR, "%s: %s", (uint8_t *)&v5, 0x16u);
  }
}

CFErrorRef sub_19C34EDD8(uint64_t a1)
{
  __CFDictionary *Mutable;
  const char *v3;
  CFStringRef v4;
  CFErrorRef v5;

  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (*(char *)(a1 + 23) >= 0)
    v3 = (const char *)a1;
  else
    v3 = *(const char **)a1;
  v4 = CFStringCreateWithCString(0, v3, 0x8000100u);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0C9AFE0], v4);
  v5 = CFErrorCreate(0, CFSTR("com.apple.LanguageModeling"), 0, Mutable);
  if (v4)
    CFRelease(v4);
  if (Mutable)
    CFRelease(Mutable);
  return v5;
}

void sub_19C34EEA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C32BBE4((const void **)va);
  _Unwind_Resume(a1);
}

void sub_19C34EECC()
{
  const __CFURL *v0;

  v0 = (const __CFURL *)CFCopyHomeDirectoryURLForUser();
  qword_1EDB971C0 = (uint64_t)CFURLCreateCopyAppendingPathComponent(0, v0, CFSTR("Library/LanguageModeling"), 1u);
  CFRelease(v0);
}

uint64_t sub_19C34EF14()
{
  uint64_t v1;
  _QWORD v2[2];
  uint64_t v3;
  _QWORD v4[20];

  v4[19] = *MEMORY[0x1E0C80C00];
  sub_19C34EFE0(v2);
  std::istream::tellg();
  v2[0] = *MEMORY[0x1E0DE4F40];
  *(_QWORD *)((char *)v2 + *(_QWORD *)(v2[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 24);
  MEMORY[0x1A1AD3238](&v3);
  std::istream::~istream();
  MEMORY[0x1A1AD34CC](v4);
  return v1;
}

void sub_19C34EFC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  sub_19C2A7A14(&a26);
  _Unwind_Resume(a1);
}

_QWORD *sub_19C34EFE0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;

  v2 = MEMORY[0x1E0DE4FA8];
  v3 = MEMORY[0x1E0DE4FA8] + 64;
  a1[53] = MEMORY[0x1E0DE4FA8] + 64;
  v4 = a1 + 2;
  v5 = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 8);
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 16);
  *a1 = v5;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v5 - 24)) = v6;
  a1[1] = 0;
  v7 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v7, a1 + 2);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  *a1 = v2 + 24;
  a1[53] = v3;
  MEMORY[0x1A1AD322C](v4);
  if (!std::filebuf::open())
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 4);
  return a1;
}

void sub_19C34F0C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::istream::~istream();
  MEMORY[0x1A1AD34CC](v1 + 424);
  _Unwind_Resume(a1);
}

uint64_t sub_19C34F0F8(uint64_t a1, __int128 *a2, unsigned __int8 *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  std::ios_base *v12;
  uint64_t v13;
  __int128 v14;
  const std::locale::facet *v15;
  unsigned __int8 v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  unint64_t v21;
  char *v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 *v28;
  unsigned __int8 *v29;
  _BYTE *p_p;
  unsigned __int8 *v31;
  unsigned __int8 *v32;
  uint64_t v33;
  unsigned __int8 *v34;
  unint64_t v35;
  size_t v36;
  std::locale::__imp *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  __int128 v42;
  _QWORD *v43;
  _QWORD *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  char *v49;
  char *v50;
  char *v51;
  __int128 v52;
  _QWORD *v53;
  size_t v54;
  std::locale::__imp *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  int v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t *v64;
  std::locale __dst[2];
  unint64_t v66;
  void *__p;
  unint64_t v68;
  uint64_t v69;
  _QWORD v70[2];
  uint64_t v71;
  _QWORD v72[8];
  __int128 v73;
  __int128 v74;
  int v75;
  uint64_t v76;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v6 = MEMORY[0x1E0DE4FD0];
  v64 = &v76;
  v7 = MEMORY[0x1E0DE4FD0] + 104;
  v76 = MEMORY[0x1E0DE4FD0] + 104;
  v8 = MEMORY[0x1E0DE4FD0] + 64;
  v9 = (_QWORD *)MEMORY[0x1E0DE4F50];
  v10 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 16);
  v11 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 24);
  v71 = MEMORY[0x1E0DE4FD0] + 64;
  v70[0] = v10;
  *(_QWORD *)((char *)v70 + *(_QWORD *)(v10 - 24)) = v11;
  v70[1] = 0;
  v12 = (std::ios_base *)((char *)v70 + *(_QWORD *)(v70[0] - 24));
  std::ios_base::init(v12, v72);
  v12[1].__vftable = 0;
  v12[1].__fmtflags_ = -1;
  v13 = v9[5];
  v71 = v9[4];
  *(_QWORD *)((char *)&v72[-1] + *(_QWORD *)(v71 - 24)) = v13;
  v70[0] = v9[1];
  *(_QWORD *)((char *)v70 + *(_QWORD *)(v70[0] - 24)) = v9[6];
  v76 = v7;
  v70[0] = v6 + 24;
  v71 = v8;
  std::streambuf::basic_streambuf();
  v72[0] = MEMORY[0x1E0DE4FB8] + 16;
  v73 = 0u;
  v74 = 0u;
  v75 = 24;
  if (&v73 != a2)
  {
    if (*((char *)a2 + 23) < 0)
    {
      sub_19C2E53E4(&v73, *(void **)a2, *((_QWORD *)a2 + 1));
    }
    else
    {
      v73 = *a2;
      *(_QWORD *)&v74 = *((_QWORD *)a2 + 2);
    }
  }
  sub_19C34F7EC((uint64_t)v72);
  __p = 0;
  v68 = 0;
  v69 = 0;
  while (1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)v70 + *(_QWORD *)(v70[0] - 24)));
    v15 = std::locale::use_facet(__dst, MEMORY[0x1E0DE4A90]);
    v16 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v15->__vftable[2].~facet_0)(v15, 10);
    std::locale::~locale(__dst);
    v17 = sub_19C2CB10C(v70, (uint64_t)&__p, v16);
    if ((*((_BYTE *)v17 + *(_QWORD *)(*v17 - 24) + 32) & 5) != 0)
      break;
    v18 = 0;
    v19 = HIBYTE(v69);
    v20 = SHIBYTE(v69) >> 31;
    v22 = (char *)__p;
    v21 = v68;
    if (v69 >= 0)
      v23 = HIBYTE(v69);
    else
      v23 = v68;
    v24 = (char)a3[23];
    v25 = a3[23];
    v26 = *((_QWORD *)a3 + 1);
    if (v24 >= 0)
      v27 = a3[23];
    else
      v27 = *((_QWORD *)a3 + 1);
    if (v23 && v27)
    {
      v18 = 0;
      v28 = *(unsigned __int8 **)a3;
      if (v24 >= 0)
        v29 = a3;
      else
        v29 = *(unsigned __int8 **)a3;
      if (v69 >= 0)
        p_p = &__p;
      else
        p_p = __p;
      while (1)
      {
        v31 = &p_p[v18];
        v32 = &p_p[v23];
LABEL_23:
        v33 = v27;
        v34 = v29;
        while (*v31 != *v34)
        {
          ++v34;
          if (!--v33)
          {
            if (++v31 == v32)
              goto LABEL_86;
            goto LABEL_23;
          }
        }
        if (v31 == v32)
          goto LABEL_86;
        v35 = v31 - p_p;
        if (v31 - p_p == -1)
          goto LABEL_86;
        if (v35 > v18)
          break;
LABEL_72:
        v18 = v35 + 1;
        LOBYTE(v20) = (v19 & 0x80u) != 0;
        if ((v19 & 0x80u) == 0)
          p_p = &__p;
        else
          p_p = v22;
        if ((v19 & 0x80u) == 0)
          v23 = v19;
        else
          v23 = v21;
        if ((v25 & 0x80u) == 0)
          v29 = a3;
        else
          v29 = v28;
        if ((v25 & 0x80u) == 0)
          v27 = v25;
        else
          v27 = v26;
        if (v23 <= v18 || !v27)
          goto LABEL_86;
      }
      if ((v20 & 1) != 0)
      {
        if (v21 < v18)
          goto LABEL_106;
      }
      else
      {
        if (v18 > v19)
LABEL_106:
          sub_19C2E3454();
        v22 = (char *)&__p;
        v21 = v19;
      }
      if (v21 - v18 >= v35 - v18)
        v36 = v35 - v18;
      else
        v36 = v21 - v18;
      if (v36 > 0x7FFFFFFFFFFFFFF7)
        sub_19C2A1A54();
      if (v36 >= 0x17)
      {
        v38 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v36 | 7) != 0x17)
          v38 = v36 | 7;
        v39 = v38 + 1;
        v37 = (std::locale::__imp *)operator new(v38 + 1);
        __dst[1].__locale_ = (std::locale::__imp *)v36;
        v66 = v39 | 0x8000000000000000;
        __dst[0].__locale_ = v37;
      }
      else
      {
        HIBYTE(v66) = v36;
        v37 = (std::locale::__imp *)__dst;
        if (!v36)
          goto LABEL_47;
      }
      memmove(v37, &v22[v18], v36);
LABEL_47:
      *((_BYTE *)v37 + v36) = 0;
      v41 = *(_QWORD **)(a1 + 8);
      v40 = *(_QWORD *)(a1 + 16);
      if ((unint64_t)v41 >= v40)
      {
        v44 = *(_QWORD **)a1;
        v45 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v41 - *(_QWORD *)a1) >> 3);
        v46 = v45 + 1;
        if (v45 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_19C2A18E8();
        v47 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v40 - (_QWORD)v44) >> 3);
        if (2 * v47 > v46)
          v46 = 2 * v47;
        if (v47 >= 0x555555555555555)
          v48 = 0xAAAAAAAAAAAAAAALL;
        else
          v48 = v46;
        if (v48)
        {
          if (v48 > 0xAAAAAAAAAAAAAAALL)
            sub_19C2A143C();
          v49 = (char *)operator new(24 * v48);
        }
        else
        {
          v49 = 0;
        }
        v50 = &v49[24 * v45];
        *(_OWORD *)v50 = *(_OWORD *)&__dst[0].__locale_;
        *((_QWORD *)v50 + 2) = v66;
        v51 = &v49[24 * v48];
        __dst[1].__locale_ = 0;
        v66 = 0;
        __dst[0].__locale_ = 0;
        v43 = v50 + 24;
        if (v41 == v44)
        {
          *(_QWORD *)a1 = v50;
          *(_QWORD *)(a1 + 8) = v43;
          *(_QWORD *)(a1 + 16) = v51;
        }
        else
        {
          do
          {
            v52 = *(_OWORD *)(v41 - 3);
            *((_QWORD *)v50 - 1) = *(v41 - 1);
            *(_OWORD *)(v50 - 24) = v52;
            v50 -= 24;
            *(v41 - 2) = 0;
            *(v41 - 1) = 0;
            *(v41 - 3) = 0;
            v41 -= 3;
          }
          while (v41 != v44);
          v41 = *(_QWORD **)a1;
          v53 = *(_QWORD **)(a1 + 8);
          *(_QWORD *)a1 = v50;
          *(_QWORD *)(a1 + 8) = v43;
          *(_QWORD *)(a1 + 16) = v51;
          while (v53 != v41)
          {
            if (*((char *)v53 - 1) < 0)
              operator delete((void *)*(v53 - 3));
            v53 -= 3;
          }
        }
        if (v41)
          operator delete(v41);
      }
      else
      {
        v42 = *(_OWORD *)&__dst[0].__locale_;
        v41[2] = v66;
        *(_OWORD *)v41 = v42;
        __dst[1].__locale_ = 0;
        v66 = 0;
        __dst[0].__locale_ = 0;
        v43 = v41 + 3;
      }
      *(_QWORD *)(a1 + 8) = v43;
      if (SHIBYTE(v66) < 0)
        operator delete(__dst[0].__locale_);
      v19 = HIBYTE(v69);
      v22 = (char *)__p;
      v21 = v68;
      v25 = a3[23];
      v28 = *(unsigned __int8 **)a3;
      v26 = *((_QWORD *)a3 + 1);
      goto LABEL_72;
    }
LABEL_86:
    if ((v20 & 1) != 0)
    {
      if (v18 < v21)
      {
        v19 = v21;
        goto LABEL_91;
      }
    }
    else if (v18 < v19)
    {
      v22 = (char *)&__p;
LABEL_91:
      v54 = v19 - v18;
      if (v19 - v18 > 0x7FFFFFFFFFFFFFF7)
        sub_19C2A1A54();
      if (v54 >= 0x17)
      {
        v56 = (v54 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v54 | 7) != 0x17)
          v56 = v54 | 7;
        v57 = v56 + 1;
        v55 = (std::locale::__imp *)operator new(v56 + 1);
        __dst[1].__locale_ = (std::locale::__imp *)v54;
        v66 = v57 | 0x8000000000000000;
        __dst[0].__locale_ = v55;
      }
      else
      {
        HIBYTE(v66) = v19 - v18;
        v55 = (std::locale::__imp *)__dst;
      }
      memmove(v55, &v22[v18], v54);
      *((_BYTE *)v55 + v54) = 0;
      v58 = *(_QWORD *)(a1 + 8);
      if (v58 < *(_QWORD *)(a1 + 16))
      {
        v14 = *(_OWORD *)&__dst[0].__locale_;
        *(_QWORD *)(v58 + 16) = v66;
        *(_OWORD *)v58 = v14;
        *(_QWORD *)(a1 + 8) = v58 + 24;
      }
      else
      {
        v59 = sub_19C307C78((void **)a1, (uint64_t)__dst);
        v60 = SHIBYTE(v66);
        *(_QWORD *)(a1 + 8) = v59;
        if (v60 < 0)
          operator delete(__dst[0].__locale_);
      }
    }
  }
  if (SHIBYTE(v69) < 0)
    operator delete(__p);
  v70[0] = *MEMORY[0x1E0DE4F50];
  v61 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v70 + *(_QWORD *)(v70[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v71 = v61;
  v72[0] = MEMORY[0x1E0DE4FB8] + 16;
  v62 = v64;
  if (SBYTE7(v74) < 0)
    operator delete((void *)v73);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1A1AD34CC](v62);
}

void sub_19C34F728(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::locale a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  void **v39;

  std::iostream::~basic_iostream();
  MEMORY[0x1A1AD34CC](a10);
  sub_19C307B68(v39);
  _Unwind_Resume(a1);
}

std::string *sub_19C34F7EC(uint64_t a1)
{
  std::string *result;
  unint64_t v3;
  std::string *v4;
  unint64_t v5;
  int v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  *(_QWORD *)(a1 + 88) = 0;
  result = (std::string *)(a1 + 64);
  v3 = *(unsigned __int8 *)(a1 + 87);
  if ((*(char *)(a1 + 87) & 0x80000000) == 0)
  {
    v4 = result;
    v5 = *(unsigned __int8 *)(a1 + 87);
    v6 = *(_DWORD *)(a1 + 96);
    if ((v6 & 8) == 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  v4 = *(std::string **)(a1 + 64);
  v5 = *(_QWORD *)(a1 + 72);
  v6 = *(_DWORD *)(a1 + 96);
  if ((v6 & 8) != 0)
  {
LABEL_3:
    *(_QWORD *)(a1 + 88) = (char *)v4 + v5;
    *(_QWORD *)(a1 + 16) = v4;
    *(_QWORD *)(a1 + 24) = v4;
    *(_QWORD *)(a1 + 32) = (char *)v4 + v5;
  }
LABEL_4:
  if ((v6 & 0x10) == 0)
    return result;
  *(_QWORD *)(a1 + 88) = (char *)v4 + v5;
  if ((v3 & 0x80) != 0)
  {
    v3 = *(_QWORD *)(a1 + 72);
    v7 = (*(_QWORD *)(a1 + 80) & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v3 >= v7)
    {
      result = *(std::string **)(a1 + 64);
      *(_QWORD *)(a1 + 72) = v7;
LABEL_14:
      result->__r_.__value_.__s.__data_[v7] = 0;
      LODWORD(v8) = *(char *)(a1 + 87);
      if ((v8 & 0x80000000) != 0)
        goto LABEL_15;
LABEL_12:
      v8 = v8;
      goto LABEL_16;
    }
  }
  else
  {
    v7 = 22;
    if (v3 > 0x15)
    {
      *(_BYTE *)(a1 + 87) = 22;
      goto LABEL_14;
    }
  }
  result = std::string::append(result, v7 - v3, 0);
  LODWORD(v8) = *(char *)(a1 + 87);
  if ((v8 & 0x80000000) == 0)
    goto LABEL_12;
LABEL_15:
  v8 = *(_QWORD *)(a1 + 72);
LABEL_16:
  *(_QWORD *)(a1 + 40) = v4;
  *(_QWORD *)(a1 + 48) = v4;
  *(_QWORD *)(a1 + 56) = (char *)v4 + v8;
  if ((*(_BYTE *)(a1 + 96) & 3) != 0)
  {
    if (v5 >> 31)
    {
      v9 = ((v5 - 0x80000000) * (unsigned __int128)0x200000005uLL) >> 64;
      v10 = 0x7FFFFFFF * ((v9 + ((v5 - 0x80000000 - v9) >> 1)) >> 30);
      v4 = (std::string *)((char *)v4 + v10 + 0x7FFFFFFF);
      v5 = v5 - v10 - 0x7FFFFFFF;
      *(_QWORD *)(a1 + 48) = v4;
    }
    if (v5)
      *(_QWORD *)(a1 + 48) = (char *)v4 + v5;
  }
  return result;
}

void sub_19C34F930(uint64_t a1, uint64_t *a2, uint64_t *a3, int a4)
{
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  std::string::size_type size;
  uint64_t v14;
  __int128 v15;
  std::string *p_p;
  std::string::size_type v17;
  uint64_t v18;
  uint64_t v20;
  __int128 v21;
  std::string::size_type v22;
  uint64_t *v23;
  double v24;
  double v25;
  uint64_t *v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  uint8x8_t v30;
  uint64_t v31;
  std::string::size_type v32;
  std::string::size_type v33;
  std::string *v34;
  std::string *p_s1;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  std::string *v39;
  std::string::size_type v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint8x8_t v44;
  uint64_t *v45;
  uint64_t *v46;
  unint64_t v47;
  _QWORD **v48;
  _QWORD *v49;
  std::string::size_type v50;
  std::string *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _BOOL4 v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  void **v64;
  void **v65;
  uint64_t *v66;
  uint64_t v67;
  void **v68;
  void **v69;
  void *v70;
  void *v71;
  std::string::size_type v72;
  std::string::size_type v73;
  std::string *v74;
  uint64_t v75;
  std::string *v76;
  int v77;
  int v78;
  int v79;
  void *v81;
  uint64_t v82;
  float v83;
  _BOOL8 v84;
  unint64_t v85;
  unint64_t v86;
  size_t prime;
  void *v88;
  unint64_t v89;
  uint8x8_t v90;
  uint64_t v91;
  _QWORD *v92;
  _QWORD *v93;
  unint64_t v94;
  uint64_t v95;
  void **v96;
  void **v97;
  _QWORD *v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  void *v103;
  char *v104;
  void **v105;
  void **v106;
  std::string v108;
  std::string __p;
  int v110;
  std::string __s1;
  uint64_t v112;
  void *v113[2];
  void *v114[2];
  float v115;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_OWORD *)v113 = 0u;
  *(_OWORD *)v114 = 0u;
  v115 = 1.0;
  if (a2 == a3)
    return;
  v5 = a2;
  v6 = a4 & 0xFFFFFFFE;
  v7 = MEMORY[0x1E0C80978];
  do
  {
    v9 = *v5;
    v10 = operator new();
    sub_19C2E1F84(v10, v9);
    v112 = v10;
    v11 = *(_QWORD *)(v10 + 32);
    if (*(_QWORD *)(v10 + 24) == v11)
      goto LABEL_41;
    if (*(char *)(v11 - 9) < 0)
    {
      sub_19C2B5238(&__p, *(void **)(v11 - 32), *(_QWORD *)(v11 - 24));
    }
    else
    {
      v12 = *(_OWORD *)(v11 - 32);
      __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v11 - 16);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v12;
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      size = __p.__r_.__value_.__l.__size_;
      operator delete(__p.__r_.__value_.__l.__data_);
      if (!size)
        goto LABEL_41;
    }
    else if (!*((_BYTE *)&__p.__r_.__value_.__s + 23))
    {
      goto LABEL_41;
    }
    v14 = *(_QWORD *)(v10 + 32);
    if (*(_QWORD *)(v10 + 24) == v14)
    {
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
      __p.__r_.__value_.__s.__data_[0] = 0;
    }
    else if (*(char *)(v14 - 9) < 0)
    {
      sub_19C2B5238(&__p, *(void **)(v14 - 32), *(_QWORD *)(v14 - 24));
    }
    else
    {
      v15 = *(_OWORD *)(v14 - 32);
      __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v14 - 16);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v15;
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v17 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v17 = __p.__r_.__value_.__l.__size_;
    if (!v17)
      goto LABEL_34;
    while (1)
    {
      v18 = p_p->__r_.__value_.__s.__data_[0];
      if (!(p_p->__r_.__value_.__s.__data_[0] < 0 ? __maskrune(v18, 0x4000uLL) : *(_DWORD *)(v7 + 4 * v18 + 60) & 0x4000))
        break;
      p_p = (std::string *)((char *)p_p + 1);
      if (!--v17)
        goto LABEL_34;
    }
    v20 = *(_QWORD *)(v10 + 32);
    if (*(_QWORD *)(v10 + 24) == v20)
    {
LABEL_34:
      *((_BYTE *)&__s1.__r_.__value_.__s + 23) = 0;
      __s1.__r_.__value_.__s.__data_[0] = 0;
    }
    else if (*(char *)(v20 - 9) < 0)
    {
      sub_19C2B5238(&__s1, *(void **)(v20 - 32), *(_QWORD *)(v20 - 24));
    }
    else
    {
      v21 = *(_OWORD *)(v20 - 32);
      __s1.__r_.__value_.__r.__words[2] = *(_QWORD *)(v20 - 16);
      *(_OWORD *)&__s1.__r_.__value_.__l.__data_ = v21;
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v22 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
    if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v22 = __s1.__r_.__value_.__l.__size_;
    if (v22)
    {
      if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
        goto LABEL_68;
      goto LABEL_41;
    }
    language_modeling::v1::CompletionStem::pop_back((language_modeling::v1::CompletionStem *)&v112);
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
    __p.__r_.__value_.__s.__data_[0] = 0;
    v110 = 0;
    language_modeling::v1::CompletionStem::try_push_back(&v112, (uint64_t)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) == 0)
        goto LABEL_41;
LABEL_68:
      operator delete(__s1.__r_.__value_.__l.__data_);
      if ((_DWORD)v6 != 2)
        goto LABEL_69;
LABEL_42:
      sub_19C3D8294(&__s1, *(const void ***)v10, *(const void ***)(v10 + 8));
      sub_19C34E95C(&__p, (const char *)&__s1);
      if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__s1.__r_.__value_.__l.__data_);
      if (!sub_19C350620(v113, (uint64_t)&__p))
        goto LABEL_161;
      __s1.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
      v23 = sub_19C35081C((uint64_t)v113, (uint64_t)&__p, (__int128 **)&__s1);
      v24 = *(double *)(v23[5] + 128);
      v25 = *(double *)(v10 + 128);
      if (v24 < v25)
      {
LABEL_46:
        v26 = sub_19C350620(v113, (uint64_t)&__p);
        if (v26)
        {
          v27 = v26;
          v28 = (unint64_t)v113[1];
          v29 = v26[1];
          v30 = (uint8x8_t)vcnt_s8((int8x8_t)v113[1]);
          v30.i16[0] = vaddlv_u8(v30);
          if (v30.u32[0] > 1uLL)
          {
            if ((void *)v29 >= v113[1])
              v29 %= (unint64_t)v113[1];
          }
          else
          {
            v29 &= (unint64_t)v113[1] - 1;
          }
          v45 = (uint64_t *)*((_QWORD *)v113[0] + v29);
          do
          {
            v46 = v45;
            v45 = (uint64_t *)*v45;
          }
          while (v45 != v26);
          if (v46 == (uint64_t *)v114)
            goto LABEL_147;
          v47 = v46[1];
          if (v30.u32[0] > 1uLL)
          {
            if ((void *)v47 >= v113[1])
              v47 %= (unint64_t)v113[1];
          }
          else
          {
            v47 &= (unint64_t)v113[1] - 1;
          }
          if (v47 != v29)
          {
LABEL_147:
            if (!*v26)
              goto LABEL_148;
            v61 = *(_QWORD *)(*v26 + 8);
            if (v30.u32[0] > 1uLL)
            {
              if ((void *)v61 >= v113[1])
                v61 %= (unint64_t)v113[1];
            }
            else
            {
              v61 &= (unint64_t)v113[1] - 1;
            }
            if (v61 != v29)
LABEL_148:
              *((_QWORD *)v113[0] + v29) = 0;
          }
          v62 = *v26;
          if (*v26)
          {
            v63 = *(_QWORD *)(v62 + 8);
            if (v30.u32[0] > 1uLL)
            {
              if (v63 >= v28)
                v63 %= v28;
            }
            else
            {
              v63 &= v28 - 1;
            }
            if (v63 != v29)
            {
              *((_QWORD *)v113[0] + v63) = v46;
              v62 = *v26;
            }
          }
          *v46 = v62;
          *v26 = 0;
          --v114[1];
          v64 = (void **)v26[5];
          v27[5] = 0;
          if (v64)
          {
            v65 = sub_19C2E25C8(v64);
            MEMORY[0x1A1AD355C](v65, 0x1030C403C62F202);
          }
          if (*((char *)v27 + 39) < 0)
            operator delete((void *)v27[2]);
          operator delete(v27);
        }
LABEL_161:
        __s1.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
        v66 = sub_19C35081C((uint64_t)v113, (uint64_t)&__p, (__int128 **)&__s1);
        v67 = operator new();
        sub_19C2E1F84(v67, v10);
        v68 = (void **)v66[5];
        v66[5] = v67;
        if (v68)
        {
          v69 = sub_19C2E25C8(v68);
          MEMORY[0x1A1AD355C](v69, 0x1030C403C62F202);
        }
LABEL_163:
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          v70 = (void *)__p.__r_.__value_.__r.__words[0];
LABEL_3:
          operator delete(v70);
          goto LABEL_4;
        }
        goto LABEL_4;
      }
      if (v24 != v25)
        goto LABEL_163;
      sub_19C3D8294(&__s1, *(const void ***)v10, *(const void ***)(v10 + 8));
      v31 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
      if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v32 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
      else
        v32 = __s1.__r_.__value_.__l.__size_;
      v33 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v33 = __p.__r_.__value_.__l.__size_;
      if (v32 != v33)
      {
LABEL_133:
        v60 = 0;
        if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) == 0)
          goto LABEL_134;
LABEL_234:
        operator delete(__s1.__r_.__value_.__l.__data_);
        if (!v60)
          goto LABEL_163;
        goto LABEL_46;
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v34 = &__p;
      else
        v34 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
      {
        v71 = (void *)__s1.__r_.__value_.__r.__words[0];
        if (memcmp(__s1.__r_.__value_.__l.__data_, v34, __s1.__r_.__value_.__l.__size_))
        {
          operator delete(v71);
          goto LABEL_163;
        }
      }
      else if (*((_BYTE *)&__s1.__r_.__value_.__s + 23))
      {
        p_s1 = &__s1;
        while (p_s1->__r_.__value_.__s.__data_[0] == v34->__r_.__value_.__s.__data_[0])
        {
          p_s1 = (std::string *)((char *)p_s1 + 1);
          v34 = (std::string *)((char *)v34 + 1);
          if (!--v31)
            goto LABEL_167;
        }
        goto LABEL_133;
      }
LABEL_167:
      sub_19C3D8294(&v108, *(const void ***)v23[5], *(const void ***)(v23[5] + 8));
      if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v72 = HIBYTE(v108.__r_.__value_.__r.__words[2]);
      else
        v72 = v108.__r_.__value_.__l.__size_;
      v73 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v73 = __p.__r_.__value_.__l.__size_;
      if (v72 == v73)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v74 = &__p;
        else
          v74 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((*((_BYTE *)&v108.__r_.__value_.__s + 23) & 0x80) != 0)
        {
          v81 = (void *)v108.__r_.__value_.__r.__words[0];
          v60 = memcmp(v108.__r_.__value_.__l.__data_, v74, v108.__r_.__value_.__l.__size_) != 0;
          goto LABEL_232;
        }
        if (!*((_BYTE *)&v108.__r_.__value_.__s + 23))
        {
          v60 = 0;
          if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
            goto LABEL_234;
LABEL_134:
          if (!v60)
            goto LABEL_163;
          goto LABEL_46;
        }
        v75 = HIBYTE(v108.__r_.__value_.__r.__words[2]) - 1;
        v76 = &v108;
        do
        {
          v78 = v76->__r_.__value_.__s.__data_[0];
          v76 = (std::string *)((char *)v76 + 1);
          v77 = v78;
          v79 = v74->__r_.__value_.__s.__data_[0];
          v74 = (std::string *)((char *)v74 + 1);
          v60 = v77 != v79;
        }
        while (v77 == v79 && v75-- != 0);
        if ((*((_BYTE *)&v108.__r_.__value_.__s + 23) & 0x80) == 0)
        {
LABEL_233:
          if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
            goto LABEL_234;
          goto LABEL_134;
        }
      }
      else
      {
        v60 = 1;
        if ((*((_BYTE *)&v108.__r_.__value_.__s + 23) & 0x80) == 0)
          goto LABEL_233;
      }
      v81 = (void *)v108.__r_.__value_.__r.__words[0];
LABEL_232:
      operator delete(v81);
      goto LABEL_233;
    }
    if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
      goto LABEL_68;
LABEL_41:
    if ((_DWORD)v6 == 2)
      goto LABEL_42;
LABEL_69:
    sub_19C3D8294(&__p, *(const void ***)v10, *(const void ***)(v10 + 8));
    v36 = sub_19C350620(v113, (uint64_t)&__p);
    v37 = v36;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if (v37)
        goto LABEL_4;
    }
    else if (v36)
    {
      goto LABEL_4;
    }
    v38 = v6;
    sub_19C3D8294(&__s1, *(const void ***)v10, *(const void ***)(v10 + 8));
    if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v39 = &__s1;
    else
      v39 = (std::string *)__s1.__r_.__value_.__r.__words[0];
    if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v40 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
    else
      v40 = __s1.__r_.__value_.__l.__size_;
    v41 = sub_19C2A0F2C((uint64_t)&__p, (uint64_t *)v39, v40);
    v42 = v41;
    v43 = (unint64_t)v113[1];
    if (v113[1])
    {
      v44 = (uint8x8_t)vcnt_s8((int8x8_t)v113[1]);
      v44.i16[0] = vaddlv_u8(v44);
      if (v44.u32[0] > 1uLL)
      {
        v7 = v41;
        if ((void *)v41 >= v113[1])
          v7 = v41 % (unint64_t)v113[1];
      }
      else
      {
        v7 = ((unint64_t)v113[1] - 1) & v41;
      }
      v48 = (_QWORD **)*((_QWORD *)v113[0] + v7);
      if (v48)
      {
        v49 = *v48;
        if (*v48)
        {
          if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v50 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
          else
            v50 = __s1.__r_.__value_.__l.__size_;
          if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v51 = &__s1;
          else
            v51 = (std::string *)__s1.__r_.__value_.__r.__words[0];
          if (v44.u32[0] < 2uLL)
          {
            while (1)
            {
              v56 = v49[1];
              if (v56 == v42)
              {
                v57 = *((unsigned __int8 *)v49 + 39);
                if ((v57 & 0x80u) == 0)
                  v58 = *((unsigned __int8 *)v49 + 39);
                else
                  v58 = v49[3];
                if (v58 == v50)
                {
                  if ((v57 & 0x80) != 0)
                  {
                    if (!memcmp((const void *)v49[2], v51, v49[3]))
                      goto LABEL_132;
                  }
                  else
                  {
                    if (!*((_BYTE *)v49 + 39))
                      goto LABEL_132;
                    v59 = 0;
                    while (*((unsigned __int8 *)v49 + v59 + 16) == v51->__r_.__value_.__s.__data_[v59])
                    {
                      if (v57 == ++v59)
                        goto LABEL_132;
                    }
                  }
                }
              }
              else if ((v56 & (v43 - 1)) != v7)
              {
                goto LABEL_188;
              }
              v49 = (_QWORD *)*v49;
              if (!v49)
                goto LABEL_188;
            }
          }
          do
          {
            v52 = v49[1];
            if (v52 == v42)
            {
              v53 = *((unsigned __int8 *)v49 + 39);
              if ((v53 & 0x80u) == 0)
                v54 = *((unsigned __int8 *)v49 + 39);
              else
                v54 = v49[3];
              if (v54 == v50)
              {
                if ((v53 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v49[2], v51, v49[3]))
                  {
LABEL_132:
                    v6 = v38;
                    v7 = MEMORY[0x1E0C80978];
                    goto LABEL_227;
                  }
                }
                else
                {
                  if (!*((_BYTE *)v49 + 39))
                    goto LABEL_132;
                  v55 = 0;
                  while (*((unsigned __int8 *)v49 + v55 + 16) == v51->__r_.__value_.__s.__data_[v55])
                  {
                    if (v53 == ++v55)
                      goto LABEL_132;
                  }
                }
              }
            }
            else
            {
              if (v52 >= v43)
                v52 %= v43;
              if (v52 != v7)
                break;
            }
            v49 = (_QWORD *)*v49;
          }
          while (v49);
        }
      }
    }
LABEL_188:
    v49 = operator new(0x30uLL);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v49;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)v114;
    *v49 = 0;
    v49[1] = v42;
    *(std::string *)(v49 + 2) = __s1;
    memset(&__s1, 0, sizeof(__s1));
    v82 = operator new();
    *(_QWORD *)(v82 + 176) = 0;
    *(_OWORD *)(v82 + 144) = 0u;
    *(_OWORD *)(v82 + 160) = 0u;
    *(_OWORD *)(v82 + 112) = 0u;
    *(_OWORD *)(v82 + 128) = 0u;
    *(_OWORD *)(v82 + 80) = 0u;
    *(_OWORD *)(v82 + 96) = 0u;
    *(_OWORD *)(v82 + 48) = 0u;
    *(_OWORD *)(v82 + 64) = 0u;
    *(_OWORD *)(v82 + 16) = 0u;
    *(_OWORD *)(v82 + 32) = 0u;
    *(_OWORD *)v82 = 0u;
    v49[5] = v82;
    __p.__r_.__value_.__s.__data_[16] = 1;
    v83 = (float)((unint64_t)v114[1] + 1);
    if (!v43 || (float)(v115 * (float)v43) < v83)
    {
      v84 = v43 < 3 || (v43 & (v43 - 1)) != 0;
      v85 = v84 | (2 * v43);
      v86 = vcvtps_u32_f32(v83 / v115);
      if (v85 <= v86)
        prime = v86;
      else
        prime = v85;
      if (prime == 1)
      {
        prime = 2;
      }
      else if ((prime & (prime - 1)) != 0)
      {
        prime = std::__next_prime(prime);
      }
      v88 = v113[1];
      if ((void *)prime > v113[1])
        goto LABEL_201;
      if ((void *)prime < v113[1])
      {
        v89 = vcvtps_u32_f32((float)(unint64_t)v114[1] / v115);
        if (v113[1] < (void *)3
          || (v90 = (uint8x8_t)vcnt_s8((int8x8_t)v113[1]), v90.i16[0] = vaddlv_u8(v90), v90.u32[0] > 1uLL))
        {
          v89 = std::__next_prime(v89);
        }
        else
        {
          v91 = 1 << -(char)__clz(v89 - 1);
          if (v89 >= 2)
            v89 = v91;
        }
        if (prime <= v89)
          prime = v89;
        if (prime < (unint64_t)v88)
LABEL_201:
          sub_19C2EC6BC((uint64_t)v113, prime);
      }
      v43 = (unint64_t)v113[1];
      if (((unint64_t)v113[1] & ((unint64_t)v113[1] - 1)) != 0)
      {
        if ((void *)v42 >= v113[1])
          v7 = v42 % (unint64_t)v113[1];
        else
          v7 = v42;
      }
      else
      {
        v7 = ((unint64_t)v113[1] - 1) & v42;
      }
    }
    v92 = v113[0];
    v93 = (_QWORD *)*((_QWORD *)v113[0] + v7);
    if (v93)
    {
      *v49 = *v93;
      v6 = v38;
      v7 = MEMORY[0x1E0C80978];
LABEL_225:
      *v93 = v49;
      goto LABEL_226;
    }
    *v49 = v114[0];
    v114[0] = v49;
    v92[v7] = v114;
    v6 = v38;
    v7 = MEMORY[0x1E0C80978];
    if (*v49)
    {
      v94 = *(_QWORD *)(*v49 + 8);
      if ((v43 & (v43 - 1)) != 0)
      {
        if (v94 >= v43)
          v94 %= v43;
      }
      else
      {
        v94 &= v43 - 1;
      }
      v93 = (char *)v113[0] + 8 * v94;
      goto LABEL_225;
    }
LABEL_226:
    ++v114[1];
LABEL_227:
    v95 = operator new();
    sub_19C2E1F84(v95, v10);
    v96 = (void **)v49[5];
    v49[5] = v95;
    if (v96)
    {
      v97 = sub_19C2E25C8(v96);
      MEMORY[0x1A1AD355C](v97, 0x1030C403C62F202);
    }
    if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
    {
      v70 = (void *)__s1.__r_.__value_.__r.__words[0];
      goto LABEL_3;
    }
LABEL_4:
    v8 = sub_19C2E25C8((void **)v10);
    MEMORY[0x1A1AD355C](v8, 0x1030C403C62F202);
    ++v5;
  }
  while (v5 != a3);
  v98 = v114[0];
  if (v114[0])
  {
    v99 = *(uint64_t **)(a1 + 8);
    do
    {
      v100 = v98[5];
      if ((unint64_t)v99 >= *(_QWORD *)(a1 + 16))
      {
        v99 = sub_19C350C80((uint64_t **)a1, v98[5]);
      }
      else
      {
        v101 = operator new();
        sub_19C2E1F84(v101, v100);
        *v99++ = v101;
      }
      *(_QWORD *)(a1 + 8) = v99;
      v98 = (_QWORD *)*v98;
    }
    while (v98);
    v102 = (char *)v114[0];
    if (v114[0])
    {
      do
      {
        v104 = *(char **)v102;
        v105 = (void **)*((_QWORD *)v102 + 5);
        *((_QWORD *)v102 + 5) = 0;
        if (v105)
        {
          v106 = sub_19C2E25C8(v105);
          MEMORY[0x1A1AD355C](v106, 0x1030C403C62F202);
        }
        if (v102[39] < 0)
          operator delete(*((void **)v102 + 2));
        operator delete(v102);
        v102 = v104;
      }
      while (v104);
    }
  }
  v103 = v113[0];
  v113[0] = 0;
  if (v103)
    operator delete(v103);
}

void sub_19C350554(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void **a28,__int16 a29,char a30,char a31)
{
  sub_19C350F00(&a15);
  if (a27 < 0)
    operator delete(__p);
  language_modeling::v1::CompletionStem::~CompletionStem(&a28);
  sub_19C350E74((uint64_t)&a29);
  sub_19C2F06DC(a10);
  _Unwind_Resume(a1);
}

uint64_t *sub_19C350620(_QWORD *a1, uint64_t a2)
{
  _BYTE *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t **v11;
  uint64_t *v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *result;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  v2 = (_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v5 = v4;
  }
  v6 = sub_19C2A0F2C((uint64_t)&v25, (uint64_t *)a2, v5);
  v7 = (int8x8_t)a1[1];
  if (v7)
  {
    v8 = v6;
    v9 = (uint8x8_t)vcnt_s8(v7);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v10 = v6;
      if (v6 >= *(_QWORD *)&v7)
        v10 = v6 % *(_QWORD *)&v7;
    }
    else
    {
      v10 = (*(_QWORD *)&v7 - 1) & v6;
    }
    v11 = *(uint64_t ***)(*a1 + 8 * v10);
    if (v11)
    {
      v12 = *v11;
      if (*v11)
      {
        v13 = v2[23];
        if (v13 >= 0)
          v14 = v2[23];
        else
          v14 = *((_QWORD *)v2 + 1);
        if (v13 < 0)
          v2 = *(_BYTE **)v2;
        if (v9.u32[0] < 2uLL)
        {
          v15 = *(_QWORD *)&v7 - 1;
          while (1)
          {
            v21 = v12[1];
            if (v21 == v8)
            {
              v22 = *((unsigned __int8 *)v12 + 39);
              if ((v22 & 0x80u) == 0)
                v23 = *((unsigned __int8 *)v12 + 39);
              else
                v23 = v12[3];
              if (v23 == v14)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v12[2], v2, v12[3]))
                    return v12;
                }
                else
                {
                  if (!*((_BYTE *)v12 + 39))
                    return v12;
                  v24 = 0;
                  while (*((unsigned __int8 *)v12 + v24 + 16) == v2[v24])
                  {
                    if (v22 == ++v24)
                      return v12;
                  }
                }
              }
            }
            else if ((v21 & v15) != v10)
            {
              return 0;
            }
            result = 0;
            v12 = (uint64_t *)*v12;
            if (!v12)
              return result;
          }
        }
        while (1)
        {
          v17 = v12[1];
          if (v17 == v8)
          {
            v18 = *((unsigned __int8 *)v12 + 39);
            if ((v18 & 0x80u) == 0)
              v19 = *((unsigned __int8 *)v12 + 39);
            else
              v19 = v12[3];
            if (v19 == v14)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v12[2], v2, v12[3]))
                  return v12;
              }
              else
              {
                if (!*((_BYTE *)v12 + 39))
                  return v12;
                v20 = 0;
                while (*((unsigned __int8 *)v12 + v20 + 16) == v2[v20])
                {
                  if (v18 == ++v20)
                    return v12;
                }
              }
            }
          }
          else
          {
            if (v17 >= *(_QWORD *)&v7)
              v17 %= *(_QWORD *)&v7;
            if (v17 != v10)
              return 0;
          }
          result = 0;
          v12 = (uint64_t *)*v12;
          if (!v12)
            return result;
        }
      }
    }
  }
  return 0;
}

uint64_t *sub_19C35081C(uint64_t a1, uint64_t a2, __int128 **a3)
{
  unint64_t v3;
  _BYTE *v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t **v13;
  uint64_t *v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _BYTE *v26;
  __int128 *v27;
  __int128 v28;
  uint64_t v29;
  float v30;
  float v31;
  _BOOL8 v32;
  unint64_t v33;
  unint64_t v34;
  size_t prime;
  int8x8_t v36;
  unint64_t v37;
  uint8x8_t v38;
  uint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  _QWORD v43[2];
  char v44;

  v5 = (_BYTE *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v8 = v7;
  }
  v9 = sub_19C2A0F2C((uint64_t)v43, (uint64_t *)a2, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v3 = v9;
      if (v9 >= v11)
        v3 = v9 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v9;
    }
    v13 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        v15 = v5[23];
        if (v15 >= 0)
          v16 = v5[23];
        else
          v16 = *((_QWORD *)v5 + 1);
        if (v15 < 0)
          v5 = *(_BYTE **)v5;
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v21 = v14[1];
            if (v21 == v10)
            {
              v22 = *((unsigned __int8 *)v14 + 39);
              if ((v22 & 0x80u) == 0)
                v23 = *((unsigned __int8 *)v14 + 39);
              else
                v23 = v14[3];
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v14[2], v5, v14[3]))
                    return v14;
                }
                else
                {
                  if (!*((_BYTE *)v14 + 39))
                    return v14;
                  v24 = 0;
                  while (*((unsigned __int8 *)v14 + v24 + 16) == v5[v24])
                  {
                    if (v22 == ++v24)
                      return v14;
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            v14 = (uint64_t *)*v14;
            if (!v14)
              goto LABEL_51;
          }
        }
        do
        {
          v17 = v14[1];
          if (v17 == v10)
          {
            v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0)
              v19 = *((unsigned __int8 *)v14 + 39);
            else
              v19 = v14[3];
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v14[2], v5, v14[3]))
                  return v14;
              }
              else
              {
                if (!*((_BYTE *)v14 + 39))
                  return v14;
                v20 = 0;
                while (*((unsigned __int8 *)v14 + v20 + 16) == v5[v20])
                {
                  if (v18 == ++v20)
                    return v14;
                }
              }
            }
          }
          else
          {
            if (v17 >= v11)
              v17 %= v11;
            if (v17 != v3)
              break;
          }
          v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  v25 = operator new(0x30uLL);
  v43[0] = v25;
  v43[1] = a1 + 16;
  v44 = 0;
  *v25 = 0;
  v25[1] = v10;
  v26 = v25 + 2;
  v27 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    sub_19C2B5238(v26, *(void **)v27, *((_QWORD *)v27 + 1));
  }
  else
  {
    v28 = *v27;
    v25[4] = *((_QWORD *)v27 + 2);
    *(_OWORD *)v26 = v28;
  }
  v29 = operator new();
  *(_QWORD *)(v29 + 176) = 0;
  *(_OWORD *)(v29 + 144) = 0u;
  *(_OWORD *)(v29 + 160) = 0u;
  *(_OWORD *)(v29 + 112) = 0u;
  *(_OWORD *)(v29 + 128) = 0u;
  *(_OWORD *)(v29 + 80) = 0u;
  *(_OWORD *)(v29 + 96) = 0u;
  *(_OWORD *)(v29 + 48) = 0u;
  *(_OWORD *)(v29 + 64) = 0u;
  *(_OWORD *)(v29 + 16) = 0u;
  *(_OWORD *)(v29 + 32) = 0u;
  *(_OWORD *)v29 = 0u;
  v25[5] = v29;
  v44 = 1;
  v30 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v31 = *(float *)(a1 + 32);
  if (!v11 || (float)(v31 * (float)v11) < v30)
  {
    v32 = 1;
    if (v11 >= 3)
      v32 = (v11 & (v11 - 1)) != 0;
    v33 = v32 | (2 * v11);
    v34 = vcvtps_u32_f32(v30 / v31);
    if (v33 <= v34)
      prime = v34;
    else
      prime = v33;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v36 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v36)
      goto LABEL_66;
    if (prime < *(_QWORD *)&v36)
    {
      v37 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v36 < 3uLL || (v38 = (uint8x8_t)vcnt_s8(v36), v38.i16[0] = vaddlv_u8(v38), v38.u32[0] > 1uLL))
      {
        v37 = std::__next_prime(v37);
      }
      else
      {
        v39 = 1 << -(char)__clz(v37 - 1);
        if (v37 >= 2)
          v37 = v39;
      }
      if (prime <= v37)
        prime = v37;
      if (prime < *(_QWORD *)&v36)
LABEL_66:
        sub_19C2EC6BC(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v3 = v10 % v11;
      else
        v3 = v10;
    }
    else
    {
      v3 = (v11 - 1) & v10;
    }
  }
  v40 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v40)
  {
    *(_QWORD *)v43[0] = *v40;
    *v40 = v43[0];
  }
  else
  {
    *(_QWORD *)v43[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v43[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v43[0])
    {
      v41 = *(_QWORD *)(*(_QWORD *)v43[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v41 >= v11)
          v41 %= v11;
      }
      else
      {
        v41 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v41) = v43[0];
    }
  }
  v14 = (uint64_t *)v43[0];
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_19C350C60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C350F00((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_19C350C80(uint64_t **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t *v11;
  char *v12;
  uint64_t *v13;
  char *v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  char *v26;
  void **v27;
  void **v28;
  void **v29;

  v2 = (char *)a1[1] - (char *)*a1;
  v3 = v2 >> 3;
  v4 = (v2 >> 3) + 1;
  if (v4 >> 61)
    sub_19C2A18E8();
  v7 = (char *)a1[2] - (char *)*a1;
  if (v7 >> 2 > v4)
    v4 = v7 >> 2;
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8)
    v8 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v8 = v4;
  if (v8)
  {
    if (v8 >> 61)
      sub_19C2A143C();
    v9 = (char *)operator new(8 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = operator new();
  sub_19C2E1F84(v10, a2);
  v11 = (uint64_t *)&v9[8 * v3];
  v12 = &v9[8 * v8];
  *v11 = v10;
  v13 = v11 + 1;
  v14 = (char *)*a1;
  v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v11;
    a1[1] = v13;
    a1[2] = (uint64_t *)v12;
  }
  else
  {
    v16 = v15 - (char *)*a1 - 8;
    if (v16 < 0x78
      || &v15[-(v16 & 0xFFFFFFFFFFFFFFF8) - 8] < (char *)v11 && &v9[v2 - (v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v15)
    {
      goto LABEL_31;
    }
    v17 = (v16 >> 3) + 1;
    v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    v19 = &v15[-v18];
    v11 = (uint64_t *)((char *)v11 - v18);
    v20 = &v9[8 * v3 - 16];
    v21 = v15 - 16;
    v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v24 = *((_OWORD *)v21 - 1);
      v23 = *(_OWORD *)v21;
      *((_OWORD *)v21 - 1) = 0uLL;
      *(_OWORD *)v21 = 0uLL;
      *((_OWORD *)v20 - 1) = v24;
      *(_OWORD *)v20 = v23;
      v20 -= 32;
      v21 -= 32;
      v22 -= 4;
    }
    while (v22);
    v15 = v19;
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_31:
      do
      {
        v25 = *((_QWORD *)v15 - 1);
        v15 -= 8;
        *(_QWORD *)v15 = 0;
        *--v11 = v25;
      }
      while (v15 != v14);
    }
    v15 = (char *)*a1;
    v26 = (char *)a1[1];
    *a1 = v11;
    a1[1] = v13;
    a1[2] = (uint64_t *)v12;
    while (v26 != v15)
    {
      v28 = (void **)*((_QWORD *)v26 - 1);
      v26 -= 8;
      v27 = v28;
      *(_QWORD *)v26 = 0;
      if (v28)
      {
        v29 = sub_19C2E25C8(v27);
        MEMORY[0x1A1AD355C](v29, 0x1030C403C62F202);
      }
    }
  }
  if (v15)
    operator delete(v15);
  return v13;
}

void sub_19C350E4C(void *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD355C](v1, 0x1030C403C62F202);
  sub_19C2CDAC8(a1);
}

uint64_t sub_19C350E74(uint64_t a1)
{
  char *v2;
  void *v3;
  char *v5;
  void **v6;
  void **v7;

  v2 = *(char **)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = *(char **)v2;
      v6 = (void **)*((_QWORD *)v2 + 5);
      *((_QWORD *)v2 + 5) = 0;
      if (v6)
      {
        v7 = sub_19C2E25C8(v6);
        MEMORY[0x1A1AD355C](v7, 0x1030C403C62F202);
      }
      if (v2[39] < 0)
        operator delete(*((void **)v2 + 2));
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

uint64_t *sub_19C350F00(uint64_t *a1)
{
  uint64_t v2;
  void **v3;
  void **v4;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      v3 = *(void ***)(v2 + 40);
      *(_QWORD *)(v2 + 40) = 0;
      if (v3)
      {
        v4 = sub_19C2E25C8(v3);
        MEMORY[0x1A1AD355C](v4, 0x1030C403C62F202);
      }
      if (*(char *)(v2 + 39) < 0)
        operator delete(*(void **)(v2 + 16));
    }
    operator delete((void *)v2);
  }
  return a1;
}

const void **sub_19C350F70(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

double sub_19C350FA0(uint64_t a1)
{
  CFDateRef v1;
  CFDateRef v2;
  double v3;
  void *exception;

  v1 = CFDateCreate(0, -(*MEMORY[0x1E0C9ADF8] + (double)a1 * -0.000001));
  if (!v1)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD3154](exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v2 = v1;
  v3 = MEMORY[0x1A1AD28E4]();
  CFRelease(v2);
  return v3;
}

void sub_19C35103C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19C351054(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C350F70((const void **)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_19C351068(_QWORD *__dst, uint64_t a2)
{
  _QWORD *v2;
  int v3;
  size_t v4;
  unint64_t v5;
  unint64_t v6;
  const void **v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v2 = __dst;
  v3 = *(_DWORD *)(a2 + 120);
  if ((v3 & 0x10) != 0)
  {
    v5 = *(_QWORD *)(a2 + 112);
    v6 = *(_QWORD *)(a2 + 72);
    if (v5 < v6)
    {
      *(_QWORD *)(a2 + 112) = v6;
      v5 = v6;
    }
    v7 = (const void **)(a2 + 64);
  }
  else
  {
    if ((v3 & 8) == 0)
    {
      v4 = 0;
      *((_BYTE *)__dst + 23) = 0;
      goto LABEL_16;
    }
    v7 = (const void **)(a2 + 40);
    v5 = *(_QWORD *)(a2 + 56);
  }
  v8 = *v7;
  v4 = v5 - (_QWORD)*v7;
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    sub_19C2A1A54();
  if (v4 >= 0x17)
  {
    v9 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v9 = v4 | 7;
    v10 = v9 + 1;
    v11 = operator new(v9 + 1);
    v2[1] = v4;
    v2[2] = v10 | 0x8000000000000000;
    *v2 = v11;
    v2 = v11;
  }
  else
  {
    *((_BYTE *)__dst + 23) = v4;
    if (!v4)
      goto LABEL_16;
  }
  __dst = memmove(v2, v8, v4);
LABEL_16:
  *((_BYTE *)v2 + v4) = 0;
  return __dst;
}

uint64_t sub_19C351140(_BYTE *a1, uint64_t a2, long double *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  std::ios_base *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  size_t v20;
  unint64_t v21;
  const void **v22;
  const void *v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v28;
  _QWORD v29[2];
  _QWORD v30[3];
  uint64_t v31;
  unint64_t v32;
  void *__p[2];
  __int128 v34;
  int v35;
  uint64_t v36[20];

  v6 = MEMORY[0x1E0DE4FE0];
  v7 = MEMORY[0x1E0DE4FE0] + 64;
  v8 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v9 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v10 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v36[0] = MEMORY[0x1E0DE4FE0] + 64;
  v28 = v9;
  *(_QWORD *)((char *)&v29[-1] + *(_QWORD *)(v9 - 24)) = v10;
  v11 = (std::ios_base *)((char *)&v29[-1] + *(_QWORD *)(v28 - 24));
  std::ios_base::init(v11, v29);
  v11[1].__vftable = 0;
  v11[1].__fmtflags_ = -1;
  v28 = v6 + 24;
  v36[0] = v7;
  std::streambuf::basic_streambuf();
  v12 = MEMORY[0x1E0DE4FB8];
  v29[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v34 = 0u;
  v35 = 16;
  v13 = v28;
  *(_QWORD *)((char *)&v29[1] + *(_QWORD *)(v28 - 24)) = 3;
  *(_DWORD *)((char *)v29 + *(_QWORD *)(v13 - 24)) = *(_DWORD *)((_BYTE *)v29 + *(_QWORD *)(v13 - 24)) & 0xFFFFFEFB | 4;
  v14 = *(char *)(a2 + 23);
  if (v14 >= 0)
    v15 = a2;
  else
    v15 = *(_QWORD *)a2;
  if (v14 >= 0)
    v16 = *(unsigned __int8 *)(a2 + 23);
  else
    v16 = *(_QWORD *)(a2 + 8);
  v17 = sub_19C2A1B24(&v28, v15, v16);
  sub_19C2A1B24(v17, (uint64_t)": ", 2);
  log10(*a3);
  v18 = (_QWORD *)std::ostream::operator<<();
  sub_19C2A1B24(v18, (uint64_t)"+", 1);
  v19 = (_QWORD *)std::ostream::operator<<();
  sub_19C2A1B24(v19, (uint64_t)" ", 1);
  if ((v35 & 0x10) != 0)
  {
    v21 = *((_QWORD *)&v34 + 1);
    if (*((_QWORD *)&v34 + 1) < v32)
    {
      *((_QWORD *)&v34 + 1) = v32;
      v21 = v32;
    }
    v22 = (const void **)&v31;
  }
  else
  {
    if ((v35 & 8) == 0)
    {
      v20 = 0;
      a1[23] = 0;
      goto LABEL_22;
    }
    v22 = (const void **)v30;
    v21 = v30[2];
  }
  v23 = *v22;
  v20 = v21 - (_QWORD)*v22;
  if (v20 >= 0x7FFFFFFFFFFFFFF8)
    sub_19C2A1A54();
  if (v20 >= 0x17)
  {
    v24 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v20 | 7) != 0x17)
      v24 = v20 | 7;
    v25 = v24 + 1;
    v26 = operator new(v24 + 1);
    *((_QWORD *)a1 + 1) = v20;
    *((_QWORD *)a1 + 2) = v25 | 0x8000000000000000;
    *(_QWORD *)a1 = v26;
    a1 = v26;
    goto LABEL_21;
  }
  a1[23] = v20;
  if (v20)
LABEL_21:
    memmove(a1, v23, v20);
LABEL_22:
  a1[v20] = 0;
  v28 = *v8;
  *(_QWORD *)((char *)&v29[-1] + *(_QWORD *)(v28 - 24)) = v8[3];
  v29[0] = v12 + 16;
  if (SBYTE7(v34) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A1AD34CC](v36);
}

void sub_19C3513C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x1A1AD34CC](v1);
  _Unwind_Resume(a1);
}

void sub_19C3513F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_19C2B39CC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19C351404(std::string *a1, const std::string::value_type *a2)
{
  std::string::size_type v3;
  std::string::size_type v4;
  uint64_t v5;
  std::string::size_type v6;
  std::string *v7;
  std::string::size_type size;

  v3 = *((_QWORD *)a2 + 1);
  if (a2[23] >= 0)
  {
    v4 = *((unsigned __int8 *)a2 + 23);
  }
  else
  {
    a2 = *(const std::string::value_type **)a2;
    v4 = v3;
  }
  std::string::append(a1, a2, v4);
  if (SHIBYTE(a1->__r_.__value_.__r.__words[2]) < 0)
  {
    size = a1->__r_.__value_.__l.__size_;
    if (size)
    {
      v7 = (std::string *)a1->__r_.__value_.__r.__words[0];
      if (!*(_BYTE *)(a1->__r_.__value_.__r.__words[0] + size - 1))
      {
        v6 = size - 1;
        a1->__r_.__value_.__l.__size_ = v6;
        goto LABEL_11;
      }
    }
  }
  else
  {
    v5 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
    if (*((_BYTE *)&a1->__r_.__value_.__s + 23) && !a1->__r_.__value_.__s.__data_[v5 - 1])
    {
      v6 = v5 - 1;
      *((_BYTE *)&a1->__r_.__value_.__s + 23) = v5 - 1;
      v7 = a1;
LABEL_11:
      v7->__r_.__value_.__s.__data_[v6] = 0;
    }
  }
  std::string::push_back(a1, 10);
}

_BYTE *sub_19C351494(_BYTE *__dst, uint64_t a2)
{
  _DWORD *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unsigned __int16 *v6;
  int v7;
  int v8;
  int v10;
  _DWORD *v11;
  BOOL v12;
  _BYTE *v13;
  BOOL v14;

  v2 = __dst;
  v3 = *(unsigned __int8 *)(a2 + 23);
  v4 = *(_QWORD *)(a2 + 8);
  if ((v3 & 0x80u) == 0)
    v5 = *(unsigned __int8 *)(a2 + 23);
  else
    v5 = *(_QWORD *)(a2 + 8);
  if (v5 == 4)
  {
    if ((v3 & 0x80u) == 0)
      v11 = (_DWORD *)a2;
    else
      v11 = *(_DWORD **)a2;
    if (*v11 == 1047736124)
    {
      __dst[23] = 0;
      *__dst = 0;
      v10 = 2;
      goto LABEL_36;
    }
LABEL_19:
    if ((v3 & 0x80) != 0)
    {
      v13 = *(_BYTE **)a2;
      if (*v13 != 120 || (v13[v4 - 1] == 120 ? (v14 = v4 > 1) : (v14 = 0), !v14))
      {
        __dst = sub_19C2B5238(__dst, v13, v4);
        v10 = 0;
        goto LABEL_36;
      }
      __dst = sub_19C2B5238(__dst, v13, v4);
    }
    else
    {
      if (*(_BYTE *)a2 != 120 || (*(_BYTE *)(a2 + v3 - 1) == 120 ? (v12 = v3 > 1) : (v12 = 0), !v12))
      {
        v10 = 0;
        *(_OWORD *)__dst = *(_OWORD *)a2;
        *((_QWORD *)__dst + 2) = *(_QWORD *)(a2 + 16);
        goto LABEL_36;
      }
      *(_OWORD *)__dst = *(_OWORD *)a2;
      *((_QWORD *)__dst + 2) = *(_QWORD *)(a2 + 16);
    }
    v10 = 3;
    goto LABEL_36;
  }
  if (v5 != 3)
    goto LABEL_19;
  v6 = (v3 & 0x80u) == 0 ? (unsigned __int16 *)a2 : *(unsigned __int16 **)a2;
  v7 = *v6;
  v8 = *((unsigned __int8 *)v6 + 2);
  if (v7 != 29500 || v8 != 62)
    goto LABEL_19;
  __dst[23] = 0;
  *__dst = 0;
  v10 = 1;
LABEL_36:
  v2[6] = v10;
  return __dst;
}

uint64_t **sub_19C3515D8(uint64_t **result, unint64_t *a2, unint64_t *a3)
{
  unint64_t *v4;
  uint64_t **v5;
  uint64_t *v6;
  uint64_t v7;
  void **v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  unsigned __int16 *v12;
  int v13;
  int v14;
  _BOOL4 v16;
  int v17;
  uint64_t v18;
  void *__p[2];
  unint64_t v20;
  int v21;
  uint64_t v22;

  *result = 0;
  result[1] = 0;
  result[2] = 0;
  if (a2 != a3)
  {
    v4 = a2;
    v5 = result;
    v6 = 0;
    v7 = 0;
    do
    {
      v9 = operator new();
      *(_QWORD *)(v9 + 176) = 0;
      *(_OWORD *)(v9 + 144) = 0u;
      *(_OWORD *)(v9 + 160) = 0u;
      *(_OWORD *)(v9 + 112) = 0u;
      *(_OWORD *)(v9 + 128) = 0u;
      *(_OWORD *)(v9 + 80) = 0u;
      *(_OWORD *)(v9 + 96) = 0u;
      *(_OWORD *)(v9 + 48) = 0u;
      *(_OWORD *)(v9 + 64) = 0u;
      *(_OWORD *)(v9 + 16) = 0u;
      *(_OWORD *)(v9 + 32) = 0u;
      *(_OWORD *)v9 = 0u;
      v22 = v9;
      v10 = *((unsigned __int8 *)v4 + 23);
      v11 = (char)v10;
      if ((v10 & 0x80u) != 0)
        v10 = v4[1];
      if (v10 == 6)
      {
        v12 = (unsigned __int16 *)*v4;
        if (v11 >= 0)
          v12 = (unsigned __int16 *)v4;
        v13 = *(_DWORD *)v12;
        v14 = v12[2];
        v16 = v13 == 1380275320 && v14 == 30797;
        if ((v11 & 0x80000000) == 0)
        {
LABEL_18:
          *(_OWORD *)__p = *(_OWORD *)v4;
          v20 = v4[2];
          goto LABEL_21;
        }
      }
      else
      {
        v16 = 0;
        if ((v11 & 0x80000000) == 0)
          goto LABEL_18;
      }
      sub_19C2B5238(__p, (void *)*v4, v4[1]);
LABEL_21:
      if (v16)
        v17 = 3;
      else
        v17 = 0;
      v21 = v17;
      language_modeling::v1::CompletionStem::try_push_back(&v22, (uint64_t)__p);
      if (SHIBYTE(v20) < 0)
        operator delete(__p[0]);
      *(_QWORD *)(v9 + 128) = v4[3];
      *(_QWORD *)(v9 + 120) = v7;
      if (v6 >= v5[2])
      {
        v6 = sub_19C350C80(v5, v9);
        v5[1] = v6;
        ++v7;
      }
      else
      {
        v18 = operator new();
        result = (uint64_t **)sub_19C2E1F84(v18, v9);
        *v6++ = v18;
        v9 = v22;
        v5[1] = v6;
        ++v7;
        if (!v9)
          goto LABEL_5;
      }
      v8 = sub_19C2E25C8((void **)v9);
      result = (uint64_t **)MEMORY[0x1A1AD355C](v8, 0x1030C403C62F202);
LABEL_5:
      v4 += 4;
    }
    while (v4 != a3);
  }
  return result;
}

void sub_19C3517B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  _QWORD *v6;
  va_list va;

  va_start(va, a6);
  language_modeling::v1::CompletionStem::~CompletionStem((void ***)va);
  sub_19C2F06DC(v6);
  _Unwind_Resume(a1);
}

void sub_19C351804(uint64_t a1)
{
  sub_19C351828(a1);
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C351828(uint64_t a1)
{
  size_t v2;
  void *v3;
  _QWORD *v4;
  _QWORD *v5;
  int *v6;
  char *v7;
  size_t v8;
  void *v9;
  uint64_t v10;
  char v12[23];
  char v13;

  *(_QWORD *)a1 = &off_1E3D376A8;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2)
  {
    v3 = *(void **)(a1 + 16);
    if (v3)
    {
      if (munmap(v3, v2))
      {
        v13 = 5;
        strcpy(v12, "ERROR");
        v4 = sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)v12, 5);
        sub_19C2A1B24(v4, (uint64_t)": ", 2);
        v5 = sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)"failed to unmap region: ", 24);
        v6 = __error();
        v7 = strerror(*v6);
        v8 = strlen(v7);
        sub_19C2A1B24(v5, (uint64_t)v7, v8);
        sub_19C351928();
        if (v13 < 0)
        {
          v9 = *(void **)v12;
LABEL_8:
          operator delete(v9);
        }
      }
    }
    else
    {
      v10 = *(_QWORD *)(a1 + 8);
      if (v10)
      {
        v9 = (void *)(v10 - *(int *)(a1 + 32));
        goto LABEL_8;
      }
    }
  }
  return a1;
}

uint64_t sub_19C351928()
{
  const std::locale::facet *v0;
  std::locale v2;

  std::ios_base::getloc((const std::ios_base *)(MEMORY[0x1E0DE4A50] + *(_QWORD *)(*MEMORY[0x1E0DE4A50] - 24)));
  v0 = std::locale::use_facet(&v2, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v0->__vftable[2].~facet_0)(v0, 10);
  std::locale::~locale(&v2);
  std::ostream::put();
  return std::ostream::flush();
}

void sub_19C3519AC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  sub_19C2CDAC8(a1);
}

uint64_t sub_19C3519C4(uint64_t a1, int a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  const char *v18;
  int v19;
  int v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v36;
  _QWORD *v37;
  int *v38;
  char *v39;
  size_t v40;
  void *v41[2];
  char v42;
  void *__p[2];
  char v44;
  unint64_t v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  std::istream::tellg();
  if (!a2)
    goto LABEL_10;
  if ((v45 & 0x800000000000000FLL) == 0)
  {
    v18 = *(char *)(a3 + 23) >= 0 ? (const char *)a3 : *(const char **)a3;
    v19 = open(v18, 0);
    if (v19 != -1)
    {
      v20 = sysconf(29);
      v21 = v45 % v20;
      v22 = (char *)mmap(0, v21 + a4, 1, 1, v19, v45 / v20 * v20);
      if (close(v19) || v22 == (char *)-1)
      {
        v44 = 4;
        strcpy((char *)__p, "INFO");
        v36 = sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)__p, 4);
        sub_19C2A1B24(v36, (uint64_t)": ", 2);
        v37 = sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)"Mapping of file failed: ", 24);
        v38 = __error();
        v39 = strerror(*v38);
        v40 = strlen(v39);
        sub_19C2A1B24(v37, (uint64_t)v39, v40);
        sub_19C351928();
        if (v44 < 0)
          operator delete(__p[0]);
      }
      else
      {
        v23 = operator new();
        *(_QWORD *)v23 = &off_1E3D376A8;
        *(_QWORD *)(v23 + 8) = &v22[v21];
        *(_QWORD *)(v23 + 16) = v22;
        *(_QWORD *)(v23 + 24) = v21 + a4;
        *(_DWORD *)(v23 + 32) = v21;
        std::istream::seekg();
        if (a1)
          return v23;
        (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
      }
    }
  }
  v44 = 7;
  strcpy((char *)__p, "WARNING");
  v8 = sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)__p, 7);
  sub_19C2A1B24(v8, (uint64_t)": ", 2);
  sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)"File mapping at offset ", 23);
  v9 = (_QWORD *)std::ostream::operator<<();
  v10 = sub_19C2A1B24(v9, (uint64_t)" of file ", 9);
  v11 = *(char *)(a3 + 23);
  v12 = v11 >= 0 ? a3 : *(_QWORD *)a3;
  v13 = v11 >= 0 ? *(unsigned __int8 *)(a3 + 23) : *(_QWORD *)(a3 + 8);
  v14 = sub_19C2A1B24(v10, v12, v13);
  sub_19C2A1B24(v14, (uint64_t)" could not be honored, reading instead.", 39);
  sub_19C351928();
  if (v44 < 0)
  {
    operator delete(__p[0]);
    if (a4)
      goto LABEL_11;
  }
  else
  {
LABEL_10:
    if (a4)
    {
LABEL_11:
      v15 = (char *)operator new(a4 + 16);
      v16 = 16 - (v15 & 0xFu);
      v17 = &v15[v16];
      goto LABEL_22;
    }
  }
  LODWORD(v16) = 0;
  v17 = 0;
LABEL_22:
  v23 = operator new();
  *(_QWORD *)v23 = &off_1E3D376A8;
  *(_QWORD *)(v23 + 8) = v17;
  *(_QWORD *)(v23 + 16) = 0;
  *(_QWORD *)(v23 + 24) = a4;
  *(_DWORD *)(v23 + 32) = v16;
  if (a4)
  {
    while (1)
    {
      v24 = a4 >= 0x10000000 ? 0x10000000 : a4;
      std::istream::tellg();
      v25 = (_QWORD *)std::istream::read();
      if ((*((_BYTE *)v25 + *(_QWORD *)(*v25 - 24) + 32) & 5) != 0)
        break;
      v17 += v24;
      a4 -= v24;
      if (!a4)
        return v23;
    }
    v42 = 5;
    strcpy((char *)v41, "ERROR");
    v26 = sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)v41, 5);
    sub_19C2A1B24(v26, (uint64_t)": ", 2);
    sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)"Failed to read ", 15);
    v27 = (_QWORD *)std::ostream::operator<<();
    sub_19C2A1B24(v27, (uint64_t)" bytes at offset ", 17);
    v28 = (_QWORD *)std::ostream::operator<<();
    v29 = sub_19C2A1B24(v28, (uint64_t)"from \"", 6);
    v30 = *(char *)(a3 + 23);
    if (v30 >= 0)
      v31 = a3;
    else
      v31 = *(_QWORD *)a3;
    if (v30 >= 0)
      v32 = *(unsigned __int8 *)(a3 + 23);
    else
      v32 = *(_QWORD *)(a3 + 8);
    v33 = sub_19C2A1B24(v29, v31, v32);
    sub_19C2A1B24(v33, (uint64_t)"\".", 2);
    sub_19C351928();
    if (v42 < 0)
      operator delete(v41[0]);
    v34 = sub_19C351828(v23);
    MEMORY[0x1A1AD355C](v34, 0x1081C4032A62980);
    return 0;
  }
  return v23;
}

void sub_19C351E10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_19C351E70(uint64_t *a1, const __CFString *a2, const __CFDictionary *a3)
{
  unint64_t Count;
  unint64_t v7;
  CFTypeRef *v8;
  CFTypeRef *v9;
  const __CFString *v10;
  CFTypeID v11;
  const __CFString *v12;
  unint64_t v13;
  unsigned __int8 v14;
  void *v15;
  unint64_t v16;
  void **v17;
  CFTypeID v18;
  unint64_t v19;
  int v20;
  void *v21;
  void **v22;
  int v23;
  int v24;
  void **v26;
  int v27;
  int v28;
  void *v30;
  void **v31;
  int v32;
  int v33;
  CFTypeID v35;
  void *v36;
  void **v37;
  void *v38;
  uint64_t v39;
  CFTypeID v41;
  void **v42;
  void *v43;
  int v44;
  _QWORD *exception;
  _QWORD *v48;
  uint64_t *v49;
  _QWORD *v50;
  void **v51;
  uint64_t *v52;
  _QWORD *v53;
  void **v54;
  uint64_t *v55;
  _QWORD *v56;
  void **v57;
  uint64_t *v58;
  CFTypeRef *v59;
  CFTypeRef *v60;
  __int128 v61;
  void *v62[2];
  unsigned __int8 v63;
  void *__p[2];
  unsigned __int8 v65;

  sub_19C29CEF8(a2, a1);
  a1[3] = (uint64_t)CFRetain(a2);
  *((_DWORD *)a1 + 8) = 0;
  *((_WORD *)a1 + 18) = 0;
  a1[5] = 0;
  Count = CFDictionaryGetCount(a3);
  v7 = Count;
  if (Count)
  {
    if (Count >> 61)
      sub_19C2A18E8();
    v8 = (CFTypeRef *)operator new(8 * Count);
    bzero(v8, 8 * v7);
    v9 = (CFTypeRef *)operator new(8 * v7);
    bzero(v9, 8 * v7);
  }
  else
  {
    v8 = 0;
    v9 = 0;
  }
  v60 = v8;
  CFDictionaryGetKeysAndValues(a3, v8, v9);
  v59 = v9;
  if (v7)
  {
    v10 = (const __CFString *)*MEMORY[0x1E0C9AE50];
    while (1)
    {
      v11 = CFGetTypeID(*v8);
      if (v11 != CFStringGetTypeID())
      {
        exception = __cxa_allocate_exception(0x20uLL);
        sub_19C2A6D48(__p, "unexpected key type in schema");
        sub_19C31237C(exception, (__int128 *)__p);
        __cxa_throw(exception, (struct type_info *)&unk_1E3D32968, (void (*)(void *))sub_19C3123E4);
      }
      sub_19C29CEF8((const __CFString *)*v8, __p);
      v12 = (const __CFString *)*v9;
      v13 = v65;
      v14 = v65;
      v15 = __p[1];
      if ((v65 & 0x80u) == 0)
        v16 = v65;
      else
        v16 = (unint64_t)__p[1];
      if (v16 == 4)
      {
        v17 = (void **)__p[0];
        if ((v65 & 0x80u) == 0)
          v17 = __p;
        if (*(_DWORD *)v17 == 1701869908)
        {
          v18 = CFGetTypeID(*v9);
          if (v18 != CFStringGetTypeID())
          {
            v53 = __cxa_allocate_exception(0x20uLL);
            v54 = __p;
            if ((v65 & 0x80u) != 0)
              v54 = (void **)__p[0];
            v55 = a1;
            if (*((char *)a1 + 23) < 0)
              v55 = (uint64_t *)*a1;
            sub_19C34EC30("unexpected value type in schema for attribute %s and key %s", (uint64_t)v62, v54, v55);
            sub_19C31237C(v53, (__int128 *)v62);
            __cxa_throw(v53, (struct type_info *)&unk_1E3D32968, (void (*)(void *))sub_19C3123E4);
          }
          sub_19C29CEF8(v12, v62);
          v19 = v63;
          v20 = (char)v63;
          if ((v63 & 0x80u) != 0)
            v19 = (unint64_t)v62[1];
          if (v19 == 6)
          {
            v21 = v62[0];
            v26 = v62;
            if ((v63 & 0x80u) != 0)
              v26 = (void **)v62[0];
            v27 = *(_DWORD *)v26;
            v28 = *((unsigned __int16 *)v26 + 2);
            if (v27 != 1769108563 || v28 != 26478)
            {
LABEL_86:
              v48 = __cxa_allocate_exception(0x20uLL);
              v49 = a1;
              if (*((char *)a1 + 23) < 0)
                v49 = (uint64_t *)*a1;
              sub_19C34EC30("unsupported type for key %s (supported types are String and Integer)", (uint64_t)&v61, v49);
              sub_19C31237C(v48, &v61);
              __cxa_throw(v48, (struct type_info *)&unk_1E3D32968, (void (*)(void *))sub_19C3123E4);
            }
          }
          else
          {
            if (v19 != 7)
              goto LABEL_86;
            v21 = v62[0];
            v22 = v62;
            if ((v63 & 0x80u) != 0)
              v22 = (void **)v62[0];
            v23 = *(_DWORD *)v22;
            v24 = *(_DWORD *)((char *)v22 + 3);
            if (v23 != 1702129225 || v24 != 1919248229)
              goto LABEL_86;
            *((_DWORD *)a1 + 8) = 1;
          }
          if (v20 < 0)
            operator delete(v21);
          v13 = v65;
          v15 = __p[1];
          v14 = v65;
        }
      }
      if ((v14 & 0x80u) == 0)
        v30 = (void *)v13;
      else
        v30 = v15;
      if (v30 == (void *)6)
      {
        v31 = (v14 & 0x80u) == 0 ? __p : (void **)__p[0];
        v32 = *(_DWORD *)v31;
        v33 = *((unsigned __int16 *)v31 + 2);
        if (v32 == 1902734933 && v33 == 25973)
        {
          v35 = CFGetTypeID(v12);
          if (v35 != CFBooleanGetTypeID())
          {
            v56 = __cxa_allocate_exception(0x20uLL);
            v57 = __p;
            if ((v65 & 0x80u) != 0)
              v57 = (void **)__p[0];
            v58 = a1;
            if (*((char *)a1 + 23) < 0)
              v58 = (uint64_t *)*a1;
            sub_19C34EC30("unexpected value type in schema for attribute %s and key %s", (uint64_t)v62, v57, v58);
            sub_19C31237C(v56, (__int128 *)v62);
            __cxa_throw(v56, (struct type_info *)&unk_1E3D32968, (void (*)(void *))sub_19C3123E4);
          }
          *((_BYTE *)a1 + 36) = v12 == v10;
          v13 = v65;
          v15 = __p[1];
          v14 = v65;
        }
      }
      if ((v14 & 0x80u) == 0)
        v36 = (void *)v13;
      else
        v36 = v15;
      if (v36 == (void *)13)
      {
        v37 = (v14 & 0x80u) == 0 ? __p : (void **)__p[0];
        v38 = *v37;
        v39 = *(uint64_t *)((char *)v37 + 5);
        if (v38 == (void *)0x536E656B6F547349 && v39 == 0x676E697274536E65)
        {
          v41 = CFGetTypeID(v12);
          if (v41 != CFBooleanGetTypeID())
          {
            v50 = __cxa_allocate_exception(0x20uLL);
            v51 = __p;
            if ((v65 & 0x80u) != 0)
              v51 = (void **)__p[0];
            v52 = a1;
            if (*((char *)a1 + 23) < 0)
              v52 = (uint64_t *)*a1;
            sub_19C34EC30("unexpected value type in schema for attribute %s and key %s", (uint64_t)v62, v51, v52);
            sub_19C31237C(v50, (__int128 *)v62);
            __cxa_throw(v50, (struct type_info *)&unk_1E3D32968, (void (*)(void *))sub_19C3123E4);
          }
          *((_BYTE *)a1 + 37) = v12 == v10;
          v13 = v65;
          v15 = __p[1];
          v14 = v65;
        }
      }
      if ((v14 & 0x80u) != 0)
        v13 = (unint64_t)v15;
      if (v13 == 12)
      {
        v42 = (void **)__p[0];
        if ((v14 & 0x80u) == 0)
          v42 = __p;
        v43 = *v42;
        v44 = *((_DWORD *)v42 + 2);
        if (v43 == (void *)0x56746C7561666544 && v44 == 1702194273)
        {
          a1[5] = (uint64_t)CFRetain(v12);
          v14 = v65;
        }
      }
      if ((v14 & 0x80) != 0)
        operator delete(__p[0]);
      ++v9;
      ++v8;
      if (!--v7)
        goto LABEL_81;
    }
  }
  if (v9)
LABEL_81:
    operator delete(v59);
  if (v60)
    operator delete(v60);
  return a1;
}

void sub_19C352430(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  uint64_t v31;
  void *v32;

  operator delete(v32);
  if ((*(char *)(v31 + 23) & 0x80000000) == 0)
    _Unwind_Resume(a1);
  operator delete(*(void **)v31);
  _Unwind_Resume(a1);
}

uint64_t sub_19C352594(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  const void *v5;
  const void *v6;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(_QWORD **)(a1 + 16);
    v4 = **(_QWORD **)(a1 + 8);
    while (v3 != v4)
    {
      v5 = *(const void **)(v3 - 24);
      if (v5)
        CFRelease(v5);
      v6 = *(const void **)(v3 - 8);
      if (v6)
        CFRelease(v6);
      if (*(char *)(v3 - 25) < 0)
        operator delete(*(void **)(v3 - 48));
      v3 -= 48;
    }
  }
  return a1;
}

uint64_t *sub_19C352610(uint64_t *a1, __int128 **a2)
{
  unint64_t v2;
  char *v5;
  __int128 *v6;
  __int128 *v7;
  int64_t v8;
  unint64_t v9;
  char *v10;
  const __CFAllocator *v11;
  char *v12;
  __int128 v13;
  _QWORD *v14;
  size_t prime;
  __int128 *v16;
  int v17;
  uint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint8x8_t v23;
  uint64_t **v24;
  uint64_t *v25;
  char v26;
  uint64_t v27;
  unsigned __int8 *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const void **v32;
  unsigned __int8 *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const void **v37;
  unsigned __int8 *v38;
  char *v39;
  _BYTE *v40;
  __int128 v41;
  float v42;
  float v43;
  _BOOL8 v44;
  unint64_t v45;
  unint64_t v46;
  size_t v47;
  int8x8_t v48;
  unint64_t v49;
  uint8x8_t v50;
  uint64_t v51;
  _QWORD *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int8x8_t v57;
  BOOL v58;
  unint64_t v59;
  uint8x8_t v60;
  uint64_t v61;
  _QWORD *v62;
  char *v63;
  char **v64;
  char **v65;
  char v66;
  char *v67;
  char *v68;

  a1[2] = 0;
  v5 = (char *)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  v6 = *a2;
  v7 = a2[1];
  v8 = (char *)v7 - (char *)*a2;
  if (v7 != *a2)
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 4);
    if (v9 >= 0x555555555555556)
      sub_19C2A18E8();
    v10 = (char *)operator new(v8);
    *a1 = (uint64_t)v10;
    a1[1] = (uint64_t)v10;
    a1[2] = (uint64_t)&v10[48 * v9];
    v67 = v10;
    v68 = v10;
    v63 = v5;
    v64 = &v67;
    v65 = &v68;
    v66 = 0;
    v11 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v12 = v10;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        sub_19C2B5238(v12, *(void **)v6, *((_QWORD *)v6 + 1));
      }
      else
      {
        v13 = *v6;
        *((_QWORD *)v12 + 2) = *((_QWORD *)v6 + 2);
        *(_OWORD *)v12 = v13;
      }
      *((_QWORD *)v12 + 3) = CFStringCreateCopy(v11, *((CFStringRef *)v6 + 3));
      *((_DWORD *)v12 + 8) = *((_DWORD *)v6 + 8);
      *((_WORD *)v12 + 18) = *((_WORD *)v6 + 18);
      *((_QWORD *)v12 + 5) = CFRetain(*((CFTypeRef *)v6 + 5));
      v6 += 3;
      v12 = v68 + 48;
      v68 += 48;
    }
    while (v6 != v7);
    a1[1] = (uint64_t)v12;
  }
  *(_OWORD *)(a1 + 3) = 0u;
  v14 = a1 + 3;
  *(_OWORD *)(a1 + 5) = 0u;
  *((_DWORD *)a1 + 14) = *((_DWORD *)a2 + 14);
  prime = (size_t)a2[4];
  if (prime != 1)
  {
    if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v57 = (int8x8_t)a1[4];
      v58 = prime >= *(_QWORD *)&v57;
      if (prime > *(_QWORD *)&v57)
        goto LABEL_11;
    }
    else
    {
      v57 = 0;
      v58 = 1;
      if (prime)
        goto LABEL_11;
    }
    if (v58)
      goto LABEL_12;
    v59 = vcvtps_u32_f32((float)(unint64_t)a1[6] / *((float *)a1 + 14));
    if (*(_QWORD *)&v57 < 3uLL || (v60 = (uint8x8_t)vcnt_s8(v57), v60.i16[0] = vaddlv_u8(v60), v60.u32[0] > 1uLL))
    {
      v59 = std::__next_prime(v59);
    }
    else
    {
      v61 = 1 << -(char)__clz(v59 - 1);
      if (v59 >= 2)
        v59 = v61;
    }
    if (prime <= v59)
      prime = v59;
    if (prime >= *(_QWORD *)&v57)
      goto LABEL_12;
    goto LABEL_11;
  }
  prime = 2;
LABEL_11:
  sub_19C2EC6BC((uint64_t)(a1 + 3), prime);
LABEL_12:
  v16 = a2[5];
  if (!v16)
    goto LABEL_109;
  v62 = a1 + 5;
  while (2)
  {
    v17 = *((char *)v16 + 39);
    if (v17 >= 0)
      v18 = (uint64_t *)(v16 + 1);
    else
      v18 = (uint64_t *)*((_QWORD *)v16 + 2);
    if (v17 >= 0)
      v19 = *((unsigned __int8 *)v16 + 39);
    else
      v19 = *((_QWORD *)v16 + 3);
    v20 = sub_19C2A0F2C((uint64_t)&v63, v18, v19);
    v21 = v20;
    v22 = a1[4];
    if (!v22)
      goto LABEL_71;
    v23 = (uint8x8_t)vcnt_s8((int8x8_t)v22);
    v23.i16[0] = vaddlv_u8(v23);
    if (v23.u32[0] > 1uLL)
    {
      v2 = v20;
      if (v20 >= v22)
        v2 = v20 % v22;
    }
    else
    {
      v2 = (v22 - 1) & v20;
    }
    v24 = *(uint64_t ***)(*v14 + 8 * v2);
    if (!v24)
      goto LABEL_71;
    v25 = *v24;
    if (!*v24)
      goto LABEL_71;
    v26 = *((_BYTE *)v16 + 39);
    if (v26 >= 0)
      v27 = *((unsigned __int8 *)v16 + 39);
    else
      v27 = *((_QWORD *)v16 + 3);
    if (v26 >= 0)
      v28 = (unsigned __int8 *)(v16 + 1);
    else
      v28 = (unsigned __int8 *)*((_QWORD *)v16 + 2);
    if (v23.u32[0] < 2uLL)
    {
      while (1)
      {
        v34 = v25[1];
        if (v34 == v21)
        {
          v35 = *((unsigned __int8 *)v25 + 39);
          if ((v35 & 0x80u) == 0)
            v36 = *((unsigned __int8 *)v25 + 39);
          else
            v36 = v25[3];
          if (v36 == v27)
          {
            v37 = (const void **)(v25 + 2);
            if ((v35 & 0x80) != 0)
            {
              if (!memcmp(*v37, v28, v25[3]))
                goto LABEL_16;
            }
            else
            {
              if (!*((_BYTE *)v25 + 39))
                goto LABEL_16;
              v38 = v28;
              while (*(unsigned __int8 *)v37 == *v38)
              {
                v37 = (const void **)((char *)v37 + 1);
                ++v38;
                if (!--v35)
                  goto LABEL_16;
              }
            }
          }
        }
        else if ((v34 & (v22 - 1)) != v2)
        {
          goto LABEL_70;
        }
        v25 = (uint64_t *)*v25;
        if (!v25)
          goto LABEL_70;
      }
    }
    do
    {
      v29 = v25[1];
      if (v29 == v21)
      {
        v30 = *((unsigned __int8 *)v25 + 39);
        if ((v30 & 0x80u) == 0)
          v31 = *((unsigned __int8 *)v25 + 39);
        else
          v31 = v25[3];
        if (v31 == v27)
        {
          v32 = (const void **)(v25 + 2);
          if ((v30 & 0x80) != 0)
          {
            if (!memcmp(*v32, v28, v25[3]))
              goto LABEL_16;
          }
          else
          {
            if (!*((_BYTE *)v25 + 39))
              goto LABEL_16;
            v33 = v28;
            while (*(unsigned __int8 *)v32 == *v33)
            {
              v32 = (const void **)((char *)v32 + 1);
              ++v33;
              if (!--v30)
                goto LABEL_16;
            }
          }
        }
        goto LABEL_39;
      }
      if (v29 >= v22)
        v29 %= v22;
      if (v29 != v2)
        break;
LABEL_39:
      v25 = (uint64_t *)*v25;
    }
    while (v25);
LABEL_70:
    v14 = a1 + 3;
LABEL_71:
    v39 = (char *)operator new(0x30uLL);
    v63 = v39;
    v64 = (char **)(a1 + 5);
    LOBYTE(v65) = 0;
    *(_QWORD *)v39 = 0;
    *((_QWORD *)v39 + 1) = v21;
    v40 = v39 + 16;
    if (*((char *)v16 + 39) < 0)
    {
      sub_19C2B5238(v40, *((void **)v16 + 2), *((_QWORD *)v16 + 3));
    }
    else
    {
      v41 = v16[1];
      *((_QWORD *)v39 + 4) = *((_QWORD *)v16 + 4);
      *(_OWORD *)v40 = v41;
    }
    *((_DWORD *)v39 + 10) = *((_DWORD *)v16 + 10);
    LOBYTE(v65) = 1;
    v42 = (float)(unint64_t)(a1[6] + 1);
    v43 = *((float *)a1 + 14);
    if (!v22 || (float)(v43 * (float)v22) < v42)
    {
      v44 = (v22 & (v22 - 1)) != 0;
      if (v22 < 3)
        v44 = 1;
      v45 = v44 | (2 * v22);
      v46 = vcvtps_u32_f32(v42 / v43);
      if (v45 <= v46)
        v47 = v46;
      else
        v47 = v45;
      if (v47 == 1)
      {
        v47 = 2;
      }
      else if ((v47 & (v47 - 1)) != 0)
      {
        v47 = std::__next_prime(v47);
      }
      v48 = (int8x8_t)a1[4];
      if (v47 > *(_QWORD *)&v48)
        goto LABEL_86;
      if (v47 < *(_QWORD *)&v48)
      {
        v49 = vcvtps_u32_f32((float)(unint64_t)a1[6] / *((float *)a1 + 14));
        if (*(_QWORD *)&v48 < 3uLL || (v50 = (uint8x8_t)vcnt_s8(v48), v50.i16[0] = vaddlv_u8(v50), v50.u32[0] > 1uLL))
        {
          v49 = std::__next_prime(v49);
        }
        else
        {
          v51 = 1 << -(char)__clz(v49 - 1);
          if (v49 >= 2)
            v49 = v51;
        }
        if (v47 <= v49)
          v47 = v49;
        if (v47 < *(_QWORD *)&v48)
LABEL_86:
          sub_19C2EC6BC((uint64_t)v14, v47);
      }
      v22 = a1[4];
      if ((v22 & (v22 - 1)) != 0)
      {
        if (v21 >= v22)
          v2 = v21 % v22;
        else
          v2 = v21;
      }
      else
      {
        v2 = (v22 - 1) & v21;
      }
    }
    v52 = *(_QWORD **)(*v14 + 8 * v2);
    if (v52)
    {
      *(_QWORD *)v63 = *v52;
      *v52 = v63;
    }
    else
    {
      *(_QWORD *)v63 = *v62;
      *v62 = v63;
      *(_QWORD *)(*v14 + 8 * v2) = v62;
      if (*(_QWORD *)v63)
      {
        v53 = *(_QWORD *)(*(_QWORD *)v63 + 8);
        if ((v22 & (v22 - 1)) != 0)
        {
          if (v53 >= v22)
            v53 %= v22;
        }
        else
        {
          v53 &= v22 - 1;
        }
        *(_QWORD *)(*v14 + 8 * v53) = v63;
      }
    }
    ++a1[6];
LABEL_16:
    v16 = *(__int128 **)v16;
    v14 = a1 + 3;
    if (v16)
      continue;
    break;
  }
LABEL_109:
  v54 = *a1;
  v55 = a1[1];
  while (v54 != v55)
  {
    if (*(_BYTE *)(v54 + 37))
      a1[8] = v54;
    v54 += 48;
  }
  return a1;
}

void sub_19C352C38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void **v9;
  char *v11;
  char *v12;
  const void *v13;
  const void *v14;
  void *v15;

  sub_19C32EB9C(a9);
  v11 = (char *)*v9;
  if (*v9)
  {
    v12 = (char *)v9[1];
    if (v12 == v11)
    {
      v15 = *v9;
    }
    else
    {
      do
      {
        v13 = (const void *)*((_QWORD *)v12 - 3);
        if (v13)
          CFRelease(v13);
        v14 = (const void *)*((_QWORD *)v12 - 1);
        if (v14)
          CFRelease(v14);
        if (*(v12 - 25) < 0)
          operator delete(*((void **)v12 - 6));
        v12 -= 48;
      }
      while (v12 != v11);
      v15 = *v9;
    }
    v9[1] = v11;
    operator delete(v15);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_19C352D50(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 **v4;
  uint64_t v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  int v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t *result;
  _QWORD *v14;
  _QWORD *v15;
  const void **v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unsigned __int8 *v22;
  _BOOL4 v23;

  v3 = *a1;
  v2 = a1[1];
  v4 = (unsigned __int8 **)*a2;
  if (v2 - *a1 != a2[1] - *a2)
    return 0;
  for (; v3 != v2; v4 += 6)
  {
    v7 = *(unsigned __int8 *)(v3 + 23);
    if ((v7 & 0x80u) == 0)
      v8 = (unsigned __int8 *)*(unsigned __int8 *)(v3 + 23);
    else
      v8 = *(unsigned __int8 **)(v3 + 8);
    v9 = (unsigned __int8 *)*((unsigned __int8 *)v4 + 23);
    v10 = (char)v9;
    if ((char)v9 < 0)
      v9 = v4[1];
    if (v8 != v9)
      return 0;
    if (v10 >= 0)
      v11 = (unsigned __int8 *)v4;
    else
      v11 = *v4;
    if ((v7 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v3, v11, *(_QWORD *)(v3 + 8)))
        return 0;
    }
    else if (*(_BYTE *)(v3 + 23))
    {
      v12 = 0;
      while (*(unsigned __int8 *)(v3 + v12) == v11[v12])
      {
        if (v7 == ++v12)
          goto LABEL_19;
      }
      return 0;
    }
LABEL_19:
    if (*(_DWORD *)(v3 + 32) != *((_DWORD *)v4 + 8)
      || *(unsigned __int8 *)(v3 + 36) != *((unsigned __int8 *)v4 + 36)
      || *(unsigned __int8 *)(v3 + 37) != *((unsigned __int8 *)v4 + 37))
    {
      return 0;
    }
    result = (uint64_t *)CFEqual(*(CFTypeRef *)(v3 + 40), v4[5]);
    if (!(_DWORD)result)
      return result;
    v3 += 48;
  }
  if (a1[6] != a2[6])
    return 0;
  v14 = a2 + 3;
  v15 = a1 + 5;
  do
  {
    v15 = (_QWORD *)*v15;
    result = (uint64_t *)(v15 == 0);
    if (!v15)
      break;
    v16 = (const void **)(v15 + 2);
    result = sub_19C318A7C(v14, (uint64_t)(v15 + 2));
    if (!result)
      break;
    v17 = result;
    v18 = *((unsigned __int8 *)v15 + 39);
    if ((v18 & 0x80u) == 0)
      v19 = *((unsigned __int8 *)v15 + 39);
    else
      v19 = v15[3];
    v20 = *((unsigned __int8 *)result + 39);
    v21 = (char)v20;
    if ((v20 & 0x80u) != 0)
      v20 = result[3];
    if (v19 != v20)
      return 0;
    if (v21 >= 0)
      v22 = (unsigned __int8 *)(result + 2);
    else
      v22 = (unsigned __int8 *)result[2];
    if ((v18 & 0x80) != 0)
    {
      v23 = memcmp(*v16, v22, v15[3]) == 0;
    }
    else
    {
      if (*((_BYTE *)v15 + 39))
      {
        while (*(unsigned __int8 *)v16 == *v22)
        {
          v16 = (const void **)((char *)v16 + 1);
          ++v22;
          if (!--v18)
            goto LABEL_41;
        }
        return 0;
      }
LABEL_41:
      v23 = 1;
    }
    result = 0;
  }
  while (v23 && *((_DWORD *)v15 + 10) == *((_DWORD *)v17 + 10));
  return result;
}

uint64_t sub_19C352F44(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E3D36B68;
  if ((*(char *)(a1 + 191) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 167) & 0x80000000) == 0)
      goto LABEL_3;
LABEL_6:
    operator delete(*(void **)(a1 + 144));
    if ((*(char *)(a1 + 143) & 0x80000000) == 0)
      goto LABEL_4;
LABEL_7:
    operator delete(*(void **)(a1 + 120));
    goto LABEL_4;
  }
  operator delete(*(void **)(a1 + 168));
  if (*(char *)(a1 + 167) < 0)
    goto LABEL_6;
LABEL_3:
  if (*(char *)(a1 + 143) < 0)
    goto LABEL_7;
LABEL_4:
  sub_19C3553FC(a1 + 16);
  return a1;
}

void sub_19C352FBC(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E3D36B68;
  if (*(char *)(a1 + 191) < 0)
  {
    operator delete(*(void **)(a1 + 168));
    if ((*(char *)(a1 + 167) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(a1 + 143) & 0x80000000) == 0)
      {
LABEL_4:
        sub_19C3553FC(a1 + 16);
        JUMPOUT(0x1A1AD355CLL);
      }
LABEL_7:
      operator delete(*(void **)(a1 + 120));
      goto LABEL_4;
    }
  }
  else if ((*(char *)(a1 + 167) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 144));
  if ((*(char *)(a1 + 143) & 0x80000000) == 0)
    goto LABEL_4;
  goto LABEL_7;
}

uint64_t sub_19C353044(uint64_t a1)
{
  return *(_QWORD *)(a1 + 200);
}

void *sub_19C35304C(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, const void *a5, uint64_t a6)
{
  uint64_t v10;
  const void *v11;
  int v12;
  unsigned int *v13;
  CFStringRef v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  unsigned __int8 *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  float *v27;
  uint64_t **v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  int v32;
  const UInt8 *v33;
  CFIndex v34;
  void *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  float *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _DWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _DWORD *v50;
  uint64_t v51;
  __CFError *v52;
  uint64_t *v53;
  size_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  int v58;
  CFIndex v59;
  const UInt8 *v60;
  uint64_t v61;
  CFStringRef v62;
  __CFError *v63;
  uint64_t v64;
  NSObject *v66;
  CFStringRef v67;
  void *exception;
  void *v69;
  unint64_t v70;
  __CFError *v71;
  void *v72;
  void *__p[4];
  __int128 v74;
  uint64_t v75;
  uint64_t v76;

  v76 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    v11 = *(const void **)v10;
    v70 = *(_QWORD *)(v10 + 8);
    if (*(_QWORD *)v10)
      CFRetain(v11);
  }
  else
  {
    v11 = 0;
    v70 = 0;
  }
  v12 = *(_DWORD *)(a1 + 8);
  if (v12 != 1)
  {
    if (v12)
    {
      v23 = 0;
      goto LABEL_124;
    }
    v13 = (unsigned int *)operator new(4uLL);
    *v13 = a3;
    v14 = (CFStringRef)(a1 + 120);
    v15 = *(_QWORD *)(a1 + 24);
    v16 = *(_QWORD *)(a1 + 32);
    if (v15 != v16)
    {
      v17 = *(_BYTE *)(a1 + 143);
      if (v17 >= 0)
        v18 = *(unsigned __int8 *)(a1 + 143);
      else
        v18 = *(_QWORD *)(a1 + 128);
      if (v17 >= 0)
        v19 = (unsigned __int8 *)(a1 + 120);
      else
        v19 = *(unsigned __int8 **)(a1 + 120);
      while (1)
      {
        v24 = *(unsigned __int8 *)(v15 + 23);
        if ((v24 & 0x80u) == 0)
          v25 = *(unsigned __int8 *)(v15 + 23);
        else
          v25 = *(_QWORD *)(v15 + 8);
        if (v25 == v18)
        {
          if ((v24 & 0x80) != 0)
          {
            if (!memcmp(*(const void **)v15, v19, *(_QWORD *)(v15 + 8)))
              break;
          }
          else
          {
            if (!*(_BYTE *)(v15 + 23))
              break;
            v26 = 0;
            while (*(unsigned __int8 *)(v15 + v26) == v19[v26])
            {
              if (v24 == ++v26)
                goto LABEL_30;
            }
          }
        }
        v15 += 24;
        if (v15 == v16)
          goto LABEL_127;
      }
    }
LABEL_30:
    if (v15 == v16)
    {
LABEL_127:
      if (qword_1EDB97228 == -1)
        goto LABEL_128;
      goto LABEL_143;
    }
    v27 = (float *)operator new(4uLL);
    *v27 = (float)*v13;
    v28 = sub_19C354CF4((uint64_t **)(a1 + 72), (const void **)(a1 + 120), a1 + 120);
    v29 = v28[7];
    if (v29)
    {
      v28[8] = v29;
      operator delete(v29);
      v28[7] = 0;
      v28[8] = 0;
      v28[9] = 0;
    }
    v28[7] = (uint64_t *)v27;
    v28[8] = (uint64_t *)(v27 + 1);
    v28[9] = (uint64_t *)(v27 + 1);
    v30 = sub_19C354CF4((uint64_t **)(a1 + 72), (const void **)(a1 + 120), a1 + 120)[7];
    v71 = 0;
    v31 = *(_QWORD *)(a1 + 16);
    v32 = *(char *)(a1 + 143);
    if (v32 >= 0)
      v33 = (const UInt8 *)(a1 + 120);
    else
      v33 = *(const UInt8 **)(a1 + 120);
    if (v32 >= 0)
      v34 = *(unsigned __int8 *)(a1 + 143);
    else
      v34 = *(_QWORD *)(a1 + 128);
    v14 = CFStringCreateWithBytes(0, v33, v34, 0x8000100u, 0);
    if (!v14)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1A1AD3154](exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
    }
    __p[0] = 0;
    __p[1] = __p;
    __p[2] = (void *)0x2000000000;
    v35 = off_1EDB97048;
    __p[3] = off_1EDB97048;
    if (!off_1EDB97048)
    {
      v72 = 0;
      if (qword_1EDB97038)
      {
        v36 = (void *)qword_1EDB97038;
      }
      else
      {
        v74 = xmmword_1E3D3A728;
        v75 = 0;
        qword_1EDB97038 = _sl_dlopen();
        v36 = (void *)qword_1EDB97038;
        if (!qword_1EDB97038)
        {
          abort_report_np();
LABEL_142:
          __break(1u);
LABEL_143:
          dispatch_once(&qword_1EDB97228, &unk_1E3D3ABD0);
LABEL_128:
          v66 = qword_1EDB97220;
          if (os_log_type_enabled((os_log_t)qword_1EDB97220, OS_LOG_TYPE_ERROR))
          {
            if (*(char *)(a1 + 143) >= 0)
              v67 = v14;
            else
              v67 = *(CFStringRef *)(a1 + 120);
            LODWORD(__p[0]) = 136315138;
            *(void **)((char *)__p + 4) = (void *)v67;
            _os_log_error_impl(&dword_19C291000, v66, OS_LOG_TYPE_ERROR, "%s() not found as neural network input", (uint8_t *)__p, 0xCu);
          }
          __assert_rtn("setInput", "NeuralNetwork.hpp", 161, "false");
        }
      }
      v35 = dlsym(v36, "MRLNeuralNetworkSetInput");
      *((_QWORD *)__p[1] + 3) = v35;
      off_1EDB97048 = v35;
    }
    _Block_object_dispose(__p, 8);
    if (v35)
    {
      ((void (*)(uint64_t, CFStringRef, uint64_t, uint64_t, uint64_t *, __CFError **))v35)(v31, v14, 1, 1, v30, &v71);
      CFRelease(v14);
      v52 = v71;
      if (v71
        && (__p[0] = operator new(0x20uLL),
            *(_OWORD *)&__p[1] = xmmword_19C46DDE0,
            strcpy((char *)__p[0], "MRLNeuralNetworkSetInput"),
            sub_19C354A98((uint64_t *)__p, v52),
            SHIBYTE(__p[2]) < 0))
      {
        operator delete(__p[0]);
        v53 = (uint64_t *)(a1 + 16);
        if (a6)
          goto LABEL_100;
      }
      else
      {
        v53 = (uint64_t *)(a1 + 16);
        if (a6)
        {
LABEL_100:
          v54 = 4 * a6;
          v74 = 0uLL;
          v75 = 0;
          if (4 * a6)
          {
            if ((v54 & 0x8000000000000000) != 0)
              sub_19C2A18E8();
            v56 = (char *)operator new(4 * a6);
            v55 = &v56[4 * ((4 * a6) >> 2)];
            memmove(v56, a5, v54);
          }
          else
          {
            v55 = 0;
            v56 = 0;
          }
          v57 = (v55 - v56) >> 2;
          v72 = 0;
          v58 = *(char *)(a1 + 191);
          if (v58 >= 0)
            v59 = *(unsigned __int8 *)(a1 + 191);
          else
            v59 = *(_QWORD *)(a1 + 176);
          if (v59)
          {
            if (v58 >= 0)
              v60 = (const UInt8 *)(a1 + 168);
            else
              v60 = *(const UInt8 **)(a1 + 168);
            v61 = *(_QWORD *)(a1 + 16);
            v62 = CFStringCreateWithBytes(0, v60, v59, 0x8000100u, 0);
            __p[0] = (void *)v62;
            if (!v62)
            {
              v69 = __cxa_allocate_exception(0x10uLL);
              MEMORY[0x1A1AD3154](v69, "Could not construct");
              __cxa_throw(v69, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
            }
            sub_19C35526C(v61, (uint64_t)v62, (uint64_t)v56, v57, (uint64_t)&v72);
            CFRelease(v62);
          }
          else
          {
            sub_19C35526C(*v53, 0, (uint64_t)v56, (v55 - v56) >> 2, (uint64_t)&v72);
          }
          v63 = (__CFError *)v72;
          if (v72)
          {
            __p[0] = operator new(0x28uLL);
            *(_OWORD *)&__p[1] = xmmword_19C46DE70;
            strcpy((char *)__p[0], "MRLNeuralNetworkSetPartialOutputIndices");
            sub_19C354A98((uint64_t *)__p, v63);
            if (SHIBYTE(__p[2]) < 0)
              operator delete(__p[0]);
          }
          if (v56)
            operator delete(v56);
        }
      }
      sub_19C40BD7C(v53, (uint64_t)v11);
      *(_QWORD *)&v74 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
      sub_19C35476C((uint64_t)__p, v53, (int *)&v74, a1 + 144);
      v23 = __p[2];
      v51 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
      goto LABEL_122;
    }
    dlerror();
    abort_report_np();
    goto LABEL_142;
  }
  v13 = (unsigned int *)operator new(4uLL);
  *(float *)v13 = (float)a3;
  HIBYTE(__p[2]) = 5;
  strcpy((char *)__p, "input");
  sub_19C35400C(a1 + 16, v13, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  HIBYTE(__p[2]) = 8;
  strcpy((char *)__p, "position");
  v21 = *(_QWORD *)(a1 + 24);
  v20 = *(_QWORD *)(a1 + 32);
  v22 = v21;
  if (v21 != v20)
  {
    v22 = *(_QWORD *)(a1 + 24);
    while (1)
    {
      v37 = *(unsigned __int8 *)(v22 + 23);
      if ((v37 & 0x80u) == 0)
        v38 = *(unsigned __int8 *)(v22 + 23);
      else
        v38 = *(_QWORD *)(v22 + 8);
      if (v38 == 8)
      {
        if ((v37 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v22, __p, *(_QWORD *)(v22 + 8)))
            break;
        }
        else
        {
          if (!*(_BYTE *)(v22 + 23))
            break;
          v39 = 0;
          while (*(unsigned __int8 *)(v22 + v39) == *((unsigned __int8 *)__p + v39))
          {
            if (v37 == ++v39)
              goto LABEL_54;
          }
        }
      }
      v22 += 24;
      if (v22 == v20)
        goto LABEL_58;
    }
  }
LABEL_54:
  if (v22 != v20)
  {
    v40 = (float *)operator new(4uLL);
    *v40 = (float)v70;
    HIBYTE(__p[2]) = 8;
    strcpy((char *)__p, "position");
    sub_19C35400C(a1 + 16, v40, (uint64_t)__p);
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
    operator delete(v40);
    v21 = *(_QWORD *)(a1 + 24);
    v20 = *(_QWORD *)(a1 + 32);
  }
LABEL_58:
  HIBYTE(__p[2]) = 11;
  strcpy((char *)__p, "temperature");
  v41 = v20;
  if (v21 != v20)
  {
    v41 = v21;
    while (1)
    {
      v42 = *(unsigned __int8 *)(v41 + 23);
      if ((v42 & 0x80u) == 0)
        v43 = *(unsigned __int8 *)(v41 + 23);
      else
        v43 = *(_QWORD *)(v41 + 8);
      if (v43 == 11)
      {
        if ((v42 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v41, __p, *(_QWORD *)(v41 + 8)))
            break;
        }
        else
        {
          if (!*(_BYTE *)(v41 + 23))
            break;
          v44 = 0;
          while (*(unsigned __int8 *)(v41 + v44) == *((unsigned __int8 *)__p + v44))
          {
            if (v42 == ++v44)
              goto LABEL_71;
          }
        }
      }
      v41 += 24;
      if (v41 == v20)
        goto LABEL_75;
    }
  }
LABEL_71:
  if (v41 != v20)
  {
    v45 = operator new(4uLL);
    *v45 = 1065353216;
    HIBYTE(__p[2]) = 11;
    strcpy((char *)__p, "temperature");
    sub_19C35400C(a1 + 16, v45, (uint64_t)__p);
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
    operator delete(v45);
    v21 = *(_QWORD *)(a1 + 24);
    v20 = *(_QWORD *)(a1 + 32);
  }
LABEL_75:
  HIBYTE(__p[2]) = 7;
  strcpy((char *)__p, "segment");
  v46 = v20;
  if (v21 == v20)
    goto LABEL_89;
  while (1)
  {
    v47 = *(unsigned __int8 *)(v21 + 23);
    if ((v47 & 0x80u) == 0)
      v48 = *(unsigned __int8 *)(v21 + 23);
    else
      v48 = *(_QWORD *)(v21 + 8);
    if (v48 != 7)
      goto LABEL_78;
    if ((v47 & 0x80) == 0)
      break;
    if (!memcmp(*(const void **)v21, __p, *(_QWORD *)(v21 + 8)))
      goto LABEL_88;
LABEL_78:
    v21 += 24;
    if (v21 == v20)
      goto LABEL_93;
  }
  if (*(_BYTE *)(v21 + 23))
  {
    v49 = 0;
    while (*(unsigned __int8 *)(v21 + v49) == *((unsigned __int8 *)__p + v49))
    {
      if (v47 == ++v49)
        goto LABEL_88;
    }
    goto LABEL_78;
  }
LABEL_88:
  v46 = v21;
LABEL_89:
  if (v46 != v20)
  {
    v50 = operator new(4uLL);
    *v50 = 0;
    HIBYTE(__p[2]) = 7;
    strcpy((char *)__p, "segment");
    sub_19C35400C(a1 + 16, v50, (uint64_t)__p);
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
    operator delete(v50);
  }
LABEL_93:
  sub_19C40BD7C((uint64_t *)(a1 + 16), (uint64_t)v11);
  *(_QWORD *)&v74 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  sub_19C35476C((uint64_t)__p, (uint64_t *)(a1 + 16), (int *)&v74, a1 + 144);
  v23 = __p[2];
  v51 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
LABEL_122:
  v64 = v51;
  operator delete(v13);
  if (v64)
    *(_QWORD *)(a1 + 192) = v70 + 1;
LABEL_124:
  if (v11)
    CFRelease(v11);
  return v23;
}

void sub_19C353A84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, const void *a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  void *v25;
  void *v26;
  void *v27;

  __cxa_free_exception(v26);
  if (v27)
    operator delete(v27);
  operator delete(v25);
  sub_19C31D650(&a11);
  _Unwind_Resume(a1);
}

void sub_19C353BC8(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  void *v5;
  void *v6;
  const void *v7;
  __CFError *v8;
  CFTypeRef v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  CFTypeRef cf;
  __CFError *v14;
  void *__p;
  __int128 v16;
  void *v17;
  void *v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v14 = 0;
  __p = 0;
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)&v16 = &__p;
  *((_QWORD *)&v16 + 1) = 0x2000000000;
  v5 = off_1EDB97058;
  v17 = off_1EDB97058;
  if (off_1EDB97058)
    goto LABEL_7;
  v18 = 0;
  if (qword_1EE41C580)
  {
    v5 = (void *)qword_1EE41C580;
  }
  else
  {
    v19 = xmmword_1E3D3C608;
    v20 = 0;
    qword_1EE41C580 = _sl_dlopen();
    v6 = v18;
    v5 = (void *)qword_1EE41C580;
    if (!qword_1EE41C580)
    {
      v6 = (void *)abort_report_np();
      goto LABEL_19;
    }
    if (v18)
      goto LABEL_20;
  }
  while (1)
  {
    v5 = dlsym(v5, "MRLNeuralNetworkCopyStates");
    *(_QWORD *)(v16 + 24) = v5;
    off_1EDB97058 = v5;
LABEL_7:
    _Block_object_dispose(&__p, 8);
    if (v5)
      break;
    dlerror();
    v6 = (void *)abort_report_np();
LABEL_19:
    __break(1u);
LABEL_20:
    free(v6);
  }
  v7 = (const void *)((uint64_t (*)(uint64_t, __CFError **))v5)(v4, &v14);
  sub_19C31D164(&cf, v7);
  v8 = v14;
  if (v14)
  {
    __p = operator new(0x20uLL);
    v16 = xmmword_19C46DE80;
    strcpy((char *)__p, "MRLNeuralNetworkCopyStates");
    sub_19C40C030((uint64_t *)&__p, v8);
    if (SHIBYTE(v16) < 0)
      operator delete(__p);
  }
  v9 = cf;
  v10 = (_QWORD *)operator new();
  v11 = v10;
  v12 = *(_QWORD *)(a1 + 192);
  *v10 = &off_1E3D364C0;
  if (v9)
  {
    CFRetain(v9);
    sub_19C31D164(v11 + 1, v9);
  }
  else
  {
    v10[1] = 0;
  }
  v11[2] = v12;
  *a2 = v11;
  if (cf)
    CFRelease(cf);
}

void sub_19C353DEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a2)
    sub_19C2CDAC8(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C353E74(uint64_t a1)
{
  return sub_19C353EAC((uint64_t *)(a1 + 16));
}

void sub_19C353E7C(uint64_t a1)
{
  sub_19C40C170((uint64_t *)(a1 + 16));
}

void sub_19C353E84()
{
  __assert_rtn("conditionalProbability", "MontrealInferenceEngine.cpp", 223, "false && \"stateless conditional probability computation not supported\"");
}

uint64_t sub_19C353EAC(uint64_t *a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v1 = *a1;
  v5 = 0;
  v6 = &v5;
  v7 = 0x2000000000;
  v2 = off_1EDB96E58;
  v8 = off_1EDB96E58;
  if (off_1EDB96E58)
    goto LABEL_7;
  v9 = 0;
  if (qword_1EDB97038)
  {
    v2 = (void *)qword_1EDB97038;
  }
  else
  {
    v10 = xmmword_1E3D3A728;
    v11 = 0;
    qword_1EDB97038 = _sl_dlopen();
    v3 = v9;
    v2 = (void *)qword_1EDB97038;
    if (!qword_1EDB97038)
    {
      v3 = (void *)abort_report_np();
      goto LABEL_11;
    }
    if (v9)
      goto LABEL_12;
  }
  while (1)
  {
    v2 = dlsym(v2, "MRLNeuralNetworkModelUnLock");
    v6[3] = (uint64_t)v2;
    off_1EDB96E58 = v2;
LABEL_7:
    _Block_object_dispose(&v5, 8);
    if (v2)
      break;
    dlerror();
    v3 = (void *)abort_report_np();
LABEL_11:
    __break(1u);
LABEL_12:
    free(v3);
  }
  return ((uint64_t (*)(uint64_t))v2)(v1);
}

void sub_19C353FF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19C35400C(uint64_t a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  const UInt8 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  CFDictionaryRef v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t **v19;
  uint64_t **v20;
  uint64_t *v21;
  uint64_t *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  int v26;
  const UInt8 *v27;
  CFIndex v28;
  CFStringRef v29;
  uint64_t *v30;
  void *v31;
  void *v32;
  __CFError *v33;
  NSObject *v34;
  const UInt8 *v35;
  void *exception;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  _BYTE v40[24];
  CFTypeRef cf;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  if (v6 != v7)
  {
    v8 = *(_BYTE *)(a3 + 23);
    if (v8 >= 0)
      v9 = *(unsigned __int8 *)(a3 + 23);
    else
      v9 = *(_QWORD *)(a3 + 8);
    if (v8 >= 0)
      v10 = (const UInt8 *)a3;
    else
      v10 = *(const UInt8 **)a3;
    while (1)
    {
      v11 = *(unsigned __int8 *)(v6 + 23);
      if ((v11 & 0x80u) == 0)
        v12 = *(unsigned __int8 *)(v6 + 23);
      else
        v12 = *(_QWORD *)(v6 + 8);
      if (v12 == v9)
      {
        if ((v11 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v6, v10, *(_QWORD *)(v6 + 8)))
            break;
        }
        else
        {
          if (!*(_BYTE *)(v6 + 23))
            break;
          v13 = 0;
          while (*(unsigned __int8 *)(v6 + v13) == v10[v13])
          {
            if (v11 == ++v13)
              goto LABEL_19;
          }
        }
      }
      v6 += 24;
      if (v6 == v7)
        goto LABEL_65;
    }
  }
LABEL_19:
  if (v6 == v7)
  {
LABEL_65:
    if (qword_1EDB97228 != -1)
      dispatch_once(&qword_1EDB97228, &unk_1E3D3ABD0);
    v34 = qword_1EDB97220;
    if (os_log_type_enabled((os_log_t)qword_1EDB97220, OS_LOG_TYPE_ERROR))
    {
      if (*(char *)(a3 + 23) >= 0)
        v35 = (const UInt8 *)a3;
      else
        v35 = *(const UInt8 **)a3;
      *(_DWORD *)v40 = 136315138;
      *(_QWORD *)&v40[4] = v35;
      _os_log_error_impl(&dword_19C291000, v34, OS_LOG_TYPE_ERROR, "%s() not found as neural network input", v40, 0xCu);
    }
    __assert_rtn("setInputTensor", "NeuralNetwork.hpp", 184, "false");
  }
  sub_19C354C0C(a1, a2, (uint64_t *)1, (const void **)a3);
  v14 = sub_19C354CF4((uint64_t **)(a1 + 56), (const void **)a3, a3)[7];
  v37 = 1;
  v38 = 1;
  sub_19C35502C((uint64_t)v40, "InputDimension", &v37);
  sub_19C35502C((uint64_t)&v40[16], "SequenceLength", &v38);
  v15 = sub_19C32BCAC((uint64_t *)v40, 2uLL);
  if (cf)
    CFRelease(cf);
  if (*(_QWORD *)&v40[16])
    CFRelease(*(CFTypeRef *)&v40[16]);
  if (*(_QWORD *)&v40[8])
    CFRelease(*(CFTypeRef *)&v40[8]);
  if (*(_QWORD *)v40)
    CFRelease(*(CFTypeRef *)v40);
  *(_QWORD *)v40 = 0;
  *(_QWORD *)&v40[8] = v40;
  *(_QWORD *)&v40[16] = 0x2000000000;
  v16 = off_1EDB96E60;
  cf = off_1EDB96E60;
  if (!off_1EDB96E60)
  {
    v39 = 0;
    if (qword_1EDB97038)
    {
      v17 = (void *)qword_1EDB97038;
    }
    else
    {
      v42 = xmmword_1E3D3A728;
      v43 = 0;
      qword_1EDB97038 = _sl_dlopen();
      v17 = (void *)qword_1EDB97038;
      if (!qword_1EDB97038)
        goto LABEL_74;
      if (v39)
        free(v39);
    }
    v16 = dlsym(v17, "MRLNeuralNetworkTensorCreate");
    *(_QWORD *)(*(_QWORD *)&v40[8] + 24) = v16;
    off_1EDB96E60 = v16;
  }
  _Block_object_dispose(v40, 8);
  if (!v16)
    goto LABEL_73;
  v18 = ((uint64_t (*)(CFDictionaryRef))v16)(v15);
  CFRelease(v15);
  v19 = (uint64_t **)(a1 + 80);
  v20 = sub_19C354E78((uint64_t **)(a1 + 80), (const void **)a3, a3);
  v21 = v20[7];
  if (v21)
    CFRelease(v21);
  v20[7] = (uint64_t *)v18;
  v22 = sub_19C354E78((uint64_t **)(a1 + 80), (const void **)a3, a3)[7];
  *(_QWORD *)v40 = 0;
  *(_QWORD *)&v40[8] = v40;
  *(_QWORD *)&v40[16] = 0x2000000000;
  v23 = off_1EDB96E70;
  cf = off_1EDB96E70;
  if (!off_1EDB96E70)
  {
    v39 = 0;
    if (qword_1EDB97038)
    {
      v24 = (void *)qword_1EDB97038;
    }
    else
    {
      v42 = xmmword_1E3D3A728;
      v43 = 0;
      qword_1EDB97038 = _sl_dlopen();
      v24 = (void *)qword_1EDB97038;
      if (!qword_1EDB97038)
        goto LABEL_74;
      if (v39)
        free(v39);
    }
    v23 = dlsym(v24, "MRLNeuralNetworkTensorAppendData");
    *(_QWORD *)(*(_QWORD *)&v40[8] + 24) = v23;
    off_1EDB96E70 = v23;
  }
  _Block_object_dispose(v40, 8);
  if (!v23)
  {
LABEL_73:
    dlerror();
    abort_report_np();
    goto LABEL_76;
  }
  ((void (*)(uint64_t *, uint64_t *, uint64_t))v23)(v22, v14, 4);
  v38 = 0;
  v25 = *(_QWORD *)a1;
  v26 = *(char *)(a3 + 23);
  if (v26 >= 0)
    v27 = (const UInt8 *)a3;
  else
    v27 = *(const UInt8 **)a3;
  if (v26 >= 0)
    v28 = *(unsigned __int8 *)(a3 + 23);
  else
    v28 = *(_QWORD *)(a3 + 8);
  v29 = CFStringCreateWithBytes(0, v27, v28, 0x8000100u, 0);
  v37 = (uint64_t)v29;
  if (!v29)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD3154](exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v30 = sub_19C354E78(v19, (const void **)a3, a3)[7];
  *(_QWORD *)v40 = 0;
  *(_QWORD *)&v40[8] = v40;
  *(_QWORD *)&v40[16] = 0x2000000000;
  v31 = off_1EDB96E68;
  cf = off_1EDB96E68;
  if (!off_1EDB96E68)
  {
    v39 = 0;
    if (qword_1EDB97038)
    {
      v32 = (void *)qword_1EDB97038;
LABEL_59:
      v31 = dlsym(v32, "MRLNeuralNetworkSetInputTensor");
      *(_QWORD *)(*(_QWORD *)&v40[8] + 24) = v31;
      off_1EDB96E68 = v31;
      goto LABEL_60;
    }
    v42 = xmmword_1E3D3A728;
    v43 = 0;
    qword_1EDB97038 = _sl_dlopen();
    v32 = (void *)qword_1EDB97038;
    if (qword_1EDB97038)
    {
      if (v39)
        free(v39);
      goto LABEL_59;
    }
LABEL_74:
    abort_report_np();
LABEL_76:
    __break(1u);
  }
LABEL_60:
  _Block_object_dispose(v40, 8);
  if (!v31)
    goto LABEL_73;
  ((void (*)(uint64_t, CFStringRef, uint64_t *, uint64_t *))v31)(v25, v29, v30, &v38);
  CFRelease(v29);
  v33 = (__CFError *)v38;
  if (v38)
  {
    *(_QWORD *)v40 = operator new(0x20uLL);
    *(_OWORD *)&v40[8] = xmmword_19C46DE90;
    strcpy(*(char **)v40, "MRLNeuralNetworkSetInputTensor");
    sub_19C354A98((uint64_t *)v40, v33);
    if ((v40[23] & 0x80000000) != 0)
      operator delete(*(void **)v40);
  }
}

void sub_19C35466C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19C354680(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_19C35476C(uint64_t a1, uint64_t *a2, int *a3, uint64_t a4)
{
  int v6;
  CFIndex v7;
  const UInt8 *v8;
  uint64_t v9;
  __CFString *v10;
  __CFString *v11;
  uint64_t v12;
  __CFError *v13;
  uint64_t v14;
  void *exception;
  void *__p;
  __int128 v17;
  __CFError *v18;

  v18 = 0;
  v6 = *(char *)(a4 + 23);
  if (v6 >= 0)
    v7 = *(unsigned __int8 *)(a4 + 23);
  else
    v7 = *(_QWORD *)(a4 + 8);
  if (!v7)
  {
    v12 = sub_19C354920(*a2, 0, (uint64_t)&v18);
    if (v12)
      goto LABEL_10;
LABEL_15:
    __assert_rtn("getOutput", "NeuralNetwork.hpp", 262, "output != nullptr");
  }
  if (v6 >= 0)
    v8 = (const UInt8 *)a4;
  else
    v8 = *(const UInt8 **)a4;
  v9 = *a2;
  v10 = (__CFString *)CFStringCreateWithBytes(0, v8, v7, 0x8000100u, 0);
  __p = v10;
  if (!v10)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD3154](exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v11 = v10;
  v12 = sub_19C354920(v9, (uint64_t)v10, (uint64_t)&v18);
  CFRelease(v11);
  if (!v12)
    goto LABEL_15;
LABEL_10:
  v13 = v18;
  if (v18)
  {
    __p = operator new(0x20uLL);
    v17 = xmmword_19C46DEA0;
    strcpy((char *)__p, "MRLNeuralNetworkGetOutput");
    sub_19C354A98((uint64_t *)&__p, v13);
    if (SHIBYTE(v17) < 0)
      operator delete(__p);
  }
  v14 = *a3;
  *(_DWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = v14;
  *(_QWORD *)(a1 + 16) = v12;
}

void sub_19C3548D8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19C3548EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19C35490C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  sub_19C2E5670(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_19C354920(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  void *v7;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v9 = 0;
  v10 = &v9;
  v11 = 0x2000000000;
  v6 = off_1EDB97050;
  v12 = off_1EDB97050;
  if (off_1EDB97050)
    goto LABEL_7;
  v13 = 0;
  if (qword_1EDB97038)
  {
    v6 = (void *)qword_1EDB97038;
  }
  else
  {
    v14 = xmmword_1E3D3A728;
    v15 = 0;
    qword_1EDB97038 = _sl_dlopen();
    v7 = v13;
    v6 = (void *)qword_1EDB97038;
    if (!qword_1EDB97038)
    {
      v7 = (void *)abort_report_np();
      goto LABEL_11;
    }
    if (v13)
      goto LABEL_12;
  }
  while (1)
  {
    v6 = dlsym(v6, "MRLNeuralNetworkGetOutput");
    v10[3] = (uint64_t)v6;
    off_1EDB97050 = v6;
LABEL_7:
    _Block_object_dispose(&v9, 8);
    if (v6)
      break;
    dlerror();
    v7 = (void *)abort_report_np();
LABEL_11:
    __break(1u);
LABEL_12:
    free(v7);
  }
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v6)(a1, a2, a3);
}

void sub_19C354A7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19C354A98(uint64_t *a1, CFErrorRef err)
{
  CFStringRef v4;
  NSObject *v5;
  uint64_t *v6;
  uint8_t buf[4];
  uint64_t *v8;
  __int16 v9;
  CFStringRef v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v4 = CFErrorCopyDescription(err);
  if (qword_1EDB97228 != -1)
    dispatch_once(&qword_1EDB97228, &unk_1E3D3ABD0);
  v5 = qword_1EDB97220;
  if (os_log_type_enabled((os_log_t)qword_1EDB97220, OS_LOG_TYPE_ERROR))
  {
    if (*((char *)a1 + 23) >= 0)
      v6 = a1;
    else
      v6 = (uint64_t *)*a1;
    *(_DWORD *)buf = 136315394;
    v8 = v6;
    v9 = 2112;
    v10 = v4;
    _os_log_error_impl(&dword_19C291000, v5, OS_LOG_TYPE_ERROR, "%s() failed: %@", buf, 0x16u);
    if (v4)
      goto LABEL_5;
  }
  else if (v4)
  {
LABEL_5:
    CFRelease(v4);
  }
  CFRelease(err);
}

void sub_19C354BB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2)
    sub_19C2CDAC8(exception_object);
  _Unwind_Resume(exception_object);
}

const void **sub_19C354BD8(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  *a1 = 0;
  return a1;
}

void sub_19C354C0C(uint64_t a1, const void *a2, uint64_t *a3, const void **a4)
{
  uint64_t *v5;
  size_t v8;
  char *v9;
  uint64_t **v10;
  uint64_t *v11;

  v5 = a3;
  if (a3)
  {
    if (((unint64_t)a3 & 0x8000000000000000) != 0)
      sub_19C2A18E8();
    v8 = 4 * (_QWORD)a3;
    v9 = (char *)operator new(4 * (_QWORD)a3);
    v5 = (uint64_t *)&v9[4 * (_QWORD)v5];
    memcpy(v9, a2, v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = sub_19C354CF4((uint64_t **)(a1 + 56), a4, (uint64_t)a4);
  v11 = v10[7];
  if (v11)
  {
    v10[8] = v11;
    operator delete(v11);
    v10[7] = 0;
    v10[8] = 0;
    v10[9] = 0;
  }
  v10[7] = (uint64_t *)v9;
  v10[8] = v5;
  v10[9] = v5;
}

void sub_19C354CC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;

  if (v11)
    operator delete(v11);
  _Unwind_Resume(exception_object);
}

uint64_t **sub_19C354CF4(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  int v7;
  const void *v8;
  size_t v9;
  uint64_t **v10;
  _QWORD *v11;
  const void *v12;
  const void *v13;
  int v14;
  const void *v15;
  size_t v16;
  size_t v17;
  int v18;
  int v19;
  _QWORD *v20;
  _BYTE *v21;
  uint64_t *v22;
  uint64_t *v23;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *((char *)a2 + 23);
    if (v7 >= 0)
      v8 = a2;
    else
      v8 = *a2;
    if (v7 >= 0)
      v9 = *((unsigned __int8 *)a2 + 23);
    else
      v9 = (size_t)a2[1];
    while (1)
    {
      v10 = (uint64_t **)v5;
      v13 = (const void *)v5[4];
      v11 = v5 + 4;
      v12 = v13;
      v14 = *((char *)v11 + 23);
      if (v14 >= 0)
        v15 = v11;
      else
        v15 = v12;
      if (v14 >= 0)
        v16 = *((unsigned __int8 *)v11 + 23);
      else
        v16 = v11[1];
      if (v16 >= v9)
        v17 = v9;
      else
        v17 = v16;
      v18 = memcmp(v8, v15, v17);
      if (v18)
      {
        if (v18 < 0)
          goto LABEL_8;
LABEL_22:
        v19 = memcmp(v15, v8, v17);
        if (v19)
        {
          if ((v19 & 0x80000000) == 0)
            return v10;
        }
        else if (v16 >= v9)
        {
          return v10;
        }
        v5 = v10[1];
        if (!v5)
        {
          v6 = v10 + 1;
          goto LABEL_29;
        }
      }
      else
      {
        if (v9 >= v16)
          goto LABEL_22;
LABEL_8:
        v5 = *v10;
        v6 = v10;
        if (!*v10)
          goto LABEL_29;
      }
    }
  }
  v10 = a1 + 1;
LABEL_29:
  v20 = operator new(0x50uLL);
  v21 = v20 + 4;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_19C2B5238(v21, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)v21 = *(_OWORD *)a3;
    v20[6] = *(_QWORD *)(a3 + 16);
  }
  v20[7] = 0;
  v20[8] = 0;
  v20[9] = 0;
  *v20 = 0;
  v20[1] = 0;
  v20[2] = v10;
  *v6 = v20;
  v22 = (uint64_t *)**a1;
  v23 = v20;
  if (v22)
  {
    *a1 = v22;
    v23 = *v6;
  }
  sub_19C2A2310(a1[1], v23);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return (uint64_t **)v20;
}

void sub_19C354E64(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t **sub_19C354E78(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  int v7;
  const void *v8;
  size_t v9;
  uint64_t **v10;
  _QWORD *v11;
  const void *v12;
  const void *v13;
  int v14;
  const void *v15;
  size_t v16;
  size_t v17;
  int v18;
  int v19;
  _QWORD *v20;
  _BYTE *v21;
  uint64_t *v22;
  uint64_t *v23;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *((char *)a2 + 23);
    if (v7 >= 0)
      v8 = a2;
    else
      v8 = *a2;
    if (v7 >= 0)
      v9 = *((unsigned __int8 *)a2 + 23);
    else
      v9 = (size_t)a2[1];
    while (1)
    {
      v10 = (uint64_t **)v5;
      v13 = (const void *)v5[4];
      v11 = v5 + 4;
      v12 = v13;
      v14 = *((char *)v11 + 23);
      if (v14 >= 0)
        v15 = v11;
      else
        v15 = v12;
      if (v14 >= 0)
        v16 = *((unsigned __int8 *)v11 + 23);
      else
        v16 = v11[1];
      if (v16 >= v9)
        v17 = v9;
      else
        v17 = v16;
      v18 = memcmp(v8, v15, v17);
      if (v18)
      {
        if (v18 < 0)
          goto LABEL_8;
LABEL_22:
        v19 = memcmp(v15, v8, v17);
        if (v19)
        {
          if ((v19 & 0x80000000) == 0)
            return v10;
        }
        else if (v16 >= v9)
        {
          return v10;
        }
        v5 = v10[1];
        if (!v5)
        {
          v6 = v10 + 1;
          goto LABEL_29;
        }
      }
      else
      {
        if (v9 >= v16)
          goto LABEL_22;
LABEL_8:
        v5 = *v10;
        v6 = v10;
        if (!*v10)
          goto LABEL_29;
      }
    }
  }
  v10 = a1 + 1;
LABEL_29:
  v20 = operator new(0x40uLL);
  v21 = v20 + 4;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_19C2B5238(v21, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)v21 = *(_OWORD *)a3;
    v20[6] = *(_QWORD *)(a3 + 16);
  }
  v20[7] = 0;
  *v20 = 0;
  v20[1] = 0;
  v20[2] = v10;
  *v6 = v20;
  v22 = (uint64_t *)**a1;
  v23 = v20;
  if (v22)
  {
    *a1 = v22;
    v23 = *v6;
  }
  sub_19C2A2310(a1[1], v23);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return (uint64_t **)v20;
}

void sub_19C354FE4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

const void **sub_19C354FF8(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  *a1 = 0;
  return a1;
}

uint64_t sub_19C35502C(uint64_t a1, char *a2, uint64_t *a3)
{
  CFNumberRef v5;
  void *exception;
  uint64_t valuePtr;

  sub_19C3550F4((CFStringRef *)a1, a2);
  valuePtr = *a3;
  v5 = CFNumberCreate(0, kCFNumberLongType, &valuePtr);
  *(_QWORD *)(a1 + 8) = v5;
  if (!v5)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD3154](exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  return a1;
}

void sub_19C3550B8(_Unwind_Exception *a1)
{
  uint64_t v1;
  const void *v3;

  v3 = *(const void **)(v1 + 8);
  if (v3)
    CFRelease(v3);
  sub_19C2E4838((const void **)v1);
  _Unwind_Resume(a1);
}

CFStringRef *sub_19C3550F4(CFStringRef *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void **p_dst;
  uint64_t v7;
  uint64_t v8;
  const UInt8 *v9;
  CFIndex v10;
  CFStringRef v11;
  void *exception;
  void **__dst;
  size_t v15;
  int64_t v16;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    sub_19C2A1A54();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    p_dst = (void **)operator new(v7 + 1);
    v15 = v5;
    v16 = v8 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v16) = v4;
  p_dst = (void **)&__dst;
  if (v4)
LABEL_8:
    memcpy(p_dst, __s, v5);
  *((_BYTE *)p_dst + v5) = 0;
  if (v16 >= 0)
    v9 = (const UInt8 *)&__dst;
  else
    v9 = (const UInt8 *)__dst;
  if (v16 >= 0)
    v10 = HIBYTE(v16);
  else
    v10 = v15;
  v11 = CFStringCreateWithBytes(0, v9, v10, 0x8000100u, 0);
  *a1 = v11;
  if (!v11)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD3154](exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  if (SHIBYTE(v16) < 0)
    operator delete(__dst);
  return a1;
}

void sub_19C355228(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  CFTypeRef *v15;

  if (*v15)
    CFRelease(*v15);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C35526C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v10;
  void *v11;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v13 = 0;
  v14 = &v13;
  v15 = 0x2000000000;
  v10 = off_1EE41C1D8;
  v16 = off_1EE41C1D8;
  if (off_1EE41C1D8)
    goto LABEL_7;
  v17 = 0;
  if (qword_1EDB97038)
  {
    v10 = (void *)qword_1EDB97038;
  }
  else
  {
    v18 = xmmword_1E3D3A728;
    v19 = 0;
    qword_1EDB97038 = _sl_dlopen();
    v11 = v17;
    v10 = (void *)qword_1EDB97038;
    if (!qword_1EDB97038)
    {
      v11 = (void *)abort_report_np();
      goto LABEL_11;
    }
    if (v17)
      goto LABEL_12;
  }
  while (1)
  {
    v10 = dlsym(v10, "MRLNeuralNetworkSetPartialOutputIndices");
    v14[3] = (uint64_t)v10;
    off_1EE41C1D8 = v10;
LABEL_7:
    _Block_object_dispose(&v13, 8);
    if (v10)
      break;
    dlerror();
    v11 = (void *)abort_report_np();
LABEL_11:
    __break(1u);
LABEL_12:
    free(v11);
  }
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v10)(a1, a2, a3, a4, a5);
}

void sub_19C3553E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_19C3553FC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  sub_19C3554E0(a1);
  sub_19C3555B8(*(char **)(a1 + 88));
  sub_19C35561C(*(char **)(a1 + 64));
  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 40);
    v4 = *(void **)(a1 + 32);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0)
          operator delete(*(void **)(v3 - 24));
        v3 -= 24;
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 32);
    }
    *(_QWORD *)(a1 + 40) = v2;
    operator delete(v4);
  }
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
  {
    v6 = *(_QWORD *)(a1 + 16);
    v7 = *(void **)(a1 + 8);
    if (v6 != v5)
    {
      do
      {
        if (*(char *)(v6 - 1) < 0)
          operator delete(*(void **)(v6 - 24));
        v6 -= 24;
      }
      while (v6 != v5);
      v7 = *(void **)(a1 + 8);
    }
    *(_QWORD *)(a1 + 16) = v5;
    operator delete(v7);
  }
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
  *(_QWORD *)a1 = 0;
  return a1;
}

void sub_19C3554E0(uint64_t a1)
{
  __int128 *v1;
  __int128 *v2;
  uint64_t v4;
  uint64_t **v5;
  __int128 v6;
  uint64_t **v7;
  void *__p[2];
  uint64_t v9;

  v1 = *(__int128 **)(a1 + 8);
  v2 = *(__int128 **)(a1 + 16);
  if (v1 != v2)
  {
    v4 = a1 + 88;
    v5 = (uint64_t **)(a1 + 56);
    do
    {
      if (*((char *)v1 + 23) < 0)
      {
        sub_19C2B5238(__p, *(void **)v1, *((_QWORD *)v1 + 1));
      }
      else
      {
        v6 = *v1;
        v9 = *((_QWORD *)v1 + 2);
        *(_OWORD *)__p = v6;
      }
      sub_19C3555B8(*(char **)(a1 + 88));
      *(_QWORD *)(a1 + 88) = 0;
      *(_QWORD *)(a1 + 96) = 0;
      *(_QWORD *)(a1 + 80) = v4;
      v7 = sub_19C354CF4(v5, (const void **)__p, (uint64_t)__p);
      v7[8] = v7[7];
      if (SHIBYTE(v9) < 0)
        operator delete(__p[0]);
      v1 = (__int128 *)((char *)v1 + 24);
    }
    while (v1 != v2);
  }
}

void sub_19C35559C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19C3555B8(char *a1)
{
  const void *v2;

  if (a1)
  {
    sub_19C3555B8(*(_QWORD *)a1);
    sub_19C3555B8(*((_QWORD *)a1 + 1));
    v2 = (const void *)*((_QWORD *)a1 + 7);
    if (v2)
      CFRelease(v2);
    *((_QWORD *)a1 + 7) = 0;
    if (a1[55] < 0)
      operator delete(*((void **)a1 + 4));
    operator delete(a1);
  }
}

void sub_19C35561C(char *a1)
{
  void *v2;

  if (a1)
  {
    sub_19C35561C(*(_QWORD *)a1);
    sub_19C35561C(*((_QWORD *)a1 + 1));
    v2 = (void *)*((_QWORD *)a1 + 7);
    if (v2)
    {
      *((_QWORD *)a1 + 8) = v2;
      operator delete(v2);
    }
    if (a1[55] < 0)
      operator delete(*((void **)a1 + 4));
    operator delete(a1);
  }
}

void sub_19C355674(uint64_t a1, const void **a2)
{
  const __CFURL *Value;
  void *__src[2];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = off_1E3D36B68;
  *(_DWORD *)(a1 + 8) = sub_19C3E3528(*a2);
  Value = (const __CFURL *)CFDictionaryGetValue((CFDictionaryRef)*a2, CFSTR("URL"));
  sub_19C2E15E8(Value, __src);
}

void sub_19C355DE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_19C355F54(uint64_t a1, const __CFString *a2, CFTypeRef cf)
{
  const __CFString *Value;
  const __CFString *v7;
  CFTypeID v8;
  CFDictionaryRef v9;
  void *exception;
  void *v11;
  _QWORD *v12;
  const __CFString *v13;
  _QWORD *v14;
  std::string v15;
  std::string v16;
  uint64_t v17;
  char v18;
  CFDictionaryRef v19;

  if (!cf)
  {
    v19 = 0;
LABEL_14:
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD3154](exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  CFRetain(cf);
  sub_19C29438C(&v19, cf);
  if (!v19)
    goto LABEL_14;
  if (!a2 || !CFDictionaryContainsKey(v19, a2))
  {
    *(_BYTE *)(a1 + 23) = 0;
    *(_BYTE *)a1 = 0;
    v9 = v19;
    if (!v19)
      return;
    goto LABEL_11;
  }
  if (!v19)
  {
    v11 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD3154](v11, "Could not construct");
    __cxa_throw(v11, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  Value = (const __CFString *)CFDictionaryGetValue(v19, a2);
  v7 = Value;
  if (!Value)
  {
LABEL_17:
    LOBYTE(v17) = 0;
    v18 = 0;
    v12 = __cxa_allocate_exception(0x20uLL);
    v13 = a2;
    v14 = v12;
    sub_19C29CEF8(v13, &v15);
    sub_19C337C34(&v16, "Malformed language model configuration plist: invalid value for key=", &v15);
    sub_19C31237C(v14, (__int128 *)&v16);
    __cxa_throw(v14, (struct type_info *)&unk_1E3D32968, (void (*)(void *))sub_19C3123E4);
  }
  CFRetain(Value);
  v8 = CFGetTypeID(v7);
  if (v8 != CFStringGetTypeID())
  {
    CFRelease(v7);
    goto LABEL_17;
  }
  v18 = 1;
  v17 = 0;
  sub_19C29CEF8(v7, (_QWORD *)a1);
  v9 = v19;
  if (!v19)
    return;
LABEL_11:
  CFRelease(v9);
}

void sub_19C356104(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  void *v22;
  int v23;
  uint64_t v24;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v23 & 1) == 0)
    {
LABEL_8:
      sub_19C3561BC((uint64_t)&a22);
      sub_19C2E5608((const void **)(v24 - 40));
      _Unwind_Resume(a1);
    }
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t sub_19C3561BC(uint64_t a1)
{
  const void *v2;

  if (*(_BYTE *)(a1 + 8))
  {
    v2 = *(const void **)a1;
    if (*(_QWORD *)a1)
      CFRelease(v2);
  }
  return a1;
}

os_log_t sub_19C3561F4()
{
  os_log_t result;

  result = os_log_create("com.apple.LanguageModeling", "MontrealInferenceEngine");
  qword_1EE41C1C8 = (uint64_t)result;
  return result;
}

_QWORD *sub_19C356220(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E3D37408;
  a1[2] = &off_1E3D34DF0;
  v2 = (void *)a1[3];
  if (v2)
    munmap(v2, a1[4]);
  a1[4] = 0;
  return a1;
}

void sub_19C356270(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E3D37408;
  a1[2] = &off_1E3D34DF0;
  v2 = (void *)a1[3];
  if (v2)
    munmap(v2, a1[4]);
  a1[4] = 0;
  JUMPOUT(0x1A1AD355CLL);
}

BOOL sub_19C3562D0(uint64_t a1, unsigned int a2, uint64_t a3, unint64_t a4)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  unsigned int v9;
  int *v10;
  unint64_t v11;
  unint64_t v12;
  int *v13;
  unsigned int v14;
  int *v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int *v19;
  unsigned int *v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  uint64_t v27;
  __int16 v29;
  __int16 v30;
  _BOOL4 v31;
  unint64_t v32;
  unint64_t v33;
  int *v34;
  int *v35;
  unint64_t v36;
  unint64_t v37;
  int *v38;
  unsigned int v39;
  int *v40;
  int v41;
  uint64_t v42;
  char v43;

  if (!a4)
    return 1;
  v4 = HIWORD(a2);
  v5 = *(_DWORD *)(a1 + 56);
  if (HIWORD(a2) >= v5)
    return 1;
  v6 = *(_QWORD *)(a1 + 40);
  v7 = *(_QWORD *)(a1 + 48);
  v8 = (int *)(v6 + 4 * *(unsigned int *)(v7 + 4 * v4));
  v9 = v5 - 1;
  if (v4 == v5 - 1)
  {
    v10 = (int *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(a1 + 32));
    if (v8 == v10)
      return 1;
  }
  else
  {
    v10 = (int *)(v6 + 4 * *(unsigned int *)(v7 + 4 * (v4 + 1)));
    if (v8 == v10)
      return 1;
  }
  v11 = v10 - v8;
  do
  {
    v12 = v11 >> 1;
    v13 = &v8[v11 >> 1];
    v14 = *((unsigned __int16 *)v13 + 1);
    v15 = v13 + 1;
    v11 += ~(v11 >> 1);
    if (v14 < (unsigned __int16)a2)
      v8 = v15;
    else
      v11 = v12;
  }
  while (v11);
  if (v8 >= v10)
    return 1;
  v16 = *v8;
  if ((*v8 ^ (a2 << 16)) >> 16)
    return 1;
  v17 = *(unsigned int *)(a3 + 4 * a4 - 4);
  v18 = v17 >> 16;
  if (HIWORD(*(_DWORD *)(a3 + 4 * a4 - 4)) >= v5)
    return 1;
  v19 = (unsigned int *)(v6 + 4 * *(unsigned int *)(v7 + 4 * v18));
  v20 = (unsigned int *)((_DWORD)v18 == v9
                       ? *(_QWORD *)(a1 + 24) + *(_QWORD *)(a1 + 32)
                       : v6 + 4 * *(unsigned int *)(v7 + 4 * (v18 + 1)));
  if (v19 == v20)
    return 1;
  v21 = v20 - v19;
  do
  {
    v22 = v21 >> 1;
    v23 = &v19[v21 >> 1];
    v24 = *((unsigned __int16 *)v23 + 1);
    v25 = v23 + 1;
    v21 += ~(v21 >> 1);
    if (v24 < (unsigned __int16)*(_DWORD *)(a3 + 4 * a4 - 4))
      v19 = v25;
    else
      v21 = v22;
  }
  while (v21);
  if (v19 >= v20)
    return 1;
  v26 = *v19;
  if ((v26 ^ ((_DWORD)v17 << 16)) >> 16)
    return 1;
  if ((v16 & 0x10) == 0)
  {
    v27 = 1;
    if ((v16 & 1) == 0 || (v26 & 4) == 0)
      return v27;
    goto LABEL_34;
  }
  if ((v26 & 1) == 0)
  {
    if ((v26 & 4) != 0)
    {
LABEL_34:
      v29 = v16 & v26;
      return (v29 & 0x7E0) != 0;
    }
    return 1;
  }
  v30 = v16 & v26;
  v31 = ((unsigned __int16)v16 & (unsigned __int16)v26 & 0x7800) != 0;
  v27 = (v30 & 0x7E0) != 0 && v31;
  if (a4 < 3)
    return v27;
  v32 = *(unsigned int *)(a3 + 4 * a4 - 8);
  v33 = v32 >> 16;
  if (HIWORD(*(_DWORD *)(a3 + 4 * a4 - 8)) >= v5)
    return v27;
  v34 = (int *)(v6 + 4 * *(unsigned int *)(v7 + 4 * v33));
  v35 = (int *)((_DWORD)v33 == v9
              ? *(_QWORD *)(a1 + 24) + *(_QWORD *)(a1 + 32)
              : v6 + 4 * *(unsigned int *)(v7 + 4 * (v33 + 1)));
  if (v34 == v35)
    return v27;
  v36 = v35 - v34;
  do
  {
    v37 = v36 >> 1;
    v38 = &v34[v36 >> 1];
    v39 = *((unsigned __int16 *)v38 + 1);
    v40 = v38 + 1;
    v36 += ~(v36 >> 1);
    if (v39 < (unsigned __int16)*(_DWORD *)(a3 + 4 * a4 - 8))
      v34 = v40;
    else
      v36 = v37;
  }
  while (v36);
  if (v34 >= v35)
    return v27;
  v41 = *v34;
  if ((*v34 ^ ((_DWORD)v32 << 16)) >> 16)
    return v27;
  if ((v41 & 4) != 0)
    v42 = 0;
  else
    v42 = v27;
  if ((v41 & 4) != 0)
  {
    v43 = v27 ^ 1;
    v27 = v42;
    if ((v43 & 1) != 0)
      return v27;
    v29 = v41 & v16;
    return (v29 & 0x7E0) != 0;
  }
  return v42;
}

double sub_19C356518(uint64_t a1)
{
  return *(double *)(a1 + 8);
}

_QWORD *sub_19C356520(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  void *v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;

  *a1 = &off_1E3D35858;
  v2 = (_QWORD *)a1[44];
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)a1[42];
  a1[42] = 0;
  if (v4)
    operator delete(v4);
  *a1 = off_1E3D34EB0;
  v5 = (void *)a1[37];
  if (v5)
    operator delete(v5);
  v6 = (_QWORD *)a1[33];
  if (v6)
  {
    do
    {
      v7 = (_QWORD *)*v6;
      operator delete(v6);
      v6 = v7;
    }
    while (v7);
  }
  v8 = (void *)a1[31];
  a1[31] = 0;
  if (v8)
    operator delete(v8);
  return sub_19C3578F0(a1);
}

void sub_19C3565B4(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  void *v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;

  *a1 = &off_1E3D35858;
  v2 = (_QWORD *)a1[44];
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)a1[42];
  a1[42] = 0;
  if (v4)
    operator delete(v4);
  *a1 = off_1E3D34EB0;
  v5 = (void *)a1[37];
  if (v5)
    operator delete(v5);
  v6 = (_QWORD *)a1[33];
  if (v6)
  {
    do
    {
      v7 = (_QWORD *)*v6;
      operator delete(v6);
      v6 = v7;
    }
    while (v7);
  }
  v8 = (void *)a1[31];
  a1[31] = 0;
  if (v8)
    operator delete(v8);
  sub_19C3578F0(a1);
  JUMPOUT(0x1A1AD355CLL);
}

void sub_19C35665C(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

void sub_19C3566A4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  sub_19C35765C(v1, v2, v0);
}

_DWORD *sub_19C3566D0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, void *__p, uint64_t a17, uint64_t a18, int a19, size_t __n,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  _QWORD *v35;
  uint64_t v36;
  int v37;
  _DWORD *v38;
  _DWORD *result;

  v37 = *(_DWORD *)(v36 + 80);
  v35[1] = 0;
  v35[2] = 0;
  *v35 = 0;
  v38 = operator new(4uLL);
  *v35 = v38;
  *v38 = v37;
  result = v38 + 1;
  v35[1] = result;
  v35[2] = result;
  return result;
}

void sub_19C356CD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19C356D2C(uint64_t a1, uint64_t a2)
{
  void *__p[2];
  char v4;
  int v5;
  void *__dst[2];
  uint64_t v7;
  int v8;

  if (*(char *)(a2 + 23) < 0)
  {
    sub_19C2B5238(__dst, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)a2;
    v7 = *(_QWORD *)(a2 + 16);
  }
  v8 = 0;
  sub_19C297950(__p, (const UInt8 *)__dst);
  v5 = v8;
  sub_19C35665C(a1, (uint64_t)__p);
  if ((v4 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v7) & 0x80000000) == 0)
      return;
LABEL_8:
    operator delete(__dst[0]);
    return;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v7) < 0)
    goto LABEL_8;
}

void sub_19C356DD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  _Unwind_Resume(exception_object);
}

void sub_19C356E20(uint64_t a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int *v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  __int128 *v15;
  uint64_t v16;
  __int128 v17;
  int v18;
  void *exception;
  std::string *v20;
  std::string v21;
  uint64_t v22;
  void *__p;
  void *v24;
  _DWORD *v25;

  v8 = a2;
  v9 = a3 - 1;
  if (a3 == 1 && *a2 == *(_DWORD *)(a1 + 68))
  {
    *(_BYTE *)(a4 + 23) = 5;
    strcpy((char *)a4, "<unk>");
  }
  else
  {
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    v10 = a3;
    __p = 0;
    v24 = 0;
    v25 = 0;
    if (4 * a3)
    {
      if (v10 * 4 < 0)
        sub_19C2A18E8();
      v11 = operator new(4 * a3);
      __p = v11;
      v25 = &v11[(4 * a3) >> 2];
      if (a3)
      {
        if ((v9 & 0x3FFFFFFFFFFFFFFFuLL) < 7)
          goto LABEL_25;
        if ((unint64_t)((char *)v11 - (char *)a2) < 0x20)
          goto LABEL_25;
        v12 = (v9 & 0x3FFFFFFFFFFFFFFFLL) + 1;
        v13 = v12 & 0x7FFFFFFFFFFFFFF8;
        v8 = &a2[v13];
        v14 = v11 + 4;
        v15 = (__int128 *)(a2 + 4);
        v16 = v12 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v17 = *v15;
          *(v14 - 1) = *(v15 - 1);
          *v14 = v17;
          v14 += 2;
          v15 += 2;
          v16 -= 8;
        }
        while (v16);
        v11 = (_DWORD *)((char *)v11 + v13 * 4);
        if (v12 != (v12 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_25:
          do
          {
            v18 = *v8++;
            *v11++ = v18;
          }
          while (v8 != &a2[v10]);
        }
      }
      v24 = v11;
    }
    sub_19C2AAD64(a1 + 128, (uint64_t)&__p, a4, &v22);
    if (v22)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      sub_19C2CD6DC((uint64_t)&v22, &v21);
      if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v20 = &v21;
      else
        v20 = (std::string *)v21.__r_.__value_.__r.__words[0];
      MEMORY[0x1A1AD3154](exception, v20);
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
    }
    sub_19C2CD3C8(&v22);
    if (__p)
    {
      v24 = __p;
      operator delete(__p);
    }
  }
}

void sub_19C356FE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *__p, uint64_t a18)
{
  uint64_t v18;

  if (__p)
  {
    operator delete(__p);
    if ((*(char *)(v18 + 23) & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((*(char *)(v18 + 23) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)v18);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_19C357060@<X0>(_QWORD *result@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  __int128 *v4;
  __int128 v5;

  v3 = result[4];
  if (0xAAAAAAAAAAAAAAABLL * ((result[5] - v3) >> 3) <= a2)
    __assert_rtn("fragmentString", "SentencePieceCoder.hpp", 107, "fragmentID < m_tokenIDToFragmentStrMap.size()");
  v4 = (__int128 *)(v3 + 24 * a2);
  if (*((char *)v4 + 23) < 0)
    return sub_19C2B5238((_BYTE *)a3, *(void **)v4, *((_QWORD *)v4 + 1));
  v5 = *v4;
  *(_QWORD *)(a3 + 16) = *((_QWORD *)v4 + 2);
  *(_OWORD *)a3 = v5;
  return result;
}

_QWORD *sub_19C3570E4@<X0>(_QWORD *result@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  __int128 v4;

  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(result[5] - result[4]) >> 3) <= a2)
    __assert_rtn("fragmentStringWithDelimiters", "SentencePieceCoder.hpp", 99, "fragmentID < m_tokenIDToFragmentStrMap.size()");
  v3 = result[1] + 24 * a2;
  if (*(char *)(v3 + 23) < 0)
    return sub_19C2B5238((_BYTE *)a3, *(void **)v3, *(_QWORD *)(v3 + 8));
  v4 = *(_OWORD *)v3;
  *(_QWORD *)(a3 + 16) = *(_QWORD *)(v3 + 16);
  *(_OWORD *)a3 = v4;
  return result;
}

BOOL sub_19C35716C(uint64_t a1, unsigned int a2, _QWORD *__s2)
{
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t v5;
  _QWORD *v6;
  __int128 *v7;
  __int128 v8;
  _BOOL8 v9;
  unint64_t v10;
  int v11;
  size_t v12;
  __int128 *v13;
  void *v14;
  __int128 *v15;
  __int128 v17;
  uint64_t v18;

  v3 = *((unsigned __int8 *)__s2 + 23);
  v4 = v3;
  if ((v3 & 0x80u) != 0)
    v3 = __s2[1];
  if (!v3)
    return 1;
  v5 = *(_QWORD *)(a1 + 32);
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 40) - v5) >> 3) <= a2)
    __assert_rtn("fragmentString", "SentencePieceCoder.hpp", 107, "fragmentID < m_tokenIDToFragmentStrMap.size()");
  v6 = __s2;
  v7 = (__int128 *)(v5 + 24 * a2);
  if (*((char *)v7 + 23) < 0)
  {
    sub_19C2B5238(&v17, *(void **)v7, *((_QWORD *)v7 + 1));
    v4 = *((_BYTE *)v6 + 23);
  }
  else
  {
    v8 = *v7;
    v18 = *((_QWORD *)v7 + 2);
    v17 = v8;
  }
  v10 = HIBYTE(v18);
  v11 = SHIBYTE(v18);
  if (v18 < 0)
    v10 = *((_QWORD *)&v17 + 1);
  if ((v4 & 0x80) == 0)
  {
    v12 = v4;
    if (v10 >= v4)
      goto LABEL_23;
LABEL_15:
    if ((v4 & 0x80u) == 0)
      v13 = (__int128 *)v6;
    else
      v13 = (__int128 *)*v6;
    v14 = (void *)v17;
    if (v18 >= 0)
      v15 = &v17;
    else
      v15 = (__int128 *)v17;
    v12 = v10;
    goto LABEL_27;
  }
  v12 = v6[1];
  if (v10 < v12)
    goto LABEL_15;
  v6 = (_QWORD *)*v6;
LABEL_23:
  v14 = (void *)v17;
  if (v18 >= 0)
    v13 = &v17;
  else
    v13 = (__int128 *)v17;
  v15 = (__int128 *)v6;
LABEL_27:
  v9 = memcmp(v13, v15, v12) == 0;
  if (v11 < 0)
    operator delete(v14);
  return v9;
}

unsigned int *sub_19C3572C0(unsigned int *result, int a2)
{
  switch(a2)
  {
    case 2:
      return (unsigned int *)result[20];
    case 1:
      return (unsigned int *)result[19];
    case 0:
      return (unsigned int *)result[17];
  }
  return result;
}

void sub_19C3572F0(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 23) = 3;
  *(_DWORD *)a1 = 8492770;
}

uint64_t sub_19C357308(uint64_t a1)
{
  return *(unsigned int *)(a1 + 72);
}

BOOL sub_19C357310(uint64_t a1, unsigned int a2)
{
  unint64_t v2;
  uint8x8_t v3;
  unint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 96);
  if (v2)
  {
    v3 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
    v3.i16[0] = vaddlv_u8(v3);
    if (v3.u32[0] > 1uLL)
    {
      v4 = a2;
      if (v2 <= a2)
        v4 = a2 % v2;
    }
    else
    {
      v4 = ((_DWORD)v2 - 1) & a2;
    }
    v5 = *(uint64_t **)(*(_QWORD *)(a1 + 88) + 8 * v4);
    if (v5)
    {
      v5 = (uint64_t *)*v5;
      if (v5)
      {
        if (v3.u32[0] < 2uLL)
        {
          v6 = v2 - 1;
          while (1)
          {
            v8 = v5[1];
            if (v8 == a2)
            {
              if (*((_DWORD *)v5 + 4) == a2)
                return v5 != 0;
            }
            else if ((v8 & v6) != v4)
            {
              goto LABEL_21;
            }
            v5 = (uint64_t *)*v5;
            if (!v5)
              return v5 != 0;
          }
        }
        do
        {
          v7 = v5[1];
          if (v7 == a2)
          {
            if (*((_DWORD *)v5 + 4) == a2)
              return v5 != 0;
          }
          else
          {
            if (v7 >= v2)
              v7 %= v2;
            if (v7 != v4)
              goto LABEL_21;
          }
          v5 = (uint64_t *)*v5;
        }
        while (v5);
      }
    }
  }
  else
  {
LABEL_21:
    v5 = 0;
  }
  return v5 != 0;
}

BOOL sub_19C3573F0(uint64_t a1, int a2)
{
  return *(_DWORD *)(a1 + 68) == a2;
}

BOOL sub_19C357400(uint64_t a1, int a2)
{
  return *(_DWORD *)(a1 + 76) == a2;
}

BOOL sub_19C357410(uint64_t a1, int a2)
{
  return *(_DWORD *)(a1 + 80) == a2;
}

BOOL sub_19C357420(uint64_t a1, int a2)
{
  return *(_DWORD *)(a1 + 72) == a2;
}

BOOL sub_19C357430(uint64_t a1, int a2)
{
  return *(_DWORD *)(a1 + 84) == a2;
}

uint64_t sub_19C357440(uint64_t a1, _QWORD *a2, unint64_t a3)
{
  unsigned int v3;
  unsigned __int16 *v4;
  int v5;
  int v6;

  if (a3 >= (uint64_t)(a2[1] - *a2) >> 2)
    __assert_rtn("isWordBoundaryIndex", "CoreLMPrefixCoder.cpp", 35, "index < encoding.size()");
  v3 = *(_DWORD *)(*a2 + 4 * a3);
  v4 = (unsigned __int16 *)(*(_QWORD *)(a1 + 8) + 24 * v3);
  if (*((char *)v4 + 23) < 0)
  {
    v4 = *(unsigned __int16 **)v4;
    if (*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24 * v3 + 8) < 3uLL)
      return *(_DWORD *)(a1 + 76) == v3;
  }
  else if (*((unsigned __int8 *)v4 + 23) < 3uLL)
  {
    return *(_DWORD *)(a1 + 76) == v3;
  }
  v5 = *v4;
  v6 = *((unsigned __int8 *)v4 + 2);
  if (v5 != 38626 || v6 != 129)
    return *(_DWORD *)(a1 + 76) == v3;
  return 1;
}

BOOL sub_19C3574E8(uint64_t a1, unsigned int a2)
{
  unsigned __int16 *v2;
  int v4;
  int v5;

  v2 = (unsigned __int16 *)(*(_QWORD *)(a1 + 8) + 24 * a2);
  if (*((char *)v2 + 23) < 0)
  {
    v2 = *(unsigned __int16 **)v2;
    if (*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24 * a2 + 8) < 3uLL)
      return 0;
  }
  else if (*((unsigned __int8 *)v2 + 23) < 3uLL)
  {
    return 0;
  }
  v4 = *v2;
  v5 = *((unsigned __int8 *)v2 + 2);
  return v4 == 38626 && v5 == 129;
}

BOOL sub_19C35753C(uint64_t a1, unsigned int a2)
{
  unint64_t v2;
  uint8x8_t v3;
  unint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 344);
  if (v2)
  {
    v3 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
    v3.i16[0] = vaddlv_u8(v3);
    if (v3.u32[0] > 1uLL)
    {
      v4 = a2;
      if (v2 <= a2)
        v4 = a2 % v2;
    }
    else
    {
      v4 = ((_DWORD)v2 - 1) & a2;
    }
    v5 = *(uint64_t **)(*(_QWORD *)(a1 + 336) + 8 * v4);
    if (v5)
    {
      v5 = (uint64_t *)*v5;
      if (v5)
      {
        if (v3.u32[0] < 2uLL)
        {
          v6 = v2 - 1;
          while (1)
          {
            v8 = v5[1];
            if (v8 == a2)
            {
              if (*((_DWORD *)v5 + 4) == a2)
                return v5 != 0;
            }
            else if ((v8 & v6) != v4)
            {
              goto LABEL_21;
            }
            v5 = (uint64_t *)*v5;
            if (!v5)
              return v5 != 0;
          }
        }
        do
        {
          v7 = v5[1];
          if (v7 == a2)
          {
            if (*((_DWORD *)v5 + 4) == a2)
              return v5 != 0;
          }
          else
          {
            if (v7 >= v2)
              v7 %= v2;
            if (v7 != v4)
              goto LABEL_21;
          }
          v5 = (uint64_t *)*v5;
        }
        while (v5);
      }
    }
  }
  else
  {
LABEL_21:
    v5 = 0;
  }
  return v5 != 0;
}

uint64_t sub_19C35761C()
{
  return 0;
}

uint64_t sub_19C357624(uint64_t a1, unsigned int a2)
{
  return (*(_QWORD *)(*(_QWORD *)(a1 + 296) + (((unint64_t)a2 >> 3) & 0x1FFFFFF8)) >> a2) & 1;
}

uint64_t sub_19C357644(uint64_t a1)
{
  return *(unsigned int *)(a1 + 328);
}

uint64_t sub_19C35764C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 324);
}

uint64_t sub_19C357654(uint64_t a1)
{
  return *(unsigned int *)(a1 + 64);
}

void sub_19C35765C(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  void **v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  _DWORD *v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  __int128 *v14;
  _OWORD *v15;
  uint64_t v16;
  __int128 v17;
  int v18;
  void *exception;
  std::string *v20;
  std::string v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  void *__p[2];
  uint64_t v27;

  if (*(char *)(a2 + 23) < 0)
  {
    sub_19C2B5238(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v27 = *(_QWORD *)(a2 + 16);
  }
  v23 = 0;
  v24 = 0;
  v25 = 0;
  if (v27 >= 0)
    v5 = __p;
  else
    v5 = (void **)__p[0];
  if (v27 >= 0)
    v6 = HIBYTE(v27);
  else
    v6 = (uint64_t)__p[1];
  sub_19C2AA7D8(a1 + 128, (uint64_t)v5, v6, &v23, &v22);
  if (v22)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    sub_19C2CD6DC((uint64_t)&v22, &v21);
    if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v20 = &v21;
    else
      v20 = (std::string *)v21.__r_.__value_.__r.__words[0];
    MEMORY[0x1A1AD3154](exception, v20);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  sub_19C2CD3C8(&v22);
  v7 = v23;
  v8 = v24;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  v9 = v8 - v7;
  if (v8 == v7)
  {
LABEL_21:
    if (!v7)
      goto LABEL_23;
    goto LABEL_22;
  }
  if (v9 < 0)
    sub_19C2A18E8();
  v10 = operator new(v8 - v7);
  *a3 = v10;
  a3[2] = &v10[v9 >> 2];
  bzero(v10, v8 - v7);
  a3[1] = (char *)v10 + v9;
  if ((unint64_t)(v9 - 4) < 0x1C)
  {
    v11 = v7;
    do
    {
LABEL_20:
      v18 = *(_DWORD *)v11;
      v11 += 4;
      *v10++ = v18;
    }
    while (v11 != v8);
    goto LABEL_21;
  }
  v11 = v7;
  if ((unint64_t)((char *)v10 - v7) < 0x20)
    goto LABEL_20;
  v12 = ((unint64_t)(v9 - 4) >> 2) + 1;
  v13 = 4 * (v12 & 0x7FFFFFFFFFFFFFF8);
  v14 = (__int128 *)(v7 + 16);
  v15 = v10 + 4;
  v16 = v12 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    v17 = *v14;
    *(v15 - 1) = *(v14 - 1);
    *v15 = v17;
    v14 += 2;
    v15 += 2;
    v16 -= 8;
  }
  while (v16);
  if (v12 != (v12 & 0x7FFFFFFFFFFFFFF8))
  {
    v11 = &v7[v13];
    v10 = (_DWORD *)((char *)v10 + v13);
    goto LABEL_20;
  }
LABEL_22:
  v24 = v7;
  operator delete(v7);
LABEL_23:
  if (SHIBYTE(v27) < 0)
    operator delete(__p[0]);
}

void sub_19C357848(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (__p)
  {
    operator delete(__p);
    if ((a25 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a25 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a20);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_19C3578F0(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  const void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;

  *a1 = off_1E3D35F78;
  sub_19C2A77D4(a1 + 16);
  v2 = (_QWORD *)a1[13];
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)a1[11];
  a1[11] = 0;
  if (v4)
    operator delete(v4);
  v5 = (const void *)a1[7];
  if (v5)
    CFRelease(v5);
  a1[7] = 0;
  v6 = a1[4];
  if (v6)
  {
    v7 = a1[5];
    v8 = (void *)a1[4];
    if (v7 != v6)
    {
      do
      {
        if (*(char *)(v7 - 1) < 0)
          operator delete(*(void **)(v7 - 24));
        v7 -= 24;
      }
      while (v7 != v6);
      v8 = (void *)a1[4];
    }
    a1[5] = v6;
    operator delete(v8);
  }
  v9 = a1[1];
  if (v9)
  {
    v10 = a1[2];
    v11 = (void *)a1[1];
    if (v10 != v9)
    {
      do
      {
        if (*(char *)(v10 - 1) < 0)
          operator delete(*(void **)(v10 - 24));
        v10 -= 24;
      }
      while (v10 != v9);
      v11 = (void *)a1[1];
    }
    a1[2] = v9;
    operator delete(v11);
  }
  return a1;
}

void sub_19C357A04(float *a1, unsigned int a2, int a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t **v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t prime;
  void *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  size_t v25;
  size_t v26;
  size_t v27;
  _QWORD *i;
  size_t v29;
  uint64_t v30;
  unint64_t v31;
  uint8x8_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  size_t v36;
  _QWORD *v37;
  _QWORD *v38;
  unint64_t v39;
  _QWORD *v40;

  v6 = a2;
  v7 = *((_QWORD *)a1 + 1);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & a2;
    }
    v9 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (v10)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (*((_DWORD *)v10 + 4) == a2)
                return;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (uint64_t *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2)
              return;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v13 = operator new(0x18uLL);
  *v13 = 0;
  v13[1] = v6;
  *((_DWORD *)v13 + 4) = a3;
  v14 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v15 = a1[8];
  if (v7 && (float)(v15 * (float)v7) >= v14)
  {
    v6 = v3;
    goto LABEL_72;
  }
  v16 = 1;
  if (v7 >= 3)
    v16 = (v7 & (v7 - 1)) != 0;
  v17 = v16 | (2 * v7);
  v18 = vcvtps_u32_f32(v14 / v15);
  if (v17 <= v18)
    prime = v18;
  else
    prime = v17;
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
    v7 = *((_QWORD *)a1 + 1);
  }
  if (prime > v7)
  {
LABEL_35:
    if (prime >> 61)
      sub_19C2A143C();
    v20 = operator new(8 * prime);
    v21 = *(_QWORD **)a1;
    *(_QWORD *)a1 = v20;
    if (v21)
      operator delete(v21);
    v22 = 0;
    *((_QWORD *)a1 + 1) = prime;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v22++) = 0;
    while (prime != v22);
    v24 = (uint64_t *)(a1 + 4);
    v23 = (_QWORD *)*((_QWORD *)a1 + 2);
    if (!v23)
      goto LABEL_59;
    v25 = v23[1];
    v26 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v27 = v25 & v26;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v27) = v24;
      for (i = (_QWORD *)*v23; *v23; i = (_QWORD *)*v23)
      {
        v29 = i[1] & v26;
        if (v29 == v27)
        {
          v23 = i;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v29))
        {
          *v23 = *i;
          v30 = 8 * v29;
          *i = **(_QWORD **)(*(_QWORD *)a1 + v30);
          **(_QWORD **)(*(_QWORD *)a1 + v30) = i;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v29) = v23;
          v23 = i;
          v27 = v29;
        }
      }
LABEL_59:
      v7 = prime;
      goto LABEL_60;
    }
    if (v25 >= prime)
      v25 %= prime;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v25) = v24;
    v34 = (_QWORD *)*v23;
    if (!*v23)
      goto LABEL_59;
    while (1)
    {
      v36 = v34[1];
      if (v36 >= prime)
        v36 %= prime;
      if (v36 != v25)
      {
        if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v36))
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v36) = v23;
          goto LABEL_64;
        }
        *v23 = *v34;
        v35 = 8 * v36;
        *v34 = **(_QWORD **)(*(_QWORD *)a1 + v35);
        **(_QWORD **)(*(_QWORD *)a1 + v35) = v34;
        v34 = v23;
      }
      v36 = v25;
LABEL_64:
      v23 = v34;
      v34 = (_QWORD *)*v34;
      v25 = v36;
      if (!v34)
        goto LABEL_59;
    }
  }
  if (prime >= v7)
    goto LABEL_60;
  v31 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
  if (v7 < 3 || (v32 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v32.i16[0] = vaddlv_u8(v32), v32.u32[0] > 1uLL))
  {
    v31 = std::__next_prime(v31);
  }
  else
  {
    v33 = 1 << -(char)__clz(v31 - 1);
    if (v31 >= 2)
      v31 = v33;
  }
  if (prime <= v31)
    prime = v31;
  if (prime < v7)
  {
    if (!prime)
    {
      v40 = *(_QWORD **)a1;
      *(_QWORD *)a1 = 0;
      if (v40)
        operator delete(v40);
      v7 = 0;
      *((_QWORD *)a1 + 1) = 0;
      goto LABEL_60;
    }
    goto LABEL_35;
  }
  v7 = *((_QWORD *)a1 + 1);
LABEL_60:
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v6)
      v6 %= v7;
  }
  else
  {
    v6 = ((_DWORD)v7 - 1) & v6;
  }
LABEL_72:
  v37 = *(_QWORD **)a1;
  v38 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v6);
  if (v38)
  {
    *v13 = *v38;
LABEL_80:
    *v38 = v13;
    goto LABEL_81;
  }
  *v13 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v13;
  v37[v6] = a1 + 4;
  if (*v13)
  {
    v39 = *(_QWORD *)(*v13 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v39 >= v7)
        v39 %= v7;
    }
    else
    {
      v39 &= v7 - 1;
    }
    v38 = (_QWORD *)(*(_QWORD *)a1 + 8 * v39);
    goto LABEL_80;
  }
LABEL_81:
  ++*((_QWORD *)a1 + 3);
}

void sub_19C357E4C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19C357E60(unint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4, std::string::value_type *a5, char *a6, char *a7, unint64_t a8, std::string::value_type *a9)
{
  uint64_t v11;
  char *v12;
  char *v13;
  char *v15;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  unsigned int v31;
  unint64_t v32;
  uint64_t v33;

  v11 = *(unsigned __int8 *)(a2 + 23);
  v12 = *(char **)a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  if ((v11 & 0x80u) == 0)
    v13 = (char *)a2;
  else
    v13 = v12;
  *(_QWORD *)a1 = 0;
  if (a6 == a7)
  {
    v33 = 0;
    v32 = 0;
    v31 = 0;
    if ((v11 & 0x80u) != 0)
      v11 = *(_QWORD *)(a2 + 8);
    v20 = v13;
  }
  else
  {
    v15 = a7;
    v20 = v13;
    while (1)
    {
      v21 = *(unsigned __int8 *)(a1 + 23);
      if ((v21 & 0x80u) == 0)
        v22 = a1;
      else
        v22 = *(_QWORD *)a1;
      if ((v21 & 0x80u) != 0)
        v21 = *(_QWORD *)(a1 + 8);
      sub_19C35804C(a1, v22 + v21, v20, a6, a6 - v20);
      v23 = *(unsigned __int8 *)(a1 + 23);
      if ((v23 & 0x80u) == 0)
        v24 = a1;
      else
        v24 = *(_QWORD *)a1;
      if ((v23 & 0x80u) != 0)
        v23 = *(_QWORD *)(a1 + 8);
      sub_19C3581BC((unint64_t *)a1, v24 + v23, a8, a9, (unint64_t)&a9[-a8]);
      v11 = *(unsigned __int8 *)(a2 + 23);
      if ((v11 & 0x80u) == 0)
        v13 = (char *)a2;
      else
        v13 = *(char **)a2;
      if ((v11 & 0x80u) != 0)
        v11 = *(_QWORD *)(a2 + 8);
      v25 = &v13[v11];
      if (v15 == &v13[v11])
        break;
      v26 = *a3;
      v27 = a3[1];
      if (*a3 == v27)
        break;
      a6 = v15;
      while (1)
      {
        v28 = 0;
        do
        {
          if (a6[v28] != *(_BYTE *)(v26 + v28))
            break;
          if (&a6[++v28] == v25)
            break;
        }
        while (v28 + v26 != v27);
        v29 = v26 + v28;
        v30 = &a6[v28];
        if (v29 == v27)
          break;
        if (++a6 == v25)
          goto LABEL_34;
      }
      v20 = v15;
      v15 = v30;
      if (a6 == v30)
        goto LABEL_35;
      a9 = a5;
      a8 = a4;
    }
LABEL_34:
    v20 = v15;
LABEL_35:
    v31 = *(unsigned __int8 *)(a1 + 23);
    v32 = *(_QWORD *)a1;
    v33 = *(_QWORD *)(a1 + 8);
  }
  if ((v31 & 0x80u) == 0)
  {
    v32 = a1;
    v33 = v31;
  }
  sub_19C35804C(a1, v32 + v33, v20, &v13[v11], &v13[v11] - v20);
}

void sub_19C35802C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_19C35804C(unint64_t a1, uint64_t a2, char *a3, char *a4, unint64_t a5)
{
  std::string::value_type *v7;
  uint64_t v9;
  unint64_t v10;
  size_t v11;
  unsigned int v12;
  std::string::size_type size;
  std::string::size_type v14;
  std::string *v15;
  std::string v16;

  v7 = a3;
  if (*(char *)(a1 + 23) < 0)
  {
    if (!a5)
      return;
    v10 = *(_QWORD *)a1;
    v9 = *(_QWORD *)(a1 + 8);
  }
  else
  {
    if (!a5)
      return;
    v9 = *(unsigned __int8 *)(a1 + 23);
    v10 = a1;
  }
  v11 = a2 - v10;
  if (v10 > (unint64_t)a3 || v10 + v9 + 1 <= (unint64_t)a3)
  {
    sub_19C358560((_QWORD *)a1, a5, v11, a3, a4);
  }
  else
  {
    memset(&v16, 0, sizeof(v16));
    if (a3 == a4)
    {
      size = 0;
      v14 = 0;
      v12 = 0;
    }
    else
    {
      do
        std::string::push_back(&v16, *v7++);
      while (v7 != a4);
      v12 = HIBYTE(v16.__r_.__value_.__r.__words[2]);
      size = v16.__r_.__value_.__l.__size_;
      v14 = v16.__r_.__value_.__r.__words[0];
    }
    if ((v12 & 0x80u) == 0)
      v15 = &v16;
    else
      v15 = (std::string *)v14;
    if ((v12 & 0x80u) == 0)
      size = v12;
    sub_19C358560((_QWORD *)a1, a5, v11, (char *)v15, (char *)v15 + size);
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v16.__r_.__value_.__l.__data_);
  }
}

void sub_19C358170(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_19C3581BC(unint64_t *a1, uint64_t a2, unint64_t a3, std::string::value_type *a4, unint64_t a5)
{
  std::string::value_type *v7;
  unint64_t v9;
  size_t v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  size_t v19;
  _BYTE *v20;
  _BYTE *v21;
  size_t v22;
  unsigned int v23;
  std::string::size_type size;
  std::string::size_type v25;
  std::string *v26;
  size_t v27;
  _BYTE *v28;
  unint64_t v29;
  std::string::value_type *v30;
  unint64_t v31;
  _OWORD *v32;
  __int128 *v33;
  unint64_t v34;
  __int128 v35;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  std::string::value_type *v39;
  uint64_t v40;
  char v41;
  std::string v42;

  v7 = (std::string::value_type *)a3;
  LODWORD(v9) = *((char *)a1 + 23);
  if ((v9 & 0x80000000) == 0)
  {
    if (!a5)
      return;
    v10 = *((unsigned __int8 *)a1 + 23);
    v11 = a2 - (_QWORD)a1;
    if ((unint64_t)a1 > a3 || (unint64_t)a1 + v10 + 1 <= a3)
    {
      if (22 - v10 < a5)
      {
        v12 = v10 + a5;
        if (v10 + a5 - 0x7FFFFFFFFFFFFFF8 >= 0x800000000000001ELL)
        {
          v13 = 22;
          v14 = (char *)a1;
          goto LABEL_16;
        }
        goto LABEL_67;
      }
      v21 = a1;
      goto LABEL_43;
    }
LABEL_30:
    memset(&v42, 0, sizeof(v42));
    if ((std::string::value_type *)a3 == a4)
    {
      size = 0;
      v25 = 0;
      v23 = 0;
    }
    else
    {
      do
        std::string::push_back(&v42, *v7++);
      while (v7 != a4);
      v23 = HIBYTE(v42.__r_.__value_.__r.__words[2]);
      size = v42.__r_.__value_.__l.__size_;
      v25 = v42.__r_.__value_.__r.__words[0];
    }
    if ((v23 & 0x80u) == 0)
      v26 = &v42;
    else
      v26 = (std::string *)v25;
    if ((v23 & 0x80u) == 0)
      size = v23;
    sub_19C358560(a1, a5, v11, (char *)v26, (char *)v26 + size);
    if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v42.__r_.__value_.__l.__data_);
    return;
  }
  if (!a5)
    return;
  v11 = a2 - *a1;
  if (*a1 <= a3 && *a1 + a1[1] + 1 > a3)
    goto LABEL_30;
  v10 = a1[1];
  v16 = a1[2];
  v17 = v16 & 0x7FFFFFFFFFFFFFFFLL;
  v13 = (v16 & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (v13 - v10 < a5)
  {
    v12 = v10 + a5;
    if (0x7FFFFFFFFFFFFFF8 - v17 >= v10 + a5 - v13)
    {
      v14 = (char *)*a1;
      if (v13 > 0x3FFFFFFFFFFFFFF2)
      {
        v19 = 0x7FFFFFFFFFFFFFF7;
LABEL_23:
        v20 = operator new(v19);
        v21 = v20;
        if (v11)
          memmove(v20, v14, v11);
        if (v10 != v11)
          memmove(&v21[v11 + a5], &v14[v11], v10 - v11);
        if (v13 != 22)
          operator delete(v14);
        *a1 = (unint64_t)v21;
        a1[2] = v19 | 0x8000000000000000;
        v22 = v10 + a5;
LABEL_47:
        a1[1] = v22;
        goto LABEL_48;
      }
LABEL_16:
      if (v12 <= 2 * v13)
        v12 = 2 * v13;
      v18 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v12 | 7) != 0x17)
        v18 = v12 | 7;
      if (v12 >= 0x17)
        v19 = v18 + 1;
      else
        v19 = 23;
      goto LABEL_23;
    }
LABEL_67:
    sub_19C2A1A54();
  }
  v9 = HIBYTE(v16);
  v21 = (_BYTE *)*a1;
LABEL_43:
  v27 = v11;
  if (v10 != v11)
  {
    memmove(&v21[v11 + a5], &v21[v11], v10 - v11);
    LOBYTE(v9) = *((_BYTE *)a1 + 23);
    v27 = v10;
  }
  v22 = v27 + a5;
  if ((v9 & 0x80) != 0)
    goto LABEL_47;
  *((_BYTE *)a1 + 23) = v22 & 0x7F;
LABEL_48:
  v21[v22] = 0;
  if (v7 == a4)
    return;
  v28 = &v21[v11];
  v29 = a4 - v7;
  if ((unint64_t)(a4 - v7) < 8)
  {
    v30 = v7;
    goto LABEL_65;
  }
  if ((unint64_t)(&v21[v11] - v7) < 0x20)
  {
    v30 = v7;
    goto LABEL_65;
  }
  if (v29 >= 0x20)
  {
    v31 = v29 & 0xFFFFFFFFFFFFFFE0;
    v32 = &v21[v11 + 16];
    v33 = (__int128 *)(v7 + 16);
    v34 = v29 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v35 = *v33;
      *(v32 - 1) = *(v33 - 1);
      *v32 = v35;
      v32 += 2;
      v33 += 2;
      v34 -= 32;
    }
    while (v34);
    if (v29 == v31)
      return;
    if ((v29 & 0x18) == 0)
    {
      v28 += v31;
      v30 = &v7[v31];
      do
      {
LABEL_65:
        v41 = *v30++;
        *v28++ = v41;
      }
      while (v30 != a4);
      return;
    }
  }
  else
  {
    v31 = 0;
  }
  v36 = v29 & 0xFFFFFFFFFFFFFFF8;
  v30 = &v7[v29 & 0xFFFFFFFFFFFFFFF8];
  v37 = v31 - (v29 & 0xFFFFFFFFFFFFFFF8);
  v38 = &v21[v11 + v31];
  v39 = &v7[v31];
  do
  {
    v40 = *(_QWORD *)v39;
    v39 += 8;
    *v38++ = v40;
    v37 += 8;
  }
  while (v37);
  if (v29 != v36)
  {
    v28 += v36;
    goto LABEL_65;
  }
}

void sub_19C358514(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

size_t sub_19C358560(_QWORD *a1, unint64_t a2, size_t a3, char *a4, char *a5)
{
  _QWORD *v9;
  unint64_t v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  size_t v18;
  char *v19;
  char *v20;
  size_t v21;
  size_t v22;
  size_t v23;
  char *v24;
  unint64_t v25;
  unint64_t v26;
  __int128 *v27;
  char *v28;
  unint64_t v29;
  __int128 v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  char *v34;
  uint64_t v35;
  char v36;

  v9 = a1;
  LODWORD(v10) = *((char *)a1 + 23);
  if ((v10 & 0x80000000) != 0)
  {
    v11 = a1[1];
    v15 = a1[2];
    v16 = v15 & 0x7FFFFFFFFFFFFFFFLL;
    v13 = (v15 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v13 - v11 < a2)
    {
      v12 = v11 + a2;
      if (0x7FFFFFFFFFFFFFF8 - v16 >= v11 + a2 - v13)
      {
        v14 = (char *)*a1;
        if (v13 > 0x3FFFFFFFFFFFFFF2)
        {
          v18 = 0x7FFFFFFFFFFFFFF7;
LABEL_15:
          v19 = (char *)operator new(v18);
          v20 = v19;
          if (a3)
            memmove(v19, v14, a3);
          if (v11 != a3)
            memmove(&v20[a3 + a2], &v14[a3], v11 - a3);
          if (v13 != 22)
            operator delete(v14);
          *v9 = v20;
          v9[2] = v18 | 0x8000000000000000;
          v21 = v11 + a2;
          goto LABEL_28;
        }
LABEL_8:
        if (v12 <= 2 * v13)
          v12 = 2 * v13;
        v17 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v12 | 7) != 0x17)
          v17 = v12 | 7;
        if (v12 >= 0x17)
          v18 = v17 + 1;
        else
          v18 = 23;
        goto LABEL_15;
      }
LABEL_48:
      sub_19C2A1A54();
    }
    v10 = HIBYTE(v15);
    v20 = (char *)*a1;
  }
  else
  {
    v11 = *((unsigned __int8 *)a1 + 23);
    if (22 - v11 < a2)
    {
      v12 = v11 + a2;
      if (v11 + a2 - 0x7FFFFFFFFFFFFFF8 >= 0x800000000000001ELL)
      {
        v13 = 22;
        v14 = (char *)a1;
        goto LABEL_8;
      }
      goto LABEL_48;
    }
    v20 = (char *)a1;
  }
  v22 = a3;
  v23 = v11 - a3;
  if (v11 != a3)
  {
    memmove(&v20[a3 + a2], &v20[a3], v23);
    LOBYTE(v10) = *((_BYTE *)v9 + 23);
    v22 = v11;
  }
  v21 = v22 + a2;
  if ((v10 & 0x80) == 0)
  {
    *((_BYTE *)v9 + 23) = v21 & 0x7F;
    goto LABEL_29;
  }
LABEL_28:
  v9[1] = v21;
LABEL_29:
  v20[v21] = 0;
  if (a4 == a5)
    goto LABEL_45;
  v24 = &v20[a3];
  v25 = a5 - a4;
  if ((unint64_t)(a5 - a4) < 8 || (unint64_t)(v24 - a4) < 0x20)
    goto LABEL_44;
  if (v25 >= 0x20)
  {
    v26 = v25 & 0xFFFFFFFFFFFFFFE0;
    v27 = (__int128 *)(a4 + 16);
    v28 = &v20[a3 + 16];
    v29 = v25 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v30 = *v27;
      *((_OWORD *)v28 - 1) = *(v27 - 1);
      *(_OWORD *)v28 = v30;
      v27 += 2;
      v28 += 32;
      v29 -= 32;
    }
    while (v29);
    if (v25 == v26)
      goto LABEL_45;
    if ((v25 & 0x18) == 0)
    {
      a4 += v26;
      v24 += v26;
      do
      {
LABEL_44:
        v36 = *a4++;
        *v24++ = v36;
      }
      while (a4 != a5);
      goto LABEL_45;
    }
  }
  else
  {
    v26 = 0;
  }
  v31 = v25 & 0xFFFFFFFFFFFFFFF8;
  v24 += v25 & 0xFFFFFFFFFFFFFFF8;
  v32 = v26 - (v25 & 0xFFFFFFFFFFFFFFF8);
  v33 = (uint64_t *)&a4[v26];
  v34 = &v20[v26 + a3];
  do
  {
    v35 = *v33++;
    *(_QWORD *)v34 = v35;
    v34 += 8;
    v32 += 8;
  }
  while (v32);
  if (v25 != v31)
  {
    a4 += v31;
    goto LABEL_44;
  }
LABEL_45:
  if (*((char *)v9 + 23) < 0)
    v9 = (_QWORD *)*v9;
  return (size_t)v9 + a3;
}

void sub_19C3587F4(_QWORD *a1)
{
  sub_19C361680(a1);
  JUMPOUT(0x1A1AD355CLL);
}

void sub_19C358818(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6, unsigned int a7, uint64_t a8, uint64_t a9)
{
  os_signpost_id_t v14;
  unint64_t v15;
  NSObject *v16;
  NSObject *v17;
  uint8_t v21[16];
  uint8_t buf[16];

  if (qword_1EDB971E0 != -1)
    dispatch_once(&qword_1EDB971E0, &unk_1E3D3AC10);
  v14 = os_signpost_id_generate((os_log_t)qword_1EDB971D8);
  if (qword_1EDB971E0 != -1)
    dispatch_once(&qword_1EDB971E0, &unk_1E3D3AC10);
  v15 = v14 - 1;
  if (v14 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v16 = qword_1EDB971D8;
    if (os_signpost_enabled((os_log_t)qword_1EDB971D8))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_19C291000, v16, OS_SIGNPOST_INTERVAL_BEGIN, v14, "ToucanGenerateInlineCompletions", (const char *)&unk_19C47C5B5, buf, 2u);
    }
  }
  if (*a2 == a2[1])
    __assert_rtn("generateCompletions", "MultiWordBeamSearchPredictor.cpp", 554, "!stems.empty()");
  if (!a5 || !a6)
    __assert_rtn("generateCompletions", "MultiWordBeamSearchPredictor.cpp", 555, "minWordsPerPrediction > 0 && maxWordsPerPrediction > 0");
  if (a6 < a5)
    __assert_rtn("generateCompletions", "MultiWordBeamSearchPredictor.cpp", 556, "maxWordsPerPrediction >= minWordsPerPrediction");
  (*(void (**)(uint64_t, uint64_t, _QWORD *, uint64_t, unint64_t, unint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, a3, a2, a4, a5, a6, a7, a8, a9);
  if (qword_1EDB971E0 == -1)
  {
    if (v15 > 0xFFFFFFFFFFFFFFFDLL)
      return;
  }
  else
  {
    dispatch_once(&qword_1EDB971E0, &unk_1E3D3AC10);
    if (v15 > 0xFFFFFFFFFFFFFFFDLL)
      return;
  }
  v17 = qword_1EDB971D8;
  if (os_signpost_enabled((os_log_t)qword_1EDB971D8))
  {
    *(_WORD *)v21 = 0;
    _os_signpost_emit_with_name_impl(&dword_19C291000, v17, OS_SIGNPOST_INTERVAL_END, v14, "ToucanGenerateInlineCompletions", (const char *)&unk_19C47C5B5, v21, 2u);
  }
}

void sub_19C358A5C(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W4>, uint64_t a4@<X5>, uint64_t *a5@<X6>, int a6@<W7>, void **a7@<X8>, float a8@<S0>, int a9, uint64_t *a10)
{
  _QWORD *v15;
  size_t v17;
  _BYTE *v18;
  _BYTE *v19;
  std::string *v20;
  const char *v21;
  uint64_t *v22;
  unsigned int **v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unsigned int *v33;
  unsigned int *v34;
  size_t v35;
  float *v36;
  float v37;
  unint64_t v38;
  int v39;
  char v40;
  std::__shared_weak_count *v41;
  char *v42;
  std::__shared_weak_count *v43;
  std::__shared_weak_count *v44;
  unint64_t *p_shared_owners;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  std::__shared_weak_count *v50;
  std::__shared_weak_count *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::string *v58;
  void **v59;
  uint64_t *v60;
  uint64_t p_p;
  const std::string::value_type *v62;
  std::string::size_type v63;
  uint64_t v64;
  std::string::size_type v65;
  std::string *v66;
  char v67;
  float v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  int v73;
  int v74;
  std::string::size_type v75;
  int v76;
  void **v77;
  float v78;
  unint64_t v79;
  float v80;
  void **v81;
  std::string *v82;
  const std::string::value_type *v83;
  std::string::size_type v84;
  uint64_t v85;
  std::string::size_type v86;
  std::string *v87;
  std::__shared_weak_count *v88;
  char v89;
  std::__shared_count v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  BOOL v94;
  const void **v95;
  const void **v96;
  void *v97;
  const void *v98;
  char MetaFlags;
  uint64_t v100;
  std::__shared_weak_count *v101;
  std::__shared_weak_count *v102;
  void **v103;
  uint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  std::string *v108;
  void **v109;
  const std::string::value_type *v110;
  std::string::size_type v111;
  uint64_t v112;
  std::string::size_type v113;
  std::string *v114;
  std::string::size_type v115;
  unint64_t *v116;
  unint64_t v117;
  std::__shared_weak_count *v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  unint64_t *v122;
  unint64_t v123;
  std::string::size_type v124;
  unint64_t *v125;
  unint64_t v126;
  std::string::size_type size;
  unint64_t *v128;
  int v129;
  void **v130;
  uint64_t v131;
  std::string::size_type v132;
  unint64_t *v133;
  unint64_t v134;
  std::string *v135;
  void **v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t *v139;
  unint64_t v140;
  void **v141;
  uint64_t v142;
  std::string::size_type v143;
  unint64_t *v144;
  unint64_t v145;
  std::string *v146;
  void **v147;
  uint64_t v148;
  void *v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  const char *v153;
  int v154;
  int v155;
  unsigned int **v156;
  uint64_t *v157;
  uint64_t v158;
  uint64_t v159;
  _QWORD *v160;
  void **v161;
  _QWORD *v163;
  void *v164[2];
  int64_t v165;
  _QWORD v166[38];
  __int128 __p;
  uint64_t v168;
  int v169;
  void *v170[23];
  void *__dst[2];
  int64_t v172;
  unsigned int *v173[3];
  float v174;
  void *v175;
  unsigned int **v176;
  void *__src[2];
  int64_t v178;
  uint64_t v179;
  std::__shared_weak_count *v180;
  std::string v181;
  std::string v182;
  const void *v183;
  std::string v184;
  std::__shared_weak_count *v185;
  std::__shared_weak_count *v186;
  unsigned __int8 v187;

  v15 = (_QWORD *)a1;
  sub_19C35CF10(&v179, a1, 0);
  *a7 = 0;
  a7[1] = 0;
  v161 = a7;
  a7[2] = 0;
  if (a3)
    v17 = 26;
  else
    v17 = 35;
  v18 = operator new((v17 | 7) + 1);
  v19 = v18;
  v20 = (std::string *)a10;
  v178 = ((v17 | 7) + 1) | 0x8000000000000000;
  if (a3)
    v21 = "Open Ended Prediction Mode";
  else
    v21 = "Lexicon Constrained Prediction Mode";
  __src[0] = v18;
  __src[1] = (void *)v17;
  memcpy(v18, v21, v17);
  v19[v17] = 0;
  (*(void (**)(void **__return_ptr, _QWORD *, uint64_t, uint64_t *, uint64_t *, float))(*v15 + 40))(&v175, v15, a2, a5, a10, a8);
  v22 = a5;
  v23 = (unsigned int **)v175;
  if (v175 == v176)
    goto LABEL_301;
  v24 = *((unsigned __int8 *)v22 + 23);
  if ((v24 & 0x80u) != 0)
    v24 = v22[1];
  v163 = v15;
  v160 = v15 + 9;
  if (!v24 || (__p = 0uLL, v168 = 0, v25 = *((_QWORD *)v175 + 35), v26 = *((_QWORD *)v175 + 36), v26 == v25))
  {
LABEL_35:
    v42 = (char *)v23[30];
    if ((char *)v23[31] - v42 == 24)
    {
      if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)v42 + 16))(*(_QWORD *)v42) & 1) != 0)
      {
        sub_19C35CA40((uint64_t)v173, (uint64_t)v23);
        if (SHIBYTE(v178) < 0)
        {
          sub_19C2B5238(__dst, __src[0], (unint64_t)__src[1]);
        }
        else
        {
          *(_OWORD *)__dst = *(_OWORD *)__src;
          v172 = v178;
        }
        v43 = (std::__shared_weak_count *)v15[9];
        v44 = (std::__shared_weak_count *)v15[10];
        v185 = v43;
        v186 = v44;
        if (v44)
        {
          p_shared_owners = (unint64_t *)&v44->__shared_owners_;
          do
            v46 = __ldxr(p_shared_owners);
          while (__stxr(v46 + 1, p_shared_owners));
        }
        ((void (*)(__int128 *__return_ptr, std::__shared_weak_count *, unsigned int *, int64_t))v43->__on_zero_shared_weak)(&__p, v43, v173[0], v173[1] - v173[0]);
        if (v44)
        {
          v47 = (unint64_t *)&v44->__shared_owners_;
          do
            v48 = __ldaxr(v47);
          while (__stlxr(v48 - 1, v47));
          if (!v48)
          {
            ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
            std::__shared_weak_count::__release_weak(v44);
          }
        }
        *((_BYTE *)&v184.__r_.__value_.__s + 23) = 1;
        LOWORD(v184.__r_.__value_.__l.__data_) = 32;
        sub_19C34F0F8((uint64_t)&v185, &__p, (unsigned __int8 *)&v184);
        v49 = v185;
        if (v185)
        {
          v50 = v186;
          v51 = v185;
          if (v186 != v185)
          {
            do
            {
              if (SHIBYTE(v50[-1].__shared_weak_owners_) < 0)
                operator delete(v50[-1].__vftable);
              --v50;
            }
            while (v50 != v49);
            v51 = v185;
          }
          v186 = v49;
          operator delete(v51);
        }
        if (SHIBYTE(v184.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v184.__r_.__value_.__l.__data_);
          if (a9)
            goto LABEL_89;
        }
        else if (a9)
        {
          goto LABEL_89;
        }
        v52 = *((_QWORD *)&__p + 1);
        if (v168 >= 0)
          v52 = HIBYTE(v168);
        v53 = *((unsigned __int8 *)v22 + 23);
        if ((v53 & 0x80u) != 0)
          v53 = v22[1];
        if (v52 < v53 + 1)
        {
          if (qword_1EE41C080 != -1)
            dispatch_once(&qword_1EE41C080, &unk_1E3D3AB90);
          v54 = v15[9];
          v55 = (std::__shared_weak_count *)v15[10];
          v182.__r_.__value_.__r.__words[0] = v54;
          v182.__r_.__value_.__l.__size_ = (std::string::size_type)v55;
          if (v55)
          {
            v56 = (unint64_t *)&v55->__shared_owners_;
            do
              v57 = __ldxr(v56);
            while (__stxr(v57 + 1, v56));
          }
          sub_19C3E29F8(&v184, v173, v54);
          if ((v184.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v58 = &v184;
          else
            v58 = (std::string *)v184.__r_.__value_.__r.__words[0];
          v59 = __dst;
          if (v172 < 0)
            v59 = (void **)__dst[0];
          v60 = (uint64_t *)*v22;
          if (*((char *)v22 + 23) >= 0)
            v60 = v22;
          p_p = (uint64_t)&__p;
          if (v168 < 0)
            p_p = __p;
          sub_19C34EC30("Rejected prediction for completed final hypothesis = [%s], Prediction Mode= [%s] , Completion = [%s] for prefix = [%s] doesn't meet minium additonal length requirement =[%zu]", (uint64_t)&v185, v58, v59, p_p, v60, 1);
          if ((v187 & 0x80u) == 0)
            v62 = (const std::string::value_type *)&v185;
          else
            v62 = (const std::string::value_type *)v185;
          if ((v187 & 0x80u) == 0)
            v63 = v187;
          else
            v63 = (std::string::size_type)v186;
          std::string::append(v20, v62, v63);
          if (SHIBYTE(v20->__r_.__value_.__r.__words[2]) < 0)
          {
            size = v20->__r_.__value_.__l.__size_;
            if (size)
            {
              v66 = (std::string *)v20->__r_.__value_.__r.__words[0];
              if (!*(_BYTE *)(v20->__r_.__value_.__r.__words[0] + size - 1))
              {
                v65 = size - 1;
                v20->__r_.__value_.__l.__size_ = v65;
                goto LABEL_241;
              }
            }
          }
          else
          {
            v64 = HIBYTE(v20->__r_.__value_.__r.__words[2]);
            if (*((_BYTE *)&v20->__r_.__value_.__s + 23) && !v20->__r_.__value_.__s.__data_[v64 - 1])
            {
              v65 = v64 - 1;
              *((_BYTE *)&v20->__r_.__value_.__s + 23) = v64 - 1;
              v66 = v20;
LABEL_241:
              v66->__r_.__value_.__s.__data_[v65] = 0;
            }
          }
          std::string::push_back(v20, 10);
          if ((char)v187 < 0)
          {
            operator delete(v185);
            if ((SHIBYTE(v184.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_244:
              if (!v55)
                goto LABEL_252;
              goto LABEL_248;
            }
          }
          else if ((SHIBYTE(v184.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            goto LABEL_244;
          }
          operator delete(v184.__r_.__value_.__l.__data_);
          if (!v55)
            goto LABEL_252;
LABEL_248:
          v128 = (unint64_t *)&v55->__shared_owners_;
          do
            v126 = __ldaxr(v128);
          while (__stlxr(v126 - 1, v128));
          goto LABEL_250;
        }
LABEL_89:
        v67 = 1;
        if (!a6 && byte_1EE41B1B8)
        {
          v68 = v174;
          if (*((char *)v22 + 23) >= 0)
            v69 = *((unsigned __int8 *)v22 + 23);
          else
            v69 = v22[1];
          if (v68 < sub_19C3E6760(v160, v69, 1uLL, 0))
          {
            if (qword_1EE41C080 != -1)
              dispatch_once(&qword_1EE41C080, &unk_1E3D3AB90);
            v70 = v15[9];
            v55 = (std::__shared_weak_count *)v15[10];
            v182.__r_.__value_.__r.__words[0] = v70;
            v182.__r_.__value_.__l.__size_ = (std::string::size_type)v55;
            if (v55)
            {
              v71 = (unint64_t *)&v55->__shared_owners_;
              do
                v72 = __ldxr(v71);
              while (__stxr(v72 + 1, v71));
            }
            v159 = a4;
            v73 = a3;
            sub_19C3E29F8(&v184, v173, v70);
            v74 = SHIBYTE(v184.__r_.__value_.__r.__words[2]);
            v75 = v184.__r_.__value_.__r.__words[0];
            v76 = SHIBYTE(v172);
            v77 = (void **)__dst[0];
            v78 = v174;
            if (*((char *)v22 + 23) >= 0)
              v79 = *((unsigned __int8 *)v22 + 23);
            else
              v79 = v22[1];
            v80 = sub_19C3E6760(v160, v79, 1uLL, 0);
            v81 = __dst;
            if (v76 < 0)
              v81 = v77;
            v82 = &v184;
            if (v74 < 0)
              v82 = (std::string *)v75;
            sub_19C34EC30("Rejected prediction for completed final hypothesis = [%s], Prediction Mode= [%s] , Probability = [%f] lower than minimum required threshold = [%f]", (uint64_t)&v185, v82, v81, v78, v80);
            if ((v187 & 0x80u) == 0)
              v83 = (const std::string::value_type *)&v185;
            else
              v83 = (const std::string::value_type *)v185;
            if ((v187 & 0x80u) == 0)
              v84 = v187;
            else
              v84 = (std::string::size_type)v186;
            std::string::append(v20, v83, v84);
            v15 = v163;
            a4 = v159;
            a3 = v73;
            if (SHIBYTE(v20->__r_.__value_.__r.__words[2]) < 0)
            {
              v124 = v20->__r_.__value_.__l.__size_;
              if (v124)
              {
                v87 = (std::string *)v20->__r_.__value_.__r.__words[0];
                if (!*(_BYTE *)(v20->__r_.__value_.__r.__words[0] + v124 - 1))
                {
                  v86 = v124 - 1;
                  v20->__r_.__value_.__l.__size_ = v86;
                  goto LABEL_228;
                }
              }
            }
            else
            {
              v85 = HIBYTE(v20->__r_.__value_.__r.__words[2]);
              if (*((_BYTE *)&v20->__r_.__value_.__s + 23) && !v20->__r_.__value_.__s.__data_[v85 - 1])
              {
                v86 = v85 - 1;
                *((_BYTE *)&v20->__r_.__value_.__s + 23) = v85 - 1;
                v87 = v20;
LABEL_228:
                v87->__r_.__value_.__s.__data_[v86] = 0;
              }
            }
            std::string::push_back(v20, 10);
            if ((char)v187 < 0)
            {
              operator delete(v185);
              if ((SHIBYTE(v184.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_231:
                if (!v55)
                  goto LABEL_252;
                goto LABEL_235;
              }
            }
            else if ((SHIBYTE(v184.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
              goto LABEL_231;
            }
            operator delete(v184.__r_.__value_.__l.__data_);
            if (!v55)
              goto LABEL_252;
LABEL_235:
            v125 = (unint64_t *)&v55->__shared_owners_;
            do
              v126 = __ldaxr(v125);
            while (__stlxr(v126 - 1, v125));
LABEL_250:
            if (!v126)
            {
              ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
              std::__shared_weak_count::__release_weak(v55);
            }
LABEL_252:
            v67 = 0;
            if (SHIBYTE(v168) < 0)
            {
LABEL_253:
              operator delete((void *)__p);
              if ((SHIBYTE(v172) & 0x80000000) == 0)
                goto LABEL_162;
              goto LABEL_254;
            }
LABEL_161:
            if ((SHIBYTE(v172) & 0x80000000) == 0)
              goto LABEL_162;
LABEL_254:
            operator delete(__dst[0]);
LABEL_162:
            sub_19C35CBE8((uint64_t)v173);
            if ((v67 & 1) == 0)
              goto LABEL_300;
            if (a3)
            {
              if (HIBYTE(word_1EE41C4AA))
              {
                if ((_BYTE)word_1EE41C4AA)
                {
LABEL_166:
                  sub_19C35CA40((uint64_t)v166, (uint64_t)v23);
                  if (SHIBYTE(v178) < 0)
                  {
                    sub_19C2B5238(v164, __src[0], (unint64_t)__src[1]);
                  }
                  else
                  {
                    *(_OWORD *)v164 = *(_OWORD *)__src;
                    v165 = v178;
                  }
                  v129 = sub_19C360738((uint64_t)v15, v166, a4, (uint64_t *)v164, v20);
                  if (SHIBYTE(v165) < 0)
                    operator delete(v164[0]);
                  sub_19C35CBE8((uint64_t)v166);
                  if (v129)
                  {
                    if (qword_1EE41C080 != -1)
                      dispatch_once(&qword_1EE41C080, &unk_1E3D3AB90);
                    v130 = (void **)&v185;
                    (*(void (**)(std::__shared_weak_count **__return_ptr, _QWORD *))(*v15 + 48))(&v185, v15);
                    if ((v187 & 0x80u) != 0)
                      v130 = (void **)&v185->__vftable;
                    v131 = v15[9];
                    v132 = v15[10];
                    v182.__r_.__value_.__r.__words[0] = v131;
                    v182.__r_.__value_.__l.__size_ = v132;
                    if (v132)
                    {
                      v133 = (unint64_t *)(v132 + 8);
                      do
                        v134 = __ldxr(v133);
                      while (__stxr(v134 + 1, v133));
                    }
                    sub_19C3E29F8(&v184, v23, v131);
                    if ((v184.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v135 = &v184;
                    else
                      v135 = (std::string *)v184.__r_.__value_.__r.__words[0];
                    v136 = __src;
                    if (v178 < 0)
                      v136 = (void **)__src[0];
                    sub_19C34EC30("%s - Accepted Prediction for completed final hypothesis = [%s], Prediction Mode= [%s], Lexicon Match After Beam Search: YES", (uint64_t)&__p, v130, v135, v136);
                    sub_19C351404(v20, (const std::string::value_type *)&__p);
                    if (SHIBYTE(v168) < 0)
                      operator delete((void *)__p);
                    if (SHIBYTE(v184.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v184.__r_.__value_.__l.__data_);
                    sub_19C2B43C8((uint64_t)&v182);
                    if ((char)v187 < 0)
                      operator delete(v185);
                    v137 = (std::__shared_weak_count *)v15[9];
                    v138 = (unint64_t *)v15[10];
                    v185 = v137;
                    v186 = (std::__shared_weak_count *)v138;
                    if (v138)
                    {
                      v139 = v138 + 1;
                      do
                        v140 = __ldxr(v139);
                      while (__stxr(v140 + 1, v139));
                    }
                    ((void (*)(__int128 *__return_ptr, std::__shared_weak_count *, unsigned int *, int64_t))v137->__on_zero_shared_weak)(&__p, v137, *v23, v23[1] - *v23);
                    v169 = *((_DWORD *)v23 + 6);
                    sub_19C2E1F84((uint64_t)v170, (uint64_t)(v23 + 7));
                    sub_19C3602BC(v161, &__p);
                    sub_19C360700((uint64_t)&__p);
                    sub_19C2B43C8((uint64_t)&v185);
                  }
                  else
                  {
                    if (qword_1EE41C080 != -1)
                      dispatch_once(&qword_1EE41C080, &unk_1E3D3AB90);
                    v141 = (void **)&v185;
                    (*(void (**)(std::__shared_weak_count **__return_ptr, _QWORD *))(*v15 + 48))(&v185, v15);
                    if ((v187 & 0x80u) != 0)
                      v141 = (void **)&v185->__vftable;
                    v142 = v15[9];
                    v143 = v15[10];
                    v182.__r_.__value_.__r.__words[0] = v142;
                    v182.__r_.__value_.__l.__size_ = v143;
                    if (v143)
                    {
                      v144 = (unint64_t *)(v143 + 8);
                      do
                        v145 = __ldxr(v144);
                      while (__stxr(v145 + 1, v144));
                    }
                    sub_19C3E29F8(&v184, v23, v142);
                    if ((v184.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v146 = &v184;
                    else
                      v146 = (std::string *)v184.__r_.__value_.__r.__words[0];
                    v147 = __src;
                    if (v178 < 0)
                      v147 = (void **)__src[0];
                    sub_19C34EC30("%s - Rejected Prediction - No lexicon Match for completed final hypothesis = [%s], Prediction Mode= [%s]", (uint64_t)&__p, v141, v146, v147);
                    sub_19C351404(v20, (const std::string::value_type *)&__p);
                    if (SHIBYTE(v168) < 0)
                      operator delete((void *)__p);
                    if (SHIBYTE(v184.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v184.__r_.__value_.__l.__data_);
                    sub_19C2B43C8((uint64_t)&v182);
                    if ((char)v187 < 0)
                      operator delete(v185);
                  }
                  goto LABEL_300;
                }
              }
              else if ((_os_feature_enabled_impl() & 1) != 0)
              {
                if (HIBYTE(word_1EE41C4AA))
                {
                  if (!(_BYTE)word_1EE41C4AA)
                    goto LABEL_300;
                }
                else if (!_os_feature_enabled_impl())
                {
                  goto LABEL_300;
                }
                goto LABEL_166;
              }
            }
            if (qword_1EE41C080 != -1)
              dispatch_once(&qword_1EE41C080, &unk_1E3D3AB90);
            v103 = (void **)&v185;
            (*(void (**)(std::__shared_weak_count **__return_ptr, _QWORD *))(*v15 + 48))(&v185, v15);
            if ((v187 & 0x80u) != 0)
              v103 = (void **)&v185->__vftable;
            v104 = v15[9];
            v105 = (std::__shared_weak_count *)v15[10];
            v182.__r_.__value_.__r.__words[0] = v104;
            v182.__r_.__value_.__l.__size_ = (std::string::size_type)v105;
            if (v105)
            {
              v106 = (unint64_t *)&v105->__shared_owners_;
              do
                v107 = __ldxr(v106);
              while (__stxr(v107 + 1, v106));
            }
            sub_19C3E29F8(&v184, v23, v104);
            if ((v184.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v108 = &v184;
            else
              v108 = (std::string *)v184.__r_.__value_.__r.__words[0];
            v109 = __src;
            if (v178 < 0)
              v109 = (void **)__src[0];
            sub_19C34EC30("%s - Accepted prediction for completed final hypothesis = [%s], Prediction Mode= [%s], Lexicon Match After Beam Search: NO", (uint64_t)&__p, v103, v108, v109);
            if (v168 >= 0)
              v110 = (const std::string::value_type *)&__p;
            else
              v110 = (const std::string::value_type *)__p;
            if (v168 >= 0)
              v111 = HIBYTE(v168);
            else
              v111 = *((_QWORD *)&__p + 1);
            std::string::append(v20, v110, v111);
            if (SHIBYTE(v20->__r_.__value_.__r.__words[2]) < 0)
            {
              v115 = v20->__r_.__value_.__l.__size_;
              if (v115)
              {
                v114 = (std::string *)v20->__r_.__value_.__r.__words[0];
                if (!*(_BYTE *)(v20->__r_.__value_.__r.__words[0] + v115 - 1))
                {
                  v113 = v115 - 1;
                  v20->__r_.__value_.__l.__size_ = v113;
                  goto LABEL_202;
                }
              }
            }
            else
            {
              v112 = HIBYTE(v20->__r_.__value_.__r.__words[2]);
              if (*((_BYTE *)&v20->__r_.__value_.__s + 23) && !v20->__r_.__value_.__s.__data_[v112 - 1])
              {
                v113 = v112 - 1;
                *((_BYTE *)&v20->__r_.__value_.__s + 23) = v112 - 1;
                v114 = v20;
LABEL_202:
                v114->__r_.__value_.__s.__data_[v113] = 0;
              }
            }
            std::string::push_back(v20, 10);
            if (SHIBYTE(v168) < 0)
            {
              operator delete((void *)__p);
              if ((SHIBYTE(v184.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_205:
                if (!v105)
                  goto LABEL_213;
                goto LABEL_209;
              }
            }
            else if ((SHIBYTE(v184.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
              goto LABEL_205;
            }
            operator delete(v184.__r_.__value_.__l.__data_);
            if (!v105)
            {
LABEL_213:
              if ((char)v187 < 0)
                operator delete(v185);
              v118 = (std::__shared_weak_count *)v15[9];
              v119 = (std::__shared_weak_count *)v15[10];
              v185 = v118;
              v186 = v119;
              if (v119)
              {
                v120 = (unint64_t *)&v119->__shared_owners_;
                do
                  v121 = __ldxr(v120);
                while (__stxr(v121 + 1, v120));
              }
              ((void (*)(__int128 *__return_ptr, std::__shared_weak_count *, unsigned int *, int64_t))v118->__on_zero_shared_weak)(&__p, v118, *v23, v23[1] - *v23);
              v169 = *((_DWORD *)v23 + 6);
              sub_19C2E1F84((uint64_t)v170, (uint64_t)(v23 + 7));
              sub_19C3602BC(v161, &__p);
              sub_19C2E25C8(v170);
              if (SHIBYTE(v168) < 0)
                operator delete((void *)__p);
              if (v119)
              {
                v122 = (unint64_t *)&v119->__shared_owners_;
                do
                  v123 = __ldaxr(v122);
                while (__stlxr(v123 - 1, v122));
                if (!v123)
                {
                  ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
                  std::__shared_weak_count::__release_weak(v119);
                }
              }
              goto LABEL_300;
            }
LABEL_209:
            v116 = (unint64_t *)&v105->__shared_owners_;
            do
              v117 = __ldaxr(v116);
            while (__stlxr(v117 - 1, v116));
            if (!v117)
            {
              ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
              std::__shared_weak_count::__release_weak(v105);
            }
            goto LABEL_213;
          }
          v67 = 1;
        }
        if (SHIBYTE(v168) < 0)
          goto LABEL_253;
        goto LABEL_161;
      }
      v153 = "hypothesis.cursors().front().lexiconCursor->isValid()";
      v154 = 434;
    }
    else
    {
      v153 = "hypothesis.cursors().size() == 1";
      v154 = 433;
    }
    __assert_rtn("_extractPredictionsFromQueue", "MultiWordBeamSearchPredictor.cpp", v154, v153);
  }
  if (v26 - v25 < 0)
    sub_19C2A18E8();
  v27 = (std::__shared_weak_count *)v15[9];
  v28 = (std::__shared_weak_count *)v15[10];
  v185 = v27;
  v186 = v28;
  if (v28)
  {
    v29 = (unint64_t *)&v28->__shared_owners_;
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
  }
  ((void (*)(__int128 *__return_ptr, std::__shared_weak_count *, unsigned int *, int64_t))v27->__on_zero_shared_weak)(&__p, v27, *v23, v23[1] - *v23);
  if (v28)
  {
    v31 = (unint64_t *)&v28->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  *((_BYTE *)&v184.__r_.__value_.__s + 23) = 1;
  LOWORD(v184.__r_.__value_.__l.__data_) = 32;
  sub_19C34F0F8((uint64_t)&v185, &__p, (unsigned __int8 *)&v184);
  v157 = v22;
  if (SHIBYTE(v184.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v184.__r_.__value_.__l.__data_);
  memset(&v184, 0, sizeof(v184));
  v34 = v23[35];
  v33 = v23[36];
  v35 = (char *)v33 - (char *)v34;
  if (v33 == v34)
  {
    v36 = 0;
  }
  else
  {
    if ((v35 & 0x8000000000000000) != 0)
      sub_19C2A18E8();
    v36 = (float *)operator new((char *)v33 - (char *)v34);
    memcpy(v36, v34, v35);
  }
  v22 = v157;
  if (*((char *)v157 + 23) >= 0)
    v38 = *((unsigned __int8 *)v157 + 23);
  else
    v38 = v157[1];
  v156 = v23;
  v158 = a4;
  v37 = *v36;
  if ((float)(v37 - a8) >= sub_19C3E6760(v15 + 9, v38, 1uLL, 2))
  {
    operator delete(v36);
  }
  else
  {
    v39 = byte_1EE41B1B8;
    operator delete(v36);
    if (v39)
    {
      v40 = 0;
      v41 = v185;
      if (v185)
        goto LABEL_154;
      goto LABEL_33;
    }
  }
  v155 = a3;
  v41 = v185;
  v88 = v186;
  if (v185 == v186)
  {
    v40 = 1;
    a3 = v155;
    if (!v185)
      goto LABEL_33;
LABEL_154:
    v101 = v186;
    v102 = v41;
    if (v186 != v41)
    {
      do
      {
        if (SHIBYTE(v101[-1].__shared_weak_owners_) < 0)
          operator delete(v101[-1].__vftable);
        --v101;
      }
      while (v101 != v41);
      v102 = v185;
    }
    v186 = v41;
    operator delete(v102);
    if ((SHIBYTE(v168) & 0x80000000) == 0)
      goto LABEL_34;
LABEL_170:
    operator delete((void *)__p);
    goto LABEL_34;
  }
  do
  {
    if (SHIBYTE(v41->__shared_weak_owners_) < 0)
    {
      sub_19C2B5238(&v184, v41->__vftable, v41->__shared_owners_);
    }
    else
    {
      v90 = v41->std::__shared_count;
      v184.__r_.__value_.__r.__words[2] = v41->__shared_weak_owners_;
      *(std::__shared_count *)&v184.__r_.__value_.__l.__data_ = v90;
    }
    v91 = v15[13];
    if (SHIBYTE(v184.__r_.__value_.__r.__words[2]) < 0)
      sub_19C2B5238(&v182, v184.__r_.__value_.__l.__data_, v184.__r_.__value_.__l.__size_);
    else
      v182 = v184;
    v92 = *(_QWORD *)(v91 + 184);
    v93 = *(_QWORD *)(v91 + 192);
    if (v92 == v93)
    {
      v94 = 0;
      if ((SHIBYTE(v182.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_147:
        if ((SHIBYTE(v184.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_121;
        goto LABEL_148;
      }
    }
    else
    {
LABEL_135:
      v96 = *(const void ***)(*(_QWORD *)v92 + 8);
      v95 = *(const void ***)(*(_QWORD *)v92 + 16);
      while (1)
      {
        if (v96 == v95)
        {
          v92 += 16;
          if (v92 != v93)
            goto LABEL_135;
          v94 = 0;
          v15 = v163;
          if ((SHIBYTE(v182.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_147;
          goto LABEL_120;
        }
        v97 = __dynamic_cast(*v96, (const struct __class_type_info *)&unk_1E3D32218, (const struct __class_type_info *)&unk_1E3D316B0, 0);
        if (!v97)
          __cxa_bad_cast();
        if (sub_19C337658((uint64_t)v97, (uint64_t)&v182, 0))
        {
          v98 = (const void *)LXLexiconCopyEntryForTokenID();
          v183 = v98;
          if (v98)
          {
            MetaFlags = LXEntryGetMetaFlags();
            CFRelease(v98);
            if ((MetaFlags & 4) != 0)
              break;
          }
        }
        ++v96;
      }
      v15 = v163;
      v100 = v163[13];
      if (SHIBYTE(v184.__r_.__value_.__r.__words[2]) < 0)
        sub_19C2B5238(&v181, v184.__r_.__value_.__l.__data_, v184.__r_.__value_.__l.__size_);
      else
        v181 = v184;
      v94 = sub_19C32FCC0(v100, (uint64_t)&v181) < 2;
      if ((SHIBYTE(v181.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        if (SHIBYTE(v182.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_120;
        goto LABEL_147;
      }
      operator delete(v181.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v182.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_147;
    }
LABEL_120:
    operator delete(v182.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v184.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_121;
LABEL_148:
    operator delete(v184.__r_.__value_.__l.__data_);
LABEL_121:
    ++v41;
    v89 = v41 == v88 || v94;
  }
  while ((v89 & 1) == 0);
  v40 = !v94;
  a3 = v155;
  v22 = v157;
  v41 = v185;
  if (v185)
    goto LABEL_154;
LABEL_33:
  if (SHIBYTE(v168) < 0)
    goto LABEL_170;
LABEL_34:
  v20 = (std::string *)a10;
  v23 = v156;
  a4 = v158;
  if ((v40 & 1) != 0)
    goto LABEL_35;
LABEL_300:
  v23 = (unsigned int **)v175;
LABEL_301:
  if (v23)
  {
    v148 = (uint64_t)v176;
    v149 = v23;
    if (v176 != v23)
    {
      do
        v148 = sub_19C35CBE8(v148 - 304);
      while ((unsigned int **)v148 != v23);
      v149 = v175;
    }
    v176 = v23;
    operator delete(v149);
  }
  if (SHIBYTE(v178) < 0)
    operator delete(__src[0]);
  v150 = v180;
  if (v180)
  {
    v151 = (unint64_t *)&v180->__shared_owners_;
    do
      v152 = __ldaxr(v151);
    while (__stlxr(v152 - 1, v151));
    if (!v152)
    {
      ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
      std::__shared_weak_count::__release_weak(v150);
    }
  }
}

void sub_19C359B24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void **a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,char a26)
{
  uint64_t v26;

  sub_19C35CBE8((uint64_t)&a26);
  sub_19C35E418((void **)&STACK[0x3D8]);
  if (SLOBYTE(STACK[0x407]) < 0)
    operator delete((void *)STACK[0x3F0]);
  sub_19C308BF4(a20);
  sub_19C2B43C8(v26 - 248);
  _Unwind_Resume(a1);
}

void sub_19C359E34(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, unint64_t a5@<X4>, unint64_t a6@<X5>, int a7@<W6>, std::string *a8@<X7>, _QWORD *a9@<X8>, uint64_t a10)
{
  _QWORD *v11;
  uint64_t v14;
  float v15;
  float v16;
  NSObject *v17;
  const char *v18;
  _QWORD *v19;
  char *v20;
  BOOL v21;
  BOOL v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  const void *v35;
  int64_t v36;
  _DWORD *v37;
  _DWORD *v38;
  const void *v39;
  int64_t v40;
  char *v41;
  _DWORD *v42;
  char *v43;
  int64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  _BYTE *v49;
  _DWORD *v50;
  unint64_t v51;
  char *v52;
  int v53;
  uint64_t v54;
  _OWORD *v55;
  __int128 *v56;
  uint64_t v57;
  __int128 v58;
  unsigned int *v59;
  unsigned int *v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  float *v68;
  std::__shared_weak_count *v69;
  uint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  const void *v73;
  int64_t v74;
  char *v75;
  std::string::size_type v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  char *v81;
  char *v82;
  std::string::size_type v83;
  unint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  __int128 *v88;
  uint64_t v89;
  __int128 v90;
  int v91;
  float v92;
  float v93;
  std::__shared_weak_count *v94;
  uint64_t v95;
  unint64_t *v96;
  unint64_t v97;
  unint64_t *v98;
  unint64_t v99;
  unsigned __int8 v100;
  unint64_t v101;
  const void *v102;
  size_t v103;
  BOOL v104;
  unint64_t *v105;
  unint64_t v106;
  _QWORD *v107;
  _QWORD *v108;
  float v109;
  int v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  char *v116;
  char *v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  char *v121;
  char *v122;
  char *v123;
  char *v124;
  __int128 v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  char *v132;
  uint64_t v133;
  float v134;
  float v135;
  const void *v136;
  int64_t v137;
  char *v138;
  float v139;
  float v140;
  float v141;
  void *v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  unint64_t v146;
  unint64_t *v147;
  unint64_t v148;
  __int128 v149;
  char *v150;
  void *v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  void *v155;
  unint64_t v156;
  unint64_t v157;
  int v158;
  uint64_t v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  int v163;
  unint64_t *v164;
  unint64_t v165;
  _QWORD *v166;
  _QWORD *v167;
  uint64_t v168;
  int v169;
  int v170;
  float v172;
  float v173;
  uint64_t v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  uint64_t v178;
  _QWORD *v179;
  unint64_t *v180;
  unint64_t v181;
  uint64_t v182;
  const void *v183;
  int64_t v184;
  char *v185;
  char *v186;
  std::string::size_type v187;
  std::string::size_type size;
  void *v189;
  std::__shared_weak_count *v190;
  unint64_t *v191;
  unint64_t v192;
  unint64_t *v193;
  unint64_t v194;
  unint64_t v195;
  void *v196;
  std::__shared_weak_count *v197;
  unint64_t *v198;
  unint64_t v199;
  std::string *v200;
  const std::string::value_type *v201;
  std::string::size_type v202;
  uint64_t v203;
  std::string::size_type v204;
  std::string *v205;
  void *v206;
  unint64_t *v207;
  unint64_t v208;
  std::string *v209;
  const std::string::value_type *v210;
  std::string::size_type v211;
  uint64_t v212;
  std::string::size_type v213;
  std::string *v214;
  std::string::size_type v215;
  unint64_t *v216;
  unint64_t v217;
  std::string::size_type v218;
  unint64_t *v219;
  void *v220;
  char *v221;
  char *v222;
  void *v223;
  std::__shared_weak_count *v224;
  unint64_t *v225;
  unint64_t v226;
  void *v227;
  unint64_t v228;
  uint64_t v229;
  _QWORD *v230;
  uint64_t v231;
  uint64_t v232;
  _QWORD *v233;
  uint64_t v234;
  char *v235;
  char *v236;
  std::__shared_weak_count *v237;
  unint64_t *v238;
  unint64_t v239;
  uint64_t v240;
  char *v241;
  char *v242;
  std::__shared_weak_count *v243;
  unint64_t *v244;
  unint64_t v245;
  char *v246;
  float v247;
  uint64_t v248;
  const void *v249;
  int64_t v250;
  void *v251;
  std::string::size_type v252;
  void *v253;
  std::__shared_weak_count *v254;
  unint64_t *v255;
  unint64_t v256;
  std::string *v257;
  const std::string::value_type *v258;
  std::string::size_type v259;
  uint64_t v260;
  std::string::size_type v261;
  std::string *v262;
  std::string::size_type v263;
  unint64_t *v264;
  unint64_t v265;
  char *v266;
  void *v267;
  std::__shared_weak_count *v268;
  unint64_t *v269;
  unint64_t v270;
  uint64_t v271;
  NSObject *v272;
  const char *v273;
  uint32_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  unsigned int **v278;
  unsigned int **v279;
  unint64_t v280;
  uint64_t v281;
  std::__shared_weak_count *v282;
  unint64_t *v283;
  unint64_t v284;
  std::string *v285;
  const std::string::value_type *v286;
  std::string::size_type v287;
  uint64_t v288;
  std::string::size_type v289;
  std::string *v290;
  std::string::size_type v291;
  unint64_t *v292;
  unint64_t v293;
  uint64_t v294;
  unsigned int **v295;
  _QWORD *v296;
  uint64_t v297;
  uint64_t v298;
  void *v299;
  uint64_t v300;
  uint64_t v301;
  unint64_t v302;
  unint64_t v303;
  uint64_t v304;
  uint64_t v305;
  __int128 v306;
  uint64_t v307;
  uint64_t v308;
  void *v309;
  uint64_t v310;
  uint64_t v311;
  void *v312;
  uint64_t v313;
  uint64_t v314;
  void *v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  void *v319;
  NSObject *v320;
  uint64_t v321;
  _QWORD *v322;
  uint64_t v324;
  _QWORD *v326;
  uint64_t *v327;
  _QWORD *v328;
  _QWORD *v330;
  char *v331;
  uint64_t **v332;
  float *v333;
  unsigned int v334;
  std::string *v336;
  uint64_t v338;
  _QWORD *v339;
  _QWORD *v340;
  _QWORD *v341;
  uint64_t v342;
  std::__shared_weak_count *v343;
  _QWORD *v344;
  uint64_t v345;
  void *v346;
  void *v347;
  char *v348;
  std::string v349;
  __int128 v350;
  char *v351;
  __int128 __dst;
  uint64_t v353;
  void *v354;
  char v355;
  void *v356;
  void *v357;
  char *v358;
  void *v359;
  void *v360;
  void *v361;
  char *v362;
  char *v363;
  std::string v364;
  float v365;
  _BYTE v366[184];
  _QWORD *v367;
  _QWORD *v368;
  unint64_t v369;
  _BYTE *v370;
  _BYTE *v371;
  __int128 v372;
  uint64_t v373;
  void *v374;
  unint64_t v375;
  unsigned __int8 v376;
  void *__p;
  float *v378;
  void *v379;
  void *v380;
  char *v381;
  _DWORD *v382;
  _DWORD *v383;
  _DWORD *v384;
  __int128 buf;
  uint64_t v386;
  float v387;
  float v388;
  uint64_t v389;
  _QWORD v390[4];
  uint64_t v391;
  _BYTE *v392;
  _BYTE *v393;
  _QWORD *v394;
  _QWORD *v395;
  uint64_t v396;
  _BYTE *v397;
  _BYTE *v398;
  uint64_t v399;

  v399 = *MEMORY[0x1E0C80C00];
  v345 = a2;
  v11 = *(_QWORD **)a3;
  if (0xD37A6F4DE9BD37A7 * ((uint64_t)(*(_QWORD *)(a3 + 8) - (_QWORD)v11) >> 3) >= 2)
    __assert_rtn("_completions", "MultiWordBeamSearchPredictor.cpp", 473, "stems.size()<2");
  v14 = a1;
  if (byte_1EE41B1B9)
  {
    sub_19C3E6D34((_QWORD *)(a1 + 72), (uint64_t *)(a1 + 208), v11, (uint64_t)a4);
    v16 = v15;
    if (v15 > 0.0001)
      __assert_rtn("_completions", "MultiWordBeamSearchPredictor.cpp", 478, "prefixProbabilityFirstWord<=1e-4");
  }
  else
  {
    v16 = 0.0;
  }
  v322 = a9;
  if (a7)
  {
    if (qword_1EE41C080 != -1)
      dispatch_once(&qword_1EE41C080, &unk_1E3D3AB90);
    v17 = qword_1EE41C078;
    if (os_log_type_enabled((os_log_t)qword_1EE41C078, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf) = 0;
      v18 = "Starting Inline Completions Beam Search in Lexicon Constrained Prediction Mode";
LABEL_15:
      _os_log_impl(&dword_19C291000, v17, OS_LOG_TYPE_DEFAULT, v18, (uint8_t *)&buf, 2u);
    }
  }
  else
  {
    if (qword_1EE41C080 != -1)
      dispatch_once(&qword_1EE41C080, &unk_1E3D3AB90);
    v17 = qword_1EE41C078;
    if (os_log_type_enabled((os_log_t)qword_1EE41C078, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf) = 0;
      v18 = "Starting Inline Completions Beam Search in Open Ended Prediction Mode";
      goto LABEL_15;
    }
  }
  v19 = (_QWORD *)operator new();
  v19[1] = 6;
  v19[2] = 0;
  v19[3] = 0;
  v19[4] = 0;
  v20 = (char *)operator new(0x720uLL);
  v19[2] = v20;
  v19[3] = v20;
  v19[4] = v20 + 1824;
  v344 = v19;
  sub_19C35CF10(&v342, v14, a7 == 0);
  v332 = (uint64_t **)(v14 + 72);
  v21 = sub_19C3E85F0(v14 + 72, v19, *(_QWORD **)a3, *(_QWORD **)(a3 + 8), (uint64_t)a4, &v342);
  v22 = v21;
  v23 = v343;
  if (!v343)
    goto LABEL_20;
  p_shared_owners = (unint64_t *)&v343->__shared_owners_;
  do
    v25 = __ldaxr(p_shared_owners);
  while (__stlxr(v25 - 1, p_shared_owners));
  if (v25)
  {
LABEL_20:
    if (v21)
      goto LABEL_21;
LABEL_539:
    *v322 = 0;
    v322[1] = 0;
    v322[2] = 0;
    goto LABEL_574;
  }
  ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
  std::__shared_weak_count::__release_weak(v23);
  if (!v22)
    goto LABEL_539;
LABEL_21:
  v26 = (_QWORD *)operator new();
  v26[2] = 0;
  v26[1] = 6;
  v26[3] = 0;
  v26[4] = 0;
  sub_19C35D178((uint64_t)(v26 + 2), 6uLL);
  v341 = v26;
  sub_19C35D3C0(v14, (uint64_t)v344, a7 == 0, v26, a5, a6, a8);
  v27 = (_QWORD *)operator new();
  v27[2] = 0;
  v27[1] = 6;
  v27[3] = 0;
  v27[4] = 0;
  sub_19C35D178((uint64_t)(v27 + 2), 6uLL);
  v340 = v27;
  if (!a6)
  {
LABEL_543:
    v300 = v27[2];
    v301 = v27[3];
    v386 = 0;
    buf = 0uLL;
    sub_19C35E1DC((uint64_t)&buf, v300, v301, 0x86BCA1AF286BCA1BLL * ((v301 - v300) >> 4));
    v302 = buf;
    if ((_QWORD)buf != *((_QWORD *)&buf + 1) && *((_QWORD *)&buf + 1) - 304 > (unint64_t)buf)
    {
      v303 = *((_QWORD *)&buf + 1) - 608;
      do
      {
        sub_19C35E2D8(v302, v303 + 304);
        v302 += 304;
        v29 = v302 >= v303;
        v303 -= 304;
      }
      while (!v29);
    }
    v304 = *a4;
    v305 = *(_QWORD *)(*(_QWORD *)a3 + 32);
    if (*(_QWORD *)(*(_QWORD *)a3 + 24) == v305)
    {
      HIBYTE(v373) = 0;
      LOBYTE(v372) = 0;
    }
    else if (*(char *)(v305 - 9) < 0)
    {
      sub_19C2B5238(&v372, *(void **)(v305 - 32), *(_QWORD *)(v305 - 24));
    }
    else
    {
      v306 = *(_OWORD *)(v305 - 32);
      v373 = *(_QWORD *)(v305 - 16);
      v372 = v306;
    }
    LODWORD(v321) = 0;
    (*(void (**)(uint64_t, __int128 *, uint64_t *, uint64_t, BOOL, unint64_t, __int128 *, _QWORD, float, uint64_t, std::string *))(*(_QWORD *)v14 + 24))(v14, &buf, &v345, v304, a7 == 0, a6, &v372, 0, v16, v321, a8);
    if (SHIBYTE(v373) < 0)
      operator delete((void *)v372);
    v307 = buf;
    if ((_QWORD)buf)
    {
      v308 = *((_QWORD *)&buf + 1);
      v309 = (void *)buf;
      if (*((_QWORD *)&buf + 1) != (_QWORD)buf)
      {
        do
          v308 = sub_19C35CBE8(v308 - 304);
        while (v308 != v307);
        v309 = (void *)buf;
      }
      *((_QWORD *)&buf + 1) = v307;
      operator delete(v309);
    }
    goto LABEL_560;
  }
  v324 = 0;
  v326 = (_QWORD *)(v14 + 32);
  v327 = (uint64_t *)(v14 + 208);
  v331 = (char *)&a8[-1].__r_.__value_.__r.__words[2] + 7;
  v338 = v14;
  v336 = a8;
LABEL_29:
  v30 = *(_QWORD *)(a10 + 24);
  if (!v30 || !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v30 + 48))(v30))
  {
    v31 = (_QWORD *)operator new();
    v31[2] = 0;
    v31[1] = 6;
    v31[3] = 0;
    v31[4] = 0;
    v32 = v31;
    sub_19C35D178((uint64_t)(v31 + 2), 6uLL);
    v339 = v32;
    v328 = v32;
    v330 = v26;
    while (1)
    {
      if (!sub_19C3E8478(v26[2], v26[3], v328))
        goto LABEL_488;
      v33 = *(_QWORD *)(a10 + 24);
      if (v33)
      {
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v33 + 48))(v33))
          break;
      }
      if ((unint64_t)*a4 >= 0x2E)
      {
        if (qword_1EE41C080 != -1)
          dispatch_once(&qword_1EE41C080, &unk_1E3D3AB90);
        v271 = qword_1EE41C078;
        if (os_log_type_enabled((os_log_t)qword_1EE41C078, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(buf) = 134217984;
          *(_QWORD *)((char *)&buf + 4) = 45;
          v272 = v271;
          v273 = "Stopped beam search as limit for max model updates (%zu) reached";
          v274 = 12;
LABEL_487:
          _os_log_impl(&dword_19C291000, v272, OS_LOG_TYPE_DEFAULT, v273, (uint8_t *)&buf, v274);
          goto LABEL_488;
        }
        goto LABEL_488;
      }
      v34 = v26[3];
      if (v26[2] == v34)
        __assert_rtn("best", "PriorityQueue.h", 46, "!m_predictions.empty()");
      sub_19C35CA40((uint64_t)&buf, v34 - 304);
      v383 = 0;
      v382 = 0;
      v384 = 0;
      v35 = (const void *)buf;
      v36 = *((_QWORD *)&buf + 1) - buf;
      if (*((_QWORD *)&buf + 1) == (_QWORD)buf)
      {
        v37 = 0;
        v38 = 0;
      }
      else
      {
        if (v36 < 0)
          sub_19C2A18E8();
        v37 = operator new(*((_QWORD *)&buf + 1) - buf);
        v38 = &v37[v36 >> 2];
        v382 = v37;
        v384 = v38;
        memcpy(v37, v35, v36);
        v383 = v38;
      }
      v26[3] = sub_19C35CBE8(v26[3] - 304);
      if (10 * a6 - 1 >= v38 - v37)
      {
        v39 = v392;
        v381 = 0;
        v379 = 0;
        v380 = 0;
        v40 = v393 - v392;
        if (v393 == v392)
        {
          v41 = 0;
        }
        else
        {
          if (v40 < 0)
            sub_19C2A18E8();
          v379 = operator new(v393 - v392);
          v380 = v379;
          v41 = (char *)v379 + 4 * (v40 >> 2);
          v381 = v41;
          memmove(v379, v39, v40);
          v380 = v41;
        }
        while (2)
        {
          if (v37 == v38)
          {
            v60 = (unsigned int *)*((_QWORD *)&buf + 1);
            v59 = (unsigned int *)buf;
            if ((_QWORD)buf == *((_QWORD *)&buf + 1))
            {
              v65 = 1;
            }
            else if (*((_QWORD *)&buf + 1) - (_QWORD)buf == 4)
            {
              v61 = *(_QWORD *)(v14 + 72);
              v62 = *(std::__shared_weak_count **)(v14 + 80);
              *(_QWORD *)&v372 = v61;
              *((_QWORD *)&v372 + 1) = v62;
              if (v62)
              {
                v63 = (unint64_t *)&v62->__shared_owners_;
                do
                  v64 = __ldxr(v63);
                while (__stxr(v64 + 1, v63));
                v60 = (unsigned int *)*((_QWORD *)&buf + 1);
              }
              if (v60 == v59)
                sub_19C30F73C();
              v65 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v61 + 104))(v61, *v59);
              if (v62)
              {
                v66 = (unint64_t *)&v62->__shared_owners_;
                do
                  v67 = __ldaxr(v66);
                while (__stlxr(v67 - 1, v66));
                if (!v67)
                {
                  ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
                  std::__shared_weak_count::__release_weak(v62);
                }
              }
            }
            else
            {
              v65 = 0;
            }
            sub_19C3E73BC(&__p, v332, v327, (uint64_t)&v379, (uint64_t)&v389, v65, 6, (uint64_t)a4, v326);
            v68 = (float *)__p;
            v333 = v378;
            v334 = v65;
            if (__p == v378)
            {
              if (!__p)
                goto LABEL_94;
              goto LABEL_93;
            }
            while (2)
            {
              if ((*(unsigned int (**)(_QWORD, float *, uint64_t))(**(_QWORD **)(v14 + 16) + 16))(*(_QWORD *)(v14 + 16), v68, v65))
              {
                v70 = *(_QWORD *)(v14 + 72);
                v69 = *(std::__shared_weak_count **)(v14 + 80);
                *(_QWORD *)&v372 = v70;
                *((_QWORD *)&v372 + 1) = v69;
                if (v69)
                {
                  v71 = (unint64_t *)&v69->__shared_owners_;
                  do
                    v72 = __ldxr(v71);
                  while (__stxr(v72 + 1, v71));
                }
                if (((*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v70 + 160))(v70, *(unsigned int *)v68) & 1) != 0
                  || (*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)v70 + 112))(v70, *(unsigned int *)v68))
                {
                  v376 = 0;
                  LOBYTE(v374) = 0;
                }
                else
                {
                  (*(void (**)(void **__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v70 + 40))(&v374, v70, *(unsigned int *)v68);
                }
                if (!v69)
                  goto LABEL_142;
                v98 = (unint64_t *)&v69->__shared_owners_;
                do
                  v99 = __ldaxr(v98);
                while (__stlxr(v99 - 1, v98));
                if (!v99)
                {
                  ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
                  std::__shared_weak_count::__release_weak(v69);
                  if ((_DWORD)v65)
                    goto LABEL_143;
                }
                else
                {
LABEL_142:
                  if ((_DWORD)v65)
                  {
LABEL_143:
                    v100 = v376;
                    if ((v376 & 0x80u) == 0)
                      v101 = v376;
                    else
                      v101 = v375;
                    if ((v376 & 0x80u) == 0)
                      v102 = &v374;
                    else
                      v102 = v374;
                    if (v101 >= 2)
                      v103 = 2;
                    else
                      v103 = v101;
                    v104 = !memcmp(v102, "'s", v103) && v101 == 2;
                    v65 = v334;
                    if (v104)
                    {
                      if ((v100 & 0x80) != 0)
                        goto LABEL_476;
                      goto LABEL_100;
                    }
                  }
                }
                v139 = v68[1];
                v140 = v388;
                (*(void (**)(__int128 *__return_ptr, _QWORD, __int128 *, float *, void **))(**(_QWORD **)(v14 + 16) + 24))(&v372, *(_QWORD *)(v14 + 16), &buf, v68, &v374);
                v141 = log10f(v139);
                sub_19C3E6B00((uint64_t)&v364, (uint64_t)&v372, v141 + v140);
                if (v367 == v368)
                  goto LABEL_475;
                v142 = *(void **)(v14 + 72);
                v143 = *(std::__shared_weak_count **)(v14 + 80);
                v361 = v142;
                v362 = (char *)v143;
                if (v143)
                {
                  v144 = (unint64_t *)&v143->__shared_owners_;
                  do
                    v145 = __ldxr(v144);
                  while (__stxr(v145 + 1, v144));
                }
                (*(void (**)(__int128 *__return_ptr, void *, std::string::size_type, uint64_t))(*(_QWORD *)v142 + 32))(&__dst, v142, v364.__r_.__value_.__r.__words[0], (uint64_t)(v364.__r_.__value_.__l.__size_ - v364.__r_.__value_.__r.__words[0]) >> 2);
                v146 = sub_19C3E8528((uint64_t)&__dst);
                if (SHIBYTE(v353) < 0)
                {
                  operator delete((void *)__dst);
                  if (!v143)
                    goto LABEL_220;
                }
                else if (!v143)
                {
                  goto LABEL_220;
                }
                v147 = (unint64_t *)&v143->__shared_owners_;
                do
                  v148 = __ldaxr(v147);
                while (__stlxr(v148 - 1, v147));
                if (!v148)
                {
                  ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
                  std::__shared_weak_count::__release_weak(v143);
                }
LABEL_220:
                if (v390[3] == v391)
                {
                  HIBYTE(v353) = 0;
                  LOBYTE(__dst) = 0;
                }
                else if (*(char *)(v391 - 9) < 0)
                {
                  sub_19C2B5238(&__dst, *(void **)(v391 - 32), *(_QWORD *)(v391 - 24));
                }
                else
                {
                  v149 = *(_OWORD *)(v391 - 32);
                  v353 = *(_QWORD *)(v391 - 16);
                  __dst = v149;
                }
                v156 = sub_19C3E8528((uint64_t)&__dst);
                if (SHIBYTE(v353) < 0)
                  operator delete((void *)__dst);
                v157 = v376;
                if ((v376 & 0x80u) != 0)
                  v157 = v375;
                if (v157)
                {
                  v158 = 0;
                  if (v146 < v156)
                    goto LABEL_475;
                }
                else
                {
                  v159 = *(_QWORD *)(v14 + 72);
                  v160 = *(std::__shared_weak_count **)(v14 + 80);
                  *(_QWORD *)&__dst = v159;
                  *((_QWORD *)&__dst + 1) = v160;
                  if (v160)
                  {
                    v161 = (unint64_t *)&v160->__shared_owners_;
                    do
                      v162 = __ldxr(v161);
                    while (__stxr(v162 + 1, v161));
                  }
                  v163 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v159 + 120))(v159, *(unsigned int *)v68);
                  if (v160)
                  {
                    v164 = (unint64_t *)&v160->__shared_owners_;
                    do
                      v165 = __ldaxr(v164);
                    while (__stlxr(v165 - 1, v164));
                    if (!v165)
                    {
                      ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
                      std::__shared_weak_count::__release_weak(v160);
                    }
                  }
                  v158 = v163 ^ 1;
                  if (v146 < v156)
                    goto LABEL_475;
                }
                v362 = 0;
                v361 = 0;
                v363 = 0;
                v166 = v367;
                v167 = v368;
                if (v367 == v368)
                  goto LABEL_475;
LABEL_269:
                if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v166 + 16))(*v166) & 1) == 0)
                  __assert_rtn("_nextWordCompletions", "MultiWordBeamSearchPredictor.cpp", 83, "cursor.lexiconCursor->isValid()");
                if (v369 < a5)
                  v169 = 1;
                else
                  v169 = v158;
                if (v369 > a5)
                  v170 = v158;
                else
                  v170 = 0;
                if (v169 == 1 && v170 == 0)
                  goto LABEL_394;
                v172 = v365;
                if (v369 == 1)
                {
                  v173 = 1.0;
                }
                else
                {
                  if (!v369)
                    __assert_rtn("normalizationFactor", "BeamSearchPredictionHelper.hpp", 71, "numWords >= 1");
                  v173 = 3.0 / (double)(v369 + 2);
                }
                HIBYTE(v351) = 0;
                LOBYTE(v350) = 0;
                v174 = *v166;
                v175 = (std::__shared_weak_count *)v166[1];
                if (v175)
                {
                  v176 = (unint64_t *)&v175->__shared_owners_;
                  do
                    v177 = __ldxr(v176);
                  while (__stxr(v177 + 1, v176));
                }
                v178 = v166[2];
                memset(&v349, 0, sizeof(v349));
                v179 = operator new(0x18uLL);
                v349.__r_.__value_.__r.__words[0] = (std::string::size_type)v179;
                v349.__r_.__value_.__l.__size_ = (std::string::size_type)v179;
                v349.__r_.__value_.__r.__words[2] = (std::string::size_type)(v179 + 3);
                *v179 = v174;
                v179[1] = v175;
                if (v175)
                {
                  v180 = (unint64_t *)&v175->__shared_owners_;
                  do
                    v181 = __ldxr(v180);
                  while (__stxr(v181 + 1, v180));
                }
                v179[2] = v178;
                v349.__r_.__value_.__l.__size_ = (std::string::size_type)(v179 + 3);
                v346 = 0;
                v347 = 0;
                v348 = 0;
                v182 = v369;
                v183 = v370;
                v184 = v371 - v370;
                if (v371 != v370)
                {
                  if (v184 < 0)
                    sub_19C2A18E8();
                  v185 = (char *)operator new(v371 - v370);
                  v186 = &v185[4 * (v184 >> 2)];
                  v346 = v185;
                  v348 = v186;
                  memcpy(v185, v183, v184);
                  v347 = v186;
                  v14 = v338;
                }
                sub_19C3A9F98((uint64_t)&__dst, (uint64_t)&v364, &v350, (uint64_t)v366, (uint64_t)&v349, v182, 0, (uint64_t)&v346, v173 * v172, 0.0);
                if (v346)
                {
                  v347 = v346;
                  operator delete(v346);
                }
                v187 = v349.__r_.__value_.__r.__words[0];
                if (v349.__r_.__value_.__r.__words[0])
                {
                  size = v349.__r_.__value_.__l.__size_;
                  v189 = (void *)v349.__r_.__value_.__r.__words[0];
                  if (v349.__r_.__value_.__l.__size_ != v349.__r_.__value_.__r.__words[0])
                  {
                    do
                    {
                      v190 = *(std::__shared_weak_count **)(size - 16);
                      if (v190)
                      {
                        v191 = (unint64_t *)&v190->__shared_owners_;
                        do
                          v192 = __ldaxr(v191);
                        while (__stlxr(v192 - 1, v191));
                        if (!v192)
                        {
                          ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
                          std::__shared_weak_count::__release_weak(v190);
                        }
                      }
                      size -= 24;
                    }
                    while (size != v187);
                    v189 = (void *)v349.__r_.__value_.__r.__words[0];
                  }
                  v349.__r_.__value_.__l.__size_ = v187;
                  operator delete(v189);
                }
                if (!v175)
                  goto LABEL_310;
                v193 = (unint64_t *)&v175->__shared_owners_;
                do
                  v194 = __ldaxr(v193);
                while (__stlxr(v194 - 1, v193));
                if (!v194)
                {
                  ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
                  std::__shared_weak_count::__release_weak(v175);
                  if (SHIBYTE(v351) < 0)
LABEL_311:
                    operator delete((void *)v350);
                }
                else
                {
LABEL_310:
                  if (SHIBYTE(v351) < 0)
                    goto LABEL_311;
                }
                sub_19C35E950(v340, (uint64_t)&__dst);
                if ((v376 & 0x80u) == 0)
                  v195 = v376;
                else
                  v195 = v375;
                if (v195)
                {
                  if (qword_1EE41C080 != -1)
                    dispatch_once(&qword_1EE41C080, &unk_1E3D3AB90);
                  v196 = *(void **)(v14 + 72);
                  v197 = *(std::__shared_weak_count **)(v14 + 80);
                  v346 = v196;
                  v347 = v197;
                  if (v197)
                  {
                    v198 = (unint64_t *)&v197->__shared_owners_;
                    do
                      v199 = __ldxr(v198);
                    while (__stxr(v199 + 1, v198));
                  }
                  sub_19C3E29F8(&v349, (unsigned int **)&__dst, (uint64_t)v196);
                  v200 = &v349;
                  if ((v349.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                    v200 = (std::string *)v349.__r_.__value_.__r.__words[0];
                  sub_19C34EC30("Inline Completion Hypothesis  = [%s]", (uint64_t)&v350, v200);
                  if (SHIBYTE(v351) >= 0)
                    v201 = (const std::string::value_type *)&v350;
                  else
                    v201 = (const std::string::value_type *)v350;
                  if (SHIBYTE(v351) >= 0)
                    v202 = HIBYTE(v351);
                  else
                    v202 = *((_QWORD *)&v350 + 1);
                  std::string::append(v336, v201, v202);
                  if (SHIBYTE(v336->__r_.__value_.__r.__words[2]) < 0)
                  {
                    v215 = v336->__r_.__value_.__l.__size_;
                    if (v215)
                    {
                      v205 = (std::string *)v336->__r_.__value_.__r.__words[0];
                      if (!*(_BYTE *)(v336->__r_.__value_.__r.__words[0] + v215 - 1))
                      {
                        v204 = v215 - 1;
                        v336->__r_.__value_.__l.__size_ = v204;
LABEL_355:
                        v205->__r_.__value_.__s.__data_[v204] = 0;
                      }
                    }
                  }
                  else
                  {
                    v203 = HIBYTE(v336->__r_.__value_.__r.__words[2]);
                    if (*((_BYTE *)&v336->__r_.__value_.__s + 23) && !v331[v203])
                    {
                      v204 = v203 - 1;
                      *((_BYTE *)&v336->__r_.__value_.__s + 23) = v203 - 1;
                      v205 = v336;
                      goto LABEL_355;
                    }
                  }
                  std::string::push_back(v336, 10);
                  if ((SHIBYTE(v351) & 0x80000000) == 0)
                  {
                    if ((SHIBYTE(v349.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                      goto LABEL_358;
LABEL_361:
                    operator delete(v349.__r_.__value_.__l.__data_);
                    if (v197)
                      goto LABEL_362;
LABEL_378:
                    v220 = v359;
                    if (v359)
                    {
LABEL_379:
                      v360 = v220;
                      operator delete(v220);
                    }
LABEL_380:
                    v221 = (char *)v357;
                    if (v357)
                    {
                      v222 = v358;
                      v223 = v357;
                      if (v358 != v357)
                      {
                        do
                        {
                          v224 = (std::__shared_weak_count *)*((_QWORD *)v222 - 2);
                          if (v224)
                          {
                            v225 = (unint64_t *)&v224->__shared_owners_;
                            do
                              v226 = __ldaxr(v225);
                            while (__stlxr(v226 - 1, v225));
                            if (!v226)
                            {
                              ((void (*)(std::__shared_weak_count *))v224->__on_zero_shared)(v224);
                              std::__shared_weak_count::__release_weak(v224);
                            }
                          }
                          v222 -= 24;
                        }
                        while (v222 != v221);
                        v223 = v357;
                      }
                      v358 = v221;
                      operator delete(v223);
                    }
                    sub_19C2E25C8(&v356);
                    if (v355 < 0)
                    {
                      operator delete(v354);
                      v227 = (void *)__dst;
                      if ((_QWORD)__dst)
                      {
LABEL_393:
                        *((_QWORD *)&__dst + 1) = v227;
                        operator delete(v227);
                      }
                    }
                    else
                    {
                      v227 = (void *)__dst;
                      if ((_QWORD)__dst)
                        goto LABEL_393;
                    }
LABEL_394:
                    v228 = v376;
                    if ((v376 & 0x80u) != 0)
                      v228 = v375;
                    if (v228)
                    {
                      if (a7)
                      {
                        v229 = *v166;
                        HIBYTE(v353) = 1;
                        LOWORD(__dst) = 32;
                        (*(void (**)(__int128 *__return_ptr, uint64_t, __int128 *))(*(_QWORD *)v229 + 24))(&v350, v229, &__dst);
                        if (SHIBYTE(v353) < 0)
                          operator delete((void *)__dst);
                        if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v350 + 16))(v350))
                        {
                          *(_QWORD *)&__dst = v350;
                          if ((_QWORD)v350)
                          {
                            v230 = (_QWORD *)operator new();
                            v231 = v350;
                            *v230 = &off_1E3D39C88;
                            v230[1] = 0;
                            v230[2] = 0;
                            v230[3] = v231;
                          }
                          else
                          {
                            v230 = 0;
                          }
                          *(_QWORD *)&v350 = 0;
                          v240 = v166[2];
                          *((_QWORD *)&__dst + 1) = v230;
                          v353 = v240;
                          v241 = v362;
                          if (v362 < v363)
                          {
                            *(_QWORD *)v362 = __dst;
                            *((_QWORD *)v241 + 1) = v230;
                            *((_QWORD *)v241 + 2) = v240;
                            v362 = v241 + 24;
                          }
                          else
                          {
                            v242 = sub_19C35F304((char **)&v361, (uint64_t)&__dst);
                            v243 = (std::__shared_weak_count *)*((_QWORD *)&__dst + 1);
                            v362 = v242;
                            if (*((_QWORD *)&__dst + 1))
                            {
                              v244 = (unint64_t *)(*((_QWORD *)&__dst + 1) + 8);
                              do
                                v245 = __ldaxr(v244);
                              while (__stlxr(v245 - 1, v244));
                              if (!v245)
                              {
                                ((void (*)(std::__shared_weak_count *))v243->__on_zero_shared)(v243);
                                std::__shared_weak_count::__release_weak(v243);
                              }
                            }
                          }
                        }
                        v168 = v350;
                        *(_QWORD *)&v350 = 0;
                        if (v168)
                          goto LABEL_267;
                      }
                      else
                      {
                        sub_19C319804(*(_QWORD **)(v14 + 104), (uint64_t *)&v350);
                        v232 = v350;
                        *(_QWORD *)&__dst = v350;
                        if ((_QWORD)v350)
                        {
                          v233 = (_QWORD *)operator new();
                          *v233 = &off_1E3D39C88;
                          v233[1] = 0;
                          v233[2] = 0;
                          v233[3] = v232;
                        }
                        else
                        {
                          v233 = 0;
                        }
                        *(_QWORD *)&v350 = 0;
                        v234 = v166[2];
                        *((_QWORD *)&__dst + 1) = v233;
                        v353 = v234;
                        v235 = v362;
                        if (v362 >= v363)
                        {
                          v236 = sub_19C35F304((char **)&v361, (uint64_t)&__dst);
                          v237 = (std::__shared_weak_count *)*((_QWORD *)&__dst + 1);
                          v362 = v236;
                          if (*((_QWORD *)&__dst + 1))
                          {
                            v238 = (unint64_t *)(*((_QWORD *)&__dst + 1) + 8);
                            do
                              v239 = __ldaxr(v238);
                            while (__stlxr(v239 - 1, v238));
                            if (!v239)
                            {
                              ((void (*)(std::__shared_weak_count *))v237->__on_zero_shared)(v237);
                              std::__shared_weak_count::__release_weak(v237);
                            }
                          }
                        }
                        else
                        {
                          *(_QWORD *)v362 = __dst;
                          *((_QWORD *)v235 + 1) = v233;
                          *((_QWORD *)v235 + 2) = v234;
                          v362 = v235 + 24;
                        }
                        v168 = v350;
                        if ((_QWORD)v350)
LABEL_267:
                          (*(void (**)(uint64_t))(*(_QWORD *)v168 + 8))(v168);
                      }
                    }
                    v166 += 3;
                    if (v166 == v167)
                    {
                      v246 = v362;
                      if (v361 != v362)
                      {
                        v247 = v365;
                        HIBYTE(v351) = 0;
                        LOBYTE(v350) = 0;
                        memset(&v349, 0, sizeof(v349));
                        v248 = v369;
                        v249 = v370;
                        v250 = v371 - v370;
                        if (v371 != v370)
                        {
                          if (v250 < 0)
                            sub_19C2A18E8();
                          v251 = operator new(v371 - v370);
                          v252 = (std::string::size_type)v251 + 4 * (v250 >> 2);
                          v349.__r_.__value_.__r.__words[0] = (std::string::size_type)v251;
                          v349.__r_.__value_.__r.__words[2] = v252;
                          memcpy(v251, v249, v250);
                          v349.__r_.__value_.__l.__size_ = v252;
                        }
                        sub_19C3A9F98((uint64_t)&__dst, (uint64_t)&v364, &v350, (uint64_t)v366, (uint64_t)&v361, v248, 0, (uint64_t)&v349, v247, 0.0);
                        if (v349.__r_.__value_.__r.__words[0])
                        {
                          v349.__r_.__value_.__l.__size_ = v349.__r_.__value_.__r.__words[0];
                          operator delete(v349.__r_.__value_.__l.__data_);
                        }
                        sub_19C35E950(v328, (uint64_t)&__dst);
                        if (qword_1EE41C080 != -1)
                          dispatch_once(&qword_1EE41C080, &unk_1E3D3AB90);
                        v253 = *(void **)(v14 + 72);
                        v254 = *(std::__shared_weak_count **)(v14 + 80);
                        v346 = v253;
                        v347 = v254;
                        if (v254)
                        {
                          v255 = (unint64_t *)&v254->__shared_owners_;
                          do
                            v256 = __ldxr(v255);
                          while (__stxr(v256 + 1, v255));
                        }
                        sub_19C3E29F8(&v349, (unsigned int **)&__dst, (uint64_t)v253);
                        v257 = &v349;
                        if ((v349.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                          v257 = (std::string *)v349.__r_.__value_.__r.__words[0];
                        sub_19C34EC30("Next word hypothesis = [%s]", (uint64_t)&v350, v257);
                        if (SHIBYTE(v351) >= 0)
                          v258 = (const std::string::value_type *)&v350;
                        else
                          v258 = (const std::string::value_type *)v350;
                        if (SHIBYTE(v351) >= 0)
                          v259 = HIBYTE(v351);
                        else
                          v259 = *((_QWORD *)&v350 + 1);
                        std::string::append(v336, v258, v259);
                        if (SHIBYTE(v336->__r_.__value_.__r.__words[2]) < 0)
                        {
                          v263 = v336->__r_.__value_.__l.__size_;
                          if (v263)
                          {
                            v262 = (std::string *)v336->__r_.__value_.__r.__words[0];
                            if (!*(_BYTE *)(v336->__r_.__value_.__r.__words[0] + v263 - 1))
                            {
                              v261 = v263 - 1;
                              v336->__r_.__value_.__l.__size_ = v261;
LABEL_452:
                              v262->__r_.__value_.__s.__data_[v261] = 0;
                            }
                          }
                        }
                        else
                        {
                          v260 = HIBYTE(v336->__r_.__value_.__r.__words[2]);
                          if (*((_BYTE *)&v336->__r_.__value_.__s + 23) && !v331[v260])
                          {
                            v261 = v260 - 1;
                            *((_BYTE *)&v336->__r_.__value_.__s + 23) = v260 - 1;
                            v262 = v336;
                            goto LABEL_452;
                          }
                        }
                        std::string::push_back(v336, 10);
                        if (SHIBYTE(v351) < 0)
                        {
                          operator delete((void *)v350);
                          if (SHIBYTE(v349.__r_.__value_.__r.__words[2]) < 0)
                            goto LABEL_458;
LABEL_455:
                          if (v254)
                          {
LABEL_459:
                            v264 = (unint64_t *)&v254->__shared_owners_;
                            do
                              v265 = __ldaxr(v264);
                            while (__stlxr(v265 - 1, v264));
                            if (!v265)
                            {
                              ((void (*)(std::__shared_weak_count *))v254->__on_zero_shared)(v254);
                              std::__shared_weak_count::__release_weak(v254);
                            }
                          }
                        }
                        else
                        {
                          if ((SHIBYTE(v349.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                            goto LABEL_455;
LABEL_458:
                          operator delete(v349.__r_.__value_.__l.__data_);
                          if (v254)
                            goto LABEL_459;
                        }
                        sub_19C35CBE8((uint64_t)&__dst);
                        v246 = (char *)v361;
                      }
                      if (v246)
                      {
                        v266 = v362;
                        v267 = v246;
                        if (v362 != v246)
                        {
                          do
                          {
                            v268 = (std::__shared_weak_count *)*((_QWORD *)v266 - 2);
                            if (v268)
                            {
                              v269 = (unint64_t *)&v268->__shared_owners_;
                              do
                                v270 = __ldaxr(v269);
                              while (__stlxr(v270 - 1, v269));
                              if (!v270)
                              {
                                ((void (*)(std::__shared_weak_count *))v268->__on_zero_shared)(v268);
                                std::__shared_weak_count::__release_weak(v268);
                              }
                            }
                            v266 -= 24;
                          }
                          while (v266 != v246);
                          v267 = v361;
                        }
                        v362 = v246;
                        operator delete(v267);
                      }
LABEL_475:
                      sub_19C35CBE8((uint64_t)&v364);
                      sub_19C35CBE8((uint64_t)&v372);
                      v65 = v334;
                      if ((v376 & 0x80) != 0)
                      {
LABEL_476:
                        v155 = v374;
LABEL_99:
                        operator delete(v155);
                      }
LABEL_100:
                      v68 += 2;
                      if (v68 == v333)
                      {
                        v68 = (float *)__p;
                        if (!__p)
                        {
LABEL_94:
                          if (v379)
                          {
                            v380 = v379;
                            operator delete(v379);
                          }
                          v37 = v382;
                          v26 = v330;
                          goto LABEL_97;
                        }
LABEL_93:
                        operator delete(v68);
                        goto LABEL_94;
                      }
                      continue;
                    }
                    goto LABEL_269;
                  }
                  operator delete((void *)v350);
                  if (SHIBYTE(v349.__r_.__value_.__r.__words[2]) < 0)
                    goto LABEL_361;
LABEL_358:
                  if (!v197)
                    goto LABEL_378;
LABEL_362:
                  v216 = (unint64_t *)&v197->__shared_owners_;
                  do
                    v217 = __ldaxr(v216);
                  while (__stlxr(v217 - 1, v216));
LABEL_377:
                  if (v217)
                    goto LABEL_378;
                  ((void (*)(std::__shared_weak_count *))v197->__on_zero_shared)(v197);
                  std::__shared_weak_count::__release_weak(v197);
                  v220 = v359;
                  if (v359)
                    goto LABEL_379;
                  goto LABEL_380;
                }
                if (qword_1EE41C080 != -1)
                  dispatch_once(&qword_1EE41C080, &unk_1E3D3AB90);
                v206 = *(void **)(v14 + 72);
                v197 = *(std::__shared_weak_count **)(v14 + 80);
                v346 = v206;
                v347 = v197;
                if (v197)
                {
                  v207 = (unint64_t *)&v197->__shared_owners_;
                  do
                    v208 = __ldxr(v207);
                  while (__stxr(v208 + 1, v207));
                }
                sub_19C3E29F8(&v349, (unsigned int **)&__dst, (uint64_t)v206);
                v209 = &v349;
                if ((v349.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  v209 = (std::string *)v349.__r_.__value_.__r.__words[0];
                sub_19C34EC30("Stopped early, inline completion hypothesis  = [%s]", (uint64_t)&v350, v209);
                if (SHIBYTE(v351) >= 0)
                  v210 = (const std::string::value_type *)&v350;
                else
                  v210 = (const std::string::value_type *)v350;
                if (SHIBYTE(v351) >= 0)
                  v211 = HIBYTE(v351);
                else
                  v211 = *((_QWORD *)&v350 + 1);
                std::string::append(v336, v210, v211);
                if (SHIBYTE(v336->__r_.__value_.__r.__words[2]) < 0)
                {
                  v218 = v336->__r_.__value_.__l.__size_;
                  if (v218)
                  {
                    v214 = (std::string *)v336->__r_.__value_.__r.__words[0];
                    if (!*(_BYTE *)(v336->__r_.__value_.__r.__words[0] + v218 - 1))
                    {
                      v213 = v218 - 1;
                      v336->__r_.__value_.__l.__size_ = v213;
LABEL_368:
                      v214->__r_.__value_.__s.__data_[v213] = 0;
                    }
                  }
                }
                else
                {
                  v212 = HIBYTE(v336->__r_.__value_.__r.__words[2]);
                  if (*((_BYTE *)&v336->__r_.__value_.__s + 23) && !v331[v212])
                  {
                    v213 = v212 - 1;
                    *((_BYTE *)&v336->__r_.__value_.__s + 23) = v212 - 1;
                    v214 = v336;
                    goto LABEL_368;
                  }
                }
                std::string::push_back(v336, 10);
                if (SHIBYTE(v351) < 0)
                {
                  operator delete((void *)v350);
                  if ((SHIBYTE(v349.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    goto LABEL_371;
                }
                else if ((SHIBYTE(v349.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                {
LABEL_371:
                  if (!v197)
                    goto LABEL_378;
                  goto LABEL_375;
                }
                operator delete(v349.__r_.__value_.__l.__data_);
                if (!v197)
                  goto LABEL_378;
LABEL_375:
                v219 = (unint64_t *)&v197->__shared_owners_;
                do
                  v217 = __ldaxr(v219);
                while (__stlxr(v217 - 1, v219));
                goto LABEL_377;
              }
              break;
            }
            memset(&v364, 0, sizeof(v364));
            v73 = (const void *)buf;
            v74 = *((_QWORD *)&buf + 1) - buf;
            if (*((_QWORD *)&buf + 1) == (_QWORD)buf)
            {
              v75 = 0;
              v76 = 0;
            }
            else
            {
              if (v74 < 0)
                sub_19C2A18E8();
              v75 = (char *)operator new(*((_QWORD *)&buf + 1) - buf);
              v364.__r_.__value_.__r.__words[0] = (std::string::size_type)v75;
              v364.__r_.__value_.__l.__size_ = (std::string::size_type)v75;
              v76 = (std::string::size_type)&v75[4 * (v74 >> 2)];
              v364.__r_.__value_.__r.__words[2] = v76;
              memcpy(v75, v73, v74);
              v364.__r_.__value_.__l.__size_ = v76;
            }
            v77 = v76 - (_QWORD)v75;
            v78 = (uint64_t)(v76 - (_QWORD)v75) >> 2;
            v79 = v78 + 1;
            if ((unint64_t)(v78 + 1) >> 62)
              sub_19C2A18E8();
            if (v77 >> 1 > v79)
              v79 = v77 >> 1;
            if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFFCLL)
              v80 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v80 = v79;
            if (v80)
            {
              if (v80 >> 62)
                sub_19C2A143C();
              v81 = (char *)operator new(4 * v80);
            }
            else
            {
              v81 = 0;
            }
            v82 = &v81[4 * v78];
            *(float *)v82 = *v68;
            v83 = (std::string::size_type)(v82 + 4);
            if ((char *)v76 != v75)
            {
              v84 = v76 - (_QWORD)v75 - 4;
              if (v84 < 0x1C)
              {
                v85 = (char *)v76;
                goto LABEL_128;
              }
              v86 = (v84 >> 2) + 1;
              v85 = (char *)(v76 - 4 * (v86 & 0x7FFFFFFFFFFFFFF8));
              v87 = &v81[4 * v78 - 16];
              v88 = (__int128 *)(v76 - 16);
              v89 = v86 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v90 = *v88;
                *((_OWORD *)v87 - 1) = *(v88 - 1);
                *(_OWORD *)v87 = v90;
                v87 -= 32;
                v88 -= 2;
                v89 -= 8;
              }
              while (v89);
              v82 -= 4 * (v86 & 0x7FFFFFFFFFFFFFF8);
              if (v86 != (v86 & 0x7FFFFFFFFFFFFFF8))
              {
                do
                {
LABEL_128:
                  v91 = *((_DWORD *)v85 - 1);
                  v85 -= 4;
                  *((_DWORD *)v82 - 1) = v91;
                  v82 -= 4;
                }
                while (v85 != v75);
              }
            }
            v364.__r_.__value_.__r.__words[0] = (std::string::size_type)v82;
            v364.__r_.__value_.__l.__size_ = v83;
            v364.__r_.__value_.__r.__words[2] = (std::string::size_type)&v81[4 * v80];
            if (v75)
              operator delete(v75);
            v364.__r_.__value_.__l.__size_ = v83;
            v92 = v387;
            v93 = log10f(v68[1]);
            sub_19C3E80A0((uint64_t)&__dst, v332, (unsigned int *)v68, (uint64_t)&buf);
            v95 = *(_QWORD *)(v14 + 72);
            v94 = *(std::__shared_weak_count **)(v14 + 80);
            *(_QWORD *)&v372 = v95;
            *((_QWORD *)&v372 + 1) = v94;
            if (v94)
            {
              v96 = (unint64_t *)&v94->__shared_owners_;
              do
                v97 = __ldxr(v96);
              while (__stxr(v97 + 1, v96));
            }
            if (((*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v95 + 160))(v95, *(unsigned int *)v68) & 1) != 0
              || (*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)v95 + 112))(v95, *(unsigned int *)v68))
            {
              v376 = 0;
              LOBYTE(v374) = 0;
            }
            else
            {
              (*(void (**)(void **__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v95 + 40))(&v374, v95, *(unsigned int *)v68);
            }
            if (v94)
            {
              v105 = (unint64_t *)&v94->__shared_owners_;
              do
                v106 = __ldaxr(v105);
              while (__stlxr(v106 - 1, v105));
              if (!v106)
              {
                ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
                std::__shared_weak_count::__release_weak(v94);
              }
            }
            v362 = 0;
            v361 = 0;
            v363 = 0;
            v107 = v394;
            v108 = v395;
            if (v394 == v395)
            {
LABEL_239:
              if ((char)v376 < 0)
                operator delete(v374);
              v65 = v334;
              if (SHIBYTE(v353) < 0)
              {
                operator delete((void *)__dst);
                v155 = (void *)v364.__r_.__value_.__r.__words[0];
                if (!v364.__r_.__value_.__r.__words[0])
                  goto LABEL_100;
              }
              else
              {
                v155 = (void *)v364.__r_.__value_.__r.__words[0];
                if (!v364.__r_.__value_.__r.__words[0])
                  goto LABEL_100;
              }
              v364.__r_.__value_.__l.__size_ = (std::string::size_type)v155;
              goto LABEL_99;
            }
            v109 = v93 + v92;
            while (2)
            {
              (*(void (**)(__int128 *__return_ptr, _QWORD, void **))(*(_QWORD *)*v107 + 24))(&v350, *v107, &v374);
              v110 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v350 + 16))(v350);
              v111 = v350;
              if (v110)
              {
                *(_QWORD *)&v372 = v350;
                if ((_QWORD)v350)
                {
                  v112 = (_QWORD *)operator new();
                  v113 = v350;
                  *v112 = &off_1E3D39C88;
                  v112[1] = 0;
                  v112[2] = 0;
                  v112[3] = v113;
                }
                else
                {
                  v112 = 0;
                }
                *(_QWORD *)&v350 = 0;
                v114 = v107[2];
                *((_QWORD *)&v372 + 1) = v112;
                v373 = v114;
                v115 = v362;
                if (v362 < v363)
                {
                  *(_QWORD *)v362 = v111;
                  *((_QWORD *)v115 + 1) = v112;
                  v372 = 0uLL;
                  v116 = v115 + 24;
                  *((_QWORD *)v115 + 2) = v114;
                  goto LABEL_193;
                }
                v117 = (char *)v361;
                v118 = 0xAAAAAAAAAAAAAAABLL * ((v362 - (_BYTE *)v361) >> 3);
                v119 = v118 + 1;
                if (v118 + 1 > 0xAAAAAAAAAAAAAAALL)
                  sub_19C2A18E8();
                if (0x5555555555555556 * ((v363 - (_BYTE *)v361) >> 3) > v119)
                  v119 = 0x5555555555555556 * ((v363 - (_BYTE *)v361) >> 3);
                if (0xAAAAAAAAAAAAAAABLL * ((v363 - (_BYTE *)v361) >> 3) >= 0x555555555555555)
                  v120 = 0xAAAAAAAAAAAAAAALL;
                else
                  v120 = v119;
                if (v120 > 0xAAAAAAAAAAAAAAALL)
                  sub_19C2A143C();
                v121 = (char *)operator new(24 * v120);
                v122 = &v121[24 * v118];
                *(_QWORD *)v122 = v111;
                *((_QWORD *)v122 + 1) = v112;
                v123 = &v121[24 * v120];
                v372 = 0uLL;
                *((_QWORD *)v122 + 2) = v114;
                v116 = v122 + 24;
                if (v115 == v117)
                {
                  v361 = v122;
                  v362 = v122 + 24;
                  v363 = &v121[24 * v120];
                  v14 = v338;
                  if (!v115)
                    goto LABEL_193;
                  goto LABEL_192;
                }
                v124 = v115;
                v14 = v338;
                do
                {
                  v125 = *(_OWORD *)(v124 - 24);
                  v124 -= 24;
                  *(_OWORD *)(v122 - 24) = v125;
                  v122 -= 24;
                  *(_QWORD *)v124 = 0;
                  *((_QWORD *)v124 + 1) = 0;
                  *((_QWORD *)v122 + 2) = *((_QWORD *)v124 + 2);
                }
                while (v124 != v117);
                v361 = v122;
                v362 = v116;
                v363 = v123;
                do
                {
                  v126 = (std::__shared_weak_count *)*((_QWORD *)v115 - 2);
                  if (v126)
                  {
                    v127 = (unint64_t *)&v126->__shared_owners_;
                    do
                      v128 = __ldaxr(v127);
                    while (__stlxr(v128 - 1, v127));
                    if (!v128)
                    {
                      ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
                      std::__shared_weak_count::__release_weak(v126);
                    }
                  }
                  v115 -= 24;
                }
                while (v115 != v117);
                v115 = v117;
                if (v117)
LABEL_192:
                  operator delete(v115);
LABEL_193:
                v362 = v116;
                v129 = (std::__shared_weak_count *)*((_QWORD *)&v372 + 1);
                if (*((_QWORD *)&v372 + 1))
                {
                  v130 = (unint64_t *)(*((_QWORD *)&v372 + 1) + 8);
                  do
                    v131 = __ldaxr(v130);
                  while (__stlxr(v131 - 1, v130));
                  if (!v131)
                  {
                    ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
                    std::__shared_weak_count::__release_weak(v129);
                  }
                }
                v111 = v350;
              }
              *(_QWORD *)&v350 = 0;
              if (v111)
                (*(void (**)(uint64_t))(*(_QWORD *)v111 + 8))(v111);
              v107 += 3;
              if (v107 == v108)
              {
                v132 = v362;
                if (v361 != v362)
                {
                  v133 = v396;
                  v134 = log10f(v68[1]);
                  v135 = v388;
                  v350 = 0uLL;
                  v351 = 0;
                  v136 = v397;
                  v137 = v398 - v397;
                  if (v398 == v397)
                  {
                    v138 = 0;
                  }
                  else
                  {
                    if (v137 < 0)
                      sub_19C2A18E8();
                    v138 = (char *)operator new(v398 - v397);
                    *(_QWORD *)&v350 = v138;
                    v351 = &v138[4 * (v137 >> 2)];
                    memcpy(v138, v136, v137);
                    *((_QWORD *)&v350 + 1) = &v138[4 * (v137 >> 2)];
                  }
                  sub_19C3A9F98((uint64_t)&v372, (uint64_t)&v364, &__dst, (uint64_t)v390, (uint64_t)&v361, v133, 1, (uint64_t)&v350, v109, v134 + v135);
                  if (v138)
                    operator delete(v138);
                  sub_19C35E950(v330, (uint64_t)&v372);
                  sub_19C35CBE8((uint64_t)&v372);
                  v132 = (char *)v361;
                }
                if (v132)
                {
                  v150 = v362;
                  v151 = v132;
                  if (v362 != v132)
                  {
                    do
                    {
                      v152 = (std::__shared_weak_count *)*((_QWORD *)v150 - 2);
                      if (v152)
                      {
                        v153 = (unint64_t *)&v152->__shared_owners_;
                        do
                          v154 = __ldaxr(v153);
                        while (__stlxr(v154 - 1, v153));
                        if (!v154)
                        {
                          ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
                          std::__shared_weak_count::__release_weak(v152);
                        }
                      }
                      v150 -= 24;
                    }
                    while (v150 != v132);
                    v151 = v361;
                  }
                  v362 = v132;
                  operator delete(v151);
                }
                goto LABEL_239;
              }
              continue;
            }
          }
          if (v41 < v381)
          {
            *(_DWORD *)v41 = *v37;
            v42 = v41 + 4;
          }
          else
          {
            v43 = (char *)v379;
            v44 = v41 - (_BYTE *)v379;
            v45 = (v41 - (_BYTE *)v379) >> 2;
            v46 = v45 + 1;
            if ((unint64_t)(v45 + 1) >> 62)
              sub_19C2A18E8();
            v47 = v381 - (_BYTE *)v379;
            if ((v381 - (_BYTE *)v379) >> 1 > v46)
              v46 = v47 >> 1;
            if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFFCLL)
              v48 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v48 = v46;
            if (v48)
            {
              if (v48 >> 62)
                sub_19C2A143C();
              v49 = operator new(4 * v48);
            }
            else
            {
              v49 = 0;
            }
            v50 = &v49[4 * v45];
            *v50 = *v37;
            v42 = v50 + 1;
            if (v41 != v43)
            {
              v51 = v41 - 4 - v43;
              if (v51 < 0xBC)
              {
                v52 = v41;
                goto LABEL_64;
              }
              if (&v49[v44 - 4 - (v51 & 0xFFFFFFFFFFFFFFFCLL)] > &v49[v44 - 4])
              {
                v52 = v41;
                goto LABEL_64;
              }
              if (&v41[-(v51 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v41 - 4)
              {
                v52 = v41;
                goto LABEL_64;
              }
              if ((unint64_t)(v41 - v49 - v44) < 0x20)
              {
                v52 = v41;
                goto LABEL_64;
              }
              v54 = (v51 >> 2) + 1;
              v52 = &v41[-4 * (v54 & 0x7FFFFFFFFFFFFFF8)];
              v55 = &v49[4 * v45 - 16];
              v56 = (__int128 *)(v41 - 16);
              v57 = v54 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v58 = *v56;
                *(v55 - 1) = *(v56 - 1);
                *v55 = v58;
                v55 -= 2;
                v56 -= 2;
                v57 -= 8;
              }
              while (v57);
              v50 -= v54 & 0x7FFFFFFFFFFFFFF8;
              if (v54 != (v54 & 0x7FFFFFFFFFFFFFF8))
              {
                do
                {
LABEL_64:
                  v53 = *((_DWORD *)v52 - 1);
                  v52 -= 4;
                  *--v50 = v53;
                }
                while (v52 != v43);
              }
            }
            v379 = v50;
            v380 = v42;
            v381 = &v49[4 * v48];
            if (v43)
              operator delete(v43);
          }
          v380 = v42;
          ++v37;
          v41 = (char *)v42;
          continue;
        }
      }
LABEL_97:
      if (v37)
      {
        v383 = v37;
        operator delete(v37);
      }
      sub_19C35CBE8((uint64_t)&buf);
    }
    if (qword_1EE41C080 != -1)
      dispatch_once(&qword_1EE41C080, &unk_1E3D3AB90);
    v275 = qword_1EE41C078;
    if (os_log_type_enabled((os_log_t)qword_1EE41C078, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf) = 0;
      v272 = v275;
      v273 = "Stopped beam search as abort signal was received via shouldAbort";
      v274 = 2;
      goto LABEL_487;
    }
LABEL_488:
    v276 = v328[2];
    v277 = v328[3];
    v386 = 0;
    buf = 0uLL;
    sub_19C35E1DC((uint64_t)&buf, v276, v277, 0x86BCA1AF286BCA1BLL * ((v277 - v276) >> 4));
    v279 = (unsigned int **)*((_QWORD *)&buf + 1);
    v278 = (unsigned int **)buf;
    if ((_QWORD)buf == *((_QWORD *)&buf + 1))
      goto LABEL_528;
    v280 = *((_QWORD *)&buf + 1) - 304;
    if (*((_QWORD *)&buf + 1) - 304 <= (unint64_t)buf)
    {
      if ((_QWORD)buf != *((_QWORD *)&buf + 1))
        goto LABEL_496;
LABEL_494:
      v278 = v279;
      goto LABEL_528;
    }
    do
    {
      sub_19C35E2D8((uint64_t)v278, v280);
      v278 += 38;
      v280 -= 304;
    }
    while ((unint64_t)v278 < v280);
    v279 = (unsigned int **)*((_QWORD *)&buf + 1);
    v278 = (unsigned int **)buf;
    if ((_QWORD)buf == *((_QWORD *)&buf + 1))
      goto LABEL_494;
    while (1)
    {
LABEL_496:
      if (qword_1EE41C080 != -1)
        dispatch_once(&qword_1EE41C080, &unk_1E3D3AB90);
      v281 = *(_QWORD *)(v14 + 72);
      v282 = *(std::__shared_weak_count **)(v14 + 80);
      *(_QWORD *)&__dst = v281;
      *((_QWORD *)&__dst + 1) = v282;
      if (v282)
      {
        v283 = (unint64_t *)&v282->__shared_owners_;
        do
          v284 = __ldxr(v283);
        while (__stxr(v284 + 1, v283));
      }
      sub_19C3E29F8(&v364, v278, v281);
      v285 = &v364;
      if ((v364.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v285 = (std::string *)v364.__r_.__value_.__r.__words[0];
      sub_19C34EC30("Next word candidate hypothesis = [%s]", (uint64_t)&v372, v285);
      if (v373 >= 0)
        v286 = (const std::string::value_type *)&v372;
      else
        v286 = (const std::string::value_type *)v372;
      if (v373 >= 0)
        v287 = HIBYTE(v373);
      else
        v287 = *((_QWORD *)&v372 + 1);
      std::string::append(v336, v286, v287);
      if (SHIBYTE(v336->__r_.__value_.__r.__words[2]) < 0)
      {
        v291 = v336->__r_.__value_.__l.__size_;
        if (v291)
        {
          v290 = (std::string *)v336->__r_.__value_.__r.__words[0];
          if (!*(_BYTE *)(v336->__r_.__value_.__r.__words[0] + v291 - 1))
          {
            v289 = v291 - 1;
            v336->__r_.__value_.__l.__size_ = v289;
            goto LABEL_516;
          }
        }
      }
      else
      {
        v288 = HIBYTE(v336->__r_.__value_.__r.__words[2]);
        if (*((_BYTE *)&v336->__r_.__value_.__s + 23) && !v331[v288])
        {
          v289 = v288 - 1;
          v290 = v336;
          *((_BYTE *)&v336->__r_.__value_.__s + 23) = v289;
LABEL_516:
          v290->__r_.__value_.__s.__data_[v289] = 0;
        }
      }
      std::string::push_back(v336, 10);
      if (SHIBYTE(v373) < 0)
      {
        operator delete((void *)v372);
        if ((SHIBYTE(v364.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_519:
          if (v282)
            goto LABEL_523;
          goto LABEL_495;
        }
      }
      else if ((SHIBYTE(v364.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_519;
      }
      operator delete(v364.__r_.__value_.__l.__data_);
      if (v282)
      {
LABEL_523:
        v292 = (unint64_t *)&v282->__shared_owners_;
        do
          v293 = __ldaxr(v292);
        while (__stlxr(v293 - 1, v292));
        if (!v293)
        {
          ((void (*)(std::__shared_weak_count *))v282->__on_zero_shared)(v282);
          std::__shared_weak_count::__release_weak(v282);
        }
      }
LABEL_495:
      v278 += 38;
      if (v278 == v279)
      {
        v278 = (unsigned int **)buf;
LABEL_528:
        a8 = v336;
        if (v278)
        {
          v294 = *((_QWORD *)&buf + 1);
          v295 = v278;
          if (*((unsigned int ***)&buf + 1) != v278)
          {
            do
              v294 = sub_19C35CBE8(v294 - 304);
            while ((unsigned int **)v294 != v278);
            v295 = (unsigned int **)buf;
          }
          *((_QWORD *)&buf + 1) = v278;
          operator delete(v295);
        }
        v26 = v339;
        v296 = v341;
        v341 = v339;
        if (v296)
        {
          v297 = v296[2];
          if (v297)
          {
            v298 = v296[3];
            v299 = (void *)v296[2];
            if (v298 != v297)
            {
              do
                v298 = sub_19C35CBE8(v298 - 304);
              while (v298 != v297);
              v299 = (void *)v296[2];
            }
            v296[3] = v297;
            operator delete(v299);
          }
          MEMORY[0x1A1AD355C](v296, 0x1020C402564D6C4);
        }
        v28 = ++v324;
        v29 = v339[2] == v339[3] || v28 >= a6;
        if (v29)
        {
          v27 = v340;
          goto LABEL_543;
        }
        goto LABEL_29;
      }
    }
  }
  if (qword_1EE41C080 != -1)
    dispatch_once(&qword_1EE41C080, &unk_1E3D3AB90);
  v320 = qword_1EE41C078;
  if (os_log_type_enabled((os_log_t)qword_1EE41C078, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf) = 0;
    _os_log_impl(&dword_19C291000, v320, OS_LOG_TYPE_DEFAULT, "Stopped beam search as abort signal was received via shouldAbort", (uint8_t *)&buf, 2u);
  }
  *v322 = 0;
  v322[1] = 0;
  v322[2] = 0;
LABEL_560:
  if (v340)
  {
    v310 = v340[2];
    if (v310)
    {
      v311 = v340[3];
      v312 = (void *)v340[2];
      if (v311 != v310)
      {
        do
          v311 = sub_19C35CBE8(v311 - 304);
        while (v311 != v310);
        v312 = (void *)v340[2];
      }
      v340[3] = v310;
      operator delete(v312);
    }
    MEMORY[0x1A1AD355C](v340, 0x1020C402564D6C4);
  }
  if (v341)
  {
    v313 = v341[2];
    if (v313)
    {
      v314 = v341[3];
      v315 = (void *)v341[2];
      if (v314 != v313)
      {
        do
          v314 = sub_19C35CBE8(v314 - 304);
        while (v314 != v313);
        v315 = (void *)v341[2];
      }
      v341[3] = v313;
      operator delete(v315);
    }
    MEMORY[0x1A1AD355C](v341, 0x1020C402564D6C4);
  }
LABEL_574:
  v316 = (uint64_t)v344;
  v344 = 0;
  if (v316)
  {
    v317 = *(_QWORD *)(v316 + 16);
    if (v317)
    {
      v318 = *(_QWORD *)(v316 + 24);
      v319 = *(void **)(v316 + 16);
      if (v318 != v317)
      {
        do
          v318 = sub_19C35CBE8(v318 - 304);
        while (v318 != v317);
        v319 = *(void **)(v316 + 16);
      }
      *(_QWORD *)(v316 + 24) = v317;
      operator delete(v319);
    }
    MEMORY[0x1A1AD355C](v316, 0x1020C402564D6C4);
  }
}

void sub_19C35C258(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_19C2CDAC8(a1);
}

void sub_19C35C464()
{
  if (STACK[0x568])
  {
    STACK[0x570] = STACK[0x568];
    JUMPOUT(0x19C35C864);
  }
  JUMPOUT(0x19C35C868);
}

void sub_19C35C478()
{
  JUMPOUT(0x19C35C868);
}

void sub_19C35C480(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  sub_19C2B43C8((uint64_t)&a55);
  JUMPOUT(0x19C35C82CLL);
}

void sub_19C35C490(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,void *a55)
{
  sub_19C2B43C8((uint64_t)&a55);
  JUMPOUT(0x19C35C51CLL);
}

void sub_19C35C528(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  if (a60 < 0)
    operator delete(__p);
  JUMPOUT(0x19C35C55CLL);
}

void sub_19C35C564(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  sub_19C2B43C8((uint64_t)&a55);
  JUMPOUT(0x19C35C7C0);
}

void sub_19C35C580()
{
  if (!STACK[0x2C0])
  {
    if (!STACK[0x538])
    {
      if (!STACK[0x550])
      {
        if (STACK[0x568])
          operator delete((void *)STACK[0x568]);
        sub_19C35CBE8((uint64_t)&STACK[0x580]);
        JUMPOUT(0x19C35C870);
      }
      JUMPOUT(0x19C35C8A4);
    }
    JUMPOUT(0x19C35C898);
  }
  JUMPOUT(0x19C35C7A8);
}

void sub_19C35C60C()
{
  sub_19C2B43C8((uint64_t)&STACK[0x3F0]);
  JUMPOUT(0x19C35C84CLL);
}

void sub_19C35C61C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  sub_19C2B43C8((uint64_t)&STACK[0x3F0]);
  if (a60 < 0)
    JUMPOUT(0x19C35C798);
  JUMPOUT(0x19C35C784);
}

void sub_19C35C634(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  void *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *p_shared_owners;
  unint64_t v64;

  if (a60 < 0)
    operator delete(__p);
  v60 = (void *)STACK[0x2A8];
  if (STACK[0x2A8])
  {
    v61 = STACK[0x2B0];
    if ((void *)STACK[0x2B0] != v60)
    {
      do
      {
        v62 = *(std::__shared_weak_count **)(v61 - 16);
        if (v62)
        {
          p_shared_owners = (unint64_t *)&v62->__shared_owners_;
          do
            v64 = __ldaxr(p_shared_owners);
          while (__stlxr(v64 - 1, p_shared_owners));
          if (!v64)
          {
            ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
            std::__shared_weak_count::__release_weak(v62);
          }
        }
        v61 -= 24;
      }
      while ((void *)v61 != v60);
      v60 = (void *)STACK[0x2A8];
    }
    operator delete(v60);
  }
  sub_19C35CBE8((uint64_t)&STACK[0x2C0]);
  sub_19C35CBE8((uint64_t)&STACK[0x3F0]);
  if (SLOBYTE(STACK[0x537]) < 0)
    operator delete((void *)STACK[0x520]);
  if (!STACK[0x538])
  {
    if (!STACK[0x550])
    {
      if (STACK[0x568])
        operator delete((void *)STACK[0x568]);
      sub_19C35CBE8((uint64_t)&STACK[0x580]);
      JUMPOUT(0x19C35C870);
    }
    JUMPOUT(0x19C35C8A4);
  }
  JUMPOUT(0x19C35C898);
}

void sub_19C35C66C()
{
  JUMPOUT(0x19C35C84CLL);
}

void sub_19C35C674()
{
  uint64_t v0;

  if (!v0)
    JUMPOUT(0x19C35C6D8);
  JUMPOUT(0x19C35C6A8);
}

void sub_19C35C6EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60,uint64_t a61)
{
  void *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *p_shared_owners;
  unint64_t v65;
  void *v66;
  void *v67;

  if (a60 < 0)
    operator delete(__p);
  if (a54 < 0)
    operator delete(a49);
  sub_19C2B43C8((uint64_t)&a46);
  sub_19C35CBE8((uint64_t)&a61);
  v61 = (void *)STACK[0x2A8];
  if (STACK[0x2A8])
  {
    v62 = STACK[0x2B0];
    if ((void *)STACK[0x2B0] != v61)
    {
      do
      {
        v63 = *(std::__shared_weak_count **)(v62 - 16);
        if (v63)
        {
          p_shared_owners = (unint64_t *)&v63->__shared_owners_;
          do
            v65 = __ldaxr(p_shared_owners);
          while (__stlxr(v65 - 1, p_shared_owners));
          if (!v65)
          {
            ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
            std::__shared_weak_count::__release_weak(v63);
          }
        }
        v62 -= 24;
      }
      while ((void *)v62 != v61);
      v61 = (void *)STACK[0x2A8];
    }
    operator delete(v61);
  }
  sub_19C35CBE8((uint64_t)&STACK[0x2C0]);
  sub_19C35CBE8((uint64_t)&STACK[0x3F0]);
  if (SLOBYTE(STACK[0x537]) < 0)
    operator delete((void *)STACK[0x520]);
  if (STACK[0x538])
  {
    operator delete((void *)STACK[0x538]);
    v66 = (void *)STACK[0x550];
    if (!STACK[0x550])
    {
LABEL_20:
      v67 = (void *)STACK[0x568];
      if (!STACK[0x568])
      {
LABEL_22:
        sub_19C35CBE8((uint64_t)&STACK[0x580]);
        JUMPOUT(0x19C35C870);
      }
LABEL_21:
      operator delete(v67);
      goto LABEL_22;
    }
  }
  else
  {
    v66 = (void *)STACK[0x550];
    if (!STACK[0x550])
      goto LABEL_20;
  }
  STACK[0x558] = (unint64_t)v66;
  operator delete(v66);
  v67 = (void *)STACK[0x568];
  if (!STACK[0x568])
    goto LABEL_22;
  goto LABEL_21;
}

void sub_19C35C728(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  unint64_t v60;

  sub_19C2B43C8((uint64_t)&STACK[0x3F0]);
  if (a52)
    (*(void (**)(uint64_t))(*(_QWORD *)a52 + 8))(a52);
  sub_19C35CE78((void **)&STACK[0x2A8]);
  if (SLOBYTE(STACK[0x537]) < 0)
  {
    operator delete((void *)STACK[0x520]);
    if ((a60 & 0x80000000) == 0)
      goto LABEL_5;
  }
  else if ((a60 & 0x80000000) == 0)
  {
LABEL_5:
    v60 = STACK[0x2C0];
    if (!STACK[0x2C0])
LABEL_10:
      JUMPOUT(0x19C35C84CLL);
LABEL_9:
    STACK[0x2C8] = v60;
    JUMPOUT(0x19C35C848);
  }
  operator delete(a55);
  v60 = STACK[0x2C0];
  if (!STACK[0x2C0])
    goto LABEL_10;
  goto LABEL_9;
}

void sub_19C35C7B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44)
{
  sub_19C35E470(&a38);
  sub_19C35E470(&a39);
  sub_19C35E470(&a40);
  sub_19C35E470(&a44);
  _Unwind_Resume(a1);
}

int64_t sub_19C35C8B8@<X0>(uint64_t *a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  int64_t result;
  unint64_t v6;
  char *v7;
  uint64_t v8;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v2 = *a1;
  v3 = a1[1];
  result = v3 - *a1;
  if (v3 != *a1)
  {
    v6 = 0x86BCA1AF286BCA1BLL * (result >> 4);
    if (v6 >= 0xD79435E50D7944)
      sub_19C2A18E8();
    v7 = (char *)operator new(result);
    v8 = 0;
    *a2 = v7;
    a2[1] = v7;
    a2[2] = &v7[304 * v6];
    do
    {
      result = sub_19C35CA40((uint64_t)&v7[v8], v2 + v8);
      v8 += 304;
    }
    while (v2 + v8 != v3);
    a2[1] = &v7[v8];
  }
  return result;
}

void sub_19C35C974(_Unwind_Exception *exception_object)
{
  void **v1;
  uint64_t v3;
  void *v4;
  void *v5;

  v3 = 0;
  v4 = *v1;
  if (*v1)
  {
    do
    {
      v3 -= 304;
      sub_19C35CBE8(v3);
    }
    while ((void *)v3 != v4);
    v5 = *v1;
    v1[1] = v4;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

double sub_19C35C9E4@<D0>(uint64_t a1@<X8>)
{
  char *v2;

  v2 = (char *)operator new(0x38uLL);
  *(_QWORD *)a1 = v2;
  *(_OWORD *)(a1 + 8) = xmmword_19C46DEB0;
  strcpy(v2, "Beam Search V1 (Length Normalized Prediction Queue)");
  return *(double *)"d Prediction Queue)";
}

uint64_t sub_19C35CA40(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  const void *v5;
  int64_t v6;
  char *v7;
  char *v8;
  __int128 v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  int64_t v13;
  char *v14;
  char *v15;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v5 = *(const void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v6 = v4 - *(_QWORD *)a2;
  if (v4 != *(_QWORD *)a2)
  {
    if (v6 < 0)
      sub_19C2A18E8();
    v7 = (char *)operator new(v4 - *(_QWORD *)a2);
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v7;
    v8 = &v7[4 * (v6 >> 2)];
    *(_QWORD *)(a1 + 16) = v8;
    memcpy(v7, v5, v6);
    *(_QWORD *)(a1 + 8) = v8;
  }
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  if (*(char *)(a2 + 55) < 0)
  {
    sub_19C2B5238((_BYTE *)(a1 + 32), *(void **)(a2 + 32), *(_QWORD *)(a2 + 40));
  }
  else
  {
    v9 = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v9;
  }
  sub_19C2E1F84(a1 + 56, a2 + 56);
  sub_19C35CD34((_QWORD *)(a1 + 240), a2 + 240);
  v10 = *(_QWORD *)(a2 + 264);
  *(_DWORD *)(a1 + 272) = *(_DWORD *)(a2 + 272);
  *(_QWORD *)(a1 + 264) = v10;
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  v12 = *(_BYTE **)(a2 + 280);
  v11 = *(_BYTE **)(a2 + 288);
  v13 = v11 - v12;
  if (v11 != v12)
  {
    if (v13 < 0)
      sub_19C2A18E8();
    v14 = (char *)operator new(v11 - v12);
    *(_QWORD *)(a1 + 280) = v14;
    *(_QWORD *)(a1 + 288) = v14;
    v15 = &v14[4 * (v13 >> 2)];
    *(_QWORD *)(a1 + 296) = v15;
    memcpy(v14, v12, v13);
    *(_QWORD *)(a1 + 288) = v15;
  }
  return a1;
}

void sub_19C35CB80(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C35CBE8(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9;

  v2 = *(void **)(a1 + 280);
  if (v2)
  {
    *(_QWORD *)(a1 + 288) = v2;
    operator delete(v2);
  }
  v3 = *(_QWORD *)(a1 + 240);
  if (v3)
  {
    v4 = *(_QWORD *)(a1 + 248);
    v5 = *(void **)(a1 + 240);
    if (v4 != v3)
    {
      do
      {
        v6 = *(std::__shared_weak_count **)(v4 - 16);
        if (v6)
        {
          p_shared_owners = (unint64_t *)&v6->__shared_owners_;
          do
            v8 = __ldaxr(p_shared_owners);
          while (__stlxr(v8 - 1, p_shared_owners));
          if (!v8)
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
        }
        v4 -= 24;
      }
      while (v4 != v3);
      v5 = *(void **)(a1 + 240);
    }
    *(_QWORD *)(a1 + 248) = v3;
    operator delete(v5);
  }
  sub_19C2E25C8((void **)(a1 + 56));
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    v9 = *(void **)a1;
    if (!*(_QWORD *)a1)
      return a1;
    goto LABEL_16;
  }
  v9 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
LABEL_16:
    *(_QWORD *)(a1 + 8) = v9;
    operator delete(v9);
  }
  return a1;
}

void ***sub_19C35CCC4(void ***a1)
{
  void **v2;
  void *v3;
  uint64_t v4;
  void *v5;

  if (!*((_BYTE *)a1 + 8))
  {
    v2 = *a1;
    v3 = **a1;
    if (v3)
    {
      v4 = (uint64_t)v2[1];
      v5 = **a1;
      if ((void *)v4 != v3)
      {
        do
          v4 = sub_19C35CBE8(v4 - 304);
        while ((void *)v4 != v3);
        v5 = **a1;
      }
      v2[1] = v3;
      operator delete(v5);
    }
  }
  return a1;
}

_QWORD *sub_19C35CD34(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  int64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v3 = *(_QWORD **)a2;
  v4 = *(_QWORD **)(a2 + 8);
  v5 = (int64_t)v4 - *(_QWORD *)a2;
  if (v4 != *(_QWORD **)a2)
  {
    v6 = 0xAAAAAAAAAAAAAAABLL * (v5 >> 3);
    if (v6 >= 0xAAAAAAAAAAAAAABLL)
      sub_19C2A18E8();
    v7 = operator new(v5);
    *a1 = v7;
    a1[1] = v7;
    a1[2] = &v7[3 * v6];
    do
    {
      v8 = v3[1];
      *v7 = *v3;
      v7[1] = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      v7[2] = v3[2];
      v3 += 3;
      v7 += 3;
    }
    while (v3 != v4);
    a1[1] = v7;
  }
  return a1;
}

void sub_19C35CDFC(_Unwind_Exception *exception_object)
{
  void **v1;
  char *v3;
  char *v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v3 = (char *)*v1;
  if (*v1)
  {
    v4 = (char *)v1[1];
    v5 = *v1;
    if (v4 != v3)
    {
      do
      {
        v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 2);
        if (v6)
        {
          p_shared_owners = (unint64_t *)&v6->__shared_owners_;
          do
            v8 = __ldaxr(p_shared_owners);
          while (__stlxr(v8 - 1, p_shared_owners));
          if (!v8)
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
        }
        v4 -= 24;
      }
      while (v4 != v3);
      v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void **sub_19C35CE78(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (std::__shared_weak_count *)*((_QWORD *)v3 - 2);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 24;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

_QWORD *sub_19C35CF10(uint64_t *a1, uint64_t a2, char a3)
{
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  NSObject *v13;
  uint64_t v14;
  uint8_t buf[16];
  unint64_t v16;

  if ((a3 & 1) != 0)
  {
    sub_19C319804(*(_QWORD **)(a2 + 104), (uint64_t *)buf);
    v4 = *(_QWORD *)buf;
    *a1 = *(_QWORD *)buf;
    if (!v4)
    {
      result = 0;
      goto LABEL_19;
    }
    result = (_QWORD *)operator new();
  }
  else
  {
    v6 = *(_QWORD *)(a2 + 104);
    memset(buf, 0, sizeof(buf));
    v16 = 0;
    v7 = *(_QWORD *)(v6 + 208);
    v8 = *(_QWORD *)(v6 + 216);
    if (v7 != v8)
    {
      v9 = 0;
      do
      {
        (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)v7 + 56))(&v14);
        if ((unint64_t)v9 >= v16)
        {
          v9 = sub_19C32F5A4(buf, &v14);
        }
        else
        {
          v10 = v14;
          v14 = 0;
          *v9++ = v10;
        }
        *(_QWORD *)&buf[8] = v9;
        v11 = v14;
        v14 = 0;
        if (v11)
          (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
        v7 += 8;
      }
      while (v7 != v8);
    }
    v12 = (_QWORD *)operator new();
    *v12 = &off_1E3D35378;
    v12[1] = 0;
    v4 = operator new();
    *(_QWORD *)v4 = &off_1E3D369D0;
    *(_OWORD *)(v4 + 8) = *(_OWORD *)buf;
    *(_QWORD *)(v4 + 24) = v16;
    *(_QWORD *)(v4 + 32) = v12;
    if ((sub_19C3E415C((uint64_t **)v4) & 1) == 0)
    {
      if (qword_1EE41C080 != -1)
        dispatch_once(&qword_1EE41C080, &unk_1E3D3AB90);
      v13 = qword_1EE41C078;
      if (os_log_type_enabled((os_log_t)qword_1EE41C078, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19C291000, v13, OS_LOG_TYPE_DEFAULT, "No phrase lexicon present but tried phrase lexicon constrained predictions: this will result in an empty prediction set", buf, 2u);
      }
    }
    *a1 = v4;
    result = (_QWORD *)operator new();
  }
  *result = &off_1E3D39C88;
  result[1] = 0;
  result[2] = 0;
  result[3] = v4;
LABEL_19:
  a1[1] = (uint64_t)result;
  a1[2] = 0;
  return result;
}

void sub_19C35D108(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_19C35D144(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  JUMPOUT(0x19C35D168);
}

void sub_19C35D178(uint64_t a1, unint64_t a2)
{
  _BYTE *v2;
  _BYTE *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;

  v2 = *(_BYTE **)a1;
  if (0x86BCA1AF286BCA1BLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4) < a2)
  {
    if (a2 >= 0xD79435E50D7944)
      sub_19C2A18E8();
    v4 = *(_BYTE **)(a1 + 8);
    v5 = 304 * a2;
    v6 = (char *)operator new(304 * a2);
    v7 = &v6[v5];
    v8 = &v6[v4 - v2];
    if (v4 == v2)
    {
      *(_QWORD *)a1 = v8;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
      if (v2)
LABEL_9:
        operator delete(v2);
    }
    else
    {
      v9 = 0;
      do
      {
        v10 = &v8[v9];
        v11 = &v4[v9];
        v12 = (uint64_t)&v4[v9 - 304];
        *(_OWORD *)&v8[v9 - 304] = *(_OWORD *)v12;
        *(_QWORD *)&v8[v9 - 288] = *(_QWORD *)&v4[v9 - 288];
        *(_QWORD *)&v4[v9 - 296] = 0;
        *(_QWORD *)v12 = 0;
        *(_QWORD *)(v12 + 16) = 0;
        *(_QWORD *)&v8[v9 - 280] = *(_QWORD *)&v4[v9 - 280];
        v13 = (uint64_t)&v4[v9 - 272];
        v14 = *(_OWORD *)v13;
        *((_QWORD *)v10 - 32) = *(_QWORD *)&v4[v9 - 256];
        *(_OWORD *)&v8[v9 - 272] = v14;
        *((_QWORD *)v11 - 32) = 0;
        *(_QWORD *)v13 = 0;
        *(_QWORD *)(v13 + 8) = 0;
        *(_OWORD *)(v10 - 248) = *(_OWORD *)&v4[v9 - 248];
        *((_QWORD *)v10 - 29) = *(_QWORD *)&v4[v9 - 232];
        *((_QWORD *)v11 - 31) = 0;
        *((_QWORD *)v11 - 30) = 0;
        *((_QWORD *)v11 - 29) = 0;
        *((_OWORD *)v10 - 14) = *(_OWORD *)&v4[v9 - 224];
        *((_QWORD *)v10 - 26) = *(_QWORD *)&v4[v9 - 208];
        *((_QWORD *)v11 - 28) = 0;
        *((_QWORD *)v11 - 27) = 0;
        *((_QWORD *)v11 - 26) = 0;
        *(_OWORD *)(v10 - 200) = *(_OWORD *)&v4[v9 - 200];
        *((_QWORD *)v10 - 23) = *(_QWORD *)&v4[v9 - 184];
        *((_QWORD *)v11 - 25) = 0;
        *((_QWORD *)v11 - 24) = 0;
        *((_QWORD *)v11 - 23) = 0;
        *((_OWORD *)v10 - 11) = *(_OWORD *)&v4[v9 - 176];
        *((_QWORD *)v10 - 20) = *(_QWORD *)&v4[v9 - 160];
        *((_QWORD *)v11 - 22) = 0;
        *((_QWORD *)v11 - 21) = 0;
        *((_QWORD *)v11 - 20) = 0;
        *(_OWORD *)(v10 - 152) = *(_OWORD *)&v4[v9 - 152];
        *((_QWORD *)v10 - 17) = *(_QWORD *)&v4[v9 - 136];
        *((_QWORD *)v11 - 19) = 0;
        *((_QWORD *)v11 - 18) = 0;
        v15 = *(_OWORD *)&v4[v9 - 128];
        *((_QWORD *)v11 - 17) = 0;
        *((_OWORD *)v10 - 8) = v15;
        *((_OWORD *)v10 - 7) = *(_OWORD *)&v4[v9 - 112];
        *((_QWORD *)v10 - 12) = *(_QWORD *)&v4[v9 - 96];
        *((_QWORD *)v11 - 14) = 0;
        *((_QWORD *)v11 - 13) = 0;
        *((_QWORD *)v11 - 12) = 0;
        *(_OWORD *)(v10 - 88) = *(_OWORD *)&v4[v9 - 88];
        *((_QWORD *)v10 - 9) = *(_QWORD *)&v4[v9 - 72];
        *((_QWORD *)v11 - 11) = 0;
        *((_QWORD *)v11 - 10) = 0;
        *((_QWORD *)v11 - 9) = 0;
        *((_OWORD *)v10 - 4) = *(_OWORD *)&v4[v9 - 64];
        *((_QWORD *)v10 - 6) = *(_QWORD *)&v4[v9 - 48];
        *((_QWORD *)v11 - 8) = 0;
        *((_QWORD *)v11 - 7) = 0;
        v16 = *(_QWORD *)&v4[v9 - 40];
        LODWORD(v13) = *(_DWORD *)&v4[v9 - 32];
        *((_QWORD *)v11 - 6) = 0;
        *((_DWORD *)v10 - 8) = v13;
        *((_QWORD *)v10 - 5) = v16;
        *(_OWORD *)(v10 - 24) = *(_OWORD *)&v4[v9 - 24];
        *((_QWORD *)v10 - 1) = *(_QWORD *)&v4[v9 - 8];
        *((_QWORD *)v11 - 3) = 0;
        *((_QWORD *)v11 - 2) = 0;
        *((_QWORD *)v11 - 1) = 0;
        v9 -= 304;
      }
      while (&v4[v9] != v2);
      v2 = *(_BYTE **)a1;
      v17 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)a1 = &v8[v9];
      *(_QWORD *)(a1 + 8) = v8;
      for (*(_QWORD *)(a1 + 16) = v7; (_BYTE *)v17 != v2; v17 = sub_19C35CBE8(v17 - 304))
        ;
      if (v2)
        goto LABEL_9;
    }
  }
}

uint64_t sub_19C35D3C0(uint64_t a1, uint64_t a2, char a3, _QWORD *a4, unint64_t a5, unint64_t a6, std::string *a7)
{
  char v8;
  char v9;
  char *v10;
  uint64_t result;
  char *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v25;
  uint64_t v26;
  int v27;
  const void *v28;
  size_t v29;
  uint64_t v30;
  size_t v31;
  void **p_dst;
  std::__shared_weak_count *v33;
  int64_t v34;
  unint64_t v35;
  uint64_t v36;
  int v37;
  size_t v38;
  unint64_t v39;
  void **v40;
  unint64_t v41;
  size_t v42;
  void **v43;
  std::__shared_weak_count *v44;
  _BYTE *v45;
  uint64_t v46;
  unint64_t v47;
  _BYTE *v48;
  void **v49;
  uint64_t v50;
  int v51;
  const void *v52;
  size_t v53;
  std::__shared_weak_count *v54;
  uint64_t v55;
  unint64_t v56;
  size_t v57;
  unint64_t v58;
  void **v59;
  unint64_t v60;
  size_t v61;
  void **v62;
  size_t v63;
  char *v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  void **v68;
  void **v69;
  size_t v70;
  unint64_t v71;
  unint64_t v72;
  void **v73;
  unint64_t v74;
  size_t v75;
  void **v76;
  std::__shared_weak_count *v77;
  uint64_t v78;
  _BYTE *v79;
  unint64_t v80;
  _BYTE *v81;
  void **v82;
  void **v83;
  const std::string::value_type *v84;
  std::string::size_type v85;
  uint64_t v86;
  std::string::size_type v87;
  std::string *v88;
  std::string::size_type size;
  _QWORD *v90;
  std::__shared_weak_count_vtbl *v91;
  std::__shared_weak_count *v92;
  std::__shared_weak_count_vtbl *v93;
  const std::string::value_type *v94;
  std::string::size_type v95;
  uint64_t v96;
  std::string::size_type v97;
  std::string *v98;
  char *v99;
  char *v100;
  char *v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  char *v105;
  char *v106;
  char *v107;
  __int128 v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  std::string::size_type v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  const std::string::value_type *v116;
  std::string::size_type v117;
  uint64_t v118;
  std::string::size_type v119;
  std::string *v120;
  std::string::size_type v121;
  std::__shared_weak_count_vtbl *v122;
  float v123;
  char *v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  unint64_t v128;
  char v131;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  unint64_t v137;
  std::__shared_weak_count_vtbl *v138;
  void *v139;
  std::__shared_weak_count *v140;
  int64_t v141;
  void *__p;
  char *v143;
  char *v144;
  void **__dst;
  std::__shared_weak_count *v146;
  int64_t v147;
  uint64_t v148;

  v148 = *MEMORY[0x1E0C80C00];
  v136 = *(_QWORD *)(a2 + 24);
  if (*(_QWORD *)(a2 + 16) == v136)
    __assert_rtn("_prepMultiWordCandidateHypothesisQueue", "MultiWordBeamSearchPredictor.cpp", 191, "!candidateHypothesisQueue.empty()");
  v8 = a3;
  v128 = a6 - 2;
  if (a6 <= a5)
    v9 = 1;
  else
    v9 = a3;
  v131 = v9;
  v134 = (uint64_t)&a7[-1].__r_.__value_.__r.__words[2] + 7;
  do
  {
    sub_19C35CF10((uint64_t *)&__dst, a1, v8);
    __p = 0;
    v143 = 0;
    v144 = 0;
    v12 = (char *)operator new(0x18uLL);
    __p = v12;
    v144 = v12 + 24;
    v13 = v146;
    *(_QWORD *)v12 = __dst;
    *((_QWORD *)v12 + 1) = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
    }
    v16 = v146;
    *((_QWORD *)v12 + 2) = v147;
    v143 = v12 + 24;
    v17 = v136;
    if (!v16)
      goto LABEL_16;
    v18 = (unint64_t *)&v16->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
      if ((v131 & 1) != 0)
        goto LABEL_243;
    }
    else
    {
LABEL_16:
      if ((v131 & 1) != 0)
        goto LABEL_243;
    }
    v20 = *(_QWORD *)(v136 - 104) - *(_QWORD *)(v136 - 112);
    if (!v20)
      __assert_rtn("_prepMultiWordCandidateHypothesisQueue", "MultiWordBeamSearchPredictor.cpp", 201, "numTokensInContext >= 1");
    v21 = v20 >> 5;
    v22 = v128;
    v137 = v21;
    if (v128 >= v21)
      v22 = v21;
    if (v22 >= 2)
      v22 = 2;
    v135 = v22;
    if (v22)
    {
      v23 = 1;
      do
      {
        HIBYTE(v147) = 0;
        LOBYTE(__dst) = 0;
        v25 = v137 - v23;
        if (v137 < v23)
          goto LABEL_149;
        v26 = *(_QWORD *)(v17 - 112) + 32 * v25;
        v27 = *(char *)(v26 + 23);
        if (v27 >= 0)
          v28 = (const void *)(*(_QWORD *)(v17 - 112) + 32 * v25);
        else
          v28 = *(const void **)v26;
        if (v27 >= 0)
          v29 = *(unsigned __int8 *)(v26 + 23);
        else
          v29 = *(_QWORD *)(v26 + 8);
        if (v29 <= 0x16)
        {
          if (!v29)
          {
            v33 = v146;
            v34 = v147;
            v35 = HIBYTE(v147);
            goto LABEL_44;
          }
          memmove(&__dst, v28, v29);
          if (SHIBYTE(v147) < 0)
            v146 = (std::__shared_weak_count *)v29;
          else
            HIBYTE(v147) = v29 & 0x7F;
          p_dst = (void **)&__dst;
        }
        else
        {
          if (v29 - 0x7FFFFFFFFFFFFFF7 <= 0x800000000000001ELL)
            goto LABEL_259;
          v30 = 44;
          if (v29 > 0x2C)
            v30 = v29;
          v31 = (v30 | 7) + 1;
          p_dst = (void **)operator new(v31);
          memcpy(p_dst, v28, v29);
          v146 = (std::__shared_weak_count *)v29;
          v147 = v31 | 0x8000000000000000;
          __dst = p_dst;
        }
        *((_BYTE *)p_dst + v29) = 0;
        v35 = HIBYTE(v147);
        v33 = v146;
        v34 = v147;
        v17 = v136;
LABEL_44:
        v36 = (v34 & 0x7FFFFFFFFFFFFFFFLL) - 1;
        v37 = (char)v35;
        if ((v35 & 0x80u) == 0)
          v38 = 22;
        else
          v38 = v36;
        if ((v35 & 0x80u) != 0)
          v35 = (unint64_t)v33;
        if (v38 == v35)
        {
          if (v38 == 0x7FFFFFFFFFFFFFF6)
            goto LABEL_258;
          v39 = v38 + 1;
          if (v37 >= 0)
            v40 = (void **)&__dst;
          else
            v40 = __dst;
          if (v38 >= 0x3FFFFFFFFFFFFFF3)
          {
            v46 = 0x7FFFFFFFFFFFFFF6;
          }
          else
          {
            v41 = 2 * v38;
            if (v39 > 2 * v38)
              v41 = v38 + 1;
            if (v41 < 0x17)
            {
              v42 = 23;
              goto LABEL_69;
            }
            v47 = (v41 & 0xFFFFFFFFFFFFFFF8) + 8;
            v46 = v41 | 7;
            if (v46 == 23)
              v46 = v47;
          }
          v42 = v46 + 1;
LABEL_69:
          v48 = operator new(v42);
          v49 = (void **)v48;
          if (v38)
          {
            memmove(v48, v40, v38);
            *((_BYTE *)v49 + v38) = 32;
            if (v38 == 22)
              goto LABEL_74;
          }
          else
          {
            *v48 = 32;
          }
          operator delete(v40);
LABEL_74:
          v146 = (std::__shared_weak_count *)(v38 + 1);
          v147 = v42 | 0x8000000000000000;
          __dst = v49;
          v45 = (char *)v49 + v39;
          v17 = v136;
          goto LABEL_75;
        }
        v43 = __dst;
        if (v37 >= 0)
          v43 = (void **)&__dst;
        *((_BYTE *)v43 + v35) = 32;
        v44 = (std::__shared_weak_count *)(v35 + 1);
        if (SHIBYTE(v147) < 0)
          v146 = v44;
        else
          HIBYTE(v147) = v44 & 0x7F;
        v45 = (char *)v44 + (_QWORD)v43;
LABEL_75:
        *v45 = 0;
        if (v25 + 1 == v137)
          goto LABEL_149;
        v50 = *(_QWORD *)(v17 - 112) + 32 * (v25 + 1);
        v51 = *(char *)(v50 + 23);
        if (v51 >= 0)
          v52 = (const void *)(*(_QWORD *)(v17 - 112) + 32 * (v25 + 1));
        else
          v52 = *(const void **)v50;
        if (v51 >= 0)
          v53 = *(unsigned __int8 *)(v50 + 23);
        else
          v53 = *(_QWORD *)(v50 + 8);
        v54 = v146;
        v55 = (v147 & 0x7FFFFFFFFFFFFFFFLL) - 1;
        if (v147 >= 0)
          v56 = 22;
        else
          v56 = (v147 & 0x7FFFFFFFFFFFFFFFLL) - 1;
        if (v147 >= 0)
          v57 = HIBYTE(v147);
        else
          v57 = (size_t)v146;
        if (v56 - v57 < v53)
        {
          v58 = v57 + v53;
          if (0x7FFFFFFFFFFFFFF6 - v56 < v57 + v53 - v56)
LABEL_259:
            sub_19C2A1A54();
          if (v147 >= 0)
            v59 = (void **)&__dst;
          else
            v59 = __dst;
          if (v56 >= 0x3FFFFFFFFFFFFFF3)
          {
            v65 = 0x7FFFFFFFFFFFFFF6;
          }
          else
          {
            v60 = 2 * v56;
            if (v58 > 2 * v56)
              v60 = v57 + v53;
            if (v60 < 0x17)
            {
              v61 = 23;
LABEL_110:
              v68 = (void **)operator new(v61);
              v69 = v68;
              if (v57)
                memmove(v68, v59, v57);
              memcpy((char *)v69 + v57, v52, v53);
              if (v56 != 22)
                operator delete(v59);
              v146 = (std::__shared_weak_count *)(v57 + v53);
              v147 = v61 | 0x8000000000000000;
              __dst = v69;
              v64 = (char *)v69 + v58;
              goto LABEL_115;
            }
            v67 = (v60 & 0xFFFFFFFFFFFFFFF8) + 8;
            v65 = v60 | 7;
            if (v65 == 23)
              v65 = v67;
          }
          v61 = v65 + 1;
          goto LABEL_110;
        }
        if (!v53)
        {
          v66 = HIBYTE(v147);
          v17 = v136;
          goto LABEL_116;
        }
        if (v147 >= 0)
          v62 = (void **)&__dst;
        else
          v62 = __dst;
        memmove((char *)v62 + v57, v52, v53);
        v63 = v57 + v53;
        if (SHIBYTE(v147) < 0)
          v146 = (std::__shared_weak_count *)(v57 + v53);
        else
          HIBYTE(v147) = v63 & 0x7F;
        v64 = (char *)v62 + v63;
LABEL_115:
        v17 = v136;
        *v64 = 0;
        v66 = HIBYTE(v147);
        v54 = v146;
        v55 = (v147 & 0x7FFFFFFFFFFFFFFFLL) - 1;
LABEL_116:
        if ((v66 & 0x80u) == 0)
          v70 = 22;
        else
          v70 = v55;
        if ((v66 & 0x80u) == 0)
          v71 = v66;
        else
          v71 = (unint64_t)v54;
        if (v70 != v71)
        {
          v76 = __dst;
          if ((v66 & 0x80u) == 0)
            v76 = (void **)&__dst;
          *((_BYTE *)v76 + v71) = 32;
          v77 = (std::__shared_weak_count *)(v71 + 1);
          if (SHIBYTE(v147) < 0)
            v146 = v77;
          else
            HIBYTE(v147) = v77 & 0x7F;
          v79 = (char *)v77 + (_QWORD)v76;
          goto LABEL_148;
        }
        if (v70 == 0x7FFFFFFFFFFFFFF6)
LABEL_258:
          sub_19C2A1A54();
        v72 = v70 + 1;
        if ((v66 & 0x80u) == 0)
          v73 = (void **)&__dst;
        else
          v73 = __dst;
        if (v70 >= 0x3FFFFFFFFFFFFFF3)
        {
          v78 = 0x7FFFFFFFFFFFFFF6;
        }
        else
        {
          v74 = 2 * v70;
          if (v72 > 2 * v70)
            v74 = v70 + 1;
          if (v74 < 0x17)
          {
            v75 = 23;
            goto LABEL_142;
          }
          v80 = (v74 & 0xFFFFFFFFFFFFFFF8) + 8;
          v78 = v74 | 7;
          if (v78 == 23)
            v78 = v80;
        }
        v75 = v78 + 1;
LABEL_142:
        v81 = operator new(v75);
        v82 = (void **)v81;
        if (v70)
        {
          memmove(v81, v73, v70);
          *((_BYTE *)v82 + v70) = 32;
          if (v70 == 22)
            goto LABEL_147;
        }
        else
        {
          *v81 = 32;
        }
        operator delete(v73);
LABEL_147:
        v146 = (std::__shared_weak_count *)(v70 + 1);
        v147 = v75 | 0x8000000000000000;
        __dst = v82;
        v79 = (char *)v82 + v72;
        v17 = v136;
LABEL_148:
        *v79 = 0;
LABEL_149:
        if (qword_1EE41C080 != -1)
          dispatch_once(&qword_1EE41C080, &unk_1E3D3AB90);
        v83 = (void **)&__dst;
        if (v147 < 0)
          v83 = __dst;
        sub_19C34EC30("Lexicon Constrained Prediction Mode:  Looking up context phrase in lexicon: %s", (uint64_t)&v139, v83);
        if (v141 >= 0)
          v84 = (const std::string::value_type *)&v139;
        else
          v84 = (const std::string::value_type *)v139;
        if (v141 >= 0)
          v85 = HIBYTE(v141);
        else
          v85 = (std::string::size_type)v140;
        std::string::append(a7, v84, v85);
        if (SHIBYTE(a7->__r_.__value_.__r.__words[2]) < 0)
        {
          size = a7->__r_.__value_.__l.__size_;
          if (size)
          {
            v88 = (std::string *)a7->__r_.__value_.__r.__words[0];
            if (!*(_BYTE *)(a7->__r_.__value_.__r.__words[0] + size - 1))
            {
              v87 = size - 1;
              a7->__r_.__value_.__l.__size_ = v87;
              goto LABEL_166;
            }
          }
        }
        else
        {
          v86 = HIBYTE(a7->__r_.__value_.__r.__words[2]);
          if (*((_BYTE *)&a7->__r_.__value_.__s + 23) && !*(_BYTE *)(v134 + v86))
          {
            v87 = v86 - 1;
            *((_BYTE *)&a7->__r_.__value_.__s + 23) = v86 - 1;
            v88 = a7;
LABEL_166:
            v88->__r_.__value_.__s.__data_[v87] = 0;
          }
        }
        std::string::push_back(a7, 10);
        if (SHIBYTE(v141) < 0)
          operator delete(v139);
        v90 = *(_QWORD **)(v17 - 64);
        if (*(_QWORD *)(v17 - 56) - (_QWORD)v90 != 24)
          __assert_rtn("_prepMultiWordCandidateHypothesisQueue", "MultiWordBeamSearchPredictor.cpp", 218, "candidateHypothesis.cursors().size() == 1");
        (*(void (**)(std::__shared_weak_count_vtbl **__return_ptr, _QWORD, void ***))(*(_QWORD *)*v90 + 24))(&v138, *v90, &__dst);
        if (!(*((unsigned int (**)(std::__shared_weak_count_vtbl *))v138->~__shared_weak_count + 2))(v138))
        {
          if (qword_1EE41C080 != -1)
            dispatch_once(&qword_1EE41C080, &unk_1E3D3AB90);
          sub_19C34EC30("Lexicon Constrained Prediction Mode: Did not find context phrase in lexicon", (uint64_t)&v139);
          if (v141 >= 0)
            v94 = (const std::string::value_type *)&v139;
          else
            v94 = (const std::string::value_type *)v139;
          if (v141 >= 0)
            v95 = HIBYTE(v141);
          else
            v95 = (std::string::size_type)v140;
          std::string::append(a7, v94, v95);
          if (SHIBYTE(a7->__r_.__value_.__r.__words[2]) < 0)
          {
            v112 = a7->__r_.__value_.__l.__size_;
            if (!v112)
              goto LABEL_233;
            v98 = (std::string *)a7->__r_.__value_.__r.__words[0];
            if (*(_BYTE *)(a7->__r_.__value_.__r.__words[0] + v112 - 1))
              goto LABEL_233;
            v97 = v112 - 1;
            a7->__r_.__value_.__l.__size_ = v97;
          }
          else
          {
            v96 = HIBYTE(a7->__r_.__value_.__r.__words[2]);
            if (!*((_BYTE *)&a7->__r_.__value_.__s + 23) || *(_BYTE *)(v134 + v96))
              goto LABEL_233;
            v97 = v96 - 1;
            *((_BYTE *)&a7->__r_.__value_.__s + 23) = v96 - 1;
            v98 = a7;
          }
          v98->__r_.__value_.__s.__data_[v97] = 0;
          goto LABEL_233;
        }
        v91 = v138;
        v139 = v138;
        if (v138)
        {
          v92 = (std::__shared_weak_count *)operator new();
          v93 = v138;
          v92->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D39C88;
          v92->__shared_owners_ = 0;
          v92->__shared_weak_owners_ = 0;
          v92[1].__vftable = v93;
        }
        else
        {
          v92 = 0;
        }
        v138 = 0;
        v140 = v92;
        v141 = v23;
        v99 = v143;
        if (v143 < v144)
        {
          *(_QWORD *)v143 = v91;
          *((_QWORD *)v99 + 1) = v92;
          v139 = 0;
          v140 = 0;
          v100 = v99 + 24;
          *((_QWORD *)v99 + 2) = v23;
          goto LABEL_212;
        }
        v101 = (char *)__p;
        v102 = 0xAAAAAAAAAAAAAAABLL * ((v143 - (_BYTE *)__p) >> 3);
        v103 = v102 + 1;
        if (v102 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_19C2A18E8();
        if (0x5555555555555556 * ((v144 - (_BYTE *)__p) >> 3) > v103)
          v103 = 0x5555555555555556 * ((v144 - (_BYTE *)__p) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((v144 - (_BYTE *)__p) >> 3) >= 0x555555555555555)
          v104 = 0xAAAAAAAAAAAAAAALL;
        else
          v104 = v103;
        if (v104 > 0xAAAAAAAAAAAAAAALL)
          sub_19C2A143C();
        v105 = (char *)operator new(24 * v104);
        v106 = &v105[24 * v102];
        *(_QWORD *)v106 = v91;
        *((_QWORD *)v106 + 1) = v92;
        v139 = 0;
        v140 = 0;
        *((_QWORD *)v106 + 2) = v23;
        v100 = v106 + 24;
        if (v99 != v101)
        {
          v107 = v99;
          do
          {
            v108 = *(_OWORD *)(v107 - 24);
            v107 -= 24;
            *(_OWORD *)(v106 - 24) = v108;
            v106 -= 24;
            *(_QWORD *)v107 = 0;
            *((_QWORD *)v107 + 1) = 0;
            *((_QWORD *)v106 + 2) = *((_QWORD *)v107 + 2);
          }
          while (v107 != v101);
          __p = v106;
          v143 = v100;
          v144 = &v105[24 * v104];
          do
          {
            v109 = (std::__shared_weak_count *)*((_QWORD *)v99 - 2);
            if (v109)
            {
              v110 = (unint64_t *)&v109->__shared_owners_;
              do
                v111 = __ldaxr(v110);
              while (__stlxr(v111 - 1, v110));
              if (!v111)
              {
                ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
                std::__shared_weak_count::__release_weak(v109);
              }
            }
            v99 -= 24;
          }
          while (v99 != v101);
          v99 = v101;
          v17 = v136;
          if (!v101)
            goto LABEL_212;
LABEL_211:
          operator delete(v99);
          goto LABEL_212;
        }
        __p = &v105[24 * v102];
        v143 = v106 + 24;
        v144 = &v105[24 * v104];
        v17 = v136;
        if (v99)
          goto LABEL_211;
LABEL_212:
        v143 = v100;
        v113 = v140;
        if (v140)
        {
          v114 = (unint64_t *)&v140->__shared_owners_;
          do
            v115 = __ldaxr(v114);
          while (__stlxr(v115 - 1, v114));
          if (!v115)
          {
            ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
            std::__shared_weak_count::__release_weak(v113);
          }
        }
        if (qword_1EE41C080 != -1)
          dispatch_once(&qword_1EE41C080, &unk_1E3D3AB90);
        sub_19C34EC30("Lexicon Constrained Prediction Mode: Found context phrase in lexicon", (uint64_t)&v139);
        if (v141 >= 0)
          v116 = (const std::string::value_type *)&v139;
        else
          v116 = (const std::string::value_type *)v139;
        if (v141 >= 0)
          v117 = HIBYTE(v141);
        else
          v117 = (std::string::size_type)v140;
        std::string::append(a7, v116, v117);
        if (SHIBYTE(a7->__r_.__value_.__r.__words[2]) < 0)
        {
          v121 = a7->__r_.__value_.__l.__size_;
          if (!v121)
            goto LABEL_233;
          v120 = (std::string *)a7->__r_.__value_.__r.__words[0];
          if (*(_BYTE *)(a7->__r_.__value_.__r.__words[0] + v121 - 1))
            goto LABEL_233;
          v119 = v121 - 1;
          a7->__r_.__value_.__l.__size_ = v119;
        }
        else
        {
          v118 = HIBYTE(a7->__r_.__value_.__r.__words[2]);
          if (!*((_BYTE *)&a7->__r_.__value_.__s + 23) || *(_BYTE *)(v134 + v118))
            goto LABEL_233;
          v119 = v118 - 1;
          *((_BYTE *)&a7->__r_.__value_.__s + 23) = v118 - 1;
          v120 = a7;
        }
        v120->__r_.__value_.__s.__data_[v119] = 0;
LABEL_233:
        std::string::push_back(a7, 10);
        if (SHIBYTE(v141) < 0)
          operator delete(v139);
        v122 = v138;
        v138 = 0;
        if (v122)
          (*((void (**)(std::__shared_weak_count_vtbl *))v122->~__shared_weak_count + 1))(v122);
        if (SHIBYTE(v147) < 0)
          operator delete(__dst);
      }
      while (v23++ != v135);
    }
LABEL_243:
    v123 = *(float *)(v17 - 280);
    v139 = 0;
    v140 = 0;
    v141 = 0;
    sub_19C3A9F98((uint64_t)&__dst, v17 - 304, (__int128 *)(v17 - 272), v17 - 248, (uint64_t)&__p, 0, 0, (uint64_t)&v139, v123, 0.0);
    sub_19C35E950(a4, (uint64_t)&__dst);
    sub_19C35CBE8((uint64_t)&__dst);
    result = sub_19C35CBE8(*(_QWORD *)(a2 + 24) - 304);
    *(_QWORD *)(a2 + 24) = result;
    v10 = (char *)__p;
    if (__p)
    {
      v124 = v143;
      if (v143 != __p)
      {
        do
        {
          v125 = (std::__shared_weak_count *)*((_QWORD *)v124 - 2);
          if (v125)
          {
            v126 = (unint64_t *)&v125->__shared_owners_;
            do
              v127 = __ldaxr(v126);
            while (__stlxr(v127 - 1, v126));
            if (!v127)
            {
              ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
              std::__shared_weak_count::__release_weak(v125);
            }
          }
          v124 -= 24;
        }
        while (v124 != v10);
        v10 = (char *)__p;
      }
      operator delete(v10);
      result = *(_QWORD *)(a2 + 24);
    }
    v136 = result;
    v8 = a3;
  }
  while (*(_QWORD *)(a2 + 16) != result);
  if (a4[2] == a4[3])
    __assert_rtn("_prepMultiWordCandidateHypothesisQueue", "MultiWordBeamSearchPredictor.cpp", 240, "!multiWordCandidateHypothesisQueue.empty()");
  return result;
}

void sub_19C35E084(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char *__p,char *a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  char *v36;
  char *v37;
  std::__shared_weak_count *v38;
  unint64_t *p_shared_owners;
  unint64_t v40;

  sub_19C35CBE8((uint64_t)&a30);
  v36 = __p;
  if (__p)
  {
    v37 = a28;
    if (a28 != __p)
    {
      do
      {
        v38 = (std::__shared_weak_count *)*((_QWORD *)v37 - 2);
        if (v38)
        {
          p_shared_owners = (unint64_t *)&v38->__shared_owners_;
          do
            v40 = __ldaxr(p_shared_owners);
          while (__stlxr(v40 - 1, p_shared_owners));
          if (!v40)
          {
            ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
            std::__shared_weak_count::__release_weak(v38);
          }
        }
        v37 -= 24;
      }
      while (v37 != __p);
      v36 = __p;
    }
    operator delete(v36);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_19C35E1DC(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  if (a4)
  {
    if (a4 >= 0xD79435E50D7944)
      sub_19C2A18E8();
    v7 = (_QWORD *)result;
    result = (uint64_t)operator new(304 * a4);
    v8 = result;
    *v7 = result;
    v7[1] = result;
    v7[2] = result + 304 * a4;
    if (a2 != a3)
    {
      v9 = 0;
      do
      {
        result = sub_19C35CA40(v8 + v9, a2 + v9);
        v9 += 304;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v7[1] = v8;
  }
  return result;
}

void sub_19C35E29C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_19C35CCC4(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_19C35E2D8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  __int128 v38;

  v13 = *(_OWORD *)a1;
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  v14 = v3;
  v15 = v4;
  v16 = *(_OWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v18 = *(_OWORD *)(a1 + 56);
  v19 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  v20 = *(_OWORD *)(a1 + 80);
  v21 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  v22 = *(_OWORD *)(a1 + 104);
  v23 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  v24 = *(_OWORD *)(a1 + 128);
  v5 = *(_QWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  v26 = *(_OWORD *)(a1 + 152);
  v6 = *(_QWORD *)(a1 + 168);
  v25 = v5;
  v27 = v6;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  v7 = *(_OWORD *)(a1 + 192);
  v28 = *(_OWORD *)(a1 + 176);
  v29 = v7;
  v8 = *(_QWORD *)(a1 + 208);
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  v31 = *(_OWORD *)(a1 + 216);
  v9 = *(_QWORD *)(a1 + 232);
  v30 = v8;
  v32 = v9;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  v33 = *(_OWORD *)(a1 + 240);
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  v36 = *(_DWORD *)(a1 + 272);
  v10 = *(_QWORD *)(a1 + 256);
  v11 = *(_QWORD *)(a1 + 264);
  *(_QWORD *)(a1 + 256) = 0;
  v34 = v10;
  v35 = v11;
  v37 = *(_QWORD *)(a1 + 280);
  v38 = *(_OWORD *)(a1 + 288);
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  sub_19C35E4F4(a1, a2);
  sub_19C35E4F4(a2, (uint64_t)&v13);
  return sub_19C35CBE8((uint64_t)&v13);
}

void **sub_19C35E418(void **a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  v2 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = v2;
    if ((void *)v3 != v2)
    {
      do
        v3 = sub_19C35CBE8(v3 - 304);
      while ((void *)v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t *sub_19C35E470(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 16);
    if (v3)
    {
      v4 = *(_QWORD *)(v2 + 24);
      v5 = *(void **)(v2 + 16);
      if (v4 != v3)
      {
        do
          v4 = sub_19C35CBE8(v4 - 304);
        while (v4 != v3);
        v5 = *(void **)(v2 + 16);
      }
      *(_QWORD *)(v2 + 24) = v3;
      operator delete(v5);
    }
    MEMORY[0x1A1AD355C](v2, 0x1020C402564D6C4);
  }
  return a1;
}

uint64_t sub_19C35E4F4(uint64_t a1, uint64_t a2)
{
  void *v4;
  void **v5;
  __int128 v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;

  v4 = *(void **)a1;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = v4;
    operator delete(v4);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v5 = (void **)(a1 + 32);
  if (*(char *)(a1 + 55) < 0)
    operator delete(*v5);
  v6 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)v5 = v6;
  *(_BYTE *)(a2 + 55) = 0;
  *(_BYTE *)(a2 + 32) = 0;
  sub_19C35E680(a1 + 56, a2 + 56);
  v7 = (void **)(a1 + 240);
  v8 = *(_QWORD *)(a1 + 240);
  if (v8)
  {
    v9 = *(_QWORD *)(a1 + 248);
    v10 = *(void **)(a1 + 240);
    if (v9 != v8)
    {
      do
      {
        v11 = *(std::__shared_weak_count **)(v9 - 16);
        if (v11)
        {
          p_shared_owners = (unint64_t *)&v11->__shared_owners_;
          do
            v13 = __ldaxr(p_shared_owners);
          while (__stlxr(v13 - 1, p_shared_owners));
          if (!v13)
          {
            ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
            std::__shared_weak_count::__release_weak(v11);
          }
        }
        v9 -= 24;
      }
      while (v9 != v8);
      v10 = *v7;
    }
    *(_QWORD *)(a1 + 248) = v8;
    operator delete(v10);
    *v7 = 0;
    *(_QWORD *)(a1 + 248) = 0;
    *(_QWORD *)(a1 + 256) = 0;
  }
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a2 + 248) = 0;
  *(_QWORD *)(a2 + 256) = 0;
  *(_QWORD *)(a2 + 240) = 0;
  v14 = *(_QWORD *)(a2 + 264);
  *(_DWORD *)(a1 + 272) = *(_DWORD *)(a2 + 272);
  *(_QWORD *)(a1 + 264) = v14;
  v15 = *(void **)(a1 + 280);
  if (v15)
  {
    *(_QWORD *)(a1 + 288) = v15;
    operator delete(v15);
    *(_QWORD *)(a1 + 280) = 0;
    *(_QWORD *)(a1 + 288) = 0;
    *(_QWORD *)(a1 + 296) = 0;
  }
  v16 = *(_QWORD *)(a2 + 288);
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
  *(_QWORD *)(a1 + 288) = v16;
  *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 296);
  *(_QWORD *)(a2 + 280) = 0;
  *(_QWORD *)(a2 + 288) = 0;
  *(_QWORD *)(a2 + 296) = 0;
  return a1;
}

uint64_t sub_19C35E680(uint64_t a1, uint64_t a2)
{
  void **v4;
  void **v5;
  void **v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void **v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  void **v17;
  void **v18;
  void **v19;
  void *v20;
  void **v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;

  v4 = *(void ***)a1;
  if (*(_QWORD *)a1)
  {
    v5 = *(void ***)(a1 + 8);
    v6 = *(void ***)a1;
    if (v5 != v4)
    {
      do
      {
        if (*((char *)v5 - 9) < 0)
          operator delete(*(v5 - 4));
        v5 -= 4;
      }
      while (v5 != v4);
      v6 = *(void ***)a1;
    }
    *(_QWORD *)(a1 + 8) = v4;
    operator delete(v6);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v7 = (void **)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 24);
  if (v8)
  {
    v9 = *(_QWORD *)(a1 + 32);
    v10 = *(void **)(a1 + 24);
    if (v9 != v8)
    {
      do
      {
        if (*(char *)(v9 - 9) < 0)
          operator delete(*(void **)(v9 - 32));
        v9 -= 32;
      }
      while (v9 != v8);
      v10 = *v7;
    }
    *(_QWORD *)(a1 + 32) = v8;
    operator delete(v10);
    *v7 = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  v11 = (void **)(a1 + 48);
  v12 = *(_QWORD *)(a1 + 48);
  if (v12)
  {
    v13 = *(_QWORD *)(a1 + 56);
    v14 = *(void **)(a1 + 48);
    if (v13 != v12)
    {
      do
      {
        if (*(char *)(v13 - 9) < 0)
          operator delete(*(void **)(v13 - 32));
        v13 -= 32;
      }
      while (v13 != v12);
      v14 = *v11;
    }
    *(_QWORD *)(a1 + 56) = v12;
    operator delete(v14);
    *v11 = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
  }
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  v15 = *(void **)(a1 + 72);
  if (v15)
  {
    *(_QWORD *)(a1 + 80) = v15;
    operator delete(v15);
    *(_QWORD *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = 0;
  }
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  v16 = *(void **)(a1 + 96);
  if (v16)
  {
    *(_QWORD *)(a1 + 104) = v16;
    operator delete(v16);
    *(_QWORD *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 112) = 0;
  }
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  v17 = (void **)(a1 + 136);
  v18 = *(void ***)(a1 + 136);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  if (v18)
  {
    v19 = *(void ***)(a1 + 144);
    v20 = v18;
    if (v19 != v18)
    {
      do
      {
        if (*((char *)v19 - 9) < 0)
          operator delete(*(v19 - 4));
        v19 -= 4;
      }
      while (v19 != v18);
      v20 = *v17;
    }
    *(_QWORD *)(a1 + 144) = v18;
    operator delete(v20);
    *v17 = 0;
    *(_QWORD *)(a1 + 144) = 0;
    *(_QWORD *)(a1 + 152) = 0;
  }
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a2 + 136) = 0;
  *(_QWORD *)(a2 + 144) = 0;
  *(_QWORD *)(a2 + 152) = 0;
  v21 = (void **)(a1 + 160);
  v22 = *(_QWORD *)(a1 + 160);
  if (v22)
  {
    v23 = *(_QWORD *)(a1 + 168);
    v24 = *(void **)(a1 + 160);
    if (v23 != v22)
    {
      do
      {
        if (*(char *)(v23 - 9) < 0)
          operator delete(*(void **)(v23 - 32));
        v23 -= 32;
      }
      while (v23 != v22);
      v24 = *v21;
    }
    *(_QWORD *)(a1 + 168) = v22;
    operator delete(v24);
    *v21 = 0;
    *(_QWORD *)(a1 + 168) = 0;
    *(_QWORD *)(a1 + 176) = 0;
  }
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a2 + 160) = 0;
  *(_QWORD *)(a2 + 168) = 0;
  *(_QWORD *)(a2 + 176) = 0;
  return a1;
}

void sub_19C35E950(_QWORD *a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  int64_t v13;
  double v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  __int128 v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  uint64_t v34;
  _BOOL4 v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  char *v55;
  __int128 v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;

  v2 = a2;
  v3 = a1[2];
  v4 = a1[3];
  v5 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v4 - v3) >> 4);
  if (v5 >= a1[1])
  {
    if (v3 == v4)
      __assert_rtn("worst", "PriorityQueue.h", 55, "!m_predictions.empty()");
    v14 = *(double *)(a2 + 184) + *(float *)(a2 + 24);
    if (v14 >= *(double *)(v3 + 184) + *(float *)(v3 + 24))
    {
      v15 = a1[2];
      do
      {
        v16 = v5 >> 1;
        v17 = v15 + 304 * (v5 >> 1);
        v18 = *(double *)(v17 + 184) + *(float *)(v17 + 24);
        v19 = v17 + 304;
        v5 += ~(v5 >> 1);
        if (v14 < v18)
          v5 = v16;
        else
          v15 = v19;
      }
      while (v5);
      v20 = v3 + 304;
      if (v3 + 304 != v15)
      {
        while (1)
        {
          v21 = v3 + 304;
          sub_19C35E2D8(v3, v3 + 304);
          if (v3 + 608 == v15)
            break;
          if (v21 == v20)
            v20 = v3 + 608;
          v3 += 304;
        }
        if (v21 != v20)
        {
          v34 = v20;
          while (1)
          {
            sub_19C35E2D8(v21, v20);
            v20 += 304;
            v35 = v21 + 304 == v34;
            if (v20 == v15)
            {
              if (v21 + 304 == v34)
                break;
              v20 = v34 + 304;
              v21 += 608;
              while (1)
              {
                sub_19C35E2D8(v21 - 304, v34);
                v35 = v21 == v34;
                if (v20 != v15)
                  break;
                v36 = v21 == v34;
                v21 += 304;
                if (v36)
                  goto LABEL_49;
              }
            }
            else
            {
              v21 += 304;
            }
            if (v35)
              v34 = v20;
          }
        }
      }
LABEL_49:
      v37 = v15 - 304;
LABEL_62:
      sub_19C35F4F8(v37, v2);
    }
  }
  else
  {
    if (v4 == v3)
    {
      v13 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v4 - v3) >> 4);
    }
    else
    {
      v7 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v4 - v3) >> 4);
      v8 = a1[2];
      do
      {
        v9 = v7 >> 1;
        v10 = v8 + 304 * (v7 >> 1);
        v11 = *(double *)(v10 + 184) + *(float *)(v10 + 24);
        v12 = v10 + 304;
        v7 += ~(v7 >> 1);
        if (*(double *)(a2 + 184) + *(float *)(a2 + 24) < v11)
          v7 = v9;
        else
          v8 = v12;
      }
      while (v7);
      v13 = 0x86BCA1AF286BCA1BLL * ((v8 - v3) >> 4);
    }
    v22 = (char *)(v3 + 304 * v13);
    v23 = a1[4];
    if (v4 < v23)
    {
      if (v22 == (char *)v4)
      {
        sub_19C35CA40(a1[3], a2);
        a1[3] = v4 + 304;
        return;
      }
      v24 = v22 + 304;
      v25 = v4 - 304;
      if (v4 < 0x130)
      {
        v27 = v4;
      }
      else
      {
        v26 = v4 - 304;
        v27 = v4;
        do
        {
          *(_QWORD *)v27 = 0;
          *(_QWORD *)(v27 + 8) = 0;
          *(_QWORD *)(v27 + 16) = 0;
          *(_OWORD *)v27 = *(_OWORD *)v26;
          *(_QWORD *)(v27 + 16) = *(_QWORD *)(v26 + 16);
          *(_QWORD *)v26 = 0;
          *(_QWORD *)(v26 + 8) = 0;
          *(_QWORD *)(v26 + 16) = 0;
          *(_QWORD *)(v27 + 24) = *(_QWORD *)(v26 + 24);
          v28 = *(_OWORD *)(v26 + 32);
          *(_QWORD *)(v27 + 48) = *(_QWORD *)(v26 + 48);
          *(_OWORD *)(v27 + 32) = v28;
          *(_QWORD *)(v26 + 40) = 0;
          *(_QWORD *)(v26 + 48) = 0;
          *(_QWORD *)(v26 + 32) = 0;
          *(_QWORD *)(v27 + 56) = 0;
          *(_QWORD *)(v27 + 64) = 0;
          *(_QWORD *)(v27 + 72) = 0;
          *(_OWORD *)(v27 + 56) = *(_OWORD *)(v26 + 56);
          *(_QWORD *)(v27 + 72) = *(_QWORD *)(v26 + 72);
          *(_QWORD *)(v26 + 56) = 0;
          *(_QWORD *)(v26 + 64) = 0;
          *(_QWORD *)(v26 + 72) = 0;
          *(_QWORD *)(v27 + 80) = 0;
          *(_QWORD *)(v27 + 88) = 0;
          *(_QWORD *)(v27 + 96) = 0;
          *(_OWORD *)(v27 + 80) = *(_OWORD *)(v26 + 80);
          *(_QWORD *)(v27 + 96) = *(_QWORD *)(v26 + 96);
          *(_QWORD *)(v26 + 80) = 0;
          *(_QWORD *)(v26 + 88) = 0;
          *(_QWORD *)(v26 + 96) = 0;
          *(_QWORD *)(v27 + 104) = 0;
          *(_QWORD *)(v27 + 112) = 0;
          *(_QWORD *)(v27 + 120) = 0;
          *(_OWORD *)(v27 + 104) = *(_OWORD *)(v26 + 104);
          *(_QWORD *)(v27 + 120) = *(_QWORD *)(v26 + 120);
          *(_QWORD *)(v26 + 104) = 0;
          *(_QWORD *)(v26 + 112) = 0;
          *(_QWORD *)(v26 + 120) = 0;
          *(_QWORD *)(v27 + 128) = 0;
          *(_QWORD *)(v27 + 136) = 0;
          *(_QWORD *)(v27 + 144) = 0;
          *(_OWORD *)(v27 + 128) = *(_OWORD *)(v26 + 128);
          *(_QWORD *)(v27 + 144) = *(_QWORD *)(v26 + 144);
          *(_QWORD *)(v26 + 128) = 0;
          *(_QWORD *)(v26 + 136) = 0;
          *(_QWORD *)(v26 + 144) = 0;
          *(_QWORD *)(v27 + 152) = 0;
          *(_QWORD *)(v27 + 160) = 0;
          *(_QWORD *)(v27 + 168) = 0;
          *(_OWORD *)(v27 + 152) = *(_OWORD *)(v26 + 152);
          *(_QWORD *)(v27 + 168) = *(_QWORD *)(v26 + 168);
          *(_QWORD *)(v26 + 160) = 0;
          *(_QWORD *)(v26 + 168) = 0;
          *(_QWORD *)(v26 + 152) = 0;
          *(_OWORD *)(v27 + 176) = *(_OWORD *)(v26 + 176);
          *(_QWORD *)(v27 + 200) = 0;
          *(_QWORD *)(v27 + 208) = 0;
          *(_QWORD *)(v27 + 192) = 0;
          *(_OWORD *)(v27 + 192) = *(_OWORD *)(v26 + 192);
          *(_QWORD *)(v27 + 208) = *(_QWORD *)(v26 + 208);
          *(_QWORD *)(v26 + 192) = 0;
          *(_QWORD *)(v26 + 200) = 0;
          *(_QWORD *)(v26 + 208) = 0;
          *(_QWORD *)(v27 + 216) = 0;
          *(_QWORD *)(v27 + 224) = 0;
          *(_QWORD *)(v27 + 232) = 0;
          *(_OWORD *)(v27 + 216) = *(_OWORD *)(v26 + 216);
          *(_QWORD *)(v27 + 232) = *(_QWORD *)(v26 + 232);
          *(_QWORD *)(v26 + 216) = 0;
          *(_QWORD *)(v26 + 224) = 0;
          *(_QWORD *)(v26 + 232) = 0;
          *(_QWORD *)(v27 + 240) = 0;
          *(_QWORD *)(v27 + 248) = 0;
          *(_QWORD *)(v27 + 256) = 0;
          *(_OWORD *)(v27 + 240) = *(_OWORD *)(v26 + 240);
          *(_QWORD *)(v27 + 256) = *(_QWORD *)(v26 + 256);
          *(_QWORD *)(v26 + 240) = 0;
          *(_QWORD *)(v26 + 248) = 0;
          *(_QWORD *)(v26 + 256) = 0;
          v29 = *(_QWORD *)(v26 + 264);
          *(_DWORD *)(v27 + 272) = *(_DWORD *)(v26 + 272);
          *(_QWORD *)(v27 + 264) = v29;
          *(_QWORD *)(v27 + 288) = 0;
          *(_QWORD *)(v27 + 296) = 0;
          *(_QWORD *)(v27 + 280) = 0;
          *(_QWORD *)(v27 + 280) = *(_QWORD *)(v26 + 280);
          *(_QWORD *)(v27 + 288) = *(_QWORD *)(v26 + 288);
          *(_QWORD *)(v27 + 296) = *(_QWORD *)(v26 + 296);
          *(_QWORD *)(v26 + 280) = 0;
          *(_QWORD *)(v26 + 288) = 0;
          *(_QWORD *)(v26 + 296) = 0;
          v27 += 304;
          v26 += 304;
        }
        while (v26 < v4);
      }
      a1[3] = v27;
      if ((char *)v4 != v24)
      {
        v39 = 16 * ((uint64_t)(v4 - (_QWORD)v24) >> 4);
        v40 = v3 + 304 * v13 - 304;
        do
        {
          v25 = sub_19C35E4F4(v25, v40 + v39) - 304;
          v39 -= 304;
        }
        while (v39);
      }
      if ((unint64_t)v22 <= v2)
        v2 += 304 * (a1[3] > v2);
      v37 = (uint64_t)v22;
      goto LABEL_62;
    }
    v30 = v5 + 1;
    if (v30 > 0xD79435E50D7943)
      sub_19C2A18E8();
    v31 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v23 - v3) >> 4);
    if (2 * v31 > v30)
      v30 = 2 * v31;
    if (v31 >= 0x6BCA1AF286BCA1)
      v32 = 0xD79435E50D7943;
    else
      v32 = v30;
    if (v32)
    {
      if (v32 > 0xD79435E50D7943)
        sub_19C2A143C();
      v33 = (char *)operator new(304 * v32);
    }
    else
    {
      v33 = 0;
    }
    v38 = (uint64_t)&v33[304 * v13];
    v59 = v38;
    v61 = v38;
    v63 = &v33[304 * v32];
    if (v13 == v32)
    {
      if (v13 < 1)
      {
        if (v13)
          v41 = 2 * v13;
        else
          v41 = 1;
        if (v41 > 0xD79435E50D7943)
          sub_19C2A143C();
        v42 = (char *)operator new(304 * v41);
        v38 = (uint64_t)&v42[304 * (v41 >> 2)];
        v59 = v38;
        v61 = v38;
        v63 = &v42[304 * v41];
        if (v33)
          operator delete(v33);
      }
      else
      {
        v38 -= 304 * ((v13 + 1) >> 1);
        v59 = v38;
        v61 = v38;
      }
    }
    sub_19C35CA40(v38, v2);
    v43 = v59;
    v44 = v61 + 304;
    v62 = v61 + 304;
    v45 = (char *)a1[2];
    if (v45 != v22)
    {
      v46 = 0;
      do
      {
        v47 = v59 + v46;
        v48 = (_QWORD *)(v59 + v46 - 304);
        v49 = &v22[v46];
        v50 = (uint64_t)&v22[v46 - 304];
        *(_QWORD *)(v59 + v46 - 296) = 0;
        *v48 = 0;
        v48[2] = 0;
        *(_OWORD *)v48 = *(_OWORD *)v50;
        *(_QWORD *)(v59 + v46 - 288) = *(_QWORD *)&v22[v46 - 288];
        *(_QWORD *)&v22[v46 - 296] = 0;
        *(_QWORD *)v50 = 0;
        *(_QWORD *)(v50 + 16) = 0;
        *(_QWORD *)(v59 + v46 - 280) = *(_QWORD *)&v22[v46 - 280];
        v51 = (uint64_t)&v22[v46 - 272];
        v52 = *(_OWORD *)v51;
        *(_QWORD *)(v47 - 256) = *(_QWORD *)&v22[v46 - 256];
        *(_OWORD *)(v59 + v46 - 272) = v52;
        *((_QWORD *)v49 - 32) = 0;
        *(_QWORD *)v51 = 0;
        *(_QWORD *)(v51 + 8) = 0;
        *(_QWORD *)(v47 - 248) = 0;
        *(_QWORD *)(v47 - 240) = 0;
        *(_QWORD *)(v47 - 232) = 0;
        *(_OWORD *)(v47 - 248) = *(_OWORD *)&v22[v46 - 248];
        *(_QWORD *)(v47 - 232) = *(_QWORD *)&v22[v46 - 232];
        *((_QWORD *)v49 - 31) = 0;
        *((_QWORD *)v49 - 30) = 0;
        *((_QWORD *)v49 - 29) = 0;
        *(_QWORD *)(v47 - 224) = 0;
        *(_QWORD *)(v47 - 216) = 0;
        *(_QWORD *)(v47 - 208) = 0;
        *(_OWORD *)(v47 - 224) = *(_OWORD *)&v22[v46 - 224];
        *(_QWORD *)(v47 - 208) = *(_QWORD *)&v22[v46 - 208];
        *((_QWORD *)v49 - 28) = 0;
        *((_QWORD *)v49 - 27) = 0;
        *((_QWORD *)v49 - 26) = 0;
        *(_QWORD *)(v47 - 200) = 0;
        *(_QWORD *)(v47 - 192) = 0;
        *(_QWORD *)(v47 - 184) = 0;
        *(_OWORD *)(v47 - 200) = *(_OWORD *)&v22[v46 - 200];
        *(_QWORD *)(v47 - 184) = *(_QWORD *)&v22[v46 - 184];
        *((_QWORD *)v49 - 25) = 0;
        *((_QWORD *)v49 - 24) = 0;
        *((_QWORD *)v49 - 23) = 0;
        *(_QWORD *)(v47 - 176) = 0;
        *(_QWORD *)(v47 - 168) = 0;
        *(_QWORD *)(v47 - 160) = 0;
        *(_OWORD *)(v47 - 176) = *(_OWORD *)&v22[v46 - 176];
        *(_QWORD *)(v47 - 160) = *(_QWORD *)&v22[v46 - 160];
        *((_QWORD *)v49 - 22) = 0;
        *((_QWORD *)v49 - 21) = 0;
        *((_QWORD *)v49 - 20) = 0;
        *(_QWORD *)(v47 - 152) = 0;
        *(_QWORD *)(v47 - 144) = 0;
        *(_QWORD *)(v47 - 136) = 0;
        *(_OWORD *)(v47 - 152) = *(_OWORD *)&v22[v46 - 152];
        *(_QWORD *)(v47 - 136) = *(_QWORD *)&v22[v46 - 136];
        *((_QWORD *)v49 - 18) = 0;
        *((_QWORD *)v49 - 17) = 0;
        v53 = *(_OWORD *)&v22[v46 - 128];
        *((_QWORD *)v49 - 19) = 0;
        *(_OWORD *)(v47 - 128) = v53;
        *(_QWORD *)(v47 - 104) = 0;
        *(_QWORD *)(v47 - 96) = 0;
        *(_QWORD *)(v47 - 112) = 0;
        *(_OWORD *)(v47 - 112) = *(_OWORD *)&v22[v46 - 112];
        *(_QWORD *)(v47 - 96) = *(_QWORD *)&v22[v46 - 96];
        *((_QWORD *)v49 - 14) = 0;
        *((_QWORD *)v49 - 13) = 0;
        *((_QWORD *)v49 - 12) = 0;
        *(_QWORD *)(v47 - 88) = 0;
        *(_QWORD *)(v47 - 80) = 0;
        *(_QWORD *)(v47 - 72) = 0;
        *(_OWORD *)(v47 - 88) = *(_OWORD *)&v22[v46 - 88];
        *(_QWORD *)(v47 - 72) = *(_QWORD *)&v22[v46 - 72];
        *((_QWORD *)v49 - 11) = 0;
        *((_QWORD *)v49 - 10) = 0;
        *((_QWORD *)v49 - 9) = 0;
        *(_QWORD *)(v47 - 64) = 0;
        *(_QWORD *)(v47 - 56) = 0;
        *(_QWORD *)(v47 - 48) = 0;
        *(_OWORD *)(v47 - 64) = *(_OWORD *)&v22[v46 - 64];
        *(_QWORD *)(v47 - 48) = *(_QWORD *)&v22[v46 - 48];
        *((_QWORD *)v49 - 8) = 0;
        *((_QWORD *)v49 - 7) = 0;
        *((_QWORD *)v49 - 6) = 0;
        v54 = *(_QWORD *)&v22[v46 - 40];
        *(_DWORD *)(v47 - 32) = *(_DWORD *)&v22[v46 - 32];
        *(_QWORD *)(v47 - 16) = 0;
        *(_QWORD *)(v47 - 8) = 0;
        *(_QWORD *)(v47 - 40) = v54;
        *(_QWORD *)(v47 - 24) = 0;
        *(_OWORD *)(v47 - 24) = *(_OWORD *)&v22[v46 - 24];
        *(_QWORD *)(v47 - 8) = *(_QWORD *)&v22[v46 - 8];
        *((_QWORD *)v49 - 3) = 0;
        *((_QWORD *)v49 - 2) = 0;
        *((_QWORD *)v49 - 1) = 0;
        v46 -= 304;
      }
      while (&v22[v46] != v45);
      v43 = v59 + v46;
      v44 = v62;
    }
    v60 = v43;
    v55 = (char *)a1[3];
    if (v55 != v22)
    {
      do
      {
        *(_QWORD *)v44 = 0;
        *(_QWORD *)(v44 + 8) = 0;
        *(_QWORD *)(v44 + 16) = 0;
        *(_OWORD *)v44 = *(_OWORD *)v22;
        *(_QWORD *)(v44 + 16) = *((_QWORD *)v22 + 2);
        *(_QWORD *)v22 = 0;
        *((_QWORD *)v22 + 1) = 0;
        *((_QWORD *)v22 + 2) = 0;
        *(_QWORD *)(v44 + 24) = *((_QWORD *)v22 + 3);
        v56 = *((_OWORD *)v22 + 2);
        *(_QWORD *)(v44 + 48) = *((_QWORD *)v22 + 6);
        *(_OWORD *)(v44 + 32) = v56;
        *((_QWORD *)v22 + 5) = 0;
        *((_QWORD *)v22 + 6) = 0;
        *((_QWORD *)v22 + 4) = 0;
        *(_QWORD *)(v44 + 56) = 0;
        *(_QWORD *)(v44 + 64) = 0;
        *(_QWORD *)(v44 + 72) = 0;
        *(_OWORD *)(v44 + 56) = *(_OWORD *)(v22 + 56);
        *(_QWORD *)(v44 + 72) = *((_QWORD *)v22 + 9);
        *((_QWORD *)v22 + 7) = 0;
        *((_QWORD *)v22 + 8) = 0;
        *((_QWORD *)v22 + 9) = 0;
        *(_QWORD *)(v44 + 80) = 0;
        *(_QWORD *)(v44 + 88) = 0;
        *(_QWORD *)(v44 + 96) = 0;
        *(_OWORD *)(v44 + 80) = *((_OWORD *)v22 + 5);
        *(_QWORD *)(v44 + 96) = *((_QWORD *)v22 + 12);
        *((_QWORD *)v22 + 10) = 0;
        *((_QWORD *)v22 + 11) = 0;
        *((_QWORD *)v22 + 12) = 0;
        *(_QWORD *)(v44 + 104) = 0;
        *(_QWORD *)(v44 + 112) = 0;
        *(_QWORD *)(v44 + 120) = 0;
        *(_OWORD *)(v44 + 104) = *(_OWORD *)(v22 + 104);
        *(_QWORD *)(v44 + 120) = *((_QWORD *)v22 + 15);
        *((_QWORD *)v22 + 13) = 0;
        *((_QWORD *)v22 + 14) = 0;
        *((_QWORD *)v22 + 15) = 0;
        *(_QWORD *)(v44 + 128) = 0;
        *(_QWORD *)(v44 + 136) = 0;
        *(_QWORD *)(v44 + 144) = 0;
        *(_OWORD *)(v44 + 128) = *((_OWORD *)v22 + 8);
        *(_QWORD *)(v44 + 144) = *((_QWORD *)v22 + 18);
        *((_QWORD *)v22 + 16) = 0;
        *((_QWORD *)v22 + 17) = 0;
        *((_QWORD *)v22 + 18) = 0;
        *(_QWORD *)(v44 + 152) = 0;
        *(_QWORD *)(v44 + 160) = 0;
        *(_QWORD *)(v44 + 168) = 0;
        *(_OWORD *)(v44 + 152) = *(_OWORD *)(v22 + 152);
        *(_QWORD *)(v44 + 168) = *((_QWORD *)v22 + 21);
        *((_QWORD *)v22 + 20) = 0;
        *((_QWORD *)v22 + 21) = 0;
        *((_QWORD *)v22 + 19) = 0;
        *(_OWORD *)(v44 + 176) = *((_OWORD *)v22 + 11);
        *(_QWORD *)(v44 + 200) = 0;
        *(_QWORD *)(v44 + 208) = 0;
        *(_QWORD *)(v44 + 192) = 0;
        *(_OWORD *)(v44 + 192) = *((_OWORD *)v22 + 12);
        *(_QWORD *)(v44 + 208) = *((_QWORD *)v22 + 26);
        *((_QWORD *)v22 + 24) = 0;
        *((_QWORD *)v22 + 25) = 0;
        *((_QWORD *)v22 + 26) = 0;
        *(_QWORD *)(v44 + 216) = 0;
        *(_QWORD *)(v44 + 224) = 0;
        *(_QWORD *)(v44 + 232) = 0;
        *(_OWORD *)(v44 + 216) = *(_OWORD *)(v22 + 216);
        *(_QWORD *)(v44 + 232) = *((_QWORD *)v22 + 29);
        *((_QWORD *)v22 + 27) = 0;
        *((_QWORD *)v22 + 28) = 0;
        *((_QWORD *)v22 + 29) = 0;
        *(_QWORD *)(v44 + 240) = 0;
        *(_QWORD *)(v44 + 248) = 0;
        *(_QWORD *)(v44 + 256) = 0;
        *(_OWORD *)(v44 + 240) = *((_OWORD *)v22 + 15);
        *(_QWORD *)(v44 + 256) = *((_QWORD *)v22 + 32);
        *((_QWORD *)v22 + 30) = 0;
        *((_QWORD *)v22 + 31) = 0;
        *((_QWORD *)v22 + 32) = 0;
        v57 = *((_QWORD *)v22 + 33);
        *(_DWORD *)(v44 + 272) = *((_DWORD *)v22 + 68);
        *(_QWORD *)(v44 + 264) = v57;
        *(_QWORD *)(v44 + 288) = 0;
        *(_QWORD *)(v44 + 296) = 0;
        *(_QWORD *)(v44 + 280) = 0;
        *(_QWORD *)(v44 + 280) = *((_QWORD *)v22 + 35);
        *(_QWORD *)(v44 + 288) = *((_QWORD *)v22 + 36);
        *(_QWORD *)(v44 + 296) = *((_QWORD *)v22 + 37);
        *((_QWORD *)v22 + 35) = 0;
        *((_QWORD *)v22 + 36) = 0;
        *((_QWORD *)v22 + 37) = 0;
        v44 += 304;
        v22 += 304;
      }
      while (v22 != v55);
      v43 = v60;
      v22 = (char *)a1[3];
    }
    v58 = (char *)a1[2];
    a1[2] = v43;
    a1[3] = v44;
    a1[4] = v63;
    if (v22 != v58)
    {
      do
      {
        v22 -= 304;
        sub_19C35CBE8((uint64_t)v22);
      }
      while (v22 != v58);
      v22 = v58;
    }
    if (v22)
      operator delete(v22);
  }
}

void sub_19C35F2E8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 24) = v2;
  _Unwind_Resume(a1);
}

void sub_19C35F2F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C360240((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_19C35F304(char **a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v5;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  __int128 v14;
  char *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;

  v2 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v3 = v2 + 1;
  if (v2 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_19C2A18E8();
  if (0x5555555555555556 * ((a1[2] - *a1) >> 3) > v3)
    v3 = 0x5555555555555556 * ((a1[2] - *a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= 0x555555555555555)
    v5 = 0xAAAAAAAAAAAAAAALL;
  else
    v5 = v3;
  if (v5 > 0xAAAAAAAAAAAAAAALL)
    sub_19C2A143C();
  v7 = 24 * v5;
  v8 = (char *)operator new(24 * v5);
  v9 = &v8[24 * v2];
  v10 = &v8[v7];
  *(_OWORD *)v9 = *(_OWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *((_QWORD *)v9 + 2) = *(_QWORD *)(a2 + 16);
  v11 = v9 + 24;
  v12 = *a1;
  v13 = a1[1];
  if (v13 == *a1)
  {
    *a1 = v9;
    a1[1] = v11;
    a1[2] = v10;
  }
  else
  {
    do
    {
      v14 = *(_OWORD *)(v13 - 24);
      v13 -= 24;
      *(_OWORD *)(v9 - 24) = v14;
      v9 -= 24;
      *(_QWORD *)v13 = 0;
      *((_QWORD *)v13 + 1) = 0;
      *((_QWORD *)v9 + 2) = *((_QWORD *)v13 + 2);
    }
    while (v13 != v12);
    v13 = *a1;
    v15 = a1[1];
    *a1 = v9;
    a1[1] = v11;
    a1[2] = v10;
    while (v15 != v13)
    {
      v16 = (std::__shared_weak_count *)*((_QWORD *)v15 - 2);
      if (v16)
      {
        p_shared_owners = (unint64_t *)&v16->__shared_owners_;
        do
          v18 = __ldaxr(p_shared_owners);
        while (__stlxr(v18 - 1, p_shared_owners));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      v15 -= 24;
    }
  }
  if (v13)
    operator delete(v13);
  return v11;
}

void sub_19C35F464(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C35F488(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_19C35F4A0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN2LM13LexiconCursorEEE"
    || ((v3 & (unint64_t)"NSt3__114default_deleteIN2LM13LexiconCursorEEE" & 0x8000000000000000) != 0) != __OFSUB__(v3, "NSt3__114default_deleteIN2LM13LexiconCursorEEE")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN2LM13LexiconCursorEEE" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_19C35F4F8(uint64_t a1, uint64_t a2)
{
  void **v4;
  char v5;
  __int128 v6;
  void *v7;
  size_t v8;
  uint64_t *v9;
  void **v10;
  uint64_t *v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  void *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;

  if (a1 == a2)
  {
    sub_19C35FA6C(a1 + 56, (char **)(a1 + 56));
  }
  else
  {
    sub_19C35F928((_QWORD *)a1, *(char **)a2, *(char **)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    v4 = (void **)(a1 + 32);
    v5 = *(_BYTE *)(a2 + 55);
    if (*(char *)(a1 + 55) < 0)
    {
      if (v5 >= 0)
        v7 = (void *)(a2 + 32);
      else
        v7 = *(void **)(a2 + 32);
      if (v5 >= 0)
        v8 = *(unsigned __int8 *)(a2 + 55);
      else
        v8 = *(_QWORD *)(a2 + 40);
      sub_19C2E54A8(v4, v7, v8);
    }
    else if ((*(_BYTE *)(a2 + 55) & 0x80) != 0)
    {
      sub_19C2E53E4(v4, *(void **)(a2 + 32), *(_QWORD *)(a2 + 40));
    }
    else
    {
      v6 = *(_OWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      *(_OWORD *)v4 = v6;
    }
    sub_19C35FA6C(a1 + 56, (char **)(a2 + 56));
    v10 = (void **)(a1 + 240);
    v9 = *(uint64_t **)(a1 + 240);
    v12 = *(uint64_t **)(a2 + 240);
    v11 = *(uint64_t **)(a2 + 248);
    v13 = 0xAAAAAAAAAAAAAAABLL * (v11 - v12);
    v14 = *(_QWORD *)(a1 + 256);
    if (0xAAAAAAAAAAAAAAABLL * ((v14 - (uint64_t)v9) >> 3) >= v13)
    {
      v20 = *(uint64_t **)(a1 + 248);
      if (0xAAAAAAAAAAAAAAABLL * (v20 - v9) >= v13)
      {
        if (v12 != v11)
        {
          do
          {
            v30 = *v12;
            v29 = v12[1];
            if (v29)
            {
              v31 = (unint64_t *)(v29 + 8);
              do
                v32 = __ldxr(v31);
              while (__stxr(v32 + 1, v31));
            }
            v33 = (std::__shared_weak_count *)v9[1];
            *v9 = v30;
            v9[1] = v29;
            if (v33)
            {
              p_shared_owners = (unint64_t *)&v33->__shared_owners_;
              do
                v35 = __ldaxr(p_shared_owners);
              while (__stlxr(v35 - 1, p_shared_owners));
              if (!v35)
              {
                ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
                std::__shared_weak_count::__release_weak(v33);
              }
            }
            v9[2] = v12[2];
            v12 += 3;
            v9 += 3;
          }
          while (v12 != v11);
          v20 = *(uint64_t **)(a1 + 248);
        }
        while (v20 != v9)
        {
          v48 = (std::__shared_weak_count *)*(v20 - 2);
          if (v48)
          {
            v49 = (unint64_t *)&v48->__shared_owners_;
            do
              v50 = __ldaxr(v49);
            while (__stlxr(v50 - 1, v49));
            if (!v50)
            {
              ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
              std::__shared_weak_count::__release_weak(v48);
            }
          }
          v20 -= 3;
        }
        *(_QWORD *)(a1 + 248) = v9;
      }
      else
      {
        v21 = &v12[v20 - v9];
        if (v20 != v9)
        {
          do
          {
            v23 = *v12;
            v22 = v12[1];
            if (v22)
            {
              v24 = (unint64_t *)(v22 + 8);
              do
                v25 = __ldxr(v24);
              while (__stxr(v25 + 1, v24));
            }
            v26 = (std::__shared_weak_count *)v9[1];
            *v9 = v23;
            v9[1] = v22;
            if (v26)
            {
              v27 = (unint64_t *)&v26->__shared_owners_;
              do
                v28 = __ldaxr(v27);
              while (__stlxr(v28 - 1, v27));
              if (!v28)
              {
                ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
                std::__shared_weak_count::__release_weak(v26);
              }
            }
            v9[2] = v12[2];
            v12 += 3;
            v9 += 3;
          }
          while (v12 != v21);
          v9 = *(uint64_t **)(a1 + 248);
        }
        v44 = v9;
        if (v21 != v11)
        {
          v44 = v9;
          do
          {
            v45 = v21[1];
            *v44 = *v21;
            v44[1] = v45;
            if (v45)
            {
              v46 = (unint64_t *)(v45 + 8);
              do
                v47 = __ldxr(v46);
              while (__stxr(v47 + 1, v46));
            }
            v44[2] = v21[2];
            v21 += 3;
            v44 += 3;
          }
          while (v21 != v11);
        }
        *(_QWORD *)(a1 + 248) = v44;
      }
    }
    else
    {
      if (v9)
      {
        v15 = *(uint64_t **)(a1 + 248);
        v16 = *(void **)(a1 + 240);
        if (v15 != v9)
        {
          do
          {
            v17 = (std::__shared_weak_count *)*(v15 - 2);
            if (v17)
            {
              v18 = (unint64_t *)&v17->__shared_owners_;
              do
                v19 = __ldaxr(v18);
              while (__stlxr(v19 - 1, v18));
              if (!v19)
              {
                ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
                std::__shared_weak_count::__release_weak(v17);
              }
            }
            v15 -= 3;
          }
          while (v15 != v9);
          v16 = *v10;
        }
        *(_QWORD *)(a1 + 248) = v9;
        operator delete(v16);
        v14 = 0;
        *v10 = 0;
        *(_QWORD *)(a1 + 248) = 0;
        *(_QWORD *)(a1 + 256) = 0;
      }
      if (v13 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_84;
      v36 = 0xAAAAAAAAAAAAAAABLL * (v14 >> 3);
      v37 = 2 * v36;
      if (2 * v36 <= v13)
        v37 = 0xAAAAAAAAAAAAAAABLL * (v11 - v12);
      v38 = v36 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v37;
      if (v38 > 0xAAAAAAAAAAAAAAALL)
LABEL_84:
        sub_19C2A18E8();
      v39 = 3 * v38;
      v40 = operator new(24 * v38);
      *(_QWORD *)(a1 + 240) = v40;
      *(_QWORD *)(a1 + 248) = v40;
      *(_QWORD *)(a1 + 256) = &v40[v39];
      while (v12 != v11)
      {
        v41 = v12[1];
        *v40 = *v12;
        v40[1] = v41;
        if (v41)
        {
          v42 = (unint64_t *)(v41 + 8);
          do
            v43 = __ldxr(v42);
          while (__stxr(v43 + 1, v42));
        }
        v40[2] = v12[2];
        v12 += 3;
        v40 += 3;
      }
      *(_QWORD *)(a1 + 248) = v40;
    }
    v51 = *(_QWORD *)(a2 + 264);
    *(_DWORD *)(a1 + 272) = *(_DWORD *)(a2 + 272);
    *(_QWORD *)(a1 + 264) = v51;
    sub_19C35F928((_QWORD *)(a1 + 280), *(char **)(a2 + 280), *(char **)(a2 + 288), (uint64_t)(*(_QWORD *)(a2 + 288) - *(_QWORD *)(a2 + 280)) >> 2);
  }
  return a1;
}

_QWORD *sub_19C35F928(_QWORD *result, char *__src, char *a3, size_t __sz)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  size_t v14;
  void **v15;
  _BYTE *v16;
  unint64_t v17;
  char *v18;
  void *v19;

  v6 = __src;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (__sz > (v8 - *result) >> 2)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz >> 62)
      goto LABEL_22;
    v10 = v8 >> 1;
    if (v8 >> 1 <= __sz)
      v10 = __sz;
    v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL;
    v12 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v11)
      v12 = v10;
    if (v12 >> 62)
LABEL_22:
      sub_19C2A18E8();
    v13 = 4 * v12;
    result = operator new(4 * v12);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + v13;
    v14 = a3 - v6;
    if (v14)
      result = memcpy(result, v6, v14);
    v15 = (void **)(v7 + 1);
    goto LABEL_21;
  }
  v15 = (void **)(result + 1);
  v16 = (_BYTE *)result[1];
  v17 = (v16 - v9) >> 2;
  if (v17 >= __sz)
  {
    v14 = a3 - __src;
    if (a3 == __src)
      goto LABEL_21;
    v19 = (void *)*result;
LABEL_20:
    result = memmove(v19, __src, v14);
    goto LABEL_21;
  }
  v18 = &__src[4 * v17];
  if (v16 != v9)
  {
    result = memmove((void *)*result, __src, v16 - v9);
    v9 = (char *)*v15;
  }
  v14 = a3 - v18;
  if (v14)
  {
    v19 = v9;
    __src = v18;
    goto LABEL_20;
  }
LABEL_21:
  *v15 = &v9[v14];
  return result;
}

uint64_t sub_19C35FA6C(uint64_t a1, char **a2)
{
  char *v4;
  void **v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  void **v9;
  void **v10;
  void **v11;
  void **v12;
  unint64_t v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  size_t v18;
  void **v19;
  char *v20;
  char v21;
  __int128 v22;
  unint64_t v23;
  char *v24;
  size_t v25;
  void **v26;
  char *v27;
  char v28;
  __int128 v29;
  uint64_t v30;
  BOOL v31;
  unint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  __int128 v36;
  char *v37;
  char *v38;
  void **v39;
  uint64_t v40;
  __int128 v41;
  void **v42;
  char *v43;

  if ((char **)a1 != a2)
  {
    v5 = (void **)*a2;
    v4 = a2[1];
    v6 = v4 - *a2;
    v7 = v6 >> 5;
    v8 = *(_QWORD *)(a1 + 16);
    v9 = *(void ***)a1;
    if (v6 >> 5 <= (unint64_t)((v8 - *(_QWORD *)a1) >> 5))
    {
      v12 = *(void ***)(a1 + 8);
      v13 = ((char *)v12 - (char *)v9) >> 5;
      if (v13 >= v7)
      {
        if (v5 != (void **)v4)
        {
          v23 = 0;
          do
          {
            v26 = &v9[v23];
            v27 = (char *)&v5[v23];
            if (v5 != v9)
            {
              v28 = v27[23];
              if (*((char *)v26 + 23) < 0)
              {
                if (v28 >= 0)
                  v24 = (char *)&v5[v23];
                else
                  v24 = (char *)v5[v23];
                if (v28 >= 0)
                  v25 = v27[23];
                else
                  v25 = (size_t)v5[v23 + 1];
                v26 = sub_19C2E54A8(v26, v24, v25);
              }
              else if (v27[23] < 0)
              {
                v26 = (void **)sub_19C2E53E4(v26, v5[v23], (size_t)v5[v23 + 1]);
              }
              else
              {
                v29 = *(_OWORD *)v27;
                v26[2] = (void *)*((_QWORD *)v27 + 2);
                *(_OWORD *)v26 = v29;
              }
            }
            *((_DWORD *)v26 + 6) = *((_DWORD *)v27 + 6);
            v23 += 4;
          }
          while (&v5[v23] != (void **)v4);
          v9 = (void **)((char *)v9 + v23 * 8);
          v12 = *(void ***)(a1 + 8);
        }
        while (v12 != v9)
        {
          if (*((char *)v12 - 9) < 0)
            operator delete(*(v12 - 4));
          v12 -= 4;
        }
        *(_QWORD *)(a1 + 8) = v9;
      }
      else
      {
        v14 = (char *)&v5[4 * v13];
        if (v12 != v9)
        {
          v15 = 0;
          v16 = 32 * v13;
          do
          {
            v19 = &v9[v15 / 8];
            v20 = (char *)&v5[v15 / 8];
            if (v5 != v9)
            {
              v21 = v20[23];
              if (*((char *)v19 + 23) < 0)
              {
                if (v21 >= 0)
                  v17 = (char *)&v5[v15 / 8];
                else
                  v17 = (char *)v5[v15 / 8];
                if (v21 >= 0)
                  v18 = v20[23];
                else
                  v18 = (size_t)v5[v15 / 8 + 1];
                v19 = sub_19C2E54A8(v19, v17, v18);
              }
              else if (v20[23] < 0)
              {
                v19 = (void **)sub_19C2E53E4(v19, v5[v15 / 8], (size_t)v5[v15 / 8 + 1]);
              }
              else
              {
                v22 = *(_OWORD *)v20;
                v19[2] = (void *)*((_QWORD *)v20 + 2);
                *(_OWORD *)v19 = v22;
              }
            }
            *((_DWORD *)v19 + 6) = *((_DWORD *)v20 + 6);
            v15 += 32;
          }
          while (v16 != v15);
          v9 = *(void ***)(a1 + 8);
        }
        v39 = v9;
        if (v14 != v4)
        {
          v40 = 0;
          do
          {
            v42 = &v9[v40];
            v43 = &v14[v40 * 8];
            if (v14[v40 * 8 + 23] < 0)
            {
              sub_19C2B5238(&v9[v40], *(void **)v43, *((_QWORD *)v43 + 1));
            }
            else
            {
              v41 = *(_OWORD *)v43;
              v42[2] = (void *)*((_QWORD *)v43 + 2);
              *(_OWORD *)v42 = v41;
            }
            LODWORD(v9[v40 + 3]) = *(_DWORD *)&v14[v40 * 8 + 24];
            v40 += 4;
          }
          while (&v14[v40 * 8] != v4);
          v39 = &v9[v40];
        }
        *(_QWORD *)(a1 + 8) = v39;
      }
    }
    else
    {
      if (v9)
      {
        v10 = *(void ***)(a1 + 8);
        v11 = *(void ***)a1;
        if (v10 != v9)
        {
          do
          {
            if (*((char *)v10 - 9) < 0)
              operator delete(*(v10 - 4));
            v10 -= 4;
          }
          while (v10 != v9);
          v11 = *(void ***)a1;
        }
        *(_QWORD *)(a1 + 8) = v9;
        operator delete(v11);
        v8 = 0;
        *(_QWORD *)a1 = 0;
        *(_QWORD *)(a1 + 8) = 0;
        *(_QWORD *)(a1 + 16) = 0;
      }
      if (v6 < 0)
        goto LABEL_73;
      v30 = v8 >> 4;
      if (v8 >> 4 <= v7)
        v30 = v6 >> 5;
      v31 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0;
      v32 = 0x7FFFFFFFFFFFFFFLL;
      if (!v31)
        v32 = v30;
      if (v32 >> 59)
LABEL_73:
        sub_19C2A18E8();
      v33 = 32 * v32;
      v34 = operator new(32 * v32);
      *(_QWORD *)a1 = v34;
      *(_QWORD *)(a1 + 8) = v34;
      *(_QWORD *)(a1 + 16) = &v34[v33];
      if (v5 != (void **)v4)
      {
        v35 = 0;
        do
        {
          v37 = &v34[v35 * 8];
          v38 = (char *)&v5[v35];
          if (SHIBYTE(v5[v35 + 2]) < 0)
          {
            sub_19C2B5238(&v34[v35 * 8], *(void **)v38, *((_QWORD *)v38 + 1));
          }
          else
          {
            v36 = *(_OWORD *)v38;
            *((_QWORD *)v37 + 2) = *((_QWORD *)v38 + 2);
            *(_OWORD *)v37 = v36;
          }
          *(_DWORD *)&v34[v35 * 8 + 24] = v5[v35 + 3];
          v35 += 4;
        }
        while (&v5[v35] != (void **)v4);
        v34 += v35 * 8;
      }
      *(_QWORD *)(a1 + 8) = v34;
    }
    sub_19C35FEA0((void ***)(a1 + 24), (void **)a2[3], a2[4], (a2[4] - a2[3]) >> 5);
    sub_19C35FEA0((void ***)(a1 + 48), (void **)a2[6], a2[7], (a2[7] - a2[6]) >> 5);
    sub_19C35F928((_QWORD *)(a1 + 72), a2[9], a2[10], (a2[10] - a2[9]) >> 2);
    sub_19C35F928((_QWORD *)(a1 + 96), a2[12], a2[13], (a2[13] - a2[12]) >> 2);
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 15);
    sub_19C35FEA0((void ***)(a1 + 136), (void **)a2[17], a2[18], (a2[18] - a2[17]) >> 5);
    sub_19C35FEA0((void ***)(a1 + 160), (void **)a2[20], a2[21], (a2[21] - a2[20]) >> 5);
  }
  return a1;
}

void sub_19C35FEA0(void ***a1, void **a2, char *a3, unint64_t a4)
{
  uint64_t v8;
  void **v9;
  void **v10;
  void **v11;
  void **v12;
  unint64_t v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  size_t v18;
  void **v19;
  char *v20;
  char v21;
  __int128 v22;
  unint64_t v23;
  char *v24;
  size_t v25;
  void **v26;
  char *v27;
  char v28;
  __int128 v29;
  uint64_t v30;
  BOOL v31;
  unint64_t v32;
  uint64_t v33;
  void **v34;
  uint64_t v35;
  void **v36;
  char *v37;
  void **v38;
  uint64_t v39;
  __int128 v40;
  void **v41;
  char *v42;

  v8 = (uint64_t)a1[2];
  v9 = *a1;
  if (a4 <= (v8 - (uint64_t)*a1) >> 5)
  {
    v12 = a1[1];
    v13 = ((char *)v12 - (char *)v9) >> 5;
    if (v13 >= a4)
    {
      if (a2 != (void **)a3)
      {
        v23 = 0;
        do
        {
          v26 = &v9[v23];
          v27 = (char *)&a2[v23];
          if (a2 != v9)
          {
            v28 = v27[23];
            if (*((char *)v26 + 23) < 0)
            {
              if (v28 >= 0)
                v24 = (char *)&a2[v23];
              else
                v24 = (char *)a2[v23];
              if (v28 >= 0)
                v25 = v27[23];
              else
                v25 = (size_t)a2[v23 + 1];
              v26 = sub_19C2E54A8(v26, v24, v25);
            }
            else if (v27[23] < 0)
            {
              v26 = (void **)sub_19C2E53E4(v26, a2[v23], (size_t)a2[v23 + 1]);
            }
            else
            {
              v29 = *(_OWORD *)v27;
              v26[2] = (void *)*((_QWORD *)v27 + 2);
              *(_OWORD *)v26 = v29;
            }
          }
          *((_DWORD *)v26 + 6) = *((_DWORD *)v27 + 6);
          v23 += 4;
        }
        while (&a2[v23] != (void **)a3);
        v9 = (void **)((char *)v9 + v23 * 8);
        v12 = a1[1];
      }
      while (v12 != v9)
      {
        if (*((char *)v12 - 9) < 0)
          operator delete(*(v12 - 4));
        v12 -= 4;
      }
      a1[1] = v9;
    }
    else
    {
      v14 = (char *)&a2[4 * v13];
      if (v12 != v9)
      {
        v15 = 0;
        v16 = 32 * v13;
        do
        {
          v19 = &v9[v15 / 8];
          v20 = (char *)&a2[v15 / 8];
          if (a2 != v9)
          {
            v21 = v20[23];
            if (*((char *)v19 + 23) < 0)
            {
              if (v21 >= 0)
                v17 = (char *)&a2[v15 / 8];
              else
                v17 = (char *)a2[v15 / 8];
              if (v21 >= 0)
                v18 = v20[23];
              else
                v18 = (size_t)a2[v15 / 8 + 1];
              v19 = sub_19C2E54A8(v19, v17, v18);
            }
            else if (v20[23] < 0)
            {
              v19 = (void **)sub_19C2E53E4(v19, a2[v15 / 8], (size_t)a2[v15 / 8 + 1]);
            }
            else
            {
              v22 = *(_OWORD *)v20;
              v19[2] = (void *)*((_QWORD *)v20 + 2);
              *(_OWORD *)v19 = v22;
            }
          }
          *((_DWORD *)v19 + 6) = *((_DWORD *)v20 + 6);
          v15 += 32;
        }
        while (v16 != v15);
        v9 = a1[1];
      }
      v38 = v9;
      if (v14 != a3)
      {
        v39 = 0;
        do
        {
          v41 = &v9[v39];
          v42 = &v14[v39 * 8];
          if (v14[v39 * 8 + 23] < 0)
          {
            sub_19C2B5238(&v9[v39], *(void **)v42, *((_QWORD *)v42 + 1));
          }
          else
          {
            v40 = *(_OWORD *)v42;
            v41[2] = (void *)*((_QWORD *)v42 + 2);
            *(_OWORD *)v41 = v40;
          }
          LODWORD(v9[v39 + 3]) = *(_DWORD *)&v14[v39 * 8 + 24];
          v39 += 4;
        }
        while (&v14[v39 * 8] != a3);
        v38 = &v9[v39];
      }
      a1[1] = v38;
    }
  }
  else
  {
    if (v9)
    {
      v10 = a1[1];
      v11 = *a1;
      if (v10 != v9)
      {
        do
        {
          if (*((char *)v10 - 9) < 0)
            operator delete(*(v10 - 4));
          v10 -= 4;
        }
        while (v10 != v9);
        v11 = *a1;
      }
      a1[1] = v9;
      operator delete(v11);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 59)
      goto LABEL_70;
    v30 = v8 >> 4;
    if (v8 >> 4 <= a4)
      v30 = a4;
    v31 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0;
    v32 = 0x7FFFFFFFFFFFFFFLL;
    if (!v31)
      v32 = v30;
    if (v32 >> 59)
LABEL_70:
      sub_19C2A18E8();
    v33 = 4 * v32;
    v34 = (void **)operator new(32 * v32);
    *a1 = v34;
    a1[1] = v34;
    a1[2] = &v34[v33];
    if (a2 != (void **)a3)
    {
      v35 = 0;
      do
      {
        v36 = &v34[v35];
        v37 = (char *)&a2[v35];
        if (SHIBYTE(a2[v35 + 2]) < 0)
        {
          sub_19C2B5238(&v34[v35], *(void **)v37, *((_QWORD *)v37 + 1));
        }
        else
        {
          *(_OWORD *)v36 = *(_OWORD *)v37;
          v36[2] = (void *)*((_QWORD *)v37 + 2);
        }
        LODWORD(v34[v35 + 3]) = a2[v35 + 3];
        v35 += 4;
      }
      while (&a2[v35] != (void **)a3);
      v34 = (void **)((char *)v34 + v35 * 8);
    }
    a1[1] = v34;
  }
}

uint64_t sub_19C360240(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 304;
    sub_19C35CBE8(i - 304);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

os_log_t sub_19C360290()
{
  os_log_t result;

  result = os_log_create("com.apple.LanguageModeling", "InlineCompletionHypothesis");
  qword_1EE41C078 = (uint64_t)result;
  return result;
}

void sub_19C3602BC(void **a1, __int128 *a2)
{
  char *v4;
  char *v5;
  __int128 v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  void **v16;
  uint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;
  __int128 v21;
  void **v22;

  v4 = (char *)a1[1];
  v5 = (char *)a1[2];
  if (v4 >= v5)
  {
    v8 = 0x84BDA12F684BDA13 * ((v4 - (_BYTE *)*a1) >> 3);
    v9 = v8 + 1;
    if (v8 + 1 > 0x12F684BDA12F684)
      sub_19C2A18E8();
    v10 = 0x84BDA12F684BDA13 * ((v5 - (_BYTE *)*a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x97B425ED097B42)
      v9 = 0x12F684BDA12F684;
    if (v9 > 0x12F684BDA12F684)
      sub_19C2A143C();
    v11 = 216 * v9;
    v12 = (char *)operator new(216 * v9);
    v13 = &v12[216 * v8];
    *(_OWORD *)v13 = *a2;
    v14 = &v12[v11];
    *((_QWORD *)v13 + 2) = *((_QWORD *)a2 + 2);
    *(_QWORD *)a2 = 0;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *((_DWORD *)v13 + 6) = *((_DWORD *)a2 + 6);
    *((_OWORD *)v13 + 2) = a2[2];
    *((_QWORD *)v13 + 6) = *((_QWORD *)a2 + 6);
    *((_QWORD *)a2 + 4) = 0;
    *((_QWORD *)a2 + 5) = 0;
    *((_QWORD *)v13 + 9) = 0;
    *(_OWORD *)(v13 + 56) = *(__int128 *)((char *)a2 + 56);
    *((_QWORD *)v13 + 9) = *((_QWORD *)a2 + 9);
    *((_QWORD *)a2 + 6) = 0;
    *((_QWORD *)a2 + 7) = 0;
    *((_QWORD *)a2 + 8) = 0;
    *((_QWORD *)a2 + 9) = 0;
    *((_QWORD *)v13 + 12) = 0;
    *((_OWORD *)v13 + 5) = a2[5];
    *((_QWORD *)v13 + 12) = *((_QWORD *)a2 + 12);
    *((_QWORD *)a2 + 10) = 0;
    *((_QWORD *)a2 + 11) = 0;
    *((_QWORD *)v13 + 15) = 0;
    *(_OWORD *)(v13 + 104) = *(__int128 *)((char *)a2 + 104);
    *((_QWORD *)v13 + 15) = *((_QWORD *)a2 + 15);
    *((_QWORD *)a2 + 12) = 0;
    *((_QWORD *)a2 + 13) = 0;
    *((_QWORD *)a2 + 14) = 0;
    *((_QWORD *)a2 + 15) = 0;
    *((_QWORD *)v13 + 18) = 0;
    *((_OWORD *)v13 + 8) = a2[8];
    *((_QWORD *)v13 + 18) = *((_QWORD *)a2 + 18);
    *((_QWORD *)a2 + 16) = 0;
    *((_QWORD *)a2 + 17) = 0;
    *((_QWORD *)a2 + 18) = 0;
    *(_OWORD *)(v13 + 152) = *(__int128 *)((char *)a2 + 152);
    *((_QWORD *)v13 + 23) = 0;
    *(_OWORD *)(v13 + 168) = *(__int128 *)((char *)a2 + 168);
    *((_QWORD *)v13 + 23) = *((_QWORD *)a2 + 23);
    *((_QWORD *)a2 + 21) = 0;
    *((_QWORD *)a2 + 22) = 0;
    *((_QWORD *)v13 + 26) = 0;
    *((_OWORD *)v13 + 12) = a2[12];
    *((_QWORD *)v13 + 26) = *((_QWORD *)a2 + 26);
    *((_QWORD *)a2 + 23) = 0;
    *((_QWORD *)a2 + 24) = 0;
    *((_QWORD *)a2 + 25) = 0;
    *((_QWORD *)a2 + 26) = 0;
    v7 = v13 + 216;
    v15 = (char *)*a1;
    v16 = (void **)a1[1];
    if (v16 == *a1)
    {
      *a1 = v13;
      a1[1] = v7;
      a1[2] = v14;
    }
    else
    {
      v17 = 0;
      do
      {
        v18 = (char *)&v16[v17];
        v19 = &v13[v17 * 8];
        v20 = *(_OWORD *)&v16[v17 - 27];
        *((_QWORD *)v19 - 25) = v16[v17 - 25];
        *(_OWORD *)(v19 - 216) = v20;
        *((_QWORD *)v18 - 26) = 0;
        *((_QWORD *)v18 - 25) = 0;
        *((_QWORD *)v18 - 27) = 0;
        LODWORD(v20) = v16[v17 - 24];
        *((_QWORD *)v19 - 22) = 0;
        *((_QWORD *)v19 - 21) = 0;
        *((_QWORD *)v19 - 23) = 0;
        *((_DWORD *)v19 - 48) = v20;
        *(_OWORD *)(v19 - 184) = *(_OWORD *)&v16[v17 - 23];
        *((_QWORD *)v19 - 21) = v16[v17 - 21];
        *((_QWORD *)v18 - 23) = 0;
        *((_QWORD *)v18 - 22) = 0;
        *((_QWORD *)v18 - 21) = 0;
        *((_QWORD *)v19 - 20) = 0;
        *((_QWORD *)v19 - 19) = 0;
        *((_QWORD *)v19 - 18) = 0;
        *((_OWORD *)v19 - 10) = *(_OWORD *)&v16[v17 - 20];
        *((_QWORD *)v19 - 18) = v16[v17 - 18];
        *((_QWORD *)v18 - 20) = 0;
        *((_QWORD *)v18 - 19) = 0;
        *((_QWORD *)v18 - 18) = 0;
        *((_QWORD *)v19 - 17) = 0;
        *((_QWORD *)v19 - 16) = 0;
        *((_QWORD *)v19 - 15) = 0;
        *(_OWORD *)(v19 - 136) = *(_OWORD *)&v16[v17 - 17];
        *((_QWORD *)v19 - 15) = v16[v17 - 15];
        *((_QWORD *)v18 - 17) = 0;
        *((_QWORD *)v18 - 16) = 0;
        *((_QWORD *)v18 - 15) = 0;
        *((_QWORD *)v19 - 14) = 0;
        *((_QWORD *)v19 - 13) = 0;
        *((_QWORD *)v19 - 12) = 0;
        *((_OWORD *)v19 - 7) = *(_OWORD *)&v16[v17 - 14];
        *((_QWORD *)v19 - 12) = v16[v17 - 12];
        *((_QWORD *)v18 - 14) = 0;
        *((_QWORD *)v18 - 13) = 0;
        *((_QWORD *)v18 - 12) = 0;
        *((_QWORD *)v19 - 11) = 0;
        *((_QWORD *)v19 - 10) = 0;
        *((_QWORD *)v19 - 9) = 0;
        *(_OWORD *)(v19 - 88) = *(_OWORD *)&v16[v17 - 11];
        *((_QWORD *)v19 - 9) = v16[v17 - 9];
        *((_QWORD *)v18 - 10) = 0;
        *((_QWORD *)v18 - 9) = 0;
        v21 = *(_OWORD *)&v16[v17 - 8];
        *((_QWORD *)v18 - 11) = 0;
        *((_OWORD *)v19 - 4) = v21;
        *((_QWORD *)v19 - 5) = 0;
        *((_QWORD *)v19 - 4) = 0;
        *((_QWORD *)v19 - 6) = 0;
        *((_OWORD *)v19 - 3) = *(_OWORD *)&v16[v17 - 6];
        *((_QWORD *)v19 - 4) = v16[v17 - 4];
        *((_QWORD *)v18 - 6) = 0;
        *((_QWORD *)v18 - 5) = 0;
        *((_QWORD *)v18 - 4) = 0;
        *((_QWORD *)v19 - 3) = 0;
        *((_QWORD *)v19 - 2) = 0;
        *((_QWORD *)v19 - 1) = 0;
        *(_OWORD *)(v19 - 24) = *(_OWORD *)&v16[v17 - 3];
        *((_QWORD *)v19 - 1) = v16[v17 - 1];
        *((_QWORD *)v18 - 3) = 0;
        *((_QWORD *)v18 - 2) = 0;
        *((_QWORD *)v18 - 1) = 0;
        v17 -= 27;
      }
      while (&v16[v17] != (void **)v15);
      v16 = (void **)*a1;
      v22 = (void **)a1[1];
      *a1 = &v13[v17 * 8];
      a1[1] = v7;
      a1[2] = v14;
      while (v22 != v16)
      {
        sub_19C2E25C8(v22 - 23);
        if (*((char *)v22 - 193) < 0)
          operator delete(*(v22 - 27));
        v22 -= 27;
      }
    }
    if (v16)
      operator delete(v16);
  }
  else
  {
    v6 = *a2;
    *((_QWORD *)v4 + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v4 = v6;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    *((_DWORD *)v4 + 6) = *((_DWORD *)a2 + 6);
    *((_QWORD *)v4 + 5) = 0;
    *((_QWORD *)v4 + 6) = 0;
    *((_QWORD *)v4 + 4) = 0;
    *((_OWORD *)v4 + 2) = a2[2];
    *((_QWORD *)v4 + 6) = *((_QWORD *)a2 + 6);
    *((_QWORD *)a2 + 4) = 0;
    *((_QWORD *)a2 + 5) = 0;
    *((_QWORD *)a2 + 6) = 0;
    *((_QWORD *)v4 + 7) = 0;
    *((_QWORD *)v4 + 8) = 0;
    *((_QWORD *)v4 + 9) = 0;
    *(_OWORD *)(v4 + 56) = *(__int128 *)((char *)a2 + 56);
    *((_QWORD *)v4 + 9) = *((_QWORD *)a2 + 9);
    *((_QWORD *)a2 + 7) = 0;
    *((_QWORD *)a2 + 8) = 0;
    *((_QWORD *)a2 + 9) = 0;
    *((_QWORD *)v4 + 10) = 0;
    *((_QWORD *)v4 + 11) = 0;
    *((_QWORD *)v4 + 12) = 0;
    *((_OWORD *)v4 + 5) = a2[5];
    *((_QWORD *)v4 + 12) = *((_QWORD *)a2 + 12);
    *((_QWORD *)a2 + 10) = 0;
    *((_QWORD *)a2 + 11) = 0;
    *((_QWORD *)a2 + 12) = 0;
    *((_QWORD *)v4 + 13) = 0;
    *((_QWORD *)v4 + 14) = 0;
    *((_QWORD *)v4 + 15) = 0;
    *(_OWORD *)(v4 + 104) = *(__int128 *)((char *)a2 + 104);
    *((_QWORD *)v4 + 15) = *((_QWORD *)a2 + 15);
    *((_QWORD *)a2 + 13) = 0;
    *((_QWORD *)a2 + 14) = 0;
    *((_QWORD *)a2 + 15) = 0;
    *((_QWORD *)v4 + 16) = 0;
    *((_QWORD *)v4 + 17) = 0;
    *((_QWORD *)v4 + 18) = 0;
    *((_OWORD *)v4 + 8) = a2[8];
    *((_QWORD *)v4 + 18) = *((_QWORD *)a2 + 18);
    *((_QWORD *)a2 + 17) = 0;
    *((_QWORD *)a2 + 18) = 0;
    *((_QWORD *)a2 + 16) = 0;
    *(_OWORD *)(v4 + 152) = *(__int128 *)((char *)a2 + 152);
    *((_QWORD *)v4 + 22) = 0;
    *((_QWORD *)v4 + 23) = 0;
    *((_QWORD *)v4 + 21) = 0;
    *(_OWORD *)(v4 + 168) = *(__int128 *)((char *)a2 + 168);
    *((_QWORD *)v4 + 23) = *((_QWORD *)a2 + 23);
    *((_QWORD *)a2 + 21) = 0;
    *((_QWORD *)a2 + 22) = 0;
    *((_QWORD *)a2 + 23) = 0;
    *((_QWORD *)v4 + 24) = 0;
    *((_QWORD *)v4 + 25) = 0;
    *((_QWORD *)v4 + 26) = 0;
    *((_OWORD *)v4 + 12) = a2[12];
    *((_QWORD *)v4 + 26) = *((_QWORD *)a2 + 26);
    *((_QWORD *)a2 + 24) = 0;
    *((_QWORD *)a2 + 25) = 0;
    *((_QWORD *)a2 + 26) = 0;
    v7 = v4 + 216;
  }
  a1[1] = v7;
}

uint64_t sub_19C360700(uint64_t a1)
{
  sub_19C2E25C8((void **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_19C360738(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t *a4, std::string *a5)
{
  void **v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  const void **v20;
  int v21;
  size_t v22;
  unint64_t v23;
  void **p_dst;
  uint64_t v25;
  uint64_t v26;
  const void *v27;
  int v28;
  void **v29;
  void **v30;
  size_t v31;
  unint64_t v32;
  size_t v33;
  unint64_t v34;
  void *v35;
  size_t v36;
  unint64_t v37;
  char *v38;
  size_t v39;
  char *v40;
  unint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  size_t v45;
  int v46;
  size_t v47;
  int v48;
  size_t v49;
  unint64_t v50;
  char *p_p;
  const void *v52;
  char *v53;
  void **v54;
  uint64_t v55;
  const UInt8 *v56;
  CFIndex v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  int v64;
  uint64_t *v65;
  void **v66;
  void *v67;
  const std::string::value_type *v68;
  std::string::size_type v69;
  uint64_t v70;
  std::string::size_type v71;
  std::string *v72;
  std::string::size_type size;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  void *exception;
  uint64_t v79;
  uint64_t v80;
  char v81;
  std::string *v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  void **v87;
  unint64_t v88;
  void *__src;
  void *__p;
  CFIndex v92;
  int64_t v93;
  void *v94;
  size_t v95;
  int64_t v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  void *v99[2];
  unsigned __int8 v100;
  void **v101;
  CFStringRef v102;
  uint64_t v103;
  void **__dst;
  std::__shared_weak_count *v105;
  int64_t v106;
  unsigned __int8 v107;
  _BYTE v108[24];
  _BYTE *v109;
  uint64_t v110;

  v110 = *MEMORY[0x1E0C80C00];
  v8 = *(void ***)(a1 + 72);
  v85 = a1;
  v9 = *(std::__shared_weak_count **)(a1 + 80);
  __dst = v8;
  v105 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  (*((void (**)(void **__return_ptr, void **, _QWORD, uint64_t))*v8 + 4))(v99, v8, *a2, (uint64_t)(a2[1] - *a2) >> 2);
  if (v9)
  {
    v12 = (unint64_t *)&v9->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  sub_19C35CF10(&v97, v85, 0);
  v81 = 0;
  v14 = 0;
  v15 = (uint64_t)(a2[25] - a2[24]) >> 5;
  v16 = a3 - a2[33];
  if (v16 >= v15)
    v16 = (uint64_t)(a2[25] - a2[24]) >> 5;
  if (v16 >= 2)
    v16 = 2;
  v84 = v16;
  v17 = *MEMORY[0x1E0D437E8];
  v79 = (uint64_t)&a5[-1].__r_.__value_.__r.__words[2] + 7;
  v80 = 32 * v15;
  v83 = a5;
  v88 = (uint64_t)(a2[25] - a2[24]) >> 5;
  while (v14 <= v84)
  {
    v86 = v14;
    if (!v14)
    {
      v45 = 0;
      HIBYTE(v96) = 0;
      LOBYTE(v94) = 0;
      goto LABEL_80;
    }
    v18 = v15 - v14;
    if (*(_DWORD *)(a2[24] + 32 * (v15 - v14) + 24) == 1)
      break;
    HIBYTE(v96) = 0;
    LOBYTE(v94) = 0;
    if (v14 - 1 >= v15)
    {
      v45 = 0;
      goto LABEL_80;
    }
    v19 = v80 - 32 * v14;
    do
    {
      v20 = (const void **)(a2[24] + v19);
      v21 = *((char *)v20 + 23);
      if (v21 >= 0)
        v22 = *((unsigned __int8 *)v20 + 23);
      else
        v22 = (size_t)v20[1];
      v23 = v22 + 1;
      if (v22 + 1 > 0x7FFFFFFFFFFFFFF7)
        sub_19C2A1A54();
      if (v23 >= 0x17)
      {
        v25 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v23 | 7) != 0x17)
          v25 = v23 | 7;
        v26 = v25 + 1;
        p_dst = (void **)operator new(v25 + 1);
        v105 = (std::__shared_weak_count *)(v22 + 1);
        v106 = v26 | 0x8000000000000000;
        __dst = p_dst;
      }
      else
      {
        v105 = 0;
        v106 = 0;
        __dst = 0;
        p_dst = (void **)&__dst;
        HIBYTE(v106) = v22 + 1;
        if (!v22)
          goto LABEL_37;
      }
      if (v21 >= 0)
        v27 = v20;
      else
        v27 = *v20;
      memmove(p_dst, v27, v22);
LABEL_37:
      *(_WORD *)((char *)p_dst + v22) = 32;
      v28 = SHIBYTE(v106);
      v29 = __dst;
      if (v106 >= 0)
        v30 = (void **)&__dst;
      else
        v30 = __dst;
      if (v106 >= 0)
        v31 = HIBYTE(v106);
      else
        v31 = (size_t)v105;
      if (v96 >= 0)
        v32 = 22;
      else
        v32 = (v96 & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if (v96 >= 0)
        v33 = HIBYTE(v96);
      else
        v33 = v95;
      if (v32 - v33 >= v31)
      {
        if (!v31)
          goto LABEL_74;
        if (v96 >= 0)
          v38 = (char *)&v94;
        else
          v38 = (char *)v94;
        memmove(&v38[v33], v30, v31);
        v39 = v33 + v31;
        if (SHIBYTE(v96) < 0)
          v95 = v33 + v31;
        else
          HIBYTE(v96) = v39 & 0x7F;
        v40 = &v38[v39];
      }
      else
      {
        v87 = __dst;
        v34 = v33 + v31;
        if (0x7FFFFFFFFFFFFFF6 - v32 < v33 + v31 - v32)
          sub_19C2A1A54();
        v35 = &v94;
        if (v96 < 0)
          v35 = v94;
        __src = v35;
        v36 = 0x7FFFFFFFFFFFFFF7;
        if (v32 <= 0x3FFFFFFFFFFFFFF2)
        {
          v37 = 2 * v32;
          if (v34 > 2 * v32)
            v37 = v33 + v31;
          if (v37 >= 0x17)
          {
            v41 = (v37 & 0xFFFFFFFFFFFFFFF8) + 8;
            v42 = v37 | 7;
            if (v42 == 23)
              v42 = v41;
            v36 = v42 + 1;
          }
          else
          {
            v36 = 23;
          }
        }
        v43 = (char *)operator new(v36);
        v44 = v43;
        if (v33)
          memmove(v43, __src, v33);
        memcpy(&v44[v33], v30, v31);
        if (v32 != 22)
          operator delete(__src);
        v95 = v33 + v31;
        v96 = v36 | 0x8000000000000000;
        v94 = v44;
        v40 = &v44[v34];
        v29 = v87;
      }
      *v40 = 0;
LABEL_74:
      if (v28 < 0)
        operator delete(v29);
      ++v18;
      v19 += 32;
      v15 = v88;
    }
    while (v18 < v88);
    v45 = HIBYTE(v96);
LABEL_80:
    v46 = (char)v45;
    if ((v45 & 0x80u) == 0)
      v47 = v45;
    else
      v47 = v95;
    v48 = (char)v100;
    if ((v100 & 0x80u) == 0)
      v49 = v100;
    else
      v49 = (size_t)v99[1];
    v50 = v49 + v47;
    if (v49 + v47 > 0x7FFFFFFFFFFFFFF7)
      sub_19C2A1A54();
    if (v50 > 0x16)
    {
      v61 = (v50 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v50 | 7) != 0x17)
        v61 = v50 | 7;
      v62 = v61 + 1;
      p_p = (char *)operator new(v61 + 1);
      v92 = v49 + v47;
      v93 = v62 | 0x8000000000000000;
      __p = p_p;
      if (v47)
      {
LABEL_89:
        if (v46 >= 0)
          v52 = &v94;
        else
          v52 = v94;
        memmove(p_p, v52, v47);
      }
    }
    else
    {
      v92 = 0;
      v93 = 0;
      __p = 0;
      p_p = (char *)&__p;
      HIBYTE(v93) = v49 + v47;
      if (v47)
        goto LABEL_89;
    }
    v53 = &p_p[v47];
    if (v49)
    {
      if (v48 >= 0)
        v54 = v99;
      else
        v54 = (void **)v99[0];
      memmove(v53, v54, v49);
    }
    v53[v49] = 0;
    v55 = *(_QWORD *)(v85 + 104);
    LOBYTE(__dst) = 0;
    v107 = 0;
    v103 = v17;
    if (v93 >= 0)
      v56 = (const UInt8 *)&__p;
    else
      v56 = (const UInt8 *)__p;
    if (v93 >= 0)
      v57 = HIBYTE(v93);
    else
      v57 = v92;
    v102 = CFStringCreateWithBytes(0, v56, v57, 0x8000100u, 0);
    if (!v102)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1A1AD3154](exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
    }
    v101 = (void **)&__dst;
    v58 = operator new(0x20uLL);
    *v58 = &off_1E3D30AB0;
    v58[1] = &v101;
    v58[2] = &v102;
    v58[3] = &v103;
    v109 = v58;
    sub_19C36104C(v55, (uint64_t)&__p, 3, 129, (uint64_t)v108);
    v59 = v109;
    v14 = v86;
    if (v109 == v108)
    {
      v59 = v108;
      v60 = 4;
LABEL_113:
      (*(void (**)(void))(*v59 + 8 * v60))();
    }
    else if (v109)
    {
      v60 = 5;
      goto LABEL_113;
    }
    v63 = v107;
    v64 = v107;
    if (v102)
    {
      CFRelease(v102);
      v64 = v107;
    }
    if (v64 && SHIBYTE(v106) < 0)
      operator delete(__dst);
    if (!v63)
    {
      v14 = v86 + 1;
      if (SHIBYTE(v93) < 0)
        goto LABEL_145;
LABEL_15:
      if (SHIBYTE(v96) < 0)
        goto LABEL_146;
      goto LABEL_16;
    }
    if (qword_1EE41C080 != -1)
      dispatch_once(&qword_1EE41C080, &unk_1E3D3AB90);
    v65 = a4;
    if (*((char *)a4 + 23) < 0)
      v65 = (uint64_t *)*a4;
    v66 = (void **)v99[0];
    if ((v100 & 0x80u) == 0)
      v66 = v99;
    v67 = &v94;
    if (v96 < 0)
      v67 = v94;
    sub_19C34EC30("Prediction Mode= [%s], Lexicon Match for candidate = [%s], Words absorbed from context = [%s]", (uint64_t)&__dst, v65, v66, v67);
    if (v106 >= 0)
      v68 = (const std::string::value_type *)&__dst;
    else
      v68 = (const std::string::value_type *)__dst;
    if (v106 >= 0)
      v69 = HIBYTE(v106);
    else
      v69 = (std::string::size_type)v105;
    std::string::append(v83, v68, v69);
    if (SHIBYTE(v83->__r_.__value_.__r.__words[2]) < 0)
    {
      size = v83->__r_.__value_.__l.__size_;
      if (size)
      {
        v72 = (std::string *)v83->__r_.__value_.__r.__words[0];
        if (!*(_BYTE *)(v83->__r_.__value_.__r.__words[0] + size - 1))
        {
          v71 = size - 1;
          v83->__r_.__value_.__l.__size_ = v71;
LABEL_141:
          v72->__r_.__value_.__s.__data_[v71] = 0;
        }
      }
    }
    else
    {
      v70 = HIBYTE(v83->__r_.__value_.__r.__words[2]);
      if (*((_BYTE *)&v83->__r_.__value_.__s + 23) && !*(_BYTE *)(v79 + v70))
      {
        v71 = v70 - 1;
        *((_BYTE *)&v83->__r_.__value_.__s + 23) = v70 - 1;
        v72 = v83;
        goto LABEL_141;
      }
    }
    std::string::push_back(v83, 10);
    if (SHIBYTE(v106) < 0)
      operator delete(__dst);
    v81 = 1;
    if ((SHIBYTE(v93) & 0x80000000) == 0)
      goto LABEL_15;
LABEL_145:
    operator delete(__p);
    if (SHIBYTE(v96) < 0)
    {
LABEL_146:
      operator delete(v94);
      if (v63)
        break;
    }
    else
    {
LABEL_16:
      if (v63)
        break;
    }
  }
  v74 = v98;
  if (!v98)
    goto LABEL_151;
  v75 = (unint64_t *)&v98->__shared_owners_;
  do
    v76 = __ldaxr(v75);
  while (__stlxr(v76 - 1, v75));
  if (!v76)
  {
    ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
    std::__shared_weak_count::__release_weak(v74);
    if ((char)v100 < 0)
LABEL_152:
      operator delete(v99[0]);
  }
  else
  {
LABEL_151:
    if ((char)v100 < 0)
      goto LABEL_152;
  }
  return v81 & 1;
}

