void sub_19C360F28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  if (a44 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19C36104C(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  CFTypeRef cf;
  uint64_t v13;
  _BYTE v14[24];
  _BYTE *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  cf = 0;
  v13 = a4;
  v9 = operator new(0x28uLL);
  *v9 = &off_1E3D30588;
  v9[1] = &cf;
  v9[2] = a2;
  v9[3] = &v13;
  v9[4] = a5;
  v15 = v9;
  sub_19C319CA4(a1, a2, a3, (uint64_t)v14);
  v10 = v15;
  if (v15 == v14)
  {
    v11 = 4;
    v10 = v14;
  }
  else
  {
    if (!v15)
      goto LABEL_6;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_6:
  if (cf)
    CFRelease(cf);
}

void sub_19C36112C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (a2)
    sub_19C2CDAC8(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_19C361188()
{
  JUMPOUT(0x1A1AD355CLL);
}

__n128 sub_19C36119C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E3D30588;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_19C3611DC(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E3D30588;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

CFComparisonResult sub_19C361204(uint64_t a1, const __CFString **a2, int *a3, uint64_t *a4, int *a5, const __CFLocale **a6, uint64_t a7)
{
  const __CFString *v9;
  int v10;
  uint64_t v11;
  int v12;
  const __CFLocale *v13;
  uint64_t v14;
  int v15;
  const UInt8 *v16;
  CFIndex v17;
  CFStringRef v18;
  CFStringRef v19;
  const void **v20;
  const void *v21;
  const __CFString *v22;
  CFComparisonResult result;
  uint64_t v24;
  uint64_t v25;
  void *exception;
  const __CFLocale *v27;
  int v28;
  uint64_t v29;
  int v30;
  const __CFString *v31;
  CFRange v32;

  v9 = *a2;
  v10 = *a3;
  v11 = *a4;
  v12 = *a5;
  v13 = *a6;
  if (!**(_QWORD **)(a1 + 8))
  {
    v14 = *(_QWORD *)(a1 + 16);
    v15 = *(char *)(v14 + 23);
    if (v15 >= 0)
      v16 = *(const UInt8 **)(a1 + 16);
    else
      v16 = *(const UInt8 **)v14;
    if (v15 >= 0)
      v17 = *(unsigned __int8 *)(v14 + 23);
    else
      v17 = *(_QWORD *)(v14 + 8);
    v18 = CFStringCreateWithBytes(0, v16, v17, 0x8000100u, 0);
    if (!v18)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1A1AD3154](exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
    }
    v19 = v18;
    v20 = *(const void ***)(a1 + 8);
    v21 = *v20;
    *v20 = v19;
    if (v21)
      CFRelease(v21);
  }
  v22 = **(const __CFString ***)(a1 + 8);
  v32.length = CFStringGetLength(v22);
  v32.location = 0;
  result = CFStringCompareWithOptionsAndLocale(v22, v9, v32, **(_QWORD **)(a1 + 24), v13);
  if (result == kCFCompareEqualTo)
  {
    v24 = *(_QWORD *)(a1 + 32);
    v31 = v9;
    v30 = v10;
    v29 = v11;
    v28 = v12;
    v27 = v13;
    v25 = *(_QWORD *)(v24 + 24);
    if (!v25)
      sub_19C2CCC60();
    return (*(uint64_t (**)(uint64_t, const __CFString **, int *, uint64_t *, int *, const __CFLocale **, uint64_t))(*(_QWORD *)v25 + 48))(v25, &v31, &v30, &v29, &v28, &v27, a7);
  }
  return result;
}

void sub_19C361364(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19C36137C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN17language_modeling2v133enumerateComparableLexiconEntriesIN2LM22CompositeLanguageModelEEEvRKT_RKN"
                     "St3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEENS2_22TokenEnumerationPolicyEmRKNS7_"
                     "8functionIFvPK10__CFStringjdNS2_13SourceLexiconEPK10__CFLocaleRbEEEEUlSK_jdSL_SO_SP_E_"
    || ((v3 & (unint64_t)"ZN17language_modeling2v133enumerateComparableLexiconEntriesIN2LM22CompositeLanguageModel"
                                "EEEvRKT_RKNSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEENS2_22TokenEnu"
                                "merationPolicyEmRKNS7_8functionIFvPK10__CFStringjdNS2_13SourceLexiconEPK10__CFLocaleRbEE"
                                "EEUlSK_jdSL_SO_SP_E_" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN17language_modeling2v133enumerateComparableLexiconEntriesIN2LM22CompositeLanguageModelEEEvRKT_RKNSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEENS2_22TokenEnumerationPolicyEmRKNS7_8functionIFvPK10__CFStringjdNS2_13SourceLexiconEPK10__CFLocaleRbEEEEUlSK_jdSL_SO_SP_E_")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN17language_modeling2v133enumerateComparableLexiconEntriesIN2LM22CompositeLanguageModelEEEvRKT_RKNSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEENS2_22TokenEnumerationPolicyEmRKNS7_8functionIFvPK10__CFStringjdNS2_13SourceLexiconEPK10__CFLocaleRbEEEEUlSK_jdSL_SO_SP_E_" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *sub_19C3613D0()
{
  return &unk_1E3D30040;
}

void sub_19C3613E0()
{
  JUMPOUT(0x1A1AD355CLL);
}

__n128 sub_19C3613F4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E3D30AB0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_19C361434(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E3D30AB0;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_19C36145C(uint64_t a1, const __CFString **a2, uint64_t a3, double *a4, uint64_t a5, const __CFLocale **a6, _BYTE *a7)
{
  const __CFString *v8;
  double v9;
  const __CFLocale *v10;
  uint64_t *v11;
  const __CFString *v12;
  double v13;
  CFIndex Length;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  CFRange v23;

  v8 = *a2;
  v9 = *a4;
  v10 = *a6;
  v11 = *(uint64_t **)(a1 + 8);
  v12 = **(const __CFString ***)(a1 + 16);
  v13 = **(double **)(a1 + 24);
  Length = CFStringGetLength(v12);
  if (Length == CFStringGetLength(v8)
    && (v23.length = CFStringGetLength(v12),
        v23.location = 0,
        CFStringCompareWithOptionsAndLocale(v12, v8, v23, 0, v10) == kCFCompareEqualTo))
  {
    sub_19C29CEF8(v8, &v21);
    v17 = *v11;
    if (*(_BYTE *)(*v11 + 24))
    {
      if (*(char *)(v17 + 23) < 0)
        operator delete(*(void **)v17);
      v18 = v21;
      *(_QWORD *)(v17 + 16) = v22;
      *(_OWORD *)v17 = v18;
    }
    else
    {
      v20 = v21;
      *(_QWORD *)(v17 + 16) = v22;
      *(_OWORD *)v17 = v20;
      *(_BYTE *)(v17 + 24) = 1;
    }
    *a7 = 1;
  }
  else if (v13 < v9)
  {
    sub_19C29CEF8(v8, &v21);
    v15 = *v11;
    if (*(_BYTE *)(*v11 + 24))
    {
      if (*(char *)(v15 + 23) < 0)
        operator delete(*(void **)v15);
      v16 = v21;
      *(_QWORD *)(v15 + 16) = v22;
      *(_OWORD *)v15 = v16;
    }
    else
    {
      v19 = v21;
      *(_QWORD *)(v15 + 16) = v22;
      *(_OWORD *)v15 = v19;
      *(_BYTE *)(v15 + 24) = 1;
    }
  }
}

uint64_t sub_19C3615B4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN2LML24isPhraseMatchFromLexiconERKNS_22CompositeLanguageModelERKNSt3__112basic_stringIcNS3_11char_"
                     "traitsIcEENS3_9allocatorIcEEEEE3$_0"
    || ((v3 & (unint64_t)"ZN2LML24isPhraseMatchFromLexiconERKNS_22CompositeLanguageModelERKNSt3__112basic_stringIc"
                                "NS3_11char_traitsIcEENS3_9allocatorIcEEEEE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN2LML24isPhraseMatchFromLexiconERKNS_22CompositeLanguageModelERKNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEE3$_0")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN2LML24isPhraseMatchFromLexiconERKNS_22CompositeLanguageModelERKNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *sub_19C361608()
{
  return &unk_1E3D33580;
}

uint64_t sub_19C361614(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 216;
    sub_19C2E25C8((void **)(i - 184));
    if (*(char *)(i - 193) < 0)
      operator delete(*(void **)(i - 216));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *sub_19C361680(_QWORD *a1)
{
  void *v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  const void *v9;

  *a1 = &off_1E3D370F8;
  v2 = (void *)a1[26];
  if (v2)
  {
    a1[27] = v2;
    operator delete(v2);
  }
  sub_19C361744(a1 + 9);
  v3 = (_QWORD *)a1[6];
  if (v3)
  {
    do
    {
      v4 = (_QWORD *)*v3;
      operator delete(v3);
      v3 = v4;
    }
    while (v4);
  }
  v5 = (void *)a1[4];
  a1[4] = 0;
  if (v5)
    operator delete(v5);
  v6 = (std::__shared_weak_count *)a1[3];
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
      v9 = (const void *)a1[1];
      if (!v9)
        goto LABEL_13;
      goto LABEL_12;
    }
  }
  v9 = (const void *)a1[1];
  if (v9)
LABEL_12:
    CFRelease(v9);
LABEL_13:
  a1[1] = 0;
  return a1;
}

_QWORD *sub_19C361744(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  void *v5;
  const void *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  void *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  void *v21;

  v2 = (_QWORD *)a1[14];
  if (v2)
  {
    do
    {
      v14 = (_QWORD *)*v2;
      v15 = (_QWORD *)v2[5];
      if (v15)
      {
        do
        {
          v16 = (_QWORD *)*v15;
          operator delete(v15);
          v15 = v16;
        }
        while (v16);
      }
      v17 = (void *)v2[3];
      v2[3] = 0;
      if (v17)
        operator delete(v17);
      operator delete(v2);
      v2 = v14;
    }
    while (v14);
  }
  v3 = (void *)a1[12];
  a1[12] = 0;
  if (v3)
    operator delete(v3);
  v4 = (_QWORD *)a1[9];
  if (v4)
  {
    do
    {
      v18 = (_QWORD *)*v4;
      v19 = (_QWORD *)v4[5];
      if (v19)
      {
        do
        {
          v20 = (_QWORD *)*v19;
          operator delete(v19);
          v19 = v20;
        }
        while (v20);
      }
      v21 = (void *)v4[3];
      v4[3] = 0;
      if (v21)
        operator delete(v21);
      operator delete(v4);
      v4 = v18;
    }
    while (v18);
  }
  v5 = (void *)a1[7];
  a1[7] = 0;
  if (v5)
    operator delete(v5);
  v6 = (const void *)a1[5];
  if (v6)
    CFRelease(v6);
  a1[5] = 0;
  v7 = (std::__shared_weak_count *)a1[3];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = (std::__shared_weak_count *)a1[1];
  if (v10)
  {
    v11 = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  return a1;
}

uint64_t sub_19C3618A0(uint64_t a1, uint64_t *a2, uint64_t *a3, _QWORD *a4, int a5, uint64_t a6, uint64_t a7, int a8)
{
  CFLocaleRef *v15;
  int v16;
  const UInt8 *v17;
  CFIndex v18;
  CFStringRef v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  size_t v26;
  void *v27;
  void **v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *p_shared_owners;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  void *exception;
  int v46;
  uint64_t v47;
  int v48;
  uint64_t v50;
  std::__shared_weak_count *v51;
  void *__dst[2];
  unint64_t v53;
  int v54;
  void *__p[2];
  char v56;
  int v57;
  unsigned int *v58;
  unsigned int *v59;

  *(_QWORD *)a1 = &off_1E3D370F8;
  v15 = (CFLocaleRef *)(a1 + 8);
  v16 = *(char *)(a6 + 23);
  if (v16 >= 0)
    v17 = (const UInt8 *)a6;
  else
    v17 = *(const UInt8 **)a6;
  if (v16 >= 0)
    v18 = *(unsigned __int8 *)(a6 + 23);
  else
    v18 = *(_QWORD *)(a6 + 8);
  v19 = CFStringCreateWithBytes(0, v17, v18, 0x8000100u, 0);
  __p[0] = (void *)v19;
  if (!v19)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD3154](exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  *v15 = CFLocaleCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v19);
  CFRelease(v19);
  v46 = a5;
  v47 = a7;
  v48 = a8;
  *(_QWORD *)(a1 + 16) = *a4;
  v20 = a4[1];
  *(_QWORD *)(a1 + 24) = v20;
  if (v20)
  {
    v21 = (unint64_t *)(v20 + 8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  v23 = 0;
  v24 = *a3;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_DWORD *)(a1 + 64) = 1065353216;
  do
  {
    v25 = off_1E3D3AB48[v23];
    v26 = strlen(v25);
    if (v26 >= 0x7FFFFFFFFFFFFFF8)
      sub_19C2A1A54();
    v27 = (void *)v26;
    if (v26 >= 0x17)
    {
      v29 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v26 | 7) != 0x17)
        v29 = v26 | 7;
      v30 = v29 + 1;
      v28 = (void **)operator new(v29 + 1);
      __dst[1] = v27;
      v53 = v30 | 0x8000000000000000;
      __dst[0] = v28;
LABEL_20:
      memmove(v28, v25, (size_t)v27);
      goto LABEL_21;
    }
    HIBYTE(v53) = v26;
    v28 = __dst;
    if (v26)
      goto LABEL_20;
LABEL_21:
    *((_BYTE *)v27 + (_QWORD)v28) = 0;
    v54 = 0;
    sub_19C297950(__p, (const UInt8 *)__dst);
    v57 = v54;
    (*(void (**)(unsigned int **__return_ptr, uint64_t, void **))(*(_QWORD *)v24 + 16))(&v58, v24, __p);
    if (v56 < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v53) & 0x80000000) == 0)
        goto LABEL_23;
    }
    else if ((SHIBYTE(v53) & 0x80000000) == 0)
    {
      goto LABEL_23;
    }
    operator delete(__dst[0]);
LABEL_23:
    v31 = v58;
    if ((char *)v59 - (char *)v58 == 4)
    {
      sub_19C357A04((float *)(a1 + 32), *v58, *v58);
      v31 = v58;
    }
    if (v31)
    {
      v59 = v31;
      operator delete(v31);
    }
    ++v23;
  }
  while (v23 != 5);
  v32 = a2[1];
  v50 = *a2;
  v51 = (std::__shared_weak_count *)v32;
  if (v32)
  {
    v33 = (unint64_t *)(v32 + 8);
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 1, v33));
  }
  v35 = *a3;
  v36 = (std::__shared_weak_count *)a3[1];
  if (v36)
  {
    p_shared_owners = (unint64_t *)&v36->__shared_owners_;
    do
      v38 = __ldxr(p_shared_owners);
    while (__stxr(v38 + 1, p_shared_owners));
  }
  sub_19C3E60B8((uint64_t *)(a1 + 72), &v50, v35, (uint64_t)v36, v46, a6, v47, v48);
  if (v36)
  {
    v39 = (unint64_t *)&v36->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  v41 = v51;
  if (v51)
  {
    v42 = (unint64_t *)&v51->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  return a1;
}

void sub_19C361C04(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19C361C18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  sub_19C2B43C8((uint64_t)&a17);
  sub_19C2B43C8((uint64_t)&a19);
  sub_19C2B95F8(v33);
  sub_19C2B43C8(a9);
  sub_19C313560(a10);
  _Unwind_Resume(a1);
}

os_log_t sub_19C361CC0()
{
  os_log_t result;

  result = os_log_create("com.apple.LanguageModeling", "Default");
  qword_1EDB97220 = (uint64_t)result;
  return result;
}

os_log_t sub_19C361CEC()
{
  os_log_t result;

  result = os_log_create("com.apple.LanguageModeling", "LanguageModelingSignposts");
  qword_1EDB971D8 = (uint64_t)result;
  return result;
}

void sub_19C361D1C(_QWORD *a1)
{
  sub_19C365A24(a1);
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C361D40(uint64_t a1, const __CFArray *a2)
{
  void **v3;
  void **v4;
  void *v5;
  void *__p;
  void **v8;

  sub_19C36584C((uint64_t)&__p, a2);
  if ((void **)(a1 + 128) != &__p)
    sub_19C3388A4((void ***)(a1 + 128), (void **)__p, v8, 0xAAAAAAAAAAAAAAABLL * (((char *)v8 - (_BYTE *)__p) >> 3));
  v3 = (void **)__p;
  if (__p)
  {
    v4 = v8;
    v5 = __p;
    if (v8 != __p)
    {
      do
      {
        if (*((char *)v4 - 1) < 0)
          operator delete(*(v4 - 3));
        v4 -= 3;
      }
      while (v4 != v3);
      v5 = __p;
    }
    v8 = v3;
    operator delete(v5);
  }
  return 1;
}

#error "19C361E8C: call analysis failed (funcsize=48)"

uint64_t sub_19C361EC8(uint64_t a1, const __CFString *a2, int a3, double a4)
{
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  int8x8_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t **v15;
  uint64_t *v16;
  unsigned __int8 v17;
  unint64_t v18;
  unsigned __int8 *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void **v29;
  void **v30;
  unsigned int v31;
  void **v32;
  void **v33;
  __int128 v35;
  double v36;
  void *__p[3];
  void *v38;
  unint64_t v39;
  unsigned __int8 v40;

  if (!a2 || *(_DWORD *)(a1 + 8) >= *(_DWORD *)(a1 + 16))
    return 0;
  sub_19C29CEF8(a2, &v38);
  if ((v40 & 0x80u) == 0)
    v7 = (uint64_t *)&v38;
  else
    v7 = (uint64_t *)v38;
  if ((v40 & 0x80u) == 0)
    v8 = v40;
  else
    v8 = v39;
  v9 = sub_19C2A0F2C((uint64_t)__p, v7, v8);
  v10 = *(int8x8_t *)(a1 + 32);
  if (v10)
  {
    v11 = v9;
    v12 = (uint8x8_t)vcnt_s8(v10);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v13 = v9;
      if (v9 >= *(_QWORD *)&v10)
        v13 = v9 % *(_QWORD *)&v10;
    }
    else
    {
      v13 = (*(_QWORD *)&v10 - 1) & v9;
    }
    v15 = *(uint64_t ***)(*(_QWORD *)(a1 + 24) + 8 * v13);
    if (v15)
    {
      v16 = *v15;
      if (*v15)
      {
        v17 = v40;
        if ((v40 & 0x80u) == 0)
          v18 = v40;
        else
          v18 = v39;
        if ((v40 & 0x80u) == 0)
          v19 = (unsigned __int8 *)&v38;
        else
          v19 = (unsigned __int8 *)v38;
        if (v12.u32[0] < 2uLL)
        {
          v20 = *(_QWORD *)&v10 - 1;
          while (1)
          {
            v25 = v16[1];
            if (v25 == v11)
            {
              v26 = *((unsigned __int8 *)v16 + 39);
              if ((v26 & 0x80u) == 0)
                v27 = *((unsigned __int8 *)v16 + 39);
              else
                v27 = v16[3];
              if (v27 == v18)
              {
                if ((v26 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v16[2], v19, v16[3]))
                    goto LABEL_58;
                }
                else
                {
                  if (!*((_BYTE *)v16 + 39))
                    goto LABEL_58;
                  v28 = 0;
                  while (*((unsigned __int8 *)v16 + v28 + 16) == v19[v28])
                  {
                    if (v26 == ++v28)
                      goto LABEL_57;
                  }
                }
              }
            }
            else if ((v25 & v20) != v13)
            {
              goto LABEL_60;
            }
            v16 = (uint64_t *)*v16;
            if (!v16)
              goto LABEL_60;
          }
        }
        do
        {
          v21 = v16[1];
          if (v21 == v11)
          {
            v22 = *((unsigned __int8 *)v16 + 39);
            if ((v22 & 0x80u) == 0)
              v23 = *((unsigned __int8 *)v16 + 39);
            else
              v23 = v16[3];
            if (v23 == v18)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v16[2], v19, v16[3]))
                {
LABEL_58:
                  v14 = 0;
                  if ((v17 & 0x80) != 0)
                    goto LABEL_77;
                  return v14;
                }
              }
              else
              {
                if (!*((_BYTE *)v16 + 39))
                  goto LABEL_58;
                v24 = 0;
                while (*((unsigned __int8 *)v16 + v24 + 16) == v19[v24])
                {
                  if (v22 == ++v24)
                  {
LABEL_57:
                    if (!v16)
                      goto LABEL_60;
                    goto LABEL_58;
                  }
                }
              }
            }
          }
          else
          {
            if (v21 >= *(_QWORD *)&v10)
              v21 %= *(_QWORD *)&v10;
            if (v21 != v13)
              break;
          }
          v16 = (uint64_t *)*v16;
        }
        while (v16);
      }
    }
  }
LABEL_60:
  v14 = *(unsigned int *)(a1 + 8);
  if (v14 >= *(_DWORD *)(a1 + 16))
    v14 = 0;
  else
    *(_DWORD *)(a1 + 8) = v14 + 1;
  LODWORD(__p[0]) = v14;
  HIDWORD(__p[0]) = v14;
  LODWORD(__p[1]) = a3;
  __p[2] = *(void **)&a4;
  sub_19C364C1C(a1, (uint64_t)&v38, (__int128 *)__p);
  sub_19C338C20((uint64_t)__p, (uint64_t *)(a1 + 128), (const void **)&v38, a3);
  v29 = (void **)__p[0];
  v30 = (void **)__p[1];
  if (__p[0] != __p[1])
  {
    do
    {
      v31 = *(_DWORD *)(a1 + 8);
      if (v31 >= *(_DWORD *)(a1 + 16))
        break;
      *(_DWORD *)(a1 + 8) = v31 + 1;
      if (!v31)
        break;
      *(_QWORD *)&v35 = __PAIR64__(v31, v14);
      DWORD2(v35) = a3;
      v36 = a4;
      sub_19C364C1C(a1, (uint64_t)v29, &v35);
      v29 += 3;
    }
    while (v29 != v30);
    v29 = (void **)__p[0];
  }
  *(_BYTE *)(a1 + 152) = 1;
  if (v29)
  {
    v32 = (void **)__p[1];
    v33 = v29;
    if (__p[1] != v29)
    {
      do
      {
        if (*((char *)v32 - 1) < 0)
          operator delete(*(v32 - 3));
        v32 -= 3;
      }
      while (v32 != v29);
      v33 = (void **)__p[0];
    }
    __p[1] = v29;
    operator delete(v33);
  }
  if ((v40 & 0x80) != 0)
LABEL_77:
    operator delete(v38);
  return v14;
}

void sub_19C362210(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_19C362244(uint64_t a1, const __CFString *a2)
{
  uint64_t *v3;
  _BOOL8 v4;
  void *__p[2];
  char v7;

  if (!a2)
    return 0;
  sub_19C29CEF8(a2, __p);
  v3 = sub_19C364A20((_QWORD *)(a1 + 24), (uint64_t)__p);
  if (v3)
  {
    v4 = *(_DWORD *)(*(_QWORD *)(a1 + 104) + 24 * *((unsigned int *)v3 + 10) + 4) == *(_DWORD *)(*(_QWORD *)(a1 + 104)
                                                                                                 + 24
                                                                                                 * *((unsigned int *)v3 + 10));
    if (v7 < 0)
      goto LABEL_7;
  }
  else
  {
    v4 = 0;
    if (v7 < 0)
LABEL_7:
      operator delete(__p[0]);
  }
  return v4;
}

BOOL sub_19C3622D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BOOL8 v3;
  uint64_t i;
  size_t v7;
  char *v8;
  char *v9;
  unsigned int v10;
  int v12;
  BOOL v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned __int8 v17;
  void *v18;
  size_t v19;
  uint64_t v20;
  char *p_p;
  uint64_t v22;
  size_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  char v28;
  void *v29;
  size_t v30;
  size_t v31;
  unint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  char v38;
  void *v39;
  size_t v40;
  size_t v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  char v48;
  void *v49;
  size_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t *v55;
  uint64_t v58;
  void *__p;
  size_t v60;
  unint64_t v61;
  char v62;
  char v63;
  char v64;
  char v65;

  v3 = 0;
  if (a2 && a3)
  {
    __p = 0;
    v60 = 0;
    v61 = 0;
    v58 = a3 - 1;
    if (a3 >= 1)
    {
      for (i = 0; i < a3; ++i)
      {
        v10 = *(unsigned __int16 *)(a2 + 2 * i);
        if ((v10 & 0xFC00) == 0xD800 && i < v58)
        {
          v12 = *(unsigned __int16 *)(a2 + 2 * (i + 1));
          v13 = (v12 & 0xFC00) == 56320;
          v14 = v12 + (v10 << 10) - 56613888;
          if (v13)
            v10 = v14;
          if (v13)
            ++i;
        }
        if (v10 > 0x7F)
        {
          if (v10 > 0x7FF)
          {
            if (HIWORD(v10))
            {
              v15 = (v10 >> 18) | 0xFFFFFFF0;
              v63 = (v10 >> 12) & 0x3F | 0x80;
              v22 = 2;
            }
            else
            {
              v15 = (v10 >> 12) | 0xFFFFFFE0;
              v22 = 1;
            }
            v62 = v15;
            v20 = v22 + 1;
            *(&v62 + v22) = (v10 >> 6) & 0x3F | 0x80;
          }
          else
          {
            v15 = (v10 >> 6) | 0xFFFFFFC0;
            v62 = (v10 >> 6) | 0xC0;
            v20 = 1;
          }
          v16 = v20 + 1;
          *(&v62 + v20) = v10 & 0x3F | 0x80;
          v17 = HIBYTE(v61);
          if ((SHIBYTE(v61) & 0x80000000) == 0)
          {
LABEL_20:
            if (v17 != 22)
            {
              v19 = v17;
              HIBYTE(v61) = (v17 + 1) & 0x7F;
              p_p = (char *)&__p;
              goto LABEL_47;
            }
            v18 = &__p;
            v19 = 22;
LABEL_33:
            if (v19 + 1 > 2 * v19)
              v24 = v19 + 1;
            else
              v24 = 2 * v19;
            v25 = (v24 & 0x7FFFFFFFFFFFFFF8) + 8;
            if ((v24 | 7) != 0x17)
              v25 = v24 | 7;
            if (v24 >= 0x17)
              v23 = v25 + 1;
            else
              v23 = 23;
LABEL_41:
            v26 = (char *)operator new(v23);
            p_p = v26;
            if (!v19 || (memmove(v26, v18, v19), v19 != 22))
              operator delete(v18);
            __p = p_p;
            v61 = v23 | 0x8000000000000000;
            goto LABEL_46;
          }
        }
        else
        {
          v62 = v10;
          LOBYTE(v15) = v10;
          v16 = 1;
          v17 = HIBYTE(v61);
          if ((SHIBYTE(v61) & 0x80000000) == 0)
            goto LABEL_20;
        }
        v19 = (v61 & 0x7FFFFFFFFFFFFFFFLL) - 1;
        if (v60 == v19)
        {
          if ((v61 & 0x7FFFFFFFFFFFFFFFLL) == 0x7FFFFFFFFFFFFFF8)
            goto LABEL_118;
          v18 = __p;
          v23 = 0x7FFFFFFFFFFFFFF7;
          if (v19 < 0x3FFFFFFFFFFFFFF3)
            goto LABEL_33;
          goto LABEL_41;
        }
        p_p = (char *)__p;
        v19 = v60;
LABEL_46:
        v60 = v19 + 1;
LABEL_47:
        v27 = &p_p[v19];
        *v27 = v15;
        v27[1] = 0;
        if (v16 == 1)
          continue;
        v28 = v63;
        if ((SHIBYTE(v61) & 0x80000000) == 0)
        {
          if (HIBYTE(v61) != 22)
          {
            v30 = HIBYTE(v61);
            HIBYTE(v61) = (HIBYTE(v61) + 1) & 0x7F;
            v33 = (char *)&__p;
            goto LABEL_69;
          }
          v29 = &__p;
          v30 = 22;
LABEL_54:
          if (v30 + 1 > 2 * v30)
            v32 = v30 + 1;
          else
            v32 = 2 * v30;
          if (v32 >= 0x17)
          {
            v34 = (v32 & 0x7FFFFFFFFFFFFFF8) + 8;
            v35 = v32 | 7;
            if (v35 == 23)
              v35 = v34;
            v31 = v35 + 1;
          }
          else
          {
            v31 = 23;
          }
LABEL_63:
          v36 = (char *)operator new(v31);
          v33 = v36;
          if (!v30 || (memmove(v36, v29, v30), v30 != 22))
            operator delete(v29);
          __p = v33;
          v61 = v31 | 0x8000000000000000;
          goto LABEL_68;
        }
        v30 = (v61 & 0x7FFFFFFFFFFFFFFFLL) - 1;
        if (v60 == v30)
        {
          if ((v61 & 0x7FFFFFFFFFFFFFFFLL) == 0x7FFFFFFFFFFFFFF8)
            goto LABEL_118;
          v29 = __p;
          v31 = 0x7FFFFFFFFFFFFFF7;
          if (v30 < 0x3FFFFFFFFFFFFFF3)
            goto LABEL_54;
          goto LABEL_63;
        }
        v33 = (char *)__p;
        v30 = v60;
LABEL_68:
        v60 = v30 + 1;
LABEL_69:
        v37 = &v33[v30];
        *v37 = v28;
        v37[1] = 0;
        if (v16 == 2)
          continue;
        v38 = v64;
        if ((SHIBYTE(v61) & 0x80000000) == 0)
        {
          if (HIBYTE(v61) != 22)
          {
            v40 = HIBYTE(v61);
            HIBYTE(v61) = (HIBYTE(v61) + 1) & 0x7F;
            v43 = (char *)&__p;
            goto LABEL_91;
          }
          v39 = &__p;
          v40 = 22;
LABEL_76:
          if (v40 + 1 > 2 * v40)
            v42 = v40 + 1;
          else
            v42 = 2 * v40;
          if (v42 >= 0x17)
          {
            v44 = (v42 & 0x7FFFFFFFFFFFFFF8) + 8;
            v45 = v42 | 7;
            if (v45 == 23)
              v45 = v44;
            v41 = v45 + 1;
          }
          else
          {
            v41 = 23;
          }
LABEL_85:
          v46 = (char *)operator new(v41);
          v43 = v46;
          if (!v40 || (memmove(v46, v39, v40), v40 != 22))
            operator delete(v39);
          __p = v43;
          v61 = v41 | 0x8000000000000000;
          goto LABEL_90;
        }
        v40 = (v61 & 0x7FFFFFFFFFFFFFFFLL) - 1;
        if (v60 == v40)
        {
          if ((v61 & 0x7FFFFFFFFFFFFFFFLL) == 0x7FFFFFFFFFFFFFF8)
            goto LABEL_118;
          v39 = __p;
          v41 = 0x7FFFFFFFFFFFFFF7;
          if (v40 < 0x3FFFFFFFFFFFFFF3)
            goto LABEL_76;
          goto LABEL_85;
        }
        v43 = (char *)__p;
        v40 = v60;
LABEL_90:
        v60 = v40 + 1;
LABEL_91:
        v47 = &v43[v40];
        *v47 = v38;
        v47[1] = 0;
        if (v16 == 3)
          continue;
        v48 = v65;
        if (SHIBYTE(v61) < 0)
        {
          v7 = (v61 & 0x7FFFFFFFFFFFFFFFLL) - 1;
          if (v60 == v7)
          {
            if ((v61 & 0x7FFFFFFFFFFFFFFFLL) == 0x7FFFFFFFFFFFFFF8)
LABEL_118:
              sub_19C2A1A54();
            v49 = __p;
            v50 = 0x7FFFFFFFFFFFFFF7;
            if (v7 < 0x3FFFFFFFFFFFFFF3)
            {
LABEL_98:
              if (v7 + 1 > 2 * v7)
                v51 = v7 + 1;
              else
                v51 = 2 * v7;
              if (v51 >= 0x17)
              {
                v52 = (v51 & 0x7FFFFFFFFFFFFFF8) + 8;
                v53 = v51 | 7;
                if (v53 == 23)
                  v53 = v52;
                v50 = v53 + 1;
              }
              else
              {
                v50 = 23;
              }
            }
            v54 = (char *)operator new(v50);
            v8 = v54;
            if (!v7 || (memmove(v54, v49, v7), v7 != 22))
              operator delete(v49);
            __p = v8;
            v61 = v50 | 0x8000000000000000;
          }
          else
          {
            v8 = (char *)__p;
            v7 = v60;
          }
          v60 = v7 + 1;
          goto LABEL_6;
        }
        if (HIBYTE(v61) == 22)
        {
          v49 = &__p;
          v7 = 22;
          goto LABEL_98;
        }
        v7 = HIBYTE(v61);
        HIBYTE(v61) = (HIBYTE(v61) + 1) & 0x7F;
        v8 = (char *)&__p;
LABEL_6:
        v9 = &v8[v7];
        *v9 = v48;
        v9[1] = 0;
      }
    }
    v55 = sub_19C364A20((_QWORD *)(a1 + 24), (uint64_t)&__p);
    if (!v55)
    {
      v3 = 0;
      if ((SHIBYTE(v61) & 0x80000000) == 0)
        return v3;
      goto LABEL_114;
    }
    v3 = *(_DWORD *)(*(_QWORD *)(a1 + 104) + 24 * *((unsigned int *)v55 + 10) + 4) == *(_DWORD *)(*(_QWORD *)(a1 + 104)
                                                                                                  + 24 * *((unsigned int *)v55 + 10));
    if (SHIBYTE(v61) < 0)
LABEL_114:
      operator delete(__p);
  }
  return v3;
}

void sub_19C3628F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19C362914(_QWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t *v5;
  unsigned int v6;
  uint64_t v7;
  void **v8;
  void **v9;
  uint64_t *v10;
  uint64_t *v11;
  CFStringRef v12;
  int v13;
  void **v14;
  void *v15;
  void *__p;
  void **v17;
  unsigned __int8 v18;
  void *v19[2];
  char v20;

  sub_19C362AC4(a1, a2, (uint64_t)v19);
  v5 = sub_19C364A20(a1 + 3, (uint64_t)v19);
  if (v5)
  {
    v6 = *((_DWORD *)v5 + 10);
    v7 = a1[13];
    if (*(_DWORD *)(v7 + 24 * v6 + 4) == *(_DWORD *)(v7 + 24 * v6))
    {
      v18 = 0;
      sub_19C338C20((uint64_t)&__p, a1 + 16, (const void **)v19, *(_DWORD *)(v7 + 24 * v6 + 8));
      v8 = (void **)__p;
      v9 = v17;
      if (__p != v17)
      {
        do
        {
          v10 = sub_19C364A20(a1 + 3, (uint64_t)v8);
          if (v10)
          {
            v11 = v10;
            v12 = sub_19C2E1370((uint64_t)v8);
            (*(void (**)(uint64_t, CFStringRef, _QWORD, unsigned __int8 *))(a3 + 16))(a3, v12, *(unsigned int *)(a1[13] + 24 * *((unsigned int *)v11 + 10) + 4), &v18);
            v13 = v18;
            if (v12)
              CFRelease(v12);
            if (v13)
              break;
          }
          v8 += 3;
        }
        while (v8 != v9);
        v8 = (void **)__p;
      }
      if (v8)
      {
        v14 = v17;
        v15 = v8;
        if (v17 != v8)
        {
          do
          {
            if (*((char *)v14 - 1) < 0)
              operator delete(*(v14 - 3));
            v14 -= 3;
          }
          while (v14 != v8);
          v15 = __p;
        }
        v17 = v8;
        operator delete(v15);
      }
    }
  }
  if (v20 < 0)
    operator delete(v19[0]);
}

void sub_19C362A84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_19C362AC4@<X0>(_QWORD *result@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  uint64_t **v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  __int128 v11;

  v3 = result[9];
  if (!v3)
    goto LABEL_21;
  v4 = (uint8x8_t)vcnt_s8((int8x8_t)v3);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = a2;
    if (v3 <= a2)
      v5 = a2 % v3;
  }
  else
  {
    v5 = ((_DWORD)v3 - 1) & a2;
  }
  v6 = *(uint64_t ***)(result[8] + 8 * v5);
  if (!v6 || (v7 = *v6) == 0)
  {
LABEL_21:
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    return result;
  }
  if (v4.u32[0] < 2uLL)
  {
    v8 = v3 - 1;
    while (1)
    {
      v10 = v7[1];
      if (v10 == a2)
      {
        if (*((_DWORD *)v7 + 4) == a2)
          goto LABEL_22;
      }
      else if ((v10 & v8) != v5)
      {
        goto LABEL_21;
      }
      v7 = (uint64_t *)*v7;
      if (!v7)
        goto LABEL_21;
    }
  }
  while (1)
  {
    v9 = v7[1];
    if (v9 == a2)
      break;
    if (v9 >= v3)
      v9 %= v3;
    if (v9 != v5)
      goto LABEL_21;
LABEL_11:
    v7 = (uint64_t *)*v7;
    if (!v7)
      goto LABEL_21;
  }
  if (*((_DWORD *)v7 + 4) != a2)
    goto LABEL_11;
LABEL_22:
  if (*((char *)v7 + 55) < 0)
    return sub_19C2B5238((_BYTE *)a3, (void *)v7[4], v7[5]);
  v11 = *((_OWORD *)v7 + 2);
  *(_QWORD *)(a3 + 16) = v7[6];
  *(_OWORD *)a3 = v11;
  return result;
}

uint64_t sub_19C362BCC(uint64_t a1, const __CFString *a2, _QWORD *a3)
{
  uint64_t *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void *__p[2];
  char v11;

  sub_19C29CEF8(a2, __p);
  if (a3)
    *a3 = 0;
  v5 = sub_19C364A20((_QWORD *)(a1 + 24), (uint64_t)__p);
  if (!v5)
  {
    v8 = 0;
    if ((v11 & 0x80000000) == 0)
      return v8;
    goto LABEL_7;
  }
  v6 = *((_DWORD *)v5 + 10);
  v7 = *(_QWORD *)(a1 + 104);
  if (a3)
    *a3 = *(_QWORD *)(v7 + 24 * v6 + 16);
  v8 = *(unsigned int *)(v7 + 24 * v6 + 4);
  if (v11 < 0)
LABEL_7:
    operator delete(__p[0]);
  return v8;
}

uint64_t *sub_19C362C64(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t *result;
  unsigned int v6;
  uint64_t v7;

  if (a3)
    *a3 = 0;
  result = sub_19C364A20((_QWORD *)(a1 + 24), a2);
  if (result)
  {
    v6 = *((_DWORD *)result + 10);
    v7 = *(_QWORD *)(a1 + 104);
    if (a3)
      *a3 = *(_QWORD *)(v7 + 24 * v6 + 16);
    return (uint64_t *)*(unsigned int *)(v7 + 24 * v6 + 4);
  }
  return result;
}

uint64_t sub_19C362CC0(_QWORD *a1, unsigned int a2)
{
  unint64_t v2;
  uint8x8_t v3;
  unint64_t v4;
  uint64_t **v5;
  uint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v2 = a1[9];
  if (!v2)
    return 0;
  v3 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = a2;
    if (v2 <= a2)
      v4 = a2 % v2;
  }
  else
  {
    v4 = ((_DWORD)v2 - 1) & a2;
  }
  v5 = *(uint64_t ***)(a1[8] + 8 * v4);
  if (!v5)
    return 0;
  v6 = *v5;
  if (!v6)
    return 0;
  if (v3.u32[0] < 2uLL)
  {
    v7 = v2 - 1;
    while (1)
    {
      v9 = v6[1];
      if (v9 == a2)
      {
        if (*((_DWORD *)v6 + 4) == a2)
          return *(unsigned int *)(a1[13] + 24 * *((unsigned int *)v6 + 6));
      }
      else if ((v9 & v7) != v4)
      {
        return 0;
      }
      v6 = (uint64_t *)*v6;
      if (!v6)
        return 0;
    }
  }
  while (1)
  {
    v8 = v6[1];
    if (v8 == a2)
      break;
    if (v8 >= v2)
      v8 %= v2;
    if (v8 != v4)
      return 0;
LABEL_11:
    v6 = (uint64_t *)*v6;
    if (!v6)
      return 0;
  }
  if (*((_DWORD *)v6 + 4) != a2)
    goto LABEL_11;
  return *(unsigned int *)(a1[13] + 24 * *((unsigned int *)v6 + 6));
}

uint64_t sub_19C362DB0(_QWORD *a1, unsigned int a2)
{
  unint64_t v2;
  uint8x8_t v3;
  unint64_t v4;
  uint64_t **v5;
  uint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v2 = a1[9];
  if (!v2)
    return 0;
  v3 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = a2;
    if (v2 <= a2)
      v4 = a2 % v2;
  }
  else
  {
    v4 = ((_DWORD)v2 - 1) & a2;
  }
  v5 = *(uint64_t ***)(a1[8] + 8 * v4);
  if (!v5)
    return 0;
  v6 = *v5;
  if (!v6)
    return 0;
  if (v3.u32[0] < 2uLL)
  {
    v7 = v2 - 1;
    while (1)
    {
      v9 = v6[1];
      if (v9 == a2)
      {
        if (*((_DWORD *)v6 + 4) == a2)
          return *(unsigned int *)(a1[13] + 24 * *((unsigned int *)v6 + 6) + 8);
      }
      else if ((v9 & v7) != v4)
      {
        return 0;
      }
      v6 = (uint64_t *)*v6;
      if (!v6)
        return 0;
    }
  }
  while (1)
  {
    v8 = v6[1];
    if (v8 == a2)
      break;
    if (v8 >= v2)
      v8 %= v2;
    if (v8 != v4)
      return 0;
LABEL_11:
    v6 = (uint64_t *)*v6;
    if (!v6)
      return 0;
  }
  if (*((_DWORD *)v6 + 4) != a2)
    goto LABEL_11;
  return *(unsigned int *)(a1[13] + 24 * *((unsigned int *)v6 + 6) + 8);
}

double sub_19C362EA0(_QWORD *a1, unsigned int a2)
{
  unint64_t v2;
  double result;
  uint8x8_t v4;
  unint64_t v5;
  uint64_t **v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v2 = a1[9];
  result = 0.0;
  if (v2)
  {
    v4 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = a2;
      if (v2 <= a2)
        v5 = a2 % v2;
    }
    else
    {
      v5 = ((_DWORD)v2 - 1) & a2;
    }
    v6 = *(uint64_t ***)(a1[8] + 8 * v5);
    if (v6)
    {
      v7 = *v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          v8 = v2 - 1;
          while (1)
          {
            v10 = v7[1];
            if (v10 == a2)
            {
              if (*((_DWORD *)v7 + 4) == a2)
                return *(double *)(a1[13] + 24 * *((unsigned int *)v7 + 6) + 16);
            }
            else if ((v10 & v8) != v5)
            {
              return result;
            }
            v7 = (uint64_t *)*v7;
            if (!v7)
              return result;
          }
        }
        do
        {
          v9 = v7[1];
          if (v9 == a2)
          {
            if (*((_DWORD *)v7 + 4) == a2)
              return *(double *)(a1[13] + 24 * *((unsigned int *)v7 + 6) + 16);
          }
          else
          {
            if (v9 >= v2)
              v9 %= v2;
            if (v9 != v5)
              return result;
          }
          v7 = (uint64_t *)*v7;
        }
        while (v7);
      }
    }
  }
  return result;
}

void sub_19C362F90(uint64_t a1, unsigned __int32 a2, uint64_t a3, __n128 a4)
{
  uint64_t v5;
  uint64_t v6;
  __n128 *v8;
  __n128 *v9;
  __n128 *v10;
  int v11;
  unsigned __int32 v12;
  int v13;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  __n128 *v23;
  __int128 v24;
  BOOL v25;
  __int128 v26;
  uint64_t v27;
  unint64_t v28;
  unsigned __int32 v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 104);
  v6 = *(_QWORD *)(a1 + 112);
  if (v5 == v6)
  {
    v8 = 0;
    v10 = 0;
  }
  else
  {
    v8 = 0;
    v9 = 0;
    v10 = 0;
    do
    {
      v12 = *(_DWORD *)v5;
      v11 = *(_DWORD *)(v5 + 4);
      v13 = *(_DWORD *)(v5 + 8);
      v28 = *(_QWORD *)(v5 + 12);
      v29 = *(_DWORD *)(v5 + 20);
      if (v12 == v11 && v13 == a2)
      {
        if (v8 < v9)
        {
          v8->n128_u32[0] = v12;
          v8->n128_u32[1] = v12;
          v8->n128_u32[2] = a2;
          *(unint64_t *)((char *)&v8->n128_u64[1] + 4) = v28;
          v8[1].n128_u32[1] = v29;
          v8 = (__n128 *)((char *)v8 + 24);
        }
        else
        {
          v15 = 0xAAAAAAAAAAAAAAABLL * (((char *)v8 - (char *)v10) >> 3) + 1;
          if (v15 > 0xAAAAAAAAAAAAAAALL)
            sub_19C2A18E8();
          if (0x5555555555555556 * (((char *)v9 - (char *)v10) >> 3) > v15)
            v15 = 0x5555555555555556 * (((char *)v9 - (char *)v10) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * (((char *)v9 - (char *)v10) >> 3) >= 0x555555555555555)
            v16 = 0xAAAAAAAAAAAAAAALL;
          else
            v16 = v15;
          if (v16)
          {
            if (v16 > 0xAAAAAAAAAAAAAAALL)
              sub_19C2A143C();
            v17 = (char *)operator new(24 * v16);
          }
          else
          {
            v17 = 0;
          }
          v18 = &v17[8 * (((char *)v8 - (char *)v10) >> 3)];
          *(_DWORD *)v18 = v12;
          *((_DWORD *)v18 + 1) = v12;
          *((_DWORD *)v18 + 2) = a2;
          *(_QWORD *)(v18 + 12) = v28;
          *((_DWORD *)v18 + 5) = v29;
          if (v8 == v10)
          {
            v20 = &v17[8 * (((char *)v8 - (char *)v10) >> 3)];
          }
          else
          {
            v19 = &v17[8 * (((char *)v8 - (char *)v10) >> 3)];
            do
            {
              a4 = *(__n128 *)((char *)v8 - 24);
              v20 = v19 - 24;
              *((_QWORD *)v19 - 1) = v8[-1].n128_u64[1];
              *(__n128 *)(v19 - 24) = a4;
              v8 = (__n128 *)((char *)v8 - 24);
              v19 -= 24;
            }
            while (v8 != v10);
          }
          v9 = (__n128 *)&v17[24 * v16];
          v8 = (__n128 *)(v18 + 24);
          if (v10)
            operator delete(v10);
          v10 = (__n128 *)v20;
        }
      }
      v5 += 24;
    }
    while (v5 != v6);
  }
  v21 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((char *)v8 - (char *)v10) >> 3));
  if (v8 == v10)
    v22 = 0;
  else
    v22 = v21;
  sub_19C3634E0((uint64_t)v10, v8, v22, 1, a4);
  LOBYTE(v28) = 0;
  if (v10 != v8)
  {
    v23 = (__n128 *)((char *)v10 + 24);
    do
    {
      v24 = *(__int128 *)((char *)&v23[-2] + 8);
      v27 = v23[-1].n128_i64[1];
      v26 = v24;
      (*(void (**)(uint64_t, __int128 *, unint64_t *))(a3 + 16))(a3, &v26, &v28);
      if ((_BYTE)v28)
        v25 = 1;
      else
        v25 = v23 == v8;
      v23 = (__n128 *)((char *)v23 + 24);
    }
    while (!v25);
  }
  if (v10)
    operator delete(v10);
}

void sub_19C36320C(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

BOOL sub_19C36322C(_QWORD *a1, unsigned int a2)
{
  unint64_t v2;
  uint8x8_t v3;
  unint64_t v4;
  uint64_t **v5;
  uint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;

  v2 = a1[9];
  if (!v2)
    goto LABEL_21;
  v3 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = a2;
    if (v2 <= a2)
      v4 = a2 % v2;
  }
  else
  {
    v4 = ((_DWORD)v2 - 1) & a2;
  }
  v5 = *(uint64_t ***)(a1[8] + 8 * v4);
  if (!v5 || (v6 = *v5) == 0)
  {
LABEL_21:
    v10 = 0;
    return v10 && v10 == a2;
  }
  if (v3.u32[0] < 2uLL)
  {
    v7 = v2 - 1;
    while (1)
    {
      v9 = v6[1];
      if (v9 == a2)
      {
        if (*((_DWORD *)v6 + 4) == a2)
          goto LABEL_28;
      }
      else if ((v9 & v7) != v4)
      {
        goto LABEL_21;
      }
      v6 = (uint64_t *)*v6;
      if (!v6)
        goto LABEL_21;
    }
  }
  while (1)
  {
    v8 = v6[1];
    if (v8 == a2)
      break;
    if (v8 >= v2)
      v8 %= v2;
    if (v8 != v4)
      goto LABEL_21;
LABEL_11:
    v6 = (uint64_t *)*v6;
    if (!v6)
      goto LABEL_21;
  }
  if (*((_DWORD *)v6 + 4) != a2)
    goto LABEL_11;
LABEL_28:
  v10 = *(_DWORD *)(a1[13] + 24 * *((unsigned int *)v6 + 6));
  return v10 && v10 == a2;
}

void sub_19C363328(const void *a1, const void *a2, void (__cdecl *a3)(CFNotificationCenterRef, void *, CFNotificationName, const void *, CFDictionaryRef))
{
  __CFNotificationCenter *LocalCenter;

  LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterAddObserver(LocalCenter, a2, a3, CFSTR("VocabularyDidChange"), a1, CFNotificationSuspensionBehaviorHold);
}

void sub_19C363370(const void *a1, const void *a2)
{
  __CFNotificationCenter *LocalCenter;

  LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterRemoveObserver(LocalCenter, a2, CFSTR("VocabularyDidChange"), a1);
}

void sub_19C3633A4(_BYTE *a1)
{
  __CFNotificationCenter *LocalCenter;

  if (a1[152])
  {
    LocalCenter = CFNotificationCenterGetLocalCenter();
    CFNotificationCenterPostNotification(LocalCenter, CFSTR("VocabularyDidChange"), a1, 0, 0);
    a1[152] = 0;
  }
}

void sub_19C3633E8(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t i;
  void **v5;
  uint64_t v6;
  uint64_t j;
  void **v8;
  void **v9;

  if (*(_QWORD *)(a1 + 48))
  {
    v2 = *(void ***)(a1 + 40);
    if (v2)
    {
      do
      {
        v8 = (void **)*v2;
        if (*((char *)v2 + 39) < 0)
          operator delete(v2[2]);
        operator delete(v2);
        v2 = v8;
      }
      while (v8);
    }
    *(_QWORD *)(a1 + 40) = 0;
    v3 = *(_QWORD *)(a1 + 32);
    if (v3)
    {
      for (i = 0; i != v3; ++i)
        *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 48) = 0;
  }
  if (*(_QWORD *)(a1 + 88))
  {
    v5 = *(void ***)(a1 + 80);
    if (v5)
    {
      do
      {
        v9 = (void **)*v5;
        if (*((char *)v5 + 55) < 0)
          operator delete(v5[4]);
        operator delete(v5);
        v5 = v9;
      }
      while (v9);
    }
    *(_QWORD *)(a1 + 80) = 0;
    v6 = *(_QWORD *)(a1 + 72);
    if (v6)
    {
      for (j = 0; j != v6; ++j)
        *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * j) = 0;
    }
    *(_QWORD *)(a1 + 88) = 0;
  }
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a1 + 104);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
  *(_BYTE *)(a1 + 152) = 0;
}

double sub_19C3634E0(uint64_t a1, __n128 *a2, uint64_t a3, char a4, __n128 a5)
{
  __n128 *v9;
  __n128 *v10;
  __int8 *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  __n128 *v16;
  double v17;
  double v18;
  __n128 v19;
  double v20;
  __n128 v21;
  __n128 v22;
  __n128 v23;
  __n128 v24;
  __n128 v25;
  __n128 *v26;
  unint64_t v27;
  __n128 *v28;
  double v29;
  double v30;
  __n128 v31;
  unint64_t v32;
  unint64_t v33;
  __n128 v34;
  __n128 v35;
  unint64_t v36;
  uint64_t v37;
  __n128 v38;
  __n128 v39;
  unint64_t v40;
  uint64_t v41;
  __n128 v42;
  __n128 *v43;
  unint64_t v44;
  __n128 *v45;
  double v46;
  double v47;
  __n128 v48;
  unint64_t v49;
  unint64_t v50;
  __n128 v51;
  __n128 v52;
  unint64_t v53;
  uint64_t v54;
  __n128 v55;
  unint64_t v56;
  uint64_t v57;
  __n128 v58;
  double v59;
  double v60;
  unint64_t v61;
  unint64_t v62;
  __n128 *v63;
  __n128 *v64;
  double v65;
  __n128 *v66;
  double v67;
  unint64_t v68;
  __n128 v69;
  uint64_t v70;
  uint64_t v71;
  double v72;
  double v73;
  __n128 *v74;
  __n128 v75;
  BOOL v76;
  __n128 v77;
  unint64_t v78;
  double v79;
  unint64_t v80;
  double v81;
  __n128 *v82;
  __n128 *v83;
  double v84;
  __n128 v85;
  double v86;
  double v87;
  __n128 *v88;
  __n128 v89;
  __n128 *v90;
  double v91;
  __n128 v92;
  __n128 *v93;
  __n128 *v94;
  __n128 *v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  __n128 *v100;
  BOOL v102;
  uint64_t v103;
  __n128 *v104;
  uint64_t v105;
  double v106;
  uint64_t v107;
  uint64_t v108;
  int64_t v109;
  int64_t v110;
  BOOL v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  double v115;
  unint64_t v116;
  __int128 v117;
  uint64_t v118;
  uint64_t v119;
  int64_t v120;
  uint64_t v121;
  __n128 *v122;
  __n128 v123;
  __n128 *v124;
  uint64_t v125;
  int64_t v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  __n128 *v130;
  __n128 v131;
  unint64_t v132;
  unint64_t v133;
  double v134;
  __n128 *v135;
  double v136;
  unint64_t v137;
  unint64_t v138;
  __n128 v140;
  __n128 v141;
  __n128 v142;
  __n128 v143;
  __n128 v144;
  __n128 v145;
  __n128 v146;
  __n128 v147;
  __n128 v148;
  __n128 v149;
  __n128 v150;
  __n128 v151;
  __n128 v152;
  __n128 v153;
  __n128 v154;
  __n128 v155;
  __n128 v156;
  __n128 v157;
  __n128 v158;
  __n128 v159;
  __n128 v160;
  __n128 v161;
  __n128 v162;
  __n128 v163;
  __int128 v164;
  __n128 v165;
  __n128 v166;
  __n128 v167;
  __n128 v168;
  unint64_t v169;
  unint64_t v170;
  unint64_t v171;
  unint64_t v172;
  unint64_t v173;
  unint64_t v174;
  unint64_t v175;
  unint64_t v176;
  unint64_t v177;
  unint64_t v178;
  unint64_t v179;
  unint64_t v180;
  unint64_t v181;
  unint64_t v182;
  unint64_t v183;
  unint64_t v184;
  unint64_t v185;
  unint64_t v186;
  unint64_t v187;
  uint64_t v188;
  unint64_t v189;
  uint64_t v190;
  uint64_t v191;

__n128 sub_19C364434(__n128 *a1, __n128 *a2, __n128 *a3, __n128 *a4, __n128 result)
{
  double v5;
  double v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;

  v5 = a2[1].n128_f64[0];
  v6 = a3[1].n128_f64[0];
  if (v5 <= a1[1].n128_f64[0])
  {
    if (v6 > v5)
    {
      v9 = a2[1].n128_u64[0];
      result = *a2;
      v10 = a3[1].n128_u64[0];
      *a2 = *a3;
      a2[1].n128_u64[0] = v10;
      *a3 = result;
      a3[1].n128_u64[0] = v9;
      if (a2[1].n128_f64[0] > a1[1].n128_f64[0])
      {
        v11 = a1[1].n128_u64[0];
        result = *a1;
        v12 = a2[1].n128_u64[0];
        *a1 = *a2;
        a1[1].n128_u64[0] = v12;
        *a2 = result;
        a2[1].n128_u64[0] = v11;
      }
    }
  }
  else
  {
    if (v6 > v5)
    {
      v7 = a1[1].n128_u64[0];
      result = *a1;
      v8 = a3[1].n128_u64[0];
      *a1 = *a3;
      a1[1].n128_u64[0] = v8;
LABEL_9:
      *a3 = result;
      a3[1].n128_u64[0] = v7;
      goto LABEL_10;
    }
    v13 = a1[1].n128_u64[0];
    result = *a1;
    v14 = a2[1].n128_u64[0];
    *a1 = *a2;
    a1[1].n128_u64[0] = v14;
    *a2 = result;
    a2[1].n128_u64[0] = v13;
    if (a3[1].n128_f64[0] > a2[1].n128_f64[0])
    {
      v7 = a2[1].n128_u64[0];
      result = *a2;
      v15 = a3[1].n128_u64[0];
      *a2 = *a3;
      a2[1].n128_u64[0] = v15;
      goto LABEL_9;
    }
  }
LABEL_10:
  result.n128_u64[0] = a4[1].n128_u64[0];
  if (result.n128_f64[0] > a3[1].n128_f64[0])
  {
    v16 = a3[1].n128_u64[0];
    result = *a3;
    v17 = a4[1].n128_u64[0];
    *a3 = *a4;
    a3[1].n128_u64[0] = v17;
    *a4 = result;
    a4[1].n128_u64[0] = v16;
    result.n128_u64[0] = a3[1].n128_u64[0];
    if (result.n128_f64[0] > a2[1].n128_f64[0])
    {
      v18 = a2[1].n128_u64[0];
      result = *a2;
      v19 = a3[1].n128_u64[0];
      *a2 = *a3;
      a2[1].n128_u64[0] = v19;
      *a3 = result;
      a3[1].n128_u64[0] = v18;
      result.n128_u64[0] = a2[1].n128_u64[0];
      if (result.n128_f64[0] > a1[1].n128_f64[0])
      {
        v20 = a1[1].n128_u64[0];
        result = *a1;
        v21 = a2[1].n128_u64[0];
        *a1 = *a2;
        a1[1].n128_u64[0] = v21;
        *a2 = result;
        a2[1].n128_u64[0] = v20;
      }
    }
  }
  return result;
}

BOOL sub_19C3645BC(uint64_t a1, uint64_t a2, __n128 a3)
{
  unint64_t v5;
  _BOOL8 result;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  __n128 *v10;
  __n128 *v11;
  double v12;
  double v13;
  double v14;
  uint64_t v15;
  __n128 v16;
  __n128 *v17;
  __n128 *v18;
  double v19;
  double v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  __n128 *v24;
  __n128 *v25;
  __n128 *v26;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  __n128 v33;
  uint64_t v34;
  __n128 v35;
  uint64_t v36;
  __n128 v37;
  uint64_t v38;
  __n128 v39;
  uint64_t v40;
  __n128 v41;
  uint64_t v42;
  uint64_t v43;
  __n128 v44;
  uint64_t v45;
  __n128 v46;
  uint64_t v47;
  __n128 v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  double v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __n128 v57;
  uint64_t v58;
  __n128 v59;
  uint64_t v60;
  __int128 v61;

  v5 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v5)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(double *)(a2 - 8) > *(double *)(a1 + 16))
      {
        v7 = *(_QWORD *)(a1 + 16);
        v8 = *(__n128 *)a1;
        v9 = *(_QWORD *)(a2 - 8);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 24);
        *(_QWORD *)(a1 + 16) = v9;
        *(__n128 *)(a2 - 24) = v8;
        *(_QWORD *)(a2 - 8) = v7;
      }
      return result;
    case 3uLL:
      v17 = (__n128 *)(a1 + 24);
      v18 = (__n128 *)(a2 - 24);
      v19 = *(double *)(a1 + 40);
      v20 = *(double *)(a2 - 8);
      if (v19 <= *(double *)(a1 + 16))
      {
        if (v20 > v19)
        {
          v40 = *(_QWORD *)(a1 + 40);
          v41 = *v17;
          v42 = *(_QWORD *)(a2 - 8);
          *v17 = *v18;
          *(_QWORD *)(a1 + 40) = v42;
          *v18 = v41;
          *(_QWORD *)(a2 - 8) = v40;
          if (*(double *)(a1 + 40) > *(double *)(a1 + 16))
          {
            v43 = *(_QWORD *)(a1 + 16);
            v44 = *(__n128 *)a1;
            *(__n128 *)a1 = *v17;
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 40);
            *v17 = v44;
            *(_QWORD *)(a1 + 40) = v43;
          }
        }
      }
      else if (v20 <= v19)
      {
        v56 = *(_QWORD *)(a1 + 16);
        v57 = *(__n128 *)a1;
        *(__n128 *)a1 = *v17;
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 40);
        *v17 = v57;
        *(_QWORD *)(a1 + 40) = v56;
        if (*(double *)(a2 - 8) > *(double *)(a1 + 40))
        {
          v58 = *(_QWORD *)(a1 + 40);
          v59 = *v17;
          v60 = *(_QWORD *)(a2 - 8);
          *v17 = *v18;
          *(_QWORD *)(a1 + 40) = v60;
          *v18 = v59;
          *(_QWORD *)(a2 - 8) = v58;
        }
      }
      else
      {
        v21 = *(_QWORD *)(a1 + 16);
        v22 = *(__n128 *)a1;
        v23 = *(_QWORD *)(a2 - 8);
        *(__n128 *)a1 = *v18;
        *(_QWORD *)(a1 + 16) = v23;
        *v18 = v22;
        *(_QWORD *)(a2 - 8) = v21;
      }
      return result;
    case 4uLL:
      sub_19C364434((__n128 *)a1, (__n128 *)(a1 + 24), (__n128 *)(a1 + 48), (__n128 *)(a2 - 24), a3);
      return 1;
    case 5uLL:
      v24 = (__n128 *)(a1 + 24);
      v25 = (__n128 *)(a1 + 48);
      v26 = (__n128 *)(a1 + 72);
      sub_19C364434((__n128 *)a1, (__n128 *)(a1 + 24), (__n128 *)(a1 + 48), (__n128 *)(a1 + 72), a3);
      if (*(double *)(a2 - 8) > *(double *)(a1 + 88))
      {
        v27 = *(_QWORD *)(a1 + 88);
        v28 = *v26;
        v29 = *(_QWORD *)(a2 - 8);
        *v26 = *(__n128 *)(a2 - 24);
        *(_QWORD *)(a1 + 88) = v29;
        *(__n128 *)(a2 - 24) = v28;
        *(_QWORD *)(a2 - 8) = v27;
        if (*(double *)(a1 + 88) > *(double *)(a1 + 64))
        {
          v30 = *(_QWORD *)(a1 + 64);
          v31 = *v25;
          *v25 = *v26;
          *(_QWORD *)(a1 + 64) = *(_QWORD *)(a1 + 88);
          *v26 = v31;
          *(_QWORD *)(a1 + 88) = v30;
          if (*(double *)(a1 + 64) > *(double *)(a1 + 40))
          {
            v32 = *(_QWORD *)(a1 + 40);
            v33 = *v24;
            *v24 = *v25;
            *(_QWORD *)(a1 + 40) = *(_QWORD *)(a1 + 64);
            *v25 = v33;
            *(_QWORD *)(a1 + 64) = v32;
            if (*(double *)(a1 + 40) > *(double *)(a1 + 16))
            {
              v34 = *(_QWORD *)(a1 + 16);
              v35 = *(__n128 *)a1;
              *(__n128 *)a1 = *v24;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 40);
              *v24 = v35;
              *(_QWORD *)(a1 + 40) = v34;
            }
          }
        }
      }
      return 1;
    default:
      v10 = (__n128 *)(a1 + 48);
      v11 = (__n128 *)(a1 + 24);
      v12 = *(double *)(a1 + 40);
      v13 = *(double *)(a1 + 16);
      v14 = *(double *)(a1 + 64);
      if (v12 <= v13)
      {
        if (v14 > v12)
        {
          v36 = *(_QWORD *)(a1 + 40);
          v37 = *v11;
          *v11 = *v10;
          *(_QWORD *)(a1 + 40) = *(_QWORD *)(a1 + 64);
          *v10 = v37;
          *(_QWORD *)(a1 + 64) = v36;
          if (*(double *)(a1 + 40) > v13)
          {
            v38 = *(_QWORD *)(a1 + 16);
            v39 = *(__n128 *)a1;
            *(__n128 *)a1 = *v11;
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 40);
            *v11 = v39;
            *(_QWORD *)(a1 + 40) = v38;
          }
        }
      }
      else if (v14 <= v12)
      {
        v45 = *(_QWORD *)(a1 + 16);
        v46 = *(__n128 *)a1;
        *(__n128 *)a1 = *v11;
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 40);
        *v11 = v46;
        *(_QWORD *)(a1 + 40) = v45;
        if (v14 > *(double *)(a1 + 40))
        {
          v47 = *(_QWORD *)(a1 + 40);
          v48 = *v11;
          *v11 = *v10;
          *(_QWORD *)(a1 + 40) = *(_QWORD *)(a1 + 64);
          *v10 = v48;
          *(_QWORD *)(a1 + 64) = v47;
        }
      }
      else
      {
        v15 = *(_QWORD *)(a1 + 16);
        v16 = *(__n128 *)a1;
        *(__n128 *)a1 = *v10;
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 64);
        *v10 = v16;
        *(_QWORD *)(a1 + 64) = v15;
      }
      v49 = a1 + 72;
      if (a1 + 72 == a2)
        return 1;
      v50 = 0;
      v51 = 0;
      break;
  }
  while (1)
  {
    v53 = *(double *)(v49 + 16);
    if (v53 > v10[1].n128_f64[0])
    {
      v61 = *(_OWORD *)v49;
      v54 = v50;
      do
      {
        v55 = a1 + v54;
        *(_OWORD *)(v55 + 72) = *(_OWORD *)(a1 + v54 + 48);
        *(_QWORD *)(v55 + 88) = *(_QWORD *)(a1 + v54 + 64);
        if (v54 == -48)
        {
          v52 = a1;
          goto LABEL_27;
        }
        v54 -= 24;
      }
      while (v53 > *(double *)(v55 + 40));
      v52 = a1 + v54 + 72;
LABEL_27:
      *(_OWORD *)v52 = v61;
      *(double *)(v52 + 16) = v53;
      if (++v51 == 8)
        return v49 + 24 == a2;
    }
    v10 = (__n128 *)v49;
    v50 += 24;
    v49 += 24;
    if (v49 == a2)
      return 1;
  }
}

uint64_t *sub_19C364A20(_QWORD *a1, uint64_t a2)
{
  _BYTE *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t **v11;
  uint64_t *v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *result;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  v2 = (_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v5 = v4;
  }
  v6 = sub_19C2A0F2C((uint64_t)&v25, (uint64_t *)a2, v5);
  v7 = (int8x8_t)a1[1];
  if (v7)
  {
    v8 = v6;
    v9 = (uint8x8_t)vcnt_s8(v7);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v10 = v6;
      if (v6 >= *(_QWORD *)&v7)
        v10 = v6 % *(_QWORD *)&v7;
    }
    else
    {
      v10 = (*(_QWORD *)&v7 - 1) & v6;
    }
    v11 = *(uint64_t ***)(*a1 + 8 * v10);
    if (v11)
    {
      v12 = *v11;
      if (*v11)
      {
        v13 = v2[23];
        if (v13 >= 0)
          v14 = v2[23];
        else
          v14 = *((_QWORD *)v2 + 1);
        if (v13 < 0)
          v2 = *(_BYTE **)v2;
        if (v9.u32[0] < 2uLL)
        {
          v15 = *(_QWORD *)&v7 - 1;
          while (1)
          {
            v21 = v12[1];
            if (v8 == v21)
            {
              v22 = *((unsigned __int8 *)v12 + 39);
              if ((v22 & 0x80u) == 0)
                v23 = *((unsigned __int8 *)v12 + 39);
              else
                v23 = v12[3];
              if (v23 == v14)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v12[2], v2, v12[3]))
                    return v12;
                }
                else
                {
                  if (!*((_BYTE *)v12 + 39))
                    return v12;
                  v24 = 0;
                  while (*((unsigned __int8 *)v12 + v24 + 16) == v2[v24])
                  {
                    if (v22 == ++v24)
                      return v12;
                  }
                }
              }
            }
            else if ((v21 & v15) != v10)
            {
              return 0;
            }
            result = 0;
            v12 = (uint64_t *)*v12;
            if (!v12)
              return result;
          }
        }
        while (1)
        {
          v17 = v12[1];
          if (v8 == v17)
          {
            v18 = *((unsigned __int8 *)v12 + 39);
            if ((v18 & 0x80u) == 0)
              v19 = *((unsigned __int8 *)v12 + 39);
            else
              v19 = v12[3];
            if (v19 == v14)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v12[2], v2, v12[3]))
                  return v12;
              }
              else
              {
                if (!*((_BYTE *)v12 + 39))
                  return v12;
                v20 = 0;
                while (*((unsigned __int8 *)v12 + v20 + 16) == v2[v20])
                {
                  if (v18 == ++v20)
                    return v12;
                }
              }
            }
          }
          else
          {
            if (v17 >= *(_QWORD *)&v7)
              v17 %= *(_QWORD *)&v7;
            if (v17 != v10)
              return 0;
          }
          result = 0;
          v12 = (uint64_t *)*v12;
          if (!v12)
            return result;
        }
      }
    }
  }
  return 0;
}

double sub_19C364C1C(uint64_t a1, uint64_t a2, __int128 *a3)
{
  unint64_t v6;
  _QWORD *v7;
  __int128 v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  __int128 v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  uint8x8_t v20;
  void **v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  float v26;
  float v27;
  _BOOL8 v28;
  unint64_t v29;
  unint64_t v30;
  size_t prime;
  void *v32;
  void *v33;
  uint64_t v34;
  _QWORD *v35;
  size_t v36;
  size_t v37;
  size_t v38;
  _QWORD *i;
  size_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint8x8_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  size_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  unint64_t v52;
  void **v53;
  double result;
  void *v55;
  __int128 *v56;
  __int128 v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char v61;

  v7 = *(_QWORD **)(a1 + 112);
  v6 = *(_QWORD *)(a1 + 120);
  if ((unint64_t)v7 >= v6)
  {
    v10 = *(_QWORD **)(a1 + 104);
    v11 = 0xAAAAAAAAAAAAAAABLL * (v7 - v10) + 1;
    if (v11 > 0xAAAAAAAAAAAAAAALL)
      sub_19C2A18E8();
    v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - (_QWORD)v10) >> 3);
    if (2 * v12 > v11)
      v11 = 2 * v12;
    if (v12 >= 0x555555555555555)
      v13 = 0xAAAAAAAAAAAAAAALL;
    else
      v13 = v11;
    if (v13)
    {
      if (v13 > 0xAAAAAAAAAAAAAAALL)
        sub_19C2A143C();
      v14 = (char *)operator new(24 * v13);
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[8 * (v7 - v10)];
    *(_OWORD *)v15 = *a3;
    *((_QWORD *)v15 + 2) = *((_QWORD *)a3 + 2);
    v9 = v15 + 24;
    if (v7 != v10)
    {
      do
      {
        v16 = *(_OWORD *)(v7 - 3);
        *((_QWORD *)v15 - 1) = *(v7 - 1);
        *(_OWORD *)(v15 - 24) = v16;
        v15 -= 24;
        v7 -= 3;
      }
      while (v7 != v10);
      v7 = *(_QWORD **)(a1 + 104);
    }
    *(_QWORD *)(a1 + 104) = v15;
    *(_QWORD *)(a1 + 112) = v9;
    *(_QWORD *)(a1 + 120) = &v14[24 * v13];
    if (v7)
      operator delete(v7);
  }
  else
  {
    v8 = *a3;
    v7[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)v7 = v8;
    v9 = v7 + 3;
  }
  *(_QWORD *)(a1 + 112) = v9;
  v17 = -1431655765 * (((unint64_t)v9 - *(_QWORD *)(a1 + 104)) >> 3) - 1;
  v56 = (__int128 *)a2;
  *((_DWORD *)sub_19C365254(a1 + 24, a2, &v56) + 10) = v17;
  LODWORD(v56) = v17;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_19C2B5238(&v57, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    v57 = *(_OWORD *)a2;
    v58 = *(_QWORD *)(a2 + 16);
  }
  v18 = *((unsigned int *)a3 + 1);
  v19 = *(_QWORD *)(a1 + 72);
  if (v19)
  {
    v20 = (uint8x8_t)vcnt_s8((int8x8_t)v19);
    v20.i16[0] = vaddlv_u8(v20);
    if (v20.u32[0] > 1uLL)
    {
      a2 = *((unsigned int *)a3 + 1);
      if (v19 <= v18)
        a2 = v18 % v19;
    }
    else
    {
      a2 = ((_DWORD)v19 - 1) & v18;
    }
    v21 = *(void ***)(*(_QWORD *)(a1 + 64) + 8 * a2);
    if (v21)
    {
      v22 = (char *)*v21;
      if (*v21)
      {
        if (v20.u32[0] < 2uLL)
        {
          while (1)
          {
            v24 = *((_QWORD *)v22 + 1);
            if (v24 == v18)
            {
              if (*((_DWORD *)v22 + 4) == (_DWORD)v18)
                goto LABEL_102;
            }
            else if ((v24 & (v19 - 1)) != a2)
            {
              goto LABEL_42;
            }
            v22 = *(char **)v22;
            if (!v22)
              goto LABEL_42;
          }
        }
        do
        {
          v23 = *((_QWORD *)v22 + 1);
          if (v23 == v18)
          {
            if (*((_DWORD *)v22 + 4) == (_DWORD)v18)
              goto LABEL_102;
          }
          else
          {
            if (v23 >= v19)
              v23 %= v19;
            if (v23 != a2)
              break;
          }
          v22 = *(char **)v22;
        }
        while (v22);
      }
    }
  }
LABEL_42:
  v22 = (char *)operator new(0x38uLL);
  v25 = (_QWORD *)(a1 + 80);
  v59 = v22;
  v60 = a1 + 80;
  *(_QWORD *)v22 = 0;
  *((_QWORD *)v22 + 1) = v18;
  *((_DWORD *)v22 + 4) = v18;
  *((_DWORD *)v22 + 6) = 0;
  *((_QWORD *)v22 + 5) = 0;
  *((_QWORD *)v22 + 6) = 0;
  *((_QWORD *)v22 + 4) = 0;
  v61 = 1;
  v26 = (float)(unint64_t)(*(_QWORD *)(a1 + 88) + 1);
  v27 = *(float *)(a1 + 96);
  if (v19 && (float)(v27 * (float)v19) >= v26)
  {
    v18 = a2;
    goto LABEL_92;
  }
  v28 = 1;
  if (v19 >= 3)
    v28 = (v19 & (v19 - 1)) != 0;
  v29 = v28 | (2 * v19);
  v30 = vcvtps_u32_f32(v26 / v27);
  if (v29 <= v30)
    prime = v30;
  else
    prime = v29;
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
    v19 = *(_QWORD *)(a1 + 72);
  }
  if (prime > v19)
  {
LABEL_55:
    if (prime >> 61)
      sub_19C2A143C();
    v32 = operator new(8 * prime);
    v33 = *(void **)(a1 + 64);
    *(_QWORD *)(a1 + 64) = v32;
    if (v33)
      operator delete(v33);
    v34 = 0;
    *(_QWORD *)(a1 + 72) = prime;
    do
      *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v34++) = 0;
    while (prime != v34);
    v35 = (_QWORD *)*v25;
    if (!*v25)
      goto LABEL_79;
    v36 = v35[1];
    v37 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v38 = v36 & v37;
      *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v38) = v25;
      for (i = (_QWORD *)*v35; *v35; i = (_QWORD *)*v35)
      {
        v40 = i[1] & v37;
        if (v40 == v38)
        {
          v35 = i;
        }
        else
        {
          v41 = *(_QWORD *)(a1 + 64);
          if (*(_QWORD *)(v41 + 8 * v40))
          {
            *v35 = *i;
            v42 = 8 * v40;
            *i = **(_QWORD **)(*(_QWORD *)(a1 + 64) + v42);
            **(_QWORD **)(*(_QWORD *)(a1 + 64) + v42) = i;
          }
          else
          {
            *(_QWORD *)(v41 + 8 * v40) = v35;
            v35 = i;
            v38 = v40;
          }
        }
      }
LABEL_79:
      v19 = prime;
      goto LABEL_80;
    }
    if (v36 >= prime)
      v36 %= prime;
    *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v36) = v25;
    v46 = (_QWORD *)*v35;
    if (!*v35)
      goto LABEL_79;
    while (1)
    {
      v48 = v46[1];
      if (v48 >= prime)
        v48 %= prime;
      if (v48 != v36)
      {
        v49 = *(_QWORD *)(a1 + 64);
        if (!*(_QWORD *)(v49 + 8 * v48))
        {
          *(_QWORD *)(v49 + 8 * v48) = v35;
          goto LABEL_84;
        }
        *v35 = *v46;
        v47 = 8 * v48;
        *v46 = **(_QWORD **)(*(_QWORD *)(a1 + 64) + v47);
        **(_QWORD **)(*(_QWORD *)(a1 + 64) + v47) = v46;
        v46 = v35;
      }
      v48 = v36;
LABEL_84:
      v35 = v46;
      v46 = (_QWORD *)*v46;
      v36 = v48;
      if (!v46)
        goto LABEL_79;
    }
  }
  if (prime >= v19)
    goto LABEL_80;
  v43 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 88) / *(float *)(a1 + 96));
  if (v19 < 3 || (v44 = (uint8x8_t)vcnt_s8((int8x8_t)v19), v44.i16[0] = vaddlv_u8(v44), v44.u32[0] > 1uLL))
  {
    v43 = std::__next_prime(v43);
  }
  else
  {
    v45 = 1 << -(char)__clz(v43 - 1);
    if (v43 >= 2)
      v43 = v45;
  }
  if (prime <= v43)
    prime = v43;
  if (prime < v19)
  {
    if (!prime)
    {
      v55 = *(void **)(a1 + 64);
      *(_QWORD *)(a1 + 64) = 0;
      if (v55)
        operator delete(v55);
      v19 = 0;
      *(_QWORD *)(a1 + 72) = 0;
      goto LABEL_80;
    }
    goto LABEL_55;
  }
  v19 = *(_QWORD *)(a1 + 72);
LABEL_80:
  if ((v19 & (v19 - 1)) != 0)
  {
    if (v19 <= v18)
      v18 %= v19;
  }
  else
  {
    v18 = ((_DWORD)v19 - 1) & v18;
  }
LABEL_92:
  v50 = *(_QWORD *)(a1 + 64);
  v51 = *(_QWORD **)(v50 + 8 * v18);
  if (v51)
  {
    *(_QWORD *)v22 = *v51;
LABEL_100:
    *v51 = v22;
    goto LABEL_101;
  }
  *(_QWORD *)v22 = *v25;
  *v25 = v22;
  *(_QWORD *)(v50 + 8 * v18) = v25;
  if (*(_QWORD *)v22)
  {
    v52 = *(_QWORD *)(*(_QWORD *)v22 + 8);
    if ((v19 & (v19 - 1)) != 0)
    {
      if (v52 >= v19)
        v52 %= v19;
    }
    else
    {
      v52 &= v19 - 1;
    }
    v51 = (_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v52);
    goto LABEL_100;
  }
LABEL_101:
  ++*(_QWORD *)(a1 + 88);
LABEL_102:
  *((_DWORD *)v22 + 6) = (_DWORD)v56;
  v53 = (void **)(v22 + 32);
  if (v22[55] < 0)
    operator delete(*v53);
  result = *(double *)&v57;
  *(_OWORD *)v53 = v57;
  *((_QWORD *)v22 + 6) = v58;
  return result;
}

void sub_19C365228(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17)
{
  sub_19C365800(&a17);
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t *sub_19C365254(uint64_t a1, uint64_t a2, __int128 **a3)
{
  unint64_t v3;
  _BYTE *v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t **v13;
  uint64_t *v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  char *v26;
  _BYTE *v27;
  __int128 *v28;
  __int128 v29;
  float v30;
  float v31;
  _BOOL8 v32;
  unint64_t v33;
  unint64_t v34;
  size_t prime;
  void *v36;
  void *v37;
  uint64_t v38;
  _QWORD *v39;
  size_t v40;
  size_t v41;
  size_t v42;
  _QWORD *i;
  size_t v44;
  uint64_t v45;
  unint64_t v46;
  uint8x8_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  size_t v51;
  _QWORD *v52;
  unint64_t v53;
  void *v55;
  _QWORD v56[2];
  char v57;

  v5 = (_BYTE *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v8 = v7;
  }
  v9 = sub_19C2A0F2C((uint64_t)v56, (uint64_t *)a2, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v3 = v9;
      if (v9 >= v11)
        v3 = v9 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v9;
    }
    v13 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        v15 = v5[23];
        if (v15 >= 0)
          v16 = v5[23];
        else
          v16 = *((_QWORD *)v5 + 1);
        if (v15 < 0)
          v5 = *(_BYTE **)v5;
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v21 = v14[1];
            if (v21 == v10)
            {
              v22 = *((unsigned __int8 *)v14 + 39);
              if ((v22 & 0x80u) == 0)
                v23 = *((unsigned __int8 *)v14 + 39);
              else
                v23 = v14[3];
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v14[2], v5, v14[3]))
                    return v14;
                }
                else
                {
                  if (!*((_BYTE *)v14 + 39))
                    return v14;
                  v24 = 0;
                  while (*((unsigned __int8 *)v14 + v24 + 16) == v5[v24])
                  {
                    if (v22 == ++v24)
                      return v14;
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            v14 = (uint64_t *)*v14;
            if (!v14)
              goto LABEL_51;
          }
        }
        do
        {
          v17 = v14[1];
          if (v17 == v10)
          {
            v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0)
              v19 = *((unsigned __int8 *)v14 + 39);
            else
              v19 = v14[3];
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v14[2], v5, v14[3]))
                  return v14;
              }
              else
              {
                if (!*((_BYTE *)v14 + 39))
                  return v14;
                v20 = 0;
                while (*((unsigned __int8 *)v14 + v20 + 16) == v5[v20])
                {
                  if (v18 == ++v20)
                    return v14;
                }
              }
            }
          }
          else
          {
            if (v17 >= v11)
              v17 %= v11;
            if (v17 != v3)
              break;
          }
          v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  v25 = (_QWORD *)(a1 + 16);
  v26 = (char *)operator new(0x30uLL);
  v56[0] = v26;
  v56[1] = a1 + 16;
  v57 = 0;
  *(_QWORD *)v26 = 0;
  *((_QWORD *)v26 + 1) = v10;
  v27 = v26 + 16;
  v28 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    sub_19C2B5238(v27, *(void **)v28, *((_QWORD *)v28 + 1));
  }
  else
  {
    v29 = *v28;
    *((_QWORD *)v26 + 4) = *((_QWORD *)v28 + 2);
    *(_OWORD *)v27 = v29;
  }
  *((_DWORD *)v26 + 10) = 0;
  v57 = 1;
  v30 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v31 = *(float *)(a1 + 32);
  if (!v11 || (float)(v31 * (float)v11) < v30)
  {
    v32 = 1;
    if (v11 >= 3)
      v32 = (v11 & (v11 - 1)) != 0;
    v33 = v32 | (2 * v11);
    v34 = vcvtps_u32_f32(v30 / v31);
    if (v33 <= v34)
      prime = v34;
    else
      prime = v33;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    if (prime <= v11)
    {
      if (prime >= v11)
        goto LABEL_91;
      v46 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v11 < 3 || (v47 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v47.i16[0] = vaddlv_u8(v47), v47.u32[0] > 1uLL))
      {
        v46 = std::__next_prime(v46);
      }
      else
      {
        v48 = 1 << -(char)__clz(v46 - 1);
        if (v46 >= 2)
          v46 = v48;
      }
      if (prime <= v46)
        prime = v46;
      if (prime >= v11)
      {
        v11 = *(_QWORD *)(a1 + 8);
LABEL_91:
        if ((v11 & (v11 - 1)) != 0)
        {
          if (v10 >= v11)
            v3 = v10 % v11;
          else
            v3 = v10;
        }
        else
        {
          v3 = (v11 - 1) & v10;
        }
        goto LABEL_104;
      }
      if (!prime)
      {
        v55 = *(void **)a1;
        *(_QWORD *)a1 = 0;
        if (v55)
          operator delete(v55);
        v11 = 0;
        *(_QWORD *)(a1 + 8) = 0;
        goto LABEL_91;
      }
    }
    if (prime >> 61)
      sub_19C2A143C();
    v36 = operator new(8 * prime);
    v37 = *(void **)a1;
    *(_QWORD *)a1 = v36;
    if (v37)
      operator delete(v37);
    v38 = 0;
    *(_QWORD *)(a1 + 8) = prime;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v38++) = 0;
    while (prime != v38);
    v39 = (_QWORD *)*v25;
    if (!*v25)
    {
LABEL_90:
      v11 = prime;
      goto LABEL_91;
    }
    v40 = v39[1];
    v41 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v42 = v40 & v41;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v42) = v25;
      for (i = (_QWORD *)*v39; *v39; i = (_QWORD *)*v39)
      {
        v44 = i[1] & v41;
        if (v44 == v42)
        {
          v39 = i;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v44))
        {
          *v39 = *i;
          v45 = 8 * v44;
          *i = **(_QWORD **)(*(_QWORD *)a1 + v45);
          **(_QWORD **)(*(_QWORD *)a1 + v45) = i;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v44) = v39;
          v39 = i;
          v42 = v44;
        }
      }
      goto LABEL_90;
    }
    if (v40 >= prime)
      v40 %= prime;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v40) = v25;
    v49 = (_QWORD *)*v39;
    if (!*v39)
      goto LABEL_90;
    while (1)
    {
      v51 = v49[1];
      if (v51 >= prime)
        v51 %= prime;
      if (v51 != v40)
      {
        if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v51))
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v51) = v39;
          goto LABEL_95;
        }
        *v39 = *v49;
        v50 = 8 * v51;
        *v49 = **(_QWORD **)(*(_QWORD *)a1 + v50);
        **(_QWORD **)(*(_QWORD *)a1 + v50) = v49;
        v49 = v39;
      }
      v51 = v40;
LABEL_95:
      v39 = v49;
      v49 = (_QWORD *)*v49;
      v40 = v51;
      if (!v49)
        goto LABEL_90;
    }
  }
LABEL_104:
  v52 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v52)
  {
    *(_QWORD *)v56[0] = *v52;
    *v52 = v56[0];
  }
  else
  {
    *(_QWORD *)v56[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v56[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = v25;
    if (*(_QWORD *)v56[0])
    {
      v53 = *(_QWORD *)(*(_QWORD *)v56[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v53 >= v11)
          v53 %= v11;
      }
      else
      {
        v53 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v53) = v56[0];
    }
  }
  v14 = (uint64_t *)v56[0];
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_19C3657E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C30CBE8((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_19C365800(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16) && *(char *)(v2 + 55) < 0)
      operator delete(*(void **)(v2 + 32));
    operator delete((void *)v2);
  }
  return a1;
}

CFIndex sub_19C36584C(uint64_t a1, CFArrayRef theArray)
{
  CFIndex v4;
  const __CFString *v5;
  CFIndex result;
  const __CFString *ValueAtIndex;
  CFTypeID v8;
  CFTypeID TypeID;
  CFTypeID v10;
  const __CFString *Value;
  unint64_t v12;
  __int128 v13;
  char *v14;
  int v15;
  std::logic_error *exception;
  void *__p[2];
  uint64_t v18;

  v4 = 0;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v5 = (const __CFString *)*MEMORY[0x1E0C9B088];
  while (1)
  {
    result = CFArrayGetCount(theArray);
    if (v4 >= result)
      return result;
    ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(theArray, v4);
    v8 = CFGetTypeID(ValueAtIndex);
    TypeID = CFStringGetTypeID();
    if (v8 == TypeID)
    {
      ValueAtIndex = (const __CFString *)CFLocaleCreate(0, ValueAtIndex);
    }
    else
    {
      v10 = CFGetTypeID(ValueAtIndex);
      if (v10 != CFLocaleGetTypeID())
      {
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "invalid locale value for creating vocabulary");
        exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
        __cxa_throw(exception, (struct type_info *)off_1E3D2F2D0, MEMORY[0x1E0DE4360]);
      }
    }
    Value = (const __CFString *)CFLocaleGetValue((CFLocaleRef)ValueAtIndex, v5);
    sub_19C29CEF8(Value, __p);
    v12 = *(_QWORD *)(a1 + 8);
    if (v12 < *(_QWORD *)(a1 + 16))
    {
      v13 = *(_OWORD *)__p;
      *(_QWORD *)(v12 + 16) = v18;
      *(_OWORD *)v12 = v13;
      *(_QWORD *)(a1 + 8) = v12 + 24;
      if (v8 != TypeID)
        goto LABEL_2;
LABEL_12:
      CFRelease(ValueAtIndex);
      goto LABEL_2;
    }
    v14 = sub_19C307C78((void **)a1, (uint64_t)__p);
    v15 = SHIBYTE(v18);
    *(_QWORD *)(a1 + 8) = v14;
    if ((v15 & 0x80000000) == 0)
    {
      if (v8 != TypeID)
        goto LABEL_2;
      goto LABEL_12;
    }
    operator delete(__p[0]);
    if (v8 == TypeID)
      goto LABEL_12;
LABEL_2:
    ++v4;
  }
}

void sub_19C3659D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void **v15;

  sub_19C307B68(v15);
  _Unwind_Resume(a1);
}

_QWORD *sub_19C365A24(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void **v6;
  void *v7;
  void **v8;
  void *v9;
  void **v11;
  void **v12;

  *a1 = &off_1E3D35298;
  v2 = a1[16];
  if (v2)
  {
    v3 = a1[17];
    v4 = (void *)a1[16];
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0)
          operator delete(*(void **)(v3 - 24));
        v3 -= 24;
      }
      while (v3 != v2);
      v4 = (void *)a1[16];
    }
    a1[17] = v2;
    operator delete(v4);
  }
  v5 = (void *)a1[13];
  if (v5)
  {
    a1[14] = v5;
    operator delete(v5);
  }
  v6 = (void **)a1[10];
  if (v6)
  {
    do
    {
      v11 = (void **)*v6;
      if (*((char *)v6 + 55) < 0)
        operator delete(v6[4]);
      operator delete(v6);
      v6 = v11;
    }
    while (v11);
  }
  v7 = (void *)a1[8];
  a1[8] = 0;
  if (v7)
    operator delete(v7);
  v8 = (void **)a1[5];
  if (v8)
  {
    do
    {
      v12 = (void **)*v8;
      if (*((char *)v8 + 39) < 0)
        operator delete(v8[2]);
      operator delete(v8);
      v8 = v12;
    }
    while (v12);
  }
  v9 = (void *)a1[3];
  a1[3] = 0;
  if (v9)
    operator delete(v9);
  return a1;
}

_QWORD *sub_19C365B30(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E3D36E78;
  v2 = (void *)a1[1];
  if (v2)
    munmap(v2, a1[2]);
  a1[2] = 0;
  return a1;
}

void sub_19C365B74(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E3D36E78;
  v2 = (void *)a1[1];
  if (v2)
    munmap(v2, a1[2]);
  a1[2] = 0;
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C365BC8()
{
  return 1;
}

uint64_t sub_19C365BD0(_QWORD *a1, unsigned int *a2, unint64_t a3)
{
  unsigned int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t *v10;
  _QWORD *v11;
  unint64_t v12;
  unsigned int v14;
  _DWORD *v15;
  _DWORD *v16;
  unint64_t v17;
  unsigned int *v18;
  _DWORD *v19;
  unsigned int v20;

  if (a3 > 2)
  {
    if (a3 == 3)
    {
      v5 = a1[10];
      if (v5)
      {
        v6 = ((a2[1] << 16) | ((unint64_t)*a2 << 32)) + a2[2];
        v7 = (_QWORD *)a1[9];
        v8 = &v7[2 * v5];
        do
        {
          v9 = v5 >> 1;
          v10 = &v7[2 * (v5 >> 1)];
          v12 = *v10;
          v11 = v10 + 2;
          v5 += ~(v5 >> 1);
          if (v12 < v6)
            v7 = v11;
          else
            v5 = v9;
        }
        while (v5);
        if (v7 != v8 && *v7 == v6)
          return *((unsigned int *)v7 + 2);
      }
    }
    return 0;
  }
  if (a3 == 2)
  {
    v3 = a2[1];
    v4 = a1[8];
    if (!v4)
      return 0;
  }
  else
  {
    v3 = 0;
    v4 = a1[8];
    if (!v4)
      return 0;
  }
  v14 = v3 + (*a2 << 16);
  v15 = (_DWORD *)a1[7];
  v16 = &v15[2 * v4];
  do
  {
    v17 = v4 >> 1;
    v18 = &v15[2 * (v4 >> 1)];
    v20 = *v18;
    v19 = v18 + 2;
    v4 += ~(v4 >> 1);
    if (v20 < v14)
      v15 = v19;
    else
      v4 = v17;
  }
  while (v4);
  if (v15 != v16 && *v15 == v14)
    return v15[1];
  return 0;
}

uint64_t sub_19C365CC4(_QWORD *a1, unsigned int a2, _DWORD *a3, uint64_t a4)
{
  unint64_t v4;
  _DWORD *v5;
  _DWORD *v6;
  unint64_t v7;
  unsigned int *v8;
  _DWORD *v9;
  unsigned int v10;
  unint64_t v12;
  _DWORD *v13;
  _DWORD *v14;
  unint64_t v15;
  unsigned int *v16;
  _DWORD *v17;
  unsigned int v18;
  uint64_t v19;

  v4 = a1[4];
  if (!v4)
    goto LABEL_14;
  v5 = (_DWORD *)a1[3];
  v6 = &v5[2 * v4];
  do
  {
    v7 = v4 >> 1;
    v8 = &v5[2 * (v4 >> 1)];
    v10 = *v8;
    v9 = v8 + 2;
    v4 += ~(v4 >> 1);
    if (v10 < a2)
      v5 = v9;
    else
      v4 = v7;
  }
  while (v4);
  if (v5 != v6 && *v5 == a2)
  {
    if (a4)
    {
      *a3 = *((unsigned __int16 *)v5 + 3);
      a3[1] = *((unsigned __int16 *)v5 + 2);
    }
    if (*((_WORD *)v5 + 2))
      return 2;
    else
      return 1;
  }
  else
  {
LABEL_14:
    v12 = a1[6];
    if (!v12)
      goto LABEL_25;
    v13 = (_DWORD *)a1[5];
    v14 = &v13[4 * v12];
    do
    {
      v15 = v12 >> 1;
      v16 = &v13[4 * (v12 >> 1)];
      v18 = *v16;
      v17 = v16 + 4;
      v12 += ~(v12 >> 1);
      if (v18 < a2)
        v13 = v17;
      else
        v12 = v15;
    }
    while (v12);
    if (v13 != v14 && *v13 == a2)
    {
      if (a4)
      {
        v19 = *((_QWORD *)v13 + 1);
        *a3 = HIDWORD(v19);
        a3[1] = WORD1(v19);
        a3[2] = (unsigned __int16)v19;
      }
      return 3;
    }
    else
    {
LABEL_25:
      *a3 = 3;
      return 1;
    }
  }
}

uint64_t sub_19C365DB8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = a1[4];
  if (v1)
    LODWORD(v1) = *(_DWORD *)(a1[3] + 8 * v1 - 8);
  v2 = a1[6];
  if (v2)
    LODWORD(v2) = *(_DWORD *)(a1[5] + 16 * v2 - 16);
  if (v1 <= v2)
    return v2;
  else
    return v1;
}

uint64_t sub_19C365DEC()
{
  return 4;
}

BOOL sub_19C365DF4(uint64_t a1, unsigned int a2)
{
  if (a2 < 4)
    return 1;
  if (*(_DWORD *)(a1 + 112) <= a2)
    return *(_DWORD *)(a1 + 116) >= a2;
  return 0;
}

BOOL sub_19C365E28(uint64_t a1, unsigned int a2)
{
  return *(_DWORD *)(a1 + 88) <= a2 && *(_DWORD *)(a1 + 92) >= a2;
}

BOOL sub_19C365E4C(uint64_t a1, unsigned int a2)
{
  return *(_DWORD *)(a1 + 96) <= a2 && *(_DWORD *)(a1 + 100) >= a2;
}

BOOL sub_19C365E70(uint64_t a1, unsigned int a2)
{
  return *(_DWORD *)(a1 + 104) <= a2 && *(_DWORD *)(a1 + 108) >= a2;
}

uint64_t sub_19C365E94()
{
  return 0;
}

uint64_t sub_19C365E9C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 88);
}

uint64_t sub_19C365EA4(uint64_t a1)
{
  return *(_QWORD *)(a1 + 96);
}

uint64_t sub_19C365EAC(uint64_t a1)
{
  return *(_QWORD *)(a1 + 104);
}

void sub_19C365EB4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char **a4@<X8>)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unint64_t v8;
  int *v9;
  unint64_t v10;
  unsigned int *v11;
  int *v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  uint64_t *v19;
  unint64_t v20;
  int v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  unsigned int v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _BYTE *v31;
  char *v32;
  unint64_t v33;
  char *v34;
  int v35;
  uint64_t v36;
  _OWORD *v37;
  char *v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  unint64_t v46;
  int v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  _BYTE *v51;
  char *v52;
  unint64_t v53;
  char *v54;
  int v55;
  uint64_t v56;
  _OWORD *v57;
  char *v58;
  uint64_t v59;
  __int128 v60;
  unsigned int v61;
  uint64_t v62;

  if (!a3)
    goto LABEL_7;
  v5 = a2 + 4 * a3;
  v6 = *(_DWORD *)(v5 - 4);
  if (a3 != 1)
  {
    v7 = *(_DWORD *)(v5 - 8);
    if (*(_DWORD *)(a1 + 88) <= v7 && *(_DWORD *)(a1 + 92) >= v7)
    {
      v14 = v6 + (v7 << 16);
      v16 = *(uint64_t **)(a1 + 72);
      v15 = *(_QWORD *)(a1 + 80);
      while (v15)
      {
        v17 = v15 >> 1;
        v18 = (unint64_t *)&v16[2 * (v15 >> 1)];
        v20 = *v18;
        v19 = (uint64_t *)(v18 + 2);
        v15 += ~(v15 >> 1);
        if (v20 < (unint64_t)v14 << 16)
          v16 = v19;
        else
          v15 = v17;
      }
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      v41 = *v16;
      if (v14 != (unint64_t)*v16 >> 16)
        return;
      v42 = 0;
      v43 = 0;
      v44 = 0;
      v62 = v14;
      while (1)
      {
        v47 = (unsigned __int16)v41;
        if (!(_WORD)v41)
          goto LABEL_59;
        if (v44 >= v43)
          break;
        *(_DWORD *)v44 = (unsigned __int16)v41;
        v45 = v44 + 4;
LABEL_58:
        a4[1] = v45;
        v44 = v45;
LABEL_59:
        v46 = v16[2];
        v16 += 2;
        LOWORD(v41) = v46;
        if (v14 != v46 >> 16)
          return;
      }
      v48 = (v44 - v42) >> 2;
      v49 = v48 + 1;
      if ((unint64_t)(v48 + 1) >> 62)
        sub_19C2A18E8();
      if ((v43 - v42) >> 1 > v49)
        v49 = (v43 - v42) >> 1;
      if ((unint64_t)(v43 - v42) >= 0x7FFFFFFFFFFFFFFCLL)
        v50 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v50 = v49;
      if (v50)
      {
        if (v50 >> 62)
          sub_19C2A143C();
        v51 = operator new(4 * v50);
      }
      else
      {
        v51 = 0;
      }
      v52 = &v51[4 * v48];
      *(_DWORD *)v52 = v47;
      v45 = v52 + 4;
      if (v44 != v42)
      {
        v53 = v44 - 4 - v42;
        if (v53 >= 0xBC)
        {
          if (&v51[v44 - v42 - 4 - (v53 & 0xFFFFFFFFFFFFFFFCLL)] > &v51[v44 - v42 - 4])
          {
            v54 = v44;
          }
          else if (&v44[-(v53 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v44 - 4)
          {
            v54 = v44;
          }
          else if ((unint64_t)(v42 - v51) >= 0x20)
          {
            v56 = (v53 >> 2) + 1;
            v54 = &v44[-4 * (v56 & 0x7FFFFFFFFFFFFFF8)];
            v57 = &v51[4 * v48 - 16];
            v58 = v44 - 16;
            v59 = v56 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v60 = *(_OWORD *)v58;
              *(v57 - 1) = *((_OWORD *)v58 - 1);
              *v57 = v60;
              v57 -= 2;
              v58 -= 32;
              v59 -= 8;
            }
            while (v59);
            v52 -= 4 * (v56 & 0x7FFFFFFFFFFFFFF8);
            if (v56 == (v56 & 0x7FFFFFFFFFFFFFF8))
              goto LABEL_76;
          }
          else
          {
            v54 = v44;
          }
        }
        else
        {
          v54 = v44;
        }
        do
        {
          v55 = *((_DWORD *)v54 - 1);
          v54 -= 4;
          *((_DWORD *)v52 - 1) = v55;
          v52 -= 4;
        }
        while (v54 != v42);
      }
LABEL_76:
      v43 = &v51[4 * v50];
      *a4 = v52;
      a4[1] = v45;
      a4[2] = v43;
      if (v42)
        operator delete(v42);
      v42 = v52;
      v14 = v62;
      goto LABEL_58;
    }
  }
  if (*(_DWORD *)(a1 + 96) > v6 || *(_DWORD *)(a1 + 100) < v6)
  {
LABEL_7:
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return;
  }
  v9 = *(int **)(a1 + 56);
  v8 = *(_QWORD *)(a1 + 64);
  while (v8)
  {
    v10 = v8 >> 1;
    v11 = (unsigned int *)&v9[2 * (v8 >> 1)];
    v13 = *v11;
    v12 = (int *)(v11 + 2);
    v8 += ~(v8 >> 1);
    if (v13 < v6 << 16)
      v9 = v12;
    else
      v8 = v10;
  }
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v21 = *v9;
  if (v6 == HIWORD(*v9))
  {
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v61 = v6;
    while (1)
    {
      v27 = (unsigned __int16)v21;
      if (!(_WORD)v21)
        goto LABEL_25;
      if (v24 >= v23)
        break;
      *(_DWORD *)v24 = (unsigned __int16)v21;
      v25 = v24 + 4;
LABEL_24:
      a4[1] = v25;
      v24 = v25;
LABEL_25:
      v26 = v9[2];
      v9 += 2;
      LOWORD(v21) = v26;
      if (v6 != HIWORD(v26))
        return;
    }
    v28 = (v24 - v22) >> 2;
    v29 = v28 + 1;
    if ((unint64_t)(v28 + 1) >> 62)
      sub_19C2A18E8();
    if ((v23 - v22) >> 1 > v29)
      v29 = (v23 - v22) >> 1;
    if ((unint64_t)(v23 - v22) >= 0x7FFFFFFFFFFFFFFCLL)
      v30 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v30 = v29;
    if (v30)
    {
      if (v30 >> 62)
        sub_19C2A143C();
      v31 = operator new(4 * v30);
    }
    else
    {
      v31 = 0;
    }
    v32 = &v31[4 * v28];
    *(_DWORD *)v32 = v27;
    v25 = v32 + 4;
    if (v24 == v22)
      goto LABEL_42;
    v33 = v24 - 4 - v22;
    if (v33 < 0xBC)
    {
      v34 = v24;
      goto LABEL_41;
    }
    if (&v31[v24 - v22 - 4 - (v33 & 0xFFFFFFFFFFFFFFFCLL)] > &v31[v24 - v22 - 4])
    {
      v34 = v24;
    }
    else
    {
      if (&v24[-(v33 & 0xFFFFFFFFFFFFFFFCLL) - 4] <= v24 - 4)
      {
        if ((unint64_t)(v22 - v31) < 0x20)
        {
          v34 = v24;
          goto LABEL_41;
        }
        v36 = (v33 >> 2) + 1;
        v34 = &v24[-4 * (v36 & 0x7FFFFFFFFFFFFFF8)];
        v37 = &v31[4 * v28 - 16];
        v38 = v24 - 16;
        v39 = v36 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v40 = *(_OWORD *)v38;
          *(v37 - 1) = *((_OWORD *)v38 - 1);
          *v37 = v40;
          v37 -= 2;
          v38 -= 32;
          v39 -= 8;
        }
        while (v39);
        v32 -= 4 * (v36 & 0x7FFFFFFFFFFFFFF8);
        if (v36 != (v36 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_41;
LABEL_42:
        v23 = &v31[4 * v30];
        *a4 = v32;
        a4[1] = v25;
        a4[2] = v23;
        if (v22)
          operator delete(v22);
        v22 = v32;
        v6 = v61;
        goto LABEL_24;
      }
      v34 = v24;
    }
    do
    {
LABEL_41:
      v35 = *((_DWORD *)v34 - 1);
      v34 -= 4;
      *((_DWORD *)v32 - 1) = v35;
      v32 -= 4;
    }
    while (v34 != v22);
    goto LABEL_42;
  }
}

void sub_19C366324(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v2;

  if (v2)
  {
    *(_QWORD *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_19C366368(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v3;

  if (a3 && (v3 = *(_DWORD *)(a2 + 4 * a3 - 4), *(_DWORD *)(a1 + 96) <= v3))
    return *(_DWORD *)(a1 + 100) >= v3;
  else
    return 0;
}

void sub_19C366398()
{
  __assert_rtn("getFSTNetwork", "LMMontrealMultiTokenIDMapper.h", 60, "false");
}

_QWORD *sub_19C3663C0(_QWORD *a1, uint64_t a2)
{
  const char *v4;
  int v5;
  int v6;
  unint64_t st_size;
  void *v8;
  std::ios_base::failure *exception;
  int *v11;
  std::ios_base::failure *v12;
  int *v13;
  std::ios_base::failure *v14;
  int *v15;
  const void *v16;
  int v17;
  stat v18;

  *a1 = 0;
  a1[1] = 0;
  if (*(char *)(a2 + 23) >= 0)
    v4 = (const char *)a2;
  else
    v4 = *(const char **)a2;
  v5 = open(v4, 0);
  if (v5 < 0)
  {
    exception = (std::ios_base::failure *)__cxa_allocate_exception(0x20uLL);
    sub_19C2A6D48(&v18, "open()");
    v11 = __error();
    sub_19C3667C4(exception, (const void **)&v18, a2, *v11);
    __cxa_throw(exception, MEMORY[0x1E0DE4E48], MEMORY[0x1E0DE4CB0]);
  }
  v6 = v5;
  if (fstat(v5, &v18) < 0)
  {
    v12 = (std::ios_base::failure *)__cxa_allocate_exception(0x20uLL);
    sub_19C2A6D48(&v16, "fstat()");
    v13 = __error();
    sub_19C3667C4(v12, &v16, a2, *v13);
    __cxa_throw(v12, MEMORY[0x1E0DE4E48], MEMORY[0x1E0DE4CB0]);
  }
  st_size = v18.st_size;
  a1[1] = v18.st_size;
  if (st_size >= 0x7FFFFFFF)
    LODWORD(st_size) = 0x7FFFFFFF;
  v17 = st_size;
  v16 = 0;
  fcntl(v6, 44, &v16);
  v8 = mmap(0, a1[1], 1, 1, v6, 0);
  *a1 = v8;
  if (v8 == (void *)-1)
  {
    v14 = (std::ios_base::failure *)__cxa_allocate_exception(0x20uLL);
    sub_19C2A6D48(&v16, "mmap()");
    v15 = __error();
    sub_19C3667C4(v14, &v16, a2, *v15);
    __cxa_throw(v14, MEMORY[0x1E0DE4E48], MEMORY[0x1E0DE4CB0]);
  }
  close(v6);
  return a1;
}

void sub_19C366588(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  int v21;
  void *v22;
  int v23;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v23 & 1) == 0)
    {
LABEL_6:
      close(v21);
      _Unwind_Resume(a1);
    }
  }
  else if (!v23)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v22);
  goto LABEL_6;
}

uint64_t sub_19C36661C(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  void *exception;
  __n128 v6;
  std::string __dst;
  std::string v8;
  _BYTE v9[16];
  _QWORD v10[33];

  if (a1[1] <= 0x2FuLL)
  {
    sub_19C2B4F08((uint64_t)v9);
    sub_19C2A1B24(v10, (uint64_t)"(file_size=", 11);
    v2 = (_QWORD *)std::ostream::operator<<();
    sub_19C2A1B24(v2, (uint64_t)", offset=", 9);
    v3 = (_QWORD *)std::ostream::operator<<();
    sub_19C2A1B24(v3, (uint64_t)", object_size=", 14);
    v4 = (_QWORD *)std::ostream::operator<<();
    sub_19C2A1B24(v4, (uint64_t)")", 1);
    exception = __cxa_allocate_exception(0x10uLL);
    sub_19C351068(&__dst, (uint64_t)v9);
    v6 = sub_19C337C34(&v8, "attempted to read beyond the end of the mapped file ", &__dst);
    MEMORY[0x1A1AD3160](exception, &v8, v6);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  return *a1;
}

void sub_19C36671C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  void *v22;
  int v23;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v23 & 1) == 0)
    {
LABEL_8:
      sub_19C2B5034((uint64_t)&a22);
      _Unwind_Resume(a1);
    }
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t sub_19C36678C(uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  if (v2)
    munmap(v2, *(_QWORD *)(a1 + 8));
  *(_QWORD *)(a1 + 8) = 0;
  return a1;
}

void sub_19C3667C4(std::ios_base::failure *a1, const void **a2, uint64_t a3, unsigned int a4)
{
  int v4;
  size_t v5;
  unint64_t v6;
  std::string *p_dst;
  uint64_t v12;
  uint64_t v13;
  const void *v14;
  int v15;
  const std::string::value_type *v16;
  std::string::size_type v17;
  std::string *v18;
  __int128 v19;
  std::string *v20;
  __int128 v21;
  std::error_code __ec;
  std::string __dst;
  std::string v24;
  std::string __msg;

  v4 = *((char *)a2 + 23);
  if (v4 >= 0)
    v5 = *((unsigned __int8 *)a2 + 23);
  else
    v5 = (size_t)a2[1];
  v6 = v5 + 13;
  if (v5 + 13 >= 0x7FFFFFFFFFFFFFF8)
    sub_19C2A1A54();
  if (v6 >= 0x17)
  {
    v12 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v12 = v6 | 7;
    v13 = v12 + 1;
    p_dst = (std::string *)operator new(v12 + 1);
    __dst.__r_.__value_.__l.__size_ = v5 + 13;
    __dst.__r_.__value_.__r.__words[2] = v13 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v5 + 13;
    if (!v5)
      goto LABEL_15;
  }
  if (v4 >= 0)
    v14 = a2;
  else
    v14 = *a2;
  memmove(p_dst, v14, v5);
LABEL_15:
  strcpy((char *)p_dst + v5, " failed for '");
  v15 = *(char *)(a3 + 23);
  if (v15 >= 0)
    v16 = (const std::string::value_type *)a3;
  else
    v16 = *(const std::string::value_type **)a3;
  if (v15 >= 0)
    v17 = *(unsigned __int8 *)(a3 + 23);
  else
    v17 = *(_QWORD *)(a3 + 8);
  v18 = std::string::append(&__dst, v16, v17);
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v24.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  v20 = std::string::append(&v24, "'", 1uLL);
  v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  __msg.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__msg.__r_.__value_.__l.__data_ = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  *(_QWORD *)&__ec.__val_ = a4;
  __ec.__cat_ = std::generic_category();
  std::ios_base::failure::failure(a1, &__msg, &__ec);
  if (SHIBYTE(__msg.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__msg.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v24.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_23:
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return;
LABEL_27:
      operator delete(__dst.__r_.__value_.__l.__data_);
      return;
    }
  }
  else if ((SHIBYTE(v24.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_23;
  }
  operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_27;
}

void sub_19C36698C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a23 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a23 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a18);
  if ((a17 & 0x80000000) == 0)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(a12);
  _Unwind_Resume(exception_object);
}

void sub_19C366A00()
{
  std::terminate();
}

uint64_t sub_19C366A0C(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E3D34E80;
  sub_19C332918(*(char **)(a1 + 56));
  sub_19C2EAC08(*(char **)(a1 + 32));
  return a1;
}

uint64_t sub_19C366A48(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E3D34E80;
  sub_19C332918(*(char **)(a1 + 56));
  sub_19C2EAC08(*(char **)(a1 + 32));
  return a1;
}

void sub_19C366A84(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E3D34E80;
  sub_19C332918(*(char **)(a1 + 56));
  sub_19C2EAC08(*(char **)(a1 + 32));
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C366AD0(uint64_t a1, const void **a2)
{
  uint64_t *v3;

  v3 = sub_19C29A674(a1 + 24, a2);
  if ((uint64_t *)(a1 + 32) == v3)
    return 0;
  else
    return *((unsigned int *)v3 + 14);
}

char *sub_19C366B0C@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  char *result;
  char *v4;
  char *v5;
  char *v6;
  unsigned int v7;
  BOOL v8;
  char **v9;
  __int128 v10;

  v5 = *(char **)(a1 + 56);
  result = (char *)(a1 + 56);
  v4 = v5;
  if (!v5)
    goto LABEL_12;
  v6 = result;
  do
  {
    v7 = *((_DWORD *)v4 + 8);
    v8 = v7 >= a2;
    if (v7 >= a2)
      v9 = (char **)v4;
    else
      v9 = (char **)(v4 + 8);
    if (v8)
      v6 = v4;
    v4 = *v9;
  }
  while (*v9);
  if (v6 != result && *((_DWORD *)v6 + 8) <= a2)
  {
    if (v6[63] < 0)
    {
      return (char *)sub_19C2B5238((_BYTE *)a3, *((void **)v6 + 5), *((_QWORD *)v6 + 6));
    }
    else
    {
      v10 = *(_OWORD *)(v6 + 40);
      *(_QWORD *)(a3 + 16) = *((_QWORD *)v6 + 7);
      *(_OWORD *)a3 = v10;
    }
  }
  else
  {
LABEL_12:
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
  }
  return result;
}

void sub_19C366B80(_QWORD *a1)
{
  sub_19C368CB8(a1);
  JUMPOUT(0x1A1AD355CLL);
}

BOOL sub_19C366BA4(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  int *v3;
  int *v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int64_t v11;
  int *v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  unint64_t v18;
  double v19;
  double v20;
  int v21;
  unint64_t v22;
  int *v23;
  unint64_t v24;
  uint64_t v25;
  float v26;
  float v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  _DWORD *v33;
  char *v34;
  char *v35;
  int *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  _BYTE *v42;
  _DWORD *v43;
  unint64_t v44;
  uint64_t v45;
  _OWORD *v46;
  char *v47;
  uint64_t v48;
  __int128 v49;
  int v50;
  float v51;
  float v52;
  double v53;
  float v54;
  uint64_t v55;
  uint64_t v56;
  size_t v57;
  _QWORD *v58;
  int *v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  _BYTE *v70;
  uint64_t v71;
  int *v72;
  char *v73;
  char *v74;
  char *v75;
  size_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  unint64_t v80;
  char *v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  BOOL v85;
  uint64_t v86;
  uint64_t v87;
  _OWORD *v88;
  __int128 *v89;
  uint64_t v90;
  __int128 v91;
  int v92;
  char *v93;
  char *v94;
  unint64_t v95;
  char *v96;
  unint64_t v97;
  uint64_t v98;
  __int128 *v99;
  _OWORD *v100;
  uint64_t v101;
  __int128 v102;
  int v103;
  _QWORD *v104;
  char *v105;
  unint64_t v106;
  __int128 *v107;
  _OWORD *v108;
  uint64_t v109;
  __int128 v110;
  int v111;
  size_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  float v117;
  unint64_t v118;
  int *v119;
  uint64_t v120;
  _DWORD *v121;
  int *v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  unint64_t v127;
  _BYTE *v128;
  int *v129;
  unint64_t v130;
  uint64_t v131;
  _OWORD *v132;
  int *v133;
  uint64_t v134;
  __int128 v135;
  int v136;
  void *v137;
  void *v138;
  uint64_t v139;
  _BYTE *v140;
  _BYTE *v141;
  int64_t v142;
  void **v143;
  float *v144;
  float *v145;
  void **v146;
  char *v147;
  void **v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  unint64_t v152;
  _BYTE *v153;
  _DWORD *v154;
  unint64_t v155;
  uint64_t v156;
  _OWORD *v157;
  void **v158;
  uint64_t v159;
  __int128 v160;
  int v161;
  NSObject *v162;
  uint64_t v163;
  unint64_t v164;
  char *v165;
  int *v166;
  uint64_t v167;
  unint64_t v168;
  uint64_t v169;
  unint64_t v170;
  _BYTE *v171;
  int *v172;
  unint64_t v173;
  uint64_t v174;
  _OWORD *v175;
  char *v176;
  uint64_t v177;
  __int128 v178;
  int v179;
  std::ios_base *v180;
  uint64_t v181;
  uint64_t v182;
  _BYTE *v183;
  size_t v184;
  void **p_dst;
  _BYTE *v186;
  const void **v187;
  const void *v188;
  uint64_t v189;
  uint64_t v190;
  unint64_t v191;
  size_t v192;
  __int128 *v193;
  const void **v194;
  const void *v195;
  uint64_t v196;
  uint64_t v197;
  __int128 *v198;
  uint64_t v199;
  uint64_t v200;
  _QWORD *v201;
  unint64_t v202;
  _DWORD *v203;
  _DWORD *v204;
  unint64_t v205;
  unsigned int *v206;
  _DWORD *v207;
  unsigned int v208;
  unint64_t v209;
  uint64_t *v210;
  uint64_t *v211;
  void **i;
  uint64_t v213;
  uint64_t v214;
  unint64_t v215;
  uint64_t v216;
  unsigned int j;
  char *v218;
  _DWORD *v219;
  _QWORD *v220;
  _QWORD *v221;
  unint64_t v222;
  char *v223;
  _BYTE *v224;
  uint64_t v225;
  unint64_t v226;
  uint64_t v227;
  unint64_t v228;
  char *v229;
  char *v230;
  char *v231;
  char *v232;
  _QWORD *v233;
  unint64_t v234;
  int *v235;
  unint64_t v236;
  unint64_t v237;
  unint64_t v238;
  unint64_t v239;
  unint64_t v240;
  double *v241;
  double v242;
  float v243;
  double v244;
  float v245;
  double v246;
  float v247;
  int v248;
  int v249;
  double v250;
  float v251;
  double v252;
  float v253;
  int v254;
  double v255;
  float v256;
  int v257;
  unint64_t v258;
  double v259;
  float v260;
  float v261;
  unint64_t v262;
  unint64_t v263;
  double v264;
  float v265;
  int v266;
  int *v267;
  unint64_t v268;
  float v269;
  unint64_t v270;
  double v271;
  float v272;
  double v273;
  float v274;
  int v275;
  double v276;
  float v277;
  double v278;
  float v279;
  int v280;
  unint64_t v281;
  float v282;
  float v283;
  double *v284;
  double v285;
  float v286;
  double v287;
  float v288;
  unint64_t v289;
  float v290;
  float v291;
  int v292;
  int v293;
  float v294;
  double v295;
  float v296;
  double v297;
  float v298;
  double v299;
  float v300;
  double v301;
  float v302;
  int v303;
  double v304;
  float v305;
  double v306;
  float v307;
  double v308;
  float v309;
  int v310;
  int *v311;
  double *v312;
  int *v313;
  float v314;
  float v315;
  int v316;
  uint64_t v317;
  int v318;
  double v319;
  float v320;
  double v321;
  float v322;
  int v323;
  double v324;
  float v325;
  uint64_t v326;
  unint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  unint64_t v331;
  char *v332;
  char *v333;
  char *v334;
  char *v335;
  uint64_t v336;
  uint64_t v337;
  char *v338;
  uint64_t v339;
  char *v340;
  _BYTE *v341;
  _BYTE *v342;
  int64_t v343;
  char *v344;
  size_t v345;
  char *v346;
  char *v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  void *v352;
  int v353;
  const char *v354;
  unint64_t v355;
  uint64_t v356;
  void *v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  void *v361;
  char **v362;
  unint64_t v363;
  unint64_t v364;
  void **v365;
  int *v367;
  char *v368;
  char *v369;
  char *v370;
  void *v371[3];
  __int128 v372;
  int64_t v373;
  void *__p;
  _QWORD v375[2];
  _QWORD v376[2];
  void *v377;
  void *v378;
  _BYTE *v379;
  __int128 v380;
  __int128 v381;
  int v382;
  uint64_t v383[19];
  void **__dst;
  unint64_t v385;
  _BYTE *v386;
  void *v387;
  void **p_p;
  _QWORD *v389;
  uint8_t buf[4];
  __int128 *v391;
  uint64_t v392;

  v1 = a1;
  v392 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 96);
  if (v2 != -1 && v2 >= *(_QWORD *)(a1 + 80))
    return 0;
  v3 = *(int **)(a1 + 128);
  v362 = (char **)(a1 + 128);
  v4 = *(int **)(a1 + 136);
  v5 = v3;
  if (v3 != v4)
  {
    v6 = (char *)v4 - (char *)v3;
    if ((char *)v4 - (char *)v3 >= 17)
    {
      v7 = 0;
      v8 = v6 >> 4;
      v9 = *v3;
      v10 = *((_QWORD *)v3 + 1);
      v11 = (unint64_t)((v6 >> 4) - 2) >> 1;
      v12 = *(int **)(a1 + 128);
      do
      {
        v13 = v12;
        v12 += 4 * v7 + 4;
        v14 = 2 * v7;
        v7 = (2 * v7) | 1;
        v15 = v14 + 2;
        if (v15 < v8 && *((double *)v12 + 1) < *((double *)v12 + 3))
        {
          v12 += 4;
          v7 = v15;
        }
        *v13 = *v12;
        *((_QWORD *)v13 + 1) = *((_QWORD *)v12 + 1);
      }
      while (v7 <= v11);
      if (v12 == v4 - 4)
      {
        *v12 = v9;
        *((_QWORD *)v12 + 1) = v10;
      }
      else
      {
        *v12 = *(v4 - 4);
        *((_QWORD *)v12 + 1) = *((_QWORD *)v4 - 1);
        *(v4 - 4) = v9;
        *((_QWORD *)v4 - 1) = v10;
        v17 = (char *)v12 - (char *)v3 + 16;
        if (v17 >= 17)
        {
          v18 = (((unint64_t)v17 >> 4) - 2) >> 1;
          v19 = *(double *)&v3[4 * v18 + 2];
          v20 = *((double *)v12 + 1);
          if (v19 < v20)
          {
            v21 = *v12;
            do
            {
              v22 = v18;
              v23 = v12;
              v12 = &v3[4 * v22];
              *v23 = *v12;
              *((double *)v23 + 1) = v19;
              if (!v22)
                break;
              v18 = (v22 - 1) >> 1;
              v19 = *(double *)&v3[4 * v18 + 2];
            }
            while (v19 < v20);
            *v12 = v21;
            *(double *)&v3[4 * v22 + 2] = v20;
          }
        }
      }
    }
    v5 = v4 - 4;
    *(_QWORD *)(a1 + 136) = v4 - 4;
  }
  v24 = v2 + 1;
  if (v2 + 1 < *(_QWORD *)(a1 + 80))
  {
    v365 = (void **)(a1 + 104);
    v361 = *(void **)(MEMORY[0x1E0DE4F60] + 8);
    v360 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
    v356 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
    v357 = (void *)*MEMORY[0x1E0DE4F60];
    v359 = MEMORY[0x1E0DE4FE0] + 64;
    v358 = MEMORY[0x1E0DE4FB8] + 16;
    while (1)
    {
      v3 = *(int **)(v1 + 128);
      v5 = *(int **)(v1 + 136);
      v25 = *(_QWORD *)(v1 + 56);
      if (v3 != v5)
      {
        v26 = *(float *)(v25 + 8 * v24 + 4);
        v27 = log10f(v26);
        if (v26 <= 0.0)
          v27 = -10.0;
        if (*((double *)v3 + 1) >= v27)
          return v3 != v5;
      }
      v28 = v2 + 1;
      *(_QWORD *)(v1 + 96) = v2 + 1;
      v367 = 0;
      v368 = 0;
      v370 = 0;
      v29 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 24) + 48))(*(_QWORD *)(v1 + 24));
      v30 = v29;
      v31 = 0;
      if (v29)
      {
        if (v29 >> 62)
          goto LABEL_451;
        v32 = (char *)operator new(4 * v29);
        v31 = &v32[4 * v30];
        v367 = (int *)v32;
        v368 = v32;
        v370 = v31;
      }
      v33 = (_DWORD *)(v25 + 8 * v28);
      v34 = v368;
      if (v368 >= v31)
      {
        v36 = v367;
        v37 = (v368 - (char *)v367) >> 2;
        v38 = v37 + 1;
        if ((unint64_t)(v37 + 1) >> 62)
LABEL_451:
          sub_19C2A18E8();
        v39 = v31 - (char *)v367;
        v40 = (v31 - (char *)v367) >> 1;
        if (v40 > v38)
          v38 = v40;
        if (v39 >= 0x7FFFFFFFFFFFFFFCLL)
          v41 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v41 = v38;
        if (v41)
        {
          if (v41 >> 62)
LABEL_452:
            sub_19C2A143C();
          v42 = operator new(4 * v41);
        }
        else
        {
          v42 = 0;
        }
        v43 = &v42[4 * v37];
        *v43 = *v33;
        v35 = (char *)(v43 + 1);
        if (v368 != (char *)v367)
        {
          v44 = v368 - (char *)v367 - 4;
          if (v44 < 0x2C)
            goto LABEL_465;
          if ((unint64_t)((char *)v367 - v42) < 0x20)
            goto LABEL_465;
          v45 = (v44 >> 2) + 1;
          v46 = &v42[4 * v37 - 16];
          v47 = v368 - 16;
          v48 = v45 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v49 = *(_OWORD *)v47;
            *(v46 - 1) = *((_OWORD *)v47 - 1);
            *v46 = v49;
            v46 -= 2;
            v47 -= 32;
            v48 -= 8;
          }
          while (v48);
          v43 -= v45 & 0x7FFFFFFFFFFFFFF8;
          v34 = &v368[-4 * (v45 & 0x7FFFFFFFFFFFFFF8)];
          if (v45 != (v45 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_465:
            do
            {
              v50 = *((_DWORD *)v34 - 1);
              v34 -= 4;
              *--v43 = v50;
            }
            while (v34 != (char *)v367);
          }
        }
        v367 = v43;
        v370 = &v42[4 * v41];
        if (v36)
          operator delete(v36);
      }
      else
      {
        *(_DWORD *)v368 = *v33;
        v35 = v368 + 4;
      }
      v1 = a1;
      v369 = v35;
      if (v367 == (int *)v35)
      {
LABEL_450:
        v353 = 130;
        v354 = "false && \"no tokens provided\"";
        goto LABEL_445;
      }
      v51 = *(float *)(v25 + 8 * v28 + 4);
      v52 = log10f(v51);
      if (v51 <= 0.0)
        v52 = -10.0;
      v53 = v52;
      while (1)
      {
        v55 = *(_QWORD *)(v1 + 24);
        v56 = *((unsigned int *)v35 - 1);
        if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v55 + 80))(v55, v56) & 1) != 0)
          goto LABEL_267;
        if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v55 + 56))(v55, v56))
          break;
        if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v55 + 64))(v55, v56) & 1) == 0
          && ((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v55 + 72))(v55, v56) & 1) == 0)
        {
          v353 = 145;
          v354 = "mapper.isPrefixID(lastToken) || mapper.isStemID(lastToken)";
          goto LABEL_445;
        }
        v58 = (_QWORD *)a1;
        v59 = v367;
        v61 = *(_QWORD *)(a1 + 104);
        v60 = *(_QWORD *)(a1 + 112);
        v62 = v60 - v61;
        if (v369 - (char *)v367 >= 1)
        {
          v63 = (v369 - (char *)v367) >> 2;
          v64 = v62 >> 2;
          v65 = (char *)(v61 + (v62 & 0xFFFFFFFFFFFFFFFCLL));
          v66 = *(_QWORD *)(a1 + 120);
          if (v63 > (uint64_t)(v66 - v60) >> 2)
          {
            v67 = v64 + v63;
            if ((unint64_t)(v64 + v63) >> 62)
              goto LABEL_451;
            v68 = v66 - v61;
            if (v68 >> 1 > v67)
              v67 = v68 >> 1;
            if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFFCLL)
              v69 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v69 = v67;
            v363 = v69;
            if (v69)
            {
              if (v69 >> 62)
                goto LABEL_452;
              v70 = operator new(4 * v69);
              v64 = v62 >> 2;
            }
            else
            {
              v70 = 0;
            }
            v93 = &v70[4 * v64];
            v94 = &v93[4 * v63];
            v95 = (v63 - 1) & 0x3FFFFFFFFFFFFFFFLL;
            if (v95 >= 7)
            {
              v96 = &v70[4 * v64];
              if ((unint64_t)(&v70[v62 & 0xFFFFFFFFFFFFFFFCLL] - (_BYTE *)v367) < 0x20)
                goto LABEL_104;
              v97 = v95 + 1;
              v98 = v97 & 0x7FFFFFFFFFFFFFF8;
              v96 = &v93[v98 * 4];
              v99 = (__int128 *)(v367 + 4);
              v100 = &v70[4 * v64 + 16];
              v101 = v97 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v102 = *v99;
                *(v100 - 1) = *(v99 - 1);
                *v100 = v102;
                v99 += 2;
                v100 += 2;
                v101 -= 8;
              }
              while (v101);
              if (v97 != (v97 & 0x7FFFFFFFFFFFFFF8))
              {
                v59 = &v367[v98];
                goto LABEL_104;
              }
            }
            else
            {
              v96 = &v70[4 * v64];
              do
              {
LABEL_104:
                v103 = *v59++;
                *(_DWORD *)v96 = v103;
                v96 += 4;
              }
              while (v96 != v94);
            }
            if (v61 == v60)
            {
              v104 = (_QWORD *)a1;
            }
            else
            {
              v104 = (_QWORD *)a1;
              if ((unint64_t)(v62 - 4) < 0x3C)
              {
                v105 = (char *)(v61 + (v62 & 0xFFFFFFFFFFFFFFFCLL));
                goto LABEL_113;
              }
              v105 = (char *)(v61 + (v62 & 0xFFFFFFFFFFFFFFFCLL));
              if ((unint64_t)(v105 - &v70[v62 & 0xFFFFFFFFFFFFFFFCLL]) < 0x20)
                goto LABEL_466;
              v106 = ((unint64_t)(v62 - 4) >> 2) + 1;
              v105 = &v65[-4 * (v106 & 0x7FFFFFFFFFFFFFF8)];
              v107 = (__int128 *)(v61 + 4 * v64 - 16);
              v108 = &v70[4 * v64 - 16];
              v109 = v106 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v110 = *v107;
                *(v108 - 1) = *(v107 - 1);
                *v108 = v110;
                v107 -= 2;
                v108 -= 2;
                v109 -= 8;
              }
              while (v109);
              v93 -= 4 * (v106 & 0x7FFFFFFFFFFFFFF8);
              if (v106 != (v106 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_466:
                do
                {
LABEL_113:
                  v111 = *((_DWORD *)v105 - 1);
                  v105 -= 4;
                  *((_DWORD *)v93 - 1) = v111;
                  v93 -= 4;
                }
                while (v105 != (char *)v61);
              }
            }
            v112 = v60 - (_QWORD)v65;
            if (v112)
              memmove(v94, (const void *)(v61 + (v62 & 0xFFFFFFFFFFFFFFFCLL)), v112);
            v104[13] = v93;
            v104[14] = &v94[v112];
            v104[15] = &v70[4 * v363];
            v58 = v104;
            if (v61)
              operator delete((void *)v61);
            goto LABEL_118;
          }
          v71 = (uint64_t)(v60 - (_QWORD)v65) >> 2;
          if (v71 >= v63)
          {
            v72 = &v367[v63];
            v74 = *(char **)(a1 + 112);
LABEL_80:
            v75 = &v65[4 * v63];
            v76 = v74 - v75;
            v77 = (v74 - v75) >> 2;
            v78 = &v74[-4 * v63];
            v79 = v74;
            if ((unint64_t)v78 < v60)
            {
              v80 = (v62 & 0xFFFFFFFFFFFFFFFCLL) + v76;
              v81 = (char *)(v80 + v61);
              v82 = v80 + v61 + 4;
              if (v60 > v82)
                v82 = v60;
              v83 = v82 + ~v61 - v80;
              v84 = v74 - v81;
              v85 = v83 >= 0x2C && v84 > 0x1F;
              v79 = v74;
              if (!v85)
                goto LABEL_467;
              v86 = (v83 >> 2) + 1;
              v87 = 4 * (v86 & 0x7FFFFFFFFFFFFFF8);
              v78 += v87;
              v88 = v74 + 16;
              v89 = (__int128 *)(v61 + 4 * v77 + 4 * v64 + 16);
              v90 = v86 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v91 = *v89;
                *(v88 - 1) = *(v89 - 1);
                *v88 = v91;
                v88 += 2;
                v89 += 2;
                v90 -= 8;
              }
              while (v90);
              v79 = &v74[v87];
              if (v86 != (v86 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_467:
                do
                {
                  v92 = *(_DWORD *)v78;
                  v78 += 4;
                  *(_DWORD *)v79 = v92;
                  v79 += 4;
                }
                while ((unint64_t)v78 < v60);
              }
            }
            *(_QWORD *)(a1 + 112) = v79;
            if (v74 != v75)
              memmove(&v74[-4 * v77], (const void *)(v61 + (v62 & 0xFFFFFFFFFFFFFFFCLL)), v76);
            v57 = (char *)v72 - (char *)v367;
            v58 = (_QWORD *)a1;
            if (v72 != v367)
              memmove((void *)(v61 + (v62 & 0xFFFFFFFFFFFFFFFCLL)), v367, v57);
            goto LABEL_118;
          }
          v72 = &v367[v71];
          v73 = (char *)(v369 - (char *)v72);
          if (v369 != (char *)v72)
          {
            memmove(*(void **)(a1 + 112), &v367[v71], v369 - (char *)v72);
            v64 = v62 >> 2;
          }
          v74 = &v73[v60];
          v58 = (_QWORD *)a1;
          *(_QWORD *)(a1 + 112) = &v73[v60];
          if ((uint64_t)(v60 - (_QWORD)v65) >= 1)
            goto LABEL_80;
        }
LABEL_118:
        v113 = v58[3];
        v114 = *(unsigned int *)(v58[14] - 4);
        if (((*(uint64_t (**)(uint64_t, uint64_t, size_t))(*(_QWORD *)v113 + 64))(v113, v114, v57) & 1) != 0)
        {
          v115 = 3;
        }
        else if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v113 + 72))(v113, v114) & 1) != 0)
        {
          v115 = 4;
        }
        else if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v113 + 16))(v113) == 2)
        {
          v115 = 0;
        }
        else
        {
          v115 = 5;
        }
        (*(void (**)(void **__return_ptr, _QWORD, void **, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 40))(v371, *(_QWORD *)(a1 + 8), v365, 1, v115);
        v116 = *(_DWORD *)v371[0];
        v117 = *((float *)v371[0] + 1);
        v1 = a1;
        v119 = *(int **)(a1 + 112);
        v118 = *(_QWORD *)(a1 + 120);
        v120 = *(v119 - 1);
        if ((unint64_t)v119 >= v118)
        {
          v122 = (int *)*v365;
          v123 = (char *)v119 - (_BYTE *)*v365;
          v124 = v123 >> 2;
          v125 = (v123 >> 2) + 1;
          if (v125 >> 62)
            sub_19C2A18E8();
          v126 = v118 - (_QWORD)v122;
          if (v126 >> 1 > v125)
            v125 = v126 >> 1;
          if ((unint64_t)v126 >= 0x7FFFFFFFFFFFFFFCLL)
            v127 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v127 = v125;
          if (v127)
          {
            if (v127 >> 62)
              sub_19C2A143C();
            v128 = operator new(4 * v127);
          }
          else
          {
            v128 = 0;
          }
          v129 = (int *)&v128[4 * v124];
          *v129 = v116;
          v121 = v129 + 1;
          if (v119 != v122)
          {
            v130 = (char *)v119 - (char *)v122 - 4;
            if (v130 < 0x2C)
              goto LABEL_468;
            if ((unint64_t)((char *)v119 - v128 - v123) < 0x20)
              goto LABEL_468;
            v131 = (v130 >> 2) + 1;
            v132 = &v128[4 * v124 - 16];
            v133 = v119 - 4;
            v134 = v131 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v135 = *(_OWORD *)v133;
              *(v132 - 1) = *((_OWORD *)v133 - 1);
              *v132 = v135;
              v132 -= 2;
              v133 -= 8;
              v134 -= 8;
            }
            while (v134);
            v129 -= v131 & 0x7FFFFFFFFFFFFFF8;
            v119 -= v131 & 0x7FFFFFFFFFFFFFF8;
            if (v131 != (v131 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_468:
              do
              {
                v136 = *--v119;
                *--v129 = v136;
              }
              while (v119 != v122);
            }
          }
          *(_QWORD *)(a1 + 104) = v129;
          *(_QWORD *)(a1 + 112) = v121;
          *(_QWORD *)(a1 + 120) = &v128[4 * v127];
          if (v122)
            operator delete(v122);
        }
        else
        {
          *v119 = v116;
          v121 = v119 + 1;
        }
        *(_QWORD *)(a1 + 112) = v121;
        if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 64))(*(_QWORD *)(a1 + 24), v120))
        {
          (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 120))(&__p, *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 104), (uint64_t)(*(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 104)) >> 2);
          v138 = __p;
          v137 = (void *)v375[0];
          if (__p)
          {
            v375[0] = __p;
            operator delete(__p);
          }
          if (v138 == v137)
          {
            v139 = *(_QWORD *)(a1 + 112);
            *(_QWORD *)(a1 + 112) = v139 - 4;
            if (((*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 64))(*(_QWORD *)(a1 + 24), *(unsigned int *)(v139 - 8)) & 1) == 0)__assert_rtn("predictValidStemFromPrefix", "NeuralModelPredictionEnumerator.cpp", 174, "m_tokenIDMapper->isPrefixID(context.back())");
            (*(void (**)(void **__return_ptr, _QWORD, void **, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 40))(&__p, *(_QWORD *)(a1 + 8), v365, 100, 3);
            v141 = *(_BYTE **)(a1 + 104);
            v140 = *(_BYTE **)(a1 + 112);
            v385 = 0;
            v386 = 0;
            __dst = 0;
            v142 = v140 - v141;
            if (v140 == v141)
            {
              v143 = 0;
            }
            else
            {
              if (v142 < 0)
                sub_19C2A18E8();
              v143 = (void **)operator new(v140 - v141);
              __dst = v143;
              v386 = (char *)v143 + 4 * (v142 >> 2);
              memmove(v143, v141, v142);
              v385 = (unint64_t)v143 + 4 * (v142 >> 2);
            }
            v144 = (float *)__p;
            v145 = (float *)v375[0];
            if (__p == (void *)v375[0])
            {
              v117 = 0.0;
              v116 = 3;
              if (v143)
                goto LABEL_185;
            }
            else
            {
              v116 = 3;
              v117 = 0.0;
              do
              {
                v146 = (void **)v385;
                if (v385 >= (unint64_t)v386)
                {
                  v148 = __dst;
                  v149 = (uint64_t)(v385 - (_QWORD)__dst) >> 2;
                  v150 = v149 + 1;
                  if ((unint64_t)(v149 + 1) >> 62)
                    sub_19C2A18E8();
                  v151 = v386 - (_BYTE *)__dst;
                  if ((v386 - (_BYTE *)__dst) >> 1 > v150)
                    v150 = v151 >> 1;
                  if ((unint64_t)v151 >= 0x7FFFFFFFFFFFFFFCLL)
                    v152 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v152 = v150;
                  if (v152)
                  {
                    if (v152 >> 62)
                      sub_19C2A143C();
                    v153 = operator new(4 * v152);
                  }
                  else
                  {
                    v153 = 0;
                  }
                  v154 = &v153[4 * v149];
                  *v154 = *(_DWORD *)v144;
                  v147 = (char *)(v154 + 1);
                  if (v146 != v148)
                  {
                    v155 = (char *)v146 - 4 - (char *)v148;
                    if (v155 < 0x2C)
                      goto LABEL_469;
                    if ((unint64_t)((char *)v148 - v153) < 0x20)
                      goto LABEL_469;
                    v156 = (v155 >> 2) + 1;
                    v157 = &v153[4 * v149 - 16];
                    v158 = v146 - 2;
                    v159 = v156 & 0x7FFFFFFFFFFFFFF8;
                    do
                    {
                      v160 = *(_OWORD *)v158;
                      *(v157 - 1) = *((_OWORD *)v158 - 1);
                      *v157 = v160;
                      v157 -= 2;
                      v158 -= 4;
                      v159 -= 8;
                    }
                    while (v159);
                    v154 -= v156 & 0x7FFFFFFFFFFFFFF8;
                    v146 = (void **)((char *)v146 - 4 * (v156 & 0x7FFFFFFFFFFFFFF8));
                    if (v156 != (v156 & 0x7FFFFFFFFFFFFFF8))
                    {
LABEL_469:
                      do
                      {
                        v161 = *((_DWORD *)v146 - 1);
                        v146 = (void **)((char *)v146 - 4);
                        *--v154 = v161;
                      }
                      while (v146 != v148);
                    }
                  }
                  __dst = (void **)v154;
                  v385 = (unint64_t)v147;
                  v386 = &v153[4 * v152];
                  if (v148)
                    operator delete(v148);
                  v1 = a1;
                }
                else
                {
                  *(float *)v385 = *v144;
                  v147 = (char *)v146 + 4;
                }
                v385 = (unint64_t)v147;
                (*(void (**)(__int128 *__return_ptr, _QWORD, void **, int64_t))(**(_QWORD **)(v1 + 24)
                                                                                                + 120))(&v372, *(_QWORD *)(v1 + 24), __dst, (v147 - (char *)__dst) >> 2);
                if ((_QWORD)v372 != *((_QWORD *)&v372 + 1))
                {
                  v116 = *(_DWORD *)v144;
                  v117 = v144[1];
                }
                v385 -= 4;
                if ((_QWORD)v372)
                {
                  *((_QWORD *)&v372 + 1) = v372;
                  operator delete((void *)v372);
                }
                v144 += 2;
              }
              while (v144 != v145);
              v143 = __dst;
              if (__dst)
              {
LABEL_185:
                v385 = (unint64_t)v143;
                operator delete(v143);
              }
            }
            if (__p)
            {
              v375[0] = __p;
              operator delete(__p);
            }
          }
        }
        if (v116 == 3)
        {
          if (qword_1EE41C1E8 != -1)
            dispatch_once(&qword_1EE41C1E8, &unk_1E3D3AC50);
          v162 = qword_1EE41C1E0;
          if (os_log_type_enabled((os_log_t)qword_1EE41C1E0, OS_LOG_TYPE_ERROR))
          {
            v383[0] = v359;
            __p = v361;
            *(_QWORD *)((char *)&v375[-1] + *((_QWORD *)v361 - 3)) = v360;
            v180 = (std::ios_base *)((char *)&v375[-1] + *((_QWORD *)__p - 3));
            std::ios_base::init(v180, v375);
            v180[1].__vftable = 0;
            v180[1].__fmtflags_ = -1;
            __p = (void *)(MEMORY[0x1E0DE4FE0] + 24);
            v383[0] = MEMORY[0x1E0DE4FE0] + 64;
            std::streambuf::basic_streambuf();
            v375[0] = v358;
            v380 = 0u;
            v381 = 0u;
            v382 = 16;
            v181 = *(_QWORD *)(v1 + 104);
            v182 = *(_QWORD *)(v1 + 112);
            if (v181 == v182)
            {
              v183 = 0;
              goto LABEL_248;
            }
            while (2)
            {
              if ((v382 & 0x10) != 0)
              {
                v186 = (_BYTE *)*((_QWORD *)&v381 + 1);
                v187 = (const void **)&v378;
                if (*((_QWORD *)&v381 + 1) < (unint64_t)v379)
                {
                  *((_QWORD *)&v381 + 1) = v379;
                  v186 = v379;
                  v187 = (const void **)&v378;
                }
              }
              else
              {
                if ((v382 & 8) == 0)
                {
                  v184 = 0;
                  HIBYTE(v386) = 0;
                  p_dst = (void **)&__dst;
                  goto LABEL_238;
                }
                v186 = v377;
                v187 = (const void **)v376;
              }
              v188 = *v187;
              v184 = v186 - (_BYTE *)*v187;
              if (v184 > 0x7FFFFFFFFFFFFFF7)
                sub_19C2A1A54();
              if (v184 >= 0x17)
              {
                v189 = (v184 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v184 | 7) != 0x17)
                  v189 = v184 | 7;
                v190 = v189 + 1;
                p_dst = (void **)operator new(v189 + 1);
                v385 = v184;
                v386 = (_BYTE *)(v190 | 0x8000000000000000);
                __dst = p_dst;
                v1 = a1;
              }
              else
              {
                HIBYTE(v386) = (_BYTE)v186 - *(_BYTE *)v187;
                p_dst = (void **)&__dst;
                if (!v184)
                {
LABEL_238:
                  *((_BYTE *)p_dst + v184) = 0;
                  if (SHIBYTE(v386) < 0)
                  {
                    v191 = v385;
                    operator delete(__dst);
                    if (!v191)
                      goto LABEL_243;
                  }
                  else if (!HIBYTE(v386))
                  {
LABEL_243:
                    std::ostream::operator<<();
                    v181 += 4;
                    if (v181 == v182)
                    {
                      if ((v382 & 0x10) == 0)
                      {
                        if ((v382 & 8) == 0)
                        {
                          v192 = 0;
                          HIBYTE(v373) = 0;
                          v193 = &v372;
                          goto LABEL_259;
                        }
                        v183 = v377;
                        v194 = (const void **)v376;
LABEL_251:
                        v195 = *v194;
                        v192 = v183 - (_BYTE *)*v194;
                        if (v192 > 0x7FFFFFFFFFFFFFF7)
                          sub_19C2A1A54();
                        if (v192 >= 0x17)
                        {
                          v196 = (v192 & 0xFFFFFFFFFFFFFFF8) + 8;
                          if ((v192 | 7) != 0x17)
                            v196 = v192 | 7;
                          v197 = v196 + 1;
                          v193 = (__int128 *)operator new(v196 + 1);
                          *((_QWORD *)&v372 + 1) = v192;
                          v373 = v197 | 0x8000000000000000;
                          *(_QWORD *)&v372 = v193;
                          v1 = a1;
                        }
                        else
                        {
                          HIBYTE(v373) = (_BYTE)v183 - *(_BYTE *)v194;
                          v193 = &v372;
                          if (!v192)
                          {
LABEL_259:
                            *((_BYTE *)v193 + v192) = 0;
                            __p = v357;
                            *(_QWORD *)((char *)&v375[-1] + *((_QWORD *)v357 - 3)) = v356;
                            v375[0] = MEMORY[0x1E0DE4FB8] + 16;
                            if (SBYTE7(v381) < 0)
                              operator delete((void *)v380);
                            std::streambuf::~streambuf();
                            std::ostream::~ostream();
                            MEMORY[0x1A1AD34CC](v383);
                            v198 = &v372;
                            if (v373 < 0)
                              v198 = (__int128 *)v372;
                            *(_DWORD *)buf = 136315138;
                            v391 = v198;
                            _os_log_error_impl(&dword_19C291000, v162, OS_LOG_TYPE_ERROR, "Could not find a valid prediction for context: [%s]", buf, 0xCu);
                            if (SHIBYTE(v373) < 0)
                              operator delete((void *)v372);
                            goto LABEL_192;
                          }
                        }
                        memmove(v193, v195, v192);
                        goto LABEL_259;
                      }
                      v183 = (_BYTE *)*((_QWORD *)&v381 + 1);
LABEL_248:
                      v194 = (const void **)&v378;
                      if (v183 < v379)
                      {
                        *((_QWORD *)&v381 + 1) = v379;
                        v183 = v379;
                        v194 = (const void **)&v378;
                      }
                      goto LABEL_251;
                    }
                    continue;
                  }
                  sub_19C2A1B24(&__p, (uint64_t)" ", 1);
                  goto LABEL_243;
                }
              }
              break;
            }
            memmove(p_dst, v188, v184);
            goto LABEL_238;
          }
        }
LABEL_192:
        v163 = *(_QWORD *)(v1 + 112);
        v164 = v163 - *(_QWORD *)(v1 + 104);
        if (v164 > v62)
        {
          do
          {
            v163 -= 4;
            v164 -= 4;
          }
          while (v164 > v62);
          *(_QWORD *)(v1 + 112) = v163;
        }
        if (v371[0])
        {
          v371[1] = v371[0];
          operator delete(v371[0]);
        }
        if (v116 == 3)
          goto LABEL_287;
        v165 = v369;
        if (v369 >= v370)
        {
          v166 = v367;
          v167 = (v369 - (char *)v367) >> 2;
          v168 = v167 + 1;
          if ((unint64_t)(v167 + 1) >> 62)
            goto LABEL_451;
          v169 = v370 - (char *)v367;
          if ((v370 - (char *)v367) >> 1 > v168)
            v168 = v169 >> 1;
          if ((unint64_t)v169 >= 0x7FFFFFFFFFFFFFFCLL)
            v170 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v170 = v168;
          if (v170)
          {
            if (v170 >> 62)
              goto LABEL_452;
            v171 = operator new(4 * v170);
          }
          else
          {
            v171 = 0;
          }
          v172 = (int *)&v171[4 * v167];
          *v172 = v116;
          v35 = (char *)(v172 + 1);
          if (v369 == (char *)v367)
          {
            v1 = a1;
          }
          else
          {
            v173 = v369 - 4 - (char *)v367;
            if (v173 < 0x2C)
            {
              v1 = a1;
              goto LABEL_217;
            }
            v1 = a1;
            if ((unint64_t)((char *)v367 - v171) < 0x20)
              goto LABEL_470;
            v174 = (v173 >> 2) + 1;
            v175 = &v171[4 * v167 - 16];
            v176 = v369 - 16;
            v177 = v174 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v178 = *(_OWORD *)v176;
              *(v175 - 1) = *((_OWORD *)v176 - 1);
              *v175 = v178;
              v175 -= 2;
              v176 -= 32;
              v177 -= 8;
            }
            while (v177);
            v172 -= v174 & 0x7FFFFFFFFFFFFFF8;
            v165 = &v369[-4 * (v174 & 0x7FFFFFFFFFFFFFF8)];
            if (v174 != (v174 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_470:
              do
              {
LABEL_217:
                v179 = *((_DWORD *)v165 - 1);
                v165 -= 4;
                *--v172 = v179;
              }
              while (v165 != (char *)v367);
            }
          }
          v367 = v172;
          v370 = &v171[4 * v170];
          if (v166)
            operator delete(v166);
          goto LABEL_56;
        }
        *(_DWORD *)v369 = v116;
        v35 = v369 + 4;
LABEL_56:
        v369 = v35;
        v54 = log10f(v117);
        if (v117 <= 0.0)
          v54 = -10.0;
        v53 = v53 + v54;
        if (v367 == (int *)v35)
          goto LABEL_450;
      }
      if (v369 - (char *)v367 != 4)
      {
        v353 = 141;
        v354 = "false && \"unexpected non-combining ID\"";
LABEL_445:
        __assert_rtn("wordIsComplete", "NeuralModelPredictionEnumerator.cpp", v353, v354);
      }
LABEL_267:
      v1 = a1;
      v199 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 24))(*(_QWORD *)(a1 + 24));
      v200 = v199;
      LODWORD(v372) = v199;
      *((double *)&v372 + 1) = v53;
      v201 = *(_QWORD **)(a1 + 40);
      if (!v201)
        goto LABEL_286;
      v202 = v201[14];
      if (!v202)
        goto LABEL_286;
      v203 = (_DWORD *)v201[15];
      v204 = &v203[v202];
      do
      {
        v205 = v202 >> 1;
        v206 = &v203[v202 >> 1];
        v208 = *v206;
        v207 = v206 + 1;
        v202 += ~(v202 >> 1);
        if (v208 < v199)
          v203 = v207;
        else
          v202 = v205;
      }
      while (v202);
      if (v203 == v204 || *v203 != (_DWORD)v199)
      {
LABEL_286:
        sub_19C368B1C(v362, &v372);
        goto LABEL_287;
      }
      v209 = *(_QWORD *)(a1 + 88);
      __p = 0;
      v375[0] = &__p;
      v375[1] = 0x4002000000;
      v376[0] = sub_19C42F448;
      v376[1] = sub_19C42F46C;
      v378 = 0;
      v379 = 0;
      v377 = 0;
      if (!v209)
        goto LABEL_423;
      v355 = v209;
      v210 = (uint64_t *)v201[10];
      v211 = (uint64_t *)v201[11];
      for (i = (void **)MEMORY[0x1E0C809B0]; v210 != v211; ++v210)
      {
        v213 = *v210;
        v214 = 68;
        switch((int)v200)
        {
          case 123:
            v214 = 69;
            break;
          case 124:
          case 125:
            goto LABEL_281;
          case 126:
            break;
          case 127:
          case 128:
            v214 = v200;
            break;
          default:
            v214 = v200;
            if ((_DWORD)v200 != 72)
LABEL_281:
              v214 = 0;
            break;
        }
        __dst = i;
        v385 = 0x40000000;
        v386 = sub_19C42F484;
        v387 = &unk_1E3D3C9A8;
        p_p = &__p;
        v389 = v201;
        (*(void (**)(uint64_t, uint64_t, void ***))(*(_QWORD *)v213 + 104))(v213, v214, &__dst);
      }
      v215 = v201[3];
      if (v215)
      {
        v216 = 0;
        for (j = 0; j < v215; v216 = ++j)
        {
          v219 = (_DWORD *)(v201[2] + 16 * v216);
          if (v219[1] == (_DWORD)v200)
          {
            v220 = (_QWORD *)v375[0];
            v221 = v219 + 2;
            v223 = *(char **)(v375[0] + 48);
            v222 = *(_QWORD *)(v375[0] + 56);
            if ((unint64_t)v223 < v222)
            {
              *(_DWORD *)v223 = *v219;
              *((_QWORD *)v223 + 1) = *v221;
              v218 = v223 + 16;
            }
            else
            {
              v224 = *(_BYTE **)(v375[0] + 40);
              v225 = (v223 - v224) >> 4;
              v226 = v225 + 1;
              if ((unint64_t)(v225 + 1) >> 60)
                sub_19C2A18E8();
              v364 = v215;
              v227 = v222 - (_QWORD)v224;
              if (v227 >> 3 > v226)
                v226 = v227 >> 3;
              if ((unint64_t)v227 >= 0x7FFFFFFFFFFFFFF0)
                v228 = 0xFFFFFFFFFFFFFFFLL;
              else
                v228 = v226;
              if (v228 >> 60)
                sub_19C2A143C();
              v229 = (char *)operator new(16 * v228);
              v230 = &v229[16 * v225];
              *(_DWORD *)v230 = *v219;
              *((_QWORD *)v230 + 1) = *v221;
              if (v223 == v224)
              {
                v232 = &v229[16 * v225];
              }
              else
              {
                v231 = &v229[16 * v225];
                do
                {
                  v232 = v231 - 16;
                  *((_OWORD *)v231 - 1) = *((_OWORD *)v223 - 1);
                  v223 -= 16;
                  v231 -= 16;
                }
                while (v223 != v224);
              }
              v218 = v230 + 16;
              v220[5] = v232;
              v220[6] = v230 + 16;
              v220[7] = &v229[16 * v228];
              if (v224)
              {
                operator delete(v224);
                v215 = v201[3];
              }
              else
              {
                v215 = v364;
              }
            }
            v220[6] = v218;
            v1 = a1;
          }
        }
      }
      v233 = (_QWORD *)v375[0];
      v235 = *(int **)(v375[0] + 40);
      v234 = *(_QWORD *)(v375[0] + 48);
      if (v235 == (int *)v234)
      {
LABEL_423:
        v344 = 0;
        v346 = 0;
        goto LABEL_424;
      }
      v236 = (uint64_t)(v234 - (_QWORD)v235) >> 4;
      if (v236 >= v355)
        v237 = v355;
      else
        v237 = (uint64_t)(v234 - (_QWORD)v235) >> 4;
      v238 = (unint64_t)&v235[4 * v237];
      if (v238 == v234)
      {
LABEL_417:
        if (v236 > v237)
          v233[6] = &v235[4 * v237];
        v1 = a1;
        goto LABEL_420;
      }
      while (2)
      {
        v239 = (uint64_t)(v234 - (_QWORD)v235) >> 4;
        if (v239 >= 2)
        {
          if (v239 == 3)
          {
            v304 = *((double *)v235 + 3);
            v305 = v304;
            v306 = *((double *)v235 + 1);
            v307 = v306;
            v308 = *(double *)(v234 - 8);
            v309 = v308;
            if (v305 <= v307)
            {
              if (v309 > v305)
              {
                v318 = v235[4];
                v235[4] = *(_DWORD *)(v234 - 16);
                *(_DWORD *)(v234 - 16) = v318;
                *((double *)v235 + 3) = v308;
                *(double *)(v234 - 8) = v304;
                v319 = *((double *)v235 + 3);
                v320 = v319;
                v321 = *((double *)v235 + 1);
                v322 = v321;
                if (v320 > v322)
                {
                  v323 = *v235;
                  *v235 = v235[4];
                  v235[4] = v323;
                  *((double *)v235 + 1) = v319;
                  *((double *)v235 + 3) = v321;
                }
              }
            }
            else
            {
              v310 = *v235;
              if (v309 <= v305)
              {
                *v235 = v235[4];
                v235[4] = v310;
                *((double *)v235 + 1) = v304;
                *((double *)v235 + 3) = v306;
                v324 = *(double *)(v234 - 8);
                v325 = v324;
                if (v325 <= v307)
                  break;
                v235[4] = *(_DWORD *)(v234 - 16);
                *(_DWORD *)(v234 - 16) = v310;
                *((double *)v235 + 3) = v324;
              }
              else
              {
                *v235 = *(_DWORD *)(v234 - 16);
                *(_DWORD *)(v234 - 16) = v310;
                *((double *)v235 + 1) = v308;
              }
              *(double *)(v234 - 8) = v306;
            }
            break;
          }
          if (v239 == 2)
          {
            v299 = *(double *)(v234 - 8);
            v300 = v299;
            v301 = *((double *)v235 + 1);
            v302 = v301;
            if (v300 > v302)
            {
              v303 = *v235;
              *v235 = *(_DWORD *)(v234 - 16);
              *(_DWORD *)(v234 - 16) = v303;
              *((double *)v235 + 1) = v299;
              *(double *)(v234 - 8) = v301;
            }
            break;
          }
          if ((uint64_t)(v234 - (_QWORD)v235) <= 127)
          {
            while (v235 != (int *)(v234 - 16))
            {
              v311 = v235;
              v235 += 4;
              if (v311 != (int *)v234 && v235 != (int *)v234)
              {
                v312 = (double *)v235;
                v313 = v311;
                do
                {
                  v314 = v312[1];
                  v315 = *((double *)v313 + 1);
                  if (v314 > v315)
                    v313 = (int *)v312;
                  v312 += 2;
                }
                while (v312 != (double *)v234);
                if (v313 != v311)
                {
                  v316 = *v311;
                  *v311 = *v313;
                  *v313 = v316;
                  v317 = *((_QWORD *)v311 + 1);
                  *((_QWORD *)v311 + 1) = *((_QWORD *)v313 + 1);
                  *((_QWORD *)v313 + 1) = v317;
                }
              }
            }
            break;
          }
          v240 = (unint64_t)&v235[4 * (v239 >> 1)];
          v241 = (double *)(v240 + 8);
          v242 = *(double *)(v240 + 8);
          v243 = v242;
          v244 = *((double *)v235 + 1);
          v245 = v244;
          v246 = *(double *)(v234 - 8);
          v247 = v246;
          if (v243 <= v245)
          {
            if (v247 <= v243)
            {
              v257 = 0;
              goto LABEL_329;
            }
            v249 = *(_DWORD *)v240;
            *(_DWORD *)v240 = *(_DWORD *)(v234 - 16);
            *(_DWORD *)(v234 - 16) = v249;
            *v241 = v246;
            *(double *)(v234 - 8) = v242;
            v250 = *v241;
            v251 = *v241;
            v252 = *((double *)v235 + 1);
            v253 = v252;
            if (v251 > v253)
            {
              v254 = *v235;
              *v235 = *(_DWORD *)v240;
              *(_DWORD *)v240 = v254;
              *((double *)v235 + 1) = v250;
              *v241 = v252;
              goto LABEL_326;
            }
          }
          else
          {
            v248 = *v235;
            if (v247 > v243)
            {
              *v235 = *(_DWORD *)(v234 - 16);
              *(_DWORD *)(v234 - 16) = v248;
              *((double *)v235 + 1) = v246;
              *(double *)(v234 - 8) = v244;
              goto LABEL_327;
            }
            *v235 = *(_DWORD *)v240;
            *(_DWORD *)v240 = v248;
            *((double *)v235 + 1) = v242;
            *v241 = v244;
            v255 = *(double *)(v234 - 8);
            v256 = v255;
            if (v256 > v245)
            {
              *(_DWORD *)v240 = *(_DWORD *)(v234 - 16);
              *(_DWORD *)(v234 - 16) = v248;
              *v241 = v255;
              *(double *)(v234 - 8) = v244;
LABEL_326:
              v257 = 2;
LABEL_329:
              v258 = v234 - 16;
              v259 = *((double *)v235 + 1);
              v260 = v259;
              v261 = *v241;
              if (v260 <= v261)
              {
                v263 = v234 - 16;
                while (1)
                {
                  v262 = v263 - 16;
                  if ((int *)(v263 - 16) == v235)
                    break;
                  v264 = *(double *)(v263 - 8);
                  v265 = v264;
                  v263 -= 16;
                  if (v265 > v261)
                  {
                    v266 = *v235;
                    *v235 = *(_DWORD *)v262;
                    *(_DWORD *)v262 = v266;
                    *((double *)v235 + 1) = v264;
                    *(double *)(v262 + 8) = v259;
                    ++v257;
                    goto LABEL_335;
                  }
                }
                v284 = (double *)(v235 + 4);
                v285 = *(double *)(v234 - 8);
                v286 = v285;
                if (v260 <= v286)
                {
                  if (v284 == (double *)v258)
                    break;
                  while (1)
                  {
                    v287 = v284[1];
                    v288 = v287;
                    if (v260 > v288)
                      break;
                    v284 += 2;
                    if (v284 == (double *)v258)
                      goto LABEL_399;
                  }
                  v292 = *(_DWORD *)v284;
                  *(_DWORD *)v284 = *(_DWORD *)(v234 - 16);
                  *(_DWORD *)(v234 - 16) = v292;
                  v284[1] = v285;
                  *(double *)(v234 - 8) = v287;
                  v284 += 2;
                }
                if (v284 == (double *)v258)
                  break;
                while (1)
                {
                  v294 = *((double *)v235 + 1);
                  do
                  {
                    v281 = (unint64_t)v284;
                    v295 = v284[1];
                    v296 = v295;
                    v284 += 2;
                  }
                  while (v294 <= v296);
                  do
                  {
                    v297 = *(double *)(v258 - 8);
                    v258 -= 16;
                    v298 = v297;
                  }
                  while (v294 > v298);
                  if (v281 >= v258)
                    break;
                  v293 = *(_DWORD *)v281;
                  *(_DWORD *)v281 = *(_DWORD *)v258;
                  *(_DWORD *)v258 = v293;
                  *(double *)(v281 + 8) = v297;
                  *(double *)(v258 + 8) = v295;
                }
                if (v281 > v238)
                  break;
              }
              else
              {
                v262 = v234 - 16;
LABEL_335:
                v267 = v235 + 4;
                if ((unint64_t)(v235 + 4) >= v262)
                {
                  v270 = (unint64_t)(v235 + 4);
                }
                else
                {
                  v268 = (unint64_t)(v235 + 4);
                  while (1)
                  {
                    v269 = *(double *)(v240 + 8);
                    do
                    {
                      v270 = v268;
                      v271 = *(double *)(v268 + 8);
                      v272 = v271;
                      v268 += 16;
                    }
                    while (v272 > v269);
                    do
                    {
                      v273 = *(double *)(v262 - 8);
                      v262 -= 16;
                      v274 = v273;
                    }
                    while (v274 <= v269);
                    if (v270 >= v262)
                      break;
                    v275 = *(_DWORD *)v270;
                    *(_DWORD *)v270 = *(_DWORD *)v262;
                    *(_DWORD *)v262 = v275;
                    *(double *)(v270 + 8) = v273;
                    *(double *)(v262 + 8) = v271;
                    ++v257;
                    if (v240 == v270)
                      v240 = v262;
                  }
                }
                if (v270 != v240)
                {
                  v276 = *(double *)(v240 + 8);
                  v277 = v276;
                  v278 = *(double *)(v270 + 8);
                  v279 = v278;
                  if (v277 > v279)
                  {
                    v280 = *(_DWORD *)v270;
                    *(_DWORD *)v270 = *(_DWORD *)v240;
                    *(_DWORD *)v240 = v280;
                    *(double *)(v270 + 8) = v276;
                    *(double *)(v240 + 8) = v278;
                    ++v257;
                  }
                }
                if (v270 == v238)
                  break;
                if (!v257)
                {
                  if (v270 <= v238)
                  {
                    v289 = v270 + 16;
                    while (v289 != v234)
                    {
                      v290 = *(double *)(v289 + 8);
                      v291 = *(double *)(v289 - 8);
                      v289 += 16;
                      if (v290 > v291)
                        goto LABEL_350;
                    }
                  }
                  else
                  {
                    while (v267 != (int *)v270)
                    {
                      v282 = *((double *)v267 + 1);
                      v283 = *((double *)v267 - 1);
                      v267 += 4;
                      if (v282 > v283)
                        goto LABEL_350;
                    }
                  }
                  break;
                }
LABEL_350:
                if (v270 <= v238)
                {
                  v281 = v270 + 16;
                }
                else
                {
                  v234 = v270;
                  v281 = (unint64_t)v235;
                }
              }
              v235 = (int *)v281;
              if (v234 == v238)
                break;
              continue;
            }
          }
LABEL_327:
          v257 = 1;
          goto LABEL_329;
        }
        break;
      }
LABEL_399:
      v233 = (_QWORD *)v375[0];
      v235 = *(int **)(v375[0] + 40);
      v326 = *(_QWORD *)(v375[0] + 48);
      v236 = (v326 - (uint64_t)v235) >> 4;
      v327 = v237 - v236;
      if (v237 <= v236)
        goto LABEL_417;
      v328 = *(_QWORD *)(v375[0] + 56);
      if (v327 <= (v328 - v326) >> 4)
      {
        v348 = v326 + 16 * v327;
        v1 = a1;
        if (((v327 - 1) & 0xFFFFFFFFFFFFFFFLL) != 0)
        {
          v349 = ((v327 - 1) & 0xFFFFFFFFFFFFFFFLL) + 1;
          v350 = v326 + 16;
          v351 = v349 & 0x1FFFFFFFFFFFFFFELL;
          do
          {
            *(_DWORD *)(v350 - 16) = 0;
            *(_DWORD *)v350 = 0;
            *(_QWORD *)(v350 - 8) = 0;
            *(_QWORD *)(v350 + 8) = 0;
            v350 += 32;
            v351 -= 2;
          }
          while (v351);
          if (v349 != (v349 & 0x1FFFFFFFFFFFFFFELL))
          {
            v326 += 16 * (v349 & 0x1FFFFFFFFFFFFFFELL);
            goto LABEL_436;
          }
        }
        else
        {
          do
          {
LABEL_436:
            *(_DWORD *)v326 = 0;
            *(_QWORD *)(v326 + 8) = 0;
            v326 += 16;
          }
          while (v326 != v348);
        }
        v233[6] = v348;
        v233 = (_QWORD *)v375[0];
        goto LABEL_420;
      }
      if (v237 >> 60)
        sub_19C2A18E8();
      v329 = v328 - (_QWORD)v235;
      v330 = v329 >> 3;
      if (v329 >> 3 <= v237)
        v330 = v237;
      if ((unint64_t)v329 >= 0x7FFFFFFFFFFFFFF0)
        v331 = 0xFFFFFFFFFFFFFFFLL;
      else
        v331 = v330;
      if (v331 >> 60)
        sub_19C2A143C();
      v332 = (char *)operator new(16 * v331);
      v333 = &v332[16 * v236];
      v334 = &v332[16 * v237];
      v335 = v333;
      v336 = (v327 - 1) & 0xFFFFFFFFFFFFFFFLL;
      v1 = a1;
      if (v336)
      {
        v337 = (v336 + 1) & 0x1FFFFFFFFFFFFFFELL;
        v338 = v333 + 16;
        v339 = v337;
        do
        {
          *((_DWORD *)v338 - 4) = 0;
          *(_DWORD *)v338 = 0;
          *((_QWORD *)v338 - 1) = 0;
          *((_QWORD *)v338 + 1) = 0;
          v338 += 32;
          v339 -= 2;
        }
        while (v339);
        if (v336 + 1 != v337)
        {
          v335 = &v333[16 * v337];
          goto LABEL_413;
        }
      }
      else
      {
        do
        {
LABEL_413:
          *(_DWORD *)v335 = 0;
          *((_QWORD *)v335 + 1) = 0;
          v335 += 16;
        }
        while (v335 != v334);
      }
      if ((int *)v326 == v235)
      {
        v340 = v333;
      }
      else
      {
        do
        {
          v340 = v333 - 16;
          *((_OWORD *)v333 - 1) = *(_OWORD *)(v326 - 16);
          v326 -= 16;
          v333 -= 16;
        }
        while ((int *)v326 != v235);
      }
      v352 = (void *)v233[5];
      v233[5] = v340;
      v233[6] = v334;
      v233[7] = &v332[16 * v331];
      if (v352)
        operator delete(v352);
      v233 = (_QWORD *)v375[0];
LABEL_420:
      v342 = (_BYTE *)v233[5];
      v341 = (_BYTE *)v233[6];
      v343 = v341 - v342;
      if (v341 == v342)
        goto LABEL_423;
      if (v343 < 0)
        sub_19C2A18E8();
      v344 = (char *)operator new(v341 - v342);
      v345 = v343 & 0xFFFFFFFFFFFFFFF0;
      memcpy(v344, v342, v345);
      v346 = &v344[v345];
LABEL_424:
      _Block_object_dispose(&__p, 8);
      if (v377)
      {
        v378 = v377;
        operator delete(v377);
      }
      if (v344 != v346)
      {
        v347 = v344;
        do
        {
          sub_19C368B1C(v362, v347);
          v347 += 16;
        }
        while (v347 != v346);
      }
      if (v344)
        operator delete(v344);
LABEL_287:
      if (v367)
        operator delete(v367);
      v2 = *(_QWORD *)(v1 + 96);
      v24 = v2 + 1;
      if (v2 + 1 >= *(_QWORD *)(v1 + 80))
      {
        v3 = *(int **)(v1 + 128);
        v5 = *(int **)(v1 + 136);
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

void sub_19C368908(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42)
{
  _Block_object_dispose(&a36, 8);
  if (__p)
  {
    a42 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a27)
    operator delete(a27);
  _Unwind_Resume(a1);
}

uint64_t sub_19C368A7C(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_DWORD **)(a1 + 128);
  if (v3 == *(_DWORD **)(a1 + 136))
    __assert_rtn("getPrediction", "NeuralModelPredictionEnumerator.cpp", 72, "false && \"getPrediction: called without predictions\"");
  *a2 = *v3;
  if (a3)
  {
    *(int64x2_t *)a3 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
    *(_QWORD *)(a3 + 16) = 0;
    *(_WORD *)(a3 + 24) = 0;
    *(_BYTE *)(a3 + 32) = 1;
    *(_DWORD *)(a3 + 56) = 0;
    *(_OWORD *)(a3 + 64) = xmmword_19C46DE10;
    *(_QWORD *)(a3 + 88) = 0;
    *(_QWORD *)(a3 + 96) = 0;
    *(_QWORD *)(a3 + 80) = 0xFFEFFFFFFFFFFFFFLL;
    v4 = *(_QWORD *)(a1 + 128);
    *(_DWORD *)(a3 + 116) = 1;
    *(_OWORD *)(a3 + 40) = xmmword_19C46DEC0;
    v5 = *(_QWORD *)(v4 + 8);
    *(_QWORD *)(a3 + 40) = v5;
    *(_QWORD *)a3 = v5;
    *(_QWORD *)(a3 + 8) = v5;
  }
  return 1;
}

void sub_19C368B1C(char **a1, _OWORD *a2)
{
  unint64_t v4;
  double *v5;
  double *v6;
  double *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  double *v14;
  uint64_t v15;
  unint64_t v16;
  double v17;
  double v18;
  int v19;
  double *v20;
  int v21;
  unint64_t v22;
  double *v23;

  v5 = (double *)a1[1];
  v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v4)
  {
    v7 = (double *)*a1;
    v8 = ((char *)v5 - *a1) >> 4;
    v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 60)
      sub_19C2A18E8();
    v10 = v4 - (_QWORD)v7;
    if (v10 >> 3 > v9)
      v9 = v10 >> 3;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0)
      v11 = 0xFFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 >> 60)
        sub_19C2A143C();
      v12 = (char *)operator new(16 * v11);
    }
    else
    {
      v12 = 0;
    }
    v13 = &v12[16 * v8];
    *(_OWORD *)v13 = *a2;
    v6 = (double *)(v13 + 16);
    if (v5 != v7)
    {
      do
      {
        *((_OWORD *)v13 - 1) = *((_OWORD *)v5 - 1);
        v13 -= 16;
        v5 -= 2;
      }
      while (v5 != v7);
      v5 = (double *)*a1;
    }
    *a1 = v13;
    a1[1] = (char *)v6;
    a1[2] = &v12[16 * v11];
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_OWORD *)v5 = *a2;
    v6 = v5 + 2;
  }
  a1[1] = (char *)v6;
  v14 = (double *)*a1;
  v15 = (char *)v6 - *a1;
  if (v15 >= 17)
  {
    v16 = (((unint64_t)v15 >> 4) - 2) >> 1;
    v17 = v14[2 * v16 + 1];
    v18 = *(v6 - 1);
    if (v17 < v18)
    {
      v21 = *((_DWORD *)v6 - 4);
      v20 = v6 - 2;
      v19 = v21;
      do
      {
        v22 = v16;
        v23 = v20;
        v20 = &v14[2 * v22];
        *(_DWORD *)v23 = *(_DWORD *)v20;
        v23[1] = v17;
        if (!v22)
          break;
        v16 = (v22 - 1) >> 1;
        v17 = v14[2 * v16 + 1];
      }
      while (v17 < v18);
      *(_DWORD *)v20 = v19;
      v14[2 * v22 + 1] = v18;
    }
  }
}

os_log_t sub_19C368C8C()
{
  os_log_t result;

  result = os_log_create("com.apple.LanguageModeling", "Prediction");
  qword_1EE41C1E0 = (uint64_t)result;
  return result;
}

_QWORD *sub_19C368CB8(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;

  *a1 = &off_1E3D37498;
  v2 = (void *)a1[16];
  if (v2)
  {
    a1[17] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[13];
  if (v3)
  {
    a1[14] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[7];
  if (v4)
  {
    a1[8] = v4;
    operator delete(v4);
  }
  v5 = (std::__shared_weak_count *)a1[6];
  if (!v5)
    goto LABEL_11;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v8 = (std::__shared_weak_count *)a1[4];
    if (!v8)
      goto LABEL_17;
  }
  else
  {
LABEL_11:
    v8 = (std::__shared_weak_count *)a1[4];
    if (!v8)
      goto LABEL_17;
  }
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
LABEL_17:
  v11 = (std::__shared_weak_count *)a1[2];
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  return a1;
}

void sub_19C368DC8(uint64_t a1, int a2, unsigned __int8 *a3, int a4, unsigned int a5)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  int v8;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  unsigned int *v14;
  _DWORD *v15;
  unsigned int v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  int v25;
  uint64_t (*v26)(void *, _QWORD, _QWORD);
  void *v27;
  unsigned int *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;

  v5 = *(_QWORD *)(a1 + 56);
  v6 = (4 * a2);
  v7 = (unsigned int *)(v5 + v6);
  if (a4)
  {
    v8 = a4;
    do
    {
      v13 = *a3;
      v14 = &v7[v13];
      v16 = v14[1];
      v15 = v14 + 1;
      v17 = v16 & 3;
      v18 = (unint64_t)v16 >> 2;
      if (v17 == 3)
      {
        LODWORD(v11) = v18;
        ++a3;
        LODWORD(v12) = v8 - 1;
        goto LABEL_4;
      }
      if (v17 == 1)
        goto LABEL_23;
      if (v17)
        return;
      v19 = *(_QWORD *)(a1 + 80);
      if (v19 != *(_QWORD *)(a1 + 72))
      {
        v19 = (*(_QWORD *)(a1 + 80) & 0xFFFFFFFCLL)
            + *(unsigned int *)(*(_QWORD *)(a1 + 120) + (*(_QWORD *)(a1 + 80) & 0xFFFFFFFCLL))
            + 4;
        *(_QWORD *)(a1 + 72) = v19;
      }
      v20 = v19 + 3;
      v21 = (v19 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      v22 = v21 + *(unsigned int *)(a1 + 200);
      v23 = *(_QWORD *)(a1 + 64);
      if (v22 <= v23)
      {
LABEL_11:
        *(_QWORD *)(a1 + 72) = v22;
        *(_QWORD *)(a1 + 80) = v21;
        v18 = (v20 >> 2) | 0x100000000;
        goto LABEL_12;
      }
      while (1)
      {
        while (1)
        {
          v25 = 2 * (int)v23 ? 2 * v23 : 0x10000;
          if (!*(_DWORD *)(a1 + 88))
            break;
          v26 = *(uint64_t (**)(void *, _QWORD, _QWORD))(a1 + 104);
          v27 = *(void **)(a1 + 120);
          v23 = v25;
          if (!v26)
          {
            v24 = (char *)malloc_type_realloc(v27, v25, 0x837F6817uLL);
            *(_QWORD *)(a1 + 120) = v24;
            **(_DWORD **)(a1 + 96) = 1;
            goto LABEL_14;
          }
          *(_QWORD *)(a1 + 120) = v26(v27, v25, *(_QWORD *)(a1 + 112));
          *(_QWORD *)(a1 + 64) = v23;
          if (v22 <= v23)
            goto LABEL_11;
        }
        v23 = v25;
        v24 = (char *)malloc_type_realloc(*(void **)(a1 + 120), v25, 0x46E4E2A4uLL);
        *(_QWORD *)(a1 + 120) = v24;
        if (!v24)
          break;
LABEL_14:
        bzero(&v24[*(_QWORD *)(a1 + 64)], v23 - *(_QWORD *)(a1 + 64));
        *(_QWORD *)(a1 + 64) = v23;
        if (v22 <= v23)
          goto LABEL_11;
      }
      v18 = 0;
LABEL_12:
      *v15 = HIDWORD(v18) | (4 * v18);
LABEL_23:
      v28 = (unsigned int *)(*(_QWORD *)(a1 + 120) + (4 * v18));
      v12 = (v8 - 1);
      if (v8 == 1)
      {
        *v28 = 4;
        v28[1] = a5;
        return;
      }
      v29 = *v28;
      if (!(_DWORD)v29)
      {
        *(_QWORD *)v28 = 4;
        v29 = 4;
      }
      ++a3;
      v30 = (v8 + 4);
      v31 = v29 + 4;
      if (v31 + v30 < (unint64_t)*(unsigned int *)(a1 + 200))
      {
        *((_BYTE *)v28 + v31) = v12;
        v32 = (char *)v28 + v31 + 1;
        memcpy(v32, a3, v12);
        *(_DWORD *)&v32[v12] = a5;
        *v28 += v30;
        return;
      }
      v11 = sub_19C36937C(a1);
      v5 = *(_QWORD *)(a1 + 56);
      *(_DWORD *)(v5 + v6 + 4 * v13 + 4) = HIDWORD(v11) | (4 * v11);
LABEL_4:
      v6 = (4 * v11);
      v7 = (unsigned int *)(v5 + v6);
      v8 = v12;
    }
    while ((_DWORD)v12);
  }
  *v7 = a5;
}

unint64_t sub_19C36904C(uint64_t a1, unint64_t a2, uint64_t a3, int a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  int32x4_t v13;
  __n128 v14;
  unsigned __int8 v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  int v20;
  uint64_t (*v21)(void *, _QWORD, _QWORD);
  void *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  int v27;
  uint64_t (*v28)(void *, _QWORD, _QWORD, __n128, __n128);
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int *v33;
  _DWORD *v34;
  int v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int *v40;
  _DWORD *v41;
  int v42;
  uint64_t v43;

  LODWORD(v4) = a2;
  v5 = HIDWORD(a2);
  if (HIDWORD(a2) == 3)
  {
    v8 = 0;
    v9 = *(_QWORD *)(a1 + 56);
    v10 = (4 * a2);
    v11 = v9 + v10;
    v12 = 0uLL;
    v13.i64[0] = 0x300000003;
    v13.i64[1] = 0x300000003;
    v14 = 0uLL;
    do
    {
      v12 = (__n128)vsubq_s32((int32x4_t)v12, vtstq_s32(*(int32x4_t *)(v11 + v8 + 4), v13));
      v14 = (__n128)vsubq_s32((int32x4_t)v14, vtstq_s32(*(int32x4_t *)(v11 + v8 + 20), v13));
      v8 += 32;
    }
    while (v8 != 1024);
    if (!a4)
    {
      v12 = (__n128)vaddq_s32((int32x4_t)v14, (int32x4_t)v12);
      v12.n128_u32[0] = vaddvq_s32((int32x4_t)v12);
      v15 = v12.n128_u8[0];
      if (v12.n128_u32[0] < 0x21)
      {
        v16 = *(_QWORD *)a3;
        v17 = *(_QWORD *)(a3 + 8) + 3;
        v18 = (v17 & 0xFFFFFFFFFFFFFFFCLL) + 4 * v12.n128_u32[0] + 40;
        if (v18 > *(_QWORD *)a3)
        {
          do
          {
            if (2 * (_DWORD)v16)
              v20 = 2 * v16;
            else
              v20 = 0x10000;
            if (*(_DWORD *)(a3 + 24))
            {
              v21 = *(uint64_t (**)(void *, _QWORD, _QWORD))(a3 + 40);
              v22 = *(void **)(a3 + 56);
              v16 = v20;
              if (v21)
              {
                *(_QWORD *)(a3 + 56) = v21(v22, v20, *(_QWORD *)(a3 + 48));
                goto LABEL_10;
              }
              v19 = (char *)malloc_type_realloc(v22, v20, 0x837F6817uLL);
              *(_QWORD *)(a3 + 56) = v19;
              **(_DWORD **)(a3 + 32) = 1;
            }
            else
            {
              v16 = v20;
              v19 = (char *)malloc_type_realloc(*(void **)(a3 + 56), v20, 0x46E4E2A4uLL);
              *(_QWORD *)(a3 + 56) = v19;
            }
            bzero(&v19[*(_QWORD *)a3], v16 - *(_QWORD *)a3);
LABEL_10:
            *(_QWORD *)a3 = v16;
          }
          while (v18 > v16);
        }
        v30 = 0;
        *(_QWORD *)(a3 + 8) = v18;
        *(_QWORD *)(a3 + 16) = v17 & 0xFFFFFFFFFFFFFFFCLL;
        v4 = (v17 >> 2) | 0x200000000;
        v31 = v17 & 0xFFFFFFFC;
        v32 = *(_QWORD *)(a3 + 56) + v31;
        v33 = (int *)(v9 + v10);
        v35 = *v33;
        v34 = v33 + 1;
        *(_DWORD *)v32 = v35;
        *(_BYTE *)(v32 + 37) = v15;
        do
        {
          v36 = sub_19C36904C(a1, ((unint64_t)v34[v30] >> 2) | ((unint64_t)(v34[v30] & 3) << 32), a3, 0, v12, v14);
          if (HIDWORD(v36))
          {
            v37 = *(_QWORD *)(a3 + 56) + v31;
            v38 = *(unsigned __int8 *)(v37 + 36);
            *(_BYTE *)(v37 + 36) = v38 + 1;
            *(_DWORD *)(v37 + 4 * v38 + 40) = HIDWORD(v36) + 4 * v36;
            *(_DWORD *)(v37 + 4 * (v30 >> 5) + 4) |= 1 << v30;
          }
          ++v30;
        }
        while (v30 != 256);
        goto LABEL_36;
      }
    }
    v23 = *(_QWORD *)a3;
    v24 = *(_QWORD *)(a3 + 8) + 3;
    v25 = (v24 & 0xFFFFFFFFFFFFFFFCLL) + 1028;
    if (v25 <= *(_QWORD *)a3)
    {
LABEL_34:
      v39 = 0;
      *(_QWORD *)(a3 + 8) = v25;
      *(_QWORD *)(a3 + 16) = v24 & 0xFFFFFFFFFFFFFFFCLL;
      v4 = (v24 >> 2) | 0x300000000;
      v40 = (int *)(v9 + v10);
      v42 = *v40;
      v41 = v40 + 1;
      *(_DWORD *)(*(_QWORD *)(a3 + 56) + (v24 & 0xFFFFFFFC)) = v42;
      do
      {
        v43 = sub_19C36904C(a1, ((unint64_t)v41[v39] >> 2) | ((unint64_t)(v41[v39] & 3) << 32), a3, 0, v12, v14);
        *(_DWORD *)(*(_QWORD *)(a3 + 56) + (v24 & 0xFFFFFFFC) + 4 + v39 * 4) = HIDWORD(v43) + 4 * v43;
        ++v39;
      }
      while (v39 != 256);
LABEL_36:
      v5 = HIDWORD(v4);
      return v4 | ((unint64_t)v5 << 32);
    }
    while (1)
    {
      if (2 * (_DWORD)v23)
        v27 = 2 * v23;
      else
        v27 = 0x10000;
      if (*(_DWORD *)(a3 + 24))
      {
        v28 = *(uint64_t (**)(void *, _QWORD, _QWORD, __n128, __n128))(a3 + 40);
        v29 = *(void **)(a3 + 56);
        v23 = v27;
        if (v28)
        {
          *(_QWORD *)(a3 + 56) = v28(v29, v27, *(_QWORD *)(a3 + 48), v12, v14);
          goto LABEL_22;
        }
        v26 = (char *)malloc_type_realloc(v29, v27, 0x837F6817uLL);
        *(_QWORD *)(a3 + 56) = v26;
        **(_DWORD **)(a3 + 32) = 1;
      }
      else
      {
        v23 = v27;
        v26 = (char *)malloc_type_realloc(*(void **)(a3 + 56), v27, 0x46E4E2A4uLL);
        *(_QWORD *)(a3 + 56) = v26;
      }
      bzero(&v26[*(_QWORD *)a3], v23 - *(_QWORD *)a3);
LABEL_22:
      *(_QWORD *)a3 = v23;
      if (v25 <= v23)
        goto LABEL_34;
    }
  }
  return v4 | ((unint64_t)v5 << 32);
}

uint64_t sub_19C36937C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _DWORD *v4;
  int v5;
  uint64_t v6;
  unsigned int *v7;
  size_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  int v13;
  uint64_t (*v14)(void *, _QWORD, _QWORD);
  void *v15;
  unsigned __int8 *v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD v20[2];

  v20[1] = *MEMORY[0x1E0C80C00];
  v2 = MEMORY[0x1E0C80A78]();
  v4 = (_DWORD *)((char *)v20 - ((v3 + 19) & 0x1FFFFFFF0));
  v6 = (4 * v5);
  v7 = (unsigned int *)(*(_QWORD *)(v2 + 120) + v6);
  v8 = *v7;
  *v4 = v8;
  memcpy(v4 + 1, v7 + 1, v8);
  if (*(_QWORD *)(a1 + 80) == v6)
  {
    bzero(v7, *(_QWORD *)(a1 + 72) - v6);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a1 + 80);
  }
  v9 = *(_QWORD *)a1;
  v10 = *(_QWORD *)(a1 + 8) + 3;
  v11 = (v10 & 0xFFFFFFFFFFFFFFFCLL) + 1028;
  if (v11 > *(_QWORD *)a1)
  {
    do
    {
      if (2 * (_DWORD)v9)
        v13 = 2 * v9;
      else
        v13 = 0x10000;
      if (*(_DWORD *)(a1 + 24))
      {
        v14 = *(uint64_t (**)(void *, _QWORD, _QWORD))(a1 + 40);
        v15 = *(void **)(a1 + 56);
        v9 = v13;
        if (v14)
        {
          *(_QWORD *)(a1 + 56) = v14(v15, v13, *(_QWORD *)(a1 + 48));
          goto LABEL_7;
        }
        v12 = (char *)malloc_type_realloc(v15, v13, 0x837F6817uLL);
        *(_QWORD *)(a1 + 56) = v12;
        **(_DWORD **)(a1 + 32) = 1;
      }
      else
      {
        v9 = v13;
        v12 = (char *)malloc_type_realloc(*(void **)(a1 + 56), v13, 0x46E4E2A4uLL);
        *(_QWORD *)(a1 + 56) = v12;
      }
      bzero(&v12[*(_QWORD *)a1], v9 - *(_QWORD *)a1);
LABEL_7:
      *(_QWORD *)a1 = v9;
    }
    while (v11 > v9);
  }
  *(_QWORD *)(a1 + 8) = v11;
  *(_QWORD *)(a1 + 16) = v10 & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + (v10 & 0xFFFFFFFC)) = v4[1];
  v16 = (unsigned __int8 *)(v4 + 2);
  v17 = (unint64_t)v4 + v8 + 4;
  if ((unint64_t)(v4 + 2) < v17)
  {
    do
    {
      v18 = (unint64_t)&v16[*v16 + 5];
      sub_19C368DC8(a1, (v10 >> 2) | 0x300000000);
      v16 = (unsigned __int8 *)v18;
    }
    while (v18 < v17);
  }
  return (v10 >> 2) | 0x300000000;
}

_QWORD *sub_19C369568(_QWORD *result, uint64_t *a2, _DWORD *a3, unsigned __int8 *a4, uint64_t a5)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;

  v8 = result;
  v9 = *a2;
  if (*a2)
  {
    v11 = *a4;
    if (qword_1EE41C1B0 != -1)
      dispatch_once(&qword_1EE41C1B0, &unk_1E3D3A5F0);
    v12 = *(_QWORD *)(qword_1EE41C1B8 + 8 * (*a3 & 3));
    result = (*(_QWORD *(**)(__int128 *__return_ptr, uint64_t, uint64_t, _DWORD *, uint64_t))(*(_QWORD *)v12 + 16))(&v18, v12, v9, a3, v11);
    *(_DWORD *)v8 = v18;
    v8[1] = *((_QWORD *)&v18 + 1);
    *((_BYTE *)v8 + 16) = v19;
  }
  else
  {
    *(_DWORD *)result = 0;
    result[1] = 0;
    *((_BYTE *)result + 16) = 0;
  }
  v13 = a5 - 1;
  v14 = a4 + 1;
  do
  {
    if ((*(_BYTE *)v8 & 3) == 0)
      break;
    v16 = *a2;
    if (*a2)
    {
      v17 = *v14;
      if (qword_1EE41C1B0 != -1)
        dispatch_once(&qword_1EE41C1B0, &unk_1E3D3A5F0);
      v15 = *(_QWORD *)(qword_1EE41C1B8 + 8 * (*(_DWORD *)v8 & 3));
      result = (*(_QWORD *(**)(__int128 *__return_ptr, uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v15 + 16))(&v18, v15, v16, v8, v17);
      *(_OWORD *)v8 = v18;
      v8[2] = v19;
    }
    ++v14;
    --v13;
  }
  while (v13);
  return result;
}

_QWORD *sub_19C3696E0(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  *a1 = &off_1E3D355D0;
  v2 = (void *)a1[55];
  if (v2)
  {
    a1[56] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[52];
  if (v3)
  {
    a1[53] = v3;
    operator delete(v3);
  }
  a1[38] = &off_1E3D36930;
  v4 = (void *)a1[45];
  if (v4)
  {
    a1[46] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[39];
  if (v5)
    munmap(v5, a1[40]);
  a1[40] = 0;
  sub_19C36B630(a1 + 19);
  return sub_19C36B630(a1);
}

void sub_19C369768(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  *a1 = &off_1E3D355D0;
  v2 = (void *)a1[55];
  if (v2)
  {
    a1[56] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[52];
  if (v3)
  {
    a1[53] = v3;
    operator delete(v3);
  }
  a1[38] = &off_1E3D36930;
  v4 = (void *)a1[45];
  if (v4)
  {
    a1[46] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[39];
  if (v5)
    munmap(v5, a1[40]);
  a1[40] = 0;
  sub_19C36B630(a1 + 19);
  sub_19C36B630(a1);
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C369804(uint64_t a1, unsigned int a2, unint64_t a3, unint64_t a4, double *a5, unint64_t *a6)
{
  unint64_t *v6;
  double *v7;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  const float *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  BOOL v18;
  char v19;
  BOOL v20;
  uint64_t v21;
  uint32x4_t v22;
  unint64_t v23;
  int8x16_t *v24;
  int8x16_t v25;
  unsigned int v26;
  unsigned int v27;
  _DWORD *v28;
  uint64_t v29;
  unint64_t v30;
  int *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  int *v35;
  uint64_t v36;
  int *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  double v41;
  unsigned int v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  double v46;
  double v47;
  double v48;
  double v49;
  unint64_t v51;
  unint64_t v54;

  v6 = a6;
  v7 = a5;
  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(_QWORD *)(a1 + 168);
  if (v9 <= v10)
    v11 = *(_QWORD *)(a1 + 168);
  else
    v11 = *(_QWORD *)(a1 + 16);
  v12 = a3 + 4 * a4 + 4 * (1 - v11);
  if (a4 >= v11)
  {
    v13 = v11 - 1;
  }
  else
  {
    v12 = a3;
    v13 = a4;
  }
  if (v13)
  {
    v14 = (const float *)(a1 + 24);
    v15 = *(_QWORD *)(a1 + 56);
    if (v13 >= 8)
    {
      v16 = 0;
      v17 = v15 + 4 * v13;
      v18 = v15 >= a1 + 28 || (unint64_t)v14 >= v17;
      v19 = !v18;
      v20 = v12 >= v17 || v15 >= v12 + 4 * v13;
      if (v20 && (v19 & 1) == 0)
      {
        v21 = 0;
        v16 = v13 & 0xFFFFFFFFFFFFFFF8;
        v22 = (uint32x4_t)vld1q_dup_f32(v14);
        v23 = v13 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          v24 = (int8x16_t *)(v15 + v21);
          v25 = vbicq_s8(*(int8x16_t *)(v12 + v21 + 16), (int8x16_t)vcgtq_u32(*(uint32x4_t *)(v12 + v21 + 16), v22));
          *v24 = vbicq_s8(*(int8x16_t *)(v12 + v21), (int8x16_t)vcgtq_u32(*(uint32x4_t *)(v12 + v21), v22));
          v24[1] = v25;
          v21 += 32;
          v23 -= 8;
        }
        while (v23);
        goto LABEL_29;
      }
    }
    else
    {
      v16 = 0;
    }
    do
    {
      v26 = *(_DWORD *)(v12 + 4 * v16);
      if (v26 > *(_DWORD *)v14)
        v26 = 0;
      *(_DWORD *)(v15 + 4 * v16++) = v26;
LABEL_29:
      ;
    }
    while (v13 != v16);
  }
  else
  {
    v15 = *(_QWORD *)(a1 + 56);
  }
  if (*(_DWORD *)(a1 + 24) >= a2)
    v27 = a2;
  else
    v27 = 0;
  *(_DWORD *)(v15 + 4 * v13) = v27;
  v28 = *(_DWORD **)(a1 + 416);
  v29 = *(_QWORD *)(a1 + 440);
  v18 = __CFADD__(v13, 1);
  v30 = v13 + 1;
  v54 = v30;
  if (v18)
  {
    v31 = *(int **)(a1 + 440);
    v32 = *(_QWORD *)(a1 + 416);
    v35 = v31;
    goto LABEL_47;
  }
  v51 = v10;
  v33 = a1 + 304;
  v34 = v30;
  v35 = *(int **)(a1 + 440);
  do
  {
    v36 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, int *, uint64_t))(*(_QWORD *)v33 + 24))(a1 + 304, v15, 1, &dword_1EE41C488, 3);
    if (v36 == 3)
    {
      *v28++ = dword_1EE41C488;
      if (v35)
      {
        v37 = &dword_1EE41C490;
        if (v34 == 1)
          *v35++ = dword_1EE41C48C;
        goto LABEL_37;
      }
    }
    else if (v36 == 1)
    {
      *v28++ = dword_1EE41C488;
      if (v35)
      {
        v37 = &dword_1EE41C488;
LABEL_37:
        *v35++ = *v37;
      }
    }
    v15 += 4;
    --v34;
  }
  while (v34);
  v32 = *(_QWORD *)(a1 + 416);
  v31 = *(int **)(a1 + 440);
  v6 = a6;
  v7 = a5;
  v10 = v51;
LABEL_47:
  v38 = ((uint64_t)v28 - v32) >> 2;
  if (v38 >= v9)
    v39 = v38 - v9;
  else
    v39 = 0;
  if (v9 >= v38)
    v40 = v38;
  else
    v40 = v9;
  v41 = sub_19C3FE0C0(a1, (unsigned int *)(v32 + 4 * v39), v40, v6, 1, *(double *)(a1 + 32));
  v42 = *(_DWORD *)(*(_QWORD *)(a1 + 416) + 4 * (v40 + v39) - 4);
  if (*(_DWORD *)(a1 + 336) <= v42 && *(_DWORD *)(a1 + 340) >= v42
    || *(_DWORD *)(a1 + 344) <= v42 && *(_DWORD *)(a1 + 348) >= v42)
  {
    v43 = v35 - v31;
    v44 = (char *)v35 - (char *)v31 - 4 * v10;
    if (v43 >= v10)
      v45 = v10;
    else
      v45 = v35 - v31;
    if (v43 <= v10)
      v44 = 0;
    v46 = sub_19C3FE0C0(a1 + 152, (unsigned int *)(v29 + v44), v45, 0, 0, *(double *)(a1 + 32)) + v41;
    v47 = sub_19C3FE0C0(a1, *(unsigned int **)(a1 + 56), v54, v6, 1, *(double *)(a1 + 32));
    v48 = __exp10(v46);
    v49 = __exp10(v47);
    v41 = log10(v49 + v48);
  }
  *v7 = v41;
  return 1;
}

_QWORD *sub_19C369B24(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  const float *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  BOOL v17;
  uint32x4_t v19;
  int8x16_t *v20;
  int8x16_t *v21;
  unint64_t v22;
  int8x16_t v23;
  unint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  int *v31;
  _DWORD *v32;
  unint64_t v33;
  uint64_t v34;
  int *v35;
  unint64_t v36;
  double v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t *v40;
  int v41;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  void *v49;
  uint64_t v50;
  _QWORD v54[5];
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;

  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)(a1 + 168);
  if (v8 > v9)
    v9 = *(_QWORD *)(a1 + 16);
  v10 = a2 + 4 * a3 + 4 * (1 - v9);
  if (a3 >= v9)
  {
    v11 = v9 - 1;
  }
  else
  {
    v10 = a2;
    v11 = a3;
  }
  if (v11)
  {
    v12 = (const float *)(a1 + 24);
    v13 = *(_QWORD *)(a1 + 56);
    if (v11 > 7)
    {
      v14 = 0;
      v15 = v13 + 4 * v11;
      v17 = v13 < a1 + 28 && (unint64_t)v12 < v15;
      if ((v10 >= v15 || v13 >= v10 + 4 * v11) && !v17)
      {
        v14 = v11 & 0xFFFFFFFFFFFFFFF8;
        v19 = (uint32x4_t)vld1q_dup_f32(v12);
        v20 = (int8x16_t *)(v13 + 16);
        v21 = (int8x16_t *)(v10 + 16);
        v22 = v11 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          v23 = vbicq_s8(*v21, (int8x16_t)vcgtq_u32(*(uint32x4_t *)v21, v19));
          v20[-1] = vbicq_s8(v21[-1], (int8x16_t)vcgtq_u32((uint32x4_t)v21[-1], v19));
          *v20 = v23;
          v20 += 2;
          v21 += 2;
          v22 -= 8;
        }
        while (v22);
        if (v11 == v14)
        {
LABEL_28:
          v30 = a1 + 304;
          v31 = *(int **)(a1 + 440);
          v32 = *(_DWORD **)(a1 + 416);
          v33 = v11;
          while (1)
          {
            v34 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, int *, uint64_t))(*(_QWORD *)v30 + 24))(a1 + 304, v13, 1, &dword_1EE41C488, 3);
            if (v34 == 1)
            {
              *v32++ = dword_1EE41C488;
              if (!v31)
                goto LABEL_30;
              v35 = &dword_1EE41C488;
            }
            else
            {
              if (v34 != 3)
                goto LABEL_30;
              v35 = &dword_1EE41C490;
              *v32++ = dword_1EE41C488;
              if (!v31)
                goto LABEL_30;
            }
            *v31++ = *v35;
LABEL_30:
            v13 += 4;
            if (!--v33)
              goto LABEL_37;
          }
        }
      }
    }
    else
    {
      v14 = 0;
    }
    v24 = v11 - v14;
    v25 = 4 * v14;
    v26 = (unsigned int *)(v13 + 4 * v14);
    v27 = (unsigned int *)(v10 + v25);
    do
    {
      v29 = *v27++;
      v28 = v29;
      if (v29 > *(_DWORD *)v12)
        v28 = 0;
      *v26++ = v28;
      --v24;
    }
    while (v24);
    goto LABEL_28;
  }
LABEL_37:
  if (v8 <= a4)
    return 0;
  if (v11 >= v8 - 1)
    v36 = v8 - 1;
  else
    v36 = v11;
  v37 = 0.0;
  if (v36 > a4)
  {
    v38 = 4 * v11 - 4 * v36;
    do
    {
      if (sub_19C3B962C(*(uint64_t ***)(a1 + 80), (unsigned int *)(*(_QWORD *)(a1 + 416) + v38), v36, v54) != 2)
        v37 = *(double *)(**(_QWORD **)(a1 + 96) + 8 * BYTE1(v54[0])) + v37;
      --v36;
      v38 += 4;
    }
    while (v36 > a4);
  }
  if (a4 || a5 >> 31)
  {
    v39 = (_QWORD *)operator new();
    sub_19C36A090((uint64_t)v39, a1, (void *)(*(_QWORD *)(a1 + 416) + 4 * v11 - 4 * a4), a4, *(const void **)(a1 + 440), v11, a6, v37);
  }
  else
  {
    if (!*(_QWORD *)(a1 + 88))
    {
      v54[0] = &off_1E3D37438;
      v54[1] = a1;
      *(double *)&v54[2] = v37;
      v54[3] = 0;
      v54[4] = a6;
      v55 = 0u;
      v56 = 0u;
      v57 = 0u;
      v58 = 0u;
      v59 = 0u;
      v40 = *(uint64_t **)(a1 + 80);
      v41 = *(_DWORD *)(*v40 + 32);
      if (v41 == 5 || v41 == 3)
      {
        v43 = *(_DWORD *)(*v40 + 12) + 1;
        v45 = operator new();
        v44 = *v40;
        *(_QWORD *)v45 = off_1E3D338B0;
        *(_QWORD *)(v45 + 8) = v44;
        *(_OWORD *)(v45 + 16) = 0u;
        *(_OWORD *)(v45 + 32) = 0u;
        *(_DWORD *)(v45 + 48) = v43;
        *(_DWORD *)(v45 + 56) = 0;
        *(_QWORD *)(v45 + 85) = 0;
        *(_QWORD *)(v45 + 72) = 0;
        *(_QWORD *)(v45 + 80) = 0;
        *(_QWORD *)(v45 + 64) = 0;
      }
      else
      {
        v45 = operator new();
        *(_QWORD *)v45 = off_1E3D339B0;
      }
      v60 = v45;
      v61 = 0u;
      v62 = 0u;
      v46 = operator new();
      sub_19C3CBA68(v46, (uint64_t)v54);
      v47 = *(_QWORD *)(a1 + 88);
      *(_QWORD *)(a1 + 88) = v46;
      if (v47)
      {
        v48 = *(void **)(v47 + 24);
        if (v48)
        {
          *(_QWORD *)(v47 + 32) = v48;
          operator delete(v48);
        }
        v49 = *(void **)v47;
        if (*(_QWORD *)v47)
        {
          *(_QWORD *)(v47 + 8) = v49;
          operator delete(v49);
        }
        MEMORY[0x1A1AD355C](v47, 0x30C400D66AB62);
      }
      sub_19C369F94(v54);
    }
    v39 = (_QWORD *)operator new();
    v50 = *(_QWORD *)(a1 + 88);
    *v39 = &off_1E3D36D68;
    v39[1] = v50;
    v39[2] = -1;
  }
  return v39;
}

void sub_19C369F38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  MEMORY[0x1A1AD355C](v4, 0x30C400D66AB62);
  sub_19C369F94((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19C369F6C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD355C](v1, 0x10B1C40D29F17F9);
  _Unwind_Resume(a1);
}

_QWORD *sub_19C369F94(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  _QWORD *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;

  *a1 = &off_1E3D37438;
  v2 = a1[17];
  if (v2)
  {
    v3 = a1[18];
    v4 = (void *)a1[17];
    if (v3 != v2)
    {
      do
      {
        v5 = *(void **)(v3 - 24);
        if (v5)
        {
          *(_QWORD *)(v3 - 16) = v5;
          operator delete(v5);
        }
        v3 -= 40;
      }
      while (v3 != v2);
      v4 = (void *)a1[17];
    }
    a1[18] = v2;
    operator delete(v4);
  }
  v6 = (_QWORD *)a1[16];
  a1[16] = 0;
  if (v6)
  {
    if (*v6)
      (*(void (**)(_QWORD))(*(_QWORD *)*v6 + 8))(*v6);
    MEMORY[0x1A1AD355C](v6, 0x1020C40EDED9539);
  }
  v7 = a1[15];
  a1[15] = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
  v8 = (void *)a1[11];
  if (v8)
  {
    a1[12] = v8;
    operator delete(v8);
  }
  v9 = (void *)a1[8];
  if (v9)
  {
    a1[9] = v9;
    operator delete(v9);
  }
  v10 = (void *)a1[5];
  if (v10)
  {
    a1[6] = v10;
    operator delete(v10);
  }
  return a1;
}

uint64_t sub_19C36A090(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, const void *a5, uint64_t a6, uint64_t a7, double a8)
{
  char *v14;
  char *v15;
  size_t v16;
  char *v17;
  char *v18;

  *(_QWORD *)a1 = &off_1E3D37438;
  *(_QWORD *)(a1 + 8) = a2;
  *(double *)(a1 + 16) = a8;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = a7;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  if (a4)
  {
    if (a4 < 0)
      sub_19C2A18E8();
    v14 = (char *)operator new(4 * a4);
    *(_QWORD *)(a1 + 40) = v14;
    *(_QWORD *)(a1 + 48) = v14;
    v15 = &v14[4 * a4];
    *(_QWORD *)(a1 + 56) = v15;
    memcpy(v14, a3, 4 * a4);
    *(_QWORD *)(a1 + 48) = v15;
  }
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  if (a6)
  {
    if (a6 < 0)
      sub_19C2A18E8();
    v16 = 4 * a6;
    v17 = (char *)operator new(4 * a6);
    *(_QWORD *)(a1 + 64) = v17;
    *(_QWORD *)(a1 + 72) = v17;
    v18 = &v17[4 * a6];
    *(_QWORD *)(a1 + 80) = v18;
    memcpy(v17, a5, v16);
    *(_QWORD *)(a1 + 72) = v18;
  }
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_QWORD *)(a1 + 120) = sub_19C3BAA78(*(uint64_t **)(a2 + 80), (unsigned int *)a3, a4);
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  return a1;
}

void sub_19C36A1B4(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void **v2;
  void **v3;
  void **v4;
  void *v6;
  void *v7;
  void *v8;

  v6 = *v4;
  if (*v4)
  {
    v1[12] = v6;
    operator delete(v6);
    v7 = *v3;
    if (!*v3)
    {
LABEL_3:
      v8 = *v2;
      if (!*v2)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else
  {
    v7 = *v3;
    if (!*v3)
      goto LABEL_3;
  }
  v1[9] = v7;
  operator delete(v7);
  v8 = *v2;
  if (!*v2)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  v1[6] = v8;
  operator delete(v8);
  _Unwind_Resume(exception_object);
}

void sub_19C36A22C(_QWORD *a1)
{
  sub_19C369F94(a1);
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C36A250(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  int64_t v13;
  char *v14;
  void **v15;
  double v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t i;
  void *v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  _BOOL4 v26;
  double v27;
  double v28;
  unint64_t v29;
  unsigned int *v30;
  int *v31;
  unsigned int *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  _BYTE *v38;
  unsigned int *v39;
  unint64_t v40;
  uint64_t v41;
  _OWORD *v42;
  __int128 *v43;
  uint64_t v44;
  __int128 v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  unsigned int v53;
  int v54;
  int v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unsigned int v62;
  uint64_t v63;
  unsigned int v64;
  int v65;
  unint64_t v66;
  _DWORD *v67;
  int *v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  _BYTE *v74;
  char *v75;
  uint64_t *v76;
  uint64_t v77;
  int v78;
  int *v79;
  unint64_t v80;
  int *v81;
  unint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  _BYTE *v89;
  uint64_t v90;
  _OWORD *v91;
  int *v92;
  uint64_t v93;
  __int128 v94;
  int v95;
  uint64_t *v96;
  void *v97;
  uint64_t v98;
  _QWORD *v99;
  unint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  int v103;
  unint64_t v104;
  char *v105;
  _DWORD *v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  _BYTE *v113;
  _DWORD *v114;
  _DWORD *v115;
  unint64_t v116;
  char *v117;
  _DWORD *v118;
  unint64_t v119;
  uint64_t v120;
  _OWORD *v121;
  char *v122;
  uint64_t v123;
  __int128 v124;
  int v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  _OWORD *v129;
  char *v130;
  uint64_t v131;
  __int128 v132;
  int v133;
  _BYTE *v135;
  _BYTE *v136;
  int64_t v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t *v140;
  uint64_t v141;
  _QWORD *v142;
  uint64_t *v143;
  unint64_t v144;
  unint64_t v145;
  unint64_t v146;
  unint64_t v147;
  char *v148;
  char *v149;
  char *v150;
  uint64_t v151;
  int v152;
  uint64_t *v153;
  void *v154;
  _BYTE *v155;
  _BYTE *v156;
  uint64_t v157;
  _QWORD *v158;
  int *v159;
  int v160;
  int v161;
  uint64_t v162;
  int v163;
  uint64_t *v164;
  __n128 v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t v168;
  double v169;
  _BYTE *v170;
  _BYTE *v171;
  int64_t v172;
  char *v173;
  char *v174;
  char *v175;
  uint64_t j;
  char *v177;
  unint64_t v178;
  _BYTE *v179;
  _BYTE *v180;
  int64_t v181;
  char *v182;
  uint64_t **v183;
  int64x2_t v184;
  _BYTE *v185;
  char *v186;
  _BYTE *v187;
  void *v188;
  unsigned __int8 v189;
  __int32 v190;
  int v191;
  int64x2_t v192;
  __int128 v193;
  uint64_t v194;
  __int128 v195;
  int v196;
  __int128 v197;
  unint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  __int16 v202;
  int v203;
  char *v204;
  char *v205;
  char *v206;

  v2 = *(_QWORD *)(a1 + 136);
  v183 = (uint64_t **)(a1 + 136);
  if ((unint64_t)(*(_QWORD *)(a1 + 24) - 1) > 2
    || *(_QWORD *)(a1 + 32) < 2uLL
    || (v3 = *(_QWORD *)(a1 + 144), v4 = (v3 - v2) / 40, v4 >= *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16) - 1)
    || (v5 = *(_QWORD *)(a1 + 40),
        v6 = *(_BYTE **)(a1 + 48),
        v7 = (unint64_t)&v6[-v5],
        v8 = (uint64_t)&v6[-v5] >> 2,
        v9 = v8 - v4,
        v8 <= v4))
  {
    v190 = 0;
LABEL_10:
    v15 = (void **)(a1 + 88);
    v16 = 0.0;
    v184 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
    while (1)
    {
      while (1)
      {
        while (1)
        {
          v17 = *(uint64_t **)(a1 + 128);
          if (v17)
          {
            v18 = *v17;
            if (*v17)
            {
              v19 = v17[1];
              if (v19 <= 2)
              {
                v17[1] = v19 + 1;
                if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18))
                  break;
              }
            }
          }
          *(_QWORD *)(a1 + 96) = *(_QWORD *)(a1 + 88);
          v20 = *(_QWORD *)(a1 + 136);
          for (i = *(_QWORD *)(a1 + 144); i != v20; i -= 40)
          {
            v22 = *(void **)(i - 24);
            if (v22)
            {
              *(_QWORD *)(i - 16) = v22;
              operator delete(v22);
            }
          }
          *(_QWORD *)(a1 + 144) = v20;
          *(_QWORD *)(a1 + 112) = 0;
          if (!(***(unsigned int (****)(_QWORD))(a1 + 120))(*(_QWORD *)(a1 + 120)))
            goto LABEL_145;
          v26 = (v189 = 0,
                 v23 = (*(uint64_t (**)(_QWORD, unsigned __int8 *))(**(_QWORD **)(a1 + 120) + 8))(*(_QWORD *)(a1 + 120), &v189), v24 = v23, v25 = *(_QWORD *)(a1 + 8), *(_DWORD *)(v25 + 336) <= v23)&& *(_DWORD *)(v25 + 340) >= v23|| *(_DWORD *)(v25 + 344) <= v23 && *(_DWORD *)(v25 + 348) >= v23;
          v27 = *(double *)(a1 + 16);
          v28 = *(double *)(**(_QWORD **)(v25 + 104) + 8 * v189);
          v30 = *(unsigned int **)(a1 + 96);
          v29 = *(_QWORD *)(a1 + 104);
          if ((unint64_t)v30 >= v29)
          {
            v32 = (unsigned int *)*v15;
            v33 = (char *)v30 - (_BYTE *)*v15;
            v34 = v33 >> 2;
            v35 = (v33 >> 2) + 1;
            if (v35 >> 62)
              goto LABEL_223;
            v36 = v29 - (_QWORD)v32;
            if (v36 >> 1 > v35)
              v35 = v36 >> 1;
            v37 = (unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v35;
            if (v37)
            {
              if (v37 >> 62)
                goto LABEL_224;
              v38 = operator new(4 * v37);
            }
            else
            {
              v38 = 0;
            }
            v39 = (unsigned int *)&v38[4 * v34];
            *v39 = v24;
            v31 = (int *)(v39 + 1);
            if (v30 != v32)
            {
              v40 = (char *)(v30 - 1) - (char *)v32;
              if (v40 < 0x2C)
                goto LABEL_237;
              if ((unint64_t)((char *)v30 - &v38[v33]) < 0x20)
                goto LABEL_237;
              v41 = (v40 >> 2) + 1;
              v42 = &v38[4 * v34 - 16];
              v43 = (__int128 *)(v30 - 4);
              v44 = v41 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v45 = *v43;
                *(v42 - 1) = *(v43 - 1);
                *v42 = v45;
                v42 -= 2;
                v43 -= 2;
                v44 -= 8;
              }
              while (v44);
              v39 -= v41 & 0x7FFFFFFFFFFFFFF8;
              v30 -= v41 & 0x7FFFFFFFFFFFFFF8;
              if (v41 != (v41 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_237:
                do
                {
                  v46 = *--v30;
                  *--v39 = v46;
                }
                while (v30 != v32);
              }
            }
            *(_QWORD *)(a1 + 88) = v39;
            *(_QWORD *)(a1 + 96) = v31;
            *(_QWORD *)(a1 + 104) = &v38[4 * v37];
            if (v32)
              operator delete(v32);
          }
          else
          {
            *v30 = v23;
            v31 = (int *)(v30 + 1);
          }
          *(_QWORD *)(a1 + 96) = v31;
          *(double *)(a1 + 112) = v28 + v27 + *(double *)(a1 + 112);
          if (v26)
          {
            v48 = *(_QWORD *)(a1 + 64);
            v47 = *(_QWORD *)(a1 + 72);
            v49 = v47 - v48;
            if ((unint64_t)(v47 - v48) >= 8)
            {
              v204 = 0;
              v205 = 0;
              v206 = 0;
              if ((v49 & 0x8000000000000000) != 0)
                sub_19C2A18E8();
              v50 = (char *)operator new(v47 - v48);
              v204 = v50;
              v51 = &v50[v49];
              v206 = &v50[v49];
              bzero(v50, v47 - v48);
              v205 = &v50[v49];
              if (v47 != v48 + 4)
                memmove(v50, (const void *)(v48 + 4), v47 - (v48 + 4));
              v52 = *(_QWORD *)(a1 + 8);
              v53 = v24 - *(_DWORD *)(v52 + 336);
              v54 = *(_DWORD *)(v52 + 404);
              v55 = *(_DWORD *)(v52 + 408);
              v56 = v55 + v54;
              v57 = *(_QWORD *)(v52 + 360);
              v58 = *(_QWORD *)(v52 + 368);
              if (v58 != v57)
              {
                v59 = (v58 - v57) >> 3;
                do
                {
                  v60 = v59 >> 1;
                  v61 = v57 + 8 * (v59 >> 1);
                  v62 = *(_DWORD *)(v61 + 4);
                  v63 = v61 + 8;
                  v59 += ~(v59 >> 1);
                  if (v62 < v53 << v56)
                    v57 = v63;
                  else
                    v59 = v60;
                }
                while (v59);
              }
              if (v57 == v58 || (v64 = *(_DWORD *)(v57 + 4), ((v64 >> v56) & ~(-1 << *(_DWORD *)(v52 + 400))) != v53))
                v65 = 0;
              else
                v65 = *(_DWORD *)(v52 + 344) + ((v64 >> v55) & ~(-1 << v54));
              v188 = v50;
              v66 = *(_QWORD *)(a1 + 104);
              if ((unint64_t)v31 < v66)
              {
                *v31 = v65;
                v67 = v31 + 1;
LABEL_104:
                *(_QWORD *)(a1 + 96) = v67;
                *((_DWORD *)v51 - 1) = v65;
                v96 = (uint64_t *)operator new();
                v97 = v188;
                v98 = (*(uint64_t (**)(uint64_t, void *, unint64_t, unint64_t, _QWORD, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 152) + 24))(*(_QWORD *)(a1 + 8) + 152, v188, v49 >> 2, v49 >> 2, 0, 1);
                *v96 = v98;
                v96[1] = 0;
                v99 = *(_QWORD **)(a1 + 128);
                *(_QWORD *)(a1 + 128) = v96;
                if (v99)
                {
                  if (*v99)
                    (*(void (**)(_QWORD))(*(_QWORD *)*v99 + 8))(*v99);
                  MEMORY[0x1A1AD355C](v99, 0x1020C40EDED9539);
                  v96 = *(uint64_t **)(a1 + 128);
                  v98 = *v96;
                }
                if (v98)
                {
                  v100 = v96[1];
                  if (v100 <= 2)
                  {
                    v96[1] = v100 + 1;
                    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v98 + 16))(v98))
                    {
                      v101 = *(uint64_t **)(a1 + 128);
                      v192 = v184;
                      *(_QWORD *)&v193 = 0;
                      WORD4(v193) = 0;
                      LOBYTE(v194) = 1;
                      v195 = xmmword_19C46DE10;
                      v196 = 0;
                      v197 = xmmword_19C46DE10;
                      v198 = 0xFFEFFFFFFFFFFFFFLL;
                      v203 = 0;
                      v200 = 0;
                      v201 = 0;
                      v199 = 0;
                      v202 = 0;
                      v102 = *v101;
                      if (*v101 && (unint64_t)v101[1] <= 2)
                      {
                        v191 = 0;
                        (*(void (**)(uint64_t, int *, int64x2_t *))(*(_QWORD *)v102 + 24))(v102, &v191, &v192);
                        v16 = *(double *)v192.i64;
                        v103 = v191;
                      }
                      else
                      {
                        v103 = 0;
                      }
                      v105 = *(char **)(a1 + 96);
                      v104 = *(_QWORD *)(a1 + 104);
                      if ((unint64_t)v105 >= v104)
                      {
                        v107 = (char *)*v15;
                        v108 = v105 - (_BYTE *)*v15;
                        v109 = v108 >> 2;
                        v110 = (v108 >> 2) + 1;
                        if (v110 >> 62)
LABEL_226:
                          sub_19C2A18E8();
                        v111 = v104 - (_QWORD)v107;
                        if (v111 >> 1 > v110)
                          v110 = v111 >> 1;
                        if ((unint64_t)v111 >= 0x7FFFFFFFFFFFFFFCLL)
                          v112 = 0x3FFFFFFFFFFFFFFFLL;
                        else
                          v112 = v110;
                        if (v112)
                        {
                          if (v112 >> 62)
LABEL_227:
                            sub_19C2A143C();
                          v113 = operator new(4 * v112);
                        }
                        else
                        {
                          v113 = 0;
                        }
                        v118 = &v113[4 * v109];
                        *v118 = v103;
                        v106 = v118 + 1;
                        if (v105 != v107)
                        {
                          v119 = v105 - 4 - v107;
                          if (v119 < 0x2C)
                            goto LABEL_236;
                          if ((unint64_t)(v105 - &v113[v108]) < 0x20)
                            goto LABEL_236;
                          v120 = (v119 >> 2) + 1;
                          v121 = &v113[4 * v109 - 16];
                          v122 = v105 - 16;
                          v123 = v120 & 0x7FFFFFFFFFFFFFF8;
                          do
                          {
                            v124 = *(_OWORD *)v122;
                            *(v121 - 1) = *((_OWORD *)v122 - 1);
                            *v121 = v124;
                            v121 -= 2;
                            v122 -= 32;
                            v123 -= 8;
                          }
                          while (v123);
                          v118 -= v120 & 0x7FFFFFFFFFFFFFF8;
                          v105 -= 4 * (v120 & 0x7FFFFFFFFFFFFFF8);
                          if (v120 != (v120 & 0x7FFFFFFFFFFFFFF8))
                          {
LABEL_236:
                            do
                            {
                              v125 = *((_DWORD *)v105 - 1);
                              v105 -= 4;
                              *--v118 = v125;
                            }
                            while (v105 != v107);
                          }
                        }
                        *(_QWORD *)(a1 + 88) = v118;
                        *(_QWORD *)(a1 + 96) = v106;
                        *(_QWORD *)(a1 + 104) = &v113[4 * v112];
                        if (v107)
                          operator delete(v107);
                      }
                      else
                      {
                        *(_DWORD *)v105 = v103;
                        v106 = v105 + 4;
                      }
                      v97 = v188;
                      *(_QWORD *)(a1 + 96) = v106;
                    }
                    else
                    {
                      v97 = v188;
                    }
                  }
                }
                operator delete(v97);
                goto LABEL_145;
              }
              v186 = &v50[v49];
              v68 = (int *)*v15;
              v69 = (char *)v31 - (_BYTE *)*v15;
              v70 = v69 >> 2;
              v71 = (v69 >> 2) + 1;
              if (v71 >> 62)
                goto LABEL_226;
              v72 = v66 - (_QWORD)v68;
              if (v72 >> 1 > v71)
                v71 = v72 >> 1;
              if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFFCLL)
                v73 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v73 = v71;
              if (v73)
              {
                if (v73 >> 62)
                  goto LABEL_227;
                v74 = operator new(4 * v73);
              }
              else
              {
                v74 = 0;
              }
              v79 = (int *)&v74[4 * v70];
              *v79 = v65;
              v67 = v79 + 1;
              if (v31 != v68)
              {
                v80 = (char *)(v31 - 1) - (char *)v68;
                if (v80 < 0x2C)
                {
                  v81 = v31;
                  goto LABEL_100;
                }
                if ((unint64_t)((char *)v31 - v74 - v69) < 0x20)
                {
                  v81 = v31;
                  goto LABEL_100;
                }
                v90 = (v80 >> 2) + 1;
                v81 = &v31[-(v90 & 0x7FFFFFFFFFFFFFF8)];
                v91 = &v74[4 * v70 - 16];
                v92 = v31 - 4;
                v93 = v90 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  v94 = *(_OWORD *)v92;
                  *(v91 - 1) = *((_OWORD *)v92 - 1);
                  *v91 = v94;
                  v91 -= 2;
                  v92 -= 8;
                  v93 -= 8;
                }
                while (v93);
                v79 -= v90 & 0x7FFFFFFFFFFFFFF8;
                if (v90 != (v90 & 0x7FFFFFFFFFFFFFF8))
                {
                  do
                  {
LABEL_100:
                    v95 = *--v81;
                    *--v79 = v95;
                  }
                  while (v81 != v68);
                }
              }
              *(_QWORD *)(a1 + 88) = v79;
              *(_QWORD *)(a1 + 96) = v67;
              *(_QWORD *)(a1 + 104) = &v74[4 * v73];
              if (v68)
                operator delete(v68);
              v51 = v186;
              goto LABEL_104;
            }
          }
          else
          {
LABEL_145:
            v126 = *(char **)(a1 + 88);
            v127 = *(_QWORD *)(a1 + 96) - (_QWORD)v126;
            if (!v127)
              return 0;
            if (sub_19C3CBFB4(*(_QWORD *)(a1 + 8) + 304, v126, v127 >> 2, (unsigned int *)&v190, 1) == 1)
            {
              *(double *)v192.i64 = *(double *)(a1 + 112) + v16;
              v192.i32[2] = v190;
              v194 = 0;
              v193 = 0uLL;
              v136 = *(_BYTE **)(a1 + 88);
              v135 = *(_BYTE **)(a1 + 96);
              v137 = v135 - v136;
              if (v135 == v136)
              {
                v138 = 0;
              }
              else
              {
                if (v137 < 0)
                  sub_19C2A18E8();
                *(_QWORD *)&v193 = operator new(v135 - v136);
                v138 = v193 + 4 * (v137 >> 2);
                memcpy((void *)v193, v136, v137);
                *((_QWORD *)&v193 + 1) = v138;
              }
              v140 = *(uint64_t **)(a1 + 144);
              v139 = *(_QWORD *)(a1 + 152);
              if ((unint64_t)v140 >= v139)
              {
                v143 = *v183;
                v144 = 0xCCCCCCCCCCCCCCCDLL * (v140 - *v183);
                v145 = v144 + 1;
                if (v144 + 1 > 0x666666666666666)
                  sub_19C2A18E8();
                v146 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v139 - (_QWORD)v143) >> 3);
                if (2 * v146 > v145)
                  v145 = 2 * v146;
                if (v146 >= 0x333333333333333)
                  v147 = 0x666666666666666;
                else
                  v147 = v145;
                if (v147 > 0x666666666666666)
                  sub_19C2A143C();
                v148 = (char *)operator new(40 * v147);
                v149 = &v148[40 * v144];
                v150 = &v148[40 * v147];
                *(_QWORD *)v149 = v192.i64[0];
                *((_DWORD *)v149 + 2) = v192.i32[2];
                *((_OWORD *)v149 + 1) = v193;
                *((_QWORD *)v149 + 4) = v138;
                v142 = v149 + 40;
                if (v140 == v143)
                {
                  *(_QWORD *)(a1 + 136) = v149;
                  *(_QWORD *)(a1 + 144) = v142;
                  *(_QWORD *)(a1 + 152) = v150;
                }
                else
                {
                  do
                  {
                    v151 = *(v140 - 5);
                    v140 -= 5;
                    v152 = *((_DWORD *)v140 + 2);
                    *((_QWORD *)v149 - 5) = v151;
                    v149 -= 40;
                    *((_DWORD *)v149 + 2) = v152;
                    *((_OWORD *)v149 + 1) = *((_OWORD *)v140 + 1);
                    *((_QWORD *)v149 + 4) = v140[4];
                    v140[2] = 0;
                    v140[3] = 0;
                    v140[4] = 0;
                  }
                  while (v140 != v143);
                  v140 = *(uint64_t **)(a1 + 136);
                  v153 = *(uint64_t **)(a1 + 144);
                  *(_QWORD *)(a1 + 136) = v149;
                  *(_QWORD *)(a1 + 144) = v142;
                  *(_QWORD *)(a1 + 152) = v150;
                  while (v153 != v140)
                  {
                    v154 = (void *)*(v153 - 3);
                    if (v154)
                    {
                      *(v153 - 2) = (uint64_t)v154;
                      operator delete(v154);
                    }
                    v153 -= 5;
                  }
                }
                if (v140)
                  operator delete(v140);
              }
              else
              {
                v141 = v192.i64[0];
                *((_DWORD *)v140 + 2) = v192.i32[2];
                *v140 = v141;
                *((_OWORD *)v140 + 1) = v193;
                v140[4] = v138;
                v142 = v140 + 5;
              }
              *(_QWORD *)(a1 + 144) = v142;
              ++*(_QWORD *)(a1 + 24);
              return 1;
            }
          }
        }
        v75 = (char *)(*(_QWORD *)(a1 + 96) - 4);
        *(_QWORD *)(a1 + 96) = v75;
        v76 = *(uint64_t **)(a1 + 128);
        v192 = v184;
        *(_QWORD *)&v193 = 0;
        WORD4(v193) = 0;
        LOBYTE(v194) = 1;
        v195 = xmmword_19C46DE10;
        v196 = 0;
        v197 = xmmword_19C46DE10;
        v198 = 0xFFEFFFFFFFFFFFFFLL;
        v203 = 0;
        v200 = 0;
        v201 = 0;
        v199 = 0;
        v202 = 0;
        v77 = *v76;
        if (!*v76)
          goto LABEL_85;
        if ((unint64_t)v76[1] <= 2)
        {
          LODWORD(v204) = 0;
          (*(void (**)(uint64_t, char **, int64x2_t *))(*(_QWORD *)v77 + 24))(v77, &v204, &v192);
          v16 = *(double *)v192.i64;
          v78 = (int)v204;
          v75 = *(char **)(a1 + 96);
        }
        else
        {
LABEL_85:
          v78 = 0;
        }
        v82 = *(_QWORD *)(a1 + 104);
        if ((unint64_t)v75 >= v82)
          break;
        *(_DWORD *)v75 = v78;
        *(_QWORD *)(a1 + 96) = v75 + 4;
      }
      v83 = (char *)*v15;
      v84 = v75 - (_BYTE *)*v15;
      v85 = v84 >> 2;
      v86 = (v84 >> 2) + 1;
      if (v86 >> 62)
LABEL_223:
        sub_19C2A18E8();
      v87 = v82 - (_QWORD)v83;
      if (v87 >> 1 > v86)
        v86 = v87 >> 1;
      if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFFCLL)
        v88 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v88 = v86;
      if (v88)
      {
        if (v88 >> 62)
LABEL_224:
          sub_19C2A143C();
        v89 = operator new(4 * v88);
      }
      else
      {
        v89 = 0;
      }
      v114 = &v89[4 * v85];
      *v114 = v78;
      v115 = v114 + 1;
      if (v75 != v83)
      {
        v116 = v75 - 4 - v83;
        if (v116 < 0x2C)
        {
          v117 = v75;
          goto LABEL_151;
        }
        if ((unint64_t)(v75 - &v89[v84]) < 0x20)
        {
          v117 = v75;
          do
          {
LABEL_151:
            v133 = *((_DWORD *)v117 - 1);
            v117 -= 4;
            *--v114 = v133;
          }
          while (v117 != v83);
          goto LABEL_152;
        }
        v128 = (v116 >> 2) + 1;
        v117 = &v75[-4 * (v128 & 0x7FFFFFFFFFFFFFF8)];
        v129 = &v89[4 * v85 - 16];
        v130 = v75 - 16;
        v131 = v128 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v132 = *(_OWORD *)v130;
          *(v129 - 1) = *((_OWORD *)v130 - 1);
          *v129 = v132;
          v129 -= 2;
          v130 -= 32;
          v131 -= 8;
        }
        while (v131);
        v114 -= v128 & 0x7FFFFFFFFFFFFFF8;
        if (v128 != (v128 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_151;
      }
LABEL_152:
      *(_QWORD *)(a1 + 88) = v114;
      *(_QWORD *)(a1 + 96) = v115;
      *(_QWORD *)(a1 + 104) = &v89[4 * v88];
      if (v83)
        operator delete(v83);
      *(_QWORD *)(a1 + 96) = v115;
    }
  }
  v192 = 0uLL;
  *(_QWORD *)&v193 = 0;
  if ((v7 & 0x8000000000000000) != 0)
    sub_19C2A18E8();
  v10 = (uint64_t)operator new((size_t)&v6[-v5]);
  v192.i64[0] = v10;
  *(_QWORD *)&v193 = v10 + 4 * v8;
  bzero((void *)v10, (size_t)&v6[-v5]);
  v192.i64[1] = v10 + v7;
  v12 = *(_BYTE **)(a1 + 64);
  v11 = *(_BYTE **)(a1 + 72);
  v205 = 0;
  v206 = 0;
  v204 = 0;
  v185 = v12;
  v187 = v11;
  v13 = v11 - v12;
  if (v11 == v12)
  {
    v14 = 0;
  }
  else
  {
    if (v13 < 0)
      sub_19C2A18E8();
    v14 = (char *)operator new(v11 - v12);
    v204 = v14;
    v206 = &v14[4 * (v13 >> 2)];
    bzero(v14, v13);
    v13 += (int64_t)v14;
    v205 = (char *)v13;
  }
  v155 = (_BYTE *)(v5 + 4 * v4);
  if (v6 != v155)
    memmove((void *)v10, v155, v6 - v155);
  v156 = &v185[4 * v4];
  if (v187 != v156)
    memmove(v14, v156, v187 - v156);
  if (v3 != v2)
  {
    if (v4 <= 1)
      v157 = 1;
    else
      v157 = (v3 - v2) / 40;
    v158 = (_QWORD *)(v2 + 24);
    do
    {
      v159 = (int *)*(v158 - 1);
      v162 = *v158 - (_QWORD)v159;
      if (v162 == 12)
      {
        v161 = *v159;
        v159 += 2;
        v160 = v161;
      }
      else if (v162 != 4 || (v160 = *v159, *v159 != *((_DWORD *)v158 - 4)))
      {
        v163 = 0;
        if (!v14)
          goto LABEL_209;
LABEL_208:
        operator delete(v14);
        goto LABEL_209;
      }
      *(_DWORD *)(v10 + 4 * v9) = v160;
      *(_DWORD *)&v14[4 * v9] = *v159;
      v158 += 5;
      --v157;
    }
    while (v157);
  }
  v164 = (uint64_t *)operator new();
  sub_19C36A090((uint64_t)v164, *(_QWORD *)(a1 + 8), (void *)v10, (uint64_t)&v6[-v5] >> 2, v14, (v13 - (uint64_t)v14) >> 2, *(_QWORD *)(a1 + 32), *(double *)(a1 + 16));
  if (!(*(unsigned int (**)(uint64_t *))(*v164 + 16))(v164)
    || (v167 = v164[17], v166 = v164[18], v167 == v166)
    || (v165.n128_u64[0] = *(_QWORD *)v167, *(double *)v167 <= -0.75))
  {
    v163 = 0;
  }
  else
  {
    v168 = *(_QWORD *)(a1 + 144);
    if (v168 >= *(_QWORD *)(a1 + 152))
    {
      v175 = sub_19C36B3A0(v183, v164[17]);
    }
    else
    {
      v169 = *(double *)v167;
      *(_DWORD *)(v168 + 8) = *(_DWORD *)(v167 + 8);
      *(double *)v168 = v169;
      *(_QWORD *)(v168 + 16) = 0;
      *(_QWORD *)(v168 + 24) = 0;
      *(_QWORD *)(v168 + 32) = 0;
      v171 = *(_BYTE **)(v167 + 16);
      v170 = *(_BYTE **)(v167 + 24);
      v172 = v170 - v171;
      if (v170 != v171)
      {
        if (v172 < 0)
LABEL_233:
          sub_19C2A18E8();
        v173 = (char *)operator new(v170 - v171);
        *(_QWORD *)(v168 + 16) = v173;
        *(_QWORD *)(v168 + 24) = v173;
        v174 = &v173[4 * (v172 >> 2)];
        *(_QWORD *)(v168 + 32) = v174;
        memcpy(v173, v171, v172);
        *(_QWORD *)(v168 + 24) = v174;
      }
      v175 = (char *)(v168 + 40);
      *(_QWORD *)(a1 + 144) = v175;
    }
    *(_QWORD *)(a1 + 144) = v175;
    for (j = v167 + 40; j != v166; j += 40)
    {
      v165.n128_u64[0] = *(_QWORD *)j;
      if (*(double *)j <= -0.75)
        break;
      if ((unint64_t)v175 >= *(_QWORD *)(a1 + 152))
      {
        v175 = sub_19C36B3A0(v183, j);
      }
      else
      {
        v178 = *(_QWORD *)j;
        *((_DWORD *)v175 + 2) = *(_DWORD *)(j + 8);
        *(_QWORD *)v175 = v178;
        *((_QWORD *)v175 + 2) = 0;
        *((_QWORD *)v175 + 3) = 0;
        *((_QWORD *)v175 + 4) = 0;
        v180 = *(_BYTE **)(j + 16);
        v179 = *(_BYTE **)(j + 24);
        v181 = v179 - v180;
        if (v179 != v180)
        {
          if (v181 < 0)
            goto LABEL_233;
          v182 = (char *)operator new(v179 - v180);
          *((_QWORD *)v175 + 2) = v182;
          *((_QWORD *)v175 + 3) = v182;
          v177 = &v182[4 * (v181 >> 2)];
          *((_QWORD *)v175 + 4) = v177;
          memcpy(v182, v180, v181);
          *((_QWORD *)v175 + 3) = v177;
        }
        v175 += 40;
        *(_QWORD *)(a1 + 144) = v175;
      }
      *(_QWORD *)(a1 + 144) = v175;
    }
    v163 = 1;
  }
  (*(void (**)(uint64_t *, __n128))(*v164 + 8))(v164, v165);
  if (v14)
    goto LABEL_208;
LABEL_209:
  operator delete((void *)v10);
  v190 = 0;
  if (!v163)
    goto LABEL_10;
  return 1;
}

void sub_19C36B150(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  void *v29;

  v29 = *(void **)(v25 + 16);
  if (v29)
  {
    *v26 = v29;
    operator delete(v29);
  }
  *(_QWORD *)(v24 + 144) = v25;
  if (*(_QWORD *)(v27 - 152))
    operator delete(*(void **)(v27 - 152));
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t sub_19C36B25C(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  double *v7;
  double v8;
  int v9;
  unint64_t v10;
  double v11;
  double *v12;
  unint64_t v13;
  double v14;
  unint64_t v15;
  double *v16;
  double v17;

  v4 = *(_QWORD *)(a1 + 136);
  v5 = (*(_QWORD *)(a1 + 144) - v4) / 40;
  if (*(_QWORD *)(a1 + 144) == v4)
  {
    v8 = 0.0;
    goto LABEL_17;
  }
  if (v5 <= 1)
    v6 = 1;
  else
    v6 = (*(_QWORD *)(a1 + 144) - v4) / 40;
  if (a2)
  {
    v7 = (double *)(v4 + 8);
    v8 = 0.0;
    do
    {
      v8 = *(v7 - 1) + v8;
      v9 = *(_DWORD *)v7;
      v7 += 5;
      *a2++ = v9;
      --v6;
    }
    while (v6);
    goto LABEL_17;
  }
  if (v6 < 2)
  {
    v10 = 0;
    v8 = 0.0;
LABEL_15:
    v15 = v6 - v10;
    v16 = (double *)(v4 + 40 * v10);
    do
    {
      v17 = *v16;
      v16 += 5;
      v8 = v17 + v8;
      --v15;
    }
    while (v15);
    goto LABEL_17;
  }
  v10 = v6 & 0xFFFFFFFFFFFFFFFELL;
  v11 = 0.0;
  v12 = *(double **)(a1 + 136);
  v13 = v6 & 0xFFFFFFFFFFFFFFFELL;
  v14 = 0.0;
  do
  {
    v11 = *v12 + v11;
    v14 = v12[5] + v14;
    v12 += 10;
    v13 -= 2;
  }
  while (v13);
  v8 = v14 + v11;
  if (v6 != v10)
    goto LABEL_15;
LABEL_17:
  if (a3)
  {
    *(int64x2_t *)a3 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
    *(_QWORD *)(a3 + 16) = 0;
    *(_WORD *)(a3 + 24) = 0;
    *(_BYTE *)(a3 + 32) = 1;
    *(_OWORD *)(a3 + 40) = xmmword_19C46DE10;
    *(_DWORD *)(a3 + 56) = 0;
    *(_OWORD *)(a3 + 64) = xmmword_19C46DE10;
    *(_QWORD *)(a3 + 88) = 0;
    *(_QWORD *)(a3 + 96) = 0;
    *(_QWORD *)(a3 + 80) = 0xFFEFFFFFFFFFFFFFLL;
    *(_QWORD *)(a3 + 104) = (*(uint64_t (**)(_QWORD, _DWORD *))(**(_QWORD **)(a1 + 120) + 32))(*(_QWORD *)(a1 + 120), a2);
    *(double *)a3 = v8;
    *(_BYTE *)(a3 + 112) = 0;
  }
  return v5;
}

char *sub_19C36B3A0(_QWORD *a1, uint64_t a2)
{
  char *v2;
  char *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char **v12;
  _BYTE *v13;
  _BYTE *v14;
  int64_t v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  void *v24;
  __int128 v26;

  v3 = (char *)*a1;
  v2 = (char *)a1[1];
  v4 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v2[-*a1] >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0x666666666666666)
    sub_19C2A18E8();
  if (0x999999999999999ALL * ((uint64_t)(a1[2] - (_QWORD)v3) >> 3) > v5)
    v5 = 0x999999999999999ALL * ((uint64_t)(a1[2] - (_QWORD)v3) >> 3);
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a1[2] - (_QWORD)v3) >> 3) >= 0x333333333333333)
    v8 = 0x666666666666666;
  else
    v8 = v5;
  if (v8)
  {
    if (v8 > 0x666666666666666)
      sub_19C2A143C();
    v9 = (char *)operator new(40 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[40 * v4];
  v11 = &v9[40 * v8];
  *((_QWORD *)&v26 + 1) = v11;
  *(_QWORD *)v10 = *(_QWORD *)a2;
  *((_DWORD *)v10 + 2) = *(_DWORD *)(a2 + 8);
  *((_QWORD *)v10 + 2) = 0;
  *((_QWORD *)v10 + 3) = 0;
  v12 = (char **)(v10 + 24);
  *((_QWORD *)v10 + 4) = 0;
  v14 = *(_BYTE **)(a2 + 16);
  v13 = *(_BYTE **)(a2 + 24);
  v15 = v13 - v14;
  if (v13 != v14)
  {
    if (v15 < 0)
      sub_19C2A18E8();
    v16 = (char *)operator new(v13 - v14);
    *((_QWORD *)v10 + 2) = v16;
    *v12 = v16;
    v17 = &v16[4 * (v15 >> 2)];
    *((_QWORD *)v10 + 4) = v17;
    memcpy(v16, v14, v15);
    *v12 = v17;
  }
  v18 = v10 + 40;
  if (v2 == v3)
  {
    *a1 = v10;
    a1[1] = v18;
    a1[2] = v11;
  }
  else
  {
    v19 = 0;
    do
    {
      v20 = &v10[v19];
      v21 = &v2[v19];
      v22 = *(_QWORD *)&v2[v19 - 40];
      *((_DWORD *)v20 - 8) = *(_DWORD *)&v2[v19 - 32];
      *((_QWORD *)v20 - 5) = v22;
      *((_QWORD *)v20 - 2) = 0;
      *((_QWORD *)v20 - 1) = 0;
      *(_OWORD *)(v20 - 24) = *(_OWORD *)&v2[v19 - 24];
      *((_QWORD *)v20 - 1) = *(_QWORD *)&v2[v19 - 8];
      *((_QWORD *)v21 - 3) = 0;
      *((_QWORD *)v21 - 2) = 0;
      *((_QWORD *)v21 - 1) = 0;
      v19 -= 40;
    }
    while (&v2[v19] != v3);
    v2 = (char *)*a1;
    v23 = (char *)a1[1];
    *a1 = &v10[v19];
    *(_QWORD *)&v26 = v10 + 40;
    *(_OWORD *)(a1 + 1) = v26;
    v18 = v10 + 40;
    while (v23 != v2)
    {
      v24 = (void *)*((_QWORD *)v23 - 3);
      if (v24)
      {
        *((_QWORD *)v23 - 2) = v24;
        operator delete(v24);
      }
      v23 -= 40;
    }
  }
  if (v2)
    operator delete(v2);
  return v18;
}

void sub_19C36B5A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void **v2;
  _QWORD *v3;
  void *v5;
  va_list va;

  va_start(va, a2);
  v5 = *v2;
  if (*v2)
  {
    *v3 = v5;
    operator delete(v5);
  }
  sub_19C36B5C4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19C36B5C4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      while (1)
      {
        v4 = v2 - 40;
        *(_QWORD *)(a1 + 16) = v2 - 40;
        v5 = *(void **)(v2 - 24);
        if (!v5)
          break;
        *(_QWORD *)(v2 - 16) = v5;
        operator delete(v5);
        v2 = *(_QWORD *)(a1 + 16);
        if (v2 == v3)
          goto LABEL_6;
      }
      v2 -= 40;
    }
    while (v4 != v3);
  }
LABEL_6:
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *sub_19C36B630(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;

  *a1 = &off_1E3D34E18;
  v2 = (void *)a1[14];
  if (v2)
    munmap(v2, a1[15]);
  a1[15] = 0;
  v3 = a1[13];
  a1[13] = 0;
  if (v3)
  {
    v4 = *(void **)v3;
    if (*(_QWORD *)v3)
    {
      *(_QWORD *)(v3 + 8) = v4;
      operator delete(v4);
    }
    MEMORY[0x1A1AD355C](v3, 0x1080C409A65DFB4);
  }
  v5 = a1[12];
  a1[12] = 0;
  if (v5)
  {
    v6 = *(void **)v5;
    if (*(_QWORD *)v5)
    {
      *(_QWORD *)(v5 + 8) = v6;
      operator delete(v6);
    }
    MEMORY[0x1A1AD355C](v5, 0x1080C409A65DFB4);
  }
  v7 = a1[11];
  a1[11] = 0;
  if (v7)
  {
    v8 = *(void **)(v7 + 24);
    if (v8)
    {
      *(_QWORD *)(v7 + 32) = v8;
      operator delete(v8);
    }
    v9 = *(void **)v7;
    if (*(_QWORD *)v7)
    {
      *(_QWORD *)(v7 + 8) = v9;
      operator delete(v9);
    }
    MEMORY[0x1A1AD355C](v7, 0x30C400D66AB62);
  }
  v10 = (uint64_t *)a1[10];
  a1[10] = 0;
  if (v10)
  {
    v11 = *v10;
    if (*v10)
    {
      v12 = *(_QWORD *)(v11 + 24);
      if (v12)
      {
        sub_19C3B4094(v12 + 8);
        MEMORY[0x1A1AD355C](v12, 0x1020C403F824CD1);
        if (*(_QWORD *)v11)
          free(*(void **)v11);
      }
      MEMORY[0x1A1AD355C](v11, 0x1030C40FC63861FLL);
    }
    MEMORY[0x1A1AD355C](v10, 0x20C4093837F09);
  }
  v13 = (void *)a1[7];
  if (v13)
  {
    a1[8] = v13;
    operator delete(v13);
  }
  return a1;
}

_QWORD *sub_19C36B7B0(_QWORD *a1)
{
  void *v2;
  void *v3;

  *a1 = &off_1E3D36930;
  v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[1];
  if (v3)
    munmap(v3, a1[2]);
  a1[2] = 0;
  return a1;
}

void sub_19C36B808(_QWORD *a1)
{
  sub_19C36C41C(a1);
  JUMPOUT(0x1A1AD355CLL);
}

BOOL sub_19C36B82C(_QWORD *a1)
{
  CFTypeRef *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  const void **v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  double v12;
  double v13;
  double v14;
  const void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  _QWORD *(*v29)(uint64_t, CFTypeRef);
  _BYTE v30[24];
  _BYTE *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v2 = (CFTypeRef *)a1[1];
  if (v2 != (CFTypeRef *)a1[2])
  {
    CFRelease(*v2);
    v3 = a1[1];
    v4 = a1[2];
    v5 = (_QWORD *)a1[7];
    if (v5)
    {
      if (v5 == a1 + 4)
      {
        v31 = v30;
        (*(void (**)(_QWORD *, _BYTE *))(*v5 + 24))(v5, v30);
      }
      else
      {
        v31 = (_BYTE *)(*(uint64_t (**)(_QWORD *))(*v5 + 16))(v5);
      }
    }
    else
    {
      v31 = 0;
    }
    sub_19C36BBFC(v3, v4, (uint64_t)v30, (v4 - v3) >> 3);
    v6 = v31;
    if (v31 == v30)
    {
      v7 = 4;
      v6 = v30;
    }
    else
    {
      if (!v31)
      {
LABEL_12:
        v2 = (CFTypeRef *)(a1[2] - 8);
        a1[2] = v2;
        goto LABEL_13;
      }
      v7 = 5;
    }
    (*(void (**)(void))(*v6 + 8 * v7))();
    goto LABEL_12;
  }
LABEL_13:
  v8 = (const void **)a1[8];
  v9 = a1[9];
  if (v8 != (const void **)v9)
  {
    v10 = a1 + 11;
    v11 = MEMORY[0x1E0C809B0];
    while (1)
    {
      if (a1[1] != a1[2])
      {
        LXEntryGetProbability();
        v13 = v12;
        LXCursorPrefixProbability();
        if (v13 >= v14)
          goto LABEL_31;
        v8 = (const void **)a1[8];
        v9 = a1[9];
      }
      v15 = *v8;
      v16 = a1[14];
      if (!v16)
        goto LABEL_22;
      if ((_QWORD *)v16 != v10)
        break;
      v31 = v30;
      (*(void (**)(_QWORD *, _BYTE *))(*v10 + 24))(a1 + 11, v30);
LABEL_24:
      sub_19C36BBFC((uint64_t)v8, v9, (uint64_t)v30, (v9 - (uint64_t)v8) >> 3);
      v24 = v31;
      if (v31 == v30)
      {
        v24 = v30;
        v25 = 4;
        goto LABEL_28;
      }
      if (v31)
      {
        v25 = 5;
LABEL_28:
        (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD *(*)(uint64_t, CFTypeRef)))(*v24 + 8 * v25))(v24, v17, v18, v19, v20, v21, v22, v23, v27, v28, v29);
      }
      a1[9] -= 8;
      LXCursorEnumerateEntries();
      v27 = v11;
      v28 = 0x40000000;
      v29 = sub_19C36C0E4;
      LXCursorEnumerateChildren();
      if (v15)
        CFRelease(v15);
      v8 = (const void **)a1[8];
      v9 = a1[9];
      if (v8 == (const void **)v9)
      {
LABEL_31:
        v2 = (CFTypeRef *)a1[2];
        return a1[1] != (_QWORD)v2;
      }
    }
    v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
LABEL_22:
    v31 = (_BYTE *)v16;
    goto LABEL_24;
  }
  return a1[1] != (_QWORD)v2;
}

void sub_19C36BACC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,__int16 *a26)
{
  __int16 *v26;
  __int16 *v28;
  uint64_t v29;

  v28 = a26;
  if (a26 == v26)
  {
    v29 = 4;
    v28 = &a21;
  }
  else
  {
    if (!a26)
      _Unwind_Resume(exception_object);
    v29 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v28 + 8 * v29))();
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C36BB6C(uint64_t a1, _QWORD *a2, _DWORD *a3)
{
  uint64_t v6;
  uint64_t result;

  if (*(_QWORD *)(a1 + 8) == *(_QWORD *)(a1 + 16))
    __assert_rtn("getToken", "LMLexiconCursorImpl.cpp", 71, "!m_entries.empty()");
  if (a2)
  {
    LXEntryGetProbability();
    *a2 = v6;
  }
  if (a3)
    *a3 = *(_DWORD *)(a1 + 152);
  result = **(_QWORD **)(a1 + 8);
  if (result)
  {
    LODWORD(result) = LXEntryGetTokenID();
    if ((_DWORD)result)
      return result;
    else
      return 500;
  }
  return result;
}

uint64_t sub_19C36BBFC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  if (a4 >= 2)
  {
    v7 = result;
    v8 = 0;
    v26 = *(_QWORD *)result;
    v9 = (unint64_t)(a4 - 2) >> 1;
    v10 = (_QWORD *)result;
    do
    {
      v11 = &v10[v8 + 1];
      v12 = (2 * v8) | 1;
      v13 = 2 * v8 + 2;
      if (v13 < a4)
      {
        v14 = *v11;
        v27 = v11[1];
        v28 = v14;
        v15 = *(_QWORD *)(a3 + 24);
        if (!v15)
          goto LABEL_8;
        result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v15 + 48))(v15, &v28, &v27);
        if ((_DWORD)result)
        {
          ++v11;
          v12 = v13;
        }
      }
      *v10 = *v11;
      v10 = v11;
      v8 = v12;
    }
    while (v12 <= v9);
    v16 = (_QWORD *)(a2 - 8);
    if (v11 == (_QWORD *)(a2 - 8))
    {
      *v11 = v26;
    }
    else
    {
      *v11 = *v16;
      *v16 = v26;
      v17 = (uint64_t)v11 - v7 + 8;
      if (v17 >= 9)
      {
        v18 = (((unint64_t)v17 >> 3) - 2) >> 1;
        v19 = (_QWORD *)(v7 + 8 * v18);
        v20 = *v19;
        v27 = *v11;
        v28 = v20;
        v21 = *(_QWORD *)(a3 + 24);
        if (!v21)
LABEL_8:
          sub_19C2CCC60();
        result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v21 + 48))(v21, &v28, &v27);
        if ((_DWORD)result)
        {
          v22 = *v11;
          do
          {
            v23 = v19;
            *v11 = *v19;
            if (!v18)
              break;
            v18 = (v18 - 1) >> 1;
            v19 = (_QWORD *)(v7 + 8 * v18);
            v24 = *v19;
            v27 = v22;
            v28 = v24;
            v25 = *(_QWORD *)(a3 + 24);
            if (!v25)
              goto LABEL_8;
            result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v25 + 48))(v25, &v28, &v27);
            v11 = v23;
          }
          while ((result & 1) != 0);
          *v23 = v22;
        }
      }
    }
  }
  return result;
}

_QWORD *sub_19C36BDA4(uint64_t a1, const void *a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *result;
  CFTypeRef v6;
  CFTypeRef v7;
  unint64_t v8;
  char *v9;
  _QWORD *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _BYTE *v16;
  _QWORD *v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[3];
  _QWORD *v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD **)(a1 + 32);
  v39[0] = a2;
  v3 = v2[18];
  if (!v3)
    sub_19C2CCC60();
  result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v3 + 48))(v3, v39);
  if ((_DWORD)result)
  {
    v6 = CFRetain(a2);
    v7 = v6;
    v9 = (char *)v2[2];
    v8 = v2[3];
    if ((unint64_t)v9 >= v8)
    {
      v11 = (char *)v2[1];
      v12 = (v9 - v11) >> 3;
      v13 = v12 + 1;
      if ((unint64_t)(v12 + 1) >> 61)
        sub_19C2A18E8();
      v14 = v8 - (_QWORD)v11;
      if (v14 >> 2 > v13)
        v13 = v14 >> 2;
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
        v15 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v15 = v13;
      if (v15)
      {
        if (v15 >> 61)
          sub_19C2A143C();
        v16 = operator new(8 * v15);
      }
      else
      {
        v16 = 0;
      }
      v17 = &v16[8 * v12];
      v18 = &v16[8 * v15];
      *v17 = v7;
      v10 = v17 + 1;
      if (v9 == v11)
      {
        v11 = v9;
      }
      else
      {
        v19 = v9 - v11 - 8;
        if (v19 < 0x58)
          goto LABEL_51;
        if ((unint64_t)(v11 - v16) < 0x20)
          goto LABEL_51;
        v20 = (v19 >> 3) + 1;
        v21 = &v16[8 * v12 - 16];
        v22 = v9 - 16;
        v23 = v20 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v24 = *(_OWORD *)v22;
          *(v21 - 1) = *((_OWORD *)v22 - 1);
          *v21 = v24;
          v21 -= 2;
          v22 -= 32;
          v23 -= 4;
        }
        while (v23);
        v17 -= v20 & 0x3FFFFFFFFFFFFFFCLL;
        v9 -= 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
        if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_51:
          do
          {
            v25 = *((_QWORD *)v9 - 1);
            v9 -= 8;
            *--v17 = v25;
          }
          while (v9 != v11);
          v11 = (char *)v2[1];
        }
      }
      v2[1] = v17;
      v2[2] = v10;
      v2[3] = v18;
      if (v11)
        operator delete(v11);
    }
    else
    {
      *(_QWORD *)v9 = v6;
      v10 = v9 + 8;
    }
    v2[2] = v10;
    v26 = v2[1];
    v27 = (_QWORD *)v2[7];
    if (v27)
    {
      if (v27 == v2 + 4)
      {
        v40 = v39;
        (*(void (**)(_QWORD *, _QWORD *))(*v27 + 24))(v27, v39);
      }
      else
      {
        v40 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v27 + 16))(v27);
      }
    }
    else
    {
      v40 = 0;
    }
    if ((uint64_t)v10 - v26 >= 9)
    {
      v28 = ((((unint64_t)v10 - v26) >> 3) - 2) >> 1;
      v29 = (uint64_t *)(v26 + 8 * v28);
      v30 = *v29;
      v32 = *(v10 - 1);
      v31 = v10 - 1;
      v37 = v32;
      v38 = v30;
      if (!v40)
LABEL_45:
        sub_19C2CCC60();
      if ((*(unsigned int (**)(_QWORD *, uint64_t *, uint64_t *))(*v40 + 48))(v40, &v38, &v37))
      {
        v33 = *v31;
        do
        {
          v34 = v29;
          *v31 = *v29;
          if (!v28)
            break;
          v28 = (v28 - 1) >> 1;
          v29 = (uint64_t *)(v26 + 8 * v28);
          v35 = *v29;
          v37 = v33;
          v38 = v35;
          if (!v40)
            goto LABEL_45;
          v31 = v34;
        }
        while (((*(uint64_t (**)(_QWORD *, uint64_t *, uint64_t *))(*v40 + 48))(v40, &v38, &v37) & 1) != 0);
        *v34 = v33;
      }
    }
    result = v40;
    if (v40 == v39)
    {
      v36 = 4;
      result = v39;
    }
    else
    {
      if (!v40)
        return result;
      v36 = 5;
    }
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v36))();
  }
  return result;
}

void sub_19C36C090(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      _Unwind_Resume(exception_object);
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
  _Unwind_Resume(exception_object);
}

_QWORD *sub_19C36C0E4(uint64_t a1, CFTypeRef cf)
{
  uint64_t v2;
  CFTypeRef v3;

  v2 = *(_QWORD *)(a1 + 32) + 64;
  v3 = CFRetain(cf);
  return sub_19C36C114(v2, (uint64_t)v3);
}

_QWORD *sub_19C36C114(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  char *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  _QWORD *v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  __int128 *v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  _QWORD *result;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE v38[24];
  _BYTE *v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v6 = v5;
  if ((unint64_t)v5 >= v4)
  {
    v8 = *(_BYTE **)a1;
    v9 = (uint64_t)v5 - *(_QWORD *)a1;
    v10 = v9 >> 3;
    v11 = (v9 >> 3) + 1;
    if (v11 >> 61)
      sub_19C2A18E8();
    v12 = v4 - (_QWORD)v8;
    if (v12 >> 2 > v11)
      v11 = v12 >> 2;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v11;
    if (v13)
    {
      if (v13 >> 61)
        sub_19C2A143C();
      v14 = operator new(8 * v13);
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[8 * v10];
    v16 = &v14[8 * v13];
    *v15 = a2;
    v7 = (char *)(v15 + 1);
    if (v5 == (_QWORD *)v8)
    {
      v8 = v5;
    }
    else
    {
      v17 = (char *)v5 - v8 - 8;
      if (v17 < 0x58)
        goto LABEL_48;
      if ((unint64_t)((char *)v5 - v14 - v9) < 0x20)
        goto LABEL_48;
      v18 = (v17 >> 3) + 1;
      v6 = &v5[-(v18 & 0x3FFFFFFFFFFFFFFCLL)];
      v19 = &v14[8 * v10 - 16];
      v20 = (__int128 *)(v5 - 2);
      v21 = v18 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v22 = *v20;
        *(v19 - 1) = *(v20 - 1);
        *v19 = v22;
        v19 -= 2;
        v20 -= 2;
        v21 -= 4;
      }
      while (v21);
      v15 -= v18 & 0x3FFFFFFFFFFFFFFCLL;
      if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_48:
        do
        {
          v23 = *--v6;
          *--v15 = v23;
        }
        while (v6 != (_QWORD *)v8);
        v8 = *(_BYTE **)a1;
      }
    }
    *(_QWORD *)a1 = v15;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = v16;
    if (v8)
      operator delete(v8);
  }
  else
  {
    *v5 = a2;
    v7 = (char *)(v5 + 1);
  }
  *(_QWORD *)(a1 + 8) = v7;
  v24 = *(_BYTE **)a1;
  v25 = *(_QWORD *)(a1 + 48);
  if (v25)
  {
    if (v25 == a1 + 24)
    {
      v39 = v38;
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v25 + 24))(v25, v38);
    }
    else
    {
      v39 = (_BYTE *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 16))(v25);
    }
  }
  else
  {
    v39 = 0;
  }
  if (v7 - v24 >= 9)
  {
    v26 = (((unint64_t)(v7 - v24) >> 3) - 2) >> 1;
    v27 = &v24[8 * v26];
    v28 = *(_QWORD *)v27;
    v30 = *((_QWORD *)v7 - 1);
    v29 = v7 - 8;
    v36 = v30;
    v37 = v28;
    if (!v39)
LABEL_43:
      sub_19C2CCC60();
    if ((*(unsigned int (**)(_BYTE *, uint64_t *, uint64_t *))(*(_QWORD *)v39 + 48))(v39, &v37, &v36))
    {
      v31 = *(_QWORD *)v29;
      do
      {
        v32 = v27;
        *(_QWORD *)v29 = *(_QWORD *)v27;
        if (!v26)
          break;
        v26 = (v26 - 1) >> 1;
        v27 = &v24[8 * v26];
        v33 = *(_QWORD *)v27;
        v36 = v31;
        v37 = v33;
        if (!v39)
          goto LABEL_43;
        v29 = v32;
      }
      while (((*(uint64_t (**)(_BYTE *, uint64_t *, uint64_t *))(*(_QWORD *)v39 + 48))(v39, &v37, &v36) & 1) != 0);
      *(_QWORD *)v32 = v31;
    }
  }
  result = v39;
  if (v39 == v38)
  {
    v35 = 4;
    result = v38;
  }
  else
  {
    if (!v39)
      return result;
    v35 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v35))();
}

void sub_19C36C3C8(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_19C36C3D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      _Unwind_Resume(exception_object);
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
  _Unwind_Resume(exception_object);
}

_QWORD *sub_19C36C41C(_QWORD *a1)
{
  CFTypeRef *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  CFTypeRef *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  void *v22;
  _QWORD *v23;
  uint64_t v24;
  void *v25;
  _BYTE v27[24];
  _BYTE *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  *a1 = &off_1E3D35B30;
  v2 = (CFTypeRef *)a1[1];
  if (v2 != (CFTypeRef *)a1[2])
  {
    v3 = a1 + 4;
    while (1)
    {
      CFRelease(*v2);
      v7 = a1[1];
      v8 = a1[2];
      v9 = a1[7];
      if (!v9)
        goto LABEL_9;
      if ((_QWORD *)v9 != v3)
        break;
      v28 = v27;
      (*(void (**)(_QWORD *, _BYTE *))(*v3 + 24))(a1 + 4, v27);
LABEL_11:
      sub_19C36BBFC(v7, v8, (uint64_t)v27, (v8 - v7) >> 3);
      v4 = v28;
      if (v28 == v27)
      {
        v4 = v27;
        v5 = 4;
      }
      else
      {
        if (!v28)
          goto LABEL_5;
        v5 = 5;
      }
      (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_5:
      v2 = (CFTypeRef *)a1[1];
      v6 = a1[2] - 8;
      a1[2] = v6;
      if (v2 == (CFTypeRef *)v6)
        goto LABEL_14;
    }
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
LABEL_9:
    v28 = (_BYTE *)v9;
    goto LABEL_11;
  }
LABEL_14:
  v10 = (CFTypeRef *)a1[8];
  if (v10 != (CFTypeRef *)a1[9])
  {
    v11 = a1 + 11;
    while (1)
    {
      CFRelease(*v10);
      v15 = a1[8];
      v16 = a1[9];
      v17 = a1[14];
      if (!v17)
        goto LABEL_22;
      if ((_QWORD *)v17 != v11)
        break;
      v28 = v27;
      (*(void (**)(_QWORD *, _BYTE *))(*v11 + 24))(a1 + 11, v27);
LABEL_24:
      sub_19C36BBFC(v15, v16, (uint64_t)v27, (v16 - v15) >> 3);
      v12 = v28;
      if (v28 == v27)
      {
        v12 = v27;
        v13 = 4;
      }
      else
      {
        if (!v28)
          goto LABEL_18;
        v13 = 5;
      }
      (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_18:
      v10 = (CFTypeRef *)a1[8];
      v14 = a1[9] - 8;
      a1[9] = v14;
      if (v10 == (CFTypeRef *)v14)
        goto LABEL_27;
    }
    v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 16))(v17);
LABEL_22:
    v28 = (_BYTE *)v17;
    goto LABEL_24;
  }
LABEL_27:
  v18 = (_QWORD *)a1[18];
  if (v18 == a1 + 15)
  {
    v19 = 4;
    v18 = a1 + 15;
  }
  else
  {
    if (!v18)
      goto LABEL_32;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_32:
  v20 = (_QWORD *)a1[14];
  if (v20 == a1 + 11)
  {
    v21 = 4;
    v20 = a1 + 11;
  }
  else
  {
    if (!v20)
      goto LABEL_37;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_37:
  v22 = (void *)a1[8];
  if (v22)
  {
    a1[9] = v22;
    operator delete(v22);
  }
  v23 = (_QWORD *)a1[7];
  if (v23 == a1 + 4)
  {
    v24 = 4;
    v23 = a1 + 4;
  }
  else
  {
    if (!v23)
      goto LABEL_44;
    v24 = 5;
  }
  (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_44:
  v25 = (void *)a1[1];
  if (v25)
  {
    a1[2] = v25;
    operator delete(v25);
  }
  return a1;
}

void sub_19C36C6B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  if (!a2)
    _Unwind_Resume(exception_object);
  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_8;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_8:
  sub_19C2CDAC8(exception_object);
}

void sub_19C36C71C()
{
  JUMPOUT(0x1A1AD355CLL);
}

_QWORD *sub_19C36C730()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E3D38BB8;
  return result;
}

void sub_19C36C754(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E3D38BB8;
}

BOOL sub_19C36C76C()
{
  double v0;
  double v1;
  double v2;

  LXCursorPrefixProbability();
  v1 = v0;
  LXCursorPrefixProbability();
  return v1 < v2;
}

uint64_t sub_19C36C7AC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN2LM17LexiconCursorImplC1EPK9_LXCursorNSt3__18functionIFbPK8_LXEntryEEENS_11TokenSourceEE3$_1"
    || ((v3 & (unint64_t)"ZN2LM17LexiconCursorImplC1EPK9_LXCursorNSt3__18functionIFbPK8_LXEntryEEENS_11TokenSourceEE3$_1" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN2LM17LexiconCursorImplC1EPK9_LXCursorNSt3__18functionIFbPK8_LXEntryEEENS_11TokenSourceEE3$_1")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN2LM17LexiconCursorImplC1EPK9_LXCursorNSt3__18functionIFbPK8_LXEntryEEENS_11TokenSourceEE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *sub_19C36C800()
{
  return &unk_1E3D33510;
}

void sub_19C36C810()
{
  JUMPOUT(0x1A1AD355CLL);
}

_QWORD *sub_19C36C824()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E3D38B60;
  return result;
}

void sub_19C36C848(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E3D38B60;
}

BOOL sub_19C36C860()
{
  double v0;
  double v1;
  double v2;

  LXEntryGetProbability();
  v1 = v0;
  LXEntryGetProbability();
  return v1 < v2;
}

uint64_t sub_19C36C8A0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN2LM17LexiconCursorImplC1EPK9_LXCursorNSt3__18functionIFbPK8_LXEntryEEENS_11TokenSourceEE3$_0"
    || ((v3 & (unint64_t)"ZN2LM17LexiconCursorImplC1EPK9_LXCursorNSt3__18functionIFbPK8_LXEntryEEENS_11TokenSourceEE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN2LM17LexiconCursorImplC1EPK9_LXCursorNSt3__18functionIFbPK8_LXEntryEEENS_11TokenSourceEE3$_0")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN2LM17LexiconCursorImplC1EPK9_LXCursorNSt3__18functionIFbPK8_LXEntryEEENS_11TokenSourceEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *sub_19C36C8F4()
{
  return &unk_1E3D33500;
}

uint64_t sub_19C36C900(uint64_t a1, CFTypeRef cf, uint64_t a3, int a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  CFTypeRef v10;

  *(_QWORD *)a1 = &off_1E3D35B30;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = &off_1E3D38B60;
  *(_QWORD *)(a1 + 56) = a1 + 32;
  *(_QWORD *)(a1 + 64) = 0;
  v7 = a1 + 64;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = &off_1E3D38BB8;
  *(_QWORD *)(a1 + 112) = a1 + 88;
  v8 = a1 + 120;
  v9 = *(_QWORD *)(a3 + 24);
  if (!v9)
    goto LABEL_4;
  if (v9 != a3)
  {
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
LABEL_4:
    *(_QWORD *)(a1 + 144) = v9;
    goto LABEL_6;
  }
  *(_QWORD *)(a1 + 144) = v8;
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a3 + 24) + 24))(*(_QWORD *)(a3 + 24), v8);
LABEL_6:
  *(_DWORD *)(a1 + 152) = a4;
  if (cf)
  {
    v10 = CFRetain(cf);
    sub_19C36C114(v7, (uint64_t)v10);
  }
  return a1;
}

void sub_19C36C9E8(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void **v2;
  void **v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;
  uint64_t v8;
  void *v9;
  _QWORD *v10;
  uint64_t v11;
  void *v12;

  v7 = (_QWORD *)v1[14];
  if (v7 == v5)
  {
    v8 = 4;
    v7 = v5;
  }
  else
  {
    if (!v7)
      goto LABEL_6;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_6:
  v9 = *v2;
  if (*v2)
  {
    v1[9] = v9;
    operator delete(v9);
  }
  v10 = (_QWORD *)v1[7];
  if (v10 == v4)
  {
    v11 = 4;
    v10 = v4;
  }
  else
  {
    if (!v10)
    {
      v12 = *v3;
      if (*v3)
        goto LABEL_15;
      goto LABEL_12;
    }
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
  v12 = *v3;
  if (*v3)
  {
LABEL_15:
    v1[2] = v12;
    operator delete(v12);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  _Unwind_Resume(exception_object);
}

void sub_19C36CAB4(uint64_t *a1, uint64_t a2, uint64_t *a3, unint64_t a4, uint64_t a5, char a6)
{
  unint64_t v7;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  __int128 *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  __int128 *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  __int128 *v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t *v89;
  unint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  char v106;
  uint64_t v107;
  uint64_t v108;
  double v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  _OWORD *v116;
  uint64_t v117;
  uint64_t *v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t *v127;
  unint64_t v128;
  uint64_t v129;
  unint64_t v130;
  unint64_t v131;
  double v132;
  uint64_t v133;
  double v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  unint64_t v141;
  unint64_t v142;
  double v143;
  uint64_t v144;
  unint64_t v145;
  unint64_t v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t *v149;
  unint64_t v150;
  unint64_t v151;
  double v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  char v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  double v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  unint64_t v167;
  unint64_t v168;
  __int128 *v169;
  __int128 v170;
  BOOL v171;
  int v172;
  uint64_t v174;
  char v175;
  uint64_t v176;
  unint64_t v177;
  uint64_t v178;
  double v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  unint64_t v184;
  uint64_t *v185;
  uint64_t v186;
  unint64_t v187;
  unint64_t v188;
  uint64_t v189;
  __int128 v190;
  _BOOL4 v191;
  uint64_t v192;
  uint64_t v193;
  unint64_t v194;
  uint64_t *v195;
  uint64_t v196;
  unint64_t v197;
  unint64_t v198;
  uint64_t v199;
  uint64_t v200;
  char v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t *v204;
  uint64_t v205;
  unint64_t v206;
  uint64_t v207;
  uint64_t *v208;
  uint64_t *v209;
  unint64_t v210;
  uint64_t v211;
  uint64_t *v212;
  __int128 *v213;
  unint64_t v214;
  uint64_t i;
  uint64_t v216;
  void ***v217;
  uint64_t v218;
  double v219;
  void *v220;
  char v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  void **v226;
  __int128 v227;
  int64_t v228;
  int64_t v229;
  BOOL v230;
  uint64_t v231;
  uint64_t v232;
  unint64_t v233;
  unint64_t v234;
  uint64_t *v235;
  uint64_t v236;
  unint64_t v237;
  unint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t *v243;
  uint64_t v244;
  unint64_t v245;
  unint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  unint64_t v250;
  uint64_t v251;
  unint64_t v252;
  unint64_t v253;
  double v254;
  uint64_t v255;
  __int128 v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t *v259;
  uint64_t v260;
  unint64_t v261;
  unint64_t v262;
  uint64_t v263;
  unint64_t v264;
  uint64_t v265;
  unint64_t v266;
  unint64_t v267;
  uint64_t *v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t *v272;
  __int128 v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  unint64_t v277;
  unint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  unint64_t v282;
  uint64_t v283;
  unint64_t v284;
  unint64_t v285;
  uint64_t v286;
  uint64_t v287;
  _OWORD *v288;
  void **v289;
  int v290;
  __int128 v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  unint64_t v296;
  unint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  unint64_t v301;
  unint64_t v302;
  double v303;
  uint64_t v304;
  uint64_t v305;
  char v306;
  uint64_t v307;
  unint64_t v308;
  uint64_t v309;
  unint64_t v310;
  uint64_t v311;
  uint64_t v312;
  __int128 v313;
  unint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t *v317;
  uint64_t v318;
  unint64_t v319;
  uint64_t *v320;
  __int128 *v321;
  unint64_t v322;
  uint64_t *v323;
  uint64_t v324;
  unint64_t v325;
  uint64_t v326;
  uint64_t v327;
  unint64_t v328;
  uint64_t *v329;
  char *v330;
  unint64_t v331;
  uint64_t v332;
  unint64_t v333;
  uint64_t v334;
  unint64_t v335;
  uint64_t *v336;
  uint64_t v337;
  unint64_t v338;
  uint64_t *v339;
  uint64_t v340;
  unint64_t v341;
  unint64_t v342;
  double *v343;
  double v344;
  unint64_t v345;
  uint64_t v346;
  char v347;
  uint64_t v348;
  __int128 *v349;
  uint64_t v350;
  double *v351;
  __int128 *v352;
  __int128 v353;
  char *v354;
  unint64_t v355;
  uint64_t v356;
  char v357;
  uint64_t v358;
  char v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  char v363;
  uint64_t v364;
  void *v366;
  char v367;
  uint64_t v368;
  uint64_t *v369;
  uint64_t *v370;
  uint64_t v371;
  _BYTE v372[15];
  _BYTE v373[15];
  _BYTE v374[15];
  __int128 v375;
  __int128 v376;
  __int128 v377;
  __int128 v378;
  _BYTE v379[15];
  _BYTE v380[15];
  __int128 v381;
  _BYTE v382[15];
  _BYTE v383[15];
  _BYTE v384[15];
  _BYTE v385[15];
  _BYTE v386[15];
  _BYTE v387[15];

  if (a4 == a2)
    return;
  v7 = a4;
  v9 = a2;
  while (2)
  {
    v11 = 102 * (a3 - a1);
    v12 = *a3;
    v13 = v7 - *a3;
    v14 = v13 / 40;
    v15 = *a1;
    v16 = v9 - *a1;
    v17 = v13 / 40 + v11 + 0x3333333333333333 * (v16 >> 3);
    switch(v17)
    {
      case 0:
      case 1:
        return;
      case 2:
        if (v7 == v12)
          v7 = *(a3 - 1) + 4080;
        if (*(double *)(v7 - 8) < *(double *)(v9 + 32))
        {
          v200 = *(_QWORD *)v9;
          *(_QWORD *)v386 = *(_QWORD *)(v9 + 8);
          *(_QWORD *)&v386[7] = *(_QWORD *)(v9 + 15);
          v201 = *(_BYTE *)(v9 + 23);
          *(_QWORD *)v9 = 0;
          *(_QWORD *)(v9 + 8) = 0;
          *(_QWORD *)(v9 + 16) = 0;
          v378 = *(_OWORD *)(v9 + 24);
          v202 = *(_QWORD *)(v7 - 24);
          *(_OWORD *)v9 = *(_OWORD *)(v7 - 40);
          *(_QWORD *)(v9 + 16) = v202;
          *(_BYTE *)(v7 - 17) = 0;
          *(_BYTE *)(v7 - 40) = 0;
          *(_OWORD *)(v9 + 24) = *(_OWORD *)(v7 - 16);
          if (*(char *)(v7 - 17) < 0)
            operator delete(*(void **)(v7 - 40));
          *(_QWORD *)(v7 - 40) = v200;
          *(_QWORD *)(v7 - 25) = *(_QWORD *)&v386[7];
          *(_QWORD *)(v7 - 32) = *(_QWORD *)v386;
          *(_BYTE *)(v7 - 17) = v201;
          *(_OWORD *)(v7 - 16) = v378;
        }
        return;
      case 3:
        v203 = v16 / 40;
        if (v16 < -39)
        {
          v204 = &a1[-((100 - v203) / 0x66uLL)];
          v205 = *v204;
          v206 = 101 - (100 - v203) % 0x66uLL;
        }
        else
        {
          v204 = &a1[(v203 + 1) / 0x66uLL];
          v205 = *v204;
          v206 = (v203 + 1) % 0x66uLL;
        }
        if (v7 == v12)
        {
          v316 = *--a3;
          v7 = v316 + 4080;
        }
        sub_19C36ED08((uint64_t)a1, (uint64_t *)v9, (uint64_t)v204, (__int128 *)(v205 + 40 * v206), (uint64_t)a3, (__int128 *)(v7 - 40));
        return;
      case 4:
        v207 = v16 / 40;
        if (v16 >= -39)
        {
          v208 = &a1[(v207 + 1) / 0x66uLL];
          v209 = (uint64_t *)(*v208 + 40 * ((v207 + 1) % 0x66uLL));
          v210 = v207 + 2;
LABEL_311:
          v317 = &a1[v210 / 0x66];
          v318 = *v317;
          v319 = v210 % 0x66;
          goto LABEL_324;
        }
        v208 = &a1[-((100 - v207) / 0x66uLL)];
        v209 = (uint64_t *)(*v208 + 40 * (101 - (100 - v207) % 0x66uLL));
        if ((unint64_t)v16 >= 0xFFFFFFFFFFFFFFB1)
        {
          v210 = 1;
          goto LABEL_311;
        }
        v332 = 99 - v207;
        v333 = (99 - v207) / 0x66uLL;
        v317 = &a1[-v333];
        v318 = *v317;
        v319 = 101 - (v332 - 102 * v333);
LABEL_324:
        if (v7 == v12)
        {
          v334 = *--a3;
          v7 = v334 + 4080;
        }
        sub_19C36F02C((uint64_t)a1, v9, (uint64_t)v208, v209, (uint64_t)v317, (uint64_t *)(v318 + 40 * v319), (uint64_t)a3, v7 - 40);
        return;
      case 5:
        v211 = v16 / 40;
        if (v16 >= -39)
        {
          v212 = &a1[(v211 + 1) / 0x66uLL];
          v213 = (__int128 *)(*v212 + 40 * ((v211 + 1) % 0x66uLL));
          v214 = v211 + 2;
LABEL_314:
          v320 = &a1[v214 / 0x66];
          v321 = (__int128 *)(*v320 + 40 * (v214 % 0x66));
          v322 = v211 + 3;
LABEL_315:
          v323 = &a1[v322 / 0x66];
          v324 = *v323;
          v325 = v322 % 0x66;
          goto LABEL_316;
        }
        v212 = &a1[-((100 - v211) / 0x66uLL)];
        v213 = (__int128 *)(*v212 + 40 * (101 - (100 - v211) % 0x66uLL));
        if ((unint64_t)v16 >= 0xFFFFFFFFFFFFFFB1)
        {
          v214 = 1;
          goto LABEL_314;
        }
        v320 = &a1[-((99 - v211) / 0x66uLL)];
        v321 = (__int128 *)(*v320 + 40 * (101 - (99 - v211) % 0x66uLL));
        if ((unint64_t)v16 >= 0xFFFFFFFFFFFFFF89)
        {
          v322 = 1;
          goto LABEL_315;
        }
        v323 = &a1[-((98 - v211) / 0x66uLL)];
        v324 = *v323;
        v325 = 101 - (98 - v211) % 0x66uLL;
LABEL_316:
        if (v7 == v12)
        {
          v326 = *--a3;
          v7 = v326 + 4080;
        }
        sub_19C36F250((uint64_t)a1, v9, (uint64_t)v212, v213, (uint64_t)v320, v321, (uint64_t)v323, v324 + 40 * v325, (uint64_t)a3, v7 - 40);
        return;
      default:
        v371 = v9;
        if (v17 > 23)
        {
          v369 = a3;
          if (a5)
          {
            v18 = (unint64_t)v17 >> 1;
            v19 = v16 / 40 + ((unint64_t)v17 >> 1);
            if ((unint64_t)v17 < 0x81)
            {
              if (v19 < 1)
              {
                v46 = 101 - v19;
                v23 = &a1[-(v46 / 0x66)];
                v24 = *v23;
                v25 = 101 - v46 % 0x66;
              }
              else
              {
                v23 = &a1[v19 / 0x66uLL];
                v24 = *v23;
                v25 = v19 % 0x66uLL;
              }
              v47 = (uint64_t *)(v24 + 40 * v25);
              if (v13 < 41)
              {
                v53 = 102 - v14;
                v54 = (102 - v14) / 0x66uLL;
                v50 = &a3[-v54];
                v51 = *v50;
                v52 = 101 - (v53 - 102 * v54);
              }
              else
              {
                v48 = v14 - 1;
                v49 = (v14 - 1) / 0x66uLL;
                v50 = &a3[v49];
                v51 = *v50;
                v52 = v48 - 102 * v49;
              }
              sub_19C36ED08((uint64_t)v23, v47, (uint64_t)a1, (__int128 *)v9, (uint64_t)v50, (__int128 *)(v51 + 40 * v52));
            }
            else
            {
              if (v19 < 1)
              {
                v26 = 101 - v19;
                v20 = &a1[-(v26 / 0x66)];
                v21 = *v20;
                v22 = 101 - v26 % 0x66;
              }
              else
              {
                v20 = &a1[v19 / 0x66uLL];
                v21 = *v20;
                v22 = v19 % 0x66uLL;
              }
              v27 = (__int128 *)(v21 + 40 * v22);
              if (v13 < 41)
              {
                v33 = 102 - v14;
                v34 = (102 - v14) / 0x66uLL;
                v30 = &a3[-v34];
                v31 = *v30;
                v32 = 101 - (v33 - 102 * v34);
              }
              else
              {
                v28 = v14 - 1;
                v29 = (v14 - 1) / 0x66uLL;
                v30 = &a3[v29];
                v31 = *v30;
                v32 = v28 - 102 * v29;
              }
              sub_19C36ED08((uint64_t)a1, (uint64_t *)v9, (uint64_t)v20, v27, (uint64_t)v30, (__int128 *)(v31 + 40 * v32));
              v35 = v9 - *a1;
              v36 = v35 / 40;
              if (v35 < -39)
              {
                v37 = &a1[-((100 - v36) / 0x66uLL)];
                v38 = *v37;
                v39 = 101 - (100 - v36) % 0x66uLL;
              }
              else
              {
                v37 = &a1[(v36 + 1) / 0x66uLL];
                v38 = *v37;
                v39 = (v36 + 1) % 0x66uLL;
              }
              v40 = (uint64_t *)(v38 + 40 * v39);
              v41 = v18 - 1;
              v42 = v36 + v18 - 1;
              if (v42 < 1)
              {
                v55 = 101 - v42;
                v43 = &a1[-(v55 / 0x66)];
                v44 = *v43;
                v45 = 101 - v55 % 0x66;
              }
              else
              {
                v43 = &a1[v42 / 0x66uLL];
                v44 = *v43;
                v45 = v42 % 0x66uLL;
              }
              v56 = (__int128 *)(v44 + 40 * v45);
              v57 = v7 - *a3;
              v58 = v57 / 40;
              if (v57 < 81)
              {
                v63 = 103 - v58;
                v60 = &a3[-(v63 / 0x66)];
                v61 = *v60;
                v62 = 101 - v63 % 0x66;
              }
              else
              {
                v59 = v58 - 2;
                v60 = &a3[v59 / 0x66];
                v61 = *v60;
                v62 = v59 % 0x66;
              }
              sub_19C36ED08((uint64_t)v37, v40, (uint64_t)v43, v56, (uint64_t)v60, (__int128 *)(v61 + 40 * v62));
              v64 = v9 - *a1;
              v65 = v64 / 40;
              if (v64 < -79)
              {
                v66 = &a1[-((99 - v65) / 0x66uLL)];
                v67 = *v66;
                v68 = 101 - (99 - v65) % 0x66uLL;
              }
              else
              {
                v66 = &a1[(v65 + 2) / 0x66uLL];
                v67 = *v66;
                v68 = (v65 + 2) % 0x66uLL;
              }
              v69 = (uint64_t *)(v67 + 40 * v68);
              v70 = v65 + v18 + 1;
              if (v70 < 1)
              {
                v74 = 101 - v70;
                v71 = &a1[-(v74 / 0x66)];
                v72 = *v71;
                v73 = 101 - v74 % 0x66;
              }
              else
              {
                v71 = &a1[v70 / 0x66uLL];
                v72 = *v71;
                v73 = v70 % 0x66uLL;
              }
              v75 = (__int128 *)(v72 + 40 * v73);
              v76 = v7 - *a3;
              v77 = v76 / 40;
              if (v76 < 121)
              {
                v82 = 104 - v77;
                v79 = &a3[-(v82 / 0x66)];
                v80 = *v79;
                v81 = 101 - v82 % 0x66;
              }
              else
              {
                v78 = v77 - 3;
                v79 = &a3[v78 / 0x66];
                v80 = *v79;
                v81 = v78 % 0x66;
              }
              sub_19C36ED08((uint64_t)v66, v69, (uint64_t)v71, v75, (uint64_t)v79, (__int128 *)(v80 + 40 * v81));
              v83 = (v9 - *a1) / 40;
              v84 = v83 + v41;
              if ((uint64_t)(v83 + v41) < 1)
              {
                v88 = 101 - v84;
                v85 = &a1[-(v88 / 0x66)];
                v86 = *v85;
                v87 = 101 - v88 % 0x66;
              }
              else
              {
                v85 = &a1[v84 / 0x66];
                v86 = *v85;
                v87 = v84 % 0x66;
              }
              v89 = (uint64_t *)(v86 + 40 * v87);
              v90 = v83 + v18;
              if ((uint64_t)(v83 + v18) < 1)
              {
                v94 = 101 - v90;
                v91 = &a1[-(v94 / 0x66)];
                v92 = *v91;
                v93 = 101 - v94 % 0x66;
              }
              else
              {
                v91 = &a1[v90 / 0x66];
                v92 = *v91;
                v93 = v90 % 0x66;
              }
              v95 = v83 + v18 + 1;
              if (v95 < 1)
              {
                v99 = 101 - v95;
                v96 = &a1[-(v99 / 0x66)];
                v97 = *v96;
                v98 = 101 - v99 % 0x66;
              }
              else
              {
                v96 = &a1[v95 / 0x66uLL];
                v97 = *v96;
                v98 = v95 % 0x66uLL;
              }
              sub_19C36ED08((uint64_t)v85, v89, (uint64_t)v91, (__int128 *)(v92 + 40 * v93), (uint64_t)v96, (__int128 *)(v97 + 40 * v98));
              v100 = (v9 - *a1) / 40 + v18;
              if (v100 < 1)
              {
                v103 = 101 - v100;
                v101 = a1[-(v103 / 0x66)];
                v102 = 101 - v103 % 0x66;
              }
              else
              {
                v101 = a1[v100 / 0x66uLL];
                v102 = v100 % 0x66uLL;
              }
              v104 = v101 + 40 * v102;
              v105 = *(_QWORD *)v9;
              *(_QWORD *)v383 = *(_QWORD *)(v9 + 8);
              *(_QWORD *)&v383[7] = *(_QWORD *)(v9 + 15);
              v106 = *(_BYTE *)(v9 + 23);
              *(_QWORD *)v9 = 0;
              *(_QWORD *)(v9 + 8) = 0;
              *(_QWORD *)(v9 + 16) = 0;
              v375 = *(_OWORD *)(v9 + 24);
              v107 = *(_QWORD *)(v104 + 16);
              *(_OWORD *)v9 = *(_OWORD *)v104;
              *(_QWORD *)(v9 + 16) = v107;
              *(_BYTE *)(v104 + 23) = 0;
              *(_BYTE *)v104 = 0;
              *(_OWORD *)(v9 + 24) = *(_OWORD *)(v104 + 24);
              if (*(char *)(v104 + 23) < 0)
                operator delete(*(void **)v104);
              *(_QWORD *)v104 = v105;
              *(_QWORD *)(v104 + 8) = *(_QWORD *)v383;
              *(_QWORD *)(v104 + 15) = *(_QWORD *)&v383[7];
              *(_BYTE *)(v104 + 23) = v106;
              *(_OWORD *)(v104 + 24) = v375;
            }
            v108 = a5 - 1;
            if ((a6 & 1) != 0)
            {
              v361 = v108;
              v109 = *(double *)(v9 + 32);
            }
            else
            {
              v110 = v9 - *a1;
              v111 = v110 / 40;
              if (v110 < 41)
              {
                v115 = 102 - v111;
                v113 = a1[-(v115 / 0x66)];
                v114 = 101 - v115 % 0x66;
              }
              else
              {
                v112 = v111 - 1;
                v113 = a1[v112 / 0x66];
                v114 = v112 % 0x66;
              }
              v109 = *(double *)(v9 + 32);
              if (*(double *)(v113 + 40 * v114 + 32) >= v109)
              {
                v362 = *(_QWORD *)v9;
                *(_QWORD *)v373 = *(_QWORD *)(v9 + 8);
                *(_QWORD *)&v373[7] = *(_QWORD *)(v9 + 15);
                v359 = *(_BYTE *)(v9 + 23);
                *(_QWORD *)(v9 + 8) = 0;
                *(_QWORD *)(v9 + 16) = 0;
                *(_QWORD *)v9 = 0;
                v136 = *a3;
                v137 = v7 - *a3;
                v138 = v137 / 40;
                if (v137 < 41)
                {
                  v142 = 102 - v138;
                  v140 = a3[-(v142 / 0x66)];
                  v141 = 101 - v142 % 0x66;
                }
                else
                {
                  v139 = v138 - 1;
                  v140 = a3[v139 / 0x66];
                  v141 = v139 % 0x66;
                }
                v143 = *(double *)(v140 + 40 * v141 + 32);
                v144 = *a1;
                v145 = v9;
                if (v109 < v143)
                {
                  do
                  {
                    v145 += 40;
                    if (v145 - v144 == 4080)
                    {
                      v146 = a1[1];
                      ++a1;
                      v144 = v146;
                      v145 = v146;
                    }
                  }
                  while (v109 >= *(double *)(v145 + 32));
                }
                else
                {
                  do
                  {
                    v145 += 40;
                    if (v145 - v144 == 4080)
                    {
                      v147 = a1[1];
                      ++a1;
                      v144 = v147;
                      v145 = v147;
                    }
                  }
                  while ((a1 < a3 || a1 == a3 && v145 < v7) && v109 >= *(double *)(v145 + 32));
                }
                v148 = v108;
                if (a1 < a3 || (v149 = a3, v150 = v7, a1 == a3) && (v149 = a3, v150 = v7, v145 < v7))
                {
                  v149 = a3;
                  v151 = v7;
                  do
                  {
                    if (v151 == v136)
                    {
                      v153 = *--v149;
                      v136 = v153;
                      v151 = v153 + 4080;
                    }
                    v150 = v151 - 40;
                    v152 = *(double *)(v151 - 8);
                    v151 -= 40;
                  }
                  while (v109 < v152);
                }
                v154 = *(_QWORD *)(v371 + 24);
                while (a1 < v149 || a1 == v149 && v145 < v150)
                {
                  v155 = *(_QWORD *)v145;
                  *(_QWORD *)v384 = *(_QWORD *)(v145 + 8);
                  *(_QWORD *)&v384[7] = *(_QWORD *)(v145 + 15);
                  v156 = *(_BYTE *)(v145 + 23);
                  *(_QWORD *)v145 = 0;
                  *(_QWORD *)(v145 + 8) = 0;
                  *(_QWORD *)(v145 + 16) = 0;
                  v376 = *(_OWORD *)(v145 + 24);
                  v157 = *(_QWORD *)(v150 + 16);
                  *(_OWORD *)v145 = *(_OWORD *)v150;
                  *(_QWORD *)(v145 + 16) = v157;
                  *(_BYTE *)(v150 + 23) = 0;
                  *(_BYTE *)v150 = 0;
                  *(_OWORD *)(v145 + 24) = *(_OWORD *)(v150 + 24);
                  if (*(char *)(v150 + 23) < 0)
                    operator delete(*(void **)v150);
                  *(_QWORD *)v150 = v155;
                  *(_QWORD *)(v150 + 8) = *(_QWORD *)v384;
                  *(_QWORD *)(v150 + 15) = *(_QWORD *)&v384[7];
                  *(_BYTE *)(v150 + 23) = v156;
                  *(_OWORD *)(v150 + 24) = v376;
                  v144 = *a1;
                  do
                  {
                    v145 += 40;
                    if (v145 - v144 == 4080)
                    {
                      v158 = a1[1];
                      ++a1;
                      v144 = v158;
                      v145 = v158;
                    }
                  }
                  while (v109 >= *(double *)(v145 + 32));
                  v159 = *v149;
                  do
                  {
                    if (v150 == v159)
                    {
                      v161 = *--v149;
                      v159 = v161;
                      v150 = v161 + 4080;
                    }
                    v160 = *(double *)(v150 - 8);
                    v150 -= 40;
                  }
                  while (v109 < v160);
                }
                v162 = v145 - v144;
                v163 = (unsigned __int128)((uint64_t)(v145 - v144) * (__int128)0x6666666666666667) >> 64;
                v164 = (v163 >> 4) + ((unint64_t)v163 >> 63);
                if (v162 < 41)
                {
                  v168 = 102 - v164;
                  v166 = a1[-(v168 / 0x66)];
                  v167 = 101 - v168 % 0x66;
                }
                else
                {
                  v165 = v164 - 1;
                  v166 = a1[v165 / 0x66];
                  v167 = v165 % 0x66;
                }
                v169 = (__int128 *)(v166 + 40 * v167);
                a5 = v148;
                if (v169 != (__int128 *)v371)
                {
                  if (*(char *)(v371 + 23) < 0)
                    operator delete(*(void **)v371);
                  v170 = *v169;
                  *(_QWORD *)(v371 + 16) = *((_QWORD *)v169 + 2);
                  *(_OWORD *)v371 = v170;
                  *((_BYTE *)v169 + 23) = 0;
                  *(_BYTE *)v169 = 0;
                  *(_OWORD *)(v371 + 24) = *(__int128 *)((char *)v169 + 24);
                }
                if (*((char *)v169 + 23) < 0)
                  operator delete(*(void **)v169);
                a6 = 0;
                *(_QWORD *)v169 = v362;
                *((_QWORD *)v169 + 1) = *(_QWORD *)v373;
                *(_QWORD *)((char *)v169 + 15) = *(_QWORD *)&v373[7];
                *((_BYTE *)v169 + 23) = v359;
                *((_QWORD *)v169 + 3) = v154;
                *((double *)v169 + 4) = v109;
                goto LABEL_4;
              }
              v361 = v108;
            }
            v358 = *(_QWORD *)v9;
            *(_QWORD *)v372 = *(_QWORD *)(v9 + 8);
            *(_QWORD *)&v372[7] = *(_QWORD *)(v9 + 15);
            v357 = *(_BYTE *)(v9 + 23);
            *(_QWORD *)(v9 + 8) = 0;
            *(_QWORD *)(v9 + 16) = 0;
            *(_QWORD *)v9 = 0;
            v116 = (_OWORD *)(v9 + 24);
            v356 = *(_QWORD *)(v9 + 24);
            v117 = *a1;
            v118 = a1;
            v119 = v9;
            do
            {
              v119 += 40;
              if (v119 - v117 == 4080)
              {
                v120 = v118[1];
                ++v118;
                v117 = v120;
                v119 = v120;
              }
            }
            while (*(double *)(v119 + 32) < v109);
            v121 = (uint64_t)(v119 - v117) / 40;
            if ((uint64_t)(v119 - v117) < 41)
            {
              v125 = 102 - v121;
              v123 = v118[-(v125 / 0x66)];
              v124 = 101 - v125 % 0x66;
            }
            else
            {
              v122 = v121 - 1;
              v123 = v118[v122 / 0x66];
              v124 = v122 % 0x66;
            }
            v126 = v123 + 40 * v124;
            v127 = a3;
            v128 = v7;
            if (v126 == v371)
            {
              while (1)
              {
                if (v118 >= v127)
                {
                  if (v118 != v127)
                  {
                    v131 = v128;
                    goto LABEL_127;
                  }
                  if (v119 >= v128)
                    break;
                }
                if (v128 == *v127)
                {
                  v135 = *--v127;
                  v128 = v135 + 4080;
                }
                v131 = v128 - 40;
                v134 = *(double *)(v128 - 8);
                v128 -= 40;
                if (v134 < v109)
                  goto LABEL_127;
              }
              v131 = v128;
              v171 = v118 == v127;
              if (v118 < v127)
                goto LABEL_128;
            }
            else
            {
              v129 = *a3;
              v127 = a3;
              v130 = v7;
              do
              {
                if (v130 == v129)
                {
                  v133 = *--v127;
                  v129 = v133;
                  v130 = v133 + 4080;
                }
                v131 = v130 - 40;
                v132 = *(double *)(v130 - 8);
                v130 -= 40;
              }
              while (v132 >= v109);
LABEL_127:
              v171 = v118 == v127;
              if (v118 < v127)
              {
LABEL_128:
                v172 = 0;
                goto LABEL_136;
              }
            }
            v172 = !v171 || v119 >= v131;
LABEL_136:
            while (v118 < v127 || v118 == v127 && v119 < v131)
            {
              v174 = *(_QWORD *)v119;
              *(_QWORD *)v385 = *(_QWORD *)(v119 + 8);
              *(_QWORD *)&v385[7] = *(_QWORD *)(v119 + 15);
              v175 = *(_BYTE *)(v119 + 23);
              *(_QWORD *)v119 = 0;
              *(_QWORD *)(v119 + 8) = 0;
              *(_QWORD *)(v119 + 16) = 0;
              v377 = *(_OWORD *)(v119 + 24);
              v176 = *(_QWORD *)(v131 + 16);
              *(_OWORD *)v119 = *(_OWORD *)v131;
              *(_QWORD *)(v119 + 16) = v176;
              *(_BYTE *)(v131 + 23) = 0;
              *(_BYTE *)v131 = 0;
              *(_OWORD *)(v119 + 24) = *(_OWORD *)(v131 + 24);
              if (*(char *)(v131 + 23) < 0)
                operator delete(*(void **)v131);
              *(_QWORD *)v131 = v174;
              *(_QWORD *)(v131 + 8) = *(_QWORD *)v385;
              *(_QWORD *)(v131 + 15) = *(_QWORD *)&v385[7];
              *(_BYTE *)(v131 + 23) = v175;
              *(_OWORD *)(v131 + 24) = v377;
              v117 = *v118;
              do
              {
                v119 += 40;
                if (v119 - v117 == 4080)
                {
                  v177 = v118[1];
                  ++v118;
                  v117 = v177;
                  v119 = v177;
                }
              }
              while (*(double *)(v119 + 32) < v109);
              v178 = *v127;
              do
              {
                if (v131 == v178)
                {
                  v180 = *--v127;
                  v178 = v180;
                  v131 = v180 + 4080;
                }
                v179 = *(double *)(v131 - 8);
                v131 -= 40;
              }
              while (v179 >= v109);
            }
            v181 = v119 - v117;
            v182 = (unsigned __int128)((uint64_t)(v119 - v117) * (__int128)0x6666666666666667) >> 64;
            v183 = (v182 >> 4) + ((unint64_t)v182 >> 63);
            if (v181 < 41)
            {
              v188 = 102 - v183;
              v185 = &v118[-(v188 / 0x66)];
              v186 = *v185;
              v187 = 101 - v188 % 0x66;
            }
            else
            {
              v184 = v183 - 1;
              v185 = &v118[v184 / 0x66];
              v186 = *v185;
              v187 = v184 % 0x66;
            }
            v189 = v186 + 40 * v187;
            v145 = v371;
            if (v189 != v371)
            {
              if (*(char *)(v371 + 23) < 0)
                operator delete(*(void **)v371);
              v190 = *(_OWORD *)v189;
              *(_QWORD *)(v371 + 16) = *(_QWORD *)(v189 + 16);
              *(_OWORD *)v371 = v190;
              *(_BYTE *)(v189 + 23) = 0;
              *(_BYTE *)v189 = 0;
              *v116 = *(_OWORD *)(v189 + 24);
            }
            if (*(char *)(v189 + 23) < 0)
              operator delete(*(void **)v189);
            *(_QWORD *)v189 = v358;
            *(_QWORD *)(v189 + 8) = *(_QWORD *)v372;
            *(_QWORD *)(v189 + 15) = *(_QWORD *)&v372[7];
            *(_BYTE *)(v189 + 23) = v357;
            *(_QWORD *)(v189 + 24) = v356;
            *(double *)(v189 + 32) = v109;
            if (!v172)
              goto LABEL_166;
            v191 = sub_19C36F514(a1, v371, v185, v189);
            v192 = v189 - *v185;
            v193 = v192 / 40;
            if (v192 < -39)
            {
              v198 = 100 - v193;
              v195 = &v185[-(v198 / 0x66)];
              v196 = *v195;
              v197 = 101 - v198 % 0x66;
            }
            else
            {
              v194 = v193 + 1;
              v195 = &v185[v194 / 0x66];
              v196 = *v195;
              v197 = v194 % 0x66;
            }
            if (sub_19C36F514(v195, v196 + 40 * v197, v369, v7))
            {
              v7 = v189;
              a3 = v185;
              a5 = v361;
              if (v191)
                return;
              goto LABEL_4;
            }
            if (!v191)
            {
LABEL_166:
              sub_19C36CAB4(a1, v371, v185, v189, v361, a6 & 1);
              a6 = 0;
            }
            v145 = v189 + 40;
            if (v189 + 40 - *v185 == 4080)
            {
              v199 = v185[1];
              ++v185;
              v145 = v199;
            }
            a1 = v185;
            a3 = v369;
            a5 = v361;
LABEL_4:
            v9 = v145;
            if (v7 != v145)
              continue;
            return;
          }
          if (v9 == v7)
            return;
          v228 = (unint64_t)(v17 - 2) >> 1;
          v229 = v228;
          v355 = v7;
          while (1)
          {
            v232 = (v9 - *a1) >> 3;
            v233 = 0xCCCCCCCCCCCCCCCDLL * v232;
            if (!v229)
              break;
            v234 = v233 + v229;
            if ((uint64_t)(v233 + v229) < 1)
            {
              v238 = 101 - v234;
              v235 = &a1[-(v238 / 0x66)];
              v236 = *v235;
              v237 = 101 - v238 % 0x66;
            }
            else
            {
              v235 = &a1[v234 / 0x66];
              v236 = *v235;
              v237 = v234 % 0x66;
            }
            v239 = v236 + 40 * v237;
            if (v239 == v9)
              break;
            v240 = 102 * (v235 - a1) - 0x3333333333333333 * ((uint64_t)(40 * v237) >> 3) + 0x3333333333333333 * v232;
            if (v228 >= v240)
              goto LABEL_218;
LABEL_209:
            v230 = v229-- <= 0;
            v231 = v355;
            v9 = v371;
            if (v230)
            {
              v268 = v369;
              v269 = v11
                   - 0x3333333333333333 * ((uint64_t)(v355 - *v369) >> 3)
                   + 0x3333333333333333 * ((v371 - *a1) >> 3);
              if (v269 < 2)
                return;
              while (2)
              {
                v370 = v268;
                v270 = 0;
                v364 = *(_QWORD *)v9;
                *(_QWORD *)v374 = *(_QWORD *)(v371 + 8);
                *(_QWORD *)&v374[7] = *(_QWORD *)(v371 + 15);
                v367 = *(_BYTE *)(v9 + 23);
                *(_QWORD *)v9 = 0;
                *(_QWORD *)(v9 + 8) = 0;
                *(_QWORD *)(v9 + 16) = 0;
                v271 = v9;
                v272 = a1;
                v381 = *(_OWORD *)(v371 + 24);
LABEL_252:
                if (v270 == -1)
                {
                  v274 = v271;
                }
                else
                {
                  v275 = v270 + 1 - 0x3333333333333333 * ((v271 - *v272) >> 3);
                  if (v275 < 1)
                  {
                    v278 = 101 - v275;
                    v272 -= v278 / 0x66;
                    v276 = *v272;
                    v277 = 101 - v278 % 0x66;
                  }
                  else
                  {
                    v272 += v275 / 0x66uLL;
                    v276 = *v272;
                    v277 = v275 % 0x66uLL;
                  }
                  v274 = v276 + 40 * v277;
                }
                v279 = (2 * v270) | 1;
                v270 = 2 * v270 + 2;
                if (v270 >= v269
                  || ((v280 = v274 - *v272, v281 = v280 / 40, v280 < -39)
                    ? (v285 = 100 - v281, v283 = v272[-(v285 / 0x66)], v284 = 101 - v285 % 0x66)
                    : (v282 = v281 + 1, v283 = v272[v282 / 0x66], v284 = v282 % 0x66),
                      *(double *)(v274 + 32) >= *(double *)(v283 + 40 * v284 + 32)))
                {
                  v270 = v279;
                  if (*(char *)(v271 + 23) < 0)
                    goto LABEL_266;
                }
                else
                {
                  v274 += 40;
                  if (v274 - *v272 == 4080)
                  {
                    v286 = v272[1];
                    ++v272;
                    v274 = v286;
                  }
                  if (*(char *)(v271 + 23) < 0)
LABEL_266:
                    operator delete(*(void **)v271);
                }
                v273 = *(_OWORD *)v274;
                *(_QWORD *)(v271 + 16) = *(_QWORD *)(v274 + 16);
                *(_OWORD *)v271 = v273;
                *(_BYTE *)(v274 + 23) = 0;
                *(_BYTE *)v274 = 0;
                *(_OWORD *)(v271 + 24) = *(_OWORD *)(v274 + 24);
                v271 = v274;
                if (v270 > (uint64_t)((unint64_t)(v269 - 2) >> 1))
                {
                  v287 = v231;
                  if (*v370 == v231)
                    v287 = *(v370 - 1) + 4080;
                  v288 = (_OWORD *)(v274 + 24);
                  v289 = (void **)(v287 - 40);
                  v290 = *(char *)(v274 + 23);
                  if (v287 - 40 == v274)
                  {
                    if (v290 < 0)
                      operator delete(*(void **)v274);
                    *(_QWORD *)v274 = v364;
                    *(_QWORD *)(v274 + 8) = *(_QWORD *)v374;
                    *(_QWORD *)(v274 + 15) = *(_QWORD *)&v374[7];
                    *(_BYTE *)(v274 + 23) = v367;
                    *v288 = v381;
LABEL_302:
                    v268 = v370;
                    v9 = v371;
                  }
                  else
                  {
                    if (v290 < 0)
                      operator delete(*(void **)v274);
                    v291 = *(_OWORD *)v289;
                    *(_QWORD *)(v274 + 16) = *(_QWORD *)(v287 - 24);
                    *(_OWORD *)v274 = v291;
                    *(_BYTE *)(v287 - 17) = 0;
                    *(_BYTE *)(v287 - 40) = 0;
                    *v288 = *(_OWORD *)(v287 - 16);
                    v292 = v274 + 40;
                    if (v274 + 40 - *v272 == 4080)
                    {
                      v293 = v272[1];
                      ++v272;
                      v292 = v293;
                    }
                    v9 = v371;
                    if (*(char *)(v287 - 17) < 0)
                      operator delete(*v289);
                    *(_QWORD *)(v287 - 40) = v364;
                    *(_QWORD *)(v287 - 25) = *(_QWORD *)&v374[7];
                    *(_QWORD *)(v287 - 32) = *(_QWORD *)v374;
                    *(_BYTE *)(v287 - 17) = v367;
                    *(_OWORD *)(v287 - 16) = v381;
                    v268 = v370;
                    if (v292 != v371)
                    {
                      v294 = (v371 - *a1) >> 3;
                      v295 = 102 * (v272 - a1)
                           - 0x3333333333333333 * ((v292 - *v272) >> 3)
                           + 0x3333333333333333 * v294;
                      v296 = v295 - 2;
                      if (v295 >= 2)
                      {
                        v297 = v296 >> 1;
                        v298 = v371;
                        if (v296 >= 2)
                        {
                          v299 = v297 - 0x3333333333333333 * v294;
                          if (v299 < 1)
                          {
                            v302 = 101 - v299;
                            v300 = a1[-(v302 / 0x66)];
                            v301 = 101 - v302 % 0x66;
                          }
                          else
                          {
                            v300 = a1[v299 / 0x66uLL];
                            v301 = v299 % 0x66uLL;
                          }
                          v298 = v300 + 40 * v301;
                        }
                        if (*v272 == v292)
                          v292 = *(v272 - 1) + 4080;
                        v303 = *(double *)(v292 - 8);
                        if (*(double *)(v298 + 32) < v303)
                        {
                          v305 = *(_QWORD *)(v292 - 40);
                          v304 = v292 - 40;
                          v368 = v305;
                          *(_QWORD *)&v387[7] = *(_QWORD *)(v304 + 15);
                          *(_QWORD *)v387 = *(_QWORD *)(v304 + 8);
                          v306 = *(_BYTE *)(v304 + 23);
                          *(_QWORD *)v304 = 0;
                          *(_QWORD *)(v304 + 8) = 0;
                          *(_QWORD *)(v304 + 16) = 0;
                          v307 = *(_QWORD *)(v304 + 24);
                          do
                          {
                            v311 = v231;
                            v312 = v304;
                            v304 = v298;
                            if (*(char *)(v312 + 23) < 0)
                              operator delete(*(void **)v312);
                            v313 = *(_OWORD *)v304;
                            *(_QWORD *)(v312 + 16) = *(_QWORD *)(v304 + 16);
                            *(_OWORD *)v312 = v313;
                            *(_BYTE *)(v304 + 23) = 0;
                            *(_BYTE *)v304 = 0;
                            *(_OWORD *)(v312 + 24) = *(_OWORD *)(v304 + 24);
                            v231 = v311;
                            if (!v297)
                              break;
                            v298 = v371;
                            if (v297 >= 3)
                            {
                              v314 = ((v297 - 1) >> 1) - 0x3333333333333333 * ((v371 - *a1) >> 3);
                              if ((uint64_t)v314 < 1)
                              {
                                v308 = 101 - v314;
                                v309 = a1[-(v308 / 0x66)];
                                v310 = 101 - v308 % 0x66;
                              }
                              else
                              {
                                v309 = a1[v314 / 0x66];
                                v310 = v314 % 0x66;
                              }
                              v298 = v309 + 40 * v310;
                            }
                            v297 = (v297 - 1) >> 1;
                          }
                          while (*(double *)(v298 + 32) < v303);
                          if (*(char *)(v304 + 23) < 0)
                            operator delete(*(void **)v304);
                          *(_QWORD *)v304 = v368;
                          *(_QWORD *)(v304 + 8) = *(_QWORD *)v387;
                          *(_QWORD *)(v304 + 15) = *(_QWORD *)&v387[7];
                          *(_BYTE *)(v304 + 23) = v306;
                          *(_QWORD *)(v304 + 24) = v307;
                          *(double *)(v304 + 32) = v303;
                          goto LABEL_302;
                        }
                      }
                    }
                  }
                  if (v231 == *v268)
                  {
                    v315 = *--v268;
                    v231 = v315 + 4080;
                  }
                  v231 -= 40;
                  v230 = v269-- <= 2;
                  if (v230)
                    return;
                  continue;
                }
                goto LABEL_252;
              }
            }
          }
          v240 = 0;
          v239 = v9;
LABEL_218:
          v241 = (2 * v240) | 1;
          v242 = v233 + v241;
          if (v242 < 1)
          {
            v246 = 101 - v242;
            v243 = &a1[-(v246 / 0x66)];
            v244 = *v243;
            v245 = 101 - v246 % 0x66;
          }
          else
          {
            v243 = &a1[v242 / 0x66uLL];
            v244 = *v243;
            v245 = v242 % 0x66uLL;
          }
          v247 = v244 + 40 * v245;
          v248 = 2 * v240 + 2;
          if (v248 >= v17
            || ((v249 = (v247 - v244) / 40, v247 - v244 < -39)
              ? (v253 = 100 - v249, v251 = v243[-(v253 / 0x66)], v252 = 101 - v253 % 0x66)
              : (v250 = v249 + 1, v251 = v243[v250 / 0x66], v252 = v250 % 0x66),
                *(double *)(v247 + 32) >= *(double *)(v251 + 40 * v252 + 32)))
          {
            v248 = v241;
          }
          else
          {
            v247 += 40;
            if (v247 - v244 == 4080)
              v247 = v243[1];
          }
          v254 = *(double *)(v239 + 32);
          if (*(double *)(v247 + 32) >= v254)
          {
            v366 = *(void **)v239;
            *(_QWORD *)v380 = *(_QWORD *)(v239 + 8);
            *(_QWORD *)&v380[7] = *(_QWORD *)(v239 + 15);
            v363 = *(_BYTE *)(v239 + 23);
            *(_QWORD *)(v239 + 8) = 0;
            *(_QWORD *)(v239 + 16) = 0;
            *(_QWORD *)v239 = 0;
            v360 = *(_QWORD *)(v239 + 24);
            do
            {
              v255 = v239;
              v239 = v247;
              if (*(char *)(v255 + 23) < 0)
                operator delete(*(void **)v255);
              v256 = *(_OWORD *)v239;
              *(_QWORD *)(v255 + 16) = *(_QWORD *)(v239 + 16);
              *(_OWORD *)v255 = v256;
              *(_BYTE *)(v239 + 23) = 0;
              *(_BYTE *)v239 = 0;
              *(_OWORD *)(v255 + 24) = *(_OWORD *)(v239 + 24);
              if (v228 < v248)
                break;
              v257 = (2 * v248) | 1;
              v258 = v257 - 0x3333333333333333 * ((v371 - *a1) >> 3);
              if (v258 < 1)
              {
                v262 = 101 - v258;
                v259 = &a1[-(v262 / 0x66)];
                v260 = *v259;
                v261 = 101 - v262 % 0x66;
              }
              else
              {
                v259 = &a1[v258 / 0x66uLL];
                v260 = *v259;
                v261 = v258 % 0x66uLL;
              }
              v247 = v260 + 40 * v261;
              v248 = 2 * v248 + 2;
              if (v248 >= v17
                || ((v263 = (v247 - v260) / 40, v247 - v260 < -39)
                  ? (v267 = 100 - v263, v265 = v259[-(v267 / 0x66)], v266 = 101 - v267 % 0x66)
                  : (v264 = v263 + 1, v265 = v259[v264 / 0x66], v266 = v264 % 0x66),
                    *(double *)(v247 + 32) >= *(double *)(v265 + 40 * v266 + 32)))
              {
                v248 = v257;
              }
              else
              {
                v247 += 40;
                if (v247 - v260 == 4080)
                  v247 = v259[1];
              }
            }
            while (*(double *)(v247 + 32) >= v254);
            if (*(char *)(v239 + 23) < 0)
              operator delete(*(void **)v239);
            *(_QWORD *)v239 = v366;
            *(_QWORD *)(v239 + 8) = *(_QWORD *)v380;
            *(_QWORD *)(v239 + 15) = *(_QWORD *)&v380[7];
            *(_BYTE *)(v239 + 23) = v363;
            *(_QWORD *)(v239 + 24) = v360;
            *(double *)(v239 + 32) = v254;
          }
          goto LABEL_209;
        }
        if ((a6 & 1) != 0)
        {
          if (v9 != v7)
          {
            for (i = v9 + 40; ; i += 40)
            {
              if (i - v15 == 4080)
              {
                v216 = a1[1];
                ++a1;
                v15 = v216;
                i = v216;
              }
              if (i == v7)
                break;
              v217 = (void ***)a1;
              v218 = i;
              if (i == v15)
              {
                v217 = (void ***)(a1 - 1);
                v218 = *(a1 - 1) + 4080;
              }
              v219 = *(double *)(i + 32);
              if (v219 < *(double *)(v218 - 8))
              {
                v220 = *(void **)i;
                *(_QWORD *)v379 = *(_QWORD *)(i + 8);
                *(_QWORD *)&v379[7] = *(_QWORD *)(i + 15);
                v221 = *(_BYTE *)(i + 23);
                *(_QWORD *)(i + 8) = 0;
                *(_QWORD *)(i + 16) = 0;
                *(_QWORD *)i = 0;
                v222 = *(_QWORD *)(i + 24);
                v223 = i;
                while (1)
                {
                  v225 = v218;
                  if (*(char *)(v223 + 23) < 0)
                    operator delete(*(void **)v223);
                  v226 = (void **)(v225 - 40);
                  v227 = *(_OWORD *)(v225 - 40);
                  *(_QWORD *)(v223 + 16) = *(_QWORD *)(v225 - 24);
                  *(_OWORD *)v223 = v227;
                  *(_BYTE *)(v225 - 17) = 0;
                  *(_BYTE *)(v225 - 40) = 0;
                  *(_OWORD *)(v223 + 24) = *(_OWORD *)(v225 - 16);
                  if (v225 - 40 == v371)
                    break;
                  if (v226 == *v217)
                  {
                    v224 = (uint64_t)*--v217;
                    v218 = v224 + 4080;
                  }
                  else
                  {
                    v218 = v225 - 40;
                  }
                  v223 = v225 - 40;
                  if (v219 >= *(double *)(v218 - 8))
                    goto LABEL_202;
                }
                v226 = (void **)v371;
LABEL_202:
                if (*(char *)(v225 - 17) < 0)
                  operator delete(*v226);
                *v226 = v220;
                *(_QWORD *)(v225 - 25) = *(_QWORD *)&v379[7];
                *(_QWORD *)(v225 - 32) = *(_QWORD *)v379;
                *(_BYTE *)(v225 - 17) = v221;
                *(_QWORD *)(v225 - 16) = v222;
                *(double *)(v225 - 8) = v219;
                v15 = *a1;
              }
            }
          }
        }
        else if (v9 != v7)
        {
          v327 = v16 / 40;
          if (v16 < -39)
          {
            v335 = 100 - v327;
            v329 = &a1[-((100 - v327) / 0x66uLL)];
            v330 = (char *)*v329;
            v331 = 101 - v335 % 0x66;
          }
          else
          {
            v328 = v327 + 1;
            v329 = &a1[(v327 + 1) / 0x66uLL];
            v330 = (char *)*v329;
            v331 = v328 % 0x66;
          }
          v336 = (uint64_t *)&v330[40 * v331];
          while (v336 != (uint64_t *)v7)
          {
            v337 = ((char *)v336 - v330) / 40;
            if ((char *)v336 - v330 < 41)
            {
              v342 = 102 - v337;
              v339 = &v329[-(v342 / 0x66)];
              v340 = *v339;
              v341 = 101 - v342 % 0x66;
            }
            else
            {
              v338 = v337 - 1;
              v339 = &v329[v338 / 0x66];
              v340 = *v339;
              v341 = v338 % 0x66;
            }
            v343 = (double *)(v340 + 40 * v341);
            v344 = *((double *)v336 + 4);
            if (v344 < v343[4])
            {
              v345 = v7;
              v346 = *v336;
              *(_QWORD *)v382 = v336[1];
              *(_QWORD *)&v382[7] = *(uint64_t *)((char *)v336 + 15);
              v347 = *((_BYTE *)v336 + 23);
              v336[1] = 0;
              v336[2] = 0;
              *v336 = 0;
              v348 = v336[3];
              v349 = (__int128 *)v336;
              do
              {
                v352 = (__int128 *)v343;
                if (*((char *)v349 + 23) < 0)
                  operator delete(*(void **)v349);
                v353 = *v352;
                *((_QWORD *)v349 + 2) = *((_QWORD *)v352 + 2);
                *v349 = v353;
                *((_BYTE *)v352 + 23) = 0;
                *(_BYTE *)v352 = 0;
                *(__int128 *)((char *)v349 + 24) = *(__int128 *)((char *)v352 + 24);
                if (v352 == (__int128 *)*v339)
                {
                  v350 = *--v339;
                  v351 = (double *)(v350 + 4080);
                }
                else
                {
                  v351 = (double *)v352;
                }
                v343 = v351 - 5;
                v349 = v352;
              }
              while (v344 < *(v351 - 1));
              if (*((char *)v352 + 23) < 0)
                operator delete(*(void **)v352);
              *(_QWORD *)v352 = v346;
              *((_QWORD *)v352 + 1) = *(_QWORD *)v382;
              *(_QWORD *)((char *)v352 + 15) = *(_QWORD *)&v382[7];
              *((_BYTE *)v352 + 23) = v347;
              *((_QWORD *)v352 + 3) = v348;
              *((double *)v352 + 4) = v344;
              v330 = (char *)*v329;
              v7 = v345;
            }
            v336 += 5;
            if ((char *)v336 - v330 == 4080)
            {
              v354 = (char *)v329[1];
              ++v329;
              v330 = v354;
              v336 = (uint64_t *)v354;
            }
          }
        }
        return;
    }
  }
}

uint64_t **sub_19C36EB88(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  int v7;
  const void *v8;
  size_t v9;
  uint64_t **v10;
  _QWORD *v11;
  const void *v12;
  const void *v13;
  int v14;
  const void *v15;
  size_t v16;
  size_t v17;
  int v18;
  int v19;
  char *v20;
  _BYTE *v21;
  uint64_t *v22;
  uint64_t *v23;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *((char *)a2 + 23);
    if (v7 >= 0)
      v8 = a2;
    else
      v8 = *a2;
    if (v7 >= 0)
      v9 = *((unsigned __int8 *)a2 + 23);
    else
      v9 = (size_t)a2[1];
    while (1)
    {
      v10 = (uint64_t **)v5;
      v13 = (const void *)v5[4];
      v11 = v5 + 4;
      v12 = v13;
      v14 = *((char *)v11 + 23);
      if (v14 >= 0)
        v15 = v11;
      else
        v15 = v12;
      if (v14 >= 0)
        v16 = *((unsigned __int8 *)v11 + 23);
      else
        v16 = v11[1];
      if (v16 >= v9)
        v17 = v9;
      else
        v17 = v16;
      v18 = memcmp(v8, v15, v17);
      if (v18)
      {
        if (v18 < 0)
          goto LABEL_8;
LABEL_22:
        v19 = memcmp(v15, v8, v17);
        if (v19)
        {
          if ((v19 & 0x80000000) == 0)
            return v10;
        }
        else if (v16 >= v9)
        {
          return v10;
        }
        v5 = v10[1];
        if (!v5)
        {
          v6 = v10 + 1;
          goto LABEL_29;
        }
      }
      else
      {
        if (v9 >= v16)
          goto LABEL_22;
LABEL_8:
        v5 = *v10;
        v6 = v10;
        if (!*v10)
          goto LABEL_29;
      }
    }
  }
  v10 = a1 + 1;
LABEL_29:
  v20 = (char *)operator new(0x40uLL);
  v21 = v20 + 32;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_19C2B5238(v21, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)v21 = *(_OWORD *)a3;
    *((_QWORD *)v20 + 6) = *(_QWORD *)(a3 + 16);
  }
  *((_DWORD *)v20 + 14) = 0;
  *(_QWORD *)v20 = 0;
  *((_QWORD *)v20 + 1) = 0;
  *((_QWORD *)v20 + 2) = v10;
  *v6 = (uint64_t *)v20;
  v22 = (uint64_t *)**a1;
  v23 = (uint64_t *)v20;
  if (v22)
  {
    *a1 = v22;
    v23 = *v6;
  }
  sub_19C2A2310(a1[1], v23);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return (uint64_t **)v20;
}

void sub_19C36ECF4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19C36ED08(uint64_t a1, uint64_t *a2, uint64_t a3, __int128 *a4, uint64_t a5, __int128 *a6)
{
  double v9;
  double v10;
  _QWORD *v11;
  __int128 *v12;
  uint64_t v13;
  char v14;
  __int128 v15;
  void *v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  __int128 v21;
  uint64_t v22;
  char v23;
  __int128 v24;
  __int128 *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _BYTE v32[15];
  _BYTE v33[15];
  _BYTE v34[15];
  _BYTE v35[15];
  _BYTE v36[15];

  v9 = *((double *)a4 + 4);
  v10 = *((double *)a6 + 4);
  if (v9 >= *((double *)a2 + 4))
  {
    if (v10 < v9)
    {
      v16 = *(void **)a4;
      *(_QWORD *)v33 = *((_QWORD *)a4 + 1);
      *(_QWORD *)&v33[7] = *(_QWORD *)((char *)a4 + 15);
      v17 = *((_BYTE *)a4 + 23);
      *((_QWORD *)a4 + 2) = 0;
      *((_QWORD *)a4 + 1) = 0;
      *(_QWORD *)a4 = 0;
      v28 = *(__int128 *)((char *)a4 + 24);
      v18 = *((_QWORD *)a6 + 2);
      *a4 = *a6;
      *((_QWORD *)a4 + 2) = v18;
      *((_BYTE *)a6 + 23) = 0;
      *(_BYTE *)a6 = 0;
      *(__int128 *)((char *)a4 + 24) = *(__int128 *)((char *)a6 + 24);
      if (*((char *)a6 + 23) < 0)
        operator delete(*(void **)a6);
      *(_QWORD *)a6 = v16;
      *((_QWORD *)a6 + 1) = *(_QWORD *)v33;
      *(_QWORD *)((char *)a6 + 15) = *(_QWORD *)&v33[7];
      *((_BYTE *)a6 + 23) = v17;
      *(__int128 *)((char *)a6 + 24) = v28;
      if (*((double *)a4 + 4) < *((double *)a2 + 4))
      {
        v19 = *a2;
        *(_QWORD *)v34 = a2[1];
        *(_QWORD *)&v34[7] = *(uint64_t *)((char *)a2 + 15);
        v20 = *((_BYTE *)a2 + 23);
        a2[1] = 0;
        a2[2] = 0;
        *a2 = 0;
        v29 = *(_OWORD *)(a2 + 3);
        v21 = *a4;
        a2[2] = *((_QWORD *)a4 + 2);
        *(_OWORD *)a2 = v21;
        *((_BYTE *)a4 + 23) = 0;
        *(_BYTE *)a4 = 0;
        *(_OWORD *)(a2 + 3) = *(__int128 *)((char *)a4 + 24);
        if (*((char *)a4 + 23) < 0)
          operator delete(*(void **)a4);
        *(_QWORD *)a4 = v19;
        *((_QWORD *)a4 + 1) = *(_QWORD *)v34;
        *(_QWORD *)((char *)a4 + 15) = *(_QWORD *)&v34[7];
        *((_BYTE *)a4 + 23) = v20;
        *(__int128 *)((char *)a4 + 24) = v29;
      }
    }
  }
  else
  {
    v11 = a2 + 1;
    v12 = (__int128 *)(a2 + 3);
    if (v10 >= v9)
    {
      v22 = *a2;
      *(_QWORD *)v35 = *v11;
      *(_QWORD *)&v35[7] = *(uint64_t *)((char *)a2 + 15);
      v23 = *((_BYTE *)a2 + 23);
      a2[1] = 0;
      a2[2] = 0;
      *a2 = 0;
      v30 = *v12;
      v24 = *a4;
      a2[2] = *((_QWORD *)a4 + 2);
      *(_OWORD *)a2 = v24;
      *((_BYTE *)a4 + 23) = 0;
      *(_BYTE *)a4 = 0;
      v25 = (__int128 *)((char *)a4 + 24);
      *v12 = *(__int128 *)((char *)a4 + 24);
      if (*((char *)a4 + 23) < 0)
        operator delete(*(void **)a4);
      *(_QWORD *)a4 = v22;
      *((_QWORD *)a4 + 1) = *(_QWORD *)v35;
      *(_QWORD *)((char *)a4 + 15) = *(_QWORD *)&v35[7];
      *((_BYTE *)a4 + 23) = v23;
      *v25 = v30;
      if (*((double *)a6 + 4) < *((double *)a4 + 4))
      {
        *(_QWORD *)v36 = *((_QWORD *)a4 + 1);
        *(_QWORD *)&v36[7] = *(_QWORD *)((char *)a4 + 15);
        *((_QWORD *)a4 + 1) = 0;
        *((_QWORD *)a4 + 2) = 0;
        *(_QWORD *)a4 = 0;
        v31 = *v25;
        v26 = *a6;
        *((_QWORD *)a4 + 2) = *((_QWORD *)a6 + 2);
        *a4 = v26;
        *((_BYTE *)a6 + 23) = 0;
        *(_BYTE *)a6 = 0;
        *v25 = *(__int128 *)((char *)a6 + 24);
        if (*((char *)a6 + 23) < 0)
          operator delete(*(void **)a6);
        *(_QWORD *)a6 = v22;
        *((_QWORD *)a6 + 1) = *(_QWORD *)v36;
        *(_QWORD *)((char *)a6 + 15) = *(_QWORD *)&v36[7];
        *((_BYTE *)a6 + 23) = v23;
        *(__int128 *)((char *)a6 + 24) = v31;
      }
    }
    else
    {
      v13 = *a2;
      *(_QWORD *)v32 = *v11;
      *(_QWORD *)&v32[7] = *(uint64_t *)((char *)a2 + 15);
      v14 = *((_BYTE *)a2 + 23);
      a2[1] = 0;
      a2[2] = 0;
      *a2 = 0;
      v27 = *v12;
      v15 = *a6;
      a2[2] = *((_QWORD *)a6 + 2);
      *(_OWORD *)a2 = v15;
      *((_BYTE *)a6 + 23) = 0;
      *(_BYTE *)a6 = 0;
      *v12 = *(__int128 *)((char *)a6 + 24);
      if (*((char *)a6 + 23) < 0)
        operator delete(*(void **)a6);
      *(_QWORD *)a6 = v13;
      *((_QWORD *)a6 + 1) = *(_QWORD *)v32;
      *(_QWORD *)((char *)a6 + 15) = *(_QWORD *)&v32[7];
      *((_BYTE *)a6 + 23) = v14;
      *(__int128 *)((char *)a6 + 24) = v27;
    }
  }
}

void sub_19C36F02C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  __int128 v17;
  uint64_t v18;
  char v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[15];
  _BYTE v25[15];
  _BYTE v26[15];

  sub_19C36ED08(a1, (uint64_t *)a2, a3, (__int128 *)a4, a5, (__int128 *)a6);
  if (*(double *)(a8 + 32) < *((double *)a6 + 4))
  {
    v12 = *a6;
    *(_QWORD *)v24 = a6[1];
    *(_QWORD *)&v24[7] = *(uint64_t *)((char *)a6 + 15);
    v13 = *((_BYTE *)a6 + 23);
    a6[2] = 0;
    a6[1] = 0;
    *a6 = 0;
    v21 = *(_OWORD *)(a6 + 3);
    v14 = *(_QWORD *)(a8 + 16);
    *(_OWORD *)a6 = *(_OWORD *)a8;
    a6[2] = v14;
    *(_BYTE *)(a8 + 23) = 0;
    *(_BYTE *)a8 = 0;
    *(_OWORD *)(a6 + 3) = *(_OWORD *)(a8 + 24);
    if (*(char *)(a8 + 23) < 0)
      operator delete(*(void **)a8);
    *(_QWORD *)a8 = v12;
    *(_QWORD *)(a8 + 8) = *(_QWORD *)v24;
    *(_QWORD *)(a8 + 15) = *(_QWORD *)&v24[7];
    *(_BYTE *)(a8 + 23) = v13;
    *(_OWORD *)(a8 + 24) = v21;
    if (*((double *)a6 + 4) < *((double *)a4 + 4))
    {
      v15 = *a4;
      *(_QWORD *)v25 = a4[1];
      *(_QWORD *)&v25[7] = *(uint64_t *)((char *)a4 + 15);
      v16 = *((_BYTE *)a4 + 23);
      a4[2] = 0;
      a4[1] = 0;
      *a4 = 0;
      v22 = *(_OWORD *)(a4 + 3);
      v17 = *(_OWORD *)a6;
      a4[2] = a6[2];
      *(_OWORD *)a4 = v17;
      *((_BYTE *)a6 + 23) = 0;
      *(_BYTE *)a6 = 0;
      *(_OWORD *)(a4 + 3) = *(_OWORD *)(a6 + 3);
      if (*((char *)a6 + 23) < 0)
        operator delete((void *)*a6);
      *a6 = v15;
      a6[1] = *(_QWORD *)v25;
      *(uint64_t *)((char *)a6 + 15) = *(_QWORD *)&v25[7];
      *((_BYTE *)a6 + 23) = v16;
      *(_OWORD *)(a6 + 3) = v22;
      if (*((double *)a4 + 4) < *(double *)(a2 + 32))
      {
        v18 = *(_QWORD *)a2;
        *(_QWORD *)v26 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)&v26[7] = *(_QWORD *)(a2 + 15);
        v19 = *(_BYTE *)(a2 + 23);
        *(_QWORD *)(a2 + 8) = 0;
        *(_QWORD *)(a2 + 16) = 0;
        *(_QWORD *)a2 = 0;
        v23 = *(_OWORD *)(a2 + 24);
        v20 = *(_OWORD *)a4;
        *(_QWORD *)(a2 + 16) = a4[2];
        *(_OWORD *)a2 = v20;
        *((_BYTE *)a4 + 23) = 0;
        *(_BYTE *)a4 = 0;
        *(_OWORD *)(a2 + 24) = *(_OWORD *)(a4 + 3);
        if (*((char *)a4 + 23) < 0)
          operator delete((void *)*a4);
        *a4 = v18;
        a4[1] = *(_QWORD *)v26;
        *(uint64_t *)((char *)a4 + 15) = *(_QWORD *)&v26[7];
        *((_BYTE *)a4 + 23) = v19;
        *(_OWORD *)(a4 + 3) = v23;
      }
    }
  }
}

void sub_19C36F250(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4, uint64_t a5, __int128 *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  void *v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  __int128 v19;
  uint64_t v20;
  char v21;
  __int128 v22;
  uint64_t v23;
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _BYTE v30[15];
  _BYTE v31[15];
  _BYTE v32[15];
  _BYTE v33[15];

  sub_19C36F02C(a1, a2, a3, (uint64_t *)a4, a5, (uint64_t *)a6, a7, a8);
  if (*(double *)(a10 + 32) < *(double *)(a8 + 32))
  {
    v14 = *(void **)a8;
    *(_QWORD *)v30 = *(_QWORD *)(a8 + 8);
    *(_QWORD *)&v30[7] = *(_QWORD *)(a8 + 15);
    v15 = *(_BYTE *)(a8 + 23);
    *(_QWORD *)(a8 + 16) = 0;
    *(_QWORD *)(a8 + 8) = 0;
    *(_QWORD *)a8 = 0;
    v26 = *(_OWORD *)(a8 + 24);
    v16 = *(_QWORD *)(a10 + 16);
    *(_OWORD *)a8 = *(_OWORD *)a10;
    *(_QWORD *)(a8 + 16) = v16;
    *(_BYTE *)(a10 + 23) = 0;
    *(_BYTE *)a10 = 0;
    *(_OWORD *)(a8 + 24) = *(_OWORD *)(a10 + 24);
    if (*(char *)(a10 + 23) < 0)
      operator delete(*(void **)a10);
    *(_QWORD *)a10 = v14;
    *(_QWORD *)(a10 + 8) = *(_QWORD *)v30;
    *(_QWORD *)(a10 + 15) = *(_QWORD *)&v30[7];
    *(_BYTE *)(a10 + 23) = v15;
    *(_OWORD *)(a10 + 24) = v26;
    if (*(double *)(a8 + 32) < *((double *)a6 + 4))
    {
      v17 = *(_QWORD *)a6;
      *(_QWORD *)v31 = *((_QWORD *)a6 + 1);
      *(_QWORD *)&v31[7] = *(_QWORD *)((char *)a6 + 15);
      v18 = *((_BYTE *)a6 + 23);
      *((_QWORD *)a6 + 2) = 0;
      *((_QWORD *)a6 + 1) = 0;
      *(_QWORD *)a6 = 0;
      v27 = *(__int128 *)((char *)a6 + 24);
      v19 = *(_OWORD *)a8;
      *((_QWORD *)a6 + 2) = *(_QWORD *)(a8 + 16);
      *a6 = v19;
      *(_BYTE *)(a8 + 23) = 0;
      *(_BYTE *)a8 = 0;
      *(__int128 *)((char *)a6 + 24) = *(_OWORD *)(a8 + 24);
      if (*(char *)(a8 + 23) < 0)
        operator delete(*(void **)a8);
      *(_QWORD *)a8 = v17;
      *(_QWORD *)(a8 + 8) = *(_QWORD *)v31;
      *(_QWORD *)(a8 + 15) = *(_QWORD *)&v31[7];
      *(_BYTE *)(a8 + 23) = v18;
      *(_OWORD *)(a8 + 24) = v27;
      if (*((double *)a6 + 4) < *((double *)a4 + 4))
      {
        v20 = *(_QWORD *)a4;
        *(_QWORD *)v32 = *((_QWORD *)a4 + 1);
        *(_QWORD *)&v32[7] = *(_QWORD *)((char *)a4 + 15);
        v21 = *((_BYTE *)a4 + 23);
        *((_QWORD *)a4 + 2) = 0;
        *((_QWORD *)a4 + 1) = 0;
        *(_QWORD *)a4 = 0;
        v28 = *(__int128 *)((char *)a4 + 24);
        v22 = *a6;
        *((_QWORD *)a4 + 2) = *((_QWORD *)a6 + 2);
        *a4 = v22;
        *((_BYTE *)a6 + 23) = 0;
        *(_BYTE *)a6 = 0;
        *(__int128 *)((char *)a4 + 24) = *(__int128 *)((char *)a6 + 24);
        if (*((char *)a6 + 23) < 0)
          operator delete(*(void **)a6);
        *(_QWORD *)a6 = v20;
        *((_QWORD *)a6 + 1) = *(_QWORD *)v32;
        *(_QWORD *)((char *)a6 + 15) = *(_QWORD *)&v32[7];
        *((_BYTE *)a6 + 23) = v21;
        *(__int128 *)((char *)a6 + 24) = v28;
        if (*((double *)a4 + 4) < *(double *)(a2 + 32))
        {
          v23 = *(_QWORD *)a2;
          *(_QWORD *)v33 = *(_QWORD *)(a2 + 8);
          *(_QWORD *)&v33[7] = *(_QWORD *)(a2 + 15);
          v24 = *(_BYTE *)(a2 + 23);
          *(_QWORD *)(a2 + 8) = 0;
          *(_QWORD *)(a2 + 16) = 0;
          *(_QWORD *)a2 = 0;
          v29 = *(_OWORD *)(a2 + 24);
          v25 = *a4;
          *(_QWORD *)(a2 + 16) = *((_QWORD *)a4 + 2);
          *(_OWORD *)a2 = v25;
          *((_BYTE *)a4 + 23) = 0;
          *(_BYTE *)a4 = 0;
          *(_OWORD *)(a2 + 24) = *(__int128 *)((char *)a4 + 24);
          if (*((char *)a4 + 23) < 0)
            operator delete(*(void **)a4);
          *(_QWORD *)a4 = v23;
          *((_QWORD *)a4 + 1) = *(_QWORD *)v33;
          *(_QWORD *)((char *)a4 + 15) = *(_QWORD *)&v33[7];
          *((_BYTE *)a4 + 23) = v24;
          *(__int128 *)((char *)a4 + 24) = v29;
        }
      }
    }
  }
}

BOOL sub_19C36F514(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  BOOL v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  __int128 *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  __int128 *v38;
  unint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  __int128 *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  int v54;
  unint64_t v55;
  unint64_t *v56;
  double v57;
  uint64_t v58;
  char v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  __int128 v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  __int128 v73;
  _BYTE v74[15];
  _BYTE v75[15];

  if (a4 != a2)
  {
    v4 = a4;
    v5 = (uint64_t)a3;
    v7 = *a3;
    v8 = a2 - *a1;
    v9 = 1;
    switch(102 * (a3 - a1) - 0x3333333333333333 * ((a4 - *a3) >> 3) + 0x3333333333333333 * (v8 >> 3))
    {
      case 0:
      case 1:
        return v9;
      case 2:
        if (v7 == a4)
          v4 = *(a3 - 1) + 4080;
        if (*(double *)(v4 - 8) >= *(double *)(a2 + 32))
          return v9;
        v10 = *(_QWORD *)a2;
        *(_QWORD *)v75 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)&v75[7] = *(_QWORD *)(a2 + 15);
        v11 = *(_BYTE *)(a2 + 23);
        *(_QWORD *)(a2 + 8) = 0;
        *(_QWORD *)(a2 + 16) = 0;
        *(_QWORD *)a2 = 0;
        v73 = *(_OWORD *)(a2 + 24);
        v12 = *(_QWORD *)(v4 - 24);
        *(_OWORD *)a2 = *(_OWORD *)(v4 - 40);
        *(_QWORD *)(a2 + 16) = v12;
        *(_BYTE *)(v4 - 17) = 0;
        *(_BYTE *)(v4 - 40) = 0;
        *(_OWORD *)(a2 + 24) = *(_OWORD *)(v4 - 16);
        if (*(char *)(v4 - 17) < 0)
          operator delete(*(void **)(v4 - 40));
        *(_QWORD *)(v4 - 40) = v10;
        *(_QWORD *)(v4 - 32) = *(_QWORD *)v75;
        *(_QWORD *)(v4 - 25) = *(_QWORD *)&v75[7];
        *(_BYTE *)(v4 - 17) = v11;
        *(_OWORD *)(v4 - 16) = v73;
        return 1;
      case 3:
        v19 = v8 / 40;
        if (v8 < -39)
        {
          v32 = 100 - v19;
          v21 = &a1[-(v32 / 0x66)];
          v22 = *v21;
          v23 = 101 - v32 % 0x66;
        }
        else
        {
          v20 = v19 + 1;
          v21 = &a1[v20 / 0x66];
          v22 = *v21;
          v23 = v20 % 0x66;
        }
        if (v7 == a4)
        {
          v33 = *(_QWORD *)(v5 - 8);
          v5 -= 8;
          v4 = v33 + 4080;
        }
        sub_19C36ED08((uint64_t)a1, (uint64_t *)a2, (uint64_t)v21, (__int128 *)(v22 + 40 * v23), v5, (__int128 *)(v4 - 40));
        return 1;
      case 4:
        v24 = v8 / 40;
        if (v8 >= -39)
        {
          v25 = &a1[(v24 + 1) / 0x66uLL];
          v26 = (uint64_t *)(*v25 + 40 * ((v24 + 1) % 0x66uLL));
          v27 = v24 + 2;
LABEL_27:
          v34 = &a1[v27 / 0x66];
          v35 = *v34;
          v36 = v27 % 0x66;
          goto LABEL_59;
        }
        v25 = &a1[-((100 - v24) / 0x66uLL)];
        v26 = (uint64_t *)(*v25 + 40 * (101 - (100 - v24) % 0x66uLL));
        if ((unint64_t)v8 >= 0xFFFFFFFFFFFFFFB1)
        {
          v27 = 1;
          goto LABEL_27;
        }
        v66 = 99 - v24;
        v34 = &a1[-(v66 / 0x66)];
        v35 = *v34;
        v36 = 101 - v66 % 0x66;
LABEL_59:
        if (v7 == v4)
        {
          v67 = *(_QWORD *)(v5 - 8);
          v5 -= 8;
          v4 = v67 + 4080;
        }
        sub_19C36F02C((uint64_t)a1, a2, (uint64_t)v25, v26, (uint64_t)v34, (uint64_t *)(v35 + 40 * v36), v5, v4 - 40);
        return 1;
      case 5:
        v28 = v8 / 40;
        if (v8 >= -39)
        {
          v29 = &a1[(v28 + 1) / 0x66uLL];
          v30 = (__int128 *)(*v29 + 40 * ((v28 + 1) % 0x66uLL));
          v31 = v28 + 2;
LABEL_30:
          v37 = &a1[v31 / 0x66];
          v38 = (__int128 *)(*v37 + 40 * (v31 % 0x66));
          v39 = v28 + 3;
LABEL_31:
          v40 = &a1[v39 / 0x66];
          v41 = *v40;
          v42 = v39 % 0x66;
          goto LABEL_32;
        }
        v29 = &a1[-((100 - v28) / 0x66uLL)];
        v30 = (__int128 *)(*v29 + 40 * (101 - (100 - v28) % 0x66uLL));
        if ((unint64_t)v8 >= 0xFFFFFFFFFFFFFFB1)
        {
          v31 = 1;
          goto LABEL_30;
        }
        v37 = &a1[-((99 - v28) / 0x66uLL)];
        v38 = (__int128 *)(*v37 + 40 * (101 - (99 - v28) % 0x66uLL));
        if ((unint64_t)v8 >= 0xFFFFFFFFFFFFFF89)
        {
          v39 = 1;
          goto LABEL_31;
        }
        v70 = 98 - v28;
        v40 = &a1[-(v70 / 0x66)];
        v41 = *v40;
        v42 = 101 - v70 % 0x66;
LABEL_32:
        if (v7 == v4)
        {
          v43 = *(_QWORD *)(v5 - 8);
          v5 -= 8;
          v4 = v43 + 4080;
        }
        sub_19C36F250((uint64_t)a1, a2, (uint64_t)v29, v30, (uint64_t)v37, v38, (uint64_t)v40, v41 + 40 * v42, v5, v4 - 40);
        break;
      default:
        v13 = v8 / 40;
        if (v8 <= -80)
        {
          v14 = &a1[-((99 - v13) / 0x66uLL)];
          v15 = *v14 + 40 * (101 - (99 - v13) % 0x66uLL);
          v18 = 100 - v13;
        }
        else
        {
          v14 = &a1[(v13 + 2) / 0x66uLL];
          v15 = *v14 + 40 * ((v13 + 2) % 0x66uLL);
          v16 = __CFADD__(v13, 1);
          v17 = v13 + 1;
          if (!v16)
          {
            v44 = &a1[v17 / 0x66];
            v45 = (__int128 *)(*v44 + 40 * (v17 % 0x66));
            goto LABEL_35;
          }
          v18 = 101;
        }
        v44 = &a1[-(v18 / 0x66)];
        v45 = (__int128 *)(*v44 + 40 * (101 - v18 % 0x66));
LABEL_35:
        sub_19C36ED08((uint64_t)a1, (uint64_t *)a2, (uint64_t)v44, v45, (uint64_t)v14, (__int128 *)v15);
        v46 = v15 - *v14;
        v47 = v46 / 40;
        if (v46 < -39)
        {
          v52 = 100 - v47;
          v49 = &v14[-((100 - v47) / 0x66uLL)];
          v50 = *v49;
          v51 = 101 - v52 % 0x66;
        }
        else
        {
          v48 = v47 + 1;
          v49 = &v14[(v47 + 1) / 0x66uLL];
          v50 = *v49;
          v51 = v48 % 0x66;
        }
        v53 = v50 + 40 * v51;
        if (v53 == v4)
          return 1;
        v54 = 0;
        v71 = v4;
        while (2)
        {
          v55 = v53;
          v56 = v49;
          v57 = *(double *)(v53 + 32);
          if (v57 >= *(double *)(v15 + 32))
            goto LABEL_56;
          v58 = *(_QWORD *)v53;
          *(_QWORD *)v74 = *(_QWORD *)(v53 + 8);
          *(_QWORD *)&v74[7] = *(_QWORD *)(v53 + 15);
          v59 = *(_BYTE *)(v53 + 23);
          *(_QWORD *)(v53 + 8) = 0;
          *(_QWORD *)(v53 + 16) = 0;
          *(_QWORD *)v53 = 0;
          v72 = *(_QWORD *)(v53 + 24);
          v60 = v53;
          do
          {
            v63 = v15;
            if (*(char *)(v60 + 23) < 0)
              operator delete(*(void **)v60);
            v64 = *(_OWORD *)v15;
            *(_QWORD *)(v60 + 16) = *(_QWORD *)(v15 + 16);
            *(_OWORD *)v60 = v64;
            *(_BYTE *)(v15 + 23) = 0;
            *(_BYTE *)v15 = 0;
            *(_OWORD *)(v60 + 24) = *(_OWORD *)(v15 + 24);
            if (v15 == a2)
            {
              v65 = a2;
              goto LABEL_52;
            }
            if (v15 == *v14)
            {
              v61 = *--v14;
              v62 = v61 + 4080;
            }
            else
            {
              v62 = v15;
            }
            v15 = v62 - 40;
            v60 = v63;
          }
          while (v57 < *(double *)(v62 - 8));
          v65 = v63;
LABEL_52:
          if (*(char *)(v65 + 23) < 0)
            operator delete(*(void **)v65);
          *(_QWORD *)v65 = v58;
          *(_QWORD *)(v65 + 8) = *(_QWORD *)v74;
          *(_QWORD *)(v65 + 15) = *(_QWORD *)&v74[7];
          *(_BYTE *)(v65 + 23) = v59;
          *(_QWORD *)(v63 + 24) = v72;
          *(double *)(v65 + 32) = v57;
          if (++v54 != 8)
          {
            v50 = *v56;
            v4 = v71;
LABEL_56:
            v53 = v55 + 40;
            v49 = v56;
            if (v55 + 40 - v50 == 4080)
            {
              v49 = v56 + 1;
              v50 = v56[1];
              v53 = v50;
            }
            v14 = v56;
            v15 = v55;
            if (v53 == v4)
              return 1;
            continue;
          }
          break;
        }
        v69 = v55 + 40;
        if (v55 + 40 - *v56 == 4080)
          v69 = v56[1];
        return v69 == v71;
    }
  }
  return 1;
}

_QWORD *sub_19C36FD2C(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  *a1 = &off_1E3D30190;
  v2 = (_QWORD *)a1[1];
  if (v2)
  {
    v3 = (_QWORD *)a1[2];
    v4 = (void *)a1[1];
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      }
      while (v3 != v2);
      v4 = (void *)a1[1];
    }
    a1[2] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_19C36FDAC(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  *a1 = &off_1E3D30190;
  v2 = (_QWORD *)a1[1];
  if (v2)
  {
    v3 = (_QWORD *)a1[2];
    v4 = (void *)a1[1];
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      }
      while (v3 != v2);
      v4 = (void *)a1[1];
    }
    a1[2] = v2;
    operator delete(v4);
  }
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C36FE3C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD **)(a1 + 16);
  if (*(_QWORD **)(a1 + 8) == v1)
    return 0;
  do
  {
    v3 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*(v1 - 1) + 16))(*(v1 - 1));
    if ((v3 & 1) != 0)
      break;
    v4 = *(_QWORD *)(a1 + 16);
    v6 = *(_QWORD *)(v4 - 8);
    v1 = (_QWORD *)(v4 - 8);
    v5 = v6;
    *v1 = 0;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    *(_QWORD *)(a1 + 16) = v1;
  }
  while (*(_QWORD **)(a1 + 8) != v1);
  return v3;
}

uint64_t sub_19C36FEC0(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 16);
  if (*(_QWORD *)(a1 + 8) == v1)
    return 0;
  else
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 - 8) + 24))(*(_QWORD *)(v1 - 8));
}

char *sub_19C36FEE4(void **a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  void **v14;
  void **v15;
  __int128 v16;
  void **v17;

  v2 = ((_BYTE *)a1[1] - (_BYTE *)*a1) >> 5;
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 59)
    sub_19C2A18E8();
  v5 = (_BYTE *)a1[2] - (_BYTE *)*a1;
  if (v5 >> 4 > v3)
    v3 = v5 >> 4;
  v6 = (unint64_t)v5 >= 0x7FFFFFFFFFFFFFE0;
  v7 = 0x7FFFFFFFFFFFFFFLL;
  if (!v6)
    v7 = v3;
  if (v7 >> 59)
    sub_19C2A143C();
  v9 = 32 * v7;
  v10 = (char *)operator new(32 * v7);
  v11 = &v10[32 * v2];
  v12 = &v10[v9];
  *(_OWORD *)v11 = *(_OWORD *)a2;
  *((_QWORD *)v11 + 2) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *((_QWORD *)v11 + 3) = *(_QWORD *)(a2 + 24);
  v13 = v11 + 32;
  v14 = (void **)*a1;
  v15 = (void **)a1[1];
  if (v15 == *a1)
  {
    *a1 = v11;
    a1[1] = v13;
    a1[2] = v12;
  }
  else
  {
    do
    {
      v16 = *((_OWORD *)v15 - 2);
      *((_QWORD *)v11 - 2) = *(v15 - 2);
      *((_OWORD *)v11 - 2) = v16;
      *(v15 - 3) = 0;
      *(v15 - 2) = 0;
      *(v15 - 4) = 0;
      *((_QWORD *)v11 - 1) = *(v15 - 1);
      v11 -= 32;
      v15 -= 4;
    }
    while (v15 != v14);
    v15 = (void **)*a1;
    v17 = (void **)a1[1];
    *a1 = v11;
    a1[1] = v13;
    a1[2] = v12;
    while (v17 != v15)
    {
      if (*((char *)v17 - 9) < 0)
        operator delete(*(v17 - 4));
      v17 -= 4;
    }
  }
  if (v15)
    operator delete(v15);
  return v13;
}

uint64_t sub_19C370018(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
LABEL_5:
    operator delete(*(void **)(a1 + 8));
    return a1;
  }
  if (*(char *)(a1 + 31) < 0)
    goto LABEL_5;
  return a1;
}

_QWORD *sub_19C370064(_QWORD *a1)
{
  _DWORD *v2;
  int v3;

  *a1 = off_1E3D38550;
  v2 = (_DWORD *)a1[1];
  v3 = v2[14] - 1;
  v2[14] = v3;
  if (!v3)
    (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_19C3700B0(_QWORD *a1)
{
  _DWORD *v1;
  int v2;

  *a1 = off_1E3D38550;
  v1 = (_DWORD *)a1[1];
  v2 = v1[14] - 1;
  v1[14] = v2;
  if (!v2)
    (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C37010C(uint64_t a1)
{
  return *(unsigned int *)(*(_QWORD *)(a1 + 8) + 88);
}

float sub_19C370118@<S0>(uint64_t a1@<X0>, int a2@<W1>, _DWORD *a3@<X8>)
{
  float *v3;
  float result;

  v3 = *(float **)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2);
  result = *v3;
  *a3 = *(_DWORD *)v3;
  return result;
}

uint64_t sub_19C370130(uint64_t a1, int a2)
{
  return (uint64_t)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2) + 32)
                 - *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2) + 24)) >> 4;
}

uint64_t sub_19C37014C(uint64_t a1, int a2)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2) + 8);
}

uint64_t sub_19C370160(uint64_t a1, int a2)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2) + 16);
}

uint64_t sub_19C370174(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v5;
  uint64_t v7;

  if (!a3)
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8), a2);
  v7 = 0;
  v5 = sub_19C373950(a1, a2, &v7);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) & (~v7 | 4) | v7 & v5;
  return v5 & a2;
}

uint64_t sub_19C3701FC(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) + 16;
}

_QWORD *sub_19C370208(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = (_QWORD *)operator new();
  v3 = *(_QWORD *)(a1 + 8);
  ++*(_DWORD *)(v3 + 56);
  *result = &off_1E3D38710;
  result[1] = v3;
  return result;
}

uint64_t sub_19C370258(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v26;
  uint64_t v27;
  void *v28;
  void *v29[2];
  void *v30[2];
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *__p[2];
  char v37;
  uint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v31 = 0u;
  v32 = 0u;
  *(_OWORD *)v29 = 0u;
  *(_OWORD *)v30 = 0u;
  v6 = -1;
  v34 = 0;
  v35 = 0;
  v33 = -1;
  v33 = (*(int (**)(_QWORD *))(*a1 + 16))(a1);
  v34 = -1;
  if ((*(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*a1 + 56))(a1, 1, 0))
  {
    v6 = 0;
LABEL_3:
    v7 = 0;
    v34 = (int)sub_19C3725F8((uint64_t)a1);
    goto LABEL_6;
  }
  v8 = (char *)a2 + *(_QWORD *)(*a2 - 24);
  if ((v8[32] & 5) == 0)
  {
    (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v8 + 5) + 32))(__p, *((_QWORD *)v8 + 5), 0, 1, 16);
    v6 = v38;
    if (v38 != -1)
      goto LABEL_3;
  }
  v7 = 1;
LABEL_6:
  v9 = (*(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*a1 + 56))(a1, 0x3FFFFFFF0004, 0) | 3;
  v37 = 6;
  strcpy((char *)__p, "vector");
  sub_19C372FF8((uint64_t)a1, (uint64_t)a2, (_BYTE *)a3, 2, __p, v9, (uint64_t)&v28 + 4);
  v27 = v6;
  if (v37 < 0)
    operator delete(__p[0]);
  v10 = *(_QWORD *)(a1[1] + 72) - *(_QWORD *)(a1[1] + 64);
  v11 = v10 >> 3;
  if ((int)(v10 >> 3) < 1)
  {
    LODWORD(v11) = 0;
  }
  else
  {
    v12 = 0;
    v13 = (v10 >> 3);
    do
    {
      (*(void (**)(void **__return_ptr, _QWORD *, uint64_t))(*a1 + 24))(&v28, a1, v12);
      LODWORD(__p[0]) = (_DWORD)v28;
      std::ostream::write();
      __p[0] = (void *)(*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 32))(a1, v12);
      std::ostream::write();
      v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[1] + 64) + 8 * v12) + 24);
      v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[1] + 64) + 8 * v12) + 32) - v14;
      if (v15)
      {
        v16 = v15 >> 4;
        if (v16 <= 1)
          v17 = 1;
        else
          v17 = v16;
        v18 = (_DWORD *)(v14 + 8);
        do
        {
          LODWORD(__p[0]) = *(v18 - 2);
          std::ostream::write();
          LODWORD(__p[0]) = *(v18 - 1);
          std::ostream::write();
          LODWORD(__p[0]) = *v18;
          std::ostream::write();
          LODWORD(__p[0]) = v18[1];
          std::ostream::write();
          v18 += 4;
          --v17;
        }
        while (v17);
      }
      ++v12;
    }
    while (v12 != v13);
  }
  std::ostream::flush();
  if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) != 0)
  {
    v37 = 5;
    strcpy((char *)__p, "ERROR");
    v19 = sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)__p, 5);
    sub_19C2A1B24(v19, (uint64_t)": ", 2);
    v20 = sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)"VectorFst::Write: write failed: ", 32);
    v21 = *(char *)(a3 + 23);
    if (v21 >= 0)
      v22 = a3;
    else
      v22 = *(_QWORD *)a3;
    if (v21 >= 0)
      v23 = *(unsigned __int8 *)(a3 + 23);
    else
      v23 = *(_QWORD *)(a3 + 8);
    sub_19C2A1B24(v20, v22, v23);
LABEL_27:
    sub_19C351928();
    if (v37 < 0)
      operator delete(__p[0]);
    v24 = 0;
    goto LABEL_30;
  }
  if (!v7)
  {
    if (v34 == v11)
    {
      v24 = 1;
      goto LABEL_30;
    }
    v37 = 5;
    strcpy((char *)__p, "ERROR");
    v26 = sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)__p, 5);
    sub_19C2A1B24(v26, (uint64_t)": ", 2);
    sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)"Inconsistent number of states observed during write", 51);
    goto LABEL_27;
  }
  v34 = v11;
  v37 = 6;
  strcpy((char *)__p, "vector");
  v24 = sub_19C373344((uint64_t)a1, a2, a3, 2, __p, v9, (uint64_t)&v28 + 4, v27);
  if (v37 < 0)
    operator delete(__p[0]);
LABEL_30:
  if (SHIBYTE(v31) < 0)
  {
    operator delete(v30[1]);
    if ((SHIBYTE(v30[0]) & 0x80000000) == 0)
      return v24;
LABEL_37:
    operator delete(v29[0]);
    return v24;
  }
  if (SHIBYTE(v30[0]) < 0)
    goto LABEL_37;
  return v24;
}

void sub_19C3706D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  sub_19C351928();
  if (a35 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a18 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a18 & 0x80000000) == 0)
LABEL_4:
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(a13);
  _Unwind_Resume(a1);
}

uint64_t sub_19C370778(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
}

uint64_t sub_19C370784(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
}

uint64_t sub_19C370790(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 8) = (*(_QWORD *)(v2 + 72) - *(_QWORD *)(v2 + 64)) >> 3;
  return result;
}

uint64_t sub_19C3707AC(uint64_t result, int a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;

  v3 = *(_QWORD *)(result + 8);
  *a3 = 0;
  v5 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v3 + 64) + 8 * a2) + 24);
  v4 = *v5;
  v6 = (v5[1] - *v5) >> 4;
  if (v5[1] == *v5)
    v4 = 0;
  a3[1] = v4;
  a3[2] = v6;
  a3[3] = 0;
  return result;
}

uint64_t sub_19C3707D8()
{
  return 0;
}

uint64_t sub_19C3707E0(uint64_t a1)
{
  return (*(_QWORD *)(*(_QWORD *)(a1 + 8) + 72) - *(_QWORD *)(*(_QWORD *)(a1 + 8) + 64)) >> 3;
}

uint64_t sub_19C3707F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _DWORD *v5;
  int v6;

  if (a1 != a2)
  {
    v4 = operator new();
    sub_19C371F48(v4, a2);
    v5 = *(_DWORD **)(a1 + 8);
    if (v5)
    {
      v6 = v5[14] - 1;
      v5[14] = v6;
      if (!v6)
        (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    }
    *(_QWORD *)(a1 + 8) = v4;
  }
  return a1;
}

void sub_19C370874(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD355C](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

unint64_t sub_19C370898(uint64_t a1, int a2)
{
  uint64_t v3;
  _DWORD *v5;
  int v6;
  unint64_t result;

  v3 = *(_QWORD *)(a1 + 8);
  if (*(int *)(v3 + 56) >= 2)
  {
    v3 = operator new();
    sub_19C371F48(v3, a1);
    v5 = *(_DWORD **)(a1 + 8);
    if (v5)
    {
      v6 = v5[14] - 1;
      v5[14] = v6;
      if (!v6)
        (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    }
    *(_QWORD *)(a1 + 8) = v3;
  }
  *(_DWORD *)(v3 + 88) = a2;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
  *(_QWORD *)(v3 + 8) = result & 0xCCFFFFF0007 | (((result >> 35) & 1) << 37) | *(_QWORD *)(v3 + 8) & 4;
  return result;
}

void sub_19C370958(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD355C](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

unint64_t sub_19C37097C(uint64_t a1, int a2, float *a3)
{
  uint64_t v5;
  _DWORD *v7;
  int v8;
  float v9;
  float *v10;
  float v11;
  unint64_t result;

  v5 = *(_QWORD *)(a1 + 8);
  if (*(int *)(v5 + 56) >= 2)
  {
    v5 = operator new();
    sub_19C371F48(v5, a1);
    v7 = *(_DWORD **)(a1 + 8);
    if (v7)
    {
      v8 = v7[14] - 1;
      v7[14] = v8;
      if (!v8)
        (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
    }
    *(_QWORD *)(a1 + 8) = v5;
  }
  v9 = *a3;
  v10 = *(float **)(*(_QWORD *)(v5 + 64) + 8 * a2);
  v11 = *v10;
  *v10 = *a3;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
  if (v11 != 3.4028e38 && v11 != 0.0)
    result &= ~0x100000000uLL;
  if (v9 != 3.4028e38 && v9 != 0.0)
    result = result & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
  *(_QWORD *)(v5 + 8) = *(_QWORD *)(v5 + 8) & 4 | result & 0x3FFFFFF0007;
  return result;
}

void sub_19C370AE0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD355C](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

_DWORD *sub_19C370B04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _DWORD *result;
  _DWORD *v8;
  uint64_t v9;
  int v10;

  v6 = a3 & 4;
  result = (_DWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8), v6);
  v8 = (_DWORD *)(v6 & a2);
  v9 = *(_QWORD *)(a1 + 8);
  if (result != v8 && *(int *)(v9 + 56) >= 2)
  {
    v9 = operator new();
    sub_19C371F48(v9, a1);
    result = *(_DWORD **)(a1 + 8);
    if (result)
    {
      v10 = result[14] - 1;
      result[14] = v10;
      if (!v10)
        result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    }
    *(_QWORD *)(a1 + 8) = v9;
  }
  *(_QWORD *)(v9 + 8) = *(_QWORD *)(v9 + 8) & (~a3 | 4) | a3 & a2;
  return result;
}

void sub_19C370BCC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD355C](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

uint64_t sub_19C370BF0(uint64_t a1)
{
  uint64_t v1;
  _DWORD *v3;
  int v4;
  uint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (*(int *)(v1 + 56) >= 2)
  {
    v1 = operator new();
    sub_19C371F48(v1, a1);
    v3 = *(_DWORD **)(a1 + 8);
    if (v3)
    {
      v4 = v3[14] - 1;
      v3[14] = v4;
      if (!v4)
        (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    }
    *(_QWORD *)(a1 + 8) = v1;
  }
  v5 = sub_19C372700((_QWORD *)v1);
  *(_QWORD *)(v1 + 8) = *(_QWORD *)(v1 + 8) & 4 | (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1) & 0x2AFFFFFF0007;
  return v5;
}

void sub_19C370CA8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD355C](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

void sub_19C370CCC(uint64_t a1, int a2, int *a3)
{
  uint64_t v5;
  _DWORD *v7;
  int v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;
  float v16;
  int v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  BOOL v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  float *v31;
  unint64_t v32;
  char *v33;

  v5 = *(_QWORD *)(a1 + 8);
  if (*(int *)(v5 + 56) >= 2)
  {
    v5 = operator new();
    sub_19C371F48(v5, a1);
    v7 = *(_DWORD **)(a1 + 8);
    if (v7)
    {
      v8 = v7[14] - 1;
      v7[14] = v8;
      if (!v8)
        (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
    }
    *(_QWORD *)(a1 + 8) = v5;
  }
  v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 64) + 8 * a2) + 32);
  if (v9 == *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 64) + 8 * a2) + 24))
    v10 = 0;
  else
    v10 = (unsigned int *)(v9 - 16);
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
  v13 = *a3;
  v12 = a3[1];
  v14 = v11 & 0xFFFFFFFFFFFCFFFFLL | 0x20000;
  if (*a3 == v12)
    v14 = v11;
  v15 = v14 & 0xFFFFFFFFFCFFFFFFLL | 0x1000000;
  if (!v12)
    v15 = v14 & 0xFFFFFFFFFC3FFFFFLL | 0x1400000;
  if (!v13)
    v14 = v15;
  if (!v12)
    v14 = v14 & 0xFFFFFFFFF3FFFFFFLL | 0x4000000;
  if (v10)
  {
    if (*v10 > v13)
      v14 = v14 & 0xFFFFFFFFCFFFFFFFLL | 0x20000000;
    if (v10[1] > v12)
      v14 = v14 & 0xFFFFFFFF3FFFFFFFLL | 0x80000000;
  }
  v16 = *((float *)a3 + 2);
  if (v16 != 3.4028e38 && v16 != 0.0)
    v14 = v14 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
  v17 = a3[3];
  if (v17 <= a2)
    v14 = v14 & 0xFFFFFF3FFFFFFFFFLL | 0x8000000000;
  if ((v14 & 0x4000000000) != 0)
    v18 = v14 & 0x5D7FFEB0007 | 0x2800000000;
  else
    v18 = v14 & 0x5D7FFEB0007;
  *(_QWORD *)(v5 + 8) = *(_QWORD *)(v5 + 8) & 4 | v18;
  v19 = *(_QWORD **)(*(_QWORD *)(v5 + 64) + 8 * a2);
  if (v13)
  {
    if (v12)
      goto LABEL_32;
  }
  else
  {
    ++v19[1];
    if (v12)
      goto LABEL_32;
  }
  ++v19[2];
LABEL_32:
  v21 = (char *)v19[4];
  v20 = v19[5];
  if ((unint64_t)v21 >= v20)
  {
    v23 = (char *)v19[3];
    v24 = (v21 - v23) >> 4;
    v25 = v24 + 1;
    if ((unint64_t)(v24 + 1) >> 60)
      sub_19C2A18E8();
    v26 = v20 - (_QWORD)v23;
    if (v26 >> 3 > v25)
      v25 = v26 >> 3;
    v27 = (unint64_t)v26 >= 0x7FFFFFFFFFFFFFF0;
    v28 = 0xFFFFFFFFFFFFFFFLL;
    if (!v27)
      v28 = v25;
    if (v28 >> 60)
      sub_19C2A143C();
    v29 = 16 * v28;
    v30 = (char *)operator new(16 * v28);
    v31 = (float *)&v30[16 * v24];
    *(_QWORD *)v31 = *(_QWORD *)a3;
    v31[2] = v16;
    *((_DWORD *)v31 + 3) = v17;
    v22 = (char *)(v31 + 4);
    if (v21 != v23)
    {
      v32 = 0;
      do
      {
        v33 = (char *)&v31[v32 / 4];
        *((_QWORD *)v33 - 2) = *(_QWORD *)&v21[v32 - 16];
        *((_DWORD *)v33 - 2) = *(_DWORD *)&v21[v32 - 8];
        *((_DWORD *)v33 - 1) = *(_DWORD *)&v21[v32 - 4];
        v32 -= 16;
      }
      while (&v21[v32] != v23);
      v31 = (float *)((char *)v31 + v32);
    }
    v19[3] = v31;
    v19[4] = v22;
    v19[5] = &v30[v29];
    if (v23)
      operator delete(v23);
  }
  else
  {
    *(_QWORD *)v21 = *(_QWORD *)a3;
    *((_DWORD *)v21 + 2) = a3[2];
    *((_DWORD *)v21 + 3) = a3[3];
    v22 = v21 + 16;
  }
  v19[4] = v22;
}

void sub_19C370FC8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD355C](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

uint64_t sub_19C370FEC(uint64_t a1, char **a2)
{
  uint64_t v3;
  _DWORD *v5;
  int v6;
  char *v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  char *v18;
  _QWORD *v19;
  void *v20;
  uint64_t v21;
  BOOL v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  _BYTE *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int64x2_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  int *v42;
  unint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  int64x2_t v47;
  uint64_t v48;
  _DWORD *v49;
  uint64_t v50;
  char *v51;
  size_t v52;
  char *v53;
  char *v54;
  unint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 8);
  if (*(int *)(v3 + 56) >= 2)
  {
    v3 = operator new();
    sub_19C371F48(v3, a1);
    v5 = *(_DWORD **)(a1 + 8);
    if (v5)
    {
      v6 = v5[14] - 1;
      v5[14] = v6;
      if (!v6)
        (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    }
    *(_QWORD *)(a1 + 8) = v3;
  }
  v8 = *(char **)(v3 + 64);
  v7 = *(char **)(v3 + 72);
  v9 = v7 - v8;
  v10 = (v7 - v8) >> 3;
  if (v7 == v8)
  {
    v11 = 0;
  }
  else
  {
    if ((v9 & 0x8000000000000000) != 0)
      sub_19C2A18E8();
    v11 = operator new(v9 >> 1);
    bzero(v11, 4 * v10);
  }
  v12 = *a2;
  v13 = a2[1] - *a2;
  if (v13)
  {
    v14 = v13 >> 2;
    if (v14 <= 1)
      v14 = 1;
    do
    {
      v15 = *(int *)v12;
      v12 += 4;
      *((_DWORD *)v11 + v15) = -1;
      --v14;
    }
    while (v14);
  }
  if (v7 == v8)
  {
    v17 = 0;
    v18 = v7;
  }
  else
  {
    v16 = 0;
    v17 = 0;
    v7 = v8;
    do
    {
      if (*((_DWORD *)v11 + v16) == -1)
      {
        v19 = *(_QWORD **)&v7[8 * v16];
        if (v19)
        {
          v20 = (void *)v19[3];
          if (v20)
          {
            v19[4] = v20;
            operator delete(v20);
          }
          operator delete(v19);
        }
      }
      else
      {
        *((_DWORD *)v11 + v16) = v17;
        if (v16 != v17)
          *(_QWORD *)&v7[8 * v17] = *(_QWORD *)&v7[8 * v16];
        ++v17;
      }
      ++v16;
      v7 = *(char **)(v3 + 64);
      v18 = *(char **)(v3 + 72);
      v10 = (v18 - v7) >> 3;
    }
    while (v10 > v16);
  }
  v21 = v17;
  v22 = v17 >= v10;
  v23 = v17 - v10;
  if (v23 == 0 || !v22)
  {
    if (!v22)
    {
      v32 = &v7[8 * v21];
      *(_QWORD *)(v3 + 72) = v32;
      if (v32 == v7)
        goto LABEL_77;
      goto LABEL_43;
    }
    goto LABEL_42;
  }
  v25 = *(char **)(v3 + 72);
  v24 = *(_QWORD *)(v3 + 80);
  if (v23 <= (v24 - (uint64_t)v25) >> 3)
  {
    bzero(*(void **)(v3 + 72), 8 * v23);
    v18 = &v25[8 * v23];
    *(_QWORD *)(v3 + 72) = v18;
    v7 = *(char **)(v3 + 64);
LABEL_42:
    if (v18 == v7)
      goto LABEL_77;
    goto LABEL_43;
  }
  v26 = *(_BYTE **)(v3 + 64);
  v27 = (v25 - v26) >> 3;
  v28 = v27 + v23;
  if ((v27 + v23) >> 61)
    sub_19C2A18E8();
  v29 = v24 - (_QWORD)v26;
  if (v29 >> 2 > v28)
    v28 = v29 >> 2;
  if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8)
    v30 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v30 = v28;
  if (v30)
  {
    if (v30 >> 61)
      sub_19C2A143C();
    v31 = (char *)operator new(8 * v30);
  }
  else
  {
    v31 = 0;
  }
  v51 = &v31[8 * v27];
  v52 = 8 * v23;
  v53 = &v31[8 * v30];
  bzero(v51, v52);
  v54 = &v51[v52];
  if (v25 != v26)
  {
    v55 = v25 - v26 - 8;
    if (v55 < 0x58)
      goto LABEL_87;
    if ((unint64_t)(v26 - v31) < 0x20)
      goto LABEL_87;
    v56 = (v55 >> 3) + 1;
    v57 = &v31[8 * v27 - 16];
    v58 = v25 - 16;
    v59 = v56 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v60 = *(_OWORD *)v58;
      *((_OWORD *)v57 - 1) = *((_OWORD *)v58 - 1);
      *(_OWORD *)v57 = v60;
      v57 -= 32;
      v58 -= 32;
      v59 -= 4;
    }
    while (v59);
    v51 -= 8 * (v56 & 0x3FFFFFFFFFFFFFFCLL);
    v25 -= 8 * (v56 & 0x3FFFFFFFFFFFFFFCLL);
    if (v56 != (v56 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_87:
      do
      {
        v61 = *((_QWORD *)v25 - 1);
        v25 -= 8;
        *((_QWORD *)v51 - 1) = v61;
        v51 -= 8;
      }
      while (v25 != v26);
    }
    v25 = *(char **)(v3 + 64);
  }
  *(_QWORD *)(v3 + 64) = v51;
  *(_QWORD *)(v3 + 72) = v54;
  *(_QWORD *)(v3 + 80) = v53;
  if (v25)
  {
    operator delete(v25);
    v54 = *(char **)(v3 + 72);
  }
  v7 = *(char **)(v3 + 64);
  if (v54 != v7)
  {
LABEL_43:
    v33 = 0;
    while (1)
    {
      v34 = *(_QWORD *)&v7[8 * v33];
      v35 = *(_QWORD *)(v34 + 24);
      v36 = *(_QWORD *)(v34 + 32);
      v37 = *(int64x2_t *)(v34 + 8);
      v38 = v36 - v35;
      v39 = v36 == v35 ? 0 : *(_QWORD *)(v34 + 24);
      if (v36 == v35)
      {
        v41 = 0;
        v43 = v38 >> 4;
      }
      else
      {
        v40 = 0;
        v41 = 0;
        v42 = (int *)(v39 + 12);
        do
        {
          v44 = *((_DWORD *)v11 + *v42);
          if (v44 == -1)
          {
            v46 = *(_QWORD *)(v42 - 3);
            v47.i64[0] = v46;
            v47.i64[1] = HIDWORD(v46);
            v37 = vaddq_s64(v37, vceqzq_s64(v47));
          }
          else
          {
            *v42 = v44;
            if (v40 != v41)
            {
              v45 = v39 + 16 * v41;
              *(_QWORD *)v45 = *(_QWORD *)(v42 - 3);
              *(_DWORD *)(v45 + 8) = *(v42 - 1);
              *(_DWORD *)(v45 + 12) = v44;
              v7 = *(char **)(v3 + 64);
            }
            ++v41;
          }
          ++v40;
          v34 = *(_QWORD *)&v7[8 * v33];
          v36 = *(_QWORD *)(v34 + 32);
          v43 = (v36 - *(_QWORD *)(v34 + 24)) >> 4;
          v42 += 4;
        }
        while (v40 < v43);
      }
      v48 = v43 - v41;
      if (v48)
        break;
LABEL_45:
      *(int64x2_t *)(v34 + 8) = v37;
      if (++v33 >= (unint64_t)((uint64_t)(*(_QWORD *)(v3 + 72) - (_QWORD)v7) >> 3))
        goto LABEL_77;
    }
    v49 = (_DWORD *)(v36 - 16);
    v50 = v48;
    while (1)
    {
      if (*v49)
      {
        if (!v49[1])
LABEL_64:
          --*(_QWORD *)(v34 + 16);
      }
      else
      {
        --*(_QWORD *)(v34 + 8);
        if (!v49[1])
          goto LABEL_64;
      }
      v49 -= 4;
      if (!--v50)
      {
        *(_QWORD *)(v34 + 32) = v36 - 16 * v48;
        v34 = *(_QWORD *)&v7[8 * v33];
        goto LABEL_45;
      }
    }
  }
LABEL_77:
  v62 = *(int *)(v3 + 88);
  if ((_DWORD)v62 != -1)
  {
    *(_DWORD *)(v3 + 88) = *((_DWORD *)v11 + v62);
LABEL_80:
    operator delete(v11);
    goto LABEL_81;
  }
  if (v11)
    goto LABEL_80;
LABEL_81:
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
  *(_QWORD *)(v3 + 8) = *(_QWORD *)(v3 + 8) & 4 | result & 0x6A5A950007;
  return result;
}

void sub_19C371494(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD355C](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

void sub_19C3714B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;

  if (v11)
  {
    operator delete(v11);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C3714EC(uint64_t a1)
{
  uint64_t v1;
  _DWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  void *v9;
  uint64_t result;

  v1 = *(_QWORD *)(a1 + 8);
  if (*(int *)(v1 + 56) >= 2)
  {
    v1 = operator new();
    sub_19C371F48(v1, a1);
    v3 = *(_DWORD **)(a1 + 8);
    if (v3)
    {
      v4 = v3[14] - 1;
      v3[14] = v4;
      if (!v4)
        (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    }
    *(_QWORD *)(a1 + 8) = v1;
  }
  v6 = *(_QWORD *)(v1 + 64);
  v5 = *(_QWORD *)(v1 + 72);
  if (v5 == v6)
  {
    v6 = *(_QWORD *)(v1 + 72);
  }
  else
  {
    v7 = 0;
    do
    {
      v8 = *(_QWORD **)(v6 + 8 * v7);
      if (v8)
      {
        v9 = (void *)v8[3];
        if (v9)
        {
          v8[4] = v9;
          operator delete(v9);
        }
        operator delete(v8);
        v6 = *(_QWORD *)(v1 + 64);
        v5 = *(_QWORD *)(v1 + 72);
      }
      ++v7;
    }
    while (v7 < (v5 - v6) >> 3);
  }
  *(_QWORD *)(v1 + 72) = v6;
  *(_DWORD *)(v1 + 88) = -1;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  *(_QWORD *)(v1 + 8) = (*(_DWORD *)(v1 + 8) | result) & 4 | 0x156A5A950003;
  return result;
}

void sub_19C3715F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD355C](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

uint64_t sub_19C37161C(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;
  _DWORD *v7;
  int v8;
  _QWORD *v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t result;

  v5 = *(_QWORD *)(a1 + 8);
  if (*(int *)(v5 + 56) >= 2)
  {
    v5 = operator new();
    sub_19C371F48(v5, a1);
    v7 = *(_DWORD **)(a1 + 8);
    if (v7)
    {
      v8 = v7[14] - 1;
      v7[14] = v8;
      if (!v8)
        (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
    }
    *(_QWORD *)(a1 + 8) = v5;
  }
  if (a3)
  {
    v9 = *(_QWORD **)(*(_QWORD *)(v5 + 64) + 8 * a2);
    v10 = v9[4];
    v11 = (_DWORD *)(v10 - 16);
    v12 = a3;
    while (1)
    {
      if (*v11)
      {
        if (!v11[1])
          goto LABEL_13;
      }
      else
      {
        --v9[1];
        if (!v11[1])
LABEL_13:
          --v9[2];
      }
      v11 -= 4;
      if (!--v12)
      {
        v9[4] = v10 - 16 * a3;
        break;
      }
    }
  }
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
  *(_QWORD *)(v5 + 8) = *(_QWORD *)(v5 + 8) & 4 | result & 0xA6A5A950007;
  return result;
}

void sub_19C37173C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD355C](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

uint64_t sub_19C371760(uint64_t a1, int a2)
{
  uint64_t v3;
  _DWORD *v5;
  int v6;
  _QWORD *v7;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 8);
  if (*(int *)(v3 + 56) >= 2)
  {
    v3 = operator new();
    sub_19C371F48(v3, a1);
    v5 = *(_DWORD **)(a1 + 8);
    if (v5)
    {
      v6 = v5[14] - 1;
      v5[14] = v6;
      if (!v6)
        (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    }
    *(_QWORD *)(a1 + 8) = v3;
  }
  v7 = *(_QWORD **)(*(_QWORD *)(v3 + 64) + 8 * a2);
  v7[1] = 0;
  v7[2] = 0;
  v7[4] = v7[3];
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
  *(_QWORD *)(v3 + 8) = *(_QWORD *)(v3 + 8) & 4 | result & 0xA6A5A950007;
  return result;
}

void sub_19C371828(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD355C](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

void sub_19C37184C(uint64_t a1, size_t __sz)
{
  int v2;
  uint64_t v3;
  _DWORD *v5;
  int v6;
  _BYTE *v7;
  _BYTE *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  __int128 *v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;

  v2 = __sz;
  v3 = *(_QWORD *)(a1 + 8);
  if (*(int *)(v3 + 56) >= 2)
  {
    v3 = operator new();
    sub_19C371F48(v3, a1);
    v5 = *(_DWORD **)(a1 + 8);
    if (v5)
    {
      v6 = v5[14] - 1;
      v5[14] = v6;
      if (!v6)
        (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    }
    *(_QWORD *)(a1 + 8) = v3;
  }
  v7 = *(_BYTE **)(v3 + 64);
  if (v2 > (unint64_t)((uint64_t)(*(_QWORD *)(v3 + 80) - (_QWORD)v7) >> 3))
  {
    if (v2 < 0)
      sub_19C2A18E8();
    v8 = *(_BYTE **)(v3 + 72);
    v9 = (char *)operator new(8 * v2);
    v10 = v8 - v7;
    v11 = &v9[(v8 - v7) & 0xFFFFFFFFFFFFFFF8];
    v12 = v11;
    if (v8 == v7)
      goto LABEL_16;
    if ((unint64_t)(v10 - 8) >= 0x58)
    {
      v12 = &v9[(v8 - v7) & 0xFFFFFFFFFFFFFFF8];
      if ((unint64_t)(v8 - &v9[v10 & 0xFFFFFFFFFFFFFFF8]) >= 0x20)
      {
        v13 = v10 >> 3;
        v14 = ((unint64_t)(v10 - 8) >> 3) + 1;
        v15 = &v9[8 * v13 - 16];
        v16 = (__int128 *)(v8 - 16);
        v17 = v14 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v18 = *v16;
          *((_OWORD *)v15 - 1) = *(v16 - 1);
          *(_OWORD *)v15 = v18;
          v15 -= 32;
          v16 -= 2;
          v17 -= 4;
        }
        while (v17);
        v12 = &v11[-8 * (v14 & 0x3FFFFFFFFFFFFFFCLL)];
        v8 -= 8 * (v14 & 0x3FFFFFFFFFFFFFFCLL);
        if (v14 == (v14 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_16;
      }
    }
    else
    {
      v12 = &v9[(v8 - v7) & 0xFFFFFFFFFFFFFFF8];
    }
    do
    {
      v19 = *((_QWORD *)v8 - 1);
      v8 -= 8;
      *((_QWORD *)v12 - 1) = v19;
      v12 -= 8;
    }
    while (v8 != v7);
LABEL_16:
    *(_QWORD *)(v3 + 64) = v12;
    *(_QWORD *)(v3 + 72) = v11;
    *(_QWORD *)(v3 + 80) = &v9[8 * v2];
    if (v7)
      operator delete(v7);
  }
}

void sub_19C3719C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD355C](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

void sub_19C3719EC(uint64_t a1, int a2, size_t __sz)
{
  uint64_t v5;
  _DWORD *v7;
  int v8;
  _QWORD *v9;
  _BYTE *v10;
  _BYTE *v11;
  size_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;

  v5 = *(_QWORD *)(a1 + 8);
  if (*(int *)(v5 + 56) >= 2)
  {
    v5 = operator new();
    sub_19C371F48(v5, a1);
    v7 = *(_DWORD **)(a1 + 8);
    if (v7)
    {
      v8 = v7[14] - 1;
      v7[14] = v8;
      if (!v8)
        (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
    }
    *(_QWORD *)(a1 + 8) = v5;
  }
  v9 = *(_QWORD **)(*(_QWORD *)(v5 + 64) + 8 * a2);
  v10 = (_BYTE *)v9[3];
  if (__sz > (uint64_t)(v9[5] - (_QWORD)v10) >> 4)
  {
    if (__sz >> 60)
      sub_19C2A18E8();
    v11 = (_BYTE *)v9[4];
    v12 = 16 * __sz;
    v13 = (char *)operator new(v12);
    v14 = &v13[v11 - v10];
    v15 = v14;
    if (v11 != v10)
    {
      v16 = 0;
      do
      {
        v17 = &v14[v16];
        *((_QWORD *)v17 - 2) = *(_QWORD *)&v11[v16 - 16];
        *((_DWORD *)v17 - 2) = *(_DWORD *)&v11[v16 - 8];
        *((_DWORD *)v17 - 1) = *(_DWORD *)&v11[v16 - 4];
        v16 -= 16;
      }
      while (&v11[v16] != v10);
      v15 = &v14[v16];
    }
    v9[3] = v15;
    v9[4] = v14;
    v9[5] = &v13[v12];
    if (v10)
      operator delete(v10);
  }
}

void sub_19C371B18(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD355C](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

uint64_t sub_19C371B3C(uint64_t a1)
{
  uint64_t v1;
  _DWORD *v3;
  int v4;

  v1 = *(_QWORD *)(a1 + 8);
  if (*(int *)(v1 + 56) >= 2)
  {
    v1 = operator new();
    sub_19C371F48(v1, a1);
    v3 = *(_DWORD **)(a1 + 8);
    if (v3)
    {
      v4 = v3[14] - 1;
      v3[14] = v4;
      if (!v4)
        (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    }
    *(_QWORD *)(a1 + 8) = v1;
  }
  return *(_QWORD *)(v1 + 40);
}

void sub_19C371BB8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD355C](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

uint64_t sub_19C371BDC(uint64_t a1)
{
  uint64_t v1;
  _DWORD *v3;
  int v4;

  v1 = *(_QWORD *)(a1 + 8);
  if (*(int *)(v1 + 56) >= 2)
  {
    v1 = operator new();
    sub_19C371F48(v1, a1);
    v3 = *(_DWORD **)(a1 + 8);
    if (v3)
    {
      v4 = v3[14] - 1;
      v3[14] = v4;
      if (!v4)
        (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    }
    *(_QWORD *)(a1 + 8) = v1;
  }
  return *(_QWORD *)(v1 + 48);
}

void sub_19C371C58(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD355C](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

uint64_t sub_19C371C7C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _DWORD *v5;
  int v6;
  uint64_t v7;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 8);
  if (*(int *)(v3 + 56) >= 2)
  {
    v3 = operator new();
    sub_19C371F48(v3, a1);
    v5 = *(_DWORD **)(a1 + 8);
    if (v5)
    {
      v6 = v5[14] - 1;
      v5[14] = v6;
      if (!v6)
        (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    }
    *(_QWORD *)(a1 + 8) = v3;
  }
  v7 = *(_QWORD *)(v3 + 40);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  if (a2)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  else
    result = 0;
  *(_QWORD *)(v3 + 40) = result;
  return result;
}

void sub_19C371D34(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD355C](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

uint64_t sub_19C371D58(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _DWORD *v5;
  int v6;
  uint64_t v7;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 8);
  if (*(int *)(v3 + 56) >= 2)
  {
    v3 = operator new();
    sub_19C371F48(v3, a1);
    v5 = *(_DWORD **)(a1 + 8);
    if (v5)
    {
      v6 = v5[14] - 1;
      v5[14] = v6;
      if (!v6)
        (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    }
    *(_QWORD *)(a1 + 8) = v3;
  }
  v7 = *(_QWORD *)(v3 + 48);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  if (a2)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  else
    result = 0;
  *(_QWORD *)(v3 + 48) = result;
  return result;
}

void sub_19C371E10(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD355C](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

uint64_t sub_19C371E34(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  int v9;

  result = operator new();
  v7 = result;
  *(_QWORD *)result = &off_1E3D38378;
  *(_QWORD *)(result + 24) = 0;
  v8 = *(_QWORD *)(a1 + 8);
  if (*(int *)(v8 + 56) >= 2)
  {
    v8 = operator new();
    sub_19C371F48(v8, a1);
    result = *(_QWORD *)(a1 + 8);
    if (result)
    {
      v9 = *(_DWORD *)(result + 56) - 1;
      *(_DWORD *)(result + 56) = v9;
      if (!v9)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
    *(_QWORD *)(a1 + 8) = v8;
  }
  *(_QWORD *)(v7 + 8) = *(_QWORD *)(*(_QWORD *)(v8 + 64) + 8 * a2);
  *(_QWORD *)(v7 + 16) = v8 + 8;
  *a3 = v7;
  return result;
}

void sub_19C371F04(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  MEMORY[0x1A1AD355C](v2, 0x10B3C40637D23BDLL);
  MEMORY[0x1A1AD355C](v1, 0x10B1C402DF695F1);
  _Unwind_Resume(a1);
}

uint64_t sub_19C371F48(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  __int128 *v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _BYTE *v29;
  _BYTE *v30;
  char *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  _DWORD *v36;
  unint64_t v37;
  _QWORD *v38;
  unint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  _QWORD v56[3];
  _DWORD *v57;
  unint64_t v58;
  int v59;
  uint64_t v60;
  int v61;
  unsigned int v62;

  *(_QWORD *)(a1 + 40) = 0;
  v2 = (uint64_t *)(a1 + 40);
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  v3 = (_QWORD *)(a1 + 64);
  *(_DWORD *)(a1 + 56) = 1;
  *(_DWORD *)(a1 + 88) = -1;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)a1 = &off_1E3D37E70;
  *(_QWORD *)(a1 + 8) = 0;
  strcpy((char *)(a1 + 16), "vector");
  *(_BYTE *)(a1 + 39) = 6;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 96))(a2);
  if (*v2)
    (*(void (**)(uint64_t))(*(_QWORD *)*v2 + 8))(*v2);
  if (v4)
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  else
    v5 = 0;
  *v2 = v5;
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 104))(a2);
  v7 = *(_QWORD *)(a1 + 48);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  if (v6)
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
  else
    v8 = 0;
  *(_QWORD *)(a1 + 48) = v8;
  *(_DWORD *)(a1 + 88) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  if (!(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 56))(a2, 1, 0))
    goto LABEL_24;
  v9 = sub_19C3725F8(a2);
  v10 = v9;
  v11 = *(_BYTE **)(a1 + 64);
  if (v9 <= (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 80) - (_QWORD)v11) >> 3))
    goto LABEL_24;
  if (v9 < 0)
    sub_19C2A18E8();
  v12 = *(_BYTE **)(a1 + 72);
  v13 = (char *)operator new(8 * v9);
  v14 = v12 - v11;
  v15 = &v13[(v12 - v11) & 0xFFFFFFFFFFFFFFF8];
  v16 = v15;
  if (v12 != v11)
  {
    if ((unint64_t)(v14 - 8) < 0x58)
    {
      v16 = &v13[(v12 - v11) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_21:
        v23 = *((_QWORD *)v12 - 1);
        v12 -= 8;
        *((_QWORD *)v16 - 1) = v23;
        v16 -= 8;
      }
      while (v12 != v11);
      goto LABEL_22;
    }
    v16 = &v13[(v12 - v11) & 0xFFFFFFFFFFFFFFF8];
    if (v12 - v13 - (v14 & 0xFFFFFFFFFFFFFFF8) < 0x20)
      goto LABEL_21;
    v17 = v14 >> 3;
    v18 = ((unint64_t)(v14 - 8) >> 3) + 1;
    v19 = &v13[8 * v17 - 16];
    v20 = (__int128 *)(v12 - 16);
    v21 = v18 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v22 = *v20;
      *((_OWORD *)v19 - 1) = *(v20 - 1);
      *(_OWORD *)v19 = v22;
      v19 -= 32;
      v20 -= 2;
      v21 -= 4;
    }
    while (v21);
    v16 = &v15[-8 * (v18 & 0x3FFFFFFFFFFFFFFCLL)];
    v12 -= 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
    if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_21;
  }
LABEL_22:
  *(_QWORD *)(a1 + 64) = v16;
  *(_QWORD *)(a1 + 72) = v15;
  *(_QWORD *)(a1 + 80) = &v13[8 * v10];
  if (v11)
    operator delete(v11);
LABEL_24:
  v62 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 112))(a2, &v60);
  while (1)
  {
    if (!v60)
    {
      v24 = v62;
      if ((int)v62 >= v61)
        goto LABEL_81;
      goto LABEL_33;
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v60 + 16))(v60))
      break;
    if (v60)
      v24 = (*(uint64_t (**)(void))(*(_QWORD *)v60 + 24))();
    else
      v24 = v62;
LABEL_33:
    sub_19C372700((_QWORD *)a1);
    (*(void (**)(int *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(&v59, a2, v24);
    **(_DWORD **)(*v3 + 8 * (int)v24) = v59;
    v25 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v24);
    v26 = v25;
    v27 = (int)v24;
    v28 = *(_QWORD **)(*v3 + 8 * (int)v24);
    v29 = (_BYTE *)v28[3];
    if (v25 > (uint64_t)(v28[5] - (_QWORD)v29) >> 4)
    {
      if (v25 >> 60)
        sub_19C2A18E8();
      v30 = (_BYTE *)v28[4];
      v31 = (char *)operator new(16 * v25);
      v32 = &v31[v30 - v29];
      v33 = v32;
      if (v30 != v29)
      {
        v34 = 0;
        do
        {
          v35 = &v32[v34];
          *((_QWORD *)v35 - 2) = *(_QWORD *)&v30[v34 - 16];
          *((_DWORD *)v35 - 2) = *(_DWORD *)&v30[v34 - 8];
          *((_DWORD *)v35 - 1) = *(_DWORD *)&v30[v34 - 4];
          v34 -= 16;
        }
        while (&v30[v34] != v29);
        v33 = &v32[v34];
      }
      v28[3] = v33;
      v28[4] = v32;
      v28[5] = &v31[16 * v26];
      if (v29)
        operator delete(v29);
    }
    v58 = 0;
    (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a2 + 120))(a2, v24, v56);
    while (1)
    {
      if (!v56[0])
      {
        v37 = v58;
        if (v58 >= v56[2])
          goto LABEL_75;
        goto LABEL_50;
      }
      if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v56[0] + 16))(v56[0]))
        break;
      if (v56[0])
      {
        v36 = (_DWORD *)(*(uint64_t (**)(void))(*(_QWORD *)v56[0] + 24))();
        goto LABEL_51;
      }
      v37 = v58;
LABEL_50:
      v36 = (_DWORD *)(v56[1] + 16 * v37);
LABEL_51:
      v38 = *(_QWORD **)(*v3 + 8 * v27);
      if (*v36)
      {
        if (v36[1])
          goto LABEL_53;
      }
      else
      {
        ++v38[1];
        if (v36[1])
          goto LABEL_53;
      }
      ++v38[2];
LABEL_53:
      v40 = (char *)v38[4];
      v39 = v38[5];
      if ((unint64_t)v40 >= v39)
      {
        v42 = (char *)v38[3];
        v43 = (v40 - v42) >> 4;
        v44 = v43 + 1;
        if ((unint64_t)(v43 + 1) >> 60)
          sub_19C2A18E8();
        v45 = v39 - (_QWORD)v42;
        if (v45 >> 3 > v44)
          v44 = v45 >> 3;
        if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF0)
          v46 = 0xFFFFFFFFFFFFFFFLL;
        else
          v46 = v44;
        if (v46 >> 60)
          sub_19C2A143C();
        v47 = (char *)operator new(16 * v46);
        v48 = &v47[16 * v43];
        *(_QWORD *)v48 = *(_QWORD *)v36;
        *((_DWORD *)v48 + 2) = v36[2];
        *((_DWORD *)v48 + 3) = v36[3];
        if (v40 == v42)
        {
          v51 = &v47[16 * v43];
        }
        else
        {
          v49 = 0;
          do
          {
            v50 = &v48[v49];
            *((_QWORD *)v50 - 2) = *(_QWORD *)&v40[v49 - 16];
            *((_DWORD *)v50 - 2) = *(_DWORD *)&v40[v49 - 8];
            *((_DWORD *)v50 - 1) = *(_DWORD *)&v40[v49 - 4];
            v49 -= 16;
          }
          while (&v40[v49] != v42);
          v51 = &v48[v49];
        }
        v52 = &v47[16 * v46];
        v41 = v48 + 16;
        v38[3] = v51;
        v38[4] = v48 + 16;
        v38[5] = v52;
        if (v42)
          operator delete(v42);
      }
      else
      {
        *(_QWORD *)v40 = *(_QWORD *)v36;
        *((_DWORD *)v40 + 2) = v36[2];
        *((_DWORD *)v40 + 3) = v36[3];
        v41 = v40 + 16;
      }
      v38[4] = v41;
      if (v56[0])
        (*(void (**)(_QWORD))(*(_QWORD *)v56[0] + 32))(v56[0]);
      else
        ++v58;
    }
    if (v56[0])
    {
      (*(void (**)(void))(*(_QWORD *)v56[0] + 8))();
      goto LABEL_77;
    }
LABEL_75:
    if (v57)
      --*v57;
LABEL_77:
    if (v60)
      (*(void (**)(uint64_t))(*(_QWORD *)v60 + 32))(v60);
    else
      ++v62;
  }
  if (v60)
    (*(void (**)(void))(*(_QWORD *)v60 + 8))();
LABEL_81:
  *(_QWORD *)(a1 + 8) = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 56))(a2, 0x3FFFFFFF0004, 0) | *(_QWORD *)(a1 + 8) & 4 | 3;
  return a1;
}

void sub_19C372570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_19C372894(a10);
  _Unwind_Resume(a1);
}

uint64_t sub_19C3725F8(uint64_t a1)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  int v7;

  if ((*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 56))(a1, 1, 0))
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
  v7 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 112))(a1, &v5);
  v3 = 0;
  while (1)
  {
    while (!v5)
    {
      v4 = v7;
      if (v7 >= v6)
        return v3;
      v3 = (v3 + 1);
LABEL_5:
      v7 = v4 + 1;
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5))
      break;
    v3 = (v3 + 1);
    if (!v5)
    {
      v4 = v7;
      goto LABEL_5;
    }
    (*(void (**)(void))(*(_QWORD *)v5 + 32))();
  }
  if (v5)
    (*(void (**)(void))(*(_QWORD *)v5 + 8))();
  return v3;
}

void sub_19C3726E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C372700(_QWORD *a1)
{
  char *v2;
  char *v3;
  unint64_t v4;
  char *v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  _QWORD *v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  char *v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;

  v2 = (char *)operator new(0x30uLL);
  v3 = v2;
  *(_DWORD *)v2 = 2139095039;
  *(_OWORD *)(v2 + 8) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  *((_QWORD *)v2 + 5) = 0;
  v5 = (char *)a1[9];
  v4 = a1[10];
  v6 = v5;
  if ((unint64_t)v5 >= v4)
  {
    v8 = (char *)a1[8];
    v9 = (v5 - v8) >> 3;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 61)
      sub_19C2A18E8();
    v11 = v4 - (_QWORD)v8;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 61)
        sub_19C2A143C();
      v13 = operator new(8 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[8 * v9];
    v15 = &v13[8 * v12];
    *v14 = v3;
    v7 = v14 + 1;
    if (v5 == v8)
    {
      v8 = v5;
    }
    else
    {
      v16 = v5 - v8 - 8;
      if (v16 < 0x58)
        goto LABEL_29;
      if ((unint64_t)(v8 - v13) < 0x20)
        goto LABEL_29;
      v17 = (v16 >> 3) + 1;
      v6 = &v5[-8 * (v17 & 0x3FFFFFFFFFFFFFFCLL)];
      v18 = &v13[8 * v9 - 16];
      v19 = v5 - 16;
      v20 = v17 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v21 = *(_OWORD *)v19;
        *(v18 - 1) = *((_OWORD *)v19 - 1);
        *v18 = v21;
        v18 -= 2;
        v19 -= 32;
        v20 -= 4;
      }
      while (v20);
      v14 -= v17 & 0x3FFFFFFFFFFFFFFCLL;
      if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_29:
        do
        {
          v22 = *((_QWORD *)v6 - 1);
          v6 -= 8;
          *--v14 = v22;
        }
        while (v6 != v8);
        v8 = (char *)a1[8];
      }
    }
    a1[8] = v14;
    a1[9] = v7;
    a1[10] = v15;
    if (v8)
      operator delete(v8);
  }
  else
  {
    *(_QWORD *)v5 = v2;
    v7 = v5 + 8;
  }
  a1[9] = v7;
  return (((unint64_t)v7 - a1[8]) >> 3) - 1;
}

uint64_t sub_19C372894(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = &off_1E3D382B0;
  v4 = a1 + 64;
  v2 = *(_QWORD **)(a1 + 64);
  v3 = *(_QWORD **)(v4 + 8);
  if (v3 == v2)
  {
    v2 = v3;
  }
  else
  {
    v5 = 0;
    do
    {
      v6 = (_QWORD *)v2[v5];
      if (v6)
      {
        v7 = (void *)v6[3];
        if (v7)
        {
          v6[4] = v7;
          operator delete(v7);
        }
        operator delete(v6);
        v2 = *(_QWORD **)(a1 + 64);
        v3 = *(_QWORD **)(a1 + 72);
      }
      ++v5;
    }
    while (v5 < v3 - v2);
  }
  if (v2)
  {
    *(_QWORD *)(a1 + 72) = v2;
    operator delete(v2);
  }
  *(_QWORD *)a1 = off_1E3D383E0;
  v8 = *(_QWORD *)(a1 + 40);
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = *(_QWORD *)(a1 + 48);
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

uint64_t sub_19C372968(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_1E3D383E0;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)(a1 + 48);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void sub_19C3729CC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_1E3D383E0;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)(a1 + 48);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C372A40(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t sub_19C372A48(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + 8) & a2;
}

void sub_19C372A58(uint64_t a1)
{
  sub_19C372894(a1);
  JUMPOUT(0x1A1AD355CLL);
}

void sub_19C372A80(uint64_t a1)
{
  sub_19C372894(a1);
  JUMPOUT(0x1A1AD355CLL);
}

void sub_19C372AA8()
{
  JUMPOUT(0x1A1AD355CLL);
}

BOOL sub_19C372ABC(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24) >= (unint64_t)((uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 32)
                                                            - *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24)) >> 4);
}

uint64_t sub_19C372AD8(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24) + 16 * *(_QWORD *)(a1 + 24);
}

uint64_t sub_19C372AEC(uint64_t result)
{
  ++*(_QWORD *)(result + 24);
  return result;
}

uint64_t sub_19C372AFC(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24);
}

uint64_t sub_19C372B04(uint64_t result)
{
  *(_QWORD *)(result + 24) = 0;
  return result;
}

uint64_t sub_19C372B0C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 24) = a2;
  return result;
}

uint64_t sub_19C372B14()
{
  return 15;
}

uint64_t sub_19C372B20(uint64_t result, float *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  int v6;
  int v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  float v13;
  float v14;
  int v15;
  int v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;

  v2 = *(_QWORD **)(result + 8);
  v3 = *(_QWORD *)(result + 24);
  v4 = v2[3];
  v5 = (int *)(v4 + 16 * v3);
  v7 = *v5;
  v6 = v5[1];
  if (*v5 != v6)
    **(_QWORD **)(result + 16) &= ~0x20000uLL;
  if (v7)
  {
    if (!v6)
    {
      v8 = *(unint64_t **)(result + 16);
      v9 = *v8;
LABEL_8:
      *v8 = v9 & 0xFFFFFFFFFBFFFFFFLL;
    }
  }
  else
  {
    v8 = *(unint64_t **)(result + 16);
    v10 = *v8;
    *v8 &= ~0x1000000uLL;
    if (!v6)
    {
      v9 = v10 & 0xFFFFFFFFFEBFFFFFLL;
      *v8 = v9;
      goto LABEL_8;
    }
  }
  v11 = v4 + 16 * v3;
  v13 = *(float *)(v11 + 8);
  v12 = (_DWORD *)(v11 + 8);
  v14 = v13;
  if (v13 != 3.4028e38 && v14 != 0.0)
    **(_QWORD **)(result + 16) &= ~0x100000000uLL;
  if (v7)
  {
    if (v6)
      goto LABEL_14;
  }
  else
  {
    --v2[1];
    if (v6)
    {
LABEL_14:
      if (*(_DWORD *)a2)
        goto LABEL_15;
      goto LABEL_24;
    }
  }
  --v2[2];
  if (*(_DWORD *)a2)
  {
LABEL_15:
    if (*((_DWORD *)a2 + 1))
      goto LABEL_17;
    goto LABEL_16;
  }
LABEL_24:
  ++v2[1];
  if (!*((_DWORD *)a2 + 1))
LABEL_16:
    ++v2[2];
LABEL_17:
  *(_QWORD *)v5 = *(_QWORD *)a2;
  *v12 = *((_DWORD *)a2 + 2);
  *(float *)(v4 + 16 * v3 + 12) = a2[3];
  v15 = *(_DWORD *)a2;
  v16 = *((_DWORD *)a2 + 1);
  if (*(_DWORD *)a2 != v16)
    **(_QWORD **)(result + 16) = **(_QWORD **)(result + 16) & 0xFFFFFFFFFFFCFFFFLL | 0x20000;
  if (v15)
  {
    if (!v16)
    {
      v17 = *(unint64_t **)(result + 16);
      v18 = *v17;
LABEL_28:
      *v17 = v18 & 0xFFFFFFFFF3FFFFFFLL | 0x4000000;
    }
  }
  else
  {
    v17 = *(unint64_t **)(result + 16);
    v19 = *v17 & 0xFFFFFFFFFCFFFFFFLL | 0x1000000;
    *v17 = v19;
    if (!v16)
    {
      v18 = v19 & 0xFFFFFFFFFD3FFFFFLL | 0x400000;
      *v17 = v18;
      goto LABEL_28;
    }
  }
  if (a2[2] != 3.4028e38 && a2[2] != 0.0)
    **(_QWORD **)(result + 16) = **(_QWORD **)(result + 16) & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
  **(_QWORD **)(result + 16) &= 0x30FC30007uLL;
  return result;
}

uint64_t sub_19C372D4C(uint64_t a1, void **a2)
{
  _QWORD *v4;
  _QWORD *v5;
  int v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, _QWORD, void **);
  void *__p[2];
  void *v13;
  int v14;
  void *v15[2];
  int v16;
  char v17;
  _BYTE v18[384];
  _QWORD v19[20];

  v19[19] = *MEMORY[0x1E0C80C00];
  if (*((char *)a2 + 23) < 0)
  {
    if (a2[1])
    {
LABEL_5:
      sub_19C2CB490(v15);
      if ((v18[*((_QWORD *)v15[0] - 3)] & 5) != 0)
      {
        HIBYTE(v13) = 5;
        strcpy((char *)__p, "ERROR");
        v4 = sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)__p, 5);
        sub_19C2A1B24(v4, (uint64_t)": ", 2);
        v5 = sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)"Fst::Write: Can't open file: ", 29);
        v6 = *((char *)a2 + 23);
        if (v6 >= 0)
          v7 = a2;
        else
          v7 = *a2;
        if (v6 >= 0)
          v8 = *((unsigned __int8 *)a2 + 23);
        else
          v8 = (uint64_t)a2[1];
        sub_19C2A1B24(v5, (uint64_t)v7, v8);
        sub_19C351928();
        if (SHIBYTE(v13) < 0)
          operator delete(__p[0]);
        v9 = 0;
      }
      else
      {
        if (*((char *)a2 + 23) < 0)
        {
          sub_19C2B5238(__p, *a2, (unint64_t)a2[1]);
        }
        else
        {
          *(_OWORD *)__p = *(_OWORD *)a2;
          v13 = a2[2];
        }
        v14 = 65793;
        v9 = (*(uint64_t (**)(uint64_t, void **, void **))(*(_QWORD *)a1 + 80))(a1, v15, __p);
        if (SHIBYTE(v13) < 0)
          operator delete(__p[0]);
      }
      v15[0] = *(void **)MEMORY[0x1E0DE4F48];
      *(void **)((char *)v15 + *((_QWORD *)v15[0] - 3)) = *(void **)(MEMORY[0x1E0DE4F48] + 24);
      MEMORY[0x1A1AD3238](&v15[1]);
      std::ostream::~ostream();
      MEMORY[0x1A1AD34CC](v19);
      return v9;
    }
  }
  else if (*((_BYTE *)a2 + 23))
  {
    goto LABEL_5;
  }
  strcpy((char *)v15, "standard output");
  v10 = *(uint64_t (**)(uint64_t, _QWORD, void **))(*(_QWORD *)a1 + 80);
  v16 = 16843023;
  v17 = 0;
  v9 = v10(a1, MEMORY[0x1E0DE4A60], v15);
  if ((char)v16 < 0)
    operator delete(v15[0]);
  return v9;
}

void sub_19C372F94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  sub_19C34603C(&a16);
  _Unwind_Resume(a1);
}

uint64_t sub_19C372FF8(uint64_t a1, uint64_t a2, _BYTE *a3, int a4, void **a5, uint64_t a6, uint64_t a7)
{
  char v13;
  __int128 v14;
  void *v15;
  size_t v16;
  __int128 *v17;
  size_t v18;
  BOOL v19;
  int v20;
  uint64_t v21;
  BOOL v22;
  int v23;
  BOOL v24;
  uint64_t v25;
  uint64_t result;
  BOOL v27;
  uint64_t v28;

  if (a3[24])
  {
    if ((void **)(a7 + 8) != a5)
    {
      v13 = *((_BYTE *)a5 + 23);
      if (*(char *)(a7 + 31) < 0)
      {
        if (v13 >= 0)
          v15 = a5;
        else
          v15 = *a5;
        if (v13 >= 0)
          v16 = *((unsigned __int8 *)a5 + 23);
        else
          v16 = (size_t)a5[1];
        sub_19C2E54A8((void **)(a7 + 8), v15, v16);
      }
      else if ((*((_BYTE *)a5 + 23) & 0x80) != 0)
      {
        sub_19C2E53E4((_QWORD *)(a7 + 8), *a5, (size_t)a5[1]);
      }
      else
      {
        v14 = *(_OWORD *)a5;
        *(_QWORD *)(a7 + 24) = a5[2];
        *(_OWORD *)(a7 + 8) = v14;
      }
    }
    sub_19C373724();
    if ((__int128 *)(a7 + 32) != &xmmword_1EDB97290)
    {
      if (*(char *)(a7 + 55) < 0)
      {
        if (byte_1EDB972A7 >= 0)
          v17 = &xmmword_1EDB97290;
        else
          v17 = (__int128 *)xmmword_1EDB97290;
        if (byte_1EDB972A7 >= 0)
          v18 = byte_1EDB972A7;
        else
          v18 = *((_QWORD *)&xmmword_1EDB97290 + 1);
        sub_19C2E54A8((void **)(a7 + 32), v17, v18);
      }
      else if (byte_1EDB972A7 < 0)
      {
        sub_19C2E53E4((_QWORD *)(a7 + 32), (void *)xmmword_1EDB97290, *((size_t *)&xmmword_1EDB97290 + 1));
      }
      else
      {
        *(_OWORD *)(a7 + 32) = xmmword_1EDB97290;
        *(_QWORD *)(a7 + 48) = unk_1EDB972A0;
      }
    }
    *(_DWORD *)(a7 + 56) = a4;
    *(_QWORD *)(a7 + 64) = a6;
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1))
      v19 = a3[25] == 0;
    else
      v19 = 1;
    v20 = !v19;
    v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1);
    if (a3[26])
      v22 = v21 == 0;
    else
      v22 = 1;
    v23 = v20 | 2;
    if (v22)
      v23 = v20;
    if (a3[27])
      v23 |= 4u;
    *(_DWORD *)(a7 + 60) = v23;
    std::ostream::write();
    std::ostream::write();
    std::ostream::write();
    std::ostream::write();
    std::ostream::write();
    std::ostream::write();
    std::ostream::write();
    std::ostream::write();
    std::ostream::write();
    std::ostream::write();
    std::ostream::write();
  }
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1))
    v24 = a3[25] == 0;
  else
    v24 = 1;
  if (!v24)
  {
    v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v25 + 72))(v25, a2);
  }
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1);
  if (result)
    v27 = a3[26] == 0;
  else
    v27 = 1;
  if (!v27)
  {
    v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v28 + 72))(v28, a2);
  }
  return result;
}

uint64_t sub_19C373344(uint64_t a1, _QWORD *a2, uint64_t a3, int a4, void **a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  int v24;
  char *v25;
  _QWORD *v26;
  int v27;
  _BYTE v29[16];
  _QWORD v30[17];
  __int128 __p;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  MEMORY[0x1A1AD32BC](v29);
  v16 = (char *)a2 + *(_QWORD *)(*a2 - 24);
  if ((v16[32] & 5) == 0)
  {
    v17 = *((_QWORD *)v16 + 5);
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    __p = 0u;
    v32 = 0u;
    v39 = a8;
    (*(void (**)(_QWORD *__return_ptr, uint64_t, __int128 *, uint64_t))(*(_QWORD *)v17 + 40))(v30, v17, &__p, 16);
    if (v30[16] == -1)
      std::ios_base::clear((std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)), *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) | 4);
  }
  MEMORY[0x1A1AD32C8](v29);
  if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) != 0)
  {
    BYTE7(v32) = 5;
    strcpy((char *)&__p, "ERROR");
    v18 = sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)&__p, 5);
    sub_19C2A1B24(v18, (uint64_t)": ", 2);
    v19 = sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)"Fst::UpdateFstHeader: write failed: ", 36);
    v20 = *(char *)(a3 + 23);
    if (v20 >= 0)
      v21 = a3;
    else
      v21 = *(_QWORD *)a3;
    if (v20 >= 0)
      v22 = *(unsigned __int8 *)(a3 + 23);
    else
      v22 = *(_QWORD *)(a3 + 8);
  }
  else
  {
    sub_19C372FF8(a1, (uint64_t)a2, (_BYTE *)a3, a4, a5, a6, a7);
    if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) != 0)
    {
      BYTE7(v32) = 5;
      strcpy((char *)&__p, "ERROR");
      v23 = sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)&__p, 5);
      sub_19C2A1B24(v23, (uint64_t)": ", 2);
      v19 = sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)"Fst::UpdateFstHeader: write failed: ", 36);
      v24 = *(char *)(a3 + 23);
      if (v24 >= 0)
        v21 = a3;
      else
        v21 = *(_QWORD *)a3;
      if (v24 >= 0)
        v22 = *(unsigned __int8 *)(a3 + 23);
      else
        v22 = *(_QWORD *)(a3 + 8);
    }
    else
    {
      MEMORY[0x1A1AD32BC](v30, a2);
      v25 = (char *)a2 + *(_QWORD *)(*a2 - 24);
      if ((v25[32] & 5) == 0)
      {
        (*(void (**)(__int128 *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v25 + 5) + 32))(&__p, *((_QWORD *)v25 + 5), 0, 2, 16);
        if (v39 == -1)
          std::ios_base::clear((std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)), *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) | 4);
      }
      MEMORY[0x1A1AD32C8](v30);
      if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) == 0)
        return 1;
      BYTE7(v32) = 5;
      strcpy((char *)&__p, "ERROR");
      v26 = sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)&__p, 5);
      sub_19C2A1B24(v26, (uint64_t)": ", 2);
      v19 = sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)"Fst::UpdateFstHeader: write failed: ", 36);
      v27 = *(char *)(a3 + 23);
      if (v27 >= 0)
        v21 = a3;
      else
        v21 = *(_QWORD *)a3;
      if (v27 >= 0)
        v22 = *(unsigned __int8 *)(a3 + 23);
      else
        v22 = *(_QWORD *)(a3 + 8);
    }
  }
  sub_19C2A1B24(v19, v21, v22);
  sub_19C351928();
  if (SBYTE7(v32) < 0)
    operator delete((void *)__p);
  return 0;
}

void sub_19C3736B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  MEMORY[0x1A1AD32C8](&a12);
  _Unwind_Resume(a1);
}

void sub_19C3736F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  sub_19C351928();
  if (a34 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_19C373724()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1EDB97270);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_1EDB97270))
  {
    sub_19C373818();
    if (sub_19C3738DC((const void **)&xmmword_1EDB97278, "tropical"))
    {
      sub_19C2A6D48(&xmmword_1EDB97290, "standard");
    }
    else
    {
      sub_19C373818();
      if (byte_1EDB9728F < 0)
      {
        sub_19C2B5238(&xmmword_1EDB97290, (void *)xmmword_1EDB97278, *((unint64_t *)&xmmword_1EDB97278 + 1));
      }
      else
      {
        xmmword_1EDB97290 = xmmword_1EDB97278;
        unk_1EDB972A0 = unk_1EDB97288;
      }
    }
    __cxa_atexit(MEMORY[0x1E0DE44D0], &xmmword_1EDB97290, &dword_19C291000);
    __cxa_guard_release(&qword_1EDB97270);
  }
}

void sub_19C373800(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1EDB97270);
  _Unwind_Resume(a1);
}

void sub_19C373818()
{
  unsigned __int8 v0;
  std::string __p;

  v0 = atomic_load((unsigned __int8 *)&qword_1EDB97268);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_1EDB97268))
  {
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
    __p.__r_.__value_.__s.__data_[0] = 0;
    sub_19C337C34((std::string *)&xmmword_1EDB97278, "tropical", &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __cxa_atexit(MEMORY[0x1E0DE44D0], &xmmword_1EDB97278, &dword_19C291000);
    __cxa_guard_release(&qword_1EDB97268);
  }
}

void sub_19C3738B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_1EDB97268);
  _Unwind_Resume(a1);
}

BOOL sub_19C3738DC(const void **a1, char *__s)
{
  int v4;
  size_t v5;
  const void *v6;

  v4 = *((char *)a1 + 23);
  if (v4 >= 0)
    v5 = *((unsigned __int8 *)a1 + 23);
  else
    v5 = (size_t)a1[1];
  if (v5 != strlen(__s))
    return 0;
  if (v4 >= 0)
    v6 = a1;
  else
    v6 = *a1;
  return memcmp(v6, __s, v5) == 0;
}

unint64_t sub_19C373950(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  unint64_t result;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  char v16;
  unsigned int *v17;
  unint64_t v18;
  int8x8_t v19;
  unint64_t v20;
  uint8x8_t v21;
  unint64_t v22;
  uint64_t **v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  int8x8_t v28;
  unint64_t v29;
  uint8x8_t v30;
  unint64_t v31;
  uint64_t **v32;
  uint64_t *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  unint64_t v39;
  float v40;
  int v41;
  _QWORD *v42;
  _QWORD *v43;
  void *v44;
  _QWORD *v45;
  _QWORD *v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;

  v6 = 0x155555550000;
  result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 56))(a1, 0x3FFFFFFF0007, 0);
  v8 = result & 0x3FFFFFFF0000 | (2 * result) & 0x2AAAAAAA0000 | (result >> 1) & 0x155555550000 | 7;
  if ((a2 & ~v8) != 0)
  {
    result &= 7u;
    v58 = result;
    if ((a2 & 0xF3C00000000) != 0)
    {
      v53 = 0;
      v54 = 0;
      v55 = 0;
      v56 = &v58;
      sub_19C3741D0(a1, (uint64_t)&v53);
      result = v58;
    }
    if ((a2 & 0xFFFFF0C3FFFFFFF8) == 0)
      goto LABEL_141;
    v49 = a2 & 0xC0000;
    v9 = 0x10425A810000;
    if ((a2 & 0xC0000) != 0)
      v9 = 0x10425A850000;
    v10 = result | v9;
    v48 = a2 & 0x300000;
    if ((a2 & 0x300000) != 0)
      v10 |= 0x100000uLL;
    v58 = v10;
    v52 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 112))(a1, &v50);
    v11 = 0;
    v12 = 0;
    v13 = 0;
LABEL_11:
    if (!v50)
    {
      v14 = v52;
      if ((int)v52 >= v51)
        goto LABEL_136;
      if (!v49)
        goto LABEL_19;
      goto LABEL_18;
    }
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v50 + 16))(v50))
    {
      if (v50)
      {
        v14 = (*(uint64_t (**)(void))(*(_QWORD *)v50 + 24))();
        if (!v49)
          goto LABEL_19;
      }
      else
      {
        v14 = v52;
        if (!v49)
          goto LABEL_19;
      }
LABEL_18:
      v11 = operator new();
      *(_OWORD *)v11 = 0u;
      *(_OWORD *)(v11 + 16) = 0u;
      *(_DWORD *)(v11 + 32) = 1065353216;
LABEL_19:
      if (v48)
      {
        v12 = operator new();
        *(_OWORD *)v12 = 0u;
        *(_OWORD *)(v12 + 16) = 0u;
        *(_DWORD *)(v12 + 32) = 1065353216;
      }
      v57 = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 120))(a1, v14, &v53);
      v15 = v14 + 1;
      v16 = 1;
      while (1)
      {
        if (v53)
        {
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v53 + 16))(v53))
          {
            if (v53)
            {
              (*(void (**)(void))(*(_QWORD *)v53 + 8))();
              goto LABEL_110;
            }
LABEL_108:
            if (v56)
              --*(_DWORD *)v56;
LABEL_110:
            if (v13 > 0)
              v58 = v58 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
            (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(&v59, a1, v14);
            LODWORD(v53) = v59;
            HIDWORD(v59) = 2139095039;
            if (*(float *)&v59 == 3.4028e38)
            {
              if ((*(uint64_t (**)(uint64_t, uint64_t, float, float))(*(_QWORD *)a1 + 32))(a1, v14, 3.4028e38, *(float *)&v59) != 1)v58 = v58 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
            }
            else
            {
              LODWORD(v53) = v59;
              HIDWORD(v59) = 0;
              if (*(float *)&v59 != 0.0)
                v58 = v58 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
              ++v13;
            }
            if (v11)
            {
              v42 = *(_QWORD **)(v11 + 16);
              if (v42)
              {
                do
                {
                  v43 = (_QWORD *)*v42;
                  operator delete(v42);
                  v42 = v43;
                }
                while (v43);
              }
              v44 = *(void **)v11;
              *(_QWORD *)v11 = 0;
              if (v44)
                operator delete(v44);
              MEMORY[0x1A1AD355C](v11, 0x10A0C408EF24B1CLL);
            }
            if (v12)
            {
              v45 = *(_QWORD **)(v12 + 16);
              if (v45)
              {
                do
                {
                  v46 = (_QWORD *)*v45;
                  operator delete(v45);
                  v45 = v46;
                }
                while (v46);
              }
              v47 = *(void **)v12;
              *(_QWORD *)v12 = 0;
              if (v47)
                operator delete(v47);
              MEMORY[0x1A1AD355C](v12, 0x10A0C408EF24B1CLL);
            }
            if (v50)
              (*(void (**)(uint64_t))(*(_QWORD *)v50 + 32))(v50);
            else
              ++v52;
            goto LABEL_11;
          }
          if (v53)
          {
            v17 = (unsigned int *)(*(uint64_t (**)(void))(*(_QWORD *)v53 + 24))();
            if (!v11)
              goto LABEL_54;
            goto LABEL_32;
          }
          v18 = v57;
        }
        else
        {
          v18 = v57;
          if (v57 >= v55)
            goto LABEL_108;
        }
        v17 = (unsigned int *)(v54 + 16 * v18);
        if (!v11)
          goto LABEL_54;
LABEL_32:
        v19 = *(int8x8_t *)(v11 + 8);
        if (v19)
        {
          v20 = *v17;
          v21 = (uint8x8_t)vcnt_s8(v19);
          v21.i16[0] = vaddlv_u8(v21);
          if (v21.u32[0] > 1uLL)
          {
            v22 = *v17;
            if (*(_QWORD *)&v19 <= v20)
              v22 = v20 % *(_QWORD *)&v19;
          }
          else
          {
            v22 = (v19.i32[0] - 1) & v20;
          }
          v23 = *(uint64_t ***)(*(_QWORD *)v11 + 8 * v22);
          if (v23)
          {
            v24 = *v23;
            if (v24)
            {
              if (v21.u32[0] < 2uLL)
              {
                v25 = *(_QWORD *)&v19 - 1;
                while (1)
                {
                  v27 = v24[1];
                  if (v27 == v20)
                  {
                    if (*((_DWORD *)v24 + 4) == (_DWORD)v20)
                      goto LABEL_53;
                  }
                  else if ((v27 & v25) != v22)
                  {
                    goto LABEL_54;
                  }
                  v24 = (uint64_t *)*v24;
                  if (!v24)
                    goto LABEL_54;
                }
              }
              do
              {
                v26 = v24[1];
                if (v26 == v20)
                {
                  if (*((_DWORD *)v24 + 4) == (_DWORD)v20)
                  {
LABEL_53:
                    v58 = v58 & 0xFFFFFFFFFFF3FFFFLL | 0x80000;
                    break;
                  }
                }
                else
                {
                  if (v26 >= *(_QWORD *)&v19)
                    v26 %= *(_QWORD *)&v19;
                  if (v26 != v22)
                    break;
                }
                v24 = (uint64_t *)*v24;
              }
              while (v24);
            }
          }
        }
LABEL_54:
        if (v12)
        {
          v28 = *(int8x8_t *)(v12 + 8);
          if (v28)
          {
            v29 = v17[1];
            v30 = (uint8x8_t)vcnt_s8(v28);
            v30.i16[0] = vaddlv_u8(v30);
            if (v30.u32[0] > 1uLL)
            {
              v31 = v17[1];
              if (*(_QWORD *)&v28 <= v29)
                v31 = v29 % *(_QWORD *)&v28;
            }
            else
            {
              v31 = (v28.i32[0] - 1) & v29;
            }
            v32 = *(uint64_t ***)(*(_QWORD *)v12 + 8 * v31);
            if (v32)
            {
              v33 = *v32;
              if (v33)
              {
                if (v30.u32[0] < 2uLL)
                {
                  v34 = *(_QWORD *)&v28 - 1;
                  while (1)
                  {
                    v36 = v33[1];
                    if (v36 == v29)
                    {
                      if (*((_DWORD *)v33 + 4) == (_DWORD)v29)
                        goto LABEL_76;
                    }
                    else if ((v36 & v34) != v31)
                    {
                      goto LABEL_77;
                    }
                    v33 = (uint64_t *)*v33;
                    if (!v33)
                      goto LABEL_77;
                  }
                }
                do
                {
                  v35 = v33[1];
                  if (v35 == v29)
                  {
                    if (*((_DWORD *)v33 + 4) == (_DWORD)v29)
                    {
LABEL_76:
                      v58 = v58 & 0xFFFFFFFFFFCFFFFFLL | 0x200000;
                      break;
                    }
                  }
                  else
                  {
                    if (v35 >= *(_QWORD *)&v28)
                      v35 %= *(_QWORD *)&v28;
                    if (v35 != v31)
                      break;
                  }
                  v33 = (uint64_t *)*v33;
                }
                while (v33);
              }
            }
          }
        }
LABEL_77:
        v37 = *v17;
        v38 = *v17;
        if (*v17 != v17[1])
        {
          v58 = v58 & 0xFFFFFFFFFFFCFFFFLL | 0x20000;
          v38 = v17[1];
        }
        if (v37 | v38)
        {
          if (v37)
          {
            if (!v38)
              goto LABEL_87;
            goto LABEL_83;
          }
          v39 = v58;
        }
        else
        {
          v39 = v58 & 0xFFFFFFFFFF3FFFFFLL | 0x400000;
        }
        v58 = v39 & 0xFFFFFFFFFCFFFFFFLL | 0x1000000;
        if (!v38)
        {
LABEL_87:
          v58 = v58 & 0xFFFFFFFFF3FFFFFFLL | 0x4000000;
          if ((v16 & 1) != 0)
            goto LABEL_92;
          goto LABEL_88;
        }
LABEL_83:
        if ((v16 & 1) != 0)
          goto LABEL_92;
LABEL_88:
        if (v37 < v6)
          v58 = v58 & 0xFFFFFFFFCFFFFFFFLL | 0x20000000;
        if (v38 < HIDWORD(v6))
          v58 = v58 & 0xFFFFFFFF3FFFFFFFLL | 0x80000000;
LABEL_92:
        HIDWORD(v59) = 0;
        v40 = *((float *)v17 + 2);
        *((float *)&v59 + 1) = v40;
        LODWORD(v59) = 0;
        if (v40 != 0.0)
        {
          *((float *)&v59 + 1) = v40;
          LODWORD(v59) = 2139095039;
          if (v40 != 3.4028e38)
            v58 = v58 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
        }
        v41 = v17[3];
        if (v41 <= (int)v14)
        {
          v58 = v58 & 0xFFFFFF3FFFFFFFFFLL | 0x8000000000;
          if (v41 != v15)
          {
LABEL_100:
            v58 = v58 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
            v6 = *(_QWORD *)v17;
            if (!v11)
              goto LABEL_102;
LABEL_101:
            sub_19C357A04((float *)v11, v6, v6);
            goto LABEL_102;
          }
        }
        else if (v41 != v15)
        {
          goto LABEL_100;
        }
        v6 = *(_QWORD *)v17;
        if (v11)
          goto LABEL_101;
LABEL_102:
        if (v12)
          sub_19C357A04((float *)v12, v17[1], v17[1]);
        if (v53)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v53 + 32))(v53);
          v16 = 0;
        }
        else
        {
          v16 = 0;
          ++v57;
        }
      }
    }
    if (v50)
      (*(void (**)(void))(*(_QWORD *)v50 + 8))();
LABEL_136:
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1) == -1)
    {
      result = v58;
    }
    else if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1))
    {
      result = v58 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
    }
    else
    {
      result = v58;
    }
LABEL_141:
    v8 = result & 0x3FFFFFFF0000 | (2 * result) & 0x2AAAAAAA0000 | (result >> 1) & 0x155555550000 | 7;
  }
  *a3 = v8;
  return result;
}

void sub_19C374148(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (!a12)
    _Unwind_Resume(exception_object);
  (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  _Unwind_Resume(exception_object);
}

void sub_19C3741D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  _QWORD *v6;
  int v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  char *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  int *v32;
  unint64_t v33;
  char *v34;
  char *v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  size_t v43;
  _BYTE *v44;
  char *v45;
  char *v46;
  _OWORD *v47;
  unint64_t v48;
  __int128 v49;
  char v50;
  unint64_t v51;
  uint64_t v52;
  _DWORD *v53;
  uint64_t v54;
  unint64_t v55;
  BOOL v56;
  uint64_t v57;
  unint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  int v65;
  uint64_t v66;
  int v67;
  int v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  _QWORD *v84;
  char *v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  int v90;
  char *v91;
  char *v92;
  unint64_t v93;
  int64_t v94;
  unint64_t v95;
  size_t v96;
  char *v97;
  char *v98;
  unint64_t v99;
  char *v100;
  char *v101;
  unint64_t v102;
  __int128 v103;
  unint64_t v104;
  char *v105;
  char *v106;
  char *v107;
  uint64_t v108;
  char *v109;
  char v110;
  _QWORD *i;
  uint64_t v112;
  _QWORD *v113;
  _QWORD *v114;
  uint64_t v115;
  _QWORD *v116;
  void **v117;
  void **v118;
  unint64_t v119;
  void *v120;
  void *v121;
  uint64_t v122;
  int v123;
  uint64_t v124;
  int v126;
  unint64_t v127;
  uint64_t v128;
  char v129;
  uint64_t v130;
  int v131;
  int v132;
  uint64_t (**v133)();
  uint64_t (**v134)();
  __int128 v135;
  _QWORD *v136;
  _QWORD *v137;
  uint64_t v138;
  int *v139;
  void *__p[2];
  __int128 v141;
  __int128 v142;
  char *v143;
  char *v144;
  unint64_t v145;

  v2 = a2;
  if (*(_QWORD *)a2)
    *(_QWORD *)(*(_QWORD *)a2 + 8) = **(_QWORD **)a2;
  v3 = *(_QWORD *)(a2 + 8);
  if (v3)
    *(_QWORD *)(v3 + 8) = 0;
  v4 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    v5 = 0;
    *(_QWORD *)(v4 + 8) = 0;
  }
  else
  {
    v6 = (_QWORD *)operator new();
    v6[1] = 0;
    v6[2] = 0;
    *v6 = 0;
    *(_QWORD *)(v2 + 16) = v6;
    v5 = 1;
  }
  *(_BYTE *)(v2 + 52) = v5;
  **(_QWORD **)(v2 + 24) = **(_QWORD **)(v2 + 24) & 0xFFFFF0C3FFFFFFFFLL | 0x52800000000;
  *(_QWORD *)(v2 + 32) = a1;
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  *(_DWORD *)(v2 + 44) = 0;
  *(_DWORD *)(v2 + 48) = 0;
  *(_DWORD *)(v2 + 40) = v7;
  v8 = (_QWORD *)operator new();
  v8[1] = 0;
  v8[2] = 0;
  *v8 = 0;
  *(_QWORD *)(v2 + 56) = v8;
  v9 = (_QWORD *)operator new();
  v9[1] = 0;
  v9[2] = 0;
  *v9 = 0;
  *(_QWORD *)(v2 + 64) = v9;
  v10 = (_QWORD *)operator new();
  v10[1] = 0;
  v10[2] = 0;
  *v10 = 0;
  *(_QWORD *)(v2 + 72) = v10;
  v11 = (_QWORD *)operator new();
  v11[1] = 0;
  v11[2] = 0;
  *v11 = 0;
  *(_QWORD *)(v2 + 80) = v11;
  v123 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if (v123 == -1)
  {
    sub_19C375088(v2);
    return;
  }
  v143 = 0;
  v144 = 0;
  v145 = 0;
  v141 = 0u;
  v142 = 0u;
  *(_OWORD *)__p = 0u;
  v133 = &off_1E3D37998;
  v134 = &off_1E3D37C90;
  v135 = xmmword_19C46DED0;
  v136 = &v136;
  v137 = &v136;
  v138 = 0;
  v12 = operator new[]();
  v13 = operator new(0x18uLL);
  v14 = v137;
  *v13 = &v136;
  v13[1] = v14;
  v13[2] = v12;
  *v14 = v13;
  v137 = v13;
  ++v138;
  v139 = 0;
  v122 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 56))(a1, 1, 0);
  if (v122)
  {
    v15 = sub_19C3725F8(a1);
    LOBYTE(v130) = 0;
    v16 = v15;
    if (!(_DWORD)v15)
      goto LABEL_15;
  }
  else
  {
    v15 = (v123 + 1);
    LOBYTE(v130) = 0;
  }
  sub_19C375244((unint64_t *)&v143, (int)v15, (const char *)&v130);
  v16 = v15;
LABEL_15:
  v132 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 112))(a1, &v130);
  if (v123 < (int)v16)
  {
    v17 = v123;
    v124 = v2;
    while (1)
    {
      v143[(int)v17] = 1;
      v19 = (uint64_t)v139;
      if (v139)
      {
        v139 = (int *)*((_QWORD *)v139 + 6);
      }
      else
      {
        if ((unint64_t)v135 > 0xDF)
        {
          v22 = *((_QWORD *)&v135 + 1);
          if (*((_QWORD *)&v135 + 1) + 56 <= (unint64_t)v135)
          {
            v23 = v137[2];
          }
          else
          {
            v23 = operator new[]();
            *((_QWORD *)&v135 + 1) = 0;
            v24 = operator new(0x18uLL);
            v22 = 0;
            v25 = v137;
            *v24 = &v136;
            v24[1] = v25;
            v24[2] = v23;
            *v25 = v24;
            v137 = v24;
            ++v138;
          }
          v19 = v23 + v22;
          *((_QWORD *)&v135 + 1) = v22 + 56;
        }
        else
        {
          v19 = operator new[]();
          v20 = operator new(0x18uLL);
          v21 = v136;
          v20[1] = &v136;
          v20[2] = v19;
          *v20 = v21;
          v21[1] = v20;
          v136 = v20;
          ++v138;
        }
        *(_QWORD *)(v19 + 48) = 0;
      }
      *(_DWORD *)v19 = v17;
      *(_QWORD *)(v19 + 40) = 0;
      (*(void (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a1 + 120))(a1, v17, v19 + 8);
      v26 = (char *)__p[1];
      if ((void *)v141 == __p[1])
        v27 = 0;
      else
        v27 = (((_QWORD)v141 - (unint64_t)__p[1]) << 6) - 1;
      v28 = *((_QWORD *)&v142 + 1);
      v29 = v142;
      v30 = *((_QWORD *)&v142 + 1) + v142;
      v127 = v16;
      if (v27 == *((_QWORD *)&v142 + 1) + (_QWORD)v142)
      {
        sub_19C3754FC((uint64_t)__p);
        v28 = *((_QWORD *)&v142 + 1);
        v26 = (char *)__p[1];
        v29 = v142;
        v30 = v142 + *((_QWORD *)&v142 + 1);
      }
      *(_QWORD *)(*(_QWORD *)&v26[(v30 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v30 & 0x1FF)) = v19;
      v31 = v28 + 1;
      *((_QWORD *)&v142 + 1) = v28 + 1;
      sub_19C375B40((uint64_t *)v2, v17, v17);
      if (v31)
      {
        v126 = v17;
        while (1)
        {
          v128 = v29;
          v32 = *(int **)(*(_QWORD *)((char *)__p[1] + (((unint64_t)(v31 + v29 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                        + 8 * ((v31 + v29 - 1) & 0x1FF));
          v33 = *v32;
          v34 = v143;
          v35 = v144;
          v36 = v144 - v143;
          if (v144 - v143 > v33)
          {
LABEL_39:
            v37 = v144;
            v38 = *((_QWORD *)v32 + 1);
            if (!v38)
              goto LABEL_67;
            goto LABEL_40;
          }
          v127 = v33 + 1;
          v41 = v33 + 1 - v36;
          if (v33 + 1 <= v36)
            break;
          if (v145 - (unint64_t)v144 >= v41)
          {
            v37 = &v144[v41];
            bzero(v144, v33 + 1 - v36);
LABEL_66:
            v144 = v37;
            v38 = *((_QWORD *)v32 + 1);
            if (!v38)
              goto LABEL_67;
            goto LABEL_40;
          }
          if ((int)v33 <= -2)
            sub_19C2A18E8();
          v42 = 2 * (v145 - (_QWORD)v143);
          if (v42 <= v127)
            v42 = v33 + 1;
          if (v145 - (unint64_t)v143 >= 0x3FFFFFFFFFFFFFFFLL)
            v43 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v43 = v42;
          v44 = operator new(v43);
          v45 = &v44[v36];
          bzero(&v44[v36], v33 + 1 - v36);
          if (v35 != v34)
          {
            if (v36 < 0x20)
              goto LABEL_202;
            if ((unint64_t)(v34 - v44) < 0x20)
              goto LABEL_202;
            v46 = v35 - 16;
            v47 = &v44[v36 - 16];
            v48 = v36 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v49 = *(_OWORD *)v46;
              *(v47 - 1) = *((_OWORD *)v46 - 1);
              *v47 = v49;
              v46 -= 32;
              v47 -= 2;
              v48 -= 32;
            }
            while (v48);
            v45 -= v36 & 0xFFFFFFFFFFFFFFE0;
            v35 -= v36 & 0xFFFFFFFFFFFFFFE0;
            if (v36 != (v36 & 0xFFFFFFFFFFFFFFE0))
            {
LABEL_202:
              do
              {
                v50 = *--v35;
                *--v45 = v50;
              }
              while (v35 != v34);
            }
            v35 = v34;
          }
          v34 = v45;
          v37 = &v44[v127];
          v143 = v34;
          v144 = &v44[v127];
          v145 = (unint64_t)&v44[v43];
          if (v35)
            operator delete(v35);
          v2 = v124;
          v38 = *((_QWORD *)v32 + 1);
          if (!v38)
          {
LABEL_67:
            v51 = *((_QWORD *)v32 + 5);
            if (v51 >= *((_QWORD *)v32 + 3))
            {
LABEL_68:
              v34[v33] = 2;
              v52 = *((_QWORD *)v32 + 1);
              if (v52)
              {
                (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
                LODWORD(v17) = v126;
              }
              else
              {
                v53 = (_DWORD *)*((_QWORD *)v32 + 4);
                LODWORD(v17) = v126;
                if (v53)
                  --*v53;
              }
              v54 = v141;
              v55 = (((_QWORD)v141 - (unint64_t)__p[1]) << 6) - 1;
              v56 = (void *)v141 == __p[1];
              *((_QWORD *)v32 + 6) = v139;
              v139 = v32;
              v57 = *((_QWORD *)&v142 + 1);
              v29 = v142;
              if (v56)
                v58 = 0;
              else
                v58 = v55;
              v31 = --*((_QWORD *)&v142 + 1);
              if (v58 - (v57 + (_QWORD)v142) + 1 >= 0x400)
              {
                operator delete(*(void **)(v54 - 8));
                *(_QWORD *)&v141 = v54 - 8;
              }
              if (v57 == 1)
              {
                sub_19C376268(v2, v33, -1);
                goto LABEL_124;
              }
              v32 = *(int **)(*(_QWORD *)((char *)__p[1]
                                        + (((unint64_t)(v57 + v29 - 2) >> 6) & 0x3FFFFFFFFFFFFF8))
                            + 8 * ((v57 + v29 - 2) & 0x1FF));
              v59 = *v32;
              v60 = *((_QWORD *)v32 + 1);
              if (v60)
                (*(void (**)(uint64_t))(*(_QWORD *)v60 + 24))(v60);
              sub_19C376268(v2, v33, v59);
              v61 = *((_QWORD *)v32 + 1);
              if (v61)
                goto LABEL_81;
              goto LABEL_36;
            }
            goto LABEL_83;
          }
LABEL_40:
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v38 + 16))(v38))
            goto LABEL_68;
          v39 = *((_QWORD *)v32 + 1);
          if (v39)
          {
            v40 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v39 + 24))(v39);
            goto LABEL_84;
          }
          v51 = *((_QWORD *)v32 + 5);
LABEL_83:
          v40 = *((_QWORD *)v32 + 2) + 16 * v51;
LABEL_84:
          v62 = *(int *)(v40 + 12);
          v63 = v37 - v34;
          if (v37 - v34 <= v62)
          {
            v64 = (v62 + 1);
            v129 = 0;
            LODWORD(v17) = v126;
            if ((int)v64 <= v63)
            {
              if ((int)v64 < v63)
                v144 = &v34[(int)v64];
            }
            else
            {
              sub_19C375244((unint64_t *)&v143, (int)v64 - v63, &v129);
              v62 = *(int *)(v40 + 12);
              v34 = v143;
            }
            v127 = v64;
          }
          else
          {
            LODWORD(v17) = v126;
          }
          v65 = v34[v62];
          if (v65 == 1)
          {
            v72 = *(_DWORD *)(**(_QWORD **)(v2 + 56) + 4 * v62);
            v73 = **(_QWORD **)(v2 + 64);
            if (v72 < *(_DWORD *)(v73 + 4 * v33))
              *(_DWORD *)(v73 + 4 * v33) = v72;
            v74 = **(_QWORD **)(v2 + 16);
            v29 = v128;
            if (((*(_QWORD *)(v74 + ((v62 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v62) & 1) != 0)
              *(_QWORD *)(v74 + ((v33 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v33;
            v75 = *(unint64_t **)(v2 + 24);
            v76 = *v75 & 0xFFFFFFF3FFFFFFFFLL | 0x400000000;
            *v75 = v76;
            if (*(_DWORD *)(v40 + 12) == *(_DWORD *)(v2 + 40))
              *v75 = v76 & 0xFFFFFFC7FFFFFFFFLL | 0x1000000000;
          }
          else
          {
            if (v65 != 2)
            {
              v34[v62] = 1;
              v77 = (uint64_t)v139;
              if (v139)
              {
                v139 = (int *)*((_QWORD *)v139 + 6);
              }
              else
              {
                if ((unint64_t)v135 > 0xDF)
                {
                  v81 = *((_QWORD *)&v135 + 1);
                  if (*((_QWORD *)&v135 + 1) + 56 <= (unint64_t)v135)
                  {
                    v82 = v137[2];
                  }
                  else
                  {
                    v82 = operator new[]();
                    *((_QWORD *)&v135 + 1) = 0;
                    v83 = operator new(0x18uLL);
                    v81 = 0;
                    v84 = v137;
                    *v83 = &v136;
                    v83[1] = v84;
                    v83[2] = v82;
                    *v84 = v83;
                    v137 = v83;
                    ++v138;
                  }
                  v77 = v82 + v81;
                  *((_QWORD *)&v135 + 1) = v81 + 56;
                }
                else
                {
                  v77 = operator new[]();
                  v79 = operator new(0x18uLL);
                  v80 = v136;
                  v79[1] = &v136;
                  v79[2] = v77;
                  *v79 = v80;
                  v80[1] = v79;
                  v136 = v79;
                  ++v138;
                }
                *(_QWORD *)(v77 + 48) = 0;
              }
              *(_DWORD *)v77 = *(_DWORD *)(v40 + 12);
              *(_QWORD *)(v77 + 40) = 0;
              (*(void (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
              v85 = (char *)__p[1];
              if ((void *)v141 == __p[1])
                v86 = 0;
              else
                v86 = (((_QWORD)v141 - (unint64_t)__p[1]) << 6) - 1;
              v87 = *((_QWORD *)&v142 + 1);
              v29 = v142;
              v88 = *((_QWORD *)&v142 + 1) + v142;
              if (v86 == *((_QWORD *)&v142 + 1) + (_QWORD)v142)
              {
                sub_19C3754FC((uint64_t)__p);
                v87 = *((_QWORD *)&v142 + 1);
                v85 = (char *)__p[1];
                v29 = v142;
                v88 = v142 + *((_QWORD *)&v142 + 1);
              }
              *(_QWORD *)(*(_QWORD *)&v85[(v88 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v88 & 0x1FF)) = v77;
              v31 = v87 + 1;
              *((_QWORD *)&v142 + 1) = v87 + 1;
              sub_19C375B40((uint64_t *)v2, *(_DWORD *)(v40 + 12), v17);
              goto LABEL_37;
            }
            v66 = **(_QWORD **)(v2 + 56);
            v67 = *(_DWORD *)(v66 + 4 * v62);
            v68 = *(_DWORD *)(v66 + 4 * v33);
            v69 = v62 >> 6;
            if (v67 >= v68)
            {
              v70 = 1 << v62;
              v29 = v128;
            }
            else
            {
              v70 = 1 << v62;
              v29 = v128;
              if ((*(_QWORD *)(**(_QWORD **)(v2 + 72) + 8 * v69) & v70) != 0)
              {
                v71 = **(_QWORD **)(v2 + 64);
                if (v67 < *(_DWORD *)(v71 + 4 * v33))
                  *(_DWORD *)(v71 + 4 * v33) = v67;
              }
            }
            v78 = **(_QWORD **)(v2 + 16);
            if ((*(_QWORD *)(v78 + 8 * v69) & v70) != 0)
              *(_QWORD *)(v78 + ((v33 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v33;
          }
          v61 = *((_QWORD *)v32 + 1);
          if (v61)
          {
LABEL_81:
            (*(void (**)(uint64_t))(*(_QWORD *)v61 + 32))(v61);
            goto LABEL_37;
          }
LABEL_36:
          ++*((_QWORD *)v32 + 5);
LABEL_37:
          if (!v31)
            goto LABEL_124;
        }
        if (v33 + 1 >= v36)
          goto LABEL_39;
        v37 = &v143[v127];
        goto LABEL_66;
      }
LABEL_124:
      v17 = (_DWORD)v17 == v123 ? 0 : (v17 + 1);
      v16 = v127;
      if ((int)v17 >= (int)v127)
      {
LABEL_132:
        if (v122)
          goto LABEL_19;
      }
      else
      {
        v89 = (int)v17;
        while (v143[v89])
        {
          if ((int)v127 == ++v89)
          {
            v17 = v127;
            goto LABEL_132;
          }
        }
        v17 = v89;
        if (v122)
          goto LABEL_19;
      }
      if ((_DWORD)v17 != (_DWORD)v127)
        goto LABEL_19;
      while (!v130)
      {
        v90 = v132;
        if (v132 >= v131)
          goto LABEL_19;
LABEL_143:
        if (v90 == (_DWORD)v127)
          goto LABEL_147;
LABEL_144:
        if (v130)
          (*(void (**)(uint64_t))(*(_QWORD *)v130 + 32))(v130);
        else
          ++v132;
      }
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v130 + 16))(v130) & 1) != 0)
        goto LABEL_19;
      if (v130)
        break;
      if (v132 != (_DWORD)v127)
        goto LABEL_144;
LABEL_147:
      v91 = v144;
      if ((unint64_t)v144 < v145)
      {
        *v144 = 0;
        v18 = v91 + 1;
      }
      else
      {
        v92 = v143;
        v93 = v144 - v143;
        v94 = v144 - v143 + 1;
        if (v94 < 0)
          sub_19C2A18E8();
        v95 = v145 - (_QWORD)v143;
        if (2 * (v145 - (unint64_t)v143) > v94)
          v94 = 2 * v95;
        if (v95 >= 0x3FFFFFFFFFFFFFFFLL)
          v96 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v96 = v94;
        if (v96)
          v97 = (char *)operator new(v96);
        else
          v97 = 0;
        v98 = &v97[v93];
        v97[v93] = 0;
        v18 = &v97[v93 + 1];
        if (v91 != v92)
        {
          if (v93 >= 8 && (unint64_t)(v92 - v97) >= 0x20)
          {
            if (v93 >= 0x20)
            {
              v99 = v93 & 0xFFFFFFFFFFFFFFE0;
              v100 = &v97[v93 - 16];
              v101 = v91 - 16;
              v102 = v93 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                v103 = *(_OWORD *)v101;
                *((_OWORD *)v100 - 1) = *((_OWORD *)v101 - 1);
                *(_OWORD *)v100 = v103;
                v100 -= 32;
                v101 -= 32;
                v102 -= 32;
              }
              while (v102);
              if (v93 == v99)
                goto LABEL_169;
              if ((v93 & 0x18) != 0)
                goto LABEL_166;
              v98 -= v99;
              v91 -= v99;
            }
            else
            {
              v99 = 0;
LABEL_166:
              v104 = v99 - (v93 & 0xFFFFFFFFFFFFFFF8);
              v105 = &v91[-v99];
              v106 = &v97[&v91[-v99] - v92 - 8];
              v107 = v105 - 8;
              do
              {
                v108 = *(_QWORD *)v107;
                v107 -= 8;
                *(_QWORD *)v106 = v108;
                v106 -= 8;
                v104 += 8;
              }
              while (v104);
              if (v93 == (v93 & 0xFFFFFFFFFFFFFFF8))
              {
LABEL_169:
                v91 = v92;
                goto LABEL_175;
              }
              v98 -= v93 & 0xFFFFFFFFFFFFFFF8;
              v91 -= v93 & 0xFFFFFFFFFFFFFFF8;
            }
          }
          v109 = v98 - 1;
          do
          {
            v110 = *--v91;
            *v109-- = v110;
          }
          while (v91 != v92);
          v91 = v143;
LABEL_175:
          v98 = v97;
        }
        v143 = v98;
        v144 = &v97[v93 + 1];
        v145 = (unint64_t)&v97[v96];
        if (v91)
          operator delete(v91);
      }
      v144 = v18;
      v16 = (v127 + 1);
LABEL_19:
      if ((int)v17 >= (int)v16)
        goto LABEL_178;
    }
    v90 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v130 + 24))(v130);
    goto LABEL_143;
  }
LABEL_178:
  sub_19C375088(v2);
  if (v130)
    (*(void (**)(uint64_t))(*(_QWORD *)v130 + 8))(v130);
  v133 = &off_1E3D37998;
  v134 = &off_1E3D37C90;
  for (i = v137; i != &v136; i = (_QWORD *)i[1])
  {
    v112 = i[2];
    if (v112)
      MEMORY[0x1A1AD3538](v112, 0x1000C8077774924);
  }
  if (v138)
  {
    v114 = v136;
    v113 = v137;
    v115 = *v137;
    *(_QWORD *)(v115 + 8) = v136[1];
    *(_QWORD *)v114[1] = v115;
    v138 = 0;
    if (v113 != &v136)
    {
      do
      {
        v116 = (_QWORD *)v113[1];
        operator delete(v113);
        v113 = v116;
      }
      while (v116 != &v136);
    }
  }
  v117 = (void **)__p[1];
  v118 = (void **)v141;
  v119 = v141 - (unint64_t)__p[1];
  if ((unint64_t)v141 - (unint64_t)__p[1] >= 0x11)
  {
    do
    {
      v120 = *v117++;
      operator delete(v120);
      v119 -= 8;
    }
    while (v119 > 0x10);
  }
  while (v117 != v118)
  {
    v121 = *v117++;
    operator delete(v121);
  }
  if (__p[0])
    operator delete(__p[0]);
  if (v143)
    operator delete(v143);
}

void sub_19C374FA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;
  void *v31;

  sub_19C3764E4(&a21);
  v31 = *(void **)(v29 + 56);
  sub_19C376598((uint64_t)&a29);
  if (v31)
    operator delete(v31);
  _Unwind_Resume(a1);
}

uint64_t sub_19C375088(uint64_t result)
{
  _QWORD *v1;
  unint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  const float *v6;
  BOOL v7;
  unint64_t v8;
  int32x4_t v9;
  int8x16_t *v10;
  unint64_t v11;
  int32x4_t v12;
  unint64_t v13;
  _DWORD *v14;
  void **v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  void **v20;
  uint64_t v21;
  void *v22;

  v1 = (_QWORD *)result;
  v2 = *(unint64_t **)result;
  if (*(_QWORD *)result)
  {
    v3 = *v2;
    v4 = v2[1] - *v2;
    if (v4)
    {
      v5 = v4 >> 2;
      v6 = (const float *)(result + 48);
      if (v5 <= 1)
        v5 = 1;
      if (v5 < 8 || (v3 < result + 52 ? (v7 = (unint64_t)v6 >= v3 + 4 * v5) : (v7 = 1), !v7))
      {
        v8 = 0;
LABEL_16:
        v13 = v5 - v8;
        v14 = (_DWORD *)(v3 + 4 * v8);
        do
        {
          *v14 = *(_DWORD *)v6 + ~*v14;
          ++v14;
          --v13;
        }
        while (v13);
        goto LABEL_18;
      }
      v8 = v5 & 0xFFFFFFFFFFFFFFF8;
      v9 = (int32x4_t)vld1q_dup_f32(v6);
      v10 = (int8x16_t *)(v3 + 16);
      v11 = v5 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        v12 = vaddq_s32(v9, (int32x4_t)vmvnq_s8(*v10));
        v10[-1] = (int8x16_t)vaddq_s32(v9, (int32x4_t)vmvnq_s8(v10[-1]));
        *v10 = (int8x16_t)v12;
        v10 += 2;
        v11 -= 8;
      }
      while (v11);
      if (v5 != v8)
        goto LABEL_16;
    }
  }
LABEL_18:
  if (*(_BYTE *)(result + 52))
  {
    v15 = *(void ***)(result + 16);
    if (v15)
    {
      if (*v15)
        operator delete(*v15);
      result = MEMORY[0x1A1AD355C](v15, 0x1010C40113C0ABBLL);
    }
  }
  v16 = v1[7];
  if (v16)
  {
    v17 = *(void **)v16;
    if (*(_QWORD *)v16)
    {
      *(_QWORD *)(v16 + 8) = v17;
      operator delete(v17);
    }
    result = MEMORY[0x1A1AD355C](v16, 0x10C402FEFCB83);
  }
  v18 = v1[8];
  if (v18)
  {
    v19 = *(void **)v18;
    if (*(_QWORD *)v18)
    {
      *(_QWORD *)(v18 + 8) = v19;
      operator delete(v19);
    }
    result = MEMORY[0x1A1AD355C](v18, 0x10C402FEFCB83);
  }
  v20 = (void **)v1[9];
  if (v20)
  {
    if (*v20)
      operator delete(*v20);
    result = MEMORY[0x1A1AD355C](v20, 0x1010C40113C0ABBLL);
  }
  v21 = v1[10];
  if (v21)
  {
    v22 = *(void **)v21;
    if (*(_QWORD *)v21)
    {
      *(_QWORD *)(v21 + 8) = v22;
      operator delete(v22);
    }
    JUMPOUT(0x1A1AD355CLL);
  }
  return result;
}

void sub_19C375244(unint64_t *a1, unint64_t a2, const char *a3)
{
  unint64_t v6;
  unint64_t v7;
  char *v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  size_t v13;
  char *v14;
  char *v15;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  unsigned int v21;
  unint64_t v22;
  int8x16_t v23;
  int8x16_t *v24;
  unint64_t v25;
  char *v26;
  int8x16_t v27;
  int8x16_t *v28;
  unint64_t v29;
  unint64_t v30;
  int8x8_t v31;
  unint64_t v32;
  int8x8_t *v33;
  unint64_t v34;
  int8x8_t v35;
  unint64_t v36;
  int8x8_t *v37;
  unint64_t v38;
  __int128 *v39;
  char *v40;
  unint64_t v41;
  __int128 v42;
  char v43;

  v7 = a1[1];
  v6 = a1[2];
  v8 = (char *)v7;
  if (v6 - v7 >= a2)
  {
    if (!a2)
    {
LABEL_58:
      a1[1] = (unint64_t)v8;
      return;
    }
    v15 = (char *)(v7 + a2);
    if (a2 < 8)
      goto LABEL_56;
    if (v7 < (unint64_t)(a3 + 1) && v15 > a3)
      goto LABEL_56;
    if (a2 >= 0x20)
    {
      v17 = a2 & 0xFFFFFFFFFFFFFFE0;
      v27 = vld1q_dup_s8(a3);
      v28 = (int8x16_t *)(v7 + 16);
      v29 = a2 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v28[-1] = v27;
        *v28 = v27;
        v28 += 2;
        v29 -= 32;
      }
      while (v29);
      if (v17 == a2)
        goto LABEL_57;
      if ((a2 & 0x18) == 0)
      {
        v8 = (char *)(v7 + v17);
        goto LABEL_56;
      }
    }
    else
    {
      v17 = 0;
    }
    v30 = a2 & 0xFFFFFFFFFFFFFFF8;
    v31 = vld1_dup_s8(a3);
    v32 = v17 - (a2 & 0xFFFFFFFFFFFFFFF8);
    v33 = (int8x8_t *)(v7 + v17);
    do
    {
      *v33++ = v31;
      v32 += 8;
    }
    while (v32);
    if (v30 == a2)
      goto LABEL_57;
    v8 = (char *)(v7 + v30);
    do
LABEL_56:
      *v8++ = *a3;
    while (v8 != v15);
LABEL_57:
    v8 = (char *)(v7 + a2);
    goto LABEL_58;
  }
  v9 = (char *)*a1;
  v10 = v7 - *a1;
  v11 = v10 + a2;
  if ((uint64_t)(v10 + a2) < 0)
    sub_19C2A18E8();
  v12 = v6 - (_QWORD)v9;
  if (2 * v12 > v11)
    v11 = 2 * v12;
  if (v12 >= 0x3FFFFFFFFFFFFFFFLL)
    v13 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v13 = v11;
  if (v13)
    v14 = (char *)operator new(v13);
  else
    v14 = 0;
  v18 = (unint64_t)&v14[v10];
  v19 = &v14[v10 + a2];
  v20 = &v14[v10];
  if (a2 < 8)
    goto LABEL_42;
  if (v18 < (unint64_t)(a3 + 1))
  {
    v20 = &v14[v10];
    if (v19 > a3)
      goto LABEL_42;
  }
  v21 = *(unsigned __int8 *)a3;
  if (a2 >= 0x20)
  {
    v22 = a2 & 0xFFFFFFFFFFFFFFE0;
    v23 = vdupq_n_s8(v21);
    v24 = (int8x16_t *)&v14[v10 + 16];
    v25 = a2 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v24[-1] = v23;
      *v24 = v23;
      v24 += 2;
      v25 -= 32;
    }
    while (v25);
    if (v22 == a2)
    {
      v26 = v9;
      goto LABEL_44;
    }
    if ((a2 & 0x18) == 0)
    {
      v20 = (char *)(v18 + v22);
      goto LABEL_42;
    }
  }
  else
  {
    v22 = 0;
  }
  v34 = a2 & 0xFFFFFFFFFFFFFFF8;
  v35 = vdup_n_s8(v21);
  v36 = v22 - (a2 & 0xFFFFFFFFFFFFFFF8);
  v37 = (int8x8_t *)&v14[v22 + v7 - (_QWORD)v9];
  do
  {
    *v37++ = v35;
    v36 += 8;
  }
  while (v36);
  v26 = v9;
  if (v34 != a2)
  {
    v20 = (char *)(v18 + v34);
    do
LABEL_42:
      *v20++ = *a3;
    while (v20 != v19);
    v26 = (char *)*a1;
  }
LABEL_44:
  v38 = v7 - (_QWORD)v26;
  if ((char *)v7 != v26)
  {
    if (v38 < 0x20)
      goto LABEL_63;
    if ((unint64_t)(v9 - v14) < 0x20)
      goto LABEL_63;
    v8 = (char *)(v7 - (v38 & 0xFFFFFFFFFFFFFFE0));
    v39 = (__int128 *)(v7 - 16);
    v40 = &v14[v7 - 16 - (_QWORD)v9];
    v41 = v38 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v42 = *v39;
      *((_OWORD *)v40 - 1) = *(v39 - 1);
      *(_OWORD *)v40 = v42;
      v39 -= 2;
      v40 -= 32;
      v41 -= 32;
    }
    while (v41);
    v18 -= v38 & 0xFFFFFFFFFFFFFFE0;
    if (v38 == (v38 & 0xFFFFFFFFFFFFFFE0))
    {
      v8 = v26;
    }
    else
    {
LABEL_63:
      do
      {
        v43 = *--v8;
        *(_BYTE *)--v18 = v43;
      }
      while (v8 != v26);
      v8 = (char *)*a1;
    }
  }
  *a1 = v18;
  a1[1] = (unint64_t)v19;
  a1[2] = (unint64_t)&v14[v13];
  if (v8)
    operator delete(v8);
}

void sub_19C3754FC(uint64_t a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  void *v29;
  char *v30;
  char *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  BOOL v39;
  int64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  unint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  char *v54;
  unint64_t v55;
  int64_t v56;
  unint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __int128 *v63;
  char *v64;
  uint64_t v65;
  __int128 v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  char *v73;
  char *v74;
  char *v75;
  char *v76;
  unint64_t v77;
  uint64_t v78;
  __int128 *v79;
  _OWORD *v80;
  uint64_t v81;
  __int128 v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  __int128 *v86;
  _OWORD *v87;
  uint64_t v88;
  __int128 v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  int64_t v95;
  unint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  __int128 *v101;
  _OWORD *v102;
  uint64_t v103;
  __int128 v104;
  uint64_t v105;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v4;
    v6 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    *(_QWORD *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_86:
      *(_QWORD *)v5 = v8;
      goto LABEL_87;
    }
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v33 = (v5 - v9) >> 2;
      if (v5 == v9)
        v33 = 1;
      if (!(v33 >> 61))
      {
        v34 = v33 >> 2;
        v35 = 8 * v33;
        v36 = (char *)operator new(8 * v33);
        v37 = &v36[8 * v34];
        v38 = &v36[v35];
        v40 = v5 - v7;
        v39 = v5 == v7;
        v5 = v37;
        if (!v39)
        {
          v5 = &v37[v40 & 0xFFFFFFFFFFFFFFF8];
          v41 = v40 - 8;
          if ((unint64_t)(v40 - 8) >= 0x38)
          {
            v83 = &v36[8 * v34];
            v42 = v83;
            if ((unint64_t)(v83 - v7) >= 0x20)
            {
              v84 = (v41 >> 3) + 1;
              v85 = 8 * (v84 & 0x3FFFFFFFFFFFFFFCLL);
              v42 = &v37[v85];
              v86 = (__int128 *)(v6 + 3);
              v87 = v83 + 16;
              v88 = v84 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v89 = *v86;
                *(v87 - 1) = *(v86 - 1);
                *v87 = v89;
                v86 += 2;
                v87 += 2;
                v88 -= 4;
              }
              while (v88);
              if (v84 == (v84 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_79;
              v7 += v85;
            }
          }
          else
          {
            v42 = &v36[8 * v34];
          }
          do
          {
            v90 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v42 = v90;
            v42 += 8;
          }
          while (v42 != v5);
        }
        goto LABEL_79;
      }
LABEL_104:
      sub_19C2A143C();
    }
LABEL_5:
    v11 = v10 >> 3;
    if (v11 >= -1)
      v12 = v11 + 1;
    else
      v12 = v11 + 2;
    v13 = v12 >> 1;
    v14 = -v13;
    v15 = &v7[-8 * v13];
    v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      v7 = *(char **)(a1 + 8);
    }
    v5 = &v15[v16];
    *(_QWORD *)(a1 + 8) = &v7[8 * v14];
    *(_QWORD *)(a1 + 16) = &v15[v16];
    goto LABEL_86;
  }
  v18 = *(char **)(a1 + 16);
  v17 = *(char **)(a1 + 24);
  v20 = *(char **)a1;
  v19 = *(char **)(a1 + 8);
  v21 = v18 - v19;
  v22 = (v18 - v19) >> 3;
  v23 = (uint64_t)&v17[-*(_QWORD *)a1];
  if (v22 < (unint64_t)(v23 >> 3))
  {
    v24 = operator new(0x1000uLL);
    v25 = v24;
    if (v17 != v18)
    {
      *(_QWORD *)v18 = v24;
LABEL_87:
      *(_QWORD *)(a1 + 16) += 8;
      return;
    }
    if (v19 != v20)
    {
      v43 = v19;
      goto LABEL_85;
    }
    v68 = (v17 - v19) >> 2;
    if (v18 == v19)
      v68 = 1;
    if (v68 >> 61)
      goto LABEL_104;
    v69 = (v68 + 3) >> 2;
    v70 = 8 * v68;
    v71 = (char *)operator new(8 * v68);
    v43 = &v71[8 * v69];
    v72 = &v71[v70];
    v73 = v43;
    if (v18 != v19)
    {
      v73 = &v43[8 * v22];
      v74 = &v71[8 * v69];
      v75 = v19;
      if ((unint64_t)(v21 - 8) > 0x37)
      {
        v76 = &v71[8 * v69];
        v74 = v76;
        v75 = v19;
        if ((unint64_t)(v76 - v19) >= 0x20)
        {
          v77 = ((unint64_t)(v21 - 8) >> 3) + 1;
          v78 = 8 * (v77 & 0x3FFFFFFFFFFFFFFCLL);
          v74 = &v43[v78];
          v79 = (__int128 *)(v19 + 16);
          v80 = v76 + 16;
          v81 = v77 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v82 = *v79;
            *(v80 - 1) = *(v79 - 1);
            *v80 = v82;
            v79 += 2;
            v80 += 2;
            v81 -= 4;
          }
          while (v81);
          if (v77 == (v77 & 0x3FFFFFFFFFFFFFFCLL))
          {
            *(_QWORD *)a1 = v71;
            *(_QWORD *)(a1 + 8) = v43;
            *(_QWORD *)(a1 + 16) = v73;
            *(_QWORD *)(a1 + 24) = v72;
LABEL_84:
            operator delete(v19);
            v43 = *(char **)(a1 + 8);
LABEL_85:
            *((_QWORD *)v43 - 1) = v25;
            v7 = *(char **)(a1 + 8);
            v5 = *(char **)(a1 + 16);
            *(_QWORD *)(a1 + 8) = v7 - 8;
            v8 = *((_QWORD *)v7 - 1);
            *(_QWORD *)(a1 + 8) = v7;
            if (v5 != *(char **)(a1 + 24))
              goto LABEL_86;
            v9 = *(char **)a1;
            v10 = (uint64_t)&v7[-*(_QWORD *)a1];
            if ((unint64_t)v7 <= *(_QWORD *)a1)
            {
              v92 = (v5 - v9) >> 2;
              if (v5 == v9)
                v92 = 1;
              if (!(v92 >> 61))
              {
                v93 = v92 >> 2;
                v94 = 8 * v92;
                v36 = (char *)operator new(8 * v92);
                v37 = &v36[8 * v93];
                v38 = &v36[v94];
                v95 = v5 - v7;
                v39 = v5 == v7;
                v5 = v37;
                if (!v39)
                {
                  v5 = &v37[v95 & 0xFFFFFFFFFFFFFFF8];
                  v96 = v95 - 8;
                  if ((unint64_t)(v95 - 8) >= 0x38)
                  {
                    v98 = &v36[8 * v93];
                    v97 = v98;
                    if ((unint64_t)(v98 - v7) >= 0x20)
                    {
                      v99 = (v96 >> 3) + 1;
                      v100 = 8 * (v99 & 0x3FFFFFFFFFFFFFFCLL);
                      v97 = &v37[v100];
                      v101 = (__int128 *)(v7 + 16);
                      v102 = v98 + 16;
                      v103 = v99 & 0x3FFFFFFFFFFFFFFCLL;
                      do
                      {
                        v104 = *v101;
                        *(v102 - 1) = *(v101 - 1);
                        *v102 = v104;
                        v101 += 2;
                        v102 += 2;
                        v103 -= 4;
                      }
                      while (v103);
                      if (v99 == (v99 & 0x3FFFFFFFFFFFFFFCLL))
                        goto LABEL_79;
                      v7 += v100;
                    }
                  }
                  else
                  {
                    v97 = &v36[8 * v93];
                  }
                  do
                  {
                    v105 = *(_QWORD *)v7;
                    v7 += 8;
                    *(_QWORD *)v97 = v105;
                    v97 += 8;
                  }
                  while (v97 != v5);
                }
LABEL_79:
                *(_QWORD *)a1 = v36;
                *(_QWORD *)(a1 + 8) = v37;
                *(_QWORD *)(a1 + 16) = v5;
                *(_QWORD *)(a1 + 24) = v38;
                if (v9)
                {
                  operator delete(v9);
                  v5 = *(char **)(a1 + 16);
                }
                goto LABEL_86;
              }
              goto LABEL_104;
            }
            goto LABEL_5;
          }
          v75 = &v19[v78];
        }
      }
      do
      {
        v91 = *(_QWORD *)v75;
        v75 += 8;
        *(_QWORD *)v74 = v91;
        v74 += 8;
      }
      while (v74 != v73);
    }
    *(_QWORD *)a1 = v71;
    *(_QWORD *)(a1 + 8) = v43;
    *(_QWORD *)(a1 + 16) = v73;
    *(_QWORD *)(a1 + 24) = v72;
    if (!v19)
      goto LABEL_85;
    goto LABEL_84;
  }
  v26 = v23 >> 2;
  if (v17 == v20)
    v27 = 1;
  else
    v27 = v26;
  if (v27 >> 61)
    goto LABEL_104;
  v28 = (char *)operator new(8 * v27);
  v29 = operator new(0x1000uLL);
  v30 = &v28[8 * v22];
  v31 = &v28[8 * v27];
  if (v22 == v27)
  {
    if (v21 < 1)
    {
      if (v18 == v19)
        v44 = 1;
      else
        v44 = v21 >> 2;
      if (v44 >> 61)
        sub_19C2A143C();
      v30 = (char *)operator new(8 * v44);
      v31 = &v30[8 * v44];
      operator delete(v28);
      v19 = *(char **)(a1 + 8);
      v18 = *(char **)(a1 + 16);
      v28 = v30;
    }
    else
    {
      v32 = v22 + 2;
      if (v22 >= -1)
        v32 = v22 + 1;
      v30 -= 8 * (v32 >> 1);
    }
  }
  *(_QWORD *)v30 = v29;
  v45 = v30 + 8;
  if (v18 != v19)
  {
    while (v30 != v28)
    {
      v49 = v30;
      v47 = v45;
LABEL_41:
      v50 = *((_QWORD *)v18 - 1);
      v18 -= 8;
      *((_QWORD *)v49 - 1) = v50;
      v46 = v49 - 8;
      v45 = v47;
      v30 = v46;
      if (v18 == *(char **)(a1 + 8))
        goto LABEL_38;
    }
    if (v45 < v31)
    {
      v51 = (v31 - v45) >> 3;
      if (v51 >= -1)
        v52 = v51 + 1;
      else
        v52 = v51 + 2;
      v47 = &v45[8 * (v52 >> 1)];
      v49 = &v30[8 * (v52 >> 1)];
      if (v45 == v30)
      {
        v28 = v45;
      }
      else
      {
        memmove(&v30[8 * (v52 >> 1)], v30, v45 - v30);
        v28 = v30;
      }
      goto LABEL_41;
    }
    if (v31 == v30)
      v53 = 1;
    else
      v53 = (v31 - v30) >> 2;
    if (v53 >> 61)
      sub_19C2A143C();
    v54 = (char *)operator new(8 * v53);
    v28 = v54;
    v55 = (v53 + 3) >> 2;
    v49 = &v54[8 * v55];
    v47 = v49;
    v56 = v45 - v30;
    if (v45 != v30)
    {
      v47 = &v49[v56 & 0xFFFFFFFFFFFFFFF8];
      v57 = v56 - 8;
      v58 = &v54[8 * v55];
      v59 = v30;
      if (v57 >= 0x38)
      {
        v60 = 8 * v55;
        v58 = &v54[8 * v55];
        v59 = v30;
        if ((unint64_t)(v58 - v30) >= 0x20)
        {
          v61 = (v57 >> 3) + 1;
          v62 = 8 * (v61 & 0x3FFFFFFFFFFFFFFCLL);
          v58 = &v49[v62];
          v63 = (__int128 *)(v30 + 16);
          v64 = &v54[v60 + 16];
          v65 = v61 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v66 = *v63;
            *((_OWORD *)v64 - 1) = *(v63 - 1);
            *(_OWORD *)v64 = v66;
            v63 += 2;
            v64 += 32;
            v65 -= 4;
          }
          while (v65);
          if (v61 == (v61 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_61;
          v59 = &v30[v62];
        }
      }
      do
      {
        v67 = *(_QWORD *)v59;
        v59 += 8;
        *(_QWORD *)v58 = v67;
        v58 += 8;
      }
      while (v58 != v47);
    }
LABEL_61:
    v31 = &v54[8 * v53];
    operator delete(v30);
    goto LABEL_41;
  }
  v46 = v30;
  v47 = v30 + 8;
LABEL_38:
  v48 = *(char **)a1;
  *(_QWORD *)a1 = v28;
  *(_QWORD *)(a1 + 8) = v46;
  *(_QWORD *)(a1 + 16) = v47;
  *(_QWORD *)(a1 + 24) = v31;
  if (v48)
    operator delete(v48);
}

void sub_19C375B0C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19C375B40(uint64_t *a1, int a2, int a3)
{
  uint64_t v5;
  unint64_t v6;
  char *v7;
  char *v8;
  _DWORD *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  _BYTE *v17;
  _DWORD *v18;
  char *v19;
  unint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  char *v23;
  uint64_t v24;
  __int128 v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  _DWORD *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  _BYTE *v38;
  _DWORD *v39;
  unint64_t v40;
  uint64_t v41;
  _OWORD *v42;
  char *v43;
  uint64_t v44;
  __int128 v45;
  int v46;
  _QWORD *v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  _QWORD *v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  _DWORD *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  _BYTE *v67;
  _DWORD *v68;
  unint64_t v69;
  uint64_t v70;
  _OWORD *v71;
  char *v72;
  uint64_t v73;
  __int128 v74;
  int v75;
  uint64_t v76;
  unint64_t v77;
  char *v78;
  _DWORD *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  _BYTE *v86;
  _DWORD *v87;
  unint64_t v88;
  uint64_t v89;
  _OWORD *v90;
  char *v91;
  uint64_t v92;
  __int128 v93;
  int v94;
  _QWORD *v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  int v105;
  unint64_t v106;

  v5 = a1[10];
  v7 = *(char **)(v5 + 8);
  v6 = *(_QWORD *)(v5 + 16);
  v8 = v7;
  if ((unint64_t)v7 >= v6)
  {
    v10 = *(char **)v5;
    v11 = (uint64_t)&v7[-*(_QWORD *)v5];
    v12 = v11 >> 2;
    v13 = (v11 >> 2) + 1;
    if (v13 >> 62)
      sub_19C2A18E8();
    v14 = a3;
    v15 = v6 - (_QWORD)v10;
    if (v15 >> 1 > v13)
      v13 = v15 >> 1;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL)
      v16 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v16 = v13;
    if (v16)
    {
      if (v16 >> 62)
LABEL_127:
        sub_19C2A143C();
      v17 = operator new(4 * v16);
    }
    else
    {
      v17 = 0;
    }
    v18 = &v17[4 * v12];
    v19 = &v17[4 * v16];
    *v18 = a2;
    v9 = v18 + 1;
    if (v7 != v10)
    {
      v20 = v7 - v10 - 4;
      if (v20 < 0x2C)
        goto LABEL_131;
      if ((unint64_t)(v7 - v17 - v11) < 0x20)
        goto LABEL_131;
      v21 = (v20 >> 2) + 1;
      v8 = &v7[-4 * (v21 & 0x7FFFFFFFFFFFFFF8)];
      v22 = &v17[4 * v12 - 16];
      v23 = v7 - 16;
      v24 = v21 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v25 = *(_OWORD *)v23;
        *(v22 - 1) = *((_OWORD *)v23 - 1);
        *v22 = v25;
        v22 -= 2;
        v23 -= 32;
        v24 -= 8;
      }
      while (v24);
      v18 -= v21 & 0x7FFFFFFFFFFFFFF8;
      if (v21 != (v21 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_131:
        do
        {
          v26 = *((_DWORD *)v8 - 1);
          v8 -= 4;
          *--v18 = v26;
        }
        while (v8 != v10);
      }
    }
    *(_QWORD *)v5 = v18;
    *(_QWORD *)(v5 + 8) = v9;
    *(_QWORD *)(v5 + 16) = v19;
    if (v10)
      operator delete(v10);
    a3 = v14;
  }
  else
  {
    *(_DWORD *)v7 = a2;
    v9 = v7 + 4;
  }
  *(_QWORD *)(v5 + 8) = v9;
  v27 = *(_QWORD *)a1[7];
  v106 = a2;
  if (a2 >= (unint64_t)((*(_QWORD *)(a1[7] + 8) - v27) >> 2))
  {
    v105 = a3;
    do
    {
      v28 = *a1;
      if (*a1)
      {
        v30 = *(char **)(v28 + 8);
        v29 = *(_QWORD *)(v28 + 16);
        if ((unint64_t)v30 >= v29)
        {
          v32 = *(char **)v28;
          v33 = (uint64_t)&v30[-*(_QWORD *)v28];
          v34 = v33 >> 2;
          v35 = (v33 >> 2) + 1;
          if (v35 >> 62)
            goto LABEL_125;
          v36 = v29 - (_QWORD)v32;
          if (v36 >> 1 > v35)
            v35 = v36 >> 1;
          if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL)
            v37 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v37 = v35;
          if (v37)
          {
            if (v37 >> 62)
              goto LABEL_127;
            v38 = operator new(4 * v37);
          }
          else
          {
            v38 = 0;
          }
          v39 = &v38[4 * v34];
          *v39 = -1;
          v31 = v39 + 1;
          if (v30 != v32)
          {
            v40 = v30 - 4 - v32;
            if (v40 < 0x2C)
              goto LABEL_132;
            if ((unint64_t)(v30 - &v38[v33]) < 0x20)
              goto LABEL_132;
            v41 = (v40 >> 2) + 1;
            v42 = &v38[4 * v34 - 16];
            v43 = v30 - 16;
            v44 = v41 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v45 = *(_OWORD *)v43;
              *(v42 - 1) = *((_OWORD *)v43 - 1);
              *v42 = v45;
              v42 -= 2;
              v43 -= 32;
              v44 -= 8;
            }
            while (v44);
            v39 -= v41 & 0x7FFFFFFFFFFFFFF8;
            v30 -= 4 * (v41 & 0x7FFFFFFFFFFFFFF8);
            if (v41 != (v41 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_132:
              do
              {
                v46 = *((_DWORD *)v30 - 1);
                v30 -= 4;
                *--v39 = v46;
              }
              while (v30 != v32);
            }
          }
          *(_QWORD *)v28 = v39;
          *(_QWORD *)(v28 + 8) = v31;
          *(_QWORD *)(v28 + 16) = &v38[4 * v37];
          if (v32)
            operator delete(v32);
        }
        else
        {
          *(_DWORD *)v30 = -1;
          v31 = v30 + 4;
        }
        *(_QWORD *)(v28 + 8) = v31;
      }
      v47 = (_QWORD *)a1[1];
      if (v47)
      {
        v48 = v47[1];
        v49 = v47[2];
        if (v48 == v49 << 6)
        {
          if ((uint64_t)(v48 + 1) < 0)
            goto LABEL_126;
          v50 = v49 << 7;
          if (v50 <= (v48 & 0xFFFFFFFFFFFFFFC0) + 64)
            v50 = (v48 & 0xFFFFFFFFFFFFFFC0) + 64;
          if (v48 <= 0x3FFFFFFFFFFFFFFELL)
            v51 = v50;
          else
            v51 = 0x7FFFFFFFFFFFFFFFLL;
          sub_19C37665C(a1[1], v51);
          v48 = v47[1];
        }
        v47[1] = v48 + 1;
        *(_QWORD *)(*v47 + ((v48 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v48);
      }
      v52 = (_QWORD *)a1[2];
      v53 = v52[1];
      v54 = v52[2];
      if (v53 == v54 << 6)
      {
        if ((uint64_t)(v53 + 1) < 0)
          goto LABEL_126;
        v55 = v54 << 7;
        if (v55 <= (v53 & 0xFFFFFFFFFFFFFFC0) + 64)
          v55 = (v53 & 0xFFFFFFFFFFFFFFC0) + 64;
        if (v53 <= 0x3FFFFFFFFFFFFFFELL)
          v56 = v55;
        else
          v56 = 0x7FFFFFFFFFFFFFFFLL;
        sub_19C37665C(a1[2], v56);
        v53 = v52[1];
      }
      v52[1] = v53 + 1;
      *(_QWORD *)(*v52 + ((v53 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v53);
      v57 = a1[7];
      v59 = *(char **)(v57 + 8);
      v58 = *(_QWORD *)(v57 + 16);
      if ((unint64_t)v59 >= v58)
      {
        v61 = *(char **)v57;
        v62 = (uint64_t)&v59[-*(_QWORD *)v57];
        v63 = v62 >> 2;
        v64 = (v62 >> 2) + 1;
        if (v64 >> 62)
          goto LABEL_125;
        v65 = v58 - (_QWORD)v61;
        if (v65 >> 1 > v64)
          v64 = v65 >> 1;
        if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFFCLL)
          v66 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v66 = v64;
        if (v66)
        {
          if (v66 >> 62)
            goto LABEL_127;
          v67 = operator new(4 * v66);
        }
        else
        {
          v67 = 0;
        }
        v68 = &v67[4 * v63];
        *v68 = -1;
        v60 = v68 + 1;
        if (v59 != v61)
        {
          v69 = v59 - 4 - v61;
          if (v69 < 0x2C)
            goto LABEL_133;
          if ((unint64_t)(v59 - &v67[v62]) < 0x20)
            goto LABEL_133;
          v70 = (v69 >> 2) + 1;
          v71 = &v67[4 * v63 - 16];
          v72 = v59 - 16;
          v73 = v70 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v74 = *(_OWORD *)v72;
            *(v71 - 1) = *((_OWORD *)v72 - 1);
            *v71 = v74;
            v71 -= 2;
            v72 -= 32;
            v73 -= 8;
          }
          while (v73);
          v68 -= v70 & 0x7FFFFFFFFFFFFFF8;
          v59 -= 4 * (v70 & 0x7FFFFFFFFFFFFFF8);
          if (v70 != (v70 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_133:
            do
            {
              v75 = *((_DWORD *)v59 - 1);
              v59 -= 4;
              *--v68 = v75;
            }
            while (v59 != v61);
          }
        }
        *(_QWORD *)v57 = v68;
        *(_QWORD *)(v57 + 8) = v60;
        *(_QWORD *)(v57 + 16) = &v67[4 * v66];
        if (v61)
          operator delete(v61);
      }
      else
      {
        *(_DWORD *)v59 = -1;
        v60 = v59 + 4;
      }
      *(_QWORD *)(v57 + 8) = v60;
      v76 = a1[8];
      v78 = *(char **)(v76 + 8);
      v77 = *(_QWORD *)(v76 + 16);
      if ((unint64_t)v78 >= v77)
      {
        v80 = *(char **)v76;
        v81 = (uint64_t)&v78[-*(_QWORD *)v76];
        v82 = v81 >> 2;
        v83 = (v81 >> 2) + 1;
        if (v83 >> 62)
LABEL_125:
          sub_19C2A18E8();
        v84 = v77 - (_QWORD)v80;
        if (v84 >> 1 > v83)
          v83 = v84 >> 1;
        if ((unint64_t)v84 >= 0x7FFFFFFFFFFFFFFCLL)
          v85 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v85 = v83;
        if (v85)
        {
          if (v85 >> 62)
            goto LABEL_127;
          v86 = operator new(4 * v85);
        }
        else
        {
          v86 = 0;
        }
        v87 = &v86[4 * v82];
        *v87 = -1;
        v79 = v87 + 1;
        if (v78 != v80)
        {
          v88 = v78 - 4 - v80;
          if (v88 < 0x2C)
            goto LABEL_134;
          if ((unint64_t)(v78 - &v86[v81]) < 0x20)
            goto LABEL_134;
          v89 = (v88 >> 2) + 1;
          v90 = &v86[4 * v82 - 16];
          v91 = v78 - 16;
          v92 = v89 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v93 = *(_OWORD *)v91;
            *(v90 - 1) = *((_OWORD *)v91 - 1);
            *v90 = v93;
            v90 -= 2;
            v91 -= 32;
            v92 -= 8;
          }
          while (v92);
          v87 -= v89 & 0x7FFFFFFFFFFFFFF8;
          v78 -= 4 * (v89 & 0x7FFFFFFFFFFFFFF8);
          if (v89 != (v89 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_134:
            do
            {
              v94 = *((_DWORD *)v78 - 1);
              v78 -= 4;
              *--v87 = v94;
            }
            while (v78 != v80);
          }
        }
        *(_QWORD *)v76 = v87;
        *(_QWORD *)(v76 + 8) = v79;
        *(_QWORD *)(v76 + 16) = &v86[4 * v85];
        if (v80)
          operator delete(v80);
      }
      else
      {
        *(_DWORD *)v78 = -1;
        v79 = v78 + 4;
      }
      *(_QWORD *)(v76 + 8) = v79;
      v95 = (_QWORD *)a1[9];
      v96 = v95[1];
      v97 = v95[2];
      if (v96 == v97 << 6)
      {
        if ((uint64_t)(v96 + 1) < 0)
LABEL_126:
          sub_19C2A18E8();
        v98 = v97 << 7;
        if (v98 <= (v96 & 0xFFFFFFFFFFFFFFC0) + 64)
          v98 = (v96 & 0xFFFFFFFFFFFFFFC0) + 64;
        if (v96 <= 0x3FFFFFFFFFFFFFFELL)
          v99 = v98;
        else
          v99 = 0x7FFFFFFFFFFFFFFFLL;
        sub_19C37665C(a1[9], v99);
        v96 = v95[1];
      }
      v95[1] = v96 + 1;
      *(_QWORD *)(*v95 + ((v96 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v96);
      v27 = *(_QWORD *)a1[7];
    }
    while (v106 >= (*(_QWORD *)(a1[7] + 8) - v27) >> 2);
    a3 = v105;
  }
  v100 = 4 * v106;
  *(_DWORD *)(v27 + v100) = *((_DWORD *)a1 + 11);
  v101 = (_QWORD *)a1[9];
  *(_DWORD *)(*(_QWORD *)a1[8] + v100) = *((_DWORD *)a1 + 11);
  v102 = 8 * (v106 >> 6);
  v103 = 1 << v106;
  *(_QWORD *)(*v101 + v102) |= 1 << v106;
  v104 = (_QWORD *)a1[1];
  if (*((_DWORD *)a1 + 10) == a3)
  {
    if (v104)
      *(_QWORD *)(*v104 + v102) |= v103;
  }
  else
  {
    if (v104)
      *(_QWORD *)(*v104 + v102) &= ~v103;
    *(_QWORD *)a1[3] = *(_QWORD *)a1[3] & 0xFFFFFCFFFFFFFFFFLL | 0x20000000000;
  }
  ++*((_DWORD *)a1 + 11);
}

uint64_t sub_19C376268(uint64_t a1, int a2, int a3)
{
  uint64_t result;
  uint64_t v7;
  char v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;

  result = (uint64_t)(*(_QWORD *(**)(uint64_t *__return_ptr))(**(_QWORD **)(a1 + 32) + 24))(&v27);
  v28 = v27;
  HIDWORD(v27) = 2139095039;
  if (*(float *)&v27 != 3.4028e38)
    *(_QWORD *)(**(_QWORD **)(a1 + 16) + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a2;
  v7 = **(_QWORD **)(a1 + 64);
  if (*(_DWORD *)(**(_QWORD **)(a1 + 56) + 4 * a2) == *(_DWORD *)(v7 + 4 * a2))
  {
    v8 = 0;
    v9 = *(_QWORD **)(a1 + 80);
    v10 = v9[1];
    v11 = **(_QWORD **)(a1 + 16);
    v12 = (int *)(((v10 - *v9) & 0xFFFFFFFFFFFFFFFCLL) + *v9 - 4);
    do
    {
      v13 = *v12--;
      v8 |= *(_QWORD *)(v11 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v13;
    }
    while ((_DWORD)v13 != a2);
    v14 = *(uint64_t **)a1;
    v15 = **(_QWORD **)(a1 + 72);
    if ((v8 & 1) != 0)
    {
      if (v14)
      {
        v16 = *v14;
        do
        {
          v17 = *(int *)(v10 - 4);
          v10 -= 4;
          *(_DWORD *)(v16 + 4 * v17) = *(_DWORD *)(a1 + 48);
          result = (v17 >> 3) & 0x1FFFFFFFFFFFFFF8;
          *(_QWORD *)(v11 + result) |= 1 << v17;
          *(_QWORD *)(v15 + result) &= ~(1 << v17);
        }
        while ((_DWORD)v17 != a2);
      }
      else
      {
        do
        {
          v21 = *(int *)(v10 - 4);
          v10 -= 4;
          v22 = (v21 >> 3) & 0x1FFFFFFFFFFFFFF8;
          *(_QWORD *)(v11 + v22) |= 1 << v21;
          result = *(_QWORD *)(v15 + v22) & ~(1 << v21);
          *(_QWORD *)(v15 + v22) = result;
        }
        while ((_DWORD)v21 != a2);
      }
    }
    else if (v14)
    {
      v18 = *v14;
      do
      {
        v19 = *(int *)(v10 - 4);
        v10 -= 4;
        *(_DWORD *)(v18 + 4 * v19) = *(_DWORD *)(a1 + 48);
        v20 = (v19 >> 3) & 0x1FFFFFFFFFFFFFF8;
        result = *(_QWORD *)(v15 + v20) & ~(1 << v19);
        *(_QWORD *)(v15 + v20) = result;
      }
      while ((_DWORD)v19 != a2);
    }
    else
    {
      do
      {
        v23 = *(int *)(v10 - 4);
        v10 -= 4;
        v24 = (v23 >> 3) & 0x1FFFFFFFFFFFFFF8;
        result = *(_QWORD *)(v15 + v24);
        *(_QWORD *)(v15 + v24) = result & ~(1 << v23);
      }
      while ((_DWORD)v23 != a2);
    }
    v9[1] = v10;
    if ((v8 & 1) == 0)
      **(_QWORD **)(a1 + 24) = **(_QWORD **)(a1 + 24) & 0xFFFFF3FFFFFFFFFFLL | 0x80000000000;
    ++*(_DWORD *)(a1 + 48);
  }
  if (a3 != -1)
  {
    v25 = **(_QWORD **)(a1 + 16);
    if (((*(_QWORD *)(v25 + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
      *(_QWORD *)(v25 + (((unint64_t)a3 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a3;
    v26 = *(_DWORD *)(v7 + 4 * a2);
    if (v26 < *(_DWORD *)(v7 + 4 * a3))
      *(_DWORD *)(v7 + 4 * a3) = v26;
  }
  return result;
}

_QWORD *sub_19C3764E4(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  *a1 = &off_1E3D37998;
  a1[1] = &off_1E3D37C90;
  v2 = a1 + 4;
  for (i = (uint64_t *)a1[5]; i != v2; i = (uint64_t *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1A1AD3538](v4, 0x1000C8077774924);
  }
  if (a1[6])
  {
    v6 = a1[4];
    v5 = (uint64_t *)a1[5];
    v7 = *v5;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(v6 + 8);
    **(_QWORD **)(v6 + 8) = v7;
    a1[6] = 0;
    if (v5 != v2)
    {
      do
      {
        v8 = (uint64_t *)v5[1];
        operator delete(v5);
        v5 = v8;
      }
      while (v8 != v2);
    }
  }
  return a1;
}

uint64_t sub_19C376598(uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  *(_QWORD *)(a1 + 40) = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 256;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    v6 = 512;
LABEL_7:
    *(_QWORD *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    v9 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
    if (v8 != v9)
      *(_QWORD *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_19C37665C(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t *v4;
  _QWORD *v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  int v9;
  int v10;
  _QWORD *v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  if (a2 > *(_QWORD *)(a1 + 16) << 6)
  {
    if ((a2 & 0x8000000000000000) != 0)
      sub_19C2A18E8();
    v3 = ((a2 - 1) >> 6) + 1;
    v4 = (uint64_t *)operator new(8 * v3);
    v5 = *(_QWORD **)a1;
    v6 = *(_QWORD *)(a1 + 8);
    v7 = v6 & 0x3F;
    v8 = (v6 - 1) >> 6;
    if (v6 < 0x41)
      v8 = 0;
    v4[v8] = 0;
    if (v6 > 0x3F || (v6 & 0x3F) != 0)
    {
      v9 = 0;
      v10 = 0;
      v11 = &v5[v6 >> 6];
      v12 = v4;
      v13 = v5;
      do
      {
        v14 = 1 << v9;
        if (((*v13 >> v10) & 1) != 0)
          v15 = *v12 | v14;
        else
          v15 = *v12 & ~v14;
        *v12 = v15;
        v13 += v10 == 63;
        if (v10 == 63)
          v10 = 0;
        else
          ++v10;
        v12 += v9 == 63;
        if (v9 == 63)
          v9 = 0;
        else
          ++v9;
      }
      while (v10 != v7 || v13 != v11);
    }
    *(_QWORD *)a1 = v4;
    *(_QWORD *)(a1 + 16) = v3;
    if (v5)
      operator delete(v5);
  }
}

_QWORD *sub_19C37675C(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  *a1 = &off_1E3D37C90;
  v2 = a1 + 3;
  for (i = (uint64_t *)a1[4]; i != v2; i = (uint64_t *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1A1AD3538](v4, 0x1000C8077774924);
  }
  if (a1[5])
  {
    v6 = a1[3];
    v5 = (uint64_t *)a1[4];
    v7 = *v5;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(v6 + 8);
    **(_QWORD **)(v6 + 8) = v7;
    a1[5] = 0;
    if (v5 != v2)
    {
      do
      {
        v8 = (uint64_t *)v5[1];
        operator delete(v5);
        v5 = v8;
      }
      while (v8 != v2);
    }
  }
  return a1;
}

void sub_19C376808(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  *a1 = &off_1E3D37C90;
  v2 = a1 + 3;
  for (i = (uint64_t *)a1[4]; i != v2; i = (uint64_t *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1A1AD3538](v4, 0x1000C8077774924);
  }
  if (a1[5])
  {
    v6 = a1[3];
    v5 = (uint64_t *)a1[4];
    v7 = *v5;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(v6 + 8);
    **(_QWORD **)(v6 + 8) = v7;
    a1[5] = 0;
    if (v5 != v2)
    {
      do
      {
        v8 = (uint64_t *)v5[1];
        operator delete(v5);
        v5 = v8;
      }
      while (v8 != v2);
    }
  }
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C3768C4()
{
  return 56;
}

void sub_19C3768CC(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  *a1 = &off_1E3D37998;
  a1[1] = &off_1E3D37C90;
  v2 = a1 + 4;
  for (i = (uint64_t *)a1[5]; i != v2; i = (uint64_t *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1A1AD3538](v4, 0x1000C8077774924);
  }
  if (a1[6])
  {
    v6 = a1[4];
    v5 = (uint64_t *)a1[5];
    v7 = *v5;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(v6 + 8);
    **(_QWORD **)(v6 + 8) = v7;
    a1[6] = 0;
    if (v5 != v2)
    {
      do
      {
        v8 = (uint64_t *)v5[1];
        operator delete(v5);
        v5 = v8;
      }
      while (v8 != v2);
    }
  }
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C376990()
{
  return 48;
}

uint64_t sub_19C3769A0(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  void *__p[2];
  char v11;

  v11 = 5;
  strcpy((char *)__p, "ERROR");
  v2 = sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)__p, 5);
  sub_19C2A1B24(v2, (uint64_t)": ", 2);
  v3 = sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)"Fst::Write: No write stream method for ", 39);
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  v5 = *(char *)(v4 + 23);
  if (v5 >= 0)
    v6 = v4;
  else
    v6 = *(_QWORD *)v4;
  if (v5 >= 0)
    v7 = *(unsigned __int8 *)(v4 + 23);
  else
    v7 = *(_QWORD *)(v4 + 8);
  v8 = sub_19C2A1B24(v3, v6, v7);
  sub_19C2A1B24(v8, (uint64_t)" Fst type", 9);
  sub_19C351928();
  if (v11 < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_19C376A78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C376AA0(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  void *__p[2];
  char v11;

  v11 = 5;
  strcpy((char *)__p, "ERROR");
  v2 = sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)__p, 5);
  sub_19C2A1B24(v2, (uint64_t)": ", 2);
  v3 = sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)"Fst::Write: No write filename method for ", 41);
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  v5 = *(char *)(v4 + 23);
  if (v5 >= 0)
    v6 = v4;
  else
    v6 = *(_QWORD *)v4;
  if (v5 >= 0)
    v7 = *(unsigned __int8 *)(v4 + 23);
  else
    v7 = *(_QWORD *)(v4 + 8);
  v8 = sub_19C2A1B24(v3, v6, v7);
  sub_19C2A1B24(v8, (uint64_t)" Fst type", 9);
  sub_19C351928();
  if (v11 < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_19C376B78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C376BA0(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
}

uint64_t sub_19C376BAC(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
}

uint64_t sub_19C376BB8(uint64_t a1)
{
  _QWORD *v2;
  void *__p[2];
  char v5;

  v5 = 5;
  strcpy((char *)__p, "FATAL");
  v2 = sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)__p, 5);
  sub_19C2A1B24(v2, (uint64_t)": ", 2);
  sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)"ImplToFst: Assignment operator disallowed", 41);
  sub_19C351928();
  if (v5 < 0)
    operator delete(__p[0]);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) |= 4uLL;
  return a1;
}

void sub_19C376C5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  sub_19C351928();
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_19C376C8C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  void **v9;
  char v10;
  __int128 v11;
  uint64_t result;
  void *v13;
  size_t v14;
  void **v15;
  char v16;
  __int128 v17;
  void *v18;
  size_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  const void **v26;
  unsigned __int8 *v27;
  _QWORD *v28;
  _QWORD *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  const void **v41;
  __int128 *v42;
  _QWORD *v43;
  _QWORD *v44;
  __int128 *v45;
  uint64_t v46;
  _QWORD *v47;
  int v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *__p[2];
  char v63;

  v8 = *(_QWORD *)(a3 + 24);
  if (v8)
  {
    *(_DWORD *)a4 = *(_DWORD *)v8;
    v9 = (void **)(a4 + 8);
    if (v8 != a4)
    {
      v10 = *(_BYTE *)(v8 + 31);
      if (*(char *)(a4 + 31) < 0)
      {
        if (v10 >= 0)
          v13 = (void *)(v8 + 8);
        else
          v13 = *(void **)(v8 + 8);
        if (v10 >= 0)
          v14 = *(unsigned __int8 *)(v8 + 31);
        else
          v14 = *(_QWORD *)(v8 + 16);
        sub_19C2E54A8(v9, v13, v14);
      }
      else if ((*(_BYTE *)(v8 + 31) & 0x80) != 0)
      {
        sub_19C2E53E4(v9, *(void **)(v8 + 8), *(_QWORD *)(v8 + 16));
      }
      else
      {
        v11 = *(_OWORD *)(v8 + 8);
        *(_QWORD *)(a4 + 24) = *(_QWORD *)(v8 + 24);
        *(_OWORD *)v9 = v11;
      }
      v15 = (void **)(a4 + 32);
      v16 = *(_BYTE *)(v8 + 55);
      if (*(char *)(a4 + 55) < 0)
      {
        if (v16 >= 0)
          v18 = (void *)(v8 + 32);
        else
          v18 = *(void **)(v8 + 32);
        if (v16 >= 0)
          v19 = *(unsigned __int8 *)(v8 + 55);
        else
          v19 = *(_QWORD *)(v8 + 40);
        sub_19C2E54A8(v15, v18, v19);
      }
      else if ((*(_BYTE *)(v8 + 55) & 0x80) != 0)
      {
        sub_19C2E53E4(v15, *(void **)(v8 + 32), *(_QWORD *)(v8 + 40));
      }
      else
      {
        v17 = *(_OWORD *)(v8 + 32);
        *(_QWORD *)(a4 + 48) = *(_QWORD *)(v8 + 48);
        *(_OWORD *)v15 = v17;
      }
    }
    v20 = *(_OWORD *)(v8 + 56);
    v21 = *(_OWORD *)(v8 + 72);
    *(_QWORD *)(a4 + 88) = *(_QWORD *)(v8 + 88);
    *(_OWORD *)(a4 + 72) = v21;
    *(_OWORD *)(a4 + 56) = v20;
  }
  else
  {
    result = sub_19C433648(a4, (uint64_t)a2, a3);
    if (!(_DWORD)result)
      return result;
  }
  v22 = *(unsigned __int8 *)(a4 + 31);
  if ((v22 & 0x80u) == 0)
    v23 = *(unsigned __int8 *)(a4 + 31);
  else
    v23 = *(_QWORD *)(a4 + 16);
  v24 = *(unsigned __int8 *)(a1 + 39);
  v25 = (char)v24;
  if ((v24 & 0x80u) != 0)
    v24 = *(_QWORD *)(a1 + 24);
  if (v23 != v24)
    goto LABEL_43;
  v26 = (const void **)(a4 + 8);
  if (v25 >= 0)
    v27 = (unsigned __int8 *)(a1 + 16);
  else
    v27 = *(unsigned __int8 **)(a1 + 16);
  if ((v22 & 0x80) != 0)
  {
    if (memcmp(*v26, v27, *(_QWORD *)(a4 + 16)))
    {
LABEL_43:
      v63 = 5;
      strcpy((char *)__p, "ERROR");
      v28 = sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)__p, 5);
      sub_19C2A1B24(v28, (uint64_t)": ", 2);
      v29 = sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)"FstImpl::ReadHeader: Fst not of type \"", 38);
      v30 = *(char *)(a1 + 39);
      if (v30 >= 0)
        v31 = a1 + 16;
      else
        v31 = *(_QWORD *)(a1 + 16);
      if (v30 >= 0)
        v32 = *(unsigned __int8 *)(a1 + 39);
      else
        v32 = *(_QWORD *)(a1 + 24);
      v33 = sub_19C2A1B24(v29, v31, v32);
      v34 = sub_19C2A1B24(v33, (uint64_t)"\": ", 3);
      v35 = *(char *)(a3 + 23);
      if (v35 >= 0)
        v36 = a3;
      else
        v36 = *(_QWORD *)a3;
      if (v35 >= 0)
        v37 = *(unsigned __int8 *)(a3 + 23);
      else
        v37 = *(_QWORD *)(a3 + 8);
      goto LABEL_82;
    }
  }
  else if (*(_BYTE *)(a4 + 31))
  {
    while (*(unsigned __int8 *)v26 == *v27)
    {
      v26 = (const void **)((char *)v26 + 1);
      ++v27;
      if (!--v22)
        goto LABEL_55;
    }
    goto LABEL_43;
  }
LABEL_55:
  sub_19C373724();
  v38 = *(unsigned __int8 *)(a4 + 55);
  if ((v38 & 0x80u) == 0)
    v39 = *(unsigned __int8 *)(a4 + 55);
  else
    v39 = *(_QWORD *)(a4 + 40);
  v40 = *((_QWORD *)&xmmword_1EDB97290 + 1);
  if (byte_1EDB972A7 >= 0)
    v40 = byte_1EDB972A7;
  if (v39 != v40)
    goto LABEL_70;
  v41 = (const void **)(a4 + 32);
  if (byte_1EDB972A7 >= 0)
    v42 = &xmmword_1EDB97290;
  else
    v42 = (__int128 *)xmmword_1EDB97290;
  if ((v38 & 0x80) != 0)
  {
    if (memcmp(*v41, v42, *(_QWORD *)(a4 + 40)))
    {
LABEL_70:
      v63 = 5;
      strcpy((char *)__p, "ERROR");
      v43 = sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)__p, 5);
      sub_19C2A1B24(v43, (uint64_t)": ", 2);
      v44 = sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)"FstImpl::ReadHeader: Arc not of type \"", 38);
      sub_19C373724();
      if (byte_1EDB972A7 >= 0)
        v45 = &xmmword_1EDB97290;
      else
        v45 = (__int128 *)xmmword_1EDB97290;
      if (byte_1EDB972A7 >= 0)
        v46 = byte_1EDB972A7;
      else
        v46 = *((_QWORD *)&xmmword_1EDB97290 + 1);
      v47 = sub_19C2A1B24(v44, (uint64_t)v45, v46);
      v34 = sub_19C2A1B24(v47, (uint64_t)"\": ", 3);
      v48 = *(char *)(a3 + 23);
      if (v48 >= 0)
        v36 = a3;
      else
        v36 = *(_QWORD *)a3;
      if (v48 >= 0)
        v37 = *(unsigned __int8 *)(a3 + 23);
      else
        v37 = *(_QWORD *)(a3 + 8);
      goto LABEL_82;
    }
  }
  else if (*(_BYTE *)(a4 + 55))
  {
    while (*(unsigned __int8 *)v41 == *(unsigned __int8 *)v42)
    {
      v41 = (const void **)((char *)v41 + 1);
      v42 = (__int128 *)((char *)v42 + 1);
      if (!--v38)
        goto LABEL_85;
    }
    goto LABEL_70;
  }
LABEL_85:
  if (*(int *)(a4 + 56) > 0)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a4 + 64);
    if ((*(_BYTE *)(a4 + 60) & 1) != 0)
    {
      *(_QWORD *)(a1 + 40) = sub_19C377220(a2, a3);
      if (*(_BYTE *)(a3 + 52))
      {
LABEL_88:
        if ((*(_BYTE *)(a4 + 60) & 2) == 0)
          goto LABEL_89;
        goto LABEL_108;
      }
    }
    else if (*(_BYTE *)(a3 + 52))
    {
      goto LABEL_88;
    }
    v57 = *(_QWORD *)(a1 + 40);
    if (v57)
      (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v57 + 8))(v57, v42);
    *(_QWORD *)(a1 + 40) = 0;
    if ((*(_BYTE *)(a4 + 60) & 2) == 0)
    {
LABEL_89:
      if (*(_BYTE *)(a3 + 53))
        goto LABEL_90;
      goto LABEL_109;
    }
LABEL_108:
    *(_QWORD *)(a1 + 48) = sub_19C377220(a2, a3);
    if (*(_BYTE *)(a3 + 53))
    {
LABEL_90:
      v49 = *(_QWORD *)(a3 + 32);
      if (!v49)
      {
LABEL_115:
        v60 = *(_QWORD *)(a3 + 40);
        if (v60)
        {
          v61 = *(_QWORD *)(a1 + 48);
          if (v61)
          {
            (*(void (**)(_QWORD, __int128 *))(*(_QWORD *)v61 + 8))(*(_QWORD *)(a1 + 48), v42);
            v60 = *(_QWORD *)(a3 + 40);
          }
          *(_QWORD *)(a1 + 48) = (*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v60 + 16))(v60, v42);
        }
        return 1;
      }
LABEL_112:
      v59 = *(_QWORD *)(a1 + 40);
      if (v59)
      {
        (*(void (**)(_QWORD, __int128 *))(*(_QWORD *)v59 + 8))(*(_QWORD *)(a1 + 40), v42);
        v49 = *(_QWORD *)(a3 + 32);
      }
      *(_QWORD *)(a1 + 40) = (*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v49 + 16))(v49, v42);
      goto LABEL_115;
    }
LABEL_109:
    v58 = *(_QWORD *)(a1 + 48);
    if (v58)
      (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v58 + 8))(v58, v42);
    *(_QWORD *)(a1 + 48) = 0;
    v49 = *(_QWORD *)(a3 + 32);
    if (!v49)
      goto LABEL_115;
    goto LABEL_112;
  }
  v63 = 5;
  strcpy((char *)__p, "ERROR");
  v50 = sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)__p, 5);
  sub_19C2A1B24(v50, (uint64_t)": ", 2);
  v51 = sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)"FstImpl::ReadHeader: Obsolete ", 30);
  v52 = *(char *)(a1 + 39);
  if (v52 >= 0)
    v53 = a1 + 16;
  else
    v53 = *(_QWORD *)(a1 + 16);
  if (v52 >= 0)
    v54 = *(unsigned __int8 *)(a1 + 39);
  else
    v54 = *(_QWORD *)(a1 + 24);
  v55 = sub_19C2A1B24(v51, v53, v54);
  v34 = sub_19C2A1B24(v55, (uint64_t)" Fst version: ", 14);
  v56 = *(char *)(a3 + 23);
  if (v56 >= 0)
    v36 = a3;
  else
    v36 = *(_QWORD *)a3;
  if (v56 >= 0)
    v37 = *(unsigned __int8 *)(a3 + 23);
  else
    v37 = *(_QWORD *)(a3 + 8);
LABEL_82:
  sub_19C2A1B24(v34, v36, v37);
  sub_19C351928();
  if (v63 < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_19C3771E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_19C377220(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  int v4;
  std::string *v5;
  uint64_t v6;
  _OWORD *v7;
  __int128 v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  void *v17[4];
  std::string::value_type __c[8];
  char v19;
  uint64_t *v20;
  std::string __p;
  unint64_t v22;
  std::string v23;
  int v24;
  std::string::value_type v25;

  memset(v17, 0, sizeof(v17));
  if (&v17[1] != (void **)a2)
  {
    if (*(char *)(a2 + 23) < 0)
    {
      sub_19C2E53E4(&v17[1], *(void **)a2, *(_QWORD *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)&v17[1] = *(_OWORD *)a2;
      v17[3] = *(void **)(a2 + 16);
    }
  }
  v24 = 0;
  std::istream::read();
  if ((*((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 32) & 5) == 0)
  {
    memset(&v23, 0, sizeof(v23));
    LODWORD(__p.__r_.__value_.__l.__data_) = 0;
    std::istream::read();
    if (SLODWORD(__p.__r_.__value_.__l.__data_) >= 1)
    {
      v4 = 0;
      do
      {
        __c[0] = 0;
        std::istream::read();
        std::string::push_back(&v23, __c[0]);
        ++v4;
      }
      while (v4 < SLODWORD(__p.__r_.__value_.__l.__data_));
    }
    v5 = (std::string *)operator new();
    v6 = (uint64_t)v5;
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
      sub_19C2B5238(v5, v23.__r_.__value_.__l.__data_, v23.__r_.__value_.__l.__size_);
    else
      *v5 = v23;
    *(_QWORD *)(v6 + 24) = 0;
    *(_QWORD *)(v6 + 32) = 0;
    *(_QWORD *)(v6 + 40) = -1;
    *(_QWORD *)(v6 + 48) = 0;
    *(_QWORD *)(v6 + 56) = 0;
    *(_QWORD *)(v6 + 64) = 0;
    *(_QWORD *)(v6 + 88) = 0;
    *(_QWORD *)(v6 + 96) = 0;
    *(_QWORD *)(v6 + 80) = 0;
    v7 = operator new(0x80uLL);
    *(_QWORD *)(v6 + 152) = 0;
    *(_QWORD *)(v6 + 80) = v7;
    *(_QWORD *)(v6 + 88) = v7 + 8;
    *(_QWORD *)(v6 + 96) = v7 + 8;
    *(_QWORD *)(v6 + 104) = 15;
    *(_QWORD *)&v8 = -1;
    *((_QWORD *)&v8 + 1) = -1;
    *v7 = v8;
    v7[1] = v8;
    v7[2] = v8;
    v7[3] = v8;
    v7[4] = v8;
    v7[5] = v8;
    v7[6] = v8;
    v7[7] = v8;
    *(_QWORD *)(v6 + 120) = 0;
    *(_QWORD *)(v6 + 128) = 0;
    *(_QWORD *)(v6 + 160) = 0;
    *(_QWORD *)(v6 + 136) = 0;
    *(_QWORD *)(v6 + 144) = v6 + 152;
    *(_DWORD *)(v6 + 168) = 1;
    *(_BYTE *)(v6 + 172) = 0;
    *(_OWORD *)(v6 + 208) = 0u;
    *(_OWORD *)(v6 + 192) = 0u;
    *(_OWORD *)(v6 + 176) = 0u;
    std::istream::read();
    v22 = 0;
    std::istream::read();
    if ((*((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 32) & 5) != 0)
    {
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = 5;
      strcpy((char *)&__p, "ERROR");
      v9 = sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)&__p, 5);
      sub_19C2A1B24(v9, (uint64_t)": ", 2);
      sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)"SymbolTable::Read: read failed", 30);
      sub_19C351928();
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v10 = sub_19C3A2938(v6);
      MEMORY[0x1A1AD355C](v10, 0x10B2C404FCE5648);
      v6 = 0;
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
      {
LABEL_38:
        operator delete(v23.__r_.__value_.__l.__data_);
        if (!v6)
          goto LABEL_39;
LABEL_32:
        v13 = (_QWORD *)operator new();
        *v13 = &off_1E3D37CB8;
        v13[1] = v6;
        if (SHIBYTE(v17[3]) < 0)
          goto LABEL_40;
        return v13;
      }
LABEL_31:
      if (!v6)
        goto LABEL_39;
      goto LABEL_32;
    }
    memset(&__p, 0, sizeof(__p));
    v20 = 0;
    *(_BYTE *)(v6 + 172) = 0;
    if (v22)
    {
      v11 = 0;
      while (1)
      {
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          *__p.__r_.__value_.__l.__data_ = 0;
          __p.__r_.__value_.__l.__size_ = 0;
        }
        else
        {
          __p.__r_.__value_.__s.__data_[0] = 0;
          *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
        }
        *(_DWORD *)__c = 0;
        std::istream::read();
        if (*(int *)__c >= 1)
        {
          v12 = 0;
          do
          {
            v25 = 0;
            std::istream::read();
            std::string::push_back(&__p, v25);
            ++v12;
          }
          while (v12 < *(int *)__c);
        }
        std::istream::read();
        if ((*((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 32) & 5) != 0)
          break;
        sub_19C3A20C4(v6, (uint64_t)&__p, v20);
        if (++v11 >= v22)
          goto LABEL_29;
      }
      v19 = 5;
      strcpy(__c, "ERROR");
      v14 = sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)__c, 5);
      sub_19C2A1B24(v14, (uint64_t)": ", 2);
      sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)"SymbolTable::Read: read failed", 30);
      sub_19C351928();
      if (v19 < 0)
        operator delete(*(void **)__c);
      v15 = sub_19C3A2938(v6);
      MEMORY[0x1A1AD355C](v15, 0x10B2C404FCE5648);
      v6 = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
LABEL_37:
        operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_38;
        goto LABEL_31;
      }
    }
    else
    {
LABEL_29:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_37;
    }
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_38;
    goto LABEL_31;
  }
  *((_BYTE *)&v23.__r_.__value_.__s + 23) = 5;
  strcpy((char *)&v23, "ERROR");
  v3 = sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)&v23, 5);
  sub_19C2A1B24(v3, (uint64_t)": ", 2);
  sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)"SymbolTable::Read: read failed", 30);
  sub_19C351928();
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
LABEL_39:
  v13 = 0;
  if (SHIBYTE(v17[3]) < 0)
LABEL_40:
    operator delete(v17[1]);
  return v13;
}

void sub_19C37771C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;

  sub_19C351928();
  if (a20 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  if (*(char *)(v27 - 57) < 0)
    operator delete(*(void **)(v27 - 80));
  sub_19C3777FC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_19C3777FC(uint64_t a1)
{
  void *v2;

  if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
    v2 = *(void **)a1;
    if (!*(_QWORD *)a1)
      return a1;
    goto LABEL_3;
  }
  v2 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
LABEL_3:
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

_QWORD *sub_19C377848(_QWORD *a1)
{
  _DWORD *v2;
  int v3;

  *a1 = off_1E3D384B0;
  v2 = (_DWORD *)a1[1];
  v3 = v2[14] - 1;
  v2[14] = v3;
  if (!v3)
    (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_19C377894(_QWORD *a1)
{
  _DWORD *v1;
  int v2;

  *a1 = off_1E3D384B0;
  v1 = (_DWORD *)a1[1];
  v2 = v1[14] - 1;
  v1[14] = v2;
  if (!v2)
    (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C3778F0(uint64_t a1)
{
  return *(unsigned int *)(*(_QWORD *)(a1 + 8) + 112);
}

float sub_19C3778FC@<S0>(uint64_t a1@<X0>, int a2@<W1>, float *a3@<X8>)
{
  float result;

  result = *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 80) + 20 * a2);
  *a3 = result;
  return result;
}

uint64_t sub_19C377918(uint64_t a1, int a2)
{
  return *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 80) + 20 * a2 + 8);
}

uint64_t sub_19C377930(uint64_t a1, int a2)
{
  return *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 80) + 20 * a2 + 12);
}

uint64_t sub_19C377948(uint64_t a1, int a2)
{
  return *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 80) + 20 * a2 + 16);
}

uint64_t sub_19C377960(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v5;
  uint64_t v7;

  if (!a3)
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8), a2);
  v7 = 0;
  v5 = sub_19C373950(a1, a2, &v7);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) & (~v7 | 4) | v7 & v5;
  return v5 & a2;
}

uint64_t sub_19C3779E8(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) + 16;
}

_QWORD *sub_19C3779F4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = (_QWORD *)operator new();
  v3 = *(_QWORD *)(a1 + 8);
  ++*(_DWORD *)(v3 + 56);
  *result = &off_1E3D38410;
  result[1] = v3;
  return result;
}

uint64_t sub_19C377A44(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t i;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  unsigned int v37;
  void *__p[2];
  char v39;
  void *v40[2];
  char v41;
  uint64_t v42;
  void *v43[2];
  void *v44[2];
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a3 + 27))
    v6 = 1;
  else
    v6 = 2;
  v7 = a1[1];
  if (v7)
  {
    v8 = 0;
    v36 = 0;
    v9 = *(_QWORD *)(v7 + 104);
    v10 = *(int *)(v7 + 96);
  }
  else
  {
    v11 = *(_QWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 40);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v11 + 32))(&v42, v11, 0, 1, 16);
    v8 = v50;
    if (v50 == -1)
    {
      v10 = *(unsigned int *)(a1[1] + 96);
      if ((int)v10 < 1)
      {
        v9 = 0;
        v10 = 0;
      }
      else
      {
        v12 = 0;
        v9 = 0;
        do
          v9 += (*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 32))(a1, v12++);
        while (v10 != v12);
      }
      v36 = 0;
      v8 = -1;
    }
    else
    {
      v36 = 1;
      v9 = -1;
      v10 = -1;
    }
  }
  v45 = 0u;
  v46 = 0u;
  *(_OWORD *)v43 = 0u;
  *(_OWORD *)v44 = 0u;
  v48 = 0;
  v49 = 0;
  v47 = -1;
  v47 = (*(int (**)(_QWORD *))(*a1 + 16))(a1);
  v48 = v10;
  v49 = v9;
  v41 = 5;
  strcpy((char *)v40, "const");
  v35 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 56))(a1, 0x3FFFFFFF0004, 1) | 1;
  sub_19C372FF8((uint64_t)a1, (uint64_t)a2, (_BYTE *)a3, v6, v40, v35, (uint64_t)&v42);
  if (*(_BYTE *)(a3 + 27) && (sub_19C432CA0(a2) & 1) == 0)
  {
    v39 = 5;
    strcpy((char *)__p, "ERROR");
    v16 = sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)__p, 5);
    sub_19C2A1B24(v16, (uint64_t)": ", 2);
    sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)"Could not align file during write after header", 46);
  }
  else
  {
    v33 = v8;
    v34 = v6;
    v13 = *(unsigned int *)(a1[1] + 96);
    if ((int)v13 < 1)
    {
      v15 = 0;
      v13 = 0;
    }
    else
    {
      v14 = 0;
      v15 = 0;
      do
      {
        (*(void (**)(void **__return_ptr, _QWORD *, uint64_t))(*a1 + 24))(__p, a1, v14);
        v37 = (*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 32))(a1, v14);
        (*(void (**)(_QWORD *, uint64_t))(*a1 + 40))(a1, v14);
        (*(void (**)(_QWORD *, uint64_t))(*a1 + 48))(a1, v14);
        std::ostream::write();
        v15 += v37;
        ++v14;
      }
      while (v13 != v14);
    }
    v48 = v13;
    v49 = v15;
    if (*(_BYTE *)(a3 + 27))
    {
      if ((sub_19C432CA0(a2) & 1) == 0)
      {
        v39 = 5;
        strcpy((char *)__p, "ERROR");
        v17 = sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)__p, 5);
        sub_19C2A1B24(v17, (uint64_t)": ", 2);
        sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)"Could not align file during write after writing states", 54);
        sub_19C351928();
        if (v39 < 0)
          operator delete(__p[0]);
      }
    }
    v18 = *(unsigned int *)(a1[1] + 96);
    if ((int)v18 >= 1)
    {
      for (i = 0; i != v18; ++i)
      {
        v20 = a1[1];
        v21 = *(_QWORD *)(v20 + 80) + 20 * i;
        v22 = *(unsigned int *)(v21 + 8);
        if ((_DWORD)v22)
        {
          v23 = *(_QWORD *)(v20 + 88) + 16 * *(unsigned int *)(v21 + 4);
          do
          {
            std::ostream::write();
            v23 += 16;
            --v22;
          }
          while (v22);
        }
      }
    }
    std::ostream::flush();
    if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) != 0)
    {
      v39 = 5;
      strcpy((char *)__p, "ERROR");
      v24 = sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)__p, 5);
      sub_19C2A1B24(v24, (uint64_t)": ", 2);
      v25 = sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)"ConstFst Write write failed: ", 29);
      v26 = *(char *)(a3 + 23);
      if (v26 >= 0)
        v27 = a3;
      else
        v27 = *(_QWORD *)a3;
      if (v26 >= 0)
        v28 = *(unsigned __int8 *)(a3 + 23);
      else
        v28 = *(_QWORD *)(a3 + 8);
      sub_19C2A1B24(v25, v27, v28);
    }
    else
    {
      if (v36)
      {
        v29 = sub_19C373344((uint64_t)a1, a2, a3, v34, v40, v35, (uint64_t)&v42, v33);
        goto LABEL_44;
      }
      if (v48 == v10)
      {
        if (v49 == v9)
        {
          v29 = 1;
          goto LABEL_44;
        }
        v39 = 5;
        strcpy((char *)__p, "ERROR");
        v32 = sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)__p, 5);
        sub_19C2A1B24(v32, (uint64_t)": ", 2);
        sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)"Inconsistent number of arcs observed during write", 49);
      }
      else
      {
        v39 = 5;
        strcpy((char *)__p, "ERROR");
        v31 = sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)__p, 5);
        sub_19C2A1B24(v31, (uint64_t)": ", 2);
        sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)"Inconsistent number of states observed during write", 51);
      }
    }
  }
  sub_19C351928();
  if (v39 < 0)
    operator delete(__p[0]);
  v29 = 0;
LABEL_44:
  if ((v41 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v45) & 0x80000000) == 0)
      goto LABEL_46;
LABEL_49:
    operator delete(v44[1]);
    if ((SHIBYTE(v44[0]) & 0x80000000) == 0)
      return v29;
LABEL_50:
    operator delete(v43[0]);
    return v29;
  }
  operator delete(v40[0]);
  if (SHIBYTE(v45) < 0)
    goto LABEL_49;
LABEL_46:
  if (SHIBYTE(v44[0]) < 0)
    goto LABEL_50;
  return v29;
}

void sub_19C378040(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  sub_19C351928();
  if (a21 < 0)
  {
    operator delete(__p);
    if (a27 < 0)
    {
LABEL_5:
      operator delete(a22);
      if ((a40 & 0x80000000) == 0)
        goto LABEL_6;
      goto LABEL_9;
    }
  }
  else if (a27 < 0)
  {
    goto LABEL_5;
  }
  if ((a40 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a34 & 0x80000000) == 0)
LABEL_11:
      _Unwind_Resume(a1);
LABEL_10:
    operator delete(a29);
    goto LABEL_11;
  }
LABEL_9:
  operator delete(a35);
  if ((a34 & 0x80000000) == 0)
    goto LABEL_11;
  goto LABEL_10;
}

uint64_t sub_19C378114(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
}

uint64_t sub_19C378120(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
}

uint64_t sub_19C37812C(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(v2 + 96);
  return result;
}

uint64_t sub_19C378140(uint64_t result, int a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(*(_QWORD *)(result + 8) + 80) + 20 * a2;
  v5 = *(unsigned int *)(v3 + 4);
  v4 = *(unsigned int *)(v3 + 8);
  v6 = *(_QWORD *)(*(_QWORD *)(result + 8) + 88) + 16 * v5;
  *a3 = 0;
  a3[1] = v6;
  a3[2] = v4;
  a3[3] = 0;
  return result;
}

uint64_t sub_19C378164(uint64_t a1)
{
  return *(unsigned int *)(*(_QWORD *)(a1 + 8) + 96);
}

uint64_t sub_19C378178(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = off_1E3D37D50;
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)(a1 + 64);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *(_QWORD *)a1 = off_1E3D383E0;
  v4 = *(_QWORD *)(a1 + 40);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *(_QWORD *)(a1 + 48);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void sub_19C378210(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = off_1E3D37D50;
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)(a1 + 64);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *(_QWORD *)a1 = off_1E3D383E0;
  v4 = *(_QWORD *)(a1 + 40);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *(_QWORD *)(a1 + 48);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C3782B8(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;

  std::mutex::~mutex((std::mutex *)(a1 + 8));
  v2 = *(uint64_t **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    v3 = *v2;
    *v2 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    MEMORY[0x1A1AD355C](v2, 0x1020C405F07FB98);
  }
  return a1;
}

BOOL sub_19C37831C(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4)
{
  _QWORD *v6;
  char *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  int v15;
  char *v16;
  void **v18;
  char *__s;
  __int128 v20;
  uint64_t v21;
  _DWORD v22[2];

  memset(v22, 0, 7);
  if (a2 == a3)
    return 0;
  v6 = a2;
  v8 = 0;
  LOBYTE(v9) = 0;
  while (1)
  {
    v10 = *v6;
    v11 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v6 + 80))(*v6, a1);
    (*(void (**)(char **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v10 + 56))(&__s, v10, v11);
    if ((v9 & 0x80) != 0)
      operator delete(v8);
    v8 = __s;
    v12 = v20;
    v22[0] = DWORD2(v20);
    *(_DWORD *)((char *)v22 + 3) = *(_DWORD *)((char *)&v20 + 11);
    v9 = SHIBYTE(v20);
    v13 = HIBYTE(v20);
    if (v20 < 0)
      v13 = v20;
    v14 = v13 != 0;
    if (v13)
      break;
    if (++v6 == a3)
      goto LABEL_16;
  }
  v15 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 88))(v10, a1);
  switch(v15)
  {
    case 'Y':
      __s = "xFULLNAMEx";
      if ((v9 & 0x80000000) == 0)
      {
        *(_QWORD *)&v20 = v8;
        *((_QWORD *)&v20 + 1) = v12;
        LODWORD(v21) = v22[0];
        *(_DWORD *)((char *)&v21 + 3) = *(_DWORD *)((char *)v22 + 3);
        HIBYTE(v21) = v9;
        v16 = "xFULLNAMEx";
        goto LABEL_24;
      }
      break;
    case 'E':
      __s = "xSURNAMEx";
      if ((v9 & 0x80000000) == 0)
      {
        *(_QWORD *)&v20 = v8;
        *((_QWORD *)&v20 + 1) = v12;
        LODWORD(v21) = v22[0];
        *(_DWORD *)((char *)&v21 + 3) = *(_DWORD *)((char *)v22 + 3);
        HIBYTE(v21) = v9;
        v16 = "xSURNAMEx";
        goto LABEL_24;
      }
      break;
    case 'D':
      __s = "xGIVENNAMEx";
      if ((v9 & 0x80000000) == 0)
      {
        *(_QWORD *)&v20 = v8;
        *((_QWORD *)&v20 + 1) = v12;
        LODWORD(v21) = v22[0];
        *(_DWORD *)((char *)&v21 + 3) = *(_DWORD *)((char *)v22 + 3);
        HIBYTE(v21) = v9;
        v16 = "xGIVENNAMEx";
        goto LABEL_24;
      }
      break;
    default:
LABEL_16:
      if ((v9 & 0x80000000) == 0)
        return v14;
      goto LABEL_17;
  }
  sub_19C2B5238(&v20, v8, v12);
  v16 = __s;
LABEL_24:
  sub_19C31474C((void **)a4, v16);
  v18 = (void **)(a4 + 24);
  if (*(char *)(a4 + 47) < 0)
    operator delete(*v18);
  *(_OWORD *)v18 = v20;
  *(_QWORD *)(a4 + 40) = v21;
  if (v9 < 0)
LABEL_17:
    operator delete(v8);
  return v14;
}

void sub_19C37858C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  void *v16;
  char v17;

  if (v17 < 0)
  {
    operator delete(v16);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_19C3785E8(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  int v7;
  const void *v8;
  const void *v9;
  uint64_t **v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  const void *v16;
  size_t v17;
  int v18;
  uint64_t *result;
  uint64_t *v20;
  uint64_t *v21;
  _BYTE *v22;
  uint64_t *v23;

  v6 = a1 + 1;
  v5 = a1[1];
  if (!v5)
  {
    v10 = a1 + 1;
    goto LABEL_29;
  }
  v7 = *((char *)a2 + 23);
  if (v7 >= 0)
    v8 = a2;
  else
    v8 = *a2;
  if (v7 >= 0)
    v9 = (const void *)*((unsigned __int8 *)a2 + 23);
  else
    v9 = a2[1];
  do
  {
    while (1)
    {
      v10 = (uint64_t **)v5;
      v13 = v5[4];
      v11 = v5 + 4;
      v12 = (_QWORD *)v13;
      v14 = *((char *)v11 + 23);
      v15 = v14 >= 0 ? v11 : v12;
      v16 = v14 >= 0 ? (const void *)*((unsigned __int8 *)v11 + 23) : (const void *)v11[1];
      v17 = (size_t)(v16 >= v9 ? v9 : v16);
      v18 = memcmp(v8, v15, v17);
      if (v18)
        break;
      if (v9 >= v16)
        goto LABEL_22;
LABEL_8:
      v5 = *v10;
      v6 = v10;
      if (!*v10)
        goto LABEL_29;
    }
    if (v18 < 0)
      goto LABEL_8;
LABEL_22:
    result = (uint64_t *)memcmp(v15, v8, v17);
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
        return result;
    }
    else if (v16 >= v9)
    {
      return result;
    }
    v5 = v10[1];
  }
  while (v5);
  v6 = v10 + 1;
LABEL_29:
  v20 = (uint64_t *)operator new(0x50uLL);
  v21 = v20;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_19C2B5238((_BYTE *)v20 + 32, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *((_OWORD *)v20 + 2) = *(_OWORD *)a3;
    v20[6] = *(_QWORD *)(a3 + 16);
  }
  v22 = v21 + 7;
  if (*(char *)(a3 + 47) < 0)
  {
    sub_19C2B5238(v22, *(void **)(a3 + 24), *(_QWORD *)(a3 + 32));
  }
  else
  {
    *(_OWORD *)v22 = *(_OWORD *)(a3 + 24);
    v21[9] = *(_QWORD *)(a3 + 40);
  }
  *v21 = 0;
  v21[1] = 0;
  v21[2] = (uint64_t)v10;
  *v6 = v21;
  v23 = (uint64_t *)**a1;
  if (v23)
  {
    *a1 = v23;
    v21 = *v6;
  }
  result = sub_19C2A2310(a1[1], v21);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

void sub_19C378774(_Unwind_Exception *a1)
{
  char *v1;
  void **v2;

  if (v1[55] < 0)
    operator delete(*v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19C3787A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  _QWORD **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  _BYTE *v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 *v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD **v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  _DWORD *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  __int128 v56;
  _QWORD *v57;
  _QWORD *v58;
  _QWORD **v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  _QWORD *v67;
  _QWORD *v68;
  int v69;
  int v70;
  BOOL v71;
  int v72;
  int v73;
  int v74;
  BOOL v75;
  int v76;
  int v77;
  int v78;
  BOOL v79;
  int v80;
  _QWORD *v81;
  _QWORD *v82;
  _QWORD *v83;
  _QWORD **v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  int v92;
  _BYTE *v93;
  _BYTE *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  _QWORD *v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  unsigned __int8 *v103;
  uint64_t v104;
  int v105;
  int v106;
  uint64_t v107;
  _QWORD *v108;
  _QWORD *v109;
  int v110;
  int v111;
  BOOL v112;
  int v113;
  _QWORD *v114;
  _QWORD *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  _QWORD *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  _QWORD *v133;
  _QWORD *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  int v142;
  int v143;
  BOOL v144;
  int v145;
  _QWORD *v146;
  _QWORD *v147;
  _QWORD *v148;
  _QWORD *v149;
  _QWORD *v150;
  _QWORD *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  int v160;
  uint64_t v161;
  int v162;
  _DWORD *v163;
  char *v164;
  unint64_t v165;
  _DWORD *v166;
  char *v167;
  int64_t v168;
  uint64_t v169;
  unint64_t v170;
  uint64_t v171;
  unint64_t v172;
  _BYTE *v173;
  _DWORD *v174;
  unint64_t v175;
  char *v176;
  int v177;
  uint64_t v178;
  _OWORD *v179;
  char *v180;
  uint64_t v181;
  __int128 v182;
  void *__p;
  void *v185;
  char *v186;
  uint64_t v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  uint64_t v191;
  void *v192;
  _DWORD *v193;
  uint64_t v194;
  void (**v195)();
  _DWORD *v196;
  uint64_t v197;

  v5 = a3;
  switch(*(_DWORD *)(a4 + 4))
  {
    case 0:
      v8 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, 1);
      if (!v8)
      {
        v8 = operator new();
        sub_19C3839E8(v8, a1, 1);
      }
      v9 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 128))(a2, 0);
      if (!v9)
      {
        v9 = operator new();
        sub_19C3839E8(v9, a2, 0);
      }
      v10 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 24))(v8, 0);
      v11 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v9 + 24))(v9, 0);
      if (v10 == 1 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 48))(v8) & 0x20) != 0)
        goto LABEL_12;
      if (!v11 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 48))(v9) & 0x10) != 0)
        goto LABEL_106;
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 48))(v8) & 0x20) != 0
        && (*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 24))(v8, 1) == 1)
      {
LABEL_12:
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
        LOBYTE(v187) = 1;
        v188 = 0u;
        v189 = 0u;
        v190 = 0u;
        v12 = operator new();
        sub_19C37B8AC(v12, (char *)&v187);
        *(_QWORD *)v12 = off_1E3D38320;
        sub_19C37B9F8(v12, a1, a2);
        *(_QWORD *)v12 = &off_1E3D38000;
        v13 = (_QWORD **)operator new();
        v14 = operator new();
        v15 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, 1);
        *(_QWORD *)v14 = v15;
        if (!v15)
        {
          v16 = operator new();
          sub_19C3839E8(v16, a1, 1);
          *(_QWORD *)v14 = v16;
        }
        *(_BYTE *)(v14 + 8) = 0;
        *v13 = (_QWORD *)v14;
        v17 = operator new();
        v18 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 128))(a2, 0);
        *(_QWORD *)v17 = v18;
        if (!v18)
        {
          v18 = operator new();
          sub_19C3839E8(v18, a2, 0);
          *(_QWORD *)v17 = v18;
        }
        *(_BYTE *)(v17 + 8) = 0;
        v13[1] = (_QWORD *)v17;
        v13[2] = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 32))(v18);
        v13[3] = (_QWORD *)-1;
        *((_BYTE *)v13 + 32) = -1;
        v19 = sub_19C38F550(*v13, v13[1]);
        *((_DWORD *)v13 + 10) = v19;
        v21 = *v13;
        v20 = v13[1];
        v22 = operator new();
        *(_QWORD *)v22 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)v21 + 16))(*(_QWORD *)v21, 0);
        *(_BYTE *)(v22 + 8) = v21[8];
        v13[6] = (_QWORD *)v22;
        v23 = operator new();
        *(_QWORD *)v23 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)v20 + 16))(*(_QWORD *)v20, 0);
        *(_BYTE *)(v23 + 8) = v20[8];
        v13[7] = (_QWORD *)v23;
        *((_DWORD *)v13 + 16) = v19;
        v24 = *v13[*((_DWORD *)v13 + 10) != 1];
        *((_DWORD *)v13 + 18) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 48))(v24);
        if (*((_DWORD *)v13 + 10) == 3)
        {
          HIBYTE(v197) = 5;
          strcpy((char *)&v195, "FATAL");
          v25 = sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)&v195, 5);
          sub_19C2A1B24(v25, (uint64_t)": ", 2);
          v26 = sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)"LookAheadComposeFilter: 1st argument cannot ", 44);
          v27 = sub_19C2A1B24(v26, (uint64_t)"match/look-ahead on output labels and 2nd argument ", 51);
          sub_19C2A1B24(v27, (uint64_t)"cannot match/look-ahead on input labels.", 40);
          sub_19C351928();
          if (SHIBYTE(v197) < 0)
            operator delete(v195);
        }
        v28 = 7;
        if (*((_DWORD *)v13 + 16) == 1)
          v29 = 6;
        else
          v29 = 7;
        v30 = (unsigned __int8 *)v13[v29];
        if (*((_DWORD *)v13 + 16) != 1)
          v28 = 6;
        v31 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v13[v28] + 32))(*v13[v28]);
        if (sub_19C38F654(v30))
          (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)v30 + 112))(*(_QWORD *)v30, v31, 0);
        *((_BYTE *)v13 + 80) = -1;
        *((_DWORD *)v13 + 21) = 2139095039;
        *((_BYTE *)v13 + 88) = -1;
        *(_QWORD **)((char *)v13 + 92) = (_QWORD *)-2155872257;
        v13[13] = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)**v13 + 32))(**v13);
        v13[14] = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v13[1] + 32))(*v13[1]);
        if (*((_DWORD *)v13 + 10) == 1)
          v32 = 1;
        else
          v32 = 2;
        sub_19C38F2B8((uint64_t)(v13 + 15), (uint64_t)v13[13], 1, v32, (uint64_t)*v13);
        if (*((_DWORD *)v13 + 10) == 1)
          v33 = 2;
        else
          v33 = 1;
        v34 = sub_19C38F2B8((uint64_t)(v13 + 25), (uint64_t)v13[14], 0, v33, (uint64_t)v13[1]);
        *(_QWORD *)(v12 + 136) = v13;
        *(_QWORD *)(v12 + 144) = v13 + 15;
        *(_QWORD *)(v12 + 152) = v34;
        *(_QWORD *)(v12 + 160) = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v13[15] + 32))(*v13[15]);
        *(_QWORD *)(v12 + 168) = (*(uint64_t (**)(_QWORD))(****(_QWORD ****)(v12 + 152) + 32))(***(_QWORD ***)(v12 + 152));
        v35 = (_QWORD *)*((_QWORD *)&v190 + 1);
        if (!*((_QWORD *)&v190 + 1))
        {
          v35 = (_QWORD *)operator new();
          *v35 = 0;
          v35[1] = 0;
          v35[2] = v35;
          v35[3] = v35;
          sub_19C38EEAC((uint64_t)(v35 + 4), 0, v35 + 2, v35 + 3);
          v35[13] = 0;
          v35[14] = 0;
          v35[15] = 0;
        }
        *(_QWORD *)(v12 + 176) = v35;
        if (((*(uint64_t (**)(_QWORD))(****(_QWORD ****)(v12 + 144) + 48))(***(_QWORD ***)(v12 + 144)) & 1) != 0
          && (*(unsigned int (**)(_QWORD, uint64_t))(****(_QWORD ****)(v12 + 144) + 24))(***(_QWORD ***)(v12 + 144), 1) != 1)
        {
          HIBYTE(v197) = 5;
          strcpy((char *)&v195, "FATAL");
          v146 = sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)&v195, 5);
          sub_19C2A1B24(v146, (uint64_t)": ", 2);
          sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)"ComposeFst: 1st argument requires matching but cannot.", 54);
        }
        else
        {
          if (((*(uint64_t (**)(_QWORD))(****(_QWORD ****)(v12 + 152) + 48))(***(_QWORD ***)(v12 + 152)) & 1) == 0
            || !(*(unsigned int (**)(_QWORD, uint64_t))(****(_QWORD ****)(v12 + 152) + 24))(***(_QWORD ***)(v12 + 152), 1))
          {
            v110 = (*(uint64_t (**)(_QWORD, _QWORD))(****(_QWORD ****)(v12 + 144) + 24))(***(_QWORD ***)(v12 + 144), 0);
            v111 = (*(uint64_t (**)(_QWORD, _QWORD))(****(_QWORD ****)(v12 + 152) + 24))(***(_QWORD ***)(v12 + 152), 0);
            if (v111)
              v112 = 0;
            else
              v112 = v110 == 1;
            if (v112)
              v113 = 2;
            else
              v113 = 1;
            if (v110 != 1)
            {
              v113 = 0;
              if (v111)
              {
                if ((*(unsigned int (**)(_QWORD, uint64_t))(****(_QWORD ****)(v12 + 144) + 24))(***(_QWORD ***)(v12 + 144), 1) != 1)
                {
                  if (!(*(unsigned int (**)(_QWORD, uint64_t))(****(_QWORD ****)(v12 + 152) + 24))(***(_QWORD ***)(v12 + 152), 1))
                  {
                    *(_DWORD *)(v12 + 184) = 0;
                    goto LABEL_204;
                  }
                  HIBYTE(v197) = 5;
                  strcpy((char *)&v195, "FATAL");
                  v148 = sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)&v195, 5);
                  sub_19C2A1B24(v148, (uint64_t)": ", 2);
                  v149 = sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)"ComposeFst: 1st argument cannot match on output labels ", 55);
                  sub_19C2A1B24(v149, (uint64_t)"and 2nd argument cannot match on input labels (sort?).", 54);
                  goto LABEL_193;
                }
                v113 = 1;
              }
            }
            *(_DWORD *)(v12 + 184) = v113;
            goto LABEL_204;
          }
          HIBYTE(v197) = 5;
          strcpy((char *)&v195, "FATAL");
          v36 = sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)&v195, 5);
          sub_19C2A1B24(v36, (uint64_t)": ", 2);
          sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)"ComposeFst: 2nd argument requires matching but cannot.", 54);
        }
LABEL_193:
        sub_19C351928();
        if (SHIBYTE(v197) < 0)
          operator delete(v195);
        *(_DWORD *)(v12 + 184) = 3;
        *(_QWORD *)(v12 + 8) |= 4uLL;
        goto LABEL_204;
      }
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 48))(v9) & 0x10) == 0
        || (*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 24))(v9, 1))
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
        LOBYTE(v187) = 1;
        v188 = 0u;
        v189 = 0u;
        v190 = 0u;
        v12 = operator new();
        sub_19C37B230(v12, a1, a2, (uint64_t)&v187);
LABEL_215:
        v192 = &off_1E3D37610;
        v193 = (_DWORD *)v12;
        v5 = a3;
        (*(void (**)(uint64_t, void **))(*(_QWORD *)a3 + 144))(a3, &v192);
        goto LABEL_216;
      }
LABEL_106:
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      LOBYTE(v187) = 1;
      v188 = 0u;
      v189 = 0u;
      v190 = 0u;
      v12 = operator new();
      sub_19C37B8AC(v12, (char *)&v187);
      *(_QWORD *)v12 = off_1E3D38320;
      sub_19C37B9F8(v12, a1, a2);
      *(_QWORD *)v12 = &off_1E3D37FA8;
      v84 = (_QWORD **)operator new();
      v85 = operator new();
      v86 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, 1);
      *(_QWORD *)v85 = v86;
      if (!v86)
      {
        v87 = operator new();
        sub_19C3839E8(v87, a1, 1);
        *(_QWORD *)v85 = v87;
      }
      *(_BYTE *)(v85 + 8) = 0;
      *v84 = (_QWORD *)v85;
      v88 = operator new();
      v89 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 128))(a2, 0);
      *(_QWORD *)v88 = v89;
      if (!v89)
      {
        v90 = operator new();
        sub_19C3839E8(v90, a2, 0);
        *(_QWORD *)v88 = v90;
      }
      *(_BYTE *)(v88 + 8) = 0;
      v91 = *v84;
      v84[1] = (_QWORD *)v88;
      v84[2] = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v91 + 32))(*v91);
      v84[3] = (_QWORD *)-1;
      *((_BYTE *)v84 + 32) = -1;
      v92 = sub_19C38F550(*v84, v84[1]);
      *((_DWORD *)v84 + 10) = v92;
      v94 = *v84;
      v93 = v84[1];
      v95 = operator new();
      *(_QWORD *)v95 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)v94 + 16))(*(_QWORD *)v94, 0);
      *(_BYTE *)(v95 + 8) = v94[8];
      v84[6] = (_QWORD *)v95;
      v96 = operator new();
      *(_QWORD *)v96 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)v93 + 16))(*(_QWORD *)v93, 0);
      *(_BYTE *)(v96 + 8) = v93[8];
      v84[7] = (_QWORD *)v96;
      *((_DWORD *)v84 + 16) = v92;
      v97 = *v84[*((_DWORD *)v84 + 10) != 1];
      *((_DWORD *)v84 + 18) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v97 + 48))(v97);
      if (*((_DWORD *)v84 + 10) == 3)
      {
        HIBYTE(v197) = 5;
        strcpy((char *)&v195, "FATAL");
        v98 = sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)&v195, 5);
        sub_19C2A1B24(v98, (uint64_t)": ", 2);
        v99 = sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)"LookAheadComposeFilter: 1st argument cannot ", 44);
        v100 = sub_19C2A1B24(v99, (uint64_t)"match/look-ahead on output labels and 2nd argument ", 51);
        sub_19C2A1B24(v100, (uint64_t)"cannot match/look-ahead on input labels.", 40);
        sub_19C351928();
        if (SHIBYTE(v197) < 0)
          operator delete(v195);
      }
      v101 = 7;
      if (*((_DWORD *)v84 + 16) == 1)
        v102 = 6;
      else
        v102 = 7;
      v103 = (unsigned __int8 *)v84[v102];
      if (*((_DWORD *)v84 + 16) != 1)
        v101 = 6;
      v104 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v84[v101] + 32))(*v84[v101]);
      if (sub_19C38F654(v103))
        (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)v103 + 112))(*(_QWORD *)v103, v104, 0);
      *((_BYTE *)v84 + 80) = -1;
      *((_DWORD *)v84 + 21) = 2139095039;
      *((_BYTE *)v84 + 88) = -1;
      *(_QWORD **)((char *)v84 + 92) = (_QWORD *)-2155872257;
      v84[13] = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)**v84 + 32))(**v84);
      v84[14] = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v84[1] + 32))(*v84[1]);
      if (*((_DWORD *)v84 + 10) == 1)
        v105 = 1;
      else
        v105 = 2;
      sub_19C38F2B8((uint64_t)(v84 + 15), (uint64_t)v84[13], 1, v105, (uint64_t)*v84);
      if (*((_DWORD *)v84 + 10) == 1)
        v106 = 2;
      else
        v106 = 1;
      v107 = sub_19C38F2B8((uint64_t)(v84 + 25), (uint64_t)v84[14], 0, v106, (uint64_t)v84[1]);
      *(_QWORD *)(v12 + 136) = v84;
      *(_QWORD *)(v12 + 144) = v84 + 15;
      *(_QWORD *)(v12 + 152) = v107;
      *(_QWORD *)(v12 + 160) = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v84[15] + 32))(*v84[15]);
      *(_QWORD *)(v12 + 168) = (*(uint64_t (**)(_QWORD))(****(_QWORD ****)(v12 + 152) + 32))(***(_QWORD ***)(v12 + 152));
      v108 = (_QWORD *)operator new();
      *v108 = 0;
      v108[1] = 0;
      v108[2] = v108;
      v108[3] = v108;
      sub_19C38EEAC((uint64_t)(v108 + 4), 0, v108 + 2, v108 + 3);
      v108[13] = 0;
      v108[14] = 0;
      v108[15] = 0;
      *(_QWORD *)(v12 + 176) = v108;
      if (((*(uint64_t (**)(_QWORD))(****(_QWORD ****)(v12 + 144) + 48))(***(_QWORD ***)(v12 + 144)) & 1) != 0
        && (*(unsigned int (**)(_QWORD, uint64_t))(****(_QWORD ****)(v12 + 144) + 24))(***(_QWORD ***)(v12 + 144), 1) != 1)
      {
        HIBYTE(v197) = 5;
        strcpy((char *)&v195, "FATAL");
        v147 = sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)&v195, 5);
        sub_19C2A1B24(v147, (uint64_t)": ", 2);
        sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)"ComposeFst: 1st argument requires matching but cannot.", 54);
      }
      else
      {
        if (((*(uint64_t (**)(_QWORD))(****(_QWORD ****)(v12 + 152) + 48))(***(_QWORD ***)(v12 + 152)) & 1) == 0
          || !(*(unsigned int (**)(_QWORD, uint64_t))(****(_QWORD ****)(v12 + 152) + 24))(***(_QWORD ***)(v12 + 152), 1))
        {
          v142 = (*(uint64_t (**)(_QWORD, _QWORD))(****(_QWORD ****)(v12 + 144) + 24))(***(_QWORD ***)(v12 + 144), 0);
          v143 = (*(uint64_t (**)(_QWORD, _QWORD))(****(_QWORD ****)(v12 + 152) + 24))(***(_QWORD ***)(v12 + 152), 0);
          if (v143)
            v144 = 0;
          else
            v144 = v142 == 1;
          if (v144)
            v145 = 2;
          else
            v145 = 1;
          if (v142 != 1)
          {
            v145 = 0;
            if (v143)
            {
              if ((*(unsigned int (**)(_QWORD, uint64_t))(****(_QWORD ****)(v12 + 144) + 24))(***(_QWORD ***)(v12 + 144), 1) != 1)
              {
                if (!(*(unsigned int (**)(_QWORD, uint64_t))(****(_QWORD ****)(v12 + 152) + 24))(***(_QWORD ***)(v12 + 152), 1))
                {
                  *(_DWORD *)(v12 + 184) = 0;
                  goto LABEL_204;
                }
                HIBYTE(v197) = 5;
                strcpy((char *)&v195, "FATAL");
                v150 = sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)&v195, 5);
                sub_19C2A1B24(v150, (uint64_t)": ", 2);
                v151 = sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)"ComposeFst: 1st argument cannot match on output labels ", 55);
                sub_19C2A1B24(v151, (uint64_t)"and 2nd argument cannot match on input labels (sort?).", 54);
                goto LABEL_201;
              }
              v145 = 1;
            }
          }
          *(_DWORD *)(v12 + 184) = v145;
          goto LABEL_204;
        }
        HIBYTE(v197) = 5;
        strcpy((char *)&v195, "FATAL");
        v109 = sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)&v195, 5);
        sub_19C2A1B24(v109, (uint64_t)": ", 2);
        sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)"ComposeFst: 2nd argument requires matching but cannot.", 54);
      }
LABEL_201:
      sub_19C351928();
      if (SHIBYTE(v197) < 0)
        operator delete(v195);
      *(_DWORD *)(v12 + 184) = 3;
      *(_QWORD *)(v12 + 8) |= 4uLL;
LABEL_204:
      v152 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 56))(a1, 0x3FFFFFFF0007, 0);
      v153 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 56))(a2, 0x3FFFFFFF0007, 0);
      v154 = (*(uint64_t (**)(_QWORD, uint64_t))(****(_QWORD ****)(v12 + 144) + 40))(***(_QWORD ***)(v12 + 144), v152);
      v155 = (*(uint64_t (**)(_QWORD, uint64_t))(****(_QWORD ****)(v12 + 152) + 40))(***(_QWORD ***)(v12 + 152), v153);
      v156 = (v155 | v154) & 4;
      v157 = v155 & v154;
      if ((v155 & v154 & 0x10000) != 0)
      {
        v158 = v157 & 0x280A800000 | v156 | 0x10000010000;
        if ((v157 & 0x2000000) != 0)
        {
          v159 = v157 & 0x140000;
          goto LABEL_209;
        }
      }
      else
      {
        v158 = v157 & 0x2802010000 | v156 | 0x10000000000;
        if ((v157 & 0x2000000) != 0)
        {
          v159 = v157 & 0x40000;
LABEL_209:
          v158 |= v159;
        }
      }
      v160 = *(_DWORD *)(*(_QWORD *)(v12 + 136) + 40);
      if (v160 == 3)
        v158 |= 4uLL;
      v71 = v160 == 1;
      v161 = 0x3FFCCC300004;
      if (v71)
        v161 = 0x3FFC330C0004;
      *(_QWORD *)(v12 + 8) = v158 & v161 | *(_QWORD *)(v12 + 8) & 0xFFFFC0000000FFFFLL;
      goto LABEL_215;
    case 1:
      LOBYTE(v187) = 1;
      v188 = 0u;
      v189 = 0u;
      v190 = 0u;
      v37 = operator new();
      sub_19C37B8AC(v37, (char *)&v187);
      *(_QWORD *)v37 = off_1E3D38320;
      sub_19C37B9F8(v37, a1, a2);
      *(_QWORD *)v37 = &off_1E3D37EA0;
      v59 = (_QWORD **)operator new();
      v60 = (_QWORD *)operator new();
      v61 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, 1);
      *v60 = v61;
      if (!v61)
      {
        v62 = operator new();
        sub_19C3839E8(v62, a1, 1);
        *v60 = v62;
      }
      *v59 = v60;
      v63 = (_QWORD *)operator new();
      v64 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 128))(a2, 0);
      *v63 = v64;
      if (!v64)
      {
        v65 = operator new();
        sub_19C3839E8(v65, a2, 0);
        *v63 = v65;
      }
      v59[1] = v63;
      v59[2] = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)**v59 + 32))(**v59);
      v59[3] = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v59[1] + 32))(*v59[1]);
      *(_QWORD *)(v37 + 136) = v59;
      v66 = *(_OWORD *)v59;
      *(_OWORD *)(v37 + 144) = *(_OWORD *)v59;
      *(_QWORD *)(v37 + 160) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v66 + 32))(*(_QWORD *)v66);
      *(_QWORD *)(v37 + 168) = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(v37 + 152) + 32))(**(_QWORD **)(v37 + 152));
      v67 = (_QWORD *)operator new();
      *v67 = 0;
      v67[1] = 0;
      v67[2] = v67;
      v67[3] = v67;
      sub_19C37BE6C((uint64_t)(v67 + 4), 0, v67 + 2, v67 + 3);
      v67[13] = 0;
      v67[14] = 0;
      v67[15] = 0;
      *(_QWORD *)(v37 + 176) = v67;
      if (((*(uint64_t (**)(_QWORD))(***(_QWORD ***)(v37 + 144) + 48))(**(_QWORD **)(v37 + 144)) & 1) != 0
        && (*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(v37 + 144) + 24))(**(_QWORD **)(v37 + 144), 1) != 1)
      {
        HIBYTE(v197) = 5;
        strcpy((char *)&v195, "FATAL");
        v83 = sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)&v195, 5);
        sub_19C2A1B24(v83, (uint64_t)": ", 2);
        sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)"ComposeFst: 1st argument requires matching but cannot.", 54);
        goto LABEL_168;
      }
      if (((*(uint64_t (**)(_QWORD))(***(_QWORD ***)(v37 + 152) + 48))(**(_QWORD **)(v37 + 152)) & 1) != 0
        && (*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(v37 + 152) + 24))(**(_QWORD **)(v37 + 152), 1))
      {
        HIBYTE(v197) = 5;
        strcpy((char *)&v195, "FATAL");
        v68 = sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)&v195, 5);
        sub_19C2A1B24(v68, (uint64_t)": ", 2);
        sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)"ComposeFst: 2nd argument requires matching but cannot.", 54);
        goto LABEL_168;
      }
      v77 = (*(uint64_t (**)(_QWORD, _QWORD))(***(_QWORD ***)(v37 + 144) + 24))(**(_QWORD **)(v37 + 144), 0);
      v78 = (*(uint64_t (**)(_QWORD, _QWORD))(***(_QWORD ***)(v37 + 152) + 24))(**(_QWORD **)(v37 + 152), 0);
      if (v78)
        v79 = 0;
      else
        v79 = v77 == 1;
      if (v79)
        v80 = 2;
      else
        v80 = 1;
      if (v77 != 1)
      {
        v80 = 0;
        if (v78)
        {
          if ((*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(v37 + 144) + 24))(**(_QWORD **)(v37 + 144), 1) != 1)
          {
            if (!(*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(v37 + 152) + 24))(**(_QWORD **)(v37 + 152), 1))
            {
              *(_DWORD *)(v37 + 184) = 0;
LABEL_171:
              v135 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 56))(a1, 0x3FFFFFFF0007, 0);
              v136 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 56))(a2, 0x3FFFFFFF0007, 0);
              v137 = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(v37 + 144) + 40))(**(_QWORD **)(v37 + 144), v135);
              v138 = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(v37 + 152) + 40))(**(_QWORD **)(v37 + 152), v136);
              v139 = (v138 | v137) & 4;
              v140 = v138 & v137;
              if ((v138 & v137 & 0x10000) != 0)
              {
                v122 = v140 & 0x280A800000 | v139 | 0x10000010000;
                if ((v140 & 0x2000000) == 0)
                  goto LABEL_177;
                v141 = v140 & 0x140000;
              }
              else
              {
                v122 = v140 & 0x2802010000 | v139 | 0x10000000000;
                if ((v140 & 0x2000000) == 0)
                  goto LABEL_177;
                v141 = v140 & 0x40000;
              }
              v122 |= v141;
              goto LABEL_177;
            }
            HIBYTE(v197) = 5;
            strcpy((char *)&v195, "FATAL");
            v133 = sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)&v195, 5);
            sub_19C2A1B24(v133, (uint64_t)": ", 2);
            v134 = sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)"ComposeFst: 1st argument cannot match on output labels ", 55);
            sub_19C2A1B24(v134, (uint64_t)"and 2nd argument cannot match on input labels (sort?).", 54);
LABEL_168:
            sub_19C351928();
            if (SHIBYTE(v197) < 0)
              operator delete(v195);
            *(_DWORD *)(v37 + 184) = 3;
            *(_QWORD *)(v37 + 8) |= 4uLL;
            goto LABEL_171;
          }
          v80 = 1;
        }
      }
      *(_DWORD *)(v37 + 184) = v80;
      goto LABEL_171;
    case 2:
      LOBYTE(v187) = 1;
      v188 = 0u;
      v189 = 0u;
      v190 = 0u;
      v48 = operator new();
      sub_19C37B230(v48, a1, a2, (uint64_t)&v187);
      v195 = (void (**)())&off_1E3D37610;
      v196 = (_DWORD *)v48;
      v5 = a3;
      (*(void (**)(uint64_t, void (***)()))(*(_QWORD *)a3 + 144))(a3, &v195);
      v195 = off_1E3D38678;
      v49 = v196;
      goto LABEL_217;
    case 3:
      LOBYTE(v187) = 1;
      v188 = 0u;
      v189 = 0u;
      v190 = 0u;
      v37 = operator new();
      sub_19C37B8AC(v37, (char *)&v187);
      *(_QWORD *)v37 = off_1E3D38320;
      sub_19C37B9F8(v37, a1, a2);
      *(_QWORD *)v37 = &off_1E3D38058;
      v50 = operator new();
      v51 = (_QWORD *)operator new();
      v52 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, 1);
      *v51 = v52;
      if (!v52)
      {
        v53 = operator new();
        sub_19C3839E8(v53, a1, 1);
        *v51 = v53;
      }
      *(_QWORD *)v50 = v51;
      v54 = (_QWORD *)operator new();
      v55 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 128))(a2, 0);
      *v54 = v55;
      if (!v55)
      {
        v55 = operator new();
        sub_19C3839E8(v55, a2, 0);
        *v54 = v55;
      }
      *(_QWORD *)(v50 + 8) = v54;
      *(_QWORD *)(v50 + 16) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v55 + 32))(v55);
      *(_QWORD *)(v50 + 24) = -1;
      *(_BYTE *)(v50 + 32) = -1;
      *(_QWORD *)(v37 + 136) = v50;
      v56 = *(_OWORD *)v50;
      *(_OWORD *)(v37 + 144) = *(_OWORD *)v50;
      *(_QWORD *)(v37 + 160) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v56 + 32))(*(_QWORD *)v56);
      *(_QWORD *)(v37 + 168) = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(v37 + 152) + 32))(**(_QWORD **)(v37 + 152));
      v57 = (_QWORD *)operator new();
      *v57 = 0;
      v57[1] = 0;
      v57[2] = v57;
      v57[3] = v57;
      sub_19C37BE6C((uint64_t)(v57 + 4), 0, v57 + 2, v57 + 3);
      v57[13] = 0;
      v57[14] = 0;
      v57[15] = 0;
      *(_QWORD *)(v37 + 176) = v57;
      if (((*(uint64_t (**)(_QWORD))(***(_QWORD ***)(v37 + 144) + 48))(**(_QWORD **)(v37 + 144)) & 1) != 0
        && (*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(v37 + 144) + 24))(**(_QWORD **)(v37 + 144), 1) != 1)
      {
        HIBYTE(v197) = 5;
        strcpy((char *)&v195, "FATAL");
        v81 = sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)&v195, 5);
        sub_19C2A1B24(v81, (uint64_t)": ", 2);
        sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)"ComposeFst: 1st argument requires matching but cannot.", 54);
        goto LABEL_144;
      }
      if (((*(uint64_t (**)(_QWORD))(***(_QWORD ***)(v37 + 152) + 48))(**(_QWORD **)(v37 + 152)) & 1) != 0
        && (*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(v37 + 152) + 24))(**(_QWORD **)(v37 + 152), 1))
      {
        HIBYTE(v197) = 5;
        strcpy((char *)&v195, "FATAL");
        v58 = sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)&v195, 5);
        sub_19C2A1B24(v58, (uint64_t)": ", 2);
        sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)"ComposeFst: 2nd argument requires matching but cannot.", 54);
        goto LABEL_144;
      }
      v69 = (*(uint64_t (**)(_QWORD, _QWORD))(***(_QWORD ***)(v37 + 144) + 24))(**(_QWORD **)(v37 + 144), 0);
      v70 = (*(uint64_t (**)(_QWORD, _QWORD))(***(_QWORD ***)(v37 + 152) + 24))(**(_QWORD **)(v37 + 152), 0);
      if (v70)
        v71 = 0;
      else
        v71 = v69 == 1;
      if (v71)
        v72 = 2;
      else
        v72 = 1;
      if (v69 != 1)
      {
        v72 = 0;
        if (v70)
        {
          if ((*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(v37 + 144) + 24))(**(_QWORD **)(v37 + 144), 1) != 1)
          {
            if (!(*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(v37 + 152) + 24))(**(_QWORD **)(v37 + 152), 1))
            {
              *(_DWORD *)(v37 + 184) = 0;
LABEL_147:
              v116 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 56))(a1, 0x3FFFFFFF0007, 0);
              v117 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 56))(a2, 0x3FFFFFFF0007, 0);
              v118 = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(v37 + 144) + 40))(**(_QWORD **)(v37 + 144), v116);
              v119 = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(v37 + 152) + 40))(**(_QWORD **)(v37 + 152), v117);
              v120 = (v119 | v118) & 4;
              v121 = v119 & v118;
              if ((v119 & v118 & 0x10000) != 0)
              {
                v122 = v121 & 0x280A800000 | v120 | 0x10000010000;
                if ((v121 & 0x2000000) == 0)
                  goto LABEL_177;
                v123 = v121 & 0x140000;
              }
              else
              {
                v122 = v121 & 0x2802010000 | v120 | 0x10000000000;
                if ((v121 & 0x2000000) == 0)
                  goto LABEL_177;
                v123 = v121 & 0x40000;
              }
              v122 |= v123;
              goto LABEL_177;
            }
            HIBYTE(v197) = 5;
            strcpy((char *)&v195, "FATAL");
            v114 = sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)&v195, 5);
            sub_19C2A1B24(v114, (uint64_t)": ", 2);
            v115 = sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)"ComposeFst: 1st argument cannot match on output labels ", 55);
            sub_19C2A1B24(v115, (uint64_t)"and 2nd argument cannot match on input labels (sort?).", 54);
LABEL_144:
            sub_19C351928();
            if (SHIBYTE(v197) < 0)
              operator delete(v195);
            *(_DWORD *)(v37 + 184) = 3;
            *(_QWORD *)(v37 + 8) |= 4uLL;
            goto LABEL_147;
          }
          v72 = 1;
        }
      }
      *(_DWORD *)(v37 + 184) = v72;
      goto LABEL_147;
    case 4:
      LOBYTE(v187) = 1;
      v188 = 0u;
      v189 = 0u;
      v190 = 0u;
      v37 = operator new();
      sub_19C37B8AC(v37, (char *)&v187);
      *(_QWORD *)v37 = off_1E3D38320;
      sub_19C37B9F8(v37, a1, a2);
      *(_QWORD *)v37 = &off_1E3D37EF8;
      v38 = (_QWORD **)operator new();
      v39 = (_QWORD *)operator new();
      v40 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, 1);
      *v39 = v40;
      if (!v40)
      {
        v41 = operator new();
        sub_19C3839E8(v41, a1, 1);
        *v39 = v41;
      }
      *v38 = v39;
      v42 = (_QWORD *)operator new();
      v43 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 128))(a2, 0);
      *v42 = v43;
      if (!v43)
      {
        v44 = operator new();
        sub_19C3839E8(v44, a2, 0);
        *v42 = v44;
      }
      v38[1] = v42;
      v38[2] = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)**v38 + 32))(**v38);
      v38[3] = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v38[1] + 32))(*v38[1]);
      v38[4] = (_QWORD *)-1;
      *((_BYTE *)v38 + 40) = -1;
      *(_QWORD *)(v37 + 136) = v38;
      v45 = *(_OWORD *)v38;
      *(_OWORD *)(v37 + 144) = *(_OWORD *)v38;
      *(_QWORD *)(v37 + 160) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v45 + 32))(*(_QWORD *)v45);
      *(_QWORD *)(v37 + 168) = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(v37 + 152) + 32))(**(_QWORD **)(v37 + 152));
      v46 = (_QWORD *)operator new();
      *v46 = 0;
      v46[1] = 0;
      v46[2] = v46;
      v46[3] = v46;
      sub_19C37BE6C((uint64_t)(v46 + 4), 0, v46 + 2, v46 + 3);
      v46[13] = 0;
      v46[14] = 0;
      v46[15] = 0;
      *(_QWORD *)(v37 + 176) = v46;
      if (((*(uint64_t (**)(_QWORD))(***(_QWORD ***)(v37 + 144) + 48))(**(_QWORD **)(v37 + 144)) & 1) != 0
        && (*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(v37 + 144) + 24))(**(_QWORD **)(v37 + 144), 1) != 1)
      {
        HIBYTE(v197) = 5;
        strcpy((char *)&v195, "FATAL");
        v82 = sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)&v195, 5);
        sub_19C2A1B24(v82, (uint64_t)": ", 2);
        sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)"ComposeFst: 1st argument requires matching but cannot.", 54);
        goto LABEL_156;
      }
      if (((*(uint64_t (**)(_QWORD))(***(_QWORD ***)(v37 + 152) + 48))(**(_QWORD **)(v37 + 152)) & 1) != 0
        && (*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(v37 + 152) + 24))(**(_QWORD **)(v37 + 152), 1))
      {
        HIBYTE(v197) = 5;
        strcpy((char *)&v195, "FATAL");
        v47 = sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)&v195, 5);
        sub_19C2A1B24(v47, (uint64_t)": ", 2);
        sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)"ComposeFst: 2nd argument requires matching but cannot.", 54);
LABEL_156:
        sub_19C351928();
        if (SHIBYTE(v197) < 0)
          operator delete(v195);
        *(_DWORD *)(v37 + 184) = 3;
        *(_QWORD *)(v37 + 8) |= 4uLL;
        goto LABEL_159;
      }
      v73 = (*(uint64_t (**)(_QWORD, _QWORD))(***(_QWORD ***)(v37 + 144) + 24))(**(_QWORD **)(v37 + 144), 0);
      v74 = (*(uint64_t (**)(_QWORD, _QWORD))(***(_QWORD ***)(v37 + 152) + 24))(**(_QWORD **)(v37 + 152), 0);
      if (v74)
        v75 = 0;
      else
        v75 = v73 == 1;
      if (v75)
        v76 = 2;
      else
        v76 = 1;
      if (v73 == 1)
        goto LABEL_88;
      v76 = 0;
      if (!v74)
        goto LABEL_88;
      if ((*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(v37 + 144) + 24))(**(_QWORD **)(v37 + 144), 1) == 1)
      {
        v76 = 1;
LABEL_88:
        *(_DWORD *)(v37 + 184) = v76;
        goto LABEL_159;
      }
      if ((*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(v37 + 152) + 24))(**(_QWORD **)(v37 + 152), 1))
      {
        HIBYTE(v197) = 5;
        strcpy((char *)&v195, "FATAL");
        v124 = sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)&v195, 5);
        sub_19C2A1B24(v124, (uint64_t)": ", 2);
        v125 = sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)"ComposeFst: 1st argument cannot match on output labels ", 55);
        sub_19C2A1B24(v125, (uint64_t)"and 2nd argument cannot match on input labels (sort?).", 54);
        goto LABEL_156;
      }
      *(_DWORD *)(v37 + 184) = 0;
LABEL_159:
      v126 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 56))(a1, 0x3FFFFFFF0007, 0);
      v127 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 56))(a2, 0x3FFFFFFF0007, 0);
      v128 = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(v37 + 144) + 40))(**(_QWORD **)(v37 + 144), v126);
      v129 = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(v37 + 152) + 40))(**(_QWORD **)(v37 + 152), v127);
      v130 = (v129 | v128) & 4;
      v131 = v129 & v128;
      if ((v129 & v128 & 0x10000) != 0)
      {
        v122 = v131 & 0x280A800000 | v130 | 0x10000010000;
        if ((v131 & 0x2000000) == 0)
          goto LABEL_177;
        v132 = v131 & 0x140000;
      }
      else
      {
        v122 = v131 & 0x2802010000 | v130 | 0x10000000000;
        if ((v131 & 0x2000000) == 0)
          goto LABEL_177;
        v132 = v131 & 0x40000;
      }
      v122 |= v132;
LABEL_177:
      *(_QWORD *)(v37 + 8) = *(_QWORD *)(v37 + 8) & 0xFFFFC0000000FFFFLL | v122 & 0x13FFFFF0004;
      v192 = &off_1E3D37610;
      v193 = (_DWORD *)v37;
      v5 = a3;
      (*(void (**)(uint64_t, void **))(*(_QWORD *)a3 + 144))(a3, &v192);
LABEL_216:
      v192 = off_1E3D38678;
      v49 = v193;
LABEL_217:
      v162 = v49[14] - 1;
      v49[14] = v162;
      if (v162)
      {
LABEL_218:
        if (!*(_BYTE *)a4)
          return;
      }
      else
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v49 + 8))(v49);
        if (!*(_BYTE *)a4)
          return;
      }
      v195 = 0;
      v196 = 0;
      v197 = 0;
      v192 = 0;
      v193 = 0;
      v194 = 0;
      v191 = 0;
      v187 = 0;
      *(_QWORD *)&v188 = &v195;
      *((_QWORD *)&v188 + 1) = &v192;
      *(_QWORD *)&v189 = &v191;
      sub_19C3741D0(v5, (uint64_t)&v187);
      __p = 0;
      v185 = 0;
      v186 = 0;
      v163 = v196;
      if (v196)
      {
        v164 = 0;
        v165 = 0;
        while (1)
        {
          if (((unint64_t)v195[v165 >> 6] & (1 << v165)) != 0
            && (*((_QWORD *)v192 + (v165 >> 6)) & (1 << v165)) != 0)
          {
            goto LABEL_225;
          }
          if (v164 >= v186)
            break;
          *(_DWORD *)v164 = v165;
          v166 = v164 + 4;
LABEL_224:
          v185 = v166;
          v164 = (char *)v166;
LABEL_225:
          if ((unint64_t)v163 <= ++v165)
            goto LABEL_255;
        }
        v167 = (char *)__p;
        v168 = v164 - (_BYTE *)__p;
        v169 = (v164 - (_BYTE *)__p) >> 2;
        v170 = v169 + 1;
        if ((unint64_t)(v169 + 1) >> 62)
          sub_19C2A18E8();
        v171 = v186 - (_BYTE *)__p;
        if ((v186 - (_BYTE *)__p) >> 1 > v170)
          v170 = v171 >> 1;
        if ((unint64_t)v171 >= 0x7FFFFFFFFFFFFFFCLL)
          v172 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v172 = v170;
        if (v172)
        {
          if (v172 >> 62)
            sub_19C2A143C();
          v173 = operator new(4 * v172);
        }
        else
        {
          v173 = 0;
        }
        v174 = &v173[4 * v169];
        *v174 = v165;
        v166 = v174 + 1;
        if (v164 == v167)
          goto LABEL_243;
        v175 = v164 - 4 - v167;
        if (v175 < 0xBC)
        {
          v176 = v164;
          goto LABEL_242;
        }
        if (&v173[v168 - 4 - (v175 & 0xFFFFFFFFFFFFFFFCLL)] > &v173[v168 - 4])
        {
          v176 = v164;
        }
        else
        {
          if (&v164[-(v175 & 0xFFFFFFFFFFFFFFFCLL) - 4] <= v164 - 4)
          {
            if ((unint64_t)(v164 - v173 - v168) < 0x20)
            {
              v176 = v164;
              goto LABEL_242;
            }
            v178 = (v175 >> 2) + 1;
            v176 = &v164[-4 * (v178 & 0x7FFFFFFFFFFFFFF8)];
            v179 = &v173[4 * v169 - 16];
            v180 = v164 - 16;
            v181 = v178 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v182 = *(_OWORD *)v180;
              *(v179 - 1) = *((_OWORD *)v180 - 1);
              *v179 = v182;
              v179 -= 2;
              v180 -= 32;
              v181 -= 8;
            }
            while (v181);
            v174 -= v178 & 0x7FFFFFFFFFFFFFF8;
            if (v178 != (v178 & 0x7FFFFFFFFFFFFFF8))
              goto LABEL_242;
LABEL_243:
            __p = v174;
            v185 = v166;
            v186 = &v173[4 * v172];
            if (v167)
            {
              operator delete(v167);
              v163 = v196;
            }
            goto LABEL_224;
          }
          v176 = v164;
        }
        do
        {
LABEL_242:
          v177 = *((_DWORD *)v176 - 1);
          v176 -= 4;
          *--v174 = v177;
        }
        while (v176 != v167);
        goto LABEL_243;
      }
LABEL_255:
      (*(void (**)(uint64_t, void **))(*(_QWORD *)a3 + 192))(a3, &__p);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3 + 168))(a3, 0x50000000000, 0x50000000000);
      if (__p)
      {
        v185 = __p;
        operator delete(__p);
      }
      if (v192)
        operator delete(v192);
      if (v195)
        operator delete(v195);
      return;
    default:
      goto LABEL_218;
  }
}

void sub_19C37AC94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27)
{
  uint64_t v27;
  uint64_t v28;

  sub_19C351928();
  if (*(char *)(v28 - 89) < 0)
    operator delete(*(void **)(v28 - 112));
  sub_19C37BDD0(v27);
  MEMORY[0x1A1AD355C](v27, 0x10F3C405A371F01);
  _Unwind_Resume(a1);
}

void sub_19C37B1E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26)
{
  uint64_t v26;
  void *v28;
  void *v29;

  if (a11)
  {
    operator delete(a11);
    v28 = a26;
    if (!a26)
    {
LABEL_3:
      v29 = *(void **)(v26 - 112);
      if (!v29)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else
  {
    v28 = a26;
    if (!a26)
      goto LABEL_3;
  }
  operator delete(v28);
  v29 = *(void **)(v26 - 112);
  if (!v29)
LABEL_4:
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(v29);
  _Unwind_Resume(a1);
}

uint64_t sub_19C37B230(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  _QWORD **v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  _QWORD *v17;
  _QWORD *v18;
  int v19;
  int v20;
  BOOL v21;
  int v22;
  BOOL v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  void *__p[2];
  char v38;

  v8 = (_QWORD *)sub_19C37B8AC(a1, (char *)a4);
  *v8 = off_1E3D38320;
  sub_19C37B9F8((uint64_t)v8, a2, a3);
  *(_QWORD *)a1 = &off_1E3D37F50;
  v9 = *(_QWORD ***)(a4 + 40);
  if (!v9)
  {
    v9 = (_QWORD **)operator new();
    v10 = *(_QWORD **)(a4 + 24);
    v11 = *(_QWORD **)(a4 + 32);
    if (v10
      || (v10 = (_QWORD *)operator new(),
          v12 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, 1),
          (*v10 = v12) != 0))
    {
      *v9 = v10;
      if (!v11)
      {
LABEL_5:
        v13 = (_QWORD *)operator new();
        v14 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 128))(a3, 0);
        *v13 = v14;
        if (!v14)
        {
          v15 = operator new();
          sub_19C3839E8(v15, a3, 0);
          *v13 = v15;
        }
        v11 = v13;
      }
    }
    else
    {
      v36 = operator new();
      sub_19C3839E8(v36, a2, 1);
      *v10 = v36;
      *v9 = v10;
      if (!v11)
        goto LABEL_5;
    }
    v9[1] = v11;
    v9[2] = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)**v9 + 32))(**v9);
    v9[3] = (_QWORD *)-1;
    *((_BYTE *)v9 + 32) = -1;
  }
  *(_QWORD *)(a1 + 136) = v9;
  v16 = *(_OWORD *)v9;
  *(_OWORD *)(a1 + 144) = *(_OWORD *)v9;
  *(_QWORD *)(a1 + 160) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v16 + 32))(*(_QWORD *)v16);
  *(_QWORD *)(a1 + 168) = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 152) + 32))(**(_QWORD **)(a1 + 152));
  v17 = *(_QWORD **)(a4 + 48);
  if (!v17)
  {
    v17 = (_QWORD *)operator new();
    *v17 = 0;
    v17[1] = 0;
    v17[2] = v17;
    v17[3] = v17;
    sub_19C37BE6C((uint64_t)(v17 + 4), 0, v17 + 2, v17 + 3);
    v17[13] = 0;
    v17[14] = 0;
    v17[15] = 0;
  }
  *(_QWORD *)(a1 + 176) = v17;
  if (((*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 144) + 48))(**(_QWORD **)(a1 + 144)) & 1) != 0
    && (*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 144) + 24))(**(_QWORD **)(a1 + 144), 1) != 1)
  {
    v38 = 5;
    strcpy((char *)__p, "FATAL");
    v24 = sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)__p, 5);
    sub_19C2A1B24(v24, (uint64_t)": ", 2);
    sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)"ComposeFst: 1st argument requires matching but cannot.", 54);
    goto LABEL_32;
  }
  if (((*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 152) + 48))(**(_QWORD **)(a1 + 152)) & 1) != 0
    && (*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 152) + 24))(**(_QWORD **)(a1 + 152), 1))
  {
    v38 = 5;
    strcpy((char *)__p, "FATAL");
    v18 = sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)__p, 5);
    sub_19C2A1B24(v18, (uint64_t)": ", 2);
    sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)"ComposeFst: 2nd argument requires matching but cannot.", 54);
    goto LABEL_32;
  }
  v19 = (*(uint64_t (**)(_QWORD, _QWORD))(***(_QWORD ***)(a1 + 144) + 24))(**(_QWORD **)(a1 + 144), 0);
  v20 = (*(uint64_t (**)(_QWORD, _QWORD))(***(_QWORD ***)(a1 + 152) + 24))(**(_QWORD **)(a1 + 152), 0);
  if (v20)
    v21 = 0;
  else
    v21 = v19 == 1;
  if (v21)
    v22 = 2;
  else
    v22 = 1;
  if (v19 == 1)
  {
    v23 = 1;
  }
  else
  {
    v22 = 0;
    v23 = v20 == 0;
  }
  if (v23)
  {
LABEL_28:
    *(_DWORD *)(a1 + 184) = v22;
    goto LABEL_35;
  }
  if ((*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 144) + 24))(**(_QWORD **)(a1 + 144), 1) == 1)
  {
    v22 = 1;
    goto LABEL_28;
  }
  if (!(*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 152) + 24))(**(_QWORD **)(a1 + 152), 1))
  {
    *(_DWORD *)(a1 + 184) = 0;
    goto LABEL_35;
  }
  v38 = 5;
  strcpy((char *)__p, "FATAL");
  v25 = sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)__p, 5);
  sub_19C2A1B24(v25, (uint64_t)": ", 2);
  v26 = sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)"ComposeFst: 1st argument cannot match on output labels ", 55);
  sub_19C2A1B24(v26, (uint64_t)"and 2nd argument cannot match on input labels (sort?).", 54);
LABEL_32:
  sub_19C351928();
  if (v38 < 0)
    operator delete(__p[0]);
  *(_DWORD *)(a1 + 184) = 3;
  *(_QWORD *)(a1 + 8) |= 4uLL;
LABEL_35:
  v27 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 56))(a2, 0x3FFFFFFF0007, 0);
  v28 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a3 + 56))(a3, 0x3FFFFFFF0007, 0);
  v29 = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 144) + 40))(**(_QWORD **)(a1 + 144), v27);
  v30 = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 152) + 40))(**(_QWORD **)(a1 + 152), v28);
  v31 = (v30 | v29) & 4;
  v32 = v30 & v29;
  v33 = v30 & v29 & 0x2802010000 | v31 | 0x10000000000;
  if ((v30 & v29 & 0x2000000) != 0)
    v33 |= v30 & v29 & 0x40000;
  v34 = v32 & 0x280A800000 | v31 | 0x10000010000;
  if ((v32 & 0x2000000) != 0)
    v34 |= v32 & 0x140000;
  if ((v32 & 0x10000) == 0)
    v34 = v33;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 0xFFFFC0000000FFFFLL | v34 & 0x13FFFFF0004;
  return a1;
}

void sub_19C37B7B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  MEMORY[0x1A1AD355C](v18, 0x10E1C4003B7394BLL);
  MEMORY[0x1A1AD355C](v17, 0x20C4093837F09);
  MEMORY[0x1A1AD355C](v16, 0x1060C40AD892F49);
  sub_19C37BDD0(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_19C37B8AC(uint64_t a1, char *a2)
{
  uint64_t v3;
  uint64_t v4;
  char v6;
  unint64_t v7;
  uint64_t v8;

  *(_BYTE *)(a1 + 39) = 4;
  strcpy((char *)(a1 + 16), "null");
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(_QWORD *)a1 = off_1E3D37D80;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 64) = -1;
  *(_OWORD *)(a1 + 68) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  *(_DWORD *)(a1 + 100) = -1;
  *(_BYTE *)(a1 + 104) = *a2;
  v3 = *((_QWORD *)a2 + 2);
  *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 1);
  v4 = v3;
  *(_BYTE *)(a1 + 60) = 0;
  if (!v3)
  {
    v4 = operator new();
    v6 = *a2;
    v7 = *((_QWORD *)a2 + 1);
    sub_19C388F60(v4, *a2);
    *(_BYTE *)(v4 + 88) = v7 == 0;
    *(_DWORD *)(v4 + 92) = -1;
    *(_QWORD *)(v4 + 96) = 0;
    *(_BYTE *)(v4 + 104) = v6;
    v8 = 8096;
    if (v7 > 0x1FA0)
      v8 = v7;
    *(_QWORD *)(v4 + 112) = v8;
    *(_BYTE *)(v4 + 120) = 0;
    *(_QWORD *)(v4 + 128) = 0;
    v3 = *((_QWORD *)a2 + 2);
  }
  *(_QWORD *)(a1 + 120) = v4;
  *(_BYTE *)(a1 + 128) = v3 == 0;
  return a1;
}

void sub_19C37B9B8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;

  MEMORY[0x1A1AD355C](v2, 0x10A0C40690396FALL);
  v4 = *(void **)(v1 + 72);
  if (v4)
    operator delete(v4);
  sub_19C38909C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19C37B9F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  char v11;
  void *v12;
  unint64_t v13;
  int v14;
  void **v15;
  uint64_t v16;
  void **v17;
  int v18;
  int v19;
  int v20;
  _BOOL4 v21;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  void *__p[2];
  unsigned __int8 v35;
  void *__s1[2];
  uint64_t v37;

  HIBYTE(v37) = 7;
  strcpy((char *)__s1, "compose");
  v6 = a1 + 16;
  if (*(char *)(a1 + 39) < 0)
  {
    sub_19C2E54A8((void **)v6, __s1, 7uLL);
  }
  else
  {
    *(_OWORD *)v6 = *(_OWORD *)__s1;
    *(_QWORD *)(v6 + 16) = v37;
  }
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 96))(a3);
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 104))(a2);
  if (v7)
    v9 = v8 == 0;
  else
    v9 = 1;
  if (v9)
    goto LABEL_41;
  v10 = v8;
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v7 + 64))(__s1, v7);
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v10 + 64))(__p, v10);
  v11 = HIBYTE(v37);
  if (v37 >= 0)
    v12 = (void *)HIBYTE(v37);
  else
    v12 = __s1[1];
  v13 = v35;
  v14 = (char)v35;
  if ((v35 & 0x80u) != 0)
    v13 = (unint64_t)__p[1];
  if (v12 != (void *)v13)
  {
    v21 = 1;
    if (((char)v35 & 0x80000000) == 0)
      goto LABEL_30;
    goto LABEL_34;
  }
  if ((v35 & 0x80u) == 0)
    v15 = __p;
  else
    v15 = (void **)__p[0];
  if (SHIBYTE(v37) < 0)
  {
    v21 = memcmp(__s1[0], v15, (size_t)__s1[1]) != 0;
    goto LABEL_29;
  }
  if (HIBYTE(v37))
  {
    v16 = HIBYTE(v37) - 1;
    v17 = __s1;
    do
    {
      v19 = *(unsigned __int8 *)v17;
      v17 = (void **)((char *)v17 + 1);
      v18 = v19;
      v20 = *(unsigned __int8 *)v15;
      v15 = (void **)((char *)v15 + 1);
      v21 = v18 != v20;
    }
    while (v18 == v20 && v16-- != 0);
LABEL_29:
    if ((v14 & 0x80000000) == 0)
      goto LABEL_30;
    goto LABEL_34;
  }
  v21 = 0;
  if (((char)v35 & 0x80000000) == 0)
  {
LABEL_30:
    if ((v11 & 0x80) == 0)
      goto LABEL_31;
    goto LABEL_35;
  }
LABEL_34:
  operator delete(__p[0]);
  if ((v37 & 0x8000000000000000) == 0)
  {
LABEL_31:
    if (!v21)
      goto LABEL_41;
    goto LABEL_36;
  }
LABEL_35:
  operator delete(__s1[0]);
  if (!v21)
    goto LABEL_41;
LABEL_36:
  HIBYTE(v37) = 7;
  strcpy((char *)__s1, "WARNING");
  v23 = sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)__s1, 7);
  sub_19C2A1B24(v23, (uint64_t)": ", 2);
  v24 = sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)"CompatSymbols: Symbol table check sums do not match. ", 53);
  sub_19C2A1B24(v24, (uint64_t)"Table sizes are ", 16);
  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 120))(v7);
  v25 = (_QWORD *)std::ostream::operator<<();
  sub_19C2A1B24(v25, (uint64_t)" and ", 5);
  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 120))(v10);
  std::ostream::operator<<();
  sub_19C351928();
  if (SHIBYTE(v37) < 0)
    operator delete(__s1[0]);
  HIBYTE(v37) = 5;
  strcpy((char *)__s1, "FATAL");
  v26 = sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)__s1, 5);
  sub_19C2A1B24(v26, (uint64_t)": ", 2);
  v27 = sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)"ComposeFst: output symbol table of 1st argument ", 48);
  sub_19C2A1B24(v27, (uint64_t)"does not match input symbol table of 2nd argument", 49);
  sub_19C351928();
  if (SHIBYTE(v37) < 0)
    operator delete(__s1[0]);
  *(_QWORD *)(a1 + 8) |= 4uLL;
LABEL_41:
  v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 96))(a2);
  v29 = *(_QWORD *)(a1 + 40);
  if (v29)
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
  if (v28)
    v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 16))(v28);
  else
    v30 = 0;
  *(_QWORD *)(a1 + 40) = v30;
  v31 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 104))(a3);
  v32 = *(_QWORD *)(a1 + 48);
  if (v32)
    (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
  if (v31)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 16))(v31);
  else
    result = 0;
  *(_QWORD *)(a1 + 48) = result;
  return result;
}

void sub_19C37BD94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  sub_19C351928();
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_19C37BDD0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = off_1E3D37D80;
  v2 = *(_QWORD *)(a1 + 120);
  if (v2)
  {
    v3 = sub_19C37BFF8(v2);
    MEMORY[0x1A1AD355C](v3, 0x10A0C40690396FALL);
  }
  v4 = *(void **)(a1 + 72);
  if (v4)
    operator delete(v4);
  *(_QWORD *)a1 = off_1E3D383E0;
  v5 = *(_QWORD *)(a1 + 40);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *(_QWORD *)(a1 + 48);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

uint64_t sub_19C37BE6C(uint64_t a1, size_t prime, _QWORD *a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  int8x8_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t v13;

  v8 = operator new();
  *(_QWORD *)(v8 + 24) = 0;
  *(_QWORD *)(v8 + 32) = 0;
  *(_QWORD *)(v8 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_OWORD *)v8 = xmmword_19C46DEE0;
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 24) = 0;
  v9 = operator new();
  *(_OWORD *)v9 = xmmword_19C46DEE0;
  *(_QWORD *)(v9 + 24) = 0;
  *(_QWORD *)(v9 + 32) = 0;
  *(_QWORD *)(v9 + 16) = 0;
  *(_QWORD *)(a1 + 32) = v9;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = *a3;
  *(_DWORD *)(a1 + 56) = 1065353216;
  *(_QWORD *)(a1 + 64) = *a4;
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
  }
  v10 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v10)
    goto LABEL_6;
  if (prime < *(_QWORD *)&v10)
  {
    v11 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 40) / *(float *)(a1 + 56));
    if (*(_QWORD *)&v10 < 3uLL || (v12 = (uint8x8_t)vcnt_s8(v10), v12.i16[0] = vaddlv_u8(v12), v12.u32[0] > 1uLL))
    {
      v11 = std::__next_prime(v11);
    }
    else
    {
      v13 = 1 << -(char)__clz(v11 - 1);
      if (v11 >= 2)
        v11 = v13;
    }
    if (prime <= v11)
      prime = v11;
    if (prime < *(_QWORD *)&v10)
LABEL_6:
      sub_19C380A00(a1, prime);
  }
  return a1;
}

void sub_19C37BFD0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_19C380BB4(v1);
  _Unwind_Resume(a1);
}

void sub_19C37BFE4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_19C38093C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19C37BFF8(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  _BYTE *v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _BYTE *v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;

  sub_19C37C140(a1);
  v2 = *(_QWORD **)(a1 + 80);
  v3 = v2[1] - 1;
  v2[1] = v3;
  if (!v3)
  {
    v4 = (_QWORD *)v2[2];
    v5 = (_BYTE *)v2[3];
    if (v5 == (_BYTE *)v4)
    {
      v4 = (_QWORD *)v2[3];
    }
    else
    {
      v6 = 0;
      do
      {
        v7 = v4[v6];
        if (v7)
        {
          (*(void (**)(_QWORD))(*(_QWORD *)v7 + 8))(v4[v6]);
          v4 = (_QWORD *)v2[2];
          v5 = (_BYTE *)v2[3];
        }
        ++v6;
      }
      while (v6 < (v5 - (_BYTE *)v4) >> 3);
    }
    if (v4)
    {
      v2[3] = v4;
      operator delete(v4);
    }
    MEMORY[0x1A1AD355C](v2, 0x1080C40B69A5871);
  }
  v8 = *(_QWORD **)(a1 + 72);
  v9 = v8[1] - 1;
  v8[1] = v9;
  if (!v9)
  {
    v10 = (_QWORD *)v8[2];
    v11 = (_BYTE *)v8[3];
    if (v11 == (_BYTE *)v10)
    {
      v10 = (_QWORD *)v8[3];
    }
    else
    {
      v12 = 0;
      do
      {
        v13 = v10[v12];
        if (v13)
        {
          (*(void (**)(_QWORD))(*(_QWORD *)v13 + 8))(v10[v12]);
          v10 = (_QWORD *)v8[2];
          v11 = (_BYTE *)v8[3];
        }
        ++v12;
      }
      while (v12 < (v11 - (_BYTE *)v10) >> 3);
    }
    if (v10)
    {
      v8[3] = v10;
      operator delete(v10);
    }
    MEMORY[0x1A1AD355C](v8, 0x1080C40B69A5871);
  }
  sub_19C37C208((uint64_t **)(a1 + 32));
  v14 = *(void **)(a1 + 8);
  if (v14)
  {
    *(_QWORD *)(a1 + 16) = v14;
    operator delete(v14);
  }
  return a1;
}

void sub_19C37C140(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t **v10;
  uint64_t *v11;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 == v3)
  {
    v3 = *(_QWORD *)(a1 + 16);
  }
  else
  {
    v4 = 0;
    do
    {
      v5 = *(_QWORD *)(v3 + 8 * v4);
      if (v5)
      {
        sub_19C37E3C8(v5 + 24);
        sub_19C37E494((uint64_t **)(a1 + 72), v5);
        v3 = *(_QWORD *)(a1 + 8);
        v2 = *(_QWORD *)(a1 + 16);
      }
      ++v4;
    }
    while (v4 < (v2 - v3) >> 3);
  }
  *(_QWORD *)(a1 + 16) = v3;
  if (*(_QWORD *)(a1 + 48))
  {
    v6 = (uint64_t *)(a1 + 32);
    v8 = *(_QWORD *)(a1 + 32);
    v7 = *(uint64_t **)(a1 + 40);
    v9 = *v7;
    *(_QWORD *)(v9 + 8) = *(_QWORD *)(v8 + 8);
    **(_QWORD **)(v8 + 8) = v9;
    *(_QWORD *)(a1 + 48) = 0;
    v10 = (uint64_t **)(a1 + 56);
    while (v7 != v6)
    {
      v11 = (uint64_t *)v7[1];
      sub_19C37C2FC(v10, v7, 1uLL);
      v7 = v11;
    }
  }
}

uint64_t **sub_19C37C208(uint64_t **a1)
{
  uint64_t **v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t **v5;
  uint64_t *v6;
  uint64_t v7;
  _QWORD *v8;
  _BYTE *v9;
  unint64_t v10;
  uint64_t v11;

  if (a1[2])
  {
    v3 = *a1;
    v2 = (uint64_t **)a1[1];
    v4 = *v2;
    v4[1] = (*a1)[1];
    *(_QWORD *)v3[1] = v4;
    a1[2] = 0;
    while (v2 != a1)
    {
      v5 = (uint64_t **)v2[1];
      sub_19C37C2FC(a1 + 3, v2, 1uLL);
      v2 = v5;
    }
  }
  v6 = a1[3];
  v7 = v6[1] - 1;
  v6[1] = v7;
  if (!v7)
  {
    v8 = (_QWORD *)v6[2];
    v9 = (_BYTE *)v6[3];
    if (v9 == (_BYTE *)v8)
    {
      v8 = (_QWORD *)v6[3];
    }
    else
    {
      v10 = 0;
      do
      {
        v11 = v8[v10];
        if (v11)
        {
          (*(void (**)(_QWORD))(*(_QWORD *)v11 + 8))(v8[v10]);
          v8 = (_QWORD *)v6[2];
          v9 = (_BYTE *)v6[3];
        }
        ++v10;
      }
      while (v10 < (v9 - (_BYTE *)v8) >> 3);
    }
    if (v8)
    {
      v6[3] = (uint64_t)v8;
      operator delete(v8);
    }
    MEMORY[0x1A1AD355C](v6, 0x1080C40B69A5871);
  }
  return a1;
}

void sub_19C37C2FC(uint64_t **a1, _QWORD *__p, unint64_t a3)
{
  uint64_t *v4;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  _QWORD *v43;
  uint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;

  if (a3 == 2)
  {
    v9 = *a1;
    v11 = (unint64_t *)(*a1 + 2);
    v10 = *v11;
    v12 = (*a1)[3] - *v11;
    if (v12 <= 0x187)
    {
      v50 = 0;
      sub_19C37C8DC(v11, 49 - (v12 >> 3), (const double *)&v50);
      v10 = *v11;
    }
    v13 = *(_QWORD **)(v10 + 384);
    if (!v13)
    {
      v13 = (_QWORD *)operator new();
      v14 = *v9;
      *v13 = &off_1E3D30218;
      v13[1] = &off_1E3D30308;
      v13[2] = 56 * v14;
      v13[3] = 0;
      v13[4] = v13 + 4;
      v13[5] = v13 + 4;
      v13[6] = 0;
      v15 = operator new[]();
      v16 = operator new(0x18uLL);
      v17 = (_QWORD *)v13[5];
      *v16 = v13 + 4;
      v16[1] = v17;
      v16[2] = v15;
      *v17 = v16;
      v18 = v13[6] + 1;
      v13[5] = v16;
      v13[6] = v18;
      v13[7] = 0;
      *(_QWORD *)(*v11 + 384) = v13;
    }
    if (__p)
    {
      __p[6] = v13[7];
      v13[7] = __p;
    }
  }
  else if (a3 == 1)
  {
    v4 = *a1;
    v6 = (unint64_t *)(*a1 + 2);
    v5 = *v6;
    v7 = (*a1)[3] - *v6;
    if (v7 <= 0xC7)
    {
      v50 = 0;
      sub_19C37C8DC(v6, 25 - (v7 >> 3), (const double *)&v50);
      v5 = *v6;
    }
    v8 = *(_QWORD **)(v5 + 192);
    if (!v8)
    {
      v8 = (_QWORD *)operator new();
      sub_19C37CB48(v8, *v4);
      *(_QWORD *)(*v6 + 192) = v8;
    }
    if (__p)
    {
      __p[3] = v8[7];
      v8[7] = __p;
    }
  }
  else if (a3 > 4)
  {
    if (a3 > 8)
    {
      if (a3 > 0x10)
      {
        if (a3 > 0x20)
        {
          if (a3 > 0x40)
          {
            operator delete(__p);
          }
          else
          {
            v49 = sub_19C37CDD8(*a1);
            if (__p)
            {
              __p[192] = v49[7];
              v49[7] = __p;
            }
          }
        }
        else
        {
          v44 = *a1;
          v46 = (unint64_t *)(*a1 + 2);
          v45 = *v46;
          v47 = (*a1)[3] - *v46;
          if (v47 >> 3 <= 0x300)
          {
            v50 = 0;
            sub_19C37C8DC(v46, 769 - (v47 >> 3), (const double *)&v50);
            v45 = *v46;
          }
          v48 = *(_QWORD **)(v45 + 6144);
          if (!v48)
          {
            v48 = (_QWORD *)operator new();
            sub_19C37CCFC(v48, *v44);
            *(_QWORD *)(*v46 + 6144) = v48;
          }
          if (__p)
          {
            __p[96] = v48[7];
            v48[7] = __p;
          }
        }
      }
      else
      {
        v39 = *a1;
        v41 = (unint64_t *)(*a1 + 2);
        v40 = *v41;
        v42 = (*a1)[3] - *v41;
        if (v42 <= 0xC07)
        {
          v50 = 0;
          sub_19C37C8DC(v41, 385 - (v42 >> 3), (const double *)&v50);
          v40 = *v41;
        }
        v43 = *(_QWORD **)(v40 + 3072);
        if (!v43)
        {
          v43 = (_QWORD *)operator new();
          sub_19C37CC20(v43, *v39);
          *(_QWORD *)(*v41 + 3072) = v43;
        }
        if (__p)
        {
          __p[48] = v43[7];
          v43[7] = __p;
        }
      }
    }
    else
    {
      v29 = *a1;
      v31 = (unint64_t *)(*a1 + 2);
      v30 = *v31;
      v32 = (*a1)[3] - *v31;
      if (v32 <= 0x607)
      {
        v50 = 0;
        sub_19C37C8DC(v31, 193 - (v32 >> 3), (const double *)&v50);
        v30 = *v31;
      }
      v33 = *(_QWORD **)(v30 + 1536);
      if (!v33)
      {
        v33 = (_QWORD *)operator new();
        v34 = *v29;
        *v33 = &off_1E3D302B8;
        v33[1] = &off_1E3D303A8;
        v33[2] = 200 * v34;
        v33[3] = 0;
        v33[4] = v33 + 4;
        v33[5] = v33 + 4;
        v33[6] = 0;
        v35 = operator new[]();
        v36 = operator new(0x18uLL);
        v37 = (_QWORD *)v33[5];
        *v36 = v33 + 4;
        v36[1] = v37;
        v36[2] = v35;
        *v37 = v36;
        v38 = v33[6] + 1;
        v33[5] = v36;
        v33[6] = v38;
        v33[7] = 0;
        *(_QWORD *)(*v31 + 1536) = v33;
      }
      if (__p)
      {
        __p[24] = v33[7];
        v33[7] = __p;
      }
    }
  }
  else
  {
    v19 = *a1;
    v21 = (unint64_t *)(*a1 + 2);
    v20 = *v21;
    v22 = (*a1)[3] - *v21;
    if (v22 <= 0x307)
    {
      v50 = 0;
      sub_19C37C8DC(v21, 97 - (v22 >> 3), (const double *)&v50);
      v20 = *v21;
    }
    v23 = *(_QWORD **)(v20 + 768);
    if (!v23)
    {
      v23 = (_QWORD *)operator new();
      v24 = *v19;
      *v23 = &off_1E3D30268;
      v23[1] = &off_1E3D30358;
      v23[2] = 104 * v24;
      v23[3] = 0;
      v23[4] = v23 + 4;
      v23[5] = v23 + 4;
      v23[6] = 0;
      v25 = operator new[]();
      v26 = operator new(0x18uLL);
      v27 = (_QWORD *)v23[5];
      *v26 = v23 + 4;
      v26[1] = v27;
      v26[2] = v25;
      *v27 = v26;
      v28 = v23[6] + 1;
      v23[5] = v26;
      v23[6] = v28;
      v23[7] = 0;
      *(_QWORD *)(*v21 + 768) = v23;
    }
    if (__p)
    {
      __p[12] = v23[7];
      v23[7] = __p;
    }
  }
}

void sub_19C37C7D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD355C](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

void sub_19C37C8DC(unint64_t *a1, unint64_t a2, const double *a3)
{
  unint64_t v6;
  unint64_t v7;
  double *v8;
  double *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  const double *v16;
  unint64_t v17;
  unint64_t v18;
  float64x2_t v19;
  float64x2_t *v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  unint64_t v24;
  char *v25;
  unint64_t v26;
  float64x2_t v27;
  float64x2_t *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char *v32;
  __int128 *v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;

  v7 = a1[1];
  v6 = a1[2];
  v8 = (double *)v7;
  if (a2 <= (uint64_t)(v6 - v7) >> 3)
  {
    v16 = (const double *)(v7 + 8 * a2);
    v17 = (a2 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v17 >= 0xF && (v7 >= (unint64_t)(a3 + 1) || v16 <= a3))
    {
      v18 = v17 + 1;
      v19 = vld1q_dup_f64(a3);
      v20 = (float64x2_t *)(v7 + 16);
      v21 = v18 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v20[-1] = v19;
        *v20 = v19;
        v20 += 2;
        v21 -= 4;
      }
      while (v21);
      if (v18 == (v18 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_19;
      v8 = (double *)(v7 + 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL));
    }
    do
      *v8++ = *a3;
    while (v8 != v16);
LABEL_19:
    a1[1] = (unint64_t)v16;
    return;
  }
  v9 = (double *)*a1;
  v10 = v7 - *a1;
  v11 = v10 >> 3;
  v12 = (v10 >> 3) + a2;
  if (v12 >> 61)
    sub_19C2A18E8();
  v13 = v6 - (_QWORD)v9;
  if (v13 >> 2 > v12)
    v12 = v13 >> 2;
  if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
    v14 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v14 = v12;
  if (v14)
  {
    if (v14 >> 61)
      sub_19C2A143C();
    v15 = (char *)operator new(8 * v14);
  }
  else
  {
    v15 = 0;
  }
  v22 = (unint64_t)&v15[8 * v11];
  v23 = (char *)(v22 + 8 * a2);
  v24 = (a2 - 1) & 0x1FFFFFFFFFFFFFFFLL;
  v25 = (char *)v22;
  if (v24 < 0x13)
    goto LABEL_28;
  if (v22 < (unint64_t)(a3 + 1))
  {
    v25 = &v15[8 * v11];
    if (&v15[8 * a2 + v10] > (char *)a3)
      goto LABEL_28;
  }
  v26 = v24 + 1;
  v27 = vld1q_dup_f64(a3);
  v28 = (float64x2_t *)&v15[8 * v11 + 16];
  v29 = v26 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v28[-1] = v27;
    *v28 = v27;
    v28 += 2;
    v29 -= 4;
  }
  while (v29);
  if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
  {
    v25 = (char *)(v22 + 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL));
    do
    {
LABEL_28:
      *(double *)v25 = *a3;
      v25 += 8;
    }
    while (v25 != v23);
    v9 = (double *)*a1;
  }
  if ((double *)v7 != v9)
  {
    v30 = v7 - (_QWORD)v9 - 8;
    if (v30 < 0x58)
      goto LABEL_46;
    if (v7 - (unint64_t)&v15[v10] < 0x20)
      goto LABEL_46;
    v31 = (v30 >> 3) + 1;
    v8 = (double *)(v7 - 8 * (v31 & 0x3FFFFFFFFFFFFFFCLL));
    v32 = &v15[8 * v11 - 16];
    v33 = (__int128 *)(v7 - 16);
    v34 = v31 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v35 = *v33;
      *((_OWORD *)v32 - 1) = *(v33 - 1);
      *(_OWORD *)v32 = v35;
      v32 -= 32;
      v33 -= 2;
      v34 -= 4;
    }
    while (v34);
    v22 -= 8 * (v31 & 0x3FFFFFFFFFFFFFFCLL);
    if (v31 == (v31 & 0x3FFFFFFFFFFFFFFCLL))
    {
      v8 = v9;
    }
    else
    {
LABEL_46:
      do
      {
        v36 = *((_QWORD *)v8-- - 1);
        *(_QWORD *)(v22 - 8) = v36;
        v22 -= 8;
      }
      while (v8 != v9);
      v8 = (double *)*a1;
    }
  }
  *a1 = v22;
  a1[1] = (unint64_t)v23;
  a1[2] = (unint64_t)&v15[8 * v14];
  if (v8)
    operator delete(v8);
}

_QWORD *sub_19C37CB48(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  *a1 = &off_1E3D37858;
  a1[1] = &off_1E3D37B50;
  a1[2] = 32 * a2;
  a1[3] = 0;
  a1[4] = a1 + 4;
  a1[5] = a1 + 4;
  a1[6] = 0;
  v3 = operator new[]();
  v4 = operator new(0x18uLL);
  v5 = (_QWORD *)a1[5];
  v6 = a1[6];
  *v4 = a1 + 4;
  v4[1] = v5;
  v4[2] = v3;
  *v5 = v4;
  a1[5] = v4;
  a1[6] = v6 + 1;
  a1[7] = 0;
  return a1;
}

void sub_19C37CBD4(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t *v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;

  if (v1[6])
  {
    v5 = v1[4];
    v4 = (uint64_t *)v1[5];
    v6 = *v4;
    *(_QWORD *)(v6 + 8) = *(_QWORD *)(v5 + 8);
    **(_QWORD **)(v5 + 8) = v6;
    v1[6] = 0;
    if (v4 != v2)
    {
      do
      {
        v7 = (uint64_t *)v4[1];
        operator delete(v4);
        v4 = v7;
      }
      while (v7 != v2);
    }
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_19C37CC20(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  *a1 = &off_1E3D301F0;
  a1[1] = &off_1E3D302E0;
  a1[2] = 392 * a2;
  a1[3] = 0;
  a1[4] = a1 + 4;
  a1[5] = a1 + 4;
  a1[6] = 0;
  v3 = operator new[]();
  v4 = operator new(0x18uLL);
  v5 = (_QWORD *)a1[5];
  v6 = a1[6];
  *v4 = a1 + 4;
  v4[1] = v5;
  v4[2] = v3;
  *v5 = v4;
  a1[5] = v4;
  a1[6] = v6 + 1;
  a1[7] = 0;
  return a1;
}

void sub_19C37CCB0(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t *v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;

  if (v1[6])
  {
    v5 = v1[4];
    v4 = (uint64_t *)v1[5];
    v6 = *v4;
    *(_QWORD *)(v6 + 8) = *(_QWORD *)(v5 + 8);
    **(_QWORD **)(v5 + 8) = v6;
    v1[6] = 0;
    if (v4 != v2)
    {
      do
      {
        v7 = (uint64_t *)v4[1];
        operator delete(v4);
        v4 = v7;
      }
      while (v7 != v2);
    }
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_19C37CCFC(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  *a1 = &off_1E3D30240;
  a1[1] = &off_1E3D30330;
  a1[2] = 776 * a2;
  a1[3] = 0;
  a1[4] = a1 + 4;
  a1[5] = a1 + 4;
  a1[6] = 0;
  v3 = operator new[]();
  v4 = operator new(0x18uLL);
  v5 = (_QWORD *)a1[5];
  v6 = a1[6];
  *v4 = a1 + 4;
  v4[1] = v5;
  v4[2] = v3;
  *v5 = v4;
  a1[5] = v4;
  a1[6] = v6 + 1;
  a1[7] = 0;
  return a1;
}

void sub_19C37CD8C(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t *v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;

  if (v1[6])
  {
    v5 = v1[4];
    v4 = (uint64_t *)v1[5];
    v6 = *v4;
    *(_QWORD *)(v6 + 8) = *(_QWORD *)(v5 + 8);
    **(_QWORD **)(v5 + 8) = v6;
    v1[6] = 0;
    if (v4 != v2)
    {
      do
      {
        v7 = (uint64_t *)v4[1];
        operator delete(v4);
        v4 = v7;
      }
      while (v7 != v2);
    }
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_19C37CDD8(uint64_t *a1)
{
  uint64_t v2;
  _QWORD *v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v12;

  v2 = a1[2];
  v3 = a1 + 2;
  v4 = a1[3] - v2;
  if (v4 >> 3 <= 0x600)
  {
    v12 = 0;
    sub_19C37C8DC((unint64_t *)a1 + 2, 1537 - (v4 >> 3), (const double *)&v12);
    v2 = *v3;
  }
  v5 = *(_QWORD **)(v2 + 12288);
  if (!v5)
  {
    v5 = (_QWORD *)operator new();
    v6 = *a1;
    *v5 = &off_1E3D30290;
    v5[1] = &off_1E3D30380;
    v5[2] = 1544 * v6;
    v5[3] = 0;
    v5[4] = v5 + 4;
    v5[5] = v5 + 4;
    v5[6] = 0;
    v7 = operator new[]();
    v8 = operator new(0x18uLL);
    v9 = (_QWORD *)v5[5];
    v10 = v5[6];
    *v8 = v5 + 4;
    v8[1] = v9;
    v8[2] = v7;
    *v9 = v8;
    v5[5] = v8;
    v5[6] = v10 + 1;
    v5[7] = 0;
    *(_QWORD *)(*v3 + 12288) = v5;
  }
  return v5;
}

void sub_19C37CED4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t *v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;

  if (v1[6])
  {
    v5 = v1[4];
    v4 = (uint64_t *)v1[5];
    v6 = *v4;
    *(_QWORD *)(v6 + 8) = *(_QWORD *)(v5 + 8);
    **(_QWORD **)(v5 + 8) = v6;
    v1[6] = 0;
    if (v4 != v2)
    {
      do
      {
        v7 = (uint64_t *)v4[1];
        operator delete(v4);
        v4 = v7;
      }
      while (v7 != v2);
    }
  }
  MEMORY[0x1A1AD355C](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

_QWORD *sub_19C37CF38(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  *a1 = &off_1E3D30380;
  v2 = a1 + 3;
  for (i = (uint64_t *)a1[4]; i != v2; i = (uint64_t *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1A1AD3538](v4, 0x1000C8077774924);
  }
  if (a1[5])
  {
    v6 = a1[3];
    v5 = (uint64_t *)a1[4];
    v7 = *v5;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(v6 + 8);
    **(_QWORD **)(v6 + 8) = v7;
    a1[5] = 0;
    if (v5 != v2)
    {
      do
      {
        v8 = (uint64_t *)v5[1];
        operator delete(v5);
        v5 = v8;
      }
      while (v8 != v2);
    }
  }
  return a1;
}

void sub_19C37CFE4(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  *a1 = &off_1E3D30380;
  v2 = a1 + 3;
  for (i = (uint64_t *)a1[4]; i != v2; i = (uint64_t *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1A1AD3538](v4, 0x1000C8077774924);
  }
  if (a1[5])
  {
    v6 = a1[3];
    v5 = (uint64_t *)a1[4];
    v7 = *v5;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(v6 + 8);
    **(_QWORD **)(v6 + 8) = v7;
    a1[5] = 0;
    if (v5 != v2)
    {
      do
      {
        v8 = (uint64_t *)v5[1];
        operator delete(v5);
        v5 = v8;
      }
      while (v8 != v2);
    }
  }
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C37D0A0()
{
  return 1544;
}

_QWORD *sub_19C37D0A8(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  *a1 = &off_1E3D30290;
  a1[1] = &off_1E3D30380;
  v2 = a1 + 4;
  for (i = (uint64_t *)a1[5]; i != v2; i = (uint64_t *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1A1AD3538](v4, 0x1000C8077774924);
  }
  if (a1[6])
  {
    v6 = a1[4];
    v5 = (uint64_t *)a1[5];
    v7 = *v5;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(v6 + 8);
    **(_QWORD **)(v6 + 8) = v7;
    a1[6] = 0;
    if (v5 != v2)
    {
      do
      {
        v8 = (uint64_t *)v5[1];
        operator delete(v5);
        v5 = v8;
      }
      while (v8 != v2);
    }
  }
  return a1;
}

void sub_19C37D15C(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  *a1 = &off_1E3D30290;
  a1[1] = &off_1E3D30380;
  v2 = a1 + 4;
  for (i = (uint64_t *)a1[5]; i != v2; i = (uint64_t *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1A1AD3538](v4, 0x1000C8077774924);
  }
  if (a1[6])
  {
    v6 = a1[4];
    v5 = (uint64_t *)a1[5];
    v7 = *v5;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(v6 + 8);
    **(_QWORD **)(v6 + 8) = v7;
    a1[6] = 0;
    if (v5 != v2)
    {
      do
      {
        v8 = (uint64_t *)v5[1];
        operator delete(v5);
        v5 = v8;
      }
      while (v8 != v2);
    }
  }
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C37D220()
{
  return 1536;
}

_QWORD *sub_19C37D228(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  *a1 = &off_1E3D30330;
  v2 = a1 + 3;
  for (i = (uint64_t *)a1[4]; i != v2; i = (uint64_t *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1A1AD3538](v4, 0x1000C8077774924);
  }
  if (a1[5])
  {
    v6 = a1[3];
    v5 = (uint64_t *)a1[4];
    v7 = *v5;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(v6 + 8);
    **(_QWORD **)(v6 + 8) = v7;
    a1[5] = 0;
    if (v5 != v2)
    {
      do
      {
        v8 = (uint64_t *)v5[1];
        operator delete(v5);
        v5 = v8;
      }
      while (v8 != v2);
    }
  }
  return a1;
}

void sub_19C37D2D4(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  *a1 = &off_1E3D30330;
  v2 = a1 + 3;
  for (i = (uint64_t *)a1[4]; i != v2; i = (uint64_t *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1A1AD3538](v4, 0x1000C8077774924);
  }
  if (a1[5])
  {
    v6 = a1[3];
    v5 = (uint64_t *)a1[4];
    v7 = *v5;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(v6 + 8);
    **(_QWORD **)(v6 + 8) = v7;
    a1[5] = 0;
    if (v5 != v2)
    {
      do
      {
        v8 = (uint64_t *)v5[1];
        operator delete(v5);
        v5 = v8;
      }
      while (v8 != v2);
    }
  }
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C37D390()
{
  return 776;
}

_QWORD *sub_19C37D398(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  *a1 = &off_1E3D30240;
  a1[1] = &off_1E3D30330;
  v2 = a1 + 4;
  for (i = (uint64_t *)a1[5]; i != v2; i = (uint64_t *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1A1AD3538](v4, 0x1000C8077774924);
  }
  if (a1[6])
  {
    v6 = a1[4];
    v5 = (uint64_t *)a1[5];
    v7 = *v5;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(v6 + 8);
    **(_QWORD **)(v6 + 8) = v7;
    a1[6] = 0;
    if (v5 != v2)
    {
      do
      {
        v8 = (uint64_t *)v5[1];
        operator delete(v5);
        v5 = v8;
      }
      while (v8 != v2);
    }
  }
  return a1;
}

void sub_19C37D44C(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  *a1 = &off_1E3D30240;
  a1[1] = &off_1E3D30330;
  v2 = a1 + 4;
  for (i = (uint64_t *)a1[5]; i != v2; i = (uint64_t *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1A1AD3538](v4, 0x1000C8077774924);
  }
  if (a1[6])
  {
    v6 = a1[4];
    v5 = (uint64_t *)a1[5];
    v7 = *v5;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(v6 + 8);
    **(_QWORD **)(v6 + 8) = v7;
    a1[6] = 0;
    if (v5 != v2)
    {
      do
      {
        v8 = (uint64_t *)v5[1];
        operator delete(v5);
        v5 = v8;
      }
      while (v8 != v2);
    }
  }
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C37D510()
{
  return 768;
}

_QWORD *sub_19C37D518(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  *a1 = &off_1E3D302E0;
  v2 = a1 + 3;
  for (i = (uint64_t *)a1[4]; i != v2; i = (uint64_t *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1A1AD3538](v4, 0x1000C8077774924);
  }
  if (a1[5])
  {
    v6 = a1[3];
    v5 = (uint64_t *)a1[4];
    v7 = *v5;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(v6 + 8);
    **(_QWORD **)(v6 + 8) = v7;
    a1[5] = 0;
    if (v5 != v2)
    {
      do
      {
        v8 = (uint64_t *)v5[1];
        operator delete(v5);
        v5 = v8;
      }
      while (v8 != v2);
    }
  }
  return a1;
}

void sub_19C37D5C4(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  *a1 = &off_1E3D302E0;
  v2 = a1 + 3;
  for (i = (uint64_t *)a1[4]; i != v2; i = (uint64_t *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1A1AD3538](v4, 0x1000C8077774924);
  }
  if (a1[5])
  {
    v6 = a1[3];
    v5 = (uint64_t *)a1[4];
    v7 = *v5;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(v6 + 8);
    **(_QWORD **)(v6 + 8) = v7;
    a1[5] = 0;
    if (v5 != v2)
    {
      do
      {
        v8 = (uint64_t *)v5[1];
        operator delete(v5);
        v5 = v8;
      }
      while (v8 != v2);
    }
  }
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C37D680()
{
  return 392;
}

_QWORD *sub_19C37D688(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  *a1 = &off_1E3D301F0;
  a1[1] = &off_1E3D302E0;
  v2 = a1 + 4;
  for (i = (uint64_t *)a1[5]; i != v2; i = (uint64_t *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1A1AD3538](v4, 0x1000C8077774924);
  }
  if (a1[6])
  {
    v6 = a1[4];
    v5 = (uint64_t *)a1[5];
    v7 = *v5;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(v6 + 8);
    **(_QWORD **)(v6 + 8) = v7;
    a1[6] = 0;
    if (v5 != v2)
    {
      do
      {
        v8 = (uint64_t *)v5[1];
        operator delete(v5);
        v5 = v8;
      }
      while (v8 != v2);
    }
  }
  return a1;
}

void sub_19C37D73C(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  *a1 = &off_1E3D301F0;
  a1[1] = &off_1E3D302E0;
  v2 = a1 + 4;
  for (i = (uint64_t *)a1[5]; i != v2; i = (uint64_t *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1A1AD3538](v4, 0x1000C8077774924);
  }
  if (a1[6])
  {
    v6 = a1[4];
    v5 = (uint64_t *)a1[5];
    v7 = *v5;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(v6 + 8);
    **(_QWORD **)(v6 + 8) = v7;
    a1[6] = 0;
    if (v5 != v2)
    {
      do
      {
        v8 = (uint64_t *)v5[1];
        operator delete(v5);
        v5 = v8;
      }
      while (v8 != v2);
    }
  }
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C37D800()
{
  return 384;
}

_QWORD *sub_19C37D808(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  *a1 = &off_1E3D303A8;
  v2 = a1 + 3;
  for (i = (uint64_t *)a1[4]; i != v2; i = (uint64_t *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1A1AD3538](v4, 0x1000C8077774924);
  }
  if (a1[5])
  {
    v6 = a1[3];
    v5 = (uint64_t *)a1[4];
    v7 = *v5;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(v6 + 8);
    **(_QWORD **)(v6 + 8) = v7;
    a1[5] = 0;
    if (v5 != v2)
    {
      do
      {
        v8 = (uint64_t *)v5[1];
        operator delete(v5);
        v5 = v8;
      }
      while (v8 != v2);
    }
  }
  return a1;
}

void sub_19C37D8B4(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  *a1 = &off_1E3D303A8;
  v2 = a1 + 3;
  for (i = (uint64_t *)a1[4]; i != v2; i = (uint64_t *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1A1AD3538](v4, 0x1000C8077774924);
  }
  if (a1[5])
  {
    v6 = a1[3];
    v5 = (uint64_t *)a1[4];
    v7 = *v5;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(v6 + 8);
    **(_QWORD **)(v6 + 8) = v7;
    a1[5] = 0;
    if (v5 != v2)
    {
      do
      {
        v8 = (uint64_t *)v5[1];
        operator delete(v5);
        v5 = v8;
      }
      while (v8 != v2);
    }
  }
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C37D970()
{
  return 200;
}

_QWORD *sub_19C37D978(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  *a1 = &off_1E3D302B8;
  a1[1] = &off_1E3D303A8;
  v2 = a1 + 4;
  for (i = (uint64_t *)a1[5]; i != v2; i = (uint64_t *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1A1AD3538](v4, 0x1000C8077774924);
  }
  if (a1[6])
  {
    v6 = a1[4];
    v5 = (uint64_t *)a1[5];
    v7 = *v5;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(v6 + 8);
    **(_QWORD **)(v6 + 8) = v7;
    a1[6] = 0;
    if (v5 != v2)
    {
      do
      {
        v8 = (uint64_t *)v5[1];
        operator delete(v5);
        v5 = v8;
      }
      while (v8 != v2);
    }
  }
  return a1;
}

void sub_19C37DA2C(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  *a1 = &off_1E3D302B8;
  a1[1] = &off_1E3D303A8;
  v2 = a1 + 4;
  for (i = (uint64_t *)a1[5]; i != v2; i = (uint64_t *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1A1AD3538](v4, 0x1000C8077774924);
  }
  if (a1[6])
  {
    v6 = a1[4];
    v5 = (uint64_t *)a1[5];
    v7 = *v5;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(v6 + 8);
    **(_QWORD **)(v6 + 8) = v7;
    a1[6] = 0;
    if (v5 != v2)
    {
      do
      {
        v8 = (uint64_t *)v5[1];
        operator delete(v5);
        v5 = v8;
      }
      while (v8 != v2);
    }
  }
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C37DAF0()
{
  return 192;
}

_QWORD *sub_19C37DAF8(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  *a1 = &off_1E3D30358;
  v2 = a1 + 3;
  for (i = (uint64_t *)a1[4]; i != v2; i = (uint64_t *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1A1AD3538](v4, 0x1000C8077774924);
  }
  if (a1[5])
  {
    v6 = a1[3];
    v5 = (uint64_t *)a1[4];
    v7 = *v5;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(v6 + 8);
    **(_QWORD **)(v6 + 8) = v7;
    a1[5] = 0;
    if (v5 != v2)
    {
      do
      {
        v8 = (uint64_t *)v5[1];
        operator delete(v5);
        v5 = v8;
      }
      while (v8 != v2);
    }
  }
  return a1;
}

void sub_19C37DBA4(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  *a1 = &off_1E3D30358;
  v2 = a1 + 3;
  for (i = (uint64_t *)a1[4]; i != v2; i = (uint64_t *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1A1AD3538](v4, 0x1000C8077774924);
  }
  if (a1[5])
  {
    v6 = a1[3];
    v5 = (uint64_t *)a1[4];
    v7 = *v5;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(v6 + 8);
    **(_QWORD **)(v6 + 8) = v7;
    a1[5] = 0;
    if (v5 != v2)
    {
      do
      {
        v8 = (uint64_t *)v5[1];
        operator delete(v5);
        v5 = v8;
      }
      while (v8 != v2);
    }
  }
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C37DC60()
{
  return 104;
}

_QWORD *sub_19C37DC68(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  *a1 = &off_1E3D30268;
  a1[1] = &off_1E3D30358;
  v2 = a1 + 4;
  for (i = (uint64_t *)a1[5]; i != v2; i = (uint64_t *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1A1AD3538](v4, 0x1000C8077774924);
  }
  if (a1[6])
  {
    v6 = a1[4];
    v5 = (uint64_t *)a1[5];
    v7 = *v5;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(v6 + 8);
    **(_QWORD **)(v6 + 8) = v7;
    a1[6] = 0;
    if (v5 != v2)
    {
      do
      {
        v8 = (uint64_t *)v5[1];
        operator delete(v5);
        v5 = v8;
      }
      while (v8 != v2);
    }
  }
  return a1;
}

void sub_19C37DD1C(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  *a1 = &off_1E3D30268;
  a1[1] = &off_1E3D30358;
  v2 = a1 + 4;
  for (i = (uint64_t *)a1[5]; i != v2; i = (uint64_t *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1A1AD3538](v4, 0x1000C8077774924);
  }
  if (a1[6])
  {
    v6 = a1[4];
    v5 = (uint64_t *)a1[5];
    v7 = *v5;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(v6 + 8);
    **(_QWORD **)(v6 + 8) = v7;
    a1[6] = 0;
    if (v5 != v2)
    {
      do
      {
        v8 = (uint64_t *)v5[1];
        operator delete(v5);
        v5 = v8;
      }
      while (v8 != v2);
    }
  }
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C37DDE0()
{
  return 96;
}

_QWORD *sub_19C37DDE8(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  *a1 = &off_1E3D30308;
  v2 = a1 + 3;
  for (i = (uint64_t *)a1[4]; i != v2; i = (uint64_t *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1A1AD3538](v4, 0x1000C8077774924);
  }
  if (a1[5])
  {
    v6 = a1[3];
    v5 = (uint64_t *)a1[4];
    v7 = *v5;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(v6 + 8);
    **(_QWORD **)(v6 + 8) = v7;
    a1[5] = 0;
    if (v5 != v2)
    {
      do
      {
        v8 = (uint64_t *)v5[1];
        operator delete(v5);
        v5 = v8;
      }
      while (v8 != v2);
    }
  }
  return a1;
}

void sub_19C37DE94(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  *a1 = &off_1E3D30308;
  v2 = a1 + 3;
  for (i = (uint64_t *)a1[4]; i != v2; i = (uint64_t *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1A1AD3538](v4, 0x1000C8077774924);
  }
  if (a1[5])
  {
    v6 = a1[3];
    v5 = (uint64_t *)a1[4];
    v7 = *v5;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(v6 + 8);
    **(_QWORD **)(v6 + 8) = v7;
    a1[5] = 0;
    if (v5 != v2)
    {
      do
      {
        v8 = (uint64_t *)v5[1];
        operator delete(v5);
        v5 = v8;
      }
      while (v8 != v2);
    }
  }
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C37DF50()
{
  return 56;
}

_QWORD *sub_19C37DF58(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  *a1 = &off_1E3D30218;
  a1[1] = &off_1E3D30308;
  v2 = a1 + 4;
  for (i = (uint64_t *)a1[5]; i != v2; i = (uint64_t *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1A1AD3538](v4, 0x1000C8077774924);
  }
  if (a1[6])
  {
    v6 = a1[4];
    v5 = (uint64_t *)a1[5];
    v7 = *v5;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(v6 + 8);
    **(_QWORD **)(v6 + 8) = v7;
    a1[6] = 0;
    if (v5 != v2)
    {
      do
      {
        v8 = (uint64_t *)v5[1];
        operator delete(v5);
        v5 = v8;
      }
      while (v8 != v2);
    }
  }
  return a1;
}

void sub_19C37E00C(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  *a1 = &off_1E3D30218;
  a1[1] = &off_1E3D30308;
  v2 = a1 + 4;
  for (i = (uint64_t *)a1[5]; i != v2; i = (uint64_t *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1A1AD3538](v4, 0x1000C8077774924);
  }
  if (a1[6])
  {
    v6 = a1[4];
    v5 = (uint64_t *)a1[5];
    v7 = *v5;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(v6 + 8);
    **(_QWORD **)(v6 + 8) = v7;
    a1[6] = 0;
    if (v5 != v2)
    {
      do
      {
        v8 = (uint64_t *)v5[1];
        operator delete(v5);
        v5 = v8;
      }
      while (v8 != v2);
    }
  }
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C37E0D0()
{
  return 48;
}

_QWORD *sub_19C37E0D8(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  *a1 = &off_1E3D37B50;
  v2 = a1 + 3;
  for (i = (uint64_t *)a1[4]; i != v2; i = (uint64_t *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1A1AD3538](v4, 0x1000C8077774924);
  }
  if (a1[5])
  {
    v6 = a1[3];
    v5 = (uint64_t *)a1[4];
    v7 = *v5;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(v6 + 8);
    **(_QWORD **)(v6 + 8) = v7;
    a1[5] = 0;
    if (v5 != v2)
    {
      do
      {
        v8 = (uint64_t *)v5[1];
        operator delete(v5);
        v5 = v8;
      }
      while (v8 != v2);
    }
  }
  return a1;
}

void sub_19C37E184(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  *a1 = &off_1E3D37B50;
  v2 = a1 + 3;
  for (i = (uint64_t *)a1[4]; i != v2; i = (uint64_t *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1A1AD3538](v4, 0x1000C8077774924);
  }
  if (a1[5])
  {
    v6 = a1[3];
    v5 = (uint64_t *)a1[4];
    v7 = *v5;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(v6 + 8);
    **(_QWORD **)(v6 + 8) = v7;
    a1[5] = 0;
    if (v5 != v2)
    {
      do
      {
        v8 = (uint64_t *)v5[1];
        operator delete(v5);
        v5 = v8;
      }
      while (v8 != v2);
    }
  }
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C37E240()
{
  return 32;
}

_QWORD *sub_19C37E248(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  *a1 = &off_1E3D37858;
  a1[1] = &off_1E3D37B50;
  v2 = a1 + 4;
  for (i = (uint64_t *)a1[5]; i != v2; i = (uint64_t *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1A1AD3538](v4, 0x1000C8077774924);
  }
  if (a1[6])
  {
    v6 = a1[4];
    v5 = (uint64_t *)a1[5];
    v7 = *v5;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(v6 + 8);
    **(_QWORD **)(v6 + 8) = v7;
    a1[6] = 0;
    if (v5 != v2)
    {
      do
      {
        v8 = (uint64_t *)v5[1];
        operator delete(v5);
        v5 = v8;
      }
      while (v8 != v2);
    }
  }
  return a1;
}

void sub_19C37E2FC(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  *a1 = &off_1E3D37858;
  a1[1] = &off_1E3D37B50;
  v2 = a1 + 4;
  for (i = (uint64_t *)a1[5]; i != v2; i = (uint64_t *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1A1AD3538](v4, 0x1000C8077774924);
  }
  if (a1[6])
  {
    v6 = a1[4];
    v5 = (uint64_t *)a1[5];
    v7 = *v5;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(v6 + 8);
    **(_QWORD **)(v6 + 8) = v7;
    a1[6] = 0;
    if (v5 != v2)
    {
      do
      {
        v8 = (uint64_t *)v5[1];
        operator delete(v5);
        v5 = v8;
      }
      while (v8 != v2);
    }
  }
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C37E3C0()
{
  return 24;
}

uint64_t sub_19C37E3C8(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  _BYTE *v6;
  unint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v2;
    sub_19C37E928((uint64_t **)(a1 + 24), v2, (uint64_t)(*(_QWORD *)(a1 + 16) - (_QWORD)v2) >> 4);
  }
  v3 = *(_QWORD **)(a1 + 24);
  v4 = v3[1] - 1;
  v3[1] = v4;
  if (!v4)
  {
    v5 = (_QWORD *)v3[2];
    v6 = (_BYTE *)v3[3];
    if (v6 == (_BYTE *)v5)
    {
      v5 = (_QWORD *)v3[3];
    }
    else
    {
      v7 = 0;
      do
      {
        v8 = v5[v7];
        if (v8)
        {
          (*(void (**)(_QWORD))(*(_QWORD *)v8 + 8))(v5[v7]);
          v5 = (_QWORD *)v3[2];
          v6 = (_BYTE *)v3[3];
        }
        ++v7;
      }
      while (v7 < (v6 - (_BYTE *)v5) >> 3);
    }
    if (v5)
    {
      v3[3] = v5;
      operator delete(v5);
    }
    MEMORY[0x1A1AD355C](v3, 0x1080C40B69A5871);
  }
  return a1;
}

void sub_19C37E494(uint64_t **a1, uint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v3 = *a1;
  v5 = (unint64_t *)(*a1 + 2);
  v4 = *v5;
  v6 = (*a1)[3] - *v5;
  if (v6 <= 0x207)
  {
    v8 = 0;
    sub_19C37C8DC(v5, 65 - (v6 >> 3), (const double *)&v8);
    v4 = *v5;
  }
  v7 = *(_QWORD **)(v4 + 512);
  if (!v7)
  {
    v7 = (_QWORD *)operator new();
    sub_19C37E55C(v7, *v3);
    *(_QWORD *)(*v5 + 512) = v7;
  }
  *(_QWORD *)(a2 + 64) = v7[7];
  v7[7] = a2;
}

void sub_19C37E538(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD355C](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

_QWORD *sub_19C37E55C(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  *a1 = &off_1E3D376F0;
  a1[1] = &off_1E3D379E8;
  a1[2] = 72 * a2;
  a1[3] = 0;
  a1[4] = a1 + 4;
  a1[5] = a1 + 4;
  a1[6] = 0;
  v3 = operator new[]();
  v4 = operator new(0x18uLL);
  v5 = (_QWORD *)a1[5];
  v6 = a1[6];
  *v4 = a1 + 4;
  v4[1] = v5;
  v4[2] = v3;
  *v5 = v4;
  a1[5] = v4;
  a1[6] = v6 + 1;
  a1[7] = 0;
  return a1;
}

void sub_19C37E5EC(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t *v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;

  if (v1[6])
  {
    v5 = v1[4];
    v4 = (uint64_t *)v1[5];
    v6 = *v4;
    *(_QWORD *)(v6 + 8) = *(_QWORD *)(v5 + 8);
    **(_QWORD **)(v5 + 8) = v6;
    v1[6] = 0;
    if (v4 != v2)
    {
      do
      {
        v7 = (uint64_t *)v4[1];
        operator delete(v4);
        v4 = v7;
      }
      while (v7 != v2);
    }
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_19C37E638(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  *a1 = &off_1E3D379E8;
  v2 = a1 + 3;
  for (i = (uint64_t *)a1[4]; i != v2; i = (uint64_t *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1A1AD3538](v4, 0x1000C8077774924);
  }
  if (a1[5])
  {
    v6 = a1[3];
    v5 = (uint64_t *)a1[4];
    v7 = *v5;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(v6 + 8);
    **(_QWORD **)(v6 + 8) = v7;
    a1[5] = 0;
    if (v5 != v2)
    {
      do
      {
        v8 = (uint64_t *)v5[1];
        operator delete(v5);
        v5 = v8;
      }
      while (v8 != v2);
    }
  }
  return a1;
}

void sub_19C37E6E4(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  *a1 = &off_1E3D379E8;
  v2 = a1 + 3;
  for (i = (uint64_t *)a1[4]; i != v2; i = (uint64_t *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1A1AD3538](v4, 0x1000C8077774924);
  }
  if (a1[5])
  {
    v6 = a1[3];
    v5 = (uint64_t *)a1[4];
    v7 = *v5;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(v6 + 8);
    **(_QWORD **)(v6 + 8) = v7;
    a1[5] = 0;
    if (v5 != v2)
    {
      do
      {
        v8 = (uint64_t *)v5[1];
        operator delete(v5);
        v5 = v8;
      }
      while (v8 != v2);
    }
  }
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C37E7A0()
{
  return 72;
}

_QWORD *sub_19C37E7A8(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  *a1 = &off_1E3D376F0;
  a1[1] = &off_1E3D379E8;
  v2 = a1 + 4;
  for (i = (uint64_t *)a1[5]; i != v2; i = (uint64_t *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1A1AD3538](v4, 0x1000C8077774924);
  }
  if (a1[6])
  {
    v6 = a1[4];
    v5 = (uint64_t *)a1[5];
    v7 = *v5;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(v6 + 8);
    **(_QWORD **)(v6 + 8) = v7;
    a1[6] = 0;
    if (v5 != v2)
    {
      do
      {
        v8 = (uint64_t *)v5[1];
        operator delete(v5);
        v5 = v8;
      }
      while (v8 != v2);
    }
  }
  return a1;
}

void sub_19C37E85C(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  *a1 = &off_1E3D376F0;
  a1[1] = &off_1E3D379E8;
  v2 = a1 + 4;
  for (i = (uint64_t *)a1[5]; i != v2; i = (uint64_t *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1A1AD3538](v4, 0x1000C8077774924);
  }
  if (a1[6])
  {
    v6 = a1[4];
    v5 = (uint64_t *)a1[5];
    v7 = *v5;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(v6 + 8);
    **(_QWORD **)(v6 + 8) = v7;
    a1[6] = 0;
    if (v5 != v2)
    {
      do
      {
        v8 = (uint64_t *)v5[1];
        operator delete(v5);
        v5 = v8;
      }
      while (v8 != v2);
    }
  }
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C37E920()
{
  return 64;
}

void sub_19C37E928(uint64_t **a1, _QWORD *__p, unint64_t a3)
{
  uint64_t *v4;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;

  if (a3 == 2)
  {
    v9 = *a1;
    v11 = (unint64_t *)(*a1 + 2);
    v10 = *v11;
    v12 = (*a1)[3] - *v11;
    if (v12 <= 0x107)
    {
      v35 = 0;
      sub_19C37C8DC(v11, 33 - (v12 >> 3), (const double *)&v35);
      v10 = *v11;
    }
    v13 = *(_QWORD **)(v10 + 256);
    if (!v13)
    {
      v13 = (_QWORD *)operator new();
      sub_19C37EDB8(v13, *v9);
      *(_QWORD *)(*v11 + 256) = v13;
    }
    __p[4] = v13[7];
    v13[7] = __p;
  }
  else if (a3 == 1)
  {
    v4 = *a1;
    v6 = (unint64_t *)(*a1 + 2);
    v5 = *v6;
    v7 = (*a1)[3] - *v6;
    if (v7 <= 0x87)
    {
      v35 = 0;
      sub_19C37C8DC(v6, 17 - (v7 >> 3), (const double *)&v35);
      v5 = *v6;
    }
    v8 = *(_QWORD **)(v5 + 128);
    if (!v8)
    {
      v8 = (_QWORD *)operator new();
      sub_19C37ECDC(v8, *v4);
      *(_QWORD *)(*v6 + 128) = v8;
    }
    __p[2] = v8[7];
    v8[7] = __p;
  }
  else if (a3 > 4)
  {
    if (a3 > 8)
    {
      if (a3 > 0x10)
      {
        if (a3 > 0x20)
        {
          if (a3 > 0x40)
          {
            operator delete(__p);
          }
          else
          {
            v34 = sub_19C37F204(*a1);
            __p[128] = v34[7];
            v34[7] = __p;
          }
        }
        else
        {
          v29 = *a1;
          v31 = (unint64_t *)(*a1 + 2);
          v30 = *v31;
          v32 = (*a1)[3] - *v31;
          if (v32 >> 3 <= 0x200)
          {
            v35 = 0;
            sub_19C37C8DC(v31, 513 - (v32 >> 3), (const double *)&v35);
            v30 = *v31;
          }
          v33 = *(_QWORD **)(v30 + 4096);
          if (!v33)
          {
            v33 = (_QWORD *)operator new();
            sub_19C37F128(v33, *v29);
            *(_QWORD *)(*v31 + 4096) = v33;
          }
          __p[64] = v33[7];
          v33[7] = __p;
        }
      }
      else
      {
        v24 = *a1;
        v26 = (unint64_t *)(*a1 + 2);
        v25 = *v26;
        v27 = (*a1)[3] - *v26;
        if (v27 <= 0x807)
        {
          v35 = 0;
          sub_19C37C8DC(v26, 257 - (v27 >> 3), (const double *)&v35);
          v25 = *v26;
        }
        v28 = *(_QWORD **)(v25 + 2048);
        if (!v28)
        {
          v28 = (_QWORD *)operator new();
          sub_19C37F04C(v28, *v24);
          *(_QWORD *)(*v26 + 2048) = v28;
        }
        __p[32] = v28[7];
        v28[7] = __p;
      }
    }
    else
    {
      v19 = *a1;
      v21 = (unint64_t *)(*a1 + 2);
      v20 = *v21;
      v22 = (*a1)[3] - *v21;
      if (v22 <= 0x407)
      {
        v35 = 0;
        sub_19C37C8DC(v21, 129 - (v22 >> 3), (const double *)&v35);
        v20 = *v21;
      }
      v23 = *(_QWORD **)(v20 + 1024);
      if (!v23)
      {
        v23 = (_QWORD *)operator new();
        sub_19C37EF70(v23, *v19);
        *(_QWORD *)(*v21 + 1024) = v23;
      }
      __p[16] = v23[7];
      v23[7] = __p;
    }
  }
  else
  {
    v14 = *a1;
    v16 = (unint64_t *)(*a1 + 2);
    v15 = *v16;
    v17 = (*a1)[3] - *v16;
    if (v17 <= 0x207)
    {
      v35 = 0;
      sub_19C37C8DC(v16, 65 - (v17 >> 3), (const double *)&v35);
      v15 = *v16;
    }
    v18 = *(_QWORD **)(v15 + 512);
    if (!v18)
    {
      v18 = (_QWORD *)operator new();
      sub_19C37EE94(v18, *v14);
      *(_QWORD *)(*v16 + 512) = v18;
    }
    __p[8] = v18[7];
    v18[7] = __p;
  }
}

void sub_19C37ECA4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD355C](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

_QWORD *sub_19C37ECDC(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  *a1 = &off_1E3D37740;
  a1[1] = &off_1E3D37A38;
  a1[2] = 24 * a2;
  a1[3] = 0;
  a1[4] = a1 + 4;
  a1[5] = a1 + 4;
  a1[6] = 0;
  v3 = operator new[]();
  v4 = operator new(0x18uLL);
  v5 = (_QWORD *)a1[5];
  v6 = a1[6];
  *v4 = a1 + 4;
  v4[1] = v5;
  v4[2] = v3;
  *v5 = v4;
  a1[5] = v4;
  a1[6] = v6 + 1;
  a1[7] = 0;
  return a1;
}

void sub_19C37ED6C(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t *v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;

  if (v1[6])
  {
    v5 = v1[4];
    v4 = (uint64_t *)v1[5];
    v6 = *v4;
    *(_QWORD *)(v6 + 8) = *(_QWORD *)(v5 + 8);
    **(_QWORD **)(v5 + 8) = v6;
    v1[6] = 0;
    if (v4 != v2)
    {
      do
      {
        v7 = (uint64_t *)v4[1];
        operator delete(v4);
        v4 = v7;
      }
      while (v7 != v2);
    }
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_19C37EDB8(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  *a1 = &off_1E3D37768;
  a1[1] = &off_1E3D37A60;
  a1[2] = 40 * a2;
  a1[3] = 0;
  a1[4] = a1 + 4;
  a1[5] = a1 + 4;
  a1[6] = 0;
  v3 = operator new[]();
  v4 = operator new(0x18uLL);
  v5 = (_QWORD *)a1[5];
  v6 = a1[6];
  *v4 = a1 + 4;
  v4[1] = v5;
  v4[2] = v3;
  *v5 = v4;
  a1[5] = v4;
  a1[6] = v6 + 1;
  a1[7] = 0;
  return a1;
}

void sub_19C37EE48(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t *v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;

  if (v1[6])
  {
    v5 = v1[4];
    v4 = (uint64_t *)v1[5];
    v6 = *v4;
    *(_QWORD *)(v6 + 8) = *(_QWORD *)(v5 + 8);
    **(_QWORD **)(v5 + 8) = v6;
    v1[6] = 0;
    if (v4 != v2)
    {
      do
      {
        v7 = (uint64_t *)v4[1];
        operator delete(v4);
        v4 = v7;
      }
      while (v7 != v2);
    }
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_19C37EE94(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  *a1 = &off_1E3D377B8;
  a1[1] = &off_1E3D37AB0;
  a1[2] = 72 * a2;
  a1[3] = 0;
  a1[4] = a1 + 4;
  a1[5] = a1 + 4;
  a1[6] = 0;
  v3 = operator new[]();
  v4 = operator new(0x18uLL);
  v5 = (_QWORD *)a1[5];
  v6 = a1[6];
  *v4 = a1 + 4;
  v4[1] = v5;
  v4[2] = v3;
  *v5 = v4;
  a1[5] = v4;
  a1[6] = v6 + 1;
  a1[7] = 0;
  return a1;
}

void sub_19C37EF24(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t *v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;

  if (v1[6])
  {
    v5 = v1[4];
    v4 = (uint64_t *)v1[5];
    v6 = *v4;
    *(_QWORD *)(v6 + 8) = *(_QWORD *)(v5 + 8);
    **(_QWORD **)(v5 + 8) = v6;
    v1[6] = 0;
    if (v4 != v2)
    {
      do
      {
        v7 = (uint64_t *)v4[1];
        operator delete(v4);
        v4 = v7;
      }
      while (v7 != v2);
    }
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_19C37EF70(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  *a1 = &off_1E3D37808;
  a1[1] = &off_1E3D37B00;
  a1[2] = 136 * a2;
  a1[3] = 0;
  a1[4] = a1 + 4;
  a1[5] = a1 + 4;
  a1[6] = 0;
  v3 = operator new[]();
  v4 = operator new(0x18uLL);
  v5 = (_QWORD *)a1[5];
  v6 = a1[6];
  *v4 = a1 + 4;
  v4[1] = v5;
  v4[2] = v3;
  *v5 = v4;
  a1[5] = v4;
  a1[6] = v6 + 1;
  a1[7] = 0;
  return a1;
}

void sub_19C37F000(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t *v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;

  if (v1[6])
  {
    v5 = v1[4];
    v4 = (uint64_t *)v1[5];
    v6 = *v4;
    *(_QWORD *)(v6 + 8) = *(_QWORD *)(v5 + 8);
    **(_QWORD **)(v5 + 8) = v6;
    v1[6] = 0;
    if (v4 != v2)
    {
      do
      {
        v7 = (uint64_t *)v4[1];
        operator delete(v4);
        v4 = v7;
      }
      while (v7 != v2);
    }
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_19C37F04C(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  *a1 = &off_1E3D37718;
  a1[1] = &off_1E3D37A10;
  a1[2] = 264 * a2;
  a1[3] = 0;
  a1[4] = a1 + 4;
  a1[5] = a1 + 4;
  a1[6] = 0;
  v3 = operator new[]();
  v4 = operator new(0x18uLL);
  v5 = (_QWORD *)a1[5];
  v6 = a1[6];
  *v4 = a1 + 4;
  v4[1] = v5;
  v4[2] = v3;
  *v5 = v4;
  a1[5] = v4;
  a1[6] = v6 + 1;
  a1[7] = 0;
  return a1;
}

void sub_19C37F0DC(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t *v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;

  if (v1[6])
  {
    v5 = v1[4];
    v4 = (uint64_t *)v1[5];
    v6 = *v4;
    *(_QWORD *)(v6 + 8) = *(_QWORD *)(v5 + 8);
    **(_QWORD **)(v5 + 8) = v6;
    v1[6] = 0;
    if (v4 != v2)
    {
      do
      {
        v7 = (uint64_t *)v4[1];
        operator delete(v4);
        v4 = v7;
      }
      while (v7 != v2);
    }
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_19C37F128(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  *a1 = &off_1E3D37790;
  a1[1] = &off_1E3D37A88;
  a1[2] = 520 * a2;
  a1[3] = 0;
  a1[4] = a1 + 4;
  a1[5] = a1 + 4;
  a1[6] = 0;
  v3 = operator new[]();
  v4 = operator new(0x18uLL);
  v5 = (_QWORD *)a1[5];
  v6 = a1[6];
  *v4 = a1 + 4;
  v4[1] = v5;
  v4[2] = v3;
  *v5 = v4;
  a1[5] = v4;
  a1[6] = v6 + 1;
  a1[7] = 0;
  return a1;
}

void sub_19C37F1B8(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t *v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;

  if (v1[6])
  {
    v5 = v1[4];
    v4 = (uint64_t *)v1[5];
    v6 = *v4;
    *(_QWORD *)(v6 + 8) = *(_QWORD *)(v5 + 8);
    **(_QWORD **)(v5 + 8) = v6;
    v1[6] = 0;
    if (v4 != v2)
    {
      do
      {
        v7 = (uint64_t *)v4[1];
        operator delete(v4);
        v4 = v7;
      }
      while (v7 != v2);
    }
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_19C37F204(uint64_t *a1)
{
  uint64_t v2;
  _QWORD *v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v12;

  v2 = a1[2];
  v3 = a1 + 2;
  v4 = a1[3] - v2;
  if (v4 >> 3 <= 0x400)
  {
    v12 = 0;
    sub_19C37C8DC((unint64_t *)a1 + 2, 1025 - (v4 >> 3), (const double *)&v12);
    v2 = *v3;
  }
  v5 = *(_QWORD **)(v2 + 0x2000);
  if (!v5)
  {
    v5 = (_QWORD *)operator new();
    v6 = *a1;
    *v5 = &off_1E3D377E0;
    v5[1] = &off_1E3D37AD8;
    v5[2] = 1032 * v6;
    v5[3] = 0;
    v5[4] = v5 + 4;
    v5[5] = v5 + 4;
    v5[6] = 0;
    v7 = operator new[]();
    v8 = operator new(0x18uLL);
    v9 = (_QWORD *)v5[5];
    v10 = v5[6];
    *v8 = v5 + 4;
    v8[1] = v9;
    v8[2] = v7;
    *v9 = v8;
    v5[5] = v8;
    v5[6] = v10 + 1;
    v5[7] = 0;
    *(_QWORD *)(*v3 + 0x2000) = v5;
  }
  return v5;
}

void sub_19C37F300(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t *v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;

  if (v1[6])
  {
    v5 = v1[4];
    v4 = (uint64_t *)v1[5];
    v6 = *v4;
    *(_QWORD *)(v6 + 8) = *(_QWORD *)(v5 + 8);
    **(_QWORD **)(v5 + 8) = v6;
    v1[6] = 0;
    if (v4 != v2)
    {
      do
      {
        v7 = (uint64_t *)v4[1];
        operator delete(v4);
        v4 = v7;
      }
      while (v7 != v2);
    }
  }
  MEMORY[0x1A1AD355C](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

_QWORD *sub_19C37F364(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  *a1 = &off_1E3D37AD8;
  v2 = a1 + 3;
  for (i = (uint64_t *)a1[4]; i != v2; i = (uint64_t *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1A1AD3538](v4, 0x1000C8077774924);
  }
  if (a1[5])
  {
    v6 = a1[3];
    v5 = (uint64_t *)a1[4];
    v7 = *v5;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(v6 + 8);
    **(_QWORD **)(v6 + 8) = v7;
    a1[5] = 0;
    if (v5 != v2)
    {
      do
      {
        v8 = (uint64_t *)v5[1];
        operator delete(v5);
        v5 = v8;
      }
      while (v8 != v2);
    }
  }
  return a1;
}

void sub_19C37F410(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  *a1 = &off_1E3D37AD8;
  v2 = a1 + 3;
  for (i = (uint64_t *)a1[4]; i != v2; i = (uint64_t *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1A1AD3538](v4, 0x1000C8077774924);
  }
  if (a1[5])
  {
    v6 = a1[3];
    v5 = (uint64_t *)a1[4];
    v7 = *v5;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(v6 + 8);
    **(_QWORD **)(v6 + 8) = v7;
    a1[5] = 0;
    if (v5 != v2)
    {
      do
      {
        v8 = (uint64_t *)v5[1];
        operator delete(v5);
        v5 = v8;
      }
      while (v8 != v2);
    }
  }
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C37F4CC()
{
  return 1032;
}

_QWORD *sub_19C37F4D4(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  *a1 = &off_1E3D377E0;
  a1[1] = &off_1E3D37AD8;
  v2 = a1 + 4;
  for (i = (uint64_t *)a1[5]; i != v2; i = (uint64_t *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1A1AD3538](v4, 0x1000C8077774924);
  }
  if (a1[6])
  {
    v6 = a1[4];
    v5 = (uint64_t *)a1[5];
    v7 = *v5;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(v6 + 8);
    **(_QWORD **)(v6 + 8) = v7;
    a1[6] = 0;
    if (v5 != v2)
    {
      do
      {
        v8 = (uint64_t *)v5[1];
        operator delete(v5);
        v5 = v8;
      }
      while (v8 != v2);
    }
  }
  return a1;
}

void sub_19C37F588(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  *a1 = &off_1E3D377E0;
  a1[1] = &off_1E3D37AD8;
  v2 = a1 + 4;
  for (i = (uint64_t *)a1[5]; i != v2; i = (uint64_t *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1A1AD3538](v4, 0x1000C8077774924);
  }
  if (a1[6])
  {
    v6 = a1[4];
    v5 = (uint64_t *)a1[5];
    v7 = *v5;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(v6 + 8);
    **(_QWORD **)(v6 + 8) = v7;
    a1[6] = 0;
    if (v5 != v2)
    {
      do
      {
        v8 = (uint64_t *)v5[1];
        operator delete(v5);
        v5 = v8;
      }
      while (v8 != v2);
    }
  }
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C37F64C()
{
  return 1024;
}

_QWORD *sub_19C37F654(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  *a1 = &off_1E3D37A88;
  v2 = a1 + 3;
  for (i = (uint64_t *)a1[4]; i != v2; i = (uint64_t *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1A1AD3538](v4, 0x1000C8077774924);
  }
  if (a1[5])
  {
    v6 = a1[3];
    v5 = (uint64_t *)a1[4];
    v7 = *v5;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(v6 + 8);
    **(_QWORD **)(v6 + 8) = v7;
    a1[5] = 0;
    if (v5 != v2)
    {
      do
      {
        v8 = (uint64_t *)v5[1];
        operator delete(v5);
        v5 = v8;
      }
      while (v8 != v2);
    }
  }
  return a1;
}

void sub_19C37F700(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  *a1 = &off_1E3D37A88;
  v2 = a1 + 3;
  for (i = (uint64_t *)a1[4]; i != v2; i = (uint64_t *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1A1AD3538](v4, 0x1000C8077774924);
  }
  if (a1[5])
  {
    v6 = a1[3];
    v5 = (uint64_t *)a1[4];
    v7 = *v5;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(v6 + 8);
    **(_QWORD **)(v6 + 8) = v7;
    a1[5] = 0;
    if (v5 != v2)
    {
      do
      {
        v8 = (uint64_t *)v5[1];
        operator delete(v5);
        v5 = v8;
      }
      while (v8 != v2);
    }
  }
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C37F7BC()
{
  return 520;
}

_QWORD *sub_19C37F7C4(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  *a1 = &off_1E3D37790;
  a1[1] = &off_1E3D37A88;
  v2 = a1 + 4;
  for (i = (uint64_t *)a1[5]; i != v2; i = (uint64_t *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1A1AD3538](v4, 0x1000C8077774924);
  }
  if (a1[6])
  {
    v6 = a1[4];
    v5 = (uint64_t *)a1[5];
    v7 = *v5;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(v6 + 8);
    **(_QWORD **)(v6 + 8) = v7;
    a1[6] = 0;
    if (v5 != v2)
    {
      do
      {
        v8 = (uint64_t *)v5[1];
        operator delete(v5);
        v5 = v8;
      }
      while (v8 != v2);
    }
  }
  return a1;
}

void sub_19C37F878(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  *a1 = &off_1E3D37790;
  a1[1] = &off_1E3D37A88;
  v2 = a1 + 4;
  for (i = (uint64_t *)a1[5]; i != v2; i = (uint64_t *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1A1AD3538](v4, 0x1000C8077774924);
  }
  if (a1[6])
  {
    v6 = a1[4];
    v5 = (uint64_t *)a1[5];
    v7 = *v5;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(v6 + 8);
    **(_QWORD **)(v6 + 8) = v7;
    a1[6] = 0;
    if (v5 != v2)
    {
      do
      {
        v8 = (uint64_t *)v5[1];
        operator delete(v5);
        v5 = v8;
      }
      while (v8 != v2);
    }
  }
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C37F93C()
{
  return 512;
}

_QWORD *sub_19C37F944(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  *a1 = &off_1E3D37A10;
  v2 = a1 + 3;
  for (i = (uint64_t *)a1[4]; i != v2; i = (uint64_t *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1A1AD3538](v4, 0x1000C8077774924);
  }
  if (a1[5])
  {
    v6 = a1[3];
    v5 = (uint64_t *)a1[4];
    v7 = *v5;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(v6 + 8);
    **(_QWORD **)(v6 + 8) = v7;
    a1[5] = 0;
    if (v5 != v2)
    {
      do
      {
        v8 = (uint64_t *)v5[1];
        operator delete(v5);
        v5 = v8;
      }
      while (v8 != v2);
    }
  }
  return a1;
}

void sub_19C37F9F0(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  *a1 = &off_1E3D37A10;
  v2 = a1 + 3;
  for (i = (uint64_t *)a1[4]; i != v2; i = (uint64_t *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1A1AD3538](v4, 0x1000C8077774924);
  }
  if (a1[5])
  {
    v6 = a1[3];
    v5 = (uint64_t *)a1[4];
    v7 = *v5;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(v6 + 8);
    **(_QWORD **)(v6 + 8) = v7;
    a1[5] = 0;
    if (v5 != v2)
    {
      do
      {
        v8 = (uint64_t *)v5[1];
        operator delete(v5);
        v5 = v8;
      }
      while (v8 != v2);
    }
  }
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C37FAAC()
{
  return 264;
}

_QWORD *sub_19C37FAB4(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  *a1 = &off_1E3D37718;
  a1[1] = &off_1E3D37A10;
  v2 = a1 + 4;
  for (i = (uint64_t *)a1[5]; i != v2; i = (uint64_t *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1A1AD3538](v4, 0x1000C8077774924);
  }
  if (a1[6])
  {
    v6 = a1[4];
    v5 = (uint64_t *)a1[5];
    v7 = *v5;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(v6 + 8);
    **(_QWORD **)(v6 + 8) = v7;
    a1[6] = 0;
    if (v5 != v2)
    {
      do
      {
        v8 = (uint64_t *)v5[1];
        operator delete(v5);
        v5 = v8;
      }
      while (v8 != v2);
    }
  }
  return a1;
}

void sub_19C37FB68(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  *a1 = &off_1E3D37718;
  a1[1] = &off_1E3D37A10;
  v2 = a1 + 4;
  for (i = (uint64_t *)a1[5]; i != v2; i = (uint64_t *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1A1AD3538](v4, 0x1000C8077774924);
  }
  if (a1[6])
  {
    v6 = a1[4];
    v5 = (uint64_t *)a1[5];
    v7 = *v5;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(v6 + 8);
    **(_QWORD **)(v6 + 8) = v7;
    a1[6] = 0;
    if (v5 != v2)
    {
      do
      {
        v8 = (uint64_t *)v5[1];
        operator delete(v5);
        v5 = v8;
      }
      while (v8 != v2);
    }
  }
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C37FC2C()
{
  return 256;
}

_QWORD *sub_19C37FC34(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  *a1 = &off_1E3D37B00;
  v2 = a1 + 3;
  for (i = (uint64_t *)a1[4]; i != v2; i = (uint64_t *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1A1AD3538](v4, 0x1000C8077774924);
  }
  if (a1[5])
  {
    v6 = a1[3];
    v5 = (uint64_t *)a1[4];
    v7 = *v5;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(v6 + 8);
    **(_QWORD **)(v6 + 8) = v7;
    a1[5] = 0;
    if (v5 != v2)
    {
      do
      {
        v8 = (uint64_t *)v5[1];
        operator delete(v5);
        v5 = v8;
      }
      while (v8 != v2);
    }
  }
  return a1;
}

void sub_19C37FCE0(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  *a1 = &off_1E3D37B00;
  v2 = a1 + 3;
  for (i = (uint64_t *)a1[4]; i != v2; i = (uint64_t *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1A1AD3538](v4, 0x1000C8077774924);
  }
  if (a1[5])
  {
    v6 = a1[3];
    v5 = (uint64_t *)a1[4];
    v7 = *v5;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(v6 + 8);
    **(_QWORD **)(v6 + 8) = v7;
    a1[5] = 0;
    if (v5 != v2)
    {
      do
      {
        v8 = (uint64_t *)v5[1];
        operator delete(v5);
        v5 = v8;
      }
      while (v8 != v2);
    }
  }
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C37FD9C()
{
  return 136;
}

_QWORD *sub_19C37FDA4(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  *a1 = &off_1E3D37808;
  a1[1] = &off_1E3D37B00;
  v2 = a1 + 4;
  for (i = (uint64_t *)a1[5]; i != v2; i = (uint64_t *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1A1AD3538](v4, 0x1000C8077774924);
  }
  if (a1[6])
  {
    v6 = a1[4];
    v5 = (uint64_t *)a1[5];
    v7 = *v5;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(v6 + 8);
    **(_QWORD **)(v6 + 8) = v7;
    a1[6] = 0;
    if (v5 != v2)
    {
      do
      {
        v8 = (uint64_t *)v5[1];
        operator delete(v5);
        v5 = v8;
      }
      while (v8 != v2);
    }
  }
  return a1;
}

void sub_19C37FE58(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  *a1 = &off_1E3D37808;
  a1[1] = &off_1E3D37B00;
  v2 = a1 + 4;
  for (i = (uint64_t *)a1[5]; i != v2; i = (uint64_t *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1A1AD3538](v4, 0x1000C8077774924);
  }
  if (a1[6])
  {
    v6 = a1[4];
    v5 = (uint64_t *)a1[5];
    v7 = *v5;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(v6 + 8);
    **(_QWORD **)(v6 + 8) = v7;
    a1[6] = 0;
    if (v5 != v2)
    {
      do
      {
        v8 = (uint64_t *)v5[1];
        operator delete(v5);
        v5 = v8;
      }
      while (v8 != v2);
    }
  }
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C37FF1C()
{
  return 128;
}

_QWORD *sub_19C37FF24(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  *a1 = &off_1E3D37AB0;
  v2 = a1 + 3;
  for (i = (uint64_t *)a1[4]; i != v2; i = (uint64_t *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1A1AD3538](v4, 0x1000C8077774924);
  }
  if (a1[5])
  {
    v6 = a1[3];
    v5 = (uint64_t *)a1[4];
    v7 = *v5;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(v6 + 8);
    **(_QWORD **)(v6 + 8) = v7;
    a1[5] = 0;
    if (v5 != v2)
    {
      do
      {
        v8 = (uint64_t *)v5[1];
        operator delete(v5);
        v5 = v8;
      }
      while (v8 != v2);
    }
  }
  return a1;
}

void sub_19C37FFD0(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  *a1 = &off_1E3D37AB0;
  v2 = a1 + 3;
  for (i = (uint64_t *)a1[4]; i != v2; i = (uint64_t *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1A1AD3538](v4, 0x1000C8077774924);
  }
  if (a1[5])
  {
    v6 = a1[3];
    v5 = (uint64_t *)a1[4];
    v7 = *v5;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(v6 + 8);
    **(_QWORD **)(v6 + 8) = v7;
    a1[5] = 0;
    if (v5 != v2)
    {
      do
      {
        v8 = (uint64_t *)v5[1];
        operator delete(v5);
        v5 = v8;
      }
      while (v8 != v2);
    }
  }
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C38008C()
{
  return 72;
}

_QWORD *sub_19C380094(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  *a1 = &off_1E3D377B8;
  a1[1] = &off_1E3D37AB0;
  v2 = a1 + 4;
  for (i = (uint64_t *)a1[5]; i != v2; i = (uint64_t *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1A1AD3538](v4, 0x1000C8077774924);
  }
  if (a1[6])
  {
    v6 = a1[4];
    v5 = (uint64_t *)a1[5];
    v7 = *v5;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(v6 + 8);
    **(_QWORD **)(v6 + 8) = v7;
    a1[6] = 0;
    if (v5 != v2)
    {
      do
      {
        v8 = (uint64_t *)v5[1];
        operator delete(v5);
        v5 = v8;
      }
      while (v8 != v2);
    }
  }
  return a1;
}

void sub_19C380148(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  *a1 = &off_1E3D377B8;
  a1[1] = &off_1E3D37AB0;
  v2 = a1 + 4;
  for (i = (uint64_t *)a1[5]; i != v2; i = (uint64_t *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1A1AD3538](v4, 0x1000C8077774924);
  }
  if (a1[6])
  {
    v6 = a1[4];
    v5 = (uint64_t *)a1[5];
    v7 = *v5;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(v6 + 8);
    **(_QWORD **)(v6 + 8) = v7;
    a1[6] = 0;
    if (v5 != v2)
    {
      do
      {
        v8 = (uint64_t *)v5[1];
        operator delete(v5);
        v5 = v8;
      }
      while (v8 != v2);
    }
  }
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C38020C()
{
  return 64;
}

_QWORD *sub_19C380214(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  *a1 = &off_1E3D37A60;
  v2 = a1 + 3;
  for (i = (uint64_t *)a1[4]; i != v2; i = (uint64_t *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1A1AD3538](v4, 0x1000C8077774924);
  }
  if (a1[5])
  {
    v6 = a1[3];
    v5 = (uint64_t *)a1[4];
    v7 = *v5;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(v6 + 8);
    **(_QWORD **)(v6 + 8) = v7;
    a1[5] = 0;
    if (v5 != v2)
    {
      do
      {
        v8 = (uint64_t *)v5[1];
        operator delete(v5);
        v5 = v8;
      }
      while (v8 != v2);
    }
  }
  return a1;
}

void sub_19C3802C0(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  *a1 = &off_1E3D37A60;
  v2 = a1 + 3;
  for (i = (uint64_t *)a1[4]; i != v2; i = (uint64_t *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1A1AD3538](v4, 0x1000C8077774924);
  }
  if (a1[5])
  {
    v6 = a1[3];
    v5 = (uint64_t *)a1[4];
    v7 = *v5;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(v6 + 8);
    **(_QWORD **)(v6 + 8) = v7;
    a1[5] = 0;
    if (v5 != v2)
    {
      do
      {
        v8 = (uint64_t *)v5[1];
        operator delete(v5);
        v5 = v8;
      }
      while (v8 != v2);
    }
  }
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C38037C()
{
  return 40;
}

_QWORD *sub_19C380384(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  *a1 = &off_1E3D37768;
  a1[1] = &off_1E3D37A60;
  v2 = a1 + 4;
  for (i = (uint64_t *)a1[5]; i != v2; i = (uint64_t *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1A1AD3538](v4, 0x1000C8077774924);
  }
  if (a1[6])
  {
    v6 = a1[4];
    v5 = (uint64_t *)a1[5];
    v7 = *v5;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(v6 + 8);
    **(_QWORD **)(v6 + 8) = v7;
    a1[6] = 0;
    if (v5 != v2)
    {
      do
      {
        v8 = (uint64_t *)v5[1];
        operator delete(v5);
        v5 = v8;
      }
      while (v8 != v2);
    }
  }
  return a1;
}

void sub_19C380438(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  *a1 = &off_1E3D37768;
  a1[1] = &off_1E3D37A60;
  v2 = a1 + 4;
  for (i = (uint64_t *)a1[5]; i != v2; i = (uint64_t *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1A1AD3538](v4, 0x1000C8077774924);
  }
  if (a1[6])
  {
    v6 = a1[4];
    v5 = (uint64_t *)a1[5];
    v7 = *v5;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(v6 + 8);
    **(_QWORD **)(v6 + 8) = v7;
    a1[6] = 0;
    if (v5 != v2)
    {
      do
      {
        v8 = (uint64_t *)v5[1];
        operator delete(v5);
        v5 = v8;
      }
      while (v8 != v2);
    }
  }
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C3804FC()
{
  return 32;
}

_QWORD *sub_19C380504(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  *a1 = &off_1E3D37A38;
  v2 = a1 + 3;
  for (i = (uint64_t *)a1[4]; i != v2; i = (uint64_t *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1A1AD3538](v4, 0x1000C8077774924);
  }
  if (a1[5])
  {
    v6 = a1[3];
    v5 = (uint64_t *)a1[4];
    v7 = *v5;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(v6 + 8);
    **(_QWORD **)(v6 + 8) = v7;
    a1[5] = 0;
    if (v5 != v2)
    {
      do
      {
        v8 = (uint64_t *)v5[1];
        operator delete(v5);
        v5 = v8;
      }
      while (v8 != v2);
    }
  }
  return a1;
}

void sub_19C3805B0(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  *a1 = &off_1E3D37A38;
  v2 = a1 + 3;
  for (i = (uint64_t *)a1[4]; i != v2; i = (uint64_t *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1A1AD3538](v4, 0x1000C8077774924);
  }
  if (a1[5])
  {
    v6 = a1[3];
    v5 = (uint64_t *)a1[4];
    v7 = *v5;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(v6 + 8);
    **(_QWORD **)(v6 + 8) = v7;
    a1[5] = 0;
    if (v5 != v2)
    {
      do
      {
        v8 = (uint64_t *)v5[1];
        operator delete(v5);
        v5 = v8;
      }
      while (v8 != v2);
    }
  }
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C38066C()
{
  return 24;
}

_QWORD *sub_19C380674(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  *a1 = &off_1E3D37740;
  a1[1] = &off_1E3D37A38;
  v2 = a1 + 4;
  for (i = (uint64_t *)a1[5]; i != v2; i = (uint64_t *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1A1AD3538](v4, 0x1000C8077774924);
  }
  if (a1[6])
  {
    v6 = a1[4];
    v5 = (uint64_t *)a1[5];
    v7 = *v5;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(v6 + 8);
    **(_QWORD **)(v6 + 8) = v7;
    a1[6] = 0;
    if (v5 != v2)
    {
      do
      {
        v8 = (uint64_t *)v5[1];
        operator delete(v5);
        v5 = v8;
      }
      while (v8 != v2);
    }
  }
  return a1;
}

void sub_19C380728(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  *a1 = &off_1E3D37740;
  a1[1] = &off_1E3D37A38;
  v2 = a1 + 4;
  for (i = (uint64_t *)a1[5]; i != v2; i = (uint64_t *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1A1AD3538](v4, 0x1000C8077774924);
  }
  if (a1[6])
  {
    v6 = a1[4];
    v5 = (uint64_t *)a1[5];
    v7 = *v5;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(v6 + 8);
    **(_QWORD **)(v6 + 8) = v7;
    a1[6] = 0;
    if (v5 != v2)
    {
      do
      {
        v8 = (uint64_t *)v5[1];
        operator delete(v5);
        v5 = v8;
      }
      while (v8 != v2);
    }
  }
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C3807EC()
{
  return 16;
}

uint64_t sub_19C3807F4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = off_1E3D37D80;
  v2 = *(_QWORD *)(a1 + 120);
  if (v2)
  {
    v3 = sub_19C37BFF8(v2);
    MEMORY[0x1A1AD355C](v3, 0x10A0C40690396FALL);
  }
  v4 = *(void **)(a1 + 72);
  if (v4)
    operator delete(v4);
  *(_QWORD *)a1 = off_1E3D383E0;
  v5 = *(_QWORD *)(a1 + 40);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *(_QWORD *)(a1 + 48);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void sub_19C380890(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = off_1E3D37D80;
  v2 = *(_QWORD *)(a1 + 120);
  if (v2)
  {
    v3 = sub_19C37BFF8(v2);
    MEMORY[0x1A1AD355C](v3, 0x10A0C40690396FALL);
  }
  v4 = *(void **)(a1 + 72);
  if (v4)
    operator delete(v4);
  *(_QWORD *)a1 = off_1E3D383E0;
  v5 = *(_QWORD *)(a1 + 40);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *(_QWORD *)(a1 + 48);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C38093C(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  _BYTE *v6;
  unint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    sub_19C381878((uint64_t **)(a1 + 16), v2, *(_QWORD *)(a1 + 8));
  v3 = *(_QWORD **)(a1 + 16);
  v4 = v3[1] - 1;
  v3[1] = v4;
  if (!v4)
  {
    v5 = (_QWORD *)v3[2];
    v6 = (_BYTE *)v3[3];
    if (v6 == (_BYTE *)v5)
    {
      v5 = (_QWORD *)v3[3];
    }
    else
    {
      v7 = 0;
      do
      {
        v8 = v5[v7];
        if (v8)
        {
          (*(void (**)(_QWORD))(*(_QWORD *)v8 + 8))(v5[v7]);
          v5 = (_QWORD *)v3[2];
          v6 = (_BYTE *)v3[3];
        }
        ++v7;
      }
      while (v7 < (v6 - (_BYTE *)v5) >> 3);
    }
    if (v5)
    {
      v3[3] = v5;
      operator delete(v5);
    }
    MEMORY[0x1A1AD355C](v3, 0x1080C40B69A5871);
  }
  return a1;
}

void sub_19C380A00(uint64_t a1, unint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;

  if (!a2)
  {
    v15 = *(_QWORD **)a1;
    *(_QWORD *)a1 = 0;
    if (v15)
      sub_19C381878((uint64_t **)(a1 + 16), v15, *(_QWORD *)(a1 + 8));
    *(_QWORD *)(a1 + 8) = 0;
    return;
  }
  v4 = sub_19C381110((uint64_t **)(a1 + 16), a2);
  v5 = *(_QWORD **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
    sub_19C381878((uint64_t **)(a1 + 16), v5, *(_QWORD *)(a1 + 8));
  v6 = 0;
  *(_QWORD *)(a1 + 8) = a2;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
  while (a2 != v6);
  v8 = a1 + 24;
  v7 = *(_QWORD **)(a1 + 24);
  if (v7)
  {
    v9 = v7[1];
    v10 = a2 - 1;
    if ((a2 & (a2 - 1)) == 0)
    {
      v11 = v9 & v10;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v11) = v8;
      while (1)
      {
        v12 = (_QWORD *)*v7;
        if (!*v7)
          break;
        v13 = v12[1] & v10;
        if (v13 == v11)
        {
          v7 = (_QWORD *)*v7;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v13))
        {
          *v7 = *v12;
          v14 = 8 * v13;
          *v12 = **(_QWORD **)(*(_QWORD *)a1 + v14);
          **(_QWORD **)(*(_QWORD *)a1 + v14) = v12;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v13) = v7;
          v7 = v12;
          v11 = v13;
        }
      }
      return;
    }
    if (v9 >= a2)
      v9 %= a2;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v9) = v8;
    v16 = (_QWORD *)*v7;
    if (*v7)
    {
      do
      {
        v18 = v16[1];
        if (v18 >= a2)
          v18 %= a2;
        if (v18 != v9)
        {
          if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v18))
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v18) = v7;
            goto LABEL_25;
          }
          *v7 = *v16;
          v17 = 8 * v18;
          *v16 = **(_QWORD **)(*(_QWORD *)a1 + v17);
          **(_QWORD **)(*(_QWORD *)a1 + v17) = v16;
          v16 = v7;
        }
        v18 = v9;
LABEL_25:
        v7 = v16;
        v16 = (_QWORD *)*v16;
        v9 = v18;
      }
      while (v16);
    }
  }
}

uint64_t sub_19C380BB4(uint64_t a1)
{
  _QWORD *v2;
  uint64_t **v3;
  _QWORD *v4;
  uint64_t *v5;
  uint64_t v6;
  _QWORD *v7;
  _BYTE *v8;
  unint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD **)(a1 + 24);
  v3 = (uint64_t **)(a1 + 32);
  while (v2)
  {
    v4 = (_QWORD *)*v2;
    sub_19C380C80(v3, (uint64_t)v2);
    v2 = v4;
  }
  v5 = *v3;
  v6 = v5[1] - 1;
  v5[1] = v6;
  if (!v6)
  {
    v7 = (_QWORD *)v5[2];
    v8 = (_BYTE *)v5[3];
    if (v8 == (_BYTE *)v7)
    {
      v7 = (_QWORD *)v5[3];
    }
    else
    {
      v9 = 0;
      do
      {
        v10 = v7[v9];
        if (v10)
        {
          (*(void (**)(_QWORD))(*(_QWORD *)v10 + 8))(v7[v9]);
          v7 = (_QWORD *)v5[2];
          v8 = (_BYTE *)v5[3];
        }
        ++v9;
      }
      while (v9 < (v8 - (_BYTE *)v7) >> 3);
    }
    if (v7)
    {
      v5[3] = (uint64_t)v7;
      operator delete(v7);
    }
    MEMORY[0x1A1AD355C](v5, 0x1080C40B69A5871);
  }
  return sub_19C38093C(a1);
}

void sub_19C380C80(uint64_t **a1, uint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v3 = *a1;
  v5 = (unint64_t *)(*a1 + 2);
  v4 = *v5;
  v6 = (*a1)[3] - *v5;
  if (v6 <= 0xC7)
  {
    v8 = 0;
    sub_19C37C8DC(v5, 25 - (v6 >> 3), (const double *)&v8);
    v4 = *v5;
  }
  v7 = *(_QWORD **)(v4 + 192);
  if (!v7)
  {
    v7 = (_QWORD *)operator new();
    sub_19C380D48(v7, *v3);
    *(_QWORD *)(*v5 + 192) = v7;
  }
  *(_QWORD *)(a2 + 24) = v7[7];
  v7[7] = a2;
}

void sub_19C380D24(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD355C](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

_QWORD *sub_19C380D48(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  *a1 = &off_1E3D37830;
  a1[1] = &off_1E3D37B28;
  a1[2] = 32 * a2;
  a1[3] = 0;
  a1[4] = a1 + 4;
  a1[5] = a1 + 4;
  a1[6] = 0;
  v3 = operator new[]();
  v4 = operator new(0x18uLL);
  v5 = (_QWORD *)a1[5];
  v6 = a1[6];
  *v4 = a1 + 4;
  v4[1] = v5;
  v4[2] = v3;
  *v5 = v4;
  a1[5] = v4;
  a1[6] = v6 + 1;
  a1[7] = 0;
  return a1;
}

void sub_19C380DD4(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t *v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;

  if (v1[6])
  {
    v5 = v1[4];
    v4 = (uint64_t *)v1[5];
    v6 = *v4;
    *(_QWORD *)(v6 + 8) = *(_QWORD *)(v5 + 8);
    **(_QWORD **)(v5 + 8) = v6;
    v1[6] = 0;
    if (v4 != v2)
    {
      do
      {
        v7 = (uint64_t *)v4[1];
        operator delete(v4);
        v4 = v7;
      }
      while (v7 != v2);
    }
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_19C380E20(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  *a1 = &off_1E3D37B28;
  v2 = a1 + 3;
  for (i = (uint64_t *)a1[4]; i != v2; i = (uint64_t *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1A1AD3538](v4, 0x1000C8077774924);
  }
  if (a1[5])
  {
    v6 = a1[3];
    v5 = (uint64_t *)a1[4];
    v7 = *v5;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(v6 + 8);
    **(_QWORD **)(v6 + 8) = v7;
    a1[5] = 0;
    if (v5 != v2)
    {
      do
      {
        v8 = (uint64_t *)v5[1];
        operator delete(v5);
        v5 = v8;
      }
      while (v8 != v2);
    }
  }
  return a1;
}

void sub_19C380ECC(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  *a1 = &off_1E3D37B28;
  v2 = a1 + 3;
  for (i = (uint64_t *)a1[4]; i != v2; i = (uint64_t *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1A1AD3538](v4, 0x1000C8077774924);
  }
  if (a1[5])
  {
    v6 = a1[3];
    v5 = (uint64_t *)a1[4];
    v7 = *v5;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(v6 + 8);
    **(_QWORD **)(v6 + 8) = v7;
    a1[5] = 0;
    if (v5 != v2)
    {
      do
      {
        v8 = (uint64_t *)v5[1];
        operator delete(v5);
        v5 = v8;
      }
      while (v8 != v2);
    }
  }
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C380F88()
{
  return 32;
}

_QWORD *sub_19C380F90(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  *a1 = &off_1E3D37830;
  a1[1] = &off_1E3D37B28;
  v2 = a1 + 4;
  for (i = (uint64_t *)a1[5]; i != v2; i = (uint64_t *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1A1AD3538](v4, 0x1000C8077774924);
  }
  if (a1[6])
  {
    v6 = a1[4];
    v5 = (uint64_t *)a1[5];
    v7 = *v5;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(v6 + 8);
    **(_QWORD **)(v6 + 8) = v7;
    a1[6] = 0;
    if (v5 != v2)
    {
      do
      {
        v8 = (uint64_t *)v5[1];
        operator delete(v5);
        v5 = v8;
      }
      while (v8 != v2);
    }
  }
  return a1;
}

void sub_19C381044(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  *a1 = &off_1E3D37830;
  a1[1] = &off_1E3D37B28;
  v2 = a1 + 4;
  for (i = (uint64_t *)a1[5]; i != v2; i = (uint64_t *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1A1AD3538](v4, 0x1000C8077774924);
  }
  if (a1[6])
  {
    v6 = a1[4];
    v5 = (uint64_t *)a1[5];
    v7 = *v5;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(v6 + 8);
    **(_QWORD **)(v6 + 8) = v7;
    a1[6] = 0;
    if (v5 != v2)
    {
      do
      {
        v8 = (uint64_t *)v5[1];
        operator delete(v5);
        v5 = v8;
      }
      while (v8 != v2);
    }
  }
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C381108()
{
  return 24;
}

_QWORD *sub_19C381110(uint64_t **a1, unint64_t a2)
{
  uint64_t *v2;
  unint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t *v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;

  if (a2 == 2)
  {
    v9 = *a1;
    v11 = (unint64_t *)(*a1 + 2);
    v10 = *v11;
    v12 = (*a1)[3] - *v11;
    if (v12 <= 0x87)
    {
      v67 = 0;
      sub_19C37C8DC(v11, 17 - (v12 >> 3), (const double *)&v67);
      v10 = *v11;
    }
    v6 = *(_QWORD **)(v10 + 128);
    if (v6)
    {
      v7 = (_QWORD *)v6[7];
      if (v7)
      {
LABEL_12:
        v8 = v7[2];
        goto LABEL_53;
      }
    }
    else
    {
      v6 = (_QWORD *)operator new();
      sub_19C381D00(v6, *v9);
      *(_QWORD *)(*v11 + 128) = v6;
      v7 = (_QWORD *)v6[7];
      if (v7)
        goto LABEL_12;
    }
    v25 = v6[2];
    if (v25 > 0x5F)
    {
      v42 = v6[3];
      if (v42 + 24 <= v25)
      {
        v43 = *(_QWORD *)(v6[5] + 16);
      }
      else
      {
        v43 = operator new[]();
        v6[3] = 0;
        v44 = operator new(0x18uLL);
        v42 = 0;
        v44[2] = v43;
        *v44 = v6 + 4;
        v45 = (_QWORD *)v6[5];
        v44[1] = v45;
        *v45 = v44;
        v46 = v6[6] + 1;
        v6[5] = v44;
        v6[6] = v46;
      }
      v7 = (_QWORD *)(v43 + v42);
      v6[3] = v42 + 24;
      v7[2] = 0;
    }
    else
    {
      v7 = (_QWORD *)operator new[]();
      v26 = operator new(0x18uLL);
      v26[2] = v7;
      v28 = v6[4];
      v27 = v6 + 4;
      *v26 = v28;
      v26[1] = v27;
      *(_QWORD *)(v28 + 8) = v26;
      *v27 = v26;
      ++v27[2];
      v7[2] = 0;
    }
    return v7;
  }
  if (a2 == 1)
  {
    v2 = *a1;
    v4 = (unint64_t *)(*a1 + 2);
    v3 = *v4;
    v5 = (*a1)[3] - *v4;
    if (v5 <= 0x47)
    {
      v67 = 0;
      sub_19C37C8DC(v4, 9 - (v5 >> 3), (const double *)&v67);
      v3 = *v4;
    }
    v6 = *(_QWORD **)(v3 + 64);
    if (v6)
    {
      v7 = (_QWORD *)v6[7];
      if (v7)
      {
LABEL_7:
        v8 = v7[1];
        goto LABEL_53;
      }
    }
    else
    {
      v6 = (_QWORD *)operator new();
      sub_19C381C28(v6, *v2);
      *(_QWORD *)(*v4 + 64) = v6;
      v7 = (_QWORD *)v6[7];
      if (v7)
        goto LABEL_7;
    }
    v21 = v6[2];
    if (v21 > 0x3F)
    {
      v37 = v6[3];
      if (v37 + 16 <= v21)
      {
        v38 = *(_QWORD *)(v6[5] + 16);
      }
      else
      {
        v38 = operator new[]();
        v6[3] = 0;
        v39 = operator new(0x18uLL);
        v37 = 0;
        v39[2] = v38;
        *v39 = v6 + 4;
        v40 = (_QWORD *)v6[5];
        v39[1] = v40;
        *v40 = v39;
        v41 = v6[6] + 1;
        v6[5] = v39;
        v6[6] = v41;
      }
      v7 = (_QWORD *)(v38 + v37);
      v6[3] = v37 + 16;
      v7[1] = 0;
    }
    else
    {
      v7 = (_QWORD *)operator new[]();
      v22 = operator new(0x18uLL);
      v22[2] = v7;
      v24 = v6[4];
      v23 = v6 + 4;
      *v22 = v24;
      v22[1] = v23;
      *(_QWORD *)(v24 + 8) = v22;
      *v23 = v22;
      ++v23[2];
      v7[1] = 0;
    }
    return v7;
  }
  if (a2 <= 4)
  {
    v13 = *a1;
    v15 = (unint64_t *)(*a1 + 2);
    v14 = *v15;
    v16 = (*a1)[3] - *v15;
    if (v16 <= 0x107)
    {
      v67 = 0;
      sub_19C37C8DC(v15, 33 - (v16 >> 3), (const double *)&v67);
      v14 = *v15;
    }
    v6 = *(_QWORD **)(v14 + 256);
    if (v6)
    {
      v7 = (_QWORD *)v6[7];
      if (v7)
      {
LABEL_18:
        v8 = v7[4];
        goto LABEL_53;
      }
    }
    else
    {
      v6 = (_QWORD *)operator new();
      sub_19C381DDC(v6, *v13);
      *(_QWORD *)(*v15 + 256) = v6;
      v7 = (_QWORD *)v6[7];
      if (v7)
        goto LABEL_18;
    }
    v33 = v6[2];
    if (v33 > 0x9F)
    {
      v56 = v6[3];
      if (v56 + 40 <= v33)
      {
        v57 = *(_QWORD *)(v6[5] + 16);
      }
      else
      {
        v57 = operator new[]();
        v6[3] = 0;
        v58 = operator new(0x18uLL);
        v56 = 0;
        v58[2] = v57;
        *v58 = v6 + 4;
        v59 = (_QWORD *)v6[5];
        v58[1] = v59;
        *v59 = v58;
        v60 = v6[6] + 1;
        v6[5] = v58;
        v6[6] = v60;
      }
      v7 = (_QWORD *)(v57 + v56);
      v6[3] = v56 + 40;
      v7[4] = 0;
    }
    else
    {
      v7 = (_QWORD *)operator new[]();
      v34 = operator new(0x18uLL);
      v34[2] = v7;
      v36 = v6[4];
      v35 = v6 + 4;
      *v34 = v36;
      v34[1] = v35;
      *(_QWORD *)(v36 + 8) = v34;
      *v35 = v34;
      ++v35[2];
      v7[4] = 0;
    }
    return v7;
  }
  if (a2 <= 8)
  {
    v17 = *a1;
    v19 = (unint64_t *)(*a1 + 2);
    v18 = *v19;
    v20 = (*a1)[3] - *v19;
    if (v20 <= 0x207)
    {
      v67 = 0;
      sub_19C37C8DC(v19, 65 - (v20 >> 3), (const double *)&v67);
      v18 = *v19;
    }
    v6 = *(_QWORD **)(v18 + 512);
    if (!v6)
    {
      v6 = (_QWORD *)operator new();
      sub_19C381EB8(v6, *v17);
      *(_QWORD *)(*v19 + 512) = v6;
    }
    v7 = (_QWORD *)v6[7];
    if (!v7)
    {
      v52 = v6[2];
      if (v52 > 0x11F)
      {
        v62 = v6[3];
        if (v62 + 72 <= v52)
        {
          v63 = *(_QWORD *)(v6[5] + 16);
        }
        else
        {
          v63 = operator new[]();
          v6[3] = 0;
          v64 = operator new(0x18uLL);
          v62 = 0;
          v64[2] = v63;
          *v64 = v6 + 4;
          v65 = (_QWORD *)v6[5];
          v64[1] = v65;
          *v65 = v64;
          v66 = v6[6] + 1;
          v6[5] = v64;
          v6[6] = v66;
        }
        v7 = (_QWORD *)(v63 + v62);
        v6[3] = v62 + 72;
        v7[8] = 0;
      }
      else
      {
        v7 = (_QWORD *)operator new[]();
        v53 = operator new(0x18uLL);
        v53[2] = v7;
        v55 = v6[4];
        v54 = v6 + 4;
        *v53 = v55;
        v53[1] = v54;
        *(_QWORD *)(v55 + 8) = v53;
        *v54 = v53;
        ++v54[2];
        v7[8] = 0;
      }
      return v7;
    }
    v8 = v7[8];
    goto LABEL_53;
  }
  if (a2 <= 0x10)
  {
    v29 = *a1;
    v31 = (unint64_t *)(*a1 + 2);
    v30 = *v31;
    v32 = (*a1)[3] - *v31;
    if (v32 <= 0x407)
    {
      v67 = 0;
      sub_19C37C8DC(v31, 129 - (v32 >> 3), (const double *)&v67);
      v30 = *v31;
    }
    v6 = *(_QWORD **)(v30 + 1024);
    if (!v6)
    {
      v6 = (_QWORD *)operator new();
      sub_19C381F94(v6, *v29);
      *(_QWORD *)(*v31 + 1024) = v6;
    }
    v7 = (_QWORD *)v6[7];
    if (!v7)
    {
      v7 = (_QWORD *)sub_19C38373C(v6 + 1);
      v7[16] = 0;
      return v7;
    }
    v8 = v7[16];
LABEL_53:
    v6[7] = v8;
    return v7;
  }
  if (a2 <= 0x20)
  {
    v47 = *a1;
    v49 = (unint64_t *)(*a1 + 2);
    v48 = *v49;
    v50 = (*a1)[3] - *v49;
    if (v50 <= 0x807)
    {
      v67 = 0;
      sub_19C37C8DC(v49, 257 - (v50 >> 3), (const double *)&v67);
      v48 = *v49;
    }
    v6 = *(_QWORD **)(v48 + 2048);
    if (!v6)
    {
      v6 = (_QWORD *)operator new();
      sub_19C382070(v6, *v47);
      *(_QWORD *)(*v49 + 2048) = v6;
    }
    v7 = (_QWORD *)v6[7];
    if (!v7)
    {
      v7 = (_QWORD *)sub_19C383820(v6 + 1);
      v7[32] = 0;
      return v7;
    }
    v8 = v7[32];
    goto LABEL_53;
  }
  if (a2 <= 0x40)
  {
    v61 = sub_19C38214C(*a1);
    v7 = (_QWORD *)v61[7];
    if (v7)
    {
      v61[7] = v7[64];
    }
    else
    {
      v7 = (_QWORD *)sub_19C383904(v61 + 1);
      v7[64] = 0;
    }
    return v7;
  }
  if (a2 >> 61)
    sub_19C2A143C();
  return operator new(8 * a2);
}

void sub_19C381840(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD355C](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

void sub_19C381878(uint64_t **a1, _QWORD *__p, unint64_t a3)
{
  uint64_t *v4;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;

  if (a3 == 2)
  {
    v9 = *a1;
    v11 = (unint64_t *)(*a1 + 2);
    v10 = *v11;
    v12 = (*a1)[3] - *v11;
    if (v12 <= 0x87)
    {
      v35 = 0;
      sub_19C37C8DC(v11, 17 - (v12 >> 3), (const double *)&v35);
      v10 = *v11;
    }
    v13 = *(_QWORD **)(v10 + 128);
    if (!v13)
    {
      v13 = (_QWORD *)operator new();
      sub_19C381D00(v13, *v9);
      *(_QWORD *)(*v11 + 128) = v13;
    }
    __p[2] = v13[7];
    v13[7] = __p;
  }
  else if (a3 == 1)
  {
    v4 = *a1;
    v6 = (unint64_t *)(*a1 + 2);
    v5 = *v6;
    v7 = (*a1)[3] - *v6;
    if (v7 <= 0x47)
    {
      v35 = 0;
      sub_19C37C8DC(v6, 9 - (v7 >> 3), (const double *)&v35);
      v5 = *v6;
    }
    v8 = *(_QWORD **)(v5 + 64);
    if (!v8)
    {
      v8 = (_QWORD *)operator new();
      sub_19C381C28(v8, *v4);
      *(_QWORD *)(*v6 + 64) = v8;
    }
    __p[1] = v8[7];
    v8[7] = __p;
  }
  else if (a3 > 4)
  {
    if (a3 > 8)
    {
      if (a3 > 0x10)
      {
        if (a3 > 0x20)
        {
          if (a3 > 0x40)
          {
            operator delete(__p);
          }
          else
          {
            v34 = sub_19C38214C(*a1);
            __p[64] = v34[7];
            v34[7] = __p;
          }
        }
        else
        {
          v29 = *a1;
          v31 = (unint64_t *)(*a1 + 2);
          v30 = *v31;
          v32 = (*a1)[3] - *v31;
          if (v32 <= 0x807)
          {
            v35 = 0;
            sub_19C37C8DC(v31, 257 - (v32 >> 3), (const double *)&v35);
            v30 = *v31;
          }
          v33 = *(_QWORD **)(v30 + 2048);
          if (!v33)
          {
            v33 = (_QWORD *)operator new();
            sub_19C382070(v33, *v29);
            *(_QWORD *)(*v31 + 2048) = v33;
          }
          __p[32] = v33[7];
          v33[7] = __p;
        }
      }
      else
      {
        v24 = *a1;
        v26 = (unint64_t *)(*a1 + 2);
        v25 = *v26;
        v27 = (*a1)[3] - *v26;
        if (v27 <= 0x407)
        {
          v35 = 0;
          sub_19C37C8DC(v26, 129 - (v27 >> 3), (const double *)&v35);
          v25 = *v26;
        }
        v28 = *(_QWORD **)(v25 + 1024);
        if (!v28)
        {
          v28 = (_QWORD *)operator new();
          sub_19C381F94(v28, *v24);
          *(_QWORD *)(*v26 + 1024) = v28;
        }
        __p[16] = v28[7];
        v28[7] = __p;
      }
    }
    else
    {
      v19 = *a1;
      v21 = (unint64_t *)(*a1 + 2);
      v20 = *v21;
      v22 = (*a1)[3] - *v21;
      if (v22 <= 0x207)
      {
        v35 = 0;
        sub_19C37C8DC(v21, 65 - (v22 >> 3), (const double *)&v35);
        v20 = *v21;
      }
      v23 = *(_QWORD **)(v20 + 512);
      if (!v23)
      {
        v23 = (_QWORD *)operator new();
        sub_19C381EB8(v23, *v19);
        *(_QWORD *)(*v21 + 512) = v23;
      }
      __p[8] = v23[7];
      v23[7] = __p;
    }
  }
  else
  {
    v14 = *a1;
    v16 = (unint64_t *)(*a1 + 2);
    v15 = *v16;
    v17 = (*a1)[3] - *v16;
    if (v17 <= 0x107)
    {
      v35 = 0;
      sub_19C37C8DC(v16, 33 - (v17 >> 3), (const double *)&v35);
      v15 = *v16;
    }
    v18 = *(_QWORD **)(v15 + 256);
    if (!v18)
    {
      v18 = (_QWORD *)operator new();
      sub_19C381DDC(v18, *v14);
      *(_QWORD *)(*v16 + 256) = v18;
    }
    __p[4] = v18[7];
    v18[7] = __p;
  }
}

void sub_19C381BF0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD355C](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

_QWORD *sub_19C381C28(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  *a1 = &off_1E3D378A8;
  a1[1] = &off_1E3D37BA0;
  a1[2] = 16 * a2;
  a1[3] = 0;
  a1[4] = a1 + 4;
  a1[5] = a1 + 4;
  a1[6] = 0;
  v3 = operator new[]();
  v4 = operator new(0x18uLL);
  v5 = (_QWORD *)a1[5];
  v6 = a1[6];
  *v4 = a1 + 4;
  v4[1] = v5;
  v4[2] = v3;
  *v5 = v4;
  a1[5] = v4;
  a1[6] = v6 + 1;
  a1[7] = 0;
  return a1;
}

void sub_19C381CB4(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t *v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;

  if (v1[6])
  {
    v5 = v1[4];
    v4 = (uint64_t *)v1[5];
    v6 = *v4;
    *(_QWORD *)(v6 + 8) = *(_QWORD *)(v5 + 8);
    **(_QWORD **)(v5 + 8) = v6;
    v1[6] = 0;
    if (v4 != v2)
    {
      do
      {
        v7 = (uint64_t *)v4[1];
        operator delete(v4);
        v4 = v7;
      }
      while (v7 != v2);
    }
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_19C381D00(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  *a1 = &off_1E3D378D0;
  a1[1] = &off_1E3D37BC8;
  a1[2] = 24 * a2;
  a1[3] = 0;
  a1[4] = a1 + 4;
  a1[5] = a1 + 4;
  a1[6] = 0;
  v3 = operator new[]();
  v4 = operator new(0x18uLL);
  v5 = (_QWORD *)a1[5];
  v6 = a1[6];
  *v4 = a1 + 4;
  v4[1] = v5;
  v4[2] = v3;
  *v5 = v4;
  a1[5] = v4;
  a1[6] = v6 + 1;
  a1[7] = 0;
  return a1;
}

void sub_19C381D90(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t *v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;

  if (v1[6])
  {
    v5 = v1[4];
    v4 = (uint64_t *)v1[5];
    v6 = *v4;
    *(_QWORD *)(v6 + 8) = *(_QWORD *)(v5 + 8);
    **(_QWORD **)(v5 + 8) = v6;
    v1[6] = 0;
    if (v4 != v2)
    {
      do
      {
        v7 = (uint64_t *)v4[1];
        operator delete(v4);
        v4 = v7;
      }
      while (v7 != v2);
    }
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_19C381DDC(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  *a1 = &off_1E3D37920;
  a1[1] = &off_1E3D37C18;
  a1[2] = 40 * a2;
  a1[3] = 0;
  a1[4] = a1 + 4;
  a1[5] = a1 + 4;
  a1[6] = 0;
  v3 = operator new[]();
  v4 = operator new(0x18uLL);
  v5 = (_QWORD *)a1[5];
  v6 = a1[6];
  *v4 = a1 + 4;
  v4[1] = v5;
  v4[2] = v3;
  *v5 = v4;
  a1[5] = v4;
  a1[6] = v6 + 1;
  a1[7] = 0;
  return a1;
}

void sub_19C381E6C(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t *v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;

  if (v1[6])
  {
    v5 = v1[4];
    v4 = (uint64_t *)v1[5];
    v6 = *v4;
    *(_QWORD *)(v6 + 8) = *(_QWORD *)(v5 + 8);
    **(_QWORD **)(v5 + 8) = v6;
    v1[6] = 0;
    if (v4 != v2)
    {
      do
      {
        v7 = (uint64_t *)v4[1];
        operator delete(v4);
        v4 = v7;
      }
      while (v7 != v2);
    }
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_19C381EB8(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  *a1 = &off_1E3D37970;
  a1[1] = &off_1E3D37C68;
  a1[2] = 72 * a2;
  a1[3] = 0;
  a1[4] = a1 + 4;
  a1[5] = a1 + 4;
  a1[6] = 0;
  v3 = operator new[]();
  v4 = operator new(0x18uLL);
  v5 = (_QWORD *)a1[5];
  v6 = a1[6];
  *v4 = a1 + 4;
  v4[1] = v5;
  v4[2] = v3;
  *v5 = v4;
  a1[5] = v4;
  a1[6] = v6 + 1;
  a1[7] = 0;
  return a1;
}

void sub_19C381F48(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t *v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;

  if (v1[6])
  {
    v5 = v1[4];
    v4 = (uint64_t *)v1[5];
    v6 = *v4;
    *(_QWORD *)(v6 + 8) = *(_QWORD *)(v5 + 8);
    **(_QWORD **)(v5 + 8) = v6;
    v1[6] = 0;
    if (v4 != v2)
    {
      do
      {
        v7 = (uint64_t *)v4[1];
        operator delete(v4);
        v4 = v7;
      }
      while (v7 != v2);
    }
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_19C381F94(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  *a1 = &off_1E3D37880;
  a1[1] = &off_1E3D37B78;
  a1[2] = 136 * a2;
  a1[3] = 0;
  a1[4] = a1 + 4;
  a1[5] = a1 + 4;
  a1[6] = 0;
  v3 = operator new[]();
  v4 = operator new(0x18uLL);
  v5 = (_QWORD *)a1[5];
  v6 = a1[6];
  *v4 = a1 + 4;
  v4[1] = v5;
  v4[2] = v3;
  *v5 = v4;
  a1[5] = v4;
  a1[6] = v6 + 1;
  a1[7] = 0;
  return a1;
}

void sub_19C382024(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t *v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;

  if (v1[6])
  {
    v5 = v1[4];
    v4 = (uint64_t *)v1[5];
    v6 = *v4;
    *(_QWORD *)(v6 + 8) = *(_QWORD *)(v5 + 8);
    **(_QWORD **)(v5 + 8) = v6;
    v1[6] = 0;
    if (v4 != v2)
    {
      do
      {
        v7 = (uint64_t *)v4[1];
        operator delete(v4);
        v4 = v7;
      }
      while (v7 != v2);
    }
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_19C382070(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  *a1 = &off_1E3D378F8;
  a1[1] = &off_1E3D37BF0;
  a1[2] = 264 * a2;
  a1[3] = 0;
  a1[4] = a1 + 4;
  a1[5] = a1 + 4;
  a1[6] = 0;
  v3 = operator new[]();
  v4 = operator new(0x18uLL);
  v5 = (_QWORD *)a1[5];
  v6 = a1[6];
  *v4 = a1 + 4;
  v4[1] = v5;
  v4[2] = v3;
  *v5 = v4;
  a1[5] = v4;
  a1[6] = v6 + 1;
  a1[7] = 0;
  return a1;
}

void sub_19C382100(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t *v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;

  if (v1[6])
  {
    v5 = v1[4];
    v4 = (uint64_t *)v1[5];
    v6 = *v4;
    *(_QWORD *)(v6 + 8) = *(_QWORD *)(v5 + 8);
    **(_QWORD **)(v5 + 8) = v6;
    v1[6] = 0;
    if (v4 != v2)
    {
      do
      {
        v7 = (uint64_t *)v4[1];
        operator delete(v4);
        v4 = v7;
      }
      while (v7 != v2);
    }
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_19C38214C(uint64_t *a1)
{
  uint64_t v2;
  _QWORD *v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v12;

  v2 = a1[2];
  v3 = a1 + 2;
  v4 = a1[3] - v2;
  if (v4 >> 3 <= 0x200)
  {
    v12 = 0;
    sub_19C37C8DC((unint64_t *)a1 + 2, 513 - (v4 >> 3), (const double *)&v12);
    v2 = *v3;
  }
  v5 = *(_QWORD **)(v2 + 4096);
  if (!v5)
  {
    v5 = (_QWORD *)operator new();
    v6 = *a1;
    *v5 = &off_1E3D37948;
    v5[1] = &off_1E3D37C40;
    v5[2] = 520 * v6;
    v5[3] = 0;
    v5[4] = v5 + 4;
    v5[5] = v5 + 4;
    v5[6] = 0;
    v7 = operator new[]();
    v8 = operator new(0x18uLL);
    v9 = (_QWORD *)v5[5];
    v10 = v5[6];
    *v8 = v5 + 4;
    v8[1] = v9;
    v8[2] = v7;
    *v9 = v8;
    v5[5] = v8;
    v5[6] = v10 + 1;
    v5[7] = 0;
    *(_QWORD *)(*v3 + 4096) = v5;
  }
  return v5;
}

void sub_19C382248(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t *v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;

  if (v1[6])
  {
    v5 = v1[4];
    v4 = (uint64_t *)v1[5];
    v6 = *v4;
    *(_QWORD *)(v6 + 8) = *(_QWORD *)(v5 + 8);
    **(_QWORD **)(v5 + 8) = v6;
    v1[6] = 0;
    if (v4 != v2)
    {
      do
      {
        v7 = (uint64_t *)v4[1];
        operator delete(v4);
        v4 = v7;
      }
      while (v7 != v2);
    }
  }
  MEMORY[0x1A1AD355C](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

_QWORD *sub_19C3822AC(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  *a1 = &off_1E3D37C40;
  v2 = a1 + 3;
  for (i = (uint64_t *)a1[4]; i != v2; i = (uint64_t *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1A1AD3538](v4, 0x1000C8077774924);
  }
  if (a1[5])
  {
    v6 = a1[3];
    v5 = (uint64_t *)a1[4];
    v7 = *v5;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(v6 + 8);
    **(_QWORD **)(v6 + 8) = v7;
    a1[5] = 0;
    if (v5 != v2)
    {
      do
      {
        v8 = (uint64_t *)v5[1];
        operator delete(v5);
        v5 = v8;
      }
      while (v8 != v2);
    }
  }
  return a1;
}

void sub_19C382358(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  *a1 = &off_1E3D37C40;
  v2 = a1 + 3;
  for (i = (uint64_t *)a1[4]; i != v2; i = (uint64_t *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1A1AD3538](v4, 0x1000C8077774924);
  }
  if (a1[5])
  {
    v6 = a1[3];
    v5 = (uint64_t *)a1[4];
    v7 = *v5;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(v6 + 8);
    **(_QWORD **)(v6 + 8) = v7;
    a1[5] = 0;
    if (v5 != v2)
    {
      do
      {
        v8 = (uint64_t *)v5[1];
        operator delete(v5);
        v5 = v8;
      }
      while (v8 != v2);
    }
  }
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C382414()
{
  return 520;
}

_QWORD *sub_19C38241C(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  *a1 = &off_1E3D37948;
  a1[1] = &off_1E3D37C40;
  v2 = a1 + 4;
  for (i = (uint64_t *)a1[5]; i != v2; i = (uint64_t *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1A1AD3538](v4, 0x1000C8077774924);
  }
  if (a1[6])
  {
    v6 = a1[4];
    v5 = (uint64_t *)a1[5];
    v7 = *v5;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(v6 + 8);
    **(_QWORD **)(v6 + 8) = v7;
    a1[6] = 0;
    if (v5 != v2)
    {
      do
      {
        v8 = (uint64_t *)v5[1];
        operator delete(v5);
        v5 = v8;
      }
      while (v8 != v2);
    }
  }
  return a1;
}

void sub_19C3824D0(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  *a1 = &off_1E3D37948;
  a1[1] = &off_1E3D37C40;
  v2 = a1 + 4;
  for (i = (uint64_t *)a1[5]; i != v2; i = (uint64_t *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1A1AD3538](v4, 0x1000C8077774924);
  }
  if (a1[6])
  {
    v6 = a1[4];
    v5 = (uint64_t *)a1[5];
    v7 = *v5;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(v6 + 8);
    **(_QWORD **)(v6 + 8) = v7;
    a1[6] = 0;
    if (v5 != v2)
    {
      do
      {
        v8 = (uint64_t *)v5[1];
        operator delete(v5);
        v5 = v8;
      }
      while (v8 != v2);
    }
  }
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C382594()
{
  return 512;
}

_QWORD *sub_19C38259C(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  *a1 = &off_1E3D37BF0;
  v2 = a1 + 3;
  for (i = (uint64_t *)a1[4]; i != v2; i = (uint64_t *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1A1AD3538](v4, 0x1000C8077774924);
  }
  if (a1[5])
  {
    v6 = a1[3];
    v5 = (uint64_t *)a1[4];
    v7 = *v5;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(v6 + 8);
    **(_QWORD **)(v6 + 8) = v7;
    a1[5] = 0;
    if (v5 != v2)
    {
      do
      {
        v8 = (uint64_t *)v5[1];
        operator delete(v5);
        v5 = v8;
      }
      while (v8 != v2);
    }
  }
  return a1;
}

void sub_19C382648(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  *a1 = &off_1E3D37BF0;
  v2 = a1 + 3;
  for (i = (uint64_t *)a1[4]; i != v2; i = (uint64_t *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1A1AD3538](v4, 0x1000C8077774924);
  }
  if (a1[5])
  {
    v6 = a1[3];
    v5 = (uint64_t *)a1[4];
    v7 = *v5;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(v6 + 8);
    **(_QWORD **)(v6 + 8) = v7;
    a1[5] = 0;
    if (v5 != v2)
    {
      do
      {
        v8 = (uint64_t *)v5[1];
        operator delete(v5);
        v5 = v8;
      }
      while (v8 != v2);
    }
  }
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C382704()
{
  return 264;
}

_QWORD *sub_19C38270C(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  *a1 = &off_1E3D378F8;
  a1[1] = &off_1E3D37BF0;
  v2 = a1 + 4;
  for (i = (uint64_t *)a1[5]; i != v2; i = (uint64_t *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1A1AD3538](v4, 0x1000C8077774924);
  }
  if (a1[6])
  {
    v6 = a1[4];
    v5 = (uint64_t *)a1[5];
    v7 = *v5;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(v6 + 8);
    **(_QWORD **)(v6 + 8) = v7;
    a1[6] = 0;
    if (v5 != v2)
    {
      do
      {
        v8 = (uint64_t *)v5[1];
        operator delete(v5);
        v5 = v8;
      }
      while (v8 != v2);
    }
  }
  return a1;
}

void sub_19C3827C0(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  *a1 = &off_1E3D378F8;
  a1[1] = &off_1E3D37BF0;
  v2 = a1 + 4;
  for (i = (uint64_t *)a1[5]; i != v2; i = (uint64_t *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1A1AD3538](v4, 0x1000C8077774924);
  }
  if (a1[6])
  {
    v6 = a1[4];
    v5 = (uint64_t *)a1[5];
    v7 = *v5;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(v6 + 8);
    **(_QWORD **)(v6 + 8) = v7;
    a1[6] = 0;
    if (v5 != v2)
    {
      do
      {
        v8 = (uint64_t *)v5[1];
        operator delete(v5);
        v5 = v8;
      }
      while (v8 != v2);
    }
  }
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C382884()
{
  return 256;
}

_QWORD *sub_19C38288C(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  *a1 = &off_1E3D37B78;
  v2 = a1 + 3;
  for (i = (uint64_t *)a1[4]; i != v2; i = (uint64_t *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1A1AD3538](v4, 0x1000C8077774924);
  }
  if (a1[5])
  {
    v6 = a1[3];
    v5 = (uint64_t *)a1[4];
    v7 = *v5;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(v6 + 8);
    **(_QWORD **)(v6 + 8) = v7;
    a1[5] = 0;
    if (v5 != v2)
    {
      do
      {
        v8 = (uint64_t *)v5[1];
        operator delete(v5);
        v5 = v8;
      }
      while (v8 != v2);
    }
  }
  return a1;
}

void sub_19C382938(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  *a1 = &off_1E3D37B78;
  v2 = a1 + 3;
  for (i = (uint64_t *)a1[4]; i != v2; i = (uint64_t *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1A1AD3538](v4, 0x1000C8077774924);
  }
  if (a1[5])
  {
    v6 = a1[3];
    v5 = (uint64_t *)a1[4];
    v7 = *v5;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(v6 + 8);
    **(_QWORD **)(v6 + 8) = v7;
    a1[5] = 0;
    if (v5 != v2)
    {
      do
      {
        v8 = (uint64_t *)v5[1];
        operator delete(v5);
        v5 = v8;
      }
      while (v8 != v2);
    }
  }
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C3829F4()
{
  return 136;
}

_QWORD *sub_19C3829FC(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  *a1 = &off_1E3D37880;
  a1[1] = &off_1E3D37B78;
  v2 = a1 + 4;
  for (i = (uint64_t *)a1[5]; i != v2; i = (uint64_t *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1A1AD3538](v4, 0x1000C8077774924);
  }
  if (a1[6])
  {
    v6 = a1[4];
    v5 = (uint64_t *)a1[5];
    v7 = *v5;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(v6 + 8);
    **(_QWORD **)(v6 + 8) = v7;
    a1[6] = 0;
    if (v5 != v2)
    {
      do
      {
        v8 = (uint64_t *)v5[1];
        operator delete(v5);
        v5 = v8;
      }
      while (v8 != v2);
    }
  }
  return a1;
}

void sub_19C382AB0(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  *a1 = &off_1E3D37880;
  a1[1] = &off_1E3D37B78;
  v2 = a1 + 4;
  for (i = (uint64_t *)a1[5]; i != v2; i = (uint64_t *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1A1AD3538](v4, 0x1000C8077774924);
  }
  if (a1[6])
  {
    v6 = a1[4];
    v5 = (uint64_t *)a1[5];
    v7 = *v5;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(v6 + 8);
    **(_QWORD **)(v6 + 8) = v7;
    a1[6] = 0;
    if (v5 != v2)
    {
      do
      {
        v8 = (uint64_t *)v5[1];
        operator delete(v5);
        v5 = v8;
      }
      while (v8 != v2);
    }
  }
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C382B74()
{
  return 128;
}

_QWORD *sub_19C382B7C(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  *a1 = &off_1E3D37C68;
  v2 = a1 + 3;
  for (i = (uint64_t *)a1[4]; i != v2; i = (uint64_t *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1A1AD3538](v4, 0x1000C8077774924);
  }
  if (a1[5])
  {
    v6 = a1[3];
    v5 = (uint64_t *)a1[4];
    v7 = *v5;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(v6 + 8);
    **(_QWORD **)(v6 + 8) = v7;
    a1[5] = 0;
    if (v5 != v2)
    {
      do
      {
        v8 = (uint64_t *)v5[1];
        operator delete(v5);
        v5 = v8;
      }
      while (v8 != v2);
    }
  }
  return a1;
}

void sub_19C382C28(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  *a1 = &off_1E3D37C68;
  v2 = a1 + 3;
  for (i = (uint64_t *)a1[4]; i != v2; i = (uint64_t *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1A1AD3538](v4, 0x1000C8077774924);
  }
  if (a1[5])
  {
    v6 = a1[3];
    v5 = (uint64_t *)a1[4];
    v7 = *v5;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(v6 + 8);
    **(_QWORD **)(v6 + 8) = v7;
    a1[5] = 0;
    if (v5 != v2)
    {
      do
      {
        v8 = (uint64_t *)v5[1];
        operator delete(v5);
        v5 = v8;
      }
      while (v8 != v2);
    }
  }
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C382CE4()
{
  return 72;
}

_QWORD *sub_19C382CEC(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  *a1 = &off_1E3D37970;
  a1[1] = &off_1E3D37C68;
  v2 = a1 + 4;
  for (i = (uint64_t *)a1[5]; i != v2; i = (uint64_t *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1A1AD3538](v4, 0x1000C8077774924);
  }
  if (a1[6])
  {
    v6 = a1[4];
    v5 = (uint64_t *)a1[5];
    v7 = *v5;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(v6 + 8);
    **(_QWORD **)(v6 + 8) = v7;
    a1[6] = 0;
    if (v5 != v2)
    {
      do
      {
        v8 = (uint64_t *)v5[1];
        operator delete(v5);
        v5 = v8;
      }
      while (v8 != v2);
    }
  }
  return a1;
}

void sub_19C382DA0(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  *a1 = &off_1E3D37970;
  a1[1] = &off_1E3D37C68;
  v2 = a1 + 4;
  for (i = (uint64_t *)a1[5]; i != v2; i = (uint64_t *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1A1AD3538](v4, 0x1000C8077774924);
  }
  if (a1[6])
  {
    v6 = a1[4];
    v5 = (uint64_t *)a1[5];
    v7 = *v5;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(v6 + 8);
    **(_QWORD **)(v6 + 8) = v7;
    a1[6] = 0;
    if (v5 != v2)
    {
      do
      {
        v8 = (uint64_t *)v5[1];
        operator delete(v5);
        v5 = v8;
      }
      while (v8 != v2);
    }
  }
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C382E64()
{
  return 64;
}

_QWORD *sub_19C382E6C(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  *a1 = &off_1E3D37C18;
  v2 = a1 + 3;
  for (i = (uint64_t *)a1[4]; i != v2; i = (uint64_t *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1A1AD3538](v4, 0x1000C8077774924);
  }
  if (a1[5])
  {
    v6 = a1[3];
    v5 = (uint64_t *)a1[4];
    v7 = *v5;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(v6 + 8);
    **(_QWORD **)(v6 + 8) = v7;
    a1[5] = 0;
    if (v5 != v2)
    {
      do
      {
        v8 = (uint64_t *)v5[1];
        operator delete(v5);
        v5 = v8;
      }
      while (v8 != v2);
    }
  }
  return a1;
}

void sub_19C382F18(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  *a1 = &off_1E3D37C18;
  v2 = a1 + 3;
  for (i = (uint64_t *)a1[4]; i != v2; i = (uint64_t *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1A1AD3538](v4, 0x1000C8077774924);
  }
  if (a1[5])
  {
    v6 = a1[3];
    v5 = (uint64_t *)a1[4];
    v7 = *v5;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(v6 + 8);
    **(_QWORD **)(v6 + 8) = v7;
    a1[5] = 0;
    if (v5 != v2)
    {
      do
      {
        v8 = (uint64_t *)v5[1];
        operator delete(v5);
        v5 = v8;
      }
      while (v8 != v2);
    }
  }
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C382FD4()
{
  return 40;
}

_QWORD *sub_19C382FDC(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  *a1 = &off_1E3D37920;
  a1[1] = &off_1E3D37C18;
  v2 = a1 + 4;
  for (i = (uint64_t *)a1[5]; i != v2; i = (uint64_t *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1A1AD3538](v4, 0x1000C8077774924);
  }
  if (a1[6])
  {
    v6 = a1[4];
    v5 = (uint64_t *)a1[5];
    v7 = *v5;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(v6 + 8);
    **(_QWORD **)(v6 + 8) = v7;
    a1[6] = 0;
    if (v5 != v2)
    {
      do
      {
        v8 = (uint64_t *)v5[1];
        operator delete(v5);
        v5 = v8;
      }
      while (v8 != v2);
    }
  }
  return a1;
}

void sub_19C383090(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  *a1 = &off_1E3D37920;
  a1[1] = &off_1E3D37C18;
  v2 = a1 + 4;
  for (i = (uint64_t *)a1[5]; i != v2; i = (uint64_t *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1A1AD3538](v4, 0x1000C8077774924);
  }
  if (a1[6])
  {
    v6 = a1[4];
    v5 = (uint64_t *)a1[5];
    v7 = *v5;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(v6 + 8);
    **(_QWORD **)(v6 + 8) = v7;
    a1[6] = 0;
    if (v5 != v2)
    {
      do
      {
        v8 = (uint64_t *)v5[1];
        operator delete(v5);
        v5 = v8;
      }
      while (v8 != v2);
    }
  }
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C383154()
{
  return 32;
}

_QWORD *sub_19C38315C(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  *a1 = &off_1E3D37BC8;
  v2 = a1 + 3;
  for (i = (uint64_t *)a1[4]; i != v2; i = (uint64_t *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1A1AD3538](v4, 0x1000C8077774924);
  }
  if (a1[5])
  {
    v6 = a1[3];
    v5 = (uint64_t *)a1[4];
    v7 = *v5;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(v6 + 8);
    **(_QWORD **)(v6 + 8) = v7;
    a1[5] = 0;
    if (v5 != v2)
    {
      do
      {
        v8 = (uint64_t *)v5[1];
        operator delete(v5);
        v5 = v8;
      }
      while (v8 != v2);
    }
  }
  return a1;
}

void sub_19C383208(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  *a1 = &off_1E3D37BC8;
  v2 = a1 + 3;
  for (i = (uint64_t *)a1[4]; i != v2; i = (uint64_t *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1A1AD3538](v4, 0x1000C8077774924);
  }
  if (a1[5])
  {
    v6 = a1[3];
    v5 = (uint64_t *)a1[4];
    v7 = *v5;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(v6 + 8);
    **(_QWORD **)(v6 + 8) = v7;
    a1[5] = 0;
    if (v5 != v2)
    {
      do
      {
        v8 = (uint64_t *)v5[1];
        operator delete(v5);
        v5 = v8;
      }
      while (v8 != v2);
    }
  }
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C3832C4()
{
  return 24;
}

_QWORD *sub_19C3832CC(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  *a1 = &off_1E3D378D0;
  a1[1] = &off_1E3D37BC8;
  v2 = a1 + 4;
  for (i = (uint64_t *)a1[5]; i != v2; i = (uint64_t *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1A1AD3538](v4, 0x1000C8077774924);
  }
  if (a1[6])
  {
    v6 = a1[4];
    v5 = (uint64_t *)a1[5];
    v7 = *v5;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(v6 + 8);
    **(_QWORD **)(v6 + 8) = v7;
    a1[6] = 0;
    if (v5 != v2)
    {
      do
      {
        v8 = (uint64_t *)v5[1];
        operator delete(v5);
        v5 = v8;
      }
      while (v8 != v2);
    }
  }
  return a1;
}

void sub_19C383380(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  *a1 = &off_1E3D378D0;
  a1[1] = &off_1E3D37BC8;
  v2 = a1 + 4;
  for (i = (uint64_t *)a1[5]; i != v2; i = (uint64_t *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1A1AD3538](v4, 0x1000C8077774924);
  }
  if (a1[6])
  {
    v6 = a1[4];
    v5 = (uint64_t *)a1[5];
    v7 = *v5;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(v6 + 8);
    **(_QWORD **)(v6 + 8) = v7;
    a1[6] = 0;
    if (v5 != v2)
    {
      do
      {
        v8 = (uint64_t *)v5[1];
        operator delete(v5);
        v5 = v8;
      }
      while (v8 != v2);
    }
  }
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C383444()
{
  return 16;
}

_QWORD *sub_19C38344C(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  *a1 = &off_1E3D37BA0;
  v2 = a1 + 3;
  for (i = (uint64_t *)a1[4]; i != v2; i = (uint64_t *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1A1AD3538](v4, 0x1000C8077774924);
  }
  if (a1[5])
  {
    v6 = a1[3];
    v5 = (uint64_t *)a1[4];
    v7 = *v5;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(v6 + 8);
    **(_QWORD **)(v6 + 8) = v7;
    a1[5] = 0;
    if (v5 != v2)
    {
      do
      {
        v8 = (uint64_t *)v5[1];
        operator delete(v5);
        v5 = v8;
      }
      while (v8 != v2);
    }
  }
  return a1;
}

void sub_19C3834F8(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  *a1 = &off_1E3D37BA0;
  v2 = a1 + 3;
  for (i = (uint64_t *)a1[4]; i != v2; i = (uint64_t *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1A1AD3538](v4, 0x1000C8077774924);
  }
  if (a1[5])
  {
    v6 = a1[3];
    v5 = (uint64_t *)a1[4];
    v7 = *v5;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(v6 + 8);
    **(_QWORD **)(v6 + 8) = v7;
    a1[5] = 0;
    if (v5 != v2)
    {
      do
      {
        v8 = (uint64_t *)v5[1];
        operator delete(v5);
        v5 = v8;
      }
      while (v8 != v2);
    }
  }
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C3835B4()
{
  return 16;
}

_QWORD *sub_19C3835BC(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  *a1 = &off_1E3D378A8;
  a1[1] = &off_1E3D37BA0;
  v2 = a1 + 4;
  for (i = (uint64_t *)a1[5]; i != v2; i = (uint64_t *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1A1AD3538](v4, 0x1000C8077774924);
  }
  if (a1[6])
  {
    v6 = a1[4];
    v5 = (uint64_t *)a1[5];
    v7 = *v5;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(v6 + 8);
    **(_QWORD **)(v6 + 8) = v7;
    a1[6] = 0;
    if (v5 != v2)
    {
      do
      {
        v8 = (uint64_t *)v5[1];
        operator delete(v5);
        v5 = v8;
      }
      while (v8 != v2);
    }
  }
  return a1;
}

void sub_19C383670(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  *a1 = &off_1E3D378A8;
  a1[1] = &off_1E3D37BA0;
  v2 = a1 + 4;
  for (i = (uint64_t *)a1[5]; i != v2; i = (uint64_t *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1A1AD3538](v4, 0x1000C8077774924);
  }
  if (a1[6])
  {
    v6 = a1[4];
    v5 = (uint64_t *)a1[5];
    v7 = *v5;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(v6 + 8);
    **(_QWORD **)(v6 + 8) = v7;
    a1[6] = 0;
    if (v5 != v2)
    {
      do
      {
        v8 = (uint64_t *)v5[1];
        operator delete(v5);
        v5 = v8;
      }
      while (v8 != v2);
    }
  }
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C383734()
{
  return 8;
}

uint64_t sub_19C38373C(_QWORD *a1)
{
  _QWORD *v1;
  unint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;

  v1 = a1;
  v2 = a1[1];
  if (v2 > 0x21F)
  {
    v7 = v1[2];
    if (v7 + 136 <= v2)
    {
      v8 = *(_QWORD *)(v1[4] + 16);
    }
    else
    {
      v8 = operator new[]();
      v1[2] = 0;
      v9 = operator new(0x18uLL);
      v7 = 0;
      v10 = (_QWORD *)v1[4];
      v11 = v1[5];
      *v9 = v1 + 3;
      v9[1] = v10;
      v9[2] = v8;
      *v10 = v9;
      v1[4] = v9;
      v1[5] = v11 + 1;
    }
    v3 = v8 + v7;
    v6 = v7 + 136;
  }
  else
  {
    v3 = operator new[]();
    v4 = operator new(0x18uLL);
    v5 = v1[3];
    v1 += 3;
    v4[1] = v1;
    v4[2] = v3;
    *v4 = v5;
    *(_QWORD *)(v5 + 8) = v4;
    *v1 = v4;
    v6 = v1[2] + 1;
  }
  v1[2] = v6;
  return v3;
}

uint64_t sub_19C383820(_QWORD *a1)
{
  _QWORD *v1;
  unint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;

  v1 = a1;
  v2 = a1[1];
  if (v2 > 0x41F)
  {
    v7 = v1[2];
    if (v7 + 264 <= v2)
    {
      v8 = *(_QWORD *)(v1[4] + 16);
    }
    else
    {
      v8 = operator new[]();
      v1[2] = 0;
      v9 = operator new(0x18uLL);
      v7 = 0;
      v10 = (_QWORD *)v1[4];
      v11 = v1[5];
      *v9 = v1 + 3;
      v9[1] = v10;
      v9[2] = v8;
      *v10 = v9;
      v1[4] = v9;
      v1[5] = v11 + 1;
    }
    v3 = v8 + v7;
    v6 = v7 + 264;
  }
  else
  {
    v3 = operator new[]();
    v4 = operator new(0x18uLL);
    v5 = v1[3];
    v1 += 3;
    v4[1] = v1;
    v4[2] = v3;
    *v4 = v5;
    *(_QWORD *)(v5 + 8) = v4;
    *v1 = v4;
    v6 = v1[2] + 1;
  }
  v1[2] = v6;
  return v3;
}

uint64_t sub_19C383904(_QWORD *a1)
{
  _QWORD *v1;
  unint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;

  v1 = a1;
  v2 = a1[1];
  if (v2 > 0x81F)
  {
    v7 = v1[2];
    if (v7 + 520 <= v2)
    {
      v8 = *(_QWORD *)(v1[4] + 16);
    }
    else
    {
      v8 = operator new[]();
      v1[2] = 0;
      v9 = operator new(0x18uLL);
      v7 = 0;
      v10 = (_QWORD *)v1[4];
      v11 = v1[5];
      *v9 = v1 + 3;
      v9[1] = v10;
      v9[2] = v8;
      *v10 = v9;
      v1[4] = v9;
      v1[5] = v11 + 1;
    }
    v3 = v8 + v7;
    v6 = v7 + 520;
  }
  else
  {
    v3 = operator new[]();
    v4 = operator new(0x18uLL);
    v5 = v1[3];
    v1 += 3;
    v4[1] = v1;
    v4[2] = v3;
    *v4 = v5;
    *(_QWORD *)(v5 + 8) = v4;
    *v1 = v4;
    v6 = v1[2] + 1;
  }
  v1[2] = v6;
  return v3;
}

uint64_t sub_19C3839E8(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  int v10;
  _QWORD *v11;
  void *__p[2];
  char v14;

  *(_QWORD *)a1 = &off_1E3D37DB0;
  v5 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 72))(a2, 0);
  *(_QWORD *)(a1 + 80) = &off_1E3D376C8;
  *(_QWORD *)(a1 + 8) = v5;
  *(_DWORD *)(a1 + 16) = -1;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = a3;
  *(_QWORD *)(a1 + 36) = 0xFFFFFFFF00000001;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0xFFFFFFFFLL;
  *(_QWORD *)(a1 + 64) = 0xFFFFFFFF00000000;
  *(_BYTE *)(a1 + 74) = 0;
  *(_QWORD *)(a1 + 88) = &off_1E3D379C0;
  *(_OWORD *)(a1 + 96) = xmmword_19C46DEF0;
  *(_QWORD *)(a1 + 112) = a1 + 112;
  *(_QWORD *)(a1 + 120) = a1 + 112;
  *(_QWORD *)(a1 + 128) = 0;
  v6 = operator new[]();
  v7 = operator new(0x18uLL);
  v8 = *(_QWORD **)(a1 + 120);
  *v7 = a1 + 112;
  v7[1] = v8;
  v7[2] = v6;
  *v8 = v7;
  v9 = *(_QWORD *)(a1 + 128) + 1;
  *(_QWORD *)(a1 + 120) = v7;
  *(_QWORD *)(a1 + 128) = v9;
  *(_QWORD *)(a1 + 136) = 0;
  v10 = *(_DWORD *)(a1 + 32);
  if (v10 && v10 != 3)
  {
    if (v10 == 1)
    {
      *(int32x2_t *)(a1 + 56) = vrev64_s32(*(int32x2_t *)(a1 + 56));
    }
    else
    {
      v14 = 5;
      strcpy((char *)__p, "FATAL");
      v11 = sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)__p, 5);
      sub_19C2A1B24(v11, (uint64_t)": ", 2);
      sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)"SortedMatcher: bad match type", 29);
      sub_19C351928();
      if (v14 < 0)
        operator delete(__p[0]);
      *(_DWORD *)(a1 + 32) = 3;
      *(_BYTE *)(a1 + 74) = 1;
    }
  }
  return a1;
}

void sub_19C383B90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _QWORD *v15;

  sub_19C351928();
  if (a15 < 0)
    operator delete(__p);
  sub_19C383C0C(v15);
  _Unwind_Resume(a1);
}

void sub_19C383BC0(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t *v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;

  if (v1[16])
  {
    v5 = v1[14];
    v4 = (uint64_t *)v1[15];
    v6 = *v4;
    *(_QWORD *)(v6 + 8) = *(_QWORD *)(v5 + 8);
    **(_QWORD **)(v5 + 8) = v6;
    v1[16] = 0;
    if (v4 != v2)
    {
      do
      {
        v7 = (uint64_t *)v4[1];
        operator delete(v4);
        v4 = v7;
      }
      while (v7 != v2);
    }
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_19C383C0C(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  *a1 = &off_1E3D376C8;
  a1[1] = &off_1E3D379C0;
  v2 = a1 + 4;
  for (i = (uint64_t *)a1[5]; i != v2; i = (uint64_t *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1A1AD3538](v4, 0x1000C8077774924);
  }
  if (a1[6])
  {
    v6 = a1[4];
    v5 = (uint64_t *)a1[5];
    v7 = *v5;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(v6 + 8);
    **(_QWORD **)(v6 + 8) = v7;
    a1[6] = 0;
    if (v5 != v2)
    {
      do
      {
        v8 = (uint64_t *)v5[1];
        operator delete(v5);
        v5 = v8;
      }
      while (v8 != v2);
    }
  }
  return a1;
}

_QWORD *sub_19C383CC0(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  *a1 = &off_1E3D379C0;
  v2 = a1 + 3;
  for (i = (uint64_t *)a1[4]; i != v2; i = (uint64_t *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1A1AD3538](v4, 0x1000C8077774924);
  }
  if (a1[5])
  {
    v6 = a1[3];
    v5 = (uint64_t *)a1[4];
    v7 = *v5;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(v6 + 8);
    **(_QWORD **)(v6 + 8) = v7;
    a1[5] = 0;
    if (v5 != v2)
    {
      do
      {
        v8 = (uint64_t *)v5[1];
        operator delete(v5);
        v5 = v8;
      }
      while (v8 != v2);
    }
  }
  return a1;
}

void sub_19C383D6C(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  *a1 = &off_1E3D379C0;
  v2 = a1 + 3;
  for (i = (uint64_t *)a1[4]; i != v2; i = (uint64_t *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1A1AD3538](v4, 0x1000C8077774924);
  }
  if (a1[5])
  {
    v6 = a1[3];
    v5 = (uint64_t *)a1[4];
    v7 = *v5;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(v6 + 8);
    **(_QWORD **)(v6 + 8) = v7;
    a1[5] = 0;
    if (v5 != v2)
    {
      do
      {
        v8 = (uint64_t *)v5[1];
        operator delete(v5);
        v5 = v8;
      }
      while (v8 != v2);
    }
  }
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C383E28()
{
  return 48;
}

void sub_19C383E30(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  *a1 = &off_1E3D376C8;
  a1[1] = &off_1E3D379C0;
  v2 = a1 + 4;
  for (i = (uint64_t *)a1[5]; i != v2; i = (uint64_t *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1A1AD3538](v4, 0x1000C8077774924);
  }
  if (a1[6])
  {
    v6 = a1[4];
    v5 = (uint64_t *)a1[5];
    v7 = *v5;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(v6 + 8);
    **(_QWORD **)(v6 + 8) = v7;
    a1[6] = 0;
    if (v5 != v2)
    {
      do
      {
        v8 = (uint64_t *)v5[1];
        operator delete(v5);
        v5 = v8;
      }
      while (v8 != v2);
    }
  }
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C383EF4()
{
  return 40;
}

void sub_19C383F00(_QWORD *a1)
{
  sub_19C3848EC(a1);
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C383F24(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;

  v4 = operator new();
  *(_QWORD *)v4 = &off_1E3D37DB0;
  *(_QWORD *)(v4 + 8) = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 72))(*(_QWORD *)(a1 + 8), a2);
  *(_DWORD *)(v4 + 16) = -1;
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = *(_QWORD *)(a1 + 32);
  *(_DWORD *)(v4 + 40) = -1;
  v5 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(v4 + 48) = 0;
  *(_QWORD *)(v4 + 56) = v5;
  *(_DWORD *)(v4 + 64) = *(_DWORD *)(a1 + 64);
  *(_DWORD *)(v4 + 68) = *(_DWORD *)(a1 + 68);
  *(_BYTE *)(v4 + 74) = *(_BYTE *)(a1 + 74);
  *(_QWORD *)(v4 + 80) = &off_1E3D376C8;
  *(_QWORD *)(v4 + 88) = &off_1E3D379C0;
  *(_OWORD *)(v4 + 96) = xmmword_19C46DEF0;
  *(_QWORD *)(v4 + 112) = v4 + 112;
  *(_QWORD *)(v4 + 120) = v4 + 112;
  *(_QWORD *)(v4 + 128) = 0;
  v6 = operator new[]();
  v7 = operator new(0x18uLL);
  v8 = *(_QWORD **)(v4 + 120);
  v9 = *(_QWORD *)(v4 + 128);
  *v7 = v4 + 112;
  v7[1] = v8;
  v7[2] = v6;
  *v8 = v7;
  *(_QWORD *)(v4 + 120) = v7;
  *(_QWORD *)(v4 + 128) = v9 + 1;
  *(_QWORD *)(v4 + 136) = 0;
  return v4;
}

void sub_19C384034(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD355C](v1, 0x10E1C4003B7394BLL);
  _Unwind_Resume(a1);
}

uint64_t sub_19C3840A0(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_DWORD *)(a1 + 32);
  if (v2 == 3)
    return 3;
  if (v2)
    v6 = 0x40000000;
  else
    v6 = 0x10000000;
  v7 = *(_QWORD *)(a1 + 8);
  if (v2)
    v8 = 3221225472;
  else
    v8 = 805306368;
  v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 56))(v7, v8, a2);
  if ((v9 & v6) != 0)
    return *(unsigned int *)(a1 + 32);
  v10 = 0x80000000;
  if (!v2)
    v10 = 0x20000000;
  if ((v9 & v10) != 0)
    return 3;
  else
    return 4;
}

uint64_t sub_19C384134(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t sub_19C38413C(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 74))
    return a2 | 4;
  else
    return a2;
}

uint64_t sub_19C384150()
{
  return 0;
}

uint64_t sub_19C384158(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  void *__p[2];
  char v18;

  if (*(_DWORD *)(result + 16) == (_DWORD)a2)
    return result;
  v3 = result;
  *(_DWORD *)(result + 16) = a2;
  if (*(_DWORD *)(result + 32) == 3)
  {
    v18 = 5;
    strcpy((char *)__p, "FATAL");
    v4 = sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)__p, 5);
    sub_19C2A1B24(v4, (uint64_t)": ", 2);
    sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)"SortedMatcher: bad match type", 29);
    sub_19C351928();
    if (v18 < 0)
      operator delete(__p[0]);
    *(_BYTE *)(v3 + 74) = 1;
  }
  v5 = *(_QWORD **)(v3 + 24);
  if (v5)
  {
    if (*v5)
    {
      (*(void (**)(_QWORD))(*(_QWORD *)*v5 + 8))(*v5);
    }
    else
    {
      v7 = (_DWORD *)v5[3];
      if (v7)
        --*v7;
    }
    v6 = *(_QWORD *)(v3 + 136);
    v5[5] = v6;
    *(_QWORD *)(v3 + 136) = v5;
  }
  else
  {
    v5 = *(_QWORD **)(v3 + 136);
    if (!v5)
    {
      v9 = *(_QWORD *)(v3 + 96);
      if (v9 > 0xBF)
      {
        v12 = *(_QWORD *)(v3 + 104);
        if (v12 + 48 <= v9)
        {
          v13 = *(_QWORD *)(*(_QWORD *)(v3 + 120) + 16);
        }
        else
        {
          v13 = operator new[]();
          *(_QWORD *)(v3 + 104) = 0;
          v14 = operator new(0x18uLL);
          v12 = 0;
          v15 = *(_QWORD **)(v3 + 120);
          *v14 = v3 + 112;
          v14[1] = v15;
          v14[2] = v13;
          *v15 = v14;
          v16 = *(_QWORD *)(v3 + 128) + 1;
          *(_QWORD *)(v3 + 120) = v14;
          *(_QWORD *)(v3 + 128) = v16;
        }
        v5 = (_QWORD *)(v13 + v12);
        *(_QWORD *)(v3 + 104) = v12 + 48;
      }
      else
      {
        v5 = (_QWORD *)operator new[]();
        v10 = operator new(0x18uLL);
        v11 = *(_QWORD *)(v3 + 112);
        v10[1] = v3 + 112;
        v10[2] = v5;
        *v10 = v11;
        *(_QWORD *)(v11 + 8) = v10;
        *(_QWORD *)(v3 + 112) = v10;
        ++*(_QWORD *)(v3 + 128);
      }
      v5[5] = 0;
      goto LABEL_15;
    }
    v6 = v5[5];
  }
  *(_QWORD *)(v3 + 136) = v6;
LABEL_15:
  v8 = *(_QWORD *)(v3 + 8);
  v5[4] = 0;
  (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v8 + 120))(v8, a2, v5);
  *(_QWORD *)(v3 + 24) = v5;
  if (*v5)
    (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v5 + 72))(*v5, 16, 16);
  result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 8) + 32))(*(_QWORD *)(v3 + 8), a2);
  *(_QWORD *)(v3 + 48) = result;
  *(_DWORD *)(v3 + 68) = a2;
  return result;
}

void sub_19C384394(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  sub_19C351928();
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_19C3843BC(uint64_t a1, unsigned int a2)
{
  uint64_t result;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  int v25;
  _QWORD *v26;
  _QWORD *v27;
  unint64_t v28;
  _QWORD *v29;

  *(_BYTE *)(a1 + 73) = 1;
  if (*(_BYTE *)(a1 + 74))
  {
    result = 0;
    *(_BYTE *)(a1 + 72) = 0;
    *(_DWORD *)(a1 + 40) = -1;
    return result;
  }
  *(_BYTE *)(a1 + 72) = a2 == 0;
  if (a2 == -1)
    v4 = 0;
  else
    v4 = a2;
  *(_DWORD *)(a1 + 40) = v4;
  v5 = **(_QWORD **)(a1 + 24);
  if (v5)
  {
    if (*(_DWORD *)(a1 + 32))
      v6 = 2;
    else
      v6 = 1;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 72))(v5, v6, 15);
    v4 = *(_DWORD *)(a1 + 40);
  }
  if (v4 >= *(_DWORD *)(a1 + 36))
  {
    v8 = *(_QWORD *)(a1 + 48);
    if (!v8)
    {
      v9 = 0;
      goto LABEL_68;
    }
    v9 = 0;
    while (1)
    {
      v10 = (v8 + v9) >> 1;
      v11 = *(uint64_t **)(a1 + 24);
      v12 = *v11;
      if (*v11)
      {
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v12 + 56))(v12, (v8 + v9) >> 1);
        v11 = *(uint64_t **)(a1 + 24);
        v12 = *v11;
        if (*(_DWORD *)(a1 + 32))
          goto LABEL_19;
      }
      else
      {
        v11[4] = v10;
        if (*(_DWORD *)(a1 + 32))
        {
LABEL_19:
          if (v12)
            v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
          else
            v13 = v11[1] + 16 * v11[4];
          v14 = (unsigned int *)(v13 + 4);
          goto LABEL_26;
        }
      }
      if (v12)
        v14 = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
      else
        v14 = (unsigned int *)(v11[1] + 16 * v11[4]);
LABEL_26:
      v15 = *(_DWORD *)(a1 + 40);
      if (*v14 > v15)
      {
        v8 = (v8 + v9) >> 1;
        if (v9 >= v10)
          goto LABEL_68;
      }
      else
      {
        if (*v14 >= v15)
        {
          while (1)
          {
            if (v10 <= v9)
              return 1;
            v18 = *(uint64_t **)(a1 + 24);
            --v10;
            v19 = *v18;
            if (*v18)
            {
              (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v19 + 56))(v19, v10);
              v18 = *(uint64_t **)(a1 + 24);
              v19 = *v18;
              if (*(_DWORD *)(a1 + 32))
                goto LABEL_37;
            }
            else
            {
              v18[4] = v10;
              if (*(_DWORD *)(a1 + 32))
              {
LABEL_37:
                if (v19)
                  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 24))(v19);
                else
                  v16 = v18[1] + 16 * v18[4];
                v17 = (_DWORD *)(v16 + 4);
                goto LABEL_33;
              }
            }
            if (v19)
              v17 = (_DWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 24))(v19);
            else
              v17 = (_DWORD *)(v18[1] + 16 * v18[4]);
LABEL_33:
            if (*v17 != *(_DWORD *)(a1 + 40))
            {
              v28 = v10 + 1;
              v29 = *(_QWORD **)(a1 + 24);
              if (*v29)
                (*(void (**)(_QWORD, unint64_t))(*(_QWORD *)*v29 + 56))(*v29, v28);
              else
                v29[4] = v28;
              return 1;
            }
          }
        }
        v9 = v10 + 1;
        if (v10 + 1 >= v8)
        {
LABEL_68:
          v27 = *(_QWORD **)(a1 + 24);
          if (*v27)
            (*(void (**)(_QWORD, unint64_t))(*(_QWORD *)*v27 + 56))(*v27, v9);
          else
            v27[4] = v9;
          return *(_BYTE *)(a1 + 72) != 0;
        }
      }
    }
  }
  v7 = *(_QWORD **)(a1 + 24);
  if (*v7)
    (*(void (**)(_QWORD))(*(_QWORD *)*v7 + 48))(*v7);
  else
    v7[4] = 0;
  while (1)
  {
    v20 = *(_QWORD **)(a1 + 24);
    if (*v20)
    {
      if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v20 + 16))(*v20) & 1) != 0)
        return *(_BYTE *)(a1 + 72) != 0;
      v20 = *(_QWORD **)(a1 + 24);
      v21 = *v20;
      if (!*(_DWORD *)(a1 + 32))
        goto LABEL_52;
    }
    else
    {
      if (v20[4] >= v20[2])
        return *(_BYTE *)(a1 + 72) != 0;
      v21 = 0;
      if (!*(_DWORD *)(a1 + 32))
      {
LABEL_52:
        if (v21)
          v23 = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 24))(v21);
        else
          v23 = (unsigned int *)(v20[1] + 16 * v20[4]);
        goto LABEL_56;
      }
    }
    v22 = v21 ? (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 24))(v21) : v20[1] + 16 * v20[4];
    v23 = (unsigned int *)(v22 + 4);
LABEL_56:
    v24 = *(_DWORD *)(a1 + 40);
    v25 = *v23 <= v24 ? 0 : 7;
    if (*v23 == v24)
      v25 = 1;
    if (v25)
      break;
    v26 = *(_QWORD **)(a1 + 24);
    if (*v26)
      (*(void (**)(_QWORD))(*(_QWORD *)*v26 + 32))(*v26);
    else
      ++v26[4];
  }
  if (v25 == 1)
    return 1;
  return *(_BYTE *)(a1 + 72) != 0;
}

BOOL sub_19C384720(uint64_t a1)
{
  _QWORD *v3;
  uint64_t *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;

  if (*(_BYTE *)(a1 + 72))
    return 0;
  v3 = *(_QWORD **)(a1 + 24);
  if (*v3)
  {
    if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v3 + 16))(*v3) & 1) != 0)
      return 1;
  }
  else if (v3[4] >= v3[2])
  {
    return 1;
  }
  if (!*(_BYTE *)(a1 + 73))
    return 0;
  v4 = *(uint64_t **)(a1 + 24);
  v5 = *(_DWORD *)(a1 + 32);
  v6 = *v4;
  if (*v4)
  {
    if (v5)
      v7 = 2;
    else
      v7 = 1;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 72))(v6, v7, 15);
    v5 = *(_DWORD *)(a1 + 32);
    v4 = *(uint64_t **)(a1 + 24);
    v6 = *v4;
  }
  if (v5)
  {
    if (v6)
      v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
    else
      v8 = v4[1] + 16 * v4[4];
    v9 = (_DWORD *)(v8 + 4);
  }
  else if (v6)
  {
    v9 = (_DWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
  }
  else
  {
    v9 = (_DWORD *)(v4[1] + 16 * v4[4]);
  }
  return *v9 != *(_DWORD *)(a1 + 40);
}

uint64_t sub_19C38481C(uint64_t a1)
{
  _QWORD *v3;

  if (*(_BYTE *)(a1 + 72))
    return a1 + 56;
  v3 = *(_QWORD **)(a1 + 24);
  if (*v3
    && ((*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v3 + 72))(*v3, 15, 15),
        v3 = *(_QWORD **)(a1 + 24),
        *v3))
  {
    return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v3 + 24))(*v3);
  }
  else
  {
    return v3[1] + 16 * v3[4];
  }
}

uint64_t sub_19C384894(uint64_t result)
{
  uint64_t *v1;

  if (*(_BYTE *)(result + 72))
  {
    *(_BYTE *)(result + 72) = 0;
  }
  else
  {
    v1 = *(uint64_t **)(result + 24);
    result = *v1;
    if (*v1)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
    else
      ++v1[4];
  }
  return result;
}

uint64_t sub_19C3848CC(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_19C3848DC(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8));
}

_QWORD *sub_19C3848EC(_QWORD *a1)
{
  _QWORD *v2;
  _DWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *i;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;

  *a1 = &off_1E3D37DB0;
  v2 = (_QWORD *)a1[3];
  if (v2)
  {
    if (*v2)
    {
      (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 8))(*v2);
    }
    else
    {
      v3 = (_DWORD *)v2[3];
      if (v3)
        --*v3;
    }
    v2[5] = a1[17];
    a1[17] = v2;
  }
  v4 = a1[1];
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  a1[10] = &off_1E3D376C8;
  a1[11] = &off_1E3D379C0;
  v5 = a1 + 14;
  for (i = (uint64_t *)a1[15]; i != v5; i = (uint64_t *)i[1])
  {
    v7 = i[2];
    if (v7)
      MEMORY[0x1A1AD3538](v7, 0x1000C8077774924);
  }
  if (a1[16])
  {
    v9 = a1[14];
    v8 = (uint64_t *)a1[15];
    v10 = *v8;
    *(_QWORD *)(v10 + 8) = *(_QWORD *)(v9 + 8);
    **(_QWORD **)(v9 + 8) = v10;
    a1[16] = 0;
    if (v8 != v5)
    {
      do
      {
        v11 = (uint64_t *)v8[1];
        operator delete(v8);
        v8 = v11;
      }
      while (v11 != v5);
    }
  }
  return a1;
}

void sub_19C384A04(uint64_t a1)
{
  sub_19C3891F8(a1);
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C384A28(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, 0x3FFFFFFF0007);
}

uint64_t sub_19C384A3C(uint64_t a1, uint64_t a2)
{
  if ((a2 & 4) != 0
    && ((*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 160) + 56))(*(_QWORD *)(a1 + 160), 4, 0)|| (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 168) + 56))(*(_QWORD *)(a1 + 168), 4, 0)|| ((*(uint64_t (**)(_QWORD, _QWORD))(***(_QWORD ***)(a1 + 144) + 40))(**(_QWORD **)(a1 + 144), 0) & 4) != 0|| ((*(uint64_t (**)(_QWORD, _QWORD))(***(_QWORD ***)(a1 + 152) + 40))(**(_QWORD **)(a1 + 152), 0) & 4) != 0))
  {
    *(_QWORD *)(a1 + 8) |= 4uLL;
  }
  return *(_QWORD *)(a1 + 8) & a2;
}

uint64_t sub_19C384AE4(uint64_t a1)
{
  uint64_t v2;
  _QWORD **v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  __int128 v9;
  uint64_t *v10;

  v2 = operator new();
  sub_19C388690(v2, a1);
  *(_QWORD *)v2 = &off_1E3D37EF8;
  v3 = (_QWORD **)operator new();
  v4 = *(_QWORD *)(a1 + 136);
  v5 = *(_QWORD **)v4;
  v6 = (_QWORD *)operator new();
  *v6 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 16))(*v5, 1);
  *v3 = v6;
  v7 = *(_QWORD **)(v4 + 8);
  v8 = (_QWORD *)operator new();
  *v8 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v7 + 16))(*v7, 1);
  v3[1] = v8;
  v3[2] = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)**v3 + 32))(**v3);
  v3[3] = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v3[1] + 32))(*v3[1]);
  v3[4] = (_QWORD *)-1;
  *((_BYTE *)v3 + 40) = -1;
  *(_QWORD *)(v2 + 136) = v3;
  v9 = *(_OWORD *)v3;
  *(_OWORD *)(v2 + 144) = *(_OWORD *)v3;
  *(_QWORD *)(v2 + 160) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v9 + 32))(*(_QWORD *)v9);
  *(_QWORD *)(v2 + 168) = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(v2 + 152) + 32))(**(_QWORD **)(v2 + 152));
  v10 = (uint64_t *)operator new();
  sub_19C388DE0(v10, *(_QWORD **)(a1 + 176));
  *(_QWORD *)(v2 + 176) = v10;
  *(_DWORD *)(v2 + 184) = *(_DWORD *)(a1 + 184);
  return v2;
}

void sub_19C384C80(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  MEMORY[0x1A1AD355C](v2, 0x10E0C401DE81863);
  sub_19C37BDD0(v1);
  MEMORY[0x1A1AD355C](v1, 0x10F3C405A371F01);
  _Unwind_Resume(a1);
}

void sub_19C384D14(uint64_t a1, int a2)
{
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v12;
  _BOOL4 v13;
  _QWORD *v15;
  void *__p[2];
  char v17;

  v4 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 176) + 104) + 12 * a2);
  v5 = *v4;
  v6 = v4[1];
  v7 = *(_QWORD **)(a1 + 136);
  LOBYTE(__p[0]) = *((_BYTE *)v4 + 8);
  sub_19C3852B4(v7, v5, v6, __p);
  v8 = *(_DWORD *)(a1 + 184);
  if (v8)
  {
    if (v8 == 1)
      goto LABEL_18;
    v9 = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 144) + 104))(**(_QWORD **)(a1 + 144), v5);
    v10 = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 152) + 104))(**(_QWORD **)(a1 + 152), v6);
    if (v9 == -1 && v10 == -1)
    {
      v17 = 5;
      strcpy((char *)__p, "FATAL");
      v15 = sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)__p, 5);
      sub_19C2A1B24(v15, (uint64_t)": ", 2);
      sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)"ComposeFst: both sides can't require match", 42);
      sub_19C351928();
      if (v17 < 0)
        operator delete(__p[0]);
      *(_QWORD *)(a1 + 8) |= 4uLL;
      goto LABEL_22;
    }
    v12 = v10 == -1 || v9 <= v10;
    v13 = v12;
    if (v9 == -1 || !v13)
    {
LABEL_18:
      sub_19C386664(a1, a2, v5, *(_QWORD *)(a1 + 168), v6, *(_QWORD **)(a1 + 144), 0);
      return;
    }
  }
LABEL_22:
  sub_19C386664(a1, a2, v6, *(_QWORD *)(a1 + 160), v5, *(_QWORD **)(a1 + 152), 1);
}

void sub_19C384EAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  sub_19C351928();
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_19C384ED4(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;

  if ((*(unsigned int (**)(_QWORD, _QWORD))(***(_QWORD ***)(a1 + 144) + 24))(**(_QWORD **)(a1 + 144), 0) != a3
    || (*(unsigned int (**)(_QWORD, _QWORD))(***(_QWORD ***)(a1 + 152) + 24))(**(_QWORD **)(a1 + 152), 0) != a3)
  {
    return 0;
  }
  v6 = operator new();
  *(_QWORD *)v6 = &off_1E3D38130;
  *(_QWORD *)(v6 + 8) = a2;
  *(_QWORD *)(v6 + 16) = a1;
  *(_DWORD *)(v6 + 24) = -1;
  *(_DWORD *)(v6 + 28) = a3;
  v7 = *(_QWORD **)(a1 + 144);
  v8 = (_QWORD *)operator new();
  *v8 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v7 + 16))(*v7, 0);
  *(_QWORD *)(v6 + 32) = v8;
  v9 = *(_QWORD **)(a1 + 152);
  v10 = (_QWORD *)operator new();
  *v10 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v9 + 16))(*v9, 0);
  *(_QWORD *)(v6 + 40) = v10;
  *(_BYTE *)(v6 + 48) = 0;
  *(_QWORD *)(v6 + 52) = 0xFFFFFFFFLL;
  *(_QWORD *)(v6 + 60) = 0xFFFFFFFF00000000;
  *(_BYTE *)(v6 + 84) = 0;
  if (a3 == 1)
    *(_QWORD *)(v6 + 52) = 0xFFFFFFFF00000000;
  return v6;
}

void sub_19C385028(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  MEMORY[0x1A1AD355C](v2, 0x20C4093837F09);
  MEMORY[0x1A1AD355C](v1, 0x10E1C40868C5753);
  _Unwind_Resume(a1);
}

uint64_t sub_19C385070(_QWORD **a1)
{
  uint64_t result;
  unsigned int v3;
  unint64_t v4;
  char v5;

  result = (*(uint64_t (**)(_QWORD *))(*a1[20] + 16))(a1[20]);
  if ((_DWORD)result != -1)
  {
    v3 = result;
    result = (*(uint64_t (**)(_QWORD *))(*a1[21] + 16))(a1[21]);
    if ((_DWORD)result != -1)
    {
      v4 = __PAIR64__(result, v3);
      v5 = 0;
      return sub_19C385428(a1[22], (uint64_t *)&v4);
    }
  }
  return result;
}

void sub_19C3850DC(uint64_t a1@<X0>, int a2@<W1>, float *a3@<X8>)
{
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  _QWORD *v11;
  float v12;
  unsigned __int8 v13;
  float v14;
  unsigned __int8 v15;
  BOOL v16;
  int v17;
  int v18;
  float v19;
  float v20;
  uint64_t v21;
  int v22;
  int v23;

  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 176) + 104);
  v7 = (unsigned int *)(v6 + 12 * a2);
  v8 = *v7;
  (*(void (**)(char *__return_ptr, _QWORD, uint64_t))(***(_QWORD ***)(a1 + 144) + 96))((char *)&v21 + 4, **(_QWORD **)(a1 + 144), v8);
  v9 = *((float *)&v21 + 1);
  v23 = HIDWORD(v21);
  v22 = 2139095039;
  if (*((float *)&v21 + 1) != 3.4028e38)
  {
    v10 = v7[1];
    (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(***(_QWORD ***)(a1 + 152) + 96))(&v21, **(_QWORD **)(a1 + 152), v10);
    v9 = *(float *)&v21;
    v23 = v21;
    v22 = 2139095039;
    if (*(float *)&v21 != 3.4028e38)
    {
      v11 = *(_QWORD **)(a1 + 136);
      LOBYTE(v23) = *(_BYTE *)(v6 + 12 * a2 + 8);
      sub_19C3852B4(v11, v8, v10, &v23);
      v12 = *((float *)&v21 + 1);
      v13 = atomic_load((unsigned __int8 *)&qword_1EDB96FE8);
      if ((v13 & 1) == 0)
      {
        v19 = *((float *)&v21 + 1);
        v17 = __cxa_guard_acquire(&qword_1EDB96FE8);
        v12 = v19;
        if (v17)
        {
          dword_1EDB96FF0 = -8388609;
          __cxa_guard_release(&qword_1EDB96FE8);
          v12 = v19;
        }
      }
      if (v12 == *(float *)&dword_1EDB96FF0)
        goto LABEL_13;
      v14 = *(float *)&v21;
      v15 = atomic_load((unsigned __int8 *)&qword_1EDB96FE8);
      if ((v15 & 1) == 0)
      {
        v20 = *(float *)&v21;
        v18 = __cxa_guard_acquire(&qword_1EDB96FE8);
        v14 = v20;
        if (v18)
        {
          dword_1EDB96FF0 = -8388609;
          __cxa_guard_release(&qword_1EDB96FE8);
          v14 = v20;
        }
      }
      if (v14 == *(float *)&dword_1EDB96FF0)
      {
LABEL_13:
        v9 = NAN;
      }
      else
      {
        v16 = *(float *)&v21 == 3.4028e38 || *((float *)&v21 + 1) == 3.4028e38;
        v9 = *(float *)&v21 + *((float *)&v21 + 1);
        if (v16)
          v9 = 3.4028e38;
      }
    }
  }
  *a3 = v9;
}

_QWORD *sub_19C3852B4(_QWORD *result, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v15;
  uint64_t v16;
  int v17;

  v6 = result;
  if (*((_DWORD *)result + 8) != (_DWORD)a2 || *((_DWORD *)result + 9) != (_DWORD)a3 || *a4 != *((_BYTE *)result + 40))
  {
    *((_DWORD *)result + 8) = a2;
    *((_DWORD *)result + 9) = a3;
    *((_BYTE *)result + 40) = *a4;
    v7 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)result[2] + 32))(result[2], a2);
    v8 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)v6[2] + 48))(v6[2], a2);
    (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(*(_QWORD *)v6[2] + 24))(&v16, v6[2], a2);
    v17 = v16;
    HIDWORD(v16) = 2139095039;
    v9.n128_u32[0] = v16;
    v11 = *(float *)&v16 == 3.4028e38 && v7 == v8;
    *((_BYTE *)v6 + 41) = v11;
    *((_BYTE *)v6 + 43) = v8 == 0;
    v12 = (*(uint64_t (**)(_QWORD, uint64_t, __n128))(*(_QWORD *)v6[3] + 32))(v6[3], a3, v9);
    v13 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)v6[3] + 40))(v6[3], a3);
    result = (*(_QWORD *(**)(uint64_t *__return_ptr, _QWORD, uint64_t))(*(_QWORD *)v6[3] + 24))(&v16, v6[3], a3);
    v17 = v16;
    HIDWORD(v16) = 2139095039;
    v15 = *(float *)&v16 == 3.4028e38 && v12 == v13;
    *((_BYTE *)v6 + 42) = v15;
    *((_BYTE *)v6 + 44) = v13 == 0;
  }
  return result;
}

uint64_t sub_19C385428(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  uint64_t v8;
  uint64_t ***v9;
  uint64_t **i;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  char *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  int v29;
  int v30;

  a1[16] = a2;
  v4 = a1 + 4;
  v5 = (int8x8_t)a1[5];
  if (v5)
  {
    v6 = **(int **)(a1[10] + 128)
       + 7853 * *(int *)(*(_QWORD *)(a1[10] + 128) + 4)
       + 7867 * *(char *)(*(_QWORD *)(a1[10] + 128) + 8);
    v7 = (uint8x8_t)vcnt_s8(v5);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      v8 = **(int **)(a1[10] + 128)
         + 7853 * *(int *)(*(_QWORD *)(a1[10] + 128) + 4)
         + 7867 * *(char *)(*(_QWORD *)(a1[10] + 128) + 8);
      if (v6 >= *(_QWORD *)&v5)
        v8 = v6 % *(_QWORD *)&v5;
    }
    else
    {
      v8 = (*(_QWORD *)&v5 - 1) & v6;
    }
    v9 = *(uint64_t ****)(*v4 + 8 * v8);
    if (v9)
    {
      for (i = *v9; i; i = (uint64_t **)*i)
      {
        v11 = (unint64_t)i[1];
        if (v11 == v6)
        {
          result = *((unsigned int *)i + 4);
          if ((int)result >= -1)
          {
            v13 = a1[12];
            if ((_DWORD)result == -1)
            {
              v15 = *(_QWORD *)(v13 + 128);
              v14 = v15;
            }
            else
            {
              v14 = *(_QWORD *)(v13 + 104) + 12 * result;
              v15 = *(_QWORD *)(v13 + 128);
            }
            if (v14 == v15)
              return result;
            v16 = *(_DWORD *)v14 == *(_DWORD *)v15 && *(_DWORD *)(v14 + 4) == *(_DWORD *)(v15 + 4);
            if (v16 && *(unsigned __int8 *)(v14 + 8) == *(unsigned __int8 *)(v15 + 8))
              return result;
          }
        }
        else
        {
          if (v7.u32[0] <= 1uLL)
          {
            v11 &= *(_QWORD *)&v5 - 1;
          }
          else if (v11 >= *(_QWORD *)&v5)
          {
            v11 %= *(_QWORD *)&v5;
          }
          if (v11 != v8)
            break;
        }
      }
    }
  }
  v18 = (char *)a1[13];
  v17 = (char *)a1[14];
  v19 = (v17 - v18) / 12;
  v30 = v19;
  v20 = a1[15];
  if ((unint64_t)v17 >= v20)
  {
    v23 = v19 + 1;
    if ((unint64_t)(v19 + 1) > 0x1555555555555555)
      sub_19C2A18E8();
    v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20 - (_QWORD)v18) >> 2);
    if (2 * v24 > v23)
      v23 = 2 * v24;
    if (v24 >= 0xAAAAAAAAAAAAAAALL)
      v25 = 0x1555555555555555;
    else
      v25 = v23;
    if (v25)
    {
      if (v25 > 0x1555555555555555)
        sub_19C2A143C();
      v26 = (char *)operator new(12 * v25);
    }
    else
    {
      v26 = 0;
    }
    v27 = &v26[12 * v19];
    *(_QWORD *)v27 = *a2;
    *((_DWORD *)v27 + 2) = *((_DWORD *)a2 + 2);
    v22 = v27 + 12;
    if (v17 != v18)
    {
      do
      {
        v28 = *(_QWORD *)(v17 - 12);
        v17 -= 12;
        v29 = *((_DWORD *)v17 + 2);
        *(_QWORD *)(v27 - 12) = v28;
        v27 -= 12;
        *((_DWORD *)v27 + 2) = v29;
      }
      while (v17 != v18);
      v17 = (char *)a1[13];
    }
    a1[13] = v27;
    a1[14] = v22;
    a1[15] = &v26[12 * v25];
    if (v17)
      operator delete(v17);
  }
  else
  {
    v21 = *a2;
    *((_DWORD *)v17 + 2) = *((_DWORD *)a2 + 2);
    *(_QWORD *)v17 = v21;
    v22 = v17 + 12;
  }
  a1[14] = v22;
  sub_19C3856B4((uint64_t)v4, v19, &v30);
  return v19;
}

void sub_19C3856B4(uint64_t a1, int a2, _DWORD *a3)
{
  unint64_t v3;
  uint64_t v6;
  int *v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  uint64_t **v11;
  uint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  float v21;
  float v22;
  _BOOL8 v23;
  unint64_t v24;
  unint64_t v25;
  size_t prime;
  int8x8_t v27;
  unint64_t v28;
  uint8x8_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  unint64_t v34;

  if (a2 < -1)
  {
    v8 = 0;
    v9 = *(_QWORD *)(a1 + 8);
    if (!v9)
      goto LABEL_38;
  }
  else
  {
    v6 = *(_QWORD *)(a1 + 48);
    if (a2 == -1)
      v7 = *(int **)(v6 + 128);
    else
      v7 = (int *)(*(_QWORD *)(v6 + 104) + 12 * a2);
    v8 = *v7 + 7853 * v7[1] + 7867 * *((char *)v7 + 8);
    v9 = *(_QWORD *)(a1 + 8);
    if (!v9)
      goto LABEL_38;
  }
  v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
  v10.i16[0] = vaddlv_u8(v10);
  if (v10.u32[0] > 1uLL)
  {
    v3 = v8;
    if (v8 >= v9)
      v3 = v8 % v9;
  }
  else
  {
    v3 = (v9 - 1) & v8;
  }
  v11 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
  if (v11)
  {
    v12 = *v11;
    if (v12)
    {
      v13 = v9 - 1;
      if (a2 < -1)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            v31 = v12[1];
            if (v31 == v8)
            {
              if (*((_DWORD *)v12 + 4) == a2)
                return;
            }
            else if ((v31 & v13) != v3)
            {
              goto LABEL_38;
            }
            v12 = (uint64_t *)*v12;
            if (!v12)
              goto LABEL_38;
          }
        }
        while (1)
        {
          v32 = v12[1];
          if (v32 == v8)
          {
            if (*((_DWORD *)v12 + 4) == a2)
              return;
          }
          else
          {
            if (v32 >= v9)
              v32 %= v9;
            if (v32 != v3)
              goto LABEL_38;
          }
          v12 = (uint64_t *)*v12;
          if (!v12)
            goto LABEL_38;
        }
      }
      while (1)
      {
        v14 = v12[1];
        if (v14 == v8)
          break;
        if (v10.u32[0] > 1uLL)
        {
          if (v14 >= v9)
            v14 %= v9;
        }
        else
        {
          v14 &= v13;
        }
        if (v14 != v3)
          goto LABEL_38;
LABEL_14:
        v12 = (uint64_t *)*v12;
        if (!v12)
          goto LABEL_38;
      }
      v15 = *((_DWORD *)v12 + 4);
      if (v15 < -1)
      {
        if (v15 == a2)
          return;
        goto LABEL_14;
      }
      v16 = *(_QWORD *)(a1 + 64);
      if (v15 == -1)
      {
        v17 = *(_QWORD *)(v16 + 128);
        if (a2 != -1)
          goto LABEL_19;
      }
      else
      {
        v17 = *(_QWORD *)(v16 + 104) + 12 * v15;
        if (a2 != -1)
        {
LABEL_19:
          v18 = *(_QWORD *)(v16 + 104) + 12 * a2;
LABEL_28:
          if (v17 == v18)
            return;
          v19 = *(_DWORD *)v17 == *(_DWORD *)v18 && *(_DWORD *)(v17 + 4) == *(_DWORD *)(v18 + 4);
          if (v19 && *(unsigned __int8 *)(v17 + 8) == *(unsigned __int8 *)(v18 + 8))
            return;
          goto LABEL_14;
        }
      }
      v18 = *(_QWORD *)(v16 + 128);
      goto LABEL_28;
    }
  }
LABEL_38:
  v20 = sub_19C385AC4((uint64_t **)(a1 + 32));
  *(_QWORD *)v20 = 0;
  *(_QWORD *)(v20 + 8) = v8;
  *(_DWORD *)(v20 + 16) = *a3;
  v21 = (float)(unint64_t)(*(_QWORD *)(a1 + 40) + 1);
  v22 = *(float *)(a1 + 56);
  if (!v9 || (float)(v22 * (float)v9) < v21)
  {
    v23 = 1;
    if (v9 >= 3)
      v23 = (v9 & (v9 - 1)) != 0;
    v24 = v23 | (2 * v9);
    v25 = vcvtps_u32_f32(v21 / v22);
    if (v24 <= v25)
      prime = v25;
    else
      prime = v24;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v27 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v27)
      goto LABEL_50;
    if (prime < *(_QWORD *)&v27)
    {
      v28 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 40) / *(float *)(a1 + 56));
      if (*(_QWORD *)&v27 < 3uLL || (v29 = (uint8x8_t)vcnt_s8(v27), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
      {
        v28 = std::__next_prime(v28);
      }
      else
      {
        v30 = 1 << -(char)__clz(v28 - 1);
        if (v28 >= 2)
          v28 = v30;
      }
      if (prime <= v28)
        prime = v28;
      if (prime < *(_QWORD *)&v27)
LABEL_50:
        sub_19C380A00(a1, prime);
    }
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v33 = *(uint64_t **)(*(_QWORD *)a1 + 8 * v3);
  if (v33)
  {
    *(_QWORD *)v20 = *v33;
LABEL_88:
    *v33 = v20;
    goto LABEL_89;
  }
  *(_QWORD *)v20 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v20;
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 24;
  if (*(_QWORD *)v20)
  {
    v34 = *(_QWORD *)(*(_QWORD *)v20 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v34 >= v9)
        v34 %= v9;
    }
    else
    {
      v34 &= v9 - 1;
    }
    v33 = (uint64_t *)(*(_QWORD *)a1 + 8 * v34);
    goto LABEL_88;
  }
LABEL_89:
  ++*(_QWORD *)(a1 + 40);
}

void sub_19C385AB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C385C60((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19C385AC4(uint64_t **a1)
{
  uint64_t *v1;
  unint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v17;

  v1 = *a1;
  v3 = (unint64_t *)(*a1 + 2);
  v2 = *v3;
  v4 = (*a1)[3] - *v3;
  if (v4 <= 0xC7)
  {
    v17 = 0;
    sub_19C37C8DC(v3, 25 - (v4 >> 3), (const double *)&v17);
    v2 = *v3;
  }
  v5 = *(_QWORD **)(v2 + 192);
  if (v5)
  {
    v6 = v5[7];
    if (v6)
    {
LABEL_5:
      v5[7] = *(_QWORD *)(v6 + 24);
      return v6;
    }
  }
  else
  {
    v5 = (_QWORD *)operator new();
    sub_19C380D48(v5, *v1);
    *(_QWORD *)(*v3 + 192) = v5;
    v6 = v5[7];
    if (v6)
      goto LABEL_5;
  }
  v7 = v5[2];
  if (v7 > 0x7F)
  {
    v11 = v5[3];
    if (v11 + 32 <= v7)
    {
      v12 = *(_QWORD *)(v5[5] + 16);
    }
    else
    {
      v12 = operator new[]();
      v5[3] = 0;
      v13 = operator new(0x18uLL);
      v11 = 0;
      v13[2] = v12;
      v14 = (_QWORD *)v5[5];
      v15 = v5[6];
      *v13 = v5 + 4;
      v13[1] = v14;
      *v14 = v13;
      v5[5] = v13;
      v5[6] = v15 + 1;
    }
    v6 = v12 + v11;
    v5[3] = v11 + 32;
  }
  else
  {
    v6 = operator new[]();
    v8 = operator new(0x18uLL);
    v8[2] = v6;
    v10 = v5[4];
    v9 = v5 + 4;
    *v8 = v10;
    v8[1] = v9;
    *(_QWORD *)(v10 + 8) = v8;
    *v9 = v8;
    ++v9[2];
  }
  *(_QWORD *)(v6 + 24) = 0;
  return v6;
}

void sub_19C385C3C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD355C](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

uint64_t sub_19C385C60(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    sub_19C380C80(*(uint64_t ***)(a1 + 8), v2);
  return a1;
}

_QWORD *sub_19C385C98(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  *a1 = &off_1E3D38130;
  v2 = (_QWORD *)a1[4];
  if (v2)
  {
    if (*v2)
      (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 8))(*v2);
    MEMORY[0x1A1AD355C](v2, 0x20C4093837F09);
  }
  v3 = (_QWORD *)a1[5];
  if (v3)
  {
    if (*v3)
      (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 8))(*v3);
    MEMORY[0x1A1AD355C](v3, 0x20C4093837F09);
  }
  return a1;
}

void sub_19C385D2C(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  *a1 = &off_1E3D38130;
  v2 = (_QWORD *)a1[4];
  if (v2)
  {
    if (*v2)
      (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 8))(*v2);
    MEMORY[0x1A1AD355C](v2, 0x20C4093837F09);
  }
  v3 = (_QWORD *)a1[5];
  if (v3)
  {
    if (*v3)
      (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 8))(*v3);
    MEMORY[0x1A1AD355C](v3, 0x20C4093837F09);
  }
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C385DD0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  void *__p[2];
  char v13;

  v4 = operator new();
  *(_QWORD *)v4 = &off_1E3D38130;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  v5 = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(v4 + 24) = -1;
  *(_DWORD *)(v4 + 28) = v5;
  v6 = *(_QWORD **)(a1 + 32);
  v7 = (_QWORD *)operator new();
  *v7 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v6 + 16))(*v6, a2);
  *(_QWORD *)(v4 + 32) = v7;
  v8 = *(_QWORD **)(a1 + 40);
  v9 = (_QWORD *)operator new();
  *v9 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v8 + 16))(*v8, a2);
  *(_QWORD *)(v4 + 40) = v9;
  *(_BYTE *)(v4 + 48) = 0;
  *(_QWORD *)(v4 + 52) = 0xFFFFFFFFLL;
  *(_QWORD *)(v4 + 60) = 0xFFFFFFFF00000000;
  *(_BYTE *)(v4 + 84) = *(_BYTE *)(a1 + 84);
  if ((_DWORD)a2)
  {
    v13 = 5;
    strcpy((char *)__p, "FATAL");
    v10 = sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)__p, 5);
    sub_19C2A1B24(v10, (uint64_t)": ", 2);
    sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)"ComposeFstMatcher: safe copy not supported", 42);
    sub_19C351928();
    if (v13 < 0)
      operator delete(__p[0]);
    *(_BYTE *)(v4 + 84) = 1;
  }
  if (v5 == 1)
    *(_QWORD *)(v4 + 52) = 0xFFFFFFFF00000000;
  return v4;
}

void sub_19C385F64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  sub_19C351928();
  if (a15 < 0)
    operator delete(__p);
  MEMORY[0x1A1AD355C](v15, 0x10E1C40868C5753);
  _Unwind_Resume(a1);
}

uint64_t sub_19C385FD0(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 32) + 24))(**(_QWORD **)(a1 + 32));
  if ((_DWORD)result != 3)
  {
    result = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 40) + 24))(**(_QWORD **)(a1 + 40), a2);
    if ((_DWORD)result != 3)
    {
      if ((*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 32) + 24))(**(_QWORD **)(a1 + 32), a2) != 4|| (result = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 40) + 24))(**(_QWORD **)(a1 + 40), a2), (_DWORD)result != 4))
      {
        if ((*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 32) + 24))(**(_QWORD **)(a1 + 32), a2) == 4&& (*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 40) + 24))(**(_QWORD **)(a1 + 40), a2) == *(_DWORD *)(a1 + 28))
        {
          return 4;
        }
        else if ((*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 32) + 24))(**(_QWORD **)(a1 + 32), a2) != *(_DWORD *)(a1 + 28)|| (result = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 40) + 24))(**(_QWORD **)(a1 + 40), a2), (_DWORD)result != 4))
        {
          if ((*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 32) + 24))(**(_QWORD **)(a1 + 32), a2) != *(_DWORD *)(a1 + 28))return 3;
          result = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 40) + 24))(**(_QWORD **)(a1 + 40), a2);
          if ((_DWORD)result != *(_DWORD *)(a1 + 28))
            return 3;
        }
      }
    }
  }
  return result;
}

uint64_t sub_19C386148(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t sub_19C386150(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 84))
    return a2 | 4;
  else
    return a2;
}

uint64_t sub_19C386164(uint64_t result, int a2)
{
  uint64_t v2;
  unsigned int *v3;
  uint64_t v4;

  if (*(_DWORD *)(result + 24) != a2)
  {
    v2 = result;
    *(_DWORD *)(result + 24) = a2;
    v3 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 16) + 176) + 104) + 12 * a2);
    v4 = v3[1];
    (*(void (**)(_QWORD, _QWORD))(***(_QWORD ***)(result + 32) + 56))(**(_QWORD **)(result + 32), *v3);
    result = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(v2 + 40) + 56))(**(_QWORD **)(v2 + 40), v4);
    *(_DWORD *)(v2 + 64) = *(_DWORD *)(v2 + 24);
  }
  return result;
}

uint64_t sub_19C3861DC(uint64_t a1, int a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t result;
  int v6;
  uint64_t v7;
  unsigned int *v8;

  *(_BYTE *)(a1 + 48) = a2 == 0;
  if (*(_DWORD *)(a1 + 28))
  {
    if (a2)
    {
      v4 = *(_QWORD **)(a1 + 32);
      v3 = *(_QWORD **)(a1 + 40);
      goto LABEL_6;
    }
    return 1;
  }
  if (!a2)
    return 1;
  v3 = *(_QWORD **)(a1 + 32);
  v4 = *(_QWORD **)(a1 + 40);
LABEL_6:
  result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v3 + 64))(*v3);
  if ((_DWORD)result)
  {
    v6 = *(_DWORD *)(a1 + 28);
    v7 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v3 + 80))(*v3);
    v8 = (unsigned int *)(v7 + 4);
    if (v6)
      v8 = (unsigned int *)v7;
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v4 + 64))(*v4, *v8);
    return sub_19C386378(a1, v3, v4);
  }
  return result;
}

uint64_t sub_19C386290(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 48)
    || !(*(unsigned int (**)(_QWORD))(***(_QWORD ***)(a1 + 32) + 72))(**(_QWORD **)(a1 + 32)))
  {
    return 0;
  }
  else
  {
    return (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 40) + 72))(**(_QWORD **)(a1 + 40));
  }
}

uint64_t sub_19C3862EC(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 48))
    return a1 + 52;
  else
    return a1 + 68;
}

uint64_t sub_19C386304(uint64_t result)
{
  _QWORD *v1;
  _QWORD *v2;

  if (*(_BYTE *)(result + 48))
  {
    *(_BYTE *)(result + 48) = 0;
  }
  else
  {
    if (*(_DWORD *)(result + 28))
    {
      v2 = *(_QWORD **)(result + 32);
      v1 = *(_QWORD **)(result + 40);
    }
    else
    {
      v1 = *(_QWORD **)(result + 32);
      v2 = *(_QWORD **)(result + 40);
    }
    return sub_19C386378(result, v1, v2);
  }
  return result;
}

uint64_t sub_19C38632C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 24))(v3, a2);
}

uint64_t sub_19C386368(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_19C386378(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  int v6;
  uint64_t v7;
  unsigned int *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  unsigned int v21;
  unsigned __int8 *v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  BOOL v25;
  float v26;
  int v28;
  int v29;
  float v30;
  float v31;
  float v32;
  float v33;
  unint64_t v34;
  char v35;

void sub_19C386664(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6, int a7)
{
  unsigned int *v13;
  unint64_t v14;
  _QWORD v15[3];
  _DWORD *v16;
  unint64_t v17;
  unsigned int v18[4];

  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*a6 + 56))(*a6, a3);
  v18[0] = a7 - 1;
  v18[1] = a7 << 31 >> 31;
  v18[2] = 0;
  v18[3] = a5;
  sub_19C386808(a1, a2, a6, v18, a7);
  v17 = 0;
  (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a4 + 120))(a4, a5, v15);
  while (1)
  {
    if (!v15[0])
    {
      v14 = v17;
      if (v17 >= v15[2])
        goto LABEL_15;
      goto LABEL_10;
    }
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v15[0] + 16))(v15[0]))
      break;
    if (!v15[0])
    {
      v14 = v17;
LABEL_10:
      v13 = (unsigned int *)(v15[1] + 16 * v14);
      goto LABEL_11;
    }
    v13 = (unsigned int *)(*(uint64_t (**)(void))(*(_QWORD *)v15[0] + 24))();
LABEL_11:
    sub_19C386808(a1, a2, a6, v13, a7);
    if (v15[0])
      (*(void (**)(_QWORD))(*(_QWORD *)v15[0] + 32))(v15[0]);
    else
      ++v17;
  }
  if (v15[0])
  {
    (*(void (**)(void))(*(_QWORD *)v15[0] + 8))();
    goto LABEL_17;
  }
LABEL_15:
  if (v16)
    --*v16;
LABEL_17:
  sub_19C386AA0(a1, a2);
}

void sub_19C3867CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _DWORD *a13)
{
  if (!a10)
  {
    if (a13)
      --*a13;
    _Unwind_Resume(exception_object);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C386808(uint64_t a1, int a2, _QWORD *a3, unsigned int *a4, int a5)
{
  char v5;
  unsigned int *v10;
  uint64_t result;
  int v12;
  uint64_t v13;
  unint64_t v14;
  unsigned __int8 *v15;
  unint64_t v16;
  int v17;
  char v18;
  uint64_t v19;
  unint64_t v20;
  unsigned __int8 *v21;
  int v22;
  unint64_t v23;
  int v24;
  char v25;
  char v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  unint64_t v30;
  int v31;
  int v32;

  v5 = a5;
  v10 = a4 + 1;
  if (!a5)
    v10 = a4;
  result = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a3 + 64))(*a3, *v10);
  if ((_DWORD)result)
  {
    result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 72))(*a3);
    if ((result & 1) == 0)
    {
      if ((v5 & 1) != 0)
      {
        while (1)
        {
          v13 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 80))(*a3);
          v30 = *(_QWORD *)v13;
          v31 = *(_DWORD *)(v13 + 8);
          v32 = *(_DWORD *)(v13 + 12);
          v14 = *(_QWORD *)a4;
          v27 = *(_QWORD *)a4;
          v28 = a4[2];
          v29 = a4[3];
          v15 = *(unsigned __int8 **)(a1 + 136);
          if ((_DWORD)v30 == -1)
          {
            v12 = v15[40];
            if (v12 == 1)
              goto LABEL_9;
            if (v15[40])
              goto LABEL_11;
            if (!v15[44])
            {
              if (v15[42])
                goto LABEL_11;
              LOBYTE(v12) = 1;
              goto LABEL_9;
            }
          }
          else
          {
            v16 = HIDWORD(v14);
            if ((_DWORD)v16 == -1)
            {
              v12 = v15[40];
              if (v12 == 2)
                goto LABEL_9;
              if (v15[40])
                goto LABEL_11;
              if (!v15[43])
              {
                if (v15[41])
                  goto LABEL_11;
                LOBYTE(v12) = 2;
                goto LABEL_9;
              }
            }
            else if (!(_DWORD)v16)
            {
              v17 = v15[40];
              if (v17)
                v18 = -1;
              else
                v18 = 0;
              v26 = v18;
              if (v17)
                goto LABEL_11;
              goto LABEL_10;
            }
          }
          LOBYTE(v12) = 0;
LABEL_9:
          v26 = v12;
LABEL_10:
          sub_19C387B7C(a1, a2, (float *)&v27, (uint64_t)&v30, &v26);
LABEL_11:
          (*(void (**)(_QWORD))(*(_QWORD *)*a3 + 88))(*a3);
          result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 72))(*a3);
          if ((result & 1) != 0)
            return result;
        }
      }
      do
      {
        v19 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 80))(*a3);
        v20 = *(_QWORD *)v19;
        v30 = *(_QWORD *)v19;
        v31 = *(_DWORD *)(v19 + 8);
        v32 = *(_DWORD *)(v19 + 12);
        v27 = *(_QWORD *)a4;
        v28 = a4[2];
        v29 = a4[3];
        v21 = *(unsigned __int8 **)(a1 + 136);
        if ((_DWORD)v27 == -1)
        {
          v22 = v21[40];
          if (v22 == 1)
            goto LABEL_46;
          if (v21[40])
            goto LABEL_32;
          if (!v21[44])
          {
            if (v21[42])
              goto LABEL_32;
            LOBYTE(v22) = 1;
            goto LABEL_46;
          }
        }
        else
        {
          v23 = HIDWORD(v20);
          if (!(_DWORD)v23)
          {
            v24 = v21[40];
            if (v24)
              v25 = -1;
            else
              v25 = 0;
            v26 = v25;
            if (v24)
              goto LABEL_32;
            goto LABEL_31;
          }
          if ((_DWORD)v23 == -1)
          {
            v22 = v21[40];
            if (v22 == 2)
              goto LABEL_46;
            if (v21[40])
              goto LABEL_32;
            if (!v21[43])
            {
              if (v21[41])
                goto LABEL_32;
              LOBYTE(v22) = 2;
LABEL_46:
              v26 = v22;
              goto LABEL_31;
            }
          }
        }
        v26 = 0;
LABEL_31:
        sub_19C387B7C(a1, a2, (float *)&v30, (uint64_t)&v27, &v26);
LABEL_32:
        (*(void (**)(_QWORD))(*(_QWORD *)*a3 + 88))(*a3);
        result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 72))(*a3);
      }
      while (!(_DWORD)result);
    }
  }
  return result;
}

void sub_19C386AA0(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  int *v19;
  int v20;
  int v21;

  v4 = *(_QWORD *)(a1 + 120);
  v5 = sub_19C386C20(v4, a2);
  v6 = v5;
  if (*(_BYTE *)(v4 + 104))
  {
    v7 = *(_DWORD *)(v5 + 56);
    if ((v7 & 4) == 0)
    {
      *(_DWORD *)(v5 + 56) = v7 | 4;
      v8 = *(_QWORD *)(v5 + 32) - *(_QWORD *)(v5 + 24) + *(_QWORD *)(v4 + 128) + 64;
      *(_QWORD *)(v4 + 128) = v8;
      *(_BYTE *)(v4 + 120) = 1;
      if (v8 > *(_QWORD *)(v4 + 112))
        sub_19C386D88(v4, v5);
    }
  }
  v9 = *(_QWORD *)(a1 + 120);
  v10 = *(_QWORD *)(v6 + 24);
  v11 = *(_QWORD *)(v6 + 32);
  v12 = v11 - v10;
  if (v11 != v10)
  {
    v13 = v12 >> 4;
    if ((unint64_t)(v12 >> 4) <= 1)
      v13 = 1;
    v14 = (_DWORD *)(v10 + 4);
    do
    {
      if (*(v14 - 1))
      {
        if (!*v14)
          goto LABEL_14;
      }
      else
      {
        ++*(_QWORD *)(v6 + 8);
        if (!*v14)
LABEL_14:
          ++*(_QWORD *)(v6 + 16);
      }
      v14 += 4;
      --v13;
    }
    while (v13);
  }
  if (*(_BYTE *)(v9 + 120))
  {
    if ((*(_BYTE *)(v6 + 56) & 4) != 0)
    {
      v15 = *(_QWORD *)(v9 + 128) + v12;
      *(_QWORD *)(v9 + 128) = v15;
      if (v15 > *(_QWORD *)(v9 + 112))
      {
        sub_19C386D88(v9, v6);
        v10 = *(_QWORD *)(v6 + 24);
        v11 = *(_QWORD *)(v6 + 32);
      }
    }
  }
  v16 = v11 - v10;
  if (v16)
  {
    v17 = v16 >> 4;
    v18 = *(_DWORD *)(a1 + 68);
    if (v17 <= 1)
      v17 = 1;
    v19 = (int *)(v10 + 12);
    do
    {
      v21 = *v19;
      v19 += 4;
      v20 = v21;
      if (v21 >= v18)
      {
        v18 = v20 + 1;
        *(_DWORD *)(a1 + 68) = v20 + 1;
      }
      --v17;
    }
    while (v17);
  }
  sub_19C38701C(a1, a2);
  *(_DWORD *)(v6 + 56) |= 0xAu;
}

uint64_t sub_19C386C20(uint64_t a1, int a2)
{
  int v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;

  v3 = *(_DWORD *)(a1 + 92);
  if (v3 == a2)
    return *(_QWORD *)(a1 + 96);
  if (!*(_BYTE *)(a1 + 88))
    return sub_19C387300(a1, a2 + 1);
  if (v3 == -1)
  {
    *(_DWORD *)(a1 + 92) = a2;
    v6 = sub_19C387300(a1, 0);
    *(_QWORD *)(a1 + 96) = v6;
    *(_DWORD *)(v6 + 56) |= 4u;
    v7 = *(char **)(v6 + 24);
    v8 = *(_QWORD *)(v6 + 40) - (_QWORD)v7;
    if (v8 <= 0x7FF)
    {
      v9 = v6;
      v10 = *(char **)(v6 + 32);
      v11 = (char *)operator new(0x800uLL);
      v12 = &v11[v10 - v7];
      v13 = v12;
      if (v10 != v7)
      {
        v14 = 0;
        do
        {
          v15 = &v12[v14];
          *((_QWORD *)v15 - 2) = *(_QWORD *)&v10[v14 - 16];
          *((_DWORD *)v15 - 2) = *(_DWORD *)&v10[v14 - 8];
          *((_DWORD *)v15 - 1) = *(_DWORD *)&v10[v14 - 4];
          v14 -= 16;
        }
        while (&v10[v14] != v7);
        v13 = &v12[v14];
      }
      *(_QWORD *)(v9 + 24) = v13;
      *(_QWORD *)(v9 + 32) = v12;
      *(_QWORD *)(v9 + 40) = v11 + 2048;
      if (v7)
        sub_19C37E928((uint64_t **)(v9 + 48), v7, v8 >> 4);
    }
    return *(_QWORD *)(a1 + 96);
  }
  v5 = *(_QWORD *)(a1 + 96);
  if (*(_DWORD *)(v5 + 60))
  {
    *(_DWORD *)(v5 + 56) &= ~4u;
    *(_BYTE *)(a1 + 88) = 0;
    return sub_19C387300(a1, a2 + 1);
  }
  *(_DWORD *)(a1 + 92) = a2;
  *(_DWORD *)v5 = 2139095039;
  *(_QWORD *)(v5 + 56) = 0;
  *(_QWORD *)(v5 + 8) = 0;
  *(_QWORD *)(v5 + 16) = 0;
  *(_QWORD *)(v5 + 32) = *(_QWORD *)(v5 + 24);
  result = *(_QWORD *)(a1 + 96);
  *(_DWORD *)(result + 56) |= 4u;
  return result;
}

void sub_19C386D88(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  unint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  BOOL v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  void *__p[2];
  char v25;

  v4 = 0;
  v5 = a1 + 32;
  while (*(_BYTE *)(a1 + 120))
  {
    v8 = (unint64_t)(float)((float)*(unint64_t *)(a1 + 112) * 0.666);
    v9 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 64) = v9;
    if (v9 != v5)
    {
      if ((v4 & 1) != 0)
      {
        do
        {
          v16 = *(_DWORD *)(v9 + 16);
          if (v16)
            v17 = v16 - 1;
          else
            v17 = *(_DWORD *)(a1 + 92);
          v18 = sub_19C386C20(a1, v17);
          v19 = *(_QWORD *)(a1 + 128);
          if (v19 <= v8 || (!*(_DWORD *)(v18 + 60) ? (v20 = v18 == a2) : (v20 = 1), v20))
          {
            *(_DWORD *)(v18 + 56) &= ~8u;
            v9 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
            *(_QWORD *)(a1 + 64) = v9;
          }
          else
          {
            if ((*(_BYTE *)(v18 + 56) & 4) != 0)
            {
              v21 = *(_QWORD *)(v18 + 32) - *(_QWORD *)(v18 + 24) + 64;
              sub_19C387140(v21 <= v19);
              *(_QWORD *)(a1 + 128) -= v21;
            }
            sub_19C387240(a1);
            v9 = *(_QWORD *)(a1 + 64);
          }
        }
        while (v9 != v5);
      }
      else
      {
        do
        {
          while (1)
          {
            v10 = *(_DWORD *)(v9 + 16);
            v11 = v10 ? v10 - 1 : *(_DWORD *)(a1 + 92);
            v12 = sub_19C386C20(a1, v11);
            v13 = *(_QWORD *)(a1 + 128);
            if (v13 > v8 && !*(_DWORD *)(v12 + 60))
            {
              v14 = *(_DWORD *)(v12 + 56);
              if ((v14 & 8) == 0 && v12 != a2)
                break;
            }
            *(_DWORD *)(v12 + 56) &= ~8u;
            v9 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
            *(_QWORD *)(a1 + 64) = v9;
            if (v9 == v5)
              goto LABEL_2;
          }
          if ((v14 & 4) != 0)
          {
            v15 = *(_QWORD *)(v12 + 32) - *(_QWORD *)(v12 + 24) + 64;
            sub_19C387140(v15 <= v13);
            *(_QWORD *)(a1 + 128) -= v15;
          }
          sub_19C387240(a1);
          v9 = *(_QWORD *)(a1 + 64);
        }
        while (v9 != v5);
      }
    }
LABEL_2:
    v6 = *(_QWORD *)(a1 + 128);
    v7 = v4 | (v6 <= v8);
    v4 = 1;
    if ((v7 & 1) != 0)
    {
      if (v8)
      {
        if (v6 > v8)
        {
          v22 = *(_QWORD *)(a1 + 112);
          do
          {
            v22 *= 2;
            v8 *= 2;
          }
          while (v6 > v8);
          *(_QWORD *)(a1 + 112) = v22;
        }
      }
      else if (v6)
      {
        v25 = 5;
        strcpy((char *)__p, "FATAL");
        v23 = sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)__p, 5);
        sub_19C2A1B24(v23, (uint64_t)": ", 2);
        sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)"GCCacheStore:GC: Unable to free all cached states", 49);
        sub_19C351928();
        if (v25 < 0)
          operator delete(__p[0]);
      }
      return;
    }
  }
}

void sub_19C386FF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  sub_19C351928();
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_19C38701C(uint64_t a1, int a2)
{
  int v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;

  if (*(_DWORD *)(a1 + 100) < a2)
    *(_DWORD *)(a1 + 100) = a2;
  v3 = *(_DWORD *)(a1 + 96);
  if (v3 <= a2)
  {
    if (v3 == a2)
      *(_DWORD *)(a1 + 96) = a2 + 1;
    if (*(_BYTE *)(a1 + 104) || !*(_QWORD *)(a1 + 112))
    {
      v4 = a2;
      v5 = *(_QWORD *)(a1 + 80);
      if (v5 <= a2)
      {
        do
        {
          v7 = *(_QWORD *)(a1 + 88);
          if (v5 == v7 << 6)
          {
            if ((uint64_t)(v5 + 1) < 0)
              sub_19C2A18E8();
            v8 = v7 << 7;
            if (v8 <= (v5 & 0xFFFFFFFFFFFFFFC0) + 64)
              v8 = (v5 & 0xFFFFFFFFFFFFFFC0) + 64;
            if (v5 <= 0x3FFFFFFFFFFFFFFELL)
              v9 = v8;
            else
              v9 = 0x7FFFFFFFFFFFFFFFLL;
            sub_19C37665C(a1 + 72, v9);
            v5 = *(_QWORD *)(a1 + 80);
          }
          *(_QWORD *)(a1 + 80) = v5 + 1;
          v6 = *(_QWORD *)(a1 + 72);
          *(_QWORD *)(v6 + ((v5 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v5);
          v5 = *(_QWORD *)(a1 + 80);
        }
        while (v5 <= v4);
      }
      else
      {
        v6 = *(_QWORD *)(a1 + 72);
      }
      *(_QWORD *)(v6 + ((v4 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v4;
    }
  }
}

void sub_19C387140(char a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  void *__p[2];
  char v7;

  if ((a1 & 1) == 0)
  {
    v7 = 5;
    strcpy((char *)__p, "FATAL");
    v1 = sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)__p, 5);
    sub_19C2A1B24(v1, (uint64_t)": ", 2);
    v2 = sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)"Check failed: \"", 15);
    v3 = sub_19C2A1B24(v2, (uint64_t)"(size) <= (cache_size_)", 23);
    v4 = sub_19C2A1B24(v3, (uint64_t)"\" file: ", 8);
    v5 = sub_19C2A1B24(v4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/LanguageModeling/Source/fst/cache.h", 73);
    sub_19C2A1B24(v5, (uint64_t)" line: ", 7);
    std::ostream::operator<<();
    sub_19C351928();
    if (v7 < 0)
      operator delete(__p[0]);
  }
}

void sub_19C387218(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19C387240(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 64);
  LODWORD(v3) = *(_DWORD *)(v2 + 16);
  if (!(_DWORD)v3 || (_DWORD)v3 - 1 == *(_DWORD *)(a1 + 92))
  {
    *(_DWORD *)(a1 + 92) = -1;
    *(_QWORD *)(a1 + 96) = 0;
    LODWORD(v3) = *(_DWORD *)(v2 + 16);
  }
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(v4 + 8 * (int)v3);
  if (v5)
  {
    sub_19C37E3C8(v5 + 24);
    sub_19C37E494((uint64_t **)(a1 + 72), v5);
    v3 = *(int *)(*(_QWORD *)(a1 + 64) + 16);
    v4 = *(_QWORD *)(a1 + 8);
  }
  else
  {
    v3 = (int)v3;
  }
  *(_QWORD *)(v4 + 8 * v3) = 0;
  v6 = *(uint64_t **)(a1 + 64);
  v8 = *v6;
  v7 = v6[1];
  *(_QWORD *)(a1 + 64) = v7;
  *(_QWORD *)(v8 + 8) = v7;
  *(_QWORD *)v6[1] = v8;
  --*(_QWORD *)(a1 + 48);
  sub_19C37C2FC((uint64_t **)(a1 + 56), v6, 1uLL);
}

uint64_t sub_19C387300(uint64_t a1, int a2)
{
  uint64_t v3;
  char *v4;
  char *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _OWORD *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  char *v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v40;
  _BYTE v41[4];
  int v42;

  v42 = a2;
  v3 = a2;
  v4 = *(char **)(a1 + 8);
  v5 = *(char **)(a1 + 16);
  v6 = (v5 - v4) >> 3;
  if (v6 > a2)
  {
    v7 = *(_QWORD *)&v4[8 * a2];
    if (v7)
      return v7;
    goto LABEL_44;
  }
  v8 = a2 + 1;
  v40 = 0;
  v9 = v8 - v6;
  if (v8 <= v6)
  {
    if (a2 + 1 >= v6)
      goto LABEL_44;
    v30 = &v4[8 * v8];
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 24);
    if (v9 > (v10 - (uint64_t)v5) >> 3)
    {
      if (a2 <= -2)
        sub_19C2A18E8();
      v11 = v10 - (_QWORD)v4;
      v12 = v11 >> 2;
      if (v11 >> 2 <= v8)
        v12 = a2 + 1;
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
        v13 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v13 = v12;
      if (v13 >> 61)
        sub_19C2A143C();
      v14 = operator new(8 * v13);
      v15 = &v14[8 * v6];
      v16 = &v14[8 * v8];
      v17 = (v3 - v6) & 0x1FFFFFFFFFFFFFFFLL;
      v18 = v15;
      if (v17 >= 0x13)
      {
        if (v15 >= (_QWORD *)v41 || (v18 = &v14[8 * v6], &v14[8 * v9 + v5 - v4] <= (_BYTE *)&v40))
        {
          v19 = (v17 + 1) & 0x3FFFFFFFFFFFFFFCLL;
          v20 = &v14[8 * v6];
          v21 = v19;
          do
          {
            *v20 = 0uLL;
            v20[1] = 0uLL;
            v20 += 2;
            v21 -= 4;
          }
          while (v21);
          if (v17 + 1 == v19)
            goto LABEL_22;
          v18 = &v15[v19];
        }
      }
      v22 = v40;
      do
        *v18++ = v22;
      while (v18 != v16);
LABEL_22:
      if (v5 == v4)
      {
        v4 = v5;
      }
      else
      {
        v23 = v5 - v4 - 8;
        if (v23 < 0x58)
          goto LABEL_51;
        if ((unint64_t)(v4 - v14) < 0x20)
          goto LABEL_51;
        v24 = (v23 >> 3) + 1;
        v25 = &v14[8 * v6 - 16];
        v26 = v5 - 16;
        v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v15 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v5 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_51:
          do
          {
            v29 = *((_QWORD *)v5 - 1);
            v5 -= 8;
            *--v15 = v29;
          }
          while (v5 != v4);
          v4 = *(char **)(a1 + 8);
        }
      }
      *(_QWORD *)(a1 + 8) = v15;
      *(_QWORD *)(a1 + 16) = v16;
      *(_QWORD *)(a1 + 24) = &v14[8 * v13];
      if (v4)
        operator delete(v4);
      goto LABEL_44;
    }
    v30 = &v5[8 * v9];
    v31 = (a2 - v6) & 0x1FFFFFFFFFFFFFFFLL;
    if (v31 >= 0xF && (v5 >= v41 || v30 <= (char *)&v40))
    {
      v32 = v31 + 1;
      v33 = v5;
      v34 = v32 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        *(_OWORD *)v33 = 0uLL;
        *((_OWORD *)v33 + 1) = 0uLL;
        v33 += 32;
        v34 -= 4;
      }
      while (v34);
      if (v32 == (v32 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_40;
      v5 += 8 * (v32 & 0x3FFFFFFFFFFFFFFCLL);
    }
    do
    {
      *(_QWORD *)v5 = 0;
      v5 += 8;
    }
    while (v5 != v30);
  }
LABEL_40:
  *(_QWORD *)(a1 + 16) = v30;
LABEL_44:
  v7 = sub_19C3875F0((uint64_t **)(a1 + 72));
  *(_DWORD *)v7 = 2139095039;
  *(_OWORD *)(v7 + 8) = 0u;
  *(_OWORD *)(v7 + 24) = 0u;
  *(_QWORD *)(v7 + 40) = 0;
  v35 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(v7 + 48) = v35;
  ++*(_QWORD *)(v35 + 8);
  *(_QWORD *)(v7 + 56) = 0;
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v3) = v7;
  if (*(_BYTE *)a1)
  {
    v36 = (_QWORD *)sub_19C38778C(*(uint64_t **)(a1 + 56), &v42);
    v38 = *(_QWORD *)(a1 + 32);
    v37 = (_QWORD *)(a1 + 32);
    *v36 = v38;
    v36[1] = v37;
    *(_QWORD *)(v38 + 8) = v36;
    *v37 = v36;
    ++v37[2];
  }
  return v7;
}

uint64_t sub_19C3875F0(uint64_t **a1)
{
  uint64_t *v1;
  unint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v17;

  v1 = *a1;
  v3 = (unint64_t *)(*a1 + 2);
  v2 = *v3;
  v4 = (*a1)[3] - *v3;
  if (v4 <= 0x207)
  {
    v17 = 0;
    sub_19C37C8DC(v3, 65 - (v4 >> 3), (const double *)&v17);
    v2 = *v3;
  }
  v5 = *(_QWORD **)(v2 + 512);
  if (v5)
  {
    v6 = v5[7];
    if (v6)
    {
LABEL_5:
      v5[7] = *(_QWORD *)(v6 + 64);
      return v6;
    }
  }
  else
  {
    v5 = (_QWORD *)operator new();
    sub_19C37E55C(v5, *v1);
    *(_QWORD *)(*v3 + 512) = v5;
    v6 = v5[7];
    if (v6)
      goto LABEL_5;
  }
  v7 = v5[2];
  if (v7 > 0x11F)
  {
    v11 = v5[3];
    if (v11 + 72 <= v7)
    {
      v12 = *(_QWORD *)(v5[5] + 16);
    }
    else
    {
      v12 = operator new[]();
      v5[3] = 0;
      v13 = operator new(0x18uLL);
      v11 = 0;
      v13[2] = v12;
      v14 = (_QWORD *)v5[5];
      v15 = v5[6];
      *v13 = v5 + 4;
      v13[1] = v14;
      *v14 = v13;
      v5[5] = v13;
      v5[6] = v15 + 1;
    }
    v6 = v12 + v11;
    v5[3] = v11 + 72;
  }
  else
  {
    v6 = operator new[]();
    v8 = operator new(0x18uLL);
    v8[2] = v6;
    v10 = v5[4];
    v9 = v5 + 4;
    *v8 = v10;
    v8[1] = v9;
    *(_QWORD *)(v10 + 8) = v8;
    *v9 = v8;
    ++v9[2];
  }
  *(_QWORD *)(v6 + 64) = 0;
  return v6;
}

void sub_19C387768(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD355C](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

uint64_t sub_19C38778C(uint64_t *a1, _DWORD *a2)
{
  uint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _BYTE *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _BYTE *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v29;

  a1[1] += 2;
  v5 = a1 + 2;
  v4 = a1[2];
  v6 = a1[3] - v4;
  if (v6 <= 0xC7)
  {
    v29 = 0;
    sub_19C37C8DC((unint64_t *)a1 + 2, 25 - (v6 >> 3), (const double *)&v29);
    v4 = *v5;
  }
  v7 = *(_QWORD **)(v4 + 192);
  if (v7)
  {
    v8 = v7[7];
    if (v8)
    {
LABEL_5:
      v7[7] = *(_QWORD *)(v8 + 24);
      goto LABEL_14;
    }
  }
  else
  {
    v7 = (_QWORD *)operator new();
    sub_19C37CB48(v7, *a1);
    *(_QWORD *)(*v5 + 192) = v7;
    v8 = v7[7];
    if (v8)
      goto LABEL_5;
  }
  v9 = v7[2];
  if (v9 > 0x7F)
  {
    v13 = v7[3];
    if (v13 + 32 <= v9)
    {
      v14 = *(_QWORD *)(v7[5] + 16);
    }
    else
    {
      v14 = operator new[]();
      v7[3] = 0;
      v15 = operator new(0x18uLL);
      v13 = 0;
      v15[2] = v14;
      *v15 = v7 + 4;
      v16 = (_QWORD *)v7[5];
      v15[1] = v16;
      *v16 = v15;
      v17 = v7[6] + 1;
      v7[5] = v15;
      v7[6] = v17;
    }
    v8 = v14 + v13;
    v7[3] = v13 + 32;
  }
  else
  {
    v8 = operator new[]();
    v10 = operator new(0x18uLL);
    v10[2] = v8;
    v12 = v7[4];
    v11 = v7 + 4;
    *v10 = v12;
    v10[1] = v11;
    *(_QWORD *)(v12 + 8) = v10;
    *v11 = v10;
    ++v11[2];
  }
  *(_QWORD *)(v8 + 24) = 0;
LABEL_14:
  v18 = a1[1] - 1;
  a1[1] = v18;
  if (!v18)
  {
    v19 = (_QWORD *)a1[2];
    v20 = (_BYTE *)a1[3];
    if (v20 == (_BYTE *)v19)
    {
      v19 = (_QWORD *)a1[3];
    }
    else
    {
      v21 = 0;
      do
      {
        v22 = v19[v21];
        if (v22)
        {
          (*(void (**)(_QWORD))(*(_QWORD *)v22 + 8))(v19[v21]);
          v19 = (_QWORD *)a1[2];
          v20 = (_BYTE *)a1[3];
        }
        ++v21;
      }
      while (v21 < (v20 - (_BYTE *)v19) >> 3);
    }
    if (v19)
    {
      a1[3] = (uint64_t)v19;
      operator delete(v19);
    }
    MEMORY[0x1A1AD355C](a1, 0x1080C40B69A5871);
    v18 = a1[1];
  }
  *(_QWORD *)v8 = 0;
  *(_QWORD *)(v8 + 8) = 0;
  *(_DWORD *)(v8 + 16) = *a2;
  v23 = v18 - 1;
  a1[1] = v23;
  if (!v23)
  {
    v24 = (_QWORD *)a1[2];
    v25 = (_BYTE *)a1[3];
    if (v25 == (_BYTE *)v24)
    {
      v24 = (_QWORD *)a1[3];
    }
    else
    {
      v26 = 0;
      do
      {
        v27 = v24[v26];
        if (v27)
        {
          (*(void (**)(_QWORD))(*(_QWORD *)v27 + 8))(v24[v26]);
          v24 = (_QWORD *)a1[2];
          v25 = (_BYTE *)a1[3];
        }
        ++v26;
      }
      while (v26 < (v25 - (_BYTE *)v24) >> 3);
    }
    if (v24)
    {
      a1[3] = (uint64_t)v24;
      operator delete(v24);
    }
    MEMORY[0x1A1AD355C](a1, 0x1080C40B69A5871);
  }
  return v8;
}

void sub_19C387A24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v12;
  _QWORD *v13;
  _BYTE *v14;
  unint64_t v15;
  uint64_t v16;

  MEMORY[0x1A1AD355C](v10, 0x10A1C40E79ACBF4);
  v12 = v9[1] - 1;
  v9[1] = v12;
  if (!v12)
  {
    v13 = (_QWORD *)v9[2];
    v14 = (_BYTE *)v9[3];
    if (v14 == (_BYTE *)v13)
    {
      v13 = (_QWORD *)v9[3];
    }
    else
    {
      v15 = 0;
      do
      {
        v16 = v13[v15];
        if (v16)
        {
          (*(void (**)(_QWORD))(*(_QWORD *)v16 + 8))(v13[v15]);
          v13 = (_QWORD *)v9[2];
          v14 = (_BYTE *)v9[3];
        }
        ++v15;
      }
      while (v15 < (v14 - (_BYTE *)v13) >> 3);
    }
    if (v13)
    {
      v9[3] = v13;
      operator delete(v13);
    }
    MEMORY[0x1A1AD355C](v9, 0x1080C40B69A5871);
  }
  sub_19C387AD4(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_19C387AD4(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _BYTE *v5;
  unint64_t v6;
  uint64_t v7;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 8) - 1;
  *(_QWORD *)(*a1 + 8) = v3;
  if (!v3)
  {
    v4 = *(_QWORD **)(v2 + 16);
    v5 = *(_BYTE **)(v2 + 24);
    if (v5 == (_BYTE *)v4)
    {
      v4 = *(_QWORD **)(v2 + 24);
    }
    else
    {
      v6 = 0;
      do
      {
        v7 = v4[v6];
        if (v7)
        {
          (*(void (**)(_QWORD))(*(_QWORD *)v7 + 8))(v4[v6]);
          v4 = *(_QWORD **)(v2 + 16);
          v5 = *(_BYTE **)(v2 + 24);
        }
        ++v6;
      }
      while (v6 < (v5 - (_BYTE *)v4) >> 3);
    }
    if (v4)
    {
      *(_QWORD *)(v2 + 24) = v4;
      operator delete(v4);
    }
    MEMORY[0x1A1AD355C](v2, 0x1080C40B69A5871);
  }
  return a1;
}

void sub_19C387B7C(uint64_t a1, int a2, float *a3, uint64_t a4, char *a5)
{
  int v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  unsigned __int8 v12;
  unint64_t v13;
  float v14;
  unsigned __int8 v15;
  float v16;
  float v17;
  BOOL v18;
  float v19;
  float v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  float *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  unint64_t v41;
  float *v42;
  uint64_t v43;
  float *v44;
  int v45;
  unint64_t v46;
  int v47;
  float *v48;
  uint64_t v49;
  char v50;

  v8 = *(_DWORD *)(a4 + 12);
  *(float *)&v49 = a3[3];
  HIDWORD(v49) = v8;
  v50 = *a5;
  v9 = *(unsigned int *)a3;
  v10 = *(unsigned int *)(a4 + 4);
  v11 = a3[2];
  v12 = atomic_load((unsigned __int8 *)&qword_1EDB96FE8);
  v13 = 0x1EDB96000uLL;
  if ((v12 & 1) == 0)
  {
    v44 = a3;
    v45 = __cxa_guard_acquire(&qword_1EDB96FE8);
    v13 = 0x1EDB96000uLL;
    a3 = v44;
    if (v45)
    {
      dword_1EDB96FF0 = -8388609;
      __cxa_guard_release(&qword_1EDB96FE8);
      v13 = 0x1EDB96000;
      a3 = v44;
    }
  }
  if (v11 == *(float *)(v13 + 4080))
    goto LABEL_11;
  v14 = *(float *)(a4 + 8);
  v15 = atomic_load((unsigned __int8 *)&qword_1EDB96FE8);
  if ((v15 & 1) == 0)
  {
    v48 = a3;
    v46 = v13;
    v47 = __cxa_guard_acquire(&qword_1EDB96FE8);
    v13 = v46;
    a3 = v48;
    if (v47)
    {
      *(_DWORD *)(v46 + 4080) = -8388609;
      __cxa_guard_release(&qword_1EDB96FE8);
      v13 = v46;
      a3 = v48;
    }
  }
  if (v14 == *(float *)(v13 + 4080))
  {
LABEL_11:
    v20 = NAN;
  }
  else
  {
    v16 = a3[2];
    v17 = *(float *)(a4 + 8);
    v18 = v17 == 3.4028e38 || v16 == 3.4028e38;
    v19 = v17 + v16;
    if (v18)
      v20 = 3.4028e38;
    else
      v20 = v19;
  }
  v21 = sub_19C385428(*(_QWORD **)(a1 + 176), &v49);
  v22 = *(_QWORD *)(a1 + 120);
  v23 = sub_19C386C20(v22, a2);
  v24 = v23;
  if (*(_BYTE *)(v22 + 104))
  {
    v25 = *(_DWORD *)(v23 + 56);
    if ((v25 & 4) == 0)
    {
      *(_DWORD *)(v23 + 56) = v25 | 4;
      v26 = *(_QWORD *)(v23 + 32) - *(_QWORD *)(v23 + 24) + *(_QWORD *)(v22 + 128) + 64;
      *(_QWORD *)(v22 + 128) = v26;
      *(_BYTE *)(v22 + 120) = 1;
      if (v26 > *(_QWORD *)(v22 + 112))
        sub_19C386D88(v22, v23);
    }
  }
  v27 = v9 | (v10 << 32);
  v29 = *(_QWORD *)(v24 + 32);
  v28 = *(_QWORD *)(v24 + 40);
  if (v29 >= v28)
  {
    v31 = *(_QWORD *)(v24 + 24);
    v32 = (uint64_t)(v29 - v31) >> 4;
    v33 = v32 + 1;
    if ((unint64_t)(v32 + 1) >> 60)
      sub_19C2A18E8();
    v34 = v28 - v31;
    if (v34 >> 3 > v33)
      v33 = v34 >> 3;
    if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0)
      v35 = 0xFFFFFFFFFFFFFFFLL;
    else
      v35 = v33;
    v36 = sub_19C387E3C((uint64_t **)(v24 + 48), v35);
    v37 = (float *)&v36[2 * v32];
    v38 = &v36[2 * v35];
    *(_QWORD *)v37 = v27;
    v37[2] = v20;
    *((_DWORD *)v37 + 3) = v21;
    v30 = v37 + 4;
    v40 = *(_QWORD **)(v24 + 24);
    v39 = *(_QWORD **)(v24 + 32);
    if (v39 != v40)
    {
      v41 = 0;
      do
      {
        v42 = &v37[v41 / 4];
        *((_QWORD *)v42 - 2) = v39[v41 / 8 - 2];
        *(v42 - 2) = *(float *)&v39[v41 / 8 - 1];
        *(v42 - 1) = *((float *)&v39[v41 / 8 - 1] + 1);
        v41 -= 16;
      }
      while (&v39[v41 / 8] != v40);
      v37 = (float *)((char *)v37 + v41);
      v39 = *(_QWORD **)(v24 + 24);
    }
    *(_QWORD *)(v24 + 24) = v37;
    *(_QWORD *)(v24 + 32) = v30;
    v43 = *(_QWORD *)(v24 + 40);
    *(_QWORD *)(v24 + 40) = v38;
    if (v39)
      sub_19C37E928((uint64_t **)(v24 + 48), v39, (v43 - (uint64_t)v39) >> 4);
  }
  else
  {
    *(_QWORD *)v29 = v27;
    *(float *)(v29 + 8) = v20;
    v30 = (_QWORD *)(v29 + 16);
    *(_DWORD *)(v29 + 12) = v21;
  }
  *(_QWORD *)(v24 + 32) = v30;
}

_QWORD *sub_19C387E3C(uint64_t **a1, unint64_t a2)
{
  uint64_t *v2;
  unint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t *v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;

  if (a2 == 2)
  {
    v9 = *a1;
    v11 = (unint64_t *)(*a1 + 2);
    v10 = *v11;
    v12 = (*a1)[3] - *v11;
    if (v12 <= 0x107)
    {
      v67 = 0;
      sub_19C37C8DC(v11, 33 - (v12 >> 3), (const double *)&v67);
      v10 = *v11;
    }
    v6 = *(_QWORD **)(v10 + 256);
    if (v6)
    {
      v7 = (_QWORD *)v6[7];
      if (v7)
      {
LABEL_12:
        v8 = v7[4];
        goto LABEL_53;
      }
    }
    else
    {
      v6 = (_QWORD *)operator new();
      sub_19C37EDB8(v6, *v9);
      *(_QWORD *)(*v11 + 256) = v6;
      v7 = (_QWORD *)v6[7];
      if (v7)
        goto LABEL_12;
    }
    v25 = v6[2];
    if (v25 > 0x9F)
    {
      v42 = v6[3];
      if (v42 + 40 <= v25)
      {
        v43 = *(_QWORD *)(v6[5] + 16);
      }
      else
      {
        v43 = operator new[]();
        v6[3] = 0;
        v44 = operator new(0x18uLL);
        v42 = 0;
        v44[2] = v43;
        *v44 = v6 + 4;
        v45 = (_QWORD *)v6[5];
        v44[1] = v45;
        *v45 = v44;
        v46 = v6[6] + 1;
        v6[5] = v44;
        v6[6] = v46;
      }
      v7 = (_QWORD *)(v43 + v42);
      v6[3] = v42 + 40;
      v7[4] = 0;
    }
    else
    {
      v7 = (_QWORD *)operator new[]();
      v26 = operator new(0x18uLL);
      v26[2] = v7;
      v28 = v6[4];
      v27 = v6 + 4;
      *v26 = v28;
      v26[1] = v27;
      *(_QWORD *)(v28 + 8) = v26;
      *v27 = v26;
      ++v27[2];
      v7[4] = 0;
    }
    return v7;
  }
  if (a2 == 1)
  {
    v2 = *a1;
    v4 = (unint64_t *)(*a1 + 2);
    v3 = *v4;
    v5 = (*a1)[3] - *v4;
    if (v5 <= 0x87)
    {
      v67 = 0;
      sub_19C37C8DC(v4, 17 - (v5 >> 3), (const double *)&v67);
      v3 = *v4;
    }
    v6 = *(_QWORD **)(v3 + 128);
    if (v6)
    {
      v7 = (_QWORD *)v6[7];
      if (v7)
      {
LABEL_7:
        v8 = v7[2];
        goto LABEL_53;
      }
    }
    else
    {
      v6 = (_QWORD *)operator new();
      sub_19C37ECDC(v6, *v2);
      *(_QWORD *)(*v4 + 128) = v6;
      v7 = (_QWORD *)v6[7];
      if (v7)
        goto LABEL_7;
    }
    v21 = v6[2];
    if (v21 > 0x5F)
    {
      v37 = v6[3];
      if (v37 + 24 <= v21)
      {
        v38 = *(_QWORD *)(v6[5] + 16);
      }
      else
      {
        v38 = operator new[]();
        v6[3] = 0;
        v39 = operator new(0x18uLL);
        v37 = 0;
        v39[2] = v38;
        *v39 = v6 + 4;
        v40 = (_QWORD *)v6[5];
        v39[1] = v40;
        *v40 = v39;
        v41 = v6[6] + 1;
        v6[5] = v39;
        v6[6] = v41;
      }
      v7 = (_QWORD *)(v38 + v37);
      v6[3] = v37 + 24;
      v7[2] = 0;
    }
    else
    {
      v7 = (_QWORD *)operator new[]();
      v22 = operator new(0x18uLL);
      v22[2] = v7;
      v24 = v6[4];
      v23 = v6 + 4;
      *v22 = v24;
      v22[1] = v23;
      *(_QWORD *)(v24 + 8) = v22;
      *v23 = v22;
      ++v23[2];
      v7[2] = 0;
    }
    return v7;
  }
  if (a2 <= 4)
  {
    v13 = *a1;
    v15 = (unint64_t *)(*a1 + 2);
    v14 = *v15;
    v16 = (*a1)[3] - *v15;
    if (v16 <= 0x207)
    {
      v67 = 0;
      sub_19C37C8DC(v15, 65 - (v16 >> 3), (const double *)&v67);
      v14 = *v15;
    }
    v6 = *(_QWORD **)(v14 + 512);
    if (v6)
    {
      v7 = (_QWORD *)v6[7];
      if (v7)
      {
LABEL_18:
        v8 = v7[8];
        goto LABEL_53;
      }
    }
    else
    {
      v6 = (_QWORD *)operator new();
      sub_19C37EE94(v6, *v13);
      *(_QWORD *)(*v15 + 512) = v6;
      v7 = (_QWORD *)v6[7];
      if (v7)
        goto LABEL_18;
    }
    v33 = v6[2];
    if (v33 > 0x11F)
    {
      v56 = v6[3];
      if (v56 + 72 <= v33)
      {
        v57 = *(_QWORD *)(v6[5] + 16);
      }
      else
      {
        v57 = operator new[]();
        v6[3] = 0;
        v58 = operator new(0x18uLL);
        v56 = 0;
        v58[2] = v57;
        *v58 = v6 + 4;
        v59 = (_QWORD *)v6[5];
        v58[1] = v59;
        *v59 = v58;
        v60 = v6[6] + 1;
        v6[5] = v58;
        v6[6] = v60;
      }
      v7 = (_QWORD *)(v57 + v56);
      v6[3] = v56 + 72;
      v7[8] = 0;
    }
    else
    {
      v7 = (_QWORD *)operator new[]();
      v34 = operator new(0x18uLL);
      v34[2] = v7;
      v36 = v6[4];
      v35 = v6 + 4;
      *v34 = v36;
      v34[1] = v35;
      *(_QWORD *)(v36 + 8) = v34;
      *v35 = v34;
      ++v35[2];
      v7[8] = 0;
    }
    return v7;
  }
  if (a2 <= 8)
  {
    v17 = *a1;
    v19 = (unint64_t *)(*a1 + 2);
    v18 = *v19;
    v20 = (*a1)[3] - *v19;
    if (v20 <= 0x407)
    {
      v67 = 0;
      sub_19C37C8DC(v19, 129 - (v20 >> 3), (const double *)&v67);
      v18 = *v19;
    }
    v6 = *(_QWORD **)(v18 + 1024);
    if (!v6)
    {
      v6 = (_QWORD *)operator new();
      sub_19C37EF70(v6, *v17);
      *(_QWORD *)(*v19 + 1024) = v6;
    }
    v7 = (_QWORD *)v6[7];
    if (!v7)
    {
      v52 = v6[2];
      if (v52 > 0x21F)
      {
        v62 = v6[3];
        if (v62 + 136 <= v52)
        {
          v63 = *(_QWORD *)(v6[5] + 16);
        }
        else
        {
          v63 = operator new[]();
          v6[3] = 0;
          v64 = operator new(0x18uLL);
          v62 = 0;
          v64[2] = v63;
          *v64 = v6 + 4;
          v65 = (_QWORD *)v6[5];
          v64[1] = v65;
          *v65 = v64;
          v66 = v6[6] + 1;
          v6[5] = v64;
          v6[6] = v66;
        }
        v7 = (_QWORD *)(v63 + v62);
        v6[3] = v62 + 136;
        v7[16] = 0;
      }
      else
      {
        v7 = (_QWORD *)operator new[]();
        v53 = operator new(0x18uLL);
        v53[2] = v7;
        v55 = v6[4];
        v54 = v6 + 4;
        *v53 = v55;
        v53[1] = v54;
        *(_QWORD *)(v55 + 8) = v53;
        *v54 = v53;
        ++v54[2];
        v7[16] = 0;
      }
      return v7;
    }
    v8 = v7[16];
    goto LABEL_53;
  }
  if (a2 <= 0x10)
  {
    v29 = *a1;
    v31 = (unint64_t *)(*a1 + 2);
    v30 = *v31;
    v32 = (*a1)[3] - *v31;
    if (v32 <= 0x807)
    {
      v67 = 0;
      sub_19C37C8DC(v31, 257 - (v32 >> 3), (const double *)&v67);
      v30 = *v31;
    }
    v6 = *(_QWORD **)(v30 + 2048);
    if (!v6)
    {
      v6 = (_QWORD *)operator new();
      sub_19C37F04C(v6, *v29);
      *(_QWORD *)(*v31 + 2048) = v6;
    }
    v7 = (_QWORD *)v6[7];
    if (!v7)
    {
      v7 = (_QWORD *)sub_19C383820(v6 + 1);
      v7[32] = 0;
      return v7;
    }
    v8 = v7[32];
LABEL_53:
    v6[7] = v8;
    return v7;
  }
  if (a2 <= 0x20)
  {
    v47 = *a1;
    v49 = (unint64_t *)(*a1 + 2);
    v48 = *v49;
    v50 = (*a1)[3] - *v49;
    if (v50 >> 3 <= 0x200)
    {
      v67 = 0;
      sub_19C37C8DC(v49, 513 - (v50 >> 3), (const double *)&v67);
      v48 = *v49;
    }
    v6 = *(_QWORD **)(v48 + 4096);
    if (!v6)
    {
      v6 = (_QWORD *)operator new();
      sub_19C37F128(v6, *v47);
      *(_QWORD *)(*v49 + 4096) = v6;
    }
    v7 = (_QWORD *)v6[7];
    if (!v7)
    {
      v7 = (_QWORD *)sub_19C383904(v6 + 1);
      v7[64] = 0;
      return v7;
    }
    v8 = v7[64];
    goto LABEL_53;
  }
  if (a2 <= 0x40)
  {
    v61 = sub_19C37F204(*a1);
    v7 = (_QWORD *)v61[7];
    if (v7)
    {
      v61[7] = v7[128];
    }
    else
    {
      v7 = (_QWORD *)sub_19C3885A8(v61 + 1);
      v7[128] = 0;
    }
    return v7;
  }
  if (a2 >> 60)
    sub_19C2A143C();
  return operator new(16 * a2);
}

void sub_19C388570(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD355C](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

uint64_t sub_19C3885A8(_QWORD *a1)
{
  _QWORD *v1;
  unint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;

  v1 = a1;
  v2 = a1[1];
  if (v2 >> 5 > 0x80)
  {
    v7 = v1[2];
    if (v7 + 1032 <= v2)
    {
      v8 = *(_QWORD *)(v1[4] + 16);
    }
    else
    {
      v8 = operator new[]();
      v1[2] = 0;
      v9 = operator new(0x18uLL);
      v7 = 0;
      v10 = (_QWORD *)v1[4];
      v11 = v1[5];
      *v9 = v1 + 3;
      v9[1] = v10;
      v9[2] = v8;
      *v10 = v9;
      v1[4] = v9;
      v1[5] = v11 + 1;
    }
    v3 = v8 + v7;
    v6 = v7 + 1032;
  }
  else
  {
    v3 = operator new[]();
    v4 = operator new(0x18uLL);
    v5 = v1[3];
    v1 += 3;
    v4[1] = v1;
    v4[2] = v3;
    *v4 = v5;
    *(_QWORD *)(v5 + 8) = v4;
    *v1 = v4;
    v6 = v1[2] + 1;
  }
  v1[2] = v6;
  return v3;
}

uint64_t sub_19C388690(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  _BYTE *v45;
  uint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  _OWORD *v49;
  uint64_t *v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  unint64_t v56;
  void *v57;
  unint64_t v58;
  char v59;
  __int128 v60;
  void *v61;
  size_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t (*v67)(uint64_t);
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v75;
  uint64_t v76;
  void **__dst;
  int v79;
  uint64_t v80;
  char v81;

  v2 = a1;
  *(_DWORD *)(a1 + 16) = 1819047278;
  __dst = (void **)(a1 + 16);
  *(_BYTE *)(a1 + 39) = 4;
  *(_BYTE *)(a1 + 20) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(_QWORD *)a1 = off_1E3D37D80;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 60) = 0;
  *(_DWORD *)(a1 + 64) = -1;
  v75 = (_QWORD *)(a1 + 72);
  *(_OWORD *)(a1 + 68) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  *(_DWORD *)(a1 + 100) = -1;
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  v3 = operator new();
  v4 = *(_BYTE *)(v2 + 104);
  v5 = *(_QWORD *)(v2 + 112);
  sub_19C388F60(v3, v4);
  *(_BYTE *)(v3 + 88) = v5 == 0;
  *(_DWORD *)(v3 + 92) = -1;
  *(_BYTE *)(v3 + 104) = v4;
  *(_QWORD *)(v3 + 96) = 0;
  v6 = 8096;
  if (v5 > 0x1FA0)
    v6 = v5;
  *(_QWORD *)(v3 + 112) = v6;
  *(_BYTE *)(v3 + 120) = 0;
  *(_QWORD *)(v3 + 128) = 0;
  *(_QWORD *)(v2 + 120) = v3;
  v7 = a2;
  *(_BYTE *)(v2 + 128) = *(_BYTE *)(a2 + 128);
  v8 = *(_QWORD *)(a2 + 120);
  if (v3 == v8)
    goto LABEL_55;
  sub_19C37C140(v3);
  v76 = v2;
  v9 = *(_QWORD *)(v8 + 16) - *(_QWORD *)(v8 + 8);
  v10 = v9 >> 3;
  v11 = *(_BYTE **)(v3 + 8);
  if (v9 >> 3 > (unint64_t)((uint64_t)(*(_QWORD *)(v3 + 24) - (_QWORD)v11) >> 3))
  {
    if (v9 < 0)
LABEL_86:
      sub_19C2A18E8();
    v12 = *(_BYTE **)(v3 + 16);
    v13 = (char *)operator new(v9);
    v14 = v12 - v11;
    v15 = &v13[(v12 - v11) & 0xFFFFFFFFFFFFFFF8];
    v16 = v15;
    if (v12 == v11)
      goto LABEL_14;
    v17 = v12 - v11 - 8;
    if (v17 >= 0x58)
    {
      v16 = &v13[(v12 - v11) & 0xFFFFFFFFFFFFFFF8];
      if ((unint64_t)(&v12[-(v14 & 0xFFFFFFFFFFFFFFF8)] - v13) >= 0x20)
      {
        v18 = v14 >> 3;
        v19 = (v17 >> 3) + 1;
        v20 = &v13[8 * v18 - 16];
        v21 = (__int128 *)(v12 - 16);
        v22 = v19 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v23 = *v21;
          *((_OWORD *)v20 - 1) = *(v21 - 1);
          *(_OWORD *)v20 = v23;
          v20 -= 32;
          v21 -= 2;
          v22 -= 4;
        }
        while (v22);
        v16 = &v15[-8 * (v19 & 0x3FFFFFFFFFFFFFFCLL)];
        v12 -= 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
        if (v19 == (v19 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_14:
          *(_QWORD *)(v3 + 8) = v16;
          *(_QWORD *)(v3 + 16) = v15;
          *(_QWORD *)(v3 + 24) = &v13[8 * v10];
          if (v11)
            operator delete(v11);
          goto LABEL_16;
        }
      }
    }
    else
    {
      v16 = &v13[(v12 - v11) & 0xFFFFFFFFFFFFFFF8];
    }
    do
    {
      v24 = *((_QWORD *)v12 - 1);
      v12 -= 8;
      *((_QWORD *)v16 - 1) = v24;
      v16 -= 8;
    }
    while (v12 != v11);
    goto LABEL_14;
  }
LABEL_16:
  v79 = 0;
  v25 = *(_QWORD *)(v8 + 8);
  if (*(_QWORD *)(v8 + 16) != v25)
  {
    v26 = 0;
    do
    {
      v28 = *(_QWORD *)(v25 + 8 * v26);
      if (v28)
      {
        v29 = sub_19C3875F0((uint64_t **)(v3 + 72));
        *(_DWORD *)v29 = *(_DWORD *)v28;
        *(_OWORD *)(v29 + 8) = *(_OWORD *)(v28 + 8);
        v30 = *(_QWORD *)(v28 + 24);
        v31 = *(_QWORD *)(v28 + 32);
        *(_QWORD *)(v29 + 40) = 0;
        *(_QWORD *)(v29 + 32) = 0;
        *(_QWORD *)(v29 + 24) = 0;
        v32 = *(_QWORD *)(v3 + 80);
        *(_QWORD *)(v29 + 48) = v32;
        ++*(_QWORD *)(v32 + 8);
        v80 = v29 + 24;
        v81 = 0;
        v33 = v31 - v30;
        if (v31 != v30)
        {
          if (v33 < 0)
            sub_19C2A18E8();
          v34 = v33 >> 4;
          v35 = sub_19C387E3C((uint64_t **)(v29 + 48), v33 >> 4);
          *(_QWORD *)(v29 + 24) = v35;
          *(_QWORD *)(v29 + 32) = v35;
          *(_QWORD *)(v29 + 40) = &v35[2 * v34];
          do
          {
            *v35 = *(_QWORD *)v30;
            *((_DWORD *)v35 + 2) = *(_DWORD *)(v30 + 8);
            *((_DWORD *)v35 + 3) = *(_DWORD *)(v30 + 12);
            v35 += 2;
            v30 += 16;
          }
          while (v30 != v31);
          *(_QWORD *)(v29 + 32) = v35;
        }
        *(_DWORD *)(v29 + 56) = *(_DWORD *)(v28 + 56);
        *(_DWORD *)(v29 + 60) = 0;
        if (*(_BYTE *)v3)
        {
          v36 = (_QWORD *)sub_19C38778C(*(uint64_t **)(v3 + 56), &v79);
          v36[1] = v3 + 32;
          v37 = *(_QWORD *)(v3 + 32);
          *v36 = v37;
          *(_QWORD *)(v37 + 8) = v36;
          *(_QWORD *)(v3 + 32) = v36;
          ++*(_QWORD *)(v3 + 48);
        }
      }
      else
      {
        v29 = 0;
      }
      v39 = *(uint64_t **)(v3 + 16);
      v38 = *(_QWORD *)(v3 + 24);
      if ((unint64_t)v39 < v38)
      {
        *v39 = v29;
        v27 = v39 + 1;
      }
      else
      {
        v40 = *(uint64_t **)(v3 + 8);
        v41 = v39 - v40;
        v42 = v41 + 1;
        if ((unint64_t)(v41 + 1) >> 61)
          goto LABEL_86;
        v43 = v38 - (_QWORD)v40;
        if (v43 >> 2 > v42)
          v42 = v43 >> 2;
        if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF8)
          v44 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v44 = v42;
        if (v44)
        {
          if (v44 >> 61)
            sub_19C2A143C();
          v45 = operator new(8 * v44);
        }
        else
        {
          v45 = 0;
        }
        v46 = (uint64_t *)&v45[8 * v41];
        *v46 = v29;
        v27 = v46 + 1;
        if (v39 == v40)
        {
          v40 = v39;
        }
        else
        {
          v47 = (char *)(v39 - 1) - (char *)v40;
          if (v47 < 0x58)
            goto LABEL_92;
          if ((unint64_t)((char *)v40 - v45) < 0x20)
            goto LABEL_92;
          v48 = (v47 >> 3) + 1;
          v49 = &v45[8 * v41 - 16];
          v50 = v39 - 2;
          v51 = v48 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v52 = *(_OWORD *)v50;
            *(v49 - 1) = *((_OWORD *)v50 - 1);
            *v49 = v52;
            v49 -= 2;
            v50 -= 4;
            v51 -= 4;
          }
          while (v51);
          v46 -= v48 & 0x3FFFFFFFFFFFFFFCLL;
          v39 -= v48 & 0x3FFFFFFFFFFFFFFCLL;
          if (v48 != (v48 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_92:
            do
            {
              v53 = *--v39;
              *--v46 = v53;
            }
            while (v39 != v40);
            v40 = *(uint64_t **)(v3 + 8);
          }
        }
        *(_QWORD *)(v3 + 8) = v46;
        *(_QWORD *)(v3 + 16) = v27;
        *(_QWORD *)(v3 + 24) = &v45[8 * v44];
        if (v40)
          operator delete(v40);
      }
      *(_QWORD *)(v3 + 16) = v27;
      v79 = ++v26;
      v25 = *(_QWORD *)(v8 + 8);
    }
    while (v26 < (*(_QWORD *)(v8 + 16) - v25) >> 3);
  }
  *(_QWORD *)(v3 + 64) = *(_QWORD *)(v3 + 40);
  *(_BYTE *)(v3 + 88) = *(_BYTE *)(v8 + 88);
  *(_DWORD *)(v3 + 92) = *(_DWORD *)(v8 + 92);
  if (*(_DWORD *)(v8 + 92) == -1)
  {
    v54 = 0;
    v2 = v76;
  }
  else
  {
    v2 = v76;
    v54 = sub_19C387300(v3, 0);
  }
  *(_QWORD *)(v3 + 96) = v54;
  v7 = a2;
LABEL_55:
  v55 = *(_OWORD *)(v8 + 120);
  *(_OWORD *)(v3 + 104) = *(_OWORD *)(v8 + 104);
  *(_OWORD *)(v3 + 120) = v55;
  *(_BYTE *)(v2 + 60) = *(_BYTE *)(v7 + 60);
  *(_QWORD *)(v2 + 64) = *(_QWORD *)(v7 + 64);
  if (v2 == v7)
  {
    *(_QWORD *)(v2 + 96) = *(_QWORD *)(v7 + 96);
    *(_QWORD *)v2 = off_1E3D38320;
  }
  else
  {
    v56 = *(_QWORD *)(v7 + 80);
    if (v56)
    {
      v57 = *(void **)(v2 + 72);
      if (v56 > *(_QWORD *)(v2 + 88) << 6)
      {
        if (v57)
        {
          operator delete(v57);
          *v75 = 0;
          v75[1] = 0;
          v75[2] = 0;
          v56 = *(_QWORD *)(v7 + 80);
        }
        if ((v56 & 0x8000000000000000) != 0)
          sub_19C2A18E8();
        v58 = ((v56 - 1) >> 6) + 1;
        v57 = operator new(8 * v58);
        *(_QWORD *)(v2 + 72) = v57;
        *(_QWORD *)(v2 + 80) = 0;
        *(_QWORD *)(v2 + 88) = v58;
        v7 = a2;
        v56 = *(_QWORD *)(a2 + 80);
      }
      memmove(v57, *(const void **)(v7 + 72), (((v56 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8) + 8);
      v56 = *(_QWORD *)(v7 + 80);
    }
    *(_QWORD *)(v2 + 80) = v56;
    *(_QWORD *)(v2 + 96) = *(_QWORD *)(v7 + 96);
    *(_QWORD *)v2 = off_1E3D38320;
    v59 = *(_BYTE *)(v7 + 39);
    if (*(char *)(v2 + 39) < 0)
    {
      if (v59 >= 0)
        v61 = (void *)(v7 + 16);
      else
        v61 = *(void **)(v7 + 16);
      if (v59 >= 0)
        v62 = *(unsigned __int8 *)(v7 + 39);
      else
        v62 = *(_QWORD *)(v7 + 24);
      sub_19C2E54A8(__dst, v61, v62);
    }
    else if ((*(_BYTE *)(v7 + 39) & 0x80) != 0)
    {
      sub_19C2E53E4(__dst, *(void **)(v7 + 16), *(_QWORD *)(v7 + 24));
    }
    else
    {
      v60 = *(_OWORD *)(v7 + 16);
      __dst[2] = *(void **)(v7 + 32);
      *(_OWORD *)__dst = v60;
    }
  }
  *(_QWORD *)(v2 + 8) = *(_QWORD *)(v2 + 8) & 0xFFFFC0000000FFFFLL | (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7) & 0x3FFFFFFF0004;
  v63 = v2;
  v64 = *(_QWORD *)(v7 + 40);
  v65 = v63;
  v66 = *(_QWORD *)(v63 + 40);
  if (v66)
    (*(void (**)(uint64_t))(*(_QWORD *)v66 + 8))(v66);
  if (v64)
  {
    v67 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v64 + 16);
    v68 = v64;
    v69 = v65;
    v70 = v67(v68);
  }
  else
  {
    v70 = 0;
    v69 = v65;
  }
  *(_QWORD *)(v69 + 40) = v70;
  v71 = *(_QWORD *)(v7 + 48);
  v72 = *(_QWORD *)(v69 + 48);
  if (v72)
    (*(void (**)(uint64_t))(*(_QWORD *)v72 + 8))(v72);
  if (v71)
    v73 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v71 + 16))(v71);
  else
    v73 = 0;
  *(_QWORD *)(v69 + 48) = v73;
  return v69;
}

void sub_19C388D60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  MEMORY[0x1A1AD355C](v10, 0x10A0C40690396FALL);
  if (*a9)
    operator delete(*a9);
  sub_19C38909C(v9);
  _Unwind_Resume(a1);
}

uint64_t *sub_19C388DE0(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE *v7;
  int64_t v8;
  char *v9;
  size_t v10;
  uint64_t *i;

  if (*a2)
    v4 = operator new();
  else
    v4 = 0;
  *a1 = v4;
  if (a2[1])
    v5 = operator new();
  else
    v5 = 0;
  a1[1] = v5;
  a1[2] = (uint64_t)a1;
  a1[3] = (uint64_t)a1;
  sub_19C37BE6C((uint64_t)(a1 + 4), a2[9], a1 + 2, a1 + 3);
  a1[13] = 0;
  a1[14] = 0;
  a1[15] = 0;
  v7 = (_BYTE *)a2[13];
  v6 = (_BYTE *)a2[14];
  v8 = v6 - v7;
  if (v6 != v7)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v8 >> 2) >= 0x1555555555555556)
      sub_19C2A18E8();
    v9 = (char *)operator new(v8);
    a1[13] = (uint64_t)v9;
    a1[14] = (uint64_t)v9;
    a1[15] = (uint64_t)&v9[4 * (v8 >> 2)];
    v10 = 12 * ((v8 - 12) / 0xCuLL) + 12;
    memcpy(v9, v7, v10);
    a1[14] = (uint64_t)&v9[v10];
  }
  for (i = (uint64_t *)a2[7]; i; i = (uint64_t *)*i)
    sub_19C3856B4((uint64_t)(a1 + 4), *((_DWORD *)i + 4), (_DWORD *)i + 4);
  return a1;
}

void sub_19C388F38(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  void *v5;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 112) = v5;
    operator delete(v5);
  }
  sub_19C380BB4(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_19C388F60(uint64_t a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)a1 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = a1 + 32;
  *(_QWORD *)(a1 + 40) = a1 + 32;
  *(_QWORD *)(a1 + 48) = 0;
  v3 = operator new();
  *(_OWORD *)v3 = xmmword_19C46DEE0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_QWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(a1 + 56) = v3;
  *(_QWORD *)(a1 + 64) = 0;
  v4 = operator new();
  *(_OWORD *)v4 = xmmword_19C46DEE0;
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(a1 + 72) = v4;
  v5 = operator new();
  *(_OWORD *)v5 = xmmword_19C46DEE0;
  *(_QWORD *)(v5 + 24) = 0;
  *(_QWORD *)(v5 + 32) = 0;
  *(_QWORD *)(v5 + 16) = 0;
  *(_QWORD *)(a1 + 80) = v5;
  sub_19C37C140(a1);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a1 + 40);
  return a1;
}

void sub_19C38904C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t **v2;
  uint64_t *v3;
  void **v4;
  uint64_t *v5;
  void *v7;

  v5 = v3;
  sub_19C387AD4(v5);
  sub_19C387AD4((uint64_t *)(v1 + 72));
  sub_19C37C208(v2);
  v7 = *v4;
  if (*v4)
  {
    *(_QWORD *)(v1 + 16) = v7;
    operator delete(v7);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_19C38909C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_1E3D383E0;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)(a1 + 48);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

uint64_t sub_19C389100(uint64_t a1)
{
  _QWORD **v2;
  _QWORD *v3;

  if (!*(_BYTE *)(a1 + 8))
  {
    v2 = *(_QWORD ***)a1;
    v3 = **(_QWORD ***)a1;
    if (v3)
    {
      v2[1] = v3;
      sub_19C37E928(v2 + 3, v3, ((char *)v2[2] - (char *)v3) >> 4);
    }
  }
  return a1;
}

uint64_t sub_19C389150(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  _BYTE *v5;
  unint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD **)(a1 + 8);
  v3 = v2[1] - 1;
  v2[1] = v3;
  if (!v3)
  {
    v4 = (_QWORD *)v2[2];
    v5 = (_BYTE *)v2[3];
    if (v5 == (_BYTE *)v4)
    {
      v4 = (_QWORD *)v2[3];
    }
    else
    {
      v6 = 0;
      do
      {
        v7 = v4[v6];
        if (v7)
        {
          (*(void (**)(_QWORD))(*(_QWORD *)v7 + 8))(v4[v6]);
          v4 = (_QWORD *)v2[2];
          v5 = (_BYTE *)v2[3];
        }
        ++v6;
      }
      while (v6 < (v5 - (_BYTE *)v4) >> 3);
    }
    if (v4)
    {
      v2[3] = v4;
      operator delete(v4);
    }
    MEMORY[0x1A1AD355C](v2, 0x1080C40B69A5871);
  }
  return a1;
}

uint64_t sub_19C3891F8(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)a1 = &off_1E3D37EF8;
  v2 = *(_QWORD *)(a1 + 136);
  if (v2)
  {
    v3 = *(_QWORD **)v2;
    if (*(_QWORD *)v2)
    {
      if (*v3)
        (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 8))(*v3);
      MEMORY[0x1A1AD355C](v3, 0x20C4093837F09);
    }
    v4 = *(_QWORD **)(v2 + 8);
    if (v4)
    {
      if (*v4)
        (*(void (**)(_QWORD))(*(_QWORD *)*v4 + 8))(*v4);
      MEMORY[0x1A1AD355C](v4, 0x20C4093837F09);
    }
    MEMORY[0x1A1AD355C](v2, 0x1060C4035244DBALL);
  }
  v5 = *(_QWORD **)(a1 + 176);
  if (v5)
  {
    if (*v5)
      MEMORY[0x1A1AD355C](*v5, 0xC400A2AC0F1);
    v6 = v5[1];
    if (v6)
      MEMORY[0x1A1AD355C](v6, 0xC400A2AC0F1);
    v7 = (void *)v5[13];
    if (v7)
    {
      v5[14] = v7;
      operator delete(v7);
    }
    sub_19C380BB4((uint64_t)(v5 + 4));
    MEMORY[0x1A1AD355C](v5, 0x10E0C401DE81863);
  }
  *(_QWORD *)a1 = off_1E3D37D80;
  v8 = *(_QWORD *)(a1 + 120);
  if (v8)
  {
    v9 = sub_19C37BFF8(v8);
    MEMORY[0x1A1AD355C](v9, 0x10A0C40690396FALL);
  }
  v10 = *(void **)(a1 + 72);
  if (v10)
    operator delete(v10);
  *(_QWORD *)a1 = off_1E3D383E0;
  v11 = *(_QWORD *)(a1 + 40);
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *(_QWORD *)(a1 + 48);
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

uint64_t sub_19C3893A0()
{
  return 0;
}

void sub_19C3893AC(uint64_t a1)
{
  sub_19C38AD48(a1);
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C3893D0(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, 0x3FFFFFFF0007);
}

uint64_t sub_19C3893E4(uint64_t a1, uint64_t a2)
{
  if ((a2 & 4) != 0
    && ((*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 160) + 56))(*(_QWORD *)(a1 + 160), 4, 0)|| (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 168) + 56))(*(_QWORD *)(a1 + 168), 4, 0)|| ((*(uint64_t (**)(_QWORD, _QWORD))(***(_QWORD ***)(a1 + 144) + 40))(**(_QWORD **)(a1 + 144), 0) & 4) != 0|| ((*(uint64_t (**)(_QWORD, _QWORD))(***(_QWORD ***)(a1 + 152) + 40))(**(_QWORD **)(a1 + 152), 0) & 4) != 0))
  {
    *(_QWORD *)(a1 + 8) |= 4uLL;
  }
  return *(_QWORD *)(a1 + 8) & a2;
}

uint64_t sub_19C38948C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  __int128 v10;
  uint64_t *v11;

  v2 = operator new();
  sub_19C388690(v2, a1);
  *(_QWORD *)v2 = &off_1E3D38058;
  v3 = operator new();
  v4 = *(_QWORD *)(a1 + 136);
  v5 = *(_QWORD **)v4;
  v6 = (_QWORD *)operator new();
  *v6 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 16))(*v5, 1);
  *(_QWORD *)v3 = v6;
  v7 = *(_QWORD **)(v4 + 8);
  v8 = (_QWORD *)operator new();
  v9 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v7 + 16))(*v7, 1);
  *v8 = v9;
  *(_QWORD *)(v3 + 8) = v8;
  *(_QWORD *)(v3 + 16) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 32))(v9);
  *(_QWORD *)(v3 + 24) = -1;
  *(_BYTE *)(v3 + 32) = -1;
  *(_QWORD *)(v2 + 136) = v3;
  v10 = *(_OWORD *)v3;
  *(_OWORD *)(v2 + 144) = *(_OWORD *)v3;
  *(_QWORD *)(v2 + 160) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v10 + 32))(*(_QWORD *)v10);
  *(_QWORD *)(v2 + 168) = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(v2 + 152) + 32))(**(_QWORD **)(v2 + 152));
  v11 = (uint64_t *)operator new();
  sub_19C388DE0(v11, *(_QWORD **)(a1 + 176));
  *(_QWORD *)(v2 + 176) = v11;
  *(_DWORD *)(v2 + 184) = *(_DWORD *)(a1 + 184);
  return v2;
}

void sub_19C389608(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  MEMORY[0x1A1AD355C](v2, 0x10E0C401DE81863);
  sub_19C37BDD0(v1);
  MEMORY[0x1A1AD355C](v1, 0x10F3C405A371F01);
  _Unwind_Resume(a1);
}

void sub_19C38969C(uint64_t a1, int a2, __n128 a3)
{
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v13;
  int v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _BOOL4 v26;
  uint64_t v27;
  void *__p[2];
  char v29;

  v5 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 176) + 104) + 12 * a2);
  v6 = *v5;
  v7 = v5[1];
  v8 = *(_QWORD *)(a1 + 136);
  v9 = *((unsigned __int8 *)v5 + 8);
  if (*(_QWORD *)(v8 + 24) != __PAIR64__(v7, v6) || v9 != *(unsigned __int8 *)(v8 + 32))
  {
    *(_DWORD *)(v8 + 24) = v6;
    *(_DWORD *)(v8 + 28) = v7;
    *(_BYTE *)(v8 + 32) = v9;
    v10 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v8 + 16) + 32))(*(_QWORD *)(v8 + 16), v7);
    v11 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v8 + 16) + 40))(*(_QWORD *)(v8 + 16), v7);
    (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(v8 + 16) + 24))(&v27, *(_QWORD *)(v8 + 16), v7);
    LODWORD(__p[0]) = v27;
    HIDWORD(v27) = 2139095039;
    a3.n128_u32[0] = v27;
    v13 = *(float *)&v27 == 3.4028e38 && v10 == v11;
    *(_BYTE *)(v8 + 33) = v13;
    *(_BYTE *)(v8 + 34) = v11 == 0;
  }
  v14 = *(_DWORD *)(a1 + 184);
  if (!v14)
    goto LABEL_26;
  if (v14 != 1)
  {
    v22 = (*(uint64_t (**)(_QWORD, uint64_t, __n128))(***(_QWORD ***)(a1 + 144) + 104))(**(_QWORD **)(a1 + 144), v6, a3);
    v23 = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 152) + 104))(**(_QWORD **)(a1 + 152), v7);
    if (v22 == -1 && v23 == -1)
    {
      v29 = 5;
      strcpy((char *)__p, "FATAL");
      v24 = sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)__p, 5);
      sub_19C2A1B24(v24, (uint64_t)": ", 2);
      sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)"ComposeFst: both sides can't require match", 42);
      sub_19C351928();
      if (v29 < 0)
        operator delete(__p[0]);
      *(_QWORD *)(a1 + 8) |= 4uLL;
    }
    else
    {
      v26 = v23 == -1 || v22 <= v23;
      if (v22 == -1 || !v26)
        goto LABEL_12;
    }
LABEL_26:
    v16 = *(_QWORD **)(a1 + 152);
    v15 = *(_QWORD *)(a1 + 160);
    v17 = a1;
    v18 = a2;
    v19 = v7;
    v20 = v6;
    v21 = 1;
    goto LABEL_27;
  }
LABEL_12:
  v15 = *(_QWORD *)(a1 + 168);
  v16 = *(_QWORD **)(a1 + 144);
  v17 = a1;
  v18 = a2;
  v19 = v6;
  v20 = v7;
  v21 = 0;
LABEL_27:
  sub_19C38A6BC(v17, v18, v19, v15, v20, v16, v21);
}

void sub_19C3898CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  sub_19C351928();
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_19C3898F4(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;

  if ((*(unsigned int (**)(_QWORD, _QWORD))(***(_QWORD ***)(a1 + 144) + 24))(**(_QWORD **)(a1 + 144), 0) != a3
    || (*(unsigned int (**)(_QWORD, _QWORD))(***(_QWORD ***)(a1 + 152) + 24))(**(_QWORD **)(a1 + 152), 0) != a3)
  {
    return 0;
  }
  v6 = operator new();
  *(_QWORD *)v6 = &off_1E3D38230;
  *(_QWORD *)(v6 + 8) = a2;
  *(_QWORD *)(v6 + 16) = a1;
  *(_DWORD *)(v6 + 24) = -1;
  *(_DWORD *)(v6 + 28) = a3;
  v7 = *(_QWORD **)(a1 + 144);
  v8 = (_QWORD *)operator new();
  *v8 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v7 + 16))(*v7, 0);
  *(_QWORD *)(v6 + 32) = v8;
  v9 = *(_QWORD **)(a1 + 152);
  v10 = (_QWORD *)operator new();
  *v10 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v9 + 16))(*v9, 0);
  *(_QWORD *)(v6 + 40) = v10;
  *(_BYTE *)(v6 + 48) = 0;
  *(_QWORD *)(v6 + 52) = 0xFFFFFFFFLL;
  *(_QWORD *)(v6 + 60) = 0xFFFFFFFF00000000;
  *(_BYTE *)(v6 + 84) = 0;
  if (a3 == 1)
    *(_QWORD *)(v6 + 52) = 0xFFFFFFFF00000000;
  return v6;
}

void sub_19C389A48(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  MEMORY[0x1A1AD355C](v2, 0x20C4093837F09);
  MEMORY[0x1A1AD355C](v1, 0x10E1C40868C5753);
  _Unwind_Resume(a1);
}

uint64_t sub_19C389A90(_QWORD **a1)
{
  uint64_t result;
  unsigned int v3;
  unint64_t v4;
  char v5;

  result = (*(uint64_t (**)(_QWORD *))(*a1[20] + 16))(a1[20]);
  if ((_DWORD)result != -1)
  {
    v3 = result;
    result = (*(uint64_t (**)(_QWORD *))(*a1[21] + 16))(a1[21]);
    if ((_DWORD)result != -1)
    {
      v4 = __PAIR64__(result, v3);
      v5 = 0;
      return sub_19C385428(a1[22], (uint64_t *)&v4);
    }
  }
  return result;
}

void sub_19C389AFC(uint64_t a1@<X0>, int a2@<W1>, float *a3@<X8>)
{
  uint64_t v6;
  unsigned int *v7;
  int v8;
  float v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v17;
  float v18;
  unsigned __int8 v19;
  float v20;
  unsigned __int8 v21;
  BOOL v22;
  int v23;
  int v24;
  float v25;
  float v26;
  uint64_t v27;
  uint64_t v28;
  int v29;

  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 176) + 104);
  v7 = (unsigned int *)(v6 + 12 * a2);
  v8 = *v7;
  (*(void (**)(char *__return_ptr, _QWORD, _QWORD))(***(_QWORD ***)(a1 + 144) + 96))((char *)&v27 + 4, **(_QWORD **)(a1 + 144), *v7);
  v9 = *((float *)&v27 + 1);
  v29 = HIDWORD(v27);
  HIDWORD(v28) = 2139095039;
  if (*((float *)&v27 + 1) != 3.4028e38)
  {
    v10 = v7[1];
    (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(***(_QWORD ***)(a1 + 152) + 96))(&v27, **(_QWORD **)(a1 + 152), v10);
    v9 = *(float *)&v27;
    v29 = v27;
    HIDWORD(v28) = 2139095039;
    if (*(float *)&v27 != 3.4028e38)
    {
      v11 = a2;
      v12 = *(_QWORD *)(a1 + 136);
      v13 = *(unsigned __int8 *)(v6 + 12 * v11 + 8);
      if (*(_DWORD *)(v12 + 24) != v8 || *(_DWORD *)(v12 + 28) != (_DWORD)v10 || v13 != *(unsigned __int8 *)(v12 + 32))
      {
        *(_DWORD *)(v12 + 24) = v8;
        *(_DWORD *)(v12 + 28) = v10;
        *(_BYTE *)(v12 + 32) = v13;
        v14 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v12 + 16) + 32))(*(_QWORD *)(v12 + 16), v10);
        v15 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v12 + 16) + 40))(*(_QWORD *)(v12 + 16), v10);
        (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(v12 + 16) + 24))(&v28, *(_QWORD *)(v12 + 16), v10);
        v29 = v28;
        HIDWORD(v28) = 2139095039;
        v17 = *(float *)&v28 == 3.4028e38 && v14 == v15;
        *(_BYTE *)(v12 + 33) = v17;
        *(_BYTE *)(v12 + 34) = v15 == 0;
      }
      v18 = *((float *)&v27 + 1);
      v19 = atomic_load((unsigned __int8 *)&qword_1EDB96FE8);
      if ((v19 & 1) == 0)
      {
        v25 = *((float *)&v27 + 1);
        v23 = __cxa_guard_acquire(&qword_1EDB96FE8);
        v18 = v25;
        if (v23)
        {
          dword_1EDB96FF0 = -8388609;
          __cxa_guard_release(&qword_1EDB96FE8);
          v18 = v25;
        }
      }
      if (v18 == *(float *)&dword_1EDB96FF0)
        goto LABEL_23;
      v20 = *(float *)&v27;
      v21 = atomic_load((unsigned __int8 *)&qword_1EDB96FE8);
      if ((v21 & 1) == 0)
      {
        v26 = *(float *)&v27;
        v24 = __cxa_guard_acquire(&qword_1EDB96FE8);
        v20 = v26;
        if (v24)
        {
          dword_1EDB96FF0 = -8388609;
          __cxa_guard_release(&qword_1EDB96FE8);
          v20 = v26;
        }
      }
      if (v20 == *(float *)&dword_1EDB96FF0)
      {
LABEL_23:
        v9 = NAN;
      }
      else
      {
        v22 = *(float *)&v27 == 3.4028e38 || *((float *)&v27 + 1) == 3.4028e38;
        v9 = *(float *)&v27 + *((float *)&v27 + 1);
        if (v22)
          v9 = 3.4028e38;
      }
    }
  }
  *a3 = v9;
}

_QWORD *sub_19C389D70(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  *a1 = &off_1E3D38230;
  v2 = (_QWORD *)a1[4];
  if (v2)
  {
    if (*v2)
      (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 8))(*v2);
    MEMORY[0x1A1AD355C](v2, 0x20C4093837F09);
  }
  v3 = (_QWORD *)a1[5];
  if (v3)
  {
    if (*v3)
      (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 8))(*v3);
    MEMORY[0x1A1AD355C](v3, 0x20C4093837F09);
  }
  return a1;
}

void sub_19C389E04(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  *a1 = &off_1E3D38230;
  v2 = (_QWORD *)a1[4];
  if (v2)
  {
    if (*v2)
      (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 8))(*v2);
    MEMORY[0x1A1AD355C](v2, 0x20C4093837F09);
  }
  v3 = (_QWORD *)a1[5];
  if (v3)
  {
    if (*v3)
      (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 8))(*v3);
    MEMORY[0x1A1AD355C](v3, 0x20C4093837F09);
  }
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C389EA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  void *__p[2];
  char v13;

  v4 = operator new();
  *(_QWORD *)v4 = &off_1E3D38230;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  v5 = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(v4 + 24) = -1;
  *(_DWORD *)(v4 + 28) = v5;
  v6 = *(_QWORD **)(a1 + 32);
  v7 = (_QWORD *)operator new();
  *v7 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v6 + 16))(*v6, a2);
  *(_QWORD *)(v4 + 32) = v7;
  v8 = *(_QWORD **)(a1 + 40);
  v9 = (_QWORD *)operator new();
  *v9 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v8 + 16))(*v8, a2);
  *(_QWORD *)(v4 + 40) = v9;
  *(_BYTE *)(v4 + 48) = 0;
  *(_QWORD *)(v4 + 52) = 0xFFFFFFFFLL;
  *(_QWORD *)(v4 + 60) = 0xFFFFFFFF00000000;
  *(_BYTE *)(v4 + 84) = *(_BYTE *)(a1 + 84);
  if ((_DWORD)a2)
  {
    v13 = 5;
    strcpy((char *)__p, "FATAL");
    v10 = sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)__p, 5);
    sub_19C2A1B24(v10, (uint64_t)": ", 2);
    sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)"ComposeFstMatcher: safe copy not supported", 42);
    sub_19C351928();
    if (v13 < 0)
      operator delete(__p[0]);
    *(_BYTE *)(v4 + 84) = 1;
  }
  if (v5 == 1)
    *(_QWORD *)(v4 + 52) = 0xFFFFFFFF00000000;
  return v4;
}

void sub_19C38A03C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  sub_19C351928();
  if (a15 < 0)
    operator delete(__p);
  MEMORY[0x1A1AD355C](v15, 0x10E1C40868C5753);
  _Unwind_Resume(a1);
}

uint64_t sub_19C38A0A8(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 32) + 24))(**(_QWORD **)(a1 + 32));
  if ((_DWORD)result != 3)
  {
    result = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 40) + 24))(**(_QWORD **)(a1 + 40), a2);
    if ((_DWORD)result != 3)
    {
      if ((*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 32) + 24))(**(_QWORD **)(a1 + 32), a2) != 4|| (result = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 40) + 24))(**(_QWORD **)(a1 + 40), a2), (_DWORD)result != 4))
      {
        if ((*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 32) + 24))(**(_QWORD **)(a1 + 32), a2) == 4&& (*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 40) + 24))(**(_QWORD **)(a1 + 40), a2) == *(_DWORD *)(a1 + 28))
        {
          return 4;
        }
        else if ((*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 32) + 24))(**(_QWORD **)(a1 + 32), a2) != *(_DWORD *)(a1 + 28)|| (result = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 40) + 24))(**(_QWORD **)(a1 + 40), a2), (_DWORD)result != 4))
        {
          if ((*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 32) + 24))(**(_QWORD **)(a1 + 32), a2) != *(_DWORD *)(a1 + 28))return 3;
          result = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 40) + 24))(**(_QWORD **)(a1 + 40), a2);
          if ((_DWORD)result != *(_DWORD *)(a1 + 28))
            return 3;
        }
      }
    }
  }
  return result;
}

uint64_t sub_19C38A220(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t sub_19C38A228(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 84))
    return a2 | 4;
  else
    return a2;
}

uint64_t sub_19C38A23C(uint64_t result, int a2)
{
  uint64_t v2;
  unsigned int *v3;
  uint64_t v4;

  if (*(_DWORD *)(result + 24) != a2)
  {
    v2 = result;
    *(_DWORD *)(result + 24) = a2;
    v3 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 16) + 176) + 104) + 12 * a2);
    v4 = v3[1];
    (*(void (**)(_QWORD, _QWORD))(***(_QWORD ***)(result + 32) + 56))(**(_QWORD **)(result + 32), *v3);
    result = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(v2 + 40) + 56))(**(_QWORD **)(v2 + 40), v4);
    *(_DWORD *)(v2 + 64) = *(_DWORD *)(v2 + 24);
  }
  return result;
}

uint64_t sub_19C38A2B4(uint64_t a1, int a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t result;
  int v6;
  uint64_t v7;
  unsigned int *v8;

  *(_BYTE *)(a1 + 48) = a2 == 0;
  if (*(_DWORD *)(a1 + 28))
  {
    if (a2)
    {
      v4 = *(_QWORD **)(a1 + 32);
      v3 = *(_QWORD **)(a1 + 40);
      goto LABEL_6;
    }
    return 1;
  }
  if (!a2)
    return 1;
  v3 = *(_QWORD **)(a1 + 32);
  v4 = *(_QWORD **)(a1 + 40);
LABEL_6:
  result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v3 + 64))(*v3);
  if ((_DWORD)result)
  {
    v6 = *(_DWORD *)(a1 + 28);
    v7 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v3 + 80))(*v3);
    v8 = (unsigned int *)(v7 + 4);
    if (v6)
      v8 = (unsigned int *)v7;
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v4 + 64))(*v4, *v8);
    return sub_19C38A414(a1, v3, v4);
  }
  return result;
}

uint64_t sub_19C38A368(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 48)
    || !(*(unsigned int (**)(_QWORD))(***(_QWORD ***)(a1 + 32) + 72))(**(_QWORD **)(a1 + 32)))
  {
    return 0;
  }
  else
  {
    return (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 40) + 72))(**(_QWORD **)(a1 + 40));
  }
}

uint64_t sub_19C38A3C4(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 48))
    return a1 + 52;
  else
    return a1 + 68;
}

uint64_t sub_19C38A3DC(uint64_t result)
{
  _QWORD *v1;
  _QWORD *v2;

  if (*(_BYTE *)(result + 48))
  {
    *(_BYTE *)(result + 48) = 0;
  }
  else
  {
    if (*(_DWORD *)(result + 28))
    {
      v2 = *(_QWORD **)(result + 32);
      v1 = *(_QWORD **)(result + 40);
    }
    else
    {
      v1 = *(_QWORD **)(result + 32);
      v2 = *(_QWORD **)(result + 40);
    }
    return sub_19C38A414(result, v1, v2);
  }
  return result;
}

uint64_t sub_19C38A404(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_19C38A414(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  int v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  unsigned int v20;
  _BYTE *v21;
  char v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  BOOL v25;
  float v26;
  int v28;
  int v29;
  float v30;
  float v31;
  float v32;
  float v33;
  unint64_t v34;
  char v35;

void sub_19C38A6BC(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6, int a7)
{
  unsigned int *v13;
  unint64_t v14;
  _QWORD v15[3];
  _DWORD *v16;
  unint64_t v17;
  unsigned int v18[4];

  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*a6 + 56))(*a6, a3);
  v18[0] = a7 - 1;
  v18[1] = a7 << 31 >> 31;
  v18[2] = 0;
  v18[3] = a5;
  sub_19C38A860(a1, a2, a6, v18, a7);
  v17 = 0;
  (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a4 + 120))(a4, a5, v15);
  while (1)
  {
    if (!v15[0])
    {
      v14 = v17;
      if (v17 >= v15[2])
        goto LABEL_15;
      goto LABEL_10;
    }
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v15[0] + 16))(v15[0]))
      break;
    if (!v15[0])
    {
      v14 = v17;
LABEL_10:
      v13 = (unsigned int *)(v15[1] + 16 * v14);
      goto LABEL_11;
    }
    v13 = (unsigned int *)(*(uint64_t (**)(void))(*(_QWORD *)v15[0] + 24))();
LABEL_11:
    sub_19C38A860(a1, a2, a6, v13, a7);
    if (v15[0])
      (*(void (**)(_QWORD))(*(_QWORD *)v15[0] + 32))(v15[0]);
    else
      ++v17;
  }
  if (v15[0])
  {
    (*(void (**)(void))(*(_QWORD *)v15[0] + 8))();
    goto LABEL_17;
  }
LABEL_15:
  if (v16)
    --*v16;
LABEL_17:
  sub_19C386AA0(a1, a2);
}

void sub_19C38A824(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _DWORD *a13)
{
  if (!a10)
  {
    if (a13)
      --*a13;
    _Unwind_Resume(exception_object);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C38A860(uint64_t a1, int a2, _QWORD *a3, unsigned int *a4, int a5)
{
  char v5;
  unsigned int *v10;
  uint64_t result;
  uint64_t v12;
  unint64_t v13;
  unsigned __int8 *v14;
  unint64_t v15;
  int v16;
  BOOL v17;
  char v18;
  char v19;
  uint64_t v20;
  unint64_t v21;
  unsigned __int8 *v22;
  unint64_t v23;
  int v24;
  BOOL v25;
  char v26;
  char v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  unint64_t v31;
  int v32;
  int v33;

  v5 = a5;
  v10 = a4 + 1;
  if (!a5)
    v10 = a4;
  result = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a3 + 64))(*a3, *v10);
  if ((_DWORD)result)
  {
    result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 72))(*a3);
    if ((result & 1) == 0)
    {
      if ((v5 & 1) != 0)
      {
        while (1)
        {
          v12 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 80))(*a3);
          v31 = *(_QWORD *)v12;
          v32 = *(_DWORD *)(v12 + 8);
          v33 = *(_DWORD *)(v12 + 12);
          v13 = *(_QWORD *)a4;
          v28 = *(_QWORD *)a4;
          v29 = a4[2];
          v30 = a4[3];
          v14 = *(unsigned __int8 **)(a1 + 136);
          if ((_DWORD)v31 == -1)
          {
            if (!v14[33])
            {
              v19 = v14[34] ^ 1;
              goto LABEL_20;
            }
          }
          else
          {
            v15 = HIDWORD(v13);
            if ((_DWORD)v15)
            {
              if ((_DWORD)v15 == -1)
              {
                v16 = v14[32];
                v17 = v16 == 1;
                if (v16 == 1)
                  v18 = -1;
                else
                  v18 = 0;
                v27 = v18;
                if (v17)
                  goto LABEL_9;
                goto LABEL_21;
              }
              v19 = 0;
LABEL_20:
              v27 = v19;
LABEL_21:
              sub_19C38AA88(a1, a2, (float *)&v28, (uint64_t)&v31, &v27);
            }
          }
LABEL_9:
          (*(void (**)(_QWORD))(*(_QWORD *)*a3 + 88))(*a3);
          result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 72))(*a3);
          if ((result & 1) != 0)
            return result;
        }
      }
      do
      {
        v20 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 80))(*a3);
        v21 = *(_QWORD *)v20;
        v31 = *(_QWORD *)v20;
        v32 = *(_DWORD *)(v20 + 8);
        v33 = *(_DWORD *)(v20 + 12);
        v28 = *(_QWORD *)a4;
        v29 = a4[2];
        v30 = a4[3];
        v22 = *(unsigned __int8 **)(a1 + 136);
        if ((_DWORD)v28 == -1)
        {
          if (v22[33])
            goto LABEL_23;
          v27 = v22[34] ^ 1;
        }
        else
        {
          v23 = HIDWORD(v21);
          if ((_DWORD)v23 == -1)
          {
            v24 = v22[32];
            v25 = v24 == 1;
            if (v24 == 1)
              v26 = -1;
            else
              v26 = 0;
            v27 = v26;
            if (v25)
              goto LABEL_23;
          }
          else
          {
            if (!(_DWORD)v23)
              goto LABEL_23;
            v27 = 0;
          }
        }
        sub_19C38AA88(a1, a2, (float *)&v31, (uint64_t)&v28, &v27);
LABEL_23:
        (*(void (**)(_QWORD))(*(_QWORD *)*a3 + 88))(*a3);
        result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 72))(*a3);
      }
      while (!(_DWORD)result);
    }
  }
  return result;
}

void sub_19C38AA88(uint64_t a1, int a2, float *a3, uint64_t a4, char *a5)
{
  int v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  unsigned __int8 v12;
  unint64_t v13;
  float v14;
  unsigned __int8 v15;
  float v16;
  float v17;
  BOOL v18;
  float v19;
  float v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  float *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  unint64_t v41;
  float *v42;
  uint64_t v43;
  float *v44;
  int v45;
  unint64_t v46;
  int v47;
  float *v48;
  uint64_t v49;
  char v50;

  v8 = *(_DWORD *)(a4 + 12);
  *(float *)&v49 = a3[3];
  HIDWORD(v49) = v8;
  v50 = *a5;
  v9 = *(unsigned int *)a3;
  v10 = *(unsigned int *)(a4 + 4);
  v11 = a3[2];
  v12 = atomic_load((unsigned __int8 *)&qword_1EDB96FE8);
  v13 = 0x1EDB96000uLL;
  if ((v12 & 1) == 0)
  {
    v44 = a3;
    v45 = __cxa_guard_acquire(&qword_1EDB96FE8);
    v13 = 0x1EDB96000uLL;
    a3 = v44;
    if (v45)
    {
      dword_1EDB96FF0 = -8388609;
      __cxa_guard_release(&qword_1EDB96FE8);
      v13 = 0x1EDB96000;
      a3 = v44;
    }
  }
  if (v11 == *(float *)(v13 + 4080))
    goto LABEL_11;
  v14 = *(float *)(a4 + 8);
  v15 = atomic_load((unsigned __int8 *)&qword_1EDB96FE8);
  if ((v15 & 1) == 0)
  {
    v48 = a3;
    v46 = v13;
    v47 = __cxa_guard_acquire(&qword_1EDB96FE8);
    v13 = v46;
    a3 = v48;
    if (v47)
    {
      *(_DWORD *)(v46 + 4080) = -8388609;
      __cxa_guard_release(&qword_1EDB96FE8);
      v13 = v46;
      a3 = v48;
    }
  }
  if (v14 == *(float *)(v13 + 4080))
  {
LABEL_11:
    v20 = NAN;
  }
  else
  {
    v16 = a3[2];
    v17 = *(float *)(a4 + 8);
    v18 = v17 == 3.4028e38 || v16 == 3.4028e38;
    v19 = v17 + v16;
    if (v18)
      v20 = 3.4028e38;
    else
      v20 = v19;
  }
  v21 = sub_19C385428(*(_QWORD **)(a1 + 176), &v49);
  v22 = *(_QWORD *)(a1 + 120);
  v23 = sub_19C386C20(v22, a2);
  v24 = v23;
  if (*(_BYTE *)(v22 + 104))
  {
    v25 = *(_DWORD *)(v23 + 56);
    if ((v25 & 4) == 0)
    {
      *(_DWORD *)(v23 + 56) = v25 | 4;
      v26 = *(_QWORD *)(v23 + 32) - *(_QWORD *)(v23 + 24) + *(_QWORD *)(v22 + 128) + 64;
      *(_QWORD *)(v22 + 128) = v26;
      *(_BYTE *)(v22 + 120) = 1;
      if (v26 > *(_QWORD *)(v22 + 112))
        sub_19C386D88(v22, v23);
    }
  }
  v27 = v9 | (v10 << 32);
  v29 = *(_QWORD *)(v24 + 32);
  v28 = *(_QWORD *)(v24 + 40);
  if (v29 >= v28)
  {
    v31 = *(_QWORD *)(v24 + 24);
    v32 = (uint64_t)(v29 - v31) >> 4;
    v33 = v32 + 1;
    if ((unint64_t)(v32 + 1) >> 60)
      sub_19C2A18E8();
    v34 = v28 - v31;
    if (v34 >> 3 > v33)
      v33 = v34 >> 3;
    if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0)
      v35 = 0xFFFFFFFFFFFFFFFLL;
    else
      v35 = v33;
    v36 = sub_19C387E3C((uint64_t **)(v24 + 48), v35);
    v37 = (float *)&v36[2 * v32];
    v38 = &v36[2 * v35];
    *(_QWORD *)v37 = v27;
    v37[2] = v20;
    *((_DWORD *)v37 + 3) = v21;
    v30 = v37 + 4;
    v40 = *(_QWORD **)(v24 + 24);
    v39 = *(_QWORD **)(v24 + 32);
    if (v39 != v40)
    {
      v41 = 0;
      do
      {
        v42 = &v37[v41 / 4];
        *((_QWORD *)v42 - 2) = v39[v41 / 8 - 2];
        *(v42 - 2) = *(float *)&v39[v41 / 8 - 1];
        *(v42 - 1) = *((float *)&v39[v41 / 8 - 1] + 1);
        v41 -= 16;
      }
      while (&v39[v41 / 8] != v40);
      v37 = (float *)((char *)v37 + v41);
      v39 = *(_QWORD **)(v24 + 24);
    }
    *(_QWORD *)(v24 + 24) = v37;
    *(_QWORD *)(v24 + 32) = v30;
    v43 = *(_QWORD *)(v24 + 40);
    *(_QWORD *)(v24 + 40) = v38;
    if (v39)
      sub_19C37E928((uint64_t **)(v24 + 48), v39, (v43 - (uint64_t)v39) >> 4);
  }
  else
  {
    *(_QWORD *)v29 = v27;
    *(float *)(v29 + 8) = v20;
    v30 = (_QWORD *)(v29 + 16);
    *(_DWORD *)(v29 + 12) = v21;
  }
  *(_QWORD *)(v24 + 32) = v30;
}

uint64_t sub_19C38AD48(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)a1 = &off_1E3D38058;
  v2 = *(_QWORD *)(a1 + 136);
  if (v2)
  {
    v3 = *(_QWORD **)v2;
    if (*(_QWORD *)v2)
    {
      if (*v3)
        (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 8))(*v3);
      MEMORY[0x1A1AD355C](v3, 0x20C4093837F09);
    }
    v4 = *(_QWORD **)(v2 + 8);
    if (v4)
    {
      if (*v4)
        (*(void (**)(_QWORD))(*(_QWORD *)*v4 + 8))(*v4);
      MEMORY[0x1A1AD355C](v4, 0x20C4093837F09);
    }
    MEMORY[0x1A1AD355C](v2, 0x1060C40AD892F49);
  }
  v5 = *(_QWORD **)(a1 + 176);
  if (v5)
  {
    if (*v5)
      MEMORY[0x1A1AD355C](*v5, 0xC400A2AC0F1);
    v6 = v5[1];
    if (v6)
      MEMORY[0x1A1AD355C](v6, 0xC400A2AC0F1);
    v7 = (void *)v5[13];
    if (v7)
    {
      v5[14] = v7;
      operator delete(v7);
    }
    sub_19C380BB4((uint64_t)(v5 + 4));
    MEMORY[0x1A1AD355C](v5, 0x10E0C401DE81863);
  }
  *(_QWORD *)a1 = off_1E3D37D80;
  v8 = *(_QWORD *)(a1 + 120);
  if (v8)
  {
    v9 = sub_19C37BFF8(v8);
    MEMORY[0x1A1AD355C](v9, 0x10A0C40690396FALL);
  }
  v10 = *(void **)(a1 + 72);
  if (v10)
    operator delete(v10);
  *(_QWORD *)a1 = off_1E3D383E0;
  v11 = *(_QWORD *)(a1 + 40);
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *(_QWORD *)(a1 + 48);
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void sub_19C38AEEC(uint64_t a1)
{
  sub_19C38C894(a1);
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C38AF10(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, 0x3FFFFFFF0007);
}

uint64_t sub_19C38AF24(uint64_t a1, uint64_t a2)
{
  if ((a2 & 4) != 0
    && ((*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 160) + 56))(*(_QWORD *)(a1 + 160), 4, 0)|| (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 168) + 56))(*(_QWORD *)(a1 + 168), 4, 0)|| ((*(uint64_t (**)(_QWORD, _QWORD))(***(_QWORD ***)(a1 + 144) + 40))(**(_QWORD **)(a1 + 144), 0) & 4) != 0|| ((*(uint64_t (**)(_QWORD, _QWORD))(***(_QWORD ***)(a1 + 152) + 40))(**(_QWORD **)(a1 + 152), 0) & 4) != 0))
  {
    *(_QWORD *)(a1 + 8) |= 4uLL;
  }
  return *(_QWORD *)(a1 + 8) & a2;
}

uint64_t sub_19C38AFCC(uint64_t a1)
{
  uint64_t v2;
  _QWORD **v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  __int128 v9;
  uint64_t *v10;

  v2 = operator new();
  sub_19C388690(v2, a1);
  *(_QWORD *)v2 = &off_1E3D37F50;
  v3 = (_QWORD **)operator new();
  v4 = *(_QWORD *)(a1 + 136);
  v5 = *(_QWORD **)v4;
  v6 = (_QWORD *)operator new();
  *v6 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 16))(*v5, 1);
  *v3 = v6;
  v7 = *(_QWORD **)(v4 + 8);
  v8 = (_QWORD *)operator new();
  *v8 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v7 + 16))(*v7, 1);
  v3[1] = v8;
  v3[2] = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)**v3 + 32))(**v3);
  v3[3] = (_QWORD *)-1;
  *((_BYTE *)v3 + 32) = -1;
  *(_QWORD *)(v2 + 136) = v3;
  v9 = *(_OWORD *)v3;
  *(_OWORD *)(v2 + 144) = *(_OWORD *)v3;
  *(_QWORD *)(v2 + 160) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v9 + 32))(*(_QWORD *)v9);
  *(_QWORD *)(v2 + 168) = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(v2 + 152) + 32))(**(_QWORD **)(v2 + 152));
  v10 = (uint64_t *)operator new();
  sub_19C388DE0(v10, *(_QWORD **)(a1 + 176));
  *(_QWORD *)(v2 + 176) = v10;
  *(_DWORD *)(v2 + 184) = *(_DWORD *)(a1 + 184);
  return v2;
}

void sub_19C38B150(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  MEMORY[0x1A1AD355C](v2, 0x10E0C401DE81863);
  sub_19C37BDD0(v1);
  MEMORY[0x1A1AD355C](v1, 0x10F3C405A371F01);
  _Unwind_Resume(a1);
}

void sub_19C38B1E4(uint64_t a1, int a2, __n128 a3)
{
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v13;
  int v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _BOOL4 v26;
  uint64_t v27;
  void *__p[2];
  char v29;

  v5 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 176) + 104) + 12 * a2);
  v6 = *v5;
  v7 = v5[1];
  v8 = *(_QWORD *)(a1 + 136);
  v9 = *((unsigned __int8 *)v5 + 8);
  if (*(_QWORD *)(v8 + 24) != __PAIR64__(v7, v6) || v9 != *(unsigned __int8 *)(v8 + 32))
  {
    *(_DWORD *)(v8 + 24) = v6;
    *(_DWORD *)(v8 + 28) = v7;
    *(_BYTE *)(v8 + 32) = v9;
    v10 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v8 + 16) + 32))(*(_QWORD *)(v8 + 16), v6);
    v11 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v8 + 16) + 48))(*(_QWORD *)(v8 + 16), v6);
    (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(v8 + 16) + 24))(&v27, *(_QWORD *)(v8 + 16), v6);
    LODWORD(__p[0]) = v27;
    HIDWORD(v27) = 2139095039;
    a3.n128_u32[0] = v27;
    v13 = *(float *)&v27 == 3.4028e38 && v10 == v11;
    *(_BYTE *)(v8 + 33) = v13;
    *(_BYTE *)(v8 + 34) = v11 == 0;
  }
  v14 = *(_DWORD *)(a1 + 184);
  if (!v14)
    goto LABEL_26;
  if (v14 != 1)
  {
    v22 = (*(uint64_t (**)(_QWORD, uint64_t, __n128))(***(_QWORD ***)(a1 + 144) + 104))(**(_QWORD **)(a1 + 144), v6, a3);
    v23 = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 152) + 104))(**(_QWORD **)(a1 + 152), v7);
    if (v22 == -1 && v23 == -1)
    {
      v29 = 5;
      strcpy((char *)__p, "FATAL");
      v24 = sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)__p, 5);
      sub_19C2A1B24(v24, (uint64_t)": ", 2);
      sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)"ComposeFst: both sides can't require match", 42);
      sub_19C351928();
      if (v29 < 0)
        operator delete(__p[0]);
      *(_QWORD *)(a1 + 8) |= 4uLL;
    }
    else
    {
      v26 = v23 == -1 || v22 <= v23;
      if (v22 == -1 || !v26)
        goto LABEL_12;
    }
LABEL_26:
    v16 = *(_QWORD **)(a1 + 152);
    v15 = *(_QWORD *)(a1 + 160);
    v17 = a1;
    v18 = a2;
    v19 = v7;
    v20 = v6;
    v21 = 1;
    goto LABEL_27;
  }
LABEL_12:
  v15 = *(_QWORD *)(a1 + 168);
  v16 = *(_QWORD **)(a1 + 144);
  v17 = a1;
  v18 = a2;
  v19 = v6;
  v20 = v7;
  v21 = 0;
LABEL_27:
  sub_19C38C204(v17, v18, v19, v15, v20, v16, v21);
}

void sub_19C38B414(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  sub_19C351928();
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_19C38B43C(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;

  if ((*(unsigned int (**)(_QWORD, _QWORD))(***(_QWORD ***)(a1 + 144) + 24))(**(_QWORD **)(a1 + 144), 0) != a3
    || (*(unsigned int (**)(_QWORD, _QWORD))(***(_QWORD ***)(a1 + 152) + 24))(**(_QWORD **)(a1 + 152), 0) != a3)
  {
    return 0;
  }
  v6 = operator new();
  *(_QWORD *)v6 = &off_1E3D381B0;
  *(_QWORD *)(v6 + 8) = a2;
  *(_QWORD *)(v6 + 16) = a1;
  *(_DWORD *)(v6 + 24) = -1;
  *(_DWORD *)(v6 + 28) = a3;
  v7 = *(_QWORD **)(a1 + 144);
  v8 = (_QWORD *)operator new();
  *v8 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v7 + 16))(*v7, 0);
  *(_QWORD *)(v6 + 32) = v8;
  v9 = *(_QWORD **)(a1 + 152);
  v10 = (_QWORD *)operator new();
  *v10 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v9 + 16))(*v9, 0);
  *(_QWORD *)(v6 + 40) = v10;
  *(_BYTE *)(v6 + 48) = 0;
  *(_QWORD *)(v6 + 52) = 0xFFFFFFFFLL;
  *(_QWORD *)(v6 + 60) = 0xFFFFFFFF00000000;
  *(_BYTE *)(v6 + 84) = 0;
  if (a3 == 1)
    *(_QWORD *)(v6 + 52) = 0xFFFFFFFF00000000;
  return v6;
}

void sub_19C38B590(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  MEMORY[0x1A1AD355C](v2, 0x20C4093837F09);
  MEMORY[0x1A1AD355C](v1, 0x10E1C40868C5753);
  _Unwind_Resume(a1);
}

uint64_t sub_19C38B5D8(_QWORD **a1)
{
  uint64_t result;
  unsigned int v3;
  unint64_t v4;
  char v5;

  result = (*(uint64_t (**)(_QWORD *))(*a1[20] + 16))(a1[20]);
  if ((_DWORD)result != -1)
  {
    v3 = result;
    result = (*(uint64_t (**)(_QWORD *))(*a1[21] + 16))(a1[21]);
    if ((_DWORD)result != -1)
    {
      v4 = __PAIR64__(result, v3);
      v5 = 0;
      return sub_19C385428(a1[22], (uint64_t *)&v4);
    }
  }
  return result;
}

void sub_19C38B644(uint64_t a1@<X0>, int a2@<W1>, float *a3@<X8>)
{
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v16;
  float v17;
  unsigned __int8 v18;
  float v19;
  unsigned __int8 v20;
  BOOL v21;
  int v22;
  int v23;
  float v24;
  float v25;
  uint64_t v26;
  uint64_t v27;
  int v28;

  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 176) + 104);
  v7 = (unsigned int *)(v6 + 12 * a2);
  v8 = *v7;
  (*(void (**)(char *__return_ptr, _QWORD, uint64_t))(***(_QWORD ***)(a1 + 144) + 96))((char *)&v26 + 4, **(_QWORD **)(a1 + 144), v8);
  v9 = *((float *)&v26 + 1);
  v28 = HIDWORD(v26);
  HIDWORD(v27) = 2139095039;
  if (*((float *)&v26 + 1) != 3.4028e38)
  {
    v10 = v7[1];
    (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(***(_QWORD ***)(a1 + 152) + 96))(&v26, **(_QWORD **)(a1 + 152), v10);
    v9 = *(float *)&v26;
    v28 = v26;
    HIDWORD(v27) = 2139095039;
    if (*(float *)&v26 != 3.4028e38)
    {
      v11 = *(_QWORD *)(a1 + 136);
      v12 = *(unsigned __int8 *)(v6 + 12 * a2 + 8);
      if (*(_DWORD *)(v11 + 24) != (_DWORD)v8
        || *(_DWORD *)(v11 + 28) != (_DWORD)v10
        || v12 != *(unsigned __int8 *)(v11 + 32))
      {
        *(_DWORD *)(v11 + 24) = v8;
        *(_DWORD *)(v11 + 28) = v10;
        *(_BYTE *)(v11 + 32) = v12;
        v13 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v11 + 16) + 32))(*(_QWORD *)(v11 + 16), v8);
        v14 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v11 + 16) + 48))(*(_QWORD *)(v11 + 16), v8);
        (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(v11 + 16) + 24))(&v27, *(_QWORD *)(v11 + 16), v8);
        v28 = v27;
        HIDWORD(v27) = 2139095039;
        v16 = *(float *)&v27 == 3.4028e38 && v13 == v14;
        *(_BYTE *)(v11 + 33) = v16;
        *(_BYTE *)(v11 + 34) = v14 == 0;
      }
      v17 = *((float *)&v26 + 1);
      v18 = atomic_load((unsigned __int8 *)&qword_1EDB96FE8);
      if ((v18 & 1) == 0)
      {
        v24 = *((float *)&v26 + 1);
        v22 = __cxa_guard_acquire(&qword_1EDB96FE8);
        v17 = v24;
        if (v22)
        {
          dword_1EDB96FF0 = -8388609;
          __cxa_guard_release(&qword_1EDB96FE8);
          v17 = v24;
        }
      }
      if (v17 == *(float *)&dword_1EDB96FF0)
        goto LABEL_23;
      v19 = *(float *)&v26;
      v20 = atomic_load((unsigned __int8 *)&qword_1EDB96FE8);
      if ((v20 & 1) == 0)
      {
        v25 = *(float *)&v26;
        v23 = __cxa_guard_acquire(&qword_1EDB96FE8);
        v19 = v25;
        if (v23)
        {
          dword_1EDB96FF0 = -8388609;
          __cxa_guard_release(&qword_1EDB96FE8);
          v19 = v25;
        }
      }
      if (v19 == *(float *)&dword_1EDB96FF0)
      {
LABEL_23:
        v9 = NAN;
      }
      else
      {
        v21 = *(float *)&v26 == 3.4028e38 || *((float *)&v26 + 1) == 3.4028e38;
        v9 = *(float *)&v26 + *((float *)&v26 + 1);
        if (v21)
          v9 = 3.4028e38;
      }
    }
  }
  *a3 = v9;
}

_QWORD *sub_19C38B8B8(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  *a1 = &off_1E3D381B0;
  v2 = (_QWORD *)a1[4];
  if (v2)
  {
    if (*v2)
      (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 8))(*v2);
    MEMORY[0x1A1AD355C](v2, 0x20C4093837F09);
  }
  v3 = (_QWORD *)a1[5];
  if (v3)
  {
    if (*v3)
      (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 8))(*v3);
    MEMORY[0x1A1AD355C](v3, 0x20C4093837F09);
  }
  return a1;
}

void sub_19C38B94C(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  *a1 = &off_1E3D381B0;
  v2 = (_QWORD *)a1[4];
  if (v2)
  {
    if (*v2)
      (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 8))(*v2);
    MEMORY[0x1A1AD355C](v2, 0x20C4093837F09);
  }
  v3 = (_QWORD *)a1[5];
  if (v3)
  {
    if (*v3)
      (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 8))(*v3);
    MEMORY[0x1A1AD355C](v3, 0x20C4093837F09);
  }
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C38B9F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  void *__p[2];
  char v13;

  v4 = operator new();
  *(_QWORD *)v4 = &off_1E3D381B0;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  v5 = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(v4 + 24) = -1;
  *(_DWORD *)(v4 + 28) = v5;
  v6 = *(_QWORD **)(a1 + 32);
  v7 = (_QWORD *)operator new();
  *v7 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v6 + 16))(*v6, a2);
  *(_QWORD *)(v4 + 32) = v7;
  v8 = *(_QWORD **)(a1 + 40);
  v9 = (_QWORD *)operator new();
  *v9 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v8 + 16))(*v8, a2);
  *(_QWORD *)(v4 + 40) = v9;
  *(_BYTE *)(v4 + 48) = 0;
  *(_QWORD *)(v4 + 52) = 0xFFFFFFFFLL;
  *(_QWORD *)(v4 + 60) = 0xFFFFFFFF00000000;
  *(_BYTE *)(v4 + 84) = *(_BYTE *)(a1 + 84);
  if ((_DWORD)a2)
  {
    v13 = 5;
    strcpy((char *)__p, "FATAL");
    v10 = sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)__p, 5);
    sub_19C2A1B24(v10, (uint64_t)": ", 2);
    sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)"ComposeFstMatcher: safe copy not supported", 42);
    sub_19C351928();
    if (v13 < 0)
      operator delete(__p[0]);
    *(_BYTE *)(v4 + 84) = 1;
  }
  if (v5 == 1)
    *(_QWORD *)(v4 + 52) = 0xFFFFFFFF00000000;
  return v4;
}

void sub_19C38BB84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  sub_19C351928();
  if (a15 < 0)
    operator delete(__p);
  MEMORY[0x1A1AD355C](v15, 0x10E1C40868C5753);
  _Unwind_Resume(a1);
}

uint64_t sub_19C38BBF0(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 32) + 24))(**(_QWORD **)(a1 + 32));
  if ((_DWORD)result != 3)
  {
    result = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 40) + 24))(**(_QWORD **)(a1 + 40), a2);
    if ((_DWORD)result != 3)
    {
      if ((*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 32) + 24))(**(_QWORD **)(a1 + 32), a2) != 4|| (result = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 40) + 24))(**(_QWORD **)(a1 + 40), a2), (_DWORD)result != 4))
      {
        if ((*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 32) + 24))(**(_QWORD **)(a1 + 32), a2) == 4&& (*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 40) + 24))(**(_QWORD **)(a1 + 40), a2) == *(_DWORD *)(a1 + 28))
        {
          return 4;
        }
        else if ((*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 32) + 24))(**(_QWORD **)(a1 + 32), a2) != *(_DWORD *)(a1 + 28)|| (result = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 40) + 24))(**(_QWORD **)(a1 + 40), a2), (_DWORD)result != 4))
        {
          if ((*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 32) + 24))(**(_QWORD **)(a1 + 32), a2) != *(_DWORD *)(a1 + 28))return 3;
          result = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 40) + 24))(**(_QWORD **)(a1 + 40), a2);
          if ((_DWORD)result != *(_DWORD *)(a1 + 28))
            return 3;
        }
      }
    }
  }
  return result;
}

uint64_t sub_19C38BD68(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t sub_19C38BD70(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 84))
    return a2 | 4;
  else
    return a2;
}

uint64_t sub_19C38BD84(uint64_t result, int a2)
{
  uint64_t v2;
  unsigned int *v3;
  uint64_t v4;

  if (*(_DWORD *)(result + 24) != a2)
  {
    v2 = result;
    *(_DWORD *)(result + 24) = a2;
    v3 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 16) + 176) + 104) + 12 * a2);
    v4 = v3[1];
    (*(void (**)(_QWORD, _QWORD))(***(_QWORD ***)(result + 32) + 56))(**(_QWORD **)(result + 32), *v3);
    result = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(v2 + 40) + 56))(**(_QWORD **)(v2 + 40), v4);
    *(_DWORD *)(v2 + 64) = *(_DWORD *)(v2 + 24);
  }
  return result;
}

uint64_t sub_19C38BDFC(uint64_t a1, int a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t result;
  int v6;
  uint64_t v7;
  unsigned int *v8;

  *(_BYTE *)(a1 + 48) = a2 == 0;
  if (*(_DWORD *)(a1 + 28))
  {
    if (a2)
    {
      v4 = *(_QWORD **)(a1 + 32);
      v3 = *(_QWORD **)(a1 + 40);
      goto LABEL_6;
    }
    return 1;
  }
  if (!a2)
    return 1;
  v3 = *(_QWORD **)(a1 + 32);
  v4 = *(_QWORD **)(a1 + 40);
LABEL_6:
  result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v3 + 64))(*v3);
  if ((_DWORD)result)
  {
    v6 = *(_DWORD *)(a1 + 28);
    v7 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v3 + 80))(*v3);
    v8 = (unsigned int *)(v7 + 4);
    if (v6)
      v8 = (unsigned int *)v7;
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v4 + 64))(*v4, *v8);
    return sub_19C38BF5C(a1, v3, v4);
  }
  return result;
}

uint64_t sub_19C38BEB0(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 48)
    || !(*(unsigned int (**)(_QWORD))(***(_QWORD ***)(a1 + 32) + 72))(**(_QWORD **)(a1 + 32)))
  {
    return 0;
  }
  else
  {
    return (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 40) + 72))(**(_QWORD **)(a1 + 40));
  }
}

uint64_t sub_19C38BF0C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 48))
    return a1 + 52;
  else
    return a1 + 68;
}

uint64_t sub_19C38BF24(uint64_t result)
{
  _QWORD *v1;
  _QWORD *v2;

  if (*(_BYTE *)(result + 48))
  {
    *(_BYTE *)(result + 48) = 0;
  }
  else
  {
    if (*(_DWORD *)(result + 28))
    {
      v2 = *(_QWORD **)(result + 32);
      v1 = *(_QWORD **)(result + 40);
    }
    else
    {
      v1 = *(_QWORD **)(result + 32);
      v2 = *(_QWORD **)(result + 40);
    }
    return sub_19C38BF5C(result, v1, v2);
  }
  return result;
}

uint64_t sub_19C38BF4C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_19C38BF5C(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  int v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  unsigned int v21;
  _BYTE *v22;
  char v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  BOOL v26;
  float v27;
  int v29;
  int v30;
  float v31;
  float v32;
  float v33;
  float v34;
  unint64_t v35;
  char v36;

void sub_19C38C204(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6, int a7)
{
  unsigned int *v13;
  unint64_t v14;
  _QWORD v15[3];
  _DWORD *v16;
  unint64_t v17;
  unsigned int v18[4];

  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*a6 + 56))(*a6, a3);
  v18[0] = a7 - 1;
  v18[1] = a7 << 31 >> 31;
  v18[2] = 0;
  v18[3] = a5;
  sub_19C38C3A8(a1, a2, a6, v18, a7);
  v17 = 0;
  (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a4 + 120))(a4, a5, v15);
  while (1)
  {
    if (!v15[0])
    {
      v14 = v17;
      if (v17 >= v15[2])
        goto LABEL_15;
      goto LABEL_10;
    }
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v15[0] + 16))(v15[0]))
      break;
    if (!v15[0])
    {
      v14 = v17;
LABEL_10:
      v13 = (unsigned int *)(v15[1] + 16 * v14);
      goto LABEL_11;
    }
    v13 = (unsigned int *)(*(uint64_t (**)(void))(*(_QWORD *)v15[0] + 24))();
LABEL_11:
    sub_19C38C3A8(a1, a2, a6, v13, a7);
    if (v15[0])
      (*(void (**)(_QWORD))(*(_QWORD *)v15[0] + 32))(v15[0]);
    else
      ++v17;
  }
  if (v15[0])
  {
    (*(void (**)(void))(*(_QWORD *)v15[0] + 8))();
    goto LABEL_17;
  }
LABEL_15:
  if (v16)
    --*v16;
LABEL_17:
  sub_19C386AA0(a1, a2);
}

void sub_19C38C36C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _DWORD *a13)
{
  if (!a10)
  {
    if (a13)
      --*a13;
    _Unwind_Resume(exception_object);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C38C3A8(uint64_t a1, int a2, _QWORD *a3, unsigned int *a4, int a5)
{
  char v5;
  unsigned int *v10;
  uint64_t result;
  char v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  int v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 *v21;
  int v22;
  char v23;
  char v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  int v29;
  int v30;

  v5 = a5;
  v10 = a4 + 1;
  if (!a5)
    v10 = a4;
  result = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a3 + 64))(*a3, *v10);
  if ((_DWORD)result)
  {
    result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 72))(*a3);
    if ((result & 1) == 0)
    {
      if ((v5 & 1) != 0)
      {
        while (1)
        {
          v13 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 80))(*a3);
          v14 = *(_QWORD *)v13;
          v28 = *(_QWORD *)v13;
          v29 = *(_DWORD *)(v13 + 8);
          v30 = *(_DWORD *)(v13 + 12);
          v25 = *(_QWORD *)a4;
          v26 = a4[2];
          v27 = a4[3];
          v15 = *(unsigned __int8 **)(a1 + 136);
          if (HIDWORD(v25) == -1)
          {
            if (v15[33])
              goto LABEL_13;
            v24 = v15[34] ^ 1;
          }
          else if ((_DWORD)v14 == -1)
          {
            v16 = v15[32];
            if (v15[32])
              v17 = -1;
            else
              v17 = 0;
            v24 = v17;
            if (v16)
              goto LABEL_13;
          }
          else
          {
            if (HIDWORD(v25))
              v12 = 0;
            else
              v12 = -1;
            v24 = v12;
            if (!HIDWORD(v25))
              goto LABEL_13;
          }
          sub_19C38C5D4(a1, a2, (float *)&v25, (uint64_t)&v28, &v24);
LABEL_13:
          (*(void (**)(_QWORD))(*(_QWORD *)*a3 + 88))(*a3);
          result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 72))(*a3);
          if ((result & 1) != 0)
            return result;
        }
      }
      do
      {
        v19 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 80))(*a3);
        v28 = *(_QWORD *)v19;
        v29 = *(_DWORD *)(v19 + 8);
        v30 = *(_DWORD *)(v19 + 12);
        v20 = *(_QWORD *)a4;
        v25 = *(_QWORD *)a4;
        v26 = a4[2];
        v27 = a4[3];
        v21 = *(unsigned __int8 **)(a1 + 136);
        if (HIDWORD(v28) == -1)
        {
          if (v21[33])
            goto LABEL_28;
          v24 = v21[34] ^ 1;
        }
        else if ((_DWORD)v20 == -1)
        {
          v22 = v21[32];
          if (v22)
            v23 = -1;
          else
            v23 = 0;
          v24 = v23;
          if (v22)
            goto LABEL_28;
        }
        else
        {
          if (HIDWORD(v28))
            v18 = 0;
          else
            v18 = -1;
          v24 = v18;
          if (!HIDWORD(v28))
            goto LABEL_28;
        }
        sub_19C38C5D4(a1, a2, (float *)&v28, (uint64_t)&v25, &v24);
LABEL_28:
        (*(void (**)(_QWORD))(*(_QWORD *)*a3 + 88))(*a3);
        result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 72))(*a3);
      }
      while (!(_DWORD)result);
    }
  }
  return result;
}

void sub_19C38C5D4(uint64_t a1, int a2, float *a3, uint64_t a4, char *a5)
{
  int v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  unsigned __int8 v12;
  unint64_t v13;
  float v14;
  unsigned __int8 v15;
  float v16;
  float v17;
  BOOL v18;
  float v19;
  float v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  float *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  unint64_t v41;
  float *v42;
  uint64_t v43;
  float *v44;
  int v45;
  unint64_t v46;
  int v47;
  float *v48;
  uint64_t v49;
  char v50;

  v8 = *(_DWORD *)(a4 + 12);
  *(float *)&v49 = a3[3];
  HIDWORD(v49) = v8;
  v50 = *a5;
  v9 = *(unsigned int *)a3;
  v10 = *(unsigned int *)(a4 + 4);
  v11 = a3[2];
  v12 = atomic_load((unsigned __int8 *)&qword_1EDB96FE8);
  v13 = 0x1EDB96000uLL;
  if ((v12 & 1) == 0)
  {
    v44 = a3;
    v45 = __cxa_guard_acquire(&qword_1EDB96FE8);
    v13 = 0x1EDB96000uLL;
    a3 = v44;
    if (v45)
    {
      dword_1EDB96FF0 = -8388609;
      __cxa_guard_release(&qword_1EDB96FE8);
      v13 = 0x1EDB96000;
      a3 = v44;
    }
  }
  if (v11 == *(float *)(v13 + 4080))
    goto LABEL_11;
  v14 = *(float *)(a4 + 8);
  v15 = atomic_load((unsigned __int8 *)&qword_1EDB96FE8);
  if ((v15 & 1) == 0)
  {
    v48 = a3;
    v46 = v13;
    v47 = __cxa_guard_acquire(&qword_1EDB96FE8);
    v13 = v46;
    a3 = v48;
    if (v47)
    {
      *(_DWORD *)(v46 + 4080) = -8388609;
      __cxa_guard_release(&qword_1EDB96FE8);
      v13 = v46;
      a3 = v48;
    }
  }
  if (v14 == *(float *)(v13 + 4080))
  {
LABEL_11:
    v20 = NAN;
  }
  else
  {
    v16 = a3[2];
    v17 = *(float *)(a4 + 8);
    v18 = v17 == 3.4028e38 || v16 == 3.4028e38;
    v19 = v17 + v16;
    if (v18)
      v20 = 3.4028e38;
    else
      v20 = v19;
  }
  v21 = sub_19C385428(*(_QWORD **)(a1 + 176), &v49);
  v22 = *(_QWORD *)(a1 + 120);
  v23 = sub_19C386C20(v22, a2);
  v24 = v23;
  if (*(_BYTE *)(v22 + 104))
  {
    v25 = *(_DWORD *)(v23 + 56);
    if ((v25 & 4) == 0)
    {
      *(_DWORD *)(v23 + 56) = v25 | 4;
      v26 = *(_QWORD *)(v23 + 32) - *(_QWORD *)(v23 + 24) + *(_QWORD *)(v22 + 128) + 64;
      *(_QWORD *)(v22 + 128) = v26;
      *(_BYTE *)(v22 + 120) = 1;
      if (v26 > *(_QWORD *)(v22 + 112))
        sub_19C386D88(v22, v23);
    }
  }
  v27 = v9 | (v10 << 32);
  v29 = *(_QWORD *)(v24 + 32);
  v28 = *(_QWORD *)(v24 + 40);
  if (v29 >= v28)
  {
    v31 = *(_QWORD *)(v24 + 24);
    v32 = (uint64_t)(v29 - v31) >> 4;
    v33 = v32 + 1;
    if ((unint64_t)(v32 + 1) >> 60)
      sub_19C2A18E8();
    v34 = v28 - v31;
    if (v34 >> 3 > v33)
      v33 = v34 >> 3;
    if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0)
      v35 = 0xFFFFFFFFFFFFFFFLL;
    else
      v35 = v33;
    v36 = sub_19C387E3C((uint64_t **)(v24 + 48), v35);
    v37 = (float *)&v36[2 * v32];
    v38 = &v36[2 * v35];
    *(_QWORD *)v37 = v27;
    v37[2] = v20;
    *((_DWORD *)v37 + 3) = v21;
    v30 = v37 + 4;
    v40 = *(_QWORD **)(v24 + 24);
    v39 = *(_QWORD **)(v24 + 32);
    if (v39 != v40)
    {
      v41 = 0;
      do
      {
        v42 = &v37[v41 / 4];
        *((_QWORD *)v42 - 2) = v39[v41 / 8 - 2];
        *(v42 - 2) = *(float *)&v39[v41 / 8 - 1];
        *(v42 - 1) = *((float *)&v39[v41 / 8 - 1] + 1);
        v41 -= 16;
      }
      while (&v39[v41 / 8] != v40);
      v37 = (float *)((char *)v37 + v41);
      v39 = *(_QWORD **)(v24 + 24);
    }
    *(_QWORD *)(v24 + 24) = v37;
    *(_QWORD *)(v24 + 32) = v30;
    v43 = *(_QWORD *)(v24 + 40);
    *(_QWORD *)(v24 + 40) = v38;
    if (v39)
      sub_19C37E928((uint64_t **)(v24 + 48), v39, (v43 - (uint64_t)v39) >> 4);
  }
  else
  {
    *(_QWORD *)v29 = v27;
    *(float *)(v29 + 8) = v20;
    v30 = (_QWORD *)(v29 + 16);
    *(_DWORD *)(v29 + 12) = v21;
  }
  *(_QWORD *)(v24 + 32) = v30;
}

uint64_t sub_19C38C894(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)a1 = &off_1E3D37F50;
  v2 = *(_QWORD *)(a1 + 136);
  if (v2)
  {
    v3 = *(_QWORD **)v2;
    if (*(_QWORD *)v2)
    {
      if (*v3)
        (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 8))(*v3);
      MEMORY[0x1A1AD355C](v3, 0x20C4093837F09);
    }
    v4 = *(_QWORD **)(v2 + 8);
    if (v4)
    {
      if (*v4)
        (*(void (**)(_QWORD))(*(_QWORD *)*v4 + 8))(*v4);
      MEMORY[0x1A1AD355C](v4, 0x20C4093837F09);
    }
    MEMORY[0x1A1AD355C](v2, 0x1060C40AD892F49);
  }
  v5 = *(_QWORD **)(a1 + 176);
  if (v5)
  {
    if (*v5)
      MEMORY[0x1A1AD355C](*v5, 0xC400A2AC0F1);
    v6 = v5[1];
    if (v6)
      MEMORY[0x1A1AD355C](v6, 0xC400A2AC0F1);
    v7 = (void *)v5[13];
    if (v7)
    {
      v5[14] = v7;
      operator delete(v7);
    }
    sub_19C380BB4((uint64_t)(v5 + 4));
    MEMORY[0x1A1AD355C](v5, 0x10E0C401DE81863);
  }
  *(_QWORD *)a1 = off_1E3D37D80;
  v8 = *(_QWORD *)(a1 + 120);
  if (v8)
  {
    v9 = sub_19C37BFF8(v8);
    MEMORY[0x1A1AD355C](v9, 0x10A0C40690396FALL);
  }
  v10 = *(void **)(a1 + 72);
  if (v10)
    operator delete(v10);
  *(_QWORD *)a1 = off_1E3D383E0;
  v11 = *(_QWORD *)(a1 + 40);
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *(_QWORD *)(a1 + 48);
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void sub_19C38CA38(uint64_t a1)
{
  sub_19C38E1C4(a1);
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C38CA5C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, 0x3FFFFFFF0007);
}

uint64_t sub_19C38CA70(uint64_t a1, uint64_t a2)
{
  if ((a2 & 4) != 0
    && ((*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 160) + 56))(*(_QWORD *)(a1 + 160), 4, 0)|| (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 168) + 56))(*(_QWORD *)(a1 + 168), 4, 0)|| ((*(uint64_t (**)(_QWORD, _QWORD))(***(_QWORD ***)(a1 + 144) + 40))(**(_QWORD **)(a1 + 144), 0) & 4) != 0|| ((*(uint64_t (**)(_QWORD, _QWORD))(***(_QWORD ***)(a1 + 152) + 40))(**(_QWORD **)(a1 + 152), 0) & 4) != 0))
  {
    *(_QWORD *)(a1 + 8) |= 4uLL;
  }
  return *(_QWORD *)(a1 + 8) & a2;
}

uint64_t sub_19C38CB18(uint64_t a1)
{
  uint64_t v2;
  _QWORD **v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  __int128 v9;
  uint64_t *v10;

  v2 = operator new();
  sub_19C388690(v2, a1);
  *(_QWORD *)v2 = &off_1E3D37EA0;
  v3 = (_QWORD **)operator new();
  v4 = *(_QWORD *)(a1 + 136);
  v5 = *(_QWORD **)v4;
  v6 = (_QWORD *)operator new();
  *v6 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 16))(*v5, 1);
  *v3 = v6;
  v7 = *(_QWORD **)(v4 + 8);
  v8 = (_QWORD *)operator new();
  *v8 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v7 + 16))(*v7, 1);
  v3[1] = v8;
  v3[2] = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)**v3 + 32))(**v3);
  v3[3] = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v3[1] + 32))(*v3[1]);
  *(_QWORD *)(v2 + 136) = v3;
  v9 = *(_OWORD *)v3;
  *(_OWORD *)(v2 + 144) = *(_OWORD *)v3;
  *(_QWORD *)(v2 + 160) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v9 + 32))(*(_QWORD *)v9);
  *(_QWORD *)(v2 + 168) = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(v2 + 152) + 32))(**(_QWORD **)(v2 + 152));
  v10 = (uint64_t *)operator new();
  sub_19C388DE0(v10, *(_QWORD **)(a1 + 176));
  *(_QWORD *)(v2 + 176) = v10;
  *(_DWORD *)(v2 + 184) = *(_DWORD *)(a1 + 184);
  return v2;
}

void sub_19C38CCAC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  MEMORY[0x1A1AD355C](v2, 0x10E0C401DE81863);
  sub_19C37BDD0(v1);
  MEMORY[0x1A1AD355C](v1, 0x10F3C405A371F01);
  _Unwind_Resume(a1);
}

void sub_19C38CD40(uint64_t a1, int a2)
{
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v11;
  _BOOL4 v12;
  _QWORD *v14;
  void *__p[2];
  char v16;

  v4 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 176) + 104) + 12 * a2);
  v5 = *v4;
  v6 = v4[1];
  v7 = *(_DWORD *)(a1 + 184);
  if (v7)
  {
    if (v7 == 1)
      goto LABEL_18;
    v8 = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 144) + 104))(**(_QWORD **)(a1 + 144), v5);
    v9 = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 152) + 104))(**(_QWORD **)(a1 + 152), v6);
    if (v8 == -1 && v9 == -1)
    {
      v16 = 5;
      strcpy((char *)__p, "FATAL");
      v14 = sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)__p, 5);
      sub_19C2A1B24(v14, (uint64_t)": ", 2);
      sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)"ComposeFst: both sides can't require match", 42);
      sub_19C351928();
      if (v16 < 0)
        operator delete(__p[0]);
      *(_QWORD *)(a1 + 8) |= 4uLL;
      goto LABEL_22;
    }
    v11 = v9 == -1 || v8 <= v9;
    v12 = v11;
    if (v8 == -1 || !v12)
    {
LABEL_18:
      sub_19C38DB90(a1, a2, v5, *(_QWORD *)(a1 + 168), v6, *(_QWORD **)(a1 + 144), 0);
      return;
    }
  }
LABEL_22:
  sub_19C38DB90(a1, a2, v6, *(_QWORD *)(a1 + 160), v5, *(_QWORD **)(a1 + 152), 1);
}

void sub_19C38CEA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  sub_19C351928();
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_19C38CECC(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;

  if ((*(unsigned int (**)(_QWORD, _QWORD))(***(_QWORD ***)(a1 + 144) + 24))(**(_QWORD **)(a1 + 144), 0) != a3
    || (*(unsigned int (**)(_QWORD, _QWORD))(***(_QWORD ***)(a1 + 152) + 24))(**(_QWORD **)(a1 + 152), 0) != a3)
  {
    return 0;
  }
  v6 = operator new();
  *(_QWORD *)v6 = &off_1E3D380B0;
  *(_QWORD *)(v6 + 8) = a2;
  *(_QWORD *)(v6 + 16) = a1;
  *(_DWORD *)(v6 + 24) = -1;
  *(_DWORD *)(v6 + 28) = a3;
  v7 = *(_QWORD **)(a1 + 144);
  v8 = (_QWORD *)operator new();
  *v8 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v7 + 16))(*v7, 0);
  *(_QWORD *)(v6 + 32) = v8;
  v9 = *(_QWORD **)(a1 + 152);
  v10 = (_QWORD *)operator new();
  *v10 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v9 + 16))(*v9, 0);
  *(_QWORD *)(v6 + 40) = v10;
  *(_BYTE *)(v6 + 48) = 0;
  *(_QWORD *)(v6 + 52) = 0xFFFFFFFFLL;
  *(_QWORD *)(v6 + 60) = 0xFFFFFFFF00000000;
  *(_BYTE *)(v6 + 84) = 0;
  if (a3 == 1)
    *(_QWORD *)(v6 + 52) = 0xFFFFFFFF00000000;
  return v6;
}

void sub_19C38D020(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  MEMORY[0x1A1AD355C](v2, 0x20C4093837F09);
  MEMORY[0x1A1AD355C](v1, 0x10E1C40868C5753);
  _Unwind_Resume(a1);
}

uint64_t sub_19C38D068(_QWORD **a1)
{
  uint64_t result;
  unsigned int v3;
  unint64_t v4;
  char v5;

  result = (*(uint64_t (**)(_QWORD *))(*a1[20] + 16))(a1[20]);
  if ((_DWORD)result != -1)
  {
    v3 = result;
    result = (*(uint64_t (**)(_QWORD *))(*a1[21] + 16))(a1[21]);
    if ((_DWORD)result != -1)
    {
      v4 = __PAIR64__(result, v3);
      v5 = 0;
      return sub_19C385428(a1[22], (uint64_t *)&v4);
    }
  }
  return result;
}

void sub_19C38D0D4(uint64_t a1@<X0>, int a2@<W1>, float *a3@<X8>)
{
  unsigned int *v5;
  float v6;
  float v7;
  unsigned __int8 v8;
  float v9;
  unsigned __int8 v10;
  BOOL v11;
  int v12;
  int v13;
  float v14;
  float v15;
  uint64_t v16;
  int v17;
  int v18;

  v5 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 176) + 104) + 12 * a2);
  (*(void (**)(char *__return_ptr, _QWORD, _QWORD))(***(_QWORD ***)(a1 + 144) + 96))((char *)&v16 + 4, **(_QWORD **)(a1 + 144), *v5);
  v6 = *((float *)&v16 + 1);
  v18 = HIDWORD(v16);
  v17 = 2139095039;
  if (*((float *)&v16 + 1) != 3.4028e38)
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD))(***(_QWORD ***)(a1 + 152) + 96))(&v16, **(_QWORD **)(a1 + 152), v5[1]);
    v6 = *(float *)&v16;
    v18 = v16;
    v17 = 2139095039;
    if (*(float *)&v16 != 3.4028e38)
    {
      v7 = *((float *)&v16 + 1);
      v8 = atomic_load((unsigned __int8 *)&qword_1EDB96FE8);
      if ((v8 & 1) == 0)
      {
        v14 = *((float *)&v16 + 1);
        v12 = __cxa_guard_acquire(&qword_1EDB96FE8);
        v7 = v14;
        if (v12)
        {
          dword_1EDB96FF0 = -8388609;
          __cxa_guard_release(&qword_1EDB96FE8);
          v7 = v14;
        }
      }
      if (v7 == *(float *)&dword_1EDB96FF0)
        goto LABEL_13;
      v9 = *(float *)&v16;
      v10 = atomic_load((unsigned __int8 *)&qword_1EDB96FE8);
      if ((v10 & 1) == 0)
      {
        v15 = *(float *)&v16;
        v13 = __cxa_guard_acquire(&qword_1EDB96FE8);
        v9 = v15;
        if (v13)
        {
          dword_1EDB96FF0 = -8388609;
          __cxa_guard_release(&qword_1EDB96FE8);
          v9 = v15;
        }
      }
      if (v9 == *(float *)&dword_1EDB96FF0)
      {
LABEL_13:
        v6 = NAN;
      }
      else
      {
        v11 = *(float *)&v16 == 3.4028e38 || *((float *)&v16 + 1) == 3.4028e38;
        v6 = *(float *)&v16 + *((float *)&v16 + 1);
        if (v11)
          v6 = 3.4028e38;
      }
    }
  }
  *a3 = v6;
}

_QWORD *sub_19C38D274(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  *a1 = &off_1E3D380B0;
  v2 = (_QWORD *)a1[4];
  if (v2)
  {
    if (*v2)
      (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 8))(*v2);
    MEMORY[0x1A1AD355C](v2, 0x20C4093837F09);
  }
  v3 = (_QWORD *)a1[5];
  if (v3)
  {
    if (*v3)
      (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 8))(*v3);
    MEMORY[0x1A1AD355C](v3, 0x20C4093837F09);
  }
  return a1;
}

void sub_19C38D308(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  *a1 = &off_1E3D380B0;
  v2 = (_QWORD *)a1[4];
  if (v2)
  {
    if (*v2)
      (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 8))(*v2);
    MEMORY[0x1A1AD355C](v2, 0x20C4093837F09);
  }
  v3 = (_QWORD *)a1[5];
  if (v3)
  {
    if (*v3)
      (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 8))(*v3);
    MEMORY[0x1A1AD355C](v3, 0x20C4093837F09);
  }
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C38D3AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  void *__p[2];
  char v13;

  v4 = operator new();
  *(_QWORD *)v4 = &off_1E3D380B0;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  v5 = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(v4 + 24) = -1;
  *(_DWORD *)(v4 + 28) = v5;
  v6 = *(_QWORD **)(a1 + 32);
  v7 = (_QWORD *)operator new();
  *v7 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v6 + 16))(*v6, a2);
  *(_QWORD *)(v4 + 32) = v7;
  v8 = *(_QWORD **)(a1 + 40);
  v9 = (_QWORD *)operator new();
  *v9 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v8 + 16))(*v8, a2);
  *(_QWORD *)(v4 + 40) = v9;
  *(_BYTE *)(v4 + 48) = 0;
  *(_QWORD *)(v4 + 52) = 0xFFFFFFFFLL;
  *(_QWORD *)(v4 + 60) = 0xFFFFFFFF00000000;
  *(_BYTE *)(v4 + 84) = *(_BYTE *)(a1 + 84);
  if ((_DWORD)a2)
  {
    v13 = 5;
    strcpy((char *)__p, "FATAL");
    v10 = sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)__p, 5);
    sub_19C2A1B24(v10, (uint64_t)": ", 2);
    sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)"ComposeFstMatcher: safe copy not supported", 42);
    sub_19C351928();
    if (v13 < 0)
      operator delete(__p[0]);
    *(_BYTE *)(v4 + 84) = 1;
  }
  if (v5 == 1)
    *(_QWORD *)(v4 + 52) = 0xFFFFFFFF00000000;
  return v4;
}

void sub_19C38D540(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  sub_19C351928();
  if (a15 < 0)
    operator delete(__p);
  MEMORY[0x1A1AD355C](v15, 0x10E1C40868C5753);
  _Unwind_Resume(a1);
}

uint64_t sub_19C38D5AC(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 32) + 24))(**(_QWORD **)(a1 + 32));
  if ((_DWORD)result != 3)
  {
    result = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 40) + 24))(**(_QWORD **)(a1 + 40), a2);
    if ((_DWORD)result != 3)
    {
      if ((*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 32) + 24))(**(_QWORD **)(a1 + 32), a2) != 4|| (result = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 40) + 24))(**(_QWORD **)(a1 + 40), a2), (_DWORD)result != 4))
      {
        if ((*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 32) + 24))(**(_QWORD **)(a1 + 32), a2) == 4&& (*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 40) + 24))(**(_QWORD **)(a1 + 40), a2) == *(_DWORD *)(a1 + 28))
        {
          return 4;
        }
        else if ((*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 32) + 24))(**(_QWORD **)(a1 + 32), a2) != *(_DWORD *)(a1 + 28)|| (result = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 40) + 24))(**(_QWORD **)(a1 + 40), a2), (_DWORD)result != 4))
        {
          if ((*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 32) + 24))(**(_QWORD **)(a1 + 32), a2) != *(_DWORD *)(a1 + 28))return 3;
          result = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 40) + 24))(**(_QWORD **)(a1 + 40), a2);
          if ((_DWORD)result != *(_DWORD *)(a1 + 28))
            return 3;
        }
      }
    }
  }
  return result;
}

uint64_t sub_19C38D724(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t sub_19C38D72C(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 84))
    return a2 | 4;
  else
    return a2;
}

uint64_t sub_19C38D740(uint64_t result, int a2)
{
  uint64_t v2;
  unsigned int *v3;
  uint64_t v4;

  if (*(_DWORD *)(result + 24) != a2)
  {
    v2 = result;
    *(_DWORD *)(result + 24) = a2;
    v3 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 16) + 176) + 104) + 12 * a2);
    v4 = v3[1];
    (*(void (**)(_QWORD, _QWORD))(***(_QWORD ***)(result + 32) + 56))(**(_QWORD **)(result + 32), *v3);
    result = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(v2 + 40) + 56))(**(_QWORD **)(v2 + 40), v4);
    *(_DWORD *)(v2 + 64) = *(_DWORD *)(v2 + 24);
  }
  return result;
}

uint64_t sub_19C38D7B8(uint64_t a1, int a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t result;
  int v6;
  uint64_t v7;
  unsigned int *v8;

  *(_BYTE *)(a1 + 48) = a2 == 0;
  if (*(_DWORD *)(a1 + 28))
  {
    if (a2)
    {
      v4 = *(_QWORD **)(a1 + 32);
      v3 = *(_QWORD **)(a1 + 40);
      goto LABEL_6;
    }
    return 1;
  }
  if (!a2)
    return 1;
  v3 = *(_QWORD **)(a1 + 32);
  v4 = *(_QWORD **)(a1 + 40);
LABEL_6:
  result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v3 + 64))(*v3);
  if ((_DWORD)result)
  {
    v6 = *(_DWORD *)(a1 + 28);
    v7 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v3 + 80))(*v3);
    v8 = (unsigned int *)(v7 + 4);
    if (v6)
      v8 = (unsigned int *)v7;
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v4 + 64))(*v4, *v8);
    return sub_19C38D918(a1, v3, v4);
  }
  return result;
}

uint64_t sub_19C38D86C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 48)
    || !(*(unsigned int (**)(_QWORD))(***(_QWORD ***)(a1 + 32) + 72))(**(_QWORD **)(a1 + 32)))
  {
    return 0;
  }
  else
  {
    return (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 40) + 72))(**(_QWORD **)(a1 + 40));
  }
}

uint64_t sub_19C38D8C8(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 48))
    return a1 + 52;
  else
    return a1 + 68;
}

uint64_t sub_19C38D8E0(uint64_t result)
{
  _QWORD *v1;
  _QWORD *v2;

  if (*(_BYTE *)(result + 48))
  {
    *(_BYTE *)(result + 48) = 0;
  }
  else
  {
    if (*(_DWORD *)(result + 28))
    {
      v2 = *(_QWORD **)(result + 32);
      v1 = *(_QWORD **)(result + 40);
    }
    else
    {
      v1 = *(_QWORD **)(result + 32);
      v2 = *(_QWORD **)(result + 40);
    }
    return sub_19C38D918(result, v1, v2);
  }
  return result;
}

uint64_t sub_19C38D908(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_19C38D918(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  int v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  float v17;
  int v18;
  unsigned __int8 v19;
  unsigned __int8 v20;
  BOOL v21;
  float v22;
  int v24;
  int v25;
  float v26;
  float v27;
  float v28;
  float v29;
  uint64_t v30;
  char v31;

  while (!(*(unsigned int (**)(_QWORD))(*(_QWORD *)*a2 + 72))(*a2)
       || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 72))(*a3) & 1) == 0)
  {
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*a3 + 72))(*a3))
    {
      (*(void (**)(_QWORD))(*(_QWORD *)*a2 + 88))(*a2);
      if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 72))(*a2) & 1) == 0)
      {
        do
        {
          v6 = *(_DWORD *)(a1 + 28);
          v7 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 80))(*a2);
          v8 = (unsigned int *)(v7 + 4);
          if (v6)
            v8 = (unsigned int *)v7;
          if (((*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a3 + 64))(*a3, *v8) & 1) != 0)
            break;
          (*(void (**)(_QWORD))(*(_QWORD *)*a2 + 88))(*a2);
        }
        while (!(*(unsigned int (**)(_QWORD))(*(_QWORD *)*a2 + 72))(*a2));
      }
    }
    while (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 72))(*a3) & 1) == 0)
    {
      v9 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 80))(*a2);
      v10 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 80))(*a3);
      (*(void (**)(_QWORD))(*(_QWORD *)*a3 + 88))(*a3);
      v11 = *(_DWORD *)(a1 + 28);
      if (v11)
        v12 = v10;
      else
        v12 = v9;
      v13 = *(_QWORD *)v12;
      if (*(_QWORD *)v12 <= 0xFFFFFFFEFFFFFFFFLL)
      {
        v14 = v11 ? v9 : v10;
        v15 = *(_QWORD *)v14;
        if (*(_QWORD *)v14 != -1)
        {
          v16 = *(float *)(v14 + 8);
          v17 = *(float *)(v12 + 8);
          v18 = *(_DWORD *)(v14 + 12);
          LODWORD(v30) = *(_DWORD *)(v12 + 12);
          HIDWORD(v30) = v18;
          v31 = 0;
          *(_DWORD *)(a1 + 68) = v13;
          *(_DWORD *)(a1 + 72) = HIDWORD(v15);
          v19 = atomic_load((unsigned __int8 *)&qword_1EDB96FE8);
          if ((v19 & 1) == 0)
          {
            v26 = v17;
            v28 = v16;
            v24 = __cxa_guard_acquire(&qword_1EDB96FE8);
            v17 = v26;
            v16 = v28;
            if (v24)
            {
              dword_1EDB96FF0 = -8388609;
              __cxa_guard_release(&qword_1EDB96FE8);
              v17 = v26;
              v16 = v28;
            }
          }
          if (v17 == *(float *)&dword_1EDB96FF0)
            goto LABEL_28;
          v20 = atomic_load((unsigned __int8 *)&qword_1EDB96FE8);
          if ((v20 & 1) == 0)
          {
            v27 = v17;
            v29 = v16;
            v25 = __cxa_guard_acquire(&qword_1EDB96FE8);
            v17 = v27;
            v16 = v29;
            if (v25)
            {
              dword_1EDB96FF0 = -8388609;
              __cxa_guard_release(&qword_1EDB96FE8);
              v17 = v27;
              v16 = v29;
            }
          }
          if (v16 == *(float *)&dword_1EDB96FF0)
          {
LABEL_28:
            v22 = NAN;
          }
          else
          {
            v21 = v16 == 3.4028e38 || v17 == 3.4028e38;
            v22 = v16 + v17;
            if (v21)
              v22 = 3.4028e38;
          }
          *(float *)(a1 + 76) = v22;
          *(_DWORD *)(a1 + 80) = sub_19C385428(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 176), &v30);
          return 1;
        }
      }
    }
  }
  return 0;
}

void sub_19C38DB90(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6, int a7)
{
  unsigned int *v13;
  unint64_t v14;
  _QWORD v15[3];
  _DWORD *v16;
  unint64_t v17;
  unsigned int v18[4];

  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*a6 + 56))(*a6, a3);
  v18[0] = a7 - 1;
  v18[1] = a7 << 31 >> 31;
  v18[2] = 0;
  v18[3] = a5;
  sub_19C38DD34(a1, a2, a6, v18, a7);
  v17 = 0;
  (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a4 + 120))(a4, a5, v15);
  while (1)
  {
    if (!v15[0])
    {
      v14 = v17;
      if (v17 >= v15[2])
        goto LABEL_15;
      goto LABEL_10;
    }
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v15[0] + 16))(v15[0]))
      break;
    if (!v15[0])
    {
      v14 = v17;
LABEL_10:
      v13 = (unsigned int *)(v15[1] + 16 * v14);
      goto LABEL_11;
    }
    v13 = (unsigned int *)(*(uint64_t (**)(void))(*(_QWORD *)v15[0] + 24))();
LABEL_11:
    sub_19C38DD34(a1, a2, a6, v13, a7);
    if (v15[0])
      (*(void (**)(_QWORD))(*(_QWORD *)v15[0] + 32))(v15[0]);
    else
      ++v17;
  }
  if (v15[0])
  {
    (*(void (**)(void))(*(_QWORD *)v15[0] + 8))();
    goto LABEL_17;
  }
LABEL_15:
  if (v16)
    --*v16;
LABEL_17:
  sub_19C386AA0(a1, a2);
}

void sub_19C38DCF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _DWORD *a13)
{
  if (!a10)
  {
    if (a13)
      --*a13;
    _Unwind_Resume(exception_object);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C38DD34(uint64_t a1, int a2, _QWORD *a3, unsigned int *a4, int a5)
{
  char v5;
  unsigned int *v10;
  uint64_t result;
  uint64_t v12;
  unint64_t v13;
  BOOL v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  BOOL v18;
  char v19;
  char v20;
  unint64_t v21;
  unsigned int v22;
  unsigned int v23;
  unint64_t v24;
  int v25;
  int v26;

  v5 = a5;
  v10 = a4 + 1;
  if (!a5)
    v10 = a4;
  result = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a3 + 64))(*a3, *v10);
  if ((_DWORD)result)
  {
    result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 72))(*a3);
    if ((result & 1) == 0)
    {
      if ((v5 & 1) != 0)
      {
        do
        {
          v12 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 80))(*a3);
          v13 = *(_QWORD *)v12;
          v24 = *(_QWORD *)v12;
          v25 = *(_DWORD *)(v12 + 8);
          v26 = *(_DWORD *)(v12 + 12);
          v21 = *(_QWORD *)a4;
          v22 = a4[2];
          v23 = a4[3];
          if (v21 <= 0xFFFFFFFEFFFFFFFFLL)
          {
            v14 = v13 == 0xFFFFFFFFLL;
            if (v13 == 0xFFFFFFFFLL)
              v15 = -1;
            else
              v15 = 0;
            v20 = v15;
            if (!v14)
              sub_19C38DF04(a1, a2, (float *)&v21, (uint64_t)&v24, &v20);
          }
          (*(void (**)(_QWORD))(*(_QWORD *)*a3 + 88))(*a3);
          result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 72))(*a3);
        }
        while ((result & 1) == 0);
      }
      else
      {
        do
        {
          v16 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 80))(*a3);
          v24 = *(_QWORD *)v16;
          v25 = *(_DWORD *)(v16 + 8);
          v26 = *(_DWORD *)(v16 + 12);
          v17 = *(_QWORD *)a4;
          v21 = *(_QWORD *)a4;
          v22 = a4[2];
          v23 = a4[3];
          if (v24 <= 0xFFFFFFFEFFFFFFFFLL)
          {
            v18 = v17 == 0xFFFFFFFFLL;
            v19 = v17 == 0xFFFFFFFFLL ? -1 : 0;
            v20 = v19;
            if (!v18)
              sub_19C38DF04(a1, a2, (float *)&v24, (uint64_t)&v21, &v20);
          }
          (*(void (**)(_QWORD))(*(_QWORD *)*a3 + 88))(*a3);
          result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 72))(*a3);
        }
        while (!(_DWORD)result);
      }
    }
  }
  return result;
}

void sub_19C38DF04(uint64_t a1, int a2, float *a3, uint64_t a4, char *a5)
{
  int v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  unsigned __int8 v12;
  unint64_t v13;
  float v14;
  unsigned __int8 v15;
  float v16;
  float v17;
  BOOL v18;
  float v19;
  float v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  float *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  unint64_t v41;
  float *v42;
  uint64_t v43;
  float *v44;
  int v45;
  unint64_t v46;
  int v47;
  float *v48;
  uint64_t v49;
  char v50;

  v8 = *(_DWORD *)(a4 + 12);
  *(float *)&v49 = a3[3];
  HIDWORD(v49) = v8;
  v50 = *a5;
  v9 = *(unsigned int *)a3;
  v10 = *(unsigned int *)(a4 + 4);
  v11 = a3[2];
  v12 = atomic_load((unsigned __int8 *)&qword_1EDB96FE8);
  v13 = 0x1EDB96000uLL;
  if ((v12 & 1) == 0)
  {
    v44 = a3;
    v45 = __cxa_guard_acquire(&qword_1EDB96FE8);
    v13 = 0x1EDB96000uLL;
    a3 = v44;
    if (v45)
    {
      dword_1EDB96FF0 = -8388609;
      __cxa_guard_release(&qword_1EDB96FE8);
      v13 = 0x1EDB96000;
      a3 = v44;
    }
  }
  if (v11 == *(float *)(v13 + 4080))
    goto LABEL_11;
  v14 = *(float *)(a4 + 8);
  v15 = atomic_load((unsigned __int8 *)&qword_1EDB96FE8);
  if ((v15 & 1) == 0)
  {
    v48 = a3;
    v46 = v13;
    v47 = __cxa_guard_acquire(&qword_1EDB96FE8);
    v13 = v46;
    a3 = v48;
    if (v47)
    {
      *(_DWORD *)(v46 + 4080) = -8388609;
      __cxa_guard_release(&qword_1EDB96FE8);
      v13 = v46;
      a3 = v48;
    }
  }
  if (v14 == *(float *)(v13 + 4080))
  {
LABEL_11:
    v20 = NAN;
  }
  else
  {
    v16 = a3[2];
    v17 = *(float *)(a4 + 8);
    v18 = v17 == 3.4028e38 || v16 == 3.4028e38;
    v19 = v17 + v16;
    if (v18)
      v20 = 3.4028e38;
    else
      v20 = v19;
  }
  v21 = sub_19C385428(*(_QWORD **)(a1 + 176), &v49);
  v22 = *(_QWORD *)(a1 + 120);
  v23 = sub_19C386C20(v22, a2);
  v24 = v23;
  if (*(_BYTE *)(v22 + 104))
  {
    v25 = *(_DWORD *)(v23 + 56);
    if ((v25 & 4) == 0)
    {
      *(_DWORD *)(v23 + 56) = v25 | 4;
      v26 = *(_QWORD *)(v23 + 32) - *(_QWORD *)(v23 + 24) + *(_QWORD *)(v22 + 128) + 64;
      *(_QWORD *)(v22 + 128) = v26;
      *(_BYTE *)(v22 + 120) = 1;
      if (v26 > *(_QWORD *)(v22 + 112))
        sub_19C386D88(v22, v23);
    }
  }
  v27 = v9 | (v10 << 32);
  v29 = *(_QWORD *)(v24 + 32);
  v28 = *(_QWORD *)(v24 + 40);
  if (v29 >= v28)
  {
    v31 = *(_QWORD *)(v24 + 24);
    v32 = (uint64_t)(v29 - v31) >> 4;
    v33 = v32 + 1;
    if ((unint64_t)(v32 + 1) >> 60)
      sub_19C2A18E8();
    v34 = v28 - v31;
    if (v34 >> 3 > v33)
      v33 = v34 >> 3;
    if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0)
      v35 = 0xFFFFFFFFFFFFFFFLL;
    else
      v35 = v33;
    v36 = sub_19C387E3C((uint64_t **)(v24 + 48), v35);
    v37 = (float *)&v36[2 * v32];
    v38 = &v36[2 * v35];
    *(_QWORD *)v37 = v27;
    v37[2] = v20;
    *((_DWORD *)v37 + 3) = v21;
    v30 = v37 + 4;
    v40 = *(_QWORD **)(v24 + 24);
    v39 = *(_QWORD **)(v24 + 32);
    if (v39 != v40)
    {
      v41 = 0;
      do
      {
        v42 = &v37[v41 / 4];
        *((_QWORD *)v42 - 2) = v39[v41 / 8 - 2];
        *(v42 - 2) = *(float *)&v39[v41 / 8 - 1];
        *(v42 - 1) = *((float *)&v39[v41 / 8 - 1] + 1);
        v41 -= 16;
      }
      while (&v39[v41 / 8] != v40);
      v37 = (float *)((char *)v37 + v41);
      v39 = *(_QWORD **)(v24 + 24);
    }
    *(_QWORD *)(v24 + 24) = v37;
    *(_QWORD *)(v24 + 32) = v30;
    v43 = *(_QWORD *)(v24 + 40);
    *(_QWORD *)(v24 + 40) = v38;
    if (v39)
      sub_19C37E928((uint64_t **)(v24 + 48), v39, (v43 - (uint64_t)v39) >> 4);
  }
  else
  {
    *(_QWORD *)v29 = v27;
    *(float *)(v29 + 8) = v20;
    v30 = (_QWORD *)(v29 + 16);
    *(_DWORD *)(v29 + 12) = v21;
  }
  *(_QWORD *)(v24 + 32) = v30;
}

uint64_t sub_19C38E1C4(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)a1 = &off_1E3D37EA0;
  v2 = *(_QWORD *)(a1 + 136);
  if (v2)
  {
    v3 = *(_QWORD **)v2;
    if (*(_QWORD *)v2)
    {
      if (*v3)
        (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 8))(*v3);
      MEMORY[0x1A1AD355C](v3, 0x20C4093837F09);
    }
    v4 = *(_QWORD **)(v2 + 8);
    if (v4)
    {
      if (*v4)
        (*(void (**)(_QWORD))(*(_QWORD *)*v4 + 8))(*v4);
      MEMORY[0x1A1AD355C](v4, 0x20C4093837F09);
    }
    MEMORY[0x1A1AD355C](v2, 0x60C40FFD3A10ELL);
  }
  v5 = *(_QWORD **)(a1 + 176);
  if (v5)
  {
    if (*v5)
      MEMORY[0x1A1AD355C](*v5, 0xC400A2AC0F1);
    v6 = v5[1];
    if (v6)
      MEMORY[0x1A1AD355C](v6, 0xC400A2AC0F1);
    v7 = (void *)v5[13];
    if (v7)
    {
      v5[14] = v7;
      operator delete(v7);
    }
    sub_19C380BB4((uint64_t)(v5 + 4));
    MEMORY[0x1A1AD355C](v5, 0x10E0C401DE81863);
  }
  *(_QWORD *)a1 = off_1E3D37D80;
  v8 = *(_QWORD *)(a1 + 120);
  if (v8)
  {
    v9 = sub_19C37BFF8(v8);
    MEMORY[0x1A1AD355C](v9, 0x10A0C40690396FALL);
  }
  v10 = *(void **)(a1 + 72);
  if (v10)
    operator delete(v10);
  *(_QWORD *)a1 = off_1E3D383E0;
  v11 = *(_QWORD *)(a1 + 40);
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *(_QWORD *)(a1 + 48);
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

uint64_t sub_19C38E36C(uint64_t a1)
{
  uint64_t v1;
  int v3;

  v1 = *(_QWORD *)(a1 + 8);
  if (!*(_BYTE *)(v1 + 60))
  {
    if ((*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)v1 + 24))(*(_QWORD *)(a1 + 8), 4))
    {
      *(_BYTE *)(v1 + 60) = 1;
    }
    else if (!*(_BYTE *)(v1 + 60))
    {
      v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 56))(v1);
      if (v3 != -1)
      {
        *(_DWORD *)(v1 + 64) = v3;
        *(_BYTE *)(v1 + 60) = 1;
        if (*(_DWORD *)(v1 + 68) <= v3)
          *(_DWORD *)(v1 + 68) = v3 + 1;
      }
    }
  }
  return *(unsigned int *)(v1 + 64);
}

float sub_19C38E3FC@<S0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X8>)
{
  int v3;
  _QWORD *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  int v16;
  unint64_t v17;
  float **v18;
  float *v19;
  float result;
  uint64_t v21;

  v3 = a2;
  v5 = *(_QWORD **)(a1 + 8);
  v6 = v5[15];
  v7 = *(_DWORD *)(v6 + 92);
  if (v7 == (_DWORD)a2)
  {
    v8 = *(_QWORD *)(v6 + 96);
    if (!v8)
      goto LABEL_7;
  }
  else
  {
    v9 = (int)a2 + 1;
    v10 = *(_QWORD *)(v6 + 8);
    if (v9 >= (*(_QWORD *)(v6 + 16) - v10) >> 3 || (v8 = *(_QWORD *)(v10 + 8 * v9)) == 0)
    {
LABEL_7:
      (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(*v5 + 64))(&v21, *(_QWORD *)(a1 + 8), a2);
      v12 = v21;
      v13 = v5[15];
      v14 = sub_19C386C20(v13, v3);
      v15 = (_DWORD *)v14;
      if (*(_BYTE *)(v13 + 104))
      {
        v16 = *(_DWORD *)(v14 + 56);
        if ((v16 & 4) == 0)
        {
          *(_DWORD *)(v14 + 56) = v16 | 4;
          v17 = *(_QWORD *)(v14 + 32) - *(_QWORD *)(v14 + 24) + *(_QWORD *)(v13 + 128) + 64;
          *(_QWORD *)(v13 + 128) = v17;
          *(_BYTE *)(v13 + 120) = 1;
          if (v17 > *(_QWORD *)(v13 + 112))
            sub_19C386D88(v13, v14);
        }
      }
      *v15 = v12;
      v15[14] |= 9u;
      v6 = v5[15];
      if (*(_DWORD *)(v6 + 92) == v3)
        goto LABEL_12;
LABEL_14:
      v18 = (float **)(*(_QWORD *)(v6 + 8) + 8 * v3 + 8);
      goto LABEL_15;
    }
  }
  v11 = *(_DWORD *)(v8 + 56);
  if ((v11 & 1) == 0)
    goto LABEL_7;
  *(_DWORD *)(v8 + 56) = v11 | 8;
  if (v7 != (_DWORD)a2)
    goto LABEL_14;
LABEL_12:
  v18 = (float **)(v6 + 96);
LABEL_15:
  v19 = *v18;
  result = *v19;
  *a3 = *(_DWORD *)v19;
  return result;
}

uint64_t sub_19C38E560(uint64_t a1, uint64_t a2)
{
  int v2;
  _QWORD *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;

  v2 = a2;
  v3 = *(_QWORD **)(a1 + 8);
  v4 = v3[15];
  v5 = *(_DWORD *)(v4 + 92);
  if (v5 == (_DWORD)a2)
  {
    v6 = *(_QWORD *)(v4 + 96);
    if (!v6)
      goto LABEL_7;
  }
  else
  {
    v7 = (int)a2 + 1;
    v8 = *(_QWORD *)(v4 + 8);
    if (v7 >= (*(_QWORD *)(v4 + 16) - v8) >> 3)
      goto LABEL_7;
    v6 = *(_QWORD *)(v8 + 8 * v7);
    if (!v6)
      goto LABEL_7;
  }
  v9 = *(_DWORD *)(v6 + 56);
  if ((v9 & 2) != 0)
  {
    *(_DWORD *)(v6 + 56) = v9 | 8;
    if (v5 == (_DWORD)a2)
      goto LABEL_8;
LABEL_10:
    v10 = *(_QWORD *)(v4 + 8) + 8 * v2 + 8;
    return (uint64_t)(*(_QWORD *)(*(_QWORD *)v10 + 32) - *(_QWORD *)(*(_QWORD *)v10 + 24)) >> 4;
  }
LABEL_7:
  (*(void (**)(_QWORD, uint64_t))(*v3 + 40))(*(_QWORD *)(a1 + 8), a2);
  v4 = v3[15];
  if (*(_DWORD *)(v4 + 92) != v2)
    goto LABEL_10;
LABEL_8:
  v10 = v4 + 96;
  return (uint64_t)(*(_QWORD *)(*(_QWORD *)v10 + 32) - *(_QWORD *)(*(_QWORD *)v10 + 24)) >> 4;
}

uint64_t sub_19C38E624(uint64_t a1, uint64_t a2)
{
  int v2;
  _QWORD *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;

  v2 = a2;
  v3 = *(_QWORD **)(a1 + 8);
  v4 = v3[15];
  v5 = *(_DWORD *)(v4 + 92);
  if (v5 == (_DWORD)a2)
  {
    v6 = *(_QWORD *)(v4 + 96);
    if (!v6)
      goto LABEL_7;
  }
  else
  {
    v7 = (int)a2 + 1;
    v8 = *(_QWORD *)(v4 + 8);
    if (v7 >= (*(_QWORD *)(v4 + 16) - v8) >> 3)
      goto LABEL_7;
    v6 = *(_QWORD *)(v8 + 8 * v7);
    if (!v6)
      goto LABEL_7;
  }
  v9 = *(_DWORD *)(v6 + 56);
  if ((v9 & 2) != 0)
  {
    *(_DWORD *)(v6 + 56) = v9 | 8;
    if (v5 == (_DWORD)a2)
      goto LABEL_8;
LABEL_10:
    v10 = *(_QWORD *)(v4 + 8) + 8 * v2 + 8;
    return *(_QWORD *)(*(_QWORD *)v10 + 8);
  }
LABEL_7:
  (*(void (**)(_QWORD, uint64_t))(*v3 + 40))(*(_QWORD *)(a1 + 8), a2);
  v4 = v3[15];
  if (*(_DWORD *)(v4 + 92) != v2)
    goto LABEL_10;
LABEL_8:
  v10 = v4 + 96;
  return *(_QWORD *)(*(_QWORD *)v10 + 8);
}

uint64_t sub_19C38E6E0(uint64_t a1, uint64_t a2)
{
  int v2;
  _QWORD *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;

  v2 = a2;
  v3 = *(_QWORD **)(a1 + 8);
  v4 = v3[15];
  v5 = *(_DWORD *)(v4 + 92);
  if (v5 == (_DWORD)a2)
  {
    v6 = *(_QWORD *)(v4 + 96);
    if (!v6)
      goto LABEL_7;
  }
  else
  {
    v7 = (int)a2 + 1;
    v8 = *(_QWORD *)(v4 + 8);
    if (v7 >= (*(_QWORD *)(v4 + 16) - v8) >> 3)
      goto LABEL_7;
    v6 = *(_QWORD *)(v8 + 8 * v7);
    if (!v6)
      goto LABEL_7;
  }
  v9 = *(_DWORD *)(v6 + 56);
  if ((v9 & 2) != 0)
  {
    *(_DWORD *)(v6 + 56) = v9 | 8;
    if (v5 == (_DWORD)a2)
      goto LABEL_8;
LABEL_10:
    v10 = *(_QWORD *)(v4 + 8) + 8 * v2 + 8;
    return *(_QWORD *)(*(_QWORD *)v10 + 16);
  }
LABEL_7:
  (*(void (**)(_QWORD, uint64_t))(*v3 + 40))(*(_QWORD *)(a1 + 8), a2);
  v4 = v3[15];
  if (*(_DWORD *)(v4 + 92) != v2)
    goto LABEL_10;
LABEL_8:
  v10 = v4 + 96;
  return *(_QWORD *)(*(_QWORD *)v10 + 16);
}

uint64_t sub_19C38E79C(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v5;
  uint64_t v7;

  if (!a3)
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8), a2);
  v7 = 0;
  v5 = sub_19C373950(a1, a2, &v7);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) & (~v7 | 4) | v7 & v5;
  return v5 & a2;
}

uint64_t sub_19C38E824(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) + 16;
}

uint64_t sub_19C38E830(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
}

uint64_t sub_19C38E83C(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
}

_QWORD *sub_19C38E848(_QWORD *a1)
{
  _DWORD *v2;
  int v3;

  *a1 = off_1E3D38678;
  v2 = (_DWORD *)a1[1];
  v3 = v2[14] - 1;
  v2[14] = v3;
  if (!v3)
    (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_19C38E894(_QWORD *a1)
{
  _DWORD *v1;
  int v2;

  *a1 = off_1E3D38678;
  v1 = (_DWORD *)a1[1];
  v2 = v1[14] - 1;
  v1[14] = v2;
  if (!v2)
    (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x1A1AD355CLL);
}

_QWORD *sub_19C38E8F0(uint64_t a1, int a2)
{
  _QWORD *v4;
  _DWORD *v5;

  v4 = (_QWORD *)operator new();
  *v4 = &off_1E3D37610;
  v4[1] = 0;
  v5 = *(_DWORD **)(a1 + 8);
  if (a2)
    v5 = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v5 + 32))(v5);
  else
    ++v5[14];
  v4[1] = v5;
  return v4;
}

void sub_19C38E96C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = off_1E3D38678;
  --MEMORY[0x38];
  MEMORY[0x1A1AD355C](v1, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

uint64_t sub_19C38E9AC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = operator new();
  *(_QWORD *)v4 = &off_1E3D382E0;
  *(_QWORD *)(v4 + 8) = a1;
  v5 = *a1;
  *(_QWORD *)(v4 + 16) = a1[1];
  *(_DWORD *)(v4 + 24) = 0;
  result = (*(uint64_t (**)(uint64_t *))(v5 + 16))(a1);
  *(_QWORD *)v4 = &off_1E3D37E30;
  *a2 = v4;
  return result;
}

void sub_19C38EA24(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD355C](v1, 0x10E1C408BA93049);
  _Unwind_Resume(a1);
}

uint64_t sub_19C38EA48(uint64_t result, uint64_t a2, _QWORD *a3)
{
  int v4;
  _QWORD *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t *v12;
  uint64_t v13;
  _DWORD *v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;

  v4 = a2;
  v5 = *(_QWORD **)(result + 8);
  v6 = v5[15];
  v7 = *(_DWORD *)(v6 + 92);
  if (v7 == (_DWORD)a2)
  {
    v8 = *(_QWORD *)(v6 + 96);
    if (!v8)
      goto LABEL_7;
  }
  else
  {
    v9 = (int)a2 + 1;
    v10 = *(_QWORD *)(v6 + 8);
    if (v9 >= (*(_QWORD *)(v6 + 16) - v10) >> 3)
      goto LABEL_7;
    v8 = *(_QWORD *)(v10 + 8 * v9);
    if (!v8)
      goto LABEL_7;
  }
  v11 = *(_DWORD *)(v8 + 56);
  if ((v11 & 2) != 0)
  {
    *(_DWORD *)(v8 + 56) = v11 | 8;
    if (v7 == (_DWORD)a2)
      goto LABEL_8;
    goto LABEL_10;
  }
LABEL_7:
  result = (*(uint64_t (**)(_QWORD, uint64_t))(*v5 + 40))(*(_QWORD *)(result + 8), a2);
  v6 = v5[15];
  if (*(_DWORD *)(v6 + 92) == v4)
  {
LABEL_8:
    v12 = (uint64_t *)(v6 + 96);
    goto LABEL_11;
  }
LABEL_10:
  v12 = (uint64_t *)(*(_QWORD *)(v6 + 8) + 8 * v4 + 8);
LABEL_11:
  v13 = *v12;
  v16 = *(_DWORD *)(v13 + 60);
  v14 = (_DWORD *)(v13 + 60);
  v15 = v16;
  v17 = *(_QWORD *)(v14 - 9);
  v18 = (*(_QWORD *)(v14 - 7) - v17) >> 4;
  if (*(_QWORD *)(v14 - 7) == v17)
    v17 = 0;
  *a3 = 0;
  a3[1] = v17;
  a3[2] = v18;
  a3[3] = v14;
  *v14 = v15 + 1;
  return result;
}

uint64_t sub_19C38EB34(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8), a1, a2);
}

void sub_19C38EB50()
{
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C38EB64(uint64_t a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int *v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  int v30;
  BOOL v31;
  _BOOL8 v32;

  v2 = *(_DWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 16);
  if (v2 >= *(_DWORD *)(v3 + 68))
  {
    v5 = sub_19C38ED70(v3);
    v4 = 1;
    if ((int)v5 >= *(_DWORD *)(*(_QWORD *)(a1 + 16) + 68))
      return v4;
    v6 = v5;
    while (1)
    {
      v7 = *(_QWORD *)(a1 + 8);
      v8 = *(_QWORD *)(*(_QWORD *)(v7 + 8) + 120);
      v9 = sub_19C386C20(v8, v6);
      v10 = v9;
      if (*(_BYTE *)(v8 + 104))
      {
        v11 = *(_DWORD *)(v9 + 56);
        if ((v11 & 4) == 0)
        {
          *(_DWORD *)(v9 + 56) = v11 | 4;
          v12 = *(_QWORD *)(v9 + 32) - *(_QWORD *)(v9 + 24) + *(_QWORD *)(v8 + 128) + 64;
          *(_QWORD *)(v8 + 128) = v12;
          *(_BYTE *)(v8 + 120) = 1;
          if (v12 > *(_QWORD *)(v8 + 112))
            sub_19C386D88(v8, v9);
        }
      }
      ++*(_DWORD *)(v10 + 60);
      v13 = *(_QWORD **)(v7 + 8);
      v14 = v13[15];
      if (*(_DWORD *)(v14 + 92) == (_DWORD)v6)
      {
        v15 = *(_QWORD *)(v14 + 96);
        if (!v15)
          goto LABEL_15;
      }
      else
      {
        v16 = (int)v6 + 1;
        v18 = v14 + 8;
        v17 = *(_QWORD *)(v14 + 8);
        if (v16 >= (*(_QWORD *)(v18 + 8) - v17) >> 3 || (v15 = *(_QWORD *)(v17 + 8 * v16)) == 0)
        {
LABEL_15:
          (*(void (**)(_QWORD *, uint64_t))(*v13 + 40))(v13, v6);
          goto LABEL_17;
        }
      }
      v19 = *(_DWORD *)(v15 + 56);
      if ((v19 & 2) == 0)
        goto LABEL_15;
      *(_DWORD *)(v15 + 56) = v19 | 8;
LABEL_17:
      v20 = *(_QWORD *)(v10 + 24);
      v21 = *(_QWORD *)(a1 + 16);
      v22 = *(_QWORD *)(v10 + 32) - v20;
      if (v22)
      {
        v23 = v22 >> 4;
        v24 = *(_DWORD *)(v21 + 68);
        v25 = (int *)(v20 + 12);
        do
        {
          v27 = *v25;
          v25 += 4;
          v26 = v27;
          if (v24 <= v27)
          {
            v24 = v26 + 1;
            *(_DWORD *)(v21 + 68) = v26 + 1;
          }
          --v23;
        }
        while (v23);
      }
      sub_19C38701C(v21, v6);
      v28 = *(_DWORD *)(a1 + 24);
      v29 = *(_QWORD *)(a1 + 16);
      v30 = *(_DWORD *)(v29 + 68);
      --*(_DWORD *)(v10 + 60);
      v31 = v28 < v30;
      v32 = v28 >= v30;
      if (v31)
        return v32;
      v6 = sub_19C38ED70(v29);
      if ((int)v6 >= *(_DWORD *)(*(_QWORD *)(a1 + 16) + 68))
        return 1;
    }
  }
  return 0;
}

void sub_19C38ED3C(_Unwind_Exception *a1)
{
  uint64_t v1;

  --*(_DWORD *)(v1 + 60);
  _Unwind_Resume(a1);
}

uint64_t sub_19C38ED50(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t sub_19C38ED58(uint64_t result)
{
  ++*(_DWORD *)(result + 24);
  return result;
}

uint64_t sub_19C38ED68(uint64_t result)
{
  *(_DWORD *)(result + 24) = 0;
  return result;
}

uint64_t sub_19C38ED70(uint64_t a1)
{
  uint64_t v1;
  int v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;

  v1 = *(unsigned int *)(a1 + 96);
  v2 = *(_DWORD *)(a1 + 100);
  if ((int)v1 > v2)
    return v1;
  v3 = (int)v1;
  if (*(_BYTE *)(a1 + 104))
  {
    v4 = *(_QWORD *)(a1 + 72);
    v5 = (v2 + 1);
    v6 = v1 - 1;
    while (((*(_QWORD *)(v4 + ((v3 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v3) & 1) != 0)
    {
      ++v3;
      *(_DWORD *)(a1 + 96) = v6 + 2;
      if (v2 == ++v6)
        return v5;
    }
    return v3;
  }
  if (!*(_QWORD *)(a1 + 112))
  {
    v14 = *(_QWORD *)(a1 + 72);
    v5 = (v2 + 1);
    v15 = v1 - 1;
    while (((*(_QWORD *)(v14 + ((v3 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v3) & 1) != 0)
    {
      ++v3;
      *(_DWORD *)(a1 + 96) = v15 + 2;
      if (v2 == ++v15)
        return v5;
    }
    return v3;
  }
  if (*(_BYTE *)(a1 + 128))
  {
    v8 = *(_QWORD *)(a1 + 120);
    v9 = *(int *)(v8 + 92);
    v10 = 8 * (int)v1 + 8;
    v11 = v1 - 1;
    while (1)
    {
      v12 = (_QWORD *)(v8 + 96);
      if (v9 != v3)
      {
        v13 = *(_QWORD *)(v8 + 8);
        if (v3 + 1 >= (*(_QWORD *)(v8 + 16) - v13) >> 3)
          return v3;
        v12 = (_QWORD *)(v13 + v10);
      }
      if (!*v12)
        break;
      ++v3;
      *(_DWORD *)(a1 + 96) = v11 + 2;
      v10 += 8;
      if (v2 == ++v11)
        return (v2 + 1);
    }
    return v3;
  }
  return v1;
}

void sub_19C38EE98()
{
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C38EEAC(uint64_t a1, size_t prime, _QWORD *a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  int8x8_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t v13;

  v8 = operator new();
  *(_QWORD *)(v8 + 24) = 0;
  *(_QWORD *)(v8 + 32) = 0;
  *(_QWORD *)(v8 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_OWORD *)v8 = xmmword_19C46DEE0;
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 24) = 0;
  v9 = operator new();
  *(_OWORD *)v9 = xmmword_19C46DEE0;
  *(_QWORD *)(v9 + 24) = 0;
  *(_QWORD *)(v9 + 32) = 0;
  *(_QWORD *)(v9 + 16) = 0;
  *(_QWORD *)(a1 + 32) = v9;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = *a3;
  *(_DWORD *)(a1 + 56) = 1065353216;
  *(_QWORD *)(a1 + 64) = *a4;
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
  }
  v10 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v10)
    goto LABEL_6;
  if (prime < *(_QWORD *)&v10)
  {
    v11 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 40) / *(float *)(a1 + 56));
    if (*(_QWORD *)&v10 < 3uLL || (v12 = (uint8x8_t)vcnt_s8(v10), v12.i16[0] = vaddlv_u8(v12), v12.u32[0] > 1uLL))
    {
      v11 = std::__next_prime(v11);
    }
    else
    {
      v13 = 1 << -(char)__clz(v11 - 1);
      if (v11 >= 2)
        v11 = v13;
    }
    if (prime <= v11)
      prime = v11;
    if (prime < *(_QWORD *)&v10)
LABEL_6:
      sub_19C38F038(a1, prime);
  }
  return a1;
}

void sub_19C38F010(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_19C38F1EC(v1);
  _Unwind_Resume(a1);
}

void sub_19C38F024(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_19C38093C(v1);
  _Unwind_Resume(a1);
}

void sub_19C38F038(uint64_t a1, unint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;

  if (!a2)
  {
    v15 = *(_QWORD **)a1;
    *(_QWORD *)a1 = 0;
    if (v15)
      sub_19C381878((uint64_t **)(a1 + 16), v15, *(_QWORD *)(a1 + 8));
    *(_QWORD *)(a1 + 8) = 0;
    return;
  }
  v4 = sub_19C381110((uint64_t **)(a1 + 16), a2);
  v5 = *(_QWORD **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
    sub_19C381878((uint64_t **)(a1 + 16), v5, *(_QWORD *)(a1 + 8));
  v6 = 0;
  *(_QWORD *)(a1 + 8) = a2;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
  while (a2 != v6);
  v8 = a1 + 24;
  v7 = *(_QWORD **)(a1 + 24);
  if (v7)
  {
    v9 = v7[1];
    v10 = a2 - 1;
    if ((a2 & (a2 - 1)) == 0)
    {
      v11 = v9 & v10;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v11) = v8;
      while (1)
      {
        v12 = (_QWORD *)*v7;
        if (!*v7)
          break;
        v13 = v12[1] & v10;
        if (v13 == v11)
        {
          v7 = (_QWORD *)*v7;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v13))
        {
          *v7 = *v12;
          v14 = 8 * v13;
          *v12 = **(_QWORD **)(*(_QWORD *)a1 + v14);
          **(_QWORD **)(*(_QWORD *)a1 + v14) = v12;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v13) = v7;
          v7 = v12;
          v11 = v13;
        }
      }
      return;
    }
    if (v9 >= a2)
      v9 %= a2;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v9) = v8;
    v16 = (_QWORD *)*v7;
    if (*v7)
    {
      do
      {
        v18 = v16[1];
        if (v18 >= a2)
          v18 %= a2;
        if (v18 != v9)
        {
          if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v18))
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v18) = v7;
            goto LABEL_25;
          }
          *v7 = *v16;
          v17 = 8 * v18;
          *v16 = **(_QWORD **)(*(_QWORD *)a1 + v17);
          **(_QWORD **)(*(_QWORD *)a1 + v17) = v16;
          v16 = v7;
        }
        v18 = v9;
LABEL_25:
        v7 = v16;
        v16 = (_QWORD *)*v16;
        v9 = v18;
      }
      while (v16);
    }
  }
}

uint64_t sub_19C38F1EC(uint64_t a1)
{
  _QWORD *v2;
  uint64_t **v3;
  _QWORD *v4;
  uint64_t *v5;
  uint64_t v6;
  _QWORD *v7;
  _BYTE *v8;
  unint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD **)(a1 + 24);
  v3 = (uint64_t **)(a1 + 32);
  while (v2)
  {
    v4 = (_QWORD *)*v2;
    sub_19C380C80(v3, (uint64_t)v2);
    v2 = v4;
  }
  v5 = *v3;
  v6 = v5[1] - 1;
  v5[1] = v6;
  if (!v6)
  {
    v7 = (_QWORD *)v5[2];
    v8 = (_BYTE *)v5[3];
    if (v8 == (_BYTE *)v7)
    {
      v7 = (_QWORD *)v5[3];
    }
    else
    {
      v9 = 0;
      do
      {
        v10 = v7[v9];
        if (v10)
        {
          (*(void (**)(_QWORD))(*(_QWORD *)v10 + 8))(v7[v9]);
          v7 = (_QWORD *)v5[2];
          v8 = (_BYTE *)v5[3];
        }
        ++v9;
      }
      while (v9 < (v8 - (_BYTE *)v7) >> 3);
    }
    if (v7)
    {
      v5[3] = (uint64_t)v7;
      operator delete(v7);
    }
    MEMORY[0x1A1AD355C](v5, 0x1080C40B69A5871);
  }
  return sub_19C38093C(a1);
}

uint64_t sub_19C38F2B8(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;

  v9 = a5;
  if (!a5)
  {
    v9 = operator new();
    v11 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3);
    *(_QWORD *)v9 = v11;
    if (!v11)
    {
      v12 = operator new();
      sub_19C3839E8(v12, a2, a3);
      *(_QWORD *)v9 = v12;
    }
    *(_BYTE *)(v9 + 8) = 0;
  }
  *(_QWORD *)a1 = v9;
  *(_DWORD *)(a1 + 8) = a4;
  *(_BYTE *)(a1 + 12) = a5 == 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 16) = a1 + 24;
  *(_QWORD *)(a1 + 40) = -1;
  *(_QWORD *)(a1 + 48) = 0;
  if ((_DWORD)a3)
    v13 = 0;
  else
    v13 = -1;
  if ((_DWORD)a3)
    v14 = -1;
  else
    v14 = 0;
  *(_DWORD *)(a1 + 60) = v13;
  *(_DWORD *)(a1 + 64) = v14;
  *(_QWORD *)(a1 + 68) = 0xFFFFFFFF00000000;
  return a1;
}

void sub_19C38F3B8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  MEMORY[0x1A1AD355C](v2, 0x10E1C4003B7394BLL);
  MEMORY[0x1A1AD355C](v1, 0x1020C405F07FB98);
  _Unwind_Resume(a1);
}

uint64_t sub_19C38F3FC(uint64_t a1)
{
  _QWORD *v2;

  if (*(_BYTE *)(a1 + 12))
  {
    v2 = *(_QWORD **)a1;
    if (*(_QWORD *)a1)
    {
      if (*v2)
        (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 8))(*v2);
      MEMORY[0x1A1AD355C](v2, 0x1020C405F07FB98);
    }
  }
  sub_19C33275C(*(_QWORD **)(a1 + 24));
  return a1;
}

uint64_t sub_19C38F460(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;

  v2 = *(_QWORD **)(a1 + 48);
  if (v2)
  {
    if (*v2)
      (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 8))(*v2);
    MEMORY[0x1A1AD355C](v2, 0x1020C405F07FB98);
  }
  v3 = *(_QWORD **)(a1 + 56);
  if (v3)
  {
    if (*v3)
      (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 8))(*v3);
    MEMORY[0x1A1AD355C](v3, 0x1020C405F07FB98);
  }
  v4 = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    if (*v4)
      (*(void (**)(_QWORD))(*(_QWORD *)*v4 + 8))(*v4);
    MEMORY[0x1A1AD355C](v4, 0x1020C405F07FB98);
  }
  v5 = *(_QWORD **)(a1 + 8);
  if (v5)
  {
    if (*v5)
      (*(void (**)(_QWORD))(*(_QWORD *)*v5 + 8))(*v5);
    MEMORY[0x1A1AD355C](v5, 0x1020C405F07FB98);
  }
  return a1;
}

uint64_t sub_19C38F550(_QWORD *a1, _QWORD *a2)
{
  int v4;
  int v5;
  uint64_t v6;
  unsigned int (*v7)(uint64_t, uint64_t);
  uint64_t v8;

  v4 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a1 + 24))(*a1, 0);
  v5 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a2 + 24))(*a2, 0);
  if (v4 == 1 && ((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 48))(*a1) & 0x20) != 0)
    return 1;
  if (!v5 && ((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 48))(*a2) & 0x10) != 0)
    return 0;
  if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 48))(*a1) & 0x20) == 0
    || (v6 = *a1,
        v7 = *(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)*a1 + 24),
        v8 = 1,
        v7(v6, 1) != 1))
  {
    if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 48))(*a2) & 0x10) == 0
      || (*(unsigned int (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 24))(*a2, 1))
    {
      return 3;
    }
    return 0;
  }
  return v8;
}

BOOL sub_19C38F654(unsigned __int8 *a1)
{
  int v1;
  int v3;
  _QWORD *v4;
  void *__p[2];
  char v7;

  v1 = a1[8];
  if (!a1[8])
  {
    v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)a1 + 48))(*(_QWORD *)a1) & 0x30;
    v1 = v3 != 0;
    a1[8] = v1;
    if (!v3)
    {
      v7 = 5;
      strcpy((char *)__p, "FATAL");
      v4 = sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)__p, 5);
      sub_19C2A1B24(v4, (uint64_t)": ", 2);
      sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)"LookAheadMatcher: No look-ahead matcher defined", 47);
      sub_19C351928();
      if (v7 < 0)
        operator delete(__p[0]);
      v1 = a1[8];
    }
  }
  return v1 != 0;
}

void sub_19C38F718(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  sub_19C351928();
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_19C38F740(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    if (*v2)
      (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 8))(*v2);
    MEMORY[0x1A1AD355C](v2, 0x1020C405F07FB98);
  }
  v3 = *(_QWORD **)(a1 + 8);
  if (v3)
  {
    if (*v3)
      (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 8))(*v3);
    MEMORY[0x1A1AD355C](v3, 0x1020C405F07FB98);
  }
  return a1;
}

void sub_19C38F7CC(uint64_t a1)
{
  sub_19C392190(a1);
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C38F7F0(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, 0x3FFFFFFF0007);
}

uint64_t sub_19C38F804(uint64_t a1, uint64_t a2)
{
  char v4;

  if ((a2 & 4) != 0)
  {
    if ((*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 160) + 56))(*(_QWORD *)(a1 + 160), 4, 0)|| (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 168) + 56))(*(_QWORD *)(a1 + 168), 4, 0)|| ((*(uint64_t (**)(_QWORD, _QWORD))(****(_QWORD ****)(a1 + 144) + 40))(***(_QWORD ***)(a1 + 144), 0) & 4) != 0|| (v4 = (*(uint64_t (**)(_QWORD, _QWORD))(****(_QWORD ****)(a1 + 152) + 40))(***(_QWORD ***)(a1 + 152), 0), *(_DWORD *)(*(_QWORD *)(a1 + 136) + 40) == 3)|| (v4 & 4) != 0)
    {
      *(_QWORD *)(a1 + 8) |= 4uLL;
    }
  }
  return *(_QWORD *)(a1 + 8) & a2;
}

uint64_t sub_19C38F8C4(uint64_t a1)
{
  uint64_t v2;
  _QWORD **v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  int v9;
  _BYTE *v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t *v21;

  v2 = operator new();
  sub_19C388690(v2, a1);
  *(_QWORD *)v2 = &off_1E3D37FA8;
  v3 = (_QWORD **)operator new();
  v4 = *(_QWORD *)(a1 + 136);
  v5 = *(_BYTE **)v4;
  v6 = operator new();
  *(_QWORD *)v6 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)v5 + 16))(*(_QWORD *)v5, 1);
  *(_BYTE *)(v6 + 8) = v5[8];
  *v3 = (_QWORD *)v6;
  v7 = *(_BYTE **)(v4 + 8);
  v8 = operator new();
  *(_QWORD *)v8 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)v7 + 16))(*(_QWORD *)v7, 1);
  *(_BYTE *)(v8 + 8) = v7[8];
  v3[1] = (_QWORD *)v8;
  v3[2] = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)**v3 + 32))(**v3);
  v3[3] = (_QWORD *)-1;
  *((_BYTE *)v3 + 32) = -1;
  v9 = *(_DWORD *)(v4 + 40);
  *((_DWORD *)v3 + 10) = v9;
  v11 = *v3;
  v10 = v3[1];
  v12 = operator new();
  *(_QWORD *)v12 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)v11 + 16))(*(_QWORD *)v11, 0);
  *(_BYTE *)(v12 + 8) = v11[8];
  v3[6] = (_QWORD *)v12;
  v13 = operator new();
  *(_QWORD *)v13 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)v10 + 16))(*(_QWORD *)v10, 0);
  *(_BYTE *)(v13 + 8) = v10[8];
  v3[7] = (_QWORD *)v13;
  *((_DWORD *)v3 + 16) = v9;
  *((_DWORD *)v3 + 18) = *(_DWORD *)(v4 + 72);
  v14 = 7;
  if (v9 == 1)
    v15 = 6;
  else
    v15 = 7;
  v16 = (unsigned __int8 *)v3[v15];
  if (v9 != 1)
    v14 = 6;
  v17 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v3[v14] + 32))(*v3[v14]);
  if (sub_19C38F654(v16))
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)v16 + 112))(*(_QWORD *)v16, v17, 1);
  *((_BYTE *)v3 + 80) = -1;
  *((_DWORD *)v3 + 21) = 2139095039;
  *((_BYTE *)v3 + 88) = -1;
  *(_QWORD **)((char *)v3 + 92) = (_QWORD *)-2155872257;
  v3[13] = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)**v3 + 32))(**v3);
  v3[14] = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v3[1] + 32))(*v3[1]);
  if (*((_DWORD *)v3 + 10) == 1)
    v18 = 1;
  else
    v18 = 2;
  sub_19C38F2B8((uint64_t)(v3 + 15), (uint64_t)v3[13], 1, v18, (uint64_t)*v3);
  if (*((_DWORD *)v3 + 10) == 1)
    v19 = 2;
  else
    v19 = 1;
  v20 = sub_19C38F2B8((uint64_t)(v3 + 25), (uint64_t)v3[14], 0, v19, (uint64_t)v3[1]);
  *(_QWORD *)(v2 + 136) = v3;
  *(_QWORD *)(v2 + 144) = v3 + 15;
  *(_QWORD *)(v2 + 152) = v20;
  *(_QWORD *)(v2 + 160) = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v3[15] + 32))(*v3[15]);
  *(_QWORD *)(v2 + 168) = (*(uint64_t (**)(_QWORD))(****(_QWORD ****)(v2 + 152) + 32))(***(_QWORD ***)(v2 + 152));
  v21 = (uint64_t *)operator new();
  sub_19C392014(v21, *(_QWORD **)(a1 + 176));
  *(_QWORD *)(v2 + 176) = v21;
  *(_DWORD *)(v2 + 184) = *(_DWORD *)(a1 + 184);
  return v2;
}

void sub_19C38FBEC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  MEMORY[0x1A1AD355C](v2, 0x10E0C401DE81863);
  sub_19C37BDD0(v1);
  MEMORY[0x1A1AD355C](v1, 0x10F3C405A371F01);
  _Unwind_Resume(a1);
}

void sub_19C38FCDC()
{
  JUMPOUT(0x19C38FCB4);
}

void sub_19C38FCE4(uint64_t a1, int a2, __n128 a3)
{
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v13;
  _BOOL4 v14;
  _QWORD *v16;
  void *__p;
  unsigned int v18;
  char v19;

  v5 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 176) + 104) + 20 * a2);
  v6 = *v5;
  v7 = v5[1];
  v8 = *(_QWORD *)(a1 + 136);
  LOBYTE(__p) = *((_BYTE *)v5 + 8);
  HIDWORD(__p) = v5[3];
  a3.n128_u32[0] = HIDWORD(__p);
  v18 = v5[4];
  sub_19C390448(v8, v6, v7, (unsigned __int8 *)&__p, a3);
  v9 = *(_DWORD *)(a1 + 184);
  if (v9)
  {
    if (v9 == 1)
      goto LABEL_18;
    v10 = (*(uint64_t (**)(_QWORD, uint64_t))(****(_QWORD ****)(a1 + 144) + 104))(***(_QWORD ***)(a1 + 144), v6);
    v11 = (*(uint64_t (**)(_QWORD, uint64_t))(****(_QWORD ****)(a1 + 152) + 104))(***(_QWORD ***)(a1 + 152), v7);
    if (v10 == -1 && v11 == -1)
    {
      v19 = 5;
      strcpy((char *)&__p, "FATAL");
      v16 = sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)&__p, 5);
      sub_19C2A1B24(v16, (uint64_t)": ", 2);
      sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)"ComposeFst: both sides can't require match", 42);
      sub_19C351928();
      if (v19 < 0)
        operator delete(__p);
      *(_QWORD *)(a1 + 8) |= 4uLL;
      goto LABEL_22;
    }
    v13 = v11 == -1 || v10 <= v11;
    v14 = v13;
    if (v10 == -1 || !v14)
    {
LABEL_18:
      sub_19C390D18(a1, a2, v6, *(_QWORD *)(a1 + 168), v7, *(_QWORD ***)(a1 + 144), 0);
      return;
    }
  }
LABEL_22:
  sub_19C390D18(a1, a2, v7, *(_QWORD *)(a1 + 160), v6, *(_QWORD ***)(a1 + 152), 1);
}

void sub_19C38FE94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  sub_19C351928();
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_19C38FEBC(uint64_t a1, uint64_t a2, int a3)
{
  if ((*(unsigned int (**)(_QWORD, _QWORD))(****(_QWORD ****)(a1 + 144) + 24))(***(_QWORD ***)(a1 + 144), 0) == a3)(*(void (**)(_QWORD, _QWORD))(****(_QWORD ****)(a1 + 152) + 24))(***(_QWORD ***)(a1 + 152), 0);
  return 0;
}

uint64_t sub_19C38FF20(uint64_t a1)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  _QWORD *v5;
  uint64_t *v6;
  unint64_t v7;
  unint64_t *v9;
  unint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  int v26;

  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 160) + 16))(*(_QWORD *)(a1 + 160));
  if (v2 == -1)
    return 0xFFFFFFFFLL;
  v3 = v2;
  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 168) + 16))(*(_QWORD *)(a1 + 168));
  if (v4 == -1)
    return 0xFFFFFFFFLL;
  v23 = __PAIR64__(v4, v3);
  v24 = 0;
  v25 = 0xFFFFFFFF00000000;
  v5 = *(_QWORD **)(a1 + 176);
  v5[16] = &v23;
  v6 = sub_19C390784(v5 + 4);
  if (v6)
    return *((unsigned int *)v6 + 4);
  v9 = (unint64_t *)v5[13];
  v10 = (unint64_t *)v5[14];
  v11 = ((char *)v10 - (char *)v9) >> 2;
  v7 = 0xCCCCCCCCCCCCCCCDLL * v11;
  v26 = -858993459 * v11;
  v12 = v5[15];
  if ((unint64_t)v10 >= v12)
  {
    v14 = v7 + 1;
    if (v7 + 1 > 0xCCCCCCCCCCCCCCCLL)
      sub_19C2A18E8();
    v15 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v12 - (_QWORD)v9) >> 2);
    if (2 * v15 > v14)
      v14 = 2 * v15;
    if (v15 >= 0x666666666666666)
      v16 = 0xCCCCCCCCCCCCCCCLL;
    else
      v16 = v14;
    if (v16 > 0xCCCCCCCCCCCCCCCLL)
      sub_19C2A143C();
    v17 = 20 * v16;
    v18 = (char *)operator new(20 * v16);
    v19 = &v18[20 * v7];
    v20 = &v18[v17];
    *(_QWORD *)v19 = v23;
    v19[8] = 0;
    *(_QWORD *)(v19 + 12) = 0xFFFFFFFF00000000;
    v13 = v19 + 20;
    if (v10 != v9)
    {
      v21 = 0;
      do
      {
        v22 = &v19[v21];
        *(_QWORD *)(v22 - 20) = *(unint64_t *)((char *)v10 + v21 - 20);
        *(v22 - 12) = *((_BYTE *)v10 + v21 - 12);
        *((_DWORD *)v22 - 2) = *(_DWORD *)((char *)v10 + v21 - 8);
        *((_DWORD *)v22 - 1) = *(_DWORD *)((char *)v10 + v21 - 4);
        v21 -= 20;
      }
      while ((unint64_t *)((char *)v10 + v21) != v9);
      v19 += v21;
    }
    v5[13] = v19;
    v5[14] = v13;
    v5[15] = v20;
    if (v9)
      operator delete(v9);
  }
  else
  {
    *v10 = v23;
    *((_BYTE *)v10 + 8) = v24;
    *(unint64_t *)((char *)v10 + 12) = v25;
    v13 = (char *)v10 + 20;
  }
  v5[14] = v13;
  sub_19C3908C0((uint64_t)(v5 + 4), v7, &v26);
  return v7;
}

void sub_19C390110(uint64_t a1@<X0>, int a2@<W1>, _DWORD *a3@<X8>)
{
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  float v15;
  float v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  float v19;
  float v20;
  unsigned __int8 v21;
  float v22;
  unsigned __int8 v23;
  BOOL v24;
  int v25;
  int v26;
  int v27;
  int v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  int v34;
  unsigned __int32 v35;
  int v36;
  uint64_t v37;
  int v38;

  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 176) + 104);
  v7 = (unsigned int *)(v6 + 20 * a2);
  v8 = *v7;
  (*(void (**)(char *__return_ptr, _QWORD, uint64_t))(****(_QWORD ****)(a1 + 144) + 96))((char *)&v37 + 4, ***(_QWORD ***)(a1 + 144), v8);
  v9.n128_u32[0] = HIDWORD(v37);
  v34 = HIDWORD(v37);
  v38 = 2139095039;
  if (*((float *)&v37 + 1) != 3.4028e38)
  {
    v10 = v7[1];
    (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(****(_QWORD ****)(a1 + 152) + 96))(&v37, ***(_QWORD ***)(a1 + 152), v10);
    v9.n128_u32[0] = v37;
    v34 = v37;
    v38 = 2139095039;
    if (*(float *)&v37 != 3.4028e38)
    {
      v11 = *(_QWORD *)(a1 + 136);
      v12 = v6 + 20 * a2;
      LOBYTE(v34) = *(_BYTE *)(v12 + 8);
      v35 = *(_DWORD *)(v12 + 12);
      v9.n128_u32[0] = v35;
      v36 = *(_DWORD *)(v12 + 16);
      sub_19C390448(v11, v8, v10, (unsigned __int8 *)&v34, v9);
      v13 = *(_QWORD *)(a1 + 136);
      v14 = *(_DWORD *)(v13 + 72);
      if ((v14 & 0x40) != 0)
      {
        v15 = *((float *)&v37 + 1);
        v34 = HIDWORD(v37);
        v38 = 2139095039;
        if (*((float *)&v37 + 1) != 3.4028e38)
        {
          v16 = *(float *)(v13 + 84);
          v17 = atomic_load((unsigned __int8 *)&qword_1EDB96FE8);
          if ((v17 & 1) == 0)
          {
            v29 = *((float *)&v37 + 1);
            v32 = *(float *)(v13 + 84);
            v27 = __cxa_guard_acquire(&qword_1EDB96FE8);
            v15 = v29;
            v16 = v32;
            if (v27)
            {
              dword_1EDB96FF0 = -8388609;
              __cxa_guard_release(&qword_1EDB96FE8);
              v15 = v29;
              v16 = v32;
            }
          }
          if (v15 == *(float *)&dword_1EDB96FF0)
            goto LABEL_10;
          v18 = atomic_load((unsigned __int8 *)&qword_1EDB96FE8);
          if ((v18 & 1) == 0)
          {
            v33 = v16;
            v28 = __cxa_guard_acquire(&qword_1EDB96FE8);
            v16 = v33;
            if (v28)
            {
              dword_1EDB96FF0 = -8388609;
              __cxa_guard_release(&qword_1EDB96FE8);
              v16 = v33;
            }
          }
          if (v16 == *(float *)&dword_1EDB96FF0 || v16 == 3.4028e38)
          {
LABEL_10:
            v19 = NAN;
          }
          else
          {
            v19 = 3.4028e38;
            if (*((float *)&v37 + 1) != 3.4028e38)
              v19 = *((float *)&v37 + 1) - v16;
          }
          *((float *)&v37 + 1) = v19;
          v14 = *(_DWORD *)(v13 + 72);
        }
      }
      if ((v14 & 0x80) != 0)
      {
        v20 = *((float *)&v37 + 1);
        v34 = HIDWORD(v37);
        v38 = 2139095039;
        if (*((float *)&v37 + 1) != 3.4028e38 && *(_DWORD *)(v13 + 96) != -1)
        {
          HIDWORD(v37) = 2139095039;
          v20 = 3.4028e38;
        }
      }
      else
      {
        v20 = *((float *)&v37 + 1);
      }
      v21 = atomic_load((unsigned __int8 *)&qword_1EDB96FE8);
      if ((v21 & 1) == 0)
      {
        v30 = v20;
        v25 = __cxa_guard_acquire(&qword_1EDB96FE8);
        v20 = v30;
        if (v25)
        {
          dword_1EDB96FF0 = -8388609;
          __cxa_guard_release(&qword_1EDB96FE8);
          v20 = v30;
        }
      }
      if (v20 == *(float *)&dword_1EDB96FF0)
        goto LABEL_27;
      v22 = *(float *)&v37;
      v23 = atomic_load((unsigned __int8 *)&qword_1EDB96FE8);
      if ((v23 & 1) == 0)
      {
        v31 = *(float *)&v37;
        v26 = __cxa_guard_acquire(&qword_1EDB96FE8);
        v22 = v31;
        if (v26)
        {
          dword_1EDB96FF0 = -8388609;
          __cxa_guard_release(&qword_1EDB96FE8);
          v22 = v31;
        }
      }
      if (v22 == *(float *)&dword_1EDB96FF0)
      {
LABEL_27:
        v9.n128_u32[0] = 2143289344;
      }
      else
      {
        v24 = *(float *)&v37 == 3.4028e38 || *((float *)&v37 + 1) == 3.4028e38;
        v9.n128_f32[0] = *(float *)&v37 + *((float *)&v37 + 1);
        if (v24)
          v9.n128_f32[0] = 3.4028e38;
      }
    }
  }
  *a3 = v9.n128_u32[0];
}

void sub_19C390448(uint64_t a1, uint64_t a2, int a3, unsigned __int8 *a4, __n128 a5)
{
  uint64_t v7;
  uint64_t v8;
  BOOL v10;
  uint64_t v11;
  unsigned int v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;

  *(_BYTE *)(a1 + 88) = *a4;
  *(_DWORD *)(a1 + 92) = *((_DWORD *)a4 + 1);
  *(_DWORD *)(a1 + 96) = *((_DWORD *)a4 + 2);
  *(_BYTE *)(a1 + 80) = *a4;
  a5.n128_u32[0] = *((_DWORD *)a4 + 1);
  *(_DWORD *)(a1 + 84) = a5.n128_u32[0];
  if (*(_DWORD *)(a1 + 24) != (_DWORD)a2 || *(_DWORD *)(a1 + 28) != a3 || *a4 != *(unsigned __int8 *)(a1 + 32))
  {
    *(_DWORD *)(a1 + 24) = a2;
    *(_DWORD *)(a1 + 28) = a3;
    *(_BYTE *)(a1 + 32) = *a4;
    v7 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), a2);
    v8 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 48))(*(_QWORD *)(a1 + 16), a2);
    (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 24))(&v14, *(_QWORD *)(a1 + 16), a2);
    v15 = v14;
    HIDWORD(v14) = 2139095039;
    a5.n128_u32[0] = v14;
    v10 = *(float *)&v14 == 3.4028e38 && v7 == v8;
    *(_BYTE *)(a1 + 33) = v10;
    *(_BYTE *)(a1 + 34) = v8 == 0;
  }
  if ((*(_BYTE *)(a1 + 72) & 0x80) != 0)
  {
    if (*(_DWORD *)(a1 + 40) == 1)
      v11 = (*(uint64_t (**)(__n128))(**(_QWORD **)(a1 + 104) + 32))(a5);
    else
      v11 = (*(uint64_t (**)(__n128))(**(_QWORD **)(a1 + 112) + 32))(a5);
    *(_QWORD *)(a1 + 280) = v11;
    v12 = *(_DWORD *)(a1 + 96);
    sub_19C33275C(*(_QWORD **)(a1 + 144));
    v13 = *(_QWORD **)(a1 + 224);
    *(_QWORD *)(a1 + 136) = a1 + 144;
    *(_QWORD *)(a1 + 144) = 0;
    *(_QWORD *)(a1 + 152) = 0;
    *(_QWORD *)(a1 + 160) = -1;
    sub_19C33275C(v13);
    *(_QWORD *)(a1 + 216) = a1 + 224;
    *(_QWORD *)(a1 + 224) = 0;
    *(_QWORD *)(a1 + 232) = 0;
    *(_QWORD *)(a1 + 240) = -1;
    if (v12 != -1)
    {
      sub_19C390608(a1 + 120, v12);
      sub_19C390608(a1 + 200, v12);
    }
  }
}

void sub_19C390608(uint64_t a1, unsigned int a2)
{
  uint64_t *v4;
  uint64_t **v5;
  uint64_t **v6;
  unsigned int v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t *v10;
  _QWORD *v11;
  unsigned int v12;
  unsigned int v14;
  void *__p[2];
  char v17;

  if (a2)
  {
    v5 = (uint64_t **)(a1 + 24);
    v4 = *(uint64_t **)(a1 + 24);
    if (v4)
    {
      while (1)
      {
        while (1)
        {
          v6 = (uint64_t **)v4;
          v7 = *((_DWORD *)v4 + 7);
          if (v7 <= a2)
            break;
          v4 = *v6;
          v5 = v6;
          if (!*v6)
            goto LABEL_9;
        }
        if (v7 >= a2)
          break;
        v4 = v6[1];
        if (!v4)
        {
          v5 = v6 + 1;
          goto LABEL_9;
        }
      }
    }
    else
    {
      v6 = (uint64_t **)(a1 + 24);
LABEL_9:
      v8 = operator new(0x20uLL);
      v8[7] = a2;
      *(_QWORD *)v8 = 0;
      *((_QWORD *)v8 + 1) = 0;
      *((_QWORD *)v8 + 2) = v6;
      *v5 = (uint64_t *)v8;
      v9 = **(_QWORD **)(a1 + 16);
      if (v9)
      {
        *(_QWORD *)(a1 + 16) = v9;
        v10 = *v5;
      }
      else
      {
        v10 = (uint64_t *)v8;
      }
      sub_19C2A2310(*(uint64_t **)(a1 + 24), v10);
      ++*(_QWORD *)(a1 + 32);
    }
    v12 = *(_DWORD *)(a1 + 40);
    if (v12 == -1 || v12 > a2)
      *(_DWORD *)(a1 + 40) = a2;
    v14 = *(_DWORD *)(a1 + 44);
    if (v14 == -1 || v14 < a2)
      *(_DWORD *)(a1 + 44) = a2;
  }
  else
  {
    v17 = 5;
    strcpy((char *)__p, "FATAL");
    v11 = sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)__p, 5);
    sub_19C2A1B24(v11, (uint64_t)": ", 2);
    sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)"MultiEpsMatcher: Bad multi-eps label: 0", 39);
    sub_19C351928();
    if (v17 < 0)
      operator delete(__p[0]);
  }
}

void sub_19C39075C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  sub_19C351928();
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t *sub_19C390784(_QWORD *a1)
{
  int8x8_t v1;
  int *v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  uint64_t **v6;
  uint64_t *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  v1 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v1)
    return 0;
  v2 = *(int **)(a1[6] + 128);
  v3 = *v2
     + 7853 * v2[1]
     + 7867 * (v2[4] ^ __ROR8__(v2[3] ^ __ROR8__(*((char *)v2 + 8), 59), 59));
  v4 = (uint8x8_t)vcnt_s8(v1);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = v3;
    if (v3 >= *(_QWORD *)&v1)
      v5 = v3 % *(_QWORD *)&v1;
  }
  else
  {
    v5 = (*(_QWORD *)&v1 - 1) & v3;
  }
  v6 = *(uint64_t ***)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  v7 = *v6;
  if (*v6)
  {
    v8 = a1 + 8;
    if (v4.u32[0] < 2uLL)
    {
      v9 = *(_QWORD *)&v1 - 1;
      while (1)
      {
        v11 = v7[1];
        if (v11 == v3)
        {
          if (sub_19C390C28(v8, *((_DWORD *)v7 + 4), -1))
            return v7;
        }
        else if ((v11 & v9) != v5)
        {
          return 0;
        }
        v7 = (uint64_t *)*v7;
        if (!v7)
          return v7;
      }
    }
    do
    {
      v10 = v7[1];
      if (v10 == v3)
      {
        if (sub_19C390C28(v8, *((_DWORD *)v7 + 4), -1))
          return v7;
      }
      else
      {
        if (v10 >= *(_QWORD *)&v1)
          v10 %= *(_QWORD *)&v1;
        if (v10 != v5)
          return 0;
      }
      v7 = (uint64_t *)*v7;
    }
    while (v7);
  }
  return v7;
}

void sub_19C3908C0(uint64_t a1, int a2, _DWORD *a3)
{
  unint64_t v3;
  uint64_t v7;
  int *v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  uint64_t **v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t prime;
  int8x8_t v23;
  unint64_t v24;
  uint8x8_t v25;
  uint64_t v26;
  uint64_t *v27;
  unint64_t v28;

  if (a2 < -1)
  {
    v9 = 0;
    v10 = *(_QWORD *)(a1 + 8);
    if (!v10)
      goto LABEL_27;
  }
  else
  {
    v7 = *(_QWORD *)(a1 + 48);
    if (a2 == -1)
      v8 = *(int **)(v7 + 128);
    else
      v8 = (int *)(*(_QWORD *)(v7 + 104) + 20 * a2);
    v9 = *v8
       + 7853 * v8[1]
       + 7867 * (v8[4] ^ __ROR8__(v8[3] ^ __ROR8__(*((char *)v8 + 8), 59), 59));
    v10 = *(_QWORD *)(a1 + 8);
    if (!v10)
      goto LABEL_27;
  }
  v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
  v11.i16[0] = vaddlv_u8(v11);
  if (v11.u32[0] > 1uLL)
  {
    v3 = v9;
    if (v9 >= v10)
      v3 = v9 % v10;
  }
  else
  {
    v3 = (v10 - 1) & v9;
  }
  v12 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
  if (v12)
  {
    v13 = *v12;
    if (*v12)
    {
      if (v11.u32[0] < 2uLL)
      {
        while (1)
        {
          v15 = v13[1];
          if (v15 == v9)
          {
            if (sub_19C390C28((_QWORD *)(a1 + 64), *((_DWORD *)v13 + 4), a2))
              return;
          }
          else if ((v15 & (v10 - 1)) != v3)
          {
            goto LABEL_27;
          }
          v13 = (uint64_t *)*v13;
          if (!v13)
            goto LABEL_27;
        }
      }
      do
      {
        v14 = v13[1];
        if (v14 == v9)
        {
          if (sub_19C390C28((_QWORD *)(a1 + 64), *((_DWORD *)v13 + 4), a2))
            return;
        }
        else
        {
          if (v14 >= v10)
            v14 %= v10;
          if (v14 != v3)
            break;
        }
        v13 = (uint64_t *)*v13;
      }
      while (v13);
    }
  }
LABEL_27:
  v16 = sub_19C385AC4((uint64_t **)(a1 + 32));
  *(_QWORD *)v16 = 0;
  *(_QWORD *)(v16 + 8) = v9;
  *(_DWORD *)(v16 + 16) = *a3;
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 40) + 1);
  v18 = *(float *)(a1 + 56);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    v19 = 1;
    if (v10 >= 3)
      v19 = (v10 & (v10 - 1)) != 0;
    v20 = v19 | (2 * v10);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      prime = v21;
    else
      prime = v20;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v23 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v23)
      goto LABEL_39;
    if (prime < *(_QWORD *)&v23)
    {
      v24 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 40) / *(float *)(a1 + 56));
      if (*(_QWORD *)&v23 < 3uLL || (v25 = (uint8x8_t)vcnt_s8(v23), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        v24 = std::__next_prime(v24);
      }
      else
      {
        v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2)
          v24 = v26;
      }
      if (prime <= v24)
        prime = v24;
      if (prime < *(_QWORD *)&v23)
LABEL_39:
        sub_19C38F038(a1, prime);
    }
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v27 = *(uint64_t **)(*(_QWORD *)a1 + 8 * v3);
  if (v27)
  {
    *(_QWORD *)v16 = *v27;
LABEL_63:
    *v27 = v16;
    goto LABEL_64;
  }
  *(_QWORD *)v16 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v16;
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 24;
  if (*(_QWORD *)v16)
  {
    v28 = *(_QWORD *)(*(_QWORD *)v16 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v28 >= v10)
        v28 %= v10;
    }
    else
    {
      v28 &= v10 - 1;
    }
    v27 = (uint64_t *)(*(_QWORD *)a1 + 8 * v28);
    goto LABEL_63;
  }
LABEL_64:
  ++*(_QWORD *)(a1 + 40);
}

void sub_19C390C14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C385C60((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_19C390C28(_QWORD *a1, int a2, int a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  BOOL v9;

  if (a2 < -1 || a3 < -1)
    return a2 == a3;
  v3 = (_QWORD *)*a1;
  if (a2 == -1)
    v4 = v3[16];
  else
    v4 = v3[13] + 20 * a2;
  v6 = v3[1];
  if (a3 != -1)
  {
    v7 = v3[13] + 20 * a3;
    v8 = v4 == v7;
    if (v6)
      goto LABEL_9;
LABEL_20:
    if (!v8)
      goto LABEL_10;
    return 1;
  }
  v7 = v3[16];
  v8 = v4 == v7;
  if (!v6)
    goto LABEL_20;
LABEL_9:
  if (v8)
    return 1;
LABEL_10:
  v9 = *(_DWORD *)v4 == *(_DWORD *)v7 && *(_DWORD *)(v4 + 4) == *(_DWORD *)(v7 + 4);
  return v9
      && *(unsigned __int8 *)(v4 + 8) == *(unsigned __int8 *)(v7 + 8)
      && *(float *)(v4 + 12) == *(float *)(v7 + 12)
      && *(_DWORD *)(v4 + 16) == *(_DWORD *)(v7 + 16);
}

void sub_19C390D18(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD **a6, int a7)
{
  int v11;
  unsigned int *v14;
  unint64_t v15;
  _QWORD v16[3];
  _DWORD *v17;
  unint64_t v18;
  unsigned int v19[4];

  v11 = a3;
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)**a6 + 56))(**a6, a3);
  *((_DWORD *)a6 + 18) = v11;
  v19[0] = a7 - 1;
  v19[1] = a7 << 31 >> 31;
  v19[2] = 0;
  v19[3] = a5;
  sub_19C390ED0(a1, a2, a6, v19, a7);
  v18 = 0;
  (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a4 + 120))(a4, a5, v16);
  while (1)
  {
    if (!v16[0])
    {
      v15 = v18;
      if (v18 >= v16[2])
        goto LABEL_15;
      goto LABEL_10;
    }
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v16[0] + 16))(v16[0]))
      break;
    if (!v16[0])
    {
      v15 = v18;
LABEL_10:
      v14 = (unsigned int *)(v16[1] + 16 * v15);
      goto LABEL_11;
    }
    v14 = (unsigned int *)(*(uint64_t (**)(void))(*(_QWORD *)v16[0] + 24))();
LABEL_11:
    sub_19C390ED0(a1, a2, a6, v14, a7);
    if (v16[0])
      (*(void (**)(_QWORD))(*(_QWORD *)v16[0] + 32))(v16[0]);
    else
      ++v18;
  }
  if (v16[0])
  {
    (*(void (**)(void))(*(_QWORD *)v16[0] + 8))();
    goto LABEL_17;
  }
LABEL_15:
  if (v17)
    --*v17;
LABEL_17:
  sub_19C386AA0(a1, a2);
}

void sub_19C390E94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _DWORD *a13)
{
  if (!a10)
  {
    if (a13)
      --*a13;
    _Unwind_Resume(exception_object);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C390ED0(uint64_t a1, int a2, _QWORD **a3, unsigned int *a4, int a5)
{
  char v5;
  unsigned int *v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[4];
  float v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  float v24;

  v5 = a5;
  v10 = a4 + 1;
  if (!a5)
    v10 = a4;
  result = sub_19C3910E8(a3, *v10);
  if ((_DWORD)result && !*((_BYTE *)a3 + 76))
  {
    if ((v5 & 1) != 0)
    {
      do
      {
        v12 = (uint64_t)a3 + 60;
        if (!*((_BYTE *)a3 + 56))
          v12 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**a3 + 80))(**a3);
        v20 = *(_QWORD *)v12;
        v21 = *(_DWORD *)(v12 + 8);
        v22 = *(_DWORD *)(v12 + 12);
        v17 = *(_QWORD *)a4;
        v18 = a4[2];
        v19 = a4[3];
        sub_19C391234((uint64_t)v14, *(_QWORD *)(a1 + 136), (uint64_t)&v17, (uint64_t)&v20);
        if (v14[0] != 255 || (v24 = v15, v23 = 2139095039, v15 != 3.4028e38) || v16 != -1)
          sub_19C391380(a1, a2, (float *)&v17, (uint64_t)&v20, (uint64_t)v14);
        result = sub_19C391790((uint64_t)a3);
      }
      while (!*((_BYTE *)a3 + 76));
    }
    else
    {
      do
      {
        v13 = (uint64_t)a3 + 60;
        if (!*((_BYTE *)a3 + 56))
          v13 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**a3 + 80))(**a3);
        v20 = *(_QWORD *)v13;
        v21 = *(_DWORD *)(v13 + 8);
        v22 = *(_DWORD *)(v13 + 12);
        v17 = *(_QWORD *)a4;
        v18 = a4[2];
        v19 = a4[3];
        sub_19C391234((uint64_t)v14, *(_QWORD *)(a1 + 136), (uint64_t)&v20, (uint64_t)&v17);
        if (v14[0] != 255 || (v24 = v15, v23 = 2139095039, v15 != 3.4028e38) || v16 != -1)
          sub_19C391380(a1, a2, (float *)&v20, (uint64_t)&v17, (uint64_t)v14);
        result = sub_19C391790((uint64_t)a3);
      }
      while (!*((_BYTE *)a3 + 76));
    }
  }
  return result;
}

uint64_t sub_19C3910E8(_QWORD **a1, unsigned int a2)
{
  uint64_t *v3;
  unsigned int v4;
  uint64_t v6;
  uint64_t *v7;
  unsigned int v8;
  BOOL v9;
  uint64_t *v10;
  uint64_t (*v11)(void);
  uint64_t result;
  _QWORD *v13;
  char v14;
  uint64_t *v15;
  _QWORD *v16;
  BOOL v17;

  v3 = (uint64_t *)(a1 + 3);
  a1[6] = a1 + 3;
  *((_BYTE *)a1 + 56) = 0;
  if (a2 == -1)
  {
    if (((_BYTE)a1[1] & 1) != 0)
    {
      v13 = a1[2];
      while (1)
      {
        a1[6] = v13;
        if (v13 == v3)
          break;
        v14 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)**a1 + 64))(**a1, *((unsigned int *)v13 + 7));
        v15 = a1[6];
        if ((v14 & 1) != 0)
        {
          if (v15 == v3)
            break;
          result = 1;
          goto LABEL_24;
        }
        v16 = (_QWORD *)v15[1];
        if (v16)
        {
          do
          {
            v13 = v16;
            v16 = (_QWORD *)*v16;
          }
          while (v16);
        }
        else
        {
          do
          {
            v13 = (_QWORD *)v15[2];
            v17 = *v13 == (_QWORD)v15;
            v15 = v13;
          }
          while (!v17);
        }
      }
    }
    v11 = *(uint64_t (**)(void))(*(_QWORD *)**a1 + 64);
  }
  else
  {
    if (a2 && ((_BYTE)a1[1] & 2) != 0)
    {
      v4 = *((_DWORD *)a1 + 10);
      if (v4 != -1 && v4 <= a2 && *((_DWORD *)a1 + 11) >= a2)
      {
        v6 = *v3;
        if (*v3)
        {
          v7 = (uint64_t *)(a1 + 3);
          do
          {
            v8 = *(_DWORD *)(v6 + 28);
            v9 = v8 >= a2;
            if (v8 >= a2)
              v10 = (uint64_t *)v6;
            else
              v10 = (uint64_t *)(v6 + 8);
            if (v9)
              v7 = (uint64_t *)v6;
            v6 = *v10;
          }
          while (*v10);
          if (v7 != v3 && *((_DWORD *)v7 + 7) <= a2)
          {
            result = 1;
            *((_BYTE *)a1 + 56) = 1;
            goto LABEL_24;
          }
        }
      }
    }
    v11 = *(uint64_t (**)(void))(*(_QWORD *)**a1 + 64);
  }
  result = v11();
LABEL_24:
  *((_BYTE *)a1 + 76) = result ^ 1;
  return result;
}

float sub_19C391234(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  char v8;
  float result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[4];
  float v14;
  int v15;
  float v16;

  v4 = a4;
  v5 = a3;
  if ((*(_BYTE *)(a2 + 72) & 0x80) == 0)
  {
    sub_19C3918B4((uint64_t)v13, a2, a3, a4);
    v8 = v13[0];
LABEL_3:
    *(_BYTE *)a1 = v8;
    result = v14;
    *(float *)(a1 + 4) = v14;
    *(_DWORD *)(a1 + 8) = -1;
    return result;
  }
  v10 = *(unsigned int *)(a2 + 96);
  if ((_DWORD)v10 == -1)
  {
    sub_19C3918B4((uint64_t)v13, a2, a3, a4);
    v8 = v13[0];
    if (v13[0] == 255)
    {
      v16 = v14;
      v15 = 2139095039;
      result = v14;
      if (v14 == 3.4028e38)
      {
        *(_BYTE *)a1 = -1;
        *(_QWORD *)(a1 + 4) = -2155872257;
        return result;
      }
    }
    if (!*(_BYTE *)(a2 + 76))
      goto LABEL_3;
    if (*(_DWORD *)(a2 + 40) == 1)
    {
      v11 = v5;
      v12 = v4;
    }
    else
    {
      v11 = v4;
      v12 = v5;
    }
    return sub_19C391E50(a1, a2, v11, v12, (uint64_t)v13);
  }
  else
  {
    if (*(_DWORD *)(a2 + 40) != 1)
    {
      a3 = a4;
      a4 = v5;
    }
    return sub_19C391D44(a1, a2, a3, a4, v10);
  }
}

void sub_19C391380(uint64_t a1, int a2, float *a3, uint64_t a4, uint64_t a5)
{
  int v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  unsigned __int8 v13;
  float v14;
  unsigned __int8 v15;
  float v16;
  float v17;
  BOOL v18;
  float v19;
  float v20;
  _QWORD *v21;
  uint64_t *v22;
  unint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  _QWORD *v52;
  float *v53;
  _QWORD *v54;
  _QWORD *v55;
  _QWORD *v56;
  unint64_t v57;
  float *v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  int v62;
  int v63;
  int v64;

  v9 = *(_DWORD *)(a4 + 12);
  *(float *)&v60 = a3[3];
  HIDWORD(v60) = v9;
  v61 = *(_BYTE *)a5;
  v62 = *(_DWORD *)(a5 + 4);
  v63 = *(_DWORD *)(a5 + 8);
  v10 = *(unsigned int *)a3;
  v11 = *(unsigned int *)(a4 + 4);
  v12 = a3[2];
  v13 = atomic_load((unsigned __int8 *)&qword_1EDB96FE8);
  if ((v13 & 1) == 0 && __cxa_guard_acquire(&qword_1EDB96FE8))
  {
    dword_1EDB96FF0 = -8388609;
    __cxa_guard_release(&qword_1EDB96FE8);
  }
  if (v12 == *(float *)&dword_1EDB96FF0)
    goto LABEL_11;
  v14 = *(float *)(a4 + 8);
  v15 = atomic_load((unsigned __int8 *)&qword_1EDB96FE8);
  if ((v15 & 1) == 0 && __cxa_guard_acquire(&qword_1EDB96FE8))
  {
    dword_1EDB96FF0 = -8388609;
    __cxa_guard_release(&qword_1EDB96FE8);
  }
  if (v14 == *(float *)&dword_1EDB96FF0)
  {
LABEL_11:
    v20 = NAN;
  }
  else
  {
    v16 = a3[2];
    v17 = *(float *)(a4 + 8);
    v18 = v17 == 3.4028e38 || v16 == 3.4028e38;
    v19 = v17 + v16;
    if (v18)
      v20 = 3.4028e38;
    else
      v20 = v19;
  }
  v21 = *(_QWORD **)(a1 + 176);
  v21[16] = &v60;
  v22 = sub_19C390784(v21 + 4);
  if (v22)
  {
    LODWORD(v23) = *((_DWORD *)v22 + 4);
  }
  else
  {
    v24 = (char *)v21[13];
    v25 = (char *)v21[14];
    v26 = (v25 - v24) >> 2;
    v23 = 0xCCCCCCCCCCCCCCCDLL * v26;
    v64 = -858993459 * v26;
    v27 = v21[15];
    if ((unint64_t)v25 >= v27)
    {
      v29 = v23 + 1;
      if (v23 + 1 > 0xCCCCCCCCCCCCCCCLL)
        sub_19C2A18E8();
      v30 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v27 - (_QWORD)v24) >> 2);
      if (2 * v30 > v29)
        v29 = 2 * v30;
      if (v30 >= 0x666666666666666)
        v31 = 0xCCCCCCCCCCCCCCCLL;
      else
        v31 = v29;
      if (v31 > 0xCCCCCCCCCCCCCCCLL)
        sub_19C2A143C();
      v32 = 20 * v31;
      v33 = (char *)operator new(20 * v31);
      v34 = &v33[20 * v23];
      v35 = &v33[v32];
      *(_QWORD *)v34 = v60;
      v34[8] = v61;
      *((_DWORD *)v34 + 3) = v62;
      *((_DWORD *)v34 + 4) = v63;
      v28 = v34 + 20;
      if (v25 != v24)
      {
        v36 = 0;
        do
        {
          v37 = &v34[v36];
          *(_QWORD *)(v37 - 20) = *(_QWORD *)&v25[v36 - 20];
          *(v37 - 12) = v25[v36 - 12];
          *((_DWORD *)v37 - 2) = *(_DWORD *)&v25[v36 - 8];
          *((_DWORD *)v37 - 1) = *(_DWORD *)&v25[v36 - 4];
          v36 -= 20;
        }
        while (&v25[v36] != v24);
        v34 += v36;
      }
      v21[13] = v34;
      v21[14] = v28;
      v21[15] = v35;
      if (v24)
        operator delete(v24);
    }
    else
    {
      *(_QWORD *)v25 = v60;
      v25[8] = v61;
      *((_DWORD *)v25 + 3) = v62;
      *((_DWORD *)v25 + 4) = v63;
      v28 = v25 + 20;
    }
    v21[14] = v28;
    sub_19C3908C0((uint64_t)(v21 + 4), v23, &v64);
  }
  v38 = *(_QWORD *)(a1 + 120);
  v39 = sub_19C386C20(v38, a2);
  v40 = v39;
  if (*(_BYTE *)(v38 + 104))
  {
    v41 = *(_DWORD *)(v39 + 56);
    if ((v41 & 4) == 0)
    {
      *(_DWORD *)(v39 + 56) = v41 | 4;
      v42 = *(_QWORD *)(v39 + 32) - *(_QWORD *)(v39 + 24) + *(_QWORD *)(v38 + 128) + 64;
      *(_QWORD *)(v38 + 128) = v42;
      *(_BYTE *)(v38 + 120) = 1;
      if (v42 > *(_QWORD *)(v38 + 112))
        sub_19C386D88(v38, v39);
    }
  }
  v43 = v10 | (v11 << 32);
  v45 = *(_QWORD *)(v40 + 32);
  v44 = *(_QWORD *)(v40 + 40);
  if (v45 >= v44)
  {
    v47 = *(_QWORD *)(v40 + 24);
    v48 = (uint64_t)(v45 - v47) >> 4;
    v49 = v48 + 1;
    if ((unint64_t)(v48 + 1) >> 60)
      sub_19C2A18E8();
    v50 = v44 - v47;
    if (v50 >> 3 > v49)
      v49 = v50 >> 3;
    if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF0)
      v51 = 0xFFFFFFFFFFFFFFFLL;
    else
      v51 = v49;
    v52 = sub_19C387E3C((uint64_t **)(v40 + 48), v51);
    v53 = (float *)&v52[2 * v48];
    v54 = &v52[2 * v51];
    *(_QWORD *)v53 = v43;
    v53[2] = v20;
    *((_DWORD *)v53 + 3) = v23;
    v46 = v53 + 4;
    v56 = *(_QWORD **)(v40 + 24);
    v55 = *(_QWORD **)(v40 + 32);
    if (v55 != v56)
    {
      v57 = 0;
      do
      {
        v58 = &v53[v57 / 4];
        *((_QWORD *)v58 - 2) = v55[v57 / 8 - 2];
        *(v58 - 2) = *(float *)&v55[v57 / 8 - 1];
        *(v58 - 1) = *((float *)&v55[v57 / 8 - 1] + 1);
        v57 -= 16;
      }
      while (&v55[v57 / 8] != v56);
      v53 = (float *)((char *)v53 + v57);
      v55 = *(_QWORD **)(v40 + 24);
    }
    *(_QWORD *)(v40 + 24) = v53;
    *(_QWORD *)(v40 + 32) = v46;
    v59 = *(_QWORD *)(v40 + 40);
    *(_QWORD *)(v40 + 40) = v54;
    if (v55)
      sub_19C37E928((uint64_t **)(v40 + 48), v55, (v59 - (uint64_t)v55) >> 4);
  }
  else
  {
    *(_QWORD *)v45 = v43;
    *(float *)(v45 + 8) = v20;
    v46 = (_QWORD *)(v45 + 16);
    *(_DWORD *)(v45 + 12) = v23;
  }
  *(_QWORD *)(v40 + 32) = v46;
}

uint64_t sub_19C391790(uint64_t result)
{
  _QWORD **v1;
  char v2;
  _QWORD **v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  BOOL v7;
  _QWORD *v8;
  _QWORD *v9;

  v1 = (_QWORD **)result;
  if (*(_BYTE *)(result + 56))
  {
    v2 = 1;
LABEL_3:
    *((_BYTE *)v1 + 76) = v2;
  }
  else
  {
    (*(void (**)(_QWORD))(***(_QWORD ***)result + 88))(**(_QWORD **)result);
    result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**v1 + 72))(**v1);
    *((_BYTE *)v1 + 76) = result;
    if ((_DWORD)result)
    {
      v3 = v1 + 3;
      v4 = v1[6];
      if (v4 != v1 + 3)
      {
        v5 = (_QWORD *)v4[1];
        if (v5)
        {
          do
          {
            v6 = v5;
            v5 = (_QWORD *)*v5;
          }
          while (v5);
        }
        else
        {
          do
          {
            v6 = (_QWORD *)v4[2];
            v7 = *v6 == (_QWORD)v4;
            v4 = v6;
          }
          while (!v7);
        }
        while (1)
        {
          v1[6] = v6;
          if (v6 == v3)
            goto LABEL_19;
          result = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)**v1 + 64))(**v1, *((unsigned int *)v6 + 7));
          v8 = v1[6];
          if ((result & 1) != 0)
            break;
          v9 = (_QWORD *)v8[1];
          if (v9)
          {
            do
            {
              v6 = v9;
              v9 = (_QWORD *)*v9;
            }
            while (v9);
          }
          else
          {
            do
            {
              v6 = (_QWORD *)v8[2];
              v7 = *v6 == (_QWORD)v8;
              v8 = v6;
            }
            while (!v7);
          }
        }
        if (v8 == v3)
        {
LABEL_19:
          result = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)**v1 + 64))(**v1, 0xFFFFFFFFLL);
          v2 = result ^ 1;
          goto LABEL_3;
        }
        *((_BYTE *)v1 + 76) = 0;
      }
    }
  }
  return result;
}

void sub_19C3918B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8;
  char v9;
  float v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  BOOL v15;
  uint64_t v16;
  unsigned __int8 *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  BOOL v23;
  uint64_t v24;
  unsigned __int8 *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  float v29;
  uint64_t v30;
  unsigned __int8 *v31;
  float v32;
  float v33;
  unsigned __int8 v34;
  unsigned __int8 v35;
  float v36;
  BOOL v37;
  float v38;
  unsigned __int8 v39;
  unsigned __int8 v40;
  float v41;
  unsigned __int8 v42;
  BOOL v43;
  int v44;
  int v45;
  int v46;
  int v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;

  *(_BYTE *)(a2 + 76) = 0;
  v8 = *(_DWORD *)(a3 + 4);
  if (v8 != -1)
  {
    if (*(_DWORD *)a4 != -1)
    {
      if (!v8)
        goto LABEL_10;
LABEL_11:
      if (*(_DWORD *)(a2 + 40) == 1)
      {
        v11 = *(_DWORD *)(a2 + 72);
        v9 = 0;
        if (v8)
        {
          if ((v11 & 0x100) == 0)
            goto LABEL_44;
        }
        else if ((v11 & 0x200) == 0)
        {
          goto LABEL_44;
        }
        goto LABEL_33;
      }
      v9 = 0;
      v12 = *(_DWORD *)(a2 + 72);
      if (*(_DWORD *)a4)
        goto LABEL_16;
      goto LABEL_19;
    }
    if (!*(_BYTE *)(a2 + 32))
      goto LABEL_11;
LABEL_10:
    v9 = -1;
    v10 = 3.4028e38;
    goto LABEL_77;
  }
  if (*(_BYTE *)(a2 + 33))
    goto LABEL_10;
  v9 = *(_BYTE *)(a2 + 34) ^ 1;
  if (*(_DWORD *)(a2 + 40) != 1)
  {
    v12 = *(_DWORD *)(a2 + 72);
    if (*(_DWORD *)a4)
    {
LABEL_16:
      if ((v12 & 0x100) == 0)
        goto LABEL_44;
      goto LABEL_20;
    }
LABEL_19:
    if ((v12 & 0x200) == 0)
      goto LABEL_44;
LABEL_20:
    *(_BYTE *)(a2 + 76) = 1;
    if (*(_DWORD *)(a2 + 64) == 1)
      v13 = 48;
    else
      v13 = 56;
    (*(void (**)(_QWORD, _QWORD))(***(_QWORD ***)(a2 + v13) + 56))(**(_QWORD **)(a2 + v13), *(unsigned int *)(a4 + 12));
    v14 = *(_DWORD *)(a2 + 64);
    v15 = v14 == 1;
    if (v14 == 1)
      v16 = 48;
    else
      v16 = 56;
    v17 = *(unsigned __int8 **)(a2 + v16);
    if (v15)
      v18 = 56;
    else
      v18 = 48;
    v19 = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a2 + v18) + 32))(**(_QWORD **)(a2 + v18));
    v20 = *(unsigned int *)(a3 + 12);
    if (sub_19C38F654(v17)
      && !(*(unsigned int (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)v17 + 128))(*(_QWORD *)v17, v19, v20))
    {
      goto LABEL_10;
    }
    goto LABEL_44;
  }
  if ((*(_DWORD *)(a2 + 72) & 0x100) == 0)
    goto LABEL_44;
LABEL_33:
  *(_BYTE *)(a2 + 76) = 1;
  if (*(_DWORD *)(a2 + 64) == 1)
    v21 = 48;
  else
    v21 = 56;
  (*(void (**)(_QWORD, _QWORD))(***(_QWORD ***)(a2 + v21) + 56))(**(_QWORD **)(a2 + v21), *(unsigned int *)(a3 + 12));
  v22 = *(_DWORD *)(a2 + 64);
  v23 = v22 == 1;
  if (v22 == 1)
    v24 = 48;
  else
    v24 = 56;
  v25 = *(unsigned __int8 **)(a2 + v24);
  if (v23)
    v26 = 56;
  else
    v26 = 48;
  v27 = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a2 + v26) + 32))(**(_QWORD **)(a2 + v26));
  v28 = *(unsigned int *)(a4 + 12);
  if (sub_19C38F654(v25)
    && ((*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)v25 + 128))(*(_QWORD *)v25, v27, v28) & 1) == 0)
  {
    goto LABEL_10;
  }
LABEL_44:
  v10 = 0.0;
  if ((*(_BYTE *)(a2 + 72) & 0x40) != 0)
  {
    v29 = 0.0;
    if (*(_BYTE *)(a2 + 76))
    {
      v30 = 56;
      if (*(_DWORD *)(a2 + 64) == 1)
        v30 = 48;
      v31 = *(unsigned __int8 **)(a2 + v30);
      if (sub_19C38F654(v31))
        v29 = *(float *)(*(_QWORD *)v31 + 8);
    }
    v32 = *(float *)(a2 + 84);
    if (v29 == 3.4028e38)
    {
      v9 = -1;
      v10 = 3.4028e38;
    }
    else
    {
      v33 = *(float *)(a4 + 8);
      v34 = atomic_load((unsigned __int8 *)&qword_1EDB96FE8);
      if ((v34 & 1) == 0)
      {
        v48 = *(float *)(a4 + 8);
        v51 = *(float *)(a2 + 84);
        v44 = __cxa_guard_acquire(&qword_1EDB96FE8);
        v33 = v48;
        v32 = v51;
        if (v44)
        {
          dword_1EDB96FF0 = -8388609;
          __cxa_guard_release(&qword_1EDB96FE8);
          v33 = v48;
          v32 = v51;
        }
      }
      if (v33 == *(float *)&dword_1EDB96FF0)
        goto LABEL_62;
      v35 = atomic_load((unsigned __int8 *)&qword_1EDB96FE8);
      if ((v35 & 1) == 0)
      {
        v53 = v32;
        v46 = __cxa_guard_acquire(&qword_1EDB96FE8);
        v32 = v53;
        if (v46)
        {
          dword_1EDB96FF0 = -8388609;
          __cxa_guard_release(&qword_1EDB96FE8);
          v32 = v53;
        }
      }
      if (v29 == *(float *)&dword_1EDB96FF0)
      {
LABEL_62:
        v38 = NAN;
      }
      else
      {
        v36 = *(float *)(a4 + 8);
        v37 = v29 == 3.4028e38 || v36 == 3.4028e38;
        v38 = v36 + v29;
        if (v37)
          v38 = 3.4028e38;
      }
      v39 = atomic_load((unsigned __int8 *)&qword_1EDB96FE8);
      if ((v39 & 1) == 0)
      {
        v49 = v38;
        v52 = v32;
        v45 = __cxa_guard_acquire(&qword_1EDB96FE8);
        v38 = v49;
        v32 = v52;
        if (v45)
        {
          dword_1EDB96FF0 = -8388609;
          __cxa_guard_release(&qword_1EDB96FE8);
          v38 = v49;
          v32 = v52;
        }
      }
      if (v38 == *(float *)&dword_1EDB96FF0)
      {
        v41 = NAN;
      }
      else
      {
        v40 = atomic_load((unsigned __int8 *)&qword_1EDB96FE8);
        if ((v40 & 1) == 0)
        {
          v50 = v38;
          v54 = v32;
          v47 = __cxa_guard_acquire(&qword_1EDB96FE8);
          v38 = v50;
          v32 = v54;
          if (v47)
          {
            dword_1EDB96FF0 = -8388609;
            __cxa_guard_release(&qword_1EDB96FE8);
            v38 = v50;
            v32 = v54;
          }
        }
        v41 = NAN;
        if (v32 != *(float *)&dword_1EDB96FF0 && v32 != 3.4028e38)
        {
          v41 = 3.4028e38;
          if (v38 != 3.4028e38)
            v41 = v38 - v32;
        }
      }
      *(float *)(a4 + 8) = v41;
      v42 = atomic_load((unsigned __int8 *)&qword_1EDB96FE8);
      if ((v42 & 1) == 0 && __cxa_guard_acquire(&qword_1EDB96FE8))
      {
        dword_1EDB96FF0 = -8388609;
        __cxa_guard_release(&qword_1EDB96FE8);
      }
      v43 = v29 == 3.4028e38 || v29 == *(float *)&dword_1EDB96FF0;
      v10 = floorf((float)(v29 * 1024.0) + 0.5) * 0.00097656;
      if (v43)
        v10 = v29;
    }
  }
LABEL_77:
  *(_BYTE *)a1 = v9;
  *(float *)(a1 + 4) = v10;
}

float sub_19C391D44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v6;
  _BOOL4 v7;
  _BOOL4 v8;
  unint64_t v9;
  uint64_t v11;
  int v12;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  float result;

  v6 = *(_DWORD *)(a2 + 40);
  v7 = v6 != 1;
  v8 = v6 == 1;
  if (*(_DWORD *)(a4 + 4 * v7) != -1)
    goto LABEL_2;
  v11 = 4 * v8;
  v12 = *(_DWORD *)(a3 + v11);
  if (v12 == (_DWORD)a5)
  {
    *(_DWORD *)(a3 + v11) = 0;
    *(_BYTE *)a1 = 0;
    v9 = 0xFFFFFFFF00000000;
    goto LABEL_3;
  }
  if (v12
    || *(_QWORD *)(a2 + 280) != 1
    && (*(_DWORD *)(a2 + 64) != 1 ? (v14 = 56) : (v14 = 48),
        ((*(void (**)(_QWORD, _QWORD))(***(_QWORD ***)(a2 + v14) + 56))(**(_QWORD **)(a2 + v14), *(unsigned int *)(a3 + 12)), *(_DWORD *)(a2 + 64) != 1)? (v15 = 56): (v15 = 48), (v16 = *(unsigned __int8 **)(a2 + v15), sub_19C38F654(v16))&& !(*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)v16 + 120))(*(_QWORD *)v16, a5)))
  {
LABEL_2:
    *(_BYTE *)a1 = -1;
    v9 = -2155872257;
LABEL_3:
    *(_QWORD *)(a1 + 4) = v9;
    return result;
  }
  *(_BYTE *)a1 = *(_BYTE *)(a2 + 88);
  result = *(float *)(a2 + 92);
  *(float *)(a1 + 4) = result;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 96);
  return result;
}

float sub_19C391E50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  int v8;
  float result;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  float v19;
  int v20;
  float v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  float v24;
  BOOL v25;
  float v26;
  int v27;
  int v28;
  float v29;
  float v30;
  float v31;

  v7 = 4 * (*(_DWORD *)(a2 + 40) == 1);
  if (*(_DWORD *)(a4 + v7) || *(_DWORD *)(a3 + 4 * (*(_DWORD *)(a2 + 40) == 1)) && (*(_BYTE *)(a2 + 73) & 4) != 0)
    goto LABEL_2;
  v13 = 56;
  if (*(_DWORD *)(a2 + 64) == 1)
    v13 = 48;
  v14 = *(unsigned __int8 **)(a2 + v13);
  if (!sub_19C38F654(v14) || (v15 = *(_QWORD *)v14, v16 = *(_DWORD *)(*(_QWORD *)v14 + 24), v16 == -1))
  {
LABEL_2:
    v8 = -1;
  }
  else
  {
    v18 = *(_DWORD *)(v15 + 12);
    v17 = *(_DWORD *)(v15 + 16);
    v19 = *(float *)(v15 + 20);
    if (*(_DWORD *)(a2 + 40) == 1)
      v20 = *(_DWORD *)(v15 + 12);
    else
      v20 = *(_DWORD *)(v15 + 16);
    *(_DWORD *)(a3 + v7) = v20;
    *(_DWORD *)a4 = v18;
    *(_DWORD *)(a4 + 4) = v17;
    v21 = *(float *)(a4 + 8);
    v22 = atomic_load((unsigned __int8 *)&qword_1EDB96FE8);
    if ((v22 & 1) == 0)
    {
      v29 = *(float *)(a4 + 8);
      v30 = v19;
      v27 = __cxa_guard_acquire(&qword_1EDB96FE8);
      v21 = v29;
      v19 = v30;
      if (v27)
      {
        dword_1EDB96FF0 = -8388609;
        __cxa_guard_release(&qword_1EDB96FE8);
        v21 = v29;
        v19 = v30;
      }
    }
    if (v21 == *(float *)&dword_1EDB96FF0)
      goto LABEL_23;
    v23 = atomic_load((unsigned __int8 *)&qword_1EDB96FE8);
    if ((v23 & 1) == 0)
    {
      v31 = v19;
      v28 = __cxa_guard_acquire(&qword_1EDB96FE8);
      v19 = v31;
      if (v28)
      {
        dword_1EDB96FF0 = -8388609;
        __cxa_guard_release(&qword_1EDB96FE8);
        v19 = v31;
      }
    }
    if (v19 == *(float *)&dword_1EDB96FF0)
    {
LABEL_23:
      v26 = NAN;
    }
    else
    {
      v24 = *(float *)(a4 + 8);
      v25 = v19 == 3.4028e38 || v24 == 3.4028e38;
      v26 = v24 + v19;
      if (v25)
        v26 = 3.4028e38;
    }
    *(float *)(a4 + 8) = v26;
    *(_DWORD *)(a4 + 12) = v16;
    v8 = *(_DWORD *)(a3 + v7);
  }
  *(_BYTE *)a1 = *(_BYTE *)a5;
  result = *(float *)(a5 + 4);
  *(float *)(a1 + 4) = result;
  *(_DWORD *)(a1 + 8) = v8;
  return result;
}

uint64_t *sub_19C392014(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t *i;

  if (*a2)
    v4 = operator new();
  else
    v4 = 0;
  *a1 = v4;
  if (a2[1])
    v5 = operator new();
  else
    v5 = 0;
  a1[1] = v5;
  a1[2] = (uint64_t)a1;
  a1[3] = (uint64_t)a1;
  sub_19C38EEAC((uint64_t)(a1 + 4), a2[9], a1 + 2, a1 + 3);
  a1[13] = 0;
  a1[14] = 0;
  a1[15] = 0;
  v6 = a2[13];
  v7 = a2[14];
  v8 = v7 - v6;
  if (v7 != v6)
  {
    v9 = 0xCCCCCCCCCCCCCCCDLL * (v8 >> 2);
    if (v9 >= 0xCCCCCCCCCCCCCCDLL)
      sub_19C2A18E8();
    v10 = (char *)operator new(v8);
    a1[13] = (uint64_t)v10;
    a1[14] = (uint64_t)v10;
    a1[15] = (uint64_t)&v10[20 * v9];
    do
    {
      *(_QWORD *)v10 = *(_QWORD *)v6;
      v10[8] = *(_BYTE *)(v6 + 8);
      *((_DWORD *)v10 + 3) = *(_DWORD *)(v6 + 12);
      *((_DWORD *)v10 + 4) = *(_DWORD *)(v6 + 16);
      v10 += 20;
      v6 += 20;
    }
    while (v6 != v7);
    a1[14] = (uint64_t)v10;
  }
  for (i = (uint64_t *)a2[7]; i; i = (uint64_t *)*i)
    sub_19C3908C0((uint64_t)(a1 + 4), *((_DWORD *)i + 4), (_DWORD *)i + 4);
  return a1;
}

void sub_19C392168(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  void *v5;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 112) = v5;
    operator delete(v5);
  }
  sub_19C38F1EC(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_19C392190(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)a1 = &off_1E3D37FA8;
  v2 = *(_QWORD *)(a1 + 136);
  if (v2)
  {
    if (*(_BYTE *)(v2 + 212))
    {
      v3 = *(_QWORD **)(v2 + 200);
      if (v3)
      {
        if (*v3)
          (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 8))(*v3);
        MEMORY[0x1A1AD355C](v3, 0x1020C405F07FB98);
      }
    }
    sub_19C33275C(*(_QWORD **)(v2 + 224));
    if (*(_BYTE *)(v2 + 132))
    {
      v4 = *(_QWORD **)(v2 + 120);
      if (v4)
      {
        if (*v4)
          (*(void (**)(_QWORD))(*(_QWORD *)*v4 + 8))(*v4);
        MEMORY[0x1A1AD355C](v4, 0x1020C405F07FB98);
      }
    }
    sub_19C33275C(*(_QWORD **)(v2 + 144));
    v5 = sub_19C38F460(v2);
    MEMORY[0x1A1AD355C](v5, 0x1060C409DA32DC3);
  }
  v6 = *(_QWORD **)(a1 + 176);
  if (v6)
  {
    if (*v6)
      MEMORY[0x1A1AD355C](*v6, 0xC400A2AC0F1);
    v7 = v6[1];
    if (v7)
      MEMORY[0x1A1AD355C](v7, 0xC400A2AC0F1);
    v8 = (void *)v6[13];
    if (v8)
    {
      v6[14] = v8;
      operator delete(v8);
    }
    sub_19C38F1EC((uint64_t)(v6 + 4));
    MEMORY[0x1A1AD355C](v6, 0x10E0C401DE81863);
  }
  *(_QWORD *)a1 = off_1E3D37D80;
  v9 = *(_QWORD *)(a1 + 120);
  if (v9)
  {
    v10 = sub_19C37BFF8(v9);
    MEMORY[0x1A1AD355C](v10, 0x10A0C40690396FALL);
  }
  v11 = *(void **)(a1 + 72);
  if (v11)
    operator delete(v11);
  *(_QWORD *)a1 = off_1E3D383E0;
  v12 = *(_QWORD *)(a1 + 40);
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v13 = *(_QWORD *)(a1 + 48);
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void sub_19C392358(uint64_t a1)
{
  sub_19C393F4C(a1);
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C39237C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, 0x3FFFFFFF0007);
}

uint64_t sub_19C392390(uint64_t a1, uint64_t a2)
{
  char v4;

  if ((a2 & 4) != 0)
  {
    if ((*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 160) + 56))(*(_QWORD *)(a1 + 160), 4, 0)|| (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 168) + 56))(*(_QWORD *)(a1 + 168), 4, 0)|| ((*(uint64_t (**)(_QWORD, _QWORD))(****(_QWORD ****)(a1 + 144) + 40))(***(_QWORD ***)(a1 + 144), 0) & 4) != 0|| (v4 = (*(uint64_t (**)(_QWORD, _QWORD))(****(_QWORD ****)(a1 + 152) + 40))(***(_QWORD ***)(a1 + 152), 0), *(_DWORD *)(*(_QWORD *)(a1 + 136) + 40) == 3)|| (v4 & 4) != 0)
    {
      *(_QWORD *)(a1 + 8) |= 4uLL;
    }
  }
  return *(_QWORD *)(a1 + 8) & a2;
}

uint64_t sub_19C392450(uint64_t a1)
{
  uint64_t v2;
  _QWORD **v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t *v22;

  v2 = operator new();
  sub_19C388690(v2, a1);
  *(_QWORD *)v2 = &off_1E3D38000;
  v3 = (_QWORD **)operator new();
  v4 = *(_QWORD *)(a1 + 136);
  v5 = *(_BYTE **)v4;
  v6 = operator new();
  *(_QWORD *)v6 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)v5 + 16))(*(_QWORD *)v5, 1);
  *(_BYTE *)(v6 + 8) = v5[8];
  *v3 = (_QWORD *)v6;
  v7 = *(_BYTE **)(v4 + 8);
  v8 = operator new();
  v9 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)v7 + 16))(*(_QWORD *)v7, 1);
  *(_QWORD *)v8 = v9;
  *(_BYTE *)(v8 + 8) = v7[8];
  v3[1] = (_QWORD *)v8;
  v3[2] = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 32))(v9);
  v3[3] = (_QWORD *)-1;
  *((_BYTE *)v3 + 32) = -1;
  v10 = *(_DWORD *)(v4 + 40);
  *((_DWORD *)v3 + 10) = v10;
  v12 = *v3;
  v11 = v3[1];
  v13 = operator new();
  *(_QWORD *)v13 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)v12 + 16))(*(_QWORD *)v12, 0);
  *(_BYTE *)(v13 + 8) = v12[8];
  v3[6] = (_QWORD *)v13;
  v14 = operator new();
  *(_QWORD *)v14 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)v11 + 16))(*(_QWORD *)v11, 0);
  *(_BYTE *)(v14 + 8) = v11[8];
  v3[7] = (_QWORD *)v14;
  *((_DWORD *)v3 + 16) = v10;
  *((_DWORD *)v3 + 18) = *(_DWORD *)(v4 + 72);
  v15 = 7;
  if (v10 == 1)
    v16 = 6;
  else
    v16 = 7;
  v17 = (unsigned __int8 *)v3[v16];
  if (v10 != 1)
    v15 = 6;
  v18 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v3[v15] + 32))(*v3[v15]);
  if (sub_19C38F654(v17))
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)v17 + 112))(*(_QWORD *)v17, v18, 1);
  *((_BYTE *)v3 + 80) = -1;
  *((_DWORD *)v3 + 21) = 2139095039;
  *((_BYTE *)v3 + 88) = -1;
  *(_QWORD **)((char *)v3 + 92) = (_QWORD *)-2155872257;
  v3[13] = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)**v3 + 32))(**v3);
  v3[14] = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v3[1] + 32))(*v3[1]);
  if (*((_DWORD *)v3 + 10) == 1)
    v19 = 1;
  else
    v19 = 2;
  sub_19C38F2B8((uint64_t)(v3 + 15), (uint64_t)v3[13], 1, v19, (uint64_t)*v3);
  if (*((_DWORD *)v3 + 10) == 1)
    v20 = 2;
  else
    v20 = 1;
  v21 = sub_19C38F2B8((uint64_t)(v3 + 25), (uint64_t)v3[14], 0, v20, (uint64_t)v3[1]);
  *(_QWORD *)(v2 + 136) = v3;
  *(_QWORD *)(v2 + 144) = v3 + 15;
  *(_QWORD *)(v2 + 152) = v21;
  *(_QWORD *)(v2 + 160) = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v3[15] + 32))(*v3[15]);
  *(_QWORD *)(v2 + 168) = (*(uint64_t (**)(_QWORD))(****(_QWORD ****)(v2 + 152) + 32))(***(_QWORD ***)(v2 + 152));
  v22 = (uint64_t *)operator new();
  sub_19C392014(v22, *(_QWORD **)(a1 + 176));
  *(_QWORD *)(v2 + 176) = v22;
  *(_DWORD *)(v2 + 184) = *(_DWORD *)(a1 + 184);
  return v2;
}

void sub_19C392770(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  MEMORY[0x1A1AD355C](v2, 0x10E0C401DE81863);
  sub_19C37BDD0(v1);
  MEMORY[0x1A1AD355C](v1, 0x10F3C405A371F01);
  _Unwind_Resume(a1);
}

void sub_19C392860()
{
  JUMPOUT(0x19C392838);
}

void sub_19C392868(uint64_t a1, int a2, __n128 a3)
{
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v13;
  _BOOL4 v14;
  _QWORD *v16;
  void *__p;
  unsigned int v18;
  char v19;

  v5 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 176) + 104) + 20 * a2);
  v6 = *v5;
  v7 = v5[1];
  v8 = *(_QWORD *)(a1 + 136);
  LOBYTE(__p) = *((_BYTE *)v5 + 8);
  HIDWORD(__p) = v5[3];
  a3.n128_u32[0] = HIDWORD(__p);
  v18 = v5[4];
  sub_19C392FCC(v8, v6, v7, (unsigned __int8 *)&__p, a3);
  v9 = *(_DWORD *)(a1 + 184);
  if (v9)
  {
    if (v9 == 1)
      goto LABEL_18;
    v10 = (*(uint64_t (**)(_QWORD, uint64_t))(****(_QWORD ****)(a1 + 144) + 104))(***(_QWORD ***)(a1 + 144), v6);
    v11 = (*(uint64_t (**)(_QWORD, uint64_t))(****(_QWORD ****)(a1 + 152) + 104))(***(_QWORD ***)(a1 + 152), v7);
    if (v10 == -1 && v11 == -1)
    {
      v19 = 5;
      strcpy((char *)&__p, "FATAL");
      v16 = sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)&__p, 5);
      sub_19C2A1B24(v16, (uint64_t)": ", 2);
      sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)"ComposeFst: both sides can't require match", 42);
      sub_19C351928();
      if (v19 < 0)
        operator delete(__p);
      *(_QWORD *)(a1 + 8) |= 4uLL;
      goto LABEL_22;
    }
    v13 = v11 == -1 || v10 <= v11;
    v14 = v13;
    if (v10 == -1 || !v14)
    {
LABEL_18:
      sub_19C39318C(a1, a2, v6, *(_QWORD *)(a1 + 168), v7, *(_QWORD ***)(a1 + 144), 0);
      return;
    }
  }
LABEL_22:
  sub_19C39318C(a1, a2, v7, *(_QWORD *)(a1 + 160), v6, *(_QWORD ***)(a1 + 152), 1);
}

void sub_19C392A18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  sub_19C351928();
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_19C392A40(uint64_t a1, uint64_t a2, int a3)
{
  if ((*(unsigned int (**)(_QWORD, _QWORD))(****(_QWORD ****)(a1 + 144) + 24))(***(_QWORD ***)(a1 + 144), 0) == a3)(*(void (**)(_QWORD, _QWORD))(****(_QWORD ****)(a1 + 152) + 24))(***(_QWORD ***)(a1 + 152), 0);
  return 0;
}

uint64_t sub_19C392AA4(uint64_t a1)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  _QWORD *v5;
  uint64_t *v6;
  unint64_t v7;
  unint64_t *v9;
  unint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  int v26;

  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 160) + 16))(*(_QWORD *)(a1 + 160));
  if (v2 == -1)
    return 0xFFFFFFFFLL;
  v3 = v2;
  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 168) + 16))(*(_QWORD *)(a1 + 168));
  if (v4 == -1)
    return 0xFFFFFFFFLL;
  v23 = __PAIR64__(v4, v3);
  v24 = 0;
  v25 = 0xFFFFFFFF00000000;
  v5 = *(_QWORD **)(a1 + 176);
  v5[16] = &v23;
  v6 = sub_19C390784(v5 + 4);
  if (v6)
    return *((unsigned int *)v6 + 4);
  v9 = (unint64_t *)v5[13];
  v10 = (unint64_t *)v5[14];
  v11 = ((char *)v10 - (char *)v9) >> 2;
  v7 = 0xCCCCCCCCCCCCCCCDLL * v11;
  v26 = -858993459 * v11;
  v12 = v5[15];
  if ((unint64_t)v10 >= v12)
  {
    v14 = v7 + 1;
    if (v7 + 1 > 0xCCCCCCCCCCCCCCCLL)
      sub_19C2A18E8();
    v15 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v12 - (_QWORD)v9) >> 2);
    if (2 * v15 > v14)
      v14 = 2 * v15;
    if (v15 >= 0x666666666666666)
      v16 = 0xCCCCCCCCCCCCCCCLL;
    else
      v16 = v14;
    if (v16 > 0xCCCCCCCCCCCCCCCLL)
      sub_19C2A143C();
    v17 = 20 * v16;
    v18 = (char *)operator new(20 * v16);
    v19 = &v18[20 * v7];
    v20 = &v18[v17];
    *(_QWORD *)v19 = v23;
    v19[8] = 0;
    *(_QWORD *)(v19 + 12) = 0xFFFFFFFF00000000;
    v13 = v19 + 20;
    if (v10 != v9)
    {
      v21 = 0;
      do
      {
        v22 = &v19[v21];
        *(_QWORD *)(v22 - 20) = *(unint64_t *)((char *)v10 + v21 - 20);
        *(v22 - 12) = *((_BYTE *)v10 + v21 - 12);
        *((_DWORD *)v22 - 2) = *(_DWORD *)((char *)v10 + v21 - 8);
        *((_DWORD *)v22 - 1) = *(_DWORD *)((char *)v10 + v21 - 4);
        v21 -= 20;
      }
      while ((unint64_t *)((char *)v10 + v21) != v9);
      v19 += v21;
    }
    v5[13] = v19;
    v5[14] = v13;
    v5[15] = v20;
    if (v9)
      operator delete(v9);
  }
  else
  {
    *v10 = v23;
    *((_BYTE *)v10 + 8) = v24;
    *(unint64_t *)((char *)v10 + 12) = v25;
    v13 = (char *)v10 + 20;
  }
  v5[14] = v13;
  sub_19C3908C0((uint64_t)(v5 + 4), v7, &v26);
  return v7;
}

void sub_19C392C94(uint64_t a1@<X0>, int a2@<W1>, _DWORD *a3@<X8>)
{
  uint64_t v6;
  int *v7;
  int v8;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  float v15;
  float v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  float v19;
  float v20;
  unsigned __int8 v21;
  float v22;
  unsigned __int8 v23;
  BOOL v24;
  int v25;
  int v26;
  int v27;
  int v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  int v34;
  unsigned __int32 v35;
  int v36;
  uint64_t v37;
  int v38;

  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 176) + 104);
  v7 = (int *)(v6 + 20 * a2);
  v8 = *v7;
  (*(void (**)(char *__return_ptr, _QWORD, _QWORD))(****(_QWORD ****)(a1 + 144) + 96))((char *)&v37 + 4, ***(_QWORD ***)(a1 + 144), *v7);
  v9.n128_u32[0] = HIDWORD(v37);
  v34 = HIDWORD(v37);
  v38 = 2139095039;
  if (*((float *)&v37 + 1) != 3.4028e38)
  {
    v10 = v7[1];
    (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(****(_QWORD ****)(a1 + 152) + 96))(&v37, ***(_QWORD ***)(a1 + 152), v10);
    v9.n128_u32[0] = v37;
    v34 = v37;
    v38 = 2139095039;
    if (*(float *)&v37 != 3.4028e38)
    {
      v11 = *(_QWORD *)(a1 + 136);
      v12 = v6 + 20 * a2;
      LOBYTE(v34) = *(_BYTE *)(v12 + 8);
      v35 = *(_DWORD *)(v12 + 12);
      v9.n128_u32[0] = v35;
      v36 = *(_DWORD *)(v12 + 16);
      sub_19C392FCC(v11, v8, v10, (unsigned __int8 *)&v34, v9);
      v13 = *(_QWORD *)(a1 + 136);
      v14 = *(_DWORD *)(v13 + 72);
      if ((v14 & 0x40) != 0)
      {
        v15 = *((float *)&v37 + 1);
        v34 = HIDWORD(v37);
        v38 = 2139095039;
        if (*((float *)&v37 + 1) != 3.4028e38)
        {
          v16 = *(float *)(v13 + 84);
          v17 = atomic_load((unsigned __int8 *)&qword_1EDB96FE8);
          if ((v17 & 1) == 0)
          {
            v29 = *((float *)&v37 + 1);
            v32 = *(float *)(v13 + 84);
            v27 = __cxa_guard_acquire(&qword_1EDB96FE8);
            v15 = v29;
            v16 = v32;
            if (v27)
            {
              dword_1EDB96FF0 = -8388609;
              __cxa_guard_release(&qword_1EDB96FE8);
              v15 = v29;
              v16 = v32;
            }
          }
          if (v15 == *(float *)&dword_1EDB96FF0)
            goto LABEL_10;
          v18 = atomic_load((unsigned __int8 *)&qword_1EDB96FE8);
          if ((v18 & 1) == 0)
          {
            v33 = v16;
            v28 = __cxa_guard_acquire(&qword_1EDB96FE8);
            v16 = v33;
            if (v28)
            {
              dword_1EDB96FF0 = -8388609;
              __cxa_guard_release(&qword_1EDB96FE8);
              v16 = v33;
            }
          }
          if (v16 == *(float *)&dword_1EDB96FF0 || v16 == 3.4028e38)
          {
LABEL_10:
            v19 = NAN;
          }
          else
          {
            v19 = 3.4028e38;
            if (*((float *)&v37 + 1) != 3.4028e38)
              v19 = *((float *)&v37 + 1) - v16;
          }
          *((float *)&v37 + 1) = v19;
          v14 = *(_DWORD *)(v13 + 72);
        }
      }
      if ((v14 & 0x80) != 0)
      {
        v20 = *((float *)&v37 + 1);
        v34 = HIDWORD(v37);
        v38 = 2139095039;
        if (*((float *)&v37 + 1) != 3.4028e38 && *(_DWORD *)(v13 + 96) != -1)
        {
          HIDWORD(v37) = 2139095039;
          v20 = 3.4028e38;
        }
      }
      else
      {
        v20 = *((float *)&v37 + 1);
      }
      v21 = atomic_load((unsigned __int8 *)&qword_1EDB96FE8);
      if ((v21 & 1) == 0)
      {
        v30 = v20;
        v25 = __cxa_guard_acquire(&qword_1EDB96FE8);
        v20 = v30;
        if (v25)
        {
          dword_1EDB96FF0 = -8388609;
          __cxa_guard_release(&qword_1EDB96FE8);
          v20 = v30;
        }
      }
      if (v20 == *(float *)&dword_1EDB96FF0)
        goto LABEL_27;
      v22 = *(float *)&v37;
      v23 = atomic_load((unsigned __int8 *)&qword_1EDB96FE8);
      if ((v23 & 1) == 0)
      {
        v31 = *(float *)&v37;
        v26 = __cxa_guard_acquire(&qword_1EDB96FE8);
        v22 = v31;
        if (v26)
        {
          dword_1EDB96FF0 = -8388609;
          __cxa_guard_release(&qword_1EDB96FE8);
          v22 = v31;
        }
      }
      if (v22 == *(float *)&dword_1EDB96FF0)
      {
LABEL_27:
        v9.n128_u32[0] = 2143289344;
      }
      else
      {
        v24 = *(float *)&v37 == 3.4028e38 || *((float *)&v37 + 1) == 3.4028e38;
        v9.n128_f32[0] = *(float *)&v37 + *((float *)&v37 + 1);
        if (v24)
          v9.n128_f32[0] = 3.4028e38;
      }
    }
  }
  *a3 = v9.n128_u32[0];
}

void sub_19C392FCC(uint64_t a1, int a2, uint64_t a3, unsigned __int8 *a4, __n128 a5)
{
  uint64_t v7;
  uint64_t v8;
  BOOL v10;
  uint64_t v11;
  unsigned int v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;

  *(_BYTE *)(a1 + 88) = *a4;
  *(_DWORD *)(a1 + 92) = *((_DWORD *)a4 + 1);
  *(_DWORD *)(a1 + 96) = *((_DWORD *)a4 + 2);
  *(_BYTE *)(a1 + 80) = *a4;
  a5.n128_u32[0] = *((_DWORD *)a4 + 1);
  *(_DWORD *)(a1 + 84) = a5.n128_u32[0];
  if (*(_DWORD *)(a1 + 24) != a2 || *(_DWORD *)(a1 + 28) != (_DWORD)a3 || *a4 != *(unsigned __int8 *)(a1 + 32))
  {
    *(_DWORD *)(a1 + 24) = a2;
    *(_DWORD *)(a1 + 28) = a3;
    *(_BYTE *)(a1 + 32) = *a4;
    v7 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), a3);
    v8 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16), a3);
    (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 24))(&v14, *(_QWORD *)(a1 + 16), a3);
    v15 = v14;
    HIDWORD(v14) = 2139095039;
    a5.n128_u32[0] = v14;
    v10 = *(float *)&v14 == 3.4028e38 && v7 == v8;
    *(_BYTE *)(a1 + 33) = v10;
    *(_BYTE *)(a1 + 34) = v8 == 0;
  }
  if ((*(_BYTE *)(a1 + 72) & 0x80) != 0)
  {
    if (*(_DWORD *)(a1 + 40) == 1)
      v11 = (*(uint64_t (**)(__n128))(**(_QWORD **)(a1 + 104) + 32))(a5);
    else
      v11 = (*(uint64_t (**)(__n128))(**(_QWORD **)(a1 + 112) + 32))(a5);
    *(_QWORD *)(a1 + 280) = v11;
    v12 = *(_DWORD *)(a1 + 96);
    sub_19C33275C(*(_QWORD **)(a1 + 144));
    v13 = *(_QWORD **)(a1 + 224);
    *(_QWORD *)(a1 + 136) = a1 + 144;
    *(_QWORD *)(a1 + 144) = 0;
    *(_QWORD *)(a1 + 152) = 0;
    *(_QWORD *)(a1 + 160) = -1;
    sub_19C33275C(v13);
    *(_QWORD *)(a1 + 216) = a1 + 224;
    *(_QWORD *)(a1 + 224) = 0;
    *(_QWORD *)(a1 + 232) = 0;
    *(_QWORD *)(a1 + 240) = -1;
    if (v12 != -1)
    {
      sub_19C390608(a1 + 120, v12);
      sub_19C390608(a1 + 200, v12);
    }
  }
}

void sub_19C39318C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD **a6, int a7)
{
  int v11;
  unsigned int *v14;
  unint64_t v15;
  _QWORD v16[3];
  _DWORD *v17;
  unint64_t v18;
  unsigned int v19[4];

  v11 = a3;
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)**a6 + 56))(**a6, a3);
  *((_DWORD *)a6 + 18) = v11;
  v19[0] = a7 - 1;
  v19[1] = a7 << 31 >> 31;
  v19[2] = 0;
  v19[3] = a5;
  sub_19C393344(a1, a2, a6, v19, a7);
  v18 = 0;
  (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a4 + 120))(a4, a5, v16);
  while (1)
  {
    if (!v16[0])
    {
      v15 = v18;
      if (v18 >= v16[2])
        goto LABEL_15;
      goto LABEL_10;
    }
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v16[0] + 16))(v16[0]))
      break;
    if (!v16[0])
    {
      v15 = v18;
LABEL_10:
      v14 = (unsigned int *)(v16[1] + 16 * v15);
      goto LABEL_11;
    }
    v14 = (unsigned int *)(*(uint64_t (**)(void))(*(_QWORD *)v16[0] + 24))();
LABEL_11:
    sub_19C393344(a1, a2, a6, v14, a7);
    if (v16[0])
      (*(void (**)(_QWORD))(*(_QWORD *)v16[0] + 32))(v16[0]);
    else
      ++v18;
  }
  if (v16[0])
  {
    (*(void (**)(void))(*(_QWORD *)v16[0] + 8))();
    goto LABEL_17;
  }
LABEL_15:
  if (v17)
    --*v17;
LABEL_17:
  sub_19C386AA0(a1, a2);
}

void sub_19C393308(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _DWORD *a13)
{
  if (!a10)
  {
    if (a13)
      --*a13;
    _Unwind_Resume(exception_object);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C393344(uint64_t a1, int a2, _QWORD **a3, unsigned int *a4, int a5)
{
  char v5;
  unsigned int *v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[4];
  float v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  float v24;

  v5 = a5;
  v10 = a4 + 1;
  if (!a5)
    v10 = a4;
  result = sub_19C3910E8(a3, *v10);
  if ((_DWORD)result && !*((_BYTE *)a3 + 76))
  {
    if ((v5 & 1) != 0)
    {
      do
      {
        v12 = (uint64_t)a3 + 60;
        if (!*((_BYTE *)a3 + 56))
          v12 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**a3 + 80))(**a3);
        v20 = *(_QWORD *)v12;
        v21 = *(_DWORD *)(v12 + 8);
        v22 = *(_DWORD *)(v12 + 12);
        v17 = *(_QWORD *)a4;
        v18 = a4[2];
        v19 = a4[3];
        sub_19C39355C((uint64_t)v14, *(_QWORD *)(a1 + 136), (uint64_t)&v17, (uint64_t)&v20);
        if (v14[0] != 255 || (v24 = v15, v23 = 2139095039, v15 != 3.4028e38) || v16 != -1)
          sub_19C3936A8(a1, a2, (float *)&v17, (uint64_t)&v20, (uint64_t)v14);
        result = sub_19C391790((uint64_t)a3);
      }
      while (!*((_BYTE *)a3 + 76));
    }
    else
    {
      do
      {
        v13 = (uint64_t)a3 + 60;
        if (!*((_BYTE *)a3 + 56))
          v13 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**a3 + 80))(**a3);
        v20 = *(_QWORD *)v13;
        v21 = *(_DWORD *)(v13 + 8);
        v22 = *(_DWORD *)(v13 + 12);
        v17 = *(_QWORD *)a4;
        v18 = a4[2];
        v19 = a4[3];
        sub_19C39355C((uint64_t)v14, *(_QWORD *)(a1 + 136), (uint64_t)&v20, (uint64_t)&v17);
        if (v14[0] != 255 || (v24 = v15, v23 = 2139095039, v15 != 3.4028e38) || v16 != -1)
          sub_19C3936A8(a1, a2, (float *)&v20, (uint64_t)&v17, (uint64_t)v14);
        result = sub_19C391790((uint64_t)a3);
      }
      while (!*((_BYTE *)a3 + 76));
    }
  }
  return result;
}

float sub_19C39355C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  char v8;
  float result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[4];
  float v14;
  int v15;
  float v16;

  v4 = a4;
  v5 = a3;
  if ((*(_BYTE *)(a2 + 72) & 0x80) == 0)
  {
    sub_19C393AB8((uint64_t)v13, a2, a3, a4);
    v8 = v13[0];
LABEL_3:
    *(_BYTE *)a1 = v8;
    result = v14;
    *(float *)(a1 + 4) = v14;
    *(_DWORD *)(a1 + 8) = -1;
    return result;
  }
  v10 = *(unsigned int *)(a2 + 96);
  if ((_DWORD)v10 == -1)
  {
    sub_19C393AB8((uint64_t)v13, a2, a3, a4);
    v8 = v13[0];
    if (v13[0] == 255)
    {
      v16 = v14;
      v15 = 2139095039;
      result = v14;
      if (v14 == 3.4028e38)
      {
        *(_BYTE *)a1 = -1;
        *(_QWORD *)(a1 + 4) = -2155872257;
        return result;
      }
    }
    if (!*(_BYTE *)(a2 + 76))
      goto LABEL_3;
    if (*(_DWORD *)(a2 + 40) == 1)
    {
      v11 = v5;
      v12 = v4;
    }
    else
    {
      v11 = v4;
      v12 = v5;
    }
    return sub_19C391E50(a1, a2, v11, v12, (uint64_t)v13);
  }
  else
  {
    if (*(_DWORD *)(a2 + 40) != 1)
    {
      a3 = a4;
      a4 = v5;
    }
    return sub_19C391D44(a1, a2, a3, a4, v10);
  }
}

void sub_19C3936A8(uint64_t a1, int a2, float *a3, uint64_t a4, uint64_t a5)
{
  int v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  unsigned __int8 v13;
  float v14;
  unsigned __int8 v15;
  float v16;
  float v17;
  BOOL v18;
  float v19;
  float v20;
  _QWORD *v21;
  uint64_t *v22;
  unint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  _QWORD *v52;
  float *v53;
  _QWORD *v54;
  _QWORD *v55;
  _QWORD *v56;
  unint64_t v57;
  float *v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  int v62;
  int v63;
  int v64;

  v9 = *(_DWORD *)(a4 + 12);
  *(float *)&v60 = a3[3];
  HIDWORD(v60) = v9;
  v61 = *(_BYTE *)a5;
  v62 = *(_DWORD *)(a5 + 4);
  v63 = *(_DWORD *)(a5 + 8);
  v10 = *(unsigned int *)a3;
  v11 = *(unsigned int *)(a4 + 4);
  v12 = a3[2];
  v13 = atomic_load((unsigned __int8 *)&qword_1EDB96FE8);
  if ((v13 & 1) == 0 && __cxa_guard_acquire(&qword_1EDB96FE8))
  {
    dword_1EDB96FF0 = -8388609;
    __cxa_guard_release(&qword_1EDB96FE8);
  }
  if (v12 == *(float *)&dword_1EDB96FF0)
    goto LABEL_11;
  v14 = *(float *)(a4 + 8);
  v15 = atomic_load((unsigned __int8 *)&qword_1EDB96FE8);
  if ((v15 & 1) == 0 && __cxa_guard_acquire(&qword_1EDB96FE8))
  {
    dword_1EDB96FF0 = -8388609;
    __cxa_guard_release(&qword_1EDB96FE8);
  }
  if (v14 == *(float *)&dword_1EDB96FF0)
  {
LABEL_11:
    v20 = NAN;
  }
  else
  {
    v16 = a3[2];
    v17 = *(float *)(a4 + 8);
    v18 = v17 == 3.4028e38 || v16 == 3.4028e38;
    v19 = v17 + v16;
    if (v18)
      v20 = 3.4028e38;
    else
      v20 = v19;
  }
  v21 = *(_QWORD **)(a1 + 176);
  v21[16] = &v60;
  v22 = sub_19C390784(v21 + 4);
  if (v22)
  {
    LODWORD(v23) = *((_DWORD *)v22 + 4);
  }
  else
  {
    v24 = (char *)v21[13];
    v25 = (char *)v21[14];
    v26 = (v25 - v24) >> 2;
    v23 = 0xCCCCCCCCCCCCCCCDLL * v26;
    v64 = -858993459 * v26;
    v27 = v21[15];
    if ((unint64_t)v25 >= v27)
    {
      v29 = v23 + 1;
      if (v23 + 1 > 0xCCCCCCCCCCCCCCCLL)
        sub_19C2A18E8();
      v30 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v27 - (_QWORD)v24) >> 2);
      if (2 * v30 > v29)
        v29 = 2 * v30;
      if (v30 >= 0x666666666666666)
        v31 = 0xCCCCCCCCCCCCCCCLL;
      else
        v31 = v29;
      if (v31 > 0xCCCCCCCCCCCCCCCLL)
        sub_19C2A143C();
      v32 = 20 * v31;
      v33 = (char *)operator new(20 * v31);
      v34 = &v33[20 * v23];
      v35 = &v33[v32];
      *(_QWORD *)v34 = v60;
      v34[8] = v61;
      *((_DWORD *)v34 + 3) = v62;
      *((_DWORD *)v34 + 4) = v63;
      v28 = v34 + 20;
      if (v25 != v24)
      {
        v36 = 0;
        do
        {
          v37 = &v34[v36];
          *(_QWORD *)(v37 - 20) = *(_QWORD *)&v25[v36 - 20];
          *(v37 - 12) = v25[v36 - 12];
          *((_DWORD *)v37 - 2) = *(_DWORD *)&v25[v36 - 8];
          *((_DWORD *)v37 - 1) = *(_DWORD *)&v25[v36 - 4];
          v36 -= 20;
        }
        while (&v25[v36] != v24);
        v34 += v36;
      }
      v21[13] = v34;
      v21[14] = v28;
      v21[15] = v35;
      if (v24)
        operator delete(v24);
    }
    else
    {
      *(_QWORD *)v25 = v60;
      v25[8] = v61;
      *((_DWORD *)v25 + 3) = v62;
      *((_DWORD *)v25 + 4) = v63;
      v28 = v25 + 20;
    }
    v21[14] = v28;
    sub_19C3908C0((uint64_t)(v21 + 4), v23, &v64);
  }
  v38 = *(_QWORD *)(a1 + 120);
  v39 = sub_19C386C20(v38, a2);
  v40 = v39;
  if (*(_BYTE *)(v38 + 104))
  {
    v41 = *(_DWORD *)(v39 + 56);
    if ((v41 & 4) == 0)
    {
      *(_DWORD *)(v39 + 56) = v41 | 4;
      v42 = *(_QWORD *)(v39 + 32) - *(_QWORD *)(v39 + 24) + *(_QWORD *)(v38 + 128) + 64;
      *(_QWORD *)(v38 + 128) = v42;
      *(_BYTE *)(v38 + 120) = 1;
      if (v42 > *(_QWORD *)(v38 + 112))
        sub_19C386D88(v38, v39);
    }
  }
  v43 = v10 | (v11 << 32);
  v45 = *(_QWORD *)(v40 + 32);
  v44 = *(_QWORD *)(v40 + 40);
  if (v45 >= v44)
  {
    v47 = *(_QWORD *)(v40 + 24);
    v48 = (uint64_t)(v45 - v47) >> 4;
    v49 = v48 + 1;
    if ((unint64_t)(v48 + 1) >> 60)
      sub_19C2A18E8();
    v50 = v44 - v47;
    if (v50 >> 3 > v49)
      v49 = v50 >> 3;
    if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF0)
      v51 = 0xFFFFFFFFFFFFFFFLL;
    else
      v51 = v49;
    v52 = sub_19C387E3C((uint64_t **)(v40 + 48), v51);
    v53 = (float *)&v52[2 * v48];
    v54 = &v52[2 * v51];
    *(_QWORD *)v53 = v43;
    v53[2] = v20;
    *((_DWORD *)v53 + 3) = v23;
    v46 = v53 + 4;
    v56 = *(_QWORD **)(v40 + 24);
    v55 = *(_QWORD **)(v40 + 32);
    if (v55 != v56)
    {
      v57 = 0;
      do
      {
        v58 = &v53[v57 / 4];
        *((_QWORD *)v58 - 2) = v55[v57 / 8 - 2];
        *(v58 - 2) = *(float *)&v55[v57 / 8 - 1];
        *(v58 - 1) = *((float *)&v55[v57 / 8 - 1] + 1);
        v57 -= 16;
      }
      while (&v55[v57 / 8] != v56);
      v53 = (float *)((char *)v53 + v57);
      v55 = *(_QWORD **)(v40 + 24);
    }
    *(_QWORD *)(v40 + 24) = v53;
    *(_QWORD *)(v40 + 32) = v46;
    v59 = *(_QWORD *)(v40 + 40);
    *(_QWORD *)(v40 + 40) = v54;
    if (v55)
      sub_19C37E928((uint64_t **)(v40 + 48), v55, (v59 - (uint64_t)v55) >> 4);
  }
  else
  {
    *(_QWORD *)v45 = v43;
    *(float *)(v45 + 8) = v20;
    v46 = (_QWORD *)(v45 + 16);
    *(_DWORD *)(v45 + 12) = v23;
  }
  *(_QWORD *)(v40 + 32) = v46;
}

void sub_19C393AB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8;
  char v9;
  float v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  BOOL v15;
  uint64_t v16;
  unsigned __int8 *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  BOOL v23;
  uint64_t v24;
  unsigned __int8 *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  float v29;
  uint64_t v30;
  unsigned __int8 *v31;
  float v32;
  float v33;
  unsigned __int8 v34;
  unsigned __int8 v35;
  float v36;
  BOOL v37;
  float v38;
  unsigned __int8 v39;
  unsigned __int8 v40;
  float v41;
  unsigned __int8 v42;
  BOOL v43;
  int v44;
  int v45;
  int v46;
  int v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;

  *(_BYTE *)(a2 + 76) = 0;
  if (*(_DWORD *)a4 == -1)
  {
    if (*(_BYTE *)(a2 + 33))
      goto LABEL_9;
    v9 = *(_BYTE *)(a2 + 34) ^ 1;
    if (*(_DWORD *)(a2 + 40) == 1)
    {
      v12 = *(_DWORD *)(a2 + 72);
      if (*(_DWORD *)(a3 + 4))
      {
        if ((v12 & 0x100) == 0)
          goto LABEL_44;
      }
      else if ((v12 & 0x200) == 0)
      {
        goto LABEL_44;
      }
LABEL_33:
      *(_BYTE *)(a2 + 76) = 1;
      if (*(_DWORD *)(a2 + 64) == 1)
        v21 = 48;
      else
        v21 = 56;
      (*(void (**)(_QWORD, _QWORD))(***(_QWORD ***)(a2 + v21) + 56))(**(_QWORD **)(a2 + v21), *(unsigned int *)(a3 + 12));
      v22 = *(_DWORD *)(a2 + 64);
      v23 = v22 == 1;
      if (v22 == 1)
        v24 = 48;
      else
        v24 = 56;
      v25 = *(unsigned __int8 **)(a2 + v24);
      if (v23)
        v26 = 56;
      else
        v26 = 48;
      v27 = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a2 + v26) + 32))(**(_QWORD **)(a2 + v26));
      v28 = *(unsigned int *)(a4 + 12);
      if (!sub_19C38F654(v25)
        || ((*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)v25 + 128))(*(_QWORD *)v25, v27, v28) & 1) != 0)
      {
        goto LABEL_44;
      }
LABEL_9:
      v9 = -1;
      v10 = 3.4028e38;
      goto LABEL_77;
    }
    if ((*(_DWORD *)(a2 + 72) & 0x100) == 0)
      goto LABEL_44;
  }
  else
  {
    v8 = *(_DWORD *)(a3 + 4);
    if (!v8 || v8 == -1 && *(_BYTE *)(a2 + 32) == 1)
      goto LABEL_9;
    if (*(_DWORD *)(a2 + 40) == 1)
    {
      v9 = 0;
      if ((*(_DWORD *)(a2 + 72) & 0x100) == 0)
        goto LABEL_44;
      goto LABEL_33;
    }
    v11 = *(_DWORD *)(a2 + 72);
    v9 = 0;
    if (*(_DWORD *)a4)
    {
      if ((v11 & 0x100) == 0)
        goto LABEL_44;
    }
    else if ((v11 & 0x200) == 0)
    {
      goto LABEL_44;
    }
  }
  *(_BYTE *)(a2 + 76) = 1;
  if (*(_DWORD *)(a2 + 64) == 1)
    v13 = 48;
  else
    v13 = 56;
  (*(void (**)(_QWORD, _QWORD))(***(_QWORD ***)(a2 + v13) + 56))(**(_QWORD **)(a2 + v13), *(unsigned int *)(a4 + 12));
  v14 = *(_DWORD *)(a2 + 64);
  v15 = v14 == 1;
  if (v14 == 1)
    v16 = 48;
  else
    v16 = 56;
  v17 = *(unsigned __int8 **)(a2 + v16);
  if (v15)
    v18 = 56;
  else
    v18 = 48;
  v19 = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a2 + v18) + 32))(**(_QWORD **)(a2 + v18));
  v20 = *(unsigned int *)(a3 + 12);
  if (sub_19C38F654(v17)
    && !(*(unsigned int (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)v17 + 128))(*(_QWORD *)v17, v19, v20))
  {
    goto LABEL_9;
  }
LABEL_44:
  v10 = 0.0;
  if ((*(_BYTE *)(a2 + 72) & 0x40) != 0)
  {
    v29 = 0.0;
    if (*(_BYTE *)(a2 + 76))
    {
      v30 = 56;
      if (*(_DWORD *)(a2 + 64) == 1)
        v30 = 48;
      v31 = *(unsigned __int8 **)(a2 + v30);
      if (sub_19C38F654(v31))
        v29 = *(float *)(*(_QWORD *)v31 + 8);
    }
    v32 = *(float *)(a2 + 84);
    if (v29 == 3.4028e38)
    {
      v9 = -1;
      v10 = 3.4028e38;
    }
    else
    {
      v33 = *(float *)(a4 + 8);
      v34 = atomic_load((unsigned __int8 *)&qword_1EDB96FE8);
      if ((v34 & 1) == 0)
      {
        v48 = *(float *)(a4 + 8);
        v51 = *(float *)(a2 + 84);
        v44 = __cxa_guard_acquire(&qword_1EDB96FE8);
        v33 = v48;
        v32 = v51;
        if (v44)
        {
          dword_1EDB96FF0 = -8388609;
          __cxa_guard_release(&qword_1EDB96FE8);
          v33 = v48;
          v32 = v51;
        }
      }
      if (v33 == *(float *)&dword_1EDB96FF0)
        goto LABEL_62;
      v35 = atomic_load((unsigned __int8 *)&qword_1EDB96FE8);
      if ((v35 & 1) == 0)
      {
        v53 = v32;
        v46 = __cxa_guard_acquire(&qword_1EDB96FE8);
        v32 = v53;
        if (v46)
        {
          dword_1EDB96FF0 = -8388609;
          __cxa_guard_release(&qword_1EDB96FE8);
          v32 = v53;
        }
      }
      if (v29 == *(float *)&dword_1EDB96FF0)
      {
LABEL_62:
        v38 = NAN;
      }
      else
      {
        v36 = *(float *)(a4 + 8);
        v37 = v29 == 3.4028e38 || v36 == 3.4028e38;
        v38 = v36 + v29;
        if (v37)
          v38 = 3.4028e38;
      }
      v39 = atomic_load((unsigned __int8 *)&qword_1EDB96FE8);
      if ((v39 & 1) == 0)
      {
        v49 = v38;
        v52 = v32;
        v45 = __cxa_guard_acquire(&qword_1EDB96FE8);
        v38 = v49;
        v32 = v52;
        if (v45)
        {
          dword_1EDB96FF0 = -8388609;
          __cxa_guard_release(&qword_1EDB96FE8);
          v38 = v49;
          v32 = v52;
        }
      }
      if (v38 == *(float *)&dword_1EDB96FF0)
      {
        v41 = NAN;
      }
      else
      {
        v40 = atomic_load((unsigned __int8 *)&qword_1EDB96FE8);
        if ((v40 & 1) == 0)
        {
          v50 = v38;
          v54 = v32;
          v47 = __cxa_guard_acquire(&qword_1EDB96FE8);
          v38 = v50;
          v32 = v54;
          if (v47)
          {
            dword_1EDB96FF0 = -8388609;
            __cxa_guard_release(&qword_1EDB96FE8);
            v38 = v50;
            v32 = v54;
          }
        }
        v41 = NAN;
        if (v32 != *(float *)&dword_1EDB96FF0 && v32 != 3.4028e38)
        {
          v41 = 3.4028e38;
          if (v38 != 3.4028e38)
            v41 = v38 - v32;
        }
      }
      *(float *)(a4 + 8) = v41;
      v42 = atomic_load((unsigned __int8 *)&qword_1EDB96FE8);
      if ((v42 & 1) == 0 && __cxa_guard_acquire(&qword_1EDB96FE8))
      {
        dword_1EDB96FF0 = -8388609;
        __cxa_guard_release(&qword_1EDB96FE8);
      }
      v43 = v29 == 3.4028e38 || v29 == *(float *)&dword_1EDB96FF0;
      v10 = floorf((float)(v29 * 1024.0) + 0.5) * 0.00097656;
      if (v43)
        v10 = v29;
    }
  }
LABEL_77:
  *(_BYTE *)a1 = v9;
  *(float *)(a1 + 4) = v10;
}

uint64_t sub_19C393F4C(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)a1 = &off_1E3D38000;
  v2 = *(_QWORD *)(a1 + 136);
  if (v2)
  {
    if (*(_BYTE *)(v2 + 212))
    {
      v3 = *(_QWORD **)(v2 + 200);
      if (v3)
      {
        if (*v3)
          (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 8))(*v3);
        MEMORY[0x1A1AD355C](v3, 0x1020C405F07FB98);
      }
    }
    sub_19C33275C(*(_QWORD **)(v2 + 224));
    if (*(_BYTE *)(v2 + 132))
    {
      v4 = *(_QWORD **)(v2 + 120);
      if (v4)
      {
        if (*v4)
          (*(void (**)(_QWORD))(*(_QWORD *)*v4 + 8))(*v4);
        MEMORY[0x1A1AD355C](v4, 0x1020C405F07FB98);
      }
    }
    sub_19C33275C(*(_QWORD **)(v2 + 144));
    v5 = sub_19C38F460(v2);
    MEMORY[0x1A1AD355C](v5, 0x1060C409DA32DC3);
  }
  v6 = *(_QWORD **)(a1 + 176);
  if (v6)
  {
    if (*v6)
      MEMORY[0x1A1AD355C](*v6, 0xC400A2AC0F1);
    v7 = v6[1];
    if (v7)
      MEMORY[0x1A1AD355C](v7, 0xC400A2AC0F1);
    v8 = (void *)v6[13];
    if (v8)
    {
      v6[14] = v8;
      operator delete(v8);
    }
    sub_19C38F1EC((uint64_t)(v6 + 4));
    MEMORY[0x1A1AD355C](v6, 0x10E0C401DE81863);
  }
  *(_QWORD *)a1 = off_1E3D37D80;
  v9 = *(_QWORD *)(a1 + 120);
  if (v9)
  {
    v10 = sub_19C37BFF8(v9);
    MEMORY[0x1A1AD355C](v10, 0x10A0C40690396FALL);
  }
  v11 = *(void **)(a1 + 72);
  if (v11)
    operator delete(v11);
  *(_QWORD *)a1 = off_1E3D383E0;
  v12 = *(_QWORD *)(a1 + 40);
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v13 = *(_QWORD *)(a1 + 48);
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void sub_19C394110(_QWORD *a1, CFDictionaryRef theDict)
{
  const void *Value;
  const void *v4;
  CFURLRef PathComponent;
  CFURLRef v6;
  CFStringRef v7;
  _QWORD *exception;
  void *v9;
  void *v10;
  void *v11;
  CFURLRef anURL[3];
  CFURLRef v13;
  CFURLRef url;

  Value = CFDictionaryGetValue(theDict, CFSTR("URL"));
  if (!Value)
  {
    url = 0;
LABEL_16:
    exception = __cxa_allocate_exception(0x20uLL);
    sub_19C2A6D48(anURL, "URL missing for CoreLM tokenizer resource");
    sub_19C31237C(exception, (__int128 *)anURL);
    __cxa_throw(exception, (struct type_info *)&unk_1E3D32968, (void (*)(void *))sub_19C3123E4);
  }
  v4 = Value;
  CFRetain(Value);
  sub_19C2952E8(&url, v4);
  if (!url)
    goto LABEL_16;
  PathComponent = CFURLCreateCopyDeletingLastPathComponent(0, url);
  sub_19C2952E8(&v13, PathComponent);
  if (!v13)
  {
    v9 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD3154](v9, "Could not construct");
    __cxa_throw(v9, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v6 = CFURLCreateCopyAppendingPathComponent(0, v13, CFSTR("sp.dat"), 0);
  sub_19C2952E8(anURL, v6);
  if (v13)
    CFRelease(v13);
  if (!anURL[0])
  {
    v10 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD3154](v10, "Could not construct");
    __cxa_throw(v10, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v7 = CFURLCopyFileSystemPath(anURL[0], kCFURLPOSIXPathStyle);
  sub_19C297DB4(&v13, v7);
  if (!v13)
  {
    v11 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD3154](v11, "Could not construct");
    __cxa_throw(v11, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  sub_19C32EB14(a1, (const __CFString *)v13);
  if (v13)
    CFRelease(v13);
  if (anURL[0])
    CFRelease(anURL[0]);
  if (url)
    CFRelease(url);
}

void sub_19C3942F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, const void *a16, const void *a17)
{
  void *v17;

  __cxa_free_exception(v17);
  sub_19C2E5670(&a16);
  sub_19C32BC18((const void **)&__p);
  sub_19C32BC18(&a17);
  _Unwind_Resume(a1);
}

void sub_19C3943AC(_QWORD *a1, CFDictionaryRef theDict)
{
  const void *Value;
  const void *v4;
  CFURLRef PathComponent;
  CFURLRef v6;
  CFStringRef v7;
  _QWORD *exception;
  void *v9;
  void *v10;
  void *v11;
  CFURLRef anURL[3];
  CFURLRef v13;
  CFURLRef url;

  Value = CFDictionaryGetValue(theDict, CFSTR("URL"));
  if (!Value)
  {
    url = 0;
LABEL_16:
    exception = __cxa_allocate_exception(0x20uLL);
    sub_19C2A6D48(anURL, "URL missing for CoreLM tokenizer resource");
    sub_19C31237C(exception, (__int128 *)anURL);
    __cxa_throw(exception, (struct type_info *)&unk_1E3D32968, (void (*)(void *))sub_19C3123E4);
  }
  v4 = Value;
  CFRetain(Value);
  sub_19C2952E8(&url, v4);
  if (!url)
    goto LABEL_16;
  PathComponent = CFURLCreateCopyDeletingLastPathComponent(0, url);
  sub_19C2952E8(&v13, PathComponent);
  if (!v13)
  {
    v9 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD3154](v9, "Could not construct");
    __cxa_throw(v9, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v6 = CFURLCreateCopyAppendingPathComponent(0, v13, CFSTR("modelInfo.plist"), 0);
  sub_19C2952E8(anURL, v6);
  if (v13)
    CFRelease(v13);
  if (!anURL[0])
  {
    v10 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD3154](v10, "Could not construct");
    __cxa_throw(v10, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v7 = CFURLCopyFileSystemPath(anURL[0], kCFURLPOSIXPathStyle);
  sub_19C297DB4(&v13, v7);
  if (!v13)
  {
    v11 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD3154](v11, "Could not construct");
    __cxa_throw(v11, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  sub_19C32EB14(a1, (const __CFString *)v13);
  if (v13)
    CFRelease(v13);
  if (anURL[0])
    CFRelease(anURL[0]);
  if (url)
    CFRelease(url);
}

void sub_19C394590(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, const void *a16, const void *a17)
{
  void *v17;

  __cxa_free_exception(v17);
  sub_19C2E5670(&a16);
  sub_19C32BC18((const void **)&__p);
  sub_19C32BC18(&a17);
  _Unwind_Resume(a1);
}

uint64_t sub_19C394648(CFDictionaryRef theDict)
{
  void **v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *__p[2];
  char v8;

  sub_19C3943AC(__p, theDict);
  if (v8 >= 0)
    v1 = __p;
  else
    v1 = (void **)__p[0];
  v2 = (void *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithContentsOfFile:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v1));
  v3 = v2;
  if (v2
    && (v4 = (void *)objc_msgSend(v2, "allKeys"),
        objc_msgSend(v4, "containsObject:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "MaximumSequenceLength"))))
  {
    v5 = (int)objc_msgSend((id)objc_msgSend(v3, "objectForKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "MaximumSequenceLength")), "intValue");
    if (v8 < 0)
      goto LABEL_9;
  }
  else
  {
    v5 = 256;
    if (v8 < 0)
LABEL_9:
      operator delete(__p[0]);
  }
  return v5;
}

void sub_19C39472C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19C394750(_QWORD *a1)
{
  void *v2;

  if (a1)
  {
    sub_19C394750(*a1);
    sub_19C394750(a1[1]);
    v2 = (void *)a1[5];
    if (v2)
    {
      a1[6] = v2;
      operator delete(v2);
    }
    operator delete(a1);
  }
}

uint64_t sub_19C394798()
{
  uint64_t result;

  result = MGIsQuestionValid();
  if ((_DWORD)result)
  {
    result = MGGetSInt64Answer();
    byte_1EE41C018 = result > 31;
  }
  return result;
}

uint64_t sub_19C3947D8(uint64_t *a1, const char *a2)
{
  const __CFAllocator *v3;
  const __CFString *v4;
  const __CFString *v5;
  const __CFString *MutableCopy;
  __CFString *v7;
  CFIndex Length;
  CFIndex v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  void *v13;
  void *v14;
  const __CFString *v15;
  const __CFString *v16;
  std::string::size_type size;
  std::string *v18;
  size_t v19;
  BOOL v20;
  unsigned int v21;
  size_t v22;
  size_t v23;
  size_t v24;
  int v25;
  unsigned int v26;
  std::string v28;
  char v29;
  const __CFString *v30;
  const __CFString *v31;
  std::string v32;
  void *v33;
  void *v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  CFRange v38;
  CFRange v39;
  CFRange v40;

  v37 = *MEMORY[0x1E0C80C00];
  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (a2[23] < 0)
    a2 = *(const char **)a2;
  v4 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, 0x8000100u);
  v31 = v4;
  if (v4)
  {
    v5 = v4;
    MutableCopy = CFStringCreateMutableCopy(v3, 0, v4);
    v7 = (__CFString *)MutableCopy;
    v30 = MutableCopy;
    if (!MutableCopy)
    {
      v10 = 0;
LABEL_75:
      CFRelease(v5);
      return v10;
    }
    Length = CFStringGetLength(MutableCopy);
    v39.location = 0;
    v39.length = Length;
    if (CFStringFindWithOptions(v7, CFSTR("'s"), v39, 0xCuLL, 0))
    {
      v9 = CFStringGetLength(CFSTR("'s"));
    }
    else
    {
      Length = CFStringGetLength(v7);
      v40.location = 0;
      v40.length = Length;
      if (!CFStringFindWithOptions(v7, CFSTR("'"), v40, 0xCuLL, 0))
      {
        v11 = 0;
        goto LABEL_12;
      }
      v9 = CFStringGetLength(CFSTR("'"));
    }
    v38.length = v9;
    v38.location = Length - v9;
    CFStringDelete(v7, v38);
    v11 = 1;
LABEL_12:
    CFStringTransform(v7, 0, (CFStringRef)*MEMORY[0x1E0C9B358], 0);
    v28.__r_.__value_.__s.__data_[0] = 0;
    v29 = 0;
    v12 = *a1;
    v32.__r_.__value_.__r.__words[0] = 0;
    v32.__r_.__value_.__l.__size_ = (std::string::size_type)&v32;
    v32.__r_.__value_.__r.__words[2] = 0x2020000000;
    v13 = off_1EE41C3C0;
    v33 = off_1EE41C3C0;
    if (off_1EE41C3C0)
      goto LABEL_19;
    v34 = 0;
    if (qword_1EE41C3B8)
    {
      v13 = (void *)qword_1EE41C3B8;
    }
    else
    {
      v35 = xmmword_1E3D3ACF0;
      v36 = 0;
      qword_1EE41C3B8 = _sl_dlopen();
      v14 = v34;
      v13 = (void *)qword_1EE41C3B8;
      if (!qword_1EE41C3B8)
      {
        v14 = (void *)abort_report_np();
        goto LABEL_79;
      }
      if (v34)
        goto LABEL_80;
    }
    while (1)
    {
      v13 = dlsym(v13, "NLGazetteerCopyLabel");
      *(_QWORD *)(v32.__r_.__value_.__l.__size_ + 24) = v13;
      off_1EE41C3C0 = v13;
LABEL_19:
      _Block_object_dispose(&v32, 8);
      if (v13)
        break;
      dlerror();
      v14 = (void *)abort_report_np();
LABEL_79:
      __break(1u);
LABEL_80:
      free(v14);
    }
    v15 = (const __CFString *)((uint64_t (*)(uint64_t, __CFString *))v13)(v12, v7);
    v16 = v15;
    if (!v15)
    {
      v10 = 0;
LABEL_74:
      CFRelease(v7);
      goto LABEL_75;
    }
    sub_19C29CEF8(v15, &v32);
    v28 = v32;
    v29 = 1;
    if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v32.__r_.__value_.__r.__words[2]);
    else
      size = v32.__r_.__value_.__l.__size_;
    if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v18 = &v28;
    else
      v18 = (std::string *)v32.__r_.__value_.__r.__words[0];
    if (size >= 4)
      v19 = 4;
    else
      v19 = size;
    if (!memcmp(v18, "NAME", v19) && size == 4)
    {
      v20 = v11 == 0;
      v21 = 1;
    }
    else
    {
      if (size >= 0xE)
        v22 = 14;
      else
        v22 = size;
      if (!memcmp(v18, "AMBIGIOUS_NAME", v22) && size == 14)
      {
        v20 = v11 == 0;
        v21 = 3;
      }
      else
      {
        if (size >= 0xA)
          v23 = 10;
        else
          v23 = size;
        if (!memcmp(v18, "PLACE_NAME", v23) && size == 10)
        {
          v20 = v11 == 0;
          v21 = 5;
        }
        else
        {
          if (size >= 0xD)
            v24 = 13;
          else
            v24 = size;
          if (!memcmp(v18, "RACE_SINGULAR", v24) && size == 13)
          {
            v20 = v11 == 0;
            v21 = 7;
          }
          else if (!std::string::compare(&v28, "RACE_PLURAL"))
          {
            v20 = v11 == 0;
            v21 = 9;
          }
          else if (!std::string::compare(&v28, "COLOR_RACE_SINGULAR"))
          {
            v20 = v11 == 0;
            v21 = 11;
          }
          else if (!std::string::compare(&v28, "COLOR_RACE_PLURAL"))
          {
            v20 = v11 == 0;
            v21 = 13;
          }
          else if (!std::string::compare(&v28, "RELIGION_NAME"))
          {
            v20 = v11 == 0;
            v21 = 15;
          }
          else
          {
            if (std::string::compare(&v28, "RELIGION_PEOPLE_SINGULAR"))
            {
              v25 = std::string::compare(&v28, "RELIGION_PEOPLE_PLURAL");
              if (v11)
                v26 = 20;
              else
                v26 = 19;
              if (v25)
                v10 = 0;
              else
                v10 = v26;
              goto LABEL_71;
            }
            v20 = v11 == 0;
            v21 = 17;
          }
        }
      }
    }
    if (v20)
      v10 = v21;
    else
      v10 = v21 + 1;
LABEL_71:
    CFRelease(v16);
    if (v29 && SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v28.__r_.__value_.__l.__data_);
    goto LABEL_74;
  }
  return 0;
}

void sub_19C394C6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, int a17, __int16 a18, char a19, char a20,int a21,__int16 a22,char a23,char a24)
{
  if (a2)
    sub_19C2CDAC8(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_19C394CD0(uint64_t *a1, uint64_t a2)
{
  _BOOL4 v4;
  void *v5;
  uint64_t v6;
  uint64_t *v7;
  _DWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  BOOL v16;
  unint64_t v17;
  uint64_t v18;
  NSObject *v19;
  std::string::size_type v20;
  _BOOL4 v21;
  void *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  __int128 v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  BOOL v38;
  std::string::size_type v39;
  _BYTE *exception;
  char *v41;
  _BYTE *v42;
  char *v43;
  _QWORD *v44;
  _BYTE *v45;
  _BYTE *v46;
  char *v47;
  _QWORD *v48;
  _QWORD *v49;
  void *v50;
  std::string::size_type v51;
  std::string *p_dst;
  _BYTE *v53;
  char *v54;
  _QWORD *v55;
  _BYTE *v56;
  char *v57;
  _QWORD *v58;
  _BYTE *v59;
  _QWORD *v60;
  _QWORD *v61;
  void *v62;
  std::string::size_type v63;
  std::string *v64;
  _QWORD *v65;
  _QWORD *v66;
  void *v67;
  std::string::size_type v68;
  std::string *v69;
  _QWORD *v70;
  _QWORD *v71;
  void *v72;
  std::string::size_type v73;
  std::string *v74;
  _QWORD *v75;
  _QWORD *v76;
  void *v77;
  std::string::size_type v78;
  std::string *v79;
  __int128 v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  void *v85;
  __int128 v86;
  unint64_t v87;
  const void **v88;
  const void *v89;
  unint64_t v90;
  const void **v91;
  unint64_t v92;
  const void **v93;
  uint64_t v94;
  uint64_t v95;
  std::string *v96;
  __int128 v97;
  unint64_t v98;
  const void **v99;
  unint64_t v100;
  const void **v101;
  const void *v102;
  const void *v103;
  uint64_t v104;
  uint64_t v105;
  std::string *v106;
  __int128 v107;
  uint64_t v108;
  uint64_t v109;
  std::string *v110;
  __int128 v111;
  const void *v112;
  const void *v113;
  uint64_t v114;
  uint64_t v115;
  std::string *v116;
  __int128 v117;
  uint64_t v118;
  uint64_t v119;
  std::string *v120;
  __int128 v121;
  std::string __dst;
  std::string v123;
  _BYTE v124[16];
  unint64_t v125;
  uint64_t v126;
  unint64_t v127;
  unint64_t v128;
  int v129;
  uint64_t v130;
  std::string buf;
  uint64_t v132;

  v132 = *MEMORY[0x1E0C80C00];
  sub_19C3663C0(&v123, a2);
  if (v123.__r_.__value_.__l.__size_ >= 0x10)
  {
    v4 = *(_DWORD *)sub_19C3CBDE0(&v123) == -1635387661;
    v5 = (void *)v123.__r_.__value_.__r.__words[0];
    if (!v123.__r_.__value_.__r.__words[0])
      goto LABEL_6;
    goto LABEL_5;
  }
  v4 = 0;
  v5 = (void *)v123.__r_.__value_.__r.__words[0];
  if (v123.__r_.__value_.__r.__words[0])
LABEL_5:
    munmap(v5, v123.__r_.__value_.__l.__size_);
LABEL_6:
  if (v4)
  {
    v6 = operator new();
    *(_QWORD *)v6 = &off_1E3D37058;
    v7 = (uint64_t *)(v6 + 8);
    sub_19C3663C0((_QWORD *)(v6 + 8), a2);
    *(_OWORD *)(v6 + 40) = 0u;
    *(_OWORD *)(v6 + 24) = 0u;
    if (*(_QWORD *)(v6 + 16) <= 0xFuLL)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      v41 = (char *)operator new(0x20uLL);
      strcpy(v41, "Invalid token id map file");
      *(_QWORD *)exception = off_1E3D38838;
      sub_19C2B5238(exception + 8, v41, 0x19uLL);
      __cxa_throw(exception, (struct type_info *)&unk_1E3D32968, (void (*)(void *))sub_19C3123E4);
    }
    v8 = (_DWORD *)sub_19C3CBDE0(v7);
    if (*v8 != -1635387661)
    {
      v42 = __cxa_allocate_exception(0x20uLL);
      v43 = (char *)operator new(0x38uLL);
      strcpy(v43, "Invalid token id map file - magic number incorrect");
      *(_QWORD *)v42 = off_1E3D38838;
      sub_19C2B5238(v42 + 8, v43, 0x32uLL);
      __cxa_throw(v42, (struct type_info *)&unk_1E3D32968, (void (*)(void *))sub_19C3123E4);
    }
    v9 = v8[1];
    if ((_DWORD)v9 != 1)
    {
      v44 = __cxa_allocate_exception(0x20uLL);
      sub_19C34EC30("Token id map file is incompatible (version %d, expected version %d)", (uint64_t)&v123, v9, 1);
      *v44 = off_1E3D38838;
      v45 = v44 + 1;
      if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0)
      {
        sub_19C2B5238(v45, v123.__r_.__value_.__l.__data_, v123.__r_.__value_.__l.__size_);
      }
      else
      {
        v80 = *(_OWORD *)&v123.__r_.__value_.__l.__data_;
        v44[3] = *((_QWORD *)&v123.__r_.__value_.__l + 2);
        *(_OWORD *)v45 = v80;
      }
      __cxa_throw(v44, (struct type_info *)&unk_1E3D32968, (void (*)(void *))sub_19C3123E4);
    }
    v11 = v8[2];
    v10 = v8[3];
    v12 = 4 * v10 + 16;
    if (v12 + 8 * v11 != sub_19C34EF14())
    {
      v46 = __cxa_allocate_exception(0x20uLL);
      v47 = (char *)operator new(0x38uLL);
      strcpy(v47, "Invalid token id map file - unexpected file size");
      *(_QWORD *)v46 = off_1E3D38838;
      sub_19C2B5238(v46 + 8, v47, 0x30uLL);
      __cxa_throw(v46, (struct type_info *)&unk_1E3D32968, (void (*)(void *))sub_19C3123E4);
    }
    v13 = sub_19C3AF060(v7, 0x10uLL, v10);
    *(_QWORD *)(v6 + 24) = v14;
    *(_QWORD *)(v6 + 32) = v13;
    v15 = *(_QWORD *)(v6 + 16);
    v16 = v15 > v12;
    v17 = v15 - v12;
    if (!v16)
    {
      sub_19C2B4F08((uint64_t)&v123);
      sub_19C2A1B24(&v123.__r_.__value_.__r.__words[2], (uint64_t)"(file_size=", 11);
      v48 = (_QWORD *)std::ostream::operator<<();
      sub_19C2A1B24(v48, (uint64_t)", offset=", 9);
      v49 = (_QWORD *)std::ostream::operator<<();
      sub_19C2A1B24(v49, (uint64_t)")", 1);
      v50 = __cxa_allocate_exception(0x10uLL);
      if ((v129 & 0x10) != 0)
      {
        v87 = v128;
        if (v128 < v127)
        {
          v128 = v127;
          v87 = v127;
        }
        v88 = (const void **)&v126;
      }
      else
      {
        if ((v129 & 8) == 0)
        {
          v51 = 0;
          *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 0;
          p_dst = &__dst;
          goto LABEL_128;
        }
        v88 = (const void **)v124;
        v87 = v125;
      }
      v89 = *v88;
      v51 = v87 - (_QWORD)*v88;
      if (v51 > 0x7FFFFFFFFFFFFFF7)
        sub_19C2A1A54();
      if (v51 >= 0x17)
      {
        v94 = (v51 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v51 | 7) != 0x17)
          v94 = v51 | 7;
        v95 = v94 + 1;
        p_dst = (std::string *)operator new(v94 + 1);
        __dst.__r_.__value_.__l.__size_ = v51;
        __dst.__r_.__value_.__r.__words[2] = v95 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
      }
      else
      {
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v87 - *(_BYTE *)v88;
        p_dst = &__dst;
        if (!v51)
        {
LABEL_128:
          p_dst->__r_.__value_.__s.__data_[v51] = 0;
          v96 = std::string::insert(&__dst, 0, "attempted to read beyond the end of the mapped file ", 0x34uLL);
          v97 = *(_OWORD *)&v96->__r_.__value_.__l.__data_;
          buf.__r_.__value_.__r.__words[2] = v96->__r_.__value_.__r.__words[2];
          *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v97;
          v96->__r_.__value_.__l.__size_ = 0;
          v96->__r_.__value_.__r.__words[2] = 0;
          v96->__r_.__value_.__r.__words[0] = 0;
          MEMORY[0x1A1AD3160](v50, &buf);
          __cxa_throw(v50, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
        }
      }
      memmove(p_dst, v89, v51);
      goto LABEL_128;
    }
    v18 = *v7;
    if (v17 < 8 || v18)
    {
      *(_QWORD *)(v6 + 40) = v18 + v12;
      *(_QWORD *)(v6 + 48) = v17 >> 3;
      if (qword_1EDB97228 != -1)
        dispatch_once(&qword_1EDB97228, &unk_1E3D3ABD0);
      v19 = qword_1EDB97220;
      if (os_log_type_enabled((os_log_t)qword_1EDB97220, OS_LOG_TYPE_INFO))
      {
        if (*(char *)(a2 + 23) >= 0)
          v20 = a2;
        else
          v20 = *(_QWORD *)a2;
        LODWORD(v123.__r_.__value_.__l.__data_) = 136315394;
        *(std::string::size_type *)((char *)v123.__r_.__value_.__r.__words + 4) = (std::string::size_type)"MontrealDefaultTokenIDMapper";
        WORD2(v123.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&v123.__r_.__value_.__r.__words[1] + 6) = v20;
LABEL_73:
        _os_log_impl(&dword_19C291000, v19, OS_LOG_TYPE_INFO, "%s: Loaded tokenID mapper: %s", (uint8_t *)&v123, 0x16u);
        goto LABEL_74;
      }
      goto LABEL_74;
    }
LABEL_75:
    sub_19C366A00();
  }
  sub_19C3663C0(&v123, a2);
  if (v123.__r_.__value_.__l.__size_ >= 0x30)
  {
    v21 = *(_DWORD *)sub_19C36661C(&v123) == 2142173355;
    v22 = (void *)v123.__r_.__value_.__r.__words[0];
    if (!v123.__r_.__value_.__r.__words[0])
      goto LABEL_27;
    goto LABEL_26;
  }
  v21 = 0;
  v22 = (void *)v123.__r_.__value_.__r.__words[0];
  if (v123.__r_.__value_.__r.__words[0])
LABEL_26:
    munmap(v22, v123.__r_.__value_.__l.__size_);
LABEL_27:
  if (!v21)
  {
    sub_19C34EFE0(&v123);
    if ((*((_BYTE *)&v123 + *(_QWORD *)(v123.__r_.__value_.__r.__words[0] - 24) + 32) & 5) == 0)
    {
      std::istream::read();
      if ((*((_BYTE *)&v123 + *(_QWORD *)(v123.__r_.__value_.__r.__words[0] - 24) + 32) & 5) != 0)
      {
        v81 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1A1AD3154](v81, "Failed to read from input file stream");
        __cxa_throw(v81, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
      }
      std::istream::read();
      if ((*((_BYTE *)&v123 + *(_QWORD *)(v123.__r_.__value_.__r.__words[0] - 24) + 32) & 5) != 0)
      {
        v82 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1A1AD3154](v82, "Failed to read from input file stream");
        __cxa_throw(v82, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
      }
      std::istream::read();
      if ((*((_BYTE *)&v123 + *(_QWORD *)(v123.__r_.__value_.__r.__words[0] - 24) + 32) & 5) != 0)
      {
        v83 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1A1AD3154](v83, "Failed to read from input file stream");
        __cxa_throw(v83, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
      }
      std::istream::read();
      if ((*((_BYTE *)&v123 + *(_QWORD *)(v123.__r_.__value_.__r.__words[0] - 24) + 32) & 5) != 0)
      {
        v84 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1A1AD3154](v84, "Failed to read from input file stream");
        __cxa_throw(v84, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
      }
      std::istream::read();
      if ((*((_BYTE *)&v123 + *(_QWORD *)(v123.__r_.__value_.__r.__words[0] - 24) + 32) & 5) != 0)
      {
        v85 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1A1AD3154](v85, "Failed to read from input file stream");
        __cxa_throw(v85, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
      }
    }
    v123.__r_.__value_.__r.__words[0] = *MEMORY[0x1E0DE4F40];
    *(std::string::size_type *)((char *)v123.__r_.__value_.__r.__words
                              + *(_QWORD *)(v123.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F40]
                                                                                                 + 24);
    MEMORY[0x1A1AD3238](&v123.__r_.__value_.__r.__words[2]);
    std::istream::~istream();
    MEMORY[0x1A1AD34CC](&v130);
    v55 = __cxa_allocate_exception(0x20uLL);
    std::operator+<char>();
    sub_19C39717C(&v123, &buf, "'");
    sub_19C31237C(v55, (__int128 *)&v123);
    __cxa_throw(v55, (struct type_info *)&unk_1E3D32968, (void (*)(void *))sub_19C3123E4);
  }
  v6 = operator new();
  *(_QWORD *)v6 = &off_1E3D36E78;
  v23 = (uint64_t *)(v6 + 8);
  sub_19C3663C0((_QWORD *)(v6 + 8), a2);
  *(_OWORD *)(v6 + 72) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_OWORD *)(v6 + 40) = 0u;
  *(_OWORD *)(v6 + 24) = 0u;
  if (*(_QWORD *)(v6 + 16) <= 0x2FuLL)
  {
    v53 = __cxa_allocate_exception(0x20uLL);
    v54 = (char *)operator new(0x20uLL);
    strcpy(v54, "Invalid token id map file");
    *(_QWORD *)v53 = off_1E3D38838;
    sub_19C2B5238(v53 + 8, v54, 0x19uLL);
    __cxa_throw(v53, (struct type_info *)&unk_1E3D32968, (void (*)(void *))sub_19C3123E4);
  }
  v24 = sub_19C36661C(v23);
  if (*(_DWORD *)v24 != 2142173355)
  {
    v56 = __cxa_allocate_exception(0x20uLL);
    v57 = (char *)operator new(0x38uLL);
    strcpy(v57, "Invalid token id map file - magic number incorrect");
    *(_QWORD *)v56 = off_1E3D38838;
    sub_19C2B5238(v56 + 8, v57, 0x32uLL);
    __cxa_throw(v56, (struct type_info *)&unk_1E3D32968, (void (*)(void *))sub_19C3123E4);
  }
  v25 = *(unsigned int *)(v24 + 4);
  if ((_DWORD)v25 != 1)
  {
    v58 = __cxa_allocate_exception(0x20uLL);
    sub_19C34EC30("lexicon file is incompatible (version %d, expected version %d)", (uint64_t)&v123, v25, 1);
    *v58 = off_1E3D38838;
    v59 = v58 + 1;
    if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0)
    {
      sub_19C2B5238(v59, v123.__r_.__value_.__l.__data_, v123.__r_.__value_.__l.__size_);
    }
    else
    {
      v86 = *(_OWORD *)&v123.__r_.__value_.__l.__data_;
      v58[3] = *((_QWORD *)&v123.__r_.__value_.__l + 2);
      *(_OWORD *)v59 = v86;
    }
    __cxa_throw(v58, (struct type_info *)&unk_1E3D32968, (void (*)(void *))sub_19C3123E4);
  }
  v27 = *(unsigned int *)(v24 + 8);
  v26 = *(unsigned int *)(v24 + 12);
  v28 = *(_OWORD *)(v24 + 32);
  *(_OWORD *)(v6 + 88) = *(_OWORD *)(v24 + 16);
  *(_OWORD *)(v6 + 104) = v28;
  v29 = *(_QWORD *)(v6 + 16);
  if (v29 <= 0x30)
  {
    sub_19C2B4F08((uint64_t)&v123);
    sub_19C2A1B24(&v123.__r_.__value_.__r.__words[2], (uint64_t)"(file_size=", 11);
    v60 = (_QWORD *)std::ostream::operator<<();
    sub_19C2A1B24(v60, (uint64_t)", offset=", 9);
    v61 = (_QWORD *)std::ostream::operator<<();
    sub_19C2A1B24(v61, (uint64_t)")", 1);
    v62 = __cxa_allocate_exception(0x10uLL);
    if ((v129 & 0x10) != 0)
    {
      v90 = v128;
      if (v128 < v127)
      {
        v128 = v127;
        v90 = v127;
      }
      v91 = (const void **)&v126;
    }
    else
    {
      if ((v129 & 8) == 0)
      {
        v63 = 0;
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 0;
        v64 = &__dst;
        goto LABEL_151;
      }
      v91 = (const void **)v124;
      v90 = v125;
    }
    v102 = *v91;
    v63 = v90 - (_QWORD)*v91;
    if (v63 > 0x7FFFFFFFFFFFFFF7)
      sub_19C2A1A54();
    if (v63 >= 0x17)
    {
      v104 = (v63 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v63 | 7) != 0x17)
        v104 = v63 | 7;
      v105 = v104 + 1;
      v64 = (std::string *)operator new(v104 + 1);
      __dst.__r_.__value_.__l.__size_ = v63;
      __dst.__r_.__value_.__r.__words[2] = v105 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v64;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v90 - *(_BYTE *)v91;
      v64 = &__dst;
      if (!v63)
      {
LABEL_151:
        v64->__r_.__value_.__s.__data_[v63] = 0;
        v106 = std::string::insert(&__dst, 0, "attempted to read beyond the end of the mapped file ", 0x34uLL);
        v107 = *(_OWORD *)&v106->__r_.__value_.__l.__data_;
        buf.__r_.__value_.__r.__words[2] = v106->__r_.__value_.__r.__words[2];
        *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v107;
        v106->__r_.__value_.__l.__size_ = 0;
        v106->__r_.__value_.__r.__words[2] = 0;
        v106->__r_.__value_.__r.__words[0] = 0;
        MEMORY[0x1A1AD3160](v62, &buf);
        __cxa_throw(v62, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
      }
    }
    memmove(v64, v102, v63);
    goto LABEL_151;
  }
  v30 = *v23;
  v31 = (v29 - 48) >> 3;
  if (v31 >= v27)
    v31 = v27;
  if (v31 && !v30)
    goto LABEL_75;
  *(_QWORD *)(v6 + 24) = v30 + 48;
  *(_QWORD *)(v6 + 32) = v31;
  v32 = 8 * v31 + 48;
  if (!(_DWORD)v26)
  {
    v33 = *(_QWORD *)(v6 + 48);
    goto LABEL_51;
  }
  if (v29 <= v32)
  {
    sub_19C2B4F08((uint64_t)&v123);
    sub_19C2A1B24(&v123.__r_.__value_.__r.__words[2], (uint64_t)"(file_size=", 11);
    v70 = (_QWORD *)std::ostream::operator<<();
    sub_19C2A1B24(v70, (uint64_t)", offset=", 9);
    v71 = (_QWORD *)std::ostream::operator<<();
    sub_19C2A1B24(v71, (uint64_t)")", 1);
    v72 = __cxa_allocate_exception(0x10uLL);
    if ((v129 & 0x10) != 0)
    {
      v98 = v128;
      if (v128 < v127)
      {
        v128 = v127;
        v98 = v127;
      }
      v99 = (const void **)&v126;
    }
    else
    {
      if ((v129 & 8) == 0)
      {
        v73 = 0;
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 0;
        v74 = &__dst;
        goto LABEL_173;
      }
      v99 = (const void **)v124;
      v98 = v125;
    }
    v112 = *v99;
    v73 = v98 - (_QWORD)*v99;
    if (v73 > 0x7FFFFFFFFFFFFFF7)
      sub_19C2A1A54();
    if (v73 >= 0x17)
    {
      v114 = (v73 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v73 | 7) != 0x17)
        v114 = v73 | 7;
      v115 = v114 + 1;
      v74 = (std::string *)operator new(v114 + 1);
      __dst.__r_.__value_.__l.__size_ = v73;
      __dst.__r_.__value_.__r.__words[2] = v115 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v74;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v98 - *(_BYTE *)v99;
      v74 = &__dst;
      if (!v73)
      {
LABEL_173:
        v74->__r_.__value_.__s.__data_[v73] = 0;
        v116 = std::string::insert(&__dst, 0, "attempted to read beyond the end of the mapped file ", 0x34uLL);
        v117 = *(_OWORD *)&v116->__r_.__value_.__l.__data_;
        buf.__r_.__value_.__r.__words[2] = v116->__r_.__value_.__r.__words[2];
        *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v117;
        v116->__r_.__value_.__l.__size_ = 0;
        v116->__r_.__value_.__r.__words[2] = 0;
        v116->__r_.__value_.__r.__words[0] = 0;
        MEMORY[0x1A1AD3160](v72, &buf);
        __cxa_throw(v72, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
      }
    }
    memmove(v74, v112, v73);
    goto LABEL_173;
  }
  v33 = (v29 - v32) >> 4;
  if (v33 >= v26)
    v33 = v26;
  if (v33 && !v30)
    goto LABEL_75;
  *(_QWORD *)(v6 + 40) = v30 + v32;
  *(_QWORD *)(v6 + 48) = v33;
LABEL_51:
  v34 = v32 + 16 * v33;
  if (v29 <= v34)
  {
    sub_19C2B4F08((uint64_t)&v123);
    sub_19C2A1B24(&v123.__r_.__value_.__r.__words[2], (uint64_t)"(file_size=", 11);
    v65 = (_QWORD *)std::ostream::operator<<();
    sub_19C2A1B24(v65, (uint64_t)", offset=", 9);
    v66 = (_QWORD *)std::ostream::operator<<();
    sub_19C2A1B24(v66, (uint64_t)")", 1);
    v67 = __cxa_allocate_exception(0x10uLL);
    if ((v129 & 0x10) != 0)
    {
      v92 = v128;
      if (v128 < v127)
      {
        v128 = v127;
        v92 = v127;
      }
      v93 = (const void **)&v126;
    }
    else
    {
      if ((v129 & 8) == 0)
      {
        v68 = 0;
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 0;
        v69 = &__dst;
        goto LABEL_156;
      }
      v93 = (const void **)v124;
      v92 = v125;
    }
    v103 = *v93;
    v68 = v92 - (_QWORD)*v93;
    if (v68 > 0x7FFFFFFFFFFFFFF7)
      sub_19C2A1A54();
    if (v68 >= 0x17)
    {
      v108 = (v68 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v68 | 7) != 0x17)
        v108 = v68 | 7;
      v109 = v108 + 1;
      v69 = (std::string *)operator new(v108 + 1);
      __dst.__r_.__value_.__l.__size_ = v68;
      __dst.__r_.__value_.__r.__words[2] = v109 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v69;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v92 - *(_BYTE *)v93;
      v69 = &__dst;
      if (!v68)
      {
LABEL_156:
        v69->__r_.__value_.__s.__data_[v68] = 0;
        v110 = std::string::insert(&__dst, 0, "attempted to read beyond the end of the mapped file ", 0x34uLL);
        v111 = *(_OWORD *)&v110->__r_.__value_.__l.__data_;
        buf.__r_.__value_.__r.__words[2] = v110->__r_.__value_.__r.__words[2];
        *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v111;
        v110->__r_.__value_.__l.__size_ = 0;
        v110->__r_.__value_.__r.__words[2] = 0;
        v110->__r_.__value_.__r.__words[0] = 0;
        MEMORY[0x1A1AD3160](v67, &buf);
        __cxa_throw(v67, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
      }
    }
    memmove(v69, v103, v68);
    goto LABEL_156;
  }
  if ((v29 - v34) >> 3 < v27)
    v27 = (v29 - v34) >> 3;
  if (v27 && !v30)
    goto LABEL_75;
  *(_QWORD *)(v6 + 56) = v30 + v34;
  *(_QWORD *)(v6 + 64) = v27;
  if ((_DWORD)v26)
  {
    v35 = v34 + 8 * v27;
    v16 = v29 > v35;
    v36 = v29 - v35;
    if (!v16)
    {
      sub_19C2B4F08((uint64_t)&v123);
      sub_19C2A1B24(&v123.__r_.__value_.__r.__words[2], (uint64_t)"(file_size=", 11);
      v75 = (_QWORD *)std::ostream::operator<<();
      sub_19C2A1B24(v75, (uint64_t)", offset=", 9);
      v76 = (_QWORD *)std::ostream::operator<<();
      sub_19C2A1B24(v76, (uint64_t)")", 1);
      v77 = __cxa_allocate_exception(0x10uLL);
      if ((v129 & 0x10) != 0)
      {
        v100 = v128;
        if (v128 < v127)
        {
          v128 = v127;
          v100 = v127;
        }
        v101 = (const void **)&v126;
      }
      else
      {
        if ((v129 & 8) == 0)
        {
          v78 = 0;
          *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 0;
          v79 = &__dst;
          goto LABEL_178;
        }
        v101 = (const void **)v124;
        v100 = v125;
      }
      v113 = *v101;
      v78 = v100 - (_QWORD)*v101;
      if (v78 > 0x7FFFFFFFFFFFFFF7)
        sub_19C2A1A54();
      if (v78 >= 0x17)
      {
        v118 = (v78 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v78 | 7) != 0x17)
          v118 = v78 | 7;
        v119 = v118 + 1;
        v79 = (std::string *)operator new(v118 + 1);
        __dst.__r_.__value_.__l.__size_ = v78;
        __dst.__r_.__value_.__r.__words[2] = v119 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v79;
      }
      else
      {
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v100 - *(_BYTE *)v101;
        v79 = &__dst;
        if (!v78)
        {
LABEL_178:
          v79->__r_.__value_.__s.__data_[v78] = 0;
          v120 = std::string::insert(&__dst, 0, "attempted to read beyond the end of the mapped file ", 0x34uLL);
          v121 = *(_OWORD *)&v120->__r_.__value_.__l.__data_;
          buf.__r_.__value_.__r.__words[2] = v120->__r_.__value_.__r.__words[2];
          *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v121;
          v120->__r_.__value_.__l.__size_ = 0;
          v120->__r_.__value_.__r.__words[2] = 0;
          v120->__r_.__value_.__r.__words[0] = 0;
          MEMORY[0x1A1AD3160](v77, &buf);
          __cxa_throw(v77, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
        }
      }
      memmove(v79, v113, v78);
      goto LABEL_178;
    }
    v37 = v36 >> 4;
    if (v37 < v26)
      v26 = v37;
    if (v26)
      v38 = v30 == 0;
    else
      v38 = 0;
    if (v38)
      goto LABEL_75;
    *(_QWORD *)(v6 + 72) = v30 + v35;
    *(_QWORD *)(v6 + 80) = v26;
  }
  if (qword_1EDB97228 != -1)
    dispatch_once(&qword_1EDB97228, &unk_1E3D3ABD0);
  v19 = qword_1EDB97220;
  if (os_log_type_enabled((os_log_t)qword_1EDB97220, OS_LOG_TYPE_INFO))
  {
    if (*(char *)(a2 + 23) >= 0)
      v39 = a2;
    else
      v39 = *(_QWORD *)a2;
    LODWORD(v123.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)v123.__r_.__value_.__r.__words + 4) = (std::string::size_type)"MontrealMultiTokenIDMapper";
    WORD2(v123.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&v123.__r_.__value_.__r.__words[1] + 6) = v39;
    goto LABEL_73;
  }
LABEL_74:
  *a1 = v6;
}

void sub_19C3969BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, const void *a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, _QWORD *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  uint64_t v39;
  std::__shared_weak_count *v40;
  std::exception *v41;
  void **v42;
  void *v43;
  uint64_t v45;
  std::__shared_weak_count_vtbl *shared_weak_owners;
  std::__shared_weak_count_vtbl *v47;
  std::__shared_weak_count_vtbl *v48;
  void *v49;
  void *v50;

  std::exception::~exception(v41);
  operator delete(v43);
  __cxa_free_exception(v41);
  a20 = (_QWORD *)*MEMORY[0x1E0DE4F50];
  v45 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD **)((char *)&a20 + *(a20 - 3)) = *(_QWORD **)(MEMORY[0x1E0DE4F50] + 64);
  a22 = v45;
  a23 = MEMORY[0x1E0DE4FB8] + 16;
  if (a36 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1A1AD34CC](&a39);
  shared_weak_owners = (std::__shared_weak_count_vtbl *)v40[8].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    v40[9].__vftable = shared_weak_owners;
    operator delete(shared_weak_owners);
    v47 = (std::__shared_weak_count_vtbl *)v40[7].__shared_weak_owners_;
    if (!v47)
    {
LABEL_5:
      v48 = (std::__shared_weak_count_vtbl *)v40[6].__shared_weak_owners_;
      if (!v48)
        goto LABEL_6;
      goto LABEL_10;
    }
  }
  else
  {
    v47 = (std::__shared_weak_count_vtbl *)v40[7].__shared_weak_owners_;
    if (!v47)
      goto LABEL_5;
  }
  v40[8].__vftable = v47;
  operator delete(v47);
  v48 = (std::__shared_weak_count_vtbl *)v40[6].__shared_weak_owners_;
  if (!v48)
  {
LABEL_6:
    v49 = *v42;
    if (!*v42)
    {
LABEL_12:
      v40[1].__shared_weak_owners_ = 0;
      std::__shared_weak_count::~__shared_weak_count(v40);
      operator delete(v50);
      if (a13)
        CFRelease(a13);
      MEMORY[0x1A1AD355C](v39, 0xB1C404273B650);
      _Unwind_Resume(a1);
    }
LABEL_11:
    munmap(v49, v40[1].__shared_weak_owners_);
    goto LABEL_12;
  }
LABEL_10:
  v40[7].__vftable = v48;
  operator delete(v48);
  v49 = *v42;
  if (!*v42)
    goto LABEL_12;
  goto LABEL_11;
}

__n128 sub_19C39717C(std::string *a1, std::string *a2, char *__s)
{
  std::string::size_type v6;
  __n128 *v7;
  __n128 result;

  v6 = strlen(__s);
  v7 = (__n128 *)std::string::append(a2, __s, v6);
  result = *v7;
  *a1 = *(std::string *)v7->n128_u8;
  v7->n128_u64[0] = 0;
  v7->n128_u64[1] = 0;
  v7[1].n128_u64[0] = 0;
  return result;
}

uint64_t sub_19C3971D8()
{
  void *v0;
  uint64_t result;
  void *v2;
  __int128 v3;
  uint64_t v4;
  void *v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  qword_1EDB96FA0 = 850045863;
  unk_1EDB96FA8 = 0u;
  unk_1EDB96FB8 = 0u;
  unk_1EDB96FC8 = 0u;
  qword_1EDB96FD8 = 0;
  if (qword_1EDB96EF8 || (v3 = xmmword_1E3D3AD08, v4 = 0, (qword_1EDB96EF8 = _sl_dlopen()) != 0))
  {
    *(_QWORD *)&v3 = 0;
    *((_QWORD *)&v3 + 1) = &v3;
    v4 = 0x2000000000;
    v0 = off_1EDB96EF0;
    v5 = off_1EDB96EF0;
    if (off_1EDB96EF0)
      goto LABEL_9;
    if (qword_1EDB96EF8)
    {
      v0 = (void *)qword_1EDB96EF8;
    }
    else
    {
      v6 = xmmword_1E3D3AD08;
      v7 = 0;
      qword_1EDB96EF8 = _sl_dlopen();
      v0 = (void *)qword_1EDB96EF8;
      if (!qword_1EDB96EF8)
      {
        v2 = (void *)abort_report_np();
        goto LABEL_14;
      }
    }
    while (1)
    {
      v0 = dlsym(v0, "DDScannerCreate");
      *(_QWORD *)(*((_QWORD *)&v3 + 1) + 24) = v0;
      off_1EDB96EF0 = v0;
LABEL_9:
      _Block_object_dispose(&v3, 8);
      if (v0)
        break;
      dlerror();
      v2 = (void *)abort_report_np();
LABEL_14:
      __break(1u);
      free(v2);
    }
    result = ((uint64_t (*)(uint64_t, _QWORD, _QWORD))v0)(1, 0, 0);
  }
  else
  {
    result = 0;
  }
  qword_1EDB96FE0 = result;
  return result;
}

void sub_19C397398(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  std::mutex::~mutex((std::mutex *)&qword_1EDB96FA0);
  _Unwind_Resume(a1);
}

_QWORD *sub_19C3973C4(_QWORD *result)
{
  result[3] = 0;
  result[4] = 0;
  result[2] = &off_1E3D337F8;
  return result;
}

_QWORD *sub_19C3973D8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_1E3D337F8;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void sub_19C39743C(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_1E3D337F8;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C3974B0()
{
  return 0;
}

uint64_t sub_19C3974B8()
{
  return 0;
}

uint64_t sub_19C3974C0()
{
  return 0;
}

uint64_t sub_19C3974C8()
{
  return 0;
}

uint64_t sub_19C3974D0()
{
  return 0;
}

uint64_t sub_19C3974D8(uint64_t result)
{
  *(_QWORD *)(result + 16) = &off_1E3D339E8;
  return result;
}

_QWORD *sub_19C3974E8(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E3D339E8;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_19C397528(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_1E3D339E8;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x1A1AD355CLL);
}

void sub_19C397578(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  *a1 = &off_1E3D33968;
  v1 = a1[1];
  if (v1)
  {
    v2 = sub_19C2966B4(v1);
    MEMORY[0x1A1AD355C](v2, 0x10F0C4069D522A4);
  }
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C3975D4(uint64_t result)
{
  *(_QWORD *)(result + 16) = &off_1E3D337B0;
  return result;
}

_QWORD *sub_19C3975E4(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E3D337B0;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_19C397624(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_1E3D337B0;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C397674(uint64_t result)
{
  *(_QWORD *)(result + 16) = &off_1E3D33920;
  return result;
}

_QWORD *sub_19C397684(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_1E3D33920;
  v2 = a1[1];
  if (v2)
  {
    v3 = sub_19C39772C(v2);
    MEMORY[0x1A1AD355C](v3, 0x1032C40D853B9C0);
  }
  return a1;
}

void sub_19C3976D0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  *a1 = &off_1E3D33920;
  v1 = a1[1];
  if (v1)
  {
    v2 = sub_19C39772C(v1);
    MEMORY[0x1A1AD355C](v2, 0x1032C40D853B9C0);
  }
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C39772C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 80);
    v4 = *(void **)(a1 + 72);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 9) < 0)
          operator delete(*(void **)(v3 - 32));
        v3 -= 32;
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 72);
    }
    *(_QWORD *)(a1 + 80) = v2;
    operator delete(v4);
  }
  v5 = *(_QWORD *)(a1 + 48);
  if (v5)
  {
    v6 = *(_QWORD *)(a1 + 56);
    v7 = *(void **)(a1 + 48);
    if (v6 != v5)
    {
      do
      {
        if (*(char *)(v6 - 1) < 0)
          operator delete(*(void **)(v6 - 24));
        v6 -= 24;
      }
      while (v6 != v5);
      v7 = *(void **)(a1 + 48);
    }
    *(_QWORD *)(a1 + 56) = v5;
    operator delete(v7);
  }
  if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      return a1;
LABEL_21:
    operator delete(*(void **)a1);
    return a1;
  }
  if (*(char *)(a1 + 23) < 0)
    goto LABEL_21;
  return a1;
}

uint64_t sub_19C397810(uint64_t result)
{
  *(_QWORD *)(result + 16) = &off_1E3D33A30;
  return result;
}

_QWORD *sub_19C397820(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E3D33A30;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_19C397860(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_1E3D33A30;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C3978B0(uint64_t a1)
{
  unsigned __int8 v2;
  uint64_t result;

  CFAllocatorGetDefault();
  v2 = atomic_load((unsigned __int8 *)&qword_1EDB97018);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_1EDB97018))
  {
    qword_1EE41AC88 = 0;
    unk_1EE41AC98 = 0u;
    unk_1EE41ACA8 = 0u;
    qword_1EDB97020 = _CFRuntimeRegisterClass();
    __cxa_guard_release(&qword_1EDB97018);
  }
  result = _CFRuntimeCreateInstance();
  *(_QWORD *)(result + 24) = a1;
  return result;
}

void sub_19C397960(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1EDB97018);
  _Unwind_Resume(a1);
}

uint64_t sub_19C397978(uint64_t a1)
{
  unsigned __int8 v2;
  uint64_t result;

  CFAllocatorGetDefault();
  v2 = atomic_load((unsigned __int8 *)&qword_1EDB97060);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_1EDB97060))
  {
    qword_1EE41AC28 = 0;
    unk_1EE41AC38 = 0u;
    unk_1EE41AC48 = 0u;
    qword_1EDB97070 = _CFRuntimeRegisterClass();
    __cxa_guard_release(&qword_1EDB97060);
  }
  result = _CFRuntimeCreateInstance();
  *(_QWORD *)(result + 24) = a1;
  return result;
}

void sub_19C397A28(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1EDB97060);
  _Unwind_Resume(a1);
}

void sub_19C397A44(uint64_t a1)
{
  sub_19C39D15C(a1);
  JUMPOUT(0x1A1AD355CLL);
}

void sub_19C397A68(uint64_t a1, int a2, const __CFString *a3, const __CFString *a4, const __CFString *a5, CFStringRef theString, double a7)
{
  uint64_t Length;
  uint64_t v15;
  const __CFString *CanonicalLocaleIdentifierFromString;
  const __CFString *v17;
  unint64_t v18;
  unsigned __int8 v19;
  uint64_t **v20;
  uint64_t **v21;
  uint64_t v22;
  void *__p[2];
  char v24;
  void *v25[2];
  unsigned __int8 v26;
  const __CFString *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t **(*v30)(uint64_t);
  void *v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  double v35;
  __int128 v36;
  uint64_t v37;
  CFRange v38;

  if (theString)
  {
    Length = CFStringGetLength(theString);
    sub_19C29CEF8(a3, &v36);
    v15 = HIBYTE(v37);
    if (v37 < 0)
      v15 = *((_QWORD *)&v36 + 1);
    if (!v15 || !CEMStringContainsEmoji())
      goto LABEL_10;
    v28 = MEMORY[0x1E0C809B0];
    v29 = 1174405120;
    v30 = sub_19C39D0A8;
    v31 = &unk_1E3D3AD20;
    v32 = a1;
    if (SHIBYTE(v37) < 0)
    {
      sub_19C2B5238(&v33, (void *)v36, *((unint64_t *)&v36 + 1));
    }
    else
    {
      v33 = v36;
      v34 = v37;
    }
    v35 = a7;
    CEMEnumerateEmojiTokensInStringWithBlock();
    if (SHIBYTE(v34) < 0)
    {
      operator delete((void *)v33);
      if (Length < 25)
      {
LABEL_30:
        if (SHIBYTE(v37) < 0)
          operator delete((void *)v36);
        return;
      }
    }
    else
    {
LABEL_10:
      if (Length < 25)
        goto LABEL_30;
    }
    v27 = 0;
    if (a4)
    {
      CanonicalLocaleIdentifierFromString = CFLocaleCreateCanonicalLocaleIdentifierFromString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a4);
    }
    else
    {
      v38.location = 0;
      v38.length = Length;
      CanonicalLocaleIdentifierFromString = CFStringTokenizerCopyBestStringLanguage(theString, v38);
    }
    v17 = CanonicalLocaleIdentifierFromString;
    v27 = CanonicalLocaleIdentifierFromString;
    sub_19C29CEF8(CanonicalLocaleIdentifierFromString, v25);
    v18 = v26;
    v19 = v26;
    if ((v26 & 0x80u) != 0)
      v18 = (unint64_t)v25[1];
    if (v18)
    {
      sub_19C29CEF8(a5, __p);
      v20 = sub_19C314058((uint64_t **)(a1 + 152), (const void **)__p, (uint64_t)__p);
      v21 = sub_19C3141E4(v20 + 7, (const void **)v25, (uint64_t)v25);
      *((_DWORD *)v21 + 14) += Length;
      if (a2 == 1)
      {
        *(_BYTE *)(a1 + 264) = 1;
        v22 = HIBYTE(v37);
        if (v37 < 0)
          v22 = *((_QWORD *)&v36 + 1);
        if (v22)
          *((double *)sub_19C2EAA88((uint64_t **)(a1 + 200), (const void **)&v36, (uint64_t)&v36) + 7) = a7;
      }
      *(_BYTE *)(a1 + 248) = 1;
      if (v24 < 0)
        operator delete(__p[0]);
      v19 = v26;
    }
    if ((v19 & 0x80) != 0)
    {
      operator delete(v25[0]);
      if (!v17)
        goto LABEL_30;
    }
    else if (!v17)
    {
      goto LABEL_30;
    }
    CFRelease(v17);
    goto LABEL_30;
  }
}

void sub_19C397CB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,const void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  if (a21 < 0)
    operator delete(__p);
  sub_19C2FE810(&a22);
  if (*(char *)(v33 - 81) < 0)
  {
    operator delete(*(void **)(v33 - 104));
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

BOOL sub_19C397D50(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  _BOOL8 v7;
  __n128 v8;
  uint64_t v9;
  __int128 *v10;
  __int128 v11;
  _OWORD *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  __n128 *v20;
  uint64_t v21;
  char *v22;
  void **v23;
  char *v24;
  char *v25;
  __n128 *v26;
  __n128 *v27;
  uint64_t v28;
  unint64_t v29;
  int64_t v30;
  unint64_t v31;
  char *v32;
  __n128 *v33;
  __n128 *v34;
  char *v35;
  char *v36;
  __n128 *v37;
  void **v38;
  void **v39;
  void *v40;
  const void **v41;
  const void **v42;
  unint64_t v43;
  uint64_t v44;
  int v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  int v50;
  char *v51;
  uint64_t v52;
  size_t v53;
  void **p_dst;
  unint64_t v55;
  const void **v56;
  const void *v57;
  uint64_t v58;
  uint64_t v59;
  std::string *v60;
  __int128 v61;
  std::string *v62;
  const char *v63;
  const __CFString *v64;
  CFLocaleRef v65;
  uint64_t v66;
  const void *v67;
  const __CFString *PathComponent;
  CFIndex v69;
  std::string::size_type size;
  std::string *v71;
  uint64_t v72;
  const __CFURL *ValueAtIndex;
  int v74;
  void *v75;
  std::string::size_type v76;
  std::string *p_p;
  size_t v78;
  _BOOL4 v79;
  _BOOL4 v80;
  const __CFString *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  std::string::size_type v88;
  uint64_t *v89;
  std::string *v90;
  std::string::size_type v91;
  uint64_t **v92;
  int v93;
  uint64_t *v94;
  std::string::size_type v95;
  size_t v96;
  int v97;
  uint64_t *v98;
  uint64_t *v99;
  uint64_t *v100;
  int v101;
  uint64_t *v102;
  size_t v103;
  size_t v104;
  int v105;
  int *v106;
  std::string::size_type v107;
  std::string *v108;
  unint64_t v109;
  const void **v110;
  const void *v111;
  uint64_t v112;
  uint64_t v113;
  std::string *v114;
  uint64_t v115;
  _QWORD *v116;
  std::string *v117;
  FILE *v118;
  void **v119;
  uint64_t v120;
  uint64_t i;
  uint64_t v122;
  uint64_t j;
  void **v124;
  void **v125;
  uint64_t v126;
  uint64_t k;
  _QWORD *v128;
  _QWORD *v129;
  uint64_t v130;
  uint64_t m;
  FILE *v132;
  void **v133;
  size_t v134;
  size_t v135;
  void **v136;
  uint64_t v137;
  uint64_t v138;
  size_t v139;
  void **v140;
  _BYTE *v141;
  unint64_t v142;
  size_t v143;
  int v144;
  uint64_t v145;
  void *v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  void **v150;
  void **v151;
  size_t v152;
  size_t v153;
  void *v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  void **v158;
  void **v159;
  size_t v160;
  void *v161;
  uint64_t v162;
  uint64_t v163;
  void **v164;
  uint64_t *v165;
  unsigned int v166;
  uint64_t v167;
  unint64_t v168;
  __int128 v169;
  char *v170;
  uint64_t *v171;
  unint64_t v172;
  unint64_t v173;
  unint64_t v174;
  uint8x8_t v175;
  unint64_t v176;
  uint64_t **v177;
  uint64_t *v178;
  unint64_t v179;
  uint64_t v180;
  char *v181;
  char *v182;
  uint64_t v183;
  unint64_t v184;
  _DWORD *v185;
  unint64_t v186;
  uint64_t v187;
  _BYTE *v188;
  _DWORD *v189;
  unint64_t v190;
  uint64_t v191;
  _OWORD *v192;
  char *v193;
  uint64_t v194;
  __int128 v195;
  int v196;
  uint8x8_t v197;
  void **v198;
  _QWORD *v199;
  unint64_t v200;
  uint64_t v201;
  float v202;
  float v203;
  _BOOL8 v204;
  unint64_t v205;
  unint64_t v206;
  size_t prime;
  void *v208;
  void *v209;
  uint64_t v210;
  _QWORD *v211;
  size_t v212;
  size_t v213;
  size_t v214;
  _QWORD *n;
  size_t v216;
  uint64_t v217;
  uint64_t v218;
  unint64_t v219;
  uint8x8_t v220;
  uint64_t v221;
  _QWORD *v222;
  uint64_t v223;
  size_t v224;
  uint64_t v225;
  uint64_t v226;
  _QWORD *v227;
  unint64_t v228;
  double v229;
  unint64_t v230;
  double *v231;
  double *v232;
  double *v233;
  uint64_t v234;
  uint64_t v235;
  unint64_t v236;
  uint64_t v237;
  unint64_t v238;
  _BYTE *v239;
  double *v240;
  unint64_t v241;
  uint64_t v242;
  _OWORD *v243;
  double *v244;
  uint64_t v245;
  __int128 v246;
  uint64_t v247;
  void *v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  void *v252;
  void *v253;
  uint64_t **v254;
  unsigned int v255;
  int v256;
  char *v257;
  char *v258;
  char *v259;
  uint64_t v260;
  int v261;
  void *v262;
  int8x8_t v263;
  unint64_t v264;
  uint8x8_t v265;
  unint64_t v266;
  uint64_t **v267;
  uint64_t *v268;
  uint64_t v269;
  unint64_t v270;
  uint64_t v271;
  int v272;
  uint64_t v273;
  unint64_t v274;
  unint64_t v275;
  unint64_t v276;
  _BYTE *v277;
  _DWORD *v278;
  unint64_t v279;
  char *v280;
  int v281;
  char *v282;
  uint64_t v283;
  _OWORD *v284;
  char *v285;
  uint64_t v286;
  __int128 v287;
  unint64_t v288;
  _QWORD *v289;
  void *v290;
  int64_t v291;
  char *v292;
  char *v293;
  _QWORD *v294;
  unint64_t v295;
  unint64_t v296;
  unint64_t v297;
  unint64_t v298;
  unsigned int v299;
  void **v300;
  void **v301;
  char **v302;
  const void *v303;
  int64_t v304;
  char *v305;
  char *v306;
  _QWORD *v307;
  void **v308;
  __int128 v309;
  _QWORD *v310;
  _QWORD *v311;
  _QWORD *v312;
  void *v313;
  void *v314;
  uint64_t *v315;
  uint64_t **v316;
  std::string *v317;
  std::string::size_type v318;
  _QWORD *v319;
  _QWORD *v320;
  _QWORD *v321;
  int v322;
  _QWORD *v323;
  std::string::size_type v324;
  size_t v325;
  int v326;
  int v327;
  uint64_t **v328;
  _QWORD *v329;
  _BYTE *v330;
  _QWORD *v331;
  std::string *v332;
  std::string::size_type v333;
  _QWORD *v334;
  _QWORD *v335;
  const std::locale::facet *v336;
  _QWORD *v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  std::string *v344;
  uint64_t v345;
  uint64_t *v346;
  CFTypeRef v347;
  __n128 *v348;
  __int128 v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t *v354;
  __int128 *v355;
  __int128 v356;
  std::string::size_type v357;
  uint64_t **v358;
  uint64_t *v359;
  uint64_t *v360;
  double v361;
  double v362;
  std::string *v363;
  std::string *v364;
  BOOL v365;
  uint64_t v366;
  uint64_t v367;
  _QWORD *v368;
  char *v369;
  char *v370;
  void *v371;
  __int128 *v372;
  __int128 v373;
  void **v374;
  void **v375;
  void *v376;
  void **v377;
  void **v378;
  void *v379;
  int v381;
  const char *v382;
  int v383;
  const char *v384;
  _QWORD *v385;
  void **v386;
  _QWORD *v387;
  uint64_t **v388;
  _QWORD *v389;
  char *v390;
  _QWORD *v392;
  unsigned int v393;
  CFLocaleRef cf;
  FILE *cfa;
  uint64_t v396;
  uint64_t v397;
  void *v398;
  char *v399;
  unint64_t v400;
  void *v401[9];
  std::string v402;
  CFTypeRef v403;
  std::string v404;
  void *v405[2];
  __n128 *v406;
  char *v407;
  void **v408;
  _BYTE v409[16];
  unint64_t v410;
  uint64_t v411;
  unint64_t v412;
  void *v413;
  char v414;
  unint64_t v415;
  int v416;
  uint64_t v417;
  void *v418[2];
  int64_t v419;
  float v420;
  void *v421[2];
  unint64_t v422;
  void **v423;
  void *__src[2];
  unint64_t v425;
  void **__dst;
  void **v427;
  __int128 v428;
  uint64_t v429;
  std::string __p;
  void *v431;
  void **v432;
  uint64_t v433;
  char *v434;
  char *v435;
  char *v436;
  uint64_t v437;

  v6 = a2;
  v437 = *MEMORY[0x1E0C80C00];
  if (!a2 && a3)
    return 0;
  if (!a2)
  {
    v405[1] = 0;
    v406 = 0;
    v405[0] = &v405[1];
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
    __p.__r_.__value_.__s.__data_[0] = 0;
    sub_19C3148A0(a1 + 56, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)v405);
    sub_19C2EAC08((char *)v405[1]);
  }
  LOBYTE(v401[0]) = 0;
  v8 = 0uLL;
  memset((char *)&v401[2] + 7, 0, 49);
  v398 = 0;
  v399 = 0;
  v400 = 0;
  v385 = a4;
  v396 = v6;
  v397 = a3;
  if (a3 < 1)
  {
    v42 = 0;
    v41 = 0;
  }
  else
  {
    v9 = 0;
    do
    {
      v10 = *(__int128 **)(*(_QWORD *)(v6 + 8 * v9) + 24);
      if (*((char *)v10 + 23) < 0)
      {
        sub_19C2B5238(&__p, *(void **)v10, *((_QWORD *)v10 + 1));
      }
      else
      {
        v11 = *v10;
        __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v10 + 2);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v11;
      }
      v12 = v399;
      if ((unint64_t)v399 >= v400)
      {
        v399 = sub_19C307C78(&v398, (uint64_t)&__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      else
      {
        v13 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        *((_QWORD *)v399 + 2) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
        *v12 = v13;
        v399 = (char *)v12 + 24;
      }
      v14 = *(_QWORD *)(*(_QWORD *)(v6 + 8 * v9) + 24);
      if (*(char *)(v14 + 47) < 0)
        sub_19C2B5238(&__p, *(void **)(v14 + 24), *(_QWORD *)(v14 + 32));
      else
        __p = *(std::string *)(v14 + 24);
      v431 = 0;
      v432 = 0;
      v433 = 0;
      sub_19C2B5440((char *)&v431, *(__int128 **)(v14 + 48), *(__int128 **)(v14 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v14 + 56) - *(_QWORD *)(v14 + 48)) >> 3));
      v434 = 0;
      v435 = 0;
      v436 = 0;
      v15 = *(_QWORD *)(v14 + 72);
      v16 = *(_QWORD *)(v14 + 80);
      v405[0] = &v434;
      LOBYTE(v405[1]) = 0;
      v17 = v16 - v15;
      if (v16 == v15)
      {
        v22 = 0;
      }
      else
      {
        if (v17 < 0)
          sub_19C2A18E8();
        v18 = (char *)operator new(v16 - v15);
        v19 = 0;
        v434 = v18;
        v435 = v18;
        v436 = &v18[32 * (v17 >> 5)];
        do
        {
          v20 = (__n128 *)&v18[v19];
          v21 = v15 + v19;
          if (*(char *)(v15 + v19 + 23) < 0)
          {
            sub_19C2B5238(&v18[v19], *(void **)v21, *(_QWORD *)(v21 + 8));
          }
          else
          {
            v8 = *(__n128 *)v21;
            v20[1].n128_u64[0] = *(_QWORD *)(v21 + 16);
            *v20 = v8;
          }
          v8.n128_u64[0] = *(_QWORD *)(v15 + v19 + 24);
          *(_QWORD *)&v18[v19 + 24] = v8.n128_u64[0];
          v19 += 32;
        }
        while (v15 + v19 != v16);
        v22 = &v18[v19];
        v435 = v22;
      }
      v23 = (void **)v431;
      if (v431 != v432)
      {
        v24 = (char *)v401[4];
        do
        {
          if (v24 < v401[5])
          {
            if (*((char *)v23 + 23) < 0)
            {
              sub_19C2B5238(v24, *v23, (unint64_t)v23[1]);
            }
            else
            {
              v8 = *(__n128 *)v23;
              *((_QWORD *)v24 + 2) = v23[2];
              *(__n128 *)v24 = v8;
            }
            v24 += 24;
          }
          else
          {
            v24 = sub_19C318C78((char **)&v401[3], (uint64_t)v23);
          }
          v401[4] = v24;
          v23 += 3;
        }
        while (v23 != v432);
        v22 = v435;
      }
      v25 = v22;
      if (v434 != v22)
      {
        v26 = (__n128 *)v401[7];
        v22 = v434;
        do
        {
          if (v26 < v401[8])
          {
            if (v22[23] < 0)
            {
              sub_19C2B5238(v26, *(void **)v22, *((_QWORD *)v22 + 1));
            }
            else
            {
              v8 = *(__n128 *)v22;
              v26[1].n128_u64[0] = *((_QWORD *)v22 + 2);
              *v26 = v8;
            }
            v8.n128_u64[0] = *((_QWORD *)v22 + 3);
            v26[1].n128_u64[1] = v8.n128_u64[0];
            v26 += 2;
          }
          else
          {
            v27 = (__n128 *)v401[6];
            v28 = ((char *)v26 - (char *)v401[6]) >> 5;
            v29 = v28 + 1;
            if ((unint64_t)(v28 + 1) >> 59)
              sub_19C2A18E8();
            v30 = (char *)v401[8] - (char *)v401[6];
            if (((char *)v401[8] - (char *)v401[6]) >> 4 > v29)
              v29 = v30 >> 4;
            if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFE0)
              v31 = 0x7FFFFFFFFFFFFFFLL;
            else
              v31 = v29;
            v408 = &v401[8];
            if (v31)
            {
              if (v31 >> 59)
                sub_19C2A143C();
              v32 = (char *)operator new(32 * v31);
            }
            else
            {
              v32 = 0;
            }
            v33 = (__n128 *)&v32[32 * v28];
            v405[0] = v32;
            v405[1] = v33;
            v406 = v33;
            v407 = &v32[32 * v31];
            if (v22[23] < 0)
            {
              sub_19C2B5238(v33, *(void **)v22, *((_QWORD *)v22 + 1));
              v27 = (__n128 *)v401[6];
              v26 = (__n128 *)v401[7];
              v33 = (__n128 *)v405[1];
              v34 = v406;
            }
            else
            {
              v8 = *(__n128 *)v22;
              v33[1].n128_u64[0] = *((_QWORD *)v22 + 2);
              *v33 = v8;
              v34 = (__n128 *)&v32[32 * v28];
            }
            v8.n128_u64[0] = *((_QWORD *)v22 + 3);
            *(_QWORD *)&v32[32 * v28 + 24] = v8.n128_u64[0];
            if (v26 == v27)
            {
              v35 = (char *)v27;
            }
            else
            {
              do
              {
                v8 = v26[-2];
                v33[-1].n128_u64[0] = v26[-1].n128_u64[0];
                v33[-2] = v8;
                v26[-2].n128_u64[1] = 0;
                v26[-1].n128_u64[0] = 0;
                v26[-2].n128_u64[0] = 0;
                v8.n128_u64[0] = v26[-1].n128_u64[1];
                v33[-1].n128_u64[1] = v8.n128_u64[0];
                v33 -= 2;
                v26 -= 2;
              }
              while (v26 != v27);
              v35 = (char *)v401[6];
              v27 = (__n128 *)v401[7];
            }
            v26 = v34 + 2;
            v401[6] = v33;
            v401[7] = &v34[2];
            v36 = (char *)v401[8];
            v401[8] = v407;
            v407 = v36;
            v405[0] = v35;
            v405[1] = v35;
            if (v27 != (__n128 *)v35)
            {
              v37 = v27 - 2;
              do
              {
                v406 = v37;
                if (v37[1].n128_i8[7] < 0)
                  operator delete((void *)v37->n128_u64[0]);
                v37 -= 2;
              }
              while (&v37[2] != (__n128 *)v35);
              v27 = (__n128 *)v35;
            }
            if (v27)
              operator delete(v27);
          }
          v401[7] = v26;
          v22 += 32;
        }
        while (v22 != v435);
        v25 = v434;
      }
      if (v25)
      {
        if (v22 != v25)
        {
          do
          {
            if (*(v22 - 9) < 0)
              operator delete(*((void **)v22 - 4));
            v22 -= 32;
          }
          while (v22 != v25);
          v22 = v434;
        }
        v435 = v25;
        operator delete(v22);
      }
      v38 = (void **)v431;
      if (v431)
      {
        v39 = v432;
        v40 = v431;
        if (v432 != v431)
        {
          do
          {
            if (*((char *)v39 - 1) < 0)
              operator delete(*(v39 - 3));
            v39 -= 3;
          }
          while (v39 != v38);
          v40 = v431;
        }
        v432 = v38;
        operator delete(v40);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      ++v9;
      v6 = v396;
    }
    while (v9 != a3);
    v41 = (const void **)v398;
    v42 = (const void **)v399;
  }
  v43 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (v42 - v41));
  if (v42 == v41)
    v44 = 0;
  else
    v44 = v43;
  sub_19C39B41C((uint64_t)v41, v42, v44, 1, v8);
  sub_19C2B4F08((uint64_t)v405);
  if (v399 != v398)
  {
    v45 = *((char *)v398 + 23);
    v46 = v45 >= 0 ? v398 : *(void **)v398;
    v47 = v45 >= 0 ? *((unsigned __int8 *)v398 + 23) : *((_QWORD *)v398 + 1);
    sub_19C2A1B24(&v406, (uint64_t)v46, v47);
    if (0xAAAAAAAAAAAAAAABLL * ((v399 - (_BYTE *)v398) >> 3) >= 2)
    {
      v48 = 0;
      v49 = 1;
      do
      {
        sub_19C2A1B24(&v406, (uint64_t)"-", 1);
        v50 = *((char *)v398 + v48 + 47);
        if (v50 >= 0)
          v51 = (char *)v398 + v48 + 24;
        else
          v51 = *(char **)((char *)v398 + v48 + 24);
        if (v50 >= 0)
          v52 = *((unsigned __int8 *)v398 + v48 + 47);
        else
          v52 = *(_QWORD *)((char *)v398 + v48 + 32);
        sub_19C2A1B24(&v406, (uint64_t)v51, v52);
        ++v49;
        v48 += 24;
      }
      while (0xAAAAAAAAAAAAAAABLL * ((v399 - (_BYTE *)v398) >> 3) > v49);
    }
  }
  if ((v416 & 0x10) != 0)
  {
    v55 = v415;
    if (v415 < v412)
    {
      v415 = v412;
      v55 = v412;
    }
    v56 = (const void **)&v411;
  }
  else
  {
    if ((v416 & 8) == 0)
    {
      v53 = 0;
      BYTE7(v428) = 0;
      p_dst = (void **)&__dst;
      goto LABEL_126;
    }
    v56 = (const void **)v409;
    v55 = v410;
  }
  v57 = *v56;
  v53 = v55 - (_QWORD)*v56;
  if (v53 > 0x7FFFFFFFFFFFFFF7)
    sub_19C2A1A54();
  if (v53 >= 0x17)
  {
    v58 = (v53 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v53 | 7) != 0x17)
      v58 = v53 | 7;
    v59 = v58 + 1;
    p_dst = (void **)operator new(v58 + 1);
    *(_QWORD *)&v428 = v59 | 0x8000000000000000;
    __dst = p_dst;
    v427 = (void **)v53;
    goto LABEL_125;
  }
  BYTE7(v428) = v55 - *(_BYTE *)v56;
  p_dst = (void **)&__dst;
  if (v53)
LABEL_125:
    memmove(p_dst, v57, v53);
LABEL_126:
  *((_BYTE *)p_dst + v53) = 0;
  v60 = std::string::insert((std::string *)&__dst, 0, "Multilingual-", 0xDuLL);
  v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v60->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v61;
  v60->__r_.__value_.__l.__size_ = 0;
  v60->__r_.__value_.__r.__words[2] = 0;
  v60->__r_.__value_.__r.__words[0] = 0;
  v62 = std::string::append(&__p, ".model", 6uLL);
  v404 = *v62;
  v62->__r_.__value_.__l.__size_ = 0;
  v62->__r_.__value_.__r.__words[2] = 0;
  v62->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SBYTE7(v428) & 0x80000000) == 0)
      goto LABEL_128;
LABEL_193:
    operator delete(__dst);
    goto LABEL_128;
  }
  if (SBYTE7(v428) < 0)
    goto LABEL_193;
LABEL_128:
  v63 = (const char *)v398;
  if (*((char *)v398 + 23) < 0)
    v63 = *(const char **)v398;
  v64 = CFStringCreateWithCString(0, v63, 0x8000100u);
  v65 = CFLocaleCreate(0, v64);
  v66 = *MEMORY[0x1E0D43878];
  __dst = 0;
  v427 = (void **)&__dst;
  v428 = 0x2000000000uLL;
  *((_QWORD *)&v428 + 1) = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  __p.__r_.__value_.__r.__words[0] = MEMORY[0x1E0C809B0];
  __p.__r_.__value_.__l.__size_ = 0x40000000;
  __p.__r_.__value_.__r.__words[2] = (std::string::size_type)sub_19C29CAF8;
  v431 = &unk_1E3D3A0E0;
  v433 = v66;
  v432 = (void **)&__dst;
  cf = v65;
  LDEnumerateAssetDataItems();
  v67 = v427[3];
  _Block_object_dispose(&__dst, 8);
  PathComponent = 0;
  v69 = 0;
  v403 = v67;
  memset(&v402, 0, sizeof(v402));
  if ((v404.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v404.__r_.__value_.__r.__words[2]);
  else
    size = v404.__r_.__value_.__l.__size_;
  if ((v404.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v71 = &v404;
  else
    v71 = (std::string *)v404.__r_.__value_.__r.__words[0];
  while (1)
  {
    v72 = a1;
    if (v69 >= CFArrayGetCount((CFArrayRef)v67))
      break;
    ValueAtIndex = (const __CFURL *)CFArrayGetValueAtIndex((CFArrayRef)v67, v69);
    PathComponent = CFURLCopyLastPathComponent(ValueAtIndex);
    sub_19C29CEF8(PathComponent, &__p);
    v74 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    v75 = (void *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v76 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v76 = __p.__r_.__value_.__l.__size_;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if (v76 >= size)
      v78 = size;
    else
      v78 = v76;
    v79 = memcmp(v71, p_p, v78) == 0;
    v80 = v76 == size && v79;
    if (v74 < 0)
      operator delete(v75);
    ++v69;
    if (v80)
    {
      v81 = CFURLCopyPath(ValueAtIndex);
      sub_19C29CEF8(v81, &__p);
      v402 = __p;
      v72 = a1;
      break;
    }
  }
  CFRelease(cf);
  CFRelease(PathComponent);
  v88 = HIBYTE(v402.__r_.__value_.__r.__words[2]);
  if ((v402.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v88 = v402.__r_.__value_.__l.__size_;
  if (!v88)
  {
    if (qword_1EDB97100 != -1)
      dispatch_once(&qword_1EDB97100, &unk_1E3D3BED0);
    v106 = (int *)qword_1EDB970F8;
    if ((v416 & 0x10) != 0)
    {
      v109 = v415;
      if (v415 < v412)
      {
        v415 = v412;
        v109 = v412;
      }
      v110 = (const void **)&v411;
    }
    else
    {
      if ((v416 & 8) == 0)
      {
        v107 = 0;
        *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
        v108 = &__p;
        goto LABEL_211;
      }
      v110 = (const void **)v409;
      v109 = v410;
    }
    v111 = *v110;
    v107 = v109 - (_QWORD)*v110;
    if (v107 > 0x7FFFFFFFFFFFFFF7)
      sub_19C2A1A54();
    if (v107 >= 0x17)
    {
      v112 = (v107 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v107 | 7) != 0x17)
        v112 = v107 | 7;
      v113 = v112 + 1;
      v108 = (std::string *)operator new(v112 + 1);
      __p.__r_.__value_.__r.__words[2] = v113 | 0x8000000000000000;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v108;
      __p.__r_.__value_.__l.__size_ = v107;
    }
    else
    {
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = v109 - *(_BYTE *)v110;
      v108 = &__p;
      if (!v107)
        goto LABEL_211;
    }
    memmove(v108, v111, v107);
LABEL_211:
    v108->__r_.__value_.__s.__data_[v107] = 0;
    v114 = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      LOBYTE(v114) = __p.__r_.__value_.__s.__data_[0];
    sub_19C3E8FF4(v106, v82, "Could not find Multilingual Classifier for language: %s", v83, v84, v85, v86, v87, (char)v114);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    goto LABEL_629;
  }
  v89 = *(uint64_t **)(v72 + 16);
  v388 = (uint64_t **)(v72 + 16);
  if (!v89)
    goto LABEL_216;
  if ((v404.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v90 = &v404;
  else
    v90 = (std::string *)v404.__r_.__value_.__r.__words[0];
  if ((v404.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v91 = HIBYTE(v404.__r_.__value_.__r.__words[2]);
  else
    v91 = v404.__r_.__value_.__l.__size_;
  v92 = (uint64_t **)(v72 + 16);
  do
  {
    while (1)
    {
      v93 = *((char *)v89 + 55);
      v94 = v93 >= 0 ? v89 + 4 : (uint64_t *)v89[4];
      v95 = v93 >= 0 ? *((unsigned __int8 *)v89 + 55) : v89[5];
      v96 = v91 >= v95 ? v95 : v91;
      v97 = memcmp(v94, v90, v96);
      if (v97)
        break;
      if (v95 >= v91)
        goto LABEL_178;
LABEL_164:
      v89 = (uint64_t *)v89[1];
      if (!v89)
        goto LABEL_179;
    }
    if (v97 < 0)
      goto LABEL_164;
LABEL_178:
    v92 = (uint64_t **)v89;
    v89 = (uint64_t *)*v89;
  }
  while (v89);
LABEL_179:
  if (v92 == v388)
    goto LABEL_216;
  v100 = v92[4];
  v99 = (uint64_t *)(v92 + 4);
  v98 = v100;
  v101 = *((char *)v99 + 23);
  if (v101 >= 0)
    v102 = v99;
  else
    v102 = v98;
  if (v101 >= 0)
    v103 = *((unsigned __int8 *)v99 + 23);
  else
    v103 = v99[1];
  if (v103 >= v91)
    v104 = v91;
  else
    v104 = v103;
  v105 = memcmp(v90, v102, v104);
  if (!v105)
  {
    if (v91 < v103)
      goto LABEL_216;
    goto LABEL_629;
  }
  if ((v105 & 0x80000000) == 0)
  {
LABEL_629:
    v115 = 0;
    if ((SHIBYTE(v402.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_635;
    goto LABEL_638;
  }
LABEL_216:
  v115 = operator new();
  *(_OWORD *)(v115 + 72) = 0u;
  *(_OWORD *)(v115 + 88) = 0u;
  *(_QWORD *)(v115 + 48) = 0;
  *(_QWORD *)(v115 + 56) = 0;
  *(_QWORD *)(v115 + 40) = 0;
  *(_DWORD *)(v115 + 64) = 0;
  *(_DWORD *)(v115 + 104) = 1065353216;
  *(_QWORD *)(v115 + 112) = 0;
  *(_OWORD *)(v115 + 144) = 0u;
  v116 = (_QWORD *)(v115 + 144);
  *(_OWORD *)(v115 + 160) = 0u;
  *(_QWORD *)(v115 + 120) = 0;
  *(_QWORD *)(v115 + 128) = 0;
  *(_DWORD *)(v115 + 136) = 0;
  *(_DWORD *)(v115 + 176) = 1065353216;
  *(_OWORD *)(v115 + 184) = 0u;
  v386 = (void **)(v115 + 184);
  *(_OWORD *)(v115 + 200) = 0u;
  *(_OWORD *)(v115 + 216) = 0u;
  *(_QWORD *)(v115 + 232) = 0;
  *(_DWORD *)(v115 + 240) = 1065353216;
  *(_QWORD *)(v115 + 256) = 0;
  *(_QWORD *)(v115 + 264) = 0;
  *(_QWORD *)(v115 + 248) = 0;
  *(_DWORD *)v115 = 0;
  *(_QWORD *)(v115 + 24) = 0;
  *(_QWORD *)(v115 + 32) = 0;
  *(_OWORD *)(v115 + 280) = 0u;
  *(_OWORD *)(v115 + 296) = 0u;
  *(_OWORD *)(v115 + 312) = 0u;
  *(_OWORD *)(v115 + 328) = 0u;
  *(_OWORD *)(v115 + 344) = 0u;
  *(_OWORD *)(v115 + 360) = 0u;
  *(_OWORD *)(v115 + 392) = 0u;
  *(_OWORD *)(v115 + 408) = 0u;
  if ((v402.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v117 = &v402;
  else
    v117 = (std::string *)v402.__r_.__value_.__r.__words[0];
  *(_QWORD *)(v115 + 424) = 0;
  v118 = fopen((const char *)v117, "r");
  if (!v118)
  {
    v331 = sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)"error: cannot open ", 19);
    if ((v402.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v332 = &v402;
    else
      v332 = (std::string *)v402.__r_.__value_.__r.__words[0];
    if ((v402.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v333 = HIBYTE(v402.__r_.__value_.__r.__words[2]);
    else
      v333 = v402.__r_.__value_.__l.__size_;
    v334 = sub_19C2A1B24(v331, (uint64_t)v332, v333);
    v335 = sub_19C2A1B24(v334, (uint64_t)"!", 1);
    std::ios_base::getloc((const std::ios_base *)((char *)v335 + *(_QWORD *)(*v335 - 24)));
    v336 = std::locale::use_facet((const std::locale *)&__p, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v336->__vftable[2].~facet_0)(v336, 10);
    std::locale::~locale((std::locale *)&__p);
    std::ostream::put();
    std::ostream::flush();
    v337 = sub_19C39C55C((_QWORD *)v115);
    MEMORY[0x1A1AD355C](v337, 0x10E0C40868D66FELL);
    if (qword_1EDB97100 != -1)
      dispatch_once(&qword_1EDB97100, &unk_1E3D3BED0);
    v344 = &v402;
    if ((v402.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      LOBYTE(v344) = v402.__r_.__value_.__s.__data_[0];
    sub_19C3E8FF4((int *)qword_1EDB970F8, v338, "Failed to load Multilingual Classifier from %s", v339, v340, v341, v342, v343, (char)v344);
    goto LABEL_629;
  }
  cfa = v118;
  *(_QWORD *)(v115 + 192) = *(_QWORD *)(v115 + 184);
  if (*(_QWORD *)(v115 + 96))
  {
    v119 = *(void ***)(v115 + 88);
    if (v119)
    {
      do
      {
        v124 = (void **)*v119;
        if (*((char *)v119 + 39) < 0)
          operator delete(v119[2]);
        operator delete(v119);
        v119 = v124;
      }
      while (v124);
    }
    *(_QWORD *)(v115 + 88) = 0;
    v120 = *(_QWORD *)(v115 + 80);
    if (v120)
    {
      for (i = 0; i != v120; ++i)
        *(_QWORD *)(*(_QWORD *)(v115 + 72) + 8 * i) = 0;
    }
    *(_QWORD *)(v115 + 96) = 0;
  }
  v392 = (_QWORD *)(v115 + 72);
  v122 = *(_QWORD *)(v115 + 112);
  for (j = *(_QWORD *)(v115 + 120); j != v122; j -= 24)
  {
    if (*(char *)(j - 1) < 0)
      operator delete(*(void **)(j - 24));
  }
  *(_QWORD *)(v115 + 120) = v122;
  if (*(_QWORD *)(v115 + 168))
  {
    v125 = *(void ***)(v115 + 160);
    if (v125)
    {
      do
      {
        v133 = (void **)*v125;
        if (*((char *)v125 + 39) < 0)
          operator delete(v125[2]);
        operator delete(v125);
        v125 = v133;
      }
      while (v133);
    }
    *(_QWORD *)(v115 + 160) = 0;
    v126 = *(_QWORD *)(v115 + 152);
    if (v126)
    {
      for (k = 0; k != v126; ++k)
        *(_QWORD *)(*v116 + 8 * k) = 0;
    }
    *(_QWORD *)(v115 + 168) = 0;
  }
  *(_DWORD *)(v115 + 136) = 0;
  if (*(_QWORD *)(v115 + 232))
  {
    v128 = *(_QWORD **)(v115 + 224);
    if (v128)
    {
      do
      {
        v129 = (_QWORD *)*v128;
        operator delete(v128);
        v128 = v129;
      }
      while (v129);
    }
    *(_QWORD *)(v115 + 224) = 0;
    v130 = *(_QWORD *)(v115 + 216);
    if (v130)
    {
      for (m = 0; m != v130; ++m)
        *(_QWORD *)(*(_QWORD *)(v115 + 208) + 8 * m) = 0;
    }
    *(_QWORD *)(v115 + 232) = 0;
  }
  v389 = (_QWORD *)(v115 + 224);
  *(_QWORD *)(v115 + 256) = *(_QWORD *)(v115 + 248);
  v132 = cfa;
  while (fgets((char *)&__p, 1024, v132))
  {
    v134 = strlen((const char *)&__p);
    if (v134 > 0x7FFFFFFFFFFFFFF7)
      sub_19C2A1A54();
    v135 = v134;
    if (v134 >= 0x17)
    {
      v137 = (v134 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v134 | 7) != 0x17)
        v137 = v134 | 7;
      v138 = v137 + 1;
      v136 = (void **)operator new(v137 + 1);
      *(_QWORD *)&v428 = v138 | 0x8000000000000000;
      __dst = v136;
      v427 = (void **)v135;
LABEL_260:
      memcpy(v136, &__p, v135);
      goto LABEL_261;
    }
    BYTE7(v428) = v134;
    v136 = (void **)&__dst;
    if (v134)
      goto LABEL_260;
LABEL_261:
    *((_BYTE *)v136 + v135) = 0;
    if ((SBYTE7(v428) & 0x80u) == 0)
      v139 = BYTE7(v428);
    else
      v139 = (size_t)v427;
    if ((SBYTE7(v428) & 0x80u) == 0)
      v140 = (void **)&__dst;
    else
      v140 = __dst;
    if (v139)
    {
      v141 = memchr(v140, 9, v139);
      if (v141)
        v142 = v141 - (_BYTE *)v140;
      else
        v142 = -1;
      v143 = v139;
      while (v143)
      {
        v144 = *((unsigned __int8 *)v140 + --v143);
        if (v144 == 9)
        {
          v145 = v143;
          goto LABEL_277;
        }
      }
    }
    else
    {
      v142 = -1;
    }
    v145 = -1;
LABEL_277:
    if (v139 >= v142)
      v139 = v142;
    if (v139 > 0x7FFFFFFFFFFFFFF7)
      sub_19C2A1A54();
    if (v139 >= 0x17)
    {
      v147 = (v139 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v139 | 7) != 0x17)
        v147 = v139 | 7;
      v148 = v147 + 1;
      v146 = operator new(v147 + 1);
      v425 = v148 | 0x8000000000000000;
      __src[0] = v146;
      __src[1] = (void *)v139;
LABEL_286:
      memmove(v146, v140, v139);
      goto LABEL_287;
    }
    HIBYTE(v425) = v139;
    v146 = __src;
    if (v139)
      goto LABEL_286;
LABEL_287:
    *((_BYTE *)v146 + v139) = 0;
    v149 = v142 + 1;
    if (SBYTE7(v428) < 0)
    {
      v150 = v427;
      if ((unint64_t)v427 < v149)
LABEL_717:
        sub_19C2E3454();
      v151 = __dst;
    }
    else
    {
      v150 = (void **)BYTE7(v428);
      if (v149 > BYTE7(v428))
        goto LABEL_717;
      v151 = (void **)&__dst;
    }
    v152 = (size_t)v150 - v149;
    if (v152 >= v145 - v149)
      v153 = v145 - v149;
    else
      v153 = v152;
    if (v153 > 0x7FFFFFFFFFFFFFF7)
      sub_19C2A1A54();
    if (v153 >= 0x17)
    {
      v155 = (v153 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v153 | 7) != 0x17)
        v155 = v153 | 7;
      v156 = v155 + 1;
      v154 = operator new(v155 + 1);
      v422 = v156 | 0x8000000000000000;
      v421[0] = v154;
      v421[1] = (void *)v153;
LABEL_302:
      memmove(v154, (char *)v151 + v149, v153);
      goto LABEL_303;
    }
    HIBYTE(v422) = v153;
    v154 = v421;
    if (v153)
      goto LABEL_302;
LABEL_303:
    *((_BYTE *)v154 + v153) = 0;
    v420 = 0.0;
    v157 = v145 + 1;
    if (SBYTE7(v428) < 0)
    {
      v158 = v427;
      if ((unint64_t)v427 < v157)
LABEL_713:
        sub_19C2E3454();
      v159 = __dst;
    }
    else
    {
      v158 = (void **)BYTE7(v428);
      if (v157 > BYTE7(v428))
        goto LABEL_713;
      v159 = (void **)&__dst;
    }
    v160 = (size_t)v158 - v157;
    if ((unint64_t)v158 - v157 > 0x7FFFFFFFFFFFFFF7)
      sub_19C2A1A54();
    if (v160 >= 0x17)
    {
      v162 = (v160 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v160 | 7) != 0x17)
        v162 = v160 | 7;
      v163 = v162 + 1;
      v161 = operator new(v162 + 1);
      v419 = v163 | 0x8000000000000000;
      v418[0] = v161;
      v418[1] = (void *)v160;
LABEL_315:
      memmove(v161, (char *)v159 + v157, v160);
      goto LABEL_316;
    }
    HIBYTE(v419) = (_BYTE)v158 - v157;
    v161 = v418;
    if (v158 != (void **)v157)
      goto LABEL_315;
LABEL_316:
    *((_BYTE *)v161 + v160) = 0;
    if (v419 >= 0)
      v164 = v418;
    else
      v164 = (void **)v418[0];
    sscanf((const char *)v164, "%f", &v420);
    v165 = sub_19C317760(v392, (uint64_t)__src);
    if (v165)
    {
      v166 = *((_DWORD *)v165 + 10);
    }
    else
    {
      v167 = *(_QWORD *)(v115 + 112);
      v168 = *(_QWORD *)(v115 + 120);
      if (v168 >= *(_QWORD *)(v115 + 128))
      {
        v170 = sub_19C318C78((char **)(v115 + 112), (uint64_t)__src);
      }
      else
      {
        if (SHIBYTE(v425) < 0)
        {
          sub_19C2B5238(*(_BYTE **)(v115 + 120), __src[0], (unint64_t)__src[1]);
        }
        else
        {
          v169 = *(_OWORD *)__src;
          *(_QWORD *)(v168 + 16) = v425;
          *(_OWORD *)v168 = v169;
        }
        v170 = (char *)(v168 + 24);
        *(_QWORD *)(v115 + 120) = v168 + 24;
      }
      *(_QWORD *)(v115 + 120) = v170;
      v423 = __src;
      v166 = -1431655765 * ((v168 - v167) >> 3);
      *((_DWORD *)sub_19C31795C((uint64_t)v392, (uint64_t)__src, (__int128 **)&v423) + 10) = v166;
    }
    v171 = sub_19C317760(v116, (uint64_t)v421);
    if (v171)
    {
      v172 = *((unsigned int *)v171 + 10);
      if (v166 >= 0x100)
        goto LABEL_706;
    }
    else
    {
      v172 = *(unsigned int *)(v115 + 136);
      *(_DWORD *)(v115 + 136) = v172 + 1;
      v423 = v421;
      *((_DWORD *)sub_19C31795C((uint64_t)v116, (uint64_t)v421, (__int128 **)&v423) + 10) = v172;
      if (v166 >= 0x100)
      {
LABEL_706:
        v383 = 141;
        v384 = "l >= 0 && l <= MAX_LABEL_TYPES";
        goto LABEL_708;
      }
    }
    if (BYTE3(v172))
    {
      v383 = 142;
      v384 = "f >= 0 && f <= 0xffffff";
LABEL_708:
      __assert_rtn("ME_Feature", "maxent.h", v383, v384);
    }
    v173 = v166 + ((_DWORD)v172 << 8);
    v174 = *(_QWORD *)(v115 + 216);
    if (v174)
    {
      v175 = (uint8x8_t)vcnt_s8((int8x8_t)v174);
      v175.i16[0] = vaddlv_u8(v175);
      if (v175.u32[0] > 1uLL)
      {
        v176 = v173;
        if (v174 <= v173)
          v176 = v173 % v174;
      }
      else
      {
        v176 = ((_DWORD)v174 - 1) & v173;
      }
      v177 = *(uint64_t ***)(*(_QWORD *)(v115 + 208) + 8 * v176);
      if (v177)
      {
        v178 = *v177;
        if (v178)
        {
          if (v175.u32[0] < 2uLL)
          {
            while (1)
            {
              v180 = v178[1];
              if (v180 == v173)
              {
                if (*((_DWORD *)v178 + 4) == (_DWORD)v173)
                  goto LABEL_455;
              }
              else if ((v180 & (v174 - 1)) != v176)
              {
                goto LABEL_353;
              }
              v178 = (uint64_t *)*v178;
              if (!v178)
                goto LABEL_353;
            }
          }
          do
          {
            v179 = v178[1];
            if (v179 == v173)
            {
              if (*((_DWORD *)v178 + 4) == (_DWORD)v173)
                goto LABEL_455;
            }
            else
            {
              if (v179 >= v174)
                v179 %= v174;
              if (v179 != v176)
                break;
            }
            v178 = (uint64_t *)*v178;
          }
          while (v178);
        }
      }
    }
LABEL_353:
    v181 = *(char **)(v115 + 248);
    v182 = *(char **)(v115 + 256);
    v183 = (v182 - v181) >> 2;
    v184 = *(_QWORD *)(v115 + 264);
    if ((unint64_t)v182 >= v184)
    {
      v186 = v183 + 1;
      if ((unint64_t)(v183 + 1) >> 62)
        sub_19C2A18E8();
      v187 = v184 - (_QWORD)v181;
      if (v187 >> 1 > v186)
        v186 = v187 >> 1;
      if ((unint64_t)v187 >= 0x7FFFFFFFFFFFFFFCLL)
        v172 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v172 = v186;
      if (v172)
      {
        if (v172 >> 62)
          sub_19C2A143C();
        v188 = operator new(4 * v172);
      }
      else
      {
        v188 = 0;
      }
      v189 = &v188[4 * v183];
      *v189 = v173;
      v185 = v189 + 1;
      if (v182 != v181)
      {
        v190 = v182 - v181 - 4;
        if (v190 < 0x2C)
          goto LABEL_734;
        if (v182 - v188 - ((v182 - v181) & 0xFFFFFFFFFFFFFFFCLL) < 0x20)
          goto LABEL_734;
        v191 = (v190 >> 2) + 1;
        v192 = &v188[4 * v183 - 16];
        v193 = v182 - 16;
        v194 = v191 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v195 = *(_OWORD *)v193;
          *(v192 - 1) = *((_OWORD *)v193 - 1);
          *v192 = v195;
          v192 -= 2;
          v193 -= 32;
          v194 -= 8;
        }
        while (v194);
        v189 -= v191 & 0x7FFFFFFFFFFFFFF8;
        v182 -= 4 * (v191 & 0x7FFFFFFFFFFFFFF8);
        if (v191 != (v191 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_734:
          do
          {
            v196 = *((_DWORD *)v182 - 1);
            v182 -= 4;
            *--v189 = v196;
          }
          while (v182 != v181);
        }
      }
      *(_QWORD *)(v115 + 248) = v189;
      *(_QWORD *)(v115 + 256) = v185;
      *(_QWORD *)(v115 + 264) = &v188[4 * v172];
      if (v181)
      {
        operator delete(v181);
        v174 = *(_QWORD *)(v115 + 216);
      }
    }
    else
    {
      *(_DWORD *)v182 = v173;
      v185 = v182 + 4;
    }
    *(_QWORD *)(v115 + 256) = v185;
    if (v174)
    {
      v197 = (uint8x8_t)vcnt_s8((int8x8_t)v174);
      v197.i16[0] = vaddlv_u8(v197);
      if (v197.u32[0] > 1uLL)
      {
        v172 = v173;
        if (v174 <= v173)
          v172 = v173 % v174;
      }
      else
      {
        v172 = ((_DWORD)v174 - 1) & v173;
      }
      v198 = *(void ***)(*(_QWORD *)(v115 + 208) + 8 * v172);
      if (v198)
      {
        v199 = *v198;
        if (*v198)
        {
          if (v197.u32[0] < 2uLL)
          {
            while (1)
            {
              v201 = v199[1];
              if (v201 == v173)
              {
                if (*((_DWORD *)v199 + 4) == (_DWORD)v173)
                  goto LABEL_454;
              }
              else if ((v201 & (v174 - 1)) != v172)
              {
                goto LABEL_394;
              }
              v199 = (_QWORD *)*v199;
              if (!v199)
                goto LABEL_394;
            }
          }
          do
          {
            v200 = v199[1];
            if (v200 == v173)
            {
              if (*((_DWORD *)v199 + 4) == (_DWORD)v173)
                goto LABEL_454;
            }
            else
            {
              if (v200 >= v174)
                v200 %= v174;
              if (v200 != v172)
                break;
            }
            v199 = (_QWORD *)*v199;
          }
          while (v199);
        }
      }
    }
LABEL_394:
    v199 = operator new(0x18uLL);
    *v199 = 0;
    v199[1] = v173;
    *((_DWORD *)v199 + 4) = v173;
    *((_DWORD *)v199 + 5) = 0;
    v202 = (float)(unint64_t)(*(_QWORD *)(v115 + 232) + 1);
    v203 = *(float *)(v115 + 240);
    if (v174 && (float)(v203 * (float)v174) >= v202)
    {
      v173 = v172;
      goto LABEL_444;
    }
    v204 = (v174 & (v174 - 1)) != 0;
    if (v174 < 3)
      v204 = 1;
    v205 = v204 | (2 * v174);
    v206 = vcvtps_u32_f32(v202 / v203);
    if (v205 <= v206)
      prime = v206;
    else
      prime = v205;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v174 = *(_QWORD *)(v115 + 216);
    }
    if (prime > v174)
      goto LABEL_407;
    if (prime >= v174)
      goto LABEL_432;
    v219 = vcvtps_u32_f32((float)*(unint64_t *)(v115 + 232) / *(float *)(v115 + 240));
    if (v174 < 3 || (v220 = (uint8x8_t)vcnt_s8((int8x8_t)v174), v220.i16[0] = vaddlv_u8(v220), v220.u32[0] > 1uLL))
    {
      v219 = std::__next_prime(v219);
    }
    else
    {
      v221 = 1 << -(char)__clz(v219 - 1);
      if (v219 >= 2)
        v219 = v221;
    }
    if (prime <= v219)
      prime = v219;
    if (prime < v174)
    {
      if (!prime)
      {
        v248 = *(void **)(v115 + 208);
        *(_QWORD *)(v115 + 208) = 0;
        if (v248)
          operator delete(v248);
        v174 = 0;
        *(_QWORD *)(v115 + 216) = 0;
        goto LABEL_432;
      }
LABEL_407:
      if (prime >> 61)
        sub_19C2A143C();
      v208 = operator new(8 * prime);
      v209 = *(void **)(v115 + 208);
      *(_QWORD *)(v115 + 208) = v208;
      if (v209)
        operator delete(v209);
      v210 = 0;
      *(_QWORD *)(v115 + 216) = prime;
      do
        *(_QWORD *)(*(_QWORD *)(v115 + 208) + 8 * v210++) = 0;
      while (prime != v210);
      v211 = (_QWORD *)*v389;
      if (!*v389)
      {
LABEL_431:
        v174 = prime;
        goto LABEL_432;
      }
      v212 = v211[1];
      v213 = prime - 1;
      if ((prime & (prime - 1)) == 0)
      {
        v214 = v212 & v213;
        *(_QWORD *)(*(_QWORD *)(v115 + 208) + 8 * v214) = v389;
        for (n = (_QWORD *)*v211; *v211; n = (_QWORD *)*v211)
        {
          v216 = n[1] & v213;
          if (v216 == v214)
          {
            v211 = n;
          }
          else
          {
            v217 = *(_QWORD *)(v115 + 208);
            if (*(_QWORD *)(v217 + 8 * v216))
            {
              *v211 = *n;
              v218 = 8 * v216;
              *n = **(_QWORD **)(*(_QWORD *)(v115 + 208) + v218);
              **(_QWORD **)(*(_QWORD *)(v115 + 208) + v218) = n;
            }
            else
            {
              *(_QWORD *)(v217 + 8 * v216) = v211;
              v211 = n;
              v214 = v216;
            }
          }
        }
        goto LABEL_431;
      }
      if (v212 >= prime)
        v212 %= prime;
      *(_QWORD *)(*(_QWORD *)(v115 + 208) + 8 * v212) = v389;
      v222 = (_QWORD *)*v211;
      if (!*v211)
        goto LABEL_431;
      while (2)
      {
        v224 = v222[1];
        if (v224 >= prime)
          v224 %= prime;
        if (v224 != v212)
        {
          v225 = *(_QWORD *)(v115 + 208);
          if (!*(_QWORD *)(v225 + 8 * v224))
          {
            *(_QWORD *)(v225 + 8 * v224) = v211;
LABEL_436:
            v211 = v222;
            v222 = (_QWORD *)*v222;
            v212 = v224;
            if (!v222)
              goto LABEL_431;
            continue;
          }
          *v211 = *v222;
          v223 = 8 * v224;
          *v222 = **(_QWORD **)(*(_QWORD *)(v115 + 208) + v223);
          **(_QWORD **)(*(_QWORD *)(v115 + 208) + v223) = v222;
          v222 = v211;
        }
        break;
      }
      v224 = v212;
      goto LABEL_436;
    }
    v174 = *(_QWORD *)(v115 + 216);
LABEL_432:
    if ((v174 & (v174 - 1)) != 0)
    {
      if (v174 <= v173)
        v173 %= v174;
    }
    else
    {
      v173 = ((_DWORD)v174 - 1) & v173;
    }
LABEL_444:
    v226 = *(_QWORD *)(v115 + 208);
    v227 = *(_QWORD **)(v226 + 8 * v173);
    if (v227)
    {
      *v199 = *v227;
LABEL_452:
      *v227 = v199;
      goto LABEL_453;
    }
    *v199 = *v389;
    *v389 = v199;
    *(_QWORD *)(v226 + 8 * v173) = v389;
    if (*v199)
    {
      v228 = *(_QWORD *)(*v199 + 8);
      if ((v174 & (v174 - 1)) != 0)
      {
        if (v228 >= v174)
          v228 %= v174;
      }
      else
      {
        v228 &= v174 - 1;
      }
      v227 = (_QWORD *)(*(_QWORD *)(v115 + 208) + 8 * v228);
      goto LABEL_452;
    }
LABEL_453:
    ++*(_QWORD *)(v115 + 232);
LABEL_454:
    *((_DWORD *)v199 + 5) = v183;
LABEL_455:
    v229 = v420;
    v231 = *(double **)(v115 + 192);
    v230 = *(_QWORD *)(v115 + 200);
    if ((unint64_t)v231 >= v230)
    {
      v233 = (double *)*v386;
      v234 = (char *)v231 - (_BYTE *)*v386;
      v235 = v234 >> 3;
      v236 = (v234 >> 3) + 1;
      if (v236 >> 61)
        sub_19C2A18E8();
      v237 = v230 - (_QWORD)v233;
      if (v237 >> 2 > v236)
        v236 = v237 >> 2;
      if ((unint64_t)v237 >= 0x7FFFFFFFFFFFFFF8)
        v238 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v238 = v236;
      if (v238)
      {
        if (v238 >> 61)
          sub_19C2A143C();
        v239 = operator new(8 * v238);
      }
      else
      {
        v239 = 0;
      }
      v240 = (double *)&v239[8 * v235];
      *v240 = v229;
      v232 = v240 + 1;
      if (v231 != v233)
      {
        v241 = (char *)(v231 - 1) - (char *)v233;
        if (v241 < 0x58)
          goto LABEL_735;
        if ((unint64_t)((char *)v231 - &v239[v234]) < 0x20)
          goto LABEL_735;
        v242 = (v241 >> 3) + 1;
        v243 = &v239[8 * v235 - 16];
        v244 = v231 - 2;
        v245 = v242 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v246 = *(_OWORD *)v244;
          *(v243 - 1) = *((_OWORD *)v244 - 1);
          *v243 = v246;
          v243 -= 2;
          v244 -= 4;
          v245 -= 4;
        }
        while (v245);
        v240 -= v242 & 0x3FFFFFFFFFFFFFFCLL;
        v231 -= v242 & 0x3FFFFFFFFFFFFFFCLL;
        if (v242 != (v242 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_735:
          do
          {
            v247 = *((_QWORD *)v231-- - 1);
            *((_QWORD *)v240-- - 1) = v247;
          }
          while (v231 != v233);
        }
      }
      *(_QWORD *)(v115 + 184) = v240;
      *(_QWORD *)(v115 + 192) = v232;
      *(_QWORD *)(v115 + 200) = &v239[8 * v238];
      if (v233)
        operator delete(v233);
    }
    else
    {
      *v231 = v229;
      v232 = v231 + 1;
    }
    v132 = cfa;
    *(_QWORD *)(v115 + 192) = v232;
    if (SHIBYTE(v419) < 0)
    {
      operator delete(v418[0]);
      if (SHIBYTE(v422) < 0)
        goto LABEL_482;
LABEL_478:
      if (SHIBYTE(v425) < 0)
        goto LABEL_483;
LABEL_479:
      if (SBYTE7(v428) < 0)
        goto LABEL_251;
    }
    else
    {
      if ((SHIBYTE(v422) & 0x80000000) == 0)
        goto LABEL_478;
LABEL_482:
      operator delete(v421[0]);
      if ((SHIBYTE(v425) & 0x80000000) == 0)
        goto LABEL_479;
LABEL_483:
      operator delete(__src[0]);
      if (SBYTE7(v428) < 0)
      {
LABEL_251:
        operator delete(__dst);
        continue;
      }
    }
  }
  *(_DWORD *)(v115 + 272) = -1431655765 * ((*(_QWORD *)(v115 + 120) - *(_QWORD *)(v115 + 112)) >> 3);
  v250 = *(_QWORD *)(v115 + 328);
  v249 = *(_QWORD *)(v115 + 336);
  if (v249 != v250)
  {
    v251 = *(_QWORD *)(v115 + 336);
    do
    {
      v253 = *(void **)(v251 - 24);
      v251 -= 24;
      v252 = v253;
      if (v253)
      {
        *(_QWORD *)(v249 - 16) = v252;
        operator delete(v252);
      }
      v249 = v251;
    }
    while (v251 != v250);
  }
  *(_QWORD *)(v115 + 336) = v250;
  v254 = v388;
  if (*(int *)(v115 + 136) >= 1)
  {
    v255 = 0;
    v387 = (_QWORD *)(v115 + 328);
    do
    {
      __src[1] = 0;
      __src[0] = 0;
      v425 = 0;
      v256 = *(_DWORD *)(v115 + 272);
      if (v256 >= 1)
      {
        if (HIBYTE(v255))
        {
          v381 = 142;
          v382 = "f >= 0 && f <= 0xffffff";
LABEL_704:
          __assert_rtn("ME_Feature", "maxent.h", v381, v382);
        }
        v257 = 0;
        v258 = 0;
        v259 = 0;
        v260 = 0;
        v261 = v255 << 8;
LABEL_509:
        if (v260 == 256)
        {
          v381 = 141;
          v382 = "l >= 0 && l <= MAX_LABEL_TYPES";
          goto LABEL_704;
        }
        v263 = *(int8x8_t *)(v115 + 216);
        if (!*(_QWORD *)&v263)
          goto LABEL_508;
        v264 = (v261 + v260);
        v265 = (uint8x8_t)vcnt_s8(v263);
        v265.i16[0] = vaddlv_u8(v265);
        if (v265.u32[0] > 1uLL)
        {
          v266 = (v261 + v260);
          if (*(_QWORD *)&v263 <= v264)
            v266 = v264 % *(_QWORD *)&v263;
        }
        else
        {
          v266 = (v263.i32[0] - 1) & v264;
        }
        v267 = *(uint64_t ***)(*(_QWORD *)(v115 + 208) + 8 * v266);
        if (!v267)
          goto LABEL_508;
        v268 = *v267;
        if (!v268)
          goto LABEL_508;
        if (v265.u32[0] < 2uLL)
        {
          v269 = *(_QWORD *)&v263 - 1;
          while (1)
          {
            v271 = v268[1];
            if (v271 == v264)
            {
              if (*((_DWORD *)v268 + 4) == (_DWORD)v264)
                goto LABEL_531;
            }
            else if ((v271 & v269) != v266)
            {
              goto LABEL_508;
            }
            v268 = (uint64_t *)*v268;
            if (!v268)
              goto LABEL_508;
          }
        }
        while (1)
        {
          v270 = v268[1];
          if (v270 == v264)
          {
            if (*((_DWORD *)v268 + 4) == (_DWORD)v264)
            {
LABEL_531:
              v272 = *((_DWORD *)v268 + 5);
              if ((v272 & 0x80000000) == 0)
              {
                if (v259 < v258)
                {
                  *(_DWORD *)v259 = v272;
                  v262 = v259 + 4;
                }
                else
                {
                  v273 = (v259 - v257) >> 2;
                  v274 = v273 + 1;
                  if ((unint64_t)(v273 + 1) >> 62)
                    sub_19C2A18E8();
                  if ((v258 - v257) >> 1 > v274)
                    v274 = (v258 - v257) >> 1;
                  if ((unint64_t)(v258 - v257) >= 0x7FFFFFFFFFFFFFFCLL)
                    v275 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v275 = v274;
                  v393 = v255;
                  if (v275)
                  {
                    if (v275 >> 62)
                      sub_19C2A143C();
                    v276 = v275;
                    v277 = operator new(4 * v275);
                    v275 = v276;
                  }
                  else
                  {
                    v277 = 0;
                  }
                  v278 = &v277[4 * v273];
                  *v278 = v272;
                  v262 = v278 + 1;
                  if (v259 != v257)
                  {
                    v279 = v259 - 4 - v257;
                    if (v279 < 0xBC
                      || &v277[v259 - v257 - 4 - (v279 & 0xFFFFFFFFFFFFFFFCLL)] > &v277[v259 - v257 - 4]
                      || &v259[-(v279 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v259 - 4
                      || (unint64_t)(v257 - v277) < 0x20)
                    {
                      v280 = v259;
                    }
                    else
                    {
                      v283 = (v279 >> 2) + 1;
                      v280 = &v259[-4 * (v283 & 0x7FFFFFFFFFFFFFF8)];
                      v284 = &v277[4 * v273 - 16];
                      v285 = v259 - 16;
                      v286 = v283 & 0x7FFFFFFFFFFFFFF8;
                      do
                      {
                        v287 = *(_OWORD *)v285;
                        *(v284 - 1) = *((_OWORD *)v285 - 1);
                        *v284 = v287;
                        v284 -= 2;
                        v285 -= 32;
                        v286 -= 8;
                      }
                      while (v286);
                      v278 -= v283 & 0x7FFFFFFFFFFFFFF8;
                      if (v283 == (v283 & 0x7FFFFFFFFFFFFFF8))
                        goto LABEL_547;
                    }
                    do
                    {
                      v281 = *((_DWORD *)v280 - 1);
                      v280 -= 4;
                      *--v278 = v281;
                    }
                    while (v280 != v257);
                  }
LABEL_547:
                  v258 = &v277[4 * v275];
                  __src[0] = v278;
                  __src[1] = v262;
                  v425 = (unint64_t)v258;
                  if (v257)
                  {
                    v282 = v258;
                    operator delete(v257);
                    v258 = v282;
                  }
                  v257 = (char *)v278;
                  v255 = v393;
                }
                __src[1] = v262;
                v256 = *(_DWORD *)(v115 + 272);
                v259 = (char *)v262;
              }
LABEL_508:
              if (++v260 >= v256)
                goto LABEL_558;
              goto LABEL_509;
            }
          }
          else
          {
            if (v270 >= *(_QWORD *)&v263)
              v270 %= *(_QWORD *)&v263;
            if (v270 != v266)
              goto LABEL_508;
          }
          v268 = (uint64_t *)*v268;
          if (!v268)
            goto LABEL_508;
        }
      }
      v259 = 0;
LABEL_558:
      v289 = *(_QWORD **)(v115 + 336);
      v288 = *(_QWORD *)(v115 + 344);
      if ((unint64_t)v289 >= v288)
      {
        v294 = (_QWORD *)*v387;
        v295 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v289 - *v387) >> 3);
        v296 = v295 + 1;
        if (v295 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_19C2A18E8();
        v297 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v288 - (_QWORD)v294) >> 3);
        if (2 * v297 > v296)
          v296 = 2 * v297;
        if (v297 >= 0x555555555555555)
          v298 = 0xAAAAAAAAAAAAAAALL;
        else
          v298 = v296;
        v429 = v115 + 344;
        if (v298)
        {
          if (v298 > 0xAAAAAAAAAAAAAAALL)
            sub_19C2A143C();
          v299 = v255;
          v300 = (void **)operator new(24 * v298);
        }
        else
        {
          v299 = v255;
          v300 = 0;
        }
        __dst = v300;
        v427 = &v300[3 * v295];
        *(_QWORD *)&v428 = v427;
        v390 = (char *)&v300[3 * v298];
        *((_QWORD *)&v428 + 1) = v390;
        v301 = v427;
        v427[1] = 0;
        v302 = (char **)(v301 + 1);
        v301[2] = 0;
        *v301 = 0;
        v303 = __src[0];
        v304 = v259 - (char *)__src[0];
        if (v259 != __src[0])
        {
          if (v304 < 0)
            sub_19C2A18E8();
          v305 = (char *)operator new(v259 - (char *)__src[0]);
          *v301 = v305;
          *v302 = v305;
          v306 = &v305[4 * (v304 >> 2)];
          v301[2] = v306;
          memcpy(v305, v303, v304);
          *v302 = v306;
        }
        v307 = v301 + 3;
        *(_QWORD *)&v428 = v301 + 3;
        v255 = v299;
        if (v289 == v294)
        {
          *(_QWORD *)(v115 + 328) = v301;
          *(_QWORD *)(v115 + 336) = v307;
          *(_QWORD *)(v115 + 344) = v390;
        }
        else
        {
          do
          {
            v308 = v301;
            *(v301 - 2) = 0;
            *(v301 - 1) = 0;
            v309 = *(_OWORD *)(v289 - 3);
            v289 -= 3;
            *(_OWORD *)(v301 - 3) = v309;
            v301 -= 3;
            *(v308 - 1) = (void *)v289[2];
            *v289 = 0;
            v289[1] = 0;
            v289[2] = 0;
          }
          while (v289 != v294);
          v289 = *(_QWORD **)(v115 + 328);
          v310 = *(_QWORD **)(v115 + 336);
          *(_QWORD *)(v115 + 328) = v301;
          v311 = (_QWORD *)v428;
          *(_OWORD *)(v115 + 336) = v428;
          v307 = v311;
          if (v310 != v289)
          {
            v312 = v310;
            do
            {
              v314 = (void *)*(v312 - 3);
              v312 -= 3;
              v313 = v314;
              if (v314)
              {
                *(v310 - 2) = v313;
                operator delete(v313);
              }
              v310 = v312;
            }
            while (v312 != v289);
          }
        }
        v254 = v388;
        if (v289)
          operator delete(v289);
        v290 = __src[0];
        *(_QWORD *)(v115 + 336) = v307;
        if (!v290)
          goto LABEL_502;
      }
      else
      {
        *v289 = 0;
        v289[1] = 0;
        v289[2] = 0;
        v290 = __src[0];
        v291 = v259 - (char *)__src[0];
        if (v259 != __src[0])
        {
          if (v291 < 0)
            sub_19C2A18E8();
          v292 = (char *)operator new(v259 - (char *)__src[0]);
          *v289 = v292;
          v289[1] = v292;
          v293 = &v292[4 * (v291 >> 2)];
          v289[2] = v293;
          memcpy(v292, v290, v291);
          v289[1] = v293;
        }
        *(_QWORD *)(v115 + 336) = v289 + 3;
        v254 = v388;
        *(_QWORD *)(v115 + 336) = v289 + 3;
        if (!v290)
          goto LABEL_502;
      }
      operator delete(v290);
LABEL_502:
      ++v255;
    }
    while ((signed int)v255 < *(_DWORD *)(v115 + 136));
  }
  fclose(cfa);
  v315 = *v254;
  v316 = v254;
  if (!*v254)
  {
LABEL_616:
    v328 = v316;
    v329 = operator new(0x40uLL);
    v330 = v329 + 4;
    if (SHIBYTE(v404.__r_.__value_.__r.__words[2]) < 0)
    {
      sub_19C2B5238(v330, v404.__r_.__value_.__l.__data_, v404.__r_.__value_.__l.__size_);
    }
    else
    {
      *(_OWORD *)v330 = *(_OWORD *)&v404.__r_.__value_.__l.__data_;
      v329[6] = *((_QWORD *)&v404.__r_.__value_.__l + 2);
    }
    v329[7] = 0;
    *v329 = 0;
    v329[1] = 0;
    v329[2] = v254;
    *v328 = v329;
    v345 = **(_QWORD **)(a1 + 8);
    v346 = v329;
    if (v345)
    {
      *(_QWORD *)(a1 + 8) = v345;
      v346 = *v328;
    }
    sub_19C2A2310(*(uint64_t **)(a1 + 16), v346);
    ++*(_QWORD *)(a1 + 24);
    v329[7] = v115;
    if ((SHIBYTE(v402.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_635;
LABEL_638:
    operator delete(v402.__r_.__value_.__l.__data_);
    v347 = v403;
    if (!v403)
      goto LABEL_640;
    goto LABEL_639;
  }
  if ((v404.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v317 = &v404;
  else
    v317 = (std::string *)v404.__r_.__value_.__r.__words[0];
  if ((v404.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v318 = HIBYTE(v404.__r_.__value_.__r.__words[2]);
  else
    v318 = v404.__r_.__value_.__l.__size_;
  while (1)
  {
    while (1)
    {
      v254 = (uint64_t **)v315;
      v321 = (_QWORD *)v315[4];
      v319 = v315 + 4;
      v320 = v321;
      v322 = *((char *)v319 + 23);
      v323 = v322 >= 0 ? v319 : v320;
      v324 = v322 >= 0 ? *((unsigned __int8 *)v319 + 23) : v319[1];
      v325 = v324 >= v318 ? v318 : v324;
      v326 = memcmp(v317, v323, v325);
      if (v326)
        break;
      if (v318 >= v324)
        goto LABEL_610;
LABEL_596:
      v315 = *v254;
      v316 = v254;
      if (!*v254)
        goto LABEL_616;
    }
    if (v326 < 0)
      goto LABEL_596;
LABEL_610:
    v327 = memcmp(v323, v317, v325);
    if (!v327)
      break;
    if ((v327 & 0x80000000) == 0)
      goto LABEL_637;
LABEL_614:
    v315 = v254[1];
    if (!v315)
    {
      v316 = v254 + 1;
      goto LABEL_616;
    }
  }
  if (v324 < v318)
    goto LABEL_614;
LABEL_637:
  v254[7] = (uint64_t *)v115;
  if (SHIBYTE(v402.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_638;
LABEL_635:
  v347 = v403;
  if (v403)
LABEL_639:
    CFRelease(v347);
LABEL_640:
  if (SHIBYTE(v404.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v404.__r_.__value_.__l.__data_);
  v405[0] = *(void **)MEMORY[0x1E0DE4F50];
  v348 = *(__n128 **)(MEMORY[0x1E0DE4F50] + 72);
  *(void **)((char *)v405 + *((_QWORD *)v405[0] - 3)) = *(void **)(MEMORY[0x1E0DE4F50] + 64);
  v406 = v348;
  v407 = (char *)(MEMORY[0x1E0DE4FB8] + 16);
  if (v414 < 0)
    operator delete(v413);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1A1AD34CC](&v417);
  v7 = v115 != 0;
  if (v115)
  {
    sub_19C317D84(&__p, v115, (uint64_t)v401);
    v349 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p.__r_.__value_.__l.__size_;
    if (*((_QWORD *)&v349 + 1) != (_QWORD)v349)
    {
      v350 = 0;
      v351 = 0;
      if ((unint64_t)((uint64_t)(*((_QWORD *)&v349 + 1) - v349) >> 3) <= 1)
        v352 = 1;
      else
        v352 = (uint64_t)(*((_QWORD *)&v349 + 1) - v349) >> 3;
      do
      {
        v353 = *(_QWORD *)(v115 + 112);
        if (v351 >= (int)(-1431655765 * ((unint64_t)(*(_QWORD *)(v115 + 120) - v353) >> 3)))
          __assert_rtn("Str", "maxent.h", 235, "id >= 0 && id < (int)id2str.size()");
        v354 = *(uint64_t **)(v349 + 8 * v351);
        v355 = (__int128 *)(v353 + v350);
        if (*((char *)v355 + 23) < 0)
        {
          sub_19C2B5238(v405, *(void **)v355, *((_QWORD *)v355 + 1));
        }
        else
        {
          v356 = *v355;
          v406 = (__n128 *)*((_QWORD *)v355 + 2);
          *(_OWORD *)v405 = v356;
        }
        sub_19C313F04((uint64_t **)&__p, (const void **)v405, (uint64_t)v405)[7] = v354;
        if (SHIBYTE(v406) < 0)
          operator delete(v405[0]);
        ++v351;
        v350 += 24;
      }
      while (v352 != v351);
      v357 = __p.__r_.__value_.__r.__words[0];
      if ((std::string::size_type *)__p.__r_.__value_.__l.__data_ != &__p.__r_.__value_.__r.__words[1])
      {
        v358 = (uint64_t **)(a1 + 32);
        do
        {
          v359 = sub_19C29A674((uint64_t)v358, (const void **)(v357 + 32));
          if ((uint64_t *)(a1 + 40) != v359)
          {
            v360 = v359;
            v361 = *((double *)sub_19C2EAA88((uint64_t **)&__p, (const void **)(v357 + 32), v357 + 32) + 7);
            v362 = *((double *)sub_19C2EAA88(v358, (const void **)v360 + 4, (uint64_t)(v360 + 4)) + 7);
            *((double *)sub_19C2EAA88((uint64_t **)&__p, (const void **)(v357 + 32), v357 + 32) + 7) = v362 + v361;
          }
          v363 = *(std::string **)(v357 + 8);
          if (v363)
          {
            do
            {
              v364 = v363;
              v363 = (std::string *)v363->__r_.__value_.__r.__words[0];
            }
            while (v363);
          }
          else
          {
            do
            {
              v364 = *(std::string **)(v357 + 16);
              v365 = v364->__r_.__value_.__r.__words[0] == v357;
              v357 = (std::string::size_type)v364;
            }
            while (!v365);
          }
          v357 = (std::string::size_type)v364;
        }
        while (v364 != (std::string *)&__p.__r_.__value_.__r.__words[1]);
      }
    }
    v367 = v396;
    v366 = v397;
    v368 = v385;
    if (v397 >= 1)
    {
      do
      {
        v372 = *(__int128 **)(*(_QWORD *)v367 + 24);
        if (*((char *)v372 + 23) < 0)
        {
          sub_19C2B5238(v405, *(void **)v372, *((_QWORD *)v372 + 1));
        }
        else
        {
          v373 = *v372;
          v406 = (__n128 *)*((_QWORD *)v372 + 2);
          *(_OWORD *)v405 = v373;
        }
        *v368 = sub_19C313F04((uint64_t **)&__p, (const void **)v405, (uint64_t)v405)[7];
        if (SHIBYTE(v406) < 0)
          operator delete(v405[0]);
        ++v368;
        v367 += 8;
        --v366;
      }
      while (v366);
    }
    sub_19C2EAC08((char *)__p.__r_.__value_.__l.__size_);
    if ((_QWORD)v349)
      operator delete((void *)v349);
  }
  v369 = (char *)v398;
  if (v398)
  {
    v370 = v399;
    v371 = v398;
    if (v399 != v398)
    {
      do
      {
        if (*(v370 - 1) < 0)
          operator delete(*((void **)v370 - 3));
        v370 -= 24;
      }
      while (v370 != v369);
      v371 = v398;
    }
    v399 = v369;
    operator delete(v371);
  }
  v374 = (void **)v401[6];
  if (v401[6])
  {
    v375 = (void **)v401[7];
    v376 = v401[6];
    if (v401[7] != v401[6])
    {
      do
      {
        if (*((char *)v375 - 9) < 0)
          operator delete(*(v375 - 4));
        v375 -= 4;
      }
      while (v375 != v374);
      v376 = v401[6];
    }
    v401[7] = v374;
    operator delete(v376);
  }
  v377 = (void **)v401[3];
  if (v401[3])
  {
    v378 = (void **)v401[4];
    v379 = v401[3];
    if (v401[4] != v401[3])
    {
      do
      {
        if (*((char *)v378 - 1) < 0)
          operator delete(*(v378 - 3));
        v378 -= 3;
      }
      while (v378 != v377);
      v379 = v401[3];
    }
    v401[4] = v377;
    operator delete(v379);
  }
  if (SHIBYTE(v401[2]) < 0)
    operator delete(v401[0]);
  return v7;
}

void sub_19C39A3D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,const void *a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47)
{
  void *v47;

  operator delete(v47);
  if (a38 < 0)
    operator delete(__p);
  sub_19C3134F8(&a39);
  if (a45 < 0)
    operator delete(a40);
  sub_19C2B5034((uint64_t)&a47);
  sub_19C307B68(&a21);
  sub_19C318964((uint64_t)&a24);
  _Unwind_Resume(a1);
}

void sub_19C39A7A0(uint64_t a1, const __CFString *a2, uint64_t a3)
{
  uint64_t v4;
  void *__p[2];
  char v6;

  v4 = a1 + 56;
  if (a2)
  {
    sub_19C29CEF8(a2, __p);
    sub_19C3148A0(v4, (const void **)__p, a3);
    if (v6 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v6 = 0;
    LOBYTE(__p[0]) = 0;
    sub_19C3148A0(a1 + 56, (const void **)__p, a3);
  }
}

void sub_19C39A814(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19C39A830(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  sqlite3 *v9;
  _QWORD *v10;
  _QWORD *v11;
  int v12;
  BOOL v13;
  int v14;
  char v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  sqlite3 *v28;
  double *v29;
  int v30;
  int v32;
  char v33;
  int *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  double *v41;
  double *v42;
  uint64_t v43;
  sqlite3 *v44;
  _QWORD *v45;
  int v46;
  int v48;
  char v49;
  int *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  void *exception;
  void *v71;
  void *v72;
  sqlite3 **v74;

  if (*(_BYTE *)(a1 + 248))
  {
    v74 = (sqlite3 **)(a1 + 56);
    v7 = sub_19C31452C((sqlite3 **)(a1 + 56), "BEGIN IMMEDIATE");
    if ((v7 == 0) != (v7 != 5))
    {
      if (qword_1EDB97100 != -1)
        dispatch_once(&qword_1EDB97100, &unk_1E3D3BED0);
      sub_19C3E8FF4((int *)qword_1EDB970F8, v1, "Could not begin transaction, error %d", v2, v3, v4, v5, v6, v7);
    }
    sub_19C31452C(v74, "DELETE FROM RecipientByLangMatrix");
    sub_19C31452C(v74, "DELETE FROM EmojiByApp");
    sub_19C31452C(v74, "DELETE FROM OfflineAdaptationTimeByApp");
    v8 = operator new();
    v9 = *v74;
    *(_QWORD *)v8 = 0;
    *(_QWORD *)(v8 + 8) = 0;
    *(_QWORD *)(v8 + 16) = v9;
    *(_DWORD *)(v8 + 24) = 1;
    sub_19C3A48A0(v8, "INSERT INTO RecipientByLangMatrix VALUES (?,?,?)");
    v10 = *(_QWORD **)(a1 + 152);
    if (v10 != (_QWORD *)(a1 + 160))
    {
      do
      {
        v11 = (_QWORD *)v10[7];
        if (v11 != v10 + 8)
        {
          do
          {
            sub_19C3A4F88(v8, (uint64_t)(v10 + 4));
            sub_19C3A4F88(v8, (uint64_t)(v11 + 4));
            sub_19C3A4B80(v8, *((_DWORD *)v11 + 14));
            v12 = sqlite3_step(*(sqlite3_stmt **)(v8 + 8));
            v13 = v12 == 26 || v12 == 11;
            if (v13)
            {
              exception = __cxa_allocate_exception(0x20uLL);
              *(_QWORD *)exception = off_1E3D36BC0;
              *((_QWORD *)exception + 1) = 0;
              *((_QWORD *)exception + 2) = 0;
              *((_QWORD *)exception + 3) = 0;
              sub_19C29D01C((void **)exception + 1, "SQLite database corrupted", 0x19uLL);
              __cxa_throw(exception, (struct type_info *)&unk_1E3D31E20, (void (*)(void *))sub_19C3146A4);
            }
            *(_DWORD *)(v8 + 24) = 1;
            v14 = sqlite3_reset(*(sqlite3_stmt **)(v8 + 8));
            v15 = v14;
            if (v14)
            {
              if (qword_1EDB97100 != -1)
                dispatch_once(&qword_1EDB97100, &unk_1E3D3BED0);
              v16 = (int *)qword_1EDB970F8;
              sqlite3_errmsg(*(sqlite3 **)(v8 + 16));
              sub_19C3E8FF4(v16, v17, "Could not reset statement, error code: %d error message: %s\n", v18, v19, v20, v21, v22, v15);
            }
            v23 = (_QWORD *)v11[1];
            if (v23)
            {
              do
              {
                v24 = v23;
                v23 = (_QWORD *)*v23;
              }
              while (v23);
            }
            else
            {
              do
              {
                v24 = (_QWORD *)v11[2];
                v13 = *v24 == (_QWORD)v11;
                v11 = v24;
              }
              while (!v13);
            }
            v11 = v24;
          }
          while (v24 != v10 + 8);
        }
        v25 = (_QWORD *)v10[1];
        if (v25)
        {
          do
          {
            v26 = v25;
            v25 = (_QWORD *)*v25;
          }
          while (v25);
        }
        else
        {
          do
          {
            v26 = (_QWORD *)v10[2];
            v13 = *v26 == (_QWORD)v10;
            v10 = v26;
          }
          while (!v13);
        }
        v10 = v26;
      }
      while (v26 != (_QWORD *)(a1 + 160));
    }
    sub_19C3A4A38(v8);
    v27 = operator new();
    v28 = *v74;
    *(_QWORD *)v27 = 0;
    *(_QWORD *)(v27 + 8) = 0;
    *(_QWORD *)(v27 + 16) = v28;
    *(_DWORD *)(v27 + 24) = 1;
    sub_19C3A48A0(v27, "INSERT INTO OfflineAdaptationTimeByApp VALUES (?,?)");
    v29 = *(double **)(a1 + 200);
    if (v29 != (double *)(a1 + 208))
    {
      do
      {
        sub_19C3A4F88(v27, (uint64_t)(v29 + 4));
        sub_19C3A4CF8(v27, v29[7]);
        v30 = sqlite3_step(*(sqlite3_stmt **)(v27 + 8));
        if (v30 == 26 || v30 == 11)
        {
          v71 = __cxa_allocate_exception(0x20uLL);
          *(_QWORD *)v71 = off_1E3D36BC0;
          *((_QWORD *)v71 + 1) = 0;
          *((_QWORD *)v71 + 2) = 0;
          *((_QWORD *)v71 + 3) = 0;
          sub_19C29D01C((void **)v71 + 1, "SQLite database corrupted", 0x19uLL);
          __cxa_throw(v71, (struct type_info *)&unk_1E3D31E20, (void (*)(void *))sub_19C3146A4);
        }
        *(_DWORD *)(v27 + 24) = 1;
        v32 = sqlite3_reset(*(sqlite3_stmt **)(v27 + 8));
        v33 = v32;
        if (v32)
        {
          if (qword_1EDB97100 != -1)
            dispatch_once(&qword_1EDB97100, &unk_1E3D3BED0);
          v34 = (int *)qword_1EDB970F8;
          sqlite3_errmsg(*(sqlite3 **)(v27 + 16));
          sub_19C3E8FF4(v34, v35, "Could not reset statement, error code: %d error message: %s\n", v36, v37, v38, v39, v40, v33);
        }
        v41 = (double *)*((_QWORD *)v29 + 1);
        if (v41)
        {
          do
          {
            v42 = v41;
            v41 = *(double **)v41;
          }
          while (v41);
        }
        else
        {
          do
          {
            v42 = (double *)*((_QWORD *)v29 + 2);
            v13 = *(_QWORD *)v42 == (_QWORD)v29;
            v29 = v42;
          }
          while (!v13);
        }
        v29 = v42;
      }
      while (v42 != (double *)(a1 + 208));
    }
    sub_19C3A4A38(v27);
    v43 = operator new();
    v44 = *v74;
    *(_QWORD *)v43 = 0;
    *(_QWORD *)(v43 + 8) = 0;
    *(_QWORD *)(v43 + 16) = v44;
    *(_DWORD *)(v43 + 24) = 1;
    sub_19C3A48A0(v43, "INSERT INTO EmojiByApp VALUES (?,?,?)");
    v45 = *(_QWORD **)(a1 + 176);
    if (v45 != (_QWORD *)(a1 + 184))
    {
      do
      {
        sub_19C3A4F88(v43, (uint64_t)(v45 + 4));
        sub_19C3A4B80(v43, *((_DWORD *)v45 + 14));
        sub_19C3A4CF8(v43, *((double *)v45 + 8));
        v46 = sqlite3_step(*(sqlite3_stmt **)(v43 + 8));
        if (v46 == 26 || v46 == 11)
        {
          v72 = __cxa_allocate_exception(0x20uLL);
          *(_QWORD *)v72 = off_1E3D36BC0;
          *((_QWORD *)v72 + 1) = 0;
          *((_QWORD *)v72 + 2) = 0;
          *((_QWORD *)v72 + 3) = 0;
          sub_19C29D01C((void **)v72 + 1, "SQLite database corrupted", 0x19uLL);
          __cxa_throw(v72, (struct type_info *)&unk_1E3D31E20, (void (*)(void *))sub_19C3146A4);
        }
        *(_DWORD *)(v43 + 24) = 1;
        v48 = sqlite3_reset(*(sqlite3_stmt **)(v43 + 8));
        v49 = v48;
        if (v48)
        {
          if (qword_1EDB97100 != -1)
            dispatch_once(&qword_1EDB97100, &unk_1E3D3BED0);
          v50 = (int *)qword_1EDB970F8;
          sqlite3_errmsg(*(sqlite3 **)(v43 + 16));
          sub_19C3E8FF4(v50, v51, "Could not reset statement, error code: %d error message: %s\n", v52, v53, v54, v55, v56, v49);
        }
        v57 = (_QWORD *)v45[1];
        if (v57)
        {
          do
          {
            v58 = v57;
            v57 = (_QWORD *)*v57;
          }
          while (v57);
        }
        else
        {
          do
          {
            v58 = (_QWORD *)v45[2];
            v13 = *v58 == (_QWORD)v45;
            v45 = v58;
          }
          while (!v13);
        }
        v45 = v58;
      }
      while (v58 != (_QWORD *)(a1 + 184));
    }
    sub_19C3A4A38(v43);
    v59 = sub_19C3A495C(v43);
    MEMORY[0x1A1AD355C](v59, 0x1020C4055CCDE27);
    v60 = sub_19C3A495C(v27);
    MEMORY[0x1A1AD355C](v60, 0x1020C4055CCDE27);
    v61 = sub_19C3A495C(v8);
    MEMORY[0x1A1AD355C](v61, 0x1020C4055CCDE27);
    v62 = sub_19C31452C(v74, "COMMIT");
    v69 = v62;
    if (v62)
    {
      if (qword_1EDB97100 != -1)
        dispatch_once(&qword_1EDB97100, &unk_1E3D3BED0);
      sub_19C3E8FF4((int *)qword_1EDB970F8, v63, "Could not commit transaction, error %d", v64, v65, v66, v67, v68, v69);
    }
    if (*(_BYTE *)(a1 + 96))
      sub_19C314780((uint64_t)v74, 1);
    *(_BYTE *)(a1 + 248) = 0;
  }
}

void sub_19C39AEEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  void *v29;
  int *v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  if (a2 != 1)
    _Unwind_Resume(exception_object);
  v29 = __cxa_begin_catch(exception_object);
  if (qword_1EDB97100 != -1)
    dispatch_once(&qword_1EDB97100, &unk_1E3D3BED0);
  v30 = (int *)qword_1EDB970F8;
  v31 = (*(uint64_t (**)(void *))(*(_QWORD *)v29 + 16))(v29);
  sub_19C3E8FF4(v30, v32, "Serialization of languagelikelihood.dat model failed due to busy signal: %s", v33, v34, v35, v36, v37, v31);
  __cxa_end_catch();
}

double sub_19C39B1A8(uint64_t a1, const __CFString *a2)
{
  void **v3;
  double *v4;
  double *v5;
  double *v6;
  unsigned __int8 v7;
  double v8;
  size_t v9;
  double *v10;
  int v11;
  uint64_t *v12;
  size_t v13;
  size_t v14;
  int v15;
  int v16;
  const void *v17;
  size_t v18;
  size_t v19;
  int v20;
  void *__p[2];
  unsigned __int8 v23;

  if (!a2)
    return 0.0;
  v3 = __p;
  sub_19C29CEF8(a2, __p);
  v6 = *(double **)(a1 + 208);
  v4 = (double *)(a1 + 208);
  v5 = v6;
  v7 = v23;
  v8 = 0.0;
  if (!v6)
    goto LABEL_35;
  if ((v23 & 0x80u) == 0)
  {
    v9 = v23;
  }
  else
  {
    v3 = (void **)__p[0];
    v9 = (size_t)__p[1];
  }
  v10 = v4;
  do
  {
    while (1)
    {
      v11 = *((char *)v5 + 55);
      v12 = v11 >= 0 ? (uint64_t *)(v5 + 4) : (uint64_t *)*((_QWORD *)v5 + 4);
      v13 = v11 >= 0 ? *((unsigned __int8 *)v5 + 55) : *((_QWORD *)v5 + 5);
      v14 = v9 >= v13 ? v13 : v9;
      v15 = memcmp(v12, v3, v14);
      if (v15)
        break;
      if (v13 >= v9)
        goto LABEL_21;
LABEL_7:
      v5 = (double *)*((_QWORD *)v5 + 1);
      if (!v5)
        goto LABEL_22;
    }
    if (v15 < 0)
      goto LABEL_7;
LABEL_21:
    v10 = v5;
    v5 = *(double **)v5;
  }
  while (v5);
LABEL_22:
  if (v10 != v4)
  {
    v16 = *((char *)v10 + 55);
    if (v16 >= 0)
      v17 = v10 + 4;
    else
      v17 = (const void *)*((_QWORD *)v10 + 4);
    if (v16 >= 0)
      v18 = *((unsigned __int8 *)v10 + 55);
    else
      v18 = *((_QWORD *)v10 + 5);
    if (v18 >= v9)
      v19 = v9;
    else
      v19 = v18;
    v20 = memcmp(v3, v17, v19);
    if (v20)
    {
      if ((v20 & 0x80000000) == 0)
        goto LABEL_34;
    }
    else if (v9 >= v18)
    {
LABEL_34:
      v8 = v10[7];
    }
  }
LABEL_35:
  if ((v7 & 0x80) != 0)
    operator delete(__p[0]);
  return v8;
}

void sub_19C39B2F0(uint64_t a1)
{
  sub_19C3139A4(a1 + 56);
}

void sub_19C39B2F8(uint64_t a1, int a2, double a3)
{
  int v3;
  _QWORD *v4;
  _QWORD *v5;
  int v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;

  v3 = (int)((a3 - *(double *)(a1 + 256)) * 0.0000115740741);
  if (a2)
  {
    if (v3 <= 1)
      v3 = 1;
  }
  else if (v3 < 1)
  {
    return;
  }
  v4 = *(_QWORD **)(a1 + 152);
  if (v4 != (_QWORD *)(a1 + 160))
  {
    do
    {
      v5 = (_QWORD *)v4[7];
      v6 = v3;
      if (v5 != v4 + 8)
      {
        do
        {
          v10 = v5;
          do
          {
            *((_DWORD *)v10 + 14) = (int)((double)*((int *)v10 + 14) * 0.95);
            v11 = (_QWORD *)v10[1];
            if (v11)
            {
              do
              {
                v12 = v11;
                v11 = (_QWORD *)*v11;
              }
              while (v11);
            }
            else
            {
              do
              {
                v12 = (_QWORD *)v10[2];
                v13 = *v12 == (_QWORD)v10;
                v10 = v12;
              }
              while (!v13);
            }
            v10 = v12;
          }
          while (v12 != v4 + 8);
          v9 = __OFSUB__(v6--, 1);
        }
        while (!((v6 < 0) ^ v9 | (v6 == 0)));
      }
      v7 = (_QWORD *)v4[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v4[2];
          v13 = *v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v13);
      }
      v4 = v8;
    }
    while (v8 != (_QWORD *)(a1 + 160));
  }
  *(CFAbsoluteTime *)(a1 + 256) = CFAbsoluteTimeGetCurrent();
}

double sub_19C39B41C(uint64_t a1, const void **a2, uint64_t a3, char a4, __n128 a5)
{
  __n128 *v7;
  unint64_t j;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  __n128 v14;
  uint64_t v15;
  __n128 v16;
  int v17;
  const void *v18;
  size_t v19;
  int v20;
  const void *v21;
  size_t v22;
  size_t v23;
  int v24;
  __n128 v25;
  __n128 *v26;
  size_t v27;
  const void **v28;
  int v29;
  const void *v30;
  size_t v31;
  size_t v32;
  int v33;
  __n128 *v34;
  const void **v35;
  const void *v36;
  const void **v37;
  size_t v38;
  size_t v39;
  int v40;
  const void **v41;
  __n128 v42;
  __int128 v43;
  __n128 v44;
  __n128 *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  const void *v49;
  unint64_t v50;
  size_t v51;
  int v52;
  const void **v53;
  const void *v54;
  const void **v55;
  unint64_t v56;
  size_t v57;
  int v58;
  BOOL v59;
  int v60;
  __n128 *v61;
  unint64_t v62;
  size_t v63;
  int v64;
  __n128 *v65;
  __n128 v66;
  __n128 v67;
  BOOL v68;
  __n128 v69;
  __n128 *v70;
  size_t v71;
  size_t v72;
  __n128 *v73;
  const void *v74;
  size_t v75;
  __n128 *v76;
  size_t v77;
  size_t v78;
  int v79;
  int v80;
  const void *v81;
  size_t v82;
  size_t v83;
  int v84;
  unint64_t v85;
  uint64_t v86;
  const void *v87;
  size_t v88;
  size_t v89;
  int v90;
  _OWORD *k;
  const void *v92;
  const void *v93;
  size_t v94;
  size_t v95;
  int v96;
  __n128 v97;
  __int128 v98;
  __n128 v99;
  __n128 *v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  const void *v104;
  unint64_t v105;
  size_t v106;
  int v107;
  char *v108;
  uint64_t v109;
  _OWORD *v110;
  unint64_t v111;
  size_t v112;
  int v113;
  __n128 *v114;
  __n128 v115;
  int v116;
  __n128 *v117;
  size_t v118;
  int v119;
  const void *v120;
  size_t v121;
  size_t v122;
  int v123;
  const void *v124;
  uint64_t v125;
  uint64_t v126;
  int64_t v127;
  uint64_t v128;
  __n128 *v129;
  int64_t v130;
  uint64_t v131;
  uint64_t v132;
  __n128 *v133;
  int v134;
  const void *v135;
  unint64_t v136;
  int v137;
  const void *v138;
  unint64_t v139;
  size_t v140;
  int v141;
  __n128 *v142;
  int v143;
  __n128 *v144;
  size_t v145;
  int v146;
  const void *v147;
  size_t v148;
  size_t v149;
  int v150;
  __n128 v151;
  __n128 v152;
  __n128 *v153;
  size_t v154;
  __n128 v155;
  uint64_t v156;
  uint64_t v157;
  int v158;
  const void *v159;
  size_t v160;
  int v161;
  const void *v162;
  size_t v163;
  size_t v164;
  int v165;
  int v166;
  __n128 *v167;
  size_t v168;
  size_t v169;
  int v170;
  __n128 *v171;
  __n128 *v172;
  int v173;
  const void *v174;
  size_t v175;
  int v176;
  __n128 *v177;
  size_t v178;
  size_t v179;
  int v180;
  __n128 v181;
  __n128 *v182;
  size_t v183;
  uint64_t v184;
  uint64_t v185;
  int v186;
  const void *v187;
  size_t v188;
  size_t v189;
  int v190;
  int64_t v191;
  const void **v192;
  unint64_t v193;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  __n128 *v199;
  int v200;
  const void *v201;
  unint64_t v202;
  int v203;
  const void *v204;
  unint64_t v205;
  size_t v206;
  int v207;
  unint64_t v208;
  uint64_t v209;
  unint64_t v210;
  unint64_t v211;
  uint64_t v212;
  int v213;
  const void *v214;
  size_t v215;
  int v216;
  __n128 *v217;
  size_t v218;
  size_t v219;
  int v220;
  __n128 v221;
  __n128 *v222;
  size_t v223;
  __n128 v224;
  __int128 v225;
  unint64_t v226;
  uint64_t v227;
  int v228;
  const void *v229;
  size_t v230;
  size_t v231;
  int v232;
  const void *v233;
  __n128 *v234;
  uint64_t v235;
  int v236;
  const void *v237;
  size_t v238;
  int v239;
  const void *v240;
  size_t v241;
  size_t v242;
  int v243;
  __n128 v244;
  __n128 *v245;
  size_t v246;
  uint64_t i;
  int v248;
  const void *v249;
  size_t v250;
  size_t v251;
  int v252;
  __n128 v253;
  __n128 v254;
  const void **v256;
  const void **v257;
  int64_t v258;
  const void **__s2;
  __n128 *__s2a;
  void *__s2b;
  int64_t v263;
  unsigned __int8 v264;
  const void **v265;
  const void **v266;
  __n128 v268;
  int64_t v269;
  __n128 v270;
  uint64_t v271;
  uint64_t v272;

  v272 = *MEMORY[0x1E0C80C00];
LABEL_2:
  v7 = (__n128 *)(a2 - 3);
  v256 = a2 - 9;
  v257 = a2 - 6;
  j = a1;
  v265 = a2;
  __s2 = a2 - 3;
  while (2)
  {
    v9 = j;
    v10 = (uint64_t)a2 - j;
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - j) >> 3);
    a1 = v9;
    switch(v11)
    {
      case 0uLL:
      case 1uLL:
        return a5.n128_f64[0];
      case 2uLL:
        v116 = *((char *)a2 - 1);
        if (v116 >= 0)
          v117 = v7;
        else
          v117 = (__n128 *)*(a2 - 3);
        if (v116 >= 0)
          v118 = *((unsigned __int8 *)a2 - 1);
        else
          v118 = (size_t)*(a2 - 2);
        v119 = *(char *)(v9 + 23);
        if (v119 >= 0)
          v120 = (const void *)v9;
        else
          v120 = *(const void **)v9;
        if (v119 >= 0)
          v121 = *(unsigned __int8 *)(v9 + 23);
        else
          v121 = *(_QWORD *)(v9 + 8);
        if (v121 >= v118)
          v122 = v118;
        else
          v122 = v121;
        v123 = memcmp(v117, v120, v122);
        if (v123)
        {
          if ((v123 & 0x80000000) == 0)
            return a5.n128_f64[0];
        }
        else if (v118 >= v121)
        {
          return a5.n128_f64[0];
        }
        v253 = *(__n128 *)v9;
        v269 = *(_QWORD *)(v9 + 16);
        v268 = v253;
        v254 = *v7;
        *(_QWORD *)(v9 + 16) = v7[1].n128_u64[0];
        *(__n128 *)v9 = v254;
        a5 = v268;
        v7[1].n128_u64[0] = v269;
        *v7 = a5;
        return a5.n128_f64[0];
      case 3uLL:
        a5.n128_u64[0] = sub_19C39C7E0((const void **)v9, (const void **)(v9 + 24), (const void **)v7).n128_u64[0];
        return a5.n128_f64[0];
      case 4uLL:
        a5.n128_u64[0] = sub_19C39CA20(v9, (__int128 *)(v9 + 24), (__int128 *)(v9 + 48), (const void **)v7).n128_u64[0];
        return a5.n128_f64[0];
      case 5uLL:
        a5.n128_u64[0] = sub_19C39CBB4(v9, v9 + 24, v9 + 48, (__int128 *)(v9 + 72), (const void **)v7).n128_u64[0];
        return a5.n128_f64[0];
      default:
        if (v10 <= 575)
        {
          if ((a4 & 1) != 0)
          {
            if ((const void **)v9 == a2)
              return a5.n128_f64[0];
            v124 = (const void *)(v9 + 24);
            if ((const void **)(v9 + 24) == a2)
              return a5.n128_f64[0];
            v125 = 0;
            v126 = v9;
            while (1)
            {
              v172 = (__n128 *)v126;
              v126 = (uint64_t)v124;
              v173 = v172[2].n128_i8[15];
              if (v173 >= 0)
                v174 = v124;
              else
                v174 = (const void *)v172[1].n128_u64[1];
              if (v173 >= 0)
                v175 = v172[2].n128_u8[15];
              else
                v175 = v172[2].n128_u64[0];
              v176 = v172[1].n128_i8[7];
              if (v176 >= 0)
                v177 = v172;
              else
                v177 = (__n128 *)v172->n128_u64[0];
              if (v176 >= 0)
                v178 = v172[1].n128_u8[7];
              else
                v178 = v172->n128_u64[1];
              if (v178 >= v175)
                v179 = v175;
              else
                v179 = v178;
              v180 = memcmp(v174, v177, v179);
              if (v180)
              {
                if ((v180 & 0x80000000) == 0)
                  goto LABEL_347;
              }
              else if (v175 >= v178)
              {
                goto LABEL_347;
              }
              v181 = *(__n128 *)v126;
              v269 = *(_QWORD *)(v126 + 16);
              v268 = v181;
              if (v269 >= 0)
                v182 = &v268;
              else
                v182 = (__n128 *)v181.n128_u64[0];
              if (v269 >= 0)
                v183 = HIBYTE(v269);
              else
                v183 = v181.n128_u64[1];
              *(_QWORD *)(v126 + 16) = v172[1].n128_u64[0];
              *(__n128 *)v126 = *v172;
              v172[1].n128_u8[7] = 0;
              v172->n128_u8[0] = 0;
              v171 = (__n128 *)a1;
              if (v172 != (__n128 *)a1)
              {
                v184 = v125;
                while (1)
                {
                  v185 = a1 + v184;
                  v186 = *(char *)(a1 + v184 - 1);
                  if (v186 >= 0)
                    v187 = (const void *)(a1 + v184 - 24);
                  else
                    v187 = *(const void **)(a1 + v184 - 24);
                  if (v186 >= 0)
                    v188 = *(unsigned __int8 *)(a1 + v184 - 1);
                  else
                    v188 = *(_QWORD *)(a1 + v184 - 16);
                  if (v188 >= v183)
                    v189 = v183;
                  else
                    v189 = v188;
                  v190 = memcmp(v182, v187, v189);
                  if (v190)
                  {
                    if ((v190 & 0x80000000) == 0)
                    {
                      v171 = (__n128 *)(a1 + v184);
                      break;
                    }
                  }
                  else if (v183 >= v188)
                  {
                    v171 = v172;
                    break;
                  }
                  v172 = (__n128 *)((char *)v172 - 24);
                  *(_OWORD *)v185 = *(_OWORD *)(a1 + v184 - 24);
                  *(_QWORD *)(v185 + 16) = *(_QWORD *)(a1 + v184 - 8);
                  *(_BYTE *)(v185 - 1) = 0;
                  *(_BYTE *)(v185 - 24) = 0;
                  v184 -= 24;
                  if (!v184)
                  {
                    v171 = (__n128 *)a1;
                    break;
                  }
                }
              }
              a5 = v268;
              v171[1].n128_u64[0] = v269;
              *v171 = a5;
LABEL_347:
              v124 = (const void *)(v126 + 24);
              v125 += 24;
              if ((const void **)(v126 + 24) == v265)
                return a5.n128_f64[0];
            }
          }
          if ((const void **)v9 == a2)
            return a5.n128_f64[0];
          v233 = (const void *)(v9 + 24);
          if ((const void **)(v9 + 24) == a2)
            return a5.n128_f64[0];
LABEL_469:
          v235 = (uint64_t)v233;
          v236 = *(char *)(a1 + 47);
          if (v236 >= 0)
            v237 = v233;
          else
            v237 = *(const void **)(a1 + 24);
          if (v236 >= 0)
            v238 = *(unsigned __int8 *)(a1 + 47);
          else
            v238 = *(_QWORD *)(a1 + 32);
          v239 = *(char *)(a1 + 23);
          if (v239 >= 0)
            v240 = (const void *)a1;
          else
            v240 = *(const void **)a1;
          if (v239 >= 0)
            v241 = *(unsigned __int8 *)(a1 + 23);
          else
            v241 = *(_QWORD *)(a1 + 8);
          if (v241 >= v238)
            v242 = v238;
          else
            v242 = v241;
          v243 = memcmp(v237, v240, v242);
          if (v243)
          {
            if ((v243 & 0x80000000) == 0)
              goto LABEL_468;
          }
          else if (v238 >= v241)
          {
            goto LABEL_468;
          }
          v244 = *(__n128 *)v235;
          v269 = *(_QWORD *)(v235 + 16);
          v268 = v244;
          *(_QWORD *)(v235 + 8) = 0;
          *(_QWORD *)(v235 + 16) = 0;
          *(_QWORD *)v235 = 0;
          if (v269 >= 0)
            v245 = &v268;
          else
            v245 = (__n128 *)v268.n128_u64[0];
          if (v269 >= 0)
            v246 = HIBYTE(v269);
          else
            v246 = v268.n128_u64[1];
          for (i = v235; ; i -= 24)
          {
            *(_OWORD *)i = *(_OWORD *)(i - 24);
            *(_QWORD *)(i + 16) = *(_QWORD *)(i - 8);
            *(_BYTE *)(i - 1) = 0;
            *(_BYTE *)(i - 24) = 0;
            v248 = *(char *)(i - 25);
            if (v248 >= 0)
              v249 = (const void *)(i - 48);
            else
              v249 = *(const void **)(i - 48);
            if (v248 >= 0)
              v250 = *(unsigned __int8 *)(i - 25);
            else
              v250 = *(_QWORD *)(i - 40);
            if (v250 >= v246)
              v251 = v246;
            else
              v251 = v250;
            v252 = memcmp(v245, v249, v251);
            if (v252)
            {
              if ((v252 & 0x80000000) == 0)
              {
LABEL_467:
                v234 = (__n128 *)(i - 24);
                a5 = v268;
                v234[1].n128_u64[0] = v269;
                *v234 = a5;
LABEL_468:
                a1 = v235;
                v233 = (const void *)(v235 + 24);
                if ((const void **)(v235 + 24) == v265)
                  return a5.n128_f64[0];
                goto LABEL_469;
              }
            }
            else if (v246 >= v250)
            {
              goto LABEL_467;
            }
          }
        }
        if (!a3)
        {
          if ((const void **)v9 == a2)
            return a5.n128_f64[0];
          v127 = (v11 - 2) >> 1;
          v263 = v127;
          v128 = v9;
          while (1)
          {
            v130 = v127;
            if (v263 < v127)
              goto LABEL_262;
            v131 = v128 + 24 * ((2 * v127) | 1);
            v132 = 2 * v127 + 2;
            if (v132 >= (uint64_t)v11)
              goto LABEL_282;
            v133 = (__n128 *)(v131 + 24);
            v134 = *(char *)(v131 + 23);
            v135 = v134 >= 0 ? (const void *)(v128 + 24 * ((2 * v127) | 1)) : *(const void **)v131;
            v136 = v134 >= 0 ? *(unsigned __int8 *)(v131 + 23) : *(_QWORD *)(v131 + 8);
            v137 = *(char *)(v131 + 47);
            v138 = v137 >= 0 ? (const void *)(v131 + 24) : *(const void **)(v131 + 24);
            v139 = v137 >= 0 ? *(unsigned __int8 *)(v131 + 47) : *(_QWORD *)(v131 + 32);
            v140 = v139 >= v136 ? v136 : v139;
            v141 = memcmp(v135, v138, v140);
            if (v141)
              break;
            v59 = v136 >= v139;
            v128 = a1;
            if (v59)
              goto LABEL_282;
LABEL_283:
            v142 = (__n128 *)(v128 + 24 * v130);
            v143 = v133[1].n128_i8[7];
            if (v143 >= 0)
              v144 = v133;
            else
              v144 = (__n128 *)v133->n128_u64[0];
            if (v143 >= 0)
              v145 = v133[1].n128_u8[7];
            else
              v145 = v133->n128_u64[1];
            v146 = v142[1].n128_i8[7];
            if (v146 >= 0)
              v147 = (const void *)(v128 + 24 * v130);
            else
              v147 = (const void *)v142->n128_u64[0];
            if (v146 >= 0)
              v148 = v142[1].n128_u8[7];
            else
              v148 = v142->n128_u64[1];
            if (v148 >= v145)
              v149 = v145;
            else
              v149 = v148;
            v150 = memcmp(v144, v147, v149);
            if (v150)
            {
              if ((v150 & 0x80000000) == 0)
                goto LABEL_302;
            }
            else if (v145 >= v148)
            {
LABEL_302:
              v258 = v130;
              v151 = *v142;
              v269 = v142[1].n128_i64[0];
              v268 = v151;
              v142->n128_u64[1] = 0;
              v142[1].n128_u64[0] = 0;
              v142->n128_u64[0] = 0;
              v152 = *v133;
              v142[1].n128_u64[0] = v133[1].n128_u64[0];
              *v142 = v152;
              v133[1].n128_u8[7] = 0;
              v133->n128_u8[0] = 0;
              if (v263 < v132)
              {
LABEL_260:
                v129 = v133;
LABEL_261:
                a5 = v268;
                v129[1].n128_u64[0] = v269;
                *v129 = a5;
                v130 = v258;
                goto LABEL_262;
              }
              v153 = &v268;
              if (v269 < 0)
                v153 = (__n128 *)v268.n128_u64[0];
              __s2a = v153;
              if (v269 >= 0)
                v154 = HIBYTE(v269);
              else
                v154 = v268.n128_u64[1];
              while (2)
              {
                v156 = (2 * v132) | 1;
                v157 = v128 + 24 * v156;
                v132 = 2 * v132 + 2;
                if (v132 < (uint64_t)v11)
                {
                  v129 = (__n128 *)(v157 + 24);
                  v158 = *(char *)(v157 + 23);
                  if (v158 >= 0)
                    v159 = (const void *)(v128 + 24 * v156);
                  else
                    v159 = *(const void **)v157;
                  if (v158 >= 0)
                    v160 = *(unsigned __int8 *)(v157 + 23);
                  else
                    v160 = *(_QWORD *)(v157 + 8);
                  v161 = *(char *)(v157 + 47);
                  if (v161 >= 0)
                    v162 = (const void *)(v157 + 24);
                  else
                    v162 = *(const void **)(v157 + 24);
                  if (v161 >= 0)
                    v163 = *(unsigned __int8 *)(v157 + 47);
                  else
                    v163 = *(_QWORD *)(v157 + 32);
                  if (v163 >= v160)
                    v164 = v160;
                  else
                    v164 = v163;
                  v165 = memcmp(v159, v162, v164);
                  if (v165)
                  {
                    v128 = a1;
                    if ((v165 & 0x80000000) == 0)
                      break;
LABEL_329:
                    v166 = v129[1].n128_i8[7];
                    if (v166 >= 0)
                      v167 = v129;
                    else
                      v167 = (__n128 *)v129->n128_u64[0];
                    if (v166 >= 0)
                      v168 = v129[1].n128_u8[7];
                    else
                      v168 = v129->n128_u64[1];
                    if (v154 >= v168)
                      v169 = v168;
                    else
                      v169 = v154;
                    v170 = memcmp(v167, __s2a, v169);
                    if (v170)
                    {
                      if (v170 < 0)
                        goto LABEL_260;
                    }
                    else if (v168 < v154)
                    {
                      goto LABEL_260;
                    }
                    v155 = *v129;
                    v133[1].n128_u64[0] = v129[1].n128_u64[0];
                    *v133 = v155;
                    v129[1].n128_u8[7] = 0;
                    v129->n128_u8[0] = 0;
                    v133 = v129;
                    if (v263 < v132)
                      goto LABEL_261;
                    continue;
                  }
                  v59 = v160 >= v163;
                  v128 = a1;
                  if (!v59)
                    goto LABEL_329;
                }
                break;
              }
              v129 = (__n128 *)v157;
              v132 = v156;
              goto LABEL_329;
            }
LABEL_262:
            v127 = v130 - 1;
            if (!v130)
            {
              v191 = v10 / 0x18uLL;
              v192 = v265;
LABEL_394:
              if (v191 < 2)
                goto LABEL_392;
              v266 = v192;
              v195 = 0;
              v196 = a1;
              __s2b = *(void **)a1;
              v270.n128_u64[0] = *(_QWORD *)(v128 + 8);
              *(unint64_t *)((char *)v270.n128_u64 + 7) = *(_QWORD *)(v128 + 15);
              v264 = *(_BYTE *)(a1 + 23);
              *(_QWORD *)(a1 + 8) = 0;
              *(_QWORD *)(a1 + 16) = 0;
              *(_QWORD *)a1 = 0;
              while (1)
              {
                v197 = v196 + 24 * v195 + 24;
                v198 = (2 * v195) | 1;
                v195 = 2 * v195 + 2;
                if (v195 >= v191)
                  goto LABEL_415;
                v199 = (__n128 *)(v197 + 24);
                v200 = *(char *)(v197 + 23);
                v201 = v200 >= 0 ? (const void *)v197 : *(const void **)v197;
                v202 = v200 >= 0 ? *(unsigned __int8 *)(v197 + 23) : *(_QWORD *)(v197 + 8);
                v203 = *(char *)(v197 + 47);
                v204 = v203 >= 0 ? (const void *)(v197 + 24) : *(const void **)(v197 + 24);
                v205 = v203 >= 0 ? *(unsigned __int8 *)(v197 + 47) : *(_QWORD *)(v197 + 32);
                v206 = v205 >= v202 ? v202 : v205;
                v207 = memcmp(v201, v204, v206);
                if (!v207)
                  break;
                if ((v207 & 0x80000000) == 0)
                  goto LABEL_415;
LABEL_416:
                if (*(char *)(v196 + 23) < 0)
                  operator delete(*(void **)v196);
                a5 = *v199;
                *(_QWORD *)(v196 + 16) = v199[1].n128_u64[0];
                *(__n128 *)v196 = a5;
                v199[1].n128_u8[7] = 0;
                v199->n128_u8[0] = 0;
                v196 = (uint64_t)v199;
                if (v195 > (uint64_t)((unint64_t)(v191 - 2) >> 1))
                {
                  v192 = v266;
                  if (v199 == (__n128 *)(v266 - 3))
                  {
                    v199->n128_u64[0] = (unint64_t)__s2b;
                    v193 = *(unint64_t *)((char *)v270.n128_u64 + 7);
                    v199->n128_u64[1] = v270.n128_u64[0];
                    *(unint64_t *)((char *)&v199->n128_u64[1] + 7) = v193;
                    v199[1].n128_u8[7] = v264;
                  }
                  else
                  {
                    a5 = *(__n128 *)(v266 - 3);
                    v199[1].n128_u64[0] = (unint64_t)*(v266 - 1);
                    *v199 = a5;
                    *(v266 - 3) = __s2b;
                    v208 = v270.n128_u64[0];
                    *(const void **)((char *)v266 - 9) = *(const void **)((char *)v270.n128_u64 + 7);
                    *(v266 - 2) = (const void *)v208;
                    *((_BYTE *)v266 - 1) = v264;
                    v209 = (uint64_t)&v199[1].n128_i64[1] - a1;
                    if (v209 >= 25)
                    {
                      v210 = -2 - 0x5555555555555555 * (v209 >> 3);
                      v211 = v210 >> 1;
                      v212 = a1 + 24 * (v210 >> 1);
                      v213 = *(char *)(v212 + 23);
                      if (v213 >= 0)
                        v214 = (const void *)(a1 + 24 * (v210 >> 1));
                      else
                        v214 = *(const void **)v212;
                      if (v213 >= 0)
                        v215 = *(unsigned __int8 *)(v212 + 23);
                      else
                        v215 = *(_QWORD *)(v212 + 8);
                      v216 = v199[1].n128_i8[7];
                      if (v216 >= 0)
                        v217 = v199;
                      else
                        v217 = (__n128 *)v199->n128_u64[0];
                      if (v216 >= 0)
                        v218 = v199[1].n128_u8[7];
                      else
                        v218 = v199->n128_u64[1];
                      if (v218 >= v215)
                        v219 = v215;
                      else
                        v219 = v218;
                      v220 = memcmp(v214, v217, v219);
                      if (v220)
                      {
                        v192 = v266;
                        if (v220 < 0)
                        {
LABEL_441:
                          v221 = *v199;
                          v269 = v199[1].n128_i64[0];
                          v268 = v221;
                          v199->n128_u64[1] = 0;
                          v199[1].n128_u64[0] = 0;
                          v199->n128_u64[0] = 0;
                          if (v269 >= 0)
                            v222 = &v268;
                          else
                            v222 = (__n128 *)v268.n128_u64[0];
                          if (v269 >= 0)
                            v223 = HIBYTE(v269);
                          else
                            v223 = v268.n128_u64[1];
                          v224 = *(__n128 *)v212;
                          v199[1].n128_u64[0] = *(_QWORD *)(v212 + 16);
                          *v199 = v224;
                          *(_BYTE *)(v212 + 23) = 0;
                          *(_BYTE *)v212 = 0;
                          if (v210 >= 2)
                          {
                            while (1)
                            {
                              v226 = v211 - 1;
                              v211 = (v211 - 1) >> 1;
                              v227 = a1 + 24 * v211;
                              v228 = *(char *)(v227 + 23);
                              if (v228 >= 0)
                                v229 = (const void *)(a1 + 24 * v211);
                              else
                                v229 = *(const void **)v227;
                              if (v228 >= 0)
                                v230 = *(unsigned __int8 *)(v227 + 23);
                              else
                                v230 = *(_QWORD *)(v227 + 8);
                              if (v223 >= v230)
                                v231 = v230;
                              else
                                v231 = v223;
                              v232 = memcmp(v229, v222, v231);
                              if (v232)
                              {
                                if ((v232 & 0x80000000) == 0)
                                  break;
                              }
                              else if (v230 >= v223)
                              {
                                break;
                              }
                              v225 = *(_OWORD *)v227;
                              *(_QWORD *)(v212 + 16) = *(_QWORD *)(v227 + 16);
                              *(_OWORD *)v212 = v225;
                              *(_BYTE *)(v227 + 23) = 0;
                              *(_BYTE *)v227 = 0;
                              v212 = a1 + 24 * v211;
                              if (v226 <= 1)
                                goto LABEL_463;
                            }
                          }
                          v227 = v212;
LABEL_463:
                          a5 = v268;
                          *(_QWORD *)(v227 + 16) = v269;
                          *(__n128 *)v227 = a5;
                          v192 = v266;
                        }
                      }
                      else
                      {
                        v192 = v266;
                        if (v215 < v218)
                          goto LABEL_441;
                      }
                    }
                  }
LABEL_392:
                  v192 -= 3;
                  if ((unint64_t)v191-- <= 2)
                    return a5.n128_f64[0];
                  goto LABEL_394;
                }
              }
              if (v202 < v205)
                goto LABEL_416;
LABEL_415:
              v199 = (__n128 *)v197;
              v195 = v198;
              goto LABEL_416;
            }
          }
          v128 = a1;
          if (v141 < 0)
            goto LABEL_283;
LABEL_282:
          v133 = (__n128 *)v131;
          v132 = (2 * v130) | 1;
          goto LABEL_283;
        }
        v12 = v11 >> 1;
        v13 = v9 + 24 * (v11 >> 1);
        if ((unint64_t)v10 < 0xC01)
        {
          sub_19C39C7E0((const void **)v13, (const void **)v9, (const void **)v7);
        }
        else
        {
          sub_19C39C7E0((const void **)v9, (const void **)v13, (const void **)v7);
          sub_19C39C7E0((const void **)(v9 + 24), (const void **)(24 * v12 + v9 - 24), v257);
          sub_19C39C7E0((const void **)(v9 + 48), (const void **)(v9 + 24 + 24 * v12), v256);
          sub_19C39C7E0((const void **)(24 * v12 + v9 - 24), (const void **)v13, (const void **)(v9 + 24 + 24 * v12));
          v14 = *(__n128 *)v9;
          v269 = *(_QWORD *)(v9 + 16);
          v268 = v14;
          v15 = *(_QWORD *)(v13 + 16);
          *(_OWORD *)v9 = *(_OWORD *)v13;
          *(_QWORD *)(v9 + 16) = v15;
          v16 = v268;
          *(_QWORD *)(v13 + 16) = v269;
          *(__n128 *)v13 = v16;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v17 = *(char *)(v9 - 1);
          if (v17 >= 0)
            v18 = (const void *)(v9 - 24);
          else
            v18 = *(const void **)(v9 - 24);
          if (v17 >= 0)
            v19 = *(unsigned __int8 *)(v9 - 1);
          else
            v19 = *(_QWORD *)(v9 - 16);
          v20 = *(char *)(v9 + 23);
          if (v20 >= 0)
            v21 = (const void *)v9;
          else
            v21 = *(const void **)v9;
          if (v20 >= 0)
            v22 = *(unsigned __int8 *)(v9 + 23);
          else
            v22 = *(_QWORD *)(v9 + 8);
          if (v22 >= v19)
            v23 = v19;
          else
            v23 = v22;
          v24 = memcmp(v18, v21, v23);
          if (v24)
          {
            if (v24 < 0)
              goto LABEL_27;
          }
          else if (v19 < v22)
          {
            goto LABEL_27;
          }
          v69 = *(__n128 *)v9;
          v271 = *(_QWORD *)(v9 + 16);
          v270 = v69;
          *(_QWORD *)(v9 + 8) = 0;
          *(_QWORD *)(v9 + 16) = 0;
          *(_QWORD *)v9 = 0;
          if (v271 >= 0)
            v70 = &v270;
          else
            v70 = (__n128 *)v270.n128_u64[0];
          if (v271 >= 0)
            v71 = HIBYTE(v271);
          else
            v71 = v270.n128_u64[1];
          v72 = *((unsigned __int8 *)v265 - 1);
          v73 = v7;
          v74 = *(v265 - 3);
          v75 = (size_t)*(v265 - 2);
          if ((v72 & 0x80u) == 0)
            v76 = v73;
          else
            v76 = (__n128 *)*(v265 - 3);
          if ((v72 & 0x80u) == 0)
            v77 = *((unsigned __int8 *)v265 - 1);
          else
            v77 = (size_t)*(v265 - 2);
          if (v77 >= v71)
            v78 = v71;
          else
            v78 = v77;
          v79 = memcmp(v70, v76, v78);
          if (v79)
          {
            if ((v79 & 0x80000000) == 0)
              goto LABEL_143;
          }
          else if (v71 >= v77)
          {
LABEL_143:
            for (j = a1 + 24; j < (unint64_t)v265; j += 24)
            {
              v80 = *(char *)(j + 23);
              if (v80 >= 0)
                v81 = (const void *)j;
              else
                v81 = *(const void **)j;
              if (v80 >= 0)
                v82 = *(unsigned __int8 *)(j + 23);
              else
                v82 = *(_QWORD *)(j + 8);
              if (v82 >= v71)
                v83 = v71;
              else
                v83 = v82;
              v84 = memcmp(v70, v81, v83);
              if (v84)
              {
                if (v84 < 0)
                  goto LABEL_173;
              }
              else if (v71 < v82)
              {
                goto LABEL_173;
              }
            }
            goto LABEL_173;
          }
          v85 = a1 + 24;
          do
          {
            while (1)
            {
              j = v85;
              v86 = *(unsigned __int8 *)(v85 + 23);
              v87 = (v86 & 0x80u) == 0 ? (const void *)j : *(const void **)j;
              v88 = (v86 & 0x80u) == 0 ? v86 : *(_QWORD *)(j + 8);
              v89 = v88 >= v71 ? v71 : v88;
              v90 = memcmp(v70, v87, v89);
              v85 = j + 24;
              if (v90)
                break;
              if (v71 < v88)
                goto LABEL_173;
            }
          }
          while ((v90 & 0x80000000) == 0);
LABEL_173:
          k = v265;
          if (j < (unint64_t)v265)
          {
            for (k = __s2; ; v75 = *((_QWORD *)k + 1))
            {
              if ((v72 & 0x80u) == 0)
                v93 = k;
              else
                v93 = v74;
              if ((v72 & 0x80u) == 0)
                v94 = v72;
              else
                v94 = v75;
              if (v94 >= v71)
                v95 = v71;
              else
                v95 = v94;
              v96 = memcmp(v70, v93, v95);
              if (v96)
              {
                if ((v96 & 0x80000000) == 0)
                  break;
              }
              else if (v71 >= v94)
              {
                break;
              }
              v92 = (const void *)*((_QWORD *)k - 3);
              k = (_OWORD *)((char *)k - 24);
              v74 = v92;
              v72 = *((unsigned __int8 *)k + 23);
            }
          }
LABEL_221:
          while (j < (unint64_t)k)
          {
            v97 = *(__n128 *)j;
            v269 = *(_QWORD *)(j + 16);
            v268 = v97;
            v98 = *k;
            *(_QWORD *)(j + 16) = *((_QWORD *)k + 2);
            *(_OWORD *)j = v98;
            v99 = v268;
            *((_QWORD *)k + 2) = v269;
            *k = v99;
            if (v271 >= 0)
              v100 = &v270;
            else
              v100 = (__n128 *)v270.n128_u64[0];
            if (v271 >= 0)
              v101 = HIBYTE(v271);
            else
              v101 = v270.n128_u64[1];
            v102 = j + 24;
            do
            {
              while (1)
              {
                j = v102;
                v103 = *(unsigned __int8 *)(v102 + 23);
                v104 = (v103 & 0x80u) == 0 ? (const void *)j : *(const void **)j;
                v105 = (v103 & 0x80u) == 0 ? v103 : *(_QWORD *)(j + 8);
                v106 = v105 >= v101 ? v101 : v105;
                v107 = memcmp(v100, v104, v106);
                v102 = j + 24;
                if (v107)
                  break;
                if (v101 < v105)
                  goto LABEL_208;
              }
            }
            while ((v107 & 0x80000000) == 0);
LABEL_208:
            v108 = (char *)k - 24;
            do
            {
              while (1)
              {
                k = v108;
                v109 = v108[23];
                v110 = (v109 & 0x80u) == 0 ? k : *(_OWORD **)k;
                v111 = (v109 & 0x80u) == 0 ? v109 : *((_QWORD *)k + 1);
                v112 = v111 >= v101 ? v101 : v111;
                v113 = memcmp(v100, v110, v112);
                v108 = (char *)k - 24;
                if (v113)
                  break;
                if (v101 >= v111)
                  goto LABEL_221;
              }
            }
            while (v113 < 0);
          }
          v114 = (__n128 *)(j - 24);
          if (j - 24 == a1)
          {
            a2 = v265;
            v7 = (__n128 *)__s2;
            if (*(char *)(j - 1) < 0)
              operator delete(*(void **)a1);
          }
          else
          {
            a2 = v265;
            v7 = (__n128 *)__s2;
            if (*(char *)(a1 + 23) < 0)
              operator delete(*(void **)a1);
            v115 = *v114;
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(j - 8);
            *(__n128 *)a1 = v115;
            *(_BYTE *)(j - 1) = 0;
            *(_BYTE *)(j - 24) = 0;
          }
          a4 = 0;
          a5 = v270;
          *(_QWORD *)(j - 8) = v271;
          *v114 = a5;
          continue;
        }
LABEL_27:
        v25 = *(__n128 *)v9;
        v271 = *(_QWORD *)(v9 + 16);
        v270 = v25;
        *(_QWORD *)(v9 + 8) = 0;
        *(_QWORD *)(v9 + 16) = 0;
        *(_QWORD *)v9 = 0;
        if (v271 >= 0)
          v26 = &v270;
        else
          v26 = (__n128 *)v270.n128_u64[0];
        if (v271 >= 0)
          v27 = HIBYTE(v271);
        else
          v27 = v270.n128_u64[1];
        v28 = (const void **)(v9 + 24);
        while (2)
        {
          v29 = *((char *)v28 + 23);
          if (v29 >= 0)
            v30 = v28;
          else
            v30 = *v28;
          if (v29 >= 0)
            v31 = *((unsigned __int8 *)v28 + 23);
          else
            v31 = (size_t)v28[1];
          if (v27 >= v31)
            v32 = v31;
          else
            v32 = v27;
          v33 = memcmp(v30, v26, v32);
          if (!v33)
          {
            if (v31 >= v27)
              goto LABEL_47;
LABEL_35:
            v28 += 3;
            continue;
          }
          break;
        }
        if (v33 < 0)
          goto LABEL_35;
LABEL_47:
        v34 = v7;
        if (v28 - 3 == (const void **)v9)
        {
          v35 = v265;
          if (v28 < v265)
          {
            do
            {
              while (1)
              {
                v35 = (const void **)v7;
                v60 = v7[1].n128_i8[7];
                v61 = v60 >= 0 ? v7 : (__n128 *)v7->n128_u64[0];
                v62 = v60 >= 0 ? v7[1].n128_u8[7] : v7->n128_u64[1];
                v63 = v27 >= v62 ? v62 : v27;
                v64 = memcmp(v61, v26, v63);
                v7 = (__n128 *)((char *)v7 - 24);
                if (!v64)
                  break;
                if (v64 < 0 || v28 >= v35)
                  goto LABEL_62;
              }
              v59 = v62 < v27 || v28 >= v35;
            }
            while (!v59);
          }
        }
        else
        {
          do
          {
            while (1)
            {
              v35 = (const void **)v34;
              v36 = (const void *)v34[1].n128_u8[7];
              v37 = (char)v36 >= 0 ? v35 : (const void **)*v35;
              v38 = (size_t)((char)v36 >= 0 ? v36 : v35[1]);
              v39 = v27 >= v38 ? v38 : v27;
              v40 = memcmp(v37, v26, v39);
              v34 = (__n128 *)(v35 - 3);
              if (v40)
                break;
              if (v38 < v27)
                goto LABEL_62;
            }
          }
          while ((v40 & 0x80000000) == 0);
        }
LABEL_62:
        j = (unint64_t)v28;
        if (v28 < v35)
        {
          j = (unint64_t)v28;
          v41 = v35;
          do
          {
            v42 = *(__n128 *)j;
            v269 = *(_QWORD *)(j + 16);
            v268 = v42;
            v43 = *(_OWORD *)v41;
            *(_QWORD *)(j + 16) = v41[2];
            *(_OWORD *)j = v43;
            v44 = v268;
            v41[2] = (const void *)v269;
            *(__n128 *)v41 = v44;
            if (v271 >= 0)
              v45 = &v270;
            else
              v45 = (__n128 *)v270.n128_u64[0];
            if (v271 >= 0)
              v46 = HIBYTE(v271);
            else
              v46 = v270.n128_u64[1];
            v47 = j + 24;
            do
            {
              while (1)
              {
                j = v47;
                v48 = *(unsigned __int8 *)(v47 + 23);
                v49 = (v48 & 0x80u) == 0 ? (const void *)j : *(const void **)j;
                v50 = (v48 & 0x80u) == 0 ? v48 : *(_QWORD *)(j + 8);
                v51 = v46 >= v50 ? v50 : v46;
                v52 = memcmp(v49, v45, v51);
                v47 = j + 24;
                if (v52)
                  break;
                if (v50 >= v46)
                  goto LABEL_84;
              }
            }
            while (v52 < 0);
LABEL_84:
            v53 = v41 - 3;
            do
            {
              while (1)
              {
                v41 = v53;
                v54 = (const void *)*((unsigned __int8 *)v53 + 23);
                v55 = (char)v54 >= 0 ? v41 : (const void **)*v41;
                v56 = (unint64_t)((char)v54 >= 0 ? v54 : v41[1]);
                v57 = v46 >= v56 ? v56 : v46;
                v58 = memcmp(v55, v45, v57);
                v53 = v41 - 3;
                if (v58)
                  break;
                if (v56 < v46)
                  goto LABEL_64;
              }
            }
            while ((v58 & 0x80000000) == 0);
LABEL_64:
            ;
          }
          while (j < (unint64_t)v41);
        }
        v65 = (__n128 *)(j - 24);
        if (j - 24 == a1)
        {
          a2 = v265;
          v7 = (__n128 *)__s2;
          if (*(char *)(j - 1) < 0)
            operator delete(*(void **)a1);
        }
        else
        {
          a2 = v265;
          if (*(char *)(a1 + 23) < 0)
            operator delete(*(void **)a1);
          v66 = *v65;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(j - 8);
          *(__n128 *)a1 = v66;
          *(_BYTE *)(j - 1) = 0;
          *(_BYTE *)(j - 24) = 0;
          v7 = (__n128 *)__s2;
        }
        v67 = v270;
        *(_QWORD *)(j - 8) = v271;
        *v65 = v67;
        if (v28 < v35)
        {
LABEL_124:
          sub_19C39B41C(a1, j - 24, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v68 = sub_19C39CDC4(a1, (const void **)(j - 24));
        if (!sub_19C39CDC4(j, a2))
        {
          if (v68)
            continue;
          goto LABEL_124;
        }
        a2 = (const void **)(j - 24);
        if (!v68)
          goto LABEL_2;
        return a5.n128_f64[0];
    }
  }
}

_QWORD *sub_19C39C55C(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  _QWORD *v18;
  _QWORD *v19;
  void *v20;
  void *v21;
  void **v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void **v27;
  void **v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void **v33;
  void *v34;
  void *v35;
  void *v36;

  v2 = (void *)a1[50];
  if (v2)
  {
    a1[51] = v2;
    operator delete(v2);
  }
  v3 = a1[44];
  if (v3)
  {
    v4 = a1[45];
    v5 = (void *)a1[44];
    if (v4 != v3)
    {
      do
      {
        v6 = *(void **)(v4 - 24);
        if (v6)
        {
          *(_QWORD *)(v4 - 16) = v6;
          operator delete(v6);
        }
        v7 = *(void **)(v4 - 48);
        if (v7)
        {
          *(_QWORD *)(v4 - 40) = v7;
          operator delete(v7);
        }
        v8 = *(void **)(v4 - 72);
        if (v8)
        {
          *(_QWORD *)(v4 - 64) = v8;
          operator delete(v8);
        }
        v4 -= 80;
      }
      while (v4 != v3);
      v5 = (void *)a1[44];
    }
    a1[45] = v3;
    operator delete(v5);
  }
  v9 = a1[41];
  if (v9)
  {
    v10 = a1[42];
    v11 = (void *)a1[41];
    if (v10 != v9)
    {
      v12 = a1[42];
      do
      {
        v14 = *(void **)(v12 - 24);
        v12 -= 24;
        v13 = v14;
        if (v14)
        {
          *(_QWORD *)(v10 - 16) = v13;
          operator delete(v13);
        }
        v10 = v12;
      }
      while (v12 != v9);
      v11 = (void *)a1[41];
    }
    a1[42] = v9;
    operator delete(v11);
  }
  v15 = (void *)a1[38];
  if (v15)
  {
    a1[39] = v15;
    operator delete(v15);
  }
  v16 = (void *)a1[35];
  if (v16)
  {
    a1[36] = v16;
    operator delete(v16);
  }
  v17 = (void *)a1[31];
  if (v17)
  {
    a1[32] = v17;
    operator delete(v17);
  }
  v18 = (_QWORD *)a1[28];
  if (v18)
  {
    do
    {
      v19 = (_QWORD *)*v18;
      operator delete(v18);
      v18 = v19;
    }
    while (v19);
  }
  v20 = (void *)a1[26];
  a1[26] = 0;
  if (v20)
    operator delete(v20);
  v21 = (void *)a1[23];
  if (v21)
  {
    a1[24] = v21;
    operator delete(v21);
  }
  v22 = (void **)a1[20];
  if (v22)
  {
    do
    {
      v27 = (void **)*v22;
      if (*((char *)v22 + 39) < 0)
        operator delete(v22[2]);
      operator delete(v22);
      v22 = v27;
    }
    while (v27);
  }
  v23 = (void *)a1[18];
  a1[18] = 0;
  if (v23)
    operator delete(v23);
  v24 = a1[14];
  if (v24)
  {
    v25 = a1[15];
    v26 = (void *)a1[14];
    if (v25 != v24)
    {
      do
      {
        if (*(char *)(v25 - 1) < 0)
          operator delete(*(void **)(v25 - 24));
        v25 -= 24;
      }
      while (v25 != v24);
      v26 = (void *)a1[14];
    }
    a1[15] = v24;
    operator delete(v26);
  }
  v28 = (void **)a1[11];
  if (v28)
  {
    do
    {
      v33 = (void **)*v28;
      if (*((char *)v28 + 39) < 0)
        operator delete(v28[2]);
      operator delete(v28);
      v28 = v33;
    }
    while (v33);
  }
  v29 = (void *)a1[9];
  a1[9] = 0;
  if (v29)
    operator delete(v29);
  v30 = a1[5];
  if (v30)
  {
    v31 = a1[6];
    v32 = (void *)a1[5];
    if (v31 != v30)
    {
      do
      {
        v34 = *(void **)(v31 - 24);
        if (v34)
        {
          *(_QWORD *)(v31 - 16) = v34;
          operator delete(v34);
        }
        v35 = *(void **)(v31 - 48);
        if (v35)
        {
          *(_QWORD *)(v31 - 40) = v35;
          operator delete(v35);
        }
        v36 = *(void **)(v31 - 72);
        if (v36)
        {
          *(_QWORD *)(v31 - 64) = v36;
          operator delete(v36);
        }
        v31 -= 80;
      }
      while (v31 != v30);
      v32 = (void *)a1[5];
    }
    a1[6] = v30;
    operator delete(v32);
  }
  return a1;
}

__n128 sub_19C39C7E0(const void **a1, const void **a2, const void **a3)
{
  int v6;
  const void *v7;
  size_t v8;
  int v9;
  const void *v10;
  size_t v11;
  size_t v12;
  int v13;
  int v14;
  const void *v15;
  size_t v16;
  size_t v17;
  int v18;
  __n128 result;
  int v20;
  const void *v21;
  size_t v22;
  size_t v23;
  int v24;
  const void *v25;
  __n128 v26;
  const void *v27;
  int v28;
  const void *v29;
  size_t v30;
  int v31;
  const void *v32;
  size_t v33;
  size_t v34;
  int v35;
  const void *v36;
  __int128 v37;
  const void *v38;
  int v39;
  const void *v40;
  size_t v41;
  int v42;
  const void *v43;
  size_t v44;
  size_t v45;
  int v46;
  const void *v47;
  const void *v48;
  const void *v49;
  const void *v50;
  const void *v51;

  v6 = *((char *)a2 + 23);
  if (v6 >= 0)
    v7 = a2;
  else
    v7 = *a2;
  if (v6 >= 0)
    v8 = *((unsigned __int8 *)a2 + 23);
  else
    v8 = (size_t)a2[1];
  v9 = *((char *)a1 + 23);
  if (v9 >= 0)
    v10 = a1;
  else
    v10 = *a1;
  if (v9 >= 0)
    v11 = *((unsigned __int8 *)a1 + 23);
  else
    v11 = (size_t)a1[1];
  if (v11 >= v8)
    v12 = v8;
  else
    v12 = v11;
  v13 = memcmp(v7, v10, v12);
  if (v13)
  {
    if ((v13 & 0x80000000) == 0)
      goto LABEL_18;
LABEL_31:
    v20 = *((char *)a3 + 23);
    if (v20 >= 0)
      v21 = a3;
    else
      v21 = *a3;
    if (v20 >= 0)
      v22 = *((unsigned __int8 *)a3 + 23);
    else
      v22 = (size_t)a3[1];
    if (v8 >= v22)
      v23 = v22;
    else
      v23 = v8;
    v24 = memcmp(v21, v7, v23);
    if (v24)
    {
      if ((v24 & 0x80000000) == 0)
      {
LABEL_42:
        v25 = a1[2];
        v26 = *(__n128 *)a1;
        v27 = a2[2];
        *(_OWORD *)a1 = *(_OWORD *)a2;
        a1[2] = v27;
        *(__n128 *)a2 = v26;
        a2[2] = v25;
        v28 = *((char *)a3 + 23);
        if (v28 >= 0)
          v29 = a3;
        else
          v29 = *a3;
        if (v28 >= 0)
          v30 = *((unsigned __int8 *)a3 + 23);
        else
          v30 = (size_t)a3[1];
        v31 = *((char *)a2 + 23);
        if (v31 >= 0)
          v32 = a2;
        else
          v32 = *a2;
        if (v31 >= 0)
          v33 = *((unsigned __int8 *)a2 + 23);
        else
          v33 = (size_t)a2[1];
        if (v33 >= v30)
          v34 = v30;
        else
          v34 = v33;
        v35 = memcmp(v29, v32, v34);
        if (v35)
        {
          if ((v35 & 0x80000000) == 0)
            return result;
        }
        else if (v30 >= v33)
        {
          return result;
        }
        v47 = a2[2];
        result = *(__n128 *)a2;
        v49 = a3[2];
        *(_OWORD *)a2 = *(_OWORD *)a3;
        a2[2] = v49;
        goto LABEL_83;
      }
    }
    else if (v22 >= v8)
    {
      goto LABEL_42;
    }
    v47 = a1[2];
    result = *(__n128 *)a1;
    v48 = a3[2];
    *(_OWORD *)a1 = *(_OWORD *)a3;
    a1[2] = v48;
LABEL_83:
    *(__n128 *)a3 = result;
    a3[2] = v47;
    return result;
  }
  if (v8 < v11)
    goto LABEL_31;
LABEL_18:
  v14 = *((char *)a3 + 23);
  if (v14 >= 0)
    v15 = a3;
  else
    v15 = *a3;
  if (v14 >= 0)
    v16 = *((unsigned __int8 *)a3 + 23);
  else
    v16 = (size_t)a3[1];
  if (v8 >= v16)
    v17 = v16;
  else
    v17 = v8;
  v18 = memcmp(v15, v7, v17);
  if (v18)
  {
    if ((v18 & 0x80000000) == 0)
      return result;
  }
  else if (v16 >= v8)
  {
    return result;
  }
  v36 = a2[2];
  v37 = *(_OWORD *)a2;
  v38 = a3[2];
  *(_OWORD *)a2 = *(_OWORD *)a3;
  a2[2] = v38;
  *(_OWORD *)a3 = v37;
  a3[2] = v36;
  v39 = *((char *)a2 + 23);
  if (v39 >= 0)
    v40 = a2;
  else
    v40 = *a2;
  if (v39 >= 0)
    v41 = *((unsigned __int8 *)a2 + 23);
  else
    v41 = (size_t)a2[1];
  v42 = *((char *)a1 + 23);
  if (v42 >= 0)
    v43 = a1;
  else
    v43 = *a1;
  if (v42 >= 0)
    v44 = *((unsigned __int8 *)a1 + 23);
  else
    v44 = (size_t)a1[1];
  if (v44 >= v41)
    v45 = v41;
  else
    v45 = v44;
  v46 = memcmp(v40, v43, v45);
  if (v46)
  {
    if ((v46 & 0x80000000) == 0)
      return result;
  }
  else if (v41 >= v44)
  {
    return result;
  }
  v50 = a1[2];
  result = *(__n128 *)a1;
  v51 = a2[2];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = v51;
  *(__n128 *)a2 = result;
  a2[2] = v50;
  return result;
}

__n128 sub_19C39CA20(uint64_t a1, __int128 *a2, __int128 *a3, const void **a4)
{
  int v8;
  const void *v9;
  size_t v10;
  int v11;
  const void *v12;
  size_t v13;
  size_t v14;
  int v15;
  __n128 result;
  const void *v17;
  __int128 v18;
  const void *v19;
  int v20;
  const void *v21;
  size_t v22;
  int v23;
  const void *v24;
  size_t v25;
  size_t v26;
  int v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  int v31;
  const void *v32;
  size_t v33;
  int v34;
  const void *v35;
  size_t v36;
  size_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;

  sub_19C39C7E0((const void **)a1, (const void **)a2, (const void **)a3);
  v8 = *((char *)a4 + 23);
  if (v8 >= 0)
    v9 = a4;
  else
    v9 = *a4;
  if (v8 >= 0)
    v10 = *((unsigned __int8 *)a4 + 23);
  else
    v10 = (size_t)a4[1];
  v11 = *((char *)a3 + 23);
  if (v11 >= 0)
    v12 = a3;
  else
    v12 = *(const void **)a3;
  if (v11 >= 0)
    v13 = *((unsigned __int8 *)a3 + 23);
  else
    v13 = *((_QWORD *)a3 + 1);
  if (v13 >= v10)
    v14 = v10;
  else
    v14 = v13;
  v15 = memcmp(v9, v12, v14);
  if (v15)
  {
    if ((v15 & 0x80000000) == 0)
      return result;
  }
  else if (v10 >= v13)
  {
    return result;
  }
  v17 = (const void *)*((_QWORD *)a3 + 2);
  v18 = *a3;
  v19 = a4[2];
  *a3 = *(_OWORD *)a4;
  *((_QWORD *)a3 + 2) = v19;
  *(_OWORD *)a4 = v18;
  a4[2] = v17;
  v20 = *((char *)a3 + 23);
  if (v20 >= 0)
    v21 = a3;
  else
    v21 = *(const void **)a3;
  if (v20 >= 0)
    v22 = *((unsigned __int8 *)a3 + 23);
  else
    v22 = *((_QWORD *)a3 + 1);
  v23 = *((char *)a2 + 23);
  if (v23 >= 0)
    v24 = a2;
  else
    v24 = *(const void **)a2;
  if (v23 >= 0)
    v25 = *((unsigned __int8 *)a2 + 23);
  else
    v25 = *((_QWORD *)a2 + 1);
  if (v25 >= v22)
    v26 = v22;
  else
    v26 = v25;
  v27 = memcmp(v21, v24, v26);
  if (v27)
  {
    if ((v27 & 0x80000000) == 0)
      return result;
  }
  else if (v22 >= v25)
  {
    return result;
  }
  v28 = *((_QWORD *)a2 + 2);
  v29 = *a2;
  v30 = *((_QWORD *)a3 + 2);
  *a2 = *a3;
  *((_QWORD *)a2 + 2) = v30;
  *a3 = v29;
  *((_QWORD *)a3 + 2) = v28;
  v31 = *((char *)a2 + 23);
  if (v31 >= 0)
    v32 = a2;
  else
    v32 = *(const void **)a2;
  if (v31 >= 0)
    v33 = *((unsigned __int8 *)a2 + 23);
  else
    v33 = *((_QWORD *)a2 + 1);
  v34 = *(char *)(a1 + 23);
  if (v34 >= 0)
    v35 = (const void *)a1;
  else
    v35 = *(const void **)a1;
  if (v34 >= 0)
    v36 = *(unsigned __int8 *)(a1 + 23);
  else
    v36 = *(_QWORD *)(a1 + 8);
  if (v36 >= v33)
    v37 = v33;
  else
    v37 = v36;
  v38 = memcmp(v32, v35, v37);
  if (v38)
  {
    if ((v38 & 0x80000000) == 0)
      return result;
  }
  else if (v33 >= v36)
  {
    return result;
  }
  v39 = *(_QWORD *)(a1 + 16);
  result = *(__n128 *)a1;
  v40 = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 16) = v40;
  *a2 = (__int128)result;
  *((_QWORD *)a2 + 2) = v39;
  return result;
}

__n128 sub_19C39CBB4(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4, const void **a5)
{
  int v10;
  const void *v11;
  size_t v12;
  int v13;
  __int128 *v14;
  size_t v15;
  size_t v16;
  int v17;
  __n128 result;
  const void *v19;
  __int128 v20;
  const void *v21;
  int v22;
  __int128 *v23;
  size_t v24;
  int v25;
  const void *v26;
  size_t v27;
  size_t v28;
  int v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  int v33;
  const void *v34;
  size_t v35;
  int v36;
  const void *v37;
  size_t v38;
  size_t v39;
  int v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  int v44;
  const void *v45;
  size_t v46;
  int v47;
  const void *v48;
  size_t v49;
  size_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;

  sub_19C39CA20(a1, (__int128 *)a2, (__int128 *)a3, (const void **)a4);
  v10 = *((char *)a5 + 23);
  if (v10 >= 0)
    v11 = a5;
  else
    v11 = *a5;
  if (v10 >= 0)
    v12 = *((unsigned __int8 *)a5 + 23);
  else
    v12 = (size_t)a5[1];
  v13 = *((char *)a4 + 23);
  if (v13 >= 0)
    v14 = a4;
  else
    v14 = *(__int128 **)a4;
  if (v13 >= 0)
    v15 = *((unsigned __int8 *)a4 + 23);
  else
    v15 = *((_QWORD *)a4 + 1);
  if (v15 >= v12)
    v16 = v12;
  else
    v16 = v15;
  v17 = memcmp(v11, v14, v16);
  if (v17)
  {
    if ((v17 & 0x80000000) == 0)
      return result;
  }
  else if (v12 >= v15)
  {
    return result;
  }
  v19 = (const void *)*((_QWORD *)a4 + 2);
  v20 = *a4;
  v21 = a5[2];
  *a4 = *(_OWORD *)a5;
  *((_QWORD *)a4 + 2) = v21;
  *(_OWORD *)a5 = v20;
  a5[2] = v19;
  v22 = *((char *)a4 + 23);
  if (v22 >= 0)
    v23 = a4;
  else
    v23 = *(__int128 **)a4;
  if (v22 >= 0)
    v24 = *((unsigned __int8 *)a4 + 23);
  else
    v24 = *((_QWORD *)a4 + 1);
  v25 = *(char *)(a3 + 23);
  if (v25 >= 0)
    v26 = (const void *)a3;
  else
    v26 = *(const void **)a3;
  if (v25 >= 0)
    v27 = *(unsigned __int8 *)(a3 + 23);
  else
    v27 = *(_QWORD *)(a3 + 8);
  if (v27 >= v24)
    v28 = v24;
  else
    v28 = v27;
  v29 = memcmp(v23, v26, v28);
  if (v29)
  {
    if ((v29 & 0x80000000) == 0)
      return result;
  }
  else if (v24 >= v27)
  {
    return result;
  }
  v30 = *(_QWORD *)(a3 + 16);
  v31 = *(_OWORD *)a3;
  v32 = *((_QWORD *)a4 + 2);
  *(_OWORD *)a3 = *a4;
  *(_QWORD *)(a3 + 16) = v32;
  *a4 = v31;
  *((_QWORD *)a4 + 2) = v30;
  v33 = *(char *)(a3 + 23);
  if (v33 >= 0)
    v34 = (const void *)a3;
  else
    v34 = *(const void **)a3;
  if (v33 >= 0)
    v35 = *(unsigned __int8 *)(a3 + 23);
  else
    v35 = *(_QWORD *)(a3 + 8);
  v36 = *(char *)(a2 + 23);
  if (v36 >= 0)
    v37 = (const void *)a2;
  else
    v37 = *(const void **)a2;
  if (v36 >= 0)
    v38 = *(unsigned __int8 *)(a2 + 23);
  else
    v38 = *(_QWORD *)(a2 + 8);
  if (v38 >= v35)
    v39 = v35;
  else
    v39 = v38;
  v40 = memcmp(v34, v37, v39);
  if (v40)
  {
    if ((v40 & 0x80000000) == 0)
      return result;
  }
  else if (v35 >= v38)
  {
    return result;
  }
  v41 = *(_QWORD *)(a2 + 16);
  v42 = *(_OWORD *)a2;
  v43 = *(_QWORD *)(a3 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_QWORD *)(a2 + 16) = v43;
  *(_OWORD *)a3 = v42;
  *(_QWORD *)(a3 + 16) = v41;
  v44 = *(char *)(a2 + 23);
  if (v44 >= 0)
    v45 = (const void *)a2;
  else
    v45 = *(const void **)a2;
  if (v44 >= 0)
    v46 = *(unsigned __int8 *)(a2 + 23);
  else
    v46 = *(_QWORD *)(a2 + 8);
  v47 = *(char *)(a1 + 23);
  if (v47 >= 0)
    v48 = (const void *)a1;
  else
    v48 = *(const void **)a1;
  if (v47 >= 0)
    v49 = *(unsigned __int8 *)(a1 + 23);
  else
    v49 = *(_QWORD *)(a1 + 8);
  if (v49 >= v46)
    v50 = v46;
  else
    v50 = v49;
  v51 = memcmp(v45, v48, v50);
  if (v51)
  {
    if ((v51 & 0x80000000) == 0)
      return result;
  }
  else if (v46 >= v49)
  {
    return result;
  }
  v52 = *(_QWORD *)(a1 + 16);
  result = *(__n128 *)a1;
  v53 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v53;
  *(__n128 *)a2 = result;
  *(_QWORD *)(a2 + 16) = v52;
  return result;
}

BOOL sub_19C39CDC4(uint64_t a1, const void **a2)
{
  const void **v2;
  unint64_t v4;
  _BOOL8 result;
  const void **v6;
  int v7;
  const void **v8;
  size_t v9;
  int v10;
  const void *v11;
  size_t v12;
  size_t v13;
  int v14;
  const void **v15;
  const void **v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  __int128 v20;
  int v21;
  const void *v22;
  size_t v23;
  int v24;
  const void *v25;
  size_t v26;
  size_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  _OWORD *v31;
  __int128 *v32;
  unint64_t v33;
  int v34;
  const void *v35;
  unint64_t v36;
  size_t v37;
  int v38;
  const void *v39;
  __int128 v40;
  const void *v41;
  const void **v42;
  __int128 v43;
  const void *v44;

  v2 = a2;
  v4 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = a2 - 3;
      v7 = *((char *)a2 - 1);
      if (v7 >= 0)
        v8 = a2 - 3;
      else
        v8 = (const void **)*(a2 - 3);
      if (v7 >= 0)
        v9 = *((unsigned __int8 *)a2 - 1);
      else
        v9 = (size_t)*(a2 - 2);
      v10 = *(char *)(a1 + 23);
      if (v10 >= 0)
        v11 = (const void *)a1;
      else
        v11 = *(const void **)a1;
      if (v10 >= 0)
        v12 = *(unsigned __int8 *)(a1 + 23);
      else
        v12 = *(_QWORD *)(a1 + 8);
      if (v12 >= v9)
        v13 = v9;
      else
        v13 = v12;
      v14 = memcmp(v8, v11, v13);
      if (v14)
      {
        if ((v14 & 0x80000000) == 0)
          return 1;
      }
      else if (v9 >= v12)
      {
        return 1;
      }
      v39 = *(const void **)(a1 + 16);
      v40 = *(_OWORD *)a1;
      v41 = v6[2];
      *(_OWORD *)a1 = *(_OWORD *)v6;
      *(_QWORD *)(a1 + 16) = v41;
      *(_OWORD *)v6 = v40;
      v6[2] = v39;
      return 1;
    case 3uLL:
      sub_19C39C7E0((const void **)a1, (const void **)(a1 + 24), a2 - 3);
      return 1;
    case 4uLL:
      sub_19C39CA20(a1, (__int128 *)(a1 + 24), (__int128 *)(a1 + 48), a2 - 3);
      return 1;
    case 5uLL:
      sub_19C39CBB4(a1, a1 + 24, a1 + 48, (__int128 *)(a1 + 72), a2 - 3);
      return 1;
    default:
      v15 = (const void **)(a1 + 48);
      sub_19C39C7E0((const void **)a1, (const void **)(a1 + 24), (const void **)(a1 + 48));
      v16 = (const void **)(a1 + 72);
      if ((const void **)(a1 + 72) == v2)
        return 1;
      v17 = 0;
      v18 = 0;
      v42 = v2;
      break;
  }
  while (2)
  {
    v21 = *((char *)v16 + 23);
    if (v21 >= 0)
      v22 = v16;
    else
      v22 = *v16;
    if (v21 >= 0)
      v23 = *((unsigned __int8 *)v16 + 23);
    else
      v23 = (size_t)v16[1];
    v24 = *((char *)v15 + 23);
    if (v24 >= 0)
      v25 = v15;
    else
      v25 = *v15;
    if (v24 >= 0)
      v26 = *((unsigned __int8 *)v15 + 23);
    else
      v26 = (size_t)v15[1];
    if (v26 >= v23)
      v27 = v23;
    else
      v27 = v26;
    v28 = memcmp(v22, v25, v27);
    if (v28)
    {
      if ((v28 & 0x80000000) == 0)
        goto LABEL_25;
    }
    else if (v23 >= v26)
    {
      goto LABEL_25;
    }
    v43 = *(_OWORD *)v16;
    v44 = v16[2];
    *(_OWORD *)v16 = *(_OWORD *)v15;
    v16[2] = v15[2];
    *((_BYTE *)v15 + 23) = 0;
    *(_BYTE *)v15 = 0;
    v19 = a1;
    if (v15 == (const void **)a1)
      goto LABEL_24;
    v29 = v17;
    while (1)
    {
      v30 = a1 + v29;
      v31 = (_OWORD *)(a1 + v29 + 24);
      v32 = SHIBYTE(v44) >= 0 ? &v43 : (__int128 *)v43;
      v33 = SHIBYTE(v44) >= 0 ? HIBYTE(v44) : *((_QWORD *)&v43 + 1);
      v34 = *(char *)(v30 + 47);
      v35 = v34 >= 0 ? (const void *)(a1 + v29 + 24) : *(const void **)(a1 + v29 + 24);
      v36 = v34 >= 0 ? *(unsigned __int8 *)(v30 + 47) : *(_QWORD *)(v30 + 32);
      v37 = v36 >= v33 ? v33 : v36;
      v38 = memcmp(v32, v35, v37);
      if (!v38)
        break;
      if ((v38 & 0x80000000) == 0)
      {
        v19 = a1 + v29 + 48;
        goto LABEL_23;
      }
LABEL_48:
      v15 -= 3;
      *(_OWORD *)(v30 + 48) = *v31;
      *(_QWORD *)(v30 + 64) = *(_QWORD *)(a1 + v29 + 40);
      *(_BYTE *)(v30 + 47) = 0;
      *(_BYTE *)v31 = 0;
      v29 -= 24;
      if (v29 == -48)
      {
        v19 = a1;
        goto LABEL_23;
      }
    }
    if (v33 < v36)
      goto LABEL_48;
    v19 = (uint64_t)v15;
LABEL_23:
    v2 = v42;
LABEL_24:
    v20 = v43;
    *(_QWORD *)(v19 + 16) = v44;
    *(_OWORD *)v19 = v20;
    if (++v18 == 8)
      return v16 + 3 == v2;
LABEL_25:
    v15 = v16;
    v17 += 24;
    v16 += 3;
    if (v16 != v2)
      continue;
    return 1;
  }
}

uint64_t **sub_19C39D0A8(uint64_t a1)
{
  uint64_t v1;
  const void **v2;
  uint64_t *v3;
  uint64_t **v4;
  uint64_t **result;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = (const void **)(a1 + 40);
  v3 = *(uint64_t **)(a1 + 64);
  v4 = sub_19C314364((uint64_t **)(v1 + 176), v2, (uint64_t)v2);
  ++*((_DWORD *)v4 + 14);
  result = sub_19C314364((uint64_t **)(v1 + 176), v2, (uint64_t)v2);
  result[8] = v3;
  *(_BYTE *)(v1 + 248) = 1;
  return result;
}

_QWORD *sub_19C39D118(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  __int128 v3;

  result = (_QWORD *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
    return sub_19C2B5238(result, *(void **)(a2 + 40), *(_QWORD *)(a2 + 48));
  v3 = *(_OWORD *)(a2 + 40);
  result[2] = *(_QWORD *)(a2 + 56);
  *(_OWORD *)result = v3;
  return result;
}

void sub_19C39D148(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
}

uint64_t sub_19C39D15C(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;

  *(_QWORD *)a1 = &off_1E3D36F98;
  v2 = *(_QWORD **)(a1 + 8);
  v3 = (_QWORD *)(a1 + 16);
  if (v2 != (_QWORD *)(a1 + 16))
  {
    do
    {
      v5 = (_QWORD *)v2[7];
      if (v5)
      {
        v6 = sub_19C39C55C(v5);
        MEMORY[0x1A1AD355C](v6, 0x10E0C40868D66FELL);
      }
      v7 = (_QWORD *)v2[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v2[2];
          v9 = *v8 == (_QWORD)v2;
          v2 = v8;
        }
        while (!v9);
      }
      v2 = v8;
    }
    while (v8 != v3);
  }
  sub_19C2EAC08(*(char **)(a1 + 16));
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = v3;
  if (*(char *)(a1 + 247) < 0)
    operator delete(*(void **)(a1 + 224));
  sub_19C2EAC08(*(char **)(a1 + 208));
  sub_19C2EAC08(*(char **)(a1 + 184));
  sub_19C313888(*(char **)(a1 + 160));
  sub_19C3138D8(a1 + 56);
  sub_19C2EAC08(*(char **)(a1 + 40));
  sub_19C2EAC08(*(char **)(a1 + 16));
  return a1;
}

_QWORD *sub_19C39D250(_QWORD *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  __int128 v8;
  char *v9;
  __int128 *v10;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    if (a3 >= 0xAAAAAAAAAAAAAABLL)
      sub_19C2A18E8();
    v5 = 24 * a3;
    v6 = operator new(24 * a3);
    v7 = 0;
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[v5];
    do
    {
      v9 = &v6[v7];
      v10 = (__int128 *)(a2 + v7);
      if (*(char *)(a2 + v7 + 23) < 0)
      {
        sub_19C2B5238(&v6[v7], *(void **)v10, *((_QWORD *)v10 + 1));
      }
      else
      {
        v8 = *v10;
        *((_QWORD *)v9 + 2) = *((_QWORD *)v10 + 2);
        *(_OWORD *)v9 = v8;
      }
      v7 += 24;
    }
    while (v5 != v7);
    a1[1] = &v6[v7];
  }
  return a1;
}

void sub_19C39D32C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_19C307DCC(&a9);
  _Unwind_Resume(a1);
}

void sub_19C39D378(uint64_t a1)
{
  sub_19C336C2C(a1);
  JUMPOUT(0x1A1AD355CLL);
}

char *sub_19C39D39C@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  if (result[63] < 0)
    return (char *)sub_19C2B5238((_BYTE *)a2, *((void **)result + 5), *((_QWORD *)result + 6));
  *(_OWORD *)a2 = *(_OWORD *)(result + 40);
  *(_QWORD *)(a2 + 16) = *((_QWORD *)result + 7);
  return result;
}

void sub_19C39D3C8(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;

  sub_19C298AC0(&v4, a1, a2);
  *a3 = v4;
}

uint64_t sub_19C39D404(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t **v14;
  uint64_t **v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  BOOL v19;
  uint64_t *v21;
  unint64_t v22;
  void *v23;
  void **v24;
  uint64_t v25;
  NSObject *v26;
  int v27;
  int8x8_t v28;
  uint8x8_t v29;
  unint64_t v30;
  uint64_t **v31;
  uint64_t *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _DWORD *v37;
  uint64_t v38;
  _BOOL8 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  void **v46;
  void **v47;
  void **v48;
  _QWORD *v50;
  uint64_t *v51;
  void *__p[2];
  char v53;
  uint8_t buf[4];
  void **v55;
  __int16 v56;
  void **v57;
  void *v58[2];
  char v59;
  void **v60;
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(*a2 + 8);
  if (v4 == *(_QWORD *)*a2)
    return 0;
  v8 = a1;
  v9 = a1[8];
  v10 = *(_QWORD *)(v9 + 464);
  if (!v10
    || (v11 = sub_19C3BE248(v10, v4 - 32), !(_DWORD)v11)
    || (sub_19C3BE65C(*(std::recursive_mutex **)(v9 + 464), v11) & 1) == 0)
  {
    v13 = v8[8];
    v14 = *(uint64_t ***)(v13 + 184);
    v15 = *(uint64_t ***)(v13 + 192);
    if (v14 != v15)
    {
      v12 = 0;
      v16 = v8 + 11;
      v17 = *a2;
      v18 = v8 + 16;
      while (1)
      {
        sub_19C32BADC(__p, **v14);
        v21 = sub_19C39EE08(v16, (uint64_t)__p);
        if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v21[5] + 48))(v21[5]) & 1) != 0)
        {
          v22 = *((unsigned int *)sub_19C364A20(v18, (uint64_t)__p) + 10);
          v23 = (void *)sub_19C39EE08(v16, (uint64_t)__p)[5];
          v58[0] = &off_1E3D309A8;
          v58[1] = v23;
          v60 = v58;
          sub_19C3168D8(v17, v22, (uint64_t)v58);
          v24 = v60;
          if (v60 == v58)
          {
            v24 = v58;
            v25 = 4;
LABEL_26:
            (*((void (**)(void))*v24 + v25))();
          }
          else if (v60)
          {
            v25 = 5;
            goto LABEL_26;
          }
          v28 = *(int8x8_t *)(v17 + 56);
          if (v28)
          {
            v29 = (uint8x8_t)vcnt_s8(v28);
            v29.i16[0] = vaddlv_u8(v29);
            if (v29.u32[0] > 1uLL)
            {
              v30 = v22;
              if (*(_QWORD *)&v28 <= v22)
                v30 = v22 % *(_QWORD *)&v28;
            }
            else
            {
              v30 = (v28.i32[0] - 1) & v22;
            }
            v31 = *(uint64_t ***)(*(_QWORD *)(v17 + 48) + 8 * v30);
            if (v31)
            {
              v32 = *v31;
              if (v32)
              {
                if (v29.u32[0] < 2uLL)
                {
                  v33 = *(_QWORD *)&v28 - 1;
                  while (1)
                  {
                    v35 = v32[1];
                    if (v35 == v22)
                    {
                      if (*((_DWORD *)v32 + 4) == (_DWORD)v22)
                        goto LABEL_68;
                    }
                    else if ((v35 & v33) != v30)
                    {
                      goto LABEL_47;
                    }
                    v32 = (uint64_t *)*v32;
                    if (!v32)
                      goto LABEL_47;
                  }
                }
                do
                {
                  v34 = v32[1];
                  if (v34 == v22)
                  {
                    if (*((_DWORD *)v32 + 4) == (_DWORD)v22)
                    {
LABEL_68:
                      v37 = (_DWORD *)v32[3];
                      v36 = (v32[4] - (uint64_t)v37) >> 2;
                      if (a3 > 4)
LABEL_80:
                        __assert_rtn("convertMatchType", "TokenIDLanguageModel.cpp", 110, "false && \"Invalid match type\"");
LABEL_48:
                      v38 = 4;
                      switch((int)a3)
                      {
                        case 0:
                          v38 = 0;
                          v39 = *v37 == 1;
                          if (*v37 == 1)
                            ++v37;
                          v40 = v36 - v39;
                          v41 = v36 - v39 - 1;
                          if (v37[v41] == 2)
                            v36 = v41;
                          else
                            v36 = v40;
                          goto LABEL_63;
                        case 1:
                          v42 = *v37 == 1;
                          if (*v37 == 1)
                            ++v37;
                          v36 -= v42;
                          v38 = 1;
                          goto LABEL_63;
                        case 2:
                          if (v37[v36 - 1] == 2)
                            --v36;
                          v38 = 2;
                          goto LABEL_63;
                        case 3:
                          goto LABEL_63;
                        case 4:
                          if (v37[v36 - 1] == 2)
                            --v36;
                          v38 = 3;
LABEL_63:
                          v12 = sub_19C32FB3C(v8[8], (uint64_t)v37, v36, v38, 0, 0, a4, *v14);
                          if ((_DWORD)v12)
                            v27 = 2;
                          else
                            v27 = 0;
                          if (v53 < 0)
                            goto LABEL_8;
                          goto LABEL_9;
                        default:
                          goto LABEL_80;
                      }
                    }
                  }
                  else
                  {
                    if (v34 >= *(_QWORD *)&v28)
                      v34 %= *(_QWORD *)&v28;
                    if (v34 != v30)
                      break;
                  }
                  v32 = (uint64_t *)*v32;
                }
                while (v32);
              }
            }
          }
LABEL_47:
          v36 = 0;
          v37 = 0;
          goto LABEL_48;
        }
        if (qword_1EE41C3E0 != -1)
          dispatch_once(&qword_1EE41C3E0, &unk_1E3D3AD70);
        v26 = qword_1EE41C3D8;
        if (os_log_type_enabled((os_log_t)qword_1EE41C3D8, OS_LOG_TYPE_ERROR))
        {
          v50 = v18;
          v51 = v8;
          v43 = a3;
          v44 = a4;
          v45 = v53;
          v46 = (void **)__p[0];
          sub_19C306C68(v58, (__int128 **)v17);
          v47 = __p;
          if (v45 < 0)
            v47 = v46;
          v48 = v58;
          if (v59 < 0)
            v48 = (void **)v58[0];
          *(_DWORD *)buf = 136315394;
          v55 = v47;
          v56 = 2080;
          v57 = v48;
          _os_log_error_impl(&dword_19C291000, v26, OS_LOG_TYPE_ERROR, "BlocklistStatus check skipped for locale: %s - Unable to convert blocklist tokens ('%s')", buf, 0x16u);
          if (v59 < 0)
            operator delete(v58[0]);
          v27 = 3;
          a4 = v44;
          a3 = v43;
          v18 = v50;
          v8 = v51;
          if ((v53 & 0x80000000) == 0)
            goto LABEL_9;
        }
        else
        {
          v27 = 3;
          if ((v53 & 0x80000000) == 0)
            goto LABEL_9;
        }
LABEL_8:
        operator delete(__p[0]);
LABEL_9:
        v19 = v27 == 3 || v27 == 0;
        v14 += 2;
        if (!v19 || v14 == v15)
          return v12;
      }
    }
    return 0;
  }
  return 1;
}

void sub_19C39D8A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C39D920(uint64_t *a1, uint64_t a2, uint64_t *a3, int a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t **v16;
  uint64_t **v17;
  uint64_t *v18;
  _QWORD *v19;
  BOOL v20;
  uint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t (***v25)();
  uint64_t v26;
  NSObject *v27;
  int v28;
  unint64_t v29;
  uint8x8_t v30;
  unint64_t v31;
  uint64_t **v32;
  uint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  int v39;
  int v40;
  char *v41;
  char *v42;
  char *v43;
  int64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  char *v50;
  unint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  __int128 v56;
  int v57;
  uint64_t v58;
  int v59;
  void **v60;
  void **v61;
  uint64_t (***v62)();
  uint64_t v63;
  uint64_t **v64;
  uint64_t **v65;
  _QWORD *v66;
  BOOL v67;
  uint64_t *v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t (***v72)();
  uint64_t v73;
  NSObject *v74;
  int v75;
  unint64_t v76;
  uint8x8_t v77;
  unint64_t v78;
  uint64_t **v79;
  uint64_t *v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t *v85;
  int v86;
  int v87;
  char *v88;
  char *v89;
  char *v90;
  int64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  char *v96;
  char *v97;
  unint64_t v98;
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  __int128 v103;
  int v104;
  int v105;
  void **v106;
  void **v107;
  uint64_t (***v108)();
  char *v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  uint64_t *v114;
  void *__p[2];
  char v116;
  void *v117;
  char *v118;
  char *v119;
  uint8_t buf[4];
  void **v121;
  __int16 v122;
  uint64_t (***v123)();
  uint64_t (**v124)();
  uint64_t v125;
  char v126;
  void **v127;
  uint64_t v128;

  v128 = *MEMORY[0x1E0C80C00];
  if (!*(_DWORD *)(a2 + 24))
  {
    v7 = *(_QWORD *)(*a3 + 8);
    if (v7 != *(_QWORD *)*a3)
    {
      v9 = a2;
      v11 = a1[8];
      v12 = *(_QWORD *)(v11 + 464);
      if (v12)
      {
        v13 = sub_19C3BE248(v12, v7 - 32);
        if ((_DWORD)v13)
        {
          if ((sub_19C3BE65C(*(std::recursive_mutex **)(v11 + 464), v13) & 1) != 0)
            return 1;
        }
      }
      v14 = *a3;
      v117 = 0;
      v118 = 0;
      v119 = 0;
      v15 = a1[8];
      v17 = *(uint64_t ***)(v15 + 184);
      v16 = *(uint64_t ***)(v15 + 192);
      if (v17 == v16)
      {
        v4 = 0;
        goto LABEL_167;
      }
      v4 = 0;
      v18 = a1;
      v19 = a1 + 11;
      v114 = v18;
      v110 = v18 + 16;
      v113 = a4;
      v111 = v14;
      v112 = v9;
      while (1)
      {
        sub_19C32BADC(__p, **v17);
        v22 = sub_19C39EE08(v19, (uint64_t)__p);
        if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v22[5] + 48))(v22[5]) & 1) == 0)
        {
          if (qword_1EE41C3E0 != -1)
            dispatch_once(&qword_1EE41C3E0, &unk_1E3D3AD70);
          v27 = qword_1EE41C3D8;
          if (os_log_type_enabled((os_log_t)qword_1EE41C3D8, OS_LOG_TYPE_ERROR))
          {
            v59 = v116;
            v60 = (void **)__p[0];
            sub_19C306C68(&v124, (__int128 **)v14);
            v61 = __p;
            if (v59 < 0)
              v61 = v60;
            v62 = &v124;
            if (v126 < 0)
              v62 = (uint64_t (***)())v124;
            *(_DWORD *)buf = 136315394;
            v121 = v61;
            v122 = 2080;
            v123 = v62;
            _os_log_error_impl(&dword_19C291000, v27, OS_LOG_TYPE_ERROR, "BlocklistStatus check skipped for locale: %s - Unable to convert blocklist tokens ('%s')", buf, 0x16u);
            if (v126 < 0)
              operator delete(v124);
          }
          v28 = 3;
          if (v116 < 0)
            goto LABEL_11;
          goto LABEL_12;
        }
        v23 = *((unsigned int *)sub_19C364A20(v110, (uint64_t)__p) + 10);
        v24 = sub_19C39EE08(v19, (uint64_t)__p)[5];
        v124 = &off_1E3D309A8;
        v125 = v24;
        v127 = (void **)&v124;
        sub_19C3168D8(v14, v23, (uint64_t)&v124);
        v25 = (uint64_t (***)())v127;
        if (v127 == (void **)&v124)
        {
          v25 = &v124;
          v26 = 4;
        }
        else
        {
          if (!v127)
            goto LABEL_30;
          v26 = 5;
        }
        (*v25)[v26]();
LABEL_30:
        v29 = *(_QWORD *)(v14 + 56);
        if (!v29)
          goto LABEL_51;
        v30 = (uint8x8_t)vcnt_s8((int8x8_t)v29);
        v30.i16[0] = vaddlv_u8(v30);
        if (v30.u32[0] > 1uLL)
        {
          v31 = v23;
          if (v29 <= v23)
            v31 = v23 % v29;
        }
        else
        {
          v31 = ((_DWORD)v29 - 1) & v23;
        }
        v32 = *(uint64_t ***)(*(_QWORD *)(v14 + 48) + 8 * v31);
        if (!v32 || (v33 = *v32) == 0)
        {
LABEL_50:
          v29 = 0;
LABEL_51:
          v37 = 0;
          goto LABEL_52;
        }
        if (v30.u32[0] < 2uLL)
        {
          v34 = v29 - 1;
          while (1)
          {
            v36 = v33[1];
            if (v36 == v23)
            {
              if (*((_DWORD *)v33 + 4) == (_DWORD)v23)
                goto LABEL_80;
            }
            else if ((v36 & v34) != v31)
            {
              goto LABEL_50;
            }
            v33 = (uint64_t *)*v33;
            if (!v33)
              goto LABEL_50;
          }
        }
        while (1)
        {
          v35 = v33[1];
          if (v35 == v23)
            break;
          if (v35 >= v29)
            v35 %= v29;
          if (v35 != v31)
            goto LABEL_50;
LABEL_40:
          v33 = (uint64_t *)*v33;
          if (!v33)
            goto LABEL_50;
        }
        if (*((_DWORD *)v33 + 4) != (_DWORD)v23)
          goto LABEL_40;
LABEL_80:
        v37 = (char *)v33[3];
        v29 = (v33[4] - (uint64_t)v37) >> 2;
LABEL_52:
        if (*(_DWORD *)&v37[4 * v29 - 4] == 2)
          --v29;
        sub_19C39F614(&v117, v37, &v37[4 * v29], (uint64_t)(4 * v29) >> 2);
        v38 = sub_19C39EE08(v19, (uint64_t)__p);
        v39 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v38[5] + 16))(v38[5], v9);
        v40 = v39;
        v41 = v118;
        if (v118 >= v119)
        {
          v43 = (char *)v117;
          v44 = v118 - (_BYTE *)v117;
          v45 = (v118 - (_BYTE *)v117) >> 2;
          v46 = v45 + 1;
          if ((unint64_t)(v45 + 1) >> 62)
            sub_19C2A18E8();
          v47 = v119 - (_BYTE *)v117;
          if ((v119 - (_BYTE *)v117) >> 1 > v46)
            v46 = v47 >> 1;
          if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFFCLL)
            v48 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v48 = v46;
          if (v48)
          {
            if (v48 >> 62)
              sub_19C2A143C();
            v49 = (char *)operator new(4 * v48);
          }
          else
          {
            v49 = 0;
          }
          v50 = &v49[4 * v45];
          *(_DWORD *)v50 = v40;
          v42 = v50 + 4;
          if (v41 != v43)
          {
            v51 = v41 - 4 - v43;
            if (v51 < 0x2C)
              goto LABEL_177;
            if ((unint64_t)(v41 - &v49[v44]) < 0x20)
              goto LABEL_177;
            v52 = (v51 >> 2) + 1;
            v53 = &v49[4 * v45 - 16];
            v54 = v41 - 16;
            v55 = v52 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v56 = *(_OWORD *)v54;
              *((_OWORD *)v53 - 1) = *((_OWORD *)v54 - 1);
              *(_OWORD *)v53 = v56;
              v53 -= 32;
              v54 -= 32;
              v55 -= 8;
            }
            while (v55);
            v50 -= 4 * (v52 & 0x7FFFFFFFFFFFFFF8);
            v41 -= 4 * (v52 & 0x7FFFFFFFFFFFFFF8);
            if (v52 != (v52 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_177:
              do
              {
                v57 = *((_DWORD *)v41 - 1);
                v41 -= 4;
                *((_DWORD *)v50 - 1) = v57;
                v50 -= 4;
              }
              while (v41 != v43);
            }
          }
          v117 = v50;
          v118 = v42;
          v119 = &v49[4 * v48];
          if (v43)
            operator delete(v43);
        }
        else
        {
          *(_DWORD *)v118 = v39;
          v42 = v41 + 4;
        }
        v14 = v111;
        v118 = v42;
        v58 = sub_19C32FB3C(v114[8], (uint64_t)v117, (v42 - (_BYTE *)v117) >> 2, 2, 0, 0, v113, *v17);
        v9 = v112;
        v4 = v58;
        if ((_DWORD)v58)
          v28 = 2;
        else
          v28 = 0;
        if (v116 < 0)
LABEL_11:
          operator delete(__p[0]);
LABEL_12:
        v20 = v28 == 3 || v28 == 0;
        v17 += 2;
        if (!v20 || v17 == v16)
        {
          if ((_DWORD)v4 != 1)
          {
            v63 = v114[8];
            v64 = *(uint64_t ***)(v63 + 184);
            v65 = *(uint64_t ***)(v63 + 192);
            if (v64 != v65)
            {
              v4 = 0;
              v66 = v114 + 11;
              while (1)
              {
                sub_19C32BADC(__p, **v64);
                v69 = sub_19C39EE08(v66, (uint64_t)__p);
                if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v69[5] + 48))(v69[5]) & 1) == 0)
                {
                  if (qword_1EE41C3E0 != -1)
                    dispatch_once(&qword_1EE41C3E0, &unk_1E3D3AD70);
                  v74 = qword_1EE41C3D8;
                  if (os_log_type_enabled((os_log_t)qword_1EE41C3D8, OS_LOG_TYPE_ERROR))
                  {
                    v105 = v116;
                    v106 = (void **)__p[0];
                    sub_19C306C68(&v124, (__int128 **)v14);
                    v107 = __p;
                    if (v105 < 0)
                      v107 = v106;
                    v108 = &v124;
                    if (v126 < 0)
                      v108 = (uint64_t (***)())v124;
                    *(_DWORD *)buf = 136315394;
                    v121 = v107;
                    v122 = 2080;
                    v123 = v108;
                    _os_log_error_impl(&dword_19C291000, v74, OS_LOG_TYPE_ERROR, "BlocklistStatus check skipped for locale: %s - Unable to convert blocklist tokens ('%s')", buf, 0x16u);
                    if (v126 < 0)
                      operator delete(v124);
                  }
                  v75 = 5;
                  if (v116 < 0)
                    goto LABEL_90;
                  goto LABEL_91;
                }
                v70 = *((unsigned int *)sub_19C364A20(v114 + 16, (uint64_t)__p) + 10);
                v71 = sub_19C39EE08(v66, (uint64_t)__p)[5];
                v124 = &off_1E3D309A8;
                v125 = v71;
                v127 = (void **)&v124;
                sub_19C3168D8(v14, v70, (uint64_t)&v124);
                v72 = (uint64_t (***)())v127;
                if (v127 == (void **)&v124)
                  break;
                if (v127)
                {
                  v73 = 5;
LABEL_108:
                  (*v72)[v73]();
                }
                v76 = *(_QWORD *)(v14 + 56);
                if (!v76)
                  goto LABEL_130;
                v77 = (uint8x8_t)vcnt_s8((int8x8_t)v76);
                v77.i16[0] = vaddlv_u8(v77);
                if (v77.u32[0] > 1uLL)
                {
                  v78 = v70;
                  if (v76 <= v70)
                    v78 = v70 % v76;
                }
                else
                {
                  v78 = ((_DWORD)v76 - 1) & v70;
                }
                v79 = *(uint64_t ***)(*(_QWORD *)(v14 + 48) + 8 * v78);
                if (!v79 || (v80 = *v79) == 0)
                {
LABEL_129:
                  v76 = 0;
LABEL_130:
                  v84 = 0;
                  goto LABEL_131;
                }
                if (v77.u32[0] < 2uLL)
                {
                  v81 = v76 - 1;
                  while (1)
                  {
                    v83 = v80[1];
                    if (v83 == v70)
                    {
                      if (*((_DWORD *)v80 + 4) == (_DWORD)v70)
                        goto LABEL_159;
                    }
                    else if ((v83 & v81) != v78)
                    {
                      goto LABEL_129;
                    }
                    v80 = (uint64_t *)*v80;
                    if (!v80)
                      goto LABEL_129;
                  }
                }
                while (1)
                {
                  v82 = v80[1];
                  if (v82 == v70)
                    break;
                  if (v82 >= v76)
                    v82 %= v76;
                  if (v82 != v78)
                    goto LABEL_129;
LABEL_119:
                  v80 = (uint64_t *)*v80;
                  if (!v80)
                    goto LABEL_129;
                }
                if (*((_DWORD *)v80 + 4) != (_DWORD)v70)
                  goto LABEL_119;
LABEL_159:
                v84 = (char *)v80[3];
                v76 = (v80[4] - (uint64_t)v84) >> 2;
LABEL_131:
                if (*(_DWORD *)&v84[4 * v76 - 4] == 2)
                  --v76;
                sub_19C39F614(&v117, v84, &v84[4 * v76], (uint64_t)(4 * v76) >> 2);
                v85 = sub_19C39EE08(v66, (uint64_t)__p);
                v86 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v85[5] + 16))(v85[5], v9);
                v87 = v86;
                v88 = v118;
                if (v118 >= v119)
                {
                  v90 = (char *)v117;
                  v91 = v118 - (_BYTE *)v117;
                  v92 = (v118 - (_BYTE *)v117) >> 2;
                  v93 = v92 + 1;
                  if ((unint64_t)(v92 + 1) >> 62)
                    sub_19C2A18E8();
                  v94 = v119 - (_BYTE *)v117;
                  if ((v119 - (_BYTE *)v117) >> 1 > v93)
                    v93 = v94 >> 1;
                  if ((unint64_t)v94 >= 0x7FFFFFFFFFFFFFFCLL)
                    v95 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v95 = v93;
                  if (v95)
                  {
                    if (v95 >> 62)
                      sub_19C2A143C();
                    v96 = (char *)operator new(4 * v95);
                  }
                  else
                  {
                    v96 = 0;
                  }
                  v97 = &v96[4 * v92];
                  *(_DWORD *)v97 = v87;
                  v89 = v97 + 4;
                  if (v88 != v90)
                  {
                    v98 = v88 - 4 - v90;
                    if (v98 < 0x2C)
                      goto LABEL_178;
                    if ((unint64_t)(v88 - &v96[v91]) < 0x20)
                      goto LABEL_178;
                    v99 = (v98 >> 2) + 1;
                    v100 = &v96[4 * v92 - 16];
                    v101 = v88 - 16;
                    v102 = v99 & 0x7FFFFFFFFFFFFFF8;
                    do
                    {
                      v103 = *(_OWORD *)v101;
                      *((_OWORD *)v100 - 1) = *((_OWORD *)v101 - 1);
                      *(_OWORD *)v100 = v103;
                      v100 -= 32;
                      v101 -= 32;
                      v102 -= 8;
                    }
                    while (v102);
                    v97 -= 4 * (v99 & 0x7FFFFFFFFFFFFFF8);
                    v88 -= 4 * (v99 & 0x7FFFFFFFFFFFFFF8);
                    if (v99 != (v99 & 0x7FFFFFFFFFFFFFF8))
                    {
LABEL_178:
                      do
                      {
                        v104 = *((_DWORD *)v88 - 1);
                        v88 -= 4;
                        *((_DWORD *)v97 - 1) = v104;
                        v97 -= 4;
                      }
                      while (v88 != v90);
                    }
                  }
                  v117 = v97;
                  v118 = v89;
                  v119 = &v96[4 * v95];
                  if (v90)
                    operator delete(v90);
                }
                else
                {
                  *(_DWORD *)v118 = v86;
                  v89 = v88 + 4;
                }
                v9 = v112;
                v118 = v89;
                v14 = v111;
                v4 = sub_19C32FB3C(v114[8], (uint64_t)v117, (v89 - (_BYTE *)v117) >> 2, 3, 0, 4, v113, *v64);
                if ((_DWORD)v4)
                  v75 = 4;
                else
                  v75 = 0;
                if (v116 < 0)
LABEL_90:
                  operator delete(__p[0]);
LABEL_91:
                v67 = v75 == 5 || v75 == 0;
                v64 += 2;
                if (!v67 || v64 == v65)
                  goto LABEL_167;
              }
              v72 = &v124;
              v73 = 4;
              goto LABEL_108;
            }
            v4 = 0;
            v109 = (char *)v117;
            if (!v117)
              return v4;
LABEL_168:
            v118 = v109;
            operator delete(v109);
            return v4;
          }
LABEL_167:
          v109 = (char *)v117;
          if (!v117)
            return v4;
          goto LABEL_168;
        }
      }
    }
  }
  return 0;
}

void sub_19C39E318(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24)
{
  void *v25;

  if (a22 < 0)
  {
    operator delete(__p);
    v25 = a23;
    if (a23)
      goto LABEL_3;
  }
  else
  {
    v25 = a23;
    if (a23)
    {
LABEL_3:
      operator delete(v25);
      _Unwind_Resume(a1);
    }
  }
  _Unwind_Resume(a1);
}

void sub_19C39E3C8(_QWORD *a1, const void *a2)
{
  sub_19C323E94(a1[8], a2);
  sub_19C39EBA8(a1);
}

uint64_t sub_19C39E3F0(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 64) + 176);
}

void sub_19C39E3FC(uint64_t a1, const void *a2, const void **a3)
{
  uint64_t v4;
  unint64_t v5;

  v4 = *(_QWORD *)(a1 + 64);
  v5 = sub_19C39E96C(a3);
  sub_19C331338(v4, a2, v5);
}

void sub_19C39E430(uint64_t a1, const void **a2)
{
  _QWORD *v2;
  unint64_t v3;

  v2 = *(_QWORD **)(a1 + 64);
  v3 = sub_19C39E96C(a2);
  sub_19C331890(v2, v3);
}

void sub_19C39E45C(uint64_t a1, uint64_t *cf)
{
  if (!cf)
    __assert_rtn("addVocabulary", "TokenIDLanguageModel.cpp", 317, "vocabulary");
  CFRetain(cf);
  sub_19C331178(*(_QWORD **)(a1 + 64), cf[3]);
}

void sub_19C39E4B0(uint64_t a1, _QWORD *cf)
{
  _QWORD *v3;
  uint64_t v4;
  char *v5;
  char *v6;
  int64_t v7;
  uint64_t v8;

  if (!cf)
    __assert_rtn("removeVocabulary", "TokenIDLanguageModel.cpp", 324, "vocabulary");
  v3 = *(_QWORD **)(a1 + 64);
  v4 = cf[3];
  v6 = (char *)v3[3];
  v5 = (char *)v3[4];
  if (v6 != v5)
  {
    while (*(_QWORD *)v6 != v4)
    {
      v6 += 8;
      if (v6 == v5)
      {
        v6 = (char *)v3[4];
        break;
      }
    }
  }
  if (v6 != v5)
  {
    v7 = v5 - (v6 + 8);
    if (v5 != v6 + 8)
      memmove(v6, v6 + 8, v5 - (v6 + 8));
    v3[4] = &v6[v7];
    v8 = v3[31];
    if (v8)
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(v8 + 16) + 16) + 104))(*(_QWORD *)(*(_QWORD *)(v8 + 16) + 16), v4);
  }
  CFRelease(cf);
}

void sub_19C39E57C(uint64_t a1)
{
  uint64_t *v1;
  std::recursive_mutex *v2;

  v1 = *(uint64_t **)(a1 + 64);
  if (*(_BYTE *)(v1[29] + 192))
  {
    sub_19C343528(v1[6]);
    v2 = (std::recursive_mutex *)v1[58];
    if (v2)
    {
      std::recursive_mutex::lock(v2);
      sub_19C343528(v2[2].__m_.__sig);
      std::recursive_mutex::unlock(v2);
    }
  }
}

void sub_19C39E5D4(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19C39E5E8(uint64_t a1)
{
  sub_19C330C40(*(_QWORD *)(a1 + 64), 0);
}

void sub_19C39E5F4(uint64_t a1)
{
  sub_19C29D188(*(_QWORD **)(a1 + 64));
}

void sub_19C39E5FC(uint64_t a1)
{
  sub_19C3319EC(*(_QWORD **)(a1 + 64));
}

uint64_t sub_19C39E604(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(result + 64) + 248);
  if (v1)
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v1 + 16) + 16) + 72))(*(_QWORD *)(*(_QWORD *)(v1 + 16) + 16));
  return result;
}

uint64_t sub_19C39E628(uint64_t a1)
{
  return a1 + 168;
}

void sub_19C39E630(uint64_t a1@<X0>, int a2@<W1>, CFDictionaryRef *a3@<X8>)
{
  uint64_t v5;
  CFDictionaryRef **v6;
  CFDictionaryRef **v7;
  const __CFAllocator *v8;
  CFDictionaryRef Copy;
  CFDictionaryRef **v10;
  CFDictionaryRef **v11;
  void *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  void *__p;
  CFDictionaryRef **v17;
  CFMutableArrayRef theArray;

  v5 = *(_QWORD *)(a1 + 64);
  theArray = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  sub_19C348B90((uint64_t)&__p, **(CFTypeRef **)(v5 + 416), a2);
  v6 = (CFDictionaryRef **)__p;
  v7 = v17;
  v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  while (v6 != v7)
  {
    Copy = CFDictionaryCreateCopy(v8, **v6);
    CFArrayAppendValue(theArray, Copy);
    if (Copy)
      CFRelease(Copy);
    v6 += 2;
  }
  *a3 = CFDictionaryCreate(v8, (const void **)&kLMLinguisticDataResources, (const void **)&theArray, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v10 = (CFDictionaryRef **)__p;
  if (__p)
  {
    v11 = v17;
    v12 = __p;
    if (v17 != __p)
    {
      do
      {
        v13 = (std::__shared_weak_count *)*(v11 - 1);
        if (v13)
        {
          p_shared_owners = (unint64_t *)&v13->__shared_owners_;
          do
            v15 = __ldaxr(p_shared_owners);
          while (__stlxr(v15 - 1, p_shared_owners));
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
          }
        }
        v11 -= 2;
      }
      while (v11 != v10);
      v12 = __p;
    }
    v17 = v10;
    operator delete(v12);
  }
  if (theArray)
    CFRelease(theArray);
}

void sub_19C39E798(void *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, void *);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  sub_19C2F5AA8((void **)va);
  sub_19C3134C4((const void **)va1);
  sub_19C2CDAC8(a1);
}

void sub_19C39E7D8(uint64_t a1@<X0>, CFDictionaryRef *a2@<X8>)
{
  uint64_t v3;
  int v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const __CFAllocator *v8;
  __CFDictionary *Mutable;
  __CFDictionary *v10;
  const void *v11;
  void *v12;
  CFStringRef v13;
  void *__p[2];
  uint64_t v15;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 232);
  v4 = *(unsigned __int8 *)(v3 + 428);
  v5 = (const void *)*MEMORY[0x1E0C9AE50];
  v6 = (const void *)*MEMORY[0x1E0C9AE40];
  if (*(_BYTE *)(v3 + 429))
    v7 = (const void *)*MEMORY[0x1E0C9AE50];
  else
    v7 = (const void *)*MEMORY[0x1E0C9AE40];
  v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v10 = Mutable;
  if (v4)
    v11 = v5;
  else
    v11 = v6;
  CFDictionarySetValue(Mutable, (const void *)kLMLanguageModelSwearWordPolicyEnabledKey, v11);
  CFDictionarySetValue(v10, (const void *)kLMLanguageModelSupportsNormalizedNameTokenKey, v7);
  if (*(char *)(v3 + 455) < 0)
  {
    sub_19C2B5238(__p, *(void **)(v3 + 432), *(_QWORD *)(v3 + 440));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)(v3 + 432);
    v15 = *(_QWORD *)(v3 + 448);
  }
  v12 = (void *)HIBYTE(v15);
  if (v15 < 0)
    v12 = __p[1];
  if (v12)
  {
    v13 = sub_19C2E1370((uint64_t)__p);
    CFDictionarySetValue(v10, (const void *)kLMLanguageModelLegacyGenericNameTokenKey, v13);
    if (v13)
      CFRelease(v13);
  }
  *a2 = CFDictionaryCreateCopy(v8, v10);
  if (SHIBYTE(v15) < 0)
  {
    operator delete(__p[0]);
    if (!v10)
      return;
    goto LABEL_19;
  }
  if (v10)
LABEL_19:
    CFRelease(v10);
}

uint64_t sub_19C39E948(uint64_t a1)
{
  _QWORD *v1;

  v1 = *(_QWORD **)(a1 + 64);
  if (v1[31])
    return 29;
  if (v1[17] == v1[16])
    return 0xFFFFFFFFLL;
  return 0;
}

uint64_t sub_19C39E96C(const void **a1)
{
  int v2;
  size_t v3;
  const void **v4;
  const void **v5;
  const void **v6;
  const void **v7;
  const void **v8;
  const void *v9;
  std::logic_error *exception;
  std::string v12;

  v2 = *((char *)a1 + 23);
  if (v2 >= 0)
    v3 = *((unsigned __int8 *)a1 + 23);
  else
    v3 = (size_t)a1[1];
  if (v3 == strlen((const char *)language_modeling::v1::kStaticPhraseLexicon))
  {
    v4 = v2 >= 0 ? a1 : (const void **)*a1;
    if (!memcmp(v4, (const void *)language_modeling::v1::kStaticPhraseLexicon, v3))
      return 0;
  }
  if (v3 == strlen((const char *)language_modeling::v1::kNamedEntityWordLexicon))
  {
    v5 = v2 >= 0 ? a1 : (const void **)*a1;
    if (!memcmp(v5, (const void *)language_modeling::v1::kNamedEntityWordLexicon, v3))
      return 1;
  }
  if (v3 == strlen((const char *)language_modeling::v1::kNamedEntityPhraseLexicon))
  {
    v6 = v2 >= 0 ? a1 : (const void **)*a1;
    if (!memcmp(v6, (const void *)language_modeling::v1::kNamedEntityPhraseLexicon, v3))
      return 2;
  }
  if (v3 == strlen((const char *)language_modeling::v1::kSupplementalWordLexicon))
  {
    v7 = v2 >= 0 ? a1 : (const void **)*a1;
    if (!memcmp(v7, (const void *)language_modeling::v1::kSupplementalWordLexicon, v3))
      return 3;
  }
  if (v3 == strlen((const char *)language_modeling::v1::kSupplementalPhraseLexicon))
  {
    v8 = v2 >= 0 ? a1 : (const void **)*a1;
    if (!memcmp(v8, (const void *)language_modeling::v1::kSupplementalPhraseLexicon, v3))
      return 4;
  }
  if (v3 != strlen((const char *)language_modeling::v1::kContactNamesWordLexicon)
    || (v2 >= 0 ? (v9 = a1) : (v9 = *a1), memcmp(v9, (const void *)language_modeling::v1::kContactNamesWordLexicon, v3)))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::logic_error::logic_error(exception, &v12);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(exception, (struct type_info *)off_1E3D2F2D0, MEMORY[0x1E0DE4360]);
  }
  return 5;
}

void sub_19C39EB70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void sub_19C39EBA8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  int v16;
  unsigned __int16 v17;
  uint64_t *v18;
  uint64_t v19;
  int v20;
  void *__p[2];
  char v22;
  __int128 *v23[3];

  v1 = a1[8];
  v2 = *(_QWORD *)(v1 + 184);
  v3 = *(_QWORD *)(v1 + 192);
  if (v2 != v3)
  {
    v5 = a1 + 11;
    v6 = (uint64_t)(a1 + 16);
    while (1)
    {
      sub_19C32BADC(__p, **(_QWORD **)v2);
      if (!sub_19C39EE08(v5, (uint64_t)__p))
        break;
      if (v22 < 0)
        goto LABEL_19;
LABEL_3:
      v2 += 16;
      if (v2 == v3)
        return;
    }
    v7 = operator new();
    v9 = a1[8];
    v8 = a1[9];
    *(_QWORD *)v7 = &off_1E3D34B90;
    *(_QWORD *)(v7 + 8) = v9;
    *(_QWORD *)(v7 + 16) = v8;
    if (v8)
    {
      v10 = (unint64_t *)(v8 + 8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    v12 = sub_19C337C94();
    memset(v23, 0, sizeof(v23));
    sub_19C337E1C(v7 + 24, v12, (uint64_t)v23);
    v13 = *(_QWORD *)(v2 + 8);
    *(_QWORD *)(v7 + 152) = *(_QWORD *)v2;
    *(_QWORD *)(v7 + 160) = v13;
    if (v13)
    {
      v14 = (unint64_t *)(v13 + 8);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    v16 = atomic_load(word_1EDB96DF8);
    if (v16 == 0xFFFF)
      atomic_store(0, word_1EDB96DF8);
    do
      v17 = __ldaxr(word_1EDB96DF8);
    while (__stlxr(v17 + 1, word_1EDB96DF8));
    *(_WORD *)(v7 + 168) = v17;
    v23[0] = (__int128 *)__p;
    v18 = sub_19C39F004((uint64_t)v5, (uint64_t)__p, v23);
    v19 = v18[5];
    v18[5] = v7;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
    v23[0] = (__int128 *)__p;
    v20 = *(unsigned __int16 *)(sub_19C39F004((uint64_t)v5, (uint64_t)__p, v23)[5] + 168);
    v23[0] = (__int128 *)__p;
    *((_DWORD *)sub_19C365254(v6, (uint64_t)__p, v23) + 10) = v20 | 0x10000;
    if ((v22 & 0x80000000) == 0)
      goto LABEL_3;
LABEL_19:
    operator delete(__p[0]);
    goto LABEL_3;
  }
}

void sub_19C39ED74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t *sub_19C39EE08(_QWORD *a1, uint64_t a2)
{
  _BYTE *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t **v11;
  uint64_t *v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *result;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  v2 = (_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v5 = v4;
  }
  v6 = sub_19C2A0F2C((uint64_t)&v25, (uint64_t *)a2, v5);
  v7 = (int8x8_t)a1[1];
  if (v7)
  {
    v8 = v6;
    v9 = (uint8x8_t)vcnt_s8(v7);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v10 = v6;
      if (v6 >= *(_QWORD *)&v7)
        v10 = v6 % *(_QWORD *)&v7;
    }
    else
    {
      v10 = (*(_QWORD *)&v7 - 1) & v6;
    }
    v11 = *(uint64_t ***)(*a1 + 8 * v10);
    if (v11)
    {
      v12 = *v11;
      if (*v11)
      {
        v13 = v2[23];
        if (v13 >= 0)
          v14 = v2[23];
        else
          v14 = *((_QWORD *)v2 + 1);
        if (v13 < 0)
          v2 = *(_BYTE **)v2;
        if (v9.u32[0] < 2uLL)
        {
          v15 = *(_QWORD *)&v7 - 1;
          while (1)
          {
            v21 = v12[1];
            if (v8 == v21)
            {
              v22 = *((unsigned __int8 *)v12 + 39);
              if ((v22 & 0x80u) == 0)
                v23 = *((unsigned __int8 *)v12 + 39);
              else
                v23 = v12[3];
              if (v23 == v14)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v12[2], v2, v12[3]))
                    return v12;
                }
                else
                {
                  if (!*((_BYTE *)v12 + 39))
                    return v12;
                  v24 = 0;
                  while (*((unsigned __int8 *)v12 + v24 + 16) == v2[v24])
                  {
                    if (v22 == ++v24)
                      return v12;
                  }
                }
              }
            }
            else if ((v21 & v15) != v10)
            {
              return 0;
            }
            result = 0;
            v12 = (uint64_t *)*v12;
            if (!v12)
              return result;
          }
        }
        while (1)
        {
          v17 = v12[1];
          if (v8 == v17)
          {
            v18 = *((unsigned __int8 *)v12 + 39);
            if ((v18 & 0x80u) == 0)
              v19 = *((unsigned __int8 *)v12 + 39);
            else
              v19 = v12[3];
            if (v19 == v14)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v12[2], v2, v12[3]))
                  return v12;
              }
              else
              {
                if (!*((_BYTE *)v12 + 39))
                  return v12;
                v20 = 0;
                while (*((unsigned __int8 *)v12 + v20 + 16) == v2[v20])
                {
                  if (v18 == ++v20)
                    return v12;
                }
              }
            }
          }
          else
          {
            if (v17 >= *(_QWORD *)&v7)
              v17 %= *(_QWORD *)&v7;
            if (v17 != v10)
              return 0;
          }
          result = 0;
          v12 = (uint64_t *)*v12;
          if (!v12)
            return result;
        }
      }
    }
  }
  return 0;
}

uint64_t *sub_19C39F004(uint64_t a1, uint64_t a2, __int128 **a3)
{
  unint64_t v3;
  _BYTE *v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t **v13;
  uint64_t *v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _BYTE *v27;
  __int128 *v28;
  __int128 v29;
  float v30;
  float v31;
  _BOOL8 v32;
  unint64_t v33;
  unint64_t v34;
  size_t prime;
  void *v36;
  void *v37;
  uint64_t v38;
  _QWORD *v39;
  size_t v40;
  size_t v41;
  size_t v42;
  _QWORD *i;
  size_t v44;
  uint64_t v45;
  unint64_t v46;
  uint8x8_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  size_t v51;
  _QWORD *v52;
  unint64_t v53;
  void *v55;
  _QWORD v56[2];
  char v57;

  v5 = (_BYTE *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v8 = v7;
  }
  v9 = sub_19C2A0F2C((uint64_t)v56, (uint64_t *)a2, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v3 = v9;
      if (v9 >= v11)
        v3 = v9 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v9;
    }
    v13 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        v15 = v5[23];
        if (v15 >= 0)
          v16 = v5[23];
        else
          v16 = *((_QWORD *)v5 + 1);
        if (v15 < 0)
          v5 = *(_BYTE **)v5;
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v21 = v14[1];
            if (v21 == v10)
            {
              v22 = *((unsigned __int8 *)v14 + 39);
              if ((v22 & 0x80u) == 0)
                v23 = *((unsigned __int8 *)v14 + 39);
              else
                v23 = v14[3];
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v14[2], v5, v14[3]))
                    return v14;
                }
                else
                {
                  if (!*((_BYTE *)v14 + 39))
                    return v14;
                  v24 = 0;
                  while (*((unsigned __int8 *)v14 + v24 + 16) == v5[v24])
                  {
                    if (v22 == ++v24)
                      return v14;
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            v14 = (uint64_t *)*v14;
            if (!v14)
              goto LABEL_51;
          }
        }
        do
        {
          v17 = v14[1];
          if (v17 == v10)
          {
            v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0)
              v19 = *((unsigned __int8 *)v14 + 39);
            else
              v19 = v14[3];
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v14[2], v5, v14[3]))
                  return v14;
              }
              else
              {
                if (!*((_BYTE *)v14 + 39))
                  return v14;
                v20 = 0;
                while (*((unsigned __int8 *)v14 + v20 + 16) == v5[v20])
                {
                  if (v18 == ++v20)
                    return v14;
                }
              }
            }
          }
          else
          {
            if (v17 >= v11)
              v17 %= v11;
            if (v17 != v3)
              break;
          }
          v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  v25 = (_QWORD *)(a1 + 16);
  v26 = operator new(0x30uLL);
  v56[0] = v26;
  v56[1] = a1 + 16;
  v57 = 0;
  *v26 = 0;
  v26[1] = v10;
  v27 = v26 + 2;
  v28 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    sub_19C2B5238(v27, *(void **)v28, *((_QWORD *)v28 + 1));
  }
  else
  {
    v29 = *v28;
    v26[4] = *((_QWORD *)v28 + 2);
    *(_OWORD *)v27 = v29;
  }
  v26[5] = 0;
  v57 = 1;
  v30 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v31 = *(float *)(a1 + 32);
  if (!v11 || (float)(v31 * (float)v11) < v30)
  {
    v32 = 1;
    if (v11 >= 3)
      v32 = (v11 & (v11 - 1)) != 0;
    v33 = v32 | (2 * v11);
    v34 = vcvtps_u32_f32(v30 / v31);
    if (v33 <= v34)
      prime = v34;
    else
      prime = v33;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    if (prime <= v11)
    {
      if (prime >= v11)
        goto LABEL_91;
      v46 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v11 < 3 || (v47 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v47.i16[0] = vaddlv_u8(v47), v47.u32[0] > 1uLL))
      {
        v46 = std::__next_prime(v46);
      }
      else
      {
        v48 = 1 << -(char)__clz(v46 - 1);
        if (v46 >= 2)
          v46 = v48;
      }
      if (prime <= v46)
        prime = v46;
      if (prime >= v11)
      {
        v11 = *(_QWORD *)(a1 + 8);
LABEL_91:
        if ((v11 & (v11 - 1)) != 0)
        {
          if (v10 >= v11)
            v3 = v10 % v11;
          else
            v3 = v10;
        }
        else
        {
          v3 = (v11 - 1) & v10;
        }
        goto LABEL_104;
      }
      if (!prime)
      {
        v55 = *(void **)a1;
        *(_QWORD *)a1 = 0;
        if (v55)
          operator delete(v55);
        v11 = 0;
        *(_QWORD *)(a1 + 8) = 0;
        goto LABEL_91;
      }
    }
    if (prime >> 61)
      sub_19C2A143C();
    v36 = operator new(8 * prime);
    v37 = *(void **)a1;
    *(_QWORD *)a1 = v36;
    if (v37)
      operator delete(v37);
    v38 = 0;
    *(_QWORD *)(a1 + 8) = prime;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v38++) = 0;
    while (prime != v38);
    v39 = (_QWORD *)*v25;
    if (!*v25)
    {
LABEL_90:
      v11 = prime;
      goto LABEL_91;
    }
    v40 = v39[1];
    v41 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v42 = v40 & v41;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v42) = v25;
      for (i = (_QWORD *)*v39; *v39; i = (_QWORD *)*v39)
      {
        v44 = i[1] & v41;
        if (v44 == v42)
        {
          v39 = i;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v44))
        {
          *v39 = *i;
          v45 = 8 * v44;
          *i = **(_QWORD **)(*(_QWORD *)a1 + v45);
          **(_QWORD **)(*(_QWORD *)a1 + v45) = i;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v44) = v39;
          v39 = i;
          v42 = v44;
        }
      }
      goto LABEL_90;
    }
    if (v40 >= prime)
      v40 %= prime;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v40) = v25;
    v49 = (_QWORD *)*v39;
    if (!*v39)
      goto LABEL_90;
    while (1)
    {
      v51 = v49[1];
      if (v51 >= prime)
        v51 %= prime;
      if (v51 != v40)
      {
        if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v51))
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v51) = v39;
          goto LABEL_95;
        }
        *v39 = *v49;
        v50 = 8 * v51;
        *v49 = **(_QWORD **)(*(_QWORD *)a1 + v50);
        **(_QWORD **)(*(_QWORD *)a1 + v50) = v49;
        v49 = v39;
      }
      v51 = v40;
LABEL_95:
      v39 = v49;
      v49 = (_QWORD *)*v49;
      v40 = v51;
      if (!v49)
        goto LABEL_90;
    }
  }
LABEL_104:
  v52 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v52)
  {
    *(_QWORD *)v56[0] = *v52;
    *v52 = v56[0];
  }
  else
  {
    *(_QWORD *)v56[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v56[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = v25;
    if (*(_QWORD *)v56[0])
    {
      v53 = *(_QWORD *)(*(_QWORD *)v56[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v53 >= v11)
          v53 %= v11;
      }
      else
      {
        v53 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v53) = v56[0];
    }
  }
  v14 = (uint64_t *)v56[0];
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_19C39F594(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C39F5B0((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_19C39F5B0(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      v3 = *(_QWORD *)(v2 + 40);
      *(_QWORD *)(v2 + 40) = 0;
      if (v3)
        (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
      if (*(char *)(v2 + 39) < 0)
        operator delete(*(void **)(v2 + 16));
    }
    operator delete((void *)v2);
  }
  return a1;
}

_QWORD *sub_19C39F614(_QWORD *result, char *__src, char *a3, size_t __sz)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  size_t v14;
  void **v15;
  _BYTE *v16;
  unint64_t v17;
  char *v18;
  void *v19;

  v6 = __src;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (__sz > (v8 - *result) >> 2)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz >> 62)
      goto LABEL_22;
    v10 = v8 >> 1;
    if (v8 >> 1 <= __sz)
      v10 = __sz;
    v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL;
    v12 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v11)
      v12 = v10;
    if (v12 >> 62)
LABEL_22:
      sub_19C2A18E8();
    v13 = 4 * v12;
    result = operator new(4 * v12);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + v13;
    v14 = a3 - v6;
    if (v14)
      result = memmove(result, v6, v14);
    v15 = (void **)(v7 + 1);
    goto LABEL_21;
  }
  v15 = (void **)(result + 1);
  v16 = (_BYTE *)result[1];
  v17 = (v16 - v9) >> 2;
  if (v17 >= __sz)
  {
    v14 = a3 - __src;
    if (a3 == __src)
      goto LABEL_21;
    v19 = (void *)*result;
LABEL_20:
    result = memmove(v19, __src, v14);
    goto LABEL_21;
  }
  v18 = &__src[4 * v17];
  if (v16 != v9)
  {
    result = memmove((void *)*result, __src, 4 * v17);
    v9 = (char *)*v15;
  }
  v14 = a3 - v18;
  if (v14)
  {
    v19 = v9;
    __src = v18;
    goto LABEL_20;
  }
LABEL_21:
  *v15 = &v9[v14];
  return result;
}

void sub_19C39F760()
{
  JUMPOUT(0x1A1AD355CLL);
}

_QWORD *sub_19C39F774(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E3D309A8;
  result[1] = v3;
  return result;
}

uint64_t sub_19C39F7A8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E3D309A8;
  a2[1] = v2;
  return result;
}

uint64_t sub_19C39F7C4(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), a2, a3, *a4, (uint64_t)(a4[1] - *a4) >> 2, 3);
}

uint64_t sub_19C39F7E8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN17language_modeling2v1L24blocklistContextTokenIDsERNS0_21LinguisticContextImplEjRKNS0_14TokenConv"
                     "erterENS0_9MatchTypeEE3$_0"
    || ((v3 & (unint64_t)"ZN17language_modeling2v1L24blocklistContextTokenIDsERNS0_21LinguisticContextImplEjRKNS0_"
                                "14TokenConverterENS0_9MatchTypeEE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN17language_modeling2v1L24blocklistContextTokenIDsERNS0_21LinguisticContextImplEjRKNS0_14TokenConverterENS0_9MatchTypeEE3$_0")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN17language_modeling2v1L24blocklistContextTokenIDsERNS0_21LinguisticContextImplEjRKNS0_14TokenConverterENS0_9MatchTypeEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *sub_19C39F83C()
{
  return &unk_1E3D334D0;
}

os_log_t sub_19C39F848()
{
  os_log_t result;

  result = os_log_create("com.apple.LanguageModeling", "Blocklist");
  qword_1EE41C3D8 = (uint64_t)result;
  return result;
}

uint64_t sub_19C39F874(uint64_t a1, const void *a2, _QWORD *a3)
{
  int v6;
  unsigned __int16 v7;
  const void *v8;
  const void *v9;
  const __CFString *v10;
  CFTypeID TypeID;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v15;
  unint64_t v16;
  unint64_t *p_shared_weak_owners;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  void *exception;
  __int128 v28;
  CFTypeRef cf[2];
  char v30;
  _QWORD *v31;
  uint64_t v32;
  char v33;

  *(_QWORD *)a1 = &off_1E3D34AD8;
  v6 = atomic_load(word_1EDB96DF8);
  if (v6 == 0xFFFF)
    atomic_store(0, word_1EDB96DF8);
  do
    v7 = __ldaxr(word_1EDB96DF8);
  while (__stlxr(v7 + 1, word_1EDB96DF8));
  *(_WORD *)(a1 + 8) = v7;
  v8 = (const void *)MEMORY[0x1A1AD2A04](*(_QWORD *)(*a3 + 8));
  v9 = v8;
  if (v8)
    CFRetain(v8);
  sub_19C297DB4(cf, v9);
  v10 = (const __CFString *)cf[0];
  if (!cf[0])
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD3154](exception, "Could not construct");
    goto LABEL_36;
  }
  TypeID = CFStringGetTypeID();
  if (TypeID != CFGetTypeID(v10))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD3154](exception, "Could not convert");
LABEL_36:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  sub_19C297E60((_QWORD *)(a1 + 16), v10);
  if (cf[0])
    CFRelease(cf[0]);
  sub_19C423B58((_BYTE *)(a1 + 40), (const UInt8 *)(a1 + 16));
  v28 = *(_OWORD *)a3;
  *a3 = 0;
  a3[1] = 0;
  v12 = operator new();
  *(_OWORD *)cf = v28;
  sub_19C31C0B8(v12, a2, (uint64_t)cf);
  *(_QWORD *)(a1 + 64) = v12;
  v13 = (std::__shared_weak_count *)operator new();
  v13->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v13->__shared_owners_;
  v13->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D39E10;
  v13->__shared_weak_owners_ = 0;
  v13[1].__vftable = (std::__shared_weak_count_vtbl *)v12;
  *(_QWORD *)(a1 + 72) = v13;
  v15 = *(std::__shared_weak_count **)(v12 + 16);
  if (v15)
  {
    if (v15->__shared_owners_ != -1)
      goto LABEL_23;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v13->__shared_weak_owners_;
    do
      v18 = __ldxr(p_shared_weak_owners);
    while (__stxr(v18 + 1, p_shared_weak_owners));
    *(_QWORD *)(v12 + 8) = v12;
    *(_QWORD *)(v12 + 16) = v13;
    std::__shared_weak_count::__release_weak(v15);
  }
  else
  {
    do
      v19 = __ldxr(p_shared_owners);
    while (__stxr(v19 + 1, p_shared_owners));
    v20 = (unint64_t *)&v13->__shared_weak_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
    *(_QWORD *)(v12 + 8) = v12;
    *(_QWORD *)(v12 + 16) = v13;
  }
  do
    v22 = __ldaxr(p_shared_owners);
  while (__stlxr(v22 - 1, p_shared_owners));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
LABEL_23:
  v23 = (std::__shared_weak_count *)cf[1];
  if (cf[1])
  {
    v24 = (unint64_t *)((char *)cf[1] + 8);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  sub_19C29A778((uint64_t *)(a1 + 80), (const UInt8 *)(a1 + 16));
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 1065353216;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_DWORD *)(a1 + 160) = 1065353216;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 168) = a1 + 176;
  *(_QWORD *)(a1 + 184) = 0;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  sub_19C31D950(*(_QWORD *)(a1 + 64));
  sub_19C39EBA8((_QWORD *)a1);
  sub_19C336E6C((char *)cf, (__int128 *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 416) + 80));
  if (v33)
  {
    if ((_QWORD **)(a1 + 168) == &v31 || (sub_19C336F24(a1 + 168, v31, &v32), v33))
    {
      sub_19C2E457C(v32);
      if (v30 < 0)
        operator delete((void *)cf[0]);
    }
  }
  return a1;
}

void sub_19C39FBE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  uint64_t v19;
  void **v20;
  void **v21;
  uint64_t *v22;
  void **v23;
  void **v24;
  void **v25;
  void *v27;
  void **v28;
  void *v29;
  char *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  void **v37;
  char *v38;
  uint64_t v39;

  if (a19)
  {
    sub_19C2E457C(a17);
    if (a15 < 0)
      operator delete(__p);
  }
  v27 = *(void **)(v19 + 264);
  if (v27)
  {
    *(_QWORD *)(v19 + 272) = v27;
    operator delete(v27);
  }
  sub_19C336DA8(v23);
  sub_19C2E457C(*(_QWORD *)(v19 + 176));
  v28 = *(void ***)(v19 + 144);
  if (v28)
  {
    do
    {
      v37 = (void **)*v28;
      if (*((char *)v28 + 39) < 0)
        operator delete(v28[2]);
      operator delete(v28);
      v28 = v37;
    }
    while (v37);
  }
  v29 = *v25;
  *v25 = 0;
  if (v29)
    operator delete(v29);
  v30 = *(char **)(v19 + 104);
  if (v30)
  {
    do
    {
      v38 = *(char **)v30;
      v39 = *((_QWORD *)v30 + 5);
      *((_QWORD *)v30 + 5) = 0;
      if (v39)
        (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
      if (v30[39] < 0)
        operator delete(*((void **)v30 + 2));
      operator delete(v30);
      v30 = v38;
    }
    while (v38);
  }
  v31 = *v24;
  *v24 = 0;
  if (v31)
    operator delete(v31);
  v32 = *v22;
  *v22 = 0;
  if (v32)
  {
    v33 = sub_19C2966B4(v32);
    MEMORY[0x1A1AD355C](v33, 0x10F0C4069D522A4);
  }
  v34 = *(std::__shared_weak_count **)(v19 + 72);
  if (v34)
  {
    p_shared_owners = (unint64_t *)&v34->__shared_owners_;
    do
      v36 = __ldaxr(p_shared_owners);
    while (__stlxr(v36 - 1, p_shared_owners));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  if (*(char *)(v19 + 63) < 0)
    operator delete(*v21);
  if (*(char *)(v19 + 39) < 0)
  {
    operator delete(*v20);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

_QWORD *sub_19C39FE78(_QWORD *a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  *a1 = &off_1E3D37CB8;
  v2 = a1[1];
  v3 = *(_DWORD *)(v2 + 168) - 1;
  *(_DWORD *)(v2 + 168) = v3;
  if (!v3)
  {
    v4 = sub_19C3A2938(v2);
    MEMORY[0x1A1AD355C](v4, 0x10B2C404FCE5648);
  }
  return a1;
}

void sub_19C39FED0(_QWORD *a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;

  *a1 = &off_1E3D37CB8;
  v1 = a1[1];
  v2 = *(_DWORD *)(v1 + 168) - 1;
  *(_DWORD *)(v1 + 168) = v2;
  if (!v2)
  {
    v3 = sub_19C3A2938(v1);
    MEMORY[0x1A1AD355C](v3, 0x10B2C404FCE5648);
  }
  JUMPOUT(0x1A1AD355CLL);
}

_QWORD *sub_19C39FF38(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = (_QWORD *)operator new();
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E3D37CB8;
  result[1] = v3;
  ++*(_DWORD *)(v3 + 168);
  return result;
}

uint64_t sub_19C39FF88(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  int v6;

  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_DWORD *)(v5 + 168);
  if (v6 >= 2)
  {
    *(_DWORD *)(v5 + 168) = v6 - 1;
    v5 = operator new();
    sub_19C3A1CD0((char *)v5, *(__int128 **)(a1 + 8));
    *(_QWORD *)(a1 + 8) = v5;
  }
  return sub_19C3A20C4(v5, a2, a3);
}

void sub_19C3A0000(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD355C](v1, 0x10B2C404FCE5648);
  _Unwind_Resume(a1);
}

uint64_t sub_19C3A0024(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_DWORD *)(v3 + 168);
  if (v4 >= 2)
  {
    *(_DWORD *)(v3 + 168) = v4 - 1;
    v3 = operator new();
    sub_19C3A1CD0((char *)v3, *(__int128 **)(a1 + 8));
    *(_QWORD *)(a1 + 8) = v3;
  }
  return sub_19C3A20C4(v3, a2, *(uint64_t **)(v3 + 24));
}

void sub_19C3A0098(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD355C](v1, 0x10B2C404FCE5648);
  _Unwind_Resume(a1);
}

void sub_19C3A00BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *__p[2];
  char v13;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_DWORD *)(v4 + 168);
  if (v5 >= 2)
  {
    *(_DWORD *)(v4 + 168) = v5 - 1;
    v6 = (char *)operator new();
    sub_19C3A1CD0(v6, *(__int128 **)(a1 + 8));
    *(_QWORD *)(a1 + 8) = v6;
  }
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 120))(a2);
  v8 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 128))(a2, 0);
  if (v7)
  {
    v9 = v8;
    v10 = 0;
    do
    {
      v11 = *(_QWORD *)(a1 + 8);
      (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a2 + 88))(__p, a2, v9);
      sub_19C3A20C4(v11, (uint64_t)__p, *(uint64_t **)(v11 + 24));
      if (v13 < 0)
        operator delete(__p[0]);
      if (++v10 < v7)
        v9 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, v10);
    }
    while (v7 != v10);
  }
}

void sub_19C3A01D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD355C](v1, 0x10B2C404FCE5648);
  _Unwind_Resume(a1);
}

void sub_19C3A01FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C3A021C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

void sub_19C3A0224(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  __int128 v4;

  v3 = *(_QWORD *)(a1 + 8);
  sub_19C3A101C(v3);
  if (*(char *)(v3 + 199) < 0)
  {
    sub_19C2B5238((_BYTE *)a2, *(void **)(v3 + 176), *(_QWORD *)(v3 + 184));
  }
  else
  {
    v4 = *(_OWORD *)(v3 + 176);
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(v3 + 192);
    *(_OWORD *)a2 = v4;
  }
}

void sub_19C3A027C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  __int128 v4;

  v3 = *(_QWORD *)(a1 + 8);
  sub_19C3A101C(v3);
  if (*(char *)(v3 + 223) < 0)
  {
    sub_19C2B5238((_BYTE *)a2, *(void **)(v3 + 200), *(_QWORD *)(v3 + 208));
  }
  else
  {
    v4 = *(_OWORD *)(v3 + 200);
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(v3 + 216);
    *(_OWORD *)a2 = v4;
  }
}

BOOL sub_19C3A02D4(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t i;
  int64_t v7;
  void *v8;
  const char *v9;
  size_t v10;
  size_t v11;
  void *p_p;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  _QWORD *v17;
  void *__p;
  size_t v20;
  int64_t v21;
  int v22;

  v3 = *(_QWORD *)(a1 + 8);
  LODWORD(__p) = 2125658996;
  std::ostream::write();
  LODWORD(v4) = *(unsigned __int8 *)(v3 + 23);
  if ((v4 & 0x80u) != 0)
    v4 = *(_QWORD *)(v3 + 8);
  LODWORD(__p) = v4;
  std::ostream::write();
  std::ostream::write();
  __p = *(void **)(v3 + 24);
  std::ostream::write();
  __p = (void *)((uint64_t)(*(_QWORD *)(v3 + 56) - *(_QWORD *)(v3 + 48)) >> 3);
  std::ostream::write();
  v5 = *(_QWORD *)(v3 + 48);
  if (*(_QWORD *)(v3 + 56) != v5)
  {
    for (i = 0; i < (*(_QWORD *)(v3 + 56) - v5) >> 3; ++i)
    {
      v7 = *(_QWORD *)(v3 + 32);
      v8 = (void *)i;
      if ((uint64_t)i >= v7)
        v8 = *(void **)(*(_QWORD *)(v3 + 120) - 8 * v7 + 8 * i);
      v9 = *(const char **)(v5 + 8 * i);
      v10 = strlen(v9);
      if (v10 >= 0x7FFFFFFFFFFFFFF8)
        sub_19C2A1A54();
      v11 = v10;
      if (v10 >= 0x17)
      {
        v13 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v10 | 7) != 0x17)
          v13 = v10 | 7;
        v14 = v13 + 1;
        p_p = operator new(v13 + 1);
        v20 = v11;
        v21 = v14 | 0x8000000000000000;
        __p = p_p;
      }
      else
      {
        HIBYTE(v21) = v10;
        p_p = &__p;
        if (!v10)
          goto LABEL_16;
      }
      memmove(p_p, v9, v11);
LABEL_16:
      *((_BYTE *)p_p + v11) = 0;
      v15 = HIBYTE(v21);
      if (v21 < 0)
        v15 = v20;
      v22 = v15;
      std::ostream::write();
      std::ostream::write();
      if (SHIBYTE(v21) < 0)
        operator delete(__p);
      __p = v8;
      std::ostream::write();
      v5 = *(_QWORD *)(v3 + 48);
    }
  }
  std::ostream::flush();
  v16 = *(_DWORD *)((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5;
  if (v16)
  {
    HIBYTE(v21) = 5;
    strcpy((char *)&__p, "ERROR");
    v17 = sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)&__p, 5);
    sub_19C2A1B24(v17, (uint64_t)": ", 2);
    sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)"SymbolTable::Write: write failed", 32);
    sub_19C351928();
    if (SHIBYTE(v21) < 0)
      operator delete(__p);
  }
  return v16 == 0;
}

void sub_19C3A057C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  sub_19C351928();
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL sub_19C3A05A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::ios_base *v11;
  _BOOL4 v13;
  _QWORD *v14;
  void *p_p;
  uint64_t v16;
  _QWORD *v17;
  _BYTE *v18;
  _QWORD *v19;
  char v20;
  size_t v21;
  void *v22;
  unint64_t v23;
  const void **v24;
  const void *v25;
  uint64_t v26;
  uint64_t v27;
  size_t v28;
  void **v29;
  unint64_t v30;
  const void **v31;
  const void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  _QWORD *v37;
  uint64_t v39;
  void *v40;
  void *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  void *v46;
  int v47;
  void *__dst[2];
  unint64_t v49;
  void *__p;
  size_t v51;
  int64_t v52;
  void *v53;
  uint64_t v54;
  char v55;
  _BYTE v56[16];
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  __int128 v60;
  __int128 v61;
  int v62;
  uint64_t v63[20];

  if (*(char *)(a3 + 31) >= 0)
    v3 = *(unsigned __int8 *)(a3 + 31);
  else
    v3 = *(_QWORD *)(a3 + 16);
  v39 = v3;
  if (v3)
  {
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
    v8 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 128))(a1, 0);
    if (v7)
    {
      v9 = v8;
      v47 = 0;
      v10 = 0;
      v46 = *(void **)(MEMORY[0x1E0DE4F60] + 8);
      v41 = (void *)*MEMORY[0x1E0DE4F60];
      v45 = *(void **)(MEMORY[0x1E0DE4F60] + 16);
      v40 = *(void **)(MEMORY[0x1E0DE4F60] + 24);
      v44 = MEMORY[0x1E0DE4FE0] + 64;
      v43 = MEMORY[0x1E0DE4FB8] + 16;
      v42 = v7;
      do
      {
        v63[0] = v44;
        v53 = v46;
        *(void **)((char *)&v53 + *((_QWORD *)v46 - 3)) = v45;
        v11 = (std::ios_base *)((char *)&v53 + *((_QWORD *)v53 - 3));
        std::ios_base::init(v11, &v54);
        v11[1].__vftable = 0;
        v11[1].__fmtflags_ = -1;
        v53 = (void *)(MEMORY[0x1E0DE4FE0] + 24);
        v63[0] = MEMORY[0x1E0DE4FE0] + 64;
        std::streambuf::basic_streambuf();
        v54 = v43;
        v60 = 0u;
        v61 = 0u;
        v62 = 16;
        v13 = v9 >= 0 || *(_BYTE *)a3 != 0;
        if (((v13 | v47) & 1) == 0)
        {
          HIBYTE(v52) = 7;
          strcpy((char *)&__p, "WARNING");
          v14 = sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)&__p, 7);
          sub_19C2A1B24(v14, (uint64_t)": ", 2);
          sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)"Negative symbol table entry when not allowed", 44);
          sub_19C351928();
          if (SHIBYTE(v52) < 0)
            operator delete(__p);
          v47 = 1;
        }
        (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 88))(&__p, a1, v9);
        if (v52 >= 0)
          p_p = &__p;
        else
          p_p = __p;
        if (v52 >= 0)
          v16 = HIBYTE(v52);
        else
          v16 = v51;
        v17 = sub_19C2A1B24(&v53, (uint64_t)p_p, v16);
        v18 = (_BYTE *)(a3 + 8);
        if (*(char *)(a3 + 31) < 0)
          v18 = *(_BYTE **)(a3 + 8);
        LOBYTE(__dst[0]) = *v18;
        sub_19C2A1B24(v17, (uint64_t)__dst, 1);
        v19 = (_QWORD *)std::ostream::operator<<();
        LOBYTE(__dst[0]) = 10;
        sub_19C2A1B24(v19, (uint64_t)__dst, 1);
        if (SHIBYTE(v52) < 0)
        {
          operator delete(__p);
          v20 = v62;
          if ((v62 & 0x10) != 0)
          {
LABEL_31:
            v23 = *((_QWORD *)&v61 + 1);
            v24 = (const void **)&v58;
            if (*((_QWORD *)&v61 + 1) < v59)
            {
              *((_QWORD *)&v61 + 1) = v59;
              v23 = v59;
              v24 = (const void **)&v58;
            }
            goto LABEL_34;
          }
        }
        else
        {
          v20 = v62;
          if ((v62 & 0x10) != 0)
            goto LABEL_31;
        }
        if ((v20 & 8) == 0)
        {
          v21 = 0;
          HIBYTE(v52) = 0;
          v22 = &__p;
          goto LABEL_42;
        }
        v23 = v57;
        v24 = (const void **)v56;
LABEL_34:
        v25 = *v24;
        v21 = v23 - (_QWORD)*v24;
        if (v21 > 0x7FFFFFFFFFFFFFF7)
          sub_19C2A1A54();
        if (v21 >= 0x17)
        {
          v26 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v21 | 7) != 0x17)
            v26 = v21 | 7;
          v27 = v26 + 1;
          v22 = operator new(v26 + 1);
          v51 = v21;
          v52 = v27 | 0x8000000000000000;
          __p = v22;
LABEL_41:
          memmove(v22, v25, v21);
          goto LABEL_42;
        }
        HIBYTE(v52) = v23 - *(_BYTE *)v24;
        v22 = &__p;
        if (v21)
          goto LABEL_41;
LABEL_42:
        *((_BYTE *)v22 + v21) = 0;
        if ((v62 & 0x10) != 0)
        {
          v30 = *((_QWORD *)&v61 + 1);
          v31 = (const void **)&v58;
          if (*((_QWORD *)&v61 + 1) < v59)
          {
            *((_QWORD *)&v61 + 1) = v59;
            v30 = v59;
            v31 = (const void **)&v58;
          }
        }
        else
        {
          if ((v62 & 8) == 0)
          {
            v28 = 0;
            HIBYTE(v49) = 0;
            v29 = __dst;
            goto LABEL_56;
          }
          v30 = v57;
          v31 = (const void **)v56;
        }
        v32 = *v31;
        v28 = v30 - (_QWORD)*v31;
        if (v28 > 0x7FFFFFFFFFFFFFF7)
          sub_19C2A1A54();
        if (v28 >= 0x17)
        {
          v33 = a2;
          v34 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v28 | 7) != 0x17)
            v34 = v28 | 7;
          v35 = v34 + 1;
          v29 = (void **)operator new(v34 + 1);
          __dst[1] = (void *)v28;
          v49 = v35 | 0x8000000000000000;
          __dst[0] = v29;
          a2 = v33;
LABEL_55:
          memmove(v29, v32, v28);
          goto LABEL_56;
        }
        HIBYTE(v49) = v30 - *(_BYTE *)v31;
        v29 = __dst;
        if (v28)
          goto LABEL_55;
LABEL_56:
        *((_BYTE *)v29 + v28) = 0;
        v36 = SHIBYTE(v49);
        std::ostream::write();
        if (v36 < 0)
        {
          operator delete(__dst[0]);
          if (SHIBYTE(v52) < 0)
LABEL_63:
            operator delete(__p);
        }
        else if (SHIBYTE(v52) < 0)
        {
          goto LABEL_63;
        }
        v53 = v41;
        *(void **)((char *)&v53 + *((_QWORD *)v41 - 3)) = v40;
        v54 = MEMORY[0x1E0DE4FB8] + 16;
        if (SBYTE7(v61) < 0)
          operator delete((void *)v60);
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x1A1AD34CC](v63);
        if (++v10 < v42)
          v9 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, v10);
      }
      while (v42 != v10);
    }
  }
  else
  {
    v55 = 5;
    strcpy((char *)&v53, "ERROR");
    v37 = sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)&v53, 5);
    sub_19C2A1B24(v37, (uint64_t)": ", 2);
    sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)"Missing required field separator", 32);
    sub_19C351928();
    if (v55 < 0)
      operator delete(v53);
  }
  return v39 != 0;
}

void sub_19C3A0B5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  sub_19C351928();
  if (a39 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

size_t sub_19C3A0C1C@<X0>(size_t result@<X0>, int64_t a2@<X1>, _BYTE *a3@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  int64_t v7;
  BOOL v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  const char *v12;
  size_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;

  v4 = *(_QWORD **)(result + 8);
  if (a2 < 0 || v4[4] <= a2)
  {
    v5 = (_QWORD *)v4[19];
    if (!v5)
      goto LABEL_19;
    v6 = v4 + 19;
    do
    {
      v7 = v5[4];
      v8 = v7 < a2;
      if (v7 >= a2)
        v9 = v5;
      else
        v9 = v5 + 1;
      if (!v8)
        v6 = v5;
      v5 = (_QWORD *)*v9;
    }
    while (*v9);
    if (v6 == v4 + 19)
      goto LABEL_19;
    if (v6[4] > a2)
      goto LABEL_19;
    a2 = v6[5];
    if (a2 < 0)
      goto LABEL_19;
  }
  v11 = v4 + 6;
  v10 = v4[6];
  if (a2 >= (unint64_t)((v11[1] - v10) >> 3))
  {
LABEL_19:
    a3[23] = 0;
    *a3 = 0;
    return result;
  }
  v12 = *(const char **)(v10 + 8 * a2);
  result = strlen(v12);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    sub_19C2A1A54();
  v13 = result;
  if (result >= 0x17)
  {
    v14 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v14 = result | 7;
    v15 = v14 + 1;
    v16 = operator new(v14 + 1);
    *((_QWORD *)a3 + 1) = v13;
    *((_QWORD *)a3 + 2) = v15 | 0x8000000000000000;
    *(_QWORD *)a3 = v16;
    a3 = v16;
  }
  else
  {
    a3[23] = result;
    if (!result)
      goto LABEL_24;
  }
  result = (size_t)memmove(a3, v12, v13);
LABEL_24:
  a3[v13] = 0;
  return result;
}

uint64_t sub_19C3A0D34(uint64_t a1, uint64_t a2)
{
  return sub_19C3A0F40(*(_QWORD **)(a1 + 8), a2);
}

uint64_t sub_19C3A0D3C(uint64_t a1, char *__s)
{
  _QWORD *v3;
  size_t v4;
  void *v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *__dst[2];
  unint64_t v12;

  v3 = *(_QWORD **)(a1 + 8);
  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    sub_19C2A1A54();
  v5 = (void *)v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = (void **)operator new(v7 + 1);
    __dst[1] = v5;
    v12 = v8 | 0x8000000000000000;
    __dst[0] = v6;
    goto LABEL_8;
  }
  HIBYTE(v12) = v4;
  v6 = __dst;
  if (v4)
LABEL_8:
    memcpy(v6, __s, (size_t)v5);
  *((_BYTE *)v5 + (_QWORD)v6) = 0;
  v9 = sub_19C3A0F40(v3, (uint64_t)__dst);
  if (SHIBYTE(v12) < 0)
    operator delete(__dst[0]);
  return v9;
}

uint64_t sub_19C3A0E14(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24);
}

uint64_t sub_19C3A0E20(uint64_t a1)
{
  return (uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) - *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48)) >> 3;
}

uint64_t sub_19C3A0E34(uint64_t a1, unint64_t a2)
{
  return sub_19C3A0E3C(*(_QWORD **)(a1 + 8), a2);
}

uint64_t sub_19C3A0E3C(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  const char *v5;
  size_t v6;
  void *v7;
  void **v8;
  uint64_t v10;
  uint64_t v11;
  void *__dst[2];
  unint64_t v13;

  if ((a2 & 0x8000000000000000) != 0)
    return -1;
  v2 = a2;
  v4 = a1[6];
  if (a2 >= (a1[7] - v4) >> 3)
    return -1;
  if (a1[4] <= (int64_t)a2)
  {
    v5 = *(const char **)(v4 + 8 * a2);
    v6 = strlen(v5);
    if (v6 >= 0x7FFFFFFFFFFFFFF8)
      sub_19C2A1A54();
    v7 = (void *)v6;
    if (v6 >= 0x17)
    {
      v10 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v10 = v6 | 7;
      v11 = v10 + 1;
      v8 = (void **)operator new(v10 + 1);
      __dst[1] = v7;
      v13 = v11 | 0x8000000000000000;
      __dst[0] = v8;
    }
    else
    {
      HIBYTE(v13) = v6;
      v8 = __dst;
      if (!v6)
      {
LABEL_14:
        *((_BYTE *)v7 + (_QWORD)v8) = 0;
        v2 = sub_19C3A0F40(a1, (uint64_t)__dst);
        if (SHIBYTE(v13) < 0)
          operator delete(__dst[0]);
        return v2;
      }
    }
    memmove(v8, v5, (size_t)v7);
    goto LABEL_14;
  }
  return v2;
}

uint64_t sub_19C3A0F40(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char v17;

  v2 = a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v5 = v4;
  }
  v6 = sub_19C2A0F2C((uint64_t)&v17, (uint64_t *)a2, v5);
  v7 = a1[13];
  v8 = a1[10];
  v9 = a1[5];
  v10 = v7 & v6;
  v11 = *(_QWORD *)(v8 + 8 * (v7 & v6));
  if (v11 == v9)
  {
LABEL_9:
    v11 = v9;
  }
  else
  {
    v12 = a1[6];
    if (*(char *)(v2 + 23) < 0)
      v2 = *(_QWORD *)v2;
    while (strcmp(*(const char **)(v12 + 8 * v11), (const char *)v2))
    {
      v10 = (v10 + 1) & v7;
      v11 = *(_QWORD *)(v8 + 8 * v10);
      if (v11 == v9)
        goto LABEL_9;
    }
  }
  if (v11 != -1)
  {
    v13 = a1[4];
    v14 = __OFSUB__(v11, v13);
    v15 = v11 - v13;
    if (v15 < 0 == v14)
      return *(_QWORD *)(a1[15] + 8 * v15);
  }
  return v11;
}

void sub_19C3A101C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t i;
  const char *v4;
  size_t v5;
  std::string::size_type v6;
  std::string *p_dst;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  void *v12;
  std::string *v13;
  std::string::value_type v14;
  std::string::value_type v15;
  int v16;
  BOOL v17;
  int v18;
  int v19;
  std::string *v20;
  void **v21;
  uint64_t v22;
  std::ios_base *v23;
  const char *v24;
  size_t v25;
  size_t v26;
  _BYTE *p_p;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  _QWORD *v32;
  char v33;
  size_t v34;
  void *v35;
  unint64_t v36;
  const void **v37;
  const void *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  size_t v42;
  void *v43;
  unint64_t v44;
  const void **v45;
  const void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  char v51;
  char v52;
  int v53;
  int v54;
  int v55;
  std::string *v56;
  _QWORD *v57;
  _QWORD *v58;
  std::ios_base *v59;
  const char *v60;
  size_t v61;
  size_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  _QWORD *v68;
  char v69;
  size_t v70;
  void *v71;
  unint64_t v72;
  const void **v73;
  const void *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  size_t v78;
  void *v79;
  unint64_t v80;
  const void **v81;
  const void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  char v87;
  char v88;
  int v89;
  int v90;
  int v91;
  std::string *v92;
  _QWORD *v93;
  _QWORD *v94;
  BOOL v95;
  void **v96;
  _QWORD *v97;
  uint64_t v98;
  std::string::size_type v99;
  std::string::size_type v100;
  std::string::size_type v101;
  std::string::size_type v102;
  std::string::size_type v103;
  std::string::size_type v104;
  uint64_t v105;
  uint64_t v106;
  std::string::size_type v107;
  std::string::size_type v108;
  std::string::size_type v109;
  std::string::size_type v110;
  void *v111;
  size_t v112;
  int64_t v113;
  void *__p;
  size_t v115;
  int64_t v116;
  std::string __dst;
  _BYTE v118[16];
  unint64_t v119;
  uint64_t v120;
  unint64_t v121;
  __int128 v122;
  __int128 v123;
  int v124;
  _QWORD v125[19];
  int v126;
  std::string v127;
  int v128;
  std::string v129;

  if (!*(_BYTE *)(a1 + 172))
  {
    v1 = a1;
    v128 = 0;
    memset(&v129, 0, sizeof(v129));
    std::string::append(&v129, 0x20uLL, 0);
    v2 = *(_QWORD *)(v1 + 48);
    if (*(_QWORD *)(v1 + 56) != v2)
    {
      for (i = 0; i < (*(_QWORD *)(v1 + 56) - v2) >> 3; ++i)
      {
        v4 = *(const char **)(v2 + 8 * i);
        v5 = strlen(v4);
        if (v5 > 0x7FFFFFFFFFFFFFF7)
          sub_19C2A1A54();
        v6 = v5;
        if (v5 >= 0x17)
        {
          v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v5 | 7) != 0x17)
            v8 = v5 | 7;
          v9 = v8 + 1;
          p_dst = (std::string *)operator new(v8 + 1);
          __dst.__r_.__value_.__l.__size_ = v6;
          __dst.__r_.__value_.__r.__words[2] = v9 | 0x8000000000000000;
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
        }
        else
        {
          *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v5;
          p_dst = &__dst;
          if (!v5)
            goto LABEL_13;
        }
        memmove(p_dst, v4, v6);
LABEL_13:
        p_dst->__r_.__value_.__s.__data_[v6] = 0;
        LODWORD(v10) = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
        v11 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
        v12 = (void *)__dst.__r_.__value_.__r.__words[0];
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v13 = &__dst;
        else
          v13 = (std::string *)__dst.__r_.__value_.__r.__words[0];
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          LODWORD(v10) = __dst.__r_.__value_.__r.__words[1];
        if ((int)v10 >= 1)
        {
          v10 = v10;
          do
          {
            v15 = v13->__r_.__value_.__s.__data_[0];
            v13 = (std::string *)((char *)v13 + 1);
            v14 = v15;
            v16 = v128++;
            v17 = -v16 < 0;
            v18 = -v16 & 0x1F;
            v19 = v16 & 0x1F;
            if (!v17)
              v19 = -v18;
            if ((v129.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v20 = &v129;
            else
              v20 = (std::string *)v129.__r_.__value_.__r.__words[0];
            v20->__r_.__value_.__s.__data_[v19] ^= v14;
            --v10;
          }
          while (v10);
        }
        ++v128;
        if (v11 < 0)
          operator delete(v12);
        v2 = *(_QWORD *)(v1 + 48);
      }
    }
    if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0)
      sub_19C2B5238(&__dst, v129.__r_.__value_.__l.__data_, v129.__r_.__value_.__l.__size_);
    else
      __dst = v129;
    v21 = (void **)(v1 + 176);
    if (*(char *)(v1 + 199) < 0)
      operator delete(*v21);
    *(_OWORD *)v21 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
    *(_QWORD *)(v1 + 192) = *((_QWORD *)&__dst.__r_.__value_.__l + 2);
    v126 = 0;
    memset(&v127, 0, sizeof(v127));
    std::string::append(&v127, 0x20uLL, 0);
    v98 = v1;
    if (*(uint64_t *)(v1 + 32) >= 1)
    {
      v22 = 0;
      v107 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
      v109 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
      v99 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
      v101 = *MEMORY[0x1E0DE4F60];
      v105 = MEMORY[0x1E0DE4FE0] + 64;
      v103 = MEMORY[0x1E0DE4FB8] + 16;
      while (1)
      {
        v125[0] = v105;
        __dst.__r_.__value_.__r.__words[0] = v109;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + *(_QWORD *)(v109 - 24)) = v107;
        v23 = (std::ios_base *)((char *)&__dst + *(_QWORD *)(__dst.__r_.__value_.__r.__words[0] - 24));
        std::ios_base::init(v23, &__dst.__r_.__value_.__r.__words[1]);
        v23[1].__vftable = 0;
        v23[1].__fmtflags_ = -1;
        __dst.__r_.__value_.__r.__words[0] = MEMORY[0x1E0DE4FE0] + 24;
        v125[0] = MEMORY[0x1E0DE4FE0] + 64;
        std::streambuf::basic_streambuf();
        __dst.__r_.__value_.__l.__size_ = v103;
        v122 = 0u;
        v123 = 0u;
        v124 = 16;
        v24 = *(const char **)(*(_QWORD *)(v1 + 48) + 8 * v22);
        v25 = strlen(v24);
        if (v25 > 0x7FFFFFFFFFFFFFF7)
          sub_19C2A1A54();
        v26 = v25;
        if (v25 >= 0x17)
          break;
        HIBYTE(v116) = v25;
        p_p = &__p;
        if (v25)
          goto LABEL_43;
LABEL_44:
        p_p[v26] = 0;
        if (v116 >= 0)
          v30 = &__p;
        else
          v30 = __p;
        if (v116 >= 0)
          v31 = HIBYTE(v116);
        else
          v31 = v115;
        v32 = sub_19C2A1B24(&__dst, (uint64_t)v30, v31);
        LOBYTE(v111) = 9;
        sub_19C2A1B24(v32, (uint64_t)&v111, 1);
        std::ostream::operator<<();
        if (SHIBYTE(v116) < 0)
        {
          operator delete(__p);
          v33 = v124;
          if ((v124 & 0x10) != 0)
          {
LABEL_55:
            v36 = *((_QWORD *)&v123 + 1);
            v37 = (const void **)&v120;
            if (*((_QWORD *)&v123 + 1) < v121)
            {
              *((_QWORD *)&v123 + 1) = v121;
              v36 = v121;
              v37 = (const void **)&v120;
            }
            goto LABEL_58;
          }
        }
        else
        {
          v33 = v124;
          if ((v124 & 0x10) != 0)
            goto LABEL_55;
        }
        if ((v33 & 8) == 0)
        {
          v34 = 0;
          HIBYTE(v116) = 0;
          v35 = &__p;
          goto LABEL_66;
        }
        v36 = v119;
        v37 = (const void **)v118;
LABEL_58:
        v38 = *v37;
        v34 = v36 - (_QWORD)*v37;
        if (v34 > 0x7FFFFFFFFFFFFFF7)
          sub_19C2A1A54();
        if (v34 >= 0x17)
        {
          v39 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v34 | 7) != 0x17)
            v39 = v34 | 7;
          v40 = v39 + 1;
          v35 = operator new(v39 + 1);
          v115 = v34;
          v116 = v40 | 0x8000000000000000;
          __p = v35;
LABEL_65:
          memmove(v35, v38, v34);
          goto LABEL_66;
        }
        HIBYTE(v116) = v36 - *(_BYTE *)v37;
        v35 = &__p;
        if (v34)
          goto LABEL_65;
LABEL_66:
        *((_BYTE *)v35 + v34) = 0;
        if (v116 >= 0)
          v41 = (char *)&__p;
        else
          v41 = (char *)__p;
        if ((v124 & 0x10) != 0)
        {
          v44 = *((_QWORD *)&v123 + 1);
          v45 = (const void **)&v120;
          if (*((_QWORD *)&v123 + 1) < v121)
          {
            *((_QWORD *)&v123 + 1) = v121;
            v44 = v121;
            v45 = (const void **)&v120;
          }
        }
        else
        {
          if ((v124 & 8) == 0)
          {
            v42 = 0;
            HIBYTE(v113) = 0;
            v43 = &v111;
            goto LABEL_83;
          }
          v44 = v119;
          v45 = (const void **)v118;
        }
        v46 = *v45;
        v42 = v44 - (_QWORD)*v45;
        if (v42 > 0x7FFFFFFFFFFFFFF7)
          sub_19C2A1A54();
        if (v42 >= 0x17)
        {
          v47 = (v42 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v42 | 7) != 0x17)
            v47 = v42 | 7;
          v48 = v47 + 1;
          v43 = operator new(v47 + 1);
          v112 = v42;
          v113 = v48 | 0x8000000000000000;
          v111 = v43;
          v1 = v98;
        }
        else
        {
          HIBYTE(v113) = v44 - *(_BYTE *)v45;
          v43 = &v111;
          if (!v42)
            goto LABEL_83;
        }
        memmove(v43, v46, v42);
LABEL_83:
        *((_BYTE *)v43 + v42) = 0;
        LODWORD(v49) = HIBYTE(v113);
        v50 = SHIBYTE(v113);
        if (v113 < 0)
          LODWORD(v49) = v112;
        if ((int)v49 >= 1)
        {
          v49 = v49;
          do
          {
            v52 = *v41++;
            v51 = v52;
            v53 = v126++;
            v17 = -v53 < 0;
            v54 = -v53 & 0x1F;
            v55 = v53 & 0x1F;
            if (!v17)
              v55 = -v54;
            if ((v127.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v56 = &v127;
            else
              v56 = (std::string *)v127.__r_.__value_.__r.__words[0];
            v56->__r_.__value_.__s.__data_[v55] ^= v51;
            --v49;
          }
          while (v49);
        }
        if (v50 < 0)
          operator delete(v111);
        if (SHIBYTE(v116) < 0)
          operator delete(__p);
        __dst.__r_.__value_.__r.__words[0] = v101;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + *(_QWORD *)(v101 - 24)) = v99;
        __dst.__r_.__value_.__l.__size_ = MEMORY[0x1E0DE4FB8] + 16;
        if (SBYTE7(v123) < 0)
          operator delete((void *)v122);
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x1A1AD34CC](v125);
        if (++v22 >= *(_QWORD *)(v1 + 32))
          goto LABEL_99;
      }
      v28 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v25 | 7) != 0x17)
        v28 = v25 | 7;
      v29 = v28 + 1;
      p_p = operator new(v28 + 1);
      v115 = v26;
      v116 = v29 | 0x8000000000000000;
      __p = p_p;
LABEL_43:
      memmove(p_p, v24, v26);
      goto LABEL_44;
    }
LABEL_99:
    v57 = *(_QWORD **)(v1 + 144);
    v58 = (_QWORD *)(v1 + 152);
    if (v57 != (_QWORD *)(v1 + 152))
    {
      v108 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
      v110 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
      v100 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
      v102 = *MEMORY[0x1E0DE4F60];
      v106 = MEMORY[0x1E0DE4FE0] + 64;
      v104 = MEMORY[0x1E0DE4FB8] + 16;
      v97 = (_QWORD *)(v1 + 152);
      while (v57[4] < *(_QWORD *)(v1 + 32))
      {
LABEL_167:
        v93 = (_QWORD *)v57[1];
        if (v93)
        {
          do
          {
            v94 = v93;
            v93 = (_QWORD *)*v93;
          }
          while (v93);
        }
        else
        {
          do
          {
            v94 = (_QWORD *)v57[2];
            v95 = *v94 == (_QWORD)v57;
            v57 = v94;
          }
          while (!v95);
        }
        v57 = v94;
        if (v94 == v58)
          goto LABEL_173;
      }
      v125[0] = v106;
      __dst.__r_.__value_.__r.__words[0] = v110;
      *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + *(_QWORD *)(v110 - 24)) = v108;
      v59 = (std::ios_base *)((char *)&__dst + *(_QWORD *)(__dst.__r_.__value_.__r.__words[0] - 24));
      std::ios_base::init(v59, &__dst.__r_.__value_.__r.__words[1]);
      v59[1].__vftable = 0;
      v59[1].__fmtflags_ = -1;
      __dst.__r_.__value_.__r.__words[0] = MEMORY[0x1E0DE4FE0] + 24;
      v125[0] = MEMORY[0x1E0DE4FE0] + 64;
      std::streambuf::basic_streambuf();
      __dst.__r_.__value_.__l.__size_ = v104;
      v122 = 0u;
      v123 = 0u;
      v124 = 16;
      v60 = *(const char **)(*(_QWORD *)(v1 + 48) + 8 * v57[5]);
      v61 = strlen(v60);
      if (v61 > 0x7FFFFFFFFFFFFFF7)
        sub_19C2A1A54();
      v62 = v61;
      if (v61 >= 0x17)
      {
        v64 = (v61 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v61 | 7) != 0x17)
          v64 = v61 | 7;
        v65 = v64 + 1;
        v63 = operator new(v64 + 1);
        v115 = v62;
        v116 = v65 | 0x8000000000000000;
        __p = v63;
      }
      else
      {
        HIBYTE(v116) = v61;
        v63 = &__p;
        if (!v61)
        {
LABEL_111:
          *((_BYTE *)v63 + v62) = 0;
          if (v116 >= 0)
            v66 = &__p;
          else
            v66 = __p;
          if (v116 >= 0)
            v67 = HIBYTE(v116);
          else
            v67 = v115;
          v68 = sub_19C2A1B24(&__dst, (uint64_t)v66, v67);
          LOBYTE(v111) = 9;
          sub_19C2A1B24(v68, (uint64_t)&v111, 1);
          std::ostream::operator<<();
          if (SHIBYTE(v116) < 0)
          {
            operator delete(__p);
            v69 = v124;
            if ((v124 & 0x10) == 0)
              goto LABEL_119;
          }
          else
          {
            v69 = v124;
            if ((v124 & 0x10) == 0)
            {
LABEL_119:
              if ((v69 & 8) == 0)
              {
                v70 = 0;
                HIBYTE(v116) = 0;
                v71 = &__p;
                goto LABEL_133;
              }
              v72 = v119;
              v73 = (const void **)v118;
LABEL_125:
              v74 = *v73;
              v70 = v72 - (_QWORD)*v73;
              if (v70 > 0x7FFFFFFFFFFFFFF7)
                sub_19C2A1A54();
              if (v70 >= 0x17)
              {
                v75 = (v70 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v70 | 7) != 0x17)
                  v75 = v70 | 7;
                v76 = v75 + 1;
                v71 = operator new(v75 + 1);
                v115 = v70;
                v116 = v76 | 0x8000000000000000;
                __p = v71;
              }
              else
              {
                HIBYTE(v116) = v72 - *(_BYTE *)v73;
                v71 = &__p;
                if (!v70)
                {
LABEL_133:
                  *((_BYTE *)v71 + v70) = 0;
                  if (v116 >= 0)
                    v77 = (char *)&__p;
                  else
                    v77 = (char *)__p;
                  if ((v124 & 0x10) != 0)
                  {
                    v80 = *((_QWORD *)&v123 + 1);
                    v81 = (const void **)&v120;
                    if (*((_QWORD *)&v123 + 1) < v121)
                    {
                      *((_QWORD *)&v123 + 1) = v121;
                      v80 = v121;
                      v81 = (const void **)&v120;
                    }
                  }
                  else
                  {
                    if ((v124 & 8) == 0)
                    {
                      v78 = 0;
                      HIBYTE(v113) = 0;
                      v79 = &v111;
                      goto LABEL_150;
                    }
                    v80 = v119;
                    v81 = (const void **)v118;
                  }
                  v82 = *v81;
                  v78 = v80 - (_QWORD)*v81;
                  if (v78 > 0x7FFFFFFFFFFFFFF7)
                    sub_19C2A1A54();
                  if (v78 >= 0x17)
                  {
                    v83 = (v78 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v78 | 7) != 0x17)
                      v83 = v78 | 7;
                    v84 = v83 + 1;
                    v79 = operator new(v83 + 1);
                    v112 = v78;
                    v113 = v84 | 0x8000000000000000;
                    v111 = v79;
                  }
                  else
                  {
                    HIBYTE(v113) = v80 - *(_BYTE *)v81;
                    v79 = &v111;
                    if (!v78)
                      goto LABEL_150;
                  }
                  memmove(v79, v82, v78);
LABEL_150:
                  v58 = v97;
                  *((_BYTE *)v79 + v78) = 0;
                  LODWORD(v85) = HIBYTE(v113);
                  v86 = SHIBYTE(v113);
                  if (v113 < 0)
                    LODWORD(v85) = v112;
                  if ((int)v85 >= 1)
                  {
                    v85 = v85;
                    do
                    {
                      v88 = *v77++;
                      v87 = v88;
                      v89 = v126++;
                      v17 = -v89 < 0;
                      v90 = -v89 & 0x1F;
                      v91 = v89 & 0x1F;
                      if (!v17)
                        v91 = -v90;
                      if ((v127.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                        v92 = &v127;
                      else
                        v92 = (std::string *)v127.__r_.__value_.__r.__words[0];
                      v92->__r_.__value_.__s.__data_[v91] ^= v87;
                      --v85;
                    }
                    while (v85);
                  }
                  if (v86 < 0)
                    operator delete(v111);
                  v1 = v98;
                  if (SHIBYTE(v116) < 0)
                    operator delete(__p);
                  __dst.__r_.__value_.__r.__words[0] = v102;
                  *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + *(_QWORD *)(v102 - 24)) = v100;
                  __dst.__r_.__value_.__l.__size_ = MEMORY[0x1E0DE4FB8] + 16;
                  if (SBYTE7(v123) < 0)
                    operator delete((void *)v122);
                  std::streambuf::~streambuf();
                  std::ostream::~ostream();
                  MEMORY[0x1A1AD34CC](v125);
                  goto LABEL_167;
                }
              }
              memmove(v71, v74, v70);
              goto LABEL_133;
            }
          }
          v72 = *((_QWORD *)&v123 + 1);
          v73 = (const void **)&v120;
          if (*((_QWORD *)&v123 + 1) < v121)
          {
            *((_QWORD *)&v123 + 1) = v121;
            v72 = v121;
            v73 = (const void **)&v120;
          }
          goto LABEL_125;
        }
      }
      memmove(v63, v60, v62);
      goto LABEL_111;
    }
LABEL_173:
    if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0)
      sub_19C2B5238(&__dst, v127.__r_.__value_.__l.__data_, v127.__r_.__value_.__l.__size_);
    else
      __dst = v127;
    v96 = (void **)(v1 + 200);
    if (*(char *)(v1 + 223) < 0)
      operator delete(*v96);
    *(_OWORD *)v96 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
    *(_QWORD *)(v1 + 216) = *((_QWORD *)&__dst.__r_.__value_.__l + 2);
    *(_BYTE *)(v1 + 172) = 1;
    if ((SHIBYTE(v127.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if ((SHIBYTE(v129.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return;
LABEL_182:
      operator delete(v129.__r_.__value_.__l.__data_);
      return;
    }
    operator delete(v127.__r_.__value_.__l.__data_);
    if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_182;
  }
}

void sub_19C3A1BC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30)
{
  uint64_t v30;

  if (*(char *)(v30 - 121) < 0)
    operator delete(*(void **)(v30 - 144));
  if (*(char *)(v30 - 89) < 0)
    operator delete(*(void **)(v30 - 112));
  _Unwind_Resume(exception_object);
}

char *sub_19C3A1CD0(char *__dst, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  char *v9;
  char *v10;
  _BYTE *v11;
  _BYTE *v12;
  int64_t v13;
  char *v14;
  char *v15;
  unint64_t v16;
  size_t v17;
  void *v18;
  _BYTE *v19;
  _BYTE *v20;
  int64_t v21;
  char *v22;
  char *v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  char *v31;
  BOOL v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  _OWORD *v38;
  uint64_t v39;
  _QWORD *v40;

  if (*((char *)a2 + 23) < 0)
  {
    sub_19C2B5238(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  v5 = *(__int128 *)((char *)a2 + 24);
  v7 = *((_QWORD *)a2 + 6);
  v6 = *((_QWORD *)a2 + 7);
  *((_QWORD *)__dst + 6) = 0;
  *(_OWORD *)(__dst + 24) = v5;
  *((_QWORD *)__dst + 5) = -1;
  *((_QWORD *)__dst + 7) = 0;
  *((_QWORD *)__dst + 8) = 0;
  v8 = v6 - v7;
  if (v6 == v7)
  {
    v9 = 0;
    v10 = 0;
  }
  else
  {
    if (v8 < 0)
      sub_19C2A18E8();
    v9 = (char *)operator new(v6 - v7);
    *((_QWORD *)__dst + 6) = v9;
    *((_QWORD *)__dst + 8) = &v9[8 * (v8 >> 3)];
    bzero(v9, v8);
    v10 = &v9[v8];
    *((_QWORD *)__dst + 7) = &v9[v8];
  }
  *((_QWORD *)__dst + 10) = 0;
  *((_QWORD *)__dst + 11) = 0;
  *((_QWORD *)__dst + 12) = 0;
  v12 = (_BYTE *)*((_QWORD *)a2 + 10);
  v11 = (_BYTE *)*((_QWORD *)a2 + 11);
  v13 = v11 - v12;
  if (v11 != v12)
  {
    if (v13 < 0)
      sub_19C2A18E8();
    v14 = (char *)operator new(v11 - v12);
    *((_QWORD *)__dst + 10) = v14;
    *((_QWORD *)__dst + 11) = v14;
    v15 = &v14[8 * (v13 >> 3)];
    *((_QWORD *)__dst + 12) = v15;
    memcpy(v14, v12, v13);
    *((_QWORD *)__dst + 11) = v15;
  }
  *((_QWORD *)__dst + 13) = *((_QWORD *)a2 + 13);
  *((_DWORD *)__dst + 28) = *((_DWORD *)a2 + 28);
  if (v10 != v9)
  {
    v16 = 0;
    do
    {
      v17 = strlen(*(const char **)(*((_QWORD *)a2 + 6) + 8 * v16)) + 1;
      v18 = (void *)operator new[]();
      memcpy(v18, *(const void **)(*((_QWORD *)a2 + 6) + 8 * v16), v17);
      *(_QWORD *)(*((_QWORD *)__dst + 6) + 8 * v16++) = v18;
    }
    while (v16 < (uint64_t)(*((_QWORD *)__dst + 7) - *((_QWORD *)__dst + 6)) >> 3);
  }
  *((_QWORD *)__dst + 15) = 0;
  *((_QWORD *)__dst + 16) = 0;
  *((_QWORD *)__dst + 17) = 0;
  v20 = (_BYTE *)*((_QWORD *)a2 + 15);
  v19 = (_BYTE *)*((_QWORD *)a2 + 16);
  v21 = v19 - v20;
  if (v19 != v20)
  {
    if (v21 < 0)
      sub_19C2A18E8();
    v22 = (char *)operator new(v19 - v20);
    *((_QWORD *)__dst + 15) = v22;
    *((_QWORD *)__dst + 16) = v22;
    v23 = &v22[8 * (v21 >> 3)];
    *((_QWORD *)__dst + 17) = v23;
    memcpy(v22, v20, v21);
    *((_QWORD *)__dst + 16) = v23;
  }
  *((_QWORD *)__dst + 19) = 0;
  *((_QWORD *)__dst + 20) = 0;
  *((_QWORD *)__dst + 18) = __dst + 152;
  v24 = (_QWORD *)*((_QWORD *)a2 + 18);
  v25 = (_QWORD *)a2 + 19;
  if (v24 != v25)
  {
    do
    {
      v27 = v24 + 4;
      v28 = (_QWORD *)*((_QWORD *)__dst + 19);
      v29 = __dst + 152;
      if (*((char **)__dst + 18) == __dst + 152)
        goto LABEL_26;
      v30 = (_QWORD *)*((_QWORD *)__dst + 19);
      v31 = __dst + 152;
      if (v28)
      {
        do
        {
          v29 = v30;
          v30 = (_QWORD *)v30[1];
        }
        while (v30);
      }
      else
      {
        do
        {
          v29 = (_QWORD *)*((_QWORD *)v31 + 2);
          v32 = *v29 == (_QWORD)v31;
          v31 = (char *)v29;
        }
        while (v32);
      }
      v33 = *v27;
      if (v29[4] < *v27)
      {
LABEL_26:
        if (v28)
          v34 = v29;
        else
          v34 = __dst + 152;
        if (v28)
          v35 = v29 + 1;
        else
          v35 = __dst + 152;
      }
      else
      {
        v34 = __dst + 152;
        v35 = __dst + 152;
        if (v28)
        {
          v35 = __dst + 152;
          while (1)
          {
            while (1)
            {
              v34 = v28;
              v37 = v28[4];
              if (v33 >= v37)
                break;
              v28 = (_QWORD *)*v34;
              v35 = v34;
              if (!*v34)
                goto LABEL_41;
            }
            if (v37 >= v33)
              break;
            v35 = v34 + 1;
            v28 = (_QWORD *)v34[1];
            if (!v28)
              goto LABEL_41;
          }
        }
      }
      if (*v35)
      {
        v36 = (_QWORD *)v24[1];
        if (v36)
          goto LABEL_44;
      }
      else
      {
LABEL_41:
        v38 = operator new(0x30uLL);
        v38[2] = *(_OWORD *)v27;
        *(_QWORD *)v38 = 0;
        *((_QWORD *)v38 + 1) = 0;
        *((_QWORD *)v38 + 2) = v34;
        *v35 = v38;
        v39 = **((_QWORD **)__dst + 18);
        if (v39)
        {
          *((_QWORD *)__dst + 18) = v39;
          v38 = (_OWORD *)*v35;
        }
        sub_19C2A2310(*((uint64_t **)__dst + 19), (uint64_t *)v38);
        ++*((_QWORD *)__dst + 20);
        v36 = (_QWORD *)v24[1];
        if (v36)
        {
          do
          {
LABEL_44:
            v40 = v36;
            v36 = (_QWORD *)*v36;
          }
          while (v36);
          goto LABEL_19;
        }
      }
      do
      {
        v40 = (_QWORD *)v24[2];
        v32 = *v40 == (_QWORD)v24;
        v24 = v40;
      }
      while (!v32);
LABEL_19:
      v24 = v40;
    }
    while (v40 != v25);
  }
  *((_DWORD *)__dst + 42) = 1;
  __dst[172] = 0;
  *((_OWORD *)__dst + 11) = 0u;
  *((_OWORD *)__dst + 12) = 0u;
  *((_OWORD *)__dst + 13) = 0u;
  return __dst;
}

void sub_19C3A2034(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;
  void **v3;
  void *v5;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 128) = v5;
    operator delete(v5);
  }
  sub_19C3A28A4(v2);
  if ((*(char *)(v1 + 23) & 0x80000000) == 0)
    _Unwind_Resume(a1);
  operator delete(*(void **)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19C3A20C4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  void **v6;
  void **v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  unint64_t v18;
  void **v19;
  char *v20;
  uint64_t v21;
  char *v22;
  void **v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  const double *v27;
  unint64_t v28;
  uint64_t v29;
  float64x2_t v30;
  float64x2_t *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  const char *v35;
  size_t v36;
  size_t v37;
  void **p_dst;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  const char *v58;
  uint64_t v59;
  size_t v60;
  void *v61;
  void *v62;
  const void *v63;
  unint64_t v64;
  char *v65;
  _QWORD *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  _BYTE *v73;
  _QWORD *v75;
  char *v76;
  unint64_t v77;
  uint64_t v78;
  _OWORD *v79;
  char *v80;
  uint64_t v81;
  __int128 v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  char *v86;
  _QWORD *v87;
  char *v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  _BYTE *v93;
  uint64_t **v94;
  char *v95;
  unint64_t v96;
  uint64_t v97;
  _OWORD *v98;
  char *v99;
  uint64_t v100;
  __int128 v101;
  uint64_t *v102;
  uint64_t *v103;
  uint64_t **v104;
  uint64_t **v105;
  uint64_t *v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t *v109;
  char *v110;
  char *v111;
  void **v112;
  uint64_t *__dst;
  size_t v114;
  int64_t v115;
  char v116;

  if (a3 == (uint64_t *)-1)
    return (uint64_t)a3;
  v6 = *(void ***)(a1 + 80);
  v7 = *(void ***)(a1 + 88);
  v112 = (void **)(a1 + 48);
  v8 = (char *)v7 - (char *)v6;
  v9 = v7 - v6;
  if ((float)((float)v9 * 0.75) <= (float)(unint64_t)((uint64_t)(*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 3))
  {
    v10 = v8 >> 2;
    v11 = (v8 >> 2) - v9;
    if (v8 >> 2 <= v9)
    {
      if (v8 >> 2 < v9)
      {
        v7 = &v6[v10];
        *(_QWORD *)(a1 + 88) = v7;
      }
      v19 = (void **)(a1 + 48);
LABEL_27:
      *(_QWORD *)(a1 + 104) = v7 - v6 - 1;
      if (v6 == v7)
        goto LABEL_36;
      v27 = (const double *)(v19 - 1);
      v28 = (char *)v7 - (char *)v6 - 8;
      if (v28 >= 0x78 && (v6 >= v19 || (char *)v6 + (v28 & 0xFFFFFFFFFFFFFFF8) + 8 <= (char *)v27))
      {
        v29 = (v28 >> 3) + 1;
        v30 = vld1q_dup_f64(v27);
        v31 = (float64x2_t *)(v6 + 2);
        v32 = v29 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v31[-1] = v30;
          *v31 = v30;
          v31 += 2;
          v32 -= 4;
        }
        while (v32);
        if (v29 == (v29 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_36:
          v33 = *(_QWORD *)(a1 + 48);
          if (*(_QWORD *)(a1 + 56) != v33)
          {
            v34 = 0;
            while (1)
            {
              v35 = *(const char **)(v33 + 8 * v34);
              v36 = strlen(v35);
              if (v36 >= 0x7FFFFFFFFFFFFFF8)
                sub_19C2A1A54();
              v37 = v36;
              if (v36 >= 0x17)
              {
                v39 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v36 | 7) != 0x17)
                  v39 = v36 | 7;
                v40 = v39 + 1;
                p_dst = (void **)operator new(v39 + 1);
                v114 = v37;
                v115 = v40 | 0x8000000000000000;
                __dst = (uint64_t *)p_dst;
              }
              else
              {
                HIBYTE(v115) = v36;
                p_dst = (void **)&__dst;
                if (!v36)
                  goto LABEL_47;
              }
              memmove(p_dst, v35, v37);
LABEL_47:
              *((_BYTE *)p_dst + v37) = 0;
              if (v115 >= 0)
                v41 = (uint64_t *)&__dst;
              else
                v41 = __dst;
              if (v115 >= 0)
                v42 = HIBYTE(v115);
              else
                v42 = v114;
              v43 = sub_19C2A0F2C((uint64_t)&v116, v41, v42);
              v44 = *(_QWORD *)(a1 + 104);
              if (SHIBYTE(v115) < 0)
                operator delete(__dst);
              v45 = v44 & v43;
              v46 = *(_QWORD *)(a1 + 80);
              v47 = *(_QWORD *)(a1 + 40);
              if (*(_QWORD *)(v46 + 8 * (v44 & v43)) != v47)
              {
                do
                  v45 = *(_QWORD *)(a1 + 104) & (v45 + 1);
                while (*(_QWORD *)(v46 + 8 * v45) != v47);
              }
              *(_QWORD *)(v46 + 8 * v45) = v34++;
              v33 = *(_QWORD *)(a1 + 48);
              if (v34 >= (*(_QWORD *)(a1 + 56) - v33) >> 3)
                goto LABEL_58;
            }
          }
          goto LABEL_58;
        }
        v6 += v29 & 0x3FFFFFFFFFFFFFFCLL;
      }
      do
        *v6++ = *(void **)v27;
      while (v6 != v7);
      goto LABEL_36;
    }
    v12 = *(_QWORD *)(a1 + 96);
    if (v11 <= (v12 - (uint64_t)v7) >> 3)
    {
      bzero(v7, 8 * v11);
      v17 = (char *)&v7[v11];
      *(_QWORD *)(a1 + 88) = v17;
      v19 = v112;
LABEL_26:
      v6 = *(void ***)(a1 + 80);
      v7 = (void **)v17;
      goto LABEL_27;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFDLL)
      goto LABEL_141;
    v13 = v12 - (_QWORD)v6;
    if (v13 >> 2 > v10)
      v10 = v13 >> 2;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v10 = 0x1FFFFFFFFFFFFFFFLL;
    if (v10 >> 61)
      goto LABEL_139;
    v14 = 8 * v10;
    v15 = (char *)operator new(8 * v10);
    v16 = &v15[8 * v9];
    v110 = v15;
    v111 = &v15[v14];
    bzero(v16, 8 * v11);
    v17 = &v16[8 * v11];
    if (v7 == v6)
    {
      v20 = v111;
      v19 = v112;
      goto LABEL_24;
    }
    v18 = (char *)v7 - (char *)v6 - 8;
    v19 = v112;
    if (v18 >= 0x58)
    {
      v20 = v111;
      if ((unint64_t)((char *)v6 - v110) >= 0x20)
      {
        v21 = (v18 >> 3) + 1;
        v22 = &v110[8 * v9 - 16];
        v23 = v7 - 2;
        v24 = v21 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v25 = *(_OWORD *)v23;
          *((_OWORD *)v22 - 1) = *((_OWORD *)v23 - 1);
          *(_OWORD *)v22 = v25;
          v22 -= 32;
          v23 -= 4;
          v24 -= 4;
        }
        while (v24);
        v16 -= 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
        v7 -= v21 & 0x3FFFFFFFFFFFFFFCLL;
        if (v21 == (v21 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_24:
          *(_QWORD *)(a1 + 80) = v16;
          *(_QWORD *)(a1 + 88) = v17;
          *(_QWORD *)(a1 + 96) = v20;
          if (v6)
          {
            operator delete(v6);
            v17 = *(char **)(a1 + 88);
          }
          goto LABEL_26;
        }
      }
    }
    else
    {
      v20 = v111;
    }
    do
    {
      v26 = (uint64_t)*--v7;
      *((_QWORD *)v16 - 1) = v26;
      v16 -= 8;
    }
    while (v7 != v6);
    goto LABEL_24;
  }
LABEL_58:
  v48 = *(char *)(a2 + 23);
  if (v48 >= 0)
    v49 = (uint64_t *)a2;
  else
    v49 = *(uint64_t **)a2;
  if (v48 >= 0)
    v50 = *(unsigned __int8 *)(a2 + 23);
  else
    v50 = *(_QWORD *)(a2 + 8);
  v51 = sub_19C2A0F2C((uint64_t)&__dst, v49, v50);
  v52 = *(_QWORD *)(a1 + 104);
  v53 = *(_QWORD *)(a1 + 80);
  v54 = v51 & v52;
  v55 = *(_QWORD *)(v53 + 8 * (v51 & v52));
  v57 = *(_QWORD *)(a1 + 40);
  v56 = *(_QWORD *)(a1 + 48);
  if (v55 == v57)
  {
LABEL_70:
    *(_QWORD *)(v53 + 8 * v54) = (*(_QWORD *)(a1 + 56) - v56) >> 3;
    v59 = *(unsigned __int8 *)(a2 + 23);
    if ((v59 & 0x80u) != 0)
      v59 = *(_QWORD *)(a2 + 8);
    v60 = v59 + 1;
    v61 = (void *)operator new[]();
    v62 = v61;
    if (*(char *)(a2 + 23) >= 0)
      v63 = (const void *)a2;
    else
      v63 = *(const void **)a2;
    memcpy(v61, v63, v60);
    v65 = *(char **)(a1 + 56);
    v64 = *(_QWORD *)(a1 + 64);
    if ((unint64_t)v65 >= v64)
    {
      v67 = (char *)*v112;
      v68 = v65 - (_BYTE *)*v112;
      v69 = v68 >> 3;
      v70 = (v68 >> 3) + 1;
      if (v70 >> 61)
        sub_19C2A18E8();
      v71 = v64 - (_QWORD)v67;
      if (v71 >> 2 > v70)
        v70 = v71 >> 2;
      if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFF8)
        v72 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v72 = v70;
      if (v72)
      {
        if (v72 >> 61)
          goto LABEL_139;
        v73 = operator new(8 * v72);
      }
      else
      {
        v73 = 0;
      }
      v75 = &v73[8 * v69];
      v76 = &v73[8 * v72];
      *v75 = v62;
      v66 = v75 + 1;
      if (v65 == v67)
      {
        v67 = v65;
      }
      else
      {
        v77 = v65 - v67 - 8;
        if (v77 < 0x58)
          goto LABEL_144;
        if ((unint64_t)(v65 - v73 - v68) < 0x20)
          goto LABEL_144;
        v78 = (v77 >> 3) + 1;
        v79 = &v73[8 * v69 - 16];
        v80 = v65 - 16;
        v81 = v78 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v82 = *(_OWORD *)v80;
          *(v79 - 1) = *((_OWORD *)v80 - 1);
          *v79 = v82;
          v79 -= 2;
          v80 -= 32;
          v81 -= 4;
        }
        while (v81);
        v75 -= v78 & 0x3FFFFFFFFFFFFFFCLL;
        v65 -= 8 * (v78 & 0x3FFFFFFFFFFFFFFCLL);
        if (v78 != (v78 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_144:
          do
          {
            v83 = *((_QWORD *)v65 - 1);
            v65 -= 8;
            *--v75 = v83;
          }
          while (v65 != v67);
          v67 = (char *)*v112;
        }
      }
      *(_QWORD *)(a1 + 48) = v75;
      *(_QWORD *)(a1 + 56) = v66;
      *(_QWORD *)(a1 + 64) = v76;
      if (v67)
        operator delete(v67);
    }
    else
    {
      *(_QWORD *)v65 = v62;
      v66 = v65 + 8;
    }
    *(_QWORD *)(a1 + 56) = v66;
    v84 = (((uint64_t)v66 - *(_QWORD *)(a1 + 48)) >> 3) - 1;
    if ((uint64_t *)v84 == a3 && *(uint64_t **)(a1 + 32) == a3)
    {
      *(_QWORD *)(a1 + 32) = (char *)a3 + 1;
LABEL_134:
      if (*(_QWORD *)(a1 + 24) <= (uint64_t)a3)
        *(_QWORD *)(a1 + 24) = (char *)a3 + 1;
      *(_BYTE *)(a1 + 172) = 0;
      return (uint64_t)a3;
    }
    v86 = *(char **)(a1 + 128);
    v85 = *(_QWORD *)(a1 + 136);
    if ((unint64_t)v86 < v85)
    {
      *(_QWORD *)v86 = a3;
      v87 = v86 + 8;
LABEL_123:
      v104 = (uint64_t **)(a1 + 152);
      v103 = *(uint64_t **)(a1 + 152);
      *(_QWORD *)(a1 + 128) = v87;
      if (v103)
      {
        while (1)
        {
          while (1)
          {
            v105 = (uint64_t **)v103;
            v106 = (uint64_t *)v103[4];
            if ((uint64_t)v106 <= (uint64_t)a3)
              break;
            v103 = *v105;
            v104 = v105;
            if (!*v105)
              goto LABEL_130;
          }
          if ((uint64_t)v106 >= (uint64_t)a3)
            break;
          v103 = v105[1];
          if (!v103)
          {
            v104 = v105 + 1;
            goto LABEL_130;
          }
        }
      }
      else
      {
        v105 = (uint64_t **)(a1 + 152);
LABEL_130:
        v107 = (uint64_t *)v105;
        v105 = (uint64_t **)operator new(0x30uLL);
        v105[4] = a3;
        v105[5] = 0;
        *v105 = 0;
        v105[1] = 0;
        v105[2] = v107;
        *v104 = (uint64_t *)v105;
        v108 = **(_QWORD **)(a1 + 144);
        v109 = (uint64_t *)v105;
        if (v108)
        {
          *(_QWORD *)(a1 + 144) = v108;
          v109 = *v104;
        }
        sub_19C2A2310(*(uint64_t **)(a1 + 152), v109);
        ++*(_QWORD *)(a1 + 160);
      }
      v105[5] = (uint64_t *)v84;
      goto LABEL_134;
    }
    v88 = *(char **)(a1 + 120);
    v89 = (v86 - v88) >> 3;
    v90 = v89 + 1;
    if (!((unint64_t)(v89 + 1) >> 61))
    {
      v91 = v85 - (_QWORD)v88;
      if (v91 >> 2 > v90)
        v90 = v91 >> 2;
      if ((unint64_t)v91 >= 0x7FFFFFFFFFFFFFF8)
        v92 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v92 = v90;
      if (!v92)
      {
        v93 = 0;
LABEL_114:
        v94 = (uint64_t **)&v93[8 * v89];
        v95 = &v93[8 * v92];
        *v94 = a3;
        v87 = v94 + 1;
        if (v86 != v88)
        {
          v96 = v86 - v88 - 8;
          if (v96 < 0x58)
            goto LABEL_145;
          if ((unint64_t)(v88 - v93) < 0x20)
            goto LABEL_145;
          v97 = (v96 >> 3) + 1;
          v98 = &v93[8 * v89 - 16];
          v99 = v86 - 16;
          v100 = v97 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v101 = *(_OWORD *)v99;
            *(v98 - 1) = *((_OWORD *)v99 - 1);
            *v98 = v101;
            v98 -= 2;
            v99 -= 32;
            v100 -= 4;
          }
          while (v100);
          v94 -= v97 & 0x3FFFFFFFFFFFFFFCLL;
          v86 -= 8 * (v97 & 0x3FFFFFFFFFFFFFFCLL);
          if (v97 != (v97 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_145:
            do
            {
              v102 = (uint64_t *)*((_QWORD *)v86 - 1);
              v86 -= 8;
              *--v94 = v102;
            }
            while (v86 != v88);
          }
        }
        *(_QWORD *)(a1 + 120) = v94;
        *(_QWORD *)(a1 + 128) = v87;
        *(_QWORD *)(a1 + 136) = v95;
        if (v88)
        {
          operator delete(v88);
          v84 = ((uint64_t)(*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 3) - 1;
        }
        goto LABEL_123;
      }
      if (!(v92 >> 61))
      {
        v93 = operator new(8 * v92);
        goto LABEL_114;
      }
LABEL_139:
      sub_19C2A143C();
    }
LABEL_141:
    sub_19C2A18E8();
  }
  if (*(char *)(a2 + 23) >= 0)
    v58 = (const char *)a2;
  else
    v58 = *(const char **)a2;
  while (strcmp(*(const char **)(v56 + 8 * v55), v58))
  {
    v54 = (v54 + 1) & v52;
    v55 = *(_QWORD *)(v53 + 8 * v54);
    if (v55 == v57)
      goto LABEL_70;
  }
  return sub_19C3A0E3C((_QWORD *)a1, v55);
}

_QWORD *sub_19C3A28A4(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  void *v6;

  v4 = a1 + 1;
  v2 = (_QWORD *)a1[1];
  v3 = (_QWORD *)v4[1];
  if (v3 == v2)
  {
    v2 = v3;
  }
  else
  {
    v5 = 0;
    do
    {
      if (v2[v5])
      {
        MEMORY[0x1A1AD3538](v2[v5], 0x1000C8077774924);
        v2 = (_QWORD *)a1[1];
        v3 = (_QWORD *)a1[2];
      }
      ++v5;
    }
    while (v5 < v3 - v2);
  }
  v6 = (void *)a1[5];
  if (v6)
  {
    a1[6] = v6;
    operator delete(v6);
    v2 = (_QWORD *)a1[1];
  }
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_19C3A2938(uint64_t a1)
{
  void *v2;
  _QWORD *v3;
  _BYTE *v4;
  unint64_t v5;
  void *v6;

  if (*(char *)(a1 + 223) < 0)
  {
    operator delete(*(void **)(a1 + 200));
    if ((*(char *)(a1 + 199) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((*(char *)(a1 + 199) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 176));
LABEL_3:
  sub_19C33275C(*(_QWORD **)(a1 + 152));
  v2 = *(void **)(a1 + 120);
  if (v2)
  {
    *(_QWORD *)(a1 + 128) = v2;
    operator delete(v2);
  }
  v3 = *(_QWORD **)(a1 + 48);
  v4 = *(_BYTE **)(a1 + 56);
  if (v4 == (_BYTE *)v3)
  {
    v3 = *(_QWORD **)(a1 + 56);
  }
  else
  {
    v5 = 0;
    do
    {
      if (v3[v5])
      {
        MEMORY[0x1A1AD3538](v3[v5], 0x1000C8077774924);
        v3 = *(_QWORD **)(a1 + 48);
        v4 = *(_BYTE **)(a1 + 56);
      }
      ++v5;
    }
    while (v5 < (v4 - (_BYTE *)v3) >> 3);
  }
  v6 = *(void **)(a1 + 80);
  if (v6)
  {
    *(_QWORD *)(a1 + 88) = v6;
    operator delete(v6);
    v3 = *(_QWORD **)(a1 + 48);
  }
  if (v3)
  {
    *(_QWORD *)(a1 + 56) = v3;
    operator delete(v3);
  }
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

BOOL sub_19C3A2A20(__CFBundle *a1)
{
  const __CFDictionary *InfoDictionary;
  const __CFArray *Value;
  const __CFArray *v3;
  const __CFDictionary *ValueAtIndex;
  const __CFNumber *v5;
  int valuePtr;

  InfoDictionary = CFBundleGetInfoDictionary(a1);
  if (!InfoDictionary)
    __assert_rtn("_getInfoDictionary", "BlocklistBundle.cpp", 218, "d && \"An Info.plist file was unable to be read from the bundle\"");
  Value = (const __CFArray *)CFDictionaryGetValue(InfoDictionary, CFSTR("Contents"));
  if (!Value)
    __assert_rtn("_getContents", "BlocklistBundle.cpp", 229, "(contents != 0) && \"There should files contained within the blocklist bundle\"");
  v3 = Value;
  if (CFArrayGetCount(Value) != 1)
    return 0;
  ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v3, 0);
  valuePtr = 0;
  v5 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, CFSTR("Type"));
  CFNumberGetValue(v5, kCFNumberIntType, &valuePtr);
  return valuePtr == 10;
}

uint64_t sub_19C3A2AE4(__CFBundle *a1)
{
  const __CFDictionary *InfoDictionary;
  const __CFArray *Value;
  const __CFArray *v3;
  CFIndex Count;
  char v5;
  CFIndex v6;
  CFIndex v7;
  char v8;
  char v9;
  const __CFDictionary *ValueAtIndex;
  const __CFNumber *v11;
  int valuePtr;

  InfoDictionary = CFBundleGetInfoDictionary(a1);
  if (!InfoDictionary)
    __assert_rtn("_getInfoDictionary", "BlocklistBundle.cpp", 218, "d && \"An Info.plist file was unable to be read from the bundle\"");
  Value = (const __CFArray *)CFDictionaryGetValue(InfoDictionary, CFSTR("Contents"));
  if (!Value)
    __assert_rtn("_getContents", "BlocklistBundle.cpp", 229, "(contents != 0) && \"There should files contained within the blocklist bundle\"");
  v3 = Value;
  Count = CFArrayGetCount(Value);
  if (Count >= 2)
  {
    v6 = Count;
    v7 = 0;
    v8 = 0;
    v9 = 0;
    do
    {
      ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v3, v7);
      valuePtr = 0;
      v11 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, CFSTR("Type"));
      CFNumberGetValue(v11, kCFNumberIntType, &valuePtr);
      v9 |= valuePtr == 41;
      v8 |= valuePtr == 42;
      ++v7;
    }
    while (v6 != v7);
    v5 = v9 & v8;
  }
  else
  {
    v5 = 0;
  }
  return v5 & 1;
}

uint64_t sub_19C3A2BF0(__CFBundle *a1)
{
  const __CFDictionary *InfoDictionary;
  const __CFArray *Value;
  const __CFArray *v3;
  CFIndex Count;
  char v5;
  CFIndex v6;
  CFIndex v7;
  char v8;
  char v9;
  const __CFDictionary *ValueAtIndex;
  const __CFNumber *v11;
  int valuePtr;

  InfoDictionary = CFBundleGetInfoDictionary(a1);
  if (!InfoDictionary)
    __assert_rtn("_getInfoDictionary", "BlocklistBundle.cpp", 218, "d && \"An Info.plist file was unable to be read from the bundle\"");
  Value = (const __CFArray *)CFDictionaryGetValue(InfoDictionary, CFSTR("Contents"));
  if (!Value)
    __assert_rtn("_getContents", "BlocklistBundle.cpp", 229, "(contents != 0) && \"There should files contained within the blocklist bundle\"");
  v3 = Value;
  Count = CFArrayGetCount(Value);
  if (Count >= 2)
  {
    v6 = Count;
    v7 = 0;
    v8 = 0;
    v9 = 0;
    do
    {
      ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v3, v7);
      valuePtr = 0;
      v11 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, CFSTR("Type"));
      CFNumberGetValue(v11, kCFNumberIntType, &valuePtr);
      v9 |= valuePtr == 41;
      v8 |= valuePtr == 53;
      ++v7;
    }
    while (v6 != v7);
    v5 = v9 & v8;
  }
  else
  {
    v5 = 0;
  }
  return v5 & 1;
}

__CFDictionary *sub_19C3A2CFC(CFURLRef *a1, const __CFDictionary *a2)
{
  const __CFAllocator *v4;
  __CFDictionary *Mutable;
  const __CFNumber *Value;
  const void *v7;
  const __CFString *v8;
  CFURLRef v9;
  CFNumberRef v10;
  int v12;
  void *valuePtr;

  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  LODWORD(valuePtr) = 0;
  Value = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("Type"));
  CFNumberGetValue(Value, kCFNumberIntType, &valuePtr);
  v12 = (int)valuePtr;
  v7 = CFDictionaryGetValue(a2, CFSTR("Name"));
  v8 = CFStringCreateWithFormat(v4, 0, CFSTR("%@.%@"), v7, CFSTR("dat"));
  valuePtr = (void *)v8;
  v9 = CFURLCreateCopyAppendingPathComponent(v4, *a1, v8, 0);
  if (v8)
    CFRelease(v8);
  v10 = CFNumberCreate(v4, kCFNumberIntType, &v12);
  valuePtr = v10;
  CFDictionarySetValue(Mutable, CFSTR("Name"), v7);
  CFDictionarySetValue(Mutable, CFSTR("URL"), v9);
  CFDictionarySetValue(Mutable, CFSTR("Type"), v10);
  if (v10)
    CFRelease(v10);
  if (v9)
    CFRelease(v9);
  return Mutable;
}

void sub_19C3A2E68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_19C31352C((const void **)va);
  _Unwind_Resume(a1);
}

void sub_19C3A2EA0(_QWORD *a1, CFURLRef *a2)
{
  const __CFDictionary *InfoDictionary;
  const __CFArray *Value;
  const __CFArray *v6;
  CFIndex v7;
  const __CFDictionary *ValueAtIndex;
  const __CFNumber *v9;
  __CFDictionary *v10;
  _QWORD *v11;
  _QWORD *exception;
  __int128 valuePtr;

  if ((sub_19C3A2AE4(a2[1]) & 1) == 0 && (sub_19C3A2BF0(a2[1]) & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    sub_19C2A6D48(&valuePtr, "Malformed lemmatized/V3 blocklist bundle configuration: cannot load the lemmatized blocklist resource");
    sub_19C31237C(exception, &valuePtr);
    __cxa_throw(exception, (struct type_info *)&unk_1E3D32968, (void (*)(void *))sub_19C3123E4);
  }
  InfoDictionary = CFBundleGetInfoDictionary(a2[1]);
  if (!InfoDictionary)
    __assert_rtn("_getInfoDictionary", "BlocklistBundle.cpp", 218, "d && \"An Info.plist file was unable to be read from the bundle\"");
  Value = (const __CFArray *)CFDictionaryGetValue(InfoDictionary, CFSTR("Contents"));
  if (!Value)
    __assert_rtn("_getContents", "BlocklistBundle.cpp", 229, "(contents != 0) && \"There should files contained within the blocklist bundle\"");
  v6 = Value;
  v7 = 0;
  do
  {
    if (v7 >= CFArrayGetCount(v6))
    {
      *a1 = 0;
      return;
    }
    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v6, v7);
    LODWORD(valuePtr) = 0;
    v9 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, CFSTR("Type"));
    CFNumberGetValue(v9, kCFNumberIntType, &valuePtr);
    ++v7;
  }
  while ((_DWORD)valuePtr != 41);
  v10 = sub_19C3A2CFC(a2, ValueAtIndex);
  *(_QWORD *)&valuePtr = v10;
  v11 = (_QWORD *)operator new();
  v11[1] = 0;
  *v11 = CFRetain(v10);
  *a1 = v11;
  if (v10)
    CFRelease(v10);
}

void sub_19C3A3048(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) != 0)
    {
LABEL_6:
      __cxa_free_exception(v15);
      _Unwind_Resume(a1);
    }
  }
  else if (v16)
  {
    goto LABEL_6;
  }
  _Unwind_Resume(a1);
}

void sub_19C3A3088(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  MEMORY[0x1A1AD355C](v2, 0x1060C40C2E02434);
  sub_19C31D680((const void **)va);
  _Unwind_Resume(a1);
}

void sub_19C3A30BC(int a1, CFURLRef url)
{
  _QWORD *exception;
  stat v4;
  uint64_t v5;
  CFStringRef PathComponent;

  PathComponent = CFURLCopyLastPathComponent(url);
  if (CFStringHasSuffix(PathComponent, CFSTR(".lm")))
    sub_19C2E15E8(url, &v5);
  exception = __cxa_allocate_exception(0x20uLL);
  sub_19C2A6D48(&v4, "invalid bundle");
  sub_19C31237C(exception, (__int128 *)&v4.st_dev);
  __cxa_throw(exception, (struct type_info *)&unk_1E3D32968, (void (*)(void *))sub_19C3123E4);
}

void sub_19C3A3974(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, int a20,__int16 a21,char a22,char a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  void *v33;
  int v34;
  uint64_t v35;

  if (*(char *)(v35 - 89) < 0)
  {
    operator delete(*(void **)(v35 - 112));
    if (*(char *)(v35 - 129) < 0)
    {
LABEL_5:
      operator delete(*(void **)(v35 - 152));
      if ((*(char *)(v35 - 153) & 0x80000000) == 0)
      {
LABEL_10:
        if (!v34)
          goto LABEL_12;
        goto LABEL_11;
      }
LABEL_8:
      operator delete(*(void **)(v35 - 176));
      if ((v34 & 1) == 0)
      {
LABEL_12:
        if (*(char *)(v35 - 185) < 0)
          operator delete(*(void **)(v35 - 208));
        sub_19C2FE810((const void **)(v35 - 184));
        _Unwind_Resume(a1);
      }
LABEL_11:
      __cxa_free_exception(v33);
      goto LABEL_12;
    }
  }
  else if (*(char *)(v35 - 129) < 0)
  {
    goto LABEL_5;
  }
  if ((*(char *)(v35 - 153) & 0x80000000) == 0)
    goto LABEL_10;
  goto LABEL_8;
}

uint64_t sub_19C3A3C5C(uint64_t a1, const void **a2, CFErrorRef err)
{
  void **v5;
  const __CFString *v6;
  int v7;
  size_t v8;
  unint64_t v9;
  std::string *p_dst;
  uint64_t v11;
  uint64_t v12;
  const void *v13;
  void **v14;
  std::string::size_type v15;
  std::string *v16;
  std::string::size_type v17;
  char v18;
  uint64_t v19;
  void *__p[2];
  unsigned __int8 v22;
  std::string __dst;
  const __CFString *v24;
  _QWORD v25[3];

  v25[2] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = off_1E3D38838;
  *(_QWORD *)(a1 + 8) = 0;
  v5 = (void **)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v6 = CFErrorCopyDescription(err);
  v24 = v6;
  v7 = *((char *)a2 + 23);
  if (v7 >= 0)
    v8 = *((unsigned __int8 *)a2 + 23);
  else
    v8 = (size_t)a2[1];
  v9 = v8 + 2;
  if (v8 + 2 >= 0x7FFFFFFFFFFFFFF8)
    sub_19C2A1A54();
  if (v9 >= 0x17)
  {
    v11 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v11 = v9 | 7;
    v12 = v11 + 1;
    p_dst = (std::string *)operator new(v11 + 1);
    __dst.__r_.__value_.__l.__size_ = v8 + 2;
    __dst.__r_.__value_.__r.__words[2] = v12 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v8 + 2;
    if (!v8)
      goto LABEL_15;
  }
  if (v7 >= 0)
    v13 = a2;
  else
    v13 = *a2;
  memmove(p_dst, v13, v8);
LABEL_15:
  strcpy((char *)p_dst + v8, ": ");
  sub_19C29CEF8(v6, __p);
  if ((v22 & 0x80u) == 0)
    v14 = __p;
  else
    v14 = (void **)__p[0];
  if ((v22 & 0x80u) == 0)
    v15 = v22;
  else
    v15 = (std::string::size_type)__p[1];
  v16 = std::string::append(&__dst, (const std::string::value_type *)v14, v15);
  v17 = v16->__r_.__value_.__r.__words[0];
  v25[0] = v16->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)v25 + 7) = *(std::string::size_type *)((char *)&v16->__r_.__value_.__r.__words[1] + 7);
  v18 = HIBYTE(v16->__r_.__value_.__r.__words[2]);
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*v5);
  v19 = v25[0];
  *(_QWORD *)(a1 + 8) = v17;
  *(_QWORD *)(a1 + 16) = v19;
  *(_QWORD *)(a1 + 23) = *(_QWORD *)((char *)v25 + 7);
  *(_BYTE *)(a1 + 31) = v18;
  if ((char)v22 < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_25:
      if (!v6)
        return a1;
      goto LABEL_29;
    }
  }
  else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_25;
  }
  operator delete(__dst.__r_.__value_.__l.__data_);
  if (v6)
LABEL_29:
    CFRelease(v6);
  return a1;
}

void sub_19C3A3E50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a2)
    sub_19C2CDAC8(exception_object);
  _Unwind_Resume(exception_object);
}

BOOL sub_19C3A3EC4(CFURLRef fileURL, const void *a2, int a3)
{
  _BOOL8 result;
  __CFError *v4;
  _QWORD *exception;
  void *v6;
  __int128 v7;
  CFErrorRef v8;
  CFErrorRef v9;

  v9 = 0;
  result = sub_19C2E1684(a2, fileURL, kCFPropertyListXMLFormat_v1_0, a3 == 1, &v9);
  if (!result)
  {
    v4 = v9;
    if (!v9)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      sub_19C2A6D48(&v7, "writeInfoDictionary failed: unspecified error");
      sub_19C31237C(exception, &v7);
      __cxa_throw(exception, (struct type_info *)&unk_1E3D32968, (void (*)(void *))sub_19C3123E4);
    }
    v8 = v9;
    v6 = __cxa_allocate_exception(0x20uLL);
    sub_19C2A6D48(&v7, "writeInfoDictionary failed:");
    sub_19C3A3C5C((uint64_t)v6, (const void **)&v7, v4);
    __cxa_throw(v6, (struct type_info *)&unk_1E3D32968, (void (*)(void *))sub_19C3123E4);
  }
  return result;
}

void sub_19C3A3FBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, const void *a16)
{
  void *v16;
  int v17;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v17 & 1) == 0)
    {
LABEL_6:
      sub_19C354BD8(&a16);
      _Unwind_Resume(a1);
    }
  }
  else if (!v17)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v16);
  goto LABEL_6;
}

void sub_19C3A4034(uint64_t a1, int a2, const __CFString *a3)
{
  std::mutex *v5;
  __CFArray *Mutable;
  CFIndex i;
  const __CFDictionary *ValueAtIndex;
  const __CFString *Value;
  __CFDictionary *v10;
  CFNumberRef v11;
  CFNumberRef v12;
  const void *v13;
  uint64_t v14;
  int valuePtr;

  valuePtr = a2;
  v14 = 0;
  v5 = (std::mutex *)(a1 + 64);
  std::mutex::lock((std::mutex *)(a1 + 64));
  if (*(_QWORD *)(a1 + 56))
  {
    Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
    for (i = 0; i < CFArrayGetCount(*(CFArrayRef *)(a1 + 56)); ++i)
    {
      ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 56), i);
      Value = (const __CFString *)CFDictionaryGetValue(ValueAtIndex, CFSTR("Name"));
      if (Value)
      {
        if (CFStringCompare(Value, a3, 0))
          CFArrayAppendValue(Mutable, ValueAtIndex);
      }
    }
    v10 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v11 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    v12 = CFNumberCreate(0, kCFNumberCFIndexType, &v14);
    CFDictionarySetValue(v10, CFSTR("Name"), a3);
    CFDictionarySetValue(v10, CFSTR("Type"), v11);
    CFDictionarySetValue(v10, CFSTR("Priority"), v12);
    CFArrayAppendValue(Mutable, v10);
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 48), CFSTR("Contents"), Mutable);
    v13 = *(const void **)(a1 + 56);
    if (v13)
      CFRelease(v13);
    *(_QWORD *)(a1 + 56) = Mutable;
    sub_19C3A3EC4(*(CFURLRef *)(a1 + 8), *(const void **)(a1 + 48), *(_DWORD *)a1);
    if (v12)
      CFRelease(v12);
    if (v11)
      CFRelease(v11);
    if (v10)
      CFRelease(v10);
  }
  std::mutex::unlock(v5);
}

void sub_19C3A421C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  std::mutex *v2;
  const void *v4;
  va_list va;
  const void *v6;
  va_list va1;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, const void *);
  va_copy(va2, va1);
  v6 = va_arg(va2, const void *);
  sub_19C347E20((const void **)va);
  sub_19C32BBE4((const void **)va1);
  sub_19C3134C4((const void **)va2);
  std::mutex::unlock(v2);
  _Unwind_Resume(a1);
}

CFURLRef sub_19C3A427C(uint64_t a1, CFStringRef theString)
{
  const __CFString *v4;
  const __CFString *v5;
  CFURLRef v6;

  if (CFStringFind(theString, CFSTR("."), 0).location == -1)
    v4 = CFStringCreateWithFormat(0, 0, CFSTR("%@.dat"), theString);
  else
    v4 = CFStringCreateWithFormat(0, 0, CFSTR("%@"), theString);
  v5 = v4;
  v6 = CFURLCreateCopyAppendingPathComponent(0, *(CFURLRef *)(a1 + 16), v4, 0);
  if (v5)
    CFRelease(v5);
  return v6;
}

void sub_19C3A4314(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C2FE810((const void **)va);
  _Unwind_Resume(a1);
}

BOOL sub_19C3A4328(uint64_t a1, const __CFString *a2)
{
  std::mutex *v4;
  CFIndex v5;
  CFIndex Count;
  _BOOL8 v7;
  const __CFDictionary *ValueAtIndex;
  const __CFString *Value;

  v4 = (std::mutex *)(a1 + 64);
  std::mutex::lock((std::mutex *)(a1 + 64));
  if (*(_QWORD *)(a1 + 56))
  {
    v5 = 0;
    while (1)
    {
      Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 56));
      v7 = v5 < Count;
      if (v5 >= Count)
        break;
      ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 56), v5);
      Value = (const __CFString *)CFDictionaryGetValue(ValueAtIndex, CFSTR("Name"));
      ++v5;
      if (CFStringCompare(Value, a2, 0) == kCFCompareEqualTo)
      {
        v7 = 1;
        break;
      }
    }
  }
  else
  {
    v7 = 0;
  }
  std::mutex::unlock(v4);
  return v7;
}

void sub_19C3A43CC(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

BOOL sub_19C3A43E8(const void *a1)
{
  const __CFNumber *Value;
  unsigned __int16 v3;
  NSObject *v4;
  _BOOL8 v5;
  CFDictionaryRef v6;
  void *exception;
  void *v9;
  CFDictionaryRef theDict;
  uint8_t buf[4];
  const char *v12;
  __int16 v13;
  const __CFString *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    theDict = 0;
LABEL_17:
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD3154](exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  CFRetain(a1);
  sub_19C29438C(&theDict, a1);
  if (!theDict)
    goto LABEL_17;
  if (CFDictionaryContainsKey(theDict, CFSTR("TrainedWithUNK")))
  {
    if (!theDict)
    {
      v9 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1A1AD3154](v9, "Could not construct");
      __cxa_throw(v9, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
    }
    Value = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("TrainedWithUNK"));
    if (Value)
    {
      v3 = sub_19C2F57F4(Value);
      if (v3 > 0xFFu)
      {
        v5 = v3 != 0;
        v6 = theDict;
        if (!theDict)
          return v5;
        goto LABEL_12;
      }
    }
    if (qword_1EDB97228 != -1)
      dispatch_once(&qword_1EDB97228, &unk_1E3D3ABD0);
    v4 = qword_1EDB97220;
    if (os_log_type_enabled((os_log_t)qword_1EDB97220, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v12 = "modelWasTrainedWithUNK";
      v13 = 2112;
      v14 = CFSTR("TrainedWithUNK");
      _os_log_error_impl(&dword_19C291000, v4, OS_LOG_TYPE_ERROR, "%s: Malformed options dictionary: invalid value for key='%@'", buf, 0x16u);
    }
  }
  v5 = 0;
  v6 = theDict;
  if (theDict)
LABEL_12:
    CFRelease(v6);
  return v5;
}

void sub_19C3A45B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C2E5608((const void **)va);
  _Unwind_Resume(a1);
}

unint64_t sub_19C3A460C(uint64_t **a1, uint64_t a2, const char *a3, int a4)
{
  unint64_t v8;
  uint64_t *v9;
  uint64_t **v10;
  uint64_t **v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t **v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  unint64_t v20;
  BOOL v21;
  uint64_t **v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t **v26;
  uint64_t **v27;
  int v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t *v32;
  BOOL v33;
  sqlite3_stmt *v34;

  v8 = operator new();
  *(_QWORD *)v8 = a1;
  *(_QWORD *)(v8 + 8) = 0;
  *(_QWORD *)(v8 + 16) = a2;
  *(_DWORD *)(v8 + 24) = 1;
  sub_19C3A48A0(v8, a3);
  if (*(_QWORD *)(v8 + 8))
  {
    v10 = a1 + 1;
    v9 = a1[1];
    if (v9)
    {
      while (1)
      {
        while (1)
        {
          v11 = (uint64_t **)v9;
          v12 = v9[4];
          if (v12 <= v8)
            break;
          v9 = *v11;
          v10 = v11;
          if (!*v11)
            goto LABEL_9;
        }
        if (v12 >= v8)
          break;
        v9 = v11[1];
        if (!v9)
        {
          v10 = v11 + 1;
          goto LABEL_9;
        }
      }
    }
    else
    {
      v11 = a1 + 1;
LABEL_9:
      v13 = (uint64_t *)operator new(0x28uLL);
      v13[4] = v8;
      *v13 = 0;
      v13[1] = 0;
      v13[2] = (uint64_t)v11;
      *v10 = v13;
      v14 = (uint64_t *)**a1;
      if (v14)
      {
        *a1 = v14;
        v15 = *v10;
      }
      else
      {
        v15 = v13;
      }
      sub_19C2A2310(a1[1], v15);
      a1[2] = (uint64_t *)((char *)a1[2] + 1);
    }
    v26 = a1 + 4;
    v25 = a1[4];
    if (v25)
    {
      while (1)
      {
        while (1)
        {
          v27 = (uint64_t **)v25;
          v28 = *((_DWORD *)v25 + 8);
          if (v28 <= a4)
            break;
          v25 = *v27;
          v26 = v27;
          if (!*v27)
            goto LABEL_35;
        }
        if (v28 >= a4)
          break;
        v25 = v27[1];
        if (!v25)
        {
          v26 = v27 + 1;
          goto LABEL_35;
        }
      }
    }
    else
    {
      v27 = a1 + 4;
LABEL_35:
      v29 = (uint64_t *)v27;
      v27 = (uint64_t **)operator new(0x30uLL);
      *((_DWORD *)v27 + 8) = a4;
      v27[5] = 0;
      *v27 = 0;
      v27[1] = 0;
      v27[2] = v29;
      *v26 = (uint64_t *)v27;
      v30 = (uint64_t *)*a1[3];
      v31 = (uint64_t *)v27;
      if (v30)
      {
        a1[3] = v30;
        v31 = *v26;
      }
      sub_19C2A2310(a1[4], v31);
      a1[5] = (uint64_t *)((char *)a1[5] + 1);
    }
    v27[5] = (uint64_t *)v8;
  }
  else
  {
    v16 = *(uint64_t ***)v8;
    if (*(_QWORD *)v8)
    {
      v17 = v16[1];
      if (v17)
      {
        v18 = (uint64_t *)(v16 + 1);
        v19 = v16[1];
        do
        {
          v20 = v19[4];
          v21 = v20 >= v8;
          if (v20 >= v8)
            v22 = (uint64_t **)v19;
          else
            v22 = (uint64_t **)(v19 + 1);
          if (v21)
            v18 = v19;
          v19 = *v22;
        }
        while (*v22);
        if (v18 != (uint64_t *)(v16 + 1) && v18[4] <= v8)
        {
          v23 = (uint64_t *)v18[1];
          if (v23)
          {
            do
            {
              v24 = v23;
              v23 = (uint64_t *)*v23;
            }
            while (v23);
          }
          else
          {
            v32 = v18;
            do
            {
              v24 = (uint64_t *)v32[2];
              v33 = *v24 == (_QWORD)v32;
              v32 = v24;
            }
            while (!v33);
          }
          if (*v16 == v18)
            *v16 = v24;
          v16[2] = (uint64_t *)((char *)v16[2] - 1);
          sub_19C2D9DF4(v17, v18);
          operator delete(v18);
          v34 = *(sqlite3_stmt **)(v8 + 8);
          if (v34)
          {
            sqlite3_finalize(v34);
            *(_QWORD *)(v8 + 8) = 0;
          }
        }
      }
    }
    MEMORY[0x1A1AD355C](v8, 0x1020C4055CCDE27);
    return 0;
  }
  return v8;
}

void sub_19C3A487C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD355C](v1, 0x1020C4055CCDE27);
  _Unwind_Resume(a1);
}

uint64_t sub_19C3A48A0(uint64_t a1, const char *a2)
{
  sqlite3 *v3;
  uint64_t result;
  void *exception;

  v3 = *(sqlite3 **)(a1 + 16);
  if (!v3)
    goto LABEL_9;
  result = sqlite3_prepare_v2(v3, a2, -1, (sqlite3_stmt **)(a1 + 8), 0);
  if ((_DWORD)result)
  {
    if ((_DWORD)result == 26 || (_DWORD)result == 11)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      sub_19C314618((uint64_t)exception, 1);
      goto LABEL_10;
    }
LABEL_9:
    exception = __cxa_allocate_exception(0x20uLL);
    sub_19C314618((uint64_t)exception, 5);
LABEL_10:
    __cxa_throw(exception, (struct type_info *)&unk_1E3D31E20, (void (*)(void *))sub_19C3146A4);
  }
  return result;
}

void sub_19C3A4940(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unint64_t sub_19C3A495C(unint64_t a1)
{
  uint64_t **v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  unint64_t v6;
  BOOL v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  BOOL v12;
  sqlite3_stmt *v13;

  v2 = *(uint64_t ***)a1;
  if (*(_QWORD *)a1)
  {
    v3 = v2[1];
    if (v3)
    {
      v4 = (uint64_t *)(v2 + 1);
      v5 = v2[1];
      do
      {
        v6 = v5[4];
        v7 = v6 >= a1;
        if (v6 >= a1)
          v8 = (uint64_t **)v5;
        else
          v8 = (uint64_t **)(v5 + 1);
        if (v7)
          v4 = v5;
        v5 = *v8;
      }
      while (*v8);
      if (v4 != (uint64_t *)(v2 + 1) && v4[4] <= a1)
      {
        v9 = (uint64_t *)v4[1];
        if (v9)
        {
          do
          {
            v10 = v9;
            v9 = (uint64_t *)*v9;
          }
          while (v9);
        }
        else
        {
          v11 = v4;
          do
          {
            v10 = (uint64_t *)v11[2];
            v12 = *v10 == (_QWORD)v11;
            v11 = v10;
          }
          while (!v12);
        }
        if (*v2 == v4)
          *v2 = v10;
        v2[2] = (uint64_t *)((char *)v2[2] - 1);
        sub_19C2D9DF4(v3, v4);
        operator delete(v4);
      }
    }
  }
  v13 = *(sqlite3_stmt **)(a1 + 8);
  if (v13)
  {
    sqlite3_finalize(v13);
    *(_QWORD *)(a1 + 8) = 0;
  }
  return a1;
}

uint64_t sub_19C3A4A38(uint64_t a1)
{
  int v2;
  char v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  void *exception;

  *(_DWORD *)(a1 + 24) = 1;
  v2 = sqlite3_reset(*(sqlite3_stmt **)(a1 + 8));
  if (v2)
  {
    v3 = v2;
    if (qword_1EDB97100 != -1)
      dispatch_once(&qword_1EDB97100, &unk_1E3D3BED0);
    v4 = (int *)qword_1EDB970F8;
    sqlite3_errmsg(*(sqlite3 **)(a1 + 16));
    sub_19C3E8FF4(v4, v5, "Could not reset statement, error code: %d error message: %s\n", v6, v7, v8, v9, v10, v3);
  }
  result = sqlite3_clear_bindings(*(sqlite3_stmt **)(a1 + 8));
  if ((_DWORD)result)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    sub_19C314618((uint64_t)exception, 3);
    __cxa_throw(exception, (struct type_info *)&unk_1E3D31E20, (void (*)(void *))sub_19C3146A4);
  }
  return result;
}

void sub_19C3A4B00(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19C3A4B14(sqlite3_stmt *a1)
{
  uint64_t result;
  void *exception;

  result = sqlite3_step(a1);
  if ((_DWORD)result == 26 || (_DWORD)result == 11)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    sub_19C314618((uint64_t)exception, 1);
    __cxa_throw(exception, (struct type_info *)&unk_1E3D31E20, (void (*)(void *))sub_19C3146A4);
  }
  return result;
}

void sub_19C3A4B6C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19C3A4B80(uint64_t a1, int a2)
{
  int v4;
  uint64_t result;
  uint64_t v6;
  _QWORD *exception;
  uint64_t v8;
  _QWORD *v9;
  const char *v10;
  _BYTE *v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  v4 = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(a1 + 24) = v4 + 1;
  result = sqlite3_bind_int(*(sqlite3_stmt **)(a1 + 8), v4, a2);
  if ((_DWORD)result)
  {
    v6 = result;
    exception = __cxa_allocate_exception(0x20uLL);
    v8 = a1;
    v9 = exception;
    v10 = sqlite3_errmsg(*(sqlite3 **)(v8 + 16));
    sub_19C34EC30("Could not bind int, error code: %d error message: %s\n", (uint64_t)&v13, v6, v10);
    *v9 = off_1E3D36BC0;
    v11 = v9 + 1;
    if (SHIBYTE(v14) < 0)
    {
      sub_19C2B5238(v11, (void *)v13, *((unint64_t *)&v13 + 1));
    }
    else
    {
      v12 = v13;
      v9[3] = v14;
      *(_OWORD *)v11 = v12;
    }
    __cxa_throw(v9, (struct type_info *)&unk_1E3D31E20, (void (*)(void *))sub_19C3146A4);
  }
  return result;
}

void sub_19C3A4C40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  std::exception *v17;

  std::exception::~exception(v17);
  if (a17 < 0)
    operator delete(__p);
  __cxa_free_exception(v17);
  _Unwind_Resume(a1);
}

_QWORD *sub_19C3A4C90(_QWORD *a1, __int128 *a2)
{
  _QWORD *v3;
  __int128 v4;

  *a1 = off_1E3D36BC0;
  v3 = a1 + 1;
  if (*((char *)a2 + 23) < 0)
  {
    sub_19C2B5238(v3, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    v3[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)v3 = v4;
  }
  return a1;
}

void sub_19C3A4CE4(_Unwind_Exception *a1)
{
  std::exception *v1;

  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19C3A4CF8(uint64_t a1, double a2)
{
  int v3;
  uint64_t result;
  uint64_t v5;
  _QWORD *exception;
  uint64_t v7;
  _QWORD *v8;
  const char *v9;
  _BYTE *v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;

  v3 = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(a1 + 24) = v3 + 1;
  result = sqlite3_bind_double(*(sqlite3_stmt **)(a1 + 8), v3, a2);
  if ((_DWORD)result)
  {
    v5 = result;
    exception = __cxa_allocate_exception(0x20uLL);
    v7 = a1;
    v8 = exception;
    v9 = sqlite3_errmsg(*(sqlite3 **)(v7 + 16));
    sub_19C34EC30("Could not bind double, error code %d error message: %s", (uint64_t)&v12, v5, v9);
    *v8 = off_1E3D36BC0;
    v10 = v8 + 1;
    if (SHIBYTE(v13) < 0)
    {
      sub_19C2B5238(v10, (void *)v12, *((unint64_t *)&v12 + 1));
    }
    else
    {
      v11 = v12;
      v8[3] = v13;
      *(_OWORD *)v10 = v11;
    }
    __cxa_throw(v8, (struct type_info *)&unk_1E3D31E20, (void (*)(void *))sub_19C3146A4);
  }
  return result;
}

void sub_19C3A4DB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  std::exception *v17;

  std::exception::~exception(v17);
  if (a17 < 0)
    operator delete(__p);
  __cxa_free_exception(v17);
  _Unwind_Resume(a1);
}

void sub_19C3A4E04(uint64_t a1, CFStringRef theString)
{
  int v4;
  CFIndex Length;
  CFIndex v6;
  char *v7;
  int v8;
  uint64_t v9;
  _QWORD *exception;
  uint64_t v11;
  _QWORD *v12;
  const char *v13;
  __int128 v14;

  v4 = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(a1 + 24) = v4 + 1;
  Length = CFStringGetLength(theString);
  v6 = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u) + 1;
  v7 = (char *)operator new[]();
  CFStringGetCString(theString, v7, v6, 0x8000100u);
  v8 = strlen(v7);
  v9 = sqlite3_bind_blob(*(sqlite3_stmt **)(a1 + 8), v4, v7, v8, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
  if ((_DWORD)v9)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    v11 = a1;
    v12 = exception;
    v13 = sqlite3_errmsg(*(sqlite3 **)(v11 + 16));
    sub_19C34EC30("Could not bind blob, error code %d error message: %s\n", (uint64_t)&v14, v9, v13);
    sub_19C3A4C90(v12, &v14);
    __cxa_throw(v12, (struct type_info *)&unk_1E3D31E20, (void (*)(void *))sub_19C3146A4);
  }
  JUMPOUT(0x1A1AD3538);
}

void sub_19C3A4F2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;
  void *v18;
  int v19;

  if (a17 < 0)
  {
    operator delete(__p);
    if ((v19 & 1) == 0)
    {
LABEL_6:
      MEMORY[0x1A1AD3538](v17, 0x1000C8077774924);
      _Unwind_Resume(a1);
    }
  }
  else if (!v19)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v18);
  goto LABEL_6;
}

uint64_t sub_19C3A4F88(uint64_t a1, uint64_t a2)
{
  int v3;
  sqlite3_stmt *v4;
  int v5;
  const char *v6;
  int v7;
  uint64_t result;
  uint64_t v9;
  _QWORD *exception;
  const char *v11;
  _BYTE *v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  v3 = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(a1 + 24) = v3 + 1;
  v4 = *(sqlite3_stmt **)(a1 + 8);
  v5 = *(char *)(a2 + 23);
  if (v5 >= 0)
    v6 = (const char *)a2;
  else
    v6 = *(const char **)a2;
  if (v5 >= 0)
    v7 = *(unsigned __int8 *)(a2 + 23);
  else
    v7 = *(_DWORD *)(a2 + 8);
  result = sqlite3_bind_text(v4, v3, v6, v7, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
  if ((_DWORD)result)
  {
    v9 = result;
    exception = __cxa_allocate_exception(0x20uLL);
    v11 = sqlite3_errmsg(*(sqlite3 **)(a1 + 16));
    sub_19C34EC30("Could not bind text, error code %d error message: %s\n", (uint64_t)&v14, v9, v11);
    *exception = off_1E3D36BC0;
    v12 = exception + 1;
    if (SHIBYTE(v15) < 0)
    {
      sub_19C2B5238(v12, (void *)v14, *((unint64_t *)&v14 + 1));
    }
    else
    {
      v13 = v14;
      exception[3] = v15;
      *(_OWORD *)v12 = v13;
    }
    __cxa_throw(exception, (struct type_info *)&unk_1E3D31E20, (void (*)(void *))sub_19C3146A4);
  }
  return result;
}

void sub_19C3A506C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  std::exception *v17;

  std::exception::~exception(v17);
  if (a17 < 0)
    operator delete(__p);
  __cxa_free_exception(v17);
  _Unwind_Resume(a1);
}

void sub_19C3A50C0(_QWORD *a1)
{
  sub_19C3A61C0(a1);
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C3A50E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int32 *v17;
  uint64_t v18;
  __int128 *v19;
  __int128 *v20;
  uint64_t v21;
  int v22;
  const UInt8 *v23;
  CFIndex v24;
  CFStringRef v25;
  const void *v26;
  const __CFString *v27;
  CFTypeRef *v28;
  uint64_t v29;
  __int32 v30;
  CFTypeID TypeID;
  CFTypeRef v32;
  void **v33;
  __int16 v34;
  unsigned __int16 v35;
  void ***v36;
  const char *v37;
  size_t v38;
  void *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  __int32 *v44;
  __int32 *v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  char v53;
  __int128 v54;
  void *v55;
  size_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  _QWORD *v61;
  std::__shared_weak_count *v62;
  unint64_t *p_shared_owners;
  unint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  void *exception;
  void *v69[2];
  unint64_t v70;
  void *v71[2];
  char v72;
  CFTypeRef cf[2];
  uint64_t v74;
  void *__p[2];
  uint64_t v76;
  CFTypeRef v77;
  void *v78;
  void **v79;
  CFTypeRef *v80;
  __int128 v81;
  uint64_t v82;
  __int128 *v83;
  uint64_t v84;

  v84 = *MEMORY[0x1E0C80C00];
  v4 = *(unsigned int *)(a1 + 128);
  if ((int)v4 < 1)
    goto LABEL_23;
  v5 = 0;
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_BYTE *)(a2 + 23);
  if (v7 >= 0)
    v8 = *(unsigned __int8 *)(a2 + 23);
  else
    v8 = *(_QWORD *)(a2 + 8);
  if (v7 >= 0)
    v9 = (unsigned __int8 *)a2;
  else
    v9 = *(unsigned __int8 **)a2;
  while (1)
  {
    v10 = (unsigned __int8 *)(v6 + 24 * v5);
    v11 = v10[23];
    if ((v11 & 0x80u) == 0)
      v12 = v10[23];
    else
      v12 = *((_QWORD *)v10 + 1);
    if (v12 != v8)
      goto LABEL_9;
    if ((v11 & 0x80) == 0)
      break;
    if (!memcmp(*(const void **)v10, v9, *((_QWORD *)v10 + 1)))
      goto LABEL_19;
LABEL_9:
    if (++v5 == v4)
      goto LABEL_23;
  }
  if (v10[23])
  {
    v13 = v9;
    while (*v10 == *v13)
    {
      ++v10;
      ++v13;
      if (!--v11)
        goto LABEL_19;
    }
    goto LABEL_9;
  }
LABEL_19:
  if ((v5 & 0x80000000) == 0)
  {
    ++*(_QWORD *)(a1 + 136);
    v14 = *(_QWORD *)(a1 + 72);
    v15 = *(_QWORD *)(a1 + 120);
    if (*(_QWORD *)(v14 + 8 * v5) != v15)
    {
      v16 = v15 + 1;
      *(_QWORD *)(a1 + 120) = v16;
      *(_QWORD *)(v14 + 8 * v5) = v16;
    }
    v17 = (__int32 *)(*(_QWORD *)(a1 + 48) + 4 * v5);
    goto LABEL_127;
  }
LABEL_23:
  v18 = *(_QWORD *)(a1 + 152);
  ++*(_QWORD *)(a1 + 144);
  if (!*(_BYTE *)(v18 + 144))
  {
    LODWORD(v69[0]) = 0;
    v71[0] = *(void **)MEMORY[0x1E0D437E8];
    v77 = &off_1E3D30A00;
    v78 = v71;
    v79 = v69;
    v80 = &v77;
    __p[0] = (void *)1;
    cf[0] = 0;
    v19 = (__int128 *)operator new(0x28uLL);
    *(_QWORD *)v19 = &off_1E3D30530;
    *((_QWORD *)v19 + 1) = cf;
    *((_QWORD *)v19 + 2) = a2;
    *((_QWORD *)v19 + 3) = __p;
    *((_QWORD *)v19 + 4) = &v77;
    v83 = v19;
    sub_19C3C1838(a2, *(_QWORD *)(v18 + 8), *(_QWORD *)(v18 + 16), (uint64_t)&v81);
    v20 = v83;
    if (v83 == &v81)
    {
      v21 = 4;
      v20 = &v81;
    }
    else
    {
      if (!v83)
        goto LABEL_43;
      v21 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_43:
    if (cf[0])
      CFRelease(cf[0]);
    v28 = v80;
    if (v80 == &v77)
    {
      v29 = 4;
      v28 = &v77;
    }
    else
    {
      if (!v80)
      {
LABEL_50:
        v30 = (__int32)v69[0];
        goto LABEL_97;
      }
      v29 = 5;
    }
    (*((void (**)(void))*v28 + v29))();
    goto LABEL_50;
  }
  if (*(char *)(a2 + 23) < 0)
  {
    sub_19C2B5238(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
    v18 = *(_QWORD *)(a1 + 152);
    if (!*(_BYTE *)(v18 + 145))
      goto LABEL_63;
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v76 = *(_QWORD *)(a2 + 16);
    if (!*(_BYTE *)(v18 + 145))
      goto LABEL_63;
  }
  if (!*(_QWORD *)(v18 + 136))
    goto LABEL_63;
  v22 = *(char *)(a2 + 23);
  if (v22 >= 0)
    v23 = (const UInt8 *)a2;
  else
    v23 = *(const UInt8 **)a2;
  if (v22 >= 0)
    v24 = *(unsigned __int8 *)(a2 + 23);
  else
    v24 = *(_QWORD *)(a2 + 8);
  v25 = CFStringCreateWithBytes(0, v23, v24, 0x8000100u, 0);
  if (!v25)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD3154](exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v26 = (const void *)LXTransliterationCopyNativeForTransliterated();
  sub_19C297DB4(&v77, v26);
  CFRelease(v25);
  v27 = (const __CFString *)v77;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_19C2B5238(cf, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)cf = *(_OWORD *)a2;
    v74 = *(_QWORD *)(a2 + 16);
  }
  if (v27 && (TypeID = CFStringGetTypeID(), TypeID == CFGetTypeID(v27)))
  {
    sub_19C2E50A4(&v81, v27);
    if (SHIBYTE(v76) < 0)
LABEL_57:
      operator delete(__p[0]);
  }
  else
  {
    v81 = *(_OWORD *)cf;
    v82 = v74;
    cf[1] = 0;
    v74 = 0;
    cf[0] = 0;
    if (SHIBYTE(v76) < 0)
      goto LABEL_57;
  }
  *(_OWORD *)__p = v81;
  v76 = v82;
  HIBYTE(v82) = 0;
  LOBYTE(v81) = 0;
  if (SHIBYTE(v74) < 0)
  {
    operator delete((void *)cf[0]);
    v32 = v77;
    if (!v77)
      goto LABEL_63;
    goto LABEL_62;
  }
  v32 = v77;
  if (v77)
LABEL_62:
    CFRelease(v32);
LABEL_63:
  v33 = v71;
  sub_19C34E95C(v71, (const char *)__p);
  if (v72 < 0)
    v33 = (void **)v71[0];
  WORD2(v77) = 0;
  LODWORD(v77) = 0x100000;
  BYTE6(v77) = 1;
  v78 = 0;
  if (v33)
  {
    v34 = strlen((const char *)v33);
    v35 = v34;
    v79 = 0;
    v80 = 0;
    if (v34)
    {
      sub_19C40FB64((unsigned __int16 *)&v77, v34);
      if (WORD1(v77) < v35)
        __assert_rtn("initialize", "LMTIString.cpp", 269, "len <= m_capacity");
      if (v78)
        v36 = (void ***)v78;
      else
        v36 = &v79;
      memcpy(v36, v33, v35);
      LOWORD(v77) = v35;
    }
  }
  else
  {
    v79 = 0;
    v80 = 0;
  }
  sub_19C40FD44((uint64_t)&v81, (unsigned __int16 *)&v77);
  if (*((_QWORD *)&v81 + 1))
    v37 = (const char *)*((_QWORD *)&v81 + 1);
  else
    v37 = (const char *)&v82;
  v38 = strlen(v37);
  if (v38 >= 0x7FFFFFFFFFFFFFF8)
    sub_19C2A1A54();
  v39 = (void *)v38;
  if (v38 >= 0x17)
  {
    v41 = (v38 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v38 | 7) != 0x17)
      v41 = v38 | 7;
    v42 = v41 + 1;
    v40 = operator new(v41 + 1);
    v69[1] = v39;
    v70 = v42 | 0x8000000000000000;
    v69[0] = v40;
  }
  else
  {
    HIBYTE(v70) = v38;
    v40 = v69;
    if (!v38)
      goto LABEL_84;
  }
  memmove(v40, v37, (size_t)v39);
LABEL_84:
  *((_BYTE *)v39 + (_QWORD)v40) = 0;
  if (*((_QWORD *)&v81 + 1) && BYTE6(v81) == 1)
    free(*((void **)&v81 + 1));
  if (v78 && BYTE6(v77) == 1)
    free(v78);
  v43 = *(_QWORD **)(*(_QWORD *)(a1 + 152) + 104);
  if (*(_QWORD *)(*(_QWORD *)(a1 + 152) + 112) - (_QWORD)v43 == 8)
  {
    v30 = (*(uint64_t (**)(_QWORD, void **, _QWORD))(*(_QWORD *)*v43 + 24))(*v43, v69, 0);
    if (SHIBYTE(v70) < 0)
LABEL_94:
      operator delete(v69[0]);
  }
  else
  {
    v30 = 0;
    if (SHIBYTE(v70) < 0)
      goto LABEL_94;
  }
  if (v72 < 0)
  {
    operator delete(v71[0]);
    if (SHIBYTE(v76) < 0)
      goto LABEL_104;
  }
  else
  {
    if ((SHIBYTE(v76) & 0x80000000) == 0)
      goto LABEL_97;
LABEL_104:
    operator delete(__p[0]);
  }
LABEL_97:
  v44 = *(__int32 **)(a1 + 104);
  v45 = wmemchr(*(__int32 **)(a1 + 96), v30, ((uint64_t)v44 - *(_QWORD *)(a1 + 96)) >> 2);
  if (v45)
    v17 = v45;
  else
    v17 = v44;
  if (v17 == *(__int32 **)(a1 + 104))
  {
    v46 = *(int *)(a1 + 128);
    v47 = *(_QWORD *)(a1 + 24);
    if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 32) - v47) >> 3) <= v46)
    {
      if ((int)v46 < 2)
      {
        LODWORD(v46) = 0;
      }
      else
      {
        v48 = *(unint64_t **)(a1 + 72);
        v49 = *v48;
        v50 = 1;
        LODWORD(v46) = 0;
        do
        {
          v51 = v48[v50];
          if (v49 > v51)
            LODWORD(v46) = v50;
          if (v49 >= v51)
            v49 = v48[v50];
          ++v50;
        }
        while (*(_DWORD *)(a1 + 128) != v50);
      }
    }
    else
    {
      *(_DWORD *)(a1 + 128) = v46 + 1;
    }
    v52 = v47 + 24 * (int)v46;
    if (v52 != a2)
    {
      v53 = *(_BYTE *)(a2 + 23);
      if (*(char *)(v52 + 23) < 0)
      {
        if (v53 >= 0)
          v55 = (void *)a2;
        else
          v55 = *(void **)a2;
        if (v53 >= 0)
          v56 = *(unsigned __int8 *)(a2 + 23);
        else
          v56 = *(_QWORD *)(a2 + 8);
        sub_19C2E54A8((void **)v52, v55, v56);
      }
      else if ((*(_BYTE *)(a2 + 23) & 0x80) != 0)
      {
        sub_19C2E53E4((_QWORD *)v52, *(void **)a2, *(_QWORD *)(a2 + 8));
      }
      else
      {
        v54 = *(_OWORD *)a2;
        *(_QWORD *)(v52 + 16) = *(_QWORD *)(a2 + 16);
        *(_OWORD *)v52 = v54;
      }
    }
    v17 = (__int32 *)(*(_QWORD *)(a1 + 48) + 4 * (int)v46);
    *v17 = v30;
    v57 = *(_QWORD *)(a1 + 120) + 1;
    *(_QWORD *)(a1 + 120) = v57;
    *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * (int)v46) = v57;
  }
LABEL_127:
  v58 = *v17;
  v59 = *(_QWORD *)(a1 + 152);
  if (*(_BYTE *)(v59 + 144))
    v60 = 0;
  else
    v60 = (_DWORD)v58 == 0;
  if (v60)
  {
    v61 = *(_QWORD **)(a1 + 8);
    v62 = *(std::__shared_weak_count **)(a1 + 160);
    *(_QWORD *)&v81 = v59;
    *((_QWORD *)&v81 + 1) = v62;
    if (v62)
    {
      p_shared_owners = (unint64_t *)&v62->__shared_owners_;
      do
        v64 = __ldxr(p_shared_owners);
      while (__stxr(v64 + 1, p_shared_owners));
    }
    LOBYTE(v82) = 1;
    v58 = sub_19C31AF60(v61, a2, 0, (uint64_t *)&v81);
    if (!(_DWORD)v58)
      v58 = sub_19C3C1B9C(a2, *(unsigned __int8 *)(v61[29] + 358));
    if (v62)
    {
      v65 = (unint64_t *)&v62->__shared_owners_;
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 - 1, v65));
      if (!v66)
      {
        ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
        std::__shared_weak_count::__release_weak(v62);
      }
    }
  }
  return v58;
}

void sub_19C3A588C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,CFTypeRef a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,CFTypeRef cf,void *a33,uint64_t a34,uint64_t a35)
{
  if (cf)
    CFRelease(cf);
  if (a30 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_19C3A5A20(uint64_t a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;
  _QWORD v8[3];
  _QWORD *v9;
  _QWORD v10[3];
  _QWORD *v11;
  _QWORD v12[3];
  _QWORD *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v11 = v10;
  v8[0] = &off_1E3D30B08;
  v8[1] = a1;
  v9 = v8;
  v10[0] = &off_1E3D38ED0;
  v12[0] = &off_1E3D30428;
  v12[1] = v8;
  v13 = v12;
  sub_19C3A5C98(a2, (uint64_t)v10, (uint64_t)v12);
  v2 = v13;
  if (v13 == v12)
  {
    v3 = 4;
    v2 = v12;
  }
  else
  {
    if (!v13)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  v4 = v9;
  if (v9 == v8)
  {
    v5 = 4;
    v4 = v8;
  }
  else
  {
    if (!v9)
      goto LABEL_11;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_11:
  result = v11;
  if (v11 == v10)
  {
    v7 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v7 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
}

void sub_19C3A5B44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  uint64_t v17;
  _QWORD *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;

  v19 = *(_QWORD **)(v17 - 32);
  if (v19 == (_QWORD *)(v17 - 56))
  {
    v20 = 4;
    v19 = (_QWORD *)(v17 - 56);
  }
  else
  {
    if (!v19)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_6:
  v21 = a13;
  if (a13 == &a10)
  {
    v22 = 4;
    v21 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_11;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_11:
  v23 = a17;
  if (a17 == &a14)
  {
    v24 = 4;
    v23 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_16;
    v24 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
LABEL_16:
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C3A5BE0(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t sub_19C3A5BEC(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;

  if (*(_BYTE *)(a1[19] + 144))
    return (*(uint64_t (**)(_QWORD *))(*a1 + 32))(a1);
  v3 = *(unsigned int *)(a2 + 24);
  switch((int)v3)
  {
    case 0:
      return (*(uint64_t (**)(_QWORD *))(*a1 + 32))(a1);
    case 1:
      goto LABEL_5;
    case 2:
      v3 = 2;
LABEL_5:
      result = v3;
      break;
    case 3:
      result = sub_19C3B2F0C(a2);
      break;
    default:
      __assert_rtn("convert", "BlocklistTokenConverter.cpp", 104, "false");
  }
  return result;
}

BOOL sub_19C3A5C70(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 152);
  return !*(_BYTE *)(v1 + 145) || *(_QWORD *)(v1 + 136) != 0;
}

void sub_19C3A5C98(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  const void *v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  _QWORD v24[2];

  v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  if (v3 != (a1[4] - a1[3]) >> 2)
    __assert_rtn("updateTokenIDs", "TokenSequence.hpp", 68, "m_tokens.size() == m_tokenIDs.size()");
  v8 = a1[6];
  v9 = a1[7];
  v7 = (uint64_t)(a1 + 6);
  v10 = (v9 - v8) >> 3;
  if (v3 <= v10)
  {
    if (v3 < v10)
    {
      v11 = v8 + 8 * v3;
      while (v9 != v11)
      {
        v13 = *(const void **)(v9 - 8);
        v9 -= 8;
        v12 = v13;
        if (v13)
          CFRelease(v12);
      }
      a1[7] = v11;
    }
  }
  else
  {
    sub_19C31715C(v7, v3 - v10);
  }
  if (a1[1] != *a1)
  {
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = a1[3];
    while (1)
    {
      LODWORD(v24[0]) = *(_DWORD *)(a1[3] + 4 * v16);
      v18 = *(_QWORD *)(a2 + 24);
      if (!v18)
        break;
      if ((*(unsigned int (**)(uint64_t, _QWORD *))(*(_QWORD *)v18 + 48))(v18, v24))
      {
        v19 = *a1;
        v20 = a1[6];
        v21 = *(_DWORD *)(a1[3] + 4 * v16);
        v24[0] = v17;
        v24[1] = v16;
        v23 = v21;
        v22 = *(_QWORD *)(a3 + 24);
        if (!v22)
          break;
        *(_DWORD *)(a1[3] + 4 * v16) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *, _QWORD *))(*(_QWORD *)v22 + 48))(v22, v19 + v15, v20 + v14, &v23, v24);
      }
      ++v16;
      v15 += 24;
      v14 += 8;
      if (0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3) <= v16)
        return;
    }
    sub_19C2CCC60();
  }
}

void sub_19C3A5E28()
{
  JUMPOUT(0x1A1AD355CLL);
}

_QWORD *sub_19C3A5E3C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E3D30428;
  result[1] = v3;
  return result;
}

uint64_t sub_19C3A5E70(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E3D30428;
  a2[1] = v2;
  return result;
}

uint64_t sub_19C3A5E8C(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v4;
  uint64_t v5;
  int v7;

  v4 = *(_QWORD *)(a1 + 8);
  v7 = *a4;
  v5 = *(_QWORD *)(v4 + 24);
  if (!v5)
    sub_19C2CCC60();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(*(_QWORD *)v5 + 48))(v5, a2, a3, &v7);
}

uint64_t sub_19C3A5ECC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN17language_modeling2v113TokenSequence14updateTokenIDsERKNSt3__18functionIFbjEEERKNS3_IFjRKNS2_12b"
                     "asic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEERN10applesauce2CF9StringRefEjEEEEUlSF_SJ_jNS2"
                     "_4spanIKjLm18446744073709551615EEEE_"
    || ((v3 & (unint64_t)"ZN17language_modeling2v113TokenSequence14updateTokenIDsERKNSt3__18functionIFbjEEERKNS3_I"
                                "FjRKNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEERN10applesauce2CF9Strin"
                                "gRefEjEEEEUlSF_SJ_jNS2_4spanIKjLm18446744073709551615EEEE_" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN17language_modeling2v113TokenSequence14updateTokenIDsERKNSt3__18functionIFbjEEERKNS3_IFjRKNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEERN10applesauce2CF9StringRefEjEEEEUlSF_SJ_jNS2_4spanIKjLm18446744073709551615EEEE_")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN17language_modeling2v113TokenSequence14updateTokenIDsERKNSt3__18functionIFbjEEERKNS3_IFjRKNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEERN10applesauce2CF9StringRefEjEEEEUlSF_SJ_jNS2_4spanIKjLm18446744073709551615EEEE_" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *sub_19C3A5F20()
{
  return &unk_1E3D30020;
}

void sub_19C3A5F30()
{
  JUMPOUT(0x1A1AD355CLL);
}

_QWORD *sub_19C3A5F44(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E3D30B08;
  result[1] = v3;
  return result;
}

uint64_t sub_19C3A5F78(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E3D30B08;
  a2[1] = v2;
  return result;
}

uint64_t sub_19C3A5F94(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_19C3A5FA4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK17language_modeling2v123BlocklistTokenConverter7convertERNS0_13TokenSequenceEE3$_1"
    || ((v3 & (unint64_t)"ZNK17language_modeling2v123BlocklistTokenConverter7convertERNS0_13TokenSequenceEE3$_1" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZNK17language_modeling2v123BlocklistTokenConverter7convertERNS0_13TokenSequenceEE3$_1")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK17language_modeling2v123BlocklistTokenConverter7convertERNS0_13TokenSequenceEE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *sub_19C3A5FF8()
{
  return &unk_1E3D335C0;
}

void sub_19C3A6008()
{
  JUMPOUT(0x1A1AD355CLL);
}

_QWORD *sub_19C3A601C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E3D38ED0;
  return result;
}

void sub_19C3A6040(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E3D38ED0;
}

BOOL sub_19C3A6058(uint64_t a1, _DWORD *a2)
{
  return *a2 == 0;
}

uint64_t sub_19C3A6068(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK17language_modeling2v123BlocklistTokenConverter7convertERNS0_13TokenSequenceEE3$_0"
    || ((v3 & (unint64_t)"ZNK17language_modeling2v123BlocklistTokenConverter7convertERNS0_13TokenSequenceEE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZNK17language_modeling2v123BlocklistTokenConverter7convertERNS0_13TokenSequenceEE3$_0")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK17language_modeling2v123BlocklistTokenConverter7convertERNS0_13TokenSequenceEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *sub_19C3A60BC()
{
  return &unk_1E3D335B0;
}

void sub_19C3A60CC()
{
  JUMPOUT(0x1A1AD355CLL);
}

__n128 sub_19C3A60E0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E3D30A00;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_19C3A6118(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E3D30A00;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_19C3A6138(uint64_t result, uint64_t a2, _DWORD *a3, double *a4)
{
  double *v4;
  double v5;

  v4 = *(double **)(result + 8);
  v5 = *a4;
  if (*v4 < *a4)
  {
    **(_DWORD **)(result + 16) = *a3;
    *v4 = v5;
  }
  return result;
}

uint64_t sub_19C3A6160(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN17language_modeling2v1L53bestLinguisticallyEquivalentTokenIDFromStaticLexiconsERKNSt3__16vectorIN"
                     "S1_10unique_ptrIN2LM7LexiconENS1_14default_deleteIS5_EEEENS1_9allocatorIS8_EEEERKNS1_12basic_string"
                     "IcNS1_11char_traitsIcEENS9_IcEEEEE3$_0"
    || ((v3 & (unint64_t)"ZN17language_modeling2v1L53bestLinguisticallyEquivalentTokenIDFromStaticLexiconsERKNSt3_"
                                "_16vectorINS1_10unique_ptrIN2LM7LexiconENS1_14default_deleteIS5_EEEENS1_9allocatorIS8_EE"
                                "EERKNS1_12basic_stringIcNS1_11char_traitsIcEENS9_IcEEEEE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN17language_modeling2v1L53bestLinguisticallyEquivalentTokenIDFromStaticLexiconsERKNSt3__16vectorINS1_10unique_ptrIN2LM7LexiconENS1_14default_deleteIS5_EEEENS1_9allocatorIS8_EEEERKNS1_12basic_stringIcNS1_11char_traitsIcEENS9_IcEEEEE3$_0")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN17language_modeling2v1L53bestLinguisticallyEquivalentTokenIDFromStaticLexiconsERKNSt3__16vectorINS1_10unique_ptrIN2LM7LexiconENS1_14default_deleteIS5_EEEENS1_9allocatorIS8_EEEERKNS1_12basic_stringIcNS1_11char_traitsIcEENS9_IcEEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *sub_19C3A61B4()
{
  return &unk_1E3D300F0;
}

_QWORD *sub_19C3A61C0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;

  *a1 = &off_1E3D34B90;
  v2 = (std::__shared_weak_count *)a1[20];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (void *)a1[12];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (void *)a1[12];
  if (v5)
  {
LABEL_6:
    a1[13] = v5;
    operator delete(v5);
  }
LABEL_7:
  v6 = (void *)a1[9];
  if (v6)
  {
    a1[10] = v6;
    operator delete(v6);
  }
  v7 = (void *)a1[6];
  if (v7)
  {
    a1[7] = v7;
    operator delete(v7);
  }
  v8 = a1[3];
  if (v8)
  {
    v9 = a1[4];
    v10 = (void *)a1[3];
    if (v9 != v8)
    {
      do
      {
        if (*(char *)(v9 - 1) < 0)
          operator delete(*(void **)(v9 - 24));
        v9 -= 24;
      }
      while (v9 != v8);
      v10 = (void *)a1[3];
    }
    a1[4] = v8;
    operator delete(v10);
  }
  v11 = (std::__shared_weak_count *)a1[2];
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  return a1;
}

_QWORD *sub_19C3A62E8(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *result;
  uint64_t v13;
  _BYTE v14[24];
  _QWORD v15[6];
  _QWORD v16[3];
  _QWORD *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v16[0] = &off_1E3D38E78;
  v17 = v16;
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 0x40000000;
  v15[2] = sub_19C3A64E8;
  v15[3] = &unk_1E3D3AD90;
  v15[4] = v16;
  v15[5] = a3;
  v6 = *a3;
  for (i = a3[1]; i != v6; i -= 24)
  {
    if (*(char *)(i - 1) < 0)
      operator delete(*(void **)(i - 24));
  }
  a3[1] = v6;
  a3[4] = a3[3];
  v8 = *a1;
  *(_QWORD *)(v8 + 184) = *(_QWORD *)(*a1 + 176);
  *(_QWORD *)(v8 + 208) = *(_QWORD *)(v8 + 200);
  *(_QWORD *)(v8 + 232) = *(_QWORD *)(v8 + 224);
  *(_QWORD *)(v8 + 264) = *(_QWORD *)(v8 + 256);
  *(_DWORD *)(v8 + 280) = 0;
  *(_OWORD *)(v8 + 288) = xmmword_19C46DE20;
  *(_QWORD *)(v8 + 304) = -1;
  *(_DWORD *)(v8 + 312) = 0;
  *(_QWORD *)(v8 + 248) = -1;
  v9 = *(char *)(a2 + 23);
  if (v9 >= 0)
    v10 = a2;
  else
    v10 = *(_QWORD *)a2;
  if (v9 >= 0)
    v11 = *(unsigned __int8 *)(a2 + 23);
  else
    v11 = *(_QWORD *)(a2 + 8);
  sub_19C2931F4(*a1, v10, v11, (uint64_t)v15);
  sub_19C2931F4(*a1, (uint64_t)" NSt3__110__function6__funcIZNK17language_modeling2v115StringTokenizer8tokenizeERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS3_13TokenSequenceEE3$_0NS8_ISF_EEFbjEEE", 1, (uint64_t)v15);
  if (*a3 == a3[1] && a3[3] == a3[4])
  {
    v14[23] = 0;
    v14[0] = 0;
    sub_19C3A6600((uint64_t)a3, (uint64_t)v14, 1);
  }
  result = v17;
  if (v17 == v16)
  {
    v13 = 4;
    result = v16;
  }
  else
  {
    if (!v17)
      return result;
    v13 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v13))();
}

void sub_19C3A64A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char *a21)
{
  char *v22;
  uint64_t v23;

  v22 = a21;
  if (a21 == &a18)
  {
    v23 = 4;
    v22 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_6;
    v23 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_19C3A64E8(uint64_t a1, const void *a2, size_t a3, int a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v10;
  void **v11;
  uint64_t v12;
  uint64_t v13;
  void *__dst[2];
  unint64_t v15;

  v5 = *(_QWORD *)(a1 + 32);
  LODWORD(__dst[0]) = a4;
  v6 = *(_QWORD *)(v5 + 24);
  if (!v6)
    sub_19C2CCC60();
  if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v6 + 48))(v6, __dst))
  {
    if (a3 >= 0x7FFFFFFFFFFFFFF8)
      sub_19C2A1A54();
    v10 = *(_QWORD *)(a1 + 40);
    if (a3 >= 0x17)
    {
      v12 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((a3 | 7) != 0x17)
        v12 = a3 | 7;
      v13 = v12 + 1;
      v11 = (void **)operator new(v12 + 1);
      __dst[1] = (void *)a3;
      v15 = v13 | 0x8000000000000000;
      __dst[0] = v11;
    }
    else
    {
      HIBYTE(v15) = a3;
      v11 = __dst;
      if (!a3)
      {
LABEL_11:
        *((_BYTE *)v11 + a3) = 0;
        sub_19C3A6600(v10, (uint64_t)__dst, a4);
        if (SHIBYTE(v15) < 0)
          operator delete(__dst[0]);
        return;
      }
    }
    memcpy(v11, a2, a3);
    goto LABEL_11;
  }
}

void sub_19C3A65E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19C3A6600(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v5;
  __int128 v6;
  char *v7;
  unint64_t v8;
  char *v9;
  _DWORD *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _BYTE *v16;
  _DWORD *v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  int v25;

  v5 = *(_QWORD *)(a1 + 8);
  if (v5 >= *(_QWORD *)(a1 + 16))
  {
    v7 = sub_19C318C78((char **)a1, a2);
  }
  else
  {
    if (*(char *)(a2 + 23) < 0)
    {
      sub_19C2B5238(*(_BYTE **)(a1 + 8), *(void **)a2, *(_QWORD *)(a2 + 8));
    }
    else
    {
      v6 = *(_OWORD *)a2;
      *(_QWORD *)(v5 + 16) = *(_QWORD *)(a2 + 16);
      *(_OWORD *)v5 = v6;
    }
    v7 = (char *)(v5 + 24);
    *(_QWORD *)(a1 + 8) = v5 + 24;
  }
  *(_QWORD *)(a1 + 8) = v7;
  v9 = *(char **)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if ((unint64_t)v9 >= v8)
  {
    v11 = *(char **)(a1 + 24);
    v12 = (v9 - v11) >> 2;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 62)
      sub_19C2A18E8();
    v14 = v8 - (_QWORD)v11;
    if (v14 >> 1 > v13)
      v13 = v14 >> 1;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL)
      v15 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    if (v15)
    {
      if (v15 >> 62)
        sub_19C2A143C();
      v16 = operator new(4 * v15);
    }
    else
    {
      v16 = 0;
    }
    v17 = &v16[4 * v12];
    v18 = &v16[4 * v15];
    *v17 = a3;
    v10 = v17 + 1;
    if (v9 != v11)
    {
      v19 = v9 - v11 - 4;
      if (v19 < 0x2C)
        goto LABEL_33;
      if ((unint64_t)(v11 - v16) < 0x20)
        goto LABEL_33;
      v20 = (v19 >> 2) + 1;
      v21 = &v16[4 * v12 - 16];
      v22 = v9 - 16;
      v23 = v20 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v24 = *(_OWORD *)v22;
        *(v21 - 1) = *((_OWORD *)v22 - 1);
        *v21 = v24;
        v21 -= 2;
        v22 -= 32;
        v23 -= 8;
      }
      while (v23);
      v17 -= v20 & 0x7FFFFFFFFFFFFFF8;
      v9 -= 4 * (v20 & 0x7FFFFFFFFFFFFFF8);
      if (v20 != (v20 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_33:
        do
        {
          v25 = *((_DWORD *)v9 - 1);
          v9 -= 4;
          *--v17 = v25;
        }
        while (v9 != v11);
      }
    }
    *(_QWORD *)(a1 + 24) = v17;
    *(_QWORD *)(a1 + 32) = v10;
    *(_QWORD *)(a1 + 40) = v18;
    if (v11)
      operator delete(v11);
  }
  else
  {
    *(_DWORD *)v9 = a3;
    v10 = v9 + 4;
  }
  *(_QWORD *)(a1 + 32) = v10;
}

void sub_19C3A67AC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_19C3A67B8()
{
  JUMPOUT(0x1A1AD355CLL);
}

_QWORD *sub_19C3A67CC()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E3D38E78;
  return result;
}

void sub_19C3A67F0(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E3D38E78;
}

uint64_t sub_19C3A6808()
{
  return 1;
}

uint64_t sub_19C3A6810(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK17language_modeling2v115StringTokenizer8tokenizeERKNSt3__112basic_stringIcNS2_11char_traitsIcEEN"
                     "S2_9allocatorIcEEEERNS0_13TokenSequenceEE3$_0"
    || ((v3 & (unint64_t)"ZNK17language_modeling2v115StringTokenizer8tokenizeERKNSt3__112basic_stringIcNS2_11char_"
                                "traitsIcEENS2_9allocatorIcEEEERNS0_13TokenSequenceEE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZNK17language_modeling2v115StringTokenizer8tokenizeERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEERNS0_13TokenSequenceEE3$_0")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK17language_modeling2v115StringTokenizer8tokenizeERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEERNS0_13TokenSequenceEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *sub_19C3A6864()
{
  return &unk_1E3D335A0;
}

uint64_t sub_19C3A6878(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (result)
  {
    v1 = result;
    v2 = *(_QWORD *)(result + 8);
    if (v2)
    {
      result = 0;
      do
      {
        if (*(_DWORD *)(v1 + 16) < 0x10000u)
          v3 = 1;
        else
          v3 = 2;
        result += v3;
        v1 = v2;
        v2 = *(_QWORD *)(v2 + 8);
      }
      while (v2);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void sub_19C3A68BC()
{
  JUMPOUT(0x1A1AD355CLL);
}

char *sub_19C3A68D0(char *result, uint64_t a2, unint64_t a3)
{
  char *v3;
  unint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  char *v9;
  int v10;
  uint64_t v11;
  unsigned __int8 *v12;
  int v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;

  v3 = result;
  LODWORD(v16) = *((_DWORD *)result + 8);
  *((_QWORD *)&v16 + 1) = *((_QWORD *)result + 5);
  LOBYTE(v17) = result[48];
  if (a3)
  {
    v6 = 0;
    v7 = *(uint64_t **)(*((_QWORD *)result + 3) + 16);
    v8 = a3 - 1;
    v9 = result;
    do
    {
      v12 = (unsigned __int8 *)(a2 + 2 * v6);
      v13 = *(_WORD *)v12 & 0xFC00;
      if (v13 == 55296)
      {
        if (v6 >= v8)
          return 0;
        ++v6;
        if ((*(_WORD *)(a2 + 2 * v6) & 0xFC00) != 0xDC00)
          return 0;
        sub_19C369568(&v14, v7, &v16, v12, 4);
        v16 = v14;
        v17 = v15;
        v10 = *(unsigned __int16 *)(a2 + 2 * v6) + (*(unsigned __int16 *)v12 << 10) - 56613888;
      }
      else
      {
        sub_19C369568(&v14, v7, &v16, (unsigned __int8 *)(a2 + 2 * v6), 2);
        v16 = v14;
        v17 = v15;
        v10 = *(unsigned __int16 *)v12;
        ++v6;
      }
      result = sub_19C3A6C88(*((_QWORD *)v3 + 3) + 24);
      v11 = *((_QWORD *)v3 + 3);
      *((_DWORD *)result + 4) = v10;
      *(_QWORD *)result = &off_1E3D36E20;
      *((_QWORD *)result + 1) = v9;
      *((_QWORD *)result + 3) = v11;
      *((_DWORD *)result + 8) = v16;
      *((_QWORD *)result + 5) = *((_QWORD *)&v16 + 1);
      result[48] = v17;
      if (v13 == 55296)
        ++v6;
      v9 = result;
    }
    while (v6 < a3);
  }
  return result;
}

BOOL sub_19C3A6A58(uint64_t a1)
{
  return (*(_BYTE *)(a1 + 32) & 3) != 0;
}

uint64_t sub_19C3A6A68(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = **(_QWORD **)(*(_QWORD *)(a1 + 24) + 16);
  if (qword_1EE41C1B0 == -1)
  {
    if (v2)
    {
LABEL_3:
      v3 = *(_QWORD *)(qword_1EE41C1B8 + 8 * (*(_DWORD *)(a1 + 32) & 3));
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 48))(v3, v2);
    }
  }
  else
  {
    dispatch_once(&qword_1EE41C1B0, &unk_1E3D3A5F0);
    if (v2)
      goto LABEL_3;
  }
  return 0;
}

uint64_t sub_19C3A6AF0(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = *(_QWORD **)(*(_QWORD *)(a1 + 24) + 16);
  if (qword_1EE41C1B0 == -1)
  {
    if (*v2)
    {
LABEL_3:
      v3 = *(_QWORD *)(qword_1EE41C1B8 + 8 * (*(_DWORD *)(a1 + 32) & 3));
      return (*(unsigned int (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3) >> 31;
    }
  }
  else
  {
    dispatch_once(&qword_1EE41C1B0, &unk_1E3D3A5F0);
    if (*v2)
      goto LABEL_3;
  }
  return 0;
}

uint64_t sub_19C3A6B78(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = *(_QWORD **)(*(_QWORD *)(a1 + 24) + 16);
  if (qword_1EE41C1B0 == -1)
  {
    if (*v2)
    {
LABEL_3:
      v3 = *(_QWORD *)(qword_1EE41C1B8 + 8 * (*(_DWORD *)(a1 + 32) & 3));
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3) & 0x3FFFFFFF;
    }
  }
  else
  {
    dispatch_once(&qword_1EE41C1B0, &unk_1E3D3A5F0);
    if (*v2)
      goto LABEL_3;
  }
  return 0;
}

uint64_t sub_19C3A6C00(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = *(_QWORD **)(*(_QWORD *)(a1 + 24) + 16);
  if (qword_1EE41C1B0 == -1)
  {
    if (*v2)
    {
LABEL_3:
      v3 = *(_QWORD *)(qword_1EE41C1B8 + 8 * (*(_DWORD *)(a1 + 32) & 3));
      return ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3) >> 30) & 1;
    }
  }
  else
  {
    dispatch_once(&qword_1EE41C1B0, &unk_1E3D3A5F0);
    if (*v2)
      goto LABEL_3;
  }
  return 0;
}

char *sub_19C3A6C88(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  size_t v5;
  char *v6;
  unint64_t v7;
  char **v8;
  _QWORD *v9;
  char **v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _BYTE *v16;
  _QWORD *v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  __int128 *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;

  v2 = *(_QWORD *)(a1 + 24);
  if (v2)
  {
    v4 = *(char **)(a1 + 32);
    v3 = *(_QWORD *)(a1 + 40);
    v5 = (size_t)&v4[-v2];
    if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)&v4[-v2] >> 3) != v3)
      goto LABEL_29;
  }
  else
  {
    v5 = 56 * *(_QWORD *)(a1 + 40);
  }
  v6 = (char *)malloc_type_malloc(v5, 0x10F10408BCD9BB6uLL);
  v4 = v6;
  v8 = *(char ***)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v8 >= v7)
  {
    v10 = *(char ***)a1;
    v11 = (uint64_t)v8 - *(_QWORD *)a1;
    v12 = v11 >> 3;
    v13 = (v11 >> 3) + 1;
    if (v13 >> 61)
      sub_19C2A18E8();
    v14 = v7 - (_QWORD)v10;
    if (v14 >> 2 > v13)
      v13 = v14 >> 2;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
      v15 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    if (v15)
    {
      if (v15 >> 61)
        sub_19C2A143C();
      v16 = operator new(8 * v15);
    }
    else
    {
      v16 = 0;
    }
    v17 = &v16[8 * v12];
    v18 = &v16[8 * v15];
    *v17 = v4;
    v9 = v17 + 1;
    if (v8 == v10)
    {
      v10 = v8;
    }
    else
    {
      v19 = (char *)v8 - (char *)v10 - 8;
      if (v19 < 0x58)
        goto LABEL_34;
      if ((unint64_t)((char *)v8 - &v16[v11]) < 0x20)
        goto LABEL_34;
      v20 = (v19 >> 3) + 1;
      v21 = &v16[8 * v12 - 16];
      v22 = (__int128 *)(v8 - 2);
      v23 = v20 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v24 = *v22;
        *(v21 - 1) = *(v22 - 1);
        *v21 = v24;
        v21 -= 2;
        v22 -= 2;
        v23 -= 4;
      }
      while (v23);
      v17 -= v20 & 0x3FFFFFFFFFFFFFFCLL;
      v8 -= v20 & 0x3FFFFFFFFFFFFFFCLL;
      if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v25 = (uint64_t)*--v8;
          *--v17 = v25;
        }
        while (v8 != v10);
        v10 = *(char ***)a1;
      }
    }
    *(_QWORD *)a1 = v17;
    *(_QWORD *)(a1 + 8) = v9;
    *(_QWORD *)(a1 + 16) = v18;
    if (v10)
      operator delete(v10);
  }
  else
  {
    *v8 = v6;
    v9 = v8 + 1;
  }
  *(_QWORD *)(a1 + 8) = v9;
  *(_QWORD *)(a1 + 24) = v4;
LABEL_29:
  ++*(_DWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = v4 + 56;
  return v4;
}

void sub_19C3A6E60(_QWORD *a1)
{
  sub_19C3A6ED0(a1);
  JUMPOUT(0x1A1AD355CLL);
}

float sub_19C3A6E84(uint64_t a1, int a2)
{
  uint64_t v2;

  v2 = 224;
  if (a2 == 1)
    v2 = 216;
  return *(float *)(*(_QWORD *)(a1 + 24) + v2);
}

float sub_19C3A6EA0(uint64_t a1, int a2)
{
  uint64_t v2;

  v2 = 224;
  if (a2 == 1)
    v2 = 220;
  return *(float *)(*(_QWORD *)(a1 + 24) + v2);
}

const char *sub_19C3A6EBC()
{
  return "recency";
}

uint64_t sub_19C3A6EC8()
{
  return 7;
}

_QWORD *sub_19C3A6ED0(_QWORD *a1)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;

  *a1 = &off_1E3D362C0;
  v2 = (void *)a1[9];
  if (v2)
  {
    a1[10] = v2;
    operator delete(v2);
  }
  v3 = (std::__shared_weak_count *)a1[8];
  if (!v3)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v6 = (std::__shared_weak_count *)a1[6];
    if (!v6)
      goto LABEL_13;
  }
  else
  {
LABEL_7:
    v6 = (std::__shared_weak_count *)a1[6];
    if (!v6)
      goto LABEL_13;
  }
  v7 = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_13:
  v9 = (std::__shared_weak_count *)a1[4];
  if (!v9)
    goto LABEL_17;
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    v12 = (std::__shared_weak_count *)a1[2];
    if (!v12)
      return a1;
  }
  else
  {
LABEL_17:
    v12 = (std::__shared_weak_count *)a1[2];
    if (!v12)
      return a1;
  }
  v13 = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  return a1;
}

_QWORD *sub_19C3A7004(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_1E3D36A00;
  v2 = a1[3];
  a1[3] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

void sub_19C3A7060(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_1E3D36A00;
  v2 = a1[3];
  a1[3] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C3A70CC(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, double *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14;
  uint64_t v16;
  NSObject *v17;
  __int128 *v18;
  const char *v19;
  double v20;
  uint64_t v21;
  double v22;
  __int128 *v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  std::ios_base *v28;
  __int128 *p_p;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  size_t v33;
  void *v34;
  unint64_t v35;
  const void **v36;
  const void *v37;
  uint64_t v38;
  uint64_t v39;
  uint8_t *v40;
  unint64_t v41;
  unint64_t v42;
  double v43;
  uint8_t buf[8];
  __int128 v45;
  __int128 __p;
  char v47;
  _QWORD v48[3];
  uint64_t v49;
  unint64_t v50;
  __int128 v51;
  __int128 v52;
  int v53;
  _QWORD v54[22];

  v54[19] = *MEMORY[0x1E0C80C00];
  *a5 = 0.0;
  if ((_DWORD)a2 == 1 && !a4)
    return 1;
  if (!*(_BYTE *)(a1 + 48))
  {
    v43 = 0.0;
    if ((*(unsigned int (**)(_QWORD, uint64_t, unint64_t, unint64_t, double *, _QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16), a2, a3, a4, &v43, 0, a7))
    {
      v20 = v43;
LABEL_19:
      *a5 = v20;
      return 1;
    }
    v21 = *(_QWORD *)(a1 + 24);
    if (!v21)
      return 0;
    v41 = 0;
    LOWORD(v42) = 0;
    if ((*(unsigned int (**)(uint64_t, uint64_t, unint64_t, unint64_t, double *, unint64_t *, uint64_t))(*(_QWORD *)v21 + 16))(v21, a2, a3, a4, &v43, &v41, a7))
    {
      if (a4)
        v22 = v43 + -0.5 + *(double *)(a1 + 40) + *a5;
      else
        v22 = *a5 + v43;
      *a5 = v22;
LABEL_43:
      if ((uint64_t)v41 < 1 || v41 > a4 || v41 == 1)
      {
        v14 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, double *, _QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24), *(unsigned int *)(a1 + 32), 0, 0, &v43, 0, a7);
        if ((v14 ^ 1) & 1 | (a4 == 0))
          return v14;
      }
      else
      {
        v14 = (*(uint64_t (**)(_QWORD, _QWORD, unint64_t))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24), *(unsigned int *)(a1 + 32), a3 + 4 * (a4 - (v41 - 1)));
        if ((v14 ^ 1) & 1 | (a4 == 0))
          return v14;
      }
      if (fabs(*a5) <= fabs(v43))
        return 1;
      v20 = *a5 - v43;
      goto LABEL_19;
    }
    if (qword_1EDB97228 != -1)
      dispatch_once(&qword_1EDB97228, &unk_1E3D3ABD0);
    v24 = qword_1EDB97220;
    if (!os_log_type_enabled((os_log_t)qword_1EDB97220, OS_LOG_TYPE_ERROR))
      goto LABEL_43;
    v25 = MEMORY[0x1E0DE4FE0] + 64;
    v26 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
    v27 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
    v54[0] = MEMORY[0x1E0DE4FE0] + 64;
    *(_QWORD *)&__p = v26;
    *(_QWORD *)((char *)&__p + *(_QWORD *)(v26 - 24)) = v27;
    v28 = (std::ios_base *)((char *)&__p + *(_QWORD *)(__p - 24));
    std::ios_base::init(v28, (char *)&__p + 8);
    v28[1].__vftable = 0;
    v28[1].__fmtflags_ = -1;
    *(_QWORD *)&__p = MEMORY[0x1E0DE4FE0] + 24;
    v54[0] = v25;
    std::streambuf::basic_streambuf();
    *((_QWORD *)&__p + 1) = MEMORY[0x1E0DE4FB8] + 16;
    v51 = 0u;
    v52 = 0u;
    v53 = 16;
    if (a4)
    {
      sub_19C2A1B24(&__p, (uint64_t)"P( ", 3);
      v30 = (_QWORD *)std::ostream::operator<<();
      sub_19C2A1B24(v30, (uint64_t)" |", 2);
      v31 = 16;
      if (a4 < 0x10)
        v31 = a4;
      v32 = -4 * v31;
      do
      {
        sub_19C2A1B24(&__p, (uint64_t)" ", 1);
        std::ostream::operator<<();
        v32 += 4;
      }
      while (v32);
      p_p = &__p;
    }
    else
    {
      sub_19C2A1B24(&__p, (uint64_t)"P( ", 3);
      p_p = (__int128 *)std::ostream::operator<<();
    }
    sub_19C2A1B24(p_p, (uint64_t)")", 2);
    if ((v53 & 0x10) != 0)
    {
      v35 = *((_QWORD *)&v52 + 1);
      if (*((_QWORD *)&v52 + 1) < v50)
      {
        *((_QWORD *)&v52 + 1) = v50;
        v35 = v50;
      }
      v36 = (const void **)&v49;
    }
    else
    {
      if ((v53 & 8) == 0)
      {
        v33 = 0;
        HIBYTE(v45) = 0;
        v34 = buf;
        goto LABEL_71;
      }
      v36 = (const void **)v48;
      v35 = v48[2];
    }
    v37 = *v36;
    v33 = v35 - (_QWORD)*v36;
    if (v33 >= 0x7FFFFFFFFFFFFFF8)
      sub_19C2A1A54();
    if (v33 >= 0x17)
    {
      v38 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v33 | 7) != 0x17)
        v38 = v33 | 7;
      v39 = v38 + 1;
      v34 = operator new(v38 + 1);
      *(_QWORD *)&v45 = v33;
      *((_QWORD *)&v45 + 1) = v39 | 0x8000000000000000;
      *(_QWORD *)buf = v34;
    }
    else
    {
      HIBYTE(v45) = v35 - *(_BYTE *)v36;
      v34 = buf;
      if (!v33)
        goto LABEL_71;
    }
    memmove(v34, v37, v33);
LABEL_71:
    *((_BYTE *)v34 + v33) = 0;
    *(_QWORD *)&__p = *MEMORY[0x1E0DE4F60];
    *(_QWORD *)((char *)&__p + *(_QWORD *)(__p - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
    *((_QWORD *)&__p + 1) = MEMORY[0x1E0DE4FB8] + 16;
    if (SBYTE7(v52) < 0)
      operator delete((void *)v51);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x1A1AD34CC](v54);
    v40 = buf;
    if (v45 < 0)
      v40 = *(uint8_t **)buf;
    LODWORD(__p) = 136315138;
    *(_QWORD *)((char *)&__p + 4) = v40;
    _os_log_error_impl(&dword_19C291000, v24, OS_LOG_TYPE_ERROR, "Supplemental LM failed to calculate %s", (uint8_t *)&__p, 0xCu);
    if (SHIBYTE(v45) < 0)
      operator delete(*(void **)buf);
    goto LABEL_43;
  }
  v41 = a3;
  v42 = a4;
  if (!a4 || sub_19C3ADF68(*(_QWORD *)(a1 + 16), a2))
  {
    v16 = *(_QWORD *)(a1 + 24);
    if (v16)
    {
      v43 = 0.0;
      v14 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, unint64_t, double *, uint64_t, uint64_t))(*(_QWORD *)v16 + 16))(v16, a2, a3, a4, &v43, a6, a7);
      if ((v14 & 1) == 0)
      {
        if (qword_1EDB97228 != -1)
          dispatch_once(&qword_1EDB97228, &unk_1E3D3ABD0);
        v17 = qword_1EDB97220;
        if (os_log_type_enabled((os_log_t)qword_1EDB97220, OS_LOG_TYPE_ERROR))
        {
          sub_19C3A787C(&__p, (uint64_t *)&v41);
          if (v47 >= 0)
            v18 = &__p;
          else
            v18 = (__int128 *)__p;
          *(_DWORD *)buf = 67109378;
          *(_DWORD *)&buf[4] = a2;
          LOWORD(v45) = 2080;
          *(_QWORD *)((char *)&v45 + 2) = v18;
          v19 = "Supplemental model failed calculating P( %d | [ %s ])";
LABEL_34:
          _os_log_error_impl(&dword_19C291000, v17, OS_LOG_TYPE_ERROR, v19, buf, 0x12u);
          if (v47 < 0)
            operator delete((void *)__p);
          return v14;
        }
        return v14;
      }
LABEL_21:
      *a5 = v43;
      return v14;
    }
    return 0;
  }
  v43 = 0.0;
  v14 = (*(uint64_t (**)(_QWORD, uint64_t, unint64_t, unint64_t, double *, _QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16), a2, a3, a4, &v43, 0, a7);
  if ((v14 & 1) != 0)
    goto LABEL_21;
  if (qword_1EDB97228 != -1)
    dispatch_once(&qword_1EDB97228, &unk_1E3D3ABD0);
  v17 = qword_1EDB97220;
  if (os_log_type_enabled((os_log_t)qword_1EDB97220, OS_LOG_TYPE_ERROR))
  {
    sub_19C3A787C(&__p, (uint64_t *)&v41);
    if (v47 >= 0)
      v23 = &__p;
    else
      v23 = (__int128 *)__p;
    *(_DWORD *)buf = 67109378;
    *(_DWORD *)&buf[4] = a2;
    LOWORD(v45) = 2080;
    *(_QWORD *)((char *)&v45 + 2) = v23;
    v19 = "Montreal failed calculating P( %d | [ %s ])";
    goto LABEL_34;
  }
  return v14;
}

void sub_19C3A77C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  std::ostream::~ostream();
  MEMORY[0x1A1AD34CC](a11);
  _Unwind_Resume(a1);
}

void sub_19C3A7850()
{
  __assert_rtn("createPredictionEnumerator", "LMMontrealCompositeModel.cpp", 187, "false");
}

uint64_t sub_19C3A787C(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  std::ios_base *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  const void **v13;
  uint64_t v14;
  size_t v15;
  void **p_dst;
  unint64_t v17;
  const void **v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  size_t v23;
  const void *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _BYTE *v29;
  void **__dst;
  size_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE v35[16];
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  void *__p[2];
  __int128 v40;
  int v41;
  uint64_t v42[20];

  v4 = MEMORY[0x1E0DE4FE0];
  v5 = MEMORY[0x1E0DE4FE0] + 64;
  v6 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v42[0] = MEMORY[0x1E0DE4FE0] + 64;
  v33 = v7;
  *(uint64_t *)((char *)&v33 + *(_QWORD *)(v7 - 24)) = v8;
  v9 = (std::ios_base *)((char *)&v33 + *(_QWORD *)(v33 - 24));
  std::ios_base::init(v9, &v34);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  v33 = v4 + 24;
  v42[0] = v5;
  std::streambuf::basic_streambuf();
  v10 = MEMORY[0x1E0DE4FB8];
  v34 = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v40 = 0u;
  v41 = 16;
  v11 = a2[1];
  if (!v11)
    goto LABEL_27;
  v29 = a1;
  v12 = *a2;
  v13 = (const void **)v35;
  v14 = 4 * v11;
  do
  {
    if ((v41 & 0x10) != 0)
    {
      v17 = *((_QWORD *)&v40 + 1);
      v18 = (const void **)&v37;
      if (*((_QWORD *)&v40 + 1) < v38)
      {
        *((_QWORD *)&v40 + 1) = v38;
        v17 = v38;
        v18 = (const void **)&v37;
      }
    }
    else
    {
      if ((v41 & 8) == 0)
      {
        v15 = 0;
        HIBYTE(v32) = 0;
        p_dst = (void **)&__dst;
        goto LABEL_17;
      }
      v17 = v36;
      v18 = (const void **)v35;
    }
    v19 = *v18;
    v15 = v17 - (_QWORD)*v18;
    if (v15 > 0x7FFFFFFFFFFFFFF7)
      sub_19C2A1A54();
    if (v15 >= 0x17)
    {
      v20 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v15 | 7) != 0x17)
        v20 = v15 | 7;
      v21 = v20 + 1;
      p_dst = (void **)operator new(v20 + 1);
      v31 = v15;
      v32 = v21 | 0x8000000000000000;
      __dst = p_dst;
LABEL_16:
      memmove(p_dst, v19, v15);
      goto LABEL_17;
    }
    HIBYTE(v32) = v17 - *(_BYTE *)v18;
    p_dst = (void **)&__dst;
    if (v15)
      goto LABEL_16;
LABEL_17:
    *((_BYTE *)p_dst + v15) = 0;
    if (SHIBYTE(v32) < 0)
    {
      v22 = v31;
      operator delete(__dst);
      if (!v22)
        goto LABEL_22;
LABEL_21:
      sub_19C2A1B24(&v33, (uint64_t)" ", 1);
      goto LABEL_22;
    }
    if (HIBYTE(v32))
      goto LABEL_21;
LABEL_22:
    std::ostream::operator<<();
    v12 += 4;
    v14 -= 4;
  }
  while (v14);
  v6 = (uint64_t *)MEMORY[0x1E0DE4F60];
  if ((v41 & 0x10) != 0)
  {
    v11 = *((_QWORD *)&v40 + 1);
    a1 = v29;
    v10 = MEMORY[0x1E0DE4FB8];
LABEL_27:
    if (v11 < v38)
    {
      *((_QWORD *)&v40 + 1) = v38;
      v11 = v38;
    }
    v13 = (const void **)&v37;
    goto LABEL_30;
  }
  a1 = v29;
  v10 = MEMORY[0x1E0DE4FB8];
  if ((v41 & 8) == 0)
  {
    v23 = 0;
    v29[23] = 0;
    goto LABEL_38;
  }
  v11 = v36;
LABEL_30:
  v24 = *v13;
  v23 = v11 - (_QWORD)*v13;
  if (v23 > 0x7FFFFFFFFFFFFFF7)
    sub_19C2A1A54();
  if (v23 >= 0x17)
  {
    v25 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v23 | 7) != 0x17)
      v25 = v23 | 7;
    v26 = v25 + 1;
    v27 = operator new(v25 + 1);
    a1[1] = v23;
    a1[2] = v26 | 0x8000000000000000;
    *a1 = v27;
    a1 = v27;
    goto LABEL_37;
  }
  *((_BYTE *)a1 + 23) = v23;
  if (v23)
LABEL_37:
    memmove(a1, v24, v23);
LABEL_38:
  *((_BYTE *)a1 + v23) = 0;
  v33 = *v6;
  *(uint64_t *)((char *)&v33 + *(_QWORD *)(v33 - 24)) = v6[3];
  v34 = v10 + 16;
  if (SBYTE7(v40) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A1AD34CC](v42);
}

void sub_19C3A7BB4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x1A1AD34CC](v1);
  _Unwind_Resume(a1);
}

void sub_19C3A7BDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_19C2B39CC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19C3A7BFC(uint64_t *a1, CFDictionaryRef theDict)
{
  unint64_t Count;
  unint64_t v4;
  void *v5;
  void *v6;
  const __CFDictionary *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  void *v19;
  void *v20;
  uint64_t i;
  SInt32 IntValue;
  unint64_t v23;
  int v24;
  unint64_t v25;
  uint8x8_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  float v30;
  _BOOL8 v31;
  unint64_t v32;
  unint64_t v33;
  size_t prime;
  unint64_t v35;
  uint8x8_t v36;
  uint64_t v37;
  _QWORD *v38;
  unint64_t *v39;
  unint64_t v40;
  SInt32 v41;
  unint64_t v42;
  uint8x8_t v43;
  void **v44;
  char *v45;
  unint64_t v46;
  uint64_t v47;
  float v48;
  _BOOL8 v49;
  unint64_t v50;
  unint64_t v51;
  size_t v52;
  unint64_t v53;
  uint8x8_t v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  unint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t j;
  unint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  int8x8_t v68;
  unint64_t v69;
  uint8x8_t v70;
  unint64_t *v71;
  void *v72;
  SInt32 v73;
  unint64_t v74;
  unint64_t v75;
  uint8x8_t v76;
  void **v77;
  char *v78;
  unint64_t v79;
  uint64_t v80;
  float v81;
  float v82;
  _BOOL8 v83;
  unint64_t v84;
  unint64_t v85;
  size_t v86;
  void *v87;
  void *v88;
  uint64_t v89;
  _QWORD *v90;
  size_t v91;
  size_t v92;
  size_t v93;
  _QWORD *k;
  size_t v95;
  uint64_t v96;
  unint64_t v97;
  uint8x8_t v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  size_t v102;
  uint64_t v103;
  _QWORD *v104;
  unint64_t v105;
  _QWORD *v106;
  void *v107;
  _QWORD *v108;
  _QWORD *v109;
  _QWORD *v110;
  void *v111;
  void *v112;
  unint64_t v113;
  _QWORD *v114;
  _QWORD *v115;
  unint64_t v116;
  unint64_t v118;
  void *v119;
  CFStringRef *v120;
  void *v121[2];
  void *__p[2];
  float v123;
  void *v124[2];
  void *v125[2];
  float v126;
  _QWORD valuePtr[2];
  char v128;

  Count = CFDictionaryGetCount(theDict);
  v4 = Count;
  if (Count)
  {
    if (Count >> 61)
      sub_19C2A18E8();
    v5 = operator new(8 * Count);
    bzero(v5, 8 * v4);
    v6 = operator new(8 * v4);
    bzero(v6, 8 * v4);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = theDict;
  v8 = v6;
  CFDictionaryGetKeysAndValues(v7, (const void **)v5, (const void **)v6);
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  *((_DWORD *)a1 + 8) = 1065353216;
  if (!v4)
    goto LABEL_279;
  v9 = 0;
  v114 = a1 + 2;
  v115 = v6;
  v113 = v4;
  do
  {
    v10 = v8[v9];
    v11 = CFDictionaryGetCount((CFDictionaryRef)v10);
    v12 = v11;
    v116 = v9;
    if (v11)
    {
      if (v11 >> 61)
        sub_19C2A18E8();
      v9 = 8 * v11;
      v13 = operator new(8 * v11);
      bzero(v13, 8 * v12);
      v14 = operator new(8 * v12);
      bzero(v14, 8 * v12);
    }
    else
    {
      v13 = 0;
      v14 = 0;
    }
    CFDictionaryGetKeysAndValues((CFDictionaryRef)v10, (const void **)v13, (const void **)v14);
    *(_OWORD *)v124 = 0u;
    *(_OWORD *)v125 = 0u;
    v126 = 1.0;
    v120 = (CFStringRef *)v13;
    v119 = v14;
    if (v12)
    {
      v15 = 0;
      v118 = v12;
      while (1)
      {
        v16 = *((_QWORD *)v14 + v15);
        v17 = CFDictionaryGetCount((CFDictionaryRef)v16);
        v18 = v17;
        if (v17)
        {
          if (v17 >> 61)
            sub_19C2A18E8();
          v9 = 8 * v17;
          v19 = operator new(8 * v17);
          bzero(v19, 8 * v18);
          v20 = operator new(8 * v18);
          bzero(v20, 8 * v18);
        }
        else
        {
          v19 = 0;
          v20 = 0;
        }
        CFDictionaryGetKeysAndValues((CFDictionaryRef)v16, (const void **)v19, (const void **)v20);
        *(_OWORD *)v121 = 0u;
        *(_OWORD *)__p = 0u;
        v123 = 1.0;
        if (v18)
        {
          for (i = 0; i != v18; ++i)
          {
            IntValue = CFStringGetIntValue(*((CFStringRef *)v19 + i));
            LODWORD(valuePtr[0]) = 0;
            CFNumberGetValue(*((CFNumberRef *)v20 + i), kCFNumberFloatType, valuePtr);
            v23 = IntValue;
            v24 = valuePtr[0];
            v25 = (unint64_t)v121[1];
            if (v121[1])
            {
              v26 = (uint8x8_t)vcnt_s8((int8x8_t)v121[1]);
              v26.i16[0] = vaddlv_u8(v26);
              if (v26.u32[0] > 1uLL)
              {
                v9 = IntValue;
                if (v121[1] <= (void *)IntValue)
                  v9 = IntValue % (unint64_t)v121[1];
              }
              else
              {
                v9 = ((unint64_t)v121[1] - 1) & IntValue;
              }
              v27 = (unint64_t *)*((_QWORD *)v121[0] + v9);
              if (v27)
              {
                v16 = *v27;
                if (*v27)
                {
                  if (v26.u32[0] < 2uLL)
                  {
                    while (1)
                    {
                      v29 = *(_QWORD *)(v16 + 8);
                      if (v29 == v23)
                      {
                        if (*(_QWORD *)(v16 + 16) == v23)
                          goto LABEL_79;
                      }
                      else if ((v29 & ((unint64_t)v121[1] - 1)) != v9)
                      {
                        goto LABEL_41;
                      }
                      v16 = *(_QWORD *)v16;
                      if (!v16)
                        goto LABEL_41;
                    }
                  }
                  do
                  {
                    v28 = *(_QWORD *)(v16 + 8);
                    if (v28 == v23)
                    {
                      if (*(_QWORD *)(v16 + 16) == v23)
                        goto LABEL_79;
                    }
                    else
                    {
                      if ((void *)v28 >= v121[1])
                        v28 %= (unint64_t)v121[1];
                      if (v28 != v9)
                        break;
                    }
                    v16 = *(_QWORD *)v16;
                  }
                  while (v16);
                }
              }
            }
LABEL_41:
            v16 = (unint64_t)operator new(0x20uLL);
            *(_QWORD *)v16 = 0;
            *(_QWORD *)(v16 + 8) = v23;
            *(_QWORD *)(v16 + 16) = v23;
            *(_DWORD *)(v16 + 24) = 0;
            v30 = (float)((unint64_t)__p[1] + 1);
            if (!v25 || (float)(v123 * (float)v25) < v30)
            {
              v31 = (v25 & (v25 - 1)) != 0;
              if (v25 < 3)
                v31 = 1;
              v32 = v31 | (2 * v25);
              v33 = vcvtps_u32_f32(v30 / v123);
              if (v32 <= v33)
                prime = v33;
              else
                prime = v32;
              if (prime == 1)
              {
                prime = 2;
              }
              else if ((prime & (prime - 1)) != 0)
              {
                prime = std::__next_prime(prime);
                v25 = (unint64_t)v121[1];
              }
              if (prime > v25)
                goto LABEL_53;
              if (prime < v25)
              {
                v35 = vcvtps_u32_f32((float)(unint64_t)__p[1] / v123);
                if (v25 < 3
                  || (v36 = (uint8x8_t)vcnt_s8((int8x8_t)v25), v36.i16[0] = vaddlv_u8(v36), v36.u32[0] > 1uLL))
                {
                  v35 = std::__next_prime(v35);
                }
                else
                {
                  v37 = 1 << -(char)__clz(v35 - 1);
                  if (v35 >= 2)
                    v35 = v37;
                }
                if (prime <= v35)
                  prime = v35;
                if (prime < v25)
LABEL_53:
                  sub_19C2EC6BC((uint64_t)v121, prime);
              }
              v25 = (unint64_t)v121[1];
              if (((unint64_t)v121[1] & ((unint64_t)v121[1] - 1)) != 0)
              {
                if (v121[1] <= (void *)v23)
                  v9 = v23 % (unint64_t)v121[1];
                else
                  v9 = v23;
              }
              else
              {
                v9 = ((unint64_t)v121[1] - 1) & v23;
              }
            }
            v38 = v121[0];
            v39 = (unint64_t *)*((_QWORD *)v121[0] + v9);
            if (v39)
            {
              *(_QWORD *)v16 = *v39;
            }
            else
            {
              *(void **)v16 = __p[0];
              __p[0] = (void *)v16;
              v38[v9] = __p;
              if (!*(_QWORD *)v16)
                goto LABEL_78;
              v40 = *(_QWORD *)(*(_QWORD *)v16 + 8);
              if ((v25 & (v25 - 1)) != 0)
              {
                if (v40 >= v25)
                  v40 %= v25;
              }
              else
              {
                v40 &= v25 - 1;
              }
              v39 = (unint64_t *)((char *)v121[0] + 8 * v40);
            }
            *v39 = v16;
LABEL_78:
            ++__p[1];
LABEL_79:
            *(_DWORD *)(v16 + 24) = v24;
          }
        }
        v41 = CFStringGetIntValue(v120[v15]);
        v42 = v41;
        v9 = (unint64_t)v124[1];
        if (v124[1])
        {
          v43 = (uint8x8_t)vcnt_s8((int8x8_t)v124[1]);
          v43.i16[0] = vaddlv_u8(v43);
          if (v43.u32[0] > 1uLL)
          {
            v16 = v41;
            if (v124[1] <= (void *)v41)
              v16 = v41 % (unint64_t)v124[1];
          }
          else
          {
            v16 = ((unint64_t)v124[1] - 1) & v41;
          }
          v44 = (void **)*((_QWORD *)v124[0] + v16);
          if (v44)
          {
            v45 = (char *)*v44;
            if (*v44)
            {
              if (v43.u32[0] < 2uLL)
              {
                while (1)
                {
                  v47 = *((_QWORD *)v45 + 1);
                  if (v47 == v41)
                  {
                    if (*((_QWORD *)v45 + 2) == v41)
                      goto LABEL_138;
                  }
                  else if ((v47 & ((uint64_t)v124[1] - 1)) != v16)
                  {
                    goto LABEL_100;
                  }
                  v45 = *(char **)v45;
                  if (!v45)
                    goto LABEL_100;
                }
              }
              do
              {
                v46 = *((_QWORD *)v45 + 1);
                if (v46 == v41)
                {
                  if (*((_QWORD *)v45 + 2) == v41)
                    goto LABEL_138;
                }
                else
                {
                  if ((void *)v46 >= v124[1])
                    v46 %= (unint64_t)v124[1];
                  if (v46 != v16)
                    break;
                }
                v45 = *(char **)v45;
              }
              while (v45);
            }
          }
        }
LABEL_100:
        v45 = (char *)operator new(0x40uLL);
        valuePtr[0] = v45;
        valuePtr[1] = v125;
        *(_QWORD *)v45 = 0;
        *((_QWORD *)v45 + 1) = v42;
        *((_QWORD *)v45 + 2) = v42;
        *(_OWORD *)(v45 + 24) = 0u;
        *(_OWORD *)(v45 + 40) = 0u;
        *((_DWORD *)v45 + 14) = 1065353216;
        v128 = 1;
        v48 = (float)((unint64_t)v125[1] + 1);
        if (!v9 || (float)(v126 * (float)v9) < v48)
        {
          v49 = (v9 & (v9 - 1)) != 0;
          if (v9 < 3)
            v49 = 1;
          v50 = v49 | (2 * v9);
          v51 = vcvtps_u32_f32(v48 / v126);
          if (v50 <= v51)
            v52 = v51;
          else
            v52 = v50;
          if (v52 == 1)
          {
            v52 = 2;
          }
          else if ((v52 & (v52 - 1)) != 0)
          {
            v52 = std::__next_prime(v52);
            v9 = (unint64_t)v124[1];
          }
          if (v52 > v9)
            goto LABEL_112;
          if (v52 < v9)
          {
            v53 = vcvtps_u32_f32((float)(unint64_t)v125[1] / v126);
            if (v9 < 3 || (v54 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v54.i16[0] = vaddlv_u8(v54), v54.u32[0] > 1uLL))
            {
              v53 = std::__next_prime(v53);
            }
            else
            {
              v55 = 1 << -(char)__clz(v53 - 1);
              if (v53 >= 2)
                v53 = v55;
            }
            if (v52 <= v53)
              v52 = v53;
            if (v52 < v9)
LABEL_112:
              sub_19C2EC6BC((uint64_t)v124, v52);
          }
          v9 = (unint64_t)v124[1];
          if (((unint64_t)v124[1] & ((unint64_t)v124[1] - 1)) != 0)
          {
            if (v124[1] <= (void *)v42)
              v16 = v42 % (unint64_t)v124[1];
            else
              v16 = v42;
          }
          else
          {
            v16 = ((unint64_t)v124[1] - 1) & v42;
          }
        }
        v56 = v124[0];
        v57 = (_QWORD *)*((_QWORD *)v124[0] + v16);
        if (v57)
          break;
        *(void **)v45 = v125[0];
        v125[0] = v45;
        v56[v16] = v125;
        if (*(_QWORD *)v45)
        {
          v58 = *(_QWORD *)(*(_QWORD *)v45 + 8);
          if ((v9 & (v9 - 1)) != 0)
          {
            if (v58 >= v9)
              v58 %= v9;
          }
          else
          {
            v58 &= v9 - 1;
          }
          v57 = (char *)v124[0] + 8 * v58;
          goto LABEL_136;
        }
LABEL_137:
        ++v125[1];
LABEL_138:
        v10 = (unint64_t)(v45 + 24);
        if (v45 + 24 == (char *)v121)
          goto LABEL_167;
        *((float *)v45 + 14) = v123;
        v59 = __p[0];
        v60 = *((_QWORD *)v45 + 4);
        if (v60)
        {
          for (j = 0; j != v60; ++j)
            *(_QWORD *)(*(_QWORD *)v10 + 8 * j) = 0;
          v62 = (unint64_t *)(v45 + 40);
          v63 = *((_QWORD *)v45 + 5);
          *((_QWORD *)v45 + 5) = 0;
          for (*((_QWORD *)v45 + 6) = 0; v63; v59 = (_QWORD *)*v59)
          {
            v9 = v63;
            if (!v59)
            {
              do
              {
                v10 = *(_QWORD *)v9;
                operator delete((void *)v9);
                v9 = v10;
              }
              while (v10);
              goto LABEL_167;
            }
            v65 = v59[2];
            *(_QWORD *)(v63 + 16) = v65;
            v66 = (_QWORD *)(v63 + 16);
            *(_DWORD *)(v63 + 24) = *((_DWORD *)v59 + 6);
            v63 = *(_QWORD *)v63;
            *(_QWORD *)(v9 + 8) = v65;
            v67 = sub_19C3A8CE8((uint64_t)(v45 + 24), v65, v66);
            v68 = *(int8x8_t *)(v45 + 32);
            v69 = *(_QWORD *)(v9 + 8);
            v70 = (uint8x8_t)vcnt_s8(v68);
            v70.i16[0] = vaddlv_u8(v70);
            if (v70.u32[0] > 1uLL)
            {
              if (v69 >= *(_QWORD *)&v68)
                v69 %= *(_QWORD *)&v68;
            }
            else
            {
              v69 &= *(_QWORD *)&v68 - 1;
            }
            if (v67)
            {
              *(_QWORD *)v9 = *v67;
              *v67 = v9;
              if (!*(_QWORD *)v9)
                goto LABEL_148;
              v64 = *(_QWORD *)(*(_QWORD *)v9 + 8);
              if (v70.u32[0] > 1uLL)
              {
                if (v64 >= *(_QWORD *)&v68)
                  v64 %= *(_QWORD *)&v68;
              }
              else
              {
                v64 &= *(_QWORD *)&v68 - 1;
              }
              if (v64 == v69)
                goto LABEL_148;
            }
            else
            {
              *(_QWORD *)v9 = *v62;
              *v62 = v9;
              *(_QWORD *)(*(_QWORD *)v10 + 8 * v69) = v62;
              if (!*(_QWORD *)v9)
                goto LABEL_148;
              v64 = *(_QWORD *)(*(_QWORD *)v9 + 8);
              if (v70.u32[0] <= 1uLL)
              {
                v64 &= *(_QWORD *)&v68 - 1;
              }
              else if (v64 >= *(_QWORD *)&v68)
              {
                v64 %= *(_QWORD *)&v68;
              }
            }
            *(_QWORD *)(*(_QWORD *)v10 + 8 * v64) = v9;
LABEL_148:
            ++*((_QWORD *)v45 + 6);
          }
        }
        for (; v59; v59 = (_QWORD *)*v59)
        {
          v9 = (unint64_t)operator new(0x20uLL);
          *(_QWORD *)v9 = 0;
          *(_OWORD *)(v9 + 16) = *((_OWORD *)v59 + 1);
          *(_QWORD *)(v9 + 8) = *(_QWORD *)(v9 + 16);
          sub_19C3A90DC((_QWORD *)v45 + 3, (_QWORD *)v9);
        }
LABEL_167:
        v71 = (unint64_t *)__p[0];
        if (__p[0])
        {
          do
          {
            v10 = *v71;
            operator delete(v71);
            v71 = (unint64_t *)v10;
          }
          while (v10);
        }
        v72 = v121[0];
        v121[0] = 0;
        if (v72)
          operator delete(v72);
        if (v20)
          operator delete(v20);
        if (v19)
          operator delete(v19);
        ++v15;
        v14 = v119;
        v13 = v120;
        if (v15 == v118)
        {
          v4 = v113;
          goto LABEL_176;
        }
      }
      *(_QWORD *)v45 = *v57;
LABEL_136:
      *v57 = v45;
      goto LABEL_137;
    }
LABEL_176:
    v73 = CFStringGetIntValue(*((CFStringRef *)v5 + v116));
    v74 = v73;
    v75 = a1[1];
    if (v75)
    {
      v76 = (uint8x8_t)vcnt_s8((int8x8_t)v75);
      v76.i16[0] = vaddlv_u8(v76);
      if (v76.u32[0] > 1uLL)
      {
        v10 = v73;
        if (v75 <= v73)
          v10 = v73 % v75;
      }
      else
      {
        v10 = (v75 - 1) & v73;
      }
      v77 = *(void ***)(*a1 + 8 * v10);
      if (v77)
      {
        v78 = (char *)*v77;
        if (*v77)
        {
          if (v76.u32[0] < 2uLL)
          {
            while (1)
            {
              v80 = *((_QWORD *)v78 + 1);
              if (v80 == v73)
              {
                if (*((_QWORD *)v78 + 2) == v73)
                  goto LABEL_256;
              }
              else if ((v80 & (v75 - 1)) != v10)
              {
                goto LABEL_196;
              }
              v78 = *(char **)v78;
              if (!v78)
                goto LABEL_196;
            }
          }
          do
          {
            v79 = *((_QWORD *)v78 + 1);
            if (v79 == v73)
            {
              if (*((_QWORD *)v78 + 2) == v73)
                goto LABEL_256;
            }
            else
            {
              if (v79 >= v75)
                v79 %= v75;
              if (v79 != v10)
                break;
            }
            v78 = *(char **)v78;
          }
          while (v78);
        }
      }
    }
LABEL_196:
    v78 = (char *)operator new(0x40uLL);
    *(_QWORD *)v78 = 0;
    *((_QWORD *)v78 + 1) = v74;
    *((_QWORD *)v78 + 2) = v74;
    *(_OWORD *)(v78 + 24) = 0u;
    *(_OWORD *)(v78 + 40) = 0u;
    *((_DWORD *)v78 + 14) = 1065353216;
    v81 = (float)(unint64_t)(a1[3] + 1);
    v82 = *((float *)a1 + 8);
    if (!v75 || (float)(v82 * (float)v75) < v81)
    {
      v83 = (v75 & (v75 - 1)) != 0;
      if (v75 < 3)
        v83 = 1;
      v84 = v83 | (2 * v75);
      v85 = vcvtps_u32_f32(v81 / v82);
      if (v84 <= v85)
        v86 = v85;
      else
        v86 = v84;
      if (v86 == 1)
      {
        v86 = 2;
      }
      else if ((v86 & (v86 - 1)) != 0)
      {
        v86 = std::__next_prime(v86);
        v75 = a1[1];
      }
      if (v86 <= v75)
      {
        if (v86 >= v75)
          goto LABEL_233;
        v97 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
        if (v75 < 3 || (v98 = (uint8x8_t)vcnt_s8((int8x8_t)v75), v98.i16[0] = vaddlv_u8(v98), v98.u32[0] > 1uLL))
        {
          v97 = std::__next_prime(v97);
        }
        else
        {
          v99 = 1 << -(char)__clz(v97 - 1);
          if (v97 >= 2)
            v97 = v99;
        }
        if (v86 <= v97)
          v86 = v97;
        if (v86 >= v75)
        {
          v75 = a1[1];
LABEL_233:
          if ((v75 & (v75 - 1)) != 0)
          {
            if (v75 <= v74)
              v10 = v74 % v75;
            else
              v10 = v74;
          }
          else
          {
            v10 = (v75 - 1) & v74;
          }
          goto LABEL_246;
        }
        if (!v86)
        {
          v112 = (void *)*a1;
          *a1 = 0;
          if (v112)
            operator delete(v112);
          v75 = 0;
          a1[1] = 0;
          goto LABEL_233;
        }
      }
      if (v86 >> 61)
        sub_19C2A143C();
      v87 = operator new(8 * v86);
      v88 = (void *)*a1;
      *a1 = (uint64_t)v87;
      if (v88)
        operator delete(v88);
      v89 = 0;
      a1[1] = v86;
      do
        *(_QWORD *)(*a1 + 8 * v89++) = 0;
      while (v86 != v89);
      v90 = (_QWORD *)*v114;
      if (!*v114)
      {
LABEL_232:
        v75 = v86;
        goto LABEL_233;
      }
      v91 = v90[1];
      v92 = v86 - 1;
      if ((v86 & (v86 - 1)) == 0)
      {
        v93 = v91 & v92;
        *(_QWORD *)(*a1 + 8 * v93) = v114;
        for (k = (_QWORD *)*v90; *v90; k = (_QWORD *)*v90)
        {
          v95 = k[1] & v92;
          if (v95 == v93)
          {
            v90 = k;
          }
          else if (*(_QWORD *)(*a1 + 8 * v95))
          {
            *v90 = *k;
            v96 = 8 * v95;
            *k = **(_QWORD **)(*a1 + v96);
            **(_QWORD **)(*a1 + v96) = k;
          }
          else
          {
            *(_QWORD *)(*a1 + 8 * v95) = v90;
            v90 = k;
            v93 = v95;
          }
        }
        goto LABEL_232;
      }
      if (v91 >= v86)
        v91 %= v86;
      *(_QWORD *)(*a1 + 8 * v91) = v114;
      v100 = (_QWORD *)*v90;
      if (!*v90)
        goto LABEL_232;
      while (1)
      {
        v102 = v100[1];
        if (v102 >= v86)
          v102 %= v86;
        if (v102 != v91)
        {
          if (!*(_QWORD *)(*a1 + 8 * v102))
          {
            *(_QWORD *)(*a1 + 8 * v102) = v90;
            goto LABEL_237;
          }
          *v90 = *v100;
          v101 = 8 * v102;
          *v100 = **(_QWORD **)(*a1 + v101);
          **(_QWORD **)(*a1 + v101) = v100;
          v100 = v90;
        }
        v102 = v91;
LABEL_237:
        v90 = v100;
        v100 = (_QWORD *)*v100;
        v91 = v102;
        if (!v100)
          goto LABEL_232;
      }
    }
LABEL_246:
    v103 = *a1;
    v104 = *(_QWORD **)(*a1 + 8 * v10);
    if (v104)
    {
      *(_QWORD *)v78 = *v104;
LABEL_254:
      *v104 = v78;
      goto LABEL_255;
    }
    *(_QWORD *)v78 = *v114;
    *v114 = v78;
    *(_QWORD *)(v103 + 8 * v10) = v114;
    if (*(_QWORD *)v78)
    {
      v105 = *(_QWORD *)(*(_QWORD *)v78 + 8);
      if ((v75 & (v75 - 1)) != 0)
      {
        if (v105 >= v75)
          v105 %= v75;
      }
      else
      {
        v105 &= v75 - 1;
      }
      v104 = (_QWORD *)(*a1 + 8 * v105);
      goto LABEL_254;
    }
LABEL_255:
    ++a1[3];
LABEL_256:
    if (v78 + 24 != (char *)v124)
    {
      *((float *)v78 + 14) = v126;
      sub_19C3A91FC((_QWORD *)v78 + 3, (uint64_t *)v125[0]);
    }
    v106 = v125[0];
    if (v125[0])
    {
      do
      {
        v108 = (_QWORD *)*v106;
        v109 = (_QWORD *)v106[5];
        if (v109)
        {
          do
          {
            v110 = (_QWORD *)*v109;
            operator delete(v109);
            v109 = v110;
          }
          while (v110);
        }
        v111 = (void *)v106[3];
        v106[3] = 0;
        if (v111)
          operator delete(v111);
        operator delete(v106);
        v106 = v108;
      }
      while (v108);
    }
    v107 = v124[0];
    v124[0] = 0;
    if (v107)
      operator delete(v107);
    v8 = v115;
    if (v14)
      operator delete(v14);
    if (v13)
      operator delete(v13);
    v9 = v116 + 1;
  }
  while (v116 + 1 != v4);
LABEL_279:
  if (v8)
    operator delete(v8);
  if (v5)
    operator delete(v5);
}

void sub_19C3A8AD0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19C3A8AD8(_Unwind_Exception *exception_object)
{
  void *v1;
  void *v2;

  if (v1)
  {
    operator delete(v1);
    if (!v2)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if (!v2)
  {
    goto LABEL_3;
  }
  operator delete(v2);
  _Unwind_Resume(exception_object);
}

void sub_19C3A8AE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,_QWORD *a27)
{
  _QWORD *v27;
  _QWORD *v29;
  void *v30;
  uint64_t v31;
  void *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  void *v36;

  sub_19C3A9E8C(1, v27);
  v29 = a27;
  if (a27)
  {
    do
    {
      v33 = (_QWORD *)*v29;
      v34 = (_QWORD *)v29[5];
      if (v34)
      {
        do
        {
          v35 = (_QWORD *)*v34;
          operator delete(v34);
          v34 = v35;
        }
        while (v35);
      }
      v36 = (void *)v29[3];
      v29[3] = 0;
      if (v36)
        operator delete(v36);
      operator delete(v29);
      v29 = v33;
    }
    while (v33);
  }
  if (a25)
  {
    operator delete(a25);
    v30 = a11;
    v31 = a12;
    if (!a16)
    {
LABEL_4:
      if (!__p)
        goto LABEL_6;
      goto LABEL_5;
    }
  }
  else
  {
    v30 = a11;
    v31 = a12;
    if (!a16)
      goto LABEL_4;
  }
  operator delete(a16);
  if (!__p)
  {
LABEL_6:
    sub_19C3A948C(*(_QWORD **)(a14 + 16));
    v32 = *(void **)a14;
    *(_QWORD *)a14 = 0;
    if (v32)
    {
      operator delete(v32);
      if (!v30)
      {
LABEL_8:
        if (!v31)
          goto LABEL_9;
        goto LABEL_17;
      }
    }
    else if (!v30)
    {
      goto LABEL_8;
    }
    operator delete(v30);
    if (!v31)
LABEL_9:
      _Unwind_Resume(a1);
LABEL_17:
    JUMPOUT(0x19C3A8CBCLL);
  }
LABEL_5:
  operator delete(__p);
  goto LABEL_6;
}

void sub_19C3A8B04()
{
  JUMPOUT(0x19C3A8C38);
}

void sub_19C3A8B10()
{
  JUMPOUT(0x19C3A8C40);
}

void sub_19C3A8B34(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  void *v27;
  uint64_t v28;
  uint64_t v29;

  if (!a27)
  {
    if (!a25)
    {
      if (!v28)
      {
        if (v27)
          operator delete(v27);
        sub_19C3A948C((_QWORD *)a14[2]);
        v29 = *a14;
        *a14 = 0;
        if (!v29)
        {
          if (!a11)
            JUMPOUT(0x19C3A8C5CLL);
          JUMPOUT(0x19C3A8CB0);
        }
        JUMPOUT(0x19C3A8CA8);
      }
      JUMPOUT(0x19C3A8CD8);
    }
    JUMPOUT(0x19C3A8CCCLL);
  }
  JUMPOUT(0x19C3A8C78);
}

void sub_19C3A8B68()
{
  JUMPOUT(0x19C3A8BF8);
}

void sub_19C3A8B74(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  __cxa_begin_catch(a1);
  do
  {
    v2 = (_QWORD *)*v1;
    operator delete(v1);
    v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_19C3A8B94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,_QWORD *a21)
{
  void *v21;
  void *v22;
  _QWORD *v23;
  _QWORD *v24;

  __cxa_end_catch();
  v23 = a21;
  if (a21)
  {
    do
    {
      v24 = (_QWORD *)*v23;
      operator delete(v23);
      v23 = v24;
    }
    while (v24);
  }
  if (a19)
    operator delete(a19);
  if (v22)
    operator delete(v22);
  if (v21)
    operator delete(v21);
  JUMPOUT(0x19C3A8C18);
}

void sub_19C3A8BA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,_QWORD *a21)
{
  void *v21;
  void *v22;
  void *v23;
  _QWORD *v24;
  _QWORD *v25;

  operator delete(v21);
  v24 = a21;
  if (a21)
  {
    do
    {
      v25 = (_QWORD *)*v24;
      operator delete(v24);
      v24 = v25;
    }
    while (v25);
  }
  if (a19)
    operator delete(a19);
  if (v23)
    operator delete(v23);
  if (v22)
    operator delete(v22);
  JUMPOUT(0x19C3A8C18);
}

void sub_19C3A8BB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,_QWORD *a21)
{
  void *v21;
  void *v22;
  void *v23;
  _QWORD *v24;
  _QWORD *v25;

  operator delete(v21);
  v24 = a21;
  if (a21)
  {
    do
    {
      v25 = (_QWORD *)*v24;
      operator delete(v24);
      v24 = v25;
    }
    while (v25);
  }
  if (a19)
    operator delete(a19);
  if (v23)
    operator delete(v23);
  if (v22)
    operator delete(v22);
  JUMPOUT(0x19C3A8C18);
}

_QWORD *sub_19C3A8CE8(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v6;
  float v7;
  float v8;
  _BOOL8 v9;
  unint64_t v10;
  unint64_t v11;
  size_t prime;
  void *v13;
  void *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  size_t v18;
  size_t v19;
  size_t v20;
  _QWORD *j;
  size_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  uint8x8_t v27;
  uint64_t v28;
  _QWORD *i;
  unint64_t v30;
  _QWORD *v31;
  int v32;
  _BOOL4 v33;
  char v34;
  _QWORD *result;
  uint64_t v36;
  size_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  int v43;
  _BOOL4 v44;
  int v45;
  unint64_t v46;
  unint64_t v47;
  void *v48;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v8 = *(float *)(a1 + 32);
  if (!v6 || (float)(v8 * (float)v6) < v7)
  {
    v9 = 1;
    if (v6 >= 3)
      v9 = (v6 & (v6 - 1)) != 0;
    v10 = v9 | (2 * v6);
    v11 = vcvtps_u32_f32(v7 / v8);
    if (v10 <= v11)
      prime = v11;
    else
      prime = v10;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v6 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v6)
      goto LABEL_85;
    if (prime >= v6)
      goto LABEL_40;
    v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v6 < 3 || (v27 = (uint8x8_t)vcnt_s8((int8x8_t)v6), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
    {
      v26 = std::__next_prime(v26);
    }
    else
    {
      v28 = 1 << -(char)__clz(v26 - 1);
      if (v26 >= 2)
        v26 = v28;
    }
    if (prime <= v26)
      prime = v26;
    if (prime >= v6)
    {
      v6 = *(_QWORD *)(a1 + 8);
      goto LABEL_40;
    }
    if (prime)
    {
LABEL_85:
      if (prime >> 61)
        sub_19C2A143C();
      v13 = operator new(8 * prime);
      v14 = *(void **)a1;
      *(_QWORD *)a1 = v13;
      if (v14)
        operator delete(v14);
      v15 = 0;
      *(_QWORD *)(a1 + 8) = prime;
      do
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v15++) = 0;
      while (prime != v15);
      v17 = a1 + 16;
      v16 = *(_QWORD **)(a1 + 16);
      if (v16)
      {
        v18 = v16[1];
        v19 = prime - 1;
        if ((prime & (prime - 1)) != 0)
        {
          if (v18 >= prime)
            v18 %= prime;
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v18) = v17;
          for (i = (_QWORD *)*v16; *v16; i = (_QWORD *)*v16)
          {
            v37 = i[1];
            if (v37 >= prime)
              v37 %= prime;
            if (v37 == v18)
            {
              v16 = i;
            }
            else
            {
              v38 = i;
              if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v37))
              {
                do
                {
                  v39 = v38;
                  v38 = (_QWORD *)*v38;
                }
                while (v38 && i[2] == v38[2]);
                *v16 = v38;
                v40 = 8 * v37;
                *v39 = **(_QWORD **)(*(_QWORD *)a1 + v40);
                **(_QWORD **)(*(_QWORD *)a1 + v40) = i;
              }
              else
              {
                *(_QWORD *)(*(_QWORD *)a1 + 8 * v37) = v16;
                v16 = i;
                v18 = v37;
              }
            }
          }
        }
        else
        {
          v20 = v18 & v19;
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v20) = v17;
          for (j = (_QWORD *)*v16; *v16; j = (_QWORD *)*v16)
          {
            v22 = j[1] & v19;
            if (v22 == v20)
            {
              v16 = j;
            }
            else
            {
              v23 = j;
              if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v22))
              {
                do
                {
                  v24 = v23;
                  v23 = (_QWORD *)*v23;
                }
                while (v23 && j[2] == v23[2]);
                *v16 = v23;
                v25 = 8 * v22;
                *v24 = **(_QWORD **)(*(_QWORD *)a1 + v25);
                **(_QWORD **)(*(_QWORD *)a1 + v25) = j;
              }
              else
              {
                *(_QWORD *)(*(_QWORD *)a1 + 8 * v22) = v16;
                v16 = j;
                v20 = v22;
              }
            }
          }
        }
      }
      v6 = prime;
    }
    else
    {
      v48 = *(void **)a1;
      *(_QWORD *)a1 = 0;
      if (v48)
        operator delete(v48);
      v6 = 0;
      *(_QWORD *)(a1 + 8) = 0;
    }
  }
LABEL_40:
  v30 = v6 - 1;
  if ((v6 & (v6 - 1)) == 0)
  {
    v31 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v30 & a2));
    if (v31)
    {
      v32 = 0;
      do
      {
        result = v31;
        v31 = (_QWORD *)*v31;
        if (!v31)
          break;
        v36 = v31[1];
        if ((v36 & v30) != (v30 & a2))
          break;
        v33 = v36 == a2 && v31[2] == *a3;
        v34 = v32 & !v33;
        v32 |= v33;
      }
      while ((v34 & 1) == 0);
      return result;
    }
    return 0;
  }
  v41 = a2;
  if (v6 <= a2)
    v41 = a2 % v6;
  v42 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v41);
  if (!v42)
    return 0;
  v43 = 0;
  do
  {
    result = v42;
    v42 = (_QWORD *)*v42;
    if (!v42)
      break;
    v46 = v42[1];
    v47 = v46;
    if (v46 >= v6)
      v47 = v46 % v6;
    if (v47 != v41)
      break;
    v44 = v46 == a2 && v42[2] == *a3;
    v45 = v43 & !v44;
    v43 |= v44;
  }
  while (v45 != 1);
  return result;
}

_QWORD *sub_19C3A90DC(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;
  _QWORD *v5;
  _QWORD *result;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;

  v5 = a2 + 2;
  v4 = a2[2];
  *(v5 - 1) = v4;
  result = sub_19C3A8CE8((uint64_t)a1, v4, v5);
  v7 = (int8x8_t)a1[1];
  v8 = *(v5 - 1);
  v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    if (v8 >= *(_QWORD *)&v7)
      v8 %= *(_QWORD *)&v7;
  }
  else
  {
    v8 &= *(_QWORD *)&v7 - 1;
  }
  if (!result)
  {
    *a2 = a1[2];
    a1[2] = a2;
    *(_QWORD *)(*a1 + 8 * v8) = a1 + 2;
    if (!*a2)
      goto LABEL_19;
    v10 = *(_QWORD *)(*a2 + 8);
    if (v9.u32[0] > 1uLL)
    {
      if (v10 >= *(_QWORD *)&v7)
        v10 %= *(_QWORD *)&v7;
    }
    else
    {
      v10 &= *(_QWORD *)&v7 - 1;
    }
LABEL_18:
    *(_QWORD *)(*a1 + 8 * v10) = a2;
    goto LABEL_19;
  }
  *a2 = *result;
  *result = a2;
  if (*a2)
  {
    v10 = *(_QWORD *)(*a2 + 8);
    if (v9.u32[0] > 1uLL)
    {
      if (v10 >= *(_QWORD *)&v7)
        v10 %= *(_QWORD *)&v7;
    }
    else
    {
      v10 &= *(_QWORD *)&v7 - 1;
    }
    if (v10 != v8)
      goto LABEL_18;
  }
LABEL_19:
  ++a1[3];
  return result;
}

void sub_19C3A91FC(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t i;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t j;
  uint64_t *v10;
  uint64_t *v11;
  _OWORD *v12;
  uint64_t *v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t *v16;
  _QWORD *v17;
  _QWORD *v18;
  void *v19;

  v4 = a1[1];
  if (!v4)
    goto LABEL_18;
  for (i = 0; i != v4; ++i)
    *(_QWORD *)(*a1 + 8 * i) = 0;
  v6 = (uint64_t *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v6)
  {
    while (a2)
    {
      v6[2] = a2[2];
      if (v6 != a2)
      {
        *((_DWORD *)v6 + 14) = *((_DWORD *)a2 + 14);
        v7 = (uint64_t *)a2[5];
        v8 = v6[4];
        if (!v8)
          goto LABEL_13;
        for (j = 0; j != v8; ++j)
          *(_QWORD *)(v6[3] + 8 * j) = 0;
        v10 = (uint64_t *)v6[5];
        v6[5] = 0;
        v6[6] = 0;
        if (v10)
        {
          while (v7)
          {
            v10[2] = v7[2];
            *((_DWORD *)v10 + 6) = *((_DWORD *)v7 + 6);
            v11 = (uint64_t *)*v10;
            sub_19C3A90DC(v6 + 3, v10);
            v7 = (uint64_t *)*v7;
            v10 = v11;
            if (!v11)
              goto LABEL_13;
          }
          do
          {
            v13 = (uint64_t *)*v10;
            operator delete(v10);
            v10 = v13;
          }
          while (v13);
        }
        else
        {
LABEL_13:
          while (v7)
          {
            v12 = operator new(0x20uLL);
            *(_QWORD *)v12 = 0;
            v12[1] = *((_OWORD *)v7 + 1);
            *((_QWORD *)v12 + 1) = *((_QWORD *)v12 + 2);
            sub_19C3A90DC(v6 + 3, v12);
            v7 = (uint64_t *)*v7;
          }
        }
      }
      v14 = (uint64_t *)*v6;
      sub_19C3A9530((uint64_t)a1, v6);
      a2 = (uint64_t *)*a2;
      v6 = v14;
      if (!v14)
        goto LABEL_18;
    }
    do
    {
      v16 = (uint64_t *)*v6;
      v17 = (_QWORD *)v6[5];
      if (v17)
      {
        do
        {
          v18 = (_QWORD *)*v17;
          operator delete(v17);
          v17 = v18;
        }
        while (v18);
      }
      v19 = (void *)v6[3];
      v6[3] = 0;
      if (v19)
        operator delete(v19);
      operator delete(v6);
      v6 = v16;
    }
    while (v16);
  }
  else
  {
LABEL_18:
    while (a2)
    {
      v15 = operator new(0x40uLL);
      *v15 = 0;
      v15[1] = 0;
      v15[2] = a2[2];
      sub_19C3A9A88((uint64_t)(v15 + 3), (uint64_t)(a2 + 3));
      v15[1] = v15[2];
      sub_19C3A9530((uint64_t)a1, v15);
      a2 = (uint64_t *)*a2;
    }
  }
}

void sub_19C3A93D4(void *a1)
{
  void **v1;

  __cxa_begin_catch(a1);
  sub_19C3A9A20(v1);
  __cxa_rethrow();
}

void sub_19C3A9478(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_19C3A948C(_QWORD *__p)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;

  if (__p)
  {
    v1 = __p;
    do
    {
      v2 = (_QWORD *)*v1;
      v3 = (_QWORD *)v1[5];
      if (v3)
      {
        do
        {
          v5 = (_QWORD *)*v3;
          v6 = (_QWORD *)v3[5];
          if (v6)
          {
            do
            {
              v7 = (_QWORD *)*v6;
              operator delete(v6);
              v6 = v7;
            }
            while (v7);
          }
          v8 = (void *)v3[3];
          v3[3] = 0;
          if (v8)
            operator delete(v8);
          operator delete(v3);
          v3 = v5;
        }
        while (v5);
      }
      v4 = (void *)v1[3];
      v1[3] = 0;
      if (v4)
        operator delete(v4);
      operator delete(v1);
      v1 = v2;
    }
    while (v2);
  }
}

void sub_19C3A9530(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  unint64_t v5;
  float v6;
  float v7;
  _BOOL8 v8;
  unint64_t v9;
  unint64_t v10;
  size_t prime;
  void *v12;
  void *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  size_t v17;
  size_t v18;
  size_t v19;
  _QWORD *j;
  size_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  uint8x8_t v26;
  uint64_t v27;
  _QWORD *i;
  uint8x8_t v29;
  uint64_t v30;
  _QWORD *v31;
  int v32;
  _BOOL4 v33;
  char v34;
  _QWORD *v35;
  uint64_t v36;
  size_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  int v43;
  _BOOL4 v44;
  int v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  void *v50;

  v4 = a2[2];
  a2[1] = v4;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v7 = *(float *)(a1 + 32);
  if (!v5 || (float)(v7 * (float)v5) < v6)
  {
    v8 = 1;
    if (v5 >= 3)
      v8 = (v5 & (v5 - 1)) != 0;
    v9 = v8 | (2 * v5);
    v10 = vcvtps_u32_f32(v6 / v7);
    if (v9 <= v10)
      prime = v10;
    else
      prime = v9;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v5 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v5)
      goto LABEL_105;
    if (prime >= v5)
      goto LABEL_40;
    v25 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v5 < 3 || (v26 = (uint8x8_t)vcnt_s8((int8x8_t)v5), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
    {
      v25 = std::__next_prime(v25);
    }
    else
    {
      v27 = 1 << -(char)__clz(v25 - 1);
      if (v25 >= 2)
        v25 = v27;
    }
    if (prime <= v25)
      prime = v25;
    if (prime >= v5)
    {
      v5 = *(_QWORD *)(a1 + 8);
      goto LABEL_40;
    }
    if (prime)
    {
LABEL_105:
      if (prime >> 61)
        sub_19C2A143C();
      v12 = operator new(8 * prime);
      v13 = *(void **)a1;
      *(_QWORD *)a1 = v12;
      if (v13)
        operator delete(v13);
      v14 = 0;
      *(_QWORD *)(a1 + 8) = prime;
      do
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v14++) = 0;
      while (prime != v14);
      v16 = a1 + 16;
      v15 = *(_QWORD **)(a1 + 16);
      if (v15)
      {
        v17 = v15[1];
        v18 = prime - 1;
        if ((prime & (prime - 1)) != 0)
        {
          if (v17 >= prime)
            v17 %= prime;
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v17) = v16;
          for (i = (_QWORD *)*v15; *v15; i = (_QWORD *)*v15)
          {
            v37 = i[1];
            if (v37 >= prime)
              v37 %= prime;
            if (v37 == v17)
            {
              v15 = i;
            }
            else
            {
              v38 = i;
              if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v37))
              {
                do
                {
                  v39 = v38;
                  v38 = (_QWORD *)*v38;
                }
                while (v38 && i[2] == v38[2]);
                *v15 = v38;
                v40 = 8 * v37;
                *v39 = **(_QWORD **)(*(_QWORD *)a1 + v40);
                **(_QWORD **)(*(_QWORD *)a1 + v40) = i;
              }
              else
              {
                *(_QWORD *)(*(_QWORD *)a1 + 8 * v37) = v15;
                v15 = i;
                v17 = v37;
              }
            }
          }
        }
        else
        {
          v19 = v17 & v18;
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v19) = v16;
          for (j = (_QWORD *)*v15; *v15; j = (_QWORD *)*v15)
          {
            v21 = j[1] & v18;
            if (v21 == v19)
            {
              v15 = j;
            }
            else
            {
              v22 = j;
              if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v21))
              {
                do
                {
                  v23 = v22;
                  v22 = (_QWORD *)*v22;
                }
                while (v22 && j[2] == v22[2]);
                *v15 = v22;
                v24 = 8 * v21;
                *v23 = **(_QWORD **)(*(_QWORD *)a1 + v24);
                **(_QWORD **)(*(_QWORD *)a1 + v24) = j;
              }
              else
              {
                *(_QWORD *)(*(_QWORD *)a1 + 8 * v21) = v15;
                v15 = j;
                v19 = v21;
              }
            }
          }
        }
      }
      v5 = prime;
    }
    else
    {
      v50 = *(void **)a1;
      *(_QWORD *)a1 = 0;
      if (v50)
        operator delete(v50);
      v5 = 0;
      *(_QWORD *)(a1 + 8) = 0;
    }
  }
LABEL_40:
  v29 = (uint8x8_t)vcnt_s8((int8x8_t)v5);
  v29.i16[0] = vaddlv_u8(v29);
  if (v29.u32[0] >= 2uLL)
  {
    v41 = v4;
    if (v5 <= v4)
      v41 = v4 % v5;
    v42 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v41);
    if (!v42)
    {
      v35 = 0;
      v48 = a2[1];
      if (v48 < v5)
        goto LABEL_78;
      goto LABEL_77;
    }
    v43 = 0;
    do
    {
      v35 = v42;
      v42 = (_QWORD *)*v42;
      if (!v42)
        break;
      v46 = v42[1];
      v47 = v46;
      if (v46 >= v5)
        v47 = v46 % v5;
      if (v47 != v41)
        break;
      v44 = v46 == v4 && v42[2] == a2[2];
      v45 = v43 & !v44;
      v43 |= v44;
    }
    while (v45 != 1);
  }
  else
  {
    v30 = (v5 - 1) & v4;
    v31 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v30);
    if (!v31)
    {
      v35 = 0;
      v48 = a2[1];
      goto LABEL_75;
    }
    v32 = 0;
    do
    {
      v35 = v31;
      v31 = (_QWORD *)*v31;
      if (!v31)
        break;
      v36 = v31[1];
      if ((v36 & (v5 - 1)) != v30)
        break;
      v33 = v36 == v4 && v31[2] == a2[2];
      v34 = v32 & !v33;
      v32 |= v33;
    }
    while ((v34 & 1) == 0);
  }
  v48 = a2[1];
  if (v29.u32[0] <= 1uLL)
  {
LABEL_75:
    v48 &= v5 - 1;
    goto LABEL_78;
  }
  if (v48 >= v5)
LABEL_77:
    v48 %= v5;
LABEL_78:
  if (!v35)
  {
    *a2 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = a2;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v48) = a1 + 16;
    if (!*a2)
      goto LABEL_92;
    v49 = *(_QWORD *)(*a2 + 8);
    if (v29.u32[0] > 1uLL)
    {
      if (v49 >= v5)
        v49 %= v5;
    }
    else
    {
      v49 &= v5 - 1;
    }
LABEL_91:
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v49) = a2;
    goto LABEL_92;
  }
  *a2 = *v35;
  *v35 = a2;
  if (*a2)
  {
    v49 = *(_QWORD *)(*a2 + 8);
    if (v29.u32[0] > 1uLL)
    {
      if (v49 >= v5)
        v49 %= v5;
    }
    else
    {
      v49 &= v5 - 1;
    }
    if (v49 != v48)
      goto LABEL_91;
  }
LABEL_92:
  ++*(_QWORD *)(a1 + 24);
}

void sub_19C3A9A20(void **__p)
{
  void **v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;

  do
  {
    v2 = (void **)*__p;
    v3 = __p[5];
    if (v3)
    {
      do
      {
        v4 = (_QWORD *)*v3;
        operator delete(v3);
        v3 = v4;
      }
      while (v4);
    }
    v5 = __p[3];
    __p[3] = 0;
    if (v5)
      operator delete(v5);
    operator delete(__p);
    __p = v2;
  }
  while (v2);
}

uint64_t sub_19C3A9A88(uint64_t a1, uint64_t a2)
{
  size_t prime;
  int8x8_t v5;
  BOOL v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  _QWORD *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    sub_19C2EC6BC(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v5 = *(int8x8_t *)(a1 + 8);
    v6 = prime >= *(_QWORD *)&v5;
    if (prime > *(_QWORD *)&v5)
      goto LABEL_17;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v6)
  {
    v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v5 < 3uLL || (v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      v7 = std::__next_prime(v7);
    }
    else
    {
      v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2)
        v7 = v9;
    }
    if (prime <= v7)
      prime = v7;
    if (prime < *(_QWORD *)&v5)
      goto LABEL_17;
  }
LABEL_18:
  for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
    sub_19C3A9BB8(a1, i[2], (_OWORD *)i + 1);
  return a1;
}

void sub_19C3A9BA0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_19C2B95F8(v1);
  _Unwind_Resume(a1);
}

void sub_19C3A9BB8(uint64_t a1, unint64_t a2, _OWORD *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t prime;
  unint64_t v20;
  uint8x8_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v5 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = (_QWORD *)*v9;
      if (v10)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (v10[2] == a2)
                return;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (v10[2] == a2)
              return;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v13 = operator new(0x20uLL);
  *v13 = 0;
  v13[1] = v5;
  *((_OWORD *)v13 + 1) = *a3;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (v7 && (float)(v15 * (float)v7) >= v14)
  {
    v5 = v3;
  }
  else
  {
    v16 = 1;
    if (v7 >= 3)
      v16 = (v7 & (v7 - 1)) != 0;
    v17 = v16 | (2 * v7);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      prime = v18;
    else
      prime = v17;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_35;
    if (prime < v7)
    {
      v20 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v21 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v21.i16[0] = vaddlv_u8(v21), v21.u32[0] > 1uLL))
      {
        v20 = std::__next_prime(v20);
      }
      else
      {
        v22 = 1 << -(char)__clz(v20 - 1);
        if (v20 >= 2)
          v20 = v22;
      }
      if (prime <= v20)
        prime = v20;
      if (prime < v7)
LABEL_35:
        sub_19C2EC6BC(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v5)
        v5 %= v7;
    }
    else
    {
      v5 &= v7 - 1;
    }
  }
  v23 = *(_QWORD *)a1;
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
  if (v24)
  {
    *v13 = *v24;
LABEL_58:
    *v24 = v13;
    goto LABEL_59;
  }
  *v13 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v13;
  *(_QWORD *)(v23 + 8 * v5) = a1 + 16;
  if (*v13)
  {
    v25 = *(_QWORD *)(*v13 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v25 >= v7)
        v25 %= v7;
    }
    else
    {
      v25 &= v7 - 1;
    }
    v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_58;
  }
LABEL_59:
  ++*(_QWORD *)(a1 + 24);
}

void sub_19C3A9E78(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19C3A9E8C(char a1, _QWORD *__p)
{
  _QWORD *v3;
  void *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;

  if (a1)
  {
    v3 = (_QWORD *)__p[5];
    if (v3)
    {
      do
      {
        v5 = (_QWORD *)*v3;
        v6 = (_QWORD *)v3[5];
        if (v6)
        {
          do
          {
            v7 = (_QWORD *)*v6;
            operator delete(v6);
            v6 = v7;
          }
          while (v7);
        }
        v8 = (void *)v3[3];
        v3[3] = 0;
        if (v8)
          operator delete(v8);
        operator delete(v3);
        v3 = v5;
      }
      while (v5);
    }
    v4 = (void *)__p[3];
    __p[3] = 0;
    if (v4)
      operator delete(v4);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

uint64_t sub_19C3A9F2C(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = (_QWORD *)v2[5];
      if (v3)
      {
        do
        {
          v4 = (_QWORD *)*v3;
          operator delete(v3);
          v3 = v4;
        }
        while (v4);
      }
      v5 = (void *)v2[3];
      v2[3] = 0;
      if (v5)
        operator delete(v5);
    }
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_19C3A9F98(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, float a9, float a10)
{
  uint64_t v19;
  const void *v20;
  int64_t v21;
  char *v22;
  char *v23;
  __int128 v24;
  const void *v25;
  int64_t v26;
  char *v27;
  char *v28;
  const char *v29;
  int v30;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v20 = *(const void **)a2;
  v19 = *(_QWORD *)(a2 + 8);
  v21 = v19 - *(_QWORD *)a2;
  if (v19 != *(_QWORD *)a2)
  {
    if (v21 < 0)
      sub_19C2A18E8();
    v22 = (char *)operator new(v19 - *(_QWORD *)a2);
    *(_QWORD *)a1 = v22;
    *(_QWORD *)(a1 + 8) = v22;
    v23 = &v22[4 * (v21 >> 2)];
    *(_QWORD *)(a1 + 16) = v23;
    memcpy(v22, v20, v21);
    *(_QWORD *)(a1 + 8) = v23;
  }
  *(float *)(a1 + 24) = a9;
  *(float *)(a1 + 28) = a10;
  if (*((char *)a3 + 23) < 0)
  {
    sub_19C2B5238((_BYTE *)(a1 + 32), *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v24 = *a3;
    *(_QWORD *)(a1 + 48) = *((_QWORD *)a3 + 2);
    *(_OWORD *)(a1 + 32) = v24;
  }
  sub_19C2E1F84(a1 + 56, a4);
  sub_19C35CD34((_QWORD *)(a1 + 240), a5);
  *(_QWORD *)(a1 + 264) = a6;
  *(_DWORD *)(a1 + 272) = a7;
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  v25 = *(const void **)a8;
  v26 = *(_QWORD *)(a8 + 8) - *(_QWORD *)a8;
  if (v26)
  {
    if (v26 < 0)
      sub_19C2A18E8();
    v27 = (char *)operator new(v26);
    *(_QWORD *)(a1 + 280) = v27;
    *(_QWORD *)(a1 + 288) = v27;
    v28 = &v27[4 * (v26 >> 2)];
    *(_QWORD *)(a1 + 296) = v28;
    memcpy(v27, v25, v26);
    *(_QWORD *)(a1 + 288) = v28;
  }
  if (a7 == 1)
  {
    if (*(float *)(a1 + 28) > 0.0001)
    {
      v29 = "m_incompleteWordProb <= 1e-4";
      v30 = 36;
LABEL_17:
      __assert_rtn("ToucanHypothesis", "ToucanHypothesis.cpp", v30, v29);
    }
  }
  else if (!a7 && *(float *)(a1 + 28) != 0.0)
  {
    v29 = "m_incompleteWordProb == 0";
    v30 = 33;
    goto LABEL_17;
  }
  return a1;
}

void sub_19C3AA158(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

CFIndex sub_19C3AA22C(uint64_t a1)
{
  int v1;
  const UInt8 *v2;
  CFIndex v3;
  const __CFString *v4;
  const __CFString *v5;
  CFIndex AppIntegerValue;
  int v7;
  void *exception;
  Boolean keyExistsAndHasValidFormat;
  const __CFString *v11;

  v1 = *(char *)(a1 + 23);
  if (v1 >= 0)
    v2 = (const UInt8 *)a1;
  else
    v2 = *(const UInt8 **)a1;
  if (v1 >= 0)
    v3 = *(unsigned __int8 *)(a1 + 23);
  else
    v3 = *(_QWORD *)(a1 + 8);
  v4 = CFStringCreateWithBytes(0, v2, v3, 0x8000100u, 0);
  v11 = v4;
  if (!v4)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD3154](exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v5 = v4;
  keyExistsAndHasValidFormat = 0;
  AppIntegerValue = CFPreferencesGetAppIntegerValue(v4, CFSTR("com.apple.LanguageModeling"), &keyExistsAndHasValidFormat);
  v7 = keyExistsAndHasValidFormat;
  CFRelease(v5);
  if (v7)
    return AppIntegerValue;
  else
    return 0;
}

void sub_19C3AA2EC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19C3AA304(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C2E5670((const void **)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_19C3AA318(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *a1 = &off_1E3D36A38;
  v2 = (std::__shared_weak_count *)a1[7];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (std::__shared_weak_count *)a1[5];
      if (!v5)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = (std::__shared_weak_count *)a1[5];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[3];
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return a1;
}

void sub_19C3AA3CC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  *a1 = &off_1E3D36A38;
  v2 = (std::__shared_weak_count *)a1[7];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[5];
    if (!v5)
    {
LABEL_7:
      v6 = (std::__shared_weak_count *)a1[3];
      if (v6)
      {
        v7 = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(v7);
        while (__stlxr(v8 - 1, v7));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      JUMPOUT(0x1A1AD355CLL);
    }
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[5];
    if (!v5)
      goto LABEL_7;
  }
  std::__shared_weak_count::__release_weak(v5);
  goto LABEL_7;
}

BOOL sub_19C3AA490(_QWORD *a1, int a2, uint64_t a3, uint64_t a4, double *a5)
{
  _BOOL8 v5;
  int8x8_t *v8;
  int8x8_t v9;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const void *v20;
  int UsageCount;
  double v22;

  if ((a2 & 0x80000000) == 0)
    return 0;
  v8 = (int8x8_t *)a1[2];
  v9 = v8[2];
  if (!*(_QWORD *)&v9)
    return 0;
  v11 = a1[8];
  v12 = (uint8x8_t)vcnt_s8(v9);
  v12.i16[0] = vaddlv_u8(v12);
  if (v12.u32[0] > 1uLL)
  {
    v13 = a1[8];
    if (*(_QWORD *)&v9 <= v11)
      v13 = v11 % *(_QWORD *)&v9;
  }
  else
  {
    v13 = (*(_QWORD *)&v9 - 1) & v11;
  }
  v14 = *(_QWORD **)(*(_QWORD *)&v8[1] + 8 * v13);
  if (!v14)
    return 0;
  v15 = (_QWORD *)*v14;
  if (!v15)
    return 0;
  if (v12.u32[0] < 2uLL)
  {
    v16 = *(_QWORD *)&v9 - 1;
    while (1)
    {
      v18 = v15[1];
      if (v18 == v11)
      {
        if (v15[2] == v11)
          goto LABEL_25;
      }
      else if ((v18 & v16) != v13)
      {
        return 0;
      }
      v5 = 0;
      v15 = (_QWORD *)*v15;
      if (!v15)
        return v5;
    }
  }
  while (1)
  {
    v17 = v15[1];
    if (v17 == v11)
      break;
    if (v17 >= *(_QWORD *)&v9)
      v17 %= *(_QWORD *)&v9;
    if (v17 != v13)
      return 0;
LABEL_14:
    v5 = 0;
    v15 = (_QWORD *)*v15;
    if (!v15)
      return v5;
  }
  if (v15[2] != v11)
    goto LABEL_14;
LABEL_25:
  v19 = LXLexiconCopyEntryForTokenID();
  if (!v19)
    return 0;
  v20 = (const void *)v19;
  UsageCount = LXEntryGetUsageCount();
  v5 = UsageCount != 0;
  if (UsageCount)
  {
    LXEntryGetProbability();
    *a5 = *(double *)(a1[6] + 464) + v22;
  }
  CFRelease(v20);
  return v5;
}

void sub_19C3AA5F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C3387E0((const void **)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_19C3AA610(_QWORD *a1, uint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6 = sub_19C3AA674(a1, a2, a3, &stru_1E3D3CA98, a4, a6);
  CFRelease(&stru_1E3D3CA98);
  return v6;
}

void sub_19C3AA65C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C2FE810((const void **)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_19C3AA674(_QWORD *a1, uint64_t a2, unint64_t a3, CFStringRef theString, unint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t *v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  CFMutableStringRef Mutable;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  CFStringRef v23;
  CFIndex Length;
  unint64_t v25;
  int8x8_t *v26;
  int8x8_t v27;
  uint8x8_t v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  void **v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *p_shared_owners;
  unint64_t v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  char *v52;
  _QWORD *v53;
  void *v54;
  char *v55;
  const void *v56;
  const void *v57;
  unint64_t *v58;
  unint64_t v59;
  const __CFAllocator *alloc;
  uint64_t v61;
  _QWORD v62[2];
  void *v63[2];
  uint64_t v64;
  CFTypeRef cf;
  uint64_t v66;
  std::__shared_weak_count *v67;
  CFIndex v68;
  void *__p[2];
  void **v70;
  void **v71;
  uint64_t v72;
  CFRange v73;

  v72 = *MEMORY[0x1E0C80C00];
  if (!a3)
    return 0;
  if (!a5)
  {
    v13 = a1 + 8;
    if (a1[8] == 5)
      goto LABEL_10;
    return 0;
  }
  if (a3 < a5)
    return 0;
  v13 = a1 + 8;
  v12 = a1[8];
  if (v12 != 3)
    goto LABEL_7;
  if (CFStringGetLength(theString) < 4)
    return 0;
  v12 = *v13;
LABEL_7:
  if (v12 != 5)
    goto LABEL_11;
LABEL_10:
  if ((unint64_t)CFStringGetLength(theString) < 2)
    return 0;
LABEL_11:
  v14 = (std::__shared_weak_count *)a1[5];
  if (!v14)
    return 0;
  v15 = std::__shared_weak_count::lock(v14);
  v67 = v15;
  if (!v15)
    return 0;
  v16 = a1[4];
  v66 = v16;
  if (!v16)
  {
    v30 = v15;
    v20 = 0;
    goto LABEL_79;
  }
  v61 = a6;
  alloc = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  cf = Mutable;
  if (a5)
  {
    v18 = a2 + 4 * a3;
    v19 = -(uint64_t)a5;
    do
    {
      (*(void (**)(void **__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v16 + 32))(__p, v16, *(unsigned int *)(v18 + 4 * v19));
      v23 = sub_19C2E1370((uint64_t)__p);
      v63[0] = (void *)v23;
      if (SHIBYTE(v70) < 0)
        operator delete(__p[0]);
      CFStringAppend(Mutable, v23);
      CFStringAppend(Mutable, CFSTR(" "));
      if (v23)
        CFRelease(v23);
    }
    while (!__CFADD__(v19++, 1));
  }
  Length = CFStringGetLength(Mutable);
  CFStringAppend(Mutable, theString);
  v63[0] = 0;
  v63[1] = 0;
  v64 = 0;
  v25 = a1[9];
  v68 = Length;
  v26 = (int8x8_t *)a1[2];
  v27 = v26[2];
  if (!*(_QWORD *)&v27)
    goto LABEL_44;
  v28 = (uint8x8_t)vcnt_s8(v27);
  v28.i16[0] = vaddlv_u8(v28);
  if (v28.u32[0] > 1uLL)
  {
    v29 = v25;
    if (*(_QWORD *)&v27 <= v25)
      v29 = v25 % *(_QWORD *)&v27;
  }
  else
  {
    v29 = (*(_QWORD *)&v27 - 1) & v25;
  }
  v31 = *(_QWORD **)(*(_QWORD *)&v26[1] + 8 * v29);
  if (!v31 || (v32 = (_QWORD *)*v31) == 0)
  {
LABEL_44:
    v36 = v61;
    goto LABEL_45;
  }
  if (v28.u32[0] < 2uLL)
  {
    v33 = *(_QWORD *)&v27 - 1;
    while (1)
    {
      v35 = v32[1];
      if (v35 == v25)
      {
        if (v32[2] == v25)
          goto LABEL_50;
      }
      else if ((v35 & v33) != v29)
      {
        goto LABEL_44;
      }
      v32 = (_QWORD *)*v32;
      if (!v32)
        goto LABEL_44;
    }
  }
  while (1)
  {
    v34 = v32[1];
    if (v34 == v25)
      break;
    if (v34 >= *(_QWORD *)&v27)
      v34 %= *(_QWORD *)&v27;
    if (v34 != v29)
      goto LABEL_44;
LABEL_34:
    v32 = (_QWORD *)*v32;
    if (!v32)
      goto LABEL_44;
  }
  if (v32[2] != v25)
    goto LABEL_34;
LABEL_50:
  __p[0] = &off_1E3D393A0;
  __p[1] = &v68;
  v70 = v63;
  v71 = __p;
  sub_19C3D83E0();
  v42 = v71;
  v36 = v61;
  if (v71 == __p)
  {
    v43 = 4;
    v42 = __p;
LABEL_54:
    (*((void (**)(void **))*v42 + v43))(v42);
  }
  else if (v71)
  {
    v43 = 5;
    goto LABEL_54;
  }
  if (v63[1] != v63[0])
  {
LABEL_56:
    v44 = (_QWORD *)operator new();
    v20 = v44;
    v45 = a1[2];
    v46 = (std::__shared_weak_count *)a1[3];
    if (v46)
    {
      p_shared_owners = (unint64_t *)&v46->__shared_owners_;
      do
        v48 = __ldxr(p_shared_owners);
      while (__stxr(v48 + 1, p_shared_owners));
      *v44 = &off_1E3D37300;
      v44[1] = v45;
      v44[2] = v46;
      do
        v49 = __ldxr(p_shared_owners);
      while (__stxr(v49 + 1, p_shared_owners));
    }
    else
    {
      *v44 = &off_1E3D37300;
      v44[1] = v45;
      v44[2] = 0;
    }
    v73.location = 0;
    v73.length = 0;
    v44[3] = CFStringTokenizerCreate(alloc, 0, v73, 0, 0);
    v20[4] = v36;
    *(_OWORD *)(v20 + 5) = *(_OWORD *)v63;
    v20[7] = v64;
    v63[0] = 0;
    v63[1] = 0;
    v64 = 0;
    v20[9] = 0;
    v20[10] = 0;
    v20[11] = 0;
    v20[12] = 0xFFEFFFFFFFFFFFFFLL;
    v20[13] = a5;
    if (v46)
    {
      v50 = (unint64_t *)&v46->__shared_owners_;
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
    }
    goto LABEL_68;
  }
LABEL_45:
  if (*v13 != 3)
    goto LABEL_56;
  sub_19C3AACA8((_QWORD *)a1[2], (uint64_t)theString, (uint64_t)v63);
  v37 = (_QWORD *)operator new();
  v20 = v37;
  v38 = a1[2];
  v39 = a1[3];
  v62[0] = v38;
  v62[1] = v39;
  if (v39)
  {
    v40 = (unint64_t *)(v39 + 8);
    do
      v41 = __ldxr(v40);
    while (__stxr(v41 + 1, v40));
  }
  sub_19C3AAE54(v37, v38, v39, (uint64_t)v63, a5, v36);
  sub_19C2B43C8((uint64_t)v62);
LABEL_68:
  v52 = (char *)v63[0];
  if (v63[0])
  {
    v53 = v63[1];
    v54 = v63[0];
    if (v63[1] != v63[0])
    {
      v55 = (char *)v63[1];
      do
      {
        v57 = (const void *)*((_QWORD *)v55 - 2);
        v55 -= 16;
        v56 = v57;
        if (v57)
          CFRelease(v56);
        *(v53 - 2) = 0;
        v53 = v55;
      }
      while (v55 != v52);
      v54 = v63[0];
    }
    v63[1] = v52;
    operator delete(v54);
  }
  if (cf)
    CFRelease(cf);
  v30 = v67;
  if (v67)
  {
LABEL_79:
    v58 = (unint64_t *)&v30->__shared_owners_;
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  return v20;
}

void sub_19C3AAB8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, const void *a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,void **a31)
{
  void **v31;
  void **p_p;
  uint64_t v34;

  p_p = a31;
  if (a31 == v31)
  {
    v34 = 4;
    p_p = &__p;
  }
  else
  {
    if (!a31)
      goto LABEL_6;
    v34 = 5;
  }
  (*((void (**)(void))*p_p + v34))();
LABEL_6:
  sub_19C3AAF4C(&a15);
  sub_19C339C1C(&a19);
  sub_19C2B43C8((uint64_t)&a20);
  _Unwind_Resume(a1);
}

_QWORD *sub_19C3AACA8(_QWORD *result, uint64_t a2, uint64_t a3)
{
  int8x8_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[3];
  _QWORD *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v12 = 0;
  v3 = (int8x8_t)result[2];
  if (!*(_QWORD *)&v3)
    return result;
  v4 = (uint8x8_t)vcnt_s8(v3);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = 3;
    if (*(_QWORD *)&v3 <= 3uLL)
      v5 = 3uLL % *(_QWORD *)&v3;
  }
  else
  {
    v5 = (v3.i8[0] - 1) & 3;
  }
  v6 = *(_QWORD **)(result[1] + 8 * v5);
  if (!v6)
    return result;
  v7 = (_QWORD *)*v6;
  if (!v7)
    return result;
  if (v4.u32[0] < 2uLL)
  {
    v8 = *(_QWORD *)&v3 - 1;
    while (1)
    {
      v10 = v7[1];
      if (v10 == 3)
      {
        if (v7[2] == 3)
          goto LABEL_22;
      }
      else if ((v10 & v8) != v5)
      {
        return result;
      }
      v7 = (_QWORD *)*v7;
      if (!v7)
        return result;
    }
  }
  while (1)
  {
    v9 = v7[1];
    if (v9 == 3)
      break;
    if (v9 >= *(_QWORD *)&v3)
      v9 %= *(_QWORD *)&v3;
    if (v9 != v5)
      return result;
LABEL_11:
    v7 = (_QWORD *)*v7;
    if (!v7)
      return result;
  }
  if (v7[2] != 3)
    goto LABEL_11;
LABEL_22:
  v13[0] = &off_1E3D393A0;
  v13[1] = &v12;
  v13[2] = a3;
  v14 = v13;
  sub_19C3D83E0();
  result = v14;
  if (v14 == v13)
  {
    v11 = 4;
    result = v13;
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8 * v11))(result);
  }
  else if (v14)
  {
    v11 = 5;
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8 * v11))(result);
  }
  return result;
}

void sub_19C3AAE18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_19C3AAE54(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t *v10;
  unint64_t v11;
  CFRange v13;

  *a1 = &off_1E3D37300;
  a1[1] = a2;
  a1[2] = a3;
  if (a3)
  {
    v10 = (unint64_t *)(a3 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  v13.location = 0;
  v13.length = 0;
  a1[3] = CFStringTokenizerCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, v13, 0, 0);
  a1[4] = a6;
  a1[6] = 0;
  a1[7] = 0;
  a1[5] = 0;
  *(_OWORD *)(a1 + 5) = *(_OWORD *)a4;
  a1[7] = *(_QWORD *)(a4 + 16);
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  a1[9] = 0;
  a1[10] = 0;
  a1[11] = 0;
  a1[12] = 0xFFEFFFFFFFFFFFFFLL;
  a1[13] = a5;
  return a1;
}

void sub_19C3AAF08(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

void **sub_19C3AAF4C(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  char *v5;
  const void *v6;
  const void *v7;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      v5 = (char *)a1[1];
      do
      {
        v7 = (const void *)*((_QWORD *)v5 - 2);
        v5 -= 16;
        v6 = v7;
        if (v7)
          CFRelease(v6);
        *((_QWORD *)v3 - 2) = 0;
        v3 = v5;
      }
      while (v5 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_19C3AAFC8(_QWORD *a1)
{
  sub_19C3AB624(a1);
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C3AAFEC(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;
  char v3;
  __CFStringTokenizer *v4;
  CFStringRef v5;
  const __CFString *v6;
  CFStringRef v7;
  _QWORD *v8;
  int v9;
  unint64_t v10;
  char *v11;
  _DWORD *v12;
  int v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _BYTE *v23;
  _DWORD *v24;
  unint64_t v25;
  uint64_t v26;
  _OWORD *v27;
  char *v28;
  uint64_t v29;
  __int128 v30;
  int v31;
  uint64_t v32;
  CFTypeRef *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  CFTypeRef v38;
  int64_t v39;
  CFTypeRef *v40;
  double *v41;
  uint64_t v42;
  uint64_t v43;
  CFTypeRef v44;
  uint64_t *v45;
  uint64_t v46;
  const void *v47;
  const void *v48;
  _QWORD *v49;
  const void *v50;
  uint64_t v52;
  CFTypeRef v53;
  unsigned int v54;
  void **v55;
  uint64_t v56;
  uint64_t v57;
  const __CFAllocator *alloc;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  int v63;
  CFRange v64;
  CFRange CurrentTokenRange;

  v1 = a1[5];
  if (v1 == a1[6])
    return 0;
  v2 = a1;
  v55 = (void **)(a1 + 9);
  alloc = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  do
  {
    v2[10] = v2[9];
    v4 = (__CFStringTokenizer *)v2[3];
    v5 = *(CFStringRef *)v1;
    v64.length = CFStringGetLength(*(CFStringRef *)v1);
    v6 = v5;
    v2 = a1;
    v64.location = 0;
    CFStringTokenizerSetString(v4, v6, v64);
    while (CFStringTokenizerAdvanceToNextToken((CFStringTokenizerRef)v2[3]))
    {
      CurrentTokenRange = CFStringTokenizerGetCurrentTokenRange((CFStringTokenizerRef)v2[3]);
      v7 = CFStringCreateWithSubstring(alloc, *(CFStringRef *)v1, CurrentTokenRange);
      v8 = (_QWORD *)(v2[1] + 24);
      do
      {
        v8 = (_QWORD *)*v8;
        if (!v8)
        {
          v13 = 1;
          if (!v7)
            goto LABEL_7;
          goto LABEL_40;
        }
        v60 = 0;
        v61 = &v60;
        v63 = 0;
        v62 = 0x2000000000;
        LXLexiconEnumerateEntriesForString();
        v9 = *((_DWORD *)v61 + 6);
        _Block_object_dispose(&v60, 8);
      }
      while (!v9);
      v11 = (char *)v2[10];
      v10 = v2[11];
      if ((unint64_t)v11 >= v10)
      {
        v14 = (char *)*v55;
        v15 = v11 - (_BYTE *)*v55;
        v16 = v15 >> 2;
        v17 = (v15 >> 2) + 1;
        if (v17 >> 62)
          sub_19C2A18E8();
        v18 = v10 - (_QWORD)v14;
        if (v18 >> 1 > v17)
          v17 = v18 >> 1;
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL)
          v19 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v19 = v17;
        if (v19)
        {
          v56 = v11 - (_BYTE *)*v55;
          if (v19 >> 62)
            sub_19C2A143C();
          v20 = v1;
          v21 = v15 >> 2;
          v22 = v19;
          v23 = operator new(4 * v19);
          v19 = v22;
          v16 = v21;
          v1 = v20;
          v15 = v56;
        }
        else
        {
          v23 = 0;
        }
        v24 = &v23[4 * v16];
        *v24 = v9;
        v12 = v24 + 1;
        if (v11 != v14)
        {
          v25 = v11 - 4 - v14;
          if (v25 < 0x2C)
            goto LABEL_70;
          if ((unint64_t)(v11 - &v23[v15]) < 0x20)
            goto LABEL_70;
          v26 = (v25 >> 2) + 1;
          v27 = &v23[4 * v16 - 16];
          v28 = v11 - 16;
          v29 = v26 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v30 = *(_OWORD *)v28;
            *(v27 - 1) = *((_OWORD *)v28 - 1);
            *v27 = v30;
            v27 -= 2;
            v28 -= 32;
            v29 -= 8;
          }
          while (v29);
          v24 -= v26 & 0x7FFFFFFFFFFFFFF8;
          v11 -= 4 * (v26 & 0x7FFFFFFFFFFFFFF8);
          if (v26 != (v26 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_70:
            do
            {
              v31 = *((_DWORD *)v11 - 1);
              v11 -= 4;
              *--v24 = v31;
            }
            while (v11 != v14);
          }
        }
        a1[9] = v24;
        a1[10] = v12;
        a1[11] = &v23[4 * v19];
        if (v14)
          operator delete(v14);
        v2 = a1;
      }
      else
      {
        *(_DWORD *)v11 = v9;
        v12 = v11 + 4;
      }
      v2[10] = v12;
      if (v2[4] <= (unint64_t)(((uint64_t)v12 - v2[9]) >> 2))
        v13 = 3;
      else
        v13 = 0;
      if (v7)
LABEL_40:
        CFRelease(v7);
LABEL_7:
      if (v13)
      {
        if (v13 == 1)
        {
          v32 = 0;
          goto LABEL_44;
        }
        break;
      }
    }
    v2[12] = *(_QWORD *)(v1 + 8);
    v32 = 1;
LABEL_44:
    v33 = (CFTypeRef *)v2[5];
    v34 = v2[6];
    v35 = v34 - (_QWORD)v33;
    if (v34 - (uint64_t)v33 >= 17)
    {
      v57 = v2[6];
      v54 = v32;
      v36 = 0;
      v37 = v35 >> 4;
      v52 = v2[5];
      v53 = *v33;
      *v33 = 0;
      v38 = v33[1];
      v39 = (unint64_t)((v35 >> 4) - 2) >> 1;
      v40 = v33;
      do
      {
        v41 = (double *)&v40[2 * v36 + 2];
        v42 = 2 * v36;
        v36 = (2 * v36) | 1;
        v43 = v42 + 2;
        if (v43 < v37 && v41[1] < v41[3])
        {
          v41 += 2;
          v36 = v43;
        }
        v44 = *(CFTypeRef *)v41;
        *v41 = 0.0;
        if (*v40)
          CFRelease(*v40);
        *v40 = v44;
        v40[1] = (CFTypeRef)*((_QWORD *)v41 + 1);
        v40 = (CFTypeRef *)v41;
      }
      while (v36 <= v39);
      v45 = (uint64_t *)(v57 - 16);
      if (v41 == (double *)(v57 - 16))
      {
        v2 = a1;
        if (*(_QWORD *)v41)
          CFRelease(*(CFTypeRef *)v41);
        *(_QWORD *)v41 = v53;
        *((_QWORD *)v41 + 1) = v38;
      }
      else
      {
        v46 = *v45;
        *v45 = 0;
        v2 = a1;
        if (*(_QWORD *)v41)
          CFRelease(*(CFTypeRef *)v41);
        *(_QWORD *)v41 = v46;
        v41[1] = *(double *)(v57 - 8);
        v47 = *(const void **)(v57 - 16);
        if (v47)
          CFRelease(v47);
        *(_QWORD *)(v57 - 16) = v53;
        *(_QWORD *)(v57 - 8) = v38;
        sub_19C3AB558(v52, (uint64_t)(v41 + 2), ((uint64_t)v41 - v52 + 16) >> 4);
      }
      v32 = v54;
      v34 = v2[6];
    }
    v50 = *(const void **)(v34 - 16);
    v49 = (_QWORD *)(v34 - 16);
    v48 = v50;
    if (v50)
      CFRelease(v48);
    *v49 = 0;
    v2[6] = v49;
    v1 = v2[5];
    v3 = v32 ^ 1;
    if ((_QWORD *)v1 == v49)
      v3 = 0;
  }
  while ((v3 & 1) != 0);
  return v32;
}

void sub_19C3AB484(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_19C2FE810((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19C3AB4B8(_QWORD *a1, void *__dst, uint64_t a3)
{
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;

  v5 = (_BYTE *)a1[9];
  v6 = (_BYTE *)a1[10];
  if (v6 != v5)
    memmove(__dst, v5, v6 - v5);
  if (a3)
  {
    *(int64x2_t *)a3 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
    *(_QWORD *)(a3 + 16) = 0;
    *(_WORD *)(a3 + 24) = 0;
    *(_BYTE *)(a3 + 32) = 1;
    *(_OWORD *)(a3 + 40) = xmmword_19C46DE10;
    *(_DWORD *)(a3 + 56) = 0;
    *(_QWORD *)(a3 + 88) = 0;
    *(_QWORD *)(a3 + 96) = 0;
    *(_QWORD *)(a3 + 104) = a1[13];
    *(_DWORD *)(a3 + 116) = 8;
    *(_OWORD *)(a3 + 64) = xmmword_19C46DE10;
    *(_OWORD *)(a3 + 80) = xmmword_19C46DEC0;
    v7 = a1[12];
    *(_QWORD *)a3 = v7;
    *(_QWORD *)(a3 + 80) = v7;
  }
  return (uint64_t)(a1[10] - a1[9]) >> 2;
}

void sub_19C3AB558(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  double v5;
  double v6;
  CFTypeRef *v7;
  const void *v8;
  unint64_t v9;
  CFTypeRef *v10;
  CFTypeRef v11;

  if (a3 >= 2)
  {
    v4 = (unint64_t)(a3 - 2) >> 1;
    v5 = *(double *)(a1 + 16 * v4 + 8);
    v6 = *(double *)(a2 - 8);
    if (v5 < v6)
    {
      v7 = (CFTypeRef *)(a2 - 16);
      v8 = *(const void **)(a2 - 16);
      *(_QWORD *)(a2 - 16) = 0;
      do
      {
        v9 = v4;
        v10 = (CFTypeRef *)(a1 + 16 * v4);
        v11 = *v10;
        *v10 = 0;
        if (*v7)
        {
          CFRelease(*v7);
          v5 = *(double *)(a1 + 16 * v9 + 8);
        }
        *v7 = v11;
        *((double *)v7 + 1) = v5;
        if (!v9)
          break;
        v4 = (v9 - 1) >> 1;
        v5 = *(double *)(a1 + 16 * v4 + 8);
        v7 = v10;
      }
      while (v5 < v6);
      if (*v10)
        CFRelease(*v10);
      *v10 = v8;
      *(double *)(a1 + 16 * v9 + 8) = v6;
    }
  }
}

_QWORD *sub_19C3AB624(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  const void *v7;
  const void *v8;
  const void *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;

  *a1 = &off_1E3D37300;
  v2 = (void *)a1[9];
  if (v2)
  {
    a1[10] = v2;
    operator delete(v2);
  }
  v3 = a1[5];
  if (v3)
  {
    v4 = a1[6];
    v5 = (void *)a1[5];
    if (v4 != v3)
    {
      v6 = a1[6];
      do
      {
        v8 = *(const void **)(v6 - 16);
        v6 -= 16;
        v7 = v8;
        if (v8)
          CFRelease(v7);
        *(_QWORD *)(v4 - 16) = 0;
        v4 = v6;
      }
      while (v6 != v3);
      v5 = (void *)a1[5];
    }
    a1[6] = v3;
    operator delete(v5);
  }
  v9 = (const void *)a1[3];
  if (v9)
    CFRelease(v9);
  a1[3] = 0;
  v10 = (std::__shared_weak_count *)a1[2];
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  return a1;
}

void sub_19C3AB708()
{
  JUMPOUT(0x1A1AD355CLL);
}

__n128 sub_19C3AB71C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E3D393A0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_19C3AB754(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E3D393A0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_19C3AB774(uint64_t a1, CFStringRef *a2, const void **a3)
{
  const __CFString *v4;
  const void *v5;
  CFIndex Length;
  CFRange v7;
  const __CFString *v8;
  const __CFString *v9;
  uint64_t *v10;
  CFTypeRef *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  CFTypeRef *v20;
  char *v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  CFTypeRef *v25;
  const void *v26;
  _QWORD *v27;
  _QWORD *v28;
  const void *v29;
  const void *v30;
  char *v31;
  unint64_t v32;
  unint64_t v33;
  BOOL v34;
  BOOL v35;
  BOOL v36;
  uint64_t v37;
  double *v38;
  const double *v39;
  uint64_t v40;
  _QWORD *v41;
  float64x2x2_t v42;

  v4 = *a2;
  v5 = *a3;
  Length = CFStringGetLength(*a2);
  v7.location = **(_QWORD **)(a1 + 8);
  if (Length - v7.location >= 1)
  {
    v7.length = Length - v7.location;
    v8 = CFStringCreateWithSubstring((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v4, v7);
    if (v8)
    {
      v9 = v8;
      if (!CFStringGetLength(v8))
      {
LABEL_30:
        CFRelease(v9);
        return;
      }
      v10 = *(uint64_t **)(a1 + 16);
      v11 = (CFTypeRef *)v10[1];
      v12 = v10[2];
      if ((unint64_t)v11 < v12)
      {
        *v11 = CFRetain(v9);
        v11[1] = v5;
        v13 = (uint64_t)(v11 + 2);
        v10[1] = (uint64_t)(v11 + 2);
LABEL_29:
        v10[1] = v13;
        sub_19C3AB558(*v10, v13, (v13 - *v10) >> 4);
        goto LABEL_30;
      }
      v14 = (uint64_t)v11 - *v10;
      v15 = (v14 >> 4) + 1;
      if (v15 >> 60)
        sub_19C2A18E8();
      v16 = v12 - *v10;
      v17 = v16 >> 3;
      if (v16 >> 3 <= v15)
        v17 = (v14 >> 4) + 1;
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0)
        v18 = 0xFFFFFFFFFFFFFFFLL;
      else
        v18 = v17;
      if (v18)
      {
        if (v18 >> 60)
          sub_19C2A143C();
        v19 = (char *)operator new(16 * v18);
      }
      else
      {
        v19 = 0;
      }
      v20 = (CFTypeRef *)&v19[16 * (v14 >> 4)];
      v21 = &v19[16 * v18];
      *v20 = CFRetain(v9);
      v13 = (uint64_t)(v20 + 2);
      v20[1] = v5;
      v41 = v20 + 2;
      v22 = *v10;
      v23 = (_QWORD *)v10[1];
      if (v23 == (_QWORD *)*v10)
      {
        *v10 = (uint64_t)v20;
        v10[1] = v13;
        v10[2] = (uint64_t)v21;
LABEL_27:
        if (v23)
          operator delete(v23);
        goto LABEL_29;
      }
      v24 = (unint64_t)v23 - *v10 - 16;
      if (v24 >= 0x110)
      {
        v31 = (char *)v23 - (v24 & 0xFFFFFFFFFFFFFFF0);
        v32 = (unint64_t)(v31 - 16);
        v33 = (unint64_t)(v31 - 8);
        v34 = &v19[v14 - 8 - (v24 & 0xFFFFFFFFFFFFFFF0)] >= (char *)v23 || v33 >= (unint64_t)v20;
        v35 = !v34;
        v36 = &v19[v14 - (v24 & 0xFFFFFFFFFFFFFFF0) - 16] >= (char *)v23 - 8 || v32 >= (unint64_t)&v19[v14 - 8];
        if (v36 && !v35)
        {
          v37 = (v24 >> 4) + 1;
          v25 = &v20[-2 * (v37 & 0x1FFFFFFFFFFFFFFELL)];
          v38 = (double *)(v20 - 4);
          v39 = (const double *)(v23 - 4);
          v40 = v37 & 0x1FFFFFFFFFFFFFFELL;
          do
          {
            v42 = vld2q_f64(v39);
            v39[2] = 0.0;
            *v39 = 0.0;
            v39 -= 4;
            vst2q_f64(v38, v42);
            v38 -= 4;
            v40 -= 2;
          }
          while (v40);
          if (v37 == (v37 & 0x1FFFFFFFFFFFFFFELL))
          {
LABEL_21:
            v23 = (_QWORD *)*v10;
            v27 = (_QWORD *)v10[1];
            *v10 = (uint64_t)v25;
            v10[1] = v13;
            v10[2] = (uint64_t)v21;
            if (v27 != v23)
            {
              v28 = v27;
              do
              {
                v30 = (const void *)*(v28 - 2);
                v28 -= 2;
                v29 = v30;
                if (v30)
                  CFRelease(v29);
                *(v27 - 2) = 0;
                v27 = v28;
              }
              while (v28 != v23);
            }
            goto LABEL_27;
          }
          v23 -= 2 * (v37 & 0x1FFFFFFFFFFFFFFELL);
          v20 -= 2 * (v37 & 0x1FFFFFFFFFFFFFFELL);
        }
      }
      v25 = v20;
      do
      {
        v26 = (const void *)*(v23 - 2);
        v23 -= 2;
        *v23 = 0;
        *(v25 - 2) = v26;
        v25 -= 2;
        v25[1] = (CFTypeRef)v23[1];
      }
      while (v23 != (_QWORD *)v22);
      v13 = (uint64_t)v41;
      goto LABEL_21;
    }
  }
}

void sub_19C3ABA14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  const void *v2;
  va_list va;

  va_start(va, a2);
  sub_19C3ABAB0((uint64_t)va);
  CFRelease(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_19C3ABA50(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK2LM22TransientLanguageModel26insertPredictionsForPrefixEPK10__CFStringlRNSt3__114priority_queueI"
                     "NS_13TransientItemENS4_6vectorIS6_NS4_9allocatorIS6_EEEENS_17TransientItemLessEEE13LMLexiconTypeE3$_0"
    || ((v3 & (unint64_t)"ZNK2LM22TransientLanguageModel26insertPredictionsForPrefixEPK10__CFStringlRNSt3__114prio"
                                "rity_queueINS_13TransientItemENS4_6vectorIS6_NS4_9allocatorIS6_EEEENS_17TransientItemLes"
                                "sEEE13LMLexiconTypeE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZNK2LM22TransientLanguageModel26insertPredictionsForPrefixEPK10__CFStringlRNSt3__114priority_queueINS_13TransientItemENS4_6vectorIS6_NS4_9allocatorIS6_EEEENS_17TransientItemLessEEE13LMLexiconTypeE3$_0")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK2LM22TransientLanguageModel26insertPredictionsForPrefixEPK10__CFStringlRNSt3__114priority_queueINS_13TransientItemENS4_6vectorIS6_NS4_9allocatorIS6_EEEENS_17TransientItemLessEEE13LMLexiconTypeE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *sub_19C3ABAA4()
{
  return &unk_1E3D33730;
}

uint64_t sub_19C3ABAB0(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  const void *v5;
  _QWORD *v6;
  const void *v7;
  _QWORD *v8;

  v2 = *(_QWORD **)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 16);
  if (v3 != v2)
  {
    do
    {
      v7 = (const void *)*(v3 - 2);
      v6 = v3 - 2;
      v5 = v7;
      *(_QWORD *)(a1 + 16) = v6;
      v8 = v6;
      if (v7)
      {
        CFRelease(v5);
        v8 = *(_QWORD **)(a1 + 16);
      }
      *v6 = 0;
      v3 = v8;
    }
    while (v8 != v2);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_19C3ABB24(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C3ABB48(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_19C3ABB60(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN2LM16TransientLexiconEEE"
    || ((v3 & (unint64_t)"NSt3__114default_deleteIN2LM16TransientLexiconEEE" & 0x8000000000000000) != 0) != __OFSUB__(v3, "NSt3__114default_deleteIN2LM16TransientLexiconEEE")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN2LM16TransientLexiconEEE" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_19C3ABBB8(uint64_t a1, const void *a2, unint64_t a3)
{
  void **v6;
  _QWORD *v7;
  CFTypeRef v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t prime;
  void *v24;
  void *v25;
  uint64_t v26;
  _QWORD *v27;
  size_t v28;
  size_t v29;
  size_t v30;
  _QWORD *i;
  size_t v32;
  uint64_t v33;
  unint64_t v34;
  uint8x8_t v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  uint8x8_t v39;
  uint64_t v40;
  size_t v41;
  _QWORD *v42;
  _QWORD *v43;
  unint64_t v44;
  void *v45;

  v6 = (void **)(a1 + 8);
  sub_19C3D6D9C((uint64_t *)(a1 + 8), a3);
  v7 = operator new(0x28uLL);
  *v7 = 0;
  v7[1] = 0;
  v7[2] = a3;
  v8 = CFRetain(a2);
  v7[3] = v8;
  *((_DWORD *)v7 + 8) = 3;
  v9 = v7[2];
  v7[1] = v9;
  v10 = *(_QWORD *)(a1 + 16);
  if (!v10)
    goto LABEL_21;
  v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
  v11.i16[0] = vaddlv_u8(v11);
  if (v11.u32[0] > 1uLL)
  {
    v12 = v9;
    if (v10 <= v9)
      v12 = v9 % v10;
  }
  else
  {
    v12 = (v10 - 1) & v9;
  }
  v13 = (_QWORD *)*((_QWORD *)*v6 + v12);
  if (!v13 || (v14 = (_QWORD *)*v13) == 0)
  {
LABEL_21:
    v17 = (_QWORD *)(a1 + 24);
    v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 32) + 1);
    v19 = *(float *)(a1 + 40);
    if (!v10 || (float)(v19 * (float)v10) < v18)
    {
      v20 = 1;
      if (v10 >= 3)
        v20 = (v10 & (v10 - 1)) != 0;
      v21 = v20 | (2 * v10);
      v22 = vcvtps_u32_f32(v18 / v19);
      if (v21 <= v22)
        prime = v22;
      else
        prime = v21;
      if (prime == 1)
      {
        prime = 2;
      }
      else if ((prime & (prime - 1)) != 0)
      {
        prime = std::__next_prime(prime);
        v10 = *(_QWORD *)(a1 + 16);
      }
      if (prime > v10)
        goto LABEL_33;
      if (prime >= v10)
        goto LABEL_58;
      v34 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 32) / *(float *)(a1 + 40));
      if (v10 < 3 || (v35 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v35.i16[0] = vaddlv_u8(v35), v35.u32[0] > 1uLL))
      {
        v34 = std::__next_prime(v34);
      }
      else
      {
        v36 = 1 << -(char)__clz(v34 - 1);
        if (v34 >= 2)
          v34 = v36;
      }
      if (prime <= v34)
        prime = v34;
      if (prime >= v10)
      {
        v10 = *(_QWORD *)(a1 + 16);
      }
      else
      {
        if (prime)
        {
LABEL_33:
          if (prime >> 61)
            sub_19C2A143C();
          v24 = operator new(8 * prime);
          v25 = *v6;
          *v6 = v24;
          if (v25)
            operator delete(v25);
          v26 = 0;
          *(_QWORD *)(a1 + 16) = prime;
          do
            *((_QWORD *)*v6 + v26++) = 0;
          while (prime != v26);
          v27 = (_QWORD *)*v17;
          if (!*v17)
            goto LABEL_57;
          v28 = v27[1];
          v29 = prime - 1;
          if ((prime & (prime - 1)) == 0)
          {
            v30 = v28 & v29;
            *((_QWORD *)*v6 + v30) = v17;
            for (i = (_QWORD *)*v27; *v27; i = (_QWORD *)*v27)
            {
              v32 = i[1] & v29;
              if (v32 == v30)
              {
                v27 = i;
              }
              else if (*((_QWORD *)*v6 + v32))
              {
                *v27 = *i;
                v33 = 8 * v32;
                *i = **(_QWORD **)((char *)*v6 + v33);
                **(_QWORD **)((char *)*v6 + v33) = i;
              }
              else
              {
                *((_QWORD *)*v6 + v32) = v27;
                v27 = i;
                v30 = v32;
              }
            }
LABEL_57:
            v10 = prime;
            goto LABEL_58;
          }
          if (v28 >= prime)
            v28 %= prime;
          *((_QWORD *)*v6 + v28) = v17;
          v37 = (_QWORD *)*v27;
          if (!*v27)
            goto LABEL_57;
          while (1)
          {
            v41 = v37[1];
            if (v41 >= prime)
              v41 %= prime;
            if (v41 != v28)
            {
              if (!*((_QWORD *)*v6 + v41))
              {
                *((_QWORD *)*v6 + v41) = v27;
                goto LABEL_62;
              }
              *v27 = *v37;
              v40 = 8 * v41;
              *v37 = **(_QWORD **)((char *)*v6 + v40);
              **(_QWORD **)((char *)*v6 + v40) = v37;
              v37 = v27;
            }
            v41 = v28;
LABEL_62:
            v27 = v37;
            v37 = (_QWORD *)*v37;
            v28 = v41;
            if (!v37)
              goto LABEL_57;
          }
        }
        v45 = *v6;
        *v6 = 0;
        if (v45)
          operator delete(v45);
        v10 = 0;
        *(_QWORD *)(a1 + 16) = 0;
      }
    }
LABEL_58:
    v38 = v7[1];
    v39 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v39.i16[0] = vaddlv_u8(v39);
    if (v39.u32[0] > 1uLL)
    {
      if (v38 >= v10)
        v38 %= v10;
    }
    else
    {
      v38 &= v10 - 1;
    }
    v42 = *v6;
    v43 = (_QWORD *)*((_QWORD *)*v6 + v38);
    if (v43)
    {
      *v7 = *v43;
    }
    else
    {
      *v7 = *v17;
      *v17 = v7;
      v42[v38] = v17;
      if (!*v7)
      {
LABEL_79:
        ++*(_QWORD *)(a1 + 32);
        return;
      }
      v44 = *(_QWORD *)(*v7 + 8);
      if (v39.u32[0] > 1uLL)
      {
        if (v44 >= v10)
          v44 %= v10;
      }
      else
      {
        v44 &= v10 - 1;
      }
      v43 = (char *)*v6 + 8 * v44;
    }
    *v43 = v7;
    goto LABEL_79;
  }
  if (v11.u32[0] < 2uLL)
  {
    while (1)
    {
      v16 = v14[1];
      if (v16 == v9)
      {
        if (v14[2] == v9)
          goto LABEL_80;
      }
      else if ((v16 & (v10 - 1)) != v12)
      {
        goto LABEL_21;
      }
      v14 = (_QWORD *)*v14;
      if (!v14)
        goto LABEL_21;
    }
  }
  while (1)
  {
    v15 = v14[1];
    if (v15 == v9)
      break;
    if (v15 >= v10)
      v15 %= v10;
    if (v15 != v12)
      goto LABEL_21;
LABEL_11:
    v14 = (_QWORD *)*v14;
    if (!v14)
      goto LABEL_21;
  }
  if (v14[2] != v9)
    goto LABEL_11;
LABEL_80:
  if (v8)
    CFRelease(v8);
  operator delete(v7);
}

void sub_19C3AC044(_Unwind_Exception *a1)
{
  _QWORD *v1;
  const void *v3;

  v3 = (const void *)v1[3];
  if (v3)
    CFRelease(v3);
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19C3AC070(_QWORD *a1)
{
  int8x8_t *v1;
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;

  v1 = (int8x8_t *)a1[2];
  v2 = v1[2];
  if (v2)
  {
    v3 = a1[8];
    v4 = (uint8x8_t)vcnt_s8(v2);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = a1[8];
      if (*(_QWORD *)&v2 <= v3)
        v5 = v3 % *(_QWORD *)&v2;
    }
    else
    {
      v5 = (*(_QWORD *)&v2 - 1) & v3;
    }
    v6 = *(_QWORD **)(*(_QWORD *)&v1[1] + 8 * v5);
    if (v6)
    {
      v7 = (_QWORD *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          while (1)
          {
            v9 = v7[1];
            if (v9 == v3)
            {
              if (v7[2] == v3)
                return 1;
            }
            else if ((v9 & (*(_QWORD *)&v2 - 1)) != v5)
            {
              goto LABEL_22;
            }
            v7 = (_QWORD *)*v7;
            if (!v7)
              goto LABEL_22;
          }
        }
        do
        {
          v8 = v7[1];
          if (v8 == v3)
          {
            if (v7[2] == v3)
              return 1;
          }
          else
          {
            if (v8 >= *(_QWORD *)&v2)
              v8 %= *(_QWORD *)&v2;
            if (v8 != v5)
              break;
          }
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
    }
LABEL_22:
    v10 = a1[9];
    v11 = (uint8x8_t)vcnt_s8(v2);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v12 = a1[9];
      if (*(_QWORD *)&v2 <= v10)
        v12 = v10 % *(_QWORD *)&v2;
    }
    else
    {
      v12 = (*(_QWORD *)&v2 - 1) & v10;
    }
    v13 = *(_QWORD **)(*(_QWORD *)&v1[1] + 8 * v12);
    if (v13)
    {
      v14 = (_QWORD *)*v13;
      if (v14)
      {
        if (v11.u32[0] < 2uLL)
        {
          v15 = *(_QWORD *)&v2 - 1;
          while (1)
          {
            v17 = v14[1];
            if (v17 == v10)
            {
              if (v14[2] == v10)
                return 1;
            }
            else if ((v17 & v15) != v12)
            {
              return 0;
            }
            v14 = (_QWORD *)*v14;
            if (!v14)
              return 0;
          }
        }
        do
        {
          v16 = v14[1];
          if (v16 == v10)
          {
            if (v14[2] == v10)
              return 1;
          }
          else
          {
            if (v16 >= *(_QWORD *)&v2)
              v16 %= *(_QWORD *)&v2;
            if (v16 != v12)
              return 0;
          }
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
    }
  }
  return 0;
}

void sub_19C3AC230(_QWORD *a1)
{
  sub_19C3ADE68(a1);
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C3AC254(_QWORD *a1, uint64_t a2, unsigned int *a3, uint64_t a4, double *a5)
{
  unsigned int *v5;
  unsigned int *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  unsigned int *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int *v23;
  char *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int *v29;
  double *v30;
  uint64_t v31;
  _DWORD *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unsigned int *v36;
  _DWORD *v37;
  unsigned int v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  char *v44;
  char *v45;
  int64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  char *v57;
  char *v58;
  unsigned int *v59;
  unint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  __int128 v65;
  int v66;
  unsigned int *v67;
  _QWORD *v68;
  unsigned int *v69;
  char v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  unint64_t v81;
  unint64_t v82;
  unsigned int *v83;
  char *v84;
  unsigned int v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  _BYTE *v91;
  unsigned int *v92;
  unint64_t v93;
  uint64_t v94;
  _OWORD *v95;
  unsigned int *v96;
  uint64_t v97;
  __int128 v98;
  unsigned int v99;
  double v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  _QWORD *v106;
  uint64_t v107;
  char *v108;
  char *v109;
  unint64_t v110;
  unint64_t v111;
  unsigned int *v112;
  char *v113;
  unsigned int v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  _QWORD *v118;
  uint64_t v119;
  double v120;
  double v121;
  unint64_t v122;
  double *v123;
  double *v124;
  unint64_t v125;
  unsigned int *v126;
  double *v127;
  unsigned int v128;
  unsigned int *v129;
  size_t v130;
  __int32 *v131;
  __int32 *v132;
  __int32 *v133;
  __int32 *v134;
  uint64_t *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  double *v139;
  unint64_t v140;
  unint64_t v141;
  unsigned int *v142;
  double *v143;
  unsigned int v144;
  _QWORD *v145;
  _QWORD *v146;
  _QWORD *v147;
  uint64_t v148;
  char *v149;
  char *v150;
  unint64_t v151;
  unint64_t v152;
  unsigned int *v153;
  char *v154;
  unsigned int v155;
  uint64_t v156;
  _DWORD *v157;
  _QWORD *v160;
  uint64_t v162;
  double v163;
  void *__p;
  char *v165;
  char *v166;

  *a5 = 0.0;
  LOBYTE(v5) = (_DWORD)a2 == 1;
  if (!a4)
    return v5 & 1;
  v6 = a3;
  v7 = a2;
  v9 = a1[14];
  v8 = a1 + 14;
  v10 = (_QWORD *)*(v8 - 8);
  v11 = *(v8 - 10);
  v12 = *((_DWORD *)v8 - 8);
  v162 = (uint64_t)v8;
  v8[1] = v9;
  if (v10)
  {
    v13 = &a3[a4];
    do
    {
      v15 = *v6;
      v16 = (_QWORD *)v10[10];
      v17 = (_QWORD *)v10[11];
      if (v16 == v17)
      {
LABEL_9:
        v19 = (char *)v10[4];
        v20 = (char *)v10[5];
        if (v20 != v19)
        {
          v21 = (v20 - v19) >> 3;
          do
          {
            v22 = v21 >> 1;
            v23 = (unsigned int *)&v19[8 * (v21 >> 1)];
            v25 = *v23;
            v24 = (char *)(v23 + 2);
            v21 += ~(v21 >> 1);
            if (v25 < v15)
              v19 = v24;
            else
              v21 = v22;
          }
          while (v21);
        }
        if (v19 != v20 && *(_DWORD *)v19 == (_DWORD)v15)
          v15 = *((unsigned int *)v19 + 1);
      }
      else
      {
        while (1)
        {
          v18 = *v16;
          if ((*(unsigned int (**)(_QWORD, uint64_t))(*(_QWORD *)*v16 + 112))(*v16, v15))
            break;
          if (++v16 == v17)
            goto LABEL_9;
        }
        v14 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v18 + 88))(v18, v15);
        v15 = sub_19C42F404(v14);
      }
      sub_19C3AD490(v15, v162, v11, v12);
      ++v6;
    }
    while (v6 != v13);
  }
  else
  {
    v26 = 4 * a4;
    do
    {
      v27 = *v6++;
      sub_19C3AD490(v27, v162, v11, v12);
      v26 -= 4;
    }
    while (v26);
  }
  if (a1[14] == a1[15])
    goto LABEL_183;
  v28 = a1[6];
  if (!v28)
  {
    v39 = a1 + 11;
    a1[12] = a1[11];
    v40 = a1 + 12;
    v41 = a1[4];
    v30 = a5;
    goto LABEL_179;
  }
  __p = 0;
  v165 = 0;
  v166 = 0;
  v5 = *(unsigned int **)(v28 + 80);
  v29 = *(unsigned int **)(v28 + 88);
  v30 = a5;
  if (v5 == v29)
  {
LABEL_25:
    if (!*(_BYTE *)(v28 + 128))
      goto LABEL_72;
  }
  else
  {
    while (1)
    {
      v31 = *(_QWORD *)v5;
      if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)v5 + 112))(*(_QWORD *)v5, v7))
        break;
      v5 += 2;
      if (v5 == v29)
        goto LABEL_25;
    }
    v42 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v31 + 88))(v31, v7);
    v43 = sub_19C42F404(v42);
    LOBYTE(v5) = (_BYTE)v165;
    v52 = (v165 - (_BYTE *)__p) >> 2;
    v53 = v52 + 1;
    if ((unint64_t)(v52 + 1) >> 62)
LABEL_186:
      sub_19C2A18E8();
    v54 = v166 - (_BYTE *)__p;
    if ((v166 - (_BYTE *)__p) >> 1 > v53)
      v53 = v54 >> 1;
    if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFFCLL)
      v55 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v55 = v53;
    if (v55)
    {
      if (v55 >> 62)
        goto LABEL_188;
      v56 = (char *)operator new(4 * v55);
    }
    else
    {
      v56 = 0;
    }
    v71 = &v56[4 * v52];
    *(_DWORD *)v71 = v43;
    __p = v71;
    v166 = &v56[4 * v55];
    v165 = v71 + 4;
    if (!*(_BYTE *)(v28 + 128))
    {
LABEL_72:
      v73 = *(_QWORD *)(v28 + 56);
      v72 = *(_QWORD *)(v28 + 64);
      v67 = (unsigned int *)__p;
      if (v72 - v73 != 8)
      {
        v74 = 0;
        do
        {
          v76 = *(_QWORD *)(v73 + 8 * v74++);
          v77 = *(_QWORD *)(v73 + 8 * v74);
          if (v77 != v76)
          {
            v78 = *(_QWORD *)(v28 + 16);
            v79 = (char *)(v78 + 16 * v77);
            v80 = (char *)(v78 + 16 * v76);
            v81 = (v79 - v80) >> 4;
            do
            {
              v82 = v81 >> 1;
              v83 = (unsigned int *)&v80[16 * (v81 >> 1)];
              v85 = *v83;
              v84 = (char *)(v83 + 4);
              v81 += ~(v81 >> 1);
              if (v85 < v7)
                v80 = v84;
              else
                v81 = v82;
            }
            while (v81);
            if (v80 != v79 && *(_DWORD *)v80 == (_DWORD)v7)
            {
              v5 = (unsigned int *)v165;
              if (v165 < v166)
              {
                *(_DWORD *)v165 = *((_DWORD *)v80 + 1);
                v75 = (char *)++v5;
              }
              else
              {
                v86 = (v165 - (char *)v67) >> 2;
                v87 = v86 + 1;
                if ((unint64_t)(v86 + 1) >> 62)
                {
                  __p = v67;
                  goto LABEL_186;
                }
                v88 = v166 - (char *)v67;
                if ((v166 - (char *)v67) >> 1 > v87)
                  v87 = v88 >> 1;
                if ((unint64_t)v88 >= 0x7FFFFFFFFFFFFFFCLL)
                  v89 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v89 = v87;
                if (v89)
                {
                  if (v89 >> 62)
                  {
                    __p = v67;
LABEL_188:
                    sub_19C2A143C();
                  }
                  v90 = v89;
                  v91 = operator new(4 * v89);
                  v89 = v90;
                }
                else
                {
                  v91 = 0;
                }
                v92 = (unsigned int *)&v91[4 * v86];
                *v92 = *((_DWORD *)v80 + 1);
                v75 = (char *)(v92 + 1);
                if (v5 != v67)
                {
                  v93 = (char *)(v5 - 1) - (char *)v67;
                  if (v93 < 0x2C)
                    goto LABEL_191;
                  if ((unint64_t)((char *)v67 - v91) < 0x20)
                    goto LABEL_191;
                  v94 = (v93 >> 2) + 1;
                  v95 = &v91[4 * v86 - 16];
                  v96 = v5 - 4;
                  v97 = v94 & 0x7FFFFFFFFFFFFFF8;
                  do
                  {
                    v98 = *(_OWORD *)v96;
                    *(v95 - 1) = *((_OWORD *)v96 - 1);
                    *v95 = v98;
                    v95 -= 2;
                    v96 -= 8;
                    v97 -= 8;
                  }
                  while (v97);
                  v92 -= v94 & 0x7FFFFFFFFFFFFFF8;
                  v5 -= v94 & 0x7FFFFFFFFFFFFFF8;
                  if (v94 != (v94 & 0x7FFFFFFFFFFFFFF8))
                  {
LABEL_191:
                    do
                    {
                      v99 = *--v5;
                      *--v92 = v99;
                    }
                    while (v5 != v67);
                  }
                }
                v166 = &v91[4 * v89];
                if (v67)
                  operator delete(v67);
                v67 = v92;
              }
              v165 = v75;
              v73 = *(_QWORD *)(v28 + 56);
              v72 = *(_QWORD *)(v28 + 64);
            }
          }
        }
        while (((v72 - v73) >> 3) - 1 > v74);
        __p = v67;
      }
      v69 = (unsigned int *)v165;
      v68 = a1;
      if (v67 != (unsigned int *)v165)
        goto LABEL_108;
LABEL_158:
      v70 = 0;
      goto LABEL_162;
    }
  }
  v32 = *(_DWORD **)(v28 + 16);
  v33 = *(_QWORD *)(v28 + 24);
  if (v33)
  {
    v34 = *(_QWORD *)(v28 + 24);
    do
    {
      v35 = v34 >> 1;
      v36 = &v32[4 * (v34 >> 1)];
      v38 = *v36;
      v37 = v36 + 4;
      v34 += ~(v34 >> 1);
      if (v38 < v7)
        v32 = v37;
      else
        v34 = v35;
    }
    while (v34);
  }
  v44 = v165;
  if (v165 >= v166)
  {
    v45 = (char *)__p;
    v46 = v165 - (_BYTE *)__p;
    v47 = (v165 - (_BYTE *)__p) >> 2;
    v48 = v47 + 1;
    if ((unint64_t)(v47 + 1) >> 62)
      goto LABEL_186;
    v49 = v166 - (_BYTE *)__p;
    if ((v166 - (_BYTE *)__p) >> 1 > v48)
      v48 = v49 >> 1;
    if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFFCLL)
      v50 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v50 = v48;
    if (v50)
    {
      if (v50 >> 62)
        goto LABEL_188;
      v51 = (char *)operator new(4 * v50);
    }
    else
    {
      v51 = 0;
    }
    v57 = &v51[4 * v47];
    v58 = &v51[4 * v50];
    *(_DWORD *)v57 = v32[1];
    v59 = (unsigned int *)(v57 + 4);
    if (v44 != v45)
    {
      v60 = v44 - v45 - 4;
      if (v60 < 0x2C)
        goto LABEL_192;
      if ((unint64_t)(v44 - &v51[v46]) < 0x20)
        goto LABEL_192;
      v61 = (v60 >> 2) + 1;
      v62 = &v51[4 * v47 - 16];
      v63 = v44 - 16;
      v64 = v61 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v65 = *(_OWORD *)v63;
        *((_OWORD *)v62 - 1) = *((_OWORD *)v63 - 1);
        *(_OWORD *)v62 = v65;
        v62 -= 32;
        v63 -= 32;
        v64 -= 8;
      }
      while (v64);
      v57 -= 4 * (v61 & 0x7FFFFFFFFFFFFFF8);
      v44 -= 4 * (v61 & 0x7FFFFFFFFFFFFFF8);
      if (v61 != (v61 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_192:
        do
        {
          v66 = *((_DWORD *)v44 - 1);
          v44 -= 4;
          *((_DWORD *)v57 - 1) = v66;
          v57 -= 4;
        }
        while (v44 != v45);
      }
    }
    __p = v57;
    v166 = v58;
    if (v45)
    {
      operator delete(v45);
      v33 = *(_QWORD *)(v28 + 24);
    }
    v5 = v59;
  }
  else
  {
    *(_DWORD *)v165 = v32[1];
    v5 = (unsigned int *)(v44 + 4);
  }
  v165 = (char *)v5;
  if (v32 == (_DWORD *)(*(_QWORD *)(v28 + 16) + 16 * v33))
  {
    v70 = 0;
    v67 = (unsigned int *)__p;
    goto LABEL_162;
  }
  v67 = (unsigned int *)__p;
  if (*v32 != (_DWORD)v7)
    goto LABEL_158;
  v68 = a1;
  v69 = v5;
LABEL_108:
  if (v67 == v69)
  {
    LOBYTE(v5) = 1;
    v100 = 0.0;
    goto LABEL_161;
  }
  v160 = v68 + 11;
  v100 = 0.0;
  while (1)
  {
    v101 = *v67;
    v102 = (_QWORD *)v68[6];
    v103 = v68[4];
    v68[12] = v68[11];
    v104 = v101;
    if (v102)
    {
      v106 = (_QWORD *)v102[10];
      v105 = (_QWORD *)v102[11];
      if (v106 == v105)
      {
LABEL_114:
        v108 = (char *)v102[4];
        v109 = (char *)v102[5];
        if (v109 == v108)
        {
          v68 = a1;
        }
        else
        {
          v110 = (v109 - v108) >> 3;
          v68 = a1;
          do
          {
            v111 = v110 >> 1;
            v112 = (unsigned int *)&v108[8 * (v110 >> 1)];
            v114 = *v112;
            v113 = (char *)(v112 + 2);
            v110 += ~(v110 >> 1);
            if (v114 < v101)
              v108 = v113;
            else
              v110 = v111;
          }
          while (v110);
        }
        v104 = v101;
        if (v108 != v109)
        {
          v104 = v101;
          if (*(_DWORD *)v108 == (_DWORD)v101)
            v104 = *((unsigned int *)v108 + 1);
        }
      }
      else
      {
        while (1)
        {
          v107 = *v106;
          if ((*(unsigned int (**)(_QWORD, uint64_t))(*(_QWORD *)*v106 + 112))(*v106, v101))
            break;
          if (++v106 == v105)
            goto LABEL_114;
        }
        v115 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v107 + 88))(v107, v101);
        v68 = a1;
        v104 = sub_19C42F404(v115);
      }
    }
    sub_19C3AD490(v104, (uint64_t)v160, v103, 1);
    v116 = v68[6];
    v117 = *(_QWORD **)(v116 + 80);
    v118 = *(_QWORD **)(v116 + 88);
    while (v117 != v118)
    {
      v119 = *v117;
      if ((*(unsigned int (**)(_QWORD, uint64_t))(*(_QWORD *)*v117 + 112))(*v117, v7)
        && ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v119 + 88))(v119, v7) == 68
         || (*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v119 + 88))(v119, v7) == 69))
      {
        v120 = *(double *)(v116 + 104);
        v121 = (*(double (**)(uint64_t, uint64_t))(*(_QWORD *)v119 + 96))(v119, v7) + v120;
        goto LABEL_155;
      }
      ++v117;
    }
    if (*(_BYTE *)(v116 + 128))
    {
      v122 = *(_QWORD *)(v116 + 24);
      v121 = 0.0;
      if (!v122)
        goto LABEL_155;
      v123 = *(double **)(v116 + 16);
      v124 = &v123[2 * v122];
      do
      {
        v125 = v122 >> 1;
        v126 = (unsigned int *)&v123[2 * (v122 >> 1)];
        v128 = *v126;
        v127 = (double *)(v126 + 4);
        v122 += ~(v122 >> 1);
        if (v128 < v7)
          v123 = v127;
        else
          v122 = v125;
      }
      while (v122);
      if (v123 == v124)
        goto LABEL_155;
LABEL_153:
      if (*(_DWORD *)v123 == (_DWORD)v7)
        v121 = v123[1];
      goto LABEL_155;
    }
    v129 = v69;
    v130 = *(_QWORD *)(v116 + 112);
    v131 = *(__int32 **)(v116 + 120);
    v132 = &v131[v130];
    v133 = wmemchr(v131, v101, v130);
    if (v133)
      v134 = v133;
    else
      v134 = v132;
    v135 = (uint64_t *)(*(_QWORD *)(v116 + 56) + 2 * ((char *)v134 - (char *)v131));
    v136 = *v135;
    v137 = v135[1];
    v121 = 0.0;
    if (v137 == v136)
    {
      v69 = v129;
      goto LABEL_155;
    }
    v138 = *(_QWORD *)(v116 + 16);
    v139 = (double *)(v138 + 16 * v137);
    v123 = (double *)(v138 + 16 * v136);
    v140 = ((char *)v139 - (char *)v123) >> 4;
    v69 = v129;
    do
    {
      v141 = v140 >> 1;
      v142 = (unsigned int *)&v123[2 * (v140 >> 1)];
      v144 = *v142;
      v143 = (double *)(v142 + 4);
      v140 += ~(v140 >> 1);
      if (v144 < v7)
        v123 = v143;
      else
        v140 = v141;
    }
    while (v140);
    if (v123 != v139)
      goto LABEL_153;
LABEL_155:
    v163 = 0.0;
    if ((sub_19C3ADC20((uint64_t)v68, v160, v162, &v163) & 1) == 0)
      break;
    v100 = __exp10(v163 + v121) + v100;
    if (++v67 == v69)
    {
      LOBYTE(v5) = 1;
      goto LABEL_161;
    }
  }
  LOBYTE(v5) = 0;
LABEL_161:
  *a5 = *a5 + log10(v100);
  v70 = 1;
  v67 = (unsigned int *)__p;
LABEL_162:
  if (v67)
    operator delete(v67);
  if ((v70 & 1) != 0)
    return v5 & 1;
  v39 = a1 + 11;
  a1[12] = a1[11];
  v40 = a1 + 12;
  v145 = (_QWORD *)a1[6];
  v41 = a1[4];
  if (v145)
  {
    v146 = (_QWORD *)v145[10];
    v147 = (_QWORD *)v145[11];
    if (v146 == v147)
    {
LABEL_169:
      v149 = (char *)v145[4];
      v150 = (char *)v145[5];
      if (v150 != v149)
      {
        v151 = (v150 - v149) >> 3;
        do
        {
          v152 = v151 >> 1;
          v153 = (unsigned int *)&v149[8 * (v151 >> 1)];
          v155 = *v153;
          v154 = (char *)(v153 + 2);
          v151 += ~(v151 >> 1);
          if (v155 < v7)
            v149 = v154;
          else
            v151 = v152;
        }
        while (v151);
      }
      if (v149 != v150 && *(_DWORD *)v149 == (_DWORD)v7)
        v7 = *((unsigned int *)v149 + 1);
    }
    else
    {
      while (1)
      {
        v148 = *v146;
        if ((*(unsigned int (**)(_QWORD, uint64_t))(*(_QWORD *)*v146 + 112))(*v146, v7))
          break;
        if (++v146 == v147)
          goto LABEL_169;
      }
      v156 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v148 + 88))(v148, v7);
      v7 = sub_19C42F404(v156);
    }
  }
LABEL_179:
  sub_19C3AD490(v7, (uint64_t)v39, v41, 1);
  v157 = (_DWORD *)*v39;
  if (*v39 == *v40)
    return sub_19C3ADC20((uint64_t)a1, v39, v162, v30);
  while (*v157 != 3)
  {
    if (++v157 == (_DWORD *)*v40)
      return sub_19C3ADC20((uint64_t)a1, v39, v162, v30);
  }
LABEL_183:
  LOBYTE(v5) = 0;
  return v5 & 1;
}

void sub_19C3ACD20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  void *v15;

  if (v15)
    operator delete(v15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C3ACD64(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  int v8;
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int *v20;
  char *v21;
  unsigned int v22;
  _DWORD *v23;
  _DWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  __int128 v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  _BYTE *v49;
  _BYTE *v50;
  int64_t v51;
  char *v52;
  char *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t *p_shared_owners;
  NSObject *v66;
  int v67;
  __int128 v68;
  std::__shared_weak_count *v70;
  std::__shared_weak_count *v71;
  uint8_t buf[8];
  std::__shared_weak_count *v73;
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  v5 = (_QWORD *)(a1 + 112);
  if (a4)
  {
    v6 = *(_QWORD **)(a1 + 48);
    v7 = *(_QWORD *)(a1 + 32);
    v8 = *(_DWORD *)(a1 + 80);
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a1 + 112);
    if (a3)
    {
      v9 = a2;
      if (v6)
      {
        v10 = &a2[a3];
        do
        {
          v12 = *v9;
          v14 = (_QWORD *)v6[10];
          v13 = (_QWORD *)v6[11];
          if (v14 == v13)
          {
LABEL_10:
            v16 = (char *)v6[4];
            v17 = (char *)v6[5];
            if (v17 != v16)
            {
              v18 = (v17 - v16) >> 3;
              do
              {
                v19 = v18 >> 1;
                v20 = (unsigned int *)&v16[8 * (v18 >> 1)];
                v22 = *v20;
                v21 = (char *)(v20 + 2);
                v18 += ~(v18 >> 1);
                if (v22 < v12)
                  v16 = v21;
                else
                  v18 = v19;
              }
              while (v18);
            }
            if (v16 != v17 && *(_DWORD *)v16 == (_DWORD)v12)
              v12 = *((unsigned int *)v16 + 1);
          }
          else
          {
            while (1)
            {
              v15 = *v14;
              if ((*(unsigned int (**)(_QWORD, uint64_t))(*(_QWORD *)*v14 + 112))(*v14, v12))
                break;
              if (++v14 == v13)
                goto LABEL_10;
            }
            v11 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 88))(v15, v12);
            v12 = sub_19C42F404(v11);
          }
          sub_19C3AD490(v12, (uint64_t)v5, v7, v8);
          ++v9;
        }
        while (v9 != v10);
      }
      else
      {
        v26 = 4 * a3;
        do
        {
          v27 = *v9++;
          sub_19C3AD490(v27, (uint64_t)v5, v7, v8);
          v26 -= 4;
        }
        while (v26);
      }
    }
  }
  else
  {
    v23 = *(_DWORD **)(a1 + 128);
    v24 = *(_DWORD **)(a1 + 112);
    if (v23 == v24)
    {
      if (v23)
      {
        *(_QWORD *)(a1 + 120) = v23;
        operator delete(v23);
        *v5 = 0;
        v5[1] = 0;
        v5[2] = 0;
      }
      v24 = operator new(4uLL);
      *(_QWORD *)(a1 + 120) = v24;
      v25 = (_QWORD *)(a1 + 120);
      *(v25 - 1) = v24;
      v25[1] = v24 + 1;
    }
    else
    {
      v25 = (_QWORD *)(a1 + 120);
    }
    *v24 = 1;
    *v25 = v24 + 1;
  }
  if (*(_QWORD *)(a1 + 112) == *(_QWORD *)(a1 + 120))
    return 0;
  v28 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
  if (v28 >= 2)
  {
    if (v28 != 2)
    {
      if (qword_1EE41C3F0 != -1)
        dispatch_once(&qword_1EE41C3F0, &unk_1E3D3AF80);
      v66 = qword_1EE41C3E8;
      if (os_log_type_enabled((os_log_t)qword_1EE41C3E8, OS_LOG_TYPE_ERROR))
      {
        v67 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v67;
        _os_log_error_impl(&dword_19C291000, v66, OS_LOG_TYPE_ERROR, "unknown montreal model type in instance of MontrealTokenIDMapper: %d", buf, 8u);
      }
      __assert_rtn("createPredictionEnumerator", "NeuralLanguageModelAdapter.cpp", 189, "false");
    }
    v29 = operator new();
    v61 = *(_QWORD *)(a1 + 16);
    (*(void (**)(uint8_t *__return_ptr))(**(_QWORD **)(a1 + 32) + 136))(buf);
    v62 = *(_QWORD *)buf;
    v63 = *(_QWORD *)(a1 + 64);
    *(_QWORD *)v29 = &off_1E3D374F8;
    *(_QWORD *)(v29 + 8) = -1;
    (*(void (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v62 + 40))(v62, v61, v5, v63);
    v58 = v73;
    if (v73)
    {
      p_shared_owners = (unint64_t *)&v73->__shared_owners_;
      do
        v60 = __ldaxr(p_shared_owners);
      while (__stlxr(v60 - 1, p_shared_owners));
LABEL_72:
      if (!v60)
      {
        ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
        std::__shared_weak_count::__release_weak(v58);
      }
    }
  }
  else
  {
    v29 = operator new();
    v30 = *(_QWORD *)(a1 + 16);
    v31 = *(std::__shared_weak_count **)(a1 + 24);
    v71 = v31;
    if (v31)
    {
      v32 = (unint64_t *)&v31->__shared_owners_;
      do
        v33 = __ldxr(v32);
      while (__stxr(v33 + 1, v32));
    }
    v35 = *(_QWORD *)(a1 + 32);
    v34 = *(std::__shared_weak_count **)(a1 + 40);
    v70 = v34;
    if (v34)
    {
      v36 = (unint64_t *)&v34->__shared_owners_;
      do
        v37 = __ldxr(v36);
      while (__stxr(v37 + 1, v36));
    }
    v38 = *(_QWORD *)(a1 + 48);
    v39 = *(std::__shared_weak_count **)(a1 + 56);
    if (v39)
    {
      v40 = (unint64_t *)&v39->__shared_owners_;
      do
        v41 = __ldxr(v40);
      while (__stxr(v41 + 1, v40));
    }
    v42 = *(_OWORD *)(a1 + 64);
    *(_QWORD *)v29 = &off_1E3D37498;
    *(_QWORD *)(v29 + 8) = v30;
    *(_QWORD *)(v29 + 16) = v31;
    if (v31)
    {
      v43 = (unint64_t *)&v31->__shared_owners_;
      do
        v44 = __ldxr(v43);
      while (__stxr(v44 + 1, v43));
    }
    *(_QWORD *)(v29 + 24) = v35;
    *(_QWORD *)(v29 + 32) = v34;
    if (v34)
    {
      v45 = (unint64_t *)&v34->__shared_owners_;
      do
        v46 = __ldxr(v45);
      while (__stxr(v46 + 1, v45));
    }
    *(_QWORD *)(v29 + 40) = v38;
    *(_QWORD *)(v29 + 48) = v39;
    if (v39)
    {
      v47 = (unint64_t *)&v39->__shared_owners_;
      do
        v48 = __ldxr(v47);
      while (__stxr(v48 + 1, v47));
    }
    v68 = v42;
    (*(void (**)(uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v30 + 40))(v30, v5, v42, 5);
    *(_QWORD *)(v29 + 104) = 0;
    *(_OWORD *)(v29 + 80) = v68;
    *(_QWORD *)(v29 + 96) = -1;
    v50 = *(_BYTE **)(a1 + 112);
    v49 = *(_BYTE **)(a1 + 120);
    *(_QWORD *)(v29 + 112) = 0;
    *(_QWORD *)(v29 + 120) = 0;
    v51 = v49 - v50;
    if (v49 != v50)
    {
      if (v51 < 0)
        sub_19C2A18E8();
      v52 = (char *)operator new(v49 - v50);
      *(_QWORD *)(v29 + 104) = v52;
      *(_QWORD *)(v29 + 112) = v52;
      v53 = &v52[4 * (v51 >> 2)];
      *(_QWORD *)(v29 + 120) = v53;
      memmove(v52, v50, v51);
      *(_QWORD *)(v29 + 112) = v53;
    }
    *(_QWORD *)(v29 + 128) = 0;
    *(_QWORD *)(v29 + 136) = 0;
    *(_QWORD *)(v29 + 144) = 0;
    if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(v29 + 24) + 16))(*(_QWORD *)(v29 + 24))
      && (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v29 + 24) + 16))(*(_QWORD *)(v29 + 24)) != 1)
    {
      __assert_rtn("NeuralModelPredictionEnumerator", "NeuralModelPredictionEnumerator.cpp", 31, "m_tokenIDMapper->modelType() == NNModelType::Word || m_tokenIDMapper->modelType() == NNModelType::SubWord");
    }
    if (v39)
    {
      v54 = (unint64_t *)&v39->__shared_owners_;
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v55 - 1, v54));
      if (!v55)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }
    if (v70)
    {
      v56 = (unint64_t *)&v70->__shared_owners_;
      do
        v57 = __ldaxr(v56);
      while (__stlxr(v57 - 1, v56));
      if (!v57)
      {
        ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
        std::__shared_weak_count::__release_weak(v70);
      }
    }
    v58 = v71;
    if (v71)
    {
      v59 = (unint64_t *)&v71->__shared_owners_;
      do
        v60 = __ldaxr(v59);
      while (__stlxr(v60 - 1, v59));
      goto LABEL_72;
    }
  }
  return v29;
}

void sub_19C3AD30C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  sub_19C2B43C8((uint64_t)va);
  MEMORY[0x1A1AD355C](v11, 0x10A1C405897D53FLL);
  _Unwind_Resume(a1);
}

void sub_19C3AD490(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v6;
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  int *v10;
  int v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  _BYTE *v35;
  _DWORD *v36;
  unint64_t v37;
  char *v38;
  int v39;
  uint64_t v40;
  _OWORD *v41;
  char *v42;
  uint64_t v43;
  __int128 v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  _BYTE *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  _BYTE *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  _BYTE *v64;
  _DWORD *v65;
  char *v66;
  _DWORD *v67;
  unint64_t v68;
  uint64_t v69;
  _OWORD *v70;
  int *v71;
  uint64_t v72;
  __int128 v73;
  int v74;
  unint64_t v75;
  uint64_t v76;
  _OWORD *v77;
  int *v78;
  uint64_t v79;
  __int128 v80;
  int v81;
  unint64_t v82;
  uint64_t v83;
  _OWORD *v84;
  int *v85;
  uint64_t v86;
  __int128 v87;
  int v88;
  unint64_t v89;
  uint64_t v90;
  _OWORD *v91;
  int *v92;
  uint64_t v93;
  __int128 v94;
  int v95;
  _QWORD v96[2];

  v6 = a1;
  v96[1] = *MEMORY[0x1E0C80C00];
  v7 = a1 - 12;
  v8 = a1;
  if ((a1 - 12) <= 0x1E)
  {
    v8 = a1;
    if (((0x515B8843u >> v7) & 1) != 0)
      v8 = dword_19C474F2C[v7];
  }
  if (a4 || (v8 - 4) > 0x3D || ((1 << (v8 - 4)) & 0x380000400000020FLL) == 0)
  {
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a3 + 16))(a3)
      || (*(unsigned int (**)(uint64_t))(*(_QWORD *)a3 + 16))(a3) == 1)
    {
      if (v6 > 1)
      {
        if (v6 == 2)
        {
          v10 = *(int **)(a2 + 8);
          v46 = *(_QWORD *)(a2 + 16);
          if ((unint64_t)v10 < v46)
          {
            v11 = 2;
            goto LABEL_63;
          }
          v13 = *(char **)a2;
          v59 = (uint64_t)v10 - *(_QWORD *)a2;
          v60 = v59 >> 2;
          v61 = (v59 >> 2) + 1;
          if (!(v61 >> 62))
          {
            v62 = v46 - (_QWORD)v13;
            if (v62 >> 1 > v61)
              v61 = v62 >> 1;
            if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFFCLL)
              v63 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v63 = v61;
            if (v63)
            {
              if (v63 >> 62)
                goto LABEL_133;
              v64 = operator new(4 * v63);
            }
            else
            {
              v64 = 0;
            }
            v65 = &v64[4 * v60];
            v66 = &v64[4 * v63];
            *v65 = 2;
            v67 = v65 + 1;
            if (v10 != (int *)v13)
            {
              v89 = (char *)v10 - v13 - 4;
              if (v89 < 0x2C)
                goto LABEL_136;
              if ((unint64_t)((char *)v10 - v64 - v59) < 0x20)
                goto LABEL_136;
              v90 = (v89 >> 2) + 1;
              v91 = &v64[4 * v60 - 16];
              v92 = v10 - 4;
              v93 = v90 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v94 = *(_OWORD *)v92;
                *(v91 - 1) = *((_OWORD *)v92 - 1);
                *v91 = v94;
                v91 -= 2;
                v92 -= 8;
                v93 -= 8;
              }
              while (v93);
              v65 -= v90 & 0x7FFFFFFFFFFFFFF8;
              v10 -= v90 & 0x7FFFFFFFFFFFFFF8;
              if (v90 != (v90 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_136:
                do
                {
                  v95 = *--v10;
                  *--v65 = v95;
                }
                while (v10 != (int *)v13);
              }
            }
            goto LABEL_126;
          }
LABEL_132:
          sub_19C2A18E8();
        }
        if (v6 != 120)
          goto LABEL_27;
        v10 = *(int **)(a2 + 8);
        v12 = *(_QWORD *)(a2 + 16);
        if ((unint64_t)v10 >= v12)
        {
          v13 = *(char **)a2;
          v14 = (uint64_t)v10 - *(_QWORD *)a2;
          v15 = v14 >> 2;
          v16 = (v14 >> 2) + 1;
          if (!(v16 >> 62))
          {
            v17 = v12 - (_QWORD)v13;
            if (v17 >> 1 > v16)
              v16 = v17 >> 1;
            if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL)
              v18 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v18 = v16;
            if (v18)
            {
              if (v18 >> 62)
                goto LABEL_133;
              v19 = operator new(4 * v18);
            }
            else
            {
              v19 = 0;
            }
            v65 = &v19[4 * v15];
            v66 = &v19[4 * v18];
            *v65 = 3;
            v67 = v65 + 1;
            if (v10 != (int *)v13)
            {
              v68 = (char *)v10 - v13 - 4;
              if (v68 < 0x2C)
                goto LABEL_137;
              if ((unint64_t)((char *)v10 - &v19[v14]) < 0x20)
                goto LABEL_137;
              v69 = (v68 >> 2) + 1;
              v70 = &v19[4 * v15 - 16];
              v71 = v10 - 4;
              v72 = v69 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v73 = *(_OWORD *)v71;
                *(v70 - 1) = *((_OWORD *)v71 - 1);
                *v70 = v73;
                v70 -= 2;
                v71 -= 8;
                v72 -= 8;
              }
              while (v72);
              v65 -= v69 & 0x7FFFFFFFFFFFFFF8;
              v10 -= v69 & 0x7FFFFFFFFFFFFFF8;
              if (v69 != (v69 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_137:
                do
                {
                  v74 = *--v10;
                  *--v65 = v74;
                }
                while (v10 != (int *)v13);
              }
            }
            goto LABEL_126;
          }
          goto LABEL_132;
        }
      }
      else
      {
        if (v6)
        {
          if (v6 == 1)
          {
            v10 = *(int **)(a2 + 8);
            v9 = *(_QWORD *)(a2 + 16);
            if ((unint64_t)v10 < v9)
            {
              v11 = 1;
LABEL_63:
              *v10 = v11;
              *(_QWORD *)(a2 + 8) = v10 + 1;
              return;
            }
            v13 = *(char **)a2;
            v47 = (uint64_t)v10 - *(_QWORD *)a2;
            v48 = v47 >> 2;
            v49 = (v47 >> 2) + 1;
            if (!(v49 >> 62))
            {
              v50 = v9 - (_QWORD)v13;
              if (v50 >> 1 > v49)
                v49 = v50 >> 1;
              if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFFCLL)
                v51 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v51 = v49;
              if (!v51)
              {
                v52 = 0;
                goto LABEL_101;
              }
              if (!(v51 >> 62))
              {
                v52 = operator new(4 * v51);
LABEL_101:
                v65 = &v52[4 * v48];
                v66 = &v52[4 * v51];
                *v65 = 1;
                v67 = v65 + 1;
                if (v10 != (int *)v13)
                {
                  v75 = (char *)v10 - v13 - 4;
                  if (v75 < 0x2C)
                    goto LABEL_138;
                  if ((unint64_t)((char *)v10 - v52 - v47) < 0x20)
                    goto LABEL_138;
                  v76 = (v75 >> 2) + 1;
                  v77 = &v52[4 * v48 - 16];
                  v78 = v10 - 4;
                  v79 = v76 & 0x7FFFFFFFFFFFFFF8;
                  do
                  {
                    v80 = *(_OWORD *)v78;
                    *(v77 - 1) = *((_OWORD *)v78 - 1);
                    *v77 = v80;
                    v77 -= 2;
                    v78 -= 8;
                    v79 -= 8;
                  }
                  while (v79);
                  v65 -= v76 & 0x7FFFFFFFFFFFFFF8;
                  v10 -= v76 & 0x7FFFFFFFFFFFFFF8;
                  if (v76 != (v76 & 0x7FFFFFFFFFFFFFF8))
                  {
LABEL_138:
                    do
                    {
                      v81 = *--v10;
                      *--v65 = v81;
                    }
                    while (v10 != (int *)v13);
                  }
                }
LABEL_126:
                *(_QWORD *)a2 = v65;
                *(_QWORD *)(a2 + 8) = v67;
                *(_QWORD *)(a2 + 16) = v66;
                if (v13)
                  operator delete(v13);
                *(_QWORD *)(a2 + 8) = v67;
                return;
              }
LABEL_133:
              sub_19C2A143C();
            }
            goto LABEL_132;
          }
          goto LABEL_27;
        }
        v10 = *(int **)(a2 + 8);
        v45 = *(_QWORD *)(a2 + 16);
        if ((unint64_t)v10 >= v45)
        {
          v13 = *(char **)a2;
          v53 = (uint64_t)v10 - *(_QWORD *)a2;
          v54 = v53 >> 2;
          v55 = (v53 >> 2) + 1;
          if (!(v55 >> 62))
          {
            v56 = v45 - (_QWORD)v13;
            if (v56 >> 1 > v55)
              v55 = v56 >> 1;
            if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFFCLL)
              v57 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v57 = v55;
            if (v57)
            {
              if (v57 >> 62)
                goto LABEL_133;
              v58 = operator new(4 * v57);
            }
            else
            {
              v58 = 0;
            }
            v65 = &v58[4 * v54];
            v66 = &v58[4 * v57];
            *v65 = 3;
            v67 = v65 + 1;
            if (v10 != (int *)v13)
            {
              v82 = (char *)v10 - v13 - 4;
              if (v82 < 0x2C)
                goto LABEL_139;
              if ((unint64_t)((char *)v10 - &v58[v53]) < 0x20)
                goto LABEL_139;
              v83 = (v82 >> 2) + 1;
              v84 = &v58[4 * v54 - 16];
              v85 = v10 - 4;
              v86 = v83 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v87 = *(_OWORD *)v85;
                *(v84 - 1) = *((_OWORD *)v85 - 1);
                *v84 = v87;
                v84 -= 2;
                v85 -= 8;
                v86 -= 8;
              }
              while (v86);
              v65 -= v83 & 0x7FFFFFFFFFFFFFF8;
              v10 -= v83 & 0x7FFFFFFFFFFFFFF8;
              if (v83 != (v83 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_139:
                do
                {
                  v88 = *--v10;
                  *--v65 = v88;
                }
                while (v10 != (int *)v13);
              }
            }
            goto LABEL_126;
          }
          goto LABEL_132;
        }
      }
      v11 = 3;
      goto LABEL_63;
    }
LABEL_27:
    v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 48))(a3);
    v96[0] = v96;
    MEMORY[0x1E0C80A78](v20, v21);
    v23 = (char *)v96 - v22;
    v24 = (*(uint64_t (**)(uint64_t, uint64_t, char *))(*(_QWORD *)a3 + 32))(a3, v8, (char *)v96 - v22);
    if (!v24)
      return;
    v25 = 0;
    v26 = *(char **)(a2 + 8);
    while (1)
    {
      v28 = *(_QWORD *)(a2 + 16);
      if ((unint64_t)v26 >= v28)
        break;
      *(_DWORD *)v26 = *(_DWORD *)&v23[4 * v25];
      v27 = v26 + 4;
LABEL_30:
      *(_QWORD *)(a2 + 8) = v27;
      ++v25;
      v26 = v27;
      if (v25 == v24)
        return;
    }
    v29 = *(char **)a2;
    v30 = (uint64_t)&v26[-*(_QWORD *)a2];
    v31 = v30 >> 2;
    v32 = (v30 >> 2) + 1;
    if (v32 >> 62)
      sub_19C2A18E8();
    v33 = v28 - (_QWORD)v29;
    if (v33 >> 1 > v32)
      v32 = v33 >> 1;
    if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFFCLL)
      v34 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v34 = v32;
    if (v34)
    {
      if (v34 >> 62)
        sub_19C2A143C();
      v35 = operator new(4 * v34);
    }
    else
    {
      v35 = 0;
    }
    v36 = &v35[4 * v31];
    *v36 = *(_DWORD *)&v23[4 * v25];
    v27 = (char *)(v36 + 1);
    if (v26 == v29)
      goto LABEL_46;
    v37 = v26 - 4 - v29;
    if (v37 < 0xBC)
    {
      v38 = v26;
      goto LABEL_45;
    }
    if (&v35[v30 - 4 - (v37 & 0xFFFFFFFFFFFFFFFCLL)] > &v35[v30 - 4])
    {
      v38 = v26;
    }
    else
    {
      if (&v26[-(v37 & 0xFFFFFFFFFFFFFFFCLL) - 4] <= v26 - 4)
      {
        if ((unint64_t)(v26 - &v35[v30]) < 0x20)
        {
          v38 = v26;
          goto LABEL_45;
        }
        v40 = (v37 >> 2) + 1;
        v38 = &v26[-4 * (v40 & 0x7FFFFFFFFFFFFFF8)];
        v41 = &v35[4 * v31 - 16];
        v42 = v26 - 16;
        v43 = v40 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v44 = *(_OWORD *)v42;
          *(v41 - 1) = *((_OWORD *)v42 - 1);
          *v41 = v44;
          v41 -= 2;
          v42 -= 32;
          v43 -= 8;
        }
        while (v43);
        v36 -= v40 & 0x7FFFFFFFFFFFFFF8;
        if (v40 != (v40 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_45;
LABEL_46:
        *(_QWORD *)a2 = v36;
        *(_QWORD *)(a2 + 8) = v27;
        *(_QWORD *)(a2 + 16) = &v35[4 * v34];
        if (v29)
          operator delete(v29);
        goto LABEL_30;
      }
      v38 = v26;
    }
    do
    {
LABEL_45:
      v39 = *((_DWORD *)v38 - 1);
      v38 -= 4;
      *--v36 = v39;
    }
    while (v38 != v29);
    goto LABEL_46;
  }
}

os_log_t sub_19C3ADBF4()
{
  os_log_t result;

  result = os_log_create("com.apple.LanguageModeling", "NeuralLanguageModelAdapter");
  qword_1EE41C3E8 = (uint64_t)result;
  return result;
}

uint64_t sub_19C3ADC20(uint64_t a1, _QWORD *a2, uint64_t a3, double *a4)
{
  uint64_t v7;
  _DWORD *v8;
  _DWORD *v9;
  char *v10;
  char *v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _BYTE *v19;
  _DWORD *v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  _OWORD *v24;
  char *v25;
  uint64_t v26;
  __int128 v27;
  int v28;

  if (*a2 == a2[1])
    return 0;
  v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16));
  if ((_DWORD)v7)
  {
    log10f(0.0);
    *a4 = -10.0;
    v8 = (_DWORD *)*a2;
    v9 = (_DWORD *)a2[1];
    if ((_DWORD *)*a2 != v9)
    {
      v10 = *(char **)(a3 + 8);
      while (1)
      {
        v12 = *(_QWORD *)(a3 + 16);
        if ((unint64_t)v10 >= v12)
          break;
        *(_DWORD *)v10 = *v8;
        v11 = v10 + 4;
LABEL_6:
        *(_QWORD *)(a3 + 8) = v11;
        ++v8;
        v10 = v11;
        if (v8 == v9)
          return v7;
      }
      v13 = *(char **)a3;
      v14 = (uint64_t)&v10[-*(_QWORD *)a3];
      v15 = v14 >> 2;
      v16 = (v14 >> 2) + 1;
      if (v16 >> 62)
        sub_19C2A18E8();
      v17 = v12 - (_QWORD)v13;
      if (v17 >> 1 > v16)
        v16 = v17 >> 1;
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL)
        v18 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v18 = v16;
      if (v18)
      {
        if (v18 >> 62)
          sub_19C2A143C();
        v19 = operator new(4 * v18);
      }
      else
      {
        v19 = 0;
      }
      v20 = &v19[4 * v15];
      *v20 = *v8;
      v11 = (char *)(v20 + 1);
      if (v10 == v13)
        goto LABEL_31;
      v21 = v10 - 4 - v13;
      if (v21 < 0xBC)
      {
        v22 = v10;
        goto LABEL_30;
      }
      if (&v19[v14 - 4 - (v21 & 0xFFFFFFFFFFFFFFFCLL)] > &v19[v14 - 4])
      {
        v22 = v10;
      }
      else
      {
        if (&v10[-(v21 & 0xFFFFFFFFFFFFFFFCLL) - 4] <= v10 - 4)
        {
          if ((unint64_t)(v10 - v19 - v14) < 0x20)
          {
            v22 = v10;
            goto LABEL_30;
          }
          v23 = (v21 >> 2) + 1;
          v22 = &v10[-4 * (v23 & 0x7FFFFFFFFFFFFFF8)];
          v24 = &v19[4 * v15 - 16];
          v25 = v10 - 16;
          v26 = v23 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v27 = *(_OWORD *)v25;
            *(v24 - 1) = *((_OWORD *)v25 - 1);
            *v24 = v27;
            v24 -= 2;
            v25 -= 32;
            v26 -= 8;
          }
          while (v26);
          v20 -= v23 & 0x7FFFFFFFFFFFFFF8;
          if (v23 != (v23 & 0x7FFFFFFFFFFFFFF8))
            goto LABEL_30;
LABEL_31:
          *(_QWORD *)a3 = v20;
          *(_QWORD *)(a3 + 8) = v11;
          *(_QWORD *)(a3 + 16) = &v19[4 * v18];
          if (v13)
            operator delete(v13);
          goto LABEL_6;
        }
        v22 = v10;
      }
      do
      {
LABEL_30:
        v28 = *((_DWORD *)v22 - 1);
        v22 -= 4;
        *--v20 = v28;
      }
      while (v22 != v13);
      goto LABEL_31;
    }
  }
  return v7;
}

_QWORD *sub_19C3ADE68(_QWORD *a1)
{
  void *v2;
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;

  *a1 = &off_1E3D36F18;
  v2 = (void *)a1[14];
  if (v2)
  {
    a1[15] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[11];
  if (v3)
  {
    a1[12] = v3;
    operator delete(v3);
  }
  v4 = (std::__shared_weak_count *)a1[7];
  if (!v4)
    goto LABEL_9;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    v7 = (std::__shared_weak_count *)a1[5];
    if (!v7)
      goto LABEL_15;
  }
  else
  {
LABEL_9:
    v7 = (std::__shared_weak_count *)a1[5];
    if (!v7)
      goto LABEL_15;
  }
  v8 = (unint64_t *)&v7->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
LABEL_15:
  v10 = (std::__shared_weak_count *)a1[3];
  if (v10)
  {
    v11 = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  return a1;
}

unint64_t sub_19C3ADF68(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _DWORD *v5;
  unint64_t result;
  uint64_t v7;
  int v8;
  unint64_t v9;
  _QWORD v10[2];

  v10[1] = *MEMORY[0x1E0C80C00];
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 48))(*(_QWORD *)(a1 + 32));
  MEMORY[0x1E0C80A78]();
  v5 = (_DWORD *)((char *)v10 - v4);
  result = (*(uint64_t (**)(_QWORD, uint64_t, char *))(**(_QWORD **)(a1 + 32) + 32))(*(_QWORD *)(a1 + 32), a2, (char *)v10 - v4);
  if (result)
  {
    if (*v5 == 3)
    {
      return 1;
    }
    else
    {
      v7 = 1;
      while (result != v7)
      {
        v8 = v5[v7++];
        if (v8 == 3)
        {
          v9 = v7 - 1;
          return v9 < result;
        }
      }
      v9 = result;
      return v9 < result;
    }
  }
  return result;
}

_QWORD *sub_19C3AE05C(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *a1 = &off_1E3D36158;
  v2 = a1[1];
  if (v2)
    sub_19C33C1D0(a1[2], v2);
  v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void sub_19C3AE0D4(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *a1 = &off_1E3D36158;
  v2 = a1[1];
  if (v2)
    sub_19C33C1D0(a1[2], v2);
  v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C3AE15C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

void sub_19C3AE164(uint64_t a1)
{
  const void **v2;
  void *v3;
  const void *v4;
  const void **v5;
  void *v6;
  const void *v7;
  CFDictionaryRef v8;
  void *v9;
  void *v10;
  uint64_t v11;
  const void *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  size_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  void **v23;
  void **v24;
  void **v25;
  void *v26;
  void **v27;
  void *v28;
  void **v29;
  void **v30;
  void **v31;
  void **v32;
  void **v33;
  void *v34;
  NSObject *v35;
  _QWORD *exception;
  CFTypeRef v37;
  CFTypeRef v38[2];
  void *v39;
  uint8_t buf[16];
  uint64_t v41;
  void *v42;
  CFTypeRef v43[2];
  CFTypeRef v44;
  CFTypeRef cf;
  void *v46[2];
  uint64_t v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = buf;
  v41 = 0x2000000000;
  v2 = (const void **)qword_1EE41C3F8;
  v42 = (void *)qword_1EE41C3F8;
  if (!qword_1EE41C3F8)
  {
    v39 = 0;
    if (qword_1EE41C400)
    {
      v3 = (void *)qword_1EE41C400;
    }
    else
    {
      *(_OWORD *)v46 = xmmword_1E3D3AFA0;
      v47 = 0;
      qword_1EE41C400 = _sl_dlopen();
      v3 = (void *)qword_1EE41C400;
      if (!qword_1EE41C400)
      {
        abort_report_np();
        goto LABEL_88;
      }
    }
    v2 = (const void **)dlsym(v3, "kMRLEmbeddingMemoryModelEmbeddingDimensionKey");
    *(_QWORD *)(*(_QWORD *)&buf[8] + 24) = v2;
    qword_1EE41C3F8 = (uint64_t)v2;
  }
  _Block_object_dispose(buf, 8);
  if (!v2)
  {
    dlerror();
    abort_report_np();
LABEL_88:
    __break(1u);
LABEL_89:
    dispatch_once(&qword_1EDB97228, &unk_1E3D3ABD0);
LABEL_83:
    v35 = qword_1EDB97220;
    if (os_log_type_enabled((os_log_t)qword_1EDB97220, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_19C291000, v35, OS_LOG_TYPE_ERROR, "Unable to load network model", buf, 2u);
    }
    exception = __cxa_allocate_exception(0x20uLL);
    sub_19C2A6D48(buf, "MRLEmbeddingMemoryModelCreate returned nullptr");
    sub_19C31237C(exception, (__int128 *)buf);
    __cxa_throw(exception, (struct type_info *)&unk_1E3D32968, (void (*)(void *))sub_19C3123E4);
  }
  v4 = *v2;
  if (v4)
    CFRetain(v4);
  sub_19C297DB4(v38, v4);
  sub_19C3AE9C0(v43, v38[0], (uint64_t *)a1);
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = buf;
  v41 = 0x2000000000;
  v5 = (const void **)qword_1EE41C408;
  v42 = (void *)qword_1EE41C408;
  if (!qword_1EE41C408)
  {
    v39 = 0;
    if (qword_1EE41C400)
    {
      v6 = (void *)qword_1EE41C400;
    }
    else
    {
      *(_OWORD *)v46 = xmmword_1E3D3AFA0;
      v47 = 0;
      qword_1EE41C400 = _sl_dlopen();
      v6 = (void *)qword_1EE41C400;
      if (!qword_1EE41C400)
      {
        abort_report_np();
        goto LABEL_88;
      }
      if (v39)
        free(v39);
    }
    v5 = (const void **)dlsym(v6, "kMRLEmbeddingMemoryModelSizeKey");
    *(_QWORD *)(*(_QWORD *)&buf[8] + 24) = v5;
    qword_1EE41C408 = (uint64_t)v5;
  }
  _Block_object_dispose(buf, 8);
  if (!v5)
  {
    dlerror();
    abort_report_np();
    goto LABEL_88;
  }
  v7 = *v5;
  if (v7)
    CFRetain(v7);
  sub_19C297DB4(&v37, v7);
  sub_19C3AE9C0(&v44, v37, (uint64_t *)(a1 + 8));
  v8 = sub_19C32BCAC((uint64_t *)v43, 2uLL);
  v38[1] = v8;
  if (cf)
    CFRelease(cf);
  if (v44)
    CFRelease(v44);
  if (v43[1])
    CFRelease(v43[1]);
  if (v43[0])
    CFRelease(v43[0]);
  if (v37)
    CFRelease(v37);
  if (v38[0])
    CFRelease(v38[0]);
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = buf;
  v41 = 0x2000000000;
  v9 = off_1EE41C410;
  v42 = off_1EE41C410;
  if (!off_1EE41C410)
  {
    v46[0] = 0;
    if (qword_1EE41C400)
    {
      v10 = (void *)qword_1EE41C400;
    }
    else
    {
      *(_OWORD *)v43 = xmmword_1E3D3AFA0;
      v44 = 0;
      qword_1EE41C400 = _sl_dlopen();
      v10 = (void *)qword_1EE41C400;
      if (!qword_1EE41C400)
      {
        abort_report_np();
        goto LABEL_88;
      }
      if (v46[0])
        free(v46[0]);
    }
    v9 = dlsym(v10, "MRLEmbeddingMemoryModelCreate");
    *(_QWORD *)(*(_QWORD *)&buf[8] + 24) = v9;
    off_1EE41C410 = v9;
  }
  _Block_object_dispose(buf, 8);
  if (!v9)
  {
    dlerror();
    abort_report_np();
    goto LABEL_88;
  }
  v11 = ((uint64_t (*)(CFDictionaryRef, _QWORD))v9)(v8, 0);
  if (!v11)
  {
    if (qword_1EDB97228 == -1)
      goto LABEL_83;
    goto LABEL_89;
  }
  v12 = *(const void **)(a1 + 96);
  if (v12)
    CFRelease(v12);
  *(_QWORD *)(a1 + 96) = v11;
  v14 = *(_QWORD *)(a1 + 8);
  v13 = *(_QWORD *)(a1 + 16);
  v43[1] = 0;
  v44 = 0;
  v43[0] = 0;
  v46[0] = v43;
  LOBYTE(v46[1]) = 0;
  if (v13)
  {
    if (v13 > 0xAAAAAAAAAAAAAAALL)
      sub_19C2A18E8();
    v15 = 3 * v13;
    v16 = operator new(24 * v13);
    v17 = &v16[v15];
    v43[0] = v16;
    v44 = &v16[v15];
    do
    {
      *v16 = 0;
      v16[1] = 0;
      v16[2] = 0;
      v16 += 3;
      v15 -= 3;
    }
    while (v15 * 8);
    v43[1] = v17;
  }
  v41 = 0;
  memset(buf, 0, sizeof(buf));
  if (v14)
  {
    if (v14 > 0xAAAAAAAAAAAAAAALL)
      sub_19C2A18E8();
    v18 = 24 * v14;
    v19 = (char *)operator new(v18);
    v20 = 0;
    v21 = &v19[v18];
    *(_QWORD *)buf = v19;
    v41 = (uint64_t)&v19[v18];
    do
    {
      v22 = &v19[v20];
      *(_QWORD *)v22 = 0;
      *((_QWORD *)v22 + 1) = 0;
      *((_QWORD *)v22 + 2) = 0;
      sub_19C2B5440(&v19[v20], (__int128 *)v43[0], (__int128 *)v43[1], 0xAAAAAAAAAAAAAAABLL * (((char *)v43[1] - (char *)v43[0]) >> 3));
      v20 += 24;
    }
    while (v18 != v20);
    *(_QWORD *)&buf[8] = &v19[v18];
  }
  else
  {
    v21 = 0;
  }
  v23 = (void **)(a1 + 64);
  v24 = *(void ***)(a1 + 64);
  if (v24)
  {
    v25 = *(void ***)(a1 + 72);
    v26 = *(void **)(a1 + 64);
    if (v25 != v24)
    {
      v27 = *(void ***)(a1 + 72);
      do
      {
        v30 = (void **)*(v27 - 3);
        v27 -= 3;
        v29 = v30;
        if (v30)
        {
          v31 = (void **)*(v25 - 2);
          v28 = v29;
          if (v31 != v29)
          {
            do
            {
              if (*((char *)v31 - 1) < 0)
                operator delete(*(v31 - 3));
              v31 -= 3;
            }
            while (v31 != v29);
            v28 = *v27;
          }
          *(v25 - 2) = v29;
          operator delete(v28);
        }
        v25 = v27;
      }
      while (v27 != v24);
      v26 = *v23;
    }
    *(_QWORD *)(a1 + 72) = v24;
    operator delete(v26);
    *v23 = 0;
    *(_QWORD *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 80) = 0;
  }
  *(_OWORD *)(a1 + 64) = *(_OWORD *)buf;
  *(_QWORD *)(a1 + 80) = v21;
  v32 = (void **)v43[0];
  if (v43[0])
  {
    v33 = (void **)v43[1];
    v34 = (void *)v43[0];
    if (v43[1] != v43[0])
    {
      do
      {
        if (*((char *)v33 - 1) < 0)
          operator delete(*(v33 - 3));
        v33 -= 3;
      }
      while (v33 != v32);
      v34 = (void *)v43[0];
    }
    v43[1] = v32;
    operator delete(v34);
  }
  *(_BYTE *)(a1 + 88) = 1;
  CFRelease(v8);
}

void sub_19C3AE7F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, int a12, __int16 a13, char a14, char a15, int a16, const void *a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  void *v30;
  int v31;

  if (a24 < 0)
  {
    operator delete(__p);
    if ((v31 & 1) == 0)
    {
LABEL_6:
      sub_19C2E5608(&a17);
      _Unwind_Resume(a1);
    }
  }
  else if (!v31)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v30);
  goto LABEL_6;
}

_QWORD *sub_19C3AE9C0(_QWORD *a1, CFTypeRef cf, uint64_t *a3)
{
  CFNumberRef v6;
  void *exception;
  uint64_t valuePtr;

  if (cf)
    CFRetain(cf);
  *a1 = cf;
  valuePtr = *a3;
  v6 = CFNumberCreate(0, kCFNumberLongType, &valuePtr);
  a1[1] = v6;
  if (!v6)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD3154](exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  return a1;
}

void sub_19C3AEA5C(_Unwind_Exception *a1)
{
  uint64_t v1;
  const void *v3;

  v3 = *(const void **)(v1 + 8);
  if (v3)
    CFRelease(v3);
  sub_19C2E4838((const void **)v1);
  _Unwind_Resume(a1);
}

unint64_t sub_19C3AEA9C(CFDictionaryRef *a1, CFStringRef *a2)
{
  const __CFNumber *v4;
  const __CFNumber *v5;
  unint64_t v6;
  char v7;
  char v8;
  const __CFString *v9;
  CFTypeID TypeID;
  _QWORD *v11;
  void **v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  NSObject *v16;
  size_t v17;
  void **v18;
  const __CFNumber *Value;
  unint64_t v20;
  const void **v21;
  const void *v22;
  uint64_t v23;
  uint64_t v24;
  void **v25;
  uint64_t v26;
  void *exception;
  void *__dst[2];
  int64_t v30;
  void *__p[2];
  unsigned __int8 v32;
  _QWORD v33[2];
  _QWORD v34[3];
  _QWORD v35[3];
  uint64_t v36;
  unint64_t v37;
  void *v38;
  char v39;
  unint64_t v40;
  int v41;
  uint64_t v42;
  uint8_t buf[4];
  void **v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v4 = (const __CFNumber *)CFPreferencesCopyAppValue(*a2, CFSTR("com.apple.LanguageModeling"));
  if (v4)
  {
    v5 = v4;
    v6 = sub_19C3AF1DC(v4);
    v8 = v7;
    CFRelease(v5);
    if (v8)
    {
      sub_19C2B4F08((uint64_t)v33);
      v9 = *a2;
      if (!v9 || (TypeID = CFStringGetTypeID(), TypeID != CFGetTypeID(v9)))
      {
        exception = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1A1AD3154](exception, "Could not convert");
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
      }
      sub_19C297E60(__p, v9);
      v11 = sub_19C2A1B24(v34, (uint64_t)"Overriding configuration key='", 30);
      if ((v32 & 0x80u) == 0)
        v12 = __p;
      else
        v12 = (void **)__p[0];
      if ((v32 & 0x80u) == 0)
        v13 = v32;
      else
        v13 = (uint64_t)__p[1];
      v14 = sub_19C2A1B24(v11, (uint64_t)v12, v13);
      sub_19C2A1B24(v14, (uint64_t)"' with user preferences value='", 31);
      v15 = (_QWORD *)std::ostream::operator<<();
      sub_19C2A1B24(v15, (uint64_t)"'", 1);
      if (qword_1EDB97228 != -1)
        dispatch_once(&qword_1EDB97228, &unk_1E3D3ABD0);
      v16 = qword_1EDB97220;
      if (!os_log_type_enabled((os_log_t)qword_1EDB97220, OS_LOG_TYPE_DEFAULT))
        goto LABEL_37;
      if ((v41 & 0x10) != 0)
      {
        v20 = v40;
        if (v40 < v37)
        {
          v40 = v37;
          v20 = v37;
        }
        v21 = (const void **)&v36;
      }
      else
      {
        if ((v41 & 8) == 0)
        {
          v17 = 0;
          HIBYTE(v30) = 0;
          v18 = __dst;
          goto LABEL_34;
        }
        v21 = (const void **)v35;
        v20 = v35[2];
      }
      v22 = *v21;
      v17 = v20 - (_QWORD)*v21;
      if (v17 >= 0x7FFFFFFFFFFFFFF8)
        sub_19C2A1A54();
      if (v17 >= 0x17)
      {
        v23 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v17 | 7) != 0x17)
          v23 = v17 | 7;
        v24 = v23 + 1;
        v18 = (void **)operator new(v23 + 1);
        __dst[1] = (void *)v17;
        v30 = v24 | 0x8000000000000000;
        __dst[0] = v18;
      }
      else
      {
        HIBYTE(v30) = v20 - *(_BYTE *)v21;
        v18 = __dst;
        if (!v17)
        {
LABEL_34:
          *((_BYTE *)v18 + v17) = 0;
          v25 = __dst;
          if (v30 < 0)
            v25 = (void **)__dst[0];
          *(_DWORD *)buf = 136315138;
          v44 = v25;
          _os_log_impl(&dword_19C291000, v16, OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);
          if (SHIBYTE(v30) < 0)
          {
            operator delete(__dst[0]);
            if (((char)v32 & 0x80000000) == 0)
              goto LABEL_39;
            goto LABEL_38;
          }
LABEL_37:
          if (((char)v32 & 0x80000000) == 0)
          {
LABEL_39:
            v33[0] = *MEMORY[0x1E0DE4F50];
            v26 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
            *(_QWORD *)((char *)v33 + *(_QWORD *)(v33[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
            v34[0] = v26;
            v34[1] = MEMORY[0x1E0DE4FB8] + 16;
            if (v39 < 0)
              operator delete(v38);
            std::streambuf::~streambuf();
            std::iostream::~basic_iostream();
            MEMORY[0x1A1AD34CC](&v42);
            return v6;
          }
LABEL_38:
          operator delete(__p[0]);
          goto LABEL_39;
        }
      }
      memmove(v18, v22, v17);
      goto LABEL_34;
    }
  }
  if (!*a1)
  {
    __cxa_allocate_exception(0x10uLL);
    sub_19C3AF258();
  }
  if (*a2 && (Value = (const __CFNumber *)CFDictionaryGetValue(*a1, *a2)) != 0)
    return sub_19C3AF1DC(Value);
  else
    return 0;
}

void sub_19C3AEE70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0)
    operator delete(__p);
  sub_19C2B5034((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t sub_19C3AEEE4(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  void *exception;
  __n128 v7;
  std::string __dst;
  std::string v9;
  _BYTE v10[16];
  _QWORD v11[33];

  if ((unint64_t)(a2 + 4) > a1[1])
  {
    sub_19C2B4F08((uint64_t)v10);
    sub_19C2A1B24(v11, (uint64_t)"(file_size=", 11);
    v3 = (_QWORD *)std::ostream::operator<<();
    sub_19C2A1B24(v3, (uint64_t)", offset=", 9);
    v4 = (_QWORD *)std::ostream::operator<<();
    sub_19C2A1B24(v4, (uint64_t)", object_size=", 14);
    v5 = (_QWORD *)std::ostream::operator<<();
    sub_19C2A1B24(v5, (uint64_t)")", 1);
    exception = __cxa_allocate_exception(0x10uLL);
    sub_19C351068(&__dst, (uint64_t)v10);
    v7 = sub_19C337C34(&v9, "attempted to read beyond the end of the mapped file ", &__dst);
    MEMORY[0x1A1AD3160](exception, &v9, v7);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  return *a1 + a2;
}

void sub_19C3AEFF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  void *v22;
  int v23;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v23 & 1) == 0)
    {
LABEL_8:
      sub_19C2B5034((uint64_t)&a22);
      _Unwind_Resume(a1);
    }
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

unint64_t sub_19C3AF060(uint64_t *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t result;
  BOOL v8;
  _QWORD *v9;
  _QWORD *v10;
  void *exception;
  __n128 v12;
  std::string __dst;
  std::string v14;
  _BYTE v15[16];
  _QWORD v16[33];

  v3 = a1[1];
  v4 = v3 - a2;
  if (v3 <= a2)
  {
    sub_19C2B4F08((uint64_t)v15);
    sub_19C2A1B24(v16, (uint64_t)"(file_size=", 11);
    v9 = (_QWORD *)std::ostream::operator<<();
    sub_19C2A1B24(v9, (uint64_t)", offset=", 9);
    v10 = (_QWORD *)std::ostream::operator<<();
    sub_19C2A1B24(v10, (uint64_t)")", 1);
    exception = __cxa_allocate_exception(0x10uLL);
    sub_19C351068(&__dst, (uint64_t)v15);
    v12 = sub_19C337C34(&v14, "attempted to read beyond the end of the mapped file ", &__dst);
    MEMORY[0x1A1AD3160](exception, &v14, v12);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v5 = *a1;
  v6 = v4 >> 2;
  if (v6 >= a3)
    result = a3;
  else
    result = v6;
  if (result)
    v8 = v5 == 0;
  else
    v8 = 0;
  if (v8)
    sub_19C366A00();
  return result;
}

void sub_19C3AF16C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  void *v22;
  int v23;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v23 & 1) == 0)
    {
LABEL_8:
      sub_19C2B5034((uint64_t)&a22);
      _Unwind_Resume(a1);
    }
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

unint64_t sub_19C3AF1DC(const __CFNumber *a1)
{
  CFTypeID TypeID;
  CFTypeID v4;

  TypeID = CFNumberGetTypeID();
  if (TypeID == CFGetTypeID(a1))
    return sub_19C328290(a1);
  v4 = CFBooleanGetTypeID();
  if (v4 == CFGetTypeID(a1))
    return CFBooleanGetValue(a1);
  else
    return 0;
}

void sub_19C3AF258()
{
  JUMPOUT(0x1A1AD3154);
}

uint64_t sub_19C3AF264(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  int *v7;
  int v8;
  int v9;
  int v10;
  unsigned int v11;
  int v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  NSObject *v17;
  void **v18;
  void *__p[2];
  char v20;
  uint64_t v21[2];
  uint8_t buf[4];
  void **v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v21[0] = (uint64_t)a2;
  v21[1] = a3;
  v3 = *(unsigned int *)(a1 + 44);
  v4 = 0;
  if (a3)
  {
    v5 = &a2[a3];
    v6 = *(_QWORD *)(a1 + 96);
    while (v3 > v4)
    {
      v7 = (int *)(*(_QWORD *)(a1 + 80) + 12 * v4);
      v9 = *v7;
      v8 = v7[1];
      v10 = v9 + v8 - 1;
      if (v8 > v10)
        goto LABEL_20;
      v11 = *a2;
      while (1)
      {
        v12 = v10 + v8;
        if (v10 + v8 < 0 != __OFADD__(v10, v8))
          v13 = v12 + 1;
        else
          v13 = v10 + v8;
        v14 = (v13 >> 1);
        if (*(_DWORD *)(a1 + 48) <= v14)
          __assert_rtn("getEdge", "Network.h", 203, "edgeIdx < getNrOfEdges()");
        v15 = *(_DWORD *)(v6 + 16 * v14 + 8);
        if (v15 == v11)
          break;
        if (v15 <= v11)
        {
          v8 = v14 + 1;
          if ((int)v14 >= v10)
            goto LABEL_20;
        }
        else
        {
          v10 = v14 - 1;
          if (v8 >= (int)v14)
            goto LABEL_20;
        }
      }
      if (v12 <= -2)
      {
LABEL_20:
        if (qword_1EE41C430 != -1)
          dispatch_once(&qword_1EE41C430, &unk_1E3D3AFD8);
        v17 = qword_1EE41C428;
        if (os_log_type_enabled((os_log_t)qword_1EE41C428, OS_LOG_TYPE_ERROR))
        {
          sub_19C3A787C(__p, v21);
          if (v20 >= 0)
            v18 = __p;
          else
            v18 = (void **)__p[0];
          *(_DWORD *)buf = 136315138;
          v23 = v18;
          _os_log_error_impl(&dword_19C291000, v17, OS_LOG_TYPE_ERROR, "Failed to find node for prefix: [%s]", buf, 0xCu);
          if (v20 < 0)
            operator delete(__p[0]);
        }
        __assert_rtn("nodeForPrefix", "Network.cpp", 235, "false && \"Failed to find node for prefix\"");
      }
      v4 = *(unsigned int *)(v6 + 16 * v14 + 4);
      if (++a2 == v5)
        goto LABEL_18;
    }
LABEL_30:
    __assert_rtn("getNode", "Network.h", 215, "n < getNrOfNodes()");
  }
LABEL_18:
  if (v3 <= v4)
    goto LABEL_30;
  return *(_QWORD *)(a1 + 80) + 12 * v4;
}

os_log_t sub_19C3AF47C()
{
  os_log_t result;

  result = os_log_create("com.apple.LanguageModeling", "FragmentModelFST");
  qword_1EE41C428 = (uint64_t)result;
  return result;
}

uint64_t sub_19C3AF4A8(uint64_t result, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;

  if (a3 >= 2)
  {
    v4 = (uint64_t)a4 - result;
    v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 2)
    {
      v6 = v4 >> 1;
      v7 = (v4 >> 1) | 1;
      v8 = (unsigned int *)(result + 4 * v7);
      v9 = v6 + 2;
      if (v6 + 2 >= a3)
      {
        v10 = *(_QWORD *)(a2 + 96);
        v11 = *(_QWORD *)(a2 + 176);
      }
      else
      {
        v10 = *(_QWORD *)(a2 + 96);
        v11 = *(_QWORD *)(a2 + 176);
        if (*(float *)(v11 + 4 * *(unsigned int *)(v10 + 16 * *v8 + 8)) > *(float *)(v11
                                                                                        + 4
                                                                                        * *(unsigned int *)(v10 + 16 * v8[1] + 8)))
        {
          ++v8;
          v7 = v9;
        }
      }
      v12 = *v8;
      v13 = *a4;
      v14 = v10 + 16 * v13;
      v16 = *(_DWORD *)(v14 + 8);
      v15 = (unsigned int *)(v14 + 8);
      if (*(float *)(v11 + 4 * *(unsigned int *)(v10 + 16 * v12 + 8)) <= *(float *)(v11 + 4 * v16))
      {
        do
        {
          *a4 = v12;
          a4 = v8;
          if (v5 < v7)
            break;
          v17 = 2 * v7;
          v7 = (2 * v7) | 1;
          v8 = (unsigned int *)(result + 4 * v7);
          v18 = v17 + 2;
          if (v18 < a3
            && *(float *)(v11 + 4 * *(unsigned int *)(v10 + 16 * *v8 + 8)) > *(float *)(v11
                                                                                          + 4
                                                                                          * *(unsigned int *)(v10 + 16 * v8[1] + 8)))
          {
            ++v8;
            v7 = v18;
          }
          v12 = *v8;
        }
        while (*(float *)(v11 + 4 * *(unsigned int *)(v10 + 16 * v12 + 8)) <= *(float *)(v11 + 4 * *v15));
        *a4 = v13;
      }
    }
  }
  return result;
}

void sub_19C3AF5DC(_QWORD *a1, unint64_t a2)
{
  uint64_t v3;
  char *v4;
  unint64_t v5;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  int64_t v13;
  double v14;
  __int128 *v15;
  unint64_t v16;
  uint64_t v17;
  double v18;
  __int128 *v19;
  __int128 *v20;
  __int128 *i;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  char *v26;
  unint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  __int128 *v36;
  __int128 v37;
  uint64_t v38;
  _BOOL4 v39;
  uint64_t v40;
  __int128 v41;
  _QWORD *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  _QWORD *v46;
  char **v47;
  char **v48;
  _BYTE *v49;
  _BYTE *v50;
  int64_t v51;
  char *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  void *v59;
  void **v60;
  char *v61;
  unint64_t v62;
  char *v63;
  __int128 v64;
  _BYTE *v65;
  _BYTE *v66;
  int64_t v67;
  char *v68;
  char *v69;
  char *v70;
  char *v71;
  _OWORD *v72;
  char *v73;
  char *v74;
  void *v75;
  int64_t v76;
  __int128 v78;
  __int128 v79;
  char *v80;
  char *v81;

  v3 = a1[2];
  v4 = (char *)a1[3];
  v5 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v4[-v3] >> 3);
  if (v5 >= a1[1])
  {
    if ((char *)v3 == v4)
      __assert_rtn("worst", "PriorityQueue.h", 55, "!m_predictions.empty()");
    v14 = *(double *)(a2 + 8);
    if (v14 >= *(double *)(v3 + 8))
    {
      v15 = (__int128 *)a1[2];
      do
      {
        v16 = v5 >> 1;
        v17 = (uint64_t)v15 + 40 * (v5 >> 1);
        v18 = *(double *)(v17 + 8);
        v19 = (__int128 *)(v17 + 40);
        v5 += ~(v5 >> 1);
        if (v14 < v18)
          v5 = v16;
        else
          v15 = v19;
      }
      while (v5);
      v20 = (__int128 *)(v3 + 40);
      if ((__int128 *)(v3 + 40) != v15)
      {
        for (i = (__int128 *)(v3 + 40); ; i = (__int128 *)((char *)i + 40))
        {
          v22 = *(__int128 *)((char *)i - 40);
          v23 = *((_QWORD *)i - 1);
          v24 = i[1];
          *(__int128 *)((char *)i - 40) = *i;
          v25 = *(__int128 *)((char *)i - 24);
          *((_QWORD *)i - 3) = 0;
          *((_QWORD *)i - 2) = 0;
          *(__int128 *)((char *)i - 24) = v24;
          *((_QWORD *)i - 1) = *((_QWORD *)i + 4);
          *i = v22;
          i[1] = v25;
          *((_QWORD *)i + 4) = v23;
          if ((__int128 *)((char *)i + 40) == v15)
            break;
          if (i == v20)
            v20 = (__int128 *)((char *)i + 40);
        }
        if (i != v20)
        {
          v36 = v20;
          while (1)
          {
            v37 = i[1];
            v78 = *i;
            v38 = *((_QWORD *)i + 4);
            *((_QWORD *)i + 3) = 0;
            *((_QWORD *)i + 4) = 0;
            *((_QWORD *)i + 2) = 0;
            *i = *v36;
            i[1] = v36[1];
            *((_QWORD *)i + 4) = *((_QWORD *)v36 + 4);
            *v36 = v78;
            v36[1] = v37;
            *((_QWORD *)v36 + 4) = v38;
            i = (__int128 *)((char *)i + 40);
            v36 = (__int128 *)((char *)v36 + 40);
            v39 = i == v20;
            if (v36 == v15)
            {
              if (i == v20)
                break;
              v36 = (__int128 *)((char *)v20 + 40);
              while (1)
              {
                v79 = *i;
                v40 = *((_QWORD *)i + 4);
                v41 = i[1];
                *((_QWORD *)i + 2) = 0;
                *((_QWORD *)i + 3) = 0;
                *((_QWORD *)i + 4) = 0;
                *i = *v20;
                i[1] = v20[1];
                *((_QWORD *)i + 4) = *((_QWORD *)v20 + 4);
                *v20 = v79;
                v20[1] = v41;
                *((_QWORD *)v20 + 4) = v40;
                i = (__int128 *)((char *)i + 40);
                v39 = i == v20;
                if (v36 != v15)
                  break;
                if (i == v20)
                  goto LABEL_47;
              }
            }
            if (v39)
              v20 = v36;
          }
        }
      }
LABEL_47:
      *(__int128 *)((char *)v15 - 40) = *(_OWORD *)a2;
      if ((__int128 *)((char *)v15 - 40) != (__int128 *)a2)
      {
        v42 = (_QWORD *)v15 - 3;
        v43 = *(char **)(a2 + 16);
        v44 = *(char **)(a2 + 24);
LABEL_67:
        sub_19C35F928(v42, v43, v44, (v44 - v43) >> 2);
      }
    }
  }
  else
  {
    if (v4 == (char *)v3)
    {
      v13 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v4[-v3] >> 3);
    }
    else
    {
      v7 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v4[-v3] >> 3);
      v8 = a1[2];
      do
      {
        v9 = v7 >> 1;
        v10 = v8 + 40 * (v7 >> 1);
        v11 = *(double *)(v10 + 8);
        v12 = v10 + 40;
        v7 += ~(v7 >> 1);
        if (*(double *)(a2 + 8) < v11)
          v7 = v9;
        else
          v8 = v12;
      }
      while (v7);
      v13 = 0xCCCCCCCCCCCCCCCDLL * ((v8 - v3) >> 3);
    }
    v26 = (char *)(v3 + 40 * v13);
    v27 = a1[4];
    if ((unint64_t)v4 >= v27)
    {
      v32 = v5 + 1;
      if (v32 > 0x666666666666666)
        sub_19C2A18E8();
      v33 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v27 - v3) >> 3);
      if (2 * v33 > v32)
        v32 = 2 * v33;
      if (v33 >= 0x333333333333333)
        v34 = 0x666666666666666;
      else
        v34 = v32;
      if (v34)
      {
        if (v34 > 0x666666666666666)
          sub_19C2A143C();
        v35 = (char *)operator new(40 * v34);
      }
      else
      {
        v35 = 0;
      }
      v54 = &v35[40 * v13];
      v81 = &v35[40 * v34];
      if (v13 == v34)
      {
        if (v13 < 1)
        {
          if (v13)
            v62 = 2 * v13;
          else
            v62 = 1;
          if (v62 > 0x666666666666666)
            sub_19C2A143C();
          v63 = (char *)operator new(40 * v62);
          v54 = &v63[40 * (v62 >> 2)];
          v81 = &v63[40 * v62];
          if (v35)
            operator delete(v35);
        }
        else
        {
          v54 -= 40 * ((v13 + 1) >> 1);
        }
      }
      v64 = *(_OWORD *)a2;
      *((_QWORD *)v54 + 2) = 0;
      *(_OWORD *)v54 = v64;
      *((_QWORD *)v54 + 3) = 0;
      *((_QWORD *)v54 + 4) = 0;
      v66 = *(_BYTE **)(a2 + 16);
      v65 = *(_BYTE **)(a2 + 24);
      v67 = v65 - v66;
      if (v65 != v66)
      {
        if (v67 < 0)
          sub_19C2A18E8();
        v68 = (char *)operator new(v65 - v66);
        *((_QWORD *)v54 + 2) = v68;
        *((_QWORD *)v54 + 3) = v68;
        v69 = &v68[4 * (v67 >> 2)];
        *((_QWORD *)v54 + 4) = v69;
        memcpy(v68, v66, v67);
        *((_QWORD *)v54 + 3) = v69;
      }
      v70 = v54 + 40;
      v80 = v54 + 40;
      v71 = (char *)a1[2];
      if (v71 != v26)
      {
        v72 = v26;
        do
        {
          *(_OWORD *)(v54 - 40) = *(_OWORD *)((char *)v72 - 40);
          *((_QWORD *)v54 - 2) = 0;
          *((_QWORD *)v54 - 1) = 0;
          *((_QWORD *)v54 - 3) = 0;
          *(_OWORD *)(v54 - 24) = *(_OWORD *)((char *)v72 - 24);
          *((_QWORD *)v54 - 1) = *((_QWORD *)v72 - 1);
          v54 -= 40;
          *((_QWORD *)v72 - 3) = 0;
          *((_QWORD *)v72 - 2) = 0;
          *((_QWORD *)v72 - 1) = 0;
          v72 = (_OWORD *)((char *)v72 - 40);
        }
        while (v72 != (_OWORD *)v71);
        v70 = v80;
      }
      v73 = (char *)a1[3];
      if (v73 != v26)
      {
        do
        {
          *(_OWORD *)v70 = *(_OWORD *)v26;
          *((_QWORD *)v70 + 3) = 0;
          *((_QWORD *)v70 + 4) = 0;
          *((_QWORD *)v70 + 2) = 0;
          *((_OWORD *)v70 + 1) = *((_OWORD *)v26 + 1);
          *((_QWORD *)v70 + 4) = *((_QWORD *)v26 + 4);
          *((_QWORD *)v26 + 2) = 0;
          *((_QWORD *)v26 + 3) = 0;
          *((_QWORD *)v26 + 4) = 0;
          v70 += 40;
          v26 += 40;
        }
        while (v26 != v73);
        v26 = (char *)a1[3];
      }
      v74 = (char *)a1[2];
      a1[2] = v54;
      a1[3] = v70;
      a1[4] = v81;
      if (v26 == v74)
      {
        if (!v26)
          return;
      }
      else
      {
        do
        {
          v75 = (void *)*((_QWORD *)v26 - 3);
          if (v75)
          {
            *((_QWORD *)v26 - 2) = v75;
            operator delete(v75);
          }
          v26 -= 40;
        }
        while (v26 != v74);
        v26 = v74;
        if (!v74)
          return;
      }
      operator delete(v26);
      return;
    }
    if (v26 == v4)
    {
      *(_OWORD *)v4 = *(_OWORD *)a2;
      v45 = v3 + 40 * v13;
      *(_QWORD *)(v45 + 16) = 0;
      v46 = (_QWORD *)(v45 + 16);
      v46[1] = 0;
      v47 = (char **)(v46 + 1);
      v46[2] = 0;
      v48 = (char **)(v46 + 2);
      v50 = *(_BYTE **)(a2 + 16);
      v49 = *(_BYTE **)(a2 + 24);
      v51 = v49 - v50;
      if (v49 != v50)
      {
        if (v51 < 0)
          sub_19C2A18E8();
        v52 = (char *)operator new(v49 - v50);
        *v46 = v52;
        *v47 = v52;
        v53 = &v52[4 * (v51 >> 2)];
        *v48 = v53;
        memcpy(v52, v50, v51);
        *v47 = v53;
      }
      a1[3] = v4 + 40;
    }
    else
    {
      v28 = v26 + 40;
      v29 = v4 - 40;
      v76 = v13;
      if ((unint64_t)v4 < 0x28)
      {
        v31 = a1[3];
      }
      else
      {
        v30 = v4 - 40;
        v31 = a1[3];
        do
        {
          *(_OWORD *)v31 = *(_OWORD *)v30;
          *(_QWORD *)(v31 + 24) = 0;
          *(_QWORD *)(v31 + 32) = 0;
          *(_QWORD *)(v31 + 16) = 0;
          *(_OWORD *)(v31 + 16) = *((_OWORD *)v30 + 1);
          *(_QWORD *)(v31 + 32) = *((_QWORD *)v30 + 4);
          *((_QWORD *)v30 + 2) = 0;
          *((_QWORD *)v30 + 3) = 0;
          *((_QWORD *)v30 + 4) = 0;
          v31 += 40;
          v30 += 40;
        }
        while (v30 < v4);
      }
      a1[3] = v31;
      if (v4 != v28)
      {
        v55 = 0;
        v56 = -8 * ((v4 - v28) >> 3);
        do
        {
          v57 = &v29[v55];
          v58 = &v4[v55];
          v60 = (void **)&v4[v55 - 24];
          v59 = *v60;
          *(_OWORD *)&v4[v55 - 40] = *(_OWORD *)&v29[v55 - 40];
          if (v59)
          {
            *((_QWORD *)v58 - 2) = v59;
            operator delete(v59);
            *v60 = 0;
            *(_QWORD *)&v4[v55 - 16] = 0;
            *(_QWORD *)&v4[v55 - 8] = 0;
          }
          *(_OWORD *)v60 = *(_OWORD *)(v57 - 24);
          *((_QWORD *)v58 - 1) = *((_QWORD *)v57 - 1);
          *((_QWORD *)v57 - 3) = 0;
          *((_QWORD *)v57 - 2) = 0;
          *((_QWORD *)v57 - 1) = 0;
          v55 -= 40;
        }
        while (v56 != v55);
      }
      v61 = (char *)a2;
      if ((unint64_t)v26 <= a2)
        v61 = (char *)(a2 + 40 * (a1[3] > a2));
      *(_OWORD *)v26 = *(_OWORD *)v61;
      if (v26 != v61)
      {
        v42 = (_QWORD *)(v3 + 40 * v76 + 16);
        v43 = (char *)*((_QWORD *)v61 + 2);
        v44 = (char *)*((_QWORD *)v61 + 3);
        goto LABEL_67;
      }
    }
  }
}

void sub_19C3AFC84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_19C36B5C4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19C3AFCD0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  char v23;
  char v24;
  int v25;
  int v26;
  unsigned int v27;
  int *v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  char *v33;
  _BOOL4 v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned __int8 v50;
  CFIndex Length;
  uint64_t v52;
  void *v53;
  void *v54;
  uint64_t v55;
  void *v56;
  void *v57;
  const __CFArray *v58;
  const __CFArray *v59;
  CFIndex Count;
  CFIndex v61;
  const void *ValueAtIndex;
  void *v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  int64_t v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  BOOL v87;
  char v90;
  _QWORD *v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  BOOL v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  char *v103;
  char *v104;
  char *v105;
  __int128 v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char v113;
  const __CFString *v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  int *v119;
  uint64_t v120;
  uint64_t *v121;
  uint64_t v122;
  unint64_t *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  BOOL v127;
  int v129;
  BOOL v130;
  const __CFString *Value;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  unint64_t v137;
  char *v138;
  unint64_t v139;
  void **v140;
  void **v141;
  char v142;
  uint64_t v143;
  uint64_t v144;
  void **v145;
  int v146;
  void **v147;
  int v148;
  int v149;
  const __CFString *v150;
  CFStringRef v151;
  uint64_t v152;
  char *v153;
  unint64_t v154;
  char *v155;
  unint64_t v156;
  void **v157;
  unint64_t v158;
  void **v159;
  __int128 *v160;
  _OWORD *v161;
  unint64_t v162;
  __int128 v163;
  unint64_t v164;
  __int128 *v165;
  _OWORD *v166;
  unint64_t v167;
  __int128 v168;
  uint64_t v169;
  uint64_t v170;
  char v171;
  char v172;
  char v173;
  unint64_t v174;
  BOOL v175;
  CFStringRef theString1;
  const __CFString *theString1a;
  CFStringRef theString1b;
  const __CFString *theString;
  CFStringRef theStringa;
  CFStringRef theStringb;
  _QWORD *v183;
  _QWORD *v184;
  char v185;
  CFIndex v186;
  char v187;
  _QWORD v188[2];
  uint64_t (*v189)(uint64_t, uint64_t, uint64_t, int, char *);
  void *v190;
  uint64_t *v191;
  uint64_t *v192;
  uint64_t v193;
  const __CFString *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t *v198;
  uint64_t v199;
  char v200;
  uint64_t v201;
  uint64_t *v202;
  uint64_t v203;
  __n128 (*v204)(uint64_t, uint64_t);
  uint64_t (*v205)();
  __int128 v206;
  char v207;
  void **v208;
  void **v209;
  int64_t v210;
  void *v211;
  void *v212;
  __int128 v213;
  uint64_t v214;
  uint64_t v215;

  v215 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 224);
  v3 = *(_QWORD *)(a1 + 232);
  if (v4 == v3)
  {
    v6 = (_QWORD *)(a1 + 200);
    v5 = *(_QWORD *)(a1 + 200);
    v9 = (_QWORD *)(a1 + 208);
    v8 = *(_QWORD *)(a1 + 208);
    if (v5 != v8)
    {
      v11 = 0;
      goto LABEL_18;
    }
    goto LABEL_329;
  }
  v6 = (_QWORD *)(a1 + 200);
  v5 = *(_QWORD *)(a1 + 200);
  v7 = *(_QWORD *)(a1 + 248);
  v9 = (_QWORD *)(a1 + 208);
  v8 = *(_QWORD *)(a1 + 208);
  if ((v7 & 0x8000000000000000) != 0)
  {
    if (v5 != v8)
LABEL_328:
      __assert_rtn("flushAccumulatedTokens", "LMStreamTokenizer.cpp", 274, "externalTokenIndexInBounds");
LABEL_329:
    __assert_rtn("flushAccumulatedTokens", "LMStreamTokenizer.cpp", 273, "!m_internalTokens.empty()");
  }
  if (v5 == v8)
    goto LABEL_329;
  if (v7 >= (v3 - v4) >> 5)
    goto LABEL_328;
  v10 = 0;
  v11 = (v8 - v5) >> 5;
  if (v11 <= 1)
    v12 = 1;
  else
    v12 = (v8 - v5) >> 5;
  v13 = v4 + 32 * v7;
  v14 = (_QWORD *)(v13 + 8);
  v15 = (_QWORD *)(v13 + 16);
  v16 = (_QWORD *)(v5 + 16);
  while (v11 != v10)
  {
    v17 = *v15 + *v14;
    v18 = *(v16 - 1);
    if ((v18 >= v17 || *v16 + v18 > v17) && (v18 != *v14 || *v16 != *v15))
    {
      v11 = v10;
      break;
    }
    ++v10;
    v16 += 4;
    if (v12 == v10)
      __assert_rtn("flushAccumulatedTokens", "LMStreamTokenizer.cpp", 290, "internalTokenIndex < m_internalTokens.size()");
  }
LABEL_18:
  v19 = *(_QWORD *)(v5 + 32 * v11 + 8);
  v20 = *(_QWORD *)(v8 - 16) + *(_QWORD *)(v8 - 24);
  if (v19 < v20)
  {
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v25 = 0;
    v26 = 0;
    v27 = 0;
    v28 = (int *)(*(_QWORD *)(a1 + 256) + 4 * v19);
    v29 = v20 - v19;
    while (1)
    {
      v30 = v26;
      v31 = *v28++;
      v26 = 0;
      switch(v31)
      {
        case 1:
          if (v25 == 2)
            v32 = 3;
          else
            v32 = v25;
          v26 = 0;
          v22 = 1;
          if (v25)
            v25 = v32;
          else
            v25 = 1;
          goto LABEL_34;
        case 2:
          v26 = 0;
          v23 = 1;
          if ((v22 & 1) == 0)
            goto LABEL_20;
          goto LABEL_34;
        case 4:
          v26 = v30 + 1;
          if ((v30 + 1) >= 3)
            v25 = 3;
          goto LABEL_32;
        case 5:
        case 7:
          v26 = 0;
          goto LABEL_32;
        case 6:
          v26 = 0;
          ++v27;
          if (v25 == 1)
            v25 = 2;
LABEL_32:
          v21 = 1;
          goto LABEL_33;
        case 11:
        case 12:
          v26 = 0;
          v24 = 1;
          if ((v22 & 1) == 0)
            goto LABEL_20;
          goto LABEL_34;
        default:
LABEL_33:
          if ((v22 & 1) == 0)
            goto LABEL_20;
LABEL_34:
          if ((v21 & 1) != 0 && (v23 & 1) != 0 && (v24 & 1) != 0 && v27 >= 2)
          {
            v23 = 1;
            v22 = 1;
            v21 = 1;
            goto LABEL_46;
          }
LABEL_20:
          if (!--v29)
            goto LABEL_46;
          break;
      }
    }
  }
  v27 = 0;
  v25 = 0;
  v23 = 0;
  v22 = 0;
  v21 = 0;
LABEL_46:
  v173 = v23;
  v201 = 0;
  v202 = &v201;
  v203 = 0x3802000000;
  v204 = sub_19C3B1134;
  v205 = nullsub_85;
  v206 = xmmword_19C46DE20;
  v197 = 0;
  v198 = &v197;
  v199 = 0x2000000000;
  v200 = 0;
  v172 = v22;
  v175 = 0;
  if ((v22 & 1) == 0)
  {
    LOBYTE(v33) = 0;
    goto LABEL_156;
  }
  LOBYTE(v33) = 0;
  if ((v21 & 1) == 0)
  {
LABEL_156:
    v74 = *v6;
    v75 = a2;
    v187 = (char)v33;
    if (v11 < (uint64_t)(*v9 - *v6) >> 5)
    {
      v76 = 0;
      theString1 = (CFStringRef)v202[5];
      theStringa = (CFStringRef)((char *)theString1 + v202[6]);
      v184 = v9;
      do
      {
        v81 = v202[5];
        if (v81 == -1)
          goto LABEL_203;
        v82 = v74 + 32 * v11;
        v83 = *(_QWORD *)(v82 + 8);
        v84 = v202[6];
        v85 = v84 + v81;
        v86 = *(_QWORD *)(v82 + 16) + v83;
        v87 = v83 < v81 || v85 <= v83;
        v90 = !v87 && v86 > v81 && v86 <= v85;
        if (!(v76 & 1 | ((v90 & 1) == 0)))
        {
          v91 = v6;
          v93 = *(char **)(a1 + 224);
          v92 = *(char **)(a1 + 232);
          v94 = v92 - v93;
          if (v92 == v93
            || ((v95 = *((_QWORD *)v92 - 3), v96 = *((_QWORD *)v92 - 2) + v95, (uint64_t)theString1 < v96)
              ? (v97 = v95 < (uint64_t)theStringa)
              : (v97 = 0),
                !v97))
          {
            v98 = *(_QWORD *)(a1 + 240);
            if ((unint64_t)v92 >= v98)
            {
              v99 = v94 >> 5;
              v100 = (v94 >> 5) + 1;
              if (v100 >> 59)
                sub_19C2A18E8();
              v101 = v98 - (_QWORD)v93;
              if (v101 >> 4 > v100)
                v100 = v101 >> 4;
              if ((unint64_t)v101 >= 0x7FFFFFFFFFFFFFE0)
                v102 = 0x7FFFFFFFFFFFFFFLL;
              else
                v102 = v100;
              if (v102)
              {
                if (v102 >> 59)
                  sub_19C2A143C();
                v103 = (char *)operator new(32 * v102);
              }
              else
              {
                v103 = 0;
              }
              v104 = &v103[32 * v99];
              *(_DWORD *)v104 = 0;
              *((_QWORD *)v104 + 1) = v81;
              *((_QWORD *)v104 + 2) = v84;
              *((_QWORD *)v104 + 3) = -1;
              v105 = v104;
              if (v92 != v93)
              {
                do
                {
                  v106 = *((_OWORD *)v92 - 1);
                  *((_OWORD *)v105 - 2) = *((_OWORD *)v92 - 2);
                  *((_OWORD *)v105 - 1) = v106;
                  v105 -= 32;
                  v92 -= 32;
                }
                while (v92 != v93);
                v92 = *(char **)(a1 + 224);
              }
              v33 = v104 + 32;
              *(_QWORD *)(a1 + 224) = v105;
              *(_QWORD *)(a1 + 232) = v104 + 32;
              *(_QWORD *)(a1 + 240) = &v103[32 * v102];
              v6 = v91;
              if (v92)
                operator delete(v92);
              v75 = a2;
            }
            else
            {
              *(_DWORD *)v92 = 0;
              *((_QWORD *)v92 + 1) = v81;
              *((_QWORD *)v92 + 2) = v84;
              v33 = v92 + 32;
              *((_QWORD *)v92 + 3) = -1;
              v6 = v91;
            }
            v9 = v184;
            *(_QWORD *)(a1 + 232) = v33;
            v76 = 1;
            LOBYTE(v33) = v187;
            if ((v90 & 1) != 0)
              goto LABEL_161;
            goto LABEL_203;
          }
          sub_19C3B11C0(a1, v96, (int64_t)theStringa - v96, 0);
          v6 = v91;
          v9 = v184;
          v76 = 1;
        }
        if ((v90 & 1) != 0)
          goto LABEL_161;
LABEL_203:
        v107 = *(_QWORD *)(a1 + 232);
        v108 = *(_QWORD *)(a1 + 200);
        if (*(_QWORD *)(a1 + 224) == v107)
        {
          v77 = *(_QWORD *)(v108 + 32 * v11 + 8);
        }
        else
        {
          v109 = *(_QWORD *)(v107 - 24);
          v110 = *(_QWORD *)(v107 - 16) + v109;
          v111 = v108 + 32 * v11;
          v77 = *(_QWORD *)(v111 + 8);
          if (v77 < v110)
          {
            v112 = *(_QWORD *)(v111 + 16);
            if (v112 + v77 <= v110)
              goto LABEL_161;
            if (v109 < v112 + v77)
            {
              v80 = 0;
              v79 = v77 - v110 + v112;
              v77 = v110;
              goto LABEL_160;
            }
          }
        }
        v78 = v108 + 32 * v11;
        v79 = *(_QWORD *)(v78 + 16);
        v80 = *(_DWORD *)v78;
LABEL_160:
        sub_19C3B11C0(a1, v77, v79, v80);
LABEL_161:
        ++v11;
        v74 = *v6;
      }
      while (v11 < (uint64_t)(*v9 - *v6) >> 5);
    }
    v113 = v172 | v173 ^ 1;
    v114 = (const __CFString *)*MEMORY[0x1E0C9B088];
    v185 = v113;
    theStringb = (CFStringRef)*MEMORY[0x1E0C9B088];
    while (1)
    {
      v116 = *(_QWORD *)(a1 + 248);
      v117 = *(_QWORD *)(a1 + 224);
      if (v116 >= ((*(_QWORD *)(a1 + 232) - v117) >> 5) - 1)
      {
        _Block_object_dispose(&v197, 8);
        _Block_object_dispose(&v201, 8);
        return;
      }
      v118 = v116 + 1;
      *(_QWORD *)(a1 + 248) = v118;
      v119 = (int *)(v117 + 32 * v118);
      v121 = (uint64_t *)(v119 + 2);
      v120 = *((_QWORD *)v119 + 1);
      v123 = (unint64_t *)(v119 + 4);
      v122 = *((_QWORD *)v119 + 2);
      v124 = *(_QWORD *)(a1 + 256);
      v125 = *(_QWORD *)(a1 + 264);
      v126 = v122 + v120 - 1;
      v127 = v122 + v120 < 1 || v125 == v124;
      if (!v127 && (v125 - v124) >> 2 > (unint64_t)v126)
      {
        if (v122 + v120 != 1)
        {
          while (*(_DWORD *)(v124 + 4 * v126) == 15)
          {
            v87 = v126-- <= 1;
            if (v87)
            {
              v126 = 0;
              break;
            }
          }
        }
        v129 = *(_DWORD *)(v124 + 4 * v126);
        if (v129 == 15)
          v129 = 0;
      }
      else
      {
        v129 = 0;
      }
      *((_QWORD *)v119 + 3) = *(_QWORD *)(a1 + 184) - *(_QWORD *)(a1 + 176);
      if (*v119)
        v130 = 0;
      else
        v130 = (v129 - 11) >= 3;
      if (v130)
      {
        if (v122 == v202[6] && v120 == v202[5])
        {
          if ((v33 & 1) != 0)
          {
            v115 = 64;
LABEL_210:
            *v119 = v115;
            goto LABEL_211;
          }
          if (*((_BYTE *)v198 + 24))
          {
            v115 = 5;
            goto LABEL_210;
          }
          if (v175)
          {
            v115 = 63;
            goto LABEL_210;
          }
        }
        else
        {
          if (v129 == 8 || v129 == 5)
          {
LABEL_242:
            v115 = 6;
            goto LABEL_210;
          }
          if ((v113 & 1) == 0)
          {
            Value = (const __CFString *)CFLocaleGetValue(*(CFLocaleRef *)a1, v114);
            if (CFStringCompare(Value, CFSTR("en"), 0)
              && CFStringCompare(Value, CFSTR("es"), 0)
              && CFStringCompare(Value, CFSTR("fr"), 0))
            {
              *v119 = 3;
              v75 = a2;
              LOBYTE(v33) = v187;
              goto LABEL_211;
            }
            theString1a = Value;
            v134 = *(_QWORD *)(a1 + 176);
            v135 = *v121;
            v136 = (char *)(v134 + *v121);
            v137 = *v123;
            v138 = (char *)(v134 + *v123 + *v121);
            v139 = v138 - v136;
            if ((unint64_t)(v138 - v136) > 0x7FFFFFFFFFFFFFF7)
              sub_19C2A1A54();
            if (v139 > 0x16)
            {
              v174 = *v123;
              v143 = (v139 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v139 | 7) != 0x17)
                v143 = v139 | 7;
              v144 = v143 + 1;
              v140 = (void **)operator new(v143 + 1);
              v209 = (void **)(v138 - v136);
              v210 = v144 | 0x8000000000000000;
              v208 = v140;
              v137 = v174;
              if (!v174)
                goto LABEL_268;
LABEL_259:
              if (v137 >= 0x20 && (unint64_t)v140 - v135 - v134 >= 0x20)
              {
                v164 = v137 & 0xFFFFFFFFFFFFFFE0;
                v141 = (void **)((char *)v140 + (v137 & 0xFFFFFFFFFFFFFFE0));
                v165 = (__int128 *)(v134 + v135 + 16);
                v166 = v140 + 2;
                v167 = v137 & 0xFFFFFFFFFFFFFFE0;
                do
                {
                  v168 = *v165;
                  *(v166 - 1) = *(v165 - 1);
                  *v166 = v168;
                  v165 += 2;
                  v166 += 2;
                  v167 -= 32;
                }
                while (v167);
                LOBYTE(v33) = v187;
                if (v137 == v164)
                {
                  v140 = (void **)((char *)v140 + (v137 & 0xFFFFFFFFFFFFFFE0));
                  goto LABEL_269;
                }
                v136 += v164;
              }
              else
              {
                v141 = v140;
                LOBYTE(v33) = v187;
              }
              v140 = v141;
              do
              {
                v142 = *v136++;
                *(_BYTE *)v140 = v142;
                v140 = (void **)((char *)v140 + 1);
              }
              while (v136 != v138);
            }
            else
            {
              HIBYTE(v210) = (_BYTE)v138 - (_BYTE)v136;
              v140 = (void **)&v208;
              if (v137)
                goto LABEL_259;
LABEL_268:
              LOBYTE(v33) = v187;
            }
LABEL_269:
            *(_BYTE *)v140 = 0;
            v145 = (void **)HIBYTE(v210);
            v146 = SHIBYTE(v210);
            if (v210 < 0)
              v145 = v209;
            v113 = v185;
            v114 = theStringb;
            if (v145 == (void **)1)
            {
              v147 = (void **)&v208;
              if (v210 < 0)
                v147 = v208;
              v148 = *(unsigned __int8 *)v147;
              if (v148 == 49)
              {
                *v119 = 130;
                if (v146 < 0)
                  goto LABEL_282;
                goto LABEL_283;
              }
              if (v148 == 48)
              {
                if (CFStringCompare(theString1a, CFSTR("fr"), 0))
                  v149 = 131;
                else
                  v149 = 130;
                *v119 = v149;
                if (v146 < 0)
LABEL_282:
                  operator delete(v208);
LABEL_283:
                v75 = a2;
                goto LABEL_211;
              }
            }
            *v119 = 131;
            if (v146 < 0)
              goto LABEL_282;
            goto LABEL_283;
          }
          switch(v129)
          {
            case 1:
              break;
            case 6:
              if (v122 == 1)
                goto LABEL_242;
              goto LABEL_249;
            case 7:
LABEL_249:
              v115 = 7;
              goto LABEL_210;
            case 10:
              v115 = 499;
              goto LABEL_210;
            default:
              v150 = (const __CFString *)CFLocaleGetValue(*(CFLocaleRef *)a1, v114);
              if (CFStringCompare(v150, CFSTR("ja"), 0) == kCFCompareEqualTo
                || CFStringCompare(v150, CFSTR("zh"), 0) == kCFCompareEqualTo)
              {
                break;
              }
              v151 = *(CFStringRef *)(a1 + 176);
              v152 = *v121;
              v153 = (char *)v151 + *v121;
              v154 = *v123;
              v155 = (char *)v151 + *v123 + *v121;
              v156 = v155 - v153;
              if ((unint64_t)(v155 - v153) > 0x7FFFFFFFFFFFFFF7)
                sub_19C2A1A54();
              if (v156 > 0x16)
              {
                theString1b = *(CFStringRef *)(a1 + 176);
                v169 = (v156 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v156 | 7) != 0x17)
                  v169 = v156 | 7;
                v170 = v169 + 1;
                v157 = (void **)operator new(v169 + 1);
                v209 = (void **)(v155 - v153);
                v210 = v170 | 0x8000000000000000;
                v208 = v157;
                v151 = theString1b;
                if (!v154)
                {
LABEL_306:
                  LOBYTE(v33) = v187;
                  goto LABEL_311;
                }
              }
              else
              {
                HIBYTE(v210) = (_BYTE)v155 - (_BYTE)v153;
                v157 = (void **)&v208;
                if (!v154)
                  goto LABEL_306;
              }
              if (v156 < 0x20 || (unint64_t)((char *)v157 - v153) < 0x20)
              {
                v159 = v157;
                LOBYTE(v33) = v187;
              }
              else
              {
                v158 = v156 & 0xFFFFFFFFFFFFFFE0;
                v159 = (void **)((char *)v157 + (v156 & 0xFFFFFFFFFFFFFFE0));
                v160 = (__int128 *)((char *)&v151->data + v152);
                v161 = v157 + 2;
                v162 = v156 & 0xFFFFFFFFFFFFFFE0;
                LOBYTE(v33) = v187;
                do
                {
                  v163 = *v160;
                  *(v161 - 1) = *(v160 - 1);
                  *v161 = v163;
                  v160 += 2;
                  v161 += 2;
                  v162 -= 32;
                }
                while (v162);
                if (v156 == v158)
                {
                  v157 = (void **)((char *)v157 + (v156 & 0xFFFFFFFFFFFFFFE0));
                  goto LABEL_311;
                }
                v153 += v158;
              }
              v157 = v159;
              do
              {
                v171 = *v153++;
                *(_BYTE *)v157 = v171;
                v157 = (void **)((char *)v157 + 1);
              }
              while (v153 != v155);
LABEL_311:
              *(_BYTE *)v157 = 0;
              *v119 = sub_19C3B2F0C((uint64_t)&v208);
              v75 = a2;
              v114 = theStringb;
              v113 = v185;
              if (SHIBYTE(v210) < 0)
                operator delete(v208);
              break;
          }
        }
      }
LABEL_211:
      (*(void (**)(uint64_t, uint64_t, unint64_t, _QWORD))(v75 + 16))(v75, *(_QWORD *)(a1 + 176) + *v121, *v123, *v119);
    }
  }
  if (v19 >= v20)
  {
    v34 = 0;
    LODWORD(v33) = 0;
  }
  else
  {
    LODWORD(v33) = 0;
    v34 = 0;
    while (1)
    {
      v35 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 176) + v19);
      if (v35 != 64 && v35 != 35)
        break;
      LODWORD(v33) = v35 == 64;
      v34 = v35 == 35;
      if (v20 == ++v19)
      {
        v19 = v20;
        break;
      }
    }
  }
  v36 = -1;
  v175 = v34;
  if (((v34 | v33) & 1) == 0 || *(_QWORD *)(a1 + 8))
  {
    v39 = v20;
    if (v27 < 2)
      goto LABEL_102;
  }
  else
  {
    if (v19 < v20)
    {
      v37 = v19;
      v38 = v19;
      while (1)
      {
        v40 = *(_DWORD *)(*(_QWORD *)(a1 + 256) + 4 * v38);
        if ((v40 - 1) >= 3)
        {
          if (v40 == 15)
            goto LABEL_62;
          v41 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 176) + v38);
          if (v41 == 95)
            v39 = v20;
          else
            v39 = v37;
          if (v41 != 95)
            goto LABEL_63;
        }
        v37 = v38 + 1;
LABEL_62:
        v39 = v20;
LABEL_63:
        ++v38;
        v20 = v39;
        if (v38 >= v39)
          goto LABEL_74;
      }
    }
    v39 = v20;
LABEL_74:
    if (v39 <= v19)
    {
      v36 = -1;
      if (v27 < 2)
        goto LABEL_102;
    }
    else
    {
      v36 = v19 - 1;
      *(_QWORD *)&v206 = v19 - 1;
      *((_QWORD *)&v206 + 1) = v39 - v19 + 1;
      if (v27 < 2)
        goto LABEL_102;
    }
  }
  v42 = v19;
  if (v39 > v19)
  {
    v42 = v19;
    while (*(_DWORD *)(*(_QWORD *)(a1 + 256) + 4 * v42) != 1)
    {
      if (v39 == ++v42)
        goto LABEL_102;
    }
  }
  v43 = v42;
  if (v42 < v39)
  {
    v43 = v42;
    while (*(_DWORD *)(*(_QWORD *)(a1 + 256) + 4 * v43) == 1)
    {
      if (v39 == ++v43)
        goto LABEL_102;
    }
  }
  v44 = v39 - 2;
  if (v43 < v39 - 2)
  {
    v45 = *(_QWORD *)(a1 + 256);
    if (*(_DWORD *)(v45 + 4 * v43) == 6 && *(_DWORD *)(v45 + 4 * v43 + 4) == 1)
    {
      v46 = v43 + 2;
      if (*(_DWORD *)(v45 + 4 * (v43 + 2)) == 6)
      {
        if (v46 < v44)
        {
          while (1)
          {
            v47 = v45 + 4 * v43;
            if (*(_DWORD *)(v47 + 12) != 1)
              break;
            if (*(_DWORD *)(v47 + 16) != 6)
            {
              v46 = v43 + 2;
              break;
            }
            v48 = v43 + 2;
            v49 = v43 + 4;
            v46 += 2;
            v43 += 2;
            if (v49 >= v44)
            {
              v46 = v48 + 2;
              break;
            }
          }
        }
        if (v46 >= v39 - 1 || *(_DWORD *)(v45 + 4 * v46 + 4) != 1)
        {
          *(_QWORD *)&v206 = v42;
          *((_QWORD *)&v206 + 1) = v46 - v42 + 1;
          v36 = v42;
        }
      }
    }
  }
LABEL_102:
  if (v36 != -1)
    goto LABEL_156;
  if (v25 != 3)
    goto LABEL_156;
  theString = CFStringCreateWithBytesNoCopy(0, (const UInt8 *)(*(_QWORD *)(a1 + 176) + v19), v39 - v19, *(_DWORD *)(a1 + 16), 0, (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
  if (!theString)
    goto LABEL_156;
  v50 = atomic_load((unsigned __int8 *)&qword_1EDB96F98);
  if ((v50 & 1) == 0 && __cxa_guard_acquire(&qword_1EDB96F98))
  {
    sub_19C3971D8();
    __cxa_guard_release(&qword_1EDB96F98);
  }
  v188[0] = MEMORY[0x1E0C809B0];
  v188[1] = 0x40000000;
  v189 = sub_19C3B1144;
  v190 = &unk_1E3D3B000;
  v193 = a1;
  v194 = theString;
  v195 = v19;
  v196 = v39;
  v191 = &v201;
  v192 = &v197;
  Length = CFStringGetLength(theString);
  std::mutex::lock((std::mutex *)&qword_1EDB96FA0);
  v52 = qword_1EDB96FE0;
  if (!qword_1EDB96FE0)
    goto LABEL_155;
  v183 = v9;
  v208 = 0;
  v209 = (void **)&v208;
  v210 = 0x2000000000;
  v53 = off_1EDB96F08;
  v211 = off_1EDB96F08;
  if (!off_1EDB96F08)
  {
    v212 = 0;
    if (qword_1EDB96EF8)
    {
      v54 = (void *)qword_1EDB96EF8;
    }
    else
    {
      v213 = xmmword_1E3D3AD08;
      v214 = 0;
      qword_1EDB96EF8 = _sl_dlopen();
      v54 = (void *)qword_1EDB96EF8;
      if (!qword_1EDB96EF8)
        goto LABEL_321;
      if (v212)
        free(v212);
    }
    v53 = dlsym(v54, "DDScannerScanStringWithRange");
    v209[3] = v53;
    off_1EDB96F08 = v53;
  }
  _Block_object_dispose(&v208, 8);
  if (!v53)
    goto LABEL_318;
  ((void (*)(uint64_t, const __CFString *, _QWORD, CFIndex))v53)(v52, theString, 0, Length);
  v55 = qword_1EDB96FE0;
  v208 = 0;
  v209 = (void **)&v208;
  v210 = 0x2000000000;
  v56 = off_1EDB96F18;
  v211 = off_1EDB96F18;
  if (!off_1EDB96F18)
  {
    v212 = 0;
    if (qword_1EDB96EF8)
    {
      v57 = (void *)qword_1EDB96EF8;
LABEL_121:
      v56 = dlsym(v57, "DDScannerCopyResultsWithOptions");
      v209[3] = v56;
      off_1EDB96F18 = v56;
      goto LABEL_122;
    }
    v213 = xmmword_1E3D3AD08;
    v214 = 0;
    qword_1EDB96EF8 = _sl_dlopen();
    v57 = (void *)qword_1EDB96EF8;
    if (qword_1EDB96EF8)
    {
      if (v212)
        free(v212);
      goto LABEL_121;
    }
LABEL_321:
    abort_report_np();
    goto LABEL_333;
  }
LABEL_122:
  _Block_object_dispose(&v208, 8);
  if (v56)
  {
    v58 = (const __CFArray *)((uint64_t (*)(uint64_t, uint64_t))v56)(v55, 1);
    v59 = v58;
    v207 = 0;
    if (v58)
    {
      Count = CFArrayGetCount(v58);
      v186 = Count - 1;
      if (Count >= 1)
      {
        v61 = 0;
        while (1)
        {
          ValueAtIndex = CFArrayGetValueAtIndex(v59, v61);
          v208 = 0;
          v209 = (void **)&v208;
          v210 = 0x2000000000;
          v63 = off_1EDB96F10;
          v211 = off_1EDB96F10;
          if (!off_1EDB96F10)
          {
            v212 = 0;
            if (qword_1EDB96EF8)
            {
              v64 = (void *)qword_1EDB96EF8;
            }
            else
            {
              v213 = xmmword_1E3D3AD08;
              v214 = 0;
              qword_1EDB96EF8 = _sl_dlopen();
              v64 = (void *)qword_1EDB96EF8;
              if (!qword_1EDB96EF8)
                goto LABEL_323;
              if (v212)
                free(v212);
            }
            v63 = dlsym(v64, "DDResultGetRangeForURLification");
            v209[3] = v63;
            off_1EDB96F10 = v63;
          }
          _Block_object_dispose(&v208, 8);
          if (!v63)
            break;
          v65 = ((uint64_t (*)(const void *))v63)(ValueAtIndex);
          v67 = v66;
          v208 = 0;
          v209 = (void **)&v208;
          v210 = 0x2000000000;
          v68 = off_1EDB96F00;
          v211 = off_1EDB96F00;
          if (!off_1EDB96F00)
          {
            v212 = 0;
            if (qword_1EDB96EF8)
            {
              v69 = (void *)qword_1EDB96EF8;
            }
            else
            {
              v213 = xmmword_1E3D3AD08;
              v214 = 0;
              qword_1EDB96EF8 = _sl_dlopen();
              v69 = (void *)qword_1EDB96EF8;
              if (!qword_1EDB96EF8)
                goto LABEL_323;
              if (v212)
                free(v212);
            }
            v68 = dlsym(v69, "DDResultGetCategory");
            v209[3] = v68;
            off_1EDB96F00 = v68;
          }
          _Block_object_dispose(&v208, 8);
          if (!v68)
            break;
          v70 = ((uint64_t (*)(const void *))v68)(ValueAtIndex);
          v189((uint64_t)v188, v65, v67, v70, &v207);
          if (!v207)
          {
            v127 = v186 == v61++;
            if (!v127)
              continue;
          }
          goto LABEL_145;
        }
LABEL_320:
        dlerror();
        abort_report_np();
        goto LABEL_333;
      }
LABEL_145:
      CFRelease(v59);
    }
    v71 = qword_1EDB96FE0;
    v208 = 0;
    v209 = (void **)&v208;
    v210 = 0x2000000000;
    v72 = off_1EDB96EE8;
    v211 = off_1EDB96EE8;
    if (!off_1EDB96EE8)
    {
      v212 = 0;
      if (qword_1EDB96EF8)
      {
        v73 = (void *)qword_1EDB96EF8;
      }
      else
      {
        v213 = xmmword_1E3D3AD08;
        v214 = 0;
        qword_1EDB96EF8 = _sl_dlopen();
        v73 = (void *)qword_1EDB96EF8;
        if (!qword_1EDB96EF8)
        {
LABEL_323:
          abort_report_np();
          goto LABEL_333;
        }
        if (v212)
          free(v212);
      }
      v72 = dlsym(v73, "DDScannerReset");
      v209[3] = v72;
      off_1EDB96EE8 = v72;
    }
    _Block_object_dispose(&v208, 8);
    if (!v72)
      goto LABEL_320;
    ((void (*)(uint64_t))v72)(v71);
    v9 = v183;
LABEL_155:
    std::mutex::unlock((std::mutex *)&qword_1EDB96FA0);
    CFRelease(theString);
    goto LABEL_156;
  }
LABEL_318:
  dlerror();
  abort_report_np();
LABEL_333:
  __break(1u);
}

void sub_19C3B1028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  __cxa_guard_abort(&qword_1EDB96F98);
  _Block_object_dispose(&a28, 8);
  _Block_object_dispose(&a32, 8);
  _Unwind_Resume(a1);
}

__n128 sub_19C3B1134(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  return result;
}

uint64_t sub_19C3B1144(uint64_t result, uint64_t a2, uint64_t a3, int a4, _BYTE *a5)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  if (a4 == 1)
  {
    v6 = (_QWORD *)result;
    result = sub_19C34E4B4(*(const __CFString **)(result + 56), a2, a3, (char *)(*(_QWORD *)(*(_QWORD *)(result + 48) + 176) + v6[8]), v6[9] - v6[8], *(_DWORD *)(*(_QWORD *)(result + 48) + 16));
    v7 = *(_QWORD *)(v6[4] + 8);
    *(_QWORD *)(v7 + 40) = result;
    *(_QWORD *)(v7 + 48) = v8;
    *(_QWORD *)(*(_QWORD *)(v6[4] + 8) + 40) += v6[8];
    *(_BYTE *)(*(_QWORD *)(v6[5] + 8) + 24) = 1;
    *a5 = 1;
  }
  return result;
}

void sub_19C3B11C0(uint64_t a1, uint64_t a2, int64_t a3, int a4)
{
  uint64_t v5;
  int *v8;
  int *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  __int128 v22;
  char *v23;
  unint64_t v24;
  char *v25;
  _DWORD *v26;
  unint64_t v27;
  char *v28;
  _QWORD *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  int v49;
  unint64_t v50;
  uint64_t v51;
  int v53;
  int v54;
  char *v55;
  uint64_t v56;
  char *v57;
  int64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  _BYTE *v63;
  char *v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  _OWORD *v68;
  char *v69;
  uint64_t v70;
  __int128 v71;
  int v72;
  char *v73;
  char *v74;
  BOOL v76;
  BOOL v77;
  uint64_t v79;
  char v80;
  uint64_t v81;
  int *v82;
  int v83;
  int v84;
  int64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  _BYTE *v90;
  int64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  _OWORD *v97;
  char *v98;
  uint64_t v99;
  __int128 v100;
  int v101;
  unint64_t v102;
  uint64_t v103;
  _OWORD *v104;
  char *v105;
  uint64_t v106;
  __int128 v107;
  int v108;
  char *v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  unint64_t v113;
  char *v114;
  char *v115;
  __int128 v116;
  char *v117;
  __int128 v118;
  UText *ut;
  UErrorCode status;
  void *__p;
  char *v122;
  unint64_t v123;

  v5 = a2;
  if (!a3)
  {
    v25 = *(char **)(a1 + 232);
    v24 = *(_QWORD *)(a1 + 240);
    if ((unint64_t)v25 >= v24)
    {
      v30 = *(char **)(a1 + 224);
      v31 = (v25 - v30) >> 5;
      v32 = v31 + 1;
      if ((unint64_t)(v31 + 1) >> 59)
        sub_19C2A18E8();
      v33 = v24 - (_QWORD)v30;
      if (v33 >> 4 > v32)
        v32 = v33 >> 4;
      if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFE0)
        v34 = 0x7FFFFFFFFFFFFFFLL;
      else
        v34 = v32;
      if (v34)
      {
        if (v34 >> 59)
          sub_19C2A143C();
        v35 = (char *)operator new(32 * v34);
      }
      else
      {
        v35 = 0;
      }
      v115 = &v35[32 * v31];
      *(_DWORD *)v115 = a4;
      *((_QWORD *)v115 + 1) = v5;
      *((_OWORD *)v115 + 1) = xmmword_19C46D660;
      v26 = v115 + 32;
      if (v25 != v30)
      {
        do
        {
          v116 = *((_OWORD *)v25 - 1);
          *((_OWORD *)v115 - 2) = *((_OWORD *)v25 - 2);
          *((_OWORD *)v115 - 1) = v116;
          v115 -= 32;
          v25 -= 32;
        }
        while (v25 != v30);
        v25 = *(char **)(a1 + 224);
      }
      *(_QWORD *)(a1 + 224) = v115;
      *(_QWORD *)(a1 + 232) = v26;
      *(_QWORD *)(a1 + 240) = &v35[32 * v34];
      if (v25)
        operator delete(v25);
    }
    else
    {
      *(_DWORD *)v25 = a4;
      *((_QWORD *)v25 + 1) = a2;
      *((_OWORD *)v25 + 1) = xmmword_19C46D660;
      v26 = v25 + 32;
    }
    *(_QWORD *)(a1 + 232) = v26;
    return;
  }
  __p = 0;
  v122 = 0;
  v123 = 0;
  status = U_ZERO_ERROR;
  ut = (UText *)(a1 + 32);
  utext_openUTF8((UText *)(a1 + 32), (const char *)(*(_QWORD *)(a1 + 176) + a2), a3, &status);
  if (status <= U_ZERO_ERROR)
  {
    ubrk_setUText();
    if (status >= U_ILLEGAL_ARGUMENT_ERROR)
    {
      v28 = *(char **)(a1 + 232);
      v27 = *(_QWORD *)(a1 + 240);
      if ((unint64_t)v28 >= v27)
      {
        v109 = *(char **)(a1 + 224);
        v110 = (v28 - v109) >> 5;
        v111 = v110 + 1;
        if ((unint64_t)(v110 + 1) >> 59)
          sub_19C2A18E8();
        v112 = v27 - (_QWORD)v109;
        if (v112 >> 4 > v111)
          v111 = v112 >> 4;
        if ((unint64_t)v112 >= 0x7FFFFFFFFFFFFFE0)
          v113 = 0x7FFFFFFFFFFFFFFLL;
        else
          v113 = v111;
        if (v113)
        {
          if (v113 >> 59)
            sub_19C2A143C();
          v114 = (char *)operator new(32 * v113);
        }
        else
        {
          v114 = 0;
        }
        v117 = &v114[32 * v110];
        *(_DWORD *)v117 = a4;
        *((_QWORD *)v117 + 1) = v5;
        *((_QWORD *)v117 + 2) = a3;
        *((_QWORD *)v117 + 3) = -1;
        v29 = v117 + 32;
        if (v28 != v109)
        {
          do
          {
            v118 = *((_OWORD *)v28 - 1);
            *((_OWORD *)v117 - 2) = *((_OWORD *)v28 - 2);
            *((_OWORD *)v117 - 1) = v118;
            v117 -= 32;
            v28 -= 32;
          }
          while (v28 != v109);
          v28 = *(char **)(a1 + 224);
        }
        *(_QWORD *)(a1 + 224) = v117;
        *(_QWORD *)(a1 + 232) = v29;
        *(_QWORD *)(a1 + 240) = &v114[32 * v113];
        if (v28)
          operator delete(v28);
      }
      else
      {
        *(_DWORD *)v28 = a4;
        *((_QWORD *)v28 + 1) = v5;
        *((_QWORD *)v28 + 2) = a3;
        *((_QWORD *)v28 + 3) = -1;
        v29 = v28 + 32;
      }
      *(_QWORD *)(a1 + 232) = v29;
      v23 = (char *)__p;
      if (__p)
        goto LABEL_24;
      return;
    }
    v36 = ubrk_first();
    v37 = 0;
    v38 = 0;
    v39 = v5 + a3;
    while ((_DWORD)v36 != -1)
    {
      v41 = v5 + (int)v36;
      v42 = *(_QWORD *)(a1 + 256);
      v43 = *(_QWORD *)(a1 + 264);
      v44 = -1;
      v45 = (v43 - v42) >> 2;
      if (v43 != v42 && (v41 & 0x8000000000000000) == 0 && v45 > v41)
      {
        v44 = v5 + (int)v36;
        while (*(_DWORD *)(v42 + 4 * v44) == 15)
        {
          if (v45 == ++v44)
          {
            v44 = (v43 - v42) >> 2;
            break;
          }
        }
      }
      v46 = 0;
      if (v44 >= v5 && v44 <= v39)
        v46 = *(_DWORD *)(v42 + 4 * v44);
      v47 = -1;
      if ((v44 & 0x8000000000000000) == 0 && v43 != v42)
      {
        v48 = v44 + 1;
        if (v45 > v48)
        {
          v47 = v48;
          while (*(_DWORD *)(v42 + 4 * v47) == 15)
          {
            if (v45 == ++v47)
            {
              v47 = (v43 - v42) >> 2;
              break;
            }
          }
        }
      }
      v49 = 0;
      if (v47 >= v5 && v47 <= v39)
        v49 = *(_DWORD *)(v42 + 4 * v47);
      v50 = v41 - 1;
      if (v43 == v42 || v41 < 1 || v45 <= v50)
        goto LABEL_74;
      if (v41 == 1)
      {
LABEL_72:
        v51 = 0;
      }
      else
      {
        v51 = v41 - 1;
        while (*(_DWORD *)(v42 + 4 * v51) == 15)
        {
          if (v51-- <= 1)
            goto LABEL_72;
        }
      }
      if (*(_DWORD *)(v42 + 4 * v51) == 15)
LABEL_74:
        v51 = -1;
      v53 = 0;
      if (v51 >= v5 && v51 <= v39)
        v53 = *(_DWORD *)(v42 + 4 * v51);
      if ((v38 & 1) == 0)
      {
        if (v53 == 13 && v46 == 13)
        {
          v54 = v36 - v37;
          v55 = v122;
          if ((unint64_t)v122 < v123)
            goto LABEL_40;
          v56 = v39;
          v57 = (char *)__p;
          v58 = v122 - (_BYTE *)__p;
          v59 = (v122 - (_BYTE *)__p) >> 2;
          v60 = v59 + 1;
          if ((unint64_t)(v59 + 1) >> 62)
            sub_19C2A18E8();
          v61 = v123 - (_QWORD)__p;
          if ((uint64_t)(v123 - (_QWORD)__p) >> 1 > v60)
            v60 = v61 >> 1;
          if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFFCLL)
            v62 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v62 = v60;
          if (v62)
          {
            if (v62 >> 62)
              sub_19C2A143C();
            v63 = operator new(4 * v62);
          }
          else
          {
            v63 = 0;
          }
          v64 = &v63[4 * v59];
          *(_DWORD *)v64 = v54;
          v40 = v64 + 4;
          if (v55 == v57)
          {
            v39 = v56;
          }
          else
          {
            v65 = v55 - 4 - v57;
            if (v65 < 0x2C)
            {
              v39 = v56;
              goto LABEL_113;
            }
            v66 = v55 - &v63[v58];
            v39 = v56;
            if (v66 < 0x20)
              goto LABEL_229;
            v67 = (v65 >> 2) + 1;
            v68 = &v63[4 * v59 - 16];
            v69 = v55 - 16;
            v70 = v67 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v71 = *(_OWORD *)v69;
              *(v68 - 1) = *((_OWORD *)v69 - 1);
              *v68 = v71;
              v68 -= 2;
              v69 -= 32;
              v70 -= 8;
            }
            while (v70);
            v64 -= 4 * (v67 & 0x7FFFFFFFFFFFFFF8);
            v55 -= 4 * (v67 & 0x7FFFFFFFFFFFFFF8);
            if (v67 != (v67 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_229:
              do
              {
LABEL_113:
                v72 = *((_DWORD *)v55 - 1);
                v55 -= 4;
                *((_DWORD *)v64 - 1) = v72;
                v64 -= 4;
              }
              while (v55 != v57);
            }
          }
          v73 = &v63[4 * v62];
          goto LABEL_115;
        }
        if (v46 == 3 && (v53 - 1) <= 1 && (v49 - 1) < 2)
        {
          v38 = 1;
          goto LABEL_80;
        }
        if ((int)v36 >= 1)
        {
          if (!v46 || v46 == 9)
          {
LABEL_100:
            if (v46 != 3
              || v53 != 3
              || *(unsigned __int8 *)(*(_QWORD *)(a1 + 176) + v41) != *(unsigned __int8 *)(*(_QWORD *)(a1 + 176) + v50))
            {
              goto LABEL_162;
            }
            goto LABEL_79;
          }
          switch(v53)
          {
            case 1:
              v76 = v46 != 14 && (v46 - 4) < 0xFFFFFFFD;
              break;
            case 2:
              v76 = (v46 - 11) < 3;
              break;
            case 4:
              v76 = (v46 - 4) < 0xFFFFFFFE;
              break;
            case 6:
              v77 = (v46 & 0xFFFFFFFB) == 2;
              goto LABEL_136;
            case 8:
              v77 = v46 == 8;
              goto LABEL_136;
            case 11:
              v77 = (v46 & 0xFFFFFFFD) == 12;
              goto LABEL_136;
            case 13:
              v77 = v46 == 13;
LABEL_136:
              v76 = !v77;
              break;
            case 14:
              v76 = v46 != 1 && (v46 - 15) < 0xFFFFFFFC;
              break;
            default:
              goto LABEL_100;
          }
          if (v46 == 3 || v76)
          {
LABEL_162:
            v54 = v36 - v37;
            v55 = v122;
            if ((unint64_t)v122 >= v123)
            {
              v57 = (char *)__p;
              v91 = v122 - (_BYTE *)__p;
              v92 = (v122 - (_BYTE *)__p) >> 2;
              v93 = v92 + 1;
              if ((unint64_t)(v92 + 1) >> 62)
                sub_19C2A18E8();
              v94 = v123 - (_QWORD)__p;
              if ((uint64_t)(v123 - (_QWORD)__p) >> 1 > v93)
                v93 = v94 >> 1;
              if ((unint64_t)v94 >= 0x7FFFFFFFFFFFFFFCLL)
                v89 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v89 = v93;
              if (v89)
              {
                if (v89 >> 62)
                  sub_19C2A143C();
                v90 = operator new(4 * v89);
              }
              else
              {
                v90 = 0;
              }
              v64 = &v90[4 * v92];
              *(_DWORD *)v64 = v54;
              v40 = v64 + 4;
              if (v55 != v57)
              {
                v95 = v55 - 4 - v57;
                if (v95 < 0x2C)
                  goto LABEL_230;
                if ((unint64_t)(v55 - &v90[v91]) < 0x20)
                  goto LABEL_230;
                v96 = (v95 >> 2) + 1;
                v97 = &v90[4 * v92 - 16];
                v98 = v55 - 16;
                v99 = v96 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  v100 = *(_OWORD *)v98;
                  *(v97 - 1) = *((_OWORD *)v98 - 1);
                  *v97 = v100;
                  v97 -= 2;
                  v98 -= 32;
                  v99 -= 8;
                }
                while (v99);
                v64 -= 4 * (v96 & 0x7FFFFFFFFFFFFFF8);
                v55 -= 4 * (v96 & 0x7FFFFFFFFFFFFFF8);
                if (v96 != (v96 & 0x7FFFFFFFFFFFFFF8))
                {
LABEL_230:
                  do
                  {
                    v101 = *((_DWORD *)v55 - 1);
                    v55 -= 4;
                    *((_DWORD *)v64 - 1) = v101;
                    v64 -= 4;
                  }
                  while (v55 != v57);
                }
              }
LABEL_180:
              v73 = &v90[4 * v89];
LABEL_115:
              __p = v64;
              v122 = v40;
              v123 = (unint64_t)v73;
              if (v57)
              {
                v74 = v40;
                operator delete(v57);
                v40 = v74;
              }
LABEL_41:
              v38 = 0;
              v122 = v40;
              goto LABEL_42;
            }
LABEL_40:
            *(_DWORD *)v55 = v54;
            v40 = v55 + 4;
            goto LABEL_41;
          }
        }
        if (v53 == 2 && (v49 == 9 || !v49))
        {
          v79 = (int)v36 >= v39 ? v39 : (int)v36;
          if (v5 < v79)
          {
            v80 = 0;
            v81 = v79 - v5;
            v82 = (int *)(v42 + 4 * v5);
            while (1)
            {
              v84 = *v82++;
              v83 = v84;
              if ((v84 - 1) > 1)
                break;
              v80 |= v83 == 1;
              if (!--v81)
              {
                if ((v80 & 1) == 0)
                  break;
                v54 = v36 - v37;
                v55 = v122;
                if ((unint64_t)v122 >= v123)
                {
                  v57 = (char *)__p;
                  v85 = v122 - (_BYTE *)__p;
                  v86 = (v122 - (_BYTE *)__p) >> 2;
                  v87 = v86 + 1;
                  if ((unint64_t)(v86 + 1) >> 62)
                    sub_19C2A18E8();
                  v88 = v123 - (_QWORD)__p;
                  if ((uint64_t)(v123 - (_QWORD)__p) >> 1 > v87)
                    v87 = v88 >> 1;
                  if ((unint64_t)v88 >= 0x7FFFFFFFFFFFFFFCLL)
                    v89 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v89 = v87;
                  if (v89)
                  {
                    if (v89 >> 62)
                      sub_19C2A143C();
                    v90 = operator new(4 * v89);
                  }
                  else
                  {
                    v90 = 0;
                  }
                  v64 = &v90[4 * v86];
                  *(_DWORD *)v64 = v54;
                  v40 = v64 + 4;
                  if (v55 != v57)
                  {
                    v102 = v55 - 4 - v57;
                    if (v102 < 0x2C)
                      goto LABEL_231;
                    if ((unint64_t)(v55 - &v90[v85]) < 0x20)
                      goto LABEL_231;
                    v103 = (v102 >> 2) + 1;
                    v104 = &v90[4 * v86 - 16];
                    v105 = v55 - 16;
                    v106 = v103 & 0x7FFFFFFFFFFFFFF8;
                    do
                    {
                      v107 = *(_OWORD *)v105;
                      *(v104 - 1) = *((_OWORD *)v105 - 1);
                      *v104 = v107;
                      v104 -= 2;
                      v105 -= 32;
                      v106 -= 8;
                    }
                    while (v106);
                    v64 -= 4 * (v103 & 0x7FFFFFFFFFFFFFF8);
                    v55 -= 4 * (v103 & 0x7FFFFFFFFFFFFFF8);
                    if (v103 != (v103 & 0x7FFFFFFFFFFFFFF8))
                    {
LABEL_231:
                      do
                      {
                        v108 = *((_DWORD *)v55 - 1);
                        v55 -= 4;
                        *((_DWORD *)v64 - 1) = v108;
                        v64 -= 4;
                      }
                      while (v55 != v57);
                    }
                  }
                  goto LABEL_180;
                }
                goto LABEL_40;
              }
            }
          }
        }
      }
LABEL_79:
      v38 = 0;
LABEL_80:
      v36 = v37;
LABEL_42:
      v37 = v36;
      v36 = ubrk_next();
    }
  }
  v8 = (int *)__p;
  v9 = (int *)v122;
  if (__p != v122)
  {
    v10 = *(char **)(a1 + 232);
    do
    {
      v12 = *v8;
      v13 = *(_QWORD *)(a1 + 240);
      if ((unint64_t)v10 < v13)
      {
        *(_DWORD *)v10 = 0;
        *((_QWORD *)v10 + 1) = v5;
        *((_QWORD *)v10 + 2) = v12;
        v11 = v10 + 32;
        *((_QWORD *)v10 + 3) = -1;
      }
      else
      {
        v14 = *(_BYTE **)(a1 + 224);
        v15 = (v10 - v14) >> 5;
        v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) >> 59)
          sub_19C2A18E8();
        v17 = v13 - (_QWORD)v14;
        if (v17 >> 4 > v16)
          v16 = v17 >> 4;
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFE0)
          v18 = 0x7FFFFFFFFFFFFFFLL;
        else
          v18 = v16;
        if (v18)
        {
          if (v18 >> 59)
            sub_19C2A143C();
          v19 = (char *)operator new(32 * v18);
        }
        else
        {
          v19 = 0;
        }
        v20 = &v19[32 * v15];
        *(_DWORD *)v20 = 0;
        *((_QWORD *)v20 + 1) = v5;
        *((_QWORD *)v20 + 2) = v12;
        *((_QWORD *)v20 + 3) = -1;
        v21 = v20;
        if (v10 != v14)
        {
          do
          {
            v22 = *((_OWORD *)v10 - 1);
            *((_OWORD *)v21 - 2) = *((_OWORD *)v10 - 2);
            *((_OWORD *)v21 - 1) = v22;
            v21 -= 32;
            v10 -= 32;
          }
          while (v10 != v14);
          v10 = *(char **)(a1 + 224);
        }
        v11 = v20 + 32;
        *(_QWORD *)(a1 + 224) = v21;
        *(_QWORD *)(a1 + 232) = v20 + 32;
        *(_QWORD *)(a1 + 240) = &v19[32 * v18];
        if (v10)
          operator delete(v10);
      }
      *(_QWORD *)(a1 + 232) = v11;
      v5 += v12;
      ++v8;
      v10 = v11;
    }
    while (v8 != v9);
  }
  utext_close(ut);
  v23 = (char *)__p;
  if (__p)
  {
LABEL_24:
    v122 = v23;
    operator delete(v23);
  }
}

void sub_19C3B1BB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C3B1C04(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_1E3D354D8;
  v2 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  std::mutex::~mutex((std::mutex *)(a1 + 8));
  return a1;
}

void sub_19C3B1C50(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_1E3D354D8;
  v2 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  std::mutex::~mutex((std::mutex *)(a1 + 8));
  JUMPOUT(0x1A1AD355CLL);
}

void sub_19C3B1CAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::mutex *v6;

  v6 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 72) + 16))(*(_QWORD *)(a1 + 72), a2, a3);
  std::mutex::unlock(v6);
}

void sub_19C3B1D00(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19C3B1D14(uint64_t a1)
{
  std::mutex *v2;
  uint64_t v3;

  v2 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 24))(*(_QWORD *)(a1 + 72));
  std::mutex::unlock(v2);
  return v3;
}

void sub_19C3B1D5C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19C3B1D70(uint64_t a1)
{
  std::mutex *v2;
  uint64_t v3;

  v2 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 32))(*(_QWORD *)(a1 + 72));
  std::mutex::unlock(v2);
  return v3;
}

void sub_19C3B1DB8(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19C3B1DCC(uint64_t a1)
{
  std::mutex *v2;
  uint64_t v3;

  v2 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 40))(*(_QWORD *)(a1 + 72));
  std::mutex::unlock(v2);
  return v3;
}

void sub_19C3B1E14(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

float sub_19C3B1E28(uint64_t a1)
{
  std::mutex *v2;
  float v3;

  v2 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  v3 = (*(float (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 48))(*(_QWORD *)(a1 + 72));
  std::mutex::unlock(v2);
  return v3;
}

void sub_19C3B1E78(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19C3B1E8C(uint64_t a1, uint64_t a2)
{
  std::mutex *v4;
  uint64_t v5;

  v4 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 72) + 56))(*(_QWORD *)(a1 + 72), a2);
  std::mutex::unlock(v4);
  return v5;
}

void sub_19C3B1EE4(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19C3B1EF8(uint64_t a1)
{
  std::mutex *v2;
  uint64_t v3;

  v2 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 64))(*(_QWORD *)(a1 + 72));
  std::mutex::unlock(v2);
  return v3;
}

void sub_19C3B1F40(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19C3B1F54(uint64_t a1, uint64_t a2)
{
  std::mutex *v4;
  uint64_t v5;

  v4 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 72) + 72))(*(_QWORD *)(a1 + 72), a2);
  std::mutex::unlock(v4);
  return v5;
}

void sub_19C3B1FAC(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

float sub_19C3B1FC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::mutex *v6;
  float v7;

  v6 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  v7 = (*(float (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 72) + 80))(*(_QWORD *)(a1 + 72), a2, a3);
  std::mutex::unlock(v6);
  return v7;
}

void sub_19C3B2028(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19C3B203C(uint64_t a1, uint64_t a2)
{
  std::mutex *v4;
  uint64_t v5;

  v4 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 72) + 88))(*(_QWORD *)(a1 + 72), a2);
  std::mutex::unlock(v4);
  return v5;
}

void sub_19C3B2094(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19C3B20A8(uint64_t a1, uint64_t a2, float a3)
{
  std::mutex *v6;
  uint64_t v7;

  v6 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  v7 = (*(uint64_t (**)(_QWORD, uint64_t, float))(**(_QWORD **)(a1 + 72) + 96))(*(_QWORD *)(a1 + 72), a2, a3);
  std::mutex::unlock(v6);
  return v7;
}

void sub_19C3B2110(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19C3B2124(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  std::mutex *v14;

  v14 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 72) + 104))(*(_QWORD *)(a1 + 72), a2, a3, a4, a5, a6, a7);
  std::mutex::unlock(v14);
}

void sub_19C3B21A8(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19C3B21BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::mutex *v8;

  v8 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 72) + 112))(*(_QWORD *)(a1 + 72), a2, a3, a4);
  std::mutex::unlock(v8);
}

void sub_19C3B2228(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19C3B223C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float a5)
{
  std::mutex *v10;

  v10 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, float))(**(_QWORD **)(a1 + 72) + 120))(*(_QWORD *)(a1 + 72), a2, a3, a4, a5);
  std::mutex::unlock(v10);
}

void sub_19C3B22B0(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19C3B22C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::mutex *v8;

  v8 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 72) + 128))(*(_QWORD *)(a1 + 72), a2, a3, a4);
  std::mutex::unlock(v8);
}

void sub_19C3B2328(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19C3B233C(uint64_t a1, float a2)
{
  std::mutex *v4;

  v4 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  (*(void (**)(_QWORD, float))(**(_QWORD **)(a1 + 72) + 136))(*(_QWORD *)(a1 + 72), a2);
  std::mutex::unlock(v4);
}

void sub_19C3B2388(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19C3B239C(uint64_t a1)
{
  std::mutex *v2;
  uint64_t v3;

  v2 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 144))(*(_QWORD *)(a1 + 72));
  std::mutex::unlock(v2);
  return v3;
}

void sub_19C3B23E4(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19C3B23F8(uint64_t a1, uint64_t a2)
{
  std::mutex *v4;
  uint64_t v5;

  v4 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 72) + 152))(*(_QWORD *)(a1 + 72), a2);
  std::mutex::unlock(v4);
  return v5;
}

void sub_19C3B2450(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19C3B2464(uint64_t a1, uint64_t a2)
{
  std::mutex *v4;

  v4 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 72) + 160))(*(_QWORD *)(a1 + 72), a2);
  std::mutex::unlock(v4);
}

void sub_19C3B24B0(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19C3B24C4(uint64_t a1)
{
  std::mutex *v2;

  v2 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 168))(*(_QWORD *)(a1 + 72));
  std::mutex::unlock(v2);
}

void sub_19C3B2500(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19C3B2514(uint64_t a1, uint64_t a2)
{
  std::mutex *v4;
  uint64_t v5;

  v4 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 72) + 176))(*(_QWORD *)(a1 + 72), a2);
  std::mutex::unlock(v4);
  return v5;
}

void sub_19C3B256C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19C3B2580(uint64_t a1)
{
  std::mutex *v2;

  v2 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 184))(*(_QWORD *)(a1 + 72));
  std::mutex::unlock(v2);
}

void sub_19C3B25BC(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19C3B25D0(uint64_t a1)
{
  std::mutex *v2;
  uint64_t v3;

  v2 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 192))(*(_QWORD *)(a1 + 72));
  std::mutex::unlock(v2);
  return v3;
}

void sub_19C3B2618(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19C3B262C(uint64_t a1, uint64_t a2)
{
  std::mutex *v4;

  v4 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 72) + 200))(*(_QWORD *)(a1 + 72), a2);
  std::mutex::unlock(v4);
}

void sub_19C3B2678(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19C3B268C(uint64_t a1, uint64_t a2)
{
  std::mutex *v4;
  uint64_t v5;

  v4 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 72) + 208))(*(_QWORD *)(a1 + 72), a2);
  std::mutex::unlock(v4);
  return v5;
}

void sub_19C3B26E4(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19C3B26F8(uint64_t a1)
{
  std::mutex *v2;

  v2 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 216))(*(_QWORD *)(a1 + 72));
  std::mutex::unlock(v2);
}

void sub_19C3B2744(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19C3B2758(uint64_t a1, uint64_t **a2)
{
  std::mutex *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;

  v4 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  v5 = *(_QWORD *)(a1 + 72);
  v6 = *a2;
  *a2 = 0;
  v8 = v6;
  (*(void (**)(uint64_t, uint64_t **))(*(_QWORD *)v5 + 224))(v5, &v8);
  v7 = v8;
  v8 = 0;
  if (v7)
  {
    if (*v7)
    {
      sub_19C29A56C(v7);
      if (*v7)
        MEMORY[0x1A1AD355C](*v7, 0x1010C4006136809);
    }
    MEMORY[0x1A1AD355C](v7, 0x20C4093837F09);
  }
  std::mutex::unlock(v4);
}

void sub_19C3B280C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  std::mutex *v2;
  va_list va;

  va_start(va, a2);
  sub_19C342C34((uint64_t **)va);
  std::mutex::unlock(v2);
  _Unwind_Resume(a1);
}

void sub_19C3B2828(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E3D34E80;
  sub_19C332918(*(char **)(a1 + 56));
  sub_19C2EAC08(*(char **)(a1 + 32));
  JUMPOUT(0x1A1AD355CLL);
}

size_t sub_19C3B2874@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, _QWORD *a3@<X8>)
{
  size_t result;
  size_t v5;
  size_t v6;
  size_t v7;
  unsigned int v8;
  BOOL v9;
  size_t *v10;
  const char *v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v6 = *(_QWORD *)(a1 + 56);
  result = a1 + 56;
  v5 = v6;
  if (v6)
  {
    v7 = result;
    do
    {
      v8 = *(_DWORD *)(v5 + 32);
      v9 = v8 >= a2;
      if (v8 >= a2)
        v10 = (size_t *)v5;
      else
        v10 = (size_t *)(v5 + 8);
      if (v9)
        v7 = v5;
      v5 = *v10;
    }
    while (*v10);
    if (v7 != result && *(_DWORD *)(v7 + 32) <= a2)
    {
      v11 = (const char *)(v7 + 40);
      if (*(char *)(v7 + 63) < 0)
        v11 = *(const char **)v11;
      result = strlen(v11);
      if (result >= 0x7FFFFFFFFFFFFFF8)
        sub_19C2A1A54();
      v12 = result;
      if (result >= 0x17)
      {
        v13 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((result | 7) != 0x17)
          v13 = result | 7;
        v14 = v13 + 1;
        v15 = operator new(v13 + 1);
        a3[1] = v12;
        a3[2] = v14 | 0x8000000000000000;
        *a3 = v15;
        a3 = v15;
      }
      else
      {
        *((_BYTE *)a3 + 23) = result;
        if (!result)
          goto LABEL_25;
      }
      result = (size_t)memmove(a3, v11, v12);
LABEL_25:
      *((_BYTE *)a3 + v12) = 0;
      return result;
    }
  }
  if (a2 <= 0x1F3)
    return sub_19C3B2A7C(a3, a2);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  return result;
}

CFStringRef sub_19C3B2984(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  BOOL v7;
  uint64_t *v8;
  void **v9;
  CFStringRef v10;
  const char *v12;
  void *__p[2];
  char v14;

  v4 = *(_QWORD *)(a1 + 56);
  v2 = a1 + 56;
  v3 = v4;
  if (!v4)
    goto LABEL_12;
  v5 = v2;
  do
  {
    v6 = *(_DWORD *)(v3 + 32);
    v7 = v6 >= a2;
    if (v6 >= a2)
      v8 = (uint64_t *)v3;
    else
      v8 = (uint64_t *)(v3 + 8);
    if (v7)
      v5 = v3;
    v3 = *v8;
  }
  while (*v8);
  if (v5 != v2 && *(_DWORD *)(v5 + 32) <= a2)
  {
    v12 = (const char *)(v5 + 40);
    if (*(char *)(v5 + 63) < 0)
      v12 = *(const char **)v12;
    return CFStringCreateWithCString(0, v12, 0x8000100u);
  }
  else
  {
LABEL_12:
    if (a2 > 5)
      return 0;
    sub_19C3B2A7C(__p, a2);
    if (v14 >= 0)
      v9 = __p;
    else
      v9 = (void **)__p[0];
    v10 = CFStringCreateWithCString(0, (const char *)v9, 0x8000100u);
    if (v14 < 0)
      operator delete(__p[0]);
    return v10;
  }
}

void sub_19C3B2A60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

size_t sub_19C3B2A7C(_QWORD *a1, int a2)
{
  const char *v3;
  void *v4;
  size_t result;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v3 = "";
  v4 = &unk_1E3D3B020;
  switch(a2)
  {
    case 0:
      goto LABEL_82;
    case 1:
      v4 = &unk_1E3D3B030;
      goto LABEL_82;
    case 2:
      v4 = &unk_1E3D3B040;
      goto LABEL_82;
    case 3:
      v4 = &unk_1E3D3B050;
      goto LABEL_82;
    case 4:
      v4 = &unk_1E3D3B060;
      goto LABEL_82;
    case 5:
      v4 = &unk_1E3D3B070;
      goto LABEL_82;
    case 6:
      v4 = &unk_1E3D3B080;
      goto LABEL_82;
    case 7:
      v4 = &unk_1E3D3B090;
      goto LABEL_82;
    case 10:
      v4 = &unk_1E3D3B0A0;
      goto LABEL_82;
    case 11:
      v4 = &unk_1E3D3B0B0;
      goto LABEL_82;
    case 12:
      v4 = &unk_1E3D3B0C0;
      goto LABEL_82;
    case 13:
      v4 = &unk_1E3D3B0D0;
      goto LABEL_82;
    case 14:
      v4 = &unk_1E3D3B0E0;
      goto LABEL_82;
    case 15:
      v4 = &unk_1E3D3B0F0;
      goto LABEL_82;
    case 16:
      v4 = &unk_1E3D3B100;
      goto LABEL_82;
    case 17:
      v4 = &unk_1E3D3B110;
      goto LABEL_82;
    case 18:
      v4 = &unk_1E3D3B120;
      goto LABEL_82;
    case 19:
      v4 = &unk_1E3D3B130;
      goto LABEL_82;
    case 20:
      v4 = &unk_1E3D3B140;
      goto LABEL_82;
    case 21:
      v4 = &unk_1E3D3B150;
      goto LABEL_82;
    case 22:
      v4 = &unk_1E3D3B160;
      goto LABEL_82;
    case 23:
      v4 = &unk_1E3D3B170;
      goto LABEL_82;
    case 24:
      v4 = &unk_1E3D3B180;
      goto LABEL_82;
    case 25:
      v4 = &unk_1E3D3B190;
      goto LABEL_82;
    case 26:
      v4 = &unk_1E3D3B1A0;
      goto LABEL_82;
    case 27:
      v4 = &unk_1E3D3B1B0;
      goto LABEL_82;
    case 28:
      v4 = &unk_1E3D3B1C0;
      goto LABEL_82;
    case 29:
      v4 = &unk_1E3D3B1D0;
      goto LABEL_82;
    case 30:
      v4 = &unk_1E3D3B1E0;
      goto LABEL_82;
    case 31:
      v4 = &unk_1E3D3B1F0;
      goto LABEL_82;
    case 32:
      v4 = &unk_1E3D3B200;
      goto LABEL_82;
    case 33:
      v4 = &unk_1E3D3B210;
      goto LABEL_82;
    case 34:
      v4 = &unk_1E3D3B220;
      goto LABEL_82;
    case 35:
      v4 = &unk_1E3D3B230;
      goto LABEL_82;
    case 36:
      v4 = &unk_1E3D3B240;
      goto LABEL_82;
    case 37:
      v4 = &unk_1E3D3B250;
      goto LABEL_82;
    case 38:
      v4 = &unk_1E3D3B260;
      goto LABEL_82;
    case 39:
      v4 = &unk_1E3D3B270;
      goto LABEL_82;
    case 40:
      v4 = &unk_1E3D3B280;
      goto LABEL_82;
    case 41:
      v4 = &unk_1E3D3B290;
      goto LABEL_82;
    case 42:
      v4 = &unk_1E3D3B2A0;
      goto LABEL_82;
    case 43:
      v4 = &unk_1E3D3B2C0;
      goto LABEL_82;
    case 44:
      v4 = &unk_1E3D3B2D0;
      goto LABEL_82;
    case 45:
      v4 = &unk_1E3D3B2E0;
      goto LABEL_82;
    case 46:
      v4 = &unk_1E3D3B2F0;
      goto LABEL_82;
    case 47:
      v4 = &unk_1E3D3B300;
      goto LABEL_82;
    case 48:
      v4 = &unk_1E3D3B310;
      goto LABEL_82;
    case 49:
      v4 = &unk_1E3D3B320;
      goto LABEL_82;
    case 50:
      v4 = &unk_1E3D3B330;
      goto LABEL_82;
    case 51:
      v4 = &unk_1E3D3B340;
      goto LABEL_82;
    case 52:
      v4 = &unk_1E3D3B350;
      goto LABEL_82;
    case 53:
      v4 = &unk_1E3D3B360;
      goto LABEL_82;
    case 54:
      v4 = &unk_1E3D3B370;
      goto LABEL_82;
    case 55:
      v4 = &unk_1E3D3B380;
      goto LABEL_82;
    case 56:
      v4 = &unk_1E3D3B390;
      goto LABEL_82;
    case 57:
      v4 = &unk_1E3D3B3A0;
      goto LABEL_82;
    case 58:
      v4 = &unk_1E3D3B3B0;
      goto LABEL_82;
    case 59:
      v4 = &unk_1E3D3B3C0;
      goto LABEL_82;
    case 60:
      v4 = &unk_1E3D3B3D0;
      goto LABEL_82;
    case 61:
      v4 = &unk_1E3D3B3E0;
      goto LABEL_82;
    case 62:
      v4 = &unk_1E3D3B3F0;
      goto LABEL_82;
    case 63:
      v4 = &unk_1E3D3B430;
      goto LABEL_82;
    case 64:
      v4 = &unk_1E3D3B440;
      goto LABEL_82;
    case 65:
      v4 = &unk_1E3D3B400;
      goto LABEL_82;
    case 66:
      v4 = &unk_1E3D3B410;
      goto LABEL_82;
    case 67:
      v4 = &unk_1E3D3B420;
      goto LABEL_82;
    case 68:
      v4 = &unk_1E3D3B460;
      goto LABEL_82;
    case 69:
      v4 = &unk_1E3D3B470;
      goto LABEL_82;
    case 70:
      v4 = &unk_1E3D3B480;
      goto LABEL_82;
    case 71:
      v4 = &unk_1E3D3B490;
      goto LABEL_82;
    case 72:
      v4 = &unk_1E3D3B4A0;
      goto LABEL_82;
    case 89:
      v4 = &unk_1E3D3B4B0;
      goto LABEL_82;
    case 120:
      v4 = &unk_1E3D3B4C0;
      goto LABEL_82;
    case 123:
      v4 = &unk_1E3D3B4F0;
      goto LABEL_82;
    case 126:
      v4 = &unk_1E3D3B500;
      goto LABEL_82;
    case 127:
      v4 = &unk_1E3D3B510;
      goto LABEL_82;
    case 128:
      v4 = &unk_1E3D3B520;
      goto LABEL_82;
    case 129:
      v4 = &unk_1E3D3B530;
      goto LABEL_82;
    case 130:
      v4 = &unk_1E3D3B4D0;
      goto LABEL_82;
    case 131:
      v4 = &unk_1E3D3B4E0;
      goto LABEL_82;
    case 499:
      v4 = &unk_1E3D3B450;
LABEL_82:
      v3 = (const char *)*((_QWORD *)v4 + 1);
      break;
    default:
      break;
  }
  result = strlen(v3);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    sub_19C2A1A54();
  v6 = result;
  if (result >= 0x17)
  {
    v7 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v7 = result | 7;
    v8 = v7 + 1;
    v9 = operator new(v7 + 1);
    a1[1] = v6;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v9;
    a1 = v9;
  }
  else
  {
    *((_BYTE *)a1 + 23) = result;
    if (!result)
      goto LABEL_91;
  }
  result = (size_t)memmove(a1, v3, v6);
LABEL_91:
  *((_BYTE *)a1 + v6) = 0;
  return result;
}

uint64_t sub_19C3B2F0C(uint64_t a1)
{
  int v1;
  size_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  const void *v6;
  void *__p[2];
  uint64_t v9;

  if (*(char *)(a1 + 23) < 0)
  {
    sub_19C2B5238(__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a1;
    v9 = *(_QWORD *)(a1 + 16);
  }
  v1 = SHIBYTE(v9);
  if (v9 >= 0)
    v2 = HIBYTE(v9);
  else
    v2 = (size_t)__p[1];
  if (v9 < 0)
  {
    v5 = 0;
    v6 = __p[0];
    v4 = &dword_1E3D3B540;
    while (v2 != strlen(*(const char **)((char *)&unk_1E3D3B020 + v5 + 8))
         || memcmp(v6, *(const void **)((char *)&unk_1E3D3B020 + v5 + 8), v2))
    {
      v5 += 16;
      if (v5 == 1312)
        goto LABEL_18;
    }
    v4 = (int *)((char *)&unk_1E3D3B020 + v5);
  }
  else
  {
    v3 = 0;
    v4 = &dword_1E3D3B540;
    while (v2 != strlen(*(const char **)((char *)&unk_1E3D3B020 + v3 + 8))
         || memcmp(__p, *(const void **)((char *)&unk_1E3D3B020 + v3 + 8), v2))
    {
      v3 += 16;
      if (v3 == 1312)
        goto LABEL_18;
    }
    v4 = (int *)((char *)&unk_1E3D3B020 + v3);
  }
LABEL_18:
  if (v1 < 0)
  {
    operator delete(__p[0]);
    if (v4 != &dword_1E3D3B540)
      return *v4;
  }
  else if (v4 != &dword_1E3D3B540)
  {
    return *v4;
  }
  return 0;
}

CFStringRef LMLanguageModelCreateStringForSpecialTokenID(unsigned int a1)
{
  void **v1;
  CFStringRef v2;
  void *__p[2];
  char v5;

  if (a1 > 0x1F3)
    return 0;
  sub_19C3B2A7C(__p, a1);
  if (v5 >= 0)
    v1 = __p;
  else
    v1 = (void **)__p[0];
  v2 = CFStringCreateWithCString(0, (const char *)v1, 0x8000100u);
  if (v5 < 0)
    operator delete(__p[0]);
  return v2;
}

void sub_19C3B30E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C3B30FC(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  *(_QWORD *)a1 = &off_1E3D36CD0;
  sub_19C33275C(*(_QWORD **)(a1 + 64));
  v2 = *(_QWORD **)(a1 + 24);
  if (v2)
  {
    v3 = *(_QWORD **)(a1 + 32);
    v4 = *(void **)(a1 + 24);
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 24);
    }
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v4);
  }
  v7 = *(std::__shared_weak_count **)(a1 + 16);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

void sub_19C3B31BC(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  *(_QWORD *)a1 = &off_1E3D36CD0;
  sub_19C33275C(*(_QWORD **)(a1 + 64));
  v2 = *(_QWORD **)(a1 + 24);
  if (v2)
  {
    v3 = *(_QWORD **)(a1 + 32);
    v4 = *(void **)(a1 + 24);
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 24);
    }
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v4);
  }
  v7 = *(std::__shared_weak_count **)(a1 + 16);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  JUMPOUT(0x1A1AD355CLL);
}

BOOL sub_19C3B328C(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  BOOL v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  int v10;
  _QWORD *v11;
  _QWORD **v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  __int128 *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  double v28;
  unsigned int v29;
  _BOOL4 v30;
  _BOOL4 v31;
  _QWORD *v32;
  uint64_t v33;
  char v34;
  char v36;
  _QWORD *v38;
  int64x2_t v39;
  uint64_t v40;
  int64x2_t v41;
  uint64_t v42;
  __int16 v43;
  char v44;
  __int128 v45;
  int v46;
  __int128 v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD v51[3];
  _QWORD *v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  v2 = (_QWORD *)(a1 + 64);
  v3 = *(_QWORD **)(a1 + 80);
  if (v3 != (_QWORD *)(a1 + 64))
  {
    v4 = (_QWORD *)v3[1];
    if (v4)
    {
      do
      {
        v5 = v4;
        v4 = (_QWORD *)*v4;
      }
      while (v4);
    }
    else
    {
      do
      {
        v5 = (_QWORD *)v3[2];
        v6 = *v5 == (_QWORD)v3;
        v3 = v5;
      }
      while (!v6);
    }
    goto LABEL_61;
  }
  v38 = (_QWORD *)(a1 + 64);
  v5 = (_QWORD *)(a1 + 64);
  v7 = *(_QWORD *)(a1 + 24);
  if (*(_QWORD *)(a1 + 32) != v7)
  {
    v8 = 0;
    v39 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
    while (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v7 + 8 * v8) + 16))(*(_QWORD *)(v7 + 8 * v8)))
    {
LABEL_10:
      ++v8;
      v7 = *(_QWORD *)(a1 + 24);
      if (v8 >= (*(_QWORD *)(a1 + 32) - v7) >> 3)
        goto LABEL_59;
    }
    v9 = 0;
    while (1)
    {
      v41 = v39;
      v42 = 0;
      v43 = 0;
      v44 = 1;
      v45 = xmmword_19C46DE10;
      v46 = 0;
      v47 = xmmword_19C46DE10;
      v48 = 0xFFEFFFFFFFFFFFFFLL;
      v49 = 0;
      v50 = 0;
      v40 = 0;
      v10 = (*(uint64_t (**)(_QWORD, _QWORD, char *))(**(_QWORD **)(v7 + 8 * v8) + 24))(*(_QWORD *)(v7 + 8 * v8), 0, (char *)&v40 + 4);
      LODWORD(v40) = v10;
      if (*(_BYTE *)(a1 + 48) && ((uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3) - 1 == v8)
        HIDWORD(v40) = 5;
      if ((v10 - 3) <= 0x1F0
        && ((v10 - 68) > 0x3C || ((0x7FFFFFFFFFFFFE0uLL >> (v10 - 68)) & 1) != 0))
      {
        goto LABEL_54;
      }
      v11 = *(_QWORD **)(a1 + 8);
      v12 = (_QWORD **)v11[23];
      if (v11[24] - (_QWORD)v12 == 16)
      {
        if ((sub_19C32FB3C(*(_QWORD *)(a1 + 8), (uint64_t)&v40, 1, 0, 0, 0, 1, *v12) & 1) != 0)
          goto LABEL_54;
        v11 = *(_QWORD **)(a1 + 8);
      }
      if (HIDWORD(v40) == 5)
      {
        v13 = v11[58];
        v14 = v40;
        if (qword_1EDB97100 != -1)
          dispatch_once(&qword_1EDB97100, &unk_1E3D3BED0);
        *((_QWORD *)&v54 + 1) = 0;
        v15 = sub_19C3BEA5C(v13, v14, 0, 0, (uint64_t)&v41, 1, (uint64_t)&v53, 0);
        v16 = (__int128 *)*((_QWORD *)&v54 + 1);
        if (*((__int128 **)&v54 + 1) == &v53)
        {
          v16 = &v53;
          v17 = 4;
LABEL_34:
          (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
        }
        else if (*((_QWORD *)&v54 + 1))
        {
          v17 = 5;
          goto LABEL_34;
        }
        if (v15)
          goto LABEL_40;
        goto LABEL_54;
      }
      v18 = v40;
      if (qword_1EDB97100 != -1)
        dispatch_once(&qword_1EDB97100, &unk_1E3D3BED0);
      v55 = 0u;
      v56 = 0u;
      v53 = 0u;
      v54 = 0u;
      v52 = 0;
      v19 = sub_19C32DD08(v11, v18 | (v18 << 32), (uint64_t *)&v53, (uint64_t)&v41, qword_1EDB970F8, 1, 1, v51, (__n128)0);
      v20 = v52;
      if (v52 == v51)
      {
        v20 = v51;
        v21 = 4;
      }
      else
      {
        if (!v52)
          goto LABEL_39;
        v21 = 5;
      }
      (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_39:
      if ((v19 & 1) != 0)
      {
LABEL_40:
        v22 = v41.i64[0];
        v23 = v40;
        v24 = HIDWORD(v40);
        v25 = v5;
        v26 = v5;
        v27 = *v5;
        if (*v5)
        {
          while (1)
          {
            while (1)
            {
              v26 = (_QWORD *)v27;
              v28 = *(double *)(v27 + 32);
              v29 = *(_DWORD *)(v27 + 40);
              v30 = v40 < v29;
              if (*(double *)v41.i64 != v28)
                v30 = *(double *)v41.i64 > v28;
              if (!v30)
                break;
              v27 = *v26;
              v25 = v26;
              if (!*v26)
                goto LABEL_51;
            }
            v31 = v29 < v40;
            if (*(double *)v41.i64 != v28)
              v31 = v28 > *(double *)v41.i64;
            if (!v31)
              break;
            v27 = v26[1];
            if (!v27)
            {
              v25 = v26 + 1;
              goto LABEL_51;
            }
          }
        }
        else
        {
LABEL_51:
          v32 = operator new(0x30uLL);
          v32[4] = v22;
          *((_DWORD *)v32 + 10) = v23;
          *((_DWORD *)v32 + 11) = v24;
          *v32 = 0;
          v32[1] = 0;
          v32[2] = v26;
          *v25 = v32;
          v33 = **(_QWORD **)(a1 + 56);
          if (v33)
          {
            *(_QWORD *)(a1 + 56) = v33;
            v32 = (_QWORD *)*v25;
          }
          sub_19C2A2310(*(uint64_t **)(a1 + 64), v32);
          ++*(_QWORD *)(a1 + 72);
        }
      }
LABEL_54:
      v34 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 8 * v8) + 16))(*(_QWORD *)(v7 + 8 * v8));
      if (v9++ >= 0x63)
        v36 = 0;
      else
        v36 = v34;
      if ((v36 & 1) == 0)
        goto LABEL_10;
    }
  }
LABEL_59:
  v2 = v38;
  if (*(_QWORD *)(a1 + 72))
    v5 = *(_QWORD **)(a1 + 56);
LABEL_61:
  *(_QWORD *)(a1 + 80) = v5;
  return v5 != v2;
}

void sub_19C3B36D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,char *a34)
{
  char *v35;
  uint64_t v36;

  v35 = a34;
  if (a34 == &a31)
  {
    v36 = 4;
    v35 = &a31;
  }
  else
  {
    if (!a34)
      _Unwind_Resume(exception_object);
    v36 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v35 + 8 * v36))();
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C3B3738(uint64_t a1, _QWORD *a2, _DWORD *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 80);
  if (a2)
    *a2 = *(_QWORD *)(v3 + 32);
  if (a3)
    *a3 = *(_DWORD *)(v3 + 44);
  return *(unsigned int *)(v3 + 40);
}

uint64_t sub_19C3B375C(uint64_t result, _QWORD *a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, const __CFString *a7)
{
  _QWORD *v11;
  uint64_t v12;
  int64_t v13;
  int64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  unsigned int v23;
  _QWORD *v24;
  _QWORD **v25;
  int v26;
  _QWORD *v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unsigned int v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  double v35;
  unsigned int v36;
  _BOOL4 v37;
  BOOL v38;
  _QWORD *v39;
  uint64_t v40;
  const __CFString *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  int64x2_t v47;
  int64x2_t v48;
  uint64_t v49;
  __int16 v50;
  char v51;
  __int128 v52;
  int v53;
  __int128 v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  int64x2_t v59;
  uint64_t v60;
  __int16 v61;
  char v62;
  __int128 v63;
  int v64;
  __int128 v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __int16 v70;
  int v71;
  _OWORD v72[4];
  _QWORD v73[3];
  _QWORD *v74;
  uint64_t v75;

  v75 = *MEMORY[0x1E0C80C00];
  if (!a2)
    return result;
  v11 = a2;
  v12 = result;
  result = sub_19C3AC070(a2);
  if (!(_DWORD)result)
    return result;
  v13 = a4 >= 4 ? 4 : a4;
  if (!v13)
    return result;
  v47 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  v42 = (uint64_t *)(v12 + 64);
  v43 = a6 - 1;
  v41 = a7;
  v44 = a6;
  v45 = v11;
  v14 = v13 - 1;
  if (v13 != 1)
    goto LABEL_14;
LABEL_8:
  if (!a6)
    __assert_rtn("lastContextTokenIsCommonStaticWord", "LMCompositeCompletionEnumerator.cpp", 118, "context.size() >= 1");
  if (!*(_BYTE *)(v12 + 89))
  {
    v15 = *(_DWORD *)(a5 + 4 * v43);
    if (v15 != 1)
    {
      result = sub_19C4334C4(v15, *(_QWORD **)(v12 + 8));
      if ((result & 1) != 0)
        return result;
    }
LABEL_14:
    while (1)
    {
      result = (uint64_t)sub_19C3AA674(v11, a3, a4, a7, v13, 1);
      v16 = result;
      if (result)
        break;
LABEL_56:
      if (v13 < 2)
        return result;
      v13 = v14--;
      if (!v14)
        goto LABEL_8;
    }
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result) & 1) == 0)
    {
      v29 = 4;
      goto LABEL_55;
    }
    v17 = a3;
    v18 = a4;
    v59 = v47;
    v60 = 0;
    v61 = 0;
    v62 = 1;
    v63 = xmmword_19C46DE10;
    v64 = 0;
    v65 = xmmword_19C46DE10;
    v66 = 0xFFEFFFFFFFFFFFFFLL;
    v71 = 0;
    v68 = 0;
    v69 = 0;
    v67 = 0;
    v70 = 0;
    v19 = operator new(4uLL);
    *v19 = 0;
    v20 = (*(uint64_t (**)(uint64_t, _DWORD *, int64x2_t *))(*(_QWORD *)v16 + 24))(v16, v19, &v59);
    if (v20)
    {
      v21 = 4 * v20;
      v22 = v19;
      while (*v22)
      {
        ++v22;
        v21 -= 4;
        if (!v21)
          goto LABEL_20;
      }
      v29 = 4;
      goto LABEL_54;
    }
LABEL_20:
    v58 = *v19;
    v23 = v58;
    v48 = v47;
    v49 = 0;
    v50 = 0;
    v51 = 1;
    v52 = xmmword_19C46DE10;
    v53 = 0;
    v54 = xmmword_19C46DE10;
    v55 = 0xFFEFFFFFFFFFFFFFLL;
    v56 = 0;
    v57 = 0;
    if (v58 - 3 <= 0x1F0 && (v58 - 68 > 0x3C || ((0x7FFFFFFFFFFFFE0uLL >> (v58 - 68)) & 1) != 0))
      goto LABEL_50;
    v24 = *(_QWORD **)(v12 + 8);
    v25 = (_QWORD **)v24[23];
    if (v24[24] - (_QWORD)v25 == 16)
    {
      if ((sub_19C32FB3C(*(_QWORD *)(v12 + 8), (uint64_t)&v58, 1, 0, 0, 0, 1, *v25) & 1) != 0)
        goto LABEL_50;
      v24 = *(_QWORD **)(v12 + 8);
      v23 = v58;
    }
    if (qword_1EDB97100 != -1)
      dispatch_once(&qword_1EDB97100, &unk_1E3D3BED0);
    memset(v72, 0, sizeof(v72));
    v74 = 0;
    v26 = sub_19C32DD08(v24, v23 | ((unint64_t)v23 << 32), (uint64_t *)v72, (uint64_t)&v48, qword_1EDB970F8, 1, 1, v73, (__n128)0);
    v27 = v74;
    if (v74 == v73)
    {
      v27 = v73;
      v28 = 4;
    }
    else
    {
      if (!v74)
        goto LABEL_35;
      v28 = 5;
    }
    (*(void (**)(void))(*v27 + 8 * v28))();
LABEL_35:
    if (v26)
    {
      v30 = v48.i64[0];
      v31 = v58;
      v32 = (_QWORD *)(v12 + 64);
      v33 = (_QWORD *)(v12 + 64);
      v34 = *v42;
      if (*v42)
      {
        while (1)
        {
          while (1)
          {
            v33 = (_QWORD *)v34;
            v35 = *(double *)(v34 + 32);
            v36 = *(_DWORD *)(v34 + 40);
            v37 = v58 < v36;
            if (*(double *)v48.i64 != v35)
              v37 = *(double *)v48.i64 > v35;
            if (!v37)
              break;
            v34 = *v33;
            v32 = v33;
            if (!*v33)
              goto LABEL_47;
          }
          v38 = v36 < v58;
          if (*(double *)v48.i64 != v35)
            v38 = v35 > *(double *)v48.i64;
          if (!v38)
            break;
          v34 = v33[1];
          if (!v34)
          {
            v32 = v33 + 1;
            goto LABEL_47;
          }
        }
        *(_QWORD *)(v12 + 80) = v42;
      }
      else
      {
LABEL_47:
        v39 = operator new(0x30uLL);
        v39[4] = v30;
        *((_DWORD *)v39 + 10) = v31;
        *((_DWORD *)v39 + 11) = 3;
        *v39 = 0;
        v39[1] = 0;
        v39[2] = v33;
        *v32 = v39;
        v40 = **(_QWORD **)(v12 + 56);
        if (v40)
        {
          *(_QWORD *)(v12 + 56) = v40;
          v39 = (_QWORD *)*v32;
        }
        sub_19C2A2310(*(uint64_t **)(v12 + 64), v39);
        ++*(_QWORD *)(v12 + 72);
        *(_QWORD *)(v12 + 80) = v42;
      }
      v29 = 1;
      a7 = v41;
      goto LABEL_53;
    }
LABEL_50:
    v29 = 1;
LABEL_53:
    a6 = v44;
LABEL_54:
    operator delete(v19);
    a4 = v18;
    a3 = v17;
    v11 = v45;
LABEL_55:
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    if (v29 != 4)
      return result;
    goto LABEL_56;
  }
  if (!*(_BYTE *)(v12 + 88))
    goto LABEL_14;
  return result;
}

void sub_19C3B3C0C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  operator delete(v2);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19C3B3C80(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  *(_QWORD *)a1 = &off_1E3D36CD0;
  sub_19C33275C(*(_QWORD **)(a1 + 64));
  v2 = *(_QWORD **)(a1 + 24);
  if (v2)
  {
    v3 = *(_QWORD **)(a1 + 32);
    v4 = *(void **)(a1 + 24);
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 24);
    }
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v4);
  }
  v7 = *(std::__shared_weak_count **)(a1 + 16);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

void sub_19C3B3D40(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  *(_QWORD *)a1 = &off_1E3D36CD0;
  sub_19C33275C(*(_QWORD **)(a1 + 64));
  v2 = *(_QWORD **)(a1 + 24);
  if (v2)
  {
    v3 = *(_QWORD **)(a1 + 32);
    v4 = *(void **)(a1 + 24);
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 24);
    }
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v4);
  }
  v7 = *(std::__shared_weak_count **)(a1 + 16);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t *sub_19C3B3E10(uint64_t *result, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t **v5;
  double v6;
  unsigned int v7;
  _QWORD *v8;
  double v9;
  unsigned int v10;
  _BOOL4 v11;
  _BOOL4 v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t *v15;

  v3 = result;
  v5 = (uint64_t **)(result + 1);
  v4 = result[1];
  if (v4)
  {
    v6 = *(double *)a2;
    v7 = *(_DWORD *)(a2 + 8);
    while (1)
    {
      while (1)
      {
        v8 = (_QWORD *)v4;
        v9 = *(double *)(v4 + 32);
        v10 = *(_DWORD *)(v4 + 40);
        v11 = v7 < v10;
        if (v6 != v9)
          v11 = v6 > v9;
        if (!v11)
          break;
        v4 = *v8;
        v5 = (uint64_t **)v8;
        if (!*v8)
          goto LABEL_13;
      }
      v12 = v10 < v7;
      if (v6 != v9)
        v12 = v9 > v6;
      if (!v12)
        break;
      v4 = v8[1];
      if (!v4)
      {
        v5 = (uint64_t **)(v8 + 1);
        goto LABEL_13;
      }
    }
  }
  else
  {
    v8 = result + 1;
LABEL_13:
    v13 = operator new(0x30uLL);
    v13[2] = *(_OWORD *)a2;
    *(_QWORD *)v13 = 0;
    *((_QWORD *)v13 + 1) = 0;
    *((_QWORD *)v13 + 2) = v8;
    *v5 = (uint64_t *)v13;
    v14 = *(_QWORD *)*v3;
    if (v14)
    {
      *v3 = v14;
      v15 = *v5;
    }
    else
    {
      v15 = (uint64_t *)v13;
    }
    result = sub_19C2A2310((uint64_t *)v3[1], v15);
    ++v3[2];
  }
  return result;
}

uint64_t sub_19C3B3F04(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  *(_QWORD *)a1 = &off_1E3D36CD0;
  sub_19C33275C(*(_QWORD **)(a1 + 64));
  v2 = *(_QWORD **)(a1 + 24);
  if (v2)
  {
    v3 = *(_QWORD **)(a1 + 32);
    v4 = *(void **)(a1 + 24);
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 24);
    }
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v4);
  }
  v7 = *(std::__shared_weak_count **)(a1 + 16);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

void sub_19C3B3FC4(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  *(_QWORD *)a1 = &off_1E3D36CD0;
  sub_19C33275C(*(_QWORD **)(a1 + 64));
  v2 = *(_QWORD **)(a1 + 24);
  if (v2)
  {
    v3 = *(_QWORD **)(a1 + 32);
    v4 = *(void **)(a1 + 24);
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 24);
    }
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v4);
  }
  v7 = *(std::__shared_weak_count **)(a1 + 16);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C3B4094(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;

  v2 = *(_QWORD **)(a1 + 16);
  v3 = (_QWORD *)(a1 + 24);
  if (v2 != (_QWORD *)(a1 + 24))
  {
    do
    {
      if (v2[5])
      {
        v5 = sub_19C3B4094();
        MEMORY[0x1A1AD355C](v5, 0x1020C40562D3801);
      }
      v6 = (_QWORD *)v2[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v2[2];
          v8 = *v7 == (_QWORD)v2;
          v2 = v7;
        }
        while (!v8);
      }
      v2 = v7;
    }
    while (v7 != v3);
  }
  sub_19C33275C(*(_QWORD **)(a1 + 24));
  return a1;
}

uint64_t sub_19C3B4130(_DWORD *a1, unsigned int a2)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  unint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;

  v2 = 4 * a2 - 559038737;
  if (a2 < 4)
  {
    v4 = 4 * a2 - 559038737;
    v3 = v4;
    if (a2 == 1)
    {
LABEL_11:
      HIDWORD(v16) = v3;
      LODWORD(v16) = v3;
      v17 = (v2 ^ v3) - (v16 >> 18);
      HIDWORD(v16) = v17;
      LODWORD(v16) = v17;
      v18 = ((*a1 + v4) ^ v17) - (v16 >> 21);
      HIDWORD(v16) = v18;
      LODWORD(v16) = v18;
      v19 = (v18 ^ v3) - (v16 >> 7);
      HIDWORD(v16) = v19;
      LODWORD(v16) = v19;
      v20 = (v19 ^ v17) - (v16 >> 16);
      HIDWORD(v16) = v20;
      LODWORD(v16) = v20;
      HIDWORD(v16) = (v20 ^ v18) - (v16 >> 28);
      LODWORD(v16) = HIDWORD(v16);
      HIDWORD(v16) = (HIDWORD(v16) ^ v19) - (v16 >> 18);
      LODWORD(v16) = HIDWORD(v16);
      return (HIDWORD(v16) ^ v20) - (v16 >> 8);
    }
  }
  else
  {
    v3 = 4 * a2 - 559038737;
    v4 = v3;
    do
    {
      v5 = a1[1] + v3;
      v6 = a1[2] + v2;
      v7 = (*a1 + v4 - v6) ^ __ROR4__(v6, 28);
      v8 = v6 + v5;
      v9 = (v5 - v7) ^ __ROR4__(v7, 26);
      v10 = v7 + v8;
      v11 = (v8 - v9) ^ __ROR4__(v9, 24);
      v12 = v9 + v10;
      v13 = (v10 - v11) ^ __ROR4__(v11, 16);
      v14 = v11 + v12;
      v15 = (v12 - v13) ^ __ROR4__(v13, 13);
      v4 = v13 + v14;
      v2 = (v14 - v15) ^ __ROR4__(v15, 28);
      v3 = v15 + v4;
      a2 -= 3;
      a1 += 3;
    }
    while (a2 > 3);
    if (a2 == 1)
      goto LABEL_11;
  }
  if (a2 == 2)
  {
LABEL_10:
    v3 += a1[1];
    goto LABEL_11;
  }
  if (a2 == 3)
  {
    LODWORD(v2) = a1[2] + v2;
    goto LABEL_10;
  }
  return v2;
}

uint64_t sub_19C3B4258(uint64_t result)
{
  uint64_t v1;
  uint64_t *v2;
  int v3;
  int v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unsigned int v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;

  if (!*(_DWORD *)(result + 72))
  {
    v1 = result;
    v2 = *(uint64_t **)(result + 8);
    v3 = *((_DWORD *)v2 + 3);
    *(_DWORD *)(result + 48) = 0;
    v4 = *((_DWORD *)v2 + 8);
    if (v4 == 5)
    {
      v9 = *v2;
      v13 = 0;
      v14 = 0;
      v15 = v9 + 55;
      if ((v3 + 1) > 1)
        v16 = v3 + 1;
      else
        v16 = 1;
      while (1)
      {
        v17 = *(unsigned __int8 *)(v15 + ((unint64_t)v14 >> 2));
        if ((v14 & 3) != 0)
          LOBYTE(v17) = v17 >> (2 * (v14 & 3));
        if ((v17 & 3) != 0)
          *(_DWORD *)(result + 48) = ++v13;
        if (v16 == ++v14)
        {
          v18 = *(_QWORD *)(result + 16);
          v19 = 0xCCCCCCCCCCCCCCCDLL * (*(_QWORD *)(result + 24) - v18);
          if (v13 <= v19)
          {
            if (v13 < v19)
              *(_QWORD *)(result + 24) = v18 + 5 * v13;
          }
          else
          {
            sub_19C3B46D4(result + 16, v13 - v19);
          }
          __asm { BR              X9 }
        }
      }
    }
    if (v4 == 3)
    {
      v5 = 0;
      v6 = 0;
      v7 = *v2;
      if ((v3 + 1) > 1)
        v8 = (v3 + 1);
      else
        v8 = 1;
      do
      {
        if (*(_DWORD *)(v7 + v5 + 7))
          *(_DWORD *)(result + 48) = ++v6;
        v5 += 6;
      }
      while (2 * (v8 + 2 * v8) != v5);
      v10 = *(_QWORD *)(result + 16);
      v11 = (_QWORD *)(result + 16);
      v12 = 0xCCCCCCCCCCCCCCCDLL * (*(_QWORD *)(result + 24) - v10);
      if (v6 <= v12)
      {
        if (v6 < v12)
          *(_QWORD *)(result + 24) = v10 + 5 * v6;
      }
      else
      {
        sub_19C3B46D4(result + 16, v6 - v12);
        v7 = **(_QWORD **)(v1 + 8);
      }
      v20 = 0;
      v21 = 0;
      v22 = (_BYTE *)(v7 + 11);
      do
      {
        if (*((_DWORD *)v22 - 1))
        {
          v23 = *v11 + 5 * v21;
          *(_DWORD *)v23 = v20;
          *(_BYTE *)(v23 + 4) = *v22;
          ++v21;
        }
        ++v20;
        v22 += 6;
      }
      while (v8 != v20);
    }
    v24 = *(_QWORD *)(v1 + 16);
    v25 = *(_QWORD *)(v1 + 24);
    v26 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * (v25 - v24));
    if (v25 == v24)
      v27 = 0;
    else
      v27 = v26;
    return sub_19C3B485C(v24, v25, v27, 1);
  }
  return result;
}

void sub_19C3B46D4(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  int v17;
  char v18;

  v5 = *(_BYTE **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (0xCCCCCCCCCCCCCCCDLL * (v4 - (_QWORD)v5) >= a2)
  {
    if (a2)
    {
      v12 = 5 * ((5 * a2 - 5) / 5) + 5;
      bzero(*(void **)(a1 + 8), v12);
      v5 += v12;
    }
    *(_QWORD *)(a1 + 8) = v5;
  }
  else
  {
    v6 = *(_BYTE **)a1;
    v7 = 0xCCCCCCCCCCCCCCCDLL * (_QWORD)&v5[-*(_QWORD *)a1];
    v8 = v7 + a2;
    if (v7 + a2 >= 0x3333333333333334)
      sub_19C2A18E8();
    v9 = 0xCCCCCCCCCCCCCCCDLL * (v4 - (_QWORD)v6);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x1999999999999999)
      v10 = 0x3333333333333333;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 >= 0x3333333333333334)
        sub_19C2A143C();
      v11 = (char *)operator new(5 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[5 * v7];
    v14 = &v11[5 * v10];
    v15 = 5 * ((5 * a2 - 5) / 5) + 5;
    bzero(v13, v15);
    v16 = &v13[v15];
    if (v5 != v6)
    {
      do
      {
        v17 = *(_DWORD *)(v5 - 5);
        v5 -= 5;
        v18 = v5[4];
        *(_DWORD *)(v13 - 5) = v17;
        v13 -= 5;
        v13[4] = v18;
      }
      while (v5 != v6);
      v5 = *(_BYTE **)a1;
    }
    *(_QWORD *)a1 = v13;
    *(_QWORD *)(a1 + 8) = v16;
    *(_QWORD *)(a1 + 16) = v14;
    if (v5)
      operator delete(v5);
  }
}

uint64_t sub_19C3B485C(uint64_t result, unint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  int *v8;
  unint64_t i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unint64_t k;
  unsigned int v19;
  unsigned int v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned __int8 *v25;
  int v26;
  unint64_t v27;
  unsigned int v28;
  unsigned int v29;
  unsigned __int8 *v30;
  unsigned int v31;
  int v32;
  BOOL v33;
  unsigned int v34;
  unsigned int *v35;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned __int8 *v40;
  unsigned int v41;
  unsigned __int8 *v42;
  unsigned __int8 *j;
  unsigned int v44;
  int v45;
  unsigned int v46;
  unsigned __int8 *v47;
  unsigned int v48;
  unsigned __int8 *v49;
  unsigned int v50;
  int v51;
  unsigned int v52;
  unsigned int v53;
  int v54;
  int *v55;
  int *v56;
  unsigned int v57;
  unsigned int v58;
  int v59;
  char v60;
  char v61;
  unsigned int v62;
  unsigned int v63;
  char v64;
  int v65;
  unsigned int v66;
  unsigned int v67;
  uint64_t v68;
  BOOL v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int *v80;
  unsigned int v81;
  int64_t v82;
  int64_t v83;
  unsigned int *v84;
  int64_t v85;
  uint64_t v86;
  unsigned int *v87;
  unsigned int v88;
  unsigned int v89;
  unsigned int v90;
  unsigned int v91;
  BOOL v92;
  unint64_t v93;
  unsigned int v94;
  int v95;
  unsigned int v96;
  uint64_t v97;
  uint64_t v98;
  unsigned int v99;
  unsigned int v100;
  int64_t v101;
  uint64_t v103;
  unint64_t v104;
  unsigned int v105;
  unint64_t v106;
  uint64_t v107;
  int64_t v108;
  unsigned int v109;
  unsigned int v110;
  int v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unsigned int v116;
  unsigned int v117;
  unsigned int v118;
  int v119;
  unint64_t v120;
  int v121;
  unint64_t v122;
  unsigned int v123;
  uint64_t v124;
  unsigned int v125;
  unsigned int v126;
  unsigned int v127;
  uint64_t v128;
  unsigned int v129;
  int v130;
  int v131;
  int v132;
  int v133;
  int v134;
  int v135;
  char v136;
  unsigned __int8 v137;
  unsigned __int8 v138;
  char v139;
  char v140;
  char v141;

  v7 = result;
LABEL_2:
  v8 = (int *)(a2 - 5);
  i = v7;
  while (2)
  {
    v7 = i;
    v10 = a2 - i;
    v11 = 0xCCCCCCCCCCCCCCCDLL * (a2 - i);
    switch(v11)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v52 = *(unsigned __int8 *)(a2 - 1);
        v53 = *(unsigned __int8 *)(i + 4);
        if (v52 > v53 || v52 == v53 && *v8 < *(_DWORD *)i)
        {
          v139 = *(_BYTE *)(i + 4);
          v133 = *(_DWORD *)i;
          v54 = *v8;
          *(_BYTE *)(i + 4) = *(_BYTE *)(a2 - 1);
          *(_DWORD *)i = v54;
          *(_BYTE *)(a2 - 1) = v139;
          *v8 = v133;
        }
        return result;
      case 3:
        return (uint64_t)sub_19C3B53E0((int *)i, (int *)(i + 5), (int *)(a2 - 5));
      case 4:
        v55 = (int *)(i + 5);
        v56 = (int *)(i + 10);
        result = (uint64_t)sub_19C3B53E0((int *)i, (int *)(i + 5), (int *)(i + 10));
        v57 = *(unsigned __int8 *)(a2 - 1);
        v58 = *(unsigned __int8 *)(i + 14);
        if (v57 > v58 || v57 == v58 && *v8 < *v56)
        {
          v59 = *v56;
          v60 = *(_BYTE *)(i + 14);
          v61 = *(_BYTE *)(a2 - 1);
          *v56 = *v8;
          *(_BYTE *)(i + 14) = v61;
          *(_BYTE *)(a2 - 1) = v60;
          *v8 = v59;
          v62 = *(unsigned __int8 *)(i + 14);
          v63 = *(unsigned __int8 *)(i + 9);
          if (v62 > v63 || v62 == v63 && *v56 < *v55)
          {
            v64 = *(_BYTE *)(i + 9);
            v65 = *v55;
            *v55 = *v56;
            *(_BYTE *)(i + 9) = *(_BYTE *)(i + 14);
            *v56 = v65;
            *(_BYTE *)(i + 14) = v64;
            v66 = *(unsigned __int8 *)(i + 9);
            v67 = *(unsigned __int8 *)(i + 4);
            if (v66 > v67 || v66 == v67 && *(_DWORD *)(i + 5) < *(_DWORD *)i)
            {
              v140 = *(_BYTE *)(i + 4);
              v134 = *(_DWORD *)i;
              *(_DWORD *)i = *v55;
              *(_BYTE *)(i + 4) = *(_BYTE *)(i + 9);
              *v55 = v134;
              *(_BYTE *)(i + 9) = v140;
            }
          }
        }
        return result;
      case 5:
        return (uint64_t)sub_19C3B5540(i, i + 5, i + 10, (int *)(i + 15), (int *)(a2 - 5));
      default:
        if (v10 <= 119)
        {
          v68 = i + 5;
          v70 = i == a2 || v68 == a2;
          if ((a4 & 1) != 0)
          {
            if (v70)
              return result;
            v71 = 0;
            v72 = i;
            while (1)
            {
              v74 = v72;
              v72 = v68;
              v75 = *(unsigned __int8 *)(v74 + 9);
              v76 = *(unsigned __int8 *)(v74 + 4);
              if (v75 > v76)
                break;
              if (v75 == v76)
              {
                v77 = *(_DWORD *)v72;
                if (*(_DWORD *)v72 < *(_DWORD *)v74)
                  goto LABEL_125;
              }
LABEL_120:
              v68 = v72 + 5;
              v71 += 5;
              if (v72 + 5 == a2)
                return result;
            }
            v77 = *(_DWORD *)v72;
LABEL_125:
            *(_DWORD *)v72 = *(_DWORD *)v74;
            *(_BYTE *)(v72 + 4) = *(_BYTE *)(v74 + 4);
            v73 = i;
            if (v74 != i)
            {
              v78 = v71;
              while (1)
              {
                v79 = i + v78;
                v80 = (unsigned int *)(i + v78 - 5);
                v81 = *(unsigned __int8 *)(i + v78 - 1);
                if (v75 <= v81)
                {
                  if (v75 != v81)
                  {
                    v73 = i + v78;
                    goto LABEL_119;
                  }
                  if (v77 >= *v80)
                    break;
                }
                v74 -= 5;
                *(_DWORD *)v79 = *v80;
                *(_BYTE *)(v79 + 4) = *(_BYTE *)(i + v78 - 1);
                v78 -= 5;
                if (!v78)
                {
                  v73 = i;
                  goto LABEL_119;
                }
              }
              v73 = v74;
            }
LABEL_119:
            *(_DWORD *)v73 = v77;
            *(_BYTE *)(v73 + 4) = v75;
            goto LABEL_120;
          }
          if (v70)
            return result;
          while (1)
          {
            v124 = v7;
            v7 = v68;
            v125 = *(unsigned __int8 *)(v124 + 9);
            v126 = *(unsigned __int8 *)(v124 + 4);
            if (v125 > v126)
              break;
            if (v125 == v126)
            {
              v127 = *(_DWORD *)v7;
              if (*(_DWORD *)v7 < *(_DWORD *)v124)
                goto LABEL_200;
            }
LABEL_195:
            v68 = v7 + 5;
            if (v7 + 5 == a2)
              return result;
          }
          v127 = *(_DWORD *)v7;
          do
          {
            do
            {
LABEL_200:
              v128 = v124;
              *(_DWORD *)(v124 + 5) = *(_DWORD *)v124;
              *(_BYTE *)(v124 + 9) = *(_BYTE *)(v124 + 4);
              v124 -= 5;
              v129 = *(unsigned __int8 *)(v128 - 1);
            }
            while (v125 > v129);
          }
          while (v125 == v129 && v127 < *(_DWORD *)(v128 - 5));
          *(_DWORD *)v128 = v127;
          *(_BYTE *)(v128 + 4) = v125;
          goto LABEL_195;
        }
        if (!a3)
        {
          if (i == a2)
            return result;
          v82 = (unint64_t)(v11 - 2) >> 1;
          v83 = v82;
          do
          {
            v85 = v83;
            if (v82 >= v83)
            {
              v86 = (2 * v83) | 1;
              v87 = (unsigned int *)(i + 5 * v86);
              if (2 * v85 + 2 < v11)
              {
                v88 = *((unsigned __int8 *)v87 + 4);
                v89 = *((unsigned __int8 *)v87 + 9);
                if (v88 > v89 || v88 == v89 && *v87 < *(unsigned int *)((char *)v87 + 5))
                {
                  v87 = (unsigned int *)((char *)v87 + 5);
                  v86 = 2 * v85 + 2;
                }
              }
              v90 = *((unsigned __int8 *)v87 + 4);
              v91 = *(unsigned __int8 *)(i + 5 * v85 + 4);
              v92 = v90 == v91;
              if (v90 <= v91)
              {
                v93 = i + 5 * v85;
                v94 = *(_DWORD *)v93;
                if (!v92 || *v87 >= v94)
                {
                  v95 = *v87;
                  result = *((unsigned __int8 *)v87 + 4);
                  *(_BYTE *)(v93 + 4) = result;
                  *(_DWORD *)v93 = v95;
                  if (v82 >= v86)
                  {
                    while (1)
                    {
                      v97 = 2 * v86;
                      v86 = (2 * v86) | 1;
                      v84 = (unsigned int *)(i + 5 * v86);
                      v98 = v97 + 2;
                      if (v98 < v11)
                      {
                        result = *((unsigned __int8 *)v84 + 4);
                        v99 = *((unsigned __int8 *)v84 + 9);
                        if (result > v99
                          || (_DWORD)result == v99
                          && (result = *v84, result < *(unsigned int *)((char *)v84 + 5)))
                        {
                          v84 = (unsigned int *)((char *)v84 + 5);
                          v86 = v98;
                        }
                      }
                      v100 = *((unsigned __int8 *)v84 + 4);
                      if (v100 > v91 || v100 == v91 && *v84 < v94)
                        break;
                      v96 = *v84;
                      result = *((unsigned __int8 *)v84 + 4);
                      *((_BYTE *)v87 + 4) = result;
                      *v87 = v96;
                      v87 = v84;
                      if (v82 < v86)
                        goto LABEL_136;
                    }
                  }
                  v84 = v87;
LABEL_136:
                  *v84 = v94;
                  *((_BYTE *)v84 + 4) = v91;
                }
              }
            }
            v83 = v85 - 1;
          }
          while (v85);
          v101 = v10 / 5uLL;
          while (1)
          {
            v103 = 0;
            v141 = *(_BYTE *)(i + 4);
            v135 = *(_DWORD *)i;
            v104 = i;
            do
            {
              v106 = v104;
              v104 += 5 * (v103 + 1);
              v107 = 2 * v103;
              v103 = (2 * v103) | 1;
              v108 = v107 + 2;
              if (v108 < v101)
              {
                v109 = *(unsigned __int8 *)(v104 + 4);
                v110 = *(unsigned __int8 *)(v104 + 9);
                if (v109 > v110 || v109 == v110 && *(_DWORD *)v104 < *(_DWORD *)(v104 + 5))
                {
                  v104 += 5;
                  v103 = v108;
                }
              }
              v105 = *(_DWORD *)v104;
              *(_BYTE *)(v106 + 4) = *(_BYTE *)(v104 + 4);
              *(_DWORD *)v106 = v105;
            }
            while (v103 <= (uint64_t)((unint64_t)(v101 - 2) >> 1));
            a2 -= 5;
            if (v104 == a2)
            {
              *(_BYTE *)(v104 + 4) = v141;
              *(_DWORD *)v104 = v135;
            }
            else
            {
              v111 = *(_DWORD *)a2;
              *(_BYTE *)(v104 + 4) = *(_BYTE *)(a2 + 4);
              *(_DWORD *)v104 = v111;
              *(_BYTE *)(a2 + 4) = v141;
              *(_DWORD *)a2 = v135;
              v112 = v104 - i + 5;
              if (v112 >= 6)
              {
                v113 = v112 / 5uLL - 2;
                v114 = v113 >> 1;
                v115 = i + 5 * (v113 >> 1);
                v116 = *(unsigned __int8 *)(v115 + 4);
                v117 = *(unsigned __int8 *)(v104 + 4);
                if (v116 > v117)
                {
                  v118 = *(_DWORD *)v104;
LABEL_175:
                  v119 = *(_DWORD *)v115;
                  *(_BYTE *)(v104 + 4) = *(_BYTE *)(v115 + 4);
                  *(_DWORD *)v104 = v119;
                  if (v113 >= 2)
                  {
                    while (1)
                    {
                      v122 = v114 - 1;
                      v114 = (v114 - 1) >> 1;
                      v120 = i + 5 * v114;
                      v123 = *(unsigned __int8 *)(v120 + 4);
                      if (v123 <= v117 && (v123 != v117 || *(_DWORD *)v120 >= v118))
                        break;
                      v121 = *(_DWORD *)v120;
                      *(_BYTE *)(v115 + 4) = *(_BYTE *)(v120 + 4);
                      *(_DWORD *)v115 = v121;
                      v115 = i + 5 * v114;
                      if (v122 <= 1)
                        goto LABEL_177;
                    }
                  }
                  v120 = v115;
LABEL_177:
                  *(_DWORD *)v120 = v118;
                  *(_BYTE *)(v120 + 4) = v117;
                  goto LABEL_162;
                }
                if (v116 == v117)
                {
                  v118 = *(_DWORD *)v104;
                  if (*(_DWORD *)v115 < *(_DWORD *)v104)
                    goto LABEL_175;
                }
              }
            }
LABEL_162:
            if (v101-- <= 2)
              return result;
          }
        }
        v12 = 5 * ((unint64_t)v11 >> 1);
        v13 = i + v12;
        if ((unint64_t)v10 < 0x281)
        {
          result = (uint64_t)sub_19C3B53E0((int *)(v7 + v12), (int *)v7, (int *)(a2 - 5));
          --a3;
          if ((a4 & 1) != 0)
          {
LABEL_13:
            v17 = *(_DWORD *)v7;
            v16 = *(unsigned __int8 *)(v7 + 4);
            goto LABEL_14;
          }
        }
        else
        {
          sub_19C3B53E0((int *)v7, (int *)(v7 + v12), (int *)(a2 - 5));
          sub_19C3B53E0((int *)(v7 + 5), (int *)(v12 + v7 - 5), (int *)(a2 - 10));
          sub_19C3B53E0((int *)(v7 + 10), (int *)(v7 + 5 + v12), (int *)(a2 - 15));
          result = (uint64_t)sub_19C3B53E0((int *)(v12 + v7 - 5), (int *)(v7 + v12), (int *)(v7 + 5 + v12));
          v136 = *(_BYTE *)(v7 + 4);
          v130 = *(_DWORD *)v7;
          v14 = *(_BYTE *)(v13 + 4);
          *(_DWORD *)v7 = *(_DWORD *)v13;
          *(_BYTE *)(v7 + 4) = v14;
          *(_BYTE *)(v13 + 4) = v136;
          *(_DWORD *)v13 = v130;
          --a3;
          if ((a4 & 1) != 0)
            goto LABEL_13;
        }
        v15 = *(unsigned __int8 *)(v7 - 1);
        v16 = *(unsigned __int8 *)(v7 + 4);
        v17 = *(_DWORD *)v7;
        if (v15 > v16)
          goto LABEL_14;
        if (v15 != v16 || *(_DWORD *)(v7 - 5) >= v17)
        {
          v37 = *(unsigned __int8 *)(a2 - 1);
          if (v16 > v37 || v16 == v37 && v17 < *v8)
          {
            v38 = *(unsigned __int8 *)(v7 + 9);
            if (v16 <= v38)
            {
              v40 = (unsigned __int8 *)(v7 + 14);
              do
              {
                if (v16 == v38 && v17 < *(_DWORD *)(v40 - 9))
                  break;
                v41 = *v40;
                v40 += 5;
                v38 = v41;
              }
              while (v16 <= v41);
              i = (unint64_t)(v40 - 9);
            }
            else
            {
              i = v7 + 5;
            }
          }
          else
          {
            for (i = v7 + 5; i < a2; i += 5)
            {
              v39 = *(unsigned __int8 *)(i + 4);
              if (v16 > v39 || v16 == v39 && v17 < *(_DWORD *)i)
                break;
            }
          }
          v42 = (unsigned __int8 *)a2;
          if (i < a2)
          {
            for (j = (unsigned __int8 *)(a2 - 6); v16 > v37 || v16 == v37 && v17 < *(_DWORD *)(j + 1); j -= 5)
            {
              v44 = *j;
              v37 = v44;
            }
            v42 = j + 1;
          }
          while (i < (unint64_t)v42)
          {
            v138 = *(_BYTE *)(i + 4);
            v132 = *(_DWORD *)i;
            v45 = *(_DWORD *)v42;
            *(_BYTE *)(i + 4) = v42[4];
            *(_DWORD *)i = v45;
            v42[4] = v138;
            *(_DWORD *)v42 = v132;
            v46 = *(unsigned __int8 *)(i + 9);
            if (v16 <= v46)
            {
              v47 = (unsigned __int8 *)(i + 14);
              do
              {
                if (v16 == v46 && v17 < *(_DWORD *)(v47 - 9))
                  break;
                v48 = *v47;
                v47 += 5;
                v46 = v48;
              }
              while (v16 <= v48);
              i = (unint64_t)(v47 - 9);
            }
            else
            {
              i += 5;
            }
            v49 = v42 - 5;
            do
            {
              do
              {
                v42 = v49;
                v50 = v49[4];
                v49 -= 5;
              }
              while (v16 > v50);
            }
            while (v16 == v50 && v17 < *(_DWORD *)v42);
          }
          if (i - 5 != v7)
          {
            v51 = *(_DWORD *)(i - 5);
            *(_BYTE *)(v7 + 4) = *(_BYTE *)(i - 1);
            *(_DWORD *)v7 = v51;
          }
          a4 = 0;
          *(_DWORD *)(i - 5) = v17;
          *(_BYTE *)(i - 1) = v16;
          continue;
        }
        v16 = *(unsigned __int8 *)(v7 - 1);
LABEL_14:
        for (k = v7 + 5; ; k += 5)
        {
          v19 = *(unsigned __int8 *)(k + 4);
          if (v19 <= v16 && (v19 != v16 || *(_DWORD *)k >= v17))
            break;
        }
        if (k - 5 == v7)
        {
          v22 = (unsigned __int8 *)a2;
          if (k < a2)
          {
            v24 = *(unsigned __int8 *)(a2 - 1);
            v22 = (unsigned __int8 *)(a2 - 5);
            if (v24 <= v16)
            {
              v21 = (unsigned __int8 *)(a2 - 6);
              v22 = (unsigned __int8 *)(a2 - 5);
              while (1)
              {
                v35 = (unsigned int *)(v21 + 1);
                if (v24 == v16)
                {
                  if (*v35 < v17 || k >= (unint64_t)v35)
                    goto LABEL_25;
                }
                else if (k >= (unint64_t)v35)
                {
                  break;
                }
                v22 -= 5;
                v34 = *v21;
                v21 -= 5;
                v24 = v34;
                if (v34 > v16)
                  goto LABEL_25;
              }
            }
          }
        }
        else
        {
          v20 = *(unsigned __int8 *)(a2 - 1);
          v21 = (unsigned __int8 *)(a2 - 6);
          v22 = (unsigned __int8 *)(a2 - 5);
          if (v20 <= v16)
          {
            do
            {
              if (v20 == v16 && *(_DWORD *)(v21 + 1) < v17)
                break;
              v23 = *v21;
              v21 -= 5;
              v20 = v23;
            }
            while (v23 <= v16);
LABEL_25:
            v22 = v21 + 1;
          }
        }
        i = k;
        if (k < (unint64_t)v22)
        {
          i = k;
          v25 = v22;
          do
          {
            while (1)
            {
              v137 = *(_BYTE *)(i + 4);
              v131 = *(_DWORD *)i;
              v26 = *(_DWORD *)v25;
              *(_BYTE *)(i + 4) = v25[4];
              *(_DWORD *)i = v26;
              v25[4] = v137;
              *(_DWORD *)v25 = v131;
              v27 = i + 5;
              do
              {
                do
                {
                  i = v27;
                  v28 = *(unsigned __int8 *)(v27 + 4);
                  v27 += 5;
                }
                while (v28 > v16);
              }
              while (v28 == v16 && *(_DWORD *)i < v17);
              v29 = *(v25 - 1);
              if (v29 <= v16)
                break;
              v25 -= 5;
              if (i >= (unint64_t)v25)
                goto LABEL_41;
            }
            v30 = v25 - 6;
            do
            {
              if (v29 == v16 && *(_DWORD *)(v30 + 1) < v17)
                break;
              v31 = *v30;
              v30 -= 5;
              v29 = v31;
            }
            while (v31 <= v16);
            v25 = v30 + 1;
          }
          while (i < (unint64_t)v25);
        }
LABEL_41:
        if (i - 5 != v7)
        {
          v32 = *(_DWORD *)(i - 5);
          *(_BYTE *)(v7 + 4) = *(_BYTE *)(i - 1);
          *(_DWORD *)v7 = v32;
        }
        *(_DWORD *)(i - 5) = v17;
        *(_BYTE *)(i - 1) = v16;
        if (k < (unint64_t)v22)
        {
LABEL_46:
          result = sub_19C3B485C(v7, i - 5, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v33 = sub_19C3B5780(v7, i - 5);
        result = sub_19C3B5780(i, a2);
        if (!(_DWORD)result)
        {
          if (v33)
            continue;
          goto LABEL_46;
        }
        a2 = i - 5;
        if (!v33)
          goto LABEL_2;
        return result;
    }
  }
}

int *sub_19C3B53E0(int *result, int *a2, int *a3)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  char v6;
  int v7;
  char v8;
  unsigned int v9;
  char v10;
  int v11;
  char v12;
  unsigned int v13;
  unsigned int v14;
  char v15;
  int v16;
  char v17;
  char v18;
  int v19;
  char v20;
  unsigned int v21;
  unsigned int v22;
  char v23;

  v3 = *((unsigned __int8 *)a2 + 4);
  v4 = *((unsigned __int8 *)result + 4);
  if (v3 > v4 || v3 == v4 && *a2 < *result)
  {
    v5 = *((unsigned __int8 *)a3 + 4);
    if (v5 > v3 || v5 == v3 && *a3 < *a2)
    {
      v6 = *((_BYTE *)result + 4);
      v7 = *result;
      v8 = *((_BYTE *)a3 + 4);
      *result = *a3;
      *((_BYTE *)result + 4) = v8;
LABEL_17:
      *a3 = v7;
      *((_BYTE *)a3 + 4) = v6;
      return result;
    }
    v18 = *((_BYTE *)result + 4);
    v19 = *result;
    v20 = *((_BYTE *)a2 + 4);
    *result = *a2;
    *((_BYTE *)result + 4) = v20;
    *a2 = v19;
    *((_BYTE *)a2 + 4) = v18;
    v21 = *((unsigned __int8 *)a3 + 4);
    v22 = *((unsigned __int8 *)a2 + 4);
    if (v21 > v22 || v21 == v22 && *a3 < *a2)
    {
      v6 = *((_BYTE *)a2 + 4);
      v7 = *a2;
      v23 = *((_BYTE *)a3 + 4);
      *a2 = *a3;
      *((_BYTE *)a2 + 4) = v23;
      goto LABEL_17;
    }
  }
  else
  {
    v9 = *((unsigned __int8 *)a3 + 4);
    if (v9 > v3 || v9 == v3 && *a3 < *a2)
    {
      v10 = *((_BYTE *)a2 + 4);
      v11 = *a2;
      v12 = *((_BYTE *)a3 + 4);
      *a2 = *a3;
      *((_BYTE *)a2 + 4) = v12;
      *a3 = v11;
      *((_BYTE *)a3 + 4) = v10;
      v13 = *((unsigned __int8 *)a2 + 4);
      v14 = *((unsigned __int8 *)result + 4);
      if (v13 > v14 || v13 == v14 && *a2 < *result)
      {
        v15 = *((_BYTE *)result + 4);
        v16 = *result;
        v17 = *((_BYTE *)a2 + 4);
        *result = *a2;
        *((_BYTE *)result + 4) = v17;
        *a2 = v16;
        *((_BYTE *)a2 + 4) = v15;
      }
    }
  }
  return result;
}

int *sub_19C3B5540(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, int *a5)
{
  int *result;
  unsigned int v11;
  unsigned int v12;
  char v13;
  int v14;
  char v15;
  unsigned int v16;
  unsigned int v17;
  char v18;
  int v19;
  char v20;
  unsigned int v21;
  unsigned int v22;
  char v23;
  int v24;
  char v25;
  unsigned int v26;
  unsigned int v27;
  char v28;
  int v29;
  char v30;
  unsigned int v31;
  unsigned int v32;
  char v33;
  int v34;
  char v35;
  unsigned int v36;
  unsigned int v37;
  char v38;
  int v39;
  char v40;
  unsigned int v41;
  unsigned int v42;
  char v43;
  int v44;
  char v45;

  result = sub_19C3B53E0((int *)a1, (int *)a2, (int *)a3);
  v11 = *((unsigned __int8 *)a4 + 4);
  v12 = *(unsigned __int8 *)(a3 + 4);
  if (v11 > v12 || v11 == v12 && *a4 < *(_DWORD *)a3)
  {
    v13 = *(_BYTE *)(a3 + 4);
    v14 = *(_DWORD *)a3;
    v15 = *((_BYTE *)a4 + 4);
    *(_DWORD *)a3 = *a4;
    *(_BYTE *)(a3 + 4) = v15;
    *a4 = v14;
    *((_BYTE *)a4 + 4) = v13;
    v16 = *(unsigned __int8 *)(a3 + 4);
    v17 = *(unsigned __int8 *)(a2 + 4);
    if (v16 > v17 || v16 == v17 && *(_DWORD *)a3 < *(_DWORD *)a2)
    {
      v18 = *(_BYTE *)(a2 + 4);
      v19 = *(_DWORD *)a2;
      v20 = *(_BYTE *)(a3 + 4);
      *(_DWORD *)a2 = *(_DWORD *)a3;
      *(_BYTE *)(a2 + 4) = v20;
      *(_DWORD *)a3 = v19;
      *(_BYTE *)(a3 + 4) = v18;
      v21 = *(unsigned __int8 *)(a2 + 4);
      v22 = *(unsigned __int8 *)(a1 + 4);
      if (v21 > v22 || v21 == v22 && *(_DWORD *)a2 < *(_DWORD *)a1)
      {
        v23 = *(_BYTE *)(a1 + 4);
        v24 = *(_DWORD *)a1;
        v25 = *(_BYTE *)(a2 + 4);
        *(_DWORD *)a1 = *(_DWORD *)a2;
        *(_BYTE *)(a1 + 4) = v25;
        *(_DWORD *)a2 = v24;
        *(_BYTE *)(a2 + 4) = v23;
      }
    }
  }
  v26 = *((unsigned __int8 *)a5 + 4);
  v27 = *((unsigned __int8 *)a4 + 4);
  if (v26 > v27 || v26 == v27 && *a5 < *a4)
  {
    v28 = *((_BYTE *)a4 + 4);
    v29 = *a4;
    v30 = *((_BYTE *)a5 + 4);
    *a4 = *a5;
    *((_BYTE *)a4 + 4) = v30;
    *a5 = v29;
    *((_BYTE *)a5 + 4) = v28;
    v31 = *((unsigned __int8 *)a4 + 4);
    v32 = *(unsigned __int8 *)(a3 + 4);
    if (v31 > v32 || v31 == v32 && *a4 < *(_DWORD *)a3)
    {
      v33 = *(_BYTE *)(a3 + 4);
      v34 = *(_DWORD *)a3;
      v35 = *((_BYTE *)a4 + 4);
      *(_DWORD *)a3 = *a4;
      *(_BYTE *)(a3 + 4) = v35;
      *a4 = v34;
      *((_BYTE *)a4 + 4) = v33;
      v36 = *(unsigned __int8 *)(a3 + 4);
      v37 = *(unsigned __int8 *)(a2 + 4);
      if (v36 > v37 || v36 == v37 && *(_DWORD *)a3 < *(_DWORD *)a2)
      {
        v38 = *(_BYTE *)(a2 + 4);
        v39 = *(_DWORD *)a2;
        v40 = *(_BYTE *)(a3 + 4);
        *(_DWORD *)a2 = *(_DWORD *)a3;
        *(_BYTE *)(a2 + 4) = v40;
        *(_DWORD *)a3 = v39;
        *(_BYTE *)(a3 + 4) = v38;
        v41 = *(unsigned __int8 *)(a2 + 4);
        v42 = *(unsigned __int8 *)(a1 + 4);
        if (v41 > v42 || v41 == v42 && *(_DWORD *)a2 < *(_DWORD *)a1)
        {
          v43 = *(_BYTE *)(a1 + 4);
          v44 = *(_DWORD *)a1;
          v45 = *(_BYTE *)(a2 + 4);
          *(_DWORD *)a1 = *(_DWORD *)a2;
          *(_BYTE *)(a1 + 4) = v45;
          *(_DWORD *)a2 = v44;
          *(_BYTE *)(a2 + 4) = v43;
        }
      }
    }
  }
  return result;
}

BOOL sub_19C3B5780(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  int *v6;
  unsigned int v7;
  unsigned int v8;
  char v9;
  int v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  int *v24;
  int *v25;
  int *v26;
  unsigned int v27;
  unsigned int v28;
  char v29;
  int v30;
  char v31;
  unsigned int v32;
  unsigned int v33;
  char v34;
  int v35;
  unsigned int v36;
  unsigned int v37;
  char v38;
  int v39;

  v4 = 0xCCCCCCCCCCCCCCCDLL * (a2 - a1);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = (int *)(a2 - 5);
      v7 = *(unsigned __int8 *)(a2 - 1);
      v8 = *(unsigned __int8 *)(a1 + 4);
      if (v7 > v8 || v7 == v8 && *v6 < *(_DWORD *)a1)
      {
        v9 = *(_BYTE *)(a1 + 4);
        v10 = *(_DWORD *)a1;
        v11 = *(_BYTE *)(a2 - 1);
        *(_DWORD *)a1 = *v6;
        *(_BYTE *)(a1 + 4) = v11;
        *v6 = v10;
        *(_BYTE *)(a2 - 1) = v9;
      }
      return result;
    case 3uLL:
      sub_19C3B53E0((int *)a1, (int *)(a1 + 5), (int *)(a2 - 5));
      return 1;
    case 4uLL:
      v24 = (int *)(a1 + 5);
      v25 = (int *)(a1 + 10);
      v26 = (int *)(a2 - 5);
      sub_19C3B53E0((int *)a1, (int *)(a1 + 5), (int *)(a1 + 10));
      v27 = *(unsigned __int8 *)(a2 - 1);
      v28 = *(unsigned __int8 *)(a1 + 14);
      if (v27 > v28 || v27 == v28 && *v26 < *v25)
      {
        v29 = *(_BYTE *)(a1 + 14);
        v30 = *v25;
        v31 = *(_BYTE *)(a2 - 1);
        *v25 = *v26;
        *(_BYTE *)(a1 + 14) = v31;
        *v26 = v30;
        *(_BYTE *)(a2 - 1) = v29;
        v32 = *(unsigned __int8 *)(a1 + 14);
        v33 = *(unsigned __int8 *)(a1 + 9);
        if (v32 > v33 || v32 == v33 && *v25 < *v24)
        {
          v34 = *(_BYTE *)(a1 + 9);
          v35 = *v24;
          *v24 = *v25;
          *(_BYTE *)(a1 + 9) = *(_BYTE *)(a1 + 14);
          *v25 = v35;
          *(_BYTE *)(a1 + 14) = v34;
          v36 = *(unsigned __int8 *)(a1 + 9);
          v37 = *(unsigned __int8 *)(a1 + 4);
          if (v36 > v37 || v36 == v37 && *(_DWORD *)(a1 + 5) < *(_DWORD *)a1)
          {
            v38 = *(_BYTE *)(a1 + 4);
            v39 = *(_DWORD *)a1;
            *(_DWORD *)a1 = *v24;
            *(_BYTE *)(a1 + 4) = *(_BYTE *)(a1 + 9);
            *v24 = v39;
            *(_BYTE *)(a1 + 9) = v38;
          }
        }
      }
      return 1;
    case 5uLL:
      sub_19C3B5540(a1, a1 + 5, a1 + 10, (int *)(a1 + 15), (int *)(a2 - 5));
      return 1;
    default:
      v12 = a1 + 10;
      sub_19C3B53E0((int *)a1, (int *)(a1 + 5), (int *)(a1 + 10));
      v13 = a1 + 15;
      if (a1 + 15 == a2)
        return 1;
      v14 = 0;
      v15 = 0;
      break;
  }
  while (1)
  {
    v17 = *(unsigned __int8 *)(v13 + 4);
    v18 = *(unsigned __int8 *)(v12 + 4);
    if (v17 > v18)
      break;
    if (v17 == v18)
    {
      v19 = *(_DWORD *)v13;
      if (*(_DWORD *)v13 < *(_DWORD *)v12)
        goto LABEL_11;
    }
LABEL_8:
    v12 = v13;
    v14 += 5;
    v13 += 5;
    if (v13 == a2)
      return 1;
  }
  v19 = *(_DWORD *)v13;
LABEL_11:
  *(_DWORD *)v13 = *(_DWORD *)v12;
  *(_BYTE *)(v13 + 4) = *(_BYTE *)(v12 + 4);
  v16 = a1;
  if (v12 != a1)
  {
    v20 = v14;
    while (1)
    {
      v21 = a1 + v20;
      v22 = (unsigned int *)(a1 + v20 + 5);
      v23 = *(unsigned __int8 *)(a1 + v20 + 9);
      if (v17 <= v23)
      {
        if (v17 != v23)
        {
          v16 = v12;
          goto LABEL_7;
        }
        if (v19 >= *v22)
          break;
      }
      v12 -= 5;
      *(_DWORD *)(v21 + 10) = *v22;
      *(_BYTE *)(v21 + 14) = *(_BYTE *)(a1 + v20 + 9);
      v20 -= 5;
      if (v20 == -10)
      {
        v16 = a1;
        goto LABEL_7;
      }
    }
    v16 = a1 + v20 + 10;
  }
LABEL_7:
  *(_DWORD *)v16 = v19;
  *(_BYTE *)(v16 + 4) = v17;
  if (++v15 != 8)
    goto LABEL_8;
  return v13 + 5 == a2;
}

BOOL sub_19C3B5A74(uint64_t a1, unsigned int a2, unint64_t a3, int a4, int a5, int a6, unsigned int *a7)
{
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;
  BOOL v10;
  char v11;
  _BOOL8 result;
  int v13;
  _DWORD *v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  _DWORD *v20;
  int v21;
  unsigned int v22;
  int v23;
  _DWORD *v24;
  int v25;

  if (!a4)
    return 0;
  v7 = HIDWORD(a3);
  v8 = a1 + a3;
  v9 = a4 + HIDWORD(a3) - 1;
  *a7 = HIDWORD(a3);
  if (a1)
    v10 = a6 == 0;
  else
    v10 = 1;
  v11 = v10;
  if (v10)
  {
    if (!a2)
    {
      if (HIDWORD(a3) != -1)
      {
        v18 = 0;
        return v18 == a2;
      }
      v9 = -1;
      goto LABEL_32;
    }
    *a7 = v9;
    return 0;
  }
  v13 = (HIDWORD(a3) * a5) & 0x1F;
  v14 = (_DWORD *)(v8 + 4 * ((HIDWORD(a3) * a5) >> 5));
  v15 = *v14 >> (BYTE4(a3) * a5);
  if ((v13 + a6) >= 0x21)
    v15 |= v14[1] << -(char)v13;
  result = 0;
  v16 = 0xFFFFFFFF >> -(char)a6;
  v17 = v15 & v16;
  if (v17 <= a2)
  {
    if (v17 == a2)
    {
      v18 = a2;
      if (HIDWORD(a3) == -1)
      {
        v9 = -1;
        goto LABEL_37;
      }
      return v18 == a2;
    }
    *a7 = v9;
    v19 = (v9 * a5) & 0x1F;
    v20 = (_DWORD *)(v8 + 4 * ((v9 * a5) >> 5));
    v21 = *v20 >> (v9 * a5);
    if ((v19 + a6) >= 0x21)
      v21 |= v20[1] << -(char)v19;
    v18 = v21 & v16;
    if (v18 >= a2)
    {
      if (v18 == a2)
        LODWORD(v7) = a4 + HIDWORD(a3) - 1;
      if ((int)v7 + 1 >= v9)
        return v18 == a2;
      if ((v11 & 1) == 0)
      {
        v16 = 0xFFFFFFFF >> -(char)a6;
        while (1)
        {
LABEL_37:
          v22 = (v9 + v7) >> 1;
          *a7 = v22;
          v23 = (v22 * a5) & 0x1F;
          v24 = (_DWORD *)(v8 + 4 * ((v22 * a5) >> 5));
          v25 = *v24 >> (v22 * a5);
          if ((v23 + a6) >= 0x21)
            v25 |= v24[1] << -(char)v23;
          v18 = v25 & v16;
          if (v18 > a2)
          {
            v9 = (v9 + v7) >> 1;
          }
          else
          {
            if (v18 == a2)
            {
              v18 = a2;
              return v18 == a2;
            }
            if (v18 < a2)
              LODWORD(v7) = (v9 + v7) >> 1;
          }
          if ((int)v7 + 1 >= v9)
            return v18 == a2;
        }
      }
      if (a2)
      {
        do
          LODWORD(v7) = (v9 + v7) >> 1;
        while ((int)v7 + 1 < v9);
        goto LABEL_33;
      }
LABEL_32:
      LODWORD(v7) = (v9 + v7) >> 1;
LABEL_33:
      v18 = 0;
      *a7 = v7;
      return v18 == a2;
    }
    return 0;
  }
  return result;
}

uint64_t sub_19C3B5C4C(uint64_t result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t *v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  char v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  BOOL v16;
  uint64_t v17;
  _BOOL4 v18;
  int v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  _DWORD *v24;
  int v25;
  unint64_t v26;
  unsigned int v27;
  int v28;
  _BYTE *v29;
  _BYTE *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  size_t v38;
  char *v39;
  int v40;
  char v41;
  _BYTE *v42;
  size_t v43;
  int v44;
  char v45;
  unsigned int v46;
  int v47;
  unsigned int v48;
  uint64_t v49;
  int v50;
  unsigned int v51;
  int v52;
  _DWORD *v53;
  int v54;
  unsigned int v55;
  int v56;
  _DWORD *v57;
  int v58;
  unsigned int v59;
  unsigned int v60;
  uint64_t v61;
  unsigned int v62;
  unsigned int v63;
  _DWORD *v64;
  int v65;
  unsigned int v66;
  _DWORD *v67;
  int v68;
  unsigned int v69;
  int v70;
  unsigned int v71;
  int v72;
  uint64_t v73;
  _DWORD *v74;
  int v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  char v82;
  int v83;
  _BOOL4 v84;
  int v85;

  if (*(_DWORD *)(result + 72) != 1)
    return result;
  v1 = (_QWORD *)result;
  v2 = *(unsigned int *)(result + 56);
  v3 = *(unsigned int *)(result + 40);
  v4 = !(_DWORD)v3 || (_DWORD)v2 == 0;
  if (v4 || (_DWORD)v2 == 1)
    return result;
  v6 = *(uint64_t **)(result + 8);
  v7 = *v6;
  if (*v6)
    v8 = *(_DWORD *)(v7 + v2) & 0x7FFF;
  else
    v8 = 0;
  v9 = *((_DWORD *)v6 + 3);
  v10 = v8 & 0x1F;
  v11 = *((_BYTE *)v6 + 16) - (v8 & 0x1F);
  v12 = -1 << v11;
  v13 = *((unsigned __int8 *)v6 + 36);
  v14 = ((v8 >> 10) + 5 * v13 + 7) >> 3;
  v15 = (v8 >> 10) + 8;
  if (v13 <= 2)
    v15 = 0;
  v16 = v13 > 3;
  v17 = 2;
  if (v16)
    v17 = v14;
  v18 = v10 > 1;
  v19 = (v8 >> 5) & 0x1F;
  v20 = v10 + v15 + 8;
  v21 = v7 + v3 + v17;
  if (!v19)
    v18 = 0;
  if (v18)
  {
    if (v7)
    {
      v22 = v19 * ~v12;
      v23 = v22 & 0x1F;
      v24 = (_DWORD *)(v21 + 4 * (v22 >> 5));
      v25 = *v24 >> v22;
      if ((v23 + v19) >= 0x21)
        v25 |= v24[1] << -(char)v23;
      LODWORD(v26) = v25 & (0xFFFFFFFF >> -(char)v19);
      *(_DWORD *)(result + 48) = v26;
    }
    else
    {
      LODWORD(v26) = 0;
      *(_DWORD *)(result + 48) = 0;
    }
  }
  else if (v10 == 1)
  {
    *(_DWORD *)(result + 48) = 0;
    if (v7)
    {
      v27 = 0;
      LODWORD(v26) = 0;
      if ((v9 + 1) > 1)
        v28 = v9 + 1;
      else
        v28 = 1;
      do
      {
        if (((*(_DWORD *)(v21 + 4 * (v27 >> 5)) >> v27) & 1) != 0)
        {
          LODWORD(v26) = v26 + 1;
          *(_DWORD *)(result + 48) = v26;
        }
        v27 += v20;
        --v28;
      }
      while (v28);
    }
    else
    {
      LODWORD(v26) = 0;
    }
  }
  else
  {
    LODWORD(v26) = *(_DWORD *)(result + 48);
  }
  v85 = v9;
  v26 = v26;
  v30 = *(_BYTE **)(result + 16);
  v29 = *(_BYTE **)(result + 24);
  v31 = 0xCCCCCCCCCCCCCCCDLL * (v29 - v30);
  v32 = v26 - v31;
  if (v26 > v31)
  {
    v33 = *(_QWORD *)(result + 32);
    v84 = v18;
    if (0xCCCCCCCCCCCCCCCDLL * (v33 - (_QWORD)v29) < v32)
    {
      v82 = v11;
      v83 = -1 << v11;
      v34 = 0xCCCCCCCCCCCCCCCDLL * (v33 - (_QWORD)v30);
      v35 = 0x999999999999999ALL * (v33 - (_QWORD)v30);
      if (v35 > v26)
        v26 = v35;
      if (v34 >= 0x1999999999999999)
        v26 = 0x3333333333333333;
      if (v26 >= 0x3333333333333334)
        sub_19C2A143C();
      v80 = 5 * v26;
      v36 = (char *)operator new(5 * v26);
      v37 = &v36[v29 - v30];
      v81 = &v36[v80];
      v38 = 5 * ((5 * v32 - 5) / 5) + 5;
      bzero(v37, v38);
      v39 = &v37[v38];
      if (v29 == v30)
      {
        v11 = v82;
        v12 = v83;
        v18 = v84;
      }
      else
      {
        v11 = v82;
        v12 = v83;
        v18 = v84;
        do
        {
          v40 = *(_DWORD *)(v29 - 5);
          v29 -= 5;
          v41 = v29[4];
          *(_DWORD *)(v37 - 5) = v40;
          v37 -= 5;
          v37[4] = v41;
        }
        while (v29 != v30);
        v29 = (_BYTE *)v1[2];
      }
      v1[2] = v37;
      v1[3] = v39;
      v1[4] = v81;
      if (v29)
      {
        operator delete(v29);
        v12 = v83;
        v18 = v84;
        v11 = v82;
      }
      goto LABEL_54;
    }
    v43 = 5 * ((5 * v32 - 5) / 5) + 5;
    v44 = -1 << v11;
    v45 = v11;
    bzero(v29, v43);
    v18 = v84;
    v11 = v45;
    v12 = v44;
    v42 = &v29[v43];
    goto LABEL_50;
  }
  if (v26 < v31)
  {
    v42 = &v30[5 * v26];
LABEL_50:
    v1[3] = v42;
  }
LABEL_54:
  if (v18)
  {
    v46 = 0;
    v47 = 0;
    v48 = 0xFFFFFFFF >> -(char)v19;
    v49 = v21 + (((v19 << v11) + 7) >> 3);
    v50 = -v12;
    while (1)
    {
      if (v47)
      {
        if (v7)
        {
          v51 = (v47 - 1) * v19;
          v52 = v51 & 0x1F;
          v53 = (_DWORD *)(v21 + 4 * (v51 >> 5));
          v54 = *v53 >> v51;
          if ((v52 + v19) >= 0x21)
            v54 |= v53[1] << -(char)v52;
          v55 = v54 & v48;
          goto LABEL_65;
        }
      }
      else if (v7)
      {
        v55 = 0;
LABEL_65:
        v56 = (v47 * v19) & 0x1F;
        v57 = (_DWORD *)(v21 + 4 * ((v47 * v19) >> 5));
        v58 = *v57 >> (v47 * v19);
        if ((v56 + v19) >= 0x21)
          v58 |= v57[1] << -(char)v56;
        v59 = v58 & v48;
        v60 = (v58 & v48) - v55;
        if (v59 > v55)
        {
          v61 = v1[2];
          v62 = v59 + v46 - v55;
          v63 = v20 * v55;
          do
          {
            v64 = (_DWORD *)(v49 + 4 * (v63 >> 5));
            v65 = *v64 >> v63;
            if ((v63 & 0x1F) + v10 >= 0x21)
              v65 |= v64[1] << -(v63 & 0x1F);
            *(_DWORD *)(v61 + 5 * v46) = v65 & (0xFFFFFFFF >> -(char)v10) | (v47 << v10);
            v66 = (v10 + v63) & 0x1F;
            v67 = (_DWORD *)(v49 + 4 * ((v10 + v63) >> 5));
            v68 = *v67 >> (v10 + v63);
            if (v66 >= 0x19)
              v68 |= v67[1] << -(char)v66;
            *(_BYTE *)(v61 + 5 * v46++ + 4) = v68;
            v63 += v20;
            --v60;
          }
          while (v60);
          v46 = v62;
        }
      }
      if (++v47 == v50)
        goto LABEL_84;
    }
  }
  if (v10 == 1 && v7)
  {
    v69 = 0;
    v70 = 0;
    v71 = 1;
    if ((v85 + 1) > 1)
      v72 = v85 + 1;
    else
      v72 = 1;
    do
    {
      if (((*(_DWORD *)(v21 + 4 * ((v71 - 1) >> 5)) >> (v71 - 1)) & 1) != 0)
      {
        v73 = v1[2];
        *(_DWORD *)(v73 + 5 * v69) = v70;
        v74 = (_DWORD *)(v21 + 4 * (v71 >> 5));
        v75 = *v74 >> v71;
        if ((v71 & 0x1F) >= 0x19)
          v75 |= v74[1] << -(v71 & 0x1F);
        *(_BYTE *)(v73 + 5 * v69++ + 4) = v75;
      }
      ++v70;
      v71 += v20;
    }
    while (v72 != v70);
  }
LABEL_84:
  v76 = v1[2];
  v77 = v1[3];
  v78 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * (v77 - v76));
  if (v77 == v76)
    v79 = 0;
  else
    v79 = v78;
  return sub_19C3B61FC(v76, v77, v79, 1);
}

uint64_t sub_19C3B61FC(uint64_t result, unint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  int *v8;
  unint64_t i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unint64_t k;
  unsigned int v19;
  unsigned int v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned __int8 *v25;
  int v26;
  unint64_t v27;
  unsigned int v28;
  unsigned int v29;
  unsigned __int8 *v30;
  unsigned int v31;
  int v32;
  BOOL v33;
  unsigned int v34;
  unsigned int *v35;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned __int8 *v40;
  unsigned int v41;
  unsigned __int8 *v42;
  unsigned __int8 *j;
  unsigned int v44;
  int v45;
  unsigned int v46;
  unsigned __int8 *v47;
  unsigned int v48;
  unsigned __int8 *v49;
  unsigned int v50;
  int v51;
  unsigned int v52;
  unsigned int v53;
  int v54;
  int *v55;
  int *v56;
  unsigned int v57;
  unsigned int v58;
  int v59;
  char v60;
  char v61;
  unsigned int v62;
  unsigned int v63;
  char v64;
  int v65;
  unsigned int v66;
  unsigned int v67;
  uint64_t v68;
  BOOL v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int *v80;
  unsigned int v81;
  int64_t v82;
  int64_t v83;
  unsigned int *v84;
  int64_t v85;
  uint64_t v86;
  unsigned int *v87;
  unsigned int v88;
  unsigned int v89;
  unsigned int v90;
  unsigned int v91;
  BOOL v92;
  unint64_t v93;
  unsigned int v94;
  int v95;
  unsigned int v96;
  uint64_t v97;
  uint64_t v98;
  unsigned int v99;
  unsigned int v100;
  int64_t v101;
  uint64_t v103;
  unint64_t v104;
  unsigned int v105;
  unint64_t v106;
  uint64_t v107;
  int64_t v108;
  unsigned int v109;
  unsigned int v110;
  int v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unsigned int v116;
  unsigned int v117;
  unsigned int v118;
  int v119;
  unint64_t v120;
  int v121;
  unint64_t v122;
  unsigned int v123;
  uint64_t v124;
  unsigned int v125;
  unsigned int v126;
  unsigned int v127;
  uint64_t v128;
  unsigned int v129;
  int v130;
  int v131;
  int v132;
  int v133;
  int v134;
  int v135;
  char v136;
  unsigned __int8 v137;
  unsigned __int8 v138;
  char v139;
  char v140;
  char v141;

  v7 = result;
LABEL_2:
  v8 = (int *)(a2 - 5);
  i = v7;
  while (2)
  {
    v7 = i;
    v10 = a2 - i;
    v11 = 0xCCCCCCCCCCCCCCCDLL * (a2 - i);
    switch(v11)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v52 = *(unsigned __int8 *)(a2 - 1);
        v53 = *(unsigned __int8 *)(i + 4);
        if (v52 > v53 || v52 == v53 && *v8 < *(_DWORD *)i)
        {
          v139 = *(_BYTE *)(i + 4);
          v133 = *(_DWORD *)i;
          v54 = *v8;
          *(_BYTE *)(i + 4) = *(_BYTE *)(a2 - 1);
          *(_DWORD *)i = v54;
          *(_BYTE *)(a2 - 1) = v139;
          *v8 = v133;
        }
        return result;
      case 3:
        return (uint64_t)sub_19C3B53E0((int *)i, (int *)(i + 5), (int *)(a2 - 5));
      case 4:
        v55 = (int *)(i + 5);
        v56 = (int *)(i + 10);
        result = (uint64_t)sub_19C3B53E0((int *)i, (int *)(i + 5), (int *)(i + 10));
        v57 = *(unsigned __int8 *)(a2 - 1);
        v58 = *(unsigned __int8 *)(i + 14);
        if (v57 > v58 || v57 == v58 && *v8 < *v56)
        {
          v59 = *v56;
          v60 = *(_BYTE *)(i + 14);
          v61 = *(_BYTE *)(a2 - 1);
          *v56 = *v8;
          *(_BYTE *)(i + 14) = v61;
          *(_BYTE *)(a2 - 1) = v60;
          *v8 = v59;
          v62 = *(unsigned __int8 *)(i + 14);
          v63 = *(unsigned __int8 *)(i + 9);
          if (v62 > v63 || v62 == v63 && *v56 < *v55)
          {
            v64 = *(_BYTE *)(i + 9);
            v65 = *v55;
            *v55 = *v56;
            *(_BYTE *)(i + 9) = *(_BYTE *)(i + 14);
            *v56 = v65;
            *(_BYTE *)(i + 14) = v64;
            v66 = *(unsigned __int8 *)(i + 9);
            v67 = *(unsigned __int8 *)(i + 4);
            if (v66 > v67 || v66 == v67 && *(_DWORD *)(i + 5) < *(_DWORD *)i)
            {
              v140 = *(_BYTE *)(i + 4);
              v134 = *(_DWORD *)i;
              *(_DWORD *)i = *v55;
              *(_BYTE *)(i + 4) = *(_BYTE *)(i + 9);
              *v55 = v134;
              *(_BYTE *)(i + 9) = v140;
            }
          }
        }
        return result;
      case 5:
        return (uint64_t)sub_19C3B5540(i, i + 5, i + 10, (int *)(i + 15), (int *)(a2 - 5));
      default:
        if (v10 <= 119)
        {
          v68 = i + 5;
          v70 = i == a2 || v68 == a2;
          if ((a4 & 1) != 0)
          {
            if (v70)
              return result;
            v71 = 0;
            v72 = i;
            while (1)
            {
              v74 = v72;
              v72 = v68;
              v75 = *(unsigned __int8 *)(v74 + 9);
              v76 = *(unsigned __int8 *)(v74 + 4);
              if (v75 > v76)
                break;
              if (v75 == v76)
              {
                v77 = *(_DWORD *)v72;
                if (*(_DWORD *)v72 < *(_DWORD *)v74)
                  goto LABEL_125;
              }
LABEL_120:
              v68 = v72 + 5;
              v71 += 5;
              if (v72 + 5 == a2)
                return result;
            }
            v77 = *(_DWORD *)v72;
LABEL_125:
            *(_DWORD *)v72 = *(_DWORD *)v74;
            *(_BYTE *)(v72 + 4) = *(_BYTE *)(v74 + 4);
            v73 = i;
            if (v74 != i)
            {
              v78 = v71;
              while (1)
              {
                v79 = i + v78;
                v80 = (unsigned int *)(i + v78 - 5);
                v81 = *(unsigned __int8 *)(i + v78 - 1);
                if (v75 <= v81)
                {
                  if (v75 != v81)
                  {
                    v73 = i + v78;
                    goto LABEL_119;
                  }
                  if (v77 >= *v80)
                    break;
                }
                v74 -= 5;
                *(_DWORD *)v79 = *v80;
                *(_BYTE *)(v79 + 4) = *(_BYTE *)(i + v78 - 1);
                v78 -= 5;
                if (!v78)
                {
                  v73 = i;
                  goto LABEL_119;
                }
              }
              v73 = v74;
            }
LABEL_119:
            *(_DWORD *)v73 = v77;
            *(_BYTE *)(v73 + 4) = v75;
            goto LABEL_120;
          }
          if (v70)
            return result;
          while (1)
          {
            v124 = v7;
            v7 = v68;
            v125 = *(unsigned __int8 *)(v124 + 9);
            v126 = *(unsigned __int8 *)(v124 + 4);
            if (v125 > v126)
              break;
            if (v125 == v126)
            {
              v127 = *(_DWORD *)v7;
              if (*(_DWORD *)v7 < *(_DWORD *)v124)
                goto LABEL_200;
            }
LABEL_195:
            v68 = v7 + 5;
            if (v7 + 5 == a2)
              return result;
          }
          v127 = *(_DWORD *)v7;
          do
          {
            do
            {
LABEL_200:
              v128 = v124;
              *(_DWORD *)(v124 + 5) = *(_DWORD *)v124;
              *(_BYTE *)(v124 + 9) = *(_BYTE *)(v124 + 4);
              v124 -= 5;
              v129 = *(unsigned __int8 *)(v128 - 1);
            }
            while (v125 > v129);
          }
          while (v125 == v129 && v127 < *(_DWORD *)(v128 - 5));
          *(_DWORD *)v128 = v127;
          *(_BYTE *)(v128 + 4) = v125;
          goto LABEL_195;
        }
        if (!a3)
        {
          if (i == a2)
            return result;
          v82 = (unint64_t)(v11 - 2) >> 1;
          v83 = v82;
          do
          {
            v85 = v83;
            if (v82 >= v83)
            {
              v86 = (2 * v83) | 1;
              v87 = (unsigned int *)(i + 5 * v86);
              if (2 * v85 + 2 < v11)
              {
                v88 = *((unsigned __int8 *)v87 + 4);
                v89 = *((unsigned __int8 *)v87 + 9);
                if (v88 > v89 || v88 == v89 && *v87 < *(unsigned int *)((char *)v87 + 5))
                {
                  v87 = (unsigned int *)((char *)v87 + 5);
                  v86 = 2 * v85 + 2;
                }
              }
              v90 = *((unsigned __int8 *)v87 + 4);
              v91 = *(unsigned __int8 *)(i + 5 * v85 + 4);
              v92 = v90 == v91;
              if (v90 <= v91)
              {
                v93 = i + 5 * v85;
                v94 = *(_DWORD *)v93;
                if (!v92 || *v87 >= v94)
                {
                  v95 = *v87;
                  result = *((unsigned __int8 *)v87 + 4);
                  *(_BYTE *)(v93 + 4) = result;
                  *(_DWORD *)v93 = v95;
                  if (v82 >= v86)
                  {
                    while (1)
                    {
                      v97 = 2 * v86;
                      v86 = (2 * v86) | 1;
                      v84 = (unsigned int *)(i + 5 * v86);
                      v98 = v97 + 2;
                      if (v98 < v11)
                      {
                        result = *((unsigned __int8 *)v84 + 4);
                        v99 = *((unsigned __int8 *)v84 + 9);
                        if (result > v99
                          || (_DWORD)result == v99
                          && (result = *v84, result < *(unsigned int *)((char *)v84 + 5)))
                        {
                          v84 = (unsigned int *)((char *)v84 + 5);
                          v86 = v98;
                        }
                      }
                      v100 = *((unsigned __int8 *)v84 + 4);
                      if (v100 > v91 || v100 == v91 && *v84 < v94)
                        break;
                      v96 = *v84;
                      result = *((unsigned __int8 *)v84 + 4);
                      *((_BYTE *)v87 + 4) = result;
                      *v87 = v96;
                      v87 = v84;
                      if (v82 < v86)
                        goto LABEL_136;
                    }
                  }
                  v84 = v87;
LABEL_136:
                  *v84 = v94;
                  *((_BYTE *)v84 + 4) = v91;
                }
              }
            }
            v83 = v85 - 1;
          }
          while (v85);
          v101 = v10 / 5uLL;
          while (1)
          {
            v103 = 0;
            v141 = *(_BYTE *)(i + 4);
            v135 = *(_DWORD *)i;
            v104 = i;
            do
            {
              v106 = v104;
              v104 += 5 * (v103 + 1);
              v107 = 2 * v103;
              v103 = (2 * v103) | 1;
              v108 = v107 + 2;
              if (v108 < v101)
              {
                v109 = *(unsigned __int8 *)(v104 + 4);
                v110 = *(unsigned __int8 *)(v104 + 9);
                if (v109 > v110 || v109 == v110 && *(_DWORD *)v104 < *(_DWORD *)(v104 + 5))
                {
                  v104 += 5;
                  v103 = v108;
                }
              }
              v105 = *(_DWORD *)v104;
              *(_BYTE *)(v106 + 4) = *(_BYTE *)(v104 + 4);
              *(_DWORD *)v106 = v105;
            }
            while (v103 <= (uint64_t)((unint64_t)(v101 - 2) >> 1));
            a2 -= 5;
            if (v104 == a2)
            {
              *(_BYTE *)(v104 + 4) = v141;
              *(_DWORD *)v104 = v135;
            }
            else
            {
              v111 = *(_DWORD *)a2;
              *(_BYTE *)(v104 + 4) = *(_BYTE *)(a2 + 4);
              *(_DWORD *)v104 = v111;
              *(_BYTE *)(a2 + 4) = v141;
              *(_DWORD *)a2 = v135;
              v112 = v104 - i + 5;
              if (v112 >= 6)
              {
                v113 = v112 / 5uLL - 2;
                v114 = v113 >> 1;
                v115 = i + 5 * (v113 >> 1);
                v116 = *(unsigned __int8 *)(v115 + 4);
                v117 = *(unsigned __int8 *)(v104 + 4);
                if (v116 > v117)
                {
                  v118 = *(_DWORD *)v104;
LABEL_175:
                  v119 = *(_DWORD *)v115;
                  *(_BYTE *)(v104 + 4) = *(_BYTE *)(v115 + 4);
                  *(_DWORD *)v104 = v119;
                  if (v113 >= 2)
                  {
                    while (1)
                    {
                      v122 = v114 - 1;
                      v114 = (v114 - 1) >> 1;
                      v120 = i + 5 * v114;
                      v123 = *(unsigned __int8 *)(v120 + 4);
                      if (v123 <= v117 && (v123 != v117 || *(_DWORD *)v120 >= v118))
                        break;
                      v121 = *(_DWORD *)v120;
                      *(_BYTE *)(v115 + 4) = *(_BYTE *)(v120 + 4);
                      *(_DWORD *)v115 = v121;
                      v115 = i + 5 * v114;
                      if (v122 <= 1)
                        goto LABEL_177;
                    }
                  }
                  v120 = v115;
LABEL_177:
                  *(_DWORD *)v120 = v118;
                  *(_BYTE *)(v120 + 4) = v117;
                  goto LABEL_162;
                }
                if (v116 == v117)
                {
                  v118 = *(_DWORD *)v104;
                  if (*(_DWORD *)v115 < *(_DWORD *)v104)
                    goto LABEL_175;
                }
              }
            }
LABEL_162:
            if (v101-- <= 2)
              return result;
          }
        }
        v12 = 5 * ((unint64_t)v11 >> 1);
        v13 = i + v12;
        if ((unint64_t)v10 < 0x281)
        {
          result = (uint64_t)sub_19C3B53E0((int *)(v7 + v12), (int *)v7, (int *)(a2 - 5));
          --a3;
          if ((a4 & 1) != 0)
          {
LABEL_13:
            v17 = *(_DWORD *)v7;
            v16 = *(unsigned __int8 *)(v7 + 4);
            goto LABEL_14;
          }
        }
        else
        {
          sub_19C3B53E0((int *)v7, (int *)(v7 + v12), (int *)(a2 - 5));
          sub_19C3B53E0((int *)(v7 + 5), (int *)(v12 + v7 - 5), (int *)(a2 - 10));
          sub_19C3B53E0((int *)(v7 + 10), (int *)(v7 + 5 + v12), (int *)(a2 - 15));
          result = (uint64_t)sub_19C3B53E0((int *)(v12 + v7 - 5), (int *)(v7 + v12), (int *)(v7 + 5 + v12));
          v136 = *(_BYTE *)(v7 + 4);
          v130 = *(_DWORD *)v7;
          v14 = *(_BYTE *)(v13 + 4);
          *(_DWORD *)v7 = *(_DWORD *)v13;
          *(_BYTE *)(v7 + 4) = v14;
          *(_BYTE *)(v13 + 4) = v136;
          *(_DWORD *)v13 = v130;
          --a3;
          if ((a4 & 1) != 0)
            goto LABEL_13;
        }
        v15 = *(unsigned __int8 *)(v7 - 1);
        v16 = *(unsigned __int8 *)(v7 + 4);
        v17 = *(_DWORD *)v7;
        if (v15 > v16)
          goto LABEL_14;
        if (v15 != v16 || *(_DWORD *)(v7 - 5) >= v17)
        {
          v37 = *(unsigned __int8 *)(a2 - 1);
          if (v16 > v37 || v16 == v37 && v17 < *v8)
          {
            v38 = *(unsigned __int8 *)(v7 + 9);
            if (v16 <= v38)
            {
              v40 = (unsigned __int8 *)(v7 + 14);
              do
              {
                if (v16 == v38 && v17 < *(_DWORD *)(v40 - 9))
                  break;
                v41 = *v40;
                v40 += 5;
                v38 = v41;
              }
              while (v16 <= v41);
              i = (unint64_t)(v40 - 9);
            }
            else
            {
              i = v7 + 5;
            }
          }
          else
          {
            for (i = v7 + 5; i < a2; i += 5)
            {
              v39 = *(unsigned __int8 *)(i + 4);
              if (v16 > v39 || v16 == v39 && v17 < *(_DWORD *)i)
                break;
            }
          }
          v42 = (unsigned __int8 *)a2;
          if (i < a2)
          {
            for (j = (unsigned __int8 *)(a2 - 6); v16 > v37 || v16 == v37 && v17 < *(_DWORD *)(j + 1); j -= 5)
            {
              v44 = *j;
              v37 = v44;
            }
            v42 = j + 1;
          }
          while (i < (unint64_t)v42)
          {
            v138 = *(_BYTE *)(i + 4);
            v132 = *(_DWORD *)i;
            v45 = *(_DWORD *)v42;
            *(_BYTE *)(i + 4) = v42[4];
            *(_DWORD *)i = v45;
            v42[4] = v138;
            *(_DWORD *)v42 = v132;
            v46 = *(unsigned __int8 *)(i + 9);
            if (v16 <= v46)
            {
              v47 = (unsigned __int8 *)(i + 14);
              do
              {
                if (v16 == v46 && v17 < *(_DWORD *)(v47 - 9))
                  break;
                v48 = *v47;
                v47 += 5;
                v46 = v48;
              }
              while (v16 <= v48);
              i = (unint64_t)(v47 - 9);
            }
            else
            {
              i += 5;
            }
            v49 = v42 - 5;
            do
            {
              do
              {
                v42 = v49;
                v50 = v49[4];
                v49 -= 5;
              }
              while (v16 > v50);
            }
            while (v16 == v50 && v17 < *(_DWORD *)v42);
          }
          if (i - 5 != v7)
          {
            v51 = *(_DWORD *)(i - 5);
            *(_BYTE *)(v7 + 4) = *(_BYTE *)(i - 1);
            *(_DWORD *)v7 = v51;
          }
          a4 = 0;
          *(_DWORD *)(i - 5) = v17;
          *(_BYTE *)(i - 1) = v16;
          continue;
        }
        v16 = *(unsigned __int8 *)(v7 - 1);
LABEL_14:
        for (k = v7 + 5; ; k += 5)
        {
          v19 = *(unsigned __int8 *)(k + 4);
          if (v19 <= v16 && (v19 != v16 || *(_DWORD *)k >= v17))
            break;
        }
        if (k - 5 == v7)
        {
          v22 = (unsigned __int8 *)a2;
          if (k < a2)
          {
            v24 = *(unsigned __int8 *)(a2 - 1);
            v22 = (unsigned __int8 *)(a2 - 5);
            if (v24 <= v16)
            {
              v21 = (unsigned __int8 *)(a2 - 6);
              v22 = (unsigned __int8 *)(a2 - 5);
              while (1)
              {
                v35 = (unsigned int *)(v21 + 1);
                if (v24 == v16)
                {
                  if (*v35 < v17 || k >= (unint64_t)v35)
                    goto LABEL_25;
                }
                else if (k >= (unint64_t)v35)
                {
                  break;
                }
                v22 -= 5;
                v34 = *v21;
                v21 -= 5;
                v24 = v34;
                if (v34 > v16)
                  goto LABEL_25;
              }
            }
          }
        }
        else
        {
          v20 = *(unsigned __int8 *)(a2 - 1);
          v21 = (unsigned __int8 *)(a2 - 6);
          v22 = (unsigned __int8 *)(a2 - 5);
          if (v20 <= v16)
          {
            do
            {
              if (v20 == v16 && *(_DWORD *)(v21 + 1) < v17)
                break;
              v23 = *v21;
              v21 -= 5;
              v20 = v23;
            }
            while (v23 <= v16);
LABEL_25:
            v22 = v21 + 1;
          }
        }
        i = k;
        if (k < (unint64_t)v22)
        {
          i = k;
          v25 = v22;
          do
          {
            while (1)
            {
              v137 = *(_BYTE *)(i + 4);
              v131 = *(_DWORD *)i;
              v26 = *(_DWORD *)v25;
              *(_BYTE *)(i + 4) = v25[4];
              *(_DWORD *)i = v26;
              v25[4] = v137;
              *(_DWORD *)v25 = v131;
              v27 = i + 5;
              do
              {
                do
                {
                  i = v27;
                  v28 = *(unsigned __int8 *)(v27 + 4);
                  v27 += 5;
                }
                while (v28 > v16);
              }
              while (v28 == v16 && *(_DWORD *)i < v17);
              v29 = *(v25 - 1);
              if (v29 <= v16)
                break;
              v25 -= 5;
              if (i >= (unint64_t)v25)
                goto LABEL_41;
            }
            v30 = v25 - 6;
            do
            {
              if (v29 == v16 && *(_DWORD *)(v30 + 1) < v17)
                break;
              v31 = *v30;
              v30 -= 5;
              v29 = v31;
            }
            while (v31 <= v16);
            v25 = v30 + 1;
          }
          while (i < (unint64_t)v25);
        }
LABEL_41:
        if (i - 5 != v7)
        {
          v32 = *(_DWORD *)(i - 5);
          *(_BYTE *)(v7 + 4) = *(_BYTE *)(i - 1);
          *(_DWORD *)v7 = v32;
        }
        *(_DWORD *)(i - 5) = v17;
        *(_BYTE *)(i - 1) = v16;
        if (k < (unint64_t)v22)
        {
LABEL_46:
          result = sub_19C3B61FC(v7, i - 5, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v33 = sub_19C3B6D80(v7, i - 5);
        result = sub_19C3B6D80(i, a2);
        if (!(_DWORD)result)
        {
          if (v33)
            continue;
          goto LABEL_46;
        }
        a2 = i - 5;
        if (!v33)
          goto LABEL_2;
        return result;
    }
  }
}

BOOL sub_19C3B6D80(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  int *v6;
  unsigned int v7;
  unsigned int v8;
  char v9;
  int v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  int *v24;
  int *v25;
  int *v26;
  unsigned int v27;
  unsigned int v28;
  char v29;
  int v30;
  char v31;
  unsigned int v32;
  unsigned int v33;
  char v34;
  int v35;
  unsigned int v36;
  unsigned int v37;
  char v38;
  int v39;

  v4 = 0xCCCCCCCCCCCCCCCDLL * (a2 - a1);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = (int *)(a2 - 5);
      v7 = *(unsigned __int8 *)(a2 - 1);
      v8 = *(unsigned __int8 *)(a1 + 4);
      if (v7 > v8 || v7 == v8 && *v6 < *(_DWORD *)a1)
      {
        v9 = *(_BYTE *)(a1 + 4);
        v10 = *(_DWORD *)a1;
        v11 = *(_BYTE *)(a2 - 1);
        *(_DWORD *)a1 = *v6;
        *(_BYTE *)(a1 + 4) = v11;
        *v6 = v10;
        *(_BYTE *)(a2 - 1) = v9;
      }
      return result;
    case 3uLL:
      sub_19C3B53E0((int *)a1, (int *)(a1 + 5), (int *)(a2 - 5));
      return 1;
    case 4uLL:
      v24 = (int *)(a1 + 5);
      v25 = (int *)(a1 + 10);
      v26 = (int *)(a2 - 5);
      sub_19C3B53E0((int *)a1, (int *)(a1 + 5), (int *)(a1 + 10));
      v27 = *(unsigned __int8 *)(a2 - 1);
      v28 = *(unsigned __int8 *)(a1 + 14);
      if (v27 > v28 || v27 == v28 && *v26 < *v25)
      {
        v29 = *(_BYTE *)(a1 + 14);
        v30 = *v25;
        v31 = *(_BYTE *)(a2 - 1);
        *v25 = *v26;
        *(_BYTE *)(a1 + 14) = v31;
        *v26 = v30;
        *(_BYTE *)(a2 - 1) = v29;
        v32 = *(unsigned __int8 *)(a1 + 14);
        v33 = *(unsigned __int8 *)(a1 + 9);
        if (v32 > v33 || v32 == v33 && *v25 < *v24)
        {
          v34 = *(_BYTE *)(a1 + 9);
          v35 = *v24;
          *v24 = *v25;
          *(_BYTE *)(a1 + 9) = *(_BYTE *)(a1 + 14);
          *v25 = v35;
          *(_BYTE *)(a1 + 14) = v34;
          v36 = *(unsigned __int8 *)(a1 + 9);
          v37 = *(unsigned __int8 *)(a1 + 4);
          if (v36 > v37 || v36 == v37 && *(_DWORD *)(a1 + 5) < *(_DWORD *)a1)
          {
            v38 = *(_BYTE *)(a1 + 4);
            v39 = *(_DWORD *)a1;
            *(_DWORD *)a1 = *v24;
            *(_BYTE *)(a1 + 4) = *(_BYTE *)(a1 + 9);
            *v24 = v39;
            *(_BYTE *)(a1 + 9) = v38;
          }
        }
      }
      return 1;
    case 5uLL:
      sub_19C3B5540(a1, a1 + 5, a1 + 10, (int *)(a1 + 15), (int *)(a2 - 5));
      return 1;
    default:
      v12 = a1 + 10;
      sub_19C3B53E0((int *)a1, (int *)(a1 + 5), (int *)(a1 + 10));
      v13 = a1 + 15;
      if (a1 + 15 == a2)
        return 1;
      v14 = 0;
      v15 = 0;
      break;
  }
  while (1)
  {
    v17 = *(unsigned __int8 *)(v13 + 4);
    v18 = *(unsigned __int8 *)(v12 + 4);
    if (v17 > v18)
      break;
    if (v17 == v18)
    {
      v19 = *(_DWORD *)v13;
      if (*(_DWORD *)v13 < *(_DWORD *)v12)
        goto LABEL_11;
    }
LABEL_8:
    v12 = v13;
    v14 += 5;
    v13 += 5;
    if (v13 == a2)
      return 1;
  }
  v19 = *(_DWORD *)v13;
LABEL_11:
  *(_DWORD *)v13 = *(_DWORD *)v12;
  *(_BYTE *)(v13 + 4) = *(_BYTE *)(v12 + 4);
  v16 = a1;
  if (v12 != a1)
  {
    v20 = v14;
    while (1)
    {
      v21 = a1 + v20;
      v22 = (unsigned int *)(a1 + v20 + 5);
      v23 = *(unsigned __int8 *)(a1 + v20 + 9);
      if (v17 <= v23)
      {
        if (v17 != v23)
        {
          v16 = v12;
          goto LABEL_7;
        }
        if (v19 >= *v22)
          break;
      }
      v12 -= 5;
      *(_DWORD *)(v21 + 10) = *v22;
      *(_BYTE *)(v21 + 14) = *(_BYTE *)(a1 + v20 + 9);
      v20 -= 5;
      if (v20 == -10)
      {
        v16 = a1;
        goto LABEL_7;
      }
    }
    v16 = a1 + v20 + 10;
  }
LABEL_7:
  *(_DWORD *)v16 = v19;
  *(_BYTE *)(v16 + 4) = v17;
  if (++v15 != 8)
    goto LABEL_8;
  return v13 + 5 == a2;
}

uint64_t sub_19C3B7074(uint64_t result)
{
  unsigned int v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int *v15;
  uint64_t v16;
  _BYTE *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  _BYTE *v25;
  _BYTE *v26;
  int v27;
  char v28;
  uint64_t v29;
  int v30;
  _BYTE *v31;
  unsigned int v32;
  _DWORD *v33;
  int v34;
  unsigned int v35;
  _DWORD *v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  _DWORD *v41;
  int v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  char *v46;

  v1 = *(_DWORD *)(result + 72);
  if (v1 < 2)
    return result;
  v2 = result;
  v3 = *(unsigned int *)(result + 40);
  if (!(_DWORD)v3)
    return result;
  v4 = *(unsigned int *)(result + 48);
  if (!(_DWORD)v4)
    return result;
  v5 = *(unsigned int *)(result + 56);
  if (v5 < 2)
    return result;
  v6 = *(uint64_t **)(result + 8);
  v7 = *v6;
  v8 = *((unsigned __int8 *)v6 + 16);
  if (v1 + 1 >= *((unsigned __int8 *)v6 + 36))
  {
    v12 = v8 + 8;
  }
  else
  {
    v9 = (unsigned int *)(v7 + v5);
    v10 = *v9;
    if (v1 == 2)
    {
      v11 = v10 >> 15;
    }
    else
    {
      v13 = 5 * v1 + ((v10 >> 10) & 0x1F) + 5;
      v14 = v13 & 0x1F;
      v15 = &v9[v13 >> 5];
      v11 = *v15 >> v13;
      if (v14 >= 0x1C)
        v11 |= v15[1] << -(char)v14;
    }
    v12 = v8 + (v11 & 0x1F) + 16;
  }
  v16 = *(_QWORD *)(result + 16);
  v17 = *(_BYTE **)(result + 24);
  v18 = 0xCCCCCCCCCCCCCCCDLL * (_QWORD)&v17[-v16];
  v19 = v4 - v18;
  if (v4 <= v18)
  {
    if (v4 < v18)
      *(_QWORD *)(result + 24) = v16 + 5 * v4;
  }
  else
  {
    v20 = *(_QWORD *)(result + 32);
    if (0xCCCCCCCCCCCCCCCDLL * (v20 - (_QWORD)v17) >= v19)
    {
      bzero(*(void **)(result + 24), 5 * ((5 * v19 - 5) / 5) + 5);
      *(_QWORD *)(v2 + 24) = &v17[5 * ((5 * v19 - 5) / 5) + 5];
    }
    else
    {
      v21 = 0xCCCCCCCCCCCCCCCDLL * (v20 - v16);
      v22 = 0x999999999999999ALL * (v20 - v16);
      if (v22 > v4)
        v4 = v22;
      if (v21 >= 0x1999999999999999)
        v4 = 0x3333333333333333;
      if (v4 >= 0x3333333333333334)
        sub_19C2A143C();
      v23 = 5 * v4;
      v24 = (char *)operator new(5 * v4);
      v25 = &v17[(_QWORD)v24 - v16];
      v46 = &v24[v23];
      bzero(v25, 5 * ((5 * v19 - 5) / 5) + 5);
      v26 = &v25[5 * ((5 * v19 - 5) / 5) + 5];
      if (v17 != (_BYTE *)v16)
      {
        do
        {
          v27 = *(_DWORD *)(v17 - 5);
          v17 -= 5;
          v28 = v17[4];
          *(_DWORD *)(v25 - 5) = v27;
          v25 -= 5;
          v25[4] = v28;
        }
        while (v17 != (_BYTE *)v16);
        v17 = *(_BYTE **)(v2 + 16);
      }
      *(_QWORD *)(v2 + 16) = v25;
      *(_QWORD *)(v2 + 24) = v26;
      *(_QWORD *)(v2 + 32) = v46;
      if (v17)
        operator delete(v17);
    }
    v4 = *(unsigned int *)(v2 + 48);
    v16 = *(_QWORD *)(v2 + 16);
    if (!(_DWORD)v4)
      goto LABEL_40;
  }
  v29 = v7 + v3;
  v30 = *(_DWORD *)(v2 + 44);
  if (v8)
  {
    v31 = (_BYTE *)(v16 + 4);
    v32 = v12 * v30;
    do
    {
      v33 = (_DWORD *)(v29 + 4 * (v32 >> 5));
      v34 = *v33 >> v32;
      if ((v32 & 0x1F) + v8 >= 0x21)
        v34 |= v33[1] << -(v32 & 0x1F);
      *((_DWORD *)v31 - 1) = v34 & (0xFFFFFFFF >> -(char)v8);
      v35 = (v8 + v32) & 0x1F;
      v36 = (_DWORD *)(v29 + 4 * ((v8 + v32) >> 5));
      v37 = *v36 >> (v8 + v32);
      if (v35 >= 0x19)
        v37 |= v36[1] << -(char)v35;
      *v31 = v37;
      v31 += 5;
      v32 += v12;
      --v4;
    }
    while (v4);
  }
  else
  {
    v38 = 0;
    v39 = 5 * v4;
    v40 = v12 * v30;
    do
    {
      *(_DWORD *)(v16 + v38) = 0;
      v41 = (_DWORD *)(v29 + 4 * (v40 >> 5));
      v42 = *v41 >> v40;
      if ((v40 & 0x1F) >= 0x19)
        v42 |= v41[1] << -(v40 & 0x1F);
      *(_BYTE *)(v16 + v38 + 4) = v42;
      v38 += 5;
      v40 += v12;
    }
    while (v39 != v38);
  }
LABEL_40:
  v43 = *(_QWORD *)(v2 + 24);
  v44 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * (v43 - v16));
  if (v43 == v16)
    v45 = 0;
  else
    v45 = v44;
  return sub_19C3B7404(v16, v43, v45, 1);
}

uint64_t sub_19C3B7404(uint64_t result, unint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  int *v8;
  unint64_t i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unint64_t k;
  unsigned int v19;
  unsigned int v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned __int8 *v25;
  int v26;
  unint64_t v27;
  unsigned int v28;
  unsigned int v29;
  unsigned __int8 *v30;
  unsigned int v31;
  int v32;
  BOOL v33;
  unsigned int v34;
  unsigned int *v35;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned __int8 *v40;
  unsigned int v41;
  unsigned __int8 *v42;
  unsigned __int8 *j;
  unsigned int v44;
  int v45;
  unsigned int v46;
  unsigned __int8 *v47;
  unsigned int v48;
  unsigned __int8 *v49;
  unsigned int v50;
  int v51;
  unsigned int v52;
  unsigned int v53;
  int v54;
  int *v55;
  int *v56;
  unsigned int v57;
  unsigned int v58;
  int v59;
  char v60;
  char v61;
  unsigned int v62;
  unsigned int v63;
  char v64;
  int v65;
  unsigned int v66;
  unsigned int v67;
  uint64_t v68;
  BOOL v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int *v80;
  unsigned int v81;
  int64_t v82;
  int64_t v83;
  unsigned int *v84;
  int64_t v85;
  uint64_t v86;
  unsigned int *v87;
  unsigned int v88;
  unsigned int v89;
  unsigned int v90;
  unsigned int v91;
  BOOL v92;
  unint64_t v93;
  unsigned int v94;
  int v95;
  unsigned int v96;
  uint64_t v97;
  uint64_t v98;
  unsigned int v99;
  unsigned int v100;
  int64_t v101;
  uint64_t v103;
  unint64_t v104;
  unsigned int v105;
  unint64_t v106;
  uint64_t v107;
  int64_t v108;
  unsigned int v109;
  unsigned int v110;
  int v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unsigned int v116;
  unsigned int v117;
  unsigned int v118;
  int v119;
  unint64_t v120;
  int v121;
  unint64_t v122;
  unsigned int v123;
  uint64_t v124;
  unsigned int v125;
  unsigned int v126;
  unsigned int v127;
  uint64_t v128;
  unsigned int v129;
  int v130;
  int v131;
  int v132;
  int v133;
  int v134;
  int v135;
  char v136;
  unsigned __int8 v137;
  unsigned __int8 v138;
  char v139;
  char v140;
  char v141;

  v7 = result;
LABEL_2:
  v8 = (int *)(a2 - 5);
  i = v7;
  while (2)
  {
    v7 = i;
    v10 = a2 - i;
    v11 = 0xCCCCCCCCCCCCCCCDLL * (a2 - i);
    switch(v11)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v52 = *(unsigned __int8 *)(a2 - 1);
        v53 = *(unsigned __int8 *)(i + 4);
        if (v52 > v53 || v52 == v53 && *v8 < *(_DWORD *)i)
        {
          v139 = *(_BYTE *)(i + 4);
          v133 = *(_DWORD *)i;
          v54 = *v8;
          *(_BYTE *)(i + 4) = *(_BYTE *)(a2 - 1);
          *(_DWORD *)i = v54;
          *(_BYTE *)(a2 - 1) = v139;
          *v8 = v133;
        }
        return result;
      case 3:
        return (uint64_t)sub_19C3B53E0((int *)i, (int *)(i + 5), (int *)(a2 - 5));
      case 4:
        v55 = (int *)(i + 5);
        v56 = (int *)(i + 10);
        result = (uint64_t)sub_19C3B53E0((int *)i, (int *)(i + 5), (int *)(i + 10));
        v57 = *(unsigned __int8 *)(a2 - 1);
        v58 = *(unsigned __int8 *)(i + 14);
        if (v57 > v58 || v57 == v58 && *v8 < *v56)
        {
          v59 = *v56;
          v60 = *(_BYTE *)(i + 14);
          v61 = *(_BYTE *)(a2 - 1);
          *v56 = *v8;
          *(_BYTE *)(i + 14) = v61;
          *(_BYTE *)(a2 - 1) = v60;
          *v8 = v59;
          v62 = *(unsigned __int8 *)(i + 14);
          v63 = *(unsigned __int8 *)(i + 9);
          if (v62 > v63 || v62 == v63 && *v56 < *v55)
          {
            v64 = *(_BYTE *)(i + 9);
            v65 = *v55;
            *v55 = *v56;
            *(_BYTE *)(i + 9) = *(_BYTE *)(i + 14);
            *v56 = v65;
            *(_BYTE *)(i + 14) = v64;
            v66 = *(unsigned __int8 *)(i + 9);
            v67 = *(unsigned __int8 *)(i + 4);
            if (v66 > v67 || v66 == v67 && *(_DWORD *)(i + 5) < *(_DWORD *)i)
            {
              v140 = *(_BYTE *)(i + 4);
              v134 = *(_DWORD *)i;
              *(_DWORD *)i = *v55;
              *(_BYTE *)(i + 4) = *(_BYTE *)(i + 9);
              *v55 = v134;
              *(_BYTE *)(i + 9) = v140;
            }
          }
        }
        return result;
      case 5:
        return (uint64_t)sub_19C3B5540(i, i + 5, i + 10, (int *)(i + 15), (int *)(a2 - 5));
      default:
        if (v10 <= 119)
        {
          v68 = i + 5;
          v70 = i == a2 || v68 == a2;
          if ((a4 & 1) != 0)
          {
            if (v70)
              return result;
            v71 = 0;
            v72 = i;
            while (1)
            {
              v74 = v72;
              v72 = v68;
              v75 = *(unsigned __int8 *)(v74 + 9);
              v76 = *(unsigned __int8 *)(v74 + 4);
              if (v75 > v76)
                break;
              if (v75 == v76)
              {
                v77 = *(_DWORD *)v72;
                if (*(_DWORD *)v72 < *(_DWORD *)v74)
                  goto LABEL_125;
              }
LABEL_120:
              v68 = v72 + 5;
              v71 += 5;
              if (v72 + 5 == a2)
                return result;
            }
            v77 = *(_DWORD *)v72;
LABEL_125:
            *(_DWORD *)v72 = *(_DWORD *)v74;
            *(_BYTE *)(v72 + 4) = *(_BYTE *)(v74 + 4);
            v73 = i;
            if (v74 != i)
            {
              v78 = v71;
              while (1)
              {
                v79 = i + v78;
                v80 = (unsigned int *)(i + v78 - 5);
                v81 = *(unsigned __int8 *)(i + v78 - 1);
                if (v75 <= v81)
                {
                  if (v75 != v81)
                  {
                    v73 = i + v78;
                    goto LABEL_119;
                  }
                  if (v77 >= *v80)
                    break;
                }
                v74 -= 5;
                *(_DWORD *)v79 = *v80;
                *(_BYTE *)(v79 + 4) = *(_BYTE *)(i + v78 - 1);
                v78 -= 5;
                if (!v78)
                {
                  v73 = i;
                  goto LABEL_119;
                }
              }
              v73 = v74;
            }
LABEL_119:
            *(_DWORD *)v73 = v77;
            *(_BYTE *)(v73 + 4) = v75;
            goto LABEL_120;
          }
          if (v70)
            return result;
          while (1)
          {
            v124 = v7;
            v7 = v68;
            v125 = *(unsigned __int8 *)(v124 + 9);
            v126 = *(unsigned __int8 *)(v124 + 4);
            if (v125 > v126)
              break;
            if (v125 == v126)
            {
              v127 = *(_DWORD *)v7;
              if (*(_DWORD *)v7 < *(_DWORD *)v124)
                goto LABEL_200;
            }
LABEL_195:
            v68 = v7 + 5;
            if (v7 + 5 == a2)
              return result;
          }
          v127 = *(_DWORD *)v7;
          do
          {
            do
            {
LABEL_200:
              v128 = v124;
              *(_DWORD *)(v124 + 5) = *(_DWORD *)v124;
              *(_BYTE *)(v124 + 9) = *(_BYTE *)(v124 + 4);
              v124 -= 5;
              v129 = *(unsigned __int8 *)(v128 - 1);
            }
            while (v125 > v129);
          }
          while (v125 == v129 && v127 < *(_DWORD *)(v128 - 5));
          *(_DWORD *)v128 = v127;
          *(_BYTE *)(v128 + 4) = v125;
          goto LABEL_195;
        }
        if (!a3)
        {
          if (i == a2)
            return result;
          v82 = (unint64_t)(v11 - 2) >> 1;
          v83 = v82;
          do
          {
            v85 = v83;
            if (v82 >= v83)
            {
              v86 = (2 * v83) | 1;
              v87 = (unsigned int *)(i + 5 * v86);
              if (2 * v85 + 2 < v11)
              {
                v88 = *((unsigned __int8 *)v87 + 4);
                v89 = *((unsigned __int8 *)v87 + 9);
                if (v88 > v89 || v88 == v89 && *v87 < *(unsigned int *)((char *)v87 + 5))
                {
                  v87 = (unsigned int *)((char *)v87 + 5);
                  v86 = 2 * v85 + 2;
                }
              }
              v90 = *((unsigned __int8 *)v87 + 4);
              v91 = *(unsigned __int8 *)(i + 5 * v85 + 4);
              v92 = v90 == v91;
              if (v90 <= v91)
              {
                v93 = i + 5 * v85;
                v94 = *(_DWORD *)v93;
                if (!v92 || *v87 >= v94)
                {
                  v95 = *v87;
                  result = *((unsigned __int8 *)v87 + 4);
                  *(_BYTE *)(v93 + 4) = result;
                  *(_DWORD *)v93 = v95;
                  if (v82 >= v86)
                  {
                    while (1)
                    {
                      v97 = 2 * v86;
                      v86 = (2 * v86) | 1;
                      v84 = (unsigned int *)(i + 5 * v86);
                      v98 = v97 + 2;
                      if (v98 < v11)
                      {
                        result = *((unsigned __int8 *)v84 + 4);
                        v99 = *((unsigned __int8 *)v84 + 9);
                        if (result > v99
                          || (_DWORD)result == v99
                          && (result = *v84, result < *(unsigned int *)((char *)v84 + 5)))
                        {
                          v84 = (unsigned int *)((char *)v84 + 5);
                          v86 = v98;
                        }
                      }
                      v100 = *((unsigned __int8 *)v84 + 4);
                      if (v100 > v91 || v100 == v91 && *v84 < v94)
                        break;
                      v96 = *v84;
                      result = *((unsigned __int8 *)v84 + 4);
                      *((_BYTE *)v87 + 4) = result;
                      *v87 = v96;
                      v87 = v84;
                      if (v82 < v86)
                        goto LABEL_136;
                    }
                  }
                  v84 = v87;
LABEL_136:
                  *v84 = v94;
                  *((_BYTE *)v84 + 4) = v91;
                }
              }
            }
            v83 = v85 - 1;
          }
          while (v85);
          v101 = v10 / 5uLL;
          while (1)
          {
            v103 = 0;
            v141 = *(_BYTE *)(i + 4);
            v135 = *(_DWORD *)i;
            v104 = i;
            do
            {
              v106 = v104;
              v104 += 5 * (v103 + 1);
              v107 = 2 * v103;
              v103 = (2 * v103) | 1;
              v108 = v107 + 2;
              if (v108 < v101)
              {
                v109 = *(unsigned __int8 *)(v104 + 4);
                v110 = *(unsigned __int8 *)(v104 + 9);
                if (v109 > v110 || v109 == v110 && *(_DWORD *)v104 < *(_DWORD *)(v104 + 5))
                {
                  v104 += 5;
                  v103 = v108;
                }
              }
              v105 = *(_DWORD *)v104;
              *(_BYTE *)(v106 + 4) = *(_BYTE *)(v104 + 4);
              *(_DWORD *)v106 = v105;
            }
            while (v103 <= (uint64_t)((unint64_t)(v101 - 2) >> 1));
            a2 -= 5;
            if (v104 == a2)
            {
              *(_BYTE *)(v104 + 4) = v141;
              *(_DWORD *)v104 = v135;
            }
            else
            {
              v111 = *(_DWORD *)a2;
              *(_BYTE *)(v104 + 4) = *(_BYTE *)(a2 + 4);
              *(_DWORD *)v104 = v111;
              *(_BYTE *)(a2 + 4) = v141;
              *(_DWORD *)a2 = v135;
              v112 = v104 - i + 5;
              if (v112 >= 6)
              {
                v113 = v112 / 5uLL - 2;
                v114 = v113 >> 1;
                v115 = i + 5 * (v113 >> 1);
                v116 = *(unsigned __int8 *)(v115 + 4);
                v117 = *(unsigned __int8 *)(v104 + 4);
                if (v116 > v117)
                {
                  v118 = *(_DWORD *)v104;
LABEL_175:
                  v119 = *(_DWORD *)v115;
                  *(_BYTE *)(v104 + 4) = *(_BYTE *)(v115 + 4);
                  *(_DWORD *)v104 = v119;
                  if (v113 >= 2)
                  {
                    while (1)
                    {
                      v122 = v114 - 1;
                      v114 = (v114 - 1) >> 1;
                      v120 = i + 5 * v114;
                      v123 = *(unsigned __int8 *)(v120 + 4);
                      if (v123 <= v117 && (v123 != v117 || *(_DWORD *)v120 >= v118))
                        break;
                      v121 = *(_DWORD *)v120;
                      *(_BYTE *)(v115 + 4) = *(_BYTE *)(v120 + 4);
                      *(_DWORD *)v115 = v121;
                      v115 = i + 5 * v114;
                      if (v122 <= 1)
                        goto LABEL_177;
                    }
                  }
                  v120 = v115;
LABEL_177:
                  *(_DWORD *)v120 = v118;
                  *(_BYTE *)(v120 + 4) = v117;
                  goto LABEL_162;
                }
                if (v116 == v117)
                {
                  v118 = *(_DWORD *)v104;
                  if (*(_DWORD *)v115 < *(_DWORD *)v104)
                    goto LABEL_175;
                }
              }
            }
LABEL_162:
            if (v101-- <= 2)
              return result;
          }
        }
        v12 = 5 * ((unint64_t)v11 >> 1);
        v13 = i + v12;
        if ((unint64_t)v10 < 0x281)
        {
          result = (uint64_t)sub_19C3B53E0((int *)(v7 + v12), (int *)v7, (int *)(a2 - 5));
          --a3;
          if ((a4 & 1) != 0)
          {
LABEL_13:
            v17 = *(_DWORD *)v7;
            v16 = *(unsigned __int8 *)(v7 + 4);
            goto LABEL_14;
          }
        }
        else
        {
          sub_19C3B53E0((int *)v7, (int *)(v7 + v12), (int *)(a2 - 5));
          sub_19C3B53E0((int *)(v7 + 5), (int *)(v12 + v7 - 5), (int *)(a2 - 10));
          sub_19C3B53E0((int *)(v7 + 10), (int *)(v7 + 5 + v12), (int *)(a2 - 15));
          result = (uint64_t)sub_19C3B53E0((int *)(v12 + v7 - 5), (int *)(v7 + v12), (int *)(v7 + 5 + v12));
          v136 = *(_BYTE *)(v7 + 4);
          v130 = *(_DWORD *)v7;
          v14 = *(_BYTE *)(v13 + 4);
          *(_DWORD *)v7 = *(_DWORD *)v13;
          *(_BYTE *)(v7 + 4) = v14;
          *(_BYTE *)(v13 + 4) = v136;
          *(_DWORD *)v13 = v130;
          --a3;
          if ((a4 & 1) != 0)
            goto LABEL_13;
        }
        v15 = *(unsigned __int8 *)(v7 - 1);
        v16 = *(unsigned __int8 *)(v7 + 4);
        v17 = *(_DWORD *)v7;
        if (v15 > v16)
          goto LABEL_14;
        if (v15 != v16 || *(_DWORD *)(v7 - 5) >= v17)
        {
          v37 = *(unsigned __int8 *)(a2 - 1);
          if (v16 > v37 || v16 == v37 && v17 < *v8)
          {
            v38 = *(unsigned __int8 *)(v7 + 9);
            if (v16 <= v38)
            {
              v40 = (unsigned __int8 *)(v7 + 14);
              do
              {
                if (v16 == v38 && v17 < *(_DWORD *)(v40 - 9))
                  break;
                v41 = *v40;
                v40 += 5;
                v38 = v41;
              }
              while (v16 <= v41);
              i = (unint64_t)(v40 - 9);
            }
            else
            {
              i = v7 + 5;
            }
          }
          else
          {
            for (i = v7 + 5; i < a2; i += 5)
            {
              v39 = *(unsigned __int8 *)(i + 4);
              if (v16 > v39 || v16 == v39 && v17 < *(_DWORD *)i)
                break;
            }
          }
          v42 = (unsigned __int8 *)a2;
          if (i < a2)
          {
            for (j = (unsigned __int8 *)(a2 - 6); v16 > v37 || v16 == v37 && v17 < *(_DWORD *)(j + 1); j -= 5)
            {
              v44 = *j;
              v37 = v44;
            }
            v42 = j + 1;
          }
          while (i < (unint64_t)v42)
          {
            v138 = *(_BYTE *)(i + 4);
            v132 = *(_DWORD *)i;
            v45 = *(_DWORD *)v42;
            *(_BYTE *)(i + 4) = v42[4];
            *(_DWORD *)i = v45;
            v42[4] = v138;
            *(_DWORD *)v42 = v132;
            v46 = *(unsigned __int8 *)(i + 9);
            if (v16 <= v46)
            {
              v47 = (unsigned __int8 *)(i + 14);
              do
              {
                if (v16 == v46 && v17 < *(_DWORD *)(v47 - 9))
                  break;
                v48 = *v47;
                v47 += 5;
                v46 = v48;
              }
              while (v16 <= v48);
              i = (unint64_t)(v47 - 9);
            }
            else
            {
              i += 5;
            }
            v49 = v42 - 5;
            do
            {
              do
              {
                v42 = v49;
                v50 = v49[4];
                v49 -= 5;
              }
              while (v16 > v50);
            }
            while (v16 == v50 && v17 < *(_DWORD *)v42);
          }
          if (i - 5 != v7)
          {
            v51 = *(_DWORD *)(i - 5);
            *(_BYTE *)(v7 + 4) = *(_BYTE *)(i - 1);
            *(_DWORD *)v7 = v51;
          }
          a4 = 0;
          *(_DWORD *)(i - 5) = v17;
          *(_BYTE *)(i - 1) = v16;
          continue;
        }
        v16 = *(unsigned __int8 *)(v7 - 1);
LABEL_14:
        for (k = v7 + 5; ; k += 5)
        {
          v19 = *(unsigned __int8 *)(k + 4);
          if (v19 <= v16 && (v19 != v16 || *(_DWORD *)k >= v17))
            break;
        }
        if (k - 5 == v7)
        {
          v22 = (unsigned __int8 *)a2;
          if (k < a2)
          {
            v24 = *(unsigned __int8 *)(a2 - 1);
            v22 = (unsigned __int8 *)(a2 - 5);
            if (v24 <= v16)
            {
              v21 = (unsigned __int8 *)(a2 - 6);
              v22 = (unsigned __int8 *)(a2 - 5);
              while (1)
              {
                v35 = (unsigned int *)(v21 + 1);
                if (v24 == v16)
                {
                  if (*v35 < v17 || k >= (unint64_t)v35)
                    goto LABEL_25;
                }
                else if (k >= (unint64_t)v35)
                {
                  break;
                }
                v22 -= 5;
                v34 = *v21;
                v21 -= 5;
                v24 = v34;
                if (v34 > v16)
                  goto LABEL_25;
              }
            }
          }
        }
        else
        {
          v20 = *(unsigned __int8 *)(a2 - 1);
          v21 = (unsigned __int8 *)(a2 - 6);
          v22 = (unsigned __int8 *)(a2 - 5);
          if (v20 <= v16)
          {
            do
            {
              if (v20 == v16 && *(_DWORD *)(v21 + 1) < v17)
                break;
              v23 = *v21;
              v21 -= 5;
              v20 = v23;
            }
            while (v23 <= v16);
LABEL_25:
            v22 = v21 + 1;
          }
        }
        i = k;
        if (k < (unint64_t)v22)
        {
          i = k;
          v25 = v22;
          do
          {
            while (1)
            {
              v137 = *(_BYTE *)(i + 4);
              v131 = *(_DWORD *)i;
              v26 = *(_DWORD *)v25;
              *(_BYTE *)(i + 4) = v25[4];
              *(_DWORD *)i = v26;
              v25[4] = v137;
              *(_DWORD *)v25 = v131;
              v27 = i + 5;
              do
              {
                do
                {
                  i = v27;
                  v28 = *(unsigned __int8 *)(v27 + 4);
                  v27 += 5;
                }
                while (v28 > v16);
              }
              while (v28 == v16 && *(_DWORD *)i < v17);
              v29 = *(v25 - 1);
              if (v29 <= v16)
                break;
              v25 -= 5;
              if (i >= (unint64_t)v25)
                goto LABEL_41;
            }
            v30 = v25 - 6;
            do
            {
              if (v29 == v16 && *(_DWORD *)(v30 + 1) < v17)
                break;
              v31 = *v30;
              v30 -= 5;
              v29 = v31;
            }
            while (v31 <= v16);
            v25 = v30 + 1;
          }
          while (i < (unint64_t)v25);
        }
LABEL_41:
        if (i - 5 != v7)
        {
          v32 = *(_DWORD *)(i - 5);
          *(_BYTE *)(v7 + 4) = *(_BYTE *)(i - 1);
          *(_DWORD *)v7 = v32;
        }
        *(_DWORD *)(i - 5) = v17;
        *(_BYTE *)(i - 1) = v16;
        if (k < (unint64_t)v22)
        {
LABEL_46:
          result = sub_19C3B7404(v7, i - 5, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v33 = sub_19C3B7F88(v7, i - 5);
        result = sub_19C3B7F88(i, a2);
        if (!(_DWORD)result)
        {
          if (v33)
            continue;
          goto LABEL_46;
        }
        a2 = i - 5;
        if (!v33)
          goto LABEL_2;
        return result;
    }
  }
}

BOOL sub_19C3B7F88(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  int *v6;
  unsigned int v7;
  unsigned int v8;
  char v9;
  int v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  int *v24;
  int *v25;
  int *v26;
  unsigned int v27;
  unsigned int v28;
  char v29;
  int v30;
  char v31;
  unsigned int v32;
  unsigned int v33;
  char v34;
  int v35;
  unsigned int v36;
  unsigned int v37;
  char v38;
  int v39;

  v4 = 0xCCCCCCCCCCCCCCCDLL * (a2 - a1);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = (int *)(a2 - 5);
      v7 = *(unsigned __int8 *)(a2 - 1);
      v8 = *(unsigned __int8 *)(a1 + 4);
      if (v7 > v8 || v7 == v8 && *v6 < *(_DWORD *)a1)
      {
        v9 = *(_BYTE *)(a1 + 4);
        v10 = *(_DWORD *)a1;
        v11 = *(_BYTE *)(a2 - 1);
        *(_DWORD *)a1 = *v6;
        *(_BYTE *)(a1 + 4) = v11;
        *v6 = v10;
        *(_BYTE *)(a2 - 1) = v9;
      }
      return result;
    case 3uLL:
      sub_19C3B53E0((int *)a1, (int *)(a1 + 5), (int *)(a2 - 5));
      return 1;
    case 4uLL:
      v24 = (int *)(a1 + 5);
      v25 = (int *)(a1 + 10);
      v26 = (int *)(a2 - 5);
      sub_19C3B53E0((int *)a1, (int *)(a1 + 5), (int *)(a1 + 10));
      v27 = *(unsigned __int8 *)(a2 - 1);
      v28 = *(unsigned __int8 *)(a1 + 14);
      if (v27 > v28 || v27 == v28 && *v26 < *v25)
      {
        v29 = *(_BYTE *)(a1 + 14);
        v30 = *v25;
        v31 = *(_BYTE *)(a2 - 1);
        *v25 = *v26;
        *(_BYTE *)(a1 + 14) = v31;
        *v26 = v30;
        *(_BYTE *)(a2 - 1) = v29;
        v32 = *(unsigned __int8 *)(a1 + 14);
        v33 = *(unsigned __int8 *)(a1 + 9);
        if (v32 > v33 || v32 == v33 && *v25 < *v24)
        {
          v34 = *(_BYTE *)(a1 + 9);
          v35 = *v24;
          *v24 = *v25;
          *(_BYTE *)(a1 + 9) = *(_BYTE *)(a1 + 14);
          *v25 = v35;
          *(_BYTE *)(a1 + 14) = v34;
          v36 = *(unsigned __int8 *)(a1 + 9);
          v37 = *(unsigned __int8 *)(a1 + 4);
          if (v36 > v37 || v36 == v37 && *(_DWORD *)(a1 + 5) < *(_DWORD *)a1)
          {
            v38 = *(_BYTE *)(a1 + 4);
            v39 = *(_DWORD *)a1;
            *(_DWORD *)a1 = *v24;
            *(_BYTE *)(a1 + 4) = *(_BYTE *)(a1 + 9);
            *v24 = v39;
            *(_BYTE *)(a1 + 9) = v38;
          }
        }
      }
      return 1;
    case 5uLL:
      sub_19C3B5540(a1, a1 + 5, a1 + 10, (int *)(a1 + 15), (int *)(a2 - 5));
      return 1;
    default:
      v12 = a1 + 10;
      sub_19C3B53E0((int *)a1, (int *)(a1 + 5), (int *)(a1 + 10));
      v13 = a1 + 15;
      if (a1 + 15 == a2)
        return 1;
      v14 = 0;
      v15 = 0;
      break;
  }
  while (1)
  {
    v17 = *(unsigned __int8 *)(v13 + 4);
    v18 = *(unsigned __int8 *)(v12 + 4);
    if (v17 > v18)
      break;
    if (v17 == v18)
    {
      v19 = *(_DWORD *)v13;
      if (*(_DWORD *)v13 < *(_DWORD *)v12)
        goto LABEL_11;
    }
LABEL_8:
    v12 = v13;
    v14 += 5;
    v13 += 5;
    if (v13 == a2)
      return 1;
  }
  v19 = *(_DWORD *)v13;
LABEL_11:
  *(_DWORD *)v13 = *(_DWORD *)v12;
  *(_BYTE *)(v13 + 4) = *(_BYTE *)(v12 + 4);
  v16 = a1;
  if (v12 != a1)
  {
    v20 = v14;
    while (1)
    {
      v21 = a1 + v20;
      v22 = (unsigned int *)(a1 + v20 + 5);
      v23 = *(unsigned __int8 *)(a1 + v20 + 9);
      if (v17 <= v23)
      {
        if (v17 != v23)
        {
          v16 = v12;
          goto LABEL_7;
        }
        if (v19 >= *v22)
          break;
      }
      v12 -= 5;
      *(_DWORD *)(v21 + 10) = *v22;
      *(_BYTE *)(v21 + 14) = *(_BYTE *)(a1 + v20 + 9);
      v20 -= 5;
      if (v20 == -10)
      {
        v16 = a1;
        goto LABEL_7;
      }
    }
    v16 = a1 + v20 + 10;
  }
LABEL_7:
  *(_DWORD *)v16 = v19;
  *(_BYTE *)(v16 + 4) = v17;
  if (++v15 != 8)
    goto LABEL_8;
  return v13 + 5 == a2;
}

uint64_t sub_19C3B827C(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  _BYTE *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  _BYTE *v17;
  _BYTE *v18;
  int v19;
  char v20;
  int v21;
  uint64_t v22;
  int v23;
  _BYTE *v24;
  unsigned int v25;
  _DWORD *v26;
  int v27;
  unsigned int v28;
  _DWORD *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  _DWORD *v34;
  int v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  char *v39;

  if (!*(_DWORD *)(result + 72))
    return result;
  v1 = result;
  v2 = *(unsigned int *)(result + 40);
  if (!(_DWORD)v2)
    return result;
  v3 = *(unsigned int *)(result + 48);
  if (!(_DWORD)v3)
    return result;
  v4 = *(uint64_t **)(result + 8);
  v5 = *(_QWORD *)(result + 16);
  v6 = *((_DWORD *)v4 + 10);
  v7 = *((unsigned __int8 *)v4 + 48);
  v8 = *v4;
  v9 = *(_BYTE **)(result + 24);
  v10 = 0xCCCCCCCCCCCCCCCDLL * (_QWORD)&v9[-v5];
  v11 = v3 - v10;
  if (v3 <= v10)
  {
    if (v3 < v10)
      *(_QWORD *)(result + 24) = v5 + 5 * v3;
  }
  else
  {
    v12 = *(_QWORD *)(result + 32);
    if (0xCCCCCCCCCCCCCCCDLL * (v12 - (_QWORD)v9) >= v11)
    {
      bzero(*(void **)(result + 24), 5 * ((5 * v11 - 5) / 5) + 5);
      *(_QWORD *)(v1 + 24) = &v9[5 * ((5 * v11 - 5) / 5) + 5];
    }
    else
    {
      v13 = 0xCCCCCCCCCCCCCCCDLL * (v12 - v5);
      v14 = 0x999999999999999ALL * (v12 - v5);
      if (v14 > v3)
        v3 = v14;
      if (v13 >= 0x1999999999999999)
        v3 = 0x3333333333333333;
      if (v3 >= 0x3333333333333334)
        sub_19C2A143C();
      v15 = 5 * v3;
      v16 = (char *)operator new(5 * v3);
      v17 = &v9[(_QWORD)v16 - v5];
      v39 = &v16[v15];
      bzero(v17, 5 * ((5 * v11 - 5) / 5) + 5);
      v18 = &v17[5 * ((5 * v11 - 5) / 5) + 5];
      if (v9 != (_BYTE *)v5)
      {
        do
        {
          v19 = *(_DWORD *)(v9 - 5);
          v9 -= 5;
          v20 = v9[4];
          *(_DWORD *)(v17 - 5) = v19;
          v17 -= 5;
          v17[4] = v20;
        }
        while (v9 != (_BYTE *)v5);
        v9 = *(_BYTE **)(v1 + 16);
      }
      *(_QWORD *)(v1 + 16) = v17;
      *(_QWORD *)(v1 + 24) = v18;
      *(_QWORD *)(v1 + 32) = v39;
      if (v9)
        operator delete(v9);
    }
    v3 = *(unsigned int *)(v1 + 48);
    v5 = *(_QWORD *)(v1 + 16);
    if (!(_DWORD)v3)
      goto LABEL_32;
  }
  v21 = v7 + 8;
  v22 = v8 + v2;
  v23 = *(_DWORD *)(v1 + 44);
  if (v7)
  {
    v24 = (_BYTE *)(v5 + 4);
    v25 = v23 * v21;
    do
    {
      v26 = (_DWORD *)(v22 + 4 * (v25 >> 5));
      v27 = *v26 >> v25;
      if ((v25 & 0x1F) + v7 >= 0x21)
        v27 |= v26[1] << -(v25 & 0x1F);
      *((_DWORD *)v24 - 1) = (v27 & (0xFFFFFFFF >> -(char)v7)) + v6;
      v28 = (v7 + v25) & 0x1F;
      v29 = (_DWORD *)(v22 + 4 * ((v7 + v25) >> 5));
      v30 = *v29 >> (v7 + v25);
      if (v28 >= 0x19)
        v30 |= v29[1] << -(char)v28;
      *v24 = v30;
      v24 += 5;
      v25 += v21;
      --v3;
    }
    while (v3);
  }
  else
  {
    v31 = 0;
    v32 = 5 * v3;
    v33 = v23 * v21;
    do
    {
      *(_DWORD *)(v5 + v31) = v6;
      v34 = (_DWORD *)(v22 + 4 * (v33 >> 5));
      v35 = *v34 >> v33;
      if ((v33 & 0x1F) >= 0x19)
        v35 |= v34[1] << -(v33 & 0x1F);
      *(_BYTE *)(v5 + v31 + 4) = v35;
      v31 += 5;
      v33 += v21;
    }
    while (v32 != v31);
  }
LABEL_32:
  v36 = *(_QWORD *)(v1 + 24);
  v37 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * (v36 - v5));
  if (v36 == v5)
    v38 = 0;
  else
    v38 = v37;
  return sub_19C3B8590(v5, v36, v38, 1);
}

uint64_t sub_19C3B8590(uint64_t result, unint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  int *v8;
  unint64_t i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unint64_t k;
  unsigned int v19;
  unsigned int v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned __int8 *v25;
  int v26;
  unint64_t v27;
  unsigned int v28;
  unsigned int v29;
  unsigned __int8 *v30;
  unsigned int v31;
  int v32;
  BOOL v33;
  unsigned int v34;
  unsigned int *v35;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned __int8 *v40;
  unsigned int v41;
  unsigned __int8 *v42;
  unsigned __int8 *j;
  unsigned int v44;
  int v45;
  unsigned int v46;
  unsigned __int8 *v47;
  unsigned int v48;
  unsigned __int8 *v49;
  unsigned int v50;
  int v51;
  unsigned int v52;
  unsigned int v53;
  int v54;
  int *v55;
  int *v56;
  unsigned int v57;
  unsigned int v58;
  int v59;
  char v60;
  char v61;
  unsigned int v62;
  unsigned int v63;
  char v64;
  int v65;
  unsigned int v66;
  unsigned int v67;
  uint64_t v68;
  BOOL v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int *v80;
  unsigned int v81;
  int64_t v82;
  int64_t v83;
  unsigned int *v84;
  int64_t v85;
  uint64_t v86;
  unsigned int *v87;
  unsigned int v88;
  unsigned int v89;
  unsigned int v90;
  unsigned int v91;
  BOOL v92;
  unint64_t v93;
  unsigned int v94;
  int v95;
  unsigned int v96;
  uint64_t v97;
  uint64_t v98;
  unsigned int v99;
  unsigned int v100;
  int64_t v101;
  uint64_t v103;
  unint64_t v104;
  unsigned int v105;
  unint64_t v106;
  uint64_t v107;
  int64_t v108;
  unsigned int v109;
  unsigned int v110;
  int v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unsigned int v116;
  unsigned int v117;
  unsigned int v118;
  int v119;
  unint64_t v120;
  int v121;
  unint64_t v122;
  unsigned int v123;
  uint64_t v124;
  unsigned int v125;
  unsigned int v126;
  unsigned int v127;
  uint64_t v128;
  unsigned int v129;
  int v130;
  int v131;
  int v132;
  int v133;
  int v134;
  int v135;
  char v136;
  unsigned __int8 v137;
  unsigned __int8 v138;
  char v139;
  char v140;
  char v141;

  v7 = result;
LABEL_2:
  v8 = (int *)(a2 - 5);
  i = v7;
  while (2)
  {
    v7 = i;
    v10 = a2 - i;
    v11 = 0xCCCCCCCCCCCCCCCDLL * (a2 - i);
    switch(v11)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v52 = *(unsigned __int8 *)(a2 - 1);
        v53 = *(unsigned __int8 *)(i + 4);
        if (v52 > v53 || v52 == v53 && *v8 < *(_DWORD *)i)
        {
          v139 = *(_BYTE *)(i + 4);
          v133 = *(_DWORD *)i;
          v54 = *v8;
          *(_BYTE *)(i + 4) = *(_BYTE *)(a2 - 1);
          *(_DWORD *)i = v54;
          *(_BYTE *)(a2 - 1) = v139;
          *v8 = v133;
        }
        return result;
      case 3:
        return (uint64_t)sub_19C3B53E0((int *)i, (int *)(i + 5), (int *)(a2 - 5));
      case 4:
        v55 = (int *)(i + 5);
        v56 = (int *)(i + 10);
        result = (uint64_t)sub_19C3B53E0((int *)i, (int *)(i + 5), (int *)(i + 10));
        v57 = *(unsigned __int8 *)(a2 - 1);
        v58 = *(unsigned __int8 *)(i + 14);
        if (v57 > v58 || v57 == v58 && *v8 < *v56)
        {
          v59 = *v56;
          v60 = *(_BYTE *)(i + 14);
          v61 = *(_BYTE *)(a2 - 1);
          *v56 = *v8;
          *(_BYTE *)(i + 14) = v61;
          *(_BYTE *)(a2 - 1) = v60;
          *v8 = v59;
          v62 = *(unsigned __int8 *)(i + 14);
          v63 = *(unsigned __int8 *)(i + 9);
          if (v62 > v63 || v62 == v63 && *v56 < *v55)
          {
            v64 = *(_BYTE *)(i + 9);
            v65 = *v55;
            *v55 = *v56;
            *(_BYTE *)(i + 9) = *(_BYTE *)(i + 14);
            *v56 = v65;
            *(_BYTE *)(i + 14) = v64;
            v66 = *(unsigned __int8 *)(i + 9);
            v67 = *(unsigned __int8 *)(i + 4);
            if (v66 > v67 || v66 == v67 && *(_DWORD *)(i + 5) < *(_DWORD *)i)
            {
              v140 = *(_BYTE *)(i + 4);
              v134 = *(_DWORD *)i;
              *(_DWORD *)i = *v55;
              *(_BYTE *)(i + 4) = *(_BYTE *)(i + 9);
              *v55 = v134;
              *(_BYTE *)(i + 9) = v140;
            }
          }
        }
        return result;
      case 5:
        return (uint64_t)sub_19C3B5540(i, i + 5, i + 10, (int *)(i + 15), (int *)(a2 - 5));
      default:
        if (v10 <= 119)
        {
          v68 = i + 5;
          v70 = i == a2 || v68 == a2;
          if ((a4 & 1) != 0)
          {
            if (v70)
              return result;
            v71 = 0;
            v72 = i;
            while (1)
            {
              v74 = v72;
              v72 = v68;
              v75 = *(unsigned __int8 *)(v74 + 9);
              v76 = *(unsigned __int8 *)(v74 + 4);
              if (v75 > v76)
                break;
              if (v75 == v76)
              {
                v77 = *(_DWORD *)v72;
                if (*(_DWORD *)v72 < *(_DWORD *)v74)
                  goto LABEL_125;
              }
LABEL_120:
              v68 = v72 + 5;
              v71 += 5;
              if (v72 + 5 == a2)
                return result;
            }
            v77 = *(_DWORD *)v72;
LABEL_125:
            *(_DWORD *)v72 = *(_DWORD *)v74;
            *(_BYTE *)(v72 + 4) = *(_BYTE *)(v74 + 4);
            v73 = i;
            if (v74 != i)
            {
              v78 = v71;
              while (1)
              {
                v79 = i + v78;
                v80 = (unsigned int *)(i + v78 - 5);
                v81 = *(unsigned __int8 *)(i + v78 - 1);
                if (v75 <= v81)
                {
                  if (v75 != v81)
                  {
                    v73 = i + v78;
                    goto LABEL_119;
                  }
                  if (v77 >= *v80)
                    break;
                }
                v74 -= 5;
                *(_DWORD *)v79 = *v80;
                *(_BYTE *)(v79 + 4) = *(_BYTE *)(i + v78 - 1);
                v78 -= 5;
                if (!v78)
                {
                  v73 = i;
                  goto LABEL_119;
                }
              }
              v73 = v74;
            }
LABEL_119:
            *(_DWORD *)v73 = v77;
            *(_BYTE *)(v73 + 4) = v75;
            goto LABEL_120;
          }
          if (v70)
            return result;
          while (1)
          {
            v124 = v7;
            v7 = v68;
            v125 = *(unsigned __int8 *)(v124 + 9);
            v126 = *(unsigned __int8 *)(v124 + 4);
            if (v125 > v126)
              break;
            if (v125 == v126)
            {
              v127 = *(_DWORD *)v7;
              if (*(_DWORD *)v7 < *(_DWORD *)v124)
                goto LABEL_200;
            }
LABEL_195:
            v68 = v7 + 5;
            if (v7 + 5 == a2)
              return result;
          }
          v127 = *(_DWORD *)v7;
          do
          {
            do
            {
LABEL_200:
              v128 = v124;
              *(_DWORD *)(v124 + 5) = *(_DWORD *)v124;
              *(_BYTE *)(v124 + 9) = *(_BYTE *)(v124 + 4);
              v124 -= 5;
              v129 = *(unsigned __int8 *)(v128 - 1);
            }
            while (v125 > v129);
          }
          while (v125 == v129 && v127 < *(_DWORD *)(v128 - 5));
          *(_DWORD *)v128 = v127;
          *(_BYTE *)(v128 + 4) = v125;
          goto LABEL_195;
        }
        if (!a3)
        {
          if (i == a2)
            return result;
          v82 = (unint64_t)(v11 - 2) >> 1;
          v83 = v82;
          do
          {
            v85 = v83;
            if (v82 >= v83)
            {
              v86 = (2 * v83) | 1;
              v87 = (unsigned int *)(i + 5 * v86);
              if (2 * v85 + 2 < v11)
              {
                v88 = *((unsigned __int8 *)v87 + 4);
                v89 = *((unsigned __int8 *)v87 + 9);
                if (v88 > v89 || v88 == v89 && *v87 < *(unsigned int *)((char *)v87 + 5))
                {
                  v87 = (unsigned int *)((char *)v87 + 5);
                  v86 = 2 * v85 + 2;
                }
              }
              v90 = *((unsigned __int8 *)v87 + 4);
              v91 = *(unsigned __int8 *)(i + 5 * v85 + 4);
              v92 = v90 == v91;
              if (v90 <= v91)
              {
                v93 = i + 5 * v85;
                v94 = *(_DWORD *)v93;
                if (!v92 || *v87 >= v94)
                {
                  v95 = *v87;
                  result = *((unsigned __int8 *)v87 + 4);
                  *(_BYTE *)(v93 + 4) = result;
                  *(_DWORD *)v93 = v95;
                  if (v82 >= v86)
                  {
                    while (1)
                    {
                      v97 = 2 * v86;
                      v86 = (2 * v86) | 1;
                      v84 = (unsigned int *)(i + 5 * v86);
                      v98 = v97 + 2;
                      if (v98 < v11)
                      {
                        result = *((unsigned __int8 *)v84 + 4);
                        v99 = *((unsigned __int8 *)v84 + 9);
                        if (result > v99
                          || (_DWORD)result == v99
                          && (result = *v84, result < *(unsigned int *)((char *)v84 + 5)))
                        {
                          v84 = (unsigned int *)((char *)v84 + 5);
                          v86 = v98;
                        }
                      }
                      v100 = *((unsigned __int8 *)v84 + 4);
                      if (v100 > v91 || v100 == v91 && *v84 < v94)
                        break;
                      v96 = *v84;
                      result = *((unsigned __int8 *)v84 + 4);
                      *((_BYTE *)v87 + 4) = result;
                      *v87 = v96;
                      v87 = v84;
                      if (v82 < v86)
                        goto LABEL_136;
                    }
                  }
                  v84 = v87;
LABEL_136:
                  *v84 = v94;
                  *((_BYTE *)v84 + 4) = v91;
                }
              }
            }
            v83 = v85 - 1;
          }
          while (v85);
          v101 = v10 / 5uLL;
          while (1)
          {
            v103 = 0;
            v141 = *(_BYTE *)(i + 4);
            v135 = *(_DWORD *)i;
            v104 = i;
            do
            {
              v106 = v104;
              v104 += 5 * (v103 + 1);
              v107 = 2 * v103;
              v103 = (2 * v103) | 1;
              v108 = v107 + 2;
              if (v108 < v101)
              {
                v109 = *(unsigned __int8 *)(v104 + 4);
                v110 = *(unsigned __int8 *)(v104 + 9);
                if (v109 > v110 || v109 == v110 && *(_DWORD *)v104 < *(_DWORD *)(v104 + 5))
                {
                  v104 += 5;
                  v103 = v108;
                }
              }
              v105 = *(_DWORD *)v104;
              *(_BYTE *)(v106 + 4) = *(_BYTE *)(v104 + 4);
              *(_DWORD *)v106 = v105;
            }
            while (v103 <= (uint64_t)((unint64_t)(v101 - 2) >> 1));
            a2 -= 5;
            if (v104 == a2)
            {
              *(_BYTE *)(v104 + 4) = v141;
              *(_DWORD *)v104 = v135;
            }
            else
            {
              v111 = *(_DWORD *)a2;
              *(_BYTE *)(v104 + 4) = *(_BYTE *)(a2 + 4);
              *(_DWORD *)v104 = v111;
              *(_BYTE *)(a2 + 4) = v141;
              *(_DWORD *)a2 = v135;
              v112 = v104 - i + 5;
              if (v112 >= 6)
              {
                v113 = v112 / 5uLL - 2;
                v114 = v113 >> 1;
                v115 = i + 5 * (v113 >> 1);
                v116 = *(unsigned __int8 *)(v115 + 4);
                v117 = *(unsigned __int8 *)(v104 + 4);
                if (v116 > v117)
                {
                  v118 = *(_DWORD *)v104;
LABEL_175:
                  v119 = *(_DWORD *)v115;
                  *(_BYTE *)(v104 + 4) = *(_BYTE *)(v115 + 4);
                  *(_DWORD *)v104 = v119;
                  if (v113 >= 2)
                  {
                    while (1)
                    {
                      v122 = v114 - 1;
                      v114 = (v114 - 1) >> 1;
                      v120 = i + 5 * v114;
                      v123 = *(unsigned __int8 *)(v120 + 4);
                      if (v123 <= v117 && (v123 != v117 || *(_DWORD *)v120 >= v118))
                        break;
                      v121 = *(_DWORD *)v120;
                      *(_BYTE *)(v115 + 4) = *(_BYTE *)(v120 + 4);
                      *(_DWORD *)v115 = v121;
                      v115 = i + 5 * v114;
                      if (v122 <= 1)
                        goto LABEL_177;
                    }
                  }
                  v120 = v115;
LABEL_177:
                  *(_DWORD *)v120 = v118;
                  *(_BYTE *)(v120 + 4) = v117;
                  goto LABEL_162;
                }
                if (v116 == v117)
                {
                  v118 = *(_DWORD *)v104;
                  if (*(_DWORD *)v115 < *(_DWORD *)v104)
                    goto LABEL_175;
                }
              }
            }
LABEL_162:
            if (v101-- <= 2)
              return result;
          }
        }
        v12 = 5 * ((unint64_t)v11 >> 1);
        v13 = i + v12;
        if ((unint64_t)v10 < 0x281)
        {
          result = (uint64_t)sub_19C3B53E0((int *)(v7 + v12), (int *)v7, (int *)(a2 - 5));
          --a3;
          if ((a4 & 1) != 0)
          {
LABEL_13:
            v17 = *(_DWORD *)v7;
            v16 = *(unsigned __int8 *)(v7 + 4);
            goto LABEL_14;
          }
        }
        else
        {
          sub_19C3B53E0((int *)v7, (int *)(v7 + v12), (int *)(a2 - 5));
          sub_19C3B53E0((int *)(v7 + 5), (int *)(v12 + v7 - 5), (int *)(a2 - 10));
          sub_19C3B53E0((int *)(v7 + 10), (int *)(v7 + 5 + v12), (int *)(a2 - 15));
          result = (uint64_t)sub_19C3B53E0((int *)(v12 + v7 - 5), (int *)(v7 + v12), (int *)(v7 + 5 + v12));
          v136 = *(_BYTE *)(v7 + 4);
          v130 = *(_DWORD *)v7;
          v14 = *(_BYTE *)(v13 + 4);
          *(_DWORD *)v7 = *(_DWORD *)v13;
          *(_BYTE *)(v7 + 4) = v14;
          *(_BYTE *)(v13 + 4) = v136;
          *(_DWORD *)v13 = v130;
          --a3;
          if ((a4 & 1) != 0)
            goto LABEL_13;
        }
        v15 = *(unsigned __int8 *)(v7 - 1);
        v16 = *(unsigned __int8 *)(v7 + 4);
        v17 = *(_DWORD *)v7;
        if (v15 > v16)
          goto LABEL_14;
        if (v15 != v16 || *(_DWORD *)(v7 - 5) >= v17)
        {
          v37 = *(unsigned __int8 *)(a2 - 1);
          if (v16 > v37 || v16 == v37 && v17 < *v8)
          {
            v38 = *(unsigned __int8 *)(v7 + 9);
            if (v16 <= v38)
            {
              v40 = (unsigned __int8 *)(v7 + 14);
              do
              {
                if (v16 == v38 && v17 < *(_DWORD *)(v40 - 9))
                  break;
                v41 = *v40;
                v40 += 5;
                v38 = v41;
              }
              while (v16 <= v41);
              i = (unint64_t)(v40 - 9);
            }
            else
            {
              i = v7 + 5;
            }
          }
          else
          {
            for (i = v7 + 5; i < a2; i += 5)
            {
              v39 = *(unsigned __int8 *)(i + 4);
              if (v16 > v39 || v16 == v39 && v17 < *(_DWORD *)i)
                break;
            }
          }
          v42 = (unsigned __int8 *)a2;
          if (i < a2)
          {
            for (j = (unsigned __int8 *)(a2 - 6); v16 > v37 || v16 == v37 && v17 < *(_DWORD *)(j + 1); j -= 5)
            {
              v44 = *j;
              v37 = v44;
            }
            v42 = j + 1;
          }
          while (i < (unint64_t)v42)
          {
            v138 = *(_BYTE *)(i + 4);
            v132 = *(_DWORD *)i;
            v45 = *(_DWORD *)v42;
            *(_BYTE *)(i + 4) = v42[4];
            *(_DWORD *)i = v45;
            v42[4] = v138;
            *(_DWORD *)v42 = v132;
            v46 = *(unsigned __int8 *)(i + 9);
            if (v16 <= v46)
            {
              v47 = (unsigned __int8 *)(i + 14);
              do
              {
                if (v16 == v46 && v17 < *(_DWORD *)(v47 - 9))
                  break;
                v48 = *v47;
                v47 += 5;
                v46 = v48;
              }
              while (v16 <= v48);
              i = (unint64_t)(v47 - 9);
            }
            else
            {
              i += 5;
            }
            v49 = v42 - 5;
            do
            {
              do
              {
                v42 = v49;
                v50 = v49[4];
                v49 -= 5;
              }
              while (v16 > v50);
            }
            while (v16 == v50 && v17 < *(_DWORD *)v42);
          }
          if (i - 5 != v7)
          {
            v51 = *(_DWORD *)(i - 5);
            *(_BYTE *)(v7 + 4) = *(_BYTE *)(i - 1);
            *(_DWORD *)v7 = v51;
          }
          a4 = 0;
          *(_DWORD *)(i - 5) = v17;
          *(_BYTE *)(i - 1) = v16;
          continue;
        }
        v16 = *(unsigned __int8 *)(v7 - 1);
LABEL_14:
        for (k = v7 + 5; ; k += 5)
        {
          v19 = *(unsigned __int8 *)(k + 4);
          if (v19 <= v16 && (v19 != v16 || *(_DWORD *)k >= v17))
            break;
        }
        if (k - 5 == v7)
        {
          v22 = (unsigned __int8 *)a2;
          if (k < a2)
          {
            v24 = *(unsigned __int8 *)(a2 - 1);
            v22 = (unsigned __int8 *)(a2 - 5);
            if (v24 <= v16)
            {
              v21 = (unsigned __int8 *)(a2 - 6);
              v22 = (unsigned __int8 *)(a2 - 5);
              while (1)
              {
                v35 = (unsigned int *)(v21 + 1);
                if (v24 == v16)
                {
                  if (*v35 < v17 || k >= (unint64_t)v35)
                    goto LABEL_25;
                }
                else if (k >= (unint64_t)v35)
                {
                  break;
                }
                v22 -= 5;
                v34 = *v21;
                v21 -= 5;
                v24 = v34;
                if (v34 > v16)
                  goto LABEL_25;
              }
            }
          }
        }
        else
        {
          v20 = *(unsigned __int8 *)(a2 - 1);
          v21 = (unsigned __int8 *)(a2 - 6);
          v22 = (unsigned __int8 *)(a2 - 5);
          if (v20 <= v16)
          {
            do
            {
              if (v20 == v16 && *(_DWORD *)(v21 + 1) < v17)
                break;
              v23 = *v21;
              v21 -= 5;
              v20 = v23;
            }
            while (v23 <= v16);
LABEL_25:
            v22 = v21 + 1;
          }
        }
        i = k;
        if (k < (unint64_t)v22)
        {
          i = k;
          v25 = v22;
          do
          {
            while (1)
            {
              v137 = *(_BYTE *)(i + 4);
              v131 = *(_DWORD *)i;
              v26 = *(_DWORD *)v25;
              *(_BYTE *)(i + 4) = v25[4];
              *(_DWORD *)i = v26;
              v25[4] = v137;
              *(_DWORD *)v25 = v131;
              v27 = i + 5;
              do
              {
                do
                {
                  i = v27;
                  v28 = *(unsigned __int8 *)(v27 + 4);
                  v27 += 5;
                }
                while (v28 > v16);
              }
              while (v28 == v16 && *(_DWORD *)i < v17);
              v29 = *(v25 - 1);
              if (v29 <= v16)
                break;
              v25 -= 5;
              if (i >= (unint64_t)v25)
                goto LABEL_41;
            }
            v30 = v25 - 6;
            do
            {
              if (v29 == v16 && *(_DWORD *)(v30 + 1) < v17)
                break;
              v31 = *v30;
              v30 -= 5;
              v29 = v31;
            }
            while (v31 <= v16);
            v25 = v30 + 1;
          }
          while (i < (unint64_t)v25);
        }
LABEL_41:
        if (i - 5 != v7)
        {
          v32 = *(_DWORD *)(i - 5);
          *(_BYTE *)(v7 + 4) = *(_BYTE *)(i - 1);
          *(_DWORD *)v7 = v32;
        }
        *(_DWORD *)(i - 5) = v17;
        *(_BYTE *)(i - 1) = v16;
        if (k < (unint64_t)v22)
        {
LABEL_46:
          result = sub_19C3B8590(v7, i - 5, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v33 = sub_19C3B9114(v7, i - 5);
        result = sub_19C3B9114(i, a2);
        if (!(_DWORD)result)
        {
          if (v33)
            continue;
          goto LABEL_46;
        }
        a2 = i - 5;
        if (!v33)
          goto LABEL_2;
        return result;
    }
  }
}

BOOL sub_19C3B9114(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  int *v6;
  unsigned int v7;
  unsigned int v8;
  char v9;
  int v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  int *v24;
  int *v25;
  int *v26;
  unsigned int v27;
  unsigned int v28;
  char v29;
  int v30;
  char v31;
  unsigned int v32;
  unsigned int v33;
  char v34;
  int v35;
  unsigned int v36;
  unsigned int v37;
  char v38;
  int v39;

  v4 = 0xCCCCCCCCCCCCCCCDLL * (a2 - a1);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = (int *)(a2 - 5);
      v7 = *(unsigned __int8 *)(a2 - 1);
      v8 = *(unsigned __int8 *)(a1 + 4);
      if (v7 > v8 || v7 == v8 && *v6 < *(_DWORD *)a1)
      {
        v9 = *(_BYTE *)(a1 + 4);
        v10 = *(_DWORD *)a1;
        v11 = *(_BYTE *)(a2 - 1);
        *(_DWORD *)a1 = *v6;
        *(_BYTE *)(a1 + 4) = v11;
        *v6 = v10;
        *(_BYTE *)(a2 - 1) = v9;
      }
      return result;
    case 3uLL:
      sub_19C3B53E0((int *)a1, (int *)(a1 + 5), (int *)(a2 - 5));
      return 1;
    case 4uLL:
      v24 = (int *)(a1 + 5);
      v25 = (int *)(a1 + 10);
      v26 = (int *)(a2 - 5);
      sub_19C3B53E0((int *)a1, (int *)(a1 + 5), (int *)(a1 + 10));
      v27 = *(unsigned __int8 *)(a2 - 1);
      v28 = *(unsigned __int8 *)(a1 + 14);
      if (v27 > v28 || v27 == v28 && *v26 < *v25)
      {
        v29 = *(_BYTE *)(a1 + 14);
        v30 = *v25;
        v31 = *(_BYTE *)(a2 - 1);
        *v25 = *v26;
        *(_BYTE *)(a1 + 14) = v31;
        *v26 = v30;
        *(_BYTE *)(a2 - 1) = v29;
        v32 = *(unsigned __int8 *)(a1 + 14);
        v33 = *(unsigned __int8 *)(a1 + 9);
        if (v32 > v33 || v32 == v33 && *v25 < *v24)
        {
          v34 = *(_BYTE *)(a1 + 9);
          v35 = *v24;
          *v24 = *v25;
          *(_BYTE *)(a1 + 9) = *(_BYTE *)(a1 + 14);
          *v25 = v35;
          *(_BYTE *)(a1 + 14) = v34;
          v36 = *(unsigned __int8 *)(a1 + 9);
          v37 = *(unsigned __int8 *)(a1 + 4);
          if (v36 > v37 || v36 == v37 && *(_DWORD *)(a1 + 5) < *(_DWORD *)a1)
          {
            v38 = *(_BYTE *)(a1 + 4);
            v39 = *(_DWORD *)a1;
            *(_DWORD *)a1 = *v24;
            *(_BYTE *)(a1 + 4) = *(_BYTE *)(a1 + 9);
            *v24 = v39;
            *(_BYTE *)(a1 + 9) = v38;
          }
        }
      }
      return 1;
    case 5uLL:
      sub_19C3B5540(a1, a1 + 5, a1 + 10, (int *)(a1 + 15), (int *)(a2 - 5));
      return 1;
    default:
      v12 = a1 + 10;
      sub_19C3B53E0((int *)a1, (int *)(a1 + 5), (int *)(a1 + 10));
      v13 = a1 + 15;
      if (a1 + 15 == a2)
        return 1;
      v14 = 0;
      v15 = 0;
      break;
  }
  while (1)
  {
    v17 = *(unsigned __int8 *)(v13 + 4);
    v18 = *(unsigned __int8 *)(v12 + 4);
    if (v17 > v18)
      break;
    if (v17 == v18)
    {
      v19 = *(_DWORD *)v13;
      if (*(_DWORD *)v13 < *(_DWORD *)v12)
        goto LABEL_11;
    }
LABEL_8:
    v12 = v13;
    v14 += 5;
    v13 += 5;
    if (v13 == a2)
      return 1;
  }
  v19 = *(_DWORD *)v13;
LABEL_11:
  *(_DWORD *)v13 = *(_DWORD *)v12;
  *(_BYTE *)(v13 + 4) = *(_BYTE *)(v12 + 4);
  v16 = a1;
  if (v12 != a1)
  {
    v20 = v14;
    while (1)
    {
      v21 = a1 + v20;
      v22 = (unsigned int *)(a1 + v20 + 5);
      v23 = *(unsigned __int8 *)(a1 + v20 + 9);
      if (v17 <= v23)
      {
        if (v17 != v23)
        {
          v16 = v12;
          goto LABEL_7;
        }
        if (v19 >= *v22)
          break;
      }
      v12 -= 5;
      *(_DWORD *)(v21 + 10) = *v22;
      *(_BYTE *)(v21 + 14) = *(_BYTE *)(a1 + v20 + 9);
      v20 -= 5;
      if (v20 == -10)
      {
        v16 = a1;
        goto LABEL_7;
      }
    }
    v16 = a1 + v20 + 10;
  }
LABEL_7:
  *(_DWORD *)v16 = v19;
  *(_BYTE *)(v16 + 4) = v17;
  if (++v15 != 8)
    goto LABEL_8;
  return v13 + 5 == a2;
}

_QWORD *sub_19C3B9408(uint64_t a1, int a2, int a3, char a4)
{
  _QWORD *v8;
  uint64_t v9;
  char v10;
  char v11;
  char v12;
  char v13;
  char v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  unsigned int v20;
  BOOL v21;
  char v22;
  unsigned int v23;

  v8 = (_QWORD *)operator new();
  v9 = operator new();
  *(_QWORD *)(v9 + 24) = 0;
  *(_DWORD *)(v9 + 32) = a3;
  *(_BYTE *)(v9 + 36) = a4;
  *v8 = v9;
  *(_QWORD *)v9 = a1;
  *(_DWORD *)(v9 + 8) = a2;
  switch(a3)
  {
    case 2:
      v10 = 0;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      v16 = 0;
      v17 = 0;
      v18 = *(_DWORD *)(a1 + 3);
      v19 = 0;
      if (v18)
        goto LABEL_9;
      goto LABEL_11;
    case 3:
      v10 = 0;
      v12 = 0;
      v13 = 0;
      v14 = 0;
      v16 = 0;
      v17 = 0;
      v18 = *(_DWORD *)(a1 + 3);
      v11 = *(_BYTE *)(a1 + 1);
      v15 = 6 * v18 + 13;
      v19 = 0;
      if (!v18)
        goto LABEL_11;
      goto LABEL_9;
    case 4:
      v11 = 0;
      v12 = 0;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      v18 = *(_DWORD *)(a1 + 3);
      v17 = *(_DWORD *)(a1 + 7);
      v16 = *(_DWORD *)(a1 + 11);
      v10 = *(_BYTE *)(a1 + 1);
      v19 = 0;
      if (!v18)
        goto LABEL_11;
      goto LABEL_9;
    case 5:
      v10 = 0;
      v16 = 0;
      v17 = 0;
      v18 = *(_DWORD *)(a1 + 3);
      v11 = *(_BYTE *)(a1 + 1);
      v15 = *(_DWORD *)(a1 + 7);
      v12 = *(_BYTE *)(a1 + 2);
      v13 = *(_BYTE *)(a1 + 11);
      v14 = *(_BYTE *)(a1 + 12);
      v19 = 0;
      if (v18)
      {
LABEL_9:
        v20 = v18;
        do
        {
          ++v19;
          v21 = v20 > 1;
          v20 >>= 1;
        }
        while (v21);
      }
LABEL_11:
      v22 = 0;
      v23 = v16 - v17;
      if (v16 > v17)
      {
        do
        {
          ++v22;
          v21 = v23 > 1;
          v23 >>= 1;
        }
        while (v21);
      }
      break;
    default:
      v19 = 0;
      v10 = 0;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      v16 = 0;
      v17 = 0;
      v18 = 0;
      v22 = 0;
      break;
  }
  *(_DWORD *)(v9 + 12) = v18;
  *(_BYTE *)(v9 + 16) = v19;
  *(_DWORD *)(v9 + 40) = v17;
  *(_DWORD *)(v9 + 44) = v16;
  *(_BYTE *)(v9 + 48) = v22;
  *(_BYTE *)(v9 + 49) = v10;
  *(_BYTE *)(v9 + 50) = v11;
  *(_DWORD *)(v9 + 52) = v15;
  *(_BYTE *)(v9 + 56) = v12;
  *(_BYTE *)(v9 + 57) = v13;
  *(_BYTE *)(v9 + 58) = v14;
  return v8;
}

void sub_19C3B9608(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD355C](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

uint64_t sub_19C3B962C(uint64_t **a1, unsigned int *a2, unsigned int a3, _BYTE *a4)
{
  uint64_t *v6;
  unsigned int v9;
  _BOOL4 v10;
  BOOL v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  BOOL v15;
  unint64_t v16;
  uint64_t result;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  unint64_t v24;
  uint64_t *v26;
  unsigned int v27;
  unsigned int v28;
  int v29;
  int v30;
  int v31;
  uint64_t v32;
  _BOOL4 v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unsigned int v37;
  int v38;
  unint64_t v39;
  int v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  char v46;
  char v47;
  unsigned int v48;
  unint64_t v49;
  uint64_t v50;
  unsigned int v51;

  v48 = 0;
  v47 = 0;
  v6 = *a1;
  switch(*((_DWORD *)v6 + 8))
  {
    case 2:
      LOWORD(v49) = 0;
      v9 = *((unsigned __int8 *)v6 + 36);
      v11 = a3 - 1 >= v9;
      v10 = a3 - 1 < v9;
      v11 = !v11 && a3 >= 2;
      if (v11)
      {
        v12 = 0;
        v13 = *((_DWORD *)v6 + 3);
        do
        {
          v14 = a2[v12];
          v15 = v14 > v13;
          v10 = v14 <= v13;
          v16 = v12 + 2;
          ++v12;
        }
        while (!v15 && v16 < a3);
      }
      if (!v10)
        goto LABEL_69;
      if (a2[a3 - 1] > *((_DWORD *)v6 + 3) || !sub_19C3B9988(v6, a2, a3, &v49))
      {
        if (a3 < 2 || !sub_19C3B9988(*a1, a2, a3 - 1, &v49))
          goto LABEL_69;
        if (!a4)
          return 1;
        *a4 = 0;
        v46 = BYTE1(v49);
        goto LABEL_64;
      }
      result = 0;
      if (a4)
        *(_WORD *)a4 = v49;
      return result;
    case 3:
      if (!a3)
        goto LABEL_69;
      v42 = a3 - 1;
      if (a3 != 1)
        goto LABEL_54;
      if (*((_DWORD *)v6 + 3) < *a2)
        return 2;
      v43 = *v6 + 6 * *a2;
      v45 = *(_DWORD *)(v43 + 7);
      v44 = v43 + 7;
      if (!v45)
        return 2;
      result = 0;
      if (a4)
        *(_WORD *)a4 = *(_WORD *)(v44 + 4);
      return result;
    case 4:
      if (a3 >= 2 && *((unsigned __int8 *)v6 + 36) >= a3)
      {
        v19 = a3 - 1;
        v20 = a2[v19];
        if (*((_DWORD *)v6 + 10) <= v20 && v20 <= *((_DWORD *)v6 + 11))
        {
          v21 = 0;
          v22 = *((_DWORD *)v6 + 3);
          do
          {
            v23 = a2[v21];
            v24 = v21 + 2;
            ++v21;
          }
          while (v23 <= v22 && v24 < a3);
          if (v23 <= v22 && sub_19C3BA4F8(v6, a2, a3, (uint64_t)&v49))
          {
            v26 = *a1;
            v27 = a2[v19];
            v28 = v49;
            v29 = v50;
            v30 = *((unsigned __int8 *)*a1 + 48);
            v31 = v30 + 8;
            v51 = 0;
            v32 = *v26;
            v33 = sub_19C3B5A74(*v26, v27 - *((_DWORD *)v26 + 10), v49, v50, v30 + 8, v30, &v51);
            if (a4 && v33)
            {
              v34 = (v31 * v29 + 7) >> 3;
              v35 = (unint64_t)(v30 + v51 * v31) >> 3;
              if ((v30 + v51 * v31) >> 3 >= v34)
              {
                LOBYTE(v38) = 0;
              }
              else
              {
                v36 = v32 + v28;
                v37 = ((_BYTE)v30 + (_BYTE)v51 * (_BYTE)v31) & 7;
                v38 = *(unsigned __int8 *)(v36 + v35) >> ((v30 + v51 * v31) & 7);
                v39 = v35 + 1;
                if ((((_BYTE)v30 + (_BYTE)v51 * (_BYTE)v31) & 7) != 0 && v39 < v34)
                {
                  do
                  {
                    if (v37 >= 8)
                      v41 = 8;
                    else
                      v41 = v37;
                    v38 |= ((0xFFu >> (8 - v41)) & *(unsigned __int8 *)(v36 + v39)) << (8 - v37);
                    v37 -= v41;
                    if (!v37)
                      break;
                    ++v39;
                  }
                  while (v39 < v34);
                }
              }
              *a4 = v38;
              a4[1] = 0;
            }
            if (v33)
              return 0;
          }
        }
      }
      goto LABEL_69;
    case 5:
      if (!a3)
        goto LABEL_69;
      v42 = a3 - 1;
      if (a3 == 1)
      {
        if (sub_19C3BA818((uint64_t)v6, *a2))
          return 0;
        else
          return 2;
      }
      else
      {
LABEL_54:
        if (*((unsigned __int8 *)v6 + 36) >= a3
          && sub_19C3B9C58((uint64_t)v6, a2, a3, (uint64_t)&v49, &v48, &v47))
        {
          if ((sub_19C3B9DB4((uint64_t)*a1, a2[v42], a3, v49, v50, v48, 0, a4) & 1) != 0)
          {
            return 0;
          }
          else
          {
            if (a4)
            {
              *a4 = 0;
              v46 = v47;
LABEL_64:
              a4[1] = v46;
            }
            return 1;
          }
        }
        else
        {
LABEL_69:
          if (a4)
            *(_WORD *)a4 = 0;
          return 2;
        }
      }
    default:
      goto LABEL_69;
  }
}

uint64_t sub_19C3B9988(uint64_t *a1, _DWORD *a2, unsigned int a3, _BYTE *a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v11;
  unsigned int v12;
  int v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  int v24;
  unsigned int v25;
  uint64_t v27;
  int v28;
  unint64_t v29;
  int v30;
  unint64_t v31;
  int v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  unint64_t i;
  int v37;
  int v39;
  unint64_t v40;
  unint64_t v41;
  int v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  unint64_t j;
  int v47;

  v4 = *a1 + 20 * (a3 - 1);
  v6 = *(_DWORD *)(v4 + 7);
  v5 = v4 + 7;
  if (!v6 || !*(_DWORD *)(v5 + 4) || !*(_DWORD *)(v5 + 8) || !*(_DWORD *)(v5 + 12))
    return 0;
  v11 = *(unsigned __int8 *)(v5 + 17);
  v12 = 0xFFFFFFFF >> -(char)v11;
  v13 = *(unsigned __int8 *)(v5 + 18) + v11 + *(unsigned __int8 *)(v5 + 19);
  v14 = cmph_search_packed();
  v15 = 0;
  v16 = *a1;
  v17 = *(unsigned int *)(v5 + 8);
  v18 = *(unsigned int *)(v5 + 12);
  v19 = v16 + v17;
  v20 = *(unsigned __int8 *)(v5 + 17);
  v21 = (v13 * v14);
  v22 = v21 >> 3;
  if ((v21 >> 3) < v18 && v20 != 0)
  {
    v24 = 8 - (v21 & 7);
    if ((v21 & 7) + v20 <= 8)
      v24 = *(unsigned __int8 *)(v5 + 17);
    v15 = (*(unsigned __int8 *)(v19 + v22) >> (v21 & 7)) & (0xFFu >> (8 - v24));
    v25 = v20 - v24;
    if (v20 != v24 && v22 + 1 < v18)
    {
      v27 = v17 + v16 + 1;
      do
      {
        if (v25 >= 8)
          v28 = 8;
        else
          v28 = v25;
        v15 |= ((0xFFu >> (8 - v28)) & *(unsigned __int8 *)(v27 + v22)) << (v20 - v25);
        v25 -= v28;
        if (!v25)
          break;
        v29 = v22 + 2;
        ++v22;
      }
      while (v29 < v18);
    }
  }
  if (v15 != (sub_19C3B4130(a2, a3) & v12))
    return 0;
  if (a4)
  {
    v30 = *(unsigned __int8 *)(v5 + 18);
    if (*(_BYTE *)(v5 + 18)
      && (v31 = (unint64_t)(v21 + v20) >> 3, (v21 + v20) >> 3 < v18))
    {
      v32 = ((_BYTE)v21 + (_BYTE)v20) & 7;
      if ((v32 + v30) <= 8)
        v33 = *(unsigned __int8 *)(v5 + 18);
      else
        v33 = 8 - v32;
      v34 = (*(unsigned __int8 *)(v19 + v31) >> v32) & (0xFFu >> (8 - v33));
      v35 = v30 - v33;
      if (v35)
      {
        for (i = v31 + 1; i < v18; ++i)
        {
          if (v35 >= 8)
            v37 = 8;
          else
            v37 = v35;
          v34 |= ((0xFFu >> (8 - v37)) & *(unsigned __int8 *)(v19 + i)) << (v30 - v35);
          v35 -= v37;
          if (!v35)
            break;
        }
      }
    }
    else
    {
      LOBYTE(v34) = 0;
    }
    *a4 = v34;
    v39 = *(unsigned __int8 *)(v5 + 19);
    if (*(_BYTE *)(v5 + 19)
      && (v40 = (v21 + v20 + v30), v41 = v40 >> 3, (v40 >> 3) < v18))
    {
      v42 = v40 & 7;
      if ((v42 + v39) <= 8)
        v43 = *(unsigned __int8 *)(v5 + 19);
      else
        v43 = 8 - v42;
      v44 = (*(unsigned __int8 *)(v19 + v41) >> v42) & (0xFFu >> (8 - v43));
      v45 = v39 - v43;
      if (v45)
      {
        for (j = v41 + 1; j < v18; ++j)
        {
          if (v45 >= 8)
            v47 = 8;
          else
            v47 = v45;
          v44 |= ((0xFFu >> (8 - v47)) & *(unsigned __int8 *)(v19 + j)) << (v39 - v45);
          v45 -= v47;
          if (!v45)
            break;
        }
      }
    }
    else
    {
      LOBYTE(v44) = 0;
    }
    a4[1] = v44;
  }
  return 1;
}

uint64_t sub_19C3B9C58(uint64_t a1, unsigned int *a2, unsigned int a3, uint64_t a4, _DWORD *a5, _BYTE *a6)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t result;
  unsigned int v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  char v21;
  char v22;
  unsigned int v23;
  unint64_t v24[12];

  if (a3 < 2)
    return 0;
  v24[10] = v6;
  v24[11] = v7;
  if (*(unsigned __int8 *)(a1 + 36) < a3)
    return 0;
  v23 = 0;
  v14 = a3 - 2;
  if (a3 != 2)
    goto LABEL_12;
  v15 = *(_DWORD *)(a1 + 32);
  if (v15 != 5)
  {
    if (v15 == 3)
    {
      if (*(_DWORD *)(a1 + 12) < *a2)
        return 0;
      v16 = *(_QWORD *)a1 + 6 * *a2;
      v19 = *(_DWORD *)(v16 + 7);
      v18 = v16 + 7;
      v17 = v19;
      if (!v19)
        return 0;
      v22 = *(_BYTE *)(v18 + 5);
      if (!a4)
        goto LABEL_18;
      goto LABEL_17;
    }
LABEL_12:
    v20 = a3 - 1;
    result = sub_19C3B9C58(a1, a2, a3 - 1, v24, &v23, 0);
    if (!(_DWORD)result)
      return result;
    result = sub_19C3B9DB4(a1, a2[v14], v20, v24[0], v24[1], v23, a4, &v21);
    if (!(_DWORD)result)
      return result;
    goto LABEL_19;
  }
  LODWORD(v24[0]) = 0;
  result = sub_19C3BA818(a1, *a2);
  if (!(_DWORD)result)
    return result;
  v17 = v24[0];
  if (!a4)
    goto LABEL_18;
LABEL_17:
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)a4 = v17;
  *(_DWORD *)(a4 + 4) = 0;
LABEL_18:
  v23 = v17;
LABEL_19:
  if (a5)
    *a5 = v23;
  if (a6)
    *a6 = v22;
  return 1;
}

uint64_t sub_19C3B9DB4(uint64_t a1, unsigned int a2, unsigned int a3, unint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, _BYTE *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  unsigned int v12;
  int v14;
  int v16;
  uint64_t v17;
  uint64_t *v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  int v22;
  char v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  int v28;
  unsigned int *v29;
  unsigned int v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  int v38;
  char *v39;
  unsigned int v40;
  char v41;
  unsigned int v42;
  unsigned int v43;
  int v44;
  char *v45;
  int v46;
  uint64_t v47;
  int v48;
  unsigned int v49;
  unsigned int *v50;
  unsigned int v51;
  _BOOL4 v52;
  unsigned int v53;
  unsigned int v54;
  _DWORD *v55;
  int v56;
  _BYTE *v57;
  unsigned int v58;
  _DWORD *v59;
  int v60;
  int v61;
  unsigned int v62;
  int v63;
  uint64_t v64;
  unsigned int v65;
  int v66;
  _DWORD *v67;
  int v68;
  unsigned int v69;
  unsigned int v70;
  int v71;
  char *v72;
  int v73;
  unsigned int v74;
  unsigned int v75;
  BOOL v76;
  int v77;
  char v78;
  unsigned int v79;
  int v80;
  char *v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int v88;
  char *v89;
  int v90;
  _BYTE *v91;
  unsigned int v92;
  unsigned int v93;
  char *v94;
  int v95;
  unsigned int v96;
  int v97;
  _DWORD *v98;
  int v99;
  unsigned int v100;
  unsigned int v101;
  int v102;
  _DWORD *v103;
  int v104;
  unsigned int v105;
  unsigned int v106;
  int v107;
  char *v108;
  int v109;
  unsigned int v110;
  unsigned int v111;
  unsigned int v112;
  int v113;
  char *v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  char v118;
  unsigned int v119;
  int v120;
  unsigned int v121;
  unsigned int v122;
  unsigned int v123;
  uint64_t v124;
  uint64_t v125;

  result = 0;
  if (a3 < 2)
    return result;
  if (a6 < 2)
    return result;
  v124 = v8;
  v125 = v9;
  v12 = a4;
  if (!(_DWORD)a4)
    return result;
  v14 = HIDWORD(a5);
  v16 = *(unsigned __int8 *)(a1 + 16);
  v17 = *(_QWORD *)a1;
  if (a3 == 2)
  {
    result = 0;
    v123 = 0;
    if (a4 < 2)
      return result;
    v18 = (uint64_t *)(v17 + a4);
    if (v17)
    {
      v19 = *(_DWORD *)v18 & 0x1F;
      v20 = (*(_DWORD *)v18 >> 5) & 0x1F;
      v21 = (*(_DWORD *)v18 >> 10) & 0x1F;
      if (v21)
      {
        v22 = *(_DWORD *)v18 >> 20;
        if (v21 >= 0xD)
          v22 = *v18 >> 20;
        v23 = 0;
        v24 = v22 & (0xFFFFFFFF >> -(char)v21);
LABEL_18:
        v32 = *(_DWORD *)(a1 + 12);
        v33 = *(unsigned __int8 *)(a1 + 36);
        LODWORD(a1) = (v21 + 5 * v33 + 7) >> 3;
        if (v33 <= 3)
          a1 = 2;
        else
          a1 = a1;
        v34 = v19 + 8;
        v35 = v19 + 8 + v21;
        v36 = v35 + 8;
        if (v33 >= 3)
          v37 = v35 + 8;
        else
          v37 = v19 + 8;
        v38 = a1 + v12;
        v39 = (char *)v18 + a1;
        if (v20 && v19 >= 2)
        {
          v40 = a2 >> v19;
          v41 = v16 - v19;
          v42 = ~(-1 << (v16 - v19));
          if (a2 >> v19 <= v42)
          {
            if (v40)
            {
              if (!v17)
                return 0;
              v43 = (v40 - 1) * v20;
              v44 = v43 & 0x1F;
              v45 = &v39[4 * (v43 >> 5)];
              v46 = *(_DWORD *)v45 >> v43;
              if ((v44 + v20) >= 0x21)
                v46 |= *((_DWORD *)v45 + 1) << -(char)v44;
              v47 = v46 & (0xFFFFFFFF >> -(char)v20);
            }
            else
            {
              v47 = 0;
              if (!v17)
                return 0;
            }
            v70 = v40 * v20;
            v71 = v70 & 0x1F;
            v72 = &v39[4 * (v70 >> 5)];
            v73 = *(_DWORD *)v72 >> v70;
            if ((v71 + v20) >= 0x21)
              v73 |= *((_DWORD *)v72 + 1) << -(char)v71;
            result = 0;
            v74 = 0xFFFFFFFF >> -(char)v20;
            v75 = v73 & v74;
            v76 = v75 >= v47;
            v77 = v75 - v47;
            if (v77 == 0 || !v76)
              return result;
            v117 = a7;
            v118 = v23;
            v119 = v35 + 8;
            v121 = v24;
            v78 = v20 * v42;
            v79 = (v20 * v42) >> 5;
            v80 = (v20 * v42) & 0x1F;
            v81 = &v39[4 * v79];
            v82 = *(_DWORD *)v81 >> v78;
            if ((v80 + v20) >= 0x21)
              v82 |= *((_DWORD *)v81 + 1) << -(char)v80;
            v83 = ((v20 << v41) + 7) >> 3;
            v116 = (v38 + v83);
            v84 = v17;
            v85 = v37;
            if (sub_19C3B5A74(v84, ~(-1 << v19) & a2, v116 | (v47 << 32), v77, v37, v19, &v123))
            {
              v48 = v82 & v74;
              v39 += v83;
              v36 = v119;
              v24 = v121;
              v23 = v118;
              a7 = v117;
              v38 = v116;
              v37 = v85;
              v35 = v19 + 8 + v21;
              goto LABEL_71;
            }
          }
        }
        else if (v19 == 1)
        {
          result = 0;
          v123 = a2;
          if (!v17 || v32 < a2)
            return result;
          if (((*(_DWORD *)&v39[4 * ((v37 * a2) >> 5)] >> (v37 * a2)) & 1) != 0)
          {
            v48 = v32 + 1;
LABEL_71:
            if (a8)
            {
              if (v39)
              {
                v86 = v123;
                v87 = v19 + v123 * v37;
                v88 = v87 & 0x1F;
                v89 = &v39[4 * (v87 >> 5)];
                v90 = *(_DWORD *)v89 >> v87;
                if (v88 >= 0x19)
                  v90 |= *((_DWORD *)v89 + 1) << -(char)v88;
                *a8 = v90;
                a8[1] = 0;
                v91 = a8 + 1;
                if (v33 < 3)
                  return 1;
                v92 = v35 + v86 * v36;
                v93 = v92 & 0x1F;
                v94 = &v39[4 * (v92 >> 5)];
                v95 = *(_DWORD *)v94 >> v92;
                if (v93 >= 0x19)
                  v95 |= *((_DWORD *)v94 + 1) << -(char)v93;
              }
              else
              {
                *(_WORD *)a8 = 0;
                v91 = a8 + 1;
                if (v33 < 3)
                  return 1;
                LOBYTE(v95) = 0;
              }
              *v91 = v95;
              if (!a7)
                return 1;
            }
            else
            {
              result = 1;
              if (!a7 || v33 < 3)
                return result;
            }
            *(_QWORD *)(a7 + 8) = 0;
            *(_QWORD *)a7 = ((v48 * v37 + 7) >> 3) + v38;
            if ((v23 & 1) == 0)
            {
              v105 = v123;
              if (v123)
              {
                if (v39)
                {
                  v106 = v34 + (v123 - 1) * v36;
                  v107 = v106 & 0x1F;
                  v108 = &v39[4 * (v106 >> 5)];
                  v109 = *(_DWORD *)v108 >> v106;
                  if (v107 + v21 >= 0x21)
                    v109 |= *((_DWORD *)v108 + 1) << -(char)v107;
                  v110 = v109 & (0xFFFFFFFF >> -(char)v21);
                  *(_DWORD *)(a7 + 4) = v110;
                  goto LABEL_105;
                }
                v110 = 0;
                v111 = 0;
              }
              else
              {
                v110 = 0;
                v111 = 0;
                if (v39)
                {
LABEL_105:
                  v112 = v34 + v105 * v36;
                  v113 = v112 & 0x1F;
                  v114 = &v39[4 * (v112 >> 5)];
                  v115 = *(_DWORD *)v114 >> v112;
                  if (v113 + v21 >= 0x21)
                    v115 |= *((_DWORD *)v114 + 1) << -(char)v113;
                  v111 = v115 & (0xFFFFFFFF >> -(char)v21);
                }
              }
              *(_DWORD *)(a7 + 8) = v111 - v110;
              *(_DWORD *)(a7 + 12) = v24;
            }
            return 1;
          }
        }
        return 0;
      }
    }
    else
    {
      v21 = 0;
      v20 = 0;
      v19 = 0;
    }
    v24 = 0;
    v23 = 1;
    goto LABEL_18;
  }
  v25 = v16 + 8;
  v26 = *(unsigned __int8 *)(a1 + 36);
  v120 = v16 + 8;
  if (v26 > a3)
  {
    if (v17)
    {
      v29 = (unsigned int *)(v17 + a6);
      v30 = *v29;
      if (a3 == 3)
      {
        v31 = (v30 >> 15) & 0x1F;
      }
      else
      {
        v49 = ((v30 >> 10) & 0x1F) + 5 * a3;
        v50 = &v29[v49 >> 5];
        v51 = *v50 >> v49;
        if ((v49 & 0x1F) >= 0x1C)
          v51 |= v50[1] << -(v49 & 0x1F);
        v31 = v51 & 0x1F;
      }
    }
    else
    {
      v31 = 0;
    }
    v27 = a7;
    v28 = v31;
    v25 = v16 + v31 + 16;
  }
  else
  {
    v27 = a7;
    v28 = 0;
  }
  v122 = 0;
  v52 = sub_19C3B5A74(v17, a2, a4, a5, v25, v16, &v122);
  result = 0;
  if (v52)
  {
    if (a8)
    {
      if (v17)
      {
        v53 = v122 * v25;
        v54 = (v122 * v25 + v16) & 0x1F;
        v55 = (_DWORD *)(v17 + v12 + 4 * ((v122 * v25 + v16) >> 5));
        v56 = *v55 >> (v122 * v25 + v16);
        if (v54 >= 0x19)
          v56 |= v55[1] << -(char)v54;
        *a8 = v56;
        a8[1] = 0;
        v57 = a8 + 1;
        if (v26 <= a3)
          return 1;
        v58 = v28 + v120 + v53;
        v59 = (_DWORD *)(v17 + v12 + 4 * (v58 >> 5));
        v60 = *v59 >> v58;
        if ((v58 & 0x1F) >= 0x19)
          v60 |= v59[1] << -(v58 & 0x1F);
      }
      else
      {
        *(_WORD *)a8 = 0;
        v57 = a8 + 1;
        if (v26 <= a3)
          return 1;
        LOBYTE(v60) = 0;
      }
      *v57 = v60;
      if (!v27)
        return 1;
    }
    else
    {
      result = 1;
      if (!v27 || v26 <= a3)
        return result;
    }
    *(_QWORD *)(v27 + 8) = 0;
    *(_QWORD *)v27 = ((v25 * v14 + 7) >> 3) + v12;
    if (!v28)
      return 1;
    v61 = v28;
    v62 = v122;
    if (v122)
    {
      v63 = v16 + 8;
      if (v17)
      {
        v64 = v17 + v12;
        v65 = v120 + (v122 - 1) * v25;
        v66 = v65 & 0x1F;
        v67 = (_DWORD *)(v64 + 4 * (v65 >> 5));
        v68 = *v67 >> v65;
        if ((v66 + v61) >= 0x21)
          v68 |= v67[1] << -(char)v66;
        v69 = v68 & (0xFFFFFFFF >> -(char)v61);
        *(_DWORD *)(v27 + 4) = v69;
        goto LABEL_81;
      }
      *(_DWORD *)(v27 + 4) = 0;
    }
    else
    {
      *(_DWORD *)(v27 + 4) = 0;
      v63 = v16 + 8;
      if (v17)
      {
        v69 = 0;
        v64 = v17 + v12;
LABEL_81:
        v96 = v63 + v62 * v25;
        v97 = v96 & 0x1F;
        v98 = (_DWORD *)(v17 + v12 + 4 * (v96 >> 5));
        v99 = *v98 >> v96;
        if ((v97 + v61) >= 0x21)
          v99 |= v98[1] << -(char)v97;
        v100 = 0;
        *(_DWORD *)(v27 + 8) = (v99 & (0xFFFFFFFF >> -(char)v61)) - v69;
        if (v14)
        {
          v101 = v63 + (v14 - 1) * v25;
          v102 = v101 & 0x1F;
          v103 = (_DWORD *)(v64 + 4 * (v101 >> 5));
          v104 = *v103 >> v101;
          if ((v102 + v61) >= 0x21)
            v104 |= v103[1] << -(char)v102;
          v100 = v104 & (0xFFFFFFFF >> -(char)v61);
        }
        goto LABEL_89;
      }
    }
    v100 = 0;
    *(_DWORD *)(v27 + 8) = 0;
LABEL_89:
    *(_DWORD *)(v27 + 12) = v100;
    return 1;
  }
  return result;
}

uint64_t sub_19C3BA4F8(uint64_t *a1, _DWORD *a2, int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  int v10;
  int v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  int v22;
  unsigned int v23;
  uint64_t v25;
  int v26;
  unint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  unint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  unsigned int v36;
  unint64_t i;
  int v38;
  unint64_t v40;
  uint64_t v41;
  unsigned __int8 *v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  unint64_t v49;
  int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v55;

  v4 = *a1;
  v5 = *a1 + 15;
  v6 = v5 + 20 * (a3 - 2);
  if (!*(_DWORD *)v6 || !*(_DWORD *)(v6 + 4) || !*(_DWORD *)(v6 + 8) || !*(_DWORD *)(v6 + 12))
    return 0;
  v9 = v5 + 20 * *((unsigned __int8 *)a1 + 36);
  v53 = *(unsigned int *)(v9 - 40);
  v50 = *(_DWORD *)(v9 - 28);
  v51 = *(_DWORD *)(v9 - 36);
  v10 = *(unsigned __int8 *)(v6 + 17);
  v55 = 0xFFFFFFFF >> -(char)v10;
  v11 = *((unsigned __int8 *)a1 + 49) + v10;
  v52 = *((unsigned __int8 *)a1 + 48);
  v12 = a3 - 1;
  v13 = cmph_search_packed();
  v14 = 0;
  v15 = *(unsigned int *)(v6 + 8);
  v16 = *(unsigned int *)(v6 + 12);
  v17 = *a1 + v15;
  v18 = *(unsigned __int8 *)(v6 + 17);
  v19 = (v13 * v11);
  v20 = v19 >> 3;
  if ((v13 * v11) >> 3 < v16 && v18 != 0)
  {
    v22 = 8 - (((_BYTE)v13 * (_BYTE)v11) & 7);
    if ((((_BYTE)v13 * (_BYTE)v11) & 7u) + v18 <= 8)
      v22 = v18;
    v14 = (*(unsigned __int8 *)(v17 + v20) >> ((v13 * v11) & 7)) & (0xFFu >> (8 - v22));
    v23 = v18 - v22;
    if (v18 != v22 && v20 + 1 < v16)
    {
      v25 = v15 + *a1 + 1;
      do
      {
        if (v23 >= 8)
          v26 = 8;
        else
          v26 = v23;
        v14 |= ((0xFFu >> (8 - v26)) & *(unsigned __int8 *)(v25 + v20)) << (v18 - v23);
        v23 -= v26;
        if (!v23)
          break;
        v27 = v20 + 2;
        ++v20;
      }
      while (v27 < v16);
    }
  }
  v28 = *a1;
  if (v14 != (sub_19C3B4130(a2, v12) & v55))
    return 0;
  v29 = 0;
  v30 = (v51 + v50 + 3) & 0xFFFFFFFC;
  v31 = v52 + 1;
  v32 = (unint64_t)(v19 + v18) >> 3;
  if ((v19 + v18) >> 3 >= v16)
  {
    v34 = a4;
  }
  else
  {
    v33 = *((unsigned __int8 *)a1 + 49);
    v34 = a4;
    if (*((_BYTE *)a1 + 49))
    {
      v35 = (((_BYTE)v19 + (_BYTE)v18) & 7u) + v33 <= 8
          ? *((unsigned __int8 *)a1 + 49)
          : 8 - (((_BYTE)v19 + (_BYTE)v18) & 7);
      v29 = (*(unsigned __int8 *)(v17 + v32) >> ((v19 + v18) & 7)) & (0xFFu >> (8 - v35));
      v36 = v33 - v35;
      if (v36)
      {
        for (i = v32 + 1; i < v16; ++i)
        {
          if (v36 >= 8)
            v38 = 8;
          else
            v38 = v36;
          v29 |= ((0xFFu >> (8 - v38)) & *(unsigned __int8 *)(v17 + i)) << (v33 - v36);
          v36 -= v38;
          if (!v36)
            break;
        }
      }
    }
  }
  v40 = (unint64_t)(v52 + 8) >> 3;
  v41 = v29;
  v42 = (unsigned __int8 *)(v4 + v53 + v30 + v29);
  if (v31 >= 8)
    v43 = 8;
  else
    v43 = v52 + 1;
  v44 = (0xFFu >> (8 - v43)) & *v42;
  v45 = v31 - v43;
  if (v45 && v52 >= 8)
  {
    v46 = 0;
    v47 = v30 + v41 + v53 + v4 + 1;
    do
    {
      if (v45 >= 8)
        v48 = 8;
      else
        v48 = v45;
      v44 |= ((0xFFu >> (8 - v48)) & *(unsigned __int8 *)(v47 + v46)) << (v31 - v45);
      v45 -= v48;
      if (!v45)
        break;
      v49 = v46 + 2;
      ++v46;
    }
    while (v49 < v40);
  }
  if (v34)
  {
    *(_QWORD *)v34 = ((_DWORD)v42 + v40 - v28);
    *(_DWORD *)(v34 + 8) = v44;
    *(_DWORD *)(v34 + 12) = v44;
  }
  return 1;
}

uint64_t sub_19C3BA818(uint64_t a1, unsigned int a2)
{
  int v3;

  if (*(_DWORD *)(a1 + 12) >= a2)
  {
    v3 = *(unsigned __int8 *)(*(_QWORD *)a1 + 55 + ((unint64_t)a2 >> 2)) >> (2 * (a2 & 3));
    if ((a2 & 3) == 0)
      LOBYTE(v3) = *(_BYTE *)(*(_QWORD *)a1 + 55 + ((unint64_t)a2 >> 2));
    __asm { BR              X13 }
  }
  return 0;
}

void sub_19C3BA8D4(unsigned int a1@<W1>, uint64_t a2@<X8>)
{
  unsigned int v2;
  char v3;
  _BYTE *v4;
  _DWORD *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  int v15;

  v8 = *(unsigned int *)(v7 + 15);
  if ((_DWORD)v8)
  {
    v9 = *(_DWORD *)(v7 + 23);
    if (v9)
    {
      if (*(_DWORD *)(v7 + 27))
      {
        if (v3)
        {
          if (v2 <= a1)
          {
            v10 = *(_DWORD *)(v7 + v8 + 4 * (a1 / v2 - 1));
            v11 = a1 % v2;
          }
          else
          {
            v10 = 0;
            v11 = a1;
          }
          for (; v11; v11 = v13 - v14)
          {
            v12 = *(_DWORD *)(a2 + ((unint64_t)(a1 - v11) >> 2));
            v13 = v11 - 1;
            if (v13 >= 0xF)
              v14 = 15;
            else
              v14 = v13;
            v15 = v14 + 1;
            do
            {
              if ((v12 & 3) == 2)
                ++v10;
              v12 >>= 2;
              --v15;
            }
            while (v15);
          }
        }
        else
        {
          v10 = cmph_search_packed();
          v9 = *(_DWORD *)(v7 + 23);
          v7 = *v6;
        }
        if (v5)
          *v5 = 0;
        if (v4)
        {
          *v4 = *(_BYTE *)(v7 + v9 + 2 * v10);
          JUMPOUT(0x19C3BA8B4);
        }
        JUMPOUT(0x19C3BA8BCLL);
      }
    }
  }
  JUMPOUT(0x19C3BA838);
}

uint64_t sub_19C3BAA78(uint64_t *a1, unsigned int *a2, unsigned int a3)
{
  uint64_t v6;
  int v7;
  uint64_t result;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  __int128 v21;
  __int128 v22;

  v20 = 0;
  v6 = *a1;
  v7 = *(_DWORD *)(v6 + 32);
  if (v7 == 5)
  {
LABEL_4:
    if (!a3)
    {
      v16 = *(_DWORD *)(v6 + 12) + 1;
      result = operator new();
      v17 = *a1;
      *(_QWORD *)result = off_1E3D338B0;
      *(_QWORD *)(result + 8) = v17;
      *(_OWORD *)(result + 16) = 0u;
      *(_OWORD *)(result + 32) = 0u;
      *(_DWORD *)(result + 48) = v16;
      *(_DWORD *)(result + 56) = 0;
      *(_QWORD *)(result + 72) = 0;
      *(_QWORD *)(result + 80) = 0;
      *(_QWORD *)(result + 64) = a2;
      *(_QWORD *)(result + 85) = 0;
      return result;
    }
    if (*(unsigned __int8 *)(v6 + 36) >= 2u && sub_19C3B9C58(v6, a2, 2u, (uint64_t)&v22, &v20, 0))
    {
      if (a3 == 1)
      {
        result = operator new();
        v9 = *a1;
        v10 = v20;
        *(_QWORD *)result = off_1E3D33878;
        *(_QWORD *)(result + 8) = v9;
        *(_QWORD *)(result + 24) = 0;
        *(_QWORD *)(result + 32) = 0;
        *(_QWORD *)(result + 16) = 0;
        *(_OWORD *)(result + 40) = v22;
        *(_DWORD *)(result + 56) = v10;
        *(_QWORD *)(result + 64) = a2;
        *(_DWORD *)(result + 72) = 1;
LABEL_25:
        *(_QWORD *)(result + 84) = 0;
        *(_QWORD *)(result + 76) = 0;
        *(_BYTE *)(result + 92) = 0;
        return result;
      }
      if (*(unsigned __int8 *)(*a1 + 36) > a3 && sub_19C3B9C58(*a1, a2, a3 + 1, (uint64_t)&v21, &v20, 0))
      {
        result = operator new();
        v18 = *a1;
        v19 = v20;
        *(_QWORD *)result = off_1E3D33840;
        *(_QWORD *)(result + 8) = v18;
        *(_QWORD *)(result + 24) = 0;
        *(_QWORD *)(result + 32) = 0;
        *(_QWORD *)(result + 16) = 0;
        *(_OWORD *)(result + 40) = v21;
        *(_DWORD *)(result + 56) = v19;
        goto LABEL_24;
      }
    }
    goto LABEL_26;
  }
  if (v7 != 4)
  {
    if (v7 != 3)
      goto LABEL_26;
    goto LABEL_4;
  }
  if (a3 && *(unsigned __int8 *)(v6 + 36) > a3)
  {
    v11 = 0;
    v12 = *(_DWORD *)(v6 + 12);
    do
      v13 = a2[v11++];
    while (v13 <= v12 && v11 < a3);
    if (v13 <= v12 && sub_19C3BA4F8((uint64_t *)v6, a2, a3 + 1, (uint64_t)&v21))
    {
      result = operator new();
      v15 = *a1;
      *(_QWORD *)result = off_1E3D338E8;
      *(_QWORD *)(result + 8) = v15;
      *(_QWORD *)(result + 24) = 0;
      *(_QWORD *)(result + 32) = 0;
      *(_QWORD *)(result + 16) = 0;
      *(_OWORD *)(result + 40) = v21;
      *(_DWORD *)(result + 56) = 0;
LABEL_24:
      *(_QWORD *)(result + 64) = a2;
      *(_DWORD *)(result + 72) = a3;
      goto LABEL_25;
    }
  }
LABEL_26:
  result = operator new();
  *(_QWORD *)result = off_1E3D339B0;
  return result;
}

uint64_t sub_19C3BACD8()
{
  return 0;
}

uint64_t sub_19C3BACE0()
{
  return 0;
}

void sub_19C3BACEC()
{
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C3BAD00()
{
  return 0;
}

uint64_t sub_19C3BAD08(uint64_t a1)
{
  unsigned int v2;
  unsigned int v3;

  if (*(_BYTE *)(a1 + 92))
  {
    v2 = *(_DWORD *)(a1 + 88) + 1;
    v3 = *(_DWORD *)(a1 + 76);
    if (v2 == v3)
    {
      sub_19C3B827C(a1);
      v3 = *(_DWORD *)(a1 + 76);
      v2 = *(_DWORD *)(a1 + 88) + 1;
    }
    if (v2 < v3 || v2 < *(_DWORD *)(a1 + 48))
    {
      *(_DWORD *)(a1 + 88) = v2;
      return 1;
    }
  }
  else
  {
    *(_BYTE *)(a1 + 92) = 1;
    if (*(_DWORD *)(a1 + 76))
      return 1;
    sub_19C3B827C(a1);
    if (*(_DWORD *)(a1 + 48))
      return 1;
  }
  return 0;
}

uint64_t sub_19C3BAD9C(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  BOOL v6;
  uint64_t result;
  unsigned int v8;
  _DWORD *v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  _DWORD *v13;

  if (!*(_BYTE *)(a1 + 92))
    return 0;
  v2 = *(unsigned int *)(a1 + 88);
  if (v2 >= *(_DWORD *)(a1 + 76))
  {
    v5 = *(_QWORD *)(a1 + 16) + 5 * v2;
    result = *(unsigned int *)v5;
    LOBYTE(v5) = *(_BYTE *)(v5 + 4);
  }
  else
  {
    v3 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 16);
    v4 = v3 + 8;
    v5 = *(_QWORD *)(a1 + 80);
    if (*(_BYTE *)(*(_QWORD *)(a1 + 8) + 16))
      v6 = v5 == 0;
    else
      v6 = 1;
    if (!v6)
    {
      v8 = v4 * v2;
      v9 = (_DWORD *)(v5 + 4 * (v8 >> 5));
      v10 = *v9 >> v8;
      if ((v8 & 0x1F) + v3 >= 0x21)
        v10 |= v9[1] << -(v8 & 0x1F);
      result = v10 & (0xFFFFFFFF >> -(char)v3);
      goto LABEL_15;
    }
    result = 0;
    if (v5)
    {
      v8 = v4 * v2;
LABEL_15:
      v11 = v8 + v3;
      v12 = (v8 + v3) & 0x1F;
      v13 = (_DWORD *)(v5 + 4 * (v11 >> 5));
      LODWORD(v5) = *v13 >> v11;
      if (v12 >= 0x19)
        LODWORD(v5) = (v13[1] << -(char)v12) | v5;
    }
  }
  if (a2)
    *a2 = v5;
  return result;
}

_QWORD *sub_19C3BAE80(_QWORD *a1)
{
  void *v2;

  *a1 = off_1E3D338E8;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_19C3BAEBC(_QWORD *a1)
{
  void *v2;

  *a1 = off_1E3D338E8;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C3BAF08(uint64_t a1)
{
  return *(unsigned int *)(a1 + 72);
}

uint64_t sub_19C3BAF10(uint64_t a1)
{
  unsigned int v2;
  unsigned int v3;

  if (*(_BYTE *)(a1 + 92))
  {
    v2 = *(_DWORD *)(a1 + 88) + 1;
    v3 = *(_DWORD *)(a1 + 76);
    if (v2 == v3)
    {
      sub_19C3B7074(a1);
      v3 = *(_DWORD *)(a1 + 76);
      v2 = *(_DWORD *)(a1 + 88) + 1;
    }
    if (v2 < v3 || v2 < *(_DWORD *)(a1 + 48))
    {
      *(_DWORD *)(a1 + 88) = v2;
      return 1;
    }
  }
  else
  {
    *(_BYTE *)(a1 + 92) = 1;
    if (*(_DWORD *)(a1 + 76))
      return 1;
    sub_19C3B7074(a1);
    if (*(_DWORD *)(a1 + 48))
      return 1;
  }
  return 0;
}

uint64_t sub_19C3BAFA4(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  BOOL v6;
  uint64_t result;
  unsigned int v8;
  _DWORD *v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  _DWORD *v13;

  if (!*(_BYTE *)(a1 + 92))
    return 0;
  v2 = *(unsigned int *)(a1 + 88);
  if (v2 >= *(_DWORD *)(a1 + 76))
  {
    v5 = *(_QWORD *)(a1 + 16) + 5 * v2;
    result = *(unsigned int *)v5;
    LOBYTE(v5) = *(_BYTE *)(v5 + 4);
  }
  else
  {
    v3 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 16);
    v4 = v3 + 8;
    v5 = *(_QWORD *)(a1 + 80);
    if (*(_BYTE *)(*(_QWORD *)(a1 + 8) + 16))
      v6 = v5 == 0;
    else
      v6 = 1;
    if (!v6)
    {
      v8 = v4 * v2;
      v9 = (_DWORD *)(v5 + 4 * (v8 >> 5));
      v10 = *v9 >> v8;
      if ((v8 & 0x1F) + v3 >= 0x21)
        v10 |= v9[1] << -(v8 & 0x1F);
      result = v10 & (0xFFFFFFFF >> -(char)v3);
      goto LABEL_15;
    }
    result = 0;
    if (v5)
    {
      v8 = v4 * v2;
LABEL_15:
      v11 = v8 + v3;
      v12 = (v8 + v3) & 0x1F;
      v13 = (_DWORD *)(v5 + 4 * (v11 >> 5));
      LODWORD(v5) = *v13 >> v11;
      if (v12 >= 0x19)
        LODWORD(v5) = (v13[1] << -(char)v12) | v5;
    }
  }
  if (a2)
    *a2 = v5;
  return result;
}

_QWORD *sub_19C3BB088(_QWORD *a1)
{
  void *v2;

  *a1 = off_1E3D33840;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_19C3BB0C4(_QWORD *a1)
{
  void *v2;

  *a1 = off_1E3D33840;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C3BB110(uint64_t a1)
{
  return *(unsigned int *)(a1 + 72);
}

BOOL sub_19C3BB118(uint64_t a1)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  int v12;
  char v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  _DWORD *v18;
  int v19;
  unsigned int v20;
  int *v21;
  int v22;
  unsigned int v24;

  if (!*(_BYTE *)(a1 + 92))
  {
    *(_BYTE *)(a1 + 92) = 1;
    v4 = *(_QWORD *)(a1 + 8);
    v5 = *(_BYTE *)(v4 + 50) & 0xF;
    if (!v5)
      goto LABEL_29;
    if (*(_DWORD *)(a1 + 72) != 1)
      goto LABEL_29;
    v6 = *(unsigned int *)(a1 + 40);
    if (!(_DWORD)v6)
      goto LABEL_29;
    v7 = *(unsigned int *)(a1 + 56);
    if (v7 < 2)
      goto LABEL_29;
    v8 = *(_QWORD *)v4;
    if (*(_QWORD *)v4)
      v9 = *(_DWORD *)(v8 + v7) & 0x7FFF;
    else
      v9 = 0;
    v10 = *(unsigned __int8 *)(v4 + 16);
    v11 = v9 & 0x1F;
    if (v11 >= 2 && (v12 = (v9 >> 5) & 0x1F) != 0)
    {
      if (!v8)
        goto LABEL_29;
      v13 = v10 - v11;
      v14 = v8 + v6;
      v15 = *(unsigned __int8 *)(v4 + 36);
      v16 = (5 * v15 + (v9 >> 10) + 7) >> 3;
      if (v15 <= 3)
        v16 = 2;
      v17 = (v12 << v13) - v12;
      v18 = (_DWORD *)(v14 + v16 + 4 * (v17 >> 5));
      v19 = *v18 >> v17;
      if ((v17 & 0x1F) + v12 >= 0x21)
        v19 |= v18[1] << -(v17 & 0x1F);
      if ((v19 & (0xFFFFFFFF >> -(char)v12)) < 0x201)
      {
LABEL_29:
        if (*(_DWORD *)(a1 + 76))
          return 1;
        sub_19C3B5C4C(a1);
        return *(_DWORD *)(a1 + 48) != 0;
      }
      v20 = (((v10 + 8) << v5) + 7) >> 3;
      v24 = 0;
      v21 = (int *)(v8 + *(unsigned int *)(v4 + 52));
    }
    else
    {
      if (v11 != 1)
        goto LABEL_29;
      v20 = (((v10 + 8) << v5) + 7) >> 3;
      v24 = 0;
      v21 = (int *)(v8 + *(unsigned int *)(v4 + 52));
      if (!v8)
      {
        v22 = 0;
LABEL_27:
        if (sub_19C3B5A74(v8, **(_DWORD **)(a1 + 64), ((_DWORD)v21 - v8 + 4), v22, v10, v10, &v24))
        {
          *(_QWORD *)(a1 + 80) = (char *)v21 + ((v22 * v10 + 7) >> 3) + v24 * v20 + 4;
          *(_DWORD *)(a1 + 76) = 1 << v5;
        }
        goto LABEL_29;
      }
    }
    v22 = *v21;
    goto LABEL_27;
  }
  v2 = *(_DWORD *)(a1 + 88) + 1;
  v3 = *(_DWORD *)(a1 + 76);
  if (v2 == v3)
  {
    sub_19C3B5C4C(a1);
    v3 = *(_DWORD *)(a1 + 76);
    v2 = *(_DWORD *)(a1 + 88) + 1;
  }
  if (v2 < v3 || v2 < *(_DWORD *)(a1 + 48))
  {
    *(_DWORD *)(a1 + 88) = v2;
    return 1;
  }
  return 0;
}

uint64_t sub_19C3BB35C(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  BOOL v6;
  uint64_t result;
  unsigned int v8;
  _DWORD *v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  _DWORD *v13;

  if (!*(_BYTE *)(a1 + 92))
    return 0;
  v2 = *(unsigned int *)(a1 + 88);
  if (v2 >= *(_DWORD *)(a1 + 76))
  {
    v5 = *(_QWORD *)(a1 + 16) + 5 * v2;
    result = *(unsigned int *)v5;
    LOBYTE(v5) = *(_BYTE *)(v5 + 4);
  }
  else
  {
    v3 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 16);
    v4 = v3 + 8;
    v5 = *(_QWORD *)(a1 + 80);
    if (*(_BYTE *)(*(_QWORD *)(a1 + 8) + 16))
      v6 = v5 == 0;
    else
      v6 = 1;
    if (!v6)
    {
      v8 = v4 * v2;
      v9 = (_DWORD *)(v5 + 4 * (v8 >> 5));
      v10 = *v9 >> v8;
      if ((v8 & 0x1F) + v3 >= 0x21)
        v10 |= v9[1] << -(v8 & 0x1F);
      result = v10 & (0xFFFFFFFF >> -(char)v3);
      goto LABEL_15;
    }
    result = 0;
    if (v5)
    {
      v8 = v4 * v2;
LABEL_15:
      v11 = v8 + v3;
      v12 = (v8 + v3) & 0x1F;
      v13 = (_DWORD *)(v5 + 4 * (v11 >> 5));
      LODWORD(v5) = *v13 >> v11;
      if (v12 >= 0x19)
        LODWORD(v5) = (v13[1] << -(char)v12) | v5;
    }
  }
  if (a2)
    *a2 = v5;
  return result;
}

_QWORD *sub_19C3BB440(_QWORD *a1)
{
  void *v2;

  *a1 = off_1E3D33878;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_19C3BB47C(_QWORD *a1)
{
  void *v2;

  *a1 = off_1E3D33878;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C3BB4C8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 72);
}

BOOL sub_19C3BB4D0(uint64_t a1)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t *v4;
  char v5;
  int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  _DWORD *v11;

  if (!*(_BYTE *)(a1 + 92))
  {
    *(_BYTE *)(a1 + 92) = 1;
    v4 = *(uint64_t **)(a1 + 8);
    if ((*((_BYTE *)v4 + 50) & 0x10) != 0 && (v5 = *((_BYTE *)v4 + 50) & 0xF) != 0 && !*(_DWORD *)(a1 + 72))
    {
      v7 = *((unsigned __int8 *)v4 + 16);
      v8 = 1 << v5;
      v9 = (((v7 + 8) << v5) + 7) >> 3;
      v10 = *v4;
      v11 = (_DWORD *)(*v4 + *((unsigned int *)v4 + 13));
      if (v10)
        LODWORD(v10) = *v11;
      *(_QWORD *)(a1 + 80) = (char *)v11 + ((v10 * v7 + 7) >> 3) + v10 * v9 + 4;
      *(_DWORD *)(a1 + 76) = v8;
      if (*(_DWORD *)(a1 + 76))
        return 1;
    }
    else if (*(_DWORD *)(a1 + 76))
    {
      return 1;
    }
    sub_19C3B4258(a1);
    return *(_DWORD *)(a1 + 48) != 0;
  }
  v2 = *(_DWORD *)(a1 + 88) + 1;
  v3 = *(_DWORD *)(a1 + 76);
  if (v2 == v3)
  {
    sub_19C3B4258(a1);
    v3 = *(_DWORD *)(a1 + 76);
    v2 = *(_DWORD *)(a1 + 88) + 1;
  }
  if (v2 >= v3 && v2 >= *(_DWORD *)(a1 + 48))
    return 0;
  *(_DWORD *)(a1 + 88) = v2;
  return 1;
}

uint64_t sub_19C3BB5D8(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  BOOL v6;
  uint64_t result;
  unsigned int v8;
  _DWORD *v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  _DWORD *v13;

  if (!*(_BYTE *)(a1 + 92))
    return 0;
  v2 = *(unsigned int *)(a1 + 88);
  if (v2 >= *(_DWORD *)(a1 + 76))
  {
    v5 = *(_QWORD *)(a1 + 16) + 5 * v2;
    result = *(unsigned int *)v5;
    LOBYTE(v5) = *(_BYTE *)(v5 + 4);
  }
  else
  {
    v3 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 16);
    v4 = v3 + 8;
    v5 = *(_QWORD *)(a1 + 80);
    if (*(_BYTE *)(*(_QWORD *)(a1 + 8) + 16))
      v6 = v5 == 0;
    else
      v6 = 1;
    if (!v6)
    {
      v8 = v4 * v2;
      v9 = (_DWORD *)(v5 + 4 * (v8 >> 5));
      v10 = *v9 >> v8;
      if ((v8 & 0x1F) + v3 >= 0x21)
        v10 |= v9[1] << -(v8 & 0x1F);
      result = v10 & (0xFFFFFFFF >> -(char)v3);
      goto LABEL_15;
    }
    result = 0;
    if (v5)
    {
      v8 = v4 * v2;
LABEL_15:
      v11 = v8 + v3;
      v12 = (v8 + v3) & 0x1F;
      v13 = (_DWORD *)(v5 + 4 * (v11 >> 5));
      LODWORD(v5) = *v13 >> v11;
      if (v12 >= 0x19)
        LODWORD(v5) = (v13[1] << -(char)v12) | v5;
    }
  }
  if (a2)
    *a2 = v5;
  return result;
}

_QWORD *sub_19C3BB6BC(_QWORD *a1)
{
  void *v2;

  *a1 = off_1E3D338B0;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_19C3BB6F8(_QWORD *a1)
{
  void *v2;

  *a1 = off_1E3D338B0;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C3BB744(uint64_t a1)
{
  return *(unsigned int *)(a1 + 72);
}

uint64_t sub_19C3BB74C(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_1E3D301C0;
  sub_19C3C061C(a1 + 72);
  v2 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (*(_BYTE *)(a1 + 24))
    std::recursive_mutex::unlock(*(std::recursive_mutex **)(a1 + 16));
  return a1;
}

void sub_19C3BB7A4(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_1E3D301C0;
  sub_19C3C061C(a1 + 72);
  v2 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (*(_BYTE *)(a1 + 24))
    std::recursive_mutex::unlock(*(std::recursive_mutex **)(a1 + 16));
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C3BB80C(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  _QWORD *v18;
  unsigned int v19;
  BOOL v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  int v26;
  unsigned int v27;
  unint64_t v28;
  _OWORD v31[2];
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v1 = a1[7];
  if (v1 >= 1)
  {
    v3 = a1 + 10;
    while (1)
    {
      while (1)
      {
        v4 = a1[8];
        if (!v4)
        {
          v6 = a1[5];
          v5 = a1[6];
          v7 = a1[4];
          v8 = (_QWORD *)a1[1];
          v4 = operator new();
          sub_19C432254(v4, v8, (const void *)(v7 + 4 * v6 - 4 * v1), v1, v5, v8[14]);
          v9 = a1[8];
          a1[8] = v4;
          if (v9)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
            v4 = a1[8];
          }
        }
        v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
        if ((_DWORD)v10)
          break;
        v22 = a1[8];
        a1[8] = 0;
        if (v22)
          (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
        v1 = a1[7] - 1;
        a1[7] = v1;
        if (v1 <= 0)
          return 0;
      }
      MEMORY[0x1E0C80A78](v10, v11);
      v13 = (unsigned int *)((char *)v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
      v14 = (*(uint64_t (**)(_QWORD, unsigned int *, _QWORD))(*(_QWORD *)a1[8] + 24))(a1[8], v13, 0);
      v15 = v14;
      if (v14 != 1)
        break;
      v16 = *v3;
      if (*v3)
      {
        v17 = *v13;
        v18 = v3;
        do
        {
          v19 = *(_DWORD *)(v16 + 28);
          v20 = v19 >= v17;
          if (v19 >= v17)
            v21 = (uint64_t *)v16;
          else
            v21 = (uint64_t *)(v16 + 8);
          if (v20)
            v18 = (_QWORD *)v16;
          v16 = *v21;
        }
        while (*v21);
        if (v18 != v3 && v17 >= *((_DWORD *)v18 + 7))
          goto LABEL_3;
LABEL_27:
        if (!v15)
          return 1;
      }
      v25 = v13 + 1;
      while (1)
      {
        v26 = *(v25 - 1);
        if ((v26 - 3) <= 0x1F0)
          break;
        LOBYTE(v28) = 0;
LABEL_34:
        if (v25++ == &v13[v15])
          goto LABEL_36;
      }
      v27 = v26 - 68;
      if (v27 > 0x3C)
        goto LABEL_3;
      v28 = (0x7FFFFFFFFFFFFE0uLL >> v27) & 1;
      if ((v28 & 1) == 0)
        goto LABEL_34;
LABEL_36:
      if ((v28 & 1) == 0)
        return 1;
LABEL_3:
      v1 = a1[7];
      if (v1 <= 0)
        return 0;
    }
    v23 = (4 * v14);
    if ((_DWORD)v23)
    {
      v24 = a1[12];
      v31[0] = xmmword_19C477EF0;
      v31[1] = unk_19C477F00;
      sub_19C4029D0(v24, v13, v23, 1, (uint64_t)v31);
      if ((DWORD1(v31[0]) & 0x80000000) == 0)
        goto LABEL_3;
    }
    goto LABEL_27;
  }
  return 0;
}

void sub_19C3BBA8C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD355C](v1, 0x10B1C4048F3F20DLL);
  _Unwind_Resume(a1);
}

uint64_t sub_19C3BBAB4(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v7;
  __n128 v8;

  v4 = *(_QWORD *)(a1 + 64);
  if (!v4)
    __assert_rtn("getPrediction", "LMMultilingualDynamicLanguageModel.cpp", 490, "m_currentEnumerator");
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  *(_DWORD *)(a3 + 116) = 10;
  sub_19C3C0690((uint64_t **)(a1 + 72), a2, v7, v8);
  return v7;
}

void **sub_19C3BBB34(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  const void *v5;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (const void *)*((_QWORD *)v3 - 1);
        if (v5)
          CFRelease(v5);
        *((_QWORD *)v3 - 1) = 0;
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

os_log_t sub_19C3BBBAC()
{
  os_log_t result;

  result = os_log_create("com.apple.LanguageModeling", "MultilingualDynamicLanguageModel");
  qword_1EE41C438 = (uint64_t)result;
  return result;
}

void sub_19C3BBBD8(std::recursive_mutex *a1, uint64_t a2, const __CFArray *a3)
{
  std::recursive_mutex *v5;
  uint64_t *v6;
  uint64_t *v7;
  const void *v8;
  unint64_t v9;
  char *v10;
  _QWORD *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  _QWORD *v20;
  unint64_t v21;
  __int128 v22;
  char *v23;
  char *v24;
  const void *v25;
  const void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const void *v30;
  const void *v31;
  uint64_t v32;
  const void *v33;
  CFTypeRef *v34;
  char *v35;
  char *v36;
  CFTypeRef v37;
  const __CFArray *v38;
  CFIndex Count;
  CFIndex v40;
  const __CFArray *v41;
  unint64_t v42;
  const void *ValueAtIndex;
  const void *v44;
  const __CFArray *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  int64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  char *v58;
  const void *v59;
  const void *v60;
  unint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  __int128 v65;
  const __CFArray *v66;
  uint64_t v67;
  uint64_t i;
  std::__shared_weak_count *v69;
  unint64_t *p_shared_owners;
  unint64_t v71;
  CFIndex v72;
  CFIndex v73;
  CFIndex v74;
  unint64_t j;
  uint64_t v76;
  const void *v77;
  uint64_t *v78;
  _QWORD *v79;
  char *v80;
  const void *v81;
  uint64_t sig;
  const __CFArray *v83;
  CFTypeID TypeID;
  int v85;
  CFIndex v86;
  uint64_t v87;
  const void *v88;
  const void *v89;
  char *v90;
  uint64_t v91;
  NSObject *v92;
  __int128 *p_dst;
  CFTypeRef **v94;
  CFTypeRef **v95;
  CFTypeRef *v96;
  int v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  _QWORD *v101;
  const void *v102;
  const void *v103;
  char *k;
  const void *v105;
  const void *v106;
  char *v107;
  BOOL v108;
  BOOL v109;
  BOOL v110;
  uint64_t v111;
  char *v112;
  double *v113;
  const double *v114;
  uint64_t v115;
  void *exception;
  void *v117;
  CFTypeRef *v118;
  char **v119;
  CFTypeRef *v120;
  CFIndex v121;
  std::recursive_mutex *v122;
  CFIndex v123;
  char *v124;
  char *v125;
  unint64_t v126;
  void *v127;
  char v128;
  void *v129;
  void *v130;
  char *v131;
  unint64_t v132;
  __int128 __dst;
  uint64_t v134;
  _BYTE buf[12];
  __int16 buf_12;
  __int128 *buf_14;
  uint64_t v138;
  float64x2x2_t v139;

  v5 = a1;
  v138 = *MEMORY[0x1E0C80C00];
  std::recursive_mutex::lock(a1);
  v6 = *(uint64_t **)&v5[2].__m_.__opaque[16];
  v7 = *(uint64_t **)&v5[2].__m_.__opaque[24];
  if (v6 != v7)
  {
    while (*v6 != a2)
    {
      v6 += 2;
      if (v6 == v7)
        goto LABEL_12;
    }
  }
  if (v6 == v7)
  {
LABEL_12:
    if (!a3 || !CFArrayGetCount(a3))
      goto LABEL_159;
    CFRetain(a3);
    v10 = *(char **)&v5[2].__m_.__opaque[24];
    v9 = *(_QWORD *)&v5[2].__m_.__opaque[32];
    *(_QWORD *)&__dst = a3;
    if ((unint64_t)v10 < v9)
    {
      *(_QWORD *)v10 = a2;
      *((_QWORD *)v10 + 1) = a3;
      v11 = v10 + 16;
LABEL_42:
      *(_QWORD *)&v5[2].__m_.__opaque[24] = v11;
      goto LABEL_43;
    }
    v12 = *(char **)&v5[2].__m_.__opaque[16];
    v13 = (char *)(v10 - v12);
    v14 = (v10 - v12) >> 4;
    v15 = v14 + 1;
    if ((unint64_t)(v14 + 1) >> 60)
      sub_19C2A18E8();
    v16 = v9 - (_QWORD)v12;
    if (v16 >> 3 > v15)
      v15 = v16 >> 3;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0)
      v17 = 0xFFFFFFFFFFFFFFFLL;
    else
      v17 = v15;
    if (v17 >> 60)
      sub_19C2A143C();
    v18 = (char *)operator new(16 * v17);
    v19 = &v18[16 * v14];
    *(_QWORD *)&__dst = 0;
    *(_QWORD *)v19 = a2;
    *((_QWORD *)v19 + 1) = a3;
    v20 = v19 + 16;
    if (v10 != v12)
    {
      v21 = v10 - v12 - 16;
      if (v21 >= 0x110)
      {
        v107 = &v10[-(v21 & 0xFFFFFFFFFFFFFFF0)];
        v108 = v107 - 8 >= v19 || &v13[(_QWORD)v18 - 8 - (v21 & 0xFFFFFFFFFFFFFFF0)] >= v10;
        v109 = !v108;
        v110 = v107 - 16 >= &v13[(_QWORD)v18 - 8] || &v13[(_QWORD)v18 - (v21 & 0xFFFFFFFFFFFFFFF0) - 16] >= v10 - 8;
        if (v110 && !v109)
        {
          v111 = (v21 >> 4) + 1;
          v112 = &v19[-16 * (v111 & 0x1FFFFFFFFFFFFFFELL)];
          v113 = (double *)(v19 - 32);
          v114 = (const double *)(v10 - 32);
          v115 = v111 & 0x1FFFFFFFFFFFFFFELL;
          do
          {
            v139 = vld2q_f64(v114);
            v114[3] = 0.0;
            v114[1] = 0.0;
            vst2q_f64(v113, v139);
            v114 -= 4;
            v113 -= 4;
            v115 -= 2;
          }
          while (v115);
          if (v111 == (v111 & 0x1FFFFFFFFFFFFFFELL))
          {
            v19 = v112;
            goto LABEL_26;
          }
          v10 -= 16 * (v111 & 0x1FFFFFFFFFFFFFFELL);
          v19 = v112;
        }
      }
      do
      {
        v22 = *((_OWORD *)v10 - 1);
        v10 -= 16;
        *((_QWORD *)v10 + 1) = 0;
        *((_OWORD *)v19 - 1) = v22;
        v19 -= 16;
      }
      while (v10 != v12);
    }
LABEL_26:
    v23 = *(char **)&v5[2].__m_.__opaque[16];
    v24 = *(char **)&v5[2].__m_.__opaque[24];
    *(_QWORD *)&v5[2].__m_.__opaque[16] = v19;
    *(_QWORD *)&v5[2].__m_.__opaque[24] = v20;
    for (*(_QWORD *)&v5[2].__m_.__opaque[32] = &v18[16 * v17]; v24 != v23; v24 -= 16)
    {
      v26 = (const void *)*((_QWORD *)v24 - 1);
      if (v26)
        CFRelease(v26);
      *((_QWORD *)v24 - 1) = 0;
    }
    if (v23)
      operator delete(v23);
    v25 = (const void *)__dst;
    *(_QWORD *)&v5[2].__m_.__opaque[24] = v20;
    if (v25)
      CFRelease(v25);
    goto LABEL_43;
  }
  if (!a3)
  {
LABEL_35:
    v27 = *v6;
    *v6 = *(v7 - 2);
    *(v7 - 2) = v27;
    v28 = v6[1];
    v6[1] = 0;
    v29 = *(v7 - 1);
    *(v7 - 1) = 0;
    v30 = (const void *)v6[1];
    if (v30)
      CFRelease(v30);
    v6[1] = v29;
    v31 = (const void *)*(v7 - 1);
    if (v31)
      CFRelease(v31);
    *(v7 - 1) = v28;
    v32 = *(_QWORD *)&v5[2].__m_.__opaque[24];
    v33 = *(const void **)(v32 - 8);
    if (v33)
      CFRelease(v33);
    *(_QWORD *)(v32 - 8) = 0;
    v11 = (_QWORD *)(v32 - 16);
    goto LABEL_42;
  }
  if (!CFArrayGetCount(a3))
  {
    v7 = *(uint64_t **)&v5[2].__m_.__opaque[24];
    goto LABEL_35;
  }
  if ((const __CFArray *)v6[1] != a3)
  {
    CFRetain(a3);
    v8 = (const void *)v6[1];
    if (v8)
      CFRelease(v8);
    v6[1] = (uint64_t)a3;
  }
LABEL_43:
  v124 = 0;
  v125 = 0;
  v126 = 0;
  v34 = *(CFTypeRef **)&v5[2].__m_.__opaque[16];
  v118 = *(CFTypeRef **)&v5[2].__m_.__opaque[24];
  v122 = v5;
  v35 = 0;
  if (v34 != v118)
  {
    while (1)
    {
      v37 = v34[1];
      if (v37)
        CFRetain(v34[1]);
      sub_19C31D164(&__dst, v37);
      v38 = (const __CFArray *)__dst;
      if (!(_QWORD)__dst)
        goto LABEL_46;
      Count = CFArrayGetCount((CFArrayRef)__dst);
      v40 = Count;
      v41 = (const __CFArray *)__dst;
      if ((_QWORD)__dst)
      {
        v123 = CFArrayGetCount((CFArrayRef)__dst);
        v120 = v34;
        if (v40)
          break;
        goto LABEL_92;
      }
      v123 = 0;
      v120 = v34;
      if (Count)
        break;
LABEL_92:
      if ((_QWORD)__dst)
        CFRelease((CFTypeRef)__dst);
      v34 = v120;
LABEL_46:
      v34 += 2;
      if (v34 == v118)
      {
        v36 = v124;
        goto LABEL_96;
      }
    }
    v42 = 0;
    v121 = v40;
    while (1)
    {
      if (v38 == v41 && v42 == v123)
        goto LABEL_92;
      if (CFArrayGetCount(v38) <= v42 || (ValueAtIndex = CFArrayGetValueAtIndex(v38, v42), (v44 = ValueAtIndex) == 0))
      {
        exception = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1A1AD3154](exception, "Could not find item");
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
      }
      CFRetain(ValueAtIndex);
      *(_QWORD *)buf = v44;
      if ((unint64_t)v35 >= v126)
        break;
      CFRetain(v44);
      *(_QWORD *)v35 = v44;
      v35 += 8;
LABEL_86:
      v125 = v35;
      if (*(_QWORD *)buf)
        CFRelease(*(CFTypeRef *)buf);
      if (++v42 == v40)
        goto LABEL_92;
    }
    v45 = v41;
    v46 = (v35 - v124) >> 3;
    v47 = v46 + 1;
    if ((unint64_t)(v46 + 1) >> 61)
      sub_19C2A18E8();
    v48 = v126 - (_QWORD)v124;
    if ((uint64_t)(v126 - (_QWORD)v124) >> 2 > v47)
      v47 = v48 >> 2;
    if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF8)
      v49 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v49 = v47;
    if (v49)
    {
      if (v49 >> 61)
        sub_19C2A143C();
      v50 = (char *)operator new(8 * v49);
    }
    else
    {
      v50 = 0;
    }
    CFRetain(v44);
    v51 = &v50[8 * v46];
    v52 = &v50[8 * v49];
    *(_QWORD *)v51 = v44;
    v53 = v51 + 8;
    v54 = v35 - v124;
    if (v35 == v124)
    {
      v124 = &v50[8 * v46];
      v126 = (unint64_t)v52;
      v5 = v122;
LABEL_83:
      v41 = v45;
      if (v35)
        operator delete(v35);
      v35 = v53;
      v40 = v121;
      goto LABEL_86;
    }
    v55 = v54 - 8;
    if ((unint64_t)(v54 - 8) > 0x77
      && ((v56 = v55 >> 3, &v50[v35 - v124 - (v55 & 0xFFFFFFFFFFFFFFF8) - 8] >= v35) || &v35[-8 * v56 - 8] >= v51))
    {
      v61 = v56 + 1;
      v51 -= 8 * (v61 & 0x3FFFFFFFFFFFFFFCLL);
      v62 = v35 - 32;
      v63 = &v50[8 * v46 - 16];
      v64 = v61 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v65 = *((_OWORD *)v62 + 1);
        *((_OWORD *)v63 - 1) = *(_OWORD *)v62;
        *(_OWORD *)v63 = v65;
        *(_OWORD *)v62 = 0uLL;
        *((_OWORD *)v62 + 1) = 0uLL;
        v62 -= 32;
        v63 -= 32;
        v64 -= 4;
      }
      while (v64);
      v5 = v122;
      if (v61 == (v61 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_78:
        v35 = v124;
        v58 = v125;
        v124 = v51;
        v126 = (unint64_t)v52;
        while (v58 != v35)
        {
          v60 = (const void *)*((_QWORD *)v58 - 1);
          v58 -= 8;
          v59 = v60;
          if (v60)
            CFRelease(v59);
        }
        goto LABEL_83;
      }
      v35 -= 8 * (v61 & 0x3FFFFFFFFFFFFFFCLL);
    }
    else
    {
      v5 = v122;
    }
    do
    {
      v57 = *((_QWORD *)v35 - 1);
      v35 -= 8;
      *((_QWORD *)v51 - 1) = v57;
      v51 -= 8;
      *(_QWORD *)v35 = 0;
    }
    while (v35 != v124);
    goto LABEL_78;
  }
  v36 = 0;
LABEL_96:
  v66 = sub_19C31CF90(v36, v35);
  v67 = *(_QWORD *)&v5[1].__m_.__opaque[32];
  v119 = (char **)&v5[1].__m_.__opaque[32];
  for (i = *(_QWORD *)&v5[1].__m_.__opaque[40]; i != v67; i -= 16)
  {
    v69 = *(std::__shared_weak_count **)(i - 8);
    if (v69)
    {
      p_shared_owners = (unint64_t *)&v69->__shared_owners_;
      do
        v71 = __ldaxr(p_shared_owners);
      while (__stlxr(v71 - 1, p_shared_owners));
      if (!v71)
      {
        ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
        std::__shared_weak_count::__release_weak(v69);
      }
    }
  }
  *(_QWORD *)&v5[1].__m_.__opaque[40] = v67;
  if (v66)
  {
    v72 = CFArrayGetCount(v66);
    v73 = CFArrayGetCount(v66);
    if (v72)
    {
      v74 = v73;
      for (j = 0; j != v72; ++j)
      {
        if (v74 == j)
          break;
        sub_19C31D210(&__dst, v66, j);
        v76 = operator new();
        v77 = (const void *)__dst;
        *(_OWORD *)v76 = 0u;
        *(_OWORD *)(v76 + 16) = 0u;
        *(_OWORD *)(v76 + 32) = 0u;
        *(_OWORD *)(v76 + 48) = 0u;
        *(_OWORD *)(v76 + 64) = 0u;
        *(_OWORD *)(v76 + 80) = 0u;
        *(_OWORD *)(v76 + 96) = 0u;
        *(_OWORD *)(v76 + 112) = 0u;
        *(_OWORD *)(v76 + 128) = 0u;
        if (v77)
        {
          CFRetain(v77);
          if (*(_QWORD *)v76)
            CFRelease(*(CFTypeRef *)v76);
          *(_QWORD *)v76 = v77;
        }
        v78 = *(uint64_t **)&v5[1].__m_.__opaque[40];
        if ((unint64_t)v78 >= *(_QWORD *)&v5[1].__m_.__opaque[48])
        {
          v80 = sub_19C31D480(v119, v76);
        }
        else
        {
          *v78 = v76;
          v79 = (_QWORD *)operator new();
          *v79 = &off_1E3D31150;
          v79[1] = 0;
          v79[2] = 0;
          v79[3] = v76;
          v78[1] = (uint64_t)v79;
          v80 = (char *)(v78 + 2);
          *(_QWORD *)&v5[1].__m_.__opaque[40] = v78 + 2;
        }
        *(_QWORD *)&v5[1].__m_.__opaque[40] = v80;
        if (v77)
          CFRelease(v77);
      }
    }
  }
  v81 = *(const void **)&v5[2].__m_.__opaque[40];
  if (v81)
    CFRelease(v81);
  *(_QWORD *)&v5[2].__m_.__opaque[40] = v66;
  if (v5[2].__m_.__opaque[48])
  {
    if (v66)
    {
      sig = v5[2].__m_.__sig;
      CFRetain(v66);
      sub_19C31D164(buf, v66);
      v83 = *(const __CFArray **)buf;
      if (*(_QWORD *)buf)
      {
        TypeID = CFArrayGetTypeID();
        if (TypeID == CFGetTypeID(v83))
        {
          v85 = CFArrayGetCount(v83);
          v130 = 0;
          v131 = 0;
          v132 = 0;
          sub_19C345244((uint64_t)&v130, v85);
          if (v85 >= 1)
          {
            v86 = 0;
            v87 = v85;
            do
            {
              v88 = CFArrayGetValueAtIndex(v83, v86);
              v89 = v88;
              if (v88)
                CFRetain(v88);
              *(_QWORD *)&__dst = v89;
              v90 = v131;
              if ((unint64_t)v131 < v132)
              {
                *(_QWORD *)v131 = v89;
                v131 = v90 + 8;
              }
              else
              {
                v131 = sub_19C34539C((char **)&v130, &__dst);
                if ((_QWORD)__dst)
                  CFRelease((CFTypeRef)__dst);
              }
              ++v86;
            }
            while (v87 != v86);
          }
          if (*(_QWORD *)buf)
            CFRelease(*(CFTypeRef *)buf);
          v128 = 1;
          LOWORD(v127) = 42;
          sub_19C344A1C(&v129, sig, (const void **)&v127);
        }
        v117 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1A1AD3154](v117, "Could not convert");
LABEL_183:
        __cxa_throw(v117, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
      }
    }
    else
    {
      *(_QWORD *)buf = 0;
    }
    v117 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD3154](v117, "Could not construct");
    goto LABEL_183;
  }
  v91 = MEMORY[0x1A1AD2A04](*(_QWORD *)(v5[1].__m_.__sig + 8));
  sub_19C3C07CC((uint64_t)&__dst, *(CFTypeRef *)&v5[2].__m_.__opaque[40]);
  if (qword_1EE41C440 != -1)
    dispatch_once(&qword_1EE41C440, &unk_1E3D3B560);
  v92 = qword_1EE41C438;
  if (os_log_type_enabled((os_log_t)qword_1EE41C438, OS_LOG_TYPE_DEFAULT))
  {
    p_dst = &__dst;
    if (v134 < 0)
      p_dst = (__int128 *)__dst;
    *(_DWORD *)buf = 138412546;
    *(_QWORD *)&buf[4] = v91;
    buf_12 = 2080;
    buf_14 = p_dst;
    _os_log_impl(&dword_19C291000, v92, OS_LOG_TYPE_DEFAULT, "Reloading MultilingualDynamicLanguageModel (%@) for locale(s) (%s)", buf, 0x16u);
  }
  sub_19C3C1334(v5[1].__m_.__sig, *(CFDictionaryRef *)&v5[1].__m_.__opaque[8], 1, (const void ****)v119);
  if (SHIBYTE(v134) < 0)
    operator delete((void *)__dst);
  v94 = *(CFTypeRef ***)&v5[1].__m_.__opaque[32];
  v95 = *(CFTypeRef ***)&v5[1].__m_.__opaque[40];
  while (v94 != v95)
  {
    v96 = *v94;
    v97 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)&v5[2].__m_.__opaque[8] + 8) + 72))(*(_QWORD *)(*(_QWORD *)&v5[2].__m_.__opaque[8] + 8), *(_QWORD *)&v5[1].__m_.__opaque[16] + 88);
    v98 = v5[2].__m_.__sig;
    v99 = *(unsigned __int8 *)(*(_QWORD *)&v5[1].__m_.__opaque[16] + 356);
    v100 = operator new();
    sub_19C340530(v100, *v96, v97, *(_QWORD *)(v98 + 328), v99 != 0);
    v101 = (*v94)[16];
    (*v94)[16] = (CFTypeRef)v100;
    if (v101)
    {
      v102 = (const void *)v101[2];
      if (v102)
        CFRelease(v102);
      v103 = (const void *)v101[1];
      if (v103)
        CFRelease(v103);
      MEMORY[0x1A1AD355C](v101, 0x1060C40950A32C8);
    }
    v94 += 2;
  }
  if (v124)
  {
    for (k = v125; k != v124; k -= 8)
    {
      v106 = (const void *)*((_QWORD *)k - 1);
      v105 = v106;
      if (v106)
        CFRelease(v105);
    }
    operator delete(v124);
  }
LABEL_159:
  std::recursive_mutex::unlock(v5);
}

void sub_19C3BDB04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::recursive_mutex *a13, uint64_t a14, const void *a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,uint64_t a50,char a51,uint64_t a52,char a53,uint64_t a54,char a55)
{
  uint64_t v55;
  uint64_t v56;

  *(_QWORD *)(v56 - 120) = v55;
  operator delete(*(void **)(v56 - 160));
  if (a43 < 0)
  {
    operator delete(__p);
    if (a49 < 0)
      goto LABEL_6;
  }
  else if (a49 < 0)
  {
LABEL_6:
    operator delete(a44);
  }
  sub_19C2B43C8((uint64_t)&a51);
  sub_19C2B43C8((uint64_t)&a53);
  sub_19C2B43C8((uint64_t)&a55);
  if (*(char *)(v56 - 233) < 0)
  {
    operator delete(*(void **)(v56 - 256));
    if ((*(char *)(v56 - 209) & 0x80000000) == 0)
      goto LABEL_9;
  }
  else if ((*(char *)(v56 - 209) & 0x80000000) == 0)
  {
LABEL_9:
    if (*(char *)(v56 - 185) < 0)
      goto LABEL_10;
    goto LABEL_14;
  }
  operator delete(*(void **)(v56 - 232));
  if (*(char *)(v56 - 185) < 0)
  {
LABEL_10:
    operator delete(*(void **)(v56 - 208));
    if ((*(char *)(v56 - 161) & 0x80000000) == 0)
    {
LABEL_16:
      sub_19C307B68((void **)(v56 - 128));
      if (a30 < 0)
        operator delete(a25);
      if (a24 < 0)
        operator delete(a19);
      sub_19C31D0F8(&a34);
      sub_19C31D650(&a15);
      sub_19C31D0F8(&a16);
      std::recursive_mutex::unlock(a13);
      _Unwind_Resume(a1);
    }
LABEL_15:
    operator delete(*(void **)(v56 - 184));
    goto LABEL_16;
  }
LABEL_14:
  if ((*(char *)(v56 - 161) & 0x80000000) == 0)
    goto LABEL_16;
  goto LABEL_15;
}

void sub_19C3BDFD8(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_19C2CDAC8(a1);
}

uint64_t sub_19C3BDFF4(std::recursive_mutex *a1, uint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  BOOL v8;
  char *v9;
  void *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *__p;
  char *v16;

  std::recursive_mutex::lock(a1);
  sub_19C3BE128(&__p, a1[2].__m_.__sig + 616);
  v4 = (char *)__p;
  v5 = v16;
  if (__p == v16)
  {
    v7 = 0;
    if (!__p)
      goto LABEL_21;
  }
  else
  {
    v6 = (char *)__p + 16;
    do
    {
      v7 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)v6 - 2) + 24))(*((_QWORD *)v6 - 2), a2, 0);
      if ((_DWORD)v7)
        v8 = 1;
      else
        v8 = v6 == v5;
      v6 += 16;
    }
    while (!v8);
    v4 = (char *)__p;
    if (!__p)
      goto LABEL_21;
  }
  v9 = v16;
  v10 = v4;
  if (v16 != v4)
  {
    do
    {
      v11 = (std::__shared_weak_count *)*((_QWORD *)v9 - 1);
      if (v11)
      {
        p_shared_owners = (unint64_t *)&v11->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      v9 -= 16;
    }
    while (v9 != v4);
    v10 = __p;
  }
  v16 = v4;
  operator delete(v10);
LABEL_21:
  std::recursive_mutex::unlock(a1);
  return v7;
}

void sub_19C3BE104(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::recursive_mutex *v10;

  std::recursive_mutex::unlock(v10);
  _Unwind_Resume(a1);
}

_QWORD *sub_19C3BE128(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v3 = *(_QWORD **)a2;
  v4 = *(_QWORD **)(a2 + 8);
  v5 = (uint64_t)v4 - *(_QWORD *)a2;
  if (v4 != *(_QWORD **)a2)
  {
    if (v5 < 0)
      sub_19C2A18E8();
    v6 = operator new((size_t)v4 - *(_QWORD *)a2);
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[2 * (v5 >> 4)];
    do
    {
      v7 = v3[1];
      *v6 = *v3;
      v6[1] = v7;
      if (v7)
      {
        v8 = (unint64_t *)(v7 + 8);
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
      }
      v3 += 2;
      v6 += 2;
    }
    while (v3 != v4);
    a1[1] = v6;
  }
  return a1;
}

void sub_19C3BE1CC(_Unwind_Exception *exception_object)
{
  void **v1;
  char *v3;
  char *v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v3 = (char *)*v1;
  if (*v1)
  {
    v4 = (char *)v1[1];
    v5 = *v1;
    if (v4 != v3)
    {
      do
      {
        v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
        if (v6)
        {
          p_shared_owners = (unint64_t *)&v6->__shared_owners_;
          do
            v8 = __ldaxr(p_shared_owners);
          while (__stlxr(v8 - 1, p_shared_owners));
          if (!v8)
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
        }
        v4 -= 16;
      }
      while (v4 != v3);
      v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C3BE248(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  std::recursive_mutex::lock((std::recursive_mutex *)a1);
  std::recursive_mutex::lock((std::recursive_mutex *)a1);
  v4 = *(_QWORD *)(a1 + 104);
  v5 = *(_QWORD *)(a1 + 112);
  while (1)
  {
    if (v4 == v5)
    {
      v8 = sub_19C3BDFF4((std::recursive_mutex *)a1, a2);
      std::recursive_mutex::unlock((std::recursive_mutex *)a1);
      if (!(_DWORD)v8)
        v8 = sub_19C3C1B9C(a2, 1);
      goto LABEL_11;
    }
    v6 = *(_QWORD **)(*(_QWORD *)v4 + 8);
    v7 = *(_QWORD **)(*(_QWORD *)v4 + 16);
    if (v6 != v7)
      break;
LABEL_2:
    v4 += 16;
  }
  while (1)
  {
    v8 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*v6 + 24))(*v6, a2, 0);
    if ((_DWORD)v8)
      break;
    if (++v6 == v7)
      goto LABEL_2;
  }
  std::recursive_mutex::unlock((std::recursive_mutex *)a1);
LABEL_11:
  std::recursive_mutex::unlock((std::recursive_mutex *)a1);
  return v8;
}

void sub_19C3BE324(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19C3BE34C(uint64_t a1, std::recursive_mutex *this, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  _QWORD *v14;
  void *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  void *__p;
  _QWORD *v20;

  std::recursive_mutex::lock(this);
  if (a3 > 0x1F3)
  {
    sub_19C3BE128(&__p, this[2].__m_.__sig + 616);
    v6 = __p;
    v7 = v20;
    if (__p == v20)
    {
      if (!__p)
      {
LABEL_31:
        *(_BYTE *)(a1 + 23) = 0;
        *(_BYTE *)a1 = 0;
        goto LABEL_34;
      }
    }
    else
    {
      do
      {
        (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v6 + 32))(*v6, a3);
        if (*(char *)(a1 + 23) < 0)
        {
          if (*(_QWORD *)(a1 + 8))
          {
LABEL_11:
            v8 = __p;
            if (__p)
            {
              v9 = v20;
              v10 = __p;
              if (v20 != __p)
              {
                do
                {
                  v11 = (std::__shared_weak_count *)*(v9 - 1);
                  if (v11)
                  {
                    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
                    do
                      v13 = __ldaxr(p_shared_owners);
                    while (__stlxr(v13 - 1, p_shared_owners));
                    if (!v13)
                    {
                      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
                      std::__shared_weak_count::__release_weak(v11);
                    }
                  }
                  v9 -= 2;
                }
                while (v9 != v8);
                v10 = __p;
              }
              v20 = v8;
              operator delete(v10);
            }
            goto LABEL_34;
          }
          operator delete(*(void **)a1);
        }
        else if (*(_BYTE *)(a1 + 23))
        {
          goto LABEL_11;
        }
        v6 += 2;
      }
      while (v6 != v7);
      v6 = __p;
      if (!__p)
        goto LABEL_31;
    }
    v14 = v20;
    v15 = v6;
    if (v20 != v6)
    {
      do
      {
        v16 = (std::__shared_weak_count *)*(v14 - 1);
        if (v16)
        {
          v17 = (unint64_t *)&v16->__shared_owners_;
          do
            v18 = __ldaxr(v17);
          while (__stlxr(v18 - 1, v17));
          if (!v18)
          {
            ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
            std::__shared_weak_count::__release_weak(v16);
          }
        }
        v14 -= 2;
      }
      while (v14 != v6);
      v15 = __p;
    }
    v20 = v6;
    operator delete(v15);
    goto LABEL_31;
  }
  sub_19C3B2A7C((_QWORD *)a1, a3);
LABEL_34:
  std::recursive_mutex::unlock(this);
}

void sub_19C3BE504(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::recursive_mutex *v10;

  std::recursive_mutex::unlock(v10);
  _Unwind_Resume(a1);
}

uint64_t sub_19C3BE52C(std::recursive_mutex *a1, uint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  BOOL v8;
  char *v9;
  void *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *__p;
  char *v16;

  std::recursive_mutex::lock(a1);
  sub_19C3BE128(&__p, a1[2].__m_.__sig + 616);
  v4 = (char *)__p;
  v5 = v16;
  if (__p == v16)
  {
    v7 = 0;
    if (!__p)
      goto LABEL_21;
  }
  else
  {
    v6 = (char *)__p + 16;
    do
    {
      v7 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)v6 - 2) + 208))(*((_QWORD *)v6 - 2), a2);
      if ((_DWORD)v7)
        v8 = 1;
      else
        v8 = v6 == v5;
      v6 += 16;
    }
    while (!v8);
    v4 = (char *)__p;
    if (!__p)
      goto LABEL_21;
  }
  v9 = v16;
  v10 = v4;
  if (v16 != v4)
  {
    do
    {
      v11 = (std::__shared_weak_count *)*((_QWORD *)v9 - 1);
      if (v11)
      {
        p_shared_owners = (unint64_t *)&v11->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      v9 -= 16;
    }
    while (v9 != v4);
    v10 = __p;
  }
  v16 = v4;
  operator delete(v10);
LABEL_21:
  std::recursive_mutex::unlock(a1);
  return v7;
}

void sub_19C3BE638(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::recursive_mutex *v10;

  std::recursive_mutex::unlock(v10);
  _Unwind_Resume(a1);
}

uint64_t sub_19C3BE65C(std::recursive_mutex *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  void *__p;
  _QWORD *v20;

  std::recursive_mutex::lock(a1);
  sub_19C3BE128(&__p, a1[2].__m_.__sig + 616);
  v4 = __p;
  v5 = v20;
  if (__p == v20)
  {
LABEL_5:
    if (v4)
    {
      v6 = v20;
      v7 = v4;
      if (v20 != v4)
      {
        do
        {
          v8 = (std::__shared_weak_count *)*(v6 - 1);
          if (v8)
          {
            p_shared_owners = (unint64_t *)&v8->__shared_owners_;
            do
              v10 = __ldaxr(p_shared_owners);
            while (__stlxr(v10 - 1, p_shared_owners));
            if (!v10)
            {
              ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
              std::__shared_weak_count::__release_weak(v8);
            }
          }
          v6 -= 2;
        }
        while (v6 != v4);
        v7 = __p;
      }
      v20 = v4;
      operator delete(v7);
    }
    v17 = 0;
  }
  else
  {
    while (!(*(unsigned int (**)(_QWORD, uint64_t))(*(_QWORD *)*v4 + 224))(*v4, a2))
    {
      v4 += 2;
      if (v4 == v5)
      {
        v4 = __p;
        goto LABEL_5;
      }
    }
    v11 = __p;
    if (__p)
    {
      v12 = v20;
      v13 = __p;
      if (v20 != __p)
      {
        do
        {
          v14 = (std::__shared_weak_count *)*(v12 - 1);
          if (v14)
          {
            v15 = (unint64_t *)&v14->__shared_owners_;
            do
              v16 = __ldaxr(v15);
            while (__stlxr(v16 - 1, v15));
            if (!v16)
            {
              ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
              std::__shared_weak_count::__release_weak(v14);
            }
          }
          v12 -= 2;
        }
        while (v12 != v11);
        v13 = __p;
      }
      v20 = v11;
      operator delete(v13);
    }
    v17 = 1;
  }
  std::recursive_mutex::unlock(a1);
  return v17;
}

void sub_19C3BE7C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::recursive_mutex *v10;

  std::recursive_mutex::unlock(v10);
  _Unwind_Resume(a1);
}

void sub_19C3BE7EC(uint64_t a1, int a2, double *a3, uint64_t a4, _DWORD *a5, unint64_t a6)
{
  uint64_t v12;
  _DWORD *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  unint64_t v19;
  _QWORD *v20;
  void *v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  void *v25[2];
  unsigned __int8 v26;
  void *__p[2];
  char v28;

  std::recursive_mutex::lock((std::recursive_mutex *)a1);
  if (!a6)
  {
    a5 = 0;
    if (a2 == 2)
      goto LABEL_35;
LABEL_9:
    if (!*(_BYTE *)(*(_QWORD *)(a1 + 88) + 192))
      goto LABEL_35;
    v16 = *(_QWORD *)(a1 + 144);
    if (v16)
    {
      v28 = 10;
      strcpy((char *)__p, "selfSender");
      sub_19C431B2C(v16, a2, a3, a4, a5, a6, __p);
      if (v28 < 0)
        operator delete(__p[0]);
    }
    sub_19C3BE128(__p, *(_QWORD *)(a1 + 128) + 616);
    v17 = __p[0];
    v18 = __p[1];
    if (__p[0] == __p[1])
    {
      if (!__p[0])
        goto LABEL_35;
    }
    else
    {
      while (1)
      {
        (*(void (**)(void **__return_ptr, _QWORD, uint64_t))(*(_QWORD *)*v17 + 32))(v25, *v17, a4);
        v19 = v26;
        if ((v26 & 0x80u) != 0)
          v19 = (unint64_t)v25[1];
        if (v19)
          break;
        if ((char)v26 < 0)
          operator delete(v25[0]);
        v17 += 2;
        if (v17 == v18)
          goto LABEL_24;
      }
      (*(void (**)(_QWORD, void **, uint64_t, float))(*(_QWORD *)*v17 + 184))(*v17, v25, a4, 1.0);
      if ((char)v26 < 0)
        operator delete(v25[0]);
LABEL_24:
      v17 = __p[0];
      if (!__p[0])
        goto LABEL_35;
    }
    v20 = __p[1];
    v21 = v17;
    if (__p[1] != v17)
    {
      do
      {
        v22 = (std::__shared_weak_count *)*(v20 - 1);
        if (v22)
        {
          p_shared_owners = (unint64_t *)&v22->__shared_owners_;
          do
            v24 = __ldaxr(p_shared_owners);
          while (__stlxr(v24 - 1, p_shared_owners));
          if (!v24)
          {
            ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
            std::__shared_weak_count::__release_weak(v22);
          }
        }
        v20 -= 2;
      }
      while (v20 != v17);
      v21 = __p[0];
    }
    __p[1] = v17;
    operator delete(v21);
    goto LABEL_35;
  }
  v12 = a6;
  v13 = &a5[a6];
  while (v12 * 4)
  {
    v14 = a5[--v12];
    if (v14 == 1)
    {
      v15 = (uint64_t)(4 * a6 - (v12 * 4 + 4)) >> 2;
      a6 = v15 + 1;
      a5 = &v13[~v15];
      break;
    }
  }
  if (a2 != 2)
    goto LABEL_9;
LABEL_35:
  std::recursive_mutex::unlock((std::recursive_mutex *)a1);
}

void sub_19C3BEA08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::recursive_mutex *v20;

  if (a14 < 0)
    operator delete(__p);
  sub_19C2F5AA8(&a15);
  std::recursive_mutex::unlock(v20);
  _Unwind_Resume(a1);
}

uint64_t sub_19C3BEA5C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, int a6, uint64_t a7, unint64_t a8)
{
  uint64_t v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  double v23;
  double v24;
  double v25;
  _QWORD *v26;
  uint64_t v27;
  float v28;
  uint64_t v29;
  std::mutex *v30;
  unint64_t v31;
  unint64_t v32;
  std::mutex *v33;
  float v34;
  float v35;
  float v36;
  double v38;

  std::recursive_mutex::lock((std::recursive_mutex *)a1);
  if (a4)
  {
    v16 = 4 * a4;
    v17 = a3 + 4 * a4;
    while (v16)
    {
      v18 = *(_DWORD *)(a3 + v16 - 4);
      v16 -= 4;
      if (v18 == 1)
      {
        v19 = (uint64_t)(4 * a4 - (v16 + 4)) >> 2;
        a4 = v19 + 1;
        a3 = v17 + 4 * ~v19;
        break;
      }
    }
    if ((_DWORD)a2 != 1)
      goto LABEL_11;
  }
  else
  {
    a3 = 0;
    if ((_DWORD)a2 != 1)
      goto LABEL_11;
  }
  if (!a4)
  {
    v20 = 1;
    goto LABEL_23;
  }
LABEL_11:
  v38 = 0.0;
  v21 = *(_QWORD *)(a1 + 144);
  if (v21)
  {
    v20 = sub_19C431F64(v21, a2, a3, a4, &v38, a7, a6);
    v22 = v38;
    if (v38 > 0.0)
    {
      *(_BYTE *)(a5 + 24) = 1;
      v23 = __exp10(*(double *)(a5 + 64));
      v24 = __exp10(*(double *)a5);
      v25 = *(double *)(a5 + 72);
      v26 = *(_QWORD **)(a1 + 144);
      v27 = 248;
      if (a4 < 2)
        v27 = 252;
      v28 = *(float *)(v26[3] + v27);
      v29 = v26[7];
      if (v29)
      {
        v30 = (std::mutex *)(v29 + 96);
        std::mutex::lock((std::mutex *)(v29 + 96));
        v29 = *(_QWORD *)(v29 + 40);
        std::mutex::unlock(v30);
      }
      v31 = (*(uint64_t (**)(_QWORD *))(*v26 + 32))(v26);
      if (v29 + a8 < v31)
        v28 = (float)((float)((float)(v29 + a8) / (float)v31) * (float)((float)(v29 + a8) / (float)v31)) * v28;
      v32 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 56);
      if (v32)
      {
        v33 = (std::mutex *)(v32 + 96);
        std::mutex::lock((std::mutex *)(v32 + 96));
        v32 = *(_QWORD *)(v32 + 40);
        std::mutex::unlock(v33);
      }
      v34 = v23;
      v35 = v24 - v25 * v34;
      v36 = ((float)(v34 * (float)a8) + v22 * (double)v32) / (double)(v32 + a8);
      *(double *)(a5 + 64) = log10f(v36);
      *(double *)(a5 + 72) = v28;
      *(double *)a5 = log10f(v35 + (float)(v28 * v36));
    }
  }
  else
  {
    v20 = 0;
  }
LABEL_23:
  std::recursive_mutex::unlock((std::recursive_mutex *)a1);
  return v20;
}

void sub_19C3BEC8C(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19C3BECA8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D310E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_19C3BECB8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D310E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AD355CLL);
}

void sub_19C3BECE8(uint64_t a1)
{
  const void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  const void *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  const void *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;

  v2 = *(const void **)(a1 + 200);
  if (v2)
    CFRelease(v2);
  *(_QWORD *)(a1 + 200) = 0;
  v3 = *(_QWORD *)(a1 + 176);
  if (v3)
  {
    v4 = *(_QWORD *)(a1 + 184);
    v5 = *(void **)(a1 + 176);
    if (v4 != v3)
    {
      do
      {
        v6 = *(const void **)(v4 - 8);
        if (v6)
          CFRelease(v6);
        *(_QWORD *)(v4 - 8) = 0;
        v4 -= 16;
      }
      while (v4 != v3);
      v5 = *(void **)(a1 + 176);
    }
    *(_QWORD *)(a1 + 184) = v3;
    operator delete(v5);
  }
  v7 = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 168) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *(std::__shared_weak_count **)(a1 + 160);
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = *(_QWORD *)(a1 + 128);
  if (v11)
  {
    v12 = *(_QWORD *)(a1 + 136);
    v13 = *(void **)(a1 + 128);
    if (v12 != v11)
    {
      do
      {
        v14 = *(std::__shared_weak_count **)(v12 - 8);
        if (v14)
        {
          v15 = (unint64_t *)&v14->__shared_owners_;
          do
            v16 = __ldaxr(v15);
          while (__stlxr(v16 - 1, v15));
          if (!v16)
          {
            ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
            std::__shared_weak_count::__release_weak(v14);
          }
        }
        v12 -= 16;
      }
      while (v12 != v11);
      v13 = *(void **)(a1 + 128);
    }
    *(_QWORD *)(a1 + 136) = v11;
    operator delete(v13);
  }
  v17 = *(std::__shared_weak_count **)(a1 + 120);
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
      v20 = *(const void **)(a1 + 104);
      if (!v20)
        goto LABEL_35;
      goto LABEL_34;
    }
  }
  v20 = *(const void **)(a1 + 104);
  if (v20)
LABEL_34:
    CFRelease(v20);
LABEL_35:
  *(_QWORD *)(a1 + 104) = 0;
  v21 = *(std::__shared_weak_count **)(a1 + 96);
  if (v21)
  {
    v22 = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  std::recursive_mutex::~recursive_mutex((std::recursive_mutex *)(a1 + 24));
}

_QWORD *sub_19C3BEEC8(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;

  *a1 = &off_1E3D36FF8;
  v2 = (const void *)a1[2];
  if (v2)
    CFRelease(v2);
  v3 = (const void *)a1[4];
  if (v3)
    CFRelease(v3);
  v4 = (const void *)a1[3];
  if (v4)
    CFRelease(v4);
  return a1;
}

void sub_19C3BEF1C(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;

  *a1 = &off_1E3D36FF8;
  v2 = (const void *)a1[2];
  if (v2)
    CFRelease(v2);
  v3 = (const void *)a1[4];
  if (v3)
    CFRelease(v3);
  v4 = (const void *)a1[3];
  if (v4)
    CFRelease(v4);
  JUMPOUT(0x1A1AD355CLL);
}

BOOL sub_19C3BEF80(uint64_t a1)
{
  const __CFString *v2;
  CFIndex Length;
  CFIndex v4;
  char *v5;
  unint64_t v6;
  size_t v7;
  __CFBinaryHeap *v8;
  __CFBinaryHeap *v9;
  __CFBinaryHeap *v10;
  uint64_t v11;
  const void *Minimum;
  uint64_t v13;
  __CFBinaryHeap *v14;
  __CFBinaryHeap *v15;
  CFBinaryHeapRef v16;
  __CFBinaryHeap *v17;
  const void *v18;
  CFBinaryHeapCallBacks callBacks;

  if (*(_BYTE *)(a1 + 40))
  {
    if (CFBinaryHeapGetCount(*(CFBinaryHeapRef *)(a1 + 32)) >= 1)
      CFBinaryHeapRemoveMinimumValue(*(CFBinaryHeapRef *)(a1 + 32));
  }
  else
  {
    v2 = *(const __CFString **)(a1 + 16);
    Length = CFStringGetLength(v2);
    v4 = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u) + 1;
    v5 = (char *)operator new[]();
    CFStringGetCString(v2, v5, v4, 0x8000100u);
    v6 = *(_QWORD *)(a1 + 8);
    v7 = strlen(v5);
    if ((_DWORD)v7)
    {
      v9 = *(__CFBinaryHeap **)(a1 + 24);
      v8 = *(__CFBinaryHeap **)(a1 + 32);
      callBacks.retain = (const void *(__cdecl *)(CFAllocatorRef, const void *))sub_19C403B74;
      callBacks.release = (void (__cdecl *)(CFAllocatorRef, const void *))sub_19C403B8C;
      callBacks.compare = (CFComparisonResult (__cdecl *)(const void *, const void *, void *))sub_19C403C34;
      v10 = CFBinaryHeapCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, &callBacks, 0);
      if (v10)
      {
        v11 = *(_QWORD *)(v6 + 2084);
        if (v11)
          sub_19C403CBC(v6, (*(_DWORD *)(v11 + 4) & 0xFFFFFFFC) + v11, (unsigned __int8 *)v5, v7, 0, v9, v10);
        else
          sub_19C403F40(v6, v6, (unsigned __int8 *)v5, v7, 0, v9, v10);
        while (CFBinaryHeapGetCount(v10))
        {
          Minimum = CFBinaryHeapGetMinimum(v10);
          CFBinaryHeapAddValue(v8, Minimum);
          CFBinaryHeapRemoveMinimumValue(v10);
        }
        CFRelease(v10);
      }
    }
    *(_BYTE *)(a1 + 40) = 1;
    MEMORY[0x1A1AD3538](v5, 0x1000C8077774924);
  }
  if (!CFBinaryHeapGetCount(*(CFBinaryHeapRef *)(a1 + 32)))
  {
    v13 = *(_QWORD *)(a1 + 8);
    v14 = *(__CFBinaryHeap **)(a1 + 24);
    v15 = *(__CFBinaryHeap **)(a1 + 32);
    callBacks.retain = (const void *(__cdecl *)(CFAllocatorRef, const void *))sub_19C403B74;
    callBacks.release = (void (__cdecl *)(CFAllocatorRef, const void *))sub_19C403B8C;
    callBacks.compare = (CFComparisonResult (__cdecl *)(const void *, const void *, void *))sub_19C403C34;
    v16 = CFBinaryHeapCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, &callBacks, 0);
    if (v16)
    {
      v17 = v16;
      while (CFBinaryHeapGetCount(v14) && CFBinaryHeapGetCount(v15) <= 9)
      {
        sub_19C40467C(v13, v14, v17);
        while (CFBinaryHeapGetCount(v17))
        {
          v18 = CFBinaryHeapGetMinimum(v17);
          CFBinaryHeapAddValue(v15, v18);
          CFBinaryHeapRemoveMinimumValue(v17);
        }
      }
      CFRelease(v17);
    }
  }
  return CFBinaryHeapGetCount(*(CFBinaryHeapRef *)(a1 + 32)) > 0;
}

void sub_19C3BF200(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD3538](v1, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

float *sub_19C3BF22C(uint64_t a1, double *a2, _DWORD *a3)
{
  float *result;
  double v7;

  result = (float *)CFBinaryHeapGetMinimum(*(CFBinaryHeapRef *)(a1 + 32));
  if (a2)
  {
    if (result)
      v7 = *result;
    else
      v7 = 0.0;
    *a2 = v7;
  }
  if (a3)
    *a3 = *(_DWORD *)(a1 + 44);
  if (result)
    return (float *)*((unsigned int *)result + 2);
  return result;
}

_QWORD *sub_19C3BF290(_QWORD *a1)
{
  uint64_t v2;
  int v3;
  void *v4;
  void *v6;

  *a1 = &off_1E3D35B60;
  a1[1] = &unk_1E3D35BD0;
  v2 = a1[2];
  if (v2 && (v3 = *(_DWORD *)(v2 + 2080) - 1, (*(_DWORD *)(v2 + 2080) = v3) == 0))
  {
    v6 = *(void **)(v2 + 2084);
    if (v6)
    {
      if (*(_DWORD *)(v2 + 2096))
        munmap(v6, *(_QWORD *)(v2 + 2072));
    }
    else
    {
      sub_19C400F88(v2);
    }
    free((void *)v2);
    v4 = (void *)a1[3];
    if (v4)
      goto LABEL_4;
  }
  else
  {
    v4 = (void *)a1[3];
    if (v4)
LABEL_4:
      munmap(v4, a1[4]);
  }
  a1[4] = 0;
  return a1;
}

void sub_19C3BF330(_QWORD *a1)
{
  uint64_t v2;
  int v3;
  void *v4;
  void *v5;

  *a1 = &off_1E3D35B60;
  a1[1] = &unk_1E3D35BD0;
  v2 = a1[2];
  if (v2 && (v3 = *(_DWORD *)(v2 + 2080) - 1, (*(_DWORD *)(v2 + 2080) = v3) == 0))
  {
    v5 = *(void **)(v2 + 2084);
    if (v5)
    {
      if (*(_DWORD *)(v2 + 2096))
        munmap(v5, *(_QWORD *)(v2 + 2072));
    }
    else
    {
      sub_19C400F88(v2);
    }
    free((void *)v2);
    v4 = (void *)a1[3];
    if (v4)
      goto LABEL_4;
  }
  else
  {
    v4 = (void *)a1[3];
    if (v4)
LABEL_4:
      munmap(v4, a1[4]);
  }
  a1[4] = 0;
  JUMPOUT(0x1A1AD355CLL);
}

void sub_19C3BF3E0(uint64_t a1, void *aBlock)
{
  uint64_t v3;
  void *aBlocka;
  _QWORD v5[4];

  aBlocka = _Block_copy(aBlock);
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v5[0] = 0xFFFFFFFF00000003;
  v5[1] = 0;
  v5[2] = &aBlocka;
  v5[3] = sub_19C3BFCE8;
  sub_19C4029D0(v3, 0, 0, 0, (uint64_t)v5);
  _Block_release(aBlocka);
}

void sub_19C3BF460(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock)
{
  _Block_release(aBlock);
  _Unwind_Resume(a1);
}

uint64_t sub_19C3BF478(uint64_t a1, int __fd)
{
  write(__fd, *(const void **)(a1 + 24), *(_QWORD *)(a1 + 32));
  return 1;
}

uint64_t sub_19C3BF49C(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
    return *(unsigned int *)(v1 + 2064);
  else
    return 0;
}

uint64_t sub_19C3BF4B4(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t sub_19C3BF4BC(uint64_t a1, const __CFString *a2, double *a3)
{
  uint64_t v4;
  uint64_t v5;
  const void *p_p;
  uint64_t v7;
  void *__p;
  unsigned int v10;
  unsigned __int8 v11;
  _OWORD v12[2];

  v4 = *(_QWORD *)(a1 + 16);
  sub_19C29CEF8(a2, &__p);
  if ((v11 & 0x80u) == 0)
    v5 = v11;
  else
    v5 = v10;
  if ((_DWORD)v5)
  {
    if ((v11 & 0x80u) == 0)
      p_p = &__p;
    else
      p_p = __p;
    v12[0] = xmmword_19C477EF0;
    v12[1] = unk_19C477F00;
    sub_19C4029D0(v4, p_p, v5, 1, (uint64_t)v12);
    v7 = DWORD1(v12[0]);
    if ((DWORD1(v12[0]) & 0x80000000) != 0)
    {
      v7 = 0;
      if (((char)v11 & 0x80000000) == 0)
        return v7;
      goto LABEL_14;
    }
    if (a3)
    {
      *a3 = *((float *)v12 + 2);
      if ((char)v11 < 0)
        goto LABEL_14;
      return v7;
    }
  }
  else
  {
    v7 = 0;
  }
  if ((char)v11 < 0)
LABEL_14:
    operator delete(__p);
  return v7;
}

void sub_19C3BF58C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C3BF5A8(uint64_t a1, _BYTE *a2, double *a3)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  _OWORD v8[2];

  v4 = a2[23];
  if (v4 >= 0)
    v5 = a2[23];
  else
    v5 = *((unsigned int *)a2 + 2);
  if (!(_DWORD)v5)
    return 0;
  v6 = *(_QWORD *)(a1 + 16);
  if (v4 < 0)
    a2 = *(_BYTE **)a2;
  v8[0] = xmmword_19C477EF0;
  v8[1] = unk_19C477F00;
  sub_19C4029D0(v6, a2, v5, 1, (uint64_t)v8);
  result = DWORD1(v8[0]);
  if ((DWORD1(v8[0]) & 0x80000000) != 0)
    return 0;
  if (a3)
    *a3 = *((float *)v8 + 2);
  return result;
}

size_t sub_19C3BF630@<X0>(size_t result@<X0>, unsigned int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  BOOL v7;
  unsigned int v8;
  const char *v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v4 = *(_QWORD *)(result + 48);
  if (!v4
    || (v5 = *(_QWORD *)(result + 56)) == 0
    || (v6 = *(_DWORD *)(result + 40), v7 = a2 >= v6, v8 = a2 - v6, !v7)
    || *(_DWORD *)(result + 44) < a2)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    return result;
  }
  v9 = (const char *)(v5 + *(unsigned int *)(v4 + 4 * v8));
  result = strlen(v9);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    sub_19C2A1A54();
  v10 = result;
  if (result >= 0x17)
  {
    v11 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v11 = result | 7;
    v12 = v11 + 1;
    v13 = operator new(v11 + 1);
    a3[1] = v10;
    a3[2] = v12 | 0x8000000000000000;
    *a3 = v13;
    a3 = v13;
  }
  else
  {
    *((_BYTE *)a3 + 23) = result;
    if (!result)
      goto LABEL_15;
  }
  result = (size_t)memmove(a3, v9, v10);
LABEL_15:
  *((_BYTE *)a3 + v10) = 0;
  return result;
}

CFBinaryHeapRef sub_19C3BF708@<X0>(uint64_t a1@<X0>, const __CFString *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  const __CFAllocator *v8;
  CFBinaryHeapRef result;
  CFBinaryHeapCallBacks callBacks;

  v6 = operator new();
  *(_QWORD *)v6 = &off_1E3D36FF8;
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)(v6 + 8) = v7;
  *(_QWORD *)(v6 + 24) = 0;
  *(_QWORD *)(v6 + 32) = 0;
  *(_BYTE *)(v6 + 40) = 0;
  *(_DWORD *)(v6 + 44) = 1;
  *(_QWORD *)(v6 + 16) = CFStringCreateCopy(0, a2);
  callBacks.retain = (const void *(__cdecl *)(CFAllocatorRef, const void *))sub_19C403AD8;
  callBacks.release = (void (__cdecl *)(CFAllocatorRef, const void *))sub_19C403AF0;
  callBacks.compare = (CFComparisonResult (__cdecl *)(const void *, const void *, void *))sub_19C403B10;
  v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  *(_QWORD *)(v6 + 24) = CFBinaryHeapCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, &callBacks, 0);
  callBacks.retain = (const void *(__cdecl *)(CFAllocatorRef, const void *))sub_19C403B74;
  callBacks.release = (void (__cdecl *)(CFAllocatorRef, const void *))sub_19C403B8C;
  callBacks.compare = (CFComparisonResult (__cdecl *)(const void *, const void *, void *))sub_19C403BAC;
  result = CFBinaryHeapCreate(v8, 0, &callBacks, 0);
  *(_QWORD *)(v6 + 32) = result;
  *a3 = v6;
  return result;
}

void sub_19C3BF820(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD355C](v1, 0x10E1C40AD94C641);
  _Unwind_Resume(a1);
}

void sub_19C3BF844()
{
  __assert_rtn("enumerateSortkeyEquivalentEntries", "LMLexiconTrie.cpp", 216, "false && \"enumerateSortkeyEquivalentEntries() is not supported in StaticLexiconTrie\"");
}

void sub_19C3BF86C()
{
  __assert_rtn("createLXCursorRoot", "LMLexiconTrie.cpp", 221, "false && \"not implemented\"");
}

void *sub_19C3BF894(_QWORD *a1)
{
  uint64_t v2;
  int v3;
  void *result;
  void *v5;

  *(a1 - 1) = &off_1E3D35B60;
  *a1 = &unk_1E3D35BD0;
  v2 = a1[1];
  if (v2 && (v3 = *(_DWORD *)(v2 + 2080) - 1, (*(_DWORD *)(v2 + 2080) = v3) == 0))
  {
    v5 = *(void **)(v2 + 2084);
    if (v5)
    {
      if (*(_DWORD *)(v2 + 2096))
        munmap(v5, *(_QWORD *)(v2 + 2072));
    }
    else
    {
      sub_19C400F88(v2);
    }
    free((void *)v2);
    result = (void *)a1[2];
    if (result)
      goto LABEL_4;
  }
  else
  {
    result = (void *)a1[2];
    if (result)
LABEL_4:
      result = (void *)munmap(result, a1[3]);
  }
  a1[3] = 0;
  return result;
}

void sub_19C3BF934(_QWORD *a1)
{
  uint64_t v2;
  int v3;
  void *v4;
  void *v5;

  *(a1 - 1) = &off_1E3D35B60;
  *a1 = &unk_1E3D35BD0;
  v2 = a1[1];
  if (v2 && (v3 = *(_DWORD *)(v2 + 2080) - 1, (*(_DWORD *)(v2 + 2080) = v3) == 0))
  {
    v5 = *(void **)(v2 + 2084);
    if (v5)
    {
      if (*(_DWORD *)(v2 + 2096))
        munmap(v5, *(_QWORD *)(v2 + 2072));
    }
    else
    {
      sub_19C400F88(v2);
    }
    free((void *)v2);
    v4 = (void *)a1[2];
    if (v4)
      goto LABEL_4;
  }
  else
  {
    v4 = (void *)a1[2];
    if (v4)
LABEL_4:
      munmap(v4, a1[3]);
  }
  a1[3] = 0;
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C3BF9F4(uint64_t a1, const __CFString *a2, double *a3)
{
  return sub_19C3BF4BC(a1 - 8, a2, a3);
}

uint64_t sub_19C3BF9FC(uint64_t a1, _BYTE *a2, double *a3)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  _OWORD v8[2];

  v4 = a2[23];
  if (v4 >= 0)
    v5 = a2[23];
  else
    v5 = *((unsigned int *)a2 + 2);
  if (!(_DWORD)v5)
    return 0;
  v6 = *(_QWORD *)(a1 + 8);
  if (v4 < 0)
    a2 = *(_BYTE **)a2;
  v8[0] = xmmword_19C477EF0;
  v8[1] = unk_19C477F00;
  sub_19C4029D0(v6, a2, v5, 1, (uint64_t)v8);
  result = DWORD1(v8[0]);
  if ((DWORD1(v8[0]) & 0x80000000) != 0)
    return 0;
  if (a3)
    *a3 = *((float *)v8 + 2);
  return result;
}

size_t sub_19C3BFA84@<X0>(size_t result@<X0>, unsigned int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  BOOL v7;
  unsigned int v8;
  const char *v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v4 = *(_QWORD *)(result + 40);
  if (!v4
    || (v5 = *(_QWORD *)(result + 48)) == 0
    || (v6 = *(_DWORD *)(result + 32), v7 = a2 >= v6, v8 = a2 - v6, !v7)
    || *(_DWORD *)(result + 36) < a2)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    return result;
  }
  v9 = (const char *)(v5 + *(unsigned int *)(v4 + 4 * v8));
  result = strlen(v9);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    sub_19C2A1A54();
  v10 = result;
  if (result >= 0x17)
  {
    v11 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v11 = result | 7;
    v12 = v11 + 1;
    v13 = operator new(v11 + 1);
    a3[1] = v10;
    a3[2] = v12 | 0x8000000000000000;
    *a3 = v13;
    a3 = v13;
  }
  else
  {
    *((_BYTE *)a3 + 23) = result;
    if (!result)
      goto LABEL_15;
  }
  result = (size_t)memmove(a3, v9, v10);
LABEL_15:
  *((_BYTE *)a3 + v10) = 0;
  return result;
}

CFBinaryHeapRef sub_19C3BFB5C@<X0>(uint64_t a1@<X0>, const __CFString *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  const __CFAllocator *v8;
  CFBinaryHeapRef result;
  CFBinaryHeapCallBacks callBacks;

  v6 = operator new();
  *(_QWORD *)v6 = &off_1E3D36FF8;
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 - 8) + 40))(a1 - 8);
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)(v6 + 8) = v7;
  *(_QWORD *)(v6 + 24) = 0;
  *(_QWORD *)(v6 + 32) = 0;
  *(_BYTE *)(v6 + 40) = 0;
  *(_DWORD *)(v6 + 44) = 1;
  *(_QWORD *)(v6 + 16) = CFStringCreateCopy(0, a2);
  callBacks.retain = (const void *(__cdecl *)(CFAllocatorRef, const void *))sub_19C403AD8;
  callBacks.release = (void (__cdecl *)(CFAllocatorRef, const void *))sub_19C403AF0;
  callBacks.compare = (CFComparisonResult (__cdecl *)(const void *, const void *, void *))sub_19C403B10;
  v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  *(_QWORD *)(v6 + 24) = CFBinaryHeapCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, &callBacks, 0);
  callBacks.retain = (const void *(__cdecl *)(CFAllocatorRef, const void *))sub_19C403B74;
  callBacks.release = (void (__cdecl *)(CFAllocatorRef, const void *))sub_19C403B8C;
  callBacks.compare = (CFComparisonResult (__cdecl *)(const void *, const void *, void *))sub_19C403BAC;
  result = CFBinaryHeapCreate(v8, 0, &callBacks, 0);
  *(_QWORD *)(v6 + 32) = result;
  *a3 = v6;
  return result;
}

void sub_19C3BFC74(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD355C](v1, 0x10E1C40AD94C641);
  _Unwind_Resume(a1);
}

void sub_19C3BFC98()
{
  __assert_rtn("enumerateSortkeyEquivalentEntries", "LMLexiconTrie.cpp", 216, "false && \"enumerateSortkeyEquivalentEntries() is not supported in StaticLexiconTrie\"");
}

void sub_19C3BFCC0()
{
  __assert_rtn("createLXCursorRoot", "LMLexiconTrie.cpp", 221, "false && \"not implemented\"");
}

uint64_t sub_19C3BFCE8(uint64_t a1, float *a2, __n128 a3)
{
  if (a2)
    a3.n128_f64[0] = *a2;
  else
    a3.n128_u64[0] = 0;
  return (*(uint64_t (**)(__n128))(*(_QWORD *)a1 + 16))(a3);
}

uint64_t sub_19C3BFD10(uint64_t a1)
{
  uint64_t v2;
  int v3;
  void *v4;
  void *v5;

  *(_QWORD *)a1 = &off_1E3D35F38;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    v3 = *(_DWORD *)(v2 + 2080) - 1;
    *(_DWORD *)(v2 + 2080) = v3;
    if (!v3)
    {
      v4 = *(void **)(v2 + 2084);
      if (v4)
      {
        if (*(_DWORD *)(v2 + 2096))
          munmap(v4, *(_QWORD *)(v2 + 2072));
      }
      else
      {
        sub_19C400F88(v2);
      }
      free((void *)v2);
    }
  }
  sub_19C33275C(*(_QWORD **)(a1 + 80));
  v5 = *(void **)(a1 + 40);
  if (v5)
  {
    *(_QWORD *)(a1 + 48) = v5;
    operator delete(v5);
  }
  sub_19C33275C(*(_QWORD **)(a1 + 24));
  return a1;
}

void sub_19C3BFDA8(uint64_t a1)
{
  uint64_t v2;
  int v3;
  void *v4;
  void *v5;

  *(_QWORD *)a1 = &off_1E3D35F38;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    v3 = *(_DWORD *)(v2 + 2080) - 1;
    *(_DWORD *)(v2 + 2080) = v3;
    if (!v3)
    {
      v4 = *(void **)(v2 + 2084);
      if (v4)
      {
        if (*(_DWORD *)(v2 + 2096))
          munmap(v4, *(_QWORD *)(v2 + 2072));
      }
      else
      {
        sub_19C400F88(v2);
      }
      free((void *)v2);
    }
  }
  sub_19C33275C(*(_QWORD **)(a1 + 80));
  v5 = *(void **)(a1 + 40);
  if (v5)
  {
    *(_QWORD *)(a1 + 48) = v5;
    operator delete(v5);
  }
  sub_19C33275C(*(_QWORD **)(a1 + 24));
  JUMPOUT(0x1A1AD355CLL);
}

void sub_19C3BFE50(uint64_t a1, void *aBlock)
{
  uint64_t v3;
  void *aBlocka;
  _QWORD v5[4];

  aBlocka = _Block_copy(aBlock);
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v5[0] = 0xFFFFFFFF00000003;
  v5[1] = 0;
  v5[2] = &aBlocka;
  v5[3] = sub_19C3BFCE8;
  sub_19C4029D0(v3, 0, 0, 0, (uint64_t)v5);
  _Block_release(aBlocka);
}

void sub_19C3BFED0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock)
{
  _Block_release(aBlock);
  _Unwind_Resume(a1);
}

uint64_t sub_19C3BFEE8(uint64_t a1, uint64_t __fd)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  BOOL v10;
  int *v11;
  char *v12;
  _QWORD *v13;
  _QWORD *v14;
  __int128 v15;
  int *v16;
  int *v17;
  unsigned int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _BYTE *v27;
  unint64_t v28;
  unint64_t v29;
  int *v30;
  uint64_t v31;
  unint64_t v32;
  int *v33;
  uint64_t v34;
  _OWORD *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  _OWORD *v39;
  int *v40;
  uint64_t v41;
  __int128 v42;
  int v43;
  char *v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  off_t v50;
  size_t v51;
  _DWORD *v52;
  _DWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  _QWORD *v56;
  int v57;
  void *v58;
  int *v59;
  uint64_t v61;
  unsigned int __fda;
  int *__p;
  int *v64;
  uint64_t __buf;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  int v69[3];
  __int128 v70;
  void (*v71)(uint64_t, unsigned __int32 *, __n128);
  uint64_t v72;
  uint64_t v73;
  int v74;

  v2 = __fd;
  v3 = a1;
  __buf = 0x3BAFABAFALL;
  v66 = 0u;
  v67 = 0u;
  v68 = 0;
  v4 = *(_QWORD *)(a1 + 88);
  LODWORD(v67) = *(_DWORD *)(a1 + 48) - *(_DWORD *)(a1 + 40);
  HIDWORD(v67) = v4;
  v5 = *(_QWORD *)(a1 + 32);
  if (v5)
  {
    v6 = a1 + 24;
    v7 = *(_QWORD *)(a1 + 24);
    v8 = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 28);
    if (v7)
    {
      do
      {
        v9 = v7;
        v7 = *(_QWORD *)(v7 + 8);
      }
      while (v7);
    }
    else
    {
      do
      {
        v9 = *(_QWORD *)(v6 + 16);
        v10 = *(_QWORD *)v9 == v6;
        v6 = v9;
      }
      while (v10);
    }
    LODWORD(v5) = *(_DWORD *)(v9 + 28);
  }
  else
  {
    v8 = 0;
  }
  *((_QWORD *)&v66 + 1) = __PAIR64__(v5, v8);
  write(__fd, &__buf, 0x30uLL);
  v11 = (int *)operator new(4uLL);
  *v11 = 0;
  v12 = (char *)(v11 + 1);
  v64 = v11 + 1;
  __p = v11;
  v13 = *(_QWORD **)(v3 + 16);
  v14 = (_QWORD *)(v3 + 24);
  if (v13 != (_QWORD *)(v3 + 24))
  {
    v61 = v3;
    __fda = v2;
    v15 = 0uLL;
    v16 = v11 + 1;
    v17 = v11;
    while (1)
    {
      v18 = *((_DWORD *)v13 + 7) - v8;
      v19 = v16 - v17;
      v20 = v18 + 1;
      v21 = v20 - v19;
      if (v20 > v19)
        break;
LABEL_52:
      v17[v18] = *((_DWORD *)v13 + 8);
      v45 = (_QWORD *)v13[1];
      if (v45)
      {
        do
        {
          v46 = v45;
          v45 = (_QWORD *)*v45;
        }
        while (v45);
      }
      else
      {
        do
        {
          v46 = (_QWORD *)v13[2];
          v10 = *v46 == (_QWORD)v13;
          v13 = v46;
        }
        while (!v10);
      }
      v13 = v46;
      if (v46 == v14)
      {
        v12 = (char *)v64;
        v2 = __fda;
        v3 = v61;
        goto LABEL_60;
      }
    }
    v69[1] = 0;
    v22 = v64;
    if (v21 > (v12 - (char *)v64) >> 2)
    {
      v23 = v64 - v17;
      v24 = v23 + v21;
      if ((v23 + v21) >> 62)
        sub_19C2A18E8();
      if ((v12 - (char *)v17) >> 1 > v24)
        v24 = (v12 - (char *)v17) >> 1;
      if ((unint64_t)(v12 - (char *)v17) >= 0x7FFFFFFFFFFFFFFCLL)
        v25 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v25 = v24;
      if (v25)
      {
        if (v25 >> 62)
          sub_19C2A143C();
        v26 = v25;
        v27 = operator new(4 * v25);
        v15 = 0uLL;
        v25 = v26;
      }
      else
      {
        v27 = 0;
      }
      v11 = (int *)&v27[4 * v23];
      v16 = &v11[v21];
      v32 = (v21 - 1) & 0x3FFFFFFFFFFFFFFFLL;
      v33 = v11;
      if (v32 >= 0x13)
      {
        if (v11 >= &v69[2]
          || (v33 = (int *)&v27[4 * v23], &v27[4 * v21 + (char *)v64 - (char *)v17] <= (_BYTE *)&v69[1]))
        {
          v34 = (v32 + 1) & 0x7FFFFFFFFFFFFFF8;
          v35 = &v27[4 * v23];
          v36 = v34;
          do
          {
            *v35 = v15;
            v35[1] = v15;
            v35 += 2;
            v36 -= 8;
          }
          while (v36);
          if (v32 + 1 == v34)
            goto LABEL_40;
          v33 = &v11[v34];
        }
      }
      do
        *v33++ = v69[1];
      while (v33 != v16);
LABEL_40:
      if (v64 != v17)
      {
        v37 = (char *)v64 - (char *)v17 - 4;
        if (v37 < 0x2C)
          goto LABEL_93;
        if ((unint64_t)((char *)v17 - v27) < 0x20)
          goto LABEL_93;
        v38 = (v37 >> 2) + 1;
        v39 = &v27[4 * v23 - 16];
        v40 = v64 - 4;
        v41 = v38 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v42 = *(_OWORD *)v40;
          *(v39 - 1) = *((_OWORD *)v40 - 1);
          *v39 = v42;
          v39 -= 2;
          v40 -= 8;
          v41 -= 8;
        }
        while (v41);
        v11 -= v38 & 0x7FFFFFFFFFFFFFF8;
        v22 = &v64[-(v38 & 0x7FFFFFFFFFFFFFF8)];
        if (v38 != (v38 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_93:
          do
          {
            v43 = *--v22;
            *--v11 = v43;
          }
          while (v22 != v17);
        }
      }
      v12 = &v27[4 * v25];
      __p = v11;
      v64 = v16;
      if (v17)
      {
        v44 = &v27[4 * v25];
        operator delete(v17);
        v12 = v44;
        v15 = 0uLL;
        v11 = __p;
      }
      goto LABEL_51;
    }
    v16 = &v64[v21];
    v28 = (v21 - 1) & 0x3FFFFFFFFFFFFFFFLL;
    if (v28 >= 0xF && (v64 >= &v69[2] || v16 <= &v69[1]))
    {
      v29 = v28 + 1;
      v30 = v64;
      v31 = v29 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        *(_OWORD *)v30 = v15;
        *((_OWORD *)v30 + 1) = v15;
        v30 += 8;
        v31 -= 8;
      }
      while (v31);
      if (v29 == (v29 & 0x7FFFFFFFFFFFFFF8))
        goto LABEL_30;
      v22 = &v64[v29 & 0x7FFFFFFFFFFFFFF8];
    }
    do
      *v22++ = v69[1];
    while (v22 != v16);
LABEL_30:
    v64 += v21;
LABEL_51:
    v17 = v11;
    goto LABEL_52;
  }
  v17 = v11;
LABEL_60:
  write(v2, v17, v12 - (char *)v17);
  write(v2, *(const void **)(v3 + 40), *(_QWORD *)(v3 + 48) - *(_QWORD *)(v3 + 40));
  v47 = *(_QWORD **)(v3 + 72);
  if (v47 != (_QWORD *)(v3 + 80))
  {
    do
    {
      v69[1] = (*((unsigned __int8 *)v47 + 32) << *(_DWORD *)(v3 + 96)) + *((_DWORD *)v47 + 7);
      write(v2, &v69[1], 4uLL);
      v55 = (_QWORD *)v47[1];
      if (v55)
      {
        do
        {
          v56 = v55;
          v55 = (_QWORD *)*v55;
        }
        while (v55);
      }
      else
      {
        do
        {
          v56 = (_QWORD *)v47[2];
          v10 = *v56 == (_QWORD)v47;
          v47 = v56;
        }
        while (!v10);
      }
      v47 = v56;
    }
    while (v56 != (_QWORD *)(v3 + 80));
  }
  v48 = 0;
  if ((v2 & 0x80000000) == 0)
  {
    v49 = *(_QWORD *)(v3 + 8);
    if (!*(_QWORD *)(v49 + 2084))
    {
      v50 = (lseek(v2, 0, 2) + *MEMORY[0x1E0C85AD8] - 1) & -*MEMORY[0x1E0C85AD8];
      LODWORD(v70) = 0;
      *(_QWORD *)&v69[1] = 3394627454;
      *(_QWORD *)((char *)&v70 + 4) = *(_QWORD *)(v49 + 2064);
      v72 = 0;
      v73 = 0;
      v71 = 0;
      v74 = 0;
      HIDWORD(v70) = *(_DWORD *)(v49 + 2092);
      lseek(v2, v50, 0);
      write(v2, &v69[1], 0x34uLL);
      sub_19C4050AC(v49, v49, v50, v2);
      v69[0] = lseek(v2, 0, 1) - v50;
      pwrite(v2, v69, 4uLL, v50 + 4);
      sub_19C40570C((_DWORD *)v49, v50, v2, 0, 1, v69);
      pwrite(v2, v69, 4uLL, v50 + 8);
      lseek(v2, v69[0], 0);
      *(_DWORD *)(v49 + 2064) = 0;
      bzero((void *)v49, 0x810uLL);
      v51 = v69[0];
      v52 = mmap(0, v69[0], 1, 1, v2, v50);
      v53 = v52;
      if (v52 == (_DWORD *)-1)
        goto LABEL_87;
      if (v52 && *v52 == -900339842)
      {
        v54 = malloc_type_calloc(1uLL, 0x83CuLL, 0x105004056F6A631uLL);
        *(_QWORD *)((char *)v54 + 2084) = v53;
        v54[259] = v53[2];
        v54[258] = *(_QWORD *)(v53 + 3);
        *(_QWORD *)((char *)v54 + 2092) = v53[5];
        *((_DWORD *)v54 + 520) = 1;
      }
      else
      {
        v54 = 0;
      }
      *(_QWORD *)&v69[1] = 0xFFFFFFFF00000003;
      *(_QWORD *)&v70 = 0;
      *((_QWORD *)&v70 + 1) = v49;
      v71 = sub_19C40100C;
      sub_19C4029D0((uint64_t)v54, 0, 0, 0, (uint64_t)&v69[1]);
      if (v54)
      {
        v57 = *((_DWORD *)v54 + 520) - 1;
        *((_DWORD *)v54 + 520) = v57;
        if (!v57)
        {
          v58 = *(void **)((char *)v54 + 2084);
          if (v58)
          {
            if (*((_DWORD *)v54 + 524))
              munmap(v58, v54[259]);
          }
          else
          {
            sub_19C400F88((uint64_t)v54);
          }
          free(v54);
        }
      }
      munmap(v53, v51);
      DWORD1(v67) = v50;
      if (lseek(v2, 0, 0) < 0)
      {
LABEL_87:
        v48 = 0;
        v59 = __p;
        if (!__p)
          return v48;
        goto LABEL_85;
      }
      write(v2, &__buf, 0x30uLL);
      v48 = 1;
    }
  }
  v59 = __p;
  if (__p)
LABEL_85:
    operator delete(v59);
  return v48;
}

void sub_19C3C05E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C3C060C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 64);
}

uint64_t sub_19C3C0614(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t sub_19C3C061C(uint64_t a1)
{
  uint64_t v2;
  int v3;
  void *v4;

  v2 = *(_QWORD *)(a1 + 24);
  if (v2)
  {
    v3 = *(_DWORD *)(v2 + 2080) - 1;
    *(_DWORD *)(v2 + 2080) = v3;
    if (!v3)
    {
      v4 = *(void **)(v2 + 2084);
      if (v4)
      {
        if (*(_DWORD *)(v2 + 2096))
          munmap(v4, *(_QWORD *)(v2 + 2072));
      }
      else
      {
        sub_19C400F88(v2);
      }
      free((void *)v2);
    }
  }
  sub_19C33275C(*(_QWORD **)(a1 + 8));
  return a1;
}

void sub_19C3C0690(uint64_t **a1, unsigned int *a2, uint64_t a3, __n128 a4)
{
  uint64_t *v5;
  uint64_t **v6;
  unsigned int v7;
  uint64_t **v8;
  unsigned int v9;
  _DWORD *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  _QWORD v17[2];

  if (a3 == 1)
  {
    v6 = a1 + 1;
    v5 = a1[1];
    v7 = *a2;
    if (v5)
    {
      while (1)
      {
        while (1)
        {
          v8 = (uint64_t **)v5;
          v9 = *((_DWORD *)v5 + 7);
          if (v7 >= v9)
            break;
          v5 = (uint64_t *)*v5;
          v6 = v8;
          if (!*v8)
            goto LABEL_9;
        }
        if (v9 >= v7)
          break;
        v5 = (uint64_t *)v5[1];
        if (!v5)
        {
          v6 = v8 + 1;
          goto LABEL_9;
        }
      }
    }
    else
    {
      v8 = a1 + 1;
LABEL_9:
      v10 = operator new(0x20uLL);
      v10[7] = v7;
      *(_QWORD *)v10 = 0;
      *((_QWORD *)v10 + 1) = 0;
      *((_QWORD *)v10 + 2) = v8;
      *v6 = (uint64_t *)v10;
      v11 = (uint64_t *)**a1;
      if (v11)
      {
        *a1 = v11;
        v12 = *v6;
      }
      else
      {
        v12 = (uint64_t *)v10;
      }
      sub_19C2A2310(a1[1], v12);
      a1[2] = (uint64_t *)((char *)a1[2] + 1);
    }
  }
  else
  {
    v13 = (uint64_t)a1[3];
    if (!*(_QWORD *)(v13 + 2084))
    {
      v14 = (4 * a3);
      v17[0] = 0;
      v17[1] = 0;
      v16 = 0;
      if ((v14 - 1) <= 0x3FE)
      {
        v15 = 0;
        a4.n128_u32[0] = 1.0;
        sub_19C4010C0(v13, v13, (uint64_t)a2, v14, 0, 1, (float *)&v15, &v16, a4, v17);
        if (v16 == 2)
          ++*(_DWORD *)(v13 + 2064);
      }
    }
  }
}

void sub_19C3C07CC(uint64_t a1, CFTypeRef cf)
{
  const __CFArray *v4;
  CFIndex Count;
  CFIndex v6;
  CFArrayRef v7;
  CFIndex v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const __CFString *v12;
  CFTypeID TypeID;
  unsigned int v14;
  void **v15;
  void **p_p;
  std::string::size_type v17;
  unint64_t v18;
  const void *v19;
  const void *v20;
  const void *v21;
  const __CFString *v22;
  CFTypeID v23;
  std::string::size_type v24;
  void **v25;
  const std::string::value_type *v26;
  std::string::size_type v27;
  CFTypeRef v28;
  void *exception;
  void *__p;
  std::string::size_type v31;
  unsigned __int8 v32;
  CFTypeRef cfa;
  const void *v34;
  CFArrayRef theArray;

  if (!cf)
  {
    *(_BYTE *)(a1 + 23) = 0;
    *(_BYTE *)a1 = 0;
    return;
  }
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  CFRetain(cf);
  sub_19C31D164(&theArray, cf);
  v4 = theArray;
  if (theArray)
  {
    Count = CFArrayGetCount(theArray);
    v6 = Count;
    v7 = theArray;
    if (theArray)
    {
      v8 = CFArrayGetCount(theArray);
      if (!v6)
      {
LABEL_29:
        if (theArray)
          CFRelease(theArray);
        return;
      }
    }
    else
    {
      v8 = 0;
      if (!Count)
        goto LABEL_29;
    }
    if (v4 == v7 && !v8)
      goto LABEL_29;
    sub_19C31D210(&v34, v4, 0);
    v9 = v34;
    v10 = (const void *)MEMORY[0x1A1AD2A04](v34);
    v11 = v10;
    if (v10)
      CFRetain(v10);
    sub_19C297DB4(&cfa, v11);
    v12 = (const __CFString *)cfa;
    if (!cfa)
    {
LABEL_55:
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1A1AD3154](exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
    }
    TypeID = CFStringGetTypeID();
    if (TypeID == CFGetTypeID(v12))
    {
      sub_19C2E50A4(&__p, v12);
      v14 = v32;
      v15 = (void **)__p;
    }
    else
    {
      v15 = 0;
      v14 = 0;
      __p = 0;
      v32 = 0;
    }
    if ((v14 & 0x80u) == 0)
      p_p = &__p;
    else
      p_p = v15;
    if ((v14 & 0x80u) == 0)
      v17 = v14;
    else
      v17 = v31;
    std::string::append((std::string *)a1, (const std::string::value_type *)p_p, v17);
    if ((char)v32 < 0)
      operator delete(__p);
    if (cfa)
      CFRelease(cfa);
    if (v9)
      CFRelease(v9);
    if (v6 == 1)
      goto LABEL_29;
    v18 = 1;
    while (1)
    {
      if (v4 == v7 && v8 == v18)
        goto LABEL_29;
      sub_19C31D210(&v34, v4, v18);
      v19 = v34;
      v20 = (const void *)MEMORY[0x1A1AD2A04](v34);
      v21 = v20;
      if (v20)
        CFRetain(v20);
      sub_19C297DB4(&cfa, v21);
      std::string::append((std::string *)a1, ", ", 2uLL);
      v22 = (const __CFString *)cfa;
      if (!cfa)
        goto LABEL_55;
      v23 = CFStringGetTypeID();
      if (v23 == CFGetTypeID(v22))
      {
        sub_19C2E50A4(&__p, v22);
        v24 = v32;
        v25 = (void **)__p;
      }
      else
      {
        v25 = 0;
        v24 = 0;
        __p = 0;
        v32 = 0;
      }
      v26 = (const std::string::value_type *)((v24 & 0x80u) == 0 ? &__p : v25);
      v27 = (v24 & 0x80u) == 0 ? v24 : v31;
      std::string::append((std::string *)a1, v26, v27);
      if (((char)v32 & 0x80000000) == 0)
        break;
      operator delete(__p);
      v28 = cfa;
      if (cfa)
        goto LABEL_52;
LABEL_53:
      if (v19)
        CFRelease(v19);
      if (v6 == ++v18)
        goto LABEL_29;
    }
    v28 = cfa;
    if (!cfa)
      goto LABEL_53;
LABEL_52:
    CFRelease(v28);
    goto LABEL_53;
  }
}

void sub_19C3C0AB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, const void *a15, const void *a16, const void *a17)
{
  uint64_t v17;

  if (a14 < 0)
    operator delete(__p);
  sub_19C2E5670(&a15);
  sub_19C2E4838(&a16);
  sub_19C31D650(&a17);
  if (*(char *)(v17 + 23) < 0)
    operator delete(*(void **)v17);
  _Unwind_Resume(a1);
}

void **sub_19C3C0B60(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  const void *v5;
  const void *v6;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v6 = (const void *)*((_QWORD *)v3 - 1);
        v3 -= 8;
        v5 = v6;
        if (v6)
          CFRelease(v5);
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_19C3C0BCC(CFDictionaryRef theDict, uint64_t *a2, CFDictionaryRef ***a3, int a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  _BOOL4 v12;
  uint64_t v13;
  const __CFLocale *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  CFDictionaryRef **v27;
  CFDictionaryRef **v28;
  char *v29;
  uint64_t v30;
  uint64_t *v31;
  unint64_t v32;
  uint64_t *v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  uint64_t *v40;
  char *v41;
  _QWORD *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  char *v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  _BYTE *exception;
  char *v55;
  uint8_t buf[16];

  v9 = *a2;
  v10 = a2[1];
  if (*a2 == v10 && a4 != 0)
  {
    sub_19C4143E8(theDict, *(const __CFLocale **)a5, (uint64_t)a2, (uint64_t)a3);
    v9 = *a2;
    v10 = a2[1];
  }
  if (v9 != v10)
  {
    v12 = CFDictionaryContainsKey(theDict, (const void *)kLMLanguageModelEnableSearchQueryModelLoadingKey) == 0;
    if (sub_19C4142E8(*(const __CFLocale **)a5, v12) != -1)
    {
      v13 = operator new();
      v14 = *(const __CFLocale **)a5;
      *(_DWORD *)(v13 + 8) = 1;
      *(_QWORD *)(v13 + 16) = &unk_1E3D35660;
      v15 = v13 + 16;
      *(_QWORD *)v13 = &off_1E3D35608;
      *(_OWORD *)(v13 + 24) = 0u;
      *(_OWORD *)(v13 + 40) = 0u;
      *(_QWORD *)(v13 + 56) = MEMORY[0x1A1AD29EC](0, v14);
      sub_19C416984(v13, theDict, a2, a3);
      v16 = *(_QWORD *)(v13 + 24);
      v17 = *(_QWORD *)(v13 + 32);
      if (v16 == v17)
      {
        exception = __cxa_allocate_exception(0x20uLL);
        v55 = (char *)operator new(0x20uLL);
        strcpy(v55, "Lexicon resources not found");
        *(_QWORD *)exception = off_1E3D38838;
        sub_19C2B5238(exception + 8, v55, 0x1BuLL);
        __cxa_throw(exception, (struct type_info *)&unk_1E3D32968, (void (*)(void *))sub_19C3123E4);
      }
      v18 = operator new();
      *(_QWORD *)v18 = 0;
      *(_QWORD *)(v18 + 8) = 0;
      *(_QWORD *)(v18 + 16) = 0;
      v19 = 80 * ((v17 - v16) >> 3) + 80;
      *(_QWORD *)(v18 + 40) = v19;
      *(_QWORD *)(v18 + 48) = v19 << 7;
      sub_19C417018((char **)v18);
      v20 = *(_QWORD **)(v13 + 48);
      *(_QWORD *)(v13 + 48) = v18;
      if (v20)
      {
        v21 = (_QWORD *)*v20;
        if (*v20)
        {
          v22 = (_QWORD *)v20[1];
          v23 = (_QWORD *)*v20;
          if (v22 != v21)
          {
            do
            {
              v25 = *--v22;
              v24 = v25;
              *v22 = 0;
              if (v25)
                MEMORY[0x1A1AD3538](v24, 0x1000C8077774924);
            }
            while (v22 != v21);
            v23 = (_QWORD *)*v20;
          }
          v20[1] = v21;
          operator delete(v23);
        }
        MEMORY[0x1A1AD355C](v20, 0x1030C404F540F20);
      }
      sub_19C417140((_QWORD *)v13);
      v33 = *(uint64_t **)(a5 + 16);
      v32 = *(_QWORD *)(a5 + 24);
      if ((unint64_t)v33 < v32)
      {
        *v33 = v15;
        *(_QWORD *)(a5 + 16) = v33 + 1;
        return;
      }
      v34 = *(char **)(a5 + 8);
      v35 = ((char *)v33 - v34) >> 3;
      v36 = v35 + 1;
      if ((unint64_t)(v35 + 1) >> 61)
        sub_19C2A18E8();
      v37 = v32 - (_QWORD)v34;
      if (v37 >> 2 > v36)
        v36 = v37 >> 2;
      if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8)
        v38 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v38 = v36;
      if (v38)
      {
        if (v38 >> 61)
          sub_19C2A143C();
        v39 = (char *)operator new(8 * v38);
      }
      else
      {
        v39 = 0;
      }
      v40 = (uint64_t *)&v39[8 * v35];
      v41 = &v39[8 * v38];
      *v40 = v15;
      v42 = v40 + 1;
      if (v33 == (uint64_t *)v34)
      {
        *(_QWORD *)(a5 + 8) = v40;
        *(_QWORD *)(a5 + 16) = v42;
        *(_QWORD *)(a5 + 24) = v41;
LABEL_57:
        if (v33)
          operator delete(v33);
        *(_QWORD *)(a5 + 16) = v42;
        return;
      }
      v43 = (char *)v33 - v34 - 8;
      if (v43 > 0x77
        && ((uint64_t *)((char *)v33 - (v43 & 0xFFFFFFFFFFFFFFF8) - 8) >= v40
         || &v39[(char *)v33 - v34 - (v43 & 0xFFFFFFFFFFFFFFF8) - 8] >= (char *)v33))
      {
        v44 = (v43 >> 3) + 1;
        v40 -= v44 & 0x3FFFFFFFFFFFFFFCLL;
        v45 = v33 - 4;
        v46 = &v39[8 * v35 - 16];
        v47 = v44 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v49 = *(_OWORD *)v45;
          v48 = *((_OWORD *)v45 + 1);
          *(_OWORD *)v45 = 0uLL;
          *((_OWORD *)v45 + 1) = 0uLL;
          v45 -= 4;
          *((_OWORD *)v46 - 1) = v49;
          *(_OWORD *)v46 = v48;
          v46 -= 32;
          v47 -= 4;
        }
        while (v47);
        if (v44 == (v44 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_52;
        v33 -= v44 & 0x3FFFFFFFFFFFFFFCLL;
      }
      do
      {
        v50 = *--v33;
        *v33 = 0;
        *--v40 = v50;
      }
      while (v33 != (uint64_t *)v34);
LABEL_52:
      v33 = *(uint64_t **)(a5 + 8);
      v51 = *(uint64_t **)(a5 + 16);
      *(_QWORD *)(a5 + 8) = v40;
      *(_QWORD *)(a5 + 16) = v42;
      *(_QWORD *)(a5 + 24) = v41;
      while (v51 != v33)
      {
        v53 = *--v51;
        v52 = v53;
        *v51 = 0;
        if (v53)
          (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
      }
      goto LABEL_57;
    }
    if ((unint64_t)(a2[1] - *a2) >= 0x11 && *a3 != a3[1])
    {
      if (qword_1EE41C450 != -1)
        dispatch_once(&qword_1EE41C450, &unk_1E3D3B5A0);
      v26 = qword_1EE41C448;
      if (os_log_type_enabled((os_log_t)qword_1EE41C448, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl(&dword_19C291000, v26, OS_LOG_TYPE_ERROR, "Deltas are not supported for multiple lexicons. Attempting to apply deltas to all provided lexicons...", buf, 2u);
      }
    }
    v27 = (CFDictionaryRef **)*a2;
    v28 = (CFDictionaryRef **)a2[1];
    if ((CFDictionaryRef **)*a2 != v28)
    {
      do
      {
        v30 = operator new();
        sub_19C33821C(v30, *(const void **)a5, *v27, a3);
        v31 = *(uint64_t **)(a5 + 16);
        if ((unint64_t)v31 < *(_QWORD *)(a5 + 24))
        {
          *v31 = v30;
          v29 = (char *)(v31 + 1);
        }
        else
        {
          v29 = sub_19C326B48((char **)(a5 + 8), v30);
        }
        *(_QWORD *)(a5 + 16) = v29;
        v27 += 2;
      }
      while (v27 != v28);
    }
  }
}

#error "19C3C12D0: call analysis failed (funcsize=84)"

os_log_t sub_19C3C1308()
{
  os_log_t result;

  result = os_log_create("com.apple.LanguageModeling", "MultilingualDynamicLanguageModel");
  qword_1EE41C448 = (uint64_t)result;
  return result;
}

void sub_19C3C1334(uint64_t a1, CFDictionaryRef theDict, int a3, const void ****a4)
{
  __CFDictionary *MutableCopy;
  const void ***v8;
  const void ***v9;
  void **v10;
  void *v11;
  const __CFDictionary *v12;
  char *v13;
  char *v14;
  void *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  char *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  char *v25;
  void *__p;
  char *v27;
  CFTypeRef cf[20];
  CFMutableDictionaryRef v29;

  MutableCopy = CFDictionaryCreateMutableCopy(0, 0, theDict);
  v29 = MutableCopy;
  CFDictionaryRemoveValue(MutableCopy, (const void *)kLMLanguageLocalesKey);
  CFDictionarySetValue(MutableCopy, (const void *)kLMLanguageModelIgnoreSystemLanguageModelsKey, (const void *)*MEMORY[0x1E0C9AE50]);
  v9 = *a4;
  v8 = a4[1];
  if (v9 != v8)
  {
    v10 = (void **)(a1 + 80);
    do
    {
      v12 = v29;
      CFDictionarySetValue(v29, (const void *)kLMLanguageModelLocaleKey, **v9);
      sub_19C346094((uint64_t)cf, v12, v10);
      sub_19C348B90((uint64_t)&__p, cf[0], 20);
      sub_19C348B90((uint64_t)&v24, cf[0], 26);
      sub_19C3C0BCC(v12, (uint64_t *)&__p, (CFDictionaryRef ***)&v24, a3, (uint64_t)*v9);
      v13 = (char *)v24;
      if (v24)
      {
        v14 = v25;
        v15 = v24;
        if (v25 != v24)
        {
          do
          {
            v16 = (std::__shared_weak_count *)*((_QWORD *)v14 - 1);
            if (v16)
            {
              p_shared_owners = (unint64_t *)&v16->__shared_owners_;
              do
                v18 = __ldaxr(p_shared_owners);
              while (__stlxr(v18 - 1, p_shared_owners));
              if (!v18)
              {
                ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
                std::__shared_weak_count::__release_weak(v16);
              }
            }
            v14 -= 16;
          }
          while (v14 != v13);
          v15 = v24;
        }
        v25 = v13;
        operator delete(v15);
      }
      v19 = (char *)__p;
      if (__p)
      {
        v20 = v27;
        v11 = __p;
        if (v27 != __p)
        {
          do
          {
            v21 = (std::__shared_weak_count *)*((_QWORD *)v20 - 1);
            if (v21)
            {
              v22 = (unint64_t *)&v21->__shared_owners_;
              do
                v23 = __ldaxr(v22);
              while (__stlxr(v23 - 1, v22));
              if (!v23)
              {
                ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
                std::__shared_weak_count::__release_weak(v21);
              }
            }
            v20 -= 16;
          }
          while (v20 != v19);
          v11 = __p;
        }
        v27 = v19;
        operator delete(v11);
      }
      sub_19C2F5B40((uint64_t)cf);
      v9 += 2;
    }
    while (v9 != v8);
    MutableCopy = v29;
  }
  if (MutableCopy)
    CFRelease(MutableCopy);
}

void sub_19C3C1540(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_19C32BBE4((const void **)(v1 - 88));
  _Unwind_Resume(a1);
}

uint64_t sub_19C3C158C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned __int8 v11;
  int v12;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v12 = a3;
  v11 = 0;
  v7 = operator new(0x28uLL);
  *v7 = &off_1E3D30A58;
  v7[1] = a4;
  v7[2] = &v12;
  v7[3] = a2;
  v7[4] = &v11;
  v14 = v7;
  (*(void (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)a2 + 48))(a2, a1, v13);
  v8 = v14;
  if (v14 == v13)
  {
    v9 = 4;
    v8 = v13;
    goto LABEL_5;
  }
  if (v14)
  {
    v9 = 5;
LABEL_5:
    (*(void (**)(void))(*v8 + 8 * v9))();
  }
  return v11;
}

void sub_19C3C1668(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_19C3C16A8()
{
  JUMPOUT(0x1A1AD355CLL);
}

__n128 sub_19C3C16BC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E3D30A58;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_19C3C16FC(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E3D30A58;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_19C3C1724(uint64_t a1, uint64_t *a2, int *a3, uint64_t *a4, _BYTE *a5)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;

  v7 = *a2;
  v8 = *a3;
  v9 = *a4;
  v10 = *(_QWORD *)(a1 + 8);
  v11 = **(_DWORD **)(a1 + 16);
  v12 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 64))(*(_QWORD *)(a1 + 24));
  v19 = v7;
  v18 = v8;
  v17 = v9;
  v16 = v11;
  v15 = v12;
  v13 = *(_QWORD *)(v10 + 24);
  if (!v13)
    sub_19C2CCC60();
  result = (*(uint64_t (**)(uint64_t, uint64_t *, int *, uint64_t *, int *, uint64_t *, _BYTE *))(*(_QWORD *)v13 + 48))(v13, &v19, &v18, &v17, &v16, &v15, a5);
  **(_BYTE **)(a1 + 32) = *a5;
  return result;
}

uint64_t sub_19C3C17D8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN2LM38enumerateSortkeyEquivalentsFromLexiconERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9al"
                     "locatorIcEEEERKNS_7LexiconENS_13SourceLexiconERKNS0_8functionIFvPK10__CFStringjdSC_PK10__CFLocaleRbEEEE3$_0"
    || ((v3 & (unint64_t)"ZN2LM38enumerateSortkeyEquivalentsFromLexiconERKNSt3__112basic_stringIcNS0_11char_traits"
                                "IcEENS0_9allocatorIcEEEERKNS_7LexiconENS_13SourceLexiconERKNS0_8functionIFvPK10__CFStrin"
                                "gjdSC_PK10__CFLocaleRbEEEE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN2LM38enumerateSortkeyEquivalentsFromLexiconERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERKNS_7LexiconENS_13SourceLexiconERKNS0_8functionIFvPK10__CFStringjdSC_PK10__CFLocaleRbEEEE3$_0")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN2LM38enumerateSortkeyEquivalentsFromLexiconERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERKNS_7LexiconENS_13SourceLexiconERKNS0_8functionIFvPK10__CFStringjdSC_PK10__CFLocaleRbEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *sub_19C3C182C()
{
  return &unk_1E3D30100;
}

BOOL sub_19C3C1838(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _BOOL8 result;
  BOOL v13;
  char v14;
  int v15;
  _BYTE v16[24];
  _BYTE *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (a2 != a3)
  {
    v7 = a2 + 8;
    while (1)
    {
      v8 = *(_QWORD *)(v7 - 8);
      v15 = 0;
      v14 = 0;
      v9 = operator new(0x28uLL);
      *v9 = &off_1E3D30A58;
      v9[1] = a4;
      v9[2] = &v15;
      v9[3] = v8;
      v9[4] = &v14;
      v17 = v9;
      (*(void (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v8 + 48))(v8, a1, v16);
      v10 = v17;
      if (v17 == v16)
      {
        v10 = v16;
        v11 = 4;
      }
      else
      {
        if (!v17)
          goto LABEL_8;
        v11 = 5;
      }
      (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_8:
      result = v14 != 0;
      if (!v14)
      {
        v13 = v7 == a3;
        v7 += 8;
        if (!v13)
          continue;
      }
      return result;
    }
  }
  return 0;
}

void sub_19C3C1958(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      _Unwind_Resume(exception_object);
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
  _Unwind_Resume(exception_object);
}

uint64_t *sub_19C3C19A0(_QWORD *a1, uint64_t a2)
{
  _BYTE *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t **v11;
  uint64_t *v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *result;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  v2 = (_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v5 = v4;
  }
  v6 = sub_19C2A0F2C((uint64_t)&v25, (uint64_t *)a2, v5);
  v7 = (int8x8_t)a1[1];
  if (v7)
  {
    v8 = v6;
    v9 = (uint8x8_t)vcnt_s8(v7);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v10 = v6;
      if (v6 >= *(_QWORD *)&v7)
        v10 = v6 % *(_QWORD *)&v7;
    }
    else
    {
      v10 = (*(_QWORD *)&v7 - 1) & v6;
    }
    v11 = *(uint64_t ***)(*a1 + 8 * v10);
    if (v11)
    {
      v12 = *v11;
      if (*v11)
      {
        v13 = v2[23];
        if (v13 >= 0)
          v14 = v2[23];
        else
          v14 = *((_QWORD *)v2 + 1);
        if (v13 < 0)
          v2 = *(_BYTE **)v2;
        if (v9.u32[0] < 2uLL)
        {
          v15 = *(_QWORD *)&v7 - 1;
          while (1)
          {
            v21 = v12[1];
            if (v8 == v21)
            {
              v22 = *((unsigned __int8 *)v12 + 39);
              if ((v22 & 0x80u) == 0)
                v23 = *((unsigned __int8 *)v12 + 39);
              else
                v23 = v12[3];
              if (v23 == v14)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v12[2], v2, v12[3]))
                    return v12;
                }
                else
                {
                  if (!*((_BYTE *)v12 + 39))
                    return v12;
                  v24 = 0;
                  while (*((unsigned __int8 *)v12 + v24 + 16) == v2[v24])
                  {
                    if (v22 == ++v24)
                      return v12;
                  }
                }
              }
            }
            else if ((v21 & v15) != v10)
            {
              return 0;
            }
            result = 0;
            v12 = (uint64_t *)*v12;
            if (!v12)
              return result;
          }
        }
        while (1)
        {
          v17 = v12[1];
          if (v8 == v17)
          {
            v18 = *((unsigned __int8 *)v12 + 39);
            if ((v18 & 0x80u) == 0)
              v19 = *((unsigned __int8 *)v12 + 39);
            else
              v19 = v12[3];
            if (v19 == v14)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v12[2], v2, v12[3]))
                  return v12;
              }
              else
              {
                if (!*((_BYTE *)v12 + 39))
                  return v12;
                v20 = 0;
                while (*((unsigned __int8 *)v12 + v20 + 16) == v2[v20])
                {
                  if (v18 == ++v20)
                    return v12;
                }
              }
            }
          }
          else
          {
            if (v17 >= *(_QWORD *)&v7)
              v17 %= *(_QWORD *)&v7;
            if (v17 != v10)
              return 0;
          }
          result = 0;
          v12 = (uint64_t *)*v12;
          if (!v12)
            return result;
        }
      }
    }
  }
  return 0;
}

uint64_t sub_19C3C1B9C(uint64_t a1, int a2)
{
  uint64_t v3;
  char v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (!a2)
    return sub_19C3B2F0C(a1);
  LODWORD(v3) = 0;
  v4 = 0;
  while (1)
  {
    v10 = (int)v3;
    v11 = *(unsigned __int8 *)(a1 + 23);
    if (*(char *)(a1 + 23) < 0)
      break;
    if ((v11 <= (int)v3) | v4 & 1)
      goto LABEL_51;
    LODWORD(v3) = v3 + 1;
    v9 = *(unsigned __int8 *)(a1 + v10);
    if (*(char *)(a1 + v10) < 0)
    {
      v12 = *(unsigned __int8 *)(a1 + 23);
LABEL_18:
      v13 = (int)v3;
      if (v12 == (int)v3)
      {
        v4 = 1;
      }
      else if (v9 < 0xE0)
      {
        if (v9 >= 0xC2)
        {
          v5 = v9 & 0x1F;
          v6 = *(_QWORD *)a1;
          goto LABEL_5;
        }
        v4 = 1;
      }
      else if (v9 > 0xEF)
      {
        if (v9 > 0xF4)
        {
          v4 = 1;
        }
        else
        {
          v6 = *(_QWORD *)a1;
          if ((v11 & 0x80u) == 0)
            v17 = a1;
          else
            v17 = *(_QWORD *)a1;
          v18 = *(unsigned __int8 *)(v17 + (int)v3);
          if (((byte_19C477FF9[v18 >> 4] >> (v9 + 16)) & 1) != 0)
          {
            v3 = v10 + 2;
            if ((v11 & 0x80) != 0)
            {
              v19 = *(_QWORD *)a1;
              if (*(_QWORD *)(a1 + 8) == v3)
              {
                v4 = 1;
              }
              else
              {
LABEL_35:
                v16 = *(unsigned __int8 *)(v19 + v3) ^ 0x80;
                if (v16 <= 0x3F)
                {
                  v14 = v18 & 0x3F | ((v9 - 240) << 6);
                  goto LABEL_37;
                }
                v4 = 1;
              }
            }
            else
            {
              v19 = a1;
              if (v11 != v3)
                goto LABEL_35;
              v4 = 1;
            }
          }
          else
          {
            v4 = 1;
          }
        }
      }
      else
      {
        v14 = v9 & 0xF;
        v6 = *(_QWORD *)a1;
        if ((v11 & 0x80u) == 0)
          v15 = a1;
        else
          v15 = *(_QWORD *)a1;
        if (((a00000000000000[v9 & 0xF] >> (*(_BYTE *)(v15 + (int)v3) >> 5)) & 1) != 0)
        {
          v16 = *(_BYTE *)(v15 + (int)v3) & 0x3F;
LABEL_37:
          LODWORD(v3) = v3 + 1;
          v13 = (int)v3;
          if ((v11 & 0x80u) == 0)
            v20 = *(unsigned __int8 *)(a1 + 23);
          else
            v20 = *(_QWORD *)(a1 + 8);
          if (v20 == (int)v3)
          {
            v4 = 1;
          }
          else
          {
            v5 = v16 | (v14 << 6);
LABEL_5:
            if ((v11 & 0x80u) == 0)
              v7 = a1;
            else
              v7 = v6;
            v8 = *(unsigned __int8 *)(v7 + v13) ^ 0x80;
            if (v8 <= 0x3F)
            {
              v9 = v8 | (v5 << 6);
              LODWORD(v3) = v3 + 1;
              goto LABEL_10;
            }
            v4 = 1;
          }
        }
        else
        {
          v4 = 1;
        }
      }
    }
    else
    {
LABEL_10:
      if (((1 << u_charType(v9)) & 0xE00) == 0)
        v4 = 1;
    }
  }
  v12 = *(_QWORD *)(a1 + 8);
  if (!((v12 <= (int)v3) | v4 & 1))
  {
    LODWORD(v3) = v3 + 1;
    v9 = *(unsigned __int8 *)(*(_QWORD *)a1 + v10);
    if ((*(char *)(*(_QWORD *)a1 + v10) & 0x80000000) == 0)
      goto LABEL_10;
    goto LABEL_18;
  }
LABEL_51:
  if ((v4 & 1) != 0)
    return sub_19C3B2F0C(a1);
  return 3;
}

uint64_t sub_19C3C1DEC(const __CFString *a1, int *a2, uint64_t a3, uint64_t a4, const void *a5, const void *a6)
{
  int8x8_t **v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  int v14;
  char v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v20;
  _QWORD *v21;
  int v22;
  _QWORD *v23;
  void *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  char *v28;
  char *v29;
  void *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  char *v34;
  char *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  const __CFArray *v40;
  CFIndex Count;
  CFIndex v42;
  CFArrayRef v43;
  CFIndex v44;
  _QWORD **v45;
  _QWORD **v46;
  _QWORD *v47;
  _QWORD *v48;
  const __CFString *v49;
  CFIndex Length;
  int v51;
  unint64_t v52;
  const void *v53;
  unint64_t v54;
  const void *v55;
  _QWORD **v56;
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  _QWORD *v61;
  const __CFString *v62;
  CFIndex v63;
  int v64;
  int v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  _BYTE *v69;
  char *v70;
  char *v71;
  unint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  _OWORD *v76;
  char *v77;
  uint64_t v78;
  __int128 v79;
  char *i;
  _QWORD *v81;
  const __CFString *v82;
  CFIndex v83;
  int v84;
  char v85;
  void **v86;
  void *v87;
  void **v88;
  _QWORD **v89;
  void *__p[2];
  char v91;
  void *v92[2];
  void *v93[2];
  int v94;
  int8x8_t **v95[4];
  std::__shared_weak_count *v96;
  int v97;
  uint64_t v98;
  int *v99;
  CFStringRef theString;
  CFArrayRef theArray;
  CFArrayRef *p_theArray;
  uint64_t v103;
  char v104;
  _QWORD *v105;
  uint64_t v106;
  uint64_t (*v107)(uint64_t, UTF32Char, _BYTE *);
  void *v108;
  void *v109;
  _QWORD *v110;

  v99 = a2;
  theString = a1;
  v98 = a3;
  v97 = 0;
  if (!a2)
    v99 = &v97;
  v10 = *(int8x8_t ***)(a3 + 560);
  v11 = *(std::__shared_weak_count **)(a3 + 568);
  v95[3] = v10;
  v96 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  v14 = ((uint64_t (*)(int8x8_t **, const __CFString *, _QWORD))(*v10)[2])(v10, a1, 0);
  *v99 = v14;
  if (v14)
  {
LABEL_7:
    v15 = 0;
    goto LABEL_8;
  }
  sub_19C3BE128(&v105, v98 + 616);
  v21 = v105;
  v20 = (_QWORD *)v106;
  if (v105 == (_QWORD *)v106)
    goto LABEL_18;
  do
  {
    v22 = (*(uint64_t (**)(_QWORD, CFStringRef, _QWORD))(*(_QWORD *)*v21 + 16))(*v21, theString, 0);
    *v99 = v22;
    if (v22)
    {
      v28 = (char *)v105;
      if (v105)
      {
        v29 = (char *)v106;
        v30 = v105;
        if ((_QWORD *)v106 != v105)
        {
          do
          {
            v31 = (std::__shared_weak_count *)*((_QWORD *)v29 - 1);
            if (v31)
            {
              v32 = (unint64_t *)&v31->__shared_owners_;
              do
                v33 = __ldaxr(v32);
              while (__stlxr(v33 - 1, v32));
              if (!v33)
              {
                ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
                std::__shared_weak_count::__release_weak(v31);
              }
            }
            v29 -= 16;
          }
          while (v29 != v28);
          v30 = v105;
        }
        v106 = (uint64_t)v28;
LABEL_65:
        operator delete(v30);
      }
      goto LABEL_7;
    }
    v21 += 2;
  }
  while (v21 != v20);
  v21 = v105;
LABEL_18:
  if (v21)
  {
    v23 = (_QWORD *)v106;
    v24 = v21;
    if ((_QWORD *)v106 != v21)
    {
      do
      {
        v25 = (std::__shared_weak_count *)*(v23 - 1);
        if (v25)
        {
          v26 = (unint64_t *)&v25->__shared_owners_;
          do
            v27 = __ldaxr(v26);
          while (__stlxr(v27 - 1, v26));
          if (!v27)
          {
            ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        v23 -= 2;
      }
      while (v23 != v21);
      v24 = v105;
    }
    v106 = (uint64_t)v21;
    operator delete(v24);
  }
  v95[0] = (int8x8_t **)&v98;
  v95[1] = (int8x8_t **)&theString;
  v95[2] = (int8x8_t **)&v99;
  if (!a6)
    goto LABEL_55;
  sub_19C3BE128(&v105, v98 + 616);
  v35 = (char *)v105;
  v34 = (char *)v106;
  v36 = v106 - (_QWORD)v105;
  if (!v105)
  {
    if (v36 >= 0x11)
      goto LABEL_50;
    goto LABEL_55;
  }
  if ((_QWORD *)v106 != v105)
  {
    do
    {
      v37 = (std::__shared_weak_count *)*((_QWORD *)v34 - 1);
      if (v37)
      {
        v38 = (unint64_t *)&v37->__shared_owners_;
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
      }
      v34 -= 16;
    }
    while (v34 != v35);
    v34 = (char *)v105;
  }
  v106 = (uint64_t)v35;
  operator delete(v34);
  if (v36 <= 0x10)
  {
LABEL_55:
    v45 = *(_QWORD ***)a4;
    v46 = *(_QWORD ***)(a4 + 8);
    if (*(_QWORD ***)a4 != v46)
    {
      v47 = (_QWORD *)MEMORY[0x1E0C809B0];
      while (1)
      {
        v48 = *v45;
        v49 = theString;
        Length = CFStringGetLength(theString);
        if (!*v48)
          break;
        v92[0] = 0;
        v92[1] = v92;
        v93[0] = (void *)0x2000000000;
        LOBYTE(v93[1]) = 1;
        v105 = v47;
        v106 = 0x40000000;
        v107 = sub_19C34061C;
        v108 = &unk_1E3D3A380;
        v109 = v92;
        v110 = v48;
        sub_19C2E13BC(v49, 0, Length, (uint64_t)&v105);
        v51 = *((unsigned __int8 *)v92[1] + 24);
        _Block_object_dispose(v92, 8);
        if (v51)
          break;
        if (++v45 == v46)
        {
          sub_19C3C07CC((uint64_t)&v105, a5);
          if ((SHIBYTE(v107) & 0x80000000) == 0)
            goto LABEL_7;
          v30 = v105;
          goto LABEL_65;
        }
      }
    }
    HIBYTE(v107) = 0;
    LOBYTE(v105) = 0;
    v15 = sub_19C3C28E0(v95, (uint64_t)&v105);
    goto LABEL_8;
  }
LABEL_50:
  *(_OWORD *)v92 = 0u;
  *(_OWORD *)v93 = 0u;
  v94 = 1065353216;
  CFRetain(a6);
  sub_19C31D164(&theArray, a6);
  v40 = theArray;
  if (theArray)
  {
    Count = CFArrayGetCount(theArray);
    v42 = Count;
    v43 = theArray;
    if (theArray)
    {
      v44 = CFArrayGetCount(theArray);
      if (!v42)
        goto LABEL_81;
LABEL_67:
      if (v40 == v43)
      {
        v52 = 0;
        do
        {
          if (v44 == v52)
            break;
          sub_19C31D210(__p, v40, v52);
          v53 = __p[0];
          sub_19C3C27D8(&v105, (uint64_t)__p[0]);
          sub_19C30C750((uint64_t)v92, (uint64_t)&v105, (uint64_t)&v105);
          if (SHIBYTE(v107) < 0)
            operator delete(v105);
          if (v53)
            CFRelease(v53);
          ++v52;
        }
        while (v42 != v52);
      }
      else
      {
        v54 = 0;
        do
        {
          sub_19C31D210(__p, v40, v54);
          v55 = __p[0];
          sub_19C3C27D8(&v105, (uint64_t)__p[0]);
          sub_19C30C750((uint64_t)v92, (uint64_t)&v105, (uint64_t)&v105);
          if (SHIBYTE(v107) < 0)
            operator delete(v105);
          if (v55)
            CFRelease(v55);
          ++v54;
        }
        while (v42 != v54);
      }
    }
    else
    {
      v44 = 0;
      if (Count)
        goto LABEL_67;
    }
LABEL_81:
    if (theArray)
      CFRelease(theArray);
  }
  v56 = *(_QWORD ***)a4;
  v89 = *(_QWORD ***)(a4 + 8);
  if (*(_QWORD ***)a4 == v89)
  {
    v57 = 0;
    goto LABEL_140;
  }
  v57 = 0;
  v58 = 0;
  v59 = 0;
  v60 = 0;
  v15 = 0;
  do
  {
    v61 = *v56;
    sub_19C3C27D8(__p, (*v56)[2]);
    if (sub_19C3C19A0(v92, (uint64_t)__p))
    {
      v62 = theString;
      v63 = CFStringGetLength(theString);
      if (*v61)
      {
        theArray = 0;
        p_theArray = &theArray;
        v103 = 0x2000000000;
        v104 = 1;
        v105 = (_QWORD *)MEMORY[0x1E0C809B0];
        v106 = 0x40000000;
        v107 = sub_19C34061C;
        v108 = &unk_1E3D3A380;
        v109 = &theArray;
        v110 = v61;
        sub_19C2E13BC(v62, 0, v63, (uint64_t)&v105);
        v64 = *((unsigned __int8 *)p_theArray + 24);
        _Block_object_dispose(&theArray, 8);
        if (!v64)
          goto LABEL_92;
      }
      if ((sub_19C3C28E0(v95, (uint64_t)__p) & 1) != 0)
      {
        v65 = 1;
        v15 = 1;
        if (v91 < 0)
          goto LABEL_96;
      }
      else
      {
LABEL_92:
        v65 = 0;
        if (v91 < 0)
          goto LABEL_96;
      }
      goto LABEL_97;
    }
    if (v60 >= v58)
    {
      v66 = (v60 - v57) >> 3;
      v67 = v66 + 1;
      if ((unint64_t)(v66 + 1) >> 61)
        sub_19C2A18E8();
      if ((v58 - v57) >> 2 > v67)
        v67 = (v58 - v57) >> 2;
      if ((unint64_t)(v58 - v57) >= 0x7FFFFFFFFFFFFFF8)
        v68 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v68 = v67;
      if (v68)
      {
        if (v68 >> 61)
          sub_19C2A143C();
        v69 = operator new(8 * v68);
      }
      else
      {
        v69 = 0;
      }
      v70 = &v69[8 * v66];
      *(_QWORD *)v70 = v61;
      v71 = v70 + 8;
      if (v60 == v57)
      {
        v59 = v70 + 8;
        v58 = &v69[8 * v68];
        if (!v57)
        {
LABEL_116:
          v65 = 7;
          v57 = v70;
          v60 = v59;
          if ((v91 & 0x80000000) == 0)
            goto LABEL_97;
LABEL_96:
          operator delete(__p[0]);
          goto LABEL_97;
        }
LABEL_115:
        operator delete(v57);
        goto LABEL_116;
      }
      v72 = v60 - 8 - v57;
      if (v72 < 0x168
        || &v69[v60 - v57 - 8 - (v72 & 0xFFFFFFFFFFFFFFF8)] > &v69[v60 - v57 - 8]
        || &v60[-(v72 & 0xFFFFFFFFFFFFFFF8) - 8] > v60 - 8
        || (unint64_t)(v57 - v69) < 0x20)
      {
        v73 = v60;
        v59 = v70 + 8;
      }
      else
      {
        v75 = (v72 >> 3) + 1;
        v73 = &v60[-8 * (v75 & 0x3FFFFFFFFFFFFFFCLL)];
        v76 = &v69[8 * v66 - 16];
        v77 = v60 - 16;
        v78 = v75 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v79 = *(_OWORD *)v77;
          *(v76 - 1) = *((_OWORD *)v77 - 1);
          *v76 = v79;
          v76 -= 2;
          v77 -= 32;
          v78 -= 4;
        }
        while (v78);
        v70 -= 8 * (v75 & 0x3FFFFFFFFFFFFFFCLL);
        v59 = v71;
        if (v75 == (v75 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_114:
          v58 = &v69[8 * v68];
          if (!v57)
            goto LABEL_116;
          goto LABEL_115;
        }
      }
      do
      {
        v74 = *((_QWORD *)v73 - 1);
        v73 -= 8;
        *((_QWORD *)v70 - 1) = v74;
        v70 -= 8;
      }
      while (v73 != v57);
      goto LABEL_114;
    }
    *(_QWORD *)v60 = v61;
    v60 += 8;
    v65 = 7;
    v59 = v60;
    if (v91 < 0)
      goto LABEL_96;
LABEL_97:
    if (v65 != 7 && v65)
      goto LABEL_141;
    ++v56;
  }
  while (v56 != v89);
  if (v57 != v59)
  {
    for (i = v57; i != v59; i += 8)
    {
      v81 = *(_QWORD **)i;
      sub_19C3C27D8(__p, *(_QWORD *)(*(_QWORD *)i + 16));
      v82 = theString;
      v83 = CFStringGetLength(theString);
      if (*v81)
      {
        theArray = 0;
        p_theArray = &theArray;
        v103 = 0x2000000000;
        v104 = 1;
        v105 = (_QWORD *)MEMORY[0x1E0C809B0];
        v106 = 0x40000000;
        v107 = sub_19C34061C;
        v108 = &unk_1E3D3A380;
        v109 = &theArray;
        v110 = v81;
        sub_19C2E13BC(v82, 0, v83, (uint64_t)&v105);
        v84 = *((unsigned __int8 *)p_theArray + 24);
        _Block_object_dispose(&theArray, 8);
        if (!v84)
          goto LABEL_134;
      }
      if ((sub_19C3C28E0(v95, (uint64_t)__p) & 1) != 0)
      {
        v85 = 0;
        v15 = 1;
        if (v91 < 0)
          goto LABEL_135;
      }
      else
      {
LABEL_134:
        v85 = 1;
        if (v91 < 0)
LABEL_135:
          operator delete(__p[0]);
      }
      if ((v85 & 1) == 0)
        goto LABEL_141;
    }
  }
LABEL_140:
  v15 = 0;
LABEL_141:
  v86 = (void **)v93[0];
  if (v93[0])
  {
    do
    {
      v88 = (void **)*v86;
      if (*((char *)v86 + 39) < 0)
        operator delete(v86[2]);
      operator delete(v86);
      v86 = v88;
    }
    while (v88);
  }
  v87 = v92[0];
  v92[0] = 0;
  if (v87)
    operator delete(v87);
  if (v57)
    operator delete(v57);
LABEL_8:
  v16 = v96;
  if (v96)
  {
    v17 = (unint64_t *)&v96->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  return v15 & 1;
}

void sub_19C3C26C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  sub_19C2B43C8((uint64_t)&a25);
  _Unwind_Resume(a1);
}

void sub_19C3C27D8(_QWORD *a1, uint64_t a2)
{
  const void *v3;
  const void *v4;
  const __CFString *v5;
  CFTypeID TypeID;
  void *exception;
  CFTypeRef cf;

  v3 = (const void *)MEMORY[0x1A1AD2A04](a2);
  if (!v3)
  {
    cf = 0;
    goto LABEL_8;
  }
  v4 = v3;
  CFRetain(v3);
  sub_19C297DB4(&cf, v4);
  v5 = (const __CFString *)cf;
  if (!cf)
  {
LABEL_8:
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD3154](exception, "Could not construct");
    goto LABEL_10;
  }
  TypeID = CFStringGetTypeID();
  if (TypeID != CFGetTypeID(v5))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD3154](exception, "Could not convert");
LABEL_10:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  sub_19C297E60(a1, v5);
  if (cf)
    CFRelease(cf);
}

void sub_19C3C28B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
  void *v10;

  __cxa_free_exception(v10);
  sub_19C2E5670(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_19C3C28E0(int8x8_t ***a1, uint64_t a2)
{
  int8x8_t *v3;
  unint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  int8x8_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  int8x8_t *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t v17;
  uint64_t **v18;
  uint64_t *v19;
  void *v20;
  void **v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int8x8_t v37;
  void *v39[2];
  char v40;
  void *__p[2];
  uint64_t v42;

  if ((*(char *)(a2 + 23) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a2 + 23))
    {
      v3 = **a1;
      *(_OWORD *)__p = *(_OWORD *)a2;
      v42 = *(_QWORD *)(a2 + 16);
      goto LABEL_6;
    }
LABEL_15:
    v12 = **a1;
    v13 = (uint64_t)v12[70];
    v14 = (std::__shared_weak_count *)v12[71];
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldxr(p_shared_owners);
      while (__stxr(v16 + 1, p_shared_owners));
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    goto LABEL_75;
  }
  v4 = *(_QWORD *)(a2 + 8);
  if (!v4)
    goto LABEL_15;
  v3 = **a1;
  sub_19C2B5238(__p, *(void **)a2, v4);
LABEL_6:
  if (v42 >= 0)
    v5 = (uint64_t *)__p;
  else
    v5 = (uint64_t *)__p[0];
  if (v42 >= 0)
    v6 = HIBYTE(v42);
  else
    v6 = (unint64_t)__p[1];
  v7 = sub_19C2A0F2C((uint64_t)v39, v5, v6);
  v8 = v3[73];
  if (!*(_QWORD *)&v8)
    goto LABEL_72;
  v9 = v7;
  v10 = (uint8x8_t)vcnt_s8(v8);
  v10.i16[0] = vaddlv_u8(v10);
  if (v10.u32[0] > 1uLL)
  {
    v11 = v7;
    if (v7 >= *(_QWORD *)&v8)
      v11 = v7 % *(_QWORD *)&v8;
  }
  else
  {
    v11 = (*(_QWORD *)&v8 - 1) & v7;
  }
  v18 = *(uint64_t ***)(*(_QWORD *)&v3[72] + 8 * v11);
  if (!v18 || (v19 = *v18) == 0)
  {
LABEL_72:
    v13 = 0;
    goto LABEL_73;
  }
  if (v42 >= 0)
    v20 = (void *)HIBYTE(v42);
  else
    v20 = __p[1];
  if (v42 >= 0)
    v21 = __p;
  else
    v21 = (void **)__p[0];
  if (v10.u32[0] < 2uLL)
  {
    v22 = *(_QWORD *)&v8 - 1;
    while (1)
    {
      v27 = v19[1];
      if (v27 == v9)
      {
        v28 = *((unsigned __int8 *)v19 + 39);
        if ((v28 & 0x80u) == 0)
          v29 = (void *)*((unsigned __int8 *)v19 + 39);
        else
          v29 = (void *)v19[3];
        if (v29 == v20)
        {
          if ((v28 & 0x80) != 0)
          {
            if (!memcmp((const void *)v19[2], v21, v19[3]))
              goto LABEL_66;
          }
          else
          {
            if (!*((_BYTE *)v19 + 39))
              goto LABEL_66;
            v30 = 0;
            while (*((unsigned __int8 *)v19 + v30 + 16) == *((unsigned __int8 *)v21 + v30))
            {
              if (v28 == ++v30)
                goto LABEL_65;
            }
          }
        }
      }
      else if ((v27 & v22) != v11)
      {
        goto LABEL_72;
      }
      v13 = 0;
      v19 = (uint64_t *)*v19;
      if (!v19)
        goto LABEL_73;
    }
  }
  while (1)
  {
    v23 = v19[1];
    if (v23 != v9)
    {
      if (v23 >= *(_QWORD *)&v8)
        v23 %= *(_QWORD *)&v8;
      if (v23 != v11)
        goto LABEL_72;
      goto LABEL_34;
    }
    v24 = *((unsigned __int8 *)v19 + 39);
    if ((v24 & 0x80u) == 0)
      v25 = (void *)*((unsigned __int8 *)v19 + 39);
    else
      v25 = (void *)v19[3];
    if (v25 != v20)
      goto LABEL_34;
    if ((v24 & 0x80) != 0)
      break;
    if (!*((_BYTE *)v19 + 39))
      goto LABEL_66;
    v26 = 0;
    while (*((unsigned __int8 *)v19 + v26 + 16) == *((unsigned __int8 *)v21 + v26))
    {
      if (v24 == ++v26)
      {
LABEL_65:
        if (!v19)
          goto LABEL_72;
        goto LABEL_66;
      }
    }
LABEL_34:
    v13 = 0;
    v19 = (uint64_t *)*v19;
    if (!v19)
      goto LABEL_73;
  }
  if (memcmp((const void *)v19[2], v21, v19[3]))
    goto LABEL_34;
LABEL_66:
  v13 = v19[5];
  v31 = (std::__shared_weak_count *)v19[6];
  if (v31)
  {
    v32 = (unint64_t *)&v31->__shared_owners_;
    do
      v33 = __ldxr(v32);
    while (__stxr(v33 + 1, v32));
    do
      v34 = __ldaxr(v32);
    while (__stlxr(v34 - 1, v32));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
LABEL_73:
  if (SHIBYTE(v42) < 0)
    operator delete(__p[0]);
LABEL_75:
  sub_19C29CEF8((const __CFString *)*a1[1], v39);
  v35 = (*(uint64_t (**)(uint64_t, void **, _QWORD, _QWORD))(*(_QWORD *)v13 + 128))(v13, v39, 0, *a1[2]);
  v36 = v35;
  if (v40 < 0)
  {
    operator delete(v39[0]);
    if ((_DWORD)v36)
    {
LABEL_77:
      v37 = (**a1)[68];
      std::mutex::lock((std::mutex *)(*(_QWORD *)&v37 + 96));
      *(_BYTE *)(*(_QWORD *)&v37 + 24) = 1;
      std::mutex::unlock((std::mutex *)(*(_QWORD *)&v37 + 96));
    }
  }
  else if ((_DWORD)v35)
  {
    goto LABEL_77;
  }
  return v36;
}

void sub_19C3C2C5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19C3C2C78(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _BYTE *v16;
  _QWORD *v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  __int128 *v23;
  uint64_t v24;
  __int128 v25;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2 != a3)
  {
    v4 = a2;
    v6 = 0;
    while (1)
    {
      v8 = *(_QWORD *)(*(_QWORD *)v4 + 128);
      if (!v8)
        goto LABEL_5;
      v9 = a1[2];
      if ((unint64_t)v6 >= v9)
        break;
      *v6 = v8;
      v7 = v6 + 1;
LABEL_4:
      a1[1] = v7;
      v6 = v7;
LABEL_5:
      v4 += 16;
      if (v4 == a3)
        return;
    }
    v10 = (_BYTE *)*a1;
    v11 = (uint64_t)v6 - *a1;
    v12 = v11 >> 3;
    v13 = (v11 >> 3) + 1;
    if (v13 >> 61)
      sub_19C2A18E8();
    v14 = v9 - (_QWORD)v10;
    if (v14 >> 2 > v13)
      v13 = v14 >> 2;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
      v15 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    if (v15)
    {
      if (v15 >> 61)
        sub_19C2A143C();
      v16 = operator new(8 * v15);
    }
    else
    {
      v16 = 0;
    }
    v17 = &v16[8 * v12];
    *v17 = v8;
    v7 = v17 + 1;
    if (v6 == (_QWORD *)v10)
    {
      v10 = v6;
    }
    else
    {
      v18 = (char *)(v6 - 1) - v10;
      if (v18 < 0x168)
      {
        v19 = v6;
        goto LABEL_21;
      }
      if (&v16[v11 - 8 - (v18 & 0xFFFFFFFFFFFFFFF8)] > &v16[v11 - 8])
      {
        v19 = v6;
        goto LABEL_21;
      }
      if ((_QWORD *)((char *)v6 - (v18 & 0xFFFFFFFFFFFFFFF8) - 8) > v6 - 1)
      {
        v19 = v6;
        goto LABEL_21;
      }
      if ((unint64_t)((char *)v6 - v16 - v11) < 0x20)
      {
        v19 = v6;
        goto LABEL_21;
      }
      v21 = (v18 >> 3) + 1;
      v19 = &v6[-(v21 & 0x3FFFFFFFFFFFFFFCLL)];
      v22 = &v16[8 * v12 - 16];
      v23 = (__int128 *)(v6 - 2);
      v24 = v21 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v25 = *v23;
        *(v22 - 1) = *(v23 - 1);
        *v22 = v25;
        v22 -= 2;
        v23 -= 2;
        v24 -= 4;
      }
      while (v24);
      v17 -= v21 & 0x3FFFFFFFFFFFFFFCLL;
      if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL))
      {
        do
        {
LABEL_21:
          v20 = *--v19;
          *--v17 = v20;
        }
        while (v19 != (_QWORD *)v10);
        v10 = (_BYTE *)*a1;
      }
    }
    *a1 = v17;
    a1[1] = v7;
    a1[2] = &v16[8 * v15];
    if (v10)
      operator delete(v10);
    goto LABEL_4;
  }
}

void sub_19C3C2E6C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v2;

  if (v2)
  {
    *(_QWORD *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_19C3C2E8C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D39860;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_19C3C2E9C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D39860;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AD355CLL);
}

void sub_19C3C2ECC(uint64_t a1)
{
  const void *v2;
  void **v3;
  void **v4;
  void *v5;
  void **v6;
  void *v7;
  void **v8;
  void **v9;
  void **v10;
  _QWORD *v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  void *v16;

  v2 = *(const void **)(a1 + 120);
  if (v2)
    CFRelease(v2);
  *(_BYTE *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  v3 = *(void ***)(a1 + 88);
  if (v3)
  {
    v4 = *(void ***)(a1 + 96);
    v5 = *(void **)(a1 + 88);
    if (v4 != v3)
    {
      v6 = *(void ***)(a1 + 96);
      do
      {
        v9 = (void **)*(v6 - 3);
        v6 -= 3;
        v8 = v9;
        if (v9)
        {
          v10 = (void **)*(v4 - 2);
          v7 = v8;
          if (v10 != v8)
          {
            do
            {
              if (*((char *)v10 - 1) < 0)
                operator delete(*(v10 - 3));
              v10 -= 3;
            }
            while (v10 != v8);
            v7 = *v6;
          }
          *(v4 - 2) = v8;
          operator delete(v7);
        }
        v4 = v6;
      }
      while (v6 != v3);
      v5 = *(void **)(a1 + 88);
    }
    *(_QWORD *)(a1 + 96) = v3;
    operator delete(v5);
  }
  v11 = *(_QWORD **)(a1 + 64);
  if (v11)
  {
    do
    {
      v13 = (_QWORD *)*v11;
      v14 = (_QWORD *)v11[5];
      if (v14)
      {
        do
        {
          v15 = (_QWORD *)*v14;
          operator delete(v14);
          v14 = v15;
        }
        while (v15);
      }
      v16 = (void *)v11[3];
      v11[3] = 0;
      if (v16)
        operator delete(v16);
      operator delete(v11);
      v11 = v13;
    }
    while (v13);
  }
  v12 = *(void **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v12)
    operator delete(v12);
}

void sub_19C3C2FFC(_QWORD *a1, uint64_t a2, void **a3, char **a4)
{
  _BYTE *v6;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int8x8_t v11;
  unint64_t v12;
  uint8x8_t v13;
  unint64_t v14;
  uint64_t **v15;
  uint64_t *v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void **v28;
  void **v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  void **v40;
  uint64_t v41;
  __int128 v42;
  unint64_t v43;
  void **v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  __int128 v49;
  char *v50;
  char *v51;
  uint64_t v52;
  char *v53;
  __int128 v54;
  char *v55;
  __int128 v56;
  char *v57;
  uint64_t v58;
  __int128 *v59;
  unint64_t v60;
  __int128 v61;
  unint64_t v62;
  uint64_t v63;
  __int128 *v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  unint64_t v70;
  char *v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  char *v76;
  char *v77;
  char *v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  void *v85;
  size_t v86;
  char v87;
  __int128 v88;
  char *v89;
  char *v90;
  char *v91;
  char *v92;
  _QWORD *v93;

  v6 = (_BYTE *)a2;
  v8 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v9 = v8;
  }
  v10 = sub_19C2A0F2C((uint64_t)&v89, (uint64_t *)a2, v9);
  v11 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v11)
    return;
  v12 = v10;
  v13 = (uint8x8_t)vcnt_s8(v11);
  v13.i16[0] = vaddlv_u8(v13);
  if (v13.u32[0] > 1uLL)
  {
    v14 = v10;
    if (v10 >= *(_QWORD *)&v11)
      v14 = v10 % *(_QWORD *)&v11;
  }
  else
  {
    v14 = (*(_QWORD *)&v11 - 1) & v10;
  }
  v15 = *(uint64_t ***)(*a1 + 8 * v14);
  if (!v15)
    return;
  v16 = *v15;
  if (!*v15)
    return;
  v17 = v6[23];
  if (v17 >= 0)
    v18 = v6[23];
  else
    v18 = *((_QWORD *)v6 + 1);
  if (v17 < 0)
    v6 = *(_BYTE **)v6;
  if (v13.u32[0] < 2uLL)
  {
    v19 = *(_QWORD *)&v11 - 1;
    while (1)
    {
      v24 = v16[1];
      if (v12 == v24)
      {
        v25 = *((unsigned __int8 *)v16 + 39);
        if ((v25 & 0x80u) == 0)
          v26 = *((unsigned __int8 *)v16 + 39);
        else
          v26 = v16[3];
        if (v26 == v18)
        {
          if ((v25 & 0x80) != 0)
          {
            if (!memcmp((const void *)v16[2], v6, v16[3]))
              goto LABEL_51;
          }
          else
          {
            if (!*((_BYTE *)v16 + 39))
              goto LABEL_51;
            v27 = 0;
            while (*((unsigned __int8 *)v16 + v27 + 16) == v6[v27])
            {
              if (v25 == ++v27)
                goto LABEL_50;
            }
          }
        }
      }
      else if ((v24 & v19) != v14)
      {
        return;
      }
      v16 = (uint64_t *)*v16;
      if (!v16)
        return;
    }
  }
  while (1)
  {
    v20 = v16[1];
    if (v12 != v20)
    {
      if (v20 >= *(_QWORD *)&v11)
        v20 %= *(_QWORD *)&v11;
      if (v20 != v14)
        return;
      goto LABEL_19;
    }
    v21 = *((unsigned __int8 *)v16 + 39);
    if ((v21 & 0x80u) == 0)
      v22 = *((unsigned __int8 *)v16 + 39);
    else
      v22 = v16[3];
    if (v22 != v18)
      goto LABEL_19;
    if ((v21 & 0x80) != 0)
      break;
    if (!*((_BYTE *)v16 + 39))
      goto LABEL_51;
    v23 = 0;
    while (*((unsigned __int8 *)v16 + v23 + 16) == v6[v23])
    {
      if (v21 == ++v23)
      {
LABEL_50:
        if (!v16)
          return;
        goto LABEL_51;
      }
    }
LABEL_19:
    v16 = (uint64_t *)*v16;
    if (!v16)
      return;
  }
  if (memcmp((const void *)v16[2], v6, v16[3]))
    goto LABEL_19;
LABEL_51:
  v28 = (void **)v16[5];
  v29 = (void **)v16[6];
  if ((char *)v29 - (char *)v28 >= 1)
  {
    v30 = ((char *)v29 - (char *)v28) / 24;
    v31 = (unint64_t)a4[1];
    v32 = (uint64_t)(v31 - (_QWORD)*a4) / 24;
    v33 = a4[2];
    v34 = (uint64_t)&(*a4)[24 * v32];
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v33[-v31] >> 3)) >= v30)
    {
      v39 = v31 - v34;
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v31 - v34) >> 3)) >= v30)
      {
        v40 = &v28[3 * v30];
        v45 = (unint64_t)a4[1];
      }
      else
      {
        v40 = &v28[(uint64_t)(v31 - v34) >> 3];
        if (v40 == v29)
        {
          v45 = (unint64_t)a4[1];
        }
        else
        {
          v41 = 0;
          do
          {
            v43 = v31 + v41 * 8;
            v44 = &v40[v41];
            if (SHIBYTE(v40[v41 + 2]) < 0)
            {
              sub_19C2B5238((_BYTE *)(v31 + v41 * 8), *v44, (unint64_t)v44[1]);
            }
            else
            {
              v42 = *(_OWORD *)v44;
              *(_QWORD *)(v43 + 16) = v44[2];
              *(_OWORD *)v43 = v42;
            }
            v41 += 3;
          }
          while (&v40[v41] != v29);
          v45 = v31 + v41 * 8;
          v30 = ((char *)v29 - (char *)v28) / 24;
          v39 = v31 - v34;
        }
        a4[1] = (char *)v45;
        if (v39 < 1)
          goto LABEL_103;
      }
      v58 = v34 + 24 * v30;
      v59 = (__int128 *)(v45 - 24 * v30);
      v60 = v45;
      if ((unint64_t)v59 < v31)
      {
        v60 = v45;
        do
        {
          v61 = *v59;
          *(_QWORD *)(v60 + 16) = *((_QWORD *)v59 + 2);
          *(_OWORD *)v60 = v61;
          v60 += 24;
          *((_QWORD *)v59 + 1) = 0;
          *((_QWORD *)v59 + 2) = 0;
          *(_QWORD *)v59 = 0;
          v59 = (__int128 *)((char *)v59 + 24);
        }
        while ((unint64_t)v59 < v31);
      }
      a4[1] = (char *)v60;
      if (v45 != v58)
      {
        v62 = v45 - 24;
        v63 = 8 * ((uint64_t)(v45 - v58) >> 3);
        do
        {
          if (*(char *)(v62 + 23) < 0)
            operator delete(*(void **)v62);
          v64 = (__int128 *)(v34 + v63 - 24);
          v65 = *v64;
          *(_QWORD *)(v62 + 16) = *(_QWORD *)(v34 + v63 - 8);
          *(_OWORD *)v62 = v65;
          v62 -= 24;
          *(_BYTE *)(v34 + v63 - 1) = 0;
          *(_BYTE *)v64 = 0;
          v63 -= 24;
        }
        while (v63);
      }
      for (; v28 != v40; v34 += 24)
      {
        if (v28 != (void **)v34)
        {
          v87 = *((_BYTE *)v28 + 23);
          if (*(char *)(v34 + 23) < 0)
          {
            if (v87 >= 0)
              v85 = v28;
            else
              v85 = *v28;
            if (v87 >= 0)
              v86 = *((unsigned __int8 *)v28 + 23);
            else
              v86 = (size_t)v28[1];
            sub_19C2E54A8((void **)v34, v85, v86);
          }
          else if ((*((_BYTE *)v28 + 23) & 0x80) != 0)
          {
            sub_19C2E53E4((_QWORD *)v34, *v28, (size_t)v28[1]);
          }
          else
          {
            v88 = *(_OWORD *)v28;
            *(_QWORD *)(v34 + 16) = v28[2];
            *(_OWORD *)v34 = v88;
          }
        }
        v28 += 3;
      }
      goto LABEL_103;
    }
    if ((unint64_t)(v32 + v30) > 0xAAAAAAAAAAAAAAALL)
      sub_19C2A18E8();
    v35 = 0xAAAAAAAAAAAAAAABLL * ((v33 - *a4) >> 3);
    v36 = 2 * v35;
    if (2 * v35 <= v32 + v30)
      v36 = v32 + v30;
    if (v35 >= 0x555555555555555)
      v37 = 0xAAAAAAAAAAAAAAALL;
    else
      v37 = v36;
    v93 = a4 + 2;
    if (v37)
    {
      if (v37 > 0xAAAAAAAAAAAAAAALL)
LABEL_138:
        sub_19C2A143C();
      v38 = (char *)operator new(24 * v37);
    }
    else
    {
      v38 = 0;
    }
    v46 = &v38[24 * v32];
    v89 = v38;
    v90 = v46;
    v91 = v46;
    v92 = &v38[24 * v37];
    v47 = 24 * v30;
    v48 = &v46[24 * v30];
    do
    {
      if (*((char *)v28 + 23) < 0)
      {
        sub_19C2B5238(v46, *v28, (unint64_t)v28[1]);
      }
      else
      {
        v49 = *(_OWORD *)v28;
        *((_QWORD *)v46 + 2) = v28[2];
        *(_OWORD *)v46 = v49;
      }
      v46 += 24;
      v28 += 3;
      v47 -= 24;
    }
    while (v47);
    v50 = v90;
    v51 = *a4;
    if (*a4 == (char *)v34)
    {
      v53 = v90;
    }
    else
    {
      v52 = v34;
      do
      {
        v53 = v50 - 24;
        v54 = *(_OWORD *)(v52 - 24);
        *((_QWORD *)v50 - 1) = *(_QWORD *)(v52 - 8);
        *(_OWORD *)(v50 - 24) = v54;
        *(_QWORD *)(v52 - 16) = 0;
        *(_QWORD *)(v52 - 8) = 0;
        *(_QWORD *)(v52 - 24) = 0;
        v50 -= 24;
        v52 -= 24;
      }
      while ((char *)v52 != v51);
    }
    v55 = a4[1];
    if (v55 != (char *)v34)
    {
      do
      {
        v56 = *(_OWORD *)v34;
        *((_QWORD *)v48 + 2) = *(_QWORD *)(v34 + 16);
        *(_OWORD *)v48 = v56;
        v48 += 24;
        *(_QWORD *)(v34 + 8) = 0;
        *(_QWORD *)(v34 + 16) = 0;
        *(_QWORD *)v34 = 0;
        v34 += 24;
      }
      while ((char *)v34 != v55);
      v34 = (uint64_t)a4[1];
    }
    v57 = *a4;
    *a4 = v53;
    a4[1] = v48;
    a4[2] = v92;
    while ((char *)v34 != v57)
    {
      if (*(char *)(v34 - 1) < 0)
        operator delete(*(void **)(v34 - 24));
      v34 -= 24;
    }
    if (v57)
      operator delete(v57);
  }
LABEL_103:
  v66 = v16[5];
  v67 = v16[6];
  if (v66 != v67)
  {
    v68 = (char *)a3[1];
    do
    {
      v70 = (unint64_t)a3[2];
      if ((unint64_t)v68 < v70)
      {
        *(_OWORD *)v68 = xmmword_19C46DE60;
        *((_QWORD *)v68 + 2) = 0;
        *((_WORD *)v68 + 12) = 0;
        v68[32] = 1;
        *(_OWORD *)(v68 + 40) = xmmword_19C46DE10;
        *((_DWORD *)v68 + 14) = 0;
        *((_OWORD *)v68 + 4) = xmmword_19C46DE10;
        *((_QWORD *)v68 + 10) = 0xFFEFFFFFFFFFFFFFLL;
        *((_QWORD *)v68 + 11) = 0;
        *((_QWORD *)v68 + 12) = 0;
        *((_QWORD *)v68 + 13) = 0;
        *((_WORD *)v68 + 56) = 0;
        v69 = v68 + 120;
        *((_DWORD *)v68 + 29) = 9;
      }
      else
      {
        v71 = (char *)*a3;
        v72 = 0xEEEEEEEEEEEEEEEFLL * ((v68 - (_BYTE *)*a3) >> 3);
        v73 = v72 + 1;
        if (v72 + 1 > 0x222222222222222)
          sub_19C2A18E8();
        v74 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v70 - (_QWORD)v71) >> 3);
        if (2 * v74 > v73)
          v73 = 2 * v74;
        if (v74 >= 0x111111111111111)
          v75 = 0x222222222222222;
        else
          v75 = v73;
        if (v75)
        {
          if (v75 > 0x222222222222222)
            goto LABEL_138;
          v76 = (char *)operator new(120 * v75);
        }
        else
        {
          v76 = 0;
        }
        v77 = &v76[120 * v72];
        *(_OWORD *)v77 = xmmword_19C46DE60;
        *((_QWORD *)v77 + 2) = 0;
        *((_WORD *)v77 + 12) = 0;
        v77[32] = 1;
        *(_OWORD *)(v77 + 40) = xmmword_19C46DE10;
        *((_DWORD *)v77 + 14) = 0;
        *((_OWORD *)v77 + 4) = xmmword_19C46DE10;
        *((_QWORD *)v77 + 10) = 0xFFEFFFFFFFFFFFFFLL;
        *((_QWORD *)v77 + 11) = 0;
        *((_QWORD *)v77 + 12) = 0;
        *((_QWORD *)v77 + 13) = 0;
        *((_WORD *)v77 + 56) = 0;
        *((_DWORD *)v77 + 29) = 9;
        v78 = v77;
        if (v68 != v71)
        {
          do
          {
            v79 = *(_OWORD *)(v68 - 120);
            v80 = *(_OWORD *)(v68 - 104);
            v81 = *(_OWORD *)(v68 - 88);
            *(_OWORD *)(v78 - 72) = *(_OWORD *)(v68 - 72);
            *(_OWORD *)(v78 - 88) = v81;
            *(_OWORD *)(v78 - 104) = v80;
            *(_OWORD *)(v78 - 120) = v79;
            v82 = *(_OWORD *)(v68 - 56);
            v83 = *(_OWORD *)(v68 - 40);
            v84 = *(_OWORD *)(v68 - 24);
            *((_QWORD *)v78 - 1) = *((_QWORD *)v68 - 1);
            *(_OWORD *)(v78 - 24) = v84;
            *(_OWORD *)(v78 - 40) = v83;
            *(_OWORD *)(v78 - 56) = v82;
            v78 -= 120;
            v68 -= 120;
          }
          while (v68 != v71);
          v68 = (char *)*a3;
        }
        v69 = v77 + 120;
        *a3 = v78;
        a3[1] = v77 + 120;
        a3[2] = &v76[120 * v75];
        if (v68)
          operator delete(v68);
      }
      a3[1] = v69;
      v66 += 24;
      v68 = v69;
    }
    while (v66 != v67);
  }
}

void sub_19C3C37C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_19C318E40((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_19C3C37E0()
{
  uint64_t v0;
  char *v1;
  char *v2;
  uint64_t v3;
  unsigned __int8 v4;
  int v5;
  uint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  uint64_t **v13;
  uint64_t *v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double result;
  void *v27[3];
  void *v28[2];
  char v29;
  _BYTE v30[40];
  void *v31[2];
  char v32;
  void *v33[3];
  void *v34[2];
  char v35;
  _BYTE v36[40];
  void *v37[2];
  char v38;
  void *v39[3];
  void *v40[2];
  char v41;
  _BYTE v42[40];
  void *v43[2];
  char v44;
  void *v45[3];
  void *v46[2];
  char v47;
  _BYTE v48[40];
  void *v49[2];
  char v50;
  void *v51[3];
  void *v52[2];
  char v53;
  _BYTE v54[40];
  void *v55[2];
  char v56;
  void *v57[3];
  void *v58[2];
  char v59;
  _BYTE v60[40];
  void *v61[2];
  char v62;
  void *v63[3];
  void *v64[2];
  char v65;
  _BYTE v66[40];
  void *v67[2];
  char v68;
  void *v69[3];
  void *v70[2];
  char v71;
  _BYTE v72[40];
  void *v73[2];
  char v74;
  void *v75[3];
  void *v76[2];
  char v77;
  _BYTE v78[40];
  void *v79[2];
  char v80;
  void *v81[3];
  void *v82[2];
  char v83;
  _BYTE v84[40];
  void *v85[2];
  char v86;
  void *v87[3];
  void *v88[2];
  char v89;
  _BYTE v90[40];
  void *v91[2];
  char v92;
  void *v93[3];
  void *v94[2];
  char v95;
  _BYTE v96[40];
  void *v97[2];
  char v98;
  void *v99[3];
  void *v100[2];
  char v101;
  _BYTE v102[40];
  void *v103[2];
  char v104;
  void *v105[3];
  void *v106[2];
  char v107;
  _BYTE v108[40];
  void *v109[2];
  char v110;
  void *v111[3];
  void *v112[2];
  char v113;
  _BYTE v114[40];
  void *v115[2];
  char v116;
  void *v117[3];
  void *v118[2];
  char v119;
  _BYTE v120[40];
  void *v121[2];
  char v122;
  void *v123[3];
  void *v124[2];
  char v125;
  _BYTE v126[40];
  void *v127[2];
  char v128;
  void *v129[3];
  void *v130[2];
  char v131;
  _BYTE v132[40];
  void *v133[2];
  char v134;
  void *v135[2];
  char v136;
  void *v137;
  char v138;
  void *v139;
  char v140;
  _BYTE v141[48];
  void *v142[2];
  char v143;
  void *v144;
  char v145;
  void *v146;
  char v147;
  _BYTE v148[48];
  void *v149[2];
  char v150;
  void *v151;
  char v152;
  void *v153;
  char v154;
  _BYTE v155[48];
  void *v156[2];
  char v157;
  void *v158;
  char v159;
  void *v160;
  char v161;
  _BYTE v162[48];
  void *v163[2];
  char v164;
  void *v165;
  char v166;
  void *v167;
  char v168;
  void *v169;
  char v170;
  void *v171;
  char v172;
  _BYTE v173[48];
  void *v174[2];
  char v175;
  void *v176;
  char v177;
  void *v178;
  char v179;
  void *v180;
  char v181;
  void *v182;
  char v183;
  _BYTE v184[48];
  void *v185[2];
  char v186;
  void *v187;
  char v188;
  void *v189;
  char v190;
  void *v191;
  char v192;
  void *v193;
  char v194;
  _BYTE v195[48];
  void *v196[2];
  char v197;
  void *v198;
  char v199;
  void *v200;
  char v201;
  void *v202;
  char v203;
  void *v204;
  char v205;
  _BYTE v206[48];
  void *v207[2];
  char v208;
  void *v209;
  char v210;
  void *v211;
  char v212;
  void *v213;
  char v214;
  void *v215;
  char v216;
  _BYTE v217[48];
  void *v218[2];
  char v219;
  void *v220;
  char v221;
  void *v222;
  char v223;
  void *v224;
  char v225;
  void *v226;
  char v227;
  _BYTE v228[48];
  void *v229[2];
  char v230;
  void *v231;
  char v232;
  void *v233;
  char v234;
  void *v235;
  char v236;
  void *v237;
  char v238;
  _BYTE v239[48];
  void *v240[2];
  char v241;
  void *v242;
  char v243;
  void *v244;
  char v245;
  void *v246;
  char v247;
  void *v248;
  char v249;
  _BYTE v250[48];
  void *v251[2];
  char v252;
  void *v253;
  char v254;
  void *v255;
  char v256;
  void *v257;
  char v258;
  void *v259;
  char v260;
  _BYTE __dst[48];
  void *v262[2];
  char v263;
  void *v264;
  char v265;
  void *v266;
  char v267;
  void *v268;
  char v269;
  void *__p;
  char v271;
  _BYTE v272[48];
  void *v273[2];
  char v274;
  void *v275;
  char v276;
  void *v277;
  char v278;
  void *v279;
  char v280;
  void *v281;
  char v282;
  _BYTE v283[48];
  void *v284[2];
  char v285;
  void *v286;
  char v287;
  void *v288;
  char v289;
  void *v290;
  char v291;
  void *v292;
  char v293;
  _BYTE v294[48];
  void *v295[2];
  char v296;
  void *v297;
  char v298;
  void *v299;
  char v300;
  void *v301;
  char v302;
  void *v303;
  char v304;
  _BYTE v305[48];
  void *v306[2];
  char v307;
  void *v308;
  char v309;
  void *v310;
  char v311;
  void *v312;
  char v313;
  void *v314;
  char v315;
  _BYTE v316[48];
  _QWORD v317[8];
  _QWORD v318[8];
  _QWORD v319[8];
  _QWORD v320[8];
  _QWORD v321[8];
  _QWORD v322[8];
  _QWORD v323[8];
  _QWORD v324[8];
  _QWORD v325[8];
  _QWORD v326[8];
  _QWORD v327[8];
  _QWORD v328[8];
  _QWORD v329[8];
  _QWORD v330[8];
  _QWORD v331[8];
  _QWORD v332[8];
  _QWORD v333[8];
  _QWORD v334[10];

  v0 = MEMORY[0x1E0C80A78]();
  v2 = v1;
  v3 = v0;
  v334[8] = *MEMORY[0x1E0C80C00];
  v4 = atomic_load((unsigned __int8 *)&qword_1EE41C480);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_1EE41C480))
  {
    sub_19C2A6D48(v133, "hi");
    sub_19C2A6D48(v130, "");
    sub_19C2A6D48(v306, "मैं");
    sub_19C2A6D48(&v308, "वह");
    sub_19C2A6D48(&v310, "आप");
    sub_19C2A6D48(&v312, "क्या");
    sub_19C2A6D48(&v314, "यह");
    sub_19C39D250(v129, (uint64_t)v306, 5uLL);
    sub_19C3C76F8(v316, (__int128 *)v130, (__int128 **)v129);
    sub_19C3C778C((uint64_t)v132, (uint64_t)v316, 1);
    sub_19C3C7804(v317, (__int128 *)v133, (uint64_t)v132);
    sub_19C2A6D48(v127, "bn");
    sub_19C2A6D48(v124, "");
    sub_19C2A6D48(v295, "আমি");
    sub_19C2A6D48(&v297, "সে");
    sub_19C2A6D48(&v299, "আপনি");
    sub_19C2A6D48(&v301, "কি");
    sub_19C2A6D48(&v303, "এটা");
    sub_19C39D250(v123, (uint64_t)v295, 5uLL);
    sub_19C3C76F8(v305, (__int128 *)v124, (__int128 **)v123);
    sub_19C3C778C((uint64_t)v126, (uint64_t)v305, 1);
    sub_19C3C7804(v318, (__int128 *)v127, (uint64_t)v126);
    sub_19C2A6D48(v121, "mr");
    sub_19C2A6D48(v118, "");
    sub_19C2A6D48(v284, "मी");
    sub_19C2A6D48(&v286, "ते");
    sub_19C2A6D48(&v288, "आपण");
    sub_19C2A6D48(&v290, "काय");
    sub_19C2A6D48(&v292, "हे");
    sub_19C39D250(v117, (uint64_t)v284, 5uLL);
    sub_19C3C76F8(v294, (__int128 *)v118, (__int128 **)v117);
    sub_19C3C778C((uint64_t)v120, (uint64_t)v294, 1);
    sub_19C3C7804(v319, (__int128 *)v121, (uint64_t)v120);
    sub_19C2A6D48(v115, "gu");
    sub_19C2A6D48(v112, "");
    sub_19C2A6D48(v273, "હું");
    sub_19C2A6D48(&v275, "તેમણે");
    sub_19C2A6D48(&v277, "શું");
    sub_19C2A6D48(&v279, "મેં");
    sub_19C2A6D48(&v281, "તમે");
    sub_19C39D250(v111, (uint64_t)v273, 5uLL);
    sub_19C3C76F8(v283, (__int128 *)v112, (__int128 **)v111);
    sub_19C3C778C((uint64_t)v114, (uint64_t)v283, 1);
    sub_19C3C7804(v320, (__int128 *)v115, (uint64_t)v114);
    sub_19C2A6D48(v109, "pa");
    sub_19C2A6D48(v106, "");
    sub_19C2A6D48(v262, "ਮੈਨੂੰ");
    sub_19C2A6D48(&v264, "ਉਹ");
    sub_19C2A6D48(&v266, "ਤੁਸੀ");
    sub_19C2A6D48(&v268, "ਕੀ");
    sub_19C2A6D48(&__p, "ਇਹ");
    sub_19C39D250(v105, (uint64_t)v262, 5uLL);
    sub_19C3C76F8(v272, (__int128 *)v106, (__int128 **)v105);
    sub_19C3C778C((uint64_t)v108, (uint64_t)v272, 1);
    sub_19C3C7804(v321, (__int128 *)v109, (uint64_t)v108);
    sub_19C2A6D48(v103, "te");
    sub_19C2A6D48(v100, "");
    sub_19C2A6D48(v251, "అతను");
    sub_19C2A6D48(&v253, "మీరు");
    sub_19C2A6D48(&v255, "ఏమిటి");
    sub_19C2A6D48(&v257, "అవి");
    sub_19C2A6D48(&v259, "ఎప్పుడు");
    sub_19C39D250(v99, (uint64_t)v251, 5uLL);
    sub_19C3C76F8(__dst, (__int128 *)v100, (__int128 **)v99);
    sub_19C3C778C((uint64_t)v102, (uint64_t)__dst, 1);
    sub_19C3C7804(v322, (__int128 *)v103, (uint64_t)v102);
    sub_19C2A6D48(v97, "ta");
    sub_19C2A6D48(v94, "");
    sub_19C2A6D48(v240, "நான்");
    sub_19C2A6D48(&v242, "அவர்");
    sub_19C2A6D48(&v244, "நீங்கள்");
    sub_19C2A6D48(&v246, "என்ன");
    sub_19C2A6D48(&v248, "அது");
    sub_19C39D250(v93, (uint64_t)v240, 5uLL);
    sub_19C3C76F8(v250, (__int128 *)v94, (__int128 **)v93);
    sub_19C3C778C((uint64_t)v96, (uint64_t)v250, 1);
    sub_19C3C7804(v323, (__int128 *)v97, (uint64_t)v96);
    sub_19C2A6D48(v91, "hi-Latn");
    sub_19C2A6D48(v88, "");
    sub_19C2A6D48(v229, "main");
    sub_19C2A6D48(&v231, "woh");
    sub_19C2A6D48(&v233, "aap");
    sub_19C2A6D48(&v235, "kya");
    sub_19C2A6D48(&v237, "yeh");
    sub_19C39D250(v87, (uint64_t)v229, 5uLL);
    sub_19C3C76F8(v239, (__int128 *)v88, (__int128 **)v87);
    sub_19C3C778C((uint64_t)v90, (uint64_t)v239, 1);
    sub_19C3C7804(v324, (__int128 *)v91, (uint64_t)v90);
    sub_19C2A6D48(v85, "bn-Latn");
    sub_19C2A6D48(v82, "");
    sub_19C2A6D48(v218, "ami");
    sub_19C2A6D48(&v220, "se");
    sub_19C2A6D48(&v222, "apni");
    sub_19C2A6D48(&v224, "ki");
    sub_19C2A6D48(&v226, "eta");
    sub_19C39D250(v81, (uint64_t)v218, 5uLL);
    sub_19C3C76F8(v228, (__int128 *)v82, (__int128 **)v81);
    sub_19C3C778C((uint64_t)v84, (uint64_t)v228, 1);
    sub_19C3C7804(v325, (__int128 *)v85, (uint64_t)v84);
    sub_19C2A6D48(v79, "mr-Latn");
    sub_19C2A6D48(v76, "");
    sub_19C2A6D48(v207, "mi");
    sub_19C2A6D48(&v209, "te");
    sub_19C2A6D48(&v211, "aapan");
    sub_19C2A6D48(&v213, "kay");
    sub_19C2A6D48(&v215, "he");
    sub_19C39D250(v75, (uint64_t)v207, 5uLL);
    sub_19C3C76F8(v217, (__int128 *)v76, (__int128 **)v75);
    sub_19C3C778C((uint64_t)v78, (uint64_t)v217, 1);
    sub_19C3C7804(v326, (__int128 *)v79, (uint64_t)v78);
    sub_19C2A6D48(v73, "gu-Latn");
    sub_19C2A6D48(v70, "");
    sub_19C2A6D48(v196, "hun");
    sub_19C2A6D48(&v198, "temane");
    sub_19C2A6D48(&v200, "su");
    sub_19C2A6D48(&v202, "mein");
    sub_19C2A6D48(&v204, "tamein");
    sub_19C39D250(v69, (uint64_t)v196, 5uLL);
    sub_19C3C76F8(v206, (__int128 *)v70, (__int128 **)v69);
    sub_19C3C778C((uint64_t)v72, (uint64_t)v206, 1);
    sub_19C3C7804(v327, (__int128 *)v73, (uint64_t)v72);
    sub_19C2A6D48(v67, "pa-Latn");
    sub_19C2A6D48(v64, "");
    sub_19C2A6D48(v185, "mainu");
    sub_19C2A6D48(&v187, "uh");
    sub_19C2A6D48(&v189, "tusi");
    sub_19C2A6D48(&v191, "ki");
    sub_19C2A6D48(&v193, "ih");
    sub_19C39D250(v63, (uint64_t)v185, 5uLL);
    sub_19C3C76F8(v195, (__int128 *)v64, (__int128 **)v63);
    sub_19C3C778C((uint64_t)v66, (uint64_t)v195, 1);
    sub_19C3C7804(v328, (__int128 *)v67, (uint64_t)v66);
    sub_19C2A6D48(v61, "te-Latn");
    sub_19C2A6D48(v58, "");
    sub_19C2A6D48(v174, "atanu");
    sub_19C2A6D48(&v176, "miru");
    sub_19C2A6D48(&v178, "emiti");
    sub_19C2A6D48(&v180, "avi");
    sub_19C2A6D48(&v182, "eppudu");
    sub_19C39D250(v57, (uint64_t)v174, 5uLL);
    sub_19C3C76F8(v184, (__int128 *)v58, (__int128 **)v57);
    sub_19C3C778C((uint64_t)v60, (uint64_t)v184, 1);
    sub_19C3C7804(v329, (__int128 *)v61, (uint64_t)v60);
    sub_19C2A6D48(v55, "ta-Latn");
    sub_19C2A6D48(v52, "");
    sub_19C2A6D48(v163, "nan");
    sub_19C2A6D48(&v165, "avar");
    sub_19C2A6D48(&v167, "ninkal");
    sub_19C2A6D48(&v169, "enna");
    sub_19C2A6D48(&v171, "atu");
    sub_19C39D250(v51, (uint64_t)v163, 5uLL);
    sub_19C3C76F8(v173, (__int128 *)v52, (__int128 **)v51);
    sub_19C3C778C((uint64_t)v54, (uint64_t)v173, 1);
    sub_19C3C7804(v330, (__int128 *)v55, (uint64_t)v54);
    sub_19C2A6D48(v49, "cs_CZ");
    sub_19C2A6D48(v46, "");
    sub_19C2A6D48(v156, "čau");
    sub_19C2A6D48(&v158, "já");
    sub_19C2A6D48(&v160, "jsem");
    sub_19C39D250(v45, (uint64_t)v156, 3uLL);
    sub_19C3C76F8(v162, (__int128 *)v46, (__int128 **)v45);
    sub_19C3C778C((uint64_t)v48, (uint64_t)v162, 1);
    sub_19C3C7804(v331, (__int128 *)v49, (uint64_t)v48);
    sub_19C2A6D48(v43, "sl_SI");
    sub_19C2A6D48(v40, "");
    sub_19C2A6D48(v149, "ja");
    sub_19C2A6D48(&v151, "ne");
    sub_19C2A6D48(&v153, "v");
    sub_19C39D250(v39, (uint64_t)v149, 3uLL);
    sub_19C3C76F8(v155, (__int128 *)v40, (__int128 **)v39);
    sub_19C3C778C((uint64_t)v42, (uint64_t)v155, 1);
    sub_19C3C7804(v332, (__int128 *)v43, (uint64_t)v42);
    sub_19C2A6D48(v37, "lt_LT");
    sub_19C2A6D48(v34, "");
    sub_19C2A6D48(v142, "aš");
    sub_19C2A6D48(&v144, "man");
    sub_19C2A6D48(&v146, "tu");
    sub_19C39D250(v33, (uint64_t)v142, 3uLL);
    sub_19C3C76F8(v148, (__int128 *)v34, (__int128 **)v33);
    sub_19C3C778C((uint64_t)v36, (uint64_t)v148, 1);
    sub_19C3C7804(v333, (__int128 *)v37, (uint64_t)v36);
    sub_19C2A6D48(v31, "id_ID");
    sub_19C2A6D48(v28, "");
    sub_19C2A6D48(v135, "aku");
    sub_19C2A6D48(&v137, "saya");
    sub_19C2A6D48(&v139, "itu");
    sub_19C39D250(v27, (uint64_t)v135, 3uLL);
    sub_19C3C76F8(v141, (__int128 *)v28, (__int128 **)v27);
    sub_19C3C778C((uint64_t)v30, (uint64_t)v141, 1);
    sub_19C3C7804(v334, (__int128 *)v31, (uint64_t)v30);
    sub_19C3C787C((unsigned __int8 *)v317, 18);
    sub_19C3C7D78((uint64_t)v334);
    sub_19C3C7D78((uint64_t)v333);
    sub_19C3C7D78((uint64_t)v332);
    sub_19C3C7D78((uint64_t)v331);
    sub_19C3C7D78((uint64_t)v330);
    sub_19C3C7D78((uint64_t)v329);
    sub_19C3C7D78((uint64_t)v328);
    sub_19C3C7D78((uint64_t)v327);
    sub_19C3C7D78((uint64_t)v326);
    sub_19C3C7D78((uint64_t)v325);
    sub_19C3C7D78((uint64_t)v324);
    sub_19C3C7D78((uint64_t)v323);
    sub_19C3C7D78((uint64_t)v322);
    sub_19C3C7D78((uint64_t)v321);
    sub_19C3C7D78((uint64_t)v320);
    sub_19C3C7D78((uint64_t)v319);
    sub_19C3C7D78((uint64_t)v318);
    sub_19C3C7D78((uint64_t)v317);
    sub_19C31BF28((uint64_t)v30);
    sub_19C3C7DB0((uint64_t)v141);
    sub_19C307B68(v27);
    if (v140 < 0)
    {
      operator delete(v139);
      if ((v138 & 0x80000000) == 0)
      {
LABEL_60:
        if ((v136 & 0x80000000) == 0)
          goto LABEL_61;
        goto LABEL_199;
      }
    }
    else if ((v138 & 0x80000000) == 0)
    {
      goto LABEL_60;
    }
    operator delete(v137);
    if ((v136 & 0x80000000) == 0)
    {
LABEL_61:
      if ((v29 & 0x80000000) == 0)
        goto LABEL_62;
      goto LABEL_200;
    }
LABEL_199:
    operator delete(v135[0]);
    if ((v29 & 0x80000000) == 0)
    {
LABEL_62:
      if ((v32 & 0x80000000) == 0)
        goto LABEL_63;
LABEL_201:
      operator delete(v31[0]);
LABEL_63:
      sub_19C31BF28((uint64_t)v36);
      sub_19C3C7DB0((uint64_t)v148);
      sub_19C307B68(v33);
      if (v147 < 0)
      {
        operator delete(v146);
        if ((v145 & 0x80000000) == 0)
        {
LABEL_65:
          if ((v143 & 0x80000000) == 0)
            goto LABEL_66;
          goto LABEL_204;
        }
      }
      else if ((v145 & 0x80000000) == 0)
      {
        goto LABEL_65;
      }
      operator delete(v144);
      if ((v143 & 0x80000000) == 0)
      {
LABEL_66:
        if ((v35 & 0x80000000) == 0)
          goto LABEL_67;
        goto LABEL_205;
      }
LABEL_204:
      operator delete(v142[0]);
      if ((v35 & 0x80000000) == 0)
      {
LABEL_67:
        if ((v38 & 0x80000000) == 0)
          goto LABEL_68;
LABEL_206:
        operator delete(v37[0]);
LABEL_68:
        sub_19C31BF28((uint64_t)v42);
        sub_19C3C7DB0((uint64_t)v155);
        sub_19C307B68(v39);
        if (v154 < 0)
        {
          operator delete(v153);
          if ((v152 & 0x80000000) == 0)
          {
LABEL_70:
            if ((v150 & 0x80000000) == 0)
              goto LABEL_71;
            goto LABEL_209;
          }
        }
        else if ((v152 & 0x80000000) == 0)
        {
          goto LABEL_70;
        }
        operator delete(v151);
        if ((v150 & 0x80000000) == 0)
        {
LABEL_71:
          if ((v41 & 0x80000000) == 0)
            goto LABEL_72;
          goto LABEL_210;
        }
LABEL_209:
        operator delete(v149[0]);
        if ((v41 & 0x80000000) == 0)
        {
LABEL_72:
          if ((v44 & 0x80000000) == 0)
            goto LABEL_73;
LABEL_211:
          operator delete(v43[0]);
LABEL_73:
          sub_19C31BF28((uint64_t)v48);
          sub_19C3C7DB0((uint64_t)v162);
          sub_19C307B68(v45);
          if (v161 < 0)
          {
            operator delete(v160);
            if ((v159 & 0x80000000) == 0)
            {
LABEL_75:
              if ((v157 & 0x80000000) == 0)
                goto LABEL_76;
              goto LABEL_214;
            }
          }
          else if ((v159 & 0x80000000) == 0)
          {
            goto LABEL_75;
          }
          operator delete(v158);
          if ((v157 & 0x80000000) == 0)
          {
LABEL_76:
            if ((v47 & 0x80000000) == 0)
              goto LABEL_77;
            goto LABEL_215;
          }
LABEL_214:
          operator delete(v156[0]);
          if ((v47 & 0x80000000) == 0)
          {
LABEL_77:
            if ((v50 & 0x80000000) == 0)
              goto LABEL_78;
LABEL_216:
            operator delete(v49[0]);
LABEL_78:
            sub_19C31BF28((uint64_t)v54);
            sub_19C3C7DB0((uint64_t)v173);
            sub_19C307B68(v51);
            if (v172 < 0)
            {
              operator delete(v171);
              if ((v170 & 0x80000000) == 0)
              {
LABEL_80:
                if ((v168 & 0x80000000) == 0)
                  goto LABEL_81;
                goto LABEL_219;
              }
            }
            else if ((v170 & 0x80000000) == 0)
            {
              goto LABEL_80;
            }
            operator delete(v169);
            if ((v168 & 0x80000000) == 0)
            {
LABEL_81:
              if ((v166 & 0x80000000) == 0)
                goto LABEL_82;
              goto LABEL_220;
            }
LABEL_219:
            operator delete(v167);
            if ((v166 & 0x80000000) == 0)
            {
LABEL_82:
              if ((v164 & 0x80000000) == 0)
                goto LABEL_83;
              goto LABEL_221;
            }
LABEL_220:
            operator delete(v165);
            if ((v164 & 0x80000000) == 0)
            {
LABEL_83:
              if ((v53 & 0x80000000) == 0)
                goto LABEL_84;
              goto LABEL_222;
            }
LABEL_221:
            operator delete(v163[0]);
            if ((v53 & 0x80000000) == 0)
            {
LABEL_84:
              if ((v56 & 0x80000000) == 0)
                goto LABEL_85;
LABEL_223:
              operator delete(v55[0]);
LABEL_85:
              sub_19C31BF28((uint64_t)v60);
              sub_19C3C7DB0((uint64_t)v184);
              sub_19C307B68(v57);
              if (v183 < 0)
              {
                operator delete(v182);
                if ((v181 & 0x80000000) == 0)
                {
LABEL_87:
                  if ((v179 & 0x80000000) == 0)
                    goto LABEL_88;
                  goto LABEL_226;
                }
              }
              else if ((v181 & 0x80000000) == 0)
              {
                goto LABEL_87;
              }
              operator delete(v180);
              if ((v179 & 0x80000000) == 0)
              {
LABEL_88:
                if ((v177 & 0x80000000) == 0)
                  goto LABEL_89;
                goto LABEL_227;
              }
LABEL_226:
              operator delete(v178);
              if ((v177 & 0x80000000) == 0)
              {
LABEL_89:
                if ((v175 & 0x80000000) == 0)
                  goto LABEL_90;
                goto LABEL_228;
              }
LABEL_227:
              operator delete(v176);
              if ((v175 & 0x80000000) == 0)
              {
LABEL_90:
                if ((v59 & 0x80000000) == 0)
                  goto LABEL_91;
                goto LABEL_229;
              }
LABEL_228:
              operator delete(v174[0]);
              if ((v59 & 0x80000000) == 0)
              {
LABEL_91:
                if ((v62 & 0x80000000) == 0)
                  goto LABEL_92;
LABEL_230:
                operator delete(v61[0]);
LABEL_92:
                sub_19C31BF28((uint64_t)v66);
                sub_19C3C7DB0((uint64_t)v195);
                sub_19C307B68(v63);
                if (v194 < 0)
                {
                  operator delete(v193);
                  if ((v192 & 0x80000000) == 0)
                  {
LABEL_94:
                    if ((v190 & 0x80000000) == 0)
                      goto LABEL_95;
                    goto LABEL_233;
                  }
                }
                else if ((v192 & 0x80000000) == 0)
                {
                  goto LABEL_94;
                }
                operator delete(v191);
                if ((v190 & 0x80000000) == 0)
                {
LABEL_95:
                  if ((v188 & 0x80000000) == 0)
                    goto LABEL_96;
                  goto LABEL_234;
                }
LABEL_233:
                operator delete(v189);
                if ((v188 & 0x80000000) == 0)
                {
LABEL_96:
                  if ((v186 & 0x80000000) == 0)
                    goto LABEL_97;
                  goto LABEL_235;
                }
LABEL_234:
                operator delete(v187);
                if ((v186 & 0x80000000) == 0)
                {
LABEL_97:
                  if ((v65 & 0x80000000) == 0)
                    goto LABEL_98;
                  goto LABEL_236;
                }
LABEL_235:
                operator delete(v185[0]);
                if ((v65 & 0x80000000) == 0)
                {
LABEL_98:
                  if ((v68 & 0x80000000) == 0)
                    goto LABEL_99;
LABEL_237:
                  operator delete(v67[0]);
LABEL_99:
                  sub_19C31BF28((uint64_t)v72);
                  sub_19C3C7DB0((uint64_t)v206);
                  sub_19C307B68(v69);
                  if (v205 < 0)
                  {
                    operator delete(v204);
                    if ((v203 & 0x80000000) == 0)
                    {
LABEL_101:
                      if ((v201 & 0x80000000) == 0)
                        goto LABEL_102;
                      goto LABEL_240;
                    }
                  }
                  else if ((v203 & 0x80000000) == 0)
                  {
                    goto LABEL_101;
                  }
                  operator delete(v202);
                  if ((v201 & 0x80000000) == 0)
                  {
LABEL_102:
                    if ((v199 & 0x80000000) == 0)
                      goto LABEL_103;
                    goto LABEL_241;
                  }
LABEL_240:
                  operator delete(v200);
                  if ((v199 & 0x80000000) == 0)
                  {
LABEL_103:
                    if ((v197 & 0x80000000) == 0)
                      goto LABEL_104;
                    goto LABEL_242;
                  }
LABEL_241:
                  operator delete(v198);
                  if ((v197 & 0x80000000) == 0)
                  {
LABEL_104:
                    if ((v71 & 0x80000000) == 0)
                      goto LABEL_105;
                    goto LABEL_243;
                  }
LABEL_242:
                  operator delete(v196[0]);
                  if ((v71 & 0x80000000) == 0)
                  {
LABEL_105:
                    if ((v74 & 0x80000000) == 0)
                      goto LABEL_106;
LABEL_244:
                    operator delete(v73[0]);
LABEL_106:
                    sub_19C31BF28((uint64_t)v78);
                    sub_19C3C7DB0((uint64_t)v217);
                    sub_19C307B68(v75);
                    if (v216 < 0)
                    {
                      operator delete(v215);
                      if ((v214 & 0x80000000) == 0)
                      {
LABEL_108:
                        if ((v212 & 0x80000000) == 0)
                          goto LABEL_109;
                        goto LABEL_247;
                      }
                    }
                    else if ((v214 & 0x80000000) == 0)
                    {
                      goto LABEL_108;
                    }
                    operator delete(v213);
                    if ((v212 & 0x80000000) == 0)
                    {
LABEL_109:
                      if ((v210 & 0x80000000) == 0)
                        goto LABEL_110;
                      goto LABEL_248;
                    }
LABEL_247:
                    operator delete(v211);
                    if ((v210 & 0x80000000) == 0)
                    {
LABEL_110:
                      if ((v208 & 0x80000000) == 0)
                        goto LABEL_111;
                      goto LABEL_249;
                    }
LABEL_248:
                    operator delete(v209);
                    if ((v208 & 0x80000000) == 0)
                    {
LABEL_111:
                      if ((v77 & 0x80000000) == 0)
                        goto LABEL_112;
                      goto LABEL_250;
                    }
LABEL_249:
                    operator delete(v207[0]);
                    if ((v77 & 0x80000000) == 0)
                    {
LABEL_112:
                      if ((v80 & 0x80000000) == 0)
                        goto LABEL_113;
LABEL_251:
                      operator delete(v79[0]);
LABEL_113:
                      sub_19C31BF28((uint64_t)v84);
                      sub_19C3C7DB0((uint64_t)v228);
                      sub_19C307B68(v81);
                      if (v227 < 0)
                      {
                        operator delete(v226);
                        if ((v225 & 0x80000000) == 0)
                        {
LABEL_115:
                          if ((v223 & 0x80000000) == 0)
                            goto LABEL_116;
                          goto LABEL_254;
                        }
                      }
                      else if ((v225 & 0x80000000) == 0)
                      {
                        goto LABEL_115;
                      }
                      operator delete(v224);
                      if ((v223 & 0x80000000) == 0)
                      {
LABEL_116:
                        if ((v221 & 0x80000000) == 0)
                          goto LABEL_117;
                        goto LABEL_255;
                      }
LABEL_254:
                      operator delete(v222);
                      if ((v221 & 0x80000000) == 0)
                      {
LABEL_117:
                        if ((v219 & 0x80000000) == 0)
                          goto LABEL_118;
                        goto LABEL_256;
                      }
LABEL_255:
                      operator delete(v220);
                      if ((v219 & 0x80000000) == 0)
                      {
LABEL_118:
                        if ((v83 & 0x80000000) == 0)
                          goto LABEL_119;
                        goto LABEL_257;
                      }
LABEL_256:
                      operator delete(v218[0]);
                      if ((v83 & 0x80000000) == 0)
                      {
LABEL_119:
                        if ((v86 & 0x80000000) == 0)
                          goto LABEL_120;
LABEL_258:
                        operator delete(v85[0]);
LABEL_120:
                        sub_19C31BF28((uint64_t)v90);
                        sub_19C3C7DB0((uint64_t)v239);
                        sub_19C307B68(v87);
                        if (v238 < 0)
                        {
                          operator delete(v237);
                          if ((v236 & 0x80000000) == 0)
                          {
LABEL_122:
                            if ((v234 & 0x80000000) == 0)
                              goto LABEL_123;
                            goto LABEL_261;
                          }
                        }
                        else if ((v236 & 0x80000000) == 0)
                        {
                          goto LABEL_122;
                        }
                        operator delete(v235);
                        if ((v234 & 0x80000000) == 0)
                        {
LABEL_123:
                          if ((v232 & 0x80000000) == 0)
                            goto LABEL_124;
                          goto LABEL_262;
                        }
LABEL_261:
                        operator delete(v233);
                        if ((v232 & 0x80000000) == 0)
                        {
LABEL_124:
                          if ((v230 & 0x80000000) == 0)
                            goto LABEL_125;
                          goto LABEL_263;
                        }
LABEL_262:
                        operator delete(v231);
                        if ((v230 & 0x80000000) == 0)
                        {
LABEL_125:
                          if ((v89 & 0x80000000) == 0)
                            goto LABEL_126;
                          goto LABEL_264;
                        }
LABEL_263:
                        operator delete(v229[0]);
                        if ((v89 & 0x80000000) == 0)
                        {
LABEL_126:
                          if ((v92 & 0x80000000) == 0)
                            goto LABEL_127;
LABEL_265:
                          operator delete(v91[0]);
LABEL_127:
                          sub_19C31BF28((uint64_t)v96);
                          sub_19C3C7DB0((uint64_t)v250);
                          sub_19C307B68(v93);
                          if (v249 < 0)
                          {
                            operator delete(v248);
                            if ((v247 & 0x80000000) == 0)
                            {
LABEL_129:
                              if ((v245 & 0x80000000) == 0)
                                goto LABEL_130;
                              goto LABEL_268;
                            }
                          }
                          else if ((v247 & 0x80000000) == 0)
                          {
                            goto LABEL_129;
                          }
                          operator delete(v246);
                          if ((v245 & 0x80000000) == 0)
                          {
LABEL_130:
                            if ((v243 & 0x80000000) == 0)
                              goto LABEL_131;
                            goto LABEL_269;
                          }
LABEL_268:
                          operator delete(v244);
                          if ((v243 & 0x80000000) == 0)
                          {
LABEL_131:
                            if ((v241 & 0x80000000) == 0)
                              goto LABEL_132;
                            goto LABEL_270;
                          }
LABEL_269:
                          operator delete(v242);
                          if ((v241 & 0x80000000) == 0)
                          {
LABEL_132:
                            if ((v95 & 0x80000000) == 0)
                              goto LABEL_133;
                            goto LABEL_271;
                          }
LABEL_270:
                          operator delete(v240[0]);
                          if ((v95 & 0x80000000) == 0)
                          {
LABEL_133:
                            if ((v98 & 0x80000000) == 0)
                              goto LABEL_134;
LABEL_272:
                            operator delete(v97[0]);
LABEL_134:
                            sub_19C31BF28((uint64_t)v102);
                            sub_19C3C7DB0((uint64_t)__dst);
                            sub_19C307B68(v99);
                            if (v260 < 0)
                            {
                              operator delete(v259);
                              if ((v258 & 0x80000000) == 0)
                              {
LABEL_136:
                                if ((v256 & 0x80000000) == 0)
                                  goto LABEL_137;
                                goto LABEL_275;
                              }
                            }
                            else if ((v258 & 0x80000000) == 0)
                            {
                              goto LABEL_136;
                            }
                            operator delete(v257);
                            if ((v256 & 0x80000000) == 0)
                            {
LABEL_137:
                              if ((v254 & 0x80000000) == 0)
                                goto LABEL_138;
                              goto LABEL_276;
                            }
LABEL_275:
                            operator delete(v255);
                            if ((v254 & 0x80000000) == 0)
                            {
LABEL_138:
                              if ((v252 & 0x80000000) == 0)
                                goto LABEL_139;
                              goto LABEL_277;
                            }
LABEL_276:
                            operator delete(v253);
                            if ((v252 & 0x80000000) == 0)
                            {
LABEL_139:
                              if ((v101 & 0x80000000) == 0)
                                goto LABEL_140;
                              goto LABEL_278;
                            }
LABEL_277:
                            operator delete(v251[0]);
                            if ((v101 & 0x80000000) == 0)
                            {
LABEL_140:
                              if ((v104 & 0x80000000) == 0)
                                goto LABEL_141;
LABEL_279:
                              operator delete(v103[0]);
LABEL_141:
                              sub_19C31BF28((uint64_t)v108);
                              sub_19C3C7DB0((uint64_t)v272);
                              sub_19C307B68(v105);
                              if (v271 < 0)
                                operator delete(__p);
                              if (v269 < 0)
                                operator delete(v268);
                              if (v267 < 0)
                                operator delete(v266);
                              if (v265 < 0)
                                operator delete(v264);
                              if (v263 < 0)
                              {
                                operator delete(v262[0]);
                                if ((v107 & 0x80000000) == 0)
                                {
LABEL_151:
                                  if ((v110 & 0x80000000) == 0)
                                    goto LABEL_152;
LABEL_282:
                                  operator delete(v109[0]);
LABEL_152:
                                  sub_19C31BF28((uint64_t)v114);
                                  sub_19C3C7DB0((uint64_t)v283);
                                  sub_19C307B68(v111);
                                  if (v282 < 0)
                                    operator delete(v281);
                                  if (v280 < 0)
                                    operator delete(v279);
                                  if (v278 < 0)
                                    operator delete(v277);
                                  if (v276 < 0)
                                    operator delete(v275);
                                  if (v274 < 0)
                                  {
                                    operator delete(v273[0]);
                                    if ((v113 & 0x80000000) == 0)
                                    {
LABEL_162:
                                      if ((v116 & 0x80000000) == 0)
                                        goto LABEL_163;
LABEL_285:
                                      operator delete(v115[0]);
LABEL_163:
                                      sub_19C31BF28((uint64_t)v120);
                                      sub_19C3C7DB0((uint64_t)v294);
                                      sub_19C307B68(v117);
                                      if (v293 < 0)
                                        operator delete(v292);
                                      if (v291 < 0)
                                        operator delete(v290);
                                      if (v289 < 0)
                                        operator delete(v288);
                                      if (v287 < 0)
                                        operator delete(v286);
                                      if (v285 < 0)
                                      {
                                        operator delete(v284[0]);
                                        if ((v119 & 0x80000000) == 0)
                                        {
LABEL_173:
                                          if ((v122 & 0x80000000) == 0)
                                            goto LABEL_174;
LABEL_288:
                                          operator delete(v121[0]);
LABEL_174:
                                          sub_19C31BF28((uint64_t)v126);
                                          sub_19C3C7DB0((uint64_t)v305);
                                          sub_19C307B68(v123);
                                          if (v304 < 0)
                                            operator delete(v303);
                                          if (v302 < 0)
                                            operator delete(v301);
                                          if (v300 < 0)
                                            operator delete(v299);
                                          if (v298 < 0)
                                            operator delete(v297);
                                          if (v296 < 0)
                                          {
                                            operator delete(v295[0]);
                                            if ((v125 & 0x80000000) == 0)
                                            {
LABEL_184:
                                              if ((v128 & 0x80000000) == 0)
                                                goto LABEL_185;
LABEL_291:
                                              operator delete(v127[0]);
LABEL_185:
                                              sub_19C31BF28((uint64_t)v132);
                                              sub_19C3C7DB0((uint64_t)v316);
                                              sub_19C307B68(v129);
                                              if (v315 < 0)
                                                operator delete(v314);
                                              if (v313 < 0)
                                                operator delete(v312);
                                              if (v311 < 0)
                                                operator delete(v310);
                                              if (v309 < 0)
                                                operator delete(v308);
                                              if (v307 < 0)
                                              {
                                                operator delete(v306[0]);
                                                if ((v131 & 0x80000000) == 0)
                                                {
LABEL_195:
                                                  if ((v134 & 0x80000000) == 0)
                                                  {
LABEL_196:
                                                    __cxa_guard_release(&qword_1EE41C480);
                                                    goto LABEL_2;
                                                  }
LABEL_294:
                                                  operator delete(v133[0]);
                                                  goto LABEL_196;
                                                }
                                              }
                                              else if ((v131 & 0x80000000) == 0)
                                              {
                                                goto LABEL_195;
                                              }
                                              operator delete(v130[0]);
                                              if ((v134 & 0x80000000) == 0)
                                                goto LABEL_196;
                                              goto LABEL_294;
                                            }
                                          }
                                          else if ((v125 & 0x80000000) == 0)
                                          {
                                            goto LABEL_184;
                                          }
                                          operator delete(v124[0]);
                                          if ((v128 & 0x80000000) == 0)
                                            goto LABEL_185;
                                          goto LABEL_291;
                                        }
                                      }
                                      else if ((v119 & 0x80000000) == 0)
                                      {
                                        goto LABEL_173;
                                      }
                                      operator delete(v118[0]);
                                      if ((v122 & 0x80000000) == 0)
                                        goto LABEL_174;
                                      goto LABEL_288;
                                    }
                                  }
                                  else if ((v113 & 0x80000000) == 0)
                                  {
                                    goto LABEL_162;
                                  }
                                  operator delete(v112[0]);
                                  if ((v116 & 0x80000000) == 0)
                                    goto LABEL_163;
                                  goto LABEL_285;
                                }
                              }
                              else if ((v107 & 0x80000000) == 0)
                              {
                                goto LABEL_151;
                              }
                              operator delete(v106[0]);
                              if ((v110 & 0x80000000) == 0)
                                goto LABEL_152;
                              goto LABEL_282;
                            }
LABEL_278:
                            operator delete(v100[0]);
                            if ((v104 & 0x80000000) == 0)
                              goto LABEL_141;
                            goto LABEL_279;
                          }
LABEL_271:
                          operator delete(v94[0]);
                          if ((v98 & 0x80000000) == 0)
                            goto LABEL_134;
                          goto LABEL_272;
                        }
LABEL_264:
                        operator delete(v88[0]);
                        if ((v92 & 0x80000000) == 0)
                          goto LABEL_127;
                        goto LABEL_265;
                      }
LABEL_257:
                      operator delete(v82[0]);
                      if ((v86 & 0x80000000) == 0)
                        goto LABEL_120;
                      goto LABEL_258;
                    }
LABEL_250:
                    operator delete(v76[0]);
                    if ((v80 & 0x80000000) == 0)
                      goto LABEL_113;
                    goto LABEL_251;
                  }
LABEL_243:
                  operator delete(v70[0]);
                  if ((v74 & 0x80000000) == 0)
                    goto LABEL_106;
                  goto LABEL_244;
                }
LABEL_236:
                operator delete(v64[0]);
                if ((v68 & 0x80000000) == 0)
                  goto LABEL_99;
                goto LABEL_237;
              }
LABEL_229:
              operator delete(v58[0]);
              if ((v62 & 0x80000000) == 0)
                goto LABEL_92;
              goto LABEL_230;
            }
LABEL_222:
            operator delete(v52[0]);
            if ((v56 & 0x80000000) == 0)
              goto LABEL_85;
            goto LABEL_223;
          }
LABEL_215:
          operator delete(v46[0]);
          if ((v50 & 0x80000000) == 0)
            goto LABEL_78;
          goto LABEL_216;
        }
LABEL_210:
        operator delete(v40[0]);
        if ((v44 & 0x80000000) == 0)
          goto LABEL_73;
        goto LABEL_211;
      }
LABEL_205:
      operator delete(v34[0]);
      if ((v38 & 0x80000000) == 0)
        goto LABEL_68;
      goto LABEL_206;
    }
LABEL_200:
    operator delete(v28[0]);
    if ((v32 & 0x80000000) == 0)
      goto LABEL_63;
    goto LABEL_201;
  }
LABEL_2:
  v5 = v2[23];
  if (v5 >= 0)
    v6 = (uint64_t *)v2;
  else
    v6 = *(uint64_t **)v2;
  if (v5 >= 0)
    v7 = v2[23];
  else
    v7 = *((_QWORD *)v2 + 1);
  v8 = sub_19C2A0F2C((uint64_t)v317, v6, v7);
  v9 = *((_QWORD *)&xmmword_1EE41C458 + 1);
  if (*((_QWORD *)&xmmword_1EE41C458 + 1))
  {
    v10 = v8;
    v11 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_1EE41C458 + 8));
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v12 = v8;
      if (v8 >= *((_QWORD *)&xmmword_1EE41C458 + 1))
        v12 = v8 % *((_QWORD *)&xmmword_1EE41C458 + 1);
    }
    else
    {
      v12 = (*((_QWORD *)&xmmword_1EE41C458 + 1) - 1) & v8;
    }
    v13 = *(uint64_t ***)(xmmword_1EE41C458 + 8 * v12);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        v15 = v2[23];
        if (v15 >= 0)
          v16 = v2[23];
        else
          v16 = *((_QWORD *)v2 + 1);
        if (v15 < 0)
          v2 = *(char **)v2;
        if (v11.u32[0] < 2uLL)
        {
          v17 = *((_QWORD *)&xmmword_1EE41C458 + 1) - 1;
          while (1)
          {
            v22 = v14[1];
            if (v10 == v22)
            {
              v23 = *((unsigned __int8 *)v14 + 39);
              if ((v23 & 0x80u) == 0)
                v24 = *((unsigned __int8 *)v14 + 39);
              else
                v24 = v14[3];
              if (v24 == v16)
              {
                if ((v23 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v14[2], v2, v14[3]))
                    goto LABEL_55;
                }
                else
                {
                  if (!*((_BYTE *)v14 + 39))
                    goto LABEL_55;
                  v25 = 0;
                  while (*((unsigned __int8 *)v14 + v25 + 16) == v2[v25])
                  {
                    if (v23 == ++v25)
                      goto LABEL_54;
                  }
                }
              }
            }
            else if ((v22 & v17) != v12)
            {
              goto LABEL_56;
            }
            v14 = (uint64_t *)*v14;
            if (!v14)
              goto LABEL_56;
          }
        }
        do
        {
          v18 = v14[1];
          if (v10 == v18)
          {
            v19 = *((unsigned __int8 *)v14 + 39);
            if ((v19 & 0x80u) == 0)
              v20 = *((unsigned __int8 *)v14 + 39);
            else
              v20 = v14[3];
            if (v20 == v16)
            {
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp((const void *)v14[2], v2, v14[3]))
                {
LABEL_55:
                  sub_19C3C7E30(v3, (uint64_t)(v14 + 5));
                  return result;
                }
              }
              else
              {
                if (!*((_BYTE *)v14 + 39))
                  goto LABEL_55;
                v21 = 0;
                while (*((unsigned __int8 *)v14 + v21 + 16) == v2[v21])
                {
                  if (v19 == ++v21)
                  {
LABEL_54:
                    if (!v14)
                      goto LABEL_56;
                    goto LABEL_55;
                  }
                }
              }
            }
          }
          else
          {
            if (v18 >= v9)
              v18 %= v9;
            if (v18 != v12)
              break;
          }
          v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_56:
  result = 0.0;
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_DWORD *)(v3 + 32) = 1065353216;
  return result;
}

