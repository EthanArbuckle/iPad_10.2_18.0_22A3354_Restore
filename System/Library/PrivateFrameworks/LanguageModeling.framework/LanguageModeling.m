void sub_19C292F80(uint64_t a1)
{
  sub_19C294548(*(_QWORD *)(a1 + 32) + 8, *(const __CFString **)(a1 + 40), *(_QWORD *)(a1 + 48));
}

uint64_t sub_19C292F94(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 16))(a1 + 16);
}

uint64_t sub_19C292FA0(uint64_t result)
{
  *(_QWORD *)(result + 16) = &off_1E3D33968;
  return result;
}

uint64_t language_modeling::v1::LanguageModel::deallocateInternalBuffers(language_modeling::v1::LanguageModel *this)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)this + 128))(*(_QWORD *)this);
}

uint64_t language_modeling::v1::LanguageModel::wireMemory(language_modeling::v1::LanguageModel *this)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)this + 112))(*(_QWORD *)this);
}

void sub_19C2931F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  _BYTE *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  char *v17;
  char *v18;
  unint64_t v19;
  char *v20;
  __int128 *v21;
  unint64_t v22;
  __int128 v23;
  unint64_t v24;
  _BYTE *v25;
  char *v26;
  uint64_t *v27;
  uint64_t v28;
  char *v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  int v36;
  unsigned int v37;
  int v38;
  unsigned int v39;
  unint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  char *v44;
  int v45;
  int v46;
  int v47;
  int v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  _BYTE *v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  __int128 v58;
  _OWORD *v59;
  int v60;
  uint64_t v61;
  int v62;
  char *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char *v68;
  int v69;
  _DWORD *v70;
  _DWORD *v71;
  unint64_t v72;
  uint64_t v73;
  _OWORD *v74;
  char *v75;
  uint64_t v76;
  __int128 v77;
  int v78;
  __int128 v79;
  char *v80;
  char *v81;
  __int128 v82;
  BOOL v83;
  uint64_t v84;
  unint64_t v85;
  char *v86;
  __int128 v87;
  char *v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  char *v95;
  __int128 v96;
  char *v97;
  char *v98;
  __int128 v99;
  unint64_t v100;
  uint64_t v101;
  _DWORD *v102;
  char *v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  char *v108;
  char *v109;
  char *v110;
  __int128 v111;
  BOOL v112;
  uint64_t v113;
  unint64_t v114;
  char *v115;
  uint64_t v116;
  _DWORD *v117;
  char *v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  unint64_t v122;
  char *v123;
  char *v124;
  char *v125;
  __int128 v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  _QWORD *i;
  uint64_t v136;
  CFIndex v137;
  const __CFString *v138;
  const __CFString *v139;
  __CFStringTokenizer *v140;
  CFRange CurrentTokenRange;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  char *v147;
  _QWORD *v148;
  char *v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t v152;
  char *v153;
  char *v154;
  char *v155;
  unint64_t v156;
  __int128 v157;
  unint64_t v158;
  char *v159;
  char *v160;
  uint64_t v161;
  _BYTE *v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  unint64_t v166;
  char *v167;
  char *v168;
  char *v169;
  __int128 v170;
  unint64_t v171;
  char *v172;
  _DWORD *v173;
  char *v174;
  uint64_t v175;
  unint64_t v176;
  uint64_t v177;
  unint64_t v178;
  _BYTE *v179;
  int *v180;
  unint64_t v181;
  uint64_t v182;
  _OWORD *v183;
  char *v184;
  uint64_t v185;
  __int128 v186;
  int v187;
  uint64_t v188;
  uint64_t v189;
  unint64_t v190;
  uint64_t v191;
  const __CFAllocator *contentsDeallocator;
  _OWORD *v193;
  _OWORD *v194;
  CFRange v198;

  if (*(_QWORD *)(a1 + 184) - *(_QWORD *)(a1 + 176) <= 0xFFFFFFFEuLL && a3 >= 1)
  {
    v5 = a4;
    v7 = 0;
    v193 = (_OWORD *)(a1 + 280);
    v194 = (_OWORD *)(a1 + 296);
    contentsDeallocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE20];
    while (1)
    {
      LODWORD(v8) = *(_DWORD *)(a1 + 312);
      v10 = *(_BYTE **)(a1 + 184);
      v9 = *(_QWORD *)(a1 + 192);
      if ((unint64_t)v10 < v9)
      {
        *v10 = *(_BYTE *)(a2 + v7);
        v11 = (uint64_t)(v10 + 1);
        goto LABEL_41;
      }
      v12 = *(_BYTE **)(a1 + 176);
      v13 = v10 - v12;
      v14 = v10 - v12 + 1;
      if (v14 < 0)
        sub_19C2A18E8();
      v15 = v9 - (_QWORD)v12;
      if (2 * v15 > v14)
        v14 = 2 * v15;
      v16 = v15 >= 0x3FFFFFFFFFFFFFFFLL ? 0x7FFFFFFFFFFFFFFFLL : v14;
      v17 = v16 ? (char *)operator new(v16) : 0;
      v18 = &v17[v13];
      v17[v13] = *(_BYTE *)(a2 + v7);
      v11 = (uint64_t)&v17[v13 + 1];
      if (v10 != v12)
        break;
LABEL_39:
      *(_QWORD *)(a1 + 176) = v18;
      *(_QWORD *)(a1 + 184) = v11;
      *(_QWORD *)(a1 + 192) = &v17[v16];
      if (v10)
        operator delete(v10);
LABEL_41:
      *(_QWORD *)(a1 + 184) = v11;
      v31 = *(_QWORD *)(a1 + 176);
      v32 = *(int *)(a1 + 312);
      v33 = v32 + 1;
      *(_DWORD *)(a1 + 312) = v32 + 1;
      v34 = *(unsigned __int8 *)(v31 + v32);
      if ((v34 & 0x80) != 0)
      {
        v35 = v11 - v31;
        if ((_DWORD)v33 == (_DWORD)v11 - (_DWORD)v31)
          goto LABEL_58;
        if (v34 < 0xE0)
        {
          if (v34 < 0xC2)
            goto LABEL_58;
          v38 = v34 & 0x1F;
        }
        else
        {
          if (v34 > 0xEF)
          {
            if (v34 > 0xF4
              || (v40 = *(unsigned __int8 *)(v31 + v33),
                  ((byte_19C477FF9[v40 >> 4] >> (v34 + 16)) & 1) == 0)
              || (v33 = v32 + 2, *(_DWORD *)(a1 + 312) = v32 + 2, (_DWORD)v32 + 2 == v35)
              || (v37 = *(unsigned __int8 *)(v31 + v33) ^ 0x80, v37 > 0x3F))
            {
LABEL_58:
              v34 = -1;
              goto LABEL_59;
            }
            v36 = v40 & 0x3F | ((v34 - 240) << 6);
          }
          else
          {
            v36 = v34 & 0xF;
            if (((a00000000000000[v34 & 0xF] >> (*(_BYTE *)(v31 + v33) >> 5)) & 1) == 0)
              goto LABEL_58;
            v37 = *(_BYTE *)(v31 + v33) & 0x3F;
          }
          LODWORD(v33) = v33 + 1;
          *(_DWORD *)(a1 + 312) = v33;
          if ((_DWORD)v33 == v35)
            goto LABEL_58;
          v38 = v37 | (v36 << 6);
        }
        v39 = *(unsigned __int8 *)(v31 + (int)v33) ^ 0x80;
        if (v39 > 0x3F)
          goto LABEL_58;
        v34 = v39 | (v38 << 6);
        *(_DWORD *)(a1 + 312) = v33 + 1;
      }
LABEL_59:
      v42 = *(char **)(a1 + 256);
      v41 = *(char **)(a1 + 264);
      v43 = v41 - v42;
      if (v41 == v42)
      {
        v45 = 0;
        if (v34 < 0)
          goto LABEL_69;
        goto LABEL_64;
      }
      v44 = *(char **)(a1 + 264);
      do
      {
        if (v44 == v42)
        {
          v45 = 0;
          if (v34 < 0)
            goto LABEL_69;
LABEL_64:
          v8 = (int)v8;
          if (!v34)
          {
            v48 = 0;
            v47 = 0;
            goto LABEL_83;
          }
          if (((1 << u_charType(v34)) & 0x7000) != 0)
          {
            if (v45)
            {
              v47 = 0;
              v48 = 9;
              goto LABEL_83;
            }
            v48 = 0;
            v69 = 0;
LABEL_225:
            v128 = *(_QWORD *)(a1 + 200);
            v127 = *(_QWORD *)(a1 + 208);
            if (v127 != v128)
            {
              v129 = *(_QWORD *)(a1 + 224);
              v130 = *(_QWORD *)(a1 + 232);
              if (v129 == v130
                || *(_QWORD *)(v127 - 16) + *(_QWORD *)(v127 - 24) > *(_QWORD *)(v130 - 16) + *(_QWORD *)(v130 - 24))
              {
                if (*(_QWORD *)(a1 + 8))
                {
                  if ((v45 - 1) <= 1)
                  {
                    if (v129 != v130)
                    {
                      v131 = v129 + 32 * *(_QWORD *)(a1 + 248);
                      v133 = *(_QWORD *)(v131 + 8);
                      v132 = *(_QWORD *)(v131 + 16);
                      v134 = v132 + v133;
                      for (i = (_QWORD *)(v128 + 16); ; i += 4)
                      {
                        v136 = *(i - 1);
                        if (v136 >= v134 || *i + v136 > v134)
                        {
                          if (v136 != v133)
                          {
                            v133 = *(i - 1);
                            goto LABEL_243;
                          }
                          if (*i != v132)
                            goto LABEL_243;
                        }
                      }
                    }
                    v133 = *(_QWORD *)(v128 + 8);
LABEL_243:
                    v137 = *(_QWORD *)(v127 - 24) - v133 + *(_QWORD *)(v127 - 16);
                    v138 = CFStringCreateWithBytesNoCopy(0, (const UInt8 *)(*(_QWORD *)(a1 + 176) + v133), v137, *(_DWORD *)(a1 + 16), 0, contentsDeallocator);
                    if (v138)
                    {
                      v139 = v138;
                      v140 = *(__CFStringTokenizer **)(a1 + 8);
                      v198.length = CFStringGetLength(v138);
                      v198.location = 0;
                      CFStringTokenizerSetString(v140, v139, v198);
                      while (CFStringTokenizerAdvanceToNextToken(*(CFStringTokenizerRef *)(a1 + 8)))
                      {
                        CurrentTokenRange = CFStringTokenizerGetCurrentTokenRange((CFStringTokenizerRef)*(_QWORD *)(a1 + 8));
                        v142 = sub_19C34E4B4(v139, CurrentTokenRange.location, CurrentTokenRange.length, (char *)(*(_QWORD *)(a1 + 176) + v133), v137, *(_DWORD *)(a1 + 16));
                        if (v142 != -1)
                        {
                          v144 = v143;
                          v191 = v8;
                          v145 = v142 + v133;
                          v147 = *(char **)(a1 + 232);
                          v146 = *(_QWORD *)(a1 + 240);
                          if ((unint64_t)v147 >= v146)
                          {
                            v149 = *(char **)(a1 + 224);
                            v150 = (v147 - v149) >> 5;
                            v151 = v150 + 1;
                            if ((unint64_t)(v150 + 1) >> 59)
                              goto LABEL_364;
                            v152 = v146 - (_QWORD)v149;
                            if (v152 >> 4 > v151)
                              v151 = v152 >> 4;
                            if ((unint64_t)v152 >= 0x7FFFFFFFFFFFFFE0)
                              v151 = 0x7FFFFFFFFFFFFFFLL;
                            v190 = v151;
                            if (v151)
                            {
                              v189 = v142 + v133;
                              if (v151 >> 59)
                                goto LABEL_361;
                              v153 = (char *)operator new(32 * v151);
                              v150 = (v147 - v149) >> 5;
                              v145 = v189;
                            }
                            else
                            {
                              v153 = 0;
                            }
                            v154 = &v153[32 * v150];
                            *(_DWORD *)v154 = 0;
                            *((_QWORD *)v154 + 1) = v145;
                            *((_QWORD *)v154 + 2) = v144;
                            *((_QWORD *)v154 + 3) = -1;
                            v155 = v154;
                            if (v147 == v149)
                            {
                              v156 = v190;
                            }
                            else
                            {
                              v156 = v190;
                              do
                              {
                                v157 = *((_OWORD *)v147 - 1);
                                *((_OWORD *)v155 - 2) = *((_OWORD *)v147 - 2);
                                *((_OWORD *)v155 - 1) = v157;
                                v155 -= 32;
                                v147 -= 32;
                              }
                              while (v147 != v149);
                              v147 = *(char **)(a1 + 224);
                            }
                            v148 = v154 + 32;
                            *(_QWORD *)(a1 + 224) = v155;
                            *(_QWORD *)(a1 + 232) = v154 + 32;
                            *(_QWORD *)(a1 + 240) = &v153[32 * v156];
                            if (v147)
                              operator delete(v147);
                          }
                          else
                          {
                            *(_DWORD *)v147 = 0;
                            *((_QWORD *)v147 + 1) = v145;
                            *((_QWORD *)v147 + 2) = v143;
                            v148 = v147 + 32;
                            *((_QWORD *)v147 + 3) = -1;
                          }
                          v5 = a4;
                          *(_QWORD *)(a1 + 232) = v148;
                          v133 += v144;
                          v137 -= v144;
                          v8 = v191;
                        }
                      }
                      CFRelease(v139);
                    }
                  }
LABEL_267:
                  sub_19C3AFCD0(a1, v5);
                }
                else if (!v48 || v48 == 9)
                {
                  goto LABEL_267;
                }
              }
            }
            if ((v45 & 0xFFFFFFF7) == 0 || v69)
              goto LABEL_288;
            v159 = *(char **)(a1 + 208);
            v158 = *(_QWORD *)(a1 + 216);
            if ((unint64_t)v159 < v158)
            {
              *(_DWORD *)v159 = 2;
              *((_QWORD *)v159 + 1) = v8;
              v160 = v159 + 32;
              *((_OWORD *)v159 + 1) = xmmword_19C46D660;
              goto LABEL_287;
            }
            v161 = v8;
            v162 = *(_BYTE **)(a1 + 200);
            v163 = (v159 - v162) >> 5;
            v164 = v163 + 1;
            if (!((unint64_t)(v163 + 1) >> 59))
            {
              v165 = v158 - (_QWORD)v162;
              if (v165 >> 4 > v164)
                v164 = v165 >> 4;
              if ((unint64_t)v165 >= 0x7FFFFFFFFFFFFFE0)
                v166 = 0x7FFFFFFFFFFFFFFLL;
              else
                v166 = v164;
              if (!v166)
              {
                v167 = 0;
                goto LABEL_282;
              }
              if (!(v166 >> 59))
              {
                v167 = (char *)operator new(32 * v166);
LABEL_282:
                v168 = &v167[32 * v163];
                *(_DWORD *)v168 = 2;
                *((_QWORD *)v168 + 1) = v161;
                *((_OWORD *)v168 + 1) = xmmword_19C46D660;
                v169 = v168;
                if (v159 != v162)
                {
                  do
                  {
                    v170 = *((_OWORD *)v159 - 1);
                    *((_OWORD *)v169 - 2) = *((_OWORD *)v159 - 2);
                    *((_OWORD *)v169 - 1) = v170;
                    v169 -= 32;
                    v159 -= 32;
                  }
                  while (v159 != v162);
                  v159 = *(char **)(a1 + 200);
                }
                v160 = v168 + 32;
                *(_QWORD *)(a1 + 200) = v169;
                *(_QWORD *)(a1 + 208) = v168 + 32;
                *(_QWORD *)(a1 + 216) = &v167[32 * v166];
                if (v159)
                  operator delete(v159);
LABEL_287:
                *(_QWORD *)(a1 + 208) = v160;
                sub_19C3AFCD0(a1, v5);
LABEL_288:
                v172 = *(char **)(a1 + 264);
                v171 = *(_QWORD *)(a1 + 272);
                if ((unint64_t)v172 < v171)
                {
                  *(_DWORD *)v172 = v69;
                  v173 = v172 + 4;
LABEL_309:
                  *(_QWORD *)(a1 + 264) = v173;
                  v188 = *(_QWORD *)(a1 + 288);
                  if (v188 != -1)
                    *(_QWORD *)(a1 + 296) = *(int *)(a1 + 312) - v188;
                  goto LABEL_8;
                }
                v174 = *(char **)(a1 + 256);
                v175 = (v172 - v174) >> 2;
                v176 = v175 + 1;
                if ((unint64_t)(v175 + 1) >> 62)
LABEL_363:
                  sub_19C2A18E8();
                v177 = v171 - (_QWORD)v174;
                if (v177 >> 1 > v176)
                  v176 = v177 >> 1;
                if ((unint64_t)v177 >= 0x7FFFFFFFFFFFFFFCLL)
                  v178 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v178 = v176;
                if (!v178)
                {
                  v179 = 0;
LABEL_300:
                  v180 = (int *)&v179[4 * v175];
                  *v180 = v69;
                  v173 = v180 + 1;
                  if (v172 != v174)
                  {
                    v181 = v172 - 4 - v174;
                    if (v181 < 0x2C)
                      goto LABEL_367;
                    if ((unint64_t)(v174 - v179) < 0x20)
                      goto LABEL_367;
                    v182 = (v181 >> 2) + 1;
                    v183 = &v179[4 * v175 - 16];
                    v184 = v172 - 16;
                    v185 = v182 & 0x7FFFFFFFFFFFFFF8;
                    do
                    {
                      v186 = *(_OWORD *)v184;
                      *(v183 - 1) = *((_OWORD *)v184 - 1);
                      *v183 = v186;
                      v183 -= 2;
                      v184 -= 32;
                      v185 -= 8;
                    }
                    while (v185);
                    v180 -= v182 & 0x7FFFFFFFFFFFFFF8;
                    v172 -= 4 * (v182 & 0x7FFFFFFFFFFFFFF8);
                    if (v182 != (v182 & 0x7FFFFFFFFFFFFFF8))
                    {
LABEL_367:
                      do
                      {
                        v187 = *((_DWORD *)v172 - 1);
                        v172 -= 4;
                        *--v180 = v187;
                      }
                      while (v172 != v174);
                    }
                  }
                  *(_QWORD *)(a1 + 256) = v180;
                  *(_QWORD *)(a1 + 264) = v173;
                  *(_QWORD *)(a1 + 272) = &v179[4 * v178];
                  if (v174)
                    operator delete(v174);
                  goto LABEL_309;
                }
                if (!(v178 >> 62))
                {
                  v179 = operator new(4 * v178);
                  goto LABEL_300;
                }
              }
LABEL_361:
              sub_19C2A143C();
            }
LABEL_364:
            sub_19C2A18E8();
          }
          v47 = 0;
          v48 = 12;
          if ((v34 - 127995) >= 5 && v34 != 65039)
          {
            if ((v34 & 0xFFFFFFFE) == 0x200C)
            {
              v47 = 0;
              v48 = 14;
              goto LABEL_314;
            }
            v48 = 1;
            if (((1 << u_charType(v34)) & 0x40001FE) != 0)
            {
              v47 = 0;
              goto LABEL_314;
            }
            if (((1 << u_charType(v34)) & 0x78001) != 0)
            {
              v48 = 0;
              v47 = 1;
              goto LABEL_314;
            }
            if ((v34 & 0xFFFFFFFE) == 0xFFFC)
            {
              v47 = 0;
              v48 = 10;
              goto LABEL_314;
            }
            v47 = 0;
            v48 = 3;
            if (v34 > 1522)
            {
              v8 = (int)v8;
              if (((v34 - 8208) > 9 || ((1 << (v34 - 16)) & 0x20B) == 0)
                && (v34 - 1523) >= 2)
              {
                goto LABEL_323;
              }
              goto LABEL_83;
            }
            v8 = (int)v8;
            if ((v34 - 38) <= 0x3A && ((1 << (v34 - 38)) & 0x400000000000083) != 0
              || v34 == 699)
            {
              goto LABEL_83;
            }
LABEL_323:
            if (((1 << u_charType(v34)) & 0xE00) != 0)
            {
              v47 = 0;
              v48 = 2;
              goto LABEL_83;
            }
            if (v34 > 7293)
            {
              if (v34 > 12289)
              {
                if (v34 <= 44010)
                {
                  if (v34 != 12290)
                  {
                    if (v34 == 43760)
                      goto LABEL_353;
                    goto LABEL_356;
                  }
                }
                else
                {
                  if (v34 == 44011)
                    goto LABEL_353;
                  if (v34 != 65281 && v34 != 65311)
                    goto LABEL_356;
                }
                v47 = 0;
                v48 = 8;
                goto LABEL_83;
              }
              if ((v34 - 7294) < 2 || (v34 - 8252) < 2)
                goto LABEL_353;
              if (v34 == 8230)
              {
                v47 = 0;
                v48 = 7;
                goto LABEL_83;
              }
            }
            else if (v34 > 3571)
            {
              if ((v34 - 6100) <= 6 && ((1 << (v34 + 44)) & 0x43) != 0
                || (v34 - 4170) < 2
                || v34 == 3572)
              {
                goto LABEL_353;
              }
            }
            else
            {
              if (v34 <= 1566)
              {
                if (v34 == 33)
                  goto LABEL_353;
                if (v34 != 46)
                {
                  v8 = (int)v8;
                  if (v34 != 63)
                    goto LABEL_356;
LABEL_353:
                  v47 = 0;
                  v48 = 5;
                  goto LABEL_83;
                }
                v47 = 0;
                v48 = 6;
LABEL_314:
                v8 = (int)v8;
                goto LABEL_83;
              }
              if ((v34 - 2404) < 2 || v34 == 1567)
                goto LABEL_353;
            }
LABEL_356:
            if ((v34 - 127462) >= 0x1A)
            {
              v47 = 0;
              if (sub_19C34E42C(v34))
                v48 = 11;
              else
                v48 = 4;
            }
            else
            {
              v47 = 0;
              v48 = 13;
            }
            goto LABEL_314;
          }
LABEL_83:
          switch(v45)
          {
            case 0:
              goto LABEL_202;
            case 1:
            case 2:
            case 3:
            case 4:
            case 7:
            case 10:
            case 11:
            case 12:
            case 13:
            case 14:
              if (v48)
                goto LABEL_85;
              goto LABEL_86;
            case 5:
            case 6:
              if (v48 == 9)
                v47 = 1;
              if (!v48)
                goto LABEL_86;
LABEL_85:
              if (v48 != 9)
              {
                switch(v45)
                {
                  case 1:
                    if (((1 << v48) & 0x400E) == 0)
                      break;
                    goto LABEL_129;
                  case 2:
                    if ((v48 - 11) >= 3)
                      goto LABEL_129;
                    break;
                  case 3:
                    if ((v48 - 4) >= 0xFFFFFFFD)
                      goto LABEL_129;
                    break;
                  case 4:
                    if ((v48 - 4) >= 0xFFFFFFFE)
                      goto LABEL_129;
                    break;
                  case 6:
                    if ((v48 & 0xFFFFFFFB) == 2)
                      goto LABEL_129;
                    break;
                  case 8:
                    if (v48 == 8)
                      goto LABEL_129;
                    break;
                  case 11:
                    if ((v48 & 0xFFFFFFFD) == 0xC)
                      goto LABEL_129;
                    break;
                  case 13:
                    if (v48 == 13)
                      goto LABEL_129;
                    break;
                  case 14:
                    if ((v48 - 11) < 4 || v48 == 1)
                      goto LABEL_129;
                    break;
                  default:
                    break;
                }
              }
LABEL_86:
              v55 = v8;
              v57 = *(char **)(a1 + 208);
              v56 = *(_QWORD *)(a1 + 216);
              if ((unint64_t)v57 >= v56)
              {
                v60 = v48;
                v61 = v7;
                v62 = v47;
                v63 = *(char **)(a1 + 200);
                v64 = (v57 - v63) >> 5;
                v65 = v64 + 1;
                if ((unint64_t)(v64 + 1) >> 59)
                  goto LABEL_364;
                v66 = v56 - (_QWORD)v63;
                if (v66 >> 4 > v65)
                  v65 = v66 >> 4;
                if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFE0)
                  v67 = 0x7FFFFFFFFFFFFFFLL;
                else
                  v67 = v65;
                if (v67)
                {
                  if (v67 >> 59)
                    goto LABEL_361;
                  v68 = (char *)operator new(32 * v67);
                }
                else
                {
                  v68 = 0;
                }
                v79 = v193[1];
                v80 = &v68[32 * v64];
                *(_OWORD *)v80 = *v193;
                *((_OWORD *)v80 + 1) = v79;
                v81 = v80;
                v47 = v62;
                if (v57 != v63)
                {
                  do
                  {
                    v82 = *((_OWORD *)v57 - 1);
                    *((_OWORD *)v81 - 2) = *((_OWORD *)v57 - 2);
                    *((_OWORD *)v81 - 1) = v82;
                    v81 -= 32;
                    v57 -= 32;
                  }
                  while (v57 != v63);
                  v57 = *(char **)(a1 + 200);
                }
                v7 = v61;
                v59 = v80 + 32;
                *(_QWORD *)(a1 + 200) = v81;
                *(_QWORD *)(a1 + 208) = v80 + 32;
                *(_QWORD *)(a1 + 216) = &v68[32 * v67];
                v48 = v60;
                if (v57)
                  operator delete(v57);
              }
              else
              {
                v58 = v193[1];
                *(_OWORD *)v57 = *v193;
                *((_OWORD *)v57 + 1) = v58;
                v59 = v57 + 32;
              }
              *(_QWORD *)(a1 + 208) = v59;
              if (v48)
                v83 = v48 == 9;
              else
                v83 = 1;
              v8 = v55;
              if (v83)
                v84 = -1;
              else
                v84 = v55;
              *(_DWORD *)(a1 + 280) = 0;
              *(_QWORD *)(a1 + 288) = v84;
              v5 = a4;
              *v194 = xmmword_19C46D660;
LABEL_129:
              if (v47)
                v69 = 0;
              else
                v69 = v48;
              goto LABEL_225;
            case 8:
              v86 = *(char **)(a1 + 208);
              v85 = *(_QWORD *)(a1 + 216);
              if ((unint64_t)v86 >= v85)
              {
                v89 = v8;
                v90 = *(char **)(a1 + 200);
                v91 = (v86 - v90) >> 5;
                v92 = v91 + 1;
                if ((unint64_t)(v91 + 1) >> 59)
                  goto LABEL_364;
                v93 = v85 - (_QWORD)v90;
                if (v93 >> 4 > v92)
                  v92 = v93 >> 4;
                if ((unint64_t)v93 >= 0x7FFFFFFFFFFFFFE0)
                  v94 = 0x7FFFFFFFFFFFFFFLL;
                else
                  v94 = v92;
                if (v94)
                {
                  if (v94 >> 59)
                    goto LABEL_361;
                  v95 = (char *)operator new(32 * v94);
                }
                else
                {
                  v95 = 0;
                }
                v96 = v193[1];
                v97 = &v95[32 * v91];
                *(_OWORD *)v97 = *v193;
                *((_OWORD *)v97 + 1) = v96;
                v98 = v97;
                if (v86 != v90)
                {
                  do
                  {
                    v99 = *((_OWORD *)v86 - 1);
                    *((_OWORD *)v98 - 2) = *((_OWORD *)v86 - 2);
                    *((_OWORD *)v98 - 1) = v99;
                    v98 -= 32;
                    v86 -= 32;
                  }
                  while (v86 != v90);
                  v86 = *(char **)(a1 + 200);
                }
                v88 = v97 + 32;
                *(_QWORD *)(a1 + 200) = v98;
                *(_QWORD *)(a1 + 208) = v97 + 32;
                *(_QWORD *)(a1 + 216) = &v95[32 * v94];
                v8 = v89;
                if (v86)
                  operator delete(v86);
                v5 = a4;
              }
              else
              {
                v87 = v193[1];
                *(_OWORD *)v86 = *v193;
                *((_OWORD *)v86 + 1) = v87;
                v88 = v86 + 32;
              }
              *(_QWORD *)(a1 + 208) = v88;
              if (v48 == 8)
                goto LABEL_194;
              v100 = *(_QWORD *)(a1 + 216);
              if ((unint64_t)v88 >= v100)
              {
                v101 = v8;
                v103 = *(char **)(a1 + 200);
                v104 = (v88 - v103) >> 5;
                v105 = v104 + 1;
                if ((unint64_t)(v104 + 1) >> 59)
                  goto LABEL_364;
                v106 = v100 - (_QWORD)v103;
                if (v106 >> 4 > v105)
                  v105 = v106 >> 4;
                if ((unint64_t)v106 >= 0x7FFFFFFFFFFFFFE0)
                  v107 = 0x7FFFFFFFFFFFFFFLL;
                else
                  v107 = v105;
                if (v107)
                {
                  if (v107 >> 59)
                    goto LABEL_361;
                  v108 = (char *)operator new(32 * v107);
                }
                else
                {
                  v108 = 0;
                }
                v109 = &v108[32 * v104];
                *(_DWORD *)v109 = 2;
                v110 = &v108[32 * v107];
                *((_QWORD *)v109 + 1) = v101;
                *((_OWORD *)v109 + 1) = xmmword_19C46D660;
                v102 = v109 + 32;
                if (v88 == v103)
                {
                  *(_QWORD *)(a1 + 200) = v109;
                  *(_QWORD *)(a1 + 208) = v102;
                  *(_QWORD *)(a1 + 216) = v110;
                }
                else
                {
                  do
                  {
                    v111 = *((_OWORD *)v88 - 1);
                    *((_OWORD *)v109 - 2) = *((_OWORD *)v88 - 2);
                    *((_OWORD *)v109 - 1) = v111;
                    v109 -= 32;
                    v88 -= 32;
                  }
                  while (v88 != v103);
                  v88 = *(char **)(a1 + 200);
                  *(_QWORD *)(a1 + 200) = v109;
                  *(_QWORD *)(a1 + 208) = v102;
                  *(_QWORD *)(a1 + 216) = v110;
                  if (!v88)
                    goto LABEL_193;
                }
                operator delete(v88);
              }
              else
              {
                *(_DWORD *)v88 = 2;
                v101 = v8;
                *((_QWORD *)v88 + 1) = v8;
                v102 = v88 + 32;
                *((_OWORD *)v88 + 1) = xmmword_19C46D660;
              }
LABEL_193:
              *(_QWORD *)(a1 + 208) = v102;
              v8 = v101;
LABEL_194:
              if (v48)
                v112 = v48 == 9;
              else
                v112 = 1;
              *(_DWORD *)(a1 + 280) = 0;
              if (v112)
                v113 = -1;
              else
                v113 = v8;
              *(_QWORD *)(a1 + 288) = v113;
              *v194 = xmmword_19C46D660;
              if (v48 == 9)
              {
                v69 = 0;
                goto LABEL_225;
              }
LABEL_202:
              if ((v48 & 7) != 0)
              {
                v115 = *(char **)(a1 + 208);
                v114 = *(_QWORD *)(a1 + 216);
                if ((unint64_t)v115 >= v114)
                {
                  v116 = v8;
                  v118 = *(char **)(a1 + 200);
                  v119 = (v115 - v118) >> 5;
                  v120 = v119 + 1;
                  if ((unint64_t)(v119 + 1) >> 59)
                    goto LABEL_364;
                  v121 = v114 - (_QWORD)v118;
                  if (v121 >> 4 > v120)
                    v120 = v121 >> 4;
                  if ((unint64_t)v121 >= 0x7FFFFFFFFFFFFFE0)
                    v122 = 0x7FFFFFFFFFFFFFFLL;
                  else
                    v122 = v120;
                  if (v122)
                  {
                    if (v122 >> 59)
                      goto LABEL_361;
                    v123 = (char *)operator new(32 * v122);
                  }
                  else
                  {
                    v123 = 0;
                  }
                  v124 = &v123[32 * v119];
                  *(_DWORD *)v124 = 1;
                  *((_QWORD *)v124 + 1) = v116;
                  *((_OWORD *)v124 + 1) = xmmword_19C46D660;
                  v125 = v124;
                  if (v115 != v118)
                  {
                    do
                    {
                      v126 = *((_OWORD *)v115 - 1);
                      *((_OWORD *)v125 - 2) = *((_OWORD *)v115 - 2);
                      *((_OWORD *)v125 - 1) = v126;
                      v125 -= 32;
                      v115 -= 32;
                    }
                    while (v115 != v118);
                    v115 = *(char **)(a1 + 200);
                  }
                  v117 = v124 + 32;
                  *(_QWORD *)(a1 + 200) = v125;
                  *(_QWORD *)(a1 + 208) = v124 + 32;
                  *(_QWORD *)(a1 + 216) = &v123[32 * v122];
                  if (v115)
                    operator delete(v115);
                }
                else
                {
                  *(_DWORD *)v115 = 1;
                  v116 = v8;
                  *((_QWORD *)v115 + 1) = v8;
                  v117 = v115 + 32;
                  *((_OWORD *)v115 + 1) = xmmword_19C46D660;
                }
                *(_QWORD *)(a1 + 208) = v117;
                sub_19C3AFCD0(a1, v5);
                v8 = v116;
              }
LABEL_221:
              if (v48 && v48 != 9 && *(_QWORD *)(a1 + 288) == -1)
              {
                *(_DWORD *)(a1 + 280) = 0;
                *(_QWORD *)(a1 + 288) = v8;
                v69 = v48;
                *v194 = xmmword_19C46D660;
              }
              else
              {
LABEL_224:
                v69 = v48;
              }
              goto LABEL_225;
            case 9:
              goto LABEL_221;
            default:
              goto LABEL_224;
          }
        }
        v46 = *((_DWORD *)v44 - 1);
        v44 -= 4;
        v45 = v46;
      }
      while (v46 == 15);
      if ((v34 & 0x80000000) == 0)
        goto LABEL_64;
LABEL_69:
      *(_DWORD *)(a1 + 312) = v8;
      v49 = *(_QWORD *)(a1 + 272);
      if ((unint64_t)v41 < v49)
      {
        *(_DWORD *)v41 = 15;
        *(_QWORD *)(a1 + 264) = v41 + 4;
        goto LABEL_8;
      }
      v50 = v43 >> 2;
      v51 = (v43 >> 2) + 1;
      if (v51 >> 62)
        goto LABEL_363;
      v52 = v49 - (_QWORD)v42;
      if (v52 >> 1 > v51)
        v51 = v52 >> 1;
      if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFFCLL)
        v53 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v53 = v51;
      if (!v53)
      {
        v54 = 0;
        goto LABEL_102;
      }
      if (v53 >> 62)
        goto LABEL_361;
      v54 = operator new(4 * v53);
LABEL_102:
      v70 = &v54[4 * v50];
      *v70 = 15;
      v71 = v70 + 1;
      if (v41 != v42)
      {
        v72 = v41 - 4 - v42;
        if (v72 < 0x2C)
          goto LABEL_368;
        if ((unint64_t)(v42 - v54) < 0x20)
          goto LABEL_368;
        v73 = (v72 >> 2) + 1;
        v74 = &v54[4 * v50 - 16];
        v75 = v41 - 16;
        v76 = v73 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v77 = *(_OWORD *)v75;
          *(v74 - 1) = *((_OWORD *)v75 - 1);
          *v74 = v77;
          v74 -= 2;
          v75 -= 32;
          v76 -= 8;
        }
        while (v76);
        v70 -= v73 & 0x7FFFFFFFFFFFFFF8;
        v41 -= 4 * (v73 & 0x7FFFFFFFFFFFFFF8);
        if (v73 != (v73 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_368:
          do
          {
            v78 = *((_DWORD *)v41 - 1);
            v41 -= 4;
            *--v70 = v78;
          }
          while (v41 != v42);
        }
      }
      *(_QWORD *)(a1 + 256) = v70;
      *(_QWORD *)(a1 + 264) = v71;
      *(_QWORD *)(a1 + 272) = &v54[4 * v53];
      if (v42)
        operator delete(v42);
      *(_QWORD *)(a1 + 264) = v71;
LABEL_8:
      if (++v7 == a3)
        return;
    }
    if (v13 < 8 || (unint64_t)(v12 - v17) < 0x20)
      goto LABEL_35;
    if (v13 >= 0x20)
    {
      v19 = v13 & 0xFFFFFFFFFFFFFFE0;
      v20 = &v17[v13 - 16];
      v21 = (__int128 *)(v10 - 16);
      v22 = v13 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v23 = *v21;
        *((_OWORD *)v20 - 1) = *(v21 - 1);
        *(_OWORD *)v20 = v23;
        v20 -= 32;
        v21 -= 2;
        v22 -= 32;
      }
      while (v22);
      if (v13 == v19)
        goto LABEL_32;
      if ((v13 & 0x18) == 0)
      {
        v18 -= v19;
        v10 -= v19;
        goto LABEL_35;
      }
    }
    else
    {
      v19 = 0;
    }
    v24 = v19 - (v13 & 0xFFFFFFFFFFFFFFF8);
    v25 = &v10[-v19];
    v26 = &v17[&v10[-v19] - v12 - 8];
    v27 = (uint64_t *)(v25 - 8);
    do
    {
      v28 = *v27--;
      *(_QWORD *)v26 = v28;
      v26 -= 8;
      v24 += 8;
    }
    while (v24);
    if (v13 == (v13 & 0xFFFFFFFFFFFFFFF8))
    {
LABEL_32:
      v10 = v12;
LABEL_38:
      v18 = v17;
      goto LABEL_39;
    }
    v18 -= v13 & 0xFFFFFFFFFFFFFFF8;
    v10 -= v13 & 0xFFFFFFFFFFFFFFF8;
LABEL_35:
    v29 = v18 - 1;
    do
    {
      v30 = *--v10;
      *v29-- = v30;
    }
    while (v10 != v12);
    v10 = *(_BYTE **)(a1 + 176);
    goto LABEL_38;
  }
}

_QWORD *sub_19C29438C(_QWORD *a1, CFTypeRef cf)
{
  CFTypeID v3;
  void *exception;

  *a1 = cf;
  if (cf)
  {
    v3 = CFGetTypeID(cf);
    if (v3 != CFDictionaryGetTypeID())
    {
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1A1AD3154](exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
    }
  }
  return a1;
}

void sub_19C294408(_Unwind_Exception *a1)
{
  CFTypeRef *v1;
  void *v2;

  __cxa_free_exception(v2);
  if (*v1)
    CFRelease(*v1);
  _Unwind_Resume(a1);
}

BOOL sub_19C294438(const __CFLocale *a1, const __CFString *a2)
{
  const __CFString *Value;

  Value = (const __CFString *)CFLocaleGetValue(a1, (CFLocaleKey)*MEMORY[0x1E0C9B088]);
  return CFStringCompare(a2, Value, 0) == kCFCompareEqualTo;
}

uint64_t LMStreamTokenizerCreate(const void *a1, int a2)
{
  uint64_t v2;
  unsigned __int8 v3;
  uint64_t result;

  v2 = sub_19C29A890(a1, a2);
  CFAllocatorGetDefault();
  v3 = atomic_load((unsigned __int8 *)&qword_1EDB97000);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_1EDB97000))
  {
    qword_1EE41ACE8 = 0;
    unk_1EE41ACF8 = 0u;
    unk_1EE41AD08 = 0u;
    qword_1EDB97010 = _CFRuntimeRegisterClass();
    __cxa_guard_release(&qword_1EDB97000);
  }
  result = _CFRuntimeCreateInstance();
  *(_QWORD *)(result + 24) = v2;
  return result;
}

void sub_19C294530(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1EDB97000);
  _Unwind_Resume(a1);
}

void sub_19C294548(uint64_t a1, const __CFString *a2, uint64_t a3)
{
  const void *p_p;
  uint64_t **v6;
  uint64_t **v7;
  size_t v8;
  size_t v9;
  size_t v10;
  uint64_t **v11;
  int v12;
  uint64_t *v13;
  size_t v14;
  size_t v15;
  int v16;
  int v17;
  uint64_t *v18;
  size_t v19;
  size_t v20;
  int v21;
  size_t v22;
  uint64_t **v23;
  int v24;
  uint64_t *v25;
  uint64_t **v26;
  BOOL v27;
  void *__p;
  size_t v29;
  unsigned __int8 v30;

  if (!a2)
    return;
  p_p = &__p;
  sub_19C29CEF8(a2, &__p);
  v6 = (uint64_t **)(a1 + 184);
  v7 = *(uint64_t ***)(a1 + 184);
  v8 = v30;
  if (!v7)
  {
    v9 = v29;
    goto LABEL_36;
  }
  v9 = v29;
  if ((v30 & 0x80u) == 0)
  {
    v10 = v30;
  }
  else
  {
    p_p = __p;
    v10 = v29;
  }
  v11 = (uint64_t **)(a1 + 184);
  do
  {
    while (1)
    {
      v12 = *((char *)v7 + 55);
      v13 = v12 >= 0 ? (uint64_t *)(v7 + 4) : v7[4];
      v14 = v12 >= 0 ? *((unsigned __int8 *)v7 + 55) : (size_t)v7[5];
      v15 = v10 >= v14 ? v14 : v10;
      v16 = memcmp(v13, p_p, v15);
      if (v16)
        break;
      if (v14 >= v10)
        goto LABEL_21;
LABEL_7:
      v7 = (uint64_t **)v7[1];
      if (!v7)
        goto LABEL_22;
    }
    if (v16 < 0)
      goto LABEL_7;
LABEL_21:
    v11 = v7;
    v7 = (uint64_t **)*v7;
  }
  while (v7);
LABEL_22:
  if (v11 == v6)
    goto LABEL_36;
  v17 = *((char *)v11 + 55);
  if (v17 >= 0)
    v18 = (uint64_t *)(v11 + 4);
  else
    v18 = v11[4];
  if (v17 >= 0)
    v19 = *((unsigned __int8 *)v11 + 55);
  else
    v19 = (size_t)v11[5];
  if (v19 >= v10)
    v20 = v10;
  else
    v20 = v19;
  v21 = memcmp(p_p, v18, v20);
  if (!v21)
  {
    if (v10 < v19)
      goto LABEL_36;
LABEL_55:
    *(_DWORD *)a3 = *((_DWORD *)v11 + 14);
    *(_QWORD *)(a3 + 8) = v11[8];
    if ((v8 & 0x80) == 0)
      return;
    goto LABEL_41;
  }
  if ((v21 & 0x80000000) == 0)
    goto LABEL_55;
LABEL_36:
  if ((v8 & 0x80u) == 0)
    v22 = v8;
  else
    v22 = v9;
  if (!v22)
  {
    v23 = *(uint64_t ***)(a1 + 176);
    if (v23 == v6)
    {
      v24 = 0;
    }
    else
    {
      v24 = 0;
      do
      {
        if (*((_DWORD *)v23 + 14) > v24)
          v24 = *((_DWORD *)v23 + 14);
        v25 = v23[1];
        if (v25)
        {
          do
          {
            v26 = (uint64_t **)v25;
            v25 = (uint64_t *)*v25;
          }
          while (v25);
        }
        else
        {
          do
          {
            v26 = (uint64_t **)v23[2];
            v27 = *v26 == (uint64_t *)v23;
            v23 = v26;
          }
          while (!v27);
        }
        v23 = v26;
      }
      while (v26 != v6);
    }
    *(_DWORD *)a3 = v24;
    if ((v8 & 0x80) == 0)
      return;
LABEL_41:
    operator delete(__p);
    return;
  }
  if ((v8 & 0x80) != 0)
    goto LABEL_41;
}

CFStringRef *sub_19C29471C(CFStringRef *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void **p_dst;
  uint64_t v7;
  uint64_t v8;
  const UInt8 *v9;
  CFIndex v10;
  CFStringRef v11;
  void *exception;
  void **__dst;
  size_t v15;
  int64_t v16;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    sub_19C2A1A54();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    p_dst = (void **)operator new(v7 + 1);
    v15 = v5;
    v16 = v8 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v16) = v4;
  p_dst = (void **)&__dst;
  if (v4)
LABEL_8:
    memcpy(p_dst, __s, v5);
  *((_BYTE *)p_dst + v5) = 0;
  if (v16 >= 0)
    v9 = (const UInt8 *)&__dst;
  else
    v9 = (const UInt8 *)__dst;
  if (v16 >= 0)
    v10 = HIBYTE(v16);
  else
    v10 = v15;
  v11 = CFStringCreateWithBytes(0, v9, v10, 0x8000100u, 0);
  *a1 = v11;
  if (!v11)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD3154](exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  if (SHIBYTE(v16) < 0)
    operator delete(__dst);
  return a1;
}

void sub_19C294850(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  CFTypeRef *v15;

  if (*v15)
    CFRelease(*v15);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C294894(uint64_t a1, const __CFDictionary *a2)
{
  uint64_t v4;
  const void *Value;
  const void *v6;
  int v7;
  const __CFString *v8;
  const __CFString *v10;
  void *v11;
  const __CFString *v12;
  const __CFString *v13;
  CFTypeID v14;
  BOOL v15;
  __int128 v16;
  uint64_t v17;

  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = a1 + 40;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_QWORD *)(a1 + 80) = 0;
  sub_19C31474C((void **)(a1 + 64), "selfSender");
  if (CFDictionaryContainsKey(a2, (const void *)kLMLanguageModelAppGenreKey))
  {
    Value = CFDictionaryGetValue(a2, (const void *)kLMLanguageModelAppGenreKey);
    v6 = Value;
    if (Value)
    {
      if (CFEqual(Value, (CFTypeRef)kLMLanguageModelInformalAppGenre))
      {
        v7 = 1;
      }
      else
      {
        if (!CFEqual(v6, (CFTypeRef)kLMLanguageModelFormalAppGenre))
          goto LABEL_9;
        v7 = 2;
      }
    }
    else
    {
      v7 = 0;
    }
    *(_DWORD *)(a1 + 24) = v7;
  }
LABEL_9:
  if (CFDictionaryContainsKey(a2, (const void *)kLMLanguageModelContextIdentifierKey))
  {
    v8 = (const __CFString *)CFDictionaryGetValue(a2, (const void *)kLMLanguageModelContextIdentifierKey);
    sub_19C299E2C((void **)a1, v8, 0);
  }
  else
  {
    v15 = 0;
    v10 = (const __CFString *)CFDictionaryGetValue(a2, (const void *)kLMLanguageModelAppContextKey);
    sub_19C299E2C((void **)a1, v10, &v15);
    if (!v15)
    {
      v11 = (void *)CFDictionaryGetValue(a2, (const void *)kLMLanguageModelRecipientContextKey);
      sub_19C29D3C0(a1, v11);
    }
    v12 = (const __CFString *)CFDictionaryGetValue(a2, (const void *)kLMLanguageModelSpatialTemporalContextKey);
    v13 = v12;
    if (v12)
    {
      v14 = CFGetTypeID(v12);
      if (v14 == CFStringGetTypeID())
      {
        sub_19C29CEF8(v13, &v16);
        if (*(char *)(a1 + 63) < 0)
          operator delete(*(void **)v4);
        *(_OWORD *)v4 = v16;
        *(_QWORD *)(v4 + 16) = v17;
      }
    }
    else
    {
      if (*(char *)(a1 + 63) < 0)
      {
        *(_QWORD *)(a1 + 48) = 0;
        v4 = *(_QWORD *)(a1 + 40);
      }
      else
      {
        *(_BYTE *)(a1 + 63) = 0;
      }
      *(_BYTE *)v4 = 0;
    }
  }
  return a1;
}

void sub_19C294A70(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;
  void **v3;
  void **v4;

  if (*(char *)(v1 + 87) < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 63) < 0)
    operator delete(*v4);
  sub_19C3FC4E4(v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19C294AB8(uint64_t a1, const void *a2, const __CFDictionary *a3)
{
  CFTypeRef v6;

  *(_QWORD *)a1 = 850045863;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  sub_19C294894(a1 + 88, a3);
  if (a2)
    v6 = CFRetain(a2);
  else
    v6 = 0;
  *(_QWORD *)(a1 + 176) = v6;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 196) = 2;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 408) = 0;
  *(_QWORD *)(a1 + 440) = 0;
  *(_QWORD *)(a1 + 448) = 0;
  *(_QWORD *)(a1 + 432) = 0;
  sub_19C294C04(a1);
  sub_19C29AABC(a1, a3, 1);
  return a1;
}

void sub_19C294B70(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;

  sub_19C2F5EB4(v2);
  v4 = *(void **)(v1 + 64);
  if (v4)
  {
    *(_QWORD *)(v1 + 72) = v4;
    operator delete(v4);
  }
  std::mutex::~mutex((std::mutex *)v1);
  _Unwind_Resume(a1);
}

double sub_19C294C04(uint64_t a1)
{
  unsigned int v2;
  unsigned int v3;
  void **v4;
  float *v5;
  float *v6;
  float v7;
  unint64_t v8;
  float *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  float *v16;
  unint64_t v17;
  float *v18;
  uint64_t v19;
  _OWORD *v20;
  float *v21;
  uint64_t v22;
  __int128 v23;
  int v24;
  double result;
  uint64_t v26;

  v2 = 0;
  *(_BYTE *)(a1 + 192) = 1;
  *(_DWORD *)(a1 + 304) = 0x40000000;
  v26 = a1 + 324;
  *(int32x2_t *)(a1 + 336) = vdup_n_s32(0x3E4CCCCDu);
  *(_DWORD *)(a1 + 256) = 1065437102;
  *(_QWORD *)(a1 + 248) = 0x3EE666663F266666;
  *(_QWORD *)(a1 + 420) = 0x3D4CCCCD3F733333;
  *(_OWORD *)(a1 + 204) = xmmword_19C46DF60;
  *(_OWORD *)(a1 + 220) = xmmword_19C46DF70;
  *(_QWORD *)(a1 + 236) = 0x3F19999A3F4CCCCDLL;
  v3 = 5;
  *(_DWORD *)(a1 + 244) = 5;
  v4 = (void **)(a1 + 264);
  v5 = *(float **)(a1 + 272);
  do
  {
    v7 = 1.0 / (float)v3;
    v8 = *(_QWORD *)(a1 + 280);
    if ((unint64_t)v5 < v8)
    {
      *v5 = v7;
      v6 = v5 + 1;
      goto LABEL_3;
    }
    v9 = (float *)*v4;
    v10 = (char *)v5 - (_BYTE *)*v4;
    v11 = v10 >> 2;
    v12 = (v10 >> 2) + 1;
    if (v12 >> 62)
      sub_19C2A18E8();
    v13 = v8 - (_QWORD)v9;
    if (v13 >> 1 > v12)
      v12 = v13 >> 1;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
      v14 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14)
    {
      if (v14 >> 62)
        sub_19C2A143C();
      v15 = operator new(4 * v14);
    }
    else
    {
      v15 = 0;
    }
    v16 = (float *)&v15[4 * v11];
    *v16 = v7;
    v6 = v16 + 1;
    if (v5 != v9)
    {
      v17 = (char *)(v5 - 1) - (char *)v9;
      if (v17 < 0xBC)
      {
        v18 = v5;
        goto LABEL_27;
      }
      if (&v15[v10 - 4 - (v17 & 0xFFFFFFFFFFFFFFFCLL)] > &v15[v10 - 4])
      {
        v18 = v5;
        goto LABEL_27;
      }
      if ((float *)((char *)v5 - (v17 & 0xFFFFFFFFFFFFFFFCLL) - 4) > v5 - 1)
      {
        v18 = v5;
        do
        {
LABEL_27:
          v24 = *((_DWORD *)v18-- - 1);
          *((_DWORD *)v16-- - 1) = v24;
        }
        while (v18 != v9);
        goto LABEL_28;
      }
      if ((unint64_t)((char *)v5 - v15 - v10) < 0x20)
      {
        v18 = v5;
        goto LABEL_27;
      }
      v19 = (v17 >> 2) + 1;
      v18 = &v5[-(v19 & 0x7FFFFFFFFFFFFFF8)];
      v20 = &v15[4 * v11 - 16];
      v21 = v5 - 4;
      v22 = v19 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v23 = *(_OWORD *)v21;
        *(v20 - 1) = *((_OWORD *)v21 - 1);
        *v20 = v23;
        v20 -= 2;
        v21 -= 8;
        v22 -= 8;
      }
      while (v22);
      v16 -= v19 & 0x7FFFFFFFFFFFFFF8;
      if (v19 != (v19 & 0x7FFFFFFFFFFFFFF8))
        goto LABEL_27;
    }
LABEL_28:
    *(_QWORD *)(a1 + 264) = v16;
    *(_QWORD *)(a1 + 272) = v6;
    *(_QWORD *)(a1 + 280) = &v15[4 * v14];
    if (v9)
    {
      operator delete(v9);
      v3 = *(_DWORD *)(a1 + 244);
    }
LABEL_3:
    *(_QWORD *)(a1 + 272) = v6;
    ++v2;
    v5 = v6;
  }
  while (v2 < v3);
  *(_QWORD *)(a1 + 288) = 0xFFFFFF00C00000;
  *(_QWORD *)(a1 + 296) = 0x4248000040800000;
  *(_QWORD *)(a1 + 308) = 0x200000000007D0;
  *(_QWORD *)(a1 + 316) = 0x1800003BA3D70ALL;
  *(_DWORD *)(v26 + 8) = 1065353216;
  *(_QWORD *)v26 = 0x3F80000000000000;
  *(_BYTE *)(a1 + 344) = 1;
  *(_QWORD *)(a1 + 348) = 8;
  *(_WORD *)(a1 + 400) = 0;
  *(_QWORD *)(v26 + 32) = 0x10100010001;
  *(_WORD *)(a1 + 364) = 1;
  *(_OWORD *)(a1 + 368) = xmmword_19C46DF90;
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)&result = 0x700000001;
  *(_QWORD *)(a1 + 392) = 0x700000001;
  *(_WORD *)(a1 + 428) = 0;
  *(_DWORD *)(a1 + 416) = 0;
  *(_DWORD *)(a1 + 456) = 2;
  *(_QWORD *)(a1 + 464) = 0xC008000000000000;
  return result;
}

language_modeling::v1::LinguisticContext *language_modeling::v1::LinguisticContext::LinguisticContext(language_modeling::v1::LinguisticContext *this)
{
  uint64_t v2;

  v2 = operator new();
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 112) = 0u;
  *(_OWORD *)(v2 + 176) = 0u;
  *(_OWORD *)(v2 + 192) = 0u;
  *(_OWORD *)(v2 + 144) = 0u;
  *(_OWORD *)(v2 + 160) = 0u;
  *(_OWORD *)(v2 + 128) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_DWORD *)(v2 + 80) = 1065353216;
  *(_OWORD *)(v2 + 88) = 0u;
  *(_OWORD *)(v2 + 104) = 0u;
  *(_DWORD *)(v2 + 120) = 1065353216;
  *(_DWORD *)(v2 + 160) = 1065353216;
  *(_OWORD *)(v2 + 184) = 0u;
  *(_OWORD *)(v2 + 168) = 0u;
  *(_DWORD *)(v2 + 200) = 1065353216;
  *(_QWORD *)(v2 + 208) = 0;
  *(_QWORD *)(v2 + 216) = 0;
  *(_QWORD *)(v2 + 224) = 0;
  *(_QWORD *)this = v2;
  return this;
}

{
  uint64_t v2;

  v2 = operator new();
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 112) = 0u;
  *(_OWORD *)(v2 + 176) = 0u;
  *(_OWORD *)(v2 + 192) = 0u;
  *(_OWORD *)(v2 + 144) = 0u;
  *(_OWORD *)(v2 + 160) = 0u;
  *(_OWORD *)(v2 + 128) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_DWORD *)(v2 + 80) = 1065353216;
  *(_OWORD *)(v2 + 88) = 0u;
  *(_OWORD *)(v2 + 104) = 0u;
  *(_DWORD *)(v2 + 120) = 1065353216;
  *(_DWORD *)(v2 + 160) = 1065353216;
  *(_OWORD *)(v2 + 184) = 0u;
  *(_OWORD *)(v2 + 168) = 0u;
  *(_DWORD *)(v2 + 200) = 1065353216;
  *(_QWORD *)(v2 + 208) = 0;
  *(_QWORD *)(v2 + 216) = 0;
  *(_QWORD *)(v2 + 224) = 0;
  *(_QWORD *)this = v2;
  return this;
}

__CFArray *sub_19C294FA8(const __CFLocale *a1)
{
  __CFArray *Mutable;
  const __CFString *Value;
  const __CFString *v4;
  char *v5;
  CFStringRef v6;
  const __CFString *v7;

  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  Value = (const __CFString *)CFLocaleGetValue(a1, (CFLocaleKey)*MEMORY[0x1E0C9B088]);
  if (CFStringCompare(Value, CFSTR("ars"), 0))
  {
    if (CFStringCompare(Value, CFSTR("zh"), 0) == kCFCompareEqualTo
      || CFStringCompare(Value, CFSTR("ja"), 0) == kCFCompareEqualTo)
    {
      v4 = CFStringCreateWithFormat(0, 0, CFSTR("/usr/share/mecabra/%@"), Value);
      sub_19C29518C(Mutable, a1, v4);
      if (v4)
        CFRelease(v4);
    }
  }
  else
  {
    Value = CFSTR("ar");
  }
  v5 = getenv("LINGUISTIC_DATA");
  if (v5)
    v6 = CFStringCreateWithCString(0, v5, 0x8000100u);
  else
    v6 = CFSTR("/System/Library/LinguisticData/");
  v7 = CFStringCreateWithFormat(0, 0, CFSTR("%@/%@"), v6, Value);
  CFRelease(v6);
  sub_19C29518C(Mutable, a1, v7);
  if (v7)
    CFRelease(v7);
  return Mutable;
}

uint64_t LMLanguageLikelihoodModelGetEmojiUsageCountForApp(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  NSObject *v5;
  int v7;
  uint64_t v8;
  _QWORD block[7];

  v7 = 0;
  v8 = 0;
  if (a1)
  {
    v4 = *(_QWORD *)(a1 + 24);
    v5 = *(NSObject **)(v4 + 280);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = sub_19C292F80;
    block[3] = &unk_1E3D3BB60;
    block[4] = v4;
    block[5] = a2;
    block[6] = &v7;
    dispatch_sync(v5, block);
  }
  if (a3)
    *a3 = v8;
  return v7;
}

void sub_19C29518C(__CFArray *a1, CFLocaleRef locale, const __CFString *a3)
{
  const __CFString *v6;
  const __CFString *v7;
  CFURLRef v8;
  CFURLRef v9;
  CFURLRef v10;
  void *value;
  CFURLRef url;

  if (a1 && locale && a3)
  {
    v6 = (const __CFString *)CFLocaleGetValue(locale, (CFLocaleKey)*MEMORY[0x1E0C9B090]);
    v7 = (const __CFString *)CFLocaleGetValue(locale, (CFLocaleKey)*MEMORY[0x1E0C9B060]);
    v8 = CFURLCreateWithFileSystemPath(0, a3, kCFURLPOSIXPathStyle, 1u);
    sub_19C2952E8(&url, v8);
    if (v6)
    {
      v9 = CFURLCreateCopyAppendingPathComponent(0, url, v6, 1u);
      sub_19C2952E8(&value, v9);
      CFArrayAppendValue(a1, value);
      if (value)
        CFRelease(value);
    }
    if (v7)
    {
      v10 = CFURLCreateCopyAppendingPathComponent(0, url, v7, 1u);
      sub_19C2952E8(&value, v10);
      CFArrayAppendValue(a1, value);
      if (value)
        CFRelease(value);
    }
    CFArrayAppendValue(a1, url);
    if (url)
      CFRelease(url);
  }
}

void sub_19C2952B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
  sub_19C32BC18(&a9);
  sub_19C32BC18(&a10);
  _Unwind_Resume(a1);
}

_QWORD *sub_19C2952E8(_QWORD *a1, CFTypeRef cf)
{
  CFTypeID v3;
  void *exception;

  *a1 = cf;
  if (cf)
  {
    v3 = CFGetTypeID(cf);
    if (v3 != CFURLGetTypeID())
    {
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1A1AD3154](exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
    }
  }
  return a1;
}

void sub_19C295364(_Unwind_Exception *a1)
{
  CFTypeRef *v1;
  void *v2;

  __cxa_free_exception(v2);
  if (*v1)
    CFRelease(*v1);
  _Unwind_Resume(a1);
}

language_modeling::v1::LinguisticContext *language_modeling::v1::LinguisticContext::LinguisticContext(language_modeling::v1::LinguisticContext *this, const language_modeling::v1::LinguisticContext *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)a2;
  v4 = operator new();
  sub_19C2967D8(v4, v3);
  *(_QWORD *)this = v4;
  return this;
}

{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)a2;
  v4 = operator new();
  sub_19C2967D8(v4, v3);
  *(_QWORD *)this = v4;
  return this;
}

void sub_19C2953E8(void *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD355C](v1, 0x10B2C4009D90DC4);
  sub_19C2CDAC8(a1);
}

const __CFDictionary *LMLanguageModelCreate(const __CFDictionary *cf)
{
  const __CFDictionary *v1;
  const __CFString *Value;
  const __CFString *v3;
  CFTypeID v4;
  const __CFLocale *v5;
  CFTypeID v6;
  uint64_t v7;
  CFLocaleRef v8;
  __CFDictionary *MutableCopy;
  uint64_t v10;
  std::__shared_weak_count_vtbl *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  std::__shared_weak_count *on_zero_shared;
  unint64_t v20;
  unint64_t *p_shared_weak_owners;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  __int128 v27;
  void (__cdecl *on_zero_shared_weak)(std::__shared_weak_count *__hidden);
  const void *(__cdecl *get_deleter)(const std::__shared_weak_count *__hidden, const std::type_info *);
  void (__cdecl *v30)(std::__shared_weak_count *__hidden);
  unint64_t v31;
  os_signpost_id_t v32;
  NSObject *v33;
  NSObject *v34;
  const __CFString *v35;
  _QWORD *v36;
  void **v37;
  size_t v38;
  _QWORD *v39;
  const char *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  const char *v44;
  uint64_t v45;
  size_t v46;
  void **v47;
  unint64_t v48;
  const void **v49;
  const void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void **v54;
  unsigned __int8 v55;
  uint64_t Instance;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  __int128 v65;
  void *__dst[2];
  int64_t v67;
  uint64_t v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  void *v71[2];
  char v72;
  uint8_t buf[4];
  void **v74;
  _BYTE __p[12];
  _QWORD v76[3];
  uint64_t v77;
  char v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  void *v82;
  char v83;
  unint64_t v84;
  int v85;
  _QWORD v86[20];

  v1 = cf;
  v86[19] = *MEMORY[0x1E0C80C00];
  if (!cf)
    return v1;
  CFRetain(cf);
  Value = (const __CFString *)CFDictionaryGetValue(v1, (const void *)kLMLanguageModelLocaleKey);
  if (!Value)
    goto LABEL_10;
  v3 = Value;
  v4 = CFGetTypeID(Value);
  if (v4 == CFLocaleGetTypeID())
  {
    v5 = (const __CFLocale *)CFRetain(v3);
  }
  else
  {
    v6 = CFGetTypeID(v3);
    if (v6 != CFStringGetTypeID())
    {
LABEL_10:
      MutableCopy = v1;
      goto LABEL_11;
    }
    v5 = CFLocaleCreate(0, v3);
  }
  v7 = (uint64_t)v5;
  if (!sub_19C294438(v5, CFSTR("ars")))
    goto LABEL_10;
  v8 = sub_19C2E1B3C(v7, CFSTR("ar"));
  MutableCopy = CFDictionaryCreateMutableCopy(0, 0, v1);
  CFDictionarySetValue(MutableCopy, (const void *)kLMLanguageModelLocaleKey, v8);
  CFRelease(v1);
  if (v8)
    CFRelease(v8);
LABEL_11:
  v10 = mach_continuous_time();
  v11 = (std::__shared_weak_count_vtbl *)operator new();
  v12 = operator new();
  __p[0] = 0;
  v78 = 0;
  sub_19C346094(v12, MutableCopy, (void **)__p);
  v68 = v12;
  if (v78)
  {
    sub_19C2E457C(v76[2]);
    if (SHIBYTE(v76[0]) < 0)
      operator delete(*(void **)__p);
  }
  v69 = v12;
  v13 = (std::__shared_weak_count *)operator new();
  v13->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D39CF8;
  v13->__shared_owners_ = 0;
  v13->__shared_weak_owners_ = 0;
  v13[1].__vftable = (std::__shared_weak_count_vtbl *)v12;
  v70 = v13;
  v68 = 0;
  sub_19C31C0B8((uint64_t)v11, MutableCopy, (uint64_t)&v69);
  v14 = v70;
  if (v70)
  {
    p_shared_owners = (unint64_t *)&v70->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = (std::__shared_weak_count *)operator new();
  v17->__shared_owners_ = 0;
  v18 = (unint64_t *)&v17->__shared_owners_;
  v17->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D39E10;
  v17->__shared_weak_owners_ = 0;
  v17[1].__vftable = v11;
  on_zero_shared = (std::__shared_weak_count *)v11->__on_zero_shared;
  if (on_zero_shared)
  {
    if (on_zero_shared->__shared_owners_ != -1)
      goto LABEL_32;
    do
      v20 = __ldxr(v18);
    while (__stxr(v20 + 1, v18));
    p_shared_weak_owners = (unint64_t *)&v17->__shared_weak_owners_;
    do
      v22 = __ldxr(p_shared_weak_owners);
    while (__stxr(v22 + 1, p_shared_weak_owners));
    v11->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v11;
    v11->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v17;
    std::__shared_weak_count::__release_weak(on_zero_shared);
  }
  else
  {
    do
      v23 = __ldxr(v18);
    while (__stxr(v23 + 1, v18));
    v24 = (unint64_t *)&v17->__shared_weak_owners_;
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
    v11->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v11;
    v11->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v17;
  }
  do
    v26 = __ldaxr(v18);
  while (__stlxr(v26 - 1, v18));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
LABEL_32:
  *(_QWORD *)&v27 = v11;
  *((_QWORD *)&v27 + 1) = v17;
  v65 = v27;
  sub_19C31D950((uint64_t)v11);
  on_zero_shared_weak = v11[5].__on_zero_shared_weak;
  if (*((_BYTE *)on_zero_shared_weak + 418))
  {
    if (*((_BYTE *)on_zero_shared_weak + 344)
      && (v11[6].~__shared_weak_count_0
       || v11[3].~__shared_weak_count_0 != (void (__cdecl *)(std::__shared_weak_count *__hidden))v11[3].__on_zero_shared
       || v11[3].__on_zero_shared_weak != v11[4].~__shared_weak_count))
    {
      goto LABEL_51;
    }
    goto LABEL_48;
  }
  if (!*((_BYTE *)on_zero_shared_weak + 344))
  {
    if (*((_BYTE *)on_zero_shared_weak + 192))
      goto LABEL_51;
    do
LABEL_48:
      v31 = __ldaxr(v18);
    while (__stlxr(v31 - 1, v18));
    v65 = 0u;
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
    goto LABEL_51;
  }
  if (v11[3].~__shared_weak_count_0 != (void (__cdecl *)(std::__shared_weak_count *__hidden))v11[3].__on_zero_shared
    || v11[3].__on_zero_shared_weak != v11[4].~__shared_weak_count)
  {
    goto LABEL_51;
  }
  get_deleter = v11[4].__get_deleter;
  v30 = v11[4].__on_zero_shared_weak;
  if ((char *)get_deleter == (char *)v30)
  {
LABEL_44:
    if (v11[1].__get_deleter != (const void *(__cdecl *)(const std::__shared_weak_count *__hidden, const std::type_info *))v11[1].__on_zero_shared_weak
      || v11[6].~__shared_weak_count_0)
    {
      goto LABEL_51;
    }
    goto LABEL_48;
  }
  while (*(_QWORD *)(*(_QWORD *)get_deleter + 8) == *(_QWORD *)(*(_QWORD *)get_deleter + 16))
  {
    get_deleter = (const void *(__cdecl *)(const std::__shared_weak_count *__hidden, const std::type_info *))((char *)get_deleter + 16);
    if ((char *)get_deleter == (char *)v30)
      goto LABEL_44;
  }
LABEL_51:
  if ((_QWORD)v65)
  {
    if (qword_1EDB971E0 != -1)
      dispatch_once(&qword_1EDB971E0, &unk_1E3D3AC10);
    if (!os_signpost_enabled((os_log_t)qword_1EDB971D8))
    {
LABEL_102:
      CFAllocatorGetDefault();
      v55 = atomic_load((unsigned __int8 *)&qword_1EDB971D0);
      if ((v55 & 1) == 0 && __cxa_guard_acquire(&qword_1EDB971D0))
      {
        qword_1EDB96D00 = 0;
        unk_1EDB96D10 = 0u;
        unk_1EDB96D20 = 0u;
        qword_1EDB971E8 = _CFRuntimeRegisterClass();
        __cxa_guard_release(&qword_1EDB971D0);
      }
      Instance = _CFRuntimeCreateInstance();
      v1 = (const __CFDictionary *)Instance;
      if (*((_QWORD *)&v65 + 1))
      {
        v57 = (unint64_t *)(*((_QWORD *)&v65 + 1) + 8);
        do
          v58 = __ldxr(v57);
        while (__stxr(v58 + 1, v57));
      }
      v59 = *(std::__shared_weak_count **)(Instance + 32);
      *(_OWORD *)(Instance + 24) = v65;
      if (!v59)
        goto LABEL_110;
      v60 = (unint64_t *)&v59->__shared_owners_;
      do
        v61 = __ldaxr(v60);
      while (__stlxr(v61 - 1, v60));
      if (!v61)
      {
        ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
        std::__shared_weak_count::__release_weak(v59);
        if (*((_QWORD *)&v65 + 1))
          goto LABEL_111;
      }
      else
      {
LABEL_110:
        if (*((_QWORD *)&v65 + 1))
          goto LABEL_111;
      }
      goto LABEL_114;
    }
    v32 = os_signpost_id_make_with_pointer((os_log_t)qword_1EDB971D8, (const void *)v65);
    if (qword_1EDB971E0 != -1)
      dispatch_once(&qword_1EDB971E0, &unk_1E3D3AC10);
    if (v32 - 1 <= 0xFFFFFFFFFFFFFFFDLL
      && (v33 = qword_1EDB971D8, os_signpost_enabled((os_log_t)qword_1EDB971D8))
      && (*(_DWORD *)__p = 134217984,
          *(_QWORD *)&__p[4] = v10,
          _os_signpost_emit_with_name_impl(&dword_19C291000, v33, OS_SIGNPOST_INTERVAL_BEGIN, v32, "CreateLanguageModel", "%{signpost.description:begin_time}llu", __p, 0xCu), qword_1EDB971E0 != -1))
    {
      dispatch_once(&qword_1EDB971E0, &unk_1E3D3AC10);
    }
    else if (v32 - 1 > 0xFFFFFFFFFFFFFFFDLL)
    {
      goto LABEL_102;
    }
    v34 = qword_1EDB971D8;
    if (!os_signpost_enabled((os_log_t)qword_1EDB971D8))
      goto LABEL_102;
    v35 = (const __CFString *)MEMORY[0x1A1AD2A04](*(_QWORD *)(*(_QWORD *)(v65 + 416) + 8));
    sub_19C2B4F08((uint64_t)__p);
    v36 = sub_19C2A1B24(v76, (uint64_t)"locale=", 7);
    sub_19C29CEF8(v35, v71);
    if (v72 >= 0)
      v37 = v71;
    else
      v37 = (void **)v71[0];
    v38 = strlen((const char *)v37);
    sub_19C2A1B24(v36, (uint64_t)v37, v38);
    if (v72 < 0)
      operator delete(v71[0]);
    v39 = sub_19C2A1B24(v76, (uint64_t)", adaptation=", 13);
    if (*(_BYTE *)(*(_QWORD *)(v65 + 232) + 192))
      v40 = "enabled";
    else
      v40 = "disabled";
    if (*(_BYTE *)(*(_QWORD *)(v65 + 232) + 192))
      v41 = 7;
    else
      v41 = 8;
    sub_19C2A1B24(v39, (uint64_t)v40, v41);
    v42 = sub_19C2A1B24(v76, (uint64_t)", montreal=", 11);
    v43 = *(_QWORD *)(v65 + 248);
    if (v43)
      v44 = "enabled";
    else
      v44 = "disabled";
    if (v43)
      v45 = 7;
    else
      v45 = 8;
    sub_19C2A1B24(v42, (uint64_t)v44, v45);
    if ((v85 & 0x10) != 0)
    {
      v48 = v84;
      if (v84 < v81)
      {
        v84 = v81;
        v48 = v81;
      }
      v49 = (const void **)&v80;
    }
    else
    {
      if ((v85 & 8) == 0)
      {
        v46 = 0;
        HIBYTE(v67) = 0;
        v47 = __dst;
        goto LABEL_96;
      }
      v49 = (const void **)&v77;
      v48 = v79;
    }
    v50 = *v49;
    v46 = v48 - (_QWORD)*v49;
    if (v46 >= 0x7FFFFFFFFFFFFFF8)
      sub_19C2A1A54();
    if (v46 >= 0x17)
    {
      v51 = (v46 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v46 | 7) != 0x17)
        v51 = v46 | 7;
      v52 = v51 + 1;
      v47 = (void **)operator new(v51 + 1);
      __dst[1] = (void *)v46;
      v67 = v52 | 0x8000000000000000;
      __dst[0] = v47;
    }
    else
    {
      HIBYTE(v67) = v48 - *(_BYTE *)v49;
      v47 = __dst;
      if (!v46)
        goto LABEL_96;
    }
    memmove(v47, v50, v46);
LABEL_96:
    *((_BYTE *)v47 + v46) = 0;
    *(_QWORD *)__p = *MEMORY[0x1E0DE4F50];
    v53 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
    *(_QWORD *)&__p[*(_QWORD *)(*(_QWORD *)__p - 24)] = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
    v76[0] = v53;
    v76[1] = MEMORY[0x1E0DE4FB8] + 16;
    if (v83 < 0)
      operator delete(v82);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x1A1AD34CC](v86);
    v54 = __dst;
    if (v67 < 0)
      v54 = (void **)__dst[0];
    *(_DWORD *)buf = 136315138;
    v74 = v54;
    _os_signpost_emit_with_name_impl(&dword_19C291000, v34, OS_SIGNPOST_INTERVAL_END, v32, "CreateLanguageModel", "%s", buf, 0xCu);
    if (SHIBYTE(v67) < 0)
      operator delete(__dst[0]);
    goto LABEL_102;
  }
  v1 = 0;
  if (*((_QWORD *)&v65 + 1))
  {
LABEL_111:
    v62 = (unint64_t *)(*((_QWORD *)&v65 + 1) + 8);
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v65 + 1) + 16))(*((_QWORD *)&v65 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v65 + 1));
      if (!MutableCopy)
        return v1;
      goto LABEL_115;
    }
  }
LABEL_114:
  if (MutableCopy)
LABEL_115:
    CFRelease(MutableCopy);
  return v1;
}

void sub_19C295CC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  const void *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;

  __cxa_guard_abort(&qword_1EDB971D0);
  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  if (v10)
    CFRelease(v10);
  _Unwind_Resume(a1);
}

void language_modeling::v1::LinguisticContext::~LinguisticContext(language_modeling::v1::LinguisticContext *this)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v2)
  {
    v3 = sub_19C295FA0(v2);
    MEMORY[0x1A1AD355C](v3, 0x10B2C4009D90DC4);
  }
}

{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v2)
  {
    v3 = sub_19C295FA0(v2);
    MEMORY[0x1A1AD355C](v3, 0x10B2C4009D90DC4);
  }
}

uint64_t sub_19C295FA0(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  void *v5;
  _QWORD *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  _QWORD *v11;
  void *v12;
  _QWORD *v13;
  void *v14;
  _QWORD *v15;
  void *v16;
  void **v17;
  void **v18;
  void **v19;

  if (*(char *)(a1 + 231) < 0)
  {
    operator delete(*(void **)(a1 + 208));
    v2 = *(_QWORD **)(a1 + 184);
    if (!v2)
      goto LABEL_5;
  }
  else
  {
    v2 = *(_QWORD **)(a1 + 184);
    if (!v2)
      goto LABEL_5;
  }
  do
  {
    v11 = (_QWORD *)*v2;
    v12 = (void *)v2[3];
    if (v12)
    {
      v2[4] = v12;
      operator delete(v12);
    }
    operator delete(v2);
    v2 = v11;
  }
  while (v11);
LABEL_5:
  v3 = *(void **)(a1 + 168);
  *(_QWORD *)(a1 + 168) = 0;
  if (v3)
    operator delete(v3);
  v4 = *(_QWORD **)(a1 + 144);
  if (v4)
  {
    do
    {
      v13 = (_QWORD *)*v4;
      v14 = (void *)v4[3];
      if (v14)
      {
        v4[4] = v14;
        operator delete(v14);
      }
      operator delete(v4);
      v4 = v13;
    }
    while (v13);
  }
  v5 = *(void **)(a1 + 128);
  *(_QWORD *)(a1 + 128) = 0;
  if (v5)
    operator delete(v5);
  sub_19C2EC61C(a1 + 88);
  v6 = *(_QWORD **)(a1 + 64);
  if (v6)
  {
    do
    {
      v15 = (_QWORD *)*v6;
      v16 = (void *)v6[3];
      if (v16)
      {
        v6[4] = v16;
        operator delete(v16);
      }
      operator delete(v6);
      v6 = v15;
    }
    while (v15);
  }
  v7 = *(void **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v7)
    operator delete(v7);
  v8 = *(_QWORD *)(a1 + 24);
  if (v8)
  {
    v9 = *(_QWORD *)(a1 + 32);
    v10 = *(void **)(a1 + 24);
    if (v9 != v8)
    {
      do
      {
        if (*(char *)(v9 - 9) < 0)
          operator delete(*(void **)(v9 - 32));
        v9 -= 32;
      }
      while (v9 != v8);
      v10 = *(void **)(a1 + 24);
    }
    *(_QWORD *)(a1 + 32) = v8;
    operator delete(v10);
  }
  v17 = *(void ***)a1;
  if (*(_QWORD *)a1)
  {
    v18 = *(void ***)(a1 + 8);
    v19 = *(void ***)a1;
    if (v18 != v17)
    {
      do
      {
        if (*((char *)v18 - 9) < 0)
          operator delete(*(v18 - 4));
        v18 -= 4;
      }
      while (v18 != v17);
      v19 = *(void ***)a1;
    }
    *(_QWORD *)(a1 + 8) = v17;
    operator delete(v19);
  }
  return a1;
}

void language_modeling::v1::LanguageModelSession::~LanguageModelSession(language_modeling::v1::LanguageModelSession *this)
{
  uint64_t v2;

  v2 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

{
  uint64_t v2;

  v2 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

void sub_19C296174(uint64_t a1)
{
  sub_19C296198(a1);
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C296198(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;

  *(_QWORD *)a1 = &off_1E3D34C30;
  v2 = *(std::__shared_weak_count **)(a1 + 200);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = *(_QWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 176) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *(std::__shared_weak_count **)(a1 + 168);
  if (!v6)
    goto LABEL_12;
  v7 = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    v9 = *(std::__shared_weak_count **)(a1 + 152);
    if (!v9)
      goto LABEL_18;
  }
  else
  {
LABEL_12:
    v9 = *(std::__shared_weak_count **)(a1 + 152);
    if (!v9)
      goto LABEL_18;
  }
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
LABEL_18:
  v12 = *(std::__shared_weak_count **)(a1 + 136);
  if (!v12)
    goto LABEL_22;
  v13 = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    v15 = *(std::__shared_weak_count **)(a1 + 120);
    if (!v15)
      goto LABEL_28;
  }
  else
  {
LABEL_22:
    v15 = *(std::__shared_weak_count **)(a1 + 120);
    if (!v15)
      goto LABEL_28;
  }
  v16 = (unint64_t *)&v15->__shared_owners_;
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 - 1, v16));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
LABEL_28:
  v18 = *(std::__shared_weak_count **)(a1 + 104);
  if (!v18)
    goto LABEL_32;
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (v20)
  {
LABEL_32:
    if ((*(char *)(a1 + 79) & 0x80000000) == 0)
      goto LABEL_33;
LABEL_36:
    operator delete(*(void **)(a1 + 56));
    if ((*(char *)(a1 + 47) & 0x80000000) == 0)
      return a1;
LABEL_37:
    operator delete(*(void **)(a1 + 24));
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (*(char *)(a1 + 79) < 0)
    goto LABEL_36;
LABEL_33:
  if (*(char *)(a1 + 47) < 0)
    goto LABEL_37;
  return a1;
}

uint64_t sub_19C296378(uint64_t a1)
{
  void **v2;
  void **v3;
  void **v5;
  void **v6;
  void **v7;
  void **v8;

  if (*(char *)(a1 + 231) < 0)
  {
    operator delete(*(void **)(a1 + 208));
    v2 = *(void ***)(a1 + 184);
    if (!v2)
    {
LABEL_3:
      v3 = *(void ***)(a1 + 160);
      if (!v3)
        goto LABEL_4;
      goto LABEL_15;
    }
  }
  else
  {
    v2 = *(void ***)(a1 + 184);
    if (!v2)
      goto LABEL_3;
  }
  v5 = *(void ***)(a1 + 192);
  v6 = v2;
  if (v5 != v2)
  {
    do
    {
      if (*((char *)v5 - 9) < 0)
        operator delete(*(v5 - 4));
      v5 -= 4;
    }
    while (v5 != v2);
    v6 = *(void ***)(a1 + 184);
  }
  *(_QWORD *)(a1 + 192) = v2;
  operator delete(v6);
  v3 = *(void ***)(a1 + 160);
  if (!v3)
  {
LABEL_4:
    if ((*(char *)(a1 + 47) & 0x80000000) == 0)
      goto LABEL_5;
LABEL_22:
    operator delete(*(void **)(a1 + 24));
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      return a1;
LABEL_23:
    operator delete(*(void **)a1);
    return a1;
  }
LABEL_15:
  v7 = *(void ***)(a1 + 168);
  v8 = v3;
  if (v7 != v3)
  {
    do
    {
      if (*((char *)v7 - 9) < 0)
        operator delete(*(v7 - 4));
      v7 -= 4;
    }
    while (v7 != v3);
    v8 = *(void ***)(a1 + 160);
  }
  *(_QWORD *)(a1 + 168) = v3;
  operator delete(v8);
  if (*(char *)(a1 + 47) < 0)
    goto LABEL_22;
LABEL_5:
  if (*(char *)(a1 + 23) < 0)
    goto LABEL_23;
  return a1;
}

void sub_19C296484(uint64_t a1)
{
  sub_19C2964A8(a1);
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C2964A8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;

  *(_QWORD *)a1 = &off_1E3D34D10;
  sub_19C44354C((void **)(a1 + 224));
  sub_19C336DA8((void **)(a1 + 152));
  v2 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 136) = 0;
  if (v2)
  {
    v3 = sub_19C2966B4(v2);
    MEMORY[0x1A1AD355C](v3, 0x10F0C4069D522A4);
  }
  v4 = *(std::__shared_weak_count **)(a1 + 128);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 112) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v10)
    goto LABEL_18;
  v11 = (unint64_t *)&v10->__shared_owners_;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (v12)
  {
LABEL_18:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_19;
LABEL_22:
    operator delete(*(void **)(a1 + 48));
    if ((*(char *)(a1 + 39) & 0x80000000) == 0)
      return a1;
LABEL_23:
    operator delete(*(void **)(a1 + 16));
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  if (*(char *)(a1 + 71) < 0)
    goto LABEL_22;
LABEL_19:
  if (*(char *)(a1 + 39) < 0)
    goto LABEL_23;
  return a1;
}

void sub_19C2965F0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  const void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  *a1 = &off_1E3D34BE0;
  v2 = a1[5];
  if (v2)
  {
    v3 = a1[6];
    v4 = (void *)a1[5];
    if (v3 != v2)
    {
      do
      {
        v5 = *(const void **)(v3 - 8);
        if (v5)
          CFRelease(v5);
        v3 -= 32;
      }
      while (v3 != v2);
      v4 = (void *)a1[5];
    }
    a1[6] = v2;
    operator delete(v4);
  }
  v6 = (std::__shared_weak_count *)a1[3];
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C2966B4(uint64_t a1)
{
  const void *v2;
  const void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v2 = *(const void **)a1;
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(a1 + 8);
  if (v3)
    CFRelease(v3);
  if (*(_QWORD *)(a1 + 24))
    ubrk_close();
  v4 = *(void **)(a1 + 256);
  if (v4)
  {
    *(_QWORD *)(a1 + 264) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 224);
  if (v5)
  {
    *(_QWORD *)(a1 + 232) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(a1 + 200);
  if (v6)
  {
    *(_QWORD *)(a1 + 208) = v6;
    operator delete(v6);
  }
  v7 = *(void **)(a1 + 176);
  if (v7)
  {
    *(_QWORD *)(a1 + 184) = v7;
    operator delete(v7);
  }
  return a1;
}

uint64_t *language_modeling::v1::LinguisticContext::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *a2;
  v4 = operator new();
  sub_19C2967D8(v4, v3);
  v5 = *a1;
  *a1 = v4;
  if (v5)
  {
    v6 = sub_19C295FA0(v5);
    MEMORY[0x1A1AD355C](v6, 0x10B2C4009D90DC4);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a2;
  *a2 = 0;
  v4 = *a1;
  *a1 = v3;
  if (v4)
  {
    v5 = sub_19C295FA0(v4);
    MEMORY[0x1A1AD355C](v5, 0x10B2C4009D90DC4);
  }
  return a1;
}

void sub_19C2967B0(void *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD355C](v1, 0x10B2C4009D90DC4);
  sub_19C2CDAC8(a1);
}

uint64_t sub_19C2967D8(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  _QWORD *v5;
  size_t prime;
  uint64_t *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  uint64_t **v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  int8x8_t v22;
  unint64_t v23;
  uint8x8_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  _QWORD *v28;
  size_t v29;
  uint64_t *v30;
  _QWORD *v31;
  unint64_t v32;
  unint64_t v33;
  uint8x8_t v34;
  uint64_t **v35;
  uint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  int v40;
  _BYTE *v41;
  _BYTE *v42;
  int64_t v43;
  char *v44;
  char *v45;
  float v46;
  float v47;
  _BOOL8 v48;
  unint64_t v49;
  unint64_t v50;
  size_t v51;
  unint64_t v52;
  uint8x8_t v53;
  uint64_t v54;
  _QWORD *v55;
  unint64_t v56;
  _BYTE *v57;
  __int128 v58;
  int8x8_t v59;
  BOOL v60;
  int8x8_t v61;
  BOOL v62;
  unint64_t v64;
  uint8x8_t v65;
  uint64_t v66;
  unint64_t v67;
  uint8x8_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  _QWORD *v72;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  sub_19C2E2178((_QWORD *)a1, *(_QWORD *)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 5);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  sub_19C2E229C((_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 24), *(_QWORD *)(a2 + 32), (uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 5);
  sub_19C297114(a1 + 48, a2 + 48);
  *(_OWORD *)(a1 + 88) = 0u;
  v5 = (_QWORD *)(a1 + 88);
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  prime = *(_QWORD *)(a2 + 96);
  if (prime == 1)
  {
    prime = 2;
LABEL_3:
    sub_19C2EC6BC(a1 + 88, prime);
    goto LABEL_4;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
    v59 = *(int8x8_t *)(a1 + 96);
    v60 = prime >= *(_QWORD *)&v59;
    if (prime > *(_QWORD *)&v59)
      goto LABEL_3;
  }
  else
  {
    v59 = 0;
    v60 = 1;
    if (prime)
      goto LABEL_3;
  }
  if (!v60)
  {
    v64 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 112) / *(float *)(a1 + 120));
    if (*(_QWORD *)&v59 < 3uLL || (v65 = (uint8x8_t)vcnt_s8(v59), v65.i16[0] = vaddlv_u8(v65), v65.u32[0] > 1uLL))
    {
      v64 = std::__next_prime(v64);
    }
    else
    {
      v66 = 1 << -(char)__clz(v64 - 1);
      if (v64 >= 2)
        v64 = v66;
    }
    if (prime <= v64)
      prime = v64;
    if (prime < *(_QWORD *)&v59)
      goto LABEL_3;
  }
LABEL_4:
  v70 = a2;
  v7 = *(uint64_t **)(a2 + 104);
  if (v7)
  {
    v8 = (_QWORD *)(a1 + 104);
    do
    {
      v9 = *((unsigned int *)v7 + 4);
      v10 = *(_QWORD *)(a1 + 96);
      if (v10)
      {
        v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
        v11.i16[0] = vaddlv_u8(v11);
        if (v11.u32[0] > 1uLL)
        {
          v2 = *((unsigned int *)v7 + 4);
          if (v10 <= v9)
            v2 = v9 % v10;
        }
        else
        {
          v2 = ((_DWORD)v10 - 1) & v9;
        }
        v12 = *(uint64_t ***)(*v5 + 8 * v2);
        if (v12)
        {
          v13 = *v12;
          if (v13)
          {
            if (v11.u32[0] < 2uLL)
            {
              while (1)
              {
                v15 = v13[1];
                if (v15 == v9)
                {
                  if (*((_DWORD *)v13 + 4) == (_DWORD)v9)
                    goto LABEL_63;
                }
                else if ((v15 & (v10 - 1)) != v2)
                {
                  goto LABEL_26;
                }
                v13 = (uint64_t *)*v13;
                if (!v13)
                  goto LABEL_26;
              }
            }
            do
            {
              v14 = v13[1];
              if (v14 == v9)
              {
                if (*((_DWORD *)v13 + 4) == (_DWORD)v9)
                  goto LABEL_63;
              }
              else
              {
                if (v14 >= v10)
                  v14 %= v10;
                if (v14 != v2)
                  break;
              }
              v13 = (uint64_t *)*v13;
            }
            while (v13);
          }
        }
      }
LABEL_26:
      v71 = operator new(0x30uLL);
      *v71 = 0;
      v71[1] = v9;
      *((_DWORD *)v71 + 4) = *((_DWORD *)v7 + 4);
      v71[4] = 0;
      v71[5] = 0;
      v71[3] = 0;
      sub_19C2EC8A8(v71 + 3, (CFTypeRef *)v7[3], (CFTypeRef *)v7[4], (v7[4] - v7[3]) >> 3);
      v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 112) + 1);
      v17 = *(float *)(a1 + 120);
      if (!v10 || (float)(v17 * (float)v10) < v16)
      {
        v18 = (v10 & (v10 - 1)) != 0;
        if (v10 < 3)
          v18 = 1;
        v19 = v18 | (2 * v10);
        v20 = vcvtps_u32_f32(v16 / v17);
        if (v19 <= v20)
          v21 = v20;
        else
          v21 = v19;
        if (v21 == 1)
        {
          v21 = 2;
        }
        else if ((v21 & (v21 - 1)) != 0)
        {
          v21 = std::__next_prime(v21);
        }
        v22 = *(int8x8_t *)(a1 + 96);
        if (v21 > *(_QWORD *)&v22)
          goto LABEL_38;
        if (v21 < *(_QWORD *)&v22)
        {
          v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 112) / *(float *)(a1 + 120));
          if (*(_QWORD *)&v22 < 3uLL || (v24 = (uint8x8_t)vcnt_s8(v22), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
          {
            v23 = std::__next_prime(v23);
          }
          else
          {
            v25 = 1 << -(char)__clz(v23 - 1);
            if (v23 >= 2)
              v23 = v25;
          }
          if (v21 <= v23)
            v21 = v23;
          if (v21 < *(_QWORD *)&v22)
LABEL_38:
            sub_19C2EC6BC(a1 + 88, v21);
        }
        v10 = *(_QWORD *)(a1 + 96);
        if ((v10 & (v10 - 1)) != 0)
        {
          if (v10 <= v9)
            v2 = v9 % v10;
          else
            v2 = v9;
        }
        else
        {
          v2 = ((_DWORD)v10 - 1) & v9;
        }
      }
      v26 = *(_QWORD **)(*v5 + 8 * v2);
      if (v26)
      {
        *v71 = *v26;
        *v26 = v71;
      }
      else
      {
        *v71 = *v8;
        *v8 = v71;
        *(_QWORD *)(*v5 + 8 * v2) = v8;
        if (*v71)
        {
          v27 = *(_QWORD *)(*v71 + 8);
          if ((v10 & (v10 - 1)) != 0)
          {
            if (v27 >= v10)
              v27 %= v10;
          }
          else
          {
            v27 &= v10 - 1;
          }
          *(_QWORD *)(*v5 + 8 * v27) = v71;
        }
      }
      ++*(_QWORD *)(a1 + 112);
LABEL_63:
      v7 = (uint64_t *)*v7;
    }
    while (v7);
  }
  sub_19C297114(a1 + 128, v70 + 128);
  *(_OWORD *)(a1 + 168) = 0u;
  v28 = (_QWORD *)(a1 + 168);
  *(_OWORD *)(a1 + 184) = 0u;
  *(_DWORD *)(a1 + 200) = *(_DWORD *)(v70 + 200);
  v29 = *(_QWORD *)(v70 + 176);
  if (v29 == 1)
  {
    v29 = 2;
LABEL_66:
    sub_19C2EC6BC(a1 + 168, v29);
    goto LABEL_67;
  }
  if ((v29 & (v29 - 1)) != 0)
  {
    v29 = std::__next_prime(v29);
    v61 = *(int8x8_t *)(a1 + 176);
    v62 = v29 >= *(_QWORD *)&v61;
    if (v29 > *(_QWORD *)&v61)
      goto LABEL_66;
  }
  else
  {
    v61 = 0;
    v62 = 1;
    if (v29)
      goto LABEL_66;
  }
  if (!v62)
  {
    v67 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 192) / *(float *)(a1 + 200));
    if (*(_QWORD *)&v61 < 3uLL || (v68 = (uint8x8_t)vcnt_s8(v61), v68.i16[0] = vaddlv_u8(v68), v68.u32[0] > 1uLL))
    {
      v67 = std::__next_prime(v67);
    }
    else
    {
      v69 = 1 << -(char)__clz(v67 - 1);
      if (v67 >= 2)
        v67 = v69;
    }
    if (v29 <= v67)
      v29 = v67;
    if (v29 < *(_QWORD *)&v61)
      goto LABEL_66;
  }
LABEL_67:
  v30 = *(uint64_t **)(v70 + 184);
  if (v30)
  {
    v31 = (_QWORD *)(a1 + 184);
    v32 = *(_QWORD *)(a1 + 176);
    do
    {
      v33 = *((unsigned int *)v30 + 4);
      if (v32)
      {
        v34 = (uint8x8_t)vcnt_s8((int8x8_t)v32);
        v34.i16[0] = vaddlv_u8(v34);
        if (v34.u32[0] > 1uLL)
        {
          v2 = *((unsigned int *)v30 + 4);
          if (v32 <= v33)
            v2 = v33 % v32;
        }
        else
        {
          v2 = ((_DWORD)v32 - 1) & v33;
        }
        v35 = *(uint64_t ***)(*v28 + 8 * v2);
        if (v35)
        {
          v36 = *v35;
          if (v36)
          {
            if (v34.u32[0] < 2uLL)
            {
              while (1)
              {
                v38 = v36[1];
                if (v38 == v33)
                {
                  if (*((_DWORD *)v36 + 4) == (_DWORD)v33)
                    goto LABEL_130;
                }
                else if ((v38 & (v32 - 1)) != v2)
                {
                  goto LABEL_89;
                }
                v36 = (uint64_t *)*v36;
                if (!v36)
                  goto LABEL_89;
              }
            }
            do
            {
              v37 = v36[1];
              if (v37 == v33)
              {
                if (*((_DWORD *)v36 + 4) == (_DWORD)v33)
                  goto LABEL_130;
              }
              else
              {
                if (v37 >= v32)
                  v37 %= v32;
                if (v37 != v2)
                  break;
              }
              v36 = (uint64_t *)*v36;
            }
            while (v36);
          }
        }
      }
LABEL_89:
      v39 = operator new(0x30uLL);
      v72 = v39;
      *v39 = 0;
      v39[1] = v33;
      v40 = *((_DWORD *)v30 + 4);
      v39[3] = 0;
      *((_DWORD *)v39 + 4) = v40;
      v39[4] = 0;
      v39[5] = 0;
      v42 = (_BYTE *)v30[3];
      v41 = (_BYTE *)v30[4];
      v43 = v41 - v42;
      if (v41 != v42)
      {
        if (v43 < 0)
          sub_19C2A18E8();
        v44 = (char *)operator new(v41 - v42);
        v39[3] = v44;
        v39[4] = v44;
        v45 = &v44[8 * (v43 >> 3)];
        v39[5] = v45;
        memcpy(v44, v42, v43);
        v39[4] = v45;
      }
      v46 = (float)(unint64_t)(*(_QWORD *)(a1 + 192) + 1);
      v47 = *(float *)(a1 + 200);
      if (v32 && (float)(v47 * (float)v32) >= v46)
      {
        v28 = (_QWORD *)(a1 + 168);
      }
      else
      {
        v48 = (v32 & (v32 - 1)) != 0;
        if (v32 < 3)
          v48 = 1;
        v49 = v48 | (2 * v32);
        v50 = vcvtps_u32_f32(v46 / v47);
        if (v49 <= v50)
          v51 = v50;
        else
          v51 = v49;
        v28 = (_QWORD *)(a1 + 168);
        if (v51 == 1)
        {
          v51 = 2;
        }
        else if ((v51 & (v51 - 1)) != 0)
        {
          v51 = std::__next_prime(v51);
          v32 = *(_QWORD *)(a1 + 176);
        }
        if (v51 > v32)
          goto LABEL_105;
        if (v51 < v32)
        {
          v52 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 192) / *(float *)(a1 + 200));
          if (v32 < 3 || (v53 = (uint8x8_t)vcnt_s8((int8x8_t)v32), v53.i16[0] = vaddlv_u8(v53), v53.u32[0] > 1uLL))
          {
            v52 = std::__next_prime(v52);
          }
          else
          {
            v54 = 1 << -(char)__clz(v52 - 1);
            if (v52 >= 2)
              v52 = v54;
          }
          if (v51 <= v52)
            v51 = v52;
          if (v51 < v32)
LABEL_105:
            sub_19C2EC6BC(a1 + 168, v51);
        }
        v32 = *(_QWORD *)(a1 + 176);
        if ((v32 & (v32 - 1)) != 0)
        {
          if (v32 <= v33)
            v2 = v33 % v32;
          else
            v2 = v33;
        }
        else
        {
          v2 = ((_DWORD)v32 - 1) & v33;
        }
      }
      v55 = *(_QWORD **)(*v28 + 8 * v2);
      if (v55)
      {
        *v72 = *v55;
        *v55 = v72;
      }
      else
      {
        *v72 = *v31;
        *v31 = v72;
        *(_QWORD *)(*v28 + 8 * v2) = v31;
        if (*v72)
        {
          v56 = *(_QWORD *)(*v72 + 8);
          if ((v32 & (v32 - 1)) != 0)
          {
            if (v56 >= v32)
              v56 %= v32;
          }
          else
          {
            v56 &= v32 - 1;
          }
          *(_QWORD *)(*v28 + 8 * v56) = v72;
        }
      }
      ++*(_QWORD *)(a1 + 192);
LABEL_130:
      v30 = (uint64_t *)*v30;
    }
    while (v30);
  }
  v57 = (_BYTE *)(a1 + 208);
  if (*(char *)(v70 + 231) < 0)
  {
    sub_19C2B5238(v57, *(void **)(v70 + 208), *(_QWORD *)(v70 + 216));
  }
  else
  {
    v58 = *(_OWORD *)(v70 + 208);
    *(_QWORD *)(a1 + 224) = *(_QWORD *)(v70 + 224);
    *(_OWORD *)v57 = v58;
  }
  return a1;
}

void sub_19C297060(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13)
{
  void **v13;
  uint64_t v14;

  sub_19C2EC5B4(v14);
  sub_19C2EC5B4(a10);
  sub_19C2EC61C(a11);
  sub_19C2EC5B4(a12);
  sub_19C2E23C0(a13);
  sub_19C2E23C0(v13);
  _Unwind_Resume(a1);
}

uint64_t sub_19C297114(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  size_t prime;
  int8x8_t v6;
  BOOL v7;
  unint64_t v8;
  uint8x8_t v9;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint8x8_t v14;
  uint64_t **v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  int v20;
  _BYTE *v21;
  _BYTE *v22;
  int64_t v23;
  char *v24;
  char *v25;
  float v26;
  float v27;
  _BOOL8 v28;
  unint64_t v29;
  unint64_t v30;
  size_t v31;
  unint64_t v32;
  uint8x8_t v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  _QWORD *v38;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    sub_19C2EC6BC(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v6 = *(int8x8_t *)(a1 + 8);
    v7 = prime >= *(_QWORD *)&v6;
    if (prime > *(_QWORD *)&v6)
      goto LABEL_17;
  }
  else
  {
    v6 = 0;
    v7 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v7)
  {
    v8 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v6 < 3uLL || (v9 = (uint8x8_t)vcnt_s8(v6), v9.i16[0] = vaddlv_u8(v9), v9.u32[0] > 1uLL))
    {
      v8 = std::__next_prime(v8);
    }
    else
    {
      v10 = 1 << -(char)__clz(v8 - 1);
      if (v8 >= 2)
        v8 = v10;
    }
    if (prime <= v8)
      prime = v8;
    if (prime < *(_QWORD *)&v6)
      goto LABEL_17;
  }
LABEL_18:
  v11 = *(uint64_t **)(a2 + 16);
  if (v11)
  {
    v12 = *(_QWORD *)(a1 + 8);
    do
    {
      v13 = *((unsigned int *)v11 + 4);
      if (v12)
      {
        v14 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
        v14.i16[0] = vaddlv_u8(v14);
        if (v14.u32[0] > 1uLL)
        {
          v2 = *((unsigned int *)v11 + 4);
          if (v12 <= v13)
            v2 = v13 % v12;
        }
        else
        {
          v2 = ((_DWORD)v12 - 1) & v13;
        }
        v15 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v2);
        if (v15)
        {
          v16 = *v15;
          if (v16)
          {
            if (v14.u32[0] < 2uLL)
            {
              while (1)
              {
                v18 = v16[1];
                if (v18 == v13)
                {
                  if (*((_DWORD *)v16 + 4) == (_DWORD)v13)
                    goto LABEL_80;
                }
                else if ((v18 & (v12 - 1)) != v2)
                {
                  goto LABEL_40;
                }
                v16 = (uint64_t *)*v16;
                if (!v16)
                  goto LABEL_40;
              }
            }
            do
            {
              v17 = v16[1];
              if (v17 == v13)
              {
                if (*((_DWORD *)v16 + 4) == (_DWORD)v13)
                  goto LABEL_80;
              }
              else
              {
                if (v17 >= v12)
                  v17 %= v12;
                if (v17 != v2)
                  break;
              }
              v16 = (uint64_t *)*v16;
            }
            while (v16);
          }
        }
      }
LABEL_40:
      v19 = operator new(0x30uLL);
      v38 = v19;
      *v19 = 0;
      v19[1] = v13;
      v20 = *((_DWORD *)v11 + 4);
      v19[3] = 0;
      *((_DWORD *)v19 + 4) = v20;
      v19[4] = 0;
      v19[5] = 0;
      v22 = (_BYTE *)v11[3];
      v21 = (_BYTE *)v11[4];
      v23 = v21 - v22;
      if (v21 != v22)
      {
        if (v23 < 0)
          sub_19C2A18E8();
        v24 = (char *)operator new(v21 - v22);
        v19[3] = v24;
        v19[4] = v24;
        v25 = &v24[4 * (v23 >> 2)];
        v19[5] = v25;
        memcpy(v24, v22, v23);
        v19[4] = v25;
      }
      v26 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
      v27 = *(float *)(a1 + 32);
      if (!v12 || (float)(v27 * (float)v12) < v26)
      {
        v28 = (v12 & (v12 - 1)) != 0;
        if (v12 < 3)
          v28 = 1;
        v29 = v28 | (2 * v12);
        v30 = vcvtps_u32_f32(v26 / v27);
        if (v29 <= v30)
          v31 = v30;
        else
          v31 = v29;
        if (v31 == 1)
        {
          v31 = 2;
        }
        else if ((v31 & (v31 - 1)) != 0)
        {
          v31 = std::__next_prime(v31);
          v12 = *(_QWORD *)(a1 + 8);
        }
        if (v31 > v12)
          goto LABEL_55;
        if (v31 < v12)
        {
          v32 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
          if (v12 < 3 || (v33 = (uint8x8_t)vcnt_s8((int8x8_t)v12), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
          {
            v32 = std::__next_prime(v32);
          }
          else
          {
            v34 = 1 << -(char)__clz(v32 - 1);
            if (v32 >= 2)
              v32 = v34;
          }
          if (v31 <= v32)
            v31 = v32;
          if (v31 < v12)
LABEL_55:
            sub_19C2EC6BC(a1, v31);
        }
        v12 = *(_QWORD *)(a1 + 8);
        if ((v12 & (v12 - 1)) != 0)
        {
          if (v12 <= v13)
            v2 = v13 % v12;
          else
            v2 = v13;
        }
        else
        {
          v2 = ((_DWORD)v12 - 1) & v13;
        }
      }
      v35 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v2);
      if (v35)
      {
        *v38 = *v35;
        *v35 = v38;
      }
      else
      {
        *v38 = *(_QWORD *)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v38;
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v2) = a1 + 16;
        if (*v38)
        {
          v36 = *(_QWORD *)(*v38 + 8);
          if ((v12 & (v12 - 1)) != 0)
          {
            if (v36 >= v12)
              v36 %= v12;
          }
          else
          {
            v36 &= v12 - 1;
          }
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v36) = v38;
        }
      }
      ++*(_QWORD *)(a1 + 24);
LABEL_80:
      v11 = (uint64_t *)*v11;
    }
    while (v11);
  }
  return a1;
}

void sub_19C297540(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_19C2EC5B4(v1);
  _Unwind_Resume(a1);
}

char ***sub_19C297588(char ***a1, __int128 ***a2)
{
  __int128 **v3;
  __int128 **v4;
  uint64_t v5;
  char **v6;
  __int128 *v7;
  char *v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v3 = *a2;
  v4 = a2[1];
  v5 = (char *)v4 - (char *)*a2;
  if (v4 != *a2)
  {
    if (v5 < 0)
      sub_19C2A18E8();
    v6 = (char **)operator new((char *)v4 - (char *)*a2);
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[v5 >> 3];
    do
    {
      v7 = *v3;
      v8 = (char *)operator new();
      sub_19C29769C(v8, v7);
      *v6++ = v8;
      ++v3;
    }
    while (v3 != v4);
    a1[1] = v6;
  }
  return a1;
}

void sub_19C297630(_Unwind_Exception *exception_object)
{
  void **v1;
  char *v3;
  char *v4;
  void *v5;

  v3 = (char *)*v1;
  if (*v1)
  {
    v4 = (char *)v1[1];
    v5 = *v1;
    if (v4 != v3)
    {
      do
        language_modeling::v1::Prediction::~Prediction((language_modeling::v1::Prediction *)(v4 - 8));
      while (v4 != v3);
      v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void sub_19C297678(void *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD355C](v1, 0x1032C4057ACE4D0);
  sub_19C2CDAC8(a1);
}

char *sub_19C29769C(char *__dst, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE *v13;
  __int128 v14;
  __int128 v15;

  if (*((char *)a2 + 23) < 0)
  {
    sub_19C2B5238(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    sub_19C2B5238(__dst + 24, *((void **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v5 = *(__int128 *)((char *)a2 + 24);
    *((_QWORD *)__dst + 5) = *((_QWORD *)a2 + 5);
    *(_OWORD *)(__dst + 24) = v5;
  }
  v6 = a2[7];
  v7 = a2[8];
  v8 = a2[9];
  v9 = a2[3];
  v10 = a2[4];
  v12 = a2[5];
  v11 = a2[6];
  *((_QWORD *)__dst + 20) = 0;
  *((_OWORD *)__dst + 3) = v9;
  *((_OWORD *)__dst + 4) = v10;
  *((_OWORD *)__dst + 8) = v7;
  *((_OWORD *)__dst + 9) = v8;
  *((_OWORD *)__dst + 6) = v11;
  *((_OWORD *)__dst + 7) = v6;
  *((_OWORD *)__dst + 5) = v12;
  *((_QWORD *)__dst + 21) = 0;
  *((_QWORD *)__dst + 22) = 0;
  sub_19C2E2178((_QWORD *)__dst + 20, *((_QWORD *)a2 + 20), *((_QWORD *)a2 + 21), (uint64_t)(*((_QWORD *)a2 + 21) - *((_QWORD *)a2 + 20)) >> 5);
  *((_QWORD *)__dst + 23) = 0;
  *((_QWORD *)__dst + 24) = 0;
  *((_QWORD *)__dst + 25) = 0;
  sub_19C2E2178((_QWORD *)__dst + 23, *((_QWORD *)a2 + 23), *((_QWORD *)a2 + 24), (uint64_t)(*((_QWORD *)a2 + 24) - *((_QWORD *)a2 + 23)) >> 5);
  v13 = __dst + 208;
  if (*((char *)a2 + 231) < 0)
  {
    sub_19C2B5238(v13, *((void **)a2 + 26), *((_QWORD *)a2 + 27));
  }
  else
  {
    v14 = a2[13];
    *((_QWORD *)__dst + 28) = *((_QWORD *)a2 + 28);
    *(_OWORD *)v13 = v14;
  }
  v15 = *(__int128 *)((char *)a2 + 232);
  *((_QWORD *)__dst + 31) = *((_QWORD *)a2 + 31);
  *(_OWORD *)(__dst + 232) = v15;
  return __dst;
}

void sub_19C2977C4(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void **v4;

  sub_19C2E23C0(v4);
  sub_19C2E23C0(v3);
  if (*(char *)(v1 + 47) < 0)
  {
    operator delete(*v2);
    if ((*(char *)(v1 + 23) & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if ((*(char *)(v1 + 23) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)v1);
  _Unwind_Resume(a1);
}

uint64_t language_modeling::v1::LinguisticContext::try_push_back(uint64_t *a1, uint64_t a2)
{
  sub_19C315DCC(*a1, a2);
  return 1;
}

void sub_19C297950(_QWORD *a1, const UInt8 *a2)
{
  CFIndex v3;
  CFIndex v4;
  const __CFString *v5;
  CFMutableStringRef MutableCopy;
  const __CFString *v7;
  CFTypeID TypeID;
  void *exception;
  void *v10;
  const __CFString *v11;
  CFRange v12;
  CFRange v13;
  CFRange v14;
  CFRange v15;
  CFRange v16;
  CFRange v17;
  CFRange v18;

  v3 = *((_QWORD *)a2 + 1);
  if (*((char *)a2 + 23) >= 0)
  {
    v4 = a2[23];
  }
  else
  {
    a2 = *(const UInt8 **)a2;
    v4 = v3;
  }
  v5 = CFStringCreateWithBytes(0, a2, v4, 0x8000100u, 0);
  if (!v5)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD3154](exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, v5);
  v12.length = CFStringGetLength(MutableCopy);
  v12.location = 0;
  CFStringFindAndReplace(MutableCopy, CFSTR("‘"), CFSTR("'"), v12, 0);
  v13.length = CFStringGetLength(MutableCopy);
  v13.location = 0;
  CFStringFindAndReplace(MutableCopy, CFSTR("’"), CFSTR("'"), v13, 0);
  v14.length = CFStringGetLength(MutableCopy);
  v14.location = 0;
  CFStringFindAndReplace(MutableCopy, CFSTR("‚"), CFSTR("'"), v14, 0);
  v15.length = CFStringGetLength(MutableCopy);
  v15.location = 0;
  CFStringFindAndReplace(MutableCopy, CFSTR("‛"), CFSTR("'"), v15, 0);
  v16.length = CFStringGetLength(MutableCopy);
  v16.location = 0;
  CFStringFindAndReplace(MutableCopy, CFSTR("“"), CFSTR("\""), v16, 0);
  v17.length = CFStringGetLength(MutableCopy);
  v17.location = 0;
  CFStringFindAndReplace(MutableCopy, CFSTR("”"), CFSTR("\""), v17, 0);
  v18.length = CFStringGetLength(MutableCopy);
  v18.location = 0;
  CFStringFindAndReplace(MutableCopy, CFSTR("‟"), CFSTR("\""), v18, 0);
  if (MutableCopy)
    CFRetain(MutableCopy);
  sub_19C297DB4(&v11, MutableCopy);
  v7 = v11;
  if (!v11)
  {
    v10 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD3154](v10, "Could not construct");
    goto LABEL_17;
  }
  TypeID = CFStringGetTypeID();
  if (TypeID != CFGetTypeID(v7))
  {
    v10 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD3154](v10, "Could not convert");
LABEL_17:
    __cxa_throw(v10, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  sub_19C297E60(a1, v7);
  if (v11)
    CFRelease(v11);
  if (MutableCopy)
    CFRelease(MutableCopy);
  CFRelease(v5);
}

void sub_19C297C00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *__dst, uint64_t a11, uint64_t a12, const void *a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v20;
  _QWORD *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  const char *v27;
  size_t v28;
  void *exception;

  __cxa_free_exception(v16);
  sub_19C2E5670((const void **)(v17 - 72));
  sub_19C339C1C(&__dst);
  sub_19C2E5670(&a13);
  if (a2 == 1)
  {
    v20 = __cxa_begin_catch(a1);
    sub_19C2B4F08((uint64_t)&a13);
    v21 = sub_19C2A1B24(&a15, (uint64_t)"failed to sanitize text='", 25);
    v22 = *(char *)(v15 + 23);
    if (v22 >= 0)
      v23 = v15;
    else
      v23 = *(_QWORD *)v15;
    if (v22 >= 0)
      v24 = *(unsigned __int8 *)(v15 + 23);
    else
      v24 = *(_QWORD *)(v15 + 8);
    v25 = sub_19C2A1B24(v21, v23, v24);
    v26 = sub_19C2A1B24(v25, (uint64_t)"': ", 3);
    v27 = (const char *)(*(uint64_t (**)(void *))(*(_QWORD *)v20 + 16))(v20);
    v28 = strlen(v27);
    sub_19C2A1B24(v26, (uint64_t)v27, v28);
    exception = __cxa_allocate_exception(0x10uLL);
    sub_19C351068(&__dst, (uint64_t)&a13);
    MEMORY[0x1A1AD3160](exception, &__dst);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  _Unwind_Resume(a1);
}

void sub_19C297D5C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  void *v16;
  int v17;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v17 & 1) == 0)
      goto LABEL_6;
  }
  else if (!v17)
  {
LABEL_6:
    sub_19C2B5034((uint64_t)&a16);
    __cxa_end_catch();
    JUMPOUT(0x19C297DA8);
  }
  __cxa_free_exception(v16);
  goto LABEL_6;
}

_QWORD *sub_19C297DB4(_QWORD *a1, CFTypeRef cf)
{
  CFTypeID v3;
  void *exception;

  *a1 = cf;
  if (cf)
  {
    v3 = CFGetTypeID(cf);
    if (v3 != CFStringGetTypeID())
    {
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1A1AD3154](exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
    }
  }
  return a1;
}

void sub_19C297E30(_Unwind_Exception *a1)
{
  CFTypeRef *v1;
  void *v2;

  __cxa_free_exception(v2);
  if (*v1)
    CFRelease(*v1);
  _Unwind_Resume(a1);
}

unint64_t sub_19C297E60(_QWORD *a1, CFStringRef theString)
{
  const char *CStringPtr;
  const char *v5;
  unint64_t result;
  size_t v7;
  CFIndex Length;
  size_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  CFIndex v14;
  CFIndex v15;
  UInt8 *v16;
  CFIndex maxBufLen;
  CFRange v18;
  CFRange v19;

  CStringPtr = CFStringGetCStringPtr(theString, 0x8000100u);
  if (CStringPtr)
  {
    v5 = CStringPtr;
    result = strlen(CStringPtr);
    if (result <= 0x7FFFFFFFFFFFFFF7)
    {
      v7 = result;
      if (result >= 0x17)
      {
        v11 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((result | 7) != 0x17)
          v11 = result | 7;
        v12 = v11 + 1;
        v13 = operator new(v11 + 1);
        a1[1] = v7;
        a1[2] = v12 | 0x8000000000000000;
        *a1 = v13;
        a1 = v13;
      }
      else
      {
        *((_BYTE *)a1 + 23) = result;
        if (!result)
          goto LABEL_14;
      }
      result = (unint64_t)memmove(a1, v5, v7);
LABEL_14:
      *((_BYTE *)a1 + v7) = 0;
      return result;
    }
LABEL_23:
    sub_19C2A1A54();
  }
  Length = CFStringGetLength(theString);
  maxBufLen = 0;
  v18.location = 0;
  v18.length = Length;
  CFStringGetBytes(theString, v18, 0x8000100u, 0, 0, 0, 0, &maxBufLen);
  v9 = maxBufLen;
  if ((unint64_t)maxBufLen > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_23;
  if ((unint64_t)maxBufLen >= 0x17)
  {
    v14 = (maxBufLen & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((maxBufLen | 7) != 0x17)
      v14 = maxBufLen | 7;
    v15 = v14 + 1;
    v10 = operator new(v14 + 1);
    a1[1] = v9;
    a1[2] = v15 | 0x8000000000000000;
    *a1 = v10;
  }
  else
  {
    *((_BYTE *)a1 + 23) = maxBufLen;
    v10 = a1;
    if (!v9)
      goto LABEL_19;
  }
  bzero(v10, v9);
LABEL_19:
  *((_BYTE *)v10 + v9) = 0;
  if (*((char *)a1 + 23) >= 0)
    v16 = (UInt8 *)a1;
  else
    v16 = (UInt8 *)*a1;
  v19.location = 0;
  v19.length = Length;
  return CFStringGetBytes(theString, v19, 0x8000100u, 0, 0, v16, maxBufLen, &maxBufLen);
}

void sub_19C298010(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

CFIndex sub_19C29802C(__CFBundle *a1, const __CFLocale *a2, const __CFString *a3)
{
  CFIndex result;
  const __CFDictionary *v7;
  const __CFURL *v8;
  const __CFString *PathComponent;
  CFComparisonResult v10;
  const __CFString *v11;
  const __CFString *Value;
  const __CFArray *v13;
  const __CFArray *v14;
  CFIndex Count;
  CFIndex v16;
  CFIndex v17;
  char v18;
  const __CFString *ValueAtIndex;
  const __CFLocale *v20;
  const __CFLocale *v21;
  unsigned int v22;
  CFRange v23;

  result = (CFIndex)CFBundleGetInfoDictionary(a1);
  if (result)
  {
    v7 = (const __CFDictionary *)result;
    result = CFDictionaryGetCount((CFDictionaryRef)result);
    if (result)
    {
      if (a3)
      {
        v8 = CFBundleCopyBundleURL(a1);
        PathComponent = CFURLCopyLastPathComponent(v8);
        if (CFStringHasSuffix(a3, CFSTR(".lm")))
        {
          v10 = CFStringCompare(PathComponent, a3, 0);
        }
        else
        {
          v23.length = CFStringGetLength(PathComponent) - 3;
          v23.location = 0;
          v11 = CFStringCreateWithSubstring(0, PathComponent, v23);
          v10 = CFStringCompare(v11, a3, 0);
          if (v11)
            CFRelease(v11);
        }
        if (PathComponent)
          CFRelease(PathComponent);
        if (v8)
          CFRelease(v8);
        if (v10)
          return 0;
      }
      Value = (const __CFString *)CFDictionaryGetValue(v7, CFSTR("Locale"));
      if (Value
        || (result = (CFIndex)CFDictionaryGetValue(v7, CFSTR("Language")), (Value = (const __CFString *)result) != 0))
      {
        v13 = (const __CFArray *)CFDictionaryGetValue(v7, CFSTR("Alternate locales"));
        if (v13)
        {
          v14 = v13;
          Count = CFArrayGetCount(v13);
          if (Count >= 1)
          {
            v16 = Count;
            v17 = 0;
            v18 = 0;
            do
            {
              ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v14, v17);
              v20 = CFLocaleCreate(0, ValueAtIndex);
              if (sub_19C298280(v20, a2))
                v18 = 1;
              if (v20)
                CFRelease(v20);
              ++v17;
            }
            while (v16 != v17);
            if ((v18 & 1) != 0)
              return 1;
          }
        }
        v21 = CFLocaleCreate(0, Value);
        v22 = sub_19C298280(v21, a2);
        if (v21)
          CFRelease(v21);
        return v22 != 0;
      }
    }
  }
  return result;
}

void sub_19C298220(_Unwind_Exception *a1, uint64_t a2, ...)
{
  const void *v3;
  va_list va;
  const void *v5;
  va_list va1;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, const void *);
  va_copy(va2, va1);
  v5 = va_arg(va2, const void *);
  sub_19C2FE810((const void **)va);
  sub_19C2FE810((const void **)va1);
  sub_19C31352C((const void **)va2);
  _Unwind_Resume(a1);
}

const __CFString *sub_19C298280(const __CFLocale *a1, const __CFLocale *a2)
{
  const __CFString *v4;
  const __CFString *Value;
  const __CFString *v6;
  BOOL v7;
  const __CFString *result;
  const __CFString *v9;
  const __CFString *v10;
  const __CFString *v11;
  const __CFString *v12;
  const __CFString *v13;
  CFTypeRef v14;
  const __CFString *v15;
  BOOL v16;
  BOOL v17;

  v4 = (const __CFString *)*MEMORY[0x1E0C9B088];
  Value = (const __CFString *)CFLocaleGetValue(a1, (CFLocaleKey)*MEMORY[0x1E0C9B088]);
  v6 = (const __CFString *)CFLocaleGetValue(a2, v4);
  if (Value)
    v7 = v6 == 0;
  else
    v7 = 1;
  if (v7 || CFStringCompare(Value, v6, 0))
    return 0;
  v9 = (const __CFString *)*MEMORY[0x1E0C9B060];
  v10 = (const __CFString *)CFLocaleGetValue(a1, (CFLocaleKey)*MEMORY[0x1E0C9B060]);
  if (v10)
  {
    v11 = v10;
    result = (const __CFString *)CFLocaleGetValue(a2, v9);
    if (!result)
      return result;
    if (CFStringCompare(result, v11, 0))
      return 0;
  }
  v12 = (const __CFString *)*MEMORY[0x1E0C9B090];
  v13 = (const __CFString *)CFLocaleGetValue(a1, (CFLocaleKey)*MEMORY[0x1E0C9B090]);
  v14 = CFLocaleGetValue(a2, v12);
  if (!((unint64_t)v13 | (unint64_t)v14))
    return (const __CFString *)1;
  v15 = (const __CFString *)v14;
  result = 0;
  v16 = v13 != 0;
  if (v15)
    v16 = 0;
  if (v13)
    v17 = 1;
  else
    v17 = v15 == 0;
  if (v17 && !v16)
    return (const __CFString *)(CFStringCompare(v15, v13, 0) == kCFCompareEqualTo);
  return result;
}

CFURLRef sub_19C2983A4(const __CFString *a1)
{
  CFTypeID v2;
  CFURLRef result;
  CFTypeID v4;

  if (!a1)
  {
    if (qword_1EDB971C8 == -1)
      return (CFURLRef)CFRetain((CFTypeRef)qword_1EDB971C0);
    goto LABEL_12;
  }
  v2 = CFGetTypeID(a1);
  if (v2 == CFStringGetTypeID())
  {
    result = CFURLCreateWithFileSystemPath(0, a1, kCFURLPOSIXPathStyle, 1u);
    if (!result)
      goto LABEL_10;
  }
  else
  {
    v4 = CFGetTypeID(a1);
    if (v4 != CFURLGetTypeID() || (result = CFURLCopyAbsoluteURL((CFURLRef)a1)) == 0)
    {
LABEL_10:
      if (qword_1EDB971C8 == -1)
        return (CFURLRef)CFRetain((CFTypeRef)qword_1EDB971C0);
LABEL_12:
      dispatch_once(&qword_1EDB971C8, &unk_1E3D3A6C8);
      return (CFURLRef)CFRetain((CFTypeRef)qword_1EDB971C0);
    }
  }
  return result;
}

_QWORD *language_modeling::v1::LanguageModel::makeSession@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;
  _QWORD v8[5];

  v8[4] = *MEMORY[0x1E0C80C00];
  v6 = (_QWORD *)operator new();
  result = (*(_QWORD *(**)(_QWORD *__return_ptr, _QWORD, uint64_t))(*(_QWORD *)*a1 + 24))(v8, *a1, a2);
  *v6 = v8[0];
  *a3 = v6;
  return result;
}

void sub_19C298508(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, __int128 buf)
{
  _QWORD *v11;
  uint64_t v12;
  void *v15;
  NSObject *v16;
  uint64_t v17;

  if (a2)
  {
    MEMORY[0x1A1AD355C](v12, 0x20C4093837F09);
    if (a2 == 2)
    {
      v15 = __cxa_begin_catch(a1);
      if (qword_1EDB97228 != -1)
        dispatch_once(&qword_1EDB97228, &unk_1E3D3ABD0);
      v16 = qword_1EDB97220;
      if (os_log_type_enabled((os_log_t)qword_1EDB97220, OS_LOG_TYPE_ERROR))
      {
        v17 = (*(uint64_t (**)(void *))(*(_QWORD *)v15 + 16))(v15);
        LODWORD(buf) = 136315394;
        *(_QWORD *)((char *)&buf + 4) = "makeSession";
        WORD6(buf) = 2080;
        *(_QWORD *)((char *)&buf + 14) = v17;
        _os_log_error_impl(&dword_19C291000, v16, OS_LOG_TYPE_ERROR, "%s: caught unexpected exception: %s", (uint8_t *)&buf, 0x16u);
      }
      *v11 = 0;
      __cxa_end_catch();
      JUMPOUT(0x19C2984D8);
    }
    sub_19C2CDAC8(a1);
  }
  _Unwind_Resume(a1);
}

void sub_19C298610(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;

  v6 = *(_QWORD *)(a1 + 448);
  *(_QWORD *)&v62 = *(_QWORD *)(a1 + 440);
  *((_QWORD *)&v62 + 1) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = *(_QWORD *)(a1 + 464);
  *(_QWORD *)&v61 = *(_QWORD *)(a1 + 456);
  *((_QWORD *)&v61 + 1) = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  v12 = *(_QWORD *)(a1 + 480);
  *(_QWORD *)&v60 = *(_QWORD *)(a1 + 472);
  *((_QWORD *)&v60 + 1) = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v15 = *(_QWORD *)(a1 + 496);
  *(_QWORD *)&v59 = *(_QWORD *)(a1 + 488);
  *((_QWORD *)&v59 + 1) = v15;
  if (v15)
  {
    v16 = (unint64_t *)(v15 + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  v18 = *(_QWORD *)(a1 + 512);
  *(_QWORD *)&v58 = *(_QWORD *)(a1 + 504);
  *((_QWORD *)&v58 + 1) = v18;
  if (v18)
  {
    v19 = (unint64_t *)(v18 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  sub_19C298AC0(&v57, a1 + 104, a2);
  v21 = operator new();
  v22 = v62;
  v62 = 0uLL;
  v23 = v61;
  v61 = 0uLL;
  v67 = v23;
  v68 = v22;
  v66 = v60;
  v60 = 0uLL;
  v24 = v59;
  v59 = 0uLL;
  v56 = (std::__shared_weak_count *)*((_QWORD *)&v58 + 1);
  v64 = v58;
  v65 = v24;
  v58 = 0uLL;
  v25 = v57;
  v57 = 0;
  v63 = v25;
  sub_19C3124B8(v21, a1 + 32, &v68, &v67, &v66, &v65, &v64, (__int128 *)(a1 + 80), a2, &v63, (_QWORD *)(a1 + 520), 1);
  v26 = v63;
  v63 = 0;
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  if (v56)
  {
    p_shared_owners = (unint64_t *)&v56->__shared_owners_;
    do
      v28 = __ldaxr(p_shared_owners);
    while (__stlxr(v28 - 1, p_shared_owners));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  v29 = (std::__shared_weak_count *)*((_QWORD *)&v65 + 1);
  if (*((_QWORD *)&v65 + 1))
  {
    v30 = (unint64_t *)(*((_QWORD *)&v65 + 1) + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v32 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
  if (*((_QWORD *)&v66 + 1))
  {
    v33 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v35 = (std::__shared_weak_count *)*((_QWORD *)&v67 + 1);
  if (*((_QWORD *)&v67 + 1))
  {
    v36 = (unint64_t *)(*((_QWORD *)&v67 + 1) + 8);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  v38 = (std::__shared_weak_count *)*((_QWORD *)&v68 + 1);
  if (*((_QWORD *)&v68 + 1))
  {
    v39 = (unint64_t *)(*((_QWORD *)&v68 + 1) + 8);
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  *a3 = v21;
  if (v57)
    (*(void (**)(uint64_t))(*(_QWORD *)v57 + 8))(v57);
  v41 = (std::__shared_weak_count *)*((_QWORD *)&v58 + 1);
  if (*((_QWORD *)&v58 + 1))
  {
    v42 = (unint64_t *)(*((_QWORD *)&v58 + 1) + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  v44 = (std::__shared_weak_count *)*((_QWORD *)&v59 + 1);
  if (*((_QWORD *)&v59 + 1))
  {
    v45 = (unint64_t *)(*((_QWORD *)&v59 + 1) + 8);
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  v47 = (std::__shared_weak_count *)*((_QWORD *)&v60 + 1);
  if (*((_QWORD *)&v60 + 1))
  {
    v48 = (unint64_t *)(*((_QWORD *)&v60 + 1) + 8);
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  v50 = (std::__shared_weak_count *)*((_QWORD *)&v61 + 1);
  if (!*((_QWORD *)&v61 + 1))
    goto LABEL_64;
  v51 = (unint64_t *)(*((_QWORD *)&v61 + 1) + 8);
  do
    v52 = __ldaxr(v51);
  while (__stlxr(v52 - 1, v51));
  if (!v52)
  {
    ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
    std::__shared_weak_count::__release_weak(v50);
    v53 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
    if (!*((_QWORD *)&v62 + 1))
      return;
  }
  else
  {
LABEL_64:
    v53 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
    if (!*((_QWORD *)&v62 + 1))
      return;
  }
  v54 = (unint64_t *)&v53->__shared_owners_;
  do
    v55 = __ldaxr(v54);
  while (__stlxr(v55 - 1, v54));
  if (!v55)
  {
    ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
    std::__shared_weak_count::__release_weak(v53);
  }
}

void sub_19C298A14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  va_list va;
  uint64_t v15;
  uint64_t v16;
  va_list va1;
  uint64_t v18;
  uint64_t v19;
  va_list va2;
  uint64_t v21;
  uint64_t v22;
  va_list va3;
  uint64_t v24;
  va_list va4;

  va_start(va4, a9);
  va_start(va3, a9);
  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  v13 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v16 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v19 = va_arg(va3, _QWORD);
  v21 = va_arg(va3, _QWORD);
  va_copy(va4, va3);
  v22 = va_arg(va4, _QWORD);
  v24 = va_arg(va4, _QWORD);
  v12 = *(_QWORD *)(v10 - 136);
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  sub_19C2B43C8(v10 - 128);
  sub_19C2B43C8(v10 - 112);
  sub_19C2B43C8(v10 - 96);
  sub_19C2B43C8(v10 - 80);
  sub_19C2B43C8(v10 - 64);
  MEMORY[0x1A1AD355C](v9, 0x10F3C403524454CLL);
  sub_19C2B43C8((uint64_t)va);
  sub_19C2B43C8((uint64_t)va1);
  sub_19C2B43C8((uint64_t)va2);
  sub_19C2B43C8((uint64_t)va3);
  sub_19C2B43C8((uint64_t)va4);
  _Unwind_Resume(a1);
}

void sub_19C298AC0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  const void *v6;
  size_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  const __CFString *v15;
  const UInt8 *v16;
  uint64_t *v17;
  uint64_t v18;
  int v19;
  const UInt8 *v20;
  CFIndex v21;
  __CFString *v22;
  __CFString *v23;
  uint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  const UInt8 *v29;
  int v30;
  unsigned __int16 v31;
  const void *v32;
  size_t v33;
  size_t v34;
  void *p_p;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  int v39;
  const void *v40;
  size_t v41;
  size_t v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  __int128 v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  unsigned __int8 v55;
  NSObject *v56;
  unint64_t v57;
  char *v58;
  char *v59;
  unint64_t *v60;
  unint64_t v61;
  _QWORD *v62;
  int v63;
  size_t v64;
  unint64_t v65;
  uint64_t v66;
  void *exception;
  _BYTE *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  const void *v72;
  _BYTE *v73;
  __int128 v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  void *__p;
  size_t v78;
  int64_t v79;
  _BYTE __dst[37];
  _BYTE v81[3];

  *(_QWORD *)&__dst[24] = *MEMORY[0x1E0C80C00];
  v6 = (const void *)language_modeling::v1::kEnvironmentAppIdentifierKey;
  v7 = strlen((const char *)language_modeling::v1::kEnvironmentAppIdentifierKey);
  if (v7 > 0x7FFFFFFFFFFFFFF7)
    sub_19C2A1A54();
  v8 = v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v9 = operator new(v10 + 1);
    *(_QWORD *)&__dst[8] = v8;
    *(_QWORD *)&__dst[16] = v11 | 0x8000000000000000;
    *(_QWORD *)__dst = v9;
    goto LABEL_8;
  }
  __dst[23] = v7;
  v9 = __dst;
  if (v7)
LABEL_8:
    memmove(v9, v6, v8);
  v9[v8] = 0;
  v12 = sub_19C29A674(a3, (const void **)__dst);
  if ((__dst[23] & 0x80000000) != 0)
    operator delete(*(void **)__dst);
  v13 = (uint64_t *)(a3 + 8);
  if ((uint64_t *)(a3 + 8) != v12)
  {
    if (*((_DWORD *)v12 + 20) != 1)
      sub_19C2F5A74();
    v14 = *(_QWORD *)(a2 + 64);
    v15 = (const __CFString *)kLMLanguageModelAppContextKey;
    v18 = v12[7];
    v17 = v12 + 7;
    v16 = (const UInt8 *)v18;
    v19 = *((char *)v17 + 23);
    if (v19 >= 0)
      v20 = (const UInt8 *)v17;
    else
      v20 = v16;
    if (v19 >= 0)
      v21 = *((unsigned __int8 *)v17 + 23);
    else
      v21 = v17[1];
    v22 = (__CFString *)CFStringCreateWithBytes(0, v20, v21, 0x8000100u, 0);
    *(_QWORD *)__dst = v22;
    if (!v22)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1A1AD3154](exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
    }
    v23 = v22;
    if (sub_19C2997C4(*(_QWORD *)(v14 + 232), v15, v22, 0)
      && *(_BYTE *)(*(_QWORD *)(v14 + 232) + 192)
      && !*(_QWORD *)(v14 + 48))
    {
      sub_19C3284D4(v14);
    }
    CFRelease(v23);
  }
  v24 = operator new();
  v25 = v24;
  v26 = *(std::__shared_weak_count **)(a2 + 72);
  v75 = *(_QWORD *)(a2 + 64);
  v76 = v26;
  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldxr(p_shared_owners);
    while (__stxr(v28 + 1, p_shared_owners));
  }
  v29 = (const UInt8 *)(a2 + 16);
  *(_QWORD *)v24 = &off_1E3D34D10;
  v30 = atomic_load(word_1EDB96DF8);
  if (v30 == 0xFFFF)
    atomic_store(0, word_1EDB96DF8);
  do
    v31 = __ldaxr(word_1EDB96DF8);
  while (__stlxr(v31 + 1, word_1EDB96DF8));
  *(_WORD *)(v24 + 8) = v31;
  if (*(char *)(a2 + 63) < 0)
  {
    sub_19C2B5238((_BYTE *)(v24 + 16), *(void **)(a2 + 40), *(_QWORD *)(a2 + 48));
  }
  else
  {
    *(_OWORD *)(v24 + 16) = *(_OWORD *)(a2 + 40);
    *(_QWORD *)(v24 + 32) = *(_QWORD *)(a2 + 56);
  }
  v32 = (const void *)language_modeling::v1::kEnvironmentSessionTypeKey;
  v33 = strlen((const char *)language_modeling::v1::kEnvironmentSessionTypeKey);
  if (v33 > 0x7FFFFFFFFFFFFFF7)
    sub_19C2A1A54();
  v34 = v33;
  if (v33 >= 0x17)
  {
    v36 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v33 | 7) != 0x17)
      v36 = v33 | 7;
    v37 = v36 + 1;
    p_p = operator new(v36 + 1);
    v78 = v34;
    v79 = v37 | 0x8000000000000000;
    __p = p_p;
    goto LABEL_41;
  }
  HIBYTE(v79) = v33;
  p_p = &__p;
  if (v33)
LABEL_41:
    memmove(p_p, v32, v34);
  *((_BYTE *)p_p + v34) = 0;
  v38 = sub_19C29A674(a3, (const void **)&__p);
  if (v13 == v38)
  {
    v62 = __cxa_allocate_exception(0x20uLL);
    v63 = SHIBYTE(v79);
    if (v79 >= 0)
      v64 = HIBYTE(v79);
    else
      v64 = v78;
    v65 = v64 + 37;
    if (v64 + 37 > 0x7FFFFFFFFFFFFFF7)
      sub_19C2A1A54();
    if (v65 > 0x16)
    {
      v69 = (v65 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v65 | 7) != 0x17)
        v69 = v65 | 7;
      v70 = v69 + 1;
      v71 = (char *)operator new(v69 + 1);
      *(_QWORD *)&__dst[8] = v64 + 37;
      *(_QWORD *)&__dst[16] = v70 | 0x8000000000000000;
      *(_QWORD *)__dst = v71;
      qmemcpy(v71, "Environment is missing required key: ", 37);
      v68 = v71 + 37;
      if (!v64)
      {
LABEL_115:
        v68[v64] = 0;
        *v62 = off_1E3D38838;
        v73 = v62 + 1;
        if ((__dst[23] & 0x80000000) != 0)
        {
          sub_19C2B5238(v73, *(void **)__dst, *(unint64_t *)&__dst[8]);
        }
        else
        {
          v74 = *(_OWORD *)__dst;
          v62[3] = *(_QWORD *)&__dst[16];
          *(_OWORD *)v73 = v74;
        }
        __cxa_throw(v62, (struct type_info *)&unk_1E3D32968, (void (*)(void *))sub_19C3123E4);
      }
    }
    else
    {
      qmemcpy(__dst, "Environment is missing required key: ", sizeof(__dst));
      v68 = v81;
    }
    if (v63 >= 0)
      v72 = &__p;
    else
      v72 = __p;
    memmove(v68, v72, v64);
    goto LABEL_115;
  }
  if (*((_DWORD *)v38 + 20))
    sub_19C2F5A74();
  v39 = *((_DWORD *)v38 + 14);
  if (SHIBYTE(v79) < 0)
    operator delete(__p);
  *(_DWORD *)(v25 + 40) = v39;
  v40 = (const void *)language_modeling::v1::kEnvironmentRecipientIdentifierKey;
  v41 = strlen((const char *)language_modeling::v1::kEnvironmentRecipientIdentifierKey);
  if (v41 > 0x7FFFFFFFFFFFFFF7)
    sub_19C2A1A54();
  v42 = v41;
  if (v41 >= 0x17)
  {
    v44 = (v41 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v41 | 7) != 0x17)
      v44 = v41 | 7;
    v45 = v44 + 1;
    v43 = operator new(v44 + 1);
    *(_QWORD *)&__dst[8] = v42;
    *(_QWORD *)&__dst[16] = v45 | 0x8000000000000000;
    *(_QWORD *)__dst = v43;
    goto LABEL_53;
  }
  __dst[23] = v41;
  v43 = __dst;
  if (v41)
LABEL_53:
    memmove(v43, v40, v42);
  v43[v42] = 0;
  v46 = sub_19C29A674(a3, (const void **)__dst);
  if (v13 == v46)
  {
    strcpy((char *)(v25 + 48), "DefaultRecipientID");
    *(_BYTE *)(v25 + 71) = 18;
  }
  else
  {
    if (*((_DWORD *)v46 + 20) != 1)
      sub_19C2F5A74();
    if (*((char *)v46 + 79) < 0)
    {
      sub_19C2B5238((_BYTE *)(v25 + 48), (void *)v46[7], v46[8]);
    }
    else
    {
      v47 = *(_OWORD *)(v46 + 7);
      *(_QWORD *)(v25 + 64) = v46[9];
      *(_OWORD *)(v25 + 48) = v47;
    }
  }
  if ((__dst[23] & 0x80000000) != 0)
    operator delete(*(void **)__dst);
  *(_QWORD *)(v25 + 72) = v75;
  *(_QWORD *)(v25 + 80) = v76;
  if (v76)
  {
    v48 = (unint64_t *)&v76->__shared_owners_;
    do
      v49 = __ldxr(v48);
    while (__stxr(v49 + 1, v48));
  }
  *(_BYTE *)(v25 + 88) = *(_QWORD *)(v75 + 464) != 0;
  *(_QWORD *)(v25 + 96) = 0;
  v50 = operator new();
  *(_QWORD *)v50 = &off_1E3D34BE0;
  *(_QWORD *)(v50 + 8) = 0;
  *(_QWORD *)(v50 + 16) = v75;
  *(_QWORD *)(v50 + 24) = v76;
  if (v76)
  {
    v51 = (unint64_t *)&v76->__shared_owners_;
    do
      v52 = __ldxr(v51);
    while (__stxr(v52 + 1, v51));
  }
  *(_BYTE *)(v50 + 32) = *(_BYTE *)(v75 + 440);
  *(_QWORD *)(v50 + 48) = 0;
  *(_QWORD *)(v50 + 56) = 0;
  *(_QWORD *)(v50 + 40) = 0;
  *(_QWORD *)(v25 + 104) = v50;
  *(_QWORD *)(v25 + 112) = 0;
  *(_QWORD *)(v25 + 120) = v75;
  *(_QWORD *)(v25 + 128) = v76;
  if (v76)
  {
    v53 = (unint64_t *)&v76->__shared_owners_;
    do
      v54 = __ldxr(v53);
    while (__stxr(v54 + 1, v53));
  }
  sub_19C29A778((uint64_t *)(v25 + 136), v29);
  *(_OWORD *)(v25 + 152) = 0u;
  *(_DWORD *)(v25 + 144) = *(_DWORD *)(v25 + 40) == 1;
  *(_OWORD *)(v25 + 168) = 0u;
  *(_OWORD *)(v25 + 184) = 0u;
  *(_OWORD *)(v25 + 200) = 0u;
  *(_QWORD *)(v25 + 216) = 0;
  v55 = atomic_load((unsigned __int8 *)&qword_1EDB96E08);
  if ((v55 & 1) == 0 && __cxa_guard_acquire(&qword_1EDB96E08))
  {
    *(_QWORD *)__dst = operator new(0x20uLL);
    *(_OWORD *)&__dst[8] = xmmword_19C46DE80;
    strcpy(*(char **)__dst, "AdaptationContextCacheSize");
    qword_1EE41C030 = sub_19C3AA22C((uint64_t)__dst);
    *(_QWORD *)&byte_1EE41C038 = v66;
    if ((__dst[23] & 0x80000000) != 0)
      operator delete(*(void **)__dst);
    __cxa_guard_release(&qword_1EDB96E08);
  }
  if (byte_1EE41C038)
  {
    if (qword_1EDB97228 != -1)
      dispatch_once(&qword_1EDB97228, &unk_1E3D3ABD0);
    v56 = qword_1EDB97220;
    if (os_log_type_enabled((os_log_t)qword_1EDB97220, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__dst = 136315394;
      *(_QWORD *)&__dst[4] = "AdaptationContextCacheSize";
      *(_WORD *)&__dst[12] = 2048;
      *(_QWORD *)&__dst[14] = qword_1EE41C030;
      _os_log_impl(&dword_19C291000, v56, OS_LOG_TYPE_DEFAULT, "Setting configuration value %s=%zu (overridden by user preferences)", __dst, 0x16u);
    }
    v57 = qword_1EE41C030;
  }
  else
  {
    v57 = 10;
  }
  sub_19C2996C8((_QWORD *)(v25 + 224), v57);
  *(_QWORD *)(v25 + 248) = 0;
  *(_QWORD *)(v25 + 256) = 0;
  *(_QWORD *)(v25 + 264) = 0;
  if (v57)
  {
    if (v57 >= 0xAAAAAAAAAAAAAABLL)
      sub_19C2A18E8();
    v58 = (char *)operator new(24 * v57);
    *(_QWORD *)(v25 + 248) = v58;
    *(_QWORD *)(v25 + 264) = &v58[24 * v57];
    bzero(v58, 24 * ((24 * v57 - 24) / 0x18) + 24);
    *(_QWORD *)(v25 + 256) = &v58[24 * ((24 * v57 - 24) / 0x18) + 24];
    *(_QWORD *)(v25 + 280) = 0;
    *(_QWORD *)(v25 + 288) = 0;
    *(_QWORD *)(v25 + 272) = 0;
    v59 = (char *)operator new(8 * v57);
    *(_QWORD *)(v25 + 272) = v59;
    *(_QWORD *)(v25 + 288) = &v59[8 * v57];
    bzero(v59, 8 * v57);
    *(_QWORD *)(v25 + 280) = &v59[8 * v57];
  }
  else
  {
    *(_QWORD *)(v25 + 272) = 0;
    *(_QWORD *)(v25 + 280) = 0;
    *(_QWORD *)(v25 + 288) = 0;
  }
  *(_QWORD *)(v25 + 296) = 0;
  *(_QWORD *)(v25 + 304) = 0;
  *(_OWORD *)(v25 + 312) = 0u;
  *(_DWORD *)(v25 + 328) = 0;
  *(_OWORD *)(v25 + 336) = 0u;
  sub_19C43CEEC(v25);
  *a1 = v25;
  if (v76)
  {
    v60 = (unint64_t *)&v76->__shared_owners_;
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
}

void sub_19C2993B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, void **a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  void **v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;

  if (a25 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_1EDB96E08);
  sub_19C336DA8(v25);
  v29 = *v26;
  *v26 = 0;
  if (v29)
  {
    v30 = sub_19C2966B4(v29);
    MEMORY[0x1A1AD355C](v30, 0x10F0C4069D522A4);
  }
  v31 = *(std::__shared_weak_count **)(v27 + 128);
  if (v31)
  {
    p_shared_owners = (unint64_t *)&v31->__shared_owners_;
    do
      v33 = __ldaxr(p_shared_owners);
    while (__stlxr(v33 - 1, p_shared_owners));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v34 = *(_QWORD *)(v27 + 112);
  *(_QWORD *)(v27 + 112) = 0;
  if (v34)
    (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
  v35 = *(_QWORD *)(v27 + 104);
  *(_QWORD *)(v27 + 104) = 0;
  if (v35)
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  v36 = *(_QWORD *)(v27 + 96);
  *(_QWORD *)(v27 + 96) = 0;
  if (v36)
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
  v37 = *(std::__shared_weak_count **)(v27 + 80);
  if (v37)
  {
    v38 = (unint64_t *)&v37->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  if (*(char *)(v27 + 71) < 0)
    operator delete(*a9);
  if (*(char *)(v27 + 39) < 0)
    operator delete(*a10);
  sub_19C2B43C8((uint64_t)&a12);
  MEMORY[0x1A1AD355C](v27, 0x10B3C40B97B8E0ELL);
  _Unwind_Resume(a1);
}

_QWORD *sub_19C2996C8(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      sub_19C2A18E8();
    v4 = (char *)operator new(24 * a2);
    *a1 = v4;
    a1[2] = &v4[24 * a2];
    v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_19C299770(_Unwind_Exception *exception_object)
{
  void **v1;
  void **v3;
  void **v4;
  void *v5;

  v3 = (void **)*v1;
  if (*v1)
  {
    v4 = (void **)v1[1];
    v5 = *v1;
    if (v4 != v3)
    {
      do
      {
        if (*((char *)v4 - 1) < 0)
          operator delete(*(v4 - 3));
        v4 -= 3;
      }
      while (v4 != v3);
      v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C2997C4(uint64_t a1, CFStringRef theString1, __CFString *a3, CFErrorRef *a4)
{
  CFComparisonResult v8;
  CFTypeID v9;
  int v10;
  CFTypeID v11;
  void **v12;
  CFTypeID v13;
  std::string *v14;
  __int128 v15;
  _BYTE *v17;
  void **v18;
  std::string v19;
  void *__p[4];

  if (CFStringCompare(theString1, (CFStringRef)kLMLanguageModelAdaptationEnabledKey, 0) == kCFCompareEqualTo)
  {
    *(_BYTE *)(a1 + 192) = sub_19C29CB48(a3, 0);
    return 1;
  }
  if (CFStringCompare(theString1, (CFStringRef)kLMLanguageModelAppContextKey, 0) == kCFCompareEqualTo)
  {
    if (!sub_19C299E2C((void **)(a1 + 88), a3, 0))
      goto LABEL_34;
    HIBYTE(__p[2]) = 17;
    strcpy((char *)__p, "appContextChanged");
    sub_19C299C5C(a1, (uint64_t)__p);
LABEL_50:
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
    return 1;
  }
  if (CFStringCompare(theString1, (CFStringRef)kLMLanguageModelAppGenreKey, 0) == kCFCompareEqualTo)
  {
    if (a3)
    {
      if (CFEqual(a3, (CFTypeRef)kLMLanguageModelInformalAppGenre))
      {
        v10 = 1;
      }
      else
      {
        if (!CFEqual(a3, (CFTypeRef)kLMLanguageModelFormalAppGenre))
          goto LABEL_34;
        v10 = 2;
      }
    }
    else
    {
      v10 = 0;
    }
    *(_DWORD *)(a1 + 112) = v10;
    HIBYTE(__p[2]) = 15;
    strcpy((char *)__p, "appGenreChanged");
    sub_19C299C5C(a1, (uint64_t)__p);
    goto LABEL_50;
  }
  if (CFStringCompare(theString1, (CFStringRef)kLMLanguageModelRecipientContextKey, 0) == kCFCompareEqualTo)
  {
    if (!sub_19C29D3C0(a1 + 88, a3))
      goto LABEL_34;
    __p[0] = operator new(0x19uLL);
    *(_OWORD *)&__p[1] = xmmword_19C46DFA0;
    strcpy((char *)__p[0], "recipientContextChanged");
    sub_19C299C5C(a1, (uint64_t)__p);
    goto LABEL_50;
  }
  if (CFStringCompare(theString1, (CFStringRef)kLMLanguageModelSpatialTemporalContextKey, 0) == kCFCompareEqualTo)
  {
    if (a3)
    {
      v11 = CFGetTypeID(a3);
      if (v11 != CFStringGetTypeID())
        goto LABEL_34;
      sub_19C29CEF8(a3, __p);
      v12 = (void **)(a1 + 128);
      if (*(char *)(a1 + 151) < 0)
        operator delete(*v12);
      *(_OWORD *)v12 = *(_OWORD *)__p;
      *(void **)(a1 + 144) = __p[2];
    }
    else
    {
      if (*(char *)(a1 + 151) < 0)
      {
        *(_QWORD *)(a1 + 136) = 0;
        v17 = *(_BYTE **)(a1 + 128);
      }
      else
      {
        v17 = (_BYTE *)(a1 + 128);
        *(_BYTE *)(a1 + 151) = 0;
      }
      *v17 = 0;
    }
    __p[0] = operator new(0x20uLL);
    *(_OWORD *)&__p[1] = xmmword_19C46DE00;
    strcpy((char *)__p[0], "spatialTemporalContextChanged");
    sub_19C299C5C(a1, (uint64_t)__p);
    goto LABEL_50;
  }
  if (CFStringCompare(theString1, (CFStringRef)kLMLanguageModelDynamicNgramCountThresholdKey, 0))
  {
    if (CFStringCompare(theString1, (CFStringRef)kLMLanguageModelSwearWordPolicyEnabledKey, 0) == kCFCompareEqualTo)
    {
      *(_BYTE *)(a1 + 428) = sub_19C29CB48(a3, 0);
      return 1;
    }
    if (CFStringCompare(theString1, (CFStringRef)kLMLanguageModelSupportsNormalizedNameTokenKey, 0) == kCFCompareEqualTo)
    {
      *(_BYTE *)(a1 + 429) = sub_19C29CB48(a3, 0);
      return 1;
    }
    if (CFStringCompare(theString1, (CFStringRef)kLMLanguageModelLegacyGenericNameTokenKey, 0) == kCFCompareEqualTo)
    {
      sub_19C29CEF8(a3, __p);
      v18 = (void **)(a1 + 432);
      if (*(char *)(a1 + 455) < 0)
        operator delete(*v18);
      *(_OWORD *)v18 = *(_OWORD *)__p;
      *(void **)(a1 + 448) = __p[2];
      return 1;
    }
    v8 = CFStringCompare(theString1, (CFStringRef)kLMLanguageModelMontrealFullCacheSize, 0);
    if (a3)
    {
      if (v8 == kCFCompareEqualTo)
      {
        v9 = CFGetTypeID(a3);
        if (v9 == CFNumberGetTypeID())
        {
          CFNumberGetValue((CFNumberRef)a3, kCFNumberCFIndexType, (void *)(a1 + 380));
          return 1;
        }
      }
    }
  }
  else if (a3)
  {
    v13 = CFGetTypeID(a3);
    if (v13 == CFNumberGetTypeID())
    {
      CFNumberGetValue((CFNumberRef)a3, kCFNumberFloatType, (void *)(a1 + 256));
      return 1;
    }
  }
LABEL_34:
  if (a4)
  {
    sub_19C29CEF8(theString1, &v19);
    v14 = std::string::append(&v19, " cannot be set after creation", 0x1DuLL);
    v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    __p[2] = (void *)v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    *a4 = sub_19C34EDD8((uint64_t)__p);
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v19.__r_.__value_.__l.__data_);
  }
  return 0;
}

void sub_19C299C08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19C299C5C(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  _BYTE *v5;
  int64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;

  std::mutex::lock((std::mutex *)a1);
  v5 = *(_BYTE **)(a1 + 64);
  v4 = *(_BYTE **)(a1 + 72);
  v6 = v4 - v5;
  if (v4 == v5)
  {
    std::mutex::unlock((std::mutex *)a1);
  }
  else
  {
    if (v6 < 0)
      sub_19C2A18E8();
    v7 = (char *)operator new(v4 - v5);
    memcpy(v7, v5, v6);
    std::mutex::unlock((std::mutex *)a1);
    v8 = 0;
    v9 = 8 * (v6 >> 3);
    do
    {
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)&v7[v8] + 16))(*(_QWORD *)&v7[v8], a1, a2);
      v8 += 8;
    }
    while (v9 != v8);
    operator delete(v7);
  }
}

void sub_19C299D14(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19C299D28(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19C299D3C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 - 112) + 168))(*(_QWORD *)(a1 - 112));
}

void sub_19C299D4C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *__p;

  sub_19C29A56C(*(uint64_t **)(a1 + 8));
  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
      sub_19C3CE810(v3);
    v4 = *(_QWORD *)(v2 + 16);
    if (v4)
      sub_19C3CE810(v4);
    if (*(_QWORD *)v2)
      sub_19C2E15E8(*(const __CFURL **)v2, &__p);
  }
}

void sub_19C299E10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C299E2C(void **a1, const __CFString *cf, BOOL *a3)
{
  void **v3;
  CFTypeID v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v11;
  uint64_t v12;
  __int128 v13;
  unsigned __int8 v14;
  int v15;
  _BYTE *v16;
  void **v18;
  char *v19;
  char *v21;
  int64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  void **v27;
  _BYTE *v28;
  char *v29;
  unint64_t v30;
  _BYTE *v31;
  unint64_t v32;
  int v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  char v40;
  _OWORD *v41;
  void **v42;
  char *v43;
  unint64_t v44;
  _BYTE *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _BYTE *v49;
  char v50;
  _OWORD *v51;
  __int128 v52;
  int64_t v53;
  unint64_t v54;
  __int128 *v55;
  _OWORD *v56;
  unint64_t v57;
  __int128 v58;
  unint64_t v59;
  __int128 *v60;
  _OWORD *v61;
  unint64_t v62;
  __int128 v63;
  BOOL *v64;
  char *v65;
  char v66;
  __int128 v67;
  void *v68;
  size_t v69;
  uint64_t v70;
  char *v71;
  _BYTE *v72;
  __int128 v73;
  void **v74;
  char *v75;
  void *v76;
  void **v77;
  BOOL *v78;
  void *v79;
  int64_t v80;
  char v81;
  void *__dst[2];
  void *v83;
  void *v84;
  char *v85;
  unint64_t v86;
  void *__p[2];
  unint64_t v88;

  v3 = a1;
  if (!cf)
  {
    if (*((char *)a1 + 23) < 0)
    {
      a1[1] = 0;
      v3 = (void **)*a1;
    }
    else
    {
      *((_BYTE *)a1 + 23) = 0;
    }
    *(_BYTE *)v3 = 0;
    return 1;
  }
  v6 = CFGetTypeID(cf);
  if (v6 != CFStringGetTypeID())
    return 0;
  sub_19C29CEF8(cf, __p);
  if (*((char *)v3 + 23) < 0)
    operator delete(*v3);
  *(_OWORD *)v3 = *(_OWORD *)__p;
  v7 = v88;
  v3[2] = (void *)v88;
  v8 = HIBYTE(v7);
  v9 = (unint64_t)v3[1];
  if ((v7 & 0x8000000000000000) != 0)
    v8 = (unint64_t)v3[1];
  if (!v8)
    return 1;
  v84 = 0;
  v85 = 0;
  v86 = 0;
  if (SHIBYTE(v7) < 0)
  {
    sub_19C2B5238(__dst, *v3, v9);
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)v3;
    v83 = v3[2];
  }
  v77 = v3;
  v78 = a3;
  v11 = 0;
  v12 = 0;
  v81 = 1;
  LOWORD(v79) = 64;
  while (1)
  {
    v15 = SHIBYTE(v83);
    v16 = (_BYTE *)HIBYTE(v83);
    if ((SHIBYTE(v83) & 0x80000000) == 0)
    {
      if (v11 >= HIBYTE(v83) || v12 == -1)
        break;
      v18 = __dst;
      v19 = (char *)HIBYTE(v83);
      goto LABEL_30;
    }
    v19 = (char *)__dst[1];
    if ((void *)v11 >= __dst[1] || v12 == -1)
      break;
    v18 = (void **)__dst[0];
LABEL_30:
    if (v81 >= 0)
      v21 = (char *)&v79;
    else
      v21 = (char *)v79;
    if (v81 >= 0)
      v22 = v81;
    else
      v22 = v80;
    v23 = v11;
    if (!v22)
      goto LABEL_70;
    v24 = (char *)v18 + v11;
    v25 = &v19[(_QWORD)v18];
    v26 = &v19[-v11];
    if ((uint64_t)v26 < v22)
      goto LABEL_38;
    v33 = *v21;
    while (1)
    {
      v34 = &v26[-v22];
      if (v34 == (char *)-1)
        goto LABEL_38;
      v35 = (char *)memchr(v24, v33, (size_t)(v34 + 1));
      if (!v35)
        goto LABEL_38;
      v36 = v35;
      if (!memcmp(v35, v21, v22))
        break;
      v24 = v36 + 1;
      v26 = (char *)(v25 - (v36 + 1));
      if ((uint64_t)v26 < v22)
        goto LABEL_38;
    }
    if (v36 == v25 || (v23 = v36 - (char *)v18, v36 - (char *)v18 == -1))
    {
LABEL_38:
      if (v15 >= 0)
        v27 = __dst;
      else
        v27 = (void **)__dst[0];
      if (v15 >= 0)
        v28 = v16;
      else
        v28 = __dst[1];
      v29 = (char *)v27 + v11;
      v30 = (unint64_t)&v28[-v11];
      if ((unint64_t)&v28[-v11] > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_145;
      if (v30 > 0x16)
      {
        v37 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v30 | 7) != 0x17)
          v37 = v30 | 7;
        v38 = v37 + 1;
        v31 = operator new(v37 + 1);
        __p[1] = &v28[-v11];
        v88 = v38 | 0x8000000000000000;
        __p[0] = v31;
        v32 = (unint64_t)&v28[-v11];
        if (v28 == (_BYTE *)v11)
          goto LABEL_62;
      }
      else
      {
        HIBYTE(v88) = (_BYTE)v28 - v11;
        v31 = __p;
        v32 = (unint64_t)&v28[-v11];
        if (v28 == (_BYTE *)v11)
          goto LABEL_62;
      }
      if (v32 >= 0x20 && (unint64_t)(&v31[-v11] - (_BYTE *)v27) >= 0x20)
      {
        v54 = v32 & 0xFFFFFFFFFFFFFFE0;
        v39 = &v31[v32 & 0xFFFFFFFFFFFFFFE0];
        v55 = (__int128 *)((char *)v27 + v11 + 16);
        v56 = v31 + 16;
        v57 = v32 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v58 = *v55;
          *(v56 - 1) = *(v55 - 1);
          *v56 = v58;
          v55 += 2;
          v56 += 2;
          v57 -= 32;
        }
        while (v57);
        if (v32 == v54)
        {
          v31 += v32 & 0xFFFFFFFFFFFFFFE0;
          goto LABEL_62;
        }
        v29 += v54;
      }
      else
      {
        v39 = v31;
      }
      v31 = v39;
      do
      {
        v40 = *v29++;
        *v31++ = v40;
      }
      while (v29 != &v28[(_QWORD)v27]);
LABEL_62:
      *v31 = 0;
      v41 = v85;
      if ((unint64_t)v85 < v86)
      {
        v13 = *(_OWORD *)__p;
        *((_QWORD *)v85 + 2) = v88;
        *v41 = v13;
        v85 = (char *)v41 + 24;
        v14 = HIBYTE(v83);
        if (SHIBYTE(v83) < 0)
          goto LABEL_65;
        goto LABEL_18;
      }
      v85 = sub_19C307C78(&v84, (uint64_t)__p);
      if (SHIBYTE(v88) < 0)
      {
        operator delete(__p[0]);
        v14 = HIBYTE(v83);
        if ((SHIBYTE(v83) & 0x80000000) == 0)
          goto LABEL_18;
LABEL_65:
        v11 = (unint64_t)__dst[1];
        ++v12;
      }
      else
      {
        v14 = HIBYTE(v83);
        if (SHIBYTE(v83) < 0)
          goto LABEL_65;
LABEL_18:
        v11 = v14;
        ++v12;
      }
    }
    else
    {
LABEL_70:
      if (v15 >= 0)
        v42 = __dst;
      else
        v42 = (void **)__dst[0];
      v43 = (char *)v42 + v11;
      v44 = v23 - v11;
      if (v23 - v11 > 0x7FFFFFFFFFFFFFF7)
LABEL_145:
        sub_19C2A1A54();
      if (v44 > 0x16)
      {
        v47 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v44 | 7) != 0x17)
          v47 = v44 | 7;
        v48 = v47 + 1;
        v45 = operator new(v47 + 1);
        __p[1] = (void *)(v23 - v11);
        v88 = v48 | 0x8000000000000000;
        __p[0] = v45;
        v46 = v23 - v11;
        if (v23 == v11)
          goto LABEL_85;
      }
      else
      {
        HIBYTE(v88) = v23 - v11;
        v45 = __p;
        v46 = v23 - v11;
        if (v23 == v11)
          goto LABEL_85;
      }
      if (v46 >= 0x20 && (unint64_t)(v45 - ((char *)v42 + v11)) >= 0x20)
      {
        v59 = v46 & 0xFFFFFFFFFFFFFFE0;
        v49 = &v45[v46 & 0xFFFFFFFFFFFFFFE0];
        v60 = (__int128 *)((char *)v42 + v11 + 16);
        v61 = v45 + 16;
        v62 = v46 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v63 = *v60;
          *(v61 - 1) = *(v60 - 1);
          *v61 = v63;
          v60 += 2;
          v61 += 2;
          v62 -= 32;
        }
        while (v62);
        if (v46 == v59)
        {
          v45 += v46 & 0xFFFFFFFFFFFFFFE0;
          goto LABEL_85;
        }
        v43 += v59;
      }
      else
      {
        v49 = v45;
      }
      v45 = v49;
      do
      {
        v50 = *v43++;
        *v45++ = v50;
      }
      while (v43 != (char *)v42 + v23);
LABEL_85:
      *v45 = 0;
      v51 = v85;
      if ((unint64_t)v85 >= v86)
      {
        v85 = sub_19C307C78(&v84, (uint64_t)__p);
        if (SHIBYTE(v88) < 0)
          operator delete(__p[0]);
      }
      else
      {
        v52 = *(_OWORD *)__p;
        *((_QWORD *)v85 + 2) = v88;
        *v51 = v52;
        v85 = (char *)v51 + 24;
      }
      v53 = v81;
      if (v81 < 0)
        v53 = v80;
      v11 = v53 + v23;
      ++v12;
    }
  }
  if (v81 < 0)
  {
    operator delete(v79);
    v64 = v78;
    if ((HIBYTE(v83) & 0x80) != 0)
      goto LABEL_110;
  }
  else
  {
    v64 = v78;
    if ((SHIBYTE(v83) & 0x80) == 0)
      goto LABEL_104;
LABEL_110:
    operator delete(__dst[0]);
  }
LABEL_104:
  v65 = (char *)v84;
  if (v85 - (_BYTE *)v84 == 48)
  {
    if (v84 != v77)
    {
      v66 = *((_BYTE *)v84 + 23);
      if (*((char *)v77 + 23) < 0)
      {
        if (v66 >= 0)
          v68 = v84;
        else
          v68 = *(void **)v84;
        if (v66 >= 0)
          v69 = *((unsigned __int8 *)v84 + 23);
        else
          v69 = *((_QWORD *)v84 + 1);
        sub_19C2E54A8(v77, v68, v69);
      }
      else if ((*((_BYTE *)v84 + 23) & 0x80) != 0)
      {
        sub_19C2E53E4(v77, *(void **)v84, *((_QWORD *)v84 + 1));
      }
      else
      {
        v67 = *(_OWORD *)v84;
        v77[2] = (void *)*((_QWORD *)v84 + 2);
        *(_OWORD *)v77 = v67;
      }
    }
    v70 = operator new();
    v71 = (char *)v84;
    *(_QWORD *)(v70 + 8) = 0;
    *(_QWORD *)(v70 + 16) = 0;
    *(_QWORD *)v70 = 0;
    v72 = (_BYTE *)(v70 + 24);
    if (v71[47] < 0)
    {
      sub_19C2B5238(v72, *((void **)v71 + 3), *((_QWORD *)v71 + 4));
    }
    else
    {
      v73 = *(_OWORD *)(v71 + 24);
      *(_QWORD *)(v70 + 40) = *((_QWORD *)v71 + 5);
      *(_OWORD *)v72 = v73;
    }
    *(_OWORD *)(v70 + 64) = 0u;
    *(_OWORD *)(v70 + 80) = 0u;
    *(_OWORD *)(v70 + 48) = 0u;
    v74 = (void **)v77[4];
    v77[4] = (void *)v70;
    if (v74)
    {
      if ((*((char *)v74 + 95) & 0x80000000) == 0)
      {
        if ((*((char *)v74 + 71) & 0x80000000) == 0)
          goto LABEL_125;
LABEL_142:
        operator delete(v74[6]);
        if (*((char *)v74 + 47) < 0)
          goto LABEL_143;
LABEL_126:
        if ((*((char *)v74 + 23) & 0x80000000) == 0)
          goto LABEL_127;
LABEL_144:
        operator delete(*v74);
        goto LABEL_127;
      }
      operator delete(v74[9]);
      if (*((char *)v74 + 71) < 0)
        goto LABEL_142;
LABEL_125:
      if ((*((char *)v74 + 47) & 0x80000000) == 0)
        goto LABEL_126;
LABEL_143:
      operator delete(v74[3]);
      if (*((char *)v74 + 23) < 0)
        goto LABEL_144;
LABEL_127:
      MEMORY[0x1A1AD355C](v74, 0x1012C4003C2D8E3);
    }
    v65 = (char *)v84;
  }
  if (v64)
    *v64 = v85 - v65 == 48;
  if (v65)
  {
    v75 = v85;
    v76 = v65;
    if (v85 != v65)
    {
      do
      {
        if (*(v75 - 1) < 0)
          operator delete(*((void **)v75 - 3));
        v75 -= 24;
      }
      while (v75 != v65);
      v76 = v84;
    }
    v85 = v65;
    operator delete(v76);
  }
  return 1;
}

void sub_19C29A4C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  if (*(char *)(v33 + 23) < 0)
    operator delete(*(void **)v33);
  MEMORY[0x1A1AD355C](v33, 0x1012C4003C2D8E3);
  sub_19C307B68(&a25);
  _Unwind_Resume(a1);
}

void sub_19C29A56C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  int v4;
  void *v5;
  char *v6;
  void *v7;
  BOOL v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = *a1;
  if (*a1)
  {
    v3 = *(unsigned __int8 *)(v1 + 7);
    v4 = *(_DWORD *)(v1 + 20);
    v6 = *(char **)(v1 + 24);
    v5 = *(void **)(v1 + 32);
    if (v5)
    {
      free(v5);
      v1 = *a1;
    }
    v7 = *(void **)(v1 + 40);
    if (v7)
      free(v7);
    if (v6)
    {
      if (v4)
        v8 = (_DWORD)v3 == 0;
      else
        v8 = 1;
      if (!v8)
      {
        v10 = 0;
        v11 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v3;
        do
        {
          v12 = (unint64_t)&v6[(v10 + 24) >> 3];
          v13 = v12 & 0xFFFFFFFFFFFFFFF8;
          v14 = v10 & 7 | (8 * (v12 & 7));
          v15 = *(_QWORD *)(v12 & 0xFFFFFFFFFFFFFFF8) >> v14;
          if ((unint64_t)(v14 + v3) >= 0x41)
            v15 |= *(_QWORD *)(v13 + 8) << -(char)v14;
          if ((v15 & v11) != 0)
            free((void *)(v15 & v11));
          v10 += v3 + 24;
          --v4;
        }
        while (v4);
      }
      free(v6);
    }
    v9 = *a1;
    *(_BYTE *)(v9 + 7) = 64;
    *(_DWORD *)(v9 + 20) = 0;
    *(_QWORD *)(v9 + 12) = 24;
    *(_QWORD *)(v9 + 32) = 0;
    *(_QWORD *)(v9 + 40) = 0;
    *(_QWORD *)(v9 + 24) = 0;
  }
}

uint64_t *sub_19C29A674(uint64_t a1, const void **a2)
{
  uint64_t *v2;
  uint64_t *v3;
  int v4;
  const void *v5;
  size_t v6;
  uint64_t *v7;
  int v8;
  uint64_t *v9;
  size_t v10;
  size_t v11;
  int v12;
  int v13;
  const void *v14;
  size_t v15;
  size_t v16;
  int v17;

  v2 = (uint64_t *)(a1 + 8);
  v3 = *(uint64_t **)(a1 + 8);
  if (!v3)
    return v2;
  v4 = *((char *)a2 + 23);
  if (v4 >= 0)
    v5 = a2;
  else
    v5 = *a2;
  if (v4 >= 0)
    v6 = *((unsigned __int8 *)a2 + 23);
  else
    v6 = (size_t)a2[1];
  v7 = (uint64_t *)(a1 + 8);
  do
  {
    while (1)
    {
      v8 = *((char *)v3 + 55);
      v9 = v8 >= 0 ? v3 + 4 : (uint64_t *)v3[4];
      v10 = v8 >= 0 ? *((unsigned __int8 *)v3 + 55) : v3[5];
      v11 = v6 >= v10 ? v10 : v6;
      v12 = memcmp(v9, v5, v11);
      if (v12)
        break;
      if (v10 >= v6)
        goto LABEL_23;
LABEL_9:
      v3 = (uint64_t *)v3[1];
      if (!v3)
        goto LABEL_24;
    }
    if (v12 < 0)
      goto LABEL_9;
LABEL_23:
    v7 = v3;
    v3 = (uint64_t *)*v3;
  }
  while (v3);
LABEL_24:
  if (v7 == v2)
    return v2;
  v13 = *((char *)v7 + 55);
  if (v13 >= 0)
    v14 = v7 + 4;
  else
    v14 = (const void *)v7[4];
  if (v13 >= 0)
    v15 = *((unsigned __int8 *)v7 + 55);
  else
    v15 = v7[5];
  if (v15 >= v6)
    v16 = v6;
  else
    v16 = v15;
  v17 = memcmp(v5, v14, v16);
  if (!v17)
  {
    if (v6 >= v15)
      return v7;
    return v2;
  }
  if (v17 < 0)
    return v2;
  return v7;
}

uint64_t *sub_19C29A778(uint64_t *a1, const UInt8 *a2)
{
  CFIndex v3;
  CFIndex v4;
  const __CFString *v5;
  const __CFString *v6;
  CFLocaleRef v7;
  void *exception;

  v3 = *((_QWORD *)a2 + 1);
  if (*((char *)a2 + 23) >= 0)
  {
    v4 = a2[23];
  }
  else
  {
    a2 = *(const UInt8 **)a2;
    v4 = v3;
  }
  v5 = CFStringCreateWithBytes(0, a2, v4, 0x8000100u, 0);
  if (!v5)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD3154](exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v6 = v5;
  v7 = CFLocaleCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v5);
  CFRelease(v6);
  *a1 = sub_19C29A890(v7, 134217984);
  if (v7)
    CFRelease(v7);
  return a1;
}

void sub_19C29A844(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19C29A85C(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C29A890(CFTypeRef a1, int a2)
{
  uint64_t v3;
  const __CFString *Value;
  const __CFString *v5;
  CFIndex Length;
  CFIndex v7;
  char *v8;
  CFRange v10;

  if (a2 != 134217984)
    return 0;
  v3 = operator new();
  if (a1)
    a1 = CFRetain(a1);
  *(_QWORD *)v3 = a1;
  *(_QWORD *)(v3 + 8) = 0;
  *(_DWORD *)(v3 + 16) = 134217984;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_OWORD *)(v3 + 192) = 0u;
  *(_OWORD *)(v3 + 208) = 0u;
  *(_OWORD *)(v3 + 224) = 0u;
  *(_QWORD *)(v3 + 240) = 0;
  *(_QWORD *)(v3 + 248) = -1;
  *(_QWORD *)(v3 + 264) = 0;
  *(_QWORD *)(v3 + 272) = 0;
  *(_QWORD *)(v3 + 256) = 0;
  *(_DWORD *)(v3 + 280) = 0;
  *(_OWORD *)(v3 + 288) = xmmword_19C46DE20;
  *(_QWORD *)(v3 + 304) = -1;
  *(_DWORD *)(v3 + 312) = 0;
  if (a1)
  {
    Value = (const __CFString *)CFLocaleGetValue((CFLocaleRef)a1, (CFLocaleKey)*MEMORY[0x1E0C9B088]);
    if (CFStringCompare(Value, CFSTR("ja"), 0) == kCFCompareEqualTo
      || CFStringCompare(Value, CFSTR("zh"), 0) == kCFCompareEqualTo
      || CFStringCompare(Value, CFSTR("th"), 0) == kCFCompareEqualTo)
    {
      v10.location = -1;
      v10.length = 0;
      *(_QWORD *)(v3 + 8) = CFStringTokenizerCreate(0, 0, v10, 4uLL, (CFLocaleRef)a1);
    }
  }
  *(_OWORD *)(v3 + 32) = xmmword_19C46DF00;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 128) = 0u;
  *(_OWORD *)(v3 + 144) = 0u;
  *(_OWORD *)(v3 + 160) = 0u;
  v5 = (const __CFString *)MEMORY[0x1A1AD2A04](a1);
  Length = CFStringGetLength(v5);
  v7 = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u) + 1;
  v8 = (char *)operator new[]();
  CFStringGetCString(v5, v8, v7, 0x8000100u);
  *(_QWORD *)(v3 + 24) = ubrk_open();
  MEMORY[0x1A1AD3538](v8, 0x1000C8077774924);
  return v3;
}

void sub_19C29AA6C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD355C](v1, 0x10F0C4069D522A4);
  _Unwind_Resume(a1);
}

void sub_19C29AABC(uint64_t a1, CFDictionaryRef theDict, char a3)
{
  const __CFString *Value;
  const __CFString *v5;
  CFTypeID v6;
  unsigned int v7;
  BOOL v8;
  _BYTE *v9;
  _BYTE *v10;
  const __CFString *v11;
  const __CFString *v12;
  const __CFString *v13;
  const __CFNumber *v14;
  const __CFNumber *v15;
  CFTypeID v16;
  const __CFNumber *v17;
  const __CFNumber *v18;
  CFTypeID v19;
  const __CFNumber *v20;
  const __CFNumber *v21;
  CFTypeID v22;
  const __CFNumber *v23;
  const __CFNumber *v24;
  CFTypeID v25;
  float *v26;
  const __CFNumber *v27;
  const __CFNumber *v28;
  CFTypeID v29;
  float *v30;
  const __CFNumber *v31;
  const __CFNumber *v32;
  CFTypeID v33;
  float *v34;
  const __CFNumber *v35;
  const __CFNumber *v36;
  CFTypeID v37;
  const __CFNumber *v38;
  const __CFNumber *v39;
  CFTypeID v40;
  const __CFNumber *v41;
  const __CFNumber *v42;
  CFTypeID v43;
  const __CFNumber *v44;
  const __CFNumber *v45;
  CFTypeID v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  const __CFNumber *v54;
  const __CFNumber *v55;
  CFTypeID v56;
  const __CFNumber *v57;
  const __CFNumber *v58;
  CFTypeID v59;
  const __CFNumber *v60;
  const __CFNumber *v61;
  CFTypeID v62;
  const __CFNumber *v63;
  const __CFNumber *v64;
  CFTypeID v65;
  const __CFNumber *v66;
  const __CFNumber *v67;
  CFTypeID v68;
  const __CFNumber *v69;
  const __CFNumber *v70;
  CFTypeID v71;
  const __CFNumber *v72;
  const __CFNumber *v73;
  CFTypeID v74;
  const __CFNumber *v75;
  const __CFNumber *v76;
  CFTypeID v77;
  const __CFNumber *v78;
  const __CFNumber *v79;
  CFTypeID v80;
  const __CFNumber *v81;
  const __CFNumber *v82;
  CFTypeID v83;
  const __CFNumber *v84;
  const __CFNumber *v85;
  CFTypeID v86;
  const __CFNumber *v87;
  const __CFNumber *v88;
  CFTypeID v89;
  const __CFNumber *v90;
  const __CFNumber *v91;
  CFTypeID v92;
  const __CFNumber *v93;
  const __CFNumber *v94;
  CFTypeID v95;
  uint64_t v96;
  const __CFNumber *v97;
  const __CFNumber *v98;
  CFTypeID v99;
  _DWORD *v100;
  const __CFNumber *v101;
  const __CFNumber *v102;
  CFTypeID v103;
  const __CFNumber *v104;
  const __CFNumber *v105;
  CFTypeID v106;
  const __CFArray *v107;
  const __CFArray *v108;
  void **v109;
  CFIndex Count;
  unint64_t v111;
  float v112;
  float *v113;
  const __CFNumber *ValueAtIndex;
  unint64_t v115;
  float *v116;
  float *v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  unint64_t v122;
  _BYTE *v123;
  float *v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t v127;
  _OWORD *v128;
  float *v129;
  uint64_t v130;
  __int128 v131;
  int v132;
  unsigned int v133;
  char *v134;
  char *v135;
  unint64_t v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  unint64_t v142;
  _BYTE *v143;
  _DWORD *v144;
  unint64_t v145;
  char *v146;
  int v147;
  uint64_t v148;
  _OWORD *v149;
  char *v150;
  uint64_t v151;
  __int128 v152;
  float32x4_t *v154;
  unint64_t v155;
  float32x4_t *v156;
  unint64_t v157;
  float v158;
  float32x4_t v159;
  unint64_t v160;
  float *v161;
  const __CFDictionary *v162;
  _BYTE *v163;
  const __CFDictionary *v164;
  CFTypeID v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t v168;
  unint64_t v169;
  void *v170;
  void *v171;
  uint64_t v172;
  const __CFAllocator *v173;
  CFTypeID v174;
  const __CFString *v175;
  CFTypeID v176;
  const __CFDictionary *v177;
  unint64_t v178;
  unint64_t v179;
  uint64_t *v180;
  unint64_t v181;
  unint64_t v182;
  unint64_t v183;
  unint64_t v184;
  char *v185;
  uint64_t *v186;
  char *v187;
  char *v188;
  char *v189;
  unint64_t v190;
  uint64_t *v191;
  void **v192;
  __int128 v193;
  uint64_t *v194;
  uint64_t *v195;
  char *v196;
  const void *v197;
  const void *v198;
  char *v199;
  char *v200;
  void **v201;
  const __CFNumber *v202;
  const __CFNumber *v203;
  CFTypeID v204;
  const __CFNumber *v205;
  const __CFNumber *v206;
  CFTypeID v207;
  const __CFString *v208;
  const __CFString *v209;
  const __CFString *v210;
  const __CFString *v211;
  const __CFString *v212;
  const __CFNumber *v213;
  const __CFNumber *v214;
  CFTypeID v215;
  const __CFNumber *v216;
  const __CFNumber *v217;
  CFTypeID v218;
  const __CFNumber *v219;
  const __CFNumber *v220;
  CFTypeID v221;
  const __CFNumber *v222;
  const __CFNumber *v223;
  CFTypeID v224;
  const __CFNumber *v225;
  const __CFNumber *v226;
  CFTypeID v227;
  const __CFNumber *v228;
  const __CFNumber *v229;
  CFTypeID v230;
  const __CFString *v231;
  const __CFString *v232;
  const __CFString *v233;
  const __CFLocale *v234;
  const __CFString *v235;
  uint64_t v236;
  _QWORD *v237;
  _BYTE *v238;
  const __CFString *v239;
  const void *v240;
  const void *v241;
  CFTypeID v242;
  CFTypeRef v243;
  const void *v244;
  const __CFString *v245;
  const __CFString *v246;
  CFTypeID v247;
  void **v248;
  CFDictionaryRef v249;
  const void *v250;
  const void *v251;
  CFTypeID v252;
  const __CFLocale *v253;
  CFIndex v254;
  CFIndex v255;
  CFIndex v256;
  unint64_t v257;
  const __CFString *v258;
  const __CFString *v259;
  const __CFString *v260;
  CFComparisonResult v261;
  const __CFString *v262;
  const __CFString *v263;
  CFComparisonResult v264;
  char v265;
  const __CFDictionary *v266;
  const __CFNumber *v267;
  unsigned int v268;
  const __CFNumber *v269;
  unsigned int v270;
  const __CFDictionary *v271;
  int v272;
  const __CFString *v273;
  CFComparisonResult v274;
  CFComparisonResult v275;
  CFComparisonResult v276;
  int v277;
  const __CFNumber *v278;
  const __CFNumber *v279;
  CFTypeID v280;
  char *v281;
  std::string *v282;
  unint64_t size;
  void *v284;
  int v285;
  _BYTE *v286;
  char *v287;
  _QWORD *v288;
  void *v289;
  void *v290;
  void *v291;
  _QWORD *exception;
  __int128 v293;
  _QWORD *v294;
  _BYTE *v295;
  __int128 v296;
  unint64_t v297;
  void *v298;
  void *v299;
  uint64_t v300;
  _BYTE *v301;
  char *v302;
  unsigned int *valuePtr;
  char **valuePtra;
  uint64_t v305;
  CFDictionaryRef v306;
  _QWORD v307[2];
  float v308;
  char v309;
  CFDictionaryRef theDicta;
  CFTypeRef cf;
  std::string key;

  theDicta = theDict;
  v309 = a3;
  v308 = 0.0;
  if (theDict)
  {
    Value = (const __CFString *)CFDictionaryGetValue(theDict, (const void *)kLMLanguageModelAdaptationVersionNumberKey);
    if (Value)
    {
      v5 = Value;
      v6 = CFGetTypeID(Value);
      if (v6 == CFStringGetTypeID())
      {
        sub_19C3497D0((int *)&key, v5);
        v7 = *(_DWORD *)(a1 + 196);
        v8 = LODWORD(key.__r_.__value_.__l.__data_) > v7;
        if (LODWORD(key.__r_.__value_.__l.__data_) == v7)
          v8 = HIDWORD(key.__r_.__value_.__r.__words[0]) > *(_DWORD *)(a1 + 200);
        if (v8)
          *(_QWORD *)(a1 + 196) = key.__r_.__value_.__r.__words[0];
      }
    }
  }
  v307[0] = &theDicta;
  v307[1] = &v309;
  v9 = (_BYTE *)(a1 + 192);
  sub_19C29CC2C((uint64_t)v307, (_BYTE *)(a1 + 192), (const __CFString *)kLMLanguageModelAdaptationEnabledKey, 1);
  v10 = (_BYTE *)(a1 + 419);
  sub_19C29CC2C((uint64_t)v307, (_BYTE *)(a1 + 419), (const __CFString *)kLMLanguageModelDisableDynamicLanguageModelsKey, 0);
  sub_19C29CC2C((uint64_t)v307, (_BYTE *)(a1 + 428), (const __CFString *)kLMLanguageModelSwearWordPolicyEnabledKey, 0);
  sub_19C29CC2C((uint64_t)v307, (_BYTE *)(a1 + 429), (const __CFString *)kLMLanguageModelSupportsNormalizedNameTokenKey, 0);
  v11 = (const __CFString *)CFDictionaryGetValue(theDicta, (const void *)kLMLanguageModelStaticModelsEnabledKey);
  *(_BYTE *)(a1 + 344) = sub_19C29CB48(v11, 1);
  v12 = (const __CFString *)CFDictionaryGetValue(theDicta, (const void *)kLMLanguageModelLanguageLikelihoodModelEnabledKey);
  *(_BYTE *)(a1 + 364) = sub_19C29CB48(v12, 1);
  v13 = (const __CFString *)CFDictionaryGetValue(theDicta, (const void *)kLMLanguageModelPrioritizeVocabulariesKey);
  *(_BYTE *)(a1 + 365) = sub_19C29CB48(v13, 0);
  if (*(_BYTE *)(a1 + 344))
  {
    if (*v9)
      goto LABEL_11;
LABEL_55:
    *(_QWORD *)(a1 + 248) = 0;
    if (!*v10)
      goto LABEL_13;
    goto LABEL_12;
  }
  *(_QWORD *)(a1 + 336) = 0;
  if (!*v9)
    goto LABEL_55;
LABEL_11:
  if (*v10)
  {
LABEL_12:
    *(_QWORD *)(a1 + 248) = 0;
    *(_DWORD *)(a1 + 204) = 0;
    *(_DWORD *)(a1 + 324) = 0;
  }
LABEL_13:
  valuePtr = (unsigned int *)(a1 + 244);
  v301 = (_BYTE *)(a1 + 192);
  if (!theDicta)
    goto LABEL_33;
  v14 = (const __CFNumber *)CFDictionaryGetValue(theDicta, (const void *)kLMLanguageModelDynamicModelOrderKey);
  if (v14)
  {
    v15 = v14;
    v16 = CFGetTypeID(v14);
    if (v16 == CFNumberGetTypeID())
      CFNumberGetValue(v15, kCFNumberIntType, valuePtr);
  }
  if (!theDicta)
    goto LABEL_33;
  v17 = (const __CFNumber *)CFDictionaryGetValue(theDicta, (const void *)kLMLanguageModelMaxDynamicModelSizeKey);
  if (v17)
  {
    v18 = v17;
    v19 = CFGetTypeID(v17);
    if (v19 == CFNumberGetTypeID())
      CFNumberGetValue(v18, kCFNumberIntType, (void *)(a1 + 312));
  }
  if (!theDicta)
    goto LABEL_33;
  v20 = (const __CFNumber *)CFDictionaryGetValue(theDicta, (const void *)kLMLanguageModelPruningTargetSizeKey);
  if (v20)
  {
    v21 = v20;
    v22 = CFGetTypeID(v20);
    if (v22 == CFNumberGetTypeID())
      CFNumberGetValue(v21, kCFNumberIntType, (void *)(a1 + 320));
  }
  if (theDicta)
  {
    v23 = (const __CFNumber *)CFDictionaryGetValue(theDicta, (const void *)kLMLanguageModelDecayExponentKey);
    if (v23)
    {
      v24 = v23;
      v25 = CFGetTypeID(v23);
      if (v25 == CFNumberGetTypeID())
        CFNumberGetValue(v24, kCFNumberFloatType, (void *)(a1 + 208));
    }
    v26 = (float *)(a1 + 336);
    if (!theDicta)
    {
      v30 = (float *)(a1 + 204);
      goto LABEL_58;
    }
    v27 = (const __CFNumber *)CFDictionaryGetValue(theDicta, (const void *)kLMLanguageModelStaticModelWeightKey);
    if (v27)
    {
      v28 = v27;
      v29 = CFGetTypeID(v27);
      if (v29 == CFNumberGetTypeID())
        CFNumberGetValue(v28, kCFNumberFloatType, (void *)(a1 + 336));
    }
  }
  else
  {
LABEL_33:
    v26 = (float *)(a1 + 336);
  }
  v30 = (float *)(a1 + 204);
  if (!theDicta)
  {
LABEL_58:
    v34 = (float *)(a1 + 248);
    goto LABEL_59;
  }
  v31 = (const __CFNumber *)CFDictionaryGetValue(theDicta, (const void *)kLMLanguageModelCacheModelWeightKey);
  if (v31)
  {
    v32 = v31;
    v33 = CFGetTypeID(v31);
    if (v33 == CFNumberGetTypeID())
      CFNumberGetValue(v32, kCFNumberFloatType, (void *)(a1 + 204));
  }
  v34 = (float *)(a1 + 248);
  if (theDicta)
  {
    v35 = (const __CFNumber *)CFDictionaryGetValue(theDicta, (const void *)kLMLanguageModelDynamicModelWeightKey);
    if (v35)
    {
      v36 = v35;
      v37 = CFGetTypeID(v35);
      if (v37 == CFNumberGetTypeID())
        CFNumberGetValue(v36, kCFNumberFloatType, (void *)(a1 + 248));
    }
    if (theDicta)
    {
      v38 = (const __CFNumber *)CFDictionaryGetValue(theDicta, (const void *)kLMLanguageModelRecencyModelWeightKey);
      if (v38)
      {
        v39 = v38;
        v40 = CFGetTypeID(v38);
        if (v40 == CFNumberGetTypeID())
          CFNumberGetValue(v39, kCFNumberFloatType, (void *)(a1 + 324));
      }
      if (theDicta)
      {
        v41 = (const __CFNumber *)CFDictionaryGetValue(theDicta, (const void *)kLMTouconLanguageModelStaticModelWeightKey);
        if (v41)
        {
          v42 = v41;
          v43 = CFGetTypeID(v41);
          if (v43 == CFNumberGetTypeID())
            CFNumberGetValue(v42, kCFNumberFloatType, (void *)(a1 + 420));
        }
        if (theDicta)
        {
          v44 = (const __CFNumber *)CFDictionaryGetValue(theDicta, (const void *)kLMToucanLanguageModelDynamicModelWeightKey);
          if (v44)
          {
            v45 = v44;
            v46 = CFGetTypeID(v44);
            if (v46 == CFNumberGetTypeID())
              CFNumberGetValue(v45, kCFNumberFloatType, (void *)(a1 + 424));
          }
        }
      }
    }
  }
LABEL_59:
  v47 = *v30;
  v48 = *v34;
  v49 = (float)(*v30 + *v26) + *v34;
  if (v49 > 0.0)
  {
    v50 = 1.0 / v49;
    *v26 = *v26 * v50;
    *v30 = v47 * v50;
    *v34 = v48 * v50;
  }
  v51 = *(float *)(a1 + 340);
  v52 = *(float *)(a1 + 252);
  v53 = v52 + v51;
  if ((float)(v52 + v51) > 0.0)
  {
    *(float *)(a1 + 340) = v51 / v53;
    *(float *)(a1 + 252) = v52 / v53;
  }
  if (!theDicta)
    goto LABEL_123;
  v54 = (const __CFNumber *)CFDictionaryGetValue(theDicta, (const void *)kLMLanguageModelTagMatchCountWeightKey);
  if (v54)
  {
    v55 = v54;
    v56 = CFGetTypeID(v54);
    if (v56 == CFNumberGetTypeID())
      CFNumberGetValue(v55, kCFNumberFloatType, (void *)(a1 + 228));
  }
  if (!theDicta)
    goto LABEL_123;
  v57 = (const __CFNumber *)CFDictionaryGetValue(theDicta, (const void *)kLMLanguageModelTagGenreMatchCountWeightKey);
  if (v57)
  {
    v58 = v57;
    v59 = CFGetTypeID(v57);
    if (v59 == CFNumberGetTypeID())
      CFNumberGetValue(v58, kCFNumberFloatType, (void *)(a1 + 224));
  }
  if (!theDicta)
    goto LABEL_123;
  v60 = (const __CFNumber *)CFDictionaryGetValue(theDicta, (const void *)kLMLanguageModelTagRecipientMatchCountWeightKey);
  if (v60)
  {
    v61 = v60;
    v62 = CFGetTypeID(v60);
    if (v62 == CFNumberGetTypeID())
      CFNumberGetValue(v61, kCFNumberFloatType, (void *)(a1 + 236));
  }
  if (!theDicta)
    goto LABEL_123;
  v63 = (const __CFNumber *)CFDictionaryGetValue(theDicta, (const void *)kLMLanguageModelTagSpatialTemporalMatchCountWeightKey);
  if (v63)
  {
    v64 = v63;
    v65 = CFGetTypeID(v63);
    if (v65 == CFNumberGetTypeID())
      CFNumberGetValue(v64, kCFNumberFloatType, (void *)(a1 + 240));
  }
  if (!theDicta)
    goto LABEL_123;
  v66 = (const __CFNumber *)CFDictionaryGetValue(theDicta, (const void *)kLMLanguageModelTagMismatchCountWeightKey);
  if (v66)
  {
    v67 = v66;
    v68 = CFGetTypeID(v66);
    if (v68 == CFNumberGetTypeID())
      CFNumberGetValue(v67, kCFNumberFloatType, (void *)(a1 + 232));
  }
  if (!theDicta)
    goto LABEL_123;
  v69 = (const __CFNumber *)CFDictionaryGetValue(theDicta, (const void *)kLMLanguageModelDynamicUnigramCountThresholdKey);
  if (v69)
  {
    v70 = v69;
    v71 = CFGetTypeID(v69);
    if (v71 == CFNumberGetTypeID())
      CFNumberGetValue(v70, kCFNumberFloatType, (void *)(a1 + 304));
  }
  if (!theDicta)
    goto LABEL_123;
  v72 = (const __CFNumber *)CFDictionaryGetValue(theDicta, (const void *)kLMLanguageModelDynamicNgramCountThresholdKey);
  if (v72)
  {
    v73 = v72;
    v74 = CFGetTypeID(v72);
    if (v74 == CFNumberGetTypeID())
      CFNumberGetValue(v73, kCFNumberFloatType, (void *)(a1 + 256));
  }
  if (!theDicta)
    goto LABEL_123;
  v75 = (const __CFNumber *)CFDictionaryGetValue(theDicta, CFSTR("DynamicEmojiUnigramCountThreshold"));
  if (v75)
  {
    v76 = v75;
    v77 = CFGetTypeID(v75);
    if (v77 == CFNumberGetTypeID())
      CFNumberGetValue(v76, kCFNumberFloatType, (void *)(a1 + 220));
  }
  if (!theDicta)
    goto LABEL_123;
  v78 = (const __CFNumber *)CFDictionaryGetValue(theDicta, CFSTR("DynamicEmojiNgramCountThreshold"));
  if (v78)
  {
    v79 = v78;
    v80 = CFGetTypeID(v78);
    if (v80 == CFNumberGetTypeID())
      CFNumberGetValue(v79, kCFNumberFloatType, (void *)(a1 + 216));
  }
  if (!theDicta)
    goto LABEL_123;
  v81 = (const __CFNumber *)CFDictionaryGetValue(theDicta, (const void *)kLMLanguageModelDynamicTotalUnigramCountThresholdKey);
  if (v81)
  {
    v82 = v81;
    v83 = CFGetTypeID(v81);
    if (v83 == CFNumberGetTypeID())
      CFNumberGetValue(v82, kCFNumberFloatType, (void *)(a1 + 300));
  }
  if (!theDicta)
    goto LABEL_123;
  v84 = (const __CFNumber *)CFDictionaryGetValue(theDicta, (const void *)kLMLanguageModelRecencyNgramCountThresholdKey);
  if (v84)
  {
    v85 = v84;
    v86 = CFGetTypeID(v84);
    if (v86 == CFNumberGetTypeID())
      CFNumberGetValue(v85, kCFNumberFloatType, (void *)(a1 + 328));
  }
  if (!theDicta)
    goto LABEL_123;
  v87 = (const __CFNumber *)CFDictionaryGetValue(theDicta, (const void *)kLMLanguageModelRecencyUnigramCountThresholdKey);
  if (v87)
  {
    v88 = v87;
    v89 = CFGetTypeID(v87);
    if (v89 == CFNumberGetTypeID())
      CFNumberGetValue(v88, kCFNumberFloatType, (void *)(a1 + 332));
  }
  if (!theDicta)
    goto LABEL_123;
  v90 = (const __CFNumber *)CFDictionaryGetValue(theDicta, (const void *)kLMLanguageModelMinDynamicTokensTypedThresholdKey);
  if (v90)
  {
    v91 = v90;
    v92 = CFGetTypeID(v90);
    if (v92 == CFNumberGetTypeID())
      CFNumberGetValue(v91, kCFNumberIntType, (void *)(a1 + 368));
  }
  if (!theDicta)
  {
LABEL_123:
    v96 = a1 + 292;
LABEL_124:
    v100 = (_DWORD *)(a1 + 348);
    if (theDicta)
    {
      v101 = (const __CFNumber *)CFDictionaryGetValue(theDicta, (const void *)kLMLanguageModelTagBitCountKey);
      if (v101)
      {
        v102 = v101;
        v103 = CFGetTypeID(v101);
        if (v103 == CFNumberGetTypeID())
          CFNumberGetValue(v102, kCFNumberIntType, (void *)(a1 + 348));
      }
    }
    goto LABEL_128;
  }
  v93 = (const __CFNumber *)CFDictionaryGetValue(theDicta, (const void *)kLMLanguageModelFirstDynamicTokenIDKey);
  if (v93)
  {
    v94 = v93;
    v95 = CFGetTypeID(v93);
    if (v95 == CFNumberGetTypeID())
      CFNumberGetValue(v94, kCFNumberIntType, (void *)(a1 + 288));
  }
  v96 = a1 + 292;
  if (theDicta)
  {
    v97 = (const __CFNumber *)CFDictionaryGetValue(theDicta, (const void *)kLMLanguageModelLastDynamicTokenIDKey);
    if (v97)
    {
      v98 = v97;
      v99 = CFGetTypeID(v97);
      if (v99 == CFNumberGetTypeID())
        CFNumberGetValue(v98, kCFNumberIntType, (void *)(a1 + 292));
    }
    goto LABEL_124;
  }
  v100 = (_DWORD *)(a1 + 348);
LABEL_128:
  if (*v100 != 8 && *v100 != 16)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    sub_19C2A6D48(&key, "invalid tag bit count (valid values are 8 and 16)");
    sub_19C31237C(exception, (__int128 *)&key);
    __cxa_throw(exception, (struct type_info *)&unk_1E3D32968, (void (*)(void *))sub_19C3123E4);
  }
  if (*(_BYTE *)(v96 + 3))
  {
    v288 = __cxa_allocate_exception(0x20uLL);
    sub_19C2A6D48(&key, "invalid dynamic token ID range");
    sub_19C31237C(v288, (__int128 *)&key);
    __cxa_throw(v288, (struct type_info *)&unk_1E3D32968, (void (*)(void *))sub_19C3123E4);
  }
  v305 = a1;
  if (!theDicta)
    goto LABEL_207;
  v104 = (const __CFNumber *)CFDictionaryGetValue(theDicta, (const void *)kLMLanguageModelDynamicTokenPenaltyKey);
  if (v104)
  {
    v105 = v104;
    v106 = CFGetTypeID(v104);
    if (v106 == CFNumberGetTypeID())
      CFNumberGetValue(v105, kCFNumberFloatType, (void *)(a1 + 296));
  }
  if (!theDicta)
    goto LABEL_207;
  v107 = (const __CFArray *)CFDictionaryGetValue(theDicta, (const void *)kLMLanguageModelDynamicNgramWeightsKey);
  if (!v107)
    goto LABEL_207;
  v108 = v107;
  v109 = (void **)(a1 + 264);
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a1 + 264);
  Count = CFArrayGetCount(v107);
  if (Count >= 1)
  {
    v111 = 0;
    v112 = 0.0;
    while (1)
    {
      if (v111 >= *valuePtr)
        goto LABEL_166;
      ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v108, v111);
      CFNumberGetValue(ValueAtIndex, kCFNumberFloatType, &v308);
      v116 = *(float **)(a1 + 272);
      v115 = *(_QWORD *)(a1 + 280);
      if ((unint64_t)v116 >= v115)
        break;
      *v116 = v308;
      v113 = v116 + 1;
LABEL_140:
      *(_QWORD *)(a1 + 272) = v113;
      v112 = v308 + v112;
      if (++v111 == Count)
      {
        LODWORD(v111) = Count;
        goto LABEL_166;
      }
    }
    v117 = (float *)*v109;
    v118 = (char *)v116 - (_BYTE *)*v109;
    v119 = v118 >> 2;
    v120 = (v118 >> 2) + 1;
    if (v120 >> 62)
LABEL_385:
      sub_19C2A18E8();
    v121 = v115 - (_QWORD)v117;
    if (v121 >> 1 > v120)
      v120 = v121 >> 1;
    if ((unint64_t)v121 >= 0x7FFFFFFFFFFFFFFCLL)
      v122 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v122 = v120;
    if (v122)
    {
      if (v122 >> 62)
LABEL_386:
        sub_19C2A143C();
      v123 = operator new(4 * v122);
    }
    else
    {
      v123 = 0;
    }
    v124 = (float *)&v123[4 * v119];
    *v124 = v308;
    v113 = v124 + 1;
    if (v116 == v117)
    {
      a1 = v305;
      goto LABEL_162;
    }
    v125 = (char *)(v116 - 1) - (char *)v117;
    if (v125 >= 0x2C)
    {
      v126 = (char *)v116 - &v123[v118];
      a1 = v305;
      if (v126 >= 0x20)
      {
        v127 = (v125 >> 2) + 1;
        v128 = &v123[4 * v119 - 16];
        v129 = v116 - 4;
        v130 = v127 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v131 = *(_OWORD *)v129;
          *(v128 - 1) = *((_OWORD *)v129 - 1);
          *v128 = v131;
          v128 -= 2;
          v129 -= 8;
          v130 -= 8;
        }
        while (v130);
        v124 -= v127 & 0x7FFFFFFFFFFFFFF8;
        v116 -= v127 & 0x7FFFFFFFFFFFFFF8;
        if (v127 == (v127 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_162:
          *(_QWORD *)(a1 + 264) = v124;
          *(_QWORD *)(a1 + 272) = v113;
          *(_QWORD *)(a1 + 280) = &v123[4 * v122];
          if (v117)
            operator delete(v117);
          goto LABEL_140;
        }
      }
    }
    else
    {
      a1 = v305;
    }
    do
    {
      v132 = *((_DWORD *)v116-- - 1);
      *((_DWORD *)v124-- - 1) = v132;
    }
    while (v116 != v117);
    goto LABEL_162;
  }
  LODWORD(v111) = 0;
  v112 = 0.0;
LABEL_166:
  v133 = *valuePtr;
  if (v111 < *valuePtr)
  {
    v134 = *(char **)(a1 + 272);
    while (1)
    {
      v136 = *(_QWORD *)(a1 + 280);
      if ((unint64_t)v134 >= v136)
        break;
      *(_DWORD *)v134 = 0;
      v135 = v134 + 4;
LABEL_169:
      *(_QWORD *)(a1 + 272) = v135;
      LODWORD(v111) = v111 + 1;
      v134 = v135;
      if (v111 >= v133)
        goto LABEL_196;
    }
    v137 = (char *)*v109;
    v138 = v134 - (_BYTE *)*v109;
    v139 = v138 >> 2;
    v140 = (v138 >> 2) + 1;
    if (v140 >> 62)
      goto LABEL_385;
    v141 = v136 - (_QWORD)v137;
    if (v141 >> 1 > v140)
      v140 = v141 >> 1;
    if ((unint64_t)v141 >= 0x7FFFFFFFFFFFFFFCLL)
      v142 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v142 = v140;
    if (v142)
    {
      if (v142 >> 62)
        goto LABEL_386;
      v143 = operator new(4 * v142);
    }
    else
    {
      v143 = 0;
    }
    v144 = &v143[4 * v139];
    *v144 = 0;
    v135 = (char *)(v144 + 1);
    if (v134 == v137)
    {
      a1 = v305;
      goto LABEL_187;
    }
    v145 = v134 - 4 - v137;
    if (v145 < 0xBC
      || &v143[v138 - 4 - (v145 & 0xFFFFFFFFFFFFFFFCLL)] > &v143[v138 - 4]
      || &v134[-(v145 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v134 - 4
      || (unint64_t)(v134 - v143 - v138) < 0x20)
    {
      v146 = v134;
      a1 = v305;
    }
    else
    {
      v148 = (v145 >> 2) + 1;
      v146 = &v134[-4 * (v148 & 0x7FFFFFFFFFFFFFF8)];
      v149 = &v143[4 * v139 - 16];
      v150 = v134 - 16;
      v151 = v148 & 0x7FFFFFFFFFFFFFF8;
      a1 = v305;
      do
      {
        v152 = *(_OWORD *)v150;
        *(v149 - 1) = *((_OWORD *)v150 - 1);
        *v149 = v152;
        v149 -= 2;
        v150 -= 32;
        v151 -= 8;
      }
      while (v151);
      v144 -= v148 & 0x7FFFFFFFFFFFFFF8;
      if (v148 == (v148 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_187:
        *(_QWORD *)(a1 + 264) = v144;
        *(_QWORD *)(a1 + 272) = v135;
        *(_QWORD *)(a1 + 280) = &v143[4 * v142];
        if (v137)
        {
          operator delete(v137);
          v133 = *valuePtr;
        }
        goto LABEL_169;
      }
    }
    do
    {
      v147 = *((_DWORD *)v146 - 1);
      v146 -= 4;
      *--v144 = v147;
    }
    while (v146 != v137);
    goto LABEL_187;
  }
LABEL_196:
  if (v112 <= 0.0 || Count < 1)
    goto LABEL_207;
  v154 = (float32x4_t *)*v109;
  if ((unint64_t)Count >= 8)
  {
    v155 = Count & 0xFFFFFFFFFFFFFFF8;
    v156 = v154 + 1;
    v157 = Count & 0xFFFFFFFFFFFFFFF8;
    v158 = 1.0 / v112;
    do
    {
      v159 = vmulq_n_f32(*v156, v158);
      v156[-1] = vmulq_n_f32(v156[-1], v158);
      *v156 = v159;
      v156 += 2;
      v157 -= 8;
    }
    while (v157);
    if (Count == v155)
      goto LABEL_207;
  }
  else
  {
    v155 = 0;
  }
  v160 = Count - v155;
  v161 = &v154->f32[v155];
  do
  {
    *v161 = *v161 * (float)(1.0 / v112);
    ++v161;
    --v160;
  }
  while (v160);
LABEL_207:
  v162 = (const __CFDictionary *)CFDictionaryGetValue(theDicta, (const void *)kLMLanguageModelDynamicDataSchema);
  v163 = v301;
  if (!v162)
    goto LABEL_253;
  v164 = v162;
  v165 = CFGetTypeID(v162);
  if (v165 != CFDictionaryGetTypeID() || *(_QWORD *)(a1 + 184))
    goto LABEL_253;
  v166 = operator new();
  v167 = v166 + 24;
  *(_OWORD *)v166 = 0u;
  *(_OWORD *)(v166 + 16) = 0u;
  *(_OWORD *)(v166 + 32) = 0u;
  *(_QWORD *)(v166 + 48) = 0;
  *(_DWORD *)(v166 + 56) = 1065353216;
  *(_QWORD *)(v166 + 64) = 0;
  valuePtra = (char **)v166;
  v300 = v166 + 24;
  v168 = CFDictionaryGetCount(v164);
  v169 = v168;
  if (v168 >> 61)
    sub_19C2A18E8();
  v170 = operator new(8 * v168);
  bzero(v170, 8 * v169);
  v299 = v170;
  v171 = operator new(8 * v169);
  bzero(v171, 8 * v169);
  v298 = v171;
  CFDictionaryGetKeysAndValues(v164, (const void **)v170, (const void **)v171);
  v172 = 0;
  v173 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v297 = v169;
  do
  {
    v174 = CFGetTypeID(*((CFTypeRef *)v170 + v172));
    if (v174 != CFStringGetTypeID())
    {
      v286 = __cxa_allocate_exception(0x20uLL);
      v287 = (char *)operator new(0x20uLL);
      strcpy(v287, "unexpected key type in schema");
      *(_QWORD *)v286 = off_1E3D38838;
      sub_19C2B5238(v286 + 8, v287, 0x1DuLL);
      __cxa_throw(v286, (struct type_info *)&unk_1E3D32968, (void (*)(void *))sub_19C3123E4);
    }
    v175 = (const __CFString *)*((_QWORD *)v170 + v172);
    v176 = CFGetTypeID(*((CFTypeRef *)v171 + v172));
    if (v176 != CFDictionaryGetTypeID())
    {
      v281 = (char *)__cxa_allocate_exception(0x20uLL);
      sub_19C29CEF8(v175, &key);
      v282 = std::string::insert(&key, 0, "unexpected value type in schema for key", 0x27uLL);
      v284 = (void *)v282->__r_.__value_.__r.__words[0];
      size = v282->__r_.__value_.__l.__size_;
      LODWORD(cf) = v282->__r_.__value_.__r.__words[2];
      *(_DWORD *)((char *)&cf + 3) = *(_DWORD *)((char *)&v282->__r_.__value_.__r.__words[2] + 3);
      v285 = SHIBYTE(v282->__r_.__value_.__r.__words[2]);
      v282->__r_.__value_.__l.__size_ = 0;
      v282->__r_.__value_.__r.__words[2] = 0;
      v282->__r_.__value_.__r.__words[0] = 0;
      *(_QWORD *)v281 = off_1E3D38838;
      if (v285 < 0)
      {
        sub_19C2B5238(v281 + 8, v284, size);
      }
      else
      {
        *((_QWORD *)v281 + 1) = v284;
        *((_QWORD *)v281 + 2) = size;
        *((_DWORD *)v281 + 6) = (_DWORD)cf;
        *(_DWORD *)(v281 + 27) = *(_DWORD *)((char *)&cf + 3);
        v281[31] = v285;
      }
      __cxa_throw(v281, (struct type_info *)&unk_1E3D32968, (void (*)(void *))sub_19C3123E4);
    }
    v177 = (const __CFDictionary *)*((_QWORD *)v171 + v172);
    v179 = *(_QWORD *)(v166 + 8);
    v178 = *(_QWORD *)(v166 + 16);
    if (v179 < v178)
    {
      sub_19C351E70(*(uint64_t **)(v166 + 8), v175, *((const __CFDictionary **)v171 + v172));
      v180 = (uint64_t *)(v179 + 48);
      *(_QWORD *)(v166 + 8) = v179 + 48;
      a1 = v305;
      goto LABEL_243;
    }
    v181 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v179 - *(_QWORD *)v166) >> 4);
    v182 = v181 + 1;
    if (v181 + 1 > 0x555555555555555)
      sub_19C2A18E8();
    v183 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v178 - *(_QWORD *)v166) >> 4);
    if (2 * v183 > v182)
      v182 = 2 * v183;
    if (v183 >= 0x2AAAAAAAAAAAAAALL)
      v184 = 0x555555555555555;
    else
      v184 = v182;
    if (v184)
    {
      if (v184 > 0x555555555555555)
        sub_19C2A143C();
      v185 = (char *)operator new(48 * v184);
    }
    else
    {
      v185 = 0;
    }
    v186 = (uint64_t *)&v185[48 * v181];
    v187 = v185;
    sub_19C351E70(v186, v175, v177);
    v180 = v186 + 6;
    v189 = *(char **)v166;
    v188 = *(char **)(v166 + 8);
    if (v188 == *(char **)v166)
    {
      *(_QWORD *)v166 = v186;
      *(_QWORD *)(v166 + 8) = v180;
      *(_QWORD *)(v166 + 16) = &v187[48 * v184];
      a1 = v305;
      v171 = v298;
      v170 = v299;
      v169 = v297;
      v167 = v300;
      if (v188)
        goto LABEL_242;
    }
    else
    {
      v302 = &v187[48 * v184];
      v190 = 0;
      do
      {
        v191 = &v186[v190 / 8 - 6];
        v192 = (void **)&v188[v190 - 48];
        if (v188[v190 - 25] < 0)
        {
          sub_19C2B5238(v191, *v192, *(_QWORD *)&v188[v190 - 40]);
        }
        else
        {
          v193 = *(_OWORD *)v192;
          v186[v190 / 8 - 4] = *(_QWORD *)&v188[v190 - 32];
          *(_OWORD *)v191 = v193;
        }
        v194 = &v186[v190 / 8];
        *(v194 - 3) = (uint64_t)CFStringCreateCopy(v173, *(CFStringRef *)&v188[v190 - 24]);
        *((_DWORD *)v194 - 4) = *(_DWORD *)&v188[v190 - 16];
        *((_WORD *)v194 - 6) = *(_WORD *)&v188[v190 - 12];
        *(v194 - 1) = (uint64_t)CFRetain(*(CFTypeRef *)&v188[v190 - 8]);
        v190 -= 48;
      }
      while (&v188[v190] != v189);
      v195 = &v186[v190 / 8];
      v188 = *valuePtra;
      v196 = valuePtra[1];
      *valuePtra = (char *)v195;
      valuePtra[1] = (char *)v180;
      valuePtra[2] = v302;
      if (v196 == v188)
      {
        v166 = (uint64_t)valuePtra;
        a1 = v305;
        v170 = v299;
        v167 = v300;
        v169 = v297;
        v171 = v298;
        if (v188)
          goto LABEL_242;
      }
      else
      {
        a1 = v305;
        v170 = v299;
        v167 = v300;
        v169 = v297;
        v171 = v298;
        do
        {
          v197 = (const void *)*((_QWORD *)v196 - 3);
          if (v197)
            CFRelease(v197);
          v198 = (const void *)*((_QWORD *)v196 - 1);
          if (v198)
            CFRelease(v198);
          if (*(v196 - 25) < 0)
            operator delete(*((void **)v196 - 6));
          v196 -= 48;
        }
        while (v196 != v188);
        v166 = (uint64_t)valuePtra;
        if (v188)
LABEL_242:
          operator delete(v188);
      }
    }
LABEL_243:
    *(_QWORD *)(v166 + 8) = v180;
    key.__r_.__value_.__r.__words[0] = (std::string::size_type)(v180 - 6);
    *((_DWORD *)sub_19C31795C(v167, (uint64_t)(v180 - 6), (__int128 **)&key) + 10) = v172++;
  }
  while (v172 != v169);
  v199 = *(char **)v166;
  v200 = *(char **)(v166 + 8);
  v163 = v301;
  if (*(char **)v166 != v200)
  {
    do
    {
      if (v199[37])
      {
        if (*(_QWORD *)(v166 + 64))
        {
          v237 = __cxa_allocate_exception(0x20uLL);
          sub_19C34EC30("schema should only specify one token string key", (uint64_t)&key);
          *v237 = off_1E3D38838;
          v238 = v237 + 1;
          if (SHIBYTE(key.__r_.__value_.__r.__words[2]) < 0)
          {
            sub_19C2B5238(v238, key.__r_.__value_.__l.__data_, key.__r_.__value_.__l.__size_);
          }
          else
          {
            v293 = *(_OWORD *)&key.__r_.__value_.__l.__data_;
            v237[3] = *((_QWORD *)&key.__r_.__value_.__l + 2);
            *(_OWORD *)v238 = v293;
          }
          __cxa_throw(v237, (struct type_info *)&unk_1E3D32968, (void (*)(void *))sub_19C3123E4);
        }
        *(_QWORD *)(v166 + 64) = v199;
      }
      v199 += 48;
    }
    while (v199 != v200);
  }
  if (!*(_QWORD *)(v166 + 64))
  {
    v294 = __cxa_allocate_exception(0x20uLL);
    sub_19C34EC30("schema must specify a token string key", (uint64_t)&key);
    *v294 = off_1E3D38838;
    v295 = v294 + 1;
    if (SHIBYTE(key.__r_.__value_.__r.__words[2]) < 0)
    {
      sub_19C2B5238(v295, key.__r_.__value_.__l.__data_, key.__r_.__value_.__l.__size_);
    }
    else
    {
      v296 = *(_OWORD *)&key.__r_.__value_.__l.__data_;
      v294[3] = *((_QWORD *)&key.__r_.__value_.__l + 2);
      *(_OWORD *)v295 = v296;
    }
    __cxa_throw(v294, (struct type_info *)&unk_1E3D32968, (void (*)(void *))sub_19C3123E4);
  }
  operator delete(v171);
  operator delete(v170);
  v201 = *(void ***)(a1 + 184);
  *(_QWORD *)(a1 + 184) = v166;
  if (v201)
    sub_19C2F5DD8(v201);
LABEL_253:
  if (theDicta)
  {
    v202 = (const __CFNumber *)CFDictionaryGetValue(theDicta, (const void *)kLMLanguageModelMaxDynamicLexiconEntryCount);
    if (v202)
    {
      v203 = v202;
      v204 = CFGetTypeID(v202);
      if (v204 == CFNumberGetTypeID())
        CFNumberGetValue(v203, kCFNumberIntType, (void *)(a1 + 308));
    }
    if (theDicta)
    {
      v205 = (const __CFNumber *)CFDictionaryGetValue(theDicta, (const void *)kLMLanguageModelUnknownTokenPenaltyKey);
      if (v205)
      {
        v206 = v205;
        v207 = CFGetTypeID(v205);
        if (v207 == CFNumberGetTypeID())
          CFNumberGetValue(v206, kCFNumberFloatType, (void *)(a1 + 352));
      }
    }
  }
  v208 = (const __CFString *)CFDictionaryGetValue(theDicta, (const void *)kLMLanguageModelUseDynamicTokenCharacterFilterKey);
  *(_BYTE *)(a1 + 356) = sub_19C29CB48(v208, 1);
  v209 = (const __CFString *)CFDictionaryGetValue(theDicta, (const void *)kLMLanguageModelUseSpecialNumberTokenKey);
  *(_BYTE *)(a1 + 358) = sub_19C29CB48(v209, 1);
  v210 = (const __CFString *)CFDictionaryGetValue(theDicta, (const void *)kLMLanguageModelUseSerializedCacheKey);
  *(_BYTE *)(a1 + 357) = sub_19C29CB48(v210, 0);
  v211 = (const __CFString *)CFDictionaryGetValue(theDicta, (const void *)kLMLanguageModelUseMontrealKey);
  *(_BYTE *)(a1 + 360) = sub_19C29CB48(v211, 1);
  v212 = (const __CFString *)CFDictionaryGetValue(theDicta, (const void *)kLMLanguageModelUseLegacyStaticNgramModelsKey);
  *(_BYTE *)(a1 + 361) = sub_19C29CB48(v212, 1);
  if (CFDictionaryContainsKey(theDicta, (const void *)kLMLanguageModelUseMontrealUNKKey))
    *(_BYTE *)(a1 + 400) = 1;
  if (theDicta)
  {
    v213 = (const __CFNumber *)CFDictionaryGetValue(theDicta, (const void *)kLMLanguageModelMaxMontrealPredictionsKey);
    if (v213)
    {
      v214 = v213;
      v215 = CFGetTypeID(v213);
      if (v215 == CFNumberGetTypeID())
        CFNumberGetValue(v214, kCFNumberIntType, (void *)(a1 + 372));
    }
    if (theDicta)
    {
      v216 = (const __CFNumber *)CFDictionaryGetValue(theDicta, CFSTR("maxMontrealClassMemberPredictions"));
      if (v216)
      {
        v217 = v216;
        v218 = CFGetTypeID(v216);
        if (v218 == CFNumberGetTypeID())
          CFNumberGetValue(v217, kCFNumberIntType, (void *)(a1 + 376));
      }
      if (theDicta)
      {
        v219 = (const __CFNumber *)CFDictionaryGetValue(theDicta, (const void *)kLMLanguageModelMontrealFullCacheSize);
        if (v219)
        {
          v220 = v219;
          v221 = CFGetTypeID(v219);
          if (v221 == CFNumberGetTypeID())
            CFNumberGetValue(v220, kCFNumberIntType, (void *)(a1 + 380));
        }
        if (theDicta)
        {
          v222 = (const __CFNumber *)CFDictionaryGetValue(theDicta, (const void *)kLMLanguageModelMontrealSparseCacheSize);
          if (v222)
          {
            v223 = v222;
            v224 = CFGetTypeID(v222);
            if (v224 == CFNumberGetTypeID())
              CFNumberGetValue(v223, kCFNumberIntType, (void *)(a1 + 384));
          }
          if (theDicta)
          {
            v225 = (const __CFNumber *)CFDictionaryGetValue(theDicta, (const void *)kLMLanguageModelAddressBookNamePenaltyKey);
            if (v225)
            {
              v226 = v225;
              v227 = CFGetTypeID(v225);
              if (v227 == CFNumberGetTypeID())
                CFNumberGetValue(v226, kCFNumberFloatType, (void *)(a1 + 388));
            }
            if (theDicta)
            {
              v228 = (const __CFNumber *)CFDictionaryGetValue(theDicta, (const void *)kLMLanguageModelNegativeLearningThresholdKey);
              if (v228)
              {
                v229 = v228;
                v230 = CFGetTypeID(v228);
                if (v230 == CFNumberGetTypeID())
                  CFNumberGetValue(v229, kCFNumberIntType, (void *)(a1 + 392));
              }
            }
          }
        }
      }
    }
  }
  v231 = (const __CFString *)CFDictionaryGetValue(theDicta, (const void *)kLMLanguageModelGenerateFstPrimingTokenKey);
  *(_BYTE *)(a1 + 363) = sub_19C29CB48(v231, 0);
  v232 = (const __CFString *)CFDictionaryGetValue(theDicta, (const void *)kLMExcludeInformalDynamicDataKey);
  *(_BYTE *)(a1 + 401) = sub_19C29CB48(v232, *(unsigned __int8 *)(a1 + 401));
  v233 = (const __CFString *)CFDictionaryGetValue(theDicta, (const void *)kLMLanguageModelEnableSearchQueryModelLoadingKey);
  *(_BYTE *)(a1 + 362) = sub_19C29CB48(v233, 0);
  v234 = *(const __CFLocale **)(a1 + 176);
  if (v234 && *v163 && *(_BYTE *)(a1 + 344))
  {
    v235 = (const __CFString *)CFLocaleGetValue(v234, (CFLocaleKey)*MEMORY[0x1E0C9B088]);
    v236 = (uint64_t)v235;
    if (v235)
      v236 = CFStringCompare(v235, CFSTR("en"), 0) == kCFCompareEqualTo
          || CFStringCompare((CFStringRef)v236, CFSTR("fr"), 0) == kCFCompareEqualTo
          || CFStringCompare((CFStringRef)v236, CFSTR("de"), 0) == kCFCompareEqualTo
          || CFStringCompare((CFStringRef)v236, CFSTR("es"), 0) == kCFCompareEqualTo
          || CFStringCompare((CFStringRef)v236, CFSTR("it"), 0) == kCFCompareEqualTo
          || CFStringCompare((CFStringRef)v236, CFSTR("pt"), 0) == kCFCompareEqualTo
          || CFStringCompare((CFStringRef)v236, CFSTR("tr"), 0) == kCFCompareEqualTo
          || CFStringCompare((CFStringRef)v236, CFSTR("ru"), 0) == kCFCompareEqualTo;
    v239 = (const __CFString *)CFDictionaryGetValue(theDicta, (const void *)kLMLanguageModelDifferentialPrivacyEnabledKey);
    *(_BYTE *)(a1 + 359) = sub_19C29CB48(v239, v236);
  }
  v240 = CFDictionaryGetValue(theDicta, (const void *)kLMLanguageModelDynamicLexiconNameKey);
  if (v240)
  {
    v241 = v240;
    v242 = CFGetTypeID(v240);
    if (v242 == CFStringGetTypeID())
    {
      v243 = CFRetain(v241);
      v244 = *(const void **)(a1 + 408);
      if (v244)
        CFRelease(v244);
      *(_QWORD *)(a1 + 408) = v243;
    }
  }
  v245 = (const __CFString *)CFDictionaryGetValue(theDicta, (const void *)kLMLanguageModelLegacyGenericNameTokenKey);
  if (v245)
  {
    v246 = v245;
    v247 = CFGetTypeID(v245);
    if (v247 == CFStringGetTypeID())
    {
      sub_19C29CEF8(v246, &key);
      v248 = (void **)(a1 + 432);
      if (*(char *)(a1 + 455) < 0)
        operator delete(*v248);
      *(_OWORD *)v248 = *(_OWORD *)&key.__r_.__value_.__l.__data_;
      *(_QWORD *)(a1 + 448) = *((_QWORD *)&key.__r_.__value_.__l + 2);
    }
  }
  v249 = theDicta;
  if (!theDicta)
  {
    v306 = 0;
LABEL_391:
    v289 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD3154](v289, "Could not construct");
    __cxa_throw(v289, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  CFRetain(theDicta);
  sub_19C29438C(&v306, v249);
  if (!v306)
    goto LABEL_391;
  if (!kLMLearnStaticWordCaseVariantsForLocalesKey)
    goto LABEL_334;
  v250 = CFDictionaryGetValue(v306, (const void *)kLMLearnStaticWordCaseVariantsForLocalesKey);
  v251 = v250;
  if (!v250)
    goto LABEL_334;
  CFRetain(v250);
  v252 = CFGetTypeID(v251);
  if (v252 != CFArrayGetTypeID())
  {
    CFRelease(v251);
LABEL_334:
    key.__r_.__value_.__s.__data_[0] = 0;
    goto LABEL_335;
  }
  key.__r_.__value_.__r.__words[0] = (std::string::size_type)v251;
  key.__r_.__value_.__s.__data_[8] = 1;
  v253 = *(const __CFLocale **)(a1 + 176);
  if (CFArrayGetCount((CFArrayRef)v251))
  {
    v254 = CFArrayGetCount((CFArrayRef)v251);
    v255 = CFArrayGetCount((CFArrayRef)v251);
    if (v254)
    {
      v256 = v255;
      v257 = 0;
      v258 = (const __CFString *)*MEMORY[0x1E0C9B088];
      while (v256 != v257)
      {
        sub_19C3FC8C4(&cf, (CFArrayRef)v251, v257);
        v259 = (const __CFString *)cf;
        v260 = (const __CFString *)MEMORY[0x1A1AD2A04](v253);
        v261 = CFStringCompare(v259, v260, 0);
        v262 = (const __CFString *)cf;
        if (v261 == kCFCompareEqualTo)
        {
          if (cf)
            CFRelease(cf);
LABEL_380:
          v265 = 1;
          goto LABEL_332;
        }
        v263 = (const __CFString *)CFLocaleGetValue(v253, v258);
        v264 = CFStringCompare(v262, v263, 0);
        if (cf)
          CFRelease(cf);
        if (v264 == kCFCompareEqualTo)
          goto LABEL_380;
        if (v254 == ++v257)
          break;
      }
    }
  }
  v265 = 0;
LABEL_332:
  *(_BYTE *)(a1 + 416) = v265;
  CFRelease(v251);
LABEL_335:
  v266 = v306;
  if (!v306)
  {
    v290 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD3154](v290, "Could not construct");
    __cxa_throw(v290, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  if (kLMLanguageModelShouldExcludeMobileAssetsKey)
  {
    v267 = (const __CFNumber *)CFDictionaryGetValue(v306, (const void *)kLMLanguageModelShouldExcludeMobileAssetsKey);
    if (v267)
    {
      v268 = (unsigned __int16)sub_19C2F57F4(v267);
      if (v268 <= 0x100)
        LOBYTE(v268) = 0;
      v268 = v268;
    }
    else
    {
      v268 = 0;
    }
    v266 = v306;
    *(_BYTE *)(a1 + 417) = v268 != 0;
    if (!v266)
    {
      v291 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1A1AD3154](v291, "Could not construct");
      __cxa_throw(v291, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
    }
  }
  else
  {
    *(_BYTE *)(a1 + 417) = 0;
  }
  if (kLMLanguageModelRequiresStaticModelKey
    && (v269 = (const __CFNumber *)CFDictionaryGetValue(v266, (const void *)kLMLanguageModelRequiresStaticModelKey)) != 0)
  {
    v270 = (unsigned __int16)sub_19C2F57F4(v269);
    if (v270 <= 0x100)
      LOBYTE(v270) = 0;
    v270 = v270;
  }
  else
  {
    v270 = 0;
  }
  *(_BYTE *)(a1 + 418) = v270 != 0;
  v271 = theDicta;
  sub_19C29471C((CFStringRef *)&key, (char *)language_modeling::v1::kLanguageModelInlineCompletionPrecisionOperatingPointKey);
  v272 = CFDictionaryContainsKey(v271, key.__r_.__value_.__l.__data_);
  if (key.__r_.__value_.__r.__words[0])
    CFRelease(key.__r_.__value_.__l.__data_);
  if (!v272)
  {
LABEL_364:
    if ((_os_feature_enabled_impl() & 1) == 0)
    {
      if (_os_feature_enabled_impl())
        v277 = 1;
      else
        v277 = 2;
      goto LABEL_371;
    }
LABEL_365:
    v277 = 0;
    goto LABEL_371;
  }
  sub_19C29471C((CFStringRef *)&key, (char *)language_modeling::v1::kLanguageModelInlineCompletionPrecisionOperatingPointKey);
  v273 = (const __CFString *)CFDictionaryGetValue(v271, key.__r_.__value_.__l.__data_);
  if (key.__r_.__value_.__r.__words[0])
    CFRelease(key.__r_.__value_.__l.__data_);
  sub_19C29471C((CFStringRef *)&key, (char *)language_modeling::v1::kLanguageModelInlineCompletionPrecisionOperatingPoint70);
  v274 = CFStringCompare(v273, (CFStringRef)key.__r_.__value_.__l.__data_, 0);
  if (key.__r_.__value_.__r.__words[0])
    CFRelease(key.__r_.__value_.__l.__data_);
  if (v274 == kCFCompareEqualTo)
    goto LABEL_365;
  sub_19C29471C((CFStringRef *)&key, (char *)language_modeling::v1::kLanguageModelInlineCompletionPrecisionOperatingPoint80);
  v275 = CFStringCompare(v273, (CFStringRef)key.__r_.__value_.__l.__data_, 0);
  if (key.__r_.__value_.__r.__words[0])
    CFRelease(key.__r_.__value_.__l.__data_);
  if (v275)
  {
    sub_19C29471C((CFStringRef *)&key, (char *)language_modeling::v1::kLanguageModelInlineCompletionPrecisionOperatingPoint90);
    v276 = CFStringCompare(v273, (CFStringRef)key.__r_.__value_.__l.__data_, 0);
    if (key.__r_.__value_.__r.__words[0])
      CFRelease(key.__r_.__value_.__l.__data_);
    if (v276)
      goto LABEL_364;
    v277 = 2;
  }
  else
  {
    v277 = 1;
  }
LABEL_371:
  *(_DWORD *)(a1 + 456) = v277;
  if (theDicta)
  {
    v278 = (const __CFNumber *)CFDictionaryGetValue(theDicta, (const void *)kLMTransientLanguageModelLogProbabilityModifierKey);
    v279 = v278;
    if (v278)
    {
      v280 = CFGetTypeID(v278);
      if (v280 == CFNumberGetTypeID())
        CFNumberGetValue(v279, kCFNumberDoubleType, (void *)(a1 + 464));
    }
  }
  if (v306)
    CFRelease(v306);
}

void sub_19C29C70C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, void *a12, void *a13, void **a14, uint64_t a15, uint64_t a16, _QWORD *a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  std::exception *v30;
  void **v32;
  void *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  void **v38;
  const void *v39;
  const void *v40;

  std::exception::~exception(v30);
  if (a30 < 0)
    operator delete(__p);
  __cxa_free_exception(v30);
  operator delete(a12);
  operator delete(a13);
  v32 = (void **)a17[5];
  if (v32)
  {
    do
    {
      v38 = (void **)*v32;
      if (*((char *)v32 + 39) < 0)
        operator delete(v32[2]);
      operator delete(v32);
      v32 = v38;
    }
    while (v38);
  }
  v33 = *a14;
  *a14 = 0;
  if (v33)
    operator delete(v33);
  v34 = a17;
  v35 = *a17;
  if (*a17)
  {
    v36 = a17[1];
    v37 = (void *)*a17;
    if (v36 != v35)
    {
      do
      {
        v39 = *(const void **)(v36 - 24);
        if (v39)
          CFRelease(v39);
        v40 = *(const void **)(v36 - 8);
        if (v40)
          CFRelease(v40);
        if (*(char *)(v36 - 25) < 0)
          operator delete(*(void **)(v36 - 48));
        v36 -= 48;
      }
      while (v36 != v35);
      v37 = (void *)*a17;
    }
    v34 = a17;
    a17[1] = v35;
    operator delete(v37);
  }
  MEMORY[0x1A1AD355C](v34, 0x10E0C40052DA004);
  _Unwind_Resume(a1);
}

void sub_19C29CA44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;

  while (v1 != v2)
  {
    v3 = *(const void **)(v1 + 24);
    if (v3)
      CFRelease(v3);
    v4 = *(const void **)(v1 + 40);
    if (v4)
      CFRelease(v4);
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    v1 += 48;
  }
  while (v0 != v2)
  {
    v5 = *(const void **)(v0 - 24);
    if (v5)
      CFRelease(v5);
    v6 = *(const void **)(v0 - 8);
    if (v6)
      CFRelease(v6);
    if (*(char *)(v0 - 25) < 0)
      operator delete(*(void **)(v0 - 48));
    v0 -= 48;
  }
  JUMPOUT(0x19C29C90CLL);
}

void sub_19C29CAF8(uint64_t a1, const void *a2, int a3, int a4, CFStringRef theString1)
{
  if (CFStringCompare(theString1, *(CFStringRef *)(a1 + 40), 0) == kCFCompareEqualTo)
    CFArrayAppendValue(*(CFMutableArrayRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), a2);
}

BOOL sub_19C29CB48(const __CFString *a1, uint64_t a2)
{
  CFTypeID v3;
  uint64_t v4;
  int valuePtr;

  if (!a1)
    return a2;
  v3 = CFGetTypeID(a1);
  if (v3 == CFStringGetTypeID())
  {
    v4 = 1;
    if (CFStringCompare(a1, CFSTR("true"), 1uLL) == kCFCompareEqualTo)
      return v4;
    return CFStringCompare(a1, CFSTR("YES"), 1uLL) == kCFCompareEqualTo;
  }
  else
  {
    if (v3 == CFNumberGetTypeID() && !CFNumberIsFloatType((CFNumberRef)a1))
    {
      valuePtr = 0;
      CFNumberGetValue((CFNumberRef)a1, kCFNumberIntType, &valuePtr);
      return valuePtr != 0;
    }
    if (v3 != CFBooleanGetTypeID())
      return 0;
    return *MEMORY[0x1E0C9AE50] == (_QWORD)a1;
  }
}

void sub_19C29CC2C(uint64_t a1, _BYTE *a2, const __CFString *key, uint64_t a4)
{
  const void *Value;
  const __CFString *v9;
  _BOOL4 v10;
  NSObject *v11;
  void **v12;
  int v13;
  const char *v14;
  void **v15;
  int v16;
  NSObject *v17;
  void **v18;
  int v19;
  void *__p[2];
  char v21;
  uint8_t buf[4];
  void **v23;
  __int16 v24;
  int v25;
  __int16 v26;
  _BOOL4 v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  Value = CFDictionaryGetValue(**(CFDictionaryRef **)a1, key);
  sub_19C29CEF8(key, __p);
  if (!Value)
    goto LABEL_18;
  v9 = (const __CFString *)CFDictionaryGetValue(**(CFDictionaryRef **)a1, key);
  v10 = sub_19C29CB48(v9, a4);
  if (!**(_BYTE **)(a1 + 8))
  {
    if (qword_1EDB97228 != -1)
      dispatch_once(&qword_1EDB97228, &unk_1E3D3ABD0);
    v11 = qword_1EDB97220;
    if (!os_log_type_enabled((os_log_t)qword_1EDB97220, OS_LOG_TYPE_INFO))
      goto LABEL_17;
    v15 = __p;
    if (v21 < 0)
      v15 = (void **)__p[0];
    v16 = *a2;
    *(_DWORD *)buf = 136315650;
    v23 = v15;
    v24 = 1024;
    v25 = v16;
    v26 = 1024;
    v27 = v10;
    v14 = "LD is Updating %s from %d to %d";
    goto LABEL_16;
  }
  if (*a2 == (_DWORD)a4)
  {
    if (qword_1EDB97228 != -1)
      dispatch_once(&qword_1EDB97228, &unk_1E3D3ABD0);
    v11 = qword_1EDB97220;
    if (!os_log_type_enabled((os_log_t)qword_1EDB97220, OS_LOG_TYPE_INFO))
      goto LABEL_17;
    v12 = __p;
    if (v21 < 0)
      v12 = (void **)__p[0];
    v13 = *a2;
    *(_DWORD *)buf = 136315650;
    v23 = v12;
    v24 = 1024;
    v25 = v13;
    v26 = 1024;
    v27 = v10;
    v14 = "Options is updating %s from %d to %d";
LABEL_16:
    _os_log_impl(&dword_19C291000, v11, OS_LOG_TYPE_INFO, v14, buf, 0x18u);
LABEL_17:
    *a2 = v10;
    goto LABEL_18;
  }
  if (qword_1EDB97228 != -1)
    dispatch_once(&qword_1EDB97228, &unk_1E3D3ABD0);
  v17 = qword_1EDB97220;
  if (os_log_type_enabled((os_log_t)qword_1EDB97220, OS_LOG_TYPE_INFO))
  {
    v18 = __p;
    if (v21 < 0)
      v18 = (void **)__p[0];
    v19 = *a2;
    *(_DWORD *)buf = 136315650;
    v23 = v18;
    v24 = 1024;
    v25 = v19;
    v26 = 1024;
    v27 = v10;
    _os_log_impl(&dword_19C291000, v17, OS_LOG_TYPE_INFO, "LD has already modified  %s, not updating from %d to %d", buf, 0x18u);
  }
LABEL_18:
  if (v21 < 0)
    operator delete(__p[0]);
}

void sub_19C29CED0(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_19C29CEDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

const __CFString *sub_19C29CEF8@<X0>(const __CFString *result@<X0>, _QWORD *a2@<X8>)
{
  const __CFString *v3;
  char *CStringPtr;
  CFIndex Length;
  CFIndex v6;
  char *v7;

  if (result)
  {
    v3 = result;
    CStringPtr = (char *)CFStringGetCStringPtr(result, 0x8000100u);
    if (!CStringPtr)
    {
      Length = CFStringGetLength(v3);
      v6 = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u) + 1;
      v7 = (char *)operator new[]();
      CFStringGetCString(v3, v7, v6, 0x8000100u);
      sub_19C2A6D48(a2, v7);
      JUMPOUT(0x1A1AD3538);
    }
    return (const __CFString *)sub_19C2A6D48(a2, CStringPtr);
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  return result;
}

void sub_19C29CFD0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD3538](v1, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

void LMStreamTokenizerPushBytes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1)
    sub_19C2931F4(*(_QWORD *)(a1 + 24), a2, a3, a4);
}

void LMLanguageModelRelease(CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
}

void LMStreamTokenizerRelease(CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
}

void **sub_19C29D01C(void **__dst, void *__src, size_t __len)
{
  unint64_t v6;
  void *v7;
  unint64_t v8;
  void *v9;
  unint64_t v10;
  size_t v11;
  unint64_t v12;
  uint64_t v13;

  LODWORD(v6) = *((char *)__dst + 23);
  if ((v6 & 0x80000000) != 0)
  {
    v10 = (unint64_t)__dst[2];
    v8 = (v10 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (__len > v8)
    {
      v11 = 0x7FFFFFFFFFFFFFF7;
      if (0x7FFFFFFFFFFFFFF7 - (v10 & 0x7FFFFFFFFFFFFFFFLL) >= __len - v8)
      {
        v9 = *__dst;
        if (v8 > 0x3FFFFFFFFFFFFFF2)
        {
LABEL_15:
          v7 = operator new(v11);
          memcpy(v7, __src, __len);
          if (v8 != 22)
            operator delete(v9);
          __dst[2] = (void *)(v11 | 0x8000000000000000);
          *__dst = v7;
LABEL_23:
          __dst[1] = (void *)__len;
          goto LABEL_24;
        }
LABEL_8:
        v12 = 2 * v8;
        if (__len > 2 * v8)
          v12 = __len;
        v13 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v12 | 7) != 0x17)
          v13 = v12 | 7;
        if (v12 >= 0x17)
          v11 = v13 + 1;
        else
          v11 = 23;
        goto LABEL_15;
      }
LABEL_25:
      sub_19C2A1A54();
    }
    v6 = HIBYTE(v10);
    v7 = *__dst;
  }
  else
  {
    v7 = __dst;
    if (__len > 0x16)
    {
      if (__len - 0x7FFFFFFFFFFFFFF7 >= 0x800000000000001FLL)
      {
        v8 = 22;
        v9 = __dst;
        goto LABEL_8;
      }
      goto LABEL_25;
    }
  }
  if (__len)
  {
    memmove(v7, __src, __len);
    LOBYTE(v6) = *((_BYTE *)__dst + 23);
  }
  if ((v6 & 0x80) != 0)
    goto LABEL_23;
  *((_BYTE *)__dst + 23) = __len & 0x7F;
LABEL_24:
  *((_BYTE *)v7 + __len) = 0;
  return __dst;
}

uint64_t sub_19C29D178()
{
  return LXLexiconLockMemory();
}

uint64_t sub_19C29D180(uint64_t a1)
{
  return sub_19C29D56C((uint64_t *)(a1 + 16));
}

void sub_19C29D188(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const std::error_category *v5;
  const std::error_category *v6;
  NSObject *v7;
  std::string *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  std::string v15;
  std::error_code v16;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  std::string *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v2 = a1[16];
  v3 = a1[17];
  if (v2 != v3)
  {
    while (mlock(*(const void **)(*(_QWORD *)v2 + 112), *(_QWORD *)(*(_QWORD *)v2 + 120)))
    {
      v4 = *__error();
      v5 = std::generic_category();
      *(_QWORD *)&v16.__val_ = v4;
      v16.__cat_ = v5;
      if (!(_DWORD)v4)
        goto LABEL_8;
LABEL_3:
      v2 += 16;
      if (v2 == v3)
        goto LABEL_15;
    }
    v6 = std::system_category();
    *(_QWORD *)&v16.__val_ = 0;
    v16.__cat_ = v6;
LABEL_8:
    if (qword_1EDB97228 != -1)
      dispatch_once(&qword_1EDB97228, &unk_1E3D3ABD0);
    v7 = qword_1EDB97220;
    if (os_log_type_enabled((os_log_t)qword_1EDB97220, OS_LOG_TYPE_DEFAULT))
    {
      std::error_code::message(&v15, &v16);
      v8 = &v15;
      if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v8 = (std::string *)v15.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315394;
      v18 = "mlock";
      v19 = 2080;
      v20 = v8;
      _os_log_impl(&dword_19C291000, v7, OS_LOG_TYPE_DEFAULT, "%s: mlock() failed: %s", buf, 0x16u);
      if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v15.__r_.__value_.__l.__data_);
    }
    goto LABEL_3;
  }
LABEL_15:
  v9 = a1[23];
  v10 = a1[24];
  while (v9 != v10)
  {
    v11 = *(uint64_t **)(*(_QWORD *)v9 + 8);
    v12 = *(uint64_t **)(*(_QWORD *)v9 + 16);
    while (v11 != v12)
    {
      v13 = *v11++;
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 72))(v13);
    }
    v9 += 16;
  }
  v14 = a1[31];
  if (v14)
    (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v14 + 16) + 16) + 80))(*(_QWORD *)(*(_QWORD *)(v14 + 16) + 16));
}

void sub_19C29D3A4(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_19C2CDAC8(a1);
}

uint64_t sub_19C29D3B0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 40))(*(_QWORD *)(a1 + 40));
}

uint64_t sub_19C29D3C0(uint64_t a1, void *cf)
{
  CFTypeID v4;
  const __CFDictionary *v5;
  uint64_t v6;
  uint64_t v7;
  CFTypeID v8;
  void *values;

  if (!cf)
  {
    v7 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = 0;
    if (!v7)
      return 1;
    goto LABEL_9;
  }
  v4 = CFGetTypeID(cf);
  if (v4 == CFStringGetTypeID())
  {
    values = cf;
    v5 = CFDictionaryCreate(0, (const void **)&kLMRecordHashKey, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v6 = operator new();
    sub_19C3ECC0C(v6, v5);
    CFRelease(v5);
    goto LABEL_8;
  }
  v8 = CFGetTypeID(cf);
  if (v8 == CFDictionaryGetTypeID())
  {
    v6 = operator new();
    sub_19C3ECC0C(v6, (CFDictionaryRef)cf);
LABEL_8:
    v7 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v6;
    if (!v7)
      return 1;
LABEL_9:
    if (*(char *)(v7 + 95) < 0)
    {
      operator delete(*(void **)(v7 + 72));
      if ((*(char *)(v7 + 71) & 0x80000000) == 0)
      {
LABEL_11:
        if ((*(char *)(v7 + 47) & 0x80000000) == 0)
          goto LABEL_12;
        goto LABEL_17;
      }
    }
    else if ((*(char *)(v7 + 71) & 0x80000000) == 0)
    {
      goto LABEL_11;
    }
    operator delete(*(void **)(v7 + 48));
    if ((*(char *)(v7 + 47) & 0x80000000) == 0)
    {
LABEL_12:
      if ((*(char *)(v7 + 23) & 0x80000000) == 0)
      {
LABEL_13:
        MEMORY[0x1A1AD355C](v7, 0x1012C4003C2D8E3);
        return 1;
      }
LABEL_18:
      operator delete(*(void **)v7);
      goto LABEL_13;
    }
LABEL_17:
    operator delete(*(void **)(v7 + 24));
    if ((*(char *)(v7 + 23) & 0x80000000) == 0)
      goto LABEL_13;
    goto LABEL_18;
  }
  return 0;
}

void sub_19C29D544(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD355C](v1, 0x1012C4003C2D8E3);
  _Unwind_Resume(a1);
}

uint64_t sub_19C29D56C(uint64_t *a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v1 = *a1;
  v5 = 0;
  v6 = &v5;
  v7 = 0x2000000000;
  v2 = off_1EDB96E50;
  v8 = off_1EDB96E50;
  if (off_1EDB96E50)
    goto LABEL_7;
  v9 = 0;
  if (qword_1EDB97038)
  {
    v2 = (void *)qword_1EDB97038;
  }
  else
  {
    v10 = xmmword_1E3D3A728;
    v11 = 0;
    qword_1EDB97038 = _sl_dlopen();
    v3 = v9;
    v2 = (void *)qword_1EDB97038;
    if (!qword_1EDB97038)
    {
      v3 = (void *)abort_report_np();
      goto LABEL_11;
    }
    if (v9)
      goto LABEL_12;
  }
  while (1)
  {
    v2 = dlsym(v2, "MRLNeuralNetworkModelLock");
    v6[3] = (uint64_t)v2;
    off_1EDB96E50 = v2;
LABEL_7:
    _Block_object_dispose(&v5, 8);
    if (v2)
      break;
    dlerror();
    v3 = (void *)abort_report_np();
LABEL_11:
    __break(1u);
LABEL_12:
    free(v3);
  }
  return ((uint64_t (*)(uint64_t))v2)(v1);
}

void sub_19C29D6B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

_QWORD *sub_19C29D6CC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_1E3D33968;
  v2 = a1[1];
  if (v2)
  {
    v3 = sub_19C2966B4(v2);
    MEMORY[0x1A1AD355C](v3, 0x10F0C4069D522A4);
  }
  return a1;
}

uint64_t language_modeling::v1::LanguageModelSession::supportsPrefixCompletions(language_modeling::v1::LanguageModelSession *this)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)this + 176))(*(_QWORD *)this);
}

void sub_19C29D83C(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  sub_19C29D188(*(_QWORD **)(a1 + 168));
  v2 = *(_QWORD *)(a1 + 440);
  v3 = *(std::__shared_weak_count **)(a1 + 448);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 80))(v2);
  if (v3)
  {
    v6 = (unint64_t *)&v3->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_19C29D8D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_19C2B43C8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

CFArrayRef sub_19C29D8E8(char *a1, char *a2)
{
  size_t v2;
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  __int128 v13;
  uint64_t v14;
  CFArrayRef v15;
  void *exception;

  v2 = a2 - a1;
  if (a2 == a1)
  {
    v5 = 0;
    v6 = 0;
    goto LABEL_13;
  }
  if ((v2 & 0x8000000000000000) != 0)
    sub_19C2A18E8();
  v4 = a1;
  v5 = (char *)operator new(a2 - a1);
  bzero(v5, v2);
  v6 = &v5[v2];
  if (v2 - 8 < 0x18)
  {
    v10 = v5;
    do
    {
LABEL_12:
      v14 = *(_QWORD *)v4;
      v4 += 8;
      *(_QWORD *)v10 = v14;
      v10 += 8;
    }
    while (v4 != a2);
    goto LABEL_13;
  }
  if ((unint64_t)(v5 - v4) < 0x20)
  {
    v10 = v5;
    goto LABEL_12;
  }
  v7 = 0;
  v8 = ((v2 - 8) >> 3) + 1;
  v9 = 8 * (v8 & 0x3FFFFFFFFFFFFFFCLL);
  v10 = &v5[v9];
  v11 = v8 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v12 = &v5[v7];
    v13 = *(_OWORD *)&v4[v7 + 16];
    *(_OWORD *)v12 = *(_OWORD *)&v4[v7];
    *((_OWORD *)v12 + 1) = v13;
    v7 += 32;
    v11 -= 4;
  }
  while (v11);
  if (v8 != (v8 & 0x3FFFFFFFFFFFFFFCLL))
  {
    v4 += v9;
    goto LABEL_12;
  }
LABEL_13:
  v15 = CFArrayCreate(0, (const void **)v5, (v6 - v5) >> 3, MEMORY[0x1E0C9B378]);
  if (!v15)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD3154](exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  if (v5)
    operator delete(v5);
  return v15;
}

void sub_19C29DA28(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  __cxa_free_exception(v2);
  if (v1)
    operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_19C29DA50(_QWORD *a1)
{
  uint64_t v2;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1E3D38860;
  v2 = a1[3];
  if (v2)
  {
    MEMORY[0x1A1AD3538](v2, 0x1000C8052888210);
    a1[3] = 0;
  }
  return a1;
}

uint64_t sub_19C29DAA0(uint64_t a1, uint64_t a2, _DWORD *a3, unint64_t a4)
{
  uint64_t *v7;
  _DWORD *v9;

  *(_QWORD *)a1 = off_1E3D33DC8;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = &off_1E3D38860;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = &off_1E3D38860;
  *(_QWORD *)(a1 + 64) = 0;
  v7 = (uint64_t *)(a1 + 96);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  sub_19C2CD3C0((_QWORD *)(a1 + 96));
  sub_19C29DBE4(a1, a3, a4, (uint64_t *)&v9);
  sub_19C2CD5DC(v7, &v9);
  sub_19C2CD3C8((uint64_t *)&v9);
  return a1;
}

void sub_19C29DB5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _QWORD *v2;
  uint64_t **v3;
  uint64_t *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  va_list va;

  va_start(va, a2);
  sub_19C2CD3C8((uint64_t *)va);
  sub_19C2CD3C8(v4);
  v2[7] = v6;
  *v7 = 0;
  v7[1] = 0;
  v9 = v2[10];
  if (v9)
  {
    MEMORY[0x1A1AD3538](v9, 0x1000C8052888210);
    v2[10] = 0;
  }
  v2[3] = v6;
  *v5 = 0;
  v5[1] = 0;
  v10 = v2[6];
  if (v10)
  {
    MEMORY[0x1A1AD3538](v10, 0x1000C8052888210);
    v2[6] = 0;
  }
  sub_19C2A1AC8(v3, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_19C29DBE4@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  _QWORD *result;
  unint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _DWORD *v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _DWORD *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  _DWORD *v24;
  _QWORD v25[33];
  uint64_t *v26;
  unsigned int v27;
  _DWORD *v28;
  unint64_t v29;

  v28 = a2;
  v29 = a3;
  result = sub_19C29E274(a2, a3, (_DWORD *)(a1 + 88), a4);
  if (!*a4)
  {
    sub_19C2CD3C8(a4);
    result = sub_19C2CBA48(&v28, 4uLL, a4);
    if (!*a4)
    {
      sub_19C2CD3C8(a4);
      result = sub_19C29E274(v28, v29, (_DWORD *)(a1 + 92), a4);
      if (!*a4)
      {
        sub_19C2CD3C8(a4);
        result = sub_19C2CBA48(&v28, 4uLL, a4);
        if (!*a4)
        {
          sub_19C2CD3C8(a4);
          v27 = 0;
          result = sub_19C29E3E0(v28, v29, &v27, a4);
          if (!*a4)
          {
            sub_19C2CD3C8(a4);
            result = sub_19C2CBA48(&v28, 4uLL, a4);
            if (!*a4)
            {
              sub_19C2CD3C8(a4);
              v7 = v27;
              if (v29 < v27)
                v7 = v29;
              v24 = v28;
              v25[0] = v7;
              sub_19C29E54C((uint64_t)&v24, &v26);
              v8 = v26;
              v26 = 0;
              sub_19C2A1AC8((uint64_t **)(a1 + 16), v8);
              sub_19C2A1AC8(&v26, 0);
              v9 = sub_19C2CB9C4(v27, 4uLL);
              result = sub_19C2CBA48(&v28, v9, a4);
              if (!*a4)
              {
                sub_19C2CD3C8(a4);
                LODWORD(v26) = 0;
                result = sub_19C29E3E0(v28, v29, &v26, a4);
                if (!*a4)
                {
                  sub_19C2CD3C8(a4);
                  result = sub_19C2CBA48(&v28, 4uLL, a4);
                  if (!*a4)
                  {
                    sub_19C2CD3C8(a4);
                    v10 = v26;
                    if (!(_DWORD)v26)
                    {
                      LODWORD(v24) = 13;
                      v12 = (_QWORD *)sub_19C2A09EC((uint64_t)v25);
                      sub_19C2A1B24(v12, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/model_interface.cc", 74);
                      sub_19C2A1B24(v25, (uint64_t)"(", 1);
                      std::ostream::operator<<();
                      sub_19C2A1B24(v25, (uint64_t)") [", 3);
                      sub_19C2A1B24(v25, (uint64_t)"(pieces_blob_size) > (0)", 24);
                      sub_19C2A1B24(v25, (uint64_t)"] ", 2);
                      sub_19C29E5C0((unsigned int *)&v24, (uint64_t)a4);
                      return (_QWORD *)sub_19C29E64C((uint64_t)&v24);
                    }
                    if (v29 < v26)
                    {
                      LODWORD(v24) = 13;
                      v11 = (_QWORD *)sub_19C2A09EC((uint64_t)v25);
                      sub_19C2A1B24(v11, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/model_interface.cc", 74);
                      sub_19C2A1B24(v25, (uint64_t)"(", 1);
                      std::ostream::operator<<();
                      sub_19C2A1B24(v25, (uint64_t)") [", 3);
                      sub_19C2A1B24(v25, (uint64_t)"(blob.size()) >= (pieces_blob_size)", 35);
                      sub_19C2A1B24(v25, (uint64_t)"] ", 2);
                      sub_19C29E5C0((unsigned int *)&v24, (uint64_t)a4);
                      return (_QWORD *)sub_19C29E64C((uint64_t)&v24);
                    }
                    if ((v26 & 3) != 0)
                    {
                      LODWORD(v24) = 13;
                      v13 = (_QWORD *)sub_19C2A09EC((uint64_t)v25);
                      sub_19C2A1B24(v13, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/model_interface.cc", 74);
                      sub_19C2A1B24(v25, (uint64_t)"(", 1);
                      std::ostream::operator<<();
                      sub_19C2A1B24(v25, (uint64_t)") [", 3);
                      sub_19C2A1B24(v25, (uint64_t)"(pieces_blob_size % pieces_.unit_size()) == (0)", 47);
                      sub_19C2A1B24(v25, (uint64_t)"] ", 2);
                      sub_19C29E5C0((unsigned int *)&v24, (uint64_t)a4);
                      return (_QWORD *)sub_19C29E64C((uint64_t)&v24);
                    }
                    v14 = v28;
                    v15 = v26 >> 2;
                    *(_QWORD *)(a1 + 32) = 0;
                    *(_QWORD *)(a1 + 40) = 0;
                    if (*(_QWORD *)(a1 + 48))
                    {
                      MEMORY[0x1A1AD3538](*(_QWORD *)(a1 + 48), 0x1000C8052888210);
                      *(_QWORD *)(a1 + 48) = 0;
                      v10 = v26;
                    }
                    *(_QWORD *)(a1 + 32) = v15;
                    *(_QWORD *)(a1 + 40) = v14;
                    v16 = sub_19C2CB9C4(v10, 4uLL);
                    result = sub_19C2CBA48(&v28, v16, a4);
                    if (!*a4)
                    {
                      sub_19C2CD3C8(a4);
                      v23 = 0;
                      result = sub_19C29E3E0(v28, v29, &v23, a4);
                      if (!*a4)
                      {
                        sub_19C2CD3C8(a4);
                        result = sub_19C2CBA48(&v28, 4uLL, a4);
                        if (!*a4)
                        {
                          sub_19C2CD3C8(a4);
                          if (!v23)
                          {
                            LODWORD(v24) = 13;
                            v18 = (_QWORD *)sub_19C2A09EC((uint64_t)v25);
                            sub_19C2A1B24(v18, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/model_interface.cc", 74);
                            sub_19C2A1B24(v25, (uint64_t)"(", 1);
                            std::ostream::operator<<();
                            sub_19C2A1B24(v25, (uint64_t)") [", 3);
                            sub_19C2A1B24(v25, (uint64_t)"(reserved_id_map_size) > (0)", 28);
                            sub_19C2A1B24(v25, (uint64_t)"] ", 2);
                            sub_19C29E5C0((unsigned int *)&v24, (uint64_t)a4);
                            return (_QWORD *)sub_19C29E64C((uint64_t)&v24);
                          }
                          if (v29 < v23)
                          {
                            LODWORD(v24) = 13;
                            v17 = (_QWORD *)sub_19C2A09EC((uint64_t)v25);
                            sub_19C2A1B24(v17, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/model_interface.cc", 74);
                            sub_19C2A1B24(v25, (uint64_t)"(", 1);
                            std::ostream::operator<<();
                            sub_19C2A1B24(v25, (uint64_t)") [", 3);
                            sub_19C2A1B24(v25, (uint64_t)"(blob.size()) >= (reserved_id_map_size)", 39);
                            sub_19C2A1B24(v25, (uint64_t)"] ", 2);
                            sub_19C29E5C0((unsigned int *)&v24, (uint64_t)a4);
                            return (_QWORD *)sub_19C29E64C((uint64_t)&v24);
                          }
                          if ((v23 & 3) != 0)
                          {
                            LODWORD(v24) = 13;
                            v19 = (_QWORD *)sub_19C2A09EC((uint64_t)v25);
                            sub_19C2A1B24(v19, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/model_interface.cc", 74);
                            sub_19C2A1B24(v25, (uint64_t)"(", 1);
                            std::ostream::operator<<();
                            sub_19C2A1B24(v25, (uint64_t)") [", 3);
                            sub_19C2A1B24(v25, (uint64_t)"(reserved_id_map_size % reserved_id_map_.unit_size()) == (0)", 60);
                            sub_19C2A1B24(v25, (uint64_t)"] ", 2);
                            sub_19C29E5C0((unsigned int *)&v24, (uint64_t)a4);
                            return (_QWORD *)sub_19C29E64C((uint64_t)&v24);
                          }
                          v20 = v28;
                          v21 = v23 >> 2;
                          *(_QWORD *)(a1 + 64) = 0;
                          *(_QWORD *)(a1 + 72) = 0;
                          v22 = *(_QWORD *)(a1 + 80);
                          if (v22)
                          {
                            MEMORY[0x1A1AD3538](v22, 0x1000C8052888210);
                            *(_QWORD *)(a1 + 80) = 0;
                          }
                          *(_QWORD *)(a1 + 64) = v21;
                          *(_QWORD *)(a1 + 72) = v20;
                          return sub_19C2CD3C0(a4);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void sub_19C29E234(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C29E64C((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_19C29E274@<X0>(_DWORD *a1@<X0>, unint64_t a2@<X1>, _DWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v6;
  unsigned int v7;
  _QWORD v8[11];
  char v9;
  uint64_t v10;

  if (a2 <= 3)
  {
    v7 = 13;
    v6 = (_QWORD *)sub_19C2A09EC((uint64_t)v8);
    sub_19C2A1B24(v6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/util.h", 62);
    sub_19C2A1B24(v8, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_19C2A1B24(v8, (uint64_t)") [", 3);
    sub_19C2A1B24(v8, (uint64_t)"string.size() >= sizeof(T)", 26);
    sub_19C2A1B24(v8, (uint64_t)"] ", 2);
    sub_19C29E5C0(&v7, (uint64_t)a4);
    v8[0] = *MEMORY[0x1E0DE4F60];
    *(_QWORD *)((char *)v8 + *(_QWORD *)(v8[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
    v8[1] = MEMORY[0x1E0DE4FB8] + 16;
    if (v9 < 0)
      operator delete((void *)v8[9]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return (_QWORD *)MEMORY[0x1A1AD34CC](&v10);
  }
  else
  {
    *a3 = *a1;
    return sub_19C2CD3C0(a4);
  }
}

void sub_19C29E3C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_19C29E64C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_19C29E3E0@<X0>(_DWORD *a1@<X0>, unint64_t a2@<X1>, _DWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v6;
  unsigned int v7;
  _QWORD v8[11];
  char v9;
  uint64_t v10;

  if (a2 <= 3)
  {
    v7 = 13;
    v6 = (_QWORD *)sub_19C2A09EC((uint64_t)v8);
    sub_19C2A1B24(v6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/util.h", 62);
    sub_19C2A1B24(v8, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_19C2A1B24(v8, (uint64_t)") [", 3);
    sub_19C2A1B24(v8, (uint64_t)"string.size() >= sizeof(T)", 26);
    sub_19C2A1B24(v8, (uint64_t)"] ", 2);
    sub_19C29E5C0(&v7, (uint64_t)a4);
    v8[0] = *MEMORY[0x1E0DE4F60];
    *(_QWORD *)((char *)v8 + *(_QWORD *)(v8[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
    v8[1] = MEMORY[0x1E0DE4FB8] + 16;
    if (v9 < 0)
      operator delete((void *)v8[9]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return (_QWORD *)MEMORY[0x1A1AD34CC](&v10);
  }
  else
  {
    *a3 = *a1;
    return sub_19C2CD3C0(a4);
  }
}

void sub_19C29E534(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_19C29E64C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_19C29E54C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = (_QWORD *)operator new();
  result = sub_19C2A6C60(v4, *(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  *a2 = v4;
  return result;
}

void sub_19C29E59C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD355C](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

void sub_19C29E5C0(unsigned int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  void **v4;
  unint64_t v5;
  void *__p[2];
  unsigned __int8 v7;

  v3 = *a1;
  std::stringbuf::str();
  if ((v7 & 0x80u) == 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if ((v7 & 0x80u) == 0)
    v5 = v7;
  else
    v5 = (unint64_t)__p[1];
  sub_19C2CD524(a2, v3, v4, v5);
  if ((char)v7 < 0)
    operator delete(__p[0]);
}

void sub_19C29E630(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C29E64C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x1E0DE4F60];
  v3 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)(a1 + 8) = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)(a1 + 8 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 16) = MEMORY[0x1E0DE4FB8] + 16;
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1A1AD34CC](a1 + 120);
  return a1;
}

void **sub_19C29E6D4(uint64_t a1)
{
  void **v1;
  void **result;
  void *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  char v8;

  v1 = *(void ***)(a1 + 8);
  if (!v1 || (v3 = *v1, result = v1 - 2, v3 != &unk_1E3D33B90))
  {
    v8 = 1;
    v4 = sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)"model_interface.cc", 18);
    sub_19C2A1B24(v4, (uint64_t)"(", 1);
    v5 = (_QWORD *)std::ostream::operator<<();
    v6 = sub_19C2A1B24(v5, (uint64_t)") [", 3);
    v7 = sub_19C2A1B24(v6, (uint64_t)"(model_proto = dynamic_cast<const ModelProto *>(model_proto_))", 62);
    sub_19C2A1B24(v7, (uint64_t)"] ", 2);
    sub_19C2A0AD8(&v8);
    return 0;
  }
  return result;
}

void sub_19C29E788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_19C2A0AD8(&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_19C29E79C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_1E3D33DC8;
  sub_19C2CD3C8((uint64_t *)(a1 + 96));
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 56) = &off_1E3D38860;
  v2 = *(_QWORD *)(a1 + 80);
  if (v2)
  {
    MEMORY[0x1A1AD3538](v2, 0x1000C8052888210);
    *(_QWORD *)(a1 + 80) = 0;
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = &off_1E3D38860;
  v3 = *(_QWORD *)(a1 + 48);
  if (v3)
  {
    MEMORY[0x1A1AD3538](v3, 0x1000C8052888210);
    *(_QWORD *)(a1 + 48) = 0;
  }
  sub_19C2A1AC8((uint64_t **)(a1 + 16), 0);
  return a1;
}

const char *sub_19C29E838(uint64_t a1)
{
  uint64_t v2;

  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8));
  if (v2)
    return (const char *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8));
  else
    return "<unk>";
}

const char *sub_19C29E888(uint64_t a1)
{
  uint64_t v2;

  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8));
  if (v2)
    return (const char *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8));
  else
    return "<s>";
}

const char *sub_19C29E8D8(uint64_t a1)
{
  uint64_t v2;

  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
  if (v2)
    return (const char *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
  else
    return "</s>";
}

const char *sub_19C29E928(uint64_t a1)
{
  uint64_t v2;

  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
  if (v2)
    return (const char *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
  else
    return "<pad>";
}

uint64_t sub_19C29E978(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  uint64_t result;
  unsigned int v7;

  v7 = 0;
  sub_19C29E9F8(a1 + 56, a2, (int *)&v7, a3, 0);
  result = v7;
  if (v7 == -1)
  {
    sub_19C29E9F8(a1 + 24, a2, (int *)&v7, a3, 0);
    result = v7;
    if (v7 == -1)
      return *(unsigned int *)(a1 + 88);
  }
  return result;
}

uint64_t sub_19C29E9F8(uint64_t result, _BYTE *a2, int *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  unsigned int v6;
  int v7;
  int v8;
  unsigned __int8 *v9;
  int v10;
  int v11;

  v5 = *(_QWORD *)(result + 16);
  v6 = *(_DWORD *)(v5 + 4 * a5);
  if (a4)
  {
    while (1)
    {
      v7 = *a2++;
      a5 ^= (v6 >> 10 << ((v6 >> 6) & 8)) ^ v7;
      v6 = *(_DWORD *)(v5 + 4 * a5);
      if ((v6 & 0x800000FF) != v7)
        break;
      if (!--a4)
        goto LABEL_9;
    }
  }
  else
  {
    v8 = *a2;
    if (*a2)
    {
      v9 = a2 + 1;
      while (1)
      {
        a5 ^= (v6 >> 10 << ((v6 >> 6) & 8)) ^ v8;
        v6 = *(_DWORD *)(v5 + 4 * a5);
        if ((v6 & 0x800000FF) != v8)
          break;
        v10 = *v9++;
        v8 = v10;
        if (!v10)
          goto LABEL_9;
      }
    }
    else
    {
LABEL_9:
      if ((v6 & 0x100) != 0)
      {
        v11 = *(_DWORD *)(v5 + 4 * (a5 ^ (v6 >> 10 << ((v6 >> 6) & 8)))) & 0x7FFFFFFF;
        goto LABEL_12;
      }
    }
  }
  v11 = -1;
LABEL_12:
  *a3 = v11;
  return result;
}

uint64_t sub_19C29EAA8@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  char v9;

  if ((int)sub_19C2CB68C() <= 2)
  {
    v9 = 0;
    v2 = sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)"model_interface.cc", 18);
    sub_19C2A1B24(v2, (uint64_t)"(", 1);
    v3 = (_QWORD *)std::ostream::operator<<();
    v4 = sub_19C2A1B24(v3, (uint64_t)") ", 2);
    v5 = sub_19C2A1B24(v4, (uint64_t)"LOG(", 4);
    v6 = sub_19C2A1B24(v5, (uint64_t)"ERROR", 5);
    v7 = sub_19C2A1B24(v6, (uint64_t)") ", 2);
    sub_19C2A1B24(v7, (uint64_t)"Not implemented.", 16);
    sub_19C2A0AD8(&v9);
  }
  return sub_19C2CD524(a1, 12, "Not implemented.", 16);
}

void sub_19C29EB7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_19C2A0AD8(&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_19C29EB90@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  char v9;

  if ((int)sub_19C2CB68C() <= 2)
  {
    v9 = 0;
    v2 = sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)"model_interface.cc", 18);
    sub_19C2A1B24(v2, (uint64_t)"(", 1);
    v3 = (_QWORD *)std::ostream::operator<<();
    v4 = sub_19C2A1B24(v3, (uint64_t)") ", 2);
    v5 = sub_19C2A1B24(v4, (uint64_t)"LOG(", 4);
    v6 = sub_19C2A1B24(v5, (uint64_t)"ERROR", 5);
    v7 = sub_19C2A1B24(v6, (uint64_t)") ", 2);
    sub_19C2A1B24(v7, (uint64_t)"Not implemented.", 16);
    sub_19C2A0AD8(&v9);
  }
  return sub_19C2CD524(a1, 12, "Not implemented.", 16);
}

void sub_19C29EC64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_19C2A0AD8(&a13);
  _Unwind_Resume(a1);
}

void sub_19C29EC78(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;
  BOOL v10;
  int v11;
  BOOL v12;
  uint64_t **v13;
  unint64_t v14;
  char v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  unint64_t v21;
  size_t v22;
  void *v23;
  unsigned int v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  unint64_t v29;
  size_t v30;
  __int128 *v31;
  const void *v32;
  const char *v33;
  size_t v34;
  void *v35;
  std::string *v36;
  __int128 v37;
  const char *v38;
  std::string *v39;
  __int128 v40;
  size_t v41;
  std::string v42;
  _DWORD *v43;
  void *__p;
  unint64_t v45;
  uint64_t *v46;
  _QWORD *v47[2];
  _QWORD **v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD **v51;
  _QWORD *v52;
  uint64_t v53;
  __int128 v54;
  int64_t v55;

  v52 = 0;
  v53 = 0;
  v50 = 0;
  v51 = &v52;
  v48 = &v49;
  v49 = 0;
  *(_DWORD *)(a1 + 88) = -1;
  v47[0] = 0;
  v47[1] = 0;
  v46 = (uint64_t *)v47;
  LOBYTE(v54) = 0;
  sub_19C2A1EAC(&__p, 0x100uLL, (unsigned __int8 *)&v54);
  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
    v3 = v2 - 16;
  else
    v3 = 0;
  if (*(int *)(v3 + 64) < 1)
  {
LABEL_38:
    if (*(_DWORD *)(a1 + 88) == -1)
    {
      sub_19C2CD524(&v54, 13, "unk is not defined.", 19);
      sub_19C2CD5DC((uint64_t *)(a1 + 96), (_DWORD **)&v54);
    }
    else
    {
      v25 = *(_BYTE **)(v3 + 80);
      if (!v25)
        v25 = &unk_1EE41C660;
      if (!v25[248]
        || (*(_QWORD *)&v54 = __p,
            DWORD2(v54) = 0,
            sub_19C2A25AC((uint64_t)&v54, v45, (uint64_t)&v42),
            v42.__r_.__value_.__l.__data_ == (char *)__p + 8 * (v45 >> 6))
        && LODWORD(v42.__r_.__value_.__r.__words[1]) == (v45 & 0x3F))
      {
        if (!v53
          || (sub_19C29F4FC((_QWORD *)(a1 + 24), &v51, (int *)(a1 + 92), &v54),
              sub_19C2CD5DC((uint64_t *)(a1 + 96), (_DWORD **)&v54),
              sub_19C2CD3C8((uint64_t *)&v54),
              (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(&v54, a1),
              v26 = v54,
              sub_19C2CD3C8((uint64_t *)&v54),
              !v26))
        {
          if (!v50
            || (sub_19C29F4FC((_QWORD *)(a1 + 56), &v48, 0, &v54),
                sub_19C2CD5DC((uint64_t *)(a1 + 96), (_DWORD **)&v54),
                sub_19C2CD3C8((uint64_t *)&v54),
                (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(&v54, a1),
                v27 = v54,
                sub_19C2CD3C8((uint64_t *)&v54),
                !v27))
          {
            sub_19C29F9CC(&v46, &v54);
            v28 = (uint64_t *)v54;
            *(_QWORD *)&v54 = 0;
            sub_19C2A1AC8((uint64_t **)(a1 + 16), v28);
            sub_19C2A1AC8((uint64_t **)&v54, 0);
          }
        }
        goto LABEL_69;
      }
      sub_19C2CD5DC((uint64_t *)(a1 + 96), (_DWORD **)&v54);
    }
LABEL_68:
    sub_19C2CD3C8((uint64_t *)&v54);
    goto LABEL_69;
  }
  v4 = 0;
  while (1)
  {
    v5 = sub_19C2A0B8C(v3 + 56, v4);
    v6 = v5;
    v7 = *(_QWORD *)(v5 + 48) & 0xFFFFFFFFFFFFFFFELL;
    v8 = *(unsigned __int8 *)(v7 + 23);
    if (*(char *)(v7 + 23) < 0)
    {
      if (!*(_QWORD *)(v7 + 8))
      {
LABEL_50:
        sub_19C2CD524(&v54, 13, "piece must not be empty.", 24);
        sub_19C2CD5DC((uint64_t *)(a1 + 96), (_DWORD **)&v54);
        goto LABEL_68;
      }
    }
    else if (!*(_BYTE *)(v7 + 23))
    {
      goto LABEL_50;
    }
    v9 = *(_DWORD *)(v5 + 60);
    v10 = v9 > 5;
    v11 = (1 << v9) & 0x32;
    v12 = v10 || v11 == 0;
    v13 = (uint64_t **)(v12 ? &v48 : &v51);
    if ((v8 & 0x80) != 0)
    {
      v14 = *(_QWORD *)v7;
      v8 = *(_QWORD *)(v7 + 8);
    }
    else
    {
      v14 = v7;
    }
    *(_QWORD *)&v54 = v14;
    *((_QWORD *)&v54 + 1) = v8;
    LODWORD(v55) = v4;
    sub_19C2A2150(v13, (uint64_t)&v54, (uint64_t)&v54);
    if ((v15 & 1) == 0)
      break;
    v16 = *(_DWORD *)(v6 + 60);
    if (v16 == 4)
    {
      v17 = *(_QWORD *)(v6 + 48) & 0xFFFFFFFFFFFFFFFELL;
      if (*(char *)(v17 + 23) < 0)
      {
        v19 = *(_QWORD *)v17;
        v18 = *(_QWORD *)(v17 + 8);
      }
      else
      {
        v18 = *(unsigned __int8 *)(v17 + 23);
        v19 = *(_QWORD *)(v6 + 48) & 0xFFFFFFFFFFFFFFFELL;
      }
      *(_QWORD *)&v54 = v19;
      *((_QWORD *)&v54 + 1) = v18;
      sub_19C2A252C(&v46, (uint64_t)&v54, &v54);
      v16 = *(_DWORD *)(v6 + 60);
    }
    if (v16 == 6)
    {
      v20 = *(_BYTE **)(v3 + 80);
      if (!v20)
        v20 = &unk_1EE41C660;
      if (!v20[248])
      {
        std::operator+<char>();
        v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
        v55 = v36->__r_.__value_.__r.__words[2];
        v54 = v37;
        v36->__r_.__value_.__l.__size_ = 0;
        v36->__r_.__value_.__r.__words[2] = 0;
        v36->__r_.__value_.__r.__words[0] = 0;
        if (v55 >= 0)
          v38 = (const char *)&v54;
        else
          v38 = (const char *)v54;
LABEL_78:
        v41 = strlen(v38);
        sub_19C2CD524(&v43, 13, v38, v41);
        sub_19C2CD5DC((uint64_t *)(a1 + 96), &v43);
        sub_19C2CD3C8((uint64_t *)&v43);
        if (SHIBYTE(v55) < 0)
          operator delete((void *)v54);
        if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
        {
          v35 = (void *)v42.__r_.__value_.__r.__words[0];
          goto LABEL_82;
        }
        goto LABEL_69;
      }
      v21 = *(_QWORD *)(v6 + 48) & 0xFFFFFFFFFFFFFFFELL;
      if (*(char *)(v21 + 23) < 0)
      {
        v23 = *(void **)v21;
        v22 = *(_QWORD *)(v21 + 8);
      }
      else
      {
        v22 = *(unsigned __int8 *)(v21 + 23);
        v23 = (void *)(*(_QWORD *)(v6 + 48) & 0xFFFFFFFFFFFFFFFELL);
      }
      v24 = sub_19C29F3B0(v23, v22);
      if ((v24 & 0x80000000) != 0)
      {
        std::operator+<char>();
        v39 = std::string::append(&v42, " is invalid.");
        v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
        v55 = v39->__r_.__value_.__r.__words[2];
        v54 = v40;
        v39->__r_.__value_.__l.__size_ = 0;
        v39->__r_.__value_.__r.__words[2] = 0;
        v39->__r_.__value_.__r.__words[0] = 0;
        if (v55 >= 0)
          v38 = (const char *)&v54;
        else
          v38 = (const char *)v54;
        goto LABEL_78;
      }
      *(_QWORD *)((char *)__p + (((unint64_t)v24 >> 3) & 0x1FFFFFF8)) |= 1 << v24;
    }
    else if (v16 == 2)
    {
      if ((*(_DWORD *)(a1 + 88) & 0x80000000) == 0)
      {
        sub_19C2CD524(&v54, 13, "unk is already defined.", 23);
        sub_19C2CD5DC((uint64_t *)(a1 + 96), (_DWORD **)&v54);
        goto LABEL_68;
      }
      *(_DWORD *)(a1 + 88) = v4;
    }
    if (++v4 >= *(_DWORD *)(v3 + 64))
      goto LABEL_38;
  }
  v29 = *(_QWORD *)(v6 + 48) & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v29 + 23) >= 0)
    v30 = *(unsigned __int8 *)(v29 + 23);
  else
    v30 = *(_QWORD *)(v29 + 8);
  v31 = &v54;
  sub_19C2A24A8((uint64_t)&v54, v30 + 20);
  if (v55 < 0)
    v31 = (__int128 *)v54;
  if (v30)
  {
    if (*(char *)(v29 + 23) >= 0)
      v32 = (const void *)v29;
    else
      v32 = *(const void **)v29;
    memmove(v31, v32, v30);
  }
  strcpy((char *)v31 + v30, " is already defined.");
  if (v55 >= 0)
    v33 = (const char *)&v54;
  else
    v33 = (const char *)v54;
  v34 = strlen(v33);
  sub_19C2CD524(&v42, 13, v33, v34);
  sub_19C2CD5DC((uint64_t *)(a1 + 96), &v42);
  sub_19C2CD3C8((uint64_t *)&v42);
  if (SHIBYTE(v55) < 0)
  {
    v35 = (void *)v54;
LABEL_82:
    operator delete(v35);
  }
LABEL_69:
  if (__p)
    operator delete(__p);
  sub_19C2A1E6C((uint64_t)&v46, v47[0]);
  sub_19C2A1E6C((uint64_t)&v48, v49);
  sub_19C2A1E6C((uint64_t)&v51, v52);
}

void sub_19C29F298(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, char a19, _QWORD *a20,uint64_t a21,char a22,_QWORD *a23,uint64_t a24,char a25,_QWORD *a26)
{
  uint64_t v26;

  sub_19C2CD3C8(&a15);
  if (*(char *)(v26 - 89) < 0)
    operator delete(*(void **)(v26 - 112));
  if (a14 < 0)
    operator delete(__p);
  if (a16)
    operator delete(a16);
  sub_19C2A1E6C((uint64_t)&a19, a20);
  sub_19C2A1E6C((uint64_t)&a22, a23);
  sub_19C2A1E6C((uint64_t)&a25, a26);
  _Unwind_Resume(a1);
}

uint64_t sub_19C29F3B0(void *__src, size_t __len)
{
  unsigned __int8 v4;
  _QWORD *v5;
  void **v6;
  size_t v7;
  size_t v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  void *__dst[2];
  unint64_t v13;

  v4 = atomic_load((unsigned __int8 *)&qword_1EE41C0D0);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_1EE41C0D0))
  {
    qword_1EE41C0C8 = sub_19C2A02CC();
    __cxa_guard_release(&qword_1EE41C0D0);
  }
  if (__len >= 0x7FFFFFFFFFFFFFF8)
    sub_19C2A1A54();
  v5 = (_QWORD *)qword_1EE41C0C8;
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = (void **)operator new(v7 + 1);
    __dst[1] = (void *)__len;
    v13 = v8 | 0x8000000000000000;
    __dst[0] = v6;
    goto LABEL_9;
  }
  HIBYTE(v13) = __len;
  v6 = __dst;
  if (__len)
LABEL_9:
    memmove(v6, __src, __len);
  *((_BYTE *)v6 + __len) = 0;
  v9 = sub_19C2A26D8(v5, (unsigned __int8 *)__dst);
  v10 = v9;
  if (SHIBYTE(v13) < 0)
  {
    operator delete(__dst[0]);
    if (v10)
      return v10[40];
  }
  else if (v9)
  {
    return v10[40];
  }
  return 0xFFFFFFFFLL;
}

void sub_19C29F4CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __cxa_guard_abort(&qword_1EE41C0D0);
  _Unwind_Resume(a1);
}

void sub_19C29F4FC(_QWORD *a1@<X0>, _QWORD *a2@<X1>, int *a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  int v26;
  _QWORD *v27;
  _QWORD *v28;
  BOOL v29;
  _QWORD *v30;
  char *v31;
  unint64_t v32;
  _DWORD *v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  char *v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  char *v47;
  int v48;
  _QWORD *v49;
  _QWORD *v50;
  void *v55;
  _BYTE *v56;
  void *__p;
  char *v58;
  char *v59;
  void *v60;
  char *v61;
  char *v62;

  if (a2[2])
  {
    v60 = 0;
    v61 = 0;
    v62 = 0;
    __p = 0;
    v58 = 0;
    v59 = 0;
    v5 = a2 + 1;
    v4 = (_QWORD *)*a2;
    do
    {
      v6 = v4[4];
      v7 = v61;
      if (v61 >= v62)
      {
        v9 = (v61 - (_BYTE *)v60) >> 3;
        if ((unint64_t)(v9 + 1) >> 61)
          sub_19C2A18E8();
        v10 = (v62 - (_BYTE *)v60) >> 2;
        if (v10 <= v9 + 1)
          v10 = v9 + 1;
        if ((unint64_t)(v62 - (_BYTE *)v60) >= 0x7FFFFFFFFFFFFFF8)
          v11 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v11 = v10;
        if (v11)
          v12 = (char *)sub_19C2A1FC0((uint64_t)&v62, v11);
        else
          v12 = 0;
        v13 = &v12[8 * v9];
        *(_QWORD *)v13 = v6;
        v8 = v13 + 8;
        v15 = (char *)v60;
        v14 = v61;
        if (v61 != v60)
        {
          do
          {
            v16 = *((_QWORD *)v14 - 1);
            v14 -= 8;
            *((_QWORD *)v13 - 1) = v16;
            v13 -= 8;
          }
          while (v14 != v15);
          v14 = (char *)v60;
        }
        v60 = v13;
        v61 = v8;
        v62 = &v12[8 * v11];
        if (v14)
          operator delete(v14);
      }
      else
      {
        *(_QWORD *)v61 = v6;
        v8 = v7 + 8;
      }
      v61 = v8;
      v17 = v58;
      if (v58 >= v59)
      {
        v19 = (char *)__p;
        v20 = (v58 - (_BYTE *)__p) >> 2;
        v21 = v20 + 1;
        if ((unint64_t)(v20 + 1) >> 62)
          sub_19C2A18E8();
        v22 = v59 - (_BYTE *)__p;
        if ((v59 - (_BYTE *)__p) >> 1 > v21)
          v21 = v22 >> 1;
        if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL)
          v23 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v23 = v21;
        if (v23)
        {
          v24 = (char *)sub_19C2A27D8((uint64_t)&v59, v23);
          v19 = (char *)__p;
          v17 = v58;
        }
        else
        {
          v24 = 0;
        }
        v25 = &v24[4 * v20];
        *(_DWORD *)v25 = *((_DWORD *)v4 + 12);
        v18 = v25 + 4;
        while (v17 != v19)
        {
          v26 = *((_DWORD *)v17 - 1);
          v17 -= 4;
          *((_DWORD *)v25 - 1) = v26;
          v25 -= 4;
        }
        __p = v25;
        v58 = v18;
        v59 = &v24[4 * v23];
        if (v19)
          operator delete(v19);
      }
      else
      {
        *(_DWORD *)v58 = *((_DWORD *)v4 + 12);
        v18 = v17 + 4;
      }
      v58 = v18;
      v27 = (_QWORD *)v4[1];
      if (v27)
      {
        do
        {
          v28 = v27;
          v27 = (_QWORD *)*v27;
        }
        while (v27);
      }
      else
      {
        do
        {
          v28 = (_QWORD *)v4[2];
          v29 = *v28 == (_QWORD)v4;
          v4 = v28;
        }
        while (!v29);
      }
      v4 = v28;
    }
    while (v28 != v5);
    if (sub_19C2A03B0(a1, (v61 - (_BYTE *)v60) >> 3, (unint64_t)v60, 0, (unint64_t)__p, 0))
    {
      sub_19C2CD524(a4, 13, "cannot build double-array.", 26);
    }
    else if (a3)
    {
      sub_19C2A5294(&v55, 0x400uLL);
      *a3 = 0;
      v30 = (_QWORD *)*a2;
      if ((_QWORD *)*a2 == v5)
        goto LABEL_81;
      v31 = (char *)v55;
      v32 = (v56 - (_BYTE *)v55) >> 4;
      v33 = (_DWORD *)a1[2];
      do
      {
        v34 = (_BYTE *)v30[4];
        v35 = v30[5];
        v36 = (*v33 >> 10 << ((*v33 >> 6) & 8));
        if (v35)
        {
          v37 = 0;
          v38 = 0;
          do
          {
            v39 = v34[v37];
            v40 = v36 ^ v39;
            v41 = v33[v40];
            if ((v41 & 0x800000FF) != (_DWORD)v39)
              break;
            v36 = v40 ^ (v41 >> 10 << ((v41 >> 6) & 8));
            if ((v41 & 0x100) != 0)
            {
              if (v38 < v32)
              {
                v42 = &v31[16 * v38];
                *(_DWORD *)v42 = v33[v36] & 0x7FFFFFFF;
                *((_QWORD *)v42 + 1) = v37 + 1;
              }
              ++v38;
            }
            ++v37;
          }
          while (v35 != v37);
        }
        else
        {
          v43 = *v34;
          if (*v34)
          {
            v38 = 0;
            v44 = 1;
            do
            {
              v45 = v36 ^ v43;
              v46 = v33[v45];
              if ((v46 & 0x800000FF) != v43)
                break;
              v36 = v45 ^ (v46 >> 10 << ((v46 >> 6) & 8));
              if ((v46 & 0x100) != 0)
              {
                if (v38 < v32)
                {
                  v47 = &v31[16 * v38];
                  *(_DWORD *)v47 = v33[v36] & 0x7FFFFFFF;
                  *((_QWORD *)v47 + 1) = v44;
                }
                ++v38;
              }
              v43 = v34[v44++];
            }
            while (v43);
          }
          else
          {
            LODWORD(v38) = 0;
          }
        }
        v48 = *a3;
        if (*a3 <= (int)v38)
          v48 = v38;
        *a3 = v48;
        v49 = (_QWORD *)v30[1];
        if (v49)
        {
          do
          {
            v50 = v49;
            v49 = (_QWORD *)*v49;
          }
          while (v49);
        }
        else
        {
          do
          {
            v50 = (_QWORD *)v30[2];
            v29 = *v50 == (_QWORD)v30;
            v30 = v50;
          }
          while (!v29);
        }
        v30 = v50;
      }
      while (v50 != v5);
      if (!v48)
LABEL_81:
        sub_19C2CD524(a4, 13, "no entry is found in the trie.", 30);
      else
        sub_19C2CD3C0(a4);
      if (v55)
      {
        v56 = v55;
        operator delete(v55);
      }
    }
    else
    {
      sub_19C2CD3C0(a4);
    }
    if (__p)
    {
      v58 = (char *)__p;
      operator delete(__p);
    }
    if (v60)
    {
      v61 = (char *)v60;
      operator delete(v60);
    }
  }
  else
  {
    sub_19C2CD524(a4, 13, "no pieces are loaded.", 21);
  }
}

void sub_19C29F974(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  if (a17)
    operator delete(a17);
  if (a20)
    operator delete(a20);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_19C29F9CC@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = (_QWORD *)operator new();
  result = sub_19C2A6B84(v4, a1);
  *a2 = v4;
  return result;
}

void sub_19C29FA1C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD355C](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

void sub_19C29FA40(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  std::string *v5;
  std::string::size_type size;
  std::string *v7;
  std::string *v8;
  std::string::size_type v9;
  int v10;
  int v11;
  int v12;
  std::string *p_p;
  std::string *v14;
  std::string::size_type v15;
  std::string *v16;
  std::string::size_type v17;
  const std::string::value_type *v18;
  uint64_t v19;
  std::string::size_type v20;
  std::string *v21;
  std::string *v22;
  std::string::size_type v23;
  uint64_t v24;
  const std::string::value_type *v25;
  uint64_t v26;
  std::string::size_type v27;
  std::string *v28;
  std::string *v29;
  std::string::size_type v30;
  std::string __p;
  std::string v32;

  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  memset(&v32, 0, sizeof(v32));
  std::string::resize(&v32, 4uLL, 0);
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v4 = &v32;
  else
    v4 = (std::string *)v32.__r_.__value_.__r.__words[0];
  LODWORD(v4->__r_.__value_.__l.__data_) = *(_DWORD *)(a1 + 88);
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v5 = &v32;
  else
    v5 = (std::string *)v32.__r_.__value_.__r.__words[0];
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v32.__r_.__value_.__r.__words[2]);
  else
    size = v32.__r_.__value_.__l.__size_;
  std::string::append(a2, (const std::string::value_type *)v5, size);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
  memset(&v32, 0, sizeof(v32));
  std::string::resize(&v32, 4uLL, 0);
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v7 = &v32;
  else
    v7 = (std::string *)v32.__r_.__value_.__r.__words[0];
  LODWORD(v7->__r_.__value_.__l.__data_) = *(_DWORD *)(a1 + 92);
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v8 = &v32;
  else
    v8 = (std::string *)v32.__r_.__value_.__r.__words[0];
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v9 = HIBYTE(v32.__r_.__value_.__r.__words[2]);
  else
    v9 = v32.__r_.__value_.__l.__size_;
  std::string::append(a2, (const std::string::value_type *)v8, v9);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
  sub_19C2A6C64(*(_QWORD *)(a1 + 16), &v32);
  v10 = HIBYTE(v32.__r_.__value_.__r.__words[2]);
  v11 = v32.__r_.__value_.__r.__words[1];
  memset(&__p, 0, sizeof(__p));
  std::string::resize(&__p, 4uLL, 0);
  if ((v10 & 0x80u) == 0)
    v12 = v10;
  else
    v12 = v11;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  LODWORD(p_p->__r_.__value_.__l.__data_) = v12;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v14 = &__p;
  else
    v14 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v15 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v15 = __p.__r_.__value_.__l.__size_;
  std::string::append(a2, (const std::string::value_type *)v14, v15);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v16 = &v32;
  else
    v16 = (std::string *)v32.__r_.__value_.__r.__words[0];
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v17 = HIBYTE(v32.__r_.__value_.__r.__words[2]);
  else
    v17 = v32.__r_.__value_.__l.__size_;
  std::string::append(a2, (const std::string::value_type *)v16, v17);
  sub_19C2CB9E8(a2);
  v19 = *(_QWORD *)(a1 + 32);
  v18 = *(const std::string::value_type **)(a1 + 40);
  memset(&__p, 0, sizeof(__p));
  std::string::resize(&__p, 4uLL, 0);
  v20 = 4 * v19;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v21 = &__p;
  else
    v21 = (std::string *)__p.__r_.__value_.__r.__words[0];
  LODWORD(v21->__r_.__value_.__l.__data_) = v20;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v22 = &__p;
  else
    v22 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v23 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v23 = __p.__r_.__value_.__l.__size_;
  std::string::append(a2, (const std::string::value_type *)v22, v23);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::append(a2, v18, v20);
  sub_19C2CB9E8(a2);
  v26 = a1 + 64;
  v24 = *(_QWORD *)(a1 + 64);
  v25 = *(const std::string::value_type **)(v26 + 8);
  memset(&__p, 0, sizeof(__p));
  std::string::resize(&__p, 4uLL, 0);
  v27 = 4 * v24;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v28 = &__p;
  else
    v28 = (std::string *)__p.__r_.__value_.__r.__words[0];
  LODWORD(v28->__r_.__value_.__l.__data_) = v27;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v29 = &__p;
  else
    v29 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v30 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v30 = __p.__r_.__value_.__l.__size_;
  std::string::append(a2, (const std::string::value_type *)v29, v30);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::append(a2, v25, v27);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
}

void sub_19C29FD04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  if (a20 < 0)
    operator delete(__p);
  if (*(char *)(v20 + 23) < 0)
    operator delete(*(void **)v20);
  _Unwind_Resume(exception_object);
}

void sub_19C29FD7C(unsigned __int8 *__s1@<X0>, uint64_t a2@<X1>, char a3@<W2>, int a4@<W3>, unsigned __int8 ***a5@<X8>)
{
  unsigned __int8 *v6;
  unsigned __int8 *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unsigned __int8 **v12;
  unsigned __int8 **v13;
  char *v14;
  char *v15;
  _BOOL4 v16;
  int v17;
  uint64_t v18;
  _BOOL4 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  unsigned __int8 **v26;
  char *v27;
  char *v28;
  unsigned __int8 **v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  unsigned __int8 **v36;
  char *v37;
  char *v38;
  unsigned __int8 **v39;
  unsigned __int8 **v40;
  int v41;
  _QWORD *v42;
  unsigned __int8 *v43;
  int v44;
  uint64_t v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  unsigned __int8 **v54;
  char *v55;
  char *v56;
  unsigned __int8 **v57;

  v6 = __s1;
  v8 = &__s1[a2];
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  if ((a3 & 1) == 0)
  {
    if (a2 < 1)
      return;
    v40 = 0;
    v41 = 0;
    v42 = a5 + 2;
    v43 = __s1;
    while (1)
    {
      v44 = asc_19C45F89C[(unint64_t)*v43 >> 4];
      if ((int)v8 - (int)v43 < v44)
        v44 = (_DWORD)v8 - (_DWORD)v43;
      v45 = v44;
      if (v44 == 3)
      {
        v46 = memcmp(v43, "▁", 3uLL);
        v47 = v46 == 0;
        if (v43 == v6)
          goto LABEL_62;
        if ((v41 & a4 & 1) == 0 && !v46)
        {
          v47 = 1;
LABEL_62:
          if ((unint64_t)v40 >= *v42)
          {
            v48 = ((char *)v40 - (char *)*a5) >> 4;
            if ((unint64_t)(v48 + 1) >> 60)
              sub_19C2A18E8();
            v49 = *v42 - (_QWORD)*a5;
            v50 = v49 >> 3;
            if (v49 >> 3 <= (unint64_t)(v48 + 1))
              v50 = v48 + 1;
            if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF0)
              v51 = 0xFFFFFFFFFFFFFFFLL;
            else
              v51 = v50;
            v52 = (char *)sub_19C2A26A4((uint64_t)(a5 + 2), v51);
            v54 = (unsigned __int8 **)&v52[16 * v48];
            *v54 = v43;
            v54[1] = 0;
            v56 = (char *)*a5;
            v55 = (char *)a5[1];
            v57 = v54;
            if (v55 != (char *)*a5)
            {
              do
              {
                *((_OWORD *)v57 - 1) = *((_OWORD *)v55 - 1);
                v57 -= 2;
                v55 -= 16;
              }
              while (v55 != v56);
              v55 = (char *)*a5;
            }
            v40 = v54 + 2;
            *a5 = v57;
            a5[1] = v54 + 2;
            a5[2] = (unsigned __int8 **)&v52[16 * v53];
            if (v55)
              operator delete(v55);
          }
          else
          {
            *v40 = v43;
            v40[1] = 0;
            v40 += 2;
          }
          a5[1] = v40;
          goto LABEL_76;
        }
        if ((v41 & 1) != 0)
        {
          v47 = v41 & (v46 == 0);
          goto LABEL_76;
        }
      }
      else if (v43 == v6)
      {
        v47 = 0;
        goto LABEL_62;
      }
      v47 = 0;
LABEL_76:
      *(v40 - 1) += v45;
      v43 += v45;
      v41 = v47;
      if (v43 >= v8)
        return;
    }
  }
  if (a2 >= 1)
  {
    v9 = a5 + 2;
    v10 = sub_19C2A26A4((uint64_t)(a5 + 2), 1uLL);
    v12 = (unsigned __int8 **)&v10[2 * v11];
    *v10 = v6;
    v10[1] = 0;
    v13 = (unsigned __int8 **)(v10 + 2);
    v15 = (char *)*a5;
    v14 = (char *)a5[1];
    if (v14 != (char *)*a5)
    {
      do
      {
        *((_OWORD *)v10 - 1) = *((_OWORD *)v14 - 1);
        v10 -= 2;
        v14 -= 16;
      }
      while (v14 != v15);
      v14 = (char *)*a5;
    }
    *a5 = (unsigned __int8 **)v10;
    a5[1] = v13;
    a5[2] = v12;
    if (v14)
      operator delete(v14);
    v16 = 0;
    a5[1] = v13;
    do
    {
      v17 = asc_19C45F89C[(unint64_t)*v6 >> 4];
      if ((int)v8 - (int)v6 < v17)
        v17 = (_DWORD)v8 - (_DWORD)v6;
      v18 = v17;
      if (v17 == 3)
      {
        v19 = memcmp(v6, "▁", 3uLL) == 0;
        if (v19)
          goto LABEL_18;
      }
      else
      {
        v19 = 0;
      }
      if ((v16 & a4) != 0)
      {
        if ((unint64_t)v13 >= *v9)
        {
          v20 = ((char *)v13 - (char *)*a5) >> 4;
          if ((unint64_t)(v20 + 1) >> 60)
            sub_19C2A18E8();
          v21 = *v9 - (_QWORD)*a5;
          v22 = v21 >> 3;
          if (v21 >> 3 <= (unint64_t)(v20 + 1))
            v22 = v20 + 1;
          if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF0)
            v23 = 0xFFFFFFFFFFFFFFFLL;
          else
            v23 = v22;
          v24 = (char *)sub_19C2A26A4((uint64_t)(a5 + 2), v23);
          v26 = (unsigned __int8 **)&v24[16 * v20];
          *v26 = v6;
          v26[1] = 0;
          v28 = (char *)*a5;
          v27 = (char *)a5[1];
          v29 = v26;
          if (v27 != (char *)*a5)
          {
            do
            {
              *((_OWORD *)v29 - 1) = *((_OWORD *)v27 - 1);
              v29 -= 2;
              v27 -= 16;
            }
            while (v27 != v28);
            v27 = (char *)*a5;
          }
          v13 = v26 + 2;
          *a5 = v29;
          a5[1] = v26 + 2;
          a5[2] = (unsigned __int8 **)&v24[16 * v25];
          if (v27)
            operator delete(v27);
        }
        else
        {
          *v13 = v6;
          v13[1] = 0;
          v13 += 2;
        }
        v16 = 0;
        a5[1] = v13;
        goto LABEL_31;
      }
LABEL_18:
      v16 = v19;
LABEL_31:
      *(v13 - 1) += v18;
      v6 += v18;
      if (v6 < v8 && v19 && (a4 & 1) == 0)
      {
        if ((unint64_t)v13 >= *v9)
        {
          v30 = ((char *)v13 - (char *)*a5) >> 4;
          if ((unint64_t)(v30 + 1) >> 60)
            sub_19C2A18E8();
          v31 = *v9 - (_QWORD)*a5;
          v32 = v31 >> 3;
          if (v31 >> 3 <= (unint64_t)(v30 + 1))
            v32 = v30 + 1;
          if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF0)
            v33 = 0xFFFFFFFFFFFFFFFLL;
          else
            v33 = v32;
          v34 = (char *)sub_19C2A26A4((uint64_t)(a5 + 2), v33);
          v36 = (unsigned __int8 **)&v34[16 * v30];
          *v36 = v6;
          v36[1] = 0;
          v38 = (char *)*a5;
          v37 = (char *)a5[1];
          v39 = v36;
          if (v37 != (char *)*a5)
          {
            do
            {
              *((_OWORD *)v39 - 1) = *((_OWORD *)v37 - 1);
              v39 -= 2;
              v37 -= 16;
            }
            while (v37 != v38);
            v37 = (char *)*a5;
          }
          v13 = v36 + 2;
          *a5 = v39;
          a5[1] = v36 + 2;
          a5[2] = (unsigned __int8 **)&v34[16 * v35];
          if (v37)
            operator delete(v37);
        }
        else
        {
          *v13 = v6;
          v13[1] = 0;
          v13 += 2;
        }
        a5[1] = v13;
      }
    }
    while (v6 < v8);
  }
}

void sub_19C2A01C0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C2A01F4@<X0>(unsigned __int8 a1@<W0>, uint64_t a2@<X8>)
{
  unsigned __int8 v3;

  v3 = a1;
  return sub_19C2A0220("<0x%02X>", &v3, a2);
}

uint64_t sub_19C2A0220@<X0>(char *__format@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  uint64_t v7;
  char *v8;

  v6 = snprintf(0, 0, __format, *a2);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  std::string::resize((std::string *)a3, v6, 0);
  v7 = *(unsigned __int8 *)(a3 + 23);
  if ((v7 & 0x80u) == 0)
    v8 = (char *)a3;
  else
    v8 = *(char **)a3;
  if ((v7 & 0x80u) != 0)
    v7 = *(_QWORD *)(a3 + 8);
  return snprintf(v8, v7 + 1, __format, *a2);
}

void sub_19C2A02B0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C2A02CC()
{
  uint64_t v0;
  int v1;
  void *__p[2];
  char v4;
  void **v5;

  v0 = operator new();
  v1 = 0;
  *(_OWORD *)v0 = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_DWORD *)(v0 + 32) = 1065353216;
  do
  {
    LOBYTE(v5) = v1;
    sub_19C2A0220("<0x%02X>", (unsigned __int8 *)&v5, (uint64_t)__p);
    v5 = __p;
    *((_BYTE *)sub_19C2A0C68(v0, (unsigned __int8 *)__p, (uint64_t)&unk_19C46CDC2, (__int128 **)&v5) + 40) = v1;
    if (v4 < 0)
      operator delete(__p[0]);
    ++v1;
  }
  while (v1 != 256);
  return v0;
}

void sub_19C2A0394(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C2A03B0(_QWORD *a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, void (*a6)(unint64_t, uint64_t))
{
  uint64_t v9;
  size_t v10;
  _DWORD *v11;
  _DWORD *v12;
  uint64_t v13;
  int *v14;
  _DWORD *v15;
  int v16;
  uint64_t v17;
  void (*v19)(unint64_t, uint64_t);
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  int v24;
  unint64_t v25[4];

  v25[0] = a2;
  v25[1] = a3;
  v25[2] = a4;
  v25[3] = a5;
  v19 = a6;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0;
  sub_19C2A280C(&v19, v25);
  v9 = *((_QWORD *)&v20 + 1);
  v10 = 4 * *((_QWORD *)&v20 + 1);
  v11 = (_DWORD *)operator new[]();
  v12 = v11;
  if (v9)
    bzero(v11, v10);
  v13 = *((_QWORD *)&v20 + 1);
  if (*((_QWORD *)&v20 + 1))
  {
    v14 = (int *)v20;
    v15 = v12;
    do
    {
      v16 = *v14++;
      *v15++ = v16;
      --v13;
    }
    while (v13);
  }
  a1[1] = 0;
  a1[2] = 0;
  v17 = a1[3];
  if (v17)
  {
    MEMORY[0x1A1AD3538](v17, 0x1000C8052888210);
    a1[3] = 0;
  }
  a1[1] = v9;
  a1[2] = v12;
  a1[3] = v12;
  if (a6)
    a6(a2 + 1, a2 + 1);
  sub_19C2A51DC((uint64_t)&v19);
  return 0;
}

void sub_19C2A04C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_19C2A51DC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_19C2A04D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_19C2CD5D8(a2, a1 + 96);
}

uint64_t sub_19C2A04E4(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t sub_19C2A04EC@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  char v9;

  result = sub_19C2CB68C();
  if ((int)result <= 2)
  {
    v9 = 0;
    v3 = sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)"model_interface.h", 17);
    sub_19C2A1B24(v3, (uint64_t)"(", 1);
    v4 = (_QWORD *)std::ostream::operator<<();
    v5 = sub_19C2A1B24(v4, (uint64_t)") ", 2);
    v6 = sub_19C2A1B24(v5, (uint64_t)"LOG(", 4);
    v7 = sub_19C2A1B24(v6, (uint64_t)"ERROR", 5);
    v8 = sub_19C2A1B24(v7, (uint64_t)") ", 2);
    sub_19C2A1B24(v8, (uint64_t)"Not implemented.", 16);
    result = (uint64_t)sub_19C2A0AD8(&v9);
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  return result;
}

void sub_19C2A05B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_19C2A0AD8(&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_19C2A05C4@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  char v9;

  result = sub_19C2CB68C();
  if ((int)result <= 2)
  {
    v9 = 0;
    v3 = sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)"model_interface.h", 17);
    sub_19C2A1B24(v3, (uint64_t)"(", 1);
    v4 = (_QWORD *)std::ostream::operator<<();
    v5 = sub_19C2A1B24(v4, (uint64_t)") ", 2);
    v6 = sub_19C2A1B24(v5, (uint64_t)"LOG(", 4);
    v7 = sub_19C2A1B24(v6, (uint64_t)"ERROR", 5);
    v8 = sub_19C2A1B24(v7, (uint64_t)") ", 2);
    sub_19C2A1B24(v8, (uint64_t)"Not implemented.", 16);
    result = (uint64_t)sub_19C2A0AD8(&v9);
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  return result;
}

void sub_19C2A0688(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_19C2A0AD8(&a13);
  _Unwind_Resume(a1);
}

void sub_19C2A069C(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  char *v8;
  void *__p;
  void *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if ((int)sub_19C2CB68C() <= 2)
  {
    LOBYTE(__p) = 0;
    v2 = sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)"model_interface.h", 17);
    sub_19C2A1B24(v2, (uint64_t)"(", 1);
    v3 = (_QWORD *)std::ostream::operator<<();
    v4 = sub_19C2A1B24(v3, (uint64_t)") ", 2);
    v5 = sub_19C2A1B24(v4, (uint64_t)"LOG(", 4);
    v6 = sub_19C2A1B24(v5, (uint64_t)"ERROR", 5);
    v7 = sub_19C2A1B24(v6, (uint64_t)") ", 2);
    sub_19C2A1B24(v7, (uint64_t)"Not implemented.", 16);
    sub_19C2A0AD8(&__p);
  }
  __p = 0;
  v10 = 0;
  v12 = 0;
  v11 = 0;
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  v8 = (char *)operator new(0x20uLL);
  *a1 = v8;
  a1[1] = v8;
  a1[2] = v8 + 32;
  a1[1] = sub_19C2A1758((uint64_t)(a1 + 2), (uint64_t)&__p, (uint64_t)&v13, (uint64_t)v8);
  if (__p)
  {
    v10 = __p;
    operator delete(__p);
  }
}

void sub_19C2A07E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, void *__p, uint64_t a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v15 = v14;
  *(_QWORD *)(v13 + 8) = v15;
  sub_19C2A19C0(&a10);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

float sub_19C2A0828()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  char v7;

  if ((int)sub_19C2CB68C() <= 2)
  {
    v7 = 0;
    v0 = sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)"model_interface.h", 17);
    sub_19C2A1B24(v0, (uint64_t)"(", 1);
    v1 = (_QWORD *)std::ostream::operator<<();
    v2 = sub_19C2A1B24(v1, (uint64_t)") ", 2);
    v3 = sub_19C2A1B24(v2, (uint64_t)"LOG(", 4);
    v4 = sub_19C2A1B24(v3, (uint64_t)"ERROR", 5);
    v5 = sub_19C2A1B24(v4, (uint64_t)") ", 2);
    sub_19C2A1B24(v5, (uint64_t)"Not implemented.", 16);
    sub_19C2A0AD8(&v7);
  }
  return 0.0;
}

void sub_19C2A08E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_19C2A0AD8(&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_19C2A08F8()
{
  return 0;
}

uint64_t sub_19C2A0900()
{
  return 0;
}

uint64_t sub_19C2A0908()
{
  return 0;
}

uint64_t sub_19C2A0910()
{
  return 0;
}

uint64_t sub_19C2A0918(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 88))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_19C2A0928(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  return result;
}

uint64_t sub_19C2A0940(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 96))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_19C2A0950(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 112))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_19C2A0960(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 120))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_19C2A0970(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 128))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_19C2A0980(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 136))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_19C2A0990(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 144))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_19C2A09A0(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 64))(result);
  return result;
}

BOOL sub_19C2A09B8(int a1, void *__s1, size_t a3, void *__s2, uint64_t a5)
{
  return a3 == a5 && memcmp(__s1, __s2, a3) == 0;
}

uint64_t sub_19C2A09EC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::ios_base *v6;

  v2 = MEMORY[0x1E0DE4FE0];
  v3 = MEMORY[0x1E0DE4FE0] + 64;
  *(_QWORD *)(a1 + 112) = MEMORY[0x1E0DE4FE0] + 64;
  v4 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v5 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + *(_QWORD *)(v4 - 24)) = v5;
  v6 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v6, (void *)(a1 + 8));
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 112) = v3;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 8) = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_19C2A0AB0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x1A1AD34CC](v1);
  _Unwind_Resume(a1);
}

_BYTE *sub_19C2A0AD8(_BYTE *a1)
{
  const std::locale::facet *v2;
  std::locale v4;

  std::ios_base::getloc((const std::ios_base *)(MEMORY[0x1E0DE4A50] + *(_QWORD *)(*MEMORY[0x1E0DE4A50] - 24)));
  v2 = std::locale::use_facet(&v4, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 10);
  std::locale::~locale(&v4);
  std::ostream::put();
  std::ostream::flush();
  if (*a1)
    sub_19C2CD2B0();
  return a1;
}

void sub_19C2A0B70(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  sub_19C2CDAC8(a1);
}

uint64_t sub_19C2A0B8C(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    sub_19C2CF5C8((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1705);
    v4 = sub_19C2CF5E0(v8, "CHECK failed: (index) >= (0): ");
    sub_19C2CF710((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_19C2CF718((uint64_t)v8);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    sub_19C2CF5C8((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1706);
    v5 = sub_19C2CF5E0(v8, "CHECK failed: (index) < (current_size_): ");
    sub_19C2CF710((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_19C2CF718((uint64_t)v8);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
}

void sub_19C2A0C48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_19C2A0C68(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  void **v14;
  void *i;
  unint64_t v16;
  _QWORD *v17;
  __int128 *v18;
  __int128 v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;

  v8 = (_QWORD *)(a1 + 24);
  v9 = sub_19C2A0EF0(a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(void **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((sub_19C2A1398(a1 + 32, (unsigned __int8 *)i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  v17 = (_QWORD *)(a1 + 16);
  i = operator new(0x30uLL);
  *(_QWORD *)i = 0;
  *((_QWORD *)i + 1) = v10;
  v18 = *a4;
  v19 = **a4;
  *((_QWORD *)i + 4) = *((_QWORD *)*a4 + 2);
  *((_OWORD *)i + 1) = v19;
  *((_QWORD *)v18 + 1) = 0;
  *((_QWORD *)v18 + 2) = 0;
  *(_QWORD *)v18 = 0;
  *((_BYTE *)i + 40) = 0;
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v21 = *(float *)(a1 + 32);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    v22 = 1;
    if (v11 >= 3)
      v22 = (v11 & (v11 - 1)) != 0;
    v23 = v22 | (2 * v11);
    v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24)
      v25 = v24;
    else
      v25 = v23;
    sub_19C2A1464(a1, v25);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v26 = *(_QWORD *)a1;
  v27 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v27)
  {
    *(_QWORD *)i = *v27;
LABEL_38:
    *v27 = i;
    goto LABEL_39;
  }
  *(_QWORD *)i = *v17;
  *v17 = i;
  *(_QWORD *)(v26 + 8 * v4) = v17;
  if (*(_QWORD *)i)
  {
    v28 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v28 >= v11)
        v28 %= v11;
    }
    else
    {
      v28 &= v11 - 1;
    }
    v27 = (_QWORD *)(*(_QWORD *)a1 + 8 * v28);
    goto LABEL_38;
  }
LABEL_39:
  ++*v8;
  return i;
}

void sub_19C2A0ED4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void **v10;
  uint64_t v11;

  sub_19C2A1698(v11, v10);
  _Unwind_Resume(a1);
}

unint64_t sub_19C2A0EF0(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  char v5;

  v2 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v3 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v3 = v2;
  }
  return sub_19C2A0F2C((uint64_t)&v5, (uint64_t *)a2, v3);
}

unint64_t sub_19C2A0F2C(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;

  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      v4 = *(uint64_t *)((char *)a2 + a3 - 48);
      v5 = *(uint64_t *)((char *)a2 + a3 - 40);
      v6 = *(uint64_t *)((char *)a2 + a3 - 24);
      v8 = *(uint64_t *)((char *)a2 + a3 - 64);
      v7 = *(uint64_t *)((char *)a2 + a3 - 56);
      v9 = *(uint64_t *)((char *)a2 + a3 - 16);
      v10 = *(uint64_t *)((char *)a2 + a3 - 8);
      v11 = v7 + v9;
      v12 = 0x9DDFEA08EB382D69
          * (v6 ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))));
      v13 = 0x9DDFEA08EB382D69 * (v12 ^ (v12 >> 47));
      v14 = v8 + a3 + v7 + v4;
      v15 = v14 + v5;
      v16 = __ROR8__(v14, 44) + v8 + a3 + __ROR8__(v5 + v8 + a3 - 0x622015F714C7D297 * (v12 ^ (v12 >> 47)), 21);
      v17 = v7 + v9 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      v18 = v17 + v6 + v9;
      v19 = __ROR8__(v18, 44);
      v20 = v18 + v10;
      v21 = v19 + v17 + __ROR8__(v17 + v5 + v10, 21);
      v23 = *a2;
      v22 = a2 + 4;
      v24 = v23 - 0x4B6D499041670D8DLL * v5;
      v25 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        v26 = *(v22 - 3);
        v27 = v24 + v15 + v11 + v26;
        v28 = v22[2];
        v29 = v22[3];
        v30 = v22[1];
        v11 = v30 + v15 - 0x4B6D499041670D8DLL * __ROR8__(v11 + v16 + v28, 42);
        v31 = v13 + v20;
        v32 = *(v22 - 2);
        v33 = *(v22 - 1);
        v34 = *(v22 - 4) - 0x4B6D499041670D8DLL * v16;
        v35 = v34 + v20 + v33;
        v36 = v34 + v26 + v32;
        v15 = v36 + v33;
        v37 = __ROR8__(v36, 44) + v34;
        v38 = (0xB492B66FBE98F273 * __ROR8__(v27, 37)) ^ v21;
        v24 = 0xB492B66FBE98F273 * __ROR8__(v31, 33);
        v16 = v37 + __ROR8__(v35 + v38, 21);
        v39 = v24 + v21 + *v22;
        v20 = v39 + v30 + v28 + v29;
        v21 = __ROR8__(v39 + v30 + v28, 44) + v39 + __ROR8__(v11 + v32 + v39 + v29, 21);
        v22 += 8;
        v13 = v38;
        v25 += 64;
      }
      while (v25);
      v40 = v24
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) ^ ((0x9DDFEA08EB382D69 * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) >> 47));
      v41 = 0x9DDFEA08EB382D69
          * (v40 ^ (v38
                  - 0x4B6D499041670D8DLL * (v11 ^ (v11 >> 47))
                  - 0x622015F714C7D297
                  * ((0x9DDFEA08EB382D69
                    * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) ^ ((0x9DDFEA08EB382D69 * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) ^ ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) >> 47));
    }
    else
    {
      return sub_19C2A12D8(a2, a3);
    }
  }
  else if (a3 > 0x10)
  {
    return sub_19C2A122C(a2, a3);
  }
  else
  {
    return sub_19C2A1134(a2, a3);
  }
}

unint64_t sub_19C2A1134(_DWORD *a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  if (a2 < 9)
  {
    if (a2 < 4)
    {
      result = 0x9AE16A3B2F90404FLL;
      if (a2)
      {
        v8 = (0xC949D7C7509E6557 * (a2 + 4 * *((unsigned __int8 *)a1 + a2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                      * (*(unsigned __int8 *)a1 | ((unint64_t)*((unsigned __int8 *)a1 + (a2 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v8 ^ (v8 >> 47));
      }
    }
    else
    {
      v6 = *(unsigned int *)((char *)a1 + a2 - 4);
      v7 = 0x9DDFEA08EB382D69 * (((8 * *a1) + a2) ^ v6);
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
    }
  }
  else
  {
    v3 = *(_QWORD *)((char *)a1 + a2 - 8);
    v4 = __ROR8__(v3 + a2, a2);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)))) >> 47))) ^ v3;
  }
  return result;
}

unint64_t sub_19C2A122C(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v2 = a1[1];
  v3 = 0xB492B66FBE98F273 * *a1;
  v4 = __ROR8__(0x9AE16A3B2F90404FLL * *(_QWORD *)((char *)a1 + a2 - 8), 30) + __ROR8__(v3 - v2, 43);
  v5 = v3 + a2 + __ROR8__(v2 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(_QWORD *)((char *)a1 + a2 - 8);
  v6 = 0x9DDFEA08EB382D69 * (v5 ^ (v4 - 0x3C5A37A36834CED9 * *(_QWORD *)((char *)a1 + a2 - 16)));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) ^ ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) >> 47));
}

unint64_t sub_19C2A12D8(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v2 = *(_QWORD *)((char *)a1 + a2 - 16);
  v3 = *a1 - 0x3C5A37A36834CED9 * (v2 + a2);
  v5 = a1[2];
  v4 = a1[3];
  v6 = __ROR8__(v3 + v4, 52);
  v7 = v3 + a1[1];
  v8 = __ROR8__(v7, 7);
  v9 = v7 + v5;
  v10 = *(_QWORD *)((char *)a1 + a2 - 32) + v5;
  v11 = v8 + __ROR8__(*a1 - 0x3C5A37A36834CED9 * (v2 + a2), 37) + v6 + __ROR8__(v9, 31);
  v12 = *(_QWORD *)((char *)a1 + a2 - 24) + v10 + v2;
  v13 = 0xC3A5C85C97CB3127 * (v12 + *(_QWORD *)((char *)a1 + a2 - 8) + v4 + v11)
      - 0x651E95C4D06FBFB1
      * (v9
       + v4
       + __ROR8__(v10, 37)
       + __ROR8__(*(_QWORD *)((char *)a1 + a2 - 24) + v10, 7)
       + __ROR8__(*(_QWORD *)((char *)a1 + a2 - 8) + v4 + v10, 52)
       + __ROR8__(v12, 31));
  return 0x9AE16A3B2F90404FLL
       * ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) ^ ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) >> 47));
}

uint64_t sub_19C2A1398(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  BOOL v14;
  uint64_t result;

  v3 = a3;
  v4 = a2[23];
  if ((v4 & 0x80u) == 0)
    v5 = a2[23];
  else
    v5 = *((_QWORD *)a2 + 1);
  v6 = a3[23];
  v7 = (char)v6;
  if ((v6 & 0x80u) != 0)
    v6 = *((_QWORD *)a3 + 1);
  if (v5 != v6)
    return 0;
  if (v7 < 0)
    v3 = *(unsigned __int8 **)a3;
  if ((v4 & 0x80) != 0)
    return memcmp(*(const void **)a2, v3, *((_QWORD *)a2 + 1)) == 0;
  if (!a2[23])
    return 1;
  v8 = v4 - 1;
  do
  {
    v10 = *a2++;
    v9 = v10;
    v12 = *v3++;
    v11 = v12;
    v14 = v8-- != 0;
    result = v9 == v11;
  }
  while (v9 == v11 && v14);
  return result;
}

void sub_19C2A143C()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x1E0DE4E98], MEMORY[0x1E0DE4390]);
}

void sub_19C2A1464(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v4)
    goto LABEL_16;
  if (prime < *(_QWORD *)&v4)
  {
    v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      v5 = std::__next_prime(v5);
    }
    else
    {
      v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2)
        v5 = v7;
    }
    if (prime <= v5)
      prime = v5;
    if (prime < *(_QWORD *)&v4)
LABEL_16:
      sub_19C2A1540(a1, prime);
  }
}

void sub_19C2A1540(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint8x8_t v9;
  void *v10;
  _QWORD *v11;
  unint64_t v12;

  if (a2)
  {
    if (a2 >> 61)
      sub_19C2A143C();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v7 = *(_QWORD **)(a1 + 16);
    if (v7)
    {
      v8 = v7[1];
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2)
          v8 %= a2;
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = a1 + 16;
      v11 = (_QWORD *)*v7;
      if (*v7)
      {
        do
        {
          v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2)
              v12 %= a2;
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v12))
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            *v7 = *v11;
            *v11 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
            **(_QWORD **)(*(_QWORD *)a1 + 8 * v12) = v11;
            v11 = v7;
          }
          v12 = v8;
LABEL_24:
          v7 = v11;
          v11 = (_QWORD *)*v11;
          v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    v10 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v10)
      operator delete(v10);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

void sub_19C2A1698(uint64_t a1, void **__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
    if (*((char *)__p + 39) < 0)
      operator delete(__p[2]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void sub_19C2A16E4(const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_19C2A1734(exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E3D2F2B8, MEMORY[0x1E0DE42D0]);
}

void sub_19C2A1720(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_19C2A1734(std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5020] + 16);
  return result;
}

uint64_t sub_19C2A1758(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *(_QWORD *)v4 = 0;
      *(_QWORD *)(v4 + 8) = 0;
      *(_QWORD *)(v4 + 16) = 0;
      sub_19C2A181C((char *)v4, *(__int128 **)v6, *(__int128 **)(v6 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 3));
      *(_DWORD *)(v4 + 24) = *(_DWORD *)(v6 + 24);
      v4 = v11 + 32;
      v11 += 32;
      v6 += 32;
    }
    while (v6 != a3);
  }
  v9 = 1;
  sub_19C2A1940((uint64_t)v8);
  return v4;
}

void sub_19C2A1808(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_19C2A1940((uint64_t)&a9);
  _Unwind_Resume(a1);
}

char *sub_19C2A181C(char *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  char *v6;
  uint64_t v7;
  __int128 v8;

  if (a4)
  {
    v6 = result;
    result = sub_19C2A1898(result, a4);
    v7 = *((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2;
      *(_QWORD *)(v7 + 16) = *((_QWORD *)a2 + 2);
      *(_OWORD *)v7 = v8;
      v7 += 24;
      a2 = (__int128 *)((char *)a2 + 24);
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_19C2A187C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_19C2A1898(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    sub_19C2A18E8();
  result = (char *)sub_19C2A18FC((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

void sub_19C2A18E8()
{
  sub_19C2A16E4("vector");
}

void *sub_19C2A18FC(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    sub_19C2A143C();
  return operator new(24 * a2);
}

uint64_t sub_19C2A1940(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_19C2A1974(a1);
  return a1;
}

void sub_19C2A1974(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  if (v1 != v2)
  {
    v3 = **(_QWORD **)(a1 + 16);
    do
    {
      v5 = *(void **)(v3 - 32);
      v3 -= 32;
      v4 = v5;
      if (v5)
      {
        *(_QWORD *)(v1 - 24) = v4;
        operator delete(v4);
      }
      v1 = v3;
    }
    while (v3 != v2);
  }
}

void sub_19C2A19C0(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_19C2A1A00((uint64_t *)v2);
    operator delete(**a1);
  }
}

void sub_19C2A1A00(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  v3 = *a1;
  v2 = a1[1];
  if (v2 != *a1)
  {
    v4 = a1[1];
    do
    {
      v6 = *(void **)(v4 - 32);
      v4 -= 32;
      v5 = v6;
      if (v6)
      {
        *(_QWORD *)(v2 - 24) = v5;
        operator delete(v5);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

void sub_19C2A1A54()
{
  sub_19C2A16E4("basic_string");
}

void sub_19C2A1A68(_QWORD *a1)
{
  uint64_t v2;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1E3D38860;
  v2 = a1[3];
  if (v2)
  {
    MEMORY[0x1A1AD3538](v2, 0x1000C8052888210);
    a1[3] = 0;
  }
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t **sub_19C2A1AC8(uint64_t **result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = *v2;
    *v2 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    JUMPOUT(0x1A1AD355CLL);
  }
  return result;
}

_QWORD *sub_19C2A1B24(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  const std::locale::facet *v10;
  uint64_t v11;
  _BYTE v13[16];
  std::locale v14;

  MEMORY[0x1A1AD32BC](v13, a1);
  if (v13[0])
  {
    v6 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
    v7 = *(_QWORD *)(v6 + 40);
    v8 = *(_DWORD *)(v6 + 8);
    v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v10 = std::locale::use_facet(&v14, MEMORY[0x1E0DE4A90]);
      v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20)
      v11 = a2 + a3;
    else
      v11 = a2;
    if (!sub_19C2A1C88(v7, a2, v11, a2 + a3, v6, (char)v9))
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
  MEMORY[0x1A1AD32C8](v13);
  return a1;
}

void sub_19C2A1C2C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  _QWORD *v12;

  MEMORY[0x1A1AD32C8](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x19C2A1C0CLL);
}

void sub_19C2A1C74(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_19C2A1C88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6;
  uint64_t v11;
  int64_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  void *__p[2];
  char v18;

  v6 = a1;
  if (a1)
  {
    v11 = *(_QWORD *)(a5 + 24);
    if (v11 <= a4 - a2)
      v12 = 0;
    else
      v12 = v11 - (a4 - a2);
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) != a3 - a2)
      return 0;
    if (v12 >= 1)
    {
      sub_19C2A1DC4(__p, v12, __c);
      v13 = v18 >= 0 ? __p : (void **)__p[0];
      v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(_QWORD *)v6 + 96))(v6, v13, v12);
      if (v18 < 0)
        operator delete(__p[0]);
      if (v14 != v12)
        return 0;
    }
    v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 96))(v6, a3, v15) == v15)
      *(_QWORD *)(a5 + 24) = 0;
    else
      return 0;
  }
  return v6;
}

void sub_19C2A1DA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_19C2A1DC4(_QWORD *__b, size_t __len, int __c)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    sub_19C2A1A54();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((_BYTE *)__b + 23) = __len;
    v6 = __b;
    if (!__len)
      goto LABEL_9;
  }
  memset(v6, __c, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __b;
}

void sub_19C2A1E6C(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_19C2A1E6C(a1, *a2);
    sub_19C2A1E6C(a1, a2[1]);
    operator delete(a2);
  }
}

_QWORD *sub_19C2A1EAC(_QWORD *a1, unint64_t a2, unsigned __int8 *a3)
{
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  int v14;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_19C2A1F7C(a1, a2);
    v6 = *a3;
    v7 = a1[1];
    v8 = v7 + a2;
    a1[1] = v7 + a2;
    if (v7)
    {
      v9 = v8 - 1;
      if (((v8 - 1) ^ (v7 - 1)) < 0x40)
      {
LABEL_10:
        v13 = *a1 + 8 * (v7 >> 6);
        v14 = v7 & 0x3F;
        if (v6)
          sub_19C2A1FF4(&v13, a2);
        else
          sub_19C2A20A4((uint64_t)&v13, a2);
        return a1;
      }
    }
    else
    {
      v9 = v8 - 1;
    }
    v10 = v9 >> 6;
    if (v8 >= 0x41)
      v11 = v10;
    else
      v11 = 0;
    *(_QWORD *)(*a1 + 8 * v11) = 0;
    goto LABEL_10;
  }
  return a1;
}

void *sub_19C2A1F7C(_QWORD *a1, uint64_t a2)
{
  void *result;
  uint64_t v4;

  if (a2 < 0)
    sub_19C2A18E8();
  result = sub_19C2A1FC0((uint64_t)(a1 + 2), ((unint64_t)(a2 - 1) >> 6) + 1);
  *a1 = result;
  a1[1] = 0;
  a1[2] = v4;
  return result;
}

void *sub_19C2A1FC0(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61)
    sub_19C2A143C();
  return operator new(8 * a2);
}

_QWORD *sub_19C2A1FF4(_QWORD *result, unint64_t a2)
{
  unint64_t v2;
  _QWORD *v3;
  int v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;

  v2 = a2;
  v3 = result;
  v4 = *((_DWORD *)result + 2);
  v5 = (_QWORD *)*result;
  if (v4)
  {
    if ((64 - v4) >= a2)
      v6 = a2;
    else
      v6 = (64 - v4);
    *v5++ |= (0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4);
    v2 = a2 - v6;
    *result = v5;
  }
  v7 = v2 >> 6;
  if (v2 >= 0x40)
    result = memset(v5, 255, 8 * v7);
  if ((v2 & 0x3F) != 0)
  {
    v8 = &v5[v7];
    *v3 = v8;
    *v8 |= 0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F);
  }
  return result;
}

void sub_19C2A20A4(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  int v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;

  v2 = a2;
  v4 = *(_DWORD *)(a1 + 8);
  v5 = *(_QWORD **)a1;
  if (v4)
  {
    if ((64 - v4) >= a2)
      v6 = a2;
    else
      v6 = (64 - v4);
    *v5++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4));
    v2 = a2 - v6;
    *(_QWORD *)a1 = v5;
  }
  v7 = v2 >> 6;
  if (v2 >= 0x40)
    bzero(v5, 8 * v7);
  if ((v2 & 0x3F) != 0)
  {
    v8 = &v5[v7];
    *(_QWORD *)a1 = v8;
    *v8 &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F));
  }
}

_OWORD *sub_19C2A2150(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  void **v5;
  _OWORD *v6;
  uint64_t **v7;
  uint64_t v9;

  v5 = (void **)sub_19C2A21D8((uint64_t)a1, &v9, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = operator new(0x38uLL);
    v6[2] = *(_OWORD *)a3;
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a3 + 16);
    sub_19C2A2274(a1, v9, v7, (uint64_t *)v6);
  }
  return v6;
}

_QWORD *sub_19C2A21D8(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    v7 = a1 + 16;
    do
    {
      while (1)
      {
        v8 = v4;
        v9 = (uint64_t)(v4 + 4);
        if (!sub_19C2A22C8(v7, a3, (uint64_t)(v4 + 4)))
          break;
        v4 = (_QWORD *)*v8;
        v5 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (!sub_19C2A22C8(v7, v9, a3))
        break;
      v5 = v8 + 1;
      v4 = (_QWORD *)v8[1];
    }
    while (v4);
  }
  else
  {
    v8 = (_QWORD *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

uint64_t *sub_19C2A2274(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t *result;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  result = sub_19C2A2310(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t sub_19C2A22C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const void *v3;
  size_t v4;
  const void *v5;
  size_t v6;
  size_t v7;
  int v8;
  unsigned int v9;

  v3 = *(const void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(const void **)a3;
  v6 = *(_QWORD *)(a3 + 8);
  if (v6 >= v4)
    v7 = v4;
  else
    v7 = *(_QWORD *)(a3 + 8);
  v8 = memcmp(v3, v5, v7);
  if (v4 < v6)
    v9 = -1;
  else
    v9 = 1;
  if (v4 == v6)
    v9 = 0;
  if (v8)
    v9 = v8;
  return v9 >> 31;
}

uint64_t *sub_19C2A2310(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      v2 = (uint64_t *)a2[2];
      if (*((_BYTE *)v2 + 24))
        return result;
      v3 = (uint64_t *)v2[2];
      v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            v9 = (uint64_t **)a2[2];
          }
          else
          {
            v9 = (uint64_t **)v2[1];
            v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = v9;
            *v9 = v2;
            v2[2] = (uint64_t)v9;
            v3 = v9[2];
            v2 = (uint64_t *)*v3;
          }
          *((_BYTE *)v9 + 24) = 1;
          *((_BYTE *)v3 + 24) = 0;
          v13 = v2[1];
          *v3 = v13;
          if (v13)
            *(_QWORD *)(v13 + 16) = v3;
          v2[2] = v3[2];
          *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          v11 = a2[1];
          *v2 = v11;
          if (v11)
          {
            *(_QWORD *)(v11 + 16) = v2;
            v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((_BYTE *)a2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v2 = (uint64_t *)v3[1];
        v12 = *v2;
        v3[1] = *v2;
        if (v12)
          *(_QWORD *)(v12 + 16) = v3;
        v2[2] = v3[2];
        *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
        *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((_BYTE *)v2 + 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + 24) = v3 == result;
      *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

uint64_t sub_19C2A24A8(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;

  if (a2 >= 0x7FFFFFFFFFFFFFF8)
    sub_19C2A1A54();
  if (a2 > 0x16)
  {
    v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17)
      v4 = a2 | 7;
    v5 = v4 + 1;
    v6 = operator new(v4 + 1);
    *(_QWORD *)(a1 + 8) = a2;
    *(_QWORD *)(a1 + 16) = v5 | 0x8000000000000000;
    *(_QWORD *)a1 = v6;
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    *(_BYTE *)(a1 + 23) = a2;
  }
  return a1;
}

uint64_t *sub_19C2A252C(uint64_t **a1, uint64_t a2, _OWORD *a3)
{
  void **v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t v9;

  v5 = (void **)sub_19C2A21D8((uint64_t)a1, &v9, a2);
  v6 = (uint64_t *)*v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = (uint64_t *)operator new(0x30uLL);
    *((_OWORD *)v6 + 2) = *a3;
    sub_19C2A2274(a1, v9, v7, v6);
  }
  return v6;
}

uint64_t sub_19C2A25AC@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v3 = *(unsigned int *)(result + 8);
  v4 = *(_QWORD **)result;
  if (!(_DWORD)v3)
    goto LABEL_9;
  v5 = (64 - v3);
  if (v5 >= a2)
    v6 = a2;
  else
    v6 = (64 - v3);
  if (((0xFFFFFFFFFFFFFFFFLL >> (64 - v3 - v6)) & (-1 << v3) & ~*v4) != 0)
  {
    v7 = __rbit64((0xFFFFFFFFFFFFFFFFLL >> (64 - v3 - v6)) & (-1 << v3) & ~*v4);
LABEL_22:
    *(_QWORD *)a3 = v4;
    *(_DWORD *)(a3 + 8) = __clz(v7);
    return result;
  }
  if (v5 < a2)
  {
    a2 -= v6;
    *(_QWORD *)result = ++v4;
LABEL_9:
    if (a2 < 0x40)
    {
LABEL_12:
      if (!a2 || (v8 = (0xFFFFFFFFFFFFFFFFLL >> -(char)a2) & ~*v4) == 0)
      {
        *(_QWORD *)a3 = v4;
        *(_DWORD *)(a3 + 8) = a2;
        return result;
      }
    }
    else
    {
      while (*v4 == -1)
      {
        *(_QWORD *)result = ++v4;
        a2 -= 64;
        if (a2 <= 0x3F)
          goto LABEL_12;
      }
      v8 = ~*v4;
    }
    v7 = __rbit64(v8);
    goto LABEL_22;
  }
  v9 = v3 + a2 - 63;
  if (v9 < 0)
    v9 = v3 + a2;
  v10 = v9 >> 6;
  v11 = (v3 + a2) >> 6;
  if ((a2 & 0x8000000000000000) != 0)
    v11 = v10;
  *(_QWORD *)a3 = &v4[v11];
  *(_DWORD *)(a3 + 8) = ((_BYTE)v3 + (_BYTE)a2) & 0x3F;
  return result;
}

void *sub_19C2A26A4(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60)
    sub_19C2A143C();
  return operator new(16 * a2);
}

unsigned __int8 *sub_19C2A26D8(_QWORD *a1, unsigned __int8 *a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 **v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unint64_t v13;

  v4 = sub_19C2A0EF0((uint64_t)(a1 + 3), (uint64_t)a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = *v10;
  if (*v10)
  {
    v12 = (uint64_t)(a1 + 4);
    do
    {
      v13 = *((_QWORD *)v11 + 1);
      if (v6 == v13)
      {
        if ((sub_19C2A1398(v12, v11 + 16, a2) & 1) != 0)
          return v11;
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(_QWORD *)&v5)
            v13 %= *(_QWORD *)&v5;
        }
        else
        {
          v13 &= *(_QWORD *)&v5 - 1;
        }
        if (v13 != v9)
          return 0;
      }
      v11 = *(unsigned __int8 **)v11;
    }
    while (v11);
  }
  return v11;
}

void *sub_19C2A27D8(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62)
    sub_19C2A143C();
  return operator new(4 * a2);
}

uint64_t *sub_19C2A280C(void (**a1)(unint64_t, uint64_t), unint64_t *a2)
{
  _OWORD v4[3];
  _OWORD v5[6];
  _OWORD v6[3];
  uint64_t v7;

  if (!a2[3])
    return (uint64_t *)sub_19C2A3164((uint64_t)a1, a2);
  v7 = 0;
  memset(v6, 0, sizeof(v6));
  memset(v5, 0, sizeof(v5));
  memset(v4, 0, sizeof(v4));
  sub_19C2A2D34(a1, a2, (int **)v4);
  sub_19C2A2E48((uint64_t)a1, (uint64_t)v4);
  sub_19C2A38F8((uint64_t *)v4);
  sub_19C2A36EC((uint64_t *)&v4[1] + 1);
  sub_19C2A2934((uint64_t *)v5);
  sub_19C2A3664((uint64_t *)&v5[1] + 1);
  sub_19C2A3420((uint64_t *)&v5[4] + 1);
  sub_19C2A3420((uint64_t *)v6);
  sub_19C2A3420((uint64_t *)&v6[1] + 1);
  v7 = 0;
  return sub_19C2A4C50((uint64_t *)v4);
}

void sub_19C2A28D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_19C2A4C50(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_19C2A28EC(uint64_t *a1)
{
  sub_19C2A2934(a1);
  if (*a1)
  {
    MEMORY[0x1A1AD3538](*a1, 0x1000C8077774924);
    *a1 = 0;
  }
  return a1;
}

uint64_t sub_19C2A2934(uint64_t *a1)
{
  uint64_t result;

  sub_19C2A297C(a1, 0);
  result = *a1;
  if (*a1)
  {
    result = MEMORY[0x1A1AD3538](result, 0x1000C8077774924);
    *a1 = 0;
  }
  a1[1] = 0;
  a1[2] = 0;
  return result;
}

uint64_t *sub_19C2A297C(uint64_t *result, unint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = result;
  v4 = result[1];
  if (v4 > a2)
  {
    result[1] = a2;
    v4 = a2;
  }
  if (result[2] < a2)
  {
    result = (uint64_t *)sub_19C2A29D8(result, a2);
    v4 = v3[1];
  }
  if (v4 < a2)
    v3[1] = a2;
  return result;
}

uint64_t sub_19C2A29D8(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t i;

  if (a2 >= 2 * a1[2])
  {
    v4 = a2;
  }
  else
  {
    v3 = 1;
    do
    {
      v4 = v3;
      v3 *= 2;
    }
    while (v4 < a2);
  }
  v5 = operator new[]();
  result = *a1;
  v7 = a1[1];
  if (v7)
  {
    for (i = 0; i != v7; ++i)
      *(_BYTE *)(v5 + i) = *(_BYTE *)(result + i);
    *a1 = v5;
    a1[2] = v4;
LABEL_11:
    JUMPOUT(0x1A1AD3538);
  }
  *a1 = v5;
  a1[2] = v4;
  if (result)
    goto LABEL_11;
  return result;
}

void sub_19C2A2AEC(std::exception *a1)
{
  std::exception::~exception(a1);
  JUMPOUT(0x1A1AD355CLL);
}

const char *sub_19C2A2B10(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 8))
    return *(const char **)(a1 + 8);
  else
    return "";
}

uint64_t *sub_19C2A2B28(uint64_t *a1)
{
  sub_19C2A2B70(a1);
  if (*a1)
  {
    MEMORY[0x1A1AD3538](*a1, 0x1000C8077774924);
    *a1 = 0;
  }
  return a1;
}

uint64_t sub_19C2A2B70(uint64_t *a1)
{
  uint64_t result;

  sub_19C2A2BB8(a1, 0);
  result = *a1;
  if (*a1)
  {
    result = MEMORY[0x1A1AD3538](result, 0x1000C8077774924);
    *a1 = 0;
  }
  a1[1] = 0;
  a1[2] = 0;
  return result;
}

void sub_19C2A2BB8(uint64_t *a1, unint64_t a2)
{
  unint64_t v4;

  v4 = a1[1];
  if (v4 > a2)
  {
    a1[1] = a2;
    v4 = a2;
  }
  if (a1[2] < a2)
  {
    sub_19C2A2C24(a1, a2);
    v4 = a1[1];
  }
  if (a2 > v4)
  {
    bzero((void *)(*a1 + 4 * v4), 4 * (a2 - v4));
    a1[1] = a2;
  }
}

uint64_t sub_19C2A2C24(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t i;

  if (a2 >= 2 * a1[2])
  {
    v4 = a2;
  }
  else
  {
    v3 = 1;
    do
    {
      v4 = v3;
      v3 *= 2;
    }
    while (v4 < a2);
  }
  v5 = operator new[]();
  result = *a1;
  v7 = a1[1];
  if (v7)
  {
    for (i = 0; i != v7; ++i)
      *(_DWORD *)(v5 + 4 * i) = *(_DWORD *)(result + 4 * i);
    *a1 = v5;
    a1[2] = v4;
LABEL_11:
    JUMPOUT(0x1A1AD3538);
  }
  *a1 = v5;
  a1[2] = v4;
  if (result)
    goto LABEL_11;
  return result;
}

uint64_t sub_19C2A2D34(void (**a1)(unint64_t, uint64_t), unint64_t *a2, int **a3)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v11;
  int v12;
  uint64_t v13;
  char v14;
  int v15;
  int v16;

  sub_19C2A3AE4((uint64_t *)a3);
  if (*a2)
  {
    v6 = 0;
    do
    {
      v7 = a2[2];
      v8 = *(_QWORD *)(a2[1] + 8 * v6);
      if (v7)
      {
        v9 = *(_QWORD *)(v7 + 8 * v6);
      }
      else
      {
        while (*(unsigned __int8 *)(v8 + v7++))
          ;
        v9 = v7 - 1;
      }
      v11 = a2[3];
      if (v11)
        v12 = *(_DWORD *)(v11 + 4 * v6);
      else
        v12 = v6;
      sub_19C2A3BB4(a3, v8, v9, v12);
      ++v6;
      if (*a1)
        (*a1)(v6, *a2 + 1);
    }
    while (v6 < *a2);
  }
  sub_19C2A3F94((uint64_t)a3, 0);
  v13 = (uint64_t)*a3;
  v14 = *((_BYTE *)*a3 + 8);
  v15 = **a3;
  if (v14)
    v16 = (2 * *(unsigned __int8 *)(v13 + 9)) | (4 * v15);
  else
    v16 = 2 * v15;
  *a3[3] = v16 | *(unsigned __int8 *)(v13 + 10);
  *(_BYTE *)a3[6] = v14;
  sub_19C2A38F8((uint64_t *)a3);
  sub_19C2A3420((uint64_t *)a3 + 15);
  sub_19C2A3420((uint64_t *)a3 + 18);
  sub_19C2A3420((uint64_t *)a3 + 21);
  return sub_19C2A43E8((unsigned int **)a3 + 9);
}

uint64_t sub_19C2A2E48(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned int **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  int v16;
  int v17;
  unint64_t v18;
  int v19;
  int v20;
  int v21;
  unint64_t v22;
  char v23;
  int j;
  int *v25;
  _DWORD *v26;
  uint64_t v27;
  unsigned int v28;
  int *v29;
  int v30;
  uint64_t result;
  uint64_t v32;

  v4 = *(_QWORD *)(a2 + 32);
  v5 = 1;
  do
  {
    v6 = v5;
    v5 *= 2;
  }
  while (v6 < v4);
  v7 = (unsigned int **)(a1 + 8);
  if (*(_QWORD *)(a1 + 24) < v6)
    sub_19C2A2C24((uint64_t *)(a1 + 8), v6);
  v8 = operator new[]();
  v9 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v8;
  if (v9)
    MEMORY[0x1A1AD3538](v9, 0x1000C8052888210);
  v10 = *(_QWORD *)(a2 + 104);
  if (v10)
    bzero(*(void **)(a1 + 64), 4 * v10);
  v11 = operator new[]();
  for (i = 0; i != 49152; i += 12)
  {
    v13 = v11 + i;
    *(_WORD *)(v13 + 8) = 0;
    *(_QWORD *)v13 = 0;
  }
  v14 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v11;
  if (v14)
    MEMORY[0x1A1AD3538](v14, 0x1000C80CBA68D63);
  if (!*(_QWORD *)(a1 + 16))
    sub_19C2A46E0(a1);
  v15 = *(int **)(a1 + 32);
  v16 = v15[1];
  if (!*(_DWORD *)(a1 + 72))
  {
    *(_DWORD *)(a1 + 72) = v16;
    if (!v16)
      *(_DWORD *)(a1 + 72) = *(_QWORD *)(a1 + 16);
  }
  v17 = *v15;
  v15[3 * (*v15 & 0xFFF) + 1] = v16;
  v15[3 * (v15[1] & 0xFFF)] = v17;
  *((_WORD *)v15 + 4) = 257;
  **v7 = **v7 & 0x80000100 | 0x400;
  if (**(_DWORD **)(a2 + 24) >= 4u)
  {
    sub_19C2A457C(a1, (_QWORD *)a2, 0, 0);
    v15 = *(int **)(a1 + 32);
  }
  v18 = *(_QWORD *)(a1 + 16) >> 8;
  if (v18 <= 0x10)
    v19 = 0;
  else
    v19 = v18 - 16;
  v32 = *(_QWORD *)(a1 + 16) >> 8;
  if (v19 != (_DWORD)v18)
  {
    v20 = v19 << 8;
    do
    {
      v21 = 0;
      v22 = (v19 << 8);
      while (1)
      {
        v23 = v20 + v21;
        if (!BYTE1(v15[3 * ((v20 + v21) & 0xFFF) + 2]))
          break;
        if (++v21 == 256)
        {
          v23 = 0;
          break;
        }
      }
      for (j = 0; j != 256; ++j)
      {
        if (!LOBYTE(v15[3 * (v22 & 0xFFF) + 2]))
        {
          if (*(_QWORD *)(a1 + 16) <= v22)
          {
            sub_19C2A46E0(a1);
            v15 = *(int **)(a1 + 32);
          }
          v25 = &v15[3 * (v22 & 0xFFF)];
          v28 = v25[1];
          v26 = v25 + 1;
          v27 = v28;
          if (v22 == *(_DWORD *)(a1 + 72))
          {
            *(_DWORD *)(a1 + 72) = v27;
            if (v22 == v27)
              *(_DWORD *)(a1 + 72) = *(_QWORD *)(a1 + 16);
          }
          v29 = &v15[3 * (v22 & 0xFFF)];
          v30 = *v29;
          v15[3 * (v30 & 0xFFF) + 1] = v27;
          v15[3 * (*v26 & 0xFFF)] = v30;
          *((_BYTE *)v29 + 8) = 1;
          LOBYTE((*v7)[v22]) = v23 ^ (v20 + j);
        }
        ++v22;
      }
      ++v19;
      v20 += 256;
    }
    while (v19 != (_DWORD)v32);
  }
  if (v15)
  {
    MEMORY[0x1A1AD3538](v15, 0x1000C80CBA68D63);
    *(_QWORD *)(a1 + 32) = 0;
  }
  sub_19C2A2934((uint64_t *)(a1 + 40));
  result = *(_QWORD *)(a1 + 64);
  if (result)
  {
    result = MEMORY[0x1A1AD3538](result, 0x1000C8052888210);
    *(_QWORD *)(a1 + 64) = 0;
  }
  return result;
}

uint64_t sub_19C2A3164(uint64_t a1, unint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned int **v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  int v13;
  int v14;
  unint64_t v15;
  int v16;
  int v17;
  int v18;
  unint64_t v19;
  char v20;
  int j;
  int *v22;
  _DWORD *v23;
  uint64_t v24;
  unsigned int v25;
  int *v26;
  int v27;
  uint64_t v29;

  v4 = *a2;
  v5 = 1;
  do
  {
    v6 = v5;
    v5 *= 2;
  }
  while (v6 < v4);
  v7 = (unsigned int **)(a1 + 8);
  if (*(_QWORD *)(a1 + 24) < v6)
    sub_19C2A2C24((uint64_t *)(a1 + 8), v6);
  v8 = operator new[]();
  for (i = 0; i != 49152; i += 12)
  {
    v10 = v8 + i;
    *(_WORD *)(v10 + 8) = 0;
    *(_QWORD *)v10 = 0;
  }
  v11 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v8;
  if (v11)
    MEMORY[0x1A1AD3538](v11, 0x1000C80CBA68D63);
  if (!*(_QWORD *)(a1 + 16))
    sub_19C2A46E0(a1);
  v12 = *(int **)(a1 + 32);
  v13 = v12[1];
  if (!*(_DWORD *)(a1 + 72))
  {
    *(_DWORD *)(a1 + 72) = v13;
    if (!v13)
      *(_DWORD *)(a1 + 72) = *(_QWORD *)(a1 + 16);
  }
  v14 = *v12;
  v12[3 * (*v12 & 0xFFF) + 1] = v13;
  v12[3 * (v12[1] & 0xFFF)] = v14;
  *((_WORD *)v12 + 4) = 257;
  **v7 = **v7 & 0x80000100 | 0x400;
  if (*a2)
  {
    sub_19C2A4D0C(a1, a2, 0, *a2, 0, 0);
    v12 = *(int **)(a1 + 32);
  }
  v15 = *(_QWORD *)(a1 + 16) >> 8;
  if (v15 <= 0x10)
    v16 = 0;
  else
    v16 = v15 - 16;
  v29 = *(_QWORD *)(a1 + 16) >> 8;
  if (v16 != (_DWORD)v15)
  {
    v17 = v16 << 8;
    do
    {
      v18 = 0;
      v19 = (v16 << 8);
      while (1)
      {
        v20 = v17 + v18;
        if (!BYTE1(v12[3 * ((v17 + v18) & 0xFFF) + 2]))
          break;
        if (++v18 == 256)
        {
          v20 = 0;
          break;
        }
      }
      for (j = 0; j != 256; ++j)
      {
        if (!LOBYTE(v12[3 * (v19 & 0xFFF) + 2]))
        {
          if (*(_QWORD *)(a1 + 16) <= v19)
          {
            sub_19C2A46E0(a1);
            v12 = *(int **)(a1 + 32);
          }
          v22 = &v12[3 * (v19 & 0xFFF)];
          v25 = v22[1];
          v23 = v22 + 1;
          v24 = v25;
          if (v19 == *(_DWORD *)(a1 + 72))
          {
            *(_DWORD *)(a1 + 72) = v24;
            if (v19 == v24)
              *(_DWORD *)(a1 + 72) = *(_QWORD *)(a1 + 16);
          }
          v26 = &v12[3 * (v19 & 0xFFF)];
          v27 = *v26;
          v12[3 * (v27 & 0xFFF) + 1] = v24;
          v12[3 * (*v23 & 0xFFF)] = v27;
          *((_BYTE *)v26 + 8) = 1;
          LOBYTE((*v7)[v19]) = v20 ^ (v17 + j);
        }
        ++v19;
      }
      ++v16;
      v17 += 256;
    }
    while (v16 != (_DWORD)v29);
  }
  if (v12)
  {
    MEMORY[0x1A1AD3538](v12, 0x1000C80CBA68D63);
    *(_QWORD *)(a1 + 32) = 0;
  }
  return sub_19C2A2934((uint64_t *)(a1 + 40));
}

uint64_t *sub_19C2A33F8(uint64_t *a1)
{
  sub_19C2A3420(a1);
  return sub_19C2A35D4(a1);
}

uint64_t sub_19C2A3420(uint64_t *a1)
{
  uint64_t result;

  sub_19C2A3468(a1, 0);
  result = *a1;
  if (*a1)
  {
    result = MEMORY[0x1A1AD3538](result, 0x1000C8077774924);
    *a1 = 0;
  }
  a1[1] = 0;
  a1[2] = 0;
  return result;
}

uint64_t *sub_19C2A3468(uint64_t *result, unint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = result;
  v4 = result[1];
  if (v4 > a2)
  {
    result[1] = a2;
    v4 = a2;
  }
  if (result[2] < a2)
  {
    result = (uint64_t *)sub_19C2A34C4(result, a2);
    v4 = v3[1];
  }
  if (v4 < a2)
    v3[1] = a2;
  return result;
}

uint64_t sub_19C2A34C4(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t i;

  if (a2 >= 2 * a1[2])
  {
    v4 = a2;
  }
  else
  {
    v3 = 1;
    do
    {
      v4 = v3;
      v3 *= 2;
    }
    while (v4 < a2);
  }
  v5 = operator new[]();
  result = *a1;
  v7 = a1[1];
  if (v7)
  {
    for (i = 0; i != v7; ++i)
      *(_DWORD *)(v5 + 4 * i) = *(_DWORD *)(result + 4 * i);
    *a1 = v5;
    a1[2] = v4;
LABEL_11:
    JUMPOUT(0x1A1AD3538);
  }
  *a1 = v5;
  a1[2] = v4;
  if (result)
    goto LABEL_11;
  return result;
}

uint64_t *sub_19C2A35D4(uint64_t *a1)
{
  sub_19C2A3420(a1);
  if (*a1)
  {
    MEMORY[0x1A1AD3538](*a1, 0x1000C8077774924);
    *a1 = 0;
  }
  return a1;
}

uint64_t *sub_19C2A361C(uint64_t *a1)
{
  uint64_t v2;

  sub_19C2A3664(a1);
  v2 = a1[3];
  if (v2)
  {
    MEMORY[0x1A1AD3538](v2, 0x1000C8052888210);
    a1[3] = 0;
  }
  return sub_19C2A35D4(a1);
}

uint64_t sub_19C2A3664(uint64_t *a1)
{
  uint64_t result;

  sub_19C2A3420(a1);
  result = a1[3];
  if (result)
  {
    result = MEMORY[0x1A1AD3538](result, 0x1000C8052888210);
    a1[3] = 0;
  }
  return result;
}

uint64_t *sub_19C2A36A4(uint64_t *a1)
{
  sub_19C2A36EC(a1);
  if (*a1)
  {
    MEMORY[0x1A1AD3538](*a1, 0x1000C8077774924);
    *a1 = 0;
  }
  return a1;
}

uint64_t sub_19C2A36EC(uint64_t *a1)
{
  uint64_t result;

  sub_19C2A3734(a1, 0);
  result = *a1;
  if (*a1)
  {
    result = MEMORY[0x1A1AD3538](result, 0x1000C8077774924);
    *a1 = 0;
  }
  a1[1] = 0;
  a1[2] = 0;
  return result;
}

void sub_19C2A3734(uint64_t *a1, unint64_t a2)
{
  unint64_t v4;

  v4 = a1[1];
  if (v4 > a2)
  {
    a1[1] = a2;
    v4 = a2;
  }
  if (a1[2] < a2)
  {
    sub_19C2A37A0(a1, a2);
    v4 = a1[1];
  }
  if (a2 > v4)
  {
    bzero((void *)(*a1 + 4 * v4), 4 * (a2 - v4));
    a1[1] = a2;
  }
}

uint64_t sub_19C2A37A0(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t i;

  if (a2 >= 2 * a1[2])
  {
    v4 = a2;
  }
  else
  {
    v3 = 1;
    do
    {
      v4 = v3;
      v3 *= 2;
    }
    while (v4 < a2);
  }
  v5 = operator new[]();
  result = *a1;
  v7 = a1[1];
  if (v7)
  {
    for (i = 0; i != v7; ++i)
      *(_DWORD *)(v5 + 4 * i) = *(_DWORD *)(result + 4 * i);
    *a1 = v5;
    a1[2] = v4;
LABEL_11:
    JUMPOUT(0x1A1AD3538);
  }
  *a1 = v5;
  a1[2] = v4;
  if (result)
    goto LABEL_11;
  return result;
}

uint64_t *sub_19C2A38B0(uint64_t *a1)
{
  sub_19C2A38F8(a1);
  if (*a1)
  {
    MEMORY[0x1A1AD3538](*a1, 0x1000C8077774924);
    *a1 = 0;
  }
  return a1;
}

uint64_t sub_19C2A38F8(uint64_t *a1)
{
  uint64_t result;

  sub_19C2A3940(a1, 0);
  result = *a1;
  if (*a1)
  {
    result = MEMORY[0x1A1AD3538](result, 0x1000C8077774924);
    *a1 = 0;
  }
  a1[1] = 0;
  a1[2] = 0;
  return result;
}

uint64_t *sub_19C2A3940(uint64_t *result, unint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;

  v3 = result;
  v4 = result[1];
  if (v4 > a2)
  {
    result[1] = a2;
    v4 = a2;
  }
  if (result[2] < a2)
  {
    result = (uint64_t *)sub_19C2A39C0(result, a2);
    v4 = v3[1];
  }
  for (; v4 < a2; v4 = v3[1])
  {
    v3[1] = v4 + 1;
    v5 = *v3 + 12 * v4;
    *(_DWORD *)(v5 + 7) = 0;
    *(_QWORD *)v5 = 0;
  }
  return result;
}

uint64_t sub_19C2A39C0(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a2 >= 2 * a1[2])
  {
    v4 = a2;
  }
  else
  {
    v3 = 1;
    do
    {
      v4 = v3;
      v3 *= 2;
    }
    while (v4 < a2);
  }
  v5 = operator new[]();
  result = *a1;
  v7 = a1[1];
  if (v7)
  {
    v8 = 0;
    do
    {
      v9 = v5 + v8;
      v10 = *(_QWORD *)(result + v8);
      *(_DWORD *)(v9 + 8) = *(_DWORD *)(result + v8 + 8);
      *(_QWORD *)v9 = v10;
      v8 += 12;
      --v7;
    }
    while (v7);
    *a1 = v5;
    a1[2] = v4;
LABEL_11:
    JUMPOUT(0x1A1AD3538);
  }
  *a1 = v5;
  a1[2] = v4;
  if (result)
    goto LABEL_11;
  return result;
}

uint64_t *sub_19C2A3AE4(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v6;
  int v7;

  v7 = 0;
  sub_19C2A3DD8(a1 + 15, 0x400uLL, &v7);
  v2 = a1[22];
  if (v2)
  {
    v3 = *a1 + 12 * *(unsigned int *)(a1[21] + 4 * v2 - 4);
    *(_DWORD *)(v3 + 7) = 0;
    *(_QWORD *)v3 = 0;
    --a1[22];
  }
  else
  {
    sub_19C2A3E5C(a1);
  }
  sub_19C2A3EB0(a1 + 9);
  sub_19C2A3EFC(a1 + 3);
  v4 = a1[7];
  if (v4 == a1[8])
  {
    sub_19C2A29D8(a1 + 6, v4 + 1);
    v4 = a1[7];
  }
  a1[7] = v4 + 1;
  a1[24] = 1;
  *(_BYTE *)(*a1 + 8) = -1;
  v6 = 0;
  return sub_19C2A3F44(a1 + 18, &v6);
}

_QWORD *sub_19C2A3BB4(_QWORD *result, uint64_t a2, unint64_t a3, int a4)
{
  int v5;
  _QWORD *v7;
  unint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  char v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  int v20;
  unsigned int v21;
  _QWORD *exception;
  const char *v23;
  int v24;
  unsigned int v25;

  if (a4 < 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    v23 = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/darts_clone/darts.h:1106: exception: failed to"
          " insert key: negative value";
    goto LABEL_27;
  }
  if (!a3)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    v23 = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/darts_clone/darts.h:1108: exception: failed to"
          " insert key: zero-length key";
LABEL_27:
    *exception = &off_1E3D38880;
    exception[1] = v23;
    __cxa_throw(exception, (struct type_info *)&unk_1E3D32990, (void (*)(void *))std::exception::~exception);
  }
  v5 = a4;
  v7 = result;
  v8 = 0;
  v9 = 0;
  v10 = *result;
  while (1)
  {
    v11 = *(_DWORD *)(v10 + 12 * v9);
    if (!v11)
      goto LABEL_12;
    v12 = *(unsigned __int8 *)(a2 + v8);
    if (v8 < a3 && !*(_BYTE *)(a2 + v8))
    {
      exception = __cxa_allocate_exception(0x10uLL);
      v23 = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/darts_clone/darts.h:1122: exception: failed "
            "to insert key: invalid null character";
      goto LABEL_27;
    }
    v13 = *(unsigned __int8 *)(v10 + 12 * v11 + 8);
    if (v12 < v13)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      v23 = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/darts_clone/darts.h:1127: exception: failed "
            "to insert key: wrong key order";
      goto LABEL_27;
    }
    if (v12 > v13)
      break;
    ++v8;
    v9 = *(_DWORD *)(v10 + 12 * v9);
    if (v8 > a3)
      return result;
  }
  *(_BYTE *)(v10 + 12 * v11 + 10) = 1;
  result = (_QWORD *)sub_19C2A3F94((uint64_t)result, v11);
LABEL_12:
  if (v8 <= a3)
  {
    v24 = v5;
    do
    {
      if (v8 >= a3)
        v14 = 0;
      else
        v14 = *(_BYTE *)(a2 + v8);
      v25 = 0;
      v15 = v7[22];
      if (v15)
      {
        v16 = *(_DWORD *)(v7[21] + 4 * v15 - 4);
        v17 = *v7 + 12 * v16;
        *(_DWORD *)(v17 + 7) = 0;
        *(_QWORD *)v17 = 0;
        --v7[22];
      }
      else
      {
        v16 = *((_DWORD *)v7 + 2);
        sub_19C2A3E5C(v7);
      }
      v25 = v16;
      v18 = *v7;
      v19 = (int *)(*v7 + 12 * v9);
      v20 = *v19;
      if (!*v19)
        *(_BYTE *)(v18 + 12 * v16 + 9) = 1;
      *(_DWORD *)(v18 + 12 * v16 + 4) = v20;
      v21 = v25;
      *(_BYTE *)(v18 + 12 * v25 + 8) = v14;
      *v19 = v21;
      result = sub_19C2A3F44(v7 + 18, &v25);
      v9 = v25;
      ++v8;
    }
    while (v8 <= a3);
    v5 = v24;
  }
  *(_DWORD *)(*v7 + 12 * v9) = v5;
  return result;
}

uint64_t *sub_19C2A3DD8(uint64_t *result, unint64_t a2, _DWORD *a3)
{
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;

  v5 = result;
  v6 = result[1];
  if (v6 > a2)
  {
    result[1] = a2;
    v6 = a2;
  }
  if (result[2] < a2)
  {
    result = (uint64_t *)sub_19C2A34C4(result, a2);
    v6 = v5[1];
  }
  if (v6 < a2)
  {
    v7 = *v5;
    do
      *(_DWORD *)(v7 + 4 * v6++) = *a3;
    while (a2 != v6);
    v5[1] = a2;
  }
  return result;
}

uint64_t *sub_19C2A3E5C(uint64_t *result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = result;
  v2 = result[1];
  if (v2 == result[2])
  {
    result = (uint64_t *)sub_19C2A39C0(result, v2 + 1);
    v2 = v1[1];
  }
  v1[1] = v2 + 1;
  v3 = *v1 + 12 * v2;
  *(_DWORD *)(v3 + 7) = 0;
  *(_QWORD *)v3 = 0;
  return result;
}

uint64_t *sub_19C2A3EB0(uint64_t *result)
{
  uint64_t *v1;
  uint64_t v2;
  int v3;

  v1 = result;
  v2 = result[5];
  if ((v2 & 0x1F) == 0)
  {
    v3 = 0;
    result = sub_19C2A3F44(result, &v3);
    v2 = v1[5];
  }
  v1[5] = v2 + 1;
  return result;
}

uint64_t *sub_19C2A3EFC(uint64_t *result)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = result;
  v2 = result[1];
  if (v2 == result[2])
  {
    result = (uint64_t *)sub_19C2A37A0(result, v2 + 1);
    v2 = v1[1];
  }
  v1[1] = v2 + 1;
  *(_DWORD *)(*v1 + 4 * v2) = 0;
  return result;
}

uint64_t *sub_19C2A3F44(uint64_t *result, _DWORD *a2)
{
  uint64_t *v3;
  uint64_t v4;

  v3 = result;
  v4 = result[1];
  if (v4 == result[2])
  {
    result = (uint64_t *)sub_19C2A34C4(result, v4 + 1);
    v4 = v3[1];
  }
  v3[1] = v4 + 1;
  *(_DWORD *)(*v3 + 4 * v4) = *a2;
  return result;
}

uint64_t sub_19C2A3F94(uint64_t result, int a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t i;
  unsigned int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  BOOL v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t *v35;
  unsigned int v37;
  int v38;
  unsigned int v39;

  v2 = result;
  v3 = *(_QWORD *)(result + 152) - 1;
  v4 = *(_DWORD *)(*(_QWORD *)(result + 144) + 4 * v3);
  if (v4 != a2)
  {
    v35 = (uint64_t *)(result + 120);
    v5 = (_QWORD *)(result + 24);
    v6 = (_QWORD *)(result + 72);
    while (1)
    {
      *(_QWORD *)(v2 + 152) = v3;
      v7 = *(_QWORD *)(v2 + 128);
      if (*(_QWORD *)(v2 + 192) >= v7 - (v7 >> 2))
      {
        v8 = 2 * v7;
        sub_19C2A3420(v35);
        v38 = 0;
        sub_19C2A3DD8(v35, v8, &v38);
        v9 = *(_QWORD *)(v2 + 32);
        if (v9 >= 2)
        {
          v10 = *(_QWORD *)(v2 + 48);
          for (i = 1; i != v9; ++i)
          {
            if (!*(_BYTE *)(v10 + i) || (*(_DWORD *)(*v5 + 4 * i) & 2) != 0)
            {
              v12 = 0;
              if ((_DWORD)i)
              {
                v13 = i;
                do
                {
                  v14 = *(_DWORD *)(*v5 + 4 * v13);
                  v15 = (v14 ^ ~(*(unsigned __int8 *)(v10 + v13) << 24)) + (v14 << 15);
                  v16 = 2057 * ((5 * (v15 ^ (v15 >> 12))) ^ ((5 * (v15 ^ (v15 >> 12))) >> 4));
                  v12 ^= HIWORD(v16) ^ v16;
                  v17 = __CFADD__(v13++, 1);
                }
                while (!v17 && (v14 & 1) != 0);
              }
              v18 = *(_QWORD *)(v2 + 120);
              do
              {
                v19 = (unint64_t)v12 % *(_QWORD *)(v2 + 128);
                v12 = v19 + 1;
              }
              while (*(_DWORD *)(v18 + 4 * v19));
              *(_DWORD *)(v18 + 4 * v19) = i;
            }
          }
        }
      }
      v20 = 0;
      if (v4)
      {
        v21 = v4;
        do
        {
          ++v20;
          v21 = *(_DWORD *)(*(_QWORD *)v2 + 12 * v21 + 4);
        }
        while (v21);
      }
      v37 = 0;
      result = sub_19C2A427C((uint64_t *)v2, v4, &v37);
      if ((_DWORD)result)
      {
        v22 = result;
        *(_DWORD *)(*v6 + 4 * (result >> 5)) |= 1 << result;
        if (v4)
          goto LABEL_22;
        goto LABEL_23;
      }
      if (!v20)
        break;
      do
      {
        sub_19C2A3EB0((uint64_t *)(v2 + 72));
        result = (uint64_t)sub_19C2A3EFC((uint64_t *)(v2 + 24));
        v25 = *(_QWORD *)(v2 + 56);
        if (v25 == *(_QWORD *)(v2 + 64))
        {
          result = sub_19C2A29D8((uint64_t *)(v2 + 48), v25 + 1);
          v25 = *(_QWORD *)(v2 + 56);
        }
        *(_QWORD *)(v2 + 56) = v25 + 1;
        --v20;
      }
      while (v20);
      v26 = *(_DWORD *)(v2 + 112) - 1;
      if (v4)
        goto LABEL_32;
LABEL_37:
      v22 = v26 + 1;
      *(_DWORD *)(*(_QWORD *)(v2 + 120) + 4 * v37) = v26 + 1;
      ++*(_QWORD *)(v2 + 192);
      if (v4)
      {
        do
        {
LABEL_22:
          v23 = *(_DWORD *)(*(_QWORD *)v2 + 12 * v4 + 4);
          v39 = v4;
          result = (uint64_t)sub_19C2A3F44((uint64_t *)(v2 + 168), &v39);
          v4 = v23;
        }
        while (v23);
      }
LABEL_23:
      v24 = *(_QWORD *)(v2 + 144);
      v3 = *(_QWORD *)(v2 + 152) - 1;
      *(_DWORD *)(*(_QWORD *)v2 + 12 * *(unsigned int *)(v24 + 4 * v3)) = v22;
      v4 = *(_DWORD *)(v24 + 4 * v3);
      if (v4 == a2)
        goto LABEL_2;
    }
    v26 = 0;
    if (!v4)
      goto LABEL_37;
LABEL_32:
    v27 = *(_QWORD *)v2;
    v28 = v4;
    do
    {
      v29 = v28;
      v30 = v27 + 12 * v28;
      v31 = *(unsigned __int8 *)(v30 + 8);
      v32 = *(_DWORD *)v30;
      if (v31)
        v33 = (2 * *(unsigned __int8 *)(v27 + 12 * v29 + 9)) | (4 * v32);
      else
        v33 = 2 * v32;
      v34 = 3 * v29;
      *(_DWORD *)(*(_QWORD *)(v2 + 24) + 4 * v26) = v33 | *(unsigned __int8 *)(v27 + 4 * v34 + 10);
      *(_BYTE *)(*(_QWORD *)(v2 + 48) + v26--) = v31;
      v27 = *(_QWORD *)v2;
      v28 = *(_DWORD *)(*(_QWORD *)v2 + 4 * v34 + 4);
    }
    while (v28);
    goto LABEL_37;
  }
LABEL_2:
  *(_QWORD *)(v2 + 152) = v3;
  return result;
}

uint64_t sub_19C2A427C(uint64_t *a1, unsigned int a2, _DWORD *a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  int *v24;
  int v25;
  int v26;
  int v27;

  v3 = a2;
  if (a2)
  {
    LODWORD(v4) = 0;
    v5 = *a1;
    v6 = a2;
    do
    {
      v7 = (int *)(v5 + 12 * v6);
      v8 = *((unsigned __int8 *)v7 + 8);
      v9 = *v7;
      if (v8)
        v10 = (2 * *(unsigned __int8 *)(v5 + 12 * v6 + 9)) | (4 * v9);
      else
        v10 = 2 * v9;
      v11 = v5 + 12 * v6;
      v12 = ((v10 | *(unsigned __int8 *)(v11 + 10)) ^ ~(v8 << 24)) + ((v10 | *(unsigned __int8 *)(v11 + 10)) << 15);
      v13 = 2057 * ((5 * (v12 ^ (v12 >> 12))) ^ ((5 * (v12 ^ (v12 >> 12))) >> 4));
      v4 = v4 ^ HIWORD(v13) ^ v13;
      v6 = *(unsigned int *)(v11 + 4);
    }
    while ((_DWORD)v6);
  }
  else
  {
    v4 = 0;
  }
  v15 = a1[15];
  v14 = a1[16];
  v16 = v4 % v14;
  *a3 = v4 % v14;
  v17 = *(unsigned int *)(v15 + 4 * (v4 % v14));
  if ((_DWORD)v17)
  {
    v18 = *a1;
    v19 = (unsigned int *)(*a1 + 12 * a2 + 4);
    v20 = a1[3];
    do
    {
      v21 = *v19;
      v22 = v17;
      if ((_DWORD)v21)
      {
        v22 = v17;
        while ((*(_DWORD *)(v20 + 4 * v22) & 1) != 0)
        {
          ++v22;
          LODWORD(v21) = *(_DWORD *)(v18 + 12 * v21 + 4);
          if (!(_DWORD)v21)
            goto LABEL_15;
        }
      }
      else
      {
LABEL_15:
        if ((*(_DWORD *)(v20 + 4 * v22) & 1) == 0)
        {
          if (!v3)
            return v17;
          v23 = v3;
          while (1)
          {
            v24 = (int *)(v18 + 12 * v23);
            v25 = *((unsigned __int8 *)v24 + 8);
            v26 = *v24;
            v27 = v25 ? (2 * *(unsigned __int8 *)(v18 + 12 * v23 + 9)) | (4 * v26) : 2 * v26;
            if ((v27 | *(unsigned __int8 *)(v18 + 12 * v23 + 10)) != *(_DWORD *)(v20 + 4 * v22)
              || v25 != *(unsigned __int8 *)(a1[6] + v22))
            {
              break;
            }
            v23 = *(unsigned int *)(v18 + 12 * v23 + 4);
            --v22;
            if (!(_DWORD)v23)
              return v17;
          }
        }
      }
      v16 = (v16 + 1) % v14;
      *a3 = v16;
      v17 = *(unsigned int *)(v15 + 4 * v16);
    }
    while ((_DWORD)v17);
  }
  return v17;
}

uint64_t sub_19C2A43E8(unsigned int **a1)
{
  uint64_t v2;
  uint64_t result;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = operator new[]();
  result = (uint64_t)a1[3];
  a1[3] = (unsigned int *)v2;
  if (result)
    result = MEMORY[0x1A1AD3538](result, 0x1000C8052888210);
  a1[4] = 0;
  v4 = a1[1];
  if (v4)
  {
    v5 = 0;
    v6 = a1[3];
    v7 = *a1;
    do
    {
      *v6++ = v5;
      v8 = *v7++;
      v9 = ((((((v8 >> 1) & 0x55555555) + (v8 & 0x55555555)) >> 2) & 0x33333333)
          + ((((v8 >> 1) & 0x55555555) + (v8 & 0x55555555)) & 0x33333333)
          + (((((((v8 >> 1) & 0x55555555) + (v8 & 0x55555555)) >> 2) & 0x33333333)
            + ((((v8 >> 1) & 0x55555555) + (v8 & 0x55555555)) & 0x33333333)) >> 4)) & 0xF0F0F0F;
      v5 = (unsigned int *)((char *)v5 + (((_BYTE)v9 + BYTE1(v9) + ((v9 + (v9 >> 8)) >> 16)) & 0x3F));
      v4 = (unsigned int *)((char *)v4 - 1);
    }
    while (v4);
    a1[4] = v5;
  }
  return result;
}

unsigned int *sub_19C2A4510(unsigned int *result, unsigned int a2)
{
  int v2;
  _QWORD *exception;

  if (a2 >> 29)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *exception = &off_1E3D38880;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/darts_clone/darts.h:1339: exception: "
                   "failed to modify unit: too large offset";
    __cxa_throw(exception, (struct type_info *)&unk_1E3D32990, (void (*)(void *))std::exception::~exception);
  }
  v2 = (4 * a2) | 0x200;
  if (a2 < 0x200000)
    v2 = a2 << 10;
  *result = *result & 0x800001FF | v2;
  return result;
}

unsigned int *sub_19C2A457C(uint64_t a1, _QWORD *a2, unsigned int a3, unsigned int a4)
{
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  int v13;
  unsigned int v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *result;
  int v19;
  int v20;

  v8 = a2 + 9;
  v9 = *(unsigned int *)(a2[3] + 4 * a3);
  v10 = v9 >> 2;
  v11 = v9 >> 7;
  v12 = 1 << (v9 >> 2);
  if ((v12 & *(_DWORD *)(a2[9] + 4 * (v9 >> 7))) != 0
    && (v13 = *(_DWORD *)(*(_QWORD *)(a1 + 64) + 4 * (sub_19C2A4B9C(a2 + 9, v10) - 1))) != 0
    && ((v14 = v13 ^ a4, ((v13 ^ a4) & 0x1FE00000) != 0) ? (v15 = (v13 ^ a4) == 0) : (v15 = 1), v15))
  {
    if (*(_BYTE *)(a2[6] + v10))
    {
      v16 = *(_QWORD *)(a1 + 8);
      v17 = a4;
    }
    else
    {
      v17 = a4;
      v16 = *(_QWORD *)(a1 + 8);
      *(_DWORD *)(v16 + 4 * a4) |= 0x100u;
    }
    return sub_19C2A4510((unsigned int *)(v16 + 4 * v17), v14);
  }
  else
  {
    result = (unsigned int *)sub_19C2A48F0(a1, (uint64_t)a2, a3, a4);
    v19 = (int)result;
    if ((*(_DWORD *)(a2[9] + 4 * v11) & v12) != 0)
    {
      result = (unsigned int *)sub_19C2A4B9C(v8, v10);
      *(_DWORD *)(*(_QWORD *)(a1 + 64) + 4 * ((_DWORD)result - 1)) = v19;
    }
    do
    {
      if (*(_BYTE *)(a2[6] + v10))
        result = (unsigned int *)sub_19C2A457C(a1, a2, v10, v19 ^ *(unsigned __int8 *)(a2[6] + v10));
      if ((_DWORD)v10 == -1)
        break;
      v20 = *(_DWORD *)(a2[3] + 4 * v10);
      LODWORD(v10) = v10 + 1;
    }
    while ((v20 & 1) != 0);
  }
  return result;
}

void sub_19C2A46E0(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  unsigned int v5;
  int v6;
  unint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int i;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;

  v2 = (uint64_t *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  v4 = (v3 + 256);
  v5 = (v3 >> 8) - 16;
  if (v5 >= 0xFFFFFFEF)
  {
    sub_19C2A2BB8((uint64_t *)(a1 + 8), (v3 + 256));
  }
  else
  {
    v6 = 0;
    v7 = v5 << 8;
    v8 = *(_QWORD *)(a1 + 32);
    while (1)
    {
      v9 = v7 + v6;
      if (!*(_BYTE *)(v8 + 12 * (((_DWORD)v7 + v6) & 0xFFF) + 9))
        break;
      if (++v6 == 256)
      {
        v9 = 0;
        break;
      }
    }
    v10 = 0;
    v11 = 3072 * ((v3 >> 8) & 0xF);
    do
    {
      if (!*(_BYTE *)(v8 + v11 + v10 + 8))
      {
        if (*(_QWORD *)(a1 + 16) <= v7)
        {
          sub_19C2A46E0(a1);
          v8 = *(_QWORD *)(a1 + 32);
        }
        v12 = (int *)(v8 + v11 + v10);
        v13 = v12[1];
        if (v7 == *(_DWORD *)(a1 + 72))
        {
          *(_DWORD *)(a1 + 72) = v13;
          if (v7 == v13)
            *(_DWORD *)(a1 + 72) = *(_QWORD *)(a1 + 16);
        }
        v14 = *v12;
        *(_DWORD *)(v8 + 12 * (*v12 & 0xFFF) + 4) = v13;
        *(_DWORD *)(v8 + 12 * (v12[1] & 0xFFF)) = v14;
        *((_BYTE *)v12 + 8) = 1;
        *(_BYTE *)(*v2 + 4 * v7) = v9 ^ v7;
      }
      ++v7;
      v10 += 12;
    }
    while ((_DWORD)v10 != 3072);
    sub_19C2A2BB8(v2, (v3 + 256));
    v15 = v3;
    if (v3 < (unint64_t)v4)
    {
      v16 = *(_QWORD *)(a1 + 32);
      do
        *(_WORD *)(v16 + 12 * (v15++ & 0xFFF) + 8) = 0;
      while (v4 != v15);
    }
  }
  v17 = *(_QWORD *)(a1 + 32);
  if ((int)v3 + 1 < v4)
  {
    for (i = 0; i != 255; ++i)
    {
      v19 = v3 + i;
      *(_DWORD *)(v17 + 12 * (v19 & 0xFFF) + 4) = v19 + 1;
      *(_DWORD *)(v17 + 12 * ((v19 + 1) & 0xFFF)) = v19;
    }
  }
  v20 = 12 * (v3 & 0xFFF);
  *(_DWORD *)(v17 + v20) = v3 + 255;
  v21 = *(_DWORD *)(a1 + 72);
  v22 = 12 * (v21 & 0xFFF);
  *(_DWORD *)(v17 + v20) = *(_DWORD *)(v17 + v22);
  LOWORD(v20) = *(_DWORD *)(v17 + v22);
  *(_DWORD *)(v17 + 12 * (((_DWORD)v3 + 255) & 0xFFF) + 4) = v21;
  *(_DWORD *)(v17 + 12 * (v20 & 0xFFF) + 4) = v3;
  *(_DWORD *)(v17 + v22) = v3 + 255;
}

uint64_t sub_19C2A48F0(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4)
{
  uint64_t *v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  _BOOL4 v13;
  unint64_t v14;
  unint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v24;
  unsigned int v25;
  unint64_t v26;
  unsigned int v27;
  uint64_t v28;
  int v29;
  int *v30;
  int v31;
  uint64_t v32;
  unsigned int v33;
  char v35;

  v8 = (uint64_t *)(a1 + 40);
  sub_19C2A297C((uint64_t *)(a1 + 40), 0);
  v9 = *(_DWORD *)(*(_QWORD *)(a2 + 24) + 4 * a3);
  if (v9 >= 4)
  {
    v10 = v9 >> 2;
    do
    {
      v35 = *(_BYTE *)(*(_QWORD *)(a2 + 48) + v10);
      sub_19C2A4C00(v8, &v35);
      v11 = *(_DWORD *)(*(_QWORD *)(a2 + 24) + 4 * v10);
      v13 = __CFADD__(v10++, 1);
    }
    while ((v11 & 1) != 0 && !v13);
  }
  v14 = *(unsigned int *)(a1 + 72);
  v15 = *(_QWORD *)(a1 + 16);
  if (v15 <= v14)
  {
LABEL_20:
    v19 = a4 | v15;
  }
  else
  {
    v17 = *(_QWORD *)(a1 + 32);
    v16 = *(unsigned __int8 **)(a1 + 40);
    v18 = *(_DWORD *)(a1 + 72);
    while (1)
    {
      v19 = v18 ^ *v16;
      v20 = ((unsigned __int16)v18 ^ *v16) & 0xFFF;
      if (!*(_BYTE *)(v17 + 12 * (((unsigned __int16)v18 ^ *v16) & 0xFFF) + 9)
        && (!((v18 ^ *v16) ^ a4) || ((v19 ^ a4) & 0x1FE00000) == 0))
      {
        v21 = *(_QWORD *)(a1 + 48);
        if (v21 < 2)
          goto LABEL_21;
        if (!*(_BYTE *)(v17 + 12 * (v20 ^ v16[1]) + 8))
          break;
      }
LABEL_19:
      v18 = *(_DWORD *)(v17 + 12 * (v18 & 0xFFF) + 4);
      if (v18 == (_DWORD)v14)
        goto LABEL_20;
    }
    v22 = 2;
    while (v21 != v22)
    {
      if (*(unsigned __int8 *)(v17 + 12 * (v20 ^ v16[v22++]) + 8))
      {
        if (v22 - 1 >= v21)
          break;
        goto LABEL_19;
      }
    }
  }
LABEL_21:
  sub_19C2A4510((unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * a4), v19 ^ a4);
  if (*(_QWORD *)(a1 + 48))
  {
    v24 = 0;
    v25 = *(_DWORD *)(*(_QWORD *)(a2 + 24) + 4 * a3) >> 2;
    do
    {
      v26 = v19 ^ *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + v24);
      if (*(_QWORD *)(a1 + 16) <= v26)
        sub_19C2A46E0(a1);
      if (*(_DWORD *)(a1 + 72) == (_DWORD)v26)
      {
        v27 = v26 & 0xFFF;
        v28 = *(_QWORD *)(a1 + 32);
        v29 = *(_DWORD *)(v28 + 12 * (v26 & 0xFFF) + 4);
        *(_DWORD *)(a1 + 72) = v29;
        if (v29 == (_DWORD)v26)
        {
          *(_DWORD *)(a1 + 72) = *(_QWORD *)(a1 + 16);
          v29 = v26;
        }
      }
      else
      {
        v28 = *(_QWORD *)(a1 + 32);
        v27 = v26 & 0xFFF;
        v29 = *(_DWORD *)(v28 + 12 * (v26 & 0xFFF) + 4);
      }
      v30 = (int *)(v28 + 12 * v27);
      v31 = *v30;
      *(_DWORD *)(v28 + 12 * (*v30 & 0xFFF) + 4) = v29;
      *(_DWORD *)(v28 + 12 * (v30[1] & 0xFFF)) = v31;
      *((_BYTE *)v30 + 8) = 1;
      v32 = *(_QWORD *)(a1 + 8);
      if (*(_BYTE *)(*(_QWORD *)(a2 + 48) + v25))
      {
        *(_BYTE *)(v32 + 4 * v26) = *(_BYTE *)(*v8 + v24);
        v33 = *(_DWORD *)(*(_QWORD *)(a2 + 24) + 4 * v25);
      }
      else
      {
        *(_DWORD *)(v32 + 4 * a4) |= 0x100u;
        v33 = *(_DWORD *)(*(_QWORD *)(a2 + 24) + 4 * v25);
        *(_DWORD *)(v32 + 4 * v26) = (v33 >> 1) | 0x80000000;
      }
      v25 = ((int)(v33 << 31) >> 31) & (v25 + 1);
      ++v24;
    }
    while (v24 < *(_QWORD *)(a1 + 48));
  }
  else
  {
    v28 = *(_QWORD *)(a1 + 32);
  }
  *(_BYTE *)(v28 + 12 * (v19 & 0xFFF) + 9) = 1;
  return v19;
}

uint64_t sub_19C2A4B9C(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  int v3;

  v2 = (a2 >> 3) & 0x1FFFFFFFFFFFFFFCLL;
  v3 = *(_DWORD *)(a1[3] + v2);
  LODWORD(v2) = *(_DWORD *)(*a1 + v2) & (0xFFFFFFFF >> ~(_BYTE)a2);
  LODWORD(v2) = ((((unint64_t)(((v2 >> 1) & 0x55555555) + (v2 & 0x55555555)) >> 2) & 0x33333333)
               + ((((v2 >> 1) & 0x55555555) + (v2 & 0x55555555)) & 0x33333333)
               + (((((unint64_t)(((v2 >> 1) & 0x55555555) + (v2 & 0x55555555)) >> 2) & 0x33333333)
                 + ((((v2 >> 1) & 0x55555555) + (v2 & 0x55555555)) & 0x33333333)) >> 4)) & 0xF0F0F0F;
  return (((_BYTE)v2 + BYTE1(v2) + ((v2 + (v2 >> 8)) >> 16)) & 0x3Fu) + v3;
}

uint64_t *sub_19C2A4C00(uint64_t *result, _BYTE *a2)
{
  uint64_t *v3;
  uint64_t v4;

  v3 = result;
  v4 = result[1];
  if (v4 == result[2])
  {
    result = (uint64_t *)sub_19C2A29D8(result, v4 + 1);
    v4 = v3[1];
  }
  v3[1] = v4 + 1;
  *(_BYTE *)(*v3 + v4) = *a2;
  return result;
}

uint64_t *sub_19C2A4C50(uint64_t *a1)
{
  sub_19C2A38F8(a1);
  sub_19C2A36EC(a1 + 3);
  sub_19C2A2934(a1 + 6);
  sub_19C2A3664(a1 + 9);
  sub_19C2A3420(a1 + 15);
  sub_19C2A3420(a1 + 18);
  sub_19C2A3420(a1 + 21);
  a1[24] = 0;
  sub_19C2A33F8(a1 + 21);
  sub_19C2A33F8(a1 + 18);
  sub_19C2A35D4(a1 + 15);
  sub_19C2A361C(a1 + 9);
  sub_19C2A28EC(a1 + 6);
  sub_19C2A36A4(a1 + 3);
  return sub_19C2A38B0(a1);
}

uint64_t sub_19C2A4D0C(uint64_t a1, _QWORD *a2, unint64_t a3, unint64_t a4, unint64_t a5, unsigned int a6)
{
  uint64_t result;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unint64_t v16;
  int v17;

  while (1)
  {
    result = sub_19C2A4E70(a1, a2, a3, a4, a5, a6);
    v12 = result;
    if (a3 < a4)
    {
      v13 = a2[2];
      while (v13 && *(_QWORD *)(v13 + 8 * a3) <= a5 || !*(_BYTE *)(*(_QWORD *)(a2[1] + 8 * a3) + a5))
      {
        if (a4 == ++a3)
          return result;
      }
    }
    if (a3 == a4)
      break;
    v14 = a2[2];
    if (v14 && *(_QWORD *)(v14 + 8 * a3) <= a5)
      v15 = 0;
    else
      v15 = *(unsigned __int8 *)(*(_QWORD *)(a2[1] + 8 * a3) + a5);
    v16 = a3 + 1;
    if (a3 + 1 < a4)
    {
      do
      {
        if (v14 && *(_QWORD *)(v14 + 8 * v16) <= a5)
          v17 = 0;
        else
          v17 = *(unsigned __int8 *)(*(_QWORD *)(a2[1] + 8 * v16) + a5);
        if (v17 != v15)
        {
          sub_19C2A4D0C(a1, a2, a3, v16, a5 + 1, v12 ^ v15);
          v14 = a2[2];
          if (v14 && *(_QWORD *)(v14 + 8 * v16) <= a5)
            v15 = 0;
          else
            v15 = *(unsigned __int8 *)(*(_QWORD *)(a2[1] + 8 * v16) + a5);
          a3 = v16;
        }
        ++v16;
      }
      while (a4 != v16);
    }
    a6 = v12 ^ v15;
    ++a5;
  }
  return result;
}

uint64_t sub_19C2A4E70(uint64_t a1, _QWORD *a2, unint64_t a3, unint64_t a4, unint64_t a5, unsigned int a6)
{
  uint64_t *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unsigned __int8 *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unint64_t v31;
  unsigned int v32;
  uint64_t v33;
  int v34;
  int *v35;
  int v36;
  uint64_t v37;
  _QWORD *exception;
  const char *v40;
  unsigned __int8 v41;

  v12 = (uint64_t *)(a1 + 40);
  sub_19C2A297C((uint64_t *)(a1 + 40), 0);
  v13 = -1;
  if (a3 < a4)
  {
    do
    {
      v41 = 0;
      v14 = a2[2];
      if (v14)
      {
        if (*(_QWORD *)(v14 + 8 * a3) > a5)
        {
          v41 = *(_BYTE *)(*(_QWORD *)(a2[1] + 8 * a3) + a5);
          if (!v41)
          {
            exception = __cxa_allocate_exception(0x10uLL);
            v40 = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/darts_clone/darts.h:1675: exception: f"
                  "ailed to build double-array: invalid null character";
            goto LABEL_52;
          }
          goto LABEL_17;
        }
      }
      else
      {
        v41 = *(_BYTE *)(*(_QWORD *)(a2[1] + 8 * a3) + a5);
        if (v41)
          goto LABEL_17;
      }
      v15 = a2[3];
      if (v15)
      {
        if ((*(_DWORD *)(v15 + 4 * a3) & 0x80000000) != 0)
          goto LABEL_51;
      }
      else if ((a3 & 0x80000000) != 0)
      {
LABEL_51:
        exception = __cxa_allocate_exception(0x10uLL);
        v40 = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/darts_clone/darts.h:1677: exception: faile"
              "d to build double-array: negative value";
LABEL_52:
        *exception = &off_1E3D38880;
        exception[1] = v40;
        __cxa_throw(exception, (struct type_info *)&unk_1E3D32990, (void (*)(void *))std::exception::~exception);
      }
      if (v13 == -1)
      {
        if (v15)
          v13 = *(_DWORD *)(v15 + 4 * a3);
        else
          v13 = a3;
      }
      if (*(_QWORD *)a1)
        (*(void (**)(unint64_t, uint64_t))a1)(a3 + 1, *a2 + 1);
LABEL_17:
      v16 = *(_QWORD *)(a1 + 48);
      if (!v16)
        goto LABEL_21;
      v17 = *(unsigned __int8 *)(v16 + *v12 - 1);
      if (v41 != v17)
      {
        if (v41 < v17)
        {
          exception = __cxa_allocate_exception(0x10uLL);
          v40 = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/darts_clone/darts.h:1692: exception: fai"
                "led to build double-array: wrong key order";
          goto LABEL_52;
        }
LABEL_21:
        sub_19C2A4C00(v12, &v41);
      }
      ++a3;
    }
    while (a4 != a3);
  }
  v18 = *(unsigned int *)(a1 + 72);
  v19 = *(_QWORD *)(a1 + 16);
  if (v19 <= v18)
  {
LABEL_35:
    v23 = a6 | v19;
  }
  else
  {
    v21 = *(_QWORD *)(a1 + 32);
    v20 = *(unsigned __int8 **)(a1 + 40);
    v22 = *(_DWORD *)(a1 + 72);
    while (1)
    {
      v23 = v22 ^ *v20;
      v24 = ((unsigned __int16)v22 ^ *v20) & 0xFFF;
      if (!*(_BYTE *)(v21 + 12 * (((unsigned __int16)v22 ^ *v20) & 0xFFF) + 9)
        && (!((v22 ^ *v20) ^ a6) || ((v23 ^ a6) & 0x1FE00000) == 0))
      {
        v25 = *(_QWORD *)(a1 + 48);
        if (v25 < 2)
          goto LABEL_36;
        if (!*(_BYTE *)(v21 + 12 * (v24 ^ v20[1]) + 8))
          break;
      }
LABEL_34:
      v22 = *(_DWORD *)(v21 + 12 * (v22 & 0xFFF) + 4);
      if (v22 == (_DWORD)v18)
        goto LABEL_35;
    }
    v26 = 2;
    while (v25 != v26)
    {
      if (*(unsigned __int8 *)(v21 + 12 * (v24 ^ v20[v26++]) + 8))
      {
        if (v26 - 1 >= v25)
          break;
        goto LABEL_34;
      }
    }
  }
LABEL_36:
  sub_19C2A4510((unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * a6), v23 ^ a6);
  if (*(_QWORD *)(a1 + 48))
  {
    v28 = 0;
    v29 = v13 | 0x80000000;
    v30 = *v12;
    do
    {
      v31 = v23 ^ *(unsigned __int8 *)(v30 + v28);
      if (*(_QWORD *)(a1 + 16) <= v31)
        sub_19C2A46E0(a1);
      if (*(_DWORD *)(a1 + 72) == (_DWORD)v31)
      {
        v32 = v31 & 0xFFF;
        v33 = *(_QWORD *)(a1 + 32);
        v34 = *(_DWORD *)(v33 + 12 * (v31 & 0xFFF) + 4);
        *(_DWORD *)(a1 + 72) = v34;
        if (v34 == (_DWORD)v31)
        {
          *(_DWORD *)(a1 + 72) = *(_QWORD *)(a1 + 16);
          v34 = v31;
        }
      }
      else
      {
        v33 = *(_QWORD *)(a1 + 32);
        v32 = v31 & 0xFFF;
        v34 = *(_DWORD *)(v33 + 12 * (v31 & 0xFFF) + 4);
      }
      v35 = (int *)(v33 + 12 * v32);
      v36 = *v35;
      *(_DWORD *)(v33 + 12 * (*v35 & 0xFFF) + 4) = v34;
      *(_DWORD *)(v33 + 12 * (v35[1] & 0xFFF)) = v36;
      *((_BYTE *)v35 + 8) = 1;
      v30 = *(_QWORD *)(a1 + 40);
      v37 = *(_QWORD *)(a1 + 8);
      if (*(_BYTE *)(v30 + v28))
      {
        *(_BYTE *)(v37 + 4 * v31) = *(_BYTE *)(v30 + v28);
      }
      else
      {
        *(_DWORD *)(v37 + 4 * a6) |= 0x100u;
        *(_DWORD *)(v37 + 4 * v31) = v29;
      }
      ++v28;
    }
    while (v28 < *(_QWORD *)(a1 + 48));
  }
  else
  {
    v33 = *(_QWORD *)(a1 + 32);
  }
  *(_BYTE *)(v33 + 12 * (v23 & 0xFFF) + 9) = 1;
  return v23;
}

uint64_t sub_19C2A51DC(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)(a1 + 8);
  sub_19C2A2B70((uint64_t *)(a1 + 8));
  v3 = *(_QWORD *)(a1 + 32);
  if (v3)
  {
    MEMORY[0x1A1AD3538](v3, 0x1000C80CBA68D63);
    *(_QWORD *)(a1 + 32) = 0;
  }
  sub_19C2A2934((uint64_t *)(a1 + 40));
  v4 = *(_QWORD *)(a1 + 64);
  if (v4)
  {
    MEMORY[0x1A1AD3538](v4, 0x1000C8052888210);
    *(_QWORD *)(a1 + 64) = 0;
  }
  *(_DWORD *)(a1 + 72) = 0;
  sub_19C2A28EC((uint64_t *)(a1 + 40));
  v5 = *(_QWORD *)(a1 + 32);
  if (v5)
  {
    MEMORY[0x1A1AD3538](v5, 0x1000C80CBA68D63);
    *(_QWORD *)(a1 + 32) = 0;
  }
  sub_19C2A2B28(v2);
  return a1;
}

_QWORD *sub_19C2A5294(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_19C2A5308(a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 16 * a2);
    a1[1] = &v4[16 * a2];
  }
  return a1;
}

void sub_19C2A52EC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_19C2A5308(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 60)
    sub_19C2A18E8();
  result = (char *)sub_19C2A26A4((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

uint64_t sub_19C2A5348(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  unint64_t v6;

  *(_QWORD *)a1 = &off_1E3D33C80;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = a2 + 16;
  *(_QWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a3 + 245);
  sub_19C2CD3C0((_QWORD *)(a1 + 56));
  v5 = *(_QWORD *)(a2 + 64) & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v5 + 23) < 0)
  {
    v5 = *(_QWORD *)v5;
    v6 = *(_QWORD *)((*(_QWORD *)(a2 + 64) & 0xFFFFFFFFFFFFFFFELL) + 8);
  }
  else
  {
    v6 = *(unsigned __int8 *)(v5 + 23);
  }
  sub_19C2A5400((uint64_t *)a1, (unsigned int *)v5, v6);
  return a1;
}

void sub_19C2A53CC(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;

  sub_19C2CD3C8(v1);
  v4 = *v2;
  *v2 = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  _Unwind_Resume(a1);
}

uint64_t *sub_19C2A5400(uint64_t *result, unsigned int *a2, unint64_t a3)
{
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  unsigned int *v7;
  unint64_t v8;
  _DWORD *v9;
  __int128 v10;
  unsigned int *v11;
  unint64_t v12;

  if (a3)
  {
    v3 = result;
    v11 = 0;
    v12 = 0;
    v10 = 0uLL;
    sub_19C2A57D4(a2, a3, &v11, &v10, &v9);
    sub_19C2CD5DC(v3 + 7, &v9);
    result = sub_19C2CD3C8((uint64_t *)&v9);
    if (!v3[7])
    {
      v4 = (_QWORD *)operator new();
      *v4 = &off_1E3D38860;
      v4[1] = 0;
      v4[2] = 0;
      v4[3] = 0;
      v5 = v3[1];
      v3[1] = (uint64_t)v4;
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      if (!v12 || (v12 & 3) != 0)
      {
        sub_19C2CD524(&v9, 13, "Trie blob is wrongly formatted.", 31);
        sub_19C2CD5DC(v3 + 7, &v9);
        return sub_19C2CD3C8((uint64_t *)&v9);
      }
      else
      {
        v6 = (_QWORD *)v3[1];
        v7 = v11;
        v8 = v12 >> 2;
        v6[1] = 0;
        v6[2] = 0;
        result = (uint64_t *)v6[3];
        if (result)
        {
          result = (uint64_t *)MEMORY[0x1A1AD3538](result, 0x1000C8052888210);
          v6[3] = 0;
        }
        v6[1] = v8;
        v6[2] = v7;
        *((_OWORD *)v3 + 1) = v10;
      }
    }
  }
  return result;
}

void sub_19C2A5534(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C2CD3C8((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19C2A5550(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E3D33C80;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = a2 + 16;
  *(_QWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 48) = 0;
  sub_19C2CD3C0((_QWORD *)(a1 + 56));
  v4 = *(_QWORD *)(a2 + 64) & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v4 + 23) < 0)
  {
    v4 = *(_QWORD *)v4;
    v5 = *(_QWORD *)((*(_QWORD *)(a2 + 64) & 0xFFFFFFFFFFFFFFFELL) + 8);
  }
  else
  {
    v5 = *(unsigned __int8 *)(v4 + 23);
  }
  sub_19C2A5400((uint64_t *)a1, (unsigned int *)v4, v5);
  return a1;
}

void sub_19C2A55D0(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;

  sub_19C2CD3C8(v1);
  v4 = *v2;
  *v2 = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  _Unwind_Resume(a1);
}

uint64_t *sub_19C2A5608(uint64_t *a1, uint64_t a2, _DWORD *a3, unint64_t a4)
{
  uint64_t *v7;
  _DWORD *v8;
  _DWORD *v10;
  int v11;

  *a1 = (uint64_t)&off_1E3D33C80;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = a2;
  a1[5] = 0;
  v7 = a1 + 7;
  *((_BYTE *)a1 + 48) = 0;
  sub_19C2CD3C0(a1 + 7);
  v11 = 0;
  sub_19C29E3E0(a3, a4, &v11, &v10);
  sub_19C2CD5DC(v7, &v10);
  sub_19C2CD3C8((uint64_t *)&v10);
  (*(void (**)(_DWORD **__return_ptr, uint64_t *))(*a1 + 24))(&v10, a1);
  v8 = v10;
  sub_19C2CD3C8((uint64_t *)&v10);
  if (!v8)
  {
    *((_BYTE *)a1 + 48) = v11 != 0;
    sub_19C2A5400(a1, a3 + 1, a4 - 4);
  }
  return a1;
}

void sub_19C2A56E4(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;

  sub_19C2CD3C8(v1);
  v4 = *v2;
  *v2 = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  _Unwind_Resume(a1);
}

_QWORD *sub_19C2A5734(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E3D33C80;
  sub_19C2CD3C8(a1 + 7);
  v2 = a1[1];
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_19C2A577C(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E3D33C80;
  sub_19C2CD3C8(a1 + 7);
  v2 = a1[1];
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x1A1AD355CLL);
}

_QWORD *sub_19C2A57D4@<X0>(unsigned int *a1@<X0>, unint64_t a2@<X1>, unsigned int **a3@<X2>, _QWORD *a4@<X3>, _QWORD *a5@<X8>)
{
  unsigned int *v7;
  unsigned int *v8;
  const char *v10;
  uint64_t v11;

  if (a2 < 5 || (v7 = (unsigned int *)*a1, a2 <= (unint64_t)v7))
  {
    v10 = "Blob for normalization rule is broken.";
    v11 = 38;
  }
  else
  {
    if ((unint64_t)(v7 + 1) < a2)
    {
      v8 = a1 + 1;
      *a3 = v8;
      a3[1] = v7;
      *a4 = (char *)v7 + (_QWORD)v8;
      a4[1] = a2 - (_QWORD)v7 - 4;
      return sub_19C2CD3C0(a5);
    }
    v10 = "Trie data size exceeds the input blob size.";
    v11 = 43;
  }
  return (_QWORD *)sub_19C2CD524(a5, 13, v10, v11);
}

_QWORD *sub_19C2A583C@<X0>(size_t a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  unint64_t v6;
  _QWORD *result;
  _QWORD *v11;
  int v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  std::string::size_type i;
  void **v19;
  uint64_t v20;
  char *v21;
  char *v22;
  _QWORD *v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  void **v32;
  uint64_t v33;
  char *v34;
  char *v35;
  _QWORD *v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  int v45;
  size_t v46;
  const char *v47;
  std::string *v48;
  std::string::size_type v49;
  std::string *v50;
  std::string::size_type size;
  BOOL v52;
  std::string::size_type v53;
  void **v54;
  uint64_t v55;
  char *v56;
  char *v57;
  _QWORD *v58;
  char *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  _QWORD *v65;
  char *v66;
  char *v67;
  uint64_t v68;
  std::string::size_type v69;
  _QWORD *v70;
  uint64_t v71;
  char *v72;
  unint64_t v73;
  _BYTE *v74;
  uint64_t v75;
  uint64_t v76;
  void *__p;
  char v78;
  uint64_t v79;
  _QWORD v80[5];
  const std::string::value_type *v81;
  std::string::size_type v82;
  int v83;
  void **v84;
  std::string *v85;

  v6 = a3;
  v84 = (void **)a5;
  v85 = (std::string *)a4;
  *(_QWORD *)(a5 + 8) = *(_QWORD *)a5;
  if (*(char *)(a4 + 23) < 0)
  {
    **(_BYTE **)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    if (a3)
      goto LABEL_3;
    return sub_19C2CD3C0(a6);
  }
  *(_BYTE *)a4 = 0;
  *(_BYTE *)(a4 + 23) = 0;
  if (!a3)
    return sub_19C2CD3C0(a6);
LABEL_3:
  result = (_QWORD *)(*(uint64_t (**)(size_t))(*(_QWORD *)a1 + 24))(a1);
  if (*a6)
    return result;
  sub_19C2CD3C8(a6);
  v83 = 0;
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32)))
  {
    do
    {
      sub_19C2A5FEC(a1, a2, v6, (uint64_t)&v74);
      if (v75 != 1 || *v74 != 32)
        goto LABEL_11;
      a2 += (int)v76;
      v83 += v76;
      v6 -= (int)v76;
    }
    while (v6);
    v11 = a6;
    return sub_19C2CD3C0(v11);
  }
LABEL_11:
  v71 = (uint64_t)a6;
  std::string::reserve(v85, 3 * v6);
  sub_19C2A61D0(v84, 3 * v6);
  v81 = "▁";
  v82 = 3;
  v80[0] = a1;
  v80[1] = &v83;
  v80[2] = &v85;
  v80[3] = &v84;
  v80[4] = &v81;
  if (!*(_BYTE *)(a1 + 48)
    && (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32)))
  {
    sub_19C2A6264((uint64_t)v80);
  }
  v12 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32));
  do
  {
    sub_19C2A5FEC(a1, a2, v6, (uint64_t)&v74);
    v13 = v74;
    v14 = v75;
    if ((v12 & 1) != 0)
    {
      if (!v75)
        goto LABEL_64;
      while (*v13 == 32)
      {
        ++v13;
        if (!--v14)
          goto LABEL_64;
      }
    }
    else if (!v75)
    {
      v12 = 0;
      goto LABEL_64;
    }
    v72 = a2;
    v73 = v6;
    v15 = 0;
    do
    {
      v16 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 32))(*(_QWORD *)(a1 + 32));
      v17 = v13[v15];
      if (v16 && v17 == 32)
      {
        std::string::append(v85, v81, v82);
        if (v82)
        {
          for (i = 0; i < v82; ++i)
          {
            v19 = v84;
            v20 = v83;
            v21 = (char *)v84[1];
            v22 = (char *)v84[2];
            if (v21 >= v22)
            {
              v24 = (char *)*v84;
              v25 = (v21 - (_BYTE *)*v84) >> 3;
              v26 = v25 + 1;
              if ((unint64_t)(v25 + 1) >> 61)
                goto LABEL_114;
              v27 = v22 - v24;
              if (v27 >> 2 > v26)
                v26 = v27 >> 2;
              if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8)
                v28 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v28 = v26;
              if (v28)
              {
                v29 = (char *)sub_19C2A1FC0((uint64_t)(v84 + 2), v28);
                v24 = (char *)*v19;
                v21 = (char *)v19[1];
              }
              else
              {
                v29 = 0;
              }
              v30 = &v29[8 * v25];
              *(_QWORD *)v30 = v20;
              v23 = v30 + 8;
              while (v21 != v24)
              {
                v31 = *((_QWORD *)v21 - 1);
                v21 -= 8;
                *((_QWORD *)v30 - 1) = v31;
                v30 -= 8;
              }
              *v19 = v30;
              v19[1] = v23;
              v19[2] = &v29[8 * v28];
              if (v24)
                operator delete(v24);
            }
            else
            {
              *(_QWORD *)v21 = v83;
              v23 = v21 + 8;
            }
            v19[1] = v23;
          }
        }
      }
      else
      {
        std::string::push_back(v85, v17);
        v32 = v84;
        v33 = v83;
        v34 = (char *)v84[1];
        v35 = (char *)v84[2];
        if (v34 >= v35)
        {
          v37 = (char *)*v84;
          v38 = (v34 - (_BYTE *)*v84) >> 3;
          v39 = v38 + 1;
          if ((unint64_t)(v38 + 1) >> 61)
LABEL_114:
            sub_19C2A18E8();
          v40 = v35 - v37;
          if (v40 >> 2 > v39)
            v39 = v40 >> 2;
          if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8)
            v41 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v41 = v39;
          if (v41)
          {
            v42 = (char *)sub_19C2A1FC0((uint64_t)(v84 + 2), v41);
            v37 = (char *)*v32;
            v34 = (char *)v32[1];
          }
          else
          {
            v42 = 0;
          }
          v43 = &v42[8 * v38];
          *(_QWORD *)v43 = v33;
          v36 = v43 + 8;
          while (v34 != v37)
          {
            v44 = *((_QWORD *)v34 - 1);
            v34 -= 8;
            *((_QWORD *)v43 - 1) = v44;
            v43 -= 8;
          }
          *v32 = v43;
          v32[1] = v36;
          v32[2] = &v42[8 * v41];
          if (v37)
            operator delete(v37);
        }
        else
        {
          *(_QWORD *)v34 = v83;
          v36 = v34 + 8;
        }
        v32[1] = v36;
      }
      ++v15;
    }
    while (v15 != v14);
    v12 = v13[v14 - 1] == 32;
    a2 = v72;
    v6 = v73;
LABEL_64:
    v83 += v76;
    a2 += (int)v76;
    v6 -= (int)v76;
    v12 &= (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32));
  }
  while (v6);
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32)))
  {
    v45 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 32))(*(_QWORD *)(a1 + 32));
    if (v45)
      v46 = v82;
    else
      v46 = 1;
    if (v45)
      v47 = v81;
    else
      v47 = " ";
    while (1)
    {
      v48 = v85;
      LODWORD(v49) = HIBYTE(v85->__r_.__value_.__r.__words[2]);
      if (SHIBYTE(v85->__r_.__value_.__r.__words[2]) < 0)
      {
        v50 = (std::string *)v85->__r_.__value_.__r.__words[0];
        size = v85->__r_.__value_.__l.__size_;
        if (!v46)
          goto LABEL_79;
      }
      else
      {
        v50 = v85;
        size = HIBYTE(v85->__r_.__value_.__r.__words[2]);
        if (!v46)
          goto LABEL_79;
      }
      v52 = size >= v46;
      v53 = size - v46;
      if (!v52 || memcmp((char *)v50 + v53, v47, v46))
        break;
LABEL_79:
      if ((v49 & 0x80) != 0)
        v49 = v48->__r_.__value_.__l.__size_;
      if ((_DWORD)v49 - (_DWORD)v46 < 0)
      {
        LODWORD(v74) = 13;
        v65 = (_QWORD *)sub_19C2A09EC((uint64_t)&v75);
        sub_19C2A1B24(v65, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/normalizer.cc", 69);
        sub_19C2A1B24(&v75, (uint64_t)"(", 1);
        std::ostream::operator<<();
        sub_19C2A1B24(&v75, (uint64_t)") [", 3);
        sub_19C2A1B24(&v75, (uint64_t)"(length) >= (0)", 15);
        sub_19C2A1B24(&v75, (uint64_t)"] ", 2);
        sub_19C29E5C0((unsigned int *)&v74, v71);
        goto LABEL_110;
      }
      v83 = *((_QWORD *)*v84 + (v49 - v46));
      std::string::resize(v48, (v49 - v46), 0);
      sub_19C2A647C((uint64_t)v84, (v49 - v46));
    }
  }
  if (*(_BYTE *)(a1 + 48)
    && (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32)))
  {
    sub_19C2A6264((uint64_t)v80);
  }
  v54 = v84;
  v55 = v83;
  v56 = (char *)v84[1];
  v57 = (char *)v84[2];
  if (v56 >= v57)
  {
    v59 = (char *)*v84;
    v60 = (v56 - (_BYTE *)*v84) >> 3;
    v61 = v60 + 1;
    if ((unint64_t)(v60 + 1) >> 61)
      sub_19C2A18E8();
    v62 = v57 - v59;
    if (v62 >> 2 > v61)
      v61 = v62 >> 2;
    if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFF8)
      v63 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v63 = v61;
    if (v63)
    {
      v64 = (char *)sub_19C2A1FC0((uint64_t)(v84 + 2), v63);
      v59 = (char *)*v54;
      v56 = (char *)v54[1];
    }
    else
    {
      v64 = 0;
    }
    v66 = &v64[8 * v60];
    v67 = &v64[8 * v63];
    *(_QWORD *)v66 = v55;
    v58 = v66 + 8;
    while (v56 != v59)
    {
      v68 = *((_QWORD *)v56 - 1);
      v56 -= 8;
      *((_QWORD *)v66 - 1) = v68;
      v66 -= 8;
    }
    *v54 = v66;
    v54[1] = v58;
    v54[2] = v67;
    if (v59)
      operator delete(v59);
  }
  else
  {
    *(_QWORD *)v56 = v83;
    v58 = v56 + 8;
  }
  v54[1] = v58;
  if (SHIBYTE(v85->__r_.__value_.__r.__words[2]) < 0)
    v69 = v85->__r_.__value_.__l.__size_;
  else
    v69 = HIBYTE(v85->__r_.__value_.__r.__words[2]);
  if (((_BYTE *)v84[1] - (_BYTE *)*v84) >> 3 == v69 + 1)
  {
    v11 = (_QWORD *)v71;
    return sub_19C2CD3C0(v11);
  }
  LODWORD(v74) = 13;
  v70 = (_QWORD *)sub_19C2A09EC((uint64_t)&v75);
  sub_19C2A1B24(v70, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/normalizer.cc", 69);
  sub_19C2A1B24(&v75, (uint64_t)"(", 1);
  std::ostream::operator<<();
  sub_19C2A1B24(&v75, (uint64_t)") [", 3);
  sub_19C2A1B24(&v75, (uint64_t)"(norm_to_orig->size()) == (normalized->size() + 1)", 50);
  sub_19C2A1B24(&v75, (uint64_t)"] ", 2);
  sub_19C29E5C0((unsigned int *)&v74, v71);
LABEL_110:
  v75 = *MEMORY[0x1E0DE4F60];
  *(uint64_t *)((char *)&v75 + *(_QWORD *)(v75 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v76 = MEMORY[0x1E0DE4FB8] + 16;
  if (v78 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return (_QWORD *)MEMORY[0x1A1AD34CC](&v79);
}

void sub_19C2A5FCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_19C29E64C((uint64_t)va);
  _Unwind_Resume(a1);
}

size_t sub_19C2A5FEC@<X0>(size_t result@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  char *v6;
  size_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  _QWORD *v18;
  unint64_t v19;
  int v20;
  unint64_t *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  _QWORD v27[64];

  v27[63] = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    v6 = a2;
    v7 = result;
    v8 = *(_QWORD *)(result + 40);
    if (v8 && (LOBYTE(v26) = 0, result = sub_19C2A6554(v8, a2, a3, (BOOL *)&v26), (_BYTE)v26))
    {
      v9 = (int)result;
      if (a3 < (int)result)
        v9 = a3;
      *(_QWORD *)a4 = v6;
      *(_QWORD *)(a4 + 8) = v9;
      *(_DWORD *)(a4 + 16) = result;
    }
    else
    {
      v10 = *(_QWORD *)(v7 + 8);
      if (!v10)
        goto LABEL_24;
      v11 = 0;
      v12 = 0;
      v13 = *(_DWORD **)(v10 + 16);
      v14 = (*v13 >> 10 << ((*v13 >> 6) & 8));
      do
      {
        v15 = v6[v11];
        v16 = v14 ^ v15;
        v17 = v13[v16];
        if ((v17 & 0x800000FF) != (_DWORD)v15)
          break;
        v14 = v16 ^ (v17 >> 10 << ((v17 >> 6) & 8));
        if ((v17 & 0x100) != 0)
        {
          if (v12 <= 0x1F)
          {
            v18 = &v27[2 * v12 - 1];
            *(_DWORD *)v18 = v13[v14] & 0x7FFFFFFF;
            v18[1] = v11 + 1;
          }
          ++v12;
        }
        ++v11;
      }
      while (a3 != v11);
      if (!v12)
        goto LABEL_24;
      v19 = 0;
      v20 = 0;
      v21 = v27;
      v22 = v27;
      do
      {
        v24 = *v22;
        v22 += 2;
        v23 = v24;
        if (!v19 || v23 > v19)
        {
          v20 = *((_DWORD *)v21 - 2);
          v19 = v23;
        }
        v21 = v22;
        --v12;
      }
      while (v12);
      if (v19)
      {
        v6 = (char *)(*(_QWORD *)(v7 + 16) + v20);
        result = strlen(v6);
      }
      else
      {
LABEL_24:
        v26 = 0;
        v25 = sub_19C2CB69C((unsigned __int8 *)v6, (uint64_t)&v6[a3], &v26) != 65533 || v26 == 3;
        if (v25)
          LODWORD(v19) = v26;
        else
          LODWORD(v19) = 1;
        if (v25)
          result = (int)v26;
        else
          result = 3;
        if (!v25)
          v6 = (char *)&unk_19C46CDC4;
      }
      *(_QWORD *)a4 = v6;
      *(_QWORD *)(a4 + 8) = result;
      *(_DWORD *)(a4 + 16) = v19;
    }
  }
  else
  {
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
  }
  return result;
}

void sub_19C2A61D0(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61)
      sub_19C2A18E8();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)sub_19C2A1FC0(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    v9 = &v6[8 * v8];
    v10 = (char *)*a1;
    v11 = (char *)a1[1];
    v12 = v7;
    if (v11 != *a1)
    {
      v12 = v7;
      do
      {
        v13 = *((_QWORD *)v11 - 1);
        v11 -= 8;
        *((_QWORD *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void sub_19C2A6264(uint64_t a1)
{
  int v2;
  std::string *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;

  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)a1 + 32) + 32))(*(_QWORD *)(*(_QWORD *)a1 + 32));
  v3 = **(std::string ***)(a1 + 16);
  if (v2)
  {
    std::string::append(v3, **(const std::string::value_type ***)(a1 + 32), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8));
    if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8))
    {
      v4 = 0;
      do
      {
        v5 = **(_QWORD **)(a1 + 24);
        v6 = **(int **)(a1 + 8);
        v7 = *(_QWORD **)(v5 + 8);
        v8 = *(_QWORD *)(v5 + 16);
        if ((unint64_t)v7 >= v8)
        {
          v10 = *(_QWORD **)v5;
          v11 = ((uint64_t)v7 - *(_QWORD *)v5) >> 3;
          v12 = v11 + 1;
          if ((unint64_t)(v11 + 1) >> 61)
            goto LABEL_40;
          v13 = v8 - (_QWORD)v10;
          if (v13 >> 2 > v12)
            v12 = v13 >> 2;
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
            v14 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v14 = v12;
          if (v14)
          {
            v15 = (char *)sub_19C2A1FC0(v5 + 16, v14);
            v10 = *(_QWORD **)v5;
            v7 = *(_QWORD **)(v5 + 8);
          }
          else
          {
            v15 = 0;
          }
          v16 = &v15[8 * v11];
          *(_QWORD *)v16 = v6;
          v9 = v16 + 8;
          while (v7 != v10)
          {
            v17 = *--v7;
            *((_QWORD *)v16 - 1) = v17;
            v16 -= 8;
          }
          *(_QWORD *)v5 = v16;
          *(_QWORD *)(v5 + 8) = v9;
          *(_QWORD *)(v5 + 16) = &v15[8 * v14];
          if (v10)
            operator delete(v10);
        }
        else
        {
          *v7 = v6;
          v9 = v7 + 1;
        }
        *(_QWORD *)(v5 + 8) = v9;
        ++v4;
      }
      while (v4 < *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8));
    }
  }
  else
  {
    std::string::append(v3, " ");
    v18 = **(_QWORD **)(a1 + 24);
    v19 = **(int **)(a1 + 8);
    v20 = *(_QWORD **)(v18 + 8);
    v21 = *(_QWORD *)(v18 + 16);
    if ((unint64_t)v20 >= v21)
    {
      v23 = *(_QWORD **)v18;
      v24 = ((uint64_t)v20 - *(_QWORD *)v18) >> 3;
      v25 = v24 + 1;
      if ((unint64_t)(v24 + 1) >> 61)
LABEL_40:
        sub_19C2A18E8();
      v26 = v21 - (_QWORD)v23;
      if (v26 >> 2 > v25)
        v25 = v26 >> 2;
      if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8)
        v27 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v27 = v25;
      if (v27)
      {
        v28 = (char *)sub_19C2A1FC0(v18 + 16, v27);
        v23 = *(_QWORD **)v18;
        v20 = *(_QWORD **)(v18 + 8);
      }
      else
      {
        v28 = 0;
      }
      v29 = &v28[8 * v24];
      v30 = &v28[8 * v27];
      *(_QWORD *)v29 = v19;
      v22 = v29 + 8;
      while (v20 != v23)
      {
        v31 = *--v20;
        *((_QWORD *)v29 - 1) = v31;
        v29 -= 8;
      }
      *(_QWORD *)v18 = v29;
      *(_QWORD *)(v18 + 8) = v22;
      *(_QWORD *)(v18 + 16) = v30;
      if (v23)
        operator delete(v23);
    }
    else
    {
      *v20 = v19;
      v22 = v20 + 1;
    }
    *(_QWORD *)(v18 + 8) = v22;
  }
}

void sub_19C2A647C(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    sub_19C2A6DF8((char **)a1, a2 - v2);
  }
}

void sub_19C2A64AC(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  void *__p;
  void *v4;
  uint64_t v5;

  __p = 0;
  v4 = 0;
  v5 = 0;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 32))(&v2);
  nullsub_3(&v2);
  sub_19C2CD3C8(&v2);
  if (__p)
  {
    v4 = __p;
    operator delete(__p);
  }
}

void sub_19C2A6518(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  sub_19C2CD3C8(&a9);
  if (*(char *)(v11 + 23) < 0)
    operator delete(*(void **)v11);
  if (__p)
  {
    a11 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_19C2A6554(uint64_t a1, _BYTE *a2, uint64_t a3, BOOL *a4)
{
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  _BYTE *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  _BYTE *v16;
  uint64_t result;
  int *v18;
  unsigned int v19;
  int v20;
  int v21;
  _BYTE v22[1024];
  _QWORD v23[128];

  v23[127] = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)a1)
  {
    if (a4)
      *a4 = 0;
    goto LABEL_33;
  }
  v4 = *(_DWORD **)(*(_QWORD *)a1 + 16);
  v5 = (*v4 >> 10 << ((*v4 >> 6) & 8));
  if (a3)
  {
    v6 = 0;
    v7 = 0;
    do
    {
      v8 = a2[v6];
      v9 = v5 ^ v8;
      v10 = v4[v9];
      if ((v10 & 0x800000FF) != (_DWORD)v8)
        break;
      v5 = v9 ^ (v10 >> 10 << ((v10 >> 6) & 8));
      if ((v10 & 0x100) != 0)
      {
        if (v7 <= 0x3F)
        {
          v11 = &v22[16 * v7];
          *(_DWORD *)v11 = v4[v5] & 0x7FFFFFFF;
          *((_QWORD *)v11 + 1) = v6 + 1;
        }
        ++v7;
      }
      ++v6;
    }
    while (a3 != v6);
  }
  else
  {
    v12 = *a2;
    if (*a2)
    {
      v7 = 0;
      v13 = 1;
      do
      {
        v14 = v5 ^ v12;
        v15 = v4[v14];
        if ((v15 & 0x800000FF) != v12)
          break;
        v5 = v14 ^ (v15 >> 10 << ((v15 >> 6) & 8));
        if ((v15 & 0x100) != 0)
        {
          if (v7 <= 0x3F)
          {
            v16 = &v22[16 * v7];
            *(_DWORD *)v16 = v4[v5] & 0x7FFFFFFF;
            *((_QWORD *)v16 + 1) = v13;
          }
          ++v7;
        }
        v12 = a2[v13++];
      }
      while (v12);
    }
    else
    {
      LODWORD(v7) = 0;
    }
  }
  if (a4)
    *a4 = (int)v7 > 0;
  if (!(_DWORD)v7)
  {
LABEL_33:
    v21 = asc_19C45F89C[(unint64_t)*a2 >> 4];
    if (v21 >= (int)a3)
      return a3;
    else
      return v21;
  }
  if ((int)v7 < 1)
    return 0;
  LODWORD(result) = 0;
  v7 = v7;
  v18 = (int *)v23;
  do
  {
    v20 = *v18;
    v18 += 4;
    v19 = v20;
    if ((int)result <= v20)
      result = v19;
    else
      result = result;
    --v7;
  }
  while (v7);
  return result;
}

void sub_19C2A6720(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4;
  _DWORD *v5;
  uint64_t v6;
  const std::string::value_type *v7;
  uint64_t v8;
  std::string::size_type v9;
  std::string *v10;
  std::string *v11;
  std::string::size_type size;
  std::string v13;

  v4 = *(unsigned __int8 *)(a1 + 48);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  std::string::resize((std::string *)a2, 4uLL, 0);
  if (*(char *)(a2 + 23) >= 0)
    v5 = (_DWORD *)a2;
  else
    v5 = *(_DWORD **)a2;
  *v5 = v4;
  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
  {
    v8 = *(_QWORD *)(v6 + 8);
    v7 = *(const std::string::value_type **)(v6 + 16);
    memset(&v13, 0, sizeof(v13));
    std::string::resize(&v13, 4uLL, 0);
    v9 = 4 * v8;
    if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v10 = &v13;
    else
      v10 = (std::string *)v13.__r_.__value_.__r.__words[0];
    LODWORD(v10->__r_.__value_.__l.__data_) = v9;
    if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = &v13;
    else
      v11 = (std::string *)v13.__r_.__value_.__r.__words[0];
    if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v13.__r_.__value_.__r.__words[2]);
    else
      size = v13.__r_.__value_.__l.__size_;
    std::string::append((std::string *)a2, (const std::string::value_type *)v11, size);
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v13.__r_.__value_.__l.__data_);
    std::string::append((std::string *)a2, v7, v9);
    std::string::append((std::string *)a2, *(const std::string::value_type **)(a1 + 16), *(_QWORD *)(a1 + 24));
  }
}

void sub_19C2A6814(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v15 + 23) < 0)
    operator delete(*(void **)v15);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_19C2A6850(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  BOOL v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  char v28;
  void *__p;
  char *v30;
  char *v31;

  *a1 = 0;
  v4 = a2[2];
  if (v4)
  {
    __p = 0;
    v30 = 0;
    v31 = 0;
    sub_19C2A6AF0(&__p, v4);
    v7 = (_QWORD *)*a2;
    v5 = a2 + 1;
    v6 = v7;
    if (v7 != v5)
    {
      v8 = v30;
      do
      {
        v9 = v6[4];
        if (v8 >= v31)
        {
          v10 = (v8 - (_BYTE *)__p) >> 3;
          if ((unint64_t)(v10 + 1) >> 61)
            sub_19C2A18E8();
          v11 = (v31 - (_BYTE *)__p) >> 2;
          if (v11 <= v10 + 1)
            v11 = v10 + 1;
          if ((unint64_t)(v31 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
            v12 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v12 = v11;
          if (v12)
            v13 = (char *)sub_19C2A1FC0((uint64_t)&v31, v12);
          else
            v13 = 0;
          v14 = &v13[8 * v10];
          *(_QWORD *)v14 = v9;
          v8 = v14 + 8;
          v16 = (char *)__p;
          v15 = v30;
          if (v30 != __p)
          {
            do
            {
              v17 = *((_QWORD *)v15 - 1);
              v15 -= 8;
              *((_QWORD *)v14 - 1) = v17;
              v14 -= 8;
            }
            while (v15 != v16);
            v15 = (char *)__p;
          }
          __p = v14;
          v30 = v8;
          v31 = &v13[8 * v12];
          if (v15)
            operator delete(v15);
        }
        else
        {
          *(_QWORD *)v8 = v9;
          v8 += 8;
        }
        v30 = v8;
        v18 = (_QWORD *)v6[1];
        if (v18)
        {
          do
          {
            v19 = v18;
            v18 = (_QWORD *)*v18;
          }
          while (v18);
        }
        else
        {
          do
          {
            v19 = (_QWORD *)v6[2];
            v20 = *v19 == (_QWORD)v6;
            v6 = v19;
          }
          while (!v20);
        }
        v6 = v19;
      }
      while (v19 != v5);
    }
    v21 = (_QWORD *)operator new();
    *v21 = &off_1E3D38860;
    v21[1] = 0;
    v21[2] = 0;
    v21[3] = 0;
    v22 = (_QWORD *)*a1;
    *a1 = v21;
    if (v22)
    {
      (*(void (**)(_QWORD *))(*v22 + 8))(v22);
      v21 = (_QWORD *)*a1;
    }
    if (sub_19C2A03B0(v21, (v30 - (_BYTE *)__p) >> 3, (unint64_t)__p, 0, 0, 0))
    {
      v28 = 1;
      v23 = sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)"normalizer.cc", 13);
      sub_19C2A1B24(v23, (uint64_t)"(", 1);
      v24 = (_QWORD *)std::ostream::operator<<();
      v25 = sub_19C2A1B24(v24, (uint64_t)") [", 3);
      v26 = sub_19C2A1B24(v25, (uint64_t)"(0) == (trie_->build(key.size(), const_cast<char **>(&key[0]), nullptr, nullptr))", 81);
      sub_19C2A1B24(v26, (uint64_t)"] ", 2);
      sub_19C2A0AD8(&v28);
    }
    if (__p)
    {
      v30 = (char *)__p;
      operator delete(__p);
    }
  }
  return a1;
}

void sub_19C2A6AA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12, void *__p, uint64_t a14)
{
  uint64_t *v14;
  uint64_t v16;

  if (__p)
    operator delete(__p);
  v16 = *v14;
  *v14 = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  _Unwind_Resume(exception_object);
}

void sub_19C2A6AF0(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61)
      sub_19C2A18E8();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)sub_19C2A1FC0(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    v9 = &v6[8 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *((_QWORD *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

_QWORD *sub_19C2A6B88(_QWORD *a1, uint64_t a2, unint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;

  *a1 = 0;
  if (a3)
  {
    v6 = (_QWORD *)operator new();
    *v6 = &off_1E3D38860;
    v6[1] = 0;
    v6[2] = 0;
    v6[3] = 0;
    v7 = (_QWORD *)*a1;
    *a1 = v6;
    if (v7)
      (*(void (**)(_QWORD *))(*v7 + 8))(v7);
    if ((a3 & 3) == 0)
    {
      v8 = (_QWORD *)*a1;
      v9 = a3 >> 2;
      v8[1] = 0;
      v8[2] = 0;
      v10 = v8[3];
      if (v10)
      {
        MEMORY[0x1A1AD3538](v10, 0x1000C8052888210);
        v8[3] = 0;
      }
      v8[1] = v9;
      v8[2] = a2;
    }
  }
  return a1;
}

void sub_19C2A6C3C(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *v1 = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_19C2A6C64@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  if (*(_QWORD *)a1)
    return sub_19C2A6CA0(a2, *(void **)(*(_QWORD *)a1 + 16), 4 * *(_QWORD *)(*(_QWORD *)a1 + 8));
  else
    return sub_19C2A6D48(a2, "");
}

uint64_t sub_19C2A6C8C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = a2;
  return result;
}

uint64_t sub_19C2A6C94@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_19C2CD5D8(a2, a1 + 56);
}

_QWORD *sub_19C2A6CA0(_QWORD *__dst, void *__src, size_t __len)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    sub_19C2A1A54();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    *__dst = v6;
  }
  else
  {
    *((_BYTE *)__dst + 23) = __len;
    v6 = __dst;
    if (!__len)
      goto LABEL_9;
  }
  memmove(v6, __src, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __dst;
}

_QWORD *sub_19C2A6D48(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    sub_19C2A1A54();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

void sub_19C2A6DF8(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 3);
    if (v10 >> 61)
      sub_19C2A18E8();
    v11 = v9 >> 3;
    v12 = v5 - v8;
    if (v12 >> 2 > v10)
      v10 = v12 >> 2;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)sub_19C2A1FC0(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[8 * v11];
    v16 = &v14[8 * v13];
    bzero(v15, 8 * a2);
    v17 = &v15[8 * a2];
    while (v7 != v8)
    {
      v18 = *((_QWORD *)v7 - 1);
      v7 -= 8;
      *((_QWORD *)v15 - 1) = v18;
      v15 -= 8;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
      operator delete(v8);
  }
}

uint64_t sub_19C2A6F00@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v3;
  uint64_t result;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;

  if (*(_QWORD *)(a1 + 80))
    v3 = *(_DWORD **)(a1 + 80);
  else
    v3 = &unk_1EE41C660;
  switch(v3[68])
  {
    case 1:
      result = sub_19C2A7050(a1, &v11);
      goto LABEL_12;
    case 2:
      result = sub_19C2A70C4(a1, &v11);
      goto LABEL_12;
    case 3:
      result = sub_19C2A7138(a1, &v11);
      goto LABEL_12;
    case 4:
      result = sub_19C2A71AC(a1, &v11);
LABEL_12:
      *a2 = v11;
      break;
    default:
      result = sub_19C2CB68C();
      if ((int)result <= 2)
      {
        LOBYTE(v11) = 0;
        v5 = sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)"model_factory.cc", 16);
        sub_19C2A1B24(v5, (uint64_t)"(", 1);
        v6 = (_QWORD *)std::ostream::operator<<();
        v7 = sub_19C2A1B24(v6, (uint64_t)") ", 2);
        v8 = sub_19C2A1B24(v7, (uint64_t)"LOG(", 4);
        v9 = sub_19C2A1B24(v8, (uint64_t)"ERROR", 5);
        v10 = sub_19C2A1B24(v9, (uint64_t)") ", 2);
        sub_19C2A1B24(v10, (uint64_t)"Unknown model_type: ", 20);
        std::ostream::operator<<();
        result = (uint64_t)sub_19C2A0AD8(&v11);
      }
      *a2 = 0;
      break;
  }
  return result;
}

void sub_19C2A703C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C2A0AD8(va);
  _Unwind_Resume(a1);
}

uint64_t sub_19C2A7050@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  result = sub_19C2BA498(v4, a1);
  *a2 = v4;
  return result;
}

void sub_19C2A70A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD355C](v1, 0x10E1C404363080ALL);
  _Unwind_Resume(a1);
}

uint64_t sub_19C2A70C4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  result = sub_19C2CBC34(v4, a1);
  *a2 = v4;
  return result;
}

void sub_19C2A7114(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD355C](v1, 0x10E1C4039E95E28);
  _Unwind_Resume(a1);
}

uint64_t sub_19C2A7138@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  result = sub_19C2BE998(v4, a1);
  *a2 = v4;
  return result;
}

void sub_19C2A7188(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD355C](v1, 0x10E1C4039E95E28);
  _Unwind_Resume(a1);
}

uint64_t sub_19C2A71AC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  result = sub_19C2BE738(v4, a1);
  *a2 = v4;
  return result;
}

void sub_19C2A71FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD355C](v1, 0x10E1C4039E95E28);
  _Unwind_Resume(a1);
}

uint64_t sub_19C2A7220@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  int v6;
  uint64_t result;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD v15[2];

  v15[0] = a2;
  v15[1] = a3;
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 80))(a1);
  if (v6 == 1)
  {
    result = (uint64_t)sub_19C2A73EC(a1, (uint64_t)v15, &v14);
    goto LABEL_5;
  }
  if (!v6)
  {
    result = sub_19C2A7370(a1, v15, &v14);
LABEL_5:
    *a4 = v14;
    return result;
  }
  result = sub_19C2CB68C();
  if ((int)result <= 2)
  {
    LOBYTE(v14) = 0;
    v8 = sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)"model_factory.cc", 16);
    sub_19C2A1B24(v8, (uint64_t)"(", 1);
    v9 = (_QWORD *)std::ostream::operator<<();
    v10 = sub_19C2A1B24(v9, (uint64_t)") ", 2);
    v11 = sub_19C2A1B24(v10, (uint64_t)"LOG(", 4);
    v12 = sub_19C2A1B24(v11, (uint64_t)"ERROR", 5);
    v13 = sub_19C2A1B24(v12, (uint64_t)") ", 2);
    sub_19C2A1B24(v13, (uint64_t)"Unknown model_type: ", 20);
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 80))(a1);
    std::ostream::operator<<();
    result = (uint64_t)sub_19C2A0AD8(&v14);
  }
  *a4 = 0;
  return result;
}

void sub_19C2A7358(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C2A0AD8(va);
  _Unwind_Resume(a1);
}

uint64_t sub_19C2A7370@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t result;

  v6 = operator new();
  result = sub_19C2BA758(v6, a1, *a2, a2[1]);
  *a3 = v6;
  return result;
}

void sub_19C2A73C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD355C](v1, 0x10E1C404363080ALL);
  _Unwind_Resume(a1);
}

_QWORD *sub_19C2A73EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  _QWORD *result;

  v6 = operator new();
  result = sub_19C2CBC38(v6, a1, *(_DWORD **)a2, *(_QWORD *)(a2 + 8));
  *a3 = v6;
  return result;
}

void sub_19C2A7444(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD355C](v1, 0x10E1C4039E95E28);
  _Unwind_Resume(a1);
}

_QWORD *sub_19C2A7468(_QWORD *a1)
{
  *a1 = &off_1E3D344C0;
  sub_19C2B43C8((uint64_t)(a1 + 2));
  return a1;
}

void sub_19C2A7498(_QWORD *a1)
{
  *a1 = &off_1E3D344C0;
  sub_19C2B43C8((uint64_t)(a1 + 2));
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C2A74D8(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;

  v3 = a1 + 16;
  result = *(_QWORD *)(a1 + 16);
  if (!result)
  {
    sub_19C2B44FC(&v7);
    sub_19C2A7560(v3, &v7);
    v4 = (std::__shared_weak_count *)*((_QWORD *)&v7 + 1);
    if (*((_QWORD *)&v7 + 1))
    {
      v5 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 - 1, v5));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    result = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 8) = result;
  }
  return result;
}

uint64_t sub_19C2A7560(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v3 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return a1;
}

_QWORD *sub_19C2A75C4(_QWORD *a1)
{
  *a1 = &off_1E3D34520;
  sub_19C2B43C8((uint64_t)(a1 + 1));
  return a1;
}

void sub_19C2A75F4(_QWORD *a1)
{
  *a1 = &off_1E3D34520;
  sub_19C2B43C8((uint64_t)(a1 + 1));
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C2A7634(uint64_t a1)
{
  uint64_t result;
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  __int128 v6;

  v2 = a1 + 8;
  result = *(_QWORD *)(a1 + 8);
  if (!result)
  {
    sub_19C2B45DC(&v6);
    sub_19C2A7560(v2, &v6);
    v3 = (std::__shared_weak_count *)*((_QWORD *)&v6 + 1);
    if (*((_QWORD *)&v6 + 1))
    {
      v4 = (unint64_t *)(*((_QWORD *)&v6 + 1) + 8);
      do
        v5 = __ldaxr(v4);
      while (__stlxr(v5 - 1, v4));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    return *(_QWORD *)v2;
  }
  return result;
}

_QWORD *sub_19C2A76B4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
    return (_QWORD *)sub_19C2DAB24(v2, (uint64_t)a2);
  else
    return sub_19C2A6D48(a2, "");
}

double sub_19C2A76D0(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_1E3D341D0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  return result;
}

uint64_t sub_19C2A7700(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)a1 = &off_1E3D341D0;
  if (*(char *)(a1 + 119) < 0)
    operator delete(*(void **)(a1 + 96));
  v2 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(void **)(a1 + 64);
  if (v3)
  {
    *(_QWORD *)(a1 + 72) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 40);
  if (v4)
  {
    *(_QWORD *)(a1 + 48) = v4;
    operator delete(v4);
  }
  v5 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  return a1;
}

void sub_19C2A77D8(uint64_t a1)
{
  sub_19C2A7700(a1);
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C2A77FC()
{
  _QWORD v1[2];
  _BYTE v2[408];
  _QWORD v3[20];

  v3[19] = *MEMORY[0x1E0C80C00];
  sub_19C2A7908(v1);
  if ((v2[*(_QWORD *)(v1[0] - 24) + 16] & 5) == 0)
    std::istream::read();
  v1[0] = *MEMORY[0x1E0DE4F40];
  *(_QWORD *)((char *)v1 + *(_QWORD *)(v1[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 24);
  MEMORY[0x1A1AD3238](v2);
  std::istream::~istream();
  MEMORY[0x1A1AD34CC](v3);
  return 0;
}

void sub_19C2A78EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C2A7A14((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_19C2A7908(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;

  v2 = MEMORY[0x1E0DE4FA8];
  v3 = MEMORY[0x1E0DE4FA8] + 64;
  a1[53] = MEMORY[0x1E0DE4FA8] + 64;
  v4 = a1 + 2;
  v5 = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 8);
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 16);
  *a1 = v5;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v5 - 24)) = v6;
  a1[1] = 0;
  v7 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v7, a1 + 2);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  *a1 = v2 + 24;
  a1[53] = v3;
  MEMORY[0x1A1AD322C](v4);
  if (!std::filebuf::open())
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 4);
  return a1;
}

void sub_19C2A79DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::istream::~istream();
  MEMORY[0x1A1AD34CC](v1 + 424);
  _Unwind_Resume(a1);
}

_QWORD *sub_19C2A7A14(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x1E0DE4F40];
  v3 = *MEMORY[0x1E0DE4F40];
  *a1 = *MEMORY[0x1E0DE4F40];
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  MEMORY[0x1A1AD3238](a1 + 2);
  std::istream::~istream();
  MEMORY[0x1A1AD34CC](a1 + 53);
  return a1;
}

uint64_t sub_19C2A7A6C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (sub_19C2A77FC())
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 64))(a1, a2, a3);
  sub_19C2A7BA0(&v13);
  sub_19C2A7C08(a2, a3, v13, a4);
  if (!*a4)
  {
    sub_19C2CD3C8(a4);
    v12 = v13;
    v13 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 40))(a1, &v12);
    v9 = v12;
    v12 = 0;
    if (v9)
    {
      v10 = sub_19C2C8108(v9);
      MEMORY[0x1A1AD355C](v10, 0x10A1C4047CE62CFLL);
    }
  }
  result = v13;
  v13 = 0;
  if (result)
  {
    v11 = sub_19C2C8108(result);
    return MEMORY[0x1A1AD355C](v11, 0x10A1C4047CE62CFLL);
  }
  return result;
}

void sub_19C2A7B74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_19C2B46BC(&a9, 0);
  sub_19C2B46BC(&a10, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_19C2A7BA0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = operator new();
  result = sub_19C2C7FA0(v2, 0);
  *a1 = v2;
  return result;
}

void sub_19C2A7BE4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD355C](v1, 0x10A1C4047CE62CFLL);
  _Unwind_Resume(a1);
}

uint64_t sub_19C2A7C08@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  char *v6;
  unsigned int v7;
  uint64_t result;
  unsigned int v9;
  _QWORD v10[11];
  char v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (!a2)
    return sub_19C2CD524(a4, 5, "model file path should not be empty.", 36);
  sub_19C2CABB4(a1, a2, 1, &v16);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
  if (!*a4)
  {
    sub_19C2CD3C8(a4);
    v13 = 0;
    v14 = 0;
    v15 = 0;
    if (((*(uint64_t (**)(uint64_t, char **))(*(_QWORD *)v16 + 32))(v16, &v13) & 1) != 0)
    {
      if (v15 >= 0)
        v6 = (char *)&v13;
      else
        v6 = v13;
      if (v15 >= 0)
        v7 = HIBYTE(v15);
      else
        v7 = v14;
      if ((sub_19C2DA7F4(a3, v6, v7) & 1) != 0)
      {
        sub_19C2CD3C0(a4);
LABEL_18:
        if (SHIBYTE(v15) < 0)
          operator delete(v13);
        goto LABEL_20;
      }
      v9 = 13;
      sub_19C2A09EC((uint64_t)v10);
      sub_19C2A1B24(v10, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_19C2A1B24(v10, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_19C2A1B24(v10, (uint64_t)") [", 3);
      sub_19C2A1B24(v10, (uint64_t)"model_proto->ParseFromArray(serialized.data(), serialized.size())", 65);
      sub_19C2A1B24(v10, (uint64_t)"] ", 2);
      sub_19C29E5C0(&v9, (uint64_t)a4);
    }
    else
    {
      v9 = 13;
      sub_19C2A09EC((uint64_t)v10);
      sub_19C2A1B24(v10, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_19C2A1B24(v10, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_19C2A1B24(v10, (uint64_t)") [", 3);
      sub_19C2A1B24(v10, (uint64_t)"input->ReadAll(&serialized)", 27);
      sub_19C2A1B24(v10, (uint64_t)"] ", 2);
      sub_19C29E5C0(&v9, (uint64_t)a4);
    }
    v10[0] = *MEMORY[0x1E0DE4F60];
    *(_QWORD *)((char *)v10 + *(_QWORD *)(v10[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
    v10[1] = MEMORY[0x1E0DE4FB8] + 16;
    if (v11 < 0)
      operator delete((void *)v10[9]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x1A1AD34CC](&v12);
    goto LABEL_18;
  }
LABEL_20:
  result = v16;
  v16 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_19C2A7EB4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  if (*(char *)(v1 - 57) < 0)
    operator delete(*(void **)(v1 - 80));
  v3 = *(_QWORD *)(v1 - 56);
  *(_QWORD *)(v1 - 56) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_19C2A7F14(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  std::string *p_p;
  std::string::size_type size;
  std::string __p;
  char v10;
  uint64_t v11;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 16))(&v11);
  if (v11)
  {
    v10 = 1;
    v1 = sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)"sentencepiece_processor.cc", 26);
    sub_19C2A1B24(v1, (uint64_t)"(", 1);
    v2 = (_QWORD *)std::ostream::operator<<();
    v3 = sub_19C2A1B24(v2, (uint64_t)") [", 3);
    v4 = sub_19C2A1B24(v3, (uint64_t)"_status.ok()", 12);
    v5 = sub_19C2A1B24(v4, (uint64_t)"] ", 2);
    sub_19C2CD6DC((uint64_t)&v11, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    sub_19C2A1B24(v5, (uint64_t)p_p, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    sub_19C2A0AD8(&v10);
  }
  return sub_19C2CD3C8(&v11);
}

void sub_19C2A8008(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  sub_19C2A0AD8((_BYTE *)(v15 - 25));
  sub_19C2CD3C8((uint64_t *)(v15 - 24));
  _Unwind_Resume(a1);
}

uint64_t sub_19C2A8040(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  sub_19C2A7BA0(&v9);
  sub_19C2C91A8(v9, a2);
  v8 = v9;
  v9 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 40))(a1, &v8);
  v4 = v8;
  v8 = 0;
  if (v4)
  {
    v5 = sub_19C2C8108(v4);
    MEMORY[0x1A1AD355C](v5, 0x10A1C4047CE62CFLL);
  }
  result = v9;
  v9 = 0;
  if (result)
  {
    v7 = sub_19C2C8108(result);
    return MEMORY[0x1A1AD355C](v7, 0x10A1C4047CE62CFLL);
  }
  return result;
}

void sub_19C2A80F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_19C2B46BC(&a9, 0);
  sub_19C2B46BC(&a10, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_19C2A811C@<X0>(uint64_t a1@<X0>, char *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  _QWORD v15[11];
  char v16;
  uint64_t v17;
  uint64_t v18;

  sub_19C2A7BA0(&v18);
  if ((sub_19C2DA7F4(v18, a2, a3) & 1) != 0)
  {
    v8 = v18;
    v18 = 0;
    v13 = v8;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 40))(a1, &v13);
    v9 = v13;
    v13 = 0;
    if (v9)
    {
      v10 = sub_19C2C8108(v9);
      MEMORY[0x1A1AD355C](v10, 0x10A1C4047CE62CFLL);
    }
  }
  else
  {
    v14 = 13;
    sub_19C2A09EC((uint64_t)v15);
    sub_19C2A1B24(v15, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_19C2A1B24(v15, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_19C2A1B24(v15, (uint64_t)") [", 3);
    sub_19C2A1B24(v15, (uint64_t)"model_proto->ParseFromArray(serialized.data(), serialized.size())", 65);
    sub_19C2A1B24(v15, (uint64_t)"] ", 2);
    sub_19C29E5C0(&v14, a4);
    v15[0] = *MEMORY[0x1E0DE4F60];
    *(_QWORD *)((char *)v15 + *(_QWORD *)(v15[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
    v15[1] = MEMORY[0x1E0DE4FB8] + 16;
    if (v16 < 0)
      operator delete((void *)v15[9]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x1A1AD34CC](&v17);
  }
  result = v18;
  v18 = 0;
  if (result)
  {
    v12 = sub_19C2C8108(result);
    return MEMORY[0x1A1AD355C](v12, 0x10A1C4047CE62CFLL);
  }
  return result;
}

void sub_19C2A82E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_19C2B46BC((uint64_t *)(v1 - 56), 0);
  _Unwind_Resume(a1);
}

void sub_19C2A8324(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  _BYTE *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  std::string::size_type v22;
  uint64_t v23;
  std::string::size_type v24;
  void *v25;
  void *v26;
  std::string::size_type v27;
  uint64_t v28;
  std::string::size_type v29;
  _QWORD *v30;
  std::string *v31;
  _QWORD *v32;
  unint64_t v33;
  std::string::size_type v34;
  uint64_t v35;
  std::string::size_type v36;
  uint64_t v37;
  uint64_t v38;
  int *v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  int v49;
  const std::string::value_type *v50;
  std::string::size_type v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  int v55;
  const std::string::value_type *v56;
  std::string::size_type v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  std::string *v61;
  std::string::size_type size;
  unint64_t v63;
  size_t v64;
  void *v65;
  _OWORD *v66;
  __int128 v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  char *v71;
  std::string::size_type v72;
  __int128 v73;
  char *v74;
  _QWORD *v75;
  _QWORD *v76;
  _QWORD *v77;
  _QWORD *v78;
  _QWORD *v79;
  _QWORD *v80;
  _QWORD *v81;
  uint64_t v82;
  char *v83;
  _QWORD *v84;
  _QWORD *v85;
  _QWORD *v86;
  _QWORD *v87;
  _QWORD *v88;
  _QWORD *v89;
  _QWORD *v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  std::string __p;
  std::string v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  unint64_t v101;
  std::string v102;
  char *v103;
  unint64_t *v104;

  v6 = *a2;
  v7 = *(_BYTE **)(*a2 + 88);
  if (!v7)
    v7 = &unk_1EE41C7A8;
  if (v7[80])
  {
    if ((int)sub_19C2CB68C() <= 0)
    {
      v102.__r_.__value_.__s.__data_[0] = 0;
      v8 = sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)"sentencepiece_processor.cc", 26);
      sub_19C2A1B24(v8, (uint64_t)"(", 1);
      v9 = (_QWORD *)std::ostream::operator<<();
      v10 = sub_19C2A1B24(v9, (uint64_t)") ", 2);
      v11 = sub_19C2A1B24(v10, (uint64_t)"LOG(", 4);
      v12 = sub_19C2A1B24(v11, (uint64_t)"INFO", 4);
      v13 = sub_19C2A1B24(v12, (uint64_t)") ", 2);
      sub_19C2A1B24(v13, (uint64_t)"Enable Apple addition for backward compatibility", 48);
      sub_19C2A0AD8(&v102);
    }
    v6 = *a2;
    *(_DWORD *)(v6 + 48) = *(_DWORD *)(*a2 + 48) | 1;
    v14 = *(_QWORD *)(v6 + 80);
    if (!v14)
    {
      v15 = *(_QWORD *)(v6 + 8);
      v16 = (_QWORD *)(v15 & 0xFFFFFFFFFFFFFFFELL);
      if ((v15 & 1) != 0)
        v16 = (_QWORD *)*v16;
      v14 = sub_19C2C9424((uint64_t)v16);
      *(_QWORD *)(v6 + 80) = v14;
      v6 = *a2;
    }
    *(_DWORD *)(v14 + 40) |= 0x4000u;
    *(_BYTE *)(v14 + 245) = 1;
    *(_DWORD *)(v6 + 48) |= 2u;
    v17 = *(_QWORD *)(v6 + 88);
    if (!v17)
    {
      v18 = *(_QWORD *)(v6 + 8);
      v19 = (_QWORD *)(v18 & 0xFFFFFFFFFFFFFFFELL);
      if ((v18 & 1) != 0)
        v19 = (_QWORD *)*v19;
      v17 = sub_19C2C94D8((uint64_t)v19);
      *(_QWORD *)(v6 + 88) = v17;
      v6 = *a2;
    }
    *(_DWORD *)(v17 + 48) |= 0x10u;
    *(_BYTE *)(v17 + 81) = 1;
  }
  *a2 = 0;
  if (v6)
    v20 = v6 + 16;
  else
    v20 = 0;
  v21 = a1[4];
  a1[4] = v20;
  if (v21)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
    v20 = a1[4];
  }
  sub_19C2A6F00(v20 - 16, &v102);
  v22 = v102.__r_.__value_.__r.__words[0];
  v102.__r_.__value_.__r.__words[0] = 0;
  v23 = a1[1];
  a1[1] = v22;
  if (v23)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
    v24 = v102.__r_.__value_.__r.__words[0];
    v102.__r_.__value_.__r.__words[0] = 0;
    if (v24)
      (*(void (**)(std::string::size_type))(*(_QWORD *)v24 + 8))(v24);
  }
  if (*(_QWORD *)(v20 + 72))
    v25 = *(void **)(v20 + 72);
  else
    v25 = &unk_1EE41C7A8;
  if (*(_QWORD *)(v20 + 64))
    v26 = *(void **)(v20 + 64);
  else
    v26 = &unk_1EE41C660;
  sub_19C2A8C4C((uint64_t)v25, (uint64_t)v26, (uint64_t *)&v102);
  v27 = v102.__r_.__value_.__r.__words[0];
  v102.__r_.__value_.__r.__words[0] = 0;
  v28 = a1[2];
  a1[2] = v27;
  if (v28)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
    v29 = v102.__r_.__value_.__r.__words[0];
    v102.__r_.__value_.__r.__words[0] = 0;
    if (v29)
      (*(void (**)(std::string::size_type))(*(_QWORD *)v29 + 8))(v29);
  }
  if ((*(_DWORD *)(v20 + 32) & 8) != 0)
  {
    v30 = *(_QWORD **)(v20 + 88);
    if (!v30)
    {
      sub_19C2CF5C8((uint64_t)&v102, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.h", 4990);
      v31 = sub_19C2CF5E0(&v102, "CHECK failed: !value || denormalizer_spec_ != nullptr: ");
      sub_19C2CF710((uint64_t)&v99, (const char **)&v31->__r_.__value_.__l.__data_);
      sub_19C2CF718((uint64_t)&v102);
      v30 = *(_QWORD **)(v20 + 88);
    }
    if (v30)
      v32 = v30;
    else
      v32 = &unk_1EE41C7A8;
    v33 = v32[8] & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v33 + 23) < 0)
    {
      if (!*(_QWORD *)(v33 + 8))
        goto LABEL_45;
    }
    else if (!*(_BYTE *)(v33 + 23))
    {
      goto LABEL_45;
    }
    sub_19C2A8CC8((uint64_t)v32, (uint64_t *)&v102);
    v34 = v102.__r_.__value_.__r.__words[0];
    v102.__r_.__value_.__r.__words[0] = 0;
    v35 = a1[3];
    a1[3] = v34;
    if (v35)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
      v36 = v102.__r_.__value_.__r.__words[0];
      v102.__r_.__value_.__r.__words[0] = 0;
      if (v36)
        (*(void (**)(std::string::size_type))(*(_QWORD *)v36 + 8))(v36);
    }
  }
LABEL_45:
  v37 = a1[2];
  v38 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)a1[1] + 32))(a1[1]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v37 + 16))(v37, v38);
  (*(void (**)(_QWORD *))(*a1 + 88))(a1);
  if (!*a3)
  {
    sub_19C2CD3C8(a3);
    v99 = 0;
    v100 = 0;
    v101 = 0;
    v96 = 0;
    v97 = 0;
    v98 = 0;
    v39 = *(int **)(v20 + 80);
    if (!v39)
      v39 = (int *)&unk_1EE41C840;
    v40 = *((_QWORD *)v39 + 7);
    if (v40)
      v41 = (uint64_t *)(v40 + 8);
    else
      v41 = 0;
    v42 = v39[12];
    if ((_DWORD)v42)
    {
      v43 = &v41[v42];
      while (1)
      {
        v44 = *v41;
        v45 = *(_QWORD *)(*v41 + 24) & 0xFFFFFFFFFFFFFFFELL;
        if (*(char *)(v45 + 23) < 0)
        {
          v47 = *(_QWORD *)v45;
          v46 = *(_QWORD *)(v45 + 8);
        }
        else
        {
          v46 = *(unsigned __int8 *)(v45 + 23);
          v47 = *(_QWORD *)(*v41 + 24) & 0xFFFFFFFFFFFFFFFELL;
        }
        (*(void (**)(_QWORD *, unint64_t, uint64_t, uint64_t *))(*a1 + 136))(a1, v47, v46, &v96);
        if (*a3)
          break;
        sub_19C2CD3C8(a3);
        memset(&v95, 0, sizeof(v95));
        v48 = v96;
        if (v96 == v97)
        {
          v52 = v96;
        }
        else
        {
          v49 = *(char *)(v96 + 23);
          if (v49 >= 0)
            v50 = (const std::string::value_type *)v96;
          else
            v50 = *(const std::string::value_type **)v96;
          if (v49 >= 0)
            v51 = *(unsigned __int8 *)(v96 + 23);
          else
            v51 = *(_QWORD *)(v96 + 8);
          std::string::append(&v95, v50, v51);
          v48 = v96;
          v52 = v97;
        }
        if (0xAAAAAAAAAAAAAAABLL * ((v52 - v48) >> 3) >= 2)
        {
          v53 = 0;
          v54 = 1;
          do
          {
            std::string::append(&v95, " ", 1uLL);
            v55 = *(char *)(v96 + v53 + 47);
            if (v55 >= 0)
              v56 = (const std::string::value_type *)(v96 + v53 + 24);
            else
              v56 = *(const std::string::value_type **)(v96 + v53 + 24);
            if (v55 >= 0)
              v57 = *(unsigned __int8 *)(v96 + v53 + 47);
            else
              v57 = *(_QWORD *)(v96 + v53 + 32);
            std::string::append(&v95, v56, v57);
            ++v54;
            v53 += 24;
          }
          while (v54 < 0xAAAAAAAAAAAAAAABLL * ((v97 - v96) >> 3));
        }
        v58 = *(_QWORD *)(v44 + 32) & 0xFFFFFFFFFFFFFFFELL;
        if (*(char *)(v58 + 23) < 0)
        {
          v60 = *(_QWORD *)v58;
          v59 = *(_QWORD *)(v58 + 8);
        }
        else
        {
          v59 = *(unsigned __int8 *)(v58 + 23);
          v60 = *(_QWORD *)(v44 + 32) & 0xFFFFFFFFFFFFFFFELL;
        }
        if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v61 = &v95;
        else
          v61 = (std::string *)v95.__r_.__value_.__r.__words[0];
        if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v95.__r_.__value_.__r.__words[2]);
        else
          size = v95.__r_.__value_.__l.__size_;
        if (((*(uint64_t (**)(_QWORD, unint64_t, uint64_t, std::string *, std::string::size_type))(*(_QWORD *)a1[1] + 192))(a1[1], v60, v59, v61, size) & 1) == 0)
        {
          v63 = *(_QWORD *)(v44 + 24) & 0xFFFFFFFFFFFFFFFELL;
          if (*(char *)(v63 + 23) < 0)
          {
            v65 = *(void **)v63;
            v64 = *(_QWORD *)(v63 + 8);
          }
          else
          {
            v64 = *(unsigned __int8 *)(v63 + 23);
            v65 = (void *)(*(_QWORD *)(v44 + 24) & 0xFFFFFFFFFFFFFFFELL);
          }
          sub_19C2A8D3C(v65, v64, "\t", (void **)(*(_QWORD *)(v44 + 32) & 0xFFFFFFFFFFFFFFFELL), "\t", (void **)&v95.__r_.__value_.__l.__data_, &__p);
          v66 = v100;
          if ((unint64_t)v100 >= v101)
          {
            v68 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v100[-v99] >> 3);
            v69 = v68 + 1;
            if (v68 + 1 > 0xAAAAAAAAAAAAAAALL)
              sub_19C2A18E8();
            if (0x5555555555555556 * ((uint64_t)(v101 - v99) >> 3) > v69)
              v69 = 0x5555555555555556 * ((uint64_t)(v101 - v99) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v101 - v99) >> 3) >= 0x555555555555555)
              v70 = 0xAAAAAAAAAAAAAAALL;
            else
              v70 = v69;
            v104 = &v101;
            if (v70)
              v71 = (char *)sub_19C2A18FC((uint64_t)&v101, v70);
            else
              v71 = 0;
            v72 = (std::string::size_type)&v71[24 * v68];
            v102.__r_.__value_.__r.__words[0] = (std::string::size_type)v71;
            v102.__r_.__value_.__l.__size_ = v72;
            v103 = &v71[24 * v70];
            v73 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
            *(_QWORD *)(v72 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
            *(_OWORD *)v72 = v73;
            memset(&__p, 0, sizeof(__p));
            v102.__r_.__value_.__r.__words[2] = v72 + 24;
            sub_19C2B49D0(&v99, &v102);
            v74 = v100;
            sub_19C2B4B58((uint64_t)&v102);
            v100 = v74;
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
          }
          else
          {
            v67 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
            *((_QWORD *)v100 + 2) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
            *v66 = v67;
            v100 = (char *)v66 + 24;
          }
        }
        if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v95.__r_.__value_.__l.__data_);
        if (++v41 == v43)
        {
          if ((char *)v99 == v100)
            goto LABEL_119;
          if ((int)sub_19C2CB68C() <= 0)
          {
            v102.__r_.__value_.__s.__data_[0] = 0;
            v75 = sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)"sentencepiece_processor.cc", 26);
            sub_19C2A1B24(v75, (uint64_t)"(", 1);
            v76 = (_QWORD *)std::ostream::operator<<();
            v77 = sub_19C2A1B24(v76, (uint64_t)") ", 2);
            v78 = sub_19C2A1B24(v77, (uint64_t)"LOG(", 4);
            v79 = sub_19C2A1B24(v78, (uint64_t)"INFO", 4);
            sub_19C2A1B24(v79, (uint64_t)") ", 2);
            v80 = (_QWORD *)std::ostream::operator<<();
            sub_19C2A1B24(v80, (uint64_t)"/", 1);
            v81 = (_QWORD *)std::ostream::operator<<();
            sub_19C2A1B24(v81, (uint64_t)" samples did not pass the test.", 31);
            sub_19C2A0AD8(&v102);
          }
          v82 = v99;
          v83 = v100;
          if ((char *)v99 != v100)
          {
            v84 = (_QWORD *)MEMORY[0x1E0DE4A50];
            do
            {
              if ((int)sub_19C2CB68C() <= 0)
              {
                v102.__r_.__value_.__s.__data_[0] = 0;
                v85 = sub_19C2A1B24(v84, (uint64_t)"sentencepiece_processor.cc", 26);
                sub_19C2A1B24(v85, (uint64_t)"(", 1);
                v86 = (_QWORD *)std::ostream::operator<<();
                v87 = sub_19C2A1B24(v86, (uint64_t)") ", 2);
                v88 = sub_19C2A1B24(v87, (uint64_t)"LOG(", 4);
                v89 = sub_19C2A1B24(v88, (uint64_t)"INFO", 4);
                v90 = sub_19C2A1B24(v89, (uint64_t)") ", 2);
                v91 = *(char *)(v82 + 23);
                if (v91 >= 0)
                  v92 = v82;
                else
                  v92 = *(_QWORD *)v82;
                if (v91 >= 0)
                  v93 = *(unsigned __int8 *)(v82 + 23);
                else
                  v93 = *(_QWORD *)(v82 + 8);
                sub_19C2A1B24(v90, v92, v93);
                sub_19C2A0AD8(&v102);
              }
              v82 += 24;
            }
            while ((char *)v82 != v83);
          }
          sub_19C2CD524(a3, 13, "Self-test failures. See LOG(INFO).", 34);
          break;
        }
      }
    }
    else
    {
LABEL_119:
      sub_19C2CD3C0(a3);
    }
    v102.__r_.__value_.__r.__words[0] = (std::string::size_type)&v96;
    sub_19C2B3E94((void ***)&v102);
    v102.__r_.__value_.__r.__words[0] = (std::string::size_type)&v99;
    sub_19C2B3E94((void ***)&v102);
  }
}

void sub_19C2A8B90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,char a28)
{
  sub_19C2CF718((uint64_t)&a28);
  _Unwind_Resume(a1);
}

uint64_t sub_19C2A8C4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t result;

  v6 = operator new();
  result = sub_19C2A554C(v6, a1, a2);
  *a3 = v6;
  return result;
}

void sub_19C2A8CA4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD355C](v1, 0x10F1C40C7D4252BLL);
  _Unwind_Resume(a1);
}

uint64_t sub_19C2A8CC8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  result = sub_19C2A5604(v4, a1);
  *a2 = v4;
  return result;
}

void sub_19C2A8D18(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD355C](v1, 0x10F1C40C7D4252BLL);
  _Unwind_Resume(a1);
}

void sub_19C2A8D3C(void *__src@<X0>, size_t __len@<X1>, char *a3@<X2>, void **a4@<X3>, char *a5@<X4>, void **a6@<X5>, std::string *a7@<X8>)
{
  size_t v12;
  std::string *p_p;
  std::string::size_type size;
  std::string *v15;
  std::string __p;
  std::string __dst;

  sub_19C2A6CA0(&__dst, __src, __len);
  v12 = strlen(a3);
  sub_19C2B46F8(a3, v12, a4, a5, a6, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v15 = std::string::append(&__dst, (const std::string::value_type *)p_p, size);
  *a7 = *v15;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
}

void sub_19C2A8E10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void sub_19C2A8E44(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  sub_19C2A8E4C((uint64_t *)a1, a2, a3, (char **)(a1 + 40), a4);
}

void sub_19C2A8E4C(uint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, char **a4@<X3>, uint64_t *a5@<X8>)
{
  unsigned __int8 v10;
  uint64_t *v11;
  uint64_t *v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  int v25;
  int v26;
  const char *v27;
  size_t v28;
  uint64_t v29;
  const char *v30;
  size_t v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  void *v37;
  uint64_t *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  void *__p[2];
  __int128 v45;
  uint64_t v46;
  _QWORD v47[21];

  v47[19] = *MEMORY[0x1E0C80C00];
  a4[1] = *a4;
  if (a3)
  {
    (*(void (**)(uint64_t *))(*a1 + 88))(a1);
    if (!*a5)
    {
      sub_19C2CD3C8(a5);
      v10 = atomic_load((unsigned __int8 *)&qword_1EE41C0F0);
      if ((v10 & 1) == 0 && __cxa_guard_acquire(&qword_1EE41C0F0))
      {
        v43 = xmmword_1E3D39F30;
        *(_OWORD *)__p = unk_1E3D39F40;
        v45 = xmmword_1E3D39F50;
        v46 = 3;
        v39 = xmmword_1E3D39EF0;
        v40 = unk_1E3D39F00;
        v41 = xmmword_1E3D39F10;
        v42 = *(_OWORD *)&off_1E3D39F20;
        sub_19C2B6A30((uint64_t)&unk_1EE41C0D8, (uint64_t)&v39, 5);
        __cxa_atexit((void (*)(void *))sub_19C2B1220, &unk_1EE41C0D8, &dword_19C291000);
        __cxa_guard_release(&qword_1EE41C0F0);
      }
      sub_19C2B3B2C((char **)&v37, a2, a3, ":", 1, 0);
      v11 = (uint64_t *)v37;
      v12 = v38;
      if (v37 == v38)
      {
LABEL_29:
        if (v11)
        {
          v38 = v11;
          operator delete(v11);
        }
        sub_19C2CD3C0(a5);
      }
      else
      {
        while (1)
        {
          v13 = sub_19C2B4E7C((uint64_t)&unk_1EE41C0D8, (uint64_t)v11);
          v14 = v13;
          if (v13 == (_QWORD *)&unk_1EE41C0E0)
            break;
          v16 = a4[1];
          v15 = (unint64_t)a4[2];
          if ((unint64_t)v16 >= v15)
          {
            v18 = *a4;
            v19 = (v16 - *a4) >> 2;
            v20 = v19 + 1;
            if ((unint64_t)(v19 + 1) >> 62)
              sub_19C2A18E8();
            v21 = v15 - (_QWORD)v18;
            if (v21 >> 1 > v20)
              v20 = v21 >> 1;
            if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFFCLL)
              v22 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v22 = v20;
            if (v22)
            {
              v23 = (char *)sub_19C2A27D8((uint64_t)(a4 + 2), v22);
              v18 = *a4;
              v16 = a4[1];
            }
            else
            {
              v23 = 0;
            }
            v24 = &v23[4 * v19];
            *(_DWORD *)v24 = *((_DWORD *)v14 + 12);
            v17 = v24 + 4;
            while (v16 != v18)
            {
              v25 = *((_DWORD *)v16 - 1);
              v16 -= 4;
              *((_DWORD *)v24 - 1) = v25;
              v24 -= 4;
            }
            *a4 = v24;
            a4[1] = v17;
            a4[2] = &v23[4 * v22];
            if (v18)
              operator delete(v18);
          }
          else
          {
            *(_DWORD *)v16 = *((_DWORD *)v13 + 12);
            v17 = v16 + 4;
          }
          a4[1] = v17;
          v26 = *((_DWORD *)v14 + 12);
          if (v26 == 1)
          {
            v27 = sub_19C29E888(a1[1]);
            v28 = strlen(v27);
            v29 = (*(uint64_t (**)(uint64_t *, const char *, size_t))(*a1 + 504))(a1, v27, v28);
            if (((*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 528))(a1, v29) & 1) != 0)
            {
              LODWORD(v39) = 13;
              sub_19C2A09EC((uint64_t)&v39 + 8);
              sub_19C2A1B24((_QWORD *)&v39 + 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
              sub_19C2A1B24((_QWORD *)&v39 + 1, (uint64_t)"(", 1);
              std::ostream::operator<<();
              sub_19C2A1B24((_QWORD *)&v39 + 1, (uint64_t)") [", 3);
              sub_19C2A1B24((_QWORD *)&v39 + 1, (uint64_t)"!IsUnknown(PieceToId(absl::string_view(model_->bos_piece().data())))", 68);
              sub_19C2A1B24((_QWORD *)&v39 + 1, (uint64_t)"] ", 2);
              v33 = sub_19C29E888(a1[1]);
              sub_19C2A1B24((_QWORD *)&v39 + 1, (uint64_t)v33, v34);
              sub_19C29E5C0((unsigned int *)&v39, (uint64_t)a5);
              goto LABEL_38;
            }
            v26 = *((_DWORD *)v14 + 12);
          }
          if (v26 == 2)
          {
            v30 = sub_19C29E8D8(a1[1]);
            v31 = strlen(v30);
            v32 = (*(uint64_t (**)(uint64_t *, const char *, size_t))(*a1 + 504))(a1, v30, v31);
            if (((*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 528))(a1, v32) & 1) != 0)
            {
              LODWORD(v39) = 13;
              sub_19C2A09EC((uint64_t)&v39 + 8);
              sub_19C2A1B24((_QWORD *)&v39 + 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
              sub_19C2A1B24((_QWORD *)&v39 + 1, (uint64_t)"(", 1);
              std::ostream::operator<<();
              sub_19C2A1B24((_QWORD *)&v39 + 1, (uint64_t)") [", 3);
              sub_19C2A1B24((_QWORD *)&v39 + 1, (uint64_t)"!IsUnknown(PieceToId(absl::string_view(model_->eos_piece().data())))", 68);
              sub_19C2A1B24((_QWORD *)&v39 + 1, (uint64_t)"] ", 2);
              v35 = sub_19C29E8D8(a1[1]);
              sub_19C2A1B24((_QWORD *)&v39 + 1, (uint64_t)v35, v36);
              sub_19C29E5C0((unsigned int *)&v39, (uint64_t)a5);
LABEL_38:
              *((_QWORD *)&v39 + 1) = *MEMORY[0x1E0DE4F60];
              *(_QWORD *)((char *)&v39 + *(_QWORD *)(*((_QWORD *)&v39 + 1) - 24) + 8) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
              *(_QWORD *)&v40 = MEMORY[0x1E0DE4FB8] + 16;
              if (SBYTE7(v45) < 0)
                operator delete(__p[0]);
              goto LABEL_40;
            }
          }
          v11 += 2;
          if (v11 == v12)
          {
            v11 = (uint64_t *)v37;
            goto LABEL_29;
          }
        }
        LODWORD(v39) = 13;
        sub_19C2A09EC((uint64_t)&v39 + 8);
        sub_19C2A1B24((_QWORD *)&v39 + 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        sub_19C2A1B24((_QWORD *)&v39 + 1, (uint64_t)"(", 1);
        std::ostream::operator<<();
        sub_19C2A1B24((_QWORD *)&v39 + 1, (uint64_t)") [", 3);
        sub_19C2A1B24((_QWORD *)&v39 + 1, (uint64_t)"it != extra_option_map.end()", 28);
        sub_19C2A1B24((_QWORD *)&v39 + 1, (uint64_t)"] ", 2);
        sub_19C2A1B24((_QWORD *)&v39 + 1, (uint64_t)"option \"", 8);
        sub_19C2A1B24((_QWORD *)&v39 + 1, *v11, v11[1]);
        sub_19C2A1B24((_QWORD *)&v39 + 1, (uint64_t)"\" is not available.", 19);
        sub_19C29E5C0((unsigned int *)&v39, (uint64_t)a5);
        *((_QWORD *)&v39 + 1) = *MEMORY[0x1E0DE4F60];
        *(_QWORD *)((char *)&v39 + *(_QWORD *)(*((_QWORD *)&v39 + 1) - 24) + 8) = *(_QWORD *)(MEMORY[0x1E0DE4F60]
                                                                                              + 24);
        *(_QWORD *)&v40 = MEMORY[0x1E0DE4FB8] + 16;
        if (SBYTE7(v45) < 0)
          operator delete(__p[0]);
LABEL_40:
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x1A1AD34CC](v47);
        if (v37)
        {
          v38 = (uint64_t *)v37;
          operator delete(v37);
        }
      }
    }
  }
  else
  {
    sub_19C2CD3C0(a5);
  }
}

void sub_19C2A94F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  __cxa_guard_abort(&qword_1EE41C0F0);
  _Unwind_Resume(a1);
}

void sub_19C2A956C(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  sub_19C2A8E4C((uint64_t *)a1, a2, a3, (char **)(a1 + 64), a4);
}

_QWORD *sub_19C2A9574@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  _QWORD *result;
  uint64_t *v6;
  _QWORD *v7;
  _QWORD *v8;
  unsigned int v9;
  _QWORD v10[11];
  char v11;
  uint64_t v12;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    if (*(_QWORD *)(a1 + 16))
    {
      result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
      if (!*a2)
      {
        sub_19C2CD3C8(a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16));
        if (!*a2)
        {
          v6 = sub_19C2CD3C8(a2);
          return sub_19C2CD3C0(v6);
        }
      }
      return result;
    }
    v9 = 13;
    v8 = (_QWORD *)sub_19C2A09EC((uint64_t)v10);
    sub_19C2A1B24(v8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_19C2A1B24(v10, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_19C2A1B24(v10, (uint64_t)") [", 3);
    sub_19C2A1B24(v10, (uint64_t)"normalizer_", 11);
    sub_19C2A1B24(v10, (uint64_t)"] ", 2);
    sub_19C2A1B24(v10, (uint64_t)"Normalizer is not initialized.", 30);
    sub_19C29E5C0(&v9, (uint64_t)a2);
  }
  else
  {
    v9 = 13;
    v7 = (_QWORD *)sub_19C2A09EC((uint64_t)v10);
    sub_19C2A1B24(v7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_19C2A1B24(v10, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_19C2A1B24(v10, (uint64_t)") [", 3);
    sub_19C2A1B24(v10, (uint64_t)"model_", 6);
    sub_19C2A1B24(v10, (uint64_t)"] ", 2);
    sub_19C2A1B24(v10, (uint64_t)"Model is not initialized.", 25);
    sub_19C29E5C0(&v9, (uint64_t)a2);
  }
  v10[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v10 + *(_QWORD *)(v10[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v10[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v11 < 0)
    operator delete((void *)v10[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return (_QWORD *)MEMORY[0x1A1AD34CC](&v12);
}

void sub_19C2A97CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_19C29E64C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19C2A97EC(_QWORD *a1@<X0>, _OWORD **a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  _QWORD *v7;
  _DWORD *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  int v18;
  _QWORD *v19;
  _QWORD v20[2];
  unsigned int v21;
  _QWORD *v22[11];
  char v23;
  uint64_t v24;

  (*(void (**)(uint64_t *__return_ptr))(*a1 + 88))(a3);
  if (*a3)
    return;
  sub_19C2CD3C8(a3);
  v6 = a1[4];
  if (!v6 || *(_UNKNOWN **)v6 != &unk_1E3D33B90)
  {
    v21 = 13;
    v7 = (_QWORD *)sub_19C2A09EC((uint64_t)v22);
    sub_19C2A1B24(v7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_19C2A1B24(v22, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_19C2A1B24(v22, (uint64_t)") [", 3);
    sub_19C2A1B24(v22, (uint64_t)"(model_proto = dynamic_cast<ModelProto *>(model_proto_.get()))", 62);
    sub_19C2A1B24(v22, (uint64_t)"] ", 2);
    sub_19C2A1B24(v22, (uint64_t)"SetVocabulary is not supported when mmap-based model is loaded.", 63);
    sub_19C29E5C0(&v21, (uint64_t)a3);
LABEL_5:
    v22[0] = *(_QWORD **)MEMORY[0x1E0DE4F60];
    *(_QWORD **)((char *)v22 + *(v22[0] - 3)) = *(_QWORD **)(MEMORY[0x1E0DE4F60] + 24);
    v22[1] = (_QWORD *)(MEMORY[0x1E0DE4FB8] + 16);
    if (v23 < 0)
      operator delete(v22[9]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x1A1AD34CC](&v24);
    return;
  }
  v8 = &unk_1EE41C660;
  if (*(_QWORD *)(v6 + 64))
    v8 = *(_DWORD **)(v6 + 64);
  if ((v8[68] - 1) >= 2)
  {
    v21 = 13;
    v19 = (_QWORD *)sub_19C2A09EC((uint64_t)v22);
    sub_19C2A1B24(v19, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_19C2A1B24(v22, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_19C2A1B24(v22, (uint64_t)") [", 3);
    sub_19C2A1B24(v22, (uint64_t)"type == TrainerSpec::UNIGRAM || type == TrainerSpec::BPE", 56);
    sub_19C2A1B24(v22, (uint64_t)"] ", 2);
    sub_19C2A1B24(v22, (uint64_t)"Vocabulary constraint is only enabled in subword units.", 55);
    sub_19C29E5C0(&v21, (uint64_t)a3);
    goto LABEL_5;
  }
  sub_19C2B4BE0((uint64_t)&v21, *a2, a2[1]);
  if (*(int *)(v6 + 48) >= 1)
  {
    v9 = 0;
    do
    {
      v10 = sub_19C2B3A50(v6 + 40, v9);
      v11 = v10;
      if ((*(_DWORD *)(v10 + 60) - 2) >= 3)
      {
        v12 = *(_QWORD *)(v10 + 48) & 0xFFFFFFFFFFFFFFFELL;
        if (*(char *)(v12 + 23) < 0)
        {
          v14 = *(_QWORD *)v12;
          v13 = *(_QWORD *)(v12 + 8);
        }
        else
        {
          v13 = *(unsigned __int8 *)(v12 + 23);
          v14 = *(_QWORD *)(v10 + 48) & 0xFFFFFFFFFFFFFFFELL;
        }
        v20[0] = v14;
        v20[1] = v13;
        if (v22 == sub_19C2B4E7C((uint64_t)&v21, (uint64_t)v20)
          && ((v15 = *(_QWORD *)(v11 + 48) & 0xFFFFFFFFFFFFFFFELL, *(char *)(v15 + 23) < 0)
            ? (unsigned __int8 *)(v17 = *(unsigned __int8 **)v15, v16 = *(_QWORD *)(v15 + 8))
            : (v16 = *(unsigned __int8 *)(v15 + 23),
               v17 = (unsigned __int8 *)(*(_QWORD *)(v11 + 48) & 0xFFFFFFFFFFFFFFFELL)),
              v16 != asc_19C45F89C[(unint64_t)*v17 >> 4]))
        {
          if (!sub_19C2C1D70(5))
LABEL_32:
            __assert_rtn("_internal_set_type", "sentencepiece_model.pb.h", 4686, "::sentencepiece::ModelProto_SentencePiece_Type_IsValid(value)");
          v18 = 5;
        }
        else
        {
          if (!sub_19C2C1D70(1))
            goto LABEL_32;
          v18 = 1;
        }
        *(_DWORD *)(v11 + 40) |= 4u;
        *(_DWORD *)(v11 + 60) = v18;
      }
      ++v9;
    }
    while (v9 < *(_DWORD *)(v6 + 48));
  }
  sub_19C2CD3C0(a3);
  sub_19C2A1E6C((uint64_t)&v21, v22[0]);
}

void sub_19C2A9B8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, _QWORD *a12)
{
  sub_19C2A1E6C((uint64_t)&a11, a12);
  _Unwind_Resume(a1);
}

_QWORD *sub_19C2A9BCC@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  _QWORD v13[11];
  char v14;
  uint64_t v15;

  result = (*(_QWORD *(**)(uint64_t *__return_ptr))(*a1 + 88))(a2);
  if (!*a2)
  {
    sub_19C2CD3C8(a2);
    v5 = a1[4];
    if (v5 && *(_UNKNOWN **)v5 == &unk_1E3D33B90)
    {
      v7 = *(_QWORD *)(v5 + 56);
      if (v7)
        v8 = (uint64_t *)(v7 + 8);
      else
        v8 = 0;
      v9 = *(int *)(v5 + 48);
      if ((_DWORD)v9)
      {
        v10 = 8 * v9;
        do
        {
          v11 = *v8;
          if (*(_DWORD *)(*v8 + 60) == 5)
          {
            if (!sub_19C2C1D70(1))
              sub_19C2B70EC();
            *(_DWORD *)(v11 + 40) |= 4u;
            *(_DWORD *)(v11 + 60) = 1;
          }
          ++v8;
          v10 -= 8;
        }
        while (v10);
      }
      return sub_19C2CD3C0(a2);
    }
    else
    {
      v12 = 13;
      v6 = (_QWORD *)sub_19C2A09EC((uint64_t)v13);
      sub_19C2A1B24(v6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_19C2A1B24(v13, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_19C2A1B24(v13, (uint64_t)") [", 3);
      sub_19C2A1B24(v13, (uint64_t)"(model_proto = dynamic_cast<ModelProto *>(model_proto_.get()))", 62);
      sub_19C2A1B24(v13, (uint64_t)"] ", 2);
      sub_19C2A1B24(v13, (uint64_t)"ResetVocabulary is not supported when mmap-based model is loaded.", 65);
      sub_19C29E5C0(&v12, (uint64_t)a2);
      v13[0] = *MEMORY[0x1E0DE4F60];
      *(_QWORD *)((char *)v13 + *(_QWORD *)(v13[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
      v13[1] = MEMORY[0x1E0DE4FB8] + 16;
      if (v14 < 0)
        operator delete((void *)v13[9]);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return (_QWORD *)MEMORY[0x1A1AD34CC](&v15);
    }
  }
  return result;
}

void sub_19C2A9DC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_19C29E64C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_19C2A9DDC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t *a5@<X8>)
{
  void **v8;
  unint64_t v9;
  __int128 *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  __int128 *v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  const char *v18;
  uint64_t v19;
  __int128 *v20;
  __int128 v21;
  __int128 *v22;
  uint64_t result;
  void *__p;
  _QWORD v25[11];
  char v26;
  uint64_t v27;
  __int128 *v28;
  __int128 *v29;
  uint64_t v30;
  __int128 *v31;
  unint64_t v32;
  void **v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37[4];

  sub_19C2CABB4(a2, a3, 0, &v36);
  (*(void (**)(uint64_t))(*(_QWORD *)v36 + 16))(v36);
  if (!*a5)
  {
    sub_19C2CD3C8(a5);
    v33 = 0;
    v34 = 0;
    v35 = 0;
    v30 = 0;
    v31 = 0;
    v32 = 0;
    while ((*(unsigned int (**)(uint64_t, void ***))(*(_QWORD *)v36 + 24))(v36, &v33))
    {
      if (v35 >= 0)
        v8 = (void **)&v33;
      else
        v8 = v33;
      if (v35 >= 0)
        v9 = HIBYTE(v35);
      else
        v9 = v34;
      sub_19C2B3B2C((char **)&__p, (uint64_t)v8, v9, "\t", 1, 0);
      sub_19C2B3DF4(&v28, (uint64_t)(v25[0] - (_QWORD)__p) >> 4);
      v10 = v29;
      if (v29 == v28)
      {
        v14 = v29;
      }
      else
      {
        v11 = 0;
        v12 = 0;
        v13 = 0;
        v10 = v28;
        do
        {
          MEMORY[0x1A1AD31B4]((char *)v10 + v11, *(_QWORD *)((char *)__p + v12), *(_QWORD *)((char *)__p + v12 + 8));
          ++v13;
          v10 = v28;
          v14 = v29;
          v11 += 24;
          v12 += 16;
        }
        while (v13 < 0xAAAAAAAAAAAAAAABLL * (((char *)v29 - (char *)v28) >> 3));
      }
      if (__p)
      {
        v25[0] = __p;
        operator delete(__p);
        v10 = v28;
        v14 = v29;
      }
      v15 = (char *)v14 - (char *)v10;
      if (!v15)
      {
        LODWORD(__p) = 13;
        sub_19C2A09EC((uint64_t)v25);
        sub_19C2A1B24(v25, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        sub_19C2A1B24(v25, (uint64_t)"(", 1);
        std::ostream::operator<<();
        sub_19C2A1B24(v25, (uint64_t)") [", 3);
        sub_19C2A1B24(v25, (uint64_t)"(v.size()) >= (1)", 17);
        sub_19C2A1B24(v25, (uint64_t)"] ", 2);
        sub_19C29E5C0((unsigned int *)&__p, (uint64_t)a5);
LABEL_42:
        v25[0] = *MEMORY[0x1E0DE4F60];
        *(_QWORD *)((char *)v25 + *(_QWORD *)(v25[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
        v25[1] = MEMORY[0x1E0DE4FB8] + 16;
        if (v26 < 0)
          operator delete((void *)v25[9]);
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x1A1AD34CC](&v27);
        __p = &v28;
        sub_19C2B3E94((void ***)&__p);
        goto LABEL_45;
      }
      if (*((char *)v10 + 23) < 0)
      {
        if (!*((_QWORD *)v10 + 1))
        {
LABEL_40:
          LODWORD(__p) = 13;
          sub_19C2A09EC((uint64_t)v25);
          sub_19C2A1B24(v25, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
          sub_19C2A1B24(v25, (uint64_t)"(", 1);
          std::ostream::operator<<();
          sub_19C2A1B24(v25, (uint64_t)") [", 3);
          sub_19C2A1B24(v25, (uint64_t)"!v[0].empty()", 13);
          sub_19C2A1B24(v25, (uint64_t)"] ", 2);
          sub_19C29E5C0((unsigned int *)&__p, (uint64_t)a5);
          goto LABEL_42;
        }
      }
      else if (!*((_BYTE *)v10 + 23))
      {
        goto LABEL_40;
      }
      v16 = 0xAAAAAAAAAAAAAAABLL * (v15 >> 3);
      v17 = 1;
      v37[0] = 1;
      if (v16 >= 2)
      {
        if (*((char *)v10 + 47) < 0)
        {
          v18 = (const char *)*((_QWORD *)v10 + 3);
          v19 = *((_QWORD *)v10 + 4);
        }
        else
        {
          v18 = (char *)v10 + 24;
          v19 = *((unsigned __int8 *)v10 + 47);
        }
        if (!sub_19C2AA3BC(v18, v19, (uint64_t)v37))
        {
          LODWORD(__p) = 13;
          sub_19C2A09EC((uint64_t)v25);
          sub_19C2A1B24(v25, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
          sub_19C2A1B24(v25, (uint64_t)"(", 1);
          std::ostream::operator<<();
          sub_19C2A1B24(v25, (uint64_t)") [", 3);
          sub_19C2A1B24(v25, (uint64_t)"absl::SimpleAtoi(v[1], &freq)", 29);
          sub_19C2A1B24(v25, (uint64_t)"] ", 2);
          sub_19C2A1B24(v25, (uint64_t)"Could not parse the frequency", 29);
          sub_19C29E5C0((unsigned int *)&__p, (uint64_t)a5);
          goto LABEL_42;
        }
        v17 = v37[0];
      }
      if (v17 >= a4)
      {
        v20 = v31;
        if ((unint64_t)v31 >= v32)
        {
          v22 = (__int128 *)sub_19C2B5118(&v30, v28);
        }
        else
        {
          if (*((char *)v28 + 23) < 0)
          {
            sub_19C2B5238(v31, *(void **)v28, *((_QWORD *)v28 + 1));
          }
          else
          {
            v21 = *v28;
            *((_QWORD *)v31 + 2) = *((_QWORD *)v28 + 2);
            *v20 = v21;
          }
          v22 = (__int128 *)((char *)v20 + 24);
        }
        v31 = v22;
      }
      __p = &v28;
      sub_19C2B3E94((void ***)&__p);
    }
    sub_19C2AA4E0(&v30, &__p);
    (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 112))(a1, &__p);
    if (__p)
    {
      v25[0] = __p;
      operator delete(__p);
    }
LABEL_45:
    __p = &v30;
    sub_19C2B3E94((void ***)&__p);
    if (SHIBYTE(v35) < 0)
      operator delete(v33);
  }
  result = v36;
  v36 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_19C2AA2E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  uint64_t v10;
  uint64_t v12;

  __p = (void *)(v10 - 176);
  sub_19C2B3E94((void ***)&__p);
  __p = (void *)(v10 - 152);
  sub_19C2B3E94((void ***)&__p);
  if (*(char *)(v10 - 105) < 0)
    operator delete(*(void **)(v10 - 128));
  v12 = *(_QWORD *)(v10 - 104);
  *(_QWORD *)(v10 - 104) = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  _Unwind_Resume(a1);
}

BOOL sub_19C2AA3BC(const char *a1, uint64_t a2, uint64_t a3)
{
  size_t v5;
  _QWORD *v6;
  _BOOL8 v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD v11[2];
  _QWORD v12[11];
  char v13;
  uint64_t v14;

  sub_19C2B4F08((uint64_t)v11);
  v5 = strlen(a1);
  v6 = sub_19C2A1B24(v12, (uint64_t)a1, v5);
  if ((*((_BYTE *)v6 + *(_QWORD *)(*v6 - 24) + 32) & 5) != 0)
  {
    v7 = 0;
  }
  else
  {
    v8 = (_QWORD *)MEMORY[0x1A1AD3280](v11, a3);
    v7 = (*((_BYTE *)v8 + *(_QWORD *)(*v8 - 24) + 32) & 5) == 0;
  }
  v11[0] = *MEMORY[0x1E0DE4F50];
  v9 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v11 + *(_QWORD *)(v11[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v12[0] = v9;
  v12[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v13 < 0)
    operator delete((void *)v12[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1A1AD34CC](&v14);
  return v7;
}

void sub_19C2AA4CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C2B5034((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_19C2AA4E0@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;

  result = sub_19C2B3F20(a2, 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3));
  v4 = *a1;
  if (a1[1] != *a1)
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    do
    {
      v8 = (_QWORD *)(v4 + v5);
      LODWORD(v4) = *(char *)(v4 + v5 + 23);
      if ((v4 & 0x80000000) != 0)
      {
        v9 = (_QWORD *)*v8;
        v4 = v8[1];
      }
      else
      {
        v4 = v4;
        v9 = v8;
      }
      v10 = (_QWORD *)(*result + v6);
      *v10 = v9;
      v10[1] = v4;
      ++v7;
      v4 = *a1;
      v6 += 16;
      v5 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3) > v7);
  }
  return result;
}

_QWORD *sub_19C2AA580@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X8>)
{
  _QWORD *result;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  __int128 *v14;
  _QWORD *v15;
  unsigned int v16;
  _QWORD v17[6];
  int v18;
  uint64_t v19;
  void *__p;
  char v21;
  uint64_t v22;

  result = (*(_QWORD *(**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 88))(a5);
  if (!*a5)
  {
    sub_19C2CD3C8(a5);
    if (a4)
    {
      sub_19C2B3ED4(a4);
      sub_19C2BFCC8(&v16, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(_QWORD *)a1 + 232))(a1, a2, a3, &v16);
      if (!*a5)
      {
        sub_19C2CD3C8(a5);
        if (v19)
          v11 = v19 + 8;
        else
          v11 = 0;
        if (v18)
        {
          v12 = a4[1];
          v13 = 8 * v18;
          do
          {
            v14 = (__int128 *)(*(_QWORD *)(*(_QWORD *)v11 + 48) & 0xFFFFFFFFFFFFFFFELL);
            if (v12 >= a4[2])
            {
              v12 = sub_19C2B5118(a4, v14);
            }
            else
            {
              sub_19C2B50BC(a4, v14);
              v12 += 24;
            }
            a4[1] = v12;
            v11 += 8;
            v13 -= 8;
          }
          while (v13);
        }
        sub_19C2CD3C0(a5);
      }
      return (_QWORD *)sub_19C2BFDE8(&v16);
    }
    else
    {
      v16 = 13;
      v15 = (_QWORD *)sub_19C2A09EC((uint64_t)v17);
      sub_19C2A1B24(v15, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_19C2A1B24(v17, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_19C2A1B24(v17, (uint64_t)") [", 3);
      sub_19C2A1B24(v17, (uint64_t)"pieces", 6);
      sub_19C2A1B24(v17, (uint64_t)"] ", 2);
      sub_19C2A1B24(v17, (uint64_t)"output container is null", 24);
      sub_19C29E5C0(&v16, (uint64_t)a5);
      v17[0] = *MEMORY[0x1E0DE4F60];
      *(_QWORD *)((char *)v17 + *(_QWORD *)(v17[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
      v17[1] = MEMORY[0x1E0DE4FB8] + 16;
      if (v21 < 0)
        operator delete(__p);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return (_QWORD *)MEMORY[0x1A1AD34CC](&v22);
    }
  }
  return result;
}

void sub_19C2AA7AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_19C29E64C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_19C2AA7D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char **a4@<X3>, uint64_t *a5@<X8>)
{
  _QWORD *result;
  uint64_t v11;
  _QWORD *v12;
  char *v13;
  uint64_t v14;
  int v15;
  char *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  int v24;
  _QWORD *v25;
  unsigned int v26;
  _QWORD v27[6];
  int v28;
  uint64_t v29;
  void *__p;
  char v31;
  uint64_t v32;

  result = (*(_QWORD *(**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 88))(a5);
  if (!*a5)
  {
    sub_19C2CD3C8(a5);
    if (a4)
    {
      a4[1] = *a4;
      sub_19C2BFCC8(&v26, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(_QWORD *)a1 + 232))(a1, a2, a3, &v26);
      if (!*a5)
      {
        sub_19C2CD3C8(a5);
        if (v29)
          v11 = v29 + 8;
        else
          v11 = 0;
        if (v28)
        {
          v12 = a4 + 2;
          v13 = a4[1];
          v14 = v11 + 8 * v28;
          do
          {
            v15 = *(_DWORD *)(*(_QWORD *)v11 + 64);
            if ((unint64_t)v13 >= *v12)
            {
              v17 = *a4;
              v18 = (v13 - *a4) >> 2;
              v19 = v18 + 1;
              if ((unint64_t)(v18 + 1) >> 62)
                sub_19C2A18E8();
              v20 = *v12 - (_QWORD)v17;
              if (v20 >> 1 > v19)
                v19 = v20 >> 1;
              if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL)
                v21 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v21 = v19;
              if (v21)
              {
                v22 = (char *)sub_19C2A27D8((uint64_t)(a4 + 2), v21);
                v17 = *a4;
                v13 = a4[1];
              }
              else
              {
                v22 = 0;
              }
              v23 = &v22[4 * v18];
              *(_DWORD *)v23 = v15;
              v16 = v23 + 4;
              while (v13 != v17)
              {
                v24 = *((_DWORD *)v13 - 1);
                v13 -= 4;
                *((_DWORD *)v23 - 1) = v24;
                v23 -= 4;
              }
              *a4 = v23;
              a4[1] = v16;
              a4[2] = &v22[4 * v21];
              if (v17)
                operator delete(v17);
            }
            else
            {
              *(_DWORD *)v13 = v15;
              v16 = v13 + 4;
            }
            a4[1] = v16;
            v11 += 8;
            v13 = v16;
          }
          while (v11 != v14);
        }
        sub_19C2CD3C0(a5);
      }
      return (_QWORD *)sub_19C2BFDE8(&v26);
    }
    else
    {
      v26 = 13;
      v25 = (_QWORD *)sub_19C2A09EC((uint64_t)v27);
      sub_19C2A1B24(v25, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_19C2A1B24(v27, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_19C2A1B24(v27, (uint64_t)") [", 3);
      sub_19C2A1B24(v27, (uint64_t)"ids", 3);
      sub_19C2A1B24(v27, (uint64_t)"] ", 2);
      sub_19C2A1B24(v27, (uint64_t)"output container is null", 24);
      sub_19C29E5C0(&v26, (uint64_t)a5);
      v27[0] = *MEMORY[0x1E0DE4F60];
      *(_QWORD *)((char *)v27 + *(_QWORD *)(v27[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
      v27[1] = MEMORY[0x1E0DE4FB8] + 16;
      if (v31 < 0)
        operator delete(__p);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return (_QWORD *)MEMORY[0x1A1AD34CC](&v32);
    }
  }
  return result;
}

void sub_19C2AAA9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_19C29E64C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19C2AAACC(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  void *__p[3];

  sub_19C2AA4E0(a2, __p);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)a1 + 160))(a1, __p, a3);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_19C2AAB38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_19C2AAB54@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  _QWORD *result;
  _QWORD *v9;
  unsigned int v10;
  _QWORD v11[11];
  char v12;
  uint64_t v13;

  result = (*(_QWORD *(**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 88))(a4);
  if (!*a4)
  {
    sub_19C2CD3C8(a4);
    if (a3)
    {
      if (*(char *)(a3 + 23) < 0)
      {
        **(_BYTE **)a3 = 0;
        *(_QWORD *)(a3 + 8) = 0;
      }
      else
      {
        *(_BYTE *)a3 = 0;
        *(_BYTE *)(a3 + 23) = 0;
      }
      sub_19C2BFCC8(&v10, 0);
      (*(void (**)(uint64_t, uint64_t, unsigned int *))(*(_QWORD *)a1 + 272))(a1, a2, &v10);
      if (!*a4)
      {
        sub_19C2CD3C8(a4);
        std::string::operator=((std::string *)a3, (const std::string *)(v11[8] & 0xFFFFFFFFFFFFFFFELL));
        sub_19C2CD3C0(a4);
      }
      return (_QWORD *)sub_19C2BFDE8(&v10);
    }
    else
    {
      v10 = 13;
      v9 = (_QWORD *)sub_19C2A09EC((uint64_t)v11);
      sub_19C2A1B24(v9, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_19C2A1B24(v11, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_19C2A1B24(v11, (uint64_t)") [", 3);
      sub_19C2A1B24(v11, (uint64_t)"detokenized", 11);
      sub_19C2A1B24(v11, (uint64_t)"] ", 2);
      sub_19C2A1B24(v11, (uint64_t)"output container is null", 24);
      sub_19C29E5C0(&v10, (uint64_t)a4);
      v11[0] = *MEMORY[0x1E0DE4F60];
      *(_QWORD *)((char *)v11 + *(_QWORD *)(v11[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
      v11[1] = MEMORY[0x1E0DE4FB8] + 16;
      if (v12 < 0)
        operator delete((void *)v11[9]);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return (_QWORD *)MEMORY[0x1A1AD34CC](&v13);
    }
  }
  return result;
}

void sub_19C2AAD3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_19C29E64C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_19C2AAD64@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  _QWORD *result;
  _QWORD *v9;
  unsigned int v10;
  _QWORD v11[11];
  char v12;
  uint64_t v13;

  result = (*(_QWORD *(**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 88))(a4);
  if (!*a4)
  {
    sub_19C2CD3C8(a4);
    if (a3)
    {
      if (*(char *)(a3 + 23) < 0)
      {
        **(_BYTE **)a3 = 0;
        *(_QWORD *)(a3 + 8) = 0;
      }
      else
      {
        *(_BYTE *)a3 = 0;
        *(_BYTE *)(a3 + 23) = 0;
      }
      sub_19C2BFCC8(&v10, 0);
      (*(void (**)(uint64_t, uint64_t, unsigned int *))(*(_QWORD *)a1 + 280))(a1, a2, &v10);
      if (!*a4)
      {
        sub_19C2CD3C8(a4);
        std::string::operator=((std::string *)a3, (const std::string *)(v11[8] & 0xFFFFFFFFFFFFFFFELL));
        sub_19C2CD3C0(a4);
      }
      return (_QWORD *)sub_19C2BFDE8(&v10);
    }
    else
    {
      v10 = 13;
      v9 = (_QWORD *)sub_19C2A09EC((uint64_t)v11);
      sub_19C2A1B24(v9, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_19C2A1B24(v11, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_19C2A1B24(v11, (uint64_t)") [", 3);
      sub_19C2A1B24(v11, (uint64_t)"detokenized", 11);
      sub_19C2A1B24(v11, (uint64_t)"] ", 2);
      sub_19C2A1B24(v11, (uint64_t)"output container is null", 24);
      sub_19C29E5C0(&v10, (uint64_t)a4);
      v11[0] = *MEMORY[0x1E0DE4F60];
      *(_QWORD *)((char *)v11 + *(_QWORD *)(v11[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
      v11[1] = MEMORY[0x1E0DE4FB8] + 16;
      if (v12 < 0)
        operator delete((void *)v11[9]);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return (_QWORD *)MEMORY[0x1A1AD34CC](&v13);
    }
  }
  return result;
}

void sub_19C2AAF4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_19C29E64C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_19C2AAF74@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X8>)
{
  _QWORD *result;
  uint64_t v13;
  void **v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  __int128 v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  __int128 *v28;
  unint64_t v29;
  unint64_t v30;
  void **v31;
  _QWORD v32[2];
  int v33;
  uint64_t v34;
  void *__p;
  char v36;
  uint64_t v37;
  __int128 **v38;

  result = (*(_QWORD *(**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 88))(a6);
  if (!*a6)
  {
    sub_19C2CD3C8(a6);
    if (a5)
    {
      v13 = *a5;
      v14 = (void **)a5[1];
      while (v14 != (void **)v13)
      {
        v14 -= 3;
        v31 = v14;
        sub_19C2B3E94(&v31);
      }
      a5[1] = v13;
      sub_19C2C07B0(&v31, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void ***))(*(_QWORD *)a1 + 240))(a1, a2, a3, a4, &v31);
      if (!*a6)
      {
        sub_19C2CD3C8(a6);
        if (v34)
          v15 = (uint64_t *)(v34 + 8);
        else
          v15 = 0;
        if (v33)
        {
          v16 = &v15[v33];
          do
          {
            v17 = *v15;
            v28 = 0;
            v29 = 0;
            v30 = 0;
            v18 = *(_QWORD *)(v17 + 64);
            if (v18)
              v19 = v18 + 8;
            else
              v19 = 0;
            v20 = *(int *)(v17 + 56);
            if ((_DWORD)v20)
            {
              v21 = 0;
              v22 = 8 * v20;
              do
              {
                v23 = *(_QWORD *)(*(_QWORD *)v19 + 48) & 0xFFFFFFFFFFFFFFFELL;
                if (v21 >= v30)
                {
                  v21 = sub_19C2B5118((uint64_t *)&v28, (__int128 *)v23);
                }
                else
                {
                  if (*(char *)(v23 + 23) < 0)
                  {
                    sub_19C2B5238((_BYTE *)v21, *(void **)v23, *(_QWORD *)(v23 + 8));
                  }
                  else
                  {
                    v24 = *(_OWORD *)v23;
                    *(_QWORD *)(v21 + 16) = *(_QWORD *)(v23 + 16);
                    *(_OWORD *)v21 = v24;
                  }
                  v21 += 24;
                }
                v29 = v21;
                v19 += 8;
                v22 -= 8;
              }
              while (v22);
            }
            v25 = a5[1];
            if (v25 >= a5[2])
            {
              v26 = sub_19C2B5320(a5, &v28);
            }
            else
            {
              sub_19C2B52C4((uint64_t)a5, &v28);
              v26 = v25 + 24;
            }
            a5[1] = v26;
            v38 = &v28;
            sub_19C2B3E94((void ***)&v38);
            ++v15;
          }
          while (v15 != v16);
        }
        sub_19C2CD3C0(a6);
      }
      return (_QWORD *)sub_19C2C0868(&v31);
    }
    else
    {
      LODWORD(v31) = 13;
      v27 = (_QWORD *)sub_19C2A09EC((uint64_t)v32);
      sub_19C2A1B24(v27, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_19C2A1B24(v32, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_19C2A1B24(v32, (uint64_t)") [", 3);
      sub_19C2A1B24(v32, (uint64_t)"pieces", 6);
      sub_19C2A1B24(v32, (uint64_t)"] ", 2);
      sub_19C2A1B24(v32, (uint64_t)"output container is null", 24);
      sub_19C29E5C0((unsigned int *)&v31, (uint64_t)a6);
      v32[0] = *MEMORY[0x1E0DE4F60];
      *(_QWORD *)((char *)v32 + *(_QWORD *)(v32[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
      v32[1] = MEMORY[0x1E0DE4FB8] + 16;
      if (v36 < 0)
        operator delete(__p);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return (_QWORD *)MEMORY[0x1A1AD34CC](&v37);
    }
  }
  return result;
}

void sub_19C2AB26C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_19C29E64C((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_19C2AB2BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X8>)
{
  _QWORD *result;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  char *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  int v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t *v33;
  void *__p;
  char *v35;
  char *v36;
  unsigned int v37;
  _QWORD v38[2];
  int v39;
  uint64_t v40;
  void *v41;
  char v42;
  uint64_t v43;

  result = (*(_QWORD *(**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 88))(a6);
  if (!*a6)
  {
    sub_19C2CD3C8(a6);
    if (a5)
    {
      sub_19C2B4304(a5);
      sub_19C2C07B0(&v37, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned int *))(*(_QWORD *)a1 + 240))(a1, a2, a3, a4, &v37);
      if (!*a6)
      {
        sub_19C2CD3C8(a6);
        if (v40)
          v13 = (uint64_t *)(v40 + 8);
        else
          v13 = 0;
        if (v39)
        {
          v33 = &v13[v39];
          do
          {
            v14 = *v13;
            __p = 0;
            v35 = 0;
            v36 = 0;
            v15 = *(_QWORD *)(v14 + 64);
            if (v15)
              v16 = v15 + 8;
            else
              v16 = 0;
            v17 = *(int *)(v14 + 56);
            if ((_DWORD)v17)
            {
              v18 = 0;
              v19 = v16 + 8 * v17;
              do
              {
                v20 = *(_DWORD *)(*(_QWORD *)v16 + 64);
                if (v18 >= v36)
                {
                  v22 = (char *)__p;
                  v23 = (v18 - (_BYTE *)__p) >> 2;
                  v24 = v23 + 1;
                  if ((unint64_t)(v23 + 1) >> 62)
                    sub_19C2A18E8();
                  v25 = v36 - (_BYTE *)__p;
                  if ((v36 - (_BYTE *)__p) >> 1 > v24)
                    v24 = v25 >> 1;
                  if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL)
                    v26 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v26 = v24;
                  if (v26)
                  {
                    v27 = (char *)sub_19C2A27D8((uint64_t)&v36, v26);
                    v22 = (char *)__p;
                    v18 = v35;
                  }
                  else
                  {
                    v27 = 0;
                  }
                  v28 = &v27[4 * v23];
                  *(_DWORD *)v28 = v20;
                  v21 = v28 + 4;
                  while (v18 != v22)
                  {
                    v29 = *((_DWORD *)v18 - 1);
                    v18 -= 4;
                    *((_DWORD *)v28 - 1) = v29;
                    v28 -= 4;
                  }
                  __p = v28;
                  v35 = v21;
                  v36 = &v27[4 * v26];
                  if (v22)
                    operator delete(v22);
                }
                else
                {
                  *(_DWORD *)v18 = v20;
                  v21 = v18 + 4;
                }
                v35 = v21;
                v16 += 8;
                v18 = v21;
              }
              while (v16 != v19);
            }
            v30 = a5[1];
            if (v30 >= a5[2])
            {
              v31 = sub_19C2B5858(a5, (uint64_t)&__p);
            }
            else
            {
              sub_19C2B5808((uint64_t)a5, (uint64_t)&__p);
              v31 = v30 + 24;
            }
            a5[1] = v31;
            if (__p)
            {
              v35 = (char *)__p;
              operator delete(__p);
            }
            ++v13;
          }
          while (v13 != v33);
        }
        sub_19C2CD3C0(a6);
      }
      return (_QWORD *)sub_19C2C0868(&v37);
    }
    else
    {
      v37 = 13;
      v32 = (_QWORD *)sub_19C2A09EC((uint64_t)v38);
      sub_19C2A1B24(v32, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_19C2A1B24(v38, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_19C2A1B24(v38, (uint64_t)") [", 3);
      sub_19C2A1B24(v38, (uint64_t)"ids", 3);
      sub_19C2A1B24(v38, (uint64_t)"] ", 2);
      sub_19C2A1B24(v38, (uint64_t)"output container is null", 24);
      sub_19C29E5C0(&v37, (uint64_t)a6);
      v38[0] = *MEMORY[0x1E0DE4F60];
      *(_QWORD *)((char *)v38 + *(_QWORD *)(v38[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
      v38[1] = MEMORY[0x1E0DE4FB8] + 16;
      if (v42 < 0)
        operator delete(v41);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return (_QWORD *)MEMORY[0x1A1AD34CC](&v43);
    }
  }
  return result;
}

void sub_19C2AB608(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, char a14)
{
  sub_19C29E64C((uint64_t)&a14);
  _Unwind_Resume(a1);
}

_QWORD *sub_19C2AB650@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X8>, float a7@<S0>)
{
  _QWORD *result;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  __int128 *v18;
  _QWORD *v19;
  unsigned int v20;
  _QWORD v21[6];
  int v22;
  uint64_t v23;
  void *__p;
  char v25;
  uint64_t v26;

  result = (*(_QWORD *(**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 88))(a6);
  if (!*a6)
  {
    sub_19C2CD3C8(a6);
    if (a5)
    {
      sub_19C2B3ED4(a5);
      sub_19C2BFCC8(&v20, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned int *, float))(*(_QWORD *)a1 + 248))(a1, a2, a3, a4, &v20, a7);
      if (!*a6)
      {
        sub_19C2CD3C8(a6);
        if (v23)
          v15 = v23 + 8;
        else
          v15 = 0;
        if (v22)
        {
          v16 = a5[1];
          v17 = 8 * v22;
          do
          {
            v18 = (__int128 *)(*(_QWORD *)(*(_QWORD *)v15 + 48) & 0xFFFFFFFFFFFFFFFELL);
            if (v16 >= a5[2])
            {
              v16 = sub_19C2B5118(a5, v18);
            }
            else
            {
              sub_19C2B50BC(a5, v18);
              v16 += 24;
            }
            a5[1] = v16;
            v15 += 8;
            v17 -= 8;
          }
          while (v17);
        }
        sub_19C2CD3C0(a6);
      }
      return (_QWORD *)sub_19C2BFDE8(&v20);
    }
    else
    {
      v20 = 13;
      v19 = (_QWORD *)sub_19C2A09EC((uint64_t)v21);
      sub_19C2A1B24(v19, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_19C2A1B24(v21, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_19C2A1B24(v21, (uint64_t)") [", 3);
      sub_19C2A1B24(v21, (uint64_t)"pieces", 6);
      sub_19C2A1B24(v21, (uint64_t)"] ", 2);
      sub_19C2A1B24(v21, (uint64_t)"output container is null", 24);
      sub_19C29E5C0(&v20, (uint64_t)a6);
      v21[0] = *MEMORY[0x1E0DE4F60];
      *(_QWORD *)((char *)v21 + *(_QWORD *)(v21[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
      v21[1] = MEMORY[0x1E0DE4FB8] + 16;
      if (v25 < 0)
        operator delete(__p);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return (_QWORD *)MEMORY[0x1A1AD34CC](&v26);
    }
  }
  return result;
}

void sub_19C2AB89C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_19C29E64C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_19C2AB8C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char **a5@<X4>, uint64_t *a6@<X8>, float a7@<S0>)
{
  _QWORD *result;
  uint64_t v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;
  int v19;
  char *v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  int v28;
  _QWORD *v29;
  unsigned int v30;
  _QWORD v31[6];
  int v32;
  uint64_t v33;
  void *__p;
  char v35;
  uint64_t v36;

  result = (*(_QWORD *(**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 88))(a6);
  if (!*a6)
  {
    sub_19C2CD3C8(a6);
    if (a5)
    {
      a5[1] = *a5;
      sub_19C2BFCC8(&v30, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned int *, float))(*(_QWORD *)a1 + 248))(a1, a2, a3, a4, &v30, a7);
      if (!*a6)
      {
        sub_19C2CD3C8(a6);
        if (v33)
          v15 = v33 + 8;
        else
          v15 = 0;
        if (v32)
        {
          v16 = a5 + 2;
          v17 = a5[1];
          v18 = v15 + 8 * v32;
          do
          {
            v19 = *(_DWORD *)(*(_QWORD *)v15 + 64);
            if ((unint64_t)v17 >= *v16)
            {
              v21 = *a5;
              v22 = (v17 - *a5) >> 2;
              v23 = v22 + 1;
              if ((unint64_t)(v22 + 1) >> 62)
                sub_19C2A18E8();
              v24 = *v16 - (_QWORD)v21;
              if (v24 >> 1 > v23)
                v23 = v24 >> 1;
              if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL)
                v25 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v25 = v23;
              if (v25)
              {
                v26 = (char *)sub_19C2A27D8((uint64_t)(a5 + 2), v25);
                v21 = *a5;
                v17 = a5[1];
              }
              else
              {
                v26 = 0;
              }
              v27 = &v26[4 * v22];
              *(_DWORD *)v27 = v19;
              v20 = v27 + 4;
              while (v17 != v21)
              {
                v28 = *((_DWORD *)v17 - 1);
                v17 -= 4;
                *((_DWORD *)v27 - 1) = v28;
                v27 -= 4;
              }
              *a5 = v27;
              a5[1] = v20;
              a5[2] = &v26[4 * v25];
              if (v21)
                operator delete(v21);
            }
            else
            {
              *(_DWORD *)v17 = v19;
              v20 = v17 + 4;
            }
            a5[1] = v20;
            v15 += 8;
            v17 = v20;
          }
          while (v15 != v18);
        }
        sub_19C2CD3C0(a6);
      }
      return (_QWORD *)sub_19C2BFDE8(&v30);
    }
    else
    {
      v30 = 13;
      v29 = (_QWORD *)sub_19C2A09EC((uint64_t)v31);
      sub_19C2A1B24(v29, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_19C2A1B24(v31, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_19C2A1B24(v31, (uint64_t)") [", 3);
      sub_19C2A1B24(v31, (uint64_t)"ids", 3);
      sub_19C2A1B24(v31, (uint64_t)"] ", 2);
      sub_19C2A1B24(v31, (uint64_t)"output container is null", 24);
      sub_19C29E5C0(&v30, (uint64_t)a6);
      v31[0] = *MEMORY[0x1E0DE4F60];
      *(_QWORD *)((char *)v31 + *(_QWORD *)(v31[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
      v31[1] = MEMORY[0x1E0DE4FB8] + 16;
      if (v35 < 0)
        operator delete(__p);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return (_QWORD *)MEMORY[0x1A1AD34CC](&v36);
    }
  }
  return result;
}

void sub_19C2ABBA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_19C29E64C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_19C2ABBD4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X6>, uint64_t *a8@<X8>, float a9@<S0>)
{
  _QWORD *result;
  uint64_t v19;
  void **v20;
  __int128 *v21;
  __int128 *v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  __int128 v33;
  unint64_t v34;
  uint64_t v35;
  __int128 *v36;
  void *__dst;
  unint64_t v38;
  void **v39;
  _QWORD v40[2];
  int v41;
  uint64_t v42;
  void *__p;
  char v44;
  uint64_t v45;
  void **v46[2];

  result = (*(_QWORD *(**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 88))(a8);
  if (!*a8)
  {
    sub_19C2CD3C8(a8);
    if (a7)
    {
      v19 = *a7;
      v20 = (void **)a7[1];
      while (v20 != (void **)v19)
      {
        v20 -= 4;
        v39 = v20;
        sub_19C2B3E94(&v39);
      }
      a7[1] = v19;
      sub_19C2C07B0(&v39, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void ***, float))(*(_QWORD *)a1 + 256))(a1, a2, a3, a4, a5, a6, &v39, a9);
      if (!*a8)
      {
        sub_19C2CD3C8(a8);
        v21 = (__int128 *)*a7;
        v22 = (__int128 *)a7[1];
        while (v22 != v21)
        {
          v22 -= 2;
          v36 = v22;
          sub_19C2B3E94((void ***)&v36);
        }
        a7[1] = (uint64_t)v21;
        sub_19C2ABF8C(a7, v41);
        if (v42)
          v24 = (uint64_t *)(v42 + 8);
        else
          v24 = 0;
        if (v41)
        {
          v25 = &v24[v41];
          do
          {
            v26 = *v24;
            v36 = 0;
            __dst = 0;
            v38 = 0;
            sub_19C2AC01C((uint64_t *)&v36, *(int *)(v26 + 56));
            v27 = *(_QWORD *)(v26 + 64);
            if (v27)
              v28 = v27 + 8;
            else
              v28 = 0;
            v29 = *(int *)(v26 + 56);
            if ((_DWORD)v29)
            {
              v30 = (unint64_t)__dst;
              v31 = 8 * v29;
              do
              {
                v32 = *(_QWORD *)(*(_QWORD *)v28 + 48) & 0xFFFFFFFFFFFFFFFELL;
                if (v30 >= v38)
                {
                  v30 = sub_19C2B5118((uint64_t *)&v36, (__int128 *)v32);
                }
                else
                {
                  if (*(char *)(v32 + 23) < 0)
                  {
                    sub_19C2B5238((_BYTE *)v30, *(void **)v32, *(_QWORD *)(v32 + 8));
                  }
                  else
                  {
                    v33 = *(_OWORD *)v32;
                    *(_QWORD *)(v30 + 16) = *(_QWORD *)(v32 + 16);
                    *(_OWORD *)v30 = v33;
                  }
                  v30 += 24;
                }
                __dst = (void *)v30;
                v28 += 8;
                v31 -= 8;
              }
              while (v31);
            }
            LODWORD(v46[0]) = *(_DWORD *)(v26 + 80);
            v34 = a7[1];
            if (v34 >= a7[2])
            {
              v35 = sub_19C2B5EB8(a7, &v36, v46);
            }
            else
            {
              sub_19C2B5E48((uint64_t)a7, &v36, (float *)v46);
              v35 = v34 + 32;
            }
            a7[1] = v35;
            v46[0] = (void **)&v36;
            sub_19C2B3E94(v46);
            ++v24;
          }
          while (v24 != v25);
        }
        sub_19C2CD3C0(a8);
      }
      return (_QWORD *)sub_19C2C0868(&v39);
    }
    else
    {
      LODWORD(v39) = 13;
      v23 = (_QWORD *)sub_19C2A09EC((uint64_t)v40);
      sub_19C2A1B24(v23, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_19C2A1B24(v40, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_19C2A1B24(v40, (uint64_t)") [", 3);
      sub_19C2A1B24(v40, (uint64_t)"pieces", 6);
      sub_19C2A1B24(v40, (uint64_t)"] ", 2);
      sub_19C2A1B24(v40, (uint64_t)"output container is null", 24);
      sub_19C29E5C0((unsigned int *)&v39, (uint64_t)a8);
      v40[0] = *MEMORY[0x1E0DE4F60];
      *(_QWORD *)((char *)v40 + *(_QWORD *)(v40[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
      v40[1] = MEMORY[0x1E0DE4FB8] + 16;
      if (v44 < 0)
        operator delete(__p);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return (_QWORD *)MEMORY[0x1A1AD34CC](&v45);
    }
  }
  return result;
}

void sub_19C2ABF38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_19C29E64C((uint64_t)va);
  _Unwind_Resume(a1);
}

void **sub_19C2ABF8C(uint64_t *a1, unint64_t a2)
{
  void **result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7[5];

  v4 = a1[2];
  result = (void **)(a1 + 2);
  if (a2 > (v4 - *a1) >> 5)
  {
    if (a2 >> 59)
      sub_19C2A18E8();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_19C2B5C70((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    v7[2] = (char *)v7[0] + v5;
    v7[3] = (char *)v7[0] + 32 * v6;
    sub_19C2B5BFC(a1, v7);
    return sub_19C2B5DC8(v7);
  }
  return result;
}

void sub_19C2AC008(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C2B5DC8((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19C2AC01C(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      sub_19C2A18E8();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_19C2A18FC(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 24 * v6;
    sub_19C2B49D0(a1, v7);
    return sub_19C2B4B58((uint64_t)v7);
  }
  return result;
}

void sub_19C2AC0B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C2B4B58((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_19C2AC0CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X6>, uint64_t *a8@<X8>, float a9@<S0>)
{
  _QWORD *result;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  int v26;
  char *v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  int v35;
  unint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t *v39;
  uint64_t *v40;
  int v41;
  void *__p;
  char *v43;
  char *v44;
  unsigned int v45;
  _QWORD v46[2];
  int v47;
  uint64_t v48;
  void *v49;
  char v50;
  uint64_t v51;

  result = (*(_QWORD *(**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 88))(a8);
  if (!*a8)
  {
    sub_19C2CD3C8(a8);
    if (a7)
    {
      sub_19C2A1A00(a7);
      sub_19C2C07B0(&v45, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unsigned int *, float))(*(_QWORD *)a1 + 256))(a1, a2, a3, a4, a5, a6, &v45, a9);
      if (!*a8)
      {
        v39 = a8;
        sub_19C2CD3C8(a8);
        sub_19C2A1A00(a7);
        sub_19C2AC4BC(a7, v47);
        if (v48)
          v19 = (uint64_t *)(v48 + 8);
        else
          v19 = 0;
        if (v47)
        {
          v40 = &v19[v47];
          do
          {
            v20 = *v19;
            __p = 0;
            v43 = 0;
            v44 = 0;
            sub_19C2AC54C(&__p, *(int *)(v20 + 56));
            v21 = *(_QWORD *)(v20 + 64);
            if (v21)
              v22 = v21 + 8;
            else
              v22 = 0;
            v23 = *(int *)(v20 + 56);
            if ((_DWORD)v23)
            {
              v24 = v22 + 8 * v23;
              v25 = v43;
              do
              {
                v26 = *(_DWORD *)(*(_QWORD *)v22 + 64);
                if (v25 >= v44)
                {
                  v28 = (char *)__p;
                  v29 = (v25 - (_BYTE *)__p) >> 2;
                  v30 = v29 + 1;
                  if ((unint64_t)(v29 + 1) >> 62)
                    sub_19C2A18E8();
                  v31 = v44 - (_BYTE *)__p;
                  if ((v44 - (_BYTE *)__p) >> 1 > v30)
                    v30 = v31 >> 1;
                  if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFFCLL)
                    v32 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v32 = v30;
                  if (v32)
                  {
                    v33 = (char *)sub_19C2A27D8((uint64_t)&v44, v32);
                    v28 = (char *)__p;
                    v25 = v43;
                  }
                  else
                  {
                    v33 = 0;
                  }
                  v34 = &v33[4 * v29];
                  *(_DWORD *)v34 = v26;
                  v27 = v34 + 4;
                  while (v25 != v28)
                  {
                    v35 = *((_DWORD *)v25 - 1);
                    v25 -= 4;
                    *((_DWORD *)v34 - 1) = v35;
                    v34 -= 4;
                  }
                  __p = v34;
                  v43 = v27;
                  v44 = &v33[4 * v32];
                  if (v28)
                    operator delete(v28);
                }
                else
                {
                  *(_DWORD *)v25 = v26;
                  v27 = v25 + 4;
                }
                v43 = v27;
                v22 += 8;
                v25 = v27;
              }
              while (v22 != v24);
            }
            v41 = *(_DWORD *)(v20 + 80);
            v36 = a7[1];
            if (v36 >= a7[2])
            {
              v37 = sub_19C2B6248(a7, (uint64_t)&__p, &v41);
            }
            else
            {
              sub_19C2B61E4((uint64_t)a7, (uint64_t)&__p, (float *)&v41);
              v37 = v36 + 32;
            }
            a7[1] = v37;
            if (__p)
            {
              v43 = (char *)__p;
              operator delete(__p);
            }
            ++v19;
          }
          while (v19 != v40);
        }
        sub_19C2CD3C0(v39);
      }
      return (_QWORD *)sub_19C2C0868(&v45);
    }
    else
    {
      v45 = 13;
      v38 = (_QWORD *)sub_19C2A09EC((uint64_t)v46);
      sub_19C2A1B24(v38, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_19C2A1B24(v46, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_19C2A1B24(v46, (uint64_t)") [", 3);
      sub_19C2A1B24(v46, (uint64_t)"ids", 3);
      sub_19C2A1B24(v46, (uint64_t)"] ", 2);
      sub_19C2A1B24(v46, (uint64_t)"output container is null", 24);
      sub_19C29E5C0(&v45, (uint64_t)a8);
      v46[0] = *MEMORY[0x1E0DE4F60];
      *(_QWORD *)((char *)v46 + *(_QWORD *)(v46[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
      v46[1] = MEMORY[0x1E0DE4FB8] + 16;
      if (v50 < 0)
        operator delete(v49);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return (_QWORD *)MEMORY[0x1A1AD34CC](&v51);
    }
  }
  return result;
}

void sub_19C2AC470(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, char a16)
{
  sub_19C29E64C((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t sub_19C2AC4BC(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 5)
  {
    if (a2 >> 59)
      sub_19C2A18E8();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_19C2B5C70(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 32 * v6;
    sub_19C2B5FC4(a1, v7);
    return sub_19C2B6158((uint64_t)v7);
  }
  return result;
}

void sub_19C2AC538(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C2B6158((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19C2AC54C(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  int v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 2)
  {
    if (a2 >> 62)
      sub_19C2A18E8();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)sub_19C2A27D8(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFFCLL];
    v9 = &v6[4 * v8];
    v10 = (char *)*a1;
    v11 = (char *)a1[1];
    v12 = v7;
    if (v11 != *a1)
    {
      v12 = v7;
      do
      {
        v13 = *((_DWORD *)v11 - 1);
        v11 -= 4;
        *((_DWORD *)v12 - 1) = v13;
        v12 -= 4;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

_QWORD *sub_19C2AC5E0@<X0>(uint64_t *a1@<X0>, char *a2@<X1>, size_t a3@<X2>, uint64_t a4@<X4>, uint64_t *a5@<X5>, uint64_t *a6@<X6>, uint64_t a7@<X7>, uint64_t *a8@<X8>)
{
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  char v13;
  size_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  size_t v23;
  size_t v24;
  size_t v25;
  size_t v26;
  size_t v27;
  char *v28;
  size_t v29;
  unsigned __int8 v30;
  unsigned __int8 v31;
  int *v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  std::string *p_dst;
  std::string::size_type size;
  int v40;
  std::string *v41;
  std::string::size_type v42;
  uint64_t v43;
  _QWORD *v44;
  int v45;
  uint64_t v46;
  _QWORD *v47;
  int v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  std::string *v59;
  int *v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  int v67;
  uint64_t v68;
  _QWORD *v69;
  int v70;
  uint64_t v71;
  unint64_t v72;
  int v73;
  const std::string::value_type *v74;
  std::string::size_type v75;
  std::string *v76;
  __int128 v77;
  uint64_t v78;
  _QWORD *v79;
  size_t v80;
  uint64_t v81;
  std::string *v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  int v86;
  const std::string::value_type *v87;
  std::string::size_type v88;
  std::string *v89;
  __int128 v90;
  uint64_t v91;
  _QWORD *v92;
  _QWORD *result;
  uint64_t v94;
  _QWORD *v95;
  _QWORD *v96;
  _QWORD *v97;
  _QWORD *v98;
  _QWORD *v99;
  _QWORD *v100;
  _QWORD *v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v110;
  int v111;
  uint64_t v112;
  char *__src;
  size_t __len;
  std::string __dst;
  void *__p[2];
  uint64_t v117;
  void *v118;
  char v119;
  uint64_t v120;

  v10 = *a6;
  v110 = a6[1];
  if (*a6 != v110)
  {
    v11 = a5;
    v12 = 0;
    v13 = 0;
    v112 = a7 + 48;
    while (1)
    {
      v14 = *(_QWORD *)(v10 + 8);
      if (!v14)
      {
        LODWORD(__p[0]) = 13;
        v97 = (_QWORD *)sub_19C2A09EC((uint64_t)&__p[1]);
        sub_19C2A1B24(v97, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        sub_19C2A1B24(&__p[1], (uint64_t)"(", 1);
        std::ostream::operator<<();
        sub_19C2A1B24(&__p[1], (uint64_t)") [", 3);
        sub_19C2A1B24(&__p[1], (uint64_t)"!w.empty()", 10);
        sub_19C2A1B24(&__p[1], (uint64_t)"] ", 2);
        sub_19C2A1B24(&__p[1], (uint64_t)"Empty piece is not allowed.", 27);
        sub_19C29E5C0((unsigned int *)__p, (uint64_t)a8);
        goto LABEL_137;
      }
      v15 = *(unsigned __int8 **)v10;
      v16 = *(unsigned int *)(v10 + 16);
      v111 = (*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 528))(a1, v16);
      if ((*(unsigned int (**)(uint64_t *, uint64_t))(*a1 + 536))(a1, v16))
      {
        v17 = *(int **)(a7 + 64);
        if (v17)
        {
          v18 = *(int *)(a7 + 56);
          v19 = *v17;
          if ((int)v18 < *v17)
          {
            *(_DWORD *)(a7 + 56) = v18 + 1;
            v20 = *(_QWORD *)&v17[2 * v18 + 2];
LABEL_58:
            *(_DWORD *)(v20 + 40) |= 1u;
            sub_19C2A6CA0(__p, v15, v14);
            v53 = *(_QWORD *)(v20 + 8);
            v54 = (_QWORD *)(v53 & 0xFFFFFFFFFFFFFFFELL);
            if ((v53 & 1) != 0)
              v54 = (_QWORD *)*v54;
            sub_19C2CE500((uint64_t *)(v20 + 48), (__int128 *)__p, (uint64_t)v54);
            if (SHIBYTE(v117) < 0)
              operator delete(__p[0]);
            v55 = *(_DWORD *)(v20 + 40);
            *(_DWORD *)(v20 + 64) = v16;
            v56 = *(_QWORD *)(*v11 + 8 * v12);
            *(_DWORD *)(v20 + 68) = v56;
            *(_DWORD *)(v20 + 40) = v55 | 0x1C;
            goto LABEL_83;
          }
          if (v19 != *(_DWORD *)(a7 + 60))
          {
LABEL_57:
            *v17 = v19 + 1;
            v20 = sub_19C2C0F14(*(_QWORD *)(a7 + 48));
            v51 = *(_QWORD *)(a7 + 64);
            v52 = *(int *)(a7 + 56);
            *(_DWORD *)(a7 + 56) = v52 + 1;
            *(_QWORD *)(v51 + 8 * v52 + 8) = v20;
            goto LABEL_58;
          }
        }
        else
        {
          v19 = *(_DWORD *)(a7 + 60);
        }
        sub_19C2E0CEC(v112, v19 + 1);
        v17 = *(int **)(a7 + 64);
        v19 = *v17;
        goto LABEL_57;
      }
      v21 = *v11;
      v22 = v11[1] - *v11;
      if (v12 >= v22 >> 3)
      {
        LODWORD(__p[0]) = 13;
        v98 = (_QWORD *)sub_19C2A09EC((uint64_t)&__p[1]);
        sub_19C2A1B24(v98, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        sub_19C2A1B24(&__p[1], (uint64_t)"(", 1);
        std::ostream::operator<<();
        sub_19C2A1B24(&__p[1], (uint64_t)") [", 3);
        sub_19C2A1B24(&__p[1], (uint64_t)"(begin) < (norm_to_orig.size())", 31);
        sub_19C2A1B24(&__p[1], (uint64_t)"] ", 2);
        sub_19C29E5C0((unsigned int *)__p, (uint64_t)a8);
        goto LABEL_137;
      }
      v23 = v14 + v12;
      if (v14 + v12 >= v22 >> 3)
      {
        LODWORD(__p[0]) = 13;
        v99 = (_QWORD *)sub_19C2A09EC((uint64_t)&__p[1]);
        sub_19C2A1B24(v99, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        sub_19C2A1B24(&__p[1], (uint64_t)"(", 1);
        std::ostream::operator<<();
        sub_19C2A1B24(&__p[1], (uint64_t)") [", 3);
        sub_19C2A1B24(&__p[1], (uint64_t)"(end) < (norm_to_orig.size())", 29);
        sub_19C2A1B24(&__p[1], (uint64_t)"] ", 2);
        sub_19C29E5C0((unsigned int *)__p, (uint64_t)a8);
        goto LABEL_137;
      }
      v24 = *(_QWORD *)(v21 + 8 * v12);
      if (v24 > a3)
      {
        LODWORD(__p[0]) = 13;
        v100 = (_QWORD *)sub_19C2A09EC((uint64_t)&__p[1]);
        sub_19C2A1B24(v100, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        sub_19C2A1B24(&__p[1], (uint64_t)"(", 1);
        std::ostream::operator<<();
        sub_19C2A1B24(&__p[1], (uint64_t)") [", 3);
        sub_19C2A1B24(&__p[1], (uint64_t)"(orig_begin) <= (input.size())", 30);
        sub_19C2A1B24(&__p[1], (uint64_t)"] ", 2);
        sub_19C29E5C0((unsigned int *)__p, (uint64_t)a8);
        goto LABEL_137;
      }
      v25 = *(_QWORD *)(v21 + 8 * v23);
      if (v25 > a3)
      {
        LODWORD(__p[0]) = 13;
        v101 = (_QWORD *)sub_19C2A09EC((uint64_t)&__p[1]);
        sub_19C2A1B24(v101, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        sub_19C2A1B24(&__p[1], (uint64_t)"(", 1);
        std::ostream::operator<<();
        sub_19C2A1B24(&__p[1], (uint64_t)") [", 3);
        sub_19C2A1B24(&__p[1], (uint64_t)"(orig_end) <= (input.size())", 28);
        sub_19C2A1B24(&__p[1], (uint64_t)"] ", 2);
        sub_19C29E5C0((unsigned int *)__p, (uint64_t)a8);
        goto LABEL_137;
      }
      v26 = v25 - v24;
      if (v25 < v24)
      {
        LODWORD(__p[0]) = 13;
        v102 = (_QWORD *)sub_19C2A09EC((uint64_t)&__p[1]);
        sub_19C2A1B24(v102, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        sub_19C2A1B24(&__p[1], (uint64_t)"(", 1);
        std::ostream::operator<<();
        sub_19C2A1B24(&__p[1], (uint64_t)") [", 3);
        sub_19C2A1B24(&__p[1], (uint64_t)"(orig_begin) <= (orig_end)", 26);
        sub_19C2A1B24(&__p[1], (uint64_t)"] ", 2);
        sub_19C29E5C0((unsigned int *)__p, (uint64_t)a8);
        goto LABEL_137;
      }
      if (a3 >= v24)
        v27 = v24;
      else
        v27 = a3;
      v28 = &a2[v27];
      v29 = a3 - v27;
      if (v29 < v26)
        v26 = v29;
      __src = v28;
      __len = v26;
      if (v111)
      {
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1[1] + 184))(a1[1]))
        {
          while (1)
          {
            v31 = *v15++;
            v30 = v31;
            v32 = *(int **)(a7 + 64);
            if (!v32)
              break;
            v33 = *(int *)(a7 + 56);
            v34 = *v32;
            if ((int)v33 >= *v32)
            {
              if (v34 == *(_DWORD *)(a7 + 60))
              {
LABEL_25:
                sub_19C2E0CEC(v112, v34 + 1);
                v32 = *(int **)(a7 + 64);
                v34 = *v32;
              }
              *v32 = v34 + 1;
              v35 = sub_19C2C0F14(*(_QWORD *)(a7 + 48));
              v36 = *(_QWORD *)(a7 + 64);
              v37 = *(int *)(a7 + 56);
              *(_DWORD *)(a7 + 56) = v37 + 1;
              *(_QWORD *)(v36 + 8 * v37 + 8) = v35;
              goto LABEL_27;
            }
            *(_DWORD *)(a7 + 56) = v33 + 1;
            v35 = *(_QWORD *)&v32[2 * v33 + 2];
LABEL_27:
            sub_19C2A01F4(v30, (uint64_t)&__dst);
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              p_dst = &__dst;
            else
              p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
            else
              size = __dst.__r_.__value_.__l.__size_;
            v40 = (*(uint64_t (**)(uint64_t, std::string *, std::string::size_type))(*(_QWORD *)a1[1] + 112))(a1[1], p_dst, size);
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v41 = &__dst;
            else
              v41 = (std::string *)__dst.__r_.__value_.__r.__words[0];
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v42 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
            else
              v42 = __dst.__r_.__value_.__l.__size_;
            *(_DWORD *)(v35 + 40) |= 1u;
            sub_19C2A6CA0(__p, v41, v42);
            v43 = *(_QWORD *)(v35 + 8);
            v44 = (_QWORD *)(v43 & 0xFFFFFFFFFFFFFFFELL);
            if ((v43 & 1) != 0)
              v44 = (_QWORD *)*v44;
            sub_19C2CE500((uint64_t *)(v35 + 48), (__int128 *)__p, (uint64_t)v44);
            if (SHIBYTE(v117) < 0)
              operator delete(__p[0]);
            v45 = *(_DWORD *)(v35 + 40);
            *(_DWORD *)(v35 + 40) = v45 | 4;
            *(_DWORD *)(v35 + 64) = v40;
            if (v14 == 1)
            {
              *(_DWORD *)(v35 + 40) = v45 | 6;
              sub_19C2A6CA0(__p, __src, __len);
              v46 = *(_QWORD *)(v35 + 8);
              v47 = (_QWORD *)(v46 & 0xFFFFFFFFFFFFFFFELL);
              if ((v46 & 1) != 0)
                v47 = (_QWORD *)*v47;
              sub_19C2CE500((uint64_t *)(v35 + 56), (__int128 *)__p, (uint64_t)v47);
              if (SHIBYTE(v117) < 0)
                operator delete(__p[0]);
              v48 = *(_DWORD *)(v35 + 40);
              *(_DWORD *)(v35 + 68) = v24;
              v49 = v48 | 0x18;
              v50 = v25;
            }
            else
            {
              *(_DWORD *)(v35 + 68) = v24;
              v49 = v45 | 0x1C;
              v50 = v24;
            }
            *(_DWORD *)(v35 + 40) = v49;
            *(_DWORD *)(v35 + 72) = v50;
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__dst.__r_.__value_.__l.__data_);
            if (!--v14)
            {
              v12 = v23;
              v11 = a5;
              goto LABEL_84;
            }
          }
          v34 = *(_DWORD *)(a7 + 60);
          goto LABEL_25;
        }
        if ((v13 & 1) != 0)
        {
          v57 = sub_19C2B4420(v112, *(_DWORD *)(a7 + 56) - 1);
          if (v14 > 0x7FFFFFFFFFFFFFF7)
            goto LABEL_141;
          v20 = v57;
          v58 = *(_QWORD *)(v57 + 48);
          v104 = (uint64_t *)(v57 + 48);
          if (v14 >= 0x17)
          {
            v71 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v14 | 7) != 0x17)
              v71 = v14 | 7;
            v103 = v71 + 1;
            v59 = (std::string *)operator new(v71 + 1);
            __dst.__r_.__value_.__l.__size_ = v14;
            __dst.__r_.__value_.__r.__words[2] = v103 | 0x8000000000000000;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v59;
          }
          else
          {
            *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v14;
            v59 = &__dst;
          }
          v72 = v58 & 0xFFFFFFFFFFFFFFFELL;
          memmove(v59, v15, v14);
          v59->__r_.__value_.__s.__data_[v14] = 0;
          v73 = *(char *)(v72 + 23);
          if (v73 >= 0)
            v74 = (const std::string::value_type *)v72;
          else
            v74 = *(const std::string::value_type **)v72;
          if (v73 >= 0)
            v75 = *(unsigned __int8 *)(v72 + 23);
          else
            v75 = *(_QWORD *)(v72 + 8);
          v76 = std::string::insert(&__dst, 0, v74, v75);
          v77 = *(_OWORD *)&v76->__r_.__value_.__l.__data_;
          v117 = v76->__r_.__value_.__r.__words[2];
          *(_OWORD *)__p = v77;
          v76->__r_.__value_.__l.__size_ = 0;
          v76->__r_.__value_.__r.__words[2] = 0;
          v76->__r_.__value_.__r.__words[0] = 0;
          *(_DWORD *)(v20 + 40) |= 1u;
          v78 = *(_QWORD *)(v20 + 8);
          v79 = (_QWORD *)(v78 & 0xFFFFFFFFFFFFFFFELL);
          v80 = __len;
          if ((v78 & 1) != 0)
            v79 = (_QWORD *)*v79;
          sub_19C2CE500(v104, (__int128 *)__p, (uint64_t)v79);
          if (SHIBYTE(v117) < 0)
            operator delete(__p[0]);
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__dst.__r_.__value_.__l.__data_);
          if (__len > 0x7FFFFFFFFFFFFFF7)
LABEL_141:
            sub_19C2A1A54();
          v81 = *(_QWORD *)(v20 + 56);
          if (__len >= 0x17)
          {
            v83 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((__len | 7) != 0x17)
              v83 = __len | 7;
            v84 = v83 + 1;
            v82 = (std::string *)operator new(v83 + 1);
            v85 = v84 | 0x8000000000000000;
            v80 = __len;
            __dst.__r_.__value_.__l.__size_ = __len;
            __dst.__r_.__value_.__r.__words[2] = v85;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v82;
          }
          else
          {
            *((_BYTE *)&__dst.__r_.__value_.__s + 23) = __len;
            v82 = &__dst;
            if (!__len)
              goto LABEL_109;
          }
          memmove(v82, __src, v80);
LABEL_109:
          v82->__r_.__value_.__s.__data_[v80] = 0;
          v86 = *(char *)((v81 & 0xFFFFFFFFFFFFFFFELL) + 23);
          if (v86 >= 0)
            v87 = (const std::string::value_type *)(v81 & 0xFFFFFFFFFFFFFFFELL);
          else
            v87 = *(const std::string::value_type **)(v81 & 0xFFFFFFFFFFFFFFFELL);
          if (v86 >= 0)
            v88 = *(unsigned __int8 *)((v81 & 0xFFFFFFFFFFFFFFFELL) + 23);
          else
            v88 = *(_QWORD *)((v81 & 0xFFFFFFFFFFFFFFFELL) + 8);
          v89 = std::string::insert(&__dst, 0, v87, v88);
          v90 = *(_OWORD *)&v89->__r_.__value_.__l.__data_;
          v117 = v89->__r_.__value_.__r.__words[2];
          *(_OWORD *)__p = v90;
          v89->__r_.__value_.__l.__size_ = 0;
          v89->__r_.__value_.__r.__words[2] = 0;
          v89->__r_.__value_.__r.__words[0] = 0;
          *(_DWORD *)(v20 + 40) |= 2u;
          v91 = *(_QWORD *)(v20 + 8);
          v92 = (_QWORD *)(v91 & 0xFFFFFFFFFFFFFFFELL);
          v11 = a5;
          if ((v91 & 1) != 0)
            v92 = (_QWORD *)*v92;
          sub_19C2CE500((uint64_t *)(v20 + 56), (__int128 *)__p, (uint64_t)v92);
          if (SHIBYTE(v117) < 0)
            operator delete(__p[0]);
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__dst.__r_.__value_.__l.__data_);
          *(_DWORD *)(v20 + 40) |= 0x10u;
          LODWORD(v56) = v25;
          v12 = v23;
          goto LABEL_83;
        }
      }
      v60 = *(int **)(a7 + 64);
      if (!v60)
        break;
      v61 = *(int *)(a7 + 56);
      v62 = *v60;
      if ((int)v61 >= *v60)
      {
        if (v62 == *(_DWORD *)(a7 + 60))
        {
LABEL_72:
          sub_19C2E0CEC(v112, v62 + 1);
          v60 = *(int **)(a7 + 64);
          v62 = *v60;
        }
        *v60 = v62 + 1;
        v20 = sub_19C2C0F14(*(_QWORD *)(a7 + 48));
        v63 = *(_QWORD *)(a7 + 64);
        v64 = *(int *)(a7 + 56);
        *(_DWORD *)(a7 + 56) = v64 + 1;
        *(_QWORD *)(v63 + 8 * v64 + 8) = v20;
        goto LABEL_74;
      }
      *(_DWORD *)(a7 + 56) = v61 + 1;
      v20 = *(_QWORD *)&v60[2 * v61 + 2];
LABEL_74:
      *(_DWORD *)(v20 + 40) |= 1u;
      sub_19C2A6CA0(__p, v15, v14);
      v65 = *(_QWORD *)(v20 + 8);
      v66 = (_QWORD *)(v65 & 0xFFFFFFFFFFFFFFFELL);
      if ((v65 & 1) != 0)
        v66 = (_QWORD *)*v66;
      sub_19C2CE500((uint64_t *)(v20 + 48), (__int128 *)__p, (uint64_t)v66);
      if (SHIBYTE(v117) < 0)
        operator delete(__p[0]);
      v67 = *(_DWORD *)(v20 + 40);
      *(_DWORD *)(v20 + 64) = v16;
      *(_DWORD *)(v20 + 40) = v67 | 6;
      sub_19C2A6CA0(__p, __src, __len);
      v68 = *(_QWORD *)(v20 + 8);
      v69 = (_QWORD *)(v68 & 0xFFFFFFFFFFFFFFFELL);
      if ((v68 & 1) != 0)
        v69 = (_QWORD *)*v69;
      sub_19C2CE500((uint64_t *)(v20 + 56), (__int128 *)__p, (uint64_t)v69);
      if (SHIBYTE(v117) < 0)
        operator delete(__p[0]);
      v70 = *(_DWORD *)(v20 + 40);
      *(_DWORD *)(v20 + 68) = v24;
      *(_DWORD *)(v20 + 40) = v70 | 0x18;
      LODWORD(v56) = v25;
      v12 = v23;
      v11 = a5;
LABEL_83:
      *(_DWORD *)(v20 + 72) = v56;
      v23 = v12;
LABEL_84:
      v10 += 24;
      v13 = v111;
      if (v10 == v110)
        goto LABEL_123;
    }
    v62 = *(_DWORD *)(a7 + 60);
    goto LABEL_72;
  }
  v23 = 0;
LABEL_123:
  if (v23 == a4)
  {
    result = sub_19C2AD358(a1, (uint64_t)(a1 + 5), a7, a8);
    if (!*a8)
    {
      sub_19C2CD3C8(a8);
      *(_DWORD *)(a7 + 40) |= 1u;
      sub_19C2A6CA0(__p, a2, a3);
      v94 = *(_QWORD *)(a7 + 8);
      v95 = (_QWORD *)(v94 & 0xFFFFFFFFFFFFFFFELL);
      if ((v94 & 1) != 0)
        v95 = (_QWORD *)*v95;
      sub_19C2CE500((uint64_t *)(a7 + 72), (__int128 *)__p, (uint64_t)v95);
      if (SHIBYTE(v117) < 0)
        operator delete(__p[0]);
      return sub_19C2CD3C0(a8);
    }
    return result;
  }
  LODWORD(__p[0]) = 13;
  v96 = (_QWORD *)sub_19C2A09EC((uint64_t)&__p[1]);
  sub_19C2A1B24(v96, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
  sub_19C2A1B24(&__p[1], (uint64_t)"(", 1);
  std::ostream::operator<<();
  sub_19C2A1B24(&__p[1], (uint64_t)") [", 3);
  sub_19C2A1B24(&__p[1], (uint64_t)"(consumed) == (normalized.size())", 33);
  sub_19C2A1B24(&__p[1], (uint64_t)"] ", 2);
  sub_19C2A1B24(&__p[1], (uint64_t)"all normalized characters are not consumed.", 43);
  sub_19C29E5C0((unsigned int *)__p, (uint64_t)a8);
LABEL_137:
  __p[1] = *(void **)MEMORY[0x1E0DE4F60];
  *(void **)((char *)&__p[1] + *((_QWORD *)__p[1] - 3)) = *(void **)(MEMORY[0x1E0DE4F60] + 24);
  v117 = MEMORY[0x1E0DE4FB8] + 16;
  if (v119 < 0)
    operator delete(v118);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return (_QWORD *)MEMORY[0x1A1AD34CC](&v120);
}

void sub_19C2AD2AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a33 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_19C2AD358@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  _DWORD *v5;
  _DWORD *v6;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  BOOL v17;
  int *v18;
  int v19;
  int v20;
  int v21;
  int *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  char *v28;
  size_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  std::string *v38;
  uint64_t v39;
  const char *v40;
  size_t v41;
  int v42;
  char *v43;
  size_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  const char *v49;
  size_t v50;
  int v51;
  char *v52;
  size_t v53;
  uint64_t v54;
  _QWORD *v55;
  char v57;
  std::string __p[2];

  v6 = *(_DWORD **)a2;
  v5 = *(_DWORD **)(a2 + 8);
  if (*(_DWORD **)a2 != v5)
  {
    v9 = a3 + 48;
    while (1)
    {
      switch(*v6)
      {
        case 0:
          v10 = *(_QWORD *)(a3 + 64);
          if (v10)
            v11 = v10 + 8;
          else
            v11 = 0;
          v12 = *(int *)(a3 + 56);
          v13 = (uint64_t *)(v11 + 8 * v12 - 8);
          if ((_DWORD)v12)
            v14 = (unint64_t)v13 > v11;
          else
            v14 = 0;
          if (v14)
          {
            v15 = v11 + 8;
            do
            {
              v16 = *v13--;
              sub_19C2B69EC(*(_QWORD *)(v15 - 8), v16);
              v17 = v15 >= (unint64_t)v13;
              v15 += 8;
            }
            while (!v17);
          }
          goto LABEL_52;
        case 1:
          v18 = *(int **)(a3 + 64);
          if (!v18)
          {
            v20 = *(_DWORD *)(a3 + 60);
LABEL_34:
            sub_19C2E0CEC(v9, v20 + 1);
            v18 = *(int **)(a3 + 64);
            v20 = *v18;
            goto LABEL_35;
          }
          v19 = *(_DWORD *)(a3 + 56);
          v20 = *v18;
          if (v19 < *v18)
          {
            v21 = v19 + 1;
            *(_DWORD *)(a3 + 56) = v19 + 1;
            goto LABEL_36;
          }
          if (v20 == *(_DWORD *)(a3 + 60))
            goto LABEL_34;
LABEL_35:
          *v18 = v20 + 1;
          v32 = sub_19C2C0F14(*(_QWORD *)(a3 + 48));
          v33 = *(_QWORD *)(a3 + 64);
          v34 = *(int *)(a3 + 56);
          v21 = v34 + 1;
          *(_DWORD *)(a3 + 56) = v34 + 1;
          *(_QWORD *)(v33 + 8 * v34 + 8) = v32;
LABEL_36:
          if (v21 > 1)
          {
            v35 = v21;
            do
            {
              v36 = *(_QWORD *)(a3 + 64) + 8;
              v37 = *(_QWORD *)(v36 + 8 * (v35 - 2));
              *(_QWORD *)(v36 + 8 * (v35 - 2)) = *(_QWORD *)(v36 + 8 * (v35 - 1));
              *(_QWORD *)(v36 + 8 * (v35 - 1)) = v37;
              v14 = v35-- > 2;
            }
            while (v14);
          }
          if (v21 < 1)
          {
            sub_19C2CF5C8((uint64_t)__p, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1728);
            v38 = sub_19C2CF5E0(__p, "CHECK failed: (index) < (current_size_): ");
            sub_19C2CF710((uint64_t)&v57, (const char **)&v38->__r_.__value_.__l.__data_);
            sub_19C2CF718((uint64_t)__p);
          }
          v39 = *(_QWORD *)(*(_QWORD *)(a3 + 64) + 8);
          v40 = sub_19C29E888(a1[1]);
          v41 = strlen(v40);
          v42 = (*(uint64_t (**)(uint64_t *, const char *, size_t))(*a1 + 504))(a1, v40, v41);
          *(_DWORD *)(v39 + 40) |= 4u;
          *(_DWORD *)(v39 + 64) = v42;
          v43 = (char *)sub_19C29E888(a1[1]);
          sub_19C29E888(a1[1]);
          *(_DWORD *)(v39 + 40) |= 1u;
          sub_19C2A6CA0(__p, v43, v44);
          v45 = *(_QWORD *)(v39 + 8);
          v46 = (_QWORD *)(v45 & 0xFFFFFFFFFFFFFFFELL);
          if ((v45 & 1) != 0)
            v46 = (_QWORD *)*v46;
          sub_19C2CE500((uint64_t *)(v39 + 48), (__int128 *)__p, (uint64_t)v46);
          goto LABEL_50;
        case 2:
          v22 = *(int **)(a3 + 64);
          if (!v22)
          {
            v24 = *(_DWORD *)(a3 + 60);
LABEL_45:
            sub_19C2E0CEC(v9, v24 + 1);
            v22 = *(int **)(a3 + 64);
            v24 = *v22;
            goto LABEL_46;
          }
          v23 = *(int *)(a3 + 56);
          v24 = *v22;
          if ((int)v23 < *v22)
          {
            *(_DWORD *)(a3 + 56) = v23 + 1;
            v25 = *(_QWORD *)&v22[2 * v23 + 2];
            goto LABEL_47;
          }
          if (v24 == *(_DWORD *)(a3 + 60))
            goto LABEL_45;
LABEL_46:
          *v22 = v24 + 1;
          v25 = sub_19C2C0F14(*(_QWORD *)(a3 + 48));
          v47 = *(_QWORD *)(a3 + 64);
          v48 = *(int *)(a3 + 56);
          *(_DWORD *)(a3 + 56) = v48 + 1;
          *(_QWORD *)(v47 + 8 * v48 + 8) = v25;
LABEL_47:
          v49 = sub_19C29E8D8(a1[1]);
          v50 = strlen(v49);
          v51 = (*(uint64_t (**)(uint64_t *, const char *, size_t))(*a1 + 504))(a1, v49, v50);
          *(_DWORD *)(v25 + 40) |= 4u;
          *(_DWORD *)(v25 + 64) = v51;
          v52 = (char *)sub_19C29E8D8(a1[1]);
          sub_19C29E8D8(a1[1]);
          *(_DWORD *)(v25 + 40) |= 1u;
          sub_19C2A6CA0(__p, v52, v53);
          v54 = *(_QWORD *)(v25 + 8);
          v55 = (_QWORD *)(v54 & 0xFFFFFFFFFFFFFFFELL);
          if ((v54 & 1) != 0)
            v55 = (_QWORD *)*v55;
          sub_19C2CE500((uint64_t *)(v25 + 48), (__int128 *)__p, (uint64_t)v55);
LABEL_50:
          if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p[0].__r_.__value_.__l.__data_);
LABEL_52:
          if (++v6 == v5)
            return sub_19C2CD3C0(a4);
          break;
        case 3:
          if (*(int *)(a3 + 56) >= 1)
          {
            v26 = 0;
            do
            {
              v27 = sub_19C2B4420(v9, v26);
              if ((*(unsigned int (**)(uint64_t *, _QWORD))(*a1 + 528))(a1, *(unsigned int *)(v27 + 64)))
              {
                v28 = (char *)sub_19C29E838(a1[1]);
                sub_19C29E838(a1[1]);
                *(_DWORD *)(v27 + 40) |= 1u;
                sub_19C2A6CA0(__p, v28, v29);
                v30 = *(_QWORD *)(v27 + 8);
                v31 = (_QWORD *)(v30 & 0xFFFFFFFFFFFFFFFELL);
                if ((v30 & 1) != 0)
                  v31 = (_QWORD *)*v31;
                sub_19C2CE500((uint64_t *)(v27 + 48), (__int128 *)__p, (uint64_t)v31);
                if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__p[0].__r_.__value_.__l.__data_);
              }
              ++v26;
            }
            while (v26 < *(_DWORD *)(a3 + 56));
          }
          goto LABEL_52;
        default:
          return (_QWORD *)sub_19C2CD524(a4, 13, "unknown extra_option type.", 26);
      }
    }
  }
  return sub_19C2CD3C0(a4);
}

void sub_19C2AD7A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  sub_19C2CF718((uint64_t)&__p);
  _Unwind_Resume(a1);
}

void sub_19C2AD7D8(uint64_t *a1@<X0>, char *a2@<X1>, size_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  void *__p[3];
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  char v21;
  uint64_t v22;

  (*(void (**)(uint64_t *__return_ptr))(*a1 + 88))(a5);
  if (!*a5)
  {
    sub_19C2CD3C8(a5);
    if (a4)
    {
      sub_19C2BFE48(a4);
      v17 = 0;
      v18 = 0;
      v19 = 0;
      v14 = 0;
      v15 = 0;
      v16 = 0;
      (*(void (**)(uint64_t, char *, size_t, void **, void **))(*(_QWORD *)a1[2] + 32))(a1[2], a2, a3, &v17, &v14);
      if (!*a5)
      {
        sub_19C2CD3C8(a5);
        (*(void (**)(void **__return_ptr))(*(_QWORD *)a1[1] + 40))(__p);
        if (v19 >= 0)
          v10 = HIBYTE(v19);
        else
          v10 = v18;
        sub_19C2AC5E0(a1, a2, a3, v10, (uint64_t *)&v14, (uint64_t *)__p, a4, a5);
        if (!*a5)
        {
          v11 = sub_19C2CD3C8(a5);
          sub_19C2CD3C0(v11);
        }
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
      }
      if (v14)
      {
        v15 = v14;
        operator delete(v14);
      }
      if (SHIBYTE(v19) < 0)
        operator delete(v17);
    }
    else
    {
      LODWORD(v17) = 13;
      v12 = (_QWORD *)sub_19C2A09EC((uint64_t)&v18);
      sub_19C2A1B24(v12, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_19C2A1B24(&v18, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_19C2A1B24(&v18, (uint64_t)") [", 3);
      sub_19C2A1B24(&v18, (uint64_t)"spt", 3);
      sub_19C2A1B24(&v18, (uint64_t)"] ", 2);
      sub_19C2A1B24(&v18, (uint64_t)"output proto is null", 20);
      sub_19C29E5C0((unsigned int *)&v17, (uint64_t)a5);
      v18 = *MEMORY[0x1E0DE4F60];
      *(uint64_t *)((char *)&v18 + *(_QWORD *)(v18 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
      v19 = MEMORY[0x1E0DE4FB8] + 16;
      if (v21 < 0)
        operator delete(v20);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x1A1AD34CC](&v22);
    }
  }
}

void sub_19C2ADA50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (__p)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void sub_19C2ADAAC(uint64_t *a1@<X0>, char *a2@<X1>, size_t a3@<X2>, uint64_t a4@<X4>, uint64_t *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  void **v29;
  uint64_t v30;
  uint64_t v31;
  void *__p;
  char v33;
  _BYTE v34[152];

  (*(void (**)(uint64_t *__return_ptr))(*a1 + 88))(a5);
  if (*a5)
    return;
  sub_19C2CD3C8(a5);
  if (a4)
  {
    sub_19C2C0890(a4);
    v26 = 0;
    v27 = 0;
    v28 = 0;
    v23 = 0;
    v24 = 0;
    v25 = 0;
    (*(void (**)(uint64_t, char *, size_t, void **, void **))(*(_QWORD *)a1[2] + 32))(a1[2], a2, a3, &v26, &v23);
    if (!*a5)
    {
      sub_19C2CD3C8(a5);
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1[1] + 88))(a1[1]) & 1) != 0)
      {
        (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1[1] + 48))(&v21);
        v10 = v21;
        v11 = v22;
        if (v21 != v22)
        {
          while (1)
          {
            v12 = *(int **)(a4 + 32);
            if (!v12)
              break;
            v13 = *(int *)(a4 + 24);
            v14 = *v12;
            if ((int)v13 >= *v12)
            {
              if (v14 == *(_DWORD *)(a4 + 28))
              {
LABEL_12:
                sub_19C2E0CEC(a4 + 16, v14 + 1);
                v12 = *(int **)(a4 + 32);
                v14 = *v12;
              }
              *v12 = v14 + 1;
              v15 = sub_19C2C0FC8(*(_QWORD *)(a4 + 16));
              v16 = *(_QWORD *)(a4 + 32);
              v17 = *(int *)(a4 + 24);
              *(_DWORD *)(a4 + 24) = v17 + 1;
              *(_QWORD *)(v16 + 8 * v17 + 8) = v15;
              goto LABEL_14;
            }
            *(_DWORD *)(a4 + 24) = v13 + 1;
            v15 = *(_QWORD *)&v12[2 * v13 + 2];
LABEL_14:
            v18 = *(_DWORD *)(v10 + 24);
            *(_DWORD *)(v15 + 40) |= 2u;
            *(_DWORD *)(v15 + 80) = v18;
            if (v28 >= 0)
              v19 = HIBYTE(v28);
            else
              v19 = v27;
            sub_19C2AC5E0(a1, a2, a3, v19, (uint64_t *)&v23, (uint64_t *)v10, v15, a5);
            if (*a5)
              goto LABEL_29;
            sub_19C2CD3C8(a5);
            v10 += 32;
            if (v10 == v11)
            {
              sub_19C2CD3C0(a5);
              goto LABEL_29;
            }
          }
          v14 = *(_DWORD *)(a4 + 28);
          goto LABEL_12;
        }
        LODWORD(v29) = 13;
        sub_19C2A09EC((uint64_t)&v30);
        sub_19C2A1B24(&v30, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        sub_19C2A1B24(&v30, (uint64_t)"(", 1);
        std::ostream::operator<<();
        sub_19C2A1B24(&v30, (uint64_t)") [", 3);
        sub_19C2A1B24(&v30, (uint64_t)"!nbests.empty()", 15);
        sub_19C2A1B24(&v30, (uint64_t)"] ", 2);
        sub_19C2A1B24(&v30, (uint64_t)"NBestEncode returns empty result.", 33);
        sub_19C29E5C0((unsigned int *)&v29, (uint64_t)a5);
        v30 = *MEMORY[0x1E0DE4F60];
        *(uint64_t *)((char *)&v30 + *(_QWORD *)(v30 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
        v31 = MEMORY[0x1E0DE4FB8] + 16;
        if (v33 < 0)
          operator delete(__p);
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x1A1AD34CC](v34);
LABEL_29:
        v29 = (void **)&v21;
        sub_19C2A19C0(&v29);
      }
      else
      {
        LODWORD(v29) = 13;
        sub_19C2A09EC((uint64_t)&v30);
        sub_19C2A1B24(&v30, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        sub_19C2A1B24(&v30, (uint64_t)"(", 1);
        std::ostream::operator<<();
        sub_19C2A1B24(&v30, (uint64_t)") [", 3);
        sub_19C2A1B24(&v30, (uint64_t)"model_->IsNBestEncodeAvailable()", 32);
        sub_19C2A1B24(&v30, (uint64_t)"] ", 2);
        sub_19C2A1B24(&v30, (uint64_t)"NBestEncode is not available for the current model.", 51);
        sub_19C29E5C0((unsigned int *)&v29, (uint64_t)a5);
        v30 = *MEMORY[0x1E0DE4F60];
        *(uint64_t *)((char *)&v30 + *(_QWORD *)(v30 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
        v31 = MEMORY[0x1E0DE4FB8] + 16;
        if (v33 < 0)
          operator delete(__p);
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x1A1AD34CC](v34);
      }
    }
    if (v23)
    {
      v24 = v23;
      operator delete(v23);
    }
    if (SHIBYTE(v28) < 0)
      operator delete(v26);
  }
  else
  {
    LODWORD(v29) = 13;
    v20 = (_QWORD *)sub_19C2A09EC((uint64_t)&v30);
    sub_19C2A1B24(v20, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_19C2A1B24(&v30, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_19C2A1B24(&v30, (uint64_t)") [", 3);
    sub_19C2A1B24(&v30, (uint64_t)"nbest_spt", 9);
    sub_19C2A1B24(&v30, (uint64_t)"] ", 2);
    sub_19C2A1B24(&v30, (uint64_t)"output proto is null", 20);
    sub_19C29E5C0((unsigned int *)&v29, (uint64_t)a5);
    v30 = *MEMORY[0x1E0DE4F60];
    *(uint64_t *)((char *)&v30 + *(_QWORD *)(v30 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
    v31 = MEMORY[0x1E0DE4FB8] + 16;
    if (v33 < 0)
      operator delete(__p);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x1A1AD34CC](v34);
  }
}

void sub_19C2AE01C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char *a22)
{
  a22 = &a10;
  sub_19C2A19C0((void ***)&a22);
  if (__p)
  {
    a14 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(a1);
}

void sub_19C2AE0AC(uint64_t *a1@<X0>, char *a2@<X1>, size_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t *a6@<X8>, float a7@<S0>)
{
  _QWORD *v14;
  _QWORD *v15;
  char v16;
  char v17;
  uint64_t v18;
  float *v19;
  uint64_t v20;
  float *v21;
  float v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  void *v29[3];
  uint64_t v30;
  uint64_t v31;
  void *__p;
  void *v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  float *v39[11];
  char v40;
  uint64_t v41;

  (*(void (**)(uint64_t *__return_ptr))(*a1 + 88))(a6);
  if (*a6)
    return;
  sub_19C2CD3C8(a6);
  if (a5)
  {
    sub_19C2BFE48(a5);
    if (a4 < 513)
    {
      v35 = 0;
      v36 = 0;
      v37 = 0;
      __p = 0;
      v33 = 0;
      v34 = 0;
      (*(void (**)(uint64_t, char *, size_t, void **, void **))(*(_QWORD *)a1[2] + 32))(a1[2], a2, a3, &v35, &__p);
      if (*a6)
      {
LABEL_5:
        if (__p)
        {
          v33 = __p;
          operator delete(__p);
        }
        if (SHIBYTE(v37) < 0)
          operator delete(v35);
        return;
      }
      sub_19C2CD3C8(a6);
      v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1[1] + 88))(a1[1]);
      if (a4 >= 0)
        v17 = v16;
      else
        v17 = 0;
      if ((v17 & 1) != 0)
      {
        if (a4 > 1)
        {
          (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1[1] + 48))(&v30);
          if (v30 == v31)
          {
            LODWORD(v38) = 13;
            sub_19C2A09EC((uint64_t)v39);
            sub_19C2A1B24(v39, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
            sub_19C2A1B24(v39, (uint64_t)"(", 1);
            std::ostream::operator<<();
            sub_19C2A1B24(v39, (uint64_t)") [", 3);
            sub_19C2A1B24(v39, (uint64_t)"!nbests.empty()", 15);
            sub_19C2A1B24(v39, (uint64_t)"] ", 2);
            sub_19C2A1B24(v39, (uint64_t)"NBestEncode returns empty result.", 33);
            sub_19C29E5C0((unsigned int *)&v38, (uint64_t)a6);
            sub_19C29E64C((uint64_t)&v38);
            v38 = &v30;
            sub_19C2A19C0((void ***)&v38);
            goto LABEL_5;
          }
          LODWORD(v29[0]) = 0;
          sub_19C2B6348(&v38, (v31 - v30) >> 5, v29);
          if (v31 != v30)
          {
            v19 = (float *)v38;
            if ((unint64_t)((v31 - v30) >> 5) <= 1)
              v20 = 1;
            else
              v20 = (v31 - v30) >> 5;
            v21 = (float *)(v30 + 24);
            do
            {
              v22 = *v21;
              v21 += 8;
              *v19++ = expf(v22 * a7);
              --v20;
            }
            while (v20);
          }
          v23 = sub_19C2CB7E4();
          sub_19C2B63C8((uint64_t)v29, (float *)v38, v39[0]);
          v24 = HIBYTE(v37);
          v25 = v36;
          v26 = sub_19C2B66F4((uint64_t)v29, v23, (double **)v29);
          if ((v24 & 0x80u) == 0)
            v27 = v24;
          else
            v27 = v25;
          sub_19C2AC5E0(a1, a2, a3, v27, (uint64_t *)&__p, (uint64_t *)(v30 + 32 * v26), a5, a6);
          v28 = *a6;
          if (!*a6)
            sub_19C2CD3C8(a6);
          if (v29[0])
          {
            v29[1] = v29[0];
            operator delete(v29[0]);
          }
          if (v38)
          {
            v39[0] = (float *)v38;
            operator delete(v38);
          }
          v38 = &v30;
          sub_19C2A19C0((void ***)&v38);
          if (v28)
            goto LABEL_5;
          goto LABEL_51;
        }
        (*(void (**)(void **__return_ptr))(*(_QWORD *)a1[1] + 40))(&v38);
        if (v37 >= 0)
          v18 = HIBYTE(v37);
        else
          v18 = v36;
      }
      else
      {
        if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1[1] + 80))(a1[1]) & 1) == 0)
        {
          LODWORD(v38) = 13;
          sub_19C2A09EC((uint64_t)v39);
          sub_19C2A1B24(v39, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
          sub_19C2A1B24(v39, (uint64_t)"(", 1);
          std::ostream::operator<<();
          sub_19C2A1B24(v39, (uint64_t)") [", 3);
          sub_19C2A1B24(v39, (uint64_t)"model_->IsSampleEncodeAvailable()", 33);
          sub_19C2A1B24(v39, (uint64_t)"] ", 2);
          sub_19C2A1B24(v39, (uint64_t)"SampleEncode is not available for the current model.", 52);
          sub_19C29E5C0((unsigned int *)&v38, (uint64_t)a6);
          sub_19C29E64C((uint64_t)&v38);
          goto LABEL_5;
        }
        (*(void (**)(void **__return_ptr, float))(*(_QWORD *)a1[1] + 56))(&v38, a7);
        if (v37 >= 0)
          v18 = HIBYTE(v37);
        else
          v18 = v36;
      }
      sub_19C2AC5E0(a1, a2, a3, v18, (uint64_t *)&__p, (uint64_t *)&v38, a5, a6);
      if (*a6)
      {
        if (v38)
        {
          v39[0] = (float *)v38;
          operator delete(v38);
        }
        goto LABEL_5;
      }
      sub_19C2CD3C8(a6);
      if (v38)
      {
        v39[0] = (float *)v38;
        operator delete(v38);
      }
LABEL_51:
      sub_19C2CD3C0(a6);
      goto LABEL_5;
    }
    LODWORD(v38) = 13;
    v15 = (_QWORD *)sub_19C2A09EC((uint64_t)v39);
    sub_19C2A1B24(v15, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_19C2A1B24(v39, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_19C2A1B24(v39, (uint64_t)") [", 3);
    sub_19C2A1B24(v39, (uint64_t)"(nbest_size) <= (512)", 21);
    sub_19C2A1B24(v39, (uint64_t)"] ", 2);
    sub_19C2A1B24(v39, (uint64_t)"nbest_size must be nbest_size <= 512", 36);
    sub_19C29E5C0((unsigned int *)&v38, (uint64_t)a6);
  }
  else
  {
    LODWORD(v38) = 13;
    v14 = (_QWORD *)sub_19C2A09EC((uint64_t)v39);
    sub_19C2A1B24(v14, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_19C2A1B24(v39, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_19C2A1B24(v39, (uint64_t)") [", 3);
    sub_19C2A1B24(v39, (uint64_t)"spt", 3);
    sub_19C2A1B24(v39, (uint64_t)"] ", 2);
    sub_19C2A1B24(v39, (uint64_t)"output proto is null", 20);
    sub_19C29E5C0((unsigned int *)&v38, (uint64_t)a6);
  }
  v39[0] = *(float **)MEMORY[0x1E0DE4F60];
  *(float **)((char *)v39 + *((_QWORD *)v39[0] - 3)) = *(float **)(MEMORY[0x1E0DE4F60] + 24);
  v39[1] = (float *)(MEMORY[0x1E0DE4FB8] + 16);
  if (v40 < 0)
    operator delete(v39[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1A1AD34CC](&v41);
}

void sub_19C2AE768(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char *a24,uint64_t a25)
{
  a24 = &a12;
  sub_19C2A19C0((void ***)&a24);
  if (__p)
  {
    a16 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(a1);
}

void sub_19C2AE854(uint64_t a1@<X0>, char *a2@<X1>, size_t a3@<X2>, uint64_t a4@<X6>, uint64_t *a5@<X8>, float a6@<S0>)
{
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  void **v31;
  uint64_t v32;
  uint64_t v33;
  void *__p;
  char v35;
  _BYTE v36[152];

  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 96))(*(_QWORD *)(a1 + 8)) & 1) != 0)
  {
    v28 = 0;
    v29 = 0;
    v30 = 0;
    v25 = 0;
    v26 = 0;
    v27 = 0;
    (*(void (**)(_QWORD, char *, size_t, void **, void **))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), a2, a3, &v28, &v25);
    if (!*a5)
    {
      sub_19C2CD3C8(a5);
      (*(void (**)(uint64_t *__return_ptr, float))(**(_QWORD **)(a1 + 8) + 64))(&v23, a6);
      v12 = v23;
      v13 = v24;
      if (v23 != v24)
      {
        while (1)
        {
          v14 = *(int **)(a4 + 32);
          if (!v14)
            break;
          v15 = *(int *)(a4 + 24);
          v16 = *v14;
          if ((int)v15 >= *v14)
          {
            if (v16 == *(_DWORD *)(a4 + 28))
            {
LABEL_9:
              sub_19C2E0CEC(a4 + 16, v16 + 1);
              v14 = *(int **)(a4 + 32);
              v16 = *v14;
            }
            *v14 = v16 + 1;
            v17 = sub_19C2C0FC8(*(_QWORD *)(a4 + 16));
            v18 = *(_QWORD *)(a4 + 32);
            v19 = *(int *)(a4 + 24);
            *(_DWORD *)(a4 + 24) = v19 + 1;
            *(_QWORD *)(v18 + 8 * v19 + 8) = v17;
            goto LABEL_11;
          }
          *(_DWORD *)(a4 + 24) = v15 + 1;
          v17 = *(_QWORD *)&v14[2 * v15 + 2];
LABEL_11:
          v20 = *(_DWORD *)(v12 + 24);
          *(_DWORD *)(v17 + 40) |= 2u;
          *(_DWORD *)(v17 + 80) = v20;
          if (v30 >= 0)
            v21 = HIBYTE(v30);
          else
            v21 = v29;
          sub_19C2AC5E0((uint64_t *)a1, a2, a3, v21, (uint64_t *)&v25, (uint64_t *)v12, v17, a5);
          if (*a5)
            goto LABEL_23;
          sub_19C2CD3C8(a5);
          v12 += 32;
          if (v12 == v13)
          {
            sub_19C2CD3C0(a5);
            goto LABEL_23;
          }
        }
        v16 = *(_DWORD *)(a4 + 28);
        goto LABEL_9;
      }
      LODWORD(v31) = 13;
      sub_19C2A09EC((uint64_t)&v32);
      sub_19C2A1B24(&v32, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_19C2A1B24(&v32, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_19C2A1B24(&v32, (uint64_t)") [", 3);
      sub_19C2A1B24(&v32, (uint64_t)"!results.empty()", 16);
      sub_19C2A1B24(&v32, (uint64_t)"] ", 2);
      sub_19C2A1B24(&v32, (uint64_t)"SampleEncodeAndScore returns empty result.", 42);
      sub_19C29E5C0((unsigned int *)&v31, (uint64_t)a5);
      v32 = *MEMORY[0x1E0DE4F60];
      *(uint64_t *)((char *)&v32 + *(_QWORD *)(v32 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
      v33 = MEMORY[0x1E0DE4FB8] + 16;
      if (v35 < 0)
        operator delete(__p);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x1A1AD34CC](v36);
LABEL_23:
      v31 = (void **)&v23;
      sub_19C2A19C0(&v31);
    }
    if (v25)
    {
      v26 = v25;
      operator delete(v25);
    }
    if (SHIBYTE(v30) < 0)
      operator delete(v28);
  }
  else
  {
    LODWORD(v31) = 13;
    v22 = (_QWORD *)sub_19C2A09EC((uint64_t)&v32);
    sub_19C2A1B24(v22, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_19C2A1B24(&v32, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_19C2A1B24(&v32, (uint64_t)") [", 3);
    sub_19C2A1B24(&v32, (uint64_t)"model_->IsSampleEncodeAndScoreAvailable()", 41);
    sub_19C2A1B24(&v32, (uint64_t)"] ", 2);
    sub_19C2A1B24(&v32, (uint64_t)"SampleEncodeAndScore is not available for the current model.", 60);
    sub_19C29E5C0((unsigned int *)&v31, (uint64_t)a5);
    v32 = *MEMORY[0x1E0DE4F60];
    *(uint64_t *)((char *)&v32 + *(_QWORD *)(v32 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
    v33 = MEMORY[0x1E0DE4FB8] + 16;
    if (v35 < 0)
      operator delete(__p);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x1A1AD34CC](v36);
  }
}

void sub_19C2AECA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char *a22)
{
  a22 = &a10;
  sub_19C2A19C0((void ***)&a22);
  if (__p)
  {
    a14 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(a1);
}

void sub_19C2AED1C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, float *a4@<X3>, uint64_t *a5@<X8>, float a6@<S0>)
{
  void *v12;
  uint64_t v13;
  _QWORD *v14;
  void *__p;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  char v22;
  uint64_t v23;

  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 104))(*(_QWORD *)(a1 + 8)) & 1) != 0)
  {
    v18 = 0;
    v19 = 0;
    v20 = 0;
    __p = 0;
    v16 = 0;
    v17 = 0;
    (*(void (**)(_QWORD, uint64_t, uint64_t, void **, void **))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), a2, a3, &v18, &__p);
    if (!*a5)
    {
      sub_19C2CD3C8(a5);
      if (v20 >= 0)
        v12 = &v18;
      else
        v12 = v18;
      if (v20 >= 0)
        v13 = HIBYTE(v20);
      else
        v13 = v19;
      *a4 = (*(float (**)(_QWORD, void *, uint64_t, float))(**(_QWORD **)(a1 + 8) + 72))(*(_QWORD *)(a1 + 8), v12, v13, a6);
      sub_19C2CD3C0(a5);
    }
    if (__p)
    {
      v16 = __p;
      operator delete(__p);
    }
    if (SHIBYTE(v20) < 0)
      operator delete(v18);
  }
  else
  {
    LODWORD(v18) = 13;
    v14 = (_QWORD *)sub_19C2A09EC((uint64_t)&v19);
    sub_19C2A1B24(v14, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_19C2A1B24(&v19, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_19C2A1B24(&v19, (uint64_t)") [", 3);
    sub_19C2A1B24(&v19, (uint64_t)"model_->IsCalculateEntropyAvailable()", 37);
    sub_19C2A1B24(&v19, (uint64_t)"] ", 2);
    sub_19C2A1B24(&v19, (uint64_t)"CalculateEntropy is not available for the current model.", 56);
    sub_19C29E5C0((unsigned int *)&v18, (uint64_t)a5);
    v19 = *MEMORY[0x1E0DE4F60];
    *(uint64_t *)((char *)&v19 + *(_QWORD *)(v19 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
    v20 = MEMORY[0x1E0DE4FB8] + 16;
    if (v22 < 0)
      operator delete(v21);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x1A1AD34CC](&v23);
  }
}

void sub_19C2AEF2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (__p)
    operator delete(__p);
  if (a18 < 0)
    operator delete(a13);
  _Unwind_Resume(exception_object);
}

void sub_19C2AEF6C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  void *__p[3];

  sub_19C2AA4E0(a2, __p);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)a1 + 272))(a1, __p, a3);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_19C2AEFD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19C2AEFF4(uint64_t *a1@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  uint64_t v8;
  char *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  int v24;
  uint64_t v25;
  _QWORD *v26;
  int v27;
  _BOOL4 v28;
  int v29;
  int v30;
  char v31;
  uint64_t v32;
  unint64_t v33;
  size_t v34;
  unsigned __int8 *v35;
  uint64_t v36;
  const void *v37;
  uint64_t v38;
  __int128 *p_dst;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  void **v46;
  size_t v47;
  _BOOL4 v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t *v55;
  __int128 v56;
  void *__p[2];
  uint64_t v58;
  _QWORD v59[2];
  _QWORD *v60[2];
  uint64_t *v61;
  __int128 v62;
  uint64_t v63;
  BOOL v64;
  void *v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  void *v70;
  _QWORD *v71;
  __int128 __dst;
  unint64_t v73;

  v4 = a3;
  v68 = a3;
  (*(void (**)(uint64_t *__return_ptr))(*a1 + 88))(a4);
  if (*a4)
    return;
  sub_19C2CD3C8(a4);
  if (v4)
  {
    sub_19C2BFE48(v4);
    v8 = a1[4];
    if (v8 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 72))(v8))
      v9 = (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1[4] + 24))(a1[4]);
    else
      v9 = (char *)&unk_19C46CE35;
    v10 = *a2;
    v11 = a2[1];
    if (*a2 != v11)
    {
      while (1)
      {
        v12 = *v10;
        v13 = v10[1];
        v14 = v68;
        v15 = *(int **)(v68 + 64);
        if (!v15)
          break;
        v16 = *(int *)(v68 + 56);
        v17 = *v15;
        if ((int)v16 >= *v15)
        {
          if (v17 == *(_DWORD *)(v68 + 60))
          {
LABEL_14:
            sub_19C2E0CEC(v68 + 48, v17 + 1);
            v15 = *(int **)(v68 + 64);
            v17 = *v15;
          }
          *v15 = v17 + 1;
          v18 = sub_19C2C0F14(*(_QWORD *)(v14 + 48));
          v19 = *(_QWORD *)(v14 + 64);
          v20 = *(int *)(v14 + 56);
          *(_DWORD *)(v14 + 56) = v20 + 1;
          *(_QWORD *)(v19 + 8 * v20 + 8) = v18;
          goto LABEL_16;
        }
        *(_DWORD *)(v68 + 56) = v16 + 1;
        v18 = *(_QWORD *)&v15[2 * v16 + 2];
LABEL_16:
        *(_DWORD *)(v18 + 40) |= 1u;
        v21 = *(_QWORD *)(v18 + 8);
        v22 = (_QWORD *)(v21 & 0xFFFFFFFFFFFFFFFELL);
        if ((v21 & 1) != 0)
          v22 = (_QWORD *)*v22;
        v23 = sub_19C2CE524((uint64_t *)(v18 + 48), (uint64_t)v22);
        MEMORY[0x1A1AD31B4](v23, v12, v13);
        v24 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*a1 + 504))(a1, v12, v13);
        *(_DWORD *)(v18 + 40) |= 4u;
        *(_DWORD *)(v18 + 64) = v24;
        v10 += 2;
        if (v10 == v11)
        {
          v4 = v68;
          goto LABEL_20;
        }
      }
      v17 = *(_DWORD *)(v68 + 60);
      goto LABEL_14;
    }
LABEL_20:
    sub_19C2AD358(a1, (uint64_t)(a1 + 8), v4, a4);
    if (*a4)
      return;
    sub_19C2CD3C8(a4);
    v61 = 0;
    *(_DWORD *)(v4 + 40) |= 1u;
    v25 = *(_QWORD *)(v4 + 8);
    v26 = (_QWORD *)(v25 & 0xFFFFFFFFFFFFFFFELL);
    if ((v25 & 1) != 0)
      v26 = (_QWORD *)*v26;
    v60[1] = &v61;
    v61 = sub_19C2CE524((uint64_t *)(v4 + 72), (uint64_t)v26);
    v58 = 0;
    v59[0] = &v68;
    v59[1] = v60;
    v60[0] = &v68;
    __p[0] = 0;
    __p[1] = 0;
    v27 = *(_DWORD *)(v4 + 56);
    if (v27 >= 1)
    {
      v28 = 0;
      v29 = 0;
      v30 = 0;
      v31 = 1;
      while (1)
      {
        v32 = sub_19C2B37D4(v4 + 48, v30);
        if (!(*(unsigned int (**)(uint64_t *, _QWORD))(*a1 + 552))(a1, *(unsigned int *)(v32 + 64)))
          break;
        ++v30;
LABEL_68:
        v4 = v68;
        v27 = *(_DWORD *)(v68 + 56);
        if (v30 >= v27)
          goto LABEL_89;
      }
      sub_19C2AF77C((uint64_t)v59, v29, v30, a4);
      if (*a4)
        goto LABEL_95;
      sub_19C2CD3C8(a4);
      if (!v28)
      {
        if (*((char *)v61 + 23) < 0)
        {
          if (!v61[1])
          {
LABEL_32:
            v33 = *(_QWORD *)(v32 + 48) & 0xFFFFFFFFFFFFFFFELL;
            if (*(char *)(v33 + 23) < 0)
            {
              v35 = *(unsigned __int8 **)v33;
              v34 = *(_QWORD *)(v33 + 8);
            }
            else
            {
              v34 = *(unsigned __int8 *)(v33 + 23);
              v35 = (unsigned __int8 *)(*(_QWORD *)(v32 + 48) & 0xFFFFFFFFFFFFFFFELL);
            }
            v36 = *(unsigned int *)(v32 + 64);
            if ((*(unsigned int (**)(uint64_t *, uint64_t))(*a1 + 536))(a1, v36))
            {
              sub_19C2A6D48(&v62, "");
LABEL_58:
              v64 = 0;
LABEL_59:
              if (SHIBYTE(v58) < 0)
                operator delete(__p[0]);
              v58 = v63;
              *(_OWORD *)__p = v62;
              v28 = v64;
              if (v63 >= 0)
                v46 = __p;
              else
                v46 = (void **)v62;
              if (v63 >= 0)
                v47 = HIBYTE(v63);
              else
                v47 = *((_QWORD *)&v62 + 1);
              sub_19C2AFC84(v60, v30++, v46, v47);
              v29 = v30;
              goto LABEL_68;
            }
            if (!(*(unsigned int (**)(uint64_t *, uint64_t))(*a1 + 528))(a1, v36))
            {
              if ((v31 & 1) != 0
                && ((v40 = a1[4]) == 0
                 || (v41 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v40 + 152))(v40),
                     ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v41 + 16))(v41) & 1) != 0)
                 || (v42 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1[4] + 152))(a1[4]),
                     (*(unsigned int (**)(uint64_t))(*(_QWORD *)v42 + 24))(v42))))
              {
                if (v34 >= 3)
                {
                  v49 = *(unsigned __int16 *)v35 != 38626 || v35[2] != 129;
                  if (!v49)
                  {
                    v35 += 3;
                    v34 -= 3;
                  }
                  v43 = !v49;
                }
                else
                {
                  v43 = 0;
                }
                v50 = a1[4];
                if (v50)
                {
                  v51 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v50 + 152))(v50);
                  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v51 + 24))(v51))
                    v43 = 0;
                }
              }
              else
              {
                v43 = 0;
              }
              v52 = operator new(0x20uLL);
              v70 = v52 + 4;
              v71 = v52 + 4;
              *v52 = &unk_19C46CECA;
              v52[1] = 3;
              v52[2] = " ";
              v52[3] = 1;
              v69 = v52;
              sub_19C2B3F94(v35, v34, (uint64_t *)&v69, (uint64_t)&__dst);
              v62 = __dst;
              v63 = v73;
              v73 = 0;
              __dst = 0uLL;
              v64 = v43;
              if (v69)
              {
                v70 = v69;
                operator delete(v69);
              }
              goto LABEL_59;
            }
            v37 = (const void *)(*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 512))(a1, v36);
            if (v38 == v34 && !memcmp(v37, v35, v34))
            {
              sub_19C2A6D48(&v62, v9);
              goto LABEL_58;
            }
            if (v34 >= 0x7FFFFFFFFFFFFFF8)
              sub_19C2A1A54();
            if (v34 >= 0x17)
            {
              v44 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v34 | 7) != 0x17)
                v44 = v34 | 7;
              v45 = v44 + 1;
              p_dst = (__int128 *)operator new(v44 + 1);
              *((_QWORD *)&__dst + 1) = v34;
              v73 = v45 | 0x8000000000000000;
              *(_QWORD *)&__dst = p_dst;
            }
            else
            {
              HIBYTE(v73) = v34;
              p_dst = &__dst;
              if (!v34)
                goto LABEL_57;
            }
            memmove(p_dst, v35, v34);
LABEL_57:
            *((_BYTE *)p_dst + v34) = 0;
            v62 = __dst;
            v63 = v73;
            goto LABEL_58;
          }
        }
        else if (!*((_BYTE *)v61 + 23))
        {
          goto LABEL_32;
        }
      }
      v31 = 0;
      goto LABEL_32;
    }
    v29 = 0;
LABEL_89:
    sub_19C2AF77C((uint64_t)v59, v29, v27, a4);
    if (!*a4)
    {
      sub_19C2CD3C8(a4);
      v54 = a1[3];
      if (v54)
      {
        (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v54 + 40))(&v62);
        v55 = v61;
        if (*((char *)v61 + 23) < 0)
          operator delete((void *)*v61);
        v56 = v62;
        v55[2] = v63;
        *(_OWORD *)v55 = v56;
      }
      sub_19C2CD3C0(a4);
    }
LABEL_95:
    if (SHIBYTE(v58) < 0)
      operator delete(__p[0]);
  }
  else
  {
    LODWORD(v62) = 13;
    v53 = (_QWORD *)sub_19C2A09EC((uint64_t)&v62 + 8);
    sub_19C2A1B24(v53, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_19C2A1B24((_QWORD *)&v62 + 1, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_19C2A1B24((_QWORD *)&v62 + 1, (uint64_t)") [", 3);
    sub_19C2A1B24((_QWORD *)&v62 + 1, (uint64_t)"spt", 3);
    sub_19C2A1B24((_QWORD *)&v62 + 1, (uint64_t)"] ", 2);
    sub_19C2A1B24((_QWORD *)&v62 + 1, (uint64_t)"output proto is null", 20);
    sub_19C29E5C0((unsigned int *)&v62, (uint64_t)a4);
    *((_QWORD *)&v62 + 1) = *MEMORY[0x1E0DE4F60];
    *(_QWORD *)((char *)&v62 + *(_QWORD *)(*((_QWORD *)&v62 + 1) - 24) + 8) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
    v63 = MEMORY[0x1E0DE4FB8] + 16;
    if (v66 < 0)
      operator delete(v65);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x1A1AD34CC](&v67);
  }
}

void sub_19C2AF724(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19C2AF77C(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, _QWORD *a4@<X8>)
{
  int v8;
  uint64_t v9;
  unint64_t v10;
  size_t v11;
  void *v12;
  int v13;
  int v14;
  int v15;
  std::string::size_type size;
  unint64_t v17;
  std::string *v18;
  int v19;
  std::string::size_type v20;
  unint64_t v21;
  unint64_t v22;
  std::string *v23;
  unint64_t v24;
  unint64_t v25;
  const char *v26;
  int v27;
  unint64_t v28;
  const char *v29;
  size_t v30;
  _QWORD *v31;
  unint64_t v32;
  unsigned int v33;
  _QWORD v34[11];
  char v35;
  uint64_t v36;
  std::string v37;

  if (a2 >= a3)
  {
    sub_19C2CD3C0(a4);
  }
  else
  {
    memset(&v37, 0, sizeof(v37));
    v8 = a2;
    do
    {
      v9 = sub_19C2B37D4(**(_QWORD **)a1 + 48, v8);
      v10 = *(_QWORD *)(v9 + 48) & 0xFFFFFFFFFFFFFFFELL;
      if (*(char *)(v10 + 23) < 0)
      {
        v12 = *(void **)v10;
        v11 = *(_QWORD *)(v10 + 8);
      }
      else
      {
        v11 = *(unsigned __int8 *)(v10 + 23);
        v12 = (void *)(*(_QWORD *)(v9 + 48) & 0xFFFFFFFFFFFFFFFELL);
      }
      v13 = sub_19C29F3B0(v12, v11);
      if (v13 < 0)
      {
        v33 = 13;
        sub_19C2A09EC((uint64_t)v34);
        sub_19C2A1B24(v34, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        sub_19C2A1B24(v34, (uint64_t)"(", 1);
        std::ostream::operator<<();
        sub_19C2A1B24(v34, (uint64_t)") [", 3);
        sub_19C2A1B24(v34, (uint64_t)"(0) <= (byte)", 13);
        sub_19C2A1B24(v34, (uint64_t)"] ", 2);
        sub_19C29E5C0(&v33, (uint64_t)a4);
        goto LABEL_50;
      }
      std::string::append(&v37, 1uLL, v13);
      ++v8;
    }
    while (a3 != v8);
    v31 = a4;
    if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v14 = HIBYTE(v37.__r_.__value_.__r.__words[2]);
    else
      v14 = v37.__r_.__value_.__r.__words[1];
    if (v14 >= 1)
    {
      v15 = 0;
      while (1)
      {
        v32 = 0;
        size = HIBYTE(v37.__r_.__value_.__r.__words[2]);
        if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          size = v37.__r_.__value_.__l.__size_;
        if (size < v15)
          sub_19C2B41E0("string_view::substr");
        v17 = v15;
        v18 = (std::string *)v37.__r_.__value_.__r.__words[0];
        if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v18 = &v37;
        if (sub_19C2CB69C((unsigned __int8 *)v18 + v17, (uint64_t)v18 + size, (uint64_t *)&v32) != 65533)
          break;
        v19 = v17 + a2;
        if (v32 != 1)
        {
          if (v32 != 3)
          {
            v33 = 13;
            sub_19C2A09EC((uint64_t)v34);
            sub_19C2A1B24(v34, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
            sub_19C2A1B24(v34, (uint64_t)"(", 1);
            std::ostream::operator<<();
            sub_19C2A1B24(v34, (uint64_t)") [", 3);
            sub_19C2A1B24(v34, (uint64_t)"(consumed) == (1)", 17);
            sub_19C2A1B24(v34, (uint64_t)"] ", 2);
            sub_19C29E5C0(&v33, (uint64_t)v31);
            goto LABEL_50;
          }
          goto LABEL_23;
        }
        sub_19C2AFC84(*(_QWORD ***)(a1 + 8), v19, &unk_19C46CEC6, 3uLL);
        LODWORD(v22) = v32;
LABEL_42:
        v15 = v17 + v22;
        if (v15 >= v14)
          goto LABEL_47;
      }
      v19 = v17 + a2;
LABEL_23:
      v20 = HIBYTE(v37.__r_.__value_.__r.__words[2]);
      if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v20 = v37.__r_.__value_.__l.__size_;
      v21 = v20 - v17;
      if (v20 < v17)
        sub_19C2B41E0("string_view::substr");
      v22 = v32;
      v23 = &v37;
      if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v23 = (std::string *)v37.__r_.__value_.__r.__words[0];
      if (v21 >= v32)
        v24 = v32;
      else
        v24 = v21;
      if (v32)
      {
        v25 = 0;
        v26 = (char *)v23 + v17;
        v27 = v19;
        do
        {
          v28 = v22 - 1;
          if (v25 == v28)
            v29 = v26;
          else
            v29 = "";
          if (v25 == v28)
            v30 = v24;
          else
            v30 = 0;
          sub_19C2AFC84(*(_QWORD ***)(a1 + 8), v27 + v25++, v29, v30);
          v22 = v32;
        }
        while (v32 > v25);
      }
      goto LABEL_42;
    }
    v15 = 0;
LABEL_47:
    if (v15 + a2 == a3)
    {
      sub_19C2CD3C0(v31);
      goto LABEL_53;
    }
    v33 = 13;
    sub_19C2A09EC((uint64_t)v34);
    sub_19C2A1B24(v34, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_19C2A1B24(v34, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_19C2A1B24(v34, (uint64_t)") [", 3);
    sub_19C2A1B24(v34, (uint64_t)"(token_index_begin + offset) == (token_index_end)", 49);
    sub_19C2A1B24(v34, (uint64_t)"] ", 2);
    sub_19C29E5C0(&v33, (uint64_t)v31);
LABEL_50:
    v34[0] = *MEMORY[0x1E0DE4F60];
    *(_QWORD *)((char *)v34 + *(_QWORD *)(v34[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
    v34[1] = MEMORY[0x1E0DE4FB8] + 16;
    if (v35 < 0)
      operator delete((void *)v34[9]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x1A1AD34CC](&v36);
LABEL_53:
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v37.__r_.__value_.__l.__data_);
  }
}

void sub_19C2AFC1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;

  if (*(char *)(v11 - 89) < 0)
    operator delete(*(void **)(v11 - 112));
  _Unwind_Resume(exception_object);
}

std::string *sub_19C2AFC84(_QWORD **a1, int a2, const void *a3, size_t a4)
{
  uint64_t v7;
  uint64_t v8;
  __int128 *p_dst;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  __int128 __dst;
  unint64_t v20;

  v7 = sub_19C2B4420(**a1 + 48, a2);
  if (a4 >= 0x7FFFFFFFFFFFFFF8)
    sub_19C2A1A54();
  v8 = v7;
  if (a4 >= 0x17)
  {
    v10 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17)
      v10 = a4 | 7;
    v11 = v10 + 1;
    p_dst = (__int128 *)operator new(v10 + 1);
    *((_QWORD *)&__dst + 1) = a4;
    v20 = v11 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v20) = a4;
  p_dst = &__dst;
  if (a4)
LABEL_8:
    memmove(p_dst, a3, a4);
  *((_BYTE *)p_dst + a4) = 0;
  *(_DWORD *)(v8 + 40) |= 2u;
  v12 = *(_QWORD *)(v8 + 8);
  v13 = (_QWORD *)(v12 & 0xFFFFFFFFFFFFFFFELL);
  if ((v12 & 1) != 0)
    v13 = (_QWORD *)*v13;
  sub_19C2CE500((uint64_t *)(v8 + 56), &__dst, (uint64_t)v13);
  if (SHIBYTE(v20) < 0)
    operator delete((void *)__dst);
  v14 = *a1[1];
  if (*(char *)(v14 + 23) < 0)
    v15 = *(_QWORD *)(v14 + 8);
  else
    LODWORD(v15) = *(unsigned __int8 *)(v14 + 23);
  v16 = *(_DWORD *)(v8 + 40);
  *(_DWORD *)(v8 + 40) = v16 | 8;
  *(_DWORD *)(v8 + 68) = v15;
  if (*(char *)(v14 + 23) < 0)
    v17 = *(_QWORD *)(v14 + 8);
  else
    LODWORD(v17) = *(unsigned __int8 *)(v14 + 23);
  *(_DWORD *)(v8 + 40) = v16 | 0x18;
  *(_DWORD *)(v8 + 72) = v17 + a4;
  return std::string::append((std::string *)v14, (const std::string::value_type *)a3, a4);
}

void sub_19C2AFDDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19C2AFDF8(uint64_t a1@<X0>, int **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v8;
  int *v9;
  int *v10;
  int v11;
  std::string::size_type v12;
  _BYTE *v13;
  _BYTE *v14;
  std::string *p_p;
  std::string::size_type size;
  std::string __p;
  int v18;
  uint64_t v19;
  _BYTE *v20;
  unint64_t v21;

  v19 = 0;
  v20 = 0;
  v21 = 0;
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 496))(a1);
  sub_19C2AC01C(&v19, a2[1] - *a2);
  v9 = *a2;
  v10 = a2[1];
  if (*a2 == v10)
  {
LABEL_8:
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a1 + 264))(a1, &v19, a3);
  }
  else
  {
    while (1)
    {
      v11 = *v9;
      v18 = v11;
      if (v11 < 0 || v11 >= v8)
        break;
      __p.__r_.__value_.__r.__words[0] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 512))(a1);
      __p.__r_.__value_.__l.__size_ = v12;
      v13 = v20;
      if ((unint64_t)v20 >= v21)
      {
        v14 = (_BYTE *)sub_19C2B6848(&v19, (uint64_t)&__p);
      }
      else
      {
        sub_19C2B6954((int)&v21, v20, (uint64_t)&__p);
        v14 = v13 + 24;
      }
      v20 = v14;
      if (++v9 == v10)
        goto LABEL_8;
    }
    sub_19C2AFFB0("Invalid id: ", 0xCuLL, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    sub_19C2CD524(a4, 11, p_p, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v19;
  sub_19C2B3E94((void ***)&__p);
}

void sub_19C2AFF68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18)
{
  if (a15 < 0)
    operator delete(__p);
  __p = &a17;
  sub_19C2B3E94((void ***)&__p);
  _Unwind_Resume(a1);
}

void sub_19C2AFFB0(void *__src@<X0>, size_t __len@<X1>, std::string *a3@<X8>)
{
  void **v4;
  std::string::size_type v5;
  std::string *v6;
  void *v7[2];
  unsigned __int8 v8;
  std::string __dst;
  _QWORD v10[11];
  char v11;
  uint64_t v12;

  sub_19C2A6CA0(&__dst, __src, __len);
  sub_19C2A09EC((uint64_t)v10);
  std::ostream::operator<<();
  std::stringbuf::str();
  v10[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v10 + *(_QWORD *)(v10[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v10[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v11 < 0)
    operator delete((void *)v10[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1A1AD34CC](&v12);
  if ((v8 & 0x80u) == 0)
    v4 = v7;
  else
    v4 = (void **)v7[0];
  if ((v8 & 0x80u) == 0)
    v5 = v8;
  else
    v5 = (std::string::size_type)v7[1];
  v6 = std::string::append(&__dst, (const std::string::value_type *)v4, v5);
  *a3 = *v6;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if ((char)v8 < 0)
    operator delete(v7[0]);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
}

void sub_19C2B00DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C2B0120(_QWORD **a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  const char *v9;
  size_t v10;
  _QWORD *v11;
  char v13;
  uint64_t v14;

  ((void (*)(uint64_t *__return_ptr))(*a1)[11])(&v14);
  v2 = v14;
  sub_19C2CD3C8(&v14);
  if (!v2)
    return (*(uint64_t (**)(_QWORD *))(*a1[1] + 128))(a1[1]);
  if ((int)sub_19C2CB68C() <= 2)
  {
    v13 = 0;
    v3 = sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)"sentencepiece_processor.cc", 26);
    sub_19C2A1B24(v3, (uint64_t)"(", 1);
    v4 = (_QWORD *)std::ostream::operator<<();
    v5 = sub_19C2A1B24(v4, (uint64_t)") ", 2);
    v6 = sub_19C2A1B24(v5, (uint64_t)"LOG(", 4);
    v7 = sub_19C2A1B24(v6, (uint64_t)"ERROR", 5);
    v8 = sub_19C2A1B24(v7, (uint64_t)") ", 2);
    ((void (*)(uint64_t *__return_ptr, _QWORD **))(*a1)[11])(&v14, a1);
    v9 = sub_19C2CD6B0(&v14);
    v10 = strlen(v9);
    v11 = sub_19C2A1B24(v8, (uint64_t)v9, v10);
    sub_19C2A1B24(v11, (uint64_t)"\nReturns default value ", 23);
    std::ostream::operator<<();
    sub_19C2CD3C8(&v14);
    sub_19C2A0AD8(&v13);
  }
  return 0;
}

void sub_19C2B025C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
  sub_19C2A0AD8(&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_19C2B0284(_QWORD **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  const char *v13;
  size_t v14;
  _QWORD *v15;
  char v17;
  uint64_t v18;

  ((void (*)(uint64_t *__return_ptr))(*a1)[11])(&v18);
  v6 = v18;
  sub_19C2CD3C8(&v18);
  if (!v6)
    return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*a1[1] + 112))(a1[1], a2, a3);
  if ((int)sub_19C2CB68C() <= 2)
  {
    v17 = 0;
    v7 = sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)"sentencepiece_processor.cc", 26);
    sub_19C2A1B24(v7, (uint64_t)"(", 1);
    v8 = (_QWORD *)std::ostream::operator<<();
    v9 = sub_19C2A1B24(v8, (uint64_t)") ", 2);
    v10 = sub_19C2A1B24(v9, (uint64_t)"LOG(", 4);
    v11 = sub_19C2A1B24(v10, (uint64_t)"ERROR", 5);
    v12 = sub_19C2A1B24(v11, (uint64_t)") ", 2);
    ((void (*)(uint64_t *__return_ptr, _QWORD **))(*a1)[11])(&v18, a1);
    v13 = sub_19C2CD6B0(&v18);
    v14 = strlen(v13);
    v15 = sub_19C2A1B24(v12, (uint64_t)v13, v14);
    sub_19C2A1B24(v15, (uint64_t)"\nReturns default value ", 23);
    std::ostream::operator<<();
    sub_19C2CD3C8(&v18);
    sub_19C2A0AD8(&v17);
  }
  return 0;
}

void sub_19C2B03D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
  sub_19C2A0AD8(&a12);
  _Unwind_Resume(a1);
}

const char *sub_19C2B0400(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  const char *v11;
  size_t v12;
  _QWORD *v13;
  _QWORD *v14;
  char v16;
  uint64_t v17;

  ((void (*)(uint64_t *__return_ptr))(*a1)[11])(&v17);
  v4 = v17;
  sub_19C2CD3C8(&v17);
  if (!v4)
    return (const char *)(*(uint64_t (**)(_QWORD *, uint64_t))(*a1[1] + 120))(a1[1], a2);
  if ((int)sub_19C2CB68C() <= 2)
  {
    v16 = 0;
    v5 = sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)"sentencepiece_processor.cc", 26);
    sub_19C2A1B24(v5, (uint64_t)"(", 1);
    v6 = (_QWORD *)std::ostream::operator<<();
    v7 = sub_19C2A1B24(v6, (uint64_t)") ", 2);
    v8 = sub_19C2A1B24(v7, (uint64_t)"LOG(", 4);
    v9 = sub_19C2A1B24(v8, (uint64_t)"ERROR", 5);
    v10 = sub_19C2A1B24(v9, (uint64_t)") ", 2);
    ((void (*)(uint64_t *__return_ptr, _QWORD **))(*a1)[11])(&v17, a1);
    v11 = sub_19C2CD6B0(&v17);
    v12 = strlen(v11);
    v13 = sub_19C2A1B24(v10, (uint64_t)v11, v12);
    v14 = sub_19C2A1B24(v13, (uint64_t)"\nReturns default value ", 23);
    sub_19C2A1B24(v14, (uint64_t)"", 0);
    sub_19C2CD3C8(&v17);
    sub_19C2A0AD8(&v16);
  }
  return "";
}

void sub_19C2B055C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
  sub_19C2A0AD8(&a12);
  _Unwind_Resume(a1);
}

float sub_19C2B0584(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  float v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  const char *v12;
  size_t v13;
  _QWORD *v14;
  char v16;
  uint64_t v17;

  ((void (*)(uint64_t *__return_ptr))(*a1)[11])(&v17);
  v4 = v17;
  sub_19C2CD3C8(&v17);
  if (!v4)
    return (*(float (**)(_QWORD *, uint64_t))(*a1[1] + 136))(a1[1], a2);
  v5 = 0.0;
  if ((int)sub_19C2CB68C() <= 2)
  {
    v16 = 0;
    v6 = sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)"sentencepiece_processor.cc", 26);
    sub_19C2A1B24(v6, (uint64_t)"(", 1);
    v7 = (_QWORD *)std::ostream::operator<<();
    v8 = sub_19C2A1B24(v7, (uint64_t)") ", 2);
    v9 = sub_19C2A1B24(v8, (uint64_t)"LOG(", 4);
    v10 = sub_19C2A1B24(v9, (uint64_t)"ERROR", 5);
    v11 = sub_19C2A1B24(v10, (uint64_t)") ", 2);
    ((void (*)(uint64_t *__return_ptr, _QWORD **))(*a1)[11])(&v17, a1);
    v12 = sub_19C2CD6B0(&v17);
    v13 = strlen(v12);
    v14 = sub_19C2A1B24(v11, (uint64_t)v12, v13);
    sub_19C2A1B24(v14, (uint64_t)"\nReturns default value ", 23);
    std::ostream::operator<<();
    sub_19C2CD3C8(&v17);
    sub_19C2A0AD8(&v16);
  }
  return v5;
}

void sub_19C2B06E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
  sub_19C2A0AD8(&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_19C2B0708(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  const char *v11;
  size_t v12;
  _QWORD *v13;
  char v15;
  uint64_t v16;

  ((void (*)(uint64_t *__return_ptr))(*a1)[11])(&v16);
  v4 = v16;
  sub_19C2CD3C8(&v16);
  if (!v4)
    return (*(uint64_t (**)(_QWORD *, uint64_t))(*a1[1] + 152))(a1[1], a2);
  if ((int)sub_19C2CB68C() <= 2)
  {
    v15 = 0;
    v5 = sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)"sentencepiece_processor.cc", 26);
    sub_19C2A1B24(v5, (uint64_t)"(", 1);
    v6 = (_QWORD *)std::ostream::operator<<();
    v7 = sub_19C2A1B24(v6, (uint64_t)") ", 2);
    v8 = sub_19C2A1B24(v7, (uint64_t)"LOG(", 4);
    v9 = sub_19C2A1B24(v8, (uint64_t)"ERROR", 5);
    v10 = sub_19C2A1B24(v9, (uint64_t)") ", 2);
    ((void (*)(uint64_t *__return_ptr, _QWORD **))(*a1)[11])(&v16, a1);
    v11 = sub_19C2CD6B0(&v16);
    v12 = strlen(v11);
    v13 = sub_19C2A1B24(v10, (uint64_t)v11, v12);
    sub_19C2A1B24(v13, (uint64_t)"\nReturns default value ", 23);
    std::ostream::operator<<();
    sub_19C2CD3C8(&v16);
    sub_19C2A0AD8(&v15);
  }
  return 0;
}

void sub_19C2B0854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
  sub_19C2A0AD8(&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_19C2B087C(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  const char *v11;
  size_t v12;
  _QWORD *v13;
  char v15;
  uint64_t v16;

  ((void (*)(uint64_t *__return_ptr))(*a1)[11])(&v16);
  v4 = v16;
  sub_19C2CD3C8(&v16);
  if (!v4)
    return (*(uint64_t (**)(_QWORD *, uint64_t))(*a1[1] + 144))(a1[1], a2);
  if ((int)sub_19C2CB68C() <= 2)
  {
    v15 = 0;
    v5 = sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)"sentencepiece_processor.cc", 26);
    sub_19C2A1B24(v5, (uint64_t)"(", 1);
    v6 = (_QWORD *)std::ostream::operator<<();
    v7 = sub_19C2A1B24(v6, (uint64_t)") ", 2);
    v8 = sub_19C2A1B24(v7, (uint64_t)"LOG(", 4);
    v9 = sub_19C2A1B24(v8, (uint64_t)"ERROR", 5);
    v10 = sub_19C2A1B24(v9, (uint64_t)") ", 2);
    ((void (*)(uint64_t *__return_ptr, _QWORD **))(*a1)[11])(&v16, a1);
    v11 = sub_19C2CD6B0(&v16);
    v12 = strlen(v11);
    v13 = sub_19C2A1B24(v10, (uint64_t)v11, v12);
    sub_19C2A1B24(v13, (uint64_t)"\nReturns default value ", 23);
    std::ostream::operator<<();
    sub_19C2CD3C8(&v16);
    sub_19C2A0AD8(&v15);
  }
  return 0;
}

void sub_19C2B09C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
  sub_19C2A0AD8(&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_19C2B09F0(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  const char *v11;
  size_t v12;
  _QWORD *v13;
  char v15;
  uint64_t v16;

  ((void (*)(uint64_t *__return_ptr))(*a1)[11])(&v16);
  v4 = v16;
  sub_19C2CD3C8(&v16);
  if (!v4)
    return (*(uint64_t (**)(_QWORD *, uint64_t))(*a1[1] + 160))(a1[1], a2);
  if ((int)sub_19C2CB68C() <= 2)
  {
    v15 = 0;
    v5 = sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)"sentencepiece_processor.cc", 26);
    sub_19C2A1B24(v5, (uint64_t)"(", 1);
    v6 = (_QWORD *)std::ostream::operator<<();
    v7 = sub_19C2A1B24(v6, (uint64_t)") ", 2);
    v8 = sub_19C2A1B24(v7, (uint64_t)"LOG(", 4);
    v9 = sub_19C2A1B24(v8, (uint64_t)"ERROR", 5);
    v10 = sub_19C2A1B24(v9, (uint64_t)") ", 2);
    ((void (*)(uint64_t *__return_ptr, _QWORD **))(*a1)[11])(&v16, a1);
    v11 = sub_19C2CD6B0(&v16);
    v12 = strlen(v11);
    v13 = sub_19C2A1B24(v10, (uint64_t)v11, v12);
    sub_19C2A1B24(v13, (uint64_t)"\nReturns default value ", 23);
    std::ostream::operator<<();
    sub_19C2CD3C8(&v16);
    sub_19C2A0AD8(&v15);
  }
  return 0;
}

void sub_19C2B0B3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
  sub_19C2A0AD8(&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_19C2B0B64(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  const char *v11;
  size_t v12;
  _QWORD *v13;
  char v15;
  uint64_t v16;

  ((void (*)(uint64_t *__return_ptr))(*a1)[11])(&v16);
  v4 = v16;
  sub_19C2CD3C8(&v16);
  if (!v4)
    return (*(uint64_t (**)(_QWORD *, uint64_t))(*a1[1] + 176))(a1[1], a2);
  if ((int)sub_19C2CB68C() <= 2)
  {
    v15 = 0;
    v5 = sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)"sentencepiece_processor.cc", 26);
    sub_19C2A1B24(v5, (uint64_t)"(", 1);
    v6 = (_QWORD *)std::ostream::operator<<();
    v7 = sub_19C2A1B24(v6, (uint64_t)") ", 2);
    v8 = sub_19C2A1B24(v7, (uint64_t)"LOG(", 4);
    v9 = sub_19C2A1B24(v8, (uint64_t)"ERROR", 5);
    v10 = sub_19C2A1B24(v9, (uint64_t)") ", 2);
    ((void (*)(uint64_t *__return_ptr, _QWORD **))(*a1)[11])(&v16, a1);
    v11 = sub_19C2CD6B0(&v16);
    v12 = strlen(v11);
    v13 = sub_19C2A1B24(v10, (uint64_t)v11, v12);
    sub_19C2A1B24(v13, (uint64_t)"\nReturns default value ", 23);
    std::ostream::operator<<();
    sub_19C2CD3C8(&v16);
    sub_19C2A0AD8(&v15);
  }
  return 0;
}

void sub_19C2B0CB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
  sub_19C2A0AD8(&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_19C2B0CD8(uint64_t *a1)
{
  const char *v2;
  size_t v3;
  uint64_t v4;

  v2 = sub_19C29E838(a1[1]);
  v3 = strlen(v2);
  v4 = (*(uint64_t (**)(uint64_t *, const char *, size_t))(*a1 + 504))(a1, v2, v3);
  if ((*(unsigned int (**)(uint64_t *, uint64_t))(*a1 + 528))(a1, v4))
    return v4;
  else
    return 0xFFFFFFFFLL;
}

uint64_t sub_19C2B0D3C(uint64_t *a1)
{
  const char *v2;
  size_t v3;
  uint64_t v4;

  v2 = sub_19C29E888(a1[1]);
  v3 = strlen(v2);
  v4 = (*(uint64_t (**)(uint64_t *, const char *, size_t))(*a1 + 504))(a1, v2, v3);
  if ((*(unsigned int (**)(uint64_t *, uint64_t))(*a1 + 536))(a1, v4))
    return v4;
  else
    return 0xFFFFFFFFLL;
}

uint64_t sub_19C2B0DA0(uint64_t *a1)
{
  const char *v2;
  size_t v3;
  uint64_t v4;

  v2 = sub_19C29E8D8(a1[1]);
  v3 = strlen(v2);
  v4 = (*(uint64_t (**)(uint64_t *, const char *, size_t))(*a1 + 504))(a1, v2, v3);
  if ((*(unsigned int (**)(uint64_t *, uint64_t))(*a1 + 536))(a1, v4))
    return v4;
  else
    return 0xFFFFFFFFLL;
}

uint64_t sub_19C2B0E04(uint64_t *a1)
{
  const char *v2;
  size_t v3;
  uint64_t v4;

  v2 = sub_19C29E928(a1[1]);
  v3 = strlen(v2);
  v4 = (*(uint64_t (**)(uint64_t *, const char *, size_t))(*a1 + 504))(a1, v2, v3);
  if ((*(unsigned int (**)(uint64_t *, uint64_t))(*a1 + 536))(a1, v4))
    return v4;
  else
    return 0xFFFFFFFFLL;
}

_QWORD *sub_19C2B0E68@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X8>)
{
  _QWORD *result;
  int v11;
  uint64_t *v12;
  uint64_t v13;
  _QWORD *v14;
  unsigned int v15;
  _QWORD v16[11];
  char v17;
  uint64_t v18;

  result = ((_QWORD *(*)(uint64_t *__return_ptr))(*a1)[11])(a5);
  if (!*a5)
  {
    sub_19C2CD3C8(a5);
    if (a4)
    {
      sub_19C2B3ED4(a4);
      v11 = *((char *)a2 + 23);
      if (v11 >= 0)
        v12 = a2;
      else
        v12 = (uint64_t *)*a2;
      if (v11 >= 0)
        v13 = *((unsigned __int8 *)a2 + 23);
      else
        v13 = a2[1];
      return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t *, uint64_t, uint64_t, uint64_t *))(*a1[1] + 200))(a1[1], v12, v13, a3, a4);
    }
    else
    {
      v15 = 13;
      v14 = (_QWORD *)sub_19C2A09EC((uint64_t)v16);
      sub_19C2A1B24(v14, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_19C2A1B24(v16, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_19C2A1B24(v16, (uint64_t)") [", 3);
      sub_19C2A1B24(v16, (uint64_t)"pieces", 6);
      sub_19C2A1B24(v16, (uint64_t)"] ", 2);
      sub_19C2A1B24(v16, (uint64_t)"output container is null", 24);
      sub_19C29E5C0(&v15, (uint64_t)a5);
      v16[0] = *MEMORY[0x1E0DE4F60];
      *(_QWORD *)((char *)v16 + *(_QWORD *)(v16[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
      v16[1] = MEMORY[0x1E0DE4FB8] + 16;
      if (v17 < 0)
        operator delete((void *)v16[9]);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return (_QWORD *)MEMORY[0x1A1AD34CC](&v18);
    }
  }
  return result;
}

void sub_19C2B102C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_19C29E64C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_19C2B1044@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, uint64_t *a5@<X8>)
{
  _QWORD *result;
  int v11;
  uint64_t *v12;
  uint64_t v13;
  _QWORD *v14;
  unsigned int v15;
  _QWORD v16[11];
  char v17;
  uint64_t v18;

  result = ((_QWORD *(*)(uint64_t *__return_ptr))(*a1)[11])(a5);
  if (!*a5)
  {
    sub_19C2CD3C8(a5);
    if (a4)
    {
      a4[1] = *a4;
      v11 = *((char *)a2 + 23);
      if (v11 >= 0)
        v12 = a2;
      else
        v12 = (uint64_t *)*a2;
      if (v11 >= 0)
        v13 = *((unsigned __int8 *)a2 + 23);
      else
        v13 = a2[1];
      return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t *, uint64_t, uint64_t, _QWORD *))(*a1[1] + 208))(a1[1], v12, v13, a3, a4);
    }
    else
    {
      v15 = 13;
      v14 = (_QWORD *)sub_19C2A09EC((uint64_t)v16);
      sub_19C2A1B24(v14, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_19C2A1B24(v16, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_19C2A1B24(v16, (uint64_t)") [", 3);
      sub_19C2A1B24(v16, (uint64_t)"ids", 3);
      sub_19C2A1B24(v16, (uint64_t)"] ", 2);
      sub_19C2A1B24(v16, (uint64_t)"output container is null", 24);
      sub_19C29E5C0(&v15, (uint64_t)a5);
      v16[0] = *MEMORY[0x1E0DE4F60];
      *(_QWORD *)((char *)v16 + *(_QWORD *)(v16[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
      v16[1] = MEMORY[0x1E0DE4FB8] + 16;
      if (v17 < 0)
        operator delete((void *)v16[9]);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return (_QWORD *)MEMORY[0x1A1AD34CC](&v18);
    }
  }
  return result;
}

void sub_19C2B1208(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_19C29E64C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_19C2B1220(uint64_t a1)
{
  sub_19C2A1E6C(a1, *(_QWORD **)(a1 + 8));
  return a1;
}

_QWORD *sub_19C2B1248@<X0>(_QWORD *a1@<X0>, _DWORD *a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *result;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t *v42;
  _DWORD *v43;
  _QWORD v44[11];
  char v45;
  uint64_t v46;
  _DWORD *v47;
  unint64_t v48;

  v47 = a2;
  v48 = a3;
  if (a3 <= 0x13)
  {
    LODWORD(v43) = 13;
    v7 = (_QWORD *)sub_19C2A09EC((uint64_t)v44);
    sub_19C2A1B24(v7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_19C2A1B24(v44, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_19C2A1B24(v44, (uint64_t)") [", 3);
    sub_19C2A1B24(v44, (uint64_t)"(size) >= (sizeof(MMapHeader))", 30);
    sub_19C2A1B24(v44, (uint64_t)"] ", 2);
    sub_19C29E5C0((unsigned int *)&v43, (uint64_t)a4);
    goto LABEL_5;
  }
  if (*a2)
  {
    LODWORD(v43) = 13;
    v6 = (_QWORD *)sub_19C2A09EC((uint64_t)v44);
    sub_19C2A1B24(v6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_19C2A1B24(v44, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_19C2A1B24(v44, (uint64_t)") [", 3);
    sub_19C2A1B24(v44, (uint64_t)"header->sentinel == 0", 21);
    sub_19C2A1B24(v44, (uint64_t)"] ", 2);
    sub_19C2A1B24(v44, (uint64_t)"This file format is not for mmap-based loading.", 47);
    sub_19C29E5C0((unsigned int *)&v43, (uint64_t)a4);
LABEL_5:
    v44[0] = *MEMORY[0x1E0DE4F60];
    *(_QWORD *)((char *)v44 + *(_QWORD *)(v44[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
    v44[1] = MEMORY[0x1E0DE4FB8] + 16;
    if (v45 < 0)
      operator delete((void *)v44[9]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return (_QWORD *)MEMORY[0x1A1AD34CC](&v46);
  }
  result = sub_19C2CBA48(&v47, 0x14uLL, a4);
  if (*a4)
    return result;
  sub_19C2CD3C8(a4);
  v10 = a2[1];
  if (v48 < v10)
  {
    LODWORD(v43) = 13;
    v11 = (_QWORD *)sub_19C2A09EC((uint64_t)v44);
    sub_19C2A1B24(v11, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_19C2A1B24(v44, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_19C2A1B24(v44, (uint64_t)") [", 3);
    sub_19C2A1B24(v44, (uint64_t)"(blob.size()) >= (header->model_proto_size)", 43);
    sub_19C2A1B24(v44, (uint64_t)"] ", 2);
    sub_19C29E5C0((unsigned int *)&v43, (uint64_t)a4);
    goto LABEL_5;
  }
  v12 = (uint64_t)v47;
  v13 = operator new();
  sub_19C2E10BC(v13, v12, v10);
  v14 = a1[4];
  a1[4] = v13;
  if (v14)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    v13 = a1[4];
  }
  sub_19C2CD5D8(&v43, v13 + 88);
  v15 = (uint64_t)v43;
  sub_19C2CD3C8((uint64_t *)&v43);
  if (v15)
  {
    LODWORD(v43) = 13;
    v16 = (_QWORD *)sub_19C2A09EC((uint64_t)v44);
    sub_19C2A1B24(v16, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_19C2A1B24(v44, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_19C2A1B24(v44, (uint64_t)") [", 3);
    sub_19C2A1B24(v44, (uint64_t)"model_proto->status().ok()", 26);
    sub_19C2A1B24(v44, (uint64_t)"] ", 2);
    sub_19C2A1B24(v44, (uint64_t)"Failed to initialize ModelProto.", 32);
    sub_19C29E5C0((unsigned int *)&v43, (uint64_t)a4);
    goto LABEL_5;
  }
  result = sub_19C2CBA48(&v47, a2[1], a4);
  if (*a4)
    return result;
  sub_19C2CD3C8(a4);
  if (v48 >= a2[2])
    v17 = a2[2];
  else
    v17 = v48;
  sub_19C2A7220(v13, (uint64_t)v47, v17, &v43);
  v18 = (uint64_t)v43;
  v43 = 0;
  v19 = a1[1];
  a1[1] = v18;
  if (v19)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
    v20 = (uint64_t)v43;
    v43 = 0;
    if (v20)
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
    v18 = a1[1];
  }
  if (!v18)
  {
    LODWORD(v43) = 13;
    v22 = (_QWORD *)sub_19C2A09EC((uint64_t)v44);
    sub_19C2A1B24(v22, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_19C2A1B24(v44, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_19C2A1B24(v44, (uint64_t)") [", 3);
    sub_19C2A1B24(v44, (uint64_t)"model_", 6);
    sub_19C2A1B24(v44, (uint64_t)"] ", 2);
    sub_19C2A1B24(v44, (uint64_t)"Failed to initialize Model.", 27);
    sub_19C29E5C0((unsigned int *)&v43, (uint64_t)a4);
    return (_QWORD *)sub_19C29E64C((uint64_t)&v43);
  }
  (*(void (**)(_DWORD **__return_ptr))(*(_QWORD *)v18 + 16))(&v43);
  v21 = (uint64_t)v43;
  sub_19C2CD3C8((uint64_t *)&v43);
  if (v21)
    return (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a1[1] + 16))(a1[1]);
  result = sub_19C2CBA48(&v47, a2[2], a4);
  if (!*a4)
  {
    sub_19C2CD3C8(a4);
    v23 = a2[3];
    if ((_DWORD)v23)
    {
      if (v48 >= v23)
      {
        v26 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)a1[4] + 152))(a1[4]);
        v27 = a2[3];
        if (v48 < v27)
          v27 = v48;
        v43 = v47;
        v44[0] = v27;
        sub_19C2B1C34(v26, (uint64_t)&v43, &v42);
        v28 = v42;
        v42 = 0;
        v29 = a1[2];
        a1[2] = v28;
        if (v29)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
          v30 = v42;
          v42 = 0;
          if (v30)
            (*(void (**)(uint64_t *))(*v30 + 8))(v30);
        }
        (*(void (**)(_DWORD **__return_ptr))(*(_QWORD *)a1[2] + 24))(&v43);
        v31 = (uint64_t)v43;
        sub_19C2CD3C8((uint64_t *)&v43);
        if (!v31)
        {
          result = sub_19C2CBA48(&v47, a2[3], a4);
          if (*a4)
            return result;
          sub_19C2CD3C8(a4);
          v33 = a1[2];
          v34 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)a1[1] + 32))(a1[1]);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v33 + 16))(v33, v34);
          if (a2[4])
          {
            v35 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)a1[4] + 160))(a1[4]);
            v36 = a2[4];
            if (v48 < v36)
              v36 = v48;
            v43 = v47;
            v44[0] = v36;
            sub_19C2B1C34(v35, (uint64_t)&v43, &v42);
            v37 = v42;
            v42 = 0;
            v38 = a1[3];
            a1[3] = v37;
            if (v38)
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
              v39 = v42;
              v42 = 0;
              if (v39)
                (*(void (**)(uint64_t *))(*v39 + 8))(v39);
            }
            (*(void (**)(_DWORD **__return_ptr))(*(_QWORD *)a1[3] + 24))(&v43);
            v40 = (uint64_t)v43;
            sub_19C2CD3C8((uint64_t *)&v43);
            if (v40)
            {
              LODWORD(v43) = 13;
              v41 = (_QWORD *)sub_19C2A09EC((uint64_t)v44);
              sub_19C2A1B24(v41, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
              sub_19C2A1B24(v44, (uint64_t)"(", 1);
              std::ostream::operator<<();
              sub_19C2A1B24(v44, (uint64_t)") [", 3);
              sub_19C2A1B24(v44, (uint64_t)"denormalizer_->status().ok()", 28);
              sub_19C2A1B24(v44, (uint64_t)"] ", 2);
              sub_19C2A1B24(v44, (uint64_t)"Failed to initialize Denormalizer.", 34);
              sub_19C29E5C0((unsigned int *)&v43, (uint64_t)a4);
              return (_QWORD *)sub_19C29E64C((uint64_t)&v43);
            }
            result = sub_19C2CBA48(&v47, a2[4], a4);
            if (*a4)
              return result;
            sub_19C2CD3C8(a4);
          }
          return sub_19C2CD3C0(a4);
        }
        LODWORD(v43) = 13;
        v32 = (_QWORD *)sub_19C2A09EC((uint64_t)v44);
        sub_19C2A1B24(v32, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        sub_19C2A1B24(v44, (uint64_t)"(", 1);
        std::ostream::operator<<();
        sub_19C2A1B24(v44, (uint64_t)") [", 3);
        sub_19C2A1B24(v44, (uint64_t)"normalizer_->status().ok()", 26);
        sub_19C2A1B24(v44, (uint64_t)"] ", 2);
        sub_19C2A1B24(v44, (uint64_t)"Failed to initialize Normalizer.", 32);
        sub_19C29E5C0((unsigned int *)&v43, (uint64_t)a4);
      }
      else
      {
        LODWORD(v43) = 13;
        v24 = (_QWORD *)sub_19C2A09EC((uint64_t)v44);
        sub_19C2A1B24(v24, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        sub_19C2A1B24(v44, (uint64_t)"(", 1);
        std::ostream::operator<<();
        sub_19C2A1B24(v44, (uint64_t)") [", 3);
        sub_19C2A1B24(v44, (uint64_t)"(blob.size()) >= (header->normalizer_size)", 42);
        sub_19C2A1B24(v44, (uint64_t)"] ", 2);
        sub_19C29E5C0((unsigned int *)&v43, (uint64_t)a4);
      }
    }
    else
    {
      LODWORD(v43) = 13;
      v25 = (_QWORD *)sub_19C2A09EC((uint64_t)v44);
      sub_19C2A1B24(v25, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_19C2A1B24(v44, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_19C2A1B24(v44, (uint64_t)") [", 3);
      sub_19C2A1B24(v44, (uint64_t)"(header->normalizer_size) > (0)", 31);
      sub_19C2A1B24(v44, (uint64_t)"] ", 2);
      sub_19C29E5C0((unsigned int *)&v43, (uint64_t)a4);
    }
    return (_QWORD *)sub_19C29E64C((uint64_t)&v43);
  }
  return result;
}

void sub_19C2B1BBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C29E64C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_19C2B1C34@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t **a3@<X8>)
{
  uint64_t *v6;
  uint64_t *result;

  v6 = (uint64_t *)operator new();
  result = sub_19C2A5730(v6, a1, *(_DWORD **)a2, *(_QWORD *)(a2 + 8));
  *a3 = v6;
  return result;
}

void sub_19C2B1C8C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD355C](v1, 0x10F1C40C7D4252BLL);
  _Unwind_Resume(a1);
}

uint64_t sub_19C2B1CB0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + 96;
  MEMORY[0x1A1AD31B4](a1 + 96);
  if (*(char *)(a1 + 119) < 0)
  {
    v2 = *(_QWORD *)(a1 + 96);
    v3 = *(_QWORD *)(a1 + 104);
  }
  else
  {
    v3 = *(unsigned __int8 *)(a1 + 119);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 48))(a1, v2, v3);
}

void sub_19C2B1D0C(_QWORD *a1@<X0>, char *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  std::string __p;

  v6 = operator new();
  *(_QWORD *)v6 = &off_1E3D346B0;
  *(_QWORD *)(v6 + 8) = 0;
  *(_DWORD *)(v6 + 24) = -1;
  v7 = a1[11];
  a1[11] = v6;
  if (v7)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    v6 = a1[11];
  }
  v8 = a2;
  sub_19C2B6E78(&__p, &v8);
  sub_19C2B1E0C(v6, (uint64_t)&__p, 0, a3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (!*a3)
  {
    sub_19C2CD3C8(a3);
    (*(void (**)(_QWORD *, _QWORD, _QWORD))(*a1 + 48))(a1, *(_QWORD *)(a1[11] + 8), *(_QWORD *)(a1[11] + 16));
  }
}

void sub_19C2B1DF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19C2B1E0C(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, _QWORD *a4@<X8>)
{
  std::__fs::filesystem::path *v8;
  int v9;
  int v10;
  _QWORD *v11;
  uint64_t v12;
  _BYTE *v13;
  std::__fs::filesystem::path *v14;
  int v15;
  int v16;
  std::string::size_type size;
  std::__fs::filesystem::path *v18;
  std::__fs::filesystem::path *v19;
  off_t st_size;
  void *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  _BYTE *v25;
  std::__fs::filesystem::path __p[3];
  void *v27;
  char v28;
  _BYTE v29[152];
  std::__fs::filesystem::path v30;
  std::__fs::filesystem::path v31;
  stat v32;

  sub_19C2B6BB4(a1);
  if (!a3)
  {
    if (*(char *)(a2 + 23) < 0)
      sub_19C2B5238(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
    else
      __p[0] = *(std::__fs::filesystem::path *)a2;
    if ((__p[0].__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v8 = __p;
    else
      v8 = (std::__fs::filesystem::path *)__p[0].__pn_.__r_.__value_.__r.__words[0];
    v9 = open((const char *)v8, 0, __p[0].__pn_.__r_.__value_.__r.__words[0], __p[0].__pn_.__r_.__value_.__l.__size_, __p[0].__pn_.__r_.__value_.__r.__words[2]);
    v10 = v9;
    *(_DWORD *)(a1 + 24) = v9;
    if (SHIBYTE(__p[0].__pn_.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p[0].__pn_.__r_.__value_.__l.__data_);
      if ((v10 & 0x80000000) == 0)
        goto LABEL_52;
    }
    else if ((v9 & 0x80000000) == 0)
    {
      goto LABEL_52;
    }
    LODWORD(__p[0].__pn_.__r_.__value_.__l.__data_) = 13;
    v11 = (_QWORD *)sub_19C2A09EC((uint64_t)&__p[0].__pn_.__r_.__value_.__l.__size_);
    sub_19C2A1B24(v11, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/mmap.h", 62);
    sub_19C2A1B24(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_19C2A1B24(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)") [", 3);
    sub_19C2A1B24(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"(fd = ::open(filename.string().data(), mode)) >= 0", 50);
    sub_19C2A1B24(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"] ", 2);
    sub_19C2A1B24(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"open failed: ", 13);
    v12 = *(unsigned __int8 *)(a2 + 23);
    if ((v12 & 0x80u) == 0)
      v13 = (_BYTE *)a2;
    else
      v13 = *(_BYTE **)a2;
    if ((v12 & 0x80u) != 0)
      v12 = *(_QWORD *)(a2 + 8);
LABEL_66:
    sub_19C2B6D78(&__p[0].__pn_.__r_.__value_.__l.__size_, v13, &v13[v12], 0x22u, 0x5Cu);
    sub_19C29E5C0((unsigned int *)__p, (uint64_t)a4);
    __p[0].__pn_.__r_.__value_.__l.__size_ = *MEMORY[0x1E0DE4F60];
    *(std::string::size_type *)((char *)&__p[0].__pn_.__r_.__value_.__r.__words[1]
                              + *(_QWORD *)(__p[0].__pn_.__r_.__value_.__l.__size_ - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
    __p[0].__pn_.__r_.__value_.__r.__words[2] = MEMORY[0x1E0DE4FB8] + 16;
    if (v28 < 0)
      operator delete(v27);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x1A1AD34CC](v29);
    return;
  }
  sub_19C2B6BF8((const std::__fs::filesystem::path *)a2, (uint64_t)&v31);
  sub_19C2B6CB8((const std::__fs::filesystem::path *)a2, (uint64_t)&v30);
  std::__fs::filesystem::__status(&v31, 0);
  if (__p[0].__pn_.__r_.__value_.__s.__data_[0] != 2)
    goto LABEL_30;
  if (SHIBYTE(v31.__pn_.__r_.__value_.__r.__words[2]) < 0)
    sub_19C2B5238(__p, v31.__pn_.__r_.__value_.__l.__data_, v31.__pn_.__r_.__value_.__l.__size_);
  else
    __p[0] = v31;
  if ((__p[0].__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v14 = __p;
  else
    v14 = (std::__fs::filesystem::path *)__p[0].__pn_.__r_.__value_.__r.__words[0];
  v15 = open((const char *)v14, 0, __p[0].__pn_.__r_.__value_.__r.__words[0], __p[0].__pn_.__r_.__value_.__l.__size_, __p[0].__pn_.__r_.__value_.__r.__words[2]);
  v16 = v15;
  if (SHIBYTE(__p[0].__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p[0].__pn_.__r_.__value_.__l.__data_);
    if ((v16 & 0x80000000) == 0)
      goto LABEL_27;
LABEL_30:
    LODWORD(__p[0].__pn_.__r_.__value_.__l.__data_) = 13;
    sub_19C2A09EC((uint64_t)&__p[0].__pn_.__r_.__value_.__l.__size_);
    sub_19C2A1B24(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/mmap.h", 62);
    sub_19C2A1B24(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_19C2A1B24(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)") [", 3);
    sub_19C2A1B24(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"std::filesystem::is_directory(dir) && (dirfd = ::open(dir.string().data(), mode)) >= 0", 86);
    sub_19C2A1B24(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"] ", 2);
    sub_19C2A1B24(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"open failed: ", 13);
    size = HIBYTE(v31.__pn_.__r_.__value_.__r.__words[2]);
    if ((v31.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v18 = &v31;
    else
      v18 = (std::__fs::filesystem::path *)v31.__pn_.__r_.__value_.__r.__words[0];
    if ((v31.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = v31.__pn_.__r_.__value_.__l.__size_;
    sub_19C2B6D78(&__p[0].__pn_.__r_.__value_.__l.__size_, v18, (_BYTE *)v18 + size, 0x22u, 0x5Cu);
    sub_19C29E5C0((unsigned int *)__p, (uint64_t)a4);
    __p[0].__pn_.__r_.__value_.__l.__size_ = *MEMORY[0x1E0DE4F60];
    *(std::string::size_type *)((char *)&__p[0].__pn_.__r_.__value_.__r.__words[1]
                              + *(_QWORD *)(__p[0].__pn_.__r_.__value_.__l.__size_ - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
    __p[0].__pn_.__r_.__value_.__r.__words[2] = MEMORY[0x1E0DE4FB8] + 16;
    if (v28 < 0)
      operator delete(v27);
    goto LABEL_37;
  }
  if (v15 < 0)
    goto LABEL_30;
LABEL_27:
  if (SHIBYTE(v30.__pn_.__r_.__value_.__r.__words[2]) < 0)
    sub_19C2B5238(__p, v30.__pn_.__r_.__value_.__l.__data_, v30.__pn_.__r_.__value_.__l.__size_);
  else
    __p[0] = v30;
  if ((__p[0].__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v19 = __p;
  else
    v19 = (std::__fs::filesystem::path *)__p[0].__pn_.__r_.__value_.__r.__words[0];
  *(_DWORD *)(a1 + 24) = openat_authenticated_np(v16, (const char *)v19, 0, -1);
  if (SHIBYTE(__p[0].__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__pn_.__r_.__value_.__l.__data_);
  close(v16);
  if ((*(_DWORD *)(a1 + 24) & 0x80000000) == 0)
  {
    if (SHIBYTE(v30.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v30.__pn_.__r_.__value_.__l.__data_);
    if (SHIBYTE(v31.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v31.__pn_.__r_.__value_.__l.__data_);
LABEL_52:
    if (fstat(*(_DWORD *)(a1 + 24), &v32) < 0)
    {
      LODWORD(__p[0].__pn_.__r_.__value_.__l.__data_) = 13;
      v22 = (_QWORD *)sub_19C2A09EC((uint64_t)&__p[0].__pn_.__r_.__value_.__l.__size_);
      sub_19C2A1B24(v22, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/mmap.h", 62);
      sub_19C2A1B24(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_19C2A1B24(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)") [", 3);
      sub_19C2A1B24(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"::fstat(fd, &st) >= 0", 21);
      sub_19C2A1B24(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"] ", 2);
      sub_19C2A1B24(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"failed to get file size: ", 25);
      v12 = *(unsigned __int8 *)(a2 + 23);
      if ((v12 & 0x80u) == 0)
        v13 = (_BYTE *)a2;
      else
        v13 = *(_BYTE **)a2;
      if ((v12 & 0x80u) != 0)
        v12 = *(_QWORD *)(a2 + 8);
    }
    else
    {
      st_size = v32.st_size;
      *(_QWORD *)(a1 + 16) = v32.st_size;
      v21 = mmap(0, st_size, 1, 1, *(_DWORD *)(a1 + 24), 0);
      if (v21 != (void *)-1)
      {
        *(_QWORD *)(a1 + 8) = v21;
        close(*(_DWORD *)(a1 + 24));
        *(_DWORD *)(a1 + 24) = -1;
        sub_19C2CD3C0(a4);
        return;
      }
      LODWORD(__p[0].__pn_.__r_.__value_.__l.__data_) = 13;
      v23 = (_QWORD *)sub_19C2A09EC((uint64_t)&__p[0].__pn_.__r_.__value_.__l.__size_);
      sub_19C2A1B24(v23, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/mmap.h", 62);
      sub_19C2A1B24(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_19C2A1B24(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)") [", 3);
      sub_19C2A1B24(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"(p = reinterpret_cast<char*>( ::mmap(0, length, PROT_READ, MAP_SHARED, fd, 0))) != MAP_FAILED", 93);
      sub_19C2A1B24(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"] ", 2);
      sub_19C2A1B24(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"mmap() failed: ", 15);
      v12 = *(unsigned __int8 *)(a2 + 23);
      if ((v12 & 0x80u) == 0)
        v13 = (_BYTE *)a2;
      else
        v13 = *(_BYTE **)a2;
      if ((v12 & 0x80u) != 0)
        v12 = *(_QWORD *)(a2 + 8);
    }
    goto LABEL_66;
  }
  LODWORD(__p[0].__pn_.__r_.__value_.__l.__data_) = 13;
  sub_19C2A09EC((uint64_t)&__p[0].__pn_.__r_.__value_.__l.__size_);
  sub_19C2A1B24(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/mmap.h", 62);
  sub_19C2A1B24(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"(", 1);
  std::ostream::operator<<();
  sub_19C2A1B24(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)") [", 3);
  sub_19C2A1B24(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"fd >= 0", 7);
  sub_19C2A1B24(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"] ", 2);
  sub_19C2A1B24(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"open failed: ", 13);
  v24 = *(unsigned __int8 *)(a2 + 23);
  if ((v24 & 0x80u) == 0)
    v25 = (_BYTE *)a2;
  else
    v25 = *(_BYTE **)a2;
  if ((v24 & 0x80u) != 0)
    v24 = *(_QWORD *)(a2 + 8);
  sub_19C2B6D78(&__p[0].__pn_.__r_.__value_.__l.__size_, v25, &v25[v24], 0x22u, 0x5Cu);
  sub_19C29E5C0((unsigned int *)__p, (uint64_t)a4);
  __p[0].__pn_.__r_.__value_.__l.__size_ = *MEMORY[0x1E0DE4F60];
  *(std::string::size_type *)((char *)&__p[0].__pn_.__r_.__value_.__r.__words[1]
                            + *(_QWORD *)(__p[0].__pn_.__r_.__value_.__l.__size_ - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  __p[0].__pn_.__r_.__value_.__r.__words[2] = MEMORY[0x1E0DE4FB8] + 16;
  if (v28 < 0)
    operator delete(v27);
LABEL_37:
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1A1AD34CC](v29);
  if (SHIBYTE(v30.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__pn_.__r_.__value_.__l.__data_);
  if (SHIBYTE(v31.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__pn_.__r_.__value_.__l.__data_);
}

void sub_19C2B25A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  if (*(char *)(v14 - 217) < 0)
    operator delete(*(void **)(v14 - 240));
  if (*(char *)(v14 - 193) < 0)
    operator delete(*(void **)(v14 - 216));
  _Unwind_Resume(exception_object);
}

void sub_19C2B265C(_QWORD *a1@<X0>, char *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  std::string __p;

  v6 = operator new();
  *(_QWORD *)v6 = &off_1E3D346B0;
  *(_QWORD *)(v6 + 8) = 0;
  *(_DWORD *)(v6 + 24) = -1;
  v7 = a1[11];
  a1[11] = v6;
  if (v7)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    v6 = a1[11];
  }
  v8 = a2;
  sub_19C2B6E78(&__p, &v8);
  sub_19C2B1E0C(v6, (uint64_t)&__p, 1, a3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (!*a3)
  {
    sub_19C2CD3C8(a3);
    (*(void (**)(_QWORD *, _QWORD, _QWORD))(*a1 + 48))(a1, *(_QWORD *)(a1[11] + 8), *(_QWORD *)(a1[11] + 16));
  }
}

void sub_19C2B2740(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_19C2B275C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 136))(&v3);
  return sub_19C2CD3C8(&v3);
}

void sub_19C2B27A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C2B3E94((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_19C2B27BC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 144))(&v3);
  return sub_19C2CD3C8(&v3);
}

void sub_19C2B2804(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_19C2B2820@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 176))(&v3);
  return sub_19C2CD3C8(&v3);
}

void sub_19C2B2868(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C2B4254((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_19C2B2880@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 184))(&v3);
  return sub_19C2CD3C8(&v3);
}

void sub_19C2B28C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C2B42C4((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_19C2B28E0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 192))(&v3);
  return sub_19C2CD3C8(&v3);
}

void sub_19C2B2928(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C2B3E94((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_19C2B2940@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 200))(&v3);
  return sub_19C2CD3C8(&v3);
}

void sub_19C2B2988(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_19C2B29A4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 208))(&v3);
  return sub_19C2CD3C8(&v3);
}

void sub_19C2B29EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C2B4358((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_19C2B2A04@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 216))(&v3);
  return sub_19C2CD3C8(&v3);
}

void sub_19C2B2A4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C2A19C0((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_19C2B2A64@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 152))(&v3);
  return sub_19C2CD3C8(&v3);
}

void sub_19C2B2AAC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_19C2B2AC8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 160))(&v3);
  return sub_19C2CD3C8(&v3);
}

void sub_19C2B2B10(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_19C2B2B2C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 168))(&v3);
  return sub_19C2CD3C8(&v3);
}

void sub_19C2B2B74(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

float sub_19C2B2B90(uint64_t a1)
{
  float v1;
  uint64_t v3;
  float v4;

  v4 = 0.0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 224))(&v3);
  v1 = v4;
  sub_19C2CD3C8(&v3);
  return v1;
}

void sub_19C2B2BD8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  uint64_t (**v13)();
  void *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;

  v13 = &off_1E3D344C0;
  v15 = 0;
  v16 = 0;
  v14 = sub_19C2BFE10();
  v8 = sub_19C2A74D8((uint64_t)&v13);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 232))(&v12, a1, a2, a3, v8);
  sub_19C2DAB24((uint64_t)v14, a4);
  sub_19C2CD3C8(&v12);
  v13 = &off_1E3D344C0;
  v9 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_19C2B2CAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_19C2CD3C8((uint64_t *)va);
  sub_19C2B43C8(v2 + 16);
  _Unwind_Resume(a1);
}

void sub_19C2B2CD4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, float a6@<S0>)
{
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  uint64_t (**v17)();
  void *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;

  v17 = &off_1E3D344C0;
  v19 = 0;
  v20 = 0;
  v18 = sub_19C2BFE10();
  v12 = sub_19C2A74D8((uint64_t)&v17);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float))(*(_QWORD *)a1 + 248))(&v16, a1, a2, a3, a4, v12, a6);
  sub_19C2DAB24((uint64_t)v18, a5);
  sub_19C2CD3C8(&v16);
  v17 = &off_1E3D344C0;
  v13 = v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_19C2B2DC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_19C2CD3C8((uint64_t *)va);
  sub_19C2B43C8(v2 + 16);
  _Unwind_Resume(a1);
}

void sub_19C2B2DF0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  _QWORD v15[2];
  std::__shared_weak_count *v16;

  v15[1] = 0;
  v16 = 0;
  v15[0] = &off_1E3D34520;
  v10 = sub_19C2A7634((uint64_t)v15);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 240))(&v14, a1, a2, a3, a4, v10);
  sub_19C2A76B4((uint64_t)v15, a5);
  sub_19C2CD3C8(&v14);
  v15[0] = &off_1E3D34520;
  v11 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_19C2B2ECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_19C2CD3C8(&a9);
  sub_19C2B43C8(v9 + 8);
  _Unwind_Resume(a1);
}

void sub_19C2B2EF4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>, float a8@<S0>)
{
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];
  std::__shared_weak_count *v22;

  v21[1] = 0;
  v22 = 0;
  v21[0] = &off_1E3D34520;
  v16 = sub_19C2A7634((uint64_t)v21);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float))(*(_QWORD *)a1 + 256))(&v20, a1, a2, a3, a4, a5, a6, v16, a8);
  sub_19C2A76B4((uint64_t)v21, a7);
  sub_19C2CD3C8(&v20);
  v21[0] = &off_1E3D34520;
  v17 = v22;
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

void sub_19C2B2FF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_19C2CD3C8(&a9);
  sub_19C2B43C8(v9 + 8);
  _Unwind_Resume(a1);
}

void sub_19C2B3020(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  uint64_t (**v11)();
  void *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;

  v11 = &off_1E3D344C0;
  v13 = 0;
  v14 = 0;
  v12 = sub_19C2BFE10();
  v6 = sub_19C2A74D8((uint64_t)&v11);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 264))(&v10, a1, a2, v6);
  sub_19C2DAB24((uint64_t)v12, a3);
  sub_19C2CD3C8(&v10);
  v11 = &off_1E3D344C0;
  v7 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_19C2B30EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_19C2CD3C8((uint64_t *)va);
  sub_19C2B43C8(v2 + 16);
  _Unwind_Resume(a1);
}

void sub_19C2B3114(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  uint64_t (**v11)();
  void *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;

  v11 = &off_1E3D344C0;
  v13 = 0;
  v14 = 0;
  v12 = sub_19C2BFE10();
  v6 = sub_19C2A74D8((uint64_t)&v11);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 272))(&v10, a1, a2, v6);
  sub_19C2DAB24((uint64_t)v12, a3);
  sub_19C2CD3C8(&v10);
  v11 = &off_1E3D344C0;
  v7 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_19C2B31E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_19C2CD3C8((uint64_t *)va);
  sub_19C2B43C8(v2 + 16);
  _Unwind_Resume(a1);
}

void sub_19C2B3208(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  uint64_t (**v11)();
  void *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;

  v11 = &off_1E3D344C0;
  v13 = 0;
  v14 = 0;
  v12 = sub_19C2BFE10();
  v6 = sub_19C2A74D8((uint64_t)&v11);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 280))(&v10, a1, a2, v6);
  sub_19C2DAB24((uint64_t)v12, a3);
  sub_19C2CD3C8(&v10);
  v11 = &off_1E3D344C0;
  v7 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_19C2B32D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_19C2CD3C8((uint64_t *)va);
  sub_19C2B43C8(v2 + 16);
  _Unwind_Resume(a1);
}

uint64_t *sub_19C2B32FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v10;

  *a4 = &off_1E3D344C0;
  a4[1] = sub_19C2BFE10();
  a4[2] = 0;
  a4[3] = 0;
  v8 = sub_19C2A74D8((uint64_t)a4);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 232))(&v10, a1, a2, a3, v8);
  return sub_19C2CD3C8(&v10);
}

void sub_19C2B338C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  *v1 = v3;
  sub_19C2B43C8(v2);
  _Unwind_Resume(a1);
}

uint64_t *sub_19C2B33A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>, float a6@<S0>)
{
  uint64_t v12;
  uint64_t v14;

  *a5 = &off_1E3D344C0;
  a5[1] = sub_19C2BFE10();
  a5[2] = 0;
  a5[3] = 0;
  v12 = sub_19C2A74D8((uint64_t)a5);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float))(*(_QWORD *)a1 + 248))(&v14, a1, a2, a3, a4, v12, a6);
  return sub_19C2CD3C8(&v14);
}

void sub_19C2B3454(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  *v1 = v3;
  sub_19C2B43C8(v2);
  _Unwind_Resume(a1);
}

uint64_t *sub_19C2B346C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v9;
  uint64_t v11;

  *a5 = &off_1E3D34520;
  a5[1] = 0;
  a5[2] = 0;
  v9 = sub_19C2A7634((uint64_t)a5);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 240))(&v11, a1, a2, a3, a4, v9);
  return sub_19C2CD3C8(&v11);
}

void sub_19C2B3504(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  *v2 = v3;
  sub_19C2B43C8(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_19C2B351C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>, float a8@<S0>)
{
  uint64_t v15;
  uint64_t v17;

  *a7 = &off_1E3D34520;
  a7[1] = 0;
  a7[2] = 0;
  v15 = sub_19C2A7634((uint64_t)a7);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float))(*(_QWORD *)a1 + 256))(&v17, a1, a2, a3, a4, a5, a6, v15, a8);
  return sub_19C2CD3C8(&v17);
}

void sub_19C2B35DC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  *v1 = v3;
  sub_19C2B43C8(v2);
  _Unwind_Resume(a1);
}

uint64_t *sub_19C2B35F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v8;

  *a3 = &off_1E3D344C0;
  a3[1] = sub_19C2BFE10();
  a3[2] = 0;
  a3[3] = 0;
  v6 = sub_19C2A74D8((uint64_t)a3);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 264))(&v8, a1, a2, v6);
  return sub_19C2CD3C8(&v8);
}

void sub_19C2B367C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  *v1 = v3;
  sub_19C2B43C8(v2);
  _Unwind_Resume(a1);
}

uint64_t *sub_19C2B3694@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v8;

  *a3 = &off_1E3D344C0;
  a3[1] = sub_19C2BFE10();
  a3[2] = 0;
  a3[3] = 0;
  v6 = sub_19C2A74D8((uint64_t)a3);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 272))(&v8, a1, a2, v6);
  return sub_19C2CD3C8(&v8);
}

void sub_19C2B371C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  *v1 = v3;
  sub_19C2B43C8(v2);
  _Unwind_Resume(a1);
}

uint64_t *sub_19C2B3734@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v8;

  *a3 = &off_1E3D344C0;
  a3[1] = sub_19C2BFE10();
  a3[2] = 0;
  a3[3] = 0;
  v6 = sub_19C2A74D8((uint64_t)a3);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 280))(&v8, a1, a2, v6);
  return sub_19C2CD3C8(&v8);
}

void sub_19C2B37BC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  *v1 = v3;
  sub_19C2B43C8(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_19C2B37D4(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    sub_19C2CF5C8((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1705);
    v4 = sub_19C2CF5E0(v8, "CHECK failed: (index) >= (0): ");
    sub_19C2CF710((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_19C2CF718((uint64_t)v8);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    sub_19C2CF5C8((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1706);
    v5 = sub_19C2CF5E0(v8, "CHECK failed: (index) < (current_size_): ");
    sub_19C2CF710((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_19C2CF718((uint64_t)v8);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
}

void sub_19C2B3890(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_19C2B38B0(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 62)
    sub_19C2A18E8();
  result = (char *)sub_19C2A27D8((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

uint64_t sub_19C2B38F0(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    sub_19C2CF5C8((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1705);
    v4 = sub_19C2CF5E0(v8, "CHECK failed: (index) >= (0): ");
    sub_19C2CF710((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_19C2CF718((uint64_t)v8);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    sub_19C2CF5C8((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1706);
    v5 = sub_19C2CF5E0(v8, "CHECK failed: (index) < (current_size_): ");
    sub_19C2CF710((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_19C2CF718((uint64_t)v8);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
}

void sub_19C2B39AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19C2B39CC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x1E0DE4F60];
  v3 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)a1 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 8) = MEMORY[0x1E0DE4FB8] + 16;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1A1AD34CC](a1 + 112);
  return a1;
}

uint64_t sub_19C2B3A50(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    sub_19C2CF5C8((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1727);
    v4 = sub_19C2CF5E0(v8, "CHECK failed: (index) >= (0): ");
    sub_19C2CF710((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_19C2CF718((uint64_t)v8);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    sub_19C2CF5C8((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1728);
    v5 = sub_19C2CF5E0(v8, "CHECK failed: (index) < (current_size_): ");
    sub_19C2CF710((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_19C2CF718((uint64_t)v8);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
}

void sub_19C2B3B0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

char **sub_19C2B3B2C(char **a1, uint64_t a2, unint64_t a3, unsigned __int8 *a4, uint64_t a5, int a6)
{
  unsigned __int8 **v9;
  unsigned __int8 *v10;
  int v11;
  unsigned __int8 *v14;
  _QWORD *v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  uint64_t v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  _BOOL4 v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  BOOL v34;
  unint64_t v35;
  unsigned __int8 *v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;

  v9 = 0;
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v10 = 0;
  if (a5)
  {
    v11 = a6;
    if (a3)
    {
      v9 = 0;
      v10 = 0;
      v14 = (unsigned __int8 *)(a2 + a3);
      v15 = a1 + 2;
      while (2)
      {
        v16 = &v10[a2];
        v17 = &v10[a2];
LABEL_5:
        v18 = a5;
        v19 = a4;
        while (*v17 != *v19)
        {
          ++v19;
          if (!--v18)
          {
            if (++v17 != v14)
              goto LABEL_5;
            goto LABEL_37;
          }
        }
        if (v17 != v14)
        {
          v20 = &v17[-a2];
          if (&v17[-a2] != (unsigned __int8 *)-1)
          {
            v21 = (unsigned __int8 *)(v20 - v10);
            v22 = v20 >= v10;
            if (!v11)
              v22 = v20 > v10;
            if (v22)
            {
              v23 = (unsigned __int8 *)(a3 - (_QWORD)v10);
              if (v23 >= v21)
                v24 = v21;
              else
                v24 = v23;
              if ((unint64_t)v9 >= *v15)
              {
                v25 = ((char *)v9 - *a1) >> 4;
                if ((unint64_t)(v25 + 1) >> 60)
                  sub_19C2A18E8();
                v26 = *v15 - (_QWORD)*a1;
                v27 = v26 >> 3;
                if (v26 >> 3 <= (unint64_t)(v25 + 1))
                  v27 = v25 + 1;
                if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF0)
                  v28 = 0xFFFFFFFFFFFFFFFLL;
                else
                  v28 = v27;
                if (v28)
                  v29 = (char *)sub_19C2A26A4((uint64_t)v15, v28);
                else
                  v29 = 0;
                v30 = &v29[16 * v25];
                *(_QWORD *)v30 = v16;
                *((_QWORD *)v30 + 1) = v24;
                v32 = *a1;
                v31 = a1[1];
                v33 = v30;
                if (v31 != *a1)
                {
                  do
                  {
                    *((_OWORD *)v33 - 1) = *((_OWORD *)v31 - 1);
                    v33 -= 16;
                    v31 -= 16;
                  }
                  while (v31 != v32);
                  v31 = *a1;
                }
                v9 = (unsigned __int8 **)(v30 + 16);
                *a1 = v33;
                a1[1] = v30 + 16;
                a1[2] = &v29[16 * v28];
                if (v31)
                  operator delete(v31);
                v11 = a6;
                v15 = a1 + 2;
              }
              else
              {
                *v9 = v16;
                v9[1] = v24;
                v9 += 2;
              }
              a1[1] = (char *)v9;
            }
            v10 = v20 + 1;
            if (a3 > (unint64_t)(v20 + 1))
              continue;
          }
        }
        break;
      }
    }
  }
LABEL_37:
  v34 = a3 > (unint64_t)v10;
  v35 = a3 - (_QWORD)v10;
  if (v34)
  {
    v36 = &v10[a2];
    v37 = (unint64_t)a1[2];
    if ((unint64_t)v9 >= v37)
    {
      v39 = ((char *)v9 - *a1) >> 4;
      if ((unint64_t)(v39 + 1) >> 60)
        sub_19C2A18E8();
      v40 = v37 - (_QWORD)*a1;
      v41 = v40 >> 3;
      if (v40 >> 3 <= (unint64_t)(v39 + 1))
        v41 = v39 + 1;
      if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF0)
        v42 = 0xFFFFFFFFFFFFFFFLL;
      else
        v42 = v41;
      if (v42)
        v43 = (char *)sub_19C2A26A4((uint64_t)(a1 + 2), v42);
      else
        v43 = 0;
      v44 = &v43[16 * v39];
      v45 = &v43[16 * v42];
      *(_QWORD *)v44 = v36;
      *((_QWORD *)v44 + 1) = v35;
      v38 = v44 + 16;
      v47 = *a1;
      v46 = a1[1];
      if (v46 != *a1)
      {
        do
        {
          *((_OWORD *)v44 - 1) = *((_OWORD *)v46 - 1);
          v44 -= 16;
          v46 -= 16;
        }
        while (v46 != v47);
        v46 = *a1;
      }
      *a1 = v44;
      a1[1] = v38;
      a1[2] = v45;
      if (v46)
        operator delete(v46);
    }
    else
    {
      *v9 = v36;
      v9[1] = (unsigned __int8 *)v35;
      v38 = (char *)(v9 + 2);
    }
    a1[1] = v38;
  }
  return a1;
}

void sub_19C2B3DD0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_19C2B3DF4(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_19C2A1898(a1, a2);
    v4 = (char *)a1[1];
    v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_19C2B3E80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_19C2B3E94(&a9);
  _Unwind_Resume(a1);
}

void sub_19C2B3E94(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_19C2B3ED4((uint64_t *)v2);
    operator delete(**a1);
  }
}

void sub_19C2B3ED4(uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0)
      operator delete(*(void **)(i - 24));
  }
  a1[1] = v2;
}

_QWORD *sub_19C2B3F20(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_19C2A5308(a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 16 * a2);
    a1[1] = &v4[16 * a2];
  }
  return a1;
}

void sub_19C2B3F78(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_19C2B3F94(void *__src@<X0>, size_t __len@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::string *p_dst;
  std::string::size_type size;
  char *v10;
  int64_t v11;
  const std::string::value_type *v12;
  std::string::size_type v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::string __dst;
  std::string *v18;
  std::string::size_type v19;

  sub_19C2A6CA0(&__dst, __src, __len);
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  v6 = *a3;
  v7 = a3[1];
  while (v6 != v7)
  {
    if (*(char *)(a4 + 23) < 0)
    {
      **(_BYTE **)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
    }
    else
    {
      *(_BYTE *)a4 = 0;
      *(_BYTE *)(a4 + 23) = 0;
    }
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_dst = &__dst;
    else
      p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    else
      size = __dst.__r_.__value_.__l.__size_;
    v10 = *(char **)v6;
    v11 = *(_QWORD *)(v6 + 8);
    v12 = *(const std::string::value_type **)(v6 + 16);
    v13 = *(_QWORD *)(v6 + 24);
    v18 = p_dst;
    v19 = size;
    if (v11)
    {
      v14 = sub_19C2B4128((uint64_t *)&v18, v10, v11, 0);
      if (v14 == -1)
      {
        v16 = 0;
      }
      else
      {
        v15 = v14;
        v16 = 0;
        do
        {
          std::string::append((std::string *)a4, (const std::string::value_type *)v18 + v16, v15 - v16);
          std::string::append((std::string *)a4, v12, v13);
          v16 = v15 + v11;
          v15 = sub_19C2B4128((uint64_t *)&v18, v10, v11, v15 + v11);
        }
        while (v15 != -1);
      }
      p_dst = (std::string *)((char *)v18 + v16);
      size = v19 - v16;
    }
    std::string::append((std::string *)a4, (const std::string::value_type *)p_dst, size);
    std::string::operator=(&__dst, (const std::string *)a4);
    v6 += 32;
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
}

void sub_19C2B40F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (*(char *)(v15 + 23) < 0)
    operator delete(*(void **)v15);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C2B4128(uint64_t *a1, char *a2, int64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v6;
  void *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  int v13;
  uint64_t v14;
  char *v15;

  v4 = a1[1];
  if (v4 < a4)
    return -1;
  if (a3)
  {
    v6 = *a1;
    v7 = (void *)(*a1 + a4);
    v8 = (char *)(v6 + v4);
    v9 = v6 + v4 - (_QWORD)v7;
    if (v9 >= a3)
    {
      v13 = *a2;
      do
      {
        v14 = v9 - a3;
        if (v14 == -1)
          break;
        v15 = (char *)memchr(v7, v13, v14 + 1);
        if (!v15)
          break;
        v10 = v15;
        if (!memcmp(v15, a2, a3))
          goto LABEL_6;
        v7 = v10 + 1;
        v9 = v8 - (v10 + 1);
      }
      while (v9 >= a3);
    }
    v10 = v8;
LABEL_6:
    if (v10 == v8)
      return -1;
    else
      return (uint64_t)&v10[-v6];
  }
  return a4;
}

void sub_19C2B41E0(const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_19C2B4230(exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E3D2F2C0, MEMORY[0x1E0DE42E0]);
}

void sub_19C2B421C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_19C2B4230(std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
  return result;
}

void sub_19C2B4254(void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        sub_19C2B3E94(&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_19C2B42C4(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_19C2B4304((uint64_t *)v2);
    operator delete(**a1);
  }
}

void sub_19C2B4304(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  v3 = *a1;
  v2 = a1[1];
  if (v2 != *a1)
  {
    v4 = a1[1];
    do
    {
      v6 = *(void **)(v4 - 24);
      v4 -= 24;
      v5 = v6;
      if (v6)
      {
        *(_QWORD *)(v2 - 16) = v5;
        operator delete(v5);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

void sub_19C2B4358(void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 4;
        v6 = v4;
        sub_19C2B3E94(&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_19C2B43C8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

uint64_t sub_19C2B4420(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    sub_19C2CF5C8((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1727);
    v4 = sub_19C2CF5E0(v8, "CHECK failed: (index) >= (0): ");
    sub_19C2CF710((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_19C2CF718((uint64_t)v8);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    sub_19C2CF5C8((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1728);
    v5 = sub_19C2CF5E0(v8, "CHECK failed: (index) < (current_size_): ");
    sub_19C2CF710((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_19C2CF718((uint64_t)v8);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
}

void sub_19C2B44DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_19C2B44FC@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x70uLL);
  result = sub_19C2B4544(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_19C2B4530(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_19C2B4544(_QWORD *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1E3D39630;
  sub_19C2BFCC8(a1 + 3, 0);
  return a1;
}

void sub_19C2B457C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_19C2B4590(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D39630;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_19C2B45A0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D39630;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C2B45D0(uint64_t a1)
{
  return sub_19C2BFDE8(a1 + 24);
}

_QWORD *sub_19C2B45DC@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x48uLL);
  result = sub_19C2B4624(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_19C2B4610(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_19C2B4624(_QWORD *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1E3D39668;
  sub_19C2C07B0(a1 + 3, 0);
  return a1;
}

void sub_19C2B465C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_19C2B4670(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D39668;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_19C2B4680(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D39668;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C2B46B0(uint64_t a1)
{
  return sub_19C2C0868(a1 + 24);
}

uint64_t sub_19C2B46BC(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_19C2C8108();
    JUMPOUT(0x1A1AD355CLL);
  }
  return result;
}

void sub_19C2B46F8(void *__src@<X0>, size_t __len@<X1>, void **a3@<X2>, char *a4@<X3>, void **a5@<X4>, std::string *a6@<X8>)
{
  int v10;
  void *v11;
  size_t v12;
  std::string *p_p;
  std::string::size_type size;
  std::string *v15;
  std::string __p;
  std::string __dst;

  sub_19C2A6CA0(&__dst, __src, __len);
  v10 = *((char *)a3 + 23);
  if (v10 >= 0)
    v11 = a3;
  else
    v11 = *a3;
  if (v10 >= 0)
    v12 = *((unsigned __int8 *)a3 + 23);
  else
    v12 = (size_t)a3[1];
  sub_19C2B47F8(v11, v12, a4, a5, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v15 = std::string::append(&__dst, (const std::string::value_type *)p_p, size);
  *a6 = *v15;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
}

void sub_19C2B47C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void sub_19C2B47F8(void *__src@<X0>, size_t __len@<X1>, char *a3@<X2>, void **a4@<X3>, std::string *a5@<X8>)
{
  size_t v8;
  std::string *p_p;
  std::string::size_type size;
  std::string *v11;
  std::string __p;
  std::string __dst;

  sub_19C2A6CA0(&__dst, __src, __len);
  v8 = strlen(a3);
  sub_19C2B48E8(a3, v8, a4, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v11 = std::string::append(&__dst, (const std::string::value_type *)p_p, size);
  *a5 = *v11;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
}

void sub_19C2B48B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void sub_19C2B48E8(void *__src@<X0>, size_t __len@<X1>, void **a3@<X2>, std::string *a4@<X8>)
{
  int v6;
  void *v7;
  size_t v8;
  void **v9;
  std::string::size_type v10;
  std::string *v11;
  void *__p[2];
  unsigned __int8 v13;
  std::string __dst;

  sub_19C2A6CA0(&__dst, __src, __len);
  v6 = *((char *)a3 + 23);
  if (v6 >= 0)
    v7 = a3;
  else
    v7 = *a3;
  if (v6 >= 0)
    v8 = *((unsigned __int8 *)a3 + 23);
  else
    v8 = (size_t)a3[1];
  sub_19C2A6CA0(__p, v7, v8);
  if ((v13 & 0x80u) == 0)
    v9 = __p;
  else
    v9 = (void **)__p[0];
  if ((v13 & 0x80u) == 0)
    v10 = v13;
  else
    v10 = (std::string::size_type)__p[1];
  v11 = std::string::append(&__dst, (const std::string::value_type *)v9, v10);
  *a4 = *v11;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if ((char)v13 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
}

void sub_19C2B499C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C2B49D0(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_19C2B4A44((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_19C2B4A44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 != a5)
  {
    v9 = a7;
    do
    {
      v10 = *(_OWORD *)(a3 - 24);
      *(_QWORD *)(v9 - 8) = *(_QWORD *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v10;
      v9 -= 24;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 8) = 0;
      *(_QWORD *)(a3 - 24) = 0;
      v7 -= 24;
      a3 -= 24;
    }
    while (a3 != a5);
    *((_QWORD *)&v15 + 1) = v9;
  }
  v13 = 1;
  sub_19C2B4AE0((uint64_t)v12);
  return a6;
}

uint64_t sub_19C2B4AE0(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_19C2B4B14(a1);
  return a1;
}

void sub_19C2B4B14(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    v1 += 24;
  }
}

uint64_t sub_19C2B4B58(uint64_t a1)
{
  sub_19C2B4B8C(a1, *(void ***)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_19C2B4B8C(uint64_t a1, void **a2)
{
  void **v2;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      v5 = v2 - 3;
      *(_QWORD *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        v5 = *(void ***)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != a2);
  }
}

uint64_t sub_19C2B4BE0(uint64_t a1, _OWORD *a2, _OWORD *a3)
{
  _QWORD *v4;
  _OWORD *v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      sub_19C2B4C60((uint64_t **)a1, v4, (uint64_t)v6, v6);
      ++v6;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_19C2B4C48(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_19C2A1E6C(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_19C2B4C60(uint64_t **a1, _QWORD *a2, uint64_t a3, _OWORD *a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t v11;

  v6 = sub_19C2B4CE4(a1, a2, &v11, &v10, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (uint64_t *)operator new(0x30uLL);
    *((_OWORD *)v7 + 2) = *a4;
    sub_19C2A2274(a1, v11, v8, v7);
  }
  return v7;
}

uint64_t *sub_19C2B4CE4(_QWORD *a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5)
{
  _QWORD *v9;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  BOOL v17;
  _QWORD *v18;

  v9 = a1 + 1;
  if (a1 + 1 == a2 || sub_19C2A22C8((uint64_t)(a1 + 2), a5, (uint64_t)(a2 + 4)))
  {
    if ((_QWORD *)*a1 == a2)
    {
      v12 = a2;
LABEL_16:
      if (*a2)
      {
        *a3 = v12;
        return v12 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    v11 = (_QWORD *)*a2;
    if (*a2)
    {
      do
      {
        v12 = v11;
        v11 = (_QWORD *)v11[1];
      }
      while (v11);
    }
    else
    {
      v16 = a2;
      do
      {
        v12 = (_QWORD *)v16[2];
        v17 = *v12 == (_QWORD)v16;
        v16 = v12;
      }
      while (v17);
    }
    if (sub_19C2A22C8((uint64_t)(a1 + 2), (uint64_t)(v12 + 4), a5))
      goto LABEL_16;
    return sub_19C2A21D8((uint64_t)a1, a3, a5);
  }
  if (sub_19C2A22C8((uint64_t)(a1 + 2), (uint64_t)(a2 + 4), a5))
  {
    a4 = a2 + 1;
    v13 = a2[1];
    if (v13)
    {
      v14 = (_QWORD *)a2[1];
      do
      {
        v15 = v14;
        v14 = (_QWORD *)*v14;
      }
      while (v14);
    }
    else
    {
      v18 = a2;
      do
      {
        v15 = (_QWORD *)v18[2];
        v17 = *v15 == (_QWORD)v18;
        v18 = v15;
      }
      while (!v17);
    }
    if (v15 != v9)
    {
      if (!sub_19C2A22C8((uint64_t)(a1 + 2), a5, (uint64_t)(v15 + 4)))
        return sub_19C2A21D8((uint64_t)a1, a3, a5);
      v13 = *a4;
    }
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = a2;
    }
    return a4;
  }
  *a3 = a2;
  *a4 = (uint64_t)a2;
  return a4;
}

_QWORD *sub_19C2B4E7C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  _QWORD *v6;
  int v7;
  _QWORD *v8;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 8);
  if (!v3)
    return v2;
  v5 = a1 + 16;
  v6 = (_QWORD *)(a1 + 8);
  do
  {
    v7 = sub_19C2A22C8(v5, (uint64_t)(v3 + 4), a2);
    v8 = v3 + 1;
    if (!v7)
    {
      v8 = v3;
      v6 = v3;
    }
    v3 = (_QWORD *)*v8;
  }
  while (*v8);
  if (v6 == v2 || sub_19C2A22C8(v5, a2, (uint64_t)(v6 + 4)))
    return v2;
  return v6;
}

uint64_t sub_19C2B4F08(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  std::ios_base *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = MEMORY[0x1E0DE4FD0];
  v3 = MEMORY[0x1E0DE4FD0] + 104;
  *(_QWORD *)(a1 + 128) = MEMORY[0x1E0DE4FD0] + 104;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  v4 = a1 + 16;
  v5 = (_QWORD *)MEMORY[0x1E0DE4F50];
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 16);
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 24);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + *(_QWORD *)(v6 - 24)) = v7;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  v9 = v5[4];
  v10 = v5[5];
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(v4 + *(_QWORD *)(v9 - 24)) = v10;
  v11 = v5[1];
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + *(_QWORD *)(v11 - 24)) = v5[6];
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 128) = v3;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 24) = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_19C2B500C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::iostream::~basic_iostream();
  MEMORY[0x1A1AD34CC](v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19C2B5034(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = MEMORY[0x1E0DE4F50];
  v3 = *MEMORY[0x1E0DE4F50];
  *(_QWORD *)a1 = *MEMORY[0x1E0DE4F50];
  v4 = *(_QWORD *)(v2 + 72);
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 64);
  *(_QWORD *)(a1 + 24) = MEMORY[0x1E0DE4FB8] + 16;
  *(_QWORD *)(a1 + 16) = v4;
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1A1AD34CC](a1 + 128);
  return a1;
}

_QWORD *sub_19C2B50BC(_QWORD *result, __int128 *a2)
{
  _QWORD *v2;
  uint64_t v3;
  __int128 v4;

  v2 = result;
  v3 = result[1];
  if (*((char *)a2 + 23) < 0)
  {
    result = sub_19C2B5238((_BYTE *)result[1], *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *(_QWORD *)(v3 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v3 = v4;
  }
  v2[1] = v3 + 24;
  return result;
}

void sub_19C2B5110(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_19C2B5118(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  uint64_t v13;
  _QWORD v15[2];
  char *v16;
  char *v17;
  uint64_t *v18;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_19C2A18E8();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v18 = a1 + 2;
  if (v9)
    v10 = (char *)sub_19C2A18FC(v7, v9);
  else
    v10 = 0;
  v11 = &v10[24 * v4];
  v15[0] = v10;
  v15[1] = v11;
  v16 = v11;
  v17 = &v10[24 * v9];
  if (*((char *)a2 + 23) < 0)
  {
    sub_19C2B5238(v11, *(void **)a2, *((_QWORD *)a2 + 1));
    v11 = v16;
  }
  else
  {
    v12 = *a2;
    *((_QWORD *)v11 + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v11 = v12;
  }
  v16 = v11 + 24;
  sub_19C2B49D0(a1, v15);
  v13 = a1[1];
  sub_19C2B4B58((uint64_t)v15);
  return v13;
}

void sub_19C2B5224(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C2B4B58((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_19C2B5238(_BYTE *__dst, void *__src, unint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v5 = __dst;
  if (a3 > 0x16)
  {
    if (a3 >= 0x7FFFFFFFFFFFFFF8)
      sub_19C2A1A54();
    v6 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17)
      v6 = a3 | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    v5[1] = a3;
    v5[2] = v7 | 0x8000000000000000;
    *v5 = v8;
    v5 = v8;
  }
  else
  {
    __dst[23] = a3;
  }
  return memmove(v5, __src, a3 + 1);
}

char *sub_19C2B52C4(uint64_t a1, __int128 **a2)
{
  uint64_t v3;
  char *result;

  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)v3 = 0;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 16) = 0;
  result = sub_19C2B5440((char *)v3, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  *(_QWORD *)(a1 + 8) = v3 + 24;
  return result;
}

void sub_19C2B5318(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_19C2B5320(uint64_t *a1, __int128 **a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void *v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_19C2A18E8();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)sub_19C2A18FC(v7, v9);
  else
    v10 = 0;
  v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[24 * v9];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  sub_19C2B5440(v11, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  v15 += 24;
  sub_19C2B55F8(a1, v14);
  v12 = a1[1];
  sub_19C2B5788(v14);
  return v12;
}

void sub_19C2B542C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C2B5788((void **)va);
  _Unwind_Resume(a1);
}

char *sub_19C2B5440(char *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  char *v6;

  if (a4)
  {
    v6 = result;
    sub_19C2A1898(result, a4);
    result = sub_19C2B54C4((uint64_t)(v6 + 16), a2, a3, *((char **)v6 + 1));
    *((_QWORD *)v6 + 1) = result;
  }
  return result;
}

void sub_19C2B54A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_19C2B3E94(&a9);
  _Unwind_Resume(a1);
}

char *sub_19C2B54C4(uint64_t a1, __int128 *a2, __int128 *a3, char *__dst)
{
  char *v4;
  __int128 *v6;
  __int128 v7;
  _QWORD v9[3];
  char v10;
  char *v11;
  char *v12;

  v4 = __dst;
  v11 = __dst;
  v12 = __dst;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        sub_19C2B5238(v4, *(void **)v6, *((_QWORD *)v6 + 1));
        v4 = v12;
      }
      else
      {
        v7 = *v6;
        *((_QWORD *)v4 + 2) = *((_QWORD *)v6 + 2);
        *(_OWORD *)v4 = v7;
      }
      v6 = (__int128 *)((char *)v6 + 24);
      v4 += 24;
      v12 = v4;
    }
    while (v6 != a3);
  }
  v10 = 1;
  sub_19C2B5580((uint64_t)v9);
  return v4;
}

void sub_19C2B556C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_19C2B5580((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_19C2B5580(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_19C2B55B4(a1);
  return a1;
}

void sub_19C2B55B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 1) < 0)
      operator delete(*(void **)(v1 - 24));
    v1 -= 24;
  }
}

uint64_t sub_19C2B55F8(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_19C2B566C((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_19C2B566C(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  sub_19C2B570C((uint64_t)v11);
  return v9;
}

uint64_t sub_19C2B570C(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_19C2B5740(a1);
  return a1;
}

void sub_19C2B5740(uint64_t a1)
{
  void **v1;
  void **v2;
  void **v3;

  v1 = *(void ***)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(void ***)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = v1;
    sub_19C2B3E94(&v3);
    v1 += 3;
  }
}

void **sub_19C2B5788(void **a1)
{
  sub_19C2B57B8((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void sub_19C2B57B8(uint64_t a1)
{
  uint64_t i;
  uint64_t v2;
  void **v4;
  void **v5;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (void **)(i - 24);
    *(_QWORD *)(a1 + 16) = v4;
    v5 = v4;
    sub_19C2B3E94(&v5);
  }
}

_QWORD *sub_19C2B5808(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *result;

  v3 = *(_QWORD **)(a1 + 8);
  *v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  result = sub_19C2B596C(v3, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  *(_QWORD *)(a1 + 8) = v3 + 3;
  return result;
}

void sub_19C2B5850(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_19C2B5858(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_19C2A18E8();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)sub_19C2A18FC(v7, v9);
  else
    v10 = 0;
  v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[24 * v9];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  sub_19C2B596C(v11, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  v15 += 24;
  sub_19C2B59E4(a1, v14);
  v12 = a1[1];
  sub_19C2B5B70((uint64_t)v14);
  return v12;
}

void sub_19C2B5958(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C2B5B70((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_19C2B596C(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_19C2B38B0(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_19C2B59C8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C2B59E4(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_19C2B5A58((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_19C2B5A58(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  sub_19C2B5AF8((uint64_t)v11);
  return v9;
}

uint64_t sub_19C2B5AF8(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_19C2B5B2C(a1);
  return a1;
}

void sub_19C2B5B2C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = *(void **)v1;
    if (*(_QWORD *)v1)
    {
      *(_QWORD *)(v1 + 8) = v3;
      operator delete(v3);
    }
    v1 += 24;
  }
}

uint64_t sub_19C2B5B70(uint64_t a1)
{
  sub_19C2B5BA4(a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_19C2B5BA4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;

  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != a2)
  {
    v5 = *(void **)(v2 - 24);
    *(_QWORD *)(a1 + 16) = v2 - 24;
    if (v5)
    {
      *(_QWORD *)(v2 - 16) = v5;
      operator delete(v5);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
}

uint64_t sub_19C2B5BFC(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_19C2B5CA4((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_19C2B5C70(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59)
    sub_19C2A143C();
  return operator new(32 * a2);
}

uint64_t sub_19C2B5CA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 32) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      v8 = *(_OWORD *)(a3 - 32);
      a3 -= 32;
      *(_OWORD *)(v7 - 32) = v8;
      *(_QWORD *)(v7 - 16) = *(_QWORD *)(a3 + 16);
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)a3 = 0;
      *(_DWORD *)(v7 - 8) = *(_DWORD *)(a3 + 24);
      v7 = *((_QWORD *)&v14 + 1) - 32;
      *((_QWORD *)&v14 + 1) -= 32;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  sub_19C2B5D4C((uint64_t)v11);
  return v9;
}

uint64_t sub_19C2B5D4C(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_19C2B5D80(a1);
  return a1;
}

void sub_19C2B5D80(uint64_t a1)
{
  void **v1;
  void **v2;
  void **v3;

  v1 = *(void ***)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(void ***)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = v1;
    sub_19C2B3E94(&v3);
    v1 += 4;
  }
}

void **sub_19C2B5DC8(void **a1)
{
  sub_19C2B5DF8((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void sub_19C2B5DF8(uint64_t a1)
{
  uint64_t i;
  uint64_t v2;
  void **v4;
  void **v5;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (void **)(i - 32);
    *(_QWORD *)(a1 + 16) = v4;
    v5 = v4;
    sub_19C2B3E94(&v5);
  }
}

float sub_19C2B5E48(uint64_t a1, __int128 **a2, float *a3)
{
  uint64_t v5;
  float result;

  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)v5 = 0;
  *(_QWORD *)(v5 + 8) = 0;
  *(_QWORD *)(v5 + 16) = 0;
  sub_19C2B5440((char *)v5, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  result = *a3;
  *(float *)(v5 + 24) = *a3;
  *(_QWORD *)(a1 + 8) = v5 + 32;
  return result;
}

void sub_19C2B5EB0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_19C2B5EB8(uint64_t *a1, __int128 **a2, _DWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  void *v16[2];
  char *v17;
  char *v18;
  uint64_t *v19;

  v4 = *a1;
  v5 = (a1[1] - *a1) >> 5;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59)
    sub_19C2A18E8();
  v9 = (uint64_t)(a1 + 2);
  v10 = a1[2] - v4;
  if (v10 >> 4 > v6)
    v6 = v10 >> 4;
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0)
    v11 = 0x7FFFFFFFFFFFFFFLL;
  else
    v11 = v6;
  v19 = a1 + 2;
  if (v11)
    v12 = (char *)sub_19C2B5C70(v9, v11);
  else
    v12 = 0;
  v13 = &v12[32 * v5];
  v16[0] = v12;
  v16[1] = v13;
  v17 = v13;
  v18 = &v12[32 * v11];
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = 0;
  *((_QWORD *)v13 + 2) = 0;
  sub_19C2B5440(v13, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  *((_DWORD *)v13 + 6) = *a3;
  v17 += 32;
  sub_19C2B5BFC(a1, v16);
  v14 = a1[1];
  sub_19C2B5DC8(v16);
  return v14;
}

void sub_19C2B5FB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C2B5DC8((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19C2B5FC4(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_19C2B6038((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_19C2B6038(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 32) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      v8 = *(_OWORD *)(a3 - 32);
      a3 -= 32;
      *(_OWORD *)(v7 - 32) = v8;
      *(_QWORD *)(v7 - 16) = *(_QWORD *)(a3 + 16);
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)a3 = 0;
      *(_DWORD *)(v7 - 8) = *(_DWORD *)(a3 + 24);
      v7 = *((_QWORD *)&v14 + 1) - 32;
      *((_QWORD *)&v14 + 1) -= 32;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  sub_19C2B60E0((uint64_t)v11);
  return v9;
}

uint64_t sub_19C2B60E0(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_19C2B6114(a1);
  return a1;
}

void sub_19C2B6114(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = *(void **)v1;
    if (*(_QWORD *)v1)
    {
      *(_QWORD *)(v1 + 8) = v3;
      operator delete(v3);
    }
    v1 += 32;
  }
}

uint64_t sub_19C2B6158(uint64_t a1)
{
  sub_19C2B618C(a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_19C2B618C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;

  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != a2)
  {
    v5 = *(void **)(v2 - 32);
    *(_QWORD *)(a1 + 16) = v2 - 32;
    if (v5)
    {
      *(_QWORD *)(v2 - 24) = v5;
      operator delete(v5);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 32;
    }
  }
}

float sub_19C2B61E4(uint64_t a1, uint64_t a2, float *a3)
{
  uint64_t v5;
  float result;

  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)v5 = 0;
  *(_QWORD *)(v5 + 8) = 0;
  *(_QWORD *)(v5 + 16) = 0;
  sub_19C2B596C((_QWORD *)v5, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  result = *a3;
  *(float *)(v5 + 24) = *a3;
  *(_QWORD *)(a1 + 8) = v5 + 32;
  return result;
}

void sub_19C2B6240(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_19C2B6248(uint64_t *a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[2];
  char *v17;
  char *v18;
  uint64_t *v19;

  v4 = *a1;
  v5 = (a1[1] - *a1) >> 5;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59)
    sub_19C2A18E8();
  v9 = (uint64_t)(a1 + 2);
  v10 = a1[2] - v4;
  if (v10 >> 4 > v6)
    v6 = v10 >> 4;
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0)
    v11 = 0x7FFFFFFFFFFFFFFLL;
  else
    v11 = v6;
  v19 = a1 + 2;
  if (v11)
    v12 = (char *)sub_19C2B5C70(v9, v11);
  else
    v12 = 0;
  v13 = &v12[32 * v5];
  v16[0] = v12;
  v16[1] = v13;
  v17 = v13;
  v18 = &v12[32 * v11];
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = 0;
  *((_QWORD *)v13 + 2) = 0;
  sub_19C2B596C(v13, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  *((_DWORD *)v13 + 6) = *a3;
  v17 += 32;
  sub_19C2B5FC4(a1, v16);
  v14 = a1[1];
  sub_19C2B6158((uint64_t)v16);
  return v14;
}

void sub_19C2B6334(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C2B6158((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_19C2B6348(_QWORD *a1, unint64_t a2, _DWORD *a3)
{
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_19C2B38B0(a1, a2);
    v6 = (_DWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 4 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 4;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_19C2B63AC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C2B63C8(uint64_t a1, float *a2, float *a3)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  sub_19C2B6518((char *)a1, a2, a3, a3 - a2);
  sub_19C2B6420((double **)a1);
  return a1;
}

void sub_19C2B6404(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_19C2B6420(double **a1)
{
  double *v1;
  double *v2;
  uint64_t v4;
  double v5;
  double *v6;
  double v7;
  double *v8;
  uint64_t v9;
  double *v10;
  double *v11;
  double v12;
  double *v13;
  double v14;
  double *v15;
  double *v16;
  __int128 v17;

  v1 = *a1;
  v2 = a1[1];
  if (*a1 != v2)
  {
    if ((unint64_t)((char *)v2 - (char *)v1) < 9)
    {
      a1[1] = v1;
      sub_19C2B65CC((uint64_t)a1);
    }
    else
    {
      v4 = v2 - v1;
      v5 = 0.0;
      v6 = *a1;
      do
      {
        v7 = *v6++;
        v5 = v5 + v7;
      }
      while (v6 != v2);
      while (v1 < v2)
      {
        *v1 = *v1 / v5;
        ++v1;
      }
      sub_19C2B6680(&v16, v4 - 1);
      v8 = *a1;
      v9 = (uint64_t)(a1[1] - 1);
      v10 = v16;
      if (*a1 != (double *)v9)
      {
        v11 = v8 + 1;
        v12 = *v8;
        *v16 = *v8;
        if (v8 + 1 != (double *)v9)
        {
          v13 = v10 + 1;
          do
          {
            v14 = *v11++;
            v12 = v12 + v14;
            *v13++ = v12;
          }
          while (v11 != (double *)v9);
        }
      }
      *a1 = v10;
      v15 = a1[2];
      *(_OWORD *)(a1 + 1) = v17;
      v16 = v8;
      *((_QWORD *)&v17 + 1) = v15;
      if (v8)
      {
        *(_QWORD *)&v17 = v8;
        operator delete(v8);
      }
    }
  }
}

char *sub_19C2B6518(char *result, float *a2, float *a3, unint64_t a4)
{
  char *v6;
  double *v7;
  float v8;

  if (a4)
  {
    v6 = result;
    result = sub_19C2B658C(result, a4);
    v7 = (double *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      *v7++ = v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_19C2B6570(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_19C2B658C(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 61)
    sub_19C2A18E8();
  result = (char *)sub_19C2A1FC0((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void sub_19C2B65CC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  _BYTE *v5;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;

  v2 = a1 + 16;
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(char **)a1;
  v5 = *(_BYTE **)(a1 + 8);
  v6 = (v5 - v4) >> 3;
  if (v6 < (v3 - (uint64_t)v4) >> 3)
  {
    if (v5 == v4)
    {
      v11 = 0;
      v9 = 8 * v6;
    }
    else
    {
      v7 = (char *)sub_19C2A1FC0(v2, v6);
      v4 = *(char **)a1;
      v8 = *(char **)(a1 + 8);
      v9 = (uint64_t)&v7[8 * v6];
      v11 = &v7[8 * v10];
      if (v8 != *(char **)a1)
      {
        v12 = v9;
        do
        {
          v13 = *((_QWORD *)v8 - 1);
          v8 -= 8;
          *(_QWORD *)(v12 - 8) = v13;
          v12 -= 8;
        }
        while (v8 != v4);
        goto LABEL_9;
      }
    }
    v12 = v9;
LABEL_9:
    *(_QWORD *)a1 = v12;
    *(_QWORD *)(a1 + 8) = v9;
    *(_QWORD *)(a1 + 16) = v11;
    if (v4)
      operator delete(v4);
  }
}

_QWORD *sub_19C2B6680(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_19C2B658C(a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_19C2B66D8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_19C2B66F4(uint64_t a1, uint64_t a2, double **a3)
{
  double *v5;
  double *v6;
  unsigned int v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  double *v11;
  double *v12;
  double v13;

  v5 = *a3;
  v6 = a3[1];
  v7 = sub_19C2B67A8(a2);
  v8 = sub_19C2B67A8(a2);
  if (v6 != v5)
  {
    v9 = v6 - v5;
    do
    {
      v10 = v9 >> 1;
      v11 = &v5[v9 >> 1];
      v13 = *v11;
      v12 = v11 + 1;
      v9 += ~(v9 >> 1);
      if (((double)v7 + (double)v8 * 4294967300.0) * 5.42101086e-20 + 0.0 < v13)
        v9 = v10;
      else
        v5 = v12;
    }
    while (v9);
    v6 = v5;
  }
  return (unint64_t)((char *)v6 - (char *)*a3) >> 3;
}

uint64_t sub_19C2B67A8(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  unsigned int v3;

  v1 = *(_QWORD *)(a1 + 2496);
  v2 = (v1 + 1) % 0x270uLL;
  v3 = *(_DWORD *)(a1 + 4 * ((v1 + 397) % 0x270uLL)) ^ ((*(_DWORD *)(a1 + 4 * v2) & 0x7FFFFFFE | *(_DWORD *)(a1 + 4 * v1) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(a1 + 4 * v2) << 31) >> 31) & 0x9908B0DF;
  *(_DWORD *)(a1 + 4 * v1) = v3;
  *(_QWORD *)(a1 + 2496) = v2;
  LODWORD(v1) = ((v3 ^ (v3 >> 11)) << 7) & 0x9D2C5680 ^ v3 ^ (v3 >> 11);
  return ((_DWORD)v1 << 15) & 0xEFC60000 ^ v1 ^ ((((_DWORD)v1 << 15) & 0xEFC60000 ^ v1) >> 18);
}

uint64_t sub_19C2B6848(uint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v10;
  char *v11;
  _BYTE *v12;
  char *v13;
  uint64_t *v14;

  v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_19C2A18E8();
  if (0x5555555555555556 * ((a1[2] - *a1) >> 3) > v4)
    v4 = 0x5555555555555556 * ((a1[2] - *a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  v14 = a1 + 2;
  if (v6)
    v7 = (char *)sub_19C2A18FC((uint64_t)(a1 + 2), v6);
  else
    v7 = 0;
  v10 = v7;
  v11 = &v7[24 * v3];
  v13 = &v7[24 * v6];
  sub_19C2B6954((_DWORD)a1 + 16, v11, a2);
  v12 = v11 + 24;
  sub_19C2B49D0(a1, &v10);
  v8 = a1[1];
  sub_19C2B4B58((uint64_t)&v10);
  return v8;
}

void sub_19C2B6940(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C2B4B58((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19C2B6954(int a1, _BYTE *__dst, uint64_t a3)
{
  _QWORD *v3;
  size_t v4;
  const void *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v3 = __dst;
  v4 = *(_QWORD *)(a3 + 8);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    sub_19C2A1A54();
  v5 = *(const void **)a3;
  if (v4 >= 0x17)
  {
    v6 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v6 = v4 | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    v3[1] = v4;
    v3[2] = v7 | 0x8000000000000000;
    *v3 = v8;
    v3 = v8;
  }
  else
  {
    __dst[23] = v4;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v3, v5, v4);
LABEL_9:
  *((_BYTE *)v3 + v4) = 0;
}

uint64_t sub_19C2B69EC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;

  if (a2 != a1)
  {
    v2 = *(_QWORD *)(a1 + 8);
    v3 = (_QWORD *)(v2 & 0xFFFFFFFFFFFFFFFELL);
    if ((v2 & 1) != 0)
      v3 = (_QWORD *)*v3;
    v4 = *(_QWORD *)(a2 + 8);
    v5 = (_QWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL);
    if ((v4 & 1) != 0)
      v5 = (_QWORD *)*v5;
    if (v3 == v5)
      return (uint64_t)sub_19C2BFA24(a1, a2);
    else
      return sub_19C2DA250(a1, a2);
  }
  return a1;
}

uint64_t sub_19C2B6A30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 24 * a3;
    do
    {
      sub_19C2B6AB0((uint64_t **)a1, v4, a2, a2);
      a2 += 24;
      v6 -= 24;
    }
    while (v6);
  }
  return a1;
}

void sub_19C2B6A98(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_19C2A1E6C(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

_OWORD *sub_19C2B6AB0(uint64_t **a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v6;
  _OWORD *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t v11;

  v6 = sub_19C2B4CE4(a1, a2, &v11, &v10, a3);
  v7 = (_OWORD *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x38uLL);
    v7[2] = *(_OWORD *)a4;
    *((_QWORD *)v7 + 6) = *(_QWORD *)(a4 + 16);
    sub_19C2A2274(a1, v11, v8, (uint64_t *)v7);
  }
  return v7;
}

_QWORD *sub_19C2B6B3C(_QWORD *a1)
{
  *a1 = &off_1E3D346B0;
  sub_19C2B6BB4((uint64_t)a1);
  return a1;
}

void sub_19C2B6B70(_QWORD *a1)
{
  *a1 = &off_1E3D346B0;
  sub_19C2B6BB4((uint64_t)a1);
  JUMPOUT(0x1A1AD355CLL);
}

void *sub_19C2B6BB4(uint64_t a1)
{
  int v2;
  void *result;

  v2 = *(_DWORD *)(a1 + 24);
  if ((v2 & 0x80000000) == 0)
  {
    close(v2);
    *(_DWORD *)(a1 + 24) = -1;
  }
  result = *(void **)(a1 + 8);
  if (result)
    result = (void *)munmap(result, *(_QWORD *)(a1 + 16));
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

double sub_19C2B6BF8@<D0>(const std::__fs::filesystem::path *a1@<X0>, uint64_t a2@<X8>)
{
  std::__fs::filesystem::path::__string_view v3;
  __int128 *p_dst;
  std::basic_string_view<_CharT, _Traits>::size_type v5;
  std::basic_string_view<_CharT, _Traits>::size_type v6;
  double result;
  __int128 __dst;
  unint64_t v9;

  v3 = std::__fs::filesystem::path::__parent_path(a1);
  if (v3.__size_ >= 0x7FFFFFFFFFFFFFF8)
    sub_19C2A1A54();
  if (v3.__size_ >= 0x17)
  {
    v5 = (v3.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3.__size_ | 7) != 0x17)
      v5 = v3.__size_ | 7;
    v6 = v5 + 1;
    p_dst = (__int128 *)operator new(v5 + 1);
    *((_QWORD *)&__dst + 1) = v3.__size_;
    v9 = v6 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
  }
  else
  {
    HIBYTE(v9) = v3.__size_;
    p_dst = &__dst;
    if (!v3.__size_)
      goto LABEL_9;
  }
  memmove(p_dst, v3.__data_, v3.__size_);
LABEL_9:
  *((_BYTE *)p_dst + v3.__size_) = 0;
  result = *(double *)&__dst;
  *(_OWORD *)a2 = __dst;
  *(_QWORD *)(a2 + 16) = v9;
  return result;
}

double sub_19C2B6CB8@<D0>(const std::__fs::filesystem::path *a1@<X0>, uint64_t a2@<X8>)
{
  std::__fs::filesystem::path::__string_view v3;
  __int128 *p_dst;
  std::basic_string_view<_CharT, _Traits>::size_type v5;
  std::basic_string_view<_CharT, _Traits>::size_type v6;
  double result;
  __int128 __dst;
  unint64_t v9;

  v3 = std::__fs::filesystem::path::__filename(a1);
  if (v3.__size_ >= 0x7FFFFFFFFFFFFFF8)
    sub_19C2A1A54();
  if (v3.__size_ >= 0x17)
  {
    v5 = (v3.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3.__size_ | 7) != 0x17)
      v5 = v3.__size_ | 7;
    v6 = v5 + 1;
    p_dst = (__int128 *)operator new(v5 + 1);
    *((_QWORD *)&__dst + 1) = v3.__size_;
    v9 = v6 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
  }
  else
  {
    HIBYTE(v9) = v3.__size_;
    p_dst = &__dst;
    if (!v3.__size_)
      goto LABEL_9;
  }
  memmove(p_dst, v3.__data_, v3.__size_);
LABEL_9:
  *((_BYTE *)p_dst + v3.__size_) = 0;
  result = *(double *)&__dst;
  *(_OWORD *)a2 = __dst;
  *(_QWORD *)(a2 + 16) = v9;
  return result;
}

_QWORD *sub_19C2B6D78(_QWORD *a1, _BYTE *a2, _BYTE *a3, unsigned __int8 __c, unsigned __int8 a5)
{
  int v10;
  std::string *v11;
  std::string::size_type size;
  _QWORD *v13;
  std::string v15;

  memset(&v15, 0, sizeof(v15));
  std::string::push_back(&v15, __c);
  while (a2 != a3)
  {
    v10 = *a2;
    if (v10 == a5 || v10 == __c)
    {
      std::string::push_back(&v15, a5);
      LOBYTE(v10) = *a2;
    }
    std::string::push_back(&v15, v10);
    ++a2;
  }
  std::string::push_back(&v15, __c);
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v11 = &v15;
  else
    v11 = (std::string *)v15.__r_.__value_.__r.__words[0];
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
  else
    size = v15.__r_.__value_.__l.__size_;
  v13 = sub_19C2A1B24(a1, (uint64_t)v11, size);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  return v13;
}

void sub_19C2B6E58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *sub_19C2B6E78(std::string *this, char **a2)
{
  char *v3;
  char *v4;

  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  v3 = *a2;
  v4 = v3 - 1;
  while (*++v4)
    ;
  sub_19C2B6ED4(this, v3, v4);
  return this;
}

void sub_19C2B6EB8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *sub_19C2B6ED4(std::string *this, char *a2, char *a3)
{
  char *v4;
  unint64_t v6;
  unint64_t v7;
  std::string::size_type size;
  std::string::size_type v9;
  std::string *v10;
  unint64_t v11;
  void **v12;
  std::string::size_type v13;
  std::string *v14;
  _BYTE *i;
  char v16;
  std::string::size_type v17;
  void *__p[2];
  unsigned __int8 v20;

  v4 = a2;
  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  v7 = a3 - a2;
  if ((v6 & 0x80000000) != 0)
  {
    if (a3 == a2)
      return this;
    size = this->__r_.__value_.__l.__size_;
    v11 = this->__r_.__value_.__r.__words[2];
    v9 = (v11 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    v10 = (std::string *)this->__r_.__value_.__r.__words[0];
    v6 = HIBYTE(v11);
  }
  else
  {
    if (a3 == a2)
      return this;
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    v9 = 22;
    v10 = this;
  }
  if (v10 > (std::string *)v4 || (char *)&v10->__r_.__value_.__l.__data_ + size + 1 <= v4)
  {
    if (v9 - size < v7)
    {
      std::string::__grow_by(this, v9, size - v9 + v7, size, size, 0, 0);
      this->__r_.__value_.__l.__size_ = size;
      LOBYTE(v6) = *((_BYTE *)&this->__r_.__value_.__s + 23);
    }
    v14 = this;
    if ((v6 & 0x80) != 0)
      v14 = (std::string *)this->__r_.__value_.__r.__words[0];
    for (i = (char *)v14 + size; v4 != a3; ++i)
    {
      v16 = *v4++;
      *i = v16;
    }
    *i = 0;
    v17 = v7 + size;
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
      this->__r_.__value_.__l.__size_ = v17;
    else
      *((_BYTE *)&this->__r_.__value_.__s + 23) = v17 & 0x7F;
  }
  else
  {
    sub_19C2B7048(__p, v4, a3, v7);
    if ((v20 & 0x80u) == 0)
      v12 = __p;
    else
      v12 = (void **)__p[0];
    if ((v20 & 0x80u) == 0)
      v13 = v20;
    else
      v13 = (std::string::size_type)__p[1];
    std::string::append(this, (const std::string::value_type *)v12, v13);
    if ((char)v20 < 0)
      operator delete(__p[0]);
  }
  return this;
}

void sub_19C2B702C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_19C2B7048(_QWORD *result, char *a2, char *a3, unint64_t a4)
{
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v4 = result;
  if (a4 >= 0x7FFFFFFFFFFFFFF8)
    sub_19C2A1A54();
  if (a4 > 0x16)
  {
    v8 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17)
      v8 = a4 | 7;
    v9 = v8 + 1;
    result = operator new(v8 + 1);
    v4[1] = a4;
    v4[2] = v9 | 0x8000000000000000;
    *v4 = result;
    v4 = result;
  }
  else
  {
    *((_BYTE *)result + 23) = a4;
  }
  while (a2 != a3)
  {
    v10 = *a2++;
    *(_BYTE *)v4 = v10;
    v4 = (_QWORD *)((char *)v4 + 1);
  }
  *(_BYTE *)v4 = 0;
  return result;
}

void sub_19C2B70EC()
{
  __assert_rtn("_internal_set_type", "sentencepiece_model.pb.h", 4686, "::sentencepiece::ModelProto_SentencePiece_Type_IsValid(value)");
}

uint64_t sub_19C2B7114(uint64_t a1)
{
  void *v2;
  void **v4;

  *(_QWORD *)a1 = &off_1E3D34910;
  sub_19C2BD7AC((_QWORD *)(a1 + 96));
  v4 = (void **)(a1 + 72);
  sub_19C2B42C4(&v4);
  v4 = (void **)(a1 + 48);
  sub_19C2B42C4(&v4);
  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_19C2B7184(uint64_t a1)
{
  sub_19C2B7114(a1);
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C2B71A8(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  char **v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t result;

  v2 = a1[5];
  v3 = a1[6];
  v4 = a1[4];
  if (v4 >= v3)
  {
    v4 = 0;
    ++v2;
    a1[4] = 0;
    a1[5] = v2;
  }
  v5 = a1[1];
  v6 = (char **)(a1 + 1);
  if (v2 == (a1[2] - v5) >> 3)
  {
    v7 = 48 * v3;
    is_mul_ok(v3, 0x30uLL);
    v8 = (_QWORD *)operator new[]();
    v9 = v8;
    if (v3)
    {
      v10 = v8;
      do
      {
        *v10 = 0;
        v10[1] = 0;
        v10 += 6;
        v7 -= 48;
      }
      while (v7);
    }
    bzero(v8, 48 * a1[6]);
    v11 = a1[3];
    v12 = (_QWORD *)a1[2];
    if ((unint64_t)v12 >= v11)
    {
      v14 = ((char *)v12 - *v6) >> 3;
      if ((unint64_t)(v14 + 1) >> 61)
        sub_19C2A18E8();
      v15 = v11 - (_QWORD)*v6;
      v16 = v15 >> 2;
      if (v15 >> 2 <= (unint64_t)(v14 + 1))
        v16 = v14 + 1;
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
        v17 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v17 = v16;
      if (v17)
        v18 = (char *)sub_19C2A1FC0((uint64_t)(a1 + 3), v17);
      else
        v18 = 0;
      v19 = &v18[8 * v14];
      v20 = &v18[8 * v17];
      *(_QWORD *)v19 = v9;
      v13 = v19 + 8;
      v22 = (char *)a1[1];
      v21 = (char *)a1[2];
      if (v21 != v22)
      {
        do
        {
          v23 = *((_QWORD *)v21 - 1);
          v21 -= 8;
          *((_QWORD *)v19 - 1) = v23;
          v19 -= 8;
        }
        while (v21 != v22);
        v21 = *v6;
      }
      a1[1] = v19;
      a1[2] = v13;
      a1[3] = v20;
      if (v21)
        operator delete(v21);
    }
    else
    {
      *v12 = v9;
      v13 = v12 + 1;
    }
    a1[2] = v13;
    v5 = a1[1];
    v4 = a1[4];
    v2 = a1[5];
  }
  result = *(_QWORD *)(v5 + 8 * v2) + 48 * v4;
  a1[4] = v4 + 1;
  return result;
}

void sub_19C2B7328(_QWORD *a1)
{
  sub_19C2B4304(a1 + 6);
  sub_19C2B4304(a1 + 9);
  a1[1] = "";
  a1[2] = 0;
  a1[4] = a1[3];
  sub_19C2B736C((uint64_t)(a1 + 12));
}

void sub_19C2B736C(uint64_t a1)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_DWORD *)(a1 + 40);
  if (v2 + 1 < (int)((*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3))
    v3 = v2 + 1;
  else
    v3 = (*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3;
  if (v3 >= 1)
  {
    v4 = 0;
    v5 = 8 * v3;
    do
    {
      bzero(*(void **)(*(_QWORD *)(a1 + 8) + v4), 48 * *(_QWORD *)(a1 + 48));
      v4 += 8;
    }
    while (v5 != v4);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
}

void sub_19C2B73E4(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  char **v6;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  _DWORD *v34;
  void **v35;
  _QWORD *v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  _DWORD *v49;
  _DWORD *v50;
  void **v51;
  void **v52;
  _QWORD *v53;
  unint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  char *v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;

  sub_19C2B7328((_QWORD *)a1);
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  v6 = (char **)(a1 + 24);
  sub_19C2A6AF0((void **)(a1 + 24), a3 + 1);
  if (a3)
  {
    v7 = (_QWORD *)(a1 + 40);
    v8 = *(_QWORD **)(a1 + 32);
    do
    {
      if ((int)a3 >= asc_19C45F89C[(unint64_t)*a2 >> 4])
        v9 = asc_19C45F89C[(unint64_t)*a2 >> 4];
      else
        v9 = a3;
      if ((unint64_t)v8 >= *v7)
      {
        v10 = ((char *)v8 - *v6) >> 3;
        if ((unint64_t)(v10 + 1) >> 61)
          goto LABEL_76;
        v11 = *v7 - (_QWORD)*v6;
        v12 = v11 >> 2;
        if (v11 >> 2 <= (unint64_t)(v10 + 1))
          v12 = v10 + 1;
        if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
          v13 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v13 = v12;
        if (v13)
          v14 = (char *)sub_19C2A1FC0(a1 + 40, v13);
        else
          v14 = 0;
        v15 = &v14[8 * v10];
        *(_QWORD *)v15 = a2;
        v8 = v15 + 8;
        v17 = *(char **)(a1 + 24);
        v16 = *(char **)(a1 + 32);
        if (v16 != v17)
        {
          do
          {
            v18 = *((_QWORD *)v16 - 1);
            v16 -= 8;
            *((_QWORD *)v15 - 1) = v18;
            v15 -= 8;
          }
          while (v16 != v17);
          v16 = *v6;
        }
        *(_QWORD *)(a1 + 24) = v15;
        *(_QWORD *)(a1 + 32) = v8;
        *(_QWORD *)(a1 + 40) = &v14[8 * v13];
        if (v16)
          operator delete(v16);
      }
      else
      {
        *v8++ = a2;
      }
      *(_QWORD *)(a1 + 32) = v8;
      a2 += v9;
      a3 -= v9;
    }
    while (a3);
  }
  else
  {
    v8 = *(_QWORD **)(a1 + 32);
  }
  v19 = *(_QWORD *)(a1 + 40);
  if ((unint64_t)v8 >= v19)
  {
    v21 = ((char *)v8 - *v6) >> 3;
    if ((unint64_t)(v21 + 1) >> 61)
LABEL_76:
      sub_19C2A18E8();
    v22 = v19 - (_QWORD)*v6;
    v23 = v22 >> 2;
    if (v22 >> 2 <= (unint64_t)(v21 + 1))
      v23 = v21 + 1;
    if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8)
      v24 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v24 = v23;
    if (v24)
      v25 = (char *)sub_19C2A1FC0(a1 + 40, v24);
    else
      v25 = 0;
    v26 = &v25[8 * v21];
    v27 = &v25[8 * v24];
    *(_QWORD *)v26 = a2;
    v20 = v26 + 8;
    v29 = *(char **)(a1 + 24);
    v28 = *(char **)(a1 + 32);
    if (v28 != v29)
    {
      do
      {
        v30 = *((_QWORD *)v28 - 1);
        v28 -= 8;
        *((_QWORD *)v26 - 1) = v30;
        v26 -= 8;
      }
      while (v28 != v29);
      v28 = *v6;
    }
    *(_QWORD *)(a1 + 24) = v26;
    *(_QWORD *)(a1 + 32) = v20;
    *(_QWORD *)(a1 + 40) = v27;
    if (v28)
      operator delete(v28);
  }
  else
  {
    *v8 = a2;
    v20 = v8 + 1;
  }
  *(_QWORD *)(a1 + 32) = v20;
  v31 = (((unint64_t)v20 - *(_QWORD *)(a1 + 24)) >> 3) - 1;
  v32 = v31 & ~(v31 >> 31);
  sub_19C2B7820((uint64_t *)(a1 + 48), v32 + 1);
  sub_19C2B7820((uint64_t *)(a1 + 72), v32 + 1);
  v33 = 0;
  do
  {
    sub_19C2A6AF0((void **)(*(_QWORD *)(a1 + 48) + v33), 0x10uLL);
    sub_19C2A6AF0((void **)(*(_QWORD *)(a1 + 72) + v33), 0x10uLL);
    v33 += 24;
  }
  while (24 * v32 + 24 != v33);
  v34 = (_DWORD *)sub_19C2B71A8((_QWORD *)(a1 + 96));
  v34[6] = *(_DWORD *)(a1 + 128) + *(_DWORD *)(a1 + 136) * *(_DWORD *)(a1 + 144) - 1;
  v34[7] = -1;
  v34[4] = 0;
  v35 = *(void ***)(a1 + 72);
  v36 = v35[1];
  v37 = (unint64_t)v35[2];
  if ((unint64_t)v36 >= v37)
  {
    v39 = ((char *)v36 - (_BYTE *)*v35) >> 3;
    if ((unint64_t)(v39 + 1) >> 61)
      sub_19C2A18E8();
    v40 = v37 - (_QWORD)*v35;
    v41 = v40 >> 2;
    if (v40 >> 2 <= (unint64_t)(v39 + 1))
      v41 = v39 + 1;
    if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8)
      v42 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v42 = v41;
    if (v42)
      v43 = (char *)sub_19C2A1FC0((uint64_t)(v35 + 2), v42);
    else
      v43 = 0;
    v44 = &v43[8 * v39];
    v45 = &v43[8 * v42];
    *(_QWORD *)v44 = v34;
    v38 = v44 + 8;
    v47 = (char *)*v35;
    v46 = (char *)v35[1];
    if (v46 != *v35)
    {
      do
      {
        v48 = *((_QWORD *)v46 - 1);
        v46 -= 8;
        *((_QWORD *)v44 - 1) = v48;
        v44 -= 8;
      }
      while (v46 != v47);
      v46 = (char *)*v35;
    }
    *v35 = v44;
    v35[1] = v38;
    v35[2] = v45;
    if (v46)
      operator delete(v46);
  }
  else
  {
    *v36 = v34;
    v38 = v36 + 1;
  }
  v35[1] = v38;
  v49 = (_DWORD *)sub_19C2B71A8((_QWORD *)(a1 + 96));
  v50 = v49;
  v49[6] = *(_DWORD *)(a1 + 128) + *(_DWORD *)(a1 + 136) * *(_DWORD *)(a1 + 144) - 1;
  v49[7] = -1;
  v49[4] = v32;
  v51 = (void **)(*(_QWORD *)(a1 + 48) + 24 * v32);
  v52 = v51 + 1;
  v53 = v51[1];
  v54 = (unint64_t)v51[2];
  if ((unint64_t)v53 >= v54)
  {
    v56 = ((char *)v53 - (_BYTE *)*v51) >> 3;
    if ((unint64_t)(v56 + 1) >> 61)
      sub_19C2A18E8();
    v57 = v54 - (_QWORD)*v51;
    v58 = v57 >> 2;
    if (v57 >> 2 <= (unint64_t)(v56 + 1))
      v58 = v56 + 1;
    if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFF8)
      v59 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v59 = v58;
    if (v59)
      v60 = (char *)sub_19C2A1FC0((uint64_t)(v51 + 2), v59);
    else
      v60 = 0;
    v61 = &v60[8 * v56];
    v62 = &v60[8 * v59];
    *(_QWORD *)v61 = v50;
    v55 = v61 + 8;
    v63 = (char *)*v52;
    v64 = (char *)*v51;
    if (*v52 != *v51)
    {
      do
      {
        v65 = *((_QWORD *)v63 - 1);
        v63 -= 8;
        *((_QWORD *)v61 - 1) = v65;
        v61 -= 8;
      }
      while (v63 != v64);
      v63 = (char *)*v51;
    }
    *v51 = v61;
    *v52 = v55;
    v51[2] = v62;
    if (v63)
      operator delete(v63);
  }
  else
  {
    *v53 = v49;
    v55 = v53 + 1;
  }
  *v52 = v55;
}

void sub_19C2B7820(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v3 = a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    sub_19C2BD828(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      v8 = a1[1];
      do
      {
        v10 = *(void **)(v8 - 24);
        v8 -= 24;
        v9 = v10;
        if (v10)
        {
          *(_QWORD *)(v3 - 16) = v9;
          operator delete(v9);
        }
        v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

uint64_t sub_19C2B78B4(uint64_t a1, int a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t **v12;
  void **v13;
  uint64_t *v14;
  unint64_t v15;
  char **v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  void **v28;
  void **v29;
  uint64_t *v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t *v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;

  v6 = sub_19C2B71A8((_QWORD *)(a1 + 96));
  v7 = v6;
  v8 = *(_DWORD *)(a1 + 128) + *(_DWORD *)(a1 + 136) * *(_DWORD *)(a1 + 144) - 1;
  *(_DWORD *)(v6 + 20) = a3;
  *(_DWORD *)(v6 + 24) = v8;
  *(_DWORD *)(v6 + 16) = a2;
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_QWORD *)(v9 + 8 * (a3 + a2));
  v11 = *(_QWORD *)(v9 + 8 * a2);
  *(_QWORD *)v6 = v11;
  *(_QWORD *)(v6 + 8) = (int)v10 - (int)v11;
  v12 = (uint64_t **)(*(_QWORD *)(a1 + 48) + 24 * a2);
  v13 = (void **)(v12 + 1);
  v14 = v12[1];
  v16 = (char **)(v12 + 2);
  v15 = (unint64_t)v12[2];
  if ((unint64_t)v14 >= v15)
  {
    v18 = v14 - *v12;
    if ((unint64_t)(v18 + 1) >> 61)
      sub_19C2A18E8();
    v19 = v15 - (_QWORD)*v12;
    v20 = v19 >> 2;
    if (v19 >> 2 <= (unint64_t)(v18 + 1))
      v20 = v18 + 1;
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
      v21 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v21 = v20;
    if (v21)
      v22 = (char *)sub_19C2A1FC0((uint64_t)v16, v21);
    else
      v22 = 0;
    v23 = (uint64_t *)&v22[8 * v18];
    v24 = &v22[8 * v21];
    *v23 = v7;
    v17 = v23 + 1;
    v25 = (char *)*v13;
    v26 = (char *)*v12;
    if (*v13 != *v12)
    {
      do
      {
        v27 = *((_QWORD *)v25 - 1);
        v25 -= 8;
        *--v23 = v27;
      }
      while (v25 != v26);
      v25 = (char *)*v12;
    }
    *v12 = v23;
    *v13 = v17;
    *v16 = v24;
    if (v25)
      operator delete(v25);
  }
  else
  {
    *v14 = v6;
    v17 = v14 + 1;
  }
  *v13 = v17;
  v28 = (void **)(*(_QWORD *)(a1 + 72) + 24 * (*(_DWORD *)(v7 + 20) + a2));
  v29 = v28 + 1;
  v30 = (uint64_t *)v28[1];
  v31 = (unint64_t)v28[2];
  if ((unint64_t)v30 >= v31)
  {
    v33 = ((char *)v30 - (_BYTE *)*v28) >> 3;
    if ((unint64_t)(v33 + 1) >> 61)
      sub_19C2A18E8();
    v34 = v31 - (_QWORD)*v28;
    v35 = v34 >> 2;
    if (v34 >> 2 <= (unint64_t)(v33 + 1))
      v35 = v33 + 1;
    if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8)
      v36 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v36 = v35;
    if (v36)
      v37 = (char *)sub_19C2A1FC0((uint64_t)(v28 + 2), v36);
    else
      v37 = 0;
    v38 = (uint64_t *)&v37[8 * v33];
    v39 = &v37[8 * v36];
    *v38 = v7;
    v32 = v38 + 1;
    v40 = (char *)*v29;
    v41 = (char *)*v28;
    if (*v29 != *v28)
    {
      do
      {
        v42 = *((_QWORD *)v40 - 1);
        v40 -= 8;
        *--v38 = v42;
      }
      while (v40 != v41);
      v40 = (char *)*v28;
    }
    *v28 = v38;
    *v29 = v32;
    v28[2] = v39;
    if (v40)
      operator delete(v40);
  }
  else
  {
    *v30 = v7;
    v32 = v30 + 1;
  }
  *v29 = v32;
  return v7;
}

void sub_19C2B7AD8(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t **v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t **v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  uint64_t v21;
  int v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  void *v33;
  char *v34;
  char *v36;
  uint64_t v37;
  BOOL v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  void *__p;
  char *v46;
  char *v47;

  v3 = 0;
  v4 = ((a1[4] - a1[3]) >> 3) - 1;
  v5 = v4 & ~(v4 >> 31);
  v6 = a1[6];
  while (1)
  {
    v7 = (uint64_t **)(v6 + 24 * v3);
    v8 = *v7;
    v9 = v7[1];
    if (v8 != v9)
      break;
LABEL_14:
    if (++v3 == v5 + 1)
    {
      __p = 0;
      v46 = 0;
      v47 = 0;
      v21 = **(_QWORD **)(v6 + 24 * v5);
      v22 = *(_DWORD *)(v21 + 36);
      v23 = *(_QWORD *)(v21 + 40);
      if (*(_QWORD *)(v23 + 40))
      {
        v24 = 0;
        do
        {
          if (v24 >= v47)
          {
            v25 = (v24 - (_BYTE *)__p) >> 3;
            if ((unint64_t)(v25 + 1) >> 61)
              sub_19C2A18E8();
            v26 = (v47 - (_BYTE *)__p) >> 2;
            if (v26 <= v25 + 1)
              v26 = v25 + 1;
            if ((unint64_t)(v47 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
              v27 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v27 = v26;
            if (v27)
              v28 = (char *)sub_19C2A1FC0((uint64_t)&v47, v27);
            else
              v28 = 0;
            v29 = &v28[8 * v25];
            *(_QWORD *)v29 = v23;
            v24 = v29 + 8;
            v31 = (char *)__p;
            v30 = v46;
            if (v46 != __p)
            {
              do
              {
                v32 = *((_QWORD *)v30 - 1);
                v30 -= 8;
                *((_QWORD *)v29 - 1) = v32;
                v29 -= 8;
              }
              while (v30 != v31);
              v30 = (char *)__p;
            }
            __p = v29;
            v46 = v24;
            v47 = &v28[8 * v27];
            if (v30)
              operator delete(v30);
          }
          else
          {
            *(_QWORD *)v24 = v23;
            v24 += 8;
          }
          v46 = v24;
          v23 = *(_QWORD *)(v23 + 40);
        }
        while (*(_QWORD *)(v23 + 40));
        v33 = __p;
        v34 = v24 - 8;
        if (__p != v24 && v34 > __p)
        {
          v36 = (char *)__p + 8;
          do
          {
            v37 = *((_QWORD *)v36 - 1);
            *((_QWORD *)v36 - 1) = *(_QWORD *)v34;
            *(_QWORD *)v34 = v37;
            v34 -= 8;
            v38 = v36 >= v34;
            v36 += 8;
          }
          while (!v38);
          v33 = __p;
          v24 = v46;
        }
      }
      else
      {
        v24 = 0;
        v33 = 0;
      }
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      sub_19C2BC95C((_QWORD *)a2, v33, (uint64_t)v24, (v24 - (_BYTE *)v33) >> 3);
      *(_DWORD *)(a2 + 24) = v22;
      if (__p)
      {
        v46 = (char *)__p;
        operator delete(__p);
      }
      return;
    }
  }
  v10 = (uint64_t **)(a1[9] + 24 * v3);
  v11 = *v10;
  v12 = v10[1];
  while (1)
  {
    v13 = *v8;
    *(_QWORD *)(*v8 + 40) = 0;
    if (v11 == v12)
      break;
    v14 = 0;
    v15 = 0.0;
    v16 = v11;
    do
    {
      v18 = *v16++;
      v17 = v18;
      v19 = *(float *)(v18 + 36) + *(float *)(v13 + 32);
      if (v19 > v15 || v14 == 0)
      {
        v15 = v19;
        v14 = v17;
      }
    }
    while (v16 != v12);
    if (!v14)
      break;
    *(_QWORD *)(v13 + 40) = v14;
    *(float *)(v13 + 36) = v15;
    if (++v8 == v9)
      goto LABEL_14;
  }
  if ((int)sub_19C2CB68C() <= 2)
  {
    LOBYTE(__p) = 0;
    v39 = sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)"unigram_model.cc", 16);
    sub_19C2A1B24(v39, (uint64_t)"(", 1);
    v40 = (_QWORD *)std::ostream::operator<<();
    v41 = sub_19C2A1B24(v40, (uint64_t)") ", 2);
    v42 = sub_19C2A1B24(v41, (uint64_t)"LOG(", 4);
    v43 = sub_19C2A1B24(v42, (uint64_t)"ERROR", 5);
    v44 = sub_19C2A1B24(v43, (uint64_t)") ", 2);
    sub_19C2A1B24(v44, (uint64_t)"Failed to find the best path in Viterbi.", 40);
    sub_19C2A0AD8(&__p);
  }
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 16) = 0;
}

void sub_19C2B7DD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19C2B7E04(_QWORD *a1@<X0>, uint64_t *a2@<X8>, float a3@<S0>)
{
  int v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  _QWORD *v20;
  float v21;
  float v22;
  double v23;
  long double v24;
  uint64_t *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;

  v6 = ((a1[4] - a1[3]) >> 3) - 1;
  v7 = v6 & ~(v6 >> 31);
  v8 = a1[16] + a1[17] * a1[18];
  v29 = 0;
  v25 = a2;
  sub_19C2B6348(a2, v8, &v29);
  v9 = 0;
  v28 = a1[6];
  v26 = a1;
  v27 = (v7 + 1);
  do
  {
    v10 = (uint64_t *)(v28 + 24 * v9);
    v11 = *v10;
    v12 = v10[1];
    if (*v10 != v12)
    {
      v13 = v26[9] + 24 * v9;
      v15 = *(_QWORD **)v13;
      v14 = *(_QWORD **)(v13 + 8);
      v16 = *v25;
      do
      {
        if (v15 != v14)
        {
          v17 = *(unsigned int *)(*(_QWORD *)v11 + 24);
          v18 = *v15;
          v19 = *(float *)(v16 + 4 * v17);
          v20 = v15;
          do
          {
            v21 = *(float *)(v16 + 4 * *(unsigned int *)(*v20 + 24)) + (float)(a3 * *(float *)(*v20 + 32));
            if (*v20 != v18)
            {
              if (v21 >= v19)
                v22 = v19;
              else
                v22 = *(float *)(v16 + 4 * *(unsigned int *)(*v20 + 24)) + (float)(a3 * *(float *)(*v20 + 32));
              if (v19 >= v21)
                v21 = v19;
              if (v21 <= (float)(v22 + 50.0))
              {
                v23 = v21;
                v24 = exp((float)(v22 - v21));
                v21 = log(v24 + 1.0) + v23;
              }
            }
            *(float *)(v16 + 4 * v17) = v21;
            ++v20;
            v19 = v21;
          }
          while (v20 != v14);
        }
        v11 += 8;
      }
      while (v11 != v12);
    }
    ++v9;
  }
  while (v9 != v27);
}

float sub_19C2B7F88(_QWORD *a1, float a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t **v11;
  uint64_t *v12;
  uint64_t *v13;
  float *v14;
  float *v15;
  uint64_t v16;
  float v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  float v21;
  void *v22;
  float v23;
  unsigned int v25;
  _QWORD *v26;
  uint64_t v27;
  void *__p[3];
  void *v29[3];

  v5 = a1[3];
  v4 = a1[4];
  v6 = a1[16] + a1[17] * a1[18];
  LODWORD(__p[0]) = 0;
  sub_19C2B6348(v29, v6, __p);
  sub_19C2B7E04(a1, (uint64_t *)__p, a2);
  v7 = 0;
  v27 = a1[6];
  v25 = (((unint64_t)(v4 - v5) >> 3) - 1) & ~((int)(((unint64_t)(v4 - v5) >> 3) - 1) >> 31);
  v26 = a1;
  do
  {
    v8 = (uint64_t *)(v27 + 24 * v7);
    v9 = *v8;
    v10 = v8[1];
    if (*v8 != v10)
    {
      v11 = (uint64_t **)(v26[9] + 24 * v7);
      v12 = *v11;
      v13 = v11[1];
      v14 = (float *)__p[0];
      v15 = (float *)v29[0];
      do
      {
        if (v12 != v13)
        {
          v16 = *(unsigned int *)(*(_QWORD *)v9 + 24);
          v17 = v15[v16];
          v18 = v12;
          do
          {
            v19 = *v18++;
            v20 = *(unsigned int *)(v19 + 24);
            v21 = (float)(v14[v20] + (float)(a2 * *(float *)(v19 + 32))) - v14[v16];
            v17 = v17 + (float)(expf(v21) * (float)(v21 + v15[v20]));
            v15[v16] = v17;
          }
          while (v18 != v13);
        }
        v9 += 8;
      }
      while (v9 != v10);
    }
    ++v7;
  }
  while (v7 != v25 + 1);
  v22 = v29[0];
  v23 = *((float *)v29[0] + *(unsigned int *)(**(_QWORD **)(v27 + 24 * v25) + 24));
  if (!__p[0] || (__p[1] = __p[0], operator delete(__p[0]), (v22 = v29[0]) != 0))
  {
    v29[1] = v22;
    operator delete(v22);
  }
  return -v23;
}

void sub_19C2B8128(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19C2B8144(_QWORD *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t *a4@<X8>, float a5@<S0>)
{
  uint64_t v5;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  float v20;
  float v21;
  int v22;
  int v23;
  __int128 v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD **v33;
  _QWORD *i;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  float v54;
  unint64_t v55;
  float v56;
  float v57;
  uint64_t v58;
  unsigned int v59;
  float v60;
  float v61;
  int v62;
  double *v63;
  float v64;
  float *v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  float v75;
  _QWORD *v76;
  _QWORD *v77;
  _QWORD *v78;
  _QWORD *v79;
  _QWORD *v80;
  _QWORD *v81;
  _QWORD *v82;
  uint64_t v83;
  void *v84;
  _QWORD *v85;
  _QWORD *v86;
  _QWORD *v87;
  _QWORD *v88;
  _QWORD *v89;
  _QWORD *v90;
  _QWORD *v91;
  _QWORD *v92;
  _QWORD *v93;
  int v94;
  unint64_t v95;
  uint64_t *v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  uint8x8_t v101;
  unint64_t v102;
  _QWORD *v103;
  _QWORD *j;
  unint64_t v105;
  uint64_t v106;
  __int128 v107;
  uint8x8_t v108;
  _QWORD *v109;
  _QWORD *k;
  unint64_t v111;
  _QWORD *v112;
  float v113;
  _BOOL4 v114;
  unint64_t v115;
  unint64_t v116;
  int8x8_t prime;
  void *v118;
  void *v119;
  uint64_t v120;
  _QWORD **v121;
  unint64_t v122;
  uint8x8_t v123;
  unint64_t v124;
  uint8x8_t v125;
  uint64_t v126;
  _QWORD *m;
  unint64_t v128;
  _QWORD *v129;
  _QWORD *v130;
  unint64_t v131;
  void *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  _QWORD *v136;
  _QWORD *v137;
  uint64_t v138;
  uint64_t v139;
  _QWORD *v140;
  __int128 v141;
  uint64_t v142;
  uint64_t v143;
  __int128 v144;
  void *v145;
  int v146;
  char v147;
  int v148;
  _QWORD *v149;
  uint64_t v150;
  uint64_t v153;
  void *v154[2];
  __int128 v155;
  float v156;
  _BYTE v157[48];
  uint64_t v158;
  __int128 v159;
  uint64_t v160;
  void *v161;
  _BYTE *v162;
  void *v163[3];
  void *v164[3];
  void *v165[4];
  void *__p[3];
  uint64_t v167;
  __int128 v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t (**v171)();
  __int128 v172;
  _QWORD v173[3];
  uint64_t v174;
  uint64_t v175;

  v175 = *MEMORY[0x1E0C80C00];
  if (a2 == 1)
  {
    if ((a3 & 1) == 0)
    {
      sub_19C2B7AD8(a1, (uint64_t)&v171);
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      *(_QWORD *)v157 = a4;
      v157[8] = 0;
      v145 = operator new(0x20uLL);
      *a4 = (uint64_t)v145;
      a4[1] = (uint64_t)v145;
      a4[2] = (uint64_t)v145 + 32;
      a4[1] = sub_19C2BDAD4((uint64_t)(a4 + 2), (uint64_t)&v171, (uint64_t)&v173[1], (uint64_t)v145);
      if (v171)
      {
        *(_QWORD *)&v172 = v171;
        operator delete(v171);
      }
      return;
    }
  }
  else if (!a2)
  {
    if ((int)sub_19C2CB68C() <= 1)
    {
      LOBYTE(v171) = 0;
      v9 = sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)"unigram_model.cc", 16);
      sub_19C2A1B24(v9, (uint64_t)"(", 1);
      v10 = (_QWORD *)std::ostream::operator<<();
      v11 = sub_19C2A1B24(v10, (uint64_t)") ", 2);
      v12 = sub_19C2A1B24(v11, (uint64_t)"LOG(", 4);
      v13 = sub_19C2A1B24(v12, (uint64_t)"WARNING", 7);
      v14 = sub_19C2A1B24(v13, (uint64_t)") ", 2);
      sub_19C2A1B24(v14, (uint64_t)"nbest_size >= 1. Returns empty result.", 38);
      sub_19C2A0AD8(&v171);
    }
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return;
  }
  v172 = 0u;
  memset(v173, 0, sizeof(v173));
  v171 = &off_1E3D347C0;
  v174 = 512;
  v168 = 0uLL;
  v169 = 0;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  v15 = sub_19C2B9304(&v171);
  v167 = v15;
  v16 = ((a1[4] - a1[3]) >> 3) - 1;
  *(_QWORD *)v15 = **(_QWORD **)(a1[6] + 24 * (v16 & ~(v16 >> 31)));
  *(_QWORD *)(v15 + 8) = 0;
  *(_DWORD *)(v15 + 20) = 0;
  v17 = a1[16] + a1[17] * a1[18];
  *(_DWORD *)v157 = 0;
  sub_19C2B6348(__p, v17, v157);
  if (a3)
  {
    sub_19C2B7E04(a1, (uint64_t *)v157, a5);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    *(_OWORD *)__p = *(_OWORD *)v157;
    __p[2] = *(void **)&v157[16];
    v18 = sub_19C2CB7E4();
    v19 = sub_19C2B67A8(v18);
    v20 = logf((float)((float)((float)v19 * 2.3283e-10) + 0.0) + 0.0000001);
    v21 = -logf(-v20);
  }
  else
  {
    sub_19C2B7AD8(a1, (uint64_t)v165);
    if (v165[0])
    {
      v165[1] = v165[0];
      operator delete(v165[0]);
    }
    v21 = *(float *)(*(_QWORD *)v15 + 36);
  }
  *(float *)(v15 + 16) = v21;
  sub_19C2B9470((uint64_t *)&v168, &v167);
  v146 = 0;
  v147 = 0;
  if (10 * (int)a2 >= 512)
    v22 = 512;
  else
    v22 = 10 * a2;
  if (v22 <= 1)
    v23 = 1;
  else
    v23 = v22;
  v148 = v23;
  while (1)
  {
    v24 = v168;
    if ((_QWORD)v168 == *((_QWORD *)&v168 + 1))
      break;
    v25 = *(uint64_t **)v168;
    if ((uint64_t)(*((_QWORD *)&v168 + 1) - v168) >= 9)
    {
      v26 = 0;
      v27 = (uint64_t)(*((_QWORD *)&v168 + 1) - v168) >> 3;
      v28 = (_QWORD *)v168;
      do
      {
        v29 = v28;
        v28 += v26 + 1;
        v30 = 2 * v26;
        v26 = (2 * v26) | 1;
        v31 = v30 + 2;
        if (v31 < v27 && *(float *)(*v28 + 16) < *(float *)(v28[1] + 16))
        {
          ++v28;
          v26 = v31;
        }
        *v29 = *v28;
      }
      while (v26 <= (uint64_t)((unint64_t)(v27 - 2) >> 1));
      if (v28 == (_QWORD *)(*((_QWORD *)&v24 + 1) - 8))
      {
        *v28 = v25;
      }
      else
      {
        *v28 = **((_QWORD **)&v24 + 1);
        **((_QWORD **)&v24 + 1) = v25;
        sub_19C2BDBE4(v24, (uint64_t)(v28 + 1), (uint64_t)((uint64_t)v28 - v24 + 8) >> 3);
      }
    }
    *((_QWORD *)&v168 + 1) -= 8;
    v32 = *v25;
    v33 = (_QWORD **)a1[9];
    if (*v25 == **v33)
    {
      sub_19C2B9570(a4, ((a4[1] - *a4) >> 5) + 1);
      for (i = (_QWORD *)v25[1]; i[1]; i = (_QWORD *)i[1])
      {
        v35 = a4[1];
        v36 = *(_QWORD **)(v35 - 24);
        v37 = *(_QWORD *)(v35 - 16);
        if ((unint64_t)v36 >= v37)
        {
          v39 = *(_QWORD *)(v35 - 32);
          v40 = ((uint64_t)v36 - v39) >> 3;
          if ((unint64_t)(v40 + 1) >> 61)
            sub_19C2A18E8();
          v41 = v37 - v39;
          v42 = v41 >> 2;
          if (v41 >> 2 <= (unint64_t)(v40 + 1))
            v42 = v40 + 1;
          if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF8)
            v43 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v43 = v42;
          if (v43)
            v44 = (char *)sub_19C2A1FC0(v35 - 16, v43);
          else
            v44 = 0;
          v45 = &v44[8 * v40];
          *(_QWORD *)v45 = *i;
          v38 = v45 + 8;
          v47 = *(char **)(v35 - 32);
          v46 = *(char **)(v35 - 24);
          if (v46 != v47)
          {
            do
            {
              v48 = *((_QWORD *)v46 - 1);
              v46 -= 8;
              *((_QWORD *)v45 - 1) = v48;
              v45 -= 8;
            }
            while (v46 != v47);
            v46 = *(char **)(v35 - 32);
          }
          *(_QWORD *)(v35 - 32) = v45;
          *(_QWORD *)(v35 - 24) = v38;
          *(_QWORD *)(v35 - 16) = &v44[8 * v43];
          if (v46)
            operator delete(v46);
        }
        else
        {
          *v36 = *i;
          v38 = v36 + 1;
        }
        *(_QWORD *)(v35 - 24) = v38;
      }
      v49 = a4[1];
      *(_DWORD *)(v49 - 8) = *((_DWORD *)v25 + 4);
      if (a2 == (v49 - *a4) >> 5)
        break;
    }
    else
    {
      v50 = (int)(v33[3 * *(int *)(v32 + 16) + 1] - v33[3 * *(int *)(v32 + 16)]);
      *(_DWORD *)v157 = 0;
      sub_19C2B6348(v164, v50, v157);
      *(_DWORD *)v157 = 0;
      sub_19C2B6348(v163, v50, v157);
      *(_QWORD *)v157 = 0;
      sub_19C2BDEB4(&v161, v50, v157);
      v51 = *(_DWORD *)(v32 + 16);
      v52 = a1[9];
      if (a3)
      {
        v53 = *(_QWORD *)(v52 + 24 * v51);
        v54 = -100000000.0;
        if (*(_QWORD *)(v52 + 24 * v51 + 8) != v53)
        {
          v55 = 0;
          v56 = *((float *)__p[0] + *(unsigned int *)(v32 + 24));
          v54 = -100000000.0;
          do
          {
            v57 = (float)((float)(*((float *)v25 + 5)
                                + *((float *)__p[0] + *(unsigned int *)(*(_QWORD *)(v53 + 8 * v55) + 24)))
                        + (float)(a5 * *(float *)(*(_QWORD *)(v53 + 8 * v55) + 32)))
                - v56;
            *((float *)v164[0] + v55) = v57;
            v58 = sub_19C2CB7E4();
            v59 = sub_19C2B67A8(v58);
            v60 = logf((float)((float)((float)v59 * 2.3283e-10) + 0.0) + 0.0000001);
            v61 = v57 - logf(-v60);
            *((float *)v163[0] + v55) = v61;
            if (v61 > v54)
              v54 = v61;
            ++v55;
            v62 = *(_DWORD *)(v32 + 16);
            v52 = a1[9];
            v53 = *(_QWORD *)(v52 + 24 * v62);
          }
          while (v55 < (*(_QWORD *)(v52 + 24 * v62 + 8) - v53) >> 3);
          v51 = *(_DWORD *)(v32 + 16);
        }
        v63 = (double *)v161;
        if (v162 != v161)
        {
          v64 = *((float *)v25 + 4);
          v65 = (float *)v163[0];
          if ((unint64_t)((v162 - (_BYTE *)v161) >> 3) <= 1)
            v5 = 1;
          else
            v5 = (v162 - (_BYTE *)v161) >> 3;
          do
          {
            v66 = *v65++;
            v67 = expf(v66 - v54);
            v68 = (float)(v64 - v66) + log1pf(-v67);
            v69 = v64 - fmaxf(v68, 0.0);
            v70 = expf(-fabsf(v68));
            *v63++ = (float)(v69 - log1pf(v70));
            --v5;
          }
          while (v5);
        }
      }
      v71 = *(_QWORD *)(v52 + 24 * v51);
      if (*(_QWORD *)(v52 + 24 * v51 + 8) != v71)
      {
        v72 = 0;
        do
        {
          v73 = *(_QWORD *)(v71 + 8 * v72);
          v74 = sub_19C2B9304(&v171);
          *(_QWORD *)v157 = v74;
          *(_QWORD *)v74 = v73;
          if (a3)
          {
            *(_DWORD *)(v74 + 20) = *((_DWORD *)v164[0] + v72);
            v75 = *((double *)v161 + v72);
          }
          else
          {
            *(float *)(v74 + 20) = *(float *)(v73 + 32) + *((float *)v25 + 5);
            v75 = *(float *)(v73 + 36) + *((float *)v25 + 5);
          }
          *(float *)(v74 + 16) = v75;
          *(_QWORD *)(v74 + 8) = v25;
          sub_19C2B9470((uint64_t *)&v168, v157);
          ++v72;
          v71 = *(_QWORD *)(a1[9] + 24 * *(int *)(v32 + 16));
        }
        while (v72 < (*(_QWORD *)(a1[9] + 24 * *(int *)(v32 + 16) + 8) - v71) >> 3);
      }
      if (!(((unint64_t)(v173[1] + v173[2] * v174) < 0x3B9ACA00) | v147 & 1))
      {
        if ((int)sub_19C2CB68C() <= 1)
        {
          v157[0] = 0;
          v76 = sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)"unigram_model.cc", 16);
          sub_19C2A1B24(v76, (uint64_t)"(", 1);
          v77 = (_QWORD *)std::ostream::operator<<();
          v78 = sub_19C2A1B24(v77, (uint64_t)") ", 2);
          v79 = sub_19C2A1B24(v78, (uint64_t)"LOG(", 4);
          v80 = sub_19C2A1B24(v79, (uint64_t)"WARNING", 7);
          v81 = sub_19C2A1B24(v80, (uint64_t)") ", 2);
          sub_19C2A1B24(v81, (uint64_t)"Allocator size exceeds ", 23);
          v82 = (_QWORD *)std::ostream::operator<<();
          sub_19C2A1B24(v82, (uint64_t)" with an example of length ", 27);
          std::ostream::operator<<();
          sub_19C2A0AD8(v157);
        }
        v147 = 1;
      }
      v83 = *((_QWORD *)&v168 + 1);
      v84 = (void *)v168;
      if (*((_QWORD *)&v168 + 1) - (_QWORD)v168 >= 0x13879uLL)
      {
        v159 = 0uLL;
        v160 = 0;
        memset(&v157[8], 0, 40);
        *(_QWORD *)v157 = &off_1E3D347C0;
        v158 = 512;
        *(_OWORD *)v154 = 0u;
        v155 = 0u;
        v156 = 1.0;
        ++v146;
        if ((int)sub_19C2CB68C() <= 1)
        {
          LOBYTE(v170) = 0;
          v85 = sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)"unigram_model.cc", 16);
          sub_19C2A1B24(v85, (uint64_t)"(", 1);
          v86 = (_QWORD *)std::ostream::operator<<();
          v87 = sub_19C2A1B24(v86, (uint64_t)") ", 2);
          v88 = sub_19C2A1B24(v87, (uint64_t)"LOG(", 4);
          v89 = sub_19C2A1B24(v88, (uint64_t)"WARNING", 7);
          v90 = sub_19C2A1B24(v89, (uint64_t)") ", 2);
          sub_19C2A1B24(v90, (uint64_t)"Too big agenda size ", 20);
          v91 = (_QWORD *)std::ostream::operator<<();
          sub_19C2A1B24(v91, (uint64_t)". Shrinking (round ", 19);
          v92 = (_QWORD *)std::ostream::operator<<();
          sub_19C2A1B24(v92, (uint64_t)") down to ", 10);
          v93 = (_QWORD *)std::ostream::operator<<();
          sub_19C2A1B24(v93, (uint64_t)".", 1);
          sub_19C2A0AD8(&v170);
        }
        if (10 * (int)a2 >= 1)
        {
          v94 = 0;
          while (1)
          {
            v149 = (_QWORD *)v168;
            v150 = v83;
            v95 = *(_QWORD *)v168;
            v153 = 0;
            v170 = 0;
            if (!v95)
              goto LABEL_181;
            v96 = &v170;
            v97 = (unint64_t)v154[1];
            do
            {
              v98 = 0x9DDFEA08EB382D69 * (((8 * v95) + 8) ^ HIDWORD(v95));
              v99 = 0x9DDFEA08EB382D69 * (HIDWORD(v95) ^ (v98 >> 47) ^ v98);
              v100 = 0x9DDFEA08EB382D69 * (v99 ^ (v99 >> 47));
              if (v97)
              {
                v101 = (uint8x8_t)vcnt_s8((int8x8_t)v97);
                v101.i16[0] = vaddlv_u8(v101);
                if (v101.u32[0] > 1uLL)
                {
                  v102 = 0x9DDFEA08EB382D69 * (v99 ^ (v99 >> 47));
                  if (v100 >= v97)
                    v102 = v100 % v97;
                }
                else
                {
                  v102 = v100 & (v97 - 1);
                }
                v103 = (_QWORD *)*((_QWORD *)v154[0] + v102);
                if (v103)
                {
                  for (j = (_QWORD *)*v103; j; j = (_QWORD *)*j)
                  {
                    v105 = j[1];
                    if (v105 == v100)
                    {
                      if (j[2] == v95)
                      {
                        *v96 = j[3];
                        goto LABEL_181;
                      }
                    }
                    else
                    {
                      if (v101.u32[0] > 1uLL)
                      {
                        if (v105 >= v97)
                          v105 %= v97;
                      }
                      else
                      {
                        v105 &= v97 - 1;
                      }
                      if (v105 != v102)
                        break;
                    }
                  }
                }
              }
              v106 = sub_19C2B9304(v157);
              v107 = *(_OWORD *)v95;
              *(_QWORD *)(v106 + 16) = *(_QWORD *)(v95 + 16);
              *(_OWORD *)v106 = v107;
              *v96 = v106;
              v97 = (unint64_t)v154[1];
              if (v154[1])
              {
                v108 = (uint8x8_t)vcnt_s8((int8x8_t)v154[1]);
                v108.i16[0] = vaddlv_u8(v108);
                if (v108.u32[0] > 1uLL)
                {
                  v5 = v100;
                  if ((void *)v100 >= v154[1])
                    v5 = v100 % (unint64_t)v154[1];
                }
                else
                {
                  v5 = ((unint64_t)v154[1] - 1) & v100;
                }
                v109 = (_QWORD *)*((_QWORD *)v154[0] + v5);
                if (v109)
                {
                  for (k = (_QWORD *)*v109; k; k = (_QWORD *)*k)
                  {
                    v111 = k[1];
                    if (v111 == v100)
                    {
                      if (k[2] == v95)
                        goto LABEL_170;
                    }
                    else
                    {
                      if (v108.u32[0] > 1uLL)
                      {
                        if ((void *)v111 >= v154[1])
                          v111 %= (unint64_t)v154[1];
                      }
                      else
                      {
                        v111 &= (unint64_t)v154[1] - 1;
                      }
                      if (v111 != v5)
                        break;
                    }
                  }
                }
              }
              v112 = operator new(0x20uLL);
              *v112 = 0;
              v112[1] = v100;
              v112[2] = v95;
              v112[3] = v106;
              v113 = (float)(unint64_t)(*((_QWORD *)&v155 + 1) + 1);
              if (!v97 || (float)(v156 * (float)v97) < v113)
              {
                v114 = (v97 & (v97 - 1)) == 0;
                if (v97 < 3)
                  v114 = 0;
                v115 = (2 * v97) | !v114;
                v116 = vcvtps_u32_f32(v113 / v156);
                if (v115 <= v116)
                  prime = (int8x8_t)v116;
                else
                  prime = (int8x8_t)v115;
                if (*(_QWORD *)&prime == 1)
                {
                  prime = (int8x8_t)2;
                }
                else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
                {
                  prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
                  v97 = (unint64_t)v154[1];
                }
                if (*(_QWORD *)&prime <= v97)
                {
                  if (*(_QWORD *)&prime < v97)
                  {
                    v124 = vcvtps_u32_f32((float)*((unint64_t *)&v155 + 1) / v156);
                    if (v97 < 3
                      || (v125 = (uint8x8_t)vcnt_s8((int8x8_t)v97), v125.i16[0] = vaddlv_u8(v125), v125.u32[0] > 1uLL))
                    {
                      v124 = std::__next_prime(v124);
                    }
                    else
                    {
                      v126 = 1 << -(char)__clz(v124 - 1);
                      if (v124 >= 2)
                        v124 = v126;
                    }
                    if (*(_QWORD *)&prime <= v124)
                      prime = (int8x8_t)v124;
                    if (*(_QWORD *)&prime >= v97)
                    {
                      v97 = (unint64_t)v154[1];
                    }
                    else
                    {
                      if (prime)
                        goto LABEL_126;
                      v132 = v154[0];
                      v154[0] = 0;
                      if (v132)
                        operator delete(v132);
                      v97 = 0;
                      v154[1] = 0;
                    }
                  }
                }
                else
                {
LABEL_126:
                  if (*(_QWORD *)&prime >> 61)
                    sub_19C2A143C();
                  v118 = operator new(8 * *(_QWORD *)&prime);
                  v119 = v154[0];
                  v154[0] = v118;
                  if (v119)
                    operator delete(v119);
                  v120 = 0;
                  v154[1] = (void *)prime;
                  do
                    *((_QWORD *)v154[0] + v120++) = 0;
                  while (*(_QWORD *)&prime != v120);
                  v121 = (_QWORD **)v155;
                  if ((_QWORD)v155)
                  {
                    v122 = *(_QWORD *)(v155 + 8);
                    v123 = (uint8x8_t)vcnt_s8(prime);
                    v123.i16[0] = vaddlv_u8(v123);
                    if (v123.u32[0] > 1uLL)
                    {
                      if (v122 >= *(_QWORD *)&prime)
                        v122 %= *(_QWORD *)&prime;
                    }
                    else
                    {
                      v122 &= *(_QWORD *)&prime - 1;
                    }
                    *((_QWORD *)v154[0] + v122) = &v155;
                    for (m = *v121; m; v122 = v128)
                    {
                      v128 = m[1];
                      if (v123.u32[0] > 1uLL)
                      {
                        if (v128 >= *(_QWORD *)&prime)
                          v128 %= *(_QWORD *)&prime;
                      }
                      else
                      {
                        v128 &= *(_QWORD *)&prime - 1;
                      }
                      if (v128 != v122)
                      {
                        if (!*((_QWORD *)v154[0] + v128))
                        {
                          *((_QWORD *)v154[0] + v128) = v121;
                          goto LABEL_151;
                        }
                        *v121 = (_QWORD *)*m;
                        *m = **((_QWORD **)v154[0] + v128);
                        **((_QWORD **)v154[0] + v128) = m;
                        m = v121;
                      }
                      v128 = v122;
LABEL_151:
                      v121 = (_QWORD **)m;
                      m = (_QWORD *)*m;
                    }
                  }
                  v97 = (unint64_t)prime;
                }
                if ((v97 & (v97 - 1)) != 0)
                {
                  if (v100 >= v97)
                    v5 = v100 % v97;
                  else
                    v5 = v100;
                }
                else
                {
                  v5 = (v97 - 1) & v100;
                }
              }
              v129 = v154[0];
              v130 = (_QWORD *)*((_QWORD *)v154[0] + v5);
              if (v130)
              {
                *v112 = *v130;
LABEL_168:
                *v130 = v112;
                goto LABEL_169;
              }
              *v112 = v155;
              *(_QWORD *)&v155 = v112;
              v129[v5] = &v155;
              if (*v112)
              {
                v131 = *(_QWORD *)(*v112 + 8);
                if ((v97 & (v97 - 1)) != 0)
                {
                  if (v131 >= v97)
                    v131 %= v97;
                }
                else
                {
                  v131 &= v97 - 1;
                }
                v130 = (char *)v154[0] + 8 * v131;
                goto LABEL_168;
              }
LABEL_169:
              ++*((_QWORD *)&v155 + 1);
LABEL_170:
              v95 = *(_QWORD *)(v95 + 8);
              v96 = (uint64_t *)(v106 + 8);
            }
            while (v95);
LABEL_181:
            v153 = v170;
            sub_19C2B9470((uint64_t *)&v159, &v153);
            if (v150 - (uint64_t)v149 >= 9)
            {
              v133 = 0;
              v134 = (v150 - (uint64_t)v149) >> 3;
              v135 = *v149;
              v136 = v149;
              do
              {
                v137 = v136;
                v136 += v133 + 1;
                v138 = 2 * v133;
                v133 = (2 * v133) | 1;
                v139 = v138 + 2;
                if (v139 < v134 && *(float *)(*v136 + 16) < *(float *)(v136[1] + 16))
                {
                  ++v136;
                  v133 = v139;
                }
                *v137 = *v136;
              }
              while (v133 <= (uint64_t)((unint64_t)(v134 - 2) >> 1));
              v140 = (_QWORD *)(v150 - 8);
              if (v136 == (_QWORD *)(v150 - 8))
              {
                *v136 = v135;
              }
              else
              {
                *v136 = *v140;
                *v140 = v135;
                sub_19C2BDBE4((uint64_t)v149, (uint64_t)(v136 + 1), v136 + 1 - v149);
              }
            }
            v83 = *((_QWORD *)&v168 + 1) - 8;
            *((_QWORD *)&v168 + 1) -= 8;
            if (++v94 == v148)
            {
              v84 = (void *)v168;
              break;
            }
          }
        }
        if (v84)
        {
          *((_QWORD *)&v168 + 1) = v84;
          operator delete(v84);
        }
        v168 = v159;
        v169 = v160;
        v141 = v172;
        v172 = *(_OWORD *)&v157[8];
        *(_OWORD *)&v157[8] = v141;
        v142 = *(_QWORD *)&v157[24];
        v143 = v174;
        *(_QWORD *)&v157[24] = v173[0];
        v144 = *(_OWORD *)&v173[1];
        *(_OWORD *)&v173[1] = *(_OWORD *)&v157[32];
        *(_OWORD *)&v157[32] = v144;
        v173[0] = v142;
        v174 = v158;
        v158 = v143;
        sub_19C2B95F8((uint64_t)v154);
        sub_19C2B9640(v157);
      }
      if (v161)
      {
        v162 = v161;
        operator delete(v161);
      }
      if (v163[0])
      {
        v163[1] = v163[0];
        operator delete(v163[0]);
      }
      if (v164[0])
      {
        v164[1] = v164[0];
        operator delete(v164[0]);
      }
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if ((_QWORD)v168)
    operator delete((void *)v168);
  sub_19C2B9640(&v171);
}

void sub_19C2B9194(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57)
{
  uint64_t v57;
  void *v59;

  sub_19C2B95F8((uint64_t)&a21);
  sub_19C2B9640(&a27);
  if (__p)
  {
    a41 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a43)
  {
    a44 = (uint64_t)a43;
    operator delete(a43);
  }
  if (a46)
  {
    a47 = (uint64_t)a46;
    operator delete(a46);
  }
  if (a53)
  {
    a54 = (uint64_t)a53;
    operator delete(a53);
  }
  v59 = a57;
  sub_19C2A19C0((void ***)&a27);
  if (v59)
    operator delete(v59);
  sub_19C2B9640((_QWORD *)(v57 - 224));
  _Unwind_Resume(a1);
}

uint64_t sub_19C2B9304(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  void *v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t result;

  v2 = a1[5];
  v3 = a1[6];
  v4 = a1[4];
  if (v4 >= v3)
  {
    v4 = 0;
    ++v2;
    a1[4] = 0;
    a1[5] = v2;
  }
  v5 = a1[1];
  if (v2 == (a1[2] - v5) >> 3)
  {
    is_mul_ok(v3, 0x18uLL);
    v6 = (void *)operator new[]();
    bzero(v6, 24 * a1[6]);
    v8 = (_QWORD *)a1[2];
    v7 = a1[3];
    if ((unint64_t)v8 >= v7)
    {
      v10 = (_QWORD *)a1[1];
      v11 = v8 - v10;
      v12 = v11 + 1;
      if ((unint64_t)(v11 + 1) >> 61)
        sub_19C2A18E8();
      v13 = v7 - (_QWORD)v10;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          sub_19C2A143C();
        v15 = (char *)operator new(8 * v14);
      }
      else
      {
        v15 = 0;
      }
      v16 = &v15[8 * v11];
      *(_QWORD *)v16 = v6;
      v9 = v16 + 8;
      if (v8 != v10)
      {
        do
        {
          v17 = *--v8;
          *((_QWORD *)v16 - 1) = v17;
          v16 -= 8;
        }
        while (v8 != v10);
        v8 = (_QWORD *)a1[1];
      }
      a1[1] = v16;
      a1[2] = v9;
      a1[3] = &v15[8 * v14];
      if (v8)
        operator delete(v8);
    }
    else
    {
      *v8 = v6;
      v9 = v8 + 1;
    }
    a1[2] = v9;
    v5 = a1[1];
    v4 = a1[4];
    v2 = a1[5];
  }
  result = *(_QWORD *)(v5 + 8 * v2) + 24 * v4;
  a1[4] = v4 + 1;
  return result;
}

uint64_t sub_19C2B9470(uint64_t *a1, _QWORD *a2)
{
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;

  v5 = (_QWORD *)a1[1];
  v4 = a1[2];
  if ((unint64_t)v5 >= v4)
  {
    v7 = *a1;
    v8 = ((uint64_t)v5 - *a1) >> 3;
    v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 61)
      sub_19C2A18E8();
    v10 = v4 - v7;
    if (v10 >> 2 > v9)
      v9 = v10 >> 2;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 >> 61)
        sub_19C2A143C();
      v12 = (char *)operator new(8 * v11);
    }
    else
    {
      v12 = 0;
    }
    v13 = &v12[8 * v8];
    *(_QWORD *)v13 = *a2;
    v6 = (uint64_t)(v13 + 8);
    if (v5 != (_QWORD *)v7)
    {
      do
      {
        v14 = *--v5;
        *((_QWORD *)v13 - 1) = v14;
        v13 -= 8;
      }
      while (v5 != (_QWORD *)v7);
      v5 = (_QWORD *)*a1;
    }
    *a1 = (uint64_t)v13;
    a1[1] = v6;
    a1[2] = (uint64_t)&v12[8 * v11];
    if (v5)
      operator delete(v5);
  }
  else
  {
    *v5 = *a2;
    v6 = (uint64_t)(v5 + 1);
  }
  a1[1] = v6;
  return sub_19C2BDBE4(*a1, v6, (v6 - *a1) >> 3);
}

void sub_19C2B9570(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;

  v3 = a1[1];
  v4 = (v3 - *a1) >> 5;
  if (a2 <= v4)
  {
    if (a2 < v4)
    {
      v5 = *a1 + 32 * a2;
      if (v3 != v5)
      {
        v6 = a1[1];
        do
        {
          v8 = *(void **)(v6 - 32);
          v6 -= 32;
          v7 = v8;
          if (v8)
          {
            *(_QWORD *)(v3 - 24) = v7;
            operator delete(v7);
          }
          v3 = v6;
        }
        while (v6 != v5);
      }
      a1[1] = v5;
    }
  }
  else
  {
    sub_19C2BDC40(a1, a2 - v4);
  }
}

uint64_t sub_19C2B95F8(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

_QWORD *sub_19C2B9640(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  *a1 = &off_1E3D347C0;
  v2 = (_QWORD *)a1[1];
  v3 = (_QWORD *)a1[2];
  if (v2 != v3)
  {
    do
    {
      if (*v2)
        MEMORY[0x1A1AD3538](*v2, 0x1020C8062D53EE8);
      ++v2;
    }
    while (v2 != v3);
    v2 = (_QWORD *)a1[1];
  }
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_19C2B96BC(_QWORD *a1@<X0>, void **a2@<X8>, float a3@<S0>)
{
  unint64_t v6;
  int v7;
  uint64_t v8;
  float v9;
  float *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  float *v14;
  float v15;
  float *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  float *v22;
  void *v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  unint64_t v41;
  char *v42;
  unint64_t v43;
  uint64_t v44;
  BOOL v45;
  uint64_t v46;
  void *v47[3];
  void *v48[2];
  float *v49;
  void *__p[2];
  float *v51;

  if ((int)(((a1[4] - a1[3]) >> 3) - 1) <= 0)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  else
  {
    v6 = a1[16] + a1[17] * a1[18];
    LODWORD(v48[0]) = 0;
    sub_19C2B6348(__p, v6, v48);
    sub_19C2B7E04(a1, (uint64_t *)v48, a3);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    *(_OWORD *)__p = *(_OWORD *)v48;
    v51 = v49;
    v46 = sub_19C2CB7E4();
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    v48[0] = 0;
    v48[1] = 0;
    v49 = 0;
    v7 = ((a1[4] - a1[3]) >> 3) - 1;
    v8 = **(_QWORD **)(a1[6] + 24 * (v7 & ~(v7 >> 31)));
    v9 = *((float *)__p[0] + *(unsigned int *)(v8 + 24));
    do
    {
      v10 = (float *)v48[0];
      v48[1] = v48[0];
      v11 = (uint64_t *)(a1[9] + 24 * *(unsigned int *)(v8 + 16));
      v13 = *v11;
      v12 = v11[1];
      v14 = (float *)v48[0];
      if (*v11 != v12)
      {
        do
        {
          v15 = exp((float)((float)(*((float *)__p[0] + *(unsigned int *)(*(_QWORD *)v13 + 24))
                                  + (float)(a3 * *(float *)(*(_QWORD *)v13 + 32)))
                          - v9));
          if (v10 >= v49)
          {
            v16 = (float *)v48[0];
            v17 = ((char *)v10 - (char *)v48[0]) >> 2;
            v18 = v17 + 1;
            if ((unint64_t)(v17 + 1) >> 62)
              sub_19C2A18E8();
            v19 = (char *)v49 - (char *)v48[0];
            if (((char *)v49 - (char *)v48[0]) >> 1 > v18)
              v18 = v19 >> 1;
            if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL)
              v20 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v20 = v18;
            if (v20)
            {
              v21 = (char *)sub_19C2A27D8((uint64_t)&v49, v20);
              v16 = (float *)v48[0];
              v10 = (float *)v48[1];
            }
            else
            {
              v21 = 0;
            }
            v22 = (float *)&v21[4 * v17];
            *v22 = v15;
            v23 = v22 + 1;
            while (v10 != v16)
            {
              v24 = *((_DWORD *)v10-- - 1);
              *((_DWORD *)v22-- - 1) = v24;
            }
            v48[0] = v22;
            v48[1] = v23;
            v49 = (float *)&v21[4 * v20];
            if (v16)
              operator delete(v16);
            v10 = (float *)v23;
          }
          else
          {
            *v10++ = v15;
          }
          v48[1] = v10;
          v13 += 8;
        }
        while (v13 != v12);
        v14 = (float *)v48[0];
      }
      sub_19C2B63C8((uint64_t)v47, v14, v10);
      v25 = *(_DWORD *)(v8 + 16);
      v26 = a1[9];
      v8 = *(_QWORD *)(*(_QWORD *)(v26 + 24 * v25) + 8 * (int)sub_19C2B66F4((uint64_t)v47, v46, (double **)v47));
      v27 = **(_QWORD **)a1[9];
      if (v8 != v27)
      {
        v9 = *((float *)__p[0] + *(unsigned int *)(v8 + 24));
        v29 = a2[1];
        v28 = (unint64_t)a2[2];
        if ((unint64_t)v29 >= v28)
        {
          v31 = ((char *)v29 - (_BYTE *)*a2) >> 3;
          if ((unint64_t)(v31 + 1) >> 61)
            sub_19C2A18E8();
          v32 = v28 - (_QWORD)*a2;
          v33 = v32 >> 2;
          if (v32 >> 2 <= (unint64_t)(v31 + 1))
            v33 = v31 + 1;
          if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF8)
            v34 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v34 = v33;
          if (v34)
            v35 = (char *)sub_19C2A1FC0((uint64_t)(a2 + 2), v34);
          else
            v35 = 0;
          v36 = &v35[8 * v31];
          *(_QWORD *)v36 = v8;
          v30 = v36 + 8;
          v38 = (char *)*a2;
          v37 = (char *)a2[1];
          if (v37 != *a2)
          {
            do
            {
              v39 = *((_QWORD *)v37 - 1);
              v37 -= 8;
              *((_QWORD *)v36 - 1) = v39;
              v36 -= 8;
            }
            while (v37 != v38);
            v37 = (char *)*a2;
          }
          *a2 = v36;
          a2[1] = v30;
          a2[2] = &v35[8 * v34];
          if (v37)
            operator delete(v37);
        }
        else
        {
          *v29 = v8;
          v30 = v29 + 1;
        }
        a2[1] = v30;
      }
      if (v47[0])
      {
        v47[1] = v47[0];
        operator delete(v47[0]);
      }
    }
    while (v8 != v27);
    v41 = (unint64_t)*a2;
    v40 = (char *)a2[1];
    if (*a2 != v40)
    {
      v42 = v40 - 8;
      if ((unint64_t)v42 > v41)
      {
        v43 = v41 + 8;
        do
        {
          v44 = *(_QWORD *)(v43 - 8);
          *(_QWORD *)(v43 - 8) = *(_QWORD *)v42;
          *(_QWORD *)v42 = v44;
          v42 -= 8;
          v45 = v43 >= (unint64_t)v42;
          v43 += 8;
        }
        while (!v45);
      }
    }
    if (v48[0])
    {
      v48[1] = v48[0];
      operator delete(v48[0]);
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
}

void sub_19C2B9A70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19C2B9ADC(uint64_t a1, _QWORD *a2)
{
  float v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  _BYTE *v10;
  char *v11;
  unint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  char *v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  char *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  BOOL v31;
  unint64_t *v32;
  int v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  float v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  void *__p;
  _BYTE *v46;

  v4 = *(float *)(a1 + 104);
  v5 = ((a2[4] - a2[3]) >> 3) - 1;
  v6 = a2[1];
  v7 = a2[2];
  sub_19C2A5294(&__p, *(int *)(a1 + 92) + 1);
  v42 = v5;
  if ((int)v5 < 1)
    goto LABEL_40;
  v43 = 0;
  v8 = 0;
  v9 = v4 + -10.0;
  v41 = v6 + (int)v7;
  do
  {
    v10 = *(_BYTE **)(a2[3] + 8 * v8);
    v11 = (char *)__p;
    v12 = (v46 - (_BYTE *)__p) >> 4;
    v13 = *(_DWORD **)(a1 + 40);
    v14 = (*v13 >> 10 << ((*v13 >> 6) & 8));
    if ((v41 - (_QWORD)v10) << 32)
    {
      v15 = 0;
      v16 = 0;
      do
      {
        v17 = v10[v15];
        v18 = v14 ^ v17;
        v19 = v13[v18];
        if ((v19 & 0x800000FF) != (_DWORD)v17)
          break;
        v14 = v18 ^ (v19 >> 10 << ((v19 >> 6) & 8));
        if ((v19 & 0x100) != 0)
        {
          if (v16 < v12)
          {
            v20 = &v11[16 * v16];
            *(_DWORD *)v20 = v13[v14] & 0x7FFFFFFF;
            *((_QWORD *)v20 + 1) = v15 + 1;
          }
          ++v16;
        }
        ++v15;
      }
      while ((_DWORD)v41 - (_DWORD)v10 != v15);
    }
    else
    {
      v21 = *v10;
      if (*v10)
      {
        v16 = 0;
        v22 = 1;
        do
        {
          v23 = v14 ^ v21;
          v24 = v13[v23];
          if ((v24 & 0x800000FF) != v21)
            break;
          v14 = v23 ^ (v24 >> 10 << ((v24 >> 6) & 8));
          if ((v24 & 0x100) != 0)
          {
            if (v16 < v12)
            {
              v25 = &v11[16 * v16];
              *(_DWORD *)v25 = v13[v14] & 0x7FFFFFFF;
              *((_QWORD *)v25 + 1) = v22;
            }
            ++v16;
          }
          v21 = v10[v22++];
        }
        while (v21);
      }
      else
      {
        v16 = 0;
      }
    }
    if (v16 >= v12)
    {
      v44 = 1;
      v26 = sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)"unigram_model.cc", 16);
      sub_19C2A1B24(v26, (uint64_t)"(", 1);
      v27 = (_QWORD *)std::ostream::operator<<();
      v28 = sub_19C2A1B24(v27, (uint64_t)") [", 3);
      v29 = sub_19C2A1B24(v28, (uint64_t)"(num_nodes) < (trie_results.size())", 35);
      sub_19C2A1B24(v29, (uint64_t)"] ", 2);
      sub_19C2A0AD8(&v44);
    }
    if (!v16)
    {
LABEL_38:
      v40 = sub_19C2B78B4((uint64_t)a2, v8, 1);
      *(_DWORD *)(v40 + 28) = *(_DWORD *)(a1 + 88);
      *(float *)(v40 + 32) = v9;
      goto LABEL_39;
    }
    v30 = 0;
    v31 = 0;
    do
    {
      while (1)
      {
        v32 = (unint64_t *)(a2[3] + v43);
        v33 = -1;
        do
        {
          v34 = *v32++;
          ++v33;
        }
        while (v34 < (unint64_t)&v10[*((_QWORD *)__p + 2 * v30 + 1)]);
        v35 = *((unsigned int *)__p + 4 * v30);
        if (((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 128))(*(_QWORD *)(a1 + 8), v35) & 1) != 0)
          break;
        v36 = v8;
        v37 = sub_19C2B78B4((uint64_t)a2, v8, v33);
        *(_DWORD *)(v37 + 28) = v35;
        if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 136))(*(_QWORD *)(a1 + 8), v35))
          v38 = (float)(*(float *)(a1 + 108) * (float)v33) + -0.1;
        else
          v38 = (*(float (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 96))(*(_QWORD *)(a1 + 8), v35);
        v39 = v38;
        *(float *)(v37 + 32) = v39;
        if (!v31)
        {
          v31 = *(_DWORD *)(v37 + 20) == 1;
          v8 = v36;
          break;
        }
        ++v30;
        v31 = 1;
        v8 = v36;
        if (v30 == v16)
          goto LABEL_39;
      }
      ++v30;
    }
    while (v30 != v16);
    if (!v31)
      goto LABEL_38;
LABEL_39:
    ++v8;
    v43 += 8;
  }
  while (v8 != v42);
LABEL_40:
  if (__p)
  {
    v46 = __p;
    operator delete(__p);
  }
}

void sub_19C2B9E64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19C2B9E98(uint64_t a1@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t *a5@<X4>, uint64_t a6@<X8>)
{
  void *v12;
  int v13;
  unsigned int *v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD v20[2];
  void *__p;
  unsigned int *v22;

  (*(void (**)(void **__return_ptr))(*(_QWORD *)a1 + 16))(&__p);
  v12 = __p;
  sub_19C2CD3C8((uint64_t *)&__p);
  if (v12)
  {
    sub_19C2CD5D8(a6, a1 + 96);
  }
  else
  {
    v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 128))(a1);
    sub_19C2BA034(a1 + 24, a2, a3, a4, v13, (uint64_t *)&__p);
    v14 = (unsigned int *)__p;
    v15 = v22;
    if (__p != v22)
    {
      do
      {
        v16 = *v14;
        if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, v16) & 1) == 0
          && ((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 152))(a1, v16) & 1) == 0)
        {
          v20[0] = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 120))(a1, v16);
          v20[1] = v17;
          v18 = a5[1];
          if (v18 >= a5[2])
          {
            v19 = sub_19C2B6848(a5, (uint64_t)v20);
          }
          else
          {
            sub_19C2B6954((_DWORD)a5 + 16, (_BYTE *)a5[1], (uint64_t)v20);
            v19 = v18 + 24;
            a5[1] = v18 + 24;
          }
          a5[1] = v19;
        }
        v14 += 4;
      }
      while (v14 != v15);
    }
    sub_19C2CD5D8(a6, a1 + 96);
    if (__p)
    {
      v22 = (unsigned int *)__p;
      operator delete(__p);
    }
  }
}

void sub_19C2BA004(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19C2BA034(uint64_t a1@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, int a5@<W4>, uint64_t *a6@<X8>)
{
  unint64_t v12;

  if (a4 != -1)
    a5 = a4;
  sub_19C2A5294(a6, a5);
  v12 = sub_19C2BC9D4(a1, a2, *a6, (a6[1] - *a6) >> 4, a3, a4);
  sub_19C2BCCD8((uint64_t)a6, v12);
}

void sub_19C2BA0B0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_19C2BA0CC(uint64_t a1@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  void *v12;
  int v13;
  unsigned int *v14;
  unsigned int *v15;
  uint64_t v16;
  unint64_t v17;
  _DWORD *v18;
  _DWORD *v19;
  _DWORD *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  int v27;
  void *__p;
  unsigned int *v29;

  (*(void (**)(void **__return_ptr))(*(_QWORD *)a1 + 16))(&__p);
  v12 = __p;
  sub_19C2CD3C8((uint64_t *)&__p);
  if (v12)
  {
    sub_19C2CD5D8(a6, a1 + 96);
  }
  else
  {
    v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 128))(a1);
    sub_19C2BA034(a1 + 24, a2, a3, a4, v13, (uint64_t *)&__p);
    v14 = (unsigned int *)__p;
    v15 = v29;
    if (__p != v29)
    {
      do
      {
        v16 = *v14;
        if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, v16) & 1) == 0
          && ((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 152))(a1, v16) & 1) == 0)
        {
          v18 = *(_DWORD **)(a5 + 8);
          v17 = *(_QWORD *)(a5 + 16);
          if ((unint64_t)v18 >= v17)
          {
            v20 = *(_DWORD **)a5;
            v21 = ((uint64_t)v18 - *(_QWORD *)a5) >> 2;
            v22 = v21 + 1;
            if ((unint64_t)(v21 + 1) >> 62)
              sub_19C2A18E8();
            v23 = v17 - (_QWORD)v20;
            if (v23 >> 1 > v22)
              v22 = v23 >> 1;
            if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL)
              v24 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v24 = v22;
            if (v24)
            {
              v25 = (char *)sub_19C2A27D8(a5 + 16, v24);
              v20 = *(_DWORD **)a5;
              v18 = *(_DWORD **)(a5 + 8);
            }
            else
            {
              v25 = 0;
            }
            v26 = &v25[4 * v21];
            *(_DWORD *)v26 = v16;
            v19 = v26 + 4;
            while (v18 != v20)
            {
              v27 = *--v18;
              *((_DWORD *)v26 - 1) = v27;
              v26 -= 4;
            }
            *(_QWORD *)a5 = v26;
            *(_QWORD *)(a5 + 8) = v19;
            *(_QWORD *)(a5 + 16) = &v25[4 * v24];
            if (v20)
              operator delete(v20);
          }
          else
          {
            *v18 = v16;
            v19 = v18 + 1;
          }
          *(_QWORD *)(a5 + 8) = v19;
        }
        v14 += 4;
      }
      while (v14 != v15);
    }
    sub_19C2CD5D8(a6, a1 + 96);
    if (__p)
    {
      v29 = (unsigned int *)__p;
      operator delete(__p);
    }
  }
}

void sub_19C2BA2A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C2BA2C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  float v6;
  float v7;

  v4 = sub_19C2BA3B8(a1);
  *(_QWORD *)(v4 + 104) = 0;
  *(_DWORD *)(v4 + 112) = 0;
  *(_QWORD *)v4 = &off_1E3D34820;
  *(_QWORD *)(v4 + 8) = a2 + 16;
  sub_19C29EC78(v4);
  v5 = 0;
  *(_QWORD *)(a1 + 104) = 0x8000007F7FFFFFLL;
  while (v5 < (*(int (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8)))
  {
    if ((*(unsigned int (**)(_QWORD, unint64_t))(**(_QWORD **)(a1 + 8) + 104))(*(_QWORD *)(a1 + 8), v5))
    {
      v6 = (*(float (**)(_QWORD, unint64_t))(**(_QWORD **)(a1 + 8) + 96))(*(_QWORD *)(a1 + 8), v5);
      if (v6 >= *(float *)(a1 + 104))
        v6 = *(float *)(a1 + 104);
      *(float *)(a1 + 104) = v6;
      v7 = (*(float (**)(_QWORD, unint64_t))(**(_QWORD **)(a1 + 8) + 96))(*(_QWORD *)(a1 + 8), v5);
      if (*(float *)(a1 + 108) >= v7)
        v7 = *(float *)(a1 + 108);
      *(float *)(a1 + 108) = v7;
    }
    ++v5;
  }
  return a1;
}

void sub_19C2BA398(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_19C29E79C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19C2BA3B8(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E3D33DC8;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = &off_1E3D38860;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = &off_1E3D38860;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  sub_19C2CD3C0((_QWORD *)(a1 + 96));
  return a1;
}

void sub_19C2BA424(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  v5 = v2;
  *(_QWORD *)(v1 + 56) = v5;
  *v4 = 0;
  v4[1] = 0;
  v7 = *(_QWORD *)(v1 + 80);
  if (v7)
  {
    MEMORY[0x1A1AD3538](v7, 0x1000C8052888210);
    *(_QWORD *)(v1 + 80) = 0;
  }
  *(_QWORD *)(v1 + 24) = &off_1E3D38860;
  *v3 = 0;
  v3[1] = 0;
  v8 = *(_QWORD *)(v1 + 48);
  if (v8)
  {
    MEMORY[0x1A1AD3538](v8, 0x1000C8052888210);
    *(_QWORD *)(v1 + 48) = 0;
  }
  sub_19C2A1AC8((uint64_t **)(v1 + 16), 0);
  _Unwind_Resume(a1);
}

uint64_t sub_19C2BA49C(uint64_t a1, uint64_t a2, _DWORD *a3, unint64_t a4)
{
  BOOL v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  _DWORD *v11;
  _DWORD *v12;
  uint64_t *v13;
  _DWORD *v14;
  _DWORD *v15;
  _DWORD *v17;

  v7 = a4 > 7;
  if (a4 <= 7)
    v8 = 0;
  else
    v8 = a4 - 8;
  if (v7)
    v9 = (char *)(a3 + 2);
  else
    v9 = "";
  v10 = sub_19C29DAA0(a1, a2, v9, v8);
  *(_DWORD *)(v10 + 104) = 0;
  v11 = (_DWORD *)(v10 + 104);
  *(_QWORD *)v10 = &off_1E3D34820;
  *(_DWORD *)(v10 + 108) = 0;
  v12 = (_DWORD *)(v10 + 108);
  *(_DWORD *)(v10 + 112) = 0;
  v13 = (uint64_t *)(v10 + 96);
  sub_19C2CD5D8(&v17, v10 + 96);
  v14 = v17;
  sub_19C2CD3C8((uint64_t *)&v17);
  if (!v14)
  {
    sub_19C2BA5EC(a3, a4, v11, &v17);
    sub_19C2CD5DC(v13, &v17);
    sub_19C2CD3C8((uint64_t *)&v17);
    (*(void (**)(_DWORD **__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(&v17, a1);
    v15 = v17;
    sub_19C2CD3C8((uint64_t *)&v17);
    if (!v15)
    {
      sub_19C2BA5EC(a3 + 1, a4 - 4, v12, &v17);
      sub_19C2CD5DC(v13, &v17);
      sub_19C2CD3C8((uint64_t *)&v17);
    }
  }
  return a1;
}

void sub_19C2BA5B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_19C2CD3C8((uint64_t *)va);
  sub_19C29E79C(v2);
  _Unwind_Resume(a1);
}

_QWORD *sub_19C2BA5EC@<X0>(_DWORD *a1@<X0>, unint64_t a2@<X1>, _DWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v6;
  unsigned int v7;
  _QWORD v8[11];
  char v9;
  uint64_t v10;

  if (a2 <= 3)
  {
    v7 = 13;
    v6 = (_QWORD *)sub_19C2A09EC((uint64_t)v8);
    sub_19C2A1B24(v6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/util.h", 62);
    sub_19C2A1B24(v8, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_19C2A1B24(v8, (uint64_t)") [", 3);
    sub_19C2A1B24(v8, (uint64_t)"string.size() >= sizeof(T)", 26);
    sub_19C2A1B24(v8, (uint64_t)"] ", 2);
    sub_19C29E5C0(&v7, (uint64_t)a4);
    v8[0] = *MEMORY[0x1E0DE4F60];
    *(_QWORD *)((char *)v8 + *(_QWORD *)(v8[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
    v8[1] = MEMORY[0x1E0DE4FB8] + 16;
    if (v9 < 0)
      operator delete((void *)v8[9]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return (_QWORD *)MEMORY[0x1A1AD34CC](&v10);
  }
  else
  {
    *a3 = *a1;
    return sub_19C2CD3C0(a4);
  }
}

void sub_19C2BA740(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_19C29E64C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19C2BA760(uint64_t a1)
{
  sub_19C29E79C(a1);
  JUMPOUT(0x1A1AD355CLL);
}

void sub_19C2BA784(_DWORD *a1@<X0>, unsigned __int8 *a2@<X1>, unint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  __int128 v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t (**v25)();
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t (**v32)();
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;

  if (a1[28])
  {
    (*(void (**)(uint64_t (***__return_ptr)(), _DWORD *))(*(_QWORD *)a1 + 16))(&v25, a1);
    if (v25)
    {
      sub_19C2CD3C8((uint64_t *)&v25);
LABEL_4:
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      return;
    }
    sub_19C2CD3C8((uint64_t *)&v25);
    if (!a3)
      goto LABEL_4;
    v25 = &off_1E3D34910;
    v26 = 0u;
    v27 = 0u;
    v28 = 0u;
    v29 = 0u;
    v30 = 0u;
    v31 = 0;
    v32 = &off_1E3D347E0;
    v33 = 0u;
    v34 = 0u;
    v35 = 0;
    v36 = 1024;
    sub_19C2B73E4((uint64_t)&v25, a2, a3);
    sub_19C2B9ADC((uint64_t)a1, &v25);
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    sub_19C2B7AD8(&v25, (uint64_t)&v23);
    v8 = v23;
    v9 = v24;
    if (v23 != v24)
    {
      v10 = a4 + 2;
      v11 = (char *)a4[1];
      do
      {
        v12 = *v8;
        if ((unint64_t)v11 >= *v10)
        {
          v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v11[-*a4] >> 3);
          v14 = v13 + 1;
          if (v13 + 1 > 0xAAAAAAAAAAAAAAALL)
            sub_19C2A18E8();
          if (0x5555555555555556 * ((uint64_t)(*v10 - *a4) >> 3) > v14)
            v14 = 0x5555555555555556 * ((uint64_t)(*v10 - *a4) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v10 - *a4) >> 3) >= 0x555555555555555)
            v15 = 0xAAAAAAAAAAAAAAALL;
          else
            v15 = v14;
          v16 = (char *)sub_19C2A18FC((uint64_t)(a4 + 2), v15);
          v18 = &v16[24 * v13];
          *(_OWORD *)v18 = *(_OWORD *)v12;
          *((_DWORD *)v18 + 4) = *(_DWORD *)(v12 + 28);
          v20 = (char *)*a4;
          v19 = (char *)a4[1];
          v21 = v18;
          if (v19 != (char *)*a4)
          {
            do
            {
              v22 = *(_OWORD *)(v19 - 24);
              *((_QWORD *)v21 - 1) = *((_QWORD *)v19 - 1);
              *(_OWORD *)(v21 - 24) = v22;
              v21 -= 24;
              v19 -= 24;
            }
            while (v19 != v20);
            v19 = (char *)*a4;
          }
          v11 = v18 + 24;
          *a4 = v21;
          a4[1] = v18 + 24;
          a4[2] = &v16[24 * v17];
          if (v19)
            operator delete(v19);
        }
        else
        {
          *(_OWORD *)v11 = *(_OWORD *)v12;
          *((_DWORD *)v11 + 4) = *(_DWORD *)(v12 + 28);
          v11 += 24;
        }
        a4[1] = v11;
        ++v8;
      }
      while (v8 != v9);
      v8 = v23;
    }
    if (v8)
    {
      v24 = v8;
      operator delete(v8);
    }
    sub_19C2B7114((uint64_t)&v25);
  }
  else
  {
    sub_19C2BAA40((uint64_t)a1, (uint64_t)a2, a3, a4);
  }
}

void sub_19C2BA9F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  void *v15;

  v15 = *(void **)v13;
  if (*(_QWORD *)v13)
  {
    *(_QWORD *)(v13 + 8) = v15;
    operator delete(v15);
  }
  sub_19C2B7114((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_19C2BAA40(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  float v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float *v12;
  float *v13;
  int v14;
  float v15;
  unint64_t v16;
  float v17;
  int v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int *v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  double v29;
  double v30;
  float v31;
  float *v32;
  int *v33;
  int v34;
  float v35;
  char *v37;
  _QWORD *v38;
  unsigned int v39;
  float *v40;
  unint64_t v41;
  unsigned int *v42;
  int v43;
  uint64_t v44;
  unint64_t v45;
  char **v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  __int128 v56;
  __int128 *v57;
  char *i;
  __int128 v59;
  int v60;
  unint64_t v61;
  char *v62;
  unint64_t v63;
  float *v64;
  _QWORD *v65;
  uint64_t v66;
  __int128 v67;

  (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)a1 + 16))(&v67);
  if ((_QWORD)v67)
  {
    sub_19C2CD3C8((uint64_t *)&v67);
LABEL_3:
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return;
  }
  sub_19C2CD3C8((uint64_t *)&v67);
  if (!a3)
    goto LABEL_3;
  v8 = *(float *)(a1 + 104);
  v9 = (a3 << 32) + 0x100000000;
  v66 = a2;
  if (a3 << 32 == 0xFFFFFFFF00000000)
  {
    v12 = 0;
  }
  else
  {
    if (v9 < 0)
      sub_19C2A18E8();
    v10 = v9 >> 32;
    v11 = 3 * v10;
    v12 = (float *)operator new(12 * v10);
    v13 = v12;
    do
    {
      *(_QWORD *)v13 = 0xFFFFFFFFLL;
      v13[2] = NAN;
      v13 += 3;
    }
    while (v13 != &v12[v11]);
    a2 = v66;
  }
  if ((int)a3 <= 0)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
  else
  {
    v65 = a4;
    v14 = 0;
    v15 = v8 + -10.0;
    v16 = (int)a3;
    v62 = (char *)(v12 + 5);
    v63 = a3;
    v64 = v12;
    v61 = (int)a3;
    do
    {
      v17 = v12[3 * v14 + 1];
      if ((int)a3 - v14 >= asc_19C45F89C[(unint64_t)*(unsigned __int8 *)(a2 + v14) >> 4])
        v18 = asc_19C45F89C[(unint64_t)*(unsigned __int8 *)(a2 + v14) >> 4];
      else
        v18 = a3 - v14;
      if (v16 <= v14)
        goto LABEL_31;
      v19 = 0;
      v20 = 0;
      v21 = 0;
      v22 = a2 + v14;
      v23 = v16 - v14;
      v24 = (int *)&v62[12 * v14];
      do
      {
        v25 = *(_QWORD *)(a1 + 40);
        v26 = *(unsigned __int8 *)(v22 + v19);
        LODWORD(v21) = (*(_DWORD *)(v25 + 4 * v21) >> 10 << ((*(_DWORD *)(v25 + 4 * v21) >> 6) & 8)) ^ v21 ^ v26;
        v27 = *(_DWORD *)(v25 + 4 * v21);
        if ((v27 & 0x800000FF) != v26)
          break;
        if ((v27 & 0x100) != 0)
        {
          v28 = *(_DWORD *)(v25 + 4 * ((v27 >> 10 << ((v27 >> 6) & 8)) ^ v21)) & 0x7FFFFFFF;
          if (((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 128))(*(_QWORD *)(a1 + 8), v28) & 1) == 0)
          {
            if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 136))(*(_QWORD *)(a1 + 8), v28))
            {
              v29 = (float)(*(float *)(a1 + 108) * (float)(unint64_t)(v19 + 1)) + -0.1;
            }
            else
            {
              v29 = (*(float (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 96))(*(_QWORD *)(a1 + 8), v28);
            }
            v30 = v29 + v17;
            if (*v24 == -1 || v30 > *((float *)v24 - 1))
            {
              v31 = v30;
              *((float *)v24 - 1) = v31;
              *v24 = v14;
              *(v24 - 2) = v28;
            }
            v20 |= v18 - 1 == v19;
          }
        }
        ++v19;
        v24 += 3;
      }
      while (v23 != v19);
      LODWORD(a3) = v63;
      v12 = v64;
      a2 = v66;
      v16 = v61;
      if ((v20 & 1) == 0)
      {
LABEL_31:
        v32 = &v12[3 * v18 + 3 * v14];
        v34 = *((_DWORD *)v32 + 2);
        v33 = (int *)(v32 + 2);
        v35 = v15 + v17;
        if (v34 == -1 || v35 > *((float *)v33 - 1))
        {
          *((float *)v33 - 1) = v35;
          *v33 = v14;
          v12[3 * v18 + 3 * v14] = *(float *)(a1 + 88);
        }
      }
      v14 += v18;
    }
    while (v14 < (int)a3);
    v37 = 0;
    v65[2] = 0;
    v38 = v65 + 2;
    *v65 = 0;
    v65[1] = 0;
    v39 = a3;
    do
    {
      v40 = &v12[3 * v39];
      v42 = (unsigned int *)(v40 + 2);
      v41 = *((int *)v40 + 2);
      if (v63 < v41)
        sub_19C2B41E0("string_view::substr");
      v43 = v39 - v41;
      v44 = v66 + v41;
      if (v63 - v41 >= v43)
        v45 = v43;
      else
        v45 = v63 - v41;
      if ((unint64_t)v37 >= *v38)
      {
        v47 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v37[-*v65] >> 3);
        v48 = v47 + 1;
        if (v47 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_19C2A18E8();
        if (0x5555555555555556 * ((uint64_t)(*v38 - *v65) >> 3) > v48)
          v48 = 0x5555555555555556 * ((uint64_t)(*v38 - *v65) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v38 - *v65) >> 3) >= 0x555555555555555)
          v49 = 0xAAAAAAAAAAAAAAALL;
        else
          v49 = v48;
        v50 = (char *)sub_19C2A18FC((uint64_t)v38, v49);
        v52 = &v50[24 * v47];
        *(_QWORD *)v52 = v44;
        *((_QWORD *)v52 + 1) = v45;
        *((float *)v52 + 4) = *v40;
        v46 = (char **)v65;
        v54 = (char *)*v65;
        v53 = (char *)v65[1];
        v55 = v52;
        if (v53 == (char *)*v65)
        {
          v12 = v64;
        }
        else
        {
          v12 = v64;
          do
          {
            v56 = *(_OWORD *)(v53 - 24);
            *((_QWORD *)v55 - 1) = *((_QWORD *)v53 - 1);
            *(_OWORD *)(v55 - 24) = v56;
            v55 -= 24;
            v53 -= 24;
          }
          while (v53 != v54);
          v53 = (char *)*v65;
        }
        v37 = v52 + 24;
        *v65 = v55;
        v65[1] = v52 + 24;
        v65[2] = &v50[24 * v51];
        if (v53)
          operator delete(v53);
      }
      else
      {
        *(_QWORD *)v37 = v44;
        *((_QWORD *)v37 + 1) = v45;
        *((float *)v37 + 4) = *v40;
        v37 += 24;
        v12 = v64;
        v46 = (char **)v65;
      }
      v46[1] = v37;
      v39 = *v42;
    }
    while ((int)*v42 > 0);
    v57 = (__int128 *)*v46;
    if (*v46 != v37)
    {
      for (i = v37 - 24; v57 < (__int128 *)i; i -= 24)
      {
        v67 = *v57;
        v59 = v67;
        *v57 = *(_OWORD *)i;
        *(_OWORD *)i = v59;
        v60 = *((_DWORD *)v57 + 4);
        *((_DWORD *)v57 + 4) = *((_DWORD *)i + 4);
        *((_DWORD *)i + 4) = v60;
        v57 = (__int128 *)((char *)v57 + 24);
      }
    }
  }
  if (v12)
    operator delete(v12);
}

void sub_19C2BAF18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  void *v15;

  v15 = *(void **)a14;
  if (*(_QWORD *)a14)
  {
    *(_QWORD *)(a14 + 8) = v15;
    operator delete(v15);
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19C2BAF5C(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t *a5@<X8>)
{
  char *v10;
  void *v11;
  int v12;
  uint64_t v13;
  char *v14;
  uint64_t i;
  uint64_t *v16;
  uint64_t *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  __int128 v29;
  float *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  void *v35;
  char *v36;
  char *v37;
  __int128 v38;
  void *v39;
  void *__p[13];
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  (*(void (**)(void **__return_ptr))(*(_QWORD *)a1 + 16))(__p);
  if (__p[0])
  {
    sub_19C2CD3C8((uint64_t *)__p);
LABEL_3:
    memset(__p, 0, 24);
    sub_19C2A181C((char *)__p, 0, 0, 0);
    LODWORD(__p[3]) = 0;
    a5[1] = 0;
    a5[2] = 0;
    *a5 = 0;
    *(_QWORD *)&v38 = a5;
    BYTE8(v38) = 0;
    v10 = (char *)operator new(0x20uLL);
    *a5 = (uint64_t)v10;
    a5[1] = (uint64_t)v10;
    a5[2] = (uint64_t)(v10 + 32);
    a5[1] = sub_19C2A1758((uint64_t)(a5 + 2), (uint64_t)__p, (uint64_t)&__p[4], (uint64_t)v10);
    v11 = __p[0];
    if (!__p[0])
      return;
    __p[1] = __p[0];
    goto LABEL_5;
  }
  sub_19C2CD3C8((uint64_t *)__p);
  if (!a3)
    goto LABEL_3;
  if (a4 >= 1024)
    v12 = 1024;
  else
    v12 = a4;
  if (v12 <= 1)
    v13 = 1;
  else
    v13 = v12;
  if (v13 > 1)
  {
    __p[0] = &off_1E3D34910;
    memset(&__p[1], 0, 88);
    __p[12] = &off_1E3D347E0;
    v41 = 0u;
    v42 = 0u;
    v43 = 0;
    v44 = 1024;
    sub_19C2B73E4((uint64_t)__p, a2, a3);
    sub_19C2B9ADC(a1, __p);
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    v34 = a5;
    sub_19C2B8144(__p, v13, 0, (uint64_t *)&v38, 0.0);
    v33 = *((_QWORD *)&v38 + 1);
    for (i = v38; i != v33; i += 32)
    {
      v35 = 0;
      v36 = 0;
      v37 = 0;
      v16 = *(uint64_t **)i;
      v17 = *(uint64_t **)(i + 8);
      if (*(uint64_t **)i != v17)
      {
        v18 = 0;
        do
        {
          v19 = *v16;
          if (v18 >= v37)
          {
            v20 = 0xAAAAAAAAAAAAAAABLL * ((v18 - (_BYTE *)v35) >> 3);
            v21 = v20 + 1;
            if (v20 + 1 > 0xAAAAAAAAAAAAAAALL)
              sub_19C2A18E8();
            if (0x5555555555555556 * ((v37 - (_BYTE *)v35) >> 3) > v21)
              v21 = 0x5555555555555556 * ((v37 - (_BYTE *)v35) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * ((v37 - (_BYTE *)v35) >> 3) >= 0x555555555555555)
              v22 = 0xAAAAAAAAAAAAAAALL;
            else
              v22 = v21;
            v23 = (char *)sub_19C2A18FC((uint64_t)&v37, v22);
            v25 = &v23[24 * v20];
            *(_OWORD *)v25 = *(_OWORD *)v19;
            *((_DWORD *)v25 + 4) = *(_DWORD *)(v19 + 28);
            v27 = (char *)v35;
            v26 = v36;
            v28 = v25;
            if (v36 != v35)
            {
              do
              {
                v29 = *(_OWORD *)(v26 - 24);
                *((_QWORD *)v28 - 1) = *((_QWORD *)v26 - 1);
                *(_OWORD *)(v28 - 24) = v29;
                v28 -= 24;
                v26 -= 24;
              }
              while (v26 != v27);
              v26 = (char *)v35;
            }
            v18 = v25 + 24;
            v35 = v28;
            v36 = v25 + 24;
            v37 = &v23[24 * v24];
            if (v26)
              operator delete(v26);
          }
          else
          {
            *(_OWORD *)v18 = *(_OWORD *)v19;
            *((_DWORD *)v18 + 4) = *(_DWORD *)(v19 + 28);
            v18 += 24;
          }
          v36 = v18;
          ++v16;
        }
        while (v16 != v17);
      }
      v30 = (float *)(i + 24);
      v31 = v34[1];
      if (v31 >= v34[2])
      {
        v32 = sub_19C2BDFA4(v34, (__int128 **)&v35, v30);
      }
      else
      {
        sub_19C2BDF34((uint64_t)v34, (__int128 **)&v35, v30);
        v32 = v31 + 32;
      }
      v34[1] = v32;
      if (v35)
      {
        v36 = (char *)v35;
        operator delete(v35);
      }
    }
    v35 = &v38;
    sub_19C2A19C0((void ***)&v35);
    sub_19C2B7114((uint64_t)__p);
  }
  else
  {
    (*(void (**)(__int128 *__return_ptr, uint64_t, unsigned __int8 *, uint64_t))(*(_QWORD *)a1 + 40))(&v38, a1, a2, a3);
    *(_OWORD *)__p = v38;
    __p[2] = v39;
    v39 = 0;
    v38 = 0uLL;
    LODWORD(__p[3]) = 0;
    a5[1] = 0;
    a5[2] = 0;
    *a5 = 0;
    v35 = a5;
    LOBYTE(v36) = 0;
    v14 = (char *)operator new(0x20uLL);
    *a5 = (uint64_t)v14;
    a5[1] = (uint64_t)v14;
    a5[2] = (uint64_t)(v14 + 32);
    a5[1] = sub_19C2A1758((uint64_t)(a5 + 2), (uint64_t)__p, (uint64_t)&__p[4], (uint64_t)v14);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    v11 = (void *)v38;
    if ((_QWORD)v38)
    {
      *((_QWORD *)&v38 + 1) = v38;
LABEL_5:
      operator delete(v11);
    }
  }
}

void sub_19C2BB368(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  a12 = a11;
  sub_19C2A19C0((void ***)&a12);
  sub_19C2B7114((uint64_t)&__p);
  _Unwind_Resume(a1);
}

uint64_t *sub_19C2BB438@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>, float a5@<S0>)
{
  uint64_t *result;
  _QWORD *v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  __int128 v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t (**v28)();
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  uint64_t (**v35)();
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;

  (*(void (**)(uint64_t (***__return_ptr)()))(*(_QWORD *)a1 + 16))(&v28);
  if (v28)
  {
    result = sub_19C2CD3C8((uint64_t *)&v28);
LABEL_3:
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return result;
  }
  result = sub_19C2CD3C8((uint64_t *)&v28);
  if (!a3)
    goto LABEL_3;
  v28 = &off_1E3D34910;
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  v34 = 0;
  v35 = &off_1E3D347E0;
  v36 = 0u;
  v37 = 0u;
  v38 = 0;
  v39 = 1024;
  sub_19C2B73E4((uint64_t)&v28, a2, a3);
  sub_19C2B9ADC(a1, &v28);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  sub_19C2B96BC(&v28, (void **)&v26, a5);
  v11 = v26;
  v12 = v27;
  if (v26 != v27)
  {
    v13 = 0;
    v14 = a4 + 2;
    do
    {
      v15 = *v11;
      if ((unint64_t)v13 >= *v14)
      {
        v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v13[-*a4] >> 3);
        v17 = v16 + 1;
        if (v16 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_19C2A18E8();
        if (0x5555555555555556 * ((uint64_t)(*v14 - *a4) >> 3) > v17)
          v17 = 0x5555555555555556 * ((uint64_t)(*v14 - *a4) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v14 - *a4) >> 3) >= 0x555555555555555)
          v18 = 0xAAAAAAAAAAAAAAALL;
        else
          v18 = v17;
        v19 = (char *)sub_19C2A18FC((uint64_t)(a4 + 2), v18);
        v21 = &v19[24 * v16];
        *(_OWORD *)v21 = *(_OWORD *)v15;
        *((_DWORD *)v21 + 4) = *(_DWORD *)(v15 + 28);
        v23 = (char *)*a4;
        v22 = (char *)a4[1];
        v24 = v21;
        if (v22 != (char *)*a4)
        {
          do
          {
            v25 = *(_OWORD *)(v22 - 24);
            *((_QWORD *)v24 - 1) = *((_QWORD *)v22 - 1);
            *(_OWORD *)(v24 - 24) = v25;
            v24 -= 24;
            v22 -= 24;
          }
          while (v22 != v23);
          v22 = (char *)*a4;
        }
        v13 = v21 + 24;
        *a4 = v24;
        a4[1] = v21 + 24;
        a4[2] = &v19[24 * v20];
        if (v22)
          operator delete(v22);
      }
      else
      {
        *(_OWORD *)v13 = *(_OWORD *)v15;
        *((_DWORD *)v13 + 4) = *(_DWORD *)(v15 + 28);
        v13 += 24;
      }
      a4[1] = v13;
      ++v11;
    }
    while (v11 != v12);
    v11 = v26;
  }
  if (v11)
  {
    v27 = v11;
    operator delete(v11);
  }
  return (uint64_t *)sub_19C2B7114((uint64_t)&v28);
}

void sub_19C2BB680(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  sub_19C2B7114((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_19C2BB6C4(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, char a5@<W4>, int a6@<W5>, uint64_t *j@<X8>, float a8@<S0>)
{
  uint64_t v14;
  float v16;
  uint64_t *v17;
  uint64_t *v18;
  __int128 *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  __int128 *v27;
  __int128 *v28;
  __int128 *v29;
  __int128 v30;
  char *v31;
  float v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  __int128 *v40;
  __int128 *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  __int128 *v48;
  char *v49;
  uint64_t v50;
  double v51;
  double v52;
  float v53;
  __int128 *v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  __int128 *v62;
  __int128 *v63;
  __int128 *v64;
  __int128 v65;
  char *v66;
  uint64_t v67;
  __int128 *v68;
  __int128 *v69;
  __int128 *v70;
  void *v71;
  void *v72;
  void *v73;
  float v74;
  __int128 *i;
  uint64_t *v76;
  uint64_t *v77;
  char *v78;
  float v79;
  uint64_t v80;
  float v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  char *v88;
  char *v89;
  char *v90;
  __int128 v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  float v96;
  double v97;
  long double v98;
  long double v99;
  double v100;
  float v101;
  uint64_t *v102;
  int v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  unsigned __int8 *v107;
  unsigned __int8 *v108;
  uint64_t v109;
  uint64_t v110;
  __int128 *v111;
  float v112;
  void *__p[13];
  __int128 v114;
  __int128 v115;
  uint64_t v116;
  uint64_t v117;
  double v118;
  double v119;
  __int128 *v120;
  __int128 *v121;
  char *v122;
  void *v123[3];
  void **v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  uint64_t v130;
  uint64_t (**v131)();
  __int128 v132;
  __int128 v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  unint64_t v138;

  v14 = a1;
  (*(void (**)(void ***__return_ptr))(*(_QWORD *)a1 + 16))(&v124);
  if (v124)
  {
    sub_19C2CD3C8((uint64_t *)&v124);
LABEL_3:
    *j = 0;
    j[1] = 0;
    j[2] = 0;
    return;
  }
  sub_19C2CD3C8((uint64_t *)&v124);
  if (!a3)
    goto LABEL_3;
  v136 = 0;
  v137 = 0;
  v138 = 0;
  v124 = (void **)&off_1E3D34910;
  v125 = 0u;
  v126 = 0u;
  v127 = 0u;
  v128 = 0u;
  v129 = 0u;
  v130 = 0;
  v131 = &off_1E3D347E0;
  v132 = 0u;
  v133 = 0u;
  v134 = 0;
  v135 = 1024;
  sub_19C2B73E4((uint64_t)&v124, a2, a3);
  sub_19C2B9ADC(v14, &v124);
  sub_19C2B7E04(&v124, (uint64_t *)v123, a8);
  v16 = *((float *)v123[0]
        + *(unsigned int *)(**(_QWORD **)(*((_QWORD *)&v127 + 1)
                                        + 24
                                        * ((((*((_QWORD *)&v126 + 1) - (_QWORD)v126) >> 3) - 1) & ~((int)(((*((_QWORD *)&v126 + 1) - (_QWORD)v126) >> 3) - 1) >> 31)))
                          + 24));
  if (a6)
  {
    if ((a5 & 1) == 0)
    {
      if ((int)sub_19C2CB68C() <= 2)
      {
        LOBYTE(__p[0]) = 0;
        v34 = sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)"unigram_model.cc", 16);
        sub_19C2A1B24(v34, (uint64_t)"(", 1);
        v35 = (_QWORD *)std::ostream::operator<<();
        v36 = sub_19C2A1B24(v35, (uint64_t)") ", 2);
        v37 = sub_19C2A1B24(v36, (uint64_t)"LOG(", 4);
        v38 = sub_19C2A1B24(v37, (uint64_t)"ERROR", 5);
        v39 = sub_19C2A1B24(v38, (uint64_t)") ", 2);
        sub_19C2A1B24(v39, (uint64_t)"include_best not supported for wor false", 40);
        sub_19C2A0AD8(__p);
      }
      goto LABEL_113;
    }
    v103 = a4;
    v104 = a6;
    v105 = v14;
    v107 = a2;
    v109 = a3;
    v120 = 0;
    v121 = 0;
    v122 = 0;
    sub_19C2B7AD8(&v124, (uint64_t)__p);
    v17 = (uint64_t *)__p[0];
    v18 = (uint64_t *)__p[1];
    if (__p[0] != __p[1])
    {
      v19 = v121;
      do
      {
        v20 = *v17;
        if (v19 >= (__int128 *)v122)
        {
          v21 = 0xAAAAAAAAAAAAAAABLL * (((char *)v19 - (char *)v120) >> 3);
          v22 = v21 + 1;
          if (v21 + 1 > 0xAAAAAAAAAAAAAAALL)
            sub_19C2A18E8();
          if (0x5555555555555556 * ((v122 - (char *)v120) >> 3) > v22)
            v22 = 0x5555555555555556 * ((v122 - (char *)v120) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * ((v122 - (char *)v120) >> 3) >= 0x555555555555555)
            v23 = 0xAAAAAAAAAAAAAAALL;
          else
            v23 = v22;
          v24 = (char *)sub_19C2A18FC((uint64_t)&v122, v23);
          v26 = &v24[24 * v21];
          *(_OWORD *)v26 = *(_OWORD *)v20;
          *((_DWORD *)v26 + 4) = *(_DWORD *)(v20 + 28);
          v28 = v120;
          v27 = v121;
          v29 = (__int128 *)v26;
          if (v121 != v120)
          {
            do
            {
              v30 = *(__int128 *)((char *)v27 - 24);
              *((_QWORD *)v29 - 1) = *((_QWORD *)v27 - 1);
              *(__int128 *)((char *)v29 - 24) = v30;
              v29 = (__int128 *)((char *)v29 - 24);
              v27 = (__int128 *)((char *)v27 - 24);
            }
            while (v27 != v28);
            v27 = v120;
          }
          v19 = (__int128 *)(v26 + 24);
          v120 = v29;
          v121 = (__int128 *)(v26 + 24);
          v122 = &v24[24 * v25];
          if (v27)
            operator delete(v27);
        }
        else
        {
          *v19 = *(_OWORD *)v20;
          *((_DWORD *)v19 + 4) = *(_DWORD *)(v20 + 28);
          v19 = (__int128 *)((char *)v19 + 24);
        }
        v121 = v19;
        ++v17;
      }
      while (v17 != v18);
    }
    v118 = 0.0;
    v31 = v137;
    if ((unint64_t)v137 >= v138)
    {
      v33 = sub_19C2BE200(&v136, &v120, &v118);
      a2 = v107;
      a3 = v109;
    }
    else
    {
      *(_QWORD *)v137 = 0;
      *((_QWORD *)v31 + 1) = 0;
      *((_QWORD *)v31 + 2) = 0;
      sub_19C2A181C(v31, v120, v121, 0xAAAAAAAAAAAAAAABLL * (((char *)v121 - (char *)v120) >> 3));
      a2 = v107;
      a3 = v109;
      v32 = v118;
      *((float *)v31 + 6) = v32;
      v33 = (uint64_t)(v31 + 32);
    }
    a4 = v103;
    v14 = v105;
    a6 = v104;
    v137 = (char *)v33;
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (v120)
    {
      v121 = v120;
      operator delete(v120);
    }
  }
  if ((a5 & 1) != 0)
  {
    sub_19C2B8144(&v124, a4 + 1, 1, (uint64_t *)&v120, a8);
    v102 = j;
    if (a6)
    {
      sub_19C2BE310(&v118, ((char *)v121 - (char *)v120) >> 5);
      v41 = v120;
      v40 = v121;
      if (v121 != v120)
      {
        v42 = 0;
        v43 = 0;
        v44 = 0;
        do
        {
          if (&v41[v42] != (__int128 *)(*(_QWORD *)&v118 + v43))
          {
            sub_19C2BE3B0((char *)(*(_QWORD *)&v118 + v43), *(char **)&v41[v42], *((_QWORD *)&v41[v42] + 1), (uint64_t)(*((_QWORD *)&v41[v42] + 1) - *(_QWORD *)&v41[v42]) >> 3);
            v41 = v120;
            v40 = v121;
          }
          ++v44;
          v43 += 24;
          v42 += 2;
        }
        while (v44 < ((char *)v40 - (char *)v41) >> 5);
      }
      sub_19C2B7AD8(&v124, (uint64_t)__p);
      v45 = sub_19C2BE4B8(*(uint64_t *)&v118, *(uint64_t *)&v119, (uint64_t)__p);
      v46 = (int)(-1431655765 * ((unint64_t)(v45 - *(_QWORD *)&v118) >> 3));
      if (v46 == ((char *)v121 - (char *)v120) >> 5)
      {
        v48 = v121 - 2;
        v47 = (void *)*((_QWORD *)v121 - 4);
        if (v47)
        {
          *((_QWORD *)v121 - 3) = v47;
          operator delete(v47);
        }
      }
      else
      {
        sub_19C2BE524((__n128 *)&v120[2 * v46 + 2], (__n128 *)v121, (uint64_t)&v120[2 * v46]);
        v48 = v68;
        v69 = v121;
        if (v121 != v68)
        {
          v70 = v121;
          do
          {
            v72 = (void *)*((_QWORD *)v70 - 4);
            v70 -= 2;
            v71 = v72;
            if (v72)
            {
              *((_QWORD *)v69 - 3) = v71;
              operator delete(v71);
            }
            v69 = v70;
          }
          while (v70 != v48);
        }
      }
      v121 = v48;
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      __p[0] = &v118;
      sub_19C2B42C4((void ***)__p);
    }
    v73 = (void *)*((_QWORD *)v121 - 4);
    v111 = v121 - 2;
    v74 = *((float *)v121 - 2);
    if (v73)
    {
      *((_QWORD *)v121 - 3) = v73;
      operator delete(v73);
    }
    v121 = v111;
    for (i = v120; i != v111; i += 2)
    {
      memset(__p, 0, 24);
      v76 = *(uint64_t **)i;
      v77 = (uint64_t *)*((_QWORD *)i + 1);
      if (*(uint64_t **)i == v77)
      {
        v79 = 0.0;
      }
      else
      {
        v78 = 0;
        v79 = 0.0;
        do
        {
          v80 = *v76;
          v81 = *(float *)(*v76 + 32);
          if (v78 >= __p[2])
          {
            v82 = 0xAAAAAAAAAAAAAAABLL * ((v78 - (char *)__p[0]) >> 3);
            v83 = v82 + 1;
            if (v82 + 1 > 0xAAAAAAAAAAAAAAALL)
              sub_19C2A18E8();
            if (0x5555555555555556 * (((char *)__p[2] - (char *)__p[0]) >> 3) > v83)
              v83 = 0x5555555555555556 * (((char *)__p[2] - (char *)__p[0]) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * (((char *)__p[2] - (char *)__p[0]) >> 3) >= 0x555555555555555)
              v84 = 0xAAAAAAAAAAAAAAALL;
            else
              v84 = v83;
            v85 = (char *)sub_19C2A18FC((uint64_t)&__p[2], v84);
            v87 = &v85[24 * v82];
            *(_OWORD *)v87 = *(_OWORD *)v80;
            *((_DWORD *)v87 + 4) = *(_DWORD *)(v80 + 28);
            v89 = (char *)__p[0];
            v88 = (char *)__p[1];
            v90 = v87;
            if (__p[1] != __p[0])
            {
              do
              {
                v91 = *(_OWORD *)(v88 - 24);
                *((_QWORD *)v90 - 1) = *((_QWORD *)v88 - 1);
                *(_OWORD *)(v90 - 24) = v91;
                v90 -= 24;
                v88 -= 24;
              }
              while (v88 != v89);
              v88 = (char *)__p[0];
            }
            v78 = v87 + 24;
            __p[0] = v90;
            __p[1] = v87 + 24;
            __p[2] = &v85[24 * v86];
            if (v88)
              operator delete(v88);
          }
          else
          {
            *(_OWORD *)v78 = *(_OWORD *)v80;
            *((_DWORD *)v78 + 4) = *(_DWORD *)(v80 + 28);
            v78 += 24;
          }
          __p[1] = v78;
          v79 = v79 + (float)(a8 * v81);
          ++v76;
        }
        while (v76 != v77);
      }
      *(float *)&v118 = v79 - v16;
      v92 = v137;
      if ((unint64_t)v137 >= v138)
      {
        v93 = sub_19C2BE5DC(&v136, (__int128 **)__p, &v118);
      }
      else
      {
        *(_QWORD *)v137 = 0;
        *((_QWORD *)v92 + 1) = 0;
        *((_QWORD *)v92 + 2) = 0;
        sub_19C2A181C(v92, (__int128 *)__p[0], (__int128 *)__p[1], 0xAAAAAAAAAAAAAAABLL * (((char *)__p[1] - (char *)__p[0]) >> 3));
        *((_DWORD *)v92 + 6) = LODWORD(v118);
        v93 = (uint64_t)(v92 + 32);
      }
      v137 = (char *)v93;
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
    }
    v94 = v136;
    v95 = v137;
    for (j = v102; (char *)v94 != v95; v94 += 32)
    {
      v96 = *(float *)(v94 + 24);
      if (v96 != 0.0)
      {
        v97 = v96 - v74;
        v98 = exp(v97);
        if (v97 <= -10.0)
        {
          v100 = v97 + v98 * -0.5 + v98 * v98 / 24.0 + pow(v98, 4.0) / -2880.0;
        }
        else
        {
          v99 = expm1(-v98);
          v100 = log(-v99);
        }
        v101 = v100;
        *(float *)(v94 + 24) = v101;
      }
    }
    __p[0] = &v120;
    sub_19C2A19C0((void ***)__p);
    v50 = v136;
    v49 = v137;
  }
  else
  {
    v50 = v136;
    v49 = v137;
    if (a4 > (unint64_t)((uint64_t)&v137[-v136] >> 5))
    {
      v108 = a2;
      v110 = a3;
      v106 = v14;
      do
      {
        memset(&__p[1], 0, 88);
        __p[0] = &off_1E3D34910;
        __p[12] = &off_1E3D347E0;
        v114 = 0u;
        v115 = 0u;
        v116 = 0;
        v117 = 1024;
        sub_19C2B73E4((uint64_t)__p, a2, a3);
        sub_19C2B9ADC(v14, __p);
        v120 = 0;
        v121 = 0;
        v122 = 0;
        sub_19C2B96BC(__p, (void **)&v118, a8);
        v52 = v118;
        v51 = v119;
        v53 = 0.0;
        if (*(_QWORD *)&v118 != *(_QWORD *)&v119)
        {
          v54 = v121;
          do
          {
            v55 = **(_QWORD **)&v52;
            if (v54 >= (__int128 *)v122)
            {
              v56 = 0xAAAAAAAAAAAAAAABLL * (((char *)v54 - (char *)v120) >> 3);
              v57 = v56 + 1;
              if (v56 + 1 > 0xAAAAAAAAAAAAAAALL)
                sub_19C2A18E8();
              if (0x5555555555555556 * ((v122 - (char *)v120) >> 3) > v57)
                v57 = 0x5555555555555556 * ((v122 - (char *)v120) >> 3);
              if (0xAAAAAAAAAAAAAAABLL * ((v122 - (char *)v120) >> 3) >= 0x555555555555555)
                v58 = 0xAAAAAAAAAAAAAAALL;
              else
                v58 = v57;
              v59 = (char *)sub_19C2A18FC((uint64_t)&v122, v58);
              v61 = &v59[24 * v56];
              *(_OWORD *)v61 = *(_OWORD *)v55;
              *((_DWORD *)v61 + 4) = *(_DWORD *)(v55 + 28);
              v63 = v120;
              v62 = v121;
              v64 = (__int128 *)v61;
              if (v121 != v120)
              {
                do
                {
                  v65 = *(__int128 *)((char *)v62 - 24);
                  *((_QWORD *)v64 - 1) = *((_QWORD *)v62 - 1);
                  *(__int128 *)((char *)v64 - 24) = v65;
                  v64 = (__int128 *)((char *)v64 - 24);
                  v62 = (__int128 *)((char *)v62 - 24);
                }
                while (v62 != v63);
                v62 = v120;
              }
              v54 = (__int128 *)(v61 + 24);
              v120 = v64;
              v121 = (__int128 *)(v61 + 24);
              v122 = &v59[24 * v60];
              if (v62)
                operator delete(v62);
            }
            else
            {
              *v54 = *(_OWORD *)v55;
              *((_DWORD *)v54 + 4) = *(_DWORD *)(v55 + 28);
              v54 = (__int128 *)((char *)v54 + 24);
            }
            v121 = v54;
            v53 = v53 + (float)(a8 * *(float *)(v55 + 32));
            *(_QWORD *)&v52 += 8;
          }
          while (*(_QWORD *)&v52 != *(_QWORD *)&v51);
        }
        v112 = v53 - v16;
        v66 = v137;
        if ((unint64_t)v137 >= v138)
        {
          v67 = sub_19C2BE5DC(&v136, &v120, &v112);
        }
        else
        {
          *(_QWORD *)v137 = 0;
          *((_QWORD *)v66 + 1) = 0;
          *((_QWORD *)v66 + 2) = 0;
          sub_19C2A181C(v66, v120, v121, 0xAAAAAAAAAAAAAAABLL * (((char *)v121 - (char *)v120) >> 3));
          *((float *)v66 + 6) = v112;
          v67 = (uint64_t)(v66 + 32);
        }
        a2 = v108;
        a3 = v110;
        v14 = v106;
        v137 = (char *)v67;
        if (v118 != 0.0)
        {
          v119 = v118;
          operator delete(*(void **)&v118);
        }
        if (v120)
        {
          v121 = v120;
          operator delete(v120);
        }
        sub_19C2B7114((uint64_t)__p);
        v50 = v136;
        v49 = v137;
      }
      while (a4 > (unint64_t)((uint64_t)&v137[-v136] >> 5));
    }
  }
  *j = v50;
  j[1] = (uint64_t)v49;
  j[2] = v138;
  j = &v136;
LABEL_113:
  *j = 0;
  j[1] = 0;
  j[2] = 0;
  if (v123[0])
  {
    v123[1] = v123[0];
    operator delete(v123[0]);
  }
  sub_19C2B7114((uint64_t)&v124);
  v124 = (void **)&v136;
  sub_19C2A19C0(&v124);
}

void sub_19C2BC160(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char *__p, char *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void **a44)
{
  uint64_t v44;
  uint64_t v45;
  void *v47;

  if (__p)
  {
    a17 = __p;
    operator delete(__p);
  }
  __p = &a35;
  sub_19C2B42C4((void ***)&__p);
  __p = &a38;
  sub_19C2A19C0((void ***)&__p);
  v47 = *(void **)(v44 + 200);
  if (v47)
  {
    *(_QWORD *)(v44 + 208) = v47;
    operator delete(v47);
  }
  sub_19C2B7114((uint64_t)&a44);
  a44 = (void **)(v45 - 160);
  sub_19C2A19C0(&a44);
  _Unwind_Resume(a1);
}

float sub_19C2BC2D0(uint64_t a1, unsigned __int8 *a2, uint64_t a3, float a4)
{
  float v6;
  uint64_t (**v8)();
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t (**v15)();
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  v8 = &off_1E3D34910;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0;
  v15 = &off_1E3D347E0;
  v16 = 0u;
  v17 = 0u;
  v18 = 0;
  v19 = 1024;
  sub_19C2B73E4((uint64_t)&v8, a2, a3);
  sub_19C2B9ADC(a1, &v8);
  v6 = sub_19C2B7F88(&v8, a4);
  sub_19C2B7114((uint64_t)&v8);
  return v6;
}

void sub_19C2BC364(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C2B7114((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_19C2BC378(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  size_t v10;
  _QWORD *v11;
  _QWORD *v12;
  float v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  size_t v18;
  _QWORD *v19;
  _QWORD *v20;
  float v21;
  float v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  float v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  void *v40;
  _QWORD *v41;
  uint64_t v42;
  void *v43;
  _BYTE *v44;
  void *__p;
  _QWORD *v46;
  uint64_t v47;
  char __s[2];

  strcpy(__s, " ");
  v10 = strlen(__s);
  sub_19C2B3B2C((char **)&v43, a2, a3, (unsigned __int8 *)__s, v10, 0);
  v46 = 0;
  v47 = 0;
  __p = 0;
  sub_19C2BD710(&__p, v43, (uint64_t)v44, (v44 - (_BYTE *)v43) >> 4);
  v11 = __p;
  v12 = v46;
  if (__p == v46)
  {
    v14 = 0.0;
    if (__p)
    {
LABEL_11:
      v46 = v11;
      operator delete(v11);
    }
  }
  else
  {
    v13 = *(float *)(a1 + 104) + -10.0;
    v14 = 0.0;
    do
    {
      v15 = v11[1];
      v16 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 112))(a1, *v11, v15);
      if ((_DWORD)v16 == *(_DWORD *)(a1 + 88))
      {
        v14 = v13 + v14;
      }
      else
      {
        if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 136))(*(_QWORD *)(a1 + 8), v16))
          v17 = (float)(*(float *)(a1 + 108) * (float)(int)v15) + -0.1;
        else
          v17 = (*(float (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 96))(*(_QWORD *)(a1 + 8), v16);
        v14 = v17 + v14;
      }
      v11 += 2;
    }
    while (v11 != v12);
    v11 = __p;
    if (__p)
      goto LABEL_11;
  }
  if (v43)
  {
    v44 = v43;
    operator delete(v43);
  }
  strcpy(__s, " ");
  v18 = strlen(__s);
  sub_19C2B3B2C((char **)&v43, a4, a5, (unsigned __int8 *)__s, v18, 0);
  v41 = 0;
  v42 = 0;
  v40 = 0;
  sub_19C2BD710(&v40, v43, (uint64_t)v44, (v44 - (_BYTE *)v43) >> 4);
  v19 = v40;
  v20 = v41;
  if (v40 != v41)
  {
    v21 = *(float *)(a1 + 104) + -10.0;
    v22 = 0.0;
    do
    {
      v23 = v19[1];
      v24 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 112))(a1, *v19, v23);
      if ((_DWORD)v24 == *(_DWORD *)(a1 + 88))
      {
        v22 = v21 + v22;
      }
      else
      {
        if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 136))(*(_QWORD *)(a1 + 8), v24))
          v25 = (float)(*(float *)(a1 + 108) * (float)(int)v23) + -0.1;
        else
          v25 = (*(float (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 96))(*(_QWORD *)(a1 + 8), v24);
        v22 = v25 + v22;
      }
      v19 += 2;
    }
    while (v19 != v20);
    v19 = v40;
    if (!v40)
      goto LABEL_25;
    goto LABEL_24;
  }
  v22 = 0.0;
  if (v40)
  {
LABEL_24:
    v41 = v19;
    operator delete(v19);
  }
LABEL_25:
  if (v43)
  {
    v44 = v43;
    operator delete(v43);
  }
  v26 = vabds_f32(v14, v22);
  if (v26 > 0.0000001 && (int)sub_19C2CB68C() <= 1)
  {
    LOBYTE(v43) = 0;
    v27 = sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)"unigram_model.cc", 16);
    sub_19C2A1B24(v27, (uint64_t)"(", 1);
    v28 = (_QWORD *)std::ostream::operator<<();
    v29 = sub_19C2A1B24(v28, (uint64_t)") ", 2);
    v30 = sub_19C2A1B24(v29, (uint64_t)"LOG(", 4);
    v31 = sub_19C2A1B24(v30, (uint64_t)"WARNING", 7);
    v32 = sub_19C2A1B24(v31, (uint64_t)") ", 2);
    v33 = sub_19C2A1B24(v32, (uint64_t)"Two sentence piece sequences are not equivalent! Left: ", 55);
    v34 = sub_19C2A1B24(v33, a2, a3);
    sub_19C2A1B24(v34, (uint64_t)", Score: ", 9);
    v35 = (_QWORD *)std::ostream::operator<<();
    v36 = sub_19C2A1B24(v35, (uint64_t)". Right: ", 9);
    v37 = sub_19C2A1B24(v36, a4, a5);
    sub_19C2A1B24(v37, (uint64_t)", Score: ", 9);
    v38 = (_QWORD *)std::ostream::operator<<();
    sub_19C2A1B24(v38, (uint64_t)".", 1);
    sub_19C2A0AD8(&v43);
  }
  return v26 <= 0.0000001;
}

void sub_19C2BC74C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19C2BC7A8(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string *p_p;
  std::string *v5;
  std::string::size_type size;
  std::string *v7;
  std::string *v8;
  std::string::size_type v9;
  std::string *v10;
  std::string::size_type v11;
  std::string __p;
  std::string v13;

  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  sub_19C29FA40(a1, &v13);
  memset(&__p, 0, sizeof(__p));
  std::string::resize(&__p, 4uLL, 0);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  LODWORD(p_p->__r_.__value_.__l.__data_) = *(_DWORD *)(a1 + 104);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v5 = &__p;
  else
    v5 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  std::string::append(a2, (const std::string::value_type *)v5, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  memset(&__p, 0, sizeof(__p));
  std::string::resize(&__p, 4uLL, 0);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v7 = &__p;
  else
    v7 = (std::string *)__p.__r_.__value_.__r.__words[0];
  LODWORD(v7->__r_.__value_.__l.__data_) = *(_DWORD *)(a1 + 108);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v8 = &__p;
  else
    v8 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v9 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v9 = __p.__r_.__value_.__l.__size_;
  std::string::append(a2, (const std::string::value_type *)v8, v9);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v10 = &v13;
  else
    v10 = (std::string *)v13.__r_.__value_.__r.__words[0];
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v11 = HIBYTE(v13.__r_.__value_.__r.__words[2]);
  else
    v11 = v13.__r_.__value_.__l.__size_;
  std::string::append(a2, (const std::string::value_type *)v10, v11);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
}

void sub_19C2BC8E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  if (a20 < 0)
    operator delete(__p);
  if (*(char *)(v20 + 23) < 0)
    operator delete(*(void **)v20);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C2BC93C()
{
  return 1;
}

uint64_t sub_19C2BC944()
{
  return 1;
}

uint64_t sub_19C2BC94C()
{
  return 1;
}

uint64_t sub_19C2BC954()
{
  return 1;
}

_QWORD *sub_19C2BC95C(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_19C2B658C(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_19C2BC9B8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_19C2BC9D4(uint64_t a1, _BYTE *a2, uint64_t a3, unint64_t a4, uint64_t a5, int a6)
{
  unsigned int *v9;
  unsigned int v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unint64_t v15;
  int v16;
  int v17;
  unint64_t v18;
  unsigned __int8 *v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  int *v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  BOOL v31;
  unsigned __int32 v32;
  int i;
  uint64_t v34;
  unint64_t v35;
  unsigned int v36;
  int v37;
  __n128 v41;
  int v42;
  _OWORD v43[2];
  __int128 v44;

  v9 = *(unsigned int **)(a1 + 16);
  v10 = *v9;
  if (a5)
  {
    v11 = *a2;
    v12 = (v10 >> 10 << ((v10 >> 6) & 8)) ^ v11;
    v10 = v9[v12];
    if ((v10 & 0x800000FF) == v11)
    {
      v13 = a5 - 1;
      v14 = a2 + 1;
      while (1)
      {
        v15 = v12;
        if (!v13)
          goto LABEL_16;
        v16 = *v14++;
        v12 = (v10 >> 10 << ((v10 >> 6) & 8)) ^ v12 ^ v16;
        v10 = v9[v12];
        --v13;
        if ((v10 & 0x800000FF) != v16)
          goto LABEL_14;
      }
    }
  }
  else
  {
    v17 = *a2;
    if (!*a2)
    {
      v15 = 0;
      LODWORD(v12) = 0;
LABEL_16:
      if ((v10 & 0x100) != 0)
        v22 = v9[(v10 >> 10 << ((v10 >> 6) & 8)) ^ v12] & 0x7FFFFFFF;
      else
        v22 = -1;
      goto LABEL_19;
    }
    v18 = (v10 >> 10 << ((v10 >> 6) & 8)) ^ v17;
    v10 = v9[v18];
    if ((v10 & 0x800000FF) == v17)
    {
      v19 = a2 + 1;
      LODWORD(v12) = v18;
      while (1)
      {
        v15 = v18;
        v21 = *v19++;
        v20 = v21;
        if (!v21)
          goto LABEL_16;
        v18 = (v10 >> 10 << ((v10 >> 6) & 8)) ^ v12 ^ v20;
        v10 = v9[v18];
        LODWORD(v12) = v18;
        if ((v10 & 0x800000FF) != v20)
          goto LABEL_14;
      }
    }
  }
  v15 = 0;
LABEL_14:
  v22 = -2;
LABEL_19:
  v44 = 0u;
  memset(v43, 0, sizeof(v43));
  v41.n128_u32[0] = 0;
  v41.n128_u64[1] = v15;
  v42 = v22;
  sub_19C2BCD08(v43, &v41);
  v23 = *((_QWORD *)&v44 + 1);
  if (*((_QWORD *)&v44 + 1))
  {
    v24 = 0;
    do
    {
      v25 = (int *)(*(_QWORD *)(*((_QWORD *)&v43[0] + 1) + 8 * ((unint64_t)v44 / 0xAA))
                  + 24 * ((unint64_t)v44 % 0xAA));
      v26 = *v25;
      v27 = v25[2];
      v28 = v25[4];
      *(_QWORD *)&v44 = v44 + 1;
      *((_QWORD *)&v44 + 1) = v23 - 1;
      if ((unint64_t)v44 >= 0x154)
      {
        operator delete(**((void ***)&v43[0] + 1));
        *((_QWORD *)&v43[0] + 1) += 8;
        *(_QWORD *)&v44 = v44 - 170;
      }
      if ((v28 & 0x80000000) == 0)
      {
        v29 = a3 + 16 * v24;
        *(_DWORD *)v29 = v28;
        *(_QWORD *)(v29 + 8) = a5;
        ++v24;
      }
      v31 = a6 >= 0 && v26 > a6;
      if (v24 >= a4 || v31)
        break;
      if (v28 != -2)
      {
        v32 = v26 + 1;
        for (i = 1; i != 256; ++i)
        {
          v34 = *(_QWORD *)(a1 + 16);
          v35 = (*(_DWORD *)(v34 + 4 * v27) >> 10 << ((*(_DWORD *)(v34 + 4 * v27) >> 6) & 8)) ^ v27 ^ i;
          v36 = *(_DWORD *)(v34 + 4 * v35);
          if (i == (v36 & 0x800000FF))
          {
            if ((v36 & 0x100) != 0)
              v37 = *(_DWORD *)(v34 + 4 * ((v36 >> 10 << ((v36 >> 6) & 8)) ^ v35)) & 0x7FFFFFFF;
            else
              v37 = -1;
            v41.n128_u32[0] = v32;
            v41.n128_u64[1] = v35;
            v42 = v37;
            sub_19C2BCD08(v43, &v41);
          }
        }
      }
      v23 = *((_QWORD *)&v44 + 1);
    }
    while (*((_QWORD *)&v44 + 1));
  }
  else
  {
    v24 = 0;
  }
  sub_19C2BD524(v43);
  return v24;
}

void sub_19C2BCCC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_19C2BD524((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19C2BCCD8(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 16 * a2;
  }
  else
  {
    sub_19C2BD604((void **)a1, a2 - v2);
  }
}

__n128 sub_19C2BCD08(_QWORD *a1, __n128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  __n128 *v8;
  __n128 result;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 170 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_19C2BCDB4(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = (__n128 *)(*(_QWORD *)(v5 + 8 * (v7 / 0xAA)) + 24 * (v7 % 0xAA));
  result = *a2;
  v8[1].n128_u64[0] = a2[1].n128_u64[0];
  *v8 = result;
  ++a1[5];
  return result;
}

void sub_19C2BCDB4(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0xAA;
  v4 = v2 - 170;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_19C2A1FC0(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFF0uLL);
      sub_19C2BD0C8(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFF0uLL);
    sub_19C2BD1DC((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_19C2A1FC0((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_19C2A1FC0((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFF0uLL);
  sub_19C2BD2F8(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_19C2BD40C((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_19C2BD07C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_19C2BD0C8(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  char *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;

  v5 = (char *)a1[3];
  v4 = (uint64_t)(a1 + 3);
  v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    v7 = (char *)a1[1];
    v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1)
        v18 = 1;
      else
        v18 = (uint64_t)&v6[-*a1] >> 2;
      v19 = (char *)sub_19C2A1FC0(v4, v18);
      v21 = &v19[8 * (v18 >> 2)];
      v22 = (uint64_t *)a1[1];
      v6 = v21;
      v23 = a1[2] - (_QWORD)v22;
      if (v23)
      {
        v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8];
        v24 = 8 * (v23 >> 3);
        v25 = &v19[8 * (v18 >> 2)];
        do
        {
          v26 = *v22++;
          *(_QWORD *)v25 = v26;
          v25 += 8;
          v24 -= 8;
        }
        while (v24);
      }
      v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        v6 = (char *)a1[2];
      }
    }
    else
    {
      v9 = v8 >> 3;
      v10 = v8 >> 3 < -1;
      v11 = (v8 >> 3) + 2;
      if (v10)
        v12 = v11;
      else
        v12 = v9 + 1;
      v13 = -(v12 >> 1);
      v14 = v12 >> 1;
      v15 = &v7[-8 * v14];
      v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        v6 = (char *)a1[1];
      }
      v17 = &v6[8 * v13];
      v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }
  *(_QWORD *)v6 = *a2;
  a1[2] += 8;
}

void sub_19C2BD1DC(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = a1 + 24;
    v7 = *(_BYTE **)(a1 + 24);
    v8 = *(_BYTE **)(a1 + 16);
    if (v8 >= v7)
    {
      if (v7 == v4)
        v12 = 1;
      else
        v12 = (v7 - v4) >> 2;
      v13 = 2 * v12;
      v14 = (char *)sub_19C2A1FC0(v6, v12);
      v5 = &v14[(v13 + 6) & 0xFFFFFFFFFFFFFFF8];
      v16 = *(uint64_t **)(a1 + 8);
      v17 = v5;
      v18 = *(_QWORD *)(a1 + 16) - (_QWORD)v16;
      if (v18)
      {
        v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8];
        v19 = 8 * (v18 >> 3);
        v20 = v5;
        do
        {
          v21 = *v16++;
          *(_QWORD *)v20 = v21;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      v22 = *(char **)a1;
      *(_QWORD *)a1 = v14;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v17;
      *(_QWORD *)(a1 + 24) = &v14[8 * v15];
      if (v22)
      {
        operator delete(v22);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v9 = (v7 - v8) >> 3;
      if (v9 >= -1)
        v10 = v9 + 1;
      else
        v10 = v9 + 2;
      v11 = v10 >> 1;
      v5 = &v4[8 * (v10 >> 1)];
      if (v8 != v4)
      {
        memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v11];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

void sub_19C2BD2F8(_QWORD *a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;

  v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    v5 = (char *)a1[1];
    v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1)
        v16 = 1;
      else
        v16 = (uint64_t)&v4[-*a1] >> 2;
      v17 = (char *)sub_19C2A1FC0(a1[4], v16);
      v19 = &v17[8 * (v16 >> 2)];
      v20 = (uint64_t *)a1[1];
      v4 = v19;
      v21 = a1[2] - (_QWORD)v20;
      if (v21)
      {
        v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        v22 = 8 * (v21 >> 3);
        v23 = &v17[8 * (v16 >> 2)];
        do
        {
          v24 = *v20++;
          *(_QWORD *)v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        v4 = (char *)a1[2];
      }
    }
    else
    {
      v7 = v6 >> 3;
      v8 = v6 >> 3 < -1;
      v9 = (v6 >> 3) + 2;
      if (v8)
        v10 = v9;
      else
        v10 = v7 + 1;
      v11 = -(v10 >> 1);
      v12 = v10 >> 1;
      v13 = &v5[-8 * v12];
      v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        v4 = (char *)a1[1];
      }
      v15 = &v4[8 * v11];
      v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(_QWORD *)v4 = *a2;
  a1[2] += 8;
}

void sub_19C2BD40C(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = *(_BYTE **)(a1 + 16);
    v7 = *(_BYTE **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4)
        v11 = 1;
      else
        v11 = (v7 - v4) >> 2;
      v12 = 2 * v11;
      v13 = (char *)sub_19C2A1FC0(*(_QWORD *)(a1 + 32), v11);
      v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      v15 = *(uint64_t **)(a1 + 8);
      v16 = v5;
      v17 = *(_QWORD *)(a1 + 16) - (_QWORD)v15;
      if (v17)
      {
        v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        v18 = 8 * (v17 >> 3);
        v19 = v5;
        do
        {
          v20 = *v15++;
          *(_QWORD *)v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      v21 = *(char **)a1;
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v16;
      *(_QWORD *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v8 = (v7 - v6) >> 3;
      if (v8 >= -1)
        v9 = v8 + 1;
      else
        v9 = v8 + 2;
      v10 = v9 >> 1;
      v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

uint64_t sub_19C2BD524(_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  a1[5] = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 85;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_9;
    v6 = 170;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    v7 = *v2++;
    operator delete(v7);
  }
  return sub_19C2BD5B8((uint64_t)a1);
}

uint64_t sub_19C2BD5B8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
    *(_QWORD *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  v4 = *(void **)a1;
  if (*(_QWORD *)a1)
    operator delete(v4);
  return a1;
}

void sub_19C2BD604(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 4)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 16 * a2);
      v7 += 16 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - (_BYTE *)*a1;
    v9 = a2 + (v8 >> 4);
    if (v9 >> 60)
      sub_19C2A18E8();
    v10 = v8 >> 4;
    v11 = v5 - (_BYTE *)*a1;
    if (v11 >> 3 > v9)
      v9 = v11 >> 3;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
      v13 = (char *)sub_19C2A26A4(v4, v12);
    else
      v13 = 0;
    v14 = &v13[16 * v10];
    v15 = &v13[16 * v12];
    bzero(v14, 16 * a2);
    v16 = &v14[16 * a2];
    v18 = (char *)*a1;
    v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        *((_OWORD *)v14 - 1) = *((_OWORD *)v17 - 1);
        v14 -= 16;
        v17 -= 16;
      }
      while (v17 != v18);
      v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
      operator delete(v17);
  }
}

_QWORD *sub_19C2BD710(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_19C2A5308(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_19C2BD76C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_19C2BD788(_QWORD *a1)
{
  sub_19C2BD7AC(a1);
  JUMPOUT(0x1A1AD355CLL);
}

_QWORD *sub_19C2BD7AC(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  *a1 = &off_1E3D347E0;
  v2 = (_QWORD *)a1[1];
  v3 = (_QWORD *)a1[2];
  if (v2 != v3)
  {
    do
    {
      if (*v2)
        MEMORY[0x1A1AD3538](*v2, 0x1070C8005A2B047);
      ++v2;
    }
    while (v2 != v3);
    v2 = (_QWORD *)a1[1];
  }
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_19C2BD828(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      sub_19C2A18E8();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)sub_19C2A18FC(v4, v11);
    else
      v12 = 0;
    v15 = v12;
    v16 = &v12[24 * v8];
    v18 = &v12[24 * v11];
    v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    v17 = &v16[v14];
    sub_19C2BD98C(a1, &v15);
    sub_19C2B5B70((uint64_t)&v15);
  }
}

void sub_19C2BD978(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C2B5B70((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19C2BD98C(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_19C2BDA00((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_19C2BDA00(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  sub_19C2BDAA0((uint64_t)v11);
  return v9;
}

uint64_t sub_19C2BDAA0(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_19C2B5B2C(a1);
  return a1;
}

uint64_t sub_19C2BDAD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *(_QWORD *)v4 = 0;
      *(_QWORD *)(v4 + 8) = 0;
      *(_QWORD *)(v4 + 16) = 0;
      sub_19C2BC95C((_QWORD *)v4, *(const void **)v6, *(_QWORD *)(v6 + 8), (uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 3);
      *(_DWORD *)(v4 + 24) = *(_DWORD *)(v6 + 24);
      v4 = v11 + 32;
      v11 += 32;
      v6 += 32;
    }
    while (v6 != a3);
  }
  v9 = 1;
  sub_19C2BDB8C((uint64_t)v8);
  return v4;
}

void sub_19C2BDB78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_19C2BDB8C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_19C2BDB8C(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_19C2A1974(a1);
  return a1;
}

void sub_19C2BDBC0(_QWORD *a1)
{
  sub_19C2B9640(a1);
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C2BDBE4(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  _QWORD *v10;

  if (a3 >= 2)
  {
    v3 = (unint64_t)(a3 - 2) >> 1;
    v4 = (_QWORD *)(result + 8 * v3);
    v5 = *v4;
    v8 = *(_QWORD *)(a2 - 8);
    v6 = (_QWORD *)(a2 - 8);
    v7 = v8;
    v9 = *(float *)(v8 + 16);
    if (*(float *)(*v4 + 16) < v9)
    {
      do
      {
        v10 = v4;
        *v6 = v5;
        if (!v3)
          break;
        v3 = (v3 - 1) >> 1;
        v4 = (_QWORD *)(result + 8 * v3);
        v5 = *v4;
        v6 = v10;
      }
      while (*(float *)(*v4 + 16) < v9);
      *v10 = v7;
    }
  }
  return result;
}

uint64_t sub_19C2BDC40(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  _QWORD v19[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(result - 8);
  if (a2 <= (v6 - v7) >> 5)
  {
    if (a2)
    {
      v14 = 32 * a2;
      v15 = v7 + 32 * a2;
      do
      {
        *(_QWORD *)v7 = 0;
        *(_QWORD *)(v7 + 8) = 0;
        *(_DWORD *)(v7 + 24) = 0;
        *(_QWORD *)(v7 + 16) = 0;
        v7 += 32;
        v14 -= 32;
      }
      while (v14);
      v7 = v15;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - *a1;
    v9 = a2 + (v8 >> 5);
    if (v9 >> 59)
      sub_19C2A18E8();
    v10 = v8 >> 5;
    v11 = v5 - *a1;
    if (v11 >> 4 > v9)
      v9 = v11 >> 4;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0)
      v12 = 0x7FFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    v19[4] = result;
    if (v12)
      v13 = (char *)sub_19C2B5C70(result, v12);
    else
      v13 = 0;
    v16 = &v13[32 * v10];
    v19[0] = v13;
    v19[1] = v16;
    v19[3] = &v13[32 * v12];
    v17 = 32 * a2;
    v18 = &v16[32 * a2];
    do
    {
      *(_QWORD *)v16 = 0;
      *((_QWORD *)v16 + 1) = 0;
      *((_DWORD *)v16 + 6) = 0;
      *((_QWORD *)v16 + 2) = 0;
      v16 += 32;
      v17 -= 32;
    }
    while (v17);
    v19[2] = v18;
    sub_19C2BDD64(a1, v19);
    return sub_19C2B6158((uint64_t)v19);
  }
  return result;
}

void sub_19C2BDD50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C2B6158((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19C2BDD64(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_19C2BDDD8((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_19C2BDDD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 32) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      v8 = *(_OWORD *)(a3 - 32);
      a3 -= 32;
      *(_OWORD *)(v7 - 32) = v8;
      *(_QWORD *)(v7 - 16) = *(_QWORD *)(a3 + 16);
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)a3 = 0;
      *(_DWORD *)(v7 - 8) = *(_DWORD *)(a3 + 24);
      v7 = *((_QWORD *)&v14 + 1) - 32;
      *((_QWORD *)&v14 + 1) -= 32;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  sub_19C2BDE80((uint64_t)v11);
  return v9;
}

uint64_t sub_19C2BDE80(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_19C2B6114(a1);
  return a1;
}

_QWORD *sub_19C2BDEB4(_QWORD *a1, unint64_t a2, _QWORD *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_19C2B658C(a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_19C2BDF18(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

float sub_19C2BDF34(uint64_t a1, __int128 **a2, float *a3)
{
  uint64_t v5;
  float result;

  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)v5 = 0;
  *(_QWORD *)(v5 + 8) = 0;
  *(_QWORD *)(v5 + 16) = 0;
  sub_19C2A181C((char *)v5, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  result = *a3;
  *(float *)(v5 + 24) = *a3;
  *(_QWORD *)(a1 + 8) = v5 + 32;
  return result;
}

void sub_19C2BDF9C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_19C2BDFA4(uint64_t *a1, __int128 **a2, _DWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[2];
  char *v17;
  char *v18;
  uint64_t *v19;

  v4 = *a1;
  v5 = (a1[1] - *a1) >> 5;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59)
    sub_19C2A18E8();
  v9 = (uint64_t)(a1 + 2);
  v10 = a1[2] - v4;
  if (v10 >> 4 > v6)
    v6 = v10 >> 4;
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0)
    v11 = 0x7FFFFFFFFFFFFFFLL;
  else
    v11 = v6;
  v19 = a1 + 2;
  if (v11)
    v12 = (char *)sub_19C2B5C70(v9, v11);
  else
    v12 = 0;
  v13 = &v12[32 * v5];
  v16[0] = v12;
  v16[1] = v13;
  v17 = v13;
  v18 = &v12[32 * v11];
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = 0;
  *((_QWORD *)v13 + 2) = 0;
  sub_19C2A181C(v13, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  *((_DWORD *)v13 + 6) = *a3;
  v17 += 32;
  sub_19C2BE0B0(a1, v16);
  v14 = a1[1];
  sub_19C2B6158((uint64_t)v16);
  return v14;
}

void sub_19C2BE09C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C2B6158((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19C2BE0B0(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_19C2BE124((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_19C2BE124(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 32) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      v8 = *(_OWORD *)(a3 - 32);
      a3 -= 32;
      *(_OWORD *)(v7 - 32) = v8;
      *(_QWORD *)(v7 - 16) = *(_QWORD *)(a3 + 16);
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)a3 = 0;
      *(_DWORD *)(v7 - 8) = *(_DWORD *)(a3 + 24);
      v7 = *((_QWORD *)&v14 + 1) - 32;
      *((_QWORD *)&v14 + 1) -= 32;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  sub_19C2BE1CC((uint64_t)v11);
  return v9;
}

uint64_t sub_19C2BE1CC(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_19C2B6114(a1);
  return a1;
}

uint64_t sub_19C2BE200(uint64_t *a1, __int128 **a2, double *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  float v14;
  uint64_t v15;
  _QWORD v17[2];
  char *v18;
  char *v19;
  uint64_t *v20;

  v4 = *a1;
  v5 = (a1[1] - *a1) >> 5;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59)
    sub_19C2A18E8();
  v9 = (uint64_t)(a1 + 2);
  v10 = a1[2] - v4;
  if (v10 >> 4 > v6)
    v6 = v10 >> 4;
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0)
    v11 = 0x7FFFFFFFFFFFFFFLL;
  else
    v11 = v6;
  v20 = a1 + 2;
  if (v11)
    v12 = (char *)sub_19C2B5C70(v9, v11);
  else
    v12 = 0;
  v13 = &v12[32 * v5];
  v17[0] = v12;
  v17[1] = v13;
  v18 = v13;
  v19 = &v12[32 * v11];
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = 0;
  *((_QWORD *)v13 + 2) = 0;
  sub_19C2A181C(v13, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  v14 = *a3;
  *((float *)v13 + 6) = v14;
  v18 += 32;
  sub_19C2BE0B0(a1, v17);
  v15 = a1[1];
  sub_19C2B6158((uint64_t)v17);
  return v15;
}

void sub_19C2BE2FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C2B6158((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_19C2BE310(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_19C2A1898(a1, a2);
    v4 = (char *)a1[1];
    v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_19C2BE39C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_19C2B42C4(&a9);
  _Unwind_Resume(a1);
}

char *sub_19C2BE3B0(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 3)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 61)
      sub_19C2A18E8();
    v10 = v8 >> 2;
    if (v8 >> 2 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = sub_19C2B658C(v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 3;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

uint64_t sub_19C2BE4B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  const void *v5;
  size_t v6;

  v3 = a1;
  if (a1 != a2)
  {
    v5 = *(const void **)a3;
    v6 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
    while (*(_QWORD *)(v3 + 8) - *(_QWORD *)v3 != v6 || memcmp(*(const void **)v3, v5, v6))
    {
      v3 += 24;
      if (v3 == a2)
        return a2;
    }
  }
  return v3;
}

__n128 *sub_19C2BE524(__n128 *a1, __n128 *a2, uint64_t a3)
{
  __n128 *v4;
  __n128 *v5;

  v4 = a1;
  if (a1 == a2)
    return a1;
  v5 = a2;
  do
  {
    sub_19C2BE58C(a3, v4);
    *(_DWORD *)(a3 + 24) = v4[1].n128_u32[2];
    a3 += 32;
    v4 += 2;
  }
  while (v4 != v5);
  return v5;
}

__n128 sub_19C2BE58C(uint64_t a1, __n128 *a2)
{
  void *v4;
  __n128 result;

  v4 = *(void **)a1;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = v4;
    operator delete(v4);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  result = *a2;
  *(__n128 *)a1 = *a2;
  *(_QWORD *)(a1 + 16) = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

uint64_t sub_19C2BE5DC(uint64_t *a1, __int128 **a2, _DWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[2];
  char *v17;
  char *v18;
  uint64_t *v19;

  v4 = *a1;
  v5 = (a1[1] - *a1) >> 5;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59)
    sub_19C2A18E8();
  v9 = (uint64_t)(a1 + 2);
  v10 = a1[2] - v4;
  if (v10 >> 4 > v6)
    v6 = v10 >> 4;
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0)
    v11 = 0x7FFFFFFFFFFFFFFLL;
  else
    v11 = v6;
  v19 = a1 + 2;
  if (v11)
    v12 = (char *)sub_19C2B5C70(v9, v11);
  else
    v12 = 0;
  v13 = &v12[32 * v5];
  v16[0] = v12;
  v16[1] = v13;
  v17 = v13;
  v18 = &v12[32 * v11];
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = 0;
  *((_QWORD *)v13 + 2) = 0;
  sub_19C2A181C(v13, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  *((_DWORD *)v13 + 6) = *a3;
  v17 += 32;
  sub_19C2BE0B0(a1, v16);
  v14 = a1[1];
  sub_19C2B6158((uint64_t)v16);
  return v14;
}

void sub_19C2BE6D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C2B6158((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19C2BE6E8(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)sub_19C2BA3B8(a1);
  *v4 = &off_1E3D34930;
  v4[1] = a2 + 16;
  sub_19C29EC78((uint64_t)v4);
  return a1;
}

void sub_19C2BE724(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_19C29E79C(v1);
  _Unwind_Resume(a1);
}

void sub_19C2BE740(uint64_t a1)
{
  sub_19C29E79C(a1);
  JUMPOUT(0x1A1AD355CLL);
}

void sub_19C2BE764(uint64_t *a1@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X2>, void **a4@<X8>)
{
  uint64_t v8;
  int v9;
  int v10;
  char *v11;
  char *v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  __int128 v24;
  uint64_t v25;

  (*(void (**)(uint64_t *__return_ptr))(*a1 + 16))(&v25);
  if (v25)
  {
    sub_19C2CD3C8(&v25);
LABEL_3:
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return;
  }
  sub_19C2CD3C8(&v25);
  if (!a3)
    goto LABEL_3;
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  do
  {
    v8 = (int)sub_19C2A6554(a1[2], a2, a3, 0);
    v9 = (*(uint64_t (**)(uint64_t *, _BYTE *, uint64_t))(*a1 + 112))(a1, a2, v8);
    v10 = v9;
    v12 = (char *)a4[1];
    v11 = (char *)a4[2];
    if (v12 >= v11)
    {
      v14 = 0xAAAAAAAAAAAAAAABLL * ((v12 - (_BYTE *)*a4) >> 3);
      v15 = v14 + 1;
      if (v14 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_19C2A18E8();
      v16 = 0xAAAAAAAAAAAAAAABLL * ((v11 - (_BYTE *)*a4) >> 3);
      if (2 * v16 > v15)
        v15 = 2 * v16;
      if (v16 >= 0x555555555555555)
        v17 = 0xAAAAAAAAAAAAAAALL;
      else
        v17 = v15;
      v18 = (char *)sub_19C2A18FC((uint64_t)(a4 + 2), v17);
      v20 = &v18[24 * v14];
      *(_QWORD *)v20 = a2;
      *((_QWORD *)v20 + 1) = v8;
      *((_DWORD *)v20 + 4) = v10;
      v22 = (char *)*a4;
      v21 = (char *)a4[1];
      v23 = v20;
      if (v21 != *a4)
      {
        do
        {
          v24 = *(_OWORD *)(v21 - 24);
          *((_QWORD *)v23 - 1) = *((_QWORD *)v21 - 1);
          *(_OWORD *)(v23 - 24) = v24;
          v23 -= 24;
          v21 -= 24;
        }
        while (v21 != v22);
        v21 = (char *)*a4;
      }
      v13 = v20 + 24;
      *a4 = v23;
      a4[1] = v20 + 24;
      a4[2] = &v18[24 * v19];
      if (v21)
        operator delete(v21);
    }
    else
    {
      *(_QWORD *)v12 = a2;
      *((_QWORD *)v12 + 1) = v8;
      v13 = v12 + 24;
      *((_DWORD *)v12 + 4) = v9;
    }
    a4[1] = v13;
    a2 += v8;
    a3 -= v8;
  }
  while (a3);
}

void sub_19C2BE924(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C2BE948(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)sub_19C2BA3B8(a1);
  *v4 = &off_1E3D346D0;
  v4[1] = a2 + 16;
  sub_19C29EC78((uint64_t)v4);
  return a1;
}

void sub_19C2BE984(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_19C29E79C(v1);
  _Unwind_Resume(a1);
}

void sub_19C2BE9A0(uint64_t a1)
{
  sub_19C29E79C(a1);
  JUMPOUT(0x1A1AD355CLL);
}

void sub_19C2BE9C4(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, void **a4@<X8>)
{
  unsigned __int8 **v8;
  unsigned __int8 **v9;
  int v10;
  int v11;
  char *v12;
  char *v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  __int128 v25;
  unsigned __int8 **v26;
  unsigned __int8 **v27;

  (*(void (**)(unsigned __int8 ***__return_ptr))(*(_QWORD *)a1 + 16))(&v26);
  if (v26)
  {
    sub_19C2CD3C8((uint64_t *)&v26);
LABEL_3:
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return;
  }
  sub_19C2CD3C8((uint64_t *)&v26);
  if (!a3)
    goto LABEL_3;
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  sub_19C29FD7C(a2, a3, 0, 0, &v26);
  v8 = v26;
  v9 = v27;
  if (v26 != v27)
  {
    do
    {
      v10 = (*(uint64_t (**)(uint64_t, unsigned __int8 *, unsigned __int8 *))(*(_QWORD *)a1 + 112))(a1, *v8, v8[1]);
      v11 = v10;
      v13 = (char *)a4[1];
      v12 = (char *)a4[2];
      if (v13 >= v12)
      {
        v15 = 0xAAAAAAAAAAAAAAABLL * ((v13 - (_BYTE *)*a4) >> 3);
        v16 = v15 + 1;
        if (v15 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_19C2A18E8();
        v17 = 0xAAAAAAAAAAAAAAABLL * ((v12 - (_BYTE *)*a4) >> 3);
        if (2 * v17 > v16)
          v16 = 2 * v17;
        if (v17 >= 0x555555555555555)
          v18 = 0xAAAAAAAAAAAAAAALL;
        else
          v18 = v16;
        v19 = (char *)sub_19C2A18FC((uint64_t)(a4 + 2), v18);
        v21 = &v19[24 * v15];
        *(_OWORD *)v21 = *(_OWORD *)v8;
        *((_DWORD *)v21 + 4) = v11;
        v23 = (char *)*a4;
        v22 = (char *)a4[1];
        v24 = v21;
        if (v22 != *a4)
        {
          do
          {
            v25 = *(_OWORD *)(v22 - 24);
            *((_QWORD *)v24 - 1) = *((_QWORD *)v22 - 1);
            *(_OWORD *)(v24 - 24) = v25;
            v24 -= 24;
            v22 -= 24;
          }
          while (v22 != v23);
          v22 = (char *)*a4;
        }
        v14 = v21 + 24;
        *a4 = v24;
        a4[1] = v21 + 24;
        a4[2] = &v19[24 * v20];
        if (v22)
          operator delete(v22);
      }
      else
      {
        *(_OWORD *)v13 = *(_OWORD *)v8;
        *((_DWORD *)v13 + 4) = v10;
        v14 = v13 + 24;
      }
      a4[1] = v14;
      v8 += 2;
    }
    while (v8 != v9);
    v8 = v26;
  }
  if (v8)
  {
    v27 = v8;
    operator delete(v8);
  }
}

void sub_19C2BEBA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;
  void *v13;

  if (__p)
    operator delete(__p);
  v13 = *(void **)v11;
  if (*(_QWORD *)v11)
  {
    *(_QWORD *)(v11 + 8) = v13;
    operator delete(v13);
  }
  _Unwind_Resume(exception_object);
}

void sub_19C2BEBD8()
{
  sub_19C2CF260(3014000, 3014000, "/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece.pb.cc");
  sub_19C2C0740((uint64_t)&unk_1EE41C8B0, 0);
  sub_19C2DAB90((uint64_t)sub_19C2DA1A0, (uint64_t)&unk_1EE41C8B0);
}

void sub_19C2BEC2C()
{
  sub_19C2CF260(3014000, 3014000, "/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece.pb.cc");
  sub_19C2BFC28((uint64_t)&unk_1EDB96D48, 0);
  sub_19C2DAB90((uint64_t)sub_19C2DA1A0, (uint64_t)&unk_1EDB96D48);
}

void sub_19C2BEC80()
{
  sub_19C2CF260(3014000, 3014000, "/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece.pb.cc");
  sub_19C2BECD4((uint64_t)&unk_1EDB96DA0, 0);
  sub_19C2DAB90((uint64_t)sub_19C2DA1A0, (uint64_t)&unk_1EDB96DA0);
}

uint64_t sub_19C2BECD4(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &off_1E3D34540;
  *(_QWORD *)(a1 + 8) = a2;
  sub_19C2CFB64(a1 + 16, a2);
  *(_QWORD *)(a1 + 40) = 0;
  if (atomic_load(dword_1EDB96CB0))
    sub_19C2DA308(dword_1EDB96CB0);
  *(_QWORD *)(a1 + 48) = &qword_1EE41C5D8;
  *(_QWORD *)(a1 + 56) = &qword_1EE41C5D8;
  *(_QWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_19C2BED44(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_19C2CFC40(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19C2BED58(uint64_t a1)
{
  sub_19C2BED90(a1);
  sub_19C2BEEB4((uint64_t *)(a1 + 8));
  sub_19C2CFC40(a1 + 16);
  return a1;
}

uint64_t *sub_19C2BED90(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  std::string *v4;
  uint64_t *result;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  std::string v13[2];

  v2 = *(_QWORD *)(a1 + 8);
  v3 = (_QWORD *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  if ((v2 & 1) == 0)
  {
    if (!v3)
      goto LABEL_4;
    goto LABEL_3;
  }
  if (*v3)
  {
LABEL_3:
    sub_19C2CF5C8((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece.pb.cc", 140);
    v4 = sub_19C2CF5E0(v13, "CHECK failed: GetArena() == nullptr: ");
    sub_19C2CF710((uint64_t)&v12, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_19C2CF718((uint64_t)v13);
  }
LABEL_4:
  result = (uint64_t *)(a1 + 48);
  if (*(uint64_t **)(a1 + 48) != &qword_1EE41C5D8)
  {
    v6 = sub_19C2C1180(result);
    v7 = v6;
    if (*(char *)(v6 + 23) < 0)
      operator delete(*(void **)v6);
    result = (uint64_t *)MEMORY[0x1A1AD355C](v7, 0x1012C40EC159624);
  }
  v9 = *(uint64_t **)(a1 + 56);
  v8 = (uint64_t *)(a1 + 56);
  if (v9 != &qword_1EE41C5D8)
  {
    v10 = sub_19C2C1180(v8);
    v11 = v10;
    if (*(char *)(v10 + 23) < 0)
      operator delete(*(void **)v10);
    return (uint64_t *)MEMORY[0x1A1AD355C](v11, 0x1012C40EC159624);
  }
  return result;
}

void sub_19C2BEE9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_19C2BEEB4(uint64_t *result)
{
  uint64_t v1;
  unint64_t v2;

  v1 = *result;
  if ((*result & 1) != 0)
  {
    v2 = v1 & 0xFFFFFFFFFFFFFFFELL;
    if (!*(_QWORD *)(v1 & 0xFFFFFFFFFFFFFFFELL) && v2 != 0)
    {
      if (*(char *)(v2 + 31) < 0)
        operator delete(*(void **)(v2 + 8));
      JUMPOUT(0x1A1AD355CLL);
    }
  }
  return result;
}

void sub_19C2BEF1C(uint64_t a1)
{
  sub_19C2BED58(a1);
  JUMPOUT(0x1A1AD355CLL);
}

unsigned __int8 *sub_19C2BEF40(uint64_t a1)
{
  unsigned __int8 *result;
  int v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  result = sub_19C2D3630((unsigned __int8 *)(a1 + 16));
  v3 = *(_DWORD *)(a1 + 40);
  if ((v3 & 3) != 0)
  {
    if ((v3 & 1) != 0)
    {
      v4 = *(_QWORD *)(a1 + 48) & 0xFFFFFFFFFFFFFFFELL;
      if (*(char *)(v4 + 23) < 0)
      {
        **(_BYTE **)v4 = 0;
        *(_QWORD *)(v4 + 8) = 0;
        if ((v3 & 2) == 0)
          goto LABEL_11;
        goto LABEL_6;
      }
      *(_BYTE *)v4 = 0;
      *(_BYTE *)(v4 + 23) = 0;
    }
    if ((v3 & 2) == 0)
      goto LABEL_11;
LABEL_6:
    v5 = *(_QWORD *)(a1 + 56) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v5 + 23) < 0)
    {
      **(_BYTE **)v5 = 0;
      *(_QWORD *)(v5 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v5 = 0;
      *(_BYTE *)(v5 + 23) = 0;
    }
  }
LABEL_11:
  if ((v3 & 0x1C) != 0)
  {
    *(_DWORD *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 64) = 0;
  }
  *(_DWORD *)(a1 + 40) = 0;
  v6 = *(_QWORD *)(a1 + 8);
  if ((v6 & 1) != 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v7 + 31) < 0)
    {
      **(_BYTE **)(v7 + 8) = 0;
      *(_QWORD *)(v7 + 16) = 0;
    }
    else
    {
      *(_BYTE *)(v7 + 8) = 0;
      *(_BYTE *)(v7 + 31) = 0;
    }
  }
  return result;
}

uint64_t sub_19C2BF00C(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  int v5;
  _QWORD *v7;
  char *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  char *v14;
  int v15;
  int v16;
  uint64_t v17;
  std::string *v18;
  void *v19;
  char *v20;
  int v21;
  int v22;
  char *v23;
  int v24;
  int v25;
  BOOL v26;
  uint64_t v27;
  unsigned int v28;
  std::string *v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  int v36[2];

  *(_QWORD *)v36 = a2;
  v5 = 0;
  if ((sub_19C2C1250((uint64_t)a3, (char **)v36, a3[11].i32[1]) & 1) == 0)
  {
    v7 = (_QWORD *)(a1 + 8);
    while (1)
    {
      v8 = (char *)(*(_QWORD *)v36 + 1);
      v9 = **(_BYTE **)v36;
      if ((char)**(_BYTE **)v36 < 0)
      {
        v10 = v9 + (*v8 << 7);
        v9 = v10 - 128;
        if (*v8 < 0)
        {
          v27 = sub_19C2DBBE0(*(uint64_t *)v36, v10 - 128);
          *(_QWORD *)v36 = v27;
          if (!v27)
            goto LABEL_56;
          v8 = (char *)v27;
          v9 = v28;
          goto LABEL_8;
        }
        v8 = (char *)(*(_QWORD *)v36 + 2);
      }
      *(_QWORD *)v36 = v8;
LABEL_8:
      switch(v9 >> 3)
      {
        case 1u:
          if (v9 != 10)
            goto LABEL_37;
          *(_DWORD *)(a1 + 40) |= 1u;
          v11 = *(_QWORD *)(a1 + 8);
          v12 = (_QWORD *)(v11 & 0xFFFFFFFFFFFFFFFELL);
          if ((v11 & 1) != 0)
            v12 = (_QWORD *)*v12;
          v13 = (uint64_t *)(a1 + 48);
          goto LABEL_22;
        case 2u:
          if (v9 != 16)
            goto LABEL_37;
          v5 |= 4u;
          v14 = v8 + 1;
          v15 = *v8;
          if ((*v8 & 0x80000000) == 0)
            goto LABEL_17;
          v16 = *v14;
          v15 = v15 + (v16 << 7) - 128;
          if (v16 < 0)
          {
            v30 = sub_19C2DBB30((uint64_t)v8, v15);
            *(_QWORD *)v36 = v30;
            *(_DWORD *)(a1 + 64) = v31;
            if (!v30)
              goto LABEL_56;
          }
          else
          {
            v14 = v8 + 2;
LABEL_17:
            *(_QWORD *)v36 = v14;
            *(_DWORD *)(a1 + 64) = v15;
          }
          goto LABEL_35;
        case 3u:
          if (v9 != 26)
            goto LABEL_37;
          *(_DWORD *)(a1 + 40) |= 2u;
          v17 = *(_QWORD *)(a1 + 8);
          v12 = (_QWORD *)(v17 & 0xFFFFFFFFFFFFFFFELL);
          if ((v17 & 1) != 0)
            v12 = (_QWORD *)*v12;
          v13 = (uint64_t *)(a1 + 56);
LABEL_22:
          v18 = (std::string *)sub_19C2CE524(v13, (uint64_t)v12);
          v19 = (void *)sub_19C2DBC94(v18, *(char **)v36, (uint64_t)a3);
          goto LABEL_23;
        case 4u:
          if (v9 != 32)
            goto LABEL_37;
          v5 |= 8u;
          v20 = v8 + 1;
          v21 = *v8;
          if ((*v8 & 0x80000000) == 0)
            goto LABEL_29;
          v22 = *v20;
          v21 = v21 + (v22 << 7) - 128;
          if (v22 < 0)
          {
            v32 = sub_19C2DBB30((uint64_t)v8, v21);
            *(_QWORD *)v36 = v32;
            *(_DWORD *)(a1 + 68) = v33;
            if (!v32)
              goto LABEL_56;
          }
          else
          {
            v20 = v8 + 2;
LABEL_29:
            *(_QWORD *)v36 = v20;
            *(_DWORD *)(a1 + 68) = v21;
          }
          goto LABEL_35;
        case 5u:
          if (v9 != 40)
            goto LABEL_37;
          v5 |= 0x10u;
          v23 = v8 + 1;
          v24 = *v8;
          if ((*v8 & 0x80000000) == 0)
            goto LABEL_34;
          v25 = *v23;
          v24 = v24 + (v25 << 7) - 128;
          if (v25 < 0)
          {
            v34 = sub_19C2DBB30((uint64_t)v8, v24);
            *(_QWORD *)v36 = v34;
            *(_DWORD *)(a1 + 72) = v35;
            if (!v34)
              goto LABEL_56;
          }
          else
          {
            v23 = v8 + 2;
LABEL_34:
            *(_QWORD *)v36 = v23;
            *(_DWORD *)(a1 + 72) = v24;
          }
          goto LABEL_35;
        default:
LABEL_37:
          if (v9)
            v26 = (v9 & 7) == 4;
          else
            v26 = 1;
          if (v26)
          {
            a3[10].i32[0] = v9 - 1;
            goto LABEL_2;
          }
          if (v9 < 0x640)
          {
            if ((*v7 & 1) != 0)
            {
              v29 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFELL) + 8);
            }
            else
            {
              v29 = (std::string *)sub_19C2C138C((unint64_t *)(a1 + 8));
              v8 = *(char **)v36;
            }
            v19 = sub_19C2DC0C0(v9, v29, v8, a3);
          }
          else
          {
            v19 = sub_19C2D4BD0((uint64_t *)(a1 + 16), v9, (unsigned __int8 *)v8, (uint64_t)&unk_1EDB96DA0, (unint64_t *)(a1 + 8), a3);
          }
LABEL_23:
          *(_QWORD *)v36 = v19;
          if (!v19)
          {
LABEL_56:
            *(_QWORD *)v36 = 0;
            goto LABEL_2;
          }
LABEL_35:
          if ((sub_19C2C1250((uint64_t)a3, (char **)v36, a3[11].i32[1]) & 1) != 0)
            goto LABEL_2;
          break;
      }
    }
  }
LABEL_2:
  *(_DWORD *)(a1 + 40) |= v5;
  return *(_QWORD *)v36;
}

char *sub_19C2BF330(uint64_t a1, char *a2, unint64_t *a3)
{
  char *v4;
  int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  char *v19;
  char *v20;
  uint64_t v21;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;

  v4 = a2;
  v6 = *(_DWORD *)(a1 + 40);
  if ((v6 & 1) == 0)
  {
    if ((v6 & 4) == 0)
      goto LABEL_3;
LABEL_11:
    if (*a3 <= (unint64_t)v4)
      v4 = sub_19C2CEBA4((uint64_t)a3, v4);
    v8 = *(_DWORD *)(a1 + 64);
    *v4 = 16;
    if (v8 > 0x7F)
    {
      v4[1] = v8 | 0x80;
      v10 = v8 >> 7;
      if (v8 >> 14)
      {
        v4 += 3;
        do
        {
          *(v4 - 1) = v10 | 0x80;
          v13 = v10 >> 7;
          ++v4;
          v14 = v10 >> 14;
          v10 >>= 7;
        }
        while (v14);
        *(v4 - 1) = v13;
        if ((v6 & 2) != 0)
          goto LABEL_27;
      }
      else
      {
        v4[2] = v10;
        v4 += 3;
        if ((v6 & 2) != 0)
          goto LABEL_27;
      }
    }
    else
    {
      v4[1] = v8;
      v4 += 2;
      if ((v6 & 2) != 0)
        goto LABEL_27;
    }
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_28;
  }
  v4 = sub_19C2BF5D4(a3, 1, *(_QWORD *)(a1 + 48) & 0xFFFFFFFFFFFFFFFELL, a2);
  if ((v6 & 4) != 0)
    goto LABEL_11;
LABEL_3:
  if ((v6 & 2) == 0)
    goto LABEL_4;
LABEL_27:
  v4 = sub_19C2BF5D4(a3, 3, *(_QWORD *)(a1 + 56) & 0xFFFFFFFFFFFFFFFELL, v4);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_39;
    goto LABEL_6;
  }
LABEL_28:
  if (*a3 <= (unint64_t)v4)
    v4 = sub_19C2CEBA4((uint64_t)a3, v4);
  v15 = *(_DWORD *)(a1 + 68);
  *v4 = 32;
  if (v15 > 0x7F)
  {
    v4[1] = v15 | 0x80;
    v16 = v15 >> 7;
    if (v15 >> 14)
    {
      v4 += 3;
      do
      {
        *(v4 - 1) = v16 | 0x80;
        v17 = v16 >> 7;
        ++v4;
        v18 = v16 >> 14;
        v16 >>= 7;
      }
      while (v18);
      *(v4 - 1) = v17;
      if ((v6 & 0x10) == 0)
        goto LABEL_39;
    }
    else
    {
      v4[2] = v16;
      v4 += 3;
      if ((v6 & 0x10) == 0)
        goto LABEL_39;
    }
  }
  else
  {
    v4[1] = v15;
    v4 += 2;
    if ((v6 & 0x10) == 0)
      goto LABEL_39;
  }
LABEL_6:
  if (*a3 <= (unint64_t)v4)
    v4 = sub_19C2CEBA4((uint64_t)a3, v4);
  v7 = *(_DWORD *)(a1 + 72);
  *v4 = 40;
  if (v7 > 0x7F)
  {
    v4[1] = v7 | 0x80;
    v9 = v7 >> 7;
    if (v7 >> 14)
    {
      v4 += 3;
      do
      {
        *(v4 - 1) = v9 | 0x80;
        v11 = v9 >> 7;
        ++v4;
        v12 = v9 >> 14;
        v9 >>= 7;
      }
      while (v12);
      *(v4 - 1) = v11;
    }
    else
    {
      v4[2] = v9;
      v4 += 3;
    }
  }
  else
  {
    v4[1] = v7;
    v4 += 2;
  }
LABEL_39:
  v19 = sub_19C2D5804(a1 + 16, 200, 0x20000000, v4, (uint64_t *)a3);
  v20 = v19;
  v21 = *(_QWORD *)(a1 + 8);
  if ((v21 & 1) == 0)
    return v20;
  v23 = v21 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v23 + 31) < 0)
  {
    v24 = *(void **)(v23 + 8);
    v25 = *(_QWORD *)(v23 + 16);
  }
  else
  {
    v24 = (void *)(v23 + 8);
    LODWORD(v25) = *(unsigned __int8 *)(v23 + 31);
  }
  if ((uint64_t)(*a3 - (_QWORD)v19) >= (int)v25)
  {
    v26 = (int)v25;
    memcpy(v19, v24, (int)v25);
    v20 += v26;
    return v20;
  }
  return sub_19C2CECB4((uint64_t *)a3, (char *)v24, v25, (unint64_t)v19);
}

char *sub_19C2BF5D4(unint64_t *a1, int a2, uint64_t a3, char *a4)
{
  int64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  _BYTE *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  char *v15;
  const void *v16;

  if (*(char *)(a3 + 23) < 0)
  {
    v4 = *(_QWORD *)(a3 + 8);
    if (v4 > 127)
      return sub_19C2CEEC8(a1, a2, (void **)a3, a4);
  }
  else
  {
    v4 = *(unsigned __int8 *)(a3 + 23);
  }
  v5 = 8 * a2;
  v6 = 1;
  v7 = 2;
  v8 = 3;
  v9 = 4;
  if ((8 * a2) >> 28)
    v9 = 5;
  if (v5 >= 0x200000)
    v8 = v9;
  if (v5 >= 0x4000)
    v7 = v8;
  if (v5 >= 0x80)
    v6 = v7;
  if ((uint64_t)(*a1 + ~(unint64_t)&a4[v6] + 16) < v4)
    return sub_19C2CEEC8(a1, a2, (void **)a3, a4);
  v10 = v5 | 2;
  if ((v5 | 2) > 0x7F)
  {
    *a4 = v5 | 0x82;
    v12 = v5 >> 7;
    if (v10 >> 14)
    {
      v11 = a4 + 2;
      do
      {
        *(v11 - 1) = v12 | 0x80;
        v13 = v12 >> 7;
        ++v11;
        v14 = v12 >> 14;
        v12 >>= 7;
      }
      while (v14);
      *(v11 - 1) = v13;
    }
    else
    {
      a4[1] = v12;
      v11 = a4 + 2;
    }
  }
  else
  {
    *a4 = v10;
    v11 = a4 + 1;
  }
  *v11 = v4;
  v15 = v11 + 1;
  if (*(char *)(a3 + 23) >= 0)
    v16 = (const void *)a3;
  else
    v16 = *(const void **)a3;
  memcpy(v15, v16, v4);
  return &v15[v4];
}

uint64_t sub_19C2BF6EC(uint64_t a1)
{
  uint64_t result;
  int v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  result = sub_19C2D8398(a1 + 16);
  v3 = *(_DWORD *)(a1 + 40);
  if ((v3 & 0x1F) == 0)
    goto LABEL_8;
  if ((v3 & 1) != 0)
  {
    v5 = *(_QWORD *)(a1 + 48) & 0xFFFFFFFFFFFFFFFELL;
    v6 = *(unsigned __int8 *)(v5 + 23);
    v7 = *(_QWORD *)(v5 + 8);
    if ((v6 & 0x80u) == 0)
      v7 = v6;
    result += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v3 & 2) == 0)
    {
LABEL_4:
      if ((v3 & 4) == 0)
        goto LABEL_5;
LABEL_16:
      result += ((9 * (__clz(*(_DWORD *)(a1 + 64) | 1) ^ 0x1F) + 73) >> 6) + 1;
      if ((v3 & 8) == 0)
      {
LABEL_6:
        if ((v3 & 0x10) == 0)
          goto LABEL_8;
        goto LABEL_7;
      }
      goto LABEL_17;
    }
  }
  else if ((v3 & 2) == 0)
  {
    goto LABEL_4;
  }
  v8 = *(_QWORD *)(a1 + 56) & 0xFFFFFFFFFFFFFFFELL;
  v9 = *(unsigned __int8 *)(v8 + 23);
  v10 = *(_QWORD *)(v8 + 8);
  if ((v9 & 0x80u) == 0)
    v10 = v9;
  result += v10 + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v3 & 4) != 0)
    goto LABEL_16;
LABEL_5:
  if ((v3 & 8) == 0)
    goto LABEL_6;
LABEL_17:
  result += ((9 * (__clz(*(_DWORD *)(a1 + 68) | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v3 & 0x10) != 0)
LABEL_7:
    result += ((9 * (__clz(*(_DWORD *)(a1 + 72) | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_8:
  v4 = *(_QWORD *)(a1 + 8);
  if ((v4 & 1) != 0)
  {
    v11 = v4 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v11 + 31) < 0)
      v12 = *(_QWORD *)(v11 + 16);
    else
      v12 = *(unsigned __int8 *)(v11 + 31);
    result += v12;
  }
  *(_DWORD *)(a1 + 44) = result;
  return result;
}

void sub_19C2BF85C(uint64_t a1, uint64_t (***a2)(), uint64_t a3)
{
  if (*a2 != &off_1E3D34540)
    sub_19C2C1B24(a1, (uint64_t)a2, a3);
  sub_19C2BF884(a1, (uint64_t)a2);
}

void sub_19C2BF884(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  std::string *v9;
  int v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  int v13;
  __int128 *v14;
  uint64_t v15;
  _QWORD *v16;
  __int128 *v17;
  uint64_t v18;
  _QWORD *v19;
  char v20;
  std::string v21[2];

  if (a2 == a1)
  {
    sub_19C2CF5C8((uint64_t)v21, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece.pb.cc", 375);
    v4 = sub_19C2CF5E0(v21, "CHECK failed: (&from) != (this): ");
    sub_19C2CF710((uint64_t)&v20, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_19C2CF718((uint64_t)v21);
  }
  sub_19C2D36CC(a1 + 16, a2 + 16);
  v5 = *(_QWORD *)(a2 + 8);
  if ((v5 & 1) != 0)
  {
    v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
    v7 = (v5 & 0xFFFFFFFFFFFFFFFELL) + 8;
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & 1) != 0)
      v9 = (std::string *)((v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
    else
      v9 = (std::string *)sub_19C2C138C((unint64_t *)(a1 + 8));
    v10 = *(char *)(v6 + 31);
    if (v10 >= 0)
      v11 = (const std::string::value_type *)v7;
    else
      v11 = *(const std::string::value_type **)(v6 + 8);
    if (v10 >= 0)
      v12 = *(unsigned __int8 *)(v6 + 31);
    else
      v12 = *(_QWORD *)(v6 + 16);
    std::string::append(v9, v11, v12);
  }
  v13 = *(_DWORD *)(a2 + 40);
  if ((v13 & 0x1F) != 0)
  {
    if ((v13 & 1) != 0)
    {
      v14 = (__int128 *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFFELL);
      *(_DWORD *)(a1 + 40) |= 1u;
      v15 = *(_QWORD *)(a1 + 8);
      v16 = (_QWORD *)(v15 & 0xFFFFFFFFFFFFFFFELL);
      if ((v15 & 1) != 0)
        v16 = (_QWORD *)*v16;
      sub_19C2CE4EC((uint64_t *)(a1 + 48), v14, (uint64_t)v16);
      if ((v13 & 2) == 0)
      {
LABEL_16:
        if ((v13 & 4) == 0)
          goto LABEL_17;
        goto LABEL_28;
      }
    }
    else if ((v13 & 2) == 0)
    {
      goto LABEL_16;
    }
    v17 = (__int128 *)(*(_QWORD *)(a2 + 56) & 0xFFFFFFFFFFFFFFFELL);
    *(_DWORD *)(a1 + 40) |= 2u;
    v18 = *(_QWORD *)(a1 + 8);
    v19 = (_QWORD *)(v18 & 0xFFFFFFFFFFFFFFFELL);
    if ((v18 & 1) != 0)
      v19 = (_QWORD *)*v19;
    sub_19C2CE4EC((uint64_t *)(a1 + 56), v17, (uint64_t)v19);
    if ((v13 & 4) == 0)
    {
LABEL_17:
      if ((v13 & 8) == 0)
        goto LABEL_18;
      goto LABEL_29;
    }
LABEL_28:
    *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
    if ((v13 & 8) == 0)
    {
LABEL_18:
      if ((v13 & 0x10) == 0)
      {
LABEL_20:
        *(_DWORD *)(a1 + 40) |= v13;
        return;
      }
LABEL_19:
      *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
      goto LABEL_20;
    }
LABEL_29:
    *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
    if ((v13 & 0x10) == 0)
      goto LABEL_20;
    goto LABEL_19;
  }
}

void sub_19C2BFA04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19C2BFA1C(uint64_t a1)
{
  return sub_19C2D489C(a1 + 16);
}

uint64_t *sub_19C2BFA24(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t *result;
  uint64_t *v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;

  sub_19C2D468C(a1 + 16, a2 + 16);
  v5 = (uint64_t *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a2 + 8);
  if ((v4 & 1) != 0)
  {
    if ((v6 & 1) == 0)
    {
      v10 = sub_19C2C138C((unint64_t *)(a2 + 8));
      v4 = *v5;
      if ((*v5 & 1) != 0)
        goto LABEL_6;
LABEL_21:
      v11 = sub_19C2C138C((unint64_t *)(a1 + 8));
      goto LABEL_7;
    }
  }
  else if ((v6 & 1) == 0)
  {
    v7 = 0;
    v8 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a2 + 40) = v8;
    v9 = (uint64_t *)(v4 & 0xFFFFFFFFFFFFFFFELL);
    goto LABEL_9;
  }
  v10 = (v6 & 0xFFFFFFFFFFFFFFFELL) + 8;
  if ((v4 & 1) == 0)
    goto LABEL_21;
LABEL_6:
  v11 = (v4 & 0xFFFFFFFFFFFFFFFELL) + 8;
LABEL_7:
  v12 = *(_QWORD *)(v11 + 16);
  v13 = *(_OWORD *)v11;
  v14 = *(_QWORD *)(v10 + 16);
  *(_OWORD *)v11 = *(_OWORD *)v10;
  *(_QWORD *)(v11 + 16) = v14;
  *(_OWORD *)v10 = v13;
  *(_QWORD *)(v10 + 16) = v12;
  v15 = *(_QWORD *)(a1 + 8);
  LODWORD(v14) = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = v14;
  v9 = (uint64_t *)(v15 & 0xFFFFFFFFFFFFFFFELL);
  if ((v15 & 1) != 0)
  {
    v16 = *v9;
    v7 = 1;
    goto LABEL_10;
  }
  v7 = 0;
LABEL_9:
  v16 = (uint64_t)v9;
LABEL_10:
  if (*(uint64_t **)(a1 + 48) != &qword_1EE41C5D8 || *(uint64_t **)(a2 + 48) != &qword_1EE41C5D8)
  {
    v17 = sub_19C2CE524((uint64_t *)(a1 + 48), v16);
    v18 = sub_19C2CE524((uint64_t *)(a2 + 48), v16);
    v19 = v17[2];
    v20 = *(_OWORD *)v17;
    v21 = v18[2];
    *(_OWORD *)v17 = *(_OWORD *)v18;
    v17[2] = v21;
    *(_OWORD *)v18 = v20;
    v18[2] = v19;
    v7 = *v5 & 1;
    v9 = (uint64_t *)(*v5 & 0xFFFFFFFFFFFFFFFELL);
  }
  result = (uint64_t *)(a1 + 56);
  if (v7)
    v9 = (uint64_t *)*v9;
  if ((uint64_t *)*result != &qword_1EE41C5D8 || *(uint64_t **)(a2 + 56) != &qword_1EE41C5D8)
  {
    v23 = sub_19C2CE524(result, (uint64_t)v9);
    result = sub_19C2CE524((uint64_t *)(a2 + 56), (uint64_t)v9);
    v24 = v23[2];
    v25 = *(_OWORD *)v23;
    v26 = result[2];
    *(_OWORD *)v23 = *(_OWORD *)result;
    v23[2] = v26;
    *(_OWORD *)result = v25;
    result[2] = v24;
  }
  v27 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 64) = v27;
  LODWORD(v27) = *(_DWORD *)(a1 + 72);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a2 + 72) = v27;
  return result;
}

_QWORD *sub_19C2BFC18@<X0>(_QWORD *a1@<X8>)
{
  return sub_19C2A6D48(a1, "sentencepiece.SentencePieceText.SentencePiece");
}

uint64_t sub_19C2BFC28(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &off_1E3D33F98;
  *(_QWORD *)(a1 + 8) = a2;
  sub_19C2CFB64(a1 + 16, a2);
  *(_QWORD *)(a1 + 48) = a2;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  if (atomic_load(dword_1EDB96CC8))
    sub_19C2DA308(dword_1EDB96CC8);
  *(_QWORD *)(a1 + 72) = &qword_1EE41C5D8;
  *(_DWORD *)(a1 + 80) = 0;
  return a1;
}

void sub_19C2BFCAC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;

  sub_19C2C159C(v2);
  sub_19C2CFC40(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19C2BFCCC(uint64_t a1)
{
  sub_19C2BFD0C(a1);
  sub_19C2BEEB4((uint64_t *)(a1 + 8));
  sub_19C2C159C((uint64_t *)(a1 + 48));
  sub_19C2CFC40(a1 + 16);
  return a1;
}

uint64_t sub_19C2BFD0C(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  std::string *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  std::string v10[2];

  v1 = result;
  v2 = *(_QWORD *)(result + 8);
  v3 = (_QWORD *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  if ((v2 & 1) == 0)
  {
    if (!v3)
      goto LABEL_4;
    goto LABEL_3;
  }
  if (*v3)
  {
LABEL_3:
    sub_19C2CF5C8((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece.pb.cc", 486);
    v4 = sub_19C2CF5E0(v10, "CHECK failed: GetArena() == nullptr: ");
    sub_19C2CF710((uint64_t)&v9, (const char **)&v4->__r_.__value_.__l.__data_);
    result = sub_19C2CF718((uint64_t)v10);
  }
LABEL_4:
  v6 = *(uint64_t **)(v1 + 72);
  v5 = (uint64_t *)(v1 + 72);
  if (v6 != &qword_1EE41C5D8)
  {
    v7 = sub_19C2C1180(v5);
    v8 = v7;
    if (*(char *)(v7 + 23) < 0)
      operator delete(*(void **)v7);
    return MEMORY[0x1A1AD355C](v8, 0x1012C40EC159624);
  }
  return result;
}

void sub_19C2BFDD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19C2BFDEC(uint64_t a1)
{
  sub_19C2BFCCC(a1);
  JUMPOUT(0x1A1AD355CLL);
}

void *sub_19C2BFE10()
{
  if (atomic_load(dword_1EDB96CC8))
    sub_19C2DA308(dword_1EDB96CC8);
  return &unk_1EDB96D48;
}

unsigned __int8 *sub_19C2BFE48(uint64_t a1)
{
  unsigned __int8 *result;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;

  sub_19C2D3630((unsigned __int8 *)(a1 + 16));
  result = sub_19C2C1444((unsigned __int8 *)(a1 + 48));
  if ((*(_BYTE *)(a1 + 40) & 1) != 0)
  {
    v3 = *(_QWORD *)(a1 + 72) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v3 + 23) < 0)
    {
      **(_BYTE **)v3 = 0;
      *(_QWORD *)(v3 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v3 = 0;
      *(_BYTE *)(v3 + 23) = 0;
    }
  }
  *(_DWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  v4 = *(_QWORD *)(a1 + 8);
  if ((v4 & 1) != 0)
  {
    v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v5 + 31) < 0)
    {
      **(_BYTE **)(v5 + 8) = 0;
      *(_QWORD *)(v5 + 16) = 0;
    }
    else
    {
      *(_BYTE *)(v5 + 8) = 0;
      *(_BYTE *)(v5 + 31) = 0;
    }
  }
  return result;
}

uint64_t sub_19C2BFED8(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  int v5;
  _QWORD *v7;
  char *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  BOOL v13;
  void *v14;
  char *v15;
  unsigned __int8 *v16;
  int *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  std::string *v25;
  uint64_t v26;
  unsigned int v27;
  std::string *v28;
  int v29[2];

  *(_QWORD *)v29 = a2;
  v5 = 0;
  if ((sub_19C2C1250((uint64_t)a3, (char **)v29, a3[11].i32[1]) & 1) == 0)
  {
    v7 = (_QWORD *)(a1 + 8);
    while (1)
    {
      v8 = (char *)(*(_QWORD *)v29 + 1);
      v9 = **(_BYTE **)v29;
      if (((char)**(_BYTE **)v29 & 0x80000000) == 0)
        goto LABEL_7;
      v10 = v9 + (*v8 << 7);
      v9 = v10 - 128;
      if ((*v8 & 0x80000000) == 0)
        break;
      v26 = sub_19C2DBBE0(*(uint64_t *)v29, v10 - 128);
      *(_QWORD *)v29 = v26;
      if (!v26)
        goto LABEL_48;
      v8 = (char *)v26;
      v9 = v27;
LABEL_8:
      v11 = v9 >> 3;
      if (v9 >> 3 == 3)
      {
        if (v9 == 29)
        {
          v5 |= 2u;
          *(_DWORD *)(a1 + 80) = *(_DWORD *)v8;
          *(_QWORD *)v29 = v8 + 4;
          goto LABEL_44;
        }
        goto LABEL_14;
      }
      if (v11 == 2)
      {
        if (v9 == 18)
        {
          v15 = v8 - 1;
          while (1)
          {
            v16 = (unsigned __int8 *)(v15 + 1);
            *(_QWORD *)v29 = v15 + 1;
            v17 = *(int **)(a1 + 64);
            if (!v17)
              break;
            v18 = *(int *)(a1 + 56);
            v19 = *v17;
            if ((int)v18 >= *v17)
            {
              if (v19 == *(_DWORD *)(a1 + 60))
              {
LABEL_29:
                sub_19C2E0CEC(a1 + 48, v19 + 1);
                v17 = *(int **)(a1 + 64);
                v19 = *v17;
              }
              *v17 = v19 + 1;
              v20 = sub_19C2C0F14(*(_QWORD *)(a1 + 48));
              v21 = *(_QWORD *)(a1 + 64);
              v22 = *(int *)(a1 + 56);
              *(_DWORD *)(a1 + 56) = v22 + 1;
              *(_QWORD *)(v21 + 8 * v22 + 8) = v20;
              v16 = *(unsigned __int8 **)v29;
              goto LABEL_31;
            }
            *(_DWORD *)(a1 + 56) = v18 + 1;
            v20 = *(_QWORD *)&v17[2 * v18 + 2];
LABEL_31:
            v15 = (char *)sub_19C2C018C(a3, v20, v16);
            *(_QWORD *)v29 = v15;
            if (!v15)
              goto LABEL_48;
            if (*(_QWORD *)a3 <= (unint64_t)v15 || *v15 != 18)
              goto LABEL_44;
          }
          v19 = *(_DWORD *)(a1 + 60);
          goto LABEL_29;
        }
LABEL_14:
        if (v9)
          v13 = (v9 & 7) == 4;
        else
          v13 = 1;
        if (v13)
        {
          a3[10].i32[0] = v9 - 1;
          goto LABEL_2;
        }
        if (v9 < 0x640)
        {
          if ((*v7 & 1) != 0)
          {
            v28 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFELL) + 8);
          }
          else
          {
            v28 = (std::string *)sub_19C2C138C((unint64_t *)(a1 + 8));
            v8 = *(char **)v29;
          }
          v14 = sub_19C2DC0C0(v9, v28, v8, a3);
        }
        else
        {
          v14 = sub_19C2D4BD0((uint64_t *)(a1 + 16), v9, (unsigned __int8 *)v8, (uint64_t)&unk_1EDB96D48, (unint64_t *)(a1 + 8), a3);
        }
        goto LABEL_43;
      }
      if (v11 != 1 || v9 != 10)
        goto LABEL_14;
      *(_DWORD *)(a1 + 40) |= 1u;
      v23 = *(_QWORD *)(a1 + 8);
      v24 = (_QWORD *)(v23 & 0xFFFFFFFFFFFFFFFELL);
      if ((v23 & 1) != 0)
        v24 = (_QWORD *)*v24;
      v25 = (std::string *)sub_19C2CE524((uint64_t *)(a1 + 72), (uint64_t)v24);
      v14 = (void *)sub_19C2DBC94(v25, *(char **)v29, (uint64_t)a3);
LABEL_43:
      *(_QWORD *)v29 = v14;
      if (!v14)
      {
LABEL_48:
        *(_QWORD *)v29 = 0;
        goto LABEL_2;
      }
LABEL_44:
      if ((sub_19C2C1250((uint64_t)a3, (char **)v29, a3[11].i32[1]) & 1) != 0)
        goto LABEL_2;
    }
    v8 = (char *)(*(_QWORD *)v29 + 2);
LABEL_7:
    *(_QWORD *)v29 = v8;
    goto LABEL_8;
  }
LABEL_2:
  *(_DWORD *)(a1 + 40) |= v5;
  return *(_QWORD *)v29;
}

uint64_t sub_19C2C018C(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t result;
  unsigned int v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  int v15;

  v6 = (char)*a3;
  v7 = *a3;
  if (v6 < 0)
  {
    result = sub_19C2DBC24((uint64_t)a3, v7);
    if (!result)
      return result;
    v8 = result;
    v7 = v10;
  }
  else
  {
    v8 = (uint64_t)(a3 + 1);
  }
  v11 = sub_19C2C1670((uint64_t)a1, v8, v7);
  v12 = a1[11].i32[0];
  v13 = __OFSUB__(v12--, 1);
  a1[11].i32[0] = v12;
  if (v12 < 0 != v13)
    return 0;
  v14 = v11;
  result = sub_19C2BF00C(a2, v8, a1);
  if (!result)
    return result;
  ++a1[11].i32[0];
  if (a1[10].i32[0])
    return 0;
  v15 = a1[3].i32[1] + v14;
  a1[3].i32[1] = v15;
  *a1 = (int32x2_t)(*(_QWORD *)&a1[1] + (v15 & (v15 >> 31)));
  return result;
}

char *sub_19C2C0250(uint64_t a1, char *a2, unint64_t *a3)
{
  char *v4;
  int v6;
  int v7;
  int i;
  uint64_t v9;
  unsigned int v10;
  char *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  char *v16;
  char *v17;
  uint64_t v18;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;

  v4 = a2;
  v6 = *(_DWORD *)(a1 + 40);
  if ((v6 & 1) != 0)
    v4 = sub_19C2BF5D4(a3, 1, *(_QWORD *)(a1 + 72) & 0xFFFFFFFFFFFFFFFELL, a2);
  v7 = *(_DWORD *)(a1 + 56);
  if (v7)
  {
    for (i = 0; i != v7; ++i)
    {
      if (*a3 <= (unint64_t)v4)
        v4 = sub_19C2CEBA4((uint64_t)a3, v4);
      v9 = sub_19C2B37D4(a1 + 48, i);
      *v4 = 18;
      v10 = *(_DWORD *)(v9 + 44);
      if (v10 > 0x7F)
      {
        v4[1] = v10 | 0x80;
        v12 = v10 >> 7;
        if (v10 >> 14)
        {
          v11 = v4 + 3;
          do
          {
            *(v11 - 1) = v12 | 0x80;
            v13 = v12 >> 7;
            ++v11;
            v14 = v12 >> 14;
            v12 >>= 7;
          }
          while (v14);
          *(v11 - 1) = v13;
        }
        else
        {
          v4[2] = v12;
          v11 = v4 + 3;
        }
      }
      else
      {
        v4[1] = v10;
        v11 = v4 + 2;
      }
      v4 = sub_19C2BF330(v9, v11, a3);
    }
  }
  if ((v6 & 2) != 0)
  {
    if (*a3 <= (unint64_t)v4)
      v4 = sub_19C2CEBA4((uint64_t)a3, v4);
    v15 = *(_DWORD *)(a1 + 80);
    *v4 = 29;
    *(_DWORD *)(v4 + 1) = v15;
    v4 += 5;
  }
  v16 = sub_19C2D5804(a1 + 16, 200, 0x20000000, v4, (uint64_t *)a3);
  v17 = v16;
  v18 = *(_QWORD *)(a1 + 8);
  if ((v18 & 1) == 0)
    return v17;
  v20 = v18 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v20 + 31) < 0)
  {
    v21 = *(void **)(v20 + 8);
    v22 = *(_QWORD *)(v20 + 16);
  }
  else
  {
    v21 = (void *)(v20 + 8);
    LODWORD(v22) = *(unsigned __int8 *)(v20 + 31);
  }
  if ((uint64_t)(*a3 - (_QWORD)v16) >= (int)v22)
  {
    v23 = (int)v22;
    memcpy(v16, v21, (int)v22);
    v17 += v23;
    return v17;
  }
  return sub_19C2CECB4((uint64_t *)a3, (char *)v21, v22, (unint64_t)v16);
}

uint64_t sub_19C2C0430(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v16;
  uint64_t v17;

  v2 = sub_19C2D8398(a1 + 16);
  v3 = *(int *)(a1 + 56);
  v4 = v2 + v3;
  v5 = *(_QWORD *)(a1 + 64);
  if (v5)
    v6 = (uint64_t *)(v5 + 8);
  else
    v6 = 0;
  if ((_DWORD)v3)
  {
    v7 = 8 * v3;
    do
    {
      v8 = *v6++;
      v9 = sub_19C2BF6EC(v8);
      v4 += v9 + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6);
      v7 -= 8;
    }
    while (v7);
  }
  v10 = *(_DWORD *)(a1 + 40);
  if ((v10 & 3) != 0)
  {
    if ((v10 & 1) != 0)
    {
      v11 = *(_QWORD *)(a1 + 72) & 0xFFFFFFFFFFFFFFFELL;
      v12 = *(unsigned __int8 *)(v11 + 23);
      v13 = *(_QWORD *)(v11 + 8);
      if ((v12 & 0x80u) == 0)
        v13 = v12;
      v4 += v13 + ((9 * (__clz(v13 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    if ((v10 & 2) != 0)
      v4 += 5;
  }
  v14 = *(_QWORD *)(a1 + 8);
  if ((v14 & 1) != 0)
  {
    v16 = v14 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v16 + 31) < 0)
      v17 = *(_QWORD *)(v16 + 16);
    else
      v17 = *(unsigned __int8 *)(v16 + 31);
    v4 += v17;
  }
  *(_DWORD *)(a1 + 44) = v4;
  return v4;
}

void sub_19C2C0538(uint64_t a1, uint64_t (***a2)(), uint64_t a3)
{
  if (*a2 != &off_1E3D33F98)
    sub_19C2C1B24(a1, (uint64_t)a2, a3);
  sub_19C2C0560(a1, (uint64_t)a2);
}

void sub_19C2C0560(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  std::string *v9;
  int v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  int v13;
  __int128 *v14;
  uint64_t v15;
  _QWORD *v16;
  char v17;
  std::string v18[2];

  if (a2 == a1)
  {
    sub_19C2CF5C8((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece.pb.cc", 674);
    v4 = sub_19C2CF5E0(v18, "CHECK failed: (&from) != (this): ");
    sub_19C2CF710((uint64_t)&v17, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_19C2CF718((uint64_t)v18);
  }
  sub_19C2D36CC(a1 + 16, a2 + 16);
  v5 = *(_QWORD *)(a2 + 8);
  if ((v5 & 1) != 0)
  {
    v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
    v7 = (v5 & 0xFFFFFFFFFFFFFFFELL) + 8;
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & 1) != 0)
      v9 = (std::string *)((v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
    else
      v9 = (std::string *)sub_19C2C138C((unint64_t *)(a1 + 8));
    v10 = *(char *)(v6 + 31);
    if (v10 >= 0)
      v11 = (const std::string::value_type *)v7;
    else
      v11 = *(const std::string::value_type **)(v6 + 8);
    if (v10 >= 0)
      v12 = *(unsigned __int8 *)(v6 + 31);
    else
      v12 = *(_QWORD *)(v6 + 16);
    std::string::append(v9, v11, v12);
  }
  sub_19C2C1728(a1 + 48, a2 + 48);
  v13 = *(_DWORD *)(a2 + 40);
  if ((v13 & 3) != 0)
  {
    if ((v13 & 1) != 0)
    {
      v14 = (__int128 *)(*(_QWORD *)(a2 + 72) & 0xFFFFFFFFFFFFFFFELL);
      *(_DWORD *)(a1 + 40) |= 1u;
      v15 = *(_QWORD *)(a1 + 8);
      v16 = (_QWORD *)(v15 & 0xFFFFFFFFFFFFFFFELL);
      if ((v15 & 1) != 0)
        v16 = (_QWORD *)*v16;
      sub_19C2CE4EC((uint64_t *)(a1 + 72), v14, (uint64_t)v16);
    }
    if ((v13 & 2) != 0)
      *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
    *(_DWORD *)(a1 + 40) |= v13;
  }
}

void sub_19C2C068C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19C2C06A4(uint64_t a1)
{
  uint64_t result;

  result = sub_19C2D489C(a1 + 16);
  if ((_DWORD)result)
    return sub_19C2C06DC(a1 + 48);
  return result;
}

BOOL sub_19C2C06DC(uint64_t a1)
{
  int v2;
  int v3;
  BOOL v4;
  uint64_t v5;

  v2 = *(_DWORD *)(a1 + 8);
  do
  {
    v3 = v2;
    v4 = __OFSUB__(v2--, 1);
    if (v2 < 0 != v4)
      break;
    v5 = sub_19C2B37D4(a1, v2);
  }
  while ((sub_19C2D489C(v5 + 16) & 1) != 0);
  return v3 < 1;
}

_QWORD *sub_19C2C0730@<X0>(_QWORD *a1@<X8>)
{
  return sub_19C2A6D48(a1, "sentencepiece.SentencePieceText");
}

uint64_t sub_19C2C0740(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &off_1E3D34150;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a2;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  if (atomic_load(dword_1EE41AAD8))
    sub_19C2DA308(dword_1EE41AAD8);
  return a1;
}

void sub_19C2C079C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_19C2C18D0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19C2C07B4(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  v3 = (uint64_t *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 8);
  v4 = (_QWORD *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  if ((v2 & 1) != 0)
  {
    if (!*v4)
      goto LABEL_4;
    goto LABEL_3;
  }
  if (v4)
  {
LABEL_3:
    sub_19C2CF5C8((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece.pb.cc", 755);
    v5 = sub_19C2CF5E0(v8, "CHECK failed: GetArena() == nullptr: ");
    sub_19C2CF710((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_19C2CF718((uint64_t)v8);
  }
LABEL_4:
  sub_19C2BEEB4(v3);
  sub_19C2C18D0((uint64_t *)(a1 + 16));
  return a1;
}

void sub_19C2C0848(void *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  sub_19C2CDAC8(a1);
}

void sub_19C2C086C(uint64_t a1)
{
  sub_19C2C07B4(a1);
  JUMPOUT(0x1A1AD355CLL);
}

unsigned __int8 *sub_19C2C0890(uint64_t a1)
{
  unsigned __int8 *result;
  uint64_t v3;
  unint64_t v4;

  result = sub_19C2C14F0((unsigned __int8 *)(a1 + 16));
  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 1) != 0)
  {
    v4 = v3 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v4 + 31) < 0)
    {
      **(_BYTE **)(v4 + 8) = 0;
      *(_QWORD *)(v4 + 16) = 0;
    }
    else
    {
      *(_BYTE *)(v4 + 8) = 0;
      *(_BYTE *)(v4 + 31) = 0;
    }
  }
  return result;
}

char *sub_19C2C08E0(uint64_t a1, char *a2, int32x2_t *a3)
{
  _QWORD *v5;
  char *v6;
  unsigned int v7;
  unsigned int v8;
  BOOL v9;
  std::string *v10;
  char *v11;
  unsigned __int8 *v12;
  int *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  unsigned int v20;
  char *v22;

  v22 = a2;
  if ((sub_19C2C1250((uint64_t)a3, &v22, a3[11].i32[1]) & 1) == 0)
  {
    v5 = (_QWORD *)(a1 + 8);
    while (1)
    {
      v6 = v22 + 1;
      v7 = *v22;
      if ((*v22 & 0x80000000) == 0)
        goto LABEL_6;
      v8 = v7 + (*v6 << 7);
      v7 = v8 - 128;
      if ((*v6 & 0x80000000) == 0)
        break;
      v19 = (char *)sub_19C2DBBE0((uint64_t)v22, v8 - 128);
      v22 = v19;
      if (!v19)
        return 0;
      v6 = v19;
      v7 = v20;
LABEL_7:
      if (v7 == 10)
      {
        v11 = v6 - 1;
        while (1)
        {
          v12 = (unsigned __int8 *)(v11 + 1);
          v22 = v11 + 1;
          v13 = *(int **)(a1 + 32);
          if (!v13)
            break;
          v14 = *(int *)(a1 + 24);
          v15 = *v13;
          if ((int)v14 >= *v13)
          {
            if (v15 == *(_DWORD *)(a1 + 28))
            {
LABEL_22:
              sub_19C2E0CEC(a1 + 16, v15 + 1);
              v13 = *(int **)(a1 + 32);
              v15 = *v13;
            }
            *v13 = v15 + 1;
            v16 = sub_19C2C0FC8(*(_QWORD *)(a1 + 16));
            v17 = *(_QWORD *)(a1 + 32);
            v18 = *(int *)(a1 + 24);
            *(_DWORD *)(a1 + 24) = v18 + 1;
            *(_QWORD *)(v17 + 8 * v18 + 8) = v16;
            v12 = (unsigned __int8 *)v22;
            goto LABEL_24;
          }
          *(_DWORD *)(a1 + 24) = v14 + 1;
          v16 = *(_QWORD *)&v13[2 * v14 + 2];
LABEL_24:
          v11 = (char *)sub_19C2C0ABC(a3, v16, v12);
          v22 = v11;
          if (!v11)
            return 0;
          if (*(_QWORD *)a3 <= (unint64_t)v11 || *v11 != 10)
            goto LABEL_27;
        }
        v15 = *(_DWORD *)(a1 + 28);
        goto LABEL_22;
      }
      if (v7)
        v9 = (v7 & 7) == 4;
      else
        v9 = 1;
      if (v9)
      {
        a3[10].i32[0] = v7 - 1;
        return v22;
      }
      if ((*v5 & 1) != 0)
      {
        v10 = (std::string *)((*v5 & 0xFFFFFFFFFFFFFFFELL) + 8);
      }
      else
      {
        v10 = (std::string *)sub_19C2C138C((unint64_t *)(a1 + 8));
        v6 = v22;
      }
      v22 = (char *)sub_19C2DC0C0(v7, v10, v6, a3);
      if (!v22)
        return 0;
LABEL_27:
      if (sub_19C2C1250((uint64_t)a3, &v22, a3[11].i32[1]))
        return v22;
    }
    v6 = v22 + 2;
LABEL_6:
    v22 = v6;
    goto LABEL_7;
  }
  return v22;
}

uint64_t sub_19C2C0ABC(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t result;
  unsigned int v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  int v15;

  v6 = (char)*a3;
  v7 = *a3;
  if (v6 < 0)
  {
    result = sub_19C2DBC24((uint64_t)a3, v7);
    if (!result)
      return result;
    v8 = result;
    v7 = v10;
  }
  else
  {
    v8 = (uint64_t)(a3 + 1);
  }
  v11 = sub_19C2C1670((uint64_t)a1, v8, v7);
  v12 = a1[11].i32[0];
  v13 = __OFSUB__(v12--, 1);
  a1[11].i32[0] = v12;
  if (v12 < 0 != v13)
    return 0;
  v14 = v11;
  result = sub_19C2BFED8(a2, v8, a1);
  if (!result)
    return result;
  ++a1[11].i32[0];
  if (a1[10].i32[0])
    return 0;
  v15 = a1[3].i32[1] + v14;
  a1[3].i32[1] = v15;
  *a1 = (int32x2_t)(*(_QWORD *)&a1[1] + (v15 & (v15 >> 31)));
  return result;
}

char *sub_19C2C0B80(uint64_t a1, char *__dst, unint64_t *a3)
{
  int v6;
  int i;
  uint64_t v8;
  unsigned int v9;
  char *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;

  v6 = *(_DWORD *)(a1 + 24);
  if (v6)
  {
    for (i = 0; i != v6; ++i)
    {
      if (*a3 <= (unint64_t)__dst)
        __dst = sub_19C2CEBA4((uint64_t)a3, __dst);
      v8 = sub_19C2B38F0(a1 + 16, i);
      *__dst = 10;
      v9 = *(_DWORD *)(v8 + 44);
      if (v9 > 0x7F)
      {
        __dst[1] = v9 | 0x80;
        v11 = v9 >> 7;
        if (v9 >> 14)
        {
          v10 = __dst + 3;
          do
          {
            *(v10 - 1) = v11 | 0x80;
            v12 = v11 >> 7;
            ++v10;
            v13 = v11 >> 14;
            v11 >>= 7;
          }
          while (v13);
          *(v10 - 1) = v12;
        }
        else
        {
          __dst[2] = v11;
          v10 = __dst + 3;
        }
      }
      else
      {
        __dst[1] = v9;
        v10 = __dst + 2;
      }
      __dst = sub_19C2C0250(v8, v10, a3);
    }
  }
  v14 = *(_QWORD *)(a1 + 8);
  if ((v14 & 1) == 0)
    return __dst;
  v16 = v14 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v16 + 31) < 0)
  {
    v17 = *(void **)(v16 + 8);
    v18 = *(_QWORD *)(v16 + 16);
  }
  else
  {
    v17 = (void *)(v16 + 8);
    LODWORD(v18) = *(unsigned __int8 *)(v16 + 31);
  }
  if ((uint64_t)(*a3 - (_QWORD)__dst) >= (int)v18)
  {
    v19 = (int)v18;
    memcpy(__dst, v17, (int)v18);
    __dst += v19;
    return __dst;
  }
  return sub_19C2CECB4((uint64_t *)a3, (char *)v17, v18, (unint64_t)__dst);
}

uint64_t sub_19C2C0CE8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v10;
  uint64_t v11;

  v2 = *(int *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  if (v3)
    v4 = (uint64_t *)(v3 + 8);
  else
    v4 = 0;
  if ((_DWORD)v2)
  {
    v5 = 8 * v2;
    do
    {
      v6 = *v4++;
      v7 = sub_19C2C0430(v6);
      v2 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6);
      v5 -= 8;
    }
    while (v5);
  }
  else
  {
    v2 = 0;
  }
  v8 = *(_QWORD *)(a1 + 8);
  if ((v8 & 1) != 0)
  {
    v10 = v8 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v10 + 31) < 0)
      v11 = *(_QWORD *)(v10 + 16);
    else
      v11 = *(unsigned __int8 *)(v10 + 31);
    v2 += v11;
  }
  *(_DWORD *)(a1 + 40) = v2;
  return v2;
}

void sub_19C2C0D90(uint64_t a1, uint64_t (***a2)(), uint64_t a3)
{
  if (*a2 != &off_1E3D34150)
    sub_19C2C1B24(a1, (uint64_t)a2, a3);
  sub_19C2C0DB8(a1, (uint64_t)a2);
}

void sub_19C2C0DB8(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  std::string *v9;
  int v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  char v13;
  std::string v14[2];

  if (a2 == a1)
  {
    sub_19C2CF5C8((uint64_t)v14, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece.pb.cc", 877);
    v4 = sub_19C2CF5E0(v14, "CHECK failed: (&from) != (this): ");
    sub_19C2CF710((uint64_t)&v13, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_19C2CF718((uint64_t)v14);
  }
  v5 = *(_QWORD *)(a2 + 8);
  if ((v5 & 1) != 0)
  {
    v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
    v7 = (v5 & 0xFFFFFFFFFFFFFFFELL) + 8;
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & 1) != 0)
      v9 = (std::string *)((v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
    else
      v9 = (std::string *)sub_19C2C138C((unint64_t *)(a1 + 8));
    v10 = *(char *)(v6 + 31);
    if (v10 >= 0)
      v11 = (const std::string::value_type *)v7;
    else
      v11 = *(const std::string::value_type **)(v6 + 8);
    if (v10 >= 0)
      v12 = *(unsigned __int8 *)(v6 + 31);
    else
      v12 = *(_QWORD *)(v6 + 16);
    std::string::append(v9, v11, v12);
  }
  sub_19C2C1974(a1 + 16, a2 + 16);
}

void sub_19C2C0E80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_19C2C0E98(uint64_t a1)
{
  return sub_19C2C0EA0(a1 + 16);
}

BOOL sub_19C2C0EA0(uint64_t a1)
{
  int v2;
  int v3;
  BOOL v4;
  uint64_t v5;

  v2 = *(_DWORD *)(a1 + 8);
  do
  {
    v3 = v2;
    v4 = __OFSUB__(v2--, 1);
    if (v2 < 0 != v4)
      break;
    v5 = sub_19C2B38F0(a1, v2);
    if (!sub_19C2D489C(v5 + 16))
      break;
  }
  while (sub_19C2C06DC(v5 + 48));
  return v3 < 1;
}

_QWORD *sub_19C2C0F04@<X0>(_QWORD *a1@<X8>)
{
  return sub_19C2A6D48(a1, "sentencepiece.NBestSentencePieceText");
}

uint64_t sub_19C2C0F14(uint64_t a1)
{
  uint64_t v2;

  if (a1)
  {
    if ((*(_BYTE *)(a1 + 24) & 1) != 0)
      (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), &unk_1E3D31480, 80);
    v2 = sub_19C2CE0C0(a1, 80);
    sub_19C2BECD4(v2, a1);
  }
  else
  {
    v2 = operator new();
    sub_19C2BECD4(v2, 0);
  }
  return v2;
}

void sub_19C2C0FA4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD355C](v1, 0x10A1C40E4A317A1);
  _Unwind_Resume(a1);
}

uint64_t sub_19C2C0FC8(uint64_t a1)
{
  uint64_t v2;

  if (a1)
  {
    if ((*(_BYTE *)(a1 + 24) & 1) != 0)
      (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), &unk_1E3D313B0, 88);
    v2 = sub_19C2CE0C0(a1, 88);
    sub_19C2BFC28(v2, a1);
  }
  else
  {
    v2 = operator new();
    sub_19C2BFC28(v2, 0);
  }
  return v2;
}

void sub_19C2C1058(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD355C](v1, 0x10A1C40431D3885);
  _Unwind_Resume(a1);
}

uint64_t sub_19C2C107C(uint64_t a1)
{
  uint64_t v2;

  if (a1)
  {
    if ((*(_BYTE *)(a1 + 24) & 1) != 0)
      (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), &unk_1E3D31408, 48);
    v2 = sub_19C2CE0C0(a1, 48);
    sub_19C2C0740(v2, a1);
  }
  else
  {
    v2 = operator new();
    sub_19C2C0740(v2, 0);
  }
  return v2;
}

void sub_19C2C110C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD355C](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

uint64_t sub_19C2C1130()
{
  return sub_19C2C0F14(0);
}

uint64_t sub_19C2C1138(uint64_t a1, uint64_t a2)
{
  return sub_19C2C0F14(a2);
}

uint64_t sub_19C2C1140(uint64_t a1)
{
  return *(unsigned int *)(a1 + 44);
}

uint64_t sub_19C2C1148()
{
  return 0;
}

uint64_t sub_19C2C1150()
{
  return sub_19C2C0FC8(0);
}

uint64_t sub_19C2C1158(uint64_t a1, uint64_t a2)
{
  return sub_19C2C0FC8(a2);
}

uint64_t sub_19C2C1160(uint64_t a1)
{
  return *(unsigned int *)(a1 + 44);
}

uint64_t sub_19C2C1168()
{
  return sub_19C2C107C(0);
}

uint64_t sub_19C2C1170(uint64_t a1, uint64_t a2)
{
  return sub_19C2C107C(a2);
}

uint64_t sub_19C2C1178(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

uint64_t sub_19C2C1180(uint64_t *a1)
{
  uint64_t result;
  std::string *v3;
  std::string *v4;
  char v5;
  std::string v6[2];

  result = *a1;
  if ((result & 1) != 0)
  {
    sub_19C2CF5C8((uint64_t)v6, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/arenastring.h", 363);
    v3 = sub_19C2CF5E0(v6, "CHECK failed: !tagged_ptr_.IsTagged(): ");
    sub_19C2CF710((uint64_t)&v5, (const char **)&v3->__r_.__value_.__l.__data_);
    sub_19C2CF718((uint64_t)v6);
    result = *a1;
  }
  if (!result)
  {
    sub_19C2CF5C8((uint64_t)v6, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/arenastring.h", 364);
    v4 = sub_19C2CF5E0(v6, "CHECK failed: tagged_ptr_.UnsafeGet() != nullptr: ");
    sub_19C2CF710((uint64_t)&v5, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_19C2CF718((uint64_t)v6);
    return *a1;
  }
  return result;
}

void sub_19C2C1230(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19C2C1250(uint64_t a1, char **a2, int a3)
{
  char *v6;
  std::string *v7;
  signed int v9;
  std::string *v10;
  char v11;
  char v12;
  std::string v13[2];

  v6 = *a2;
  if (!*a2)
  {
    sub_19C2CF5C8((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 209);
    v7 = sub_19C2CF5E0(v13, "CHECK failed: *ptr: ");
    sub_19C2CF710((uint64_t)&v12, (const char **)&v7->__r_.__value_.__l.__data_);
    sub_19C2CF718((uint64_t)v13);
    v6 = *a2;
  }
  if ((unint64_t)v6 < *(_QWORD *)a1)
    return 0;
  v9 = (_DWORD)v6 - *(_DWORD *)(a1 + 8);
  if (v9 >= 17)
  {
    sub_19C2CF5C8((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 212);
    v10 = sub_19C2CF5E0(v13, "CHECK failed: (overrun) <= (kSlopBytes): ");
    sub_19C2CF710((uint64_t)&v12, (const char **)&v10->__r_.__value_.__l.__data_);
    sub_19C2CF718((uint64_t)v13);
  }
  if (*(_DWORD *)(a1 + 28) == v9)
  {
    if (v9 >= 1 && !*(_QWORD *)(a1 + 16))
      *a2 = 0;
    return 1;
  }
  else
  {
    *a2 = sub_19C2DB308(a1, v9, a3);
    return v11 & 1;
  }
}

void sub_19C2C136C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t sub_19C2C138C(unint64_t *a1)
{
  unint64_t v2;
  unint64_t v3;

  v2 = *a1 & 0xFFFFFFFFFFFFFFFELL;
  if ((*a1 & 1) != 0)
  {
    v2 = *(_QWORD *)v2;
    if (v2)
      goto LABEL_3;
LABEL_7:
    v3 = operator new();
    goto LABEL_8;
  }
  if (!v2)
    goto LABEL_7;
LABEL_3:
  if ((*(_BYTE *)(v2 + 24) & 1) != 0)
    (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v2 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v2 + 32) + 32), &unk_1E3D32AF0, 32);
  v3 = sub_19C2CDDDC((unint64_t *)v2, 0x20uLL, (uint64_t)sub_19C2C1430);
LABEL_8:
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *a1 = v3 | 1;
  *(_QWORD *)v3 = v2;
  return v3 + 8;
}

void sub_19C2C1430(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

unsigned __int8 *sub_19C2C1444(unsigned __int8 *result)
{
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t *v3;
  uint64_t v4;
  std::string *v5;
  char v6;
  std::string v7[2];

  v1 = *((unsigned int *)result + 2);
  if ((v1 & 0x80000000) != 0)
  {
    sub_19C2CF5C8((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1780);
    v5 = sub_19C2CF5E0(v7, "CHECK failed: (n) >= (0): ");
    sub_19C2CF710((uint64_t)&v6, (const char **)&v5->__r_.__value_.__l.__data_);
    return (unsigned __int8 *)sub_19C2CF718((uint64_t)v7);
  }
  else if ((_DWORD)v1)
  {
    v2 = result;
    v3 = (uint64_t *)(*((_QWORD *)result + 2) + 8);
    do
    {
      v4 = *v3++;
      result = sub_19C2BEF40(v4);
      --v1;
    }
    while (v1);
    *((_DWORD *)v2 + 2) = 0;
  }
  return result;
}

void sub_19C2C14D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_19C2C14F0(unsigned __int8 *result)
{
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t *v3;
  uint64_t v4;
  std::string *v5;
  char v6;
  std::string v7[2];

  v1 = *((unsigned int *)result + 2);
  if ((v1 & 0x80000000) != 0)
  {
    sub_19C2CF5C8((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1780);
    v5 = sub_19C2CF5E0(v7, "CHECK failed: (n) >= (0): ");
    sub_19C2CF710((uint64_t)&v6, (const char **)&v5->__r_.__value_.__l.__data_);
    return (unsigned __int8 *)sub_19C2CF718((uint64_t)v7);
  }
  else if ((_DWORD)v1)
  {
    v2 = result;
    v3 = (uint64_t *)(*((_QWORD *)result + 2) + 8);
    do
    {
      v4 = *v3++;
      result = sub_19C2BFE48(v4);
      --v1;
    }
    while (v1);
    *((_DWORD *)v2 + 2) = 0;
  }
  return result;
}

void sub_19C2C1584(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_19C2C159C(uint64_t *a1)
{
  sub_19C2C15C4(a1);
  return sub_19C2C1640(a1);
}

void sub_19C2C15C4(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)a1[2];
  if (v2 && !*a1)
  {
    v3 = v2 + 1;
    v4 = *(unsigned int *)v2;
    if ((int)v4 >= 1)
    {
      do
      {
        if (*v3)
        {
          v5 = sub_19C2BED58(*v3);
          MEMORY[0x1A1AD355C](v5, 0x10A1C40E4A317A1);
        }
        ++v3;
        --v4;
      }
      while (v4);
      v2 = (uint64_t *)a1[2];
    }
    operator delete(v2);
  }
  a1[2] = 0;
}

uint64_t *sub_19C2C1640(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  if (v2)
    sub_19C2CDAD8(v2);
  return a1;
}

uint64_t sub_19C2C1670(uint64_t a1, int a2, unsigned int a3)
{
  std::string *v6;
  uint64_t v7;
  int v8;
  char v10;
  std::string v11[2];

  if (a3 >= 0x7FFFFFF0)
  {
    sub_19C2CF5C8((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 128);
    v6 = sub_19C2CF5E0(v11, "CHECK failed: limit >= 0 && limit <= INT_MAX - kSlopBytes: ");
    sub_19C2CF710((uint64_t)&v10, (const char **)&v6->__r_.__value_.__l.__data_);
    sub_19C2CF718((uint64_t)v11);
  }
  v7 = *(_QWORD *)(a1 + 8);
  v8 = a2 - v7 + a3;
  *(_QWORD *)a1 = v7 + (v8 & (v8 >> 31));
  LODWORD(v7) = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 28) = v8;
  return (v7 - v8);
}

void sub_19C2C1710(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19C2C1728(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  unsigned int v5;
  uint64_t *v6;
  uint64_t *v7;
  signed int v8;
  signed int *v9;
  char v10;
  std::string v11[2];

  if (a2 == a1)
  {
    sub_19C2CF5C8((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1799);
    v4 = sub_19C2CF5E0(v11, "CHECK failed: (&other) != (this): ");
    sub_19C2CF710((uint64_t)&v10, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_19C2CF718((uint64_t)v11);
  }
  v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    v6 = (uint64_t *)(*(_QWORD *)(a2 + 16) + 8);
    v7 = (uint64_t *)sub_19C2E0D00((uint64_t *)a1, v5);
    sub_19C2C1814((uint64_t *)a1, v7, v6, v5, **(_DWORD **)(a1 + 16) - *(_DWORD *)(a1 + 8));
    v8 = *(_DWORD *)(a1 + 8) + v5;
    *(_DWORD *)(a1 + 8) = v8;
    v9 = *(signed int **)(a1 + 16);
    if (*v9 < v8)
      *v9 = v8;
  }
}

void sub_19C2C17FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19C2C1814(uint64_t *a1, uint64_t *a2, uint64_t *a3, unsigned int a4, unsigned int a5)
{
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  int v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;

  if ((int)a5 >= (int)a4)
    v10 = a4;
  else
    v10 = a5;
  if ((int)v10 >= 1)
  {
    v11 = a3;
    v12 = a2;
    do
    {
      v14 = *v11++;
      v13 = v14;
      v15 = *v12++;
      sub_19C2C18C0(v13, v15);
      --v10;
    }
    while (v10);
  }
  v16 = __OFSUB__(a4, a5);
  v17 = a4 - a5;
  if (!((v17 < 0) ^ v16 | (v17 == 0)))
  {
    v18 = *a1;
    v19 = &a3[a5];
    v20 = &a2[a5];
    do
    {
      v21 = *v19++;
      v22 = sub_19C2C0F14(v18);
      sub_19C2C18C0(v21, v22);
      *v20++ = v22;
      --v17;
    }
    while (v17);
  }
}

void sub_19C2C18C0(uint64_t a1, uint64_t a2)
{
  sub_19C2BF884(a2, a1);
}

uint64_t *sub_19C2C18D0(uint64_t *a1)
{
  sub_19C2C18F8(a1);
  return sub_19C2C1640(a1);
}

void sub_19C2C18F8(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)a1[2];
  if (v2 && !*a1)
  {
    v3 = v2 + 1;
    v4 = *(unsigned int *)v2;
    if ((int)v4 >= 1)
    {
      do
      {
        if (*v3)
        {
          v5 = sub_19C2BFCCC(*v3);
          MEMORY[0x1A1AD355C](v5, 0x10A1C40431D3885);
        }
        ++v3;
        --v4;
      }
      while (v4);
      v2 = (uint64_t *)a1[2];
    }
    operator delete(v2);
  }
  a1[2] = 0;
}

void sub_19C2C1974(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  unsigned int v5;
  uint64_t *v6;
  uint64_t *v7;
  signed int v8;
  signed int *v9;
  char v10;
  std::string v11[2];

  if (a2 == a1)
  {
    sub_19C2CF5C8((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1799);
    v4 = sub_19C2CF5E0(v11, "CHECK failed: (&other) != (this): ");
    sub_19C2CF710((uint64_t)&v10, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_19C2CF718((uint64_t)v11);
  }
  v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    v6 = (uint64_t *)(*(_QWORD *)(a2 + 16) + 8);
    v7 = (uint64_t *)sub_19C2E0D00((uint64_t *)a1, v5);
    sub_19C2C1A60((uint64_t *)a1, v7, v6, v5, **(_DWORD **)(a1 + 16) - *(_DWORD *)(a1 + 8));
    v8 = *(_DWORD *)(a1 + 8) + v5;
    *(_DWORD *)(a1 + 8) = v8;
    v9 = *(signed int **)(a1 + 16);
    if (*v9 < v8)
      *v9 = v8;
  }
}

void sub_19C2C1A48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19C2C1A60(uint64_t *a1, uint64_t *a2, uint64_t *a3, unsigned int a4, unsigned int a5)
{
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  int v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;

  if ((int)a5 >= (int)a4)
    v10 = a4;
  else
    v10 = a5;
  if ((int)v10 >= 1)
  {
    v11 = a3;
    v12 = a2;
    do
    {
      v14 = *v11++;
      v13 = v14;
      v15 = *v12++;
      sub_19C2C1B0C(v13, v15);
      --v10;
    }
    while (v10);
  }
  v16 = __OFSUB__(a4, a5);
  v17 = a4 - a5;
  if (!((v17 < 0) ^ v16 | (v17 == 0)))
  {
    v18 = *a1;
    v19 = &a3[a5];
    v20 = &a2[a5];
    do
    {
      v21 = *v19++;
      v22 = sub_19C2C0FC8(v18);
      sub_19C2C1B0C(v21, v22);
      *v20++ = v22;
      --v17;
    }
    while (v17);
  }
}

void sub_19C2C1B0C(uint64_t a1, uint64_t a2)
{
  sub_19C2C0560(a2, a1);
}

void sub_19C2C1B1C(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 94, a4);
}

void sub_19C2C1B24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_19C2C1B1C("down_cast", "casts.h", a3, "f == nullptr || dynamic_cast<To>(f) != nullptr");
}

void sub_19C2C1B48()
{
  sub_19C2CF260(3014000, 3014000, "/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc");
  sub_19C2C7F00((uint64_t)&unk_1EE41C5F0, 0);
  sub_19C2DAB90((uint64_t)sub_19C2DA1A0, (uint64_t)&unk_1EE41C5F0);
}

void sub_19C2C1B9C()
{
  sub_19C2CF260(3014000, 3014000, "/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc");
  sub_19C2C7624(qword_1EE41C800, 0);
  sub_19C2DAB90((uint64_t)sub_19C2DA1A0, (uint64_t)qword_1EE41C800);
}

void sub_19C2C1BF0()
{
  sub_19C2CF260(3014000, 3014000, "/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc");
  sub_19C2C5A18((uint64_t)&unk_1EE41C7A8, 0);
  sub_19C2DAB90((uint64_t)sub_19C2DA1A0, (uint64_t)&unk_1EE41C7A8);
}

void sub_19C2C1C44()
{
  sub_19C2CF260(3014000, 3014000, "/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc");
  sub_19C2C6E24((uint64_t)&unk_1EE41C840, 0);
  sub_19C2DAB90((uint64_t)sub_19C2DA1A0, (uint64_t)&unk_1EE41C840);
}

void sub_19C2C1C98()
{
  sub_19C2CF260(3014000, 3014000, "/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc");
  qword_1EE41C888 = (uint64_t)&off_1E3D34018;
  unk_1EE41C890 = 0;
  qword_1EE41C898 = 0;
  if (atomic_load(dword_1EE41ABC0))
    sub_19C2DA308(dword_1EE41ABC0);
  qword_1EE41C8A0 = (uint64_t)&qword_1EE41C5D8;
  unk_1EE41C8A8 = &qword_1EE41C5D8;
  sub_19C2DAB90((uint64_t)sub_19C2DA1A0, (uint64_t)&qword_1EE41C888);
}

void sub_19C2C1D1C()
{
  sub_19C2CF260(3014000, 3014000, "/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc");
  sub_19C2C1D80((uint64_t)&unk_1EE41C660, 0);
  sub_19C2DAB90((uint64_t)sub_19C2DA1A0, (uint64_t)&unk_1EE41C660);
}

BOOL sub_19C2C1D70(int a1)
{
  return (a1 - 1) < 6;
}

uint64_t sub_19C2C1D80(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &off_1E3D33CC8;
  *(_QWORD *)(a1 + 8) = a2;
  sub_19C2CFB64(a1 + 16, a2);
  *(_QWORD *)(a1 + 128) = a2;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 56) = a2;
  *(_DWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = a2;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = a2;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  if (atomic_load(dword_1EE41ABF8))
    sub_19C2DA308(dword_1EE41ABF8);
  *(_QWORD *)(a1 + 152) = &qword_1EE41C5D8;
  *(_QWORD *)(a1 + 160) = &qword_1EE41C5D8;
  *(_QWORD *)(a1 + 168) = &qword_1EE41C5D8;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = &qword_1EE41C5D8;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_QWORD *)(a1 + 272) = 0x1F4000000001;
  *(_QWORD *)(a1 + 280) = 0xF42403F7FDF3BLL;
  *(_DWORD *)(a1 + 288) = 1061158912;
  *(_OWORD *)(a1 + 292) = xmmword_19C46D220;
  *(_DWORD *)(a1 + 308) = 16843009;
  *(_WORD *)(a1 + 312) = 257;
  *(_DWORD *)(a1 + 316) = 1;
  *(_QWORD *)(a1 + 320) = 0xFFFFFFFF00000002;
  return a1;
}

void sub_19C2C1EA8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_19C2E0CE8(v3);
  sub_19C2E0CE8(v5);
  sub_19C2E0CE8(v4);
  sub_19C2E0CE8(v2);
  sub_19C2CFC40(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_19C2C1EDC(uint64_t *a1)
{
  sub_19C2C1F34(a1);
  sub_19C2BEEB4(a1 + 1);
  sub_19C2E0CE8(a1 + 16);
  sub_19C2E0CE8(a1 + 13);
  sub_19C2E0CE8(a1 + 10);
  sub_19C2E0CE8(a1 + 7);
  sub_19C2CFC40((uint64_t)(a1 + 2));
  return a1;
}

uint64_t *sub_19C2C1F34(uint64_t *a1)
{
  uint64_t v2;
  _QWORD *v3;
  std::string *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *result;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  std::string v27[2];

  v2 = a1[1];
  v3 = (_QWORD *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  if ((v2 & 1) == 0)
  {
    if (!v3)
      goto LABEL_4;
    goto LABEL_3;
  }
  if (*v3)
  {
LABEL_3:
    sub_19C2CF5C8((uint64_t)v27, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 519);
    v4 = sub_19C2CF5E0(v27, "CHECK failed: GetArena() == nullptr: ");
    sub_19C2CF710((uint64_t)&v26, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_19C2CF718((uint64_t)v27);
  }
LABEL_4:
  if ((uint64_t *)a1[19] != &qword_1EE41C5D8)
  {
    v5 = sub_19C2C1180(a1 + 19);
    v6 = v5;
    if (*(char *)(v5 + 23) < 0)
      operator delete(*(void **)v5);
    MEMORY[0x1A1AD355C](v6, 0x1012C40EC159624);
  }
  if ((uint64_t *)a1[20] != &qword_1EE41C5D8)
  {
    v7 = sub_19C2C1180(a1 + 20);
    v8 = v7;
    if (*(char *)(v7 + 23) < 0)
      operator delete(*(void **)v7);
    MEMORY[0x1A1AD355C](v8, 0x1012C40EC159624);
  }
  if ((uint64_t *)a1[21] != &qword_1EE41C5D8)
  {
    v9 = sub_19C2C1180(a1 + 21);
    v10 = v9;
    if (*(char *)(v9 + 23) < 0)
      operator delete(*(void **)v9);
    MEMORY[0x1A1AD355C](v10, 0x1012C40EC159624);
  }
  if (a1[22])
  {
    v11 = sub_19C2C1180(a1 + 22);
    v12 = v11;
    if (*(char *)(v11 + 23) < 0)
      operator delete(*(void **)v11);
    MEMORY[0x1A1AD355C](v12, 0x1012C40EC159624);
  }
  if (a1[23])
  {
    v13 = sub_19C2C1180(a1 + 23);
    v14 = v13;
    if (*(char *)(v13 + 23) < 0)
      operator delete(*(void **)v13);
    MEMORY[0x1A1AD355C](v14, 0x1012C40EC159624);
  }
  if (a1[24])
  {
    v15 = sub_19C2C1180(a1 + 24);
    v16 = v15;
    if (*(char *)(v15 + 23) < 0)
      operator delete(*(void **)v15);
    MEMORY[0x1A1AD355C](v16, 0x1012C40EC159624);
  }
  if (a1[25])
  {
    v17 = sub_19C2C1180(a1 + 25);
    v18 = v17;
    if (*(char *)(v17 + 23) < 0)
      operator delete(*(void **)v17);
    MEMORY[0x1A1AD355C](v18, 0x1012C40EC159624);
  }
  result = a1 + 26;
  if (a1[26])
  {
    v20 = sub_19C2C1180(result);
    v21 = v20;
    if (*(char *)(v20 + 23) < 0)
      operator delete(*(void **)v20);
    result = (uint64_t *)MEMORY[0x1A1AD355C](v21, 0x1012C40EC159624);
  }
  v23 = (uint64_t *)a1[27];
  v22 = a1 + 27;
  if (v23 != &qword_1EE41C5D8)
  {
    v24 = sub_19C2C1180(v22);
    v25 = v24;
    if (*(char *)(v24 + 23) < 0)
      operator delete(*(void **)v24);
    return (uint64_t *)MEMORY[0x1A1AD355C](v25, 0x1012C40EC159624);
  }
  return result;
}

void sub_19C2C21EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19C2C2208(uint64_t *a1)
{
  sub_19C2C1EDC(a1);
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C2C222C(uint64_t a1)
{
  uint64_t result;
  unsigned int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;

  sub_19C2D3630((unsigned __int8 *)(a1 + 16));
  sub_19C2CA224(a1 + 56);
  sub_19C2CA224(a1 + 80);
  sub_19C2CA224(a1 + 104);
  result = sub_19C2CA224(a1 + 128);
  v3 = *(_DWORD *)(a1 + 40);
  if (!(_BYTE)v3)
    goto LABEL_10;
  if ((v3 & 1) != 0)
  {
    v4 = *(_QWORD *)(a1 + 152) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v4 + 23) < 0)
    {
      **(_BYTE **)v4 = 0;
      *(_QWORD *)(v4 + 8) = 0;
      if ((v3 & 2) != 0)
        goto LABEL_16;
    }
    else
    {
      *(_BYTE *)v4 = 0;
      *(_BYTE *)(v4 + 23) = 0;
      if ((v3 & 2) != 0)
        goto LABEL_16;
    }
LABEL_4:
    if ((v3 & 4) == 0)
      goto LABEL_5;
LABEL_20:
    v6 = *(_QWORD *)(a1 + 168) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v6 + 23) < 0)
    {
      **(_BYTE **)v6 = 0;
      *(_QWORD *)(v6 + 8) = 0;
      if ((v3 & 8) != 0)
        goto LABEL_24;
    }
    else
    {
      *(_BYTE *)v6 = 0;
      *(_BYTE *)(v6 + 23) = 0;
      if ((v3 & 8) != 0)
        goto LABEL_24;
    }
LABEL_6:
    if ((v3 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_25;
  }
  if ((v3 & 2) == 0)
    goto LABEL_4;
LABEL_16:
  v5 = *(_QWORD *)(a1 + 160) & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v5 + 23) < 0)
  {
    **(_BYTE **)v5 = 0;
    *(_QWORD *)(v5 + 8) = 0;
    if ((v3 & 4) != 0)
      goto LABEL_20;
  }
  else
  {
    *(_BYTE *)v5 = 0;
    *(_BYTE *)(v5 + 23) = 0;
    if ((v3 & 4) != 0)
      goto LABEL_20;
  }
LABEL_5:
  if ((v3 & 8) == 0)
    goto LABEL_6;
LABEL_24:
  result = (uint64_t)sub_19C2CE7D0((std::string *)(a1 + 176), &off_1EE41ADB0);
  if ((v3 & 0x10) == 0)
  {
LABEL_7:
    if ((v3 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_26;
  }
LABEL_25:
  result = (uint64_t)sub_19C2CE7D0((std::string *)(a1 + 184), &off_1EE41AD30);
  if ((v3 & 0x20) == 0)
  {
LABEL_8:
    if ((v3 & 0x40) == 0)
      goto LABEL_9;
    goto LABEL_27;
  }
LABEL_26:
  result = (uint64_t)sub_19C2CE7D0((std::string *)(a1 + 192), &off_1EE41AD50);
  if ((v3 & 0x40) != 0)
  {
LABEL_27:
    result = (uint64_t)sub_19C2CE7D0((std::string *)(a1 + 200), &off_1EE41AD70);
    if ((v3 & 0x80) != 0)
      goto LABEL_28;
LABEL_10:
    if ((v3 & 0x100) == 0)
      goto LABEL_32;
    goto LABEL_29;
  }
LABEL_9:
  if ((v3 & 0x80) == 0)
    goto LABEL_10;
LABEL_28:
  result = (uint64_t)sub_19C2CE7D0((std::string *)(a1 + 208), &off_1EE41AD90);
  if ((v3 & 0x100) == 0)
    goto LABEL_32;
LABEL_29:
  v7 = *(_QWORD *)(a1 + 216) & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v7 + 23) < 0)
  {
    **(_BYTE **)v7 = 0;
    *(_QWORD *)(v7 + 8) = 0;
  }
  else
  {
    *(_BYTE *)v7 = 0;
    *(_BYTE *)(v7 + 23) = 0;
  }
LABEL_32:
  if ((v3 & 0xFE00) != 0)
  {
    *(_QWORD *)(a1 + 224) = 0;
    *(_QWORD *)(a1 + 232) = 0;
    *(_QWORD *)(a1 + 239) = 0;
  }
  if ((v3 & 0xFF0000) != 0)
  {
    *(_QWORD *)(a1 + 247) = 0;
    *(_BYTE *)(a1 + 271) = 0;
    *(_QWORD *)(a1 + 255) = 0;
    *(_QWORD *)(a1 + 263) = 0;
    *(_DWORD *)(a1 + 272) = 1;
  }
  if (HIBYTE(v3))
  {
    *(_QWORD *)(a1 + 276) = 0x3F7FDF3B00001F40;
    *(_QWORD *)(a1 + 284) = 0x3F400000000F4240;
    *(_OWORD *)(a1 + 292) = xmmword_19C46D220;
  }
  if (*(_BYTE *)(a1 + 44))
  {
    *(_WORD *)(a1 + 312) = 257;
    *(_DWORD *)(a1 + 308) = 16843009;
    *(_QWORD *)(a1 + 316) = 0x200000001;
  }
  *(_DWORD *)(a1 + 324) = -1;
  *(_QWORD *)(a1 + 40) = 0;
  v8 = *(_QWORD *)(a1 + 8);
  if ((v8 & 1) != 0)
  {
    v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v9 + 31) < 0)
    {
      **(_BYTE **)(v9 + 8) = 0;
      *(_QWORD *)(v9 + 16) = 0;
    }
    else
    {
      *(_BYTE *)(v9 + 8) = 0;
      *(_BYTE *)(v9 + 31) = 0;
    }
  }
  return result;
}

char *sub_19C2C24F0(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  char v5;
  char *result;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  char *v11;
  unsigned int v12;
  unsigned int v13;
  char *v14;
  int *v15;
  uint64_t v16;
  int v17;
  std::string *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t *v25;
  char *v26;
  unint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  char *v31;
  int v32;
  char *v33;
  int *v34;
  uint64_t v35;
  int v36;
  std::string *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  int v43;
  uint64_t v44;
  char *v45;
  int v46;
  char *v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  char *v51;
  int v52;
  uint64_t v53;
  char *v54;
  int v55;
  uint64_t v56;
  char *v57;
  int v58;
  int v59;
  uint64_t v60;
  char *v61;
  int v62;
  uint64_t v63;
  char *v64;
  int v65;
  uint64_t v66;
  char *v67;
  int v68;
  char *v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  char *v73;
  int v74;
  char *v75;
  uint64_t v76;
  int v77;
  char *v78;
  uint64_t v79;
  int v80;
  char *v81;
  uint64_t v82;
  int v83;
  char *v84;
  uint64_t v85;
  int v86;
  char *v87;
  uint64_t v88;
  int v89;
  char *v90;
  uint64_t v91;
  int v92;
  char *v93;
  int *v94;
  uint64_t v95;
  int v96;
  std::string *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  int *v102;
  uint64_t v103;
  int v104;
  std::string *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  int v111;
  char *v112;
  uint64_t v113;
  int v114;
  char *v115;
  uint64_t v116;
  int v117;
  char *v118;
  uint64_t v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  int v124;
  uint64_t v125;
  char *v126;
  int v127;
  uint64_t v128;
  char *v129;
  int v130;
  uint64_t v131;
  char *v132;
  int v133;
  uint64_t v134;
  _QWORD *v135;
  char **v136;
  uint64_t *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  int v143;
  char *v144;
  uint64_t v145;
  int v146;
  int v147;
  char *v148;
  uint64_t v149;
  int v150;
  uint64_t v151;
  std::string *v152;
  uint64_t v153;
  int v154;
  BOOL v155;
  std::string *v156;
  unint64_t v157;
  int v158;
  int v159;
  uint64_t v160;
  int v161;
  int v162;
  int v163;
  int v164;
  int v165;
  int v166;
  uint64_t v167;
  int v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  int v179;
  int v180;
  int v181;
  int v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  std::string *v186;
  unint64_t *v187;
  int v188[2];

  *(_QWORD *)v188 = a2;
  v5 = sub_19C2C1250((uint64_t)a3, (char **)v188, a3[11].i32[1]);
  result = *(char **)v188;
  if ((v5 & 1) != 0)
    return result;
  v187 = (unint64_t *)(a1 + 8);
  v7 = (uint64_t *)(a1 + 128);
  v8 = (uint64_t *)(a1 + 104);
  v9 = (uint64_t *)(a1 + 80);
  v10 = (uint64_t *)(a1 + 56);
  while (2)
  {
    v11 = result + 1;
    v12 = *result;
    if ((*result & 0x80000000) == 0)
      goto LABEL_7;
    v13 = v12 + (*v11 << 7);
    v12 = v13 - 128;
    if ((*v11 & 0x80000000) == 0)
    {
      v11 = result + 2;
LABEL_7:
      *(_QWORD *)v188 = v11;
      goto LABEL_8;
    }
    result = (char *)sub_19C2DBBE0((uint64_t)result, v13 - 128);
    *(_QWORD *)v188 = result;
    if (!result)
      return result;
    v11 = result;
    v12 = v22;
LABEL_8:
    switch(v12 >> 3)
    {
      case 1u:
        if (v12 != 10)
          goto LABEL_279;
        result = v11 - 1;
        while (2)
        {
          v14 = result + 1;
          *(_QWORD *)v188 = result + 1;
          v15 = *(int **)(a1 + 72);
          if (!v15)
          {
            v17 = *(_DWORD *)(a1 + 68);
LABEL_16:
            sub_19C2E0CEC(a1 + 56, v17 + 1);
            v15 = *(int **)(a1 + 72);
            v17 = *v15;
            goto LABEL_17;
          }
          v16 = *(int *)(a1 + 64);
          v17 = *v15;
          if ((int)v16 < *v15)
          {
            *(_DWORD *)(a1 + 64) = v16 + 1;
            v18 = *(std::string **)&v15[2 * v16 + 2];
            goto LABEL_23;
          }
          if (v17 == *(_DWORD *)(a1 + 68))
            goto LABEL_16;
LABEL_17:
          *v15 = v17 + 1;
          v19 = *v10;
          if (*v10)
          {
            if ((*(_BYTE *)(v19 + 24) & 1) != 0)
              (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v19 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v19 + 32) + 32), &unk_1E3D33010, 24);
            v18 = (std::string *)sub_19C2CDDDC((unint64_t *)v19, 0x18uLL, (uint64_t)sub_19C2CA134);
          }
          else
          {
            v18 = (std::string *)operator new();
          }
          v18->__r_.__value_.__r.__words[0] = 0;
          v18->__r_.__value_.__l.__size_ = 0;
          v18->__r_.__value_.__r.__words[2] = 0;
          v20 = *(_QWORD *)(a1 + 72);
          v21 = *(int *)(a1 + 64);
          *(_DWORD *)(a1 + 64) = v21 + 1;
          *(_QWORD *)(v20 + 8 * v21 + 8) = v18;
          v14 = *(char **)v188;
LABEL_23:
          result = (char *)sub_19C2DBC94(v18, v14, (uint64_t)a3);
          *(_QWORD *)v188 = result;
          if (result)
          {
            if (*(_QWORD *)a3 <= (unint64_t)result || *result != 10)
              goto LABEL_277;
            continue;
          }
          return result;
        }
      case 2u:
        if (v12 != 18)
          goto LABEL_279;
        *(_DWORD *)(a1 + 40) |= 1u;
        v23 = *(_QWORD *)(a1 + 8);
        v24 = (_QWORD *)(v23 & 0xFFFFFFFFFFFFFFFELL);
        if ((v23 & 1) != 0)
          v24 = (_QWORD *)*v24;
        v25 = (uint64_t *)(a1 + 152);
        goto LABEL_269;
      case 3u:
        if (v12 != 24)
          goto LABEL_279;
        v26 = v11 + 1;
        v27 = *v11;
        if ((*v11 & 0x80000000) == 0)
          goto LABEL_37;
        v28 = *v26;
        v29 = v27 + (v28 << 7);
        v27 = (v29 - 128);
        if (v28 < 0)
        {
          result = (char *)sub_19C2DBB98((uint64_t)v11, (v29 - 128));
          *(_QWORD *)v188 = result;
          if (!result)
            return result;
          v27 = v157;
        }
        else
        {
          v26 = v11 + 2;
LABEL_37:
          *(_QWORD *)v188 = v26;
        }
        if ((v27 - 1) > 3)
        {
          if ((*v187 & 1) != 0)
            v186 = (std::string *)((*v187 & 0xFFFFFFFFFFFFFFFELL) + 8);
          else
            v186 = (std::string *)sub_19C2C138C(v187);
          sub_19C2DBA98(3, v27, v186);
        }
        else
        {
          *(_DWORD *)(a1 + 40) |= 0x800000u;
          *(_DWORD *)(a1 + 272) = v27;
        }
        goto LABEL_277;
      case 4u:
        if (v12 != 32)
          goto LABEL_279;
        *(_DWORD *)(a1 + 40) |= 0x1000000u;
        v31 = v11 + 1;
        LODWORD(v30) = *v11;
        if ((v30 & 0x80) == 0)
          goto LABEL_44;
        v32 = *v31;
        v30 = v30 + (v32 << 7) - 128;
        if (v32 < 0)
        {
          result = (char *)sub_19C2DBB98((uint64_t)v11, v30);
          *(_QWORD *)v188 = result;
          *(_DWORD *)(a1 + 276) = v158;
          if (!result)
            return result;
        }
        else
        {
          v31 = v11 + 2;
LABEL_44:
          *(_QWORD *)v188 = v31;
          *(_DWORD *)(a1 + 276) = v30;
        }
        goto LABEL_277;
      case 5u:
        if (v12 != 42)
          goto LABEL_279;
        result = v11 - 1;
        while (1)
        {
          v33 = result + 1;
          *(_QWORD *)v188 = result + 1;
          v34 = *(int **)(a1 + 96);
          if (!v34)
            break;
          v35 = *(int *)(a1 + 88);
          v36 = *v34;
          if ((int)v35 >= *v34)
          {
            if (v36 == *(_DWORD *)(a1 + 92))
            {
LABEL_52:
              sub_19C2E0CEC(a1 + 80, v36 + 1);
              v34 = *(int **)(a1 + 96);
              v36 = *v34;
            }
            *v34 = v36 + 1;
            v38 = *v9;
            if (*v9)
            {
              if ((*(_BYTE *)(v38 + 24) & 1) != 0)
                (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v38 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v38 + 32) + 32), &unk_1E3D33010, 24);
              v37 = (std::string *)sub_19C2CDDDC((unint64_t *)v38, 0x18uLL, (uint64_t)sub_19C2CA134);
            }
            else
            {
              v37 = (std::string *)operator new();
            }
            v37->__r_.__value_.__r.__words[0] = 0;
            v37->__r_.__value_.__l.__size_ = 0;
            v37->__r_.__value_.__r.__words[2] = 0;
            v39 = *(_QWORD *)(a1 + 96);
            v40 = *(int *)(a1 + 88);
            *(_DWORD *)(a1 + 88) = v40 + 1;
            *(_QWORD *)(v39 + 8 * v40 + 8) = v37;
            v33 = *(char **)v188;
            goto LABEL_59;
          }
          *(_DWORD *)(a1 + 88) = v35 + 1;
          v37 = *(std::string **)&v34[2 * v35 + 2];
LABEL_59:
          result = (char *)sub_19C2DBC94(v37, v33, (uint64_t)a3);
          *(_QWORD *)v188 = result;
          if (!result)
            return result;
          if (*(_QWORD *)a3 <= (unint64_t)result || *result != 42)
            goto LABEL_277;
        }
        v36 = *(_DWORD *)(a1 + 92);
        goto LABEL_52;
      case 6u:
        if (v12 != 48)
          goto LABEL_279;
        *(_DWORD *)(a1 + 40) |= 0x200u;
        v42 = v11 + 1;
        LODWORD(v41) = *v11;
        if ((v41 & 0x80) == 0)
          goto LABEL_67;
        v43 = *v42;
        v41 = v41 + (v43 << 7) - 128;
        if (v43 < 0)
        {
          result = (char *)sub_19C2DBB98((uint64_t)v11, v41);
          *(_QWORD *)v188 = result;
          *(_DWORD *)(a1 + 224) = v159;
          if (!result)
            return result;
        }
        else
        {
          v42 = v11 + 2;
LABEL_67:
          *(_QWORD *)v188 = v42;
          *(_DWORD *)(a1 + 224) = v41;
        }
        goto LABEL_277;
      case 7u:
        if (v12 != 58)
          goto LABEL_279;
        *(_DWORD *)(a1 + 40) |= 2u;
        v44 = *(_QWORD *)(a1 + 8);
        v24 = (_QWORD *)(v44 & 0xFFFFFFFFFFFFFFFELL);
        if ((v44 & 1) != 0)
          v24 = (_QWORD *)*v24;
        v25 = (uint64_t *)(a1 + 160);
        goto LABEL_269;
      case 0xAu:
        if (v12 != 85)
          goto LABEL_279;
        *(_DWORD *)(a1 + 40) |= 0x2000000u;
        v46 = *(_DWORD *)v11;
        v45 = v11 + 4;
        *(_DWORD *)(a1 + 280) = v46;
        goto LABEL_259;
      case 0xBu:
        if (v12 != 88)
          goto LABEL_279;
        *(_DWORD *)(a1 + 40) |= 0x800u;
        v47 = v11 + 1;
        v48 = *v11;
        if ((*v11 & 0x80000000) == 0)
          goto LABEL_78;
        v49 = *v47;
        v48 = v48 + (v49 << 7) - 128;
        if (v49 < 0)
        {
          result = (char *)sub_19C2DBB98((uint64_t)v11, v48);
          *(_QWORD *)v188 = result;
          *(_QWORD *)(a1 + 232) = v160;
          if (!result)
            return result;
        }
        else
        {
          v47 = v11 + 2;
LABEL_78:
          *(_QWORD *)v188 = v47;
          *(_QWORD *)(a1 + 232) = v48;
        }
        goto LABEL_277;
      case 0xCu:
        if (v12 != 96)
          goto LABEL_279;
        *(_DWORD *)(a1 + 40) |= 0x400u;
        v51 = v11 + 1;
        LODWORD(v50) = *v11;
        if ((v50 & 0x80) == 0)
          goto LABEL_83;
        v52 = *v51;
        v50 = v50 + (v52 << 7) - 128;
        if (v52 < 0)
        {
          result = (char *)sub_19C2DBB98((uint64_t)v11, v50);
          *(_QWORD *)v188 = result;
          *(_DWORD *)(a1 + 228) = v161;
          if (!result)
            return result;
        }
        else
        {
          v51 = v11 + 2;
LABEL_83:
          *(_QWORD *)v188 = v51;
          *(_DWORD *)(a1 + 228) = v50;
        }
        goto LABEL_277;
      case 0xDu:
        if (v12 != 104)
          goto LABEL_279;
        *(_DWORD *)(a1 + 40) |= 0x1000u;
        v54 = v11 + 1;
        LODWORD(v53) = *v11;
        if ((v53 & 0x80) == 0)
          goto LABEL_88;
        v55 = *v54;
        v53 = v53 + (v55 << 7) - 128;
        if (v55 < 0)
        {
          result = (char *)sub_19C2DBB98((uint64_t)v11, v53);
          *(_QWORD *)v188 = result;
          *(_DWORD *)(a1 + 240) = v162;
          if (!result)
            return result;
        }
        else
        {
          v54 = v11 + 2;
LABEL_88:
          *(_QWORD *)v188 = v54;
          *(_DWORD *)(a1 + 240) = v53;
        }
        goto LABEL_277;
      case 0xEu:
        if (v12 != 112)
          goto LABEL_279;
        *(_DWORD *)(a1 + 40) |= 0x4000000u;
        v57 = v11 + 1;
        LODWORD(v56) = *v11;
        if ((v56 & 0x80) == 0)
          goto LABEL_93;
        v58 = *v57;
        v56 = v56 + (v58 << 7) - 128;
        if (v58 < 0)
        {
          result = (char *)sub_19C2DBB98((uint64_t)v11, v56);
          *(_QWORD *)v188 = result;
          *(_DWORD *)(a1 + 284) = v163;
          if (!result)
            return result;
        }
        else
        {
          v57 = v11 + 2;
LABEL_93:
          *(_QWORD *)v188 = v57;
          *(_DWORD *)(a1 + 284) = v56;
        }
        goto LABEL_277;
      case 0xFu:
        if (v12 != 125)
          goto LABEL_279;
        *(_DWORD *)(a1 + 40) |= 0x8000000u;
        v59 = *(_DWORD *)v11;
        v45 = v11 + 4;
        *(_DWORD *)(a1 + 288) = v59;
        goto LABEL_259;
      case 0x10u:
        if (v12 != 128)
          goto LABEL_279;
        *(_DWORD *)(a1 + 40) |= 0x10000000u;
        v61 = v11 + 1;
        LODWORD(v60) = *v11;
        if ((v60 & 0x80) == 0)
          goto LABEL_100;
        v62 = *v61;
        v60 = v60 + (v62 << 7) - 128;
        if (v62 < 0)
        {
          result = (char *)sub_19C2DBB98((uint64_t)v11, v60);
          *(_QWORD *)v188 = result;
          *(_DWORD *)(a1 + 292) = v164;
          if (!result)
            return result;
        }
        else
        {
          v61 = v11 + 2;
LABEL_100:
          *(_QWORD *)v188 = v61;
          *(_DWORD *)(a1 + 292) = v60;
        }
        goto LABEL_277;
      case 0x11u:
        if (v12 != 136)
          goto LABEL_279;
        *(_DWORD *)(a1 + 40) |= 0x20000000u;
        v64 = v11 + 1;
        LODWORD(v63) = *v11;
        if ((v63 & 0x80) == 0)
          goto LABEL_105;
        v65 = *v64;
        v63 = v63 + (v65 << 7) - 128;
        if (v65 < 0)
        {
          result = (char *)sub_19C2DBB98((uint64_t)v11, v63);
          *(_QWORD *)v188 = result;
          *(_DWORD *)(a1 + 296) = v165;
          if (!result)
            return result;
        }
        else
        {
          v64 = v11 + 2;
LABEL_105:
          *(_QWORD *)v188 = v64;
          *(_DWORD *)(a1 + 296) = v63;
        }
        goto LABEL_277;
      case 0x12u:
        if (v12 != 144)
          goto LABEL_279;
        *(_DWORD *)(a1 + 40) |= 0x40000000u;
        v67 = v11 + 1;
        LODWORD(v66) = *v11;
        if ((v66 & 0x80) == 0)
          goto LABEL_110;
        v68 = *v67;
        v66 = v66 + (v68 << 7) - 128;
        if (v68 < 0)
        {
          result = (char *)sub_19C2DBB98((uint64_t)v11, v66);
          *(_QWORD *)v188 = result;
          *(_DWORD *)(a1 + 300) = v166;
          if (!result)
            return result;
        }
        else
        {
          v67 = v11 + 2;
LABEL_110:
          *(_QWORD *)v188 = v67;
          *(_DWORD *)(a1 + 300) = v66;
        }
        goto LABEL_277;
      case 0x13u:
        if (v12 != 152)
          goto LABEL_279;
        *(_DWORD *)(a1 + 44) |= 1u;
        v69 = v11 + 1;
        v70 = *v11;
        if ((*v11 & 0x80000000) == 0)
          goto LABEL_115;
        v71 = *v69;
        v70 = v70 + (v71 << 7) - 128;
        if (v71 < 0)
        {
          result = (char *)sub_19C2DBB98((uint64_t)v11, v70);
          *(_QWORD *)v188 = result;
          *(_BYTE *)(a1 + 308) = v167 != 0;
          if (!result)
            return result;
        }
        else
        {
          v69 = v11 + 2;
LABEL_115:
          *(_QWORD *)v188 = v69;
          *(_BYTE *)(a1 + 308) = v70 != 0;
        }
        goto LABEL_277;
      case 0x14u:
        if (v12 != 160)
          goto LABEL_279;
        *(_DWORD *)(a1 + 40) |= 0x80000000;
        v73 = v11 + 1;
        LODWORD(v72) = *v11;
        if ((v72 & 0x80) == 0)
          goto LABEL_120;
        v74 = *v73;
        v72 = v72 + (v74 << 7) - 128;
        if (v74 < 0)
        {
          result = (char *)sub_19C2DBB98((uint64_t)v11, v72);
          *(_QWORD *)v188 = result;
          *(_DWORD *)(a1 + 304) = v168;
          if (!result)
            return result;
        }
        else
        {
          v73 = v11 + 2;
LABEL_120:
          *(_QWORD *)v188 = v73;
          *(_DWORD *)(a1 + 304) = v72;
        }
        goto LABEL_277;
      case 0x15u:
        if (v12 != 168)
          goto LABEL_279;
        *(_DWORD *)(a1 + 44) |= 2u;
        v75 = v11 + 1;
        v76 = *v11;
        if ((*v11 & 0x80000000) == 0)
          goto LABEL_125;
        v77 = *v75;
        v76 = v76 + (v77 << 7) - 128;
        if (v77 < 0)
        {
          result = (char *)sub_19C2DBB98((uint64_t)v11, v76);
          *(_QWORD *)v188 = result;
          *(_BYTE *)(a1 + 309) = v169 != 0;
          if (!result)
            return result;
        }
        else
        {
          v75 = v11 + 2;
LABEL_125:
          *(_QWORD *)v188 = v75;
          *(_BYTE *)(a1 + 309) = v76 != 0;
        }
        goto LABEL_277;
      case 0x16u:
        if (v12 != 176)
          goto LABEL_279;
        *(_DWORD *)(a1 + 44) |= 8u;
        v78 = v11 + 1;
        v79 = *v11;
        if ((*v11 & 0x80000000) == 0)
          goto LABEL_130;
        v80 = *v78;
        v79 = v79 + (v80 << 7) - 128;
        if (v80 < 0)
        {
          result = (char *)sub_19C2DBB98((uint64_t)v11, v79);
          *(_QWORD *)v188 = result;
          *(_BYTE *)(a1 + 311) = v170 != 0;
          if (!result)
            return result;
        }
        else
        {
          v78 = v11 + 2;
LABEL_130:
          *(_QWORD *)v188 = v78;
          *(_BYTE *)(a1 + 311) = v79 != 0;
        }
        goto LABEL_277;
      case 0x17u:
        if (v12 != 184)
          goto LABEL_279;
        *(_DWORD *)(a1 + 44) |= 4u;
        v81 = v11 + 1;
        v82 = *v11;
        if ((*v11 & 0x80000000) == 0)
          goto LABEL_135;
        v83 = *v81;
        v82 = v82 + (v83 << 7) - 128;
        if (v83 < 0)
        {
          result = (char *)sub_19C2DBB98((uint64_t)v11, v82);
          *(_QWORD *)v188 = result;
          *(_BYTE *)(a1 + 310) = v171 != 0;
          if (!result)
            return result;
        }
        else
        {
          v81 = v11 + 2;
LABEL_135:
          *(_QWORD *)v188 = v81;
          *(_BYTE *)(a1 + 310) = v82 != 0;
        }
        goto LABEL_277;
      case 0x18u:
        if (v12 != 192)
          goto LABEL_279;
        *(_DWORD *)(a1 + 40) |= 0x4000u;
        v84 = v11 + 1;
        v85 = *v11;
        if ((*v11 & 0x80000000) == 0)
          goto LABEL_140;
        v86 = *v84;
        v85 = v85 + (v86 << 7) - 128;
        if (v86 < 0)
        {
          result = (char *)sub_19C2DBB98((uint64_t)v11, v85);
          *(_QWORD *)v188 = result;
          *(_BYTE *)(a1 + 245) = v172 != 0;
          if (!result)
            return result;
        }
        else
        {
          v84 = v11 + 2;
LABEL_140:
          *(_QWORD *)v188 = v84;
          *(_BYTE *)(a1 + 245) = v85 != 0;
        }
        goto LABEL_277;
      case 0x19u:
        if (v12 != 200)
          goto LABEL_279;
        *(_DWORD *)(a1 + 40) |= 0x10000u;
        v87 = v11 + 1;
        v88 = *v11;
        if ((*v11 & 0x80000000) == 0)
          goto LABEL_145;
        v89 = *v87;
        v88 = v88 + (v89 << 7) - 128;
        if (v89 < 0)
        {
          result = (char *)sub_19C2DBB98((uint64_t)v11, v88);
          *(_QWORD *)v188 = result;
          *(_BYTE *)(a1 + 247) = v173 != 0;
          if (!result)
            return result;
        }
        else
        {
          v87 = v11 + 2;
LABEL_145:
          *(_QWORD *)v188 = v87;
          *(_BYTE *)(a1 + 247) = v88 != 0;
        }
        goto LABEL_277;
      case 0x1Au:
        if (v12 != 208)
          goto LABEL_279;
        *(_DWORD *)(a1 + 40) |= 0x8000u;
        v90 = v11 + 1;
        v91 = *v11;
        if ((*v11 & 0x80000000) == 0)
          goto LABEL_150;
        v92 = *v90;
        v91 = v91 + (v92 << 7) - 128;
        if (v92 < 0)
        {
          result = (char *)sub_19C2DBB98((uint64_t)v11, v91);
          *(_QWORD *)v188 = result;
          *(_BYTE *)(a1 + 246) = v174 != 0;
          if (!result)
            return result;
        }
        else
        {
          v90 = v11 + 2;
LABEL_150:
          *(_QWORD *)v188 = v90;
          *(_BYTE *)(a1 + 246) = v91 != 0;
        }
        goto LABEL_277;
      case 0x1Eu:
        if (v12 != 242)
          goto LABEL_279;
        result = v11 - 2;
        while (1)
        {
          v93 = result + 2;
          *(_QWORD *)v188 = result + 2;
          v94 = *(int **)(a1 + 120);
          if (!v94)
            break;
          v95 = *(int *)(a1 + 112);
          v96 = *v94;
          if ((int)v95 >= *v94)
          {
            if (v96 == *(_DWORD *)(a1 + 116))
            {
LABEL_158:
              sub_19C2E0CEC(a1 + 104, v96 + 1);
              v94 = *(int **)(a1 + 120);
              v96 = *v94;
            }
            *v94 = v96 + 1;
            v98 = *v8;
            if (*v8)
            {
              if ((*(_BYTE *)(v98 + 24) & 1) != 0)
                (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v98 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v98 + 32) + 32), &unk_1E3D33010, 24);
              v97 = (std::string *)sub_19C2CDDDC((unint64_t *)v98, 0x18uLL, (uint64_t)sub_19C2CA134);
            }
            else
            {
              v97 = (std::string *)operator new();
            }
            v97->__r_.__value_.__r.__words[0] = 0;
            v97->__r_.__value_.__l.__size_ = 0;
            v97->__r_.__value_.__r.__words[2] = 0;
            v99 = *(_QWORD *)(a1 + 120);
            v100 = *(int *)(a1 + 112);
            *(_DWORD *)(a1 + 112) = v100 + 1;
            *(_QWORD *)(v99 + 8 * v100 + 8) = v97;
            v93 = *(char **)v188;
            goto LABEL_165;
          }
          *(_DWORD *)(a1 + 112) = v95 + 1;
          v97 = *(std::string **)&v94[2 * v95 + 2];
LABEL_165:
          result = (char *)sub_19C2DBC94(v97, v93, (uint64_t)a3);
          *(_QWORD *)v188 = result;
          if (!result)
            return result;
          if (*(_QWORD *)a3 <= (unint64_t)result || *(_WORD *)result != 498)
            goto LABEL_277;
        }
        v96 = *(_DWORD *)(a1 + 116);
        goto LABEL_158;
      case 0x1Fu:
        if (v12 != 250)
          goto LABEL_279;
        result = v11 - 2;
        break;
      case 0x20u:
        if ((_BYTE)v12)
          goto LABEL_279;
        *(_DWORD *)(a1 + 44) |= 0x10u;
        v109 = v11 + 1;
        v110 = *v11;
        if ((*v11 & 0x80000000) == 0)
          goto LABEL_191;
        v111 = *v109;
        v110 = v110 + (v111 << 7) - 128;
        if (v111 < 0)
        {
          result = (char *)sub_19C2DBB98((uint64_t)v11, v110);
          *(_QWORD *)v188 = result;
          *(_BYTE *)(a1 + 312) = v175 != 0;
          if (!result)
            return result;
        }
        else
        {
          v109 = v11 + 2;
LABEL_191:
          *(_QWORD *)v188 = v109;
          *(_BYTE *)(a1 + 312) = v110 != 0;
        }
        goto LABEL_277;
      case 0x21u:
        if (v12 != 8)
          goto LABEL_279;
        *(_DWORD *)(a1 + 44) |= 0x20u;
        v112 = v11 + 1;
        v113 = *v11;
        if ((*v11 & 0x80000000) == 0)
          goto LABEL_196;
        v114 = *v112;
        v113 = v113 + (v114 << 7) - 128;
        if (v114 < 0)
        {
          result = (char *)sub_19C2DBB98((uint64_t)v11, v113);
          *(_QWORD *)v188 = result;
          *(_BYTE *)(a1 + 313) = v176 != 0;
          if (!result)
            return result;
        }
        else
        {
          v112 = v11 + 2;
LABEL_196:
          *(_QWORD *)v188 = v112;
          *(_BYTE *)(a1 + 313) = v113 != 0;
        }
        goto LABEL_277;
      case 0x22u:
        if (v12 != 16)
          goto LABEL_279;
        *(_DWORD *)(a1 + 40) |= 0x40000u;
        v115 = v11 + 1;
        v116 = *v11;
        if ((*v11 & 0x80000000) == 0)
          goto LABEL_201;
        v117 = *v115;
        v116 = v116 + (v117 << 7) - 128;
        if (v117 < 0)
        {
          result = (char *)sub_19C2DBB98((uint64_t)v11, v116);
          *(_QWORD *)v188 = result;
          *(_BYTE *)(a1 + 249) = v177 != 0;
          if (!result)
            return result;
        }
        else
        {
          v115 = v11 + 2;
LABEL_201:
          *(_QWORD *)v188 = v115;
          *(_BYTE *)(a1 + 249) = v116 != 0;
        }
        goto LABEL_277;
      case 0x23u:
        if (v12 != 24)
          goto LABEL_279;
        *(_DWORD *)(a1 + 40) |= 0x20000u;
        v118 = v11 + 1;
        v119 = *v11;
        if ((*v11 & 0x80000000) == 0)
          goto LABEL_206;
        v120 = *v118;
        v119 = v119 + (v120 << 7) - 128;
        if (v120 < 0)
        {
          result = (char *)sub_19C2DBB98((uint64_t)v11, v119);
          *(_QWORD *)v188 = result;
          *(_BYTE *)(a1 + 248) = v178 != 0;
          if (!result)
            return result;
        }
        else
        {
          v118 = v11 + 2;
LABEL_206:
          *(_QWORD *)v188 = v118;
          *(_BYTE *)(a1 + 248) = v119 != 0;
        }
        goto LABEL_277;
      case 0x24u:
        if (v12 != 34)
          goto LABEL_279;
        *(_DWORD *)(a1 + 40) |= 4u;
        v121 = *(_QWORD *)(a1 + 8);
        v24 = (_QWORD *)(v121 & 0xFFFFFFFFFFFFFFFELL);
        if ((v121 & 1) != 0)
          v24 = (_QWORD *)*v24;
        v25 = (uint64_t *)(a1 + 168);
        goto LABEL_269;
      case 0x28u:
        if (v12 != 64)
          goto LABEL_279;
        *(_DWORD *)(a1 + 40) |= 0x100000u;
        v123 = v11 + 1;
        LODWORD(v122) = *v11;
        if ((v122 & 0x80) == 0)
          goto LABEL_215;
        v124 = *v123;
        v122 = v122 + (v124 << 7) - 128;
        if (v124 < 0)
        {
          result = (char *)sub_19C2DBB98((uint64_t)v11, v122);
          *(_QWORD *)v188 = result;
          *(_DWORD *)(a1 + 252) = v179;
          if (!result)
            return result;
        }
        else
        {
          v123 = v11 + 2;
LABEL_215:
          *(_QWORD *)v188 = v123;
          *(_DWORD *)(a1 + 252) = v122;
        }
        goto LABEL_277;
      case 0x29u:
        if (v12 != 72)
          goto LABEL_279;
        *(_DWORD *)(a1 + 44) |= 0x40u;
        v126 = v11 + 1;
        LODWORD(v125) = *v11;
        if ((v125 & 0x80) == 0)
          goto LABEL_220;
        v127 = *v126;
        v125 = v125 + (v127 << 7) - 128;
        if (v127 < 0)
        {
          result = (char *)sub_19C2DBB98((uint64_t)v11, v125);
          *(_QWORD *)v188 = result;
          *(_DWORD *)(a1 + 316) = v180;
          if (!result)
            return result;
        }
        else
        {
          v126 = v11 + 2;
LABEL_220:
          *(_QWORD *)v188 = v126;
          *(_DWORD *)(a1 + 316) = v125;
        }
        goto LABEL_277;
      case 0x2Au:
        if (v12 != 80)
          goto LABEL_279;
        *(_DWORD *)(a1 + 44) |= 0x80u;
        v129 = v11 + 1;
        LODWORD(v128) = *v11;
        if ((v128 & 0x80) == 0)
          goto LABEL_225;
        v130 = *v129;
        v128 = v128 + (v130 << 7) - 128;
        if (v130 < 0)
        {
          result = (char *)sub_19C2DBB98((uint64_t)v11, v128);
          *(_QWORD *)v188 = result;
          *(_DWORD *)(a1 + 320) = v181;
          if (!result)
            return result;
        }
        else
        {
          v129 = v11 + 2;
LABEL_225:
          *(_QWORD *)v188 = v129;
          *(_DWORD *)(a1 + 320) = v128;
        }
        goto LABEL_277;
      case 0x2Bu:
        if (v12 != 88)
          goto LABEL_279;
        *(_DWORD *)(a1 + 44) |= 0x100u;
        v132 = v11 + 1;
        LODWORD(v131) = *v11;
        if ((v131 & 0x80) == 0)
          goto LABEL_230;
        v133 = *v132;
        v131 = v131 + (v133 << 7) - 128;
        if (v133 < 0)
        {
          result = (char *)sub_19C2DBB98((uint64_t)v11, v131);
          *(_QWORD *)v188 = result;
          *(_DWORD *)(a1 + 324) = v182;
          if (!result)
            return result;
        }
        else
        {
          v132 = v11 + 2;
LABEL_230:
          *(_QWORD *)v188 = v132;
          *(_DWORD *)(a1 + 324) = v131;
        }
        goto LABEL_277;
      case 0x2Cu:
        if (v12 != 98)
          goto LABEL_279;
        *(_DWORD *)(a1 + 40) |= 8u;
        v153 = *(_QWORD *)(a1 + 8);
        v135 = (_QWORD *)(v153 & 0xFFFFFFFFFFFFFFFELL);
        if ((v153 & 1) != 0)
          v135 = (_QWORD *)*v135;
        v136 = &off_1EE41ADB0;
        v137 = (uint64_t *)(a1 + 176);
        goto LABEL_274;
      case 0x2Du:
        if (v12 != 106)
          goto LABEL_279;
        *(_DWORD *)(a1 + 40) |= 0x10u;
        v134 = *(_QWORD *)(a1 + 8);
        v135 = (_QWORD *)(v134 & 0xFFFFFFFFFFFFFFFELL);
        if ((v134 & 1) != 0)
          v135 = (_QWORD *)*v135;
        v136 = &off_1EE41AD30;
        v137 = (uint64_t *)(a1 + 184);
        goto LABEL_274;
      case 0x2Eu:
        if (v12 != 114)
          goto LABEL_279;
        *(_DWORD *)(a1 + 40) |= 0x20u;
        v138 = *(_QWORD *)(a1 + 8);
        v135 = (_QWORD *)(v138 & 0xFFFFFFFFFFFFFFFELL);
        if ((v138 & 1) != 0)
          v135 = (_QWORD *)*v135;
        v136 = &off_1EE41AD50;
        v137 = (uint64_t *)(a1 + 192);
        goto LABEL_274;
      case 0x2Fu:
        if (v12 != 122)
          goto LABEL_279;
        *(_DWORD *)(a1 + 40) |= 0x40u;
        v139 = *(_QWORD *)(a1 + 8);
        v135 = (_QWORD *)(v139 & 0xFFFFFFFFFFFFFFFELL);
        if ((v139 & 1) != 0)
          v135 = (_QWORD *)*v135;
        v136 = &off_1EE41AD70;
        v137 = (uint64_t *)(a1 + 200);
        goto LABEL_274;
      case 0x30u:
        if (v12 != 130)
          goto LABEL_279;
        *(_DWORD *)(a1 + 40) |= 0x80u;
        v140 = *(_QWORD *)(a1 + 8);
        v135 = (_QWORD *)(v140 & 0xFFFFFFFFFFFFFFFELL);
        if ((v140 & 1) != 0)
          v135 = (_QWORD *)*v135;
        v136 = &off_1EE41AD90;
        v137 = (uint64_t *)(a1 + 208);
LABEL_274:
        v152 = (std::string *)sub_19C2CE63C(v137, v136, (uint64_t)v135);
        goto LABEL_275;
      case 0x31u:
        if (v12 != 136)
          goto LABEL_279;
        *(_DWORD *)(a1 + 40) |= 0x80000u;
        v141 = v11 + 1;
        v142 = *v11;
        if ((*v11 & 0x80000000) == 0)
          goto LABEL_251;
        v143 = *v141;
        v142 = v142 + (v143 << 7) - 128;
        if (v143 < 0)
        {
          result = (char *)sub_19C2DBB98((uint64_t)v11, v142);
          *(_QWORD *)v188 = result;
          *(_BYTE *)(a1 + 250) = v183 != 0;
          if (!result)
            return result;
        }
        else
        {
          v141 = v11 + 2;
LABEL_251:
          *(_QWORD *)v188 = v141;
          *(_BYTE *)(a1 + 250) = v142 != 0;
        }
        goto LABEL_277;
      case 0x32u:
        if (v12 != 144)
          goto LABEL_279;
        *(_DWORD *)(a1 + 40) |= 0x2000u;
        v144 = v11 + 1;
        v145 = *v11;
        if ((*v11 & 0x80000000) == 0)
          goto LABEL_256;
        v146 = *v144;
        v145 = v145 + (v146 << 7) - 128;
        if (v146 < 0)
        {
          result = (char *)sub_19C2DBB98((uint64_t)v11, v145);
          *(_QWORD *)v188 = result;
          *(_BYTE *)(a1 + 244) = v184 != 0;
          if (!result)
            return result;
        }
        else
        {
          v144 = v11 + 2;
LABEL_256:
          *(_QWORD *)v188 = v144;
          *(_BYTE *)(a1 + 244) = v145 != 0;
        }
        goto LABEL_277;
      case 0x33u:
        if (v12 != 157)
          goto LABEL_279;
        *(_DWORD *)(a1 + 40) |= 0x200000u;
        v147 = *(_DWORD *)v11;
        v45 = v11 + 4;
        *(_DWORD *)(a1 + 256) = v147;
LABEL_259:
        *(_QWORD *)v188 = v45;
        goto LABEL_277;
      case 0x34u:
        if (v12 != 160)
          goto LABEL_279;
        *(_DWORD *)(a1 + 40) |= 0x400000u;
        v148 = v11 + 1;
        v149 = *v11;
        if ((*v11 & 0x80000000) == 0)
          goto LABEL_264;
        v150 = *v148;
        v149 = v149 + (v150 << 7) - 128;
        if (v150 < 0)
        {
          result = (char *)sub_19C2DBB98((uint64_t)v11, v149);
          *(_QWORD *)v188 = result;
          *(_QWORD *)(a1 + 264) = v185;
          if (!result)
            return result;
        }
        else
        {
          v148 = v11 + 2;
LABEL_264:
          *(_QWORD *)v188 = v148;
          *(_QWORD *)(a1 + 264) = v149;
        }
        goto LABEL_277;
      case 0x35u:
        if (v12 != 170)
          goto LABEL_279;
        *(_DWORD *)(a1 + 40) |= 0x100u;
        v151 = *(_QWORD *)(a1 + 8);
        v24 = (_QWORD *)(v151 & 0xFFFFFFFFFFFFFFFELL);
        if ((v151 & 1) != 0)
          v24 = (_QWORD *)*v24;
        v25 = (uint64_t *)(a1 + 216);
LABEL_269:
        v152 = (std::string *)sub_19C2CE524(v25, (uint64_t)v24);
LABEL_275:
        result = (char *)sub_19C2DBC94(v152, *(char **)v188, (uint64_t)a3);
        goto LABEL_276;
      default:
LABEL_279:
        if (v12)
          v155 = (v12 & 7) == 4;
        else
          v155 = 1;
        if (v155)
        {
          a3[10].i32[0] = v12 - 1;
          return v11;
        }
        if (v12 < 0x640)
        {
          if ((*v187 & 1) != 0)
          {
            v156 = (std::string *)((*v187 & 0xFFFFFFFFFFFFFFFELL) + 8);
          }
          else
          {
            v156 = (std::string *)sub_19C2C138C(v187);
            v11 = *(char **)v188;
          }
          result = (char *)sub_19C2DC0C0(v12, v156, v11, a3);
        }
        else
        {
          result = (char *)sub_19C2D4BD0((uint64_t *)(a1 + 16), v12, (unsigned __int8 *)v11, (uint64_t)&unk_1EE41C660, v187, a3);
        }
LABEL_276:
        *(_QWORD *)v188 = result;
        if (!result)
          return result;
LABEL_277:
        v154 = sub_19C2C1250((uint64_t)a3, (char **)v188, a3[11].i32[1]);
        result = *(char **)v188;
        if (v154)
          return result;
        continue;
    }
    break;
  }
  while (1)
  {
    v101 = result + 2;
    *(_QWORD *)v188 = result + 2;
    v102 = *(int **)(a1 + 144);
    if (!v102)
      break;
    v103 = *(int *)(a1 + 136);
    v104 = *v102;
    if ((int)v103 >= *v102)
    {
      if (v104 == *(_DWORD *)(a1 + 140))
      {
LABEL_176:
        sub_19C2E0CEC(a1 + 128, v104 + 1);
        v102 = *(int **)(a1 + 144);
        v104 = *v102;
      }
      *v102 = v104 + 1;
      v106 = *v7;
      if (*v7)
      {
        if ((*(_BYTE *)(v106 + 24) & 1) != 0)
          (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v106 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v106 + 32) + 32), &unk_1E3D33010, 24);
        v105 = (std::string *)sub_19C2CDDDC((unint64_t *)v106, 0x18uLL, (uint64_t)sub_19C2CA134);
      }
      else
      {
        v105 = (std::string *)operator new();
      }
      v105->__r_.__value_.__r.__words[0] = 0;
      v105->__r_.__value_.__l.__size_ = 0;
      v105->__r_.__value_.__r.__words[2] = 0;
      v107 = *(_QWORD *)(a1 + 144);
      v108 = *(int *)(a1 + 136);
      *(_DWORD *)(a1 + 136) = v108 + 1;
      *(_QWORD *)(v107 + 8 * v108 + 8) = v105;
      v101 = *(char **)v188;
      goto LABEL_183;
    }
    *(_DWORD *)(a1 + 136) = v103 + 1;
    v105 = *(std::string **)&v102[2 * v103 + 2];
LABEL_183:
    result = (char *)sub_19C2DBC94(v105, v101, (uint64_t)a3);
    *(_QWORD *)v188 = result;
    if (!result)
      return result;
    if (*(_QWORD *)a3 <= (unint64_t)result || *(_WORD *)result != 506)
      goto LABEL_277;
  }
  v104 = *(_DWORD *)(a1 + 140);
  goto LABEL_176;
}

char *sub_19C2C3A08(uint64_t a1, char *a2, uint64_t *a3)
{
  int v6;
  int i;
  uint64_t v8;
  int64_t v9;
  const void *v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  int j;
  uint64_t v22;
  int64_t v23;
  const void *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  int v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  char v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  int v64;
  char v65;
  char v66;
  char v67;
  int v68;
  char v69;
  char v70;
  char v71;
  int v72;
  int k;
  uint64_t v74;
  int64_t v75;
  const void *v76;
  int v77;
  int m;
  uint64_t v79;
  int64_t v80;
  const void *v81;
  int v82;
  char v83;
  char v84;
  int v85;
  char v86;
  char v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  int v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  int v105;
  char *v106;
  char *v107;
  uint64_t v108;
  char v110;
  char v111;
  int v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  void *v118;
  uint64_t v119;
  uint64_t v120;

  v6 = *(_DWORD *)(a1 + 64);
  if (v6 >= 1)
  {
    for (i = 0; v6 != i; ++i)
    {
      v8 = sub_19C2CA2E4(a1 + 56, i);
      if (*(char *)(v8 + 23) < 0)
      {
        v9 = *(_QWORD *)(v8 + 8);
        if (v9 > 127)
          goto LABEL_13;
      }
      else
      {
        v9 = *(unsigned __int8 *)(v8 + 23);
      }
      if (*a3 - (uint64_t)a2 + 14 >= v9)
      {
        *a2 = 10;
        a2[1] = v9;
        if (*(char *)(v8 + 23) >= 0)
          v10 = (const void *)v8;
        else
          v10 = *(const void **)v8;
        memcpy(a2 + 2, v10, v9);
        a2 += v9 + 2;
        continue;
      }
LABEL_13:
      a2 = sub_19C2CF0B4(a3, 1, v8, a2);
    }
  }
  v11 = *(_DWORD *)(a1 + 40);
  if ((v11 & 1) != 0)
  {
    a2 = sub_19C2BF5D4((unint64_t *)a3, 2, *(_QWORD *)(a1 + 152) & 0xFFFFFFFFFFFFFFFELL, a2);
    if ((v11 & 0x800000) == 0)
    {
LABEL_16:
      if ((v11 & 0x1000000) == 0)
        goto LABEL_38;
      goto LABEL_17;
    }
  }
  else if ((v11 & 0x800000) == 0)
  {
    goto LABEL_16;
  }
  if (*a3 <= (unint64_t)a2)
    a2 = sub_19C2CEBA4((uint64_t)a3, a2);
  v13 = *(int *)(a1 + 272);
  *a2 = 24;
  if (v13 > 0x7F)
  {
    a2[1] = v13 | 0x80;
    v15 = v13 >> 7;
    if (v13 >> 14)
    {
      a2 += 3;
      do
      {
        *(a2 - 1) = v15 | 0x80;
        v18 = v15 >> 7;
        ++a2;
        v19 = v15 >> 14;
        v15 >>= 7;
      }
      while (v19);
      *(a2 - 1) = v18;
      if ((v11 & 0x1000000) == 0)
        goto LABEL_38;
    }
    else
    {
      a2[2] = v15;
      a2 += 3;
      if ((v11 & 0x1000000) == 0)
        goto LABEL_38;
    }
  }
  else
  {
    a2[1] = v13;
    a2 += 2;
    if ((v11 & 0x1000000) == 0)
      goto LABEL_38;
  }
LABEL_17:
  if (*a3 <= (unint64_t)a2)
    a2 = sub_19C2CEBA4((uint64_t)a3, a2);
  v12 = *(int *)(a1 + 276);
  *a2 = 32;
  if (v12 > 0x7F)
  {
    a2[1] = v12 | 0x80;
    v14 = v12 >> 7;
    if (v12 >> 14)
    {
      a2 += 3;
      do
      {
        *(a2 - 1) = v14 | 0x80;
        v16 = v14 >> 7;
        ++a2;
        v17 = v14 >> 14;
        v14 >>= 7;
      }
      while (v17);
      *(a2 - 1) = v16;
    }
    else
    {
      a2[2] = v14;
      a2 += 3;
    }
  }
  else
  {
    a2[1] = v12;
    a2 += 2;
  }
LABEL_38:
  v20 = *(_DWORD *)(a1 + 88);
  if (v20 >= 1)
  {
    for (j = 0; v20 != j; ++j)
    {
      v22 = sub_19C2CA2E4(a1 + 80, j);
      if (*(char *)(v22 + 23) < 0)
      {
        v23 = *(_QWORD *)(v22 + 8);
        if (v23 > 127)
          goto LABEL_50;
      }
      else
      {
        v23 = *(unsigned __int8 *)(v22 + 23);
      }
      if (*a3 - (uint64_t)a2 + 14 >= v23)
      {
        *a2 = 42;
        a2[1] = v23;
        if (*(char *)(v22 + 23) >= 0)
          v24 = (const void *)v22;
        else
          v24 = *(const void **)v22;
        memcpy(a2 + 2, v24, v23);
        a2 += v23 + 2;
        continue;
      }
LABEL_50:
      a2 = sub_19C2CF0B4(a3, 5, v22, a2);
    }
  }
  if ((v11 & 0x200) != 0)
  {
    if (*a3 <= (unint64_t)a2)
      a2 = sub_19C2CEBA4((uint64_t)a3, a2);
    v26 = *(int *)(a1 + 224);
    *a2 = 48;
    if (v26 > 0x7F)
    {
      a2[1] = v26 | 0x80;
      v28 = v26 >> 7;
      if (v26 >> 14)
      {
        a2 += 3;
        do
        {
          *(a2 - 1) = v28 | 0x80;
          v31 = v28 >> 7;
          ++a2;
          v32 = v28 >> 14;
          v28 >>= 7;
        }
        while (v32);
        *(a2 - 1) = v31;
        if ((v11 & 2) != 0)
          goto LABEL_82;
      }
      else
      {
        a2[2] = v28;
        a2 += 3;
        if ((v11 & 2) != 0)
          goto LABEL_82;
      }
    }
    else
    {
      a2[1] = v26;
      a2 += 2;
      if ((v11 & 2) != 0)
        goto LABEL_82;
    }
LABEL_53:
    if ((v11 & 0x2000000) == 0)
      goto LABEL_54;
    goto LABEL_83;
  }
  if ((v11 & 2) == 0)
    goto LABEL_53;
LABEL_82:
  a2 = sub_19C2BF5D4((unint64_t *)a3, 7, *(_QWORD *)(a1 + 160) & 0xFFFFFFFFFFFFFFFELL, a2);
  if ((v11 & 0x2000000) == 0)
  {
LABEL_54:
    if ((v11 & 0x800) == 0)
      goto LABEL_55;
    goto LABEL_86;
  }
LABEL_83:
  if (*a3 <= (unint64_t)a2)
    a2 = sub_19C2CEBA4((uint64_t)a3, a2);
  v33 = *(_DWORD *)(a1 + 280);
  *a2 = 85;
  *(_DWORD *)(a2 + 1) = v33;
  a2 += 5;
  if ((v11 & 0x800) == 0)
  {
LABEL_55:
    if ((v11 & 0x400) == 0)
      goto LABEL_56;
LABEL_97:
    if (*a3 <= (unint64_t)a2)
      a2 = sub_19C2CEBA4((uint64_t)a3, a2);
    v38 = *(int *)(a1 + 228);
    *a2 = 96;
    if (v38 > 0x7F)
    {
      a2[1] = v38 | 0x80;
      v39 = v38 >> 7;
      if (v38 >> 14)
      {
        a2 += 3;
        do
        {
          *(a2 - 1) = v39 | 0x80;
          v40 = v39 >> 7;
          ++a2;
          v41 = v39 >> 14;
          v39 >>= 7;
        }
        while (v41);
        *(a2 - 1) = v40;
        if ((v11 & 0x1000) != 0)
          goto LABEL_108;
      }
      else
      {
        a2[2] = v39;
        a2 += 3;
        if ((v11 & 0x1000) != 0)
          goto LABEL_108;
      }
    }
    else
    {
      a2[1] = v38;
      a2 += 2;
      if ((v11 & 0x1000) != 0)
        goto LABEL_108;
    }
LABEL_57:
    if ((v11 & 0x4000000) == 0)
      goto LABEL_58;
LABEL_119:
    if (*a3 <= (unint64_t)a2)
      a2 = sub_19C2CEBA4((uint64_t)a3, a2);
    v46 = *(int *)(a1 + 284);
    *a2 = 112;
    if (v46 > 0x7F)
    {
      a2[1] = v46 | 0x80;
      v47 = v46 >> 7;
      if (v46 >> 14)
      {
        a2 += 3;
        do
        {
          *(a2 - 1) = v47 | 0x80;
          v48 = v47 >> 7;
          ++a2;
          v49 = v47 >> 14;
          v47 >>= 7;
        }
        while (v49);
        *(a2 - 1) = v48;
        if ((v11 & 0x8000000) != 0)
          goto LABEL_130;
      }
      else
      {
        a2[2] = v47;
        a2 += 3;
        if ((v11 & 0x8000000) != 0)
          goto LABEL_130;
      }
    }
    else
    {
      a2[1] = v46;
      a2 += 2;
      if ((v11 & 0x8000000) != 0)
        goto LABEL_130;
    }
LABEL_59:
    if ((v11 & 0x10000000) == 0)
      goto LABEL_60;
LABEL_133:
    if (*a3 <= (unint64_t)a2)
      a2 = sub_19C2CEBA4((uint64_t)a3, a2);
    v51 = *(int *)(a1 + 292);
    *(_WORD *)a2 = 384;
    if (v51 > 0x7F)
    {
      a2[2] = v51 | 0x80;
      v52 = v51 >> 7;
      if (v51 >> 14)
      {
        a2 += 4;
        do
        {
          *(a2 - 1) = v52 | 0x80;
          v53 = v52 >> 7;
          ++a2;
          v54 = v52 >> 14;
          v52 >>= 7;
        }
        while (v54);
        *(a2 - 1) = v53;
        if ((v11 & 0x20000000) != 0)
          goto LABEL_144;
      }
      else
      {
        a2[3] = v52;
        a2 += 4;
        if ((v11 & 0x20000000) != 0)
          goto LABEL_144;
      }
    }
    else
    {
      a2[2] = v51;
      a2 += 3;
      if ((v11 & 0x20000000) != 0)
        goto LABEL_144;
    }
LABEL_61:
    if ((v11 & 0x40000000) == 0)
      goto LABEL_155;
    goto LABEL_62;
  }
LABEL_86:
  if (*a3 <= (unint64_t)a2)
    a2 = sub_19C2CEBA4((uint64_t)a3, a2);
  v34 = *(_QWORD *)(a1 + 232);
  *a2 = 88;
  if (v34 > 0x7F)
  {
    a2[1] = v34 | 0x80;
    v35 = v34 >> 7;
    if (v34 >> 14)
    {
      a2 += 3;
      do
      {
        *(a2 - 1) = v35 | 0x80;
        v36 = v35 >> 7;
        ++a2;
        v37 = v35 >> 14;
        v35 >>= 7;
      }
      while (v37);
      *(a2 - 1) = v36;
      if ((v11 & 0x400) != 0)
        goto LABEL_97;
    }
    else
    {
      a2[2] = v35;
      a2 += 3;
      if ((v11 & 0x400) != 0)
        goto LABEL_97;
    }
  }
  else
  {
    a2[1] = v34;
    a2 += 2;
    if ((v11 & 0x400) != 0)
      goto LABEL_97;
  }
LABEL_56:
  if ((v11 & 0x1000) == 0)
    goto LABEL_57;
LABEL_108:
  if (*a3 <= (unint64_t)a2)
    a2 = sub_19C2CEBA4((uint64_t)a3, a2);
  v42 = *(int *)(a1 + 240);
  *a2 = 104;
  if (v42 > 0x7F)
  {
    a2[1] = v42 | 0x80;
    v43 = v42 >> 7;
    if (v42 >> 14)
    {
      a2 += 3;
      do
      {
        *(a2 - 1) = v43 | 0x80;
        v44 = v43 >> 7;
        ++a2;
        v45 = v43 >> 14;
        v43 >>= 7;
      }
      while (v45);
      *(a2 - 1) = v44;
      if ((v11 & 0x4000000) != 0)
        goto LABEL_119;
    }
    else
    {
      a2[2] = v43;
      a2 += 3;
      if ((v11 & 0x4000000) != 0)
        goto LABEL_119;
    }
  }
  else
  {
    a2[1] = v42;
    a2 += 2;
    if ((v11 & 0x4000000) != 0)
      goto LABEL_119;
  }
LABEL_58:
  if ((v11 & 0x8000000) == 0)
    goto LABEL_59;
LABEL_130:
  if (*a3 <= (unint64_t)a2)
    a2 = sub_19C2CEBA4((uint64_t)a3, a2);
  v50 = *(_DWORD *)(a1 + 288);
  *a2 = 125;
  *(_DWORD *)(a2 + 1) = v50;
  a2 += 5;
  if ((v11 & 0x10000000) != 0)
    goto LABEL_133;
LABEL_60:
  if ((v11 & 0x20000000) == 0)
    goto LABEL_61;
LABEL_144:
  if (*a3 <= (unint64_t)a2)
    a2 = sub_19C2CEBA4((uint64_t)a3, a2);
  v55 = *(int *)(a1 + 296);
  *(_WORD *)a2 = 392;
  if (v55 > 0x7F)
  {
    a2[2] = v55 | 0x80;
    v56 = v55 >> 7;
    if (v55 >> 14)
    {
      a2 += 4;
      do
      {
        *(a2 - 1) = v56 | 0x80;
        v57 = v56 >> 7;
        ++a2;
        v58 = v56 >> 14;
        v56 >>= 7;
      }
      while (v58);
      *(a2 - 1) = v57;
      if ((v11 & 0x40000000) == 0)
        goto LABEL_155;
    }
    else
    {
      a2[3] = v56;
      a2 += 4;
      if ((v11 & 0x40000000) == 0)
        goto LABEL_155;
    }
  }
  else
  {
    a2[2] = v55;
    a2 += 3;
    if ((v11 & 0x40000000) == 0)
      goto LABEL_155;
  }
LABEL_62:
  if (*a3 <= (unint64_t)a2)
    a2 = sub_19C2CEBA4((uint64_t)a3, a2);
  v25 = *(int *)(a1 + 300);
  *(_WORD *)a2 = 400;
  if (v25 > 0x7F)
  {
    a2[2] = v25 | 0x80;
    v27 = v25 >> 7;
    if (v25 >> 14)
    {
      a2 += 4;
      do
      {
        *(a2 - 1) = v27 | 0x80;
        v29 = v27 >> 7;
        ++a2;
        v30 = v27 >> 14;
        v27 >>= 7;
      }
      while (v30);
      *(a2 - 1) = v29;
    }
    else
    {
      a2[3] = v27;
      a2 += 4;
    }
  }
  else
  {
    a2[2] = v25;
    a2 += 3;
  }
LABEL_155:
  if ((*(_BYTE *)(a1 + 44) & 1) != 0)
  {
    if (*a3 <= (unint64_t)a2)
      a2 = sub_19C2CEBA4((uint64_t)a3, a2);
    v59 = *(_BYTE *)(a1 + 308);
    *(_WORD *)a2 = 408;
    a2[2] = v59;
    a2 += 3;
  }
  if ((*(_DWORD *)(a1 + 40) & 0x80000000) != 0)
  {
    if (*a3 <= (unint64_t)a2)
      a2 = sub_19C2CEBA4((uint64_t)a3, a2);
    v60 = *(int *)(a1 + 304);
    *(_WORD *)a2 = 416;
    if (v60 > 0x7F)
    {
      a2[2] = v60 | 0x80;
      v61 = v60 >> 7;
      if (v60 >> 14)
      {
        a2 += 4;
        do
        {
          *(a2 - 1) = v61 | 0x80;
          v62 = v61 >> 7;
          ++a2;
          v63 = v61 >> 14;
          v61 >>= 7;
        }
        while (v63);
        *(a2 - 1) = v62;
      }
      else
      {
        a2[3] = v61;
        a2 += 4;
      }
    }
    else
    {
      a2[2] = v60;
      a2 += 3;
    }
  }
  v64 = *(_DWORD *)(a1 + 44);
  if ((v64 & 2) != 0)
  {
    if (*a3 <= (unint64_t)a2)
      a2 = sub_19C2CEBA4((uint64_t)a3, a2);
    v65 = *(_BYTE *)(a1 + 309);
    *(_WORD *)a2 = 424;
    a2[2] = v65;
    a2 += 3;
    if ((v64 & 8) == 0)
    {
LABEL_171:
      if ((v64 & 4) == 0)
        goto LABEL_182;
      goto LABEL_179;
    }
  }
  else if ((v64 & 8) == 0)
  {
    goto LABEL_171;
  }
  if (*a3 <= (unint64_t)a2)
    a2 = sub_19C2CEBA4((uint64_t)a3, a2);
  v66 = *(_BYTE *)(a1 + 311);
  *(_WORD *)a2 = 432;
  a2[2] = v66;
  a2 += 3;
  if ((v64 & 4) != 0)
  {
LABEL_179:
    if (*a3 <= (unint64_t)a2)
      a2 = sub_19C2CEBA4((uint64_t)a3, a2);
    v67 = *(_BYTE *)(a1 + 310);
    *(_WORD *)a2 = 440;
    a2[2] = v67;
    a2 += 3;
  }
LABEL_182:
  v68 = *(_DWORD *)(a1 + 40);
  if ((v68 & 0x4000) != 0)
  {
    if (*a3 <= (unint64_t)a2)
      a2 = sub_19C2CEBA4((uint64_t)a3, a2);
    v69 = *(_BYTE *)(a1 + 245);
    *(_WORD *)a2 = 448;
    a2[2] = v69;
    a2 += 3;
    if ((v68 & 0x10000) == 0)
    {
LABEL_184:
      if ((v68 & 0x8000) == 0)
        goto LABEL_195;
      goto LABEL_192;
    }
  }
  else if ((v68 & 0x10000) == 0)
  {
    goto LABEL_184;
  }
  if (*a3 <= (unint64_t)a2)
    a2 = sub_19C2CEBA4((uint64_t)a3, a2);
  v70 = *(_BYTE *)(a1 + 247);
  *(_WORD *)a2 = 456;
  a2[2] = v70;
  a2 += 3;
  if ((v68 & 0x8000) != 0)
  {
LABEL_192:
    if (*a3 <= (unint64_t)a2)
      a2 = sub_19C2CEBA4((uint64_t)a3, a2);
    v71 = *(_BYTE *)(a1 + 246);
    *(_WORD *)a2 = 464;
    a2[2] = v71;
    a2 += 3;
  }
LABEL_195:
  v72 = *(_DWORD *)(a1 + 112);
  if (v72 >= 1)
  {
    for (k = 0; v72 != k; ++k)
    {
      v74 = sub_19C2CA2E4(a1 + 104, k);
      if (*(char *)(v74 + 23) < 0)
      {
        v75 = *(_QWORD *)(v74 + 8);
        if (v75 > 127)
          goto LABEL_207;
      }
      else
      {
        v75 = *(unsigned __int8 *)(v74 + 23);
      }
      if (*a3 - (uint64_t)a2 + 13 >= v75)
      {
        *(_WORD *)a2 = 498;
        a2[2] = v75;
        if (*(char *)(v74 + 23) >= 0)
          v76 = (const void *)v74;
        else
          v76 = *(const void **)v74;
        memcpy(a2 + 3, v76, v75);
        a2 += v75 + 3;
        continue;
      }
LABEL_207:
      a2 = sub_19C2CF0B4(a3, 30, v74, a2);
    }
  }
  v77 = *(_DWORD *)(a1 + 136);
  if (v77 >= 1)
  {
    for (m = 0; v77 != m; ++m)
    {
      v79 = sub_19C2CA2E4(a1 + 128, m);
      if (*(char *)(v79 + 23) < 0)
      {
        v80 = *(_QWORD *)(v79 + 8);
        if (v80 > 127)
          goto LABEL_220;
      }
      else
      {
        v80 = *(unsigned __int8 *)(v79 + 23);
      }
      if (*a3 - (uint64_t)a2 + 13 >= v80)
      {
        *(_WORD *)a2 = 506;
        a2[2] = v80;
        if (*(char *)(v79 + 23) >= 0)
          v81 = (const void *)v79;
        else
          v81 = *(const void **)v79;
        memcpy(a2 + 3, v81, v80);
        a2 += v80 + 3;
        continue;
      }
LABEL_220:
      a2 = sub_19C2CF0B4(a3, 31, v79, a2);
    }
  }
  v82 = *(_DWORD *)(a1 + 44);
  if ((v82 & 0x10) != 0)
  {
    if (*a3 <= (unint64_t)a2)
      a2 = sub_19C2CEBA4((uint64_t)a3, a2);
    v83 = *(_BYTE *)(a1 + 312);
    *(_WORD *)a2 = 640;
    a2[2] = v83;
    a2 += 3;
  }
  if ((v82 & 0x20) != 0)
  {
    if (*a3 <= (unint64_t)a2)
      a2 = sub_19C2CEBA4((uint64_t)a3, a2);
    v84 = *(_BYTE *)(a1 + 313);
    *(_WORD *)a2 = 648;
    a2[2] = v84;
    a2 += 3;
  }
  v85 = *(_DWORD *)(a1 + 40);
  if ((v85 & 0x40000) != 0)
  {
    if (*a3 <= (unint64_t)a2)
      a2 = sub_19C2CEBA4((uint64_t)a3, a2);
    v86 = *(_BYTE *)(a1 + 249);
    *(_WORD *)a2 = 656;
    a2[2] = v86;
    a2 += 3;
    if ((v85 & 0x20000) == 0)
    {
LABEL_231:
      if ((v85 & 4) == 0)
        goto LABEL_232;
      goto LABEL_240;
    }
  }
  else if ((v85 & 0x20000) == 0)
  {
    goto LABEL_231;
  }
  if (*a3 <= (unint64_t)a2)
    a2 = sub_19C2CEBA4((uint64_t)a3, a2);
  v87 = *(_BYTE *)(a1 + 248);
  *(_WORD *)a2 = 664;
  a2[2] = v87;
  a2 += 3;
  if ((v85 & 4) == 0)
  {
LABEL_232:
    if ((v85 & 0x100000) == 0)
      goto LABEL_250;
    goto LABEL_241;
  }
LABEL_240:
  a2 = sub_19C2BF5D4((unint64_t *)a3, 36, *(_QWORD *)(a1 + 168) & 0xFFFFFFFFFFFFFFFELL, a2);
  if ((v85 & 0x100000) == 0)
    goto LABEL_250;
LABEL_241:
  if (*a3 <= (unint64_t)a2)
    a2 = sub_19C2CEBA4((uint64_t)a3, a2);
  v88 = *(int *)(a1 + 252);
  *(_WORD *)a2 = 704;
  if (v88 > 0x7F)
  {
    a2[2] = v88 | 0x80;
    v89 = v88 >> 7;
    if (v88 >> 14)
    {
      a2 += 4;
      do
      {
        *(a2 - 1) = v89 | 0x80;
        v90 = v89 >> 7;
        ++a2;
        v91 = v89 >> 14;
        v89 >>= 7;
      }
      while (v91);
      *(a2 - 1) = v90;
    }
    else
    {
      a2[3] = v89;
      a2 += 4;
    }
  }
  else
  {
    a2[2] = v88;
    a2 += 3;
  }
LABEL_250:
  v92 = *(_DWORD *)(a1 + 44);
  if ((v92 & 0x40) != 0)
  {
    if (*a3 <= (unint64_t)a2)
      a2 = sub_19C2CEBA4((uint64_t)a3, a2);
    v94 = *(int *)(a1 + 316);
    *(_WORD *)a2 = 712;
    if (v94 > 0x7F)
    {
      a2[2] = v94 | 0x80;
      v96 = v94 >> 7;
      if (v94 >> 14)
      {
        a2 += 4;
        do
        {
          *(a2 - 1) = v96 | 0x80;
          v99 = v96 >> 7;
          ++a2;
          v100 = v96 >> 14;
          v96 >>= 7;
        }
        while (v100);
        *(a2 - 1) = v99;
        if ((v92 & 0x80) != 0)
          goto LABEL_273;
      }
      else
      {
        a2[3] = v96;
        a2 += 4;
        if ((v92 & 0x80) != 0)
          goto LABEL_273;
      }
    }
    else
    {
      a2[2] = v94;
      a2 += 3;
      if ((v92 & 0x80) != 0)
        goto LABEL_273;
    }
LABEL_252:
    if ((v92 & 0x100) == 0)
      goto LABEL_284;
    goto LABEL_253;
  }
  if ((v92 & 0x80) == 0)
    goto LABEL_252;
LABEL_273:
  if (*a3 <= (unint64_t)a2)
    a2 = sub_19C2CEBA4((uint64_t)a3, a2);
  v101 = *(int *)(a1 + 320);
  *(_WORD *)a2 = 720;
  if (v101 > 0x7F)
  {
    a2[2] = v101 | 0x80;
    v102 = v101 >> 7;
    if (v101 >> 14)
    {
      a2 += 4;
      do
      {
        *(a2 - 1) = v102 | 0x80;
        v103 = v102 >> 7;
        ++a2;
        v104 = v102 >> 14;
        v102 >>= 7;
      }
      while (v104);
      *(a2 - 1) = v103;
      if ((v92 & 0x100) == 0)
        goto LABEL_284;
    }
    else
    {
      a2[3] = v102;
      a2 += 4;
      if ((v92 & 0x100) == 0)
        goto LABEL_284;
    }
  }
  else
  {
    a2[2] = v101;
    a2 += 3;
    if ((v92 & 0x100) == 0)
      goto LABEL_284;
  }
LABEL_253:
  if (*a3 <= (unint64_t)a2)
    a2 = sub_19C2CEBA4((uint64_t)a3, a2);
  v93 = *(int *)(a1 + 324);
  *(_WORD *)a2 = 728;
  if (v93 > 0x7F)
  {
    a2[2] = v93 | 0x80;
    v95 = v93 >> 7;
    if (v93 >> 14)
    {
      a2 += 4;
      do
      {
        *(a2 - 1) = v95 | 0x80;
        v97 = v95 >> 7;
        ++a2;
        v98 = v95 >> 14;
        v95 >>= 7;
      }
      while (v98);
      *(a2 - 1) = v97;
    }
    else
    {
      a2[3] = v95;
      a2 += 4;
    }
  }
  else
  {
    a2[2] = v93;
    a2 += 3;
  }
LABEL_284:
  v105 = *(_DWORD *)(a1 + 40);
  if ((v105 & 8) != 0)
  {
    a2 = sub_19C2BF5D4((unint64_t *)a3, 44, *(_QWORD *)(a1 + 176) & 0xFFFFFFFFFFFFFFFELL, a2);
    if ((v105 & 0x10) == 0)
    {
LABEL_286:
      if ((v105 & 0x20) == 0)
        goto LABEL_287;
      goto LABEL_299;
    }
  }
  else if ((v105 & 0x10) == 0)
  {
    goto LABEL_286;
  }
  a2 = sub_19C2BF5D4((unint64_t *)a3, 45, *(_QWORD *)(a1 + 184) & 0xFFFFFFFFFFFFFFFELL, a2);
  if ((v105 & 0x20) == 0)
  {
LABEL_287:
    if ((v105 & 0x40) == 0)
      goto LABEL_288;
    goto LABEL_300;
  }
LABEL_299:
  a2 = sub_19C2BF5D4((unint64_t *)a3, 46, *(_QWORD *)(a1 + 192) & 0xFFFFFFFFFFFFFFFELL, a2);
  if ((v105 & 0x40) == 0)
  {
LABEL_288:
    if ((v105 & 0x80) == 0)
      goto LABEL_289;
    goto LABEL_301;
  }
LABEL_300:
  a2 = sub_19C2BF5D4((unint64_t *)a3, 47, *(_QWORD *)(a1 + 200) & 0xFFFFFFFFFFFFFFFELL, a2);
  if ((v105 & 0x80) == 0)
  {
LABEL_289:
    if ((v105 & 0x80000) == 0)
      goto LABEL_290;
    goto LABEL_302;
  }
LABEL_301:
  a2 = sub_19C2BF5D4((unint64_t *)a3, 48, *(_QWORD *)(a1 + 208) & 0xFFFFFFFFFFFFFFFELL, a2);
  if ((v105 & 0x80000) == 0)
  {
LABEL_290:
    if ((v105 & 0x2000) == 0)
      goto LABEL_291;
    goto LABEL_305;
  }
LABEL_302:
  if (*a3 <= (unint64_t)a2)
    a2 = sub_19C2CEBA4((uint64_t)a3, a2);
  v110 = *(_BYTE *)(a1 + 250);
  *(_WORD *)a2 = 904;
  a2[2] = v110;
  a2 += 3;
  if ((v105 & 0x2000) == 0)
  {
LABEL_291:
    if ((v105 & 0x200000) == 0)
      goto LABEL_292;
    goto LABEL_308;
  }
LABEL_305:
  if (*a3 <= (unint64_t)a2)
    a2 = sub_19C2CEBA4((uint64_t)a3, a2);
  v111 = *(_BYTE *)(a1 + 244);
  *(_WORD *)a2 = 912;
  a2[2] = v111;
  a2 += 3;
  if ((v105 & 0x200000) == 0)
  {
LABEL_292:
    if ((v105 & 0x400000) == 0)
      goto LABEL_293;
    goto LABEL_311;
  }
LABEL_308:
  if (*a3 <= (unint64_t)a2)
    a2 = sub_19C2CEBA4((uint64_t)a3, a2);
  v112 = *(_DWORD *)(a1 + 256);
  *(_WORD *)a2 = 925;
  *(_DWORD *)(a2 + 2) = v112;
  a2 += 6;
  if ((v105 & 0x400000) == 0)
  {
LABEL_293:
    if ((v105 & 0x100) == 0)
      goto LABEL_295;
    goto LABEL_294;
  }
LABEL_311:
  if (*a3 <= (unint64_t)a2)
    a2 = sub_19C2CEBA4((uint64_t)a3, a2);
  v113 = *(_QWORD *)(a1 + 264);
  *(_WORD *)a2 = 928;
  if (v113 <= 0x7F)
  {
    a2[2] = v113;
    a2 += 3;
    if ((v105 & 0x100) == 0)
      goto LABEL_295;
LABEL_294:
    a2 = sub_19C2BF5D4((unint64_t *)a3, 53, *(_QWORD *)(a1 + 216) & 0xFFFFFFFFFFFFFFFELL, a2);
    goto LABEL_295;
  }
  a2[2] = v113 | 0x80;
  v114 = v113 >> 7;
  if (v113 >> 14)
  {
    a2 += 4;
    do
    {
      *(a2 - 1) = v114 | 0x80;
      v115 = v114 >> 7;
      ++a2;
      v116 = v114 >> 14;
      v114 >>= 7;
    }
    while (v116);
    *(a2 - 1) = v115;
    if ((v105 & 0x100) != 0)
      goto LABEL_294;
  }
  else
  {
    a2[3] = v114;
    a2 += 4;
    if ((v105 & 0x100) != 0)
      goto LABEL_294;
  }
LABEL_295:
  v106 = sub_19C2D5804(a1 + 16, 200, 0x20000000, a2, a3);
  v107 = v106;
  v108 = *(_QWORD *)(a1 + 8);
  if ((v108 & 1) == 0)
    return v107;
  v117 = v108 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v117 + 31) < 0)
  {
    v118 = *(void **)(v117 + 8);
    v119 = *(_QWORD *)(v117 + 16);
  }
  else
  {
    v118 = (void *)(v117 + 8);
    LODWORD(v119) = *(unsigned __int8 *)(v117 + 31);
  }
  if (*a3 - (uint64_t)v106 >= (int)v119)
  {
    v120 = (int)v119;
    memcpy(v106, v118, (int)v119);
    v107 += v120;
    return v107;
  }
  return sub_19C2CECB4(a3, (char *)v118, v119, (unint64_t)v106);
}

uint64_t sub_19C2C4BBC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;

  v2 = sub_19C2D8398(a1 + 16);
  v3 = *(unsigned int *)(a1 + 64);
  v4 = v2 + v3;
  if ((int)v3 >= 1)
  {
    v5 = 0;
    do
    {
      v6 = sub_19C2CA2E4(a1 + 56, v5);
      v7 = *(unsigned __int8 *)(v6 + 23);
      if ((v7 & 0x80u) != 0)
        v7 = *(_QWORD *)(v6 + 8);
      v4 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6);
      ++v5;
    }
    while ((_DWORD)v3 != v5);
  }
  v8 = *(unsigned int *)(a1 + 88);
  v9 = v4 + v8;
  if ((int)v8 >= 1)
  {
    v10 = 0;
    do
    {
      v11 = sub_19C2CA2E4(a1 + 80, v10);
      v12 = *(unsigned __int8 *)(v11 + 23);
      if ((v12 & 0x80u) != 0)
        v12 = *(_QWORD *)(v11 + 8);
      v9 += v12 + ((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6);
      ++v10;
    }
    while ((_DWORD)v8 != v10);
  }
  v13 = *(unsigned int *)(a1 + 112);
  v14 = v9 + 2 * v13;
  if ((int)v13 >= 1)
  {
    v15 = 0;
    do
    {
      v16 = sub_19C2CA2E4(a1 + 104, v15);
      v17 = *(unsigned __int8 *)(v16 + 23);
      if ((v17 & 0x80u) != 0)
        v17 = *(_QWORD *)(v16 + 8);
      v14 += v17 + ((9 * (__clz(v17 | 1) ^ 0x1F) + 73) >> 6);
      ++v15;
    }
    while ((_DWORD)v13 != v15);
  }
  v18 = *(unsigned int *)(a1 + 136);
  v19 = v14 + 2 * v18;
  if ((int)v18 >= 1)
  {
    v20 = 0;
    do
    {
      v21 = sub_19C2CA2E4(a1 + 128, v20);
      v22 = *(unsigned __int8 *)(v21 + 23);
      if ((v22 & 0x80u) != 0)
        v22 = *(_QWORD *)(v21 + 8);
      v19 += v22 + ((9 * (__clz(v22 | 1) ^ 0x1F) + 73) >> 6);
      ++v20;
    }
    while ((_DWORD)v18 != v20);
  }
  v23 = *(_DWORD *)(a1 + 40);
  if (!(_BYTE)v23)
    goto LABEL_33;
  if ((v23 & 1) != 0)
  {
    v58 = *(_QWORD *)(a1 + 152) & 0xFFFFFFFFFFFFFFFELL;
    v59 = *(unsigned __int8 *)(v58 + 23);
    v60 = *(_QWORD *)(v58 + 8);
    if ((v59 & 0x80u) == 0)
      v60 = v59;
    v19 += v60 + ((9 * (__clz(v60 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v23 & 2) == 0)
    {
LABEL_24:
      if ((v23 & 4) == 0)
        goto LABEL_25;
      goto LABEL_131;
    }
  }
  else if ((v23 & 2) == 0)
  {
    goto LABEL_24;
  }
  v61 = *(_QWORD *)(a1 + 160) & 0xFFFFFFFFFFFFFFFELL;
  v62 = *(unsigned __int8 *)(v61 + 23);
  v63 = *(_QWORD *)(v61 + 8);
  if ((v62 & 0x80u) == 0)
    v63 = v62;
  v19 += v63 + ((9 * (__clz(v63 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v23 & 4) == 0)
  {
LABEL_25:
    if ((v23 & 8) == 0)
      goto LABEL_26;
    goto LABEL_134;
  }
LABEL_131:
  v64 = *(_QWORD *)(a1 + 168) & 0xFFFFFFFFFFFFFFFELL;
  v65 = *(unsigned __int8 *)(v64 + 23);
  v66 = *(_QWORD *)(v64 + 8);
  if ((v65 & 0x80u) == 0)
    v66 = v65;
  v19 += v66 + ((9 * (__clz(v66 | 1) ^ 0x1F) + 73) >> 6) + 2;
  if ((v23 & 8) == 0)
  {
LABEL_26:
    if ((v23 & 0x10) == 0)
      goto LABEL_27;
    goto LABEL_137;
  }
LABEL_134:
  v67 = *(_QWORD *)(a1 + 176) & 0xFFFFFFFFFFFFFFFELL;
  v68 = *(unsigned __int8 *)(v67 + 23);
  v69 = *(_QWORD *)(v67 + 8);
  if ((v68 & 0x80u) == 0)
    v69 = v68;
  v19 += v69 + ((9 * (__clz(v69 | 1) ^ 0x1F) + 73) >> 6) + 2;
  if ((v23 & 0x10) == 0)
  {
LABEL_27:
    if ((v23 & 0x20) == 0)
      goto LABEL_28;
LABEL_140:
    v73 = *(_QWORD *)(a1 + 192) & 0xFFFFFFFFFFFFFFFELL;
    v74 = *(unsigned __int8 *)(v73 + 23);
    v75 = *(_QWORD *)(v73 + 8);
    if ((v74 & 0x80u) == 0)
      v75 = v74;
    v19 += v75 + ((9 * (__clz(v75 | 1) ^ 0x1F) + 73) >> 6) + 2;
    if ((v23 & 0x40) == 0)
    {
LABEL_29:
      if ((v23 & 0x80) == 0)
        goto LABEL_33;
      goto LABEL_30;
    }
    goto LABEL_143;
  }
LABEL_137:
  v70 = *(_QWORD *)(a1 + 184) & 0xFFFFFFFFFFFFFFFELL;
  v71 = *(unsigned __int8 *)(v70 + 23);
  v72 = *(_QWORD *)(v70 + 8);
  if ((v71 & 0x80u) == 0)
    v72 = v71;
  v19 += v72 + ((9 * (__clz(v72 | 1) ^ 0x1F) + 73) >> 6) + 2;
  if ((v23 & 0x20) != 0)
    goto LABEL_140;
LABEL_28:
  if ((v23 & 0x40) == 0)
    goto LABEL_29;
LABEL_143:
  v76 = *(_QWORD *)(a1 + 200) & 0xFFFFFFFFFFFFFFFELL;
  v77 = *(unsigned __int8 *)(v76 + 23);
  v78 = *(_QWORD *)(v76 + 8);
  if ((v77 & 0x80u) == 0)
    v78 = v77;
  v19 += v78 + ((9 * (__clz(v78 | 1) ^ 0x1F) + 73) >> 6) + 2;
  if ((v23 & 0x80) != 0)
  {
LABEL_30:
    v24 = *(_QWORD *)(a1 + 208) & 0xFFFFFFFFFFFFFFFELL;
    v25 = *(unsigned __int8 *)(v24 + 23);
    v26 = *(_QWORD *)(v24 + 8);
    if ((v25 & 0x80u) == 0)
      v26 = v25;
    v19 += v26 + ((9 * (__clz(v26 | 1) ^ 0x1F) + 73) >> 6) + 2;
  }
LABEL_33:
  if ((v23 & 0xFF00) == 0)
    goto LABEL_50;
  if ((v23 & 0x100) != 0)
  {
    v79 = *(_QWORD *)(a1 + 216) & 0xFFFFFFFFFFFFFFFELL;
    v80 = *(unsigned __int8 *)(v79 + 23);
    v81 = *(_QWORD *)(v79 + 8);
    if ((v80 & 0x80u) == 0)
      v81 = v80;
    v19 += v81 + ((9 * (__clz(v81 | 1) ^ 0x1F) + 73) >> 6) + 2;
    if ((v23 & 0x200) == 0)
    {
LABEL_36:
      if ((v23 & 0x400) == 0)
        goto LABEL_37;
      goto LABEL_154;
    }
  }
  else if ((v23 & 0x200) == 0)
  {
    goto LABEL_36;
  }
  v82 = *(_DWORD *)(a1 + 224);
  v83 = (9 * (__clz(v82 | 1) ^ 0x1F) + 73) >> 6;
  if (v82 >= 0)
    v84 = v83;
  else
    v84 = 10;
  v19 += v84 + 1;
  if ((v23 & 0x400) == 0)
  {
LABEL_37:
    if ((v23 & 0x800) == 0)
      goto LABEL_38;
LABEL_158:
    v19 += ((9 * (__clz(*(_QWORD *)(a1 + 232) | 1) ^ 0x3F) + 73) >> 6) + 1;
    if ((v23 & 0x1000) != 0)
      goto LABEL_39;
    goto LABEL_43;
  }
LABEL_154:
  v85 = *(_DWORD *)(a1 + 228);
  v86 = (9 * (__clz(v85 | 1) ^ 0x1F) + 73) >> 6;
  if (v85 >= 0)
    v87 = v86;
  else
    v87 = 10;
  v19 += v87 + 1;
  if ((v23 & 0x800) != 0)
    goto LABEL_158;
LABEL_38:
  if ((v23 & 0x1000) != 0)
  {
LABEL_39:
    v27 = *(_DWORD *)(a1 + 240);
    v28 = (9 * (__clz(v27 | 1) ^ 0x1F) + 73) >> 6;
    if (v27 >= 0)
      v29 = v28;
    else
      v29 = 10;
    v19 += v29 + 1;
  }
LABEL_43:
  v30 = v19 + 3;
  if ((v23 & 0x2000) == 0)
    v30 = v19;
  if ((v23 & 0x4000) != 0)
    v30 += 3;
  if ((v23 & 0x8000) != 0)
    v19 = v30 + 3;
  else
    v19 = v30;
LABEL_50:
  if ((v23 & 0xFF0000) != 0)
  {
    v31 = v19 + 3;
    if ((v23 & 0x10000) == 0)
      v31 = v19;
    if ((v23 & 0x20000) != 0)
      v31 += 3;
    if ((v23 & 0x40000) != 0)
      v31 += 3;
    if ((v23 & 0x80000) != 0)
      v31 += 3;
    if ((v23 & 0x100000) != 0)
    {
      v32 = *(_DWORD *)(a1 + 252);
      v33 = (9 * (__clz(v32 | 1) ^ 0x1F) + 73) >> 6;
      if (v32 >= 0)
        v34 = v33;
      else
        v34 = 10;
      v31 += v34 + 2;
    }
    if ((v23 & 0x200000) != 0)
      v19 = v31 + 6;
    else
      v19 = v31;
    if ((v23 & 0x400000) != 0)
      v19 += ((9 * (__clz(*(_QWORD *)(a1 + 264) | 1) ^ 0x3F) + 73) >> 6) + 2;
    if ((v23 & 0x800000) != 0)
    {
      v35 = *(_DWORD *)(a1 + 272);
      v36 = (9 * (__clz(v35 | 1) ^ 0x1F) + 73) >> 6;
      if (v35 >= 0)
        v37 = v36;
      else
        v37 = 10;
      v19 += v37 + 1;
    }
  }
  if (!HIBYTE(v23))
    goto LABEL_94;
  if ((v23 & 0x1000000) != 0)
  {
    v38 = *(_DWORD *)(a1 + 276);
    v39 = (9 * (__clz(v38 | 1) ^ 0x1F) + 73) >> 6;
    if (v38 >= 0)
      v40 = v39;
    else
      v40 = 10;
    v19 += v40 + 1;
  }
  v41 = v19 + 5;
  if ((v23 & 0x2000000) == 0)
    v41 = v19;
  if ((v23 & 0x4000000) != 0)
  {
    v42 = *(_DWORD *)(a1 + 284);
    v43 = (9 * (__clz(v42 | 1) ^ 0x1F) + 73) >> 6;
    if (v42 >= 0)
      v44 = v43;
    else
      v44 = 10;
    v41 += v44 + 1;
  }
  if ((v23 & 0x8000000) != 0)
    v19 = v41 + 5;
  else
    v19 = v41;
  if ((v23 & 0x10000000) == 0)
  {
    if ((v23 & 0x20000000) == 0)
      goto LABEL_92;
LABEL_164:
    v91 = *(_DWORD *)(a1 + 296);
    v92 = ((9 * (__clz(v91 | 1) ^ 0x1F) + 73) >> 6) + 2;
    if (v91 >= 0)
      v93 = v92;
    else
      v93 = 12;
    v19 += v93;
    if ((v23 & 0x40000000) == 0)
    {
LABEL_93:
      if ((v23 & 0x80000000) == 0)
        goto LABEL_94;
      goto LABEL_172;
    }
    goto LABEL_168;
  }
  v88 = *(_DWORD *)(a1 + 292);
  v89 = (9 * (__clz(v88 | 1) ^ 0x1F) + 73) >> 6;
  if (v88 >= 0)
    v90 = v89;
  else
    v90 = 10;
  v19 += v90 + 2;
  if ((v23 & 0x20000000) != 0)
    goto LABEL_164;
LABEL_92:
  if ((v23 & 0x40000000) == 0)
    goto LABEL_93;
LABEL_168:
  v94 = *(_DWORD *)(a1 + 300);
  v95 = ((9 * (__clz(v94 | 1) ^ 0x1F) + 73) >> 6) + 2;
  if (v94 >= 0)
    v96 = v95;
  else
    v96 = 12;
  v19 += v96;
  if ((v23 & 0x80000000) != 0)
  {
LABEL_172:
    v97 = *(_DWORD *)(a1 + 304);
    v98 = ((9 * (__clz(v97 | 1) ^ 0x1F) + 73) >> 6) + 2;
    if (v97 >= 0)
      v99 = v98;
    else
      v99 = 12;
    v19 += v99;
  }
LABEL_94:
  v45 = *(_DWORD *)(a1 + 44);
  if ((_BYTE)v45)
  {
    v46 = v19 + 3;
    if ((v45 & 1) == 0)
      v46 = v19;
    if ((v45 & 2) != 0)
      v46 += 3;
    if ((v45 & 4) != 0)
      v46 += 3;
    if ((v45 & 8) != 0)
      v46 += 3;
    if ((v45 & 0x10) != 0)
      v46 += 3;
    if ((v45 & 0x20) != 0)
      v19 = v46 + 3;
    else
      v19 = v46;
    if ((v45 & 0x40) != 0)
    {
      v47 = *(_DWORD *)(a1 + 316);
      v48 = ((9 * (__clz(v47 | 1) ^ 0x1F) + 73) >> 6) + 2;
      if (v47 >= 0)
        v49 = v48;
      else
        v49 = 12;
      v19 += v49;
    }
    if ((v45 & 0x80) != 0)
    {
      v50 = *(_DWORD *)(a1 + 320);
      v51 = ((9 * (__clz(v50 | 1) ^ 0x1F) + 73) >> 6) + 2;
      if (v50 >= 0)
        v52 = v51;
      else
        v52 = 12;
      v19 += v52;
    }
  }
  if ((v45 & 0x100) != 0)
  {
    v53 = *(_DWORD *)(a1 + 324);
    v54 = ((9 * (__clz(v53 | 1) ^ 0x1F) + 73) >> 6) + 2;
    if (v53 >= 0)
      v55 = v54;
    else
      v55 = 12;
    v19 += v55;
  }
  v56 = *(_QWORD *)(a1 + 8);
  if ((v56 & 1) != 0)
  {
    v100 = v56 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v100 + 31) < 0)
      v101 = *(_QWORD *)(v100 + 16);
    else
      v101 = *(unsigned __int8 *)(v100 + 31);
    v19 += v101;
  }
  *(_DWORD *)(a1 + 48) = v19;
  return v19;
}

unint64_t sub_19C2C5468(uint64_t a1, uint64_t (***a2)(), uint64_t a3)
{
  if (*a2 != &off_1E3D33CC8)
    sub_19C2C1B24(a1, (uint64_t)a2, a3);
  return sub_19C2C5490(a1, (uint64_t)a2);
}

unint64_t sub_19C2C5490(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  std::string *v9;
  int v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  unint64_t result;
  unsigned int v14;
  __int128 *v15;
  uint64_t v16;
  _QWORD *v17;
  __int128 *v18;
  uint64_t v19;
  _QWORD *v20;
  __int128 *v21;
  uint64_t v22;
  _QWORD *v23;
  __int128 *v24;
  uint64_t v25;
  _QWORD *v26;
  __int128 *v27;
  uint64_t v28;
  _QWORD *v29;
  __int128 *v30;
  uint64_t v31;
  _QWORD *v32;
  __int128 *v33;
  uint64_t v34;
  _QWORD *v35;
  __int128 *v36;
  uint64_t v37;
  _QWORD *v38;
  int v39;
  int v40;
  __int128 *v41;
  uint64_t v42;
  _QWORD *v43;
  char v44;
  std::string v45[2];

  if (a2 == a1)
  {
    sub_19C2CF5C8((uint64_t)v45, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 1671);
    v4 = sub_19C2CF5E0(v45, "CHECK failed: (&from) != (this): ");
    sub_19C2CF710((uint64_t)&v44, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_19C2CF718((uint64_t)v45);
  }
  sub_19C2D36CC(a1 + 16, a2 + 16);
  v5 = *(_QWORD *)(a2 + 8);
  if ((v5 & 1) != 0)
  {
    v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
    v7 = (v5 & 0xFFFFFFFFFFFFFFFELL) + 8;
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & 1) != 0)
      v9 = (std::string *)((v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
    else
      v9 = (std::string *)sub_19C2C138C((unint64_t *)(a1 + 8));
    v10 = *(char *)(v6 + 31);
    if (v10 >= 0)
      v11 = (const std::string::value_type *)v7;
    else
      v11 = *(const std::string::value_type **)(v6 + 8);
    if (v10 >= 0)
      v12 = *(unsigned __int8 *)(v6 + 31);
    else
      v12 = *(_QWORD *)(v6 + 16);
    std::string::append(v9, v11, v12);
  }
  sub_19C2CA518(a1 + 56, a2 + 56);
  sub_19C2CA518(a1 + 80, a2 + 80);
  sub_19C2CA518(a1 + 104, a2 + 104);
  result = sub_19C2CA518(a1 + 128, a2 + 128);
  v14 = *(_DWORD *)(a2 + 40);
  if (!(_BYTE)v14)
    goto LABEL_47;
  if ((v14 & 1) != 0)
  {
    v15 = (__int128 *)(*(_QWORD *)(a2 + 152) & 0xFFFFFFFFFFFFFFFELL);
    *(_DWORD *)(a1 + 40) |= 1u;
    v16 = *(_QWORD *)(a1 + 8);
    v17 = (_QWORD *)(v16 & 0xFFFFFFFFFFFFFFFELL);
    if ((v16 & 1) != 0)
      v17 = (_QWORD *)*v17;
    result = sub_19C2CE4EC((uint64_t *)(a1 + 152), v15, (uint64_t)v17);
    if ((v14 & 2) == 0)
    {
LABEL_16:
      if ((v14 & 4) == 0)
        goto LABEL_17;
      goto LABEL_29;
    }
  }
  else if ((v14 & 2) == 0)
  {
    goto LABEL_16;
  }
  v18 = (__int128 *)(*(_QWORD *)(a2 + 160) & 0xFFFFFFFFFFFFFFFELL);
  *(_DWORD *)(a1 + 40) |= 2u;
  v19 = *(_QWORD *)(a1 + 8);
  v20 = (_QWORD *)(v19 & 0xFFFFFFFFFFFFFFFELL);
  if ((v19 & 1) != 0)
    v20 = (_QWORD *)*v20;
  result = sub_19C2CE4EC((uint64_t *)(a1 + 160), v18, (uint64_t)v20);
  if ((v14 & 4) == 0)
  {
LABEL_17:
    if ((v14 & 8) == 0)
      goto LABEL_18;
    goto LABEL_32;
  }
LABEL_29:
  v21 = (__int128 *)(*(_QWORD *)(a2 + 168) & 0xFFFFFFFFFFFFFFFELL);
  *(_DWORD *)(a1 + 40) |= 4u;
  v22 = *(_QWORD *)(a1 + 8);
  v23 = (_QWORD *)(v22 & 0xFFFFFFFFFFFFFFFELL);
  if ((v22 & 1) != 0)
    v23 = (_QWORD *)*v23;
  result = sub_19C2CE4EC((uint64_t *)(a1 + 168), v21, (uint64_t)v23);
  if ((v14 & 8) == 0)
  {
LABEL_18:
    if ((v14 & 0x10) == 0)
      goto LABEL_19;
    goto LABEL_35;
  }
LABEL_32:
  v24 = (__int128 *)(*(_QWORD *)(a2 + 176) & 0xFFFFFFFFFFFFFFFELL);
  *(_DWORD *)(a1 + 40) |= 8u;
  v25 = *(_QWORD *)(a1 + 8);
  v26 = (_QWORD *)(v25 & 0xFFFFFFFFFFFFFFFELL);
  if ((v25 & 1) != 0)
    v26 = (_QWORD *)*v26;
  result = sub_19C2CE514((uint64_t *)(a1 + 176), v24, (uint64_t)v26);
  if ((v14 & 0x10) == 0)
  {
LABEL_19:
    if ((v14 & 0x20) == 0)
      goto LABEL_20;
LABEL_38:
    v30 = (__int128 *)(*(_QWORD *)(a2 + 192) & 0xFFFFFFFFFFFFFFFELL);
    *(_DWORD *)(a1 + 40) |= 0x20u;
    v31 = *(_QWORD *)(a1 + 8);
    v32 = (_QWORD *)(v31 & 0xFFFFFFFFFFFFFFFELL);
    if ((v31 & 1) != 0)
      v32 = (_QWORD *)*v32;
    result = sub_19C2CE514((uint64_t *)(a1 + 192), v30, (uint64_t)v32);
    if ((v14 & 0x40) == 0)
    {
LABEL_21:
      if ((v14 & 0x80) == 0)
        goto LABEL_47;
      goto LABEL_44;
    }
    goto LABEL_41;
  }
LABEL_35:
  v27 = (__int128 *)(*(_QWORD *)(a2 + 184) & 0xFFFFFFFFFFFFFFFELL);
  *(_DWORD *)(a1 + 40) |= 0x10u;
  v28 = *(_QWORD *)(a1 + 8);
  v29 = (_QWORD *)(v28 & 0xFFFFFFFFFFFFFFFELL);
  if ((v28 & 1) != 0)
    v29 = (_QWORD *)*v29;
  result = sub_19C2CE514((uint64_t *)(a1 + 184), v27, (uint64_t)v29);
  if ((v14 & 0x20) != 0)
    goto LABEL_38;
LABEL_20:
  if ((v14 & 0x40) == 0)
    goto LABEL_21;
LABEL_41:
  v33 = (__int128 *)(*(_QWORD *)(a2 + 200) & 0xFFFFFFFFFFFFFFFELL);
  *(_DWORD *)(a1 + 40) |= 0x40u;
  v34 = *(_QWORD *)(a1 + 8);
  v35 = (_QWORD *)(v34 & 0xFFFFFFFFFFFFFFFELL);
  if ((v34 & 1) != 0)
    v35 = (_QWORD *)*v35;
  result = sub_19C2CE514((uint64_t *)(a1 + 200), v33, (uint64_t)v35);
  if ((v14 & 0x80) != 0)
  {
LABEL_44:
    v36 = (__int128 *)(*(_QWORD *)(a2 + 208) & 0xFFFFFFFFFFFFFFFELL);
    *(_DWORD *)(a1 + 40) |= 0x80u;
    v37 = *(_QWORD *)(a1 + 8);
    v38 = (_QWORD *)(v37 & 0xFFFFFFFFFFFFFFFELL);
    if ((v37 & 1) != 0)
      v38 = (_QWORD *)*v38;
    result = sub_19C2CE514((uint64_t *)(a1 + 208), v36, (uint64_t)v38);
  }
LABEL_47:
  if ((v14 & 0xFF00) == 0)
    goto LABEL_58;
  if ((v14 & 0x100) != 0)
  {
    v41 = (__int128 *)(*(_QWORD *)(a2 + 216) & 0xFFFFFFFFFFFFFFFELL);
    *(_DWORD *)(a1 + 40) |= 0x100u;
    v42 = *(_QWORD *)(a1 + 8);
    v43 = (_QWORD *)(v42 & 0xFFFFFFFFFFFFFFFELL);
    if ((v42 & 1) != 0)
      v43 = (_QWORD *)*v43;
    result = sub_19C2CE4EC((uint64_t *)(a1 + 216), v41, (uint64_t)v43);
    if ((v14 & 0x200) == 0)
    {
LABEL_50:
      if ((v14 & 0x400) == 0)
        goto LABEL_51;
      goto LABEL_97;
    }
  }
  else if ((v14 & 0x200) == 0)
  {
    goto LABEL_50;
  }
  *(_DWORD *)(a1 + 224) = *(_DWORD *)(a2 + 224);
  if ((v14 & 0x400) == 0)
  {
LABEL_51:
    if ((v14 & 0x800) == 0)
      goto LABEL_52;
    goto LABEL_98;
  }
LABEL_97:
  *(_DWORD *)(a1 + 228) = *(_DWORD *)(a2 + 228);
  if ((v14 & 0x800) == 0)
  {
LABEL_52:
    if ((v14 & 0x1000) == 0)
      goto LABEL_53;
    goto LABEL_99;
  }
LABEL_98:
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  if ((v14 & 0x1000) == 0)
  {
LABEL_53:
    if ((v14 & 0x2000) == 0)
      goto LABEL_54;
    goto LABEL_100;
  }
LABEL_99:
  *(_DWORD *)(a1 + 240) = *(_DWORD *)(a2 + 240);
  if ((v14 & 0x2000) == 0)
  {
LABEL_54:
    if ((v14 & 0x4000) == 0)
      goto LABEL_55;
LABEL_101:
    *(_BYTE *)(a1 + 245) = *(_BYTE *)(a2 + 245);
    if ((v14 & 0x8000) == 0)
      goto LABEL_57;
    goto LABEL_56;
  }
LABEL_100:
  *(_BYTE *)(a1 + 244) = *(_BYTE *)(a2 + 244);
  if ((v14 & 0x4000) != 0)
    goto LABEL_101;
LABEL_55:
  if ((v14 & 0x8000) != 0)
LABEL_56:
    *(_BYTE *)(a1 + 246) = *(_BYTE *)(a2 + 246);
LABEL_57:
  *(_DWORD *)(a1 + 40) |= v14;
LABEL_58:
  if ((v14 & 0xFF0000) == 0)
    goto LABEL_69;
  if ((v14 & 0x10000) != 0)
  {
    *(_BYTE *)(a1 + 247) = *(_BYTE *)(a2 + 247);
    if ((v14 & 0x20000) == 0)
    {
LABEL_61:
      if ((v14 & 0x40000) == 0)
        goto LABEL_62;
      goto LABEL_105;
    }
  }
  else if ((v14 & 0x20000) == 0)
  {
    goto LABEL_61;
  }
  *(_BYTE *)(a1 + 248) = *(_BYTE *)(a2 + 248);
  if ((v14 & 0x40000) == 0)
  {
LABEL_62:
    if ((v14 & 0x80000) == 0)
      goto LABEL_63;
    goto LABEL_106;
  }
LABEL_105:
  *(_BYTE *)(a1 + 249) = *(_BYTE *)(a2 + 249);
  if ((v14 & 0x80000) == 0)
  {
LABEL_63:
    if ((v14 & 0x100000) == 0)
      goto LABEL_64;
    goto LABEL_107;
  }
LABEL_106:
  *(_BYTE *)(a1 + 250) = *(_BYTE *)(a2 + 250);
  if ((v14 & 0x100000) == 0)
  {
LABEL_64:
    if ((v14 & 0x200000) == 0)
      goto LABEL_65;
    goto LABEL_108;
  }
LABEL_107:
  *(_DWORD *)(a1 + 252) = *(_DWORD *)(a2 + 252);
  if ((v14 & 0x200000) == 0)
  {
LABEL_65:
    if ((v14 & 0x400000) == 0)
      goto LABEL_66;
LABEL_109:
    *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
    if ((v14 & 0x800000) == 0)
      goto LABEL_68;
    goto LABEL_67;
  }
LABEL_108:
  *(_DWORD *)(a1 + 256) = *(_DWORD *)(a2 + 256);
  if ((v14 & 0x400000) != 0)
    goto LABEL_109;
LABEL_66:
  if ((v14 & 0x800000) != 0)
LABEL_67:
    *(_DWORD *)(a1 + 272) = *(_DWORD *)(a2 + 272);
LABEL_68:
  *(_DWORD *)(a1 + 40) |= v14;
LABEL_69:
  if (!HIBYTE(v14))
    goto LABEL_79;
  if ((v14 & 0x1000000) != 0)
  {
    *(_DWORD *)(a1 + 276) = *(_DWORD *)(a2 + 276);
    if ((v14 & 0x2000000) == 0)
    {
LABEL_72:
      if ((v14 & 0x4000000) == 0)
        goto LABEL_73;
      goto LABEL_121;
    }
  }
  else if ((v14 & 0x2000000) == 0)
  {
    goto LABEL_72;
  }
  *(_DWORD *)(a1 + 280) = *(_DWORD *)(a2 + 280);
  if ((v14 & 0x4000000) == 0)
  {
LABEL_73:
    if ((v14 & 0x8000000) == 0)
      goto LABEL_74;
    goto LABEL_122;
  }
LABEL_121:
  *(_DWORD *)(a1 + 284) = *(_DWORD *)(a2 + 284);
  if ((v14 & 0x8000000) == 0)
  {
LABEL_74:
    if ((v14 & 0x10000000) == 0)
      goto LABEL_75;
    goto LABEL_123;
  }
LABEL_122:
  *(_DWORD *)(a1 + 288) = *(_DWORD *)(a2 + 288);
  if ((v14 & 0x10000000) == 0)
  {
LABEL_75:
    if ((v14 & 0x20000000) == 0)
      goto LABEL_76;
    goto LABEL_124;
  }
LABEL_123:
  *(_DWORD *)(a1 + 292) = *(_DWORD *)(a2 + 292);
  if ((v14 & 0x20000000) == 0)
  {
LABEL_76:
    if ((v14 & 0x40000000) == 0)
      goto LABEL_77;
LABEL_125:
    *(_DWORD *)(a1 + 300) = *(_DWORD *)(a2 + 300);
    if ((v14 & 0x80000000) == 0)
      goto LABEL_78;
LABEL_126:
    *(_DWORD *)(a1 + 304) = *(_DWORD *)(a2 + 304);
    goto LABEL_78;
  }
LABEL_124:
  *(_DWORD *)(a1 + 296) = *(_DWORD *)(a2 + 296);
  if ((v14 & 0x40000000) != 0)
    goto LABEL_125;
LABEL_77:
  if ((v14 & 0x80000000) != 0)
    goto LABEL_126;
LABEL_78:
  *(_DWORD *)(a1 + 40) |= v14;
LABEL_79:
  v39 = *(_DWORD *)(a2 + 44);
  if (!(_BYTE)v39)
    goto LABEL_90;
  if ((v39 & 1) != 0)
  {
    *(_BYTE *)(a1 + 308) = *(_BYTE *)(a2 + 308);
    if ((v39 & 2) == 0)
    {
LABEL_82:
      if ((v39 & 4) == 0)
        goto LABEL_83;
      goto LABEL_113;
    }
  }
  else if ((v39 & 2) == 0)
  {
    goto LABEL_82;
  }
  *(_BYTE *)(a1 + 309) = *(_BYTE *)(a2 + 309);
  if ((v39 & 4) == 0)
  {
LABEL_83:
    if ((v39 & 8) == 0)
      goto LABEL_84;
    goto LABEL_114;
  }
LABEL_113:
  *(_BYTE *)(a1 + 310) = *(_BYTE *)(a2 + 310);
  if ((v39 & 8) == 0)
  {
LABEL_84:
    if ((v39 & 0x10) == 0)
      goto LABEL_85;
    goto LABEL_115;
  }
LABEL_114:
  *(_BYTE *)(a1 + 311) = *(_BYTE *)(a2 + 311);
  if ((v39 & 0x10) == 0)
  {
LABEL_85:
    if ((v39 & 0x20) == 0)
      goto LABEL_86;
    goto LABEL_116;
  }
LABEL_115:
  *(_BYTE *)(a1 + 312) = *(_BYTE *)(a2 + 312);
  if ((v39 & 0x20) == 0)
  {
LABEL_86:
    if ((v39 & 0x40) == 0)
      goto LABEL_87;
LABEL_117:
    *(_DWORD *)(a1 + 316) = *(_DWORD *)(a2 + 316);
    if ((v39 & 0x80) == 0)
      goto LABEL_89;
    goto LABEL_88;
  }
LABEL_116:
  *(_BYTE *)(a1 + 313) = *(_BYTE *)(a2 + 313);
  if ((v39 & 0x40) != 0)
    goto LABEL_117;
LABEL_87:
  if ((v39 & 0x80) != 0)
LABEL_88:
    *(_DWORD *)(a1 + 320) = *(_DWORD *)(a2 + 320);
LABEL_89:
  *(_DWORD *)(a1 + 44) |= v39;
LABEL_90:
  if ((v39 & 0x100) != 0)
  {
    v40 = *(_DWORD *)(a2 + 324);
    *(_DWORD *)(a1 + 44) |= 0x100u;
    *(_DWORD *)(a1 + 324) = v40;
  }
  return result;
}

void sub_19C2C59E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19C2C5A00(uint64_t a1)
{
  return sub_19C2D489C(a1 + 16);
}

_QWORD *sub_19C2C5A08@<X0>(_QWORD *a1@<X8>)
{
  return sub_19C2A6D48(a1, "sentencepiece.TrainerSpec");
}

uint64_t sub_19C2C5A18(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &off_1E3D33EB8;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = &unk_1E3D33F58;
  sub_19C2CFB64(a1 + 24, a2);
  *(_QWORD *)(a1 + 48) = 0;
  if (atomic_load(dword_1EE41ABA8))
    sub_19C2DA308(dword_1EE41ABA8);
  *(_QWORD *)(a1 + 56) = &qword_1EE41C5D8;
  *(_QWORD *)(a1 + 64) = &qword_1EE41C5D8;
  *(_QWORD *)(a1 + 72) = &qword_1EE41C5D8;
  *(_DWORD *)(a1 + 80) = 16843008;
  return a1;
}

void sub_19C2C5A98(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_19C2CFC40(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19C2C5AAC(uint64_t a1)
{
  sub_19C2C5AE4(a1);
  sub_19C2BEEB4((uint64_t *)(a1 + 8));
  sub_19C2CFC40(a1 + 24);
  return a1;
}

uint64_t *sub_19C2C5AE4(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  std::string *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *result;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  std::string v15[2];

  v2 = *(_QWORD *)(a1 + 8);
  v3 = (_QWORD *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  if ((v2 & 1) == 0)
  {
    if (!v3)
      goto LABEL_4;
    goto LABEL_3;
  }
  if (*v3)
  {
LABEL_3:
    sub_19C2CF5C8((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 1972);
    v4 = sub_19C2CF5E0(v15, "CHECK failed: GetArena() == nullptr: ");
    sub_19C2CF710((uint64_t)&v14, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_19C2CF718((uint64_t)v15);
  }
LABEL_4:
  if (*(uint64_t **)(a1 + 56) != &qword_1EE41C5D8)
  {
    v5 = sub_19C2C1180((uint64_t *)(a1 + 56));
    v6 = v5;
    if (*(char *)(v5 + 23) < 0)
      operator delete(*(void **)v5);
    MEMORY[0x1A1AD355C](v6, 0x1012C40EC159624);
  }
  result = (uint64_t *)(a1 + 64);
  if (*(uint64_t **)(a1 + 64) != &qword_1EE41C5D8)
  {
    v8 = sub_19C2C1180(result);
    v9 = v8;
    if (*(char *)(v8 + 23) < 0)
      operator delete(*(void **)v8);
    result = (uint64_t *)MEMORY[0x1A1AD355C](v9, 0x1012C40EC159624);
  }
  v11 = *(uint64_t **)(a1 + 72);
  v10 = (uint64_t *)(a1 + 72);
  if (v11 != &qword_1EE41C5D8)
  {
    v12 = sub_19C2C1180(v10);
    v13 = v12;
    if (*(char *)(v12 + 23) < 0)
      operator delete(*(void **)v12);
    return (uint64_t *)MEMORY[0x1A1AD355C](v13, 0x1012C40EC159624);
  }
  return result;
}

void sub_19C2C5C30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19C2C5C4C(uint64_t a1)
{
  return sub_19C2C5AAC(a1 - 16);
}

void sub_19C2C5C54(uint64_t a1)
{
  sub_19C2C5AAC(a1);
  JUMPOUT(0x1A1AD355CLL);
}

void sub_19C2C5C78(uint64_t a1)
{
  sub_19C2C5AAC(a1 - 16);
  JUMPOUT(0x1A1AD355CLL);
}

unsigned __int8 *sub_19C2C5CA0(uint64_t a1)
{
  unsigned __int8 *result;
  int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;

  result = sub_19C2D3630((unsigned __int8 *)(a1 + 24));
  v3 = *(_DWORD *)(a1 + 48);
  if ((v3 & 7) != 0)
  {
    if ((v3 & 1) == 0)
    {
      if ((v3 & 2) == 0)
        goto LABEL_4;
LABEL_10:
      v5 = *(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFFFFELL;
      if (*(char *)(v5 + 23) < 0)
      {
        **(_BYTE **)v5 = 0;
        *(_QWORD *)(v5 + 8) = 0;
        if ((v3 & 4) == 0)
          goto LABEL_17;
      }
      else
      {
        *(_BYTE *)v5 = 0;
        *(_BYTE *)(v5 + 23) = 0;
        if ((v3 & 4) == 0)
          goto LABEL_17;
      }
      goto LABEL_14;
    }
    v4 = *(_QWORD *)(a1 + 56) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v4 + 23) < 0)
    {
      **(_BYTE **)v4 = 0;
      *(_QWORD *)(v4 + 8) = 0;
      if ((v3 & 2) != 0)
        goto LABEL_10;
    }
    else
    {
      *(_BYTE *)v4 = 0;
      *(_BYTE *)(v4 + 23) = 0;
      if ((v3 & 2) != 0)
        goto LABEL_10;
    }
LABEL_4:
    if ((v3 & 4) == 0)
      goto LABEL_17;
LABEL_14:
    v6 = *(_QWORD *)(a1 + 72) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v6 + 23) < 0)
    {
      **(_BYTE **)v6 = 0;
      *(_QWORD *)(v6 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v6 = 0;
      *(_BYTE *)(v6 + 23) = 0;
    }
  }
LABEL_17:
  if ((v3 & 0x78) != 0)
    *(_DWORD *)(a1 + 80) = 16843008;
  *(_DWORD *)(a1 + 48) = 0;
  v7 = *(_QWORD *)(a1 + 8);
  if ((v7 & 1) != 0)
  {
    v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v8 + 31) < 0)
    {
      **(_BYTE **)(v8 + 8) = 0;
      *(_QWORD *)(v8 + 16) = 0;
    }
    else
    {
      *(_BYTE *)(v8 + 8) = 0;
      *(_BYTE *)(v8 + 31) = 0;
    }
  }
  return result;
}

uint64_t sub_19C2C5DAC(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  int v5;
  _QWORD *v7;
  char *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  char *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  int v22;
  char *v23;
  uint64_t v24;
  int v25;
  char *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  std::string *v30;
  void *v31;
  BOOL v32;
  std::string *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42[2];

  *(_QWORD *)v42 = a2;
  v5 = 0;
  if ((sub_19C2C1250((uint64_t)a3, (char **)v42, a3[11].i32[1]) & 1) == 0)
  {
    v7 = (_QWORD *)(a1 + 8);
    while (1)
    {
      v8 = (char *)(*(_QWORD *)v42 + 1);
      v9 = **(_BYTE **)v42;
      if ((char)**(_BYTE **)v42 < 0)
      {
        v10 = v9 + (*v8 << 7);
        v9 = v10 - 128;
        if (*v8 < 0)
        {
          v17 = sub_19C2DBBE0(*(uint64_t *)v42, v10 - 128);
          *(_QWORD *)v42 = v17;
          if (!v17)
            goto LABEL_67;
          v8 = (char *)v17;
          v9 = v18;
          goto LABEL_8;
        }
        v8 = (char *)(*(_QWORD *)v42 + 2);
      }
      *(_QWORD *)v42 = v8;
LABEL_8:
      switch(v9 >> 3)
      {
        case 1u:
          if (v9 != 10)
            goto LABEL_48;
          *(_DWORD *)(a1 + 48) |= 1u;
          v11 = *(_QWORD *)(a1 + 8);
          v12 = (_QWORD *)(v11 & 0xFFFFFFFFFFFFFFFELL);
          if ((v11 & 1) != 0)
            v12 = (_QWORD *)*v12;
          v13 = (uint64_t *)(a1 + 56);
          goto LABEL_44;
        case 2u:
          if (v9 != 18)
            goto LABEL_48;
          *(_DWORD *)(a1 + 48) |= 2u;
          v19 = *(_QWORD *)(a1 + 8);
          v12 = (_QWORD *)(v19 & 0xFFFFFFFFFFFFFFFELL);
          if ((v19 & 1) != 0)
            v12 = (_QWORD *)*v12;
          v13 = (uint64_t *)(a1 + 64);
          goto LABEL_44;
        case 3u:
          if (v9 != 24)
            goto LABEL_48;
          v5 |= 0x10u;
          v20 = v8 + 1;
          v21 = *v8;
          if ((*v8 & 0x80000000) == 0)
            goto LABEL_29;
          v22 = *v20;
          v21 = v21 + (v22 << 7) - 128;
          if (v22 < 0)
          {
            v36 = sub_19C2DBB98((uint64_t)v8, v21);
            *(_QWORD *)v42 = v36;
            *(_BYTE *)(a1 + 81) = v37 != 0;
            if (!v36)
              goto LABEL_67;
          }
          else
          {
            v20 = v8 + 2;
LABEL_29:
            *(_QWORD *)v42 = v20;
            *(_BYTE *)(a1 + 81) = v21 != 0;
          }
          goto LABEL_46;
        case 4u:
          if (v9 != 32)
            goto LABEL_48;
          v5 |= 0x20u;
          v23 = v8 + 1;
          v24 = *v8;
          if ((*v8 & 0x80000000) == 0)
            goto LABEL_34;
          v25 = *v23;
          v24 = v24 + (v25 << 7) - 128;
          if (v25 < 0)
          {
            v38 = sub_19C2DBB98((uint64_t)v8, v24);
            *(_QWORD *)v42 = v38;
            *(_BYTE *)(a1 + 82) = v39 != 0;
            if (!v38)
              goto LABEL_67;
          }
          else
          {
            v23 = v8 + 2;
LABEL_34:
            *(_QWORD *)v42 = v23;
            *(_BYTE *)(a1 + 82) = v24 != 0;
          }
          goto LABEL_46;
        case 5u:
          if (v9 != 40)
            goto LABEL_48;
          v5 |= 0x40u;
          v26 = v8 + 1;
          v27 = *v8;
          if ((*v8 & 0x80000000) == 0)
            goto LABEL_39;
          v28 = *v26;
          v27 = v27 + (v28 << 7) - 128;
          if (v28 < 0)
          {
            v40 = sub_19C2DBB98((uint64_t)v8, v27);
            *(_QWORD *)v42 = v40;
            *(_BYTE *)(a1 + 83) = v41 != 0;
            if (!v40)
              goto LABEL_67;
          }
          else
          {
            v26 = v8 + 2;
LABEL_39:
            *(_QWORD *)v42 = v26;
            *(_BYTE *)(a1 + 83) = v27 != 0;
          }
          goto LABEL_46;
        case 6u:
          if (v9 != 50)
            goto LABEL_48;
          *(_DWORD *)(a1 + 48) |= 4u;
          v29 = *(_QWORD *)(a1 + 8);
          v12 = (_QWORD *)(v29 & 0xFFFFFFFFFFFFFFFELL);
          if ((v29 & 1) != 0)
            v12 = (_QWORD *)*v12;
          v13 = (uint64_t *)(a1 + 72);
LABEL_44:
          v30 = (std::string *)sub_19C2CE524(v13, (uint64_t)v12);
          v31 = (void *)sub_19C2DBC94(v30, *(char **)v42, (uint64_t)a3);
          goto LABEL_45;
        default:
          if (v9 >> 3 == 200 && v9 == 64)
          {
            v5 |= 8u;
            v14 = v8 + 1;
            v15 = *v8;
            if ((*v8 & 0x80000000) == 0)
              goto LABEL_18;
            v16 = *v14;
            v15 = v15 + (v16 << 7) - 128;
            if ((v16 & 0x80000000) == 0)
            {
              v14 = v8 + 2;
LABEL_18:
              *(_QWORD *)v42 = v14;
              *(_BYTE *)(a1 + 80) = v15 != 0;
              goto LABEL_46;
            }
            v34 = sub_19C2DBB98((uint64_t)v8, v15);
            *(_QWORD *)v42 = v34;
            *(_BYTE *)(a1 + 80) = v35 != 0;
            if (!v34)
              goto LABEL_67;
          }
          else
          {
LABEL_48:
            if (v9)
              v32 = (v9 & 7) == 4;
            else
              v32 = 1;
            if (v32)
            {
              a3[10].i32[0] = v9 - 1;
              goto LABEL_2;
            }
            if (v9 < 0x648)
            {
              if ((*v7 & 1) != 0)
              {
                v33 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFELL) + 8);
              }
              else
              {
                v33 = (std::string *)sub_19C2C138C((unint64_t *)(a1 + 8));
                v8 = *(char **)v42;
              }
              v31 = sub_19C2DC0C0(v9, v33, v8, a3);
            }
            else
            {
              v31 = sub_19C2D4BD0((uint64_t *)(a1 + 24), v9, (unsigned __int8 *)v8, (uint64_t)&unk_1EE41C7A8, (unint64_t *)(a1 + 8), a3);
            }
LABEL_45:
            *(_QWORD *)v42 = v31;
            if (!v31)
            {
LABEL_67:
              *(_QWORD *)v42 = 0;
              goto LABEL_2;
            }
          }
LABEL_46:
          if ((sub_19C2C1250((uint64_t)a3, (char **)v42, a3[11].i32[1]) & 1) != 0)
            goto LABEL_2;
          break;
      }
    }
  }
LABEL_2:
  *(_DWORD *)(a1 + 48) |= v5;
  return *(_QWORD *)v42;
}

char *sub_19C2C61A8(uint64_t a1, char *a2, unint64_t *a3)
{
  char *v4;
  int v6;
  char v7;
  char v8;
  char v9;
  char v10;
  char *v11;
  char *v12;
  uint64_t v13;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;

  v4 = a2;
  v6 = *(_DWORD *)(a1 + 48);
  if ((v6 & 1) != 0)
  {
    v4 = sub_19C2BF5D4(a3, 1, *(_QWORD *)(a1 + 56) & 0xFFFFFFFFFFFFFFFELL, a2);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  v4 = sub_19C2BF5D4(a3, 2, *(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFFFFELL, v4);
  if ((v6 & 0x10) == 0)
  {
LABEL_4:
    if ((v6 & 0x20) == 0)
      goto LABEL_5;
    goto LABEL_14;
  }
LABEL_11:
  if (*a3 <= (unint64_t)v4)
    v4 = sub_19C2CEBA4((uint64_t)a3, v4);
  v7 = *(_BYTE *)(a1 + 81);
  *v4 = 24;
  v4[1] = v7;
  v4 += 2;
  if ((v6 & 0x20) == 0)
  {
LABEL_5:
    if ((v6 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_17;
  }
LABEL_14:
  if (*a3 <= (unint64_t)v4)
    v4 = sub_19C2CEBA4((uint64_t)a3, v4);
  v8 = *(_BYTE *)(a1 + 82);
  *v4 = 32;
  v4[1] = v8;
  v4 += 2;
  if ((v6 & 0x40) == 0)
  {
LABEL_6:
    if ((v6 & 4) == 0)
      goto LABEL_7;
    goto LABEL_20;
  }
LABEL_17:
  if (*a3 <= (unint64_t)v4)
    v4 = sub_19C2CEBA4((uint64_t)a3, v4);
  v9 = *(_BYTE *)(a1 + 83);
  *v4 = 40;
  v4[1] = v9;
  v4 += 2;
  if ((v6 & 4) == 0)
  {
LABEL_7:
    if ((v6 & 8) == 0)
      goto LABEL_24;
    goto LABEL_21;
  }
LABEL_20:
  v4 = sub_19C2BF5D4(a3, 6, *(_QWORD *)(a1 + 72) & 0xFFFFFFFFFFFFFFFELL, v4);
  if ((v6 & 8) == 0)
    goto LABEL_24;
LABEL_21:
  if (*a3 <= (unint64_t)v4)
    v4 = sub_19C2CEBA4((uint64_t)a3, v4);
  v10 = *(_BYTE *)(a1 + 80);
  *(_WORD *)v4 = 3264;
  v4[2] = v10;
  v4 += 3;
LABEL_24:
  v11 = sub_19C2D5804(a1 + 24, 201, 0x20000000, v4, (uint64_t *)a3);
  v12 = v11;
  v13 = *(_QWORD *)(a1 + 8);
  if ((v13 & 1) == 0)
    return v12;
  v15 = v13 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v15 + 31) < 0)
  {
    v16 = *(void **)(v15 + 8);
    v17 = *(_QWORD *)(v15 + 16);
  }
  else
  {
    v16 = (void *)(v15 + 8);
    LODWORD(v17) = *(unsigned __int8 *)(v15 + 31);
  }
  if ((uint64_t)(*a3 - (_QWORD)v11) >= (int)v17)
  {
    v18 = (int)v17;
    memcpy(v11, v16, (int)v17);
    v12 += v18;
    return v12;
  }
  return sub_19C2CECB4((uint64_t *)a3, (char *)v16, v17, (unint64_t)v11);
}

uint64_t sub_19C2C63A8(uint64_t a1)
{
  uint64_t result;
  int v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;

  result = sub_19C2D8398(a1 + 24);
  v3 = *(_DWORD *)(a1 + 48);
  if ((v3 & 0x7F) == 0)
    goto LABEL_17;
  if ((v3 & 1) == 0)
  {
    if ((v3 & 2) == 0)
      goto LABEL_4;
LABEL_22:
    v12 = *(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFFFFELL;
    v13 = *(unsigned __int8 *)(v12 + 23);
    v14 = *(_QWORD *)(v12 + 8);
    if ((v13 & 0x80u) == 0)
      v14 = v13;
    result += v14 + ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v3 & 4) == 0)
      goto LABEL_8;
    goto LABEL_5;
  }
  v9 = *(_QWORD *)(a1 + 56) & 0xFFFFFFFFFFFFFFFELL;
  v10 = *(unsigned __int8 *)(v9 + 23);
  v11 = *(_QWORD *)(v9 + 8);
  if ((v10 & 0x80u) == 0)
    v11 = v10;
  result += v11 + ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v3 & 2) != 0)
    goto LABEL_22;
LABEL_4:
  if ((v3 & 4) != 0)
  {
LABEL_5:
    v4 = *(_QWORD *)(a1 + 72) & 0xFFFFFFFFFFFFFFFELL;
    v5 = *(unsigned __int8 *)(v4 + 23);
    v6 = *(_QWORD *)(v4 + 8);
    if ((v5 & 0x80u) == 0)
      v6 = v5;
    result += v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_8:
  v7 = result + 3;
  if ((v3 & 8) == 0)
    v7 = result;
  if ((v3 & 0x10) != 0)
    v7 += 2;
  if ((v3 & 0x20) != 0)
    v7 += 2;
  if ((v3 & 0x40) != 0)
    result = v7 + 2;
  else
    result = v7;
LABEL_17:
  v8 = *(_QWORD *)(a1 + 8);
  if ((v8 & 1) != 0)
  {
    v15 = v8 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v15 + 31) < 0)
      v16 = *(_QWORD *)(v15 + 16);
    else
      v16 = *(unsigned __int8 *)(v15 + 31);
    result += v16;
  }
  *(_DWORD *)(a1 + 52) = result;
  return result;
}

void sub_19C2C650C(uint64_t a1, uint64_t (***a2)(), uint64_t a3)
{
  if (*a2 != &off_1E3D33EB8)
    sub_19C2C1B24(a1, (uint64_t)a2, a3);
  sub_19C2C6534(a1, (uint64_t)a2);
}

void sub_19C2C6534(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  std::string *v9;
  int v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  int v13;
  __int128 *v14;
  uint64_t v15;
  _QWORD *v16;
  __int128 *v17;
  uint64_t v18;
  _QWORD *v19;
  __int128 *v20;
  uint64_t v21;
  _QWORD *v22;
  char v23;
  std::string v24[2];

  if (a2 == a1)
  {
    sub_19C2CF5C8((uint64_t)v24, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 2246);
    v4 = sub_19C2CF5E0(v24, "CHECK failed: (&from) != (this): ");
    sub_19C2CF710((uint64_t)&v23, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_19C2CF718((uint64_t)v24);
  }
  sub_19C2D36CC(a1 + 24, a2 + 24);
  v5 = *(_QWORD *)(a2 + 8);
  if ((v5 & 1) != 0)
  {
    v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
    v7 = (v5 & 0xFFFFFFFFFFFFFFFELL) + 8;
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & 1) != 0)
      v9 = (std::string *)((v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
    else
      v9 = (std::string *)sub_19C2C138C((unint64_t *)(a1 + 8));
    v10 = *(char *)(v6 + 31);
    if (v10 >= 0)
      v11 = (const std::string::value_type *)v7;
    else
      v11 = *(const std::string::value_type **)(v6 + 8);
    if (v10 >= 0)
      v12 = *(unsigned __int8 *)(v6 + 31);
    else
      v12 = *(_QWORD *)(v6 + 16);
    std::string::append(v9, v11, v12);
  }
  v13 = *(_DWORD *)(a2 + 48);
  if ((v13 & 0x7F) != 0)
  {
    if ((v13 & 1) != 0)
    {
      v14 = (__int128 *)(*(_QWORD *)(a2 + 56) & 0xFFFFFFFFFFFFFFFELL);
      *(_DWORD *)(a1 + 48) |= 1u;
      v15 = *(_QWORD *)(a1 + 8);
      v16 = (_QWORD *)(v15 & 0xFFFFFFFFFFFFFFFELL);
      if ((v15 & 1) != 0)
        v16 = (_QWORD *)*v16;
      sub_19C2CE4EC((uint64_t *)(a1 + 56), v14, (uint64_t)v16);
      if ((v13 & 2) == 0)
      {
LABEL_16:
        if ((v13 & 4) == 0)
          goto LABEL_17;
        goto LABEL_30;
      }
    }
    else if ((v13 & 2) == 0)
    {
      goto LABEL_16;
    }
    v17 = (__int128 *)(*(_QWORD *)(a2 + 64) & 0xFFFFFFFFFFFFFFFELL);
    *(_DWORD *)(a1 + 48) |= 2u;
    v18 = *(_QWORD *)(a1 + 8);
    v19 = (_QWORD *)(v18 & 0xFFFFFFFFFFFFFFFELL);
    if ((v18 & 1) != 0)
      v19 = (_QWORD *)*v19;
    sub_19C2CE4EC((uint64_t *)(a1 + 64), v17, (uint64_t)v19);
    if ((v13 & 4) == 0)
    {
LABEL_17:
      if ((v13 & 8) == 0)
        goto LABEL_18;
      goto LABEL_33;
    }
LABEL_30:
    v20 = (__int128 *)(*(_QWORD *)(a2 + 72) & 0xFFFFFFFFFFFFFFFELL);
    *(_DWORD *)(a1 + 48) |= 4u;
    v21 = *(_QWORD *)(a1 + 8);
    v22 = (_QWORD *)(v21 & 0xFFFFFFFFFFFFFFFELL);
    if ((v21 & 1) != 0)
      v22 = (_QWORD *)*v22;
    sub_19C2CE4EC((uint64_t *)(a1 + 72), v20, (uint64_t)v22);
    if ((v13 & 8) == 0)
    {
LABEL_18:
      if ((v13 & 0x10) == 0)
        goto LABEL_19;
      goto LABEL_34;
    }
LABEL_33:
    *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
    if ((v13 & 0x10) == 0)
    {
LABEL_19:
      if ((v13 & 0x20) == 0)
        goto LABEL_20;
      goto LABEL_35;
    }
LABEL_34:
    *(_BYTE *)(a1 + 81) = *(_BYTE *)(a2 + 81);
    if ((v13 & 0x20) == 0)
    {
LABEL_20:
      if ((v13 & 0x40) == 0)
      {
LABEL_22:
        *(_DWORD *)(a1 + 48) |= v13;
        return;
      }
LABEL_21:
      *(_BYTE *)(a1 + 83) = *(_BYTE *)(a2 + 83);
      goto LABEL_22;
    }
LABEL_35:
    *(_BYTE *)(a1 + 82) = *(_BYTE *)(a2 + 82);
    if ((v13 & 0x40) == 0)
      goto LABEL_22;
    goto LABEL_21;
  }
}

void sub_19C2C66FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19C2C6714(uint64_t a1)
{
  return sub_19C2D489C(a1 + 24);
}

_QWORD *sub_19C2C671C@<X0>(_QWORD *a1@<X8>)
{
  return sub_19C2A6D48(a1, "sentencepiece.NormalizerSpec");
}

uint64_t sub_19C2C672C(uint64_t a1)
{
  sub_19C2C675C(a1);
  sub_19C2BEEB4((uint64_t *)(a1 + 8));
  return a1;
}

uint64_t *sub_19C2C675C(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  std::string *v4;
  uint64_t *result;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  std::string v13[2];

  v2 = *(_QWORD *)(a1 + 8);
  v3 = (_QWORD *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  if ((v2 & 1) == 0)
  {
    if (!v3)
      goto LABEL_4;
    goto LABEL_3;
  }
  if (*v3)
  {
LABEL_3:
    sub_19C2CF5C8((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 2362);
    v4 = sub_19C2CF5E0(v13, "CHECK failed: GetArena() == nullptr: ");
    sub_19C2CF710((uint64_t)&v12, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_19C2CF718((uint64_t)v13);
  }
LABEL_4:
  result = (uint64_t *)(a1 + 24);
  if (*(uint64_t **)(a1 + 24) != &qword_1EE41C5D8)
  {
    v6 = sub_19C2C1180(result);
    v7 = v6;
    if (*(char *)(v6 + 23) < 0)
      operator delete(*(void **)v6);
    result = (uint64_t *)MEMORY[0x1A1AD355C](v7, 0x1012C40EC159624);
  }
  v9 = *(uint64_t **)(a1 + 32);
  v8 = (uint64_t *)(a1 + 32);
  if (v9 != &qword_1EE41C5D8)
  {
    v10 = sub_19C2C1180(v8);
    v11 = v10;
    if (*(char *)(v10 + 23) < 0)
      operator delete(*(void **)v10);
    return (uint64_t *)MEMORY[0x1A1AD355C](v11, 0x1012C40EC159624);
  }
  return result;
}

void sub_19C2C6868(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19C2C6884(uint64_t a1)
{
  sub_19C2C672C(a1);
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C2C68A8(uint64_t result)
{
  int v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v1 = *(_DWORD *)(result + 16);
  if ((v1 & 3) != 0)
  {
    if ((v1 & 1) != 0)
    {
      v2 = *(_QWORD *)(result + 24) & 0xFFFFFFFFFFFFFFFELL;
      if (*(char *)(v2 + 23) < 0)
      {
        **(_BYTE **)v2 = 0;
        *(_QWORD *)(v2 + 8) = 0;
        if ((v1 & 2) == 0)
          goto LABEL_11;
        goto LABEL_6;
      }
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
    if ((v1 & 2) == 0)
      goto LABEL_11;
LABEL_6:
    v3 = *(_QWORD *)(result + 32) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v3 + 23) < 0)
    {
      **(_BYTE **)v3 = 0;
      *(_QWORD *)(v3 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v3 = 0;
      *(_BYTE *)(v3 + 23) = 0;
    }
  }
LABEL_11:
  *(_DWORD *)(result + 16) = 0;
  v4 = *(_QWORD *)(result + 8);
  if ((v4 & 1) != 0)
  {
    v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v5 + 31) < 0)
    {
      **(_BYTE **)(v5 + 8) = 0;
      *(_QWORD *)(v5 + 16) = 0;
    }
    else
    {
      *(_BYTE *)(v5 + 8) = 0;
      *(_BYTE *)(v5 + 31) = 0;
    }
  }
  return result;
}

uint64_t sub_19C2C6944(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  _QWORD *v6;
  char *v7;
  unsigned int v8;
  unsigned int v9;
  BOOL v11;
  std::string *v12;
  void *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  std::string *v18;
  uint64_t v19;
  unsigned int v20;
  int v21[2];

  *(_QWORD *)v21 = a2;
  if ((sub_19C2C1250((uint64_t)a3, (char **)v21, a3[11].i32[1]) & 1) == 0)
  {
    v6 = (_QWORD *)(a1 + 8);
    while (1)
    {
      v7 = (char *)(*(_QWORD *)v21 + 1);
      v8 = **(_BYTE **)v21;
      if (((char)**(_BYTE **)v21 & 0x80000000) == 0)
        goto LABEL_7;
      v9 = v8 + (*v7 << 7);
      v8 = v9 - 128;
      if ((*v7 & 0x80000000) == 0)
        break;
      v19 = sub_19C2DBBE0(*(uint64_t *)v21, v9 - 128);
      *(_QWORD *)v21 = v19;
      if (!v19)
      {
LABEL_35:
        *(_QWORD *)v21 = 0;
        return *(_QWORD *)v21;
      }
      v7 = (char *)v19;
      v8 = v20;
LABEL_8:
      if (v8 >> 3 == 2)
      {
        if (v8 == 18)
        {
          *(_DWORD *)(a1 + 16) |= 2u;
          v14 = *(_QWORD *)(a1 + 8);
          v15 = (_QWORD *)(v14 & 0xFFFFFFFFFFFFFFFELL);
          if ((v14 & 1) != 0)
            v15 = (_QWORD *)*v15;
          v16 = (uint64_t *)(a1 + 32);
          goto LABEL_27;
        }
      }
      else if (v8 >> 3 == 1 && v8 == 10)
      {
        *(_DWORD *)(a1 + 16) |= 1u;
        v17 = *(_QWORD *)(a1 + 8);
        v15 = (_QWORD *)(v17 & 0xFFFFFFFFFFFFFFFELL);
        if ((v17 & 1) != 0)
          v15 = (_QWORD *)*v15;
        v16 = (uint64_t *)(a1 + 24);
LABEL_27:
        v18 = (std::string *)sub_19C2CE524(v16, (uint64_t)v15);
        v13 = (void *)sub_19C2DBC94(v18, *(char **)v21, (uint64_t)a3);
        goto LABEL_28;
      }
      if (v8)
        v11 = (v8 & 7) == 4;
      else
        v11 = 1;
      if (v11)
      {
        a3[10].i32[0] = v8 - 1;
        return *(_QWORD *)v21;
      }
      if ((*v6 & 1) != 0)
      {
        v12 = (std::string *)((*v6 & 0xFFFFFFFFFFFFFFFELL) + 8);
      }
      else
      {
        v12 = (std::string *)sub_19C2C138C((unint64_t *)(a1 + 8));
        v7 = *(char **)v21;
      }
      v13 = sub_19C2DC0C0(v8, v12, v7, a3);
LABEL_28:
      *(_QWORD *)v21 = v13;
      if (!v13)
        goto LABEL_35;
      if ((sub_19C2C1250((uint64_t)a3, (char **)v21, a3[11].i32[1]) & 1) != 0)
        return *(_QWORD *)v21;
    }
    v7 = (char *)(*(_QWORD *)v21 + 2);
LABEL_7:
    *(_QWORD *)v21 = v7;
    goto LABEL_8;
  }
  return *(_QWORD *)v21;
}

char *sub_19C2C6AEC(uint64_t a1, char *__dst, unint64_t *a3)
{
  char *v4;
  int v6;
  uint64_t v7;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;

  v4 = __dst;
  v6 = *(_DWORD *)(a1 + 16);
  if ((v6 & 1) != 0)
    v4 = sub_19C2BF5D4(a3, 1, *(_QWORD *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL, __dst);
  if ((v6 & 2) != 0)
    v4 = sub_19C2BF5D4(a3, 2, *(_QWORD *)(a1 + 32) & 0xFFFFFFFFFFFFFFFELL, v4);
  v7 = *(_QWORD *)(a1 + 8);
  if ((v7 & 1) == 0)
    return v4;
  v9 = v7 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v9 + 31) < 0)
  {
    v10 = *(void **)(v9 + 8);
    v11 = *(_QWORD *)(v9 + 16);
  }
  else
  {
    v10 = (void *)(v9 + 8);
    LODWORD(v11) = *(unsigned __int8 *)(v9 + 31);
  }
  if ((uint64_t)(*a3 - (_QWORD)v4) >= (int)v11)
  {
    v12 = (int)v11;
    memcpy(v4, v10, (int)v11);
    v4 += v12;
    return v4;
  }
  return sub_19C2CECB4((uint64_t *)a3, (char *)v10, v11, (unint64_t)v4);
}

uint64_t sub_19C2C6BC4(uint64_t a1)
{
  int v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v11;
  uint64_t v12;

  v1 = *(_DWORD *)(a1 + 16);
  if ((v1 & 3) == 0)
  {
    v2 = 0;
    goto LABEL_12;
  }
  if ((v1 & 1) == 0)
  {
    v2 = 0;
    if ((v1 & 2) == 0)
      goto LABEL_12;
    goto LABEL_9;
  }
  v3 = *(_QWORD *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL;
  v4 = *(unsigned __int8 *)(v3 + 23);
  v5 = *(_QWORD *)(v3 + 8);
  if ((v4 & 0x80u) == 0)
    v5 = v4;
  v2 = v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v1 & 2) != 0)
  {
LABEL_9:
    v6 = *(_QWORD *)(a1 + 32) & 0xFFFFFFFFFFFFFFFELL;
    v7 = *(unsigned __int8 *)(v6 + 23);
    v8 = *(_QWORD *)(v6 + 8);
    if ((v7 & 0x80u) == 0)
      v8 = v7;
    v2 += v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_12:
  v9 = *(_QWORD *)(a1 + 8);
  if ((v9 & 1) != 0)
  {
    v11 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v11 + 31) < 0)
      v12 = *(_QWORD *)(v11 + 16);
    else
      v12 = *(unsigned __int8 *)(v11 + 31);
    v2 += v12;
  }
  *(_DWORD *)(a1 + 20) = v2;
  return v2;
}

unint64_t sub_19C2C6C9C(unint64_t a1, uint64_t (***a2)(), uint64_t a3)
{
  if (*a2 != &off_1E3D34018)
    sub_19C2C1B24(a1, (uint64_t)a2, a3);
  return sub_19C2C6CC4(a1, (uint64_t)a2);
}

unint64_t sub_19C2C6CC4(unint64_t result, uint64_t a2)
{
  unint64_t v3;
  std::string *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  std::string *v9;
  int v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  int v13;
  __int128 *v14;
  uint64_t v15;
  _QWORD *v16;
  __int128 *v17;
  uint64_t v18;
  _QWORD *v19;
  char v20;
  std::string v21[2];

  v3 = result;
  if (a2 == result)
  {
    sub_19C2CF5C8((uint64_t)v21, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 2516);
    v4 = sub_19C2CF5E0(v21, "CHECK failed: (&from) != (this): ");
    sub_19C2CF710((uint64_t)&v20, (const char **)&v4->__r_.__value_.__l.__data_);
    result = sub_19C2CF718((uint64_t)v21);
  }
  v5 = *(_QWORD *)(a2 + 8);
  if ((v5 & 1) != 0)
  {
    v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
    v7 = (v5 & 0xFFFFFFFFFFFFFFFELL) + 8;
    v8 = *(_QWORD *)(v3 + 8);
    if ((v8 & 1) != 0)
      v9 = (std::string *)((v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
    else
      v9 = (std::string *)sub_19C2C138C((unint64_t *)(v3 + 8));
    v10 = *(char *)(v6 + 31);
    if (v10 >= 0)
      v11 = (const std::string::value_type *)v7;
    else
      v11 = *(const std::string::value_type **)(v6 + 8);
    if (v10 >= 0)
      v12 = *(unsigned __int8 *)(v6 + 31);
    else
      v12 = *(_QWORD *)(v6 + 16);
    result = (unint64_t)std::string::append(v9, v11, v12);
  }
  v13 = *(_DWORD *)(a2 + 16);
  if ((v13 & 3) != 0)
  {
    if ((v13 & 1) != 0)
    {
      v14 = (__int128 *)(*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFELL);
      *(_DWORD *)(v3 + 16) |= 1u;
      v15 = *(_QWORD *)(v3 + 8);
      v16 = (_QWORD *)(v15 & 0xFFFFFFFFFFFFFFFELL);
      if ((v15 & 1) != 0)
        v16 = (_QWORD *)*v16;
      result = sub_19C2CE4EC((uint64_t *)(v3 + 24), v14, (uint64_t)v16);
    }
    if ((v13 & 2) != 0)
    {
      v17 = (__int128 *)(*(_QWORD *)(a2 + 32) & 0xFFFFFFFFFFFFFFFELL);
      *(_DWORD *)(v3 + 16) |= 2u;
      v18 = *(_QWORD *)(v3 + 8);
      v19 = (_QWORD *)(v18 & 0xFFFFFFFFFFFFFFFELL);
      if ((v18 & 1) != 0)
        v19 = (_QWORD *)*v19;
      return sub_19C2CE4EC((uint64_t *)(v3 + 32), v17, (uint64_t)v19);
    }
  }
  return result;
}

void sub_19C2C6DF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19C2C6E0C()
{
  return 1;
}

_QWORD *sub_19C2C6E14@<X0>(_QWORD *a1@<X8>)
{
  return sub_19C2A6D48(a1, "sentencepiece.SelfTestData.Sample");
}

uint64_t sub_19C2C6E24(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &off_1E3D33D48;
  *(_QWORD *)(a1 + 8) = a2;
  sub_19C2CFB64(a1 + 16, a2);
  *(_QWORD *)(a1 + 40) = a2;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  if (atomic_load(dword_1EE41ABD8))
    sub_19C2DA308(dword_1EE41ABD8);
  return a1;
}

void sub_19C2C6E98(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;

  sub_19C2CA71C(v2);
  sub_19C2CFC40(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19C2C6EB4(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  v3 = (uint64_t *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 8);
  v4 = (_QWORD *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  if ((v2 & 1) != 0)
  {
    if (!*v4)
      goto LABEL_4;
    goto LABEL_3;
  }
  if (v4)
  {
LABEL_3:
    sub_19C2CF5C8((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 2589);
    v5 = sub_19C2CF5E0(v8, "CHECK failed: GetArena() == nullptr: ");
    sub_19C2CF710((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_19C2CF718((uint64_t)v8);
  }
LABEL_4:
  sub_19C2BEEB4(v3);
  sub_19C2CA71C((uint64_t *)(a1 + 40));
  sub_19C2CFC40(a1 + 16);
  return a1;
}

void sub_19C2C6F50(void *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  sub_19C2CDAC8(a1);
}

void sub_19C2C6F74(uint64_t a1)
{
  sub_19C2C6EB4(a1);
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C2C6F98(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  unint64_t v4;

  sub_19C2D3630((unsigned __int8 *)(a1 + 16));
  result = sub_19C2CA3C0(a1 + 40);
  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 1) != 0)
  {
    v4 = v3 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v4 + 31) < 0)
    {
      **(_BYTE **)(v4 + 8) = 0;
      *(_QWORD *)(v4 + 16) = 0;
    }
    else
    {
      *(_BYTE *)(v4 + 8) = 0;
      *(_BYTE *)(v4 + 31) = 0;
    }
  }
  return result;
}

char *sub_19C2C6FF0(uint64_t a1, char *a2, int32x2_t *a3)
{
  _QWORD *v5;
  char *v6;
  unsigned int v7;
  unsigned int v8;
  BOOL v9;
  unsigned __int8 *v10;
  char *v11;
  unsigned __int8 *v12;
  int *v13;
  uint64_t v14;
  int v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  std::string *v19;
  char *v20;
  unsigned int v21;
  char *v23;

  v23 = a2;
  if ((sub_19C2C1250((uint64_t)a3, &v23, a3[11].i32[1]) & 1) == 0)
  {
    v5 = (_QWORD *)(a1 + 8);
    while (1)
    {
      v6 = v23 + 1;
      v7 = *v23;
      if ((*v23 & 0x80000000) == 0)
        goto LABEL_6;
      v8 = v7 + (*v6 << 7);
      v7 = v8 - 128;
      if ((*v6 & 0x80000000) == 0)
        break;
      v20 = (char *)sub_19C2DBBE0((uint64_t)v23, v8 - 128);
      v23 = v20;
      if (!v20)
        return 0;
      v6 = v20;
      v7 = v21;
LABEL_7:
      if (v7 == 10)
      {
        v11 = v6 - 1;
        while (1)
        {
          v12 = (unsigned __int8 *)(v11 + 1);
          v23 = v11 + 1;
          v13 = *(int **)(a1 + 56);
          if (!v13)
            break;
          v14 = *(int *)(a1 + 48);
          v15 = *v13;
          if ((int)v14 >= *v13)
          {
            if (v15 == *(_DWORD *)(a1 + 52))
            {
LABEL_20:
              sub_19C2E0CEC(a1 + 40, v15 + 1);
              v13 = *(int **)(a1 + 56);
              v15 = *v13;
            }
            *v13 = v15 + 1;
            v16 = sub_19C2C958C(*(_QWORD *)(a1 + 40));
            v17 = *(_QWORD *)(a1 + 56);
            v18 = *(int *)(a1 + 48);
            *(_DWORD *)(a1 + 48) = v18 + 1;
            *(_QWORD *)(v17 + 8 * v18 + 8) = v16;
            v12 = (unsigned __int8 *)v23;
            goto LABEL_22;
          }
          *(_DWORD *)(a1 + 48) = v14 + 1;
          v16 = *(_QWORD **)&v13[2 * v14 + 2];
LABEL_22:
          v11 = (char *)sub_19C2C7204(a3, (uint64_t)v16, v12);
          v23 = v11;
          if (!v11)
            return 0;
          if (*(_QWORD *)a3 <= (unint64_t)v11 || *v11 != 10)
            goto LABEL_30;
        }
        v15 = *(_DWORD *)(a1 + 52);
        goto LABEL_20;
      }
      if (v7)
        v9 = (v7 & 7) == 4;
      else
        v9 = 1;
      if (v9)
      {
        a3[10].i32[0] = v7 - 1;
        return v23;
      }
      if (v7 < 0x640)
      {
        if ((*v5 & 1) != 0)
        {
          v19 = (std::string *)((*v5 & 0xFFFFFFFFFFFFFFFELL) + 8);
        }
        else
        {
          v19 = (std::string *)sub_19C2C138C((unint64_t *)(a1 + 8));
          v6 = v23;
        }
        v10 = sub_19C2DC0C0(v7, v19, v6, a3);
      }
      else
      {
        v10 = sub_19C2D4BD0((uint64_t *)(a1 + 16), v7, (unsigned __int8 *)v6, (uint64_t)&unk_1EE41C840, (unint64_t *)(a1 + 8), a3);
      }
      v23 = (char *)v10;
      if (!v10)
        return 0;
LABEL_30:
      if (sub_19C2C1250((uint64_t)a3, &v23, a3[11].i32[1]))
        return v23;
    }
    v6 = v23 + 2;
LABEL_6:
    v23 = v6;
    goto LABEL_7;
  }
  return v23;
}

uint64_t sub_19C2C7204(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t result;
  unsigned int v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  int v15;

  v6 = (char)*a3;
  v7 = *a3;
  if (v6 < 0)
  {
    result = sub_19C2DBC24((uint64_t)a3, v7);
    if (!result)
      return result;
    v8 = result;
    v7 = v10;
  }
  else
  {
    v8 = (uint64_t)(a3 + 1);
  }
  v11 = sub_19C2C1670((uint64_t)a1, v8, v7);
  v12 = a1[11].i32[0];
  v13 = __OFSUB__(v12--, 1);
  a1[11].i32[0] = v12;
  if (v12 < 0 != v13)
    return 0;
  v14 = v11;
  result = sub_19C2C6944(a2, v8, a1);
  if (!result)
    return result;
  ++a1[11].i32[0];
  if (a1[10].i32[0])
    return 0;
  v15 = a1[3].i32[1] + v14;
  a1[3].i32[1] = v15;
  *a1 = (int32x2_t)(*(_QWORD *)&a1[1] + (v15 & (v15 >> 31)));
  return result;
}

char *sub_19C2C72C8(uint64_t a1, char *a2, unint64_t *a3)
{
  int v6;
  int i;
  uint64_t v8;
  unsigned int v9;
  char *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;

  v6 = *(_DWORD *)(a1 + 48);
  if (v6)
  {
    for (i = 0; i != v6; ++i)
    {
      if (*a3 <= (unint64_t)a2)
        a2 = sub_19C2CEBA4((uint64_t)a3, a2);
      v8 = sub_19C2CA148(a1 + 40, i);
      *a2 = 10;
      v9 = *(_DWORD *)(v8 + 20);
      if (v9 > 0x7F)
      {
        a2[1] = v9 | 0x80;
        v11 = v9 >> 7;
        if (v9 >> 14)
        {
          v10 = a2 + 3;
          do
          {
            *(v10 - 1) = v11 | 0x80;
            v12 = v11 >> 7;
            ++v10;
            v13 = v11 >> 14;
            v11 >>= 7;
          }
          while (v13);
          *(v10 - 1) = v12;
        }
        else
        {
          a2[2] = v11;
          v10 = a2 + 3;
        }
      }
      else
      {
        a2[1] = v9;
        v10 = a2 + 2;
      }
      a2 = sub_19C2C6AEC(v8, v10, a3);
    }
  }
  v14 = sub_19C2D5804(a1 + 16, 200, 0x20000000, a2, (uint64_t *)a3);
  v15 = v14;
  v16 = *(_QWORD *)(a1 + 8);
  if ((v16 & 1) == 0)
    return v15;
  v18 = v16 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v18 + 31) < 0)
  {
    v19 = *(void **)(v18 + 8);
    v20 = *(_QWORD *)(v18 + 16);
  }
  else
  {
    v19 = (void *)(v18 + 8);
    LODWORD(v20) = *(unsigned __int8 *)(v18 + 31);
  }
  if ((uint64_t)(*a3 - (_QWORD)v14) >= (int)v20)
  {
    v21 = (int)v20;
    memcpy(v14, v19, (int)v20);
    v15 += v21;
    return v15;
  }
  return sub_19C2CECB4((uint64_t *)a3, (char *)v19, v20, (unint64_t)v14);
}

uint64_t sub_19C2C744C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;
  uint64_t v13;

  v2 = sub_19C2D8398(a1 + 16);
  v3 = *(int *)(a1 + 48);
  v4 = v2 + v3;
  v5 = *(_QWORD *)(a1 + 56);
  if (v5)
    v6 = (uint64_t *)(v5 + 8);
  else
    v6 = 0;
  if ((_DWORD)v3)
  {
    v7 = 8 * v3;
    do
    {
      v8 = *v6++;
      v9 = sub_19C2C6BC4(v8);
      v4 += v9 + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6);
      v7 -= 8;
    }
    while (v7);
  }
  v10 = *(_QWORD *)(a1 + 8);
  if ((v10 & 1) != 0)
  {
    v12 = v10 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v12 + 31) < 0)
      v13 = *(_QWORD *)(v12 + 16);
    else
      v13 = *(unsigned __int8 *)(v12 + 31);
    v4 += v13;
  }
  *(_DWORD *)(a1 + 64) = v4;
  return v4;
}

unint64_t sub_19C2C74F8(uint64_t a1, uint64_t (***a2)(), uint64_t a3)
{
  if (*a2 != &off_1E3D33D48)
    sub_19C2C1B24(a1, (uint64_t)a2, a3);
  return sub_19C2C7520(a1, (uint64_t)a2);
}

unint64_t sub_19C2C7520(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  std::string *v9;
  int v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  char v14;
  std::string v15[2];

  if (a2 == a1)
  {
    sub_19C2CF5C8((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 2724);
    v4 = sub_19C2CF5E0(v15, "CHECK failed: (&from) != (this): ");
    sub_19C2CF710((uint64_t)&v14, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_19C2CF718((uint64_t)v15);
  }
  sub_19C2D36CC(a1 + 16, a2 + 16);
  v5 = *(_QWORD *)(a2 + 8);
  if ((v5 & 1) != 0)
  {
    v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
    v7 = (v5 & 0xFFFFFFFFFFFFFFFELL) + 8;
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & 1) != 0)
      v9 = (std::string *)((v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
    else
      v9 = (std::string *)sub_19C2C138C((unint64_t *)(a1 + 8));
    v10 = *(char *)(v6 + 31);
    if (v10 >= 0)
      v11 = (const std::string::value_type *)v7;
    else
      v11 = *(const std::string::value_type **)(v6 + 8);
    if (v10 >= 0)
      v12 = *(unsigned __int8 *)(v6 + 31);
    else
      v12 = *(_QWORD *)(v6 + 16);
    std::string::append(v9, v11, v12);
  }
  return sub_19C2CA7C0(a1 + 40, a2 + 40);
}

void sub_19C2C75F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19C2C760C(uint64_t a1)
{
  return sub_19C2D489C(a1 + 16);
}

_QWORD *sub_19C2C7614@<X0>(_QWORD *a1@<X8>)
{
  return sub_19C2A6D48(a1, "sentencepiece.SelfTestData");
}

_QWORD *sub_19C2C7624(_QWORD *a1, uint64_t a2)
{
  *a1 = &off_1E3D34440;
  a1[1] = a2;
  sub_19C2CFB64((uint64_t)(a1 + 2), a2);
  a1[5] = 0;
  if (atomic_load(dword_1EE41AB58))
    sub_19C2DA308(dword_1EE41AB58);
  a1[6] = &qword_1EE41C5D8;
  a1[7] = 0x100000000;
  return a1;
}

void sub_19C2C7690(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_19C2CFC40(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19C2C76A4(uint64_t a1)
{
  sub_19C2C76DC(a1);
  sub_19C2BEEB4((uint64_t *)(a1 + 8));
  sub_19C2CFC40(a1 + 16);
  return a1;
}

uint64_t sub_19C2C76DC(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  std::string *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  std::string v10[2];

  v1 = result;
  v2 = *(_QWORD *)(result + 8);
  v3 = (_QWORD *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  if ((v2 & 1) == 0)
  {
    if (!v3)
      goto LABEL_4;
    goto LABEL_3;
  }
  if (*v3)
  {
LABEL_3:
    sub_19C2CF5C8((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 2813);
    v4 = sub_19C2CF5E0(v10, "CHECK failed: GetArena() == nullptr: ");
    sub_19C2CF710((uint64_t)&v9, (const char **)&v4->__r_.__value_.__l.__data_);
    result = sub_19C2CF718((uint64_t)v10);
  }
LABEL_4:
  v6 = *(uint64_t **)(v1 + 48);
  v5 = (uint64_t *)(v1 + 48);
  if (v6 != &qword_1EE41C5D8)
  {
    v7 = sub_19C2C1180(v5);
    v8 = v7;
    if (*(char *)(v7 + 23) < 0)
      operator delete(*(void **)v7);
    return MEMORY[0x1A1AD355C](v8, 0x1012C40EC159624);
  }
  return result;
}

void sub_19C2C77A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19C2C77BC(uint64_t a1)
{
  sub_19C2C76A4(a1);
  JUMPOUT(0x1A1AD355CLL);
}

unsigned __int8 *sub_19C2C77E0(uint64_t a1)
{
  unsigned __int8 *result;
  int v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  result = sub_19C2D3630((unsigned __int8 *)(a1 + 16));
  v3 = *(_DWORD *)(a1 + 40);
  if ((v3 & 1) != 0)
  {
    v4 = *(_QWORD *)(a1 + 48) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v4 + 23) < 0)
    {
      **(_BYTE **)v4 = 0;
      *(_QWORD *)(v4 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v4 = 0;
      *(_BYTE *)(v4 + 23) = 0;
    }
  }
  if ((v3 & 6) != 0)
    *(_QWORD *)(a1 + 56) = 0x100000000;
  *(_DWORD *)(a1 + 40) = 0;
  v5 = *(_QWORD *)(a1 + 8);
  if ((v5 & 1) != 0)
  {
    v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v6 + 31) < 0)
    {
      **(_BYTE **)(v6 + 8) = 0;
      *(_QWORD *)(v6 + 16) = 0;
    }
    else
    {
      *(_BYTE *)(v6 + 8) = 0;
      *(_BYTE *)(v6 + 31) = 0;
    }
  }
  return result;
}

uint64_t sub_19C2C7874(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  int v5;
  _QWORD *v7;
  char *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  BOOL v13;
  void *v14;
  char *v15;
  unint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  _QWORD *v20;
  std::string *v21;
  uint64_t v22;
  unsigned int v23;
  std::string *v24;
  unint64_t v25;
  std::string *v26;
  int v27[2];

  *(_QWORD *)v27 = a2;
  v5 = 0;
  if ((sub_19C2C1250((uint64_t)a3, (char **)v27, a3[11].i32[1]) & 1) == 0)
  {
    v7 = (_QWORD *)(a1 + 8);
    while (1)
    {
      v8 = (char *)(*(_QWORD *)v27 + 1);
      v9 = **(_BYTE **)v27;
      if (((char)**(_BYTE **)v27 & 0x80000000) == 0)
        goto LABEL_7;
      v10 = v9 + (*v8 << 7);
      v9 = v10 - 128;
      if ((*v8 & 0x80000000) == 0)
        break;
      v22 = sub_19C2DBBE0(*(uint64_t *)v27, v10 - 128);
      *(_QWORD *)v27 = v22;
      if (!v22)
        goto LABEL_48;
      v8 = (char *)v22;
      v9 = v23;
LABEL_8:
      v11 = v9 >> 3;
      if (v9 >> 3 == 3)
      {
        if (v9 == 24)
        {
          v15 = v8 + 1;
          v16 = *v8;
          if ((*v8 & 0x80000000) == 0)
            goto LABEL_24;
          v17 = *v15;
          v18 = v16 + (v17 << 7);
          v16 = (v18 - 128);
          if (v17 < 0)
          {
            *(_QWORD *)v27 = sub_19C2DBB98((uint64_t)v8, (v18 - 128));
            if (!*(_QWORD *)v27)
            {
LABEL_48:
              *(_QWORD *)v27 = 0;
              goto LABEL_2;
            }
            v16 = v25;
          }
          else
          {
            v15 = v8 + 2;
LABEL_24:
            *(_QWORD *)v27 = v15;
          }
          if ((v16 - 1) > 5)
          {
            if ((*v7 & 1) != 0)
              v26 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFELL) + 8);
            else
              v26 = (std::string *)sub_19C2C138C((unint64_t *)(a1 + 8));
            sub_19C2DBA98(3, v16, v26);
          }
          else
          {
            *(_DWORD *)(a1 + 40) |= 4u;
            *(_DWORD *)(a1 + 60) = v16;
          }
          goto LABEL_38;
        }
      }
      else if (v11 == 2)
      {
        if (v9 == 21)
        {
          v5 |= 2u;
          *(_DWORD *)(a1 + 56) = *(_DWORD *)v8;
          *(_QWORD *)v27 = v8 + 4;
          goto LABEL_38;
        }
      }
      else if (v11 == 1 && v9 == 10)
      {
        *(_DWORD *)(a1 + 40) |= 1u;
        v19 = *(_QWORD *)(a1 + 8);
        v20 = (_QWORD *)(v19 & 0xFFFFFFFFFFFFFFFELL);
        if ((v19 & 1) != 0)
          v20 = (_QWORD *)*v20;
        v21 = (std::string *)sub_19C2CE524((uint64_t *)(a1 + 48), (uint64_t)v20);
        v14 = (void *)sub_19C2DBC94(v21, *(char **)v27, (uint64_t)a3);
        goto LABEL_37;
      }
      if (v9)
        v13 = (v9 & 7) == 4;
      else
        v13 = 1;
      if (v13)
      {
        a3[10].i32[0] = v9 - 1;
        goto LABEL_2;
      }
      if (v9 < 0x640)
      {
        if ((*v7 & 1) != 0)
        {
          v24 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFELL) + 8);
        }
        else
        {
          v24 = (std::string *)sub_19C2C138C((unint64_t *)(a1 + 8));
          v8 = *(char **)v27;
        }
        v14 = sub_19C2DC0C0(v9, v24, v8, a3);
      }
      else
      {
        v14 = sub_19C2D4BD0((uint64_t *)(a1 + 16), v9, (unsigned __int8 *)v8, (uint64_t)qword_1EE41C800, (unint64_t *)(a1 + 8), a3);
      }
LABEL_37:
      *(_QWORD *)v27 = v14;
      if (!v14)
        goto LABEL_48;
LABEL_38:
      if ((sub_19C2C1250((uint64_t)a3, (char **)v27, a3[11].i32[1]) & 1) != 0)
        goto LABEL_2;
    }
    v8 = (char *)(*(_QWORD *)v27 + 2);
LABEL_7:
    *(_QWORD *)v27 = v8;
    goto LABEL_8;
  }
LABEL_2:
  *(_DWORD *)(a1 + 40) |= v5;
  return *(_QWORD *)v27;
}

char *sub_19C2C7AF8(uint64_t a1, char *a2, unint64_t *a3)
{
  char *v4;
  int v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;

  v4 = a2;
  v6 = *(_DWORD *)(a1 + 40);
  if ((v6 & 1) != 0)
  {
    v4 = sub_19C2BF5D4(a3, 1, *(_QWORD *)(a1 + 48) & 0xFFFFFFFFFFFFFFFELL, a2);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_18;
      goto LABEL_9;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  if (*a3 <= (unint64_t)v4)
    v4 = sub_19C2CEBA4((uint64_t)a3, v4);
  v7 = *(_DWORD *)(a1 + 56);
  *v4 = 21;
  *(_DWORD *)(v4 + 1) = v7;
  v4 += 5;
  if ((v6 & 4) != 0)
  {
LABEL_9:
    if (*a3 <= (unint64_t)v4)
      v4 = sub_19C2CEBA4((uint64_t)a3, v4);
    v8 = *(int *)(a1 + 60);
    *v4 = 24;
    if (v8 > 0x7F)
    {
      v4[1] = v8 | 0x80;
      v9 = v8 >> 7;
      if (v8 >> 14)
      {
        v4 += 3;
        do
        {
          *(v4 - 1) = v9 | 0x80;
          v10 = v9 >> 7;
          ++v4;
          v11 = v9 >> 14;
          v9 >>= 7;
        }
        while (v11);
        *(v4 - 1) = v10;
      }
      else
      {
        v4[2] = v9;
        v4 += 3;
      }
    }
    else
    {
      v4[1] = v8;
      v4 += 2;
    }
  }
LABEL_18:
  v12 = sub_19C2D5804(a1 + 16, 200, 0x20000000, v4, (uint64_t *)a3);
  v13 = v12;
  v14 = *(_QWORD *)(a1 + 8);
  if ((v14 & 1) == 0)
    return v13;
  v16 = v14 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v16 + 31) < 0)
  {
    v17 = *(void **)(v16 + 8);
    v18 = *(_QWORD *)(v16 + 16);
  }
  else
  {
    v17 = (void *)(v16 + 8);
    LODWORD(v18) = *(unsigned __int8 *)(v16 + 31);
  }
  if ((uint64_t)(*a3 - (_QWORD)v12) >= (int)v18)
  {
    v19 = (int)v18;
    memcpy(v12, v17, (int)v18);
    v13 += v19;
    return v13;
  }
  return sub_19C2CECB4((uint64_t *)a3, (char *)v17, v18, (unint64_t)v12);
}

uint64_t sub_19C2C7C90(uint64_t a1)
{
  uint64_t result;
  int v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  result = sub_19C2D8398(a1 + 16);
  v3 = *(_DWORD *)(a1 + 40);
  if ((v3 & 7) != 0)
  {
    if ((v3 & 1) != 0)
    {
      v4 = *(_QWORD *)(a1 + 48) & 0xFFFFFFFFFFFFFFFELL;
      v5 = *(unsigned __int8 *)(v4 + 23);
      v6 = *(_QWORD *)(v4 + 8);
      if ((v5 & 0x80u) == 0)
        v6 = v5;
      result += v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    if ((v3 & 2) != 0)
      result += 5;
    if ((v3 & 4) != 0)
    {
      v7 = *(_DWORD *)(a1 + 60);
      if (v7 < 0)
        v8 = 11;
      else
        v8 = ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6) + 1;
      result += v8;
    }
  }
  v9 = *(_QWORD *)(a1 + 8);
  if ((v9 & 1) != 0)
  {
    v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v10 + 31) < 0)
      v11 = *(_QWORD *)(v10 + 16);
    else
      v11 = *(unsigned __int8 *)(v10 + 31);
    result += v11;
  }
  *(_DWORD *)(a1 + 44) = result;
  return result;
}

void sub_19C2C7D70(uint64_t a1, uint64_t (***a2)(), uint64_t a3)
{
  if (*a2 != &off_1E3D34440)
    sub_19C2C1B24(a1, (uint64_t)a2, a3);
  sub_19C2C7D98(a1, (uint64_t)a2);
}

void sub_19C2C7D98(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  std::string *v9;
  int v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  int v13;
  __int128 *v14;
  uint64_t v15;
  _QWORD *v16;
  char v17;
  std::string v18[2];

  if (a2 == a1)
  {
    sub_19C2CF5C8((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 3001);
    v4 = sub_19C2CF5E0(v18, "CHECK failed: (&from) != (this): ");
    sub_19C2CF710((uint64_t)&v17, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_19C2CF718((uint64_t)v18);
  }
  sub_19C2D36CC(a1 + 16, a2 + 16);
  v5 = *(_QWORD *)(a2 + 8);
  if ((v5 & 1) != 0)
  {
    v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
    v7 = (v5 & 0xFFFFFFFFFFFFFFFELL) + 8;
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & 1) != 0)
      v9 = (std::string *)((v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
    else
      v9 = (std::string *)sub_19C2C138C((unint64_t *)(a1 + 8));
    v10 = *(char *)(v6 + 31);
    if (v10 >= 0)
      v11 = (const std::string::value_type *)v7;
    else
      v11 = *(const std::string::value_type **)(v6 + 8);
    if (v10 >= 0)
      v12 = *(unsigned __int8 *)(v6 + 31);
    else
      v12 = *(_QWORD *)(v6 + 16);
    std::string::append(v9, v11, v12);
  }
  v13 = *(_DWORD *)(a2 + 40);
  if ((v13 & 7) != 0)
  {
    if ((v13 & 1) != 0)
    {
      v14 = (__int128 *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFFELL);
      *(_DWORD *)(a1 + 40) |= 1u;
      v15 = *(_QWORD *)(a1 + 8);
      v16 = (_QWORD *)(v15 & 0xFFFFFFFFFFFFFFFELL);
      if ((v15 & 1) != 0)
        v16 = (_QWORD *)*v16;
      sub_19C2CE4EC((uint64_t *)(a1 + 48), v14, (uint64_t)v16);
      if ((v13 & 2) == 0)
      {
LABEL_16:
        if ((v13 & 4) == 0)
        {
LABEL_18:
          *(_DWORD *)(a1 + 40) |= v13;
          return;
        }
LABEL_17:
        *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
        goto LABEL_18;
      }
    }
    else if ((v13 & 2) == 0)
    {
      goto LABEL_16;
    }
    *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
    if ((v13 & 4) == 0)
      goto LABEL_18;
    goto LABEL_17;
  }
}

void sub_19C2C7ED0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19C2C7EE8(uint64_t a1)
{
  return sub_19C2D489C(a1 + 16);
}

_QWORD *sub_19C2C7EF0@<X0>(_QWORD *a1@<X8>)
{
  return sub_19C2A6D48(a1, "sentencepiece.ModelProto.SentencePiece");
}

uint64_t sub_19C2C7F00(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &off_1E3D33A78;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = &unk_1E3D33B90;
  sub_19C2CFB64(a1 + 24, a2);
  *(_QWORD *)(a1 + 56) = a2;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  if (atomic_load(dword_1EE41AB70))
    sub_19C2DA308(dword_1EE41AB70);
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  return a1;
}

void sub_19C2C7F84(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;

  sub_19C2CA968(v2);
  sub_19C2CFC40(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19C2C7FA4(uint64_t a1)
{
  sub_19C2C7FE4(a1);
  sub_19C2BEEB4((uint64_t *)(a1 + 8));
  sub_19C2CA968((uint64_t *)(a1 + 56));
  sub_19C2CFC40(a1 + 24);
  return a1;
}

uint64_t sub_19C2C7FE4(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  std::string *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  std::string v13[2];

  v1 = result;
  v2 = *(_QWORD *)(result + 8);
  v3 = (_QWORD *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  if ((v2 & 1) == 0)
  {
    if (!v3)
      goto LABEL_4;
    goto LABEL_3;
  }
  if (*v3)
  {
LABEL_3:
    sub_19C2CF5C8((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 3145);
    v4 = sub_19C2CF5E0(v13, "CHECK failed: GetArena() == nullptr: ");
    sub_19C2CF710((uint64_t)&v12, (const char **)&v4->__r_.__value_.__l.__data_);
    result = sub_19C2CF718((uint64_t)v13);
  }
LABEL_4:
  if ((_UNKNOWN *)v1 != &unk_1EE41C5F0)
  {
    v5 = *(uint64_t **)(v1 + 80);
    if (v5)
    {
      v6 = sub_19C2C1EDC(v5);
      MEMORY[0x1A1AD355C](v6, 0x10A1C4074230EEALL);
    }
    v7 = *(_QWORD *)(v1 + 88);
    if (v7)
    {
      v8 = sub_19C2C5AAC(v7);
      MEMORY[0x1A1AD355C](v8, 0x10A1C402CDD3876);
    }
    v9 = *(_QWORD *)(v1 + 96);
    if (v9)
    {
      v10 = sub_19C2C6EB4(v9);
      MEMORY[0x1A1AD355C](v10, 0x10A1C4075D007F8);
    }
    result = *(_QWORD *)(v1 + 104);
    if (result)
    {
      v11 = sub_19C2C5AAC(result);
      return MEMORY[0x1A1AD355C](v11, 0x10A1C402CDD3876);
    }
  }
  return result;
}

void sub_19C2C80F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19C2C810C(uint64_t a1)
{
  return sub_19C2C7FA4(a1 - 16);
}

void sub_19C2C8114(uint64_t a1)
{
  sub_19C2C7FA4(a1);
  JUMPOUT(0x1A1AD355CLL);
}

void sub_19C2C8138(uint64_t a1)
{
  sub_19C2C7FA4(a1 - 16);
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C2C8160(uint64_t a1)
{
  uint64_t result;
  int v3;
  uint64_t v4;
  std::string *v5;
  uint64_t v6;
  std::string *v7;
  uint64_t v8;
  std::string *v9;
  uint64_t v10;
  std::string *v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  std::string v15[2];

  sub_19C2D3630((unsigned __int8 *)(a1 + 24));
  result = (uint64_t)sub_19C2CA46C((unsigned __int8 *)(a1 + 56));
  v3 = *(_DWORD *)(a1 + 48);
  if ((v3 & 0xF) != 0)
  {
    if ((v3 & 1) != 0)
    {
      v4 = *(_QWORD *)(a1 + 80);
      if (!v4)
      {
        sub_19C2CF5C8((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 3178);
        v5 = sub_19C2CF5E0(v15, "CHECK failed: trainer_spec_ != nullptr: ");
        sub_19C2CF710((uint64_t)&v14, (const char **)&v5->__r_.__value_.__l.__data_);
        sub_19C2CF718((uint64_t)v15);
        v4 = *(_QWORD *)(a1 + 80);
      }
      result = sub_19C2C222C(v4);
    }
    if ((v3 & 2) != 0)
    {
      v6 = *(_QWORD *)(a1 + 88);
      if (!v6)
      {
        sub_19C2CF5C8((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 3182);
        v7 = sub_19C2CF5E0(v15, "CHECK failed: normalizer_spec_ != nullptr: ");
        sub_19C2CF710((uint64_t)&v14, (const char **)&v7->__r_.__value_.__l.__data_);
        sub_19C2CF718((uint64_t)v15);
        v6 = *(_QWORD *)(a1 + 88);
      }
      result = (uint64_t)sub_19C2C5CA0(v6);
    }
    if ((v3 & 4) != 0)
    {
      v8 = *(_QWORD *)(a1 + 96);
      if (!v8)
      {
        sub_19C2CF5C8((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 3186);
        v9 = sub_19C2CF5E0(v15, "CHECK failed: self_test_data_ != nullptr: ");
        sub_19C2CF710((uint64_t)&v14, (const char **)&v9->__r_.__value_.__l.__data_);
        sub_19C2CF718((uint64_t)v15);
        v8 = *(_QWORD *)(a1 + 96);
      }
      result = sub_19C2C6F98(v8);
    }
    if ((v3 & 8) != 0)
    {
      v10 = *(_QWORD *)(a1 + 104);
      if (!v10)
      {
        sub_19C2CF5C8((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 3190);
        v11 = sub_19C2CF5E0(v15, "CHECK failed: denormalizer_spec_ != nullptr: ");
        sub_19C2CF710((uint64_t)&v14, (const char **)&v11->__r_.__value_.__l.__data_);
        sub_19C2CF718((uint64_t)v15);
        v10 = *(_QWORD *)(a1 + 104);
      }
      result = (uint64_t)sub_19C2C5CA0(v10);
    }
  }
  *(_DWORD *)(a1 + 48) = 0;
  v12 = *(_QWORD *)(a1 + 8);
  if ((v12 & 1) != 0)
  {
    v13 = v12 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v13 + 31) < 0)
    {
      **(_BYTE **)(v13 + 8) = 0;
      *(_QWORD *)(v13 + 16) = 0;
    }
    else
    {
      *(_BYTE *)(v13 + 8) = 0;
      *(_BYTE *)(v13 + 31) = 0;
    }
  }
  return result;
}

void sub_19C2C8310(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_19C2C8340(uint64_t a1, char *a2, int32x2_t *a3)
{
  _QWORD *v6;
  char *v7;
  unsigned int v8;
  unsigned int v9;
  char *v10;
  unsigned __int8 *v11;
  int *v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  char *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  BOOL v26;
  char *v27;
  unsigned int v28;
  std::string *v29;
  char *v30;

  v30 = a2;
  if ((sub_19C2C1250((uint64_t)a3, &v30, a3[11].i32[1]) & 1) == 0)
  {
    v6 = (_QWORD *)(a1 + 8);
    while (2)
    {
      v7 = v30 + 1;
      v8 = *v30;
      if (*v30 < 0)
      {
        v9 = v8 + (*v7 << 7);
        v8 = v9 - 128;
        if (*v7 < 0)
        {
          v27 = (char *)sub_19C2DBBE0((uint64_t)v30, v9 - 128);
          v30 = v27;
          if (!v27)
            return 0;
          v7 = v27;
          v8 = v28;
LABEL_8:
          switch(v8 >> 3)
          {
            case 1u:
              if (v8 != 10)
                goto LABEL_49;
              v10 = v7 - 1;
              break;
            case 2u:
              if (v8 != 18)
                goto LABEL_49;
              *(_DWORD *)(a1 + 48) |= 1u;
              v18 = *(_QWORD *)(a1 + 80);
              if (!v18)
              {
                v19 = (_QWORD *)(*v6 & 0xFFFFFFFFFFFFFFFELL);
                if ((*v6 & 1) != 0)
                  v19 = (_QWORD *)*v19;
                v18 = sub_19C2C9424((uint64_t)v19);
                *(_QWORD *)(a1 + 80) = v18;
                v7 = v30;
              }
              v20 = (char *)sub_19C2C877C(a3, v18, (unsigned __int8 *)v7);
              goto LABEL_46;
            case 3u:
              if (v8 != 26)
                goto LABEL_49;
              *(_DWORD *)(a1 + 48) |= 2u;
              v21 = *(_QWORD *)(a1 + 88);
              if (v21)
                goto LABEL_45;
              v22 = (_QWORD *)(*v6 & 0xFFFFFFFFFFFFFFFELL);
              if ((*v6 & 1) != 0)
                v22 = (_QWORD *)*v22;
              v21 = sub_19C2C94D8((uint64_t)v22);
              *(_QWORD *)(a1 + 88) = v21;
              goto LABEL_44;
            case 4u:
              if (v8 != 34)
                goto LABEL_49;
              *(_DWORD *)(a1 + 48) |= 4u;
              v23 = *(_QWORD *)(a1 + 96);
              if (!v23)
              {
                v24 = (_QWORD *)(*v6 & 0xFFFFFFFFFFFFFFFELL);
                if ((*v6 & 1) != 0)
                  v24 = (_QWORD *)*v24;
                v23 = sub_19C2C9698((uint64_t)v24);
                *(_QWORD *)(a1 + 96) = v23;
                v7 = v30;
              }
              v20 = (char *)sub_19C2C8904(a3, v23, v7);
              goto LABEL_46;
            case 5u:
              if (v8 != 42)
                goto LABEL_49;
              *(_DWORD *)(a1 + 48) |= 8u;
              v21 = *(_QWORD *)(a1 + 104);
              if (v21)
                goto LABEL_45;
              v25 = (_QWORD *)(*v6 & 0xFFFFFFFFFFFFFFFELL);
              if ((*v6 & 1) != 0)
                v25 = (_QWORD *)*v25;
              v21 = sub_19C2C94D8((uint64_t)v25);
              *(_QWORD *)(a1 + 104) = v21;
LABEL_44:
              v7 = v30;
LABEL_45:
              v20 = (char *)sub_19C2C8840(a3, v21, (unsigned __int8 *)v7);
              goto LABEL_46;
            default:
LABEL_49:
              if (v8)
                v26 = (v8 & 7) == 4;
              else
                v26 = 1;
              if (v26)
              {
                a3[10].i32[0] = v8 - 1;
                return v30;
              }
              if (v8 < 0x640)
              {
                if ((*v6 & 1) != 0)
                {
                  v29 = (std::string *)((*v6 & 0xFFFFFFFFFFFFFFFELL) + 8);
                }
                else
                {
                  v29 = (std::string *)sub_19C2C138C((unint64_t *)(a1 + 8));
                  v7 = v30;
                }
                v20 = (char *)sub_19C2DC0C0(v8, v29, v7, a3);
              }
              else
              {
                v20 = (char *)sub_19C2D4BD0((uint64_t *)(a1 + 24), v8, (unsigned __int8 *)v7, (uint64_t)&unk_1EE41C5F0, (unint64_t *)(a1 + 8), a3);
              }
LABEL_46:
              v30 = v20;
              if (!v20)
                return 0;
LABEL_47:
              if ((sub_19C2C1250((uint64_t)a3, &v30, a3[11].i32[1]) & 1) != 0)
                return v30;
              continue;
          }
          while (1)
          {
            v11 = (unsigned __int8 *)(v10 + 1);
            v30 = v10 + 1;
            v12 = *(int **)(a1 + 72);
            if (!v12)
              break;
            v13 = *(int *)(a1 + 64);
            v14 = *v12;
            if ((int)v13 >= *v12)
            {
              if (v14 == *(_DWORD *)(a1 + 68))
              {
LABEL_16:
                sub_19C2E0CEC(a1 + 56, v14 + 1);
                v12 = *(int **)(a1 + 72);
                v14 = *v12;
              }
              *v12 = v14 + 1;
              v15 = sub_19C2C974C(*(_QWORD *)(a1 + 56));
              v16 = *(_QWORD *)(a1 + 72);
              v17 = *(int *)(a1 + 64);
              *(_DWORD *)(a1 + 64) = v17 + 1;
              *(_QWORD *)(v16 + 8 * v17 + 8) = v15;
              v11 = (unsigned __int8 *)v30;
              goto LABEL_18;
            }
            *(_DWORD *)(a1 + 64) = v13 + 1;
            v15 = *(_QWORD **)&v12[2 * v13 + 2];
LABEL_18:
            v10 = (char *)sub_19C2C86B8(a3, (uint64_t)v15, v11);
            v30 = v10;
            if (!v10)
              return 0;
            if (*(_QWORD *)a3 <= (unint64_t)v10 || *v10 != 10)
              goto LABEL_47;
          }
          v14 = *(_DWORD *)(a1 + 68);
          goto LABEL_16;
        }
        v7 = v30 + 2;
      }
      break;
    }
    v30 = v7;
    goto LABEL_8;
  }
  return v30;
}

uint64_t sub_19C2C86B8(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t result;
  unsigned int v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  int v15;

  v6 = (char)*a3;
  v7 = *a3;
  if (v6 < 0)
  {
    result = sub_19C2DBC24((uint64_t)a3, v7);
    if (!result)
      return result;
    v8 = result;
    v7 = v10;
  }
  else
  {
    v8 = (uint64_t)(a3 + 1);
  }
  v11 = sub_19C2C1670((uint64_t)a1, v8, v7);
  v12 = a1[11].i32[0];
  v13 = __OFSUB__(v12--, 1);
  a1[11].i32[0] = v12;
  if (v12 < 0 != v13)
    return 0;
  v14 = v11;
  result = sub_19C2C7874(a2, v8, a1);
  if (!result)
    return result;
  ++a1[11].i32[0];
  if (a1[10].i32[0])
    return 0;
  v15 = a1[3].i32[1] + v14;
  a1[3].i32[1] = v15;
  *a1 = (int32x2_t)(*(_QWORD *)&a1[1] + (v15 & (v15 >> 31)));
  return result;
}

uint64_t sub_19C2C877C(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t result;
  unsigned int v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  int v15;

  v6 = (char)*a3;
  v7 = *a3;
  if (v6 < 0)
  {
    result = sub_19C2DBC24((uint64_t)a3, v7);
    if (!result)
      return result;
    v8 = result;
    v7 = v10;
  }
  else
  {
    v8 = (uint64_t)(a3 + 1);
  }
  v11 = sub_19C2C1670((uint64_t)a1, v8, v7);
  v12 = a1[11].i32[0];
  v13 = __OFSUB__(v12--, 1);
  a1[11].i32[0] = v12;
  if (v12 < 0 != v13)
    return 0;
  v14 = v11;
  result = (uint64_t)sub_19C2C24F0(a2, v8, a1);
  if (!result)
    return result;
  ++a1[11].i32[0];
  if (a1[10].i32[0])
    return 0;
  v15 = a1[3].i32[1] + v14;
  a1[3].i32[1] = v15;
  *a1 = (int32x2_t)(*(_QWORD *)&a1[1] + (v15 & (v15 >> 31)));
  return result;
}

uint64_t sub_19C2C8840(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t result;
  unsigned int v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  int v15;

  v6 = (char)*a3;
  v7 = *a3;
  if (v6 < 0)
  {
    result = sub_19C2DBC24((uint64_t)a3, v7);
    if (!result)
      return result;
    v8 = result;
    v7 = v10;
  }
  else
  {
    v8 = (uint64_t)(a3 + 1);
  }
  v11 = sub_19C2C1670((uint64_t)a1, v8, v7);
  v12 = a1[11].i32[0];
  v13 = __OFSUB__(v12--, 1);
  a1[11].i32[0] = v12;
  if (v12 < 0 != v13)
    return 0;
  v14 = v11;
  result = sub_19C2C5DAC(a2, v8, a1);
  if (!result)
    return result;
  ++a1[11].i32[0];
  if (a1[10].i32[0])
    return 0;
  v15 = a1[3].i32[1] + v14;
  a1[3].i32[1] = v15;
  *a1 = (int32x2_t)(*(_QWORD *)&a1[1] + (v15 & (v15 >> 31)));
  return result;
}

uint64_t sub_19C2C8904(int32x2_t *a1, uint64_t a2, char *a3)
{
  int v6;
  unsigned int v7;
  char *v8;
  uint64_t result;
  unsigned int v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  int v15;

  v6 = *a3;
  v7 = *a3;
  if (v6 < 0)
  {
    result = sub_19C2DBC24((uint64_t)a3, v7);
    if (!result)
      return result;
    v8 = (char *)result;
    v7 = v10;
  }
  else
  {
    v8 = a3 + 1;
  }
  v11 = sub_19C2C1670((uint64_t)a1, (int)v8, v7);
  v12 = a1[11].i32[0];
  v13 = __OFSUB__(v12--, 1);
  a1[11].i32[0] = v12;
  if (v12 < 0 != v13)
    return 0;
  v14 = v11;
  result = (uint64_t)sub_19C2C6FF0(a2, v8, a1);
  if (!result)
    return result;
  ++a1[11].i32[0];
  if (a1[10].i32[0])
    return 0;
  v15 = a1[3].i32[1] + v14;
  a1[3].i32[1] = v15;
  *a1 = (int32x2_t)(*(_QWORD *)&a1[1] + (v15 & (v15 >> 31)));
  return result;
}

char *sub_19C2C89C8(uint64_t a1, char *a2, unint64_t *a3)
{
  int v6;
  int i;
  uint64_t v8;
  unsigned int v9;
  char *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  char *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  char *v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  char *v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  unsigned int v34;
  char *v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  char *v39;
  char *v40;
  uint64_t v41;
  unint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;

  v6 = *(_DWORD *)(a1 + 64);
  if (v6)
  {
    for (i = 0; i != v6; ++i)
    {
      if (*a3 <= (unint64_t)a2)
        a2 = sub_19C2CEBA4((uint64_t)a3, a2);
      v8 = sub_19C2A0B8C(a1 + 56, i);
      *a2 = 10;
      v9 = *(_DWORD *)(v8 + 44);
      if (v9 > 0x7F)
      {
        a2[1] = v9 | 0x80;
        v11 = v9 >> 7;
        if (v9 >> 14)
        {
          v10 = a2 + 3;
          do
          {
            *(v10 - 1) = v11 | 0x80;
            v12 = v11 >> 7;
            ++v10;
            v13 = v11 >> 14;
            v11 >>= 7;
          }
          while (v13);
          *(v10 - 1) = v12;
        }
        else
        {
          a2[2] = v11;
          v10 = a2 + 3;
        }
      }
      else
      {
        a2[1] = v9;
        v10 = a2 + 2;
      }
      a2 = sub_19C2C7AF8(v8, v10, a3);
    }
  }
  v14 = *(_DWORD *)(a1 + 48);
  if ((v14 & 1) != 0)
  {
    if (*a3 <= (unint64_t)a2)
      a2 = sub_19C2CEBA4((uint64_t)a3, a2);
    v15 = *(_QWORD *)(a1 + 80);
    *a2 = 18;
    v16 = *(_DWORD *)(v15 + 48);
    if (v16 > 0x7F)
    {
      a2[1] = v16 | 0x80;
      v18 = v16 >> 7;
      if (v16 >> 14)
      {
        v17 = a2 + 3;
        do
        {
          *(v17 - 1) = v18 | 0x80;
          v19 = v18 >> 7;
          ++v17;
          v20 = v18 >> 14;
          v18 >>= 7;
        }
        while (v20);
        *(v17 - 1) = v19;
      }
      else
      {
        a2[2] = v18;
        v17 = a2 + 3;
      }
    }
    else
    {
      a2[1] = v16;
      v17 = a2 + 2;
    }
    a2 = sub_19C2C3A08(v15, v17, (uint64_t *)a3);
    if ((v14 & 2) == 0)
    {
LABEL_15:
      if ((v14 & 4) == 0)
        goto LABEL_16;
      goto LABEL_38;
    }
  }
  else if ((v14 & 2) == 0)
  {
    goto LABEL_15;
  }
  if (*a3 <= (unint64_t)a2)
    a2 = sub_19C2CEBA4((uint64_t)a3, a2);
  v21 = *(_QWORD *)(a1 + 88);
  *a2 = 26;
  v22 = *(_DWORD *)(v21 + 52);
  if (v22 > 0x7F)
  {
    a2[1] = v22 | 0x80;
    v24 = v22 >> 7;
    if (v22 >> 14)
    {
      v23 = a2 + 3;
      do
      {
        *(v23 - 1) = v24 | 0x80;
        v25 = v24 >> 7;
        ++v23;
        v26 = v24 >> 14;
        v24 >>= 7;
      }
      while (v26);
      *(v23 - 1) = v25;
    }
    else
    {
      a2[2] = v24;
      v23 = a2 + 3;
    }
  }
  else
  {
    a2[1] = v22;
    v23 = a2 + 2;
  }
  a2 = sub_19C2C61A8(v21, v23, a3);
  if ((v14 & 4) == 0)
  {
LABEL_16:
    if ((v14 & 8) == 0)
      goto LABEL_58;
    goto LABEL_48;
  }
LABEL_38:
  if (*a3 <= (unint64_t)a2)
    a2 = sub_19C2CEBA4((uint64_t)a3, a2);
  v27 = *(_QWORD *)(a1 + 96);
  *a2 = 34;
  v28 = *(_DWORD *)(v27 + 64);
  if (v28 > 0x7F)
  {
    a2[1] = v28 | 0x80;
    v30 = v28 >> 7;
    if (v28 >> 14)
    {
      v29 = a2 + 3;
      do
      {
        *(v29 - 1) = v30 | 0x80;
        v31 = v30 >> 7;
        ++v29;
        v32 = v30 >> 14;
        v30 >>= 7;
      }
      while (v32);
      *(v29 - 1) = v31;
    }
    else
    {
      a2[2] = v30;
      v29 = a2 + 3;
    }
  }
  else
  {
    a2[1] = v28;
    v29 = a2 + 2;
  }
  a2 = sub_19C2C72C8(v27, v29, a3);
  if ((v14 & 8) != 0)
  {
LABEL_48:
    if (*a3 <= (unint64_t)a2)
      a2 = sub_19C2CEBA4((uint64_t)a3, a2);
    v33 = *(_QWORD *)(a1 + 104);
    *a2 = 42;
    v34 = *(_DWORD *)(v33 + 52);
    if (v34 > 0x7F)
    {
      a2[1] = v34 | 0x80;
      v36 = v34 >> 7;
      if (v34 >> 14)
      {
        v35 = a2 + 3;
        do
        {
          *(v35 - 1) = v36 | 0x80;
          v37 = v36 >> 7;
          ++v35;
          v38 = v36 >> 14;
          v36 >>= 7;
        }
        while (v38);
        *(v35 - 1) = v37;
      }
      else
      {
        a2[2] = v36;
        v35 = a2 + 3;
      }
    }
    else
    {
      a2[1] = v34;
      v35 = a2 + 2;
    }
    a2 = sub_19C2C61A8(v33, v35, a3);
  }
LABEL_58:
  v39 = sub_19C2D5804(a1 + 24, 200, 0x20000000, a2, (uint64_t *)a3);
  v40 = v39;
  v41 = *(_QWORD *)(a1 + 8);
  if ((v41 & 1) == 0)
    return v40;
  v43 = v41 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v43 + 31) < 0)
  {
    v44 = *(void **)(v43 + 8);
    v45 = *(_QWORD *)(v43 + 16);
  }
  else
  {
    v44 = (void *)(v43 + 8);
    LODWORD(v45) = *(unsigned __int8 *)(v43 + 31);
  }
  if ((uint64_t)(*a3 - (_QWORD)v39) >= (int)v45)
  {
    v46 = (int)v45;
    memcpy(v39, v44, (int)v45);
    v40 += v46;
    return v40;
  }
  return sub_19C2CECB4((uint64_t *)a3, (char *)v44, v45, (unint64_t)v39);
}

uint64_t sub_19C2C8DC0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;

  v2 = sub_19C2D8398(a1 + 24);
  v3 = *(int *)(a1 + 64);
  v4 = v2 + v3;
  v5 = *(_QWORD *)(a1 + 72);
  if (v5)
    v6 = (uint64_t *)(v5 + 8);
  else
    v6 = 0;
  if ((_DWORD)v3)
  {
    v7 = 8 * v3;
    do
    {
      v8 = *v6++;
      v9 = sub_19C2C7C90(v8);
      v4 += v9 + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6);
      v7 -= 8;
    }
    while (v7);
  }
  v10 = *(_DWORD *)(a1 + 48);
  if ((v10 & 0xF) == 0)
    goto LABEL_13;
  if ((v10 & 1) == 0)
  {
    if ((v10 & 2) == 0)
      goto LABEL_10;
LABEL_16:
    v15 = sub_19C2C63A8(*(_QWORD *)(a1 + 88));
    v4 += v15 + ((9 * (__clz(v15 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v10 & 4) == 0)
    {
LABEL_11:
      if ((v10 & 8) == 0)
        goto LABEL_13;
      goto LABEL_12;
    }
    goto LABEL_17;
  }
  v14 = sub_19C2C4BBC(*(_QWORD *)(a1 + 80));
  v4 += v14 + ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v10 & 2) != 0)
    goto LABEL_16;
LABEL_10:
  if ((v10 & 4) == 0)
    goto LABEL_11;
LABEL_17:
  v16 = sub_19C2C744C(*(_QWORD *)(a1 + 96));
  v4 += v16 + ((9 * (__clz(v16 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v10 & 8) != 0)
  {
LABEL_12:
    v11 = sub_19C2C63A8(*(_QWORD *)(a1 + 104));
    v4 += v11 + ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_13:
  v12 = *(_QWORD *)(a1 + 8);
  if ((v12 & 1) != 0)
  {
    v17 = v12 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v17 + 31) < 0)
      v18 = *(_QWORD *)(v17 + 16);
    else
      v18 = *(unsigned __int8 *)(v17 + 31);
    v4 += v18;
  }
  *(_DWORD *)(a1 + 52) = v4;
  return v4;
}

void sub_19C2C8F48(uint64_t a1, uint64_t (***a2)(), uint64_t a3)
{
  if (*a2 != &off_1E3D33A78)
    sub_19C2C1B24(a1, (uint64_t)a2, a3);
  sub_19C2C8F70(a1, (uint64_t)a2);
}

void sub_19C2C8F70(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  std::string *v9;
  int v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  int v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  uint64_t v20;
  _QWORD *v21;
  void *v22;
  uint64_t v23;
  _QWORD *v24;
  void *v25;
  char v26;
  std::string v27[2];

  if (a2 == a1)
  {
    sub_19C2CF5C8((uint64_t)v27, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 3397);
    v4 = sub_19C2CF5E0(v27, "CHECK failed: (&from) != (this): ");
    sub_19C2CF710((uint64_t)&v26, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_19C2CF718((uint64_t)v27);
  }
  sub_19C2D36CC(a1 + 24, a2 + 24);
  v5 = (_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a2 + 8);
  if ((v6 & 1) != 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    v8 = (v6 & 0xFFFFFFFFFFFFFFFELL) + 8;
    if ((*v5 & 1) != 0)
      v9 = (std::string *)((*v5 & 0xFFFFFFFFFFFFFFFELL) + 8);
    else
      v9 = (std::string *)sub_19C2C138C((unint64_t *)(a1 + 8));
    v10 = *(char *)(v7 + 31);
    if (v10 >= 0)
      v11 = (const std::string::value_type *)v8;
    else
      v11 = *(const std::string::value_type **)(v7 + 8);
    if (v10 >= 0)
      v12 = *(unsigned __int8 *)(v7 + 31);
    else
      v12 = *(_QWORD *)(v7 + 16);
    std::string::append(v9, v11, v12);
  }
  sub_19C2CAA0C(a1 + 56, a2 + 56);
  v13 = *(_DWORD *)(a2 + 48);
  if ((v13 & 0xF) != 0)
  {
    if ((v13 & 1) != 0)
    {
      *(_DWORD *)(a1 + 48) |= 1u;
      v14 = *(_QWORD *)(a1 + 80);
      if (!v14)
      {
        v15 = (_QWORD *)(*v5 & 0xFFFFFFFFFFFFFFFELL);
        if ((*v5 & 1) != 0)
          v15 = (_QWORD *)*v15;
        v14 = sub_19C2C9424((uint64_t)v15);
        *(_QWORD *)(a1 + 80) = v14;
      }
      if (*(_QWORD *)(a2 + 80))
        v16 = *(void **)(a2 + 80);
      else
        v16 = &unk_1EE41C660;
      sub_19C2C5490(v14, (uint64_t)v16);
    }
    if ((v13 & 2) != 0)
    {
      *(_DWORD *)(a1 + 48) |= 2u;
      v17 = *(_QWORD *)(a1 + 88);
      if (!v17)
      {
        v18 = (_QWORD *)(*v5 & 0xFFFFFFFFFFFFFFFELL);
        if ((*v5 & 1) != 0)
          v18 = (_QWORD *)*v18;
        v17 = sub_19C2C94D8((uint64_t)v18);
        *(_QWORD *)(a1 + 88) = v17;
      }
      if (*(_QWORD *)(a2 + 88))
        v19 = *(void **)(a2 + 88);
      else
        v19 = &unk_1EE41C7A8;
      sub_19C2C6534(v17, (uint64_t)v19);
      if ((v13 & 4) == 0)
      {
LABEL_25:
        if ((v13 & 8) == 0)
          return;
        goto LABEL_43;
      }
    }
    else if ((v13 & 4) == 0)
    {
      goto LABEL_25;
    }
    *(_DWORD *)(a1 + 48) |= 4u;
    v20 = *(_QWORD *)(a1 + 96);
    if (!v20)
    {
      v21 = (_QWORD *)(*v5 & 0xFFFFFFFFFFFFFFFELL);
      if ((*v5 & 1) != 0)
        v21 = (_QWORD *)*v21;
      v20 = sub_19C2C9698((uint64_t)v21);
      *(_QWORD *)(a1 + 96) = v20;
    }
    if (*(_QWORD *)(a2 + 96))
      v22 = *(void **)(a2 + 96);
    else
      v22 = &unk_1EE41C840;
    sub_19C2C7520(v20, (uint64_t)v22);
    if ((v13 & 8) != 0)
    {
LABEL_43:
      *(_DWORD *)(a1 + 48) |= 8u;
      v23 = *(_QWORD *)(a1 + 104);
      if (!v23)
      {
        v24 = (_QWORD *)(*v5 & 0xFFFFFFFFFFFFFFFELL);
        if ((*v5 & 1) != 0)
          v24 = (_QWORD *)*v24;
        v23 = sub_19C2C94D8((uint64_t)v24);
        *(_QWORD *)(a1 + 104) = v23;
      }
      if (*(_QWORD *)(a2 + 104))
        v25 = *(void **)(a2 + 104);
      else
        v25 = &unk_1EE41C7A8;
      sub_19C2C6534(v23, (uint64_t)v25);
    }
  }
}

void sub_19C2C9190(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19C2C91A8(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    sub_19C2C8160(a1);
    sub_19C2C8F70(a1, a2);
  }
}

uint64_t sub_19C2C91E0(uint64_t a1)
{
  uint64_t result;
  int v3;
  uint64_t v4;
  std::string *v5;
  uint64_t v6;
  std::string *v7;
  uint64_t v8;
  std::string *v9;
  uint64_t v10;
  std::string *v11;
  char v12;
  std::string v13[2];

  result = sub_19C2D489C(a1 + 24);
  if (!(_DWORD)result)
    return result;
  result = sub_19C2C93C0(a1 + 56);
  if (!(_DWORD)result)
    return result;
  v3 = *(_DWORD *)(a1 + 48);
  if ((v3 & 1) != 0)
  {
    v4 = *(_QWORD *)(a1 + 80);
    if (!v4)
    {
      sub_19C2CF5C8((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.h", 4741);
      v5 = sub_19C2CF5E0(v13, "CHECK failed: !value || trainer_spec_ != nullptr: ");
      sub_19C2CF710((uint64_t)&v12, (const char **)&v5->__r_.__value_.__l.__data_);
      sub_19C2CF718((uint64_t)v13);
      v4 = *(_QWORD *)(a1 + 80);
    }
    result = sub_19C2D489C(v4 + 16);
    if (!(_DWORD)result)
      return result;
    v3 = *(_DWORD *)(a1 + 48);
  }
  if ((v3 & 2) != 0)
  {
    v6 = *(_QWORD *)(a1 + 88);
    if (!v6)
    {
      sub_19C2CF5C8((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.h", 4824);
      v7 = sub_19C2CF5E0(v13, "CHECK failed: !value || normalizer_spec_ != nullptr: ");
      sub_19C2CF710((uint64_t)&v12, (const char **)&v7->__r_.__value_.__l.__data_);
      sub_19C2CF718((uint64_t)v13);
      v6 = *(_QWORD *)(a1 + 88);
    }
    result = sub_19C2D489C(v6 + 24);
    if (!(_DWORD)result)
      return result;
    v3 = *(_DWORD *)(a1 + 48);
  }
  if ((v3 & 4) == 0)
  {
LABEL_18:
    if ((v3 & 8) == 0)
      return 1;
    v10 = *(_QWORD *)(a1 + 104);
    if (!v10)
    {
      sub_19C2CF5C8((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.h", 4990);
      v11 = sub_19C2CF5E0(v13, "CHECK failed: !value || denormalizer_spec_ != nullptr: ");
      sub_19C2CF710((uint64_t)&v12, (const char **)&v11->__r_.__value_.__l.__data_);
      sub_19C2CF718((uint64_t)v13);
      v10 = *(_QWORD *)(a1 + 104);
    }
    result = sub_19C2D489C(v10 + 24);
    if ((_DWORD)result)
      return 1;
    return result;
  }
  v8 = *(_QWORD *)(a1 + 96);
  if (!v8)
  {
    sub_19C2CF5C8((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.h", 4907);
    v9 = sub_19C2CF5E0(v13, "CHECK failed: !value || self_test_data_ != nullptr: ");
    sub_19C2CF710((uint64_t)&v12, (const char **)&v9->__r_.__value_.__l.__data_);
    sub_19C2CF718((uint64_t)v13);
    v8 = *(_QWORD *)(a1 + 96);
  }
  result = sub_19C2D489C(v8 + 16);
  if ((_DWORD)result)
  {
    v3 = *(_DWORD *)(a1 + 48);
    goto LABEL_18;
  }
  return result;
}

void sub_19C2C9390(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_19C2C93C0(uint64_t a1)
{
  int v2;
  int v3;
  BOOL v4;
  uint64_t v5;

  v2 = *(_DWORD *)(a1 + 8);
  do
  {
    v3 = v2;
    v4 = __OFSUB__(v2--, 1);
    if (v2 < 0 != v4)
      break;
    v5 = sub_19C2A0B8C(a1, v2);
  }
  while ((sub_19C2D489C(v5 + 16) & 1) != 0);
  return v3 < 1;
}

_QWORD *sub_19C2C9414@<X0>(_QWORD *a1@<X8>)
{
  return sub_19C2A6D48(a1, "sentencepiece.ModelProto");
}

uint64_t sub_19C2C9424(uint64_t a1)
{
  uint64_t v2;

  if (a1)
  {
    if ((*(_BYTE *)(a1 + 24) & 1) != 0)
      (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), &unk_1E3D31328, 328);
    v2 = sub_19C2CE0C0(a1, 328);
    sub_19C2C1D80(v2, a1);
  }
  else
  {
    v2 = operator new();
    sub_19C2C1D80(v2, 0);
  }
  return v2;
}

void sub_19C2C94B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD355C](v1, 0x10A1C4074230EEALL);
  _Unwind_Resume(a1);
}

uint64_t sub_19C2C94D8(uint64_t a1)
{
  uint64_t v2;

  if (a1)
  {
    if ((*(_BYTE *)(a1 + 24) & 1) != 0)
      (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), &unk_1E3D31378, 88);
    v2 = sub_19C2CE0C0(a1, 88);
    sub_19C2C5A18(v2, a1);
  }
  else
  {
    v2 = operator new();
    sub_19C2C5A18(v2, 0);
  }
  return v2;
}

void sub_19C2C9568(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD355C](v1, 0x10A1C402CDD3876);
  _Unwind_Resume(a1);
}

_QWORD *sub_19C2C958C(uint64_t a1)
{
  _QWORD *v2;

  if (a1)
  {
    if ((*(_BYTE *)(a1 + 24) & 1) != 0)
      (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), &unk_1E3D313D8, 40);
    v2 = (_QWORD *)sub_19C2CE0C0(a1, 40);
    *v2 = &off_1E3D34018;
    v2[1] = a1;
    v2[2] = 0;
    if (atomic_load(dword_1EE41ABC0))
      goto LABEL_7;
  }
  else
  {
    v2 = (_QWORD *)operator new();
    *v2 = &off_1E3D34018;
    v2[1] = 0;
    v2[2] = 0;
    if (atomic_load(dword_1EE41ABC0))
LABEL_7:
      sub_19C2DA308(dword_1EE41ABC0);
  }
  v2[3] = &qword_1EE41C5D8;
  v2[4] = &qword_1EE41C5D8;
  return v2;
}

void sub_19C2C9674(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD355C](v1, 0x1081C400F7E8713);
  _Unwind_Resume(a1);
}

uint64_t sub_19C2C9698(uint64_t a1)
{
  uint64_t v2;

  if (a1)
  {
    if ((*(_BYTE *)(a1 + 24) & 1) != 0)
      (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), &unk_1E3D31340, 72);
    v2 = sub_19C2CE0C0(a1, 72);
    sub_19C2C6E24(v2, a1);
  }
  else
  {
    v2 = operator new();
    sub_19C2C6E24(v2, 0);
  }
  return v2;
}

void sub_19C2C9728(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD355C](v1, 0x10A1C4075D007F8);
  _Unwind_Resume(a1);
}

_QWORD *sub_19C2C974C(uint64_t a1)
{
  _QWORD *v2;

  if (a1)
  {
    if ((*(_BYTE *)(a1 + 24) & 1) != 0)
      (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), &unk_1E3D31430, 64);
    v2 = (_QWORD *)sub_19C2CE0C0(a1, 64);
    sub_19C2C7624(v2, a1);
  }
  else
  {
    v2 = (_QWORD *)operator new();
    sub_19C2C7624(v2, 0);
  }
  return v2;
}

void sub_19C2C97DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD355C](v1, 0x10A1C40F497E4DALL);
  _Unwind_Resume(a1);
}

uint64_t sub_19C2C9800(uint64_t a1)
{
  uint64_t v2;

  if (a1)
  {
    if ((*(_BYTE *)(a1 + 24) & 1) != 0)
      (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), &unk_1E3D312B8, 112);
    v2 = sub_19C2CE0C0(a1, 112);
    sub_19C2C7F00(v2, a1);
  }
  else
  {
    v2 = operator new();
    sub_19C2C7F00(v2, 0);
  }
  return v2;
}

void sub_19C2C9890(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD355C](v1, 0x10A1C4047CE62CFLL);
  _Unwind_Resume(a1);
}

uint64_t sub_19C2C98B4()
{
  return sub_19C2C9424(0);
}

uint64_t sub_19C2C98BC(uint64_t a1, uint64_t a2)
{
  return sub_19C2C9424(a2);
}

uint64_t sub_19C2C98C4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

uint64_t sub_19C2C98CC()
{
  return sub_19C2C94D8(0);
}

uint64_t sub_19C2C98D4(uint64_t a1, uint64_t a2)
{
  return sub_19C2C94D8(a2);
}

uint64_t sub_19C2C98DC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 52);
}

uint64_t sub_19C2C98E4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 80);
}

uint64_t sub_19C2C98EC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 81);
}

uint64_t sub_19C2C98F4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 82);
}

uint64_t sub_19C2C98FC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 83);
}

uint64_t sub_19C2C9904(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 65);
}

uint64_t sub_19C2C990C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 66);
}

uint64_t sub_19C2C9914(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 67);
}

uint64_t sub_19C2C991C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 64);
}

_QWORD *sub_19C2C9924()
{
  return sub_19C2C958C(0);
}

_QWORD *sub_19C2C992C(uint64_t a1, uint64_t a2)
{
  return sub_19C2C958C(a2);
}

uint64_t sub_19C2C9934(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

uint64_t sub_19C2C993C()
{
  return sub_19C2C9698(0);
}

uint64_t sub_19C2C9944(uint64_t a1, uint64_t a2)
{
  return sub_19C2C9698(a2);
}

uint64_t sub_19C2C994C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 64);
}

_QWORD *sub_19C2C9954()
{
  return sub_19C2C974C(0);
}

_QWORD *sub_19C2C995C(uint64_t a1, uint64_t a2)
{
  return sub_19C2C974C(a2);
}

uint64_t sub_19C2C9964(uint64_t a1)
{
  return *(unsigned int *)(a1 + 44);
}

uint64_t sub_19C2C996C()
{
  return sub_19C2C9800(0);
}

uint64_t sub_19C2C9974(uint64_t a1, uint64_t a2)
{
  return sub_19C2C9800(a2);
}

uint64_t sub_19C2C997C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 52);
}

uint64_t sub_19C2C9984(uint64_t a1)
{
  return *(unsigned int *)(a1 + 64);
}

char *sub_19C2C998C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  char *result;

  v1 = *(_QWORD **)(a1 + 80);
  if (!v1)
    v1 = &unk_1EE41C660;
  v2 = v1[22];
  if (v2)
  {
    result = (char *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    result = (char *)atomic_load(&qword_1EE41ADC8);
    if (!result)
      result = (char *)sub_19C2CE1EC(&off_1EE41ADB0);
  }
  if (result[23] < 0)
    return *(char **)result;
  return result;
}

char *sub_19C2C99F4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  char *result;

  v1 = *(_QWORD **)(a1 + 80);
  if (!v1)
    v1 = &unk_1EE41C660;
  v2 = v1[23];
  if (v2)
  {
    result = (char *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    result = (char *)atomic_load(&qword_1EE41AD48);
    if (!result)
      result = (char *)sub_19C2CE1EC(&off_1EE41AD30);
  }
  if (result[23] < 0)
    return *(char **)result;
  return result;
}

char *sub_19C2C9A5C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  char *result;

  v1 = *(_QWORD **)(a1 + 80);
  if (!v1)
    v1 = &unk_1EE41C660;
  v2 = v1[24];
  if (v2)
  {
    result = (char *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    result = (char *)atomic_load(&qword_1EE41AD68);
    if (!result)
      result = (char *)sub_19C2CE1EC(&off_1EE41AD50);
  }
  if (result[23] < 0)
    return *(char **)result;
  return result;
}

char *sub_19C2C9AC4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  char *result;

  v1 = *(_QWORD **)(a1 + 80);
  if (!v1)
    v1 = &unk_1EE41C660;
  v2 = v1[25];
  if (v2)
  {
    result = (char *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    result = (char *)atomic_load(&qword_1EE41AD88);
    if (!result)
      result = (char *)sub_19C2CE1EC(&off_1EE41AD70);
  }
  if (result[23] < 0)
    return *(char **)result;
  return result;
}

char *sub_19C2C9B2C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  char *result;

  v1 = *(_QWORD **)(a1 + 80);
  if (!v1)
    v1 = &unk_1EE41C660;
  v2 = v1[26];
  if (v2)
  {
    result = (char *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    result = (char *)atomic_load(&qword_1EE41ADA8);
    if (!result)
      result = (char *)sub_19C2CE1EC(&off_1EE41AD90);
  }
  if (result[23] < 0)
    return *(char **)result;
  return result;
}

uint64_t sub_19C2C9B94(uint64_t a1)
{
  unsigned __int8 *v1;

  v1 = *(unsigned __int8 **)(a1 + 80);
  if (!v1)
    v1 = (unsigned __int8 *)&unk_1EE41C660;
  return v1[248];
}

uint64_t sub_19C2C9BB0(uint64_t a1)
{
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)&unk_1EE41C660;
  if (*(_QWORD *)(a1 + 80))
    v1 = *(unsigned __int8 **)(a1 + 80);
  return (v1[40] >> 3) & 1;
}

char *sub_19C2C9BD0(uint64_t a1, int a2)
{
  char *result;

  result = (char *)(*(_QWORD *)(sub_19C2A0B8C(a1 + 56, a2) + 48) & 0xFFFFFFFFFFFFFFFELL);
  if (result[23] < 0)
    return *(char **)result;
  return result;
}

float sub_19C2C9C04(uint64_t a1, int a2)
{
  return *(float *)(sub_19C2A0B8C(a1 + 56, a2) + 56);
}

BOOL sub_19C2C9C20(uint64_t a1, int a2)
{
  return *(_DWORD *)(sub_19C2A0B8C(a1 + 56, a2) + 60) == 1;
}

BOOL sub_19C2C9C44(uint64_t a1, int a2)
{
  return *(_DWORD *)(sub_19C2A0B8C(a1 + 56, a2) + 60) == 2;
}

BOOL sub_19C2C9C68(uint64_t a1, int a2)
{
  return *(_DWORD *)(sub_19C2A0B8C(a1 + 56, a2) + 60) == 3;
}

BOOL sub_19C2C9C8C(uint64_t a1, int a2)
{
  return *(_DWORD *)(sub_19C2A0B8C(a1 + 56, a2) + 60) == 5;
}

BOOL sub_19C2C9CB0(uint64_t a1, int a2)
{
  return *(_DWORD *)(sub_19C2A0B8C(a1 + 56, a2) + 60) == 4;
}

BOOL sub_19C2C9CD4(uint64_t a1, int a2)
{
  return *(_DWORD *)(sub_19C2A0B8C(a1 + 56, a2) + 60) == 6;
}

char *sub_19C2C9CF8(uint64_t a1)
{
  char *v1;

  v1 = *(char **)(a1 + 88);
  if (!v1)
    v1 = (char *)&unk_1EE41C7A8;
  return v1 + 16;
}

char *sub_19C2C9D14(uint64_t a1)
{
  char *v1;

  v1 = *(char **)(a1 + 104);
  if (!v1)
    v1 = (char *)&unk_1EE41C7A8;
  return v1 + 16;
}

uint64_t sub_19C2C9D30(uint64_t a1)
{
  _DWORD *v1;
  int v2;
  unsigned int v3;
  unsigned int v4;

  v1 = *(_DWORD **)(a1 + 80);
  if (!v1)
    v1 = &unk_1EE41C660;
  v2 = v1[68];
  v3 = v2 - 2;
  v4 = v2 - 1;
  if (v3 >= 3)
    return 0;
  else
    return v4;
}

uint64_t sub_19C2C9D5C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

char *sub_19C2C9D64(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  char *result;

  v1 = *(_QWORD **)(a1 + 64);
  if (!v1)
    v1 = &unk_1EE41C660;
  v2 = v1[22];
  if (v2)
  {
    result = (char *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    result = (char *)atomic_load(&qword_1EE41ADC8);
    if (!result)
      result = (char *)sub_19C2CE1EC(&off_1EE41ADB0);
  }
  if (result[23] < 0)
    return *(char **)result;
  return result;
}

char *sub_19C2C9DCC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  char *result;

  v1 = *(_QWORD **)(a1 + 64);
  if (!v1)
    v1 = &unk_1EE41C660;
  v2 = v1[23];
  if (v2)
  {
    result = (char *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    result = (char *)atomic_load(&qword_1EE41AD48);
    if (!result)
      result = (char *)sub_19C2CE1EC(&off_1EE41AD30);
  }
  if (result[23] < 0)
    return *(char **)result;
  return result;
}

char *sub_19C2C9E34(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  char *result;

  v1 = *(_QWORD **)(a1 + 64);
  if (!v1)
    v1 = &unk_1EE41C660;
  v2 = v1[24];
  if (v2)
  {
    result = (char *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    result = (char *)atomic_load(&qword_1EE41AD68);
    if (!result)
      result = (char *)sub_19C2CE1EC(&off_1EE41AD50);
  }
  if (result[23] < 0)
    return *(char **)result;
  return result;
}

char *sub_19C2C9E9C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  char *result;

  v1 = *(_QWORD **)(a1 + 64);
  if (!v1)
    v1 = &unk_1EE41C660;
  v2 = v1[25];
  if (v2)
  {
    result = (char *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    result = (char *)atomic_load(&qword_1EE41AD88);
    if (!result)
      result = (char *)sub_19C2CE1EC(&off_1EE41AD70);
  }
  if (result[23] < 0)
    return *(char **)result;
  return result;
}

char *sub_19C2C9F04(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  char *result;

  v1 = *(_QWORD **)(a1 + 64);
  if (!v1)
    v1 = &unk_1EE41C660;
  v2 = v1[26];
  if (v2)
  {
    result = (char *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    result = (char *)atomic_load(&qword_1EE41ADA8);
    if (!result)
      result = (char *)sub_19C2CE1EC(&off_1EE41AD90);
  }
  if (result[23] < 0)
    return *(char **)result;
  return result;
}

uint64_t sub_19C2C9F6C(uint64_t a1)
{
  unsigned __int8 *v1;

  v1 = *(unsigned __int8 **)(a1 + 64);
  if (!v1)
    v1 = (unsigned __int8 *)&unk_1EE41C660;
  return v1[248];
}

uint64_t sub_19C2C9F88(uint64_t a1)
{
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)&unk_1EE41C660;
  if (*(_QWORD *)(a1 + 64))
    v1 = *(unsigned __int8 **)(a1 + 64);
  return (v1[40] >> 3) & 1;
}

uint64_t sub_19C2C9FA8(uint64_t a1)
{
  _DWORD *v1;
  int v2;
  unsigned int v3;
  unsigned int v4;

  v1 = *(_DWORD **)(a1 + 64);
  if (!v1)
    v1 = &unk_1EE41C660;
  v2 = v1[68];
  v3 = v2 - 2;
  v4 = v2 - 1;
  if (v3 >= 3)
    return 0;
  else
    return v4;
}

char *sub_19C2C9FD4(uint64_t a1, int a2)
{
  char *result;

  result = (char *)(*(_QWORD *)(sub_19C2A0B8C(a1 + 40, a2) + 48) & 0xFFFFFFFFFFFFFFFELL);
  if (result[23] < 0)
    return *(char **)result;
  return result;
}

float sub_19C2CA008(uint64_t a1, int a2)
{
  return *(float *)(sub_19C2A0B8C(a1 + 40, a2) + 56);
}

BOOL sub_19C2CA024(uint64_t a1, int a2)
{
  return *(_DWORD *)(sub_19C2A0B8C(a1 + 40, a2) + 60) == 1;
}

BOOL sub_19C2CA048(uint64_t a1, int a2)
{
  return *(_DWORD *)(sub_19C2A0B8C(a1 + 40, a2) + 60) == 2;
}

BOOL sub_19C2CA06C(uint64_t a1, int a2)
{
  return *(_DWORD *)(sub_19C2A0B8C(a1 + 40, a2) + 60) == 3;
}

BOOL sub_19C2CA090(uint64_t a1, int a2)
{
  return *(_DWORD *)(sub_19C2A0B8C(a1 + 40, a2) + 60) == 5;
}

BOOL sub_19C2CA0B4(uint64_t a1, int a2)
{
  return *(_DWORD *)(sub_19C2A0B8C(a1 + 40, a2) + 60) == 4;
}

BOOL sub_19C2CA0D8(uint64_t a1, int a2)
{
  return *(_DWORD *)(sub_19C2A0B8C(a1 + 40, a2) + 60) == 6;
}

char *sub_19C2CA0FC(uint64_t a1)
{
  char *v1;

  v1 = *(char **)(a1 + 72);
  if (!v1)
    v1 = (char *)&unk_1EE41C7A8;
  return v1 + 16;
}

char *sub_19C2CA118(uint64_t a1)
{
  char *v1;

  v1 = *(char **)(a1 + 88);
  if (!v1)
    v1 = (char *)&unk_1EE41C7A8;
  return v1 + 16;
}

void sub_19C2CA134(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t sub_19C2CA148(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    sub_19C2CF5C8((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1705);
    v4 = sub_19C2CF5E0(v8, "CHECK failed: (index) >= (0): ");
    sub_19C2CF710((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_19C2CF718((uint64_t)v8);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    sub_19C2CF5C8((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1706);
    v5 = sub_19C2CF5E0(v8, "CHECK failed: (index) < (current_size_): ");
    sub_19C2CF710((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_19C2CF718((uint64_t)v8);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
}

void sub_19C2CA204(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19C2CA224(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::string *v4;
  char v5;
  std::string v6[2];

  v1 = *(unsigned int *)(result + 8);
  if ((v1 & 0x80000000) != 0)
  {
    sub_19C2CF5C8((uint64_t)v6, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1780);
    v4 = sub_19C2CF5E0(v6, "CHECK failed: (n) >= (0): ");
    sub_19C2CF710((uint64_t)&v5, (const char **)&v4->__r_.__value_.__l.__data_);
    return sub_19C2CF718((uint64_t)v6);
  }
  else if ((_DWORD)v1)
  {
    v2 = *(_QWORD *)(result + 16) + 8;
    do
    {
      v3 = *(_QWORD *)v2;
      if (*(char *)(*(_QWORD *)v2 + 23) < 0)
      {
        **(_BYTE **)v3 = 0;
        *(_QWORD *)(v3 + 8) = 0;
      }
      else
      {
        *(_BYTE *)v3 = 0;
        *(_BYTE *)(v3 + 23) = 0;
      }
      v2 += 8;
      --v1;
    }
    while (v1);
    *(_DWORD *)(result + 8) = 0;
  }
  return result;
}

void sub_19C2CA2CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19C2CA2E4(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    sub_19C2CF5C8((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1705);
    v4 = sub_19C2CF5E0(v8, "CHECK failed: (index) >= (0): ");
    sub_19C2CF710((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_19C2CF718((uint64_t)v8);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    sub_19C2CF5C8((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1706);
    v5 = sub_19C2CF5E0(v8, "CHECK failed: (index) < (current_size_): ");
    sub_19C2CF710((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_19C2CF718((uint64_t)v8);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
}

void sub_19C2CA3A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19C2CA3C0(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  std::string *v5;
  char v6;
  std::string v7[2];

  v1 = *(unsigned int *)(result + 8);
  if ((v1 & 0x80000000) != 0)
  {
    sub_19C2CF5C8((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1780);
    v5 = sub_19C2CF5E0(v7, "CHECK failed: (n) >= (0): ");
    sub_19C2CF710((uint64_t)&v6, (const char **)&v5->__r_.__value_.__l.__data_);
    return sub_19C2CF718((uint64_t)v7);
  }
  else if ((_DWORD)v1)
  {
    v2 = result;
    v3 = (uint64_t *)(*(_QWORD *)(result + 16) + 8);
    do
    {
      v4 = *v3++;
      result = sub_19C2C68A8(v4);
      --v1;
    }
    while (v1);
    *(_DWORD *)(v2 + 8) = 0;
  }
  return result;
}

void sub_19C2CA454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_19C2CA46C(unsigned __int8 *result)
{
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t *v3;
  uint64_t v4;
  std::string *v5;
  char v6;
  std::string v7[2];

  v1 = *((unsigned int *)result + 2);
  if ((v1 & 0x80000000) != 0)
  {
    sub_19C2CF5C8((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1780);
    v5 = sub_19C2CF5E0(v7, "CHECK failed: (n) >= (0): ");
    sub_19C2CF710((uint64_t)&v6, (const char **)&v5->__r_.__value_.__l.__data_);
    return (unsigned __int8 *)sub_19C2CF718((uint64_t)v7);
  }
  else if ((_DWORD)v1)
  {
    v2 = result;
    v3 = (uint64_t *)(*((_QWORD *)result + 2) + 8);
    do
    {
      v4 = *v3++;
      result = sub_19C2C77E0(v4);
      --v1;
    }
    while (v1);
    *((_DWORD *)v2 + 2) = 0;
  }
  return result;
}

void sub_19C2CA500(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19C2CA518(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  std::string *v4;
  int v5;
  const std::string **v6;
  std::string **v7;
  int v8;
  int *v9;
  char v10;
  std::string v11[2];

  v3 = result;
  if (a2 == result)
  {
    sub_19C2CF5C8((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1799);
    v4 = sub_19C2CF5E0(v11, "CHECK failed: (&other) != (this): ");
    sub_19C2CF710((uint64_t)&v10, (const char **)&v4->__r_.__value_.__l.__data_);
    result = sub_19C2CF718((uint64_t)v11);
  }
  v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    v6 = (const std::string **)(*(_QWORD *)(a2 + 16) + 8);
    v7 = (std::string **)sub_19C2E0D00((uint64_t *)v3, v5);
    result = (uint64_t)sub_19C2CA604((std::string *)v3, v7, v6, v5, **(_DWORD **)(v3 + 16) - *(_DWORD *)(v3 + 8));
    v8 = *(_DWORD *)(v3 + 8) + v5;
    *(_DWORD *)(v3 + 8) = v8;
    v9 = *(int **)(v3 + 16);
    if (*v9 < v8)
      *v9 = v8;
  }
  return result;
}

void sub_19C2CA5EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

std::string *sub_19C2CA604(std::string *result, std::string **a2, const std::string **a3, signed int a4, signed int a5)
{
  std::string::__raw *v9;
  uint64_t v10;
  const std::string **v11;
  std::string **v12;
  const std::string *v13;
  const std::string *v14;
  std::string *v15;
  int v16;
  std::string::size_type v17;
  const std::string **v18;
  std::string **v19;
  const std::string *v20;
  std::string *v21;
  std::string *v22;

  v9 = (std::string::__raw *)result;
  if (a5 >= a4)
    v10 = a4;
  else
    v10 = a5;
  if ((int)v10 >= 1)
  {
    v11 = a3;
    v12 = a2;
    do
    {
      v14 = *v11++;
      v13 = v14;
      v15 = *v12++;
      result = std::string::operator=(v15, v13);
      --v10;
    }
    while (v10);
  }
  v16 = a4 - a5;
  if (a4 > a5)
  {
    v17 = v9->__words[0];
    v18 = &a3[a5];
    v19 = &a2[a5];
    do
    {
      v20 = *v18;
      if (v17)
      {
        if ((*(_BYTE *)(v17 + 24) & 1) != 0)
          (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v17 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v17 + 32) + 32), &unk_1E3D33010, 24);
        v21 = (std::string *)sub_19C2CDDDC((unint64_t *)v17, 0x18uLL, (uint64_t)sub_19C2CA134);
      }
      else
      {
        v21 = (std::string *)operator new();
      }
      v22 = v21;
      v21->__r_.__value_.__r.__words[0] = 0;
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      result = std::string::operator=(v21, v20);
      *v19++ = v22;
      ++v18;
      --v16;
    }
    while (v16);
  }
  return result;
}

uint64_t *sub_19C2CA71C(uint64_t *a1)
{
  sub_19C2CA744(a1);
  return sub_19C2C1640(a1);
}

void sub_19C2CA744(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)a1[2];
  if (v2 && !*a1)
  {
    v3 = v2 + 1;
    v4 = *(unsigned int *)v2;
    if ((int)v4 >= 1)
    {
      do
      {
        if (*v3)
        {
          v5 = sub_19C2C672C(*v3);
          MEMORY[0x1A1AD355C](v5, 0x1081C400F7E8713);
        }
        ++v3;
        --v4;
      }
      while (v4);
      v2 = (uint64_t *)a1[2];
    }
    operator delete(v2);
  }
  a1[2] = 0;
}

unint64_t sub_19C2CA7C0(unint64_t result, uint64_t a2)
{
  unint64_t v3;
  std::string *v4;
  unsigned int v5;
  uint64_t *v6;
  unint64_t *v7;
  signed int v8;
  signed int *v9;
  char v10;
  std::string v11[2];

  v3 = result;
  if (a2 == result)
  {
    sub_19C2CF5C8((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1799);
    v4 = sub_19C2CF5E0(v11, "CHECK failed: (&other) != (this): ");
    sub_19C2CF710((uint64_t)&v10, (const char **)&v4->__r_.__value_.__l.__data_);
    result = sub_19C2CF718((uint64_t)v11);
  }
  v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    v6 = (uint64_t *)(*(_QWORD *)(a2 + 16) + 8);
    v7 = (unint64_t *)sub_19C2E0D00((uint64_t *)v3, v5);
    result = sub_19C2CA8AC(v3, v7, v6, v5, **(_DWORD **)(v3 + 16) - *(_DWORD *)(v3 + 8));
    v8 = *(_DWORD *)(v3 + 8) + v5;
    *(_DWORD *)(v3 + 8) = v8;
    v9 = *(signed int **)(v3 + 16);
    if (*v9 < v8)
      *v9 = v8;
  }
  return result;
}

void sub_19C2CA894(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t sub_19C2CA8AC(unint64_t result, unint64_t *a2, uint64_t *a3, unsigned int a4, unsigned int a5)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  unint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  BOOL v16;
  int v17;
  uint64_t v18;
  uint64_t *v19;
  unint64_t *v20;
  uint64_t v21;
  _QWORD *v22;

  v9 = (uint64_t *)result;
  if ((int)a5 >= (int)a4)
    v10 = a4;
  else
    v10 = a5;
  if ((int)v10 >= 1)
  {
    v11 = a3;
    v12 = a2;
    do
    {
      v14 = *v11++;
      v13 = v14;
      v15 = *v12++;
      result = sub_19C2CA958(v13, v15);
      --v10;
    }
    while (v10);
  }
  v16 = __OFSUB__(a4, a5);
  v17 = a4 - a5;
  if (!((v17 < 0) ^ v16 | (v17 == 0)))
  {
    v18 = *v9;
    v19 = &a3[a5];
    v20 = &a2[a5];
    do
    {
      v21 = *v19++;
      v22 = sub_19C2C958C(v18);
      result = sub_19C2CA958(v21, (unint64_t)v22);
      *v20++ = (unint64_t)v22;
      --v17;
    }
    while (v17);
  }
  return result;
}

unint64_t sub_19C2CA958(uint64_t a1, unint64_t a2)
{
  return sub_19C2C6CC4(a2, a1);
}

uint64_t *sub_19C2CA968(uint64_t *a1)
{
  sub_19C2CA990(a1);
  return sub_19C2C1640(a1);
}

void sub_19C2CA990(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)a1[2];
  if (v2 && !*a1)
  {
    v3 = v2 + 1;
    v4 = *(unsigned int *)v2;
    if ((int)v4 >= 1)
    {
      do
      {
        if (*v3)
        {
          v5 = sub_19C2C76A4(*v3);
          MEMORY[0x1A1AD355C](v5, 0x10A1C40F497E4DALL);
        }
        ++v3;
        --v4;
      }
      while (v4);
      v2 = (uint64_t *)a1[2];
    }
    operator delete(v2);
  }
  a1[2] = 0;
}

void sub_19C2CAA0C(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  unsigned int v5;
  uint64_t *v6;
  uint64_t *v7;
  signed int v8;
  signed int *v9;
  char v10;
  std::string v11[2];

  if (a2 == a1)
  {
    sub_19C2CF5C8((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1799);
    v4 = sub_19C2CF5E0(v11, "CHECK failed: (&other) != (this): ");
    sub_19C2CF710((uint64_t)&v10, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_19C2CF718((uint64_t)v11);
  }
  v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    v6 = (uint64_t *)(*(_QWORD *)(a2 + 16) + 8);
    v7 = (uint64_t *)sub_19C2E0D00((uint64_t *)a1, v5);
    sub_19C2CAAF8((uint64_t *)a1, v7, v6, v5, **(_DWORD **)(a1 + 16) - *(_DWORD *)(a1 + 8));
    v8 = *(_DWORD *)(a1 + 8) + v5;
    *(_DWORD *)(a1 + 8) = v8;
    v9 = *(signed int **)(a1 + 16);
    if (*v9 < v8)
      *v9 = v8;
  }
}

void sub_19C2CAAE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19C2CAAF8(uint64_t *a1, uint64_t *a2, uint64_t *a3, unsigned int a4, unsigned int a5)
{
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  int v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  _QWORD *v22;

  if ((int)a5 >= (int)a4)
    v10 = a4;
  else
    v10 = a5;
  if ((int)v10 >= 1)
  {
    v11 = a3;
    v12 = a2;
    do
    {
      v14 = *v11++;
      v13 = v14;
      v15 = *v12++;
      sub_19C2CABA4(v13, v15);
      --v10;
    }
    while (v10);
  }
  v16 = __OFSUB__(a4, a5);
  v17 = a4 - a5;
  if (!((v17 < 0) ^ v16 | (v17 == 0)))
  {
    v18 = *a1;
    v19 = &a3[a5];
    v20 = &a2[a5];
    do
    {
      v21 = *v19++;
      v22 = sub_19C2C974C(v18);
      sub_19C2CABA4(v21, (uint64_t)v22);
      *v20++ = (uint64_t)v22;
      --v17;
    }
    while (v17);
  }
}

void sub_19C2CABA4(uint64_t a1, uint64_t a2)
{
  sub_19C2C7D98(a2, a1);
}

_QWORD *sub_19C2CABB4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, _QWORD *a4@<X8>)
{
  _QWORD *result;
  uint64_t v6;
  char v7;
  _QWORD v8[2];

  v8[0] = a1;
  v8[1] = a2;
  v7 = a3;
  result = sub_19C2CABF8((uint64_t)v8, &v6);
  *a4 = v6;
  return result;
}

_QWORD *sub_19C2CABF8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = (_QWORD *)operator new();
  result = sub_19C2CAC74(v4, *(const char **)a1, *(_QWORD *)(a1 + 8));
  *a2 = v4;
  return result;
}

void sub_19C2CAC50(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD355C](v1, 0xA1C409BE6959DLL);
  _Unwind_Resume(a1);
}

_QWORD *sub_19C2CAC74(_QWORD *a1, const char *a2, uint64_t a3)
{
  uint64_t *v6;
  _QWORD *v7;
  size_t v8;
  int *v9;
  void **v10;
  uint64_t v11;
  void *__p[2];
  unsigned __int8 v14;
  unsigned int v15;
  _QWORD v16[11];
  char v17;
  uint64_t v18;
  _DWORD *v19;

  *a1 = &off_1E3D33C48;
  v6 = a1 + 1;
  sub_19C2CD3C0(a1 + 1);
  if (a3)
  {
    v7 = (_QWORD *)operator new();
    sub_19C2A7908(v7);
  }
  else
  {
    v7 = (_QWORD *)MEMORY[0x1E0DE4948];
  }
  a1[2] = v7;
  if ((*((_BYTE *)v7 + *(_QWORD *)(*v7 - 24) + 32) & 5) != 0)
  {
    v15 = 5;
    sub_19C2A09EC((uint64_t)v16);
    sub_19C2A1B24(v16, (uint64_t)"\"", 1);
    v8 = strlen(a2);
    sub_19C2A1B24(v16, (uint64_t)a2, v8);
    sub_19C2A1B24(v16, (uint64_t)"\": ", 3);
    v9 = __error();
    sub_19C2CB898(*v9);
    if ((v14 & 0x80u) == 0)
      v10 = __p;
    else
      v10 = (void **)__p[0];
    if ((v14 & 0x80u) == 0)
      v11 = v14;
    else
      v11 = (uint64_t)__p[1];
    sub_19C2A1B24(v16, (uint64_t)v10, v11);
    sub_19C29E5C0(&v15, (uint64_t)&v19);
    sub_19C2CD5DC(v6, &v19);
    sub_19C2CD3C8((uint64_t *)&v19);
    if ((char)v14 < 0)
      operator delete(__p[0]);
    v16[0] = *MEMORY[0x1E0DE4F60];
    *(_QWORD *)((char *)v16 + *(_QWORD *)(v16[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
    v16[1] = MEMORY[0x1E0DE4FB8] + 16;
    if (v17 < 0)
      operator delete((void *)v16[9]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x1A1AD34CC](&v18);
  }
  return a1;
}

void sub_19C2CAE4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  uint64_t *v15;
  uint64_t v16;

  sub_19C2CD3C8((uint64_t *)(v16 - 56));
  if (a14 < 0)
    operator delete(__p);
  sub_19C29E64C((uint64_t)&a15);
  sub_19C2CD3C8(v15);
  _Unwind_Resume(a1);
}

void sub_19C2CAEC8(_QWORD *a1)
{
  sub_19C2CB0B4(a1);
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C2CAEEC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_19C2CD5D8(a2, a1 + 8);
}

BOOL sub_19C2CAEF8(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  const std::locale::facet *v4;
  unsigned __int8 v5;
  _QWORD *v6;
  std::locale v8;

  v3 = *(_QWORD **)(a1 + 16);
  std::ios_base::getloc((const std::ios_base *)((char *)v3 + *(_QWORD *)(*v3 - 24)));
  v4 = std::locale::use_facet(&v8, MEMORY[0x1E0DE4A90]);
  v5 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v4->__vftable[2].~facet_0)(v4, 10);
  std::locale::~locale(&v8);
  v6 = sub_19C2CB10C(v3, a2, v5);
  return (*((_BYTE *)v6 + *(_QWORD *)(*v6 - 24) + 32) & 5) == 0;
}

void sub_19C2CAF94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

BOOL sub_19C2CAFA8(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  char v11;

  v2 = *(_QWORD **)(a1 + 16);
  v3 = (_QWORD *)MEMORY[0x1E0DE4948];
  if (v2 == (_QWORD *)MEMORY[0x1E0DE4948])
  {
    if ((int)sub_19C2CB68C() <= 2)
    {
      v11 = 0;
      v4 = sub_19C2A1B24(MEMORY[0x1E0DE4A50], (uint64_t)"filesystem.cc", 13);
      sub_19C2A1B24(v4, (uint64_t)"(", 1);
      v5 = (_QWORD *)std::ostream::operator<<();
      v6 = sub_19C2A1B24(v5, (uint64_t)") ", 2);
      v7 = sub_19C2A1B24(v6, (uint64_t)"LOG(", 4);
      v8 = sub_19C2A1B24(v7, (uint64_t)"ERROR", 5);
      v9 = sub_19C2A1B24(v8, (uint64_t)") ", 2);
      sub_19C2A1B24(v9, (uint64_t)"ReadAll is not supported for stdin.", 35);
      sub_19C2A0AD8(&v11);
    }
  }
  else
  {
    sub_19C2CB290(a2, *(_QWORD **)((char *)v2 + *(_QWORD *)(*v2 - 24) + 40), 0);
  }
  return v2 != v3;
}

void sub_19C2CB0A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_19C2A0AD8(&a13);
  _Unwind_Resume(a1);
}

_QWORD *sub_19C2CB0B4(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E3D33C48;
  v2 = a1[2];
  if (v2 != MEMORY[0x1E0DE4948] && v2 != 0)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  sub_19C2CD3C8(a1 + 1);
  return a1;
}

_QWORD *sub_19C2CB10C(_QWORD *a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v6;
  _QWORD *v7;
  _BYTE *v8;
  int v9;
  char v11;

  MEMORY[0x1A1AD3268](&v11, a1, 1);
  if (!v11)
    return a1;
  if (*(char *)(a2 + 23) < 0)
  {
    **(_BYTE **)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 23) = 0;
  }
  v6 = 0;
  while (1)
  {
    v7 = *(_QWORD **)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
    v8 = (_BYTE *)v7[3];
    if (v8 != (_BYTE *)v7[4])
    {
      v7[3] = v8 + 1;
      LOBYTE(v7) = *v8;
      goto LABEL_9;
    }
    LODWORD(v7) = (*(uint64_t (**)(_QWORD *))(*v7 + 80))(v7);
    if ((_DWORD)v7 == -1)
      break;
LABEL_9:
    if (v7 == a3)
    {
      v9 = 0;
      goto LABEL_17;
    }
    std::string::push_back((std::string *)a2, (std::string::value_type)v7);
    --v6;
    if (*(char *)(a2 + 23) < 0 && *(_QWORD *)(a2 + 8) == 0x7FFFFFFFFFFFFFF7)
    {
      v9 = 4;
      goto LABEL_17;
    }
  }
  if (v6)
    v9 = 2;
  else
    v9 = 6;
LABEL_17:
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | v9);
  return a1;
}

void sub_19C2CB238(void *a1)
{
  _QWORD *v1;
  uint64_t v2;

  __cxa_begin_catch(a1);
  v2 = *v1;
  *(_DWORD *)((char *)v1 + *(_QWORD *)(*v1 - 24) + 32) |= 1u;
  if ((*((_BYTE *)v1 + *(_QWORD *)(v2 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x19C2CB204);
  }
  __cxa_rethrow();
}

void sub_19C2CB27C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_19C2CB290(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  std::string *p_p;
  std::string::size_type size;
  std::string __p;

  sub_19C2CB30C(&__p, a2, a3);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  MEMORY[0x1A1AD31B4](a1, p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_19C2CB2F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C2CB30C(std::string *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t result;
  std::string::value_type *v5;
  std::string::value_type v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;

  v8 = a3;
  v9 = a2;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = 0;
  while (1)
  {
    result = sub_19C2CB3D8(&v9, &v8);
    if ((result & 1) != 0)
      break;
    v5 = (std::string::value_type *)v9[3];
    if (v5 == (std::string::value_type *)v9[4])
      v6 = (*(uint64_t (**)(_QWORD *))(*v9 + 72))(v9);
    else
      v6 = *v5;
    std::string::push_back(a1, v6);
    v7 = v9[3];
    if (v7 == v9[4])
      (*(void (**)(_QWORD *))(*v9 + 80))(v9);
    else
      v9[3] = v7 + 1;
  }
  return result;
}

void sub_19C2CB3A8(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  __cxa_rethrow();
}

void sub_19C2CB3C4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_19C2CB3D8(_QWORD **a1, _QWORD **a2)
{
  _QWORD *v4;
  _BOOL4 v5;
  _QWORD *v6;
  _BOOL4 v7;

  v4 = *a1;
  if (v4)
  {
    if (v4[3] != v4[4])
    {
      v5 = 0;
      goto LABEL_8;
    }
    if ((*(unsigned int (**)(_QWORD *))(*v4 + 72))(v4) != -1)
    {
      v5 = *a1 == 0;
      goto LABEL_8;
    }
    *a1 = 0;
  }
  v5 = 1;
LABEL_8:
  v6 = *a2;
  if (!*a2)
    goto LABEL_14;
  if (v6[3] == v6[4])
  {
    if ((*(unsigned int (**)(_QWORD *))(*v6 + 72))(v6) != -1)
    {
      v7 = *a2 == 0;
      return v5 ^ v7 ^ 1u;
    }
    *a2 = 0;
LABEL_14:
    v7 = 1;
    return v5 ^ v7 ^ 1u;
  }
  v7 = 0;
  return v5 ^ v7 ^ 1u;
}

_QWORD *sub_19C2CB490(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;

  v2 = MEMORY[0x1E0DE4FB0];
  v3 = MEMORY[0x1E0DE4FB0] + 64;
  a1[52] = MEMORY[0x1E0DE4FB0] + 64;
  v4 = a1 + 1;
  v5 = *(_QWORD *)(MEMORY[0x1E0DE4F48] + 8);
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F48] + 16);
  *a1 = v5;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v5 - 24)) = v6;
  v7 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v7, a1 + 1);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  *a1 = v2 + 24;
  a1[52] = v3;
  MEMORY[0x1A1AD322C](v4);
  if (!std::filebuf::open())
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 4);
  return a1;
}

void sub_19C2CB560(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x1A1AD34CC](v1 + 416);
  _Unwind_Resume(a1);
}

uint64_t sub_19C2CB598()
{
  unsigned int v0;
  uint64_t v1;
  std::random_device v3;

  v0 = atomic_load((unsigned int *)&unk_1EE41ADD0);
  if (v0 != -1)
    return atomic_load((unsigned int *)&unk_1EE41ADD0);
  sub_19C2CB61C(&v3);
  v1 = MEMORY[0x1A1AD334C](&v3);
  std::random_device::~random_device(&v3);
  return v1;
}

void sub_19C2CB5F4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, std::random_device a11, std::random_device a12)
{
  unsigned int *v12;

  std::random_device::~random_device(&a11);
  __cxa_begin_catch(a1);
  atomic_load(v12);
  __cxa_end_catch();
  JUMPOUT(0x19C2CB5E0);
}

std::random_device *sub_19C2CB61C(std::random_device *a1)
{
  std::string __token;

  sub_19C2A6D48(&__token, "/dev/urandom");
  std::random_device::random_device(a1, &__token);
  if (SHIBYTE(__token.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__token.__r_.__value_.__l.__data_);
  return a1;
}

void sub_19C2CB670(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C2CB68C()
{
  return atomic_load((unsigned int *)&unk_1EE41C0F8);
}

uint64_t sub_19C2CB69C(unsigned __int8 *a1, uint64_t a2, uint64_t *a3)
{
  int v3;
  uint64_t result;
  unint64_t v5;
  char v6;
  uint64_t v7;
  int v8;
  char v9;
  int v10;
  int v11;
  char v12;
  int v13;

  v3 = (char)*a1;
  if ((v3 & 0x80000000) == 0)
  {
    *a3 = 1;
    return *a1;
  }
  v5 = a2 - (_QWORD)a1;
  if ((unint64_t)(a2 - (_QWORD)a1) >= 2)
  {
    if ((v3 & 0xE0) == 0xC0)
    {
      v6 = a1[1];
      if (v6 <= -65)
      {
        result = v6 & 0x3F | ((v3 & 0x1F) << 6);
        if (result >= 0x80)
        {
          v7 = 2;
LABEL_8:
          *a3 = v7;
          return result;
        }
      }
    }
    else if (v5 >= 3)
    {
      if ((v3 & 0xF0) == 0xE0)
      {
        v8 = (char)a1[1];
        if (v8 <= -65)
        {
          v9 = a1[2];
          if (v9 <= -65)
          {
            result = v9 & 0x3F | ((v8 & 0x3F) << 6) & 0xFFF | ((v3 & 0xF) << 12);
            if (result >= 0x800
              && (((v3 & 0xF) << 12) - 57344 < 0x102000u || result >> 11 <= 0x1A))
            {
              v7 = 3;
              goto LABEL_8;
            }
          }
        }
      }
      else if (v5 >= 4 && (v3 & 0xF8) == 0xF0)
      {
        v10 = (char)a1[1];
        if (v10 <= -65)
        {
          v11 = (char)a1[2];
          if (v11 <= -65)
          {
            v12 = a1[3];
            if (v12 <= -65)
            {
              v13 = ((v3 & 7) << 18) | ((v10 & 0x3F) << 12);
              result = v12 & 0x3F | ((v11 & 0x3F) << 6) | v13;
              if (result >= 0x10000 && (v13 - 57344) < 0x102000)
              {
                v7 = 4;
                goto LABEL_8;
              }
            }
          }
        }
      }
    }
  }
  *a3 = 1;
  return 65533;
}

uint64_t sub_19C2CB7E4()
{
  uint64_t (*v0)(_QWORD);
  _DWORD *v2;
  uint64_t (*v3)(_QWORD);
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;

  v0 = off_1EE41B5E0;
  if ((*(_BYTE *)off_1EE41B5E0(&off_1EE41B5E0) & 1) == 0)
  {
    sub_19C2CB598();
    v2 = (_DWORD *)off_1EE41B5C8(&off_1EE41B5C8);
    *v2 = v4;
    do
    {
      v5 = v3(&off_1EE41B5C8);
      *(_DWORD *)(v5 + 4 * v7) = v6;
    }
    while (v7 != 623);
    *(_QWORD *)(v3(&off_1EE41B5C8) + 2496) = 0;
    *(_BYTE *)v0(&off_1EE41B5E0) = 1;
  }
  return off_1EE41B5C8(&off_1EE41B5C8);
}

uint64_t sub_19C2CB898(int a1)
{
  size_t v1;
  _QWORD *v2;
  _QWORD v4[11];
  char v5;
  uint64_t v6;
  char __strerrbuf[1024];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  strerror_r(a1, __strerrbuf, 0x3FFuLL);
  sub_19C2A09EC((uint64_t)v4);
  v1 = strlen(__strerrbuf);
  v2 = sub_19C2A1B24(v4, (uint64_t)__strerrbuf, v1);
  sub_19C2A1B24(v2, (uint64_t)" Error #", 8);
  std::ostream::operator<<();
  std::stringbuf::str();
  v4[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v4 + *(_QWORD *)(v4[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v4[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v5 < 0)
    operator delete((void *)v4[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A1AD34CC](&v6);
}

void sub_19C2CB9A8(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

unint64_t sub_19C2CB9C4(uint64_t a1, unint64_t a2)
{
  if (!a2)
    sub_19C2CBBBC();
  return (a1 + a2 - 1) / a2 * a2;
}

void sub_19C2CB9E8(std::string *this)
{
  std::string::size_type size;
  std::string::size_type v3;

  LOBYTE(size) = *((_BYTE *)&this->__r_.__value_.__s + 23);
  if ((size & 0x80u) != 0)
    size = this->__r_.__value_.__l.__size_;
  if ((size & 3) != 0)
  {
    do
    {
      std::string::push_back(this, 0);
      LOBYTE(v3) = *((_BYTE *)&this->__r_.__value_.__s + 23);
      if ((v3 & 0x80u) != 0)
        v3 = this->__r_.__value_.__l.__size_;
    }
    while ((v3 & 3) != 0);
  }
}

_QWORD *sub_19C2CBA48@<X0>(_QWORD *a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  _QWORD *v7;
  unsigned int v9;
  _QWORD v10[11];
  char v11;
  uint64_t v12;

  v4 = a1[1];
  v5 = v4 >= a2;
  v6 = v4 - a2;
  if (v5)
  {
    *a1 += a2;
    a1[1] = v6;
    return sub_19C2CD3C0(a3);
  }
  else
  {
    v9 = 13;
    v7 = (_QWORD *)sub_19C2A09EC((uint64_t)v10);
    sub_19C2A1B24(v7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/util.cc", 63);
    sub_19C2A1B24(v10, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_19C2A1B24(v10, (uint64_t)") [", 3);
    sub_19C2A1B24(v10, (uint64_t)"string.size() >= size", 21);
    sub_19C2A1B24(v10, (uint64_t)"] ", 2);
    sub_19C29E5C0(&v9, (uint64_t)a3);
    v10[0] = *MEMORY[0x1E0DE4F60];
    *(_QWORD *)((char *)v10 + *(_QWORD *)(v10[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
    v10[1] = MEMORY[0x1E0DE4FB8] + 16;
    if (v11 < 0)
      operator delete((void *)v10[9]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return (_QWORD *)MEMORY[0x1A1AD34CC](&v12);
  }
}

void sub_19C2CBBA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_19C29E64C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19C2CBBBC()
{
  __assert_rtn("RoundUp", "util.cc", 276, "multiple");
}

uint64_t sub_19C2CBBE4(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)sub_19C2BA3B8(a1);
  *v4 = &off_1E3D345C0;
  v4[1] = a2 + 16;
  sub_19C29EC78((uint64_t)v4);
  return a1;
}

void sub_19C2CBC20(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_19C29E79C(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_19C2CBC38(uint64_t a1, uint64_t a2, _DWORD *a3, unint64_t a4)
{
  _QWORD *result;

  result = (_QWORD *)sub_19C29DAA0(a1, a2, a3, a4);
  *result = &off_1E3D345C0;
  return result;
}

void sub_19C2CBC5C(uint64_t a1)
{
  sub_19C29E79C(a1);
  JUMPOUT(0x1A1AD355CLL);
}

void sub_19C2CBC80(uint64_t *a1@<X0>, _BYTE *a2@<X1>, unint64_t a3@<X2>, _QWORD *a4@<X8>, float a5@<S0>)
{
  int v8;
  int v9;
  int v10;
  char *v11;
  __int128 v12;
  char *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  __int128 v20;
  char *v21;
  char *v22;
  __int128 v23;
  char *v24;
  unint64_t v25;
  int **v26;
  char *v27;
  uint64_t v28;
  int *v29;
  uint64_t v30;
  uint64_t v31;
  int **v32;
  int **v33;
  uint64_t v34;
  uint64_t v35;
  int *v36;
  float v37;
  float v38;
  int **v39;
  int v40;
  uint64_t v41;
  _DWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  char *v48;
  char *v49;
  uint64_t v50;
  _QWORD *v51;
  __int128 *v52;
  uint64_t v53;
  int v54;
  _QWORD *v55;
  _QWORD *v56;
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v69[5];
  uint64_t (**v70)();
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  uint64_t v74;
  _OWORD v75[2];
  int v76;
  void *__p;
  char *v78;
  char *v79;
  void *v80;
  char *v81;
  uint64_t v82;
  _QWORD v83[3];
  _QWORD *v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;

  v87 = *MEMORY[0x1E0C80C00];
  (*(void (**)(uint64_t (***__return_ptr)()))(*a1 + 16))(&v70);
  if (v70)
  {
    sub_19C2CD3C8((uint64_t *)&v70);
LABEL_3:
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return;
  }
  sub_19C2CD3C8((uint64_t *)&v70);
  if (!a3)
    goto LABEL_3;
  v80 = 0;
  v81 = 0;
  v82 = 0;
  __p = 0;
  v78 = 0;
  v79 = 0;
  if (a3 >> 59)
    sub_19C2A18E8();
  v8 = 0;
  __p = operator new(32 * a3);
  v78 = (char *)__p;
  v79 = (char *)__p + 32 * a3;
  memset(v75, 0, sizeof(v75));
  v76 = 1065353216;
  v70 = &off_1E3D34800;
  v71 = 0u;
  v72 = 0u;
  v73 = 0;
  v74 = 256;
  v69[0] = (uint64_t)a1;
  v69[1] = (uint64_t)&v70;
  v69[2] = (uint64_t)&__p;
  v69[3] = (uint64_t)&v80;
  v69[4] = (uint64_t)v75;
  do
  {
    v86 = 0uLL;
    v9 = sub_19C2A6554(a1[2], a2, a3, (BOOL *)&v85 + 8);
    *(_QWORD *)&v86 = a2;
    *((_QWORD *)&v86 + 1) = v9;
    a3 -= v9;
    if (a3)
      v10 = v8 + 1;
    else
      v10 = -1;
    LODWORD(v85) = v8 - 1;
    DWORD1(v85) = v10;
    v11 = v78;
    if (v78 >= v79)
    {
      v14 = (char *)__p;
      v15 = (v78 - (_BYTE *)__p) >> 5;
      v16 = v15 + 1;
      if ((unint64_t)(v15 + 1) >> 59)
        sub_19C2A18E8();
      v17 = v79 - (_BYTE *)__p;
      if ((v79 - (_BYTE *)__p) >> 4 > v16)
        v16 = v17 >> 4;
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFE0)
        v18 = 0x7FFFFFFFFFFFFFFLL;
      else
        v18 = v16;
      if (v18)
      {
        if (v18 >> 59)
          sub_19C2A143C();
        v19 = (char *)operator new(32 * v18);
      }
      else
      {
        v19 = 0;
      }
      v20 = v86;
      v21 = &v19[32 * v15];
      *(_OWORD *)v21 = v85;
      *((_OWORD *)v21 + 1) = v20;
      v22 = v21;
      if (v11 != v14)
      {
        do
        {
          v23 = *((_OWORD *)v11 - 1);
          *((_OWORD *)v22 - 2) = *((_OWORD *)v11 - 2);
          *((_OWORD *)v22 - 1) = v23;
          v22 -= 32;
          v11 -= 32;
        }
        while (v11 != v14);
        v11 = v14;
      }
      v24 = &v19[32 * v18];
      v13 = v21 + 32;
      __p = v22;
      v78 = v21 + 32;
      v79 = v24;
      if (v11)
        operator delete(v11);
    }
    else
    {
      v12 = v86;
      *(_OWORD *)v78 = v85;
      *((_OWORD *)v11 + 1) = v12;
      v13 = v11 + 32;
    }
    a2 += v9;
    ++v8;
    v78 = v13;
  }
  while (a3);
  if (__p == v13)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    goto LABEL_76;
  }
  if ((unint64_t)(v13 - (_BYTE *)__p) >= 0x21)
  {
    v25 = 1;
    do
    {
      sub_19C2CC420(v69, v25 - 1, v25);
      ++v25;
    }
    while (v25 < (v78 - (_BYTE *)__p) >> 5);
  }
  v26 = (int **)v80;
  v27 = v81;
  if (v80 != v81)
  {
    v28 = 0;
    do
    {
      v29 = *v26;
      if (v27 - (char *)v26 >= 9)
      {
        v30 = 0;
        v31 = (v27 - (char *)v26) >> 3;
        v32 = v26;
        do
        {
          v33 = v32;
          v32 += v30 + 1;
          v34 = 2 * v30;
          v30 = (2 * v30) | 1;
          v35 = v34 + 2;
          if (v35 < v31)
          {
            v36 = v32[1];
            v37 = *((float *)*v32 + 2);
            v38 = *((float *)v36 + 2);
            if (v37 < v38 || v37 == v38 && **v32 > *v36)
            {
              ++v32;
              v30 = v35;
            }
          }
          *v33 = *v32;
        }
        while (v30 <= (uint64_t)((unint64_t)(v31 - 2) >> 1));
        v39 = (int **)(v27 - 8);
        if (v32 == v39)
        {
          *v32 = v29;
        }
        else
        {
          *v32 = *v39;
          *v39 = v29;
          sub_19C2CC90C((uint64_t)v26, (uint64_t)(v32 + 1), v32 + 1 - v26);
        }
      }
      v81 -= 8;
      v40 = *v29;
      v41 = *v29;
      v42 = __p;
      v43 = *((_QWORD *)__p + 4 * v41 + 3);
      if (!v43)
        goto LABEL_58;
      v44 = v29[1];
      v45 = *((_QWORD *)__p + 4 * v44 + 3);
      if (!v45)
        goto LABEL_58;
      v46 = v45 + v43;
      if (v46 != *((_QWORD *)v29 + 2))
        goto LABEL_58;
      if (a5 > 0.0)
      {
        if (a5 >= 1.0)
          goto LABEL_58;
        if (!v28)
          v28 = sub_19C2CB7E4();
        v47 = sub_19C2B67A8(v28);
        if (((double)v47 + (double)sub_19C2B67A8(v28) * 4294967300.0) * 5.42101086e-20 + 0.0 < a5)
          goto LABEL_58;
        v42 = __p;
        v40 = *v29;
        v44 = v29[1];
        v41 = *v29;
        v46 = *((_QWORD *)__p + 4 * v44 + 3) + *((_QWORD *)__p + 4 * v41 + 3);
      }
      v48 = (char *)&v42[8 * v41];
      v49 = (char *)&v42[8 * v44];
      *((_QWORD *)v48 + 3) = v46;
      *((_DWORD *)v48 + 1) = *((_DWORD *)v49 + 1);
      v50 = *((unsigned int *)v49 + 1);
      if ((v50 & 0x80000000) == 0)
        v42[8 * v50] = v40;
      *((_QWORD *)v49 + 2) = "";
      *((_QWORD *)v49 + 3) = 0;
      sub_19C2CC420(v69, *((_DWORD *)__p + 8 * v41), v40);
      sub_19C2CC420(v69, *v29, *((_DWORD *)__p + 8 * *v29 + 1));
LABEL_58:
      v26 = (int **)v80;
      v27 = v81;
    }
    while (v80 != v81);
  }
  v84 = 0;
  v51 = operator new(0x20uLL);
  *v51 = &off_1E3D38E20;
  v51[1] = a1;
  v51[2] = v83;
  v51[3] = v75;
  *((_QWORD *)&v86 + 1) = v51;
  sub_19C2CD13C(&v85, v83);
  v52 = (__int128 *)*((_QWORD *)&v86 + 1);
  if (*((__int128 **)&v86 + 1) == &v85)
  {
    v53 = 4;
    v52 = &v85;
  }
  else
  {
    if (!*((_QWORD *)&v86 + 1))
      goto LABEL_65;
    v53 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v52 + 8 * v53))();
LABEL_65:
  v54 = 0;
  v55 = (_QWORD *)MEMORY[0x1E0DE4A50];
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  do
  {
    if (v54 < 0)
    {
      LOBYTE(v85) = 1;
      v56 = sub_19C2A1B24(v55, (uint64_t)"bpe_model.cc", 12);
      sub_19C2A1B24(v56, (uint64_t)"(", 1);
      v57 = (_QWORD *)std::ostream::operator<<();
      v58 = sub_19C2A1B24(v57, (uint64_t)") [", 3);
      v59 = sub_19C2A1B24(v58, (uint64_t)"(index) >= (0)", 14);
      sub_19C2A1B24(v59, (uint64_t)"] ", 2);
      sub_19C2A0AD8(&v85);
    }
    v60 = __p;
    if (v54 >= (int)((unint64_t)(v78 - (_BYTE *)__p) >> 5))
    {
      LOBYTE(v85) = 1;
      v61 = sub_19C2A1B24(v55, (uint64_t)"bpe_model.cc", 12);
      sub_19C2A1B24(v61, (uint64_t)"(", 1);
      v62 = (_QWORD *)std::ostream::operator<<();
      v63 = sub_19C2A1B24(v62, (uint64_t)") [", 3);
      v64 = sub_19C2A1B24(v63, (uint64_t)"(index) < (static_cast<int>(symbols.size()))", 44);
      sub_19C2A1B24(v64, (uint64_t)"] ", 2);
      sub_19C2A0AD8(&v85);
      v60 = __p;
    }
    sub_19C2CC830((uint64_t)v83, v60[4 * v54 + 2], v60[4 * v54 + 3], (uint64_t)a4);
    v54 = *((_DWORD *)__p + 8 * v54 + 1);
  }
  while (v54 != -1);
  v65 = v84;
  if (v84 == v83)
  {
    v66 = 4;
    v65 = v83;
    goto LABEL_75;
  }
  if (v84)
  {
    v66 = 5;
LABEL_75:
    (*(void (**)(void))(*v65 + 8 * v66))();
  }
LABEL_76:
  sub_19C2CC870(&v70);
  sub_19C2B95F8((uint64_t)v75);
  if (__p)
  {
    v78 = (char *)__p;
    operator delete(__p);
  }
  if (v80)
  {
    v81 = (char *)v80;
    operator delete(v80);
  }
}

void sub_19C2CC360(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,void *a32,uint64_t a33)
{
  sub_19C2CC870(&a16);
  sub_19C2B95F8((uint64_t)&a23);
  if (__p)
  {
    a30 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a32)
  {
    a33 = (uint64_t)a32;
    operator delete(a32);
  }
  _Unwind_Resume(a1);
}

__n128 sub_19C2CC420(uint64_t *a1, int a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  unsigned __int8 *v20;
  int v21;
  unsigned int v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  void *v28;
  unint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  void *v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  unint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  uint64_t *v54;
  char *v55;
  uint64_t v56;
  __n128 result;
  uint64_t v58;
  uint64_t v59;
  __n128 *v60;
  void *v61;
  unsigned int v62;
  uint64_t v63;
  __n128 v64;
  __n128 v65;
  _QWORD v66[2];
  _OWORD *v67;

  if (a2 == -1)
    return result;
  if (a3 == -1)
    return result;
  v6 = a2;
  v7 = *(_QWORD *)a1[2];
  if (*(_BYTE *)(v7 + 32 * a2 + 8))
    return result;
  v8 = a3;
  v9 = v7 + 32 * a3;
  if (*(_BYTE *)(v9 + 8))
    return result;
  v10 = *a1;
  v11 = v7 + 32 * a2;
  v12 = *(_BYTE **)(v11 + 16);
  v13 = *(_QWORD *)(v9 + 24) + *(_QWORD *)(v11 + 24);
  v66[0] = v12;
  v66[1] = v13;
  v14 = *(unsigned int **)(v10 + 40);
  v15 = *v14;
  if (v13)
  {
    v16 = 0;
    v17 = v13;
    while (1)
    {
      v18 = *v12++;
      v16 ^= (v15 >> 10 << ((v15 >> 6) & 8)) ^ v18;
      v15 = v14[v16];
      if ((v15 & 0x800000FF) != v18)
        return result;
      if (!--v17)
        goto LABEL_17;
    }
  }
  v19 = *v12;
  if (*v12)
  {
    v16 = 0;
    v20 = v12 + 1;
    while (1)
    {
      v16 ^= (v15 >> 10 << ((v15 >> 6) & 8)) ^ v19;
      v15 = v14[v16];
      if ((v15 & 0x800000FF) != v19)
        return result;
      v21 = *v20++;
      v19 = v21;
      if (!v21)
        goto LABEL_17;
    }
  }
  v16 = 0;
LABEL_17:
  if ((v15 & 0x100) != 0)
  {
    v22 = v14[v16 ^ (v15 >> 10 << ((v15 >> 6) & 8))];
    v23 = (_QWORD *)a1[1];
    v24 = v23[5];
    v25 = v23[6];
    v26 = v23[4];
    if (v26 >= v25)
    {
      v26 = 0;
      ++v24;
      v23[4] = 0;
      v23[5] = v24;
    }
    v27 = v23[1];
    v63 = v10;
    if (v24 == (v23[2] - v27) >> 3)
    {
      v62 = v22;
      is_mul_ok(v25, 0x18uLL);
      v28 = (void *)operator new[]();
      bzero(v28, 24 * v23[6]);
      v30 = (_QWORD *)v23[2];
      v29 = v23[3];
      if ((unint64_t)v30 >= v29)
      {
        v61 = v28;
        v32 = (_QWORD *)v23[1];
        v33 = v30 - v32;
        v34 = v33 + 1;
        if ((unint64_t)(v33 + 1) >> 61)
          goto LABEL_60;
        v35 = v29 - (_QWORD)v32;
        if (v35 >> 2 > v34)
          v34 = v35 >> 2;
        if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8)
          v36 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v36 = v34;
        v37 = v61;
        if (v36)
        {
          if (v36 >> 61)
            goto LABEL_61;
          v38 = (char *)operator new(8 * v36);
          v33 = v30 - v32;
          v37 = v61;
        }
        else
        {
          v38 = 0;
        }
        v39 = &v38[8 * v33];
        v40 = &v38[8 * v36];
        *(_QWORD *)v39 = v37;
        v31 = v39 + 8;
        if (v30 != v32)
        {
          do
          {
            v41 = *--v30;
            *((_QWORD *)v39 - 1) = v41;
            v39 -= 8;
          }
          while (v30 != v32);
          v30 = (_QWORD *)v23[1];
        }
        v23[1] = v39;
        v23[2] = v31;
        v23[3] = v40;
        v22 = v62;
        if (v30)
          operator delete(v30);
      }
      else
      {
        *v30 = v28;
        v31 = v30 + 1;
        v22 = v62;
      }
      v23[2] = v31;
      v27 = v23[1];
      v26 = v23[4];
      v24 = v23[5];
      v10 = v63;
    }
    v42 = *(_QWORD *)(v27 + 8 * v24) + 24 * v26;
    v23[4] = v26 + 1;
    *(_DWORD *)v42 = a2;
    *(_DWORD *)(v42 + 4) = a3;
    v43 = v22 & 0x7FFFFFFF;
    *(float *)(v42 + 8) = (*(float (**)(uint64_t))(*(_QWORD *)v10 + 136))(v10);
    *(_QWORD *)(v42 + 16) = v13;
    v44 = (uint64_t *)a1[3];
    v46 = (_QWORD *)v44[1];
    v45 = v44[2];
    if ((unint64_t)v46 < v45)
    {
      *v46 = v42;
      v47 = (uint64_t)(v46 + 1);
LABEL_58:
      v44[1] = v47;
      sub_19C2CC90C(*v44, v47, (v47 - *v44) >> 3);
      if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(v10 + 8) + 128))(*(_QWORD *)(v10 + 8), v43))
      {
        v58 = *(_QWORD *)a1[2];
        v64 = *(__n128 *)(v58 + 32 * v6 + 16);
        v65 = *(__n128 *)(v58 + 32 * v8 + 16);
        v59 = a1[4];
        v67 = v66;
        v60 = (__n128 *)sub_19C2CC9A4(v59, (uint64_t)v66, (uint64_t)&unk_19C46CDC2, &v67);
        result = v64;
        v60[2] = v64;
        v60[3] = v65;
      }
      return result;
    }
    v48 = *v44;
    v49 = ((uint64_t)v46 - *v44) >> 3;
    v50 = v49 + 1;
    if (!((unint64_t)(v49 + 1) >> 61))
    {
      v51 = v45 - v48;
      if (v51 >> 2 > v50)
        v50 = v51 >> 2;
      if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF8)
        v52 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v52 = v50;
      if (!v52)
      {
        v53 = 0;
        goto LABEL_51;
      }
      if (!(v52 >> 61))
      {
        v53 = (char *)operator new(8 * v52);
LABEL_51:
        v54 = (uint64_t *)&v53[8 * v49];
        v55 = &v53[8 * v52];
        *v54 = v42;
        v47 = (uint64_t)(v54 + 1);
        if (v46 == (_QWORD *)v48)
        {
          v10 = v63;
        }
        else
        {
          v10 = v63;
          do
          {
            v56 = *--v46;
            *--v54 = v56;
          }
          while (v46 != (_QWORD *)v48);
          v46 = (_QWORD *)*v44;
        }
        *v44 = (uint64_t)v54;
        v44[1] = v47;
        v44[2] = (uint64_t)v55;
        if (v46)
          operator delete(v46);
        goto LABEL_58;
      }
LABEL_61:
      sub_19C2A143C();
    }
LABEL_60:
    sub_19C2A18E8();
  }
  return result;
}

uint64_t sub_19C2CC830(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v7[2];

  v7[0] = a2;
  v7[1] = a3;
  v6 = a4;
  v4 = *(_QWORD *)(a1 + 24);
  if (!v4)
    sub_19C2CCC60();
  return (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t *))(*(_QWORD *)v4 + 48))(v4, v7, &v6);
}

_QWORD *sub_19C2CC870(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  *a1 = &off_1E3D34800;
  v2 = (_QWORD *)a1[1];
  v3 = (_QWORD *)a1[2];
  if (v2 != v3)
  {
    do
    {
      if (*v2)
        MEMORY[0x1A1AD3538](*v2, 0x1000C801E56706BLL);
      ++v2;
    }
    while (v2 != v3);
    v2 = (_QWORD *)a1[1];
  }
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_19C2CC8EC(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, float))(*(_QWORD *)a1 + 56))(a1, 0.0);
}

uint64_t sub_19C2CC8FC()
{
  return 1;
}

uint64_t sub_19C2CC904()
{
  return 0;
}

uint64_t sub_19C2CC90C(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  float v8;
  float v9;
  uint64_t v10;
  unint64_t v11;
  _DWORD *v12;
  float v13;

  v3 = a3 - 2;
  if (a3 >= 2)
  {
    v4 = v3 >> 1;
    v5 = result + 8 * (v3 >> 1);
    v6 = *(_DWORD **)v5;
    v7 = *(_QWORD *)(a2 - 8);
    v8 = *(float *)(*(_QWORD *)v5 + 8);
    v9 = *(float *)(v7 + 8);
    if (v8 < v9 || v8 == v9 && *v6 > *(_DWORD *)v7)
    {
      *(_QWORD *)(a2 - 8) = v6;
      if (v3 >= 2)
      {
        while (1)
        {
          v11 = v4 - 1;
          v4 = (v4 - 1) >> 1;
          v10 = result + 8 * v4;
          v12 = *(_DWORD **)v10;
          v13 = *(float *)(*(_QWORD *)v10 + 8);
          if (v13 >= v9 && (v13 != v9 || *v12 <= *(_DWORD *)v7))
            break;
          *(_QWORD *)v5 = v12;
          v5 = result + 8 * v4;
          if (v11 <= 1)
            goto LABEL_11;
        }
      }
      v10 = v5;
LABEL_11:
      *(_QWORD *)v10 = v7;
    }
  }
  return result;
}

void *sub_19C2CC9A4(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  void **v14;
  void *v15;
  uint64_t *v16;
  size_t v17;
  uint64_t v18;
  unint64_t v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;

  v8 = (_QWORD *)(a1 + 24);
  v9 = sub_19C2CCC18(a1 + 24, *(uint64_t **)a2, *(_QWORD *)(a2 + 8));
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      v15 = *v14;
      if (*v14)
      {
        v18 = a2;
        v16 = *(uint64_t **)a2;
        v17 = *(_QWORD *)(v18 + 8);
        do
        {
          v19 = *((_QWORD *)v15 + 1);
          if (v19 == v10)
          {
            if (*((_QWORD *)v15 + 3) == v17 && !memcmp(*((const void **)v15 + 2), v16, v17))
              return v15;
          }
          else
          {
            if (v13 > 1)
            {
              if (v19 >= v11)
                v19 %= v11;
            }
            else
            {
              v19 &= v11 - 1;
            }
            if (v19 != v4)
              break;
          }
          v15 = *(void **)v15;
        }
        while (v15);
      }
    }
  }
  v15 = operator new(0x40uLL);
  *(_QWORD *)v15 = 0;
  *((_QWORD *)v15 + 1) = v10;
  *((_OWORD *)v15 + 1) = **a4;
  *((_OWORD *)v15 + 2) = 0u;
  *((_OWORD *)v15 + 3) = 0u;
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v21 = *(float *)(a1 + 32);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    v22 = 1;
    if (v11 >= 3)
      v22 = (v11 & (v11 - 1)) != 0;
    v23 = v22 | (2 * v11);
    v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24)
      v25 = v24;
    else
      v25 = v23;
    sub_19C2A1464(a1, v25);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v26 = *(_QWORD *)a1;
  v27 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v27)
  {
    *(_QWORD *)v15 = *v27;
LABEL_40:
    *v27 = v15;
    goto LABEL_41;
  }
  *(_QWORD *)v15 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v15;
  *(_QWORD *)(v26 + 8 * v4) = a1 + 16;
  if (*(_QWORD *)v15)
  {
    v28 = *(_QWORD *)(*(_QWORD *)v15 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v28 >= v11)
        v28 %= v11;
    }
    else
    {
      v28 &= v11 - 1;
    }
    v27 = (_QWORD *)(*(_QWORD *)a1 + 8 * v28);
    goto LABEL_40;
  }
LABEL_41:
  ++*v8;
  return v15;
}

void sub_19C2CCC04(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

unint64_t sub_19C2CCC18(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  char v4;

  return sub_19C2A0F2C((uint64_t)&v4, a2, a3);
}

void sub_19C2CCC3C(_QWORD *a1)
{
  sub_19C2CC870(a1);
  JUMPOUT(0x1A1AD355CLL);
}

void sub_19C2CCC60()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = &unk_1E3D39608;
  __cxa_throw(exception, (struct type_info *)&unk_1E3D33020, (void (*)(void *))std::exception::~exception);
}

void sub_19C2CCC98(std::exception *a1)
{
  std::exception::~exception(a1);
  JUMPOUT(0x1A1AD355CLL);
}

void sub_19C2CCCC0()
{
  JUMPOUT(0x1A1AD355CLL);
}

__n128 sub_19C2CCCD4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E3D38E20;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_19C2CCD14(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E3D38E20;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_19C2CCD3C(uint64_t a1, _QWORD *a2, void ***a3)
{
  uint64_t v4;
  void **v5;
  _QWORD **v6;
  uint64_t v7;
  uint64_t **v8;
  uint64_t *v9;
  char *v10;
  char *v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  __int128 v23;
  char *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  __int128 v32;
  __int128 v33;

  v4 = a2[1];
  v5 = *a3;
  *(_QWORD *)&v33 = *a2;
  *((_QWORD *)&v33 + 1) = v4;
  v6 = *(_QWORD ***)(a1 + 8);
  v7 = ((uint64_t (*)(_QWORD **, _QWORD, uint64_t))(*v6)[14])(v6, v33, v4);
  if ((_DWORD)v7 == -1 || ((*(uint64_t (**)(_QWORD *, uint64_t))(*v6[1] + 128))(v6[1], v7) & 1) == 0)
  {
    v10 = (char *)v5[2];
    v11 = (char *)v5[1];
    if (v11 >= v10)
    {
      v13 = 0xAAAAAAAAAAAAAAABLL * ((v11 - (_BYTE *)*v5) >> 3);
      v14 = v13 + 1;
      if (v13 + 1 <= 0xAAAAAAAAAAAAAAALL)
      {
        v15 = 0xAAAAAAAAAAAAAAABLL * ((v10 - (_BYTE *)*v5) >> 3);
        if (2 * v15 > v14)
          v14 = 2 * v15;
        if (v15 >= 0x555555555555555)
          v16 = 0xAAAAAAAAAAAAAAALL;
        else
          v16 = v14;
        v17 = (char *)sub_19C2A18FC((uint64_t)(v5 + 2), v16);
        v18 = &v17[24 * v13];
        v20 = &v17[24 * v19];
        *(_OWORD *)v18 = v33;
        *((_DWORD *)v18 + 4) = v7;
        v12 = v18 + 24;
        v22 = (char *)*v5;
        v21 = (char *)v5[1];
        if (v21 == *v5)
          goto LABEL_16;
        do
        {
          v23 = *(_OWORD *)(v21 - 24);
          *((_QWORD *)v18 - 1) = *((_QWORD *)v21 - 1);
          *(_OWORD *)(v18 - 24) = v23;
          v18 -= 24;
          v21 -= 24;
        }
        while (v21 != v22);
        goto LABEL_15;
      }
LABEL_30:
      sub_19C2A18E8();
    }
  }
  else
  {
    v8 = sub_19C2CCFDC(*(_QWORD **)(a1 + 24), (uint64_t)&v33);
    if (v8)
    {
      v9 = (uint64_t *)v8;
      sub_19C2CC830(*(_QWORD *)(a1 + 16), v9[4], v9[5], (uint64_t)v5);
      sub_19C2CC830(*(_QWORD *)(a1 + 16), v9[6], v9[7], (uint64_t)v5);
      return;
    }
    v24 = (char *)v5[2];
    v11 = (char *)v5[1];
    if (v11 >= v24)
    {
      v25 = 0xAAAAAAAAAAAAAAABLL * ((v11 - (_BYTE *)*v5) >> 3);
      v26 = v25 + 1;
      if (v25 + 1 <= 0xAAAAAAAAAAAAAAALL)
      {
        v27 = 0xAAAAAAAAAAAAAAABLL * ((v24 - (_BYTE *)*v5) >> 3);
        if (2 * v27 > v26)
          v26 = 2 * v27;
        if (v27 >= 0x555555555555555)
          v28 = 0xAAAAAAAAAAAAAAALL;
        else
          v28 = v26;
        v29 = (char *)sub_19C2A18FC((uint64_t)(v5 + 2), v28);
        v18 = &v29[24 * v25];
        v20 = &v29[24 * v30];
        *(_OWORD *)v18 = v33;
        *((_DWORD *)v18 + 4) = v7;
        v12 = v18 + 24;
        v31 = (char *)*v5;
        v21 = (char *)v5[1];
        if (v21 == *v5)
          goto LABEL_16;
        do
        {
          v32 = *(_OWORD *)(v21 - 24);
          *((_QWORD *)v18 - 1) = *((_QWORD *)v21 - 1);
          *(_OWORD *)(v18 - 24) = v32;
          v18 -= 24;
          v21 -= 24;
        }
        while (v21 != v31);
LABEL_15:
        v21 = (char *)*v5;
LABEL_16:
        *v5 = v18;
        v5[1] = v12;
        v5[2] = v20;
        if (v21)
          operator delete(v21);
        goto LABEL_18;
      }
      goto LABEL_30;
    }
  }
  *(_OWORD *)v11 = v33;
  *((_DWORD *)v11 + 4) = v7;
  v12 = v11 + 24;
LABEL_18:
  v5[1] = v12;
}

uint64_t sub_19C2CCF94(uint64_t a1, uint64_t a2)
{
  if (sub_19C2CD0F0(a2, (uint64_t)&unk_1E3D33590))
    return a1 + 8;
  else
    return 0;
}

void *sub_19C2CCFD0()
{
  return &unk_1E3D33590;
}

uint64_t **sub_19C2CCFDC(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t ***v10;
  uint64_t **v11;
  uint64_t *v12;
  size_t v13;
  uint64_t v14;
  unint64_t v15;

  v4 = sub_19C2CCC18((uint64_t)(a1 + 3), *(uint64_t **)a2, *(_QWORD *)(a2 + 8));
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(uint64_t ****)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = *v10;
  if (*v10)
  {
    v14 = a2;
    v12 = *(uint64_t **)a2;
    v13 = *(_QWORD *)(v14 + 8);
    do
    {
      v15 = (unint64_t)v11[1];
      if (v15 == v6)
      {
        if (v11[3] == (uint64_t *)v13 && !memcmp(v11[2], v12, v13))
          return v11;
      }
      else
      {
        if (v8 > 1)
        {
          if (v15 >= *(_QWORD *)&v5)
            v15 %= *(_QWORD *)&v5;
        }
        else
        {
          v15 &= *(_QWORD *)&v5 - 1;
        }
        if (v15 != v9)
          return 0;
      }
      v11 = (uint64_t **)*v11;
    }
    while (v11);
  }
  return v11;
}

BOOL sub_19C2CD0F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  if (v2 == v3)
    return 1;
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3))
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  return 0;
}

_QWORD *sub_19C2CD13C(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x1E0C80C00];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_19C2CD2A4(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_19C2CDAC8(a1);
}

void sub_19C2CD2B0()
{
  _QWORD *v0;
  _QWORD *v1;

  if (!dword_1EE41C8E0)
  {
    v0 = sub_19C2CD2F8(MEMORY[0x1E0DE4A50], "Program terminated with an unrecoverable error.");
    v1 = sub_19C2CD32C(v0);
    sub_19C2CD3BC(v1);
    exit(-1);
  }
  dword_1EE41C8E0 = 2;
}

_QWORD *sub_19C2CD2F8(_QWORD *a1, char *__s)
{
  size_t v4;

  v4 = strlen(__s);
  return sub_19C2A1B24(a1, (uint64_t)__s, v4);
}

_QWORD *sub_19C2CD32C(_QWORD *a1)
{
  const std::locale::facet *v2;
  std::locale v4;

  std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
  v2 = std::locale::use_facet(&v4, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 10);
  std::locale::~locale(&v4);
  std::ostream::put();
  std::ostream::flush();
  return a1;
}

void sub_19C2CD3A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

_QWORD *sub_19C2CD3C0(_QWORD *result)
{
  *result = 0;
  return result;
}

uint64_t *sub_19C2CD3C8(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
    sub_19C2CD7A0((uint64_t)a1, v2);
  return a1;
}

uint64_t sub_19C2CD3FC(uint64_t a1, int a2, const void *a3, size_t a4)
{
  uint64_t v8;
  __int128 *p_dst;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 __dst;
  unint64_t v16;

  v8 = operator new();
  *(_QWORD *)(v8 + 16) = 0;
  *(_QWORD *)(v8 + 24) = 0;
  *(_QWORD *)(v8 + 8) = 0;
  *(_QWORD *)a1 = v8;
  *(_DWORD *)v8 = a2;
  if (a4 >= 0x7FFFFFFFFFFFFFF8)
    sub_19C2A1A54();
  if (a4 >= 0x17)
  {
    v10 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17)
      v10 = a4 | 7;
    v11 = v10 + 1;
    p_dst = (__int128 *)operator new(v10 + 1);
    *((_QWORD *)&__dst + 1) = a4;
    v16 = v11 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v16) = a4;
  p_dst = &__dst;
  if (a4)
LABEL_8:
    memmove(p_dst, a3, a4);
  *((_BYTE *)p_dst + a4) = 0;
  v12 = *(_QWORD *)a1 + 8;
  if (*(char *)(*(_QWORD *)a1 + 31) < 0)
    operator delete(*(void **)v12);
  v13 = __dst;
  *(_QWORD *)(v12 + 16) = v16;
  *(_OWORD *)v12 = v13;
  return a1;
}

void sub_19C2CD504(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *v1 = 0;
  if (v3)
    sub_19C2CD7A0((uint64_t)v1, v3);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_19C2CD528(uint64_t *a1, _DWORD **a2)
{
  uint64_t v4;
  _DWORD *v5;
  _BYTE *v6;
  __int128 v7;

  if (*a2)
  {
    v4 = operator new();
    v5 = *a2;
    *(_DWORD *)v4 = **a2;
    v6 = (_BYTE *)(v4 + 8);
    if (*((char *)v5 + 31) < 0)
    {
      sub_19C2B5238(v6, *((void **)v5 + 1), *((_QWORD *)v5 + 2));
    }
    else
    {
      v7 = *(_OWORD *)(v5 + 2);
      *(_QWORD *)(v4 + 24) = *((_QWORD *)v5 + 3);
      *(_OWORD *)v6 = v7;
    }
  }
  else
  {
    v4 = 0;
  }
  *a1 = v4;
  return a1;
}

void sub_19C2CD5B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD355C](v1, 0x1012C40849EBCB1);
  _Unwind_Resume(a1);
}

void sub_19C2CD5DC(uint64_t *a1, _DWORD **a2)
{
  uint64_t v3;
  uint64_t v5;
  _DWORD *v6;
  _BYTE *v7;
  __int128 v8;

  v3 = *a1;
  if ((_DWORD *)*a1 != *a2)
  {
    if (*a2)
    {
      v5 = operator new();
      v6 = *a2;
      *(_DWORD *)v5 = **a2;
      v7 = (_BYTE *)(v5 + 8);
      if (*((char *)v6 + 31) < 0)
      {
        sub_19C2B5238(v7, *((void **)v6 + 1), *((_QWORD *)v6 + 2));
      }
      else
      {
        v8 = *(_OWORD *)(v6 + 2);
        *(_QWORD *)(v5 + 24) = *((_QWORD *)v6 + 3);
        *(_OWORD *)v7 = v8;
      }
      v3 = *a1;
    }
    else
    {
      v5 = 0;
    }
    *a1 = v5;
    if (v3)
      sub_19C2CD7A0((uint64_t)a1, v3);
  }
}

void sub_19C2CD68C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD355C](v1, 0x1012C40849EBCB1);
  _Unwind_Resume(a1);
}

const char *sub_19C2CD6B0(uint64_t *a1)
{
  uint64_t v1;
  const char *result;

  v1 = *a1;
  if (!*a1)
    return "";
  result = (const char *)(v1 + 8);
  if (*(char *)(v1 + 31) < 0)
    return *(const char **)result;
  return result;
}

std::string *sub_19C2CD6DC@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  _DWORD *v3;
  unsigned int v5;
  int v6;
  const std::string::value_type *v7;
  std::string::size_type v8;

  v3 = *(_DWORD **)a1;
  if (!*(_QWORD *)a1)
    return (std::string *)sub_19C2A6D48(a2, "OK");
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  v5 = *v3 - 1;
  if (v5 < 0x10)
    MEMORY[0x1A1AD31A8](a2, off_1E3D39F68[v5]);
  std::string::append(a2, ": ");
  v6 = *(char *)(*(_QWORD *)a1 + 31);
  if (v6 >= 0)
    v7 = (const std::string::value_type *)(*(_QWORD *)a1 + 8);
  else
    v7 = *(const std::string::value_type **)(*(_QWORD *)a1 + 8);
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(*(_QWORD *)a1 + 31);
  else
    v8 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  return std::string::append(a2, v7, v8);
}

void sub_19C2CD780(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_19C2CD7A0(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (*(char *)(a2 + 31) < 0)
      operator delete(*(void **)(a2 + 8));
    JUMPOUT(0x1A1AD355CLL);
  }
}

_QWORD *sub_19C2CD800()
{
  unsigned __int8 v0;
  pthread_key_t *v2;

  v0 = atomic_load((unsigned __int8 *)&qword_1EE41C108);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_1EE41C108))
  {
    v2 = (pthread_key_t *)operator new();
    pthread_key_create(v2, (void (__cdecl *)(void *))sub_19C2CE1DC);
    qword_1EE41C100 = (uint64_t)v2;
    __cxa_guard_release(&qword_1EE41C108);
  }
  return sub_19C2CD8B4((pthread_key_t *)qword_1EE41C100);
}

void sub_19C2CD87C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD355C](v1, 0x1000C4000313F17);
  __cxa_guard_abort(&qword_1EE41C108);
  _Unwind_Resume(a1);
}

_QWORD *sub_19C2CD8B4(pthread_key_t *a1)
{
  _QWORD *v2;

  v2 = pthread_getspecific(*a1);
  if (!v2)
  {
    v2 = operator new(0x40uLL, (std::align_val_t)0x40uLL);
    *(_OWORD *)v2 = xmmword_19C46D660;
    v2[2] = 0;
    pthread_setspecific(*a1, v2);
  }
  return v2;
}

uint64_t sub_19C2CD920(uint64_t a1, unint64_t a2)
{
  std::string *v4;
  char v6;
  std::string v7[2];

  if (*(_QWORD *)(a1 + 16) < a2)
  {
    sub_19C2CF5C8((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/arena_impl.h", 111);
    v4 = sub_19C2CF5E0(v7, "CHECK failed: n <= size_: ");
    sub_19C2CF710((uint64_t)&v6, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_19C2CF718((uint64_t)v7);
  }
  return a1 + a2;
}

void sub_19C2CD994(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_19C2CD9C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  std::string *v8;
  _QWORD *v9;
  uint64_t v10;
  char v12;
  std::string v13[2];

  v6 = *(_QWORD *)(a1 + 8);
  v7 = v6 + 72;
  if (v6 + 72 > *(_QWORD *)(a1 + 16))
  {
    sub_19C2CF5C8((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/arena.cc", 398);
    v8 = sub_19C2CF5E0(v13, "CHECK failed: (pos + ArenaImpl::kSerialArenaSize) <= (b->size()): ");
    sub_19C2CF710((uint64_t)&v12, (const char **)&v8->__r_.__value_.__l.__data_);
    sub_19C2CF718((uint64_t)v13);
  }
  v9 = (_QWORD *)sub_19C2CD920(a1, v6);
  *(_QWORD *)(a1 + 8) = v7;
  *v9 = a3;
  v9[1] = a2;
  v9[2] = a1;
  v9[5] = sub_19C2CD920(a1, v7);
  v10 = sub_19C2CD920(a1, *(_QWORD *)(a1 + 16));
  v9[3] = 0;
  v9[7] = 0;
  v9[8] = 0;
  v9[6] = v10;
  return v9;
}

void sub_19C2CDA98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19C2CDAC8(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

uint64_t sub_19C2CDAD8(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void *sub_19C2CDAF0(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  std::string *v8;
  size_t v9;
  void *result;
  unint64_t *v11;
  unint64_t v12;
  char v13;
  std::string v14[2];

  v5 = *(_QWORD *)(a1 + 32);
  if (a2 == -1)
  {
    if (v5)
      v7 = *(_QWORD *)v5;
    else
      v7 = 256;
  }
  else
  {
    if (v5)
      v6 = *(_QWORD *)(v5 + 8);
    else
      v6 = 0x2000;
    if (v6 >= 2 * a2)
      v7 = 2 * a2;
    else
      v7 = v6;
  }
  if (a3 >= 0xFFFFFFFFFFFFFFE8)
  {
    sub_19C2CF5C8((uint64_t)v14, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/arena.cc", 245);
    v8 = sub_19C2CF5E0(v14, "CHECK failed: (min_bytes) <= (std::numeric_limits<size_t>::max() - kBlockHeaderSize): ");
    sub_19C2CF710((uint64_t)&v13, (const char **)&v8->__r_.__value_.__l.__data_);
    sub_19C2CF718((uint64_t)v14);
    v5 = *(_QWORD *)(a1 + 32);
  }
  if (v7 <= a3 + 24)
    v9 = a3 + 24;
  else
    v9 = v7;
  if (v5)
    result = (void *)(*(uint64_t (**)(size_t))(v5 + 16))(v9);
  else
    result = operator new(v9);
  v11 = (unint64_t *)(a1 + 16);
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + v9, v11));
  return result;
}

void sub_19C2CDBE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_19C2CDBFC(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;

  if (a1)
    v6 = *(_QWORD *)(a1 + 16);
  else
    v6 = -1;
  v7 = (uint64_t *)sub_19C2CDAF0(a3, v6, a2);
  return sub_19C2CE134(v7, v8, a1, 0, 0);
}

_QWORD *sub_19C2CDC44(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;
  uint64_t v7;
  uint64_t v8;

  result = (_QWORD *)a1[3];
  do
  {
    if (result)
    {
      if ((unint64_t)(2 * *result) >= 0x40)
        v7 = 64;
      else
        v7 = 2 * *result;
    }
    else
    {
      v7 = 8;
    }
    result = (_QWORD *)sub_19C2CDCD8(a1, (16 * (_WORD)v7 + 23) & 0xFF0);
    v8 = a1[3];
    *result = v7;
    result[1] = v8;
    a1[3] = (uint64_t)result;
    a1[7] = (uint64_t)(result + 2);
    a1[8] = (uint64_t)&result[2 * v7 + 2];
  }
  while (!(16 * v7));
  result[2] = a2;
  result[3] = a3;
  a1[7] = (uint64_t)(result + 4);
  return result;
}

unint64_t sub_19C2CDCD8(uint64_t *a1, unint64_t a2)
{
  std::string *v4;
  unint64_t result;
  unint64_t v6;
  std::string *v7;
  char v8;
  std::string v9[2];

  if (((a2 + 7) & 0xFFFFFFFFFFFFFFF8) != a2)
  {
    sub_19C2CF5C8((uint64_t)v9, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/arena_impl.h", 159);
    v4 = sub_19C2CF5E0(v9, "CHECK failed: (internal::AlignUpTo8(n)) == (n): ");
    sub_19C2CF710((uint64_t)&v8, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_19C2CF718((uint64_t)v9);
  }
  result = a1[5];
  v6 = a1[6];
  if (v6 < result)
  {
    sub_19C2CF5C8((uint64_t)v9, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/arena_impl.h", 160);
    v7 = sub_19C2CF5E0(v9, "CHECK failed: (limit_) >= (ptr_): ");
    sub_19C2CF710((uint64_t)&v8, (const char **)&v7->__r_.__value_.__l.__data_);
    sub_19C2CF718((uint64_t)v9);
    result = a1[5];
    v6 = a1[6];
  }
  if (v6 - result < a2)
    return sub_19C2CE044(a1, a2);
  a1[5] = result + a2;
  return result;
}

void sub_19C2CDDBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t sub_19C2CDDDC(unint64_t *a1, unint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t *v7;
  _QWORD *v9;

  v6 = sub_19C2CD800();
  if (v6[1] == a1[3])
  {
    v7 = (uint64_t *)v6[2];
    return sub_19C2CDE64(v7, a2, a3);
  }
  v9 = sub_19C2CD800();
  v7 = (uint64_t *)atomic_load(a1 + 1);
  if (v7 && (_QWORD *)v7[1] == v9)
    return sub_19C2CDE64(v7, a2, a3);
  return sub_19C2CDEC0(a1, a2, a3);
}

unint64_t sub_19C2CDE64(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t *v7;

  v5 = sub_19C2CDCD8(a1, a2);
  v6 = v5;
  v7 = (unint64_t *)a1[7];
  if (v7 == (unint64_t *)a1[8])
  {
    sub_19C2CDC44(a1, v5, a3);
  }
  else
  {
    *v7 = v5;
    v7[1] = a3;
    a1[7] = (uint64_t)(v7 + 2);
  }
  return v6;
}

unint64_t sub_19C2CDEC0(unint64_t *a1, unint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t *v7;

  v6 = sub_19C2CD800();
  v7 = (uint64_t *)sub_19C2CDF4C(a1, (uint64_t)v6);
  return sub_19C2CDE64(v7, a2, a3);
}

unint64_t sub_19C2CDF18(unint64_t *a1, unint64_t a2)
{
  _QWORD *v4;
  uint64_t *v5;

  v4 = sub_19C2CD800();
  v5 = (uint64_t *)sub_19C2CDF4C(a1, (uint64_t)v4);
  return sub_19C2CDCD8(v5, a2);
}

unint64_t sub_19C2CDF4C(unint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v11;
  unint64_t v12;

  v4 = atomic_load(a1);
  if (!v4)
  {
LABEL_4:
    v5 = sub_19C2CDAF0((uint64_t)a1, -1, 0x48uLL);
    *(_OWORD *)v5 = xmmword_19C46D670;
    v5[2] = v6;
    v7 = sub_19C2CD9C8((uint64_t)v5, a2, (uint64_t)a1);
    v4 = (unint64_t)v7;
    v8 = *a1;
    v7[4] = *a1;
    v9 = __ldxr(a1);
    if (v9 == v8)
    {
      if (__stlxr((unint64_t)v7, a1))
        goto LABEL_8;
      goto LABEL_14;
    }
    __clrex();
LABEL_8:
    while (1)
    {
      v7[4] = v9;
      v10 = __ldxr(a1);
      if (v10 != v9)
        break;
      if (__stlxr((unint64_t)v7, a1))
        goto LABEL_12;
      v11 = 1;
LABEL_13:
      v9 = v10;
      if ((v11 & 1) != 0)
        goto LABEL_14;
    }
    __clrex();
LABEL_12:
    v11 = 0;
    goto LABEL_13;
  }
  while (*(_QWORD *)(v4 + 8) != a2)
  {
    v4 = *(_QWORD *)(v4 + 32);
    if (!v4)
      goto LABEL_4;
  }
LABEL_14:
  sub_19C2CD800()[2] = v4;
  v12 = a1[3];
  sub_19C2CD800()[1] = v12;
  atomic_store(v4, a1 + 1);
  return v4;
}

uint64_t sub_19C2CE044(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;

  v4 = a1[2];
  *(_QWORD *)(v4 + 8) = *(_QWORD *)(v4 + 16) - a1[6] + a1[5];
  v5 = sub_19C2CDBFC(v4, a2, *a1);
  a1[2] = (uint64_t)v5;
  a1[5] = sub_19C2CD920((uint64_t)v5, v5[1]);
  a1[6] = sub_19C2CD920(a1[2], *(_QWORD *)(a1[2] + 16));
  return sub_19C2CDCD8(a1, a2);
}

unint64_t sub_19C2CE0C4(unint64_t *a1, unint64_t a2)
{
  _QWORD *v4;
  uint64_t *v5;
  _QWORD *v7;

  v4 = sub_19C2CD800();
  if (v4[1] == a1[3])
  {
    v5 = (uint64_t *)v4[2];
    return sub_19C2CDCD8(v5, a2);
  }
  v7 = sub_19C2CD800();
  v5 = (uint64_t *)atomic_load(a1 + 1);
  if (v5 && (_QWORD *)v5[1] == v7)
    return sub_19C2CDCD8(v5, a2);
  return sub_19C2CDF18(a1, a2);
}

uint64_t *sub_19C2CE134(uint64_t *a1, uint64_t a2, uint64_t a3, unsigned int a4, int a5)
{
  uint64_t v6;
  std::string *v7;
  char v9;
  std::string v10[2];

  v6 = 2;
  if (!a5)
    v6 = 0;
  *a1 = v6 | a4 | a3;
  a1[1] = 24;
  a1[2] = a2;
  if ((a3 & 3) != 0)
  {
    sub_19C2CF5C8((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/arena_impl.h", 107);
    v7 = sub_19C2CF5E0(v10, "CHECK failed: (reinterpret_cast<uintptr_t>(next) & 3) == (0u): ");
    sub_19C2CF710((uint64_t)&v9, (const char **)&v7->__r_.__value_.__l.__data_);
    sub_19C2CF718((uint64_t)v10);
  }
  return a1;
}

void sub_19C2CE1C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19C2CE1DC(uint64_t result)
{
  if (result)
    JUMPOUT(0x1A1AD3550);
  return result;
}

unint64_t sub_19C2CE1EC(_QWORD *a1)
{
  unsigned __int8 v2;
  unint64_t v3;

  v2 = atomic_load((unsigned __int8 *)&qword_1EE41C110);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_1EE41C110))
  {
    __cxa_atexit((void (*)(void *))std::mutex::~mutex, &stru_1EE41ADD8, &dword_19C291000);
    __cxa_guard_release(&qword_1EE41C110);
  }
  std::mutex::lock(&stru_1EE41ADD8);
  v3 = atomic_load(a1 + 3);
  if (!v3)
  {
    sub_19C2A6CA0(a1, (void *)*a1, a1[1]);
    atomic_store((unint64_t)a1, a1 + 3);
    v3 = (unint64_t)a1;
  }
  std::mutex::unlock(&stru_1EE41ADD8);
  return v3;
}

unint64_t sub_19C2CE29C(uint64_t *a1, uint64_t a2, __int128 *a3, uint64_t a4)
{
  unint64_t result;
  unint64_t v8;
  __int128 v9;

  if (*a1 != a2)
  {
    sub_19C2C1180(a1);
    JUMPOUT(0x1A1AD31B4);
  }
  if (!a4)
  {
    result = operator new();
    v8 = result;
    if ((*((char *)a3 + 23) & 0x80000000) == 0)
    {
      *(_OWORD *)result = *a3;
      *(_QWORD *)(result + 16) = *((_QWORD *)a3 + 2);
      goto LABEL_11;
    }
LABEL_10:
    result = (unint64_t)sub_19C2B5238((_BYTE *)result, *(void **)a3, *((_QWORD *)a3 + 1));
    goto LABEL_11;
  }
  if ((*(_BYTE *)(a4 + 24) & 1) != 0)
    (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(a4 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(a4 + 32) + 32), &unk_1E3D33010, 24);
  result = sub_19C2CDDDC((unint64_t *)a4, 0x18uLL, (uint64_t)sub_19C2CA134);
  v8 = result;
  if (*((char *)a3 + 23) < 0)
    goto LABEL_10;
  v9 = *a3;
  *(_QWORD *)(result + 16) = *((_QWORD *)a3 + 2);
  *(_OWORD *)result = v9;
LABEL_11:
  *a1 = v8;
  return result;
}

void sub_19C2CE3C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD355C](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

void sub_19C2CE3E4(uint64_t *a1, uint64_t a2, __int128 *a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (*a1 == a2)
  {
    if (a4)
    {
      if ((*(_BYTE *)(a4 + 24) & 1) != 0)
      {
        v11 = a4;
        (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(a4 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(a4 + 32) + 32), &unk_1E3D33010, 24);
        a4 = v11;
      }
      v9 = sub_19C2CDDDC((unint64_t *)a4, 0x18uLL, (uint64_t)sub_19C2CA134);
      v10 = *((_QWORD *)a3 + 2);
      *(_OWORD *)v9 = *a3;
      *(_QWORD *)(v9 + 16) = v10;
      *((_QWORD *)a3 + 1) = 0;
      *((_QWORD *)a3 + 2) = 0;
      *(_QWORD *)a3 = 0;
    }
    else
    {
      v9 = operator new();
      *(_OWORD *)v9 = *a3;
      *(_QWORD *)(v9 + 16) = *((_QWORD *)a3 + 2);
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      *((_QWORD *)a3 + 2) = 0;
    }
    *a1 = v9;
  }
  else
  {
    v6 = sub_19C2C1180(a1);
    v7 = v6;
    if (*(char *)(v6 + 23) < 0)
      operator delete(*(void **)v6);
    v8 = *a3;
    *(_QWORD *)(v7 + 16) = *((_QWORD *)a3 + 2);
    *(_OWORD *)v7 = v8;
    *((_BYTE *)a3 + 23) = 0;
    *(_BYTE *)a3 = 0;
  }
}

unint64_t sub_19C2CE4EC(uint64_t *a1, __int128 *a2, uint64_t a3)
{
  return sub_19C2CE29C(a1, (uint64_t)&qword_1EE41C5D8, a2, a3);
}

void sub_19C2CE500(uint64_t *a1, __int128 *a2, uint64_t a3)
{
  sub_19C2CE3E4(a1, (uint64_t)&qword_1EE41C5D8, a2, a3);
}

unint64_t sub_19C2CE514(uint64_t *a1, __int128 *a2, uint64_t a3)
{
  return sub_19C2CE29C(a1, 0, a2, a3);
}

uint64_t *sub_19C2CE524(uint64_t *a1, uint64_t a2)
{
  if ((uint64_t *)*a1 == &qword_1EE41C5D8)
    return sub_19C2CE540((uint64_t **)a1, a2);
  else
    return (uint64_t *)sub_19C2C1180(a1);
}

uint64_t *sub_19C2CE540(uint64_t **a1, uint64_t a2)
{
  std::string *v4;
  uint64_t *result;
  char v6;
  std::string v7[2];

  if (*a1 != &qword_1EE41C5D8)
  {
    sub_19C2CF5C8((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/arenastring.cc", 147);
    v4 = sub_19C2CF5E0(v7, "CHECK failed: IsDefault(default_value): ");
    sub_19C2CF710((uint64_t)&v6, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_19C2CF718((uint64_t)v7);
  }
  if (a2)
  {
    if ((*(_BYTE *)(a2 + 24) & 1) != 0)
      (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(a2 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(a2 + 32) + 32), &unk_1E3D33010, 24);
    result = (uint64_t *)sub_19C2CDDDC((unint64_t *)a2, 0x18uLL, (uint64_t)sub_19C2CA134);
  }
  else
  {
    result = (uint64_t *)operator new();
  }
  *result = 0;
  result[1] = 0;
  result[2] = 0;
  *a1 = result;
  return result;
}

void sub_19C2CE624(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

_BYTE *sub_19C2CE63C(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  if (*a1)
    return (_BYTE *)sub_19C2C1180(a1);
  else
    return sub_19C2CE658(a1, a3, a2);
}

_BYTE *sub_19C2CE658(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  std::string *v6;
  unint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  __int128 v10;
  char v12;
  std::string v13[2];

  if (*a1)
  {
    sub_19C2CF5C8((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/arenastring.cc", 147);
    v6 = sub_19C2CF5E0(v13, "CHECK failed: IsDefault(default_value): ");
    sub_19C2CF710((uint64_t)&v12, (const char **)&v6->__r_.__value_.__l.__data_);
    sub_19C2CF718((uint64_t)v13);
  }
  v7 = atomic_load(a3 + 3);
  if (v7)
  {
    if (a2)
      goto LABEL_5;
  }
  else
  {
    v7 = sub_19C2CE1EC(a3);
    if (a2)
    {
LABEL_5:
      if ((*(_BYTE *)(a2 + 24) & 1) != 0)
        (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(a2 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(a2 + 32) + 32), &unk_1E3D33010, 24);
      v8 = (_BYTE *)sub_19C2CDDDC((unint64_t *)a2, 0x18uLL, (uint64_t)sub_19C2CA134);
      v9 = v8;
      if (*(char *)(v7 + 23) < 0)
        goto LABEL_8;
LABEL_11:
      v10 = *(_OWORD *)v7;
      *((_QWORD *)v9 + 2) = *(_QWORD *)(v7 + 16);
      *(_OWORD *)v9 = v10;
      goto LABEL_12;
    }
  }
  v8 = (_BYTE *)operator new();
  v9 = v8;
  if ((*(char *)(v7 + 23) & 0x80000000) == 0)
    goto LABEL_11;
LABEL_8:
  sub_19C2B5238(v8, *(void **)v7, *(_QWORD *)(v7 + 8));
LABEL_12:
  *a1 = v9;
  return v9;
}

void sub_19C2CE798(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD355C](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

std::string *sub_19C2CE7D0(std::string *result, _QWORD *a2)
{
  std::string *v3;
  const std::string *v4;

  if (result->__r_.__value_.__r.__words[0])
  {
    v3 = (std::string *)sub_19C2C1180((uint64_t *)result);
    v4 = (const std::string *)atomic_load(a2 + 3);
    if (!v4)
      v4 = (const std::string *)sub_19C2CE1EC(a2);
    return std::string::operator=(v3, v4);
  }
  return result;
}

int64_t sub_19C2CE828(uint64_t a1, char *a2)
{
  void *v4;
  char *v5;
  int v6;
  std::string *v7;
  std::string *v8;
  int64_t v9;
  int64_t v10;
  char *v11;
  std::string *v12;
  char v14;
  std::string v15[2];

  while (1)
  {
    v5 = *(char **)a1;
    v4 = *(void **)(a1 + 8);
    if (!v4)
    {
      v10 = v5 - a2;
      v9 = v10 + 16;
      *(_QWORD *)(a1 + 8) = a2;
      if ((((_DWORD)v10 + 16) & 0x80000000) == 0)
        return v9;
      goto LABEL_12;
    }
    v6 = (_DWORD)a2 - (_DWORD)v5;
    if (a2 <= v5)
      break;
    if (*(_BYTE *)(a1 + 56))
    {
      sub_19C2CF5C8((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/coded_stream.cc", 685);
      v7 = sub_19C2CF5E0(v15, "CHECK failed: !had_error_: ");
      sub_19C2CF710((uint64_t)&v14, (const char **)&v7->__r_.__value_.__l.__data_);
      sub_19C2CF718((uint64_t)v15);
    }
    if (v6 >= 17)
    {
      sub_19C2CF5C8((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/coded_stream.cc", 686);
      v8 = sub_19C2CF5E0(v15, "CHECK failed: overrun <= kSlopBytes: ");
      sub_19C2CF710((uint64_t)&v14, (const char **)&v8->__r_.__value_.__l.__data_);
      sub_19C2CF718((uint64_t)v15);
    }
    a2 = &sub_19C2CE9BC((char **)a1)[v6];
    if (*(_BYTE *)(a1 + 56))
      return 0;
  }
  memcpy(v4, (const void *)(a1 + 16), (size_t)&a2[-a1 - 16]);
  v11 = *(char **)a1;
  *(_QWORD *)(a1 + 8) += &a2[-a1 - 16];
  v9 = v11 - a2;
  if ((((_DWORD)v11 - (_DWORD)a2) & 0x80000000) == 0)
    return v9;
LABEL_12:
  sub_19C2CF5C8((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/coded_stream.cc", 700);
  v12 = sub_19C2CF5E0(v15, "CHECK failed: s >= 0: ");
  sub_19C2CF710((uint64_t)&v14, (const char **)&v12->__r_.__value_.__l.__data_);
  sub_19C2CF718((uint64_t)v15);
  return v9;
}

void sub_19C2CE994(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_19C2CE9BC(char **a1)
{
  std::string *v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  std::string *v9;
  std::string::size_type v10;
  char v11;
  int v12;
  std::string v13[2];

  if (*((_BYTE *)a1 + 56))
  {
    sub_19C2CF5C8((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/coded_stream.cc", 788);
    v2 = sub_19C2CF5E0(v13, "CHECK failed: !had_error_: ");
    sub_19C2CF710((uint64_t)&v12, (const char **)&v2->__r_.__value_.__l.__data_);
    sub_19C2CF718((uint64_t)v13);
  }
  if (a1[6])
  {
    v3 = (char *)(a1 + 2);
    v5 = *a1;
    v4 = a1[1];
    if (v4)
    {
      memcpy(v4, a1 + 2, v5 - v3);
      v12 = 0;
      do
      {
        v13[0].__r_.__value_.__r.__words[0] = 0;
        if (((*(uint64_t (**)(char *, std::string *, int *))(*(_QWORD *)a1[6] + 16))(a1[6], v13, &v12) & 1) == 0)
        {
          *((_BYTE *)a1 + 56) = 1;
          goto LABEL_14;
        }
        v6 = v12;
      }
      while (!v12);
      v5 = (char *)v13[0].__r_.__value_.__r.__words[0];
      if (v12 >= 17)
      {
        *(_OWORD *)v13[0].__r_.__value_.__l.__data_ = *(_OWORD *)*a1;
        *a1 = &v5[v6 - 16];
        a1[1] = 0;
        return v5;
      }
      if (v12 <= 0)
      {
        v10 = v13[0].__r_.__value_.__r.__words[0];
        sub_19C2CF5C8((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/coded_stream.cc", 810);
        v9 = sub_19C2CF5E0(v13, "CHECK failed: size > 0: ");
        sub_19C2CF710((uint64_t)&v11, (const char **)&v9->__r_.__value_.__l.__data_);
        sub_19C2CF718((uint64_t)v13);
        LODWORD(v6) = v12;
        v5 = (char *)v10;
      }
      *(_OWORD *)v3 = *(_OWORD *)*a1;
      v7 = &v3[(int)v6];
    }
    else
    {
      *(_OWORD *)v3 = *(_OWORD *)v5;
      v7 = (char *)(a1 + 4);
    }
    *a1 = v7;
    a1[1] = v5;
  }
  else
  {
    *((_BYTE *)a1 + 56) = 1;
    v3 = (char *)(a1 + 2);
LABEL_14:
    *a1 = (char *)(a1 + 4);
  }
  return v3;
}

void sub_19C2CEB38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_19C2CEB58(uint64_t a1, char *a2)
{
  int64_t v3;

  if (!*(_BYTE *)(a1 + 56))
  {
    v3 = sub_19C2CE828(a1, a2);
    if ((_DWORD)v3)
      (*(void (**)(_QWORD, int64_t))(**(_QWORD **)(a1 + 48) + 24))(*(_QWORD *)(a1 + 48), v3);
    a2 = (char *)(a1 + 16);
    *(_QWORD *)a1 = a1 + 16;
    *(_QWORD *)(a1 + 8) = a1 + 16;
  }
  return a2;
}

char *sub_19C2CEBA4(uint64_t a1, char *a2)
{
  char *v3;
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  while (!*(_BYTE *)(a1 + 56))
  {
    v3 = &a2[-*(_QWORD *)a1];
    if ((v3 & 0x80000000) != 0)
    {
      sub_19C2CF5C8((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/coded_stream.cc", 829);
      v5 = sub_19C2CF5E0(v8, "CHECK failed: overrun >= 0: ");
      sub_19C2CF710((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
      goto LABEL_6;
    }
    if (v3 > 0x10)
    {
      sub_19C2CF5C8((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/coded_stream.cc", 830);
      v4 = sub_19C2CF5E0(v8, "CHECK failed: overrun <= kSlopBytes: ");
      sub_19C2CF710((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
LABEL_6:
      sub_19C2CF718((uint64_t)v8);
    }
    a2 = &sub_19C2CE9BC((char **)a1)[(int)v3];
    if ((unint64_t)a2 < *(_QWORD *)a1)
      return a2;
  }
  return (char *)(a1 + 16);
}

void sub_19C2CEC94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_19C2CECB4(uint64_t *a1, char *a2, int a3, unint64_t a4)
{
  char *v4;
  int i;

  v4 = (char *)a4;
  for (i = sub_19C2CED54(a1, a4); a3 > i; i = sub_19C2CED54(a1, (unint64_t)v4))
  {
    memcpy(v4, a2, i);
    a3 -= i;
    a2 += i;
    v4 = sub_19C2CEBA4((uint64_t)a1, &v4[i]);
  }
  memcpy(v4, a2, a3);
  return &v4[a3];
}

uint64_t sub_19C2CED54(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  std::string *v5;
  char v7;
  std::string v8[2];

  v3 = *a1;
  if (*a1 + 16 < a2)
  {
    sub_19C2CF5C8((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/io/coded_stream.h", 838);
    v5 = sub_19C2CF5E0(v8, "CHECK failed: ptr <= end_ + kSlopBytes: ");
    sub_19C2CF710((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_19C2CF718((uint64_t)v8);
    v3 = *a1;
  }
  return v3 - a2 + 16;
}

void sub_19C2CEDD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_19C2CEDEC(uint64_t a1, void *a2, uint64_t a3, char *a4)
{
  char *v8;

  if (sub_19C2CED54((uint64_t *)a1, (unint64_t)a4) <= (int)a3)
  {
    v8 = sub_19C2CEB58(a1, a4);
    if (((*(uint64_t (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(a1 + 48) + 40))(*(_QWORD *)(a1 + 48), a2, a3) & 1) == 0)
    {
      *(_BYTE *)(a1 + 56) = 1;
      v8 = (char *)(a1 + 16);
      *(_QWORD *)a1 = a1 + 32;
    }
    return v8;
  }
  if (*(_QWORD *)a1 - (_QWORD)a4 >= (int)a3)
  {
    memcpy(a4, a2, (int)a3);
    return &a4[(int)a3];
  }
  return sub_19C2CECB4((uint64_t *)a1, (char *)a2, a3, (unint64_t)a4);
}

char *sub_19C2CEEC8(unint64_t *a1, int a2, void **a3, char *a4)
{
  char *v4;
  unint64_t v8;
  uint64_t v9;
  std::string *v10;
  unsigned int v11;
  _BYTE *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  char *v17;
  void *v18;
  unsigned int v20;
  unsigned int v21;
  char v22;
  std::string v23[2];

  v4 = a4;
  v8 = *a1;
  if (*a1 <= (unint64_t)a4)
  {
    v4 = sub_19C2CEBA4((uint64_t)a1, a4);
    v8 = *a1;
  }
  if (*((char *)a3 + 23) >= 0)
    v9 = *((unsigned __int8 *)a3 + 23);
  else
    v9 = *((unsigned int *)a3 + 2);
  if (v8 <= (unint64_t)v4)
  {
    sub_19C2CF5C8((uint64_t)v23, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/io/coded_stream.h", 858);
    v10 = sub_19C2CF5E0(v23, "CHECK failed: ptr < end_: ");
    sub_19C2CF710((uint64_t)&v22, (const char **)&v10->__r_.__value_.__l.__data_);
    sub_19C2CF718((uint64_t)v23);
  }
  v11 = (8 * a2) | 2;
  if (v11 > 0x7F)
  {
    *v4 = (8 * a2) | 0x82;
    v13 = (8 * a2) >> 7;
    if (v11 >> 14)
    {
      v12 = v4 + 2;
      do
      {
        *(v12 - 1) = v13 | 0x80;
        v14 = v13 >> 7;
        ++v12;
        v15 = v13 >> 14;
        v13 >>= 7;
      }
      while (v15);
      *(v12 - 1) = v14;
    }
    else
    {
      v4[1] = v13;
      v12 = v4 + 2;
    }
  }
  else
  {
    *v4 = v11;
    v12 = v4 + 1;
  }
  if (v9 >= 0x80)
  {
    v20 = v9;
    do
    {
      *v12++ = v20 | 0x80;
      v16 = v20 >> 7;
      v21 = v20 >> 14;
      v20 >>= 7;
    }
    while (v21);
  }
  else
  {
    LOBYTE(v16) = v9;
  }
  *v12 = v16;
  v17 = v12 + 1;
  if (*((char *)a3 + 23) >= 0)
    v18 = a3;
  else
    v18 = *a3;
  return sub_19C2CF04C((uint64_t)a1, v18, v9, v17);
}

void sub_19C2CF034(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_19C2CF04C(uint64_t a1, void *a2, uint64_t a3, char *__dst)
{
  uint64_t v6;

  if (*(_BYTE *)(a1 + 57))
    return sub_19C2CEDEC(a1, a2, a3, __dst);
  if (*(_QWORD *)a1 - (_QWORD)__dst < (int)a3)
    return sub_19C2CECB4((uint64_t *)a1, (char *)a2, a3, (unint64_t)__dst);
  v6 = (int)a3;
  memcpy(__dst, a2, (int)a3);
  return &__dst[v6];
}

char *sub_19C2CF0B4(uint64_t *a1, int a2, uint64_t a3, char *a4)
{
  char *v4;
  unint64_t v8;
  uint64_t v9;
  std::string *v10;
  unsigned int v11;
  _BYTE *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  char *v17;
  char *v18;
  unsigned int v20;
  unsigned int v21;
  char v22;
  std::string v23[2];

  v4 = a4;
  v8 = *a1;
  if (*a1 <= (unint64_t)a4)
  {
    v4 = sub_19C2CEBA4((uint64_t)a1, a4);
    v8 = *a1;
  }
  if (*(char *)(a3 + 23) >= 0)
    LODWORD(v9) = *(unsigned __int8 *)(a3 + 23);
  else
    v9 = *(_QWORD *)(a3 + 8);
  if (v8 <= (unint64_t)v4)
  {
    sub_19C2CF5C8((uint64_t)v23, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/io/coded_stream.h", 858);
    v10 = sub_19C2CF5E0(v23, "CHECK failed: ptr < end_: ");
    sub_19C2CF710((uint64_t)&v22, (const char **)&v10->__r_.__value_.__l.__data_);
    sub_19C2CF718((uint64_t)v23);
  }
  v11 = (8 * a2) | 2;
  if (v11 > 0x7F)
  {
    *v4 = (8 * a2) | 0x82;
    v13 = (8 * a2) >> 7;
    if (v11 >> 14)
    {
      v12 = v4 + 2;
      do
      {
        *(v12 - 1) = v13 | 0x80;
        v14 = v13 >> 7;
        ++v12;
        v15 = v13 >> 14;
        v13 >>= 7;
      }
      while (v15);
      *(v12 - 1) = v14;
    }
    else
    {
      v4[1] = v13;
      v12 = v4 + 2;
    }
  }
  else
  {
    *v4 = v11;
    v12 = v4 + 1;
  }
  if (v9 >= 0x80)
  {
    v20 = v9;
    do
    {
      *v12++ = v20 | 0x80;
      v16 = v20 >> 7;
      v21 = v20 >> 14;
      v20 >>= 7;
    }
    while (v21);
  }
  else
  {
    LOBYTE(v16) = v9;
  }
  *v12 = v16;
  v17 = v12 + 1;
  if (*(char *)(a3 + 23) >= 0)
    v18 = (char *)a3;
  else
    v18 = *(char **)a3;
  if (*a1 - (uint64_t)v17 < (int)v9)
    return sub_19C2CECB4(a1, v18, v9, (unint64_t)v17);
  memcpy(v17, v18, (int)v9);
  return &v17[(int)v9];
}

void sub_19C2CF248(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19C2CF260(int a1, int a2, const std::string::value_type *a3)
{
  const std::string::value_type *v6;
  std::string::size_type v7;
  const std::string::value_type *p_p;
  std::string::size_type v9;
  const std::string::value_type *v10;
  std::string::size_type v11;
  const std::string::value_type *v12;
  std::string::size_type v13;
  void *__p;
  std::string::size_type v15;
  unsigned __int8 v16;
  void *v17;
  std::string::size_type v18;
  unsigned __int8 v19;
  const char *v20;
  const char *v21;
  int v22;
  std::string v23;
  char __str[127];
  char v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if (a2 > 3014000)
  {
    LODWORD(v20) = 3;
    v21 = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/common.cc";
    v22 = 76;
    memset(&v23, 0, sizeof(v23));
    std::string::append(&v23, "This program requires version ");
    sub_19C2CF648(a2, &v17);
    if ((v19 & 0x80u) == 0)
      v6 = (const std::string::value_type *)&v17;
    else
      v6 = (const std::string::value_type *)v17;
    if ((v19 & 0x80u) == 0)
      v7 = v19;
    else
      v7 = v18;
    std::string::append(&v23, v6, v7);
    std::string::append(&v23, " of the Protocol Buffer runtime library, but the installed version is ");
    snprintf(__str, 0x80uLL, "%d.%d.%d", 3, 14, 0);
    v25 = 0;
    sub_19C2A6D48(&__p, __str);
    if ((v16 & 0x80u) == 0)
      p_p = (const std::string::value_type *)&__p;
    else
      p_p = (const std::string::value_type *)__p;
    if ((v16 & 0x80u) == 0)
      v9 = v16;
    else
      v9 = v15;
    std::string::append(&v23, p_p, v9);
    std::string::append(&v23, ".  Please update your library.  If you compiled the program yourself, make sure that your headers are from the same version of Protocol Buffers as your link-time library.  (Version verification failed in \"");
    std::string::append(&v23, a3);
    std::string::append(&v23, "\".)");
    sub_19C2CF8AC(&v20);
    if ((char)v16 < 0)
      operator delete(__p);
    if ((char)v19 < 0)
      operator delete(v17);
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v23.__r_.__value_.__l.__data_);
  }
  if (a1 < 3014000)
  {
    LODWORD(v20) = 3;
    v21 = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/common.cc";
    v22 = 87;
    memset(&v23, 0, sizeof(v23));
    std::string::append(&v23, "This program was compiled against version ");
    sub_19C2CF648(a1, &v17);
    if ((v19 & 0x80u) == 0)
      v10 = (const std::string::value_type *)&v17;
    else
      v10 = (const std::string::value_type *)v17;
    if ((v19 & 0x80u) == 0)
      v11 = v19;
    else
      v11 = v18;
    std::string::append(&v23, v10, v11);
    std::string::append(&v23, " of the Protocol Buffer runtime library, which is not compatible with the installed version (");
    snprintf(__str, 0x80uLL, "%d.%d.%d", 3, 14, 0);
    v25 = 0;
    sub_19C2A6D48(&__p, __str);
    if ((v16 & 0x80u) == 0)
      v12 = (const std::string::value_type *)&__p;
    else
      v12 = (const std::string::value_type *)__p;
    if ((v16 & 0x80u) == 0)
      v13 = v16;
    else
      v13 = v15;
    std::string::append(&v23, v12, v13);
    std::string::append(&v23, ").  Contact the program author for an update.  If you compiled the program yourself, make sure that your headers are from the same version of Protocol Buffers as your link-time library.  (Version verification failed in \"");
    std::string::append(&v23, a3);
    std::string::append(&v23, "\".)");
    sub_19C2CF8AC(&v20);
    if ((char)v16 < 0)
      operator delete(__p);
    if ((char)v19 < 0)
      operator delete(v17);
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v23.__r_.__value_.__l.__data_);
  }
}

void sub_19C2CF558(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (a32 < 0)
    operator delete(a27);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C2CF5C8(uint64_t result, int a2, uint64_t a3, int a4)
{
  *(_DWORD *)result = a2;
  *(_QWORD *)(result + 8) = a3;
  *(_DWORD *)(result + 16) = a4;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 24) = 0;
  return result;
}

std::string *sub_19C2CF5E0(std::string *a1, const std::string::value_type *a2)
{
  std::string::append(a1 + 1, a2);
  return a1;
}

std::string *sub_19C2CF608(std::string *a1, const std::string::value_type *a2)
{
  std::string *v3;
  std::string::size_type v4;
  std::string::size_type v5;

  v3 = a1 + 1;
  v4 = *((_QWORD *)a2 + 1);
  if (a2[23] >= 0)
  {
    v5 = *((unsigned __int8 *)a2 + 23);
  }
  else
  {
    a2 = *(const std::string::value_type **)a2;
    v5 = v4;
  }
  std::string::append(v3, a2, v5);
  return a1;
}

_QWORD *sub_19C2CF648@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  char __str[128];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  snprintf(__str, 0x80uLL, "%d.%d.%d", a1 / 1000000, a1 / 1000 % 1000, a1 % 1000);
  __str[127] = 0;
  return sub_19C2A6D48(a2, __str);
}

const char **sub_19C2CF710(uint64_t a1, const char **a2)
{
  return sub_19C2CF8AC(a2);
}

uint64_t sub_19C2CF718(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

uint64_t sub_19C2CF748(uint64_t result, const char *a2, int a3, uint64_t a4)
{
  FILE **v4;
  const char *v5;

  if ((result & 0x80000000) == 0)
  {
    v4 = (FILE **)MEMORY[0x1E0C80C10];
    if (*(char *)(a4 + 23) >= 0)
      v5 = (const char *)a4;
    else
      v5 = *(const char **)a4;
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "[libprotobuf %s %s:%d] %s\n", off_1E3D39FE8[result], a2, a3, v5);
    return fflush(*v4);
  }
  return result;
}

std::string *sub_19C2CF7B4(std::string *a1, int a2)
{
  char __str[128];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  snprintf(__str, 0x80uLL, "%d", a2);
  __str[127] = 0;
  std::string::append(a1 + 1, __str);
  return a1;
}

std::string *sub_19C2CF830(std::string *a1, uint64_t a2)
{
  char __str[128];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  snprintf(__str, 0x80uLL, "%lu", a2);
  __str[127] = 0;
  std::string::append(a1 + 1, __str);
  return a1;
}

const char **sub_19C2CF8AC(const char **result)
{
  const char **v1;
  uint64_t v2;
  int v3;
  void *exception;

  v1 = result;
  if (*(_DWORD *)result == 3)
  {
    v2 = 3;
  }
  else
  {
    v3 = atomic_load((unsigned int *)&unk_1EE41C118);
    if (v3 > 0)
      goto LABEL_6;
    v2 = *(unsigned int *)result;
  }
  result = (const char **)off_1EE41AA70(v2, v1[1], *((_DWORD *)v1 + 4), (uint64_t)(v1 + 3));
LABEL_6:
  if (*(_DWORD *)v1 == 3)
  {
    exception = __cxa_allocate_exception(0x30uLL);
    sub_19C2CF960(exception, v1[1], *((unsigned int *)v1 + 4), v1 + 3);
    __cxa_throw(exception, (struct type_info *)&unk_1E3D32A58, (void (*)(void *))sub_19C2CF964);
  }
  return result;
}

void sub_19C2CF94C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19C2CF968(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)&off_1E3D388A8;
  if (SHIBYTE(this[5].__vftable) < 0)
    operator delete(this[3].__vftable);
  std::exception::~exception(this);
}

void sub_19C2CF9A4(std::exception *a1)
{
  sub_19C2CF968(a1);
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C2CF9C8(uint64_t a1)
{
  uint64_t result;

  result = a1 + 24;
  if (*(char *)(a1 + 47) < 0)
    return *(_QWORD *)result;
  return result;
}

uint64_t sub_19C2CF9E4(uint64_t a1, uint64_t a2, int a3, __int128 *a4)
{
  uint64_t v5;
  __int128 v6;

  *(_QWORD *)a1 = &off_1E3D388A8;
  *(_QWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 16) = a3;
  v5 = a1 + 24;
  if (*((char *)a4 + 23) < 0)
  {
    sub_19C2B5238((_BYTE *)v5, *(void **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v6 = *a4;
    *(_QWORD *)(v5 + 16) = *((_QWORD *)a4 + 2);
    *(_OWORD *)v5 = v6;
  }
  return a1;
}

void sub_19C2CFA3C(_Unwind_Exception *a1)
{
  std::exception *v1;

  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19C2CFA50(uint64_t a1, int a2, _OWORD *a3)
{
  int8x8_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  unint64_t v9;
  uint64_t **v10;
  uint64_t *i;
  unint64_t v12;
  __int128 v14;

  if (qword_1EE41C120)
  {
    v3 = *(int8x8_t *)(qword_1EE41C120 + 8);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 8);
      v5 = 0x9DDFEA08EB382D69 * (((8 * v4) + 8) ^ HIDWORD(v4));
      v6 = 0x9DDFEA08EB382D69 * (HIDWORD(v4) ^ (v5 >> 47) ^ v5);
      v7 = (0x9DDFEA08EB382D69 * (v6 ^ (v6 >> 47))) ^ a2;
      v8 = (uint8x8_t)vcnt_s8(v3);
      v8.i16[0] = vaddlv_u8(v8);
      if (v8.u32[0] > 1uLL)
      {
        v9 = v7;
        if (v7 >= *(_QWORD *)&v3)
          v9 = v7 % *(_QWORD *)&v3;
      }
      else
      {
        v9 = (*(_QWORD *)&v3 - 1) & v7;
      }
      v10 = *(uint64_t ***)(*(_QWORD *)qword_1EE41C120 + 8 * v9);
      if (v10)
      {
        for (i = *v10; i; i = (uint64_t *)*i)
        {
          v12 = i[1];
          if (v7 == v12)
          {
            if (i[2] == v4 && *((_DWORD *)i + 6) == a2)
            {
              v14 = *((_OWORD *)i + 3);
              *a3 = *((_OWORD *)i + 2);
              a3[1] = v14;
              return 1;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v12 >= *(_QWORD *)&v3)
                v12 %= *(_QWORD *)&v3;
            }
            else
            {
              v12 &= *(_QWORD *)&v3 - 1;
            }
            if (v12 != v9)
              return 0;
          }
        }
      }
    }
  }
  return 0;
}

uint64_t sub_19C2CFB64(uint64_t result, uint64_t a2)
{
  *(_QWORD *)result = a2;
  *(_DWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  return result;
}

uint64_t sub_19C2CFB74(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v7;

  if (!*(_QWORD *)a1)
  {
    v2 = *(_QWORD *)(a1 + 16);
    if (*(unsigned __int16 *)(a1 + 8) >= 0x101u)
    {
      sub_19C2D923C(*(unsigned __int8 **)v2, (unsigned __int8 *)(v2 + 8));
    }
    else if (*(_WORD *)(a1 + 10))
    {
      v3 = 32 * *(unsigned __int16 *)(a1 + 10);
      v4 = (unsigned __int8 *)(v2 + 8);
      do
      {
        sub_19C2D8FFC(v4);
        v4 += 32;
        v3 -= 32;
      }
      while (v3);
    }
    v5 = *(_QWORD *)(a1 + 16);
    if (*(unsigned __int16 *)(a1 + 8) >= 0x101u)
    {
      if (v5)
      {
        v7 = *(_QWORD *)(a1 + 16);
        sub_19C2A1E6C(v5, *(_QWORD **)(v5 + 8));
        MEMORY[0x1A1AD355C](v7, 0x1020C4062D53EE8);
      }
    }
    else if (v5)
    {
      MEMORY[0x1A1AD3538](v5, 0x1062C802AB6010CLL);
    }
  }
  return a1;
}

unsigned __int8 *sub_19C2CFC44(unsigned __int8 *result)
{
  unsigned __int8 *v1;
  uint64_t v2;
  std::string *v3;
  uint64_t v4;
  std::string *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(void);
  char v10;
  std::string v11[2];

  v1 = result;
  if (result[9])
  {
    v2 = result[8];
    if ((v2 - 19) <= 0xFFFFFFED)
    {
      sub_19C2CF5C8((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v3 = sub_19C2CF5E0(v11, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_19C2CF710((uint64_t)&v10, (const char **)&v3->__r_.__value_.__l.__data_);
      result = (unsigned __int8 *)sub_19C2CF718((uint64_t)v11);
    }
    switch(v2)
    {
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 13:
      case 14:
      case 15:
      case 16:
      case 17:
      case 18:
        **(_DWORD **)v1 = 0;
        break;
      case 9:
      case 12:
        result = (unsigned __int8 *)sub_19C2CA224(*(_QWORD *)v1);
        break;
      case 10:
      case 11:
        result = (unsigned __int8 *)sub_19C2D99E4(*(_QWORD *)v1);
        break;
      default:
        return result;
    }
  }
  else if ((result[10] & 1) == 0)
  {
    v4 = result[8];
    if ((v4 - 19) <= 0xFFFFFFED)
    {
      sub_19C2CF5C8((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v5 = sub_19C2CF5E0(v11, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_19C2CF710((uint64_t)&v10, (const char **)&v5->__r_.__value_.__l.__data_);
      result = (unsigned __int8 *)sub_19C2CF718((uint64_t)v11);
    }
    v6 = dword_19C46DB58[v4];
    if (v6 == 10)
    {
      v8 = **(_QWORD **)v1;
      if ((v1[10] & 0x10) != 0)
        v9 = *(uint64_t (**)(void))(v8 + 112);
      else
        v9 = *(uint64_t (**)(void))(v8 + 40);
      result = (unsigned __int8 *)v9();
    }
    else if (v6 == 9)
    {
      v7 = *(_QWORD *)v1;
      if (*(char *)(*(_QWORD *)v1 + 23) < 0)
      {
        **(_BYTE **)v7 = 0;
        *(_QWORD *)(v7 + 8) = 0;
      }
      else
      {
        *(_BYTE *)v7 = 0;
        *(_BYTE *)(v7 + 23) = 0;
      }
    }
    v1[10] = v1[10] & 0xF0 | 1;
  }
  return result;
}

void sub_19C2CFDD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19C2CFDF8(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v9;
  char v10;
  std::string *v11;
  std::string *v12;
  std::string *v13;
  uint64_t v14;
  std::string *v15;
  std::string *v16;
  char v17;
  std::string v18[2];

  result = (uint64_t)sub_19C2D4754(a1, a2);
  v9 = result;
  *(_QWORD *)(result + 16) = a5;
  if (v10)
  {
    *(_BYTE *)(result + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_19C2CF5C8((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v11 = sub_19C2CF5E0(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_19C2CF710((uint64_t)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
      result = sub_19C2CF718((uint64_t)v18);
    }
    if (dword_19C46DB58[a3] != 1)
    {
      sub_19C2CF5C8((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 348);
      v12 = sub_19C2CF5E0(v18, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_INT32): ");
      sub_19C2CF710((uint64_t)&v17, (const char **)&v12->__r_.__value_.__l.__data_);
      result = sub_19C2CF718((uint64_t)v18);
    }
    *(_BYTE *)(v9 + 9) = 0;
  }
  else
  {
    if (*(_BYTE *)(result + 9))
    {
      sub_19C2CF5C8((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 348);
      v13 = sub_19C2CF5E0(v18, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (OPTIONAL_FIELD): ");
      sub_19C2CF710((uint64_t)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
      result = sub_19C2CF718((uint64_t)v18);
    }
    v14 = *(unsigned __int8 *)(v9 + 8);
    if ((v14 - 19) <= 0xFFFFFFED)
    {
      sub_19C2CF5C8((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v15 = sub_19C2CF5E0(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_19C2CF710((uint64_t)&v17, (const char **)&v15->__r_.__value_.__l.__data_);
      result = sub_19C2CF718((uint64_t)v18);
    }
    if (dword_19C46DB58[v14] != 1)
    {
      sub_19C2CF5C8((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 348);
      v16 = sub_19C2CF5E0(v18, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_INT32): ");
      sub_19C2CF710((uint64_t)&v17, (const char **)&v16->__r_.__value_.__l.__data_);
      result = sub_19C2CF718((uint64_t)v18);
    }
  }
  *(_BYTE *)(v9 + 10) &= 0xF0u;
  *(_DWORD *)v9 = a4;
  return result;
}

void sub_19C2CFFD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19C2D000C(uint64_t *a1, uint64_t a2, int a3, int a4, int a5, uint64_t *a6)
{
  uint64_t **v11;
  uint64_t **v12;
  char v13;
  std::string *v14;
  std::string *v15;
  uint64_t v16;
  uint64_t *v17;
  std::string *v18;
  uint64_t v19;
  std::string *v20;
  std::string *v21;
  std::string *v22;
  int *v23;
  uint64_t v24;
  int v25;
  uint64_t result;
  char v27;
  std::string v28[2];

  v11 = sub_19C2D4754((uint64_t)a1, a2);
  v12 = v11;
  v11[2] = a6;
  if (v13)
  {
    *((_BYTE *)v11 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_19C2CF5C8((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v14 = sub_19C2CF5E0(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_19C2CF710((uint64_t)&v27, (const char **)&v14->__r_.__value_.__l.__data_);
      sub_19C2CF718((uint64_t)v28);
    }
    if (dword_19C46DB58[a3] != 1)
    {
      sub_19C2CF5C8((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 348);
      v15 = sub_19C2CF5E0(v28, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_INT32): ");
      sub_19C2CF710((uint64_t)&v27, (const char **)&v15->__r_.__value_.__l.__data_);
      sub_19C2CF718((uint64_t)v28);
    }
    *((_BYTE *)v12 + 9) = 1;
    *((_BYTE *)v12 + 11) = a4;
    v16 = *a1;
    if (*a1)
    {
      if ((*(_BYTE *)(v16 + 24) & 1) != 0)
        (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v16 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v16 + 32) + 32), &unk_1E3D32A18, 16);
      v17 = (uint64_t *)sub_19C2CDDDC((unint64_t *)v16, 0x10uLL, (uint64_t)sub_19C2D92A4);
      *v17 = 0;
      v17[1] = v16;
    }
    else
    {
      v17 = (uint64_t *)operator new();
      *v17 = 0;
      v17[1] = 0;
    }
    *v12 = v17;
  }
  else
  {
    if (!*((_BYTE *)v11 + 9))
    {
      sub_19C2CF5C8((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 348);
      v18 = sub_19C2CF5E0(v28, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (REPEATED_FIELD): ");
      sub_19C2CF710((uint64_t)&v27, (const char **)&v18->__r_.__value_.__l.__data_);
      sub_19C2CF718((uint64_t)v28);
    }
    v19 = *((unsigned __int8 *)v12 + 8);
    if ((v19 - 19) <= 0xFFFFFFED)
    {
      sub_19C2CF5C8((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v20 = sub_19C2CF5E0(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_19C2CF710((uint64_t)&v27, (const char **)&v20->__r_.__value_.__l.__data_);
      sub_19C2CF718((uint64_t)v28);
    }
    if (dword_19C46DB58[v19] != 1)
    {
      sub_19C2CF5C8((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 348);
      v21 = sub_19C2CF5E0(v28, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_INT32): ");
      sub_19C2CF710((uint64_t)&v27, (const char **)&v21->__r_.__value_.__l.__data_);
      sub_19C2CF718((uint64_t)v28);
    }
    if (*((unsigned __int8 *)v12 + 11) != a4)
    {
      sub_19C2CF5C8((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 348);
      v22 = sub_19C2CF5E0(v28, "CHECK failed: (extension->is_packed) == (packed): ");
      sub_19C2CF710((uint64_t)&v27, (const char **)&v22->__r_.__value_.__l.__data_);
      sub_19C2CF718((uint64_t)v28);
    }
  }
  v23 = (int *)*v12;
  v24 = *v23;
  if ((_DWORD)v24 == v23[1])
  {
    v25 = v24 + 1;
    sub_19C2DE744(v23, v24 + 1);
    result = sub_19C2DEBB8((uint64_t)v23);
    *(_DWORD *)(result + 4 * v24) = a5;
  }
  else
  {
    result = sub_19C2DEBB8((uint64_t)v23);
    *(_DWORD *)(result + 4 * v24) = a5;
    v25 = v24 + 1;
  }
  *v23 = v25;
  return result;
}

void sub_19C2D02EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19C2D032C(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v9;
  char v10;
  std::string *v11;
  std::string *v12;
  std::string *v13;
  uint64_t v14;
  std::string *v15;
  std::string *v16;
  char v17;
  std::string v18[2];

  result = (uint64_t)sub_19C2D4754(a1, a2);
  v9 = result;
  *(_QWORD *)(result + 16) = a5;
  if (v10)
  {
    *(_BYTE *)(result + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_19C2CF5C8((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v11 = sub_19C2CF5E0(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_19C2CF710((uint64_t)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
      result = sub_19C2CF718((uint64_t)v18);
    }
    if (dword_19C46DB58[a3] != 2)
    {
      sub_19C2CF5C8((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 349);
      v12 = sub_19C2CF5E0(v18, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_INT64): ");
      sub_19C2CF710((uint64_t)&v17, (const char **)&v12->__r_.__value_.__l.__data_);
      result = sub_19C2CF718((uint64_t)v18);
    }
    *(_BYTE *)(v9 + 9) = 0;
  }
  else
  {
    if (*(_BYTE *)(result + 9))
    {
      sub_19C2CF5C8((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 349);
      v13 = sub_19C2CF5E0(v18, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (OPTIONAL_FIELD): ");
      sub_19C2CF710((uint64_t)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
      result = sub_19C2CF718((uint64_t)v18);
    }
    v14 = *(unsigned __int8 *)(v9 + 8);
    if ((v14 - 19) <= 0xFFFFFFED)
    {
      sub_19C2CF5C8((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v15 = sub_19C2CF5E0(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_19C2CF710((uint64_t)&v17, (const char **)&v15->__r_.__value_.__l.__data_);
      result = sub_19C2CF718((uint64_t)v18);
    }
    if (dword_19C46DB58[v14] != 2)
    {
      sub_19C2CF5C8((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 349);
      v16 = sub_19C2CF5E0(v18, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_INT64): ");
      sub_19C2CF710((uint64_t)&v17, (const char **)&v16->__r_.__value_.__l.__data_);
      result = sub_19C2CF718((uint64_t)v18);
    }
  }
  *(_BYTE *)(v9 + 10) &= 0xF0u;
  *(_QWORD *)v9 = a4;
  return result;
}

void sub_19C2D0508(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19C2D0540(uint64_t *a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t *a6)
{
  uint64_t **v11;
  uint64_t **v12;
  char v13;
  std::string *v14;
  std::string *v15;
  uint64_t v16;
  uint64_t *v17;
  std::string *v18;
  uint64_t v19;
  std::string *v20;
  std::string *v21;
  std::string *v22;
  int *v23;
  uint64_t v24;
  int v25;
  uint64_t result;
  char v27;
  std::string v28[2];

  v11 = sub_19C2D4754((uint64_t)a1, a2);
  v12 = v11;
  v11[2] = a6;
  if (v13)
  {
    *((_BYTE *)v11 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_19C2CF5C8((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v14 = sub_19C2CF5E0(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_19C2CF710((uint64_t)&v27, (const char **)&v14->__r_.__value_.__l.__data_);
      sub_19C2CF718((uint64_t)v28);
    }
    if (dword_19C46DB58[a3] != 2)
    {
      sub_19C2CF5C8((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 349);
      v15 = sub_19C2CF5E0(v28, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_INT64): ");
      sub_19C2CF710((uint64_t)&v27, (const char **)&v15->__r_.__value_.__l.__data_);
      sub_19C2CF718((uint64_t)v28);
    }
    *((_BYTE *)v12 + 9) = 1;
    *((_BYTE *)v12 + 11) = a4;
    v16 = *a1;
    if (*a1)
    {
      if ((*(_BYTE *)(v16 + 24) & 1) != 0)
        (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v16 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v16 + 32) + 32), &unk_1E3D32A38, 16);
      v17 = (uint64_t *)sub_19C2CDDDC((unint64_t *)v16, 0x10uLL, (uint64_t)sub_19C2D92A8);
      *v17 = 0;
      v17[1] = v16;
    }
    else
    {
      v17 = (uint64_t *)operator new();
      *v17 = 0;
      v17[1] = 0;
    }
    *v12 = v17;
  }
  else
  {
    if (!*((_BYTE *)v11 + 9))
    {
      sub_19C2CF5C8((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 349);
      v18 = sub_19C2CF5E0(v28, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (REPEATED_FIELD): ");
      sub_19C2CF710((uint64_t)&v27, (const char **)&v18->__r_.__value_.__l.__data_);
      sub_19C2CF718((uint64_t)v28);
    }
    v19 = *((unsigned __int8 *)v12 + 8);
    if ((v19 - 19) <= 0xFFFFFFED)
    {
      sub_19C2CF5C8((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v20 = sub_19C2CF5E0(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_19C2CF710((uint64_t)&v27, (const char **)&v20->__r_.__value_.__l.__data_);
      sub_19C2CF718((uint64_t)v28);
    }
    if (dword_19C46DB58[v19] != 2)
    {
      sub_19C2CF5C8((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 349);
      v21 = sub_19C2CF5E0(v28, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_INT64): ");
      sub_19C2CF710((uint64_t)&v27, (const char **)&v21->__r_.__value_.__l.__data_);
      sub_19C2CF718((uint64_t)v28);
    }
    if (*((unsigned __int8 *)v12 + 11) != a4)
    {
      sub_19C2CF5C8((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 349);
      v22 = sub_19C2CF5E0(v28, "CHECK failed: (extension->is_packed) == (packed): ");
      sub_19C2CF710((uint64_t)&v27, (const char **)&v22->__r_.__value_.__l.__data_);
      sub_19C2CF718((uint64_t)v28);
    }
  }
  v23 = (int *)*v12;
  v24 = *v23;
  if ((_DWORD)v24 == v23[1])
  {
    v25 = v24 + 1;
    sub_19C2DF394(v23, v24 + 1);
    result = sub_19C2DF808((uint64_t)v23);
    *(_QWORD *)(result + 8 * v24) = a5;
  }
  else
  {
    result = sub_19C2DF808((uint64_t)v23);
    *(_QWORD *)(result + 8 * v24) = a5;
    v25 = v24 + 1;
  }
  *v23 = v25;
  return result;
}

void sub_19C2D0820(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19C2D0860(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v9;
  char v10;
  std::string *v11;
  std::string *v12;
  std::string *v13;
  uint64_t v14;
  std::string *v15;
  std::string *v16;
  char v17;
  std::string v18[2];

  result = (uint64_t)sub_19C2D4754(a1, a2);
  v9 = result;
  *(_QWORD *)(result + 16) = a5;
  if (v10)
  {
    *(_BYTE *)(result + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_19C2CF5C8((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v11 = sub_19C2CF5E0(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_19C2CF710((uint64_t)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
      result = sub_19C2CF718((uint64_t)v18);
    }
    if (dword_19C46DB58[a3] != 3)
    {
      sub_19C2CF5C8((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 350);
      v12 = sub_19C2CF5E0(v18, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_UINT32): ");
      sub_19C2CF710((uint64_t)&v17, (const char **)&v12->__r_.__value_.__l.__data_);
      result = sub_19C2CF718((uint64_t)v18);
    }
    *(_BYTE *)(v9 + 9) = 0;
  }
  else
  {
    if (*(_BYTE *)(result + 9))
    {
      sub_19C2CF5C8((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 350);
      v13 = sub_19C2CF5E0(v18, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (OPTIONAL_FIELD): ");
      sub_19C2CF710((uint64_t)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
      result = sub_19C2CF718((uint64_t)v18);
    }
    v14 = *(unsigned __int8 *)(v9 + 8);
    if ((v14 - 19) <= 0xFFFFFFED)
    {
      sub_19C2CF5C8((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v15 = sub_19C2CF5E0(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_19C2CF710((uint64_t)&v17, (const char **)&v15->__r_.__value_.__l.__data_);
      result = sub_19C2CF718((uint64_t)v18);
    }
    if (dword_19C46DB58[v14] != 3)
    {
      sub_19C2CF5C8((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 350);
      v16 = sub_19C2CF5E0(v18, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_UINT32): ");
      sub_19C2CF710((uint64_t)&v17, (const char **)&v16->__r_.__value_.__l.__data_);
      result = sub_19C2CF718((uint64_t)v18);
    }
  }
  *(_BYTE *)(v9 + 10) &= 0xF0u;
  *(_DWORD *)v9 = a4;
  return result;
}

void sub_19C2D0A3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19C2D0A74(uint64_t *a1, uint64_t a2, int a3, int a4, int a5, uint64_t *a6)
{
  uint64_t **v11;
  uint64_t **v12;
  char v13;
  std::string *v14;
  std::string *v15;
  uint64_t v16;
  uint64_t *v17;
  std::string *v18;
  uint64_t v19;
  std::string *v20;
  std::string *v21;
  std::string *v22;
  int *v23;
  uint64_t v24;
  int v25;
  uint64_t result;
  char v27;
  std::string v28[2];

  v11 = sub_19C2D4754((uint64_t)a1, a2);
  v12 = v11;
  v11[2] = a6;
  if (v13)
  {
    *((_BYTE *)v11 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_19C2CF5C8((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v14 = sub_19C2CF5E0(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_19C2CF710((uint64_t)&v27, (const char **)&v14->__r_.__value_.__l.__data_);
      sub_19C2CF718((uint64_t)v28);
    }
    if (dword_19C46DB58[a3] != 3)
    {
      sub_19C2CF5C8((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 350);
      v15 = sub_19C2CF5E0(v28, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_UINT32): ");
      sub_19C2CF710((uint64_t)&v27, (const char **)&v15->__r_.__value_.__l.__data_);
      sub_19C2CF718((uint64_t)v28);
    }
    *((_BYTE *)v12 + 9) = 1;
    *((_BYTE *)v12 + 11) = a4;
    v16 = *a1;
    if (*a1)
    {
      if ((*(_BYTE *)(v16 + 24) & 1) != 0)
        (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v16 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v16 + 32) + 32), &unk_1E3D32A28, 16);
      v17 = (uint64_t *)sub_19C2CDDDC((unint64_t *)v16, 0x10uLL, (uint64_t)sub_19C2D92AC);
      *v17 = 0;
      v17[1] = v16;
    }
    else
    {
      v17 = (uint64_t *)operator new();
      *v17 = 0;
      v17[1] = 0;
    }
    *v12 = v17;
  }
  else
  {
    if (!*((_BYTE *)v11 + 9))
    {
      sub_19C2CF5C8((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 350);
      v18 = sub_19C2CF5E0(v28, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (REPEATED_FIELD): ");
      sub_19C2CF710((uint64_t)&v27, (const char **)&v18->__r_.__value_.__l.__data_);
      sub_19C2CF718((uint64_t)v28);
    }
    v19 = *((unsigned __int8 *)v12 + 8);
    if ((v19 - 19) <= 0xFFFFFFED)
    {
      sub_19C2CF5C8((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v20 = sub_19C2CF5E0(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_19C2CF710((uint64_t)&v27, (const char **)&v20->__r_.__value_.__l.__data_);
      sub_19C2CF718((uint64_t)v28);
    }
    if (dword_19C46DB58[v19] != 3)
    {
      sub_19C2CF5C8((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 350);
      v21 = sub_19C2CF5E0(v28, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_UINT32): ");
      sub_19C2CF710((uint64_t)&v27, (const char **)&v21->__r_.__value_.__l.__data_);
      sub_19C2CF718((uint64_t)v28);
    }
    if (*((unsigned __int8 *)v12 + 11) != a4)
    {
      sub_19C2CF5C8((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 350);
      v22 = sub_19C2CF5E0(v28, "CHECK failed: (extension->is_packed) == (packed): ");
      sub_19C2CF710((uint64_t)&v27, (const char **)&v22->__r_.__value_.__l.__data_);
      sub_19C2CF718((uint64_t)v28);
    }
  }
  v23 = (int *)*v12;
  v24 = *v23;
  if ((_DWORD)v24 == v23[1])
  {
    v25 = v24 + 1;
    sub_19C2DED6C(v23, v24 + 1);
    result = sub_19C2DF1E0((uint64_t)v23);
    *(_DWORD *)(result + 4 * v24) = a5;
  }
  else
  {
    result = sub_19C2DF1E0((uint64_t)v23);
    *(_DWORD *)(result + 4 * v24) = a5;
    v25 = v24 + 1;
  }
  *v23 = v25;
  return result;
}

void sub_19C2D0D54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19C2D0D94(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v9;
  char v10;
  std::string *v11;
  std::string *v12;
  std::string *v13;
  uint64_t v14;
  std::string *v15;
  std::string *v16;
  char v17;
  std::string v18[2];

  result = (uint64_t)sub_19C2D4754(a1, a2);
  v9 = result;
  *(_QWORD *)(result + 16) = a5;
  if (v10)
  {
    *(_BYTE *)(result + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_19C2CF5C8((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v11 = sub_19C2CF5E0(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_19C2CF710((uint64_t)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
      result = sub_19C2CF718((uint64_t)v18);
    }
    if (dword_19C46DB58[a3] != 4)
    {
      sub_19C2CF5C8((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 351);
      v12 = sub_19C2CF5E0(v18, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_UINT64): ");
      sub_19C2CF710((uint64_t)&v17, (const char **)&v12->__r_.__value_.__l.__data_);
      result = sub_19C2CF718((uint64_t)v18);
    }
    *(_BYTE *)(v9 + 9) = 0;
  }
  else
  {
    if (*(_BYTE *)(result + 9))
    {
      sub_19C2CF5C8((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 351);
      v13 = sub_19C2CF5E0(v18, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (OPTIONAL_FIELD): ");
      sub_19C2CF710((uint64_t)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
      result = sub_19C2CF718((uint64_t)v18);
    }
    v14 = *(unsigned __int8 *)(v9 + 8);
    if ((v14 - 19) <= 0xFFFFFFED)
    {
      sub_19C2CF5C8((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v15 = sub_19C2CF5E0(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_19C2CF710((uint64_t)&v17, (const char **)&v15->__r_.__value_.__l.__data_);
      result = sub_19C2CF718((uint64_t)v18);
    }
    if (dword_19C46DB58[v14] != 4)
    {
      sub_19C2CF5C8((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 351);
      v16 = sub_19C2CF5E0(v18, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_UINT64): ");
      sub_19C2CF710((uint64_t)&v17, (const char **)&v16->__r_.__value_.__l.__data_);
      result = sub_19C2CF718((uint64_t)v18);
    }
  }
  *(_BYTE *)(v9 + 10) &= 0xF0u;
  *(_QWORD *)v9 = a4;
  return result;
}

void sub_19C2D0F70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19C2D0FA8(uint64_t *a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t *a6)
{
  uint64_t **v11;
  uint64_t **v12;
  char v13;
  std::string *v14;
  std::string *v15;
  uint64_t v16;
  uint64_t *v17;
  std::string *v18;
  uint64_t v19;
  std::string *v20;
  std::string *v21;
  std::string *v22;
  int *v23;
  uint64_t v24;
  int v25;
  uint64_t result;
  char v27;
  std::string v28[2];

  v11 = sub_19C2D4754((uint64_t)a1, a2);
  v12 = v11;
  v11[2] = a6;
  if (v13)
  {
    *((_BYTE *)v11 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_19C2CF5C8((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v14 = sub_19C2CF5E0(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_19C2CF710((uint64_t)&v27, (const char **)&v14->__r_.__value_.__l.__data_);
      sub_19C2CF718((uint64_t)v28);
    }
    if (dword_19C46DB58[a3] != 4)
    {
      sub_19C2CF5C8((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 351);
      v15 = sub_19C2CF5E0(v28, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_UINT64): ");
      sub_19C2CF710((uint64_t)&v27, (const char **)&v15->__r_.__value_.__l.__data_);
      sub_19C2CF718((uint64_t)v28);
    }
    *((_BYTE *)v12 + 9) = 1;
    *((_BYTE *)v12 + 11) = a4;
    v16 = *a1;
    if (*a1)
    {
      if ((*(_BYTE *)(v16 + 24) & 1) != 0)
        (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v16 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v16 + 32) + 32), &unk_1E3D32A48, 16);
      v17 = (uint64_t *)sub_19C2CDDDC((unint64_t *)v16, 0x10uLL, (uint64_t)sub_19C2D92B0);
      *v17 = 0;
      v17[1] = v16;
    }
    else
    {
      v17 = (uint64_t *)operator new();
      *v17 = 0;
      v17[1] = 0;
    }
    *v12 = v17;
  }
  else
  {
    if (!*((_BYTE *)v11 + 9))
    {
      sub_19C2CF5C8((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 351);
      v18 = sub_19C2CF5E0(v28, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (REPEATED_FIELD): ");
      sub_19C2CF710((uint64_t)&v27, (const char **)&v18->__r_.__value_.__l.__data_);
      sub_19C2CF718((uint64_t)v28);
    }
    v19 = *((unsigned __int8 *)v12 + 8);
    if ((v19 - 19) <= 0xFFFFFFED)
    {
      sub_19C2CF5C8((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v20 = sub_19C2CF5E0(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_19C2CF710((uint64_t)&v27, (const char **)&v20->__r_.__value_.__l.__data_);
      sub_19C2CF718((uint64_t)v28);
    }
    if (dword_19C46DB58[v19] != 4)
    {
      sub_19C2CF5C8((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 351);
      v21 = sub_19C2CF5E0(v28, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_UINT64): ");
      sub_19C2CF710((uint64_t)&v27, (const char **)&v21->__r_.__value_.__l.__data_);
      sub_19C2CF718((uint64_t)v28);
    }
    if (*((unsigned __int8 *)v12 + 11) != a4)
    {
      sub_19C2CF5C8((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 351);
      v22 = sub_19C2CF5E0(v28, "CHECK failed: (extension->is_packed) == (packed): ");
      sub_19C2CF710((uint64_t)&v27, (const char **)&v22->__r_.__value_.__l.__data_);
      sub_19C2CF718((uint64_t)v28);
    }
  }
  v23 = (int *)*v12;
  v24 = *v23;
  if ((_DWORD)v24 == v23[1])
  {
    v25 = v24 + 1;
    sub_19C2DF9BC(v23, v24 + 1);
    result = sub_19C2DFE30((uint64_t)v23);
    *(_QWORD *)(result + 8 * v24) = a5;
  }
  else
  {
    result = sub_19C2DFE30((uint64_t)v23);
    *(_QWORD *)(result + 8 * v24) = a5;
    v25 = v24 + 1;
  }
  *v23 = v25;
  return result;
}

void sub_19C2D1288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19C2D12C8(uint64_t a1, uint64_t a2, int a3, uint64_t a4, float a5)
{
  uint64_t result;
  uint64_t v9;
  char v10;
  std::string *v11;
  std::string *v12;
  std::string *v13;
  uint64_t v14;
  std::string *v15;
  std::string *v16;
  char v17;
  std::string v18[2];

  result = (uint64_t)sub_19C2D4754(a1, a2);
  v9 = result;
  *(_QWORD *)(result + 16) = a4;
  if (v10)
  {
    *(_BYTE *)(result + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_19C2CF5C8((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v11 = sub_19C2CF5E0(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_19C2CF710((uint64_t)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
      result = sub_19C2CF718((uint64_t)v18);
    }
    if (dword_19C46DB58[a3] != 6)
    {
      sub_19C2CF5C8((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 352);
      v12 = sub_19C2CF5E0(v18, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_FLOAT): ");
      sub_19C2CF710((uint64_t)&v17, (const char **)&v12->__r_.__value_.__l.__data_);
      result = sub_19C2CF718((uint64_t)v18);
    }
    *(_BYTE *)(v9 + 9) = 0;
  }
  else
  {
    if (*(_BYTE *)(result + 9))
    {
      sub_19C2CF5C8((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 352);
      v13 = sub_19C2CF5E0(v18, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (OPTIONAL_FIELD): ");
      sub_19C2CF710((uint64_t)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
      result = sub_19C2CF718((uint64_t)v18);
    }
    v14 = *(unsigned __int8 *)(v9 + 8);
    if ((v14 - 19) <= 0xFFFFFFED)
    {
      sub_19C2CF5C8((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v15 = sub_19C2CF5E0(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_19C2CF710((uint64_t)&v17, (const char **)&v15->__r_.__value_.__l.__data_);
      result = sub_19C2CF718((uint64_t)v18);
    }
    if (dword_19C46DB58[v14] != 6)
    {
      sub_19C2CF5C8((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 352);
      v16 = sub_19C2CF5E0(v18, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_FLOAT): ");
      sub_19C2CF710((uint64_t)&v17, (const char **)&v16->__r_.__value_.__l.__data_);
      result = sub_19C2CF718((uint64_t)v18);
    }
  }
  *(_BYTE *)(v9 + 10) &= 0xF0u;
  *(float *)v9 = a5;
  return result;
}

void sub_19C2D14AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19C2D14E4(uint64_t *a1, uint64_t a2, int a3, int a4, uint64_t *a5, float a6)
{
  uint64_t **v11;
  uint64_t **v12;
  char v13;
  std::string *v14;
  std::string *v15;
  uint64_t v16;
  uint64_t *v17;
  std::string *v18;
  uint64_t v19;
  std::string *v20;
  std::string *v21;
  std::string *v22;
  int *v23;
  uint64_t v24;
  int v25;
  uint64_t result;
  char v27;
  std::string v28[2];

  v11 = sub_19C2D4754((uint64_t)a1, a2);
  v12 = v11;
  v11[2] = a5;
  if (v13)
  {
    *((_BYTE *)v11 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_19C2CF5C8((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v14 = sub_19C2CF5E0(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_19C2CF710((uint64_t)&v27, (const char **)&v14->__r_.__value_.__l.__data_);
      sub_19C2CF718((uint64_t)v28);
    }
    if (dword_19C46DB58[a3] != 6)
    {
      sub_19C2CF5C8((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 352);
      v15 = sub_19C2CF5E0(v28, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_FLOAT): ");
      sub_19C2CF710((uint64_t)&v27, (const char **)&v15->__r_.__value_.__l.__data_);
      sub_19C2CF718((uint64_t)v28);
    }
    *((_BYTE *)v12 + 9) = 1;
    *((_BYTE *)v12 + 11) = a4;
    v16 = *a1;
    if (*a1)
    {
      if ((*(_BYTE *)(v16 + 24) & 1) != 0)
        (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v16 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v16 + 32) + 32), &unk_1E3D32A08, 16);
      v17 = (uint64_t *)sub_19C2CDDDC((unint64_t *)v16, 0x10uLL, (uint64_t)sub_19C2D92B4);
      *v17 = 0;
      v17[1] = v16;
    }
    else
    {
      v17 = (uint64_t *)operator new();
      *v17 = 0;
      v17[1] = 0;
    }
    *v12 = v17;
  }
  else
  {
    if (!*((_BYTE *)v11 + 9))
    {
      sub_19C2CF5C8((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 352);
      v18 = sub_19C2CF5E0(v28, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (REPEATED_FIELD): ");
      sub_19C2CF710((uint64_t)&v27, (const char **)&v18->__r_.__value_.__l.__data_);
      sub_19C2CF718((uint64_t)v28);
    }
    v19 = *((unsigned __int8 *)v12 + 8);
    if ((v19 - 19) <= 0xFFFFFFED)
    {
      sub_19C2CF5C8((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v20 = sub_19C2CF5E0(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_19C2CF710((uint64_t)&v27, (const char **)&v20->__r_.__value_.__l.__data_);
      sub_19C2CF718((uint64_t)v28);
    }
    if (dword_19C46DB58[v19] != 6)
    {
      sub_19C2CF5C8((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 352);
      v21 = sub_19C2CF5E0(v28, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_FLOAT): ");
      sub_19C2CF710((uint64_t)&v27, (const char **)&v21->__r_.__value_.__l.__data_);
      sub_19C2CF718((uint64_t)v28);
    }
    if (*((unsigned __int8 *)v12 + 11) != a4)
    {
      sub_19C2CF5C8((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 352);
      v22 = sub_19C2CF5E0(v28, "CHECK failed: (extension->is_packed) == (packed): ");
      sub_19C2CF710((uint64_t)&v27, (const char **)&v22->__r_.__value_.__l.__data_);
      sub_19C2CF718((uint64_t)v28);
    }
  }
  v23 = (int *)*v12;
  v24 = *v23;
  if ((_DWORD)v24 == v23[1])
  {
    v25 = v24 + 1;
    sub_19C2DFFE4(v23, v24 + 1);
    result = sub_19C2E0458((uint64_t)v23);
    *(float *)(result + 4 * v24) = a6;
  }
  else
  {
    result = sub_19C2E0458((uint64_t)v23);
    *(float *)(result + 4 * v24) = a6;
    v25 = v24 + 1;
  }
  *v23 = v25;
  return result;
}

void sub_19C2D17CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19C2D180C(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5)
{
  uint64_t result;
  uint64_t v9;
  char v10;
  std::string *v11;
  std::string *v12;
  std::string *v13;
  uint64_t v14;
  std::string *v15;
  std::string *v16;
  char v17;
  std::string v18[2];

  result = (uint64_t)sub_19C2D4754(a1, a2);
  v9 = result;
  *(_QWORD *)(result + 16) = a4;
  if (v10)
  {
    *(_BYTE *)(result + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_19C2CF5C8((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v11 = sub_19C2CF5E0(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_19C2CF710((uint64_t)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
      result = sub_19C2CF718((uint64_t)v18);
    }
    if (dword_19C46DB58[a3] != 5)
    {
      sub_19C2CF5C8((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 353);
      v12 = sub_19C2CF5E0(v18, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_DOUBLE): ");
      sub_19C2CF710((uint64_t)&v17, (const char **)&v12->__r_.__value_.__l.__data_);
      result = sub_19C2CF718((uint64_t)v18);
    }
    *(_BYTE *)(v9 + 9) = 0;
  }
  else
  {
    if (*(_BYTE *)(result + 9))
    {
      sub_19C2CF5C8((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 353);
      v13 = sub_19C2CF5E0(v18, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (OPTIONAL_FIELD): ");
      sub_19C2CF710((uint64_t)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
      result = sub_19C2CF718((uint64_t)v18);
    }
    v14 = *(unsigned __int8 *)(v9 + 8);
    if ((v14 - 19) <= 0xFFFFFFED)
    {
      sub_19C2CF5C8((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v15 = sub_19C2CF5E0(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_19C2CF710((uint64_t)&v17, (const char **)&v15->__r_.__value_.__l.__data_);
      result = sub_19C2CF718((uint64_t)v18);
    }
    if (dword_19C46DB58[v14] != 5)
    {
      sub_19C2CF5C8((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 353);
      v16 = sub_19C2CF5E0(v18, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_DOUBLE): ");
      sub_19C2CF710((uint64_t)&v17, (const char **)&v16->__r_.__value_.__l.__data_);
      result = sub_19C2CF718((uint64_t)v18);
    }
  }
  *(_BYTE *)(v9 + 10) &= 0xF0u;
  *(double *)v9 = a5;
  return result;
}

void sub_19C2D19F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19C2D1A28(uint64_t *a1, uint64_t a2, int a3, int a4, uint64_t *a5, double a6)
{
  uint64_t **v11;
  uint64_t **v12;
  char v13;
  std::string *v14;
  std::string *v15;
  uint64_t v16;
  uint64_t *v17;
  std::string *v18;
  uint64_t v19;
  std::string *v20;
  std::string *v21;
  std::string *v22;
  int *v23;
  uint64_t v24;
  int v25;
  uint64_t result;
  char v27;
  std::string v28[2];

  v11 = sub_19C2D4754((uint64_t)a1, a2);
  v12 = v11;
  v11[2] = a5;
  if (v13)
  {
    *((_BYTE *)v11 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_19C2CF5C8((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v14 = sub_19C2CF5E0(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_19C2CF710((uint64_t)&v27, (const char **)&v14->__r_.__value_.__l.__data_);
      sub_19C2CF718((uint64_t)v28);
    }
    if (dword_19C46DB58[a3] != 5)
    {
      sub_19C2CF5C8((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 353);
      v15 = sub_19C2CF5E0(v28, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_DOUBLE): ");
      sub_19C2CF710((uint64_t)&v27, (const char **)&v15->__r_.__value_.__l.__data_);
      sub_19C2CF718((uint64_t)v28);
    }
    *((_BYTE *)v12 + 9) = 1;
    *((_BYTE *)v12 + 11) = a4;
    v16 = *a1;
    if (*a1)
    {
      if ((*(_BYTE *)(v16 + 24) & 1) != 0)
        (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v16 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v16 + 32) + 32), &unk_1E3D329F8, 16);
      v17 = (uint64_t *)sub_19C2CDDDC((unint64_t *)v16, 0x10uLL, (uint64_t)sub_19C2D92B8);
      *v17 = 0;
      v17[1] = v16;
    }
    else
    {
      v17 = (uint64_t *)operator new();
      *v17 = 0;
      v17[1] = 0;
    }
    *v12 = v17;
  }
  else
  {
    if (!*((_BYTE *)v11 + 9))
    {
      sub_19C2CF5C8((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 353);
      v18 = sub_19C2CF5E0(v28, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (REPEATED_FIELD): ");
      sub_19C2CF710((uint64_t)&v27, (const char **)&v18->__r_.__value_.__l.__data_);
      sub_19C2CF718((uint64_t)v28);
    }
    v19 = *((unsigned __int8 *)v12 + 8);
    if ((v19 - 19) <= 0xFFFFFFED)
    {
      sub_19C2CF5C8((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v20 = sub_19C2CF5E0(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_19C2CF710((uint64_t)&v27, (const char **)&v20->__r_.__value_.__l.__data_);
      sub_19C2CF718((uint64_t)v28);
    }
    if (dword_19C46DB58[v19] != 5)
    {
      sub_19C2CF5C8((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 353);
      v21 = sub_19C2CF5E0(v28, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_DOUBLE): ");
      sub_19C2CF710((uint64_t)&v27, (const char **)&v21->__r_.__value_.__l.__data_);
      sub_19C2CF718((uint64_t)v28);
    }
    if (*((unsigned __int8 *)v12 + 11) != a4)
    {
      sub_19C2CF5C8((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 353);
      v22 = sub_19C2CF5E0(v28, "CHECK failed: (extension->is_packed) == (packed): ");
      sub_19C2CF710((uint64_t)&v27, (const char **)&v22->__r_.__value_.__l.__data_);
      sub_19C2CF718((uint64_t)v28);
    }
  }
  v23 = (int *)*v12;
  v24 = *v23;
  if ((_DWORD)v24 == v23[1])
  {
    v25 = v24 + 1;
    sub_19C2E060C(v23, v24 + 1);
    result = sub_19C2E0A80((uint64_t)v23);
    *(double *)(result + 8 * v24) = a6;
  }
  else
  {
    result = sub_19C2E0A80((uint64_t)v23);
    *(double *)(result + 8 * v24) = a6;
    v25 = v24 + 1;
  }
  *v23 = v25;
  return result;
}

void sub_19C2D1D10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19C2D1D50(uint64_t a1, uint64_t a2, int a3, char a4, uint64_t a5)
{
  uint64_t result;
  _BYTE *v9;
  char v10;
  std::string *v11;
  std::string *v12;
  std::string *v13;
  uint64_t v14;
  std::string *v15;
  std::string *v16;
  char v17;
  std::string v18[2];

  result = (uint64_t)sub_19C2D4754(a1, a2);
  v9 = (_BYTE *)result;
  *(_QWORD *)(result + 16) = a5;
  if (v10)
  {
    *(_BYTE *)(result + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_19C2CF5C8((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v11 = sub_19C2CF5E0(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_19C2CF710((uint64_t)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
      result = sub_19C2CF718((uint64_t)v18);
    }
    if (dword_19C46DB58[a3] != 7)
    {
      sub_19C2CF5C8((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 354);
      v12 = sub_19C2CF5E0(v18, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_BOOL): ");
      sub_19C2CF710((uint64_t)&v17, (const char **)&v12->__r_.__value_.__l.__data_);
      result = sub_19C2CF718((uint64_t)v18);
    }
    v9[9] = 0;
  }
  else
  {
    if (*(_BYTE *)(result + 9))
    {
      sub_19C2CF5C8((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 354);
      v13 = sub_19C2CF5E0(v18, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (OPTIONAL_FIELD): ");
      sub_19C2CF710((uint64_t)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
      result = sub_19C2CF718((uint64_t)v18);
    }
    v14 = v9[8];
    if ((v14 - 19) <= 0xFFFFFFED)
    {
      sub_19C2CF5C8((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v15 = sub_19C2CF5E0(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_19C2CF710((uint64_t)&v17, (const char **)&v15->__r_.__value_.__l.__data_);
      result = sub_19C2CF718((uint64_t)v18);
    }
    if (dword_19C46DB58[v14] != 7)
    {
      sub_19C2CF5C8((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 354);
      v16 = sub_19C2CF5E0(v18, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_BOOL): ");
      sub_19C2CF710((uint64_t)&v17, (const char **)&v16->__r_.__value_.__l.__data_);
      result = sub_19C2CF718((uint64_t)v18);
    }
  }
  v9[10] &= 0xF0u;
  *v9 = a4;
  return result;
}

void sub_19C2D1F2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19C2D1F64(uint64_t *a1, uint64_t a2, int a3, int a4, char a5, uint64_t *a6)
{
  uint64_t **v11;
  uint64_t **v12;
  char v13;
  std::string *v14;
  std::string *v15;
  uint64_t v16;
  uint64_t *v17;
  std::string *v18;
  uint64_t v19;
  std::string *v20;
  std::string *v21;
  std::string *v22;
  int *v23;
  uint64_t v24;
  int v25;
  uint64_t result;
  char v27;
  std::string v28[2];

  v11 = sub_19C2D4754((uint64_t)a1, a2);
  v12 = v11;
  v11[2] = a6;
  if (v13)
  {
    *((_BYTE *)v11 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_19C2CF5C8((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v14 = sub_19C2CF5E0(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_19C2CF710((uint64_t)&v27, (const char **)&v14->__r_.__value_.__l.__data_);
      sub_19C2CF718((uint64_t)v28);
    }
    if (dword_19C46DB58[a3] != 7)
    {
      sub_19C2CF5C8((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 354);
      v15 = sub_19C2CF5E0(v28, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_BOOL): ");
      sub_19C2CF710((uint64_t)&v27, (const char **)&v15->__r_.__value_.__l.__data_);
      sub_19C2CF718((uint64_t)v28);
    }
    *((_BYTE *)v12 + 9) = 1;
    *((_BYTE *)v12 + 11) = a4;
    v16 = *a1;
    if (*a1)
    {
      if ((*(_BYTE *)(v16 + 24) & 1) != 0)
        (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v16 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v16 + 32) + 32), &unk_1E3D329E8, 16);
      v17 = (uint64_t *)sub_19C2CDDDC((unint64_t *)v16, 0x10uLL, (uint64_t)sub_19C2D92BC);
      *v17 = 0;
      v17[1] = v16;
    }
    else
    {
      v17 = (uint64_t *)operator new();
      *v17 = 0;
      v17[1] = 0;
    }
    *v12 = v17;
  }
  else
  {
    if (!*((_BYTE *)v11 + 9))
    {
      sub_19C2CF5C8((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 354);
      v18 = sub_19C2CF5E0(v28, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (REPEATED_FIELD): ");
      sub_19C2CF710((uint64_t)&v27, (const char **)&v18->__r_.__value_.__l.__data_);
      sub_19C2CF718((uint64_t)v28);
    }
    v19 = *((unsigned __int8 *)v12 + 8);
    if ((v19 - 19) <= 0xFFFFFFED)
    {
      sub_19C2CF5C8((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v20 = sub_19C2CF5E0(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_19C2CF710((uint64_t)&v27, (const char **)&v20->__r_.__value_.__l.__data_);
      sub_19C2CF718((uint64_t)v28);
    }
    if (dword_19C46DB58[v19] != 7)
    {
      sub_19C2CF5C8((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 354);
      v21 = sub_19C2CF5E0(v28, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_BOOL): ");
      sub_19C2CF710((uint64_t)&v27, (const char **)&v21->__r_.__value_.__l.__data_);
      sub_19C2CF718((uint64_t)v28);
    }
    if (*((unsigned __int8 *)v12 + 11) != a4)
    {
      sub_19C2CF5C8((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 354);
      v22 = sub_19C2CF5E0(v28, "CHECK failed: (extension->is_packed) == (packed): ");
      sub_19C2CF710((uint64_t)&v27, (const char **)&v22->__r_.__value_.__l.__data_);
      sub_19C2CF718((uint64_t)v28);
    }
  }
  v23 = (int *)*v12;
  v24 = *v23;
  if ((_DWORD)v24 == v23[1])
  {
    v25 = v24 + 1;
    sub_19C2DE124(v23, v24 + 1);
    result = sub_19C2DE594((uint64_t)v23);
    *(_BYTE *)(result + v24) = a5;
  }
  else
  {
    result = sub_19C2DE594((uint64_t)v23);
    *(_BYTE *)(result + v24) = a5;
    v25 = v24 + 1;
  }
  *v23 = v25;
  return result;
}

void sub_19C2D2244(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_19C2D2284(uint64_t *a1, uint64_t a2, int a3, char a4, uint64_t *a5)
{
  uint64_t **v9;
  uint64_t **v10;
  char v11;
  uint64_t v12;
  uint64_t (*v13)();
  uint64_t *v14;
  uint64_t v15;
  uint64_t *(*v16)(uint64_t *);

  v9 = sub_19C2D4754((uint64_t)a1, a2);
  v10 = v9;
  v9[2] = a5;
  if (v11)
  {
    *((_BYTE *)v9 + 9) = 1;
    *((_BYTE *)v9 + 8) = a3;
    *((_BYTE *)v9 + 11) = a4;
    switch(a3)
    {
      case 1:
        v12 = *a1;
        if (!v12)
          goto LABEL_32;
        if ((*(_BYTE *)(v12 + 24) & 1) != 0)
          (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v12 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v12 + 32) + 32), &unk_1E3D329F8, 16);
        v13 = sub_19C2D92B8;
        goto LABEL_31;
      case 2:
        v12 = *a1;
        if (!v12)
          goto LABEL_32;
        if ((*(_BYTE *)(v12 + 24) & 1) != 0)
          (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v12 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v12 + 32) + 32), &unk_1E3D32A08, 16);
        v13 = sub_19C2D92B4;
        goto LABEL_31;
      case 3:
      case 16:
      case 18:
        v12 = *a1;
        if (!v12)
          goto LABEL_32;
        if ((*(_BYTE *)(v12 + 24) & 1) != 0)
          (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v12 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v12 + 32) + 32), &unk_1E3D32A38, 16);
        v13 = sub_19C2D92A8;
        goto LABEL_31;
      case 4:
      case 6:
        v12 = *a1;
        if (!v12)
          goto LABEL_32;
        if ((*(_BYTE *)(v12 + 24) & 1) != 0)
          (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v12 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v12 + 32) + 32), &unk_1E3D32A48, 16);
        v13 = sub_19C2D92B0;
        goto LABEL_31;
      case 5:
      case 14:
      case 15:
      case 17:
        v12 = *a1;
        if (!v12)
          goto LABEL_32;
        if ((*(_BYTE *)(v12 + 24) & 1) != 0)
          (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v12 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v12 + 32) + 32), &unk_1E3D32A18, 16);
        v13 = sub_19C2D92A4;
        goto LABEL_31;
      case 7:
      case 13:
        v12 = *a1;
        if (!v12)
          goto LABEL_32;
        if ((*(_BYTE *)(v12 + 24) & 1) != 0)
          (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v12 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v12 + 32) + 32), &unk_1E3D32A28, 16);
        v13 = sub_19C2D92AC;
        goto LABEL_31;
      case 8:
        v12 = *a1;
        if (v12)
        {
          if ((*(_BYTE *)(v12 + 24) & 1) != 0)
            (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v12 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v12 + 32) + 32), &unk_1E3D329E8, 16);
          v13 = sub_19C2D92BC;
LABEL_31:
          v14 = (uint64_t *)sub_19C2CDDDC((unint64_t *)v12, 0x10uLL, (uint64_t)v13);
          *v14 = 0;
          v14[1] = v12;
        }
        else
        {
LABEL_32:
          v14 = (uint64_t *)operator new();
          *v14 = 0;
          v14[1] = 0;
        }
        goto LABEL_44;
      case 9:
      case 12:
        v15 = *a1;
        if (!v15)
          goto LABEL_42;
        if ((*(_BYTE *)(v15 + 24) & 1) != 0)
          (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v15 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v15 + 32) + 32), &unk_1E3D32A98, 24);
        v16 = (uint64_t *(*)(uint64_t *))sub_19C2D92C0;
        goto LABEL_41;
      case 10:
      case 11:
        v15 = *a1;
        if (v15)
        {
          if ((*(_BYTE *)(v15 + 24) & 1) != 0)
            (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v15 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v15 + 32) + 32), &unk_1E3D32A70, 24);
          v16 = sub_19C2D92C4;
LABEL_41:
          v14 = (uint64_t *)sub_19C2CDDDC((unint64_t *)v15, 0x18uLL, (uint64_t)v16);
          v14[2] = 0;
          *v14 = v15;
        }
        else
        {
LABEL_42:
          v14 = (uint64_t *)operator new();
          v14[2] = 0;
          *v14 = 0;
        }
        v14[1] = 0;
LABEL_44:
        *v10 = v14;
        break;
      default:
        return *v10;
    }
  }
  return *v10;
}

uint64_t sub_19C2D25C0(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v9;
  char v10;
  std::string *v11;
  std::string *v12;
  std::string *v13;
  uint64_t v14;
  std::string *v15;
  std::string *v16;
  char v17;
  std::string v18[2];

  result = (uint64_t)sub_19C2D4754(a1, a2);
  v9 = result;
  *(_QWORD *)(result + 16) = a5;
  if (v10)
  {
    *(_BYTE *)(result + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_19C2CF5C8((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v11 = sub_19C2CF5E0(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_19C2CF710((uint64_t)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
      result = sub_19C2CF718((uint64_t)v18);
    }
    if (dword_19C46DB58[a3] != 8)
    {
      sub_19C2CF5C8((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 460);
      v12 = sub_19C2CF5E0(v18, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_ENUM): ");
      sub_19C2CF710((uint64_t)&v17, (const char **)&v12->__r_.__value_.__l.__data_);
      result = sub_19C2CF718((uint64_t)v18);
    }
    *(_BYTE *)(v9 + 9) = 0;
  }
  else
  {
    if (*(_BYTE *)(result + 9))
    {
      sub_19C2CF5C8((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 463);
      v13 = sub_19C2CF5E0(v18, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (OPTIONAL_FIELD): ");
      sub_19C2CF710((uint64_t)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
      result = sub_19C2CF718((uint64_t)v18);
    }
    v14 = *(unsigned __int8 *)(v9 + 8);
    if ((v14 - 19) <= 0xFFFFFFED)
    {
      sub_19C2CF5C8((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v15 = sub_19C2CF5E0(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_19C2CF710((uint64_t)&v17, (const char **)&v15->__r_.__value_.__l.__data_);
      result = sub_19C2CF718((uint64_t)v18);
    }
    if (dword_19C46DB58[v14] != 8)
    {
      sub_19C2CF5C8((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 463);
      v16 = sub_19C2CF5E0(v18, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_ENUM): ");
      sub_19C2CF710((uint64_t)&v17, (const char **)&v16->__r_.__value_.__l.__data_);
      result = sub_19C2CF718((uint64_t)v18);
    }
  }
  *(_BYTE *)(v9 + 10) &= 0xF0u;
  *(_DWORD *)v9 = a4;
  return result;
}

void sub_19C2D279C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19C2D27D4(uint64_t *a1, uint64_t a2, int a3, int a4, int a5, uint64_t *a6)
{
  uint64_t **v11;
  uint64_t **v12;
  char v13;
  std::string *v14;
  std::string *v15;
  uint64_t v16;
  uint64_t *v17;
  std::string *v18;
  uint64_t v19;
  std::string *v20;
  std::string *v21;
  std::string *v22;
  int *v23;
  uint64_t v24;
  int v25;
  uint64_t result;
  char v27;
  std::string v28[2];

  v11 = sub_19C2D4754((uint64_t)a1, a2);
  v12 = v11;
  v11[2] = a6;
  if (v13)
  {
    *((_BYTE *)v11 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_19C2CF5C8((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v14 = sub_19C2CF5E0(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_19C2CF710((uint64_t)&v27, (const char **)&v14->__r_.__value_.__l.__data_);
      sub_19C2CF718((uint64_t)v28);
    }
    if (dword_19C46DB58[a3] != 8)
    {
      sub_19C2CF5C8((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 488);
      v15 = sub_19C2CF5E0(v28, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_ENUM): ");
      sub_19C2CF710((uint64_t)&v27, (const char **)&v15->__r_.__value_.__l.__data_);
      sub_19C2CF718((uint64_t)v28);
    }
    *((_BYTE *)v12 + 9) = 1;
    *((_BYTE *)v12 + 11) = a4;
    v16 = *a1;
    if (*a1)
    {
      if ((*(_BYTE *)(v16 + 24) & 1) != 0)
        (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v16 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v16 + 32) + 32), &unk_1E3D32A18, 16);
      v17 = (uint64_t *)sub_19C2CDDDC((unint64_t *)v16, 0x10uLL, (uint64_t)sub_19C2D92A4);
      *v17 = 0;
      v17[1] = v16;
    }
    else
    {
      v17 = (uint64_t *)operator new();
      *v17 = 0;
      v17[1] = 0;
    }
    *v12 = v17;
  }
  else
  {
    if (!*((_BYTE *)v11 + 9))
    {
      sub_19C2CF5C8((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 494);
      v18 = sub_19C2CF5E0(v28, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (REPEATED_FIELD): ");
      sub_19C2CF710((uint64_t)&v27, (const char **)&v18->__r_.__value_.__l.__data_);
      sub_19C2CF718((uint64_t)v28);
    }
    v19 = *((unsigned __int8 *)v12 + 8);
    if ((v19 - 19) <= 0xFFFFFFED)
    {
      sub_19C2CF5C8((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v20 = sub_19C2CF5E0(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_19C2CF710((uint64_t)&v27, (const char **)&v20->__r_.__value_.__l.__data_);
      sub_19C2CF718((uint64_t)v28);
    }
    if (dword_19C46DB58[v19] != 8)
    {
      sub_19C2CF5C8((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 494);
      v21 = sub_19C2CF5E0(v28, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_ENUM): ");
      sub_19C2CF710((uint64_t)&v27, (const char **)&v21->__r_.__value_.__l.__data_);
      sub_19C2CF718((uint64_t)v28);
    }
    if (*((unsigned __int8 *)v12 + 11) != a4)
    {
      sub_19C2CF5C8((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 495);
      v22 = sub_19C2CF5E0(v28, "CHECK failed: (extension->is_packed) == (packed): ");
      sub_19C2CF710((uint64_t)&v27, (const char **)&v22->__r_.__value_.__l.__data_);
      sub_19C2CF718((uint64_t)v28);
    }
  }
  v23 = (int *)*v12;
  v24 = *v23;
  if ((_DWORD)v24 == v23[1])
  {
    v25 = v24 + 1;
    sub_19C2DE744(v23, v24 + 1);
    result = sub_19C2DEBB8((uint64_t)v23);
    *(_DWORD *)(result + 4 * v24) = a5;
  }
  else
  {
    result = sub_19C2DEBB8((uint64_t)v23);
    *(_DWORD *)(result + 4 * v24) = a5;
    v25 = v24 + 1;
  }
  *v23 = v25;
  return result;
}

void sub_19C2D2AB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19C2D2AF4(uint64_t *a1, uint64_t a2, int a3, uint64_t *a4)
{
  uint64_t **v7;
  unsigned __int8 *v8;
  char v9;
  std::string *v10;
  std::string *v11;
  uint64_t v12;
  _QWORD *v13;
  std::string *v14;
  uint64_t v15;
  std::string *v16;
  std::string *v17;
  char v19;
  std::string v20[2];

  v7 = sub_19C2D4754((uint64_t)a1, a2);
  v8 = (unsigned __int8 *)v7;
  v7[2] = a4;
  if (v9)
  {
    *((_BYTE *)v7 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_19C2CF5C8((uint64_t)v20, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v10 = sub_19C2CF5E0(v20, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_19C2CF710((uint64_t)&v19, (const char **)&v10->__r_.__value_.__l.__data_);
      sub_19C2CF718((uint64_t)v20);
    }
    if (dword_19C46DB58[a3] != 9)
    {
      sub_19C2CF5C8((uint64_t)v20, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 520);
      v11 = sub_19C2CF5E0(v20, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_STRING): ");
      sub_19C2CF710((uint64_t)&v19, (const char **)&v11->__r_.__value_.__l.__data_);
      sub_19C2CF718((uint64_t)v20);
    }
    v8[9] = 0;
    v12 = *a1;
    if (v12)
    {
      if ((*(_BYTE *)(v12 + 24) & 1) != 0)
        (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v12 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v12 + 32) + 32), &unk_1E3D33010, 24);
      v13 = (_QWORD *)sub_19C2CDDDC((unint64_t *)v12, 0x18uLL, (uint64_t)sub_19C2CA134);
    }
    else
    {
      v13 = (_QWORD *)operator new();
    }
    *v13 = 0;
    v13[1] = 0;
    v13[2] = 0;
    *(_QWORD *)v8 = v13;
  }
  else
  {
    if (*((_BYTE *)v7 + 9))
    {
      sub_19C2CF5C8((uint64_t)v20, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 524);
      v14 = sub_19C2CF5E0(v20, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (OPTIONAL_FIELD): ");
      sub_19C2CF710((uint64_t)&v19, (const char **)&v14->__r_.__value_.__l.__data_);
      sub_19C2CF718((uint64_t)v20);
    }
    v15 = v8[8];
    if ((v15 - 19) <= 0xFFFFFFED)
    {
      sub_19C2CF5C8((uint64_t)v20, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v16 = sub_19C2CF5E0(v20, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_19C2CF710((uint64_t)&v19, (const char **)&v16->__r_.__value_.__l.__data_);
      sub_19C2CF718((uint64_t)v20);
    }
    if (dword_19C46DB58[v15] != 9)
    {
      sub_19C2CF5C8((uint64_t)v20, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 524);
      v17 = sub_19C2CF5E0(v20, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_STRING): ");
      sub_19C2CF710((uint64_t)&v19, (const char **)&v17->__r_.__value_.__l.__data_);
      sub_19C2CF718((uint64_t)v20);
    }
  }
  v8[10] &= 0xF0u;
  return *(_QWORD *)v8;
}

void sub_19C2D2D40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_19C2D2D78(uint64_t *a1, uint64_t a2, int a3, uint64_t *a4)
{
  uint64_t **v7;
  uint64_t **v8;
  char v9;
  std::string *v10;
  std::string *v11;
  uint64_t v12;
  uint64_t *v13;
  std::string *v14;
  uint64_t v15;
  std::string *v16;
  std::string *v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  int v21;
  _QWORD *result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  std::string v27[2];

  v7 = sub_19C2D4754((uint64_t)a1, a2);
  v8 = v7;
  v7[2] = a4;
  if (v9)
  {
    *((_BYTE *)v7 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_19C2CF5C8((uint64_t)v27, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v10 = sub_19C2CF5E0(v27, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_19C2CF710((uint64_t)&v26, (const char **)&v10->__r_.__value_.__l.__data_);
      sub_19C2CF718((uint64_t)v27);
    }
    if (dword_19C46DB58[a3] != 9)
    {
      sub_19C2CF5C8((uint64_t)v27, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 550);
      v11 = sub_19C2CF5E0(v27, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_STRING): ");
      sub_19C2CF710((uint64_t)&v26, (const char **)&v11->__r_.__value_.__l.__data_);
      sub_19C2CF718((uint64_t)v27);
    }
    *((_BYTE *)v8 + 9) = 1;
    *((_BYTE *)v8 + 11) = 0;
    v12 = *a1;
    if (v12)
    {
      if ((*(_BYTE *)(v12 + 24) & 1) != 0)
        (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v12 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v12 + 32) + 32), &unk_1E3D32A98, 24);
      v13 = (uint64_t *)sub_19C2CDDDC((unint64_t *)v12, 0x18uLL, (uint64_t)sub_19C2D92C0);
      v13[2] = 0;
      *v13 = v12;
    }
    else
    {
      v13 = (uint64_t *)operator new();
      v13[2] = 0;
      *v13 = 0;
    }
    v13[1] = 0;
    *v8 = v13;
  }
  else
  {
    if (!*((_BYTE *)v7 + 9))
    {
      sub_19C2CF5C8((uint64_t)v27, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 556);
      v14 = sub_19C2CF5E0(v27, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (REPEATED_FIELD): ");
      sub_19C2CF710((uint64_t)&v26, (const char **)&v14->__r_.__value_.__l.__data_);
      sub_19C2CF718((uint64_t)v27);
    }
    v15 = *((unsigned __int8 *)v8 + 8);
    if ((v15 - 19) <= 0xFFFFFFED)
    {
      sub_19C2CF5C8((uint64_t)v27, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v16 = sub_19C2CF5E0(v27, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_19C2CF710((uint64_t)&v26, (const char **)&v16->__r_.__value_.__l.__data_);
      sub_19C2CF718((uint64_t)v27);
    }
    if (dword_19C46DB58[v15] != 9)
    {
      sub_19C2CF5C8((uint64_t)v27, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 556);
      v17 = sub_19C2CF5E0(v27, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_STRING): ");
      sub_19C2CF710((uint64_t)&v26, (const char **)&v17->__r_.__value_.__l.__data_);
      sub_19C2CF718((uint64_t)v27);
    }
  }
  v18 = (uint64_t)*v8;
  v19 = *(int **)(v18 + 16);
  if (!v19)
  {
    v21 = *(_DWORD *)(v18 + 12);
LABEL_23:
    sub_19C2E0CEC(v18, v21 + 1);
    v19 = *(int **)(v18 + 16);
    v21 = *v19;
    goto LABEL_24;
  }
  v20 = *(int *)(v18 + 8);
  v21 = *v19;
  if ((int)v20 < *v19)
  {
    *(_DWORD *)(v18 + 8) = v20 + 1;
    return *(_QWORD **)&v19[2 * v20 + 2];
  }
  if (v21 == *(_DWORD *)(v18 + 12))
    goto LABEL_23;
LABEL_24:
  *v19 = v21 + 1;
  v23 = *(_QWORD *)v18;
  if (*(_QWORD *)v18)
  {
    if ((*(_BYTE *)(v23 + 24) & 1) != 0)
      (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v23 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v23 + 32) + 32), &unk_1E3D33010, 24);
    result = (_QWORD *)sub_19C2CDDDC((unint64_t *)v23, 0x18uLL, (uint64_t)sub_19C2CA134);
  }
  else
  {
    result = (_QWORD *)operator new();
  }
  *result = 0;
  result[1] = 0;
  result[2] = 0;
  v24 = *(_QWORD *)(v18 + 16);
  v25 = *(int *)(v18 + 8);
  *(_DWORD *)(v18 + 8) = v25 + 1;
  *(_QWORD *)(v24 + 8 * v25 + 8) = result;
  return result;
}

void sub_19C2D30AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19C2D30E4(_QWORD *a1, uint64_t a2, int a3, uint64_t a4, uint64_t *a5)
{
  uint64_t **v9;
  uint64_t **v10;
  char v11;
  std::string *v12;
  std::string *v13;
  uint64_t result;
  std::string *v15;
  uint64_t v16;
  std::string *v17;
  std::string *v18;
  char v19;
  char v20;
  std::string v21[2];

  v9 = sub_19C2D4754((uint64_t)a1, a2);
  v10 = v9;
  v9[2] = a5;
  if (v11)
  {
    *((_BYTE *)v9 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_19C2CF5C8((uint64_t)v21, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v12 = sub_19C2CF5E0(v21, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_19C2CF710((uint64_t)&v20, (const char **)&v12->__r_.__value_.__l.__data_);
      sub_19C2CF718((uint64_t)v21);
    }
    if (dword_19C46DB58[a3] != 10)
    {
      sub_19C2CF5C8((uint64_t)v21, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 591);
      v13 = sub_19C2CF5E0(v21, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_MESSAGE): ");
      sub_19C2CF710((uint64_t)&v20, (const char **)&v13->__r_.__value_.__l.__data_);
      sub_19C2CF718((uint64_t)v21);
    }
    *((_BYTE *)v10 + 9) = 0;
    *((_BYTE *)v10 + 10) &= 0xFu;
    result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a4 + 32))(a4, *a1);
    *v10 = (uint64_t *)result;
    *((_BYTE *)v10 + 10) &= 0xF0u;
  }
  else
  {
    if (*((_BYTE *)v9 + 9))
    {
      sub_19C2CF5C8((uint64_t)v21, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 598);
      v15 = sub_19C2CF5E0(v21, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (OPTIONAL_FIELD): ");
      sub_19C2CF710((uint64_t)&v20, (const char **)&v15->__r_.__value_.__l.__data_);
      sub_19C2CF718((uint64_t)v21);
    }
    v16 = *((unsigned __int8 *)v10 + 8);
    if ((v16 - 19) <= 0xFFFFFFED)
    {
      sub_19C2CF5C8((uint64_t)v21, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v17 = sub_19C2CF5E0(v21, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_19C2CF710((uint64_t)&v20, (const char **)&v17->__r_.__value_.__l.__data_);
      sub_19C2CF718((uint64_t)v21);
    }
    if (dword_19C46DB58[v16] != 10)
    {
      sub_19C2CF5C8((uint64_t)v21, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 598);
      v18 = sub_19C2CF5E0(v21, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_MESSAGE): ");
      sub_19C2CF710((uint64_t)&v20, (const char **)&v18->__r_.__value_.__l.__data_);
      sub_19C2CF718((uint64_t)v21);
    }
    v19 = *((_BYTE *)v10 + 10);
    *((_BYTE *)v10 + 10) = v19 & 0xF0;
    result = (uint64_t)*v10;
    if ((v19 & 0x10) != 0)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 32))(result, a4);
  }
  return result;
}

void sub_19C2D3310(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19C2D3348(_QWORD *a1, uint64_t a2, int a3, uint64_t a4, uint64_t *a5)
{
  uint64_t **v9;
  unsigned __int8 *v10;
  char v11;
  std::string *v12;
  std::string *v13;
  uint64_t v14;
  _QWORD *v15;
  std::string *v16;
  uint64_t v17;
  std::string *v18;
  std::string *v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t v23;
  char v25;
  std::string v26[2];

  v9 = sub_19C2D4754((uint64_t)a1, a2);
  v10 = (unsigned __int8 *)v9;
  v9[2] = a5;
  if (v11)
  {
    *((_BYTE *)v9 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_19C2CF5C8((uint64_t)v26, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v12 = sub_19C2CF5E0(v26, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_19C2CF710((uint64_t)&v25, (const char **)&v12->__r_.__value_.__l.__data_);
      sub_19C2CF718((uint64_t)v26);
    }
    if (dword_19C46DB58[a3] != 10)
    {
      sub_19C2CF5C8((uint64_t)v26, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 762);
      v13 = sub_19C2CF5E0(v26, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_MESSAGE): ");
      sub_19C2CF710((uint64_t)&v25, (const char **)&v13->__r_.__value_.__l.__data_);
      sub_19C2CF718((uint64_t)v26);
    }
    v10[9] = 1;
    v14 = *a1;
    if (*a1)
    {
      if ((*(_BYTE *)(v14 + 24) & 1) != 0)
        (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v14 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v14 + 32) + 32), &unk_1E3D32A70, 24);
      v15 = (_QWORD *)sub_19C2CDDDC((unint64_t *)v14, 0x18uLL, (uint64_t)sub_19C2D92C4);
      v15[2] = 0;
      *v15 = v14;
    }
    else
    {
      v15 = (_QWORD *)operator new();
      v15[2] = 0;
      *v15 = 0;
    }
    v15[1] = 0;
    *(_QWORD *)v10 = v15;
  }
  else
  {
    if (!*((_BYTE *)v9 + 9))
    {
      sub_19C2CF5C8((uint64_t)v26, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 767);
      v16 = sub_19C2CF5E0(v26, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (REPEATED_FIELD): ");
      sub_19C2CF710((uint64_t)&v25, (const char **)&v16->__r_.__value_.__l.__data_);
      sub_19C2CF718((uint64_t)v26);
    }
    v17 = v10[8];
    if ((v17 - 19) <= 0xFFFFFFED)
    {
      sub_19C2CF5C8((uint64_t)v26, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v18 = sub_19C2CF5E0(v26, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_19C2CF710((uint64_t)&v25, (const char **)&v18->__r_.__value_.__l.__data_);
      sub_19C2CF718((uint64_t)v26);
    }
    if (dword_19C46DB58[v17] != 10)
    {
      sub_19C2CF5C8((uint64_t)v26, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 767);
      v19 = sub_19C2CF5E0(v26, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_MESSAGE): ");
      sub_19C2CF710((uint64_t)&v25, (const char **)&v19->__r_.__value_.__l.__data_);
      sub_19C2CF718((uint64_t)v26);
    }
  }
  v20 = *(_QWORD *)v10;
  v21 = *(_DWORD **)(*(_QWORD *)v10 + 16);
  if (!v21
    || (v22 = *(int *)(v20 + 8), (int)v22 >= *v21)
    || (*(_DWORD *)(v20 + 8) = v22 + 1, (v23 = *(_QWORD *)&v21[2 * v22 + 2]) == 0))
  {
    v23 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a4 + 32))(a4, *a1);
    sub_19C2D93C4(*(_QWORD *)v10, v23);
  }
  return v23;
}

void sub_19C2D35F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_19C2D3630(unsigned __int8 *result)
{
  _QWORD *v1;
  uint64_t v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  BOOL v9;

  v1 = (_QWORD *)*((_QWORD *)result + 2);
  if (*((unsigned __int16 *)result + 4) >= 0x101u)
  {
    v6 = (unsigned __int8 *)*v1;
    v4 = (unsigned __int8 *)(v1 + 1);
    v5 = v6;
    if (v6 != v4)
    {
      do
      {
        result = sub_19C2CFC44(v5 + 40);
        v7 = (unsigned __int8 *)*((_QWORD *)v5 + 1);
        if (v7)
        {
          do
          {
            v8 = v7;
            v7 = *(unsigned __int8 **)v7;
          }
          while (v7);
        }
        else
        {
          do
          {
            v8 = (unsigned __int8 *)*((_QWORD *)v5 + 2);
            v9 = *(_QWORD *)v8 == (_QWORD)v5;
            v5 = v8;
          }
          while (!v9);
        }
        v5 = v8;
      }
      while (v8 != v4);
    }
  }
  else if (*((_WORD *)result + 5))
  {
    v2 = 32 * *((unsigned __int16 *)result + 5);
    v3 = (unsigned __int8 *)(v1 + 1);
    do
    {
      result = sub_19C2CFC44(v3);
      v3 += 32;
      v2 -= 32;
    }
    while (v2);
  }
  return result;
}

void sub_19C2D36CC(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char *v13;
  unint64_t v14;
  int *v15;
  int *v16;
  _QWORD *v17;
  unsigned int v18;

  if (*(unsigned __int16 *)(a1 + 8) <= 0x100u)
  {
    v4 = *(unsigned __int16 *)(a2 + 8);
    v5 = *(char **)(a1 + 16);
    v6 = *(unsigned __int16 *)(a1 + 10);
    v7 = &v5[32 * v6];
    v8 = *(_QWORD *)(a2 + 16);
    if (v4 > 0x100)
    {
      v14 = sub_19C2D39D4(v5, v7, *(_QWORD **)v8, (_QWORD *)(v8 + 8));
    }
    else
    {
      v9 = *(unsigned __int16 *)(a2 + 10);
      v10 = v8 + 32 * v9;
      v12 = (_DWORD)v6 == 0;
      v11 = 0;
      v12 = v12 || (_DWORD)v9 == 0;
      if (!v12)
      {
        do
        {
          if (*(_DWORD *)v5 == *(_DWORD *)v8)
            v13 = v5 + 32;
          else
            v13 = v5;
          if (*(_DWORD *)v5 < *(_DWORD *)v8)
          {
            v5 += 32;
          }
          else
          {
            v8 += 32;
            v5 = v13;
          }
          ++v11;
        }
        while (v5 != v7 && v8 != v10);
      }
      v14 = v11 + ((v10 - v8) >> 5) + ((v7 - v5) >> 5);
    }
    sub_19C2D37E8((_QWORD *)a1, v14);
  }
  v15 = *(int **)(a2 + 16);
  if (*(unsigned __int16 *)(a2 + 8) >= 0x101u)
  {
    sub_19C2D94DC(*(_QWORD **)v15, (_QWORD *)v15 + 1, (uint64_t *)a1);
  }
  else if (*(_WORD *)(a2 + 10))
  {
    v16 = &v15[8 * *(unsigned __int16 *)(a2 + 10)];
    do
    {
      v17 = v15 + 2;
      v18 = *v15;
      v15 += 8;
      sub_19C2D3ADC((uint64_t *)a1, v18, v17);
    }
    while (v15 != v16);
  }
}

_QWORD *sub_19C2D37E8(_QWORD *result, unint64_t a2)
{
  unint64_t v2;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  uint64_t *v7;
  size_t v8;
  uint64_t **v9;
  uint64_t *v10;
  char *v11;
  char *v12;
  __int128 v13;
  BOOL v14;
  int v15;
  __int128 v16;
  uint64_t v17;

  v2 = *((unsigned __int16 *)result + 4);
  if (v2 <= 0x100 && v2 < a2)
  {
    v4 = result;
    do
    {
      if ((_WORD)v2)
        LOWORD(v2) = 4 * v2;
      else
        LOWORD(v2) = 1;
    }
    while ((unsigned __int16)v2 < a2);
    v5 = (char *)result[2];
    v6 = *((unsigned __int16 *)result + 5);
    v7 = (uint64_t *)*result;
    if ((unsigned __int16)v2 < 0x101u)
    {
      v8 = 32 * (unsigned __int16)v2;
      if (v7)
      {
        if ((v7[3] & 1) != 0)
        {
          (*(void (**)(_QWORD, void *, size_t))(**(_QWORD **)(v7[4] + 32) + 40))(*(_QWORD *)(v7[4] + 32), &unk_1E3D32AC0, v8);
          v8 = 32 * (unsigned __int16)v2;
        }
        result = (_QWORD *)sub_19C2CE0C0(v7, v8);
      }
      else
      {
        result = operator new[](v8);
      }
      v9 = (uint64_t **)result;
      if ((_DWORD)v6)
        result = memmove(result, v5, 32 * v6);
    }
    else
    {
      if (v7)
      {
        if ((v7[3] & 1) != 0)
          (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(v7[4] + 32) + 40))(*(_QWORD *)(v7[4] + 32), &unk_1E3D33420, 24);
        result = (_QWORD *)sub_19C2CDDDC((unint64_t *)v7, 0x18uLL, (uint64_t)sub_19C2D9BC0);
      }
      else
      {
        result = (_QWORD *)operator new();
      }
      v9 = (uint64_t **)result;
      result[1] = 0;
      v10 = result + 1;
      result[2] = 0;
      *result = result + 1;
      if ((_DWORD)v6)
      {
        v11 = &v5[32 * v6];
        v12 = v5;
        do
        {
          v15 = *(_DWORD *)v12;
          v13 = *(_OWORD *)(v12 + 8);
          v17 = *((_QWORD *)v12 + 3);
          v16 = v13;
          result = sub_19C2D9BC8(v9, v10, &v15, &v15);
          v10 = result;
          v12 += 32;
        }
        while (v12 != v11);
      }
    }
    if (*v4)
      v14 = 1;
    else
      v14 = v5 == 0;
    if (!v14)
      result = (_QWORD *)MEMORY[0x1A1AD3538](v5, 0x1062C802AB6010CLL);
    *((_WORD *)v4 + 4) = v2;
    v4[2] = v9;
    if ((unsigned __int16)v2 >= 0x101u)
      *((_WORD *)v4 + 5) = 0;
  }
  return result;
}

uint64_t sub_19C2D39D4(char *a1, char *a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v4;
  int v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;

  v4 = 0;
  if (a1 != a2 && a3 != a4)
  {
    v4 = 0;
    do
    {
      v5 = *((_DWORD *)a3 + 8);
      if (*(_DWORD *)a1 >= v5)
      {
        if (*(_DWORD *)a1 == v5)
        {
          a1 += 32;
          v6 = (_QWORD *)a3[1];
          if (v6)
          {
            do
            {
              a3 = v6;
              v6 = (_QWORD *)*v6;
            }
            while (v6);
          }
          else
          {
            do
            {
              v7 = a3;
              a3 = (_QWORD *)a3[2];
            }
            while ((_QWORD *)*a3 != v7);
          }
        }
        else
        {
          v8 = (_QWORD *)a3[1];
          if (v8)
          {
            do
            {
              a3 = v8;
              v8 = (_QWORD *)*v8;
            }
            while (v8);
          }
          else
          {
            do
            {
              v9 = a3;
              a3 = (_QWORD *)a3[2];
            }
            while ((_QWORD *)*a3 != v9);
          }
        }
      }
      else
      {
        a1 += 32;
      }
      ++v4;
    }
    while (a1 != a2 && a3 != a4);
  }
  if (a3 == a4)
  {
    v10 = 0;
  }
  else
  {
    v10 = 0;
    do
    {
      v11 = (_QWORD *)a3[1];
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (_QWORD *)a3[2];
          v13 = *v12 == (_QWORD)a3;
          a3 = v12;
        }
        while (!v13);
      }
      ++v10;
      a3 = v12;
    }
    while (v12 != a4);
  }
  return v4 + ((a2 - a1) >> 5) + v10;
}

void sub_19C2D3ADC(uint64_t *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t *v6;
  uint64_t **v7;
  uint64_t *v8;
  unsigned __int8 v9;
  uint64_t v10;
  uint64_t v11;
  std::string *v12;
  std::string *v13;
  std::string *v14;
  std::string *v15;
  uint64_t v16;
  std::string *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  int v36;
  int *v37;
  __int128 v38;
  uint64_t *v39;
  uint64_t **v40;
  uint64_t **v41;
  char v42;
  char v43;
  uint64_t v44;
  int *v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _DWORD *v50;
  uint64_t v51;
  uint64_t v52;
  std::string *v53;
  std::string *v54;
  std::string *v55;
  uint64_t *v56;
  int *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *__p[2];
  uint64_t v62;
  char v63;
  std::string v64[2];

  if (*((_BYTE *)a3 + 9))
  {
    v6 = (uint64_t *)a3[2];
    v7 = sub_19C2D4754((uint64_t)a1, a2);
    v8 = (uint64_t *)v7;
    v7[2] = v6;
    v10 = v9;
    if (v9)
    {
      *((_BYTE *)v7 + 8) = *((_BYTE *)a3 + 8);
      *((_BYTE *)v7 + 11) = *((_BYTE *)a3 + 11);
      *((_BYTE *)v7 + 9) = 1;
    }
    else
    {
      if (*((unsigned __int8 *)v7 + 8) != *((unsigned __int8 *)a3 + 8))
      {
        sub_19C2CF5C8((uint64_t)v64, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 931);
        v13 = sub_19C2CF5E0(v64, "CHECK failed: (extension->type) == (other_extension.type): ");
        sub_19C2CF710((uint64_t)&v63, (const char **)&v13->__r_.__value_.__l.__data_);
        sub_19C2CF718((uint64_t)v64);
      }
      if (*((unsigned __int8 *)v8 + 11) != *((unsigned __int8 *)a3 + 11))
      {
        sub_19C2CF5C8((uint64_t)v64, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 932);
        v14 = sub_19C2CF5E0(v64, "CHECK failed: (extension->is_packed) == (other_extension.is_packed): ");
        sub_19C2CF710((uint64_t)&v63, (const char **)&v14->__r_.__value_.__l.__data_);
        sub_19C2CF718((uint64_t)v64);
      }
      if (!*((_BYTE *)v8 + 9))
      {
        sub_19C2CF5C8((uint64_t)v64, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 933);
        v15 = sub_19C2CF5E0(v64, "CHECK failed: extension->is_repeated: ");
        sub_19C2CF710((uint64_t)&v63, (const char **)&v15->__r_.__value_.__l.__data_);
        sub_19C2CF718((uint64_t)v64);
      }
    }
    v16 = *((unsigned __int8 *)a3 + 8);
    if ((v16 - 19) <= 0xFFFFFFED)
    {
      sub_19C2CF5C8((uint64_t)v64, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v17 = sub_19C2CF5E0(v64, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_19C2CF710((uint64_t)&v63, (const char **)&v17->__r_.__value_.__l.__data_);
      sub_19C2CF718((uint64_t)v64);
    }
    switch(v16)
    {
      case 1:
        if (v10)
        {
          v26 = *a1;
          if (v26)
          {
            if ((*(_BYTE *)(v26 + 24) & 1) != 0)
              (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v26 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v26 + 32) + 32), &unk_1E3D329F8, 16);
            v27 = sub_19C2CDDDC((unint64_t *)v26, 0x10uLL, (uint64_t)sub_19C2D92B8);
            *(_QWORD *)v27 = 0;
            *(_QWORD *)(v27 + 8) = v26;
          }
          else
          {
            v27 = operator new();
            *(_QWORD *)v27 = 0;
            *(_QWORD *)(v27 + 8) = 0;
          }
          *v8 = v27;
        }
        else
        {
          v27 = *v8;
        }
        sub_19C2E0B08((int *)v27, (int *)*a3);
        break;
      case 2:
        if (v10)
        {
          v28 = *a1;
          if (v28)
          {
            if ((*(_BYTE *)(v28 + 24) & 1) != 0)
              (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v28 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v28 + 32) + 32), &unk_1E3D32A08, 16);
            v29 = sub_19C2CDDDC((unint64_t *)v28, 0x10uLL, (uint64_t)sub_19C2D92B4);
            *(_QWORD *)v29 = 0;
            *(_QWORD *)(v29 + 8) = v28;
          }
          else
          {
            v29 = operator new();
            *(_QWORD *)v29 = 0;
            *(_QWORD *)(v29 + 8) = 0;
          }
          *v8 = v29;
        }
        else
        {
          v29 = *v8;
        }
        sub_19C2E04E0((int *)v29, (int *)*a3);
        break;
      case 3:
      case 16:
      case 18:
        if (v10)
        {
          v20 = *a1;
          if (v20)
          {
            if ((*(_BYTE *)(v20 + 24) & 1) != 0)
              (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v20 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v20 + 32) + 32), &unk_1E3D32A38, 16);
            v21 = sub_19C2CDDDC((unint64_t *)v20, 0x10uLL, (uint64_t)sub_19C2D92A8);
            *(_QWORD *)v21 = 0;
            *(_QWORD *)(v21 + 8) = v20;
          }
          else
          {
            v21 = operator new();
            *(_QWORD *)v21 = 0;
            *(_QWORD *)(v21 + 8) = 0;
          }
          *v8 = v21;
        }
        else
        {
          v21 = *v8;
        }
        sub_19C2DF890((int *)v21, (int *)*a3);
        break;
      case 4:
      case 6:
        if (v10)
        {
          v24 = *a1;
          if (v24)
          {
            if ((*(_BYTE *)(v24 + 24) & 1) != 0)
              (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v24 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v24 + 32) + 32), &unk_1E3D32A48, 16);
            v25 = sub_19C2CDDDC((unint64_t *)v24, 0x10uLL, (uint64_t)sub_19C2D92B0);
            *(_QWORD *)v25 = 0;
            *(_QWORD *)(v25 + 8) = v24;
          }
          else
          {
            v25 = operator new();
            *(_QWORD *)v25 = 0;
            *(_QWORD *)(v25 + 8) = 0;
          }
          *v8 = v25;
        }
        else
        {
          v25 = *v8;
        }
        sub_19C2DFEB8((int *)v25, (int *)*a3);
        break;
      case 5:
      case 14:
      case 15:
      case 17:
        if (v10)
        {
          v18 = *a1;
          if (v18)
          {
            if ((*(_BYTE *)(v18 + 24) & 1) != 0)
              (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v18 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v18 + 32) + 32), &unk_1E3D32A18, 16);
            v19 = sub_19C2CDDDC((unint64_t *)v18, 0x10uLL, (uint64_t)sub_19C2D92A4);
            *(_QWORD *)v19 = 0;
            *(_QWORD *)(v19 + 8) = v18;
          }
          else
          {
            v19 = operator new();
            *(_QWORD *)v19 = 0;
            *(_QWORD *)(v19 + 8) = 0;
          }
          *v8 = v19;
        }
        else
        {
          v19 = *v8;
        }
        sub_19C2DEC40((int *)v19, (int *)*a3);
        break;
      case 7:
      case 13:
        if (v10)
        {
          v22 = *a1;
          if (v22)
          {
            if ((*(_BYTE *)(v22 + 24) & 1) != 0)
              (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v22 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v22 + 32) + 32), &unk_1E3D32A28, 16);
            v23 = sub_19C2CDDDC((unint64_t *)v22, 0x10uLL, (uint64_t)sub_19C2D92AC);
            *(_QWORD *)v23 = 0;
            *(_QWORD *)(v23 + 8) = v22;
          }
          else
          {
            v23 = operator new();
            *(_QWORD *)v23 = 0;
            *(_QWORD *)(v23 + 8) = 0;
          }
          *v8 = v23;
        }
        else
        {
          v23 = *v8;
        }
        sub_19C2DF268((int *)v23, (int *)*a3);
        break;
      case 8:
        if (v10)
        {
          v30 = *a1;
          if (v30)
          {
            if ((*(_BYTE *)(v30 + 24) & 1) != 0)
              (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v30 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v30 + 32) + 32), &unk_1E3D329E8, 16);
            v31 = sub_19C2CDDDC((unint64_t *)v30, 0x10uLL, (uint64_t)sub_19C2D92BC);
            *(_QWORD *)v31 = 0;
            *(_QWORD *)(v31 + 8) = v30;
          }
          else
          {
            v31 = operator new();
            *(_QWORD *)v31 = 0;
            *(_QWORD *)(v31 + 8) = 0;
          }
          *v8 = v31;
        }
        else
        {
          v31 = *v8;
        }
        sub_19C2DE61C((int *)v31, (int *)*a3);
        break;
      case 9:
      case 12:
        if (v10)
        {
          v32 = *a1;
          if (v32)
          {
            if ((*(_BYTE *)(v32 + 24) & 1) != 0)
              (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v32 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v32 + 32) + 32), &unk_1E3D32A98, 24);
            v33 = (_QWORD *)sub_19C2CDDDC((unint64_t *)v32, 0x18uLL, (uint64_t)sub_19C2D92C0);
            v33[2] = 0;
            *v33 = v32;
          }
          else
          {
            v33 = (_QWORD *)operator new();
            v33[2] = 0;
            *v33 = 0;
          }
          v33[1] = 0;
          *v8 = (uint64_t)v33;
        }
        else
        {
          v33 = (_QWORD *)*v8;
        }
        sub_19C2CA518((uint64_t)v33, *a3);
        break;
      case 10:
      case 11:
        if (v10)
        {
          v34 = *a1;
          if (*a1)
          {
            if ((*(_BYTE *)(v34 + 24) & 1) != 0)
              (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v34 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v34 + 32) + 32), &unk_1E3D32A70, 24);
            v35 = (_QWORD *)sub_19C2CDDDC((unint64_t *)v34, 0x18uLL, (uint64_t)sub_19C2D92C4);
            v35[2] = 0;
            *v35 = v34;
          }
          else
          {
            v35 = (_QWORD *)operator new();
            v35[2] = 0;
            *v35 = 0;
          }
          v35[1] = 0;
          *v8 = (uint64_t)v35;
        }
        v45 = (int *)*a3;
        if (v45[2] >= 1)
        {
          v46 = 0;
          do
          {
            v47 = sub_19C2D92E8((uint64_t)v45, v46);
            v48 = v47;
            v49 = *v8;
            v50 = *(_DWORD **)(*v8 + 16);
            if (!v50
              || (v51 = *(int *)(v49 + 8), (int)v51 >= *v50)
              || (*(_DWORD *)(v49 + 8) = v51 + 1, (v52 = *(_QWORD *)&v50[2 * v51 + 2]) == 0))
            {
              v52 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v47 + 32))(v47, *a1);
              sub_19C2D93C4(*v8, v52);
            }
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v52 + 64))(v52, v48);
            ++v46;
          }
          while (v46 < v45[2]);
        }
        break;
      default:
        return;
    }
    return;
  }
  if ((*((_BYTE *)a3 + 10) & 1) != 0)
    return;
  v11 = *((unsigned __int8 *)a3 + 8);
  if ((v11 - 19) <= 0xFFFFFFED)
  {
    sub_19C2CF5C8((uint64_t)v64, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
    v12 = sub_19C2CF5E0(v64, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
    sub_19C2CF710((uint64_t)&v63, (const char **)&v12->__r_.__value_.__l.__data_);
    sub_19C2CF718((uint64_t)v64);
  }
  switch(v11)
  {
    case 1:
      sub_19C2D180C((uint64_t)a1, a2, *((unsigned __int8 *)a3 + 8), a3[2], *(double *)a3);
      return;
    case 2:
      sub_19C2D12C8((uint64_t)a1, a2, *((unsigned __int8 *)a3 + 8), a3[2], *(float *)a3);
      return;
    case 3:
    case 16:
    case 18:
      sub_19C2D032C((uint64_t)a1, a2, *((unsigned __int8 *)a3 + 8), *a3, a3[2]);
      return;
    case 4:
    case 6:
      sub_19C2D0D94((uint64_t)a1, a2, *((unsigned __int8 *)a3 + 8), *a3, a3[2]);
      return;
    case 5:
    case 15:
    case 17:
      sub_19C2CFDF8((uint64_t)a1, a2, *((unsigned __int8 *)a3 + 8), *(_DWORD *)a3, a3[2]);
      return;
    case 7:
    case 13:
      sub_19C2D0860((uint64_t)a1, a2, *((unsigned __int8 *)a3 + 8), *(_DWORD *)a3, a3[2]);
      return;
    case 8:
      sub_19C2D1D50((uint64_t)a1, a2, *((unsigned __int8 *)a3 + 8), *(_BYTE *)a3, a3[2]);
      return;
    case 9:
    case 12:
      v36 = *((unsigned __int8 *)a3 + 8);
      v37 = (int *)*a3;
      if (*(char *)(*a3 + 23) < 0)
      {
        sub_19C2B5238(__p, *(void **)v37, *((_QWORD *)v37 + 1));
      }
      else
      {
        v38 = *(_OWORD *)v37;
        v62 = *((_QWORD *)v37 + 2);
        *(_OWORD *)__p = v38;
      }
      sub_19C2D463C(a1, a2, v36, (__n128 *)__p, (uint64_t *)a3[2]);
      if (SHIBYTE(v62) < 0)
        operator delete(__p[0]);
      return;
    case 10:
    case 11:
      v39 = (uint64_t *)a3[2];
      v40 = sub_19C2D4754((uint64_t)a1, a2);
      v41 = v40;
      v40[2] = v39;
      if (v42)
      {
        *((_BYTE *)v40 + 8) = *((_BYTE *)a3 + 8);
        *((_BYTE *)v40 + 11) = *((_BYTE *)a3 + 11);
        *((_BYTE *)v40 + 9) = 0;
        v43 = *((_BYTE *)v40 + 10) & 0xF;
        if ((*((_BYTE *)a3 + 10) & 0x10) != 0)
        {
          *((_BYTE *)v40 + 10) = v43 | 0x10;
          v59 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a3 + 16))(*a3, *a1);
          *v41 = (uint64_t *)v59;
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v59 + 104))(v59, *a3);
          goto LABEL_135;
        }
        *((_BYTE *)v40 + 10) = v43;
        v44 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a3 + 32))(*a3, *a1);
        *v41 = (uint64_t *)v44;
        goto LABEL_133;
      }
      if (*((unsigned __int8 *)v40 + 8) != *((unsigned __int8 *)a3 + 8))
      {
        sub_19C2CF5C8((uint64_t)v64, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 1026);
        v53 = sub_19C2CF5E0(v64, "CHECK failed: (extension->type) == (other_extension.type): ");
        sub_19C2CF710((uint64_t)&v63, (const char **)&v53->__r_.__value_.__l.__data_);
        sub_19C2CF718((uint64_t)v64);
      }
      if (*((unsigned __int8 *)v41 + 11) != *((unsigned __int8 *)a3 + 11))
      {
        sub_19C2CF5C8((uint64_t)v64, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 1027);
        v54 = sub_19C2CF5E0(v64, "CHECK failed: (extension->is_packed) == (other_extension.is_packed): ");
        sub_19C2CF710((uint64_t)&v63, (const char **)&v54->__r_.__value_.__l.__data_);
        sub_19C2CF718((uint64_t)v64);
      }
      if (*((_BYTE *)v41 + 9))
      {
        sub_19C2CF5C8((uint64_t)v64, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 1028);
        v55 = sub_19C2CF5E0(v64, "CHECK failed: !extension->is_repeated: ");
        sub_19C2CF710((uint64_t)&v63, (const char **)&v55->__r_.__value_.__l.__data_);
        sub_19C2CF718((uint64_t)v64);
      }
      v56 = *v41;
      v57 = (int *)*a3;
      if ((*((_BYTE *)a3 + 10) & 0x10) == 0)
      {
        v58 = *v56;
        if ((*((_BYTE *)v41 + 10) & 0x10) == 0)
        {
          (*(void (**)(uint64_t *, int *))(v58 + 64))(v56, v57);
          goto LABEL_135;
        }
        v44 = (*(uint64_t (**)(uint64_t *, int *))(v58 + 32))(*v41, v57);
LABEL_133:
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v44 + 64))(v44, *a3);
        goto LABEL_135;
      }
      if ((*((_BYTE *)v41 + 10) & 0x10) != 0)
      {
        (*(void (**)(uint64_t *, int *))(*v56 + 104))(v56, v57);
      }
      else
      {
        v60 = (*(uint64_t (**)(_QWORD, uint64_t *))(*(_QWORD *)v57 + 24))(*a3, *v41);
        (*(void (**)(uint64_t *, uint64_t))(*v56 + 64))(v56, v60);
      }
LABEL_135:
      *((_BYTE *)v41 + 10) &= 0xF0u;
      return;
    case 14:
      sub_19C2D25C0((uint64_t)a1, a2, *((unsigned __int8 *)a3 + 8), *(_DWORD *)a3, a3[2]);
      return;
    default:
      return;
  }
}

void sub_19C2D45D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  sub_19C2CF718((uint64_t)&a16);
  _Unwind_Resume(a1);
}

__n128 sub_19C2D463C(uint64_t *a1, uint64_t a2, int a3, __n128 *a4, uint64_t *a5)
{
  uint64_t v6;
  __n128 *v7;
  __n128 result;

  v6 = sub_19C2D2AF4(a1, a2, a3, a5);
  v7 = (__n128 *)v6;
  if (*(char *)(v6 + 23) < 0)
    operator delete(*(void **)v6);
  result = *a4;
  v7[1].n128_u64[0] = a4[1].n128_u64[0];
  *v7 = result;
  a4[1].n128_u8[7] = 0;
  a4->n128_u8[0] = 0;
  return result;
}

uint64_t sub_19C2D468C(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v3;
  __int16 v4;
  __int16 v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;

  v3 = (unsigned __int8 *)result;
  if (*(_QWORD *)result == *(_QWORD *)a2)
  {
    v4 = *(_WORD *)(result + 8);
    *(_WORD *)(result + 8) = *(_WORD *)(a2 + 8);
    *(_WORD *)(a2 + 8) = v4;
    v5 = *(_WORD *)(result + 10);
    *(_WORD *)(result + 10) = *(_WORD *)(a2 + 10);
    *(_WORD *)(a2 + 10) = v5;
    v6 = *(_QWORD *)(result + 16);
    *(_QWORD *)(result + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 16) = v6;
  }
  else
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    sub_19C2D36CC((uint64_t)&v7, a2);
    sub_19C2D3630((unsigned __int8 *)a2);
    sub_19C2D36CC(a2, (uint64_t)v3);
    sub_19C2D3630(v3);
    sub_19C2D36CC((uint64_t)v3, (uint64_t)&v7);
    return sub_19C2CFB74((uint64_t)&v7);
  }
  return result;
}

void sub_19C2D4740(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C2CFB74((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t **sub_19C2D4754(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t **v4;
  uint64_t v6;
  uint64_t **v7;
  unint64_t v8;
  unint64_t v9;
  int *v10;
  uint64_t **v11;
  int v12;
  uint64_t **result;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;

  v3 = *(unsigned __int16 *)(a1 + 8);
  v4 = *(uint64_t ***)(a1 + 16);
  if (v3 >= 0x101)
  {
    *((_QWORD *)&v14 + 1) = 0;
    v15 = 0;
    v16 = 0;
    LODWORD(v14) = a2;
    return sub_19C2D9B08(v4, (int *)&v14, &v14) + 5;
  }
  v6 = *(unsigned __int16 *)(a1 + 10);
  v7 = &v4[4 * v6];
  if (!*(_WORD *)(a1 + 10))
  {
    if (!*(_WORD *)(a1 + 8))
      goto LABEL_18;
    LOWORD(v6) = 0;
LABEL_17:
    *(_WORD *)(a1 + 10) = v6 + 1;
    *(_DWORD *)v7 = a2;
    v7[1] = 0;
    result = v7 + 1;
    v7[2] = 0;
    v7[3] = 0;
    return result;
  }
  v8 = *(unsigned __int16 *)(a1 + 10);
  do
  {
    v9 = v8 >> 1;
    v10 = (int *)&v4[4 * (v8 >> 1)];
    v12 = *v10;
    v11 = (uint64_t **)(v10 + 8);
    v8 += ~(v8 >> 1);
    if (v12 < (int)a2)
      v4 = v11;
    else
      v8 = v9;
  }
  while (v8);
  if (v4 != v7)
  {
    if (*(_DWORD *)v4 == (_DWORD)a2)
      return v4 + 1;
    if (v6 < v3)
    {
      memmove(v4 + 4, v4, (char *)v7 - (char *)v4);
      LOWORD(v6) = *(_WORD *)(a1 + 10);
      v7 = v4;
      goto LABEL_17;
    }
    goto LABEL_18;
  }
  if (v6 < v3)
    goto LABEL_17;
LABEL_18:
  sub_19C2D37E8((_QWORD *)a1, v6 + 1);
  return (uint64_t **)sub_19C2D4754(a1, a2);
}

uint64_t sub_19C2D489C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  BOOL v11;

  v1 = *(_QWORD **)(a1 + 16);
  if (*(unsigned __int16 *)(a1 + 8) >= 0x101u)
  {
    v8 = (unsigned __int8 *)*v1;
    v7 = (unsigned __int8 *)(v1 + 1);
    v6 = v8;
    if (v8 == v7)
    {
      return 1;
    }
    else
    {
      do
      {
        v4 = sub_19C2D496C(v6 + 40);
        if (!(_DWORD)v4)
          break;
        v9 = (unsigned __int8 *)*((_QWORD *)v6 + 1);
        if (v9)
        {
          do
          {
            v10 = v9;
            v9 = *(unsigned __int8 **)v9;
          }
          while (v9);
        }
        else
        {
          do
          {
            v10 = (unsigned __int8 *)*((_QWORD *)v6 + 2);
            v11 = *(_QWORD *)v10 == (_QWORD)v6;
            v6 = v10;
          }
          while (!v11);
        }
        v6 = v10;
      }
      while (v10 != v7);
    }
  }
  else
  {
    while (1)
    {
      v3 = *(_QWORD *)(a1 + 16) + 32 * *(unsigned __int16 *)(a1 + 10);
      v4 = v1 == (_QWORD *)v3;
      if (v1 == (_QWORD *)v3)
        break;
      v5 = (unsigned __int8 *)(v1 + 1);
      if (!sub_19C2D496C(v5))
        break;
      v1 = v5 + 24;
      if (*(unsigned __int16 *)(a1 + 8) > 0x100u)
        sub_19C2DA178();
    }
  }
  return v4;
}

uint64_t sub_19C2D496C(unsigned __int8 *a1)
{
  uint64_t v2;
  std::string *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  char v9;
  std::string v10[2];

  v2 = a1[8];
  if ((v2 - 19) <= 0xFFFFFFED)
  {
    sub_19C2CF5C8((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
    v3 = sub_19C2CF5E0(v10, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
    sub_19C2CF710((uint64_t)&v9, (const char **)&v3->__r_.__value_.__l.__data_);
    sub_19C2CF718((uint64_t)v10);
  }
  if (dword_19C46DB58[v2] != 10)
    return 1;
  if (a1[9])
  {
    v4 = *(_QWORD *)a1;
    if (*(int *)(*(_QWORD *)a1 + 8) >= 1)
    {
      v5 = 0;
      while (1)
      {
        v6 = sub_19C2D92E8(v4, v5);
        if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 48))(v6) & 1) == 0)
          break;
        ++v5;
        v4 = *(_QWORD *)a1;
        if (v5 >= *(_DWORD *)(*(_QWORD *)a1 + 8))
          return 1;
      }
      return 0;
    }
    return 1;
  }
  if ((a1[10] & 1) != 0)
    return 1;
  v7 = **(_QWORD **)a1;
  if ((a1[10] & 0x10) != 0)
    return ((*(uint64_t (**)(void))(v7 + 72))() & 1) != 0;
  result = (*(uint64_t (**)(void))(v7 + 48))();
  if ((_DWORD)result)
    return 1;
  return result;
}

void sub_19C2D4A78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19C2D4A90(uint64_t a1, int a2, uint64_t a3, uint64_t a4, unsigned __int8 *a5, _BYTE *a6)
{
  uint64_t result;
  uint64_t v10;
  std::string *v11;
  unsigned int v12;
  std::string *v13;
  char v14;
  std::string v15[2];

  result = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *))(*(_QWORD *)a4 + 16))(a4, a3, a5);
  if ((_DWORD)result)
  {
    v10 = *a5;
    if ((v10 - 19) <= 0xFFFFFFED)
    {
      sub_19C2CF5C8((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v11 = sub_19C2CF5E0(v15, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_19C2CF710((uint64_t)&v14, (const char **)&v11->__r_.__value_.__l.__data_);
      sub_19C2CF718((uint64_t)v15);
    }
    v12 = dword_19C46DBA4[v10];
    *a6 = 0;
    if (a2 == 2 && a5[1])
    {
      if (v12 > 5)
      {
        sub_19C2CF5C8((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 82);
        v13 = sub_19C2CF5E0(v15, "can't reach here.");
        sub_19C2CF710((uint64_t)&v14, (const char **)&v13->__r_.__value_.__l.__data_);
        sub_19C2CF718((uint64_t)v15);
      }
      else
      {
        result = 1;
        if (((1 << v12) & 0x1C) == 0)
        {
          *a6 = 1;
          return result;
        }
      }
    }
    return v12 == a2;
  }
  return result;
}

void sub_19C2D4BB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_19C2D4BD0(uint64_t *a1, unint64_t a2, unsigned __int8 *a3, uint64_t a4, unint64_t *a5, int32x2_t *a6)
{
  unsigned int v9;
  uint64_t v11;
  std::string *v13;
  unsigned __int8 v14[39];
  unsigned __int8 v15;
  _QWORD v16[2];

  v9 = a2;
  v16[0] = &off_1E3D388D0;
  v16[1] = a4;
  v11 = a2 >> 3;
  v15 = 0;
  if ((sub_19C2D4A90((uint64_t)a1, a2 & 7, a2 >> 3, (uint64_t)v16, v14, &v15) & 1) != 0)
    return (unsigned __int8 *)sub_19C2D4C98(a1, v11, v15, (uint64_t)v14, a5, a3, a6);
  if ((*a5 & 1) != 0)
    v13 = (std::string *)((*a5 & 0xFFFFFFFFFFFFFFFELL) + 8);
  else
    v13 = (std::string *)sub_19C2C138C(a5);
  return sub_19C2DC0C0(v9, v13, (char *)a3, a6);
}

char *sub_19C2D4C98(uint64_t *a1, uint64_t a2, int a3, uint64_t a4, unint64_t *a5, unsigned __int8 *a6, int32x2_t *a7)
{
  unsigned __int8 *v8;
  uint64_t v11;
  uint64_t *v12;
  std::string *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  char *result;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  int v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t *v27;
  int v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t *v38;
  double v39;
  float v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t *v44;
  int v45;
  int v46;
  uint64_t *v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  unint64_t v53;
  int v54;
  uint64_t *v55;
  int v56;
  unint64_t v57;
  std::string *v58;
  int v59;
  std::string::value_type *v60;
  uint64_t v61;
  int v62;
  int v63;
  int v64;
  uint64_t v65;
  int v66;
  int v67;
  int v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  int v72;
  int v73;
  int v74;
  BOOL v75;
  uint64_t v76;
  __int32 v77;
  int v78;
  uint64_t v79;
  int v80;
  int v81;
  int v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  std::string *v87;
  char v88;
  std::string v89;
  unint64_t *v90;
  int v91;

  v8 = a6;
  v11 = a2;
  v12 = a1;
  if (a3)
  {
    switch(*(_BYTE *)a4)
    {
      case 1:
        v30 = sub_19C2D2284(a1, a2, 1, *(_BYTE *)(a4 + 2), *(uint64_t **)(a4 + 24));
        result = (char *)sub_19C2DBF70(v30, v8, a7);
        break;
      case 2:
        v31 = sub_19C2D2284(a1, a2, 2, *(_BYTE *)(a4 + 2), *(uint64_t **)(a4 + 24));
        result = (char *)sub_19C2DBF08(v31, v8, a7);
        break;
      case 3:
        v32 = sub_19C2D2284(a1, a2, 3, *(_BYTE *)(a4 + 2), *(uint64_t **)(a4 + 24));
        result = (char *)sub_19C2DBD18((int *)v32, v8, (uint64_t)a7);
        break;
      case 4:
        v33 = sub_19C2D2284(a1, a2, 4, *(_BYTE *)(a4 + 2), *(uint64_t **)(a4 + 24));
        result = (char *)sub_19C2DBD28((int *)v33, v8, (uint64_t)a7);
        break;
      case 5:
        v16 = sub_19C2D2284(a1, a2, 5, *(_BYTE *)(a4 + 2), *(uint64_t **)(a4 + 24));
        result = (char *)sub_19C2DBCF8((int *)v16, v8, (uint64_t)a7);
        break;
      case 6:
        v34 = sub_19C2D2284(a1, a2, 6, *(_BYTE *)(a4 + 2), *(uint64_t **)(a4 + 24));
        result = (char *)sub_19C2DBE38(v34, v8, a7);
        break;
      case 7:
        v35 = sub_19C2D2284(a1, a2, 7, *(_BYTE *)(a4 + 2), *(uint64_t **)(a4 + 24));
        result = (char *)sub_19C2DBD68(v35, v8, a7);
        break;
      case 8:
        v36 = sub_19C2D2284(a1, a2, 8, *(_BYTE *)(a4 + 2), *(uint64_t **)(a4 + 24));
        result = (char *)sub_19C2DBD58((int *)v36, v8, (uint64_t)a7);
        break;
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
        sub_19C2CF5C8((uint64_t)&v89, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/extension_set_inl.h", 79);
        v13 = sub_19C2CF5E0(&v89, "Non-primitive types can't be packed.");
        sub_19C2CF710((uint64_t)&v88, (const char **)&v13->__r_.__value_.__l.__data_);
        sub_19C2CF718((uint64_t)&v89);
        return (char *)v8;
      case 0xD:
        v18 = sub_19C2D2284(a1, a2, 13, *(_BYTE *)(a4 + 2), *(uint64_t **)(a4 + 24));
        result = (char *)sub_19C2DBD08((int *)v18, v8, (uint64_t)a7);
        break;
      case 0xE:
        v89.__r_.__value_.__r.__words[0] = (std::string::size_type)sub_19C2D2284(a1, a2, 14, *(_BYTE *)(a4 + 2), *(uint64_t **)(a4 + 24));
        *(_OWORD *)&v89.__r_.__value_.__r.__words[1] = *(_OWORD *)(a4 + 8);
        v90 = a5;
        v91 = v11;
        return sub_19C2D95B4((uint64_t)a7, (char *)v8, (uint64_t)&v89);
      case 0xF:
        v19 = sub_19C2D2284(a1, a2, 15, *(_BYTE *)(a4 + 2), *(uint64_t **)(a4 + 24));
        result = (char *)sub_19C2DBDD0(v19, v8, a7);
        break;
      case 0x10:
        v37 = sub_19C2D2284(a1, a2, 16, *(_BYTE *)(a4 + 2), *(uint64_t **)(a4 + 24));
        result = (char *)sub_19C2DBEA0(v37, v8, a7);
        break;
      case 0x11:
        v20 = sub_19C2D2284(a1, a2, 17, *(_BYTE *)(a4 + 2), *(uint64_t **)(a4 + 24));
        result = (char *)sub_19C2DBD38((int *)v20, v8, (uint64_t)a7);
        break;
      case 0x12:
        v38 = sub_19C2D2284(a1, a2, 18, *(_BYTE *)(a4 + 2), *(uint64_t **)(a4 + 24));
        result = (char *)sub_19C2DBD48((int *)v38, v8, (uint64_t)a7);
        break;
      default:
        return (char *)v8;
    }
    return result;
  }
  switch(*(_BYTE *)a4)
  {
    case 1:
      v8 = a6 + 8;
      v39 = *(double *)a6;
      if (*(_BYTE *)(a4 + 1))
        sub_19C2D1A28(a1, a2, 1, *(unsigned __int8 *)(a4 + 2), *(uint64_t **)(a4 + 24), v39);
      else
        sub_19C2D180C((uint64_t)a1, a2, 1, *(_QWORD *)(a4 + 24), v39);
      return (char *)v8;
    case 2:
      v8 = a6 + 4;
      v40 = *(float *)a6;
      if (*(_BYTE *)(a4 + 1))
        sub_19C2D14E4(a1, a2, 2, *(unsigned __int8 *)(a4 + 2), *(uint64_t **)(a4 + 24), v40);
      else
        sub_19C2D12C8((uint64_t)a1, a2, 2, *(_QWORD *)(a4 + 24), v40);
      return (char *)v8;
    case 3:
      v41 = *a6;
      if ((char)*a6 < 0)
      {
        v67 = v41 + (a6[1] << 7);
        v41 = (v67 - 128);
        if ((char)a6[1] < 0)
        {
          v8 = (unsigned __int8 *)sub_19C2DBB98((uint64_t)a6, (v67 - 128));
          if (!v8)
            return (char *)v8;
          v41 = v84;
        }
        else
        {
          v8 = a6 + 2;
        }
      }
      else
      {
        v8 = a6 + 1;
      }
      if (*(_BYTE *)(a4 + 1))
      {
        v54 = *(unsigned __int8 *)(a4 + 2);
        v55 = *(uint64_t **)(a4 + 24);
        a1 = v12;
        a2 = v11;
        v56 = 3;
        goto LABEL_136;
      }
      v79 = *(_QWORD *)(a4 + 24);
      a1 = v12;
      a2 = v11;
      v80 = 3;
      goto LABEL_138;
    case 4:
      v42 = *a6;
      if ((char)*a6 < 0)
      {
        v68 = v42 + (a6[1] << 7);
        v42 = (v68 - 128);
        if ((char)a6[1] < 0)
        {
          v8 = (unsigned __int8 *)sub_19C2DBB98((uint64_t)a6, (v68 - 128));
          if (!v8)
            return (char *)v8;
          v42 = v85;
        }
        else
        {
          v8 = a6 + 2;
        }
      }
      else
      {
        v8 = a6 + 1;
      }
      if (*(_BYTE *)(a4 + 1))
      {
        v43 = *(unsigned __int8 *)(a4 + 2);
        v44 = *(uint64_t **)(a4 + 24);
        a1 = v12;
        a2 = v11;
        v45 = 4;
        goto LABEL_117;
      }
      v69 = *(_QWORD *)(a4 + 24);
      a1 = v12;
      a2 = v11;
      v70 = 4;
      goto LABEL_119;
    case 5:
      v21 = *a6;
      if ((char)*a6 < 0)
      {
        v63 = v21 + (a6[1] << 7);
        v21 = v63 - 128;
        if ((char)a6[1] < 0)
        {
          v8 = (unsigned __int8 *)sub_19C2DBB98((uint64_t)a6, (v63 - 128));
          if (!v8)
            return (char *)v8;
          v21 = v81;
        }
        else
        {
          v8 = a6 + 2;
        }
      }
      else
      {
        v8 = a6 + 1;
      }
      if (*(_BYTE *)(a4 + 1))
      {
        v26 = *(unsigned __int8 *)(a4 + 2);
        v27 = *(uint64_t **)(a4 + 24);
        a1 = v12;
        a2 = v11;
        v28 = 5;
        goto LABEL_104;
      }
      v65 = *(_QWORD *)(a4 + 24);
      a1 = v12;
      a2 = v11;
      v66 = 5;
      v82 = v21;
      goto LABEL_107;
    case 6:
      v8 = a6 + 8;
      v42 = *(_QWORD *)a6;
      if (*(_BYTE *)(a4 + 1))
      {
        v43 = *(unsigned __int8 *)(a4 + 2);
        v44 = *(uint64_t **)(a4 + 24);
        v45 = 6;
LABEL_117:
        sub_19C2D0FA8(a1, a2, v45, v43, v42, v44);
      }
      else
      {
        v69 = *(_QWORD *)(a4 + 24);
        v70 = 6;
LABEL_119:
        sub_19C2D0D94((uint64_t)a1, a2, v70, v42, v69);
      }
      return (char *)v8;
    case 7:
      v8 = a6 + 4;
      v25 = *(_DWORD *)a6;
      if (*(_BYTE *)(a4 + 1))
      {
        v46 = *(unsigned __int8 *)(a4 + 2);
        v47 = *(uint64_t **)(a4 + 24);
        v48 = 7;
        goto LABEL_98;
      }
      v71 = *(_QWORD *)(a4 + 24);
      v72 = 7;
      v73 = *(_DWORD *)a6;
      goto LABEL_100;
    case 8:
      v49 = *a6;
      if ((char)*a6 < 0)
      {
        v49 = v49 + (a6[1] << 7) - 128;
        if ((char)a6[1] < 0)
        {
          v8 = (unsigned __int8 *)sub_19C2DBB98((uint64_t)a6, v49);
          if (!v8)
            return (char *)v8;
        }
        else
        {
          v8 = a6 + 2;
        }
      }
      else
      {
        v8 = a6 + 1;
      }
      if (*(_BYTE *)(a4 + 1))
        sub_19C2D1F64(v12, v11, 8, *(unsigned __int8 *)(a4 + 2), v49 != 0, *(uint64_t **)(a4 + 24));
      else
        sub_19C2D1D50((uint64_t)v12, v11, 8, v49 != 0, *(_QWORD *)(a4 + 24));
      return (char *)v8;
    case 9:
    case 0xC:
      v14 = *(uint64_t **)(a4 + 24);
      if (*(_BYTE *)(a4 + 1))
        v15 = (uint64_t)sub_19C2D2D78(a1, a2, 9, v14);
      else
        v15 = sub_19C2D2AF4(a1, a2, 9, v14);
      v58 = (std::string *)v15;
      v59 = *v8;
      if (((char)*v8 & 0x80000000) == 0)
      {
        v60 = (std::string::value_type *)(v8 + 1);
        return (char *)sub_19C2D955C((uint64_t)a7, v60, v59, v58);
      }
      v61 = sub_19C2DBC24((uint64_t)v8, *v8);
      if (v61)
      {
        v60 = (std::string::value_type *)v61;
        v59 = v62;
        return (char *)sub_19C2D955C((uint64_t)a7, v60, v59, v58);
      }
      return 0;
    case 0xA:
      v50 = *(_QWORD *)(a4 + 8);
      v51 = *(uint64_t **)(a4 + 24);
      if (*(_BYTE *)(a4 + 1))
        v52 = sub_19C2D3348(a1, a2, 10, v50, v51);
      else
        v52 = sub_19C2D30E4(a1, a2, 10, v50, v51);
      v74 = a7[11].i32[0];
      v75 = __OFSUB__(v74--, 1);
      a7[11].i32[0] = v74;
      if (v74 < 0 != v75)
        return 0;
      ++a7[11].i32[1];
      v76 = (*(uint64_t (**)(uint64_t, unsigned __int8 *, int32x2_t *))(*(_QWORD *)v52 + 88))(v52, v8, a7);
      a7[11] = vadd_s32(a7[11], (int32x2_t)0xFFFFFFFF00000001);
      v77 = a7[10].i32[0];
      a7[10].i32[0] = 0;
      if (v77 == ((8 * (_DWORD)v11) | 3))
        return (char *)v76;
      else
        return 0;
    case 0xB:
      v22 = *(_QWORD *)(a4 + 8);
      v23 = *(uint64_t **)(a4 + 24);
      if (*(_BYTE *)(a4 + 1))
        v24 = sub_19C2D3348(a1, a2, 11, v22, v23);
      else
        v24 = sub_19C2D30E4(a1, a2, 11, v22, v23);
      return (char *)sub_19C2DB9C8(a7, v24, v8);
    case 0xD:
      v25 = *a6;
      if ((char)*a6 < 0)
      {
        v64 = v25 + (a6[1] << 7);
        v25 = v64 - 128;
        if ((char)a6[1] < 0)
        {
          v8 = (unsigned __int8 *)sub_19C2DBB98((uint64_t)a6, (v64 - 128));
          if (!v8)
            return (char *)v8;
          v25 = v83;
        }
        else
        {
          v8 = a6 + 2;
        }
      }
      else
      {
        v8 = a6 + 1;
      }
      if (*(_BYTE *)(a4 + 1))
      {
        v46 = *(unsigned __int8 *)(a4 + 2);
        v47 = *(uint64_t **)(a4 + 24);
        a1 = v12;
        a2 = v11;
        v48 = 13;
LABEL_98:
        sub_19C2D0A74(a1, a2, v48, v46, v25, v47);
      }
      else
      {
        v71 = *(_QWORD *)(a4 + 24);
        a1 = v12;
        a2 = v11;
        v72 = 13;
        v73 = v25;
LABEL_100:
        sub_19C2D0860((uint64_t)a1, a2, v72, v73, v71);
      }
      return (char *)v8;
    case 0xE:
      v53 = *a6;
      if ((char)*a6 < 0)
      {
        v78 = v53 + (a6[1] << 7);
        v53 = (v78 - 128);
        if ((char)a6[1] < 0)
        {
          v8 = (unsigned __int8 *)sub_19C2DBB98((uint64_t)a6, (v78 - 128));
          if (!v8)
            return (char *)v8;
          v53 = v86;
        }
        else
        {
          v8 = a6 + 2;
        }
      }
      else
      {
        v8 = a6 + 1;
      }
      if (((*(uint64_t (**)(_QWORD, unint64_t))(a4 + 8))(*(_QWORD *)(a4 + 16), v53) & 1) != 0)
      {
        if (*(_BYTE *)(a4 + 1))
          sub_19C2D27D4(v12, v11, 14, *(unsigned __int8 *)(a4 + 2), v53, *(uint64_t **)(a4 + 24));
        else
          sub_19C2D25C0((uint64_t)v12, v11, 14, v53, *(_QWORD *)(a4 + 24));
      }
      else
      {
        if ((*a5 & 1) != 0)
          v87 = (std::string *)((*a5 & 0xFFFFFFFFFFFFFFFELL) + 8);
        else
          v87 = (std::string *)sub_19C2C138C(a5);
        sub_19C2DBA98(v11, v53, v87);
      }
      return (char *)v8;
    case 0xF:
      v8 = a6 + 4;
      v21 = *(_DWORD *)a6;
      if (*(_BYTE *)(a4 + 1))
      {
        v26 = *(unsigned __int8 *)(a4 + 2);
        v27 = *(uint64_t **)(a4 + 24);
        v28 = 15;
        goto LABEL_104;
      }
      v65 = *(_QWORD *)(a4 + 24);
      v66 = 15;
      goto LABEL_106;
    case 0x10:
      v8 = a6 + 8;
      v41 = *(_QWORD *)a6;
      if (*(_BYTE *)(a4 + 1))
      {
        v54 = *(unsigned __int8 *)(a4 + 2);
        v55 = *(uint64_t **)(a4 + 24);
        v56 = 16;
        goto LABEL_136;
      }
      v79 = *(_QWORD *)(a4 + 24);
      v80 = 16;
      goto LABEL_138;
    case 0x11:
      LODWORD(v29) = *a6;
      if ((char)*a6 < 0)
      {
        v29 = v29 + (a6[1] << 7) - 128;
        if ((char)a6[1] < 0)
        {
          v8 = (unsigned __int8 *)sub_19C2DBB98((uint64_t)a6, v29);
          if (!v8)
            return (char *)v8;
        }
        else
        {
          v8 = a6 + 2;
        }
      }
      else
      {
        v8 = a6 + 1;
      }
      v21 = -(v29 & 1) ^ (v29 >> 1);
      if (*(_BYTE *)(a4 + 1))
      {
        v26 = *(unsigned __int8 *)(a4 + 2);
        v27 = *(uint64_t **)(a4 + 24);
        a1 = v12;
        a2 = v11;
        v28 = 17;
LABEL_104:
        sub_19C2D000C(a1, a2, v28, v26, v21, v27);
      }
      else
      {
        v65 = *(_QWORD *)(a4 + 24);
        a1 = v12;
        a2 = v11;
        v66 = 17;
LABEL_106:
        v82 = v21;
LABEL_107:
        sub_19C2CFDF8((uint64_t)a1, a2, v66, v82, v65);
      }
      return (char *)v8;
    case 0x12:
      v57 = *a6;
      if ((char)*a6 < 0)
      {
        v57 = v57 + (a6[1] << 7) - 128;
        if ((char)a6[1] < 0)
        {
          v8 = (unsigned __int8 *)sub_19C2DBB98((uint64_t)a6, v57);
          if (!v8)
            return (char *)v8;
        }
        else
        {
          v8 = a6 + 2;
        }
      }
      else
      {
        v8 = a6 + 1;
      }
      v41 = -(uint64_t)(v57 & 1) ^ (v57 >> 1);
      if (*(_BYTE *)(a4 + 1))
      {
        v54 = *(unsigned __int8 *)(a4 + 2);
        v55 = *(uint64_t **)(a4 + 24);
        a1 = v12;
        a2 = v11;
        v56 = 18;
LABEL_136:
        sub_19C2D0540(a1, a2, v56, v54, v41, v55);
      }
      else
      {
        v79 = *(_QWORD *)(a4 + 24);
        a1 = v12;
        a2 = v11;
        v80 = 18;
LABEL_138:
        sub_19C2D032C((uint64_t)a1, a2, v80, v41, v79);
      }
      return (char *)v8;
    default:
      return (char *)v8;
  }
}

void sub_19C2D57E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_19C2D5804(uint64_t a1, signed int a2, int a3, char *a4, uint64_t *a5)
{
  unsigned int *v7;
  unint64_t v8;
  unsigned int *v9;
  unint64_t v10;
  unsigned int *v11;
  unsigned int *v12;
  signed int v13;
  uint64_t v14;
  uint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  _QWORD *v19;
  int v20;
  BOOL v21;
  uint64_t *v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int *v25;
  BOOL v26;

  v7 = *(unsigned int **)(a1 + 16);
  if (*(unsigned __int16 *)(a1 + 8) >= 0x101u)
  {
    v18 = *((_QWORD *)v7 + 1);
    v17 = v7 + 2;
    v16 = v18;
    if (v18)
    {
      v19 = v17;
      do
      {
        v20 = *(_DWORD *)(v16 + 32);
        v21 = v20 < a2;
        if (v20 >= a2)
          v22 = (uint64_t *)v16;
        else
          v22 = (uint64_t *)(v16 + 8);
        if (!v21)
          v19 = (_QWORD *)v16;
        v16 = *v22;
      }
      while (*v22);
      if (v19 != (_QWORD *)v17)
      {
        do
        {
          v23 = *((unsigned int *)v19 + 8);
          if ((int)v23 >= a3)
            break;
          a4 = sub_19C2D5930((_BYTE *)v19 + 40, v23, a4, a5);
          v24 = (unsigned int *)v19[1];
          if (v24)
          {
            do
            {
              v25 = v24;
              v24 = *(unsigned int **)v24;
            }
            while (v24);
          }
          else
          {
            do
            {
              v25 = (unsigned int *)v19[2];
              v26 = *(_QWORD *)v25 == (_QWORD)v19;
              v19 = v25;
            }
            while (!v26);
          }
          v19 = v25;
        }
        while (v25 != v17);
      }
    }
  }
  else
  {
    v8 = *(unsigned __int16 *)(a1 + 10);
    if (*(_WORD *)(a1 + 10))
    {
      v9 = &v7[8 * v8];
      do
      {
        v10 = v8 >> 1;
        v11 = &v7[8 * (v8 >> 1)];
        v13 = *v11;
        v12 = v11 + 8;
        v8 += ~(v8 >> 1);
        if (v13 < a2)
          v7 = v12;
        else
          v8 = v10;
      }
      while (v8);
      while (v7 != v9)
      {
        v14 = *v7;
        if ((int)v14 >= a3)
          break;
        a4 = sub_19C2D5930((_BYTE *)v7 + 8, v14, a4, a5);
        v7 += 8;
      }
    }
  }
  return a4;
}

char *sub_19C2D5930(_BYTE *a1, uint64_t a2, char *a3, uint64_t *a4)
{
  char *v5;
  unsigned int v8;
  _BYTE *v9;
  int v10;
  std::string *v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  _QWORD *v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  std::string *v19;
  _DWORD *v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  char v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  _QWORD *v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  int v39;
  std::string *v40;
  std::string *v41;
  _DWORD *v42;
  int v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  _DWORD *v48;
  int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  _DWORD *v54;
  int v55;
  _DWORD *v56;
  int v57;
  int *v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  int *v63;
  int v64;
  _DWORD *v65;
  int v66;
  _DWORD *v67;
  int v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  _DWORD *v73;
  int v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  _DWORD *v79;
  int v80;
  _DWORD *v81;
  int v82;
  _DWORD *v83;
  int v84;
  _DWORD *v85;
  int v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  _DWORD *v91;
  int v92;
  _DWORD *v93;
  int v94;
  uint64_t *v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  _DWORD *v100;
  int v101;
  unsigned int v102;
  unsigned int v103;
  unsigned int v104;
  char v105;
  int v106;
  _DWORD *v107;
  unsigned int v108;
  unsigned int v109;
  unsigned int v110;
  _DWORD *v111;
  int v112;
  unsigned int v113;
  char v114;
  unsigned int v115;
  unint64_t v116;
  _BYTE *v117;
  unsigned int v118;
  unsigned int v119;
  unsigned int v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  _DWORD *v124;
  int v125;
  unsigned int v126;
  char v127;
  unsigned int v128;
  unint64_t v129;
  _BYTE *v130;
  unsigned int v131;
  unsigned int v132;
  unsigned int v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  _DWORD *v137;
  int v138;
  unsigned int v139;
  char v140;
  unsigned int v141;
  unint64_t v142;
  _BYTE *v143;
  unsigned int v144;
  unsigned int v145;
  unsigned int v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t v149;
  _DWORD *v150;
  int v151;
  unsigned int v152;
  unsigned int v153;
  char v154;
  unsigned int v155;
  unsigned int v156;
  uint64_t v157;
  _QWORD *v158;
  unsigned int v159;
  unsigned int v160;
  unsigned int v161;
  _DWORD *v162;
  int v163;
  unsigned int v164;
  unsigned int v165;
  unsigned int v166;
  char v167;
  int v168;
  _DWORD *v169;
  unsigned int v170;
  unsigned int v171;
  unsigned int v172;
  _DWORD *v173;
  int v174;
  unsigned int v175;
  char v176;
  unsigned int v177;
  char v178;
  _BYTE *v179;
  unsigned int v180;
  unsigned int v181;
  unsigned int v182;
  uint64_t v183;
  int v184;
  unsigned int v185;
  uint64_t v186;
  unsigned int v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  int64_t v191;
  _BYTE *v192;
  unsigned int v193;
  unsigned int v194;
  unsigned int v195;
  char *v196;
  const void *v197;
  uint64_t v198;
  int v199;
  unsigned int v200;
  char v201;
  unsigned int v202;
  unsigned int v203;
  unsigned int v204;
  char v205;
  uint64_t v206;
  char *v207;
  unsigned int v208;
  unsigned int v209;
  unsigned int v210;
  char *v211;
  unsigned int v212;
  unsigned int v213;
  unsigned int v214;
  uint64_t v215;
  int v216;
  unsigned int v217;
  unsigned int v218;
  unsigned int v219;
  char v220;
  uint64_t v221;
  uint64_t v222;
  _BYTE *v223;
  unsigned int v224;
  unsigned int v225;
  unsigned int v226;
  unsigned int v227;
  _BYTE *v228;
  unsigned int v229;
  unsigned int v230;
  unsigned int v231;
  uint64_t v232;
  int v233;
  unsigned int v234;
  uint64_t v235;
  unsigned int v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  int64_t v240;
  _BYTE *v241;
  unsigned int v242;
  unsigned int v243;
  unsigned int v244;
  char *v245;
  const void *v246;
  _DWORD *v247;
  int v248;
  unsigned int v249;
  char v250;
  unsigned int v251;
  unsigned int v252;
  _BYTE *v253;
  unsigned int v254;
  unsigned int v255;
  unsigned int v256;
  unsigned int v257;
  unsigned int v258;
  unsigned int v259;
  _DWORD *v260;
  int v261;
  unsigned int v262;
  char v263;
  unsigned int v264;
  unint64_t v265;
  _BYTE *v266;
  unsigned int v267;
  unsigned int v268;
  unsigned int v269;
  unint64_t v270;
  unint64_t v271;
  unint64_t v272;
  _DWORD *v273;
  int v274;
  unsigned int v275;
  unsigned int v276;
  unsigned int v277;
  char v278;
  int v279;
  _DWORD *v280;
  unsigned int v281;
  unsigned int v282;
  unsigned int v283;
  _DWORD *v284;
  int v285;
  unsigned int v286;
  unsigned int v287;
  char v288;
  unsigned int v289;
  unsigned int v290;
  uint64_t v291;
  _QWORD *v292;
  unsigned int v293;
  unsigned int v294;
  unsigned int v295;
  _DWORD *v296;
  int v297;
  unsigned int v298;
  char v299;
  unsigned int v300;
  int v301;
  _BYTE *v302;
  unsigned int v303;
  unsigned int v304;
  unsigned int v305;
  unsigned int v306;
  unsigned int v307;
  unsigned int v308;
  unsigned int v309;
  _DWORD *v310;
  int v311;
  unsigned int v312;
  char v313;
  unsigned int v314;
  uint64_t v315;
  _BYTE *v316;
  unsigned int v317;
  unsigned int v318;
  unsigned int v319;
  unint64_t v320;
  unint64_t v321;
  unint64_t v322;
  unint64_t v323;
  int v324;
  unsigned int v325;
  unsigned int v326;
  _DWORD *v327;
  unsigned int v328;
  unsigned int v329;
  unint64_t v330;
  unsigned int v331;
  char *v332;
  unsigned int v333;
  unsigned int v334;
  unsigned int v335;
  unsigned int v336;
  unsigned int v337;
  unsigned int v338;
  _QWORD *v339;
  int64_t v340;
  uint64_t v341;
  unsigned int v342;
  unsigned int v343;
  unsigned int v344;
  char *v345;
  uint64_t v346;
  unsigned int v347;
  _BYTE *v348;
  unsigned int v349;
  unsigned int v350;
  int v351;
  unsigned int v352;
  uint64_t v353;
  unsigned int v354;
  unsigned int v355;
  unsigned int v356;
  unsigned int v357;
  unsigned int v358;
  unsigned int v360;
  unsigned int v361;
  unsigned int v362;
  unsigned int v363;
  unsigned int v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  unsigned int v369;
  unsigned int v370;
  _BYTE *v371;
  unsigned int v372;
  unsigned int v373;
  unsigned int v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  unsigned int v379;
  unsigned int v380;
  unsigned int v381;
  unint64_t v382;
  unint64_t v383;
  unint64_t v384;
  unsigned int v385;
  unsigned int v386;
  unint64_t v387;
  unsigned int v388;
  unsigned int v389;
  unint64_t v390;
  unsigned int v391;
  unsigned int v392;
  unsigned int v393;
  unsigned int v394;
  unsigned int v395;
  unsigned int v396;
  unsigned int v397;
  unsigned int v398;
  unsigned int v399;
  unsigned int v400;
  unsigned int v401;
  unsigned int v402;
  unsigned int v403;
  unsigned int v404;
  unsigned int v405;
  unsigned int v406;
  unsigned int v407;
  unsigned int v408;
  unint64_t v409;
  unint64_t v410;
  unsigned int v411;
  unsigned int v412;
  unsigned int v413;
  unint64_t v414;
  unsigned int v415;
  unsigned int v416;
  unint64_t v417;
  unint64_t v418;
  unsigned int v419;
  char *v420;
  unsigned int v421;
  unsigned int v422;
  unsigned int v423;
  _BYTE *v424;
  unsigned int v425;
  unsigned int v426;
  unsigned int v427;
  unsigned int v429;
  unsigned int v430;
  char v431;
  std::string v432[2];

  v5 = a3;
  if (a1[9])
  {
    if (a1[11])
    {
      if (*((_DWORD *)a1 + 3))
      {
        if (*a4 <= (unint64_t)a3)
          v5 = sub_19C2CEBA4((uint64_t)a4, a3);
        v8 = (8 * a2) | 2;
        if (v8 > 0x7F)
        {
          *v5 = (8 * a2) | 0x82;
          v32 = (8 * a2) >> 7;
          if (v8 >> 14)
          {
            v9 = v5 + 2;
            do
            {
              *(v9 - 1) = v32 | 0x80;
              v33 = v32 >> 7;
              ++v9;
              v34 = v32 >> 14;
              v32 >>= 7;
            }
            while (v34);
            *(v9 - 1) = v33;
          }
          else
          {
            v5[1] = v32;
            v9 = v5 + 2;
          }
        }
        else
        {
          *v5 = v8;
          v9 = v5 + 1;
        }
        v35 = *((int *)a1 + 3);
        if (v35 > 0x7F)
        {
          *v9 = v35 | 0x80;
          v36 = v35 >> 7;
          if (v35 >> 14)
          {
            v5 = v9 + 2;
            do
            {
              *(v5 - 1) = v36 | 0x80;
              v37 = v36 >> 7;
              ++v5;
              v38 = v36 >> 14;
              v36 >>= 7;
            }
            while (v38);
            *(v5 - 1) = v37;
          }
          else
          {
            v9[1] = v36;
            v5 = v9 + 2;
          }
        }
        else
        {
          *v9 = v35;
          v5 = v9 + 1;
        }
        v39 = a1[8];
        if ((v39 - 19) <= 0xFFFFFFED)
        {
          sub_19C2CF5C8((uint64_t)v432, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
          v40 = sub_19C2CF5E0(v432, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
          sub_19C2CF710((uint64_t)&v431, (const char **)&v40->__r_.__value_.__l.__data_);
          sub_19C2CF718((uint64_t)v432);
        }
        switch(v39)
        {
          case 1:
            v63 = *(int **)a1;
            if (**(int **)a1 >= 1)
            {
              v64 = 0;
              do
              {
                if (*a4 <= (unint64_t)v5)
                {
                  v5 = sub_19C2CEBA4((uint64_t)a4, v5);
                  v63 = *(int **)a1;
                }
                *(_QWORD *)v5 = *(_QWORD *)sub_19C2E095C(v63, v64);
                v5 += 8;
                ++v64;
                v63 = *(int **)a1;
              }
              while (v64 < **(_DWORD **)a1);
            }
            break;
          case 2:
            v65 = *(_DWORD **)a1;
            if (**(int **)a1 >= 1)
            {
              v66 = 0;
              do
              {
                if (*a4 <= (unint64_t)v5)
                {
                  v5 = sub_19C2CEBA4((uint64_t)a4, v5);
                  v65 = *(_DWORD **)a1;
                }
                *(_DWORD *)v5 = *(_DWORD *)sub_19C2E0334(v65, v66);
                v5 += 4;
                ++v66;
                v65 = *(_DWORD **)a1;
              }
              while (v66 < **(_DWORD **)a1);
            }
            break;
          case 3:
            v67 = *(_DWORD **)a1;
            if (**(int **)a1 >= 1)
            {
              v68 = 0;
              do
              {
                if (*a4 <= (unint64_t)v5)
                {
                  v5 = sub_19C2CEBA4((uint64_t)a4, v5);
                  v67 = *(_DWORD **)a1;
                }
                v69 = *(_QWORD *)sub_19C2DF6E4(v67, v68);
                if (v69 > 0x7F)
                {
                  *v5 = v69 | 0x80;
                  v70 = v69 >> 7;
                  if (v69 >> 14)
                  {
                    v5 += 2;
                    do
                    {
                      *(v5 - 1) = v70 | 0x80;
                      v71 = v70 >> 7;
                      ++v5;
                      v72 = v70 >> 14;
                      v70 >>= 7;
                    }
                    while (v72);
                    *(v5 - 1) = v71;
                  }
                  else
                  {
                    v5[1] = v70;
                    v5 += 2;
                  }
                }
                else
                {
                  *v5++ = v69;
                }
                ++v68;
                v67 = *(_DWORD **)a1;
              }
              while (v68 < **(_DWORD **)a1);
            }
            break;
          case 4:
            v73 = *(_DWORD **)a1;
            if (**(int **)a1 >= 1)
            {
              v74 = 0;
              do
              {
                if (*a4 <= (unint64_t)v5)
                {
                  v5 = sub_19C2CEBA4((uint64_t)a4, v5);
                  v73 = *(_DWORD **)a1;
                }
                v75 = *(_QWORD *)sub_19C2DFD0C(v73, v74);
                if (v75 > 0x7F)
                {
                  *v5 = v75 | 0x80;
                  v76 = v75 >> 7;
                  if (v75 >> 14)
                  {
                    v5 += 2;
                    do
                    {
                      *(v5 - 1) = v76 | 0x80;
                      v77 = v76 >> 7;
                      ++v5;
                      v78 = v76 >> 14;
                      v76 >>= 7;
                    }
                    while (v78);
                    *(v5 - 1) = v77;
                  }
                  else
                  {
                    v5[1] = v76;
                    v5 += 2;
                  }
                }
                else
                {
                  *v5++ = v75;
                }
                ++v74;
                v73 = *(_DWORD **)a1;
              }
              while (v74 < **(_DWORD **)a1);
            }
            break;
          case 5:
            v42 = *(_DWORD **)a1;
            if (**(int **)a1 >= 1)
            {
              v43 = 0;
              do
              {
                if (*a4 <= (unint64_t)v5)
                {
                  v5 = sub_19C2CEBA4((uint64_t)a4, v5);
                  v42 = *(_DWORD **)a1;
                }
                v44 = *(int *)sub_19C2DEA94(v42, v43);
                if (v44 > 0x7F)
                {
                  *v5 = v44 | 0x80;
                  v45 = v44 >> 7;
                  if (v44 >> 14)
                  {
                    v5 += 2;
                    do
                    {
                      *(v5 - 1) = v45 | 0x80;
                      v46 = v45 >> 7;
                      ++v5;
                      v47 = v45 >> 14;
                      v45 >>= 7;
                    }
                    while (v47);
                    *(v5 - 1) = v46;
                  }
                  else
                  {
                    v5[1] = v45;
                    v5 += 2;
                  }
                }
                else
                {
                  *v5++ = v44;
                }
                ++v43;
                v42 = *(_DWORD **)a1;
              }
              while (v43 < **(_DWORD **)a1);
            }
            break;
          case 6:
            v79 = *(_DWORD **)a1;
            if (**(int **)a1 >= 1)
            {
              v80 = 0;
              do
              {
                if (*a4 <= (unint64_t)v5)
                {
                  v5 = sub_19C2CEBA4((uint64_t)a4, v5);
                  v79 = *(_DWORD **)a1;
                }
                *(_QWORD *)v5 = *(_QWORD *)sub_19C2DFD0C(v79, v80);
                v5 += 8;
                ++v80;
                v79 = *(_DWORD **)a1;
              }
              while (v80 < **(_DWORD **)a1);
            }
            break;
          case 7:
            v81 = *(_DWORD **)a1;
            if (**(int **)a1 >= 1)
            {
              v82 = 0;
              do
              {
                if (*a4 <= (unint64_t)v5)
                {
                  v5 = sub_19C2CEBA4((uint64_t)a4, v5);
                  v81 = *(_DWORD **)a1;
                }
                *(_DWORD *)v5 = *(_DWORD *)sub_19C2DF0BC(v81, v82);
                v5 += 4;
                ++v82;
                v81 = *(_DWORD **)a1;
              }
              while (v82 < **(_DWORD **)a1);
            }
            break;
          case 8:
            v83 = *(_DWORD **)a1;
            if (**(int **)a1 >= 1)
            {
              v84 = 0;
              do
              {
                if (*a4 <= (unint64_t)v5)
                {
                  v5 = sub_19C2CEBA4((uint64_t)a4, v5);
                  v83 = *(_DWORD **)a1;
                }
                *v5++ = *(_BYTE *)sub_19C2DE470(v83, v84++);
                v83 = *(_DWORD **)a1;
              }
              while (v84 < **(_DWORD **)a1);
            }
            break;
          case 9:
          case 10:
          case 11:
          case 12:
            sub_19C2CF5C8((uint64_t)v432, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 1966);
            v41 = sub_19C2CF5E0(v432, "Non-primitive types can't be packed.");
            sub_19C2CF710((uint64_t)&v431, (const char **)&v41->__r_.__value_.__l.__data_);
            sub_19C2CF718((uint64_t)v432);
            break;
          case 13:
            v48 = *(_DWORD **)a1;
            if (**(int **)a1 >= 1)
            {
              v49 = 0;
              do
              {
                if (*a4 <= (unint64_t)v5)
                {
                  v5 = sub_19C2CEBA4((uint64_t)a4, v5);
                  v48 = *(_DWORD **)a1;
                }
                v50 = *(_DWORD *)sub_19C2DF0BC(v48, v49);
                if (v50 > 0x7F)
                {
                  *v5 = v50 | 0x80;
                  v51 = v50 >> 7;
                  if (v50 >> 14)
                  {
                    v5 += 2;
                    do
                    {
                      *(v5 - 1) = v51 | 0x80;
                      v52 = v51 >> 7;
                      ++v5;
                      v53 = v51 >> 14;
                      v51 >>= 7;
                    }
                    while (v53);
                    *(v5 - 1) = v52;
                  }
                  else
                  {
                    v5[1] = v51;
                    v5 += 2;
                  }
                }
                else
                {
                  *v5++ = v50;
                }
                ++v49;
                v48 = *(_DWORD **)a1;
              }
              while (v49 < **(_DWORD **)a1);
            }
            break;
          case 14:
            v85 = *(_DWORD **)a1;
            if (**(int **)a1 >= 1)
            {
              v86 = 0;
              do
              {
                if (*a4 <= (unint64_t)v5)
                {
                  v5 = sub_19C2CEBA4((uint64_t)a4, v5);
                  v85 = *(_DWORD **)a1;
                }
                v87 = *(int *)sub_19C2DEA94(v85, v86);
                if (v87 > 0x7F)
                {
                  *v5 = v87 | 0x80;
                  v88 = v87 >> 7;
                  if (v87 >> 14)
                  {
                    v5 += 2;
                    do
                    {
                      *(v5 - 1) = v88 | 0x80;
                      v89 = v88 >> 7;
                      ++v5;
                      v90 = v88 >> 14;
                      v88 >>= 7;
                    }
                    while (v90);
                    *(v5 - 1) = v89;
                  }
                  else
                  {
                    v5[1] = v88;
                    v5 += 2;
                  }
                }
                else
                {
                  *v5++ = v87;
                }
                ++v86;
                v85 = *(_DWORD **)a1;
              }
              while (v86 < **(_DWORD **)a1);
            }
            break;
          case 15:
            v54 = *(_DWORD **)a1;
            if (**(int **)a1 >= 1)
            {
              v55 = 0;
              do
              {
                if (*a4 <= (unint64_t)v5)
                {
                  v5 = sub_19C2CEBA4((uint64_t)a4, v5);
                  v54 = *(_DWORD **)a1;
                }
                *(_DWORD *)v5 = *(_DWORD *)sub_19C2DEA94(v54, v55);
                v5 += 4;
                ++v55;
                v54 = *(_DWORD **)a1;
              }
              while (v55 < **(_DWORD **)a1);
            }
            break;
          case 16:
            v91 = *(_DWORD **)a1;
            if (**(int **)a1 >= 1)
            {
              v92 = 0;
              do
              {
                if (*a4 <= (unint64_t)v5)
                {
                  v5 = sub_19C2CEBA4((uint64_t)a4, v5);
                  v91 = *(_DWORD **)a1;
                }
                *(_QWORD *)v5 = *(_QWORD *)sub_19C2DF6E4(v91, v92);
                v5 += 8;
                ++v92;
                v91 = *(_DWORD **)a1;
              }
              while (v92 < **(_DWORD **)a1);
            }
            break;
          case 17:
            v56 = *(_DWORD **)a1;
            if (**(int **)a1 >= 1)
            {
              v57 = 0;
              do
              {
                if (*a4 <= (unint64_t)v5)
                {
                  v5 = sub_19C2CEBA4((uint64_t)a4, v5);
                  v56 = *(_DWORD **)a1;
                }
                v58 = (int *)sub_19C2DEA94(v56, v57);
                v59 = (2 * *v58) ^ (*v58 >> 31);
                if (v59 > 0x7F)
                {
                  *v5 = v59 | 0x80;
                  v60 = v59 >> 7;
                  if (v59 >> 14)
                  {
                    v5 += 2;
                    do
                    {
                      *(v5 - 1) = v60 | 0x80;
                      v61 = v60 >> 7;
                      ++v5;
                      v62 = v60 >> 14;
                      v60 >>= 7;
                    }
                    while (v62);
                    *(v5 - 1) = v61;
                  }
                  else
                  {
                    v5[1] = v60;
                    v5 += 2;
                  }
                }
                else
                {
                  *v5++ = v59;
                }
                ++v57;
                v56 = *(_DWORD **)a1;
              }
              while (v57 < **(_DWORD **)a1);
            }
            break;
          case 18:
            v93 = *(_DWORD **)a1;
            if (**(int **)a1 >= 1)
            {
              v94 = 0;
              do
              {
                if (*a4 <= (unint64_t)v5)
                {
                  v5 = sub_19C2CEBA4((uint64_t)a4, v5);
                  v93 = *(_DWORD **)a1;
                }
                v95 = (uint64_t *)sub_19C2DF6E4(v93, v94);
                v96 = (2 * *v95) ^ (*v95 >> 63);
                if (v96 > 0x7F)
                {
                  *v5 = v96 | 0x80;
                  v97 = v96 >> 7;
                  if (v96 >> 14)
                  {
                    v5 += 2;
                    do
                    {
                      *(v5 - 1) = v97 | 0x80;
                      v98 = v97 >> 7;
                      ++v5;
                      v99 = v97 >> 14;
                      v97 >>= 7;
                    }
                    while (v99);
                    *(v5 - 1) = v98;
                  }
                  else
                  {
                    v5[1] = v97;
                    v5 += 2;
                  }
                }
                else
                {
                  *v5++ = v96;
                }
                ++v94;
                v93 = *(_DWORD **)a1;
              }
              while (v94 < **(_DWORD **)a1);
            }
            break;
          default:
            return v5;
        }
      }
      return v5;
    }
    v18 = a1[8];
    if ((v18 - 19) <= 0xFFFFFFED)
    {
      sub_19C2CF5C8((uint64_t)v432, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v19 = sub_19C2CF5E0(v432, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_19C2CF710((uint64_t)&v431, (const char **)&v19->__r_.__value_.__l.__data_);
      sub_19C2CF718((uint64_t)v432);
    }
    switch(v18)
    {
      case 1:
        v20 = *(_DWORD **)a1;
        if (**(int **)a1 >= 1)
        {
          v21 = 0;
          v22 = 8 * a2;
          v23 = (8 * a2) | 1;
          v24 = (8 * a2) | 0x81;
          v25 = (a2 >> 4) & 0x1FFFFFF;
          v26 = v22 >> 7;
          do
          {
            if (*a4 <= (unint64_t)v5)
            {
              v5 = sub_19C2CEBA4((uint64_t)a4, v5);
              v20 = *(_DWORD **)a1;
            }
            v27 = *(_QWORD *)sub_19C2E095C(v20, v21);
            if (v23 > 0x7F)
            {
              *v5 = v24;
              if (v23 >= 0x4000)
              {
                v28 = v5 + 2;
                v29 = v25;
                do
                {
                  *((_BYTE *)v28 - 1) = v29 | 0x80;
                  v30 = v29 >> 7;
                  v28 = (_QWORD *)((char *)v28 + 1);
                  v31 = v29 >> 14;
                  v29 >>= 7;
                }
                while (v31);
                *((_BYTE *)v28 - 1) = v30;
              }
              else
              {
                v5[1] = v26;
                v28 = v5 + 2;
              }
            }
            else
            {
              *v5 = v23;
              v28 = v5 + 1;
            }
            *v28 = v27;
            v5 = (char *)(v28 + 1);
            ++v21;
            v20 = *(_DWORD **)a1;
          }
          while (v21 < **(_DWORD **)a1);
        }
        return v5;
      case 2:
        v100 = *(_DWORD **)a1;
        if (**(int **)a1 >= 1)
        {
          v101 = 0;
          v102 = (8 * a2) | 5;
          v103 = (a2 >> 4) & 0x1FFFFFF;
          v104 = (8 * a2) >> 7;
          v105 = (8 * a2) | 0x85;
          do
          {
            if (*a4 <= (unint64_t)v5)
            {
              v5 = sub_19C2CEBA4((uint64_t)a4, v5);
              v100 = *(_DWORD **)a1;
            }
            v106 = *(_DWORD *)sub_19C2E0334(v100, v101);
            if (v102 > 0x7F)
            {
              *v5 = v105;
              if (v102 >= 0x4000)
              {
                v107 = v5 + 2;
                v108 = v103;
                do
                {
                  *((_BYTE *)v107 - 1) = v108 | 0x80;
                  v109 = v108 >> 7;
                  v107 = (_DWORD *)((char *)v107 + 1);
                  v110 = v108 >> 14;
                  v108 >>= 7;
                }
                while (v110);
                *((_BYTE *)v107 - 1) = v109;
              }
              else
              {
                v5[1] = v104;
                v107 = v5 + 2;
              }
            }
            else
            {
              *v5 = v102;
              v107 = v5 + 1;
            }
            *v107 = v106;
            v5 = (char *)(v107 + 1);
            ++v101;
            v100 = *(_DWORD **)a1;
          }
          while (v101 < **(_DWORD **)a1);
        }
        return v5;
      case 3:
        v111 = *(_DWORD **)a1;
        if (**(int **)a1 >= 1)
        {
          v112 = 0;
          v113 = 8 * a2;
          v114 = (8 * a2) | 0x80;
          v115 = (a2 >> 4) & 0x1FFFFFF;
          do
          {
            if (*a4 <= (unint64_t)v5)
            {
              v5 = sub_19C2CEBA4((uint64_t)a4, v5);
              v111 = *(_DWORD **)a1;
            }
            v116 = *(_QWORD *)sub_19C2DF6E4(v111, v112);
            if (v113 > 0x7F)
            {
              *v5 = v114;
              if (v113 >= 0x4000)
              {
                v117 = v5 + 2;
                v118 = v115;
                do
                {
                  *(v117 - 1) = v118 | 0x80;
                  v119 = v118 >> 7;
                  ++v117;
                  v120 = v118 >> 14;
                  v118 >>= 7;
                }
                while (v120);
                *(v117 - 1) = v119;
              }
              else
              {
                v5[1] = v113 >> 7;
                v117 = v5 + 2;
              }
            }
            else
            {
              v117 = v5 + 1;
              *v5 = v113;
            }
            if (v116 > 0x7F)
            {
              *v117 = v116 | 0x80;
              v121 = v116 >> 7;
              if (v116 >> 14)
              {
                v5 = v117 + 2;
                do
                {
                  *(v5 - 1) = v121 | 0x80;
                  v122 = v121 >> 7;
                  ++v5;
                  v123 = v121 >> 14;
                  v121 >>= 7;
                }
                while (v123);
                *(v5 - 1) = v122;
              }
              else
              {
                v117[1] = v121;
                v5 = v117 + 2;
              }
            }
            else
            {
              *v117 = v116;
              v5 = v117 + 1;
            }
            ++v112;
            v111 = *(_DWORD **)a1;
          }
          while (v112 < **(_DWORD **)a1);
        }
        return v5;
      case 4:
        v124 = *(_DWORD **)a1;
        if (**(int **)a1 >= 1)
        {
          v125 = 0;
          v126 = 8 * a2;
          v127 = (8 * a2) | 0x80;
          v128 = (a2 >> 4) & 0x1FFFFFF;
          do
          {
            if (*a4 <= (unint64_t)v5)
            {
              v5 = sub_19C2CEBA4((uint64_t)a4, v5);
              v124 = *(_DWORD **)a1;
            }
            v129 = *(_QWORD *)sub_19C2DFD0C(v124, v125);
            if (v126 > 0x7F)
            {
              *v5 = v127;
              if (v126 >= 0x4000)
              {
                v130 = v5 + 2;
                v131 = v128;
                do
                {
                  *(v130 - 1) = v131 | 0x80;
                  v132 = v131 >> 7;
                  ++v130;
                  v133 = v131 >> 14;
                  v131 >>= 7;
                }
                while (v133);
                *(v130 - 1) = v132;
              }
              else
              {
                v5[1] = v126 >> 7;
                v130 = v5 + 2;
              }
            }
            else
            {
              v130 = v5 + 1;
              *v5 = v126;
            }
            if (v129 > 0x7F)
            {
              *v130 = v129 | 0x80;
              v134 = v129 >> 7;
              if (v129 >> 14)
              {
                v5 = v130 + 2;
                do
                {
                  *(v5 - 1) = v134 | 0x80;
                  v135 = v134 >> 7;
                  ++v5;
                  v136 = v134 >> 14;
                  v134 >>= 7;
                }
                while (v136);
                *(v5 - 1) = v135;
              }
              else
              {
                v130[1] = v134;
                v5 = v130 + 2;
              }
            }
            else
            {
              *v130 = v129;
              v5 = v130 + 1;
            }
            ++v125;
            v124 = *(_DWORD **)a1;
          }
          while (v125 < **(_DWORD **)a1);
        }
        return v5;
      case 5:
        v137 = *(_DWORD **)a1;
        if (**(int **)a1 >= 1)
        {
          v138 = 0;
          v139 = 8 * a2;
          v140 = (8 * a2) | 0x80;
          v141 = (a2 >> 4) & 0x1FFFFFF;
          do
          {
            if (*a4 <= (unint64_t)v5)
            {
              v5 = sub_19C2CEBA4((uint64_t)a4, v5);
              v137 = *(_DWORD **)a1;
            }
            v142 = *(int *)sub_19C2DEA94(v137, v138);
            if (v139 > 0x7F)
            {
              *v5 = v140;
              if (v139 >= 0x4000)
              {
                v143 = v5 + 2;
                v144 = v141;
                do
                {
                  *(v143 - 1) = v144 | 0x80;
                  v145 = v144 >> 7;
                  ++v143;
                  v146 = v144 >> 14;
                  v144 >>= 7;
                }
                while (v146);
                *(v143 - 1) = v145;
              }
              else
              {
                v5[1] = v139 >> 7;
                v143 = v5 + 2;
              }
            }
            else
            {
              v143 = v5 + 1;
              *v5 = v139;
            }
            if (v142 > 0x7F)
            {
              *v143 = v142 | 0x80;
              v147 = v142 >> 7;
              if (v142 >> 14)
              {
                v5 = v143 + 2;
                do
                {
                  *(v5 - 1) = v147 | 0x80;
                  v148 = v147 >> 7;
                  ++v5;
                  v149 = v147 >> 14;
                  v147 >>= 7;
                }
                while (v149);
                *(v5 - 1) = v148;
              }
              else
              {
                v143[1] = v147;
                v5 = v143 + 2;
              }
            }
            else
            {
              *v143 = v142;
              v5 = v143 + 1;
            }
            ++v138;
            v137 = *(_DWORD **)a1;
          }
          while (v138 < **(_DWORD **)a1);
        }
        return v5;
      case 6:
        v150 = *(_DWORD **)a1;
        if (**(int **)a1 >= 1)
        {
          v151 = 0;
          v152 = 8 * a2;
          v153 = (8 * a2) | 1;
          v154 = (8 * a2) | 0x81;
          v155 = (a2 >> 4) & 0x1FFFFFF;
          v156 = v152 >> 7;
          do
          {
            if (*a4 <= (unint64_t)v5)
            {
              v5 = sub_19C2CEBA4((uint64_t)a4, v5);
              v150 = *(_DWORD **)a1;
            }
            v157 = *(_QWORD *)sub_19C2DFD0C(v150, v151);
            if (v153 > 0x7F)
            {
              *v5 = v154;
              if (v153 >= 0x4000)
              {
                v158 = v5 + 2;
                v159 = v155;
                do
                {
                  *((_BYTE *)v158 - 1) = v159 | 0x80;
                  v160 = v159 >> 7;
                  v158 = (_QWORD *)((char *)v158 + 1);
                  v161 = v159 >> 14;
                  v159 >>= 7;
                }
                while (v161);
                *((_BYTE *)v158 - 1) = v160;
              }
              else
              {
                v5[1] = v156;
                v158 = v5 + 2;
              }
            }
            else
            {
              *v5 = v153;
              v158 = v5 + 1;
            }
            *v158 = v157;
            v5 = (char *)(v158 + 1);
            ++v151;
            v150 = *(_DWORD **)a1;
          }
          while (v151 < **(_DWORD **)a1);
        }
        return v5;
      case 7:
        v162 = *(_DWORD **)a1;
        if (**(int **)a1 >= 1)
        {
          v163 = 0;
          v164 = (8 * a2) | 5;
          v165 = (a2 >> 4) & 0x1FFFFFF;
          v166 = (8 * a2) >> 7;
          v167 = (8 * a2) | 0x85;
          do
          {
            if (*a4 <= (unint64_t)v5)
            {
              v5 = sub_19C2CEBA4((uint64_t)a4, v5);
              v162 = *(_DWORD **)a1;
            }
            v168 = *(_DWORD *)sub_19C2DF0BC(v162, v163);
            if (v164 > 0x7F)
            {
              *v5 = v167;
              if (v164 >= 0x4000)
              {
                v169 = v5 + 2;
                v170 = v165;
                do
                {
                  *((_BYTE *)v169 - 1) = v170 | 0x80;
                  v171 = v170 >> 7;
                  v169 = (_DWORD *)((char *)v169 + 1);
                  v172 = v170 >> 14;
                  v170 >>= 7;
                }
                while (v172);
                *((_BYTE *)v169 - 1) = v171;
              }
              else
              {
                v5[1] = v166;
                v169 = v5 + 2;
              }
            }
            else
            {
              *v5 = v164;
              v169 = v5 + 1;
            }
            *v169 = v168;
            v5 = (char *)(v169 + 1);
            ++v163;
            v162 = *(_DWORD **)a1;
          }
          while (v163 < **(_DWORD **)a1);
        }
        return v5;
      case 8:
        v173 = *(_DWORD **)a1;
        if (**(int **)a1 >= 1)
        {
          v174 = 0;
          v175 = 8 * a2;
          v176 = (8 * a2) | 0x80;
          v177 = (a2 >> 4) & 0x1FFFFFF;
          do
          {
            if (*a4 <= (unint64_t)v5)
            {
              v5 = sub_19C2CEBA4((uint64_t)a4, v5);
              v173 = *(_DWORD **)a1;
            }
            v178 = *(_BYTE *)sub_19C2DE470(v173, v174);
            if (v175 > 0x7F)
            {
              *v5 = v176;
              if (v175 >= 0x4000)
              {
                v179 = v5 + 2;
                v180 = v177;
                do
                {
                  *(v179 - 1) = v180 | 0x80;
                  v181 = v180 >> 7;
                  ++v179;
                  v182 = v180 >> 14;
                  v180 >>= 7;
                }
                while (v182);
                *(v179 - 1) = v181;
              }
              else
              {
                v5[1] = v175 >> 7;
                v179 = v5 + 2;
              }
            }
            else
            {
              *v5 = v175;
              v179 = v5 + 1;
            }
            *v179 = v178;
            v5 = v179 + 1;
            ++v174;
            v173 = *(_DWORD **)a1;
          }
          while (v174 < **(_DWORD **)a1);
        }
        return v5;
      case 9:
        v183 = *(_QWORD *)a1;
        if (*(int *)(*(_QWORD *)a1 + 8) < 1)
          return v5;
        v184 = 0;
        v185 = 8 * a2;
        v186 = 4;
        if (((a2 >> 25) & 0xF) != 0)
          v186 = 5;
        v187 = (8 * a2) | 2;
        v188 = 1;
        if (v185 >= 0x80)
          v188 = 2;
        if (v185 < 0x200000)
          v186 = 3;
        if (v185 >= 0x4000)
          v189 = v186;
        else
          v189 = v188;
        v429 = v185 >> 7;
        while (1)
        {
          if (*a4 <= (unint64_t)v5)
          {
            v5 = sub_19C2CEBA4((uint64_t)a4, v5);
            v183 = *(_QWORD *)a1;
          }
          v190 = sub_19C2CA2E4(v183, v184);
          if (*(char *)(v190 + 23) < 0)
          {
            v191 = *(_QWORD *)(v190 + 8);
            if (v191 > 127)
              goto LABEL_326;
          }
          else
          {
            v191 = *(unsigned __int8 *)(v190 + 23);
          }
          if ((uint64_t)(*a4 + ~(unint64_t)&v5[v189] + 16) >= v191)
          {
            if (v187 > 0x7F)
            {
              *v5 = (8 * a2) | 0x82;
              if (v187 >= 0x4000)
              {
                v192 = v5 + 2;
                v193 = (a2 >> 4) & 0x1FFFFFF;
                do
                {
                  *(v192 - 1) = v193 | 0x80;
                  v194 = v193 >> 7;
                  ++v192;
                  v195 = v193 >> 14;
                  v193 >>= 7;
                }
                while (v195);
                *(v192 - 1) = v194;
              }
              else
              {
                v5[1] = v429;
                v192 = v5 + 2;
              }
            }
            else
            {
              v192 = v5 + 1;
              *v5 = v187;
            }
            *v192 = v191;
            v196 = v192 + 1;
            if (*(char *)(v190 + 23) >= 0)
              v197 = (const void *)v190;
            else
              v197 = *(const void **)v190;
            memcpy(v196, v197, v191);
            v5 = &v196[v191];
            goto LABEL_324;
          }
LABEL_326:
          v5 = sub_19C2CF0B4(a4, a2, v190, v5);
LABEL_324:
          ++v184;
          v183 = *(_QWORD *)a1;
          if (v184 >= *(_DWORD *)(*(_QWORD *)a1 + 8))
            return v5;
        }
      case 10:
        v198 = *(_QWORD *)a1;
        if (*(int *)(*(_QWORD *)a1 + 8) >= 1)
        {
          v199 = 0;
          v200 = (8 * a2) | 3;
          v201 = (8 * a2) | 0x83;
          v202 = (a2 >> 4) & 0x1FFFFFF;
          v203 = (8 * a2) | 4;
          v204 = (8 * a2) >> 7;
          v205 = (8 * a2) | 0x84;
          do
          {
            if (*a4 <= (unint64_t)v5)
            {
              v5 = sub_19C2CEBA4((uint64_t)a4, v5);
              v198 = *(_QWORD *)a1;
            }
            v206 = sub_19C2D92E8(v198, v199);
            if (v200 > 0x7F)
            {
              *v5 = v201;
              if (v200 >= 0x4000)
              {
                v207 = v5 + 2;
                v208 = v202;
                do
                {
                  *(v207 - 1) = v208 | 0x80;
                  v209 = v208 >> 7;
                  ++v207;
                  v210 = v208 >> 14;
                  v208 >>= 7;
                }
                while (v210);
                *(v207 - 1) = v209;
              }
              else
              {
                v5[1] = v204;
                v207 = v5 + 2;
              }
            }
            else
            {
              v207 = v5 + 1;
              *v5 = v200;
            }
            v211 = (char *)(*(uint64_t (**)(uint64_t, char *, uint64_t *))(*(_QWORD *)v206 + 96))(v206, v207, a4);
            if (*a4 <= (unint64_t)v211)
              v211 = sub_19C2CEBA4((uint64_t)a4, v211);
            if (v203 > 0x7F)
            {
              *v211 = v205;
              if (v203 >= 0x4000)
              {
                v5 = v211 + 2;
                v212 = v202;
                do
                {
                  *(v5 - 1) = v212 | 0x80;
                  v213 = v212 >> 7;
                  ++v5;
                  v214 = v212 >> 14;
                  v212 >>= 7;
                }
                while (v214);
                *(v5 - 1) = v213;
              }
              else
              {
                v211[1] = v204;
                v5 = v211 + 2;
              }
            }
            else
            {
              v5 = v211 + 1;
              *v211 = v203;
            }
            ++v199;
            v198 = *(_QWORD *)a1;
          }
          while (v199 < *(_DWORD *)(*(_QWORD *)a1 + 8));
        }
        return v5;
      case 11:
        v215 = *(_QWORD *)a1;
        if (*(int *)(*(_QWORD *)a1 + 8) >= 1)
        {
          v216 = 0;
          v217 = (8 * a2) | 2;
          v218 = (a2 >> 4) & 0x1FFFFFF;
          v219 = (8 * a2) >> 7;
          v220 = (8 * a2) | 0x82;
          do
          {
            if (*a4 <= (unint64_t)v5)
            {
              v5 = sub_19C2CEBA4((uint64_t)a4, v5);
              v215 = *(_QWORD *)a1;
            }
            v221 = sub_19C2D92E8(v215, v216);
            v222 = v221;
            if (v217 > 0x7F)
            {
              *v5 = v220;
              if (v217 >= 0x4000)
              {
                v223 = v5 + 2;
                v224 = v218;
                do
                {
                  *(v223 - 1) = v224 | 0x80;
                  v225 = v224 >> 7;
                  ++v223;
                  v226 = v224 >> 14;
                  v224 >>= 7;
                }
                while (v226);
                *(v223 - 1) = v225;
              }
              else
              {
                v5[1] = v219;
                v223 = v5 + 2;
              }
            }
            else
            {
              v223 = v5 + 1;
              *v5 = v217;
            }
            v227 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v221 + 80))(v221);
            if (v227 > 0x7F)
            {
              *v223 = v227 | 0x80;
              v229 = v227 >> 7;
              if (v227 >> 14)
              {
                v228 = v223 + 2;
                do
                {
                  *(v228 - 1) = v229 | 0x80;
                  v230 = v229 >> 7;
                  ++v228;
                  v231 = v229 >> 14;
                  v229 >>= 7;
                }
                while (v231);
                *(v228 - 1) = v230;
              }
              else
              {
                v223[1] = v229;
                v228 = v223 + 2;
              }
            }
            else
            {
              *v223 = v227;
              v228 = v223 + 1;
            }
            v5 = (char *)(*(uint64_t (**)(uint64_t, _BYTE *, uint64_t *))(*(_QWORD *)v222 + 96))(v222, v228, a4);
            ++v216;
            v215 = *(_QWORD *)a1;
          }
          while (v216 < *(_DWORD *)(*(_QWORD *)a1 + 8));
        }
        return v5;
      case 12:
        v232 = *(_QWORD *)a1;
        if (*(int *)(*(_QWORD *)a1 + 8) < 1)
          return v5;
        v233 = 0;
        v234 = 8 * a2;
        v235 = 4;
        if (((a2 >> 25) & 0xF) != 0)
          v235 = 5;
        v236 = (8 * a2) | 2;
        v237 = 1;
        if (v234 >= 0x80)
          v237 = 2;
        if (v234 < 0x200000)
          v235 = 3;
        if (v234 >= 0x4000)
          v238 = v235;
        else
          v238 = v237;
        v430 = v234 >> 7;
        break;
      case 13:
        v247 = *(_DWORD **)a1;
        if (**(int **)a1 >= 1)
        {
          v248 = 0;
          v249 = 8 * a2;
          v250 = (8 * a2) | 0x80;
          v251 = (a2 >> 4) & 0x1FFFFFF;
          do
          {
            if (*a4 <= (unint64_t)v5)
            {
              v5 = sub_19C2CEBA4((uint64_t)a4, v5);
              v247 = *(_DWORD **)a1;
            }
            v252 = *(_DWORD *)sub_19C2DF0BC(v247, v248);
            if (v249 > 0x7F)
            {
              *v5 = v250;
              if (v249 >= 0x4000)
              {
                v253 = v5 + 2;
                v254 = v251;
                do
                {
                  *(v253 - 1) = v254 | 0x80;
                  v255 = v254 >> 7;
                  ++v253;
                  v256 = v254 >> 14;
                  v254 >>= 7;
                }
                while (v256);
                *(v253 - 1) = v255;
              }
              else
              {
                v5[1] = v249 >> 7;
                v253 = v5 + 2;
              }
            }
            else
            {
              v253 = v5 + 1;
              *v5 = v249;
            }
            if (v252 > 0x7F)
            {
              *v253 = v252 | 0x80;
              v257 = v252 >> 7;
              if (v252 >> 14)
              {
                v5 = v253 + 2;
                do
                {
                  *(v5 - 1) = v257 | 0x80;
                  v258 = v257 >> 7;
                  ++v5;
                  v259 = v257 >> 14;
                  v257 >>= 7;
                }
                while (v259);
                *(v5 - 1) = v258;
              }
              else
              {
                v253[1] = v257;
                v5 = v253 + 2;
              }
            }
            else
            {
              *v253 = v252;
              v5 = v253 + 1;
            }
            ++v248;
            v247 = *(_DWORD **)a1;
          }
          while (v248 < **(_DWORD **)a1);
        }
        return v5;
      case 14:
        v260 = *(_DWORD **)a1;
        if (**(int **)a1 >= 1)
        {
          v261 = 0;
          v262 = 8 * a2;
          v263 = (8 * a2) | 0x80;
          v264 = (a2 >> 4) & 0x1FFFFFF;
          do
          {
            if (*a4 <= (unint64_t)v5)
            {
              v5 = sub_19C2CEBA4((uint64_t)a4, v5);
              v260 = *(_DWORD **)a1;
            }
            v265 = *(int *)sub_19C2DEA94(v260, v261);
            if (v262 > 0x7F)
            {
              *v5 = v263;
              if (v262 >= 0x4000)
              {
                v266 = v5 + 2;
                v267 = v264;
                do
                {
                  *(v266 - 1) = v267 | 0x80;
                  v268 = v267 >> 7;
                  ++v266;
                  v269 = v267 >> 14;
                  v267 >>= 7;
                }
                while (v269);
                *(v266 - 1) = v268;
              }
              else
              {
                v5[1] = v262 >> 7;
                v266 = v5 + 2;
              }
            }
            else
            {
              v266 = v5 + 1;
              *v5 = v262;
            }
            if (v265 > 0x7F)
            {
              *v266 = v265 | 0x80;
              v270 = v265 >> 7;
              if (v265 >> 14)
              {
                v5 = v266 + 2;
                do
                {
                  *(v5 - 1) = v270 | 0x80;
                  v271 = v270 >> 7;
                  ++v5;
                  v272 = v270 >> 14;
                  v270 >>= 7;
                }
                while (v272);
                *(v5 - 1) = v271;
              }
              else
              {
                v266[1] = v270;
                v5 = v266 + 2;
              }
            }
            else
            {
              *v266 = v265;
              v5 = v266 + 1;
            }
            ++v261;
            v260 = *(_DWORD **)a1;
          }
          while (v261 < **(_DWORD **)a1);
        }
        return v5;
      case 15:
        v273 = *(_DWORD **)a1;
        if (**(int **)a1 >= 1)
        {
          v274 = 0;
          v275 = (8 * a2) | 5;
          v276 = (a2 >> 4) & 0x1FFFFFF;
          v277 = (8 * a2) >> 7;
          v278 = (8 * a2) | 0x85;
          do
          {
            if (*a4 <= (unint64_t)v5)
            {
              v5 = sub_19C2CEBA4((uint64_t)a4, v5);
              v273 = *(_DWORD **)a1;
            }
            v279 = *(_DWORD *)sub_19C2DEA94(v273, v274);
            if (v275 > 0x7F)
            {
              *v5 = v278;
              if (v275 >= 0x4000)
              {
                v280 = v5 + 2;
                v281 = v276;
                do
                {
                  *((_BYTE *)v280 - 1) = v281 | 0x80;
                  v282 = v281 >> 7;
                  v280 = (_DWORD *)((char *)v280 + 1);
                  v283 = v281 >> 14;
                  v281 >>= 7;
                }
                while (v283);
                *((_BYTE *)v280 - 1) = v282;
              }
              else
              {
                v5[1] = v277;
                v280 = v5 + 2;
              }
            }
            else
            {
              *v5 = v275;
              v280 = v5 + 1;
            }
            *v280 = v279;
            v5 = (char *)(v280 + 1);
            ++v274;
            v273 = *(_DWORD **)a1;
          }
          while (v274 < **(_DWORD **)a1);
        }
        return v5;
      case 16:
        v284 = *(_DWORD **)a1;
        if (**(int **)a1 >= 1)
        {
          v285 = 0;
          v286 = 8 * a2;
          v287 = (8 * a2) | 1;
          v288 = (8 * a2) | 0x81;
          v289 = (a2 >> 4) & 0x1FFFFFF;
          v290 = v286 >> 7;
          do
          {
            if (*a4 <= (unint64_t)v5)
            {
              v5 = sub_19C2CEBA4((uint64_t)a4, v5);
              v284 = *(_DWORD **)a1;
            }
            v291 = *(_QWORD *)sub_19C2DF6E4(v284, v285);
            if (v287 > 0x7F)
            {
              *v5 = v288;
              if (v287 >= 0x4000)
              {
                v292 = v5 + 2;
                v293 = v289;
                do
                {
                  *((_BYTE *)v292 - 1) = v293 | 0x80;
                  v294 = v293 >> 7;
                  v292 = (_QWORD *)((char *)v292 + 1);
                  v295 = v293 >> 14;
                  v293 >>= 7;
                }
                while (v295);
                *((_BYTE *)v292 - 1) = v294;
              }
              else
              {
                v5[1] = v290;
                v292 = v5 + 2;
              }
            }
            else
            {
              *v5 = v287;
              v292 = v5 + 1;
            }
            *v292 = v291;
            v5 = (char *)(v292 + 1);
            ++v285;
            v284 = *(_DWORD **)a1;
          }
          while (v285 < **(_DWORD **)a1);
        }
        return v5;
      case 17:
        v296 = *(_DWORD **)a1;
        if (**(int **)a1 >= 1)
        {
          v297 = 0;
          v298 = 8 * a2;
          v299 = (8 * a2) | 0x80;
          v300 = (a2 >> 4) & 0x1FFFFFF;
          do
          {
            if (*a4 <= (unint64_t)v5)
            {
              v5 = sub_19C2CEBA4((uint64_t)a4, v5);
              v296 = *(_DWORD **)a1;
            }
            v301 = *(_DWORD *)sub_19C2DEA94(v296, v297);
            if (v298 > 0x7F)
            {
              *v5 = v299;
              if (v298 >= 0x4000)
              {
                v302 = v5 + 2;
                v303 = v300;
                do
                {
                  *(v302 - 1) = v303 | 0x80;
                  v304 = v303 >> 7;
                  ++v302;
                  v305 = v303 >> 14;
                  v303 >>= 7;
                }
                while (v305);
                *(v302 - 1) = v304;
              }
              else
              {
                v5[1] = v298 >> 7;
                v302 = v5 + 2;
              }
            }
            else
            {
              v302 = v5 + 1;
              *v5 = v298;
            }
            v306 = (2 * v301) ^ (v301 >> 31);
            if (v306 > 0x7F)
            {
              *v302 = v306 | 0x80;
              v307 = v306 >> 7;
              if (v306 >> 14)
              {
                v5 = v302 + 2;
                do
                {
                  *(v5 - 1) = v307 | 0x80;
                  v308 = v307 >> 7;
                  ++v5;
                  v309 = v307 >> 14;
                  v307 >>= 7;
                }
                while (v309);
                *(v5 - 1) = v308;
              }
              else
              {
                v302[1] = v307;
                v5 = v302 + 2;
              }
            }
            else
            {
              *v302 = v306;
              v5 = v302 + 1;
            }
            ++v297;
            v296 = *(_DWORD **)a1;
          }
          while (v297 < **(_DWORD **)a1);
        }
        return v5;
      case 18:
        v310 = *(_DWORD **)a1;
        if (**(int **)a1 >= 1)
        {
          v311 = 0;
          v312 = 8 * a2;
          v313 = (8 * a2) | 0x80;
          v314 = (a2 >> 4) & 0x1FFFFFF;
          do
          {
            if (*a4 <= (unint64_t)v5)
            {
              v5 = sub_19C2CEBA4((uint64_t)a4, v5);
              v310 = *(_DWORD **)a1;
            }
            v315 = *(_QWORD *)sub_19C2DF6E4(v310, v311);
            if (v312 > 0x7F)
            {
              *v5 = v313;
              if (v312 >= 0x4000)
              {
                v316 = v5 + 2;
                v317 = v314;
                do
                {
                  *(v316 - 1) = v317 | 0x80;
                  v318 = v317 >> 7;
                  ++v316;
                  v319 = v317 >> 14;
                  v317 >>= 7;
                }
                while (v319);
                *(v316 - 1) = v318;
              }
              else
              {
                v5[1] = v312 >> 7;
                v316 = v5 + 2;
              }
            }
            else
            {
              v316 = v5 + 1;
              *v5 = v312;
            }
            v320 = (2 * v315) ^ (v315 >> 63);
            if (v320 > 0x7F)
            {
              *v316 = v320 | 0x80;
              v321 = v320 >> 7;
              if (v320 >> 14)
              {
                v5 = v316 + 2;
                do
                {
                  *(v5 - 1) = v321 | 0x80;
                  v322 = v321 >> 7;
                  ++v5;
                  v323 = v321 >> 14;
                  v321 >>= 7;
                }
                while (v323);
                *(v5 - 1) = v322;
              }
              else
              {
                v316[1] = v321;
                v5 = v316 + 2;
              }
            }
            else
            {
              *v316 = v320;
              v5 = v316 + 1;
            }
            ++v311;
            v310 = *(_DWORD **)a1;
          }
          while (v311 < **(_DWORD **)a1);
        }
        return v5;
      default:
        return v5;
    }
    while (1)
    {
      if (*a4 <= (unint64_t)v5)
      {
        v5 = sub_19C2CEBA4((uint64_t)a4, v5);
        v232 = *(_QWORD *)a1;
      }
      v239 = sub_19C2CA2E4(v232, v233);
      if (*(char *)(v239 + 23) < 0)
      {
        v240 = *(_QWORD *)(v239 + 8);
        if (v240 > 127)
          goto LABEL_399;
      }
      else
      {
        v240 = *(unsigned __int8 *)(v239 + 23);
      }
      if ((uint64_t)(*a4 + ~(unint64_t)&v5[v238] + 16) >= v240)
      {
        if (v236 > 0x7F)
        {
          *v5 = (8 * a2) | 0x82;
          if (v236 >= 0x4000)
          {
            v241 = v5 + 2;
            v242 = (a2 >> 4) & 0x1FFFFFF;
            do
            {
              *(v241 - 1) = v242 | 0x80;
              v243 = v242 >> 7;
              ++v241;
              v244 = v242 >> 14;
              v242 >>= 7;
            }
            while (v244);
            *(v241 - 1) = v243;
          }
          else
          {
            v5[1] = v430;
            v241 = v5 + 2;
          }
        }
        else
        {
          v241 = v5 + 1;
          *v5 = v236;
        }
        *v241 = v240;
        v245 = v241 + 1;
        if (*(char *)(v239 + 23) >= 0)
          v246 = (const void *)v239;
        else
          v246 = *(const void **)v239;
        memcpy(v245, v246, v240);
        v5 = &v245[v240];
        goto LABEL_397;
      }
LABEL_399:
      v5 = sub_19C2CF0B4(a4, a2, v239, v5);
LABEL_397:
      ++v233;
      v232 = *(_QWORD *)a1;
      if (v233 >= *(_DWORD *)(*(_QWORD *)a1 + 8))
        return v5;
    }
  }
  if ((a1[10] & 1) != 0)
    return v5;
  v10 = a1[8];
  if ((v10 - 19) <= 0xFFFFFFED)
  {
    sub_19C2CF5C8((uint64_t)v432, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
    v11 = sub_19C2CF5E0(v432, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
    sub_19C2CF710((uint64_t)&v431, (const char **)&v11->__r_.__value_.__l.__data_);
    sub_19C2CF718((uint64_t)v432);
  }
  switch(v10)
  {
    case 1:
      if (*a4 <= (unint64_t)v5)
        v5 = sub_19C2CEBA4((uint64_t)a4, v5);
      v12 = *(_QWORD *)a1;
      v13 = (8 * a2) | 1;
      if (v13 <= 0x7F)
        goto LABEL_575;
      *v5 = (8 * a2) | 0x81;
      v14 = (8 * a2) >> 7;
      if (!(v13 >> 14))
        goto LABEL_602;
      v15 = v5 + 2;
      do
      {
        *((_BYTE *)v15 - 1) = v14 | 0x80;
        v16 = v14 >> 7;
        v15 = (_QWORD *)((char *)v15 + 1);
        v17 = v14 >> 14;
        v14 >>= 7;
      }
      while (v17);
      goto LABEL_693;
    case 2:
      if (*a4 <= (unint64_t)v5)
        v5 = sub_19C2CEBA4((uint64_t)a4, v5);
      v324 = *(_DWORD *)a1;
      v325 = (8 * a2) | 5;
      if (v325 <= 0x7F)
        goto LABEL_571;
      *v5 = (8 * a2) | 0x85;
      v326 = (8 * a2) >> 7;
      if (!(v325 >> 14))
        goto LABEL_600;
      v327 = v5 + 2;
      do
      {
        *((_BYTE *)v327 - 1) = v326 | 0x80;
        v328 = v326 >> 7;
        v327 = (_DWORD *)((char *)v327 + 1);
        v329 = v326 >> 14;
        v326 >>= 7;
      }
      while (v329);
      goto LABEL_689;
    case 3:
      if (*a4 <= (unint64_t)v5)
        v5 = sub_19C2CEBA4((uint64_t)a4, v5);
      v330 = *(_QWORD *)a1;
      v331 = 8 * a2;
      if ((8 * a2) > 0x7F)
      {
        *v5 = v331 | 0x80;
        v355 = v331 >> 7;
        if (v331 >> 14)
        {
          v332 = v5 + 2;
          do
          {
            *(v332 - 1) = v355 | 0x80;
            v380 = v355 >> 7;
            ++v332;
            v381 = v355 >> 14;
            v355 >>= 7;
          }
          while (v381);
          *(v332 - 1) = v380;
        }
        else
        {
          v5[1] = v355;
          v332 = v5 + 2;
        }
      }
      else
      {
        *v5 = v331;
        v332 = v5 + 1;
      }
      if (v330 <= 0x7F)
        goto LABEL_684;
      *v332 = v330 | 0x80;
      v382 = v330 >> 7;
      if (!(v330 >> 14))
        goto LABEL_686;
      v5 = v332 + 2;
      do
      {
        *(v5 - 1) = v382 | 0x80;
        v383 = v382 >> 7;
        ++v5;
        v384 = v382 >> 14;
        v382 >>= 7;
      }
      while (v384);
      goto LABEL_718;
    case 4:
      if (*a4 <= (unint64_t)v5)
        v5 = sub_19C2CEBA4((uint64_t)a4, v5);
      v330 = *(_QWORD *)a1;
      v333 = 8 * a2;
      if ((8 * a2) > 0x7F)
      {
        *v5 = v333 | 0x80;
        v356 = v333 >> 7;
        if (v333 >> 14)
        {
          v332 = v5 + 2;
          do
          {
            *(v332 - 1) = v356 | 0x80;
            v385 = v356 >> 7;
            ++v332;
            v386 = v356 >> 14;
            v356 >>= 7;
          }
          while (v386);
          *(v332 - 1) = v385;
        }
        else
        {
          v5[1] = v356;
          v332 = v5 + 2;
        }
      }
      else
      {
        *v5 = v333;
        v332 = v5 + 1;
      }
      if (v330 <= 0x7F)
        goto LABEL_684;
      *v332 = v330 | 0x80;
      v382 = v330 >> 7;
      if (!(v330 >> 14))
        goto LABEL_686;
      v5 = v332 + 2;
      do
      {
        *(v5 - 1) = v382 | 0x80;
        v383 = v382 >> 7;
        ++v5;
        v387 = v382 >> 14;
        v382 >>= 7;
      }
      while (v387);
      goto LABEL_718;
    case 5:
      if (*a4 <= (unint64_t)v5)
        v5 = sub_19C2CEBA4((uint64_t)a4, v5);
      v330 = *(int *)a1;
      v334 = 8 * a2;
      if ((8 * a2) > 0x7F)
      {
        *v5 = v334 | 0x80;
        v357 = v334 >> 7;
        if (v334 >> 14)
        {
          v332 = v5 + 2;
          do
          {
            *(v332 - 1) = v357 | 0x80;
            v388 = v357 >> 7;
            ++v332;
            v389 = v357 >> 14;
            v357 >>= 7;
          }
          while (v389);
          *(v332 - 1) = v388;
        }
        else
        {
          v5[1] = v357;
          v332 = v5 + 2;
        }
      }
      else
      {
        *v5 = v334;
        v332 = v5 + 1;
      }
      if (v330 <= 0x7F)
        goto LABEL_684;
      *v332 = v330 | 0x80;
      v382 = v330 >> 7;
      if (!(v330 >> 14))
        goto LABEL_686;
      v5 = v332 + 2;
      do
      {
        *(v5 - 1) = v382 | 0x80;
        v383 = v382 >> 7;
        ++v5;
        v390 = v382 >> 14;
        v382 >>= 7;
      }
      while (v390);
      goto LABEL_718;
    case 6:
      if (*a4 <= (unint64_t)v5)
        v5 = sub_19C2CEBA4((uint64_t)a4, v5);
      v12 = *(_QWORD *)a1;
      v13 = (8 * a2) | 1;
      if (v13 <= 0x7F)
        goto LABEL_575;
      *v5 = (8 * a2) | 0x81;
      v14 = (8 * a2) >> 7;
      if (!(v13 >> 14))
        goto LABEL_602;
      v15 = v5 + 2;
      do
      {
        *((_BYTE *)v15 - 1) = v14 | 0x80;
        v16 = v14 >> 7;
        v15 = (_QWORD *)((char *)v15 + 1);
        v335 = v14 >> 14;
        v14 >>= 7;
      }
      while (v335);
      goto LABEL_693;
    case 7:
      if (*a4 <= (unint64_t)v5)
        v5 = sub_19C2CEBA4((uint64_t)a4, v5);
      v324 = *(_DWORD *)a1;
      v325 = (8 * a2) | 5;
      if (v325 <= 0x7F)
        goto LABEL_571;
      *v5 = (8 * a2) | 0x85;
      v326 = (8 * a2) >> 7;
      if (!(v325 >> 14))
        goto LABEL_600;
      v327 = v5 + 2;
      do
      {
        *((_BYTE *)v327 - 1) = v326 | 0x80;
        v328 = v326 >> 7;
        v327 = (_DWORD *)((char *)v327 + 1);
        v336 = v326 >> 14;
        v326 >>= 7;
      }
      while (v336);
      goto LABEL_689;
    case 8:
      if (*a4 <= (unint64_t)v5)
        v5 = sub_19C2CEBA4((uint64_t)a4, v5);
      LOBYTE(v337) = *a1;
      v338 = 8 * a2;
      if ((8 * a2) > 0x7F)
      {
        *v5 = v338 | 0x80;
        v358 = v338 >> 7;
        if (v338 >> 14)
        {
          v332 = v5 + 2;
          do
          {
            *(v332 - 1) = v358 | 0x80;
            v391 = v358 >> 7;
            ++v332;
            v392 = v358 >> 14;
            v358 >>= 7;
          }
          while (v392);
          *(v332 - 1) = v391;
        }
        else
        {
          v5[1] = v358;
          v332 = v5 + 2;
        }
      }
      else
      {
        *v5 = v338;
        v332 = v5 + 1;
      }
      goto LABEL_677;
    case 9:
      if (*a4 <= (unint64_t)v5)
        v5 = sub_19C2CEBA4((uint64_t)a4, v5);
      v339 = *(_QWORD **)a1;
      if (*(char *)(*(_QWORD *)a1 + 23) < 0)
      {
        v340 = v339[1];
        if (v340 > 127)
          return sub_19C2CF0B4(a4, a2, (uint64_t)v339, v5);
      }
      else
      {
        v340 = *(unsigned __int8 *)(*(_QWORD *)a1 + 23);
      }
      v364 = 8 * a2;
      v365 = 1;
      v366 = 2;
      v367 = 3;
      v368 = 4;
      if ((8 * a2) >> 28)
        v368 = 5;
      if (v364 >= 0x200000)
        v367 = v368;
      if (v364 >= 0x4000)
        v366 = v367;
      if (v364 >= 0x80)
        v365 = v366;
      if ((uint64_t)(*a4 + ~(unint64_t)&v5[v365] + 16) < v340)
        return sub_19C2CF0B4(a4, a2, (uint64_t)v339, v5);
      v369 = v364 | 2;
      if ((v364 | 2) <= 0x7F)
        goto LABEL_633;
      *v5 = v364 | 0x82;
      v370 = v364 >> 7;
      if (!(v369 >> 14))
        goto LABEL_635;
      v371 = v5 + 2;
      do
      {
        *(v371 - 1) = v370 | 0x80;
        v372 = v370 >> 7;
        ++v371;
        v373 = v370 >> 14;
        v370 >>= 7;
      }
      while (v373);
      goto LABEL_727;
    case 10:
      if (*a4 <= (unint64_t)v5)
        v5 = sub_19C2CEBA4((uint64_t)a4, v5);
      v341 = *(_QWORD *)a1;
      v342 = 8 * a2;
      v343 = (8 * a2) | 3;
      v344 = (8 * a2) >> 7;
      if (v343 > 0x7F)
      {
        *v5 = (8 * a2) | 0x83;
        if (v343 >> 14)
        {
          v345 = v5 + 2;
          v393 = v342 >> 7;
          do
          {
            *(v345 - 1) = v393 | 0x80;
            v394 = v393 >> 7;
            ++v345;
            v395 = v393 >> 14;
            v393 >>= 7;
          }
          while (v395);
          *(v345 - 1) = v394;
        }
        else
        {
          v5[1] = v344;
          v345 = v5 + 2;
        }
      }
      else
      {
        *v5 = v343;
        v345 = v5 + 1;
      }
      v332 = (char *)(*(uint64_t (**)(uint64_t, char *, uint64_t *))(*(_QWORD *)v341 + 96))(v341, v345, a4);
      if (*a4 <= (unint64_t)v332)
        v332 = sub_19C2CEBA4((uint64_t)a4, v332);
      v337 = v342 | 4;
      if ((v342 | 4) <= 0x7F)
        goto LABEL_677;
      *v332 = v342 | 0x84;
      if (!(v337 >> 14))
      {
        v332[1] = v344;
        return v332 + 2;
      }
      v5 = v332 + 2;
      do
      {
        *(v5 - 1) = v344 | 0x80;
        v411 = v344 >> 7;
        ++v5;
        v412 = v344 >> 14;
        v344 >>= 7;
      }
      while (v412);
      goto LABEL_715;
    case 11:
      if ((a1[10] & 0x10) != 0)
        return (char *)(*(uint64_t (**)(_QWORD, uint64_t, char *, uint64_t *))(**(_QWORD **)a1 + 136))(*(_QWORD *)a1, a2, v5, a4);
      if (*a4 <= (unint64_t)v5)
        v5 = sub_19C2CEBA4((uint64_t)a4, v5);
      v346 = *(_QWORD *)a1;
      v347 = (8 * a2) | 2;
      if (v347 > 0x7F)
      {
        *v5 = (8 * a2) | 0x82;
        v379 = (8 * a2) >> 7;
        if (v347 >> 14)
        {
          v348 = v5 + 2;
          do
          {
            *(v348 - 1) = v379 | 0x80;
            v421 = v379 >> 7;
            ++v348;
            v422 = v379 >> 14;
            v379 >>= 7;
          }
          while (v422);
          *(v348 - 1) = v421;
        }
        else
        {
          v5[1] = v379;
          v348 = v5 + 2;
        }
      }
      else
      {
        *v5 = v347;
        v348 = v5 + 1;
      }
      v423 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v346 + 80))(v346);
      if (v423 > 0x7F)
      {
        *v348 = v423 | 0x80;
        v425 = v423 >> 7;
        if (v423 >> 14)
        {
          v424 = v348 + 2;
          do
          {
            *(v424 - 1) = v425 | 0x80;
            v426 = v425 >> 7;
            ++v424;
            v427 = v425 >> 14;
            v425 >>= 7;
          }
          while (v427);
          *(v424 - 1) = v426;
        }
        else
        {
          v348[1] = v425;
          v424 = v348 + 2;
        }
      }
      else
      {
        *v348 = v423;
        v424 = v348 + 1;
      }
      return (char *)(*(uint64_t (**)(uint64_t, _BYTE *, uint64_t *))(*(_QWORD *)v346 + 96))(v346, v424, a4);
    case 12:
      if (*a4 <= (unint64_t)v5)
        v5 = sub_19C2CEBA4((uint64_t)a4, v5);
      v339 = *(_QWORD **)a1;
      if (*(char *)(*(_QWORD *)a1 + 23) < 0)
      {
        v340 = v339[1];
        if (v340 > 127)
          return sub_19C2CF0B4(a4, a2, (uint64_t)v339, v5);
      }
      else
      {
        v340 = *(unsigned __int8 *)(*(_QWORD *)a1 + 23);
      }
      v374 = 8 * a2;
      v375 = 1;
      v376 = 2;
      v377 = 3;
      v378 = 4;
      if ((8 * a2) >> 28)
        v378 = 5;
      if (v374 >= 0x200000)
        v377 = v378;
      if (v374 >= 0x4000)
        v376 = v377;
      if (v374 >= 0x80)
        v375 = v376;
      if ((uint64_t)(*a4 + ~(unint64_t)&v5[v375] + 16) < v340)
        return sub_19C2CF0B4(a4, a2, (uint64_t)v339, v5);
      v369 = v374 | 2;
      if ((v374 | 2) > 0x7F)
      {
        *v5 = v374 | 0x82;
        v370 = v374 >> 7;
        if (v369 >> 14)
        {
          v371 = v5 + 2;
          do
          {
            *(v371 - 1) = v370 | 0x80;
            v372 = v370 >> 7;
            ++v371;
            v419 = v370 >> 14;
            v370 >>= 7;
          }
          while (v419);
LABEL_727:
          *(v371 - 1) = v372;
        }
        else
        {
LABEL_635:
          v5[1] = v370;
          v371 = v5 + 2;
        }
      }
      else
      {
LABEL_633:
        *v5 = v369;
        v371 = v5 + 1;
      }
      *v371 = v340;
      v420 = v371 + 1;
      if (*((char *)v339 + 23) < 0)
        v339 = (_QWORD *)*v339;
      memcpy(v420, v339, v340);
      return &v420[v340];
    case 13:
      if (*a4 <= (unint64_t)v5)
        v5 = sub_19C2CEBA4((uint64_t)a4, v5);
      v337 = *(_DWORD *)a1;
      v349 = 8 * a2;
      if ((8 * a2) > 0x7F)
      {
        *v5 = v349 | 0x80;
        v360 = v349 >> 7;
        if (v349 >> 14)
        {
          v332 = v5 + 2;
          do
          {
            *(v332 - 1) = v360 | 0x80;
            v396 = v360 >> 7;
            ++v332;
            v397 = v360 >> 14;
            v360 >>= 7;
          }
          while (v397);
          *(v332 - 1) = v396;
        }
        else
        {
          v5[1] = v360;
          v332 = v5 + 2;
        }
      }
      else
      {
        *v5 = v349;
        v332 = v5 + 1;
      }
      if (v337 <= 0x7F)
      {
LABEL_677:
        *v332 = v337;
        return v332 + 1;
      }
      *v332 = v337 | 0x80;
      v398 = v337 >> 7;
      if (!(v337 >> 14))
      {
        v332[1] = v398;
        return v332 + 2;
      }
      v5 = v332 + 2;
      do
      {
        *(v5 - 1) = v398 | 0x80;
        v411 = v398 >> 7;
        ++v5;
        v413 = v398 >> 14;
        v398 >>= 7;
      }
      while (v413);
LABEL_715:
      *(v5 - 1) = v411;
      return v5;
    case 14:
      if (*a4 <= (unint64_t)v5)
        v5 = sub_19C2CEBA4((uint64_t)a4, v5);
      v330 = *(int *)a1;
      v350 = 8 * a2;
      if ((8 * a2) > 0x7F)
      {
        *v5 = v350 | 0x80;
        v361 = v350 >> 7;
        if (v350 >> 14)
        {
          v332 = v5 + 2;
          do
          {
            *(v332 - 1) = v361 | 0x80;
            v399 = v361 >> 7;
            ++v332;
            v400 = v361 >> 14;
            v361 >>= 7;
          }
          while (v400);
          *(v332 - 1) = v399;
        }
        else
        {
          v5[1] = v361;
          v332 = v5 + 2;
        }
      }
      else
      {
        *v5 = v350;
        v332 = v5 + 1;
      }
      if (v330 <= 0x7F)
      {
LABEL_684:
        *v332 = v330;
        return v332 + 1;
      }
      *v332 = v330 | 0x80;
      v382 = v330 >> 7;
      if (!(v330 >> 14))
      {
LABEL_686:
        v332[1] = v382;
        return v332 + 2;
      }
      v5 = v332 + 2;
      do
      {
        *(v5 - 1) = v382 | 0x80;
        v383 = v382 >> 7;
        ++v5;
        v414 = v382 >> 14;
        v382 >>= 7;
      }
      while (v414);
LABEL_718:
      *(v5 - 1) = v383;
      return v5;
    case 15:
      if (*a4 <= (unint64_t)v5)
        v5 = sub_19C2CEBA4((uint64_t)a4, v5);
      v324 = *(_DWORD *)a1;
      v325 = (8 * a2) | 5;
      if (v325 > 0x7F)
      {
        *v5 = (8 * a2) | 0x85;
        v326 = (8 * a2) >> 7;
        if (v325 >> 14)
        {
          v327 = v5 + 2;
          do
          {
            *((_BYTE *)v327 - 1) = v326 | 0x80;
            v328 = v326 >> 7;
            v327 = (_DWORD *)((char *)v327 + 1);
            v401 = v326 >> 14;
            v326 >>= 7;
          }
          while (v401);
LABEL_689:
          *((_BYTE *)v327 - 1) = v328;
        }
        else
        {
LABEL_600:
          v5[1] = v326;
          v327 = v5 + 2;
        }
      }
      else
      {
LABEL_571:
        *v5 = v325;
        v327 = v5 + 1;
      }
      *v327 = v324;
      return (char *)(v327 + 1);
    case 16:
      if (*a4 <= (unint64_t)v5)
        v5 = sub_19C2CEBA4((uint64_t)a4, v5);
      v12 = *(_QWORD *)a1;
      v13 = (8 * a2) | 1;
      if (v13 > 0x7F)
      {
        *v5 = (8 * a2) | 0x81;
        v14 = (8 * a2) >> 7;
        if (v13 >> 14)
        {
          v15 = v5 + 2;
          do
          {
            *((_BYTE *)v15 - 1) = v14 | 0x80;
            v16 = v14 >> 7;
            v15 = (_QWORD *)((char *)v15 + 1);
            v402 = v14 >> 14;
            v14 >>= 7;
          }
          while (v402);
LABEL_693:
          *((_BYTE *)v15 - 1) = v16;
        }
        else
        {
LABEL_602:
          v5[1] = v14;
          v15 = v5 + 2;
        }
      }
      else
      {
LABEL_575:
        *v5 = v13;
        v15 = v5 + 1;
      }
      *v15 = v12;
      return (char *)(v15 + 1);
    case 17:
      if (*a4 <= (unint64_t)v5)
        v5 = sub_19C2CEBA4((uint64_t)a4, v5);
      v351 = *(_DWORD *)a1;
      v352 = 8 * a2;
      if ((8 * a2) > 0x7F)
      {
        *v5 = v352 | 0x80;
        v362 = v352 >> 7;
        if (v352 >> 14)
        {
          v332 = v5 + 2;
          do
          {
            *(v332 - 1) = v362 | 0x80;
            v403 = v362 >> 7;
            ++v332;
            v404 = v362 >> 14;
            v362 >>= 7;
          }
          while (v404);
          *(v332 - 1) = v403;
        }
        else
        {
          v5[1] = v362;
          v332 = v5 + 2;
        }
      }
      else
      {
        *v5 = v352;
        v332 = v5 + 1;
      }
      v405 = (2 * v351) ^ (v351 >> 31);
      if (v405 <= 0x7F)
      {
        *v332 = v405;
        return v332 + 1;
      }
      *v332 = v405 | 0x80;
      v406 = v405 >> 7;
      if (!(v405 >> 14))
      {
        v332[1] = v406;
        return v332 + 2;
      }
      v5 = v332 + 2;
      do
      {
        *(v5 - 1) = v406 | 0x80;
        v415 = v406 >> 7;
        ++v5;
        v416 = v406 >> 14;
        v406 >>= 7;
      }
      while (v416);
      *(v5 - 1) = v415;
      return v5;
    case 18:
      if (*a4 <= (unint64_t)v5)
        v5 = sub_19C2CEBA4((uint64_t)a4, v5);
      v353 = *(_QWORD *)a1;
      v354 = 8 * a2;
      if ((8 * a2) > 0x7F)
      {
        *v5 = v354 | 0x80;
        v363 = v354 >> 7;
        if (v354 >> 14)
        {
          v332 = v5 + 2;
          do
          {
            *(v332 - 1) = v363 | 0x80;
            v407 = v363 >> 7;
            ++v332;
            v408 = v363 >> 14;
            v363 >>= 7;
          }
          while (v408);
          *(v332 - 1) = v407;
        }
        else
        {
          v5[1] = v363;
          v332 = v5 + 2;
        }
      }
      else
      {
        *v5 = v354;
        v332 = v5 + 1;
      }
      v409 = (2 * v353) ^ (v353 >> 63);
      if (v409 > 0x7F)
      {
        *v332 = v409 | 0x80;
        v410 = v409 >> 7;
        if (v409 >> 14)
        {
          v5 = v332 + 2;
          do
          {
            *(v5 - 1) = v410 | 0x80;
            v417 = v410 >> 7;
            ++v5;
            v418 = v410 >> 14;
            v410 >>= 7;
          }
          while (v418);
          *(v5 - 1) = v417;
        }
        else
        {
          v332[1] = v410;
          return v332 + 2;
        }
      }
      else
      {
        *v332 = v409;
        return v332 + 1;
      }
      return v5;
    default:
      return v5;
  }
}

void sub_19C2D8368(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19C2D8398(uint64_t a1)
{
  int *v1;
  uint64_t v2;
  int *v3;
  _QWORD *v4;
  int v5;
  int *v6;
  int *v7;
  int *v8;
  unint64_t v9;
  int *v10;
  int *v11;
  BOOL v12;

  v1 = *(int **)(a1 + 16);
  if (*(unsigned __int16 *)(a1 + 8) < 0x101u)
  {
    if (*(_WORD *)(a1 + 10))
    {
      v2 = 0;
      v3 = &v1[8 * *(unsigned __int16 *)(a1 + 10)];
      do
      {
        v4 = v1 + 2;
        v5 = *v1;
        v1 += 8;
        v2 += sub_19C2D8458(v4, v5);
      }
      while (v1 != v3);
      return v2;
    }
    return 0;
  }
  v8 = *(int **)v1;
  v6 = v1 + 2;
  v7 = v8;
  if (v8 == v6)
    return 0;
  v2 = 0;
  do
  {
    v9 = sub_19C2D8458((_QWORD *)v7 + 5, v7[8]);
    v10 = (int *)*((_QWORD *)v7 + 1);
    if (v10)
    {
      do
      {
        v11 = v10;
        v10 = *(int **)v10;
      }
      while (v10);
    }
    else
    {
      do
      {
        v11 = (int *)*((_QWORD *)v7 + 2);
        v12 = *(_QWORD *)v11 == (_QWORD)v7;
        v7 = v11;
      }
      while (!v12);
    }
    v2 += v9;
    v7 = v11;
  }
  while (v11 != v6);
  return v2;
}

unint64_t sub_19C2D8458(_QWORD *a1, int a2)
{
  int v4;
  unsigned __int8 v5;
  std::string *v6;
  std::string *v7;
  unint64_t v8;
  int v9;
  unsigned __int8 v10;
  std::string *v11;
  int v12;
  std::string *v13;
  int v14;
  char v15;
  std::string *v16;
  unint64_t v17;
  unsigned int v18;
  char v19;
  std::string *v20;
  uint64_t v21;
  int *v22;
  int v23;
  int *v24;
  int v25;
  int *v26;
  int *v27;
  int v28;
  int *v29;
  int v30;
  int *v31;
  int v32;
  int *v33;
  uint64_t v34;
  uint64_t v35;
  int *v36;
  int v37;
  int *v38;
  uint64_t v39;
  uint64_t v40;
  int *v41;
  int v42;
  uint64_t *v43;
  unint64_t v44;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int *v50;
  int v51;
  int v52;
  int *v53;
  int v54;
  int v55;
  int *v56;
  int v57;
  int v58;
  int *v59;
  uint64_t v60;
  uint64_t v61;
  int *v62;
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  int *v67;
  int v68;
  int v69;
  uint64_t v70;
  int *v71;
  int v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  int *v76;
  int v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  int *v81;
  int v82;
  int v83;
  int *v84;
  int v85;
  int v86;
  int *v87;
  uint64_t v88;
  uint64_t v89;
  int *v90;
  int v91;
  int v92;
  int *v93;
  int *v94;
  int v95;
  int v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t (*v99)(void);
  int v100;
  uint64_t v101;
  char v102;
  std::string v103[2];

  if (*((_BYTE *)a1 + 9))
  {
    v4 = *((unsigned __int8 *)a1 + 8);
    v5 = v4 - 19;
    if (*((_BYTE *)a1 + 11))
    {
      if ((v4 - 19) <= 0xEDu)
      {
        sub_19C2CF5C8((uint64_t)v103, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
        v6 = sub_19C2CF5E0(v103, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
        sub_19C2CF710((uint64_t)&v102, (const char **)&v6->__r_.__value_.__l.__data_);
        sub_19C2CF718((uint64_t)v103);
      }
      switch(v4)
      {
        case 1:
        case 6:
        case 16:
          v21 = 8 * *(unsigned int *)*a1;
          goto LABEL_63;
        case 2:
        case 7:
        case 15:
          v21 = 4 * *(unsigned int *)*a1;
          goto LABEL_63;
        case 3:
          v27 = (int *)*a1;
          if (*(int *)*a1 < 1)
            goto LABEL_7;
          v21 = 0;
          v28 = 0;
          do
          {
            v21 += (9 * (__clz(*(_QWORD *)sub_19C2DF6E4(v27, v28++) | 1) ^ 0x3F) + 73) >> 6;
            v27 = (int *)*a1;
          }
          while (v28 < *(_DWORD *)*a1);
          goto LABEL_63;
        case 4:
          v29 = (int *)*a1;
          if (*(int *)*a1 < 1)
            goto LABEL_7;
          v21 = 0;
          v30 = 0;
          do
          {
            v21 += (9 * (__clz(*(_QWORD *)sub_19C2DFD0C(v29, v30++) | 1) ^ 0x3F) + 73) >> 6;
            v29 = (int *)*a1;
          }
          while (v30 < *(_DWORD *)*a1);
          goto LABEL_63;
        case 5:
          v31 = (int *)*a1;
          if (*(int *)*a1 < 1)
            goto LABEL_7;
          v21 = 0;
          v32 = 0;
          do
          {
            v33 = (int *)sub_19C2DEA94(v31, v32);
            v34 = (9 * (__clz(*v33 | 1) ^ 0x1F) + 73) >> 6;
            if (*v33 >= 0)
              v35 = v34;
            else
              v35 = 10;
            v21 += v35;
            ++v32;
            v31 = (int *)*a1;
          }
          while (v32 < *(_DWORD *)*a1);
          goto LABEL_63;
        case 8:
          v21 = *(unsigned int *)*a1;
          goto LABEL_63;
        case 9:
        case 10:
        case 11:
        case 12:
          sub_19C2CF5C8((uint64_t)v103, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 1599);
          v7 = sub_19C2CF5E0(v103, "Non-primitive types can't be packed.");
          sub_19C2CF710((uint64_t)&v102, (const char **)&v7->__r_.__value_.__l.__data_);
          sub_19C2CF718((uint64_t)v103);
          goto LABEL_7;
        case 13:
          v22 = (int *)*a1;
          if (*(int *)*a1 < 1)
            goto LABEL_7;
          v21 = 0;
          v23 = 0;
          do
          {
            v21 += (9 * (__clz(*(_DWORD *)sub_19C2DF0BC(v22, v23++) | 1) ^ 0x1F) + 73) >> 6;
            v22 = (int *)*a1;
          }
          while (v23 < *(_DWORD *)*a1);
          goto LABEL_63;
        case 14:
          v36 = (int *)*a1;
          if (*(int *)*a1 < 1)
            goto LABEL_7;
          v21 = 0;
          v37 = 0;
          do
          {
            v38 = (int *)sub_19C2DEA94(v36, v37);
            v39 = (9 * (__clz(*v38 | 1) ^ 0x1F) + 73) >> 6;
            if (*v38 >= 0)
              v40 = v39;
            else
              v40 = 10;
            v21 += v40;
            ++v37;
            v36 = (int *)*a1;
          }
          while (v37 < *(_DWORD *)*a1);
          goto LABEL_63;
        case 17:
          v24 = (int *)*a1;
          if (*(int *)*a1 < 1)
            goto LABEL_7;
          v21 = 0;
          v25 = 0;
          do
          {
            v26 = (int *)sub_19C2DEA94(v24, v25);
            v21 += (9 * (__clz((2 * *v26) ^ (*v26 >> 31) | 1) ^ 0x1F) + 73) >> 6;
            ++v25;
            v24 = (int *)*a1;
          }
          while (v25 < *(_DWORD *)*a1);
          goto LABEL_63;
        case 18:
          v41 = (int *)*a1;
          if (*(int *)*a1 < 1)
            goto LABEL_7;
          v21 = 0;
          v42 = 0;
          do
          {
            v43 = (uint64_t *)sub_19C2DF6E4(v41, v42);
            v21 += (9 * (__clz((2 * *v43) ^ (*v43 >> 63) | 1) ^ 0x3F) + 73) >> 6;
            ++v42;
            v41 = (int *)*a1;
          }
          while (v42 < *(_DWORD *)*a1);
LABEL_63:
          *((_DWORD *)a1 + 3) = v21;
          v44 = v21 + ((9 * (__clz((8 * a2) | 3) ^ 0x1F) + 73) >> 6) + ((9 * (__clz(v21 | 1) ^ 0x1F) + 73) >> 6);
          if (v21)
            v8 = v44;
          else
            v8 = 0;
          break;
        default:
LABEL_7:
          v8 = 0;
          *((_DWORD *)a1 + 3) = 0;
          break;
      }
    }
    else
    {
      if ((v4 - 19) > 0xEDu)
      {
        v14 = *((unsigned __int8 *)a1 + 8);
      }
      else
      {
        sub_19C2CF5C8((uint64_t)v103, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
        v13 = sub_19C2CF5E0(v103, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
        sub_19C2CF710((uint64_t)&v102, (const char **)&v13->__r_.__value_.__l.__data_);
        sub_19C2CF718((uint64_t)v103);
        v14 = *((unsigned __int8 *)a1 + 8);
        v5 = v14 - 19;
      }
      v15 = v4 == 10;
      if (v5 <= 0xEDu)
      {
        sub_19C2CF5C8((uint64_t)v103, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
        v16 = sub_19C2CF5E0(v103, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
        sub_19C2CF710((uint64_t)&v102, (const char **)&v16->__r_.__value_.__l.__data_);
        sub_19C2CF718((uint64_t)v103);
      }
      v17 = (unint64_t)((9 * (__clz((8 * a2) | 1) ^ 0x1F) + 73) >> 6) << v15;
      switch(v14)
      {
        case 1:
        case 6:
        case 16:
          v18 = v17 + 8;
          goto LABEL_27;
        case 2:
        case 7:
        case 15:
          v18 = v17 + 4;
LABEL_27:
          v8 = v18 * (unint64_t)*(unsigned int *)*a1;
          break;
        case 3:
          v50 = (int *)*a1;
          v51 = *(_DWORD *)*a1;
          v8 = v17 * (unint64_t)v51;
          if (v51 >= 1)
          {
            v52 = 0;
            do
            {
              v8 += (9 * (__clz(*(_QWORD *)sub_19C2DF6E4(v50, v52++) | 1) ^ 0x3F) + 73) >> 6;
              v50 = (int *)*a1;
            }
            while (v52 < *(_DWORD *)*a1);
          }
          break;
        case 4:
          v53 = (int *)*a1;
          v54 = *(_DWORD *)*a1;
          v8 = v17 * (unint64_t)v54;
          if (v54 >= 1)
          {
            v55 = 0;
            do
            {
              v8 += (9 * (__clz(*(_QWORD *)sub_19C2DFD0C(v53, v55++) | 1) ^ 0x3F) + 73) >> 6;
              v53 = (int *)*a1;
            }
            while (v55 < *(_DWORD *)*a1);
          }
          break;
        case 5:
          v56 = (int *)*a1;
          v57 = *(_DWORD *)*a1;
          v8 = v17 * (unint64_t)v57;
          if (v57 >= 1)
          {
            v58 = 0;
            do
            {
              v59 = (int *)sub_19C2DEA94(v56, v58);
              v60 = (9 * (__clz(*v59 | 1) ^ 0x1F) + 73) >> 6;
              if (*v59 >= 0)
                v61 = v60;
              else
                v61 = 10;
              v8 += v61;
              ++v58;
              v56 = (int *)*a1;
            }
            while (v58 < *(_DWORD *)*a1);
          }
          break;
        case 8:
          v8 = *(unsigned int *)*a1 + *(unsigned int *)*a1 * (unint64_t)v17;
          break;
        case 9:
          v62 = (int *)*a1;
          v63 = *(_DWORD *)(*a1 + 8);
          v8 = v17 * (unint64_t)v63;
          if (v63 >= 1)
          {
            v64 = 0;
            do
            {
              v65 = sub_19C2CA2E4((uint64_t)v62, v64);
              v66 = *(unsigned __int8 *)(v65 + 23);
              if ((v66 & 0x80u) != 0)
                v66 = *(_QWORD *)(v65 + 8);
              v8 += v66 + ((9 * (__clz(v66 | 1) ^ 0x1F) + 73) >> 6);
              ++v64;
              v62 = (int *)*a1;
            }
            while (v64 < *(_DWORD *)(*a1 + 8));
          }
          break;
        case 10:
          v67 = (int *)*a1;
          v68 = *(_DWORD *)(*a1 + 8);
          v8 = v17 * (unint64_t)v68;
          if (v68 >= 1)
          {
            v69 = 0;
            do
            {
              v70 = sub_19C2D92E8((uint64_t)v67, v69);
              v8 += (*(uint64_t (**)(uint64_t))(*(_QWORD *)v70 + 72))(v70);
              ++v69;
              v67 = (int *)*a1;
            }
            while (v69 < *(_DWORD *)(*a1 + 8));
          }
          break;
        case 11:
          v71 = (int *)*a1;
          v72 = *(_DWORD *)(*a1 + 8);
          v8 = v17 * (unint64_t)v72;
          if (v72 >= 1)
          {
            v73 = 0;
            do
            {
              v74 = sub_19C2D92E8((uint64_t)v71, v73);
              v75 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v74 + 72))(v74);
              v8 += v75 + ((9 * (__clz(v75 | 1) ^ 0x1F) + 73) >> 6);
              ++v73;
              v71 = (int *)*a1;
            }
            while (v73 < *(_DWORD *)(*a1 + 8));
          }
          break;
        case 12:
          v76 = (int *)*a1;
          v77 = *(_DWORD *)(*a1 + 8);
          v8 = v17 * (unint64_t)v77;
          if (v77 >= 1)
          {
            v78 = 0;
            do
            {
              v79 = sub_19C2CA2E4((uint64_t)v76, v78);
              v80 = *(unsigned __int8 *)(v79 + 23);
              if ((v80 & 0x80u) != 0)
                v80 = *(_QWORD *)(v79 + 8);
              v8 += v80 + ((9 * (__clz(v80 | 1) ^ 0x1F) + 73) >> 6);
              ++v78;
              v76 = (int *)*a1;
            }
            while (v78 < *(_DWORD *)(*a1 + 8));
          }
          break;
        case 13:
          v81 = (int *)*a1;
          v82 = *(_DWORD *)*a1;
          v8 = v17 * (unint64_t)v82;
          if (v82 >= 1)
          {
            v83 = 0;
            do
            {
              v8 += (9 * (__clz(*(_DWORD *)sub_19C2DF0BC(v81, v83++) | 1) ^ 0x1F) + 73) >> 6;
              v81 = (int *)*a1;
            }
            while (v83 < *(_DWORD *)*a1);
          }
          break;
        case 14:
          v84 = (int *)*a1;
          v85 = *(_DWORD *)*a1;
          v8 = v17 * (unint64_t)v85;
          if (v85 >= 1)
          {
            v86 = 0;
            do
            {
              v87 = (int *)sub_19C2DEA94(v84, v86);
              v88 = (9 * (__clz(*v87 | 1) ^ 0x1F) + 73) >> 6;
              if (*v87 >= 0)
                v89 = v88;
              else
                v89 = 10;
              v8 += v89;
              ++v86;
              v84 = (int *)*a1;
            }
            while (v86 < *(_DWORD *)*a1);
          }
          break;
        case 17:
          v90 = (int *)*a1;
          v91 = *(_DWORD *)*a1;
          v8 = v17 * (unint64_t)v91;
          if (v91 >= 1)
          {
            v92 = 0;
            do
            {
              v93 = (int *)sub_19C2DEA94(v90, v92);
              v8 += (9 * (__clz((2 * *v93) ^ (*v93 >> 31) | 1) ^ 0x1F) + 73) >> 6;
              ++v92;
              v90 = (int *)*a1;
            }
            while (v92 < *(_DWORD *)*a1);
          }
          break;
        case 18:
          v94 = (int *)*a1;
          v95 = *(_DWORD *)*a1;
          v8 = v17 * (unint64_t)v95;
          if (v95 >= 1)
          {
            v96 = 0;
            do
            {
              v97 = (uint64_t *)sub_19C2DF6E4(v94, v96);
              v8 += (9 * (__clz((2 * *v97) ^ (*v97 >> 63) | 1) ^ 0x3F) + 73) >> 6;
              ++v96;
              v94 = (int *)*a1;
            }
            while (v96 < *(_DWORD *)*a1);
          }
          break;
        default:
          return 0;
      }
    }
  }
  else if ((*((_BYTE *)a1 + 10) & 1) != 0)
  {
    return 0;
  }
  else
  {
    v9 = *((unsigned __int8 *)a1 + 8);
    v10 = v9 - 19;
    if ((v9 - 19) > 0xEDu)
    {
      v12 = *((unsigned __int8 *)a1 + 8);
    }
    else
    {
      sub_19C2CF5C8((uint64_t)v103, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v11 = sub_19C2CF5E0(v103, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_19C2CF710((uint64_t)&v102, (const char **)&v11->__r_.__value_.__l.__data_);
      sub_19C2CF718((uint64_t)v103);
      v12 = *((unsigned __int8 *)a1 + 8);
      v10 = v12 - 19;
    }
    v19 = v9 == 10;
    if (v10 <= 0xEDu)
    {
      sub_19C2CF5C8((uint64_t)v103, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v20 = sub_19C2CF5E0(v103, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_19C2CF710((uint64_t)&v102, (const char **)&v20->__r_.__value_.__l.__data_);
      sub_19C2CF718((uint64_t)v103);
    }
    v8 = (unint64_t)((9 * (__clz((8 * a2) | 1) ^ 0x1F) + 73) >> 6) << v19;
    switch(v12)
    {
      case 1:
      case 6:
      case 16:
        v8 += 8;
        return v8;
      case 2:
      case 7:
      case 15:
        v8 += 4;
        return v8;
      case 3:
      case 4:
        v46 = *a1;
        goto LABEL_138;
      case 5:
      case 14:
        v47 = (9 * (__clz(*(_DWORD *)a1 | 1) ^ 0x1F) + 73) >> 6;
        if (*(int *)a1 >= 0)
          v48 = v47;
        else
          v48 = 10;
        v8 += v48;
        return v8;
      case 8:
        return ++v8;
      case 9:
      case 12:
        v49 = *(_QWORD *)(*a1 + 8);
        if (*(char *)(*a1 + 23) >= 0)
          v49 = *(unsigned __int8 *)(*a1 + 23);
        v8 += v49 + ((9 * (__clz(v49 | 1) ^ 0x1F) + 73) >> 6);
        return v8;
      case 10:
        v8 += (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 72))(*a1);
        return v8;
      case 11:
        v98 = *(_QWORD *)*a1;
        if ((*((_BYTE *)a1 + 10) & 0x10) != 0)
          v99 = *(uint64_t (**)(void))(v98 + 88);
        else
          v99 = *(uint64_t (**)(void))(v98 + 72);
        v101 = v99();
        v8 += v101 + ((9 * (__clz(v101 | 1) ^ 0x1F) + 73) >> 6);
        return v8;
      case 13:
        v100 = *(_DWORD *)a1;
        goto LABEL_136;
      case 17:
        v100 = (2 * *(_DWORD *)a1) ^ (*(int *)a1 >> 31);
LABEL_136:
        v8 += (9 * (__clz(v100 | 1) ^ 0x1F) + 73) >> 6;
        break;
      case 18:
        v46 = (2 * *a1) ^ ((uint64_t)*a1 >> 63);
LABEL_138:
        v8 += (9 * (__clz(v46 | 1) ^ 0x3F) + 73) >> 6;
        break;
      default:
        return v8;
    }
  }
  return v8;
}

void sub_19C2D8FBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_19C2D8FFC(unsigned __int8 *result)
{
  unsigned __int8 **v1;
  uint64_t v2;
  std::string *v3;
  uint64_t *v4;
  std::string *v5;
  int v6;
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t *v9;
  char v10;
  std::string v11[2];

  v1 = (unsigned __int8 **)result;
  v2 = result[8];
  if (result[9])
  {
    if ((v2 - 19) <= 0xFFFFFFED)
    {
      sub_19C2CF5C8((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v3 = sub_19C2CF5E0(v11, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_19C2CF710((uint64_t)&v10, (const char **)&v3->__r_.__value_.__l.__data_);
      result = (unsigned __int8 *)sub_19C2CF718((uint64_t)v11);
    }
    switch(v2)
    {
      case 1:
        result = *v1;
        if (*v1)
        {
          v4 = (uint64_t *)sub_19C2E0A7C();
          goto LABEL_29;
        }
        break;
      case 2:
        result = *v1;
        if (*v1)
        {
          v4 = (uint64_t *)sub_19C2E0454();
          goto LABEL_29;
        }
        break;
      case 3:
      case 16:
      case 18:
        result = *v1;
        if (*v1)
        {
          v4 = (uint64_t *)sub_19C2DF804();
          goto LABEL_29;
        }
        break;
      case 4:
      case 6:
        result = *v1;
        if (*v1)
        {
          v4 = (uint64_t *)sub_19C2DFE2C();
          goto LABEL_29;
        }
        break;
      case 5:
      case 14:
      case 15:
      case 17:
        result = *v1;
        if (*v1)
        {
          v4 = (uint64_t *)sub_19C2DEBB4();
          goto LABEL_29;
        }
        break;
      case 7:
      case 13:
        result = *v1;
        if (*v1)
        {
          v4 = (uint64_t *)sub_19C2DF1DC();
          goto LABEL_29;
        }
        break;
      case 8:
        result = *v1;
        if (*v1)
        {
          v4 = (uint64_t *)sub_19C2DE590();
LABEL_29:
          v8 = 0x1080C4057E67DB5;
          return (unsigned __int8 *)MEMORY[0x1A1AD355C](v4, v8);
        }
        break;
      case 9:
      case 12:
        result = *v1;
        if (*v1)
        {
          v4 = (uint64_t *)sub_19C2E0CE8();
          goto LABEL_34;
        }
        break;
      case 10:
      case 11:
        v9 = (uint64_t *)*v1;
        if (v9)
        {
          sub_19C2D9A98(v9);
          v4 = sub_19C2C1640(v9);
LABEL_34:
          v8 = 0x1020C4014030ADELL;
          return (unsigned __int8 *)MEMORY[0x1A1AD355C](v4, v8);
        }
        break;
      default:
        return result;
    }
  }
  else
  {
    if ((v2 - 19) <= 0xFFFFFFED)
    {
      sub_19C2CF5C8((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v5 = sub_19C2CF5E0(v11, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_19C2CF710((uint64_t)&v10, (const char **)&v5->__r_.__value_.__l.__data_);
      result = (unsigned __int8 *)sub_19C2CF718((uint64_t)v11);
    }
    v6 = dword_19C46DB58[v2];
    if (v6 == 10)
    {
      result = *v1;
      if (*v1)
        return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)result + 8))(result);
    }
    else if (v6 == 9)
    {
      v7 = *v1;
      if (v7)
      {
        if ((char)v7[23] < 0)
          operator delete(*(void **)v7);
        v4 = (uint64_t *)v7;
        v8 = 0x1012C40EC159624;
        return (unsigned __int8 *)MEMORY[0x1A1AD355C](v4, v8);
      }
    }
  }
  return result;
}

void sub_19C2D9208(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19C2D9228()
{
  JUMPOUT(0x1A1AD355CLL);
}

unsigned __int8 *sub_19C2D923C(unsigned __int8 *result, unsigned __int8 *a2)
{
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  BOOL v6;

  if (result != a2)
  {
    v3 = result;
    do
    {
      result = sub_19C2D8FFC(v3 + 40);
      v4 = (unsigned __int8 *)*((_QWORD *)v3 + 1);
      if (v4)
      {
        do
        {
          v5 = v4;
          v4 = *(unsigned __int8 **)v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          v5 = (unsigned __int8 *)*((_QWORD *)v3 + 2);
          v6 = *(_QWORD *)v5 == (_QWORD)v3;
          v3 = v5;
        }
        while (!v6);
      }
      v3 = v5;
    }
    while (v5 != a2);
  }
  return result;
}

uint64_t *sub_19C2D92C4(uint64_t *a1)
{
  sub_19C2D9A98(a1);
  return sub_19C2C1640(a1);
}

uint64_t sub_19C2D92E8(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    sub_19C2CF5C8((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1705);
    v4 = sub_19C2CF5E0(v8, "CHECK failed: (index) >= (0): ");
    sub_19C2CF710((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_19C2CF718((uint64_t)v8);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    sub_19C2CF5C8((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1706);
    v5 = sub_19C2CF5E0(v8, "CHECK failed: (index) < (current_size_): ");
    sub_19C2CF710((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_19C2CF718((uint64_t)v8);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
}

void sub_19C2D93A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19C2D93C4(uint64_t result, uint64_t a2)
{
  int *v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;

  v2 = *(int **)(result + 16);
  if (!v2)
    return sub_19C2D9418(result, a2);
  v3 = *v2;
  if ((int)v3 >= *(_DWORD *)(result + 12))
    return sub_19C2D9418(result, a2);
  v4 = v2 + 2;
  v5 = *(int *)(result + 8);
  if ((int)v5 < (int)v3)
    *(_QWORD *)&v4[2 * v3] = *(_QWORD *)&v4[2 * v5];
  *(_QWORD *)&v4[2 * v5] = a2;
  *(_DWORD *)(result + 8) = v5 + 1;
  ++**(_DWORD **)(result + 16);
  return result;
}

uint64_t sub_19C2D9418(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int *v4;
  int v5;
  int v6;
  uint64_t v7;
  BOOL v8;
  int v9;
  uint64_t v10;

  v3 = result;
  v4 = *(int **)(result + 16);
  if (!v4)
  {
    v5 = *(_DWORD *)(result + 12);
    goto LABEL_11;
  }
  v5 = *(_DWORD *)(result + 8);
  v6 = *(_DWORD *)(result + 12);
  if (v5 == v6)
  {
LABEL_11:
    result = sub_19C2E0CEC(result, v5 + 1);
    goto LABEL_12;
  }
  v7 = *v4;
  if ((_DWORD)v7 != v6)
  {
    if (v5 >= (int)v7)
    {
      v9 = v7 + 1;
      goto LABEL_13;
    }
    *(_QWORD *)&v4[2 * v7 + 2] = *(_QWORD *)&v4[2 * v5 + 2];
LABEL_12:
    v4 = *(int **)(v3 + 16);
    v9 = *v4 + 1;
LABEL_13:
    *v4 = v9;
    goto LABEL_14;
  }
  result = *(_QWORD *)&v4[2 * v5 + 2];
  if (result)
    v8 = *(_QWORD *)v3 == 0;
  else
    v8 = 0;
  if (v8)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    v4 = *(int **)(v3 + 16);
  }
LABEL_14:
  v10 = *(int *)(v3 + 8);
  *(_DWORD *)(v3 + 8) = v10 + 1;
  *(_QWORD *)&v4[2 * v10 + 2] = a2;
  return result;
}

uint64_t *sub_19C2D94DC(_QWORD *a1, _QWORD *a2, uint64_t *a3)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      sub_19C2D3ADC(a3, *((unsigned int *)v5 + 8), v5 + 5);
      v6 = (_QWORD *)v5[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v5[2];
          v8 = *v7 == (_QWORD)v5;
          v5 = v7;
        }
        while (!v8);
      }
      v5 = v7;
    }
    while (v7 != a2);
  }
  return a3;
}

const std::string::value_type *sub_19C2D955C(uint64_t a1, std::string::value_type *__s, int a3, std::string *a4)
{
  uint64_t v6;

  if (*(_QWORD *)(a1 + 8) - (_QWORD)__s + 16 < a3)
    return sub_19C2DB6E0(a1, __s, a3, a4);
  v6 = a3;
  MEMORY[0x1A1AD31B4](a4, __s, a3);
  return &__s[v6];
}

char *sub_19C2D95B4(uint64_t a1, char *a2, uint64_t a3)
{
  int v5;
  char *result;
  int v7;
  unint64_t v8;
  int v9;
  __int128 v10;
  signed int v11;
  std::string *v12;
  int v13;
  std::string *v14;
  unint64_t v15;
  __int128 v16;
  __int128 v17;
  std::string *v18;
  _OWORD v19[2];
  uint64_t v20;
  _OWORD v21[2];
  uint64_t v22;
  char v23;
  _OWORD v24[2];
  uint64_t v25;
  std::string v26;
  __int16 v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v5 = *a2;
  if (*a2 < 0)
  {
    result = (char *)sub_19C2DBC24((uint64_t)a2, *a2);
    if (!result)
      return result;
    v5 = v7;
  }
  else
  {
    result = a2 + 1;
  }
  v8 = *(_QWORD *)(a1 + 8);
  v9 = v8 - (_DWORD)result;
  if (v5 <= (int)v8 - (int)result)
  {
LABEL_15:
    v15 = (unint64_t)&result[v5];
    v16 = *(_OWORD *)(a3 + 16);
    v19[0] = *(_OWORD *)a3;
    v19[1] = v16;
    v20 = *(_QWORD *)(a3 + 32);
    result = sub_19C2D980C(result, v15, (unsigned int **)v19);
    if ((char *)v15 != result)
      return 0;
  }
  else
  {
    while (1)
    {
      v10 = *(_OWORD *)(a3 + 16);
      v24[0] = *(_OWORD *)a3;
      v24[1] = v10;
      v25 = *(_QWORD *)(a3 + 32);
      result = sub_19C2D980C(result, v8, (unsigned int **)v24);
      if (!result)
        break;
      v11 = (_DWORD)result - *(_QWORD *)(a1 + 8);
      if (v11 >= 0x11)
      {
        sub_19C2CF5C8((uint64_t)&v26, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 674);
        v12 = sub_19C2CF5E0(&v26, "CHECK failed: overrun >= 0 && overrun <= kSlopBytes: ");
        sub_19C2CF710((uint64_t)&v23, (const char **)&v12->__r_.__value_.__l.__data_);
        sub_19C2CF718((uint64_t)&v26);
      }
      v13 = v5 - v9;
      if (v5 - v9 <= 16)
      {
        v27 = 0;
        v26.__r_.__value_.__r.__words[2] = 0;
        *(_OWORD *)&v26.__r_.__value_.__l.__data_ = *(_OWORD *)*(_QWORD *)(a1 + 8);
        v22 = *(_QWORD *)(a3 + 32);
        v17 = *(_OWORD *)(a3 + 16);
        v21[0] = *(_OWORD *)a3;
        v21[1] = v17;
        v18 = (std::string *)sub_19C2D980C((char *)&v26 + v11, (unint64_t)&v26 + v13, (unsigned int **)v21);
        result = 0;
        if (v18 && v18 == (std::string *)((char *)&v26 + v13))
          return (char *)(*(_QWORD *)(a1 + 8) + v13);
        return result;
      }
      v5 = v5 - v9 - v11;
      if (v5 <= 0)
      {
        sub_19C2CF5C8((uint64_t)&v26, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 688);
        v14 = sub_19C2CF5E0(&v26, "CHECK failed: (size) > (0): ");
        sub_19C2CF710((uint64_t)&v23, (const char **)&v14->__r_.__value_.__l.__data_);
        sub_19C2CF718((uint64_t)&v26);
      }
      if (*(int *)(a1 + 28) < 17)
        return 0;
      result = (char *)sub_19C2DAE6C(a1);
      if (!result)
        return result;
      result += v11;
      v8 = *(_QWORD *)(a1 + 8);
      v9 = v8 - (_DWORD)result;
      if (v5 <= (int)v8 - (int)result)
        goto LABEL_15;
    }
  }
  return result;
}

void sub_19C2D97E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_19C2CF718((uint64_t)&a27);
  _Unwind_Resume(a1);
}

char *sub_19C2D980C(char *a1, unint64_t a2, unsigned int **a3)
{
  char *v3;
  unint64_t v6;
  int v7;
  unint64_t v8;
  int *v9;
  uint64_t v10;
  int v11;
  int v12;
  unint64_t *v13;
  std::string *v14;

  v3 = a1;
  while ((unint64_t)v3 < a2)
  {
    v6 = *v3;
    if (*v3 < 0)
    {
      v7 = v6 + (v3[1] << 7);
      v6 = (v7 - 128);
      if (v3[1] < 0)
      {
        v3 = (char *)sub_19C2DBB98((uint64_t)v3, (v7 - 128));
        if (!v3)
          return v3;
        v6 = v8;
      }
      else
      {
        v3 += 2;
      }
    }
    else
    {
      ++v3;
    }
    if (((unsigned int (*)(unsigned int *, unint64_t))a3[1])(a3[2], v6))
    {
      v9 = (int *)*a3;
      v10 = **a3;
      if ((_DWORD)v10 == (*a3)[1])
      {
        v11 = v10 + 1;
        sub_19C2DE744((int *)*a3, v10 + 1);
        *(_DWORD *)(sub_19C2DEBB8((uint64_t)v9) + 4 * v10) = v6;
      }
      else
      {
        *(_DWORD *)(sub_19C2DEBB8((uint64_t)*a3) + 4 * v10) = v6;
        v11 = v10 + 1;
      }
      *v9 = v11;
    }
    else
    {
      v12 = *((_DWORD *)a3 + 8);
      v13 = (unint64_t *)a3[3];
      if ((*v13 & 1) != 0)
        v14 = (std::string *)((*v13 & 0xFFFFFFFFFFFFFFFELL) + 8);
      else
        v14 = (std::string *)sub_19C2C138C(v13);
      sub_19C2DBA98(v12, v6, v14);
    }
  }
  return v3;
}

char *sub_19C2D9934(uint64_t a1, char *__src, int64_t __n)
{
  char *v6;
  uint64_t v7;
  char *v8;

  *(_DWORD *)(a1 + 84) = 0;
  if (__n >= 17)
  {
    *(_DWORD *)(a1 + 28) = 16;
    v6 = &__src[__n - 16];
    *(_QWORD *)a1 = v6;
    *(_QWORD *)(a1 + 8) = v6;
    *(_QWORD *)(a1 + 16) = a1 + 40;
    if (*(_QWORD *)(a1 + 72) != 1)
      return __src;
    v7 = 2;
    v8 = __src;
    goto LABEL_6;
  }
  v8 = (char *)(a1 + 40);
  memcpy((void *)(a1 + 40), __src, __n);
  *(_DWORD *)(a1 + 28) = 0;
  *(_QWORD *)a1 = &v8[__n];
  *(_QWORD *)(a1 + 8) = &v8[__n];
  *(_QWORD *)(a1 + 16) = 0;
  if (*(_QWORD *)(a1 + 72) == 1)
  {
    v7 = __src - v8;
LABEL_6:
    *(_QWORD *)(a1 + 72) = v7;
  }
  return v8;
}

uint64_t sub_19C2D99E4(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  std::string *v5;
  char v6;
  std::string v7[2];

  v1 = *(unsigned int *)(result + 8);
  if ((v1 & 0x80000000) != 0)
  {
    sub_19C2CF5C8((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1780);
    v5 = sub_19C2CF5E0(v7, "CHECK failed: (n) >= (0): ");
    sub_19C2CF710((uint64_t)&v6, (const char **)&v5->__r_.__value_.__l.__data_);
    return sub_19C2CF718((uint64_t)v7);
  }
  else if ((_DWORD)v1)
  {
    v2 = result;
    v3 = (uint64_t *)(*(_QWORD *)(result + 16) + 8);
    do
    {
      v4 = *v3++;
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
      --v1;
    }
    while (v1);
    *(_DWORD *)(v2 + 8) = 0;
  }
  return result;
}

void sub_19C2D9A80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19C2D9A98(_QWORD *a1)
{
  unsigned int *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = (unsigned int *)a1[2];
  if (v2 && !*a1)
  {
    v3 = v2 + 2;
    v4 = *v2;
    if ((int)v4 >= 1)
    {
      do
      {
        if (*v3)
          (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 8))(*v3);
        ++v3;
        --v4;
      }
      while (v4);
      v2 = (unsigned int *)a1[2];
    }
    operator delete(v2);
  }
  a1[2] = 0;
}

uint64_t **sub_19C2D9B08(uint64_t **a1, int *a2, _OWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  int v7;
  uint64_t **v8;
  int v9;
  uint64_t *v10;
  __int128 v11;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = *((_DWORD *)v5 + 8);
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (uint64_t *)operator new(0x40uLL);
    v11 = a3[1];
    *((_OWORD *)v10 + 2) = *a3;
    *((_OWORD *)v10 + 3) = v11;
    sub_19C2A2274(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }
  return v8;
}

void sub_19C2D9BC0(uint64_t a1)
{
  sub_19C2A1E6C(a1, *(_QWORD **)(a1 + 8));
}

uint64_t *sub_19C2D9BC8(uint64_t **a1, uint64_t *a2, int *a3, _OWORD *a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  __int128 v9;
  uint64_t v11;
  uint64_t *v12;

  v6 = sub_19C2D9C4C(a1, a2, &v12, &v11, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (uint64_t *)operator new(0x40uLL);
    v9 = a4[1];
    *((_OWORD *)v7 + 2) = *a4;
    *((_OWORD *)v7 + 3) = v9;
    sub_19C2A2274(a1, (uint64_t)v12, v8, v7);
  }
  return v7;
}

uint64_t *sub_19C2D9C4C(_QWORD *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, int *a5)
{
  uint64_t *v5;
  int v6;
  int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  BOOL v14;
  int v15;
  uint64_t v16;
  uint64_t *v17;
  int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  int v22;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = *((_DWORD *)a2 + 8), *a5 < v7))
  {
    v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (uint64_t *)*a2;
      do
      {
        v10 = v9;
        v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      v13 = a2;
      do
      {
        v10 = (uint64_t *)v13[2];
        v14 = *v10 == (_QWORD)v13;
        v13 = v10;
      }
      while (v14);
    }
    v15 = *a5;
    if (*((_DWORD *)v10 + 8) < *a5)
      goto LABEL_17;
    v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v17 = (uint64_t *)v16;
          v18 = *(_DWORD *)(v16 + 32);
          if (v15 >= v18)
            break;
          v16 = *v17;
          v5 = v17;
          if (!*v17)
            goto LABEL_29;
        }
        if (v18 >= v15)
          break;
        v5 = v17 + 1;
        v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  v11 = a2[1];
  if (v11)
  {
    v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      v14 = *a4 == (_QWORD)v19;
      v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((_DWORD *)a4 + 8))
  {
    v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v21 = (uint64_t *)v20;
          v22 = *(_DWORD *)(v20 + 32);
          if (v6 >= v22)
            break;
          v20 = *v21;
          v5 = v21;
          if (!*v21)
            goto LABEL_48;
        }
        if (v22 >= v6)
          break;
        v5 = v21 + 1;
        v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

uint64_t *sub_19C2D9DF4(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  int v5;
  uint64_t **v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = *a2;
  v3 = a2;
  if (*a2)
  {
    v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      v3 = a2;
      goto LABEL_7;
    }
    do
    {
      v3 = v4;
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  v2 = v3[1];
  if (v2)
  {
LABEL_7:
    v5 = 0;
    *(_QWORD *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  v5 = 1;
LABEL_8:
  v6 = (uint64_t **)v3[2];
  v7 = *v6;
  if (*v6 == v3)
  {
    *v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      v7 = 0;
      result = (uint64_t *)v2;
    }
    else
    {
      v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    v9 = a2[2];
    v3[2] = v9;
    *(_QWORD *)(v9 + 8 * (*(_QWORD *)a2[2] != (_QWORD)a2)) = v3;
    v11 = *a2;
    v10 = a2[1];
    *(_QWORD *)(v11 + 16) = v3;
    *v3 = v11;
    v3[1] = v10;
    if (v10)
      *(_QWORD *)(v10 + 16) = v3;
    *((_BYTE *)v3 + 24) = *((_BYTE *)a2 + 24);
    if (result == a2)
      result = v3;
  }
  if (!v8 || !result)
    return result;
  if (!v5)
  {
    *(_BYTE *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    v12 = v7[2];
    if (*(uint64_t **)v12 == v7)
      break;
    if (!*((_BYTE *)v7 + 24))
    {
      *((_BYTE *)v7 + 24) = 1;
      *(_BYTE *)(v12 + 24) = 0;
      v13 = *(uint64_t **)(v12 + 8);
      v14 = *v13;
      *(_QWORD *)(v12 + 8) = *v13;
      if (v14)
        *(_QWORD *)(v14 + 16) = v12;
      v13[2] = *(_QWORD *)(v12 + 16);
      *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * (**(_QWORD **)(v12 + 16) != v12)) = v13;
      *v13 = v12;
      *(_QWORD *)(v12 + 16) = v13;
      if (result == (uint64_t *)*v7)
        result = v7;
      v7 = *(uint64_t **)(*v7 + 8);
    }
    v15 = (_QWORD *)*v7;
    if (*v7 && !*((_BYTE *)v15 + 24))
    {
      v16 = (uint64_t *)v7[1];
      if (!v16)
        goto LABEL_56;
LABEL_55:
      if (*((_BYTE *)v16 + 24))
      {
LABEL_56:
        *((_BYTE *)v15 + 24) = 1;
        *((_BYTE *)v7 + 24) = 0;
        v22 = v15[1];
        *v7 = v22;
        if (v22)
          *(_QWORD *)(v22 + 16) = v7;
        v15[2] = v7[2];
        *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v15;
        v15[1] = v7;
        v7[2] = (uint64_t)v15;
        v16 = v7;
      }
      else
      {
        v15 = v7;
      }
      v23 = v15[2];
      *((_BYTE *)v15 + 24) = *(_BYTE *)(v23 + 24);
      *(_BYTE *)(v23 + 24) = 1;
      *((_BYTE *)v16 + 24) = 1;
      v24 = *(uint64_t **)(v23 + 8);
      v25 = *v24;
      *(_QWORD *)(v23 + 8) = *v24;
      if (v25)
        *(_QWORD *)(v25 + 16) = v23;
      v24[2] = *(_QWORD *)(v23 + 16);
      *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v24;
      *v24 = v23;
      goto LABEL_72;
    }
    v16 = (uint64_t *)v7[1];
    if (v16 && !*((_BYTE *)v16 + 24))
      goto LABEL_55;
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      v17 = result;
LABEL_53:
      *((_BYTE *)v17 + 24) = 1;
      return result;
    }
    if (!*((_BYTE *)v17 + 24))
      goto LABEL_53;
LABEL_49:
    v7 = *(uint64_t **)(v17[2] + 8 * (*(_QWORD *)v17[2] == (_QWORD)v17));
  }
  if (!*((_BYTE *)v7 + 24))
  {
    *((_BYTE *)v7 + 24) = 1;
    *(_BYTE *)(v12 + 24) = 0;
    v18 = v7[1];
    *(_QWORD *)v12 = v18;
    if (v18)
      *(_QWORD *)(v18 + 16) = v12;
    v7[2] = *(_QWORD *)(v12 + 16);
    *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * (**(_QWORD **)(v12 + 16) != v12)) = v7;
    v7[1] = v12;
    *(_QWORD *)(v12 + 16) = v7;
    if (result == (uint64_t *)v12)
      result = v7;
    v7 = *(uint64_t **)v12;
  }
  v19 = (_QWORD *)*v7;
  if (*v7 && !*((_BYTE *)v19 + 24))
    goto LABEL_68;
  v20 = (uint64_t *)v7[1];
  if (!v20 || *((_BYTE *)v20 + 24))
  {
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (*((_BYTE *)v17 + 24))
      v21 = v17 == result;
    else
      v21 = 1;
    if (v21)
      goto LABEL_53;
    goto LABEL_49;
  }
  if (v19 && !*((_BYTE *)v19 + 24))
  {
LABEL_68:
    v20 = v7;
  }
  else
  {
    *((_BYTE *)v20 + 24) = 1;
    *((_BYTE *)v7 + 24) = 0;
    v26 = *v20;
    v7[1] = *v20;
    if (v26)
      *(_QWORD *)(v26 + 16) = v7;
    v20[2] = v7[2];
    *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v20;
    *v20 = (uint64_t)v7;
    v7[2] = (uint64_t)v20;
    v19 = v7;
  }
  v23 = v20[2];
  *((_BYTE *)v20 + 24) = *(_BYTE *)(v23 + 24);
  *(_BYTE *)(v23 + 24) = 1;
  *((_BYTE *)v19 + 24) = 1;
  v24 = *(uint64_t **)v23;
  v27 = *(_QWORD *)(*(_QWORD *)v23 + 8);
  *(_QWORD *)v23 = v27;
  if (v27)
    *(_QWORD *)(v27 + 16) = v23;
  v24[2] = *(_QWORD *)(v23 + 16);
  *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v24;
  v24[1] = v23;
LABEL_72:
  *(_QWORD *)(v23 + 16) = v24;
  return result;
}

void sub_19C2DA178()
{
  __assert_rtn("flat_end", "extension_set.h", 829, "!is_large()");
}

uint64_t sub_19C2DA1A0(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void sub_19C2DA1AC(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void sub_19C2DA1C0()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1EDB96E30);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1EDB96E30))
    {
      qword_1EE41C5D8 = 0;
      unk_1EE41C5E0 = 0;
      qword_1EE41C5E8 = 0;
      sub_19C2DAB90((uint64_t)sub_19C2DA1AC, (uint64_t)&qword_1EE41C5D8);
      atomic_store(1u, (unsigned __int8 *)&unk_1EDB96DF0);
      __cxa_guard_release(&qword_1EDB96E30);
    }
  }
}

void sub_19C2DA238(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1EDB96E30);
  _Unwind_Resume(a1);
}

uint64_t sub_19C2DA250(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 64))(v4, a1);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 64))(a1, a2);
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 64))(a2, v4);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

void sub_19C2DA2EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_19C2DA308(_DWORD *a1)
{
  unsigned __int8 v2;
  pthread_t v3;
  uint64_t v4;
  std::string *v5;
  unsigned __int8 v6;
  char v7;
  std::string v8[2];

  v2 = atomic_load((unsigned __int8 *)&qword_1EDB96E28);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_1EDB96E28))
  {
    __cxa_atexit((void (*)(void *))std::mutex::~mutex, &stru_1EDB96C68, &dword_19C291000);
    __cxa_guard_release(&qword_1EDB96E28);
  }
  v3 = pthread_self();
  v4 = (uint64_t)v3;
  if (qword_1EE41C128)
  {
    if (v3 && v3 == (pthread_t)qword_1EE41C128)
      goto LABEL_5;
  }
  else if (!v3)
  {
LABEL_5:
    if (*a1 != 1)
    {
      sub_19C2CF5C8((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/generated_message_util.cc", 785);
      v5 = sub_19C2CF5E0(v8, "CHECK failed: (scc->visit_status.load(std::memory_order_relaxed)) == (SCCInfoBase::kRunning): ");
      sub_19C2CF710((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
      sub_19C2CF718((uint64_t)v8);
    }
    return;
  }
  v6 = atomic_load((unsigned __int8 *)&unk_1EDB96DF0);
  if ((v6 & 1) == 0)
    sub_19C2DA1C0();
  std::mutex::lock(&stru_1EDB96C68);
  qword_1EE41C128 = v4;
  sub_19C2DA458(a1);
  qword_1EE41C128 = 0;
  std::mutex::unlock(&stru_1EDB96C68);
}

void sub_19C2DA43C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_19C2DA458(_DWORD *result)
{
  uint64_t (**v1)(void);
  _DWORD *v2;
  int v3;
  uint64_t i;
  uint64_t v5;
  int v6;
  uint64_t v7;
  _DWORD *v8;

  if (*result == -1)
  {
    v1 = (uint64_t (**)(void))result;
    *result = 1;
    v2 = result + 6;
    v3 = result[1];
    if (v3 >= 1)
    {
      for (i = 0; i < v3; ++i)
      {
        if (*(_QWORD *)&v2[2 * i])
        {
          sub_19C2DA458();
          v3 = *((_DWORD *)v1 + 1);
        }
      }
    }
    v5 = v3;
    v6 = *((_DWORD *)v1 + 2);
    if (v6 >= 1)
    {
      v7 = 0;
      v8 = &v2[2 * v5];
      do
      {
        if (**(_QWORD **)&v8[2 * v7])
        {
          sub_19C2DA458();
          v6 = *((_DWORD *)v1 + 2);
        }
        ++v7;
      }
      while (v7 < v6);
    }
    result = (_DWORD *)v1[2]();
    atomic_store(0, (unsigned int *)v1);
  }
  return result;
}

uint64_t sub_19C2DA504(char *__src, int64_t __n, uint64_t a3, char a4)
{
  char *v6;
  BOOL v7;
  _BYTE v9[32];
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0x7FFFFFFF00000000;
  v14 = dword_1EE41AE18;
  v15 = 0x80000000;
  v16 = 0;
  v17 = 0;
  v6 = sub_19C2D9934((uint64_t)v9, __src, __n);
  if ((*(uint64_t (**)(uint64_t, char *, _BYTE *))(*(_QWORD *)a3 + 88))(a3, v6, v9))
    v7 = (_DWORD)v13 == 0;
  else
    v7 = 0;
  if (v7)
  {
    if ((a4 & 2) != 0 || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 48))(a3) & 1) != 0)
      return 1;
    sub_19C2DA5FC(a3);
  }
  return 0;
}

_QWORD *sub_19C2DA5EC@<X0>(_QWORD *a1@<X8>)
{
  return sub_19C2A6D48(a1, "(cannot determine missing fields for lite message)");
}

uint64_t sub_19C2DA5FC(uint64_t a1)
{
  std::string *v2;
  char v4;
  std::string __p;
  std::string v6[2];

  sub_19C2CF5C8((uint64_t)v6, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/message_lite.cc", 133);
  sub_19C2DA6AC("parse", a1, &__p);
  v2 = sub_19C2CF608(v6, (const std::string::value_type *)&__p);
  sub_19C2CF710((uint64_t)&v4, (const char **)&v2->__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return sub_19C2CF718((uint64_t)v6);
}

void sub_19C2DA67C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  sub_19C2CF718((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_19C2DA6AC(const std::string::value_type *a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  const std::string::value_type *p_p;
  std::string::size_type v7;
  const std::string::value_type *v8;
  std::string::size_type v9;
  void *__p;
  std::string::size_type v11;
  unsigned __int8 v12;

  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  std::string::append(a3, "Can't ");
  std::string::append(a3, a1);
  std::string::append(a3, " message of type \"");
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a2 + 16))(&__p, a2);
  if ((v12 & 0x80u) == 0)
    p_p = (const std::string::value_type *)&__p;
  else
    p_p = (const std::string::value_type *)__p;
  if ((v12 & 0x80u) == 0)
    v7 = v12;
  else
    v7 = v11;
  std::string::append(a3, p_p, v7);
  if ((char)v12 < 0)
    operator delete(__p);
  std::string::append(a3, "\" because it is missing required fields: ");
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a2 + 56))(&__p, a2);
  if ((v12 & 0x80u) == 0)
    v8 = (const std::string::value_type *)&__p;
  else
    v8 = (const std::string::value_type *)__p;
  if ((v12 & 0x80u) == 0)
    v9 = v12;
  else
    v9 = v11;
  std::string::append(a3, v8, v9);
  if ((char)v12 < 0)
    operator delete(__p);
}

void sub_19C2DA7B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v15 + 23) < 0)
    operator delete(*(void **)v15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19C2DA7F4(uint64_t a1, char *a2, unsigned int a3)
{
  int64_t v5;

  if ((a3 & 0x80000000) != 0)
    sub_19C2DAE44();
  v5 = a3;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  return sub_19C2DA504(a2, v5, a1, 1);
}

BOOL sub_19C2DA844(uint64_t a1, std::string *a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string __p;
  std::string v9[2];

  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1) & 1) == 0)
  {
    sub_19C2CF5C8((uint64_t)v9, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/message_lite.cc", 449);
    v4 = sub_19C2CF5E0(v9, "CHECK failed: IsInitialized(): ");
    sub_19C2DA6AC("serialize", a1, &__p);
    v5 = sub_19C2CF608(v4, (const std::string::value_type *)&__p);
    sub_19C2CF710((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    sub_19C2CF718((uint64_t)v9);
  }
  return sub_19C2DA934(a1, a2);
}

void sub_19C2DA900(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  sub_19C2CF718((uint64_t)&a16);
  _Unwind_Resume(a1);
}

BOOL sub_19C2DA934(uint64_t a1, std::string *a2)
{
  std::string *v2;
  std::string::size_type size;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  std::string *v8;
  std::string *v9;
  std::string *v10;
  std::string *v11;
  std::string *v12;
  char v14;
  std::string __p[2];
  std::string v16[2];
  uint64_t v17;
  __int16 v18;
  char v19;
  uint64_t v20;

  v2 = a2;
  v20 = *MEMORY[0x1E0C80C00];
  if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
    size = a2->__r_.__value_.__l.__size_;
  else
    size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
  v6 = v5;
  v7 = v5 >> 31;
  if (v5 >> 31)
  {
    sub_19C2CF5C8((uint64_t)v16, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/message_lite.cc", 457);
    (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(__p, a1);
    v10 = sub_19C2CF608(v16, (const std::string::value_type *)__p);
    v11 = sub_19C2CF5E0(v10, " exceeded maximum protobuf size of 2GB: ");
    v12 = sub_19C2CF830(v11, v6);
    sub_19C2CF710((uint64_t)&v14, (const char **)&v12->__r_.__value_.__l.__data_);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    v9 = v16;
    goto LABEL_12;
  }
  std::string::resize(v2, v5 + size, 0);
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
  *(_OWORD *)&v16[0].__r_.__value_.__l.__data_ = (unint64_t)v2 + size + v6;
  v17 = 0;
  v18 = 0;
  v19 = byte_1EE41C8E4 & 1;
  if (v16[0].__r_.__value_.__r.__words[0] != (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1))
  {
    sub_19C2CF5C8((uint64_t)__p, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/message_lite.cc", 360);
    v8 = sub_19C2CF5E0(__p, "CHECK failed: target + size == res: ");
    sub_19C2CF710((uint64_t)&v14, (const char **)&v8->__r_.__value_.__l.__data_);
    v9 = __p;
LABEL_12:
    sub_19C2CF718((uint64_t)v9);
  }
  return v7 == 0;
}

void sub_19C2DAADC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  sub_19C2CF718((uint64_t)&__p);
  _Unwind_Resume(a1);
}

BOOL sub_19C2DAB24@<W0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _BOOL8 result;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  result = sub_19C2DA844(a1, (std::string *)a2);
  if (!result)
  {
    if (*(char *)(a2 + 23) < 0)
    {
      **(_BYTE **)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 23) = 0;
    }
  }
  return result;
}

void sub_19C2DAB74(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_19C2DAB90(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;

  v4 = sub_19C2DACB0();
  std::mutex::lock((std::mutex *)(v4 + 24));
  v5 = *(_QWORD **)(v4 + 8);
  v6 = *(_QWORD *)(v4 + 16);
  if ((unint64_t)v5 >= v6)
  {
    v8 = ((uint64_t)v5 - *(_QWORD *)v4) >> 4;
    v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 60)
      sub_19C2A18E8();
    v10 = v6 - *(_QWORD *)v4;
    if (v10 >> 3 > v9)
      v9 = v10 >> 3;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0)
      v11 = 0xFFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
      v12 = (char *)sub_19C2A26A4(v4 + 16, v11);
    else
      v12 = 0;
    v13 = &v12[16 * v8];
    v14 = &v12[16 * v11];
    *(_QWORD *)v13 = a1;
    *((_QWORD *)v13 + 1) = a2;
    v7 = v13 + 16;
    v16 = *(char **)v4;
    v15 = *(char **)(v4 + 8);
    if (v15 != *(char **)v4)
    {
      do
      {
        *((_OWORD *)v13 - 1) = *((_OWORD *)v15 - 1);
        v13 -= 16;
        v15 -= 16;
      }
      while (v15 != v16);
      v15 = *(char **)v4;
    }
    *(_QWORD *)v4 = v13;
    *(_QWORD *)(v4 + 8) = v7;
    *(_QWORD *)(v4 + 16) = v14;
    if (v15)
      operator delete(v15);
  }
  else
  {
    *v5 = a1;
    v5[1] = a2;
    v7 = v5 + 2;
  }
  *(_QWORD *)(v4 + 8) = v7;
  std::mutex::unlock((std::mutex *)(v4 + 24));
}

void sub_19C2DAC9C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19C2DACB0()
{
  unsigned __int8 v0;
  uint64_t v2;

  v0 = atomic_load((unsigned __int8 *)&qword_1EDB96C60);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_1EDB96C60))
  {
    v2 = operator new();
    *(_QWORD *)v2 = 0;
    *(_QWORD *)(v2 + 8) = 0;
    *(_QWORD *)(v2 + 16) = 0;
    *(_QWORD *)(v2 + 24) = 850045863;
    *(_OWORD *)(v2 + 32) = 0u;
    *(_OWORD *)(v2 + 48) = 0u;
    *(_OWORD *)(v2 + 64) = 0u;
    *(_QWORD *)(v2 + 80) = 0;
    qword_1EDB96CA8 = v2;
    __cxa_guard_release(&qword_1EDB96C60);
  }
  return qword_1EDB96CA8;
}

void sub_19C2DAD3C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1EDB96C60);
  _Unwind_Resume(a1);
}

void sub_19C2DAD54()
{
  uint64_t v0;
  uint64_t v1;

  if ((byte_1EE41C130 & 1) == 0)
  {
    v0 = sub_19C2DACB0();
    if (v0)
    {
      v1 = sub_19C2DADA0(v0);
      MEMORY[0x1A1AD355C](v1, 0x1020C40A0054943);
    }
    byte_1EE41C130 = 1;
  }
}

uint64_t sub_19C2DADA0(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  void (*v6)(_QWORD);
  uint64_t v7;
  _QWORD *v8;

  v2 = *(_QWORD **)a1;
  v3 = *(_QWORD **)(a1 + 8);
  v4 = v3 - 2;
  if (*(_QWORD **)a1 != v3 && v4 > v2)
  {
    do
    {
      v6 = (void (*)(_QWORD))*v2;
      *v2 = *v4;
      *v4 = v6;
      v7 = v2[1];
      v2[1] = v4[1];
      v4[1] = v7;
      v2 += 2;
      v4 -= 2;
    }
    while (v2 < v4);
    v2 = *(_QWORD **)a1;
    v3 = *(_QWORD **)(a1 + 8);
  }
  while (v2 != v3)
  {
    ((void (*)(_QWORD))*v2)(v2[1]);
    v2 += 2;
  }
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  v8 = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v8;
    operator delete(v8);
  }
  return a1;
}

void sub_19C2DAE44()
{
  __assert_rtn("StringPiece", "stringpiece.h", 229, "len >= 0");
}

_OWORD *sub_19C2DAE6C(uint64_t a1)
{
  std::string *v2;
  _OWORD *result;
  uint64_t v4;
  int v5;
  char v6;
  std::string v7[2];

  if (*(int *)(a1 + 28) <= 16)
  {
    sub_19C2CF5C8((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/parse_context.cc", 158);
    v2 = sub_19C2CF5E0(v7, "CHECK failed: limit_ > kSlopBytes: ");
    sub_19C2CF710((uint64_t)&v6, (const char **)&v2->__r_.__value_.__l.__data_);
    sub_19C2CF718((uint64_t)v7);
  }
  result = sub_19C2DAF30(a1, 0, -1);
  v4 = *(_QWORD *)(a1 + 8);
  if (result)
  {
    v5 = *(_DWORD *)(a1 + 28) + (_DWORD)result - v4;
    *(_DWORD *)(a1 + 28) = v5;
    v4 += v5 & (v5 >> 31);
  }
  else
  {
    *(_DWORD *)(a1 + 80) = 1;
  }
  *(_QWORD *)a1 = v4;
  return result;
}

void sub_19C2DAF18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

_OWORD *sub_19C2DAF30(uint64_t a1, unsigned int a2, int a3)
{
  _OWORD *v3;
  uint64_t v5;
  int v6;
  std::string *v7;
  int v8;
  std::string *v10;
  std::string *v11;
  unint64_t v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  int v15;
  int v16;
  BOOL v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  size_t v21;
  std::string *v22;
  std::string *v23;
  unint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  char *v28;
  void *v29;
  unint64_t v30;
  char v31;
  void *__src;
  std::string v33[2];

  v3 = *(_OWORD **)(a1 + 16);
  if (!v3)
    return v3;
  v5 = a1 + 40;
  if (v3 != (_OWORD *)(a1 + 40))
  {
    v6 = *(_DWORD *)(a1 + 24);
    if (v6 <= 16)
    {
      sub_19C2CF5C8((uint64_t)v33, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/parse_context.cc", 105);
      v7 = sub_19C2CF5E0(v33, "CHECK failed: size_ > kSlopBytes: ");
      sub_19C2CF710((uint64_t)&__src, (const char **)&v7->__r_.__value_.__l.__data_);
      sub_19C2CF718((uint64_t)v33);
      v3 = *(_OWORD **)(a1 + 16);
      v6 = *(_DWORD *)(a1 + 24);
    }
    *(_QWORD *)(a1 + 8) = (char *)v3 + v6 - 16;
    *(_QWORD *)(a1 + 16) = v5;
    if (*(_QWORD *)(a1 + 72) == 1)
      *(_QWORD *)(a1 + 72) = 2;
    return v3;
  }
  *v3 = *(_OWORD *)*(_QWORD *)(a1 + 8);
  if (*(int *)(a1 + 84) < 1)
    goto LABEL_46;
  v8 = a3;
  if (a3 < 0)
    goto LABEL_39;
  if ((a2 & 0x80000000) != 0)
  {
    sub_19C2CF5C8((uint64_t)v33, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/parse_context.cc", 53);
    v11 = sub_19C2CF5E0(v33, "CHECK failed: overrun >= 0: ");
    sub_19C2CF710((uint64_t)&__src, (const char **)&v11->__r_.__value_.__l.__data_);
    sub_19C2CF718((uint64_t)v33);
LABEL_14:
    v12 = a1 + 56;
    v13 = (unsigned __int8 *)v3 + (int)a2;
    v14 = v13;
    while (2)
    {
      v15 = (char)*v14++;
      v16 = v15;
      if (v15 < 0)
      {
        v16 = v16 + (*v14 << 7) - 128;
        if ((char)*v14 < 0)
        {
          v14 = v13 + 3;
          v20 = -21;
          while (1)
          {
            v16 += (*(v14 - 1) - 1) << (v20 + 35);
            if (((char)*(v14 - 1) & 0x80000000) == 0)
              break;
            ++v14;
            v20 += 7;
            if (!v20)
              goto LABEL_39;
          }
        }
        else
        {
          v14 = v13 + 2;
        }
      }
      if ((unint64_t)v14 <= v12)
      {
        if (!v16)
          goto LABEL_46;
        switch(v16 & 7)
        {
          case 0:
            v33[0].__r_.__value_.__r.__words[0] = 0;
            v14 = sub_19C2DC224((char *)v14, v33);
            if (!v14)
              goto LABEL_39;
            goto LABEL_38;
          case 1:
            v14 += 8;
            goto LABEL_38;
          case 2:
            v18 = *v14;
            if ((char)*v14 < 0)
            {
              v19 = sub_19C2DBC24((uint64_t)v14, v18);
              if (!v19)
                goto LABEL_39;
            }
            else
            {
              v19 = (uint64_t)(v14 + 1);
            }
            if ((uint64_t)(v12 - v19) < v18)
              goto LABEL_39;
            v14 = (unsigned __int8 *)(v19 + v18);
LABEL_38:
            v13 = v14;
            if ((unint64_t)v14 >= v12)
              goto LABEL_39;
            continue;
          case 3:
            ++v8;
            goto LABEL_38;
          case 4:
            v17 = __OFSUB__(v8--, 1);
            if (v8 < 0 != v17)
              goto LABEL_46;
            goto LABEL_38;
          case 5:
            v14 += 4;
            goto LABEL_38;
          default:
            goto LABEL_39;
        }
      }
      goto LABEL_39;
    }
  }
  if (a2 >= 0x11)
  {
    sub_19C2CF5C8((uint64_t)v33, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/parse_context.cc", 54);
    v10 = sub_19C2CF5E0(v33, "CHECK failed: overrun <= kSlopBytes: ");
    sub_19C2CF710((uint64_t)&__src, (const char **)&v10->__r_.__value_.__l.__data_);
    sub_19C2CF718((uint64_t)v33);
    goto LABEL_39;
  }
  if (a2 != 16)
    goto LABEL_14;
LABEL_39:
  __src = 0;
  if (!(*(unsigned int (**)(_QWORD, void **, uint64_t))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), &__src, a1 + 24))
  {
LABEL_45:
    *(_DWORD *)(a1 + 84) = 0;
LABEL_46:
    if (*(_QWORD *)(a1 + 72) == 2)
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a1 + 8) - (_QWORD)v3;
    *(_QWORD *)(a1 + 8) = a1 + 56;
    *(_QWORD *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 24) = 0;
    return v3;
  }
  while (1)
  {
    v21 = *(unsigned int *)(a1 + 24);
    *(_DWORD *)(a1 + 84) -= v21;
    if ((int)v21 >= 17)
    {
      v27 = *(_QWORD *)(a1 + 72);
      v26 = (_QWORD *)(a1 + 72);
      v25 = v27;
      v28 = (char *)(v26 - 2);
      v29 = __src;
      *((_OWORD *)v26 - 1) = *(_OWORD *)__src;
      *(v26 - 7) = v29;
      goto LABEL_52;
    }
    if ((int)v21 >= 1)
      break;
    if ((_DWORD)v21)
    {
      sub_19C2CF5C8((uint64_t)v33, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/parse_context.cc", 137);
      v22 = sub_19C2CF5E0(v33, "CHECK failed: size_ == 0: ");
      v23 = sub_19C2CF7B4(v22, *(_DWORD *)(a1 + 24));
      sub_19C2CF710((uint64_t)&v31, (const char **)&v23->__r_.__value_.__l.__data_);
      sub_19C2CF718((uint64_t)v33);
    }
    if (((*(uint64_t (**)(_QWORD, void **, uint64_t))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), &__src, a1 + 24) & 1) == 0)goto LABEL_45;
  }
  memcpy((void *)(a1 + 56), __src, v21);
  v30 = *(_QWORD *)(a1 + 72);
  v26 = (_QWORD *)(a1 + 72);
  v25 = v30;
  v28 = (char *)v3 + v21;
  *(v26 - 7) = v3;
LABEL_52:
  *(v26 - 8) = v28;
  if (v25 > 1)
    *v26 = 1;
  return v3;
}

void sub_19C2DB2D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_19C2DB308(uint64_t a1, signed int a2, int a3)
{
  int v3;
  signed int v5;
  std::string *v7;
  std::string *v8;
  std::string *v9;
  std::string *v10;
  std::string *v11;
  std::string *v12;
  _OWORD *v13;
  uint64_t v14;
  int v15;
  char *result;
  std::string *v17;
  char v18;
  std::string v19[2];

  v3 = *(_DWORD *)(a1 + 28);
  if (v3 < a2)
    return 0;
  v5 = a2;
  if (v3 == a2)
  {
    sub_19C2CF5C8((uint64_t)v19, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/parse_context.cc", 175);
    v7 = sub_19C2CF5E0(v19, "CHECK failed: overrun != limit_: ");
    sub_19C2CF710((uint64_t)&v18, (const char **)&v7->__r_.__value_.__l.__data_);
    sub_19C2CF718((uint64_t)v19);
    v3 = *(_DWORD *)(a1 + 28);
  }
  if (v3 <= v5)
  {
    sub_19C2CF5C8((uint64_t)v19, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/parse_context.cc", 176);
    v8 = sub_19C2CF5E0(v19, "CHECK failed: overrun < limit_: ");
    sub_19C2CF710((uint64_t)&v18, (const char **)&v8->__r_.__value_.__l.__data_);
    sub_19C2CF718((uint64_t)v19);
    v3 = *(_DWORD *)(a1 + 28);
  }
  if (*(_QWORD *)a1 != *(_QWORD *)(a1 + 8) + (v3 & (v3 >> 31)))
  {
    sub_19C2CF5C8((uint64_t)v19, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/parse_context.cc", 181);
    v9 = sub_19C2CF5E0(v19, "CHECK failed: limit_end_ == buffer_end_ + (std::min)(0, limit_): ");
    sub_19C2CF710((uint64_t)&v18, (const char **)&v9->__r_.__value_.__l.__data_);
    sub_19C2CF718((uint64_t)v19);
    v3 = *(_DWORD *)(a1 + 28);
  }
  if (v3 <= 0)
  {
    sub_19C2CF5C8((uint64_t)v19, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/parse_context.cc", 183);
    v10 = sub_19C2CF5E0(v19, "CHECK failed: limit_ > 0: ");
    sub_19C2CF710((uint64_t)&v18, (const char **)&v10->__r_.__value_.__l.__data_);
    sub_19C2CF718((uint64_t)v19);
  }
  if (*(_QWORD *)a1 != *(_QWORD *)(a1 + 8))
  {
    sub_19C2CF5C8((uint64_t)v19, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/parse_context.cc", 184);
    v11 = sub_19C2CF5E0(v19, "CHECK failed: limit_end_ == buffer_end_: ");
    sub_19C2CF710((uint64_t)&v18, (const char **)&v11->__r_.__value_.__l.__data_);
    sub_19C2CF718((uint64_t)v19);
  }
  while (1)
  {
    if (v5 < 0)
    {
      sub_19C2CF5C8((uint64_t)v19, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/parse_context.cc", 188);
      v12 = sub_19C2CF5E0(v19, "CHECK failed: overrun >= 0: ");
      sub_19C2CF710((uint64_t)&v18, (const char **)&v12->__r_.__value_.__l.__data_);
      sub_19C2CF718((uint64_t)v19);
    }
    v13 = sub_19C2DAF30(a1, v5, a3);
    if (!v13)
      break;
    v14 = *(_QWORD *)(a1 + 8);
    v15 = *(_DWORD *)(a1 + 28) + (_DWORD)v13 - v14;
    *(_DWORD *)(a1 + 28) = v15;
    result = (char *)v13 + v5;
    v5 = (_DWORD)result - v14;
    if ((int)result - (int)v14 < 0)
    {
      *(_QWORD *)a1 = v14 + (v15 & (v15 >> 31));
      return result;
    }
  }
  if (v5)
    return 0;
  if (*(int *)(a1 + 28) <= 0)
  {
    sub_19C2CF5C8((uint64_t)v19, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/parse_context.cc", 193);
    v17 = sub_19C2CF5E0(v19, "CHECK failed: limit_ > 0: ");
    sub_19C2CF710((uint64_t)&v18, (const char **)&v17->__r_.__value_.__l.__data_);
    sub_19C2CF718((uint64_t)v19);
  }
  result = *(char **)(a1 + 8);
  *(_QWORD *)a1 = result;
  *(_DWORD *)(a1 + 80) = 1;
  return result;
}

void sub_19C2DB5B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

_OWORD *sub_19C2DB5FC(uint64_t a1, int a2, int a3)
{
  int v5;
  BOOL v6;
  std::string *v7;
  _OWORD *result;
  char v9;
  std::string v10[2];

  v5 = *(_DWORD *)(a1 + 8) - a2 + 16;
  while (1)
  {
    v6 = __OFSUB__(a3, v5);
    a3 -= v5;
    if ((a3 < 0) ^ v6 | (a3 == 0))
    {
      sub_19C2CF5C8((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 323);
      v7 = sub_19C2CF5E0(v10, "CHECK failed: size > chunk_size: ");
      sub_19C2CF710((uint64_t)&v9, (const char **)&v7->__r_.__value_.__l.__data_);
      sub_19C2CF718((uint64_t)v10);
    }
    if (!*(_QWORD *)(a1 + 16) || *(int *)(a1 + 28) < 17)
      break;
    result = sub_19C2DAE6C(a1);
    if (!result)
      return result;
    v5 = *(_DWORD *)(a1 + 8) - (_DWORD)result;
    if (a3 <= v5)
      return (_OWORD *)((char *)result + a3 + 16);
  }
  return 0;
}

void sub_19C2DB6C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

const std::string::value_type *sub_19C2DB6E0(uint64_t a1, std::string::value_type *__s, int a3, std::string *this)
{
  int v5;
  const std::string::value_type *v6;
  uint64_t v8;
  std::string::size_type size;
  int v10;
  int v11;
  BOOL v12;
  std::string *v13;
  const std::string::value_type *result;
  char v15;
  std::string v16[2];

  v5 = a3;
  v6 = __s;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    *this->__r_.__value_.__l.__data_ = 0;
    this->__r_.__value_.__l.__size_ = 0;
  }
  else
  {
    this->__r_.__value_.__s.__data_[0] = 0;
    *((_BYTE *)&this->__r_.__value_.__s + 23) = 0;
  }
  v8 = *(_QWORD *)(a1 + 8);
  if (v8 - (uint64_t)__s + *(int *)(a1 + 28) >= a3)
  {
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
      size = this->__r_.__value_.__l.__size_;
    else
      size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    if (a3 >= 50000000)
      v10 = 50000000;
    else
      v10 = a3;
    std::string::reserve(this, size + v10);
    v8 = *(_QWORD *)(a1 + 8);
  }
  v11 = v8 - (_DWORD)v6 + 16;
  while (1)
  {
    v12 = __OFSUB__(v5, v11);
    v5 -= v11;
    if ((v5 < 0) ^ v12 | (v5 == 0))
    {
      sub_19C2CF5C8((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 323);
      v13 = sub_19C2CF5E0(v16, "CHECK failed: size > chunk_size: ");
      sub_19C2CF710((uint64_t)&v15, (const char **)&v13->__r_.__value_.__l.__data_);
      sub_19C2CF718((uint64_t)v16);
    }
    if (!*(_QWORD *)(a1 + 16))
      break;
    std::string::append(this, v6, v11);
    if (*(int *)(a1 + 28) < 17)
      break;
    result = (const std::string::value_type *)sub_19C2DAE6C(a1);
    if (!result)
      return result;
    v6 = result + 16;
    v11 = *(_DWORD *)(a1 + 8) - (_DWORD)result;
    if (v5 <= v11)
    {
      std::string::append(this, v6, v5);
      return &v6[v5];
    }
  }
  return 0;
}

void sub_19C2DB84C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

const std::string::value_type *sub_19C2DB864(uint64_t a1, std::string::value_type *__s, int a3, std::string *this)
{
  int v5;
  const std::string::value_type *v6;
  uint64_t v8;
  std::string::size_type size;
  int v10;
  int v11;
  BOOL v12;
  std::string *v13;
  const std::string::value_type *result;
  char v15;
  std::string v16[2];

  v5 = a3;
  v6 = __s;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8 - (uint64_t)__s + *(int *)(a1 + 28) >= a3)
  {
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
      size = this->__r_.__value_.__l.__size_;
    else
      size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    if (a3 >= 50000000)
      v10 = 50000000;
    else
      v10 = a3;
    std::string::reserve(this, size + v10);
    v8 = *(_QWORD *)(a1 + 8);
  }
  v11 = v8 - (_DWORD)v6 + 16;
  while (1)
  {
    v12 = __OFSUB__(v5, v11);
    v5 -= v11;
    if ((v5 < 0) ^ v12 | (v5 == 0))
    {
      sub_19C2CF5C8((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 323);
      v13 = sub_19C2CF5E0(v16, "CHECK failed: size > chunk_size: ");
      sub_19C2CF710((uint64_t)&v15, (const char **)&v13->__r_.__value_.__l.__data_);
      sub_19C2CF718((uint64_t)v16);
    }
    if (!*(_QWORD *)(a1 + 16))
      break;
    std::string::append(this, v6, v11);
    if (*(int *)(a1 + 28) < 17)
      break;
    result = (const std::string::value_type *)sub_19C2DAE6C(a1);
    if (!result)
      return result;
    v6 = result + 16;
    v11 = *(_DWORD *)(a1 + 8) - (_DWORD)result;
    if (v5 <= v11)
    {
      std::string::append(this, v6, v5);
      return &v6[v5];
    }
  }
  return 0;
}

void sub_19C2DB9B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19C2DB9CC(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  int v6;
  unsigned int v7;
  char *v8;
  uint64_t result;
  unsigned int v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  int v15;

  v6 = (char)*a3;
  v7 = *a3;
  if (v6 < 0)
  {
    result = sub_19C2DBC24((uint64_t)a3, v7);
    if (!result)
      return result;
    v8 = (char *)result;
    v7 = v10;
  }
  else
  {
    v8 = (char *)(a3 + 1);
  }
  v11 = sub_19C2C1670(a1, (int)v8, v7);
  v12 = *(_DWORD *)(a1 + 88);
  v13 = __OFSUB__(v12--, 1);
  *(_DWORD *)(a1 + 88) = v12;
  if (v12 < 0 != v13)
    return 0;
  v14 = v11;
  result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)a2 + 88))(a2, v8, a1);
  if (!result)
    return result;
  ++*(_DWORD *)(a1 + 88);
  if (*(_DWORD *)(a1 + 80))
    return 0;
  v15 = *(_DWORD *)(a1 + 28) + v14;
  *(_DWORD *)(a1 + 28) = v15;
  *(_QWORD *)a1 = *(_QWORD *)(a1 + 8) + (v15 & (v15 >> 31));
  return result;
}

void sub_19C2DBA98(int a1, unint64_t a2, std::string *this)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v5 = (8 * a1);
  if (v5 < 0x80)
  {
    LOBYTE(v6) = 8 * a1;
  }
  else
  {
    do
    {
      std::string::push_back(this, v5 | 0x80);
      v6 = v5 >> 7;
      v7 = v5 >> 14;
      v5 >>= 7;
    }
    while (v7);
  }
  std::string::push_back(this, v6);
  if (a2 < 0x80)
  {
    LOBYTE(v8) = a2;
  }
  else
  {
    do
    {
      std::string::push_back(this, a2 | 0x80);
      v8 = a2 >> 7;
      v9 = a2 >> 14;
      a2 >>= 7;
    }
    while (v9);
  }
  std::string::push_back(this, v8);
}

uint64_t sub_19C2DBB30(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t v4;

  result = a1 + 3;
  v4 = -21;
  while (1)
  {
    a2 += (*(unsigned __int8 *)(result - 1) - 1) << (v4 + 35);
    if ((*(char *)(result - 1) & 0x80000000) == 0)
      break;
    ++result;
    v4 += 7;
    if (!v4)
    {
      while (*(char *)(a1 + v4 + 5) < 0)
      {
        result = 0;
        if (++v4 == 5)
          return result;
      }
      return a1 + v4 + 6;
    }
  }
  return result;
}

uint64_t sub_19C2DBB98(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  char *v4;
  uint64_t v5;
  int v6;

  a2 = a2;
  result = a1 + 3;
  v4 = (char *)(a1 + 2);
  v5 = 14;
  while (1)
  {
    v6 = *v4++;
    a2 += (v6 - 1) << v5;
    if ((v6 & 0x80000000) == 0)
      break;
    ++result;
    v5 += 7;
    if (v5 == 70)
      return 0;
  }
  return result;
}

uint64_t sub_19C2DBBE0(uint64_t a1, int a2)
{
  uint64_t result;
  char *v4;
  uint64_t v5;
  int v6;

  result = a1 + 3;
  v4 = (char *)(a1 + 2);
  v5 = -21;
  while (1)
  {
    v6 = *v4++;
    a2 += (v6 - 1) << (v5 + 35);
    if ((v6 & 0x80000000) == 0)
      break;
    ++result;
    v5 += 7;
    if (!v5)
      return 0;
  }
  return result;
}

uint64_t sub_19C2DBC24(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;

  result = a1 + 2;
  v4 = -21;
  while (1)
  {
    a2 += (*(unsigned __int8 *)(result - 1) - 1) << (v4 + 28);
    if ((*(char *)(result - 1) & 0x80000000) == 0)
      break;
    ++result;
    v4 += 7;
    if (!v4)
    {
      v5 = *(unsigned __int8 *)(a1 + 4);
      v6 = a1 + 5;
      if (a2 + (v5 << 28) - 0x10000000 > 0x7FFFFFEF)
        v6 = 0;
      if (v5 <= 7)
        return v6;
      else
        return 0;
    }
  }
  return result;
}

const std::string::value_type *sub_19C2DBC94(std::string *a1, char *a2, uint64_t a3)
{
  int v5;
  std::string::value_type *v6;
  const std::string::value_type *result;
  int v8;

  v5 = *a2;
  if (*a2 < 0)
  {
    result = (const std::string::value_type *)sub_19C2DBC24((uint64_t)a2, *a2);
    if (!result)
      return result;
    v6 = (std::string::value_type *)result;
    v5 = v8;
  }
  else
  {
    v6 = a2 + 1;
  }
  return sub_19C2D955C(a3, v6, v5, a1);
}

unsigned __int8 *sub_19C2DBCF8(int *a1, unsigned __int8 *a2, uint64_t a3)
{
  return sub_19C2DC298(a3, a2, a1);
}

unsigned __int8 *sub_19C2DBD08(int *a1, unsigned __int8 *a2, uint64_t a3)
{
  return sub_19C2DC564(a3, a2, a1);
}

unsigned __int8 *sub_19C2DBD18(int *a1, unsigned __int8 *a2, uint64_t a3)
{
  return sub_19C2DC830(a3, a2, a1);
}

unsigned __int8 *sub_19C2DBD28(int *a1, unsigned __int8 *a2, uint64_t a3)
{
  return sub_19C2DCAFC(a3, a2, a1);
}

unsigned __int8 *sub_19C2DBD38(int *a1, unsigned __int8 *a2, uint64_t a3)
{
  return sub_19C2DCDC8(a3, a2, a1);
}

unsigned __int8 *sub_19C2DBD48(int *a1, unsigned __int8 *a2, uint64_t a3)
{
  return sub_19C2DD0A0(a3, a2, a1);
}

unsigned __int8 *sub_19C2DBD58(int *a1, unsigned __int8 *a2, uint64_t a3)
{
  return sub_19C2DD378(a3, a2, a1);
}

char *sub_19C2DBD6C(int *a1, char *a2, uint64_t a3)
{
  int v5;
  char *v6;
  char *result;
  int v8;

  v5 = *a2;
  if (*a2 < 0)
  {
    result = (char *)sub_19C2DBC24((uint64_t)a2, *a2);
    if (!result)
      return result;
    v6 = result;
    v5 = v8;
  }
  else
  {
    v6 = a2 + 1;
  }
  return sub_19C2DD64C(a3, v6, v5, a1);
}

char *sub_19C2DBDD4(int *a1, char *a2, uint64_t a3)
{
  int v5;
  char *v6;
  char *result;
  int v8;

  v5 = *a2;
  if (*a2 < 0)
  {
    result = (char *)sub_19C2DBC24((uint64_t)a2, *a2);
    if (!result)
      return result;
    v6 = result;
    v5 = v8;
  }
  else
  {
    v6 = a2 + 1;
  }
  return sub_19C2DD750(a3, v6, v5, a1);
}

char *sub_19C2DBE3C(int *a1, char *a2, uint64_t a3)
{
  int v5;
  char *v6;
  char *result;
  int v8;

  v5 = *a2;
  if (*a2 < 0)
  {
    result = (char *)sub_19C2DBC24((uint64_t)a2, *a2);
    if (!result)
      return result;
    v6 = result;
    v5 = v8;
  }
  else
  {
    v6 = a2 + 1;
  }
  return sub_19C2DD854(a3, v6, v5, a1);
}

char *sub_19C2DBEA4(int *a1, char *a2, uint64_t a3)
{
  int v5;
  char *v6;
  char *result;
  int v8;

  v5 = *a2;
  if (*a2 < 0)
  {
    result = (char *)sub_19C2DBC24((uint64_t)a2, *a2);
    if (!result)
      return result;
    v6 = result;
    v5 = v8;
  }
  else
  {
    v6 = a2 + 1;
  }
  return sub_19C2DD958(a3, v6, v5, a1);
}

char *sub_19C2DBF0C(int *a1, char *a2, uint64_t a3)
{
  int v5;
  char *v6;
  char *result;
  int v8;

  v5 = *a2;
  if (*a2 < 0)
  {
    result = (char *)sub_19C2DBC24((uint64_t)a2, *a2);
    if (!result)
      return result;
    v6 = result;
    v5 = v8;
  }
  else
  {
    v6 = a2 + 1;
  }
  return sub_19C2DDA5C(a3, v6, v5, a1);
}

char *sub_19C2DBF74(int *a1, char *a2, uint64_t a3)
{
  int v5;
  char *v6;
  char *result;
  int v8;

  v5 = *a2;
  if (*a2 < 0)
  {
    result = (char *)sub_19C2DBC24((uint64_t)a2, *a2);
    if (!result)
      return result;
    v6 = result;
    v5 = v8;
  }
  else
  {
    v6 = a2 + 1;
  }
  return sub_19C2DDB60(a3, v6, v5, a1);
}

char *sub_19C2DBFD8(uint64_t a1, char *a2, uint64_t a3)
{
  char *v5;
  unsigned int v6;
  uint64_t v8;
  char *v10;

  v10 = a2;
  while (1)
  {
    if ((sub_19C2C1250(a3, &v10, *(_DWORD *)(a3 + 92)) & 1) != 0)
      return v10;
    v5 = v10 + 1;
    v6 = *v10;
    if (*v10 < 0)
    {
      v6 = v6 + (*v5 << 7) - 128;
      if (*v5 < 0)
      {
        v5 = v10 + 3;
        v8 = -21;
        while (1)
        {
          v6 += (*(v5 - 1) - 1) << (v8 + 35);
          if ((*(v5 - 1) & 0x80000000) == 0)
            break;
          ++v5;
          v8 += 7;
          if (!v8)
            return 0;
        }
      }
      else
      {
        v5 = v10 + 2;
      }
    }
    v10 = v5;
    if (!v6 || (v6 & 7) == 4)
      break;
    v10 = (char *)sub_19C2DC0E8(v6, a1);
    if (!v10)
      return 0;
  }
  *(_DWORD *)(a3 + 80) = v6 - 1;
  return v5;
}

unsigned __int8 *sub_19C2DC0C0(unsigned int a1, std::string *a2, char *a3, int32x2_t *a4)
{
  std::string *v5;

  v5 = a2;
  return sub_19C2DC0E8(a1, &v5, a3, a4);
}

unsigned __int8 *sub_19C2DC0E8(unint64_t a1, std::string **a2, char *a3, int32x2_t *a4)
{
  unint64_t v4;
  unsigned __int8 *v5;
  std::string *v7;
  unsigned __int8 *v8;
  char v10;
  std::string v11[2];

  v4 = a1 >> 3;
  if (!(a1 >> 3))
    return 0;
  v5 = (unsigned __int8 *)a3;
  switch(a1 & 7)
  {
    case 0uLL:
      v11[0].__r_.__value_.__r.__words[0] = 0;
      v5 = sub_19C2DC224(a3, v11);
      if (v5)
        sub_19C2DDC64(a2, v4, v11[0].__r_.__value_.__r.__words[0]);
      return v5;
    case 1uLL:
      v5 = (unsigned __int8 *)(a3 + 8);
      sub_19C2DDD18((std::string *)a2, v4, *(_QWORD *)a3);
      return v5;
    case 2uLL:
      v8 = (unsigned __int8 *)sub_19C2DDDD0(a2, v4, a3, (uint64_t)a4);
      goto LABEL_10;
    case 3uLL:
      v8 = (unsigned __int8 *)sub_19C2DDF18(a2, v4, a3, a4);
LABEL_10:
      v5 = v8;
      break;
    case 4uLL:
      sub_19C2CF5C8((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 758);
      v7 = sub_19C2CF5E0(v11, "Can't happen");
      sub_19C2CF710((uint64_t)&v10, (const char **)&v7->__r_.__value_.__l.__data_);
      sub_19C2CF718((uint64_t)v11);
      break;
    case 5uLL:
      v5 = (unsigned __int8 *)(a3 + 4);
      sub_19C2DE040((std::string *)a2, v4, *(_DWORD *)a3);
      break;
    default:
      return 0;
  }
  return v5;
}

void sub_19C2DC20C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_19C2DC224(char *a1, _QWORD *a2)
{
  uint64_t v2;
  unsigned __int8 *result;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *a1;
  if (*a1 < 0)
  {
    v4 = a1[1];
    v5 = (v2 + (v4 << 7) - 128);
    if ((v4 & 0x80) != 0)
    {
      result = (unsigned __int8 *)(a1 + 3);
      v6 = 14;
      while (1)
      {
        v5 += (*(result - 1) - 1) << v6;
        if (((char)*(result - 1) & 0x80000000) == 0)
          break;
        ++result;
        v6 += 7;
        if (v6 == 70)
        {
          result = 0;
          v5 = 0;
          break;
        }
      }
      *a2 = v5;
    }
    else
    {
      *a2 = v5;
      return (unsigned __int8 *)(a1 + 2);
    }
  }
  else
  {
    *a2 = v2;
    return (unsigned __int8 *)(a1 + 1);
  }
  return result;
}

unsigned __int8 *sub_19C2DC298(uint64_t a1, unsigned __int8 *a2, int *a3)
{
  int v5;
  unsigned __int8 *result;
  int v7;
  unint64_t v8;
  int v9;
  signed int v10;
  std::string *v11;
  int v12;
  std::string *v13;
  unint64_t v14;
  unsigned __int8 *v15;
  BOOL v16;
  char v17;
  std::string v18;
  __int16 v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v5 = *a2;
  if ((char)*a2 < 0)
  {
    result = (unsigned __int8 *)sub_19C2DBC24((uint64_t)a2, *a2);
    if (!result)
      return result;
    v5 = v7;
  }
  else
  {
    result = a2 + 1;
  }
  v8 = *(_QWORD *)(a1 + 8);
  v9 = v8 - (_DWORD)result;
  if (v5 <= (int)v8 - (int)result)
  {
LABEL_15:
    v14 = (unint64_t)&result[v5];
    result = sub_19C2DC4B8(result, v14, a3);
    if ((unsigned __int8 *)v14 != result)
      return 0;
  }
  else
  {
    while (1)
    {
      result = sub_19C2DC4B8(result, v8, a3);
      if (!result)
        break;
      v10 = (_DWORD)result - *(_QWORD *)(a1 + 8);
      if (v10 >= 0x11)
      {
        sub_19C2CF5C8((uint64_t)&v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 674);
        v11 = sub_19C2CF5E0(&v18, "CHECK failed: overrun >= 0 && overrun <= kSlopBytes: ");
        sub_19C2CF710((uint64_t)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
        sub_19C2CF718((uint64_t)&v18);
      }
      v12 = v5 - v9;
      if (v5 - v9 <= 16)
      {
        v19 = 0;
        v18.__r_.__value_.__r.__words[2] = 0;
        *(_OWORD *)&v18.__r_.__value_.__l.__data_ = *(_OWORD *)*(_QWORD *)(a1 + 8);
        v15 = sub_19C2DC4B8((unsigned __int8 *)&v18 + v10, (unint64_t)&v18 + v12, a3);
        if (v15)
          v16 = v15 == (unsigned __int8 *)((char *)&v18 + v12);
        else
          v16 = 0;
        if (!v16)
          return 0;
        return (unsigned __int8 *)(*(_QWORD *)(a1 + 8) + v12);
      }
      v5 = v5 - v9 - v10;
      if (v5 <= 0)
      {
        sub_19C2CF5C8((uint64_t)&v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 688);
        v13 = sub_19C2CF5E0(&v18, "CHECK failed: (size) > (0): ");
        sub_19C2CF710((uint64_t)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
        sub_19C2CF718((uint64_t)&v18);
      }
      if (*(int *)(a1 + 28) < 17)
        return 0;
      result = (unsigned __int8 *)sub_19C2DAE6C(a1);
      if (!result)
        return result;
      result += v10;
      v8 = *(_QWORD *)(a1 + 8);
      v9 = v8 - (_DWORD)result;
      if (v5 <= (int)v8 - (int)result)
        goto LABEL_15;
    }
  }
  return result;
}

void sub_19C2DC490(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_19C2DC4B8(unsigned __int8 *a1, unint64_t a2, int *a3)
{
  unsigned __int8 *i;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v10;

  for (i = a1; (unint64_t)i < a2; *a3 = v8)
  {
    v10 = 0;
    i = sub_19C2DC224((char *)i, &v10);
    if (!i)
      break;
    v6 = v10;
    v7 = *a3;
    if ((_DWORD)v7 == a3[1])
    {
      v8 = v7 + 1;
      sub_19C2DE744(a3, v7 + 1);
      *(_DWORD *)(sub_19C2DEBB8((uint64_t)a3) + 4 * v7) = v6;
    }
    else
    {
      *(_DWORD *)(sub_19C2DEBB8((uint64_t)a3) + 4 * v7) = v6;
      v8 = v7 + 1;
    }
  }
  return i;
}

unsigned __int8 *sub_19C2DC564(uint64_t a1, unsigned __int8 *a2, int *a3)
{
  int v5;
  unsigned __int8 *result;
  int v7;
  unint64_t v8;
  int v9;
  signed int v10;
  std::string *v11;
  int v12;
  std::string *v13;
  unint64_t v14;
  unsigned __int8 *v15;
  BOOL v16;
  char v17;
  std::string v18;
  __int16 v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v5 = *a2;
  if ((char)*a2 < 0)
  {
    result = (unsigned __int8 *)sub_19C2DBC24((uint64_t)a2, *a2);
    if (!result)
      return result;
    v5 = v7;
  }
  else
  {
    result = a2 + 1;
  }
  v8 = *(_QWORD *)(a1 + 8);
  v9 = v8 - (_DWORD)result;
  if (v5 <= (int)v8 - (int)result)
  {
LABEL_15:
    v14 = (unint64_t)&result[v5];
    result = sub_19C2DC784(result, v14, a3);
    if ((unsigned __int8 *)v14 != result)
      return 0;
  }
  else
  {
    while (1)
    {
      result = sub_19C2DC784(result, v8, a3);
      if (!result)
        break;
      v10 = (_DWORD)result - *(_QWORD *)(a1 + 8);
      if (v10 >= 0x11)
      {
        sub_19C2CF5C8((uint64_t)&v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 674);
        v11 = sub_19C2CF5E0(&v18, "CHECK failed: overrun >= 0 && overrun <= kSlopBytes: ");
        sub_19C2CF710((uint64_t)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
        sub_19C2CF718((uint64_t)&v18);
      }
      v12 = v5 - v9;
      if (v5 - v9 <= 16)
      {
        v19 = 0;
        v18.__r_.__value_.__r.__words[2] = 0;
        *(_OWORD *)&v18.__r_.__value_.__l.__data_ = *(_OWORD *)*(_QWORD *)(a1 + 8);
        v15 = sub_19C2DC784((unsigned __int8 *)&v18 + v10, (unint64_t)&v18 + v12, a3);
        if (v15)
          v16 = v15 == (unsigned __int8 *)((char *)&v18 + v12);
        else
          v16 = 0;
        if (!v16)
          return 0;
        return (unsigned __int8 *)(*(_QWORD *)(a1 + 8) + v12);
      }
      v5 = v5 - v9 - v10;
      if (v5 <= 0)
      {
        sub_19C2CF5C8((uint64_t)&v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 688);
        v13 = sub_19C2CF5E0(&v18, "CHECK failed: (size) > (0): ");
        sub_19C2CF710((uint64_t)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
        sub_19C2CF718((uint64_t)&v18);
      }
      if (*(int *)(a1 + 28) < 17)
        return 0;
      result = (unsigned __int8 *)sub_19C2DAE6C(a1);
      if (!result)
        return result;
      result += v10;
      v8 = *(_QWORD *)(a1 + 8);
      v9 = v8 - (_DWORD)result;
      if (v5 <= (int)v8 - (int)result)
        goto LABEL_15;
    }
  }
  return result;
}

void sub_19C2DC75C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_19C2DC784(unsigned __int8 *a1, unint64_t a2, int *a3)
{
  unsigned __int8 *i;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v10;

  for (i = a1; (unint64_t)i < a2; *a3 = v8)
  {
    v10 = 0;
    i = sub_19C2DC224((char *)i, &v10);
    if (!i)
      break;
    v6 = v10;
    v7 = *a3;
    if ((_DWORD)v7 == a3[1])
    {
      v8 = v7 + 1;
      sub_19C2DED6C(a3, v7 + 1);
      *(_DWORD *)(sub_19C2DF1E0((uint64_t)a3) + 4 * v7) = v6;
    }
    else
    {
      *(_DWORD *)(sub_19C2DF1E0((uint64_t)a3) + 4 * v7) = v6;
      v8 = v7 + 1;
    }
  }
  return i;
}

unsigned __int8 *sub_19C2DC830(uint64_t a1, unsigned __int8 *a2, int *a3)
{
  int v5;
  unsigned __int8 *result;
  int v7;
  unint64_t v8;
  int v9;
  signed int v10;
  std::string *v11;
  int v12;
  std::string *v13;
  unint64_t v14;
  unsigned __int8 *v15;
  BOOL v16;
  char v17;
  std::string v18;
  __int16 v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v5 = *a2;
  if ((char)*a2 < 0)
  {
    result = (unsigned __int8 *)sub_19C2DBC24((uint64_t)a2, *a2);
    if (!result)
      return result;
    v5 = v7;
  }
  else
  {
    result = a2 + 1;
  }
  v8 = *(_QWORD *)(a1 + 8);
  v9 = v8 - (_DWORD)result;
  if (v5 <= (int)v8 - (int)result)
  {
LABEL_15:
    v14 = (unint64_t)&result[v5];
    result = sub_19C2DCA50(result, v14, a3);
    if ((unsigned __int8 *)v14 != result)
      return 0;
  }
  else
  {
    while (1)
    {
      result = sub_19C2DCA50(result, v8, a3);
      if (!result)
        break;
      v10 = (_DWORD)result - *(_QWORD *)(a1 + 8);
      if (v10 >= 0x11)
      {
        sub_19C2CF5C8((uint64_t)&v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 674);
        v11 = sub_19C2CF5E0(&v18, "CHECK failed: overrun >= 0 && overrun <= kSlopBytes: ");
        sub_19C2CF710((uint64_t)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
        sub_19C2CF718((uint64_t)&v18);
      }
      v12 = v5 - v9;
      if (v5 - v9 <= 16)
      {
        v19 = 0;
        v18.__r_.__value_.__r.__words[2] = 0;
        *(_OWORD *)&v18.__r_.__value_.__l.__data_ = *(_OWORD *)*(_QWORD *)(a1 + 8);
        v15 = sub_19C2DCA50((unsigned __int8 *)&v18 + v10, (unint64_t)&v18 + v12, a3);
        if (v15)
          v16 = v15 == (unsigned __int8 *)((char *)&v18 + v12);
        else
          v16 = 0;
        if (!v16)
          return 0;
        return (unsigned __int8 *)(*(_QWORD *)(a1 + 8) + v12);
      }
      v5 = v5 - v9 - v10;
      if (v5 <= 0)
      {
        sub_19C2CF5C8((uint64_t)&v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 688);
        v13 = sub_19C2CF5E0(&v18, "CHECK failed: (size) > (0): ");
        sub_19C2CF710((uint64_t)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
        sub_19C2CF718((uint64_t)&v18);
      }
      if (*(int *)(a1 + 28) < 17)
        return 0;
      result = (unsigned __int8 *)sub_19C2DAE6C(a1);
      if (!result)
        return result;
      result += v10;
      v8 = *(_QWORD *)(a1 + 8);
      v9 = v8 - (_DWORD)result;
      if (v5 <= (int)v8 - (int)result)
        goto LABEL_15;
    }
  }
  return result;
}

void sub_19C2DCA28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_19C2DCA50(unsigned __int8 *a1, unint64_t a2, int *a3)
{
  unsigned __int8 *i;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v10;

  for (i = a1; (unint64_t)i < a2; *a3 = v8)
  {
    v10 = 0;
    i = sub_19C2DC224((char *)i, &v10);
    if (!i)
      break;
    v6 = v10;
    v7 = *a3;
    if ((_DWORD)v7 == a3[1])
    {
      v8 = v7 + 1;
      sub_19C2DF394(a3, v7 + 1);
      *(_QWORD *)(sub_19C2DF808((uint64_t)a3) + 8 * v7) = v6;
    }
    else
    {
      *(_QWORD *)(sub_19C2DF808((uint64_t)a3) + 8 * v7) = v6;
      v8 = v7 + 1;
    }
  }
  return i;
}

unsigned __int8 *sub_19C2DCAFC(uint64_t a1, unsigned __int8 *a2, int *a3)
{
  int v5;
  unsigned __int8 *result;
  int v7;
  unint64_t v8;
  int v9;
  signed int v10;
  std::string *v11;
  int v12;
  std::string *v13;
  unint64_t v14;
  unsigned __int8 *v15;
  BOOL v16;
  char v17;
  std::string v18;
  __int16 v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v5 = *a2;
  if ((char)*a2 < 0)
  {
    result = (unsigned __int8 *)sub_19C2DBC24((uint64_t)a2, *a2);
    if (!result)
      return result;
    v5 = v7;
  }
  else
  {
    result = a2 + 1;
  }
  v8 = *(_QWORD *)(a1 + 8);
  v9 = v8 - (_DWORD)result;
  if (v5 <= (int)v8 - (int)result)
  {
LABEL_15:
    v14 = (unint64_t)&result[v5];
    result = sub_19C2DCD1C(result, v14, a3);
    if ((unsigned __int8 *)v14 != result)
      return 0;
  }
  else
  {
    while (1)
    {
      result = sub_19C2DCD1C(result, v8, a3);
      if (!result)
        break;
      v10 = (_DWORD)result - *(_QWORD *)(a1 + 8);
      if (v10 >= 0x11)
      {
        sub_19C2CF5C8((uint64_t)&v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 674);
        v11 = sub_19C2CF5E0(&v18, "CHECK failed: overrun >= 0 && overrun <= kSlopBytes: ");
        sub_19C2CF710((uint64_t)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
        sub_19C2CF718((uint64_t)&v18);
      }
      v12 = v5 - v9;
      if (v5 - v9 <= 16)
      {
        v19 = 0;
        v18.__r_.__value_.__r.__words[2] = 0;
        *(_OWORD *)&v18.__r_.__value_.__l.__data_ = *(_OWORD *)*(_QWORD *)(a1 + 8);
        v15 = sub_19C2DCD1C((unsigned __int8 *)&v18 + v10, (unint64_t)&v18 + v12, a3);
        if (v15)
          v16 = v15 == (unsigned __int8 *)((char *)&v18 + v12);
        else
          v16 = 0;
        if (!v16)
          return 0;
        return (unsigned __int8 *)(*(_QWORD *)(a1 + 8) + v12);
      }
      v5 = v5 - v9 - v10;
      if (v5 <= 0)
      {
        sub_19C2CF5C8((uint64_t)&v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 688);
        v13 = sub_19C2CF5E0(&v18, "CHECK failed: (size) > (0): ");
        sub_19C2CF710((uint64_t)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
        sub_19C2CF718((uint64_t)&v18);
      }
      if (*(int *)(a1 + 28) < 17)
        return 0;
      result = (unsigned __int8 *)sub_19C2DAE6C(a1);
      if (!result)
        return result;
      result += v10;
      v8 = *(_QWORD *)(a1 + 8);
      v9 = v8 - (_DWORD)result;
      if (v5 <= (int)v8 - (int)result)
        goto LABEL_15;
    }
  }
  return result;
}

void sub_19C2DCCF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_19C2DCD1C(unsigned __int8 *a1, unint64_t a2, int *a3)
{
  unsigned __int8 *i;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v10;

  for (i = a1; (unint64_t)i < a2; *a3 = v8)
  {
    v10 = 0;
    i = sub_19C2DC224((char *)i, &v10);
    if (!i)
      break;
    v6 = v10;
    v7 = *a3;
    if ((_DWORD)v7 == a3[1])
    {
      v8 = v7 + 1;
      sub_19C2DF9BC(a3, v7 + 1);
      *(_QWORD *)(sub_19C2DFE30((uint64_t)a3) + 8 * v7) = v6;
    }
    else
    {
      *(_QWORD *)(sub_19C2DFE30((uint64_t)a3) + 8 * v7) = v6;
      v8 = v7 + 1;
    }
  }
  return i;
}

unsigned __int8 *sub_19C2DCDC8(uint64_t a1, unsigned __int8 *a2, int *a3)
{
  int v5;
  unsigned __int8 *result;
  int v7;
  unint64_t v8;
  int v9;
  signed int v10;
  std::string *v11;
  int v12;
  std::string *v13;
  unint64_t v14;
  unsigned __int8 *v15;
  BOOL v16;
  char v17;
  std::string v18;
  __int16 v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v5 = *a2;
  if ((char)*a2 < 0)
  {
    result = (unsigned __int8 *)sub_19C2DBC24((uint64_t)a2, *a2);
    if (!result)
      return result;
    v5 = v7;
  }
  else
  {
    result = a2 + 1;
  }
  v8 = *(_QWORD *)(a1 + 8);
  v9 = v8 - (_DWORD)result;
  if (v5 <= (int)v8 - (int)result)
  {
LABEL_15:
    v14 = (unint64_t)&result[v5];
    result = sub_19C2DCFE8(result, v14, a3);
    if ((unsigned __int8 *)v14 != result)
      return 0;
  }
  else
  {
    while (1)
    {
      result = sub_19C2DCFE8(result, v8, a3);
      if (!result)
        break;
      v10 = (_DWORD)result - *(_QWORD *)(a1 + 8);
      if (v10 >= 0x11)
      {
        sub_19C2CF5C8((uint64_t)&v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 674);
        v11 = sub_19C2CF5E0(&v18, "CHECK failed: overrun >= 0 && overrun <= kSlopBytes: ");
        sub_19C2CF710((uint64_t)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
        sub_19C2CF718((uint64_t)&v18);
      }
      v12 = v5 - v9;
      if (v5 - v9 <= 16)
      {
        v19 = 0;
        v18.__r_.__value_.__r.__words[2] = 0;
        *(_OWORD *)&v18.__r_.__value_.__l.__data_ = *(_OWORD *)*(_QWORD *)(a1 + 8);
        v15 = sub_19C2DCFE8((unsigned __int8 *)&v18 + v10, (unint64_t)&v18 + v12, a3);
        if (v15)
          v16 = v15 == (unsigned __int8 *)((char *)&v18 + v12);
        else
          v16 = 0;
        if (!v16)
          return 0;
        return (unsigned __int8 *)(*(_QWORD *)(a1 + 8) + v12);
      }
      v5 = v5 - v9 - v10;
      if (v5 <= 0)
      {
        sub_19C2CF5C8((uint64_t)&v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 688);
        v13 = sub_19C2CF5E0(&v18, "CHECK failed: (size) > (0): ");
        sub_19C2CF710((uint64_t)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
        sub_19C2CF718((uint64_t)&v18);
      }
      if (*(int *)(a1 + 28) < 17)
        return 0;
      result = (unsigned __int8 *)sub_19C2DAE6C(a1);
      if (!result)
        return result;
      result += v10;
      v8 = *(_QWORD *)(a1 + 8);
      v9 = v8 - (_DWORD)result;
      if (v5 <= (int)v8 - (int)result)
        goto LABEL_15;
    }
  }
  return result;
}

void sub_19C2DCFC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_19C2DCFE8(unsigned __int8 *a1, unint64_t a2, int *a3)
{
  unsigned __int8 *i;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v10;

  for (i = a1; (unint64_t)i < a2; *a3 = v8)
  {
    v10 = 0;
    i = sub_19C2DC224((char *)i, &v10);
    if (!i)
      break;
    v6 = -(v10 & 1) ^ (v10 >> 1);
    v7 = *a3;
    if ((_DWORD)v7 == a3[1])
    {
      v8 = v7 + 1;
      sub_19C2DE744(a3, v7 + 1);
      *(_DWORD *)(sub_19C2DEBB8((uint64_t)a3) + 4 * v7) = v6;
    }
    else
    {
      *(_DWORD *)(sub_19C2DEBB8((uint64_t)a3) + 4 * v7) = v6;
      v8 = v7 + 1;
    }
  }
  return i;
}

unsigned __int8 *sub_19C2DD0A0(uint64_t a1, unsigned __int8 *a2, int *a3)
{
  int v5;
  unsigned __int8 *result;
  int v7;
  unint64_t v8;
  int v9;
  signed int v10;
  std::string *v11;
  int v12;
  std::string *v13;
  unint64_t v14;
  unsigned __int8 *v15;
  BOOL v16;
  char v17;
  std::string v18;
  __int16 v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v5 = *a2;
  if ((char)*a2 < 0)
  {
    result = (unsigned __int8 *)sub_19C2DBC24((uint64_t)a2, *a2);
    if (!result)
      return result;
    v5 = v7;
  }
  else
  {
    result = a2 + 1;
  }
  v8 = *(_QWORD *)(a1 + 8);
  v9 = v8 - (_DWORD)result;
  if (v5 <= (int)v8 - (int)result)
  {
LABEL_15:
    v14 = (unint64_t)&result[v5];
    result = sub_19C2DD2C0(result, v14, a3);
    if ((unsigned __int8 *)v14 != result)
      return 0;
  }
  else
  {
    while (1)
    {
      result = sub_19C2DD2C0(result, v8, a3);
      if (!result)
        break;
      v10 = (_DWORD)result - *(_QWORD *)(a1 + 8);
      if (v10 >= 0x11)
      {
        sub_19C2CF5C8((uint64_t)&v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 674);
        v11 = sub_19C2CF5E0(&v18, "CHECK failed: overrun >= 0 && overrun <= kSlopBytes: ");
        sub_19C2CF710((uint64_t)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
        sub_19C2CF718((uint64_t)&v18);
      }
      v12 = v5 - v9;
      if (v5 - v9 <= 16)
      {
        v19 = 0;
        v18.__r_.__value_.__r.__words[2] = 0;
        *(_OWORD *)&v18.__r_.__value_.__l.__data_ = *(_OWORD *)*(_QWORD *)(a1 + 8);
        v15 = sub_19C2DD2C0((unsigned __int8 *)&v18 + v10, (unint64_t)&v18 + v12, a3);
        if (v15)
          v16 = v15 == (unsigned __int8 *)((char *)&v18 + v12);
        else
          v16 = 0;
        if (!v16)
          return 0;
        return (unsigned __int8 *)(*(_QWORD *)(a1 + 8) + v12);
      }
      v5 = v5 - v9 - v10;
      if (v5 <= 0)
      {
        sub_19C2CF5C8((uint64_t)&v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 688);
        v13 = sub_19C2CF5E0(&v18, "CHECK failed: (size) > (0): ");
        sub_19C2CF710((uint64_t)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
        sub_19C2CF718((uint64_t)&v18);
      }
      if (*(int *)(a1 + 28) < 17)
        return 0;
      result = (unsigned __int8 *)sub_19C2DAE6C(a1);
      if (!result)
        return result;
      result += v10;
      v8 = *(_QWORD *)(a1 + 8);
      v9 = v8 - (_DWORD)result;
      if (v5 <= (int)v8 - (int)result)
        goto LABEL_15;
    }
  }
  return result;
}

void sub_19C2DD298(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_19C2DD2C0(unsigned __int8 *a1, unint64_t a2, int *a3)
{
  unsigned __int8 *i;
  unint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t v10;

  for (i = a1; (unint64_t)i < a2; *a3 = v8)
  {
    v10 = 0;
    i = sub_19C2DC224((char *)i, &v10);
    if (!i)
      break;
    v6 = -(uint64_t)(v10 & 1) ^ (v10 >> 1);
    v7 = *a3;
    if ((_DWORD)v7 == a3[1])
    {
      v8 = v7 + 1;
      sub_19C2DF394(a3, v7 + 1);
      *(_QWORD *)(sub_19C2DF808((uint64_t)a3) + 8 * v7) = v6;
    }
    else
    {
      *(_QWORD *)(sub_19C2DF808((uint64_t)a3) + 8 * v7) = v6;
      v8 = v7 + 1;
    }
  }
  return i;
}

unsigned __int8 *sub_19C2DD378(uint64_t a1, unsigned __int8 *a2, int *a3)
{
  int v5;
  unsigned __int8 *result;
  int v7;
  unint64_t v8;
  int v9;
  signed int v10;
  std::string *v11;
  int v12;
  std::string *v13;
  unint64_t v14;
  unsigned __int8 *v15;
  BOOL v16;
  char v17;
  std::string v18;
  __int16 v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v5 = *a2;
  if ((char)*a2 < 0)
  {
    result = (unsigned __int8 *)sub_19C2DBC24((uint64_t)a2, *a2);
    if (!result)
      return result;
    v5 = v7;
  }
  else
  {
    result = a2 + 1;
  }
  v8 = *(_QWORD *)(a1 + 8);
  v9 = v8 - (_DWORD)result;
  if (v5 <= (int)v8 - (int)result)
  {
LABEL_15:
    v14 = (unint64_t)&result[v5];
    result = sub_19C2DD598(result, v14, a3);
    if ((unsigned __int8 *)v14 != result)
      return 0;
  }
  else
  {
    while (1)
    {
      result = sub_19C2DD598(result, v8, a3);
      if (!result)
        break;
      v10 = (_DWORD)result - *(_QWORD *)(a1 + 8);
      if (v10 >= 0x11)
      {
        sub_19C2CF5C8((uint64_t)&v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 674);
        v11 = sub_19C2CF5E0(&v18, "CHECK failed: overrun >= 0 && overrun <= kSlopBytes: ");
        sub_19C2CF710((uint64_t)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
        sub_19C2CF718((uint64_t)&v18);
      }
      v12 = v5 - v9;
      if (v5 - v9 <= 16)
      {
        v19 = 0;
        v18.__r_.__value_.__r.__words[2] = 0;
        *(_OWORD *)&v18.__r_.__value_.__l.__data_ = *(_OWORD *)*(_QWORD *)(a1 + 8);
        v15 = sub_19C2DD598((unsigned __int8 *)&v18 + v10, (unint64_t)&v18 + v12, a3);
        if (v15)
          v16 = v15 == (unsigned __int8 *)((char *)&v18 + v12);
        else
          v16 = 0;
        if (!v16)
          return 0;
        return (unsigned __int8 *)(*(_QWORD *)(a1 + 8) + v12);
      }
      v5 = v5 - v9 - v10;
      if (v5 <= 0)
      {
        sub_19C2CF5C8((uint64_t)&v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 688);
        v13 = sub_19C2CF5E0(&v18, "CHECK failed: (size) > (0): ");
        sub_19C2CF710((uint64_t)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
        sub_19C2CF718((uint64_t)&v18);
      }
      if (*(int *)(a1 + 28) < 17)
        return 0;
      result = (unsigned __int8 *)sub_19C2DAE6C(a1);
      if (!result)
        return result;
      result += v10;
      v8 = *(_QWORD *)(a1 + 8);
      v9 = v8 - (_DWORD)result;
      if (v5 <= (int)v8 - (int)result)
        goto LABEL_15;
    }
  }
  return result;
}

void sub_19C2DD570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_19C2DD598(unsigned __int8 *a1, unint64_t a2, int *a3)
{
  unsigned __int8 *i;
  BOOL v6;
  uint64_t v7;
  int v8;
  uint64_t v10;

  for (i = a1; (unint64_t)i < a2; *a3 = v8)
  {
    v10 = 0;
    i = sub_19C2DC224((char *)i, &v10);
    if (!i)
      break;
    v6 = v10 != 0;
    v7 = *a3;
    if ((_DWORD)v7 == a3[1])
    {
      v8 = v7 + 1;
      sub_19C2DE124(a3, v7 + 1);
      *(_BYTE *)(sub_19C2DE594((uint64_t)a3) + v7) = v6;
    }
    else
    {
      *(_BYTE *)(sub_19C2DE594((uint64_t)a3) + v7) = v6;
      v8 = v7 + 1;
    }
  }
  return i;
}

char *sub_19C2DD64C(uint64_t a1, char *a2, int a3, int *a4)
{
  int v5;
  char *v6;
  int v7;
  void *v9;
  char *result;
  void *v11;

  v5 = a3;
  v6 = a2;
  v7 = *(_DWORD *)(a1 + 8) - (_DWORD)a2 + 16;
  if (v7 >= a3)
  {
LABEL_5:
    sub_19C2DED6C(a4, *a4 + (v5 >> 2));
    v11 = (void *)sub_19C2DEF24((uint64_t)a4, v5 >> 2);
    memcpy(v11, v6, (int)(v5 & 0xFFFFFFFC));
    if (v5 == (v5 & 0xFFFFFFFC))
      return &v6[v5 & 0xFFFFFFFC];
    else
      return 0;
  }
  else
  {
    while (1)
    {
      sub_19C2DED6C(a4, *a4 + (v7 >> 2));
      v9 = (void *)sub_19C2DEF24((uint64_t)a4, v7 >> 2);
      memcpy(v9, v6, (int)(v7 & 0xFFFFFFFC));
      if (*(int *)(a1 + 28) < 17)
        return 0;
      result = (char *)sub_19C2DAE6C(a1);
      if (!result)
        return result;
      v5 -= v7 & 0xFFFFFFFC;
      v6 = &result[-(v7 & 3) + 16];
      v7 = *(_DWORD *)(a1 + 8) - ((_DWORD)result - (v7 & 3));
      if (v5 <= v7)
        goto LABEL_5;
    }
  }
}

char *sub_19C2DD750(uint64_t a1, char *a2, int a3, int *a4)
{
  int v5;
  char *v6;
  int v7;
  void *v9;
  char *result;
  void *v11;

  v5 = a3;
  v6 = a2;
  v7 = *(_DWORD *)(a1 + 8) - (_DWORD)a2 + 16;
  if (v7 >= a3)
  {
LABEL_5:
    sub_19C2DE744(a4, *a4 + (v5 >> 2));
    v11 = (void *)sub_19C2DE8FC((uint64_t)a4, v5 >> 2);
    memcpy(v11, v6, (int)(v5 & 0xFFFFFFFC));
    if (v5 == (v5 & 0xFFFFFFFC))
      return &v6[v5 & 0xFFFFFFFC];
    else
      return 0;
  }
  else
  {
    while (1)
    {
      sub_19C2DE744(a4, *a4 + (v7 >> 2));
      v9 = (void *)sub_19C2DE8FC((uint64_t)a4, v7 >> 2);
      memcpy(v9, v6, (int)(v7 & 0xFFFFFFFC));
      if (*(int *)(a1 + 28) < 17)
        return 0;
      result = (char *)sub_19C2DAE6C(a1);
      if (!result)
        return result;
      v5 -= v7 & 0xFFFFFFFC;
      v6 = &result[-(v7 & 3) + 16];
      v7 = *(_DWORD *)(a1 + 8) - ((_DWORD)result - (v7 & 3));
      if (v5 <= v7)
        goto LABEL_5;
    }
  }
}

char *sub_19C2DD854(uint64_t a1, char *a2, int a3, int *a4)
{
  int v5;
  char *v6;
  int v7;
  void *v9;
  char *result;
  void *v11;

  v5 = a3;
  v6 = a2;
  v7 = *(_DWORD *)(a1 + 8) - (_DWORD)a2 + 16;
  if (v7 >= a3)
  {
LABEL_5:
    sub_19C2DF9BC(a4, *a4 + (v5 >> 3));
    v11 = (void *)sub_19C2DFB74((uint64_t)a4, v5 >> 3);
    memcpy(v11, v6, (int)(v5 & 0xFFFFFFF8));
    if (v5 == (v5 & 0xFFFFFFF8))
      return &v6[v5 & 0xFFFFFFF8];
    else
      return 0;
  }
  else
  {
    while (1)
    {
      sub_19C2DF9BC(a4, *a4 + (v7 >> 3));
      v9 = (void *)sub_19C2DFB74((uint64_t)a4, v7 >> 3);
      memcpy(v9, v6, (int)(v7 & 0xFFFFFFF8));
      if (*(int *)(a1 + 28) < 17)
        return 0;
      result = (char *)sub_19C2DAE6C(a1);
      if (!result)
        return result;
      v5 -= v7 & 0xFFFFFFF8;
      v6 = &result[-(v7 & 7) + 16];
      v7 = *(_DWORD *)(a1 + 8) - ((_DWORD)result - (v7 & 7));
      if (v5 <= v7)
        goto LABEL_5;
    }
  }
}

char *sub_19C2DD958(uint64_t a1, char *a2, int a3, int *a4)
{
  int v5;
  char *v6;
  int v7;
  void *v9;
  char *result;
  void *v11;

  v5 = a3;
  v6 = a2;
  v7 = *(_DWORD *)(a1 + 8) - (_DWORD)a2 + 16;
  if (v7 >= a3)
  {
LABEL_5:
    sub_19C2DF394(a4, *a4 + (v5 >> 3));
    v11 = (void *)sub_19C2DF54C((uint64_t)a4, v5 >> 3);
    memcpy(v11, v6, (int)(v5 & 0xFFFFFFF8));
    if (v5 == (v5 & 0xFFFFFFF8))
      return &v6[v5 & 0xFFFFFFF8];
    else
      return 0;
  }
  else
  {
    while (1)
    {
      sub_19C2DF394(a4, *a4 + (v7 >> 3));
      v9 = (void *)sub_19C2DF54C((uint64_t)a4, v7 >> 3);
      memcpy(v9, v6, (int)(v7 & 0xFFFFFFF8));
      if (*(int *)(a1 + 28) < 17)
        return 0;
      result = (char *)sub_19C2DAE6C(a1);
      if (!result)
        return result;
      v5 -= v7 & 0xFFFFFFF8;
      v6 = &result[-(v7 & 7) + 16];
      v7 = *(_DWORD *)(a1 + 8) - ((_DWORD)result - (v7 & 7));
      if (v5 <= v7)
        goto LABEL_5;
    }
  }
}

char *sub_19C2DDA5C(uint64_t a1, char *a2, int a3, int *a4)
{
  int v5;
  char *v6;
  int v7;
  void *v9;
  char *result;
  void *v11;

  v5 = a3;
  v6 = a2;
  v7 = *(_DWORD *)(a1 + 8) - (_DWORD)a2 + 16;
  if (v7 >= a3)
  {
LABEL_5:
    sub_19C2DFFE4(a4, *a4 + (v5 >> 2));
    v11 = (void *)sub_19C2E019C((uint64_t)a4, v5 >> 2);
    memcpy(v11, v6, (int)(v5 & 0xFFFFFFFC));
    if (v5 == (v5 & 0xFFFFFFFC))
      return &v6[v5 & 0xFFFFFFFC];
    else
      return 0;
  }
  else
  {
    while (1)
    {
      sub_19C2DFFE4(a4, *a4 + (v7 >> 2));
      v9 = (void *)sub_19C2E019C((uint64_t)a4, v7 >> 2);
      memcpy(v9, v6, (int)(v7 & 0xFFFFFFFC));
      if (*(int *)(a1 + 28) < 17)
        return 0;
      result = (char *)sub_19C2DAE6C(a1);
      if (!result)
        return result;
      v5 -= v7 & 0xFFFFFFFC;
      v6 = &result[-(v7 & 3) + 16];
      v7 = *(_DWORD *)(a1 + 8) - ((_DWORD)result - (v7 & 3));
      if (v5 <= v7)
        goto LABEL_5;
    }
  }
}

char *sub_19C2DDB60(uint64_t a1, char *a2, int a3, int *a4)
{
  int v5;
  char *v6;
  int v7;
  void *v9;
  char *result;
  void *v11;

  v5 = a3;
  v6 = a2;
  v7 = *(_DWORD *)(a1 + 8) - (_DWORD)a2 + 16;
  if (v7 >= a3)
  {
LABEL_5:
    sub_19C2E060C(a4, *a4 + (v5 >> 3));
    v11 = (void *)sub_19C2E07C4((uint64_t)a4, v5 >> 3);
    memcpy(v11, v6, (int)(v5 & 0xFFFFFFF8));
    if (v5 == (v5 & 0xFFFFFFF8))
      return &v6[v5 & 0xFFFFFFF8];
    else
      return 0;
  }
  else
  {
    while (1)
    {
      sub_19C2E060C(a4, *a4 + (v7 >> 3));
      v9 = (void *)sub_19C2E07C4((uint64_t)a4, v7 >> 3);
      memcpy(v9, v6, (int)(v7 & 0xFFFFFFF8));
      if (*(int *)(a1 + 28) < 17)
        return 0;
      result = (char *)sub_19C2DAE6C(a1);
      if (!result)
        return result;
      v5 -= v7 & 0xFFFFFFF8;
      v6 = &result[-(v7 & 7) + 16];
      v7 = *(_DWORD *)(a1 + 8) - ((_DWORD)result - (v7 & 7));
      if (v5 <= v7)
        goto LABEL_5;
    }
  }
}

void sub_19C2DDC64(std::string **a1, int a2, unint64_t a3)
{
  std::string *v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  std::string *v9;
  unint64_t v10;
  unint64_t v11;

  v3 = *a1;
  if (*a1)
  {
    v6 = (8 * a2);
    if (v6 < 0x80)
    {
      LOBYTE(v7) = 8 * a2;
    }
    else
    {
      do
      {
        std::string::push_back(v3, v6 | 0x80);
        v7 = v6 >> 7;
        v8 = v6 >> 14;
        v6 >>= 7;
      }
      while (v8);
    }
    std::string::push_back(v3, v7);
    v9 = *a1;
    if (a3 < 0x80)
    {
      LOBYTE(v10) = a3;
    }
    else
    {
      do
      {
        std::string::push_back(v9, a3 | 0x80);
        v10 = a3 >> 7;
        v11 = a3 >> 14;
        a3 >>= 7;
      }
      while (v11);
    }
    std::string::push_back(v9, v10);
  }
}

std::string *sub_19C2DDD18(std::string *result, int a2, uint64_t a3)
{
  std::string *v3;
  std::string **v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD v9[2];

  v9[1] = *MEMORY[0x1E0C80C00];
  v3 = (std::string *)result->__r_.__value_.__r.__words[0];
  if (result->__r_.__value_.__r.__words[0])
  {
    v5 = (std::string **)result;
    v6 = (8 * a2) | 1u;
    if (v6 < 0x80)
    {
      LOBYTE(v7) = (8 * a2) | 1;
    }
    else
    {
      do
      {
        std::string::push_back(v3, v6 | 0x80);
        v7 = v6 >> 7;
        v8 = v6 >> 14;
        v6 >>= 7;
      }
      while (v8);
    }
    std::string::push_back(v3, v7);
    v9[0] = a3;
    return std::string::append(*v5, (const std::string::value_type *)v9, 8uLL);
  }
  return result;
}

const std::string::value_type *sub_19C2DDDD0(std::string **a1, int a2, char *a3, uint64_t a4)
{
  int v7;
  std::string::value_type *v8;
  const std::string::value_type *result;
  int v10;
  std::string *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  std::string *v16;
  unint64_t v17;
  unint64_t v18;

  v7 = *a3;
  if (*a3 < 0)
  {
    result = (const std::string::value_type *)sub_19C2DBC24((uint64_t)a3, *a3);
    if (!result)
      return result;
    v8 = (std::string::value_type *)result;
    v7 = v10;
  }
  else
  {
    v8 = a3 + 1;
  }
  v11 = *a1;
  if (*a1)
  {
    v12 = (8 * a2) | 2u;
    if (v12 < 0x80)
    {
      LOBYTE(v13) = v12;
    }
    else
    {
      do
      {
        std::string::push_back(v11, v12 | 0x80);
        v13 = v12 >> 7;
        v14 = v12 >> 14;
        v12 >>= 7;
      }
      while (v14);
    }
    std::string::push_back(v11, v13);
    v15 = v7;
    v16 = *a1;
    if (v7 < 0x80)
    {
      LOBYTE(v17) = v7;
    }
    else
    {
      do
      {
        std::string::push_back(v16, v15 | 0x80);
        v17 = v15 >> 7;
        v18 = v15 >> 14;
        v15 >>= 7;
      }
      while (v18);
    }
    std::string::push_back(v16, v17);
    return sub_19C2DE0CC(a4, v8, v7, *a1);
  }
  else if (*(_QWORD *)(a4 + 8) - (_QWORD)v8 + 16 >= v7)
  {
    return &v8[v7];
  }
  else
  {
    return (const std::string::value_type *)sub_19C2DB5FC(a4, (int)v8, v7);
  }
}

char *sub_19C2DDF18(std::string **a1, int a2, char *a3, int32x2_t *a4)
{
  std::string *v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  BOOL v13;
  char *v14;
  __int32 v15;
  char *v17;
  std::string *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;

  v7 = *a1;
  v8 = 8 * a2;
  if (*a1)
  {
    v9 = v8 | 3u;
    if (v9 < 0x80)
    {
      LOBYTE(v10) = v8 | 3;
    }
    else
    {
      do
      {
        std::string::push_back(v7, v9 | 0x80);
        v10 = v9 >> 7;
        v11 = v9 >> 14;
        v9 >>= 7;
      }
      while (v11);
    }
    std::string::push_back(v7, v10);
  }
  v12 = a4[11].i32[0];
  v13 = __OFSUB__(v12--, 1);
  a4[11].i32[0] = v12;
  if (v12 < 0 != v13)
    return 0;
  ++a4[11].i32[1];
  v14 = sub_19C2DBFD8((uint64_t)a1, a3, (uint64_t)a4);
  a4[11] = vadd_s32(a4[11], (int32x2_t)0xFFFFFFFF00000001);
  v15 = a4[10].i32[0];
  a4[10].i32[0] = 0;
  if (v15 != (v8 | 3) || v14 == 0)
    return 0;
  v17 = v14;
  v18 = *a1;
  if (v18)
  {
    v19 = v8 | 4u;
    if (v19 < 0x80)
    {
      LOBYTE(v20) = v8 | 4;
    }
    else
    {
      do
      {
        std::string::push_back(v18, v19 | 0x80);
        v20 = v19 >> 7;
        v21 = v19 >> 14;
        v19 >>= 7;
      }
      while (v21);
    }
    std::string::push_back(v18, v20);
  }
  return v17;
}

std::string *sub_19C2DE040(std::string *result, int a2, int a3)
{
  std::string *v3;
  std::string **v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  std::string::value_type __s[4];

  v3 = (std::string *)result->__r_.__value_.__r.__words[0];
  if (result->__r_.__value_.__r.__words[0])
  {
    v5 = (std::string **)result;
    v6 = (8 * a2) | 5u;
    if (v6 < 0x80)
    {
      LOBYTE(v7) = (8 * a2) | 5;
    }
    else
    {
      do
      {
        std::string::push_back(v3, v6 | 0x80);
        v7 = v6 >> 7;
        v8 = v6 >> 14;
        v6 >>= 7;
      }
      while (v8);
    }
    std::string::push_back(v3, v7);
    *(_DWORD *)__s = a3;
    return std::string::append(*v5, __s, 4uLL);
  }
  return result;
}

const std::string::value_type *sub_19C2DE0CC(uint64_t a1, std::string::value_type *__s, int a3, std::string *this)
{
  uint64_t v6;

  if (*(_QWORD *)(a1 + 8) - (_QWORD)__s + 16 < a3)
    return sub_19C2DB864(a1, __s, a3, this);
  v6 = a3;
  std::string::append(this, __s, a3);
  return &__s[v6];
}

void sub_19C2DE124(int *a1, int a2)
{
  int v2;
  _QWORD *v5;
  uint64_t v6;
  int v7;
  std::string *v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  char v14;
  std::string v15[2];

  v2 = a1[1];
  if (v2 >= a2)
    return;
  if (v2 < 1)
  {
    v5 = 0;
    if (v2)
    {
LABEL_4:
      v6 = *(_QWORD *)(sub_19C2DE594((uint64_t)a1) - 8);
      if (a2 >= 4)
      {
        v7 = a1[1];
        if (v7 > 0x3FFFFFFF)
        {
          if (a2 <= 0x40000000)
          {
            sub_19C2CF5C8((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1550);
            v8 = sub_19C2CF5E0(v15, "CHECK failed: (new_size) > (kRepeatedFieldUpperClampLimit): ");
            sub_19C2CF710((uint64_t)&v14, (const char **)&v8->__r_.__value_.__l.__data_);
            sub_19C2CF718((uint64_t)v15);
          }
          v9 = 0x7FFFFFFF;
          goto LABEL_16;
        }
        goto LABEL_13;
      }
      goto LABEL_11;
    }
  }
  else
  {
    v5 = (_QWORD *)(sub_19C2DE594((uint64_t)a1) - 8);
    if (a1[1])
      goto LABEL_4;
  }
  v6 = *((_QWORD *)a1 + 1);
  if (a2 >= 4)
  {
    v7 = 0;
LABEL_13:
    v10 = 2 * v7;
    if (v10 <= a2)
      v9 = a2;
    else
      v9 = v10;
    goto LABEL_16;
  }
LABEL_11:
  v9 = 4;
LABEL_16:
  if (v6)
  {
    v11 = (v9 + 15) & 0x1FFFFFFF8;
    if ((*(_BYTE *)(v6 + 24) & 1) != 0)
      (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(v6 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v6 + 32) + 32), MEMORY[0x1E0DE4EC8], v11);
    v12 = (_QWORD *)sub_19C2CE0C0(v6, v11);
  }
  else
  {
    v12 = operator new(v9 + 8);
  }
  *v12 = v6;
  a1[1] = v9;
  *((_QWORD *)a1 + 1) = v12 + 1;
  sub_19C2DE594((uint64_t)a1);
  if (*a1 >= 1)
  {
    v13 = (void *)sub_19C2DE594((uint64_t)a1);
    memcpy(v13, v5 + 1, *a1);
  }
  if (v5)
  {
    if (!*v5)
      operator delete(v5);
  }
}

void sub_19C2DE2C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19C2DE2D8(uint64_t a1, int a2)
{
  int v4;
  std::string *v5;
  std::string *v6;
  std::string *v7;
  std::string *v8;
  uint64_t result;
  char v10;
  std::string v11[2];

  v4 = *(_DWORD *)a1;
  if (*(_DWORD *)(a1 + 4) - *(_DWORD *)a1 < a2)
  {
    sub_19C2CF5C8((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1278);
    v5 = sub_19C2CF5E0(v11, "CHECK failed: (total_size_ - current_size_) >= (n): ");
    v6 = sub_19C2CF7B4(v5, *(_DWORD *)(a1 + 4));
    v7 = sub_19C2CF5E0(v6, ", ");
    v8 = sub_19C2CF7B4(v7, *(_DWORD *)a1);
    sub_19C2CF710((uint64_t)&v10, (const char **)&v8->__r_.__value_.__l.__data_);
    sub_19C2CF718((uint64_t)v11);
    v4 = *(_DWORD *)a1;
  }
  result = *(_QWORD *)(a1 + 8) + v4;
  *(_DWORD *)a1 = v4 + a2;
  return result;
}

void sub_19C2DE37C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19C2DE394(_DWORD *a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    sub_19C2CF5C8((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1322);
    v4 = sub_19C2CF5E0(v8, "CHECK failed: (index) >= (0): ");
    sub_19C2CF710((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_19C2CF718((uint64_t)v8);
  }
  if (*a1 <= a2)
  {
    sub_19C2CF5C8((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1323);
    v5 = sub_19C2CF5E0(v8, "CHECK failed: (index) < (current_size_): ");
    sub_19C2CF710((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_19C2CF718((uint64_t)v8);
  }
  return sub_19C2DE594((uint64_t)a1) + a2;
}

void sub_19C2DE450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19C2DE470(_DWORD *a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    sub_19C2CF5C8((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1301);
    v4 = sub_19C2CF5E0(v8, "CHECK failed: (index) >= (0): ");
    sub_19C2CF710((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_19C2CF718((uint64_t)v8);
  }
  if (*a1 <= a2)
  {
    sub_19C2CF5C8((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1302);
    v5 = sub_19C2CF5E0(v8, "CHECK failed: (index) < (current_size_): ");
    sub_19C2CF710((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_19C2CF718((uint64_t)v8);
  }
  return sub_19C2DE594((uint64_t)a1) + a2;
}

void sub_19C2DE52C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19C2DE54C(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;

  if (*(int *)(a1 + 4) >= 1)
  {
    v2 = sub_19C2DE594(a1);
    v4 = *(_QWORD *)(v2 - 8);
    v3 = (void *)(v2 - 8);
    if (!v4)
      operator delete(v3);
  }
  return a1;
}

uint64_t sub_19C2DE594(uint64_t a1)
{
  std::string *v2;
  char v4;
  std::string v5[2];

  if (*(int *)(a1 + 4) <= 0)
  {
    sub_19C2CF5C8((uint64_t)v5, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 352);
    v2 = sub_19C2CF5E0(v5, "CHECK failed: (total_size_) > (0): ");
    sub_19C2CF710((uint64_t)&v4, (const char **)&v2->__r_.__value_.__l.__data_);
    sub_19C2CF718((uint64_t)v5);
  }
  return *(_QWORD *)(a1 + 8);
}

void sub_19C2DE604(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

int *sub_19C2DE61C(int *result, int *a2)
{
  int *v3;
  std::string *v4;
  int v5;
  void *v6;
  std::string *v7;
  const void *v8;
  char v9;
  std::string v10[2];

  v3 = result;
  if (a2 == result)
  {
    sub_19C2CF5C8((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1415);
    v4 = sub_19C2CF5E0(v10, "CHECK failed: (&other) != (this): ");
    sub_19C2CF710((uint64_t)&v9, (const char **)&v4->__r_.__value_.__l.__data_);
    result = (int *)sub_19C2CF718((uint64_t)v10);
  }
  if (*a2)
  {
    v5 = *v3;
    sub_19C2DE124(v3, *v3 + *a2);
    sub_19C2DE2D8((uint64_t)v3, *a2);
    v6 = (void *)sub_19C2DE394(v3, v5);
    if (*a2 <= 0)
    {
      sub_19C2CF5C8((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1302);
      v7 = sub_19C2CF5E0(v10, "CHECK failed: (index) < (current_size_): ");
      sub_19C2CF710((uint64_t)&v9, (const char **)&v7->__r_.__value_.__l.__data_);
      sub_19C2CF718((uint64_t)v10);
    }
    v8 = (const void *)sub_19C2DE594((uint64_t)a2);
    return (int *)memcpy(v6, v8, *a2);
  }
  return result;
}

void sub_19C2DE724(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19C2DE744(int *a1, int a2)
{
  int v2;
  _QWORD *v5;
  uint64_t v6;
  int v7;
  std::string *v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14;
  char v15;
  std::string v16[2];

  v2 = a1[1];
  if (v2 >= a2)
    return;
  if (v2 < 1)
  {
    v5 = 0;
    if (v2)
    {
LABEL_4:
      v6 = *(_QWORD *)(sub_19C2DEBB8((uint64_t)a1) - 8);
      if (a2 >= 4)
      {
        v7 = a1[1];
        if (v7 > 0x3FFFFFFF)
        {
          if (a2 <= 0x40000000)
          {
            sub_19C2CF5C8((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1550);
            v8 = sub_19C2CF5E0(v16, "CHECK failed: (new_size) > (kRepeatedFieldUpperClampLimit): ");
            sub_19C2CF710((uint64_t)&v15, (const char **)&v8->__r_.__value_.__l.__data_);
            sub_19C2CF718((uint64_t)v16);
          }
          v9 = 0x7FFFFFFF;
          goto LABEL_16;
        }
        goto LABEL_13;
      }
      goto LABEL_11;
    }
  }
  else
  {
    v5 = (_QWORD *)(sub_19C2DEBB8((uint64_t)a1) - 8);
    if (a1[1])
      goto LABEL_4;
  }
  v6 = *((_QWORD *)a1 + 1);
  if (a2 >= 4)
  {
    v7 = 0;
LABEL_13:
    v10 = 2 * v7;
    if (v10 <= a2)
      v9 = a2;
    else
      v9 = v10;
    goto LABEL_16;
  }
LABEL_11:
  v9 = 4;
LABEL_16:
  v11 = 4 * v9;
  if (v6)
  {
    v12 = (v11 + 15) & 0x7FFFFFFF8;
    if ((*(_BYTE *)(v6 + 24) & 1) != 0)
      (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(v6 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v6 + 32) + 32), MEMORY[0x1E0DE4EC8], v12);
    v13 = (_QWORD *)sub_19C2CE0C0(v6, v12);
  }
  else
  {
    v13 = operator new(v11 + 8);
  }
  *v13 = v6;
  a1[1] = v9;
  *((_QWORD *)a1 + 1) = v13 + 1;
  sub_19C2DEBB8((uint64_t)a1);
  if (*a1 >= 1)
  {
    v14 = (void *)sub_19C2DEBB8((uint64_t)a1);
    memcpy(v14, v5 + 1, 4 * *a1);
  }
  if (v5)
  {
    if (!*v5)
      operator delete(v5);
  }
}

void sub_19C2DE8E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19C2DE8FC(uint64_t a1, int a2)
{
  int v4;
  std::string *v5;
  std::string *v6;
  std::string *v7;
  std::string *v8;
  uint64_t result;
  char v10;
  std::string v11[2];

  v4 = *(_DWORD *)a1;
  if (*(_DWORD *)(a1 + 4) - *(_DWORD *)a1 < a2)
  {
    sub_19C2CF5C8((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1278);
    v5 = sub_19C2CF5E0(v11, "CHECK failed: (total_size_ - current_size_) >= (n): ");
    v6 = sub_19C2CF7B4(v5, *(_DWORD *)(a1 + 4));
    v7 = sub_19C2CF5E0(v6, ", ");
    v8 = sub_19C2CF7B4(v7, *(_DWORD *)a1);
    sub_19C2CF710((uint64_t)&v10, (const char **)&v8->__r_.__value_.__l.__data_);
    sub_19C2CF718((uint64_t)v11);
    v4 = *(_DWORD *)a1;
  }
  result = *(_QWORD *)(a1 + 8) + 4 * v4;
  *(_DWORD *)a1 = v4 + a2;
  return result;
}

void sub_19C2DE9A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19C2DE9B8(_DWORD *a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    sub_19C2CF5C8((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1322);
    v4 = sub_19C2CF5E0(v8, "CHECK failed: (index) >= (0): ");
    sub_19C2CF710((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_19C2CF718((uint64_t)v8);
  }
  if (*a1 <= a2)
  {
    sub_19C2CF5C8((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1323);
    v5 = sub_19C2CF5E0(v8, "CHECK failed: (index) < (current_size_): ");
    sub_19C2CF710((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_19C2CF718((uint64_t)v8);
  }
  return sub_19C2DEBB8((uint64_t)a1) + 4 * a2;
}

void sub_19C2DEA74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19C2DEA94(_DWORD *a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    sub_19C2CF5C8((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1301);
    v4 = sub_19C2CF5E0(v8, "CHECK failed: (index) >= (0): ");
    sub_19C2CF710((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_19C2CF718((uint64_t)v8);
  }
  if (*a1 <= a2)
  {
    sub_19C2CF5C8((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1302);
    v5 = sub_19C2CF5E0(v8, "CHECK failed: (index) < (current_size_): ");
    sub_19C2CF710((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_19C2CF718((uint64_t)v8);
  }
  return sub_19C2DEBB8((uint64_t)a1) + 4 * a2;
}

void sub_19C2DEB50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19C2DEB70(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;

  if (*(int *)(a1 + 4) >= 1)
  {
    v2 = sub_19C2DEBB8(a1);
    v4 = *(_QWORD *)(v2 - 8);
    v3 = (void *)(v2 - 8);
    if (!v4)
      operator delete(v3);
  }
  return a1;
}

uint64_t sub_19C2DEBB8(uint64_t a1)
{
  std::string *v2;
  char v4;
  std::string v5[2];

  if (*(int *)(a1 + 4) <= 0)
  {
    sub_19C2CF5C8((uint64_t)v5, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 352);
    v2 = sub_19C2CF5E0(v5, "CHECK failed: (total_size_) > (0): ");
    sub_19C2CF710((uint64_t)&v4, (const char **)&v2->__r_.__value_.__l.__data_);
    sub_19C2CF718((uint64_t)v5);
  }
  return *(_QWORD *)(a1 + 8);
}

void sub_19C2DEC28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

int *sub_19C2DEC40(int *result, int *a2)
{
  int *v3;
  std::string *v4;
  int v5;
  void *v6;
  std::string *v7;
  const void *v8;
  char v9;
  std::string v10[2];

  v3 = result;
  if (a2 == result)
  {
    sub_19C2CF5C8((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1415);
    v4 = sub_19C2CF5E0(v10, "CHECK failed: (&other) != (this): ");
    sub_19C2CF710((uint64_t)&v9, (const char **)&v4->__r_.__value_.__l.__data_);
    result = (int *)sub_19C2CF718((uint64_t)v10);
  }
  if (*a2)
  {
    v5 = *v3;
    sub_19C2DE744(v3, *v3 + *a2);
    sub_19C2DE8FC((uint64_t)v3, *a2);
    v6 = (void *)sub_19C2DE9B8(v3, v5);
    if (*a2 <= 0)
    {
      sub_19C2CF5C8((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1302);
      v7 = sub_19C2CF5E0(v10, "CHECK failed: (index) < (current_size_): ");
      sub_19C2CF710((uint64_t)&v9, (const char **)&v7->__r_.__value_.__l.__data_);
      sub_19C2CF718((uint64_t)v10);
    }
    v8 = (const void *)sub_19C2DEBB8((uint64_t)a2);
    return (int *)memcpy(v6, v8, 4 * *a2);
  }
  return result;
}

void sub_19C2DED4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19C2DED6C(int *a1, int a2)
{
  int v2;
  _QWORD *v5;
  uint64_t v6;
  int v7;
  std::string *v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14;
  char v15;
  std::string v16[2];

  v2 = a1[1];
  if (v2 >= a2)
    return;
  if (v2 < 1)
  {
    v5 = 0;
    if (v2)
    {
LABEL_4:
      v6 = *(_QWORD *)(sub_19C2DF1E0((uint64_t)a1) - 8);
      if (a2 >= 4)
      {
        v7 = a1[1];
        if (v7 > 0x3FFFFFFF)
        {
          if (a2 <= 0x40000000)
          {
            sub_19C2CF5C8((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1550);
            v8 = sub_19C2CF5E0(v16, "CHECK failed: (new_size) > (kRepeatedFieldUpperClampLimit): ");
            sub_19C2CF710((uint64_t)&v15, (const char **)&v8->__r_.__value_.__l.__data_);
            sub_19C2CF718((uint64_t)v16);
          }
          v9 = 0x7FFFFFFF;
          goto LABEL_16;
        }
        goto LABEL_13;
      }
      goto LABEL_11;
    }
  }
  else
  {
    v5 = (_QWORD *)(sub_19C2DF1E0((uint64_t)a1) - 8);
    if (a1[1])
      goto LABEL_4;
  }
  v6 = *((_QWORD *)a1 + 1);
  if (a2 >= 4)
  {
    v7 = 0;
LABEL_13:
    v10 = 2 * v7;
    if (v10 <= a2)
      v9 = a2;
    else
      v9 = v10;
    goto LABEL_16;
  }
LABEL_11:
  v9 = 4;
LABEL_16:
  v11 = 4 * v9;
  if (v6)
  {
    v12 = (v11 + 15) & 0x7FFFFFFF8;
    if ((*(_BYTE *)(v6 + 24) & 1) != 0)
      (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(v6 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v6 + 32) + 32), MEMORY[0x1E0DE4EC8], v12);
    v13 = (_QWORD *)sub_19C2CE0C0(v6, v12);
  }
  else
  {
    v13 = operator new(v11 + 8);
  }
  *v13 = v6;
  a1[1] = v9;
  *((_QWORD *)a1 + 1) = v13 + 1;
  sub_19C2DF1E0((uint64_t)a1);
  if (*a1 >= 1)
  {
    v14 = (void *)sub_19C2DF1E0((uint64_t)a1);
    memcpy(v14, v5 + 1, 4 * *a1);
  }
  if (v5)
  {
    if (!*v5)
      operator delete(v5);
  }
}

void sub_19C2DEF0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19C2DEF24(uint64_t a1, int a2)
{
  int v4;
  std::string *v5;
  std::string *v6;
  std::string *v7;
  std::string *v8;
  uint64_t result;
  char v10;
  std::string v11[2];

  v4 = *(_DWORD *)a1;
  if (*(_DWORD *)(a1 + 4) - *(_DWORD *)a1 < a2)
  {
    sub_19C2CF5C8((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1278);
    v5 = sub_19C2CF5E0(v11, "CHECK failed: (total_size_ - current_size_) >= (n): ");
    v6 = sub_19C2CF7B4(v5, *(_DWORD *)(a1 + 4));
    v7 = sub_19C2CF5E0(v6, ", ");
    v8 = sub_19C2CF7B4(v7, *(_DWORD *)a1);
    sub_19C2CF710((uint64_t)&v10, (const char **)&v8->__r_.__value_.__l.__data_);
    sub_19C2CF718((uint64_t)v11);
    v4 = *(_DWORD *)a1;
  }
  result = *(_QWORD *)(a1 + 8) + 4 * v4;
  *(_DWORD *)a1 = v4 + a2;
  return result;
}

void sub_19C2DEFC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19C2DEFE0(_DWORD *a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    sub_19C2CF5C8((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1322);
    v4 = sub_19C2CF5E0(v8, "CHECK failed: (index) >= (0): ");
    sub_19C2CF710((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_19C2CF718((uint64_t)v8);
  }
  if (*a1 <= a2)
  {
    sub_19C2CF5C8((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1323);
    v5 = sub_19C2CF5E0(v8, "CHECK failed: (index) < (current_size_): ");
    sub_19C2CF710((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_19C2CF718((uint64_t)v8);
  }
  return sub_19C2DF1E0((uint64_t)a1) + 4 * a2;
}

void sub_19C2DF09C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19C2DF0BC(_DWORD *a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    sub_19C2CF5C8((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1301);
    v4 = sub_19C2CF5E0(v8, "CHECK failed: (index) >= (0): ");
    sub_19C2CF710((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_19C2CF718((uint64_t)v8);
  }
  if (*a1 <= a2)
  {
    sub_19C2CF5C8((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1302);
    v5 = sub_19C2CF5E0(v8, "CHECK failed: (index) < (current_size_): ");
    sub_19C2CF710((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_19C2CF718((uint64_t)v8);
  }
  return sub_19C2DF1E0((uint64_t)a1) + 4 * a2;
}

void sub_19C2DF178(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19C2DF198(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;

  if (*(int *)(a1 + 4) >= 1)
  {
    v2 = sub_19C2DF1E0(a1);
    v4 = *(_QWORD *)(v2 - 8);
    v3 = (void *)(v2 - 8);
    if (!v4)
      operator delete(v3);
  }
  return a1;
}

uint64_t sub_19C2DF1E0(uint64_t a1)
{
  std::string *v2;
  char v4;
  std::string v5[2];

  if (*(int *)(a1 + 4) <= 0)
  {
    sub_19C2CF5C8((uint64_t)v5, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 352);
    v2 = sub_19C2CF5E0(v5, "CHECK failed: (total_size_) > (0): ");
    sub_19C2CF710((uint64_t)&v4, (const char **)&v2->__r_.__value_.__l.__data_);
    sub_19C2CF718((uint64_t)v5);
  }
  return *(_QWORD *)(a1 + 8);
}

void sub_19C2DF250(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

int *sub_19C2DF268(int *result, int *a2)
{
  int *v3;
  std::string *v4;
  int v5;
  void *v6;
  std::string *v7;
  const void *v8;
  char v9;
  std::string v10[2];

  v3 = result;
  if (a2 == result)
  {
    sub_19C2CF5C8((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1415);
    v4 = sub_19C2CF5E0(v10, "CHECK failed: (&other) != (this): ");
    sub_19C2CF710((uint64_t)&v9, (const char **)&v4->__r_.__value_.__l.__data_);
    result = (int *)sub_19C2CF718((uint64_t)v10);
  }
  if (*a2)
  {
    v5 = *v3;
    sub_19C2DED6C(v3, *v3 + *a2);
    sub_19C2DEF24((uint64_t)v3, *a2);
    v6 = (void *)sub_19C2DEFE0(v3, v5);
    if (*a2 <= 0)
    {
      sub_19C2CF5C8((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1302);
      v7 = sub_19C2CF5E0(v10, "CHECK failed: (index) < (current_size_): ");
      sub_19C2CF710((uint64_t)&v9, (const char **)&v7->__r_.__value_.__l.__data_);
      sub_19C2CF718((uint64_t)v10);
    }
    v8 = (const void *)sub_19C2DF1E0((uint64_t)a2);
    return (int *)memcpy(v6, v8, 4 * *a2);
  }
  return result;
}

void sub_19C2DF374(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19C2DF394(int *a1, int a2)
{
  int v2;
  _QWORD *v5;
  uint64_t v6;
  int v7;
  std::string *v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14;
  char v15;
  std::string v16[2];

  v2 = a1[1];
  if (v2 >= a2)
    return;
  if (v2 < 1)
  {
    v5 = 0;
    if (v2)
    {
LABEL_4:
      v6 = *(_QWORD *)(sub_19C2DF808((uint64_t)a1) - 8);
      if (a2 >= 4)
      {
        v7 = a1[1];
        if (v7 > 0x3FFFFFFF)
        {
          if (a2 <= 0x40000000)
          {
            sub_19C2CF5C8((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1550);
            v8 = sub_19C2CF5E0(v16, "CHECK failed: (new_size) > (kRepeatedFieldUpperClampLimit): ");
            sub_19C2CF710((uint64_t)&v15, (const char **)&v8->__r_.__value_.__l.__data_);
            sub_19C2CF718((uint64_t)v16);
          }
          v9 = 0x7FFFFFFF;
          goto LABEL_16;
        }
        goto LABEL_13;
      }
      goto LABEL_11;
    }
  }
  else
  {
    v5 = (_QWORD *)(sub_19C2DF808((uint64_t)a1) - 8);
    if (a1[1])
      goto LABEL_4;
  }
  v6 = *((_QWORD *)a1 + 1);
  if (a2 >= 4)
  {
    v7 = 0;
LABEL_13:
    v10 = 2 * v7;
    if (v10 <= a2)
      v9 = a2;
    else
      v9 = v10;
    goto LABEL_16;
  }
LABEL_11:
  v9 = 4;
LABEL_16:
  v11 = 8 * v9;
  if (v6)
  {
    v12 = (v11 + 15) & 0xFFFFFFFF8;
    if ((*(_BYTE *)(v6 + 24) & 1) != 0)
      (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(v6 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v6 + 32) + 32), MEMORY[0x1E0DE4EC8], v12);
    v13 = (_QWORD *)sub_19C2CE0C0(v6, v12);
  }
  else
  {
    v13 = operator new(v11 + 8);
  }
  *v13 = v6;
  a1[1] = v9;
  *((_QWORD *)a1 + 1) = v13 + 1;
  sub_19C2DF808((uint64_t)a1);
  if (*a1 >= 1)
  {
    v14 = (void *)sub_19C2DF808((uint64_t)a1);
    memcpy(v14, v5 + 1, 8 * *a1);
  }
  if (v5)
  {
    if (!*v5)
      operator delete(v5);
  }
}

void sub_19C2DF534(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19C2DF54C(uint64_t a1, int a2)
{
  int v4;
  std::string *v5;
  std::string *v6;
  std::string *v7;
  std::string *v8;
  uint64_t result;
  char v10;
  std::string v11[2];

  v4 = *(_DWORD *)a1;
  if (*(_DWORD *)(a1 + 4) - *(_DWORD *)a1 < a2)
  {
    sub_19C2CF5C8((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1278);
    v5 = sub_19C2CF5E0(v11, "CHECK failed: (total_size_ - current_size_) >= (n): ");
    v6 = sub_19C2CF7B4(v5, *(_DWORD *)(a1 + 4));
    v7 = sub_19C2CF5E0(v6, ", ");
    v8 = sub_19C2CF7B4(v7, *(_DWORD *)a1);
    sub_19C2CF710((uint64_t)&v10, (const char **)&v8->__r_.__value_.__l.__data_);
    sub_19C2CF718((uint64_t)v11);
    v4 = *(_DWORD *)a1;
  }
  result = *(_QWORD *)(a1 + 8) + 8 * v4;
  *(_DWORD *)a1 = v4 + a2;
  return result;
}

void sub_19C2DF5F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19C2DF608(_DWORD *a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    sub_19C2CF5C8((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1322);
    v4 = sub_19C2CF5E0(v8, "CHECK failed: (index) >= (0): ");
    sub_19C2CF710((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_19C2CF718((uint64_t)v8);
  }
  if (*a1 <= a2)
  {
    sub_19C2CF5C8((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1323);
    v5 = sub_19C2CF5E0(v8, "CHECK failed: (index) < (current_size_): ");
    sub_19C2CF710((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_19C2CF718((uint64_t)v8);
  }
  return sub_19C2DF808((uint64_t)a1) + 8 * a2;
}

void sub_19C2DF6C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19C2DF6E4(_DWORD *a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    sub_19C2CF5C8((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1301);
    v4 = sub_19C2CF5E0(v8, "CHECK failed: (index) >= (0): ");
    sub_19C2CF710((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_19C2CF718((uint64_t)v8);
  }
  if (*a1 <= a2)
  {
    sub_19C2CF5C8((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1302);
    v5 = sub_19C2CF5E0(v8, "CHECK failed: (index) < (current_size_): ");
    sub_19C2CF710((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_19C2CF718((uint64_t)v8);
  }
  return sub_19C2DF808((uint64_t)a1) + 8 * a2;
}

void sub_19C2DF7A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19C2DF7C0(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;

  if (*(int *)(a1 + 4) >= 1)
  {
    v2 = sub_19C2DF808(a1);
    v4 = *(_QWORD *)(v2 - 8);
    v3 = (void *)(v2 - 8);
    if (!v4)
      operator delete(v3);
  }
  return a1;
}

uint64_t sub_19C2DF808(uint64_t a1)
{
  std::string *v2;
  char v4;
  std::string v5[2];

  if (*(int *)(a1 + 4) <= 0)
  {
    sub_19C2CF5C8((uint64_t)v5, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 352);
    v2 = sub_19C2CF5E0(v5, "CHECK failed: (total_size_) > (0): ");
    sub_19C2CF710((uint64_t)&v4, (const char **)&v2->__r_.__value_.__l.__data_);
    sub_19C2CF718((uint64_t)v5);
  }
  return *(_QWORD *)(a1 + 8);
}

void sub_19C2DF878(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

int *sub_19C2DF890(int *result, int *a2)
{
  int *v3;
  std::string *v4;
  int v5;
  void *v6;
  std::string *v7;
  const void *v8;
  char v9;
  std::string v10[2];

  v3 = result;
  if (a2 == result)
  {
    sub_19C2CF5C8((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1415);
    v4 = sub_19C2CF5E0(v10, "CHECK failed: (&other) != (this): ");
    sub_19C2CF710((uint64_t)&v9, (const char **)&v4->__r_.__value_.__l.__data_);
    result = (int *)sub_19C2CF718((uint64_t)v10);
  }
  if (*a2)
  {
    v5 = *v3;
    sub_19C2DF394(v3, *v3 + *a2);
    sub_19C2DF54C((uint64_t)v3, *a2);
    v6 = (void *)sub_19C2DF608(v3, v5);
    if (*a2 <= 0)
    {
      sub_19C2CF5C8((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1302);
      v7 = sub_19C2CF5E0(v10, "CHECK failed: (index) < (current_size_): ");
      sub_19C2CF710((uint64_t)&v9, (const char **)&v7->__r_.__value_.__l.__data_);
      sub_19C2CF718((uint64_t)v10);
    }
    v8 = (const void *)sub_19C2DF808((uint64_t)a2);
    return (int *)memcpy(v6, v8, 8 * *a2);
  }
  return result;
}

void sub_19C2DF99C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19C2DF9BC(int *a1, int a2)
{
  int v2;
  _QWORD *v5;
  uint64_t v6;
  int v7;
  std::string *v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14;
  char v15;
  std::string v16[2];

  v2 = a1[1];
  if (v2 >= a2)
    return;
  if (v2 < 1)
  {
    v5 = 0;
    if (v2)
    {
LABEL_4:
      v6 = *(_QWORD *)(sub_19C2DFE30((uint64_t)a1) - 8);
      if (a2 >= 4)
      {
        v7 = a1[1];
        if (v7 > 0x3FFFFFFF)
        {
          if (a2 <= 0x40000000)
          {
            sub_19C2CF5C8((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1550);
            v8 = sub_19C2CF5E0(v16, "CHECK failed: (new_size) > (kRepeatedFieldUpperClampLimit): ");
            sub_19C2CF710((uint64_t)&v15, (const char **)&v8->__r_.__value_.__l.__data_);
            sub_19C2CF718((uint64_t)v16);
          }
          v9 = 0x7FFFFFFF;
          goto LABEL_16;
        }
        goto LABEL_13;
      }
      goto LABEL_11;
    }
  }
  else
  {
    v5 = (_QWORD *)(sub_19C2DFE30((uint64_t)a1) - 8);
    if (a1[1])
      goto LABEL_4;
  }
  v6 = *((_QWORD *)a1 + 1);
  if (a2 >= 4)
  {
    v7 = 0;
LABEL_13:
    v10 = 2 * v7;
    if (v10 <= a2)
      v9 = a2;
    else
      v9 = v10;
    goto LABEL_16;
  }
LABEL_11:
  v9 = 4;
LABEL_16:
  v11 = 8 * v9;
  if (v6)
  {
    v12 = (v11 + 15) & 0xFFFFFFFF8;
    if ((*(_BYTE *)(v6 + 24) & 1) != 0)
      (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(v6 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v6 + 32) + 32), MEMORY[0x1E0DE4EC8], v12);
    v13 = (_QWORD *)sub_19C2CE0C0(v6, v12);
  }
  else
  {
    v13 = operator new(v11 + 8);
  }
  *v13 = v6;
  a1[1] = v9;
  *((_QWORD *)a1 + 1) = v13 + 1;
  sub_19C2DFE30((uint64_t)a1);
  if (*a1 >= 1)
  {
    v14 = (void *)sub_19C2DFE30((uint64_t)a1);
    memcpy(v14, v5 + 1, 8 * *a1);
  }
  if (v5)
  {
    if (!*v5)
      operator delete(v5);
  }
}

void sub_19C2DFB5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19C2DFB74(uint64_t a1, int a2)
{
  int v4;
  std::string *v5;
  std::string *v6;
  std::string *v7;
  std::string *v8;
  uint64_t result;
  char v10;
  std::string v11[2];

  v4 = *(_DWORD *)a1;
  if (*(_DWORD *)(a1 + 4) - *(_DWORD *)a1 < a2)
  {
    sub_19C2CF5C8((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1278);
    v5 = sub_19C2CF5E0(v11, "CHECK failed: (total_size_ - current_size_) >= (n): ");
    v6 = sub_19C2CF7B4(v5, *(_DWORD *)(a1 + 4));
    v7 = sub_19C2CF5E0(v6, ", ");
    v8 = sub_19C2CF7B4(v7, *(_DWORD *)a1);
    sub_19C2CF710((uint64_t)&v10, (const char **)&v8->__r_.__value_.__l.__data_);
    sub_19C2CF718((uint64_t)v11);
    v4 = *(_DWORD *)a1;
  }
  result = *(_QWORD *)(a1 + 8) + 8 * v4;
  *(_DWORD *)a1 = v4 + a2;
  return result;
}

void sub_19C2DFC18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19C2DFC30(_DWORD *a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    sub_19C2CF5C8((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1322);
    v4 = sub_19C2CF5E0(v8, "CHECK failed: (index) >= (0): ");
    sub_19C2CF710((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_19C2CF718((uint64_t)v8);
  }
  if (*a1 <= a2)
  {
    sub_19C2CF5C8((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1323);
    v5 = sub_19C2CF5E0(v8, "CHECK failed: (index) < (current_size_): ");
    sub_19C2CF710((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_19C2CF718((uint64_t)v8);
  }
  return sub_19C2DFE30((uint64_t)a1) + 8 * a2;
}

void sub_19C2DFCEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19C2DFD0C(_DWORD *a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    sub_19C2CF5C8((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1301);
    v4 = sub_19C2CF5E0(v8, "CHECK failed: (index) >= (0): ");
    sub_19C2CF710((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_19C2CF718((uint64_t)v8);
  }
  if (*a1 <= a2)
  {
    sub_19C2CF5C8((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1302);
    v5 = sub_19C2CF5E0(v8, "CHECK failed: (index) < (current_size_): ");
    sub_19C2CF710((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_19C2CF718((uint64_t)v8);
  }
  return sub_19C2DFE30((uint64_t)a1) + 8 * a2;
}

void sub_19C2DFDC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19C2DFDE8(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;

  if (*(int *)(a1 + 4) >= 1)
  {
    v2 = sub_19C2DFE30(a1);
    v4 = *(_QWORD *)(v2 - 8);
    v3 = (void *)(v2 - 8);
    if (!v4)
      operator delete(v3);
  }
  return a1;
}

uint64_t sub_19C2DFE30(uint64_t a1)
{
  std::string *v2;
  char v4;
  std::string v5[2];

  if (*(int *)(a1 + 4) <= 0)
  {
    sub_19C2CF5C8((uint64_t)v5, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 352);
    v2 = sub_19C2CF5E0(v5, "CHECK failed: (total_size_) > (0): ");
    sub_19C2CF710((uint64_t)&v4, (const char **)&v2->__r_.__value_.__l.__data_);
    sub_19C2CF718((uint64_t)v5);
  }
  return *(_QWORD *)(a1 + 8);
}

void sub_19C2DFEA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

int *sub_19C2DFEB8(int *result, int *a2)
{
  int *v3;
  std::string *v4;
  int v5;
  void *v6;
  std::string *v7;
  const void *v8;
  char v9;
  std::string v10[2];

  v3 = result;
  if (a2 == result)
  {
    sub_19C2CF5C8((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1415);
    v4 = sub_19C2CF5E0(v10, "CHECK failed: (&other) != (this): ");
    sub_19C2CF710((uint64_t)&v9, (const char **)&v4->__r_.__value_.__l.__data_);
    result = (int *)sub_19C2CF718((uint64_t)v10);
  }
  if (*a2)
  {
    v5 = *v3;
    sub_19C2DF9BC(v3, *v3 + *a2);
    sub_19C2DFB74((uint64_t)v3, *a2);
    v6 = (void *)sub_19C2DFC30(v3, v5);
    if (*a2 <= 0)
    {
      sub_19C2CF5C8((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1302);
      v7 = sub_19C2CF5E0(v10, "CHECK failed: (index) < (current_size_): ");
      sub_19C2CF710((uint64_t)&v9, (const char **)&v7->__r_.__value_.__l.__data_);
      sub_19C2CF718((uint64_t)v10);
    }
    v8 = (const void *)sub_19C2DFE30((uint64_t)a2);
    return (int *)memcpy(v6, v8, 8 * *a2);
  }
  return result;
}

void sub_19C2DFFC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19C2DFFE4(int *a1, int a2)
{
  int v2;
  _QWORD *v5;
  uint64_t v6;
  int v7;
  std::string *v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14;
  char v15;
  std::string v16[2];

  v2 = a1[1];
  if (v2 >= a2)
    return;
  if (v2 < 1)
  {
    v5 = 0;
    if (v2)
    {
LABEL_4:
      v6 = *(_QWORD *)(sub_19C2E0458((uint64_t)a1) - 8);
      if (a2 >= 4)
      {
        v7 = a1[1];
        if (v7 > 0x3FFFFFFF)
        {
          if (a2 <= 0x40000000)
          {
            sub_19C2CF5C8((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1550);
            v8 = sub_19C2CF5E0(v16, "CHECK failed: (new_size) > (kRepeatedFieldUpperClampLimit): ");
            sub_19C2CF710((uint64_t)&v15, (const char **)&v8->__r_.__value_.__l.__data_);
            sub_19C2CF718((uint64_t)v16);
          }
          v9 = 0x7FFFFFFF;
          goto LABEL_16;
        }
        goto LABEL_13;
      }
      goto LABEL_11;
    }
  }
  else
  {
    v5 = (_QWORD *)(sub_19C2E0458((uint64_t)a1) - 8);
    if (a1[1])
      goto LABEL_4;
  }
  v6 = *((_QWORD *)a1 + 1);
  if (a2 >= 4)
  {
    v7 = 0;
LABEL_13:
    v10 = 2 * v7;
    if (v10 <= a2)
      v9 = a2;
    else
      v9 = v10;
    goto LABEL_16;
  }
LABEL_11:
  v9 = 4;
LABEL_16:
  v11 = 4 * v9;
  if (v6)
  {
    v12 = (v11 + 15) & 0x7FFFFFFF8;
    if ((*(_BYTE *)(v6 + 24) & 1) != 0)
      (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(v6 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v6 + 32) + 32), MEMORY[0x1E0DE4EC8], v12);
    v13 = (_QWORD *)sub_19C2CE0C0(v6, v12);
  }
  else
  {
    v13 = operator new(v11 + 8);
  }
  *v13 = v6;
  a1[1] = v9;
  *((_QWORD *)a1 + 1) = v13 + 1;
  sub_19C2E0458((uint64_t)a1);
  if (*a1 >= 1)
  {
    v14 = (void *)sub_19C2E0458((uint64_t)a1);
    memcpy(v14, v5 + 1, 4 * *a1);
  }
  if (v5)
  {
    if (!*v5)
      operator delete(v5);
  }
}

void sub_19C2E0184(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19C2E019C(uint64_t a1, int a2)
{
  int v4;
  std::string *v5;
  std::string *v6;
  std::string *v7;
  std::string *v8;
  uint64_t result;
  char v10;
  std::string v11[2];

  v4 = *(_DWORD *)a1;
  if (*(_DWORD *)(a1 + 4) - *(_DWORD *)a1 < a2)
  {
    sub_19C2CF5C8((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1278);
    v5 = sub_19C2CF5E0(v11, "CHECK failed: (total_size_ - current_size_) >= (n): ");
    v6 = sub_19C2CF7B4(v5, *(_DWORD *)(a1 + 4));
    v7 = sub_19C2CF5E0(v6, ", ");
    v8 = sub_19C2CF7B4(v7, *(_DWORD *)a1);
    sub_19C2CF710((uint64_t)&v10, (const char **)&v8->__r_.__value_.__l.__data_);
    sub_19C2CF718((uint64_t)v11);
    v4 = *(_DWORD *)a1;
  }
  result = *(_QWORD *)(a1 + 8) + 4 * v4;
  *(_DWORD *)a1 = v4 + a2;
  return result;
}

void sub_19C2E0240(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19C2E0258(_DWORD *a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    sub_19C2CF5C8((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1322);
    v4 = sub_19C2CF5E0(v8, "CHECK failed: (index) >= (0): ");
    sub_19C2CF710((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_19C2CF718((uint64_t)v8);
  }
  if (*a1 <= a2)
  {
    sub_19C2CF5C8((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1323);
    v5 = sub_19C2CF5E0(v8, "CHECK failed: (index) < (current_size_): ");
    sub_19C2CF710((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_19C2CF718((uint64_t)v8);
  }
  return sub_19C2E0458((uint64_t)a1) + 4 * a2;
}

void sub_19C2E0314(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19C2E0334(_DWORD *a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    sub_19C2CF5C8((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1301);
    v4 = sub_19C2CF5E0(v8, "CHECK failed: (index) >= (0): ");
    sub_19C2CF710((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_19C2CF718((uint64_t)v8);
  }
  if (*a1 <= a2)
  {
    sub_19C2CF5C8((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1302);
    v5 = sub_19C2CF5E0(v8, "CHECK failed: (index) < (current_size_): ");
    sub_19C2CF710((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_19C2CF718((uint64_t)v8);
  }
  return sub_19C2E0458((uint64_t)a1) + 4 * a2;
}

void sub_19C2E03F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19C2E0410(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;

  if (*(int *)(a1 + 4) >= 1)
  {
    v2 = sub_19C2E0458(a1);
    v4 = *(_QWORD *)(v2 - 8);
    v3 = (void *)(v2 - 8);
    if (!v4)
      operator delete(v3);
  }
  return a1;
}

uint64_t sub_19C2E0458(uint64_t a1)
{
  std::string *v2;
  char v4;
  std::string v5[2];

  if (*(int *)(a1 + 4) <= 0)
  {
    sub_19C2CF5C8((uint64_t)v5, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 352);
    v2 = sub_19C2CF5E0(v5, "CHECK failed: (total_size_) > (0): ");
    sub_19C2CF710((uint64_t)&v4, (const char **)&v2->__r_.__value_.__l.__data_);
    sub_19C2CF718((uint64_t)v5);
  }
  return *(_QWORD *)(a1 + 8);
}

void sub_19C2E04C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

int *sub_19C2E04E0(int *result, int *a2)
{
  int *v3;
  std::string *v4;
  int v5;
  void *v6;
  std::string *v7;
  const void *v8;
  char v9;
  std::string v10[2];

  v3 = result;
  if (a2 == result)
  {
    sub_19C2CF5C8((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1415);
    v4 = sub_19C2CF5E0(v10, "CHECK failed: (&other) != (this): ");
    sub_19C2CF710((uint64_t)&v9, (const char **)&v4->__r_.__value_.__l.__data_);
    result = (int *)sub_19C2CF718((uint64_t)v10);
  }
  if (*a2)
  {
    v5 = *v3;
    sub_19C2DFFE4(v3, *v3 + *a2);
    sub_19C2E019C((uint64_t)v3, *a2);
    v6 = (void *)sub_19C2E0258(v3, v5);
    if (*a2 <= 0)
    {
      sub_19C2CF5C8((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1302);
      v7 = sub_19C2CF5E0(v10, "CHECK failed: (index) < (current_size_): ");
      sub_19C2CF710((uint64_t)&v9, (const char **)&v7->__r_.__value_.__l.__data_);
      sub_19C2CF718((uint64_t)v10);
    }
    v8 = (const void *)sub_19C2E0458((uint64_t)a2);
    return (int *)memcpy(v6, v8, 4 * *a2);
  }
  return result;
}

void sub_19C2E05EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19C2E060C(int *a1, int a2)
{
  int v2;
  _QWORD *v5;
  uint64_t v6;
  int v7;
  std::string *v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14;
  char v15;
  std::string v16[2];

  v2 = a1[1];
  if (v2 >= a2)
    return;
  if (v2 < 1)
  {
    v5 = 0;
    if (v2)
    {
LABEL_4:
      v6 = *(_QWORD *)(sub_19C2E0A80((uint64_t)a1) - 8);
      if (a2 >= 4)
      {
        v7 = a1[1];
        if (v7 > 0x3FFFFFFF)
        {
          if (a2 <= 0x40000000)
          {
            sub_19C2CF5C8((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1550);
            v8 = sub_19C2CF5E0(v16, "CHECK failed: (new_size) > (kRepeatedFieldUpperClampLimit): ");
            sub_19C2CF710((uint64_t)&v15, (const char **)&v8->__r_.__value_.__l.__data_);
            sub_19C2CF718((uint64_t)v16);
          }
          v9 = 0x7FFFFFFF;
          goto LABEL_16;
        }
        goto LABEL_13;
      }
      goto LABEL_11;
    }
  }
  else
  {
    v5 = (_QWORD *)(sub_19C2E0A80((uint64_t)a1) - 8);
    if (a1[1])
      goto LABEL_4;
  }
  v6 = *((_QWORD *)a1 + 1);
  if (a2 >= 4)
  {
    v7 = 0;
LABEL_13:
    v10 = 2 * v7;
    if (v10 <= a2)
      v9 = a2;
    else
      v9 = v10;
    goto LABEL_16;
  }
LABEL_11:
  v9 = 4;
LABEL_16:
  v11 = 8 * v9;
  if (v6)
  {
    v12 = (v11 + 15) & 0xFFFFFFFF8;
    if ((*(_BYTE *)(v6 + 24) & 1) != 0)
      (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(v6 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v6 + 32) + 32), MEMORY[0x1E0DE4EC8], v12);
    v13 = (_QWORD *)sub_19C2CE0C0(v6, v12);
  }
  else
  {
    v13 = operator new(v11 + 8);
  }
  *v13 = v6;
  a1[1] = v9;
  *((_QWORD *)a1 + 1) = v13 + 1;
  sub_19C2E0A80((uint64_t)a1);
  if (*a1 >= 1)
  {
    v14 = (void *)sub_19C2E0A80((uint64_t)a1);
    memcpy(v14, v5 + 1, 8 * *a1);
  }
  if (v5)
  {
    if (!*v5)
      operator delete(v5);
  }
}

void sub_19C2E07AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19C2E07C4(uint64_t a1, int a2)
{
  int v4;
  std::string *v5;
  std::string *v6;
  std::string *v7;
  std::string *v8;
  uint64_t result;
  char v10;
  std::string v11[2];

  v4 = *(_DWORD *)a1;
  if (*(_DWORD *)(a1 + 4) - *(_DWORD *)a1 < a2)
  {
    sub_19C2CF5C8((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1278);
    v5 = sub_19C2CF5E0(v11, "CHECK failed: (total_size_ - current_size_) >= (n): ");
    v6 = sub_19C2CF7B4(v5, *(_DWORD *)(a1 + 4));
    v7 = sub_19C2CF5E0(v6, ", ");
    v8 = sub_19C2CF7B4(v7, *(_DWORD *)a1);
    sub_19C2CF710((uint64_t)&v10, (const char **)&v8->__r_.__value_.__l.__data_);
    sub_19C2CF718((uint64_t)v11);
    v4 = *(_DWORD *)a1;
  }
  result = *(_QWORD *)(a1 + 8) + 8 * v4;
  *(_DWORD *)a1 = v4 + a2;
  return result;
}

void sub_19C2E0868(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19C2E0880(_DWORD *a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    sub_19C2CF5C8((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1322);
    v4 = sub_19C2CF5E0(v8, "CHECK failed: (index) >= (0): ");
    sub_19C2CF710((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_19C2CF718((uint64_t)v8);
  }
  if (*a1 <= a2)
  {
    sub_19C2CF5C8((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1323);
    v5 = sub_19C2CF5E0(v8, "CHECK failed: (index) < (current_size_): ");
    sub_19C2CF710((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_19C2CF718((uint64_t)v8);
  }
  return sub_19C2E0A80((uint64_t)a1) + 8 * a2;
}

void sub_19C2E093C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19C2E095C(_DWORD *a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    sub_19C2CF5C8((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1301);
    v4 = sub_19C2CF5E0(v8, "CHECK failed: (index) >= (0): ");
    sub_19C2CF710((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_19C2CF718((uint64_t)v8);
  }
  if (*a1 <= a2)
  {
    sub_19C2CF5C8((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1302);
    v5 = sub_19C2CF5E0(v8, "CHECK failed: (index) < (current_size_): ");
    sub_19C2CF710((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_19C2CF718((uint64_t)v8);
  }
  return sub_19C2E0A80((uint64_t)a1) + 8 * a2;
}

void sub_19C2E0A18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19C2E0A38(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;

  if (*(int *)(a1 + 4) >= 1)
  {
    v2 = sub_19C2E0A80(a1);
    v4 = *(_QWORD *)(v2 - 8);
    v3 = (void *)(v2 - 8);
    if (!v4)
      operator delete(v3);
  }
  return a1;
}

uint64_t sub_19C2E0A80(uint64_t a1)
{
  std::string *v2;
  char v4;
  std::string v5[2];

  if (*(int *)(a1 + 4) <= 0)
  {
    sub_19C2CF5C8((uint64_t)v5, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 352);
    v2 = sub_19C2CF5E0(v5, "CHECK failed: (total_size_) > (0): ");
    sub_19C2CF710((uint64_t)&v4, (const char **)&v2->__r_.__value_.__l.__data_);
    sub_19C2CF718((uint64_t)v5);
  }
  return *(_QWORD *)(a1 + 8);
}

void sub_19C2E0AF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

int *sub_19C2E0B08(int *result, int *a2)
{
  int *v3;
  std::string *v4;
  int v5;
  void *v6;
  std::string *v7;
  const void *v8;
  char v9;
  std::string v10[2];

  v3 = result;
  if (a2 == result)
  {
    sub_19C2CF5C8((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1415);
    v4 = sub_19C2CF5E0(v10, "CHECK failed: (&other) != (this): ");
    sub_19C2CF710((uint64_t)&v9, (const char **)&v4->__r_.__value_.__l.__data_);
    result = (int *)sub_19C2CF718((uint64_t)v10);
  }
  if (*a2)
  {
    v5 = *v3;
    sub_19C2E060C(v3, *v3 + *a2);
    sub_19C2E07C4((uint64_t)v3, *a2);
    v6 = (void *)sub_19C2E0880(v3, v5);
    if (*a2 <= 0)
    {
      sub_19C2CF5C8((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1302);
      v7 = sub_19C2CF5E0(v10, "CHECK failed: (index) < (current_size_): ");
      sub_19C2CF710((uint64_t)&v9, (const char **)&v7->__r_.__value_.__l.__data_);
      sub_19C2CF718((uint64_t)v10);
    }
    v8 = (const void *)sub_19C2E0A80((uint64_t)a2);
    return (int *)memcpy(v6, v8, 8 * *a2);
  }
  return result;
}

void sub_19C2E0C14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_19C2CF718((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_19C2E0C34(uint64_t *a1)
{
  sub_19C2E0C5C(a1);
  return sub_19C2C1640(a1);
}

void sub_19C2E0C5C(_QWORD *a1)
{
  unsigned int *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (unsigned int *)a1[2];
  if (v2 && !*a1)
  {
    v3 = (uint64_t *)(v2 + 2);
    v4 = *v2;
    if ((int)v4 >= 1)
    {
      do
      {
        v5 = *v3;
        if (*v3)
        {
          if (*(char *)(v5 + 23) < 0)
            operator delete(*(void **)v5);
          MEMORY[0x1A1AD355C](v5, 0x1012C40EC159624);
        }
        ++v3;
        --v4;
      }
      while (v4);
      v2 = (unsigned int *)a1[2];
    }
    operator delete(v2);
  }
  a1[2] = 0;
}

uint64_t sub_19C2E0CEC(uint64_t result, int a2)
{
  int v2;
  BOOL v3;
  int v4;

  v2 = *(_DWORD *)(result + 8);
  v3 = __OFSUB__(a2, v2);
  v4 = a2 - v2;
  if (!((v4 < 0) ^ v3 | (v4 == 0)))
    return sub_19C2E0D00((uint64_t *)result, v4);
  return result;
}

uint64_t sub_19C2E0D00(uint64_t *a1, int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int *v5;
  uint64_t v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  uint64_t v13;

  v2 = *((_DWORD *)a1 + 2);
  v3 = *((_DWORD *)a1 + 3);
  v4 = v2 + a2;
  v5 = (unsigned int *)a1[2];
  if (v3 < v2 + a2)
  {
    v7 = *a1;
    v8 = 2 * v3;
    if (2 * v3 <= v4)
      v8 = v4;
    if (v8 <= 4)
      v9 = 4;
    else
      v9 = v8;
    v10 = 8 * v9;
    if (v7)
    {
      v11 = (v10 + 15) & 0x7FFFFFFF8;
      if ((*(_BYTE *)(v7 + 24) & 1) != 0)
        (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(v7 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v7 + 32) + 32), MEMORY[0x1E0DE4EC8], v11);
      v12 = (unsigned int *)sub_19C2CE0C0(v7, v11);
    }
    else
    {
      v12 = (unsigned int *)operator new(v10 + 8);
    }
    a1[2] = (uint64_t)v12;
    *((_DWORD *)a1 + 3) = v9;
    if (v5 && (v13 = *v5, (int)v13 >= 1))
    {
      memcpy(v12 + 2, v5 + 2, 8 * v13);
      v12 = (unsigned int *)a1[2];
      *v12 = *v5;
      if (!v7)
        goto LABEL_17;
    }
    else
    {
      *v12 = 0;
      if (!v7)
      {
LABEL_17:
        operator delete(v5);
        v12 = (unsigned int *)a1[2];
      }
    }
    v2 = *((_DWORD *)a1 + 2);
    v5 = v12;
  }
  return (uint64_t)&v5[2 * v2 + 2];
}

uint64_t sub_19C2E0E10(uint64_t a1, _DWORD *a2, unint64_t a3)
{
  uint64_t *v6;
  _DWORD *v8;

  *(_QWORD *)a1 = &off_1E3D34098;
  *(_QWORD *)(a1 + 16) = &off_1E3D344E0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = &off_1E3D344E0;
  *(_DWORD *)(a1 + 40) = 0;
  v6 = (uint64_t *)(a1 + 88);
  sub_19C2CD3C0((_QWORD *)(a1 + 88));
  sub_19C2E0EC4(a1, a2, a3, (uint64_t *)&v8);
  sub_19C2CD5DC(v6, &v8);
  sub_19C2CD3C8((uint64_t *)&v8);
  return a1;
}

void sub_19C2E0EA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t *v2;
  va_list va;

  va_start(va, a2);
  sub_19C2CD3C8((uint64_t *)va);
  sub_19C2CD3C8(v2);
  _Unwind_Resume(a1);
}

_QWORD *sub_19C2E0EC4@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  _QWORD *result;
  int v7;
  unint64_t v8;
  uint64_t *v9;
  int v10;
  int v11;
  int v12;
  _DWORD *v13;
  unint64_t v14;

  v13 = a2;
  v14 = a3;
  v12 = 0;
  result = sub_19C29E3E0(a2, a3, &v12, a4);
  if (!*a4)
  {
    sub_19C2CD3C8(a4);
    result = sub_19C2CBA48(&v13, 4uLL, a4);
    if (!*a4)
    {
      sub_19C2CD3C8(a4);
      *(_DWORD *)(a1 + 8) = v12;
      v11 = 0;
      result = sub_19C29E3E0(v13, v14, &v11, a4);
      if (!*a4)
      {
        sub_19C2CD3C8(a4);
        result = sub_19C2CBA48(&v13, 4uLL, a4);
        if (!*a4)
        {
          sub_19C2CD3C8(a4);
          *(_DWORD *)(a1 + 24) = v11;
          v10 = 0;
          result = sub_19C29E3E0(v13, v14, &v10, a4);
          if (!*a4)
          {
            sub_19C2CD3C8(a4);
            result = sub_19C2CBA48(&v13, 4uLL, a4);
            if (!*a4)
            {
              sub_19C2CD3C8(a4);
              v7 = v10;
              *(_DWORD *)(a1 + 48) = 0;
              *(_DWORD *)(a1 + 40) = v7;
              result = sub_19C29E274(v13, v14, (_DWORD *)(a1 + 48), a4);
              if (!*a4)
              {
                sub_19C2CD3C8(a4);
                result = sub_19C2CBA48(&v13, 4uLL, a4);
                if (!*a4)
                {
                  sub_19C2CD3C8(a4);
                  *(_QWORD *)(a1 + 56) = v13;
                  v8 = sub_19C2CB9C4(*(int *)(a1 + 48), 4uLL);
                  result = sub_19C2CBA48(&v13, v8, a4);
                  if (!*a4)
                  {
                    sub_19C2CD3C8(a4);
                    *(_QWORD *)(a1 + 64) = v13;
                    result = sub_19C2CBA48(&v13, 4 * *(int *)(a1 + 48), a4);
                    if (!*a4)
                    {
                      sub_19C2CD3C8(a4);
                      *(_QWORD *)(a1 + 72) = v13;
                      result = sub_19C2CBA48(&v13, 4 * *(int *)(a1 + 48) + 20, a4);
                      if (!*a4)
                      {
                        v9 = sub_19C2CD3C8(a4);
                        *(_QWORD *)(a1 + 80) = v13;
                        return sub_19C2CD3C0(v9);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void sub_19C2E10C0()
{
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C2E10D4(uint64_t a1)
{
  return *(_DWORD *)(a1 + 8) & 1;
}

uint64_t sub_19C2E10E0(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 8) >> 1) & 1;
}

uint64_t sub_19C2E10EC(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 8) >> 2) & 1;
}

uint64_t sub_19C2E10F8(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 8) >> 3) & 1;
}

_QWORD *sub_19C2E1104(_QWORD *a1)
{
  *a1 = &off_1E3D34098;
  sub_19C2CD3C8(a1 + 11);
  return a1;
}

void sub_19C2E1134(_QWORD *a1)
{
  *a1 = &off_1E3D34098;
  sub_19C2CD3C8(a1 + 11);
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C2E1174(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

const char *sub_19C2E117C(uint64_t a1)
{
  const char *v1;

  v1 = (const char *)(*(_QWORD *)(a1 + 80) + **(unsigned int **)(a1 + 72));
  strlen(v1);
  return v1;
}

const char *sub_19C2E11B0(uint64_t a1)
{
  const char *v1;

  v1 = (const char *)(*(_QWORD *)(a1 + 80) + *(unsigned int *)(*(_QWORD *)(a1 + 72) + 4));
  strlen(v1);
  return v1;
}

const char *sub_19C2E11E4(uint64_t a1)
{
  const char *v1;

  v1 = (const char *)(*(_QWORD *)(a1 + 80) + *(unsigned int *)(*(_QWORD *)(a1 + 72) + 8));
  strlen(v1);
  return v1;
}

const char *sub_19C2E1218(uint64_t a1)
{
  const char *v1;

  v1 = (const char *)(*(_QWORD *)(a1 + 80) + *(unsigned int *)(*(_QWORD *)(a1 + 72) + 12));
  strlen(v1);
  return v1;
}

const char *sub_19C2E124C(uint64_t a1)
{
  const char *v1;

  v1 = (const char *)(*(_QWORD *)(a1 + 80) + *(unsigned int *)(*(_QWORD *)(a1 + 72) + 16));
  strlen(v1);
  return v1;
}

uint64_t sub_19C2E1280(uint64_t a1)
{
  return *(_DWORD *)(a1 + 8) & 1;
}

uint64_t sub_19C2E128C(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 8) >> 1) & 1;
}

uint64_t sub_19C2E1298(uint64_t a1)
{
  return *(_DWORD *)(a1 + 8) >> 30;
}

const char *sub_19C2E12A4(uint64_t a1, int a2)
{
  const char *v2;

  v2 = (const char *)(*(_QWORD *)(a1 + 80) + *(unsigned int *)(*(_QWORD *)(a1 + 72) + 4 * (a2 + 5)));
  strlen(v2);
  return v2;
}

float sub_19C2E12DC(uint64_t a1, int a2)
{
  return *(float *)(*(_QWORD *)(a1 + 64) + 4 * a2);
}

BOOL sub_19C2E12E8(uint64_t a1, int a2)
{
  return *(_BYTE *)(*(_QWORD *)(a1 + 56) + a2) == 1;
}

BOOL sub_19C2E12FC(uint64_t a1, int a2)
{
  return *(_BYTE *)(*(_QWORD *)(a1 + 56) + a2) == 2;
}

BOOL sub_19C2E1310(uint64_t a1, int a2)
{
  return *(_BYTE *)(*(_QWORD *)(a1 + 56) + a2) == 3;
}

BOOL sub_19C2E1324(uint64_t a1, int a2)
{
  return *(_BYTE *)(*(_QWORD *)(a1 + 56) + a2) == 4;
}

BOOL sub_19C2E1338(uint64_t a1, int a2)
{
  return *(_BYTE *)(*(_QWORD *)(a1 + 56) + a2) == 5;
}

BOOL sub_19C2E134C(uint64_t a1, int a2)
{
  return *(_BYTE *)(*(_QWORD *)(a1 + 56) + a2) == 6;
}

uint64_t sub_19C2E1360(uint64_t a1)
{
  return a1 + 16;
}

uint64_t sub_19C2E1368(uint64_t a1)
{
  return a1 + 32;
}

CFStringRef sub_19C2E1370(uint64_t a1)
{
  const UInt8 *v1;
  CFIndex v2;

  v1 = (const UInt8 *)a1;
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    v2 = *(unsigned __int8 *)(a1 + 23);
    if (!*(_BYTE *)(a1 + 23))
      return &stru_1E3D3CA98;
    return CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v1, v2, 0x8000100u, 0);
  }
  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    v1 = *(const UInt8 **)a1;
    return CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v1, v2, 0x8000100u, 0);
  }
  return &stru_1E3D3CA98;
}

const char *sub_19C2E13BC(const __CFString *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  const char *result;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  int64_t v13;
  int64_t v14;
  int64_t v15;
  UniChar v16;
  int64_t v17;
  int64_t v18;
  char v19;
  UniChar buffer[64];
  CFStringRef v21;
  const UniChar *CharactersPtr;
  const char *v23;
  uint64_t v24;
  int64_t v25;
  int64_t v26;
  int64_t v27;
  CFRange v28;
  CFRange v29;

  v21 = a1;
  v24 = a2;
  v25 = a3;
  CharactersPtr = CFStringGetCharactersPtr(a1);
  if (CharactersPtr)
    result = 0;
  else
    result = CFStringGetCStringPtr(a1, 0x600u);
  v23 = result;
  v26 = 0;
  v27 = 0;
  v19 = 0;
  if (a3 >= 1)
  {
    v8 = 0;
    while ((v8 & 0x8000000000000000) == 0)
    {
      v9 = v25;
      if (v25 <= v8)
        break;
      if (CharactersPtr)
      {
        LOWORD(v10) = CharactersPtr[v24 + v8];
      }
      else if (v23)
      {
        LOWORD(v10) = v23[v24 + v8];
      }
      else
      {
        if (v27 <= v8 || (v12 = v26, v26 > v8))
        {
          v13 = v8 - 4;
          if ((unint64_t)v8 < 4)
            v13 = 0;
          if (v13 + 64 < v25)
            v9 = v13 + 64;
          v26 = v13;
          v27 = v9;
          v28.location = v24 + v13;
          v28.length = v9 - v13;
          CFStringGetCharacters(v21, v28, buffer);
          v12 = v26;
        }
        LOWORD(v10) = buffer[v8 - v12];
      }
      if ((unsigned __int16)v10 >> 10 != 54)
        goto LABEL_11;
      v14 = v8 + 1;
      v15 = v25;
      if (v25 <= v8 + 1)
        goto LABEL_11;
      if (CharactersPtr)
      {
        v16 = CharactersPtr[v24 + v14];
      }
      else if (v23)
      {
        v16 = v23[v24 + v14];
      }
      else
      {
        if (v27 <= v14 || (v17 = v26, v26 > v14))
        {
          v18 = v8 - 3;
          if ((unint64_t)v8 < 3)
            v18 = 0;
          if (v18 + 64 < v25)
            v15 = v18 + 64;
          v26 = v18;
          v27 = v15;
          v29.location = v24 + v18;
          v29.length = v15 - v18;
          CFStringGetCharacters(v21, v29, buffer);
          v17 = v26;
        }
        v16 = buffer[v14 - v17];
      }
      if (v16 >> 10 != 55)
        goto LABEL_11;
      v10 = ((unsigned __int16)v10 << 10) + v16 - 56613888;
LABEL_12:
      result = (const char *)(*(uint64_t (**)(uint64_t, uint64_t, char *))(a4 + 16))(a4, v10, &v19);
      if (!v19)
      {
        v11 = (v10 & 0xFFFF0000) != 0 ? v8 + 1 : v8;
        v8 = v11 + 1;
        if (v11 + 1 < a3)
          continue;
      }
      return result;
    }
    LOWORD(v10) = 0;
LABEL_11:
    v10 = (unsigned __int16)v10;
    goto LABEL_12;
  }
  return result;
}

void sub_19C2E15E8(const __CFURL *a1@<X0>, _QWORD *a2@<X8>)
{
  UInt8 *v4;

  v4 = (UInt8 *)operator new[]();
  CFURLGetFileSystemRepresentation(a1, 1u, v4, 1024);
  sub_19C2A6D48(a2, (char *)v4);
  JUMPOUT(0x1A1AD3538);
}

void sub_19C2E1660(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD3538](v1, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

BOOL sub_19C2E1684(const void *a1, CFURLRef fileURL, CFPropertyListFormat a3, int a4, CFErrorRef *a5)
{
  _BOOL8 v5;
  const __CFURL *PathComponent;
  __CFWriteStream *v10;
  __CFWriteStream *v11;
  CFIndex v12;
  void *v14;
  __int128 __p;
  uint64_t v16;

  v5 = 0;
  if (a1 && fileURL)
  {
    __p = 0uLL;
    v16 = 0;
    if (a4)
    {
      PathComponent = CFURLCreateCopyDeletingLastPathComponent(0, fileURL);
      sub_19C2E15E8(PathComponent, &v14);
    }
    v10 = CFWriteStreamCreateWithFile(0, fileURL);
    v11 = v10;
    if (v10)
    {
      if (CFWriteStreamOpen(v10))
      {
        v12 = CFPropertyListWrite(a1, v11, a3, 0, a5);
        CFWriteStreamClose(v11);
      }
      else
      {
        v12 = 0;
      }
      CFRelease(v11);
      v5 = v12 > 0;
    }
    else
    {
      v5 = 0;
    }
    if (SHIBYTE(v16) < 0)
      operator delete((void *)__p);
  }
  return v5;
}

void sub_19C2E18B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *sub_19C2E18F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char *v4;
  const char *v5;
  char *v6;

  if (*(char *)(a1 + 23) < 0)
  {
    sub_19C2B5238((_BYTE *)a2, *(void **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)a1;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 16);
  }
  v3 = *(unsigned __int8 *)(a2 + 23);
  if ((v3 & 0x80u) != 0)
    v3 = *(_QWORD *)(a2 + 8);
  if (!v3)
  {
    v4 = getenv("TMPDIR");
    if (v4)
      v5 = v4;
    else
      v5 = "/tmp";
    MEMORY[0x1A1AD31A8](a2, v5);
  }
  std::string::append((std::string *)a2, "/nlptemp-XXXXXX");
  if (*(char *)(a2 + 23) >= 0)
    v6 = (char *)a2;
  else
    v6 = *(char **)a2;
  return mktemp(v6);
}

void sub_19C2E199C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

CFPropertyListRef sub_19C2E19B8(const __CFURL *a1, CFErrorRef *a2)
{
  return sub_19C2E19C4(a1, 0, a2);
}

CFPropertyListRef sub_19C2E19C4(CFURLRef fileURL, int a2, CFErrorRef *a3)
{
  __CFReadStream *v6;
  __CFReadStream *v7;
  CFOptionFlags v8;
  CFPropertyListRef v9;
  CFTypeID v10;

  v6 = CFReadStreamCreateWithFile((CFAllocatorRef)*MEMORY[0x1E0C9AE00], fileURL);
  if (v6)
  {
    v7 = v6;
    if (CFReadStreamOpen(v6)
      && (!a2 ? (v8 = 0) : (v8 = 2),
          v9 = CFPropertyListCreateWithStream(0, v7, 0, v8, 0, 0),
          CFReadStreamClose(v7),
          v9))
    {
      v10 = CFGetTypeID(v9);
      if (v10 != CFDictionaryGetTypeID())
      {
        if (a3)
          *a3 = sub_19C2E1C48((uint64_t)CFSTR("Property list at URL is not a dictionary"), fileURL);
        CFRelease(v9);
        goto LABEL_15;
      }
    }
    else
    {
      if (!a3)
      {
LABEL_15:
        v9 = 0;
        goto LABEL_16;
      }
      v9 = 0;
      *a3 = sub_19C2E1C48((uint64_t)CFSTR("File at URL is not a valid property list"), fileURL);
    }
LABEL_16:
    CFRelease(v7);
    return v9;
  }
  v9 = 0;
  if (a3)
    *a3 = sub_19C2E1C48((uint64_t)CFSTR("File at URL is not readable"), fileURL);
  return v9;
}

void sub_19C2E1AFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C2E1DAC((const void **)va, 0);
  _Unwind_Resume(a1);
}

CFPropertyListRef sub_19C2E1B30(const __CFURL *a1, CFErrorRef *a2)
{
  return sub_19C2E19C4(a1, 1, a2);
}

CFLocaleRef sub_19C2E1B3C(uint64_t a1, const void *a2)
{
  const __CFString *v3;
  const __CFDictionary *ComponentsFromLocaleIdentifier;
  __CFDictionary *MutableCopy;
  const __CFString *LocaleIdentifierFromComponents;
  CFLocaleRef v7;

  v3 = (const __CFString *)MEMORY[0x1A1AD2A04]();
  ComponentsFromLocaleIdentifier = CFLocaleCreateComponentsFromLocaleIdentifier(0, v3);
  MutableCopy = CFDictionaryCreateMutableCopy(0, 3, ComponentsFromLocaleIdentifier);
  CFDictionarySetValue(MutableCopy, (const void *)*MEMORY[0x1E0C9B088], a2);
  LocaleIdentifierFromComponents = CFLocaleCreateLocaleIdentifierFromComponents(0, MutableCopy);
  v7 = CFLocaleCreate(0, LocaleIdentifierFromComponents);
  if (LocaleIdentifierFromComponents)
    CFRelease(LocaleIdentifierFromComponents);
  if (MutableCopy)
    CFRelease(MutableCopy);
  if (ComponentsFromLocaleIdentifier)
    CFRelease(ComponentsFromLocaleIdentifier);
  return v7;
}

void sub_19C2E1C04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  const void *v3;
  va_list va;
  const void *v5;
  va_list va1;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, const void *);
  va_copy(va2, va1);
  v5 = va_arg(va2, const void *);
  sub_19C2E1DE0((const void **)va, 0);
  sub_19C2E1D78((const void **)va1, 0);
  sub_19C2E1E14((const void **)va2, 0);
  _Unwind_Resume(a1);
}

CFErrorRef sub_19C2E1C48(uint64_t a1, CFURLRef anURL)
{
  CFStringRef v3;
  const __CFAllocator *v4;
  CFStringRef v5;
  __CFDictionary *Mutable;
  CFErrorRef v7;

  v3 = CFURLCopyPath(anURL);
  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v5 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("%@: %@"), a1, v3);
  Mutable = CFDictionaryCreateMutable(v4, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0C9AFE0], v5);
  v7 = CFErrorCreate(v4, CFSTR("com.apple.NLPUtils.ErrorDomain"), 0, Mutable);
  if (Mutable)
    CFRelease(Mutable);
  if (v5)
    CFRelease(v5);
  if (v3)
    CFRelease(v3);
  return v7;
}

void sub_19C2E1D38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  const void *v5;
  va_list va;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, const void *);
  sub_19C2E1DE0((const void **)va, 0);
  sub_19C2E1DE0((const void **)va1, 0);
  _Unwind_Resume(a1);
}

void sub_19C2E1D78(const void **a1, const void *a2)
{
  const void *v4;

  v4 = *a1;
  if (v4)
    CFRelease(v4);
  *a1 = a2;
}

void sub_19C2E1DAC(const void **a1, const void *a2)
{
  const void *v4;

  v4 = *a1;
  if (v4)
    CFRelease(v4);
  *a1 = a2;
}

void sub_19C2E1DE0(const void **a1, const void *a2)
{
  const void *v4;

  v4 = *a1;
  if (v4)
    CFRelease(v4);
  *a1 = a2;
}

void sub_19C2E1E14(const void **a1, const void *a2)
{
  const void *v4;

  v4 = *a1;
  if (v4)
    CFRelease(v4);
  *a1 = a2;
}

language_modeling::v1::CompletionStem *language_modeling::v1::CompletionStem::CompletionStem(language_modeling::v1::CompletionStem *this)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)(v2 + 176) = 0;
  *(_OWORD *)(v2 + 144) = 0u;
  *(_OWORD *)(v2 + 160) = 0u;
  *(_OWORD *)(v2 + 112) = 0u;
  *(_OWORD *)(v2 + 128) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)v2 = 0u;
  *(_QWORD *)this = v2;
  return this;
}

{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)(v2 + 176) = 0;
  *(_OWORD *)(v2 + 144) = 0u;
  *(_OWORD *)(v2 + 160) = 0u;
  *(_OWORD *)(v2 + 112) = 0u;
  *(_OWORD *)(v2 + 128) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)v2 = 0u;
  *(_QWORD *)this = v2;
  return this;
}

language_modeling::v1::CompletionStem *language_modeling::v1::CompletionStem::CompletionStem(language_modeling::v1::CompletionStem *this, const language_modeling::v1::CompletionStem *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)a2;
  v4 = operator new();
  sub_19C2E1F84(v4, v3);
  *(_QWORD *)this = v4;
  return this;
}

{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)a2;
  v4 = operator new();
  sub_19C2E1F84(v4, v3);
  *(_QWORD *)this = v4;
  return this;
}

void sub_19C2E1F5C(void *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD355C](v1, 0x1030C403C62F202);
  sub_19C2CDAC8(a1);
}

uint64_t sub_19C2E1F84(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  _BYTE *v5;
  int64_t v6;
  char *v7;
  char *v8;
  _BYTE *v9;
  _BYTE *v10;
  int64_t v11;
  char *v12;
  char *v13;
  __int128 v14;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  sub_19C2E2178((_QWORD *)a1, *(_QWORD *)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 5);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  sub_19C2E229C((_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 24), *(_QWORD *)(a2 + 32), (uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 5);
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  sub_19C2E229C((_QWORD *)(a1 + 48), *(_QWORD *)(a2 + 48), *(_QWORD *)(a2 + 56), (uint64_t)(*(_QWORD *)(a2 + 56) - *(_QWORD *)(a2 + 48)) >> 5);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  v5 = *(_BYTE **)(a2 + 72);
  v4 = *(_BYTE **)(a2 + 80);
  v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0)
      sub_19C2A18E8();
    v7 = (char *)operator new(v4 - v5);
    *(_QWORD *)(a1 + 72) = v7;
    *(_QWORD *)(a1 + 80) = v7;
    v8 = &v7[4 * (v6 >> 2)];
    *(_QWORD *)(a1 + 88) = v8;
    memcpy(v7, v5, v6);
    *(_QWORD *)(a1 + 80) = v8;
  }
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  v10 = *(_BYTE **)(a2 + 96);
  v9 = *(_BYTE **)(a2 + 104);
  v11 = v9 - v10;
  if (v9 != v10)
  {
    if (v11 < 0)
      sub_19C2A18E8();
    v12 = (char *)operator new(v9 - v10);
    *(_QWORD *)(a1 + 96) = v12;
    *(_QWORD *)(a1 + 104) = v12;
    v13 = &v12[4 * (v11 >> 2)];
    *(_QWORD *)(a1 + 112) = v13;
    memcpy(v12, v10, v11);
    *(_QWORD *)(a1 + 104) = v13;
  }
  v14 = *(_OWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 120) = v14;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  sub_19C2E229C((_QWORD *)(a1 + 136), *(_QWORD *)(a2 + 136), *(_QWORD *)(a2 + 144), (uint64_t)(*(_QWORD *)(a2 + 144) - *(_QWORD *)(a2 + 136)) >> 5);
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  sub_19C2E229C((_QWORD *)(a1 + 160), *(_QWORD *)(a2 + 160), *(_QWORD *)(a2 + 168), (uint64_t)(*(_QWORD *)(a2 + 168) - *(_QWORD *)(a2 + 160)) >> 5);
  return a1;
}

void sub_19C2E2108(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void **v4;
  void **v5;
  void **v6;
  void *v8;
  void *v9;

  sub_19C2E23C0(v6);
  v8 = *v5;
  if (*v5)
  {
    *(_QWORD *)(v1 + 104) = v8;
    operator delete(v8);
  }
  v9 = *v4;
  if (*v4)
  {
    *(_QWORD *)(v1 + 80) = v9;
    operator delete(v9);
  }
  sub_19C2E23C0(v3);
  sub_19C2E23C0(v2);
  sub_19C2E23C0((void **)v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_19C2E2178(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  if (a4)
  {
    if (a4 >> 59)
      sub_19C2A18E8();
    v7 = result;
    result = operator new(32 * a4);
    v8 = result;
    *v7 = result;
    v7[1] = result;
    v7[2] = &result[4 * a4];
    if (a2 != a3)
    {
      v9 = 0;
      do
      {
        v10 = &v8[v9 / 8];
        v11 = a2 + v9;
        if (*(char *)(a2 + v9 + 23) < 0)
        {
          result = sub_19C2B5238(&v8[v9 / 8], *(void **)v11, *(_QWORD *)(v11 + 8));
        }
        else
        {
          *(_OWORD *)v10 = *(_OWORD *)v11;
          v10[2] = *(_QWORD *)(v11 + 16);
        }
        LODWORD(v8[v9 / 8 + 3]) = *(_DWORD *)(a2 + v9 + 24);
        v9 += 32;
      }
      while (a2 + v9 != a3);
      v8 = (_QWORD *)((char *)v8 + v9);
    }
    v7[1] = v8;
  }
  return result;
}

void sub_19C2E2254(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_19C2E2430(&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_19C2E229C(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  if (a4)
  {
    if (a4 >> 59)
      sub_19C2A18E8();
    v7 = result;
    result = operator new(32 * a4);
    v8 = result;
    *v7 = result;
    v7[1] = result;
    v7[2] = &result[4 * a4];
    if (a2 != a3)
    {
      v9 = 0;
      do
      {
        v10 = &v8[v9 / 8];
        v11 = a2 + v9;
        if (*(char *)(a2 + v9 + 23) < 0)
        {
          result = sub_19C2B5238(&v8[v9 / 8], *(void **)v11, *(_QWORD *)(v11 + 8));
        }
        else
        {
          *(_OWORD *)v10 = *(_OWORD *)v11;
          v10[2] = *(_QWORD *)(v11 + 16);
        }
        LODWORD(v8[v9 / 8 + 3]) = *(_DWORD *)(a2 + v9 + 24);
        v9 += 32;
      }
      while (a2 + v9 != a3);
      v8 = (_QWORD *)((char *)v8 + v9);
    }
    v7[1] = v8;
  }
  return result;
}

void sub_19C2E2378(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_19C2E2430(&a9);
  _Unwind_Resume(a1);
}

void **sub_19C2E23C0(void **a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = (void **)*a1;
  if (*a1)
  {
    v3 = (void **)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*((char *)v3 - 9) < 0)
          operator delete(*(v3 - 4));
        v3 -= 4;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void ***sub_19C2E2430(void ***a1)
{
  void **v2;
  void **v3;
  void **v4;
  void *v5;

  if (!*((_BYTE *)a1 + 8))
  {
    v2 = *a1;
    v3 = (void **)**a1;
    if (v3)
    {
      v4 = (void **)v2[1];
      v5 = **a1;
      if (v4 != v3)
      {
        do
        {
          if (*((char *)v4 - 9) < 0)
            operator delete(*(v4 - 4));
          v4 -= 4;
        }
        while (v4 != v3);
        v5 = **a1;
      }
      v2[1] = v3;
      operator delete(v5);
    }
  }
  return a1;
}

void sub_19C2E2504(void *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD355C](v1, 0x1030C403C62F202);
  sub_19C2CDAC8(a1);
}

void ***language_modeling::v1::CompletionStem::operator=(void ***a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void **v6;

  v3 = *a2;
  v4 = operator new();
  sub_19C2E1F84(v4, v3);
  v5 = *a1;
  *a1 = (void **)v4;
  if (v5)
  {
    v6 = sub_19C2E25C8(v5);
    MEMORY[0x1A1AD355C](v6, 0x1030C403C62F202);
  }
  return a1;
}

void sub_19C2E25A0(void *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD355C](v1, 0x1030C403C62F202);
  sub_19C2CDAC8(a1);
}

void **sub_19C2E25C8(void **a1)
{
  void **v2;
  void **v3;
  void *v4;
  void **v5;
  void **v6;
  void *v7;
  void *v8;
  void *v9;
  void **v10;
  void **v11;
  void *v12;
  void **v13;
  void **v14;
  void *v15;
  void **v16;
  void **v17;
  void *v18;

  v2 = (void **)a1[20];
  if (v2)
  {
    v3 = (void **)a1[21];
    v4 = a1[20];
    if (v3 != v2)
    {
      do
      {
        if (*((char *)v3 - 9) < 0)
          operator delete(*(v3 - 4));
        v3 -= 4;
      }
      while (v3 != v2);
      v4 = a1[20];
    }
    a1[21] = v2;
    operator delete(v4);
  }
  v5 = (void **)a1[17];
  if (v5)
  {
    v6 = (void **)a1[18];
    v7 = a1[17];
    if (v6 != v5)
    {
      do
      {
        if (*((char *)v6 - 9) < 0)
          operator delete(*(v6 - 4));
        v6 -= 4;
      }
      while (v6 != v5);
      v7 = a1[17];
    }
    a1[18] = v5;
    operator delete(v7);
  }
  v8 = a1[12];
  if (v8)
  {
    a1[13] = v8;
    operator delete(v8);
  }
  v9 = a1[9];
  if (v9)
  {
    a1[10] = v9;
    operator delete(v9);
  }
  v10 = (void **)a1[6];
  if (v10)
  {
    v11 = (void **)a1[7];
    v12 = a1[6];
    if (v11 != v10)
    {
      do
      {
        if (*((char *)v11 - 9) < 0)
          operator delete(*(v11 - 4));
        v11 -= 4;
      }
      while (v11 != v10);
      v12 = a1[6];
    }
    a1[7] = v10;
    operator delete(v12);
  }
  v13 = (void **)a1[3];
  if (v13)
  {
    v14 = (void **)a1[4];
    v15 = a1[3];
    if (v14 != v13)
    {
      do
      {
        if (*((char *)v14 - 9) < 0)
          operator delete(*(v14 - 4));
        v14 -= 4;
      }
      while (v14 != v13);
      v15 = a1[3];
    }
    a1[4] = v13;
    operator delete(v15);
  }
  v16 = (void **)*a1;
  if (*a1)
  {
    v17 = (void **)a1[1];
    v18 = *a1;
    if (v17 != v16)
    {
      do
      {
        if (*((char *)v17 - 9) < 0)
          operator delete(*(v17 - 4));
        v17 -= 4;
      }
      while (v17 != v16);
      v18 = *a1;
    }
    a1[1] = v16;
    operator delete(v18);
  }
  return a1;
}

_QWORD *language_modeling::v1::CompletionStem::CompletionStem(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *a2 = 0;
  *result = v2;
  return result;
}

{
  uint64_t v2;

  v2 = *a2;
  *a2 = 0;
  *result = v2;
  return result;
}

void ***language_modeling::v1::CompletionStem::operator=(void ***a1, void ***a2)
{
  void **v3;
  void **v4;
  void **v5;

  v3 = *a2;
  *a2 = 0;
  v4 = *a1;
  *a1 = v3;
  if (v4)
  {
    v5 = sub_19C2E25C8(v4);
    MEMORY[0x1A1AD355C](v5, 0x1030C403C62F202);
  }
  return a1;
}

void language_modeling::v1::CompletionStem::~CompletionStem(void ***this)
{
  void **v2;
  void **v3;

  v2 = *this;
  *this = 0;
  if (v2)
  {
    v3 = sub_19C2E25C8(v2);
    MEMORY[0x1A1AD355C](v3, 0x1030C403C62F202);
  }
}

{
  void **v2;
  void **v3;

  v2 = *this;
  *this = 0;
  if (v2)
  {
    v3 = sub_19C2E25C8(v2);
    MEMORY[0x1A1AD355C](v3, 0x1030C403C62F202);
  }
}

uint64_t language_modeling::v1::CompletionStem::try_push_back(uint64_t *a1, uint64_t a2)
{
  sub_19C3D7F54(*a1, a2);
  return 1;
}

void language_modeling::v1::CompletionStem::pop_back(language_modeling::v1::CompletionStem *this)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void **v6;
  uint64_t v7;
  void **v8;
  const char *v9;
  int v10;

  v1 = *(_QWORD **)this;
  v2 = *(_QWORD *)(*(_QWORD *)this + 8);
  v3 = (v2 - **(_QWORD **)this) >> 5;
  v4 = *(_QWORD *)(*(_QWORD *)this + 32);
  if (v3 != (v4 - *(_QWORD *)(*(_QWORD *)this + 24)) >> 5)
  {
    v9 = "m_tokens.size() == m_sanitizedTokens.size()";
    v10 = 23;
    goto LABEL_12;
  }
  if (v3 != (uint64_t)(v1[7] - v1[6]) >> 5)
  {
    v9 = "m_tokens.size() == m_normalizedTokens.size()";
    v10 = 24;
LABEL_12:
    __assert_rtn("pop_back", "CompletionStemImpl.cpp", v10, v9);
  }
  v5 = (void **)(v2 - 32);
  if (*(char *)(v2 - 9) < 0)
  {
    operator delete(*v5);
    v4 = v1[4];
  }
  v1[1] = v5;
  v6 = (void **)(v4 - 32);
  if (*(char *)(v4 - 9) < 0)
    operator delete(*v6);
  v1[4] = v6;
  v7 = v1[7];
  v8 = (void **)(v7 - 32);
  if (*(char *)(v7 - 9) < 0)
    operator delete(*v8);
  v1[7] = v8;
}

void language_modeling::v1::CompletionStem::clear(uint64_t **this)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  uint64_t j;
  uint64_t v6;
  uint64_t k;

  v1 = *this;
  v2 = **this;
  for (i = (*this)[1]; i != v2; i -= 32)
  {
    if (*(char *)(i - 9) < 0)
      operator delete(*(void **)(i - 32));
  }
  v1[1] = v2;
  v4 = v1[3];
  for (j = v1[4]; j != v4; j -= 32)
  {
    if (*(char *)(j - 9) < 0)
      operator delete(*(void **)(j - 32));
  }
  v1[4] = v4;
  v6 = v1[6];
  for (k = v1[7]; k != v6; k -= 32)
  {
    if (*(char *)(k - 9) < 0)
      operator delete(*(void **)(k - 32));
  }
  v1[7] = v6;
  v1[10] = v1[9];
  v1[13] = v1[12];
  v1[15] = 0;
  v1[16] = 0;
}

uint64_t language_modeling::v1::CompletionStem::tokenSpan(language_modeling::v1::CompletionStem *this)
{
  return **(_QWORD **)this;
}

uint64_t language_modeling::v1::CompletionStem::set_unique_id(uint64_t this, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)this + 120) = a2;
  return this;
}

uint64_t language_modeling::v1::CompletionStem::set_score(uint64_t this, double a2)
{
  *(double *)(*(_QWORD *)this + 128) = a2;
  return this;
}

uint64_t language_modeling::v1::CompletionStem::unique_id(language_modeling::v1::CompletionStem *this)
{
  return *(_QWORD *)(*(_QWORD *)this + 120);
}

double language_modeling::v1::CompletionStem::score(language_modeling::v1::CompletionStem *this)
{
  return *(double *)(*(_QWORD *)this + 128);
}

void *language_modeling::v1::CompletionStem::prefix@<X0>(void *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __int128 v3;

  v2 = *(_QWORD *)(*(_QWORD *)this + 32);
  if (*(_QWORD *)(*(_QWORD *)this + 24) == v2)
  {
    *(_BYTE *)(a2 + 23) = 0;
    *(_BYTE *)a2 = 0;
  }
  else if (*(char *)(v2 - 9) < 0)
  {
    return sub_19C2B5238((_BYTE *)a2, *(void **)(v2 - 32), *(_QWORD *)(v2 - 24));
  }
  else
  {
    v3 = *(_OWORD *)(v2 - 32);
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(v2 - 16);
    *(_OWORD *)a2 = v3;
  }
  return this;
}

void language_modeling::v1::CompletionStem::string(const void ****this@<X0>, std::string *a2@<X8>)
{
  sub_19C3D8294(a2, **this, (*this)[1]);
}

language_modeling::v1::Prediction *language_modeling::v1::Prediction::Prediction(language_modeling::v1::Prediction *this, __int128 **a2)
{
  __int128 *v3;
  char *v4;

  v3 = *a2;
  v4 = (char *)operator new();
  sub_19C29769C(v4, v3);
  *(_QWORD *)this = v4;
  return this;
}

{
  __int128 *v3;
  char *v4;

  v3 = *a2;
  v4 = (char *)operator new();
  sub_19C29769C(v4, v3);
  *(_QWORD *)this = v4;
  return this;
}

void sub_19C2E2D18(void *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD355C](v1, 0x1032C4057ACE4D0);
  sub_19C2CDAC8(a1);
}

void sub_19C2E2D94(void *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD355C](v1, 0x1032C4057ACE4D0);
  sub_19C2CDAC8(a1);
}

uint64_t *language_modeling::v1::Prediction::operator=(uint64_t *a1, __int128 **a2)
{
  __int128 *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *a2;
  v4 = (char *)operator new();
  sub_19C29769C(v4, v3);
  v5 = *a1;
  *a1 = (uint64_t)v4;
  if (v5)
  {
    v6 = sub_19C296378(v5);
    MEMORY[0x1A1AD355C](v6, 0x1032C4057ACE4D0);
  }
  return a1;
}

void sub_19C2E2E30(void *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD355C](v1, 0x1032C4057ACE4D0);
  sub_19C2CDAC8(a1);
}

_QWORD *language_modeling::v1::Prediction::Prediction(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *a2 = 0;
  *result = v2;
  return result;
}

{
  uint64_t v2;

  v2 = *a2;
  *a2 = 0;
  *result = v2;
  return result;
}

{
  uint64_t v2;

  v2 = *a2;
  *a2 = 0;
  *result = v2;
  return result;
}

{
  uint64_t v2;

  v2 = *a2;
  *a2 = 0;
  *result = v2;
  return result;
}

uint64_t *language_modeling::v1::Prediction::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a2;
  *a2 = 0;
  v4 = *a1;
  *a1 = v3;
  if (v4)
  {
    v5 = sub_19C296378(v4);
    MEMORY[0x1A1AD355C](v5, 0x1032C4057ACE4D0);
  }
  return a1;
}

void language_modeling::v1::Prediction::~Prediction(language_modeling::v1::Prediction *this)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v2)
  {
    v3 = sub_19C296378(v2);
    MEMORY[0x1A1AD355C](v3, 0x1032C4057ACE4D0);
  }
}

{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v2)
  {
    v3 = sub_19C296378(v2);
    MEMORY[0x1A1AD355C](v3, 0x1032C4057ACE4D0);
  }
}

__int128 **language_modeling::v1::Prediction::string@<X0>(__int128 **this@<X0>, uint64_t a2@<X8>)
{
  __int128 *v2;
  __int128 v3;

  v2 = *this;
  if (*((char *)*this + 23) < 0)
    return (__int128 **)sub_19C2B5238((_BYTE *)a2, *(void **)v2, *((_QWORD *)v2 + 1));
  v3 = *v2;
  *(_QWORD *)(a2 + 16) = *((_QWORD *)v2 + 2);
  *(_OWORD *)a2 = v3;
  return this;
}

uint64_t *language_modeling::v1::Prediction::exactPredictionString@<X0>(uint64_t *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __int128 v3;

  v2 = *this;
  if (*(char *)(*this + 47) < 0)
    return (uint64_t *)sub_19C2B5238((_BYTE *)a2, *(void **)(v2 + 24), *(_QWORD *)(v2 + 32));
  v3 = *(_OWORD *)(v2 + 24);
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(v2 + 40);
  *(_OWORD *)a2 = v3;
  return this;
}

uint64_t language_modeling::v1::Prediction::probability(language_modeling::v1::Prediction *this)
{
  return *(_QWORD *)(*(_QWORD *)this + 48);
}

double language_modeling::v1::Prediction::log@<D0>(language_modeling::v1::Prediction *this@<X0>, char *a2@<X8>)
{
  return sub_19C2E3008(a2, *(_QWORD *)this + 48);
}

double sub_19C2E3008(char *a1, uint64_t a2)
{
  long double *v4;
  int v5;
  void **v6;
  std::string::size_type v7;
  double result;
  void **v9;
  std::string::size_type v10;
  void **v11;
  std::string::size_type v12;
  double v13;
  std::string *v14;
  __int128 v15;
  void **v16;
  std::string::size_type v17;
  std::string v18;
  void *__p[2];
  int64_t v20;
  std::string v21;

  *((_BYTE *)&v21.__r_.__value_.__s + 23) = 0;
  v21.__r_.__value_.__s.__data_[0] = 0;
  if (!*(_BYTE *)(a2 + 32))
  {
    a1[23] = 20;
    result = *(double *)"Cannot provide split";
    strcpy(a1, "Cannot provide split");
    return result;
  }
  v4 = (long double *)(a2 + 48);
  if (*(double *)(a2 + 48) > 0.0)
  {
    v5 = *(_DWORD *)(a2 + 56);
    if (v5)
    {
      if (v5 == 2)
      {
        *((_BYTE *)&v18.__r_.__value_.__s + 23) = 11;
        strcpy((char *)&v18, "static (sp)");
        sub_19C351140(__p, (uint64_t)&v18, v4);
        if (v20 >= 0)
          v6 = __p;
        else
          v6 = (void **)__p[0];
        if (v20 >= 0)
          v7 = HIBYTE(v20);
        else
          v7 = (std::string::size_type)__p[1];
      }
      else
      {
        if (v5 != 1)
          goto LABEL_27;
        *((_BYTE *)&v18.__r_.__value_.__s + 23) = 13;
        strcpy((char *)&v18, "static (word)");
        sub_19C351140(__p, (uint64_t)&v18, v4);
        if (v20 >= 0)
          v6 = __p;
        else
          v6 = (void **)__p[0];
        if (v20 >= 0)
          v7 = HIBYTE(v20);
        else
          v7 = (std::string::size_type)__p[1];
      }
    }
    else
    {
      *((_BYTE *)&v18.__r_.__value_.__s + 23) = 16;
      strcpy((char *)&v18, "static (unknown)");
      sub_19C351140(__p, (uint64_t)&v18, v4);
      if (v20 >= 0)
        v6 = __p;
      else
        v6 = (void **)__p[0];
      if (v20 >= 0)
        v7 = HIBYTE(v20);
      else
        v7 = (std::string::size_type)__p[1];
    }
    std::string::append(&v21, (const std::string::value_type *)v6, v7);
    if (SHIBYTE(v20) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v18.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_27;
    }
    else if ((SHIBYTE(v18.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_27;
    }
    operator delete(v18.__r_.__value_.__l.__data_);
  }
LABEL_27:
  if (*(double *)(a2 + 72) <= 0.0)
    goto LABEL_36;
  *((_BYTE *)&v18.__r_.__value_.__s + 23) = 10;
  strcpy((char *)&v18, "dynamic-lm");
  sub_19C351140(__p, (uint64_t)&v18, (long double *)(a2 + 72));
  if (v20 >= 0)
    v9 = __p;
  else
    v9 = (void **)__p[0];
  if (v20 >= 0)
    v10 = HIBYTE(v20);
  else
    v10 = (std::string::size_type)__p[1];
  std::string::append(&v21, (const std::string::value_type *)v9, v10);
  if (SHIBYTE(v20) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v18.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_36;
  }
  else if ((SHIBYTE(v18.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_36;
  }
  operator delete(v18.__r_.__value_.__l.__data_);
LABEL_36:
  if (*(double *)(a2 + 88) <= 0.0)
    goto LABEL_45;
  v18.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
  *(_OWORD *)&v18.__r_.__value_.__r.__words[1] = xmmword_19C46DDE0;
  strcpy(v18.__r_.__value_.__l.__data_, "transient + supplemental");
  sub_19C351140(__p, (uint64_t)&v18, (long double *)(a2 + 88));
  if (v20 >= 0)
    v11 = __p;
  else
    v11 = (void **)__p[0];
  if (v20 >= 0)
    v12 = HIBYTE(v20);
  else
    v12 = (std::string::size_type)__p[1];
  std::string::append(&v21, (const std::string::value_type *)v11, v12);
  if (SHIBYTE(v20) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v18.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_45;
  }
  else if ((SHIBYTE(v18.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_45;
  }
  operator delete(v18.__r_.__value_.__l.__data_);
LABEL_45:
  v13 = *(double *)(a2 + 96);
  if (v13 > 0.0)
  {
    std::to_string(&v18, v13);
    v14 = std::string::insert(&v18, 0, "penalty", 7uLL);
    v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v20 = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    if (v20 >= 0)
      v16 = __p;
    else
      v16 = (void **)__p[0];
    if (v20 >= 0)
      v17 = HIBYTE(v20);
    else
      v17 = (std::string::size_type)__p[1];
    std::string::append(&v21, (const std::string::value_type *)v16, v17);
    if (SHIBYTE(v20) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v18.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_54;
    }
    else if ((SHIBYTE(v18.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_54;
    }
    operator delete(v18.__r_.__value_.__l.__data_);
  }
LABEL_54:
  result = *(double *)&v21.__r_.__value_.__l.__data_;
  *(std::string *)a1 = v21;
  return result;
}

void sub_19C2E33B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0)
  {
    operator delete(__p);
    if (a14 < 0)
    {
LABEL_5:
      operator delete(a9);
      if ((a27 & 0x80000000) == 0)
        goto LABEL_6;
      goto LABEL_8;
    }
  }
  else if (a14 < 0)
  {
    goto LABEL_5;
  }
  if ((a27 & 0x80000000) == 0)
LABEL_6:
    _Unwind_Resume(a1);
LABEL_8:
  operator delete(a22);
  _Unwind_Resume(a1);
}

void sub_19C2E3454()
{
  sub_19C2B41E0("basic_string");
}

uint64_t language_modeling::v1::Prediction::tokenSpan(language_modeling::v1::Prediction *this)
{
  return *(_QWORD *)(*(_QWORD *)this + 160);
}

uint64_t language_modeling::v1::Prediction::exactTokenSpan(language_modeling::v1::Prediction *this)
{
  return *(_QWORD *)(*(_QWORD *)this + 184);
}

uint64_t language_modeling::v1::Prediction::tokenProbabilitySpan(language_modeling::v1::Prediction *this)
{
  return 0;
}

uint64_t *language_modeling::v1::Prediction::prefix@<X0>(uint64_t *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __int128 v3;

  v2 = *this;
  if (*(char *)(*this + 231) < 0)
    return (uint64_t *)sub_19C2B5238((_BYTE *)a2, *(void **)(v2 + 208), *(_QWORD *)(v2 + 216));
  v3 = *(_OWORD *)(v2 + 208);
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(v2 + 224);
  *(_OWORD *)a2 = v3;
  return this;
}

uint64_t language_modeling::v1::Prediction::contextSize(language_modeling::v1::Prediction *this)
{
  return *(_QWORD *)(*(_QWORD *)this + 232);
}

uint64_t language_modeling::v1::Prediction::source(language_modeling::v1::Prediction *this)
{
  return *(unsigned int *)(*(_QWORD *)this + 240);
}

uint64_t language_modeling::v1::Prediction::unique_id(language_modeling::v1::Prediction *this)
{
  return *(_QWORD *)(*(_QWORD *)this + 248);
}

uint64_t language_modeling::v1::convertAbsoluteTime(language_modeling::v1 *this, CFAbsoluteTime a2)
{
  CFDateRef v3;
  CFDateRef v4;
  CFTypeID v5;
  CFTypeID TypeID;
  double v7;
  void *exception;
  void *v10;

  std::chrono::system_clock::now();
  v3 = CFDateCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2);
  v4 = v3;
  if (!v3)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD3154](exception, "Could not construct");
    goto LABEL_8;
  }
  v5 = CFGetTypeID(v3);
  if (v5 != CFDateGetTypeID())
  {
    v10 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD3154](v10, "Could not construct");
    __cxa_throw(v10, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  TypeID = CFDateGetTypeID();
  if (TypeID != CFGetTypeID(v4))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD3154](exception, "Could not convert");
LABEL_8:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v7 = MEMORY[0x1A1AD28E4](v4);
  CFRelease(v4);
  return (uint64_t)((*MEMORY[0x1E0C9ADF8] + v7) * 1000000.0);
}

void sub_19C2E36A4(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, const void *a10, __int128 buf)
{
  void *v11;
  void *v14;
  NSObject *v15;
  uint64_t v16;

  if (a2)
  {
    __cxa_free_exception(v11);
    sub_19C350F70(&a10);
    if (a2 == 2)
    {
      v14 = __cxa_begin_catch(a1);
      if (qword_1EDB97228 != -1)
        dispatch_once(&qword_1EDB97228, &unk_1E3D3ABD0);
      v15 = qword_1EDB97220;
      if (os_log_type_enabled((os_log_t)qword_1EDB97220, OS_LOG_TYPE_ERROR))
      {
        v16 = (*(uint64_t (**)(void *))(*(_QWORD *)v14 + 16))(v14);
        LODWORD(buf) = 136315394;
        *(_QWORD *)((char *)&buf + 4) = "convertAbsoluteTime";
        WORD6(buf) = 2080;
        *(_QWORD *)((char *)&buf + 14) = v16;
        _os_log_error_impl(&dword_19C291000, v15, OS_LOG_TYPE_ERROR, "%s: caught unexpected exception: %s", (uint8_t *)&buf, 0x16u);
      }
      __cxa_end_catch();
      JUMPOUT(0x19C2E35E4);
    }
    sub_19C2CDAC8(a1);
  }
  _Unwind_Resume(a1);
}

void language_modeling::v1::convertTimePoint(uint64_t a1)
{
  CFAbsoluteTimeGetCurrent();
  sub_19C350FA0(a1);
}

CFDictionaryRef LM::TrialParameters::copyEncodedRepresentation(LM::TrialParameters *this)
{
  CFDictionaryRef v2;

  sub_19C2E394C(&v2, (uint64_t)this);
  return v2;
}

void sub_19C2E394C(CFDictionaryRef *a1, uint64_t a2)
{
  char *v4;
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  uint64_t *v12;
  unint64_t v13;
  size_t v14;
  int v15;
  int v16;
  char *v17;
  uint64_t *v18;
  char v19;
  void **v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  _QWORD *v29;
  _QWORD *v30;
  unint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const double *v37;
  double *v38;
  uint64_t v39;
  const void *v40;
  const void *v41;
  uint64_t *v42;
  uint64_t **v43;
  BOOL v44;
  char *v45;
  unint64_t v46;
  uint64_t v47;
  size_t v48;
  char *v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  unint64_t v65;
  char *v66;
  uint64_t v67;
  char *v68;
  __int128 *v69;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  _BYTE *v78;
  char *v79;
  unint64_t v80;
  char *v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  _OWORD *v85;
  char *v86;
  uint64_t v87;
  __int128 v88;
  CFIndex v89;
  CFDictionaryRef v90;
  char *v91;
  char *v92;
  void *v93;
  const void *v94;
  const void *v95;
  void *exception;
  void *v97;
  CFIndex v98;
  CFDictionaryRef *v99;
  char *v100;
  char *v101;
  char *v102;
  char *v103;
  char *v104;
  char v105;
  uint64_t **v106;
  uint64_t *v107;
  unint64_t v108;
  void *v109;
  char *v110;
  char *v111;
  void *__p[2];
  char *v113;
  char *v114;
  char **v115;
  float64x2x2_t v116;

  v107 = 0;
  v108 = 0;
  v106 = &v107;
  sub_19C2E4334((uint64_t *)&v106, *(_QWORD **)(a2 + 24), (_QWORD *)(a2 + 32));
  if (*(char *)(a2 + 23) < 0)
  {
    sub_19C2B5238(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v113 = *(char **)(a2 + 16);
  }
  v4 = (char *)operator new(0x28uLL);
  v99 = a1;
  strcpy(v4, "B90D4859-A11E-4A91-A804-CFABD2A099BF");
  v5 = v107;
  if (v107)
  {
    while (1)
    {
      v7 = (uint64_t **)v5;
      v10 = v5[4];
      v8 = v5 + 4;
      v9 = (uint64_t *)v10;
      v11 = *((char *)v8 + 23);
      if (v11 >= 0)
        v12 = v8;
      else
        v12 = v9;
      if (v11 >= 0)
        v13 = *((unsigned __int8 *)v8 + 23);
      else
        v13 = v8[1];
      if (v13 >= 0x24)
        v14 = 36;
      else
        v14 = v13;
      v15 = memcmp(v4, v12, v14);
      if (v15)
      {
        if (v15 < 0)
          goto LABEL_6;
LABEL_20:
        v16 = memcmp(v12, v4, v14);
        if (v16)
        {
          if ((v16 & 0x80000000) == 0)
            goto LABEL_30;
        }
        else if (v13 >= 0x24)
        {
LABEL_30:
          v17 = (char *)v7;
          v19 = 0x80;
          goto LABEL_31;
        }
        v5 = v7[1];
        if (!v5)
        {
          v6 = v7 + 1;
          goto LABEL_27;
        }
      }
      else
      {
        if (v13 <= 0x24)
          goto LABEL_20;
LABEL_6:
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_27;
      }
    }
  }
  v6 = &v107;
  v7 = &v107;
LABEL_27:
  v17 = (char *)operator new(0x50uLL);
  *((_QWORD *)v17 + 4) = v4;
  *(_OWORD *)(v17 + 40) = xmmword_19C46DDF0;
  *((_QWORD *)v17 + 8) = 0;
  *((_QWORD *)v17 + 9) = 0;
  *((_QWORD *)v17 + 7) = 0;
  *(_QWORD *)v17 = 0;
  *((_QWORD *)v17 + 1) = 0;
  *((_QWORD *)v17 + 2) = v7;
  *v6 = (uint64_t *)v17;
  v18 = (uint64_t *)v17;
  if (*v106)
  {
    v106 = (uint64_t **)*v106;
    v18 = *v6;
  }
  sub_19C2A2310(v107, v18);
  v4 = 0;
  ++v108;
  v19 = 0;
LABEL_31:
  v20 = (void **)(v17 + 56);
  if (v17[79] < 0)
  {
    v105 = v19;
    operator delete(*v20);
    v19 = v105;
  }
  *(_OWORD *)v20 = *(_OWORD *)__p;
  *((_QWORD *)v17 + 9) = v113;
  HIBYTE(v113) = 0;
  LOBYTE(__p[0]) = 0;
  if (v19 < 0)
  {
    operator delete(v4);
    if (SHIBYTE(v113) < 0)
      operator delete(__p[0]);
  }
  v109 = 0;
  v110 = 0;
  v111 = 0;
  v21 = v108;
  if (v108)
  {
    if (v108 >> 60)
      sub_19C2A18E8();
    v22 = (char *)operator new(16 * v108);
    v109 = v22;
    v110 = v22;
    v111 = &v22[16 * v21];
  }
  else
  {
    v22 = 0;
  }
  v23 = (uint64_t)v106;
  if (v106 == &v107)
  {
    v89 = 0;
    v50 = 0;
    goto LABEL_144;
  }
  do
  {
    if (v22 < v111)
    {
      sub_19C2E45E0((CFStringRef *)v22, (const UInt8 *)(v23 + 32), v23 + 56);
      v22 += 16;
      goto LABEL_78;
    }
    v24 = (v22 - (_BYTE *)v109) >> 4;
    if ((unint64_t)(v24 + 1) >> 60)
      sub_19C2A18E8();
    v25 = (v111 - (_BYTE *)v109) >> 3;
    if (v25 <= v24 + 1)
      v25 = v24 + 1;
    if ((unint64_t)(v111 - (_BYTE *)v109) >= 0x7FFFFFFFFFFFFFF0)
      v26 = 0xFFFFFFFFFFFFFFFLL;
    else
      v26 = v25;
    v115 = &v111;
    if (v26)
    {
      if (v26 >> 60)
        sub_19C2A143C();
      v27 = (char *)operator new(16 * v26);
    }
    else
    {
      v27 = 0;
    }
    __p[0] = v27;
    __p[1] = &v27[16 * v24];
    v113 = (char *)__p[1];
    v114 = &v27[16 * v26];
    sub_19C2E45E0((CFStringRef *)__p[1], (const UInt8 *)(v23 + 32), v23 + 56);
    v28 = (char *)__p[1];
    v22 = v113 + 16;
    v29 = v109;
    v30 = v110;
    if (v110 != v109)
    {
      v31 = v110 - (_BYTE *)v109 - 16;
      if (v31 >= 0x70)
      {
        v33 = ((_BYTE *)v109 - v110 + 15) & 0xFFFFFFFFFFFFFFF0;
        if ((char *)__p[1] + v33 >= v110 || &v110[v33] >= __p[1])
        {
          v34 = (v31 >> 4) + 1;
          v32 = (char *)__p[1] - 16 * (v34 & 0x1FFFFFFFFFFFFFFELL);
          v35 = 0x1FFFFFFFFFFFFFFCLL;
          v36 = v34 & 0x1FFFFFFFFFFFFFFELL;
          do
          {
            v37 = (const double *)&v30[v35];
            v116 = vld2q_f64(v37);
            v38 = (double *)&v28[v35 * 8];
            vst2q_f64(v38, v116);
            *(_OWORD *)v37 = 0uLL;
            *((_OWORD *)v37 + 1) = 0uLL;
            v35 -= 4;
            v36 -= 2;
          }
          while (v36);
          if (v34 == (v34 & 0x1FFFFFFFFFFFFFFELL))
            goto LABEL_68;
          v30 -= 2 * (v34 & 0x1FFFFFFFFFFFFFFELL);
        }
        else
        {
          v32 = __p[1];
        }
      }
      else
      {
        v32 = __p[1];
      }
      do
      {
        v39 = *(v30 - 2);
        v30 -= 2;
        *(v32 - 2) = v39;
        v32 -= 2;
        *v30 = 0;
        v32[1] = v30[1];
        v30[1] = 0;
      }
      while (v30 != v29);
      v29 = v109;
      v30 = v110;
LABEL_68:
      v109 = v32;
      v110 = v22;
      v111 = v114;
      if (v30 != v29)
      {
        do
        {
          v40 = (const void *)*(v30 - 1);
          if (v40)
            CFRelease(v40);
          v41 = (const void *)*(v30 - 2);
          if (v41)
            CFRelease(v41);
          v30 -= 2;
        }
        while (v30 != v29);
        v30 = v29;
      }
      goto LABEL_76;
    }
    v109 = __p[1];
    v110 = v113 + 16;
    v111 = v114;
LABEL_76:
    if (v30)
      operator delete(v30);
LABEL_78:
    v110 = v22;
    v42 = *(uint64_t **)(v23 + 8);
    if (v42)
    {
      do
      {
        v43 = (uint64_t **)v42;
        v42 = (uint64_t *)*v42;
      }
      while (v42);
    }
    else
    {
      do
      {
        v43 = *(uint64_t ***)(v23 + 16);
        v44 = *v43 == (uint64_t *)v23;
        v23 = (uint64_t)v43;
      }
      while (!v44);
    }
    v23 = (uint64_t)v43;
  }
  while (v43 != &v107);
  v45 = (char *)v109;
  v46 = v22 - (_BYTE *)v109;
  v47 = (v22 - (_BYTE *)v109) >> 4;
  if (v22 != v109)
  {
    if ((v46 & 0x8000000000000000) != 0)
      sub_19C2A18E8();
    v48 = v46 >> 1;
    v49 = (char *)operator new(v46 >> 1);
    v50 = (char *)operator new(v48);
    v98 = v47;
    v51 = &v49[8 * v47];
    v52 = &v50[8 * v47];
    v53 = v50;
    v54 = v49;
    while (1)
    {
      v56 = *(_QWORD *)v45;
      if (!*(_QWORD *)v45 || !*((_QWORD *)v45 + 1))
      {
        exception = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1A1AD3154](exception, "Could not construct");
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
      }
      if (v49 < v51)
      {
        *(_QWORD *)v49 = v56;
        v49 += 8;
        goto LABEL_116;
      }
      v103 = v22;
      v57 = v49;
      v58 = v49 - v54;
      v59 = v58 >> 3;
      v60 = (v58 >> 3) + 1;
      if (v60 >> 61)
        sub_19C2A18E8();
      if ((v51 - v54) >> 2 > v60)
        v60 = (v51 - v54) >> 2;
      if ((unint64_t)(v51 - v54) >= 0x7FFFFFFFFFFFFFF8)
        v61 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v61 = v60;
      v100 = v52;
      if (v61)
      {
        if (v61 >> 61)
          sub_19C2A143C();
        v62 = (char *)operator new(8 * v61);
      }
      else
      {
        v62 = 0;
      }
      v63 = &v62[8 * v59];
      v101 = &v62[8 * v61];
      *(_QWORD *)v63 = v56;
      v64 = v63 + 8;
      if (v57 == v54)
      {
        v54 = v57;
        v22 = v103;
LABEL_114:
        operator delete(v54);
        goto LABEL_115;
      }
      v65 = v57 - 8 - v54;
      if (v65 < 0x58)
        break;
      if ((unint64_t)(v57 - &v62[v58]) < 0x20)
      {
        v66 = v57;
        v22 = v103;
        do
        {
LABEL_112:
          v72 = *((_QWORD *)v66 - 1);
          v66 -= 8;
          *((_QWORD *)v63 - 1) = v72;
          v63 -= 8;
        }
        while (v66 != v54);
        goto LABEL_113;
      }
      v67 = (v65 >> 3) + 1;
      v66 = &v57[-8 * (v67 & 0x3FFFFFFFFFFFFFFCLL)];
      v68 = &v62[8 * v59 - 16];
      v69 = (__int128 *)(v57 - 16);
      v70 = v67 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v71 = *v69;
        *((_OWORD *)v68 - 1) = *(v69 - 1);
        *(_OWORD *)v68 = v71;
        v68 -= 32;
        v69 -= 2;
        v70 -= 4;
      }
      while (v70);
      v63 -= 8 * (v67 & 0x3FFFFFFFFFFFFFFCLL);
      v22 = v103;
      if (v67 != (v67 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_112;
LABEL_113:
      if (v54)
        goto LABEL_114;
LABEL_115:
      v54 = v63;
      v49 = v64;
      v52 = v100;
      v51 = v101;
LABEL_116:
      v73 = *((_QWORD *)v45 + 1);
      if (v53 >= v52)
      {
        v104 = v22;
        v74 = (v53 - v50) >> 3;
        v75 = v74 + 1;
        if ((unint64_t)(v74 + 1) >> 61)
          sub_19C2A18E8();
        if ((v52 - v50) >> 2 > v75)
          v75 = (v52 - v50) >> 2;
        if ((unint64_t)(v52 - v50) >= 0x7FFFFFFFFFFFFFF8)
          v76 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v76 = v75;
        v102 = v51;
        if (v76)
        {
          if (v76 >> 61)
            sub_19C2A143C();
          v77 = v76;
          v78 = operator new(8 * v76);
          v76 = v77;
        }
        else
        {
          v78 = 0;
        }
        v79 = &v78[8 * v74];
        *(_QWORD *)v79 = v73;
        v55 = v79 + 8;
        if (v53 == v50)
        {
          v22 = v104;
          v52 = &v78[8 * v76];
          if (v50)
            goto LABEL_133;
        }
        else
        {
          v80 = v53 - 8 - v50;
          if (v80 < 0x58 || (unint64_t)(v50 - v78) < 0x20)
          {
            v81 = v53;
            v22 = v104;
            goto LABEL_131;
          }
          v84 = (v80 >> 3) + 1;
          v81 = &v53[-8 * (v84 & 0x3FFFFFFFFFFFFFFCLL)];
          v85 = &v78[8 * v74 - 16];
          v86 = v53 - 16;
          v87 = v84 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v88 = *(_OWORD *)v86;
            *(v85 - 1) = *((_OWORD *)v86 - 1);
            *v85 = v88;
            v85 -= 2;
            v86 -= 32;
            v87 -= 4;
          }
          while (v87);
          v79 -= 8 * (v84 & 0x3FFFFFFFFFFFFFFCLL);
          v22 = v104;
          if (v84 != (v84 & 0x3FFFFFFFFFFFFFFCLL))
          {
            do
            {
LABEL_131:
              v82 = *((_QWORD *)v81 - 1);
              v81 -= 8;
              *((_QWORD *)v79 - 1) = v82;
              v79 -= 8;
            }
            while (v81 != v50);
          }
          v52 = &v78[8 * v76];
          if (v50)
          {
LABEL_133:
            v83 = v52;
            operator delete(v50);
            v52 = v83;
          }
        }
        v50 = v79;
        v51 = v102;
        goto LABEL_88;
      }
      *(_QWORD *)v53 = v73;
      v55 = v53 + 8;
LABEL_88:
      v45 += 16;
      v53 = v55;
      if (v45 == v22)
      {
        v89 = v98;
        goto LABEL_145;
      }
    }
    v66 = v57;
    v22 = v103;
    goto LABEL_112;
  }
  v50 = 0;
  v89 = (v22 - (_BYTE *)v109) >> 4;
LABEL_144:
  v54 = 0;
LABEL_145:
  v90 = CFDictionaryCreate(0, (const void **)v54, (const void **)v50, v89, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!v90)
  {
    v97 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD3154](v97, "Could not construct");
    __cxa_throw(v97, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  if (v50)
    operator delete(v50);
  if (v54)
    operator delete(v54);
  v91 = (char *)v109;
  if (v109)
  {
    v92 = v110;
    v93 = v109;
    if (v110 != v109)
    {
      do
      {
        v94 = (const void *)*((_QWORD *)v92 - 1);
        if (v94)
          CFRelease(v94);
        v95 = (const void *)*((_QWORD *)v92 - 2);
        if (v95)
          CFRelease(v95);
        v92 -= 16;
      }
      while (v92 != v91);
      v93 = v109;
    }
    v110 = v91;
    operator delete(v93);
  }
  *v99 = v90;
  sub_19C2E457C((uint64_t)v107);
}

void sub_19C2E4254(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  sub_19C2E457C(a16);
  _Unwind_Resume(a1);
}

uint64_t *sub_19C2E4334(uint64_t *result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  BOOL v10;
  int v11;
  const void *v12;
  size_t v13;
  int v14;
  const void *v15;
  size_t v16;
  size_t v17;
  uint64_t **v18;
  uint64_t **v19;
  size_t v20;
  size_t v21;
  const void *v22;
  size_t v23;
  size_t v24;
  int v25;
  _QWORD *v26;
  uint64_t *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t *v31;

  if (a2 != a3)
  {
    v3 = a2;
    v4 = (uint64_t)result;
    v5 = result + 1;
    do
    {
      v6 = *(uint64_t **)(v4 + 8);
      v7 = v5;
      if (*(uint64_t **)v4 != v5)
      {
        v8 = *(uint64_t **)(v4 + 8);
        v9 = v5;
        if (v6)
        {
          do
          {
            v7 = v8;
            v8 = (uint64_t *)v8[1];
          }
          while (v8);
        }
        else
        {
          do
          {
            v7 = (uint64_t *)v9[2];
            v10 = *v7 == (_QWORD)v9;
            v9 = v7;
          }
          while (v10);
        }
        v11 = *((char *)v7 + 55);
        if (v11 >= 0)
          v12 = v7 + 4;
        else
          v12 = (const void *)v7[4];
        if (v11 >= 0)
          v13 = *((unsigned __int8 *)v7 + 55);
        else
          v13 = v7[5];
        v14 = *((char *)v3 + 55);
        if (v14 >= 0)
          v15 = v3 + 4;
        else
          v15 = (const void *)v3[4];
        if (v14 >= 0)
          v16 = *((unsigned __int8 *)v3 + 55);
        else
          v16 = v3[5];
        if (v16 >= v13)
          v17 = v13;
        else
          v17 = v16;
        result = (uint64_t *)memcmp(v12, v15, v17);
        if ((_DWORD)result)
        {
          if ((result & 0x80000000) == 0)
            goto LABEL_26;
        }
        else if (v13 >= v16)
        {
LABEL_26:
          v18 = (uint64_t **)v5;
          v19 = (uint64_t **)v5;
          if (!v6)
          {
LABEL_54:
            sub_19C2E4868((uint64_t)&v31, v4, (uint64_t)(v3 + 4));
            v27 = v31;
            *v31 = 0;
            v27[1] = 0;
            v27[2] = (uint64_t)v19;
            *v18 = v27;
            v28 = **(_QWORD **)v4;
            if (v28)
            {
              *(_QWORD *)v4 = v28;
              v27 = *v18;
            }
            result = sub_19C2A2310(*(uint64_t **)(v4 + 8), v27);
            ++*(_QWORD *)(v4 + 16);
            v26 = (_QWORD *)v3[1];
            if (v26)
              goto LABEL_57;
            do
            {
LABEL_59:
              v29 = (_QWORD *)v3[2];
              v10 = *v29 == (_QWORD)v3;
              v3 = v29;
            }
            while (!v10);
            goto LABEL_3;
          }
          while (1)
          {
            v19 = (uint64_t **)v6;
            v20 = *((unsigned __int8 *)v6 + 55);
            v21 = v6[5];
            if ((v20 & 0x80u) == 0)
              v22 = v6 + 4;
            else
              v22 = (const void *)v6[4];
            if ((v20 & 0x80u) == 0)
              v23 = v20;
            else
              v23 = v21;
            if (v23 >= v16)
              v24 = v16;
            else
              v24 = v23;
            v25 = memcmp(v15, v22, v24);
            if (v25)
            {
              if (v25 < 0)
                goto LABEL_28;
            }
            else if (v16 < v23)
            {
LABEL_28:
              v6 = *v19;
              v18 = v19;
              if (!*v19)
                goto LABEL_54;
              continue;
            }
            result = (uint64_t *)memcmp(v22, v15, v24);
            if ((_DWORD)result)
            {
              if ((result & 0x80000000) == 0)
                goto LABEL_51;
            }
            else if (v23 >= v16)
            {
              goto LABEL_51;
            }
            v18 = v19 + 1;
            v6 = v19[1];
            if (!v6)
              goto LABEL_54;
          }
        }
      }
      v18 = (uint64_t **)v5;
      v19 = (uint64_t **)v5;
      if (!v6)
        goto LABEL_54;
      v18 = (uint64_t **)(v7 + 1);
      if (!v7[1])
      {
        v19 = (uint64_t **)v7;
        goto LABEL_54;
      }
LABEL_51:
      v26 = (_QWORD *)v3[1];
      if (!v26)
        goto LABEL_59;
      do
      {
LABEL_57:
        v29 = v26;
        v26 = (_QWORD *)*v26;
      }
      while (v26);
LABEL_3:
      v3 = v29;
    }
    while (v29 != a3);
  }
  return result;
}

void sub_19C2E457C(uint64_t a1)
{
  if (a1)
  {
    sub_19C2E457C(*(_QWORD *)a1);
    sub_19C2E457C(*(_QWORD *)(a1 + 8));
    if (*(char *)(a1 + 79) < 0)
    {
      operator delete(*(void **)(a1 + 56));
      if ((*(char *)(a1 + 55) & 0x80000000) == 0)
        goto LABEL_4;
    }
    else if ((*(char *)(a1 + 55) & 0x80000000) == 0)
    {
LABEL_4:
      operator delete((void *)a1);
      return;
    }
    operator delete(*(void **)(a1 + 32));
    goto LABEL_4;
  }
}

CFStringRef *sub_19C2E45E0(CFStringRef *a1, const UInt8 *a2, uint64_t a3)
{
  CFIndex v5;
  CFIndex v6;
  CFStringRef v7;
  int v8;
  const UInt8 *v9;
  CFIndex v10;
  CFStringRef v11;
  void *exception;
  void *v14;

  v5 = *((_QWORD *)a2 + 1);
  if (*((char *)a2 + 23) >= 0)
  {
    v6 = a2[23];
  }
  else
  {
    a2 = *(const UInt8 **)a2;
    v6 = v5;
  }
  v7 = CFStringCreateWithBytes(0, a2, v6, 0x8000100u, 0);
  *a1 = v7;
  if (!v7)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD3154](exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v8 = *(char *)(a3 + 23);
  if (v8 >= 0)
    v9 = (const UInt8 *)a3;
  else
    v9 = *(const UInt8 **)a3;
  if (v8 >= 0)
    v10 = *(unsigned __int8 *)(a3 + 23);
  else
    v10 = *(_QWORD *)(a3 + 8);
  v11 = CFStringCreateWithBytes(0, v9, v10, 0x8000100u, 0);
  a1[1] = v11;
  if (!v11)
  {
    v14 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD3154](v14, "Could not construct");
    __cxa_throw(v14, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  return a1;
}

void sub_19C2E46DC(_Unwind_Exception *a1)
{
  uint64_t v1;
  const void *v3;

  v3 = *(const void **)(v1 + 8);
  if (v3)
    CFRelease(v3);
  sub_19C2E4838((const void **)v1);
  _Unwind_Resume(a1);
}

void **sub_19C2E4744(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  const void *v5;
  const void *v6;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (const void *)*((_QWORD *)v3 - 1);
        if (v5)
          CFRelease(v5);
        v6 = (const void *)*((_QWORD *)v3 - 2);
        if (v6)
          CFRelease(v6);
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_19C2E47C4(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  CFTypeRef *v4;
  const void *v5;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (CFTypeRef *)(i - 16);
    *(_QWORD *)(a1 + 16) = i - 16;
    v5 = *(const void **)(i - 8);
    if (v5)
      CFRelease(v5);
    if (*v4)
      CFRelease(*v4);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

const void **sub_19C2E4838(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

_BYTE *sub_19C2E4868(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  _BYTE *v6;
  _BYTE *v7;
  _BYTE *result;

  v5 = a2 + 8;
  v6 = operator new(0x50uLL);
  v7 = v6;
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = 0;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_19C2B5238(v6 + 32, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *((_OWORD *)v6 + 2) = *(_OWORD *)a3;
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a3 + 16);
  }
  result = v7 + 56;
  if (*(char *)(a3 + 47) < 0)
  {
    result = sub_19C2B5238(result, *(void **)(a3 + 24), *(_QWORD *)(a3 + 32));
  }
  else
  {
    *(_OWORD *)result = *(_OWORD *)(a3 + 24);
    *((_QWORD *)v7 + 9) = *(_QWORD *)(a3 + 40);
  }
  *(_BYTE *)(a1 + 16) = 1;
  return result;
}

void sub_19C2E4908(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  void **v3;

  if (*(char *)(v2 + 55) < 0)
    operator delete(*v3);
  sub_19C2E4934(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_19C2E4934(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      if (*(char *)(v2 + 79) < 0)
      {
        operator delete(*(void **)(v2 + 56));
        if ((*(char *)(v2 + 55) & 0x80000000) == 0)
          goto LABEL_5;
      }
      else if ((*(char *)(v2 + 55) & 0x80000000) == 0)
      {
        goto LABEL_5;
      }
      operator delete(*(void **)(v2 + 32));
    }
LABEL_5:
    operator delete((void *)v2);
  }
  return a1;
}

void LM::TrialParameters::createWithEncodedRepresentation(LM::TrialParameters *this@<X0>, uint64_t a2@<X8>)
{
  _BYTE *v5;
  BOOL v6;
  void *v7;
  const __CFString *v8;
  CFTypeID TypeID;
  CFTypeRef v10;
  const __CFString *v11;
  CFTypeID v12;
  void *v14;
  size_t v15;
  void *v16;
  void *v17;
  size_t v18;
  void *v19;
  uint64_t v20;
  char *v21;
  char v22;
  char *v23;
  _QWORD *p_p;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  BOOL v31;
  BOOL v32;
  BOOL v33;
  uint64_t **v35;
  void **v36;
  CFTypeRef *v37;
  size_t v38;
  char *v39;
  CFTypeRef v40;
  const __CFString *v41;
  CFTypeRef cf[2];
  uint64_t *v43;
  void *__p;
  uint64_t v45;
  void *v46;
  _BYTE *v47;
  void *v48;
  void *v49;
  void *v50;
  uint64_t v51;
  void *v52;
  _BYTE *v53;
  void *v54;
  _BYTE *v55;
  CFDictionaryRef v56[2];

  if (!this)
    __assert_rtn("createWithEncodedRepresentation", "TrialParameters.mm", 33, "dict");
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 24) = a2 + 32;
  *(_QWORD *)(a2 + 40) = 0;
  CFRetain(this);
  sub_19C29438C(v56, this);
  sub_19C2E4EA0((uint64_t)&v50, v56[0]);
  while (1)
  {
    sub_19C2E4EA0((uint64_t)&__p, v56[0]);
    v5 = v46;
    v45 = (v47 - (_BYTE *)v46) >> 3;
    if (!v50 || v51 == (v53 - (_BYTE *)v52) >> 3)
    {
      v6 = 1;
      v7 = v48;
      if (!v48)
        goto LABEL_8;
LABEL_7:
      v49 = v7;
      operator delete(v7);
      v5 = v46;
      goto LABEL_8;
    }
    v6 = v50 == __p && v51 == (v47 - (_BYTE *)v46) >> 3;
    v7 = v48;
    if (v48)
      goto LABEL_7;
LABEL_8:
    if (v5)
    {
      v47 = v5;
      operator delete(v5);
    }
    if (v6)
      break;
    sub_19C2E4F60(cf, &v50);
    v8 = (const __CFString *)cf[0];
    if (!cf[0] || (TypeID = CFStringGetTypeID(), TypeID != CFGetTypeID(v8)))
    {
      HIBYTE(v46) = 0;
      LOBYTE(__p) = 0;
      v10 = cf[1];
      if (!cf[1])
        goto LABEL_17;
LABEL_16:
      CFRelease(v10);
      goto LABEL_17;
    }
    sub_19C2E50A4(&__p, v8);
    v10 = cf[1];
    if (cf[1])
      goto LABEL_16;
LABEL_17:
    if (v8)
      CFRelease(v8);
    sub_19C2E4F60(&v40, &v50);
    v11 = v41;
    if (v41)
    {
      v12 = CFStringGetTypeID();
      if (v12 == CFGetTypeID(v11))
      {
        sub_19C2E50A4(cf, v11);
      }
      else
      {
        HIBYTE(v43) = 0;
        LOBYTE(cf[0]) = 0;
      }
      CFRelease(v11);
    }
    else
    {
      HIBYTE(v43) = 0;
      LOBYTE(cf[0]) = 0;
    }
    if (v40)
      CFRelease(v40);
    v14 = v52;
    v15 = v53 - (_BYTE *)v52;
    if (v53 == v52)
    {
      v16 = 0;
    }
    else
    {
      if ((v15 & 0x8000000000000000) != 0)
        sub_19C2A18E8();
      v16 = operator new(v53 - (_BYTE *)v52);
      memcpy(v16, v14, v15);
    }
    v17 = v54;
    v18 = v55 - (_BYTE *)v54;
    if (v55 == v54)
    {
      ++v51;
      if (v16)
        goto LABEL_42;
    }
    else
    {
      if ((v18 & 0x8000000000000000) != 0)
        sub_19C2A18E8();
      v19 = operator new(v55 - (_BYTE *)v54);
      memcpy(v19, v17, v18);
      ++v51;
      operator delete(v19);
      if (v16)
LABEL_42:
        operator delete(v16);
    }
    if (SHIBYTE(v46) >= 0)
      v20 = HIBYTE(v46);
    else
      v20 = v45;
    if (!v20)
      goto LABEL_91;
    v21 = (char *)HIBYTE(v43);
    v22 = HIBYTE(v43);
    v23 = (char *)cf[1];
    if (!(SHIBYTE(v43) >= 0 ? (CFTypeRef)HIBYTE(v43) : cf[1]))
      goto LABEL_91;
    if (v20 == 36)
    {
      p_p = &__p;
      if (SHIBYTE(v46) < 0)
        p_p = __p;
      v26 = *p_p;
      v27 = p_p[1];
      v28 = p_p[2];
      v29 = p_p[3];
      v30 = *((_DWORD *)p_p + 8);
      v31 = v26 == 0x3935383444303942 && v27 == 0x41342D453131412DLL;
      v32 = v31 && v28 == 0x2D343038412D3139;
      v33 = v32 && v29 == 0x3041324442414643;
      if (v33 && v30 == 1178745145)
      {
        if (*(char *)(a2 + 23) < 0)
        {
          **(_BYTE **)a2 = 0;
          *(_QWORD *)(a2 + 8) = 0;
          v21 = (char *)HIBYTE(v43);
          v23 = (char *)cf[1];
          v22 = HIBYTE(v43);
        }
        else
        {
          *(_BYTE *)a2 = 0;
          *(_BYTE *)(a2 + 23) = 0;
        }
        if (v22 >= 0)
          v39 = (char *)cf;
        else
          v39 = (char *)cf[0];
        if (v22 < 0)
          v21 = v23;
        sub_19C2B6ED4((std::string *)a2, v39, &v21[(_QWORD)v39]);
        goto LABEL_91;
      }
    }
    v35 = sub_19C2E5260((uint64_t **)(a2 + 24), (const void **)&__p, (uint64_t)&__p);
    v36 = (void **)(v35 + 7);
    if (v35 + 7 != (uint64_t **)cf)
    {
      if (*((char *)v35 + 79) < 0)
      {
        if (SHIBYTE(v43) >= 0)
          v37 = cf;
        else
          v37 = (CFTypeRef *)cf[0];
        if (SHIBYTE(v43) >= 0)
          v38 = HIBYTE(v43);
        else
          v38 = (size_t)cf[1];
        sub_19C2E54A8(v36, v37, v38);
        goto LABEL_91;
      }
      if ((HIBYTE(v43) & 0x80) != 0)
      {
        sub_19C2E53E4(v36, (void *)cf[0], (size_t)cf[1]);
        goto LABEL_91;
      }
      *(_OWORD *)v36 = *(_OWORD *)cf;
      v35[9] = v43;
      if (SHIBYTE(v46) < 0)
        goto LABEL_3;
    }
    else
    {
LABEL_91:
      if (SHIBYTE(v43) < 0)
      {
        operator delete((void *)cf[0]);
        if (SHIBYTE(v46) < 0)
LABEL_3:
          operator delete(__p);
      }
      else if (SHIBYTE(v46) < 0)
      {
        goto LABEL_3;
      }
    }
  }
  if (v54)
  {
    v55 = v54;
    operator delete(v54);
  }
  if (v52)
  {
    v53 = v52;
    operator delete(v52);
  }
  if (v56[0])
    CFRelease(v56[0]);
}

void sub_19C2E4DFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  sub_19C2E5638(v29);
  _Unwind_Resume(a1);
}

uint64_t sub_19C2E4EA0(uint64_t a1, CFDictionaryRef theDict)
{
  const void ***v3;
  unint64_t Count;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  const void **v8;
  unint64_t v9;

  *(_QWORD *)a1 = theDict;
  *(_OWORD *)(a1 + 40) = 0u;
  v3 = (const void ***)(a1 + 40);
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)(a1 + 56) = 0;
  if (theDict)
  {
    Count = CFDictionaryGetCount(theDict);
    v5 = Count;
    v6 = *(_QWORD *)(a1 + 16);
    v7 = (*(_QWORD *)(a1 + 24) - v6) >> 3;
    if (Count <= v7)
    {
      if (Count < v7)
        *(_QWORD *)(a1 + 24) = v6 + 8 * Count;
    }
    else
    {
      sub_19C2E56A0(a1 + 16, Count - v7);
    }
    v8 = *(const void ***)(a1 + 40);
    v9 = (uint64_t)(*(_QWORD *)(a1 + 48) - (_QWORD)v8) >> 3;
    if (v5 <= v9)
    {
      if (v5 < v9)
        *(_QWORD *)(a1 + 48) = &v8[v5];
    }
    else
    {
      sub_19C2E56A0((uint64_t)v3, v5 - v9);
      v8 = *v3;
    }
    CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)a1, *(const void ***)(a1 + 16), v8);
  }
  return a1;
}

void sub_19C2E4F60(_QWORD *a1, _QWORD *a2)
{
  unint64_t v2;
  uint64_t v4;
  const void *v6;
  uint64_t v7;
  const void *v8;
  CFTypeRef v9;
  const void *v10;
  std::logic_error *exception;
  const void *v12;
  CFTypeRef v13;

  v2 = a2[1];
  if ((v2 & 0x8000000000000000) != 0 || (v4 = a2[2], v2 >= (a2[3] - v4) >> 3))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_19C2B4230(exception, "DictionaryRef_iterator iterator out of range.");
    __cxa_throw(exception, (struct type_info *)off_1E3D2F2C0, MEMORY[0x1E0DE42E0]);
  }
  v6 = *(const void **)(v4 + 8 * v2);
  if (v6)
  {
    CFRetain(*(CFTypeRef *)(v4 + 8 * v2));
    sub_19C297DB4(&v13, v6);
    v2 = a2[1];
  }
  else
  {
    v13 = 0;
  }
  v7 = a2[5];
  v8 = *(const void **)(v7 + 8 * v2);
  if (v8)
    CFRetain(*(CFTypeRef *)(v7 + 8 * v2));
  sub_19C297DB4(&v12, v8);
  v10 = v12;
  v9 = v13;
  if (v13)
    CFRetain(v13);
  *a1 = v9;
  if (v10)
  {
    CFRetain(v10);
    a1[1] = v10;
    CFRelease(v10);
    if (!v9)
      return;
  }
  else
  {
    a1[1] = 0;
    if (!v9)
      return;
  }
  CFRelease(v9);
}

void sub_19C2E507C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19C2E5090(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C2E5670((const void **)va);
  _Unwind_Resume(a1);
}

unint64_t sub_19C2E50A4(_QWORD *a1, CFStringRef theString)
{
  const char *CStringPtr;
  const char *v5;
  unint64_t result;
  size_t v7;
  CFIndex Length;
  size_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  CFIndex v14;
  CFIndex v15;
  UInt8 *v16;
  CFIndex maxBufLen;
  CFRange v18;
  CFRange v19;

  CStringPtr = CFStringGetCStringPtr(theString, 0x8000100u);
  v5 = CStringPtr;
  if (CStringPtr)
  {
    result = strlen(CStringPtr);
    if (result <= 0x7FFFFFFFFFFFFFF7)
    {
      v7 = result;
      if (result >= 0x17)
      {
        v11 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((result | 7) != 0x17)
          v11 = result | 7;
        v12 = v11 + 1;
        v13 = operator new(v11 + 1);
        a1[1] = v7;
        a1[2] = v12 | 0x8000000000000000;
        *a1 = v13;
        a1 = v13;
      }
      else
      {
        *((_BYTE *)a1 + 23) = result;
        if (!result)
          goto LABEL_14;
      }
      result = (unint64_t)memmove(a1, v5, v7);
LABEL_14:
      *((_BYTE *)a1 + v7) = 0;
      return result;
    }
LABEL_23:
    sub_19C2A1A54();
  }
  Length = CFStringGetLength(theString);
  maxBufLen = 0;
  v18.location = 0;
  v18.length = Length;
  CFStringGetBytes(theString, v18, 0x8000100u, 0, 0, 0, 0, &maxBufLen);
  v9 = maxBufLen;
  if ((unint64_t)maxBufLen > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_23;
  if ((unint64_t)maxBufLen >= 0x17)
  {
    v14 = (maxBufLen & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((maxBufLen | 7) != 0x17)
      v14 = maxBufLen | 7;
    v15 = v14 + 1;
    v10 = operator new(v14 + 1);
    a1[1] = v9;
    a1[2] = v15 | 0x8000000000000000;
    *a1 = v10;
  }
  else
  {
    *((_BYTE *)a1 + 23) = maxBufLen;
    v10 = a1;
    if (!v9)
      goto LABEL_19;
  }
  bzero(v10, v9);
LABEL_19:
  *((_BYTE *)v10 + v9) = 0;
  if (*((char *)a1 + 23) >= 0)
    v16 = (UInt8 *)a1;
  else
    v16 = (UInt8 *)*a1;
  v19.location = 0;
  v19.length = Length;
  return CFStringGetBytes(theString, v19, 0x8000100u, 0, 0, v16, maxBufLen, &maxBufLen);
}

uint64_t **sub_19C2E5260(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  int v7;
  const void *v8;
  size_t v9;
  uint64_t **v10;
  _QWORD *v11;
  const void *v12;
  const void *v13;
  int v14;
  const void *v15;
  size_t v16;
  size_t v17;
  int v18;
  int v19;
  _QWORD *v20;
  _BYTE *v21;
  uint64_t *v22;
  uint64_t *v23;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *((char *)a2 + 23);
    if (v7 >= 0)
      v8 = a2;
    else
      v8 = *a2;
    if (v7 >= 0)
      v9 = *((unsigned __int8 *)a2 + 23);
    else
      v9 = (size_t)a2[1];
    while (1)
    {
      v10 = (uint64_t **)v5;
      v13 = (const void *)v5[4];
      v11 = v5 + 4;
      v12 = v13;
      v14 = *((char *)v11 + 23);
      if (v14 >= 0)
        v15 = v11;
      else
        v15 = v12;
      if (v14 >= 0)
        v16 = *((unsigned __int8 *)v11 + 23);
      else
        v16 = v11[1];
      if (v16 >= v9)
        v17 = v9;
      else
        v17 = v16;
      v18 = memcmp(v8, v15, v17);
      if (v18)
      {
        if (v18 < 0)
          goto LABEL_8;
LABEL_22:
        v19 = memcmp(v15, v8, v17);
        if (v19)
        {
          if ((v19 & 0x80000000) == 0)
            return v10;
        }
        else if (v16 >= v9)
        {
          return v10;
        }
        v5 = v10[1];
        if (!v5)
        {
          v6 = v10 + 1;
          goto LABEL_29;
        }
      }
      else
      {
        if (v9 >= v16)
          goto LABEL_22;
LABEL_8:
        v5 = *v10;
        v6 = v10;
        if (!*v10)
          goto LABEL_29;
      }
    }
  }
  v10 = a1 + 1;
LABEL_29:
  v20 = operator new(0x50uLL);
  v21 = v20 + 4;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_19C2B5238(v21, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)v21 = *(_OWORD *)a3;
    v20[6] = *(_QWORD *)(a3 + 16);
  }
  v20[7] = 0;
  v20[8] = 0;
  v20[9] = 0;
  *v20 = 0;
  v20[1] = 0;
  v20[2] = v10;
  *v6 = v20;
  v22 = (uint64_t *)**a1;
  v23 = v20;
  if (v22)
  {
    *a1 = v22;
    v23 = *v6;
  }
  sub_19C2A2310(a1[1], v23);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return (uint64_t **)v20;
}

void sub_19C2E53D0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_19C2E53E4(_QWORD *__dst, void *__src, size_t __len)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len > 0x16)
  {
    if (__len - 0x7FFFFFFFFFFFFFF7 <= 0x800000000000001ELL)
      sub_19C2A1A54();
    v7 = 44;
    if (__len > 0x2C)
      v7 = __len;
    v8 = (v7 | 7) + 1;
    v6 = operator new(v8);
    memcpy(v6, __src, __len);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    *__dst = v6;
  }
  else
  {
    *((_BYTE *)__dst + 23) = __len;
    v6 = __dst;
    if (__len)
    {
      memmove(__dst, __src, __len);
      v6 = __dst;
    }
  }
  *((_BYTE *)v6 + __len) = 0;
  return __dst;
}

void **sub_19C2E54A8(void **a1, void *__src, size_t __len)
{
  unint64_t v6;
  uint64_t v7;
  void *v8;
  size_t v9;
  unint64_t v10;
  void *v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;

  v6 = (unint64_t)a1[2];
  v7 = v6 & 0x7FFFFFFFFFFFFFFFLL;
  if ((v6 & 0x7FFFFFFFFFFFFFFFLL) <= __len)
  {
    v9 = 0x7FFFFFFFFFFFFFF7;
    if (0x7FFFFFFFFFFFFFF7 - v7 < __len - v7 + 1)
      sub_19C2A1A54();
    v10 = v7 - 1;
    v11 = a1;
    if ((v6 & 0x8000000000000000) != 0)
      v11 = *a1;
    if (v10 <= 0x3FFFFFFFFFFFFFF2)
    {
      v12 = 2 * v10;
      if (__len > 2 * v10)
        v12 = __len;
      v13 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v12 | 7) != 0x17)
        v13 = v12 | 7;
      if (v12 >= 0x17)
        v9 = v13 + 1;
      else
        v9 = 23;
    }
    v14 = operator new(v9);
    v8 = v14;
    if (__len)
      memcpy(v14, __src, __len);
    if (v10 != 22)
      operator delete(v11);
    a1[1] = (void *)__len;
    a1[2] = (void *)(v9 | 0x8000000000000000);
    *a1 = v8;
  }
  else
  {
    v8 = *a1;
    a1[1] = (void *)__len;
    if (__len)
      memmove(v8, __src, __len);
  }
  *((_BYTE *)v8 + __len) = 0;
  return a1;
}

_QWORD *sub_19C2E55C8(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[2];
  if (v3)
  {
    a1[3] = v3;
    operator delete(v3);
  }
  return a1;
}

const void **sub_19C2E5608(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

uint64_t sub_19C2E5638(uint64_t a1)
{
  sub_19C2E457C(*(_QWORD *)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

const void **sub_19C2E5670(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

void sub_19C2E56A0(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v5 = *(char **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v6 = v5;
  if (a2 <= (v4 - (uint64_t)v5) >> 3)
  {
    if (a2)
    {
      bzero(v5, 8 * a2);
      v6 = &v5[8 * a2];
    }
    *(_QWORD *)(a1 + 8) = v6;
  }
  else
  {
    v7 = *(char **)a1;
    v8 = (uint64_t)&v5[-*(_QWORD *)a1];
    v9 = v8 >> 3;
    v10 = (v8 >> 3) + a2;
    if (v10 >> 61)
      sub_19C2A18E8();
    v11 = v4 - (_QWORD)v7;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 61)
        sub_19C2A143C();
      v13 = operator new(8 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[8 * v9];
    v15 = 8 * a2;
    v16 = &v13[8 * v12];
    bzero(v14, v15);
    v17 = &v14[v15];
    if (v5 == v7)
    {
      v7 = v5;
    }
    else
    {
      v18 = v5 - v7 - 8;
      if (v18 < 0x58)
        goto LABEL_31;
      if ((unint64_t)(v5 - v13 - v8) < 0x20)
        goto LABEL_31;
      v19 = (v18 >> 3) + 1;
      v6 = &v5[-8 * (v19 & 0x3FFFFFFFFFFFFFFCLL)];
      v20 = &v13[8 * v9 - 16];
      v21 = v5 - 16;
      v22 = v19 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v23 = *(_OWORD *)v21;
        *(v20 - 1) = *((_OWORD *)v21 - 1);
        *v20 = v23;
        v20 -= 2;
        v21 -= 32;
        v22 -= 4;
      }
      while (v22);
      v14 -= 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
      if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_31:
        do
        {
          v24 = *((_QWORD *)v6 - 1);
          v6 -= 8;
          *((_QWORD *)v14 - 1) = v24;
          v14 -= 8;
        }
        while (v6 != v7);
        v7 = *(char **)a1;
      }
    }
    *(_QWORD *)a1 = v14;
    *(_QWORD *)(a1 + 8) = v17;
    *(_QWORD *)(a1 + 16) = v16;
    if (v7)
      operator delete(v7);
  }
}

uint64_t LM::TrialParameters::operator==(const std::__fs::filesystem::path *a1, std::__fs::filesystem::path::__string_view a2)
{
  const std::string_view::value_type *data;
  std::basic_string_view<_CharT, _Traits>::size_type v4;
  std::string::pointer v5;
  std::string::size_type *p_size;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  const void **v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  const void **v18;
  unsigned __int8 *v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  int v24;
  BOOL v26;
  char *v27;
  char *v28;
  BOOL v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t result;

  data = a2.__data_;
  v4 = *((_QWORD *)a2.__data_ + 1);
  if (*((char *)a2.__data_ + 23) >= 0)
  {
    a2.__size_ = *((unsigned __int8 *)a2.__data_ + 23);
  }
  else
  {
    a2.__data_ = *(const std::string_view::value_type **)a2.__data_;
    a2.__size_ = v4;
  }
  if (std::__fs::filesystem::path::__compare(a1, a2)
    || a1[1].__pn_.__r_.__value_.__r.__words[2] != *((_QWORD *)data + 5))
  {
    return 0;
  }
  v5 = a1[1].__pn_.__r_.__value_.__l.__data_;
  p_size = &a1[1].__pn_.__r_.__value_.__l.__size_;
  if (v5 != (std::string::pointer)p_size)
  {
    v7 = (_QWORD *)*((_QWORD *)data + 3);
    while (1)
    {
      v8 = v5[55];
      if ((v8 & 0x80u) == 0)
        v9 = v5[55];
      else
        v9 = *((_QWORD *)v5 + 5);
      v10 = *((unsigned __int8 *)v7 + 55);
      v11 = (char)v10;
      if ((v10 & 0x80u) != 0)
        v10 = v7[5];
      if (v9 != v10)
        return 0;
      v12 = (const void **)(v5 + 32);
      if (v11 >= 0)
        v13 = (unsigned __int8 *)(v7 + 4);
      else
        v13 = (unsigned __int8 *)v7[4];
      if ((v8 & 0x80) != 0)
      {
        if (memcmp(*v12, v13, *((_QWORD *)v5 + 5)))
          return 0;
      }
      else if (v5[55])
      {
        while (*(unsigned __int8 *)v12 == *v13)
        {
          v12 = (const void **)((char *)v12 + 1);
          ++v13;
          if (!--v8)
            goto LABEL_23;
        }
        return 0;
      }
LABEL_23:
      v14 = v5[79];
      if ((v14 & 0x80u) == 0)
        v15 = v5[79];
      else
        v15 = *((_QWORD *)v5 + 8);
      v16 = *((unsigned __int8 *)v7 + 79);
      v17 = (char)v16;
      if ((v16 & 0x80u) != 0)
        v16 = v7[8];
      if (v15 != v16)
        return 0;
      v18 = (const void **)(v5 + 56);
      if (v17 >= 0)
        v19 = (unsigned __int8 *)(v7 + 7);
      else
        v19 = (unsigned __int8 *)v7[7];
      if ((v14 & 0x80) != 0)
      {
        if (memcmp(*v18, v19, *((_QWORD *)v5 + 8)))
          return 0;
      }
      else if (v5[79])
      {
        v20 = v14 - 1;
        do
        {
          v22 = *(unsigned __int8 *)v18;
          v18 = (const void **)((char *)v18 + 1);
          v21 = v22;
          v24 = *v19++;
          v23 = v24;
          v26 = v20-- != 0;
        }
        while (v21 == v23 && v26);
        if (v21 != v23)
          return 0;
      }
      v27 = (char *)*((_QWORD *)v5 + 1);
      if (v27)
      {
        do
        {
          v28 = v27;
          v27 = *(char **)v27;
        }
        while (v27);
      }
      else
      {
        do
        {
          v28 = (char *)*((_QWORD *)v5 + 2);
          v29 = *(_QWORD *)v28 == (_QWORD)v5;
          v5 = v28;
        }
        while (!v29);
      }
      v30 = (_QWORD *)v7[1];
      if (v30)
      {
        do
        {
          v31 = v30;
          v30 = (_QWORD *)*v30;
        }
        while (v30);
      }
      else
      {
        do
        {
          v31 = (_QWORD *)v7[2];
          v29 = *v31 == (_QWORD)v7;
          v7 = v31;
        }
        while (!v29);
      }
      result = 1;
      v7 = v31;
      v5 = v28;
      if (v28 == (char *)p_size)
        return result;
    }
  }
  return 1;
}

void LM::TrialParameters::description(LM::TrialParameters *this@<X0>, _QWORD *a2@<X8>)
{
  CFTypeRef v3;
  const __CFString *v4;
  CFTypeRef cf;

  sub_19C2E394C((CFDictionaryRef *)&cf, (uint64_t)this);
  v3 = cf;
  v4 = CFCopyDescription(cf);
  sub_19C297E60(a2, v4);
  if (v4)
    CFRelease(v4);
  if (v3)
    CFRelease(v3);
}

void sub_19C2E5AA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
  const void *v10;

  if (v10)
    CFRelease(v10);
  sub_19C2E5608(&a10);
  _Unwind_Resume(a1);
}

uint64_t LMLanguageModelSetParameterValue(uint64_t a1, const __CFString *a2, __CFString *a3, CFErrorRef *a4)
{
  uint64_t v5;
  uint64_t result;
  void *__p;
  __int128 v8;

  if (a1 && a2)
  {
    v5 = *(_QWORD *)(a1 + 24);
    result = sub_19C2997C4(*(_QWORD *)(v5 + 232), a2, a3, a4);
    if ((_DWORD)result)
    {
      if (*(_BYTE *)(*(_QWORD *)(v5 + 232) + 192))
      {
        if (!*(_QWORD *)(v5 + 48))
          sub_19C3284D4(v5);
      }
      return 1;
    }
  }
  else
  {
    if (a4)
    {
      __p = operator new(0x20uLL);
      v8 = xmmword_19C46DE00;
      strcpy((char *)__p, "a required parameter was NULL");
      *a4 = sub_19C34EDD8((uint64_t)&__p);
      if (SHIBYTE(v8) < 0)
        operator delete(__p);
    }
    return 0;
  }
  return result;
}

void sub_19C2E5B94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double LMLanguageModelConditionalProbability(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  if (qword_1EDB97100 != -1)
    dispatch_once(&qword_1EDB97100, &unk_1E3D3BED0);
  return sub_19C2E5C2C(a1, a2, a3, a4, 0, 0, 1, qword_1EDB970F8);
}

double sub_19C2E5C2C(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, _QWORD *a5, _DWORD *a6, int a7, uint64_t a8)
{
  double result;
  _QWORD *v11;
  char v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15[8];
  int64x2_t v16;
  uint64_t v17;
  __int16 v18;
  char v19;
  __int128 v20;
  int v21;
  __int128 v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[3];
  _QWORD *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  result = -1.79769313e308;
  if (!a1 || a4 < 0)
    return result;
  v11 = *(_QWORD **)(a1 + 24);
  v16 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  v17 = 0;
  v18 = 0;
  v19 = 1;
  v20 = xmmword_19C46DE10;
  v21 = 0;
  v22 = xmmword_19C46DE10;
  v24 = 0;
  v25 = 0;
  v23 = 0xFFEFFFFFFFFFFFFFLL;
  v15[0] = a3;
  v15[1] = a4;
  v15[2] = a3;
  v15[3] = a4;
  v15[4] = a3;
  v15[5] = a4;
  v15[6] = a3;
  v15[7] = a4;
  v27 = 0;
  v12 = sub_19C32DD08(v11, a2 | ((unint64_t)a2 << 32), v15, (uint64_t)&v16, a8, a7, 1, v26, (__n128)xmmword_19C46DE10);
  v13 = v27;
  if (v27 == v26)
  {
    v14 = 4;
    v13 = v26;
    goto LABEL_7;
  }
  if (v27)
  {
    v14 = 5;
LABEL_7:
    (*(void (**)(void))(*v13 + 8 * v14))();
  }
  if ((v12 & 1) == 0)
    v16.i64[0] = 0xFFEFFFFFFFFFFFFFLL;
  if (a5)
    *a5 = v17;
  if (a6)
    *a6 |= v18 | (2 * HIBYTE(v18));
  return *(double *)v16.i64;
}

void sub_19C2E5D80(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = *(_QWORD **)(v2 - 64);
  if (v4 == v1)
  {
    v5 = 4;
    v4 = (_QWORD *)(v2 - 88);
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

double LMLanguageModelStaticConditionalProbability(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  if (qword_1EDB97100 != -1)
    dispatch_once(&qword_1EDB97100, &unk_1E3D3BED0);
  return sub_19C2E5C2C(a1, a2, a3, a4, 0, 0, 0, qword_1EDB970F8);
}

double LMLanguageModelConditionalProbabilityWithEffectiveOrder(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  if (qword_1EDB97100 != -1)
    dispatch_once(&qword_1EDB97100, &unk_1E3D3BED0);
  return sub_19C2E5C2C(a1, a2, a3, a4, a5, 0, 1, qword_1EDB970F8);
}

double LMLanguageModelConditionalProbabilityWithFlags(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, _QWORD *a5, _DWORD *a6)
{
  if (qword_1EDB97100 != -1)
    dispatch_once(&qword_1EDB97100, &unk_1E3D3BED0);
  return sub_19C2E5C2C(a1, a2, a3, a4, a5, a6, 1, qword_1EDB970F8);
}

double LMLanguageModelConditionalProbabilityWithFlagsAndLogs(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, _QWORD *a5, _DWORD *a6, __CFString *a7)
{
  double v14;
  uint64_t (**v16)();
  int v17;
  CFStringRef appendedString;

  if (a7)
  {
    v17 = 7;
    v16 = &off_1E3D36130;
    appendedString = CFStringCreateMutable(0, 0);
    v14 = sub_19C2E5C2C(a1, a2, a3, a4, a5, a6, 1, (uint64_t)&v16);
    CFStringAppend(a7, appendedString);
    v16 = &off_1E3D36130;
    CFRelease(appendedString);
    return v14;
  }
  else
  {
    if (qword_1EDB97100 != -1)
      dispatch_once(&qword_1EDB97100, &unk_1E3D3BED0);
    return sub_19C2E5C2C(a1, a2, a3, a4, a5, a6, 1, qword_1EDB970F8);
  }
}

void sub_19C2E6080(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, CFTypeRef cf)
{
  CFRelease(cf);
  _Unwind_Resume(a1);
}

double LMLanguageModelJointProbability(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;
  double v4;

  result = -1.79769313e308;
  if (a1)
  {
    if ((a3 & 0x8000000000000000) == 0)
    {
      v4 = 0.0;
      sub_19C32F084(*(_QWORD **)(a1 + 24), a2, a3, &v4);
      return v4;
    }
  }
  return result;
}

uint64_t LMLanguageModelConditionalProbabilityVector(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  return LMLanguageModelConditionalProbabilityVectorWithEffectiveOrders(a1, a2, a3, a4, a5, a6, 0);
}

uint64_t LMLanguageModelConditionalProbabilityVectorWithEffectiveOrders(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6, _QWORD *a7)
{
  uint64_t v7;
  unsigned int *v8;
  _QWORD *v11;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  _QWORD *v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  int64x2_t v24;
  int64x2_t v25;
  _QWORD *v26;
  int64x2_t v27;
  uint64_t v28;
  __int16 v29;
  char v30;
  __int128 v31;
  int v32;
  __int128 v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD v45[3];
  _QWORD *v46;
  uint64_t v47;

  v7 = 0;
  v47 = *MEMORY[0x1E0C80C00];
  if (a6)
  {
    v8 = a2;
    if (a2)
    {
      if (a1 && (a5 & 0x8000000000000000) == 0)
      {
        v11 = a6;
        v13 = a3;
        v26 = *(_QWORD **)(a1 + 24);
        if (qword_1EDB97100 == -1)
        {
          if (a3 >= 1)
          {
LABEL_7:
            v14 = qword_1EDB970F8;
            if (a7)
            {
              v24 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
              LODWORD(v7) = 1;
              while (1)
              {
                v27 = v24;
                v28 = 0;
                v29 = 0;
                v30 = 1;
                v31 = xmmword_19C46DE10;
                v32 = 0;
                v33 = xmmword_19C46DE10;
                v34 = 0xFFEFFFFFFFFFFFFFLL;
                v35 = 0;
                v36 = 0;
                v17 = *v8++;
                v37 = a4;
                v38 = a5;
                v39 = a4;
                v40 = a5;
                v41 = a4;
                v42 = a5;
                v43 = a4;
                v44 = a5;
                v46 = 0;
                v18 = sub_19C32DD08(v26, v17 | ((unint64_t)v17 << 32), &v37, (uint64_t)&v27, v14, 1, 1, v45, (__n128)xmmword_19C46DE10);
                v15 = v46;
                if (v46 == v45)
                {
                  v15 = v45;
                  v16 = 4;
                }
                else
                {
                  if (!v46)
                    goto LABEL_11;
                  v16 = 5;
                }
                (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_11:
                v7 = v7 & v18;
                *v11++ = v27.i64[0];
                *a7++ = v28;
                if (!--v13)
                  return v7;
              }
            }
            v25 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
            LODWORD(v7) = 1;
            while (1)
            {
              v27 = v25;
              v28 = 0;
              v29 = 0;
              v30 = 1;
              v31 = xmmword_19C46DE10;
              v32 = 0;
              v33 = xmmword_19C46DE10;
              v34 = 0xFFEFFFFFFFFFFFFFLL;
              v35 = 0;
              v36 = 0;
              v21 = *v8++;
              v37 = a4;
              v38 = a5;
              v39 = a4;
              v40 = a5;
              v41 = a4;
              v42 = a5;
              v43 = a4;
              v44 = a5;
              v46 = 0;
              v22 = sub_19C32DD08(v26, v21 | ((unint64_t)v21 << 32), &v37, (uint64_t)&v27, v14, 1, 1, v45, (__n128)xmmword_19C46DE10);
              v19 = v46;
              if (v46 == v45)
              {
                v19 = v45;
                v20 = 4;
              }
              else
              {
                if (!v46)
                  goto LABEL_18;
                v20 = 5;
              }
              (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_18:
              v7 = v7 & v22;
              *v11++ = v27.i64[0];
              if (!--v13)
                return v7;
            }
          }
        }
        else
        {
          dispatch_once(&qword_1EDB97100, &unk_1E3D3BED0);
          if (v13 >= 1)
            goto LABEL_7;
        }
        return 1;
      }
    }
  }
  return v7;
}

void sub_19C2E6384(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = *(_QWORD **)(v1 - 104);
  if (v3 == (_QWORD *)(v1 - 128))
  {
    v4 = 4;
    v3 = (_QWORD *)(v1 - 128);
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t LMLanguageModelJointProbabilityVector(uint64_t a1, int *a2, uint64_t a3, const void *a4, uint64_t a5, double *a6)
{
  BOOL v6;
  BOOL v8;
  int v9;
  _QWORD *v11;
  double *v12;
  int *v15;
  int64_t v16;
  void *v17;
  int v18;

  if (a1)
    v6 = a5 < 0;
  else
    v6 = 1;
  v8 = v6 || a2 == 0 || a6 == 0;
  v9 = v8;
  if (!v8)
  {
    v11 = *(_QWORD **)(a1 + 24);
    if ((unint64_t)a5 >= 0x3FFFFFFFFFFFFFFFLL)
      sub_19C2A18E8();
    v12 = a6;
    v15 = a2;
    v16 = 4 * a5 + 4;
    v17 = operator new(v16);
    bzero(v17, 4 * a5 + 4);
    if (a5)
      memcpy(v17, a4, 4 * a5);
    if (a3 >= 1)
    {
      do
      {
        v18 = *v15++;
        *((_DWORD *)v17 + a5) = v18;
        sub_19C32F084(v11, (uint64_t)v17, v16 >> 2, v12++);
        --a3;
      }
      while (a3);
    }
    operator delete(v17);
  }
  return v9 ^ 1u;
}

void sub_19C2E64C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void LMLanguageModelEnumeratePredictionsWithBlock(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD **v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  __int128 v14;
  int64x2_t v15;
  char v16;
  int64x2_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int16 v28;
  int v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if ((a3 & 0x8000000000000000) == 0)
    {
      v7 = *(_QWORD *)(a1 + 24);
      v17.i64[0] = a2;
      v17.i64[1] = a3;
      v18 = a2;
      v19 = a3;
      v20 = a2;
      *(_QWORD *)&v21 = a3;
      *((_QWORD *)&v21 + 1) = a2;
      v22 = a3;
      v8 = sub_19C32F274(v7, v17.i64, 0, a4, a5, 0);
      v9 = sub_19C3978B0((uint64_t)v8);
      if (v9)
      {
        v10 = (_QWORD **)v9;
        v16 = 0;
        MEMORY[0x1E0C80A78]();
        v12 = (char *)&v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
        v15 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
        v14 = xmmword_19C46DE10;
        do
        {
          if (!(*(unsigned int (**)(_QWORD *))(*v10[3] + 16))(v10[3]))
            break;
          v17 = v15;
          v18 = 0;
          LOWORD(v19) = 0;
          LOBYTE(v20) = 1;
          v21 = v14;
          LODWORD(v22) = 0;
          v23 = v14;
          v24 = 0xFFEFFFFFFFFFFFFFLL;
          v29 = 0;
          v26 = 0;
          v27 = 0;
          v25 = 0;
          v28 = 0;
          v13 = (*(uint64_t (**)(_QWORD *, char *, int64x2_t *))(*v10[3] + 24))(v10[3], v12, &v17);
          (*(void (**)(uint64_t, char *, uint64_t, uint64_t, char *, double))(a6 + 16))(a6, v12, v13, v27, &v16, *(double *)v17.i64);
        }
        while (!v16);
        CFRelease(v10);
      }
    }
  }
}

uint64_t LMLanguageModelCreatePredictionEnumerator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v8[8];

  if (!a1 || a3 < 0)
    return 0;
  v5 = *(_QWORD *)(a1 + 24);
  v8[0] = a2;
  v8[1] = a3;
  v8[2] = a2;
  v8[3] = a3;
  v8[4] = a2;
  v8[5] = a3;
  v8[6] = a2;
  v8[7] = a3;
  v6 = sub_19C32F274(v5, v8, 0, a4, a5, 0);
  return sub_19C3978B0((uint64_t)v6);
}

uint64_t LMPredictionEnumeratorAdvance(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(result + 24) + 16))(*(_QWORD *)(result + 24));
  return result;
}

uint64_t LMPredictionEnumeratorGetPrediction(uint64_t result, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int64x2_t v6;
  uint64_t v7;
  __int16 v8;
  char v9;
  __int128 v10;
  int v11;
  __int128 v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int16 v17;
  int v18;

  if (result)
  {
    v6 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
    v7 = 0;
    v8 = 0;
    v9 = 1;
    v10 = xmmword_19C46DE10;
    v11 = 0;
    v12 = xmmword_19C46DE10;
    v18 = 0;
    v13 = 0xFFEFFFFFFFFFFFFFLL;
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 0;
    result = (*(uint64_t (**)(_QWORD, uint64_t, int64x2_t *))(**(_QWORD **)(result + 24) + 24))(*(_QWORD *)(result + 24), a2, &v6);
    if (a3)
      *a3 = v6.i64[0];
    if (a4)
      *a4 = v16;
  }
  return result;
}

void LMPredictionEnumeratorRelease(CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
}

uint64_t LMLanguageModelGetTokenIDForString(uint64_t a1, const __CFString *a2, uint64_t a3)
{
  if (a1 && a2)
    return sub_19C318F18(*(_QWORD **)(a1 + 24), a2, a3);
  else
    return 0;
}

uint64_t LMLanguageModelGetTokenIDForUTF8String(uint64_t a1, void *__src, size_t __n, _QWORD *a4)
{
  uint64_t v4;
  _QWORD *v8;
  void **v9;
  size_t v10;
  size_t v11;
  void *__dst[2];
  unint64_t v14;

  v4 = 0;
  if (a1 && __src && __n)
  {
    if (__n >= 0x7FFFFFFFFFFFFFF8)
      sub_19C2A1A54();
    v8 = *(_QWORD **)(a1 + 24);
    if (__n >= 0x17)
    {
      v10 = (__n & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((__n | 7) != 0x17)
        v10 = __n | 7;
      v11 = v10 + 1;
      v9 = (void **)operator new(v10 + 1);
      __dst[1] = (void *)__n;
      v14 = v11 | 0x8000000000000000;
      __dst[0] = v9;
    }
    else
    {
      HIBYTE(v14) = __n;
      v9 = __dst;
    }
    memcpy(v9, __src, __n);
    *((_BYTE *)v9 + __n) = 0;
    v4 = sub_19C31939C(v8, (uint64_t)__dst, a4);
    if (SHIBYTE(v14) < 0)
      operator delete(__dst[0]);
  }
  return v4;
}

void sub_19C2E6884(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

CFStringRef LMLanguageModelCreateStringForTokenID(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  void **v3;
  CFStringRef v4;
  void *__p[2];
  unsigned __int8 v7;

  if (!a1)
    return 0;
  sub_19C319420(*(_QWORD **)(a1 + 24), a2, (uint64_t)__p);
  v2 = v7;
  if ((v7 & 0x80u) != 0)
    v2 = (unint64_t)__p[1];
  if (v2)
  {
    if ((v7 & 0x80u) == 0)
      v3 = __p;
    else
      v3 = (void **)__p[0];
    v4 = CFStringCreateWithCString(0, (const char *)v3, 0x8000100u);
    if ((v7 & 0x80) != 0)
      goto LABEL_12;
  }
  else
  {
    v4 = 0;
    if ((v7 & 0x80) != 0)
LABEL_12:
      operator delete(__p[0]);
  }
  return v4;
}

void sub_19C2E6934(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t LMLanguageModelAddTokenForString(uint64_t a1, const __CFString *a2, int *a3)
{
  if (a1 && a2)
    return sub_19C32F738(*(_QWORD *)(a1 + 24), a2, a3);
  else
    return 0;
}

void LMLanguageModelRecordTokenUsageWithDifferentialPrivacy(uint64_t a1, const __CFString *a2)
{
  if (a1)
  {
    if (a2)
      sub_19C32F7E8(*(_QWORD **)(a1 + 24), a2);
  }
}

void LMLanguageModelRecordRevisedTokenUsageWithDifferentialPrivacy(uint64_t a1, const __CFString *a2)
{
  if (a1)
  {
    if (a2)
      sub_19C32F9D8(*(_QWORD **)(a1 + 24), a2);
  }
}

uint64_t LMLanguageModelRemoveTokenForString(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  if (!a1)
    return 0;
  v2 = *(_QWORD *)(a1 + 24);
  if (!*(_BYTE *)(*(_QWORD *)(v2 + 232) + 192))
    return 0;
  v3 = *(_QWORD *)(v2 + 48);
  v4 = *(_QWORD *)(v3 + 560);
  v5 = *(std::__shared_weak_count **)(v3 + 568);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v8 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v4 + 16))(v4, a2, 0);
  v9 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 136))(v4, v8);
  if ((_DWORD)v9)
  {
    v10 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 544);
    std::mutex::lock((std::mutex *)(v10 + 96));
    *(_BYTE *)(v10 + 24) = 1;
    std::mutex::unlock((std::mutex *)(v10 + 96));
  }
  if (v5)
  {
    v11 = (unint64_t *)&v5->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return v9;
}

void sub_19C2E6A7C(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t LMLanguageModelAddOrUpdateTokenWithAttributes(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;

  if (!a1)
    return 3;
  v1 = *(_QWORD *)(a1 + 24);
  if (!*(_BYTE *)(*(_QWORD *)(v1 + 232) + 192))
    return 3;
  v2 = *(_QWORD *)(v1 + 48);
  v3 = *(_QWORD *)(v2 + 560);
  v4 = *(std::__shared_weak_count **)(v2 + 568);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 248))(v3);
  if (v4)
  {
    v8 = (unint64_t *)&v4->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v7 <= 1)
  {
    v10 = *(_QWORD *)(*(_QWORD *)(v1 + 48) + 544);
    std::mutex::lock((std::mutex *)(v10 + 96));
    *(_BYTE *)(v10 + 24) = 1;
    std::mutex::unlock((std::mutex *)(v10 + 96));
  }
  return v7;
}

void sub_19C2E6B90(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t LMLanguageModelUpdateAttributesForToken(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  int v7;
  int v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (!a1)
    return 0;
  v1 = *(_QWORD *)(a1 + 24);
  if (!*(_BYTE *)(*(_QWORD *)(v1 + 232) + 192))
    return 0;
  v2 = *(_QWORD *)(v1 + 48);
  v3 = *(_QWORD *)(v2 + 560);
  v4 = *(std::__shared_weak_count **)(v2 + 568);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 256))(v3);
  v8 = v7;
  if (v4)
  {
    v9 = (unint64_t *)&v4->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      if (v8)
        goto LABEL_11;
      return 0;
    }
  }
  if (!v7)
    return 0;
LABEL_11:
  v11 = *(_QWORD *)(*(_QWORD *)(v1 + 48) + 544);
  std::mutex::lock((std::mutex *)(v11 + 96));
  v12 = 1;
  *(_BYTE *)(v11 + 24) = 1;
  std::mutex::unlock((std::mutex *)(v11 + 96));
  return v12;
}

void sub_19C2E6CA4(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

__CFDictionary *LMLanguageModelCopyTokenAttributes(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __CFDictionary *Mutable;
  unint64_t *v9;
  unint64_t v10;
  uint64_t *v11;
  const __CFString *v12;
  const char *v13;
  CFStringRef v14;
  const char *v15;
  const __CFString *v16;
  const __CFString *v17;
  uint64_t *v18;
  uint64_t *v19;
  BOOL v20;
  __CFDictionary *v21;
  uint64_t *v22;
  const char *v24;
  CFStringRef v25;
  const char *v26;
  CFStringRef v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31[2];
  uint64_t *v32;
  uint64_t v33[2];

  if (!a1)
    return 0;
  v2 = *(_QWORD *)(a1 + 24);
  if ((a2 & 0x40000000) == 0)
  {
    if (*(_BYTE *)(*(_QWORD *)(v2 + 232) + 192))
    {
      v3 = *(_QWORD *)(v2 + 48);
      v4 = *(_QWORD *)(v3 + 560);
      v5 = *(std::__shared_weak_count **)(v3 + 568);
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
      }
      Mutable = (__CFDictionary *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 264))(v4);
      if (v5)
      {
        v9 = (unint64_t *)&v5->__shared_owners_;
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
      return Mutable;
    }
    return 0;
  }
  sub_19C31BE44(v2 + 344, a2, (uint64_t *)&v30);
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v11 = v30;
  if (v30 != v31)
  {
    v12 = (const __CFString *)*MEMORY[0x1E0C9B0D0];
    do
    {
      v13 = (const char *)(v11 + 4);
      if (*((char *)v11 + 55) < 0)
        v13 = *(const char **)v13;
      v14 = CFStringCreateWithCString(0, v13, 0x8000100u);
      v15 = (const char *)(v11 + 7);
      if (*((char *)v11 + 79) < 0)
        v15 = *(const char **)v15;
      v16 = CFStringCreateWithCString(0, v15, 0x8000100u);
      if (CFStringGetLength(v16) <= 0)
        v17 = v12;
      else
        v17 = v16;
      CFDictionaryAddValue(Mutable, v14, v17);
      CFRelease(v14);
      CFRelease(v16);
      v18 = (uint64_t *)v11[1];
      if (v18)
      {
        do
        {
          v19 = v18;
          v18 = (uint64_t *)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          v19 = (uint64_t *)v11[2];
          v20 = *v19 == (_QWORD)v11;
          v11 = v19;
        }
        while (!v20);
      }
      v11 = v19;
    }
    while (v19 != v31);
  }
  if (v33[1])
  {
    v21 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v22 = v32;
    if (v32 != v33)
    {
      do
      {
        v24 = (const char *)(v22 + 4);
        if (*((char *)v22 + 55) < 0)
          v24 = *(const char **)v24;
        v25 = CFStringCreateWithCString(0, v24, 0x8000100u);
        v26 = (const char *)(v22 + 7);
        if (*((char *)v22 + 79) < 0)
          v26 = *(const char **)v26;
        v27 = CFStringCreateWithCString(0, v26, 0x8000100u);
        CFDictionaryAddValue(v21, v25, v27);
        CFRelease(v25);
        CFRelease(v27);
        v28 = (uint64_t *)v22[1];
        if (v28)
        {
          do
          {
            v29 = v28;
            v28 = (uint64_t *)*v28;
          }
          while (v28);
        }
        else
        {
          do
          {
            v29 = (uint64_t *)v22[2];
            v20 = *v29 == (_QWORD)v22;
            v22 = v29;
          }
          while (!v20);
        }
        v22 = v29;
      }
      while (v29 != v33);
    }
    CFDictionarySetValue(Mutable, (const void *)kLMAttributedTokenQualifiersKey, v21);
    CFRelease(v21);
  }
  sub_19C2E457C(v33[0]);
  sub_19C2E457C(v31[0]);
  return Mutable;
}

void sub_19C2E6FAC(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_19C2E6FEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  sub_19C2E457C(a13);
  sub_19C2E457C(a10);
  _Unwind_Resume(a1);
}

uint64_t LMLanguageModelGetIntegerAttributeValue(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  if (!a1)
    return 0;
  v1 = *(_QWORD *)(a1 + 24);
  if (!*(_BYTE *)(*(_QWORD *)(v1 + 232) + 192))
    return 0;
  v2 = *(_QWORD *)(v1 + 48);
  v3 = *(_QWORD *)(v2 + 560);
  v4 = *(std::__shared_weak_count **)(v2 + 568);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 272))(v3);
  if (v4)
  {
    v8 = (unint64_t *)&v4->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return v7;
}

void sub_19C2E70B0(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t LMLanguageModelCopyStringAttributeValue(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  if (!a1)
    return 0;
  v1 = *(_QWORD *)(a1 + 24);
  if (!*(_BYTE *)(*(_QWORD *)(v1 + 232) + 192))
    return 0;
  v2 = *(_QWORD *)(v1 + 48);
  v3 = *(_QWORD *)(v2 + 560);
  v4 = *(std::__shared_weak_count **)(v2 + 568);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 280))(v3);
  if (v4)
  {
    v8 = (unint64_t *)&v4->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return v7;
}

void sub_19C2E7190(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

void LMLanguageModelEnumerateDynamicTokensWithBlock(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  if (a1)
  {
    v3 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(*(_QWORD *)(v3 + 232) + 192))
    {
      v4 = *(_QWORD *)(v3 + 48);
      v5 = *(_QWORD *)(v4 + 560);
      v6 = *(std::__shared_weak_count **)(v4 + 568);
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldxr(p_shared_owners);
        while (__stxr(v8 + 1, p_shared_owners));
      }
      if (v5)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 88))(v5, a3);
      if (v6)
      {
        v9 = (unint64_t *)&v6->__shared_owners_;
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
    }
  }
}

void sub_19C2E7270(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

BOOL LMLanguageModelGetDynamicTokenIDRange(uint64_t a1, _DWORD *a2, unsigned int *a3)
{
  uint64_t v3;

  if (a1)
  {
    v3 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 232);
    if (a2)
      *a2 = *(_DWORD *)(v3 + 288);
    if (a3)
      *a3 = *(_DWORD *)(v3 + 292) | 0x80000000;
  }
  return a1 != 0;
}

unint64_t LMLanguageModelTokenIDisUnknown(unint64_t result, uint64_t a2)
{
  uint64_t v2;

  if (result)
  {
    v2 = *(_QWORD *)(*(_QWORD *)(result + 24) + 248);
    if (v2)
      return sub_19C3ADF68(*(_QWORD *)(v2 + 16), a2);
    else
      return 1;
  }
  return result;
}

CFDataRef LMCreateMontrealIDsFromLMTokenIDSequence(unsigned int *a1, uint64_t a2, const __CFString *a3, uint64_t a4, const __CFData *a5)
{
  CFDataRef v5;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  size_t v11;
  void *v12;
  uint64_t i;
  unsigned int v14;
  uint64_t v16;
  void *__p[2];
  uint64_t v18;
  uint64_t v19;

  v5 = a5;
  v19 = *MEMORY[0x1E0C80C00];
  if (!a5)
    return v5;
  sub_19C29CEF8(a3, __p);
  sub_19C394CD0(&v16, (uint64_t)__p);
  v8 = v16;
  if (SHIBYTE(v18) < 0)
    operator delete(__p[0]);
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 48))(v8);
  v10 = v9 * a2;
  __p[0] = 0;
  __p[1] = 0;
  v18 = 0;
  if (v9 * a2)
  {
    if (v10 >> 62)
      sub_19C2A18E8();
    v11 = 4 * v10;
    v12 = operator new(4 * v10);
    bzero(v12, v11);
    i = 0;
    if (!a2)
      goto LABEL_8;
    goto LABEL_7;
  }
  v12 = 0;
  for (i = 0; a2; --a2)
  {
LABEL_7:
    v14 = *a1++;
    i += (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v8 + 32))(v8, v14, (uint64_t)v12 + 4 * i, v9);
  }
LABEL_8:
  *(_QWORD *)v5 = i;
  v5 = CFDataCreate(0, (const UInt8 *)v12, 4 * i);
  if (v12)
    operator delete(v12);
  (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  return v5;
}

void sub_19C2E746C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;
  void *v17;

  if (v17)
    operator delete(v17);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  _Unwind_Resume(a1);
}

void LMLanguageModelEnumerateCompletionsForPrefixWithBlock(uint64_t a1, const __CFString *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  _OWORD v10[4];

  if (a1)
  {
    if (a2)
    {
      v5 = *(_QWORD *)(a1 + 24);
      memset(v10, 0, sizeof(v10));
      sub_19C31A4AC(&v9, *(_QWORD *)(v5 + 8), *(std::__shared_weak_count **)(v5 + 16), (uint64_t *)v10, 0, a2, 0);
      v6 = v9;
      if (v9)
      {
        v8 = 0;
        do
        {
          if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6) & 1) == 0)
            break;
          *(_QWORD *)&v10[0] = 0;
          v7 = (*(uint64_t (**)(uint64_t, _OWORD *, _QWORD))(*(_QWORD *)v6 + 24))(v6, v10, 0);
          (*(void (**)(uint64_t, uint64_t, char *, double))(a4 + 16))(a4, v7, &v8, *(double *)v10);
        }
        while (!v8);
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      }
    }
  }
}

void sub_19C2E7650(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t LMLanguageModelTokenSequenceIsBlocklisted(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD **v6;
  unint64_t v7;

  if (!a1)
    return 0;
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD ***)(v5 + 184);
  v7 = *(_QWORD *)(v5 + 192) - (_QWORD)v6;
  if (v7 >= 0x11)
    __assert_rtn("LMLanguageModelTokenSequenceIsBlocklisted", "LMLanguageModel.cpp", 438, "compositeLanguageModel->getLocaleResources().size() <= 1 && \"LMLanguageModelTokenSequenceIsBlocklisted() is not supported for multilingual models\"");
  if (v7 == 16)
    return sub_19C32FB3C(v5, a2, a3, a4, a5, 0, 1, *v6);
  else
    return 0;
}

BOOL LMLanguageModelAdaptationIsEnabled(_BOOL8 result)
{
  if (result)
    return *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 232) + 192) != 0;
  return result;
}

_QWORD *LMLanguageModelPreheatResources(_QWORD *result)
{
  _QWORD *v1;
  uint64_t *v2;
  uint64_t *i;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *j;
  uint64_t v7;
  uint64_t v8[8];

  if (result)
  {
    v1 = (_QWORD *)result[3];
    v2 = (uint64_t *)v1[16];
    for (i = (uint64_t *)v1[17]; v2 != i; result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4))
    {
      v4 = *v2;
      v2 += 2;
    }
    v5 = (uint64_t *)v1[19];
    for (j = (uint64_t *)v1[20]; v5 != j; result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7))
      v7 = *v5++;
    if (*(_BYTE *)(v1[29] + 360))
    {
      v8[0] = (uint64_t)&unk_19C46E4FC;
      v8[1] = 1;
      v8[2] = (uint64_t)&unk_19C46E4FC;
      v8[3] = 1;
      v8[4] = (uint64_t)&unk_19C46E4FC;
      v8[5] = 1;
      v8[6] = (uint64_t)&unk_19C46E4FC;
      v8[7] = 1;
      result = sub_19C32F274((uint64_t)v1, v8, 0, 0, 1uLL, 0);
      if (result)
        return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
    }
  }
  return result;
}

uint64_t LMLanguageModelPreheatContexts(uint64_t result)
{
  if (!result)
    __assert_rtn("LMLanguageModelPreheatContexts", "LMLanguageModel.cpp", 500, "false && \"NULL language model reference\"");
  return result;
}

void LMLanguageModelIncrementUsageCount(uint64_t a1, int a2, uint64_t a3, _DWORD *a4, unint64_t a5)
{
  if (a1)
    sub_19C32FE80(*(_QWORD **)(a1 + 24), a2, 0, a3, a4, a5);
}

void LMLanguageModelIncrementUsageCountWithEffectiveTime(uint64_t a1, int a2, uint64_t a3, _DWORD *a4, unint64_t a5, double a6)
{
  double v6;

  v6 = a6;
  if (a1)
    sub_19C32FE80(*(_QWORD **)(a1 + 24), a2, &v6, a3, a4, a5);
}

void LMLanguageModelDecrementUsageCount(uint64_t a1, int a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (a1)
    sub_19C3300C8(*(_QWORD **)(a1 + 24), a2, a3, a4, a5);
}

void LMLanguageModelRegisterNegativeEvidenceForToken(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1)
    sub_19C330268(*(_QWORD **)(a1 + 24), a3);
}

float LMLanguageModelGetUsageCount(uint64_t a1, uint64_t a2, uint64_t a3, __n128 a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int32 v8;

  a4.n128_u32[0] = 0;
  if (a1)
  {
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 272);
    if (v4)
    {
      v8 = 0;
      v5 = *(_QWORD *)(v4 + 24);
      if (*(_BYTE *)(v5 + 401))
        v6 = 2;
      else
        v6 = 1;
      (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, unsigned __int32 *, _QWORD, __n128))(**(_QWORD **)(v4 + 8) + 104))(*(_QWORD *)(v4 + 8), a2, a3, v5 + 88, v6, &v8, 0, a4);
      a4.n128_u32[0] = v8;
    }
  }
  return a4.n128_f32[0];
}

double LMLanguageModelGetLastOfflineAdaptationTime(uint64_t a1)
{
  double v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  double *v7;

  v1 = 0.0;
  if (a1)
  {
    v2 = *(_QWORD **)(a1 + 24);
    v3 = v2[29];
    if (*(_BYTE *)(v3 + 192))
    {
      v4 = v2[34];
      if (v4)
      {
        v5 = *(_QWORD *)(v2[6] + 544);
        v6 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v4 + 8) + 72))(*(_QWORD *)(v4 + 8), v3 + 88);
        std::mutex::lock((std::mutex *)(v5 + 96));
        if (v6 == 2)
        {
          v7 = (double *)(v5 + 80);
        }
        else
        {
          if (v6 != 1)
          {
LABEL_9:
            std::mutex::unlock((std::mutex *)(v5 + 96));
            return v1;
          }
          v7 = (double *)(v5 + 72);
        }
        v1 = *v7;
        goto LABEL_9;
      }
    }
  }
  return v1;
}

double LMLanguageModelGetLastFlushTime(uint64_t a1)
{
  double v1;
  uint64_t v2;
  uint64_t v3;

  v1 = 0.0;
  if (a1)
  {
    v2 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(*(_QWORD *)(v2 + 232) + 192))
    {
      v3 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 544);
      std::mutex::lock((std::mutex *)(v3 + 96));
      v1 = *(double *)(v3 + 88);
      std::mutex::unlock((std::mutex *)(v3 + 96));
    }
  }
  return v1;
}

BOOL LMLanguageModelShouldAdaptToParagraph(_BOOL8 result, const __CFString *a2, CFIndex a3, CFIndex a4)
{
  if (result)
    return sub_19C3304A8(*(uint64_t **)(result + 24), a2, a3, a4);
  return result;
}

BOOL LMLanguageModelShouldAdaptToTokenSequence(_BOOL8 result, unsigned int *a2, unint64_t a3)
{
  if (result)
    return sub_19C3306A4(*(uint64_t **)(result + 24), a2, a3);
  return result;
}

void LMLanguageModelFlushDynamicData(uint64_t a1, char a2)
{
  uint64_t v3;
  std::recursive_mutex *v4;

  if (a1)
  {
    v3 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(*(_QWORD *)(v3 + 232) + 192))
    {
      sub_19C343528(*(_QWORD *)(v3 + 48));
      v4 = *(std::recursive_mutex **)(v3 + 464);
      if (v4)
      {
        std::recursive_mutex::lock(*(std::recursive_mutex **)(v3 + 464));
        sub_19C343528(v4[2].__m_.__sig);
        std::recursive_mutex::unlock(v4);
      }
    }
    if ((a2 & 1) != 0)
      sub_19C3307E4((_QWORD *)v3);
  }
}

void sub_19C2E7A74(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void LMLanguageModelResetDynamicData(uint64_t a1, char a2)
{
  if (a1)
    sub_19C330C40(*(_QWORD *)(a1 + 24), a2);
}

void LMLanguageModelAddConversationHistory(uint64_t a1, const __CFString *a2, _DWORD *a3, uint64_t a4)
{
  if (a1)
    sub_19C330F68(*(_QWORD **)(a1 + 24), a2, a3, a4);
}

void LMLanguageModelResetConversationHistory(uint64_t a1)
{
  if (a1)
    sub_19C330B68(*(_QWORD **)(a1 + 24));
}

_QWORD *LMLanguageModelPerformMaintenance()
{
  uint64_t v0;
  NSObject *v1;
  _QWORD *result;
  uint64_t v3;
  _QWORD v4[5];
  _QWORD block[5];
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E3D389A8;
  v6[1] = CFAbsoluteTimeGetCurrent();
  v0 = MEMORY[0x1E0C809B0];
  v7 = v6;
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = sub_19C343184;
  v4[3] = &unk_1E3D3A3C8;
  v4[4] = v6;
  v1 = sub_19C341C28();
  block[0] = v0;
  block[1] = 0x40000000;
  block[2] = sub_19C3431AC;
  block[3] = &unk_1E3D3A568;
  block[4] = v4;
  dispatch_sync(v1, block);
  result = v7;
  if (v7 == v6)
  {
    v3 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_19C2E7BB8()
{
  JUMPOUT(0x1A1AD355CLL);
}

_QWORD *sub_19C2E7BCC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E3D389A8;
  result[1] = v3;
  return result;
}

uint64_t sub_19C2E7C00(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E3D389A8;
  a2[1] = v2;
  return result;
}

void sub_19C2E7C1C(uint64_t a1, uint64_t a2)
{
  double v3;
  os_signpost_id_t v4;
  unint64_t v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  const __CFLocale *v9;
  std::mutex *v10;
  const __CFString *Value;
  const __CFString *v12;
  CFComparisonResult v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  void **v19;
  const __CFDictionary *v20;
  NSObject *v21;
  NSObject *v22;
  const __CFString *v23;
  void **v24;
  void *__p[2];
  char v26;
  _QWORD buf[4];

  buf[3] = *MEMORY[0x1E0C80C00];
  v3 = *(double *)(a1 + 8);
  if (qword_1EDB971E0 != -1)
    dispatch_once(&qword_1EDB971E0, &unk_1E3D3AC10);
  v4 = os_signpost_id_generate((os_log_t)qword_1EDB971D8);
  if (qword_1EDB971E0 != -1)
    dispatch_once(&qword_1EDB971E0, &unk_1E3D3AC10);
  v5 = v4 - 1;
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v6 = qword_1EDB971D8;
    if (os_signpost_enabled((os_log_t)qword_1EDB971D8))
    {
      LOWORD(__p[0]) = 0;
      _os_signpost_emit_with_name_impl(&dword_19C291000, v6, OS_SIGNPOST_INTERVAL_BEGIN, v4, "PerformMaintenance", (const char *)&unk_19C47C5B5, (uint8_t *)__p, 2u);
    }
  }
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 640) + 144))(*(_QWORD *)(a2 + 640)) & 1) != 0)
  {
    std::mutex::lock((std::mutex *)(a2 + 664));
    (*(void (**)(_QWORD, _QWORD, double))(**(_QWORD **)(a2 + 560) + 176))(*(_QWORD *)(a2 + 560), *(_QWORD *)(a2 + 640), v3);
    std::mutex::unlock((std::mutex *)(a2 + 664));
    if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a2 + 640) + 192))(*(_QWORD *)(a2 + 640)))
    {
      v7 = *(_QWORD *)(a2 + 544);
      std::mutex::lock((std::mutex *)(v7 + 96));
      *(_BYTE *)(v7 + 24) = 1;
      std::mutex::unlock((std::mutex *)(v7 + 96));
    }
    sub_19C3432AC((uint64_t *)a2, 0, v3);
    std::mutex::lock((std::mutex *)(a2 + 664));
    v8 = *(_QWORD *)(a2 + 544);
    v9 = *(const __CFLocale **)(a2 + 32);
    v10 = (std::mutex *)(v8 + 96);
    std::mutex::lock((std::mutex *)(v8 + 96));
    Value = (const __CFString *)CFLocaleGetValue(v9, (CFLocaleKey)*MEMORY[0x1E0C9B088]);
    if (!*(_BYTE *)(v8 + 25))
    {
      v12 = Value;
      if (Value)
      {
        if (CFStringCompare(Value, CFSTR("ja"), 0))
        {
          v13 = CFStringCompare(v12, CFSTR("zh"), 0);
          std::mutex::unlock((std::mutex *)(v8 + 96));
          if (v13 == kCFCompareEqualTo)
          {
LABEL_17:
            std::mutex::unlock((std::mutex *)(a2 + 664));
            v16 = *(unsigned int *)(a2 + 360);
            std::mutex::lock((std::mutex *)(a2 + 664));
            v17 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 640) + 152))(*(_QWORD *)(a2 + 640), v16);
            if ((v17 & 1) != 0)
            {
              v18 = *(_QWORD *)(a2 + 544);
              std::mutex::lock((std::mutex *)(v18 + 96));
              *(CFAbsoluteTime *)(v18 + 64) = CFAbsoluteTimeGetCurrent();
              *(_BYTE *)(v18 + 24) = 1;
              std::mutex::unlock((std::mutex *)(v18 + 96));
              (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(a2 + 560) + 152))(*(_QWORD *)(a2 + 560), *(_QWORD *)(a2 + 640), a2 + 40);
            }
            std::mutex::unlock((std::mutex *)(a2 + 664));
            sub_19C343528(a2);
            v19 = (void **)MEMORY[0x1E0C9AE50];
            if (!v17)
              v19 = (void **)MEMORY[0x1E0C9AE40];
            __p[0] = *v19;
            v20 = CFDictionaryCreate(0, (const void **)&kLMLanguageModelDidPerformPruningKey, (const void **)__p, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
            buf[0] = v20;
            CFNotificationCenterPostNotification(*(CFNotificationCenterRef *)(a2 + 656), CFSTR("MaintenanceNotification"), (const void *)a2, v20, 0);
            if (v20)
              CFRelease(v20);
            goto LABEL_28;
          }
          (*(void (**)(_QWORD))(**(_QWORD **)(a2 + 640) + 184))(*(_QWORD *)(a2 + 640));
          v14 = *(_QWORD *)(a2 + 544);
          std::mutex::lock((std::mutex *)(v14 + 96));
          *(_QWORD *)(v14 + 72) = 0;
          *(_BYTE *)(v14 + 25) = 1;
          std::mutex::unlock((std::mutex *)(v14 + 96));
          v15 = *(_QWORD *)(a2 + 544);
          v10 = (std::mutex *)(v15 + 96);
          std::mutex::lock((std::mutex *)(v15 + 96));
          *(_BYTE *)(v15 + 24) = 1;
        }
      }
    }
    std::mutex::unlock(v10);
    goto LABEL_17;
  }
  if (qword_1EE41C1A8 != -1)
    dispatch_once(&qword_1EE41C1A8, &unk_1E3D3A4C8);
  v21 = qword_1EE41C1A0;
  if (os_log_type_enabled((os_log_t)qword_1EE41C1A0, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(__p[0]) = 0;
    _os_log_impl(&dword_19C291000, v21, OS_LOG_TYPE_DEFAULT, "resetting dynamic data due to validation failure", (uint8_t *)__p, 2u);
  }
  sub_19C342CA4(a2);
LABEL_28:
  if (qword_1EDB971E0 == -1)
  {
    if (v5 > 0xFFFFFFFFFFFFFFFDLL)
      return;
  }
  else
  {
    dispatch_once(&qword_1EDB971E0, &unk_1E3D3AC10);
    if (v5 > 0xFFFFFFFFFFFFFFFDLL)
      return;
  }
  v22 = qword_1EDB971D8;
  if (os_signpost_enabled((os_log_t)qword_1EDB971D8))
  {
    v23 = (const __CFString *)MEMORY[0x1A1AD2A04](*(_QWORD *)(a2 + 32));
    sub_19C29CEF8(v23, __p);
    if (v26 >= 0)
      v24 = __p;
    else
      v24 = (void **)__p[0];
    LODWORD(buf[0]) = 136315138;
    *(_QWORD *)((char *)buf + 4) = v24;
    _os_signpost_emit_with_name_impl(&dword_19C291000, v22, OS_SIGNPOST_INTERVAL_END, v4, "PerformMaintenance", "locale=%s", (uint8_t *)buf, 0xCu);
    if (v26 < 0)
      operator delete(__p[0]);
  }
}

void sub_19C2E80BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  std::mutex *v13;
  std::mutex *v14;

  std::mutex::unlock(v14);
  std::mutex::unlock(v13);
  _Unwind_Resume(a1);
}

uint64_t sub_19C2E8128(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "Z50LMLanguageModelPerformMaintenanceWithEffectiveTimeE3$_0"
    || ((v3 & (unint64_t)"Z50LMLanguageModelPerformMaintenanceWithEffectiveTimeE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "Z50LMLanguageModelPerformMaintenanceWithEffectiveTimeE3$_0")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z50LMLanguageModelPerformMaintenanceWithEffectiveTimeE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *sub_19C2E817C()
{
  return &unk_1E3D33460;
}

_QWORD *LMLanguageModelPerformMaintenanceWithEffectiveTime(double a1)
{
  uint64_t v1;
  NSObject *v2;
  _QWORD *result;
  uint64_t v4;
  _QWORD v5[5];
  _QWORD block[5];
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v7[0] = &off_1E3D389A8;
  *(double *)&v7[1] = a1;
  v1 = MEMORY[0x1E0C809B0];
  v8 = v7;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 0x40000000;
  v5[2] = sub_19C343184;
  v5[3] = &unk_1E3D3A3C8;
  v5[4] = v7;
  v2 = sub_19C341C28();
  block[0] = v1;
  block[1] = 0x40000000;
  block[2] = sub_19C3431AC;
  block[3] = &unk_1E3D3A568;
  block[4] = v5;
  dispatch_sync(v2, block);
  result = v8;
  if (v8 == v7)
  {
    v4 = 4;
    result = v7;
  }
  else
  {
    if (!v8)
      return result;
    v4 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
}

void LMLanguageModelAddObserver(uint64_t a1, const void *a2, void (__cdecl *a3)(CFNotificationCenterRef, void *, CFNotificationName, const void *, CFDictionaryRef))
{
  uint64_t v3;

  if (a1)
  {
    v3 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(*(_QWORD *)(v3 + 232) + 192))
      CFNotificationCenterAddObserver(*(CFNotificationCenterRef *)(*(_QWORD *)(v3 + 48) + 656), a2, a3, CFSTR("MaintenanceNotification"), *(const void **)(v3 + 48), CFNotificationSuspensionBehaviorHold);
  }
}

void LMLanguageModelRemoveObserver(uint64_t a1, const void *a2)
{
  uint64_t v2;

  if (a1)
  {
    v2 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(*(_QWORD *)(v2 + 232) + 192))
      CFNotificationCenterRemoveObserver(*(CFNotificationCenterRef *)(*(_QWORD *)(v2 + 48) + 656), a2, CFSTR("MaintenanceNotification"), *(const void **)(v2 + 48));
  }
}

void LMLanguageModelRemoveModelBundlesInDirectory(const __CFURL *a1)
{
  _QWORD v1[21];

  sub_19C2E15E8(a1, v1);
}

void sub_19C2E830C()
{
  const __CFURL *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  NSObject *v4;
  int v5;
  size_t v6;
  unint64_t v7;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;
  const char *v12;
  void **v13;
  size_t v14;
  int64_t v15;
  _QWORD v16[5];
  __int128 v17;
  uint64_t v18;
  _QWORD v19[4];
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  stat v24;

  v2 = MEMORY[0x1E0C809B0];
  v19[0] = MEMORY[0x1E0C809B0];
  v19[1] = 1174405120;
  v19[2] = sub_19C343B6C;
  v19[3] = &unk_1E3D3A3E8;
  if (SHIBYTE(v23) < 0)
  {
    sub_19C2B5238(&v20, (void *)v22, *((unint64_t *)&v22 + 1));
  }
  else
  {
    v20 = v22;
    v21 = v23;
  }
  v3 = sub_19C341C28();
  *(_QWORD *)&v24.st_dev = v2;
  v24.st_ino = 0x40000000;
  *(_QWORD *)&v24.st_uid = sub_19C343BFC;
  *(_QWORD *)&v24.st_rdev = &unk_1E3D3A590;
  v24.st_atimespec.tv_sec = (__darwin_time_t)v19;
  dispatch_sync(v3, &v24);
  v16[0] = v2;
  v16[1] = 1174405120;
  v16[2] = sub_19C343E94;
  v16[3] = &unk_1E3D3A458;
  if (SHIBYTE(v23) < 0)
  {
    sub_19C2B5238(&v17, (void *)v22, *((unint64_t *)&v22 + 1));
  }
  else
  {
    v17 = v22;
    v18 = v23;
  }
  v16[4] = v1;
  v4 = sub_19C341C28();
  dispatch_async(v4, v16);
  v5 = SHIBYTE(v23);
  if (v23 >= 0)
    v6 = HIBYTE(v23);
  else
    v6 = *((_QWORD *)&v22 + 1);
  v7 = v6 + 19;
  if (v6 + 19 >= 0x7FFFFFFFFFFFFFF8)
    sub_19C2A1A54();
  if (v7 >= 0x17)
  {
    v9 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v9 = v7 | 7;
    v10 = v9 + 1;
    v8 = (void **)operator new(v9 + 1);
    v14 = v6 + 19;
    v15 = v10 | 0x8000000000000000;
    v13 = v8;
  }
  else
  {
    v14 = 0;
    v15 = 0;
    v13 = 0;
    v8 = (void **)&v13;
    HIBYTE(v15) = v6 + 19;
    if (!v6)
      goto LABEL_21;
  }
  if (v5 >= 0)
    v11 = &v22;
  else
    v11 = (__int128 *)v22;
  memmove(v8, v11, v6);
LABEL_21:
  strcpy((char *)v8 + v6, "/langlikelihood.dat");
  if (v15 >= 0)
    v12 = (const char *)&v13;
  else
    v12 = (const char *)v13;
  if (!stat(v12, &v24))
    sub_19C3DF308(v0);
  if (SHIBYTE(v15) < 0)
  {
    operator delete(v13);
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
LABEL_27:
      if ((SHIBYTE(v21) & 0x80000000) == 0)
        goto LABEL_28;
      goto LABEL_33;
    }
  }
  else if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    goto LABEL_27;
  }
  operator delete((void *)v17);
  if ((SHIBYTE(v21) & 0x80000000) == 0)
  {
LABEL_28:
    if ((SHIBYTE(v23) & 0x80000000) == 0)
      return;
LABEL_34:
    operator delete((void *)v22);
    return;
  }
LABEL_33:
  operator delete((void *)v20);
  if (SHIBYTE(v23) < 0)
    goto LABEL_34;
}

void sub_19C2E8590(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a26 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a36 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((a26 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a21);
  if ((a36 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a42 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_9;
  }
LABEL_8:
  operator delete(a31);
  if ((a42 & 0x80000000) == 0)
LABEL_5:
    _Unwind_Resume(exception_object);
LABEL_9:
  operator delete(a37);
  _Unwind_Resume(exception_object);
}

uint64_t LMLanguageModelTokenHasAttributes(uint64_t a1, unsigned int a2)
{
  return (a2 >> 30) & 1;
}

void LMLanguageModelAddTransientVocabulary(uint64_t a1, uint64_t *cf)
{
  _QWORD *v3;

  if (a1)
  {
    if (cf)
    {
      v3 = *(_QWORD **)(a1 + 24);
      CFRetain(cf);
      sub_19C331178(v3, cf[3]);
    }
  }
}

void LMLanguageModelRemoveTransientVocabulary(uint64_t a1, _QWORD *cf)
{
  _QWORD *v3;
  uint64_t v4;
  char *v5;
  char *v6;
  int64_t v7;
  uint64_t v8;

  if (a1 && cf)
  {
    v3 = *(_QWORD **)(a1 + 24);
    v4 = cf[3];
    v6 = (char *)v3[3];
    v5 = (char *)v3[4];
    if (v6 != v5)
    {
      while (*(_QWORD *)v6 != v4)
      {
        v6 += 8;
        if (v6 == v5)
        {
          v6 = (char *)v3[4];
          break;
        }
      }
    }
    if (v6 != v5)
    {
      v7 = v5 - (v6 + 8);
      if (v5 != v6 + 8)
        memmove(v6, v6 + 8, v5 - (v6 + 8));
      v3[4] = &v6[v7];
      v8 = v3[31];
      if (v8)
        (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(v8 + 16) + 16) + 104))(*(_QWORD *)(*(_QWORD *)(v8 + 16) + 16), v4);
    }
    CFRelease(cf);
  }
}

void LMLanguageModelSetLexicon(uint64_t a1, const void *a2, unint64_t a3)
{
  if (a1)
  {
    if (a2)
      sub_19C331338(*(_QWORD *)(a1 + 24), a2, a3);
  }
}

void LMLanguageModelRemoveLexicon(uint64_t a1, unint64_t a2)
{
  if (a1)
    sub_19C331890(*(_QWORD **)(a1 + 24), a2);
}

uint64_t LMLanguageModelReset(uint64_t result)
{
  uint64_t v1;

  if (result)
  {
    v1 = *(_QWORD *)(*(_QWORD *)(result + 24) + 248);
    if (v1)
      return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v1 + 16) + 16) + 72))(*(_QWORD *)(*(_QWORD *)(v1 + 16) + 16));
  }
  return result;
}

CFTypeRef LMLanguageModelRetain(CFTypeRef cf)
{
  if (cf)
    CFRetain(cf);
  return cf;
}

uint64_t LMPredictionEnumeratorGetPredictionWithFlags(uint64_t result, uint64_t a2, _QWORD *a3, _QWORD *a4, _DWORD *a5)
{
  int64x2_t v8;
  uint64_t v9;
  __int16 v10;
  char v11;
  __int128 v12;
  int v13;
  __int128 v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int16 v19;
  int v20;

  if (result)
  {
    v8 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
    v9 = 0;
    v10 = 0;
    v11 = 1;
    v12 = xmmword_19C46DE10;
    v13 = 0;
    v14 = xmmword_19C46DE10;
    v20 = 0;
    v15 = 0xFFEFFFFFFFFFFFFFLL;
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v19 = 0;
    result = (*(uint64_t (**)(_QWORD, uint64_t, int64x2_t *))(**(_QWORD **)(result + 24) + 24))(*(_QWORD *)(result + 24), a2, &v8);
    if (a3)
      *a3 = v8.i64[0];
    if (a4)
      *a4 = v18;
    if (a5)
      *a5 |= v19 | (2 * HIBYTE(v19));
  }
  return result;
}

double LMStreamTokenizerPopBytes(uint64_t a1, unint64_t a2, size_t __sz)
{
  uint64_t v4;
  const uint8_t *v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  char *v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  size_t v15;
  char *v16;
  char *v17;
  __int128 v18;
  unint64_t v19;
  unsigned int v20;
  char *v21;
  char *v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char v29;
  _BYTE *v30;
  _BYTE *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  unint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  char *v41;
  char *v42;
  char *v43;
  unint64_t v44;
  uint64_t v45;
  _OWORD *v46;
  __int128 *v47;
  uint64_t v48;
  int v49;
  char *v50;
  __int128 *v51;
  __int128 *v52;
  uint64_t v53;
  __int128 *v54;
  __int128 *v55;
  __int128 v56;
  BOOL v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  BOOL v66;
  BOOL v67;
  uint64_t v69;
  uint64_t v70;
  size_t v72;
  size_t v73;

  if (!a1 || !a2)
    return *(double *)&v18;
  v4 = *(_QWORD *)(a1 + 24);
  if (HIDWORD(a2)
    || (v5 = *(const uint8_t **)(v4 + 176), v6 = *(_QWORD *)(v4 + 184) - (_QWORD)v5, v7 = v6 - a2, v6 < a2))
  {
    v7 = 0;
    *(_DWORD *)(v4 + 312) = 0;
  }
  else
  {
    *(_DWORD *)(v4 + 312) = v7;
    v20 = v7 - 1;
    if (v7 >= 1 && (char)v5[v7] <= -65)
    {
      *(_DWORD *)(v4 + 312) = v20;
      if ((char)v5[v20] <= -65)
        *(_DWORD *)(v4 + 312) = utf8_back1SafeBody(v5, 0, v20);
    }
  }
  v8 = v7;
  v10 = *(char **)(v4 + 176);
  v9 = *(char **)(v4 + 184);
  v11 = v9 - v10;
  if (v8 > v9 - v10)
  {
    v12 = *(_QWORD *)(v4 + 192);
    if (v12 - (uint64_t)v9 >= v8 - (v9 - v10))
    {
      bzero(*(void **)(v4 + 184), v8 - (v9 - v10));
      *(_QWORD *)(v4 + 184) = &v10[v8];
      goto LABEL_40;
    }
    v72 = __sz;
    if ((v8 & 0x80000000) != 0)
      sub_19C2A18E8();
    v13 = v12 - (_QWORD)v10;
    v14 = 2 * v13;
    if (2 * v13 <= v8)
      v14 = v8;
    if (v13 >= 0x3FFFFFFFFFFFFFFFLL)
      v15 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v15 = v14;
    v16 = (char *)operator new(v15);
    v17 = &v16[v11];
    bzero(&v16[v11], v8 - (v9 - v10));
    if (v9 == v10)
      goto LABEL_38;
    if (v11 < 8 || (unint64_t)(v10 - v16) < 0x20)
      goto LABEL_35;
    if (v11 >= 0x20)
    {
      v19 = v11 & 0xFFFFFFFFFFFFFFE0;
      v21 = v9 - 16;
      v22 = &v16[v9 - 16 - v10];
      v23 = v11 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v18 = *(_OWORD *)v21;
        *((_OWORD *)v22 - 1) = *((_OWORD *)v21 - 1);
        *(_OWORD *)v22 = v18;
        v22 -= 32;
        v21 -= 32;
        v23 -= 32;
      }
      while (v23);
      if (v11 == v19)
        goto LABEL_37;
      if ((v11 & 0x18) == 0)
      {
        v17 -= v19;
        v9 -= v19;
        goto LABEL_35;
      }
    }
    else
    {
      v19 = 0;
    }
    v24 = v19 - (v11 & 0xFFFFFFFFFFFFFFF8);
    v25 = &v9[-v19 - 8];
    v26 = (char *)(v25 - v10);
    do
    {
      v27 = *(_QWORD *)v25;
      v25 -= 8;
      *(_QWORD *)&v18 = v27;
      *(_QWORD *)&v26[(_QWORD)v16] = v27;
      v26 -= 8;
      v24 += 8;
    }
    while (v24);
    if (v11 == (v11 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_37;
    v17 -= v11 & 0xFFFFFFFFFFFFFFF8;
    v9 -= v11 & 0xFFFFFFFFFFFFFFF8;
LABEL_35:
    v28 = v17 - 1;
    do
    {
      v29 = *--v9;
      *v28-- = v29;
    }
    while (v9 != v10);
LABEL_37:
    v9 = v10;
    v17 = v16;
LABEL_38:
    *(_QWORD *)(v4 + 176) = v17;
    *(_QWORD *)(v4 + 184) = &v16[v8];
    *(_QWORD *)(v4 + 192) = &v16[v15];
    __sz = v72;
    if (v9)
      operator delete(v9);
    goto LABEL_40;
  }
  if (v8 < v9 - v10)
    *(_QWORD *)(v4 + 184) = &v10[v8];
LABEL_40:
  v30 = *(_BYTE **)(v4 + 256);
  v31 = *(_BYTE **)(v4 + 264);
  v32 = (v31 - v30) >> 2;
  v33 = v8 - v32;
  if (v8 > v32)
  {
    v34 = *(_QWORD *)(v4 + 272);
    if (v33 > (v34 - (uint64_t)v31) >> 2)
    {
      if ((v8 & 0x80000000) != 0)
        sub_19C2A18E8();
      v73 = __sz;
      v35 = v34 - (_QWORD)v30;
      v36 = v35 >> 1;
      if (v35 >> 1 <= v8)
        v36 = v8;
      v37 = (unint64_t)v35 >= 0x7FFFFFFFFFFFFFFCLL;
      v38 = 0x3FFFFFFFFFFFFFFFLL;
      if (!v37)
        v38 = v36;
      if (v38 >> 62)
        sub_19C2A143C();
      v39 = 4 * v38;
      v40 = operator new(4 * v38);
      v41 = &v40[4 * v32];
      v42 = &v40[v39];
      bzero(v41, 4 * v33);
      v43 = &v41[4 * v33];
      if (v31 == v30)
      {
        __sz = v73;
      }
      else
      {
        v44 = v31 - v30 - 4;
        __sz = v73;
        if (v44 < 0x2C)
          goto LABEL_103;
        if ((unint64_t)(v30 - v40) < 0x20)
          goto LABEL_103;
        v45 = (v44 >> 2) + 1;
        v46 = &v40[4 * v32 - 16];
        v47 = (__int128 *)(v31 - 16);
        v48 = v45 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v18 = *v47;
          *(v46 - 1) = *(v47 - 1);
          *v46 = v18;
          v46 -= 2;
          v47 -= 2;
          v48 -= 8;
        }
        while (v48);
        v41 -= 4 * (v45 & 0x7FFFFFFFFFFFFFF8);
        v31 -= 4 * (v45 & 0x7FFFFFFFFFFFFFF8);
        if (v45 != (v45 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_103:
          do
          {
            v49 = *((_DWORD *)v31 - 1);
            v31 -= 4;
            *((_DWORD *)v41 - 1) = v49;
            v41 -= 4;
          }
          while (v31 != v30);
        }
      }
      *(_QWORD *)(v4 + 256) = v41;
      *(_QWORD *)(v4 + 264) = v43;
      *(_QWORD *)(v4 + 272) = v42;
      if (v30)
        operator delete(v30);
      goto LABEL_63;
    }
    bzero(*(void **)(v4 + 264), 4 * v33);
    v50 = &v31[4 * v33];
    goto LABEL_59;
  }
  if (v8 < v32)
  {
    v50 = &v30[4 * v8];
LABEL_59:
    *(_QWORD *)(v4 + 264) = v50;
  }
LABEL_63:
  v51 = *(__int128 **)(v4 + 200);
  v52 = *(__int128 **)(v4 + 208);
  v53 = *(int *)(v4 + 312);
  v54 = v51;
  if (v52 != v51)
  {
    v55 = v52 - 2;
    while (*((_QWORD *)v55 + 2) + *((_QWORD *)v55 + 1) >= v53)
    {
      v18 = *v55;
      v56 = v55[1];
      *(_OWORD *)(v4 + 280) = *v55;
      *(_OWORD *)(v4 + 296) = v56;
      *(_QWORD *)(v4 + 208) = v55;
      v57 = v55 == v51;
      v55 -= 2;
      if (v57)
      {
        v54 = v51;
        goto LABEL_70;
      }
    }
    v54 = v55 + 2;
  }
LABEL_70:
  v58 = *(_QWORD *)(v4 + 288);
  if (v58 > v53)
  {
    *(_DWORD *)(v4 + 280) = 0;
    *(_QWORD *)&v18 = -1;
    *(_OWORD *)(v4 + 288) = xmmword_19C46DE20;
    v58 = -1;
    *(_QWORD *)(v4 + 304) = -1;
  }
  v59 = *(_QWORD *)(v4 + 224);
  v60 = *(_QWORD *)(v4 + 232);
  if (v60 != v59)
  {
    v61 = 0;
    v62 = v60 - v59 - 32;
    do
    {
      if (*(_QWORD *)(v60 - 8) <= v53)
      {
        v63 = *(_QWORD *)(v60 - 24);
        v64 = *(_QWORD *)(v4 + 296) + v58;
        v65 = *(_QWORD *)(v60 - 16) + v63;
        v66 = v63 < v58 || v64 <= v63;
        v67 = v66 || v65 <= v58;
        if (v67 || v65 > v64)
          break;
      }
      v60 -= 32;
      *(_QWORD *)(v4 + 232) = v60;
      v69 = *(_QWORD *)(v4 + 248);
      if (v69 >= v62 >> 5)
      {
        *(_QWORD *)(v4 + 248) = v69 - 1;
        ++v61;
      }
      v62 -= 32;
    }
    while (v60 != v59);
    if (v61 >= 1)
    {
      (*(void (**)(size_t))(__sz + 16))(__sz);
      v51 = *(__int128 **)(v4 + 200);
      v54 = *(__int128 **)(v4 + 208);
    }
  }
  if (v51 == v54 || !*(_QWORD *)(v4 + 296))
  {
    *(_DWORD *)(v4 + 280) = 0;
    *(_QWORD *)&v18 = -1;
    *(_OWORD *)(v4 + 288) = xmmword_19C46DE20;
    *(_QWORD *)(v4 + 304) = -1;
  }
  else
  {
    v70 = *(_QWORD *)(v4 + 288);
    if (v70 != -1)
      *(_QWORD *)(v4 + 296) = *(int *)(v4 + 312) - v70;
  }
  return *(double *)&v18;
}

double LMStreamTokenizerReset(uint64_t a1)
{
  uint64_t v1;
  double result;

  if (a1)
  {
    v1 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(v1 + 184) = *(_QWORD *)(v1 + 176);
    *(_QWORD *)(v1 + 208) = *(_QWORD *)(v1 + 200);
    *(_QWORD *)(v1 + 232) = *(_QWORD *)(v1 + 224);
    *(_QWORD *)(v1 + 264) = *(_QWORD *)(v1 + 256);
    *(_DWORD *)(v1 + 280) = 0;
    result = NAN;
    *(_OWORD *)(v1 + 288) = xmmword_19C46DE20;
    *(_QWORD *)(v1 + 304) = -1;
    *(_DWORD *)(v1 + 312) = 0;
    *(_QWORD *)(v1 + 248) = -1;
  }
  return result;
}

uint64_t LMLanguageModelGetOrder(uint64_t a1)
{
  _QWORD *v1;
  char *v2;
  char *v3;
  unint64_t v4;
  uint64_t result;
  char *v6;
  char *v7;
  char *v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  if (!a1)
    return -1;
  v1 = *(_QWORD **)(a1 + 24);
  v3 = (char *)v1[16];
  v2 = (char *)v1[17];
  if (v3 == v2)
  {
    v8 = (char *)v1[19];
    v7 = (char *)v1[20];
    if (v8 != v7)
    {
      v9 = v7 - v8 - 8;
      if (v9 >= 8)
      {
        v22 = (v9 >> 3) + 1;
        v10 = &v8[8 * (v22 & 0x3FFFFFFFFFFFFFFELL)];
        v23 = v8 + 8;
        v24 = -1;
        v25 = v22 & 0x3FFFFFFFFFFFFFFELL;
        v26 = -1;
        do
        {
          if (*(_QWORD *)(*(v23 - 1) + 16) > v24)
            v24 = *(_QWORD *)(*(v23 - 1) + 16);
          if (*(_QWORD *)(*v23 + 16) > v26)
            v26 = *(_QWORD *)(*v23 + 16);
          v23 += 2;
          v25 -= 2;
        }
        while (v25);
        if (v24 <= v26)
          result = v26;
        else
          result = v24;
        if (v22 == (v22 & 0x3FFFFFFFFFFFFFFELL))
          return result;
      }
      else
      {
        result = -1;
        v10 = v8;
      }
      do
      {
        v27 = *(_QWORD *)v10;
        v10 += 8;
        v28 = *(_QWORD *)(v27 + 16);
        if (v28 > result)
          result = v28;
      }
      while (v10 != v7);
      return result;
    }
    return -1;
  }
  v4 = v2 - v3 - 16;
  if (v4 < 0x10)
  {
    result = -1;
    v6 = v3;
    do
    {
LABEL_19:
      v20 = *(_QWORD *)v6;
      v6 += 16;
      v21 = *(_QWORD *)(v20 + 16);
      if (v21 > result)
        result = v21;
    }
    while (v6 != v2);
    return result;
  }
  v11 = (v4 >> 4) + 1;
  v6 = &v3[16 * (v11 & 0x1FFFFFFFFFFFFFFELL)];
  v12 = (uint64_t *)(v3 + 16);
  v13 = -1;
  v14 = v11 & 0x1FFFFFFFFFFFFFFELL;
  v15 = -1;
  do
  {
    v16 = *(v12 - 2);
    v17 = *v12;
    v12 += 4;
    v18 = *(_QWORD *)(v16 + 16);
    v19 = *(_QWORD *)(v17 + 16);
    if (v18 > v13)
      v13 = v18;
    if (v19 > v15)
      v15 = v19;
    v14 -= 2;
  }
  while (v14);
  if (v13 <= v15)
    result = v15;
  else
    result = v13;
  if (v11 != (v11 & 0x1FFFFFFFFFFFFFFELL))
    goto LABEL_19;
  return result;
}

void LMLanguageModelSetLogLevel(int a1)
{
  if (qword_1EDB97100 != -1)
    dispatch_once(&qword_1EDB97100, &unk_1E3D3BED0);
  *(_DWORD *)(qword_1EDB970F8 + 8) = a1;
}

uint64_t LMLanguageModelGetLogLevel()
{
  if (qword_1EDB97100 != -1)
    dispatch_once(&qword_1EDB97100, &unk_1E3D3BED0);
  return *(unsigned int *)(qword_1EDB970F8 + 8);
}

uint64_t LMLanguageModelDumpDynamicData(uint64_t result, const __CFURL *a2, const __CFURL *a3)
{
  uint64_t v3;
  uint64_t v6;
  void *v7;
  std::locale v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t@<X0>, uint64_t@<X1>, uint64_t@<X8>);
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (result)
  {
    v3 = *(_QWORD *)(result + 24);
    if (*(_BYTE *)(*(_QWORD *)(v3 + 232) + 192))
    {
      if (a3)
      {
        operator new();
        sub_19C2E15E8(a3, &v7);
      }
      v6 = *(_QWORD *)(v3 + 48);
      v9 = MEMORY[0x1E0C809B0];
      v10 = 0x40000000;
      v11 = sub_19C330EB4;
      v12 = &unk_1E3D3A1A0;
      v13 = v3;
      v14 = 0;
      std::mutex::lock((std::mutex *)(v6 + 664));
      sub_19C2E15E8(a2, &v8);
    }
  }
  return result;
}

void sub_19C2E9D40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _Unwind_Exception *exception_objecta, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a65;
  uint64_t a66;
  void *__p;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;

  __cxa_end_catch();
  a63 = *MEMORY[0x1E0DE4F50];
  v72 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(uint64_t *)((char *)&a63 + *(_QWORD *)(a63 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  a65 = v72;
  a66 = MEMORY[0x1E0DE4FB8] + 16;
  if (SLOBYTE(STACK[0x207]) < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1A1AD34CC](&STACK[0x218]);
  if (SLOBYTE(STACK[0x2CF]) < 0)
    operator delete((void *)STACK[0x2B8]);
  if (SLOBYTE(STACK[0x2E7]) < 0)
    operator delete((void *)STACK[0x2D0]);
  v73 = MEMORY[0x1E0DE4F40];
  v74 = *MEMORY[0x1E0DE4F40];
  STACK[0x2E8] = *MEMORY[0x1E0DE4F40];
  *(unint64_t *)((char *)&STACK[0x2E8] + *(_QWORD *)(v74 - 24)) = *(_QWORD *)(v73 + 24);
  MEMORY[0x1A1AD3238](&STACK[0x2F8]);
  std::istream::~istream();
  MEMORY[0x1A1AD34CC](&STACK[0x490]);
  *(_QWORD *)a17 = &off_1E3D34E80;
  sub_19C332918(*(char **)(a17 + 56));
  sub_19C2EAC08(*(char **)(a17 + 32));
  if (a24 < 0)
    operator delete(a19);
  MEMORY[0x1A1AD355C](a17, 0x10A1C4020241834);
  _Unwind_Resume(a1);
}

void sub_19C2E9D4C(void *a1, int a2)
{
  if (a2)
    sub_19C2CDAC8(a1);
  JUMPOUT(0x19C2E9EE0);
}

void sub_19C2E9EAC()
{
  JUMPOUT(0x19C2E9F1CLL);
}

void sub_19C2E9EB4()
{
  JUMPOUT(0x19C2E9F6CLL);
}

void sub_19C2E9EBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,...)
{
  int v35;
  uint64_t v36;
  va_list va;

  va_start(va, a35);
  if (v35 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x1E0DE4F50];
  v36 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  a19 = v36;
  a20 = MEMORY[0x1E0DE4FB8] + 16;
  if (a33 < 0)
    operator delete(a28);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1A1AD34CC]((uint64_t *)va);
  JUMPOUT(0x19C2EA014);
}

void sub_19C2E9ED4()
{
  JUMPOUT(0x19C2E9F7CLL);
}

void sub_19C2E9EE8()
{
  JUMPOUT(0x19C2E9EF0);
}

void sub_19C2E9F00()
{
  JUMPOUT(0x19C2E9F6CLL);
}

void sub_19C2E9F8C()
{
  JUMPOUT(0x19C2E9F94);
}

void sub_19C2EA000(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,std::locale a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a71;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;

  std::locale::~locale(&a25);
  a60 = *MEMORY[0x1E0DE4F50];
  v71 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(uint64_t *)((char *)&a60 + *(_QWORD *)(a60 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  a62 = v71;
  a63 = MEMORY[0x1E0DE4FB8] + 16;
  if (SLOBYTE(STACK[0x207]) < 0)
    operator delete(a71);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1A1AD34CC](&STACK[0x218]);
  if (SLOBYTE(STACK[0x2CF]) < 0)
    operator delete((void *)STACK[0x2B8]);
  if (SLOBYTE(STACK[0x2E7]) < 0)
    operator delete((void *)STACK[0x2D0]);
  v72 = MEMORY[0x1E0DE4F40];
  v73 = *MEMORY[0x1E0DE4F40];
  STACK[0x2E8] = *MEMORY[0x1E0DE4F40];
  *(unint64_t *)((char *)&STACK[0x2E8] + *(_QWORD *)(v73 - 24)) = *(_QWORD *)(v72 + 24);
  MEMORY[0x1A1AD3238](&STACK[0x2F8]);
  std::istream::~istream();
  MEMORY[0x1A1AD34CC](&STACK[0x490]);
  *(_QWORD *)a17 = &off_1E3D34E80;
  sub_19C332918(*(char **)(a17 + 56));
  sub_19C2EAC08(*(char **)(a17 + 32));
  if (SHIBYTE(a21) < 0)
    operator delete(a19);
  MEMORY[0x1A1AD355C](a17, 0x10A1C4020241834);
  _Unwind_Resume(a1);
}

uint64_t LMLanguageModelCountDynamicNgrams(uint64_t result, uint64_t a2, _DWORD *a3, _DWORD *a4, __n128 a5)
{
  float v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (result)
  {
    v7 = a5.n128_f32[0];
    v9 = *(_QWORD *)(result + 24);
    if (a3)
    {
      v10 = *(_QWORD *)(v9 + 272);
      if (v10)
      {
        result = (*(uint64_t (**)(_QWORD, uint64_t, __n128))(**(_QWORD **)(v10 + 8) + 96))(*(_QWORD *)(v10 + 8), a2, a5);
        *a3 = result;
      }
    }
    if (a4)
    {
      v11 = *(_QWORD *)(v9 + 264);
      if (v11)
      {
        result = (*(uint64_t (**)(_QWORD, uint64_t, float))(**(_QWORD **)(v11 + 8) + 96))(*(_QWORD *)(v11 + 8), a2, v7);
        *a4 = result;
      }
    }
  }
  return result;
}

void LMLanguageModelApplyExponentialDecay(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  double Current;

  if (a1)
  {
    v1 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(*(_QWORD *)(v1 + 232) + 192))
    {
      v2 = *(uint64_t **)(v1 + 48);
      Current = CFAbsoluteTimeGetCurrent();
      sub_19C3432AC(v2, 1, Current);
    }
  }
}

uint64_t LMLanguageModelGetDynamicDataSize(uint64_t a1)
{
  uint64_t v1;

  if (a1 && (v1 = *(_QWORD *)(a1 + 24), *(_BYTE *)(*(_QWORD *)(v1 + 232) + 192)))
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v1 + 48) + 640) + 40))(*(_QWORD *)(*(_QWORD *)(v1 + 48) + 640));
  else
    return 0;
}

void LMLanguageModelPrune(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  if (a1)
  {
    v2 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(*(_QWORD *)(v2 + 232) + 192))
    {
      v4 = *(_QWORD *)(v2 + 48);
      std::mutex::lock((std::mutex *)(v4 + 664));
      if (((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v4 + 640) + 152))(*(_QWORD *)(v4 + 640), a2) & 1) != 0)
      {
        v5 = *(_QWORD *)(v4 + 544);
        std::mutex::lock((std::mutex *)(v5 + 96));
        *(CFAbsoluteTime *)(v5 + 64) = CFAbsoluteTimeGetCurrent();
        *(_BYTE *)(v5 + 24) = 1;
        std::mutex::unlock((std::mutex *)(v5 + 96));
        (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v4 + 560) + 152))(*(_QWORD *)(v4 + 560), *(_QWORD *)(v4 + 640), v4 + 40);
      }
      std::mutex::unlock((std::mutex *)(v4 + 664));
    }
  }
}

void sub_19C2EA2D8(_Unwind_Exception *a1)
{
  std::mutex *v1;
  std::mutex *v2;

  std::mutex::unlock(v2);
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t LMLanguageModelConvertToInternalTokenIDs(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (!a1)
    return 0;
  v1 = *(_QWORD *)(a1 + 24);
  v2 = *(_QWORD *)(v1 + 128);
  v3 = *(_QWORD *)(v1 + 136);
  if (v2 == v3)
    return 0;
  while (*(_DWORD *)(*(_QWORD *)v2 + 48) != 12)
  {
    v2 += 16;
    if (v2 == v3)
      return 0;
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)v2 + 304) + 24))(*(_QWORD *)v2 + 304);
}

uint64_t LMLanguageModelConvertToExternalTokenIDs(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (!a1)
    return 0;
  v1 = *(_QWORD *)(a1 + 24);
  v2 = *(_QWORD *)(v1 + 128);
  v3 = *(_QWORD *)(v1 + 136);
  if (v2 == v3)
    return 0;
  while (*(_DWORD *)(*(_QWORD *)v2 + 48) != 12)
  {
    v2 += 16;
    if (v2 == v3)
      return 0;
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)v2 + 304) + 16))(*(_QWORD *)v2 + 304);
}

CFStringRef LMLanguageModelCreateExemplarCharacterStringForLocale(uint64_t a1)
{
  int v1;
  const UniChar *v2;
  CFStringRef v3;
  int v5;

  v5 = 0;
  sub_19C340038(a1, &v5);
  v1 = uset_toPattern();
  v5 = 0;
  v2 = (const UniChar *)operator new[]();
  uset_toPattern();
  if (v5 < 1)
    v3 = CFStringCreateWithCharacters(0, v2, v1);
  else
    v3 = 0;
  MEMORY[0x1A1AD3538](v2, 0x1000C80BDFB0063);
  return v3;
}

void sub_19C2EA460(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD3538](v1, 0x1000C80BDFB0063);
  _Unwind_Resume(a1);
}

uint64_t LMLanguageModelIsAppleColorEmojiCharacter(UTF32Char theChar)
{
  unsigned __int8 v2;
  uint64_t result;

  v2 = atomic_load((unsigned __int8 *)&qword_1EDB96FF8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_1EDB96FF8))
  {
    qword_1EDB97008 = CEMCreateEmojiCharacterSet();
    __cxa_guard_release(&qword_1EDB96FF8);
  }
  result = qword_1EDB97008;
  if (qword_1EDB97008)
    return CFCharacterSetIsLongCharacterMember((CFCharacterSetRef)qword_1EDB97008, theChar) != 0;
  return result;
}

void sub_19C2EA4F4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1EDB96FF8);
  _Unwind_Resume(a1);
}

uint64_t LMEnumerateAssetDataItems()
{
  return LDEnumerateAssetDataItems();
}

BOOL LMLanguageModelWireMemory(uint64_t a1)
{
  if (a1)
    sub_19C29D188(*(_QWORD **)(a1 + 24));
  return a1 != 0;
}

BOOL LMLanguageModelUnwireMemory(uint64_t a1)
{
  if (a1)
    sub_19C3319EC(*(_QWORD **)(a1 + 24));
  return a1 != 0;
}

uint64_t LMLanguageModelDynamicModelIsEmpty(uint64_t a1)
{
  uint64_t v1;

  if (a1 && (v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 272)) != 0)
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 8) + 24))(*(_QWORD *)(v1 + 8));
  else
    return 1;
}

CFStringRef LMLanguageModelCopyDynamicModelBundlePath(uint64_t a1)
{
  uint64_t v1;
  const char *v2;

  if (!a1)
    return 0;
  v1 = *(_QWORD *)(a1 + 24);
  if (!*(_BYTE *)(*(_QWORD *)(v1 + 232) + 192))
    return 0;
  v2 = *(const char **)(v1 + 48);
  if (v2[23] < 0)
    v2 = *(const char **)v2;
  return CFStringCreateWithCString(0, v2, 0x8000100u);
}

const __CFURL *LMLanguageLikelihoodModelGetUserModel(const __CFDictionary *Value)
{
  const __CFURL *result;

  if (Value)
    Value = (const __CFDictionary *)CFDictionaryGetValue(Value, (const void *)kLMLanguageModelCustomDynamicResourceDirectoryKey);
  result = sub_19C2983A4((const __CFString *)Value);
  if (result)
    sub_19C3DF308(result);
  return result;
}

double LMLanguageLikelihoodModelGetLastOfflineAdaptationTime(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  NSObject *v3;
  double v4;
  _QWORD block[7];
  uint64_t v7;
  double *v8;
  uint64_t v9;
  uint64_t v10;

  if (!a1)
    return 0.0;
  v2 = *(_QWORD *)(a1 + 24);
  v7 = 0;
  v8 = (double *)&v7;
  v9 = 0x2000000000;
  v10 = 0;
  v3 = *(NSObject **)(v2 + 280);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = sub_19C3DF25C;
  block[3] = &unk_1E3D3BB20;
  block[4] = &v7;
  block[5] = v2;
  block[6] = a2;
  dispatch_sync(v3, block);
  v4 = v8[3];
  _Block_object_dispose(&v7, 8);
  return v4;
}

void LMLanguageLikelihoodModelAddEvidenceForLanguage(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7)
{
  uint64_t v7;
  NSObject *v8;
  _QWORD block[10];
  int v10;

  if (a1)
  {
    v7 = *(_QWORD *)(a1 + 24);
    v8 = *(NSObject **)(v7 + 280);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = sub_19C3DF2E8;
    block[3] = &unk_1E3D3BAF8;
    block[4] = v7;
    v10 = a2;
    *(double *)&block[5] = a7;
    block[6] = a3;
    block[7] = a4;
    block[8] = a5;
    block[9] = a6;
    dispatch_sync(v8, block);
  }
}

void LMLanguageLikelihoodModelGetLanguagePriorProbabilities(uint64_t a1, uint64_t a2, int a3, CFDictionaryRef theDict)
{
  unint64_t Count;
  size_t v8;
  const __CFString **v9;
  void *v10;
  const __CFString **v11;
  uint64_t v12;
  NSObject *v13;
  const __CFString **v14;
  _BOOL4 v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t *v18;
  const __CFAllocator *v19;
  CFStringRef v20;
  CFNumberRef v21;
  char *v22;
  char **v23;
  BOOL v24;
  void *__p[2];
  void (*v26)(uint64_t);
  char **v27;
  char *v28[2];
  __int128 block;
  void (*v30)(uint64_t);
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t **v34;

  if (a1)
  {
    v28[0] = 0;
    v28[1] = 0;
    v27 = v28;
    if (CFDictionaryGetCount(theDict))
    {
      Count = CFDictionaryGetCount(theDict);
      if (Count)
      {
        if (Count >> 61)
          sub_19C2A18E8();
        v8 = 8 * Count;
        v9 = (const __CFString **)operator new(8 * Count);
        bzero(v9, v8);
        v10 = operator new(v8);
        v11 = &v9[v8 / 8];
        bzero(v10, v8);
      }
      else
      {
        v11 = 0;
        v9 = 0;
        v10 = 0;
      }
      __p[0] = 0;
      __p[1] = 0;
      v26 = 0;
      CFDictionaryGetKeysAndValues(theDict, (const void **)v9, (const void **)v10);
      if (v9 == v11)
      {
        v15 = 0;
      }
      else
      {
        v14 = v9;
        do
        {
          sub_19C29CEF8(*v14, &block);
          if (SHIBYTE(v26) < 0)
            operator delete(__p[0]);
          *(_OWORD *)__p = block;
          v26 = v30;
          sub_19C2EAA88((uint64_t **)&v27, (const void **)__p, (uint64_t)__p)[7] = 0;
          ++v14;
        }
        while (v14 != v11);
        v15 = SHIBYTE(v26) < 0;
      }
      v16 = *(_QWORD *)(a1 + 24);
      v17 = *(NSObject **)(v16 + 280);
      *(_QWORD *)&block = MEMORY[0x1E0C809B0];
      *((_QWORD *)&block + 1) = 0x40000000;
      v30 = sub_19C3DF29C;
      v31 = &unk_1E3D3BB40;
      v32 = v16;
      v33 = a2;
      v34 = (uint64_t **)&v27;
      dispatch_sync(v17, &block);
      if (v15)
        operator delete(__p[0]);
      if (v10)
        operator delete(v10);
      if (v9)
        operator delete(v9);
    }
    else
    {
      v12 = *(_QWORD *)(a1 + 24);
      v13 = *(NSObject **)(v12 + 280);
      *(_QWORD *)&block = MEMORY[0x1E0C809B0];
      *((_QWORD *)&block + 1) = 0x40000000;
      v30 = sub_19C3DF29C;
      v31 = &unk_1E3D3BB40;
      v32 = v12;
      v33 = a2;
      v34 = (uint64_t **)&v27;
      dispatch_sync(v13, &block);
    }
    v18 = (uint64_t *)v27;
    if (v27 != v28)
    {
      v19 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      do
      {
        *(_QWORD *)&block = v18[7];
        v20 = sub_19C2E1370((uint64_t)(v18 + 4));
        v21 = CFNumberCreate(v19, kCFNumberDoubleType, &block);
        CFDictionarySetValue(theDict, v20, v21);
        CFRelease(v20);
        CFRelease(v21);
        v22 = (char *)v18[1];
        if (v22)
        {
          do
          {
            v23 = (char **)v22;
            v22 = *(char **)v22;
          }
          while (v22);
        }
        else
        {
          do
          {
            v23 = (char **)v18[2];
            v24 = *v23 == (char *)v18;
            v18 = (uint64_t *)v23;
          }
          while (!v24);
        }
        v18 = (uint64_t *)v23;
      }
      while (v23 != v28);
    }
    sub_19C2EAC08(v28[0]);
  }
}

void sub_19C2EAA18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  void *v17;

  operator delete(v17);
  sub_19C2EAC08(a17);
  _Unwind_Resume(a1);
}

uint64_t **sub_19C2EAA88(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  int v7;
  const void *v8;
  size_t v9;
  uint64_t **v10;
  _QWORD *v11;
  const void *v12;
  const void *v13;
  int v14;
  const void *v15;
  size_t v16;
  size_t v17;
  int v18;
  int v19;
  _QWORD *v20;
  _BYTE *v21;
  uint64_t *v22;
  uint64_t *v23;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *((char *)a2 + 23);
    if (v7 >= 0)
      v8 = a2;
    else
      v8 = *a2;
    if (v7 >= 0)
      v9 = *((unsigned __int8 *)a2 + 23);
    else
      v9 = (size_t)a2[1];
    while (1)
    {
      v10 = (uint64_t **)v5;
      v13 = (const void *)v5[4];
      v11 = v5 + 4;
      v12 = v13;
      v14 = *((char *)v11 + 23);
      if (v14 >= 0)
        v15 = v11;
      else
        v15 = v12;
      if (v14 >= 0)
        v16 = *((unsigned __int8 *)v11 + 23);
      else
        v16 = v11[1];
      if (v16 >= v9)
        v17 = v9;
      else
        v17 = v16;
      v18 = memcmp(v8, v15, v17);
      if (v18)
      {
        if (v18 < 0)
          goto LABEL_8;
LABEL_22:
        v19 = memcmp(v15, v8, v17);
        if (v19)
        {
          if ((v19 & 0x80000000) == 0)
            return v10;
        }
        else if (v16 >= v9)
        {
          return v10;
        }
        v5 = v10[1];
        if (!v5)
        {
          v6 = v10 + 1;
          goto LABEL_29;
        }
      }
      else
      {
        if (v9 >= v16)
          goto LABEL_22;
LABEL_8:
        v5 = *v10;
        v6 = v10;
        if (!*v10)
          goto LABEL_29;
      }
    }
  }
  v10 = a1 + 1;
LABEL_29:
  v20 = operator new(0x40uLL);
  v21 = v20 + 4;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_19C2B5238(v21, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)v21 = *(_OWORD *)a3;
    v20[6] = *(_QWORD *)(a3 + 16);
  }
  v20[7] = 0;
  *v20 = 0;
  v20[1] = 0;
  v20[2] = v10;
  *v6 = v20;
  v22 = (uint64_t *)**a1;
  v23 = v20;
  if (v22)
  {
    *a1 = v22;
    v23 = *v6;
  }
  sub_19C2A2310(a1[1], v23);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return (uint64_t **)v20;
}

void sub_19C2EABF4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19C2EAC08(char *a1)
{
  if (a1)
  {
    sub_19C2EAC08(*(_QWORD *)a1);
    sub_19C2EAC08(*((_QWORD *)a1 + 1));
    if (a1[55] < 0)
      operator delete(*((void **)a1 + 4));
    operator delete(a1);
  }
}

uint64_t LMLanguageLikelihoodModelGetLanguageProbabilities(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  _QWORD block[9];
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  char v12;

  if (!a1)
    return 0;
  v4 = *(_QWORD *)(a1 + 24);
  v9 = 0;
  v10 = &v9;
  v11 = 0x2000000000;
  v12 = 1;
  v5 = *(NSObject **)(v4 + 280);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = sub_19C3DF2B0;
  block[3] = &unk_1E3D3BB88;
  block[4] = &v9;
  block[5] = v4;
  block[6] = a2;
  block[7] = a3;
  block[8] = a4;
  dispatch_sync(v5, block);
  v6 = *((unsigned __int8 *)v10 + 24);
  _Block_object_dispose(&v9, 8);
  return v6;
}

uint64_t LMLanguageContextCreate(const __CFString *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  const __CFString *CanonicalLocaleIdentifierFromString;
  unsigned __int8 v7;
  uint64_t result;
  __int128 v9;
  uint64_t v10;

  v4 = operator new();
  v5 = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(v4 + 47) = 0u;
  *(_OWORD *)(v4 + 63) = 0u;
  *(_OWORD *)(v4 + 79) = 0u;
  *(_BYTE *)(v4 + 95) = 0;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)v4 = 0;
  *(_BYTE *)(v4 + 24) = 0;
  CanonicalLocaleIdentifierFromString = CFLocaleCreateCanonicalLocaleIdentifierFromString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a1);
  sub_19C29CEF8(CanonicalLocaleIdentifierFromString, &v9);
  if (*(char *)(v4 + 23) < 0)
    operator delete(*(void **)v4);
  *(_OWORD *)v4 = v9;
  *(_QWORD *)(v4 + 16) = v10;
  *(_QWORD *)(v4 + 96) = v5;
  if (CanonicalLocaleIdentifierFromString)
    CFRelease(CanonicalLocaleIdentifierFromString);
  CFAllocatorGetDefault();
  v7 = atomic_load((unsigned __int8 *)&qword_1EE41C3D0);
  if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_1EE41C3D0))
  {
    qword_1EE41AA90 = 0;
    unk_1EE41AAA0 = 0u;
    unk_1EE41AAB0 = 0u;
    qword_1EE41C3C8 = _CFRuntimeRegisterClass();
    __cxa_guard_release(&qword_1EE41C3D0);
  }
  result = _CFRuntimeCreateInstance();
  *(_QWORD *)(result + 24) = v4;
  return result;
}

void sub_19C2EAE38(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1EE41C3D0);
  _Unwind_Resume(a1);
}

void sub_19C2EAE54(_Unwind_Exception *a1)
{
  uint64_t v1;
  const void *v2;
  char *v3;
  const void *v4;
  uint64_t v6;
  void **v7;
  uint64_t v8;
  void *v9;
  void **v10;
  void **v11;

  v4 = v2;
  if (v4)
    CFRelease(v4);
  v6 = *(_QWORD *)(v1 + 72);
  if (v6)
  {
    v8 = *(_QWORD *)(v1 + 80);
    v9 = *(void **)(v1 + 72);
    if (v8 != v6)
    {
      do
      {
        if (*(char *)(v8 - 9) < 0)
          operator delete(*(void **)(v8 - 32));
        v8 -= 32;
      }
      while (v8 != v6);
      v9 = *(void **)(v1 + 72);
    }
    *(_QWORD *)(v1 + 80) = v6;
    operator delete(v9);
    v7 = *(void ***)(v1 + 48);
    if (!v7)
    {
LABEL_5:
      if ((*v3 & 0x80000000) == 0)
        goto LABEL_6;
      goto LABEL_23;
    }
  }
  else
  {
    v7 = *(void ***)(v1 + 48);
    if (!v7)
      goto LABEL_5;
  }
  v10 = *(void ***)(v1 + 56);
  v11 = v7;
  if (v10 != v7)
  {
    do
    {
      if (*((char *)v10 - 1) < 0)
        operator delete(*(v10 - 3));
      v10 -= 3;
    }
    while (v10 != v7);
    v11 = *(void ***)(v1 + 48);
  }
  *(_QWORD *)(v1 + 56) = v7;
  operator delete(v11);
  if ((*v3 & 0x80000000) == 0)
  {
LABEL_6:
    if ((*(char *)(v1 + 23) & 0x80000000) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
LABEL_23:
  operator delete(*(void **)(v1 + 24));
  if ((*(char *)(v1 + 23) & 0x80000000) == 0)
  {
LABEL_8:
    MEMORY[0x1A1AD355C](v1, 0x1032C40D853B9C0);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(*(void **)v1);
  goto LABEL_8;
}

void LMLanguageContextSetFeatures(uint64_t a1, unsigned int *a2)
{
  const void **v3;
  _QWORD *v4;
  uint64_t v5;
  std::string *v6;
  uint64_t v7;
  int v8;
  size_t v9;
  unint64_t v10;
  std::string::value_type *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  const void *v15;
  std::string *v16;
  void *size;
  void *v18;
  int v19;
  double v20;
  __n128 *v21;
  __n128 v22;
  char *v23;
  int v24;
  _QWORD *v25;
  uint64_t v26;
  std::string *v27;
  uint64_t v28;
  int v29;
  size_t v30;
  unint64_t v31;
  std::string::value_type *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  const void *v36;
  std::string *v37;
  void *v38;
  void *v39;
  int v40;
  double v41;
  __n128 *v42;
  __n128 v43;
  char *v44;
  int v45;
  _QWORD *v46;
  uint64_t v47;
  std::string *v48;
  uint64_t v49;
  int v50;
  size_t v51;
  unint64_t v52;
  std::string::value_type *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  const void *v57;
  std::string *v58;
  void *v59;
  void *v60;
  int v61;
  double v62;
  _QWORD *v63;
  __int128 v64;
  char *v65;
  int v66;
  int v67;
  size_t v68;
  unint64_t v69;
  std::string::value_type *v70;
  int v71;
  size_t v72;
  unint64_t v73;
  std::string::value_type *v74;
  uint64_t v75;
  uint64_t v76;
  _DWORD *v77;
  const void *v78;
  std::string *v79;
  __int128 v80;
  std::string *v81;
  std::string::size_type v82;
  std::string *v83;
  _QWORD *v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  _DWORD *v88;
  const void *v89;
  std::string *v90;
  __int128 v91;
  std::string *v92;
  std::string::size_type v93;
  std::string *v94;
  int v95;
  size_t v96;
  unint64_t v97;
  std::string::value_type *v98;
  int v99;
  size_t v100;
  unint64_t v101;
  std::string::value_type *v102;
  uint64_t v103;
  uint64_t v104;
  _DWORD *v105;
  const void *v106;
  std::string *v107;
  __int128 v108;
  std::string *v109;
  std::string::size_type v110;
  std::string *v111;
  _QWORD *v112;
  char v113;
  char *v114;
  char v115;
  uint64_t v116;
  uint64_t v117;
  _DWORD *v118;
  const void *v119;
  std::string *v120;
  __int128 v121;
  std::string *v122;
  std::string::size_type v123;
  std::string *v124;
  int v125;
  size_t v126;
  unint64_t v127;
  std::string::value_type *v128;
  int v129;
  size_t v130;
  unint64_t v131;
  std::string::value_type *v132;
  uint64_t v133;
  uint64_t v134;
  _DWORD *v135;
  const void *v136;
  std::string *v137;
  __int128 v138;
  std::string *v139;
  std::string::size_type v140;
  std::string *v141;
  _QWORD *v142;
  char v143;
  char *v144;
  char v145;
  uint64_t v146;
  uint64_t v147;
  _DWORD *v148;
  const void *v149;
  std::string *v150;
  __int128 v151;
  std::string *v152;
  std::string::size_type v153;
  std::string *v154;
  char *v155;
  char v156;
  std::string v157;
  std::string v158;
  int64x2_t v159;
  uint64_t v160;
  __int16 v161;
  char v162;
  __int128 v163;
  int v164;
  __int128 v165;
  unint64_t v166;
  uint64_t v167;
  uint64_t v168;
  void *__p[2];
  __int128 v170;
  __int128 v171;
  __int128 v172;
  std::string v173;
  std::string *v174;
  uint64_t v175;

  v175 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return;
  v3 = *(const void ***)(a1 + 24);
  v159 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  v160 = 0;
  v161 = 0;
  v162 = 1;
  v163 = xmmword_19C46DE10;
  v164 = 0;
  v165 = xmmword_19C46DE10;
  v167 = 0;
  v168 = 0;
  v166 = 0xFFEFFFFFFFFFFFFFLL;
  v4 = v3[12];
  v5 = *a2;
  if (qword_1EDB97100 != -1)
    dispatch_once(&qword_1EDB97100, &unk_1E3D3BED0);
  v171 = 0u;
  v172 = 0u;
  *(_OWORD *)__p = 0u;
  v170 = 0u;
  v174 = 0;
  sub_19C32DD08(v4, v5 | (v5 << 32), (uint64_t *)__p, (uint64_t)&v159, qword_1EDB970F8, 1, 1, &v173, (__n128)0);
  v6 = v174;
  if (v174 == &v173)
  {
    v7 = 4;
    v6 = &v173;
  }
  else
  {
    if (!v174)
      goto LABEL_9;
    v7 = 5;
  }
  (*(void (**)(void))(v6->__r_.__value_.__r.__words[0] + 8 * v7))();
LABEL_9:
  v8 = *((char *)v3 + 23);
  if (v8 >= 0)
    v9 = *((unsigned __int8 *)v3 + 23);
  else
    v9 = (size_t)v3[1];
  v10 = v9 + 3;
  if (v9 + 3 > 0x7FFFFFFFFFFFFFF7)
    sub_19C2A1A54();
  if (v10 >= 0x17)
  {
    v12 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v12 = v10 | 7;
    v13 = v12 + 1;
    v14 = (char *)operator new(v12 + 1);
    v173.__r_.__value_.__l.__size_ = v9 + 3;
    v173.__r_.__value_.__r.__words[2] = v13 | 0x8000000000000000;
    v173.__r_.__value_.__r.__words[0] = (std::string::size_type)v14;
    v11 = v14 + 3;
    *(_WORD *)v14 = 19788;
    v14[2] = 95;
  }
  else
  {
    v173.__r_.__value_.__r.__words[2] = 0;
    *(_OWORD *)&v173.__r_.__value_.__l.__data_ = 0x5F4D4CuLL;
    *((_BYTE *)&v173.__r_.__value_.__s + 23) = v9 + 3;
    v11 = &v173.__r_.__value_.__s.__data_[3];
    if (!v9)
      goto LABEL_23;
  }
  if (v8 >= 0)
    v15 = v3;
  else
    v15 = *v3;
  memmove(v11, v15, v9);
LABEL_23:
  v11[v9] = 0;
  v16 = std::string::append(&v173, "_W0", 3uLL);
  v18 = (void *)v16->__r_.__value_.__r.__words[0];
  size = (void *)v16->__r_.__value_.__l.__size_;
  LODWORD(v158.__r_.__value_.__l.__data_) = v16->__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v158.__r_.__value_.__r.__words + 3) = *(_DWORD *)((char *)&v16->__r_.__value_.__r.__words[2] + 3);
  v19 = SHIBYTE(v16->__r_.__value_.__r.__words[2]);
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  v20 = *(double *)v159.i64;
  if (v19 < 0)
  {
    sub_19C2B5238(__p, v18, (unint64_t)size);
  }
  else
  {
    __p[0] = v18;
    __p[1] = size;
    LODWORD(v170) = v158.__r_.__value_.__l.__data_;
    *(_DWORD *)((char *)&v170 + 3) = *(_DWORD *)((char *)v158.__r_.__value_.__r.__words + 3);
    BYTE7(v170) = v19;
  }
  *((double *)&v170 + 1) = trunc(v20 * 10.0) * 0.1;
  v21 = (__n128 *)v3[10];
  if (v21 >= v3[11])
  {
    v23 = sub_19C36FEE4((void **)v3 + 9, (uint64_t)__p);
    v24 = SBYTE7(v170);
    v3[10] = v23;
    if (v24 < 0)
    {
      operator delete(__p[0]);
      if ((v19 & 0x80000000) == 0)
        goto LABEL_32;
    }
    else if ((v19 & 0x80000000) == 0)
    {
      goto LABEL_32;
    }
LABEL_28:
    operator delete(v18);
    if ((SHIBYTE(v173.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_33;
    goto LABEL_29;
  }
  v22 = *(__n128 *)__p;
  v21[1].n128_u64[0] = v170;
  *v21 = v22;
  v22.n128_u64[0] = *((_QWORD *)&v170 + 1);
  v21[1].n128_u64[1] = *((_QWORD *)&v170 + 1);
  v3[10] = &v21[2];
  if (v19 < 0)
    goto LABEL_28;
LABEL_32:
  if (SHIBYTE(v173.__r_.__value_.__r.__words[2]) < 0)
LABEL_29:
    operator delete(v173.__r_.__value_.__l.__data_);
LABEL_33:
  v25 = v3[12];
  v26 = a2[1];
  if (qword_1EDB97100 != -1)
    dispatch_once(&qword_1EDB97100, &unk_1E3D3BED0);
  __p[0] = a2;
  __p[1] = (void *)1;
  *(_QWORD *)&v170 = a2;
  *((_QWORD *)&v170 + 1) = 1;
  *(_QWORD *)&v171 = a2;
  *((_QWORD *)&v171 + 1) = 1;
  *(_QWORD *)&v172 = a2;
  *((_QWORD *)&v172 + 1) = 1;
  v174 = 0;
  sub_19C32DD08(v25, v26 | (v26 << 32), (uint64_t *)__p, (uint64_t)&v159, qword_1EDB970F8, 1, 1, &v173, v22);
  v27 = v174;
  if (v174 == &v173)
  {
    v28 = 4;
    v27 = &v173;
  }
  else
  {
    if (!v174)
      goto LABEL_40;
    v28 = 5;
  }
  (*(void (**)(void))(v27->__r_.__value_.__r.__words[0] + 8 * v28))();
LABEL_40:
  v29 = *((char *)v3 + 23);
  if (v29 >= 0)
    v30 = *((unsigned __int8 *)v3 + 23);
  else
    v30 = (size_t)v3[1];
  v31 = v30 + 3;
  if (v30 + 3 > 0x7FFFFFFFFFFFFFF7)
    sub_19C2A1A54();
  if (v31 >= 0x17)
  {
    v33 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v31 | 7) != 0x17)
      v33 = v31 | 7;
    v34 = v33 + 1;
    v35 = (char *)operator new(v33 + 1);
    v173.__r_.__value_.__l.__size_ = v30 + 3;
    v173.__r_.__value_.__r.__words[2] = v34 | 0x8000000000000000;
    v173.__r_.__value_.__r.__words[0] = (std::string::size_type)v35;
    v32 = v35 + 3;
    *(_WORD *)v35 = 19788;
    v35[2] = 95;
  }
  else
  {
    v173.__r_.__value_.__r.__words[2] = 0;
    *(_OWORD *)&v173.__r_.__value_.__l.__data_ = 0x5F4D4CuLL;
    *((_BYTE *)&v173.__r_.__value_.__s + 23) = v30 + 3;
    v32 = &v173.__r_.__value_.__s.__data_[3];
    if (!v30)
      goto LABEL_54;
  }
  if (v29 >= 0)
    v36 = v3;
  else
    v36 = *v3;
  memmove(v32, v36, v30);
LABEL_54:
  v32[v30] = 0;
  v37 = std::string::append(&v173, "_W-1", 4uLL);
  v39 = (void *)v37->__r_.__value_.__r.__words[0];
  v38 = (void *)v37->__r_.__value_.__l.__size_;
  LODWORD(v158.__r_.__value_.__l.__data_) = v37->__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v158.__r_.__value_.__r.__words + 3) = *(_DWORD *)((char *)&v37->__r_.__value_.__r.__words[2] + 3);
  v40 = SHIBYTE(v37->__r_.__value_.__r.__words[2]);
  v37->__r_.__value_.__l.__size_ = 0;
  v37->__r_.__value_.__r.__words[2] = 0;
  v37->__r_.__value_.__r.__words[0] = 0;
  v41 = *(double *)v159.i64;
  if (v40 < 0)
  {
    sub_19C2B5238(__p, v39, (unint64_t)v38);
  }
  else
  {
    __p[0] = v39;
    __p[1] = v38;
    LODWORD(v170) = v158.__r_.__value_.__l.__data_;
    *(_DWORD *)((char *)&v170 + 3) = *(_DWORD *)((char *)v158.__r_.__value_.__r.__words + 3);
    BYTE7(v170) = v40;
  }
  *((double *)&v170 + 1) = trunc(v41 * 10.0) * 0.1;
  v42 = (__n128 *)v3[10];
  if (v42 >= v3[11])
  {
    v44 = sub_19C36FEE4((void **)v3 + 9, (uint64_t)__p);
    v45 = SBYTE7(v170);
    v3[10] = v44;
    if (v45 < 0)
    {
      operator delete(__p[0]);
      if ((v40 & 0x80000000) == 0)
        goto LABEL_63;
    }
    else if ((v40 & 0x80000000) == 0)
    {
      goto LABEL_63;
    }
LABEL_59:
    operator delete(v39);
    if ((SHIBYTE(v173.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_64;
    goto LABEL_60;
  }
  v43 = *(__n128 *)__p;
  v42[1].n128_u64[0] = v170;
  *v42 = v43;
  v43.n128_u64[0] = *((_QWORD *)&v170 + 1);
  v42[1].n128_u64[1] = *((_QWORD *)&v170 + 1);
  v3[10] = &v42[2];
  if (v40 < 0)
    goto LABEL_59;
LABEL_63:
  if (SHIBYTE(v173.__r_.__value_.__r.__words[2]) < 0)
LABEL_60:
    operator delete(v173.__r_.__value_.__l.__data_);
LABEL_64:
  v46 = v3[12];
  v47 = a2[2];
  if (qword_1EDB97100 != -1)
    dispatch_once(&qword_1EDB97100, &unk_1E3D3BED0);
  __p[0] = a2;
  __p[1] = (void *)2;
  *(_QWORD *)&v170 = a2;
  *((_QWORD *)&v170 + 1) = 2;
  *(_QWORD *)&v171 = a2;
  *((_QWORD *)&v171 + 1) = 2;
  *(_QWORD *)&v172 = a2;
  *((_QWORD *)&v172 + 1) = 2;
  v174 = 0;
  sub_19C32DD08(v46, v47 | (v47 << 32), (uint64_t *)__p, (uint64_t)&v159, qword_1EDB970F8, 1, 1, &v173, v43);
  v48 = v174;
  if (v174 == &v173)
  {
    v49 = 4;
    v48 = &v173;
  }
  else
  {
    if (!v174)
      goto LABEL_71;
    v49 = 5;
  }
  (*(void (**)(void))(v48->__r_.__value_.__r.__words[0] + 8 * v49))();
LABEL_71:
  v50 = *((char *)v3 + 23);
  if (v50 >= 0)
    v51 = *((unsigned __int8 *)v3 + 23);
  else
    v51 = (size_t)v3[1];
  v52 = v51 + 3;
  if (v51 + 3 > 0x7FFFFFFFFFFFFFF7)
    sub_19C2A1A54();
  if (v52 >= 0x17)
  {
    v54 = (v52 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v52 | 7) != 0x17)
      v54 = v52 | 7;
    v55 = v54 + 1;
    v56 = (char *)operator new(v54 + 1);
    v173.__r_.__value_.__l.__size_ = v51 + 3;
    v173.__r_.__value_.__r.__words[2] = v55 | 0x8000000000000000;
    v173.__r_.__value_.__r.__words[0] = (std::string::size_type)v56;
    v53 = v56 + 3;
    *(_WORD *)v56 = 19788;
    v56[2] = 95;
  }
  else
  {
    v173.__r_.__value_.__r.__words[2] = 0;
    *(_OWORD *)&v173.__r_.__value_.__l.__data_ = 0x5F4D4CuLL;
    *((_BYTE *)&v173.__r_.__value_.__s + 23) = v51 + 3;
    v53 = &v173.__r_.__value_.__s.__data_[3];
    if (!v51)
      goto LABEL_85;
  }
  if (v50 >= 0)
    v57 = v3;
  else
    v57 = *v3;
  memmove(v53, v57, v51);
LABEL_85:
  v53[v51] = 0;
  v58 = std::string::append(&v173, "_W-2", 4uLL);
  v60 = (void *)v58->__r_.__value_.__r.__words[0];
  v59 = (void *)v58->__r_.__value_.__l.__size_;
  LODWORD(v158.__r_.__value_.__l.__data_) = v58->__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v158.__r_.__value_.__r.__words + 3) = *(_DWORD *)((char *)&v58->__r_.__value_.__r.__words[2] + 3);
  v61 = SHIBYTE(v58->__r_.__value_.__r.__words[2]);
  v58->__r_.__value_.__l.__size_ = 0;
  v58->__r_.__value_.__r.__words[2] = 0;
  v58->__r_.__value_.__r.__words[0] = 0;
  v62 = *(double *)v159.i64;
  if (v61 < 0)
  {
    sub_19C2B5238(__p, v60, (unint64_t)v59);
  }
  else
  {
    __p[0] = v60;
    __p[1] = v59;
    LODWORD(v170) = v158.__r_.__value_.__l.__data_;
    *(_DWORD *)((char *)&v170 + 3) = *(_DWORD *)((char *)v158.__r_.__value_.__r.__words + 3);
    BYTE7(v170) = v61;
  }
  *((double *)&v170 + 1) = trunc(v62 * 10.0) * 0.1;
  v63 = v3[10];
  if (v63 >= v3[11])
  {
    v65 = sub_19C36FEE4((void **)v3 + 9, (uint64_t)__p);
    v66 = SBYTE7(v170);
    v3[10] = v65;
    if (v66 < 0)
    {
      operator delete(__p[0]);
      if ((v61 & 0x80000000) == 0)
        goto LABEL_94;
    }
    else if ((v61 & 0x80000000) == 0)
    {
      goto LABEL_94;
    }
LABEL_90:
    operator delete(v60);
    if ((SHIBYTE(v173.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_95;
    goto LABEL_91;
  }
  v64 = *(_OWORD *)__p;
  v63[2] = v170;
  *(_OWORD *)v63 = v64;
  v63[3] = *((_QWORD *)&v170 + 1);
  v3[10] = v63 + 4;
  if (v61 < 0)
    goto LABEL_90;
LABEL_94:
  if (SHIBYTE(v173.__r_.__value_.__r.__words[2]) < 0)
LABEL_91:
    operator delete(v173.__r_.__value_.__l.__data_);
LABEL_95:
  if (*a2)
  {
    v67 = *((char *)v3 + 23);
    if (v67 >= 0)
      v68 = *((unsigned __int8 *)v3 + 23);
    else
      v68 = (size_t)v3[1];
    v69 = v68 + 4;
    if (v68 + 4 > 0x7FFFFFFFFFFFFFF7)
      sub_19C2A1A54();
    if (v69 >= 0x17)
    {
      v75 = (v69 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v69 | 7) != 0x17)
        v75 = v69 | 7;
      v76 = v75 + 1;
      v77 = operator new(v75 + 1);
      v158.__r_.__value_.__l.__size_ = v68 + 4;
      v158.__r_.__value_.__r.__words[2] = v76 | 0x8000000000000000;
      v158.__r_.__value_.__r.__words[0] = (std::string::size_type)v77;
      *v77 = 1601725772;
      v70 = (std::string::value_type *)(v77 + 1);
    }
    else
    {
      *(_OWORD *)&v158.__r_.__value_.__r.__words[1] = 0uLL;
      *((_BYTE *)&v158.__r_.__value_.__s + 23) = v68 + 4;
      v70 = &v158.__r_.__value_.__s.__data_[4];
      v158.__r_.__value_.__r.__words[0] = 1601725772;
      if (!v68)
        goto LABEL_117;
    }
    if (v67 >= 0)
      v78 = v3;
    else
      v78 = *v3;
    memmove(v70, v78, v68);
LABEL_117:
    v70[v68] = 0;
    v79 = std::string::append(&v158, "_W0", 3uLL);
    v80 = *(_OWORD *)&v79->__r_.__value_.__l.__data_;
    v173.__r_.__value_.__r.__words[2] = v79->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v173.__r_.__value_.__l.__data_ = v80;
    v79->__r_.__value_.__l.__size_ = 0;
    v79->__r_.__value_.__r.__words[2] = 0;
    v79->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v157, 1);
    if ((v157.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v81 = &v157;
    else
      v81 = (std::string *)v157.__r_.__value_.__r.__words[0];
    if ((v157.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v82 = HIBYTE(v157.__r_.__value_.__r.__words[2]);
    else
      v82 = v157.__r_.__value_.__l.__size_;
    v83 = std::string::append(&v173, (const std::string::value_type *)v81, v82);
    *(_OWORD *)__p = *(_OWORD *)&v83->__r_.__value_.__l.__data_;
    *(_QWORD *)&v170 = *((_QWORD *)&v83->__r_.__value_.__l + 2);
    v83->__r_.__value_.__l.__size_ = 0;
    v83->__r_.__value_.__r.__words[2] = 0;
    v83->__r_.__value_.__r.__words[0] = 0;
    v84 = v3[7];
    if (v84 < v3[8])
    {
      v85 = BYTE7(v170);
      if (SBYTE7(v170) < 0)
      {
LABEL_125:
        sub_19C2B5238(v3[7], __p[0], (unint64_t)__p[1]);
        goto LABEL_149;
      }
LABEL_148:
      *(_OWORD *)v84 = *(_OWORD *)__p;
      v84[2] = v170;
LABEL_149:
      v3[7] = v84 + 3;
      v3[7] = v84 + 3;
      if ((v85 & 0x80) == 0)
        goto LABEL_151;
      goto LABEL_150;
    }
    goto LABEL_189;
  }
  v71 = *((char *)v3 + 23);
  if (v71 >= 0)
    v72 = *((unsigned __int8 *)v3 + 23);
  else
    v72 = (size_t)v3[1];
  v73 = v72 + 4;
  if (v72 + 4 > 0x7FFFFFFFFFFFFFF7)
    sub_19C2A1A54();
  if (v73 >= 0x17)
  {
    v86 = (v73 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v73 | 7) != 0x17)
      v86 = v73 | 7;
    v87 = v86 + 1;
    v88 = operator new(v86 + 1);
    v158.__r_.__value_.__l.__size_ = v72 + 4;
    v158.__r_.__value_.__r.__words[2] = v87 | 0x8000000000000000;
    v158.__r_.__value_.__r.__words[0] = (std::string::size_type)v88;
    *v88 = 1601725772;
    v74 = (std::string::value_type *)(v88 + 1);
  }
  else
  {
    *(_OWORD *)&v158.__r_.__value_.__r.__words[1] = 0uLL;
    *((_BYTE *)&v158.__r_.__value_.__s + 23) = v72 + 4;
    v74 = &v158.__r_.__value_.__s.__data_[4];
    v158.__r_.__value_.__r.__words[0] = 1601725772;
    if (!v72)
      goto LABEL_140;
  }
  if (v71 >= 0)
    v89 = v3;
  else
    v89 = *v3;
  memmove(v74, v89, v72);
LABEL_140:
  v74[v72] = 0;
  v90 = std::string::append(&v158, "_W0", 3uLL);
  v91 = *(_OWORD *)&v90->__r_.__value_.__l.__data_;
  v173.__r_.__value_.__r.__words[2] = v90->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v173.__r_.__value_.__l.__data_ = v91;
  v90->__r_.__value_.__l.__size_ = 0;
  v90->__r_.__value_.__r.__words[2] = 0;
  v90->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v157, 0);
  if ((v157.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v92 = &v157;
  else
    v92 = (std::string *)v157.__r_.__value_.__r.__words[0];
  if ((v157.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v93 = HIBYTE(v157.__r_.__value_.__r.__words[2]);
  else
    v93 = v157.__r_.__value_.__l.__size_;
  v94 = std::string::append(&v173, (const std::string::value_type *)v92, v93);
  *(_OWORD *)__p = *(_OWORD *)&v94->__r_.__value_.__l.__data_;
  *(_QWORD *)&v170 = *((_QWORD *)&v94->__r_.__value_.__l + 2);
  v94->__r_.__value_.__l.__size_ = 0;
  v94->__r_.__value_.__r.__words[2] = 0;
  v94->__r_.__value_.__r.__words[0] = 0;
  v84 = v3[7];
  if (v84 < v3[8])
  {
    v85 = BYTE7(v170);
    if (SBYTE7(v170) < 0)
      goto LABEL_125;
    goto LABEL_148;
  }
LABEL_189:
  v114 = sub_19C318C78((char **)v3 + 6, (uint64_t)__p);
  v115 = BYTE7(v170);
  v3[7] = v114;
  if (v115 < 0)
LABEL_150:
    operator delete(__p[0]);
LABEL_151:
  if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v157.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v173.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_153:
      if ((SHIBYTE(v158.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_154;
      goto LABEL_164;
    }
  }
  else if ((SHIBYTE(v173.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_153;
  }
  operator delete(v173.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v158.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_154:
    if (a2[1])
      goto LABEL_155;
    goto LABEL_165;
  }
LABEL_164:
  operator delete(v158.__r_.__value_.__l.__data_);
  if (a2[1])
  {
LABEL_155:
    v95 = *((char *)v3 + 23);
    if (v95 >= 0)
      v96 = *((unsigned __int8 *)v3 + 23);
    else
      v96 = (size_t)v3[1];
    v97 = v96 + 4;
    if (v96 + 4 > 0x7FFFFFFFFFFFFFF7)
      sub_19C2A1A54();
    if (v97 >= 0x17)
    {
      v103 = (v97 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v97 | 7) != 0x17)
        v103 = v97 | 7;
      v104 = v103 + 1;
      v105 = operator new(v103 + 1);
      v158.__r_.__value_.__l.__size_ = v96 + 4;
      v158.__r_.__value_.__r.__words[2] = v104 | 0x8000000000000000;
      v158.__r_.__value_.__r.__words[0] = (std::string::size_type)v105;
      *v105 = 1601725772;
      v98 = (std::string::value_type *)(v105 + 1);
    }
    else
    {
      *(_OWORD *)&v158.__r_.__value_.__r.__words[1] = 0uLL;
      *((_BYTE *)&v158.__r_.__value_.__s + 23) = v96 + 4;
      v98 = &v158.__r_.__value_.__s.__data_[4];
      v158.__r_.__value_.__r.__words[0] = 1601725772;
      if (!v96)
        goto LABEL_179;
    }
    if (v95 >= 0)
      v106 = v3;
    else
      v106 = *v3;
    memmove(v98, v106, v96);
LABEL_179:
    v98[v96] = 0;
    v107 = std::string::append(&v158, "_W-1", 4uLL);
    v108 = *(_OWORD *)&v107->__r_.__value_.__l.__data_;
    v173.__r_.__value_.__r.__words[2] = v107->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v173.__r_.__value_.__l.__data_ = v108;
    v107->__r_.__value_.__l.__size_ = 0;
    v107->__r_.__value_.__r.__words[2] = 0;
    v107->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v157, 1);
    if ((v157.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v109 = &v157;
    else
      v109 = (std::string *)v157.__r_.__value_.__r.__words[0];
    if ((v157.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v110 = HIBYTE(v157.__r_.__value_.__r.__words[2]);
    else
      v110 = v157.__r_.__value_.__l.__size_;
    v111 = std::string::append(&v173, (const std::string::value_type *)v109, v110);
    *(_OWORD *)__p = *(_OWORD *)&v111->__r_.__value_.__l.__data_;
    *(_QWORD *)&v170 = *((_QWORD *)&v111->__r_.__value_.__l + 2);
    v111->__r_.__value_.__l.__size_ = 0;
    v111->__r_.__value_.__r.__words[2] = 0;
    v111->__r_.__value_.__r.__words[0] = 0;
    v112 = v3[7];
    if (v112 < v3[8])
    {
      v113 = BYTE7(v170);
      if (SBYTE7(v170) < 0)
      {
LABEL_187:
        sub_19C2B5238(v3[7], __p[0], (unint64_t)__p[1]);
        goto LABEL_207;
      }
LABEL_206:
      *(_OWORD *)v112 = *(_OWORD *)__p;
      v112[2] = v170;
LABEL_207:
      v3[7] = v112 + 3;
      v3[7] = v112 + 3;
      if ((v113 & 0x80) == 0)
        goto LABEL_209;
      goto LABEL_208;
    }
    goto LABEL_247;
  }
LABEL_165:
  v99 = *((char *)v3 + 23);
  if (v99 >= 0)
    v100 = *((unsigned __int8 *)v3 + 23);
  else
    v100 = (size_t)v3[1];
  v101 = v100 + 4;
  if (v100 + 4 > 0x7FFFFFFFFFFFFFF7)
    sub_19C2A1A54();
  if (v101 >= 0x17)
  {
    v116 = (v101 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v101 | 7) != 0x17)
      v116 = v101 | 7;
    v117 = v116 + 1;
    v118 = operator new(v116 + 1);
    v158.__r_.__value_.__l.__size_ = v100 + 4;
    v158.__r_.__value_.__r.__words[2] = v117 | 0x8000000000000000;
    v158.__r_.__value_.__r.__words[0] = (std::string::size_type)v118;
    *v118 = 1601725772;
    v102 = (std::string::value_type *)(v118 + 1);
  }
  else
  {
    *(_OWORD *)&v158.__r_.__value_.__r.__words[1] = 0uLL;
    *((_BYTE *)&v158.__r_.__value_.__s + 23) = v100 + 4;
    v102 = &v158.__r_.__value_.__s.__data_[4];
    v158.__r_.__value_.__r.__words[0] = 1601725772;
    if (!v100)
      goto LABEL_198;
  }
  if (v99 >= 0)
    v119 = v3;
  else
    v119 = *v3;
  memmove(v102, v119, v100);
LABEL_198:
  v102[v100] = 0;
  v120 = std::string::append(&v158, "_W-1", 4uLL);
  v121 = *(_OWORD *)&v120->__r_.__value_.__l.__data_;
  v173.__r_.__value_.__r.__words[2] = v120->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v173.__r_.__value_.__l.__data_ = v121;
  v120->__r_.__value_.__l.__size_ = 0;
  v120->__r_.__value_.__r.__words[2] = 0;
  v120->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v157, 0);
  if ((v157.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v122 = &v157;
  else
    v122 = (std::string *)v157.__r_.__value_.__r.__words[0];
  if ((v157.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v123 = HIBYTE(v157.__r_.__value_.__r.__words[2]);
  else
    v123 = v157.__r_.__value_.__l.__size_;
  v124 = std::string::append(&v173, (const std::string::value_type *)v122, v123);
  *(_OWORD *)__p = *(_OWORD *)&v124->__r_.__value_.__l.__data_;
  *(_QWORD *)&v170 = *((_QWORD *)&v124->__r_.__value_.__l + 2);
  v124->__r_.__value_.__l.__size_ = 0;
  v124->__r_.__value_.__r.__words[2] = 0;
  v124->__r_.__value_.__r.__words[0] = 0;
  v112 = v3[7];
  if (v112 < v3[8])
  {
    v113 = BYTE7(v170);
    if (SBYTE7(v170) < 0)
      goto LABEL_187;
    goto LABEL_206;
  }
LABEL_247:
  v144 = sub_19C318C78((char **)v3 + 6, (uint64_t)__p);
  v145 = BYTE7(v170);
  v3[7] = v144;
  if (v145 < 0)
LABEL_208:
    operator delete(__p[0]);
LABEL_209:
  if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v157.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v173.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_211:
      if ((SHIBYTE(v158.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_212;
      goto LABEL_222;
    }
  }
  else if ((SHIBYTE(v173.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_211;
  }
  operator delete(v173.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v158.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_212:
    if (a2[2])
      goto LABEL_213;
LABEL_223:
    v129 = *((char *)v3 + 23);
    if (v129 >= 0)
      v130 = *((unsigned __int8 *)v3 + 23);
    else
      v130 = (size_t)v3[1];
    v131 = v130 + 4;
    if (v130 + 4 > 0x7FFFFFFFFFFFFFF7)
      sub_19C2A1A54();
    if (v131 >= 0x17)
    {
      v146 = (v131 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v131 | 7) != 0x17)
        v146 = v131 | 7;
      v147 = v146 + 1;
      v148 = operator new(v146 + 1);
      v158.__r_.__value_.__l.__size_ = v130 + 4;
      v158.__r_.__value_.__r.__words[2] = v147 | 0x8000000000000000;
      v158.__r_.__value_.__r.__words[0] = (std::string::size_type)v148;
      *v148 = 1601725772;
      v132 = (std::string::value_type *)(v148 + 1);
    }
    else
    {
      *(_OWORD *)&v158.__r_.__value_.__r.__words[1] = 0uLL;
      *((_BYTE *)&v158.__r_.__value_.__s + 23) = v130 + 4;
      v132 = &v158.__r_.__value_.__s.__data_[4];
      v158.__r_.__value_.__r.__words[0] = 1601725772;
      if (!v130)
        goto LABEL_256;
    }
    if (v129 >= 0)
      v149 = v3;
    else
      v149 = *v3;
    memmove(v132, v149, v130);
LABEL_256:
    v132[v130] = 0;
    v150 = std::string::append(&v158, "_W-2", 4uLL);
    v151 = *(_OWORD *)&v150->__r_.__value_.__l.__data_;
    v173.__r_.__value_.__r.__words[2] = v150->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v173.__r_.__value_.__l.__data_ = v151;
    v150->__r_.__value_.__l.__size_ = 0;
    v150->__r_.__value_.__r.__words[2] = 0;
    v150->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v157, 0);
    if ((v157.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v152 = &v157;
    else
      v152 = (std::string *)v157.__r_.__value_.__r.__words[0];
    if ((v157.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v153 = HIBYTE(v157.__r_.__value_.__r.__words[2]);
    else
      v153 = v157.__r_.__value_.__l.__size_;
    v154 = std::string::append(&v173, (const std::string::value_type *)v152, v153);
    *(_OWORD *)__p = *(_OWORD *)&v154->__r_.__value_.__l.__data_;
    *(_QWORD *)&v170 = *((_QWORD *)&v154->__r_.__value_.__l + 2);
    v154->__r_.__value_.__l.__size_ = 0;
    v154->__r_.__value_.__r.__words[2] = 0;
    v154->__r_.__value_.__r.__words[0] = 0;
    v142 = v3[7];
    if (v142 < v3[8])
    {
      v143 = BYTE7(v170);
      if (SBYTE7(v170) < 0)
        goto LABEL_245;
      goto LABEL_264;
    }
LABEL_274:
    v155 = sub_19C318C78((char **)v3 + 6, (uint64_t)__p);
    v156 = BYTE7(v170);
    v3[7] = v155;
    if ((v156 & 0x80) == 0)
      goto LABEL_267;
    goto LABEL_266;
  }
LABEL_222:
  operator delete(v158.__r_.__value_.__l.__data_);
  if (!a2[2])
    goto LABEL_223;
LABEL_213:
  v125 = *((char *)v3 + 23);
  if (v125 >= 0)
    v126 = *((unsigned __int8 *)v3 + 23);
  else
    v126 = (size_t)v3[1];
  v127 = v126 + 4;
  if (v126 + 4 > 0x7FFFFFFFFFFFFFF7)
    sub_19C2A1A54();
  if (v127 >= 0x17)
  {
    v133 = (v127 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v127 | 7) != 0x17)
      v133 = v127 | 7;
    v134 = v133 + 1;
    v135 = operator new(v133 + 1);
    v158.__r_.__value_.__l.__size_ = v126 + 4;
    v158.__r_.__value_.__r.__words[2] = v134 | 0x8000000000000000;
    v158.__r_.__value_.__r.__words[0] = (std::string::size_type)v135;
    *v135 = 1601725772;
    v128 = (std::string::value_type *)(v135 + 1);
  }
  else
  {
    *(_OWORD *)&v158.__r_.__value_.__r.__words[1] = 0uLL;
    *((_BYTE *)&v158.__r_.__value_.__s + 23) = v126 + 4;
    v128 = &v158.__r_.__value_.__s.__data_[4];
    v158.__r_.__value_.__r.__words[0] = 1601725772;
    if (!v126)
      goto LABEL_237;
  }
  if (v125 >= 0)
    v136 = v3;
  else
    v136 = *v3;
  memmove(v128, v136, v126);
LABEL_237:
  v128[v126] = 0;
  v137 = std::string::append(&v158, "_W-2", 4uLL);
  v138 = *(_OWORD *)&v137->__r_.__value_.__l.__data_;
  v173.__r_.__value_.__r.__words[2] = v137->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v173.__r_.__value_.__l.__data_ = v138;
  v137->__r_.__value_.__l.__size_ = 0;
  v137->__r_.__value_.__r.__words[2] = 0;
  v137->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v157, 1);
  if ((v157.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v139 = &v157;
  else
    v139 = (std::string *)v157.__r_.__value_.__r.__words[0];
  if ((v157.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v140 = HIBYTE(v157.__r_.__value_.__r.__words[2]);
  else
    v140 = v157.__r_.__value_.__l.__size_;
  v141 = std::string::append(&v173, (const std::string::value_type *)v139, v140);
  *(_OWORD *)__p = *(_OWORD *)&v141->__r_.__value_.__l.__data_;
  *(_QWORD *)&v170 = *((_QWORD *)&v141->__r_.__value_.__l + 2);
  v141->__r_.__value_.__l.__size_ = 0;
  v141->__r_.__value_.__r.__words[2] = 0;
  v141->__r_.__value_.__r.__words[0] = 0;
  v142 = v3[7];
  if (v142 >= v3[8])
    goto LABEL_274;
  v143 = BYTE7(v170);
  if (SBYTE7(v170) < 0)
  {
LABEL_245:
    sub_19C2B5238(v3[7], __p[0], (unint64_t)__p[1]);
    goto LABEL_265;
  }
LABEL_264:
  *(_OWORD *)v142 = *(_OWORD *)__p;
  v142[2] = v170;
LABEL_265:
  v3[7] = v142 + 3;
  v3[7] = v142 + 3;
  if (v143 < 0)
LABEL_266:
    operator delete(__p[0]);
LABEL_267:
  if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v157.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v173.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_269:
      if ((SHIBYTE(v158.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return;
LABEL_273:
      operator delete(v158.__r_.__value_.__l.__data_);
      return;
    }
  }
  else if ((SHIBYTE(v173.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_269;
  }
  operator delete(v173.__r_.__value_.__l.__data_);
  if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_273;
}

void sub_19C2EC084(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;

  *(_QWORD *)(v42 + 56) = v40;
  operator delete(v41);
  if (a14 < 0)
  {
    operator delete(__p);
    if (*(char *)(v43 - 137) < 0)
    {
LABEL_5:
      operator delete(*(void **)(v43 - 160));
      if (a20 < 0)
      {
LABEL_8:
        operator delete(a15);
        _Unwind_Resume(a1);
      }
LABEL_9:
      _Unwind_Resume(a1);
    }
  }
  else if (*(char *)(v43 - 137) < 0)
  {
    goto LABEL_5;
  }
  if (a20 < 0)
    goto LABEL_8;
  goto LABEL_9;
}

uint64_t LMLanguageModelSetDPStringRecorder(uint64_t result, void *a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  if (result)
  {
    v2 = *(_QWORD **)(result + 24);
    if (*(_BYTE *)(v2[29] + 359))
    {
      v4 = operator new();
      sub_19C34C81C(v4, *(_QWORD *)(v2[52] + 8), 0, a2);
      v5 = v2[39];
      v2[39] = v4;
      if (v5)
      {
        CFRelease(*(CFTypeRef *)v5);
        v6 = *(void **)(v5 + 16);
        if (v6)

        MEMORY[0x1A1AD355C](v5, 0x10E0C40F5622EBCLL);
      }
      v7 = operator new();
      sub_19C34C81C(v7, *(_QWORD *)(v2[52] + 8), 1, a2);
      v8 = v2[40];
      v2[40] = v7;
      if (v8)
      {
        CFRelease(*(CFTypeRef *)v8);
        v9 = *(void **)(v8 + 16);
        if (v9)

        MEMORY[0x1A1AD355C](v8, 0x10E0C40F5622EBCLL);
      }
      v10 = operator new();
      result = sub_19C34C81C(v10, *(_QWORD *)(v2[52] + 8), 2, a2);
      v11 = v2[41];
      v2[41] = v10;
      if (v11)
      {
        CFRelease(*(CFTypeRef *)v11);
        v12 = *(void **)(v11 + 16);
        if (v12)

        JUMPOUT(0x1A1AD355CLL);
      }
    }
  }
  return result;
}

void sub_19C2EC3C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD355C](v1, 0x10E0C40F5622EBCLL);
  _Unwind_Resume(a1);
}

uint64_t LMLanguageModelGetTestingParameters(uint64_t a1)
{
  uint64_t *v1;
  unsigned __int8 v2;

  if (a1)
  {
    v1 = (uint64_t *)(*(_QWORD *)(a1 + 24) + 456);
  }
  else
  {
    v2 = atomic_load((unsigned __int8 *)&qword_1EE41C140);
    if ((v2 & 1) != 0)
    {
      v1 = &qword_1EE41C138;
    }
    else
    {
      v1 = &qword_1EE41C138;
      if (__cxa_guard_acquire(&qword_1EE41C140))
      {
        qword_1EE41C138 = (uint64_t)CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        __cxa_guard_release(&qword_1EE41C140);
      }
    }
  }
  return *v1;
}

void sub_19C2EC494(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1EE41C140);
  _Unwind_Resume(a1);
}

void sub_19C2EC58C(void *a1)
{
  uint64_t v1;

  MEMORY[0x1A1AD355C](v1, 0x10B2C4009D90DC4);
  sub_19C2CDAC8(a1);
}

uint64_t sub_19C2EC5B4(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v5;
  void *v6;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = (_QWORD *)*v2;
      v6 = (void *)v2[3];
      if (v6)
      {
        v2[4] = v6;
        operator delete(v6);
      }
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

uint64_t sub_19C2EC61C(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  void *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  const void *v9;
  const void *v10;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v6 = (_QWORD *)*v2;
      v7 = v2[3];
      if (v7)
      {
        v8 = v2[4];
        v5 = (void *)v2[3];
        if (v8 != v7)
        {
          do
          {
            v10 = *(const void **)(v8 - 8);
            v8 -= 8;
            v9 = v10;
            if (v10)
              CFRelease(v9);
          }
          while (v8 != v7);
          v5 = (void *)v2[3];
        }
        v2[4] = v7;
        operator delete(v5);
      }
      operator delete(v2);
      v2 = v6;
    }
    while (v6);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

void sub_19C2EC6BC(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;

  if (!a2)
  {
    v15 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v15)
      operator delete(v15);
    *(_QWORD *)(a1 + 8) = 0;
    return;
  }
  if (a2 >> 61)
    sub_19C2A143C();
  v4 = operator new(8 * a2);
  v5 = *(void **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
    operator delete(v5);
  v6 = 0;
  *(_QWORD *)(a1 + 8) = a2;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
  while (a2 != v6);
  v8 = a1 + 16;
  v7 = *(_QWORD **)(a1 + 16);
  if (v7)
  {
    v9 = v7[1];
    v10 = a2 - 1;
    if ((a2 & (a2 - 1)) == 0)
    {
      v11 = v9 & v10;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v11) = v8;
      while (1)
      {
        v12 = (_QWORD *)*v7;
        if (!*v7)
          break;
        v13 = v12[1] & v10;
        if (v13 == v11)
        {
          v7 = (_QWORD *)*v7;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v13))
        {
          *v7 = *v12;
          v14 = 8 * v13;
          *v12 = **(_QWORD **)(*(_QWORD *)a1 + v14);
          **(_QWORD **)(*(_QWORD *)a1 + v14) = v12;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v13) = v7;
          v7 = v12;
          v11 = v13;
        }
      }
      return;
    }
    if (v9 >= a2)
      v9 %= a2;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v9) = v8;
    v16 = (_QWORD *)*v7;
    if (*v7)
    {
      do
      {
        v18 = v16[1];
        if (v18 >= a2)
          v18 %= a2;
        if (v18 != v9)
        {
          if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v18))
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v18) = v7;
            goto LABEL_26;
          }
          *v7 = *v16;
          v17 = 8 * v18;
          *v16 = **(_QWORD **)(*(_QWORD *)a1 + v17);
          **(_QWORD **)(*(_QWORD *)a1 + v17) = v16;
          v16 = v7;
        }
        v18 = v9;
LABEL_26:
        v7 = v16;
        v16 = (_QWORD *)*v16;
        v9 = v18;
      }
      while (v16);
    }
  }
}

uint64_t sub_19C2EC85C(uint64_t a1)
{
  _QWORD *v2;
  void *v3;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = (void *)v2[3];
      if (v3)
      {
        v2[4] = v3;
        operator delete(v3);
      }
    }
    operator delete(v2);
  }
  return a1;
}

_QWORD *sub_19C2EC8A8(_QWORD *result, CFTypeRef *a2, CFTypeRef *a3, unint64_t a4)
{
  _QWORD *v7;
  _QWORD *v8;
  CFTypeRef v9;

  if (a4)
  {
    if (a4 >> 61)
      sub_19C2A18E8();
    v7 = result;
    result = operator new(8 * a4);
    v8 = result;
    *v7 = result;
    v7[1] = result;
    v7[2] = &result[a4];
    while (a2 != a3)
    {
      v9 = *a2;
      if (*a2)
        result = CFRetain(*a2);
      *v8++ = v9;
      ++a2;
    }
    v7[1] = v8;
  }
  return result;
}

void sub_19C2EC948(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_19C2EC9E8(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_19C2EC960(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  const void *v6;
  const void *v7;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = v2[3];
      if (v3)
      {
        v4 = v2[4];
        v5 = (void *)v2[3];
        if (v4 != v3)
        {
          do
          {
            v7 = *(const void **)(v4 - 8);
            v4 -= 8;
            v6 = v7;
            if (v7)
              CFRelease(v6);
          }
          while (v4 != v3);
          v5 = (void *)v2[3];
        }
        v2[4] = v3;
        operator delete(v5);
      }
    }
    operator delete(v2);
  }
  return a1;
}

void ***sub_19C2EC9E8(void ***a1)
{
  void **v2;
  char *v3;
  char *v4;
  void *v5;
  const void *v6;
  const void *v7;

  if (!*((_BYTE *)a1 + 8))
  {
    v2 = *a1;
    v3 = (char *)**a1;
    if (v3)
    {
      v4 = (char *)v2[1];
      v5 = **a1;
      if (v4 != v3)
      {
        do
        {
          v7 = (const void *)*((_QWORD *)v4 - 1);
          v4 -= 8;
          v6 = v7;
          if (v7)
            CFRelease(v6);
        }
        while (v4 != v3);
        v5 = **a1;
      }
      v2[1] = v3;
      operator delete(v5);
    }
  }
  return a1;
}

_QWORD *language_modeling::v1::LinguisticContext::LinguisticContext(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *a2 = 0;
  *result = v2;
  return result;
}

{
  uint64_t v2;

  v2 = *a2;
  *a2 = 0;
  *result = v2;
  return result;
}

void language_modeling::v1::LinguisticContext::pop_back(language_modeling::v1::LinguisticContext *this)
{
  sub_19C31618C(*(_QWORD **)this);
}

void language_modeling::v1::LinguisticContext::remove_first(uint64_t **this, unint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t **i;
  _QWORD *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  int64_t v19;
  char *v20;
  char *v21;
  char *v22;
  unint64_t v23;
  char *v24;
  const void *v25;
  const void *v26;
  char *v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  const void *v37;
  const void *v38;
  uint64_t *v39;
  uint64_t v40;
  const char *v41;
  _QWORD *v42;
  _QWORD *v43;
  _BYTE *v44;
  unint64_t *v45;
  unint64_t v46;
  _BYTE *v47;
  uint64_t v48;
  _BYTE *v49;
  int64_t v50;
  char *v51;
  uint64_t v52;
  unint64_t *v53;
  int v54;
  const char *v55;

  if (!a2)
    return;
  v2 = *this;
  v3 = **this;
  v4 = (*this)[1];
  v5 = (v4 - v3) >> 5;
  if (v5 != ((*this)[4] - (*this)[3]) >> 5)
  {
    v55 = "m_tokens.size() == m_sanitizedTokens.size()";
    v54 = 62;
LABEL_82:
    v41 = "remove_first";
    goto LABEL_78;
  }
  if (v5 < a2)
  {
    v55 = "count <= m_tokens.size()";
    v54 = 63;
    goto LABEL_82;
  }
  v7 = 32 * a2;
  if (v3 + 32 * a2 != v4)
  {
    do
    {
      if (*(char *)(v3 + 23) < 0)
        operator delete(*(void **)v3);
      v8 = (_BYTE *)(v3 + v7);
      *(_OWORD *)v3 = *(_OWORD *)(v3 + 32 * a2);
      *(_QWORD *)(v3 + 16) = *(_QWORD *)(v3 + v7 + 16);
      v8[23] = 0;
      *v8 = 0;
      *(_DWORD *)(v3 + 24) = *(_DWORD *)(v3 + v7 + 24);
      v3 += 32;
    }
    while (v3 + v7 != v4);
    v4 = v2[1];
  }
  while (v4 != v3)
  {
    if (*(char *)(v4 - 9) < 0)
      operator delete(*(void **)(v4 - 32));
    v4 -= 32;
  }
  v2[1] = v3;
  v9 = v2[3];
  v10 = v2[4];
  v11 = v9 + 32 * a2;
  if (v11 != v10)
  {
    do
    {
      if (*(char *)(v9 + 23) < 0)
        operator delete(*(void **)v9);
      v12 = (_BYTE *)(v9 + v7);
      *(_OWORD *)v9 = *(_OWORD *)(v9 + 32 * a2);
      *(_QWORD *)(v9 + 16) = *(_QWORD *)(v9 + v7 + 16);
      v12[23] = 0;
      *v12 = 0;
      *(_DWORD *)(v9 + 24) = *(_DWORD *)(v9 + v7 + 24);
      v9 += 32;
    }
    while (v9 + v7 != v10);
    v11 = v2[4];
  }
  while (v11 != v9)
  {
    if (*(char *)(v11 - 9) < 0)
      operator delete(*(void **)(v11 - 32));
    v11 -= 32;
  }
  v2[4] = v9;
  for (i = (uint64_t **)v2[8]; i; i = (uint64_t **)*i)
  {
    v16 = i[3];
    v17 = i[4];
    if (a2 < ((char *)v17 - (char *)v16) >> 2)
    {
      v18 = (uint64_t *)((char *)v16 + 4 * a2);
      v19 = (char *)v17 - (char *)v18;
      if (v17 != v18)
        memmove(i[3], v18, (char *)v17 - (char *)v18);
      v16 = (uint64_t *)((char *)v16 + v19);
    }
    i[4] = v16;
  }
  v14 = (_QWORD *)v2[13];
  if (v14)
  {
    v15 = 8 * a2;
    while (1)
    {
      v21 = (char *)v14[3];
      v20 = (char *)v14[4];
      if (a2 >= (v20 - v21) >> 3)
      {
        if (v20 != v21)
        {
          do
          {
            v26 = (const void *)*((_QWORD *)v20 - 1);
            v20 -= 8;
            v25 = v26;
            if (v26)
              CFRelease(v25);
          }
          while (v20 != v21);
          v20 = v21;
        }
        goto LABEL_33;
      }
      v22 = &v21[8 * a2];
      if (v22 == v20)
      {
        v24 = (char *)v14[3];
        if (v20 != v21)
          goto LABEL_58;
        goto LABEL_33;
      }
      v23 = v20 - &v21[v15] - 8;
      if (v23 < 0x38)
      {
        v24 = (char *)v14[3];
        goto LABEL_54;
      }
      v27 = &v21[v23 & 0xFFFFFFFFFFFFFFF8];
      if (v21 < &v27[8 * a2 + 8] && v22 < v27 + 8)
        break;
      v29 = (v23 >> 3) + 1;
      v30 = 8 * (v29 & 0x3FFFFFFFFFFFFFFCLL);
      v24 = &v21[v30];
      v31 = v29 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v32 = &v21[v15];
        v33 = *(_OWORD *)v21;
        v34 = *((_OWORD *)v21 + 1);
        v35 = *(_OWORD *)&v21[v15 + 16];
        *(_OWORD *)v21 = *(_OWORD *)&v21[8 * a2];
        *((_OWORD *)v21 + 1) = v35;
        v21 += 32;
        *(_OWORD *)v32 = v33;
        *((_OWORD *)v32 + 1) = v34;
        v31 -= 4;
      }
      while (v31);
      if (v29 != (v29 & 0x3FFFFFFFFFFFFFFCLL))
      {
        v22 += v30;
        do
        {
LABEL_54:
          v36 = *(_QWORD *)v24;
          *(_QWORD *)v24 = *(_QWORD *)v22;
          v24 += 8;
          *(_QWORD *)v22 = v36;
          v22 += 8;
        }
        while (v22 != v20);
      }
      v20 = (char *)v14[4];
      if (v20 != v24)
      {
        do
        {
LABEL_58:
          v38 = (const void *)*((_QWORD *)v20 - 1);
          v20 -= 8;
          v37 = v38;
          if (v38)
            CFRelease(v37);
        }
        while (v20 != v24);
        v20 = v24;
      }
LABEL_33:
      v14[4] = v20;
      v14 = (_QWORD *)*v14;
      if (!v14)
        goto LABEL_61;
    }
    v24 = (char *)v14[3];
    goto LABEL_54;
  }
LABEL_61:
  if (v2[19] != v2[24])
  {
    v55 = "m_fragmentCaches.size() == m_cumulativeFragmentCounts.size()";
    v54 = 74;
    goto LABEL_82;
  }
  v39 = (uint64_t *)v2[18];
  if (v39)
  {
    v40 = (uint64_t)(v2 + 21);
    v41 = "operator()";
    do
    {
      v42 = sub_19C316438(v40, *((_DWORD *)v39 + 4), (_DWORD *)v39 + 4);
      v43 = v42;
      v45 = (unint64_t *)v42[3];
      v44 = (_BYTE *)v42[4];
      if (a2 >= (v44 - (_BYTE *)v45) >> 3)
      {
        v42[4] = v45;
        v39[4] = v39[3];
      }
      else
      {
        v46 = v45[a2 - 1];
        if (v46)
        {
          v48 = v39[3];
          v47 = (_BYTE *)v39[4];
          v49 = (_BYTE *)(v48 + 4 * v46);
          v50 = v47 - v49;
          if (v47 != v49)
          {
            memmove((void *)v39[3], v49, v47 - v49);
            v45 = (unint64_t *)v43[3];
            v44 = (_BYTE *)v43[4];
          }
          v39[4] = v48 + v50;
        }
        v51 = (char *)&v45[a2];
        v52 = v44 - v51;
        v53 = v45;
        if (v44 != v51)
        {
          memmove(v45, v51, v44 - v51);
          v53 = (unint64_t *)v43[3];
        }
        v43[4] = (char *)v45 + v52;
        if (v53 != (unint64_t *)((char *)v45 + v52))
        {
          while (*v53 > v46)
          {
            *v53++ -= v46;
            if (v53 == (unint64_t *)((char *)v45 + v52))
              goto LABEL_65;
          }
          v54 = 84;
          v55 = "fragmentCount > fragmentsToRemove";
LABEL_78:
          __assert_rtn(v41, "LinguisticContextImpl.cpp", v54, v55);
        }
      }
LABEL_65:
      v39 = (uint64_t *)*v39;
    }
    while (v39);
  }
}

void language_modeling::v1::LinguisticContext::clear(uint64_t **this)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  uint64_t j;
  _QWORD *v6;
  uint64_t v7;
  uint64_t k;
  _QWORD *v9;
  uint64_t v10;
  uint64_t m;
  _QWORD *v12;
  uint64_t v13;
  uint64_t n;
  _QWORD *v15;
  uint64_t v16;
  uint64_t ii;
  _QWORD *v18;
  void *v19;
  _QWORD *v20;
  void *v21;
  _QWORD *v22;
  void *v23;
  void *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  const void *v28;
  const void *v29;

  v1 = *this;
  v2 = **this;
  for (i = (*this)[1]; i != v2; i -= 32)
  {
    if (*(char *)(i - 9) < 0)
      operator delete(*(void **)(i - 32));
  }
  v1[1] = v2;
  v4 = v1[3];
  for (j = v1[4]; j != v4; j -= 32)
  {
    if (*(char *)(j - 9) < 0)
      operator delete(*(void **)(j - 32));
  }
  v1[4] = v4;
  if (v1[9])
  {
    v6 = (_QWORD *)v1[8];
    if (v6)
    {
      do
      {
        v18 = (_QWORD *)*v6;
        v19 = (void *)v6[3];
        if (v19)
        {
          v6[4] = v19;
          operator delete(v19);
        }
        operator delete(v6);
        v6 = v18;
      }
      while (v18);
    }
    v1[8] = 0;
    v7 = v1[7];
    if (v7)
    {
      for (k = 0; k != v7; ++k)
        *(_QWORD *)(v1[6] + 8 * k) = 0;
    }
    v1[9] = 0;
  }
  if (v1[14])
  {
    v9 = (_QWORD *)v1[13];
    if (v9)
    {
      do
      {
        v25 = (_QWORD *)*v9;
        v26 = v9[3];
        if (v26)
        {
          v27 = v9[4];
          v24 = (void *)v9[3];
          if (v27 != v26)
          {
            do
            {
              v29 = *(const void **)(v27 - 8);
              v27 -= 8;
              v28 = v29;
              if (v29)
                CFRelease(v28);
            }
            while (v27 != v26);
            v24 = (void *)v9[3];
          }
          v9[4] = v26;
          operator delete(v24);
        }
        operator delete(v9);
        v9 = v25;
      }
      while (v25);
    }
    v1[13] = 0;
    v10 = v1[12];
    if (v10)
    {
      for (m = 0; m != v10; ++m)
        *(_QWORD *)(v1[11] + 8 * m) = 0;
    }
    v1[14] = 0;
  }
  if (v1[19])
  {
    v12 = (_QWORD *)v1[18];
    if (v12)
    {
      do
      {
        v20 = (_QWORD *)*v12;
        v21 = (void *)v12[3];
        if (v21)
        {
          v12[4] = v21;
          operator delete(v21);
        }
        operator delete(v12);
        v12 = v20;
      }
      while (v20);
    }
    v1[18] = 0;
    v13 = v1[17];
    if (v13)
    {
      for (n = 0; n != v13; ++n)
        *(_QWORD *)(v1[16] + 8 * n) = 0;
    }
    v1[19] = 0;
  }
  if (v1[24])
  {
    v15 = (_QWORD *)v1[23];
    if (v15)
    {
      do
      {
        v22 = (_QWORD *)*v15;
        v23 = (void *)v15[3];
        if (v23)
        {
          v15[4] = v23;
          operator delete(v23);
        }
        operator delete(v15);
        v15 = v22;
      }
      while (v22);
    }
    v1[23] = 0;
    v16 = v1[22];
    if (v16)
    {
      for (ii = 0; ii != v16; ++ii)
        *(_QWORD *)(v1[21] + 8 * ii) = 0;
    }
    v1[24] = 0;
  }
}

uint64_t language_modeling::v1::LinguisticContext::tokenSpan(language_modeling::v1::LinguisticContext *this)
{
  return **(_QWORD **)this;
}

void language_modeling::v1::LinguisticContext::set_predominant_locale(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void **v3;
  void **v4;
  size_t v5;
  void *__p[2];
  uint64_t v7;

  v2 = *a1;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_19C2B5238(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v7 = *(_QWORD *)(a2 + 16);
  }
  v3 = (void **)(v2 + 208);
  if ((void **)(v2 + 208) != __p)
  {
    if (*(char *)(v2 + 231) < 0)
    {
      if (v7 >= 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if (v7 >= 0)
        v5 = HIBYTE(v7);
      else
        v5 = (size_t)__p[1];
      sub_19C2E54A8(v3, v4, v5);
    }
    else if (v7 < 0)
    {
      sub_19C2E53E4(v3, __p[0], (size_t)__p[1]);
    }
    else
    {
      *(_OWORD *)v3 = *(_OWORD *)__p;
      *(_QWORD *)(v2 + 224) = v7;
    }
  }
  if (SHIBYTE(v7) < 0)
    operator delete(__p[0]);
}

language_modeling::v1::Probability *language_modeling::v1::Probability::Probability(language_modeling::v1::Probability *this, __int128 **a2)
{
  __int128 *v3;
  _OWORD *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  v3 = *a2;
  v4 = (_OWORD *)operator new();
  v5 = *v3;
  v6 = v3[2];
  v4[1] = v3[1];
  v4[2] = v6;
  *v4 = v5;
  v7 = v3[3];
  v8 = v3[4];
  v9 = v3[6];
  v4[5] = v3[5];
  v4[6] = v9;
  v4[3] = v7;
  v4[4] = v8;
  *(_QWORD *)this = v4;
  return this;
}

{
  __int128 *v3;
  _OWORD *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  v3 = *a2;
  v4 = (_OWORD *)operator new();
  v5 = *v3;
  v6 = v3[2];
  v4[1] = v3[1];
  v4[2] = v6;
  *v4 = v5;
  v7 = v3[3];
  v8 = v3[4];
  v9 = v3[6];
  v4[5] = v3[5];
  v4[6] = v9;
  v4[3] = v7;
  v4[4] = v8;
  *(_QWORD *)this = v4;
  return this;
}

uint64_t *language_modeling::v1::Probability::operator=(uint64_t *a1, __int128 **a2)
{
  __int128 *v3;
  _OWORD *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  v3 = *a2;
  v4 = (_OWORD *)operator new();
  v5 = *v3;
  v6 = v3[2];
  v4[1] = v3[1];
  v4[2] = v6;
  *v4 = v5;
  v7 = v3[3];
  v8 = v3[4];
  v9 = v3[6];
  v4[5] = v3[5];
  v4[6] = v9;
  v4[3] = v7;
  v4[4] = v8;
  v10 = *a1;
  *a1 = (uint64_t)v4;
  if (v10)
    MEMORY[0x1A1AD355C](v10, 0x1000C4065B674BELL);
  return a1;
}

_QWORD *language_modeling::v1::Probability::Probability(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *a2 = 0;
  *result = v2;
  return result;
}

{
  uint64_t v2;

  v2 = *a2;
  *a2 = 0;
  *result = v2;
  return result;
}

{
  uint64_t v2;

  v2 = *a2;
  *a2 = 0;
  *result = v2;
  return result;
}

{
  uint64_t v2;

  v2 = *a2;
  *a2 = 0;
  *result = v2;
  return result;
}

uint64_t *language_modeling::v1::Probability::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  *a2 = 0;
  v4 = *a1;
  *a1 = v3;
  if (v4)
    MEMORY[0x1A1AD355C](v4, 0x1000C4065B674BELL);
  return a1;
}

void language_modeling::v1::Probability::~Probability(language_modeling::v1::Probability *this)
{
  uint64_t v2;

  v2 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v2)
    MEMORY[0x1A1AD355C](v2, 0x1000C4065B674BELL);
}

{
  uint64_t v2;

  v2 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v2)
    MEMORY[0x1A1AD355C](v2, 0x1000C4065B674BELL);
}

double language_modeling::v1::Probability::log@<D0>(language_modeling::v1::Probability *this@<X0>, char *a2@<X8>)
{
  return sub_19C2E3008(a2, *(_QWORD *)this);
}

double language_modeling::v1::Probability::probability(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (a2 == 1)
  {
    v2 = *a1 + 8;
  }
  else
  {
    if (a2)
      __assert_rtn("probability", "Probability.cpp", 50, "false");
    v2 = *a1;
  }
  return *(double *)v2;
}

uint64_t language_modeling::v1::Probability::flags(language_modeling::v1::Probability *this)
{
  return *(unsigned int *)(*(_QWORD *)this + 104);
}

uint64_t LMVocabularyGetSharedVocabulary()
{
  if (qword_1EDB97030 != -1)
    dispatch_once(&qword_1EDB97030, &unk_1E3D3BC08);
  return qword_1EDB97028;
}

uint64_t LMVocabularyCreate(const void *a1)
{
  const void *Value;
  const void *v3;
  CFTypeID v4;
  CFTypeID v5;
  uint64_t v6;
  const __CFArray *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  NSObject *v11;
  void *exception;
  NSObject *v14;
  CFDictionaryRef theDict;
  __int128 __p;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    CFRetain(a1);
    sub_19C29438C(&theDict, a1);
    if (!theDict)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1A1AD3154](exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
    }
    Value = CFDictionaryGetValue(theDict, CFSTR("locale"));
    v3 = Value;
    if (Value)
    {
      v4 = CFGetTypeID(Value);
      if (v4 != CFStringGetTypeID())
      {
        v5 = CFGetTypeID(v3);
        if (v5 != CFLocaleGetTypeID())
        {
          if (qword_1EDB97228 != -1)
            dispatch_once(&qword_1EDB97228, &unk_1E3D3ABD0);
          v14 = qword_1EDB97220;
          if (os_log_type_enabled((os_log_t)qword_1EDB97220, OS_LOG_TYPE_ERROR))
          {
            LODWORD(__p) = 138412290;
            *(_QWORD *)((char *)&__p + 4) = v3;
            _os_log_error_impl(&dword_19C291000, v14, OS_LOG_TYPE_ERROR, "Invalid CFType for kLMVocabularyLocaleKey: %@", (uint8_t *)&__p, 0xCu);
          }
          __assert_rtn("getLocaleIdentifierFromOptions", "LanguageModeling_Vocabulary.cpp", 46, "false && \"Invalid CFType for kLMVocabularyLocaleKey\"");
        }
        v3 = (const void *)MEMORY[0x1A1AD2A04](v3);
      }
    }
    if (theDict)
      CFRelease(theDict);
  }
  else
  {
    v3 = 0;
  }
  v6 = operator new();
  *(_QWORD *)v6 = &off_1E3D36598;
  theDict = (CFDictionaryRef)v3;
  *(_OWORD *)(v6 + 112) = 0u;
  *(_DWORD *)(v6 + 24) = -1073741825;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_QWORD *)(v6 + 8) = &off_1E3D35298;
  *(_QWORD *)(v6 + 16) = 0xBFF0BDBFBFF0BDBFLL;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  *(_DWORD *)(v6 + 64) = 1065353216;
  *(_OWORD *)(v6 + 88) = 0u;
  *(_DWORD *)(v6 + 104) = 1065353216;
  *(_OWORD *)(v6 + 128) = 0u;
  *(_OWORD *)(v6 + 144) = 0u;
  *(_BYTE *)(v6 + 160) = 0;
  if (v3)
  {
    v7 = CFArrayCreate(0, (const void **)&theDict, 1, MEMORY[0x1E0C9B378]);
    sub_19C36584C((uint64_t)&__p, v7);
    sub_19C3388A4((void ***)(v6 + 136), (void **)__p, *((void ***)&__p + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3));
    v8 = __p;
    if ((_QWORD)__p)
    {
      v9 = *((_QWORD *)&__p + 1);
      v10 = (void *)__p;
      if (*((_QWORD *)&__p + 1) != (_QWORD)__p)
      {
        do
        {
          if (*(char *)(v9 - 1) < 0)
            operator delete(*(void **)(v9 - 24));
          v9 -= 24;
        }
        while (v9 != v8);
        v10 = (void *)__p;
      }
      *((_QWORD *)&__p + 1) = v8;
      operator delete(v10);
    }
    CFRelease(v7);
  }
  v11 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_USER_INITIATED, 0);
  *(_QWORD *)(v6 + 168) = dispatch_queue_create("com.apple.LanguageModeling.Vocabulary", v11);
  return sub_19C397978(v6);
}

void sub_19C2EDA9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  sub_19C2E5608(&a10);
  _Unwind_Resume(a1);
}

void sub_19C2EDC40()
{
  JUMPOUT(0x19C2EDC48);
}

void sub_19C2EDC9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_19C2EDCC0(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  JUMPOUT(0x19C2EDB28);
}

uint64_t LMVocabularySetLanguages(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  _QWORD block[7];
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  char v10;

  if (!a1)
    return 0;
  v2 = *(_QWORD *)(a1 + 24);
  v7 = 0;
  v8 = &v7;
  v9 = 0x2000000000;
  v10 = 0;
  v3 = *(NSObject **)(v2 + 168);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = sub_19C3E2404;
  block[3] = &unk_1E3D3BC30;
  block[4] = &v7;
  block[5] = v2;
  block[6] = a2;
  dispatch_sync(v3, block);
  v4 = *((unsigned __int8 *)v8 + 24);
  _Block_object_dispose(&v7, 8);
  return v4;
}

uint64_t LMVocabularyContainsLemma(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  _QWORD block[7];
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  char v10;

  if (!a1)
    return 0;
  v2 = *(_QWORD *)(a1 + 24);
  v7 = 0;
  v8 = &v7;
  v9 = 0x2000000000;
  v10 = 0;
  v3 = *(NSObject **)(v2 + 168);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = sub_19C3E2330;
  block[3] = &unk_1E3D3BC58;
  block[4] = &v7;
  block[5] = v2;
  block[6] = a2;
  dispatch_sync(v3, block);
  v4 = *((unsigned __int8 *)v8 + 24);
  _Block_object_dispose(&v7, 8);
  return v4;
}

uint64_t LMVocabularyContainsLemmaForCharacters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  _QWORD v7[8];
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  char v11;

  if (!a1)
    return 0;
  v3 = *(_QWORD *)(a1 + 24);
  v8 = 0;
  v9 = &v8;
  v10 = 0x2000000000;
  v11 = 0;
  v4 = *(NSObject **)(v3 + 168);
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 0x40000000;
  v7[2] = sub_19C3E22F8;
  v7[3] = &unk_1E3D3BC80;
  v7[4] = &v8;
  v7[5] = v3;
  v7[6] = a2;
  v7[7] = a3;
  dispatch_sync(v4, v7);
  v5 = *((unsigned __int8 *)v9 + 24);
  _Block_object_dispose(&v8, 8);
  return v5;
}

uint64_t LMVocabularyGetTokenIDForLemma(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  _QWORD v6[8];
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;

  if (!a1)
    return 0;
  v2 = *(_QWORD *)(a1 + 24);
  v7 = 0;
  v8 = &v7;
  v10 = 0;
  v9 = 0x2000000000;
  v3 = *(NSObject **)(v2 + 168);
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 0x40000000;
  v6[2] = sub_19C3E21A8;
  v6[3] = &unk_1E3D3BCF8;
  v6[4] = &v7;
  v6[5] = v2;
  v6[6] = a2;
  v6[7] = 0;
  dispatch_sync(v3, v6);
  v4 = *((unsigned int *)v8 + 6);
  _Block_object_dispose(&v7, 8);
  return v4;
}

uint64_t LMVocabularyGetClassForTokenID(uint64_t a1, int a2)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  _QWORD block[6];
  int v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;

  if (!a1)
    return 0;
  v2 = *(_QWORD *)(a1 + 24);
  v8 = 0;
  v9 = &v8;
  v11 = 0;
  v10 = 0x2000000000;
  v3 = *(NSObject **)(v2 + 168);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = sub_19C3E1F2C;
  block[3] = &unk_1E3D3BD70;
  block[4] = &v8;
  block[5] = v2;
  v7 = a2;
  dispatch_sync(v3, block);
  v4 = *((unsigned int *)v9 + 6);
  _Block_object_dispose(&v8, 8);
  return v4;
}

double LMVocabularyGetPriorProbabilityForTokenID(uint64_t a1, int a2)
{
  uint64_t v2;
  NSObject *v3;
  double v4;
  _QWORD block[6];
  int v7;
  uint64_t v8;
  double *v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
    return 0.0;
  v2 = *(_QWORD *)(a1 + 24);
  v8 = 0;
  v9 = (double *)&v8;
  v10 = 0x2000000000;
  v11 = 0;
  v3 = *(NSObject **)(v2 + 168);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = sub_19C3E1E2C;
  block[3] = &unk_1E3D3BD98;
  block[4] = &v8;
  block[5] = v2;
  v7 = a2;
  dispatch_sync(v3, block);
  v4 = v9[3];
  _Block_object_dispose(&v8, 8);
  return v4;
}

uint64_t LMVocabularyAddLemma(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5)
{
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  _QWORD v9[9];
  int v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;

  if (!a1)
    return 0;
  v5 = *(_QWORD *)(a1 + 24);
  v11 = 0;
  v12 = &v11;
  v14 = 0;
  v13 = 0x2000000000;
  v6 = *(NSObject **)(v5 + 168);
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 0x40000000;
  v9[2] = sub_19C3E23C8;
  v9[3] = &unk_1E3D3BE70;
  v9[4] = &v11;
  v9[5] = v5;
  v9[6] = a2;
  v10 = a3;
  *(double *)&v9[7] = a5;
  v9[8] = a4;
  dispatch_sync(v6, v9);
  v7 = *((unsigned int *)v12 + 6);
  _Block_object_dispose(&v11, 8);
  return v7;
}

void LMVocabularyEnumerateInflectionsOfLemma(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3;
  NSObject *v4;
  _QWORD block[6];
  int v6;

  if (a1)
  {
    v3 = *(_QWORD *)(a1 + 24);
    v4 = *(NSObject **)(v3 + 168);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = sub_19C3E22E4;
    block[3] = &unk_1E3D3BCA8;
    v6 = a2;
    block[4] = a3;
    block[5] = v3;
    dispatch_sync(v4, block);
  }
}

void LMVocabularyAddObserver(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  NSObject *v4;
  _QWORD block[7];

  if (a1)
  {
    v3 = *(_QWORD *)(a1 + 24);
    v4 = *(NSObject **)(v3 + 168);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = sub_19C3E1D98;
    block[3] = &unk_1E3D3BE08;
    block[4] = v3;
    block[5] = a2;
    block[6] = a3;
    dispatch_sync(v4, block);
  }
}

void LMVocabularyRemoveObserver(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  NSObject *v3;
  _QWORD v4[6];

  if (a1)
  {
    v2 = *(_QWORD *)(a1 + 24);
    v3 = *(NSObject **)(v2 + 168);
    v4[0] = MEMORY[0x1E0C809B0];
    v4[1] = 0x40000000;
    v4[2] = sub_19C3E1D64;
    v4[3] = &unk_1E3D3BE28;
    v4[4] = v2;
    v4[5] = a2;
    dispatch_sync(v3, v4);
  }
}

void LMVocabularyCommitChanges(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  _QWORD block[5];

  if (a1)
  {
    v1 = *(_QWORD *)(a1 + 24);
    v2 = *(NSObject **)(v1 + 168);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = sub_19C3E1D1C;
    block[3] = &unk_1E3D3BE48;
    block[4] = v1;
    dispatch_sync(v2, block);
  }
}

void LMVocabularyReset(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  _QWORD block[5];

  if (a1)
  {
    v1 = *(_QWORD *)(a1 + 24);
    v2 = *(NSObject **)(v1 + 168);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = sub_19C3E1D10;
    block[3] = &unk_1E3D3BE90;
    block[4] = v1;
    dispatch_sync(v2, block);
  }
}

_QWORD *language_modeling::v1::LanguageModelSession::LanguageModelSession(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *a2 = 0;
  *result = v2;
  return result;
}

{
  uint64_t v2;

  v2 = *a2;
  *a2 = 0;
  *result = v2;
  return result;
}

void language_modeling::v1::LanguageModelSession::addPriorText(uint64_t *a1, const UInt8 *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  void *__p[2];
  char v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v8 = *a1;
  sub_19C297950(__p, a2);
  (*(void (**)(uint64_t, void **, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 88))(v8, __p, a3, a4, a5);
  if (v10 < 0)
    operator delete(__p[0]);
}

void sub_19C2EE400(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, __int128 buf)
{
  void *v18;
  NSObject *v19;
  uint64_t v20;

  if (a2)
  {
    if (a15 < 0)
      operator delete(__p);
    if (a2 == 2)
    {
      v18 = __cxa_begin_catch(a1);
      if (qword_1EDB97228 != -1)
        dispatch_once(&qword_1EDB97228, &unk_1E3D3ABD0);
      v19 = qword_1EDB97220;
      if (os_log_type_enabled((os_log_t)qword_1EDB97220, OS_LOG_TYPE_ERROR))
      {
        v20 = (*(uint64_t (**)(void *))(*(_QWORD *)v18 + 16))(v18);
        LODWORD(buf) = 136315394;
        *(_QWORD *)((char *)&buf + 4) = "addPriorText";
        WORD6(buf) = 2080;
        *(_QWORD *)((char *)&buf + 14) = v20;
        _os_log_error_impl(&dword_19C291000, v19, OS_LOG_TYPE_ERROR, "%s: caught unexpected exception: %s", (uint8_t *)&buf, 0x16u);
      }
      __cxa_end_catch();
      JUMPOUT(0x19C2EE3D0);
    }
    sub_19C2CDAC8(a1);
  }
  _Unwind_Resume(a1);
}

void language_modeling::v1::LanguageModelSession::adaptToText(uint64_t *a1, const UInt8 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  void *__p[2];
  char v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v6 = *a1;
  sub_19C297950(__p, a2);
  (*(void (**)(uint64_t, void **, uint64_t, uint64_t))(*(_QWORD *)v6 + 96))(v6, __p, a3, a4);
  if (v8 < 0)
    operator delete(__p[0]);
}

void sub_19C2EE590(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, __int128 buf)
{
  void *v18;
  NSObject *v19;
  uint64_t v20;

  if (a2)
  {
    if (a15 < 0)
      operator delete(__p);
    if (a2 == 2)
    {
      v18 = __cxa_begin_catch(a1);
      if (qword_1EDB97228 != -1)
        dispatch_once(&qword_1EDB97228, &unk_1E3D3ABD0);
      v19 = qword_1EDB97220;
      if (os_log_type_enabled((os_log_t)qword_1EDB97220, OS_LOG_TYPE_ERROR))
      {
        v20 = (*(uint64_t (**)(void *))(*(_QWORD *)v18 + 16))(v18);
        LODWORD(buf) = 136315394;
        *(_QWORD *)((char *)&buf + 4) = "adaptToText";
        WORD6(buf) = 2080;
        *(_QWORD *)((char *)&buf + 14) = v20;
        _os_log_error_impl(&dword_19C291000, v19, OS_LOG_TYPE_ERROR, "%s: caught unexpected exception: %s", (uint8_t *)&buf, 0x16u);
      }
      __cxa_end_catch();
      JUMPOUT(0x19C2EE560);
    }
    sub_19C2CDAC8(a1);
  }
  _Unwind_Resume(a1);
}

void language_modeling::v1::LanguageModelSession::adaptToToken(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  void *__p[2];
  char v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v5 = *a1;
  sub_19C297950(__p, (const UInt8 *)a2);
  v8 = *(_DWORD *)(a2 + 24);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v5 + 104))(v5, __p, a3);
  if (v7 < 0)
    operator delete(__p[0]);
}

void sub_19C2EE724(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, __int128 buf)
{
  void *v18;
  NSObject *v19;
  uint64_t v20;

  if (a2)
  {
    if (a14 < 0)
      operator delete(__p);
    if (a2 == 2)
    {
      v18 = __cxa_begin_catch(a1);
      if (qword_1EDB97228 != -1)
        dispatch_once(&qword_1EDB97228, &unk_1E3D3ABD0);
      v19 = qword_1EDB97220;
      if (os_log_type_enabled((os_log_t)qword_1EDB97220, OS_LOG_TYPE_ERROR))
      {
        v20 = (*(uint64_t (**)(void *))(*(_QWORD *)v18 + 16))(v18);
        LODWORD(buf) = 136315394;
        *(_QWORD *)((char *)&buf + 4) = "adaptToToken";
        WORD6(buf) = 2080;
        *(_QWORD *)((char *)&buf + 14) = v20;
        _os_log_error_impl(&dword_19C291000, v19, OS_LOG_TYPE_ERROR, "%s: caught unexpected exception: %s", (uint8_t *)&buf, 0x16u);
      }
      __cxa_end_catch();
      JUMPOUT(0x19C2EE6F4);
    }
    sub_19C2CDAC8(a1);
  }
  _Unwind_Resume(a1);
}

void language_modeling::v1::LanguageModelSession::unAdaptToToken(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  void *__p[2];
  char v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v5 = *a1;
  sub_19C297950(__p, (const UInt8 *)a2);
  v8 = *(_DWORD *)(a2 + 24);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v5 + 112))(v5, __p, a3);
  if (v7 < 0)
    operator delete(__p[0]);
}

void sub_19C2EE8B8(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, __int128 buf)
{
  void *v18;
  NSObject *v19;
  uint64_t v20;

  if (a2)
  {
    if (a14 < 0)
      operator delete(__p);
    if (a2 == 2)
    {
      v18 = __cxa_begin_catch(a1);
      if (qword_1EDB97228 != -1)
        dispatch_once(&qword_1EDB97228, &unk_1E3D3ABD0);
      v19 = qword_1EDB97220;
      if (os_log_type_enabled((os_log_t)qword_1EDB97220, OS_LOG_TYPE_ERROR))
      {
        v20 = (*(uint64_t (**)(void *))(*(_QWORD *)v18 + 16))(v18);
        LODWORD(buf) = 136315394;
        *(_QWORD *)((char *)&buf + 4) = "unAdaptToToken";
        WORD6(buf) = 2080;
        *(_QWORD *)((char *)&buf + 14) = v20;
        _os_log_error_impl(&dword_19C291000, v19, OS_LOG_TYPE_ERROR, "%s: caught unexpected exception: %s", (uint8_t *)&buf, 0x16u);
      }
      __cxa_end_catch();
      JUMPOUT(0x19C2EE888);
    }
    sub_19C2CDAC8(a1);
  }
  _Unwind_Resume(a1);
}

void language_modeling::v1::LanguageModelSession::registerNegativeEvidence(uint64_t *a1, const UInt8 *a2)
{
  uint64_t v2;
  void *__p[2];
  char v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  sub_19C297950(__p, a2);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v2 + 120))(v2, __p);
  if (v4 < 0)
    operator delete(__p[0]);
}

void sub_19C2EEA30(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, __int128 buf)
{
  void *v18;
  NSObject *v19;
  uint64_t v20;

  if (a2)
  {
    if (a15 < 0)
      operator delete(__p);
    if (a2 == 2)
    {
      v18 = __cxa_begin_catch(a1);
      if (qword_1EDB97228 != -1)
        dispatch_once(&qword_1EDB97228, &unk_1E3D3ABD0);
      v19 = qword_1EDB97220;
      if (os_log_type_enabled((os_log_t)qword_1EDB97220, OS_LOG_TYPE_ERROR))
      {
        v20 = (*(uint64_t (**)(void *))(*(_QWORD *)v18 + 16))(v18);
        LODWORD(buf) = 136315394;
        *(_QWORD *)((char *)&buf + 4) = "registerNegativeEvidence";
        WORD6(buf) = 2080;
        *(_QWORD *)((char *)&buf + 14) = v20;
        _os_log_error_impl(&dword_19C291000, v19, OS_LOG_TYPE_ERROR, "%s: caught unexpected exception: %s", (uint8_t *)&buf, 0x16u);
      }
      __cxa_end_catch();
      JUMPOUT(0x19C2EEA04);
    }
    sub_19C2CDAC8(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t language_modeling::v1::LanguageModelSession::canReasonAbout(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 16))(*a1);
}

uint64_t language_modeling::v1::LanguageModelSession::detailedConditionalProbability(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *__p[2];
  char v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  *(int64x2_t *)v6 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)(v6 + 24) = 0;
  *(_BYTE *)(v6 + 32) = 1;
  *(_OWORD *)(v6 + 40) = xmmword_19C46DE10;
  *(_DWORD *)(v6 + 56) = 0;
  *(_OWORD *)(v6 + 64) = xmmword_19C46DE10;
  *(_QWORD *)(v6 + 88) = 0;
  *(_QWORD *)(v6 + 96) = 0;
  *(_QWORD *)(v6 + 80) = 0xFFEFFFFFFFFFFFFFLL;
  *(_DWORD *)(v6 + 104) = 0;
  v7 = *a1;
  sub_19C297950(__p, (const UInt8 *)a2);
  v11 = *(_DWORD *)(a2 + 24);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v7 + 24))(v7, __p, a3);
  if (v10 < 0)
    operator delete(__p[0]);
  return MEMORY[0x1A1AD355C](v6, 0x1000C4065B674BELL);
}

void sub_19C2EED6C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, __int128 buf)
{
  uint64_t v16;
  _QWORD *v17;
  void *v20;
  NSObject *v21;
  uint64_t v22;

  if (a2)
  {
    if (a14 < 0)
      operator delete(__p);
    if (a2 == 2)
    {
      v20 = __cxa_begin_catch(a1);
      if (qword_1EDB97228 != -1)
        dispatch_once(&qword_1EDB97228, &unk_1E3D3ABD0);
      v21 = qword_1EDB97220;
      if (os_log_type_enabled((os_log_t)qword_1EDB97220, OS_LOG_TYPE_ERROR))
      {
        v22 = (*(uint64_t (**)(void *))(*(_QWORD *)v20 + 16))(v20);
        LODWORD(buf) = 136315394;
        *(_QWORD *)((char *)&buf + 4) = "detailedConditionalProbability";
        WORD6(buf) = 2080;
        *(_QWORD *)((char *)&buf + 14) = v22;
        _os_log_error_impl(&dword_19C291000, v21, OS_LOG_TYPE_ERROR, "%s: caught unexpected exception: %s", (uint8_t *)&buf, 0x16u);
      }
      *v17 = v16;
      __cxa_end_catch();
      JUMPOUT(0x19C2EED38);
    }
    sub_19C2CDAC8(a1);
  }
  _Unwind_Resume(a1);
}

void language_modeling::v1::LanguageModelSession::detailedConditionalProbability(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void **v11;
  void **v12;
  void *v13;
  void *__p;
  char *v15;
  char *v16;
  void **p_p;
  char v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v5 = *a2;
  v6 = a2[1];
  v15 = 0;
  v16 = 0;
  __p = 0;
  p_p = &__p;
  v18 = 0;
  v7 = v6 - v5;
  if (v6 != v5)
  {
    if (v7 < 0)
      sub_19C2A18E8();
    v8 = (char *)operator new(v6 - v5);
    v9 = 0;
    __p = v8;
    v15 = v8;
    v16 = &v8[32 * (v7 >> 5)];
    do
    {
      v10 = v5 + v9;
      sub_19C297950(&v8[v9], (const UInt8 *)(v5 + v9));
      *(_DWORD *)&v8[v9 + 24] = *(_DWORD *)(v5 + v9 + 24);
      v9 += 32;
    }
    while (v10 + 32 != v6);
    v15 = &v8[v9];
  }
  (*(void (**)(_QWORD, void **, uint64_t))(*(_QWORD *)*a1 + 40))(*a1, &__p, a3);
  v11 = (void **)__p;
  if (__p)
  {
    v12 = (void **)v15;
    v13 = __p;
    if (v15 != __p)
    {
      do
      {
        if (*((char *)v12 - 9) < 0)
          operator delete(*(v12 - 4));
        v12 -= 4;
      }
      while (v12 != v11);
      v13 = __p;
    }
    v15 = (char *)v11;
    operator delete(v13);
  }
}

void sub_19C2EEFC8(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, __int128 buf)
{
  _QWORD *v13;
  void *v14;
  NSObject *v15;
  uint64_t v16;

  if (a2)
  {
    if (a2 == 2)
    {
      v14 = __cxa_begin_catch(a1);
      if (qword_1EDB97228 != -1)
        dispatch_once(&qword_1EDB97228, &unk_1E3D3ABD0);
      v15 = qword_1EDB97220;
      if (os_log_type_enabled((os_log_t)qword_1EDB97220, OS_LOG_TYPE_ERROR))
      {
        v16 = (*(uint64_t (**)(void *))(*(_QWORD *)v14 + 16))(v14);
        LODWORD(buf) = 136315394;
        *(_QWORD *)((char *)&buf + 4) = "detailedConditionalProbability";
        WORD6(buf) = 2080;
        *(_QWORD *)((char *)&buf + 14) = v16;
        _os_log_error_impl(&dword_19C291000, v15, OS_LOG_TYPE_ERROR, "%s: caught unexpected exception: %s", (uint8_t *)&buf, 0x16u);
      }
      *v13 = 0;
      v13[1] = 0;
      v13[2] = 0;
      __cxa_end_catch();
      JUMPOUT(0x19C2EEF3CLL);
    }
    sub_19C2CDAC8(a1);
  }
  _Unwind_Resume(a1);
}

void language_modeling::v1::LanguageModelSession::detailedConditionalProbability(_QWORD *a1, uint64_t **a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t *v6;
  void *v7;
  char *v8;
  char *v9;
  void **v10;
  void **v11;
  void *v12;
  void **v13;
  void **v14;
  void **v15;
  void **v16;
  void *v17;
  void **v18;
  void *v19;
  void **v20;
  void **v21;
  void **v22;
  void *v23;
  void **v24;
  uint64_t v25;
  void *v26;
  char *v27;
  unint64_t v28;
  void *__p;
  void **v30;
  uint64_t v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v26 = 0;
  v27 = 0;
  v28 = 0;
  v5 = *a2;
  v6 = a2[1];
  while (v5 != v6)
  {
    __p = 0;
    v30 = 0;
    v31 = 0;
    sub_19C2E2178(&__p, *v5, v5[1], (v5[1] - *v5) >> 5);
    v24 = 0;
    v25 = 0;
    v23 = 0;
    sub_19C2EF404(&v23, (uint64_t)__p, (uint64_t)v30, ((char *)v30 - (_BYTE *)__p) >> 5);
    v8 = v27;
    if ((unint64_t)v27 >= v28)
    {
      v9 = sub_19C2EF508((void ***)&v26, (uint64_t)v23, (uint64_t)v24);
    }
    else
    {
      *(_QWORD *)v27 = 0;
      *((_QWORD *)v8 + 1) = 0;
      *((_QWORD *)v8 + 2) = 0;
      sub_19C2E229C(v8, (uint64_t)v23, (uint64_t)v24, ((char *)v24 - (_BYTE *)v23) >> 5);
      v9 = v8 + 24;
    }
    v27 = v9;
    v10 = (void **)v23;
    if (v23)
    {
      v11 = v24;
      v12 = v23;
      if (v24 != v23)
      {
        do
        {
          if (*((char *)v11 - 9) < 0)
            operator delete(*(v11 - 4));
          v11 -= 4;
        }
        while (v11 != v10);
        v12 = v23;
      }
      v24 = v10;
      operator delete(v12);
    }
    v13 = (void **)__p;
    if (__p)
    {
      v14 = v30;
      v7 = __p;
      if (v30 != __p)
      {
        do
        {
          if (*((char *)v14 - 9) < 0)
            operator delete(*(v14 - 4));
          v14 -= 4;
        }
        while (v14 != v13);
        v7 = __p;
      }
      v30 = v13;
      operator delete(v7);
    }
    v5 += 3;
  }
  (*(void (**)(_QWORD, void **, uint64_t))(*(_QWORD *)*a1 + 48))(*a1, &v26, a3);
  v15 = (void **)v26;
  if (v26)
  {
    v16 = (void **)v27;
    v17 = v26;
    if (v27 != v26)
    {
      v18 = (void **)v27;
      do
      {
        v21 = (void **)*(v18 - 3);
        v18 -= 3;
        v20 = v21;
        if (v21)
        {
          v22 = (void **)*(v16 - 2);
          v19 = v20;
          if (v22 != v20)
          {
            do
            {
              if (*((char *)v22 - 9) < 0)
                operator delete(*(v22 - 4));
              v22 -= 4;
            }
            while (v22 != v20);
            v19 = *v18;
          }
          *(v16 - 2) = v20;
          operator delete(v19);
        }
        v16 = v18;
      }
      while (v18 != v15);
      v17 = v26;
    }
    v27 = (char *)v15;
    operator delete(v17);
  }
}

void sub_19C2EF404(_QWORD *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  char *v8;
  uint64_t v9;
  uint64_t v10;

  if (a4)
  {
    if (a4 >> 59)
      sub_19C2A18E8();
    v8 = (char *)operator new(32 * a4);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[32 * a4];
    if (a2 != a3)
    {
      v9 = 0;
      do
      {
        v10 = a2 + v9;
        sub_19C297950(&v8[v9], (const UInt8 *)(a2 + v9));
        *(_DWORD *)&v8[v9 + 24] = *(_DWORD *)(a2 + v9 + 24);
        v9 += 32;
      }
      while (v10 + 32 != a3);
      v8 += v9;
    }
    a1[1] = v8;
  }
}

void sub_19C2EF4C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_19C2E2430(&a9);
  _Unwind_Resume(a1);
}

char *sub_19C2EF508(void ***a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v8;
  char *v9;
  void **v10;
  void **v11;
  void **v12;
  void **v13;
  __int128 v14;
  void **v15;
  void **v16;
  void *v17;
  void **v18;
  void **v19;
  void **v20;
  char *v22;
  void **v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (a1[1] - *a1);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_19C2A18E8();
  if (0x5555555555555556 * (a1[2] - *a1) > v4)
    v4 = 0x5555555555555556 * (a1[2] - *a1);
  if (0xAAAAAAAAAAAAAAABLL * (a1[2] - *a1) >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  else
    v8 = v4;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      sub_19C2A143C();
    v9 = (char *)operator new(24 * v8);
  }
  else
  {
    v9 = 0;
  }
  v22 = &v9[24 * v3];
  v23 = (void **)&v9[24 * v8];
  *((_QWORD *)v22 + 1) = 0;
  *((_QWORD *)v22 + 2) = 0;
  *(_QWORD *)v22 = 0;
  sub_19C2E229C(v22, a2, a3, (a3 - a2) >> 5);
  v10 = (void **)v22;
  v11 = (void **)(v22 + 24);
  v12 = *a1;
  v13 = a1[1];
  if (v13 == *a1)
  {
    *a1 = (void **)v22;
    a1[1] = v11;
    a1[2] = v23;
  }
  else
  {
    do
    {
      *(v10 - 3) = 0;
      *(v10 - 2) = 0;
      v10 -= 3;
      v10[2] = 0;
      v14 = *(_OWORD *)(v13 - 3);
      v13 -= 3;
      *(_OWORD *)v10 = v14;
      v10[2] = v13[2];
      *v13 = 0;
      v13[1] = 0;
      v13[2] = 0;
    }
    while (v13 != v12);
    v13 = *a1;
    v15 = a1[1];
    *a1 = v10;
    a1[1] = v11;
    a1[2] = v23;
    if (v15 != v13)
    {
      v16 = v15;
      do
      {
        v19 = (void **)*(v16 - 3);
        v16 -= 3;
        v18 = v19;
        if (v19)
        {
          v20 = (void **)*(v15 - 2);
          v17 = v18;
          if (v20 != v18)
          {
            do
            {
              if (*((char *)v20 - 9) < 0)
                operator delete(*(v20 - 4));
              v20 -= 4;
            }
            while (v20 != v18);
            v17 = *v16;
          }
          *(v15 - 2) = v18;
          operator delete(v17);
        }
        v15 = v16;
      }
      while (v16 != v13);
    }
  }
  if (v13)
    operator delete(v13);
  return v22 + 24;
}

void sub_19C2EF6CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C2EF6E0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19C2EF6E0(uint64_t a1)
{
  void **v2;
  void **v3;
  void **v4;
  void *v5;
  void **v6;
  void **v7;
  void **v8;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  if (v3 != v2)
  {
    v4 = *(void ***)(a1 + 16);
    do
    {
      v7 = (void **)*(v4 - 3);
      v4 -= 3;
      v6 = v7;
      *(_QWORD *)(a1 + 16) = v4;
      if (v7)
      {
        v8 = (void **)*(v3 - 2);
        v5 = v6;
        if (v8 != v6)
        {
          do
          {
            if (*((char *)v8 - 9) < 0)
              operator delete(*(v8 - 4));
            v8 -= 4;
          }
          while (v8 != v6);
          v5 = *v4;
        }
        *(v3 - 2) = v6;
        operator delete(v5);
        v4 = *(void ***)(a1 + 16);
      }
      v3 = v4;
    }
    while (v4 != v2);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void language_modeling::v1::LanguageModelSession::detailedConditionalProbability(_QWORD *a1, uint64_t **a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v7;
  uint64_t *v8;
  void *v9;
  char *v10;
  char *v11;
  void **v12;
  void **v13;
  void *v14;
  void **v15;
  void **v16;
  void **v17;
  void **v18;
  void *v19;
  void **v20;
  void *v21;
  void **v22;
  void **v23;
  void **v24;
  void *v25;
  void **v26;
  uint64_t v27;
  void *v28;
  char *v29;
  unint64_t v30;
  void *__p;
  void **v32;
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v28 = 0;
  v29 = 0;
  v30 = 0;
  v7 = *a2;
  v8 = a2[1];
  while (v7 != v8)
  {
    __p = 0;
    v32 = 0;
    v33 = 0;
    sub_19C2E2178(&__p, *v7, v7[1], (v7[1] - *v7) >> 5);
    v26 = 0;
    v27 = 0;
    v25 = 0;
    sub_19C2EF404(&v25, (uint64_t)__p, (uint64_t)v32, ((char *)v32 - (_BYTE *)__p) >> 5);
    v10 = v29;
    if ((unint64_t)v29 >= v30)
    {
      v11 = sub_19C2EF508((void ***)&v28, (uint64_t)v25, (uint64_t)v26);
    }
    else
    {
      *(_QWORD *)v29 = 0;
      *((_QWORD *)v10 + 1) = 0;
      *((_QWORD *)v10 + 2) = 0;
      sub_19C2E229C(v10, (uint64_t)v25, (uint64_t)v26, ((char *)v26 - (_BYTE *)v25) >> 5);
      v11 = v10 + 24;
    }
    v29 = v11;
    v12 = (void **)v25;
    if (v25)
    {
      v13 = v26;
      v14 = v25;
      if (v26 != v25)
      {
        do
        {
          if (*((char *)v13 - 9) < 0)
            operator delete(*(v13 - 4));
          v13 -= 4;
        }
        while (v13 != v12);
        v14 = v25;
      }
      v26 = v12;
      operator delete(v14);
    }
    v15 = (void **)__p;
    if (__p)
    {
      v16 = v32;
      v9 = __p;
      if (v32 != __p)
      {
        do
        {
          if (*((char *)v16 - 9) < 0)
            operator delete(*(v16 - 4));
          v16 -= 4;
        }
        while (v16 != v15);
        v9 = __p;
      }
      v32 = v15;
      operator delete(v9);
    }
    v7 += 3;
  }
  (*(void (**)(_QWORD, void **, uint64_t, uint64_t))(*(_QWORD *)*a1 + 56))(*a1, &v28, a3, a4);
  v17 = (void **)v28;
  if (v28)
  {
    v18 = (void **)v29;
    v19 = v28;
    if (v29 != v28)
    {
      v20 = (void **)v29;
      do
      {
        v23 = (void **)*(v20 - 3);
        v20 -= 3;
        v22 = v23;
        if (v23)
        {
          v24 = (void **)*(v18 - 2);
          v21 = v22;
          if (v24 != v22)
          {
            do
            {
              if (*((char *)v24 - 9) < 0)
                operator delete(*(v24 - 4));
              v24 -= 4;
            }
            while (v24 != v22);
            v21 = *v20;
          }
          *(v18 - 2) = v22;
          operator delete(v21);
        }
        v18 = v20;
      }
      while (v20 != v17);
      v19 = v28;
    }
    v29 = (char *)v17;
    operator delete(v19);
  }
}

uint64_t language_modeling::v1::LanguageModelSession::conditionalProbability(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v5;

  language_modeling::v1::LanguageModelSession::detailedConditionalProbability(a1, a2, a3);
  v3 = *v5;
  MEMORY[0x1A1AD355C]();
  return v3;
}

uint64_t language_modeling::v1::LanguageModelSession::combinedConditionalProbability@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;

  language_modeling::v1::LanguageModelSession::detailedConditionalProbability(a1, a2, a3);
  *(_OWORD *)a4 = *(_OWORD *)v6;
  *(_DWORD *)(a4 + 16) = *(_DWORD *)(v6 + 104);
  return MEMORY[0x1A1AD355C]();
}

void language_modeling::v1::LanguageModelSession::conditionalProbability(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, void **a4@<X8>)
{
  uint64_t **v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  __int128 v20;
  uint64_t **v21;
  uint64_t **v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t **__p;
  uint64_t **v26;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  language_modeling::v1::LanguageModelSession::detailedConditionalProbability(a1, a2, a3);
  v5 = __p;
  if (__p != v26)
  {
    v6 = 0;
    do
    {
      v9 = **v5;
      v8 = (*v5)[1];
      v10 = *((_DWORD *)*v5 + 26);
      v11 = (unint64_t)a4[2];
      if ((unint64_t)v6 < v11)
      {
        *(_QWORD *)v6 = v9;
        *((_QWORD *)v6 + 1) = v8;
        v7 = v6 + 24;
        *((_DWORD *)v6 + 4) = v10;
      }
      else
      {
        v12 = (char *)*a4;
        v13 = 0xAAAAAAAAAAAAAAABLL * ((v6 - (_BYTE *)*a4) >> 3);
        v14 = v13 + 1;
        if (v13 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_19C2A18E8();
        v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - (_QWORD)v12) >> 3);
        if (2 * v15 > v14)
          v14 = 2 * v15;
        if (v15 >= 0x555555555555555)
          v16 = 0xAAAAAAAAAAAAAAALL;
        else
          v16 = v14;
        if (v16)
        {
          if (v16 > 0xAAAAAAAAAAAAAAALL)
            sub_19C2A143C();
          v17 = (char *)operator new(24 * v16);
        }
        else
        {
          v17 = 0;
        }
        v18 = &v17[24 * v13];
        *(_QWORD *)v18 = v9;
        *((_QWORD *)v18 + 1) = v8;
        *((_DWORD *)v18 + 4) = v10;
        v19 = v18;
        if (v6 != v12)
        {
          do
          {
            v20 = *(_OWORD *)(v6 - 24);
            *((_QWORD *)v19 - 1) = *((_QWORD *)v6 - 1);
            *(_OWORD *)(v19 - 24) = v20;
            v19 -= 24;
            v6 -= 24;
          }
          while (v6 != v12);
          v6 = (char *)*a4;
        }
        v7 = v18 + 24;
        *a4 = v19;
        a4[1] = v18 + 24;
        a4[2] = &v17[24 * v16];
        if (v6)
          operator delete(v6);
      }
      a4[1] = v7;
      ++v5;
      v6 = v7;
    }
    while (v5 != v26);
    v5 = __p;
  }
  if (v5)
  {
    v21 = v26;
    v22 = v5;
    if (v26 != v5)
    {
      do
      {
        v24 = (uint64_t)*--v21;
        v23 = v24;
        *v21 = 0;
        if (v24)
          MEMORY[0x1A1AD355C](v23, 0x1000C4065B674BELL);
      }
      while (v21 != v5);
      v22 = __p;
    }
    operator delete(v22);
  }
}

void language_modeling::v1::LanguageModelSession::conditionalProbability(_QWORD *a1@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X2>, char **a4@<X8>)
{
  void **v5;
  uint64_t **v6;
  _QWORD **v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;
  char *v20;
  char **v21;
  unint64_t v22;
  char *v23;
  int64_t v24;
  void **v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  int64_t v37;
  char *v38;
  char *v39;
  char *v40;
  __int128 v41;
  char *v42;
  char *v43;
  void *v44;
  void *v45;
  void **v46;
  void **v47;
  void **v48;
  void *v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char **v56;
  char **v57;
  void **v58;
  void **__p;
  void **v60;
  __int128 v61;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  language_modeling::v1::LanguageModelSession::detailedConditionalProbability(a1, a2, a3);
  v5 = __p;
  if (__p != v60)
  {
    v57 = a4;
    do
    {
      v6 = (uint64_t **)*v5;
      v7 = (_QWORD **)v5[1];
      v58 = v5;
      if (*v5 == v7)
      {
        v8 = 0;
        v9 = 0;
      }
      else
      {
        v8 = 0;
        v9 = 0;
        v10 = 0;
        do
        {
          v12 = **v6;
          v11 = (*v6)[1];
          v13 = *((_DWORD *)*v6 + 26);
          if (v9 < v10)
          {
            *(_QWORD *)v9 = v12;
            *((_QWORD *)v9 + 1) = v11;
            *((_DWORD *)v9 + 4) = v13;
            v9 += 24;
          }
          else
          {
            v14 = 0xAAAAAAAAAAAAAAABLL * ((v9 - v8) >> 3) + 1;
            if (v14 > 0xAAAAAAAAAAAAAAALL)
              sub_19C2A18E8();
            if (0x5555555555555556 * ((v10 - v8) >> 3) > v14)
              v14 = 0x5555555555555556 * ((v10 - v8) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * ((v10 - v8) >> 3) >= 0x555555555555555)
              v15 = 0xAAAAAAAAAAAAAAALL;
            else
              v15 = v14;
            if (v15)
            {
              if (v15 > 0xAAAAAAAAAAAAAAALL)
                sub_19C2A143C();
              v16 = (char *)operator new(24 * v15);
            }
            else
            {
              v16 = 0;
            }
            v17 = &v16[8 * ((v9 - v8) >> 3)];
            *(_QWORD *)v17 = v12;
            *((_QWORD *)v17 + 1) = v11;
            *((_DWORD *)v17 + 4) = v13;
            if (v9 == v8)
            {
              v20 = &v16[8 * ((v9 - v8) >> 3)];
            }
            else
            {
              v18 = &v16[8 * ((v9 - v8) >> 3)];
              do
              {
                v19 = *(_OWORD *)(v9 - 24);
                v20 = v18 - 24;
                *((_QWORD *)v18 - 1) = *((_QWORD *)v9 - 1);
                *(_OWORD *)(v18 - 24) = v19;
                v9 -= 24;
                v18 -= 24;
              }
              while (v9 != v8);
            }
            v10 = &v16[24 * v15];
            v9 = v17 + 24;
            if (v8)
              operator delete(v8);
            v8 = v20;
          }
          ++v6;
        }
        while (v6 != v7);
      }
      v21 = v57;
      v23 = v57[1];
      v22 = (unint64_t)v57[2];
      if ((unint64_t)v23 >= v22)
      {
        v29 = *v57;
        v30 = 0xAAAAAAAAAAAAAAABLL * ((v23 - *v57) >> 3);
        v31 = v30 + 1;
        if (v30 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_19C2A18E8();
        v32 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - (_QWORD)v29) >> 3);
        if (2 * v32 > v31)
          v31 = 2 * v32;
        if (v32 >= 0x555555555555555)
          v33 = 0xAAAAAAAAAAAAAAALL;
        else
          v33 = v31;
        if (v33)
        {
          if (v33 > 0xAAAAAAAAAAAAAAALL)
            sub_19C2A143C();
          v34 = (char *)operator new(24 * v33);
        }
        else
        {
          v34 = 0;
        }
        v35 = &v34[24 * v30];
        v36 = &v34[24 * v33];
        *((_QWORD *)v35 + 1) = 0;
        *((_QWORD *)&v61 + 1) = v36;
        *((_QWORD *)v35 + 2) = 0;
        *(_QWORD *)v35 = 0;
        v37 = v9 - v8;
        if (v37)
        {
          v55 = &v34[24 * v33];
          v56 = (char **)(v35 + 8);
          if (0xAAAAAAAAAAAAAAABLL * (v37 >> 3) > 0xAAAAAAAAAAAAAAALL)
            sub_19C2A18E8();
          v38 = (char *)operator new(v37);
          *(_QWORD *)v35 = v38;
          *v56 = v38;
          v39 = &v38[8 * (v37 >> 3)];
          *((_QWORD *)v35 + 2) = v39;
          memcpy(v38, v8, v37);
          *v56 = v39;
          v36 = v55;
        }
        v28 = v35 + 24;
        *(_QWORD *)&v61 = v35 + 24;
        if (v23 == v29)
        {
          v21 = v57;
          v25 = v58;
          *v57 = v35;
          v57[1] = v28;
          v57[2] = v36;
        }
        else
        {
          do
          {
            v40 = v35;
            *((_QWORD *)v35 - 2) = 0;
            *((_QWORD *)v35 - 1) = 0;
            v41 = *(_OWORD *)(v23 - 24);
            v23 -= 24;
            *(_OWORD *)(v35 - 24) = v41;
            v35 -= 24;
            *((_QWORD *)v40 - 1) = *((_QWORD *)v23 + 2);
            *(_QWORD *)v23 = 0;
            *((_QWORD *)v23 + 1) = 0;
            *((_QWORD *)v23 + 2) = 0;
          }
          while (v23 != v29);
          v21 = v57;
          v25 = v58;
          v23 = *v57;
          v42 = v57[1];
          *v57 = v35;
          *(_OWORD *)(v57 + 1) = v61;
          v28 = (char *)v61;
          if (v42 != v23)
          {
            v43 = v42;
            do
            {
              v45 = (void *)*((_QWORD *)v43 - 3);
              v43 -= 24;
              v44 = v45;
              if (v45)
              {
                *((_QWORD *)v42 - 2) = v44;
                operator delete(v44);
              }
              v42 = v43;
            }
            while (v43 != v23);
          }
        }
        if (v23)
          operator delete(v23);
      }
      else
      {
        *(_QWORD *)v23 = 0;
        *((_QWORD *)v23 + 1) = 0;
        *((_QWORD *)v23 + 2) = 0;
        v24 = v9 - v8;
        v25 = v58;
        if (v24)
        {
          if (0xAAAAAAAAAAAAAAABLL * (v24 >> 3) > 0xAAAAAAAAAAAAAAALL)
            sub_19C2A18E8();
          v26 = (char *)operator new(v24);
          *(_QWORD *)v23 = v26;
          *((_QWORD *)v23 + 1) = v26;
          v27 = &v26[8 * (v24 >> 3)];
          *((_QWORD *)v23 + 2) = v27;
          memcpy(v26, v8, v24);
          *((_QWORD *)v23 + 1) = v27;
        }
        v28 = v23 + 24;
      }
      v21[1] = v28;
      if (v8)
        operator delete(v8);
      v5 = v25 + 3;
    }
    while (v5 != v60);
    v5 = __p;
  }
  if (v5)
  {
    v46 = v60;
    v47 = v5;
    if (v60 != v5)
    {
      v48 = v60;
      do
      {
        v51 = *(v48 - 3);
        v48 -= 3;
        v50 = v51;
        if (v51)
        {
          v52 = *(v46 - 2);
          v49 = v50;
          if (v52 != v50)
          {
            do
            {
              v54 = *--v52;
              v53 = v54;
              *v52 = 0;
              if (v54)
                MEMORY[0x1A1AD355C](v53, 0x1000C4065B674BELL);
            }
            while (v52 != v50);
            v49 = *v48;
          }
          *(v46 - 2) = v50;
          operator delete(v49);
        }
        v46 = v48;
      }
      while (v48 != v5);
      v47 = __p;
    }
    operator delete(v47);
  }
}

void sub_19C2F01A8(void *a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  void **v10;
  void *v12;
  va_list va;

  va_start(va, a10);
  v12 = *v10;
  if (*v10)
  {
    *a4 = v12;
    operator delete(v12);
  }
  sub_19C2F020C((uint64_t)va);
  sub_19C2CDAC8(a1);
}

uint64_t sub_19C2F020C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      while (1)
      {
        v5 = v2 - 24;
        v4 = *(void **)(v2 - 24);
        *(_QWORD *)(a1 + 16) = v2 - 24;
        if (!v4)
          break;
        *(_QWORD *)(v2 - 16) = v4;
        operator delete(v4);
        v2 = *(_QWORD *)(a1 + 16);
        if (v2 == v3)
          goto LABEL_6;
      }
      v2 -= 24;
    }
    while (v5 != v3);
  }
LABEL_6:
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *language_modeling::v1::LanguageModelSession::predictions@<X0>(language_modeling::v1::LanguageModelSession *this@<X0>, _QWORD *a2@<X8>)
{
  return (*(_QWORD *(**)(_QWORD *__return_ptr))(**(_QWORD **)this + 64))(a2);
}

void language_modeling::v1::LanguageModelSession::enumeratePredictions(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  unint64_t *v9;
  unint64_t *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  _QWORD *v14;
  _QWORD *v15;
  void *v16;
  void **v17;
  void **v18;
  void **v19;
  unint64_t *v20;
  unint64_t *v21;
  void *v22;
  void *v23;
  unint64_t *v24;
  _QWORD *v25;
  void *__p;
  _QWORD *v27;
  void **v28;
  char v29;
  void *__dst[2];
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v8 = *a1;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_19C2B5238(__dst, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)a3;
    v31 = *(_QWORD *)(a3 + 16);
  }
  v32 = 0;
  v24 = 0;
  v25 = 0;
  v23 = 0;
  v28 = &v23;
  v29 = 0;
  v9 = (unint64_t *)operator new(0x20uLL);
  v10 = v9;
  v23 = v9;
  v24 = v9;
  v11 = v9 + 4;
  v25 = v9 + 4;
  if (SHIBYTE(v31) < 0)
  {
    sub_19C2B5238(v9, __dst[0], (unint64_t)__dst[1]);
    v12 = v32;
    v13 = (unint64_t *)v23;
  }
  else
  {
    *(_OWORD *)v9 = *(_OWORD *)__dst;
    v9[2] = v31;
    v12 = 0;
    v13 = v9;
  }
  v10[3] = v12;
  v24 = v11;
  sub_19C3515D8((uint64_t **)&__p, v13, v11);
  (*(void (**)(uint64_t, uint64_t, void **, uint64_t, uint64_t))(*(_QWORD *)v8 + 72))(v8, a2, &__p, a4, a5);
  v14 = __p;
  if (__p)
  {
    v15 = v27;
    v16 = __p;
    if (v27 != __p)
    {
      do
      {
        v18 = (void **)*--v15;
        v17 = v18;
        *v15 = 0;
        if (v18)
        {
          v19 = sub_19C2E25C8(v17);
          MEMORY[0x1A1AD355C](v19, 0x1030C403C62F202);
        }
      }
      while (v15 != v14);
      v16 = __p;
    }
    v27 = v14;
    operator delete(v16);
  }
  v20 = (unint64_t *)v23;
  if (v23)
  {
    v21 = v24;
    v22 = v23;
    if (v24 != v23)
    {
      do
      {
        if (*((char *)v21 - 9) < 0)
          operator delete((void *)*(v21 - 4));
        v21 -= 4;
      }
      while (v21 != v20);
      v22 = v23;
    }
    v24 = v20;
    operator delete(v22);
  }
  if (SHIBYTE(v31) < 0)
    operator delete(__dst[0]);
}

void sub_19C2F0594(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, __int128 buf, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void *v25;
  NSObject *v26;
  uint64_t v27;

  if (a2)
  {
    sub_19C2E2430((void ***)&buf);
    if (a23 < 0)
      operator delete(__p);
    if (a2 == 2)
    {
      v25 = __cxa_begin_catch(a1);
      if (qword_1EDB97228 != -1)
        dispatch_once(&qword_1EDB97228, &unk_1E3D3ABD0);
      v26 = qword_1EDB97220;
      if (os_log_type_enabled((os_log_t)qword_1EDB97220, OS_LOG_TYPE_ERROR))
      {
        v27 = (*(uint64_t (**)(void *))(*(_QWORD *)v25 + 16))(v25);
        LODWORD(buf) = 136315394;
        *(_QWORD *)((char *)&buf + 4) = "enumeratePredictions";
        WORD6(buf) = 2080;
        *(_QWORD *)((char *)&buf + 14) = v27;
        _os_log_error_impl(&dword_19C291000, v26, OS_LOG_TYPE_ERROR, "%s: caught unexpected exception: %s", (uint8_t *)&buf, 0x16u);
      }
      __cxa_end_catch();
      JUMPOUT(0x19C2F0560);
    }
    sub_19C2CDAC8(a1);
  }
  _Unwind_Resume(a1);
}

_QWORD *sub_19C2F06DC(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  void **v5;
  void **v6;
  void **v7;

  v2 = (_QWORD *)*a1;
  if (*a1)
  {
    v3 = (_QWORD *)a1[1];
    v4 = (_QWORD *)*a1;
    if (v3 != v2)
    {
      do
      {
        v6 = (void **)*--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
        {
          v7 = sub_19C2E25C8(v5);
          MEMORY[0x1A1AD355C](v7, 0x1030C403C62F202);
        }
      }
      while (v3 != v2);
      v4 = (_QWORD *)*a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void language_modeling::v1::LanguageModelSession::enumeratePredictions(uint64_t *a1, uint64_t a2, unint64_t **a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  void *v11;
  void **v12;
  void **v13;
  void **v14;
  void *__p;
  _QWORD *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v8 = *a1;
  sub_19C3515D8((uint64_t **)&__p, *a3, a3[1]);
  (*(void (**)(uint64_t, uint64_t, void **, uint64_t, uint64_t))(*(_QWORD *)v8 + 72))(v8, a2, &__p, a4, a5);
  v9 = __p;
  if (__p)
  {
    v10 = v16;
    v11 = __p;
    if (v16 != __p)
    {
      do
      {
        v13 = (void **)*--v10;
        v12 = v13;
        *v10 = 0;
        if (v13)
        {
          v14 = sub_19C2E25C8(v12);
          MEMORY[0x1A1AD355C](v14, 0x1030C403C62F202);
        }
      }
      while (v10 != v9);
      v11 = __p;
    }
    v16 = v9;
    operator delete(v11);
  }
}

void sub_19C2F0844(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, __int128 buf)
{
  void *v15;
  NSObject *v16;
  uint64_t v17;

  if (a2)
  {
    sub_19C2F06DC(&a10);
    if (a2 == 2)
    {
      v15 = __cxa_begin_catch(a1);
      if (qword_1EDB97228 != -1)
        dispatch_once(&qword_1EDB97228, &unk_1E3D3ABD0);
      v16 = qword_1EDB97220;
      if (os_log_type_enabled((os_log_t)qword_1EDB97220, OS_LOG_TYPE_ERROR))
      {
        v17 = (*(uint64_t (**)(void *))(*(_QWORD *)v15 + 16))(v15);
        LODWORD(buf) = 136315394;
        *(_QWORD *)((char *)&buf + 4) = "enumeratePredictions";
        WORD6(buf) = 2080;
        *(_QWORD *)((char *)&buf + 14) = v17;
        _os_log_error_impl(&dword_19C291000, v16, OS_LOG_TYPE_ERROR, "%s: caught unexpected exception: %s", (uint8_t *)&buf, 0x16u);
      }
      __cxa_end_catch();
      JUMPOUT(0x19C2F0814);
    }
    sub_19C2CDAC8(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t language_modeling::v1::LanguageModelSession::enumeratePredictions(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 72))(*a1);
}

uint64_t language_modeling::v1::LanguageModelSession::enumerateInlineCompletions(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 80))(*a1);
}

{
  uint64_t result;
  _QWORD v2[5];

  v2[4] = *MEMORY[0x1E0C80C00];
  v2[3] = 0;
  language_modeling::v1::LanguageModelSession::enumerateInlineCompletions(a1);
  result = 0;
  if (!v2)
    return (*(uint64_t (**)(void))(v2[0] + 32))();
  return result;
}

void language_modeling::v1::LanguageModelSession::enumerateInlineCompletions(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  char v11;
  char v12;
  _QWORD *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *__p;
  char *v22;
  uint64_t v23;
  _BYTE v24[24];
  _BYTE *v25;
  _QWORD v26[3];
  _QWORD *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  __p = 0;
  v22 = 0;
  v23 = 0;
  v26[0] = &off_1E3D395B0;
  v26[1] = &__p;
  v26[2] = a1;
  v27 = v26;
  v25 = 0;
  (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD *, uint64_t, _BYTE *))(*(_QWORD *)*a1 + 80))(*a1, a2, a3, v26, a5, v24);
  v6 = v25;
  if (v25 == v24)
  {
    v7 = 4;
    v6 = v24;
  }
  else
  {
    if (!v25)
      goto LABEL_6;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_6:
  v8 = (char *)__p;
  v9 = v22;
  if (__p != v22)
  {
    do
    {
      v10 = *(_QWORD *)(a4 + 24);
      if (!v10)
        sub_19C2CCC60();
      v11 = (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v10 + 48))(v10, v8);
      v8 += 8;
      if (v8 == v9)
        v12 = 0;
      else
        v12 = v11;
    }
    while ((v12 & 1) != 0);
  }
  v13 = v27;
  if (v27 == v26)
  {
    v14 = 4;
    v13 = v26;
  }
  else
  {
    if (!v27)
      goto LABEL_17;
    v14 = 5;
  }
  (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_17:
  v15 = (char *)__p;
  if (__p)
  {
    v16 = v22;
    v17 = __p;
    if (v22 != __p)
    {
      do
      {
        v19 = *((_QWORD *)v16 - 1);
        v16 -= 8;
        v18 = v19;
        *(_QWORD *)v16 = 0;
        if (v19)
        {
          v20 = sub_19C296378(v18);
          MEMORY[0x1A1AD355C](v20, 0x1032C4057ACE4D0);
        }
      }
      while (v16 != v15);
      v17 = __p;
    }
    v22 = v15;
    operator delete(v17);
  }
}

void sub_19C2F0D88(_Unwind_Exception *a1, int a2)
{
  uint64_t v2;
  void *v3;
  NSObject *v4;
  uint64_t v5;

  if (a2)
  {
    if (a2 == 2)
    {
      v3 = __cxa_begin_catch(a1);
      if (qword_1EDB97228 != -1)
        dispatch_once(&qword_1EDB97228, &unk_1E3D3ABD0);
      v4 = qword_1EDB97220;
      if (os_log_type_enabled((os_log_t)qword_1EDB97220, OS_LOG_TYPE_ERROR))
      {
        v5 = (*(uint64_t (**)(void *))(*(_QWORD *)v3 + 16))(v3);
        *(_DWORD *)(v2 - 64) = 136315394;
        *(_QWORD *)(v2 - 60) = "enumerateInlineCompletions";
        *(_WORD *)(v2 - 52) = 2080;
        *(_QWORD *)(v2 - 50) = v5;
        _os_log_error_impl(&dword_19C291000, v4, OS_LOG_TYPE_ERROR, "%s: caught unexpected exception: %s", (uint8_t *)(v2 - 64), 0x16u);
      }
      __cxa_end_catch();
      JUMPOUT(0x19C2F0C68);
    }
    sub_19C2CDAC8(a1);
  }
  _Unwind_Resume(a1);
}

_QWORD *sub_19C2F0F74(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = (_QWORD *)*a1;
  if (*a1)
  {
    v3 = (_QWORD *)a1[1];
    v4 = (_QWORD *)*a1;
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
        {
          v7 = sub_19C296378(v5);
          MEMORY[0x1A1AD355C](v7, 0x1032C4057ACE4D0);
        }
      }
      while (v3 != v2);
      v4 = (_QWORD *)*a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_19C2F0FF8()
{
  JUMPOUT(0x1A1AD355CLL);
}

__n128 sub_19C2F100C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E3D395B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_19C2F1044(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E3D395B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_19C2F1064(uint64_t a1, const language_modeling::v1::InlineCompletion *a2)
{
  _QWORD *v2;
  uint64_t v3;
  char *v4;
  char **v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  char *v13;

  v2 = *(_QWORD **)(a1 + 8);
  language_modeling::v1::InlineCompletion::InlineCompletion((language_modeling::v1::InlineCompletion *)&v12, a2);
  v3 = v12;
  v4 = (char *)operator new();
  sub_19C3077FC(v4, (__int128 *)v3, (__int128 *)(v3 + 24), (__int128 *)(v3 + 48), (uint64_t *)(v3 + 160), (uint64_t *)(v3 + 184), (__int128 *)(v3 + 208), *(_QWORD *)(v3 + 232), *(_DWORD *)(v3 + 240), *(_QWORD *)(v3 + 248));
  v13 = v4;
  v5 = (char **)v2[1];
  if ((unint64_t)v5 >= v2[2])
  {
    v6 = sub_19C2F1218(v2, (uint64_t *)&v13);
    v7 = (uint64_t)v13;
    v2[1] = v6;
    if (v7)
    {
      v8 = sub_19C296378(v7);
      MEMORY[0x1A1AD355C](v8, 0x1032C4057ACE4D0);
    }
  }
  else
  {
    *v5 = v4;
    v2[1] = v5 + 1;
  }
  v9 = v12;
  v12 = 0;
  if (v9)
  {
    if (*(char *)(v9 + 287) < 0)
      operator delete(*(void **)(v9 + 264));
    v10 = sub_19C296378(v9);
    MEMORY[0x1A1AD355C](v10, 0x1032C40D90104AELL);
  }
  return 1;
}

void sub_19C2F1174(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  language_modeling::v1::Prediction::~Prediction((language_modeling::v1::Prediction *)va1);
  language_modeling::v1::InlineCompletion::~InlineCompletion((language_modeling::v1::InlineCompletion *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19C2F11B8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZZNK17language_modeling2v120LanguageModelSession26enumerateInlineCompletionsERKNS0_17LinguisticCont"
                     "extERKNSt3__16vectorINS0_14CompletionStemENS5_9allocatorIS7_EEEERKNS5_8functionIFbRKNS0_10Predictio"
                     "nEEEEPK14__CFDictionaryENK3$_0clEvEUlRKNS0_16InlineCompletionEE_"
    || ((v3 & (unint64_t)"ZZNK17language_modeling2v120LanguageModelSession26enumerateInlineCompletionsERKNS0_17Lin"
                                "guisticContextERKNSt3__16vectorINS0_14CompletionStemENS5_9allocatorIS7_EEEERKNS5_8functi"
                                "onIFbRKNS0_10PredictionEEEEPK14__CFDictionaryENK3$_0clEvEUlRKNS0_16InlineCompletionEE_" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZZNK17language_modeling2v120LanguageModelSession26enumerateInlineCompletionsERKNS0_17LinguisticContextERKNSt3__16vectorINS0_14CompletionStemENS5_9allocatorIS7_EEEERKNS5_8functionIFbRKNS0_10PredictionEEEEPK14__CFDictionaryENK3$_0clEvEUlRKNS0_16InlineCompletionEE_")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZNK17language_modeling2v120LanguageModelSession26enumerateInlineCompletionsERKNS0_17LinguisticContextERKNSt3__16vectorINS0_14CompletionStemENS5_9allocatorIS7_EEEERKNS5_8functionIFbRKNS0_10PredictionEEEEPK14__CFDictionaryENK3$_0clEvEUlRKNS0_16InlineCompletionEE_" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *sub_19C2F120C()
{
  return &unk_1E3D33790;
}

_QWORD *sub_19C2F1218(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v2 = a1[1] - *a1;
  v3 = v2 >> 3;
  v4 = (v2 >> 3) + 1;
  if (v4 >> 61)
    sub_19C2A18E8();
  v7 = a1[2] - *a1;
  if (v7 >> 2 > v4)
    v4 = v7 >> 2;
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8)
    v8 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v8 = v4;
  if (v8)
  {
    if (v8 >> 61)
      sub_19C2A143C();
    v9 = (char *)operator new(8 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[8 * v3];
  v11 = &v9[8 * v8];
  v12 = *a2;
  *a2 = 0;
  *(_QWORD *)v10 = v12;
  v13 = v10 + 8;
  v14 = (char *)*a1;
  v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v10;
    a1[1] = v13;
    a1[2] = v11;
  }
  else
  {
    v16 = (unint64_t)&v15[-*a1 - 8];
    if (v16 < 0x78 || &v15[-(v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v10 && &v9[v2 - (v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v15)
      goto LABEL_31;
    v17 = (v16 >> 3) + 1;
    v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    v19 = &v15[-v18];
    v10 -= v18;
    v20 = &v9[8 * v3 - 16];
    v21 = v15 - 16;
    v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v24 = *((_OWORD *)v21 - 1);
      v23 = *(_OWORD *)v21;
      *((_OWORD *)v21 - 1) = 0uLL;
      *(_OWORD *)v21 = 0uLL;
      *((_OWORD *)v20 - 1) = v24;
      *(_OWORD *)v20 = v23;
      v20 -= 32;
      v21 -= 32;
      v22 -= 4;
    }
    while (v22);
    v15 = v19;
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_31:
      do
      {
        v25 = *((_QWORD *)v15 - 1);
        v15 -= 8;
        *(_QWORD *)v15 = 0;
        *((_QWORD *)v10 - 1) = v25;
        v10 -= 8;
      }
      while (v15 != v14);
    }
    v15 = (char *)*a1;
    v26 = (char *)a1[1];
    *a1 = v10;
    a1[1] = v13;
    a1[2] = v11;
    while (v26 != v15)
    {
      v28 = *((_QWORD *)v26 - 1);
      v26 -= 8;
      v27 = v28;
      *(_QWORD *)v26 = 0;
      if (v28)
      {
        v29 = sub_19C296378(v27);
        MEMORY[0x1A1AD355C](v29, 0x1032C4057ACE4D0);
      }
    }
  }
  if (v15)
    operator delete(v15);
  return v13;
}

void language_modeling::v1::LanguageModelSession::recordWordRevision(uint64_t *a1, const UInt8 *a2)
{
  uint64_t v2;
  void *__p[2];
  char v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  sub_19C297950(__p, a2);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v2 + 128))(v2, __p);
  if (v4 < 0)
    operator delete(__p[0]);
}

void sub_19C2F1438(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, __int128 buf)
{
  void *v18;
  NSObject *v19;
  uint64_t v20;

  if (a2)
  {
    if (a15 < 0)
      operator delete(__p);
    if (a2 == 2)
    {
      v18 = __cxa_begin_catch(a1);
      if (qword_1EDB97228 != -1)
        dispatch_once(&qword_1EDB97228, &unk_1E3D3ABD0);
      v19 = qword_1EDB97220;
      if (os_log_type_enabled((os_log_t)qword_1EDB97220, OS_LOG_TYPE_ERROR))
      {
        v20 = (*(uint64_t (**)(void *))(*(_QWORD *)v18 + 16))(v18);
        LODWORD(buf) = 136315394;
        *(_QWORD *)((char *)&buf + 4) = "recordWordRevision";
        WORD6(buf) = 2080;
        *(_QWORD *)((char *)&buf + 14) = v20;
        _os_log_error_impl(&dword_19C291000, v19, OS_LOG_TYPE_ERROR, "%s: caught unexpected exception: %s", (uint8_t *)&buf, 0x16u);
      }
      __cxa_end_catch();
      JUMPOUT(0x19C2F140CLL);
    }
    sub_19C2CDAC8(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t language_modeling::v1::LanguageModelSession::clearPriorText(language_modeling::v1::LanguageModelSession *this)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)this + 136))(*(_QWORD *)this);
}

uint64_t language_modeling::v1::LanguageModelSession::clearDynamicLearningCache(language_modeling::v1::LanguageModelSession *this)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)this + 144))(*(_QWORD *)this);
}

uint64_t language_modeling::v1::LanguageModelSession::flushCacheAndRecencyData(language_modeling::v1::LanguageModelSession *this)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)this + 152))(*(_QWORD *)this);
}

uint64_t language_modeling::v1::LanguageModelSession::removeDynamicResourceDirectory(language_modeling::v1::LanguageModelSession *this)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)this + 160))(*(_QWORD *)this);
}

uint64_t language_modeling::v1::LanguageModelSession::setDynamicResourceDirectory(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 168))(*a1);
}

uint64_t language_modeling::v1::LanguageModelSession::supportsFragmentsBasedConditionalProbability(language_modeling::v1::LanguageModelSession *this)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)this + 184))(*(_QWORD *)this);
}

uint64_t language_modeling::v1::LanguageModelSession::supportsNormalizedNameTokenProbability(language_modeling::v1::LanguageModelSession *this)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)this + 192))(*(_QWORD *)this);
}

_QWORD *language_modeling::v1::LanguageModelSession::normalizedNameTokenConditionalProbability@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return (*(_QWORD *(**)(_QWORD *__return_ptr))(**(_QWORD **)a1 + 200))(a2);
}

uint64_t LMLexiconCreate(const __CFDictionary *a1)
{
  uint64_t v2;

  if (!a1)
    return 0;
  v2 = operator new();
  sub_19C417288(v2, a1);
  return v2;
}

void sub_19C2F1F48()
{
  __cxa_end_catch();
  JUMPOUT(0x19C2F1F50);
}

uint64_t LMLexiconRetain(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  if (result)
  {
    v1 = (unsigned int *)(result + 8);
    do
      v2 = __ldxr(v1);
    while (__stxr(v2 + 1, v1));
  }
  return result;
}

uint64_t LMLexiconRelease(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  BOOL v3;
  signed int v4;

  if (result)
  {
    v1 = (unsigned int *)(result + 8);
    do
    {
      v2 = __ldxr(v1);
      v3 = __OFSUB__(v2, 1);
      v4 = v2 - 1;
    }
    while (__stxr(v4, v1));
    if ((v4 < 0) ^ v3 | (v4 == 0))
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

_QWORD *LMLexiconResetCursors(_QWORD *a1)
{
  if (a1)
    return (_QWORD *)sub_19C417140(a1);
  return a1;
}

uint64_t LMLexiconGetFirstTokenIDForString(uint64_t a1, const __CFString *a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD v5[7];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  char v9;

  v6 = 0;
  v7 = &v6;
  v8 = 0x2000000000;
  v9 = 0;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 0x40000000;
  v5[2] = sub_19C2F2054;
  v5[3] = &unk_1E3D3A018;
  v5[4] = &v6;
  v5[5] = a2;
  v5[6] = a3;
  LMLexiconEnumerateEntriesForStringWithBlock(a1, a2, (uint64_t)v5);
  v3 = *((unsigned __int8 *)v7 + 24);
  _Block_object_dispose(&v6, 8);
  return v3;
}

void sub_19C2F203C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_19C2F2054(uint64_t a1, int a2, char *cStr, uint64_t a4, uint64_t a5, _BYTE *a6)
{
  const __CFString *v9;
  const __CFString *v10;
  _DWORD *v11;
  _DWORD *v12;

  if (cStr)
  {
    v9 = CFStringCreateWithCStringNoCopy(0, cStr, 0x8000100u, (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
    if (v9)
    {
      v10 = v9;
      if (CFStringCompare(*(CFStringRef *)(a1 + 40), v9, 0) == kCFCompareEqualTo)
      {
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
        v11 = *(_DWORD **)(a1 + 48);
        if (v11)
          *v11 = a2;
        *a6 = 1;
      }
      CFRelease(v10);
    }
  }
  else
  {
    v12 = *(_DWORD **)(a1 + 48);
    if (v12)
      *v12 = a2;
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
    *a6 = 1;
  }
}

void LMLexiconEnumerateEntriesForStringWithBlock(uint64_t a1, CFStringRef theString, uint64_t a3)
{
  CFIndex Length;
  CFIndex v7;
  UniChar *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[6];
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  char v24;
  CFRange v25;

  Length = CFStringGetLength(theString);
  if (a1)
  {
    v7 = Length;
    if (Length >= 1)
    {
      v8 = (UniChar *)malloc_type_malloc(2 * Length, 0x1000040BDFB0063uLL);
      v25.location = 0;
      v25.length = v7;
      CFStringGetCharacters(theString, v25, v8);
      v9 = sub_19C418924(a1, ***(_QWORD ***)(a1 + 48), (uint64_t)v8, v7, 0);
      if (v9)
      {
        v10 = v9;
        v11 = 0;
        v12 = 0x5000000000;
        while (1)
        {
          v13 = *(_QWORD *)(a1 + 24);
          if (v11 >= (*(_QWORD *)(a1 + 32) - v13) >> 3)
            break;
          v14 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v13 + 8 * v11) + 48))(*(_QWORD *)(v13 + 8 * v11), v10 + (v12 >> 32));
          ++v11;
          v12 += 0x5000000000;
          if (v14)
          {
            v15 = 0;
            v21 = 0;
            v22 = &v21;
            v23 = 0x2000000000;
            v24 = 0;
            v16 = MEMORY[0x1E0C809B0];
            v17 = 0x5000000000;
            do
            {
              v18 = *(_QWORD *)(a1 + 24);
              if (v15 >= (*(_QWORD *)(a1 + 32) - v18) >> 3)
                break;
              v19 = *(_QWORD *)(v18 + 8 * v15);
              v20[0] = v16;
              v20[1] = 0x40000000;
              v20[2] = sub_19C4140FC;
              v20[3] = &unk_1E3D3C790;
              v20[4] = a3;
              v20[5] = &v21;
              (*(void (**)(uint64_t, uint64_t, UniChar *, CFIndex, _QWORD *))(*(_QWORD *)v19 + 56))(v19, v10 + (v17 >> 32), v8, v7, v20);
              ++v15;
              v17 += 0x5000000000;
            }
            while (!*((_BYTE *)v22 + 24));
            _Block_object_dispose(&v21, 8);
            break;
          }
        }
      }
      free(v8);
    }
  }
}

void sub_19C2F22E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t LMLexiconCopyStringForTokenID(uint64_t result, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (result)
  {
    v2 = *(_QWORD **)(result + 24);
    v3 = *(_QWORD **)(result + 32);
    if (v2 == v3)
    {
      return 0;
    }
    else
    {
      while (1)
      {
        result = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v2 + 128))(*v2, a2);
        if (result)
          break;
        if (++v2 == v3)
          return 0;
      }
    }
  }
  return result;
}

uint64_t LMLexiconGetRootCursor(uint64_t result)
{
  if (result)
    return ***(_QWORD ***)(result + 48);
  return result;
}

uint64_t LMLexiconGetCursorByAdvancingWithCharacters(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double *a5)
{
  if (a1 && a2)
    return sub_19C418924(a1, a2, a3, a4, a5);
  else
    return 0;
}

BOOL LMLexiconCursorIsRoot(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;
  unint64_t v5;
  uint64_t i;
  uint64_t v7;
  unint64_t v8;
  char v9;

  result = 0;
  if (a1 && a2)
  {
    v5 = 0;
    for (i = 0x5000000000; ; i += 0x5000000000)
    {
      v7 = *(_QWORD *)(a1 + 24);
      v8 = (*(_QWORD *)(a1 + 32) - v7) >> 3;
      result = v8 <= v5;
      if (v8 <= v5)
        break;
      v9 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v7 + 8 * v5) + 40))(*(_QWORD *)(v7 + 8 * v5), a2 + (i >> 32), ***(_QWORD ***)(a1 + 48) + (i >> 32));
      ++v5;
      if ((v9 & 1) == 0)
        return 0;
    }
  }
  return result;
}

BOOL LMLexiconCursorHasEntries(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;
  unint64_t v5;
  uint64_t i;
  uint64_t v7;
  unint64_t v8;
  int v9;

  result = 0;
  if (a1 && a2)
  {
    v5 = 0;
    for (i = 0x5000000000; ; i += 0x5000000000)
    {
      v7 = *(_QWORD *)(a1 + 24);
      v8 = (*(_QWORD *)(a1 + 32) - v7) >> 3;
      result = v8 > v5;
      if (v8 <= v5)
        break;
      v9 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v7 + 8 * v5) + 48))(*(_QWORD *)(v7 + 8 * v5), a2 + (i >> 32));
      ++v5;
      if (v9)
        return 1;
    }
  }
  return result;
}

void LMLexiconCursorEnumerateEntriesWithBlock(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[6];
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  char v15;

  if (a1 && a2)
  {
    v6 = 0;
    v12 = 0;
    v13 = &v12;
    v14 = 0x2000000000;
    v15 = 0;
    v7 = MEMORY[0x1E0C809B0];
    v8 = 0x5000000000;
    do
    {
      v9 = *(_QWORD *)(a1 + 24);
      if (v6 >= (*(_QWORD *)(a1 + 32) - v9) >> 3)
        break;
      v10 = *(_QWORD *)(v9 + 8 * v6);
      v11[0] = v7;
      v11[1] = 0x40000000;
      v11[2] = sub_19C4140FC;
      v11[3] = &unk_1E3D3C790;
      v11[4] = a3;
      v11[5] = &v12;
      (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD *))(*(_QWORD *)v10 + 56))(v10, a2 + (v8 >> 32), 0, 0, v11);
      ++v6;
      v8 += 0x5000000000;
    }
    while (!*((_BYTE *)v13 + 24));
    _Block_object_dispose(&v12, 8);
  }
}

void sub_19C2F259C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void LMLexiconCursorEnumerateEntriesWithCharactersAndBlock(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[6];
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  char v19;

  if (a1 && a2)
  {
    v10 = 0;
    v16 = 0;
    v17 = &v16;
    v18 = 0x2000000000;
    v19 = 0;
    v11 = MEMORY[0x1E0C809B0];
    v12 = 0x5000000000;
    do
    {
      v13 = *(_QWORD *)(a1 + 24);
      if (v10 >= (*(_QWORD *)(a1 + 32) - v13) >> 3)
        break;
      v14 = *(_QWORD *)(v13 + 8 * v10);
      v15[0] = v11;
      v15[1] = 0x40000000;
      v15[2] = sub_19C4140FC;
      v15[3] = &unk_1E3D3C790;
      v15[4] = a5;
      v15[5] = &v16;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v14 + 56))(v14, a2 + (v12 >> 32), a3, a4, v15);
      ++v10;
      v12 += 0x5000000000;
    }
    while (!*((_BYTE *)v17 + 24));
    _Block_object_dispose(&v16, 8);
  }
}

void sub_19C2F26C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t LMLexiconCursorFirstTokenID(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  uint64_t i;
  uint64_t v7;

  result = 0;
  if (a1 && a2)
  {
    v5 = 0;
    for (i = 0x5000000000; ; i += 0x5000000000)
    {
      v7 = *(_QWORD *)(a1 + 24);
      if (v5 >= (*(_QWORD *)(a1 + 32) - v7) >> 3)
        break;
      result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v7 + 8 * v5) + 96))(*(_QWORD *)(v7 + 8 * v5), a2 + (i >> 32));
      ++v5;
      if ((_DWORD)result)
        return result;
    }
    return 0;
  }
  return result;
}

BOOL LMLexiconCursorHasChildren(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;
  unint64_t v5;
  uint64_t i;
  uint64_t v7;
  unint64_t v8;
  int v9;

  result = 0;
  if (a1 && a2)
  {
    v5 = 0;
    for (i = 0x5000000000; ; i += 0x5000000000)
    {
      v7 = *(_QWORD *)(a1 + 24);
      v8 = (*(_QWORD *)(a1 + 32) - v7) >> 3;
      result = v8 > v5;
      if (v8 <= v5)
        break;
      v9 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v7 + 8 * v5) + 64))(*(_QWORD *)(v7 + 8 * v5), a2 + (i >> 32));
      ++v5;
      if (v9)
        return 1;
    }
  }
  return result;
}

void LMLexiconCursorConditionalProbability(uint64_t a1, uint64_t a2, __n128 a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  a3.n128_u64[0] = 0;
  if (a1)
  {
    if (a2)
    {
      v5 = *(_QWORD *)(a1 + 24);
      if (*(_QWORD *)(a1 + 32) != v5)
      {
        v6 = 0;
        v7 = 0x5000000000;
        do
        {
          a3.n128_f64[0] = (*(double (**)(_QWORD, uint64_t, __n128))(**(_QWORD **)(v5 + 8 * v6) + 72))(*(_QWORD *)(v5 + 8 * v6), a2 + (v7 >> 32), a3);
          if (a3.n128_f64[0] != 0.0)
            break;
          ++v6;
          v5 = *(_QWORD *)(a1 + 24);
          v7 += 0x5000000000;
        }
        while (v6 < (*(_QWORD *)(a1 + 32) - v5) >> 3);
      }
    }
  }
}

void LMLexiconCursorTerminationProbability(uint64_t a1, uint64_t a2, __n128 a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  a3.n128_u64[0] = 0;
  if (a1)
  {
    if (a2)
    {
      v5 = *(_QWORD *)(a1 + 24);
      if (*(_QWORD *)(a1 + 32) != v5)
      {
        v6 = 0;
        v7 = 0x5000000000;
        do
        {
          a3.n128_f64[0] = (*(double (**)(_QWORD, uint64_t, __n128))(**(_QWORD **)(v5 + 8 * v6) + 80))(*(_QWORD *)(v5 + 8 * v6), a2 + (v7 >> 32), a3);
          if (a3.n128_f64[0] != 0.0)
            break;
          ++v6;
          v5 = *(_QWORD *)(a1 + 24);
          v7 += 0x5000000000;
        }
        while (v6 < (*(_QWORD *)(a1 + 32) - v5) >> 3);
      }
    }
  }
}

uint64_t LMLexiconCursorTraversedLength(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  uint64_t i;
  uint64_t v7;

  result = 0;
  if (a1 && a2)
  {
    v5 = 0;
    for (i = 0x5000000000; ; i += 0x5000000000)
    {
      v7 = *(_QWORD *)(a1 + 24);
      if (v5 >= (*(_QWORD *)(a1 + 32) - v7) >> 3)
        break;
      result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v7 + 8 * v5) + 104))(*(_QWORD *)(v7 + 8 * v5), a2 + (i >> 32));
      ++v5;
      if (result)
        return result;
    }
    return 0;
  }
  return result;
}

uint64_t LMLexiconCursorGetTraversedCharacters(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v9;
  uint64_t i;
  uint64_t v11;

  result = 0;
  if (a1 && a2)
  {
    v9 = 0;
    for (i = 0x5000000000; ; i += 0x5000000000)
    {
      v11 = *(_QWORD *)(a1 + 24);
      if (v9 >= (*(_QWORD *)(a1 + 32) - v11) >> 3)
        break;
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(v11 + 8 * v9) + 112))(*(_QWORD *)(v11 + 8 * v9), a2 + (i >> 32), a3, a4);
      ++v9;
      if (result)
        return result;
    }
    return 0;
  }
  return result;
}

uint64_t LMLexiconCursorHash(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v2 = 0;
  if (a1 && a2)
  {
    v5 = *(_QWORD *)(a1 + 24);
    if (*(_QWORD *)(a1 + 32) == v5)
    {
      return 0;
    }
    else
    {
      v6 = 0;
      v2 = 0;
      v7 = 0x5000000000;
      do
      {
        v2 ^= (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v5 + 8 * v6) + 88))(*(_QWORD *)(v5 + 8 * v6), a2 + (v7 >> 32));
        ++v6;
        v5 = *(_QWORD *)(a1 + 24);
        v7 += 0x5000000000;
      }
      while (v6 < (*(_QWORD *)(a1 + 32) - v5) >> 3);
    }
  }
  return v2;
}

uint64_t LMLexiconIDConverterCreate(const __CFURL *a1)
{
  uint64_t v2;

  if (!a1)
    return 0;
  v2 = operator new();
  sub_19C3E4960(v2, a1);
  return v2;
}

void sub_19C2F2B90()
{
  __cxa_end_catch();
  JUMPOUT(0x19C2F2B98);
}

uint64_t LMLexiconIDConverterCreateWithUnigramsPath(CFStringRef filePath)
{
  const __CFURL *v1;
  const __CFURL *v2;
  const __CFURL *PathComponent;
  const __CFString *v4;
  CFStringRef v5;
  const __CFString *v6;
  const __CFURL *v7;
  uint64_t v8;
  stat v10;
  UInt8 buffer[1024];
  uint64_t v12;
  CFRange v13;

  v12 = *MEMORY[0x1E0C80C00];
  if (!filePath)
    return 0;
  v1 = CFURLCreateWithFileSystemPath(0, filePath, kCFURLPOSIXPathStyle, 0);
  if (!v1)
    return 0;
  v2 = v1;
  PathComponent = CFURLCreateCopyDeletingLastPathComponent(0, v1);
  v4 = CFURLCopyLastPathComponent(v2);
  if (CFStringHasPrefix(v4, CFSTR("Unigrams")))
  {
    v13.length = CFStringGetLength(v4) - 8;
    v13.location = 8;
    v5 = CFStringCreateWithSubstring(0, v4, v13);
    v6 = CFStringCreateWithFormat(0, 0, CFSTR("lstsfmap%@"), v5);
    v7 = CFURLCreateCopyAppendingPathComponent(0, PathComponent, v6, 0);
    CFRelease(v6);
    CFRelease(v5);
  }
  else
  {
    v7 = 0;
  }
  CFRelease(v4);
  CFRelease(PathComponent);
  CFRelease(v2);
  if (!v7)
    return 0;
  if (CFURLGetFileSystemRepresentation(v7, 1u, buffer, 1024) && !stat((const char *)buffer, &v10))
  {
    v8 = operator new();
    sub_19C3E4960(v8, v7);
  }
  else
  {
    v8 = 0;
  }
  CFRelease(v7);
  return v8;
}

#error "19C2F2DBC: call analysis failed (funcsize=33)"

uint64_t LMLexiconIDConverterGetStemSuffixTokenID(uint64_t result, unsigned int a2, unsigned int a3, int *a4)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _DWORD *v8;
  unint64_t v9;
  unsigned int *v10;
  _DWORD *v11;
  unsigned int v12;
  char *v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int *v21;
  _DWORD *v22;
  unsigned int v23;
  char *v24;
  int v25;

  if (result)
  {
    v4 = *(char **)(result + 16);
    if (*(_DWORD *)v4 > a2)
      return 0;
    v5 = *(unsigned int *)(result + 8);
    if (*(_DWORD *)&v4[4 * v5] <= a2)
      return 0;
    v6 = *(_QWORD *)(result + 24) - (_QWORD)v4;
    if (v6)
    {
      v7 = v6 >> 2;
      v8 = *(_DWORD **)(result + 16);
      do
      {
        v9 = v7 >> 1;
        v10 = &v8[v7 >> 1];
        v12 = *v10;
        v11 = v10 + 1;
        v7 += ~(v7 >> 1);
        if (v12 > a2)
          v7 = v9;
        else
          v8 = v11;
      }
      while (v7);
    }
    else
    {
      v8 = *(_DWORD **)(result + 16);
    }
    v13 = *(char **)(result + 40);
    if (*(_DWORD *)v13 > a3 || *(_DWORD *)&v13[4 * v5] <= a3)
      return 0;
    v14 = *(v8 - 1);
    v15 = (char *)(v8 - 1) - v4;
    v16 = v15 >> 2;
    v17 = *(_DWORD **)(result + 40);
    v18 = *(_QWORD *)(result + 48) - (_QWORD)v13;
    if (v18)
    {
      v19 = v18 >> 2;
      v17 = *(_DWORD **)(result + 40);
      do
      {
        v20 = v19 >> 1;
        v21 = &v17[v19 >> 1];
        v23 = *v21;
        v22 = v21 + 1;
        v19 += ~(v19 >> 1);
        if (v23 > a3)
          v19 = v20;
        else
          v17 = v22;
      }
      while (v19);
    }
    v24 = (char *)(v17 - 1);
    if ((_DWORD)v16 == ((unint64_t)(v24 - v13) >> 2))
    {
      v25 = a3
          - *(_DWORD *)v24
          + (*(_DWORD *)&v13[4 * (v16 + 1)] - *(_DWORD *)&v13[v15 & 0x3FFFFFFFCLL]) * (a2 - v14)
          + *(_DWORD *)(*(_QWORD *)(result + 64) + (v15 & 0x3FFFFFFFCLL));
      result = v25 != 0;
      if (a4)
      {
        if (v25)
        {
          *a4 = v25;
          return 1;
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t LMLexiconIDConverterGetStemAndSuffixTokenIDs(uint64_t result, unsigned int a2, _DWORD *a3, _DWORD *a4)
{
  unsigned int *v4;
  uint64_t v5;
  unint64_t v6;
  _DWORD *v7;
  unint64_t v8;
  unsigned int *v9;
  _DWORD *v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  unsigned int v18;

  if (result)
  {
    v4 = *(unsigned int **)(result + 64);
    if (*v4 > a2 || v4[*(unsigned int *)(result + 8)] <= a2)
    {
      return 0;
    }
    else
    {
      v5 = *(_QWORD *)(result + 72) - (_QWORD)v4;
      if (v5)
      {
        v6 = v5 >> 2;
        v7 = *(_DWORD **)(result + 64);
        do
        {
          v8 = v6 >> 1;
          v9 = &v7[v6 >> 1];
          v11 = *v9;
          v10 = v9 + 1;
          v6 += ~(v6 >> 1);
          if (v11 > a2)
            v6 = v8;
          else
            v7 = v10;
        }
        while (v6);
      }
      else
      {
        v7 = *(_DWORD **)(result + 64);
      }
      v12 = *(v7 - 1);
      v13 = v7 - 1 - v4;
      v14 = *(_QWORD *)(result + 40);
      v15 = v13;
      v16 = *(_DWORD *)(v14 + 4 * (v13 + 1)) - *(_DWORD *)(v14 + 4 * v13);
      v17 = a2 - v12;
      v18 = (a2 - v12) / v16;
      if (a3)
        *a3 = v18 + *(_DWORD *)(*(_QWORD *)(result + 16) + 4 * v15);
      if (a4)
        *a4 = v17 - v18 * v16 + *(_DWORD *)(v14 + 4 * v15);
      return 1;
    }
  }
  return result;
}

uint64_t LMLexiconIDConverterGetStemData(uint64_t result, unsigned int a2, uint64_t *a3, _QWORD *a4, unsigned __int16 **a5, _QWORD *a6)
{
  char *v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  unint64_t v10;
  unsigned int *v11;
  char *v12;
  unsigned int v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  BOOL v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int16 *v23;
  unsigned __int16 *v24;

  if (result)
  {
    v6 = *(char **)(result + 16);
    if (*(_DWORD *)v6 > a2 || *(_DWORD *)&v6[4 * *(unsigned int *)(result + 8)] <= a2)
      return 0;
    v7 = *(_QWORD *)(result + 24) - (_QWORD)v6;
    if (v7)
    {
      v8 = v7 >> 2;
      v9 = *(char **)(result + 16);
      do
      {
        v10 = v8 >> 1;
        v11 = (unsigned int *)&v9[4 * (v8 >> 1)];
        v13 = *v11;
        v12 = (char *)(v11 + 1);
        v8 += ~(v8 >> 1);
        if (v13 > a2)
          v8 = v10;
        else
          v9 = v12;
      }
      while (v8);
    }
    else
    {
      v9 = *(char **)(result + 16);
    }
    v14 = *(_DWORD *)(result + 12);
    v15 = v9 - v6 - 4;
    v16 = v15 >> 2;
    v17 = __CFADD__(v14, (v15 >> 2));
    v18 = v14 + (v15 >> 2);
    if (v17 || **(_DWORD **)(result + 40) <= v18)
    {
      return 0;
    }
    else
    {
      v19 = (v15 >> 2);
      if (a3)
      {
        v20 = *(_QWORD *)(result + 88) + 32 * v19;
        v21 = *(_QWORD *)(v20 + 8);
        v22 = v20 + 16;
        if (v21)
          v22 = v21;
        *a3 = v22;
      }
      if (a4)
        *a4 = *(unsigned __int16 *)(*(_QWORD *)(result + 88) + 32 * v19);
      if (a5)
      {
        v23 = (unsigned __int16 *)(*(_QWORD *)(result + 112) + 16 * v16);
        if (*v23 < 0xFu)
          v24 = v23 + 1;
        else
          v24 = (unsigned __int16 *)*((_QWORD *)v23 + 1);
        *a5 = v24;
      }
      if (a6)
        *a6 = *(unsigned __int16 *)(*(_QWORD *)(result + 112) + 16 * v19);
      return 1;
    }
  }
  return result;
}

uint64_t LMLexiconIDConverterGetSuffixData(uint64_t result, unsigned int a2, uint64_t *a3, _QWORD *a4, unsigned __int16 **a5, _QWORD *a6)
{
  char *v6;
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  unint64_t v11;
  unsigned int *v12;
  char *v13;
  unsigned int v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int16 *v24;
  unsigned __int16 *v25;

  if (result)
  {
    v6 = *(char **)(result + 40);
    v7 = *(_DWORD *)v6;
    if (*(_DWORD *)v6 > a2 || *(_DWORD *)&v6[4 * *(unsigned int *)(result + 8)] <= a2)
      return 0;
    v8 = *(_QWORD *)(result + 48) - (_QWORD)v6;
    if (v8)
    {
      v9 = v8 >> 2;
      v10 = *(char **)(result + 40);
      do
      {
        v11 = v9 >> 1;
        v12 = (unsigned int *)&v10[4 * (v9 >> 1)];
        v14 = *v12;
        v13 = (char *)(v12 + 1);
        v9 += ~(v9 >> 1);
        if (v14 > a2)
          v9 = v11;
        else
          v10 = v13;
      }
      while (v9);
    }
    else
    {
      v10 = *(char **)(result + 40);
    }
    v15 = *(_DWORD *)(result + 12);
    v16 = v10 - v6 - 4;
    v17 = v16 >> 2;
    v18 = v15 + (v16 >> 2);
    if (v15 <= v18 && v7 > v18)
    {
      v20 = (v16 >> 2);
      if (a3)
      {
        v21 = *(_QWORD *)(result + 88) + 32 * v20;
        v22 = *(_QWORD *)(v21 + 8);
        v23 = v21 + 16;
        if (v22)
          v23 = v22;
        *a3 = v23;
      }
      if (a4)
        *a4 = *(unsigned __int16 *)(*(_QWORD *)(result + 88) + 32 * v20);
      if (a5)
      {
        v24 = (unsigned __int16 *)(*(_QWORD *)(result + 112) + 16 * v17);
        if (*v24 < 0xFu)
          v25 = v24 + 1;
        else
          v25 = (unsigned __int16 *)*((_QWORD *)v24 + 1);
        *a5 = v25;
      }
      if (a6)
        *a6 = *(unsigned __int16 *)(*(_QWORD *)(result + 112) + 16 * v20);
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t LMLexiconIDConverterDestroy(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *language_modeling::v1::LanguageModel::LanguageModel(_QWORD *this)
{
  *this = 0;
  return this;
}

{
  *this = 0;
  return this;
}

void language_modeling::v1::LanguageModel::~LanguageModel(language_modeling::v1::LanguageModel *this)
{
  uint64_t v2;

  v2 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

{
  uint64_t v2;

  v2 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

void language_modeling::v1::LanguageModel::init(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void *__p;
  char v4;
  uint64_t v5;
  char v6;

  LOBYTE(__p) = 0;
  v6 = 0;
  language_modeling::v1::LanguageModel::init(a1, a2, &__p, a3);
  if (v6)
  {
    sub_19C2E457C(v5);
    if (v4 < 0)
      operator delete(__p);
  }
}

void language_modeling::v1::LanguageModel::init(uint64_t *a1@<X0>, uint64_t a2@<X1>, void **a3@<X2>, uint64_t a4@<X8>)
{
  __CFDictionary *v8;
  const __CFDictionary *v9;
  CFTypeRef *v10;
  const __CFDictionary *v11;
  int v12;
  const __CFDictionary *v13;
  const void *Value;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  const void *v22;
  const __CFNumber *v23;
  unsigned __int16 v24;
  _BOOL4 v25;
  CFTypeRef v26;
  const __CFNumber *v27;
  unsigned __int16 v28;
  const void *v29;
  size_t v30;
  size_t v31;
  CFTypeRef ***p_dst;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  int v36;
  size_t v37;
  const void *v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  const void **v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  char *v56;
  char *v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  int v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  __int128 v66;
  unint64_t *v67;
  unint64_t v68;
  CFTypeRef v69;
  const __CFNumber *v70;
  unsigned __int16 v71;
  const __CFString *v73;
  const __CFString *v74;
  const void *v75;
  int v76;
  size_t v77;
  size_t v78;
  CFTypeRef *v79;
  CFTypeRef *v80;
  int v81;
  size_t v82;
  uint8_t *v83;
  uint8_t *v84;
  const __CFNumber *v85;
  unsigned __int16 v86;
  NSObject *v87;
  const void *v88;
  size_t v89;
  size_t v90;
  uint64_t v91;
  NSObject *v92;
  size_t v93;
  _BYTE *v94;
  NSObject *v95;
  const void *v96;
  size_t v97;
  size_t v98;
  uint64_t v99;
  uint64_t v100;
  CFTypeRef v101;
  NSObject *v102;
  size_t v103;
  _BYTE *v104;
  uint64_t v105;
  CFTypeRef **v106;
  CFTypeRef **v107;
  CFTypeRef **v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  unint64_t *v112;
  unint64_t v113;
  const void *v114;
  const void *v115;
  const __CFString *v116;
  CFTypeID TypeID;
  CFMutableDictionaryRef MutableCopy;
  int v119;
  size_t v120;
  const void *v121;
  const void *v122;
  const void *v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t *v129;
  unint64_t v130;
  int v131;
  const __CFString *v132;
  CFComparisonResult v133;
  CFComparisonResult v134;
  CFComparisonResult v135;
  CFComparisonResult v136;
  int v137;
  NSObject *v138;
  size_t v139;
  NSObject *v140;
  size_t v141;
  void *exception;
  void *v143;
  void *v144;
  void *v145;
  void *v146;
  CFTypeRef v147;
  uint64_t v148;
  _QWORD *v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  uint64_t v153;
  const void **v154;
  const __CFDictionary *theDict;
  CFTypeRef *v156;
  CFTypeRef v157;
  __int128 v158;
  CFTypeRef **__dst;
  CFTypeRef **v160;
  unint64_t v161;
  _QWORD v162[2];
  __int128 v163;
  CFTypeRef cf[2];
  unsigned __int8 v165;
  CFTypeRef v166;
  _BYTE key[22];
  __int16 v168;
  uint64_t v169;
  uint8_t buf[8];
  size_t v171;
  unsigned __int8 v172;
  uint64_t v173;

  v173 = *MEMORY[0x1E0C80C00];
  v8 = sub_19C421790(a2);
  sub_19C29438C(&v157, v8);
  v9 = (const __CFDictionary *)v157;
  v10 = (CFTypeRef *)operator new();
  sub_19C346094((uint64_t)v10, v9, a3);
  v156 = v10;
  v11 = (const __CFDictionary *)v157;
  sub_19C29471C((CFStringRef *)key, (char *)language_modeling::v1::kUseBeamSearchV1);
  v12 = CFDictionaryContainsKey(v11, *(const void **)key);
  if (*(_QWORD *)key)
    CFRelease(*(CFTypeRef *)key);
  if (v12)
  {
    v13 = (const __CFDictionary *)v157;
    sub_19C29471C((CFStringRef *)key, (char *)language_modeling::v1::kUseBeamSearchV1);
    Value = CFDictionaryGetValue(v13, *(const void **)key);
    if (*(_QWORD *)key)
      CFRelease(*(CFTypeRef *)key);
    word_1EE41C4A8 = (Value == (const void *)*MEMORY[0x1E0C9AE50]) | 0x100;
  }
  sub_19C348B90((uint64_t)key, *v10, 46);
  v15 = *(_QWORD *)key;
  v16 = *(_QWORD *)&key[8];
  if (*(_QWORD *)key)
  {
    v17 = *(void **)key;
    if (*(_QWORD *)key != *(_QWORD *)&key[8])
    {
      v18 = *(_QWORD *)&key[8];
      do
      {
        v19 = *(std::__shared_weak_count **)(v18 - 8);
        if (v19)
        {
          p_shared_owners = (unint64_t *)&v19->__shared_owners_;
          do
            v21 = __ldaxr(p_shared_owners);
          while (__stlxr(v21 - 1, p_shared_owners));
          if (!v21)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
        }
        v18 -= 16;
      }
      while (v18 != v15);
      v17 = *(void **)key;
    }
    *(_QWORD *)&key[8] = v15;
    operator delete(v17);
  }
  if (v15 == v16)
    goto LABEL_305;
  sub_19C348B90((uint64_t)key, *v10, 46);
  v22 = ***(const void ****)key;
  if (v22)
    CFRetain(***(CFTypeRef ***)key);
  sub_19C29438C(cf, v22);
  if (!cf[0])
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD3154](exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v23 = (const __CFNumber *)sub_19C2F5778((const __CFDictionary *)cf[0], (char *)language_modeling::v1::kUseForCompletionsAndPredictionsKey);
  if (v23)
  {
    v24 = sub_19C2F57F4(v23);
    if (v24 >= 0x100u)
    {
      if ((_BYTE)v24)
      {
        v25 = 1;
        v26 = cf[0];
        if (!cf[0])
          goto LABEL_57;
LABEL_56:
        CFRelease(v26);
        goto LABEL_57;
      }
    }
  }
  if (!cf[0])
  {
    v143 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD3154](v143, "Could not construct");
    __cxa_throw(v143, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v27 = (const __CFNumber *)sub_19C2F5778((const __CFDictionary *)cf[0], (char *)language_modeling::v1::kSupportsCompletionsAndPredictionsKey);
  if (!v27)
    goto LABEL_52;
  v28 = sub_19C2F57F4(v27);
  v25 = 0;
  if (v28 < 0x100u || !(_BYTE)v28)
  {
LABEL_55:
    v26 = cf[0];
    if (!cf[0])
      goto LABEL_57;
    goto LABEL_56;
  }
  v29 = (const void *)language_modeling::v1::kLanguageModelForCompletionsAndPredictionsKey;
  v30 = strlen((const char *)language_modeling::v1::kLanguageModelForCompletionsAndPredictionsKey);
  if (v30 > 0x7FFFFFFFFFFFFFF7)
    sub_19C2A1A54();
  v31 = v30;
  if (v30 >= 0x17)
  {
    v33 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v30 | 7) != 0x17)
      v33 = v30 | 7;
    v34 = v33 + 1;
    p_dst = (CFTypeRef ***)operator new(v33 + 1);
    v160 = (CFTypeRef **)v31;
    v161 = v34 | 0x8000000000000000;
    __dst = (CFTypeRef **)p_dst;
    goto LABEL_38;
  }
  HIBYTE(v161) = v30;
  p_dst = &__dst;
  if (v30)
LABEL_38:
    memmove(p_dst, v29, v31);
  *((_BYTE *)p_dst + v31) = 0;
  v35 = sub_19C29A674(a2, (const void **)&__dst);
  if (SHIBYTE(v161) < 0)
    operator delete(__dst);
  if ((uint64_t *)(a2 + 8) == v35)
  {
    v25 = 0;
    goto LABEL_55;
  }
  if (*((_DWORD *)v35 + 20) != 1)
    sub_19C2F5A74();
  v36 = *((char *)v35 + 79);
  if (v36 >= 0)
    v37 = *((unsigned __int8 *)v35 + 79);
  else
    v37 = v35[8];
  if (v37 == strlen((const char *)language_modeling::v1::kLanguageModelTypeToucan))
  {
    if (v36 >= 0)
      v38 = v35 + 7;
    else
      v38 = (const void *)v35[7];
    v25 = memcmp(v38, (const void *)language_modeling::v1::kLanguageModelTypeToucan, v37) == 0;
    v26 = cf[0];
    if (cf[0])
      goto LABEL_56;
    goto LABEL_57;
  }
LABEL_52:
  v25 = 0;
  v26 = cf[0];
  if (cf[0])
    goto LABEL_56;
LABEL_57:
  v39 = *(_QWORD *)key;
  if (*(_QWORD *)key)
  {
    v40 = *(_QWORD *)&key[8];
    v41 = *(void **)key;
    if (*(_QWORD *)&key[8] != *(_QWORD *)key)
    {
      do
      {
        v42 = *(std::__shared_weak_count **)(v40 - 8);
        if (v42)
        {
          v43 = (unint64_t *)&v42->__shared_owners_;
          do
            v44 = __ldaxr(v43);
          while (__stlxr(v44 - 1, v43));
          if (!v44)
          {
            ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
            std::__shared_weak_count::__release_weak(v42);
          }
        }
        v40 -= 16;
      }
      while (v40 != v39);
      v41 = *(void **)key;
    }
    *(_QWORD *)&key[8] = v39;
    operator delete(v41);
  }
  if (v25)
  {
    theDict = (const __CFDictionary *)v157;
    v45 = (_QWORD *)operator new();
    v46 = v45;
    *(_QWORD *)&v158 = v156;
    if (v156)
    {
      v47 = (std::__shared_weak_count *)operator new();
      v47->__shared_owners_ = 0;
      v48 = (unint64_t *)&v47->__shared_owners_;
      v47->__vftable = (std::__shared_weak_count_vtbl *)&off_1E3D39CF8;
      v47->__shared_weak_owners_ = 0;
      v47[1].__vftable = (std::__shared_weak_count_vtbl *)v156;
      *((_QWORD *)&v158 + 1) = v47;
      *v46 = &off_1E3D34A20;
      v46[1] = v156;
      v46[2] = v47;
      do
        v49 = __ldxr(v48);
      while (__stxr(v49 + 1, v48));
      do
        v50 = __ldxr(v48);
      while (__stxr(v50 + 1, v48));
    }
    else
    {
      v158 = 0uLL;
      v47 = 0;
      *v45 = &off_1E3D34A20;
      v45[1] = 0;
      v45[2] = 0;
    }
    sub_19C348B90((uint64_t)key, *v156, 46);
    v51 = *(char **)key;
    v52 = **(const void ****)key;
    v53 = *(std::__shared_weak_count **)(*(_QWORD *)key + 8);
    if (v53)
    {
      v54 = (unint64_t *)&v53->__shared_owners_;
      do
        v55 = __ldxr(v54);
      while (__stxr(v55 + 1, v54));
    }
    v56 = *(char **)&key[8];
    v57 = v51;
    if (*(char **)&key[8] != v51)
    {
      do
      {
        v58 = (std::__shared_weak_count *)*((_QWORD *)v56 - 1);
        if (v58)
        {
          v59 = (unint64_t *)&v58->__shared_owners_;
          do
            v60 = __ldaxr(v59);
          while (__stlxr(v60 - 1, v59));
          if (!v60)
          {
            ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
            std::__shared_weak_count::__release_weak(v58);
          }
        }
        v56 -= 16;
      }
      while (v56 != v51);
      v57 = *(char **)key;
    }
    *(_QWORD *)&key[8] = v51;
    operator delete(v57);
    if (v52)
    {
      v61 = sub_19C3E3528(*v52);
      if (!v53)
      {
LABEL_95:
        if (v47)
        {
          v64 = (unint64_t *)&v47->__shared_owners_;
          do
            v65 = __ldaxr(v64);
          while (__stlxr(v65 - 1, v64));
          if (!v65)
          {
            ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
            std::__shared_weak_count::__release_weak(v47);
          }
        }
        *((_DWORD *)v46 + 6) = v61;
        v66 = v158;
        if (*((_QWORD *)&v158 + 1))
        {
          v67 = (unint64_t *)(*((_QWORD *)&v158 + 1) + 8);
          do
            v68 = __ldxr(v67);
          while (__stxr(v68 + 1, v67));
          v61 = *((_DWORD *)v46 + 6);
        }
        sub_19C348B90((uint64_t)&__dst, *(CFTypeRef *)v66, 46);
        v69 = **__dst;
        if (v69)
          CFRetain(**__dst);
        sub_19C29438C(&v166, v69);
        if (!v166)
        {
          v144 = __cxa_allocate_exception(0x10uLL);
          MEMORY[0x1A1AD3154](v144, "Could not construct");
          __cxa_throw(v144, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
        }
        v154 = (const void **)(v46 + 4);
        v70 = (const __CFNumber *)sub_19C2F5778((const __CFDictionary *)v166, (char *)language_modeling::v1::kUseForConditionalProbabilityKey);
        if (v70)
        {
          v71 = sub_19C2F57F4(v70);
          if (v71 >= 0x100u && v71 != 0)
          {
            if (v61)
            {
              if (qword_1EDB96E40 != -1)
                dispatch_once(&qword_1EDB96E40, &unk_1E3D3A268);
              v95 = qword_1EDB96E38;
              if (os_log_type_enabled((os_log_t)qword_1EDB96E38, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)key = 136315650;
                *(_QWORD *)&key[4] = "determineModelType";
                *(_WORD *)&key[12] = 2080;
                *(_QWORD *)&key[14] = language_modeling::v1::kLanguageModelTypeToucan;
                v168 = 2080;
                v169 = language_modeling::v1::kUseForConditionalProbabilityKey;
                _os_log_impl(&dword_19C291000, v95, OS_LOG_TYPE_DEFAULT, "%s: Running model type %s since LD has set key %s to true and the architecture is not LSTM based", key, 0x20u);
              }
              v96 = (const void *)language_modeling::v1::kLanguageModelTypeToucan;
              v97 = strlen((const char *)language_modeling::v1::kLanguageModelTypeToucan);
              if (v97 <= 0x7FFFFFFFFFFFFFF7)
              {
                v98 = v97;
                if (v97 >= 0x17)
                {
                  v99 = (v97 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v97 | 7) != 0x17)
                    v99 = v97 | 7;
LABEL_198:
                  v105 = v99 + 1;
                  v104 = operator new(v99 + 1);
                  v46[5] = v98;
                  v46[6] = v105 | 0x8000000000000000;
                  v46[4] = v104;
                  goto LABEL_199;
                }
                goto LABEL_194;
              }
            }
            else
            {
              if (qword_1EDB96E40 != -1)
                dispatch_once(&qword_1EDB96E40, &unk_1E3D3A268);
              v102 = qword_1EDB96E38;
              if (os_log_type_enabled((os_log_t)qword_1EDB96E38, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)key = 136315650;
                *(_QWORD *)&key[4] = "determineModelType";
                *(_WORD *)&key[12] = 2080;
                *(_QWORD *)&key[14] = language_modeling::v1::kLanguageModelTypeToucanCPU;
                v168 = 2080;
                v169 = language_modeling::v1::kUseForConditionalProbabilityKey;
                _os_log_impl(&dword_19C291000, v102, OS_LOG_TYPE_DEFAULT, "%s: Running model type %s since LD has set key %s to true and the architecture is LSTM based", key, 0x20u);
              }
              v96 = (const void *)language_modeling::v1::kLanguageModelTypeToucanCPU;
              v103 = strlen((const char *)language_modeling::v1::kLanguageModelTypeToucanCPU);
              if (v103 <= 0x7FFFFFFFFFFFFFF7)
              {
                v98 = v103;
                if (v103 >= 0x17)
                {
                  v99 = (v103 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v103 | 7) != 0x17)
                    v99 = v103 | 7;
                  goto LABEL_198;
                }
LABEL_194:
                *((_BYTE *)v46 + 55) = v98;
                v104 = v46 + 4;
                if (!v98)
                {
LABEL_200:
                  v104[v98] = 0;
                  v101 = v166;
                  if (!v166)
                    goto LABEL_202;
                  goto LABEL_201;
                }
LABEL_199:
                memmove(v104, v96, v98);
                goto LABEL_200;
              }
            }
            sub_19C2A1A54();
          }
        }
        sub_19C29471C((CFStringRef *)key, (char *)language_modeling::v1::kLanguageModelForConditionalProbabilityKey);
        v73 = (const __CFString *)CFDictionaryGetValue(theDict, *(const void **)key);
        if (*(_QWORD *)key)
          CFRelease(*(CFTypeRef *)key);
        sub_19C3374D0((uint64_t)cf, v73);
        sub_19C29471C((CFStringRef *)key, (char *)language_modeling::v1::kLanguageModelForConditionalProbabilityUserSettingKey);
        v74 = (const __CFString *)CFDictionaryGetValue(theDict, *(const void **)key);
        if (*(_QWORD *)key)
          CFRelease(*(CFTypeRef *)key);
        sub_19C3374D0((uint64_t)buf, v74);
        v75 = (const void *)language_modeling::v1::kLanguageModelTypeToucan;
        v76 = (char)v165;
        if ((v165 & 0x80u) == 0)
          v77 = v165;
        else
          v77 = (size_t)cf[1];
        v78 = strlen((const char *)language_modeling::v1::kLanguageModelTypeToucan);
        if (v77 != v78
          || ((v165 & 0x80u) == 0 ? (v79 = cf) : (v79 = (CFTypeRef *)cf[0]),
              memcmp(v79, (const void *)language_modeling::v1::kLanguageModelTypeToucan, v77)))
        {
          if (v77 != strlen((const char *)language_modeling::v1::kLanguageModelTypeToucanCPU))
            goto LABEL_159;
          v80 = v76 >= 0 ? cf : (CFTypeRef *)cf[0];
          if (memcmp(v80, (const void *)language_modeling::v1::kLanguageModelTypeToucanCPU, v77))
            goto LABEL_159;
        }
        v81 = (char)v172;
        if ((v172 & 0x80u) == 0)
          v82 = v172;
        else
          v82 = v171;
        if (v82 == v78)
        {
          v83 = (v172 & 0x80u) == 0 ? buf : *(uint8_t **)buf;
          if (!memcmp(v83, v75, v78))
          {
            if (qword_1EDB96E40 != -1)
              dispatch_once(&qword_1EDB96E40, &unk_1E3D3A268);
            v138 = qword_1EDB96E38;
            if (os_log_type_enabled((os_log_t)qword_1EDB96E38, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)key = 136315394;
              *(_QWORD *)&key[4] = "determineModelType";
              *(_WORD *)&key[12] = 2080;
              *(_QWORD *)&key[14] = language_modeling::v1::kLanguageModelTypeToucanCPU;
              _os_log_impl(&dword_19C291000, v138, OS_LOG_TYPE_DEFAULT, "%s: Running model type %s since user toggled internal preference", key, 0x16u);
            }
            v88 = (const void *)language_modeling::v1::kLanguageModelTypeToucanCPU;
            v139 = strlen((const char *)language_modeling::v1::kLanguageModelTypeToucanCPU);
            if (v139 <= 0x7FFFFFFFFFFFFFF7)
            {
              v90 = v139;
              if (v139 >= 0x17)
              {
                v91 = (v139 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v139 | 7) != 0x17)
                  v91 = v139 | 7;
                goto LABEL_179;
              }
              goto LABEL_165;
            }
            goto LABEL_300;
          }
        }
        if (v82 == strlen((const char *)language_modeling::v1::kLanguageModelTypeToucanDisabled))
        {
          v84 = v81 >= 0 ? buf : *(uint8_t **)buf;
          if (!memcmp(v84, (const void *)language_modeling::v1::kLanguageModelTypeToucanDisabled, v82))
          {
            if (qword_1EDB96E40 != -1)
              dispatch_once(&qword_1EDB96E40, &unk_1E3D3A268);
            v140 = qword_1EDB96E38;
            if (os_log_type_enabled((os_log_t)qword_1EDB96E38, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)key = 136315394;
              *(_QWORD *)&key[4] = "determineModelType";
              *(_WORD *)&key[12] = 2080;
              *(_QWORD *)&key[14] = language_modeling::v1::kLanguageModelTypeTokenID;
              _os_log_impl(&dword_19C291000, v140, OS_LOG_TYPE_DEFAULT, "%s: Running model type %s since user toggled internal preference", key, 0x16u);
            }
            v88 = (const void *)language_modeling::v1::kLanguageModelTypeTokenID;
            v141 = strlen((const char *)language_modeling::v1::kLanguageModelTypeTokenID);
            if (v141 <= 0x7FFFFFFFFFFFFFF7)
            {
              v90 = v141;
              if (v141 >= 0x17)
              {
                v91 = (v141 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v141 | 7) != 0x17)
                  v91 = v141 | 7;
                goto LABEL_179;
              }
              goto LABEL_165;
            }
            goto LABEL_300;
          }
        }
        if (qword_1EDB96E18 != -1)
          dispatch_once(&qword_1EDB96E18, &unk_1E3D3ACD0);
        if (!byte_1EE41C018)
          goto LABEL_159;
        if (!v166)
        {
          v146 = __cxa_allocate_exception(0x10uLL);
          MEMORY[0x1A1AD3154](v146, "Could not construct");
          __cxa_throw(v146, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
        }
        v85 = (const __CFNumber *)sub_19C2F5778((const __CFDictionary *)v166, (char *)language_modeling::v1::kSupportsConditionalProbabilityKey);
        if (v85 && (v86 = sub_19C2F57F4(v85), v86 >= 0x100u) && (_BYTE)v86)
        {
          if (qword_1EDB96E40 != -1)
            dispatch_once(&qword_1EDB96E40, &unk_1E3D3A268);
          v87 = qword_1EDB96E38;
          if (os_log_type_enabled((os_log_t)qword_1EDB96E38, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)key = 136315650;
            *(_QWORD *)&key[4] = "determineModelType";
            *(_WORD *)&key[12] = 2080;
            *(_QWORD *)&key[14] = language_modeling::v1::kLanguageModelTypeToucanCPU;
            v168 = 2080;
            v169 = language_modeling::v1::kSupportsConditionalProbabilityKey;
            _os_log_impl(&dword_19C291000, v87, OS_LOG_TYPE_DEFAULT, "%s: Running model type %s since device is H13ANE and LD has set key %s to true", key, 0x20u);
          }
          v88 = (const void *)language_modeling::v1::kLanguageModelTypeToucanCPU;
          v89 = strlen((const char *)language_modeling::v1::kLanguageModelTypeToucanCPU);
          if (v89 <= 0x7FFFFFFFFFFFFFF7)
          {
            v90 = v89;
            if (v89 >= 0x17)
            {
              v91 = (v89 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v89 | 7) != 0x17)
                v91 = v89 | 7;
LABEL_179:
              v100 = v91 + 1;
              v94 = operator new(v91 + 1);
              v46[5] = v90;
              v46[6] = v100 | 0x8000000000000000;
              v46[4] = v94;
              goto LABEL_180;
            }
            goto LABEL_165;
          }
        }
        else
        {
LABEL_159:
          if (qword_1EDB96E40 != -1)
            dispatch_once(&qword_1EDB96E40, &unk_1E3D3A268);
          v92 = qword_1EDB96E38;
          if (os_log_type_enabled((os_log_t)qword_1EDB96E38, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)key = 136315394;
            *(_QWORD *)&key[4] = "determineModelType";
            *(_WORD *)&key[12] = 2080;
            *(_QWORD *)&key[14] = language_modeling::v1::kLanguageModelTypeTokenID;
            _os_log_impl(&dword_19C291000, v92, OS_LOG_TYPE_DEFAULT, "%s: Falling back to default model type %s", key, 0x16u);
          }
          v88 = (const void *)language_modeling::v1::kLanguageModelTypeTokenID;
          v93 = strlen((const char *)language_modeling::v1::kLanguageModelTypeTokenID);
          if (v93 <= 0x7FFFFFFFFFFFFFF7)
          {
            v90 = v93;
            if (v93 >= 0x17)
            {
              v91 = (v93 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v93 | 7) != 0x17)
                v91 = v93 | 7;
              goto LABEL_179;
            }
LABEL_165:
            *((_BYTE *)v46 + 55) = v90;
            v94 = v46 + 4;
            if (!v90)
            {
LABEL_181:
              v94[v90] = 0;
              if ((char)v172 < 0)
              {
                operator delete(*(void **)buf);
                if (((char)v165 & 0x80000000) == 0)
                {
LABEL_183:
                  v101 = v166;
                  if (!v166)
                    goto LABEL_202;
                  goto LABEL_201;
                }
              }
              else if (((char)v165 & 0x80000000) == 0)
              {
                goto LABEL_183;
              }
              operator delete((void *)cf[0]);
              v101 = v166;
              if (!v166)
              {
LABEL_202:
                v106 = __dst;
                if (__dst)
                {
                  v107 = v160;
                  v108 = __dst;
                  if (v160 != __dst)
                  {
                    do
                    {
                      v109 = (std::__shared_weak_count *)*(v107 - 1);
                      if (v109)
                      {
                        v110 = (unint64_t *)&v109->__shared_owners_;
                        do
                          v111 = __ldaxr(v110);
                        while (__stlxr(v111 - 1, v110));
                        if (!v111)
                        {
                          ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
                          std::__shared_weak_count::__release_weak(v109);
                        }
                      }
                      v107 -= 2;
                    }
                    while (v107 != v106);
                    v108 = __dst;
                  }
                  v160 = v106;
                  operator delete(v108);
                }
                if (*((_QWORD *)&v66 + 1))
                {
                  v112 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
                  do
                    v113 = __ldaxr(v112);
                  while (__stlxr(v113 - 1, v112));
                  if (!v113)
                  {
                    (*(void (**)(_QWORD))(**((_QWORD **)&v66 + 1) + 16))(*((_QWORD *)&v66 + 1));
                    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v66 + 1));
                  }
                }
                v114 = (const void *)MEMORY[0x1A1AD2A04](*(_QWORD *)(v46[1] + 8));
                v115 = v114;
                if (v114)
                  CFRetain(v114);
                sub_19C297DB4(key, v115);
                v116 = *(const __CFString **)key;
                if (*(_QWORD *)key)
                {
                  TypeID = CFStringGetTypeID();
                  if (TypeID == CFGetTypeID(v116))
                  {
                    sub_19C297E60(v46 + 7, v116);
                    if (*(_QWORD *)key)
                      CFRelease(*(CFTypeRef *)key);
                    sub_19C423B58((_BYTE *)v46 + 80, (const UInt8 *)v46 + 56);
                    MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, theDict);
                    v119 = *((char *)v46 + 55);
                    if (v119 >= 0)
                      v120 = *((unsigned __int8 *)v46 + 55);
                    else
                      v120 = v46[5];
                    if (v120 != strlen((const char *)language_modeling::v1::kLanguageModelTypeToucanCPU)
                      || (v119 >= 0 ? (v121 = v46 + 4) : (v121 = *v154),
                          memcmp(v121, (const void *)language_modeling::v1::kLanguageModelTypeToucanCPU, v120)))
                    {
                      if (v120 != strlen((const char *)language_modeling::v1::kLanguageModelTypeToucan)
                        || (v119 >= 0 ? (v122 = v46 + 4) : (v122 = *v154),
                            memcmp(v122, (const void *)language_modeling::v1::kLanguageModelTypeToucan, v120)))
                      {
LABEL_241:
                        v163 = v158;
                        v158 = 0uLL;
                        sub_19C39F874((uint64_t)(v46 + 13), MutableCopy, &v163);
                        v124 = (std::__shared_weak_count *)*((_QWORD *)&v163 + 1);
                        if (!*((_QWORD *)&v163 + 1))
                          goto LABEL_245;
                        v125 = (unint64_t *)(*((_QWORD *)&v163 + 1) + 8);
                        do
                          v126 = __ldaxr(v125);
                        while (__stlxr(v126 - 1, v125));
                        if (!v126)
                        {
                          ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
                          std::__shared_weak_count::__release_weak(v124);
                          if (!MutableCopy)
                          {
LABEL_247:
                            v46[50] = 0;
                            v46[51] = 0;
                            v46[49] = v46 + 50;
                            v127 = v46[1];
                            v128 = v46[22];
                            v162[0] = v46[21];
                            v162[1] = v128;
                            if (v128)
                            {
                              v129 = (unint64_t *)(v128 + 8);
                              do
                                v130 = __ldxr(v129);
                              while (__stxr(v130 + 1, v129));
                            }
                            sub_19C29471C((CFStringRef *)key, (char *)language_modeling::v1::kLanguageModelMontrealFullCacheSizeCategoryKey);
                            v131 = CFDictionaryContainsKey(theDict, *(const void **)key);
                            if (*(_QWORD *)key)
                              CFRelease(*(CFTypeRef *)key);
                            if (!v131)
                              goto LABEL_267;
                            sub_19C29471C((CFStringRef *)key, (char *)language_modeling::v1::kLanguageModelMontrealFullCacheSizeCategoryKey);
                            v132 = (const __CFString *)CFDictionaryGetValue(theDict, *(const void **)key);
                            if (*(_QWORD *)key)
                              CFRelease(*(CFTypeRef *)key);
                            sub_19C29471C((CFStringRef *)key, (char *)language_modeling::v1::kLanguageModelMontrealFullCacheSizeCategoryLarge);
                            v133 = CFStringCompare(v132, *(CFStringRef *)key, 0);
                            if (*(_QWORD *)key)
                              CFRelease(*(CFTypeRef *)key);
                            if (v133)
                            {
                              sub_19C29471C((CFStringRef *)key, (char *)language_modeling::v1::kLanguageModelMontrealFullCacheSizeCategoryMedium);
                              v134 = CFStringCompare(v132, *(CFStringRef *)key, 0);
                              if (*(_QWORD *)key)
                                CFRelease(*(CFTypeRef *)key);
                              if (v134)
                              {
                                sub_19C29471C((CFStringRef *)key, (char *)language_modeling::v1::kLanguageModelMontrealFullCacheSizeCategorySmall);
                                v135 = CFStringCompare(v132, *(CFStringRef *)key, 0);
                                if (*(_QWORD *)key)
                                  CFRelease(*(CFTypeRef *)key);
                                if (v135)
                                {
                                  sub_19C29471C((CFStringRef *)key, (char *)language_modeling::v1::kLanguageModelMontrealFullCacheSizeCategoryTiny);
                                  v136 = CFStringCompare(v132, *(CFStringRef *)key, 0);
                                  if (*(_QWORD *)key)
                                    CFRelease(*(CFTypeRef *)key);
                                  if (v136)
                                  {
LABEL_267:
                                    v137 = 0;
                                    goto LABEL_274;
                                  }
                                  v137 = 4;
                                }
                                else
                                {
                                  v137 = 3;
                                }
                              }
                              else
                              {
                                v137 = 2;
                              }
                            }
                            else
                            {
                              v137 = 1;
                            }
LABEL_274:
                            sub_19C3D8540((uint64_t)(v46 + 52), v127, (uint64_t)v162, v154, v137);
                          }
                        }
                        else
                        {
LABEL_245:
                          if (!MutableCopy)
                            goto LABEL_247;
                        }
                        CFRelease(MutableCopy);
                        goto LABEL_247;
                      }
                      if (qword_1EDB96E18 != -1)
                        dispatch_once(&qword_1EDB96E18, &unk_1E3D3ACD0);
                      if (!byte_1EE41C018)
                      {
                        sub_19C31474C((void **)v154, (char *)language_modeling::v1::kLanguageModelTypeTokenID);
                        goto LABEL_241;
                      }
                    }
                    v123 = (const void *)*MEMORY[0x1E0C9AE40];
                    CFDictionarySetValue(MutableCopy, (const void *)kLMLanguageModelUseMontrealKey, (const void *)*MEMORY[0x1E0C9AE40]);
                    CFDictionarySetValue(MutableCopy, (const void *)kLMLanguageModelUseLegacyStaticNgramModelsKey, v123);
                    goto LABEL_241;
                  }
                  v145 = __cxa_allocate_exception(0x10uLL);
                  MEMORY[0x1A1AD3154](v145, "Could not convert");
                }
                else
                {
                  v145 = __cxa_allocate_exception(0x10uLL);
                  MEMORY[0x1A1AD3154](v145, "Could not construct");
                }
                __cxa_throw(v145, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
              }
LABEL_201:
              CFRelease(v101);
              goto LABEL_202;
            }
LABEL_180:
            memmove(v94, v88, v90);
            goto LABEL_181;
          }
        }
LABEL_300:
        sub_19C2A1A54();
      }
    }
    else
    {
      v61 = 0;
      if (!v53)
        goto LABEL_95;
    }
    v62 = (unint64_t *)&v53->__shared_owners_;
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
    goto LABEL_95;
  }
LABEL_305:
  v147 = v157;
  v148 = operator new();
  *(_QWORD *)key = v156;
  if (v156)
  {
    v149 = (_QWORD *)operator new();
    *v149 = &off_1E3D39CF8;
    v149[1] = 0;
    v149[2] = 0;
    v149[3] = v156;
  }
  else
  {
    v149 = 0;
  }
  *(_QWORD *)&key[8] = v149;
  sub_19C39F874(v148, v147, key);
  v150 = *(std::__shared_weak_count **)&key[8];
  if (*(_QWORD *)&key[8])
  {
    v151 = (unint64_t *)(*(_QWORD *)&key[8] + 8);
    do
      v152 = __ldaxr(v151);
    while (__stlxr(v152 - 1, v151));
    if (!v152)
    {
      ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
      std::__shared_weak_count::__release_weak(v150);
    }
  }
  v153 = *a1;
  *a1 = v148;
  if (v153)
    (*(void (**)(uint64_t))(*(_QWORD *)v153 + 8))(v153);
  if (v157)
    CFRelease(v157);
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0x73736563637553;
  *(_BYTE *)(a4 + 31) = 7;
}

void sub_19C2F5430(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x19C2F5448);
  JUMPOUT(0x19C2F56C0);
}

void sub_19C2F5440(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_19C2CDAC8(exception_object);
}

void sub_19C2F5450(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x19C2F5448);
  JUMPOUT(0x19C2F56D0);
}

void sub_19C2F5460(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  if (a2)
  {
    sub_19C2B43C8((uint64_t)&a37);
    JUMPOUT(0x19C2F5474);
  }
  JUMPOUT(0x19C2F5448);
}

void sub_19C2F5484(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x19C2F548CLL);
  JUMPOUT(0x19C2F5448);
}

void sub_19C2F54BC(uint64_t a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    MEMORY[0x1A1AD355C](v2, 0x1072C40FEAF31FBLL);
    JUMPOUT(0x19C2F56D8);
  }
  JUMPOUT(0x19C2F5448);
}

void sub_19C2F54E4(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x19C2F56D8);
  JUMPOUT(0x19C2F5448);
}

void sub_19C2F54F4(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x19C2F54FCLL);
  JUMPOUT(0x19C2F5448);
}

void sub_19C2F5504(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x19C2F5510);
  JUMPOUT(0x19C2F5448);
}

void sub_19C2F552C(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x19C2F5538);
  JUMPOUT(0x19C2F5448);
}

void sub_19C2F5570(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x19C2F5448);
  JUMPOUT(0x19C2F56E4);
}

const void *sub_19C2F5778(const __CFDictionary *a1, char *a2)
{
  const void *Value;
  void *key;

  sub_19C29471C((CFStringRef *)&key, a2);
  Value = CFDictionaryGetValue(a1, key);
  if (key)
    CFRelease(key);
  return Value;
}

void sub_19C2F57C8(void *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C2E5670((const void **)va);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x19C2F57B0);
}

uint64_t sub_19C2F57F4(const __CFNumber *a1)
{
  CFTypeID TypeID;
  _BOOL4 v3;
  int v4;
  CFTypeID v5;
  int Value;
  int v8;
  int v9;
  BOOL v10;
  int v11;
  BOOL v13;
  BOOL v14;
  double valuePtr;

  if (!a1)
  {
LABEL_8:
    v3 = 0;
LABEL_9:
    v4 = 0;
    return v3 | (v4 << 8);
  }
  TypeID = CFBooleanGetTypeID();
  if (TypeID != CFGetTypeID(a1))
  {
    v5 = CFNumberGetTypeID();
    if (v5 == CFGetTypeID(a1))
    {
      switch(CFNumberGetType(a1))
      {
        case kCFNumberSInt8Type:
          LOBYTE(valuePtr) = 0;
          Value = CFNumberGetValue(a1, kCFNumberSInt8Type, &valuePtr);
          goto LABEL_17;
        case kCFNumberSInt16Type:
          LOWORD(valuePtr) = 0;
          Value = CFNumberGetValue(a1, kCFNumberSInt16Type, &valuePtr);
          goto LABEL_19;
        case kCFNumberSInt32Type:
          LODWORD(valuePtr) = 0;
          Value = CFNumberGetValue(a1, kCFNumberSInt32Type, &valuePtr);
          goto LABEL_21;
        case kCFNumberSInt64Type:
          valuePtr = 0.0;
          v8 = CFNumberGetValue(a1, kCFNumberSInt64Type, &valuePtr);
          goto LABEL_37;
        case kCFNumberFloat32Type:
          LODWORD(valuePtr) = 0;
          v9 = CFNumberGetValue(a1, kCFNumberFloat32Type, &valuePtr);
          goto LABEL_33;
        case kCFNumberFloat64Type:
          valuePtr = 0.0;
          v9 = CFNumberGetValue(a1, kCFNumberFloat64Type, &valuePtr);
          goto LABEL_46;
        case kCFNumberCharType:
          LOBYTE(valuePtr) = 0;
          Value = CFNumberGetValue(a1, kCFNumberCharType, &valuePtr);
LABEL_17:
          v10 = Value == 0;
          v11 = LOBYTE(valuePtr);
          goto LABEL_22;
        case kCFNumberShortType:
          LOWORD(valuePtr) = 0;
          Value = CFNumberGetValue(a1, kCFNumberShortType, &valuePtr);
LABEL_19:
          v10 = Value == 0;
          v11 = LOWORD(valuePtr);
          goto LABEL_22;
        case kCFNumberIntType:
          LODWORD(valuePtr) = 0;
          Value = CFNumberGetValue(a1, kCFNumberIntType, &valuePtr);
LABEL_21:
          v10 = Value == 0;
          v11 = LODWORD(valuePtr);
LABEL_22:
          v3 = !v10 && v11 != 0;
          if (!Value)
            goto LABEL_9;
          goto LABEL_4;
        case kCFNumberLongType:
          valuePtr = 0.0;
          v8 = CFNumberGetValue(a1, kCFNumberLongType, &valuePtr);
          goto LABEL_37;
        case kCFNumberLongLongType:
          valuePtr = 0.0;
          v8 = CFNumberGetValue(a1, kCFNumberLongLongType, &valuePtr);
          goto LABEL_37;
        case kCFNumberFloatType:
          LODWORD(valuePtr) = 0;
          v9 = CFNumberGetValue(a1, kCFNumberFloatType, &valuePtr);
LABEL_33:
          v13 = *(float *)&valuePtr == 0.0;
          goto LABEL_47;
        case kCFNumberDoubleType:
          valuePtr = 0.0;
          v9 = CFNumberGetValue(a1, kCFNumberDoubleType, &valuePtr);
          goto LABEL_46;
        case kCFNumberCFIndexType:
          valuePtr = 0.0;
          v8 = CFNumberGetValue(a1, kCFNumberCFIndexType, &valuePtr);
          goto LABEL_37;
        case kCFNumberNSIntegerType:
          valuePtr = 0.0;
          v8 = CFNumberGetValue(a1, kCFNumberNSIntegerType, &valuePtr);
LABEL_37:
          if (v8)
            v14 = *(_QWORD *)&valuePtr == 0;
          else
            v14 = 1;
          v3 = !v14;
          if (!v8)
            goto LABEL_9;
          goto LABEL_4;
        case kCFNumberCGFloatType:
          valuePtr = 0.0;
          v9 = CFNumberGetValue(a1, kCFNumberCGFloatType, &valuePtr);
LABEL_46:
          v13 = valuePtr == 0.0;
LABEL_47:
          v3 = !v13 && v9 != 0;
          if (!v9)
            goto LABEL_9;
          goto LABEL_4;
        default:
          goto LABEL_8;
      }
    }
    goto LABEL_8;
  }
  v3 = CFBooleanGetValue(a1) != 0;
LABEL_4:
  v4 = 1;
  return v3 | (v4 << 8);
}

void sub_19C2F5A74()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x1E0DE5040] + 16;
  __cxa_throw(exception, MEMORY[0x1E0DE4E88], (void (*)(void *))std::exception::~exception);
}

void **sub_19C2F5AA8(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (std::__shared_weak_count *)*((_QWORD *)v3 - 1);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_19C2F5B40(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  int *v5;
  uint64_t v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;

  v2 = *(std::__shared_weak_count **)(a1 + 152);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = *(int **)(a1 + 136);
  *(_QWORD *)(a1 + 136) = 0;
  if (v5)
  {
    if (*v5 != -1)
    {
      flock(*v5, 8);
      close(*v5);
    }
    MEMORY[0x1A1AD355C](v5, 0x1000C4052888210);
  }
  if (*(_BYTE *)(a1 + 128))
  {
    sub_19C2E457C(*(_QWORD *)(a1 + 112));
    if (*(char *)(a1 + 103) < 0)
      operator delete(*(void **)(a1 + 80));
  }
  v6 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v6)
  {
    sub_19C2F5D3C(v6);
    MEMORY[0x1A1AD355C]();
  }
  v7 = *(const void **)(a1 + 56);
  if (v7)
    CFRelease(v7);
  *(_QWORD *)(a1 + 56) = 0;
  v8 = *(const void **)(a1 + 48);
  if (v8)
    CFRelease(v8);
  *(_QWORD *)(a1 + 48) = 0;
  v9 = *(const void **)(a1 + 40);
  if (v9)
    CFRelease(v9);
  *(_QWORD *)(a1 + 40) = 0;
  v10 = *(const void **)(a1 + 32);
  if (v10)
    CFRelease(v10);
  *(_QWORD *)(a1 + 32) = 0;
  v11 = *(const void **)(a1 + 24);
  if (v11)
    CFRelease(v11);
  *(_QWORD *)(a1 + 24) = 0;
  v12 = *(const void **)(a1 + 8);
  if (v12)
    CFRelease(v12);
  *(_QWORD *)(a1 + 8) = 0;
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
  *(_QWORD *)a1 = 0;
  return a1;
}

uint64_t *sub_19C2F5CAC(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = sub_19C2F5B40(v2);
    MEMORY[0x1A1AD355C](v3, 0x1072C40FEAF31FBLL);
  }
  return a1;
}

_DWORD *sub_19C2F5CF0(_DWORD *a1, int a2, __int128 *a3)
{
  _DWORD *v4;
  __int128 v5;

  *a1 = a2;
  v4 = a1 + 2;
  if (*((char *)a3 + 23) < 0)
  {
    sub_19C2B5238(v4, *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v5 = *a3;
    *((_QWORD *)v4 + 2) = *((_QWORD *)a3 + 2);
    *(_OWORD *)v4 = v5;
  }
  return a1;
}

void sub_19C2F5D3C(uint64_t a1)
{
  const void *v2;
  void *v3;
  void **v4;
  const void *v5;
  void *v6;

  if (*(char *)(a1 + 455) < 0)
  {
    operator delete(*(void **)(a1 + 432));
    v2 = *(const void **)(a1 + 408);
    if (!v2)
      goto LABEL_6;
    goto LABEL_5;
  }
  v2 = *(const void **)(a1 + 408);
  if (v2)
LABEL_5:
    CFRelease(v2);
LABEL_6:
  *(_QWORD *)(a1 + 408) = 0;
  v3 = *(void **)(a1 + 264);
  if (v3)
  {
    *(_QWORD *)(a1 + 272) = v3;
    operator delete(v3);
  }
  v4 = *(void ***)(a1 + 184);
  *(_QWORD *)(a1 + 184) = 0;
  if (v4)
    sub_19C2F5DD8(v4);
  v5 = *(const void **)(a1 + 176);
  if (v5)
    CFRelease(v5);
  *(_QWORD *)(a1 + 176) = 0;
  sub_19C2F5EB4(a1 + 88);
  v6 = *(void **)(a1 + 64);
  if (v6)
  {
    *(_QWORD *)(a1 + 72) = v6;
    operator delete(v6);
  }
  std::mutex::~mutex((std::mutex *)a1);
}

void sub_19C2F5DD8(void **a1)
{
  void **v2;
  void *v3;
  char *v4;
  char *v5;
  void *v6;
  void **v7;
  const void *v8;
  const void *v9;

  v2 = (void **)a1[5];
  if (v2)
  {
    do
    {
      v7 = (void **)*v2;
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v7;
    }
    while (v7);
  }
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    operator delete(v3);
  v4 = (char *)*a1;
  if (*a1)
  {
    v5 = (char *)a1[1];
    v6 = *a1;
    if (v5 != v4)
    {
      do
      {
        v8 = (const void *)*((_QWORD *)v5 - 3);
        if (v8)
          CFRelease(v8);
        v9 = (const void *)*((_QWORD *)v5 - 1);
        if (v9)
          CFRelease(v9);
        if (*(v5 - 25) < 0)
          operator delete(*((void **)v5 - 6));
        v5 -= 48;
      }
      while (v5 != v4);
      v6 = *a1;
    }
    a1[1] = v4;
    operator delete(v6);
  }
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C2F5EB4(uint64_t a1)
{
  uint64_t v2;

  if (*(char *)(a1 + 87) < 0)
  {
    operator delete(*(void **)(a1 + 64));
    if ((*(char *)(a1 + 63) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((*(char *)(a1 + 63) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 40));
LABEL_3:
  v2 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (!v2)
    goto LABEL_9;
  if (*(char *)(v2 + 95) < 0)
  {
    operator delete(*(void **)(v2 + 72));
    if ((*(char *)(v2 + 71) & 0x80000000) == 0)
    {
LABEL_6:
      if ((*(char *)(v2 + 47) & 0x80000000) == 0)
        goto LABEL_7;
LABEL_16:
      operator delete(*(void **)(v2 + 24));
      if ((*(char *)(v2 + 23) & 0x80000000) == 0)
        goto LABEL_8;
LABEL_17:
      operator delete(*(void **)v2);
      goto LABEL_8;
    }
  }
  else if ((*(char *)(v2 + 71) & 0x80000000) == 0)
  {
    goto LABEL_6;
  }
  operator delete(*(void **)(v2 + 48));
  if (*(char *)(v2 + 47) < 0)
    goto LABEL_16;
LABEL_7:
  if (*(char *)(v2 + 23) < 0)
    goto LABEL_17;
LABEL_8:
  MEMORY[0x1A1AD355C](v2, 0x1012C4003C2D8E3);
LABEL_9:
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void sub_19C2F5F94(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1A1AD355CLL);
}

uint64_t sub_19C2F5FB8(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
  {
    sub_19C2F5B40(result);
    JUMPOUT(0x1A1AD355CLL);
  }
  return result;
}

uint64_t sub_19C2F5FEC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN2LM14ResourceLoaderEEE"
    || ((v3 & (unint64_t)"NSt3__114default_deleteIN2LM14ResourceLoaderEEE" & 0x8000000000000000) != 0) != __OFSUB__(v3, "NSt3__114default_deleteIN2LM14ResourceLoaderEEE")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN2LM14ResourceLoaderEEE" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

_QWORD *language_modeling::v1::LanguageModel::wordSeparator@<X0>(language_modeling::v1::LanguageModel *this@<X0>, _QWORD *a2@<X8>)
{
  return (*(_QWORD *(**)(_QWORD *__return_ptr))(**(_QWORD **)this + 16))(a2);
}

void language_modeling::v1::LanguageModel::makeDefaultSession(language_modeling::v1::LanguageModel *this@<X0>, _QWORD *a2@<X8>)
{
  const void *v4;
  size_t v5;
  const void *v6;
  const void **v7;
  uint64_t v8;
  uint64_t v9;
  const void *v10;
  size_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int **v16;
  unsigned int *v17[2];
  char v18;
  _QWORD v19[2];
  const void *__dst[2];
  unint64_t v21;
  _DWORD v22[6];
  int v23;
  void *__p[2];
  unint64_t v25;
  uint64_t v26;
  _BYTE v27[15];
  char v28;
  int v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v4 = (const void *)language_modeling::v1::kEnvironmentSessionTypeKey;
  v5 = strlen((const char *)language_modeling::v1::kEnvironmentSessionTypeKey);
  if (v5 > 0x7FFFFFFFFFFFFFF7)
LABEL_26:
    sub_19C2A1A54();
  v6 = (const void *)v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = (const void **)operator new(v8 + 1);
    __dst[1] = v6;
    v21 = v9 | 0x8000000000000000;
    __dst[0] = v7;
    goto LABEL_8;
  }
  HIBYTE(v21) = v5;
  v7 = __dst;
  if (v5)
LABEL_8:
    memmove(v7, v4, (size_t)v6);
  *((_BYTE *)v6 + (_QWORD)v7) = 0;
  v22[0] = 0;
  v23 = 0;
  v10 = (const void *)language_modeling::v1::kEnvironmentAppIdentifierKey;
  v11 = strlen((const char *)language_modeling::v1::kEnvironmentAppIdentifierKey);
  if (v11 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_26;
  v12 = (void *)v11;
  if (v11 >= 0x17)
  {
    v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v14 = v11 | 7;
    v15 = v14 + 1;
    v13 = operator new(v14 + 1);
    __p[1] = v12;
    v25 = v15 | 0x8000000000000000;
    __p[0] = v13;
    goto LABEL_16;
  }
  HIBYTE(v25) = v11;
  v13 = __p;
  if (v11)
LABEL_16:
    memmove(v13, v10, (size_t)v12);
  *((_BYTE *)v12 + (_QWORD)v13) = 0;
  v26 = 0x746C7561666564;
  *(_QWORD *)v27 = v19[0];
  *(_QWORD *)&v27[7] = *(_QWORD *)((char *)v19 + 7);
  v28 = 7;
  v19[0] = 0;
  *(_QWORD *)((char *)v19 + 7) = 0;
  v29 = 1;
  v17[0] = 0;
  v17[1] = 0;
  v16 = v17;
  sub_19C2F6440((uint64_t *)&v16, (uint64_t)v17, __dst, (uint64_t)__dst);
  sub_19C2F6440((uint64_t *)&v16, (uint64_t)v17, (const void **)__p, (uint64_t)__p);
  language_modeling::v1::LanguageModel::makeSession(this, (uint64_t)&v16, a2);
  sub_19C2F68B0(v17[0]);
  if (v29 != -1)
    ((void (*)(char *, uint64_t *))off_1E3D3A288[v29])(&v18, &v26);
  v29 = -1;
  if (SHIBYTE(v25) < 0)
    operator delete(__p[0]);
  if (v23 != -1)
    ((void (*)(char *, _DWORD *))off_1E3D3A288[v23])(&v18, v22);
  v23 = -1;
  if (SHIBYTE(v21) < 0)
    operator delete((void *)__dst[0]);
}

void sub_19C2F6410(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_19C2CDAC8(exception_object);
}

uint64_t *sub_19C2F6440(uint64_t *result, uint64_t a2, const void **a3, uint64_t a4)
{
  uint64_t *v7;
  _QWORD *v8;
  int v9;
  const void *v10;
  size_t v11;
  int v12;
  const void *v13;
  size_t v14;
  size_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  const void *v21;
  size_t v22;
  int v23;
  const void *v24;
  size_t v25;
  size_t v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  const void *v30;
  const void *v31;
  int v32;
  const void *v33;
  size_t v34;
  size_t v35;
  int v36;
  BOOL v37;
  _QWORD *v38;
  _BYTE *v39;
  _BYTE *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  const void *v47;
  const void *v48;
  int v49;
  const void *v50;
  size_t v51;
  size_t v52;
  _QWORD *v53;
  _QWORD *v54;
  const void *v55;
  const void *v56;
  int v57;
  const void *v58;
  size_t v59;
  size_t v60;
  int v61;
  char v62[2];

  v7 = result;
  v8 = result + 1;
  if (result + 1 == (uint64_t *)a2)
    goto LABEL_23;
  v9 = *((char *)a3 + 23);
  if (v9 >= 0)
    v10 = a3;
  else
    v10 = *a3;
  if (v9 >= 0)
    v11 = *((unsigned __int8 *)a3 + 23);
  else
    v11 = (size_t)a3[1];
  v12 = *(char *)(a2 + 55);
  if (v12 >= 0)
    v13 = (const void *)(a2 + 32);
  else
    v13 = *(const void **)(a2 + 32);
  if (v12 >= 0)
    v14 = *(unsigned __int8 *)(a2 + 55);
  else
    v14 = *(_QWORD *)(a2 + 40);
  if (v14 >= v11)
    v15 = v11;
  else
    v15 = v14;
  result = (uint64_t *)memcmp(v10, v13, v15);
  if ((_DWORD)result)
  {
    if ((result & 0x80000000) == 0)
      goto LABEL_19;
LABEL_23:
    v16 = *(_QWORD *)a2;
    if (*v7 == a2)
    {
      v18 = a2;
    }
    else
    {
      if (v16)
      {
        v17 = *(_QWORD *)a2;
        do
        {
          v18 = v17;
          v17 = *(_QWORD *)(v17 + 8);
        }
        while (v17);
      }
      else
      {
        v19 = a2;
        do
        {
          v18 = *(_QWORD *)(v19 + 16);
          v37 = *(_QWORD *)v18 == v19;
          v19 = v18;
        }
        while (v37);
      }
      v20 = *(char *)(v18 + 55);
      if (v20 >= 0)
        v21 = (const void *)(v18 + 32);
      else
        v21 = *(const void **)(v18 + 32);
      if (v20 >= 0)
        v22 = *(unsigned __int8 *)(v18 + 55);
      else
        v22 = *(_QWORD *)(v18 + 40);
      v23 = *((char *)a3 + 23);
      if (v23 >= 0)
        v24 = a3;
      else
        v24 = *a3;
      if (v23 >= 0)
        v25 = *((unsigned __int8 *)a3 + 23);
      else
        v25 = (size_t)a3[1];
      if (v25 >= v22)
        v26 = v22;
      else
        v26 = v25;
      result = (uint64_t *)memcmp(v21, v24, v26);
      if ((_DWORD)result)
      {
        if ((result & 0x80000000) == 0)
          goto LABEL_48;
      }
      else if (v22 >= v25)
      {
LABEL_48:
        v27 = (_QWORD *)*v8;
        if (!*v8)
          goto LABEL_49;
        while (1)
        {
          v28 = v27;
          v31 = (const void *)v27[4];
          v29 = v27 + 4;
          v30 = v31;
          v32 = *((char *)v29 + 23);
          if (v32 >= 0)
            v33 = v29;
          else
            v33 = v30;
          if (v32 >= 0)
            v34 = *((unsigned __int8 *)v29 + 23);
          else
            v34 = v29[1];
          if (v34 >= v25)
            v35 = v25;
          else
            v35 = v34;
          v36 = memcmp(v24, v33, v35);
          if (v36)
          {
            if (v36 < 0)
              goto LABEL_50;
LABEL_64:
            result = (uint64_t *)memcmp(v33, v24, v35);
            if ((_DWORD)result)
            {
              if ((result & 0x80000000) == 0)
                goto LABEL_130;
            }
            else if (v34 >= v25)
            {
LABEL_130:
              v38 = v8;
              goto LABEL_77;
            }
            v8 = v28 + 1;
            v27 = (_QWORD *)v28[1];
            if (!v27)
              goto LABEL_78;
          }
          else
          {
            if (v25 >= v34)
              goto LABEL_64;
LABEL_50:
            v27 = (_QWORD *)*v28;
            v8 = v28;
            if (!*v28)
              goto LABEL_78;
          }
        }
      }
    }
    v37 = v16 == 0;
    if (v16)
      v28 = (_QWORD *)v18;
    else
      v28 = (_QWORD *)a2;
    if (v37)
      v38 = (_QWORD *)a2;
    else
      v38 = (_QWORD *)(v18 + 8);
LABEL_77:
    v8 = v38;
    if (*v38)
      return result;
    goto LABEL_78;
  }
  if (v11 < v14)
    goto LABEL_23;
LABEL_19:
  result = (uint64_t *)memcmp(v13, v10, v15);
  if ((_DWORD)result)
  {
    if ((result & 0x80000000) == 0)
      return result;
  }
  else if (v14 >= v11)
  {
    return result;
  }
  v38 = (_QWORD *)(a2 + 8);
  v43 = *(_QWORD **)(a2 + 8);
  if (v43)
  {
    do
    {
      v38 = v43;
      v43 = (_QWORD *)*v43;
      v28 = v38;
      v44 = v38;
    }
    while (v43);
    if (v38 == v8)
      goto LABEL_77;
  }
  else
  {
    v44 = (_QWORD *)a2;
    do
    {
      v45 = v44;
      v44 = (_QWORD *)v44[2];
    }
    while ((_QWORD *)*v44 != v45);
    v28 = (_QWORD *)a2;
    if (v44 == v8)
      goto LABEL_77;
  }
  v48 = (const void *)v44[4];
  v46 = v44 + 4;
  v47 = v48;
  v49 = *((char *)v46 + 23);
  if (v49 >= 0)
    v50 = v46;
  else
    v50 = v47;
  if (v49 >= 0)
    v51 = *((unsigned __int8 *)v46 + 23);
  else
    v51 = v46[1];
  if (v51 >= v11)
    v52 = v11;
  else
    v52 = v51;
  result = (uint64_t *)memcmp(v10, v50, v52);
  if ((_DWORD)result)
  {
    if ((result & 0x80000000) != 0)
      goto LABEL_77;
  }
  else if (v11 < v51)
  {
    goto LABEL_77;
  }
  v53 = (_QWORD *)*v8;
  if (*v8)
  {
    while (1)
    {
      v28 = v53;
      v56 = (const void *)v53[4];
      v54 = v53 + 4;
      v55 = v56;
      v57 = *((char *)v54 + 23);
      if (v57 >= 0)
        v58 = v54;
      else
        v58 = v55;
      if (v57 >= 0)
        v59 = *((unsigned __int8 *)v54 + 23);
      else
        v59 = v54[1];
      if (v59 >= v11)
        v60 = v11;
      else
        v60 = v59;
      v61 = memcmp(v10, v58, v60);
      if (v61)
      {
        if (v61 < 0)
          goto LABEL_110;
LABEL_124:
        result = (uint64_t *)memcmp(v58, v10, v60);
        if ((_DWORD)result)
        {
          if ((result & 0x80000000) == 0)
            goto LABEL_130;
        }
        else if (v59 >= v11)
        {
          goto LABEL_130;
        }
        v8 = v28 + 1;
        v53 = (_QWORD *)v28[1];
        if (!v53)
          goto LABEL_78;
      }
      else
      {
        if (v11 >= v59)
          goto LABEL_124;
LABEL_110:
        v53 = (_QWORD *)*v28;
        v8 = v28;
        if (!*v28)
          goto LABEL_78;
      }
    }
  }
LABEL_49:
  v28 = v8;
LABEL_78:
  v39 = operator new(0x58uLL);
  v40 = v39;
  if (*(char *)(a4 + 23) < 0)
  {
    sub_19C2B5238(v39 + 32, *(void **)a4, *(_QWORD *)(a4 + 8));
  }
  else
  {
    *((_OWORD *)v39 + 2) = *(_OWORD *)a4;
    *((_QWORD *)v39 + 6) = *(_QWORD *)(a4 + 16);
  }
  v40[56] = 0;
  *((_DWORD *)v40 + 20) = -1;
  v41 = *(unsigned int *)(a4 + 48);
  if ((_DWORD)v41 != -1)
  {
    ((void (*)(char *, _BYTE *, uint64_t))*(&off_1E3D3A038 + v41))(v62, v40 + 56, a4 + 24);
    *((_DWORD *)v40 + 20) = v41;
  }
  *(_QWORD *)v40 = 0;
  *((_QWORD *)v40 + 1) = 0;
  *((_QWORD *)v40 + 2) = v28;
  *v8 = v40;
  v42 = *(_QWORD *)*v7;
  if (v42)
  {
    *v7 = v42;
    v40 = (_BYTE *)*v8;
  }
  result = sub_19C2A2310((uint64_t *)v7[1], (uint64_t *)v40);
  ++v7[2];
  return result;
}

void sub_19C2F6854(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  void *v13;

  operator delete(v13);
  _Unwind_Resume(a1);
}

void sub_19C2F68B0(unsigned int *a1)
{
  uint64_t v2;
  char v3;

  if (a1)
  {
    sub_19C2F68B0(*(_QWORD *)a1);
    sub_19C2F68B0(*((_QWORD *)a1 + 1));
    v2 = a1[20];
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, unsigned int *))off_1E3D3A288[v2])(&v3, a1 + 14);
    a1[20] = -1;
    if (*((char *)a1 + 55) < 0)
      operator delete(*((void **)a1 + 4));
    operator delete(a1);
  }
}

void sub_19C2F6934(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

void sub_19C2F6948(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *a2 = *a3;
}

void *sub_19C2F6954(int a1, _QWORD *__dst, __int128 *a3)
{
  __int128 v3;
  void *result;

  if (*((char *)a3 + 23) < 0)
    return sub_19C2B5238(__dst, *(void **)a3, *((_QWORD *)a3 + 1));
  v3 = *a3;
  __dst[2] = *((_QWORD *)a3 + 2);
  *(_OWORD *)__dst = v3;
  return result;
}

uint64_t language_modeling::v1::LanguageModel::getLanguageLocales(language_modeling::v1::LanguageModel *this)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)this + 56))(*(_QWORD *)this);
}

uint64_t language_modeling::v1::LanguageModel::reloadWithLocales@<X0>(language_modeling::v1::LanguageModel *this@<X0>, const __CFArray *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD, const __CFArray *))(**(_QWORD **)this + 48))(*(_QWORD *)this, a2);
  *(_DWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0x73736563637553;
  *(_BYTE *)(a3 + 31) = 7;
  return result;
}

uint64_t language_modeling::v1::LanguageModel::addLexicon(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 64))(*a1);
}

uint64_t language_modeling::v1::LanguageModel::removeLexicon(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 72))(*a1);
}

uint64_t language_modeling::v1::LanguageModel::blocklistStatus(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)*a1 + 32))(*a1, a2, a3, 1);
}

{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)*a1 + 40))(*a1, a2, a3, 1);
}

uint64_t language_modeling::v1::LanguageModel::blocklistStatus(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 32))(*a1);
}

{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 40))(*a1);
}

uint64_t language_modeling::v1::LanguageModel::addVocabulary(language_modeling::v1::LanguageModel *this, void *a2)
{
  return (*(uint64_t (**)(_QWORD, void *))(**(_QWORD **)this + 80))(*(_QWORD *)this, a2);
}

uint64_t language_modeling::v1::LanguageModel::removeVocabulary(language_modeling::v1::LanguageModel *this, void *a2)
{
  return (*(uint64_t (**)(_QWORD, void *))(**(_QWORD **)this + 88))(*(_QWORD *)this, a2);
}

uint64_t language_modeling::v1::LanguageModel::flushDynamicData(language_modeling::v1::LanguageModel *this)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)this + 96))(*(_QWORD *)this);
}

uint64_t language_modeling::v1::LanguageModel::clearDynamicDataForTesting(language_modeling::v1::LanguageModel *this)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)this + 104))(*(_QWORD *)this);
}

uint64_t language_modeling::v1::LanguageModel::unwireMemory(language_modeling::v1::LanguageModel *this)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)this + 120))(*(_QWORD *)this);
}

uint64_t language_modeling::v1::LanguageModel::testingParameters(language_modeling::v1::LanguageModel *this)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)this + 136))(*(_QWORD *)this);
}

uint64_t language_modeling::v1::LanguageModel::copyLinguisticDataFileInfo(language_modeling::v1::LanguageModel *this)
{
  uint64_t v2;

  (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)this + 144))(&v2);
  return v2;
}

uint64_t language_modeling::v1::LanguageModel::parameters(language_modeling::v1::LanguageModel *this)
{
  uint64_t v2;

  (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)this + 152))(&v2);
  return v2;
}

uint64_t language_modeling::v1::LanguageModel::modelType(language_modeling::v1::LanguageModel *this)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)this + 160))(*(_QWORD *)this);
}

uint64_t sub_19C2F7730(uint64_t a1, unsigned __int8 *a2)
{
  const void **v4;
  int v5;
  size_t v6;
  const void *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;

  v4 = *(const void ***)(a1 + 8);
  v5 = *((char *)v4 + 23);
  if (v5 >= 0)
    v6 = *((unsigned __int8 *)v4 + 23);
  else
    v6 = (size_t)v4[1];
  if (v6 == strlen((const char *)language_modeling::v1::kLanguageModelTypeTokenID)
    && (v5 >= 0 ? (v7 = v4) : (v7 = *v4), !memcmp(v7, (const void *)language_modeling::v1::kLanguageModelTypeTokenID, v6)))
  {
    v16 = *(_QWORD *)(a1 + 176);
    if (*(_BYTE *)(v16 + 88)
      && sub_19C3BDFF4(*(std::recursive_mutex **)(*(_QWORD *)(v16 + 72) + 464), (uint64_t)a2))
    {
      return 1;
    }
    result = sub_19C31939C(*(_QWORD **)(v16 + 72), (uint64_t)a2, 0);
    if (!(_DWORD)result)
      return result;
    return (_DWORD)result != 500 || sub_19C43BAA0(*(_QWORD *)(v16 + 72), (uint64_t)a2) != 0;
  }
  else
  {
    v8 = a2[23];
    v9 = (char)v8;
    if ((v8 & 0x80u) != 0)
      v8 = *((_QWORD *)a2 + 1);
    if (v8)
    {
      if (v9 < 0)
        a2 = *(unsigned __int8 **)a2;
      v10 = v8 - 1;
      v11 = MEMORY[0x1E0C80978];
      do
      {
        v14 = *a2;
        if ((char)*a2 < 0)
          v12 = __maskrune(v14, 0x4000uLL);
        else
          v12 = *(_DWORD *)(v11 + 4 * v14 + 60) & 0x4000;
        ++a2;
        if (v12)
          v13 = v10 == 0;
        else
          v13 = 1;
        --v10;
      }
      while (!v13);
      return v12 == 0;
    }
    else
    {
      return 0;
    }
  }
}

_QWORD *sub_19C2F7888@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  const void **v8;
  int v9;
  size_t v10;
  const void *v11;
  _QWORD *result;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  int64x2_t v18;
  __int128 v19;
  _BYTE v20[32];
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  _QWORD v24[3];
  _QWORD *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v8 = *(const void ***)(a1 + 8);
  v9 = *((char *)v8 + 23);
  if (v9 >= 0)
    v10 = *((unsigned __int8 *)v8 + 23);
  else
    v10 = (size_t)v8[1];
  if (v10 != strlen((const char *)language_modeling::v1::kLanguageModelTypeTokenID)
    || (v9 >= 0 ? (v11 = v8) : (v11 = *v8),
        memcmp(v11, (const void *)language_modeling::v1::kLanguageModelTypeTokenID, v10)))
  {
    v24[0] = 0;
    sub_19C30DDEC((uint64_t)&v18, a1, a2, a3, 1, (uint64_t)v24, 0);
    result = (_QWORD *)operator new();
    v13 = v22;
    *((_OWORD *)result + 4) = v21;
    *((_OWORD *)result + 5) = v13;
    result[12] = v23;
    v14 = v19;
    *(int64x2_t *)result = v18;
    *((_OWORD *)result + 1) = v14;
    v15 = *(_OWORD *)&v20[16];
    *((_OWORD *)result + 2) = *(_OWORD *)v20;
    *((_OWORD *)result + 3) = v15;
    *((_DWORD *)result + 26) = BYTE8(v19) & 1 | (2 * ((DWORD2(v19) >> 8) & 1));
    *a4 = (uint64_t)result;
    return result;
  }
  v16 = *(_QWORD *)(a1 + 176);
  v18 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  *(_QWORD *)&v19 = 0;
  WORD4(v19) = 0;
  v20[0] = 1;
  *(_OWORD *)&v20[8] = xmmword_19C46DE10;
  *(_DWORD *)&v20[24] = 0;
  v21 = xmmword_19C46DE10;
  v23 = 0;
  v22 = 0xFFEFFFFFFFFFFFFFLL;
  v25 = 0;
  sub_19C43AAE4(a4, v16, (uint64_t)a2, *a3, (uint64_t)&v18, 1, v24);
  result = v25;
  if (v25 == v24)
  {
    v17 = 4;
    result = v24;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v17))();
  }
  if (v25)
  {
    v17 = 5;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v17))();
  }
  return result;
}

void sub_19C2F7A4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,char *a25)
{
  char *v25;
  char *v27;
  uint64_t v28;

  v27 = a25;
  if (a25 == v25)
  {
    v28 = 4;
    v27 = &a22;
  }
  else
  {
    if (!a25)
      _Unwind_Resume(exception_object);
    v28 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v27 + 8 * v28))();
  _Unwind_Resume(exception_object);
}

_QWORD *sub_19C2F7A90@<X0>(_QWORD *result@<X0>, unsigned __int8 **a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  uint64_t v8;
  _OWORD *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  __int128 *v16;
  _QWORD *v17;
  int64x2_t v18;
  __int128 *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v5 = *a2;
  v6 = a2[1];
  if (*a2 != v6)
  {
    v8 = (uint64_t)result;
    v18 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
    do
    {
      v15 = operator new();
      *(int64x2_t *)v15 = v18;
      *(_QWORD *)(v15 + 16) = 0;
      *(_QWORD *)(v15 + 24) = 0;
      *(_BYTE *)(v15 + 32) = 1;
      *(_OWORD *)(v15 + 40) = xmmword_19C46DE10;
      *(_DWORD *)(v15 + 56) = 0;
      *(_OWORD *)(v15 + 64) = xmmword_19C46DE10;
      *(_QWORD *)(v15 + 88) = 0;
      *(_QWORD *)(v15 + 96) = 0;
      *(_QWORD *)(v15 + 80) = 0xFFEFFFFFFFFFFFFFLL;
      *(_DWORD *)(v15 + 104) = 0;
      sub_19C2F7888(v8, v5, a3, (uint64_t *)&v19);
      MEMORY[0x1A1AD355C](v15, 0x1000C4065B674BELL);
      v16 = v19;
      v17 = (_QWORD *)a4[1];
      if ((unint64_t)v17 < a4[2])
      {
        v9 = (_OWORD *)operator new();
        v10 = *v16;
        v11 = v16[2];
        v9[1] = v16[1];
        v9[2] = v11;
        *v9 = v10;
        v12 = v16[3];
        v13 = v16[4];
        v14 = v16[6];
        v9[5] = v16[5];
        v9[6] = v14;
        v9[3] = v12;
        v9[4] = v13;
        *v17 = v9;
        a4[1] = v17 + 1;
      }
      else
      {
        result = sub_19C3121A4(a4, v19);
        a4[1] = result;
        if (!v16)
          goto LABEL_5;
      }
      result = (_QWORD *)MEMORY[0x1A1AD355C](v16, 0x1000C4065B674BELL);
LABEL_5:
      v5 += 32;
    }
    while (v5 != v6);
  }
  return result;
}

void sub_19C2F7D0C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  if (v2)
    JUMPOUT(0x19C2F7D14);
  sub_19C311DE4(v1);
  _Unwind_Resume(a1);
}

void sub_19C2F7D30(void *a1, int a2)
{
  if (a2)
    sub_19C2CDAC8(a1);
  JUMPOUT(0x19C2F7D4CLL);
}

void sub_19C2F7D54(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  char *v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  char *v12;
  size_t v13;
  char *v14;
  __int128 v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  __int128 v23;
  char *v24;
  void *v25;
  void *v26;
  char *v27;
  char *v28;
  void *v29;
  char *v30;
  void *v31;
  void *v32;
  __int128 v36;
  void *__p;
  char *v38;
  char *v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  __p = 0;
  v38 = 0;
  v39 = 0;
  v5 = *a2;
  if (a2[1] != *a2)
  {
    v6 = 0;
    v7 = 0;
    do
    {
      v10 = (_QWORD *)(v5 + 24 * v7);
      v9 = v10[1];
      v11 = v9 - *v10;
      if (v9 == *v10)
      {
        v14 = 0;
        v15 = 0uLL;
      }
      else
      {
        if (v11 < 0)
          sub_19C2A18E8();
        v12 = (char *)operator new((unint64_t)v11 >> 4);
        v13 = 2 * (v11 >> 5);
        v14 = &v12[v13];
        memset_pattern16(v12, &unk_19C46E0A0, v13);
        *(_QWORD *)&v15 = v12;
        *((_QWORD *)&v15 + 1) = v14;
      }
      v36 = v15;
      if (v6 < v39)
      {
        *(_OWORD *)v6 = v15;
        *((_QWORD *)v6 + 2) = v14;
        v8 = v6 + 24;
      }
      else
      {
        v16 = (char *)__p;
        v17 = 0xAAAAAAAAAAAAAAABLL * ((v6 - (_BYTE *)__p) >> 3);
        v18 = v17 + 1;
        if (v17 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_19C2A18E8();
        if (0x5555555555555556 * ((v39 - (_BYTE *)__p) >> 3) > v18)
          v18 = 0x5555555555555556 * ((v39 - (_BYTE *)__p) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((v39 - (_BYTE *)__p) >> 3) >= 0x555555555555555)
          v19 = 0xAAAAAAAAAAAAAAALL;
        else
          v19 = v18;
        if (v19 > 0xAAAAAAAAAAAAAAALL)
          sub_19C2A143C();
        v20 = (char *)operator new(24 * v19);
        v21 = &v20[8 * ((v6 - (_BYTE *)__p) >> 3)];
        *(_OWORD *)v21 = v36;
        *((_QWORD *)v21 + 2) = v14;
        v8 = v21 + 24;
        if (v6 != v16)
        {
          v22 = v6;
          do
          {
            v23 = *(_OWORD *)(v22 - 24);
            v22 -= 24;
            *(_OWORD *)(v21 - 24) = v23;
            v21 -= 24;
            *((_QWORD *)v21 + 2) = *((_QWORD *)v22 + 2);
            *(_QWORD *)v22 = 0;
            *((_QWORD *)v22 + 1) = 0;
            *((_QWORD *)v22 + 2) = 0;
          }
          while (v22 != v16);
          __p = v21;
          v38 = v8;
          v24 = v6;
          v39 = &v20[24 * v19];
          do
          {
            v26 = (void *)*((_QWORD *)v24 - 3);
            v24 -= 24;
            v25 = v26;
            if (v26)
            {
              *((_QWORD *)v6 - 2) = v25;
              operator delete(v25);
            }
            v6 = v24;
          }
          while (v24 != v16);
          v6 = v16;
          if (!v16)
            goto LABEL_4;
LABEL_27:
          operator delete(v6);
          goto LABEL_4;
        }
        __p = &v20[24 * v17];
        v39 = &v20[24 * v19];
        if (v6)
          goto LABEL_27;
      }
LABEL_4:
      v38 = v8;
      ++v7;
      v5 = *a2;
      v6 = v8;
    }
    while (v7 < 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  }
  sub_19C30F750(a4, a1, a2, &__p, a3);
  v27 = (char *)__p;
  if (__p)
  {
    v28 = v38;
    v29 = __p;
    if (v38 != __p)
    {
      v30 = v38;
      do
      {
        v32 = (void *)*((_QWORD *)v30 - 3);
        v30 -= 24;
        v31 = v32;
        if (v32)
        {
          *((_QWORD *)v28 - 2) = v31;
          operator delete(v31);
        }
        v28 = v30;
      }
      while (v30 != v27);
      v29 = __p;
    }
    v38 = v27;
    operator delete(v29);
  }
}

void sub_19C2F8120(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  sub_19C30F750(a5, a1, a2, a3, a4);
}

uint64_t sub_19C2F8278@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, unint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  void **v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  void *v14;
  void **v15;
  void **v16;
  void **v17;
  void **v18;
  void **v19;
  void *__p;
  _QWORD *v22;
  _QWORD *v23;
  int v24;
  uint64_t v25[3];

  v25[2] = *MEMORY[0x1E0C80C00];
  v8 = operator new();
  *(_QWORD *)(v8 + 176) = 0;
  *(_OWORD *)(v8 + 144) = 0u;
  *(_OWORD *)(v8 + 160) = 0u;
  *(_OWORD *)(v8 + 112) = 0u;
  *(_OWORD *)(v8 + 128) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  *(_OWORD *)(v8 + 96) = 0u;
  *(_OWORD *)(v8 + 48) = 0u;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_OWORD *)(v8 + 32) = 0u;
  *(_OWORD *)v8 = 0u;
  v25[0] = v8;
  HIBYTE(v23) = 0;
  LOBYTE(__p) = 0;
  v24 = 0;
  language_modeling::v1::CompletionStem::try_push_back(v25, (uint64_t)&__p);
  if (SHIBYTE(v23) < 0)
    operator delete(__p);
  *(_QWORD *)(v8 + 120) = 0;
  *(_QWORD *)(v8 + 128) = 0;
  v9 = (void **)operator new();
  sub_19C2E1F84((uint64_t)v9, v8);
  v25[1] = (uint64_t)v9;
  v22 = 0;
  v23 = 0;
  __p = 0;
  v10 = operator new(8uLL);
  __p = v10;
  v23 = v10 + 1;
  v11 = operator new();
  sub_19C2E1F84(v11, (uint64_t)v9);
  *v10 = v11;
  v22 = v10 + 1;
  sub_19C3092A8(a4, a1, a2, (uint64_t **)&__p, 3uLL, a3);
  v12 = __p;
  if (__p)
  {
    v13 = v22;
    v14 = __p;
    if (v22 != __p)
    {
      do
      {
        v16 = (void **)*--v13;
        v15 = v16;
        *v13 = 0;
        if (v16)
        {
          v17 = sub_19C2E25C8(v15);
          MEMORY[0x1A1AD355C](v17, 0x1030C403C62F202);
        }
      }
      while (v13 != v12);
      v14 = __p;
    }
    v22 = v12;
    operator delete(v14);
  }
  v18 = sub_19C2E25C8(v9);
  MEMORY[0x1A1AD355C](v18, 0x1030C403C62F202);
  v19 = sub_19C2E25C8((void **)v8);
  return MEMORY[0x1A1AD355C](v19, 0x1030C403C62F202);
}

void sub_19C2F8480(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void **v8;
  va_list va1;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v8 = va_arg(va2, void **);
  sub_19C2F06DC((uint64_t *)va);
  language_modeling::v1::CompletionStem::~CompletionStem((void ***)va2);
  language_modeling::v1::CompletionStem::~CompletionStem((void ***)va1);
  _Unwind_Resume(a1);
}

void sub_19C2F84C0(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x19C2F84CCLL);
  JUMPOUT(0x19C2F84F0);
}

void sub_19C2F84E4(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_19C2CDAC8(a1);
}

void sub_19C2F8500(_QWORD *a1, uint64_t *a2, uint64_t **a3, unint64_t a4, uint64_t a5)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  char v9;
  char v10;
  _QWORD *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *__p;
  _QWORD *v17;

  sub_19C3092A8(&__p, a1, a2, a3, a4, a1[11] + 2);
  v6 = __p;
  v7 = v17;
  if (__p != v17)
  {
    do
    {
      v8 = *(_QWORD *)(a5 + 24);
      if (!v8)
        sub_19C2CCC60();
      v9 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v8 + 48))(v8, v6++);
      if (v6 == v7)
        v10 = 0;
      else
        v10 = v9;
    }
    while ((v10 & 1) != 0);
    v6 = __p;
  }
  if (v6)
  {
    v11 = v17;
    v12 = v6;
    if (v17 != v6)
    {
      do
      {
        v14 = *--v11;
        v13 = v14;
        *v11 = 0;
        if (v14)
        {
          v15 = sub_19C296378(v13);
          MEMORY[0x1A1AD355C](v15, 0x1032C4057ACE4D0);
        }
      }
      while (v11 != v6);
      v12 = __p;
    }
    v17 = v6;
    operator delete(v12);
  }
}

void sub_19C2F85E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_19C2F0F74((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19C2F85F8(uint64_t a1, uint64_t a2, const void *****a3, uint64_t a4, CFDictionaryRef theDict, uint64_t a6)
{
  const __CFNumber *Value;
  const __CFNumber *v12;
  int v13;
  const __CFNumber *v14;
  const __CFNumber *v15;
  int v16;
  int v17;
  const void **v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  const __CFString *v26;
  int v27;
  unint64_t *v28;
  unint64_t v29;
  const language_modeling::v1::InlineCompletion *v30;
  const language_modeling::v1::InlineCompletion *v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  language_modeling::v1::InlineCompletion *v35;
  int64_t v36;
  uint64_t v37;
  language_modeling::v1::InlineCompletion *v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  NSObject *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  const language_modeling::v1::InlineCompletion *v47;
  language_modeling::v1::InlineCompletion *v48;
  language_modeling::v1::InlineCompletion *v49;
  NSObject *v50;
  uint64_t v51;
  char *v52;
  language_modeling::v1::InlineCompletion *v53;
  uint64_t v54;
  language_modeling::v1::InlineCompletion *v55;
  language_modeling::v1::InlineCompletion *v56;
  language_modeling::v1::InlineCompletion *v57;
  _BYTE *v58;
  int64_t v59;
  unint64_t v60;
  language_modeling::v1::InlineCompletion *v61;
  unint64_t v62;
  NSObject *v63;
  uint64_t v64;
  NSObject *v65;
  uint64_t v66;
  NSObject *v67;
  uint64_t v68;
  unint64_t v69;
  char *v70;
  unint64_t v71;
  BOOL v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  __int128 *v77;
  uint64_t v78;
  __int128 v79;
  __int128 v80;
  uint64_t v81;
  language_modeling::v1::InlineCompletion *v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  __int128 *v89;
  uint64_t v90;
  __int128 v91;
  __int128 v92;
  uint64_t v93;
  language_modeling::v1::InlineCompletion *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  language_modeling::v1::InlineCompletion *v98;
  char *v99;
  language_modeling::v1::InlineCompletion *v100;
  language_modeling::v1::InlineCompletion *v101;
  char *v102;
  char *v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  BOOL v107;
  uint64_t v108;
  uint64_t v109;
  _OWORD *v110;
  char *v111;
  uint64_t v112;
  __int128 v113;
  __int128 v114;
  uint64_t v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  _QWORD *v122;
  void *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  language_modeling::v1::InlineCompletion *v127;
  language_modeling::v1::InlineCompletion *v128;
  __int128 *v129;
  __int128 v130;
  unint64_t v131;
  const void ***v132;
  const void **v133;
  const void **v134;
  __int128 v135;
  uint64_t v136;
  uint64_t v137;
  char v138;
  char v139;
  language_modeling::v1::InlineCompletion *v140;
  void *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  _QWORD *v145;
  uint64_t v146;
  const __CFString *v147;
  uint64_t v148;
  const void ****v149;
  const void ***v150;
  const void **v151;
  const void **v152;
  __int128 v153;
  uint64_t v154;
  NSObject *v155;
  uint64_t v156;
  uint64_t v157;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  const __CFLocale *v161;
  BOOL v162;
  unint64_t *v163;
  unint64_t v164;
  uint64_t *v165;
  void **v166;
  const void ****v167;
  void ***v168;
  uint64_t v169;
  double v170;
  void **v171;
  void **v172;
  void **v173;
  BOOL v174;
  uint64_t v175;
  unsigned int v176;
  const void **v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  _QWORD *v181;
  uint64_t v182;
  uint64_t v183;
  unint64_t v184;
  uint64_t v185;
  uint64_t v186;
  const void **v187;
  __int128 v188;
  char *v189;
  const UInt8 *v190;
  CFIndex v191;
  std::__shared_weak_count *v192;
  uint64_t v193;
  std::__shared_weak_count *v194;
  std::__shared_weak_count *v195;
  uint64_t v196;
  uint64_t *v197;
  unint64_t *v198;
  unint64_t v199;
  uint64_t v200;
  _QWORD *v201;
  _QWORD *v202;
  const __CFString *v203;
  unint64_t *v204;
  unint64_t v205;
  unsigned int v206;
  unsigned int v207;
  const void ****v208;
  _BOOL4 v209;
  __n128 v210;
  _QWORD *v211;
  char v212;
  __int128 *v213;
  uint64_t v214;
  int v215;
  _DWORD *v216;
  uint64_t v217;
  uint64_t v218;
  _DWORD *v219;
  unsigned int v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  std::__shared_weak_count *v226;
  unint64_t *v227;
  unint64_t v228;
  uint64_t v229;
  uint64_t v230;
  std::__shared_weak_count *v231;
  unint64_t *v232;
  unint64_t v233;
  uint64_t v234;
  std::__shared_weak_count *v235;
  unint64_t *v236;
  unint64_t v237;
  std::__shared_weak_count *v238;
  unint64_t *v239;
  unint64_t v240;
  uint64_t v241;
  std::recursive_mutex *v242;
  uint64_t v243;
  int v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  const void **v248;
  __int128 v249;
  uint64_t v250;
  uint64_t v251;
  const std::string::value_type *v252;
  std::string::size_type v253;
  uint64_t v254;
  std::string *v255;
  uint64_t v256;
  _QWORD *v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  _QWORD *v261;
  _QWORD *v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  const void **v266;
  __int128 v267;
  unint64_t v268;
  char *v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  unsigned int v274;
  uint64_t v275;
  _QWORD *v276;
  uint64_t v277;
  unint64_t v278;
  char *v279;
  uint64_t v280;
  uint64_t v281;
  unint64_t v282;
  char *v283;
  unint64_t v284;
  unint64_t v285;
  char *v286;
  char *v287;
  uint64_t v288;
  uint64_t v289;
  char *v290;
  char *v291;
  uint64_t v292;
  __int128 v293;
  __int128 v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t *v299;
  uint64_t *v300;
  uint64_t *v301;
  uint64_t v302;
  uint64_t *v303;
  uint64_t *v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  char *v308;
  char v309;
  char v310;
  char *v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  _QWORD *i;
  unint64_t v316;
  _QWORD *v317;
  uint64_t v318;
  unsigned int v319;
  BOOL v320;
  _QWORD *v321;
  _QWORD **v322;
  void *exception;
  const void ****v324;
  int64x2_t v325;
  uint64_t v326;
  _QWORD *v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t *v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  unint64_t v334;
  __int128 v335;
  int64_t v336;
  int64_t v337;
  _BYTE *cf;
  CFTypeRef cfa;
  const __CFString *cfb;
  int v341;
  uint64_t v342;
  unint64_t v343;
  unint64_t v344;
  unint64_t v345;
  uint64_t v346;
  uint64_t v347;
  int v348[2];
  std::string v349;
  void *__p;
  language_modeling::v1::InlineCompletion *v351;
  char *v352;
  _QWORD v353[2];
  uint64_t v354;
  void *v355;
  __int128 v356;
  void *v357;
  __int128 v358;
  uint64_t v359;
  _QWORD *v360;
  __int128 v361;
  uint64_t v362;
  CFStringRef v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  std::__shared_weak_count *v368;
  __int128 v369;
  __int128 v370;
  __int128 v371;
  __int128 v372;
  uint64_t v373;
  std::__shared_weak_count *v374;
  uint64_t v375;
  std::__shared_weak_count *v376;
  unsigned int v377;
  _BYTE v378[24];
  _BYTE *v379;
  _QWORD v380[3];
  _QWORD *v381;
  __int128 __dst;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  __int128 v386;
  uint64_t v387;
  __int128 *v388;
  _BYTE buf[32];
  char v390;
  __int128 v391;
  uint64_t v392;
  __int128 v393;
  unint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  __int16 v398;
  int v399;
  uint64_t v400;

  *(_QWORD *)v348 = a2;
  v400 = *MEMORY[0x1E0C80C00];
  if (!CFDictionaryContainsKey(theDict, CFSTR("minWordsPerPredictionKey")))
  {
    if (qword_1EDB97228 != -1)
      dispatch_once(&qword_1EDB97228, &unk_1E3D3ABD0);
    v50 = qword_1EDB97220;
    if (os_log_type_enabled((os_log_t)qword_1EDB97220, OS_LOG_TYPE_ERROR))
    {
      sub_19C34EA3C((char **)&__dst, CFSTR("minWordsPerPredictionKey"));
      v51 = __dst;
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = __dst;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = 1;
      _os_log_error_impl(&dword_19C291000, v50, OS_LOG_TYPE_ERROR, "Options dictionary does not contain required: %s key. Will default to %zu", buf, 0x16u);
      if (v51)
        MEMORY[0x1A1AD3538](v51, 0x1000C8077774924);
    }
    __assert_rtn("extractWordsPerPrediction", "TokenIDLanguageModelSession.cpp", 621, "false");
  }
  Value = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("minWordsPerPredictionKey"));
  v12 = sub_19C443664(Value);
  if (!((unint64_t)v12 >> 32))
  {
    __cxa_allocate_exception(0x10uLL);
    sub_19C32EC04();
  }
  v13 = (int)v12;
  if ((int)v12 <= 0)
  {
    if (qword_1EDB97228 != -1)
      dispatch_once(&qword_1EDB97228, &unk_1E3D3ABD0);
    v63 = qword_1EDB97220;
    if (os_log_type_enabled((os_log_t)qword_1EDB97220, OS_LOG_TYPE_ERROR))
    {
      sub_19C34EA3C((char **)&__dst, CFSTR("minWordsPerPredictionKey"));
      v64 = __dst;
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = __dst;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v13;
      *(_WORD *)&buf[18] = 2048;
      *(_QWORD *)&buf[20] = 1;
      _os_log_error_impl(&dword_19C291000, v63, OS_LOG_TYPE_ERROR, "%s has negative or zero value  %d, but needs to be positive, Will default to %zu", buf, 0x1Cu);
      if (v64)
        MEMORY[0x1A1AD3538](v64, 0x1000C8077774924);
    }
    __assert_rtn("extractWordsPerPrediction", "TokenIDLanguageModelSession.cpp", 631, "false");
  }
  if (!CFDictionaryContainsKey(theDict, CFSTR("maxWordsPerPredictionKey")))
  {
    if (qword_1EDB97228 != -1)
      dispatch_once(&qword_1EDB97228, &unk_1E3D3ABD0);
    v65 = qword_1EDB97220;
    if (os_log_type_enabled((os_log_t)qword_1EDB97220, OS_LOG_TYPE_ERROR))
    {
      sub_19C34EA3C((char **)&__dst, CFSTR("maxWordsPerPredictionKey"));
      v66 = __dst;
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = __dst;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = 3;
      _os_log_error_impl(&dword_19C291000, v65, OS_LOG_TYPE_ERROR, "Options dictionary does not contain required: %s key. Will default to %zu", buf, 0x16u);
      if (v66)
        MEMORY[0x1A1AD3538](v66, 0x1000C8077774924);
    }
    __assert_rtn("extractWordsPerPrediction", "TokenIDLanguageModelSession.cpp", 638, "false");
  }
  v14 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("maxWordsPerPredictionKey"));
  v15 = sub_19C443664(v14);
  if (!((unint64_t)v15 >> 32))
  {
    __cxa_allocate_exception(0x10uLL);
    sub_19C32EC04();
  }
  v16 = (int)v15;
  if ((int)v15 <= 0)
  {
    if (qword_1EDB97228 != -1)
      dispatch_once(&qword_1EDB97228, &unk_1E3D3ABD0);
    v67 = qword_1EDB97220;
    if (os_log_type_enabled((os_log_t)qword_1EDB97220, OS_LOG_TYPE_ERROR))
    {
      sub_19C34EA3C((char **)&__dst, CFSTR("maxWordsPerPredictionKey"));
      v68 = __dst;
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = __dst;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v16;
      *(_WORD *)&buf[18] = 2048;
      *(_QWORD *)&buf[20] = 3;
      _os_log_error_impl(&dword_19C291000, v67, OS_LOG_TYPE_ERROR, "%s has negative or zero value  %d, but needs to be positive, Will default to %zu", buf, 0x1Cu);
      if (v68)
        MEMORY[0x1A1AD3538](v68, 0x1000C8077774924);
    }
    __assert_rtn("extractWordsPerPrediction", "TokenIDLanguageModelSession.cpp", 648, "false");
  }
  v17 = CFDictionaryContainsKey(theDict, CFSTR("applyProbabilityThreshold"));
  v18 = (const void **)MEMORY[0x1E0C9AE50];
  if (v17)
    byte_1EE41B1B8 = CFDictionaryGetValue(theDict, CFSTR("applyProbabilityThreshold")) == *v18;
  if (CFDictionaryContainsKey(theDict, CFSTR("matchPhraseLexiconAfterBeamSearch")))
    word_1EE41C4AA = (CFDictionaryGetValue(theDict, CFSTR("matchPhraseLexiconAfterBeamSearch")) == *v18) | 0x100;
  if (CFDictionaryContainsKey(theDict, CFSTR("usePrefixProbabilityForBeamSearch")))
    byte_1EE41B1B9 = CFDictionaryGetValue(theDict, CFSTR("usePrefixProbabilityForBeamSearch")) == *v18;
  memset(&v349, 0, sizeof(v349));
  v19 = operator new(0x20uLL);
  *v19 = &off_1E3D30C10;
  v19[1] = &v349;
  v19[2] = a4;
  v19[3] = a1;
  v379 = v19;
  v20 = v13;
  v21 = v16;
  v22 = *(_DWORD *)(a1 + 48);
  v351 = 0;
  v352 = 0;
  __p = 0;
  v354 = 0;
  if (*(_QWORD *)(a1 + 144))
  {
    v23 = *(std::__shared_weak_count **)(a1 + 152);
    v353[0] = *(_QWORD *)(a1 + 144);
    v353[1] = v23;
    if (v23)
    {
      p_shared_owners = (unint64_t *)&v23->__shared_owners_;
      do
        v25 = __ldxr(p_shared_owners);
      while (__stxr(v25 + 1, p_shared_owners));
    }
    if (CFDictionaryContainsKey(theDict, CFSTR("multiWordPredictionTypeKey"))
      && (v26 = (const __CFString *)CFDictionaryGetValue(theDict, CFSTR("multiWordPredictionTypeKey")),
          CFStringCompare(v26, CFSTR("multiWordPredictionTypeOpenEnded"), 0)))
    {
      if (CFStringCompare(v26, CFSTR("multiWordPredictionTypeStaticPhraseLexicon"), 0))
      {
        if (qword_1EDB97228 != -1)
          dispatch_once(&qword_1EDB97228, &unk_1E3D3ABD0);
        v155 = qword_1EDB97220;
        if (os_log_type_enabled((os_log_t)qword_1EDB97220, OS_LOG_TYPE_ERROR))
        {
          sub_19C34EA3C((char **)&v369, v26);
          v156 = v369;
          LODWORD(__dst) = 136315138;
          *(_QWORD *)((char *)&__dst + 4) = v369;
          _os_log_error_impl(&dword_19C291000, v155, OS_LOG_TYPE_ERROR, "Unsupported  type: %s - will fail with assert or default to OpenEnded policy", (uint8_t *)&__dst, 0xCu);
          if (v156)
            MEMORY[0x1A1AD3538](v156, 0x1000C8077774924);
        }
        __assert_rtn("extractMultiWordPredictionType", "ToucanLanguageModelSession.cpp", 917, "false");
      }
      v27 = 1;
    }
    else
    {
      v27 = 0;
    }
    sub_19C2FF058(buf, a1, *(uint64_t **)v348, a3, &v354, (uint64_t)v353, v20, v21, v27, &v349, a6);
    if (v23)
    {
      v28 = (unint64_t *)&v23->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    v341 = v22;
    v344 = v21;
    v346 = v20;
    v31 = *(const language_modeling::v1::InlineCompletion **)buf;
    v30 = *(const language_modeling::v1::InlineCompletion **)&buf[8];
    v32 = *(_QWORD *)&buf[8] - *(_QWORD *)buf;
    if ((uint64_t)(*(_QWORD *)&buf[8] - *(_QWORD *)buf) < 1)
      goto LABEL_133;
    v33 = v32 >> 3;
    v34 = (int64_t)__p;
    v35 = v351;
    v36 = v351 - (language_modeling::v1::InlineCompletion *)__p;
    v37 = (v351 - (language_modeling::v1::InlineCompletion *)__p) >> 3;
    v38 = (language_modeling::v1::InlineCompletion *)((char *)__p
                                                    + ((v351 - (language_modeling::v1::InlineCompletion *)__p) & 0xFFFFFFFFFFFFFFF8));
    if (v32 >> 3 > (v352 - (char *)v351) >> 3)
    {
      v39 = v37 + v33;
      if ((unint64_t)(v37 + v33) >> 61)
        sub_19C2A18E8();
      v40 = v352 - (_BYTE *)__p;
      if ((v352 - (_BYTE *)__p) >> 2 > v39)
        v39 = v40 >> 2;
      if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8)
        v41 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v41 = v39;
      v336 = v351 - (language_modeling::v1::InlineCompletion *)__p;
      cf = __p;
      v334 = v41;
      if (v41)
      {
        if (v41 >> 61)
          sub_19C2A143C();
        v42 = (char *)operator new(8 * v41);
        v33 = v32 >> 3;
      }
      else
      {
        v42 = 0;
      }
      v329 = v33;
      v332 = v37;
      v52 = v42;
      v53 = (language_modeling::v1::InlineCompletion *)&v42[8 * v37];
      v54 = 8 * v33;
      v55 = (language_modeling::v1::InlineCompletion *)((char *)v53 + 8 * v33);
      v56 = v53;
      do
      {
        v56 = (language_modeling::v1::InlineCompletion *)((char *)language_modeling::v1::InlineCompletion::InlineCompletion(v56, v31)+ 8);
        v31 = (const language_modeling::v1::InlineCompletion *)((char *)v31 + 8);
        v54 -= 8;
      }
      while (v54);
      v57 = (language_modeling::v1::InlineCompletion *)__p;
      if (__p == v38)
      {
        v59 = v336;
        v58 = cf;
        v62 = v334;
      }
      else
      {
        v59 = v336;
        v58 = cf;
        v60 = &cf[v336 & 0xFFFFFFFFFFFFFFF8] - (_BYTE *)__p - 8;
        if (v60 >= 0x78)
        {
          v69 = (v336 & 0xFFFFFFFFFFFFFFF8) - (v60 & 0xFFFFFFFFFFFFFFF8) - 8;
          v70 = &cf[v69];
          v71 = (unint64_t)&v52[v69];
          v72 = v70 >= (char *)v53 || v71 >= (unint64_t)v38;
          v61 = v38;
          v62 = v334;
          if (v72)
          {
            v73 = (v60 >> 3) + 1;
            v74 = 8 * (v73 & 0x3FFFFFFFFFFFFFFCLL);
            v61 = (language_modeling::v1::InlineCompletion *)((char *)v38 - v74);
            v53 = (language_modeling::v1::InlineCompletion *)((char *)v53 - v74);
            v75 = 8 * v332 - 16;
            v76 = &v52[v75];
            v77 = (__int128 *)&cf[v75];
            v78 = v73 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v80 = *(v77 - 1);
              v79 = *v77;
              *(v77 - 1) = 0uLL;
              *v77 = 0uLL;
              *((_OWORD *)v76 - 1) = v80;
              *(_OWORD *)v76 = v79;
              v76 -= 32;
              v77 -= 2;
              v78 -= 4;
            }
            while (v78);
            if (v73 == (v73 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_88;
          }
        }
        else
        {
          v61 = v38;
          v62 = v334;
        }
        do
        {
          v81 = *((_QWORD *)v61 - 1);
          v61 = (language_modeling::v1::InlineCompletion *)((char *)v61 - 8);
          *(_QWORD *)v61 = 0;
          *((_QWORD *)v53 - 1) = v81;
          v53 = (language_modeling::v1::InlineCompletion *)((char *)v53 - 8);
        }
        while (v61 != v57);
      }
LABEL_88:
      v82 = v351;
      if (v351 != v38)
      {
        v83 = v351 - (language_modeling::v1::InlineCompletion *)&v58[v59 & 0xFFFFFFFFFFFFFFF8] - 8;
        if (v83 < 0xA8)
          goto LABEL_489;
        v84 = (v59 & 0xFFFFFFFFFFFFFFF8) + (v83 & 0xFFFFFFFFFFFFFFF8);
        if (v38 < (language_modeling::v1::InlineCompletion *)&v52[(v32 & 0xFFFFFFFFFFFFFFF8) + 8 + v84]
          && v55 < (language_modeling::v1::InlineCompletion *)&v58[v84 + 8])
        {
          goto LABEL_489;
        }
        v86 = (v83 >> 3) + 1;
        v87 = 8 * (v86 & 0x3FFFFFFFFFFFFFFCLL);
        v38 = (language_modeling::v1::InlineCompletion *)((char *)v38 + v87);
        v55 = (language_modeling::v1::InlineCompletion *)((char *)v55 + v87);
        v88 = &v52[8 * v332 + 16 + 8 * v329];
        v89 = (__int128 *)&v58[8 * v332 + 16];
        v90 = v86 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v91 = *(v89 - 1);
          v92 = *v89;
          *(v89 - 1) = 0uLL;
          *v89 = 0uLL;
          *((_OWORD *)v88 - 1) = v91;
          *(_OWORD *)v88 = v92;
          v88 += 32;
          v89 += 2;
          v90 -= 4;
        }
        while (v90);
        if (v86 != (v86 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_489:
          do
          {
            v93 = *(_QWORD *)v38;
            *(_QWORD *)v38 = 0;
            v38 = (language_modeling::v1::InlineCompletion *)((char *)v38 + 8);
            *(_QWORD *)v55 = v93;
            v55 = (language_modeling::v1::InlineCompletion *)((char *)v55 + 8);
          }
          while (v38 != v82);
        }
        v38 = v351;
      }
      v94 = (language_modeling::v1::InlineCompletion *)__p;
      __p = v53;
      v351 = v55;
      v352 = &v52[8 * v62];
      while (v38 != v94)
      {
        v97 = *((_QWORD *)v38 - 1);
        v38 = (language_modeling::v1::InlineCompletion *)((char *)v38 - 8);
        v96 = v97;
        *(_QWORD *)v38 = 0;
        if (v97)
        {
          if (*(char *)(v96 + 287) < 0)
            operator delete(*(void **)(v96 + 264));
          v95 = sub_19C296378(v96);
          MEMORY[0x1A1AD355C](v95, 0x1032C40D90104AELL);
        }
      }
      if (v94)
        operator delete(v94);
      goto LABEL_133;
    }
    v44 = v351 - v38;
    v45 = (v351 - v38) >> 3;
    if (v45 >= v33)
    {
      v46 = *(_QWORD *)buf + 8 * v33;
      v48 = v351;
    }
    else
    {
      v46 = *(_QWORD *)buf + 8 * v45;
      if (v46 == *(_QWORD *)&buf[8])
      {
        v48 = v351;
      }
      else
      {
        v337 = v351 - (language_modeling::v1::InlineCompletion *)__p;
        cfa = __p;
        v328 = v33;
        v331 = (v351 - (language_modeling::v1::InlineCompletion *)__p) >> 3;
        v47 = (const language_modeling::v1::InlineCompletion *)(*(_QWORD *)buf + 8 * v45);
        v48 = v351;
        do
        {
          v49 = language_modeling::v1::InlineCompletion::InlineCompletion(v48, v47);
          v47 = (const language_modeling::v1::InlineCompletion *)((char *)v47 + 8);
          v48 = (language_modeling::v1::InlineCompletion *)((char *)v49 + 8);
        }
        while (v47 != v30);
        v36 = v337;
        v34 = (int64_t)cfa;
        v33 = v328;
        v37 = v331;
      }
      v351 = v48;
      if (v44 < 1)
      {
LABEL_133:
        v121 = *(_QWORD **)buf;
        v21 = v344;
        if (*(_QWORD *)buf)
        {
          v122 = *(_QWORD **)&buf[8];
          v123 = *(void **)buf;
          if (*(_QWORD *)&buf[8] != *(_QWORD *)buf)
          {
            do
            {
              v126 = *--v122;
              v125 = v126;
              *v122 = 0;
              if (v126)
              {
                if (*(char *)(v125 + 287) < 0)
                  operator delete(*(void **)(v125 + 264));
                v124 = sub_19C296378(v125);
                MEMORY[0x1A1AD355C](v124, 0x1032C40D90104AELL);
              }
            }
            while (v122 != v121);
            v123 = *(void **)buf;
          }
          *(_QWORD *)&buf[8] = v121;
          operator delete(v123);
        }
        v20 = v346;
        v22 = v341;
        goto LABEL_144;
      }
    }
    v98 = (language_modeling::v1::InlineCompletion *)((char *)v38 + 8 * v33);
    v99 = (char *)(v48 - v98);
    v100 = (language_modeling::v1::InlineCompletion *)((char *)v48 - 8 * v33);
    v101 = v48;
    if (v100 < v35)
    {
      v102 = &v99[v36 & 0xFFFFFFFFFFFFFFF8];
      v103 = &v102[v34];
      v104 = (unint64_t)&v102[v34 + 8];
      if ((unint64_t)v35 > v104)
        v104 = (unint64_t)v35;
      v105 = v104 + ~v34 - (_QWORD)v102;
      if (v105 >= 0xE8)
      {
        v106 = (unint64_t)&v103[(v105 & 0xFFFFFFFFFFFFFFF8) + 8];
        v107 = v100 >= (language_modeling::v1::InlineCompletion *)((char *)v48 + (v105 & 0xFFFFFFFFFFFFFFF8) + 8)
            || (unint64_t)v48 >= v106;
        v101 = v48;
        if (v107)
        {
          v108 = (v105 >> 3) + 1;
          v109 = 8 * (v108 & 0x3FFFFFFFFFFFFFFCLL);
          v100 = (language_modeling::v1::InlineCompletion *)((char *)v100 + v109);
          v101 = (language_modeling::v1::InlineCompletion *)((char *)v48 + v109);
          v110 = (_OWORD *)((char *)v48 + 16);
          v111 = &v99[8 * v37 + 16 + v34];
          v112 = v108 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v113 = *((_OWORD *)v111 - 1);
            v114 = *(_OWORD *)v111;
            *((_OWORD *)v111 - 1) = 0uLL;
            *(_OWORD *)v111 = 0uLL;
            *(v110 - 1) = v113;
            *v110 = v114;
            v110 += 2;
            v111 += 32;
            v112 -= 4;
          }
          while (v112);
          if (v108 == (v108 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_124;
        }
      }
      else
      {
        v101 = v48;
      }
      do
      {
        v115 = *(_QWORD *)v100;
        *(_QWORD *)v100 = 0;
        v100 = (language_modeling::v1::InlineCompletion *)((char *)v100 + 8);
        *(_QWORD *)v101 = v115;
        v101 = (language_modeling::v1::InlineCompletion *)((char *)v101 + 8);
      }
      while (v100 < v35);
    }
LABEL_124:
    v351 = v101;
    if (v48 != v98)
    {
      v116 = (uint64_t *)((char *)v48 - 8);
      v117 = v34 + 8 * v37 - 8;
      do
      {
        v119 = *(_QWORD *)&v99[v117];
        *(_QWORD *)&v99[v117] = 0;
        v120 = *v116;
        *v116 = v119;
        if (v120)
        {
          if (*(char *)(v120 + 287) < 0)
            operator delete(*(void **)(v120 + 264));
          v118 = sub_19C296378(v120);
          MEMORY[0x1A1AD355C](v118, 0x1032C40D90104AELL);
        }
        --v116;
        v99 -= 8;
      }
      while (v99);
    }
    if ((const language_modeling::v1::InlineCompletion *)v46 != v31)
    {
      do
      {
        language_modeling::v1::InlineCompletion::operator=((uint64_t *)v38, (uint64_t *)v31);
        v31 = (const language_modeling::v1::InlineCompletion *)((char *)v31 + 8);
        v38 = (language_modeling::v1::InlineCompletion *)((char *)v38 + 8);
      }
      while (v31 != (const language_modeling::v1::InlineCompletion *)v46);
    }
    goto LABEL_133;
  }
  if (qword_1EDB97228 != -1)
    dispatch_once(&qword_1EDB97228, &unk_1E3D3ABD0);
  v43 = qword_1EDB97220;
  if (os_log_type_enabled((os_log_t)qword_1EDB97220, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_19C291000, v43, OS_LOG_TYPE_ERROR, "A Static MultiWordPredictor does not exist for the current locale or was not enabled.", buf, 2u);
  }
LABEL_144:
  if (*(_QWORD *)(a1 + 160))
    sub_19C302064(a1, **(_QWORD **)v348, a3, (uint64_t)&v354, v21, &v349, &__p);
  if (v22)
    goto LABEL_148;
  if (__p != v351)
    goto LABEL_148;
  if (!CFDictionaryContainsKey(theDict, CFSTR("personalizedInlineCompletionsKey")))
    goto LABEL_148;
  v147 = (const __CFString *)CFDictionaryGetValue(theDict, CFSTR("personalizedInlineCompletionsKey"));
  if (!sub_19C29CB48(v147, 0))
    goto LABEL_148;
  v148 = *(_QWORD *)(a1 + 176);
  v149 = *a3;
  v150 = **a3;
  v152 = v150[3];
  v151 = v150[4];
  if (v152 == v151)
  {
    buf[23] = 0;
    buf[0] = 0;
    goto LABEL_200;
  }
  if ((*((char *)v151 - 9) & 0x80000000) == 0)
  {
    v153 = *((_OWORD *)v151 - 2);
    *(_QWORD *)&buf[16] = *(v151 - 2);
    *(_OWORD *)buf = v153;
LABEL_200:
    v154 = v148;
    goto LABEL_208;
  }
  sub_19C2B5238(buf, (void *)*(v151 - 4), (unint64_t)*(v151 - 3));
  v154 = *(_QWORD *)(a1 + 176);
LABEL_208:
  v157 = *(_QWORD *)(v154 + 72);
  v158 = *(std::__shared_weak_count **)(v154 + 80);
  *(_QWORD *)&__dst = v157;
  *((_QWORD *)&__dst + 1) = v158;
  if (v158)
  {
    v159 = (unint64_t *)&v158->__shared_owners_;
    do
      v160 = __ldxr(v159);
    while (__stxr(v160 + 1, v159));
  }
  v161 = (const __CFLocale *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v157 + 64))(v157);
  v162 = sub_19C3E3B40((uint64_t)buf, v161);
  if (v158)
  {
    v163 = (unint64_t *)&v158->__shared_owners_;
    do
      v164 = __ldaxr(v163);
    while (__stlxr(v164 - 1, v163));
    if (!v164)
    {
      ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
      std::__shared_weak_count::__release_weak(v158);
    }
  }
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  v345 = v21;
  v347 = v20;
  if (v162)
  {
    v165 = (uint64_t *)*v149;
    v166 = (void **)operator new();
    v342 = v148;
    sub_19C2E1F84((uint64_t)v166, (uint64_t)v165);
    v167 = v149;
    *(_QWORD *)&__dst = v166;
    memset(buf, 0, 24);
    v168 = (void ***)operator new(8uLL);
    *(_QWORD *)buf = v168;
    *(_QWORD *)&buf[16] = v168 + 1;
    v169 = operator new();
    sub_19C2E1F84(v169, (uint64_t)v166);
    *v168 = (void **)v169;
    *(_QWORD *)&buf[8] = v168 + 1;
    v170 = sub_19C2FBB90(a1, *(void **)(**(_QWORD **)v348 + 24), *(_QWORD *)(**(_QWORD **)v348 + 32), (uint64_t **)buf, (uint64_t)&v354, 0);
    v171 = *v168;
    *v168 = 0;
    v149 = v167;
    if (v171)
    {
      v172 = sub_19C2E25C8(v171);
      MEMORY[0x1A1AD355C](v172, 0x1030C403C62F202);
    }
    operator delete(v168);
    v173 = sub_19C2E25C8(v166);
    MEMORY[0x1A1AD355C](v173, 0x1030C403C62F202);
    v174 = v170 > -3.29999995;
    v148 = v342;
  }
  else
  {
    v174 = 0;
  }
  v380[0] = &off_1E3D30BB8;
  v380[1] = &__p;
  v381 = v380;
  v175 = **(_QWORD **)v348;
  v176 = *(unsigned __int16 *)(v148 + 8);
  v178 = (uint64_t)**v149;
  v177 = (*v149)[1];
  v359 = (uint64_t)(*(_QWORD *)(**(_QWORD **)v348 + 8) - ***(_QWORD ***)v348) >> 5;
  v360 = (_QWORD *)v175;
  v179 = (uint64_t)v177 - v178;
  if (v179)
  {
    v180 = 32 * (v179 >> 5);
    do
    {
      sub_19C315DCC(v175, v178);
      v178 += 32;
      v180 -= 32;
    }
    while (v180);
  }
  *(_QWORD *)buf = &off_1E3D30E78;
  *(_QWORD *)&buf[8] = v148;
  *(_QWORD *)&buf[24] = buf;
  sub_19C3168D8(v175, v176, (uint64_t)buf);
  v181 = *(_QWORD **)&buf[24];
  if (*(_BYTE **)&buf[24] == buf)
  {
    v182 = 4;
    v181 = buf;
  }
  else
  {
    if (!*(_QWORD *)&buf[24])
      goto LABEL_231;
    v182 = 5;
  }
  (*(void (**)(void))(*v181 + 8 * v182))();
LABEL_231:
  sub_19C43B21C((int32x2_t **)&__dst, v175, *(_QWORD *)(v148 + 72), v176, *(unsigned __int16 *)(v148 + 8));
  v183 = __dst;
  *(_QWORD *)v348 = v384;
  v184 = v385 - 1;
  if (!v385)
    v184 = 0;
  v343 = v184;
  v357 = 0;
  v358 = 0uLL;
  if (!v174)
  {
    v189 = 0;
    goto LABEL_366;
  }
  if (*((_QWORD *)&__dst + 1) == (_QWORD)__dst)
    v185 = 0;
  else
    v185 = ((uint64_t)(*((_QWORD *)&__dst + 1) - __dst) >> 2) - 1;
  *((_QWORD *)&v335 + 1) = v185;
  v364 = 0;
  v365 = 0;
  v366 = 0;
  v186 = *(_QWORD *)(v148 + 72);
  v187 = (*v149)[4];
  if ((*v149)[3] == v187)
  {
    HIBYTE(v362) = 0;
    LOBYTE(v361) = 0;
  }
  else if (*((char *)v187 - 9) < 0)
  {
    sub_19C2B5238(&v361, (void *)*(v187 - 4), (unint64_t)*(v187 - 3));
  }
  else
  {
    v188 = *((_OWORD *)v187 - 2);
    v362 = (uint64_t)*(v187 - 2);
    v361 = v188;
  }
  if (v362 >= 0)
    v190 = (const UInt8 *)&v361;
  else
    v190 = (const UInt8 *)v361;
  if (v362 >= 0)
    v191 = HIBYTE(v362);
  else
    v191 = *((_QWORD *)&v361 + 1);
  v363 = CFStringCreateWithBytes(0, v190, v191, 0x8000100u, 0);
  cfb = v363;
  if (!v363)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1A1AD3154](exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v193 = *(_QWORD *)(v186 + 8);
  v192 = *(std::__shared_weak_count **)(v186 + 16);
  v367 = v193;
  if (!v192 || (v194 = std::__shared_weak_count::lock(v192), (v368 = v194) == 0))
    sub_19C31AF2C();
  v195 = v194;
  v196 = operator new();
  v197 = (uint64_t *)v196;
  *(_QWORD *)&v335 = v183;
  *(_QWORD *)v196 = &off_1E3D36CD0;
  *(_QWORD *)(v196 + 8) = v193;
  *(_QWORD *)(v196 + 16) = v195;
  v198 = (unint64_t *)&v195->__shared_owners_;
  do
    v199 = __ldxr(v198);
  while (__stxr(v199 + 1, v198));
  v200 = *(_QWORD *)(v196 + 8);
  *(_QWORD *)(v196 + 24) = 0;
  *(_QWORD *)(v196 + 64) = 0;
  *(_QWORD *)(v196 + 56) = v196 + 64;
  v330 = (uint64_t *)(v196 + 56);
  v333 = v200;
  *(_QWORD *)(v196 + 32) = 0;
  *(_QWORD *)(v196 + 40) = 0;
  *(_BYTE *)(v196 + 48) = 0;
  *(_QWORD *)(v196 + 72) = 0;
  *(_QWORD *)(v196 + 80) = v196 + 64;
  *(_QWORD *)v196 = &off_1E3D37588;
  v201 = *(_QWORD **)(v200 + 304);
  if (!v201
    || !sub_19C3AC070(*(_QWORD **)(v200 + 304))
    || (v327 = sub_19C3AA674(v201, v335, *((unint64_t *)&v335 + 1), cfb, 0, 1)) == 0)
  {
    v203 = cfb;
    goto LABEL_259;
  }
  v326 = 0;
  v377 = 0;
  v325 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  v202 = v327;
  v324 = v149;
  while ((*(unsigned int (**)(_QWORD *))(*v202 + 16))(v202))
  {
    *(int64x2_t *)buf = v325;
    *(_QWORD *)&buf[16] = 0;
    *(_WORD *)&buf[24] = 0;
    v390 = 1;
    v391 = xmmword_19C46DE10;
    LODWORD(v392) = 0;
    v393 = xmmword_19C46DE10;
    v394 = 0xFFEFFFFFFFFFFFFFLL;
    v399 = 0;
    v396 = 0;
    v397 = 0;
    v395 = 0;
    v398 = 0;
    v216 = operator new(4uLL);
    *v216 = 0;
    v217 = (*(uint64_t (**)(_QWORD *, _DWORD *, _BYTE *))(*v202 + 24))(v202, v216, buf);
    if (v217)
    {
      v218 = 4 * v217;
      v219 = v216;
      while (*v219)
      {
        ++v219;
        v218 -= 4;
        if (!v218)
          goto LABEL_284;
      }
      operator delete(v216);
LABEL_325:
      v203 = cfb;
      goto LABEL_326;
    }
LABEL_284:
    v220 = *v216;
    (*(void (**)(__int128 *__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(v333 + 304) + 16) + 32))(&v386, *(_QWORD *)(*(_QWORD *)(v333 + 304) + 16), *v216);
    if (SHIBYTE(v387) < 0)
    {
      v221 = *((_QWORD *)&v386 + 1);
      if (*((_QWORD *)&v386 + 1) <= 2uLL)
        goto LABEL_290;
      v222 = v386;
    }
    else
    {
      v221 = HIBYTE(v387);
      if (HIBYTE(v387) <= 2u)
        goto LABEL_290;
      v222 = (uint64_t)&v386;
    }
    if (*(_WORD *)(v221 + v222 - 2) != 29479)
    {
LABEL_290:
      v223 = v197[1];
      if (*(_BYTE *)(*(_QWORD *)(v223 + 232) + 192))
      {
        v224 = *(_QWORD *)(v223 + 48);
        v225 = *(_QWORD *)(v224 + 560);
        v226 = *(std::__shared_weak_count **)(v224 + 568);
        v375 = v225;
        v376 = v226;
        if (v226)
        {
          v227 = (unint64_t *)&v226->__shared_owners_;
          do
            v228 = __ldxr(v227);
          while (__stxr(v228 + 1, v227));
          v223 = v197[1];
        }
      }
      else
      {
        v225 = 0;
        v375 = 0;
        v376 = 0;
      }
      v229 = *(_QWORD *)(v223 + 48);
      v230 = *(_QWORD *)(v229 + 560);
      v231 = *(std::__shared_weak_count **)(v229 + 568);
      v373 = v230;
      v374 = v231;
      if (v231)
      {
        v232 = (unint64_t *)&v231->__shared_owners_;
        do
          v233 = __ldxr(v232);
        while (__stxr(v233 + 1, v232));
      }
      v234 = (*(uint64_t (**)(uint64_t, __int128 *, _QWORD))(*(_QWORD *)v230 + 24))(v230, &v386, 0);
      HIDWORD(v326) = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v225 + 208))(v225, v234);
      v235 = v374;
      if (v374)
      {
        v236 = (unint64_t *)&v374->__shared_owners_;
        do
          v237 = __ldaxr(v236);
        while (__stlxr(v237 - 1, v236));
        if (!v237)
        {
          ((void (*)(std::__shared_weak_count *))v235->__on_zero_shared)(v235);
          std::__shared_weak_count::__release_weak(v235);
        }
      }
      v238 = v376;
      if (v376)
      {
        v239 = (unint64_t *)&v376->__shared_owners_;
        do
          v240 = __ldaxr(v239);
        while (__stlxr(v240 - 1, v239));
        if (!v240)
        {
          ((void (*)(std::__shared_weak_count *))v238->__on_zero_shared)(v238);
          std::__shared_weak_count::__release_weak(v238);
        }
      }
      v241 = v197[1];
      v242 = *(std::recursive_mutex **)(v241 + 464);
      if (v242)
      {
        v243 = sub_19C3BDFF4(*(std::recursive_mutex **)(v241 + 464), (uint64_t)&v386);
        HIDWORD(v326) += sub_19C3BE52C(v242, v243);
      }
      LODWORD(v326) = v326 + 1;
      if (v326 <= 1)
      {
        v244 = 0;
        v377 = v220;
      }
      else
      {
        v244 = 1;
      }
      goto LABEL_315;
    }
    v244 = 2;
LABEL_315:
    v202 = v327;
    if (SHIBYTE(v387) < 0)
      operator delete((void *)v386);
    operator delete(v216);
    v215 = v244 | 2;
    v149 = v324;
    if (v215 != 2)
      goto LABEL_325;
  }
  v319 = v377;
  if (v377)
    v320 = HIDWORD(v326) == 0;
  else
    v320 = 1;
  v203 = cfb;
  if (!v320)
  {
    *(int64x2_t *)buf = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
    *(_QWORD *)&buf[16] = 0;
    *(_WORD *)&buf[24] = 0;
    v390 = 1;
    v391 = xmmword_19C46DE10;
    LODWORD(v392) = 0;
    v393 = xmmword_19C46DE10;
    v395 = 0;
    v396 = 0;
    v394 = 0xFFEFFFFFFFFFFFFFLL;
    if (v377 - 3 > 0x1F0 || v377 - 68 <= 0x3C && ((0x7FFFFFFFFFFFFE0uLL >> (v377 - 68)) & 1) == 0)
    {
      v321 = (_QWORD *)v197[1];
      v322 = (_QWORD **)v321[23];
      if (v321[24] - (_QWORD)v322 != 16)
        goto LABEL_472;
      if ((sub_19C32FB3C(v197[1], (uint64_t)&v377, 1, 0, 0, 0, 1, *v322) & 1) == 0)
      {
        v321 = (_QWORD *)v197[1];
        v319 = v377;
LABEL_472:
        v371 = 0u;
        v372 = 0u;
        v369 = 0u;
        v370 = 0u;
        if (qword_1EDB97100 != -1)
          dispatch_once(&qword_1EDB97100, &unk_1E3D3BED0);
        v203 = cfb;
        if (sub_19C32DC1C(v321, v319, (uint64_t)&v369, (uint64_t)buf, qword_1EDB970F8))
        {
          *(_QWORD *)&v386 = *(_QWORD *)buf;
          *((_QWORD *)&v386 + 1) = v377 | 0x400000000;
          sub_19C3B3E10(v330, (uint64_t)&v386);
          v197[10] = (uint64_t)(v197 + 8);
          v203 = cfb;
        }
      }
    }
  }
  v202 = v327;
LABEL_326:
  (*(void (**)(_QWORD *))(*v202 + 8))(v202);
  v195 = v368;
  if (v368)
  {
LABEL_259:
    v204 = (unint64_t *)&v195->__shared_owners_;
    do
      v205 = __ldaxr(v204);
    while (__stlxr(v205 - 1, v204));
    if (!v205)
    {
      ((void (*)(std::__shared_weak_count *))v195->__on_zero_shared)(v195);
      std::__shared_weak_count::__release_weak(v195);
    }
  }
  CFRelease(v203);
  if (SHIBYTE(v362) < 0)
    operator delete((void *)v361);
  v356 = 0uLL;
  v355 = 0;
  LODWORD(v373) = 0;
  while ((*(unsigned int (**)(uint64_t *))(*v197 + 16))(v197))
  {
    *(_DWORD *)buf = 0;
    v206 = (*(uint64_t (**)(uint64_t *, _QWORD, _BYTE *))(*v197 + 24))(v197, 0, buf);
    if (*(_DWORD *)buf == 4)
    {
      v207 = v206;
      LODWORD(v373) = v206;
      goto LABEL_270;
    }
  }
  v207 = v373;
LABEL_270:
  if (v207)
  {
    v208 = v149;
    v209 = 0;
    *(int64x2_t *)buf = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
    *(_QWORD *)&buf[16] = 0;
    *(_WORD *)&buf[24] = 0;
    v390 = 1;
    v210 = (__n128)xmmword_19C46DE10;
    v391 = xmmword_19C46DE10;
    LODWORD(v392) = 0;
    v393 = xmmword_19C46DE10;
    v395 = 0;
    v396 = 0;
    v394 = 0xFFEFFFFFFFFFFFFFLL;
    v211 = *(_QWORD **)(v148 + 72);
    if (*(_DWORD *)(v148 + 40) != 3)
      v209 = *(_BYTE *)(v211[29] + 192) != 0;
    v369 = v335;
    v370 = v335;
    v371 = v335;
    v372 = v335;
    if (qword_1EDB97100 != -1)
      dispatch_once(&qword_1EDB97100, &unk_1E3D3BED0);
    v388 = 0;
    v212 = sub_19C32DD08(v211, v207 | ((unint64_t)v207 << 32), (uint64_t *)&v369, (uint64_t)buf, qword_1EDB970F8, v209, 0, &v386, v210);
    v213 = v388;
    v149 = v208;
    if (v388 == &v386)
    {
      v214 = 4;
      v213 = &v386;
LABEL_318:
      (*(void (**)(void))(*(_QWORD *)v213 + 8 * v214))();
    }
    else if (v388)
    {
      v214 = 5;
      goto LABEL_318;
    }
    if ((v212 & 1) == 0)
      __assert_rtn("_contactNameCompletions", "TokenIDLanguageModelSession.cpp", 896, "success");
    v245 = *(_QWORD *)(v148 + 72);
    v246 = *(_QWORD *)&buf[16];
    LODWORD(v375) = 7;
    v247 = (uint64_t)(*v208)[15];
    v248 = (*v208)[4];
    if ((*v208)[3] == v248)
    {
      HIBYTE(v387) = 0;
      LOBYTE(v386) = 0;
    }
    else if (*((char *)v248 - 9) < 0)
    {
      sub_19C2B5238(&v386, (void *)*(v248 - 4), (unint64_t)*(v248 - 3));
    }
    else
    {
      v249 = *((_OWORD *)v248 - 2);
      v387 = (uint64_t)*(v248 - 2);
      v386 = v249;
    }
    sub_19C4406E4((char **)&v361, (unsigned int *)&v373, 1, (uint64_t)buf, v245, v148 + 16, v246, (int *)&v375, v247, &v386);
    if (SHIBYTE(v387) < 0)
      operator delete((void *)v386);
    v250 = v361;
    if ((_QWORD)v361)
    {
      if (qword_1EE41C070 != -1)
        dispatch_once(&qword_1EE41C070, &unk_1E3D3CA78);
      v251 = v250;
      if (*(char *)(v250 + 23) < 0)
        v251 = *(_QWORD *)v250;
      sub_19C34EC30("Generated contact name completion='%s', score=%f", (uint64_t)&v386, v251, *(_QWORD *)(v250 + 48));
      if (v387 >= 0)
        v252 = (const std::string::value_type *)&v386;
      else
        v252 = (const std::string::value_type *)v386;
      if (v387 >= 0)
        v253 = HIBYTE(v387);
      else
        v253 = *((_QWORD *)&v386 + 1);
      std::string::append(&v349, v252, v253);
      if (SHIBYTE(v349.__r_.__value_.__r.__words[2]) < 0)
      {
        if (v349.__r_.__value_.__l.__size_)
        {
          v255 = (std::string *)v349.__r_.__value_.__r.__words[0];
          if (!*(_BYTE *)(v349.__r_.__value_.__r.__words[0] + v349.__r_.__value_.__l.__size_ - 1))
          {
            v254 = --v349.__r_.__value_.__l.__size_;
LABEL_349:
            v255->__r_.__value_.__s.__data_[v254] = 0;
          }
        }
      }
      else if (*((_BYTE *)&v349.__r_.__value_.__s + 23)
             && !v349.__r_.__value_.__s.__data_[HIBYTE(v349.__r_.__value_.__r.__words[2]) - 1])
      {
        v254 = HIBYTE(v349.__r_.__value_.__r.__words[2]) - 1;
        --*((_BYTE *)&v349.__r_.__value_.__s + 23);
        v255 = &v349;
        goto LABEL_349;
      }
      std::string::push_back(&v349, 10);
      if (SHIBYTE(v387) < 0)
        operator delete((void *)v386);
      LODWORD(v367) = 0;
      sub_19C307444(&v375, (__int128 *)v250, (int *)&v367, (uint64_t)&v349);
      v256 = v375;
      v375 = 0;
      *(_QWORD *)&v386 = v256;
      v257 = sub_19C307614(&v355, (uint64_t *)&v386);
      v258 = v386;
      *(_QWORD *)&v356 = v257;
      if ((_QWORD)v386)
      {
        if (*(char *)(v386 + 287) < 0)
          operator delete(*(void **)(v386 + 264));
        v259 = sub_19C296378(v258);
        MEMORY[0x1A1AD355C](v259, 0x1032C40D90104AELL);
      }
      v375 = 0;
      v260 = sub_19C296378(v250);
      MEMORY[0x1A1AD355C](v260, 0x1032C4057ACE4D0);
    }
  }
  (*(void (**)(uint64_t *))(*v197 + 8))(v197);
  v261 = v357;
  if (v357)
  {
    v262 = (_QWORD *)v358;
    while (v262 != v261)
    {
      v265 = *--v262;
      v264 = v265;
      *v262 = 0;
      if (v265)
      {
        if (*(char *)(v264 + 287) < 0)
          operator delete(*(void **)(v264 + 264));
        v263 = sub_19C296378(v264);
        MEMORY[0x1A1AD355C](v263, 0x1032C40D90104AELL);
      }
    }
    operator delete(v261);
  }
  v189 = (char *)v355;
  v357 = v355;
  v358 = v356;
  if (v355 == (void *)v356)
  {
LABEL_366:
    v266 = (*v149)[4];
    if ((*v149)[3] == v266)
    {
      buf[23] = 0;
      buf[0] = 0;
    }
    else if (*((char *)v266 - 9) < 0)
    {
      sub_19C2B5238(buf, (void *)*(v266 - 4), (unint64_t)*(v266 - 3));
    }
    else
    {
      v267 = *((_OWORD *)v266 - 2);
      *(_QWORD *)&buf[16] = *(v266 - 2);
      *(_OWORD *)buf = v267;
    }
    if (buf[23] >= 0)
      v268 = buf[23];
    else
      v268 = *(_QWORD *)&buf[8];
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    if (v268 >= 2)
    {
      sub_19C4442A0(buf, v148, *(_DWORD **)v348, v343, (uint64_t)v149, v347, v345, &v349, 0);
      if (v189)
      {
        v269 = (char *)v358;
        while (v269 != v189)
        {
          v272 = *((_QWORD *)v269 - 1);
          v269 -= 8;
          v271 = v272;
          *(_QWORD *)v269 = 0;
          if (v272)
          {
            if (*(char *)(v271 + 287) < 0)
              operator delete(*(void **)(v271 + 264));
            v270 = sub_19C296378(v271);
            MEMORY[0x1A1AD355C](v270, 0x1032C40D90104AELL);
          }
        }
        *(_QWORD *)&v358 = v189;
        operator delete(v189);
        *(_QWORD *)&v358 = 0;
      }
      v189 = *(char **)buf;
      v357 = *(void **)buf;
      v358 = *(_OWORD *)&buf[8];
      v273 = *(_QWORD *)&buf[16];
      if (*(_BYTE *)(v148 + 88))
      {
        v274 = *(unsigned __int16 *)(v148 + 8) | 0x50000;
        v275 = (uint64_t)v360;
        *(_QWORD *)buf = &off_1E3D30ED0;
        *(_QWORD *)&buf[8] = v148;
        *(_QWORD *)&buf[24] = buf;
        sub_19C3168D8((uint64_t)v360, v274, (uint64_t)buf);
        v276 = *(_QWORD **)&buf[24];
        if (*(_BYTE **)&buf[24] == buf)
        {
          v277 = 4;
          v276 = buf;
LABEL_390:
          (*(void (**)(void))(*v276 + 8 * v277))();
        }
        else if (*(_QWORD *)&buf[24])
        {
          v277 = 5;
          goto LABEL_390;
        }
        sub_19C43BBCC((uint64_t)buf, v275, *(_QWORD *)(v148 + 72), v274, *(unsigned __int16 *)(v148 + 8));
        if (*(_QWORD *)&buf[8])
          --*(_QWORD *)&buf[8];
        if (*(_QWORD *)&buf[24])
          v278 = --*(_QWORD *)&buf[24];
        else
          v278 = 0;
        if ((_QWORD)v391)
          *(_QWORD *)&v391 = v391 - 1;
        if (v392)
          --v392;
        sub_19C4442A0(&v369, v148, *(_DWORD **)&buf[16], v278, (uint64_t)v149, v347, v345, &v349, 1);
        v279 = (char *)v358;
        v280 = v358 - (_QWORD)v189;
        v281 = (uint64_t)(v358 - (_QWORD)v189) >> 3;
        v282 = v281 + ((uint64_t)(*((_QWORD *)&v369 + 1) - v369) >> 3);
        if (v282 > (v273 - (uint64_t)v189) >> 3)
        {
          if (v282 >> 61)
            sub_19C2A18E8();
          v283 = (char *)operator new(8 * v282);
          v284 = (unint64_t)&v283[8 * v281];
          if (v279 == v189)
          {
            v357 = &v283[8 * v281];
            *(_QWORD *)&v358 = v357;
            *((_QWORD *)&v358 + 1) = &v283[8 * v282];
          }
          else
          {
            v285 = v279 - v189 - 8;
            v286 = v279;
            v287 = &v283[8 * v281];
            if (v285 < 0x78)
              goto LABEL_490;
            if ((unint64_t)&v279[-(v285 & 0xFFFFFFFFFFFFFFF8) - 8] < v284)
            {
              v286 = v279;
              v287 = &v283[8 * v281];
              if (&v283[v280 - (v285 & 0xFFFFFFFFFFFFFFF8) - 8] < v279)
                goto LABEL_490;
            }
            v288 = (v285 >> 3) + 1;
            v289 = 8 * (v288 & 0x3FFFFFFFFFFFFFFCLL);
            v286 = &v279[-v289];
            v287 = (char *)(v284 - v289);
            v290 = &v283[v280 - 16];
            v291 = v279 - 16;
            v292 = v288 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v294 = *((_OWORD *)v291 - 1);
              v293 = *(_OWORD *)v291;
              *((_OWORD *)v291 - 1) = 0uLL;
              *(_OWORD *)v291 = 0uLL;
              *((_OWORD *)v290 - 1) = v294;
              *(_OWORD *)v290 = v293;
              v290 -= 32;
              v291 -= 32;
              v292 -= 4;
            }
            while (v292);
            if (v288 != (v288 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_490:
              do
              {
                v295 = *((_QWORD *)v286 - 1);
                v286 -= 8;
                *(_QWORD *)v286 = 0;
                *((_QWORD *)v287 - 1) = v295;
                v287 -= 8;
              }
              while (v286 != v189);
            }
            v357 = v287;
            *(_QWORD *)&v358 = &v283[8 * v281];
            *((_QWORD *)&v358 + 1) = &v283[8 * v282];
            do
            {
              v298 = *((_QWORD *)v279 - 1);
              v279 -= 8;
              v297 = v298;
              *(_QWORD *)v279 = 0;
              if (v298)
              {
                if (*(char *)(v297 + 287) < 0)
                  operator delete(*(void **)(v297 + 264));
                v296 = sub_19C296378(v297);
                MEMORY[0x1A1AD355C](v296, 0x1032C40D90104AELL);
              }
            }
            while (v279 != v189);
          }
          if (v189)
            operator delete(v189);
        }
        v300 = (uint64_t *)*((_QWORD *)&v369 + 1);
        v299 = (uint64_t *)v369;
        if ((_QWORD)v369 != *((_QWORD *)&v369 + 1))
        {
          v301 = (uint64_t *)v358;
          do
          {
            if ((unint64_t)v301 < *((_QWORD *)&v358 + 1))
            {
              v302 = *v299;
              *v299 = 0;
              *v301++ = v302;
            }
            else
            {
              v301 = sub_19C307614(&v357, v299);
            }
            *(_QWORD *)&v358 = v301;
            ++v299;
          }
          while (v299 != v300);
          v299 = (uint64_t *)v369;
        }
        if (v299)
        {
          v303 = (uint64_t *)*((_QWORD *)&v369 + 1);
          v304 = v299;
          if (*((uint64_t **)&v369 + 1) != v299)
          {
            do
            {
              v307 = *--v303;
              v306 = v307;
              *v303 = 0;
              if (v307)
              {
                if (*(char *)(v306 + 287) < 0)
                  operator delete(*(void **)(v306 + 264));
                v305 = sub_19C296378(v306);
                MEMORY[0x1A1AD355C](v305, 0x1032C40D90104AELL);
              }
            }
            while (v303 != v299);
            v304 = (uint64_t *)v369;
          }
          *((_QWORD *)&v369 + 1) = v299;
          operator delete(v304);
        }
        v189 = (char *)v357;
      }
    }
  }
  v308 = (char *)v358;
  if (v189 != (char *)v358)
  {
    do
    {
      if (!v381)
        sub_19C2CCC60();
      v309 = (*(uint64_t (**)(_QWORD *, char *))(*v381 + 48))(v381, v189);
      v189 += 8;
      if (v189 == v308)
        v310 = 0;
      else
        v310 = v309;
    }
    while ((v310 & 1) != 0);
    v189 = (char *)v357;
  }
  if (v189)
  {
    v311 = (char *)v358;
    while (v311 != v189)
    {
      v314 = *((_QWORD *)v311 - 1);
      v311 -= 8;
      v313 = v314;
      *(_QWORD *)v311 = 0;
      if (v314)
      {
        if (*(char *)(v313 + 287) < 0)
          operator delete(*(void **)(v313 + 264));
        v312 = sub_19C296378(v313);
        MEMORY[0x1A1AD355C](v312, 0x1032C40D90104AELL);
      }
    }
    *(_QWORD *)&v358 = v189;
    operator delete(v189);
  }
  if ((_QWORD)__dst)
  {
    *((_QWORD *)&__dst + 1) = __dst;
    operator delete((void *)__dst);
  }
  v316 = v359;
  for (i = v360; v316 < (uint64_t)(i[1] - *i) >> 5; sub_19C31618C(i))
    ;
  v317 = v381;
  if (v381 == v380)
  {
    v318 = 4;
    v317 = v380;
LABEL_461:
    (*(void (**)(void))(*v317 + 8 * v318))();
  }
  else if (v381)
  {
    v318 = 5;
    goto LABEL_461;
  }
LABEL_148:
  v127 = (language_modeling::v1::InlineCompletion *)__p;
  v128 = v351;
  if (__p == v351)
  {
    if (__p)
      goto LABEL_177;
    goto LABEL_186;
  }
  while (2)
  {
    while (2)
    {
      v129 = *(__int128 **)v127;
      if (*(char *)(*(_QWORD *)v127 + 23) < 0)
      {
        sub_19C2B5238(buf, *(void **)v129, *((_QWORD *)v129 + 1));
      }
      else
      {
        v130 = *v129;
        *(_QWORD *)&buf[16] = *((_QWORD *)v129 + 2);
        *(_OWORD *)buf = v130;
      }
      if (buf[23] >= 0)
        v131 = buf[23];
      else
        v131 = *(_QWORD *)&buf[8];
      v132 = **a3;
      v134 = v132[3];
      v133 = v132[4];
      if (v134 == v133)
      {
        v136 = 0;
        v137 = *(_QWORD *)(a1 + 184);
        if ((buf[23] & 0x80000000) == 0)
          goto LABEL_167;
        goto LABEL_166;
      }
      if (*((char *)v133 - 9) < 0)
      {
        sub_19C2B5238(&__dst, (void *)*(v133 - 4), (unint64_t)*(v133 - 3));
      }
      else
      {
        v135 = *((_OWORD *)v133 - 2);
        v383 = (uint64_t)*(v133 - 2);
        __dst = v135;
      }
      v137 = *(_QWORD *)(a1 + 184);
      if (SHIBYTE(v383) < 0)
      {
        v136 = *((_QWORD *)&__dst + 1);
        operator delete((void *)__dst);
        if ((buf[23] & 0x80000000) == 0)
          goto LABEL_167;
LABEL_166:
        operator delete(*(void **)buf);
        goto LABEL_167;
      }
      v136 = HIBYTE(v383);
      if ((buf[23] & 0x80000000) != 0)
        goto LABEL_166;
LABEL_167:
      if (v131 < v137 + v136)
      {
        v127 = (language_modeling::v1::InlineCompletion *)((char *)v127 + 8);
        if (v127 == v128)
          goto LABEL_176;
        continue;
      }
      break;
    }
    if (!v379)
      sub_19C2CCC60();
    v138 = (*(uint64_t (**)(_BYTE *, language_modeling::v1::InlineCompletion *))(*(_QWORD *)v379 + 48))(v379, v127);
    v127 = (language_modeling::v1::InlineCompletion *)((char *)v127 + 8);
    if (v127 == v128)
      v139 = 0;
    else
      v139 = v138;
    if ((v139 & 1) != 0)
      continue;
    break;
  }
LABEL_176:
  v127 = (language_modeling::v1::InlineCompletion *)__p;
  if (__p)
  {
LABEL_177:
    v140 = v351;
    v141 = v127;
    if (v351 != v127)
    {
      do
      {
        v144 = *((_QWORD *)v140 - 1);
        v140 = (language_modeling::v1::InlineCompletion *)((char *)v140 - 8);
        v143 = v144;
        *(_QWORD *)v140 = 0;
        if (v144)
        {
          if (*(char *)(v143 + 287) < 0)
            operator delete(*(void **)(v143 + 264));
          v142 = sub_19C296378(v143);
          MEMORY[0x1A1AD355C](v142, 0x1032C40D90104AELL);
        }
      }
      while (v140 != v127);
      v141 = __p;
    }
    v351 = v127;
    operator delete(v141);
  }
LABEL_186:
  v145 = v379;
  if (v379 == v378)
  {
    v146 = 4;
    v145 = v378;
LABEL_190:
    (*(void (**)(void))(*v145 + 8 * v146))();
  }
  else if (v379)
  {
    v146 = 5;
    goto LABEL_190;
  }
  if (SHIBYTE(v349.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v349.__r_.__value_.__l.__data_);
}

void sub_19C2FA788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51,int a52,__int16 a53,char a54,char a55,uint64_t a56,const void *a57,void *a58,uint64_t a59,uint64_t a60,char a61,uint64_t a62,uint64_t a63)
{
  char a72;
  uint64_t v72;
  _QWORD *v74;
  _QWORD *v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *p_shared_owners;
  unint64_t v81;
  void *v82;
  unint64_t *v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;

  (*(void (**)(uint64_t))(*(_QWORD *)a20 + 8))(a20);
  *(_QWORD *)v72 = &off_1E3D36CD0;
  sub_19C33275C(*(_QWORD **)(v72 + 64));
  v74 = *(_QWORD **)(v72 + 24);
  if (v74)
  {
    v75 = *(_QWORD **)(v72 + 32);
    v76 = *(void **)(v72 + 24);
    if (v75 != v74)
    {
      do
      {
        v78 = *--v75;
        v77 = v78;
        *v75 = 0;
        if (v78)
          (*(void (**)(uint64_t))(*(_QWORD *)v77 + 8))(v77);
      }
      while (v75 != v74);
      v76 = *a13;
    }
    *(_QWORD *)(v72 + 32) = v74;
    operator delete(v76);
  }
  v79 = *(std::__shared_weak_count **)(v72 + 16);
  if (v79)
  {
    p_shared_owners = (unint64_t *)&v79->__shared_owners_;
    do
      v81 = __ldaxr(p_shared_owners);
    while (__stlxr(v81 - 1, p_shared_owners));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  MEMORY[0x1A1AD355C](v72, 0x10E1C4005265F3FLL);
  sub_19C2B43C8((uint64_t)&a61);
  sub_19C2E5670(&a57);
  if (a55 < 0)
    operator delete(__p);
  sub_19C440B54(&a58);
  sub_19C2FEFC4(&a45);
  v82 = (void *)STACK[0x230];
  if (STACK[0x230])
  {
    STACK[0x238] = (unint64_t)v82;
    operator delete(v82);
  }
  sub_19C43F260(&a48);
  v83 = (unint64_t *)STACK[0x228];
  if ((unint64_t *)STACK[0x228] == &STACK[0x210])
  {
    v84 = 4;
    v83 = &STACK[0x210];
  }
  else
  {
    if (!v83)
      goto LABEL_23;
    v84 = 5;
  }
  (*(void (**)(void))(*v83 + 8 * v84))();
LABEL_23:
  sub_19C2FEFC4(&a36);
  v85 = (char *)STACK[0x208];
  if ((char *)STACK[0x208] == &a72)
  {
    v86 = 4;
    v85 = &a72;
  }
  else
  {
    if (!v85)
      goto LABEL_28;
    v86 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v85 + 8 * v86))();
LABEL_28:
  if (a35 < 0)
  {
    operator delete(a30);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_19C2FAC14(uint64_t a1, uint64_t a2, int a3, uint64_t a4, char a5)
{
  sub_19C437410(*(_QWORD *)(a1 + 176), a2, a3, a4, a5);
}

void sub_19C2FAC1C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  sub_19C4379D0(*(_QWORD *)(a1 + 176), a2, a3, a4);
}

void sub_19C2FAC24(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_19C437D98(*(_QWORD *)(a1 + 176), a2, a3);
}

void sub_19C2FAC2C(uint64_t a1, __int128 *a2, uint64_t *a3)
{
  sub_19C4380BC(*(_QWORD *)(a1 + 176), a2, a3);
}

