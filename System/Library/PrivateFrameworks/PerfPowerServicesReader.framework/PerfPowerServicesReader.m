BOOL AWDMETRICSBwpStatsReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  BOOL v24;
  int *v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  unint64_t v34;
  char v35;

  v3 = (int *)MEMORY[0x24BE7AF60];
  v4 = (int *)MEMORY[0x24BE7AF50];
  v5 = (int *)MEMORY[0x24BE7AF48];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x24BE7AF60]) < *(_QWORD *)(a2 + (int)*MEMORY[0x24BE7AF50]))
  {
    v7 = (int *)MEMORY[0x24BE7AF30];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 9)
      {
        v26 = 0;
        v27 = 0;
        v20 = 0;
        *(_BYTE *)(a1 + 20) |= 1u;
        while (1)
        {
          v28 = *v3;
          v29 = *(_QWORD *)(a2 + v28);
          if (v29 == -1 || v29 >= *(_QWORD *)(a2 + *v4))
            break;
          v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
          *(_QWORD *)(a2 + v28) = v29 + 1;
          v20 |= (unint64_t)(v30 & 0x7F) << v26;
          if ((v30 & 0x80) == 0)
          {
            v25 = &OBJC_IVAR___AWDMETRICSBwpStats__bandwidth;
            goto LABEL_48;
          }
          v26 += 7;
          v24 = v27++ > 8;
          if (v24)
          {
            LODWORD(v20) = 0;
            v25 = &OBJC_IVAR___AWDMETRICSBwpStats__bandwidth;
            goto LABEL_50;
          }
        }
        v25 = &OBJC_IVAR___AWDMETRICSBwpStats__bandwidth;
LABEL_47:
        *(_BYTE *)(a2 + *v5) = 1;
        goto LABEL_48;
      }
      if ((_DWORD)v17 == 4)
        break;
      if ((_DWORD)v17 == 3)
      {
        v18 = 0;
        v19 = 0;
        v20 = 0;
        *(_BYTE *)(a1 + 20) |= 4u;
        while (1)
        {
          v21 = *v3;
          v22 = *(_QWORD *)(a2 + v21);
          if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
          {
            v25 = &OBJC_IVAR___AWDMETRICSBwpStats__scsSpacing;
            goto LABEL_47;
          }
          v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
          *(_QWORD *)(a2 + v21) = v22 + 1;
          v20 |= (unint64_t)(v23 & 0x7F) << v18;
          if ((v23 & 0x80) == 0)
            break;
          v18 += 7;
          v24 = v19++ > 8;
          if (v24)
          {
            LODWORD(v20) = 0;
            v25 = &OBJC_IVAR___AWDMETRICSBwpStats__scsSpacing;
            goto LABEL_50;
          }
        }
        v25 = &OBJC_IVAR___AWDMETRICSBwpStats__scsSpacing;
        goto LABEL_48;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_51:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v31 = 0;
    v32 = 0;
    v20 = 0;
    *(_BYTE *)(a1 + 20) |= 2u;
    while (1)
    {
      v33 = *v3;
      v34 = *(_QWORD *)(a2 + v33);
      if (v34 == -1 || v34 >= *(_QWORD *)(a2 + *v4))
      {
        v25 = &OBJC_IVAR___AWDMETRICSBwpStats__duration;
        goto LABEL_47;
      }
      v35 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v34);
      *(_QWORD *)(a2 + v33) = v34 + 1;
      v20 |= (unint64_t)(v35 & 0x7F) << v31;
      if ((v35 & 0x80) == 0)
        break;
      v31 += 7;
      v24 = v32++ > 8;
      if (v24)
      {
        LODWORD(v20) = 0;
        v25 = &OBJC_IVAR___AWDMETRICSBwpStats__duration;
        goto LABEL_50;
      }
    }
    v25 = &OBJC_IVAR___AWDMETRICSBwpStats__duration;
LABEL_48:
    if (*(_BYTE *)(a2 + *v5))
      LODWORD(v20) = 0;
LABEL_50:
    *(_DWORD *)(a1 + *v25) = v20;
    goto LABEL_51;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t AWDMETRICSCellularDynamicRatSelectionReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  unint64_t v7;
  int *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  unsigned int v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  BOOL v25;
  int v26;
  unint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  char v45;
  unsigned int v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  char v50;
  unsigned int v51;
  uint64_t v52;
  unint64_t v53;
  char v54;
  char v55;
  unsigned int v56;
  uint64_t v57;
  unint64_t v58;
  char v59;
  char v60;
  unsigned int v61;
  uint64_t v62;
  unint64_t v63;
  char v64;
  char v65;
  unsigned int v66;
  uint64_t v67;
  unint64_t v68;
  char v69;
  char v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char v75;
  char v76;
  unsigned int v77;
  uint64_t v78;
  unint64_t v79;
  char v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t result;
  uint64_t v88;

  v3 = (int *)MEMORY[0x24BE7AF60];
  v4 = (int *)MEMORY[0x24BE7AF50];
  v5 = (int *)MEMORY[0x24BE7AF48];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x24BE7AF60]) < *(_QWORD *)(a2 + (int)*MEMORY[0x24BE7AF50]))
  {
    v7 = 0x2572DB000uLL;
    v8 = (int *)MEMORY[0x24BE7AF30];
    v9 = 0x2572DB000uLL;
    v10 = 0x2572DB000uLL;
    v11 = 0x2572DB000uLL;
    v12 = 0x2572DB000uLL;
    v13 = 0x2572DB000uLL;
    v14 = 0x2572DB000uLL;
    v15 = 0x2572DB000uLL;
    v16 = 0x2572DB000uLL;
    v17 = 0x2572DB000uLL;
    v18 = 0x2572DB000uLL;
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v19 = 0;
      v20 = 0;
      v21 = 0;
      while (1)
      {
        v22 = *v3;
        v23 = *(_QWORD *)(a2 + v22);
        if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
          break;
        v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v23);
        *(_QWORD *)(a2 + v22) = v23 + 1;
        v21 |= (unint64_t)(v24 & 0x7F) << v19;
        if ((v24 & 0x80) == 0)
          goto LABEL_12;
        v19 += 7;
        v25 = v20++ >= 9;
        if (v25)
        {
          v21 = 0;
          v26 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v26 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v21 = 0;
LABEL_14:
      if (v26 || (v21 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v28 = v21 >> 3;
      if ((int)(v21 >> 3) <= 16)
      {
        switch((_DWORD)v28)
        {
          case 1:
            v70 = 0;
            v71 = 0;
            v72 = 0;
            *(_WORD *)(a1 + *(int *)(v7 + 2040)) |= 1u;
            while (1)
            {
              v73 = *v3;
              v74 = *(_QWORD *)(a2 + v73);
              if (v74 == -1 || v74 >= *(_QWORD *)(a2 + *v4))
                break;
              v75 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v74);
              *(_QWORD *)(a2 + v73) = v74 + 1;
              v72 |= (unint64_t)(v75 & 0x7F) << v70;
              if ((v75 & 0x80) == 0)
                goto LABEL_128;
              v70 += 7;
              v25 = v71++ >= 9;
              if (v25)
              {
                v72 = 0;
                goto LABEL_130;
              }
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_128:
            if (*(_BYTE *)(a2 + *v5))
              v72 = 0;
LABEL_130:
            *(_QWORD *)(a1 + *(int *)(v9 + 2044)) = v72;
            continue;
          case 4:
            v76 = 0;
            v77 = 0;
            v31 = 0;
            *(_WORD *)(a1 + *(int *)(v7 + 2040)) |= 0x40u;
            while (1)
            {
              v78 = *v3;
              v79 = *(_QWORD *)(a2 + v78);
              if (v79 == -1 || v79 >= *(_QWORD *)(a2 + *v4))
                break;
              v80 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v79);
              *(_QWORD *)(a2 + v78) = v79 + 1;
              v31 |= (unint64_t)(v80 & 0x7F) << v76;
              if ((v80 & 0x80) == 0)
                goto LABEL_132;
              v76 += 7;
              v25 = v77++ >= 9;
              if (v25)
              {
                LODWORD(v31) = 0;
                goto LABEL_134;
              }
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_132:
            if (*(_BYTE *)(a2 + *v5))
              LODWORD(v31) = 0;
LABEL_134:
            v88 = *(int *)(v10 + 2048);
            break;
          case 5:
            v35 = 0;
            v36 = 0;
            v31 = 0;
            *(_WORD *)(a1 + *(int *)(v7 + 2040)) |= 8u;
            while (1)
            {
              v37 = *v3;
              v38 = *(_QWORD *)(a2 + v37);
              if (v38 == -1 || v38 >= *(_QWORD *)(a2 + *v4))
                break;
              v39 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v38);
              *(_QWORD *)(a2 + v37) = v38 + 1;
              v31 |= (unint64_t)(v39 & 0x7F) << v35;
              if ((v39 & 0x80) == 0)
                goto LABEL_100;
              v35 += 7;
              v25 = v36++ >= 9;
              if (v25)
              {
                LODWORD(v31) = 0;
                goto LABEL_102;
              }
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_100:
            if (*(_BYTE *)(a2 + *v5))
              LODWORD(v31) = 0;
LABEL_102:
            v88 = *(int *)(v11 + 2052);
            break;
          default:
LABEL_93:
            v81 = v9;
            v82 = v10;
            v83 = v11;
            v84 = v7;
            v85 = v12;
            v86 = a1;
            result = PBReaderSkipValueWithTag();
            v13 = 0x2572DB000;
            a1 = v86;
            v14 = 0x2572DB000;
            v5 = (int *)MEMORY[0x24BE7AF48];
            v12 = v85;
            v15 = 0x2572DB000;
            v7 = v84;
            v16 = 0x2572DB000;
            v11 = v83;
            v17 = 0x2572DB000;
            v10 = v82;
            v18 = 0x2572DB000;
            v9 = v81;
            if (!(_DWORD)result)
              return result;
            continue;
        }
      }
      else
      {
        switch((int)v28)
        {
          case 17:
            v29 = 0;
            v30 = 0;
            v31 = 0;
            *(_WORD *)(a1 + *(int *)(v7 + 2040)) |= 0x20u;
            while (2)
            {
              v32 = *v3;
              v33 = *(_QWORD *)(a2 + v32);
              if (v33 == -1 || v33 >= *(_QWORD *)(a2 + *v4))
              {
                *(_BYTE *)(a2 + *v5) = 1;
              }
              else
              {
                v34 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v33);
                *(_QWORD *)(a2 + v32) = v33 + 1;
                v31 |= (unint64_t)(v34 & 0x7F) << v29;
                if (v34 < 0)
                {
                  v29 += 7;
                  v25 = v30++ >= 9;
                  if (v25)
                  {
                    LODWORD(v31) = 0;
                    goto LABEL_98;
                  }
                  continue;
                }
              }
              break;
            }
            if (*(_BYTE *)(a2 + *v5))
              LODWORD(v31) = 0;
LABEL_98:
            v88 = *(int *)(v12 + 2056);
            goto LABEL_135;
          case 18:
            v40 = 0;
            v41 = 0;
            v31 = 0;
            *(_WORD *)(a1 + *(int *)(v7 + 2040)) |= 0x10u;
            while (2)
            {
              v42 = *v3;
              v43 = *(_QWORD *)(a2 + v42);
              if (v43 == -1 || v43 >= *(_QWORD *)(a2 + *v4))
              {
                *(_BYTE *)(a2 + *v5) = 1;
              }
              else
              {
                v44 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v43);
                *(_QWORD *)(a2 + v42) = v43 + 1;
                v31 |= (unint64_t)(v44 & 0x7F) << v40;
                if (v44 < 0)
                {
                  v40 += 7;
                  v25 = v41++ >= 9;
                  if (v25)
                  {
                    LODWORD(v31) = 0;
                    goto LABEL_106;
                  }
                  continue;
                }
              }
              break;
            }
            if (*(_BYTE *)(a2 + *v5))
              LODWORD(v31) = 0;
LABEL_106:
            v88 = *(int *)(v13 + 2060);
            goto LABEL_135;
          case 19:
            v45 = 0;
            v46 = 0;
            v31 = 0;
            *(_WORD *)(a1 + *(int *)(v7 + 2040)) |= 4u;
            while (2)
            {
              v47 = *v3;
              v48 = *(_QWORD *)(a2 + v47);
              if (v48 == -1 || v48 >= *(_QWORD *)(a2 + *v4))
              {
                *(_BYTE *)(a2 + *v5) = 1;
              }
              else
              {
                v49 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v48);
                *(_QWORD *)(a2 + v47) = v48 + 1;
                v31 |= (unint64_t)(v49 & 0x7F) << v45;
                if (v49 < 0)
                {
                  v45 += 7;
                  v25 = v46++ >= 9;
                  if (v25)
                  {
                    LODWORD(v31) = 0;
                    goto LABEL_110;
                  }
                  continue;
                }
              }
              break;
            }
            if (*(_BYTE *)(a2 + *v5))
              LODWORD(v31) = 0;
LABEL_110:
            v88 = *(int *)(v14 + 2064);
            goto LABEL_135;
          case 20:
            v50 = 0;
            v51 = 0;
            v31 = 0;
            *(_WORD *)(a1 + *(int *)(v7 + 2040)) |= 2u;
            while (2)
            {
              v52 = *v3;
              v53 = *(_QWORD *)(a2 + v52);
              if (v53 == -1 || v53 >= *(_QWORD *)(a2 + *v4))
              {
                *(_BYTE *)(a2 + *v5) = 1;
              }
              else
              {
                v54 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v53);
                *(_QWORD *)(a2 + v52) = v53 + 1;
                v31 |= (unint64_t)(v54 & 0x7F) << v50;
                if (v54 < 0)
                {
                  v50 += 7;
                  v25 = v51++ >= 9;
                  if (v25)
                  {
                    LODWORD(v31) = 0;
                    goto LABEL_114;
                  }
                  continue;
                }
              }
              break;
            }
            if (*(_BYTE *)(a2 + *v5))
              LODWORD(v31) = 0;
LABEL_114:
            v88 = *(int *)(v15 + 2068);
            goto LABEL_135;
          case 23:
            v55 = 0;
            v56 = 0;
            v31 = 0;
            *(_WORD *)(a1 + *(int *)(v7 + 2040)) |= 0x200u;
            while (2)
            {
              v57 = *v3;
              v58 = *(_QWORD *)(a2 + v57);
              if (v58 == -1 || v58 >= *(_QWORD *)(a2 + *v4))
              {
                *(_BYTE *)(a2 + *v5) = 1;
              }
              else
              {
                v59 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v58);
                *(_QWORD *)(a2 + v57) = v58 + 1;
                v31 |= (unint64_t)(v59 & 0x7F) << v55;
                if (v59 < 0)
                {
                  v55 += 7;
                  v25 = v56++ >= 9;
                  if (v25)
                  {
                    LODWORD(v31) = 0;
                    goto LABEL_118;
                  }
                  continue;
                }
              }
              break;
            }
            if (*(_BYTE *)(a2 + *v5))
              LODWORD(v31) = 0;
LABEL_118:
            v88 = *(int *)(v16 + 2072);
            goto LABEL_135;
          case 24:
            v60 = 0;
            v61 = 0;
            v31 = 0;
            *(_WORD *)(a1 + *(int *)(v7 + 2040)) |= 0x100u;
            while (2)
            {
              v62 = *v3;
              v63 = *(_QWORD *)(a2 + v62);
              if (v63 == -1 || v63 >= *(_QWORD *)(a2 + *v4))
              {
                *(_BYTE *)(a2 + *v5) = 1;
              }
              else
              {
                v64 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v63);
                *(_QWORD *)(a2 + v62) = v63 + 1;
                v31 |= (unint64_t)(v64 & 0x7F) << v60;
                if (v64 < 0)
                {
                  v60 += 7;
                  v25 = v61++ >= 9;
                  if (v25)
                  {
                    LODWORD(v31) = 0;
                    goto LABEL_122;
                  }
                  continue;
                }
              }
              break;
            }
            if (*(_BYTE *)(a2 + *v5))
              LODWORD(v31) = 0;
LABEL_122:
            v88 = *(int *)(v17 + 2076);
            goto LABEL_135;
          case 31:
            v65 = 0;
            v66 = 0;
            v31 = 0;
            *(_WORD *)(a1 + *(int *)(v7 + 2040)) |= 0x80u;
            break;
          default:
            goto LABEL_93;
        }
        while (1)
        {
          v67 = *v3;
          v68 = *(_QWORD *)(a2 + v67);
          if (v68 == -1 || v68 >= *(_QWORD *)(a2 + *v4))
            break;
          v69 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v68);
          *(_QWORD *)(a2 + v67) = v68 + 1;
          v31 |= (unint64_t)(v69 & 0x7F) << v65;
          if ((v69 & 0x80) == 0)
            goto LABEL_124;
          v65 += 7;
          v25 = v66++ >= 9;
          if (v25)
          {
            LODWORD(v31) = 0;
            goto LABEL_126;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_124:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v31) = 0;
LABEL_126:
        v88 = *(int *)(v18 + 2080);
      }
LABEL_135:
      *(_DWORD *)(a1 + v88) = v31;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t AWDMETRICSCellularNrRadioStatsReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  AWDMETRICSBwpStats *v18;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  uint64_t result;
  uint64_t v37;

  v3 = (int *)MEMORY[0x24BE7AF60];
  v4 = (int *)MEMORY[0x24BE7AF50];
  v5 = (int *)MEMORY[0x24BE7AF48];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x24BE7AF60]) < *(_QWORD *)(a2 + (int)*MEMORY[0x24BE7AF50]))
  {
    v7 = (int *)MEMORY[0x24BE7AF30];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((int)(v10 >> 3) > 13)
      {
        if ((_DWORD)v17 == 14)
        {
          v31 = 0;
          v32 = 0;
          v21 = 0;
          *(_BYTE *)(a1 + 32) |= 4u;
          while (1)
          {
            v33 = *v3;
            v34 = *(_QWORD *)(a2 + v33);
            if (v34 == -1 || v34 >= *(_QWORD *)(a2 + *v4))
              break;
            v35 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v34);
            *(_QWORD *)(a2 + v33) = v34 + 1;
            v21 |= (unint64_t)(v35 & 0x7F) << v31;
            if ((v35 & 0x80) == 0)
              goto LABEL_58;
            v31 += 7;
            v14 = v32++ >= 9;
            if (v14)
            {
              LODWORD(v21) = 0;
              goto LABEL_60;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_58:
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v21) = 0;
LABEL_60:
          v37 = 28;
        }
        else
        {
          if ((_DWORD)v17 != 47)
          {
LABEL_47:
            result = PBReaderSkipValueWithTag();
            if (!(_DWORD)result)
              return result;
            continue;
          }
          v19 = 0;
          v20 = 0;
          v21 = 0;
          *(_BYTE *)(a1 + 32) |= 2u;
          while (1)
          {
            v22 = *v3;
            v23 = *(_QWORD *)(a2 + v22);
            if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
              break;
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if ((v24 & 0x80) == 0)
              goto LABEL_50;
            v19 += 7;
            v14 = v20++ >= 9;
            if (v14)
            {
              LODWORD(v21) = 0;
              goto LABEL_52;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_50:
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v21) = 0;
LABEL_52:
          v37 = 24;
        }
        *(_DWORD *)(a1 + v37) = v21;
      }
      else if ((_DWORD)v17 == 1)
      {
        v25 = 0;
        v26 = 0;
        v27 = 0;
        *(_BYTE *)(a1 + 32) |= 1u;
        while (1)
        {
          v28 = *v3;
          v29 = *(_QWORD *)(a2 + v28);
          if (v29 == -1 || v29 >= *(_QWORD *)(a2 + *v4))
            break;
          v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
          *(_QWORD *)(a2 + v28) = v29 + 1;
          v27 |= (unint64_t)(v30 & 0x7F) << v25;
          if ((v30 & 0x80) == 0)
            goto LABEL_54;
          v25 += 7;
          v14 = v26++ >= 9;
          if (v14)
          {
            v27 = 0;
            goto LABEL_56;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_54:
        if (*(_BYTE *)(a2 + *v5))
          v27 = 0;
LABEL_56:
        *(_QWORD *)(a1 + 8) = v27;
      }
      else
      {
        if ((_DWORD)v17 != 3)
          goto LABEL_47;
        v18 = objc_alloc_init(AWDMETRICSBwpStats);
        objc_msgSend((id)a1, "addBwpInfo:", v18);
        if (!PBReaderPlaceMark() || !AWDMETRICSBwpStatsReadFrom((uint64_t)v18, a2))
        {

          return 0;
        }
        PBReaderRecallMark();

      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t AWDMETRICSCellularPowerLogWUSReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  uint64_t v40;

  v3 = (int *)MEMORY[0x24BE7AF60];
  v4 = (int *)MEMORY[0x24BE7AF50];
  v5 = (int *)MEMORY[0x24BE7AF48];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x24BE7AF60]) < *(_QWORD *)(a2 + (int)*MEMORY[0x24BE7AF50]))
  {
    v7 = (int *)MEMORY[0x24BE7AF30];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = 0;
          v18 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 28) |= 1u;
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
              break;
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              goto LABEL_50;
            v17 += 7;
            v14 = v18++ >= 9;
            if (v14)
            {
              v19 = 0;
              goto LABEL_52;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_50:
          if (*(_BYTE *)(a2 + *v5))
            v19 = 0;
LABEL_52:
          *(_QWORD *)(a1 + 8) = v19;
          continue;
        case 2u:
          v24 = 0;
          v25 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 28) |= 2u;
          while (2)
          {
            v27 = *v3;
            v28 = *(_QWORD *)(a2 + v27);
            if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
              *(_QWORD *)(a2 + v27) = v28 + 1;
              v26 |= (unint64_t)(v29 & 0x7F) << v24;
              if (v29 < 0)
              {
                v24 += 7;
                v14 = v25++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_56;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_56:
          v40 = 16;
          goto LABEL_65;
        case 3u:
          v30 = 0;
          v31 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 28) |= 8u;
          while (2)
          {
            v32 = *v3;
            v33 = *(_QWORD *)(a2 + v32);
            if (v33 == -1 || v33 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v34 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v33);
              *(_QWORD *)(a2 + v32) = v33 + 1;
              v26 |= (unint64_t)(v34 & 0x7F) << v30;
              if (v34 < 0)
              {
                v30 += 7;
                v14 = v31++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_60;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_60:
          v40 = 24;
          goto LABEL_65;
        case 4u:
          v35 = 0;
          v36 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 28) |= 4u;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v37 = *v3;
        v38 = *(_QWORD *)(a2 + v37);
        if (v38 == -1 || v38 >= *(_QWORD *)(a2 + *v4))
          break;
        v39 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v38);
        *(_QWORD *)(a2 + v37) = v38 + 1;
        v26 |= (unint64_t)(v39 & 0x7F) << v35;
        if ((v39 & 0x80) == 0)
          goto LABEL_62;
        v35 += 7;
        v14 = v36++ >= 9;
        if (v14)
        {
          LODWORD(v26) = 0;
          goto LABEL_64;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_62:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v26) = 0;
LABEL_64:
      v40 = 20;
LABEL_65:
      *(_DWORD *)(a1 + v40) = v26;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t AWDMETRICSCellularPowerLogNRDCEventReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  uint64_t v40;

  v3 = (int *)MEMORY[0x24BE7AF60];
  v4 = (int *)MEMORY[0x24BE7AF50];
  v5 = (int *)MEMORY[0x24BE7AF48];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x24BE7AF60]) < *(_QWORD *)(a2 + (int)*MEMORY[0x24BE7AF50]))
  {
    v7 = (int *)MEMORY[0x24BE7AF30];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = 0;
          v18 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 28) |= 1u;
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
              break;
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              goto LABEL_50;
            v17 += 7;
            v14 = v18++ >= 9;
            if (v14)
            {
              v19 = 0;
              goto LABEL_52;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_50:
          if (*(_BYTE *)(a2 + *v5))
            v19 = 0;
LABEL_52:
          *(_QWORD *)(a1 + 8) = v19;
          continue;
        case 2u:
          v24 = 0;
          v25 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 28) |= 2u;
          while (2)
          {
            v27 = *v3;
            v28 = *(_QWORD *)(a2 + v27);
            if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
              *(_QWORD *)(a2 + v27) = v28 + 1;
              v26 |= (unint64_t)(v29 & 0x7F) << v24;
              if (v29 < 0)
              {
                v24 += 7;
                v14 = v25++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_56;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_56:
          v40 = 16;
          goto LABEL_65;
        case 3u:
          v30 = 0;
          v31 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 28) |= 8u;
          while (2)
          {
            v32 = *v3;
            v33 = *(_QWORD *)(a2 + v32);
            if (v33 == -1 || v33 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v34 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v33);
              *(_QWORD *)(a2 + v32) = v33 + 1;
              v26 |= (unint64_t)(v34 & 0x7F) << v30;
              if (v34 < 0)
              {
                v30 += 7;
                v14 = v31++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_60;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_60:
          v40 = 24;
          goto LABEL_65;
        case 4u:
          v35 = 0;
          v36 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 28) |= 4u;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v37 = *v3;
        v38 = *(_QWORD *)(a2 + v37);
        if (v38 == -1 || v38 >= *(_QWORD *)(a2 + *v4))
          break;
        v39 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v38);
        *(_QWORD *)(a2 + v37) = v38 + 1;
        v26 |= (unint64_t)(v39 & 0x7F) << v35;
        if ((v39 & 0x80) == 0)
          goto LABEL_62;
        v35 += 7;
        v14 = v36++ >= 9;
        if (v14)
        {
          LODWORD(v26) = 0;
          goto LABEL_64;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_62:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v26) = 0;
LABEL_64:
      v40 = 20;
LABEL_65:
      *(_DWORD *)(a1 + v40) = v26;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t AWDMETRICSCellularPowerLogPagingDRXCycleReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  uint64_t v40;

  v3 = (int *)MEMORY[0x24BE7AF60];
  v4 = (int *)MEMORY[0x24BE7AF50];
  v5 = (int *)MEMORY[0x24BE7AF48];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x24BE7AF60]) < *(_QWORD *)(a2 + (int)*MEMORY[0x24BE7AF50]))
  {
    v7 = (int *)MEMORY[0x24BE7AF30];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = 0;
          v18 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 28) |= 1u;
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
              break;
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              goto LABEL_50;
            v17 += 7;
            v14 = v18++ >= 9;
            if (v14)
            {
              v19 = 0;
              goto LABEL_52;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_50:
          if (*(_BYTE *)(a2 + *v5))
            v19 = 0;
LABEL_52:
          *(_QWORD *)(a1 + 8) = v19;
          continue;
        case 2u:
          v24 = 0;
          v25 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 28) |= 4u;
          while (2)
          {
            v27 = *v3;
            v28 = *(_QWORD *)(a2 + v27);
            if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
              *(_QWORD *)(a2 + v27) = v28 + 1;
              v26 |= (unint64_t)(v29 & 0x7F) << v24;
              if (v29 < 0)
              {
                v24 += 7;
                v14 = v25++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_56;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_56:
          v40 = 20;
          goto LABEL_65;
        case 3u:
          v30 = 0;
          v31 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 28) |= 8u;
          while (2)
          {
            v32 = *v3;
            v33 = *(_QWORD *)(a2 + v32);
            if (v33 == -1 || v33 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v34 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v33);
              *(_QWORD *)(a2 + v32) = v33 + 1;
              v26 |= (unint64_t)(v34 & 0x7F) << v30;
              if (v34 < 0)
              {
                v30 += 7;
                v14 = v31++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_60;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_60:
          v40 = 24;
          goto LABEL_65;
        case 4u:
          v35 = 0;
          v36 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 28) |= 2u;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v37 = *v3;
        v38 = *(_QWORD *)(a2 + v37);
        if (v38 == -1 || v38 >= *(_QWORD *)(a2 + *v4))
          break;
        v39 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v38);
        *(_QWORD *)(a2 + v37) = v38 + 1;
        v26 |= (unint64_t)(v39 & 0x7F) << v35;
        if ((v39 & 0x80) == 0)
          goto LABEL_62;
        v35 += 7;
        v14 = v36++ >= 9;
        if (v14)
        {
          LODWORD(v26) = 0;
          goto LABEL_64;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_62:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v26) = 0;
LABEL_64:
      v40 = 16;
LABEL_65:
      *(_DWORD *)(a1 + v40) = v26;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t AWDMETRICSCellularNrSDMActivationReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  unint64_t v7;
  unint64_t v8;
  int *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  BOOL v27;
  int v28;
  char v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  char v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  char v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t result;
  char v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char v60;
  char v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char v66;
  char v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char v72;
  char v73;
  unsigned int v74;
  uint64_t v75;
  unint64_t v76;
  char v77;
  char v78;
  unsigned int v79;
  uint64_t v80;
  unint64_t v81;
  char v82;
  char v83;
  unsigned int v84;
  uint64_t v85;
  unint64_t v86;
  char v87;
  char v88;
  unsigned int v89;
  uint64_t v90;
  unint64_t v91;
  char v92;
  char v93;
  unsigned int v94;
  uint64_t v95;
  unint64_t v96;
  char v97;
  char v98;
  unsigned int v99;
  uint64_t v100;
  unint64_t v101;
  char v102;
  char v103;
  unsigned int v104;
  uint64_t v105;
  unint64_t v106;
  char v107;
  char v108;
  unsigned int v109;
  uint64_t v110;
  unint64_t v111;
  char v112;
  char v113;
  unsigned int v114;
  uint64_t v115;
  unint64_t v116;
  char v117;
  BOOL v118;
  uint64_t v119;
  uint64_t v120;

  v3 = (int *)MEMORY[0x24BE7AF60];
  v4 = (int *)MEMORY[0x24BE7AF50];
  v5 = (int *)MEMORY[0x24BE7AF48];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x24BE7AF60]) < *(_QWORD *)(a2 + (int)*MEMORY[0x24BE7AF50]))
  {
    v7 = 0x2572DB000uLL;
    v8 = 0x2572DB000uLL;
    v9 = (int *)MEMORY[0x24BE7AF30];
    v10 = 0x2572DB000uLL;
    v11 = 0x2572DB000uLL;
    v12 = 0x2572DB000uLL;
    v13 = 0x2572DB000uLL;
    v14 = 0x2572DB000uLL;
    v15 = 0x2572DB000uLL;
    v16 = 0x2572DB000uLL;
    v17 = 0x2572DB000uLL;
    v18 = 0x2572DB000uLL;
    v19 = 0x2572DB000uLL;
    v20 = 0x2572DB000uLL;
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v21 = 0;
      v22 = 0;
      v23 = 0;
      while (1)
      {
        v24 = *v3;
        v25 = *(_QWORD *)(a2 + v24);
        if (v25 == -1 || v25 >= *(_QWORD *)(a2 + *v4))
          break;
        v26 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v25);
        *(_QWORD *)(a2 + v24) = v25 + 1;
        v23 |= (unint64_t)(v26 & 0x7F) << v21;
        if ((v26 & 0x80) == 0)
          goto LABEL_12;
        v21 += 7;
        v27 = v22++ >= 9;
        if (v27)
        {
          v23 = 0;
          v28 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v28 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v23 = 0;
LABEL_14:
      if (v28 || (v23 & 7) == 4)
        break;
      switch((v23 >> 3))
      {
        case 1u:
          v30 = 0;
          v31 = 0;
          v32 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 2164)) |= 1u;
          while (1)
          {
            v33 = *v3;
            v34 = *(_QWORD *)(a2 + v33);
            if (v34 == -1 || v34 >= *(_QWORD *)(a2 + *v4))
              break;
            v35 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v34);
            *(_QWORD *)(a2 + v33) = v34 + 1;
            v32 |= (unint64_t)(v35 & 0x7F) << v30;
            if ((v35 & 0x80) == 0)
              goto LABEL_127;
            v30 += 7;
            v27 = v31++ >= 9;
            if (v27)
            {
              v32 = 0;
              goto LABEL_129;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_127:
          if (*(_BYTE *)(a2 + *v5))
            v32 = 0;
LABEL_129:
          *(_QWORD *)(a1 + *(int *)(v8 + 2168)) = v32;
          continue;
        case 2u:
          v36 = 0;
          v37 = 0;
          v38 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 2164)) |= 0x2000u;
          while (2)
          {
            v39 = *v3;
            v40 = *(_QWORD *)(a2 + v39);
            if (v40 == -1 || v40 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v41 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v40);
              *(_QWORD *)(a2 + v39) = v40 + 1;
              v38 |= (unint64_t)(v41 & 0x7F) << v36;
              if (v41 < 0)
              {
                v36 += 7;
                v27 = v37++ >= 9;
                if (v27)
                {
                  v38 = 0;
                  goto LABEL_133;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v38 = 0;
LABEL_133:
          v118 = v38 != 0;
          v119 = *(int *)(v10 + 2176);
          goto LABEL_150;
        case 3u:
          v42 = 0;
          v43 = 0;
          v44 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 2164)) |= 0x4000u;
          while (2)
          {
            v45 = *v3;
            v46 = *(_QWORD *)(a2 + v45);
            if (v46 == -1 || v46 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v47 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v46);
              *(_QWORD *)(a2 + v45) = v46 + 1;
              v44 |= (unint64_t)(v47 & 0x7F) << v42;
              if (v47 < 0)
              {
                v42 += 7;
                v27 = v43++ >= 9;
                if (v27)
                {
                  v44 = 0;
                  goto LABEL_137;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v44 = 0;
LABEL_137:
          v118 = v44 != 0;
          v119 = *(int *)(v11 + 2180);
          goto LABEL_150;
        case 6u:
          v55 = 0;
          v56 = 0;
          v57 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 2164)) |= 0x400u;
          while (2)
          {
            v58 = *v3;
            v59 = *(_QWORD *)(a2 + v58);
            if (v59 == -1 || v59 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v60 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v59);
              *(_QWORD *)(a2 + v58) = v59 + 1;
              v57 |= (unint64_t)(v60 & 0x7F) << v55;
              if (v60 < 0)
              {
                v55 += 7;
                v27 = v56++ >= 9;
                if (v27)
                {
                  LODWORD(v57) = 0;
                  goto LABEL_141;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v57) = 0;
LABEL_141:
          v120 = *(int *)(v12 + 2184);
          goto LABEL_187;
        case 7u:
          v61 = 0;
          v62 = 0;
          v63 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 2164)) |= 0x800u;
          while (2)
          {
            v64 = *v3;
            v65 = *(_QWORD *)(a2 + v64);
            if (v65 == -1 || v65 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v66 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v65);
              *(_QWORD *)(a2 + v64) = v65 + 1;
              v63 |= (unint64_t)(v66 & 0x7F) << v61;
              if (v66 < 0)
              {
                v61 += 7;
                v27 = v62++ >= 9;
                if (v27)
                {
                  v63 = 0;
                  goto LABEL_145;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v63 = 0;
LABEL_145:
          v118 = v63 != 0;
          v119 = *(int *)(v13 + 2192);
          goto LABEL_150;
        case 8u:
          v67 = 0;
          v68 = 0;
          v69 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 2164)) |= 0x1000u;
          while (2)
          {
            v70 = *v3;
            v71 = *(_QWORD *)(a2 + v70);
            if (v71 == -1 || v71 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v72 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v71);
              *(_QWORD *)(a2 + v70) = v71 + 1;
              v69 |= (unint64_t)(v72 & 0x7F) << v67;
              if (v72 < 0)
              {
                v67 += 7;
                v27 = v68++ >= 9;
                if (v27)
                {
                  v69 = 0;
                  goto LABEL_149;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v69 = 0;
LABEL_149:
          v118 = v69 != 0;
          v119 = *(int *)(v14 + 2196);
LABEL_150:
          *(_BYTE *)(a1 + v119) = v118;
          continue;
        case 0xAu:
          v73 = 0;
          v74 = 0;
          v57 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 2164)) |= 8u;
          while (2)
          {
            v75 = *v3;
            v76 = *(_QWORD *)(a2 + v75);
            if (v76 == -1 || v76 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v77 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v76);
              *(_QWORD *)(a2 + v75) = v76 + 1;
              v57 |= (unint64_t)(v77 & 0x7F) << v73;
              if (v77 < 0)
              {
                v73 += 7;
                v27 = v74++ >= 9;
                if (v27)
                {
                  LODWORD(v57) = 0;
                  goto LABEL_154;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v57) = 0;
LABEL_154:
          v120 = *(int *)(v15 + 2200);
          goto LABEL_187;
        case 0xBu:
          v78 = 0;
          v79 = 0;
          v57 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 2164)) |= 0x200u;
          while (2)
          {
            v80 = *v3;
            v81 = *(_QWORD *)(a2 + v80);
            if (v81 == -1 || v81 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v82 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v81);
              *(_QWORD *)(a2 + v80) = v81 + 1;
              v57 |= (unint64_t)(v82 & 0x7F) << v78;
              if (v82 < 0)
              {
                v78 += 7;
                v27 = v79++ >= 9;
                if (v27)
                {
                  LODWORD(v57) = 0;
                  goto LABEL_158;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v57) = 0;
LABEL_158:
          v120 = *(int *)(v16 + 2204);
          goto LABEL_187;
        case 0xEu:
          v83 = 0;
          v84 = 0;
          v57 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 2164)) |= 0x10u;
          while (2)
          {
            v85 = *v3;
            v86 = *(_QWORD *)(a2 + v85);
            if (v86 == -1 || v86 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v87 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v86);
              *(_QWORD *)(a2 + v85) = v86 + 1;
              v57 |= (unint64_t)(v87 & 0x7F) << v83;
              if (v87 < 0)
              {
                v83 += 7;
                v27 = v84++ >= 9;
                if (v27)
                {
                  LODWORD(v57) = 0;
                  goto LABEL_162;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v57) = 0;
LABEL_162:
          v120 = *(int *)(v17 + 2208);
          goto LABEL_187;
        case 0x11u:
          v88 = 0;
          v89 = 0;
          v57 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 2164)) |= 4u;
          while (2)
          {
            v90 = *v3;
            v91 = *(_QWORD *)(a2 + v90);
            if (v91 == -1 || v91 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v92 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v91);
              *(_QWORD *)(a2 + v90) = v91 + 1;
              v57 |= (unint64_t)(v92 & 0x7F) << v88;
              if (v92 < 0)
              {
                v88 += 7;
                v27 = v89++ >= 9;
                if (v27)
                {
                  LODWORD(v57) = 0;
                  goto LABEL_166;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v57) = 0;
LABEL_166:
          v120 = *(int *)(v18 + 2172);
          goto LABEL_187;
        case 0x12u:
          v93 = 0;
          v94 = 0;
          v57 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 2164)) |= 0x40u;
          while (2)
          {
            v95 = *v3;
            v96 = *(_QWORD *)(a2 + v95);
            if (v96 == -1 || v96 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v97 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v96);
              *(_QWORD *)(a2 + v95) = v96 + 1;
              v57 |= (unint64_t)(v97 & 0x7F) << v93;
              if (v97 < 0)
              {
                v93 += 7;
                v27 = v94++ >= 9;
                if (v27)
                {
                  LODWORD(v57) = 0;
                  goto LABEL_170;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v57) = 0;
LABEL_170:
          v120 = *(int *)(v19 + 2212);
          goto LABEL_187;
        case 0x13u:
          v98 = 0;
          v99 = 0;
          v57 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 2164)) |= 2u;
          while (2)
          {
            v100 = *v3;
            v101 = *(_QWORD *)(a2 + v100);
            if (v101 == -1 || v101 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v102 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v101);
              *(_QWORD *)(a2 + v100) = v101 + 1;
              v57 |= (unint64_t)(v102 & 0x7F) << v98;
              if (v102 < 0)
              {
                v98 += 7;
                v27 = v99++ >= 9;
                if (v27)
                {
                  LODWORD(v57) = 0;
                  goto LABEL_174;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v57) = 0;
LABEL_174:
          v120 = *(int *)(v20 + 2216);
          goto LABEL_187;
        case 0x14u:
          v103 = 0;
          v104 = 0;
          v57 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 2164)) |= 0x80u;
          while (2)
          {
            v105 = *v3;
            v106 = *(_QWORD *)(a2 + v105);
            if (v106 == -1 || v106 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v107 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v106);
              *(_QWORD *)(a2 + v105) = v106 + 1;
              v57 |= (unint64_t)(v107 & 0x7F) << v103;
              if (v107 < 0)
              {
                v103 += 7;
                v27 = v104++ >= 9;
                if (v27)
                {
                  LODWORD(v57) = 0;
                  goto LABEL_178;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v57) = 0;
LABEL_178:
          v120 = 40;
          goto LABEL_187;
        case 0x15u:
          v108 = 0;
          v109 = 0;
          v57 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 2164)) |= 0x20u;
          while (2)
          {
            v110 = *v3;
            v111 = *(_QWORD *)(a2 + v110);
            if (v111 == -1 || v111 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v112 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v111);
              *(_QWORD *)(a2 + v110) = v111 + 1;
              v57 |= (unint64_t)(v112 & 0x7F) << v108;
              if (v112 < 0)
              {
                v108 += 7;
                v27 = v109++ >= 9;
                if (v27)
                {
                  LODWORD(v57) = 0;
                  goto LABEL_182;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v57) = 0;
LABEL_182:
          v120 = 32;
          goto LABEL_187;
        case 0x16u:
          v113 = 0;
          v114 = 0;
          v57 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 2164)) |= 0x100u;
          break;
        default:
          v48 = v8;
          v49 = v10;
          v50 = v7;
          v51 = v11;
          v52 = v12;
          v53 = a1;
          result = PBReaderSkipValueWithTag();
          v20 = 0x2572DB000;
          v13 = 0x2572DB000;
          a1 = v53;
          v14 = 0x2572DB000;
          v5 = (int *)MEMORY[0x24BE7AF48];
          v12 = v52;
          v15 = 0x2572DB000;
          v11 = v51;
          v16 = 0x2572DB000;
          v7 = v50;
          v19 = 0x2572DB000;
          v10 = v49;
          v17 = 0x2572DB000;
          v8 = v48;
          v18 = 0x2572DB000;
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v115 = *v3;
        v116 = *(_QWORD *)(a2 + v115);
        if (v116 == -1 || v116 >= *(_QWORD *)(a2 + *v4))
          break;
        v117 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v116);
        *(_QWORD *)(a2 + v115) = v116 + 1;
        v57 |= (unint64_t)(v117 & 0x7F) << v113;
        if ((v117 & 0x80) == 0)
          goto LABEL_184;
        v113 += 7;
        v27 = v114++ >= 9;
        if (v27)
        {
          LODWORD(v57) = 0;
          goto LABEL_186;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_184:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v57) = 0;
LABEL_186:
      v120 = 44;
LABEL_187:
      *(_DWORD *)(a1 + v120) = v57;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t AWDMETRICSCellularNrSdmEndcReleaseReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  uint64_t v40;

  v3 = (int *)MEMORY[0x24BE7AF60];
  v4 = (int *)MEMORY[0x24BE7AF50];
  v5 = (int *)MEMORY[0x24BE7AF48];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x24BE7AF60]) < *(_QWORD *)(a2 + (int)*MEMORY[0x24BE7AF50]))
  {
    v7 = (int *)MEMORY[0x24BE7AF30];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = 0;
          v18 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 28) |= 1u;
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
              break;
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              goto LABEL_50;
            v17 += 7;
            v14 = v18++ >= 9;
            if (v14)
            {
              v19 = 0;
              goto LABEL_52;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_50:
          if (*(_BYTE *)(a2 + *v5))
            v19 = 0;
LABEL_52:
          *(_QWORD *)(a1 + 8) = v19;
          continue;
        case 2u:
          v24 = 0;
          v25 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 28) |= 8u;
          while (2)
          {
            v27 = *v3;
            v28 = *(_QWORD *)(a2 + v27);
            if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
              *(_QWORD *)(a2 + v27) = v28 + 1;
              v26 |= (unint64_t)(v29 & 0x7F) << v24;
              if (v29 < 0)
              {
                v24 += 7;
                v14 = v25++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_56;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_56:
          v40 = 24;
          goto LABEL_65;
        case 3u:
          v30 = 0;
          v31 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 28) |= 4u;
          while (2)
          {
            v32 = *v3;
            v33 = *(_QWORD *)(a2 + v32);
            if (v33 == -1 || v33 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v34 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v33);
              *(_QWORD *)(a2 + v32) = v33 + 1;
              v26 |= (unint64_t)(v34 & 0x7F) << v30;
              if (v34 < 0)
              {
                v30 += 7;
                v14 = v31++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_60;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_60:
          v40 = 20;
          goto LABEL_65;
        case 4u:
          v35 = 0;
          v36 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 28) |= 2u;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v37 = *v3;
        v38 = *(_QWORD *)(a2 + v37);
        if (v38 == -1 || v38 >= *(_QWORD *)(a2 + *v4))
          break;
        v39 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v38);
        *(_QWORD *)(a2 + v37) = v38 + 1;
        v26 |= (unint64_t)(v39 & 0x7F) << v35;
        if ((v39 & 0x80) == 0)
          goto LABEL_62;
        v35 += 7;
        v14 = v36++ >= 9;
        if (v14)
        {
          LODWORD(v26) = 0;
          goto LABEL_64;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_62:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v26) = 0;
LABEL_64:
      v40 = 16;
LABEL_65:
      *(_DWORD *)(a1 + v40) = v26;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t AWDMETRICSCellularPerClientProfileTriggerCountReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t result;

  v3 = (int *)MEMORY[0x24BE7AF60];
  v4 = (int *)MEMORY[0x24BE7AF50];
  v5 = (int *)MEMORY[0x24BE7AF48];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x24BE7AF60]) < *(_QWORD *)(a2 + (int)*MEMORY[0x24BE7AF50]))
  {
    v7 = (int *)MEMORY[0x24BE7AF30];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        v23 = 0;
        v24 = 0;
        v25 = 0;
        *(_BYTE *)(a1 + 20) |= 2u;
        while (1)
        {
          v26 = *v3;
          v27 = *(_QWORD *)(a2 + v26);
          if (v27 == -1 || v27 >= *(_QWORD *)(a2 + *v4))
            break;
          v28 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v27);
          *(_QWORD *)(a2 + v26) = v27 + 1;
          v25 |= (unint64_t)(v28 & 0x7F) << v23;
          if ((v28 & 0x80) == 0)
            goto LABEL_41;
          v23 += 7;
          v14 = v24++ >= 9;
          if (v14)
          {
            LODWORD(v25) = 0;
            goto LABEL_43;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_41:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v25) = 0;
LABEL_43:
        *(_DWORD *)(a1 + 16) = v25;
      }
      else if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        *(_BYTE *)(a1 + 20) |= 1u;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_37;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_39;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_37:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_39:
        *(_QWORD *)(a1 + 8) = v19;
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL AWDMETRICSCellularPowerLogReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  unint64_t v17;
  AWDMETRICSCellularPowerLogShutdown *v18;

  v3 = (int *)MEMORY[0x24BE7AF60];
  v4 = (int *)MEMORY[0x24BE7AF50];
  v5 = (int *)MEMORY[0x24BE7AF48];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x24BE7AF60]) < *(_QWORD *)(a2 + (int)*MEMORY[0x24BE7AF50]))
  {
    v7 = (int *)MEMORY[0x24BE7AF30];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((int)(v10 >> 3) > 806952)
      {
        switch((int)v17)
        {
          case 816640:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogShutdown);
            objc_msgSend(a1, "addCellularPowerLogXOShutdown:", v18);
            goto LABEL_41;
          case 816641:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            objc_msgSend(a1, "addCellularPowerLogAPPSPerfLevels:", v18);
            goto LABEL_180;
          case 816642:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogShutdown);
            objc_msgSend(a1, "addCellularPowerLogAPPSCXOShutdown:", v18);
LABEL_41:
            if (!PBReaderPlaceMark()
              || (AWDMETRICSCellularPowerLogShutdownReadFrom((uint64_t)v18, a2) & 1) == 0)
            {
              goto LABEL_186;
            }
            goto LABEL_182;
          case 816643:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            objc_msgSend(a1, "addCellularPowerLogAPPSSleepVeto:", v18);
            goto LABEL_180;
          case 816644:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            objc_msgSend(a1, "addCellularPowerLogMCPMSleepVeto:", v18);
            goto LABEL_180;
          case 816645:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            objc_msgSend(a1, "addCellularPowerLogMPSSPerfLevels:", v18);
            goto LABEL_180;
          case 816646:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            objc_msgSend(a1, "addCellularPowerLogGPSStates:", v18);
            goto LABEL_180;
          case 816647:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            objc_msgSend(a1, "addCellularPowerLogAOPUARTStates:", v18);
            goto LABEL_180;
          case 816648:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            objc_msgSend(a1, "addCellularPowerLogWLANUARTStates:", v18);
            goto LABEL_180;
          case 816649:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            objc_msgSend(a1, "addCellularPowerLogPCIeStates:", v18);
            goto LABEL_180;
          case 816650:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            objc_msgSend(a1, "addCellularPowerLogL1SleepStates:", v18);
            goto LABEL_180;
          case 816651:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            objc_msgSend(a1, "addCellularPowerLogLTEConfiguredCASCCStates:", v18);
            goto LABEL_180;
          case 816652:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            objc_msgSend(a1, "addCellularPowerLogLTEActivatedCASCCStates:", v18);
            goto LABEL_180;
          case 816653:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            objc_msgSend(a1, "addCellularPowerLogLTERxTxActivityStates:", v18);
            goto LABEL_180;
          case 816654:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogLTECarrierComponentInfo);
            objc_msgSend(a1, "addCellularPowerLogLTECarrierComponentInfo:", v18);
            if (!PBReaderPlaceMark()
              || (AWDMETRICSCellularPowerLogLTECarrierComponentInfoReadFrom((uint64_t)v18, a2) & 1) == 0)
            {
              goto LABEL_186;
            }
            goto LABEL_182;
          case 816655:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            objc_msgSend(a1, "addCellularPowerLogLTEAggregatedDLTBS:", v18);
            goto LABEL_180;
          case 816656:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            objc_msgSend(a1, "addCellularPowerLogLTERSRP:", v18);
            goto LABEL_180;
          case 816657:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            objc_msgSend(a1, "addCellularPowerLogLTESINR:", v18);
            goto LABEL_180;
          case 816658:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            objc_msgSend(a1, "addCellularPowerLogLTETxPower:", v18);
            goto LABEL_180;
          case 816659:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            objc_msgSend(a1, "addCellularPowerLogLTERxDiversity:", v18);
            goto LABEL_180;
          case 816660:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            objc_msgSend(a1, "addCellularPowerLogLTEULCAState:", v18);
            goto LABEL_180;
          case 816661:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            objc_msgSend(a1, "addCellularPowerLogPowerEstimator:", v18);
            goto LABEL_180;
          case 816662:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogPagingDRXCycle);
            objc_msgSend(a1, "addCellularPowerLogLTEPagingDRXCycle:", v18);
            goto LABEL_67;
          case 816663:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogPagingDRXCycle);
            objc_msgSend(a1, "addCellularPowerLogNRPagingDRXCycle:", v18);
LABEL_67:
            if (!PBReaderPlaceMark()
              || (AWDMETRICSCellularPowerLogPagingDRXCycleReadFrom((uint64_t)v18, a2) & 1) == 0)
            {
              goto LABEL_186;
            }
            goto LABEL_182;
          case 816664:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            objc_msgSend(a1, "addCellularPowerLogProtocolState:", v18);
            goto LABEL_180;
          case 816665:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            objc_msgSend(a1, "addCellularPowerLogPLMNSearch:", v18);
            goto LABEL_180;
          case 816666:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            objc_msgSend(a1, "addCellularPowerLogGSMTxPower:", v18);
            goto LABEL_180;
          case 816667:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            objc_msgSend(a1, "addCellularPowerLogGSMRxRSSI:", v18);
            goto LABEL_180;
          case 816668:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            objc_msgSend(a1, "addCellularPowerLogGSMRABMode:", v18);
            goto LABEL_180;
          case 816669:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            objc_msgSend(a1, "addCellularPowerLogGSMRxDiversity:", v18);
            goto LABEL_180;
          case 816670:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            objc_msgSend(a1, "addCellularPowerLogWCDMATxPower:", v18);
            goto LABEL_180;
          case 816671:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            objc_msgSend(a1, "addCellularPowerLogWCDMARxRSSI:", v18);
            goto LABEL_180;
          case 816672:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogNRSCGRel);
            objc_msgSend(a1, "addCellularPowerLogNRSCGRel:", v18);
            if (!PBReaderPlaceMark()
              || (AWDMETRICSCellularPowerLogNRSCGRelReadFrom((uint64_t)v18, a2) & 1) == 0)
            {
              goto LABEL_186;
            }
            goto LABEL_182;
          case 816673:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            objc_msgSend(a1, "addCellularPowerLogWCDMARxDiversity:", v18);
            goto LABEL_180;
          case 816674:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            objc_msgSend(a1, "addCellularPowerLogWCDMARABMode:", v18);
            goto LABEL_180;
          case 816675:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            objc_msgSend(a1, "addCellularPowerLogWCDMARABType:", v18);
            goto LABEL_180;
          case 816676:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            objc_msgSend(a1, "addCellularPowerLogEVDOTxPower:", v18);
            goto LABEL_180;
          case 816677:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            objc_msgSend(a1, "addCellularPowerLogEVDORxRSSI:", v18);
            goto LABEL_180;
          case 816678:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            objc_msgSend(a1, "addCellularPowerLogHybridRABMode:", v18);
            goto LABEL_180;
          case 816679:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            objc_msgSend(a1, "addCellularPowerLogEVDORxDiversity:", v18);
            goto LABEL_180;
          case 816680:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            objc_msgSend(a1, "addCellularPowerLogCDMA1XTxPower:", v18);
            goto LABEL_180;
          case 816681:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            objc_msgSend(a1, "addCellularPowerLogCDMA1XRxRSSI:", v18);
            goto LABEL_180;
          case 816682:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            objc_msgSend(a1, "addCellularPowerLogCDMA1XRABMode:", v18);
            goto LABEL_180;
          case 816683:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            objc_msgSend(a1, "addCellularPowerLogCDMA1XRxDiversity:", v18);
            goto LABEL_180;
          case 816684:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogWCDMACDRXConfig);
            objc_msgSend(a1, "addCellularPowerLogWCDMACDRXConfig:", v18);
            if (!PBReaderPlaceMark()
              || (AWDMETRICSCellularPowerLogWCDMACDRXConfigReadFrom((uint64_t)v18, a2) & 1) == 0)
            {
              goto LABEL_186;
            }
            goto LABEL_182;
          case 816685:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogLTECDRXConfig);
            objc_msgSend(a1, "addCellularPowerLogLTECDRXConfig:", v18);
            if (!PBReaderPlaceMark()
              || (AWDMETRICSCellularPowerLogLTECDRXConfigReadFrom((uint64_t)v18, a2) & 1) == 0)
            {
              goto LABEL_186;
            }
            goto LABEL_182;
          case 816686:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogWCDMARRCStateChange);
            objc_msgSend(a1, "addCellularPowerLogWCDMARRCStateChange:", v18);
            if (!PBReaderPlaceMark()
              || (AWDMETRICSCellularPowerLogWCDMARRCStateChangeReadFrom((uint64_t)v18, a2) & 1) == 0)
            {
              goto LABEL_186;
            }
            goto LABEL_182;
          case 816687:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogLTERRCStateChange);
            objc_msgSend(a1, "addCellularPowerLogLTERRCStateChange:", v18);
            if (!PBReaderPlaceMark()
              || (AWDMETRICSCellularPowerLogLTERRCStateChangeReadFrom((uint64_t)v18, a2) & 1) == 0)
            {
              goto LABEL_186;
            }
            goto LABEL_182;
          case 816688:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogSystemEvent);
            objc_msgSend(a1, "addCellularPowerLogSystemEvent:", v18);
            if (!PBReaderPlaceMark()
              || (AWDMETRICSCellularPowerLogSystemEventReadFrom((uint64_t)v18, a2) & 1) == 0)
            {
              goto LABEL_186;
            }
            goto LABEL_182;
          case 816689:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogRATChangeEvent);
            objc_msgSend(a1, "addCellularPowerLogRATReselectionEvent:", v18);
            goto LABEL_109;
          case 816690:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogRATChangeEvent);
            objc_msgSend(a1, "addCellularPowerLogRATRedirectionEvent:", v18);
LABEL_109:
            if (!PBReaderPlaceMark()
              || (AWDMETRICSCellularPowerLogRATChangeEventReadFrom((uint64_t)v18, a2) & 1) == 0)
            {
              goto LABEL_186;
            }
            goto LABEL_182;
          case 816691:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogGSMRRCStateChange);
            objc_msgSend(a1, "addCellularPowerLogGSMRRCStateChange:", v18);
            if (!PBReaderPlaceMark()
              || (AWDMETRICSCellularPowerLogGSMRRCStateChangeReadFrom((uint64_t)v18, a2) & 1) == 0)
            {
              goto LABEL_186;
            }
            goto LABEL_182;
          case 816692:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLog1xEVDORRCStateChange);
            objc_msgSend(a1, "addCellularPowerLogCDMA1XRRCStateChange:", v18);
            goto LABEL_117;
          case 816693:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLog1xEVDORRCStateChange);
            objc_msgSend(a1, "addCellularPowerLogHybridRRCStateChange:", v18);
LABEL_117:
            if (!PBReaderPlaceMark()
              || (AWDMETRICSCellularPowerLog1xEVDORRCStateChangeReadFrom((uint64_t)v18, a2) & 1) == 0)
            {
              goto LABEL_186;
            }
            goto LABEL_182;
          case 816694:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogServiceEvent);
            objc_msgSend(a1, "addCellularPowerLogServiceStateEvent:", v18);
            if (!PBReaderPlaceMark()
              || (AWDMETRICSCellularPowerLogServiceEventReadFrom((uint64_t)v18, a2) & 1) == 0)
            {
              goto LABEL_186;
            }
            goto LABEL_182;
          case 816695:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogPLMNScanEvent);
            objc_msgSend(a1, "addCellularPowerLogPLMNScanEvent:", v18);
            if (!PBReaderPlaceMark()
              || (AWDMETRICSCellularPowerLogPLMNScanEventReadFrom((uint64_t)v18, a2) & 1) == 0)
            {
              goto LABEL_186;
            }
            goto LABEL_182;
          case 816696:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogPLMNSearchEvent);
            objc_msgSend(a1, "addCellularPowerLogPLMNSearchEvent:", v18);
            if (!PBReaderPlaceMark()
              || (AWDMETRICSCellularPowerLogPLMNSearchEventReadFrom((uint64_t)v18, a2) & 1) == 0)
            {
              goto LABEL_186;
            }
            goto LABEL_182;
          case 816697:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogNRSARRCStateChange);
            objc_msgSend(a1, "addCellularPowerLogNRSARRCStateChange:", v18);
            if (!PBReaderPlaceMark()
              || (AWDMETRICSCellularPowerLogNRSARRCStateChangeReadFrom((uint64_t)v18, a2) & 1) == 0)
            {
              goto LABEL_186;
            }
            goto LABEL_182;
          case 816698:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogNRNSAENDCEvent);
            objc_msgSend(a1, "addCellularPowerLogNRNSAENDCEvent:", v18);
            if (!PBReaderPlaceMark()
              || (AWDMETRICSCellularPowerLogNRNSAENDCEventReadFrom((uint64_t)v18, a2) & 1) == 0)
            {
              goto LABEL_186;
            }
            goto LABEL_182;
          case 816699:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogNRCDRXConfig);
            objc_msgSend(a1, "addCellularPowerLogNRCDRXConfig:", v18);
            if (!PBReaderPlaceMark()
              || (AWDMETRICSCellularPowerLogNRCDRXConfigReadFrom((uint64_t)v18, a2) & 1) == 0)
            {
              goto LABEL_186;
            }
            goto LABEL_182;
          case 816700:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            objc_msgSend(a1, "addCellularPowerLogNRsub6BWP:", v18);
            goto LABEL_180;
          case 816701:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            objc_msgSend(a1, "addCellularPowerLogRFTunerStatsHist:", v18);
            goto LABEL_180;
          case 816702:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            objc_msgSend(a1, "addCellularPowerLogNRsub6CASCCConfigured:", v18);
            goto LABEL_180;
          case 816703:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            objc_msgSend(a1, "addCellularPowerLogNRsub6CASCCActivated:", v18);
            goto LABEL_180;
          case 816704:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            objc_msgSend(a1, "addCellularPowerLogNRsub6RxTx:", v18);
            goto LABEL_180;
          case 816705:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogNRCarrierComponentInfo);
            objc_msgSend(a1, "addCellularPowerLogNRsub6CarrierComponentInfo:", v18);
            goto LABEL_163;
          case 816706:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            objc_msgSend(a1, "addCellularPowerLogNRsub6DLTBS:", v18);
            goto LABEL_180;
          case 816707:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            objc_msgSend(a1, "addCellularPowerLogNRsub6RSRP:", v18);
            goto LABEL_180;
          case 816708:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            objc_msgSend(a1, "addCellularPowerLogNRsub6ULCAState:", v18);
            goto LABEL_180;
          case 816709:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            objc_msgSend(a1, "addCellularPowerLogNRsub6TxPower:", v18);
            goto LABEL_180;
          case 816710:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            objc_msgSend(a1, "addCellularPowerLogNRsub6RxDiversity:", v18);
            goto LABEL_180;
          case 816711:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            objc_msgSend(a1, "addCellularPowerLogSPMI:", v18);
            goto LABEL_180;
          case 816712:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            objc_msgSend(a1, "addCellularPowerLogNRmmWaveBWP:", v18);
            goto LABEL_180;
          case 816713:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            objc_msgSend(a1, "addCellularPowerLogNRmmWaveAntennaPanel:", v18);
            goto LABEL_180;
          case 816714:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogNRFRCoverage);
            objc_msgSend(a1, "addCellularPowerLogNRFRCoverage:", v18);
            if (!PBReaderPlaceMark()
              || (AWDMETRICSCellularPowerLogNRFRCoverageReadFrom((uint64_t)v18, a2) & 1) == 0)
            {
              goto LABEL_186;
            }
            goto LABEL_182;
          case 816715:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            objc_msgSend(a1, "addCellularPowerLogNRmmWaveBeamID:", v18);
            goto LABEL_180;
          case 816716:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogSFTStateEvent);
            objc_msgSend(a1, "addCellularPowerLogSFTState:", v18);
            if (!PBReaderPlaceMark()
              || (AWDMETRICSCellularPowerLogSFTStateEventReadFrom((uint64_t)v18, a2) & 1) == 0)
            {
              goto LABEL_186;
            }
            goto LABEL_182;
          case 816717:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            objc_msgSend(a1, "addCellularPowerLogNRmmWaveCASCCConfigured:", v18);
            goto LABEL_180;
          case 816718:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            objc_msgSend(a1, "addCellularPowerLogNRmmWaveCASCCActivated:", v18);
            goto LABEL_180;
          case 816719:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            objc_msgSend(a1, "addCellularPowerLogNRmmWaveRxTx:", v18);
            goto LABEL_180;
          case 816720:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogNRCarrierComponentInfo);
            objc_msgSend(a1, "addCellularPowerLogNRmmWaveCarrierComponentInfo:", v18);
LABEL_163:
            if (!PBReaderPlaceMark()
              || (AWDMETRICSCellularPowerLogNRCarrierComponentInfoReadFrom((uint64_t)v18, a2) & 1) == 0)
            {
              goto LABEL_186;
            }
            goto LABEL_182;
          case 816721:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            objc_msgSend(a1, "addCellularPowerLogNRmmWaveDLTBS:", v18);
            goto LABEL_180;
          case 816722:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            objc_msgSend(a1, "addCellularPowerLogNRMmWaveRSRP:", v18);
            goto LABEL_180;
          case 816723:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            objc_msgSend(a1, "addCellularPowerLogSFTRxTx:", v18);
            goto LABEL_180;
          case 816724:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            objc_msgSend(a1, "addCellularPowerLogNRMmWaveTxPower:", v18);
            goto LABEL_180;
          case 816725:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            objc_msgSend(a1, "addCellularPowerLogNRMmWaveULCAState:", v18);
            goto LABEL_180;
          case 816726:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            objc_msgSend(a1, "addCellularPowerLogNRsub6BWPSCC:", v18);
            goto LABEL_180;
          case 816727:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            objc_msgSend(a1, "addCellularPowerLogNRmmWaveBWPSCC:", v18);
            goto LABEL_180;
          case 816728:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogNRDCEvent);
            objc_msgSend(a1, "addCellularPowerLogNRDCEvent:", v18);
            if (!PBReaderPlaceMark()
              || (AWDMETRICSCellularPowerLogNRDCEventReadFrom((uint64_t)v18, a2) & 1) == 0)
            {
              goto LABEL_186;
            }
            goto LABEL_182;
          case 816729:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogWUS);
            objc_msgSend(a1, "addCellularPowerLogWUS:", v18);
            if (!PBReaderPlaceMark()
              || (AWDMETRICSCellularPowerLogWUSReadFrom((uint64_t)v18, a2) & 1) == 0)
            {
              goto LABEL_186;
            }
            goto LABEL_182;
          case 816730:
            v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            objc_msgSend(a1, "addCellularPowerLogNRsub6BWPSA:", v18);
LABEL_180:
            if (PBReaderPlaceMark()
              && (AWDMETRICSCellularPowerLogHistogramReadFrom((uint64_t)v18, a2) & 1) != 0)
            {
              goto LABEL_182;
            }
            goto LABEL_186;
          default:
            if ((_DWORD)v17 != 806953)
              goto LABEL_37;
            v18 = objc_alloc_init(AWDMETRICSCellularDynamicRatSelection);
            objc_msgSend(a1, "addCellularDynamicRatSelection:", v18);
            if (!PBReaderPlaceMark()
              || (AWDMETRICSCellularDynamicRatSelectionReadFrom((uint64_t)v18, a2) & 1) == 0)
            {
              goto LABEL_186;
            }
            goto LABEL_182;
        }
      }
      if ((_DWORD)v17 == 786435)
      {
        v18 = objc_alloc_init(AWDMETRICSCellularPerClientProfileTriggerCount);
        objc_msgSend(a1, "addCellularPerClientProfileTriggerCount:", v18);
        if (!PBReaderPlaceMark()
          || (AWDMETRICSCellularPerClientProfileTriggerCountReadFrom((uint64_t)v18, a2) & 1) == 0)
        {
LABEL_186:

          return 0;
        }
        goto LABEL_182;
      }
      if ((_DWORD)v17 == 806936)
        break;
      if ((_DWORD)v17 == 806937)
      {
        v18 = objc_alloc_init(AWDMETRICSCellularNrSdmEndcRelease);
        objc_msgSend(a1, "addCellularNrSdmEndcRelease:", v18);
        if (!PBReaderPlaceMark()
          || (AWDMETRICSCellularNrSdmEndcReleaseReadFrom((uint64_t)v18, a2) & 1) == 0)
        {
          goto LABEL_186;
        }
LABEL_182:
        PBReaderRecallMark();

        goto LABEL_183;
      }
LABEL_37:
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_183:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v18 = objc_alloc_init(AWDMETRICSCellularNrSDMActivation);
    objc_msgSend(a1, "addCellularNrSDMActivation:", v18);
    if (!PBReaderPlaceMark() || (AWDMETRICSCellularNrSDMActivationReadFrom((uint64_t)v18, a2) & 1) == 0)
      goto LABEL_186;
    goto LABEL_182;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t AWDMETRICSCellularPowerLogHistogramReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  AWDMETRICSMBin *v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  uint64_t v36;

  v3 = (int *)MEMORY[0x24BE7AF60];
  v4 = (int *)MEMORY[0x24BE7AF50];
  v5 = (int *)MEMORY[0x24BE7AF48];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x24BE7AF60]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x24BE7AF50]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x24BE7AF30];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = 0;
        v18 = 0;
        v19 = 0;
        *(_BYTE *)(a1 + 32) |= 1u;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_46;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_48;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_46:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_48:
        *(_QWORD *)(a1 + 8) = v19;
        goto LABEL_58;
      case 2u:
        v24 = objc_alloc_init(AWDMETRICSMBin);
        objc_msgSend((id)a1, "addBin:", v24);
        if (PBReaderPlaceMark() && AWDMETRICSMBinReadFrom((uint64_t)v24, a2))
        {
          PBReaderRecallMark();

LABEL_58:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }

        return 0;
      case 3u:
        v25 = 0;
        v26 = 0;
        v27 = 0;
        *(_BYTE *)(a1 + 32) |= 4u;
        while (2)
        {
          v28 = *v3;
          v29 = *(_QWORD *)(a2 + v28);
          if (v29 == -1 || v29 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
            *(_QWORD *)(a2 + v28) = v29 + 1;
            v27 |= (unint64_t)(v30 & 0x7F) << v25;
            if (v30 < 0)
            {
              v25 += 7;
              v14 = v26++ >= 9;
              if (v14)
              {
                LODWORD(v27) = 0;
                goto LABEL_52;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v27) = 0;
LABEL_52:
        v36 = 28;
        goto LABEL_57;
      case 4u:
        v31 = 0;
        v32 = 0;
        v27 = 0;
        *(_BYTE *)(a1 + 32) |= 2u;
        while (2)
        {
          v33 = *v3;
          v34 = *(_QWORD *)(a2 + v33);
          if (v34 == -1 || v34 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v35 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v34);
            *(_QWORD *)(a2 + v33) = v34 + 1;
            v27 |= (unint64_t)(v35 & 0x7F) << v31;
            if (v35 < 0)
            {
              v31 += 7;
              v14 = v32++ >= 9;
              if (v14)
              {
                LODWORD(v27) = 0;
                goto LABEL_56;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v27) = 0;
LABEL_56:
        v36 = 24;
LABEL_57:
        *(_DWORD *)(a1 + v36) = v27;
        goto LABEL_58;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_58;
    }
  }
}

uint64_t AWDMETRICSCellularPowerLog1xEVDORRCStateChangeReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  char v45;
  unsigned int v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  uint64_t v50;

  v3 = (int *)MEMORY[0x24BE7AF60];
  v4 = (int *)MEMORY[0x24BE7AF50];
  v5 = (int *)MEMORY[0x24BE7AF48];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x24BE7AF60]) < *(_QWORD *)(a2 + (int)*MEMORY[0x24BE7AF50]))
  {
    v7 = (int *)MEMORY[0x24BE7AF30];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = 0;
          v18 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 36) |= 1u;
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
              break;
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              goto LABEL_64;
            v17 += 7;
            v14 = v18++ >= 9;
            if (v14)
            {
              v19 = 0;
              goto LABEL_66;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_64:
          if (*(_BYTE *)(a2 + *v5))
            v19 = 0;
LABEL_66:
          *(_QWORD *)(a1 + 8) = v19;
          continue;
        case 2u:
          v24 = 0;
          v25 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 36) |= 0x10u;
          while (2)
          {
            v27 = *v3;
            v28 = *(_QWORD *)(a2 + v27);
            if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
              *(_QWORD *)(a2 + v27) = v28 + 1;
              v26 |= (unint64_t)(v29 & 0x7F) << v24;
              if (v29 < 0)
              {
                v24 += 7;
                v14 = v25++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_70;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_70:
          v50 = 28;
          goto LABEL_87;
        case 3u:
          v30 = 0;
          v31 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 36) |= 4u;
          while (2)
          {
            v32 = *v3;
            v33 = *(_QWORD *)(a2 + v32);
            if (v33 == -1 || v33 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v34 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v33);
              *(_QWORD *)(a2 + v32) = v33 + 1;
              v26 |= (unint64_t)(v34 & 0x7F) << v30;
              if (v34 < 0)
              {
                v30 += 7;
                v14 = v31++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_74;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_74:
          v50 = 20;
          goto LABEL_87;
        case 4u:
          v35 = 0;
          v36 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 36) |= 8u;
          while (2)
          {
            v37 = *v3;
            v38 = *(_QWORD *)(a2 + v37);
            if (v38 == -1 || v38 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v39 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v38);
              *(_QWORD *)(a2 + v37) = v38 + 1;
              v26 |= (unint64_t)(v39 & 0x7F) << v35;
              if (v39 < 0)
              {
                v35 += 7;
                v14 = v36++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_78;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_78:
          v50 = 24;
          goto LABEL_87;
        case 5u:
          v40 = 0;
          v41 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 36) |= 0x20u;
          while (2)
          {
            v42 = *v3;
            v43 = *(_QWORD *)(a2 + v42);
            if (v43 == -1 || v43 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v44 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v43);
              *(_QWORD *)(a2 + v42) = v43 + 1;
              v26 |= (unint64_t)(v44 & 0x7F) << v40;
              if (v44 < 0)
              {
                v40 += 7;
                v14 = v41++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_82;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_82:
          v50 = 32;
          goto LABEL_87;
        case 6u:
          v45 = 0;
          v46 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 36) |= 2u;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v47 = *v3;
        v48 = *(_QWORD *)(a2 + v47);
        if (v48 == -1 || v48 >= *(_QWORD *)(a2 + *v4))
          break;
        v49 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v48);
        *(_QWORD *)(a2 + v47) = v48 + 1;
        v26 |= (unint64_t)(v49 & 0x7F) << v45;
        if ((v49 & 0x80) == 0)
          goto LABEL_84;
        v45 += 7;
        v14 = v46++ >= 9;
        if (v14)
        {
          LODWORD(v26) = 0;
          goto LABEL_86;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_84:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v26) = 0;
LABEL_86:
      v50 = 16;
LABEL_87:
      *(_DWORD *)(a1 + v50) = v26;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t AWDMETRICSCellularPowerLogGSMRRCStateChangeReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  char v45;
  unsigned int v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  uint64_t v50;

  v3 = (int *)MEMORY[0x24BE7AF60];
  v4 = (int *)MEMORY[0x24BE7AF50];
  v5 = (int *)MEMORY[0x24BE7AF48];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x24BE7AF60]) < *(_QWORD *)(a2 + (int)*MEMORY[0x24BE7AF50]))
  {
    v7 = (int *)MEMORY[0x24BE7AF30];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = 0;
          v18 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 36) |= 1u;
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
              break;
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              goto LABEL_64;
            v17 += 7;
            v14 = v18++ >= 9;
            if (v14)
            {
              v19 = 0;
              goto LABEL_66;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_64:
          if (*(_BYTE *)(a2 + *v5))
            v19 = 0;
LABEL_66:
          *(_QWORD *)(a1 + 8) = v19;
          continue;
        case 2u:
          v24 = 0;
          v25 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 36) |= 0x10u;
          while (2)
          {
            v27 = *v3;
            v28 = *(_QWORD *)(a2 + v27);
            if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
              *(_QWORD *)(a2 + v27) = v28 + 1;
              v26 |= (unint64_t)(v29 & 0x7F) << v24;
              if (v29 < 0)
              {
                v24 += 7;
                v14 = v25++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_70;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_70:
          v50 = 28;
          goto LABEL_87;
        case 3u:
          v30 = 0;
          v31 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 36) |= 4u;
          while (2)
          {
            v32 = *v3;
            v33 = *(_QWORD *)(a2 + v32);
            if (v33 == -1 || v33 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v34 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v33);
              *(_QWORD *)(a2 + v32) = v33 + 1;
              v26 |= (unint64_t)(v34 & 0x7F) << v30;
              if (v34 < 0)
              {
                v30 += 7;
                v14 = v31++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_74;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_74:
          v50 = 20;
          goto LABEL_87;
        case 4u:
          v35 = 0;
          v36 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 36) |= 8u;
          while (2)
          {
            v37 = *v3;
            v38 = *(_QWORD *)(a2 + v37);
            if (v38 == -1 || v38 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v39 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v38);
              *(_QWORD *)(a2 + v37) = v38 + 1;
              v26 |= (unint64_t)(v39 & 0x7F) << v35;
              if (v39 < 0)
              {
                v35 += 7;
                v14 = v36++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_78;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_78:
          v50 = 24;
          goto LABEL_87;
        case 5u:
          v40 = 0;
          v41 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 36) |= 0x20u;
          while (2)
          {
            v42 = *v3;
            v43 = *(_QWORD *)(a2 + v42);
            if (v43 == -1 || v43 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v44 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v43);
              *(_QWORD *)(a2 + v42) = v43 + 1;
              v26 |= (unint64_t)(v44 & 0x7F) << v40;
              if (v44 < 0)
              {
                v40 += 7;
                v14 = v41++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_82;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_82:
          v50 = 32;
          goto LABEL_87;
        case 6u:
          v45 = 0;
          v46 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 36) |= 2u;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v47 = *v3;
        v48 = *(_QWORD *)(a2 + v47);
        if (v48 == -1 || v48 >= *(_QWORD *)(a2 + *v4))
          break;
        v49 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v48);
        *(_QWORD *)(a2 + v47) = v48 + 1;
        v26 |= (unint64_t)(v49 & 0x7F) << v45;
        if ((v49 & 0x80) == 0)
          goto LABEL_84;
        v45 += 7;
        v14 = v46++ >= 9;
        if (v14)
        {
          LODWORD(v26) = 0;
          goto LABEL_86;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_84:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v26) = 0;
LABEL_86:
      v50 = 16;
LABEL_87:
      *(_DWORD *)(a1 + v50) = v26;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t AWDMETRICSCellularPowerLogLTECarrierComponentInfoReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  AWDMETRICSMCarrierComponentInfo *v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t result;

  v3 = (int *)MEMORY[0x24BE7AF60];
  v4 = (int *)MEMORY[0x24BE7AF50];
  v5 = (int *)MEMORY[0x24BE7AF48];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x24BE7AF60]) < *(_QWORD *)(a2 + (int)*MEMORY[0x24BE7AF50]))
  {
    v7 = (int *)MEMORY[0x24BE7AF30];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        v24 = objc_alloc_init(AWDMETRICSMCarrierComponentInfo);
        objc_msgSend((id)a1, "addCarrierInfo:", v24);
        if (!PBReaderPlaceMark() || !AWDMETRICSMCarrierComponentInfoReadFrom((uint64_t)v24, a2))
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else if ((_DWORD)v17 == 2)
      {
        v25 = 0;
        v26 = 0;
        v27 = 0;
        *(_BYTE *)(a1 + 28) |= 2u;
        while (1)
        {
          v28 = *v3;
          v29 = *(_QWORD *)(a2 + v28);
          if (v29 == -1 || v29 >= *(_QWORD *)(a2 + *v4))
            break;
          v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
          *(_QWORD *)(a2 + v28) = v29 + 1;
          v27 |= (unint64_t)(v30 & 0x7F) << v25;
          if ((v30 & 0x80) == 0)
            goto LABEL_45;
          v25 += 7;
          v14 = v26++ >= 9;
          if (v14)
          {
            LODWORD(v27) = 0;
            goto LABEL_47;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_45:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v27) = 0;
LABEL_47:
        *(_DWORD *)(a1 + 24) = v27;
      }
      else if ((_DWORD)v17 == 1)
      {
        v18 = 0;
        v19 = 0;
        v20 = 0;
        *(_BYTE *)(a1 + 28) |= 1u;
        while (1)
        {
          v21 = *v3;
          v22 = *(_QWORD *)(a2 + v21);
          if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
            break;
          v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
          *(_QWORD *)(a2 + v21) = v22 + 1;
          v20 |= (unint64_t)(v23 & 0x7F) << v18;
          if ((v23 & 0x80) == 0)
            goto LABEL_41;
          v18 += 7;
          v14 = v19++ >= 9;
          if (v14)
          {
            v20 = 0;
            goto LABEL_43;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_41:
        if (*(_BYTE *)(a2 + *v5))
          v20 = 0;
LABEL_43:
        *(_QWORD *)(a1 + 8) = v20;
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t AWDMETRICSCellularPowerLogLTECDRXConfigReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  unint64_t v7;
  unint64_t v8;
  int *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char v20;
  unsigned int v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  BOOL v26;
  int v27;
  char v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t result;
  char v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char v47;
  char v48;
  unsigned int v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  char v53;
  unsigned int v54;
  uint64_t v55;
  unint64_t v56;
  char v57;
  char v58;
  unsigned int v59;
  uint64_t v60;
  unint64_t v61;
  char v62;
  char v63;
  unsigned int v64;
  uint64_t v65;
  unint64_t v66;
  char v67;
  char v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char v73;
  char v74;
  unsigned int v75;
  uint64_t v76;
  unint64_t v77;
  char v78;
  char v79;
  unsigned int v80;
  uint64_t v81;
  unint64_t v82;
  char v83;
  char v84;
  unsigned int v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  char v89;
  char v90;
  unsigned int v91;
  uint64_t v92;
  unint64_t v93;
  char v94;
  uint64_t v95;
  BOOL v96;
  uint64_t v97;

  v3 = (int *)MEMORY[0x24BE7AF60];
  v4 = (int *)MEMORY[0x24BE7AF50];
  v5 = (int *)MEMORY[0x24BE7AF48];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x24BE7AF60]) < *(_QWORD *)(a2 + (int)*MEMORY[0x24BE7AF50]))
  {
    v7 = 0x2572DB000uLL;
    v8 = 0x2572DB000uLL;
    v9 = (int *)MEMORY[0x24BE7AF30];
    v10 = 0x2572DB000uLL;
    v11 = 0x2572DB000uLL;
    v12 = 0x2572DB000uLL;
    v13 = 0x2572DB000uLL;
    v14 = 0x2572DB000uLL;
    v15 = 0x2572DB000uLL;
    v16 = 0x2572DB000uLL;
    v17 = 0x2572DB000uLL;
    v18 = 0x2572DB000uLL;
    v19 = 0x2572DB000uLL;
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v20 = 0;
      v21 = 0;
      v22 = 0;
      while (1)
      {
        v23 = *v3;
        v24 = *(_QWORD *)(a2 + v23);
        if (v24 == -1 || v24 >= *(_QWORD *)(a2 + *v4))
          break;
        v25 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v24);
        *(_QWORD *)(a2 + v23) = v24 + 1;
        v22 |= (unint64_t)(v25 & 0x7F) << v20;
        if ((v25 & 0x80) == 0)
          goto LABEL_12;
        v20 += 7;
        v26 = v21++ >= 9;
        if (v26)
        {
          v22 = 0;
          v27 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v27 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v22 = 0;
LABEL_14:
      if (v27 || (v22 & 7) == 4)
        break;
      switch((v22 >> 3))
      {
        case 1u:
          v29 = 0;
          v30 = 0;
          v31 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 2732)) |= 1u;
          while (1)
          {
            v32 = *v3;
            v33 = *(_QWORD *)(a2 + v32);
            if (v33 == -1 || v33 >= *(_QWORD *)(a2 + *v4))
              break;
            v34 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v33);
            *(_QWORD *)(a2 + v32) = v33 + 1;
            v31 |= (unint64_t)(v34 & 0x7F) << v29;
            if ((v34 & 0x80) == 0)
              goto LABEL_99;
            v29 += 7;
            v26 = v30++ >= 9;
            if (v26)
            {
              v31 = 0;
              goto LABEL_101;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_99:
          if (*(_BYTE *)(a2 + *v5))
            v31 = 0;
LABEL_101:
          *(_QWORD *)(a1 + *(int *)(v8 + 2736)) = v31;
          continue;
        case 2u:
          v42 = 0;
          v43 = 0;
          v44 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 2732)) |= 0x40u;
          while (2)
          {
            v45 = *v3;
            v46 = *(_QWORD *)(a2 + v45);
            if (v46 == -1 || v46 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v47 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v46);
              *(_QWORD *)(a2 + v45) = v46 + 1;
              v44 |= (unint64_t)(v47 & 0x7F) << v42;
              if (v47 < 0)
              {
                v42 += 7;
                v26 = v43++ >= 9;
                if (v26)
                {
                  LODWORD(v44) = 0;
                  goto LABEL_105;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v44) = 0;
LABEL_105:
          v95 = *(int *)(v10 + 2740);
          goto LABEL_143;
        case 3u:
          v48 = 0;
          v49 = 0;
          v44 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 2732)) |= 4u;
          while (2)
          {
            v50 = *v3;
            v51 = *(_QWORD *)(a2 + v50);
            if (v51 == -1 || v51 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v52 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v51);
              *(_QWORD *)(a2 + v50) = v51 + 1;
              v44 |= (unint64_t)(v52 & 0x7F) << v48;
              if (v52 < 0)
              {
                v48 += 7;
                v26 = v49++ >= 9;
                if (v26)
                {
                  LODWORD(v44) = 0;
                  goto LABEL_109;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v44) = 0;
LABEL_109:
          v95 = *(int *)(v11 + 2744);
          goto LABEL_143;
        case 4u:
          v53 = 0;
          v54 = 0;
          v44 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 2732)) |= 8u;
          while (2)
          {
            v55 = *v3;
            v56 = *(_QWORD *)(a2 + v55);
            if (v56 == -1 || v56 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v57 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v56);
              *(_QWORD *)(a2 + v55) = v56 + 1;
              v44 |= (unint64_t)(v57 & 0x7F) << v53;
              if (v57 < 0)
              {
                v53 += 7;
                v26 = v54++ >= 9;
                if (v26)
                {
                  LODWORD(v44) = 0;
                  goto LABEL_113;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v44) = 0;
LABEL_113:
          v95 = *(int *)(v12 + 2748);
          goto LABEL_143;
        case 5u:
          v58 = 0;
          v59 = 0;
          v44 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 2732)) |= 0x20u;
          while (2)
          {
            v60 = *v3;
            v61 = *(_QWORD *)(a2 + v60);
            if (v61 == -1 || v61 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v62 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v61);
              *(_QWORD *)(a2 + v60) = v61 + 1;
              v44 |= (unint64_t)(v62 & 0x7F) << v58;
              if (v62 < 0)
              {
                v58 += 7;
                v26 = v59++ >= 9;
                if (v26)
                {
                  LODWORD(v44) = 0;
                  goto LABEL_117;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v44) = 0;
LABEL_117:
          v95 = *(int *)(v13 + 2752);
          goto LABEL_143;
        case 6u:
          v63 = 0;
          v64 = 0;
          v44 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 2732)) |= 2u;
          while (2)
          {
            v65 = *v3;
            v66 = *(_QWORD *)(a2 + v65);
            if (v66 == -1 || v66 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v67 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v66);
              *(_QWORD *)(a2 + v65) = v66 + 1;
              v44 |= (unint64_t)(v67 & 0x7F) << v63;
              if (v67 < 0)
              {
                v63 += 7;
                v26 = v64++ >= 9;
                if (v26)
                {
                  LODWORD(v44) = 0;
                  goto LABEL_121;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v44) = 0;
LABEL_121:
          v95 = *(int *)(v14 + 2756);
          goto LABEL_143;
        case 7u:
          v68 = 0;
          v69 = 0;
          v70 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 2732)) |= 0x400u;
          while (2)
          {
            v71 = *v3;
            v72 = *(_QWORD *)(a2 + v71);
            if (v72 == -1 || v72 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v73 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v72);
              *(_QWORD *)(a2 + v71) = v72 + 1;
              v70 |= (unint64_t)(v73 & 0x7F) << v68;
              if (v73 < 0)
              {
                v68 += 7;
                v26 = v69++ >= 9;
                if (v26)
                {
                  v70 = 0;
                  goto LABEL_125;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v70 = 0;
LABEL_125:
          v96 = v70 != 0;
          v97 = *(int *)(v15 + 2760);
          goto LABEL_138;
        case 8u:
          v74 = 0;
          v75 = 0;
          v44 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 2732)) |= 0x80u;
          while (2)
          {
            v76 = *v3;
            v77 = *(_QWORD *)(a2 + v76);
            if (v77 == -1 || v77 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v78 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v77);
              *(_QWORD *)(a2 + v76) = v77 + 1;
              v44 |= (unint64_t)(v78 & 0x7F) << v74;
              if (v78 < 0)
              {
                v74 += 7;
                v26 = v75++ >= 9;
                if (v26)
                {
                  LODWORD(v44) = 0;
                  goto LABEL_129;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v44) = 0;
LABEL_129:
          v95 = *(int *)(v16 + 2764);
          goto LABEL_143;
        case 9u:
          v79 = 0;
          v80 = 0;
          v44 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 2732)) |= 0x10u;
          while (2)
          {
            v81 = *v3;
            v82 = *(_QWORD *)(a2 + v81);
            if (v82 == -1 || v82 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v83 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v82);
              *(_QWORD *)(a2 + v81) = v82 + 1;
              v44 |= (unint64_t)(v83 & 0x7F) << v79;
              if (v83 < 0)
              {
                v79 += 7;
                v26 = v80++ >= 9;
                if (v26)
                {
                  LODWORD(v44) = 0;
                  goto LABEL_133;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v44) = 0;
LABEL_133:
          v95 = *(int *)(v17 + 2768);
          goto LABEL_143;
        case 0xAu:
          v84 = 0;
          v85 = 0;
          v86 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 2732)) |= 0x200u;
          while (2)
          {
            v87 = *v3;
            v88 = *(_QWORD *)(a2 + v87);
            if (v88 == -1 || v88 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v89 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v88);
              *(_QWORD *)(a2 + v87) = v88 + 1;
              v86 |= (unint64_t)(v89 & 0x7F) << v84;
              if (v89 < 0)
              {
                v84 += 7;
                v26 = v85++ >= 9;
                if (v26)
                {
                  v86 = 0;
                  goto LABEL_137;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v86 = 0;
LABEL_137:
          v96 = v86 != 0;
          v97 = *(int *)(v18 + 2772);
LABEL_138:
          *(_BYTE *)(a1 + v97) = v96;
          continue;
        case 0xBu:
          v90 = 0;
          v91 = 0;
          v44 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 2732)) |= 0x100u;
          break;
        default:
          v35 = v8;
          v36 = v10;
          v37 = v7;
          v38 = v11;
          v39 = v12;
          v40 = a1;
          result = PBReaderSkipValueWithTag();
          v13 = 0x2572DB000;
          a1 = v40;
          v14 = 0x2572DB000;
          v5 = (int *)MEMORY[0x24BE7AF48];
          v12 = v39;
          v15 = 0x2572DB000;
          v11 = v38;
          v16 = 0x2572DB000;
          v7 = v37;
          v19 = 0x2572DB000;
          v10 = v36;
          v17 = 0x2572DB000;
          v8 = v35;
          v18 = 0x2572DB000;
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v92 = *v3;
        v93 = *(_QWORD *)(a2 + v92);
        if (v93 == -1 || v93 >= *(_QWORD *)(a2 + *v4))
          break;
        v94 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v93);
        *(_QWORD *)(a2 + v92) = v93 + 1;
        v44 |= (unint64_t)(v94 & 0x7F) << v90;
        if ((v94 & 0x80) == 0)
          goto LABEL_140;
        v90 += 7;
        v26 = v91++ >= 9;
        if (v26)
        {
          LODWORD(v44) = 0;
          goto LABEL_142;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_140:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v44) = 0;
LABEL_142:
      v95 = *(int *)(v19 + 2776);
LABEL_143:
      *(_DWORD *)(a1 + v95) = v44;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t AWDMETRICSCellularPowerLogLTERRCStateChangeReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  char v45;
  unsigned int v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  uint64_t v50;

  v3 = (int *)MEMORY[0x24BE7AF60];
  v4 = (int *)MEMORY[0x24BE7AF50];
  v5 = (int *)MEMORY[0x24BE7AF48];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x24BE7AF60]) < *(_QWORD *)(a2 + (int)*MEMORY[0x24BE7AF50]))
  {
    v7 = (int *)MEMORY[0x24BE7AF30];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = 0;
          v18 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 36) |= 1u;
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
              break;
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              goto LABEL_64;
            v17 += 7;
            v14 = v18++ >= 9;
            if (v14)
            {
              v19 = 0;
              goto LABEL_66;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_64:
          if (*(_BYTE *)(a2 + *v5))
            v19 = 0;
LABEL_66:
          *(_QWORD *)(a1 + 8) = v19;
          continue;
        case 2u:
          v24 = 0;
          v25 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 36) |= 0x10u;
          while (2)
          {
            v27 = *v3;
            v28 = *(_QWORD *)(a2 + v27);
            if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
              *(_QWORD *)(a2 + v27) = v28 + 1;
              v26 |= (unint64_t)(v29 & 0x7F) << v24;
              if (v29 < 0)
              {
                v24 += 7;
                v14 = v25++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_70;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_70:
          v50 = 28;
          goto LABEL_87;
        case 3u:
          v30 = 0;
          v31 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 36) |= 4u;
          while (2)
          {
            v32 = *v3;
            v33 = *(_QWORD *)(a2 + v32);
            if (v33 == -1 || v33 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v34 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v33);
              *(_QWORD *)(a2 + v32) = v33 + 1;
              v26 |= (unint64_t)(v34 & 0x7F) << v30;
              if (v34 < 0)
              {
                v30 += 7;
                v14 = v31++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_74;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_74:
          v50 = 20;
          goto LABEL_87;
        case 4u:
          v35 = 0;
          v36 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 36) |= 8u;
          while (2)
          {
            v37 = *v3;
            v38 = *(_QWORD *)(a2 + v37);
            if (v38 == -1 || v38 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v39 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v38);
              *(_QWORD *)(a2 + v37) = v38 + 1;
              v26 |= (unint64_t)(v39 & 0x7F) << v35;
              if (v39 < 0)
              {
                v35 += 7;
                v14 = v36++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_78;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_78:
          v50 = 24;
          goto LABEL_87;
        case 5u:
          v40 = 0;
          v41 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 36) |= 0x20u;
          while (2)
          {
            v42 = *v3;
            v43 = *(_QWORD *)(a2 + v42);
            if (v43 == -1 || v43 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v44 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v43);
              *(_QWORD *)(a2 + v42) = v43 + 1;
              v26 |= (unint64_t)(v44 & 0x7F) << v40;
              if (v44 < 0)
              {
                v40 += 7;
                v14 = v41++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_82;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_82:
          v50 = 32;
          goto LABEL_87;
        case 6u:
          v45 = 0;
          v46 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 36) |= 2u;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v47 = *v3;
        v48 = *(_QWORD *)(a2 + v47);
        if (v48 == -1 || v48 >= *(_QWORD *)(a2 + *v4))
          break;
        v49 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v48);
        *(_QWORD *)(a2 + v47) = v48 + 1;
        v26 |= (unint64_t)(v49 & 0x7F) << v45;
        if ((v49 & 0x80) == 0)
          goto LABEL_84;
        v45 += 7;
        v14 = v46++ >= 9;
        if (v14)
        {
          LODWORD(v26) = 0;
          goto LABEL_86;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_84:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v26) = 0;
LABEL_86:
      v50 = 16;
LABEL_87:
      *(_DWORD *)(a1 + v50) = v26;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t AWDMETRICSCellularPowerLogNRCarrierComponentInfoReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  AWDMETRICSMCarrierComponentInfo *v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t result;

  v3 = (int *)MEMORY[0x24BE7AF60];
  v4 = (int *)MEMORY[0x24BE7AF50];
  v5 = (int *)MEMORY[0x24BE7AF48];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x24BE7AF60]) < *(_QWORD *)(a2 + (int)*MEMORY[0x24BE7AF50]))
  {
    v7 = (int *)MEMORY[0x24BE7AF30];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        v24 = objc_alloc_init(AWDMETRICSMCarrierComponentInfo);
        objc_msgSend((id)a1, "addCarrierInfo:", v24);
        if (!PBReaderPlaceMark() || !AWDMETRICSMCarrierComponentInfoReadFrom((uint64_t)v24, a2))
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else if ((_DWORD)v17 == 2)
      {
        v25 = 0;
        v26 = 0;
        v27 = 0;
        *(_BYTE *)(a1 + 28) |= 2u;
        while (1)
        {
          v28 = *v3;
          v29 = *(_QWORD *)(a2 + v28);
          if (v29 == -1 || v29 >= *(_QWORD *)(a2 + *v4))
            break;
          v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
          *(_QWORD *)(a2 + v28) = v29 + 1;
          v27 |= (unint64_t)(v30 & 0x7F) << v25;
          if ((v30 & 0x80) == 0)
            goto LABEL_45;
          v25 += 7;
          v14 = v26++ >= 9;
          if (v14)
          {
            LODWORD(v27) = 0;
            goto LABEL_47;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_45:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v27) = 0;
LABEL_47:
        *(_DWORD *)(a1 + 24) = v27;
      }
      else if ((_DWORD)v17 == 1)
      {
        v18 = 0;
        v19 = 0;
        v20 = 0;
        *(_BYTE *)(a1 + 28) |= 1u;
        while (1)
        {
          v21 = *v3;
          v22 = *(_QWORD *)(a2 + v21);
          if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
            break;
          v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
          *(_QWORD *)(a2 + v21) = v22 + 1;
          v20 |= (unint64_t)(v23 & 0x7F) << v18;
          if ((v23 & 0x80) == 0)
            goto LABEL_41;
          v18 += 7;
          v14 = v19++ >= 9;
          if (v14)
          {
            v20 = 0;
            goto LABEL_43;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_41:
        if (*(_BYTE *)(a2 + *v5))
          v20 = 0;
LABEL_43:
        *(_QWORD *)(a1 + 8) = v20;
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t AWDMETRICSCellularPowerLogNRCDRXConfigReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  unint64_t v7;
  unint64_t v8;
  int *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  BOOL v27;
  int v28;
  char v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t result;
  char v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char v48;
  char v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char v54;
  char v55;
  unsigned int v56;
  uint64_t v57;
  unint64_t v58;
  char v59;
  char v60;
  unsigned int v61;
  uint64_t v62;
  unint64_t v63;
  char v64;
  char v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  char v70;
  char v71;
  unsigned int v72;
  uint64_t v73;
  unint64_t v74;
  char v75;
  char v76;
  unsigned int v77;
  uint64_t v78;
  unint64_t v79;
  char v80;
  char v81;
  unsigned int v82;
  uint64_t v83;
  unint64_t v84;
  char v85;
  char v86;
  unsigned int v87;
  uint64_t v88;
  unint64_t v89;
  char v90;
  char v91;
  unsigned int v92;
  uint64_t v93;
  unint64_t v94;
  char v95;
  char v96;
  unsigned int v97;
  uint64_t v98;
  unint64_t v99;
  char v100;
  char v101;
  unsigned int v102;
  uint64_t v103;
  unint64_t v104;
  char v105;
  char v106;
  unsigned int v107;
  uint64_t v108;
  unint64_t v109;
  char v110;
  char v111;
  unsigned int v112;
  uint64_t v113;
  unint64_t v114;
  char v115;
  char v116;
  unsigned int v117;
  uint64_t v118;
  unint64_t v119;
  char v120;
  char v121;
  unsigned int v122;
  uint64_t v123;
  unint64_t v124;
  char v125;
  BOOL v126;
  uint64_t v127;
  uint64_t v128;

  v3 = (int *)MEMORY[0x24BE7AF60];
  v4 = (int *)MEMORY[0x24BE7AF50];
  v5 = (int *)MEMORY[0x24BE7AF48];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x24BE7AF60]) < *(_QWORD *)(a2 + (int)*MEMORY[0x24BE7AF50]))
  {
    v7 = 0x2572DB000uLL;
    v8 = 0x2572DB000uLL;
    v9 = (int *)MEMORY[0x24BE7AF30];
    v10 = 0x2572DB000uLL;
    v11 = 0x2572DB000uLL;
    v12 = 0x2572DB000uLL;
    v13 = 0x2572DB000uLL;
    v14 = 0x2572DB000uLL;
    v15 = 0x2572DB000uLL;
    v16 = 0x2572DB000uLL;
    v17 = 0x2572DB000uLL;
    v18 = 0x2572DB000uLL;
    v19 = 0x2572DB000uLL;
    v20 = 0x2572DB000uLL;
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v21 = 0;
      v22 = 0;
      v23 = 0;
      while (1)
      {
        v24 = *v3;
        v25 = *(_QWORD *)(a2 + v24);
        if (v25 == -1 || v25 >= *(_QWORD *)(a2 + *v4))
          break;
        v26 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v25);
        *(_QWORD *)(a2 + v24) = v25 + 1;
        v23 |= (unint64_t)(v26 & 0x7F) << v21;
        if ((v26 & 0x80) == 0)
          goto LABEL_12;
        v21 += 7;
        v27 = v22++ >= 9;
        if (v27)
        {
          v23 = 0;
          v28 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v28 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v23 = 0;
LABEL_14:
      if (v28 || (v23 & 7) == 4)
        break;
      switch((v23 >> 3))
      {
        case 1u:
          v30 = 0;
          v31 = 0;
          v32 = 0;
          *(_DWORD *)(a1 + *(int *)(v7 + 2824)) |= 1u;
          while (1)
          {
            v33 = *v3;
            v34 = *(_QWORD *)(a2 + v33);
            if (v34 == -1 || v34 >= *(_QWORD *)(a2 + *v4))
              break;
            v35 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v34);
            *(_QWORD *)(a2 + v33) = v34 + 1;
            v32 |= (unint64_t)(v35 & 0x7F) << v30;
            if ((v35 & 0x80) == 0)
              goto LABEL_141;
            v30 += 7;
            v27 = v31++ >= 9;
            if (v27)
            {
              v32 = 0;
              goto LABEL_143;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_141:
          if (*(_BYTE *)(a2 + *v5))
            v32 = 0;
LABEL_143:
          *(_QWORD *)(a1 + *(int *)(v8 + 2828)) = v32;
          continue;
        case 2u:
          v43 = 0;
          v44 = 0;
          v45 = 0;
          *(_DWORD *)(a1 + *(int *)(v7 + 2824)) |= 0x8000u;
          while (2)
          {
            v46 = *v3;
            v47 = *(_QWORD *)(a2 + v46);
            if (v47 == -1 || v47 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v48 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v47);
              *(_QWORD *)(a2 + v46) = v47 + 1;
              v45 |= (unint64_t)(v48 & 0x7F) << v43;
              if (v48 < 0)
              {
                v43 += 7;
                v27 = v44++ >= 9;
                if (v27)
                {
                  v45 = 0;
                  goto LABEL_147;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v45 = 0;
LABEL_147:
          v126 = v45 != 0;
          v127 = *(int *)(v10 + 2832);
          goto LABEL_164;
        case 3u:
          v49 = 0;
          v50 = 0;
          v51 = 0;
          *(_DWORD *)(a1 + *(int *)(v7 + 2824)) |= 8u;
          while (2)
          {
            v52 = *v3;
            v53 = *(_QWORD *)(a2 + v52);
            if (v53 == -1 || v53 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v54 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v53);
              *(_QWORD *)(a2 + v52) = v53 + 1;
              v51 |= (unint64_t)(v54 & 0x7F) << v49;
              if (v54 < 0)
              {
                v49 += 7;
                v27 = v50++ >= 9;
                if (v27)
                {
                  LODWORD(v51) = 0;
                  goto LABEL_151;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v51) = 0;
LABEL_151:
          v128 = *(int *)(v11 + 2836);
          goto LABEL_209;
        case 4u:
          v55 = 0;
          v56 = 0;
          v51 = 0;
          *(_DWORD *)(a1 + *(int *)(v7 + 2824)) |= 0x10u;
          while (2)
          {
            v57 = *v3;
            v58 = *(_QWORD *)(a2 + v57);
            if (v58 == -1 || v58 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v59 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v58);
              *(_QWORD *)(a2 + v57) = v58 + 1;
              v51 |= (unint64_t)(v59 & 0x7F) << v55;
              if (v59 < 0)
              {
                v55 += 7;
                v27 = v56++ >= 9;
                if (v27)
                {
                  LODWORD(v51) = 0;
                  goto LABEL_155;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v51) = 0;
LABEL_155:
          v128 = *(int *)(v12 + 2840);
          goto LABEL_209;
        case 5u:
          v60 = 0;
          v61 = 0;
          v51 = 0;
          *(_DWORD *)(a1 + *(int *)(v7 + 2824)) |= 2u;
          while (2)
          {
            v62 = *v3;
            v63 = *(_QWORD *)(a2 + v62);
            if (v63 == -1 || v63 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v64 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v63);
              *(_QWORD *)(a2 + v62) = v63 + 1;
              v51 |= (unint64_t)(v64 & 0x7F) << v60;
              if (v64 < 0)
              {
                v60 += 7;
                v27 = v61++ >= 9;
                if (v27)
                {
                  LODWORD(v51) = 0;
                  goto LABEL_159;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v51) = 0;
LABEL_159:
          v128 = *(int *)(v13 + 2844);
          goto LABEL_209;
        case 6u:
          v65 = 0;
          v66 = 0;
          v67 = 0;
          *(_DWORD *)(a1 + *(int *)(v7 + 2824)) |= 0x10000u;
          while (2)
          {
            v68 = *v3;
            v69 = *(_QWORD *)(a2 + v68);
            if (v69 == -1 || v69 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v70 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v69);
              *(_QWORD *)(a2 + v68) = v69 + 1;
              v67 |= (unint64_t)(v70 & 0x7F) << v65;
              if (v70 < 0)
              {
                v65 += 7;
                v27 = v66++ >= 9;
                if (v27)
                {
                  v67 = 0;
                  goto LABEL_163;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v67 = 0;
LABEL_163:
          v126 = v67 != 0;
          v127 = *(int *)(v14 + 2848);
LABEL_164:
          *(_BYTE *)(a1 + v127) = v126;
          continue;
        case 7u:
          v71 = 0;
          v72 = 0;
          v51 = 0;
          *(_DWORD *)(a1 + *(int *)(v7 + 2824)) |= 0x400u;
          while (2)
          {
            v73 = *v3;
            v74 = *(_QWORD *)(a2 + v73);
            if (v74 == -1 || v74 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v75 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v74);
              *(_QWORD *)(a2 + v73) = v74 + 1;
              v51 |= (unint64_t)(v75 & 0x7F) << v71;
              if (v75 < 0)
              {
                v71 += 7;
                v27 = v72++ >= 9;
                if (v27)
                {
                  LODWORD(v51) = 0;
                  goto LABEL_168;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v51) = 0;
LABEL_168:
          v128 = *(int *)(v15 + 2852);
          goto LABEL_209;
        case 8u:
          v76 = 0;
          v77 = 0;
          v51 = 0;
          *(_DWORD *)(a1 + *(int *)(v7 + 2824)) |= 0x800u;
          while (2)
          {
            v78 = *v3;
            v79 = *(_QWORD *)(a2 + v78);
            if (v79 == -1 || v79 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v80 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v79);
              *(_QWORD *)(a2 + v78) = v79 + 1;
              v51 |= (unint64_t)(v80 & 0x7F) << v76;
              if (v80 < 0)
              {
                v76 += 7;
                v27 = v77++ >= 9;
                if (v27)
                {
                  LODWORD(v51) = 0;
                  goto LABEL_172;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v51) = 0;
LABEL_172:
          v128 = *(int *)(v16 + 2856);
          goto LABEL_209;
        case 9u:
          v81 = 0;
          v82 = 0;
          v51 = 0;
          *(_DWORD *)(a1 + *(int *)(v7 + 2824)) |= 0x100u;
          while (2)
          {
            v83 = *v3;
            v84 = *(_QWORD *)(a2 + v83);
            if (v84 == -1 || v84 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v85 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v84);
              *(_QWORD *)(a2 + v83) = v84 + 1;
              v51 |= (unint64_t)(v85 & 0x7F) << v81;
              if (v85 < 0)
              {
                v81 += 7;
                v27 = v82++ >= 9;
                if (v27)
                {
                  LODWORD(v51) = 0;
                  goto LABEL_176;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v51) = 0;
LABEL_176:
          v128 = *(int *)(v17 + 2860);
          goto LABEL_209;
        case 0xAu:
          v86 = 0;
          v87 = 0;
          v51 = 0;
          *(_DWORD *)(a1 + *(int *)(v7 + 2824)) |= 0x200u;
          while (2)
          {
            v88 = *v3;
            v89 = *(_QWORD *)(a2 + v88);
            if (v89 == -1 || v89 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v90 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v89);
              *(_QWORD *)(a2 + v88) = v89 + 1;
              v51 |= (unint64_t)(v90 & 0x7F) << v86;
              if (v90 < 0)
              {
                v86 += 7;
                v27 = v87++ >= 9;
                if (v27)
                {
                  LODWORD(v51) = 0;
                  goto LABEL_180;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v51) = 0;
LABEL_180:
          v128 = *(int *)(v18 + 2864);
          goto LABEL_209;
        case 0xBu:
          v91 = 0;
          v92 = 0;
          v51 = 0;
          *(_DWORD *)(a1 + *(int *)(v7 + 2824)) |= 0x20u;
          while (2)
          {
            v93 = *v3;
            v94 = *(_QWORD *)(a2 + v93);
            if (v94 == -1 || v94 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v95 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v94);
              *(_QWORD *)(a2 + v93) = v94 + 1;
              v51 |= (unint64_t)(v95 & 0x7F) << v91;
              if (v95 < 0)
              {
                v91 += 7;
                v27 = v92++ >= 9;
                if (v27)
                {
                  LODWORD(v51) = 0;
                  goto LABEL_184;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v51) = 0;
LABEL_184:
          v128 = *(int *)(v19 + 2868);
          goto LABEL_209;
        case 0xCu:
          v96 = 0;
          v97 = 0;
          v51 = 0;
          *(_DWORD *)(a1 + *(int *)(v7 + 2824)) |= 0x40u;
          while (2)
          {
            v98 = *v3;
            v99 = *(_QWORD *)(a2 + v98);
            if (v99 == -1 || v99 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v100 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v99);
              *(_QWORD *)(a2 + v98) = v99 + 1;
              v51 |= (unint64_t)(v100 & 0x7F) << v96;
              if (v100 < 0)
              {
                v96 += 7;
                v27 = v97++ >= 9;
                if (v27)
                {
                  LODWORD(v51) = 0;
                  goto LABEL_188;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v51) = 0;
LABEL_188:
          v128 = *(int *)(v20 + 2872);
          goto LABEL_209;
        case 0xDu:
          v101 = 0;
          v102 = 0;
          v51 = 0;
          *(_DWORD *)(a1 + *(int *)(v7 + 2824)) |= 0x80u;
          while (2)
          {
            v103 = *v3;
            v104 = *(_QWORD *)(a2 + v103);
            if (v104 == -1 || v104 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v105 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v104);
              *(_QWORD *)(a2 + v103) = v104 + 1;
              v51 |= (unint64_t)(v105 & 0x7F) << v101;
              if (v105 < 0)
              {
                v101 += 7;
                v27 = v102++ >= 9;
                if (v27)
                {
                  LODWORD(v51) = 0;
                  goto LABEL_192;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v51) = 0;
LABEL_192:
          v128 = 40;
          goto LABEL_209;
        case 0xEu:
          v106 = 0;
          v107 = 0;
          v51 = 0;
          *(_DWORD *)(a1 + *(int *)(v7 + 2824)) |= 0x1000u;
          while (2)
          {
            v108 = *v3;
            v109 = *(_QWORD *)(a2 + v108);
            if (v109 == -1 || v109 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v110 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v109);
              *(_QWORD *)(a2 + v108) = v109 + 1;
              v51 |= (unint64_t)(v110 & 0x7F) << v106;
              if (v110 < 0)
              {
                v106 += 7;
                v27 = v107++ >= 9;
                if (v27)
                {
                  LODWORD(v51) = 0;
                  goto LABEL_196;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v51) = 0;
LABEL_196:
          v128 = 60;
          goto LABEL_209;
        case 0xFu:
          v111 = 0;
          v112 = 0;
          v51 = 0;
          *(_DWORD *)(a1 + *(int *)(v7 + 2824)) |= 0x2000u;
          while (2)
          {
            v113 = *v3;
            v114 = *(_QWORD *)(a2 + v113);
            if (v114 == -1 || v114 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v115 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v114);
              *(_QWORD *)(a2 + v113) = v114 + 1;
              v51 |= (unint64_t)(v115 & 0x7F) << v111;
              if (v115 < 0)
              {
                v111 += 7;
                v27 = v112++ >= 9;
                if (v27)
                {
                  LODWORD(v51) = 0;
                  goto LABEL_200;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v51) = 0;
LABEL_200:
          v128 = 64;
          goto LABEL_209;
        case 0x10u:
          v116 = 0;
          v117 = 0;
          v51 = 0;
          *(_DWORD *)(a1 + *(int *)(v7 + 2824)) |= 0x4000u;
          while (2)
          {
            v118 = *v3;
            v119 = *(_QWORD *)(a2 + v118);
            if (v119 == -1 || v119 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v120 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v119);
              *(_QWORD *)(a2 + v118) = v119 + 1;
              v51 |= (unint64_t)(v120 & 0x7F) << v116;
              if (v120 < 0)
              {
                v116 += 7;
                v27 = v117++ >= 9;
                if (v27)
                {
                  LODWORD(v51) = 0;
                  goto LABEL_204;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v51) = 0;
LABEL_204:
          v128 = 68;
          goto LABEL_209;
        case 0x11u:
          v121 = 0;
          v122 = 0;
          v51 = 0;
          *(_DWORD *)(a1 + *(int *)(v7 + 2824)) |= 4u;
          break;
        default:
          v36 = v8;
          v37 = v10;
          v38 = v7;
          v39 = v11;
          v40 = v12;
          v41 = a1;
          result = PBReaderSkipValueWithTag();
          v20 = 0x2572DB000;
          v13 = 0x2572DB000;
          a1 = v41;
          v14 = 0x2572DB000;
          v5 = (int *)MEMORY[0x24BE7AF48];
          v12 = v40;
          v15 = 0x2572DB000;
          v11 = v39;
          v16 = 0x2572DB000;
          v7 = v38;
          v18 = 0x2572DB000;
          v10 = v37;
          v17 = 0x2572DB000;
          v8 = v36;
          v19 = 0x2572DB000;
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v123 = *v3;
        v124 = *(_QWORD *)(a2 + v123);
        if (v124 == -1 || v124 >= *(_QWORD *)(a2 + *v4))
          break;
        v125 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v124);
        *(_QWORD *)(a2 + v123) = v124 + 1;
        v51 |= (unint64_t)(v125 & 0x7F) << v121;
        if ((v125 & 0x80) == 0)
          goto LABEL_206;
        v121 += 7;
        v27 = v122++ >= 9;
        if (v27)
        {
          LODWORD(v51) = 0;
          goto LABEL_208;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_206:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v51) = 0;
LABEL_208:
      v128 = 20;
LABEL_209:
      *(_DWORD *)(a1 + v128) = v51;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t AWDMETRICSCellularPowerLogNRNSAENDCEventReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  uint64_t v40;

  v3 = (int *)MEMORY[0x24BE7AF60];
  v4 = (int *)MEMORY[0x24BE7AF50];
  v5 = (int *)MEMORY[0x24BE7AF48];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x24BE7AF60]) < *(_QWORD *)(a2 + (int)*MEMORY[0x24BE7AF50]))
  {
    v7 = (int *)MEMORY[0x24BE7AF30];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = 0;
          v18 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 28) |= 1u;
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
              break;
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              goto LABEL_50;
            v17 += 7;
            v14 = v18++ >= 9;
            if (v14)
            {
              v19 = 0;
              goto LABEL_52;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_50:
          if (*(_BYTE *)(a2 + *v5))
            v19 = 0;
LABEL_52:
          *(_QWORD *)(a1 + 8) = v19;
          continue;
        case 2u:
          v24 = 0;
          v25 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 28) |= 2u;
          while (2)
          {
            v27 = *v3;
            v28 = *(_QWORD *)(a2 + v27);
            if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
              *(_QWORD *)(a2 + v27) = v28 + 1;
              v26 |= (unint64_t)(v29 & 0x7F) << v24;
              if (v29 < 0)
              {
                v24 += 7;
                v14 = v25++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_56;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_56:
          v40 = 16;
          goto LABEL_65;
        case 3u:
          v30 = 0;
          v31 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 28) |= 8u;
          while (2)
          {
            v32 = *v3;
            v33 = *(_QWORD *)(a2 + v32);
            if (v33 == -1 || v33 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v34 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v33);
              *(_QWORD *)(a2 + v32) = v33 + 1;
              v26 |= (unint64_t)(v34 & 0x7F) << v30;
              if (v34 < 0)
              {
                v30 += 7;
                v14 = v31++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_60;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_60:
          v40 = 24;
          goto LABEL_65;
        case 4u:
          v35 = 0;
          v36 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 28) |= 4u;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v37 = *v3;
        v38 = *(_QWORD *)(a2 + v37);
        if (v38 == -1 || v38 >= *(_QWORD *)(a2 + *v4))
          break;
        v39 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v38);
        *(_QWORD *)(a2 + v37) = v38 + 1;
        v26 |= (unint64_t)(v39 & 0x7F) << v35;
        if ((v39 & 0x80) == 0)
          goto LABEL_62;
        v35 += 7;
        v14 = v36++ >= 9;
        if (v14)
        {
          LODWORD(v26) = 0;
          goto LABEL_64;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_62:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v26) = 0;
LABEL_64:
      v40 = 20;
LABEL_65:
      *(_DWORD *)(a1 + v40) = v26;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t AWDMETRICSCellularPowerLogNRSARRCStateChangeReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  char v45;
  unsigned int v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  char v50;
  unsigned int v51;
  uint64_t v52;
  unint64_t v53;
  char v54;
  uint64_t v55;

  v3 = (int *)MEMORY[0x24BE7AF60];
  v4 = (int *)MEMORY[0x24BE7AF50];
  v5 = (int *)MEMORY[0x24BE7AF48];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x24BE7AF60]) < *(_QWORD *)(a2 + (int)*MEMORY[0x24BE7AF50]))
  {
    v7 = (int *)MEMORY[0x24BE7AF30];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = 0;
          v18 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 40) |= 1u;
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
              break;
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              goto LABEL_71;
            v17 += 7;
            v14 = v18++ >= 9;
            if (v14)
            {
              v19 = 0;
              goto LABEL_73;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_71:
          if (*(_BYTE *)(a2 + *v5))
            v19 = 0;
LABEL_73:
          *(_QWORD *)(a1 + 8) = v19;
          continue;
        case 2u:
          v24 = 0;
          v25 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 40) |= 0x20u;
          while (2)
          {
            v27 = *v3;
            v28 = *(_QWORD *)(a2 + v27);
            if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
              *(_QWORD *)(a2 + v27) = v28 + 1;
              v26 |= (unint64_t)(v29 & 0x7F) << v24;
              if (v29 < 0)
              {
                v24 += 7;
                v14 = v25++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_77;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_77:
          v55 = 32;
          goto LABEL_98;
        case 3u:
          v30 = 0;
          v31 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 40) |= 8u;
          while (2)
          {
            v32 = *v3;
            v33 = *(_QWORD *)(a2 + v32);
            if (v33 == -1 || v33 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v34 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v33);
              *(_QWORD *)(a2 + v32) = v33 + 1;
              v26 |= (unint64_t)(v34 & 0x7F) << v30;
              if (v34 < 0)
              {
                v30 += 7;
                v14 = v31++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_81;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_81:
          v55 = 24;
          goto LABEL_98;
        case 4u:
          v35 = 0;
          v36 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 40) |= 0x10u;
          while (2)
          {
            v37 = *v3;
            v38 = *(_QWORD *)(a2 + v37);
            if (v38 == -1 || v38 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v39 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v38);
              *(_QWORD *)(a2 + v37) = v38 + 1;
              v26 |= (unint64_t)(v39 & 0x7F) << v35;
              if (v39 < 0)
              {
                v35 += 7;
                v14 = v36++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_85;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_85:
          v55 = 28;
          goto LABEL_98;
        case 5u:
          v40 = 0;
          v41 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 40) |= 0x40u;
          while (2)
          {
            v42 = *v3;
            v43 = *(_QWORD *)(a2 + v42);
            if (v43 == -1 || v43 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v44 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v43);
              *(_QWORD *)(a2 + v42) = v43 + 1;
              v26 |= (unint64_t)(v44 & 0x7F) << v40;
              if (v44 < 0)
              {
                v40 += 7;
                v14 = v41++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_89;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_89:
          v55 = 36;
          goto LABEL_98;
        case 6u:
          v45 = 0;
          v46 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 40) |= 2u;
          while (2)
          {
            v47 = *v3;
            v48 = *(_QWORD *)(a2 + v47);
            if (v48 == -1 || v48 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v49 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v48);
              *(_QWORD *)(a2 + v47) = v48 + 1;
              v26 |= (unint64_t)(v49 & 0x7F) << v45;
              if (v49 < 0)
              {
                v45 += 7;
                v14 = v46++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_93;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_93:
          v55 = 16;
          goto LABEL_98;
        case 7u:
          v50 = 0;
          v51 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 40) |= 4u;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v52 = *v3;
        v53 = *(_QWORD *)(a2 + v52);
        if (v53 == -1 || v53 >= *(_QWORD *)(a2 + *v4))
          break;
        v54 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v53);
        *(_QWORD *)(a2 + v52) = v53 + 1;
        v26 |= (unint64_t)(v54 & 0x7F) << v50;
        if ((v54 & 0x80) == 0)
          goto LABEL_95;
        v50 += 7;
        v14 = v51++ >= 9;
        if (v14)
        {
          LODWORD(v26) = 0;
          goto LABEL_97;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_95:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v26) = 0;
LABEL_97:
      v55 = 20;
LABEL_98:
      *(_DWORD *)(a1 + v55) = v26;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t AWDMETRICSCellularPowerLogNRSCGRelReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  uint64_t v40;

  v3 = (int *)MEMORY[0x24BE7AF60];
  v4 = (int *)MEMORY[0x24BE7AF50];
  v5 = (int *)MEMORY[0x24BE7AF48];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x24BE7AF60]) < *(_QWORD *)(a2 + (int)*MEMORY[0x24BE7AF50]))
  {
    v7 = (int *)MEMORY[0x24BE7AF30];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = 0;
          v18 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 28) |= 1u;
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
              break;
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              goto LABEL_50;
            v17 += 7;
            v14 = v18++ >= 9;
            if (v14)
            {
              v19 = 0;
              goto LABEL_52;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_50:
          if (*(_BYTE *)(a2 + *v5))
            v19 = 0;
LABEL_52:
          *(_QWORD *)(a1 + 8) = v19;
          continue;
        case 2u:
          v24 = 0;
          v25 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 28) |= 2u;
          while (2)
          {
            v27 = *v3;
            v28 = *(_QWORD *)(a2 + v27);
            if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
              *(_QWORD *)(a2 + v27) = v28 + 1;
              v26 |= (unint64_t)(v29 & 0x7F) << v24;
              if (v29 < 0)
              {
                v24 += 7;
                v14 = v25++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_56;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_56:
          v40 = 16;
          goto LABEL_65;
        case 3u:
          v30 = 0;
          v31 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 28) |= 8u;
          while (2)
          {
            v32 = *v3;
            v33 = *(_QWORD *)(a2 + v32);
            if (v33 == -1 || v33 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v34 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v33);
              *(_QWORD *)(a2 + v32) = v33 + 1;
              v26 |= (unint64_t)(v34 & 0x7F) << v30;
              if (v34 < 0)
              {
                v30 += 7;
                v14 = v31++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_60;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_60:
          v40 = 24;
          goto LABEL_65;
        case 4u:
          v35 = 0;
          v36 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 28) |= 4u;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v37 = *v3;
        v38 = *(_QWORD *)(a2 + v37);
        if (v38 == -1 || v38 >= *(_QWORD *)(a2 + *v4))
          break;
        v39 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v38);
        *(_QWORD *)(a2 + v37) = v38 + 1;
        v26 |= (unint64_t)(v39 & 0x7F) << v35;
        if ((v39 & 0x80) == 0)
          goto LABEL_62;
        v35 += 7;
        v14 = v36++ >= 9;
        if (v14)
        {
          LODWORD(v26) = 0;
          goto LABEL_64;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_62:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v26) = 0;
LABEL_64:
      v40 = 20;
LABEL_65:
      *(_DWORD *)(a1 + v40) = v26;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t AWDMETRICSCellularPowerLogPLMNScanEventReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  char v45;
  unsigned int v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  uint64_t v50;

  v3 = (int *)MEMORY[0x24BE7AF60];
  v4 = (int *)MEMORY[0x24BE7AF50];
  v5 = (int *)MEMORY[0x24BE7AF48];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x24BE7AF60]) < *(_QWORD *)(a2 + (int)*MEMORY[0x24BE7AF50]))
  {
    v7 = (int *)MEMORY[0x24BE7AF30];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = 0;
          v18 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 36) |= 1u;
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
              break;
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              goto LABEL_64;
            v17 += 7;
            v14 = v18++ >= 9;
            if (v14)
            {
              v19 = 0;
              goto LABEL_66;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_64:
          if (*(_BYTE *)(a2 + *v5))
            v19 = 0;
LABEL_66:
          *(_QWORD *)(a1 + 8) = v19;
          continue;
        case 2u:
          v24 = 0;
          v25 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 36) |= 8u;
          while (2)
          {
            v27 = *v3;
            v28 = *(_QWORD *)(a2 + v27);
            if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
              *(_QWORD *)(a2 + v27) = v28 + 1;
              v26 |= (unint64_t)(v29 & 0x7F) << v24;
              if (v29 < 0)
              {
                v24 += 7;
                v14 = v25++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_70;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_70:
          v50 = 24;
          goto LABEL_87;
        case 3u:
          v30 = 0;
          v31 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 36) |= 0x10u;
          while (2)
          {
            v32 = *v3;
            v33 = *(_QWORD *)(a2 + v32);
            if (v33 == -1 || v33 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v34 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v33);
              *(_QWORD *)(a2 + v32) = v33 + 1;
              v26 |= (unint64_t)(v34 & 0x7F) << v30;
              if (v34 < 0)
              {
                v30 += 7;
                v14 = v31++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_74;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_74:
          v50 = 28;
          goto LABEL_87;
        case 4u:
          v35 = 0;
          v36 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 36) |= 4u;
          while (2)
          {
            v37 = *v3;
            v38 = *(_QWORD *)(a2 + v37);
            if (v38 == -1 || v38 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v39 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v38);
              *(_QWORD *)(a2 + v37) = v38 + 1;
              v26 |= (unint64_t)(v39 & 0x7F) << v35;
              if (v39 < 0)
              {
                v35 += 7;
                v14 = v36++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_78;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_78:
          v50 = 20;
          goto LABEL_87;
        case 5u:
          v40 = 0;
          v41 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 36) |= 2u;
          while (2)
          {
            v42 = *v3;
            v43 = *(_QWORD *)(a2 + v42);
            if (v43 == -1 || v43 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v44 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v43);
              *(_QWORD *)(a2 + v42) = v43 + 1;
              v26 |= (unint64_t)(v44 & 0x7F) << v40;
              if (v44 < 0)
              {
                v40 += 7;
                v14 = v41++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_82;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_82:
          v50 = 16;
          goto LABEL_87;
        case 6u:
          v45 = 0;
          v46 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 36) |= 0x20u;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v47 = *v3;
        v48 = *(_QWORD *)(a2 + v47);
        if (v48 == -1 || v48 >= *(_QWORD *)(a2 + *v4))
          break;
        v49 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v48);
        *(_QWORD *)(a2 + v47) = v48 + 1;
        v26 |= (unint64_t)(v49 & 0x7F) << v45;
        if ((v49 & 0x80) == 0)
          goto LABEL_84;
        v45 += 7;
        v14 = v46++ >= 9;
        if (v14)
        {
          LODWORD(v26) = 0;
          goto LABEL_86;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_84:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v26) = 0;
LABEL_86:
      v50 = 32;
LABEL_87:
      *(_DWORD *)(a1 + v50) = v26;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t AWDMETRICSCellularPowerLogPLMNSearchEventReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  char v45;
  unsigned int v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  char v50;
  unsigned int v51;
  uint64_t v52;
  unint64_t v53;
  char v54;
  uint64_t v55;

  v3 = (int *)MEMORY[0x24BE7AF60];
  v4 = (int *)MEMORY[0x24BE7AF50];
  v5 = (int *)MEMORY[0x24BE7AF48];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x24BE7AF60]) < *(_QWORD *)(a2 + (int)*MEMORY[0x24BE7AF50]))
  {
    v7 = (int *)MEMORY[0x24BE7AF30];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = 0;
          v18 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 40) |= 1u;
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
              break;
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              goto LABEL_71;
            v17 += 7;
            v14 = v18++ >= 9;
            if (v14)
            {
              v19 = 0;
              goto LABEL_73;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_71:
          if (*(_BYTE *)(a2 + *v5))
            v19 = 0;
LABEL_73:
          *(_QWORD *)(a1 + 8) = v19;
          continue;
        case 2u:
          v24 = 0;
          v25 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 40) |= 0x20u;
          while (2)
          {
            v27 = *v3;
            v28 = *(_QWORD *)(a2 + v27);
            if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
              *(_QWORD *)(a2 + v27) = v28 + 1;
              v26 |= (unint64_t)(v29 & 0x7F) << v24;
              if (v29 < 0)
              {
                v24 += 7;
                v14 = v25++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_77;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_77:
          v55 = 32;
          goto LABEL_98;
        case 3u:
          v30 = 0;
          v31 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 40) |= 8u;
          while (2)
          {
            v32 = *v3;
            v33 = *(_QWORD *)(a2 + v32);
            if (v33 == -1 || v33 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v34 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v33);
              *(_QWORD *)(a2 + v32) = v33 + 1;
              v26 |= (unint64_t)(v34 & 0x7F) << v30;
              if (v34 < 0)
              {
                v30 += 7;
                v14 = v31++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_81;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_81:
          v55 = 24;
          goto LABEL_98;
        case 4u:
          v35 = 0;
          v36 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 40) |= 0x10u;
          while (2)
          {
            v37 = *v3;
            v38 = *(_QWORD *)(a2 + v37);
            if (v38 == -1 || v38 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v39 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v38);
              *(_QWORD *)(a2 + v37) = v38 + 1;
              v26 |= (unint64_t)(v39 & 0x7F) << v35;
              if (v39 < 0)
              {
                v35 += 7;
                v14 = v36++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_85;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_85:
          v55 = 28;
          goto LABEL_98;
        case 5u:
          v40 = 0;
          v41 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 40) |= 4u;
          while (2)
          {
            v42 = *v3;
            v43 = *(_QWORD *)(a2 + v42);
            if (v43 == -1 || v43 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v44 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v43);
              *(_QWORD *)(a2 + v42) = v43 + 1;
              v26 |= (unint64_t)(v44 & 0x7F) << v40;
              if (v44 < 0)
              {
                v40 += 7;
                v14 = v41++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_89;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_89:
          v55 = 20;
          goto LABEL_98;
        case 6u:
          v45 = 0;
          v46 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 40) |= 2u;
          while (2)
          {
            v47 = *v3;
            v48 = *(_QWORD *)(a2 + v47);
            if (v48 == -1 || v48 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v49 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v48);
              *(_QWORD *)(a2 + v47) = v48 + 1;
              v26 |= (unint64_t)(v49 & 0x7F) << v45;
              if (v49 < 0)
              {
                v45 += 7;
                v14 = v46++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_93;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_93:
          v55 = 16;
          goto LABEL_98;
        case 7u:
          v50 = 0;
          v51 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 40) |= 0x40u;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v52 = *v3;
        v53 = *(_QWORD *)(a2 + v52);
        if (v53 == -1 || v53 >= *(_QWORD *)(a2 + *v4))
          break;
        v54 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v53);
        *(_QWORD *)(a2 + v52) = v53 + 1;
        v26 |= (unint64_t)(v54 & 0x7F) << v50;
        if ((v54 & 0x80) == 0)
          goto LABEL_95;
        v50 += 7;
        v14 = v51++ >= 9;
        if (v14)
        {
          LODWORD(v26) = 0;
          goto LABEL_97;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_95:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v26) = 0;
LABEL_97:
      v55 = 36;
LABEL_98:
      *(_DWORD *)(a1 + v55) = v26;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t AWDMETRICSCellularPowerLogRATChangeEventReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  uint64_t result;
  uint64_t v36;

  v3 = (int *)MEMORY[0x24BE7AF60];
  v4 = (int *)MEMORY[0x24BE7AF50];
  v5 = (int *)MEMORY[0x24BE7AF48];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x24BE7AF60]) < *(_QWORD *)(a2 + (int)*MEMORY[0x24BE7AF50]))
  {
    v7 = (int *)MEMORY[0x24BE7AF30];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        v24 = 0;
        v25 = 0;
        v26 = 0;
        *(_BYTE *)(a1 + 24) |= 4u;
        while (1)
        {
          v27 = *v3;
          v28 = *(_QWORD *)(a2 + v27);
          if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
            break;
          v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
          *(_QWORD *)(a2 + v27) = v28 + 1;
          v26 |= (unint64_t)(v29 & 0x7F) << v24;
          if ((v29 & 0x80) == 0)
            goto LABEL_49;
          v24 += 7;
          v14 = v25++ >= 9;
          if (v14)
          {
            LODWORD(v26) = 0;
            goto LABEL_51;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_49:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v26) = 0;
LABEL_51:
        v36 = 20;
      }
      else
      {
        if ((_DWORD)v17 != 2)
        {
          if ((_DWORD)v17 == 1)
          {
            v18 = 0;
            v19 = 0;
            v20 = 0;
            *(_BYTE *)(a1 + 24) |= 1u;
            while (1)
            {
              v21 = *v3;
              v22 = *(_QWORD *)(a2 + v21);
              if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
                break;
              v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
              *(_QWORD *)(a2 + v21) = v22 + 1;
              v20 |= (unint64_t)(v23 & 0x7F) << v18;
              if ((v23 & 0x80) == 0)
                goto LABEL_45;
              v18 += 7;
              v14 = v19++ >= 9;
              if (v14)
              {
                v20 = 0;
                goto LABEL_47;
              }
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_45:
            if (*(_BYTE *)(a2 + *v5))
              v20 = 0;
LABEL_47:
            *(_QWORD *)(a1 + 8) = v20;
          }
          else
          {
            result = PBReaderSkipValueWithTag();
            if (!(_DWORD)result)
              return result;
          }
          continue;
        }
        v30 = 0;
        v31 = 0;
        v26 = 0;
        *(_BYTE *)(a1 + 24) |= 2u;
        while (1)
        {
          v32 = *v3;
          v33 = *(_QWORD *)(a2 + v32);
          if (v33 == -1 || v33 >= *(_QWORD *)(a2 + *v4))
            break;
          v34 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v33);
          *(_QWORD *)(a2 + v32) = v33 + 1;
          v26 |= (unint64_t)(v34 & 0x7F) << v30;
          if ((v34 & 0x80) == 0)
            goto LABEL_53;
          v30 += 7;
          v14 = v31++ >= 9;
          if (v14)
          {
            LODWORD(v26) = 0;
            goto LABEL_55;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_53:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v26) = 0;
LABEL_55:
        v36 = 16;
      }
      *(_DWORD *)(a1 + v36) = v26;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t AWDMETRICSCellularPowerLogServiceEventReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  uint64_t result;
  uint64_t v36;

  v3 = (int *)MEMORY[0x24BE7AF60];
  v4 = (int *)MEMORY[0x24BE7AF50];
  v5 = (int *)MEMORY[0x24BE7AF48];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x24BE7AF60]) < *(_QWORD *)(a2 + (int)*MEMORY[0x24BE7AF50]))
  {
    v7 = (int *)MEMORY[0x24BE7AF30];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        v24 = 0;
        v25 = 0;
        v26 = 0;
        *(_BYTE *)(a1 + 24) |= 4u;
        while (1)
        {
          v27 = *v3;
          v28 = *(_QWORD *)(a2 + v27);
          if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
            break;
          v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
          *(_QWORD *)(a2 + v27) = v28 + 1;
          v26 |= (unint64_t)(v29 & 0x7F) << v24;
          if ((v29 & 0x80) == 0)
            goto LABEL_49;
          v24 += 7;
          v14 = v25++ >= 9;
          if (v14)
          {
            LODWORD(v26) = 0;
            goto LABEL_51;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_49:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v26) = 0;
LABEL_51:
        v36 = 20;
      }
      else
      {
        if ((_DWORD)v17 != 2)
        {
          if ((_DWORD)v17 == 1)
          {
            v18 = 0;
            v19 = 0;
            v20 = 0;
            *(_BYTE *)(a1 + 24) |= 1u;
            while (1)
            {
              v21 = *v3;
              v22 = *(_QWORD *)(a2 + v21);
              if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
                break;
              v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
              *(_QWORD *)(a2 + v21) = v22 + 1;
              v20 |= (unint64_t)(v23 & 0x7F) << v18;
              if ((v23 & 0x80) == 0)
                goto LABEL_45;
              v18 += 7;
              v14 = v19++ >= 9;
              if (v14)
              {
                v20 = 0;
                goto LABEL_47;
              }
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_45:
            if (*(_BYTE *)(a2 + *v5))
              v20 = 0;
LABEL_47:
            *(_QWORD *)(a1 + 8) = v20;
          }
          else
          {
            result = PBReaderSkipValueWithTag();
            if (!(_DWORD)result)
              return result;
          }
          continue;
        }
        v30 = 0;
        v31 = 0;
        v26 = 0;
        *(_BYTE *)(a1 + 24) |= 2u;
        while (1)
        {
          v32 = *v3;
          v33 = *(_QWORD *)(a2 + v32);
          if (v33 == -1 || v33 >= *(_QWORD *)(a2 + *v4))
            break;
          v34 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v33);
          *(_QWORD *)(a2 + v32) = v33 + 1;
          v26 |= (unint64_t)(v34 & 0x7F) << v30;
          if ((v34 & 0x80) == 0)
            goto LABEL_53;
          v30 += 7;
          v14 = v31++ >= 9;
          if (v14)
          {
            LODWORD(v26) = 0;
            goto LABEL_55;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_53:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v26) = 0;
LABEL_55:
        v36 = 16;
      }
      *(_DWORD *)(a1 + v36) = v26;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t AWDMETRICSCellularPowerLogShutdownReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;

  v3 = (int *)MEMORY[0x24BE7AF60];
  v4 = (int *)MEMORY[0x24BE7AF50];
  v5 = (int *)MEMORY[0x24BE7AF48];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x24BE7AF60]) < *(_QWORD *)(a2 + (int)*MEMORY[0x24BE7AF50]))
  {
    v7 = (int *)MEMORY[0x24BE7AF30];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = 0;
          v18 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 32) |= 2u;
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
              break;
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              goto LABEL_50;
            v17 += 7;
            v14 = v18++ >= 9;
            if (v14)
            {
              v19 = 0;
              goto LABEL_52;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_50:
          if (*(_BYTE *)(a2 + *v5))
            v19 = 0;
LABEL_52:
          v40 = 16;
          goto LABEL_61;
        case 2u:
          v24 = 0;
          v25 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 32) |= 4u;
          while (2)
          {
            v27 = *v3;
            v28 = *(_QWORD *)(a2 + v27);
            if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
              *(_QWORD *)(a2 + v27) = v28 + 1;
              v26 |= (unint64_t)(v29 & 0x7F) << v24;
              if (v29 < 0)
              {
                v24 += 7;
                v14 = v25++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_56;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_56:
          v41 = 24;
          goto LABEL_66;
        case 3u:
          v30 = 0;
          v31 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 32) |= 1u;
          while (2)
          {
            v32 = *v3;
            v33 = *(_QWORD *)(a2 + v32);
            if (v33 == -1 || v33 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v34 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v33);
              *(_QWORD *)(a2 + v32) = v33 + 1;
              v19 |= (unint64_t)(v34 & 0x7F) << v30;
              if (v34 < 0)
              {
                v30 += 7;
                v14 = v31++ >= 9;
                if (v14)
                {
                  v19 = 0;
                  goto LABEL_60;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v19 = 0;
LABEL_60:
          v40 = 8;
LABEL_61:
          *(_QWORD *)(a1 + v40) = v19;
          continue;
        case 4u:
          v35 = 0;
          v36 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 32) |= 8u;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v37 = *v3;
        v38 = *(_QWORD *)(a2 + v37);
        if (v38 == -1 || v38 >= *(_QWORD *)(a2 + *v4))
          break;
        v39 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v38);
        *(_QWORD *)(a2 + v37) = v38 + 1;
        v26 |= (unint64_t)(v39 & 0x7F) << v35;
        if ((v39 & 0x80) == 0)
          goto LABEL_63;
        v35 += 7;
        v14 = v36++ >= 9;
        if (v14)
        {
          LODWORD(v26) = 0;
          goto LABEL_65;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_63:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v26) = 0;
LABEL_65:
      v41 = 28;
LABEL_66:
      *(_DWORD *)(a1 + v41) = v26;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t AWDMETRICSCellularPowerLogSystemEventReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  uint64_t result;
  uint64_t v36;

  v3 = (int *)MEMORY[0x24BE7AF60];
  v4 = (int *)MEMORY[0x24BE7AF50];
  v5 = (int *)MEMORY[0x24BE7AF48];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x24BE7AF60]) < *(_QWORD *)(a2 + (int)*MEMORY[0x24BE7AF50]))
  {
    v7 = (int *)MEMORY[0x24BE7AF30];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        v24 = 0;
        v25 = 0;
        v26 = 0;
        *(_BYTE *)(a1 + 24) |= 4u;
        while (1)
        {
          v27 = *v3;
          v28 = *(_QWORD *)(a2 + v27);
          if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
            break;
          v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
          *(_QWORD *)(a2 + v27) = v28 + 1;
          v26 |= (unint64_t)(v29 & 0x7F) << v24;
          if ((v29 & 0x80) == 0)
            goto LABEL_49;
          v24 += 7;
          v14 = v25++ >= 9;
          if (v14)
          {
            LODWORD(v26) = 0;
            goto LABEL_51;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_49:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v26) = 0;
LABEL_51:
        v36 = 20;
      }
      else
      {
        if ((_DWORD)v17 != 2)
        {
          if ((_DWORD)v17 == 1)
          {
            v18 = 0;
            v19 = 0;
            v20 = 0;
            *(_BYTE *)(a1 + 24) |= 1u;
            while (1)
            {
              v21 = *v3;
              v22 = *(_QWORD *)(a2 + v21);
              if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
                break;
              v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
              *(_QWORD *)(a2 + v21) = v22 + 1;
              v20 |= (unint64_t)(v23 & 0x7F) << v18;
              if ((v23 & 0x80) == 0)
                goto LABEL_45;
              v18 += 7;
              v14 = v19++ >= 9;
              if (v14)
              {
                v20 = 0;
                goto LABEL_47;
              }
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_45:
            if (*(_BYTE *)(a2 + *v5))
              v20 = 0;
LABEL_47:
            *(_QWORD *)(a1 + 8) = v20;
          }
          else
          {
            result = PBReaderSkipValueWithTag();
            if (!(_DWORD)result)
              return result;
          }
          continue;
        }
        v30 = 0;
        v31 = 0;
        v26 = 0;
        *(_BYTE *)(a1 + 24) |= 2u;
        while (1)
        {
          v32 = *v3;
          v33 = *(_QWORD *)(a2 + v32);
          if (v33 == -1 || v33 >= *(_QWORD *)(a2 + *v4))
            break;
          v34 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v33);
          *(_QWORD *)(a2 + v32) = v33 + 1;
          v26 |= (unint64_t)(v34 & 0x7F) << v30;
          if ((v34 & 0x80) == 0)
            goto LABEL_53;
          v30 += 7;
          v14 = v31++ >= 9;
          if (v14)
          {
            LODWORD(v26) = 0;
            goto LABEL_55;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_53:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v26) = 0;
LABEL_55:
        v36 = 16;
      }
      *(_DWORD *)(a1 + v36) = v26;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t AWDMETRICSCellularPowerLogWCDMACDRXConfigReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  uint64_t result;
  uint64_t v36;

  v3 = (int *)MEMORY[0x24BE7AF60];
  v4 = (int *)MEMORY[0x24BE7AF50];
  v5 = (int *)MEMORY[0x24BE7AF48];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x24BE7AF60]) < *(_QWORD *)(a2 + (int)*MEMORY[0x24BE7AF50]))
  {
    v7 = (int *)MEMORY[0x24BE7AF30];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        v24 = 0;
        v25 = 0;
        v26 = 0;
        *(_BYTE *)(a1 + 24) |= 4u;
        while (1)
        {
          v27 = *v3;
          v28 = *(_QWORD *)(a2 + v27);
          if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
            break;
          v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
          *(_QWORD *)(a2 + v27) = v28 + 1;
          v26 |= (unint64_t)(v29 & 0x7F) << v24;
          if ((v29 & 0x80) == 0)
            goto LABEL_49;
          v24 += 7;
          v14 = v25++ >= 9;
          if (v14)
          {
            LODWORD(v26) = 0;
            goto LABEL_51;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_49:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v26) = 0;
LABEL_51:
        v36 = 20;
      }
      else
      {
        if ((_DWORD)v17 != 2)
        {
          if ((_DWORD)v17 == 1)
          {
            v18 = 0;
            v19 = 0;
            v20 = 0;
            *(_BYTE *)(a1 + 24) |= 1u;
            while (1)
            {
              v21 = *v3;
              v22 = *(_QWORD *)(a2 + v21);
              if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
                break;
              v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
              *(_QWORD *)(a2 + v21) = v22 + 1;
              v20 |= (unint64_t)(v23 & 0x7F) << v18;
              if ((v23 & 0x80) == 0)
                goto LABEL_45;
              v18 += 7;
              v14 = v19++ >= 9;
              if (v14)
              {
                v20 = 0;
                goto LABEL_47;
              }
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_45:
            if (*(_BYTE *)(a2 + *v5))
              v20 = 0;
LABEL_47:
            *(_QWORD *)(a1 + 8) = v20;
          }
          else
          {
            result = PBReaderSkipValueWithTag();
            if (!(_DWORD)result)
              return result;
          }
          continue;
        }
        v30 = 0;
        v31 = 0;
        v26 = 0;
        *(_BYTE *)(a1 + 24) |= 2u;
        while (1)
        {
          v32 = *v3;
          v33 = *(_QWORD *)(a2 + v32);
          if (v33 == -1 || v33 >= *(_QWORD *)(a2 + *v4))
            break;
          v34 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v33);
          *(_QWORD *)(a2 + v32) = v33 + 1;
          v26 |= (unint64_t)(v34 & 0x7F) << v30;
          if ((v34 & 0x80) == 0)
            goto LABEL_53;
          v30 += 7;
          v14 = v31++ >= 9;
          if (v14)
          {
            LODWORD(v26) = 0;
            goto LABEL_55;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_53:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v26) = 0;
LABEL_55:
        v36 = 16;
      }
      *(_DWORD *)(a1 + v36) = v26;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t AWDMETRICSCellularPowerLogWCDMARRCStateChangeReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  char v45;
  unsigned int v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  uint64_t v50;

  v3 = (int *)MEMORY[0x24BE7AF60];
  v4 = (int *)MEMORY[0x24BE7AF50];
  v5 = (int *)MEMORY[0x24BE7AF48];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x24BE7AF60]) < *(_QWORD *)(a2 + (int)*MEMORY[0x24BE7AF50]))
  {
    v7 = (int *)MEMORY[0x24BE7AF30];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = 0;
          v18 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 36) |= 1u;
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
              break;
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              goto LABEL_64;
            v17 += 7;
            v14 = v18++ >= 9;
            if (v14)
            {
              v19 = 0;
              goto LABEL_66;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_64:
          if (*(_BYTE *)(a2 + *v5))
            v19 = 0;
LABEL_66:
          *(_QWORD *)(a1 + 8) = v19;
          continue;
        case 2u:
          v24 = 0;
          v25 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 36) |= 0x10u;
          while (2)
          {
            v27 = *v3;
            v28 = *(_QWORD *)(a2 + v27);
            if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
              *(_QWORD *)(a2 + v27) = v28 + 1;
              v26 |= (unint64_t)(v29 & 0x7F) << v24;
              if (v29 < 0)
              {
                v24 += 7;
                v14 = v25++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_70;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_70:
          v50 = 28;
          goto LABEL_87;
        case 3u:
          v30 = 0;
          v31 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 36) |= 4u;
          while (2)
          {
            v32 = *v3;
            v33 = *(_QWORD *)(a2 + v32);
            if (v33 == -1 || v33 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v34 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v33);
              *(_QWORD *)(a2 + v32) = v33 + 1;
              v26 |= (unint64_t)(v34 & 0x7F) << v30;
              if (v34 < 0)
              {
                v30 += 7;
                v14 = v31++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_74;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_74:
          v50 = 20;
          goto LABEL_87;
        case 4u:
          v35 = 0;
          v36 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 36) |= 8u;
          while (2)
          {
            v37 = *v3;
            v38 = *(_QWORD *)(a2 + v37);
            if (v38 == -1 || v38 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v39 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v38);
              *(_QWORD *)(a2 + v37) = v38 + 1;
              v26 |= (unint64_t)(v39 & 0x7F) << v35;
              if (v39 < 0)
              {
                v35 += 7;
                v14 = v36++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_78;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_78:
          v50 = 24;
          goto LABEL_87;
        case 5u:
          v40 = 0;
          v41 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 36) |= 0x20u;
          while (2)
          {
            v42 = *v3;
            v43 = *(_QWORD *)(a2 + v42);
            if (v43 == -1 || v43 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v44 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v43);
              *(_QWORD *)(a2 + v42) = v43 + 1;
              v26 |= (unint64_t)(v44 & 0x7F) << v40;
              if (v44 < 0)
              {
                v40 += 7;
                v14 = v41++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_82;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_82:
          v50 = 32;
          goto LABEL_87;
        case 6u:
          v45 = 0;
          v46 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 36) |= 2u;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v47 = *v3;
        v48 = *(_QWORD *)(a2 + v47);
        if (v48 == -1 || v48 >= *(_QWORD *)(a2 + *v4))
          break;
        v49 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v48);
        *(_QWORD *)(a2 + v47) = v48 + 1;
        v26 |= (unint64_t)(v49 & 0x7F) << v45;
        if ((v49 & 0x80) == 0)
          goto LABEL_84;
        v45 += 7;
        v14 = v46++ >= 9;
        if (v14)
        {
          LODWORD(v26) = 0;
          goto LABEL_86;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_84:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v26) = 0;
LABEL_86:
      v50 = 16;
LABEL_87:
      *(_DWORD *)(a1 + v50) = v26;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL AWDMETRICSMBinReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  BOOL v23;
  int *v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  char v29;

  v3 = (int *)MEMORY[0x24BE7AF60];
  v4 = (int *)MEMORY[0x24BE7AF50];
  v5 = (int *)MEMORY[0x24BE7AF48];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x24BE7AF60]) < *(_QWORD *)(a2 + (int)*MEMORY[0x24BE7AF50]))
  {
    v7 = (int *)MEMORY[0x24BE7AF30];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        *(_BYTE *)(a1 + 16) |= 1u;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
          {
            v24 = &OBJC_IVAR___AWDMETRICSMBin__binId;
            goto LABEL_38;
          }
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            break;
          v17 += 7;
          v23 = v18++ > 8;
          if (v23)
          {
            LODWORD(v19) = 0;
            v24 = &OBJC_IVAR___AWDMETRICSMBin__binId;
            goto LABEL_41;
          }
        }
        v24 = &OBJC_IVAR___AWDMETRICSMBin__binId;
LABEL_39:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v19) = 0;
LABEL_41:
        *(_DWORD *)(a1 + *v24) = v19;
        goto LABEL_42;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_42:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v25 = 0;
    v26 = 0;
    v19 = 0;
    *(_BYTE *)(a1 + 16) |= 2u;
    while (1)
    {
      v27 = *v3;
      v28 = *(_QWORD *)(a2 + v27);
      if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
        break;
      v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
      *(_QWORD *)(a2 + v27) = v28 + 1;
      v19 |= (unint64_t)(v29 & 0x7F) << v25;
      if ((v29 & 0x80) == 0)
      {
        v24 = &OBJC_IVAR___AWDMETRICSMBin__duration;
        goto LABEL_39;
      }
      v25 += 7;
      v23 = v26++ > 8;
      if (v23)
      {
        LODWORD(v19) = 0;
        v24 = &OBJC_IVAR___AWDMETRICSMBin__duration;
        goto LABEL_41;
      }
    }
    v24 = &OBJC_IVAR___AWDMETRICSMBin__duration;
LABEL_38:
    *(_BYTE *)(a2 + *v5) = 1;
    goto LABEL_39;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL AWDMETRICSMCarrierComponentInfoReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  BOOL v23;
  int *v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  unint64_t v43;
  char v44;

  v3 = (int *)MEMORY[0x24BE7AF60];
  v4 = (int *)MEMORY[0x24BE7AF50];
  v5 = (int *)MEMORY[0x24BE7AF48];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x24BE7AF60]) < *(_QWORD *)(a2 + (int)*MEMORY[0x24BE7AF50]))
  {
    v7 = (int *)MEMORY[0x24BE7AF30];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = 0;
          v18 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 28) |= 1u;
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            {
              v24 = &OBJC_IVAR___AWDMETRICSMCarrierComponentInfo__band;
              goto LABEL_61;
            }
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              break;
            v17 += 7;
            v23 = v18++ > 8;
            if (v23)
            {
              LODWORD(v19) = 0;
              v24 = &OBJC_IVAR___AWDMETRICSMCarrierComponentInfo__band;
              goto LABEL_64;
            }
          }
          v24 = &OBJC_IVAR___AWDMETRICSMCarrierComponentInfo__band;
          goto LABEL_62;
        case 2u:
          v25 = 0;
          v26 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 28) |= 2u;
          while (2)
          {
            v27 = *v3;
            v28 = *(_QWORD *)(a2 + v27);
            if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
            {
              v24 = &OBJC_IVAR___AWDMETRICSMCarrierComponentInfo__bandwidth;
              goto LABEL_61;
            }
            v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
            *(_QWORD *)(a2 + v27) = v28 + 1;
            v19 |= (unint64_t)(v29 & 0x7F) << v25;
            if (v29 < 0)
            {
              v25 += 7;
              v23 = v26++ > 8;
              if (v23)
              {
                LODWORD(v19) = 0;
                v24 = &OBJC_IVAR___AWDMETRICSMCarrierComponentInfo__bandwidth;
                goto LABEL_64;
              }
              continue;
            }
            break;
          }
          v24 = &OBJC_IVAR___AWDMETRICSMCarrierComponentInfo__bandwidth;
          goto LABEL_62;
        case 3u:
          v30 = 0;
          v31 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 28) |= 8u;
          while (2)
          {
            v32 = *v3;
            v33 = *(_QWORD *)(a2 + v32);
            if (v33 == -1 || v33 >= *(_QWORD *)(a2 + *v4))
            {
              v24 = &OBJC_IVAR___AWDMETRICSMCarrierComponentInfo__earfcn;
              goto LABEL_61;
            }
            v34 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v33);
            *(_QWORD *)(a2 + v32) = v33 + 1;
            v19 |= (unint64_t)(v34 & 0x7F) << v30;
            if (v34 < 0)
            {
              v30 += 7;
              v23 = v31++ > 8;
              if (v23)
              {
                LODWORD(v19) = 0;
                v24 = &OBJC_IVAR___AWDMETRICSMCarrierComponentInfo__earfcn;
                goto LABEL_64;
              }
              continue;
            }
            break;
          }
          v24 = &OBJC_IVAR___AWDMETRICSMCarrierComponentInfo__earfcn;
          goto LABEL_62;
        case 4u:
          v35 = 0;
          v36 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 28) |= 0x10u;
          while (2)
          {
            v37 = *v3;
            v38 = *(_QWORD *)(a2 + v37);
            if (v38 == -1 || v38 >= *(_QWORD *)(a2 + *v4))
            {
              v24 = &OBJC_IVAR___AWDMETRICSMCarrierComponentInfo__type;
              goto LABEL_61;
            }
            v39 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v38);
            *(_QWORD *)(a2 + v37) = v38 + 1;
            v19 |= (unint64_t)(v39 & 0x7F) << v35;
            if (v39 < 0)
            {
              v35 += 7;
              v23 = v36++ > 8;
              if (v23)
              {
                LODWORD(v19) = 0;
                v24 = &OBJC_IVAR___AWDMETRICSMCarrierComponentInfo__type;
                goto LABEL_64;
              }
              continue;
            }
            break;
          }
          v24 = &OBJC_IVAR___AWDMETRICSMCarrierComponentInfo__type;
          goto LABEL_62;
        case 5u:
          v40 = 0;
          v41 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 28) |= 4u;
          break;
        default:
          if ((PBReaderSkipValueWithTag() & 1) != 0)
            continue;
          return 0;
      }
      while (1)
      {
        v42 = *v3;
        v43 = *(_QWORD *)(a2 + v42);
        if (v43 == -1 || v43 >= *(_QWORD *)(a2 + *v4))
          break;
        v44 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v43);
        *(_QWORD *)(a2 + v42) = v43 + 1;
        v19 |= (unint64_t)(v44 & 0x7F) << v40;
        if ((v44 & 0x80) == 0)
        {
          v24 = &OBJC_IVAR___AWDMETRICSMCarrierComponentInfo__duplex;
          goto LABEL_62;
        }
        v40 += 7;
        v23 = v41++ > 8;
        if (v23)
        {
          LODWORD(v19) = 0;
          v24 = &OBJC_IVAR___AWDMETRICSMCarrierComponentInfo__duplex;
          goto LABEL_64;
        }
      }
      v24 = &OBJC_IVAR___AWDMETRICSMCarrierComponentInfo__duplex;
LABEL_61:
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_62:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v19) = 0;
LABEL_64:
      *(_DWORD *)(a1 + *v24) = v19;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t AWDMETRICSCellularPowerLogNRFRCoverageReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  uint64_t v40;

  v3 = (int *)MEMORY[0x24BE7AF60];
  v4 = (int *)MEMORY[0x24BE7AF50];
  v5 = (int *)MEMORY[0x24BE7AF48];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x24BE7AF60]) < *(_QWORD *)(a2 + (int)*MEMORY[0x24BE7AF50]))
  {
    v7 = (int *)MEMORY[0x24BE7AF30];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = 0;
          v18 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 28) |= 1u;
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
              break;
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              goto LABEL_50;
            v17 += 7;
            v14 = v18++ >= 9;
            if (v14)
            {
              v19 = 0;
              goto LABEL_52;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_50:
          if (*(_BYTE *)(a2 + *v5))
            v19 = 0;
LABEL_52:
          *(_QWORD *)(a1 + 8) = v19;
          continue;
        case 2u:
          v24 = 0;
          v25 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 28) |= 2u;
          while (2)
          {
            v27 = *v3;
            v28 = *(_QWORD *)(a2 + v27);
            if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
              *(_QWORD *)(a2 + v27) = v28 + 1;
              v26 |= (unint64_t)(v29 & 0x7F) << v24;
              if (v29 < 0)
              {
                v24 += 7;
                v14 = v25++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_56;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_56:
          v40 = 16;
          goto LABEL_65;
        case 3u:
          v30 = 0;
          v31 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 28) |= 8u;
          while (2)
          {
            v32 = *v3;
            v33 = *(_QWORD *)(a2 + v32);
            if (v33 == -1 || v33 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v34 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v33);
              *(_QWORD *)(a2 + v32) = v33 + 1;
              v26 |= (unint64_t)(v34 & 0x7F) << v30;
              if (v34 < 0)
              {
                v30 += 7;
                v14 = v31++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_60;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_60:
          v40 = 24;
          goto LABEL_65;
        case 4u:
          v35 = 0;
          v36 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 28) |= 4u;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v37 = *v3;
        v38 = *(_QWORD *)(a2 + v37);
        if (v38 == -1 || v38 >= *(_QWORD *)(a2 + *v4))
          break;
        v39 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v38);
        *(_QWORD *)(a2 + v37) = v38 + 1;
        v26 |= (unint64_t)(v39 & 0x7F) << v35;
        if ((v39 & 0x80) == 0)
          goto LABEL_62;
        v35 += 7;
        v14 = v36++ >= 9;
        if (v14)
        {
          LODWORD(v26) = 0;
          goto LABEL_64;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_62:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v26) = 0;
LABEL_64:
      v40 = 20;
LABEL_65:
      *(_DWORD *)(a1 + v40) = v26;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t AWDMETRICSCellularPowerLogSFTStateEventReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  uint64_t result;
  uint64_t v36;

  v3 = (int *)MEMORY[0x24BE7AF60];
  v4 = (int *)MEMORY[0x24BE7AF50];
  v5 = (int *)MEMORY[0x24BE7AF48];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x24BE7AF60]) < *(_QWORD *)(a2 + (int)*MEMORY[0x24BE7AF50]))
  {
    v7 = (int *)MEMORY[0x24BE7AF30];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        v24 = 0;
        v25 = 0;
        v26 = 0;
        *(_BYTE *)(a1 + 24) |= 4u;
        while (1)
        {
          v27 = *v3;
          v28 = *(_QWORD *)(a2 + v27);
          if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
            break;
          v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
          *(_QWORD *)(a2 + v27) = v28 + 1;
          v26 |= (unint64_t)(v29 & 0x7F) << v24;
          if ((v29 & 0x80) == 0)
            goto LABEL_49;
          v24 += 7;
          v14 = v25++ >= 9;
          if (v14)
          {
            LODWORD(v26) = 0;
            goto LABEL_51;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_49:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v26) = 0;
LABEL_51:
        v36 = 20;
      }
      else
      {
        if ((_DWORD)v17 != 2)
        {
          if ((_DWORD)v17 == 1)
          {
            v18 = 0;
            v19 = 0;
            v20 = 0;
            *(_BYTE *)(a1 + 24) |= 1u;
            while (1)
            {
              v21 = *v3;
              v22 = *(_QWORD *)(a2 + v21);
              if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
                break;
              v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
              *(_QWORD *)(a2 + v21) = v22 + 1;
              v20 |= (unint64_t)(v23 & 0x7F) << v18;
              if ((v23 & 0x80) == 0)
                goto LABEL_45;
              v18 += 7;
              v14 = v19++ >= 9;
              if (v14)
              {
                v20 = 0;
                goto LABEL_47;
              }
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_45:
            if (*(_BYTE *)(a2 + *v5))
              v20 = 0;
LABEL_47:
            *(_QWORD *)(a1 + 8) = v20;
          }
          else
          {
            result = PBReaderSkipValueWithTag();
            if (!(_DWORD)result)
              return result;
          }
          continue;
        }
        v30 = 0;
        v31 = 0;
        v26 = 0;
        *(_BYTE *)(a1 + 24) |= 2u;
        while (1)
        {
          v32 = *v3;
          v33 = *(_QWORD *)(a2 + v32);
          if (v33 == -1 || v33 >= *(_QWORD *)(a2 + *v4))
            break;
          v34 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v33);
          *(_QWORD *)(a2 + v32) = v33 + 1;
          v26 |= (unint64_t)(v34 & 0x7F) << v30;
          if ((v34 & 0x80) == 0)
            goto LABEL_53;
          v30 += 7;
          v14 = v31++ >= 9;
          if (v14)
          {
            LODWORD(v26) = 0;
            goto LABEL_55;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_53:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v26) = 0;
LABEL_55:
        v36 = 16;
      }
      *(_DWORD *)(a1 + v36) = v26;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

id PPSCreateSubsystemCategoryPredicate(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  _QWORD v12[3];

  v12[2] = *MEMORY[0x24BDAC8D0];
  v5 = a3;
  objc_msgSend(MEMORY[0x24BDD1758], "predicateWithFormat:", CFSTR("(%K = %@ AND %K = %@)"), CFSTR("subsystem"), a1, CFSTR("category"), a2);
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = (void *)v6;
  if (v5)
  {
    v8 = (void *)MEMORY[0x24BDD14C0];
    v12[0] = v6;
    v12[1] = v5;
    objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v12, 2);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "andPredicateWithSubpredicates:", v9);
    v10 = objc_claimAutoreleasedReturnValue();

    v7 = (void *)v10;
  }

  return v7;
}

void sub_243A21C18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy_(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{

}

void sub_243A21E2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _eventSortComparator(void *a1, const char *a2)
{
  return objc_msgSend(a1, "compare:", a2);
}

id PPSConvertValueWithNSUnit(void *a1, void *a2, void *a3, _QWORD *a4)
{
  id v7;
  id v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v22;
  _QWORD v23[2];

  v23[1] = *MEMORY[0x24BDAC8D0];
  v7 = a1;
  v8 = a2;
  v9 = a3;
  v10 = objc_alloc(MEMORY[0x24BDD1660]);
  objc_msgSend(v7, "doubleValue");
  v11 = (void *)objc_msgSend(v10, "initWithDoubleValue:unit:", v8);
  if ((objc_msgSend(v11, "canBeConvertedToUnit:", v9) & 1) != 0)
  {
    objc_msgSend(v11, "measurementByConvertingToUnit:", v9);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = objc_alloc(MEMORY[0x24BDD16E0]);
    objc_msgSend(v12, "doubleValue");
    v14 = (void *)objc_msgSend(v13, "initWithDouble:");

  }
  else
  {
    v15 = (void *)MEMORY[0x24BDD17C8];
    objc_msgSend(v8, "description");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "description");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "stringWithFormat:", CFSTR("Cannot convert value '%@' from unit type '%@' to unit type '%@'"), v7, v16, v17);
    v18 = (void *)objc_claimAutoreleasedReturnValue();

    v19 = (void *)MEMORY[0x24BDD1540];
    v22 = *MEMORY[0x24BDD0FC8];
    v23[0] = v18;
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v23, &v22, 1);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "errorWithDomain:code:userInfo:", CFSTR("com.apple.PerfPowerServicesReader"), 1, v20);
    *a4 = (id)objc_claimAutoreleasedReturnValue();

    v14 = 0;
  }

  return v14;
}

id PPSConvertValueWithPPSUnit(void *a1, void *a2, void *a3, _QWORD *a4)
{
  id v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;

  v7 = a3;
  v8 = a1;
  objc_msgSend(a2, "unit");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "unit");
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  PPSConvertValueWithNSUnit(v8, v9, v10, a4);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  return v11;
}

void sub_243A24E74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__0(uint64_t a1)
{

}

void sub_243A2518C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_243A257F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_243A258BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_243A25A48(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_243A25B40(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_243A25C9C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_243A25E40(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_243A25F9C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_243A26090(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_243A26130(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_243A26184(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_243A26228(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_243A262BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void *boost::serialization::singleton_module::get_lock(boost::serialization::singleton_module *this)
{
  return &boost::serialization::singleton_module::get_lock(void)::lock;
}

void sub_243A266D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,__int128 buf,int a47,__int16 a48,__int16 a49,uint64_t a50,__int128 a51)
{
  void *v51;
  void *v52;
  void *v53;
  void *v56;
  NSObject *v57;
  _BOOL4 v58;
  objc_class *v59;
  void *v60;
  uint64_t v61;
  objc_class *v62;
  void *v63;

  if (a2)
  {

    pps::Histogram_Internal::~Histogram_Internal(&a12);
    boost::archive::detail::basic_iarchive::~basic_iarchive((boost::archive::detail::basic_iarchive *)&__p);
    boost::archive::basic_text_iprimitive<std::istream>::~basic_text_iprimitive((uint64_t)&a34);
    std::istringstream::~istringstream((uint64_t)&buf);

    v56 = __cxa_begin_catch(exception_object);
    logHandle();
    v57 = objc_claimAutoreleasedReturnValue();
    v58 = os_log_type_enabled(v57, OS_LOG_TYPE_ERROR);
    if (a2 == 2)
    {
      if (v58)
      {
        v59 = (objc_class *)objc_opt_class();
        NSStringFromClass(v59);
        v60 = (void *)objc_claimAutoreleasedReturnValue();
        v61 = (*(uint64_t (**)(void *))(*(_QWORD *)v56 + 16))(v56);
        LODWORD(buf) = 134218754;
        *(_QWORD *)((char *)&buf + 4) = v51;
        WORD6(buf) = 2112;
        *(_QWORD *)((char *)&buf + 14) = v60;
        a49 = 2048;
        LOWORD(a51) = 2080;
        *(_QWORD *)((char *)&a51 + 2) = v61;
        _os_log_error_impl(&dword_2439D9000, v57, OS_LOG_TYPE_ERROR, "Couldn't initialize <PPSHistogram: %p> with decoder <%@: %p> due to std::exception - \"%s\"", (uint8_t *)&buf, 0x2Au);

      }
    }
    else if (v58)
    {
      v62 = (objc_class *)objc_opt_class();
      NSStringFromClass(v62);
      v63 = (void *)objc_claimAutoreleasedReturnValue();
      LODWORD(buf) = 134218498;
      *(_QWORD *)((char *)&buf + 4) = v51;
      WORD6(buf) = 2112;
      *(_QWORD *)((char *)&buf + 14) = v63;
      a49 = 2048;
      _os_log_error_impl(&dword_2439D9000, v57, OS_LOG_TYPE_ERROR, "Couldn't initialize <PPSHistogram: %p> with decoder <%@: %p> due to unknown exception", (uint8_t *)&buf, 0x20u);

    }
    __cxa_end_catch();
    JUMPOUT(0x243A26698);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::istringstream::basic_istringstream[abi:ne180100](_QWORD *a1, const std::string *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::ios_base *v11;

  v6 = MEMORY[0x24BEDB868];
  v7 = MEMORY[0x24BEDB868] + 64;
  a1[15] = MEMORY[0x24BEDB868] + 64;
  v8 = (uint64_t)(a1 + 2);
  v9 = *(_QWORD *)(MEMORY[0x24BEDB7F8] + 8);
  v10 = *(_QWORD *)(MEMORY[0x24BEDB7F8] + 16);
  *a1 = v9;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v9 - 24)) = v10;
  a1[1] = 0;
  v11 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v11, a1 + 2);
  v11[1].__vftable = 0;
  v11[1].__fmtflags_ = -1;
  *a1 = v6 + 24;
  a1[15] = v7;
  std::stringbuf::basic_stringbuf[abi:ne180100](v8, a2, a3 | 8);
  return a1;
}

void sub_243A26A0C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::istream::~istream();
  MEMORY[0x2494FECBC](v1);
  _Unwind_Resume(a1);
}

void boost::archive::text_iarchive::~text_iarchive(boost::archive::text_iarchive *this)
{
  uint64_t v1;

  boost::archive::detail::basic_iarchive::~basic_iarchive(this);
  boost::archive::basic_text_iprimitive<std::istream>::~basic_text_iprimitive(v1 + 40);
}

{
  uint64_t v1;

  boost::archive::detail::basic_iarchive::~basic_iarchive(this);
  boost::archive::basic_text_iprimitive<std::istream>::~basic_text_iprimitive(v1 + 40);
  JUMPOUT(0x2494FECF8);
}

uint64_t std::istringstream::~istringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x24BEDB7F8];
  v3 = *MEMORY[0x24BEDB7F8];
  *(_QWORD *)a1 = *MEMORY[0x24BEDB7F8];
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 16) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x2494FECBC](a1 + 120);
  return a1;
}

id logHandle(void)
{
  if (logHandle(void)::onceToken != -1)
    dispatch_once(&logHandle(void)::onceToken, &__block_literal_global_0);
  return (id)logHandle(void)::logHandle;
}

{
  if (logHandle(void)::onceToken != -1)
    dispatch_once(&logHandle(void)::onceToken, &__block_literal_global_4);
  return (id)logHandle(void)::__logHandle;
}

void __clang_call_terminate(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

void sub_243A26CCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,int buf,int a33,__int128 a34,uint64_t a35,__int128 a36)
{
  void *v36;
  int v39;
  void *v40;
  NSObject *v41;
  _BOOL4 v42;
  objc_class *v43;
  void *v44;
  uint64_t v45;
  objc_class *v46;
  void *v47;

  if (a2)
  {

    if (a15 < 0)
      operator delete(__p);
    boost::archive::detail::basic_oarchive::~basic_oarchive((boost::archive::detail::basic_oarchive *)&a16);
    boost::archive::basic_text_oprimitive<std::ostream>::~basic_text_oprimitive((uint64_t)&a22);
    v39 = a2;
    std::ostringstream::~ostringstream((uint64_t)&buf);
    v40 = __cxa_begin_catch(exception_object);
    logHandle();
    v41 = objc_claimAutoreleasedReturnValue();
    v42 = os_log_type_enabled(v41, OS_LOG_TYPE_ERROR);
    if (v39 == 2)
    {
      if (v42)
      {
        v43 = (objc_class *)objc_opt_class();
        NSStringFromClass(v43);
        v44 = (void *)objc_claimAutoreleasedReturnValue();
        v45 = (*(uint64_t (**)(void *))(*(_QWORD *)v40 + 16))(v40);
        buf = 134218754;
        WORD2(a34) = 2112;
        *(_QWORD *)((char *)&a34 + 6) = v44;
        HIWORD(a34) = 2048;
        LOWORD(a36) = 2080;
        *(_QWORD *)((char *)&a36 + 2) = v45;
        _os_log_error_impl(&dword_2439D9000, v41, OS_LOG_TYPE_ERROR, "Couldn't encode <PPSHistogram: %p> with coder <%@: %p> due to std::exception - \"%s\"", (uint8_t *)&buf, 0x2Au);

      }
    }
    else if (v42)
    {
      v46 = (objc_class *)objc_opt_class();
      NSStringFromClass(v46);
      v47 = (void *)objc_claimAutoreleasedReturnValue();
      buf = 134218498;
      WORD2(a34) = 2112;
      *(_QWORD *)((char *)&a34 + 6) = v47;
      HIWORD(a34) = 2048;
      _os_log_error_impl(&dword_2439D9000, v41, OS_LOG_TYPE_ERROR, "Couldn't encode <PPSHistogram: %p> with coder <%@: %p> due to unknown exception", (uint8_t *)&buf, 0x20u);

    }
    std::terminate();
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::ostringstream::basic_ostringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::ios_base *v6;

  v2 = MEMORY[0x24BEDB870];
  v3 = MEMORY[0x24BEDB870] + 64;
  *(_QWORD *)(a1 + 112) = MEMORY[0x24BEDB870] + 64;
  v4 = *(_QWORD *)(MEMORY[0x24BEDB800] + 8);
  v5 = *(_QWORD *)(MEMORY[0x24BEDB800] + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + *(_QWORD *)(v4 - 24)) = v5;
  v6 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v6, (void *)(a1 + 8));
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 112) = v3;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 8) = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_243A26F88(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x2494FECBC](v1);
  _Unwind_Resume(a1);
}

void boost::archive::text_oarchive::~text_oarchive(boost::archive::text_oarchive *this)
{
  uint64_t v1;

  boost::archive::detail::basic_oarchive::~basic_oarchive(this);
  boost::archive::basic_text_oprimitive<std::ostream>::~basic_text_oprimitive(v1 + 48);
}

{
  uint64_t v1;

  boost::archive::detail::basic_oarchive::~basic_oarchive(this);
  boost::archive::basic_text_oprimitive<std::ostream>::~basic_text_oprimitive(v1 + 48);
  JUMPOUT(0x2494FECF8);
}

uint64_t std::ostringstream::~ostringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)a1 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 8) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2494FECBC](a1 + 112);
  return a1;
}

void sub_243A2719C(_Unwind_Exception *exception_object, int a2)
{
  void *v2;
  void *v3;
  NSObject *v6;
  _BOOL4 v7;

  if (a2)
  {

    __cxa_begin_catch(exception_object);
    logHandle();
    v6 = objc_claimAutoreleasedReturnValue();
    v7 = os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
    if (a2 == 2)
    {
      if (v7)
        -[PPSHistogram initWithBinCount:range:metricName:].cold.1();

      __cxa_end_catch();
    }
    else
    {
      if (v7)
        -[PPSHistogram initWithBinCount:range:metricName:].cold.2();

      __cxa_end_catch();
    }
    JUMPOUT(0x243A2715CLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_243A27408(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_243A27ABC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__pa,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char *a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54,uint64_t a55,uint64_t a56,std::__split_buffer<std::string> *a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62)
{

  a44 = &a62;
  std::vector<pps::AxisConfig_Internal>::__destroy_vector::operator()[abi:ne180100]((void ***)&a44);

  _Unwind_Resume(a1);
}

void pps::AxisConfig_Internal::~AxisConfig_Internal(pps::AxisConfig_Internal *this)
{
  void *v2;
  void **v3;

  v2 = (void *)*((_QWORD *)this + 7);
  if (v2)
  {
    *((_QWORD *)this + 8) = v2;
    operator delete(v2);
  }
  v3 = (void **)((char *)this + 32);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
}

void sub_243A27E24(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_243A27FC4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_243A28288(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v3;

  _Unwind_Resume(a1);
}

void sub_243A28464(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  void *v17;

  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void std::function<void ()(NSMutableArray *)>::operator()(uint64_t a1, void *a2)
{
  uint64_t v3;
  id v4;

  v4 = a2;
  v3 = *(_QWORD *)(a1 + 24);
  if (!v3)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, id *))(*(_QWORD *)v3 + 48))(v3, &v4);

}

void sub_243A2851C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_243A28AE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,char *a28,uint64_t a29,void *a30,uint64_t a31)
{
  void *v31;

  if (__p)
    operator delete(__p);
  std::__tree<std::__value_type<int,std::vector<std::string>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::string>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::string>>>>::destroy((uint64_t)&a27, a28);
  if (a30)
  {
    a31 = (uint64_t)a30;
    operator delete(a30);
  }

  _Unwind_Resume(a1);
}

void std::vector<double>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61)
      std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    v9 = &v6[8 * v8];
    v10 = (char *)*a1;
    v11 = (char *)a1[1];
    v12 = v7;
    if (v11 != *a1)
    {
      v12 = v7;
      do
      {
        v13 = *((_QWORD *)v11 - 1);
        v11 -= 8;
        *((_QWORD *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void sub_243A29168(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31)
{
  NSObject *v32;
  _BOOL4 v33;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    logHandle();
    v32 = objc_claimAutoreleasedReturnValue();
    v33 = os_log_type_enabled(v32, OS_LOG_TYPE_ERROR);
    if (a2 == 2)
    {
      if (v33)
        -[PPSHistogram recordSample:].cold.1();
    }
    else if (v33)
    {
      -[PPSHistogram recordSample:].cold.2();
    }

    __cxa_end_catch();
    JUMPOUT(0x243A290E4);
  }
  _Unwind_Resume(exception_object);
}

void sub_243A2941C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_243A29538(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_243A296D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_243A29770(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_243A297C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_243A2984C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void *boost::serialization::singleton<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::get_instance(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v3;

  if (boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::get_is_destroyed(void)::is_destroyed_flag)
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::get_instance(a1, a2, a3);
  if ((v3 & 1) == 0
  {
    boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::singleton_wrapper((boost::serialization::typeid_system::extended_type_info_typeid_0 *)&boost::serialization::singleton<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::get_instance(void)::t);
    __cxa_atexit((void (*)(void *))boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::~singleton_wrapper, &boost::serialization::singleton<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::get_instance(void)::t, &dword_2439D9000);
  }
  return &boost::serialization::singleton<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::get_instance(void)::t;
}

void sub_243A29940(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>>::get_instance(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v3;

  if (boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>>::get_is_destroyed(void)::is_destroyed_flag)
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::get_instance(a1, a2, a3);
  if ((v3 & 1) == 0
  {
    boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>>::singleton_wrapper((boost::serialization::typeid_system::extended_type_info_typeid_0 *)&boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>>::get_instance(void)::t);
    __cxa_atexit((void (*)(void *))boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>>::~singleton_wrapper, &boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>>::get_instance(void)::t, &dword_2439D9000);
  }
  return &boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>>::get_instance(void)::t;
}

void sub_243A299E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>>::get_instance(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v3;

  if (boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>>::get_is_destroyed(void)::is_destroyed_flag)
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::get_instance(a1, a2, a3);
  if ((v3 & 1) == 0
  {
    boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>>::singleton_wrapper((boost::serialization::typeid_system::extended_type_info_typeid_0 *)&boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>>::get_instance(void)::t);
    __cxa_atexit((void (*)(void *))boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>>::~singleton_wrapper, &boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>>::get_instance(void)::t, &dword_2439D9000);
  }
  return &boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>>::get_instance(void)::t;
}

void sub_243A29A80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::get_instance(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v3;

  if (boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::get_is_destroyed(void)::is_destroyed_flag)
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::get_instance(a1, a2, a3);
  if ((v3 & 1) == 0
  {
    boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::singleton_wrapper((boost::serialization::typeid_system::extended_type_info_typeid_0 *)&boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::get_instance(void)::t);
    __cxa_atexit((void (*)(void *))boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::~singleton_wrapper, &boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::get_instance(void)::t, &dword_2439D9000);
  }
  return &boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::get_instance(void)::t;
}

void sub_243A29B20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::get_instance(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v3;

  if (boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::get_is_destroyed(void)::is_destroyed_flag)
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::get_instance(a1, a2, a3);
  if ((v3 & 1) == 0
  {
    boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::singleton_wrapper((boost::serialization::typeid_system::extended_type_info_typeid_0 *)&boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::get_instance(void)::t);
    __cxa_atexit((void (*)(void *))boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::~singleton_wrapper, &boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::get_instance(void)::t, &dword_2439D9000);
  }
  return &boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::get_instance(void)::t;
}

void sub_243A29BC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>>::get_instance(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v3;

  if (boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>>::get_is_destroyed(void)::is_destroyed_flag)
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::get_instance(a1, a2, a3);
  if ((v3 & 1) == 0
  {
    boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>>::singleton_wrapper((boost::serialization::typeid_system::extended_type_info_typeid_0 *)&boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>>::get_instance(void)::t);
    __cxa_atexit((void (*)(void *))boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>>::~singleton_wrapper, &boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>>::get_instance(void)::t, &dword_2439D9000);
  }
  return &boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>>::get_instance(void)::t;
}

void sub_243A29C60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::histogram::axis::transform::id>>::get_instance(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v3;

  if (boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::histogram::axis::transform::id>>::get_is_destroyed(void)::is_destroyed_flag)
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::get_instance(a1, a2, a3);
  if ((v3 & 1) == 0
  {
    boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::histogram::axis::transform::id>>::singleton_wrapper((boost::serialization::typeid_system::extended_type_info_typeid_0 *)&boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::histogram::axis::transform::id>>::get_instance(void)::t);
    __cxa_atexit((void (*)(void *))boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::histogram::axis::transform::id>>::~singleton_wrapper, &boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::histogram::axis::transform::id>>::get_instance(void)::t, &dword_2439D9000);
  }
  return &boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::histogram::axis::transform::id>>::get_instance(void)::t;
}

void sub_243A29D00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::transform::id>>::get_instance(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v3;
  uint64_t v5;
  uint64_t v6;

  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::transform::id>>::get_is_destroyed(void)::is_destroyed_flag)
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::get_instance(a1, a2, a3);
  if ((v3 & 1) == 0
  {
    boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::transform::id>>::singleton_wrapper(boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::transform::id>>::get_instance(void)::t, v5, v6);
    __cxa_atexit((void (*)(void *))boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::transform::id>>::~singleton_wrapper, boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::transform::id>>::get_instance(void)::t, &dword_2439D9000);
  }
  return boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::transform::id>>::get_instance(void)::t;
}

void sub_243A29DA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>>::get_instance(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v3;
  uint64_t v5;
  uint64_t v6;

  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>>::get_is_destroyed(void)::is_destroyed_flag)
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::get_instance(a1, a2, a3);
  if ((v3 & 1) == 0
  {
    boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>>::singleton_wrapper(boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>>::get_instance(void)::t, v5, v6);
    __cxa_atexit((void (*)(void *))boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>>::~singleton_wrapper, boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>>::get_instance(void)::t, &dword_2439D9000);
  }
  return boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>>::get_instance(void)::t;
}

void sub_243A29E40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>>::get_instance(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v3;

  if (boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>>::get_is_destroyed(void)::is_destroyed_flag)
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::get_instance(a1, a2, a3);
  if ((v3 & 1) == 0
  {
    boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>>::singleton_wrapper((boost::serialization::typeid_system::extended_type_info_typeid_0 *)&boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>>::get_instance(void)::t);
    __cxa_atexit((void (*)(void *))boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>>::~singleton_wrapper, &boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>>::get_instance(void)::t, &dword_2439D9000);
  }
  return &boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>>::get_instance(void)::t;
}

void sub_243A29EE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<double>>>::get_instance(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v3;

  if (boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::vector<double>>>::get_is_destroyed(void)::is_destroyed_flag)
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::get_instance(a1, a2, a3);
  if ((v3 & 1) == 0
  {
    boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::vector<double>>>::singleton_wrapper((boost::serialization::typeid_system::extended_type_info_typeid_0 *)&boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<double>>>::get_instance(void)::t);
    __cxa_atexit((void (*)(void *))boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::vector<double>>>::~singleton_wrapper, &boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<double>>>::get_instance(void)::t, &dword_2439D9000);
  }
  return &boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<double>>>::get_instance(void)::t;
}

void sub_243A29F80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<double>>>::get_instance(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v3;
  uint64_t v5;
  uint64_t v6;

  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<double>>>::get_is_destroyed(void)::is_destroyed_flag)
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::get_instance(a1, a2, a3);
  if ((v3 & 1) == 0
  {
    boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<double>>>::singleton_wrapper(boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<double>>>::get_instance(void)::t, v5, v6);
    __cxa_atexit((void (*)(void *))boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<double>>>::~singleton_wrapper, boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<double>>>::get_instance(void)::t, &dword_2439D9000);
  }
  return boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<double>>>::get_instance(void)::t;
}

void sub_243A2A020(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>>::get_instance(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v3;
  uint64_t v5;
  uint64_t v6;

  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>>::get_is_destroyed(void)::is_destroyed_flag)
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::get_instance(a1, a2, a3);
  if ((v3 & 1) == 0
  {
    boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>>::singleton_wrapper(boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>>::get_instance(void)::t, v5, v6);
    __cxa_atexit((void (*)(void *))boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>>::~singleton_wrapper, boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>>::get_instance(void)::t, &dword_2439D9000);
  }
  return boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>>::get_instance(void)::t;
}

void sub_243A2A0C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::get_instance(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v3;

  if (boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::get_is_destroyed(void)::is_destroyed_flag)
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::get_instance(a1, a2, a3);
  if ((v3 & 1) == 0
  {
    boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::singleton_wrapper((boost::serialization::typeid_system::extended_type_info_typeid_0 *)&boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::get_instance(void)::t);
    __cxa_atexit((void (*)(void *))boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::~singleton_wrapper, &boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::get_instance(void)::t, &dword_2439D9000);
  }
  return &boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::get_instance(void)::t;
}

void sub_243A2A160(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::get_instance(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v3;
  uint64_t v5;
  uint64_t v6;

  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::get_is_destroyed(void)::is_destroyed_flag)
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::get_instance(a1, a2, a3);
  if ((v3 & 1) == 0
  {
    boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::singleton_wrapper(boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::get_instance(void)::t, v5, v6);
    __cxa_atexit((void (*)(void *))boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::~singleton_wrapper, boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::get_instance(void)::t, &dword_2439D9000);
  }
  return boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::get_instance(void)::t;
}

void sub_243A2A200(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::get_instance(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v3;
  uint64_t v5;
  uint64_t v6;

  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::get_is_destroyed(void)::is_destroyed_flag)
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::get_instance(a1, a2, a3);
  if ((v3 & 1) == 0
  {
    boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::singleton_wrapper(boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::get_instance(void)::t, v5, v6);
    __cxa_atexit((void (*)(void *))boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::~singleton_wrapper, boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::get_instance(void)::t, &dword_2439D9000);
  }
  return boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::get_instance(void)::t;
}

void sub_243A2A2A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::get_instance(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v3;
  uint64_t v5;
  uint64_t v6;

  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::get_is_destroyed(void)::is_destroyed_flag)
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::get_instance(a1, a2, a3);
  if ((v3 & 1) == 0
  {
    boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::singleton_wrapper(boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::get_instance(void)::t, v5, v6);
    __cxa_atexit((void (*)(void *))boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::~singleton_wrapper, boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::get_instance(void)::t, &dword_2439D9000);
  }
  return boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::get_instance(void)::t;
}

void sub_243A2A340(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>>::get_instance(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v3;
  uint64_t v5;
  uint64_t v6;

  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>>::get_is_destroyed(void)::is_destroyed_flag)
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::get_instance(a1, a2, a3);
  if ((v3 & 1) == 0
  {
    boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>>::singleton_wrapper(boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>>::get_instance(void)::t, v5, v6);
    __cxa_atexit((void (*)(void *))boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>>::~singleton_wrapper, boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>>::get_instance(void)::t, &dword_2439D9000);
  }
  return boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>>::get_instance(void)::t;
}

void sub_243A2A3E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::histogram::unlimited_storage<std::allocator<char>>>>::get_instance(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v3;

  if (boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::histogram::unlimited_storage<std::allocator<char>>>>::get_is_destroyed(void)::is_destroyed_flag)
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::get_instance(a1, a2, a3);
  if ((v3 & 1) == 0
  {
    boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::histogram::unlimited_storage<std::allocator<char>>>>::singleton_wrapper((boost::serialization::typeid_system::extended_type_info_typeid_0 *)&boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::histogram::unlimited_storage<std::allocator<char>>>>::get_instance(void)::t);
    __cxa_atexit((void (*)(void *))boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::histogram::unlimited_storage<std::allocator<char>>>>::~singleton_wrapper, &boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::histogram::unlimited_storage<std::allocator<char>>>>::get_instance(void)::t, &dword_2439D9000);
  }
  return &boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::histogram::unlimited_storage<std::allocator<char>>>>::get_instance(void)::t;
}

void sub_243A2A480(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>>::get_instance(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v3;

  if (boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>>::get_is_destroyed(void)::is_destroyed_flag)
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::get_instance(a1, a2, a3);
  if ((v3 & 1) == 0
  {
    boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>>::singleton_wrapper((boost::serialization::typeid_system::extended_type_info_typeid_0 *)&boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>>::get_instance(void)::t);
    __cxa_atexit((void (*)(void *))boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>>::~singleton_wrapper, &boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>>::get_instance(void)::t, &dword_2439D9000);
  }
  return &boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>>::get_instance(void)::t;
}

void sub_243A2A520(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<unsigned long long>>>::get_instance(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v3;

  if (boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::vector<unsigned long long>>>::get_is_destroyed(void)::is_destroyed_flag)
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::get_instance(a1, a2, a3);
  if ((v3 & 1) == 0
  {
    boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::vector<unsigned long long>>>::singleton_wrapper((boost::serialization::typeid_system::extended_type_info_typeid_0 *)&boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<unsigned long long>>>::get_instance(void)::t);
    __cxa_atexit((void (*)(void *))boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::vector<unsigned long long>>>::~singleton_wrapper, &boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<unsigned long long>>>::get_instance(void)::t, &dword_2439D9000);
  }
  return &boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<unsigned long long>>>::get_instance(void)::t;
}

void sub_243A2A5C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<unsigned long long>>>::get_instance(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v3;
  uint64_t v5;
  uint64_t v6;

  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<unsigned long long>>>::get_is_destroyed(void)::is_destroyed_flag)
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::get_instance(a1, a2, a3);
  if ((v3 & 1) == 0
  {
    boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<unsigned long long>>>::singleton_wrapper(boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<unsigned long long>>>::get_instance(void)::t, v5, v6);
    __cxa_atexit((void (*)(void *))boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<unsigned long long>>>::~singleton_wrapper, boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<unsigned long long>>>::get_instance(void)::t, &dword_2439D9000);
  }
  return boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<unsigned long long>>>::get_instance(void)::t;
}

void sub_243A2A660(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>>::get_instance(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v3;
  uint64_t v5;
  uint64_t v6;

  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>>::get_is_destroyed(void)::is_destroyed_flag)
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::get_instance(a1, a2, a3);
  if ((v3 & 1) == 0
  {
    boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>>::singleton_wrapper(boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>>::get_instance(void)::t, v5, v6);
    __cxa_atexit((void (*)(void *))boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>>::~singleton_wrapper, boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>>::get_instance(void)::t, &dword_2439D9000);
  }
  return boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>>::get_instance(void)::t;
}

void sub_243A2A700(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::unlimited_storage<std::allocator<char>>>>::get_instance(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v3;
  uint64_t v5;
  uint64_t v6;

  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::unlimited_storage<std::allocator<char>>>>::get_is_destroyed(void)::is_destroyed_flag)
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::get_instance(a1, a2, a3);
  if ((v3 & 1) == 0
  {
    boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::unlimited_storage<std::allocator<char>>>>::singleton_wrapper(boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::unlimited_storage<std::allocator<char>>>>::get_instance(void)::t, v5, v6);
    __cxa_atexit((void (*)(void *))boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::unlimited_storage<std::allocator<char>>>>::~singleton_wrapper, boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::unlimited_storage<std::allocator<char>>>>::get_instance(void)::t, &dword_2439D9000);
  }
  return boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::unlimited_storage<std::allocator<char>>>>::get_instance(void)::t;
}

void sub_243A2A7A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>>::get_instance(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v3;
  uint64_t v5;
  uint64_t v6;

  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>>::get_is_destroyed(void)::is_destroyed_flag)
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::get_instance(a1, a2, a3);
  if ((v3 & 1) == 0
  {
    boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>>::singleton_wrapper(boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>>::get_instance(void)::t, v5, v6);
    __cxa_atexit((void (*)(void *))boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>>::~singleton_wrapper, boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>>::get_instance(void)::t, &dword_2439D9000);
  }
  return boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>>::get_instance(void)::t;
}

void sub_243A2A840(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<pps::AxisEnum>>>::get_instance(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v3;

  if (boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::vector<pps::AxisEnum>>>::get_is_destroyed(void)::is_destroyed_flag)
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::get_instance(a1, a2, a3);
  if ((v3 & 1) == 0
  {
    boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::vector<pps::AxisEnum>>>::singleton_wrapper((boost::serialization::typeid_system::extended_type_info_typeid_0 *)&boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<pps::AxisEnum>>>::get_instance(void)::t);
    __cxa_atexit((void (*)(void *))boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::vector<pps::AxisEnum>>>::~singleton_wrapper, &boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<pps::AxisEnum>>>::get_instance(void)::t, &dword_2439D9000);
  }
  return &boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<pps::AxisEnum>>>::get_instance(void)::t;
}

void sub_243A2A8E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<pps::AxisEnum>>>::get_instance(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v3;
  uint64_t v5;
  uint64_t v6;

  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<pps::AxisEnum>>>::get_is_destroyed(void)::is_destroyed_flag)
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::get_instance(a1, a2, a3);
  if ((v3 & 1) == 0
  {
    boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<pps::AxisEnum>>>::singleton_wrapper(boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<pps::AxisEnum>>>::get_instance(void)::t, v5, v6);
    __cxa_atexit((void (*)(void *))boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<pps::AxisEnum>>>::~singleton_wrapper, boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<pps::AxisEnum>>>::get_instance(void)::t, &dword_2439D9000);
  }
  return boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<pps::AxisEnum>>>::get_instance(void)::t;
}

void sub_243A2A980(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::map<int,std::vector<std::string>>>>::get_instance(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v3;

  if (boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::map<int,std::vector<std::string>>>>::get_is_destroyed(void)::is_destroyed_flag)
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::get_instance(a1, a2, a3);
  if ((v3 & 1) == 0
  {
    boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::map<int,std::vector<std::string>>>>::singleton_wrapper((boost::serialization::typeid_system::extended_type_info_typeid_0 *)&boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::map<int,std::vector<std::string>>>>::get_instance(void)::t);
    __cxa_atexit((void (*)(void *))boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::map<int,std::vector<std::string>>>>::~singleton_wrapper, &boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::map<int,std::vector<std::string>>>>::get_instance(void)::t, &dword_2439D9000);
  }
  return &boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::map<int,std::vector<std::string>>>>::get_instance(void)::t;
}

void sub_243A2AA20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::pair<int const,std::vector<std::string>>>>::get_instance(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v3;

  if (boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::pair<int const,std::vector<std::string>>>>::get_is_destroyed(void)::is_destroyed_flag)
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::get_instance(a1, a2, a3);
  if ((v3 & 1) == 0
  {
    boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::pair<int const,std::vector<std::string>>>>::singleton_wrapper((boost::serialization::typeid_system::extended_type_info_typeid_0 *)&boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::pair<int const,std::vector<std::string>>>>::get_instance(void)::t);
    __cxa_atexit((void (*)(void *))boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::pair<int const,std::vector<std::string>>>>::~singleton_wrapper, &boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::pair<int const,std::vector<std::string>>>>::get_instance(void)::t, &dword_2439D9000);
  }
  return &boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::pair<int const,std::vector<std::string>>>>::get_instance(void)::t;
}

void sub_243A2AAC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<std::string>>>::get_instance(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v3;

  if (boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::vector<std::string>>>::get_is_destroyed(void)::is_destroyed_flag)
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::get_instance(a1, a2, a3);
  if ((v3 & 1) == 0
  {
    boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::vector<std::string>>>::singleton_wrapper((boost::serialization::typeid_system::extended_type_info_typeid_0 *)&boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<std::string>>>::get_instance(void)::t);
    __cxa_atexit((void (*)(void *))boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::vector<std::string>>>::~singleton_wrapper, &boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<std::string>>>::get_instance(void)::t, &dword_2439D9000);
  }
  return &boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<std::string>>>::get_instance(void)::t;
}

void sub_243A2AB60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<std::string>>>::get_instance(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v3;
  uint64_t v5;
  uint64_t v6;

  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<std::string>>>::get_is_destroyed(void)::is_destroyed_flag)
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::get_instance(a1, a2, a3);
  if ((v3 & 1) == 0
  {
    boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<std::string>>>::singleton_wrapper(boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<std::string>>>::get_instance(void)::t, v5, v6);
    __cxa_atexit((void (*)(void *))boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<std::string>>>::~singleton_wrapper, boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<std::string>>>::get_instance(void)::t, &dword_2439D9000);
  }
  return boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<std::string>>>::get_instance(void)::t;
}

void sub_243A2AC00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::pair<int const,std::vector<std::string>>>>::get_instance(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v3;
  uint64_t v5;
  uint64_t v6;

  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::pair<int const,std::vector<std::string>>>>::get_is_destroyed(void)::is_destroyed_flag)
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::get_instance(a1, a2, a3);
  if ((v3 & 1) == 0
  {
    boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::pair<int const,std::vector<std::string>>>>::singleton_wrapper(boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::pair<int const,std::vector<std::string>>>>::get_instance(void)::t, v5, v6);
    __cxa_atexit((void (*)(void *))boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::pair<int const,std::vector<std::string>>>>::~singleton_wrapper, boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::pair<int const,std::vector<std::string>>>>::get_instance(void)::t, &dword_2439D9000);
  }
  return boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::pair<int const,std::vector<std::string>>>>::get_instance(void)::t;
}

void sub_243A2ACA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::map<int,std::vector<std::string>>>>::get_instance(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v3;
  uint64_t v5;
  uint64_t v6;

  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::map<int,std::vector<std::string>>>>::get_is_destroyed(void)::is_destroyed_flag)
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::get_instance(a1, a2, a3);
  if ((v3 & 1) == 0
  {
    boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::map<int,std::vector<std::string>>>>::singleton_wrapper(boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::map<int,std::vector<std::string>>>>::get_instance(void)::t, v5, v6);
    __cxa_atexit((void (*)(void *))boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::map<int,std::vector<std::string>>>>::~singleton_wrapper, boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::map<int,std::vector<std::string>>>>::get_instance(void)::t, &dword_2439D9000);
  }
  return boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::map<int,std::vector<std::string>>>>::get_instance(void)::t;
}

void sub_243A2AD40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,pps::Histogram_Internal>>::get_instance(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v3;
  uint64_t v5;
  uint64_t v6;

  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,pps::Histogram_Internal>>::get_is_destroyed(void)::is_destroyed_flag)
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::get_instance(a1, a2, a3);
  if ((v3 & 1) == 0
  {
    boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,pps::Histogram_Internal>>::singleton_wrapper(boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,pps::Histogram_Internal>>::get_instance(void)::t, v5, v6);
    __cxa_atexit((void (*)(void *))boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,pps::Histogram_Internal>>::~singleton_wrapper, boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,pps::Histogram_Internal>>::get_instance(void)::t, &dword_2439D9000);
  }
  return boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,pps::Histogram_Internal>>::get_instance(void)::t;
}

void sub_243A2ADE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::transform::id>>::get_instance(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v3;
  uint64_t v5;
  uint64_t v6;

  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::transform::id>>::get_is_destroyed(void)::is_destroyed_flag)
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::get_instance(a1, a2, a3);
  if ((v3 & 1) == 0
  {
    boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::transform::id>>::singleton_wrapper(boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::transform::id>>::get_instance(void)::t, v5, v6);
    __cxa_atexit((void (*)(void *))boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::transform::id>>::~singleton_wrapper, boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::transform::id>>::get_instance(void)::t, &dword_2439D9000);
  }
  return boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::transform::id>>::get_instance(void)::t;
}

void sub_243A2AE80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>>::get_instance(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v3;
  uint64_t v5;
  uint64_t v6;

  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>>::get_is_destroyed(void)::is_destroyed_flag)
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::get_instance(a1, a2, a3);
  if ((v3 & 1) == 0
  {
    boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>>::singleton_wrapper(boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>>::get_instance(void)::t, v5, v6);
    __cxa_atexit((void (*)(void *))boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>>::~singleton_wrapper, boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>>::get_instance(void)::t, &dword_2439D9000);
  }
  return boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>>::get_instance(void)::t;
}

void sub_243A2AF20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<double>>>::get_instance(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v3;
  uint64_t v5;
  uint64_t v6;

  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<double>>>::get_is_destroyed(void)::is_destroyed_flag)
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::get_instance(a1, a2, a3);
  if ((v3 & 1) == 0
  {
    boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<double>>>::singleton_wrapper(boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<double>>>::get_instance(void)::t, v5, v6);
    __cxa_atexit((void (*)(void *))boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<double>>>::~singleton_wrapper, boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<double>>>::get_instance(void)::t, &dword_2439D9000);
  }
  return boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<double>>>::get_instance(void)::t;
}

void sub_243A2AFC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>>::get_instance(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v3;
  uint64_t v5;
  uint64_t v6;

  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>>::get_is_destroyed(void)::is_destroyed_flag)
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::get_instance(a1, a2, a3);
  if ((v3 & 1) == 0
  {
    boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>>::singleton_wrapper(boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>>::get_instance(void)::t, v5, v6);
    __cxa_atexit((void (*)(void *))boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>>::~singleton_wrapper, boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>>::get_instance(void)::t, &dword_2439D9000);
  }
  return boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>>::get_instance(void)::t;
}

void sub_243A2B060(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::get_instance(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v3;
  uint64_t v5;
  uint64_t v6;

  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::get_is_destroyed(void)::is_destroyed_flag)
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::get_instance(a1, a2, a3);
  if ((v3 & 1) == 0
  {
    boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::singleton_wrapper(boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::get_instance(void)::t, v5, v6);
    __cxa_atexit((void (*)(void *))boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::~singleton_wrapper, boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::get_instance(void)::t, &dword_2439D9000);
  }
  return boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::get_instance(void)::t;
}

void sub_243A2B100(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::get_instance(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v3;
  uint64_t v5;
  uint64_t v6;

  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::get_is_destroyed(void)::is_destroyed_flag)
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::get_instance(a1, a2, a3);
  if ((v3 & 1) == 0
  {
    boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::singleton_wrapper(boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::get_instance(void)::t, v5, v6);
    __cxa_atexit((void (*)(void *))boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::~singleton_wrapper, boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::get_instance(void)::t, &dword_2439D9000);
  }
  return boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::get_instance(void)::t;
}

void sub_243A2B1A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::get_instance(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v3;
  uint64_t v5;
  uint64_t v6;

  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::get_is_destroyed(void)::is_destroyed_flag)
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::get_instance(a1, a2, a3);
  if ((v3 & 1) == 0
  {
    boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::singleton_wrapper(boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::get_instance(void)::t, v5, v6);
    __cxa_atexit((void (*)(void *))boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::~singleton_wrapper, boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::get_instance(void)::t, &dword_2439D9000);
  }
  return boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::get_instance(void)::t;
}

void sub_243A2B240(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>>::get_instance(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v3;
  uint64_t v5;
  uint64_t v6;

  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>>::get_is_destroyed(void)::is_destroyed_flag)
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::get_instance(a1, a2, a3);
  if ((v3 & 1) == 0
  {
    boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>>::singleton_wrapper(boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>>::get_instance(void)::t, v5, v6);
    __cxa_atexit((void (*)(void *))boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>>::~singleton_wrapper, boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>>::get_instance(void)::t, &dword_2439D9000);
  }
  return boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>>::get_instance(void)::t;
}

void sub_243A2B2E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<unsigned long long>>>::get_instance(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v3;
  uint64_t v5;
  uint64_t v6;

  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<unsigned long long>>>::get_is_destroyed(void)::is_destroyed_flag)
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::get_instance(a1, a2, a3);
  if ((v3 & 1) == 0
  {
    boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<unsigned long long>>>::singleton_wrapper(boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<unsigned long long>>>::get_instance(void)::t, v5, v6);
    __cxa_atexit((void (*)(void *))boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<unsigned long long>>>::~singleton_wrapper, boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<unsigned long long>>>::get_instance(void)::t, &dword_2439D9000);
  }
  return boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<unsigned long long>>>::get_instance(void)::t;
}

void sub_243A2B380(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>>::get_instance(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v3;
  uint64_t v5;
  uint64_t v6;

  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>>::get_is_destroyed(void)::is_destroyed_flag)
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::get_instance(a1, a2, a3);
  if ((v3 & 1) == 0
  {
    boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>>::singleton_wrapper(boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>>::get_instance(void)::t, v5, v6);
    __cxa_atexit((void (*)(void *))boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>>::~singleton_wrapper, boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>>::get_instance(void)::t, &dword_2439D9000);
  }
  return boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>>::get_instance(void)::t;
}

void sub_243A2B420(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::unlimited_storage<std::allocator<char>>>>::get_instance(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v3;
  uint64_t v5;
  uint64_t v6;

  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::unlimited_storage<std::allocator<char>>>>::get_is_destroyed(void)::is_destroyed_flag)
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::get_instance(a1, a2, a3);
  if ((v3 & 1) == 0
  {
    boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::unlimited_storage<std::allocator<char>>>>::singleton_wrapper(boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::unlimited_storage<std::allocator<char>>>>::get_instance(void)::t, v5, v6);
    __cxa_atexit((void (*)(void *))boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::unlimited_storage<std::allocator<char>>>>::~singleton_wrapper, boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::unlimited_storage<std::allocator<char>>>>::get_instance(void)::t, &dword_2439D9000);
  }
  return boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::unlimited_storage<std::allocator<char>>>>::get_instance(void)::t;
}

void sub_243A2B4C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>>::get_instance(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v3;
  uint64_t v5;
  uint64_t v6;

  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>>::get_is_destroyed(void)::is_destroyed_flag)
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::get_instance(a1, a2, a3);
  if ((v3 & 1) == 0
  {
    boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>>::singleton_wrapper(boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>>::get_instance(void)::t, v5, v6);
    __cxa_atexit((void (*)(void *))boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>>::~singleton_wrapper, boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>>::get_instance(void)::t, &dword_2439D9000);
  }
  return boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>>::get_instance(void)::t;
}

void sub_243A2B560(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<pps::AxisEnum>>>::get_instance(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v3;
  uint64_t v5;
  uint64_t v6;

  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<pps::AxisEnum>>>::get_is_destroyed(void)::is_destroyed_flag)
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::get_instance(a1, a2, a3);
  if ((v3 & 1) == 0
  {
    boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<pps::AxisEnum>>>::singleton_wrapper(boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<pps::AxisEnum>>>::get_instance(void)::t, v5, v6);
    __cxa_atexit((void (*)(void *))boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<pps::AxisEnum>>>::~singleton_wrapper, boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<pps::AxisEnum>>>::get_instance(void)::t, &dword_2439D9000);
  }
  return boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<pps::AxisEnum>>>::get_instance(void)::t;
}

void sub_243A2B600(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<std::string>>>::get_instance(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v3;
  uint64_t v5;
  uint64_t v6;

  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<std::string>>>::get_is_destroyed(void)::is_destroyed_flag)
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::get_instance(a1, a2, a3);
  if ((v3 & 1) == 0
  {
    boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<std::string>>>::singleton_wrapper(boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<std::string>>>::get_instance(void)::t, v5, v6);
    __cxa_atexit((void (*)(void *))boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<std::string>>>::~singleton_wrapper, boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<std::string>>>::get_instance(void)::t, &dword_2439D9000);
  }
  return boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<std::string>>>::get_instance(void)::t;
}

void sub_243A2B6A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::pair<int const,std::vector<std::string>>>>::get_instance(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v3;
  uint64_t v5;
  uint64_t v6;

  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::pair<int const,std::vector<std::string>>>>::get_is_destroyed(void)::is_destroyed_flag)
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::get_instance(a1, a2, a3);
  if ((v3 & 1) == 0
  {
    boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::pair<int const,std::vector<std::string>>>>::singleton_wrapper(boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::pair<int const,std::vector<std::string>>>>::get_instance(void)::t, v5, v6);
    __cxa_atexit((void (*)(void *))boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::pair<int const,std::vector<std::string>>>>::~singleton_wrapper, boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::pair<int const,std::vector<std::string>>>>::get_instance(void)::t, &dword_2439D9000);
  }
  return boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::pair<int const,std::vector<std::string>>>>::get_instance(void)::t;
}

void sub_243A2B740(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::map<int,std::vector<std::string>>>>::get_instance(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v3;
  uint64_t v5;
  uint64_t v6;

  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::map<int,std::vector<std::string>>>>::get_is_destroyed(void)::is_destroyed_flag)
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::get_instance(a1, a2, a3);
  if ((v3 & 1) == 0
  {
    boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::map<int,std::vector<std::string>>>>::singleton_wrapper(boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::map<int,std::vector<std::string>>>>::get_instance(void)::t, v5, v6);
    __cxa_atexit((void (*)(void *))boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::map<int,std::vector<std::string>>>>::~singleton_wrapper, boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::map<int,std::vector<std::string>>>>::get_instance(void)::t, &dword_2439D9000);
  }
  return boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::map<int,std::vector<std::string>>>>::get_instance(void)::t;
}

void sub_243A2B7E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,pps::Histogram_Internal>>::get_instance(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v3;
  uint64_t v5;
  uint64_t v6;

  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,pps::Histogram_Internal>>::get_is_destroyed(void)::is_destroyed_flag)
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::get_instance(a1, a2, a3);
  if ((v3 & 1) == 0
  {
    boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,pps::Histogram_Internal>>::singleton_wrapper(boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,pps::Histogram_Internal>>::get_instance(void)::t, v5, v6);
    __cxa_atexit((void (*)(void *))boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,pps::Histogram_Internal>>::~singleton_wrapper, boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,pps::Histogram_Internal>>::get_instance(void)::t, &dword_2439D9000);
  }
  return boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,pps::Histogram_Internal>>::get_instance(void)::t;
}

void sub_243A2B880(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

boost::archive::detail::basic_iarchive *boost::archive::text_iarchive::text_iarchive(boost::archive::detail::basic_iarchive *a1, uint64_t *a2, int a3)
{
  char v3;

  v3 = a3;
  *(_QWORD *)boost::archive::text_iarchive_impl<boost::archive::text_iarchive>::text_iarchive_impl(a1, a2, a3) = &unk_25142A1E0;
  if ((v3 & 1) == 0)
    boost::archive::basic_text_iarchive<boost::archive::text_iarchive>::init((uint64_t)a1);
  return a1;
}

void sub_243A2B8DC(_Unwind_Exception *a1)
{
  boost::archive::detail::basic_iarchive *v1;

  boost::archive::detail::basic_iarchive::~basic_iarchive(v1);
  boost::archive::basic_text_iprimitive<std::istream>::~basic_text_iprimitive((uint64_t)v1 + 40);
  _Unwind_Resume(a1);
}

_QWORD *boost::archive::detail::common_iarchive<boost::archive::text_iarchive>::vload(uint64_t a1, _DWORD *a2)
{
  _QWORD *result;

  result = boost::archive::basic_text_iprimitive<std::istream>::load<unsigned int>((_QWORD *)(a1 + 40));
  *a2 = 0;
  return result;
}

_QWORD *boost::archive::detail::common_iarchive<boost::archive::text_iarchive>::vload(uint64_t a1)
{
  return boost::archive::basic_text_iprimitive<std::istream>::load<boost::archive::object_id_type>((_QWORD *)(a1 + 40));
}

{
  return boost::archive::basic_text_iprimitive<std::istream>::load<boost::archive::class_id_type>((_QWORD *)(a1 + 40));
}

{
  return boost::archive::basic_text_iprimitive<std::istream>::load<boost::archive::tracking_type>((_QWORD *)(a1 + 40));
}

_QWORD *boost::archive::basic_text_iprimitive<std::istream>::load<unsigned int>(_QWORD *a1)
{
  _QWORD *result;
  _BYTE v2[144];
  uint64_t v3;

  v3 = *MEMORY[0x24BDAC8D0];
  result = (_QWORD *)MEMORY[0x2494FEB48](*a1);
  if ((*((_BYTE *)result + *(_QWORD *)(*result - 24) + 32) & 5) != 0)
  {
    boost::archive::archive_exception::archive_exception((uint64_t)v2, 8, 0, 0);
    boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v2);
  }
  return result;
}

void sub_243A2BA20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  boost::archive::archive_exception::~archive_exception(&a10);
  _Unwind_Resume(a1);
}

void boost::serialization::throw_exception<boost::archive::archive_exception>(const boost::archive::archive_exception *a1)
{
  boost::archive::archive_exception *exception;
  void *v3;

  exception = (boost::archive::archive_exception *)__cxa_allocate_exception(0x90uLL);
  boost::archive::archive_exception::archive_exception(exception, a1);
}

_QWORD *boost::archive::basic_text_iprimitive<std::istream>::load<boost::archive::object_id_type>(_QWORD *a1)
{
  _QWORD *result;
  _BYTE v2[144];
  uint64_t v3;

  v3 = *MEMORY[0x24BDAC8D0];
  result = (_QWORD *)MEMORY[0x2494FEB48](*a1);
  if ((*((_BYTE *)result + *(_QWORD *)(*result - 24) + 32) & 5) != 0)
  {
    boost::archive::archive_exception::archive_exception((uint64_t)v2, 8, 0, 0);
    boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v2);
  }
  return result;
}

void sub_243A2BAF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  boost::archive::archive_exception::~archive_exception(&a10);
  _Unwind_Resume(a1);
}

_QWORD *boost::archive::basic_text_iprimitive<std::istream>::load<boost::archive::class_id_type>(_QWORD *a1)
{
  _QWORD *result;
  _BYTE v2[144];
  uint64_t v3;

  v3 = *MEMORY[0x24BDAC8D0];
  result = (_QWORD *)MEMORY[0x2494FEB60](*a1);
  if ((*((_BYTE *)result + *(_QWORD *)(*result - 24) + 32) & 5) != 0)
  {
    boost::archive::archive_exception::archive_exception((uint64_t)v2, 8, 0, 0);
    boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v2);
  }
  return result;
}

void sub_243A2BB9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  boost::archive::archive_exception::~archive_exception(&a10);
  _Unwind_Resume(a1);
}

_QWORD *boost::archive::basic_text_iprimitive<std::istream>::load<boost::archive::tracking_type>(_QWORD *a1)
{
  _QWORD *result;
  _BYTE v2[144];
  uint64_t v3;

  v3 = *MEMORY[0x24BDAC8D0];
  result = (_QWORD *)MEMORY[0x2494FEB24](*a1);
  if ((*((_BYTE *)result + *(_QWORD *)(*result - 24) + 32) & 5) != 0)
  {
    boost::archive::archive_exception::archive_exception((uint64_t)v2, 8, 0, 0);
    boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v2);
  }
  return result;
}

void sub_243A2BC40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  boost::archive::archive_exception::~archive_exception(&a10);
  _Unwind_Resume(a1);
}

void pps::Histogram_Internal::~Histogram_Internal(char **this)
{
  char *v2;
  void **v3;

  *this = (char *)&unk_25142A2A0;
  std::__tree<std::__value_type<int,std::vector<std::string>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::string>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::string>>>>::destroy((uint64_t)(this + 11), this[12]);
  v2 = this[8];
  if (v2)
  {
    this[9] = v2;
    operator delete(v2);
  }
  boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::destroy((uint64_t)(this + 4));
  v3 = (void **)(this + 1);
  std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::__destroy_vector::operator()[abi:ne180100](&v3);
}

{
  pps::Histogram_Internal::~Histogram_Internal(this);
  JUMPOUT(0x2494FECF8);
}

void boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::destroy(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v1 = *(_QWORD *)(a1 + 24);
  if ((v1 == 0) != (*(_QWORD *)(a1 + 8) == 0))
    __assert_rtn("destroy", "unlimited_storage.hpp", 494, "(ptr == nullptr) == (size == 0)");
  if (v1)
  {
    v3 = a1;
    _ZNK5boost9histogram17unlimited_storageINSt3__19allocatorIcEEE11buffer_type5applyIZNS6_7destroyEvEUlPT_E_JEEEDcOS8_DpOT0_(a1, (uint64_t)&v3);
    *(_QWORD *)(a1 + 8) = 0;
    *(_BYTE *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
  }
}

void _ZNK5boost9histogram17unlimited_storageINSt3__19allocatorIcEEE11buffer_type5applyIZNS6_7destroyEvEUlPT_E_JEEEDcOS8_DpOT0_(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;
  char v4;
  char v5;
  char v6;
  char v7;

  switch(*(_BYTE *)(a1 + 16))
  {
    case 0:
      boost::histogram::detail::destroy_buffer<std::allocator<unsigned char>>((uint64_t)&v2, *(void **)(a1 + 24), *(_QWORD *)(*(_QWORD *)a2 + 8));
      break;
    case 1:
      boost::histogram::detail::destroy_buffer<std::allocator<unsigned char>>((uint64_t)&v3, *(void **)(a1 + 24), *(_QWORD *)(*(_QWORD *)a2 + 8));
      break;
    case 2:
      boost::histogram::detail::destroy_buffer<std::allocator<unsigned char>>((uint64_t)&v4, *(void **)(a1 + 24), *(_QWORD *)(*(_QWORD *)a2 + 8));
      break;
    case 3:
      boost::histogram::detail::destroy_buffer<std::allocator<unsigned char>>((uint64_t)&v5, *(void **)(a1 + 24), *(_QWORD *)(*(_QWORD *)a2 + 8));
      break;
    case 4:
      boost::histogram::detail::destroy_buffer<std::allocator<boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>>((uint64_t)&v6, *(char **)(a1 + 24), *(_QWORD *)(*(_QWORD *)a2 + 8));
      break;
    default:
      boost::histogram::detail::destroy_buffer<std::allocator<unsigned char>>((uint64_t)&v7, *(void **)(a1 + 24), *(_QWORD *)(*(_QWORD *)a2 + 8));
      break;
  }
}

void boost::histogram::detail::destroy_buffer<std::allocator<unsigned char>>(uint64_t a1, void *__p, uint64_t a3)
{
  if (!__p)
    boost::histogram::detail::destroy_buffer<std::allocator<unsigned char>>(a1, 0, a3);
  if (!a3)
    boost::histogram::detail::destroy_buffer<std::allocator<unsigned char>>(a1, (uint64_t)__p, 0);
  operator delete(__p);
}

void boost::histogram::detail::destroy_buffer<std::allocator<boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>>(uint64_t a1, char *__p, uint64_t a3)
{
  uint64_t v4;
  void *v5;

  if (!__p)
    boost::histogram::detail::destroy_buffer<std::allocator<unsigned char>>(a1, 0, a3);
  if (!a3)
    boost::histogram::detail::destroy_buffer<std::allocator<unsigned char>>(a1, (uint64_t)__p, 0);
  v4 = 24 * a3;
  do
  {
    v5 = *(void **)&__p[v4 - 24];
    if (v5)
    {
      *(_QWORD *)&__p[v4 - 16] = v5;
      operator delete(v5);
    }
    v4 -= 24;
  }
  while (v4);
  operator delete(__p);
}

void std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 56;
        boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::destroy_content(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::destroy_content(uint64_t a1)
{
  int v1;
  char v2;

  v1 = *(_DWORD *)a1 ^ (*(int *)a1 >> 31);
  if (v1 != 2)
  {
    if (v1 == 1)
    {
      boost::detail::variant::destroyer::internal_visit<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>((uint64_t)&v2, a1 + 8);
      return;
    }
    if (v1)
      boost::detail::variant::forced_return<void>();
  }
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
}

void boost::detail::variant::destroyer::internal_visit<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>(uint64_t a1, uint64_t a2)
{
  void *v3;

  if (*(char *)(a2 + 47) < 0)
    operator delete(*(void **)(a2 + 24));
  v3 = *(void **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)(a2 + 8) = v3;
    operator delete(v3);
  }
}

uint64_t boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>::~variable(uint64_t a1)
{
  void *v2;

  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  v2 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

void boost::detail::variant::forced_return<void>()
{
  __assert_rtn("forced_return", "forced_return.hpp", 38, "false");
}

void ___ZL9logHandlev_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.PerfPowerServicesReader", "PPSHistogram");
  v1 = (void *)logHandle(void)::logHandle;
  logHandle(void)::logHandle = (uint64_t)v0;

}

boost::archive::detail::basic_oarchive *boost::archive::text_oarchive::text_oarchive(boost::archive::detail::basic_oarchive *a1, uint64_t *a2, int a3)
{
  char v3;

  v3 = a3;
  *(_QWORD *)boost::archive::text_oarchive_impl<boost::archive::text_oarchive>::text_oarchive_impl(a1, a2, a3) = &unk_25142A310;
  if ((v3 & 1) == 0)
    boost::archive::basic_text_oarchive<boost::archive::text_oarchive>::init(a1);
  return a1;
}

void sub_243A2C0B8(_Unwind_Exception *a1)
{
  boost::archive::detail::basic_oarchive *v1;

  boost::archive::detail::basic_oarchive::~basic_oarchive(v1);
  boost::archive::basic_text_oprimitive<std::ostream>::~basic_text_oprimitive((uint64_t)v1 + 48);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::detail::common_oarchive<boost::archive::text_oarchive>::vsave(boost::archive::detail::basic_oarchive *a1)
{
  *((_DWORD *)a1 + 10) = 1;
  return boost::archive::save_access::save_primitive<boost::archive::text_oarchive,boost::archive::object_id_type>(a1);
}

uint64_t boost::archive::save_access::save_primitive<boost::archive::text_oarchive,boost::archive::version_type>(boost::archive::detail::basic_oarchive *a1)
{
  boost::archive::detail::basic_oarchive::end_preamble(a1);
  boost::archive::basic_text_oarchive<boost::archive::text_oarchive>::newtoken((uint64_t)a1);
  return boost::archive::basic_text_oprimitive<std::ostream>::save_impl<unsigned int>((_QWORD *)a1 + 6);
}

uint64_t boost::archive::basic_text_oprimitive<std::ostream>::save_impl<unsigned int>(_QWORD *a1)
{
  _BYTE v2[144];
  uint64_t v3;

  v3 = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(*a1 + *(_QWORD *)(*(_QWORD *)*a1 - 24) + 32) & 5) != 0)
  {
    boost::archive::archive_exception::archive_exception((uint64_t)v2, 13, 0, 0);
    boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v2);
  }
  return std::ostream::operator<<();
}

void sub_243A2C214(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  boost::archive::archive_exception::~archive_exception(&a10);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::save_access::save_primitive<boost::archive::text_oarchive,boost::archive::object_id_type>(boost::archive::detail::basic_oarchive *a1)
{
  boost::archive::detail::basic_oarchive::end_preamble(a1);
  boost::archive::basic_text_oarchive<boost::archive::text_oarchive>::newtoken((uint64_t)a1);
  return boost::archive::basic_text_oprimitive<std::ostream>::save_impl<boost::archive::object_id_type>((_QWORD *)a1 + 6);
}

uint64_t boost::archive::basic_text_oprimitive<std::ostream>::save_impl<boost::archive::object_id_type>(_QWORD *a1)
{
  _BYTE v2[144];
  uint64_t v3;

  v3 = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(*a1 + *(_QWORD *)(*(_QWORD *)*a1 - 24) + 32) & 5) != 0)
  {
    boost::archive::archive_exception::archive_exception((uint64_t)v2, 13, 0, 0);
    boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v2);
  }
  return std::ostream::operator<<();
}

void sub_243A2C2FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  boost::archive::archive_exception::~archive_exception(&a10);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::save_access::save_primitive<boost::archive::text_oarchive,boost::archive::object_reference_type>(boost::archive::detail::basic_oarchive *a1)
{
  boost::archive::detail::basic_oarchive::end_preamble(a1);
  boost::archive::basic_text_oarchive<boost::archive::text_oarchive>::newtoken((uint64_t)a1);
  return boost::archive::basic_text_oprimitive<std::ostream>::save_impl<boost::archive::object_reference_type>((_QWORD *)a1 + 6);
}

uint64_t boost::archive::basic_text_oprimitive<std::ostream>::save_impl<boost::archive::object_reference_type>(_QWORD *a1)
{
  _BYTE v2[144];
  uint64_t v3;

  v3 = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(*a1 + *(_QWORD *)(*(_QWORD *)*a1 - 24) + 32) & 5) != 0)
  {
    boost::archive::archive_exception::archive_exception((uint64_t)v2, 13, 0, 0);
    boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v2);
  }
  return std::ostream::operator<<();
}

void sub_243A2C3E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  boost::archive::archive_exception::~archive_exception(&a10);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::save_access::save_primitive<boost::archive::text_oarchive,boost::archive::class_id_type>(boost::archive::detail::basic_oarchive *a1)
{
  boost::archive::detail::basic_oarchive::end_preamble(a1);
  boost::archive::basic_text_oarchive<boost::archive::text_oarchive>::newtoken((uint64_t)a1);
  return boost::archive::basic_text_oprimitive<std::ostream>::save_impl<boost::archive::class_id_type>((_QWORD *)a1 + 6);
}

uint64_t boost::archive::basic_text_oprimitive<std::ostream>::save_impl<boost::archive::class_id_type>(_QWORD *a1)
{
  _BYTE v2[144];
  uint64_t v3;

  v3 = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(*a1 + *(_QWORD *)(*(_QWORD *)*a1 - 24) + 32) & 5) != 0)
  {
    boost::archive::archive_exception::archive_exception((uint64_t)v2, 13, 0, 0);
    boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v2);
  }
  return std::ostream::operator<<();
}

void sub_243A2C4CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  boost::archive::archive_exception::~archive_exception(&a10);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::save_access::save_primitive<boost::archive::text_oarchive,boost::archive::class_id_reference_type>(boost::archive::detail::basic_oarchive *a1)
{
  boost::archive::detail::basic_oarchive::end_preamble(a1);
  boost::archive::basic_text_oarchive<boost::archive::text_oarchive>::newtoken((uint64_t)a1);
  return boost::archive::basic_text_oprimitive<std::ostream>::save_impl<boost::archive::class_id_reference_type>((_QWORD *)a1 + 6);
}

uint64_t boost::archive::basic_text_oprimitive<std::ostream>::save_impl<boost::archive::class_id_reference_type>(_QWORD *a1)
{
  _BYTE v2[144];
  uint64_t v3;

  v3 = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(*a1 + *(_QWORD *)(*(_QWORD *)*a1 - 24) + 32) & 5) != 0)
  {
    boost::archive::archive_exception::archive_exception((uint64_t)v2, 13, 0, 0);
    boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v2);
  }
  return std::ostream::operator<<();
}

void sub_243A2C5B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  boost::archive::archive_exception::~archive_exception(&a10);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::save_access::save_primitive<boost::archive::text_oarchive,boost::archive::tracking_type>(boost::archive::detail::basic_oarchive *a1)
{
  boost::archive::detail::basic_oarchive::end_preamble(a1);
  boost::archive::basic_text_oarchive<boost::archive::text_oarchive>::newtoken((uint64_t)a1);
  return boost::archive::basic_text_oprimitive<std::ostream>::save_impl<boost::archive::tracking_type>((_QWORD *)a1 + 6);
}

uint64_t boost::archive::basic_text_oprimitive<std::ostream>::save_impl<boost::archive::tracking_type>(_QWORD *a1)
{
  _BYTE v2[144];
  uint64_t v3;

  v3 = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(*a1 + *(_QWORD *)(*(_QWORD *)*a1 - 24) + 32) & 5) != 0)
  {
    boost::archive::archive_exception::archive_exception((uint64_t)v2, 13, 0, 0);
    boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v2);
  }
  return std::ostream::operator<<();
}

void sub_243A2C69C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  boost::archive::archive_exception::~archive_exception(&a10);
  _Unwind_Resume(a1);
}

_QWORD *std::string::basic_string[abi:ne180100](_QWORD *__dst, void *__src, size_t __len)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    *__dst = v6;
  }
  else
  {
    *((_BYTE *)__dst + 23) = __len;
    v6 = __dst;
    if (!__len)
      goto LABEL_9;
  }
  memmove(v6, __src, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __dst;
}

void std::string::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("basic_string");
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_251429160, MEMORY[0x24BEDAAF0]);
}

void sub_243A2C7A8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8B8] + 16);
  return result;
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x24BEDB748], MEMORY[0x24BEDABB8]);
}

_QWORD *std::string::basic_string[abi:ne180100]<0>(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

uint64_t std::stringbuf::basic_stringbuf[abi:ne180100](uint64_t a1, const std::string *a2, int a3)
{
  uint64_t v6;

  v6 = std::streambuf::basic_streambuf();
  *(_QWORD *)v6 = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_DWORD *)(v6 + 96) = a3;
  std::string::operator=((std::string *)(v6 + 64), a2);
  std::stringbuf::__init_buf_ptrs[abi:ne180100](a1);
  return a1;
}

void sub_243A2C924(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 87) < 0)
    operator delete(*v2);
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

void std::stringbuf::__init_buf_ptrs[abi:ne180100](uint64_t a1)
{
  std::string *v2;
  char v3;
  std::string *v4;
  unint64_t v5;
  int v6;
  std::string::size_type v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  *(_QWORD *)(a1 + 88) = 0;
  v2 = (std::string *)(a1 + 64);
  v3 = *(_BYTE *)(a1 + 87);
  if (v3 < 0)
  {
    v4 = *(std::string **)(a1 + 64);
    v5 = *(_QWORD *)(a1 + 72);
  }
  else
  {
    v4 = v2;
    v5 = *(unsigned __int8 *)(a1 + 87);
  }
  v6 = *(_DWORD *)(a1 + 96);
  if ((v6 & 8) != 0)
  {
    *(_QWORD *)(a1 + 88) = (char *)v4 + v5;
    *(_QWORD *)(a1 + 16) = v4;
    *(_QWORD *)(a1 + 24) = v4;
    *(_QWORD *)(a1 + 32) = (char *)v4 + v5;
  }
  if ((v6 & 0x10) != 0)
  {
    *(_QWORD *)(a1 + 88) = (char *)v4 + v5;
    v7 = v3 < 0 ? (*(_QWORD *)(a1 + 80) & 0x7FFFFFFFFFFFFFFFLL) - 1 : 22;
    std::string::resize(v2, v7, 0);
    v8 = *(char *)(a1 + 87) < 0 ? *(_QWORD *)(a1 + 72) : *(unsigned __int8 *)(a1 + 87);
    *(_QWORD *)(a1 + 40) = v4;
    *(_QWORD *)(a1 + 48) = v4;
    *(_QWORD *)(a1 + 56) = (char *)v4 + v8;
    if ((*(_BYTE *)(a1 + 96) & 3) != 0)
    {
      if (v5 >> 31)
      {
        v9 = ((v5 - 0x80000000) * (unsigned __int128)0x200000005uLL) >> 64;
        v10 = 0x7FFFFFFF * ((v9 + ((v5 - 0x80000000 - v9) >> 1)) >> 30);
        v4 = (std::string *)((char *)v4 + v10 + 0x7FFFFFFF);
        v5 = v5 - v10 - 0x7FFFFFFF;
        *(_QWORD *)(a1 + 48) = v4;
      }
      if (v5)
        *(_QWORD *)(a1 + 48) = (char *)v4 + v5;
    }
  }
}

void std::__tree<std::__value_type<int,std::vector<std::string>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::string>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::string>>>>::destroy(uint64_t a1, char *a2)
{
  void **v4;

  if (a2)
  {
    std::__tree<std::__value_type<int,std::vector<std::string>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::string>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::string>>>>::destroy(a1, *(_QWORD *)a2);
    std::__tree<std::__value_type<int,std::vector<std::string>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::string>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::string>>>>::destroy(a1, *((_QWORD *)a2 + 1));
    v4 = (void **)(a2 + 40);
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
    operator delete(a2);
  }
}

void boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::~singleton_wrapper(boost::serialization::extended_type_info *a1)
{
  *(_QWORD *)a1 = &unk_25142A3E0;
  boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::~extended_type_info_typeid(a1);
}

{
  *(_QWORD *)a1 = &unk_25142A3E0;
  boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::~extended_type_info_typeid(a1);
  JUMPOUT(0x2494FECF8);
}

boost::serialization::typeid_system::extended_type_info_typeid_0 *boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::singleton_wrapper(boost::serialization::typeid_system::extended_type_info_typeid_0 *a1)
{
  *(_QWORD *)boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::extended_type_info_typeid(a1) = &unk_25142A3E0;
  if (boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::get_is_destroyed(void)::is_destroyed_flag)
    __assert_rtn("singleton_wrapper", "singleton.hpp", 148, "! is_destroyed()");
  return a1;
}

void sub_243A2CB34(_Unwind_Exception *a1)
{
  boost::serialization::extended_type_info *v1;

  boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::~extended_type_info_typeid(v1);
  _Unwind_Resume(a1);
}

boost::serialization::typeid_system::extended_type_info_typeid_0 *boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::extended_type_info_typeid(boost::serialization::typeid_system::extended_type_info_typeid_0 *a1)
{
  boost::serialization::typeid_system::extended_type_info_typeid_0 *v2;

  v2 = (boost::serialization::typeid_system::extended_type_info_typeid_0 *)boost::serialization::typeid_system::extended_type_info_typeid_0::extended_type_info_typeid_0(a1, 0);
  *(_QWORD *)v2 = &unk_25142A488;
  boost::serialization::extended_type_info::key_register((uint64_t *)a1);
  return a1;
}

void sub_243A2CB94(_Unwind_Exception *a1)
{
  boost::serialization::typeid_system::extended_type_info_typeid_0 *v1;

  boost::serialization::typeid_system::extended_type_info_typeid_0::~extended_type_info_typeid_0(v1);
  _Unwind_Resume(a1);
}

void boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::~extended_type_info_typeid(boost::serialization::extended_type_info *a1)
{
  *(_QWORD *)a1 = &unk_25142A488;
  boost::serialization::extended_type_info::key_unregister(a1);
  boost::serialization::typeid_system::extended_type_info_typeid_0::type_unregister((uint64_t *)a1);
  boost::serialization::typeid_system::extended_type_info_typeid_0::~extended_type_info_typeid_0(a1);
}

{
  boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::~extended_type_info_typeid(a1);
  JUMPOUT(0x2494FECF8);
}

uint64_t boost::serialization::typeid_system::extended_type_info_typeid_0::get_debug_info(boost::serialization::typeid_system::extended_type_info_typeid_0 *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 3);
  if (v1)
    return *(_QWORD *)(v1 + 8) & 0x7FFFFFFFFFFFFFFFLL;
  else
    return 0;
}

void boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct(uint64_t a1, uint64_t a2, uint64_t a3)
{
  switch((int)a2)
  {
    case 0:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct(a1, a2, a3);
    case 1:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct(a1, a2, a3);
    case 2:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct(a1, a2, a3);
    case 3:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct(a1, a2, a3);
    case 4:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct(a1, a2, a3);
    default:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct(a1, a2, a3);
  }
}

{
  OUTLINED_FUNCTION_3("construct", "extended_type_info_typeid.hpp", a3, "false");
}

{
  OUTLINED_FUNCTION_0("factory", "factory.hpp", a3, "false");
}

uint64_t boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::destroy(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 8))(a2);
  return result;
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,pps::Histogram_Internal>::load_object_data(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4)
{
  boost::archive::detail::basic_iarchive_impl **v6;

  v6 = (boost::archive::detail::basic_iarchive_impl **)boost::serialization::smart_cast_impl::reference<boost::archive::text_iarchive &>::polymorphic::cross::cast<boost::archive::detail::basic_iarchive>(a2);
  return pps::Histogram_Internal::serialize<boost::archive::text_iarchive>(a3, v6, a4);
}

uint64_t pps::Histogram_Internal::serialize<boost::archive::text_iarchive>(uint64_t a1, boost::archive::detail::basic_iarchive_impl **a2, uint64_t a3)
{
  unint64_t v5;
  const boost::archive::detail::basic_iserializer *instance;
  uint64_t object;
  uint64_t v8;
  uint64_t v9;
  const boost::archive::detail::basic_iserializer *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const boost::archive::detail::basic_iserializer *v14;

  v5 = a1 + 8;
  instance = (const boost::archive::detail::basic_iserializer *)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>>::get_instance(a1, (uint64_t)a2, a3);
  object = boost::archive::detail::basic_iarchive::load_object(a2, v5, instance);
  v10 = (const boost::archive::detail::basic_iserializer *)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<pps::AxisEnum>>>::get_instance(object, v8, v9);
  v11 = boost::archive::detail::basic_iarchive::load_object(a2, a1 + 64, v10);
  v14 = (const boost::archive::detail::basic_iserializer *)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::map<int,std::vector<std::string>>>>::get_instance(v11, v12, v13);
  return boost::archive::detail::basic_iarchive::load_object(a2, a1 + 88, v14);
}

void *boost::serialization::smart_cast_impl::reference<boost::archive::text_iarchive &>::polymorphic::cross::cast<boost::archive::detail::basic_iarchive>(const void *a1)
{
  void *result;

  if (!result)
    __cxa_bad_cast();
  return result;
}

void boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>>::~singleton_wrapper(boost::serialization::extended_type_info *a1)
{
  *(_QWORD *)a1 = &unk_25142A4D0;
  boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::serialization::extended_type_info_typeid<boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>::~extended_type_info_typeid(a1);
}

{
  *(_QWORD *)a1 = &unk_25142A4D0;
  boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::serialization::extended_type_info_typeid<boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>::~extended_type_info_typeid(a1);
  JUMPOUT(0x2494FECF8);
}

boost::serialization::typeid_system::extended_type_info_typeid_0 *boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>>::singleton_wrapper(boost::serialization::typeid_system::extended_type_info_typeid_0 *a1)
{
  *(_QWORD *)boost::serialization::extended_type_info_typeid<boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>::extended_type_info_typeid(a1) = &unk_25142A4D0;
  if (boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>>::get_is_destroyed(void)::is_destroyed_flag)
    __assert_rtn("singleton_wrapper", "singleton.hpp", 148, "! is_destroyed()");
  return a1;
}

void sub_243A2CE28(_Unwind_Exception *a1)
{
  boost::serialization::extended_type_info *v1;

  boost::serialization::extended_type_info_typeid<boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>::~extended_type_info_typeid(v1);
  _Unwind_Resume(a1);
}

boost::serialization::typeid_system::extended_type_info_typeid_0 *boost::serialization::extended_type_info_typeid<boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>::extended_type_info_typeid(boost::serialization::typeid_system::extended_type_info_typeid_0 *a1)
{
  boost::serialization::typeid_system::extended_type_info_typeid_0 *v2;

  v2 = (boost::serialization::typeid_system::extended_type_info_typeid_0 *)boost::serialization::typeid_system::extended_type_info_typeid_0::extended_type_info_typeid_0(a1, 0);
  *(_QWORD *)v2 = &unk_25142A578;
  boost::serialization::extended_type_info::key_register((uint64_t *)a1);
  return a1;
}

void sub_243A2CE88(_Unwind_Exception *a1)
{
  boost::serialization::typeid_system::extended_type_info_typeid_0 *v1;

  boost::serialization::typeid_system::extended_type_info_typeid_0::~extended_type_info_typeid_0(v1);
  _Unwind_Resume(a1);
}

void boost::serialization::extended_type_info_typeid<boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>::~extended_type_info_typeid(boost::serialization::extended_type_info *a1)
{
  *(_QWORD *)a1 = &unk_25142A578;
  boost::serialization::extended_type_info::key_unregister(a1);
  boost::serialization::typeid_system::extended_type_info_typeid_0::type_unregister((uint64_t *)a1);
  boost::serialization::typeid_system::extended_type_info_typeid_0::~extended_type_info_typeid_0(a1);
}

{
  boost::serialization::extended_type_info_typeid<boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>::~extended_type_info_typeid(a1);
  JUMPOUT(0x2494FECF8);
}

void boost::serialization::extended_type_info_typeid<boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>::construct(uint64_t a1, uint64_t a2, uint64_t a3)
{
  switch((int)a2)
  {
    case 0:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct(a1, a2, a3);
    case 1:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct(a1, a2, a3);
    case 2:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct(a1, a2, a3);
    case 3:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct(a1, a2, a3);
    case 4:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct(a1, a2, a3);
    default:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct(a1, a2, a3);
  }
}

uint64_t boost::serialization::extended_type_info_typeid<boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>::destroy(uint64_t a1, uint64_t a2)
{
  return boost::serialization::access::destroy<boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>(a2);
}

uint64_t boost::serialization::access::destroy<boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>(uint64_t result)
{
  void **v1;
  void **v2;

  if (result)
  {
    v1 = (void **)result;
    boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::destroy(result + 24);
    v2 = v1;
    std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::__destroy_vector::operator()[abi:ne180100](&v2);
    return MEMORY[0x2494FECF8](v1, 0x10A0C400559A86CLL);
  }
  return result;
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>::load_object_data(uint64_t a1, const void *a2, unint64_t a3, uint64_t a4)
{
  boost::archive::detail::basic_iarchive_impl **v6;

  v6 = (boost::archive::detail::basic_iarchive_impl **)boost::serialization::smart_cast_impl::reference<boost::archive::text_iarchive &>::polymorphic::cross::cast<boost::archive::detail::basic_iarchive>(a2);
  return boost::histogram::serialize<boost::archive::text_iarchive,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>(v6, a3, a4);
}

uint64_t boost::histogram::serialize<boost::archive::text_iarchive,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>(boost::archive::detail::basic_iarchive_impl **a1, unint64_t a2, uint64_t a3)
{
  const boost::archive::detail::basic_iserializer *instance;
  uint64_t object;
  uint64_t v7;
  uint64_t v8;
  const boost::archive::detail::basic_iserializer *v9;

  instance = (const boost::archive::detail::basic_iserializer *)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>>::get_instance((uint64_t)a1, a2, a3);
  object = boost::archive::detail::basic_iarchive::load_object(a1, a2, instance);
  v9 = (const boost::archive::detail::basic_iserializer *)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::unlimited_storage<std::allocator<char>>>>::get_instance(object, v7, v8);
  return boost::archive::detail::basic_iarchive::load_object(a1, a2 + 24, v9);
}

void boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>>::~singleton_wrapper(boost::serialization::extended_type_info *a1)
{
  *(_QWORD *)a1 = &unk_25142A5D0;
  boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::serialization::extended_type_info_typeid<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::~extended_type_info_typeid(a1);
}

{
  *(_QWORD *)a1 = &unk_25142A5D0;
  boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::serialization::extended_type_info_typeid<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::~extended_type_info_typeid(a1);
  JUMPOUT(0x2494FECF8);
}

boost::serialization::typeid_system::extended_type_info_typeid_0 *boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>>::singleton_wrapper(boost::serialization::typeid_system::extended_type_info_typeid_0 *a1)
{
  *(_QWORD *)boost::serialization::extended_type_info_typeid<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::extended_type_info_typeid(a1) = &unk_25142A5D0;
  if (boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>>::get_is_destroyed(void)::is_destroyed_flag)
    __assert_rtn("singleton_wrapper", "singleton.hpp", 148, "! is_destroyed()");
  return a1;
}

void sub_243A2D0EC(_Unwind_Exception *a1)
{
  boost::serialization::extended_type_info *v1;

  boost::serialization::extended_type_info_typeid<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::~extended_type_info_typeid(v1);
  _Unwind_Resume(a1);
}

boost::serialization::typeid_system::extended_type_info_typeid_0 *boost::serialization::extended_type_info_typeid<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::extended_type_info_typeid(boost::serialization::typeid_system::extended_type_info_typeid_0 *a1)
{
  boost::serialization::typeid_system::extended_type_info_typeid_0 *v2;

  v2 = (boost::serialization::typeid_system::extended_type_info_typeid_0 *)boost::serialization::typeid_system::extended_type_info_typeid_0::extended_type_info_typeid_0(a1, 0);
  *(_QWORD *)v2 = &unk_25142A678;
  boost::serialization::extended_type_info::key_register((uint64_t *)a1);
  return a1;
}

void sub_243A2D14C(_Unwind_Exception *a1)
{
  boost::serialization::typeid_system::extended_type_info_typeid_0 *v1;

  boost::serialization::typeid_system::extended_type_info_typeid_0::~extended_type_info_typeid_0(v1);
  _Unwind_Resume(a1);
}

void boost::serialization::extended_type_info_typeid<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::~extended_type_info_typeid(boost::serialization::extended_type_info *a1)
{
  *(_QWORD *)a1 = &unk_25142A678;
  boost::serialization::extended_type_info::key_unregister(a1);
  boost::serialization::typeid_system::extended_type_info_typeid_0::type_unregister((uint64_t *)a1);
  boost::serialization::typeid_system::extended_type_info_typeid_0::~extended_type_info_typeid_0(a1);
}

{
  boost::serialization::extended_type_info_typeid<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::~extended_type_info_typeid(a1);
  JUMPOUT(0x2494FECF8);
}

void boost::serialization::extended_type_info_typeid<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::construct(uint64_t a1, uint64_t a2, uint64_t a3)
{
  switch((int)a2)
  {
    case 0:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct(a1, a2, a3);
    case 1:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct(a1, a2, a3);
    case 2:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct(a1, a2, a3);
    case 3:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct(a1, a2, a3);
    case 4:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct(a1, a2, a3);
    default:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct(a1, a2, a3);
  }
}

void **boost::serialization::extended_type_info_typeid<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::destroy(uint64_t a1, void **a2)
{
  return boost::serialization::access::destroy<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>(a2);
}

void **boost::serialization::access::destroy<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>(void **result)
{
  void **v1;
  void **v2;

  if (result)
  {
    v1 = result;
    v2 = result;
    std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::__destroy_vector::operator()[abi:ne180100](&v2);
    return (void **)MEMORY[0x2494FECF8](v1, 0x20C40960023A9);
  }
  return result;
}

void boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::load_object_data(uint64_t a1, const void *a2, uint64_t *a3)
{
  void *v4;

  v4 = boost::serialization::smart_cast_impl::reference<boost::archive::text_iarchive &>::polymorphic::cross::cast<boost::archive::detail::basic_iarchive>(a2);
  boost::serialization::free_loader<boost::archive::text_iarchive,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::invoke((uint64_t)v4, a3);
}

void boost::serialization::free_loader<boost::archive::text_iarchive,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::invoke(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  unint64_t v5;
  unsigned __int16 v6;

  boost::archive::detail::basic_iarchive::get_library_version(a1, &v6);
  v5 = 0;
  boost::archive::basic_text_iprimitive<std::istream>::load<boost::serialization::collection_size_type>((_QWORD *)(a1 + 40));
  if (v6 >= 4u)
    boost::archive::basic_text_iprimitive<std::istream>::load<unsigned int>((_QWORD *)(a1 + 40));
  std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::reserve(a2, v5);
  v4 = v5;
  boost::serialization::stl::collection_load_impl<boost::archive::text_iarchive,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>((boost::archive::detail::basic_iarchive_impl **)a1, a2, &v4);
}

uint64_t std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (0x6DB6DB6DB6DB6DB7 * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0x492492492492493)
      std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 56 * v6;
    std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_243A2D424(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void boost::serialization::stl::collection_load_impl<boost::archive::text_iarchive,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>(boost::archive::detail::basic_iarchive_impl **a1, uint64_t *a2, unint64_t *a3)
{
  uint64_t object;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  const boost::archive::detail::basic_iserializer *instance;
  unint64_t v12;

  std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::resize(a2, *a3);
  v9 = *a2;
  if ((*a3)--)
  {
    do
    {
      instance = (const boost::archive::detail::basic_iserializer *)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::get_instance(object, v7, v8);
      object = boost::archive::detail::basic_iarchive::load_object(a1, v9, instance);
      v12 = (*a3)--;
      v9 += 56;
    }
    while (v12);
  }
}

_QWORD *boost::archive::basic_text_iprimitive<std::istream>::load<boost::serialization::collection_size_type>(_QWORD *a1)
{
  _QWORD *result;
  _BYTE v2[144];
  uint64_t v3;

  v3 = *MEMORY[0x24BDAC8D0];
  result = (_QWORD *)MEMORY[0x2494FEB54](*a1);
  if ((*((_BYTE *)result + *(_QWORD *)(*result - 24) + 32) & 5) != 0)
  {
    boost::archive::archive_exception::archive_exception((uint64_t)v2, 8, 0, 0);
    boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v2);
  }
  return result;
}

void sub_243A2D540(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  boost::archive::archive_exception::~archive_exception(&a10);
  _Unwind_Resume(a1);
}

void std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

uint64_t std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *a1;
  v4 = a1[1];
  result = a2[1];
  while (v4 != v5)
  {
    v4 -= 56;
    result = boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::variant(result - 56, v4);
  }
  a2[1] = result;
  v7 = *a1;
  *a1 = result;
  a2[1] = v7;
  v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x492492492492493)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(56 * a2);
}

uint64_t boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::variant(uint64_t result, uint64_t a2)
{
  int v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;

  v2 = *(_DWORD *)a2 ^ (*(int *)a2 >> 31);
  if (v2 == 2)
  {
    *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
    v5 = *(_OWORD *)(a2 + 16);
    *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
    *(_OWORD *)(result + 16) = v5;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_DWORD *)(result + 40) = *(_DWORD *)(a2 + 40);
  }
  else if (v2 == 1)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_OWORD *)(result + 8) = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(result + 24) = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    v4 = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(result + 48) = *(_QWORD *)(a2 + 48);
    *(_OWORD *)(result + 32) = v4;
    *(_QWORD *)(a2 + 40) = 0;
    *(_QWORD *)(a2 + 48) = 0;
    *(_QWORD *)(a2 + 32) = 0;
  }
  else
  {
    if (v2)
      boost::detail::variant::forced_return<void>();
    *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
    v3 = *(_OWORD *)(a2 + 16);
    *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
    *(_OWORD *)(result + 16) = v3;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_OWORD *)(result + 40) = *(_OWORD *)(a2 + 40);
  }
  *(_DWORD *)result = *(_DWORD *)a2 ^ (*(int *)a2 >> 31);
  return result;
}

uint64_t std::__split_buffer<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 56;
    boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::destroy_content(i - 56);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;

  v3 = a1[1];
  v4 = 0x6DB6DB6DB6DB6DB7 * ((v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 56 * a2;
    while (v3 != v7)
    {
      v3 -= 56;
      boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::destroy_content(v3);
    }
    a1[1] = v7;
  }
}

uint64_t std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  _QWORD v16[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(result - 8);
  if (0x6DB6DB6DB6DB6DB7 * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = v7 + 56 * a2;
      do
      {
        *(_OWORD *)(v7 + 16) = 0uLL;
        *(_OWORD *)(v7 + 32) = 0uLL;
        *(_OWORD *)v7 = 0uLL;
        *(_QWORD *)(v7 + 48) = 0x3FF0000000000000;
        v7 += 56;
      }
      while (v7 != v13);
      v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0x6DB6DB6DB6DB6DB7 * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0x492492492492492)
      std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::__throw_length_error[abi:ne180100]();
    v10 = 0x6DB6DB6DB6DB6DB7 * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x249249249249249)
      v11 = 0x492492492492492;
    else
      v11 = v9;
    v16[4] = result;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>(result, v11);
    else
      v12 = 0;
    v14 = &v12[56 * v8];
    v16[0] = v12;
    v16[1] = v14;
    v16[3] = &v12[56 * v11];
    v15 = &v14[56 * a2];
    do
    {
      *((_OWORD *)v14 + 1) = 0uLL;
      *((_OWORD *)v14 + 2) = 0uLL;
      *(_OWORD *)v14 = 0uLL;
      *((_QWORD *)v14 + 6) = 0x3FF0000000000000;
      v14 += 56;
    }
    while (v14 != v15);
    v16[2] = v15;
    std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::__swap_out_circular_buffer(a1, v16);
    return std::__split_buffer<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::~__split_buffer((uint64_t)v16);
  }
  return result;
}

void sub_243A2D944(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::~singleton_wrapper(boost::serialization::extended_type_info *a1)
{
  *(_QWORD *)a1 = &unk_25142A6D0;
  boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::serialization::extended_type_info_typeid<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::~extended_type_info_typeid(a1);
}

{
  *(_QWORD *)a1 = &unk_25142A6D0;
  boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::serialization::extended_type_info_typeid<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::~extended_type_info_typeid(a1);
  JUMPOUT(0x2494FECF8);
}

boost::serialization::typeid_system::extended_type_info_typeid_0 *boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::singleton_wrapper(boost::serialization::typeid_system::extended_type_info_typeid_0 *a1)
{
  *(_QWORD *)boost::serialization::extended_type_info_typeid<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::extended_type_info_typeid(a1) = &unk_25142A6D0;
  if (boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::get_is_destroyed(void)::is_destroyed_flag)
    __assert_rtn("singleton_wrapper", "singleton.hpp", 148, "! is_destroyed()");
  return a1;
}

void sub_243A2D9DC(_Unwind_Exception *a1)
{
  boost::serialization::extended_type_info *v1;

  boost::serialization::extended_type_info_typeid<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::~extended_type_info_typeid(v1);
  _Unwind_Resume(a1);
}

boost::serialization::typeid_system::extended_type_info_typeid_0 *boost::serialization::extended_type_info_typeid<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::extended_type_info_typeid(boost::serialization::typeid_system::extended_type_info_typeid_0 *a1)
{
  boost::serialization::typeid_system::extended_type_info_typeid_0 *v2;

  v2 = (boost::serialization::typeid_system::extended_type_info_typeid_0 *)boost::serialization::typeid_system::extended_type_info_typeid_0::extended_type_info_typeid_0(a1, 0);
  *(_QWORD *)v2 = &unk_25142A778;
  boost::serialization::extended_type_info::key_register((uint64_t *)a1);
  return a1;
}

void sub_243A2DA3C(_Unwind_Exception *a1)
{
  boost::serialization::typeid_system::extended_type_info_typeid_0 *v1;

  boost::serialization::typeid_system::extended_type_info_typeid_0::~extended_type_info_typeid_0(v1);
  _Unwind_Resume(a1);
}

void boost::serialization::extended_type_info_typeid<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::~extended_type_info_typeid(boost::serialization::extended_type_info *a1)
{
  *(_QWORD *)a1 = &unk_25142A778;
  boost::serialization::extended_type_info::key_unregister(a1);
  boost::serialization::typeid_system::extended_type_info_typeid_0::type_unregister((uint64_t *)a1);
  boost::serialization::typeid_system::extended_type_info_typeid_0::~extended_type_info_typeid_0(a1);
}

{
  boost::serialization::extended_type_info_typeid<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::~extended_type_info_typeid(a1);
  JUMPOUT(0x2494FECF8);
}

void boost::serialization::extended_type_info_typeid<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::construct(uint64_t a1, uint64_t a2, uint64_t a3)
{
  switch((int)a2)
  {
    case 0:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct(a1, a2, a3);
    case 1:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct(a1, a2, a3);
    case 2:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct(a1, a2, a3);
    case 3:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct(a1, a2, a3);
    case 4:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct(a1, a2, a3);
    default:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct(a1, a2, a3);
  }
}

uint64_t boost::serialization::extended_type_info_typeid<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::destroy(uint64_t a1, uint64_t a2)
{
  return boost::serialization::access::destroy<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>(a2);
}

uint64_t boost::serialization::access::destroy<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>(uint64_t result)
{
  if (result)
  {
    boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::destroy_content(result);
    JUMPOUT(0x2494FECF8);
  }
  return result;
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::load_object_data(uint64_t a1, const void *a2, unint64_t a3)
{
  boost::archive::detail::basic_iarchive_impl **v4;
  uint64_t v5;
  uint64_t v6;
  const boost::archive::detail::basic_iserializer *instance;

  v4 = (boost::archive::detail::basic_iarchive_impl **)boost::serialization::smart_cast_impl::reference<boost::archive::text_iarchive &>::polymorphic::cross::cast<boost::archive::detail::basic_iarchive>(a2);
  instance = (const boost::archive::detail::basic_iserializer *)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::get_instance((uint64_t)v4, v5, v6);
  return boost::archive::detail::basic_iarchive::load_object(v4, a3, instance);
}

void boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::~singleton_wrapper(boost::serialization::extended_type_info *a1)
{
  *(_QWORD *)a1 = &unk_25142A7E8;
  boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::serialization::extended_type_info_typeid<boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::~extended_type_info_typeid(a1);
}

{
  *(_QWORD *)a1 = &unk_25142A7E8;
  boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::serialization::extended_type_info_typeid<boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::~extended_type_info_typeid(a1);
  JUMPOUT(0x2494FECF8);
}

boost::serialization::typeid_system::extended_type_info_typeid_0 *boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::singleton_wrapper(boost::serialization::typeid_system::extended_type_info_typeid_0 *a1)
{
  *(_QWORD *)boost::serialization::extended_type_info_typeid<boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::extended_type_info_typeid(a1) = &unk_25142A7E8;
  if (boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::get_is_destroyed(void)::is_destroyed_flag)
    __assert_rtn("singleton_wrapper", "singleton.hpp", 148, "! is_destroyed()");
  return a1;
}

void sub_243A2DC48(_Unwind_Exception *a1)
{
  boost::serialization::extended_type_info *v1;

  boost::serialization::extended_type_info_typeid<boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::~extended_type_info_typeid(v1);
  _Unwind_Resume(a1);
}

boost::serialization::typeid_system::extended_type_info_typeid_0 *boost::serialization::extended_type_info_typeid<boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::extended_type_info_typeid(boost::serialization::typeid_system::extended_type_info_typeid_0 *a1)
{
  boost::serialization::typeid_system::extended_type_info_typeid_0 *v2;

  v2 = (boost::serialization::typeid_system::extended_type_info_typeid_0 *)boost::serialization::typeid_system::extended_type_info_typeid_0::extended_type_info_typeid_0(a1, 0);
  *(_QWORD *)v2 = &unk_25142A890;
  boost::serialization::extended_type_info::key_register((uint64_t *)a1);
  return a1;
}

void sub_243A2DCA8(_Unwind_Exception *a1)
{
  boost::serialization::typeid_system::extended_type_info_typeid_0 *v1;

  boost::serialization::typeid_system::extended_type_info_typeid_0::~extended_type_info_typeid_0(v1);
  _Unwind_Resume(a1);
}

void boost::serialization::extended_type_info_typeid<boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::~extended_type_info_typeid(boost::serialization::extended_type_info *a1)
{
  *(_QWORD *)a1 = &unk_25142A890;
  boost::serialization::extended_type_info::key_unregister(a1);
  boost::serialization::typeid_system::extended_type_info_typeid_0::type_unregister((uint64_t *)a1);
  boost::serialization::typeid_system::extended_type_info_typeid_0::~extended_type_info_typeid_0(a1);
}

{
  boost::serialization::extended_type_info_typeid<boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::~extended_type_info_typeid(a1);
  JUMPOUT(0x2494FECF8);
}

void boost::serialization::extended_type_info_typeid<boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::construct(uint64_t a1, uint64_t a2, uint64_t a3)
{
  switch((int)a2)
  {
    case 0:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct(a1, a2, a3);
    case 1:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct(a1, a2, a3);
    case 2:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct(a1, a2, a3);
    case 3:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct(a1, a2, a3);
    case 4:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct(a1, a2, a3);
    default:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct(a1, a2, a3);
  }
}

uint64_t boost::serialization::extended_type_info_typeid<boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::destroy(uint64_t a1, uint64_t a2)
{
  return boost::serialization::access::destroy<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>(a2);
}

void boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::load_object_data(uint64_t a1, const void *a2, int *a3)
{
  void *v4;

  v4 = boost::serialization::smart_cast_impl::reference<boost::archive::text_iarchive &>::polymorphic::cross::cast<boost::archive::detail::basic_iarchive>(a2);
  boost::serialization::load<boost::archive::text_iarchive,boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>((uint64_t)v4, a3);
}

void boost::serialization::load<boost::archive::text_iarchive,boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>(uint64_t a1, int *a2)
{
  boost::archive::basic_text_iprimitive<std::istream>::load<int>((_QWORD *)(a1 + 40));
  boost::serialization::variant_impl<boost::mpl::l_item<mpl_::long_<3l>,boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::mpl::l_item<mpl_::long_<2l>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::mpl::l_item<mpl_::long_<1l>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>,boost::mpl::l_end>>>>::load_impl::invoke<boost::archive::text_iarchive,boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>((boost::archive::detail::basic_iarchive_impl **)a1, 0, a2);
}

void sub_243A2DE98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  boost::archive::archive_exception::~archive_exception(&a10);
  _Unwind_Resume(a1);
}

_QWORD *boost::archive::basic_text_iprimitive<std::istream>::load<int>(_QWORD *a1)
{
  _QWORD *result;
  _BYTE v2[144];
  uint64_t v3;

  v3 = *MEMORY[0x24BDAC8D0];
  result = (_QWORD *)MEMORY[0x2494FEB3C](*a1);
  if ((*((_BYTE *)result + *(_QWORD *)(*result - 24) + 32) & 5) != 0)
  {
    boost::archive::archive_exception::archive_exception((uint64_t)v2, 8, 0, 0);
    boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v2);
  }
  return result;
}

void sub_243A2DF44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  boost::archive::archive_exception::~archive_exception(&a10);
  _Unwind_Resume(a1);
}

void boost::serialization::variant_impl<boost::mpl::l_item<mpl_::long_<3l>,boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::mpl::l_item<mpl_::long_<2l>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::mpl::l_item<mpl_::long_<1l>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>,boost::mpl::l_end>>>>::load_impl::invoke<boost::archive::text_iarchive,boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>(boost::archive::detail::basic_iarchive_impl **a1, uint64_t a2, int *a3)
{
  const boost::archive::detail::basic_iserializer *instance;
  _BYTE *v6;
  int v7;
  void *__p[2];
  __int128 v9;
  uint64_t v10;
  void *v11;

  if ((_DWORD)a2)
  {
    boost::serialization::variant_impl<boost::mpl::l_item<mpl_::long_<2l>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::mpl::l_item<mpl_::long_<1l>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>,boost::mpl::l_end>>>::load_impl::invoke<boost::archive::text_iarchive,boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>(a1, (a2 - 1), a3);
  }
  else
  {
    v7 = 0;
    *(_OWORD *)__p = 0u;
    v9 = 0u;
    v10 = 0x3FF0000000000000;
    instance = (const boost::archive::detail::basic_iserializer *)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>>::get_instance((uint64_t)a1, a2, (uint64_t)a3);
    boost::archive::detail::basic_iarchive::load_object(a1, (unint64_t)&v7, instance);
    boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::assign<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>((uint64_t)a3, &v7);
    v6 = boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::apply_visitor<boost::detail::variant::get_visitor<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>>(a3);
    if (!v6)
    {
      v11 = &unk_25142AA10;
      boost::throw_exception<boost::bad_get>();
    }
    boost::archive::detail::basic_iarchive::reset_object_address((uint64_t)a1, v6, &v7);
    if (SBYTE7(v9) < 0)
      operator delete(__p[0]);
  }
}

void sub_243A2E020(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::assign<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>(uint64_t a1, _DWORD *a2)
{
  _DWORD *v4;
  int v5;
  _QWORD v6[7];

  v6[6] = *MEMORY[0x24BDAC8D0];
  v4 = a2;
  if ((boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::apply_visitor<boost::detail::variant::direct_assigner<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>>(a1, &v4) & 1) == 0)
  {
    v5 = boost::detail::variant::make_initializer_node::apply<boost::mpl::pair<boost::detail::variant::initializer_root,mpl_::int_<0>>,boost::mpl::l_iter<boost::mpl::list3<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::initializer_node::initialize((uint64_t)v6, (uint64_t)a2);
    boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::variant_assign(a1, (uint64_t)&v5);
    boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::destroy_content((uint64_t)&v5);
  }
}

void sub_243A2E0E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::destroy_content((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::apply_visitor<boost::detail::variant::direct_assigner<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>>(uint64_t a1, _DWORD **a2)
{
  int v2;
  _DWORD *v5;

  v2 = *(_DWORD *)a1 ^ (*(int *)a1 >> 31);
  if ((v2 - 1) < 2)
    return 0;
  if (v2)
    boost::detail::variant::forced_return<void>();
  v5 = *a2;
  *(_DWORD *)(a1 + 8) = **a2;
  std::string::operator=((std::string *)(a1 + 16), (const std::string *)(v5 + 2));
  *(_OWORD *)(a1 + 40) = *((_OWORD *)v5 + 2);
  return 1;
}

void boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::variant_assign(uint64_t a1, uint64_t a2)
{
  int v4;
  _DWORD *v5;
  void **v6;
  __int128 v7;
  __int128 v8;
  void **v9;
  __int128 v10;
  _QWORD *v11;
  __int128 v12;
  int v13;
  __int128 v14;
  __n128 *v15;

  v4 = *(_DWORD *)a1;
  if (*(_DWORD *)a1 == *(_DWORD *)a2)
  {
    v5 = (_DWORD *)(a2 + 8);
    v15 = (__n128 *)(a2 + 8);
    switch(v4 ^ (v4 >> 31))
    {
      case 0:
        *(_DWORD *)(a1 + 8) = *v5;
        v6 = (void **)(a1 + 16);
        if (*(char *)(a1 + 39) < 0)
          operator delete(*v6);
        v7 = *(_OWORD *)(a2 + 16);
        *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
        *(_OWORD *)v6 = v7;
        *(_BYTE *)(a2 + 39) = 0;
        *(_BYTE *)(a2 + 16) = 0;
        *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
        return;
      case 1:
        boost::detail::variant::move_storage::internal_visit<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>(&v15, a1 + 8);
        return;
      case 2:
        *(_DWORD *)(a1 + 8) = *v5;
        v9 = (void **)(a1 + 16);
        if (*(char *)(a1 + 39) < 0)
          operator delete(*v9);
        v10 = *(_OWORD *)(a2 + 16);
        *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
        *(_OWORD *)v9 = v10;
        *(_BYTE *)(a2 + 39) = 0;
        *(_BYTE *)(a2 + 16) = 0;
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
        return;
      default:
        goto LABEL_16;
    }
  }
  switch(*(_DWORD *)a2 ^ (*(int *)a2 >> 31))
  {
    case 0:
      boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::destroy_content(a1);
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
      v8 = *(_OWORD *)(a2 + 16);
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 16) = v8;
      *(_QWORD *)(a2 + 24) = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      *(_DWORD *)a1 = 0;
      return;
    case 1:
      v11 = (_QWORD *)(a2 + 8);
      boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::destroy_content(a1);
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      *(_QWORD *)(a1 + 24) = 0;
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      *v11 = 0;
      *(_QWORD *)(a2 + 16) = 0;
      *(_QWORD *)(a2 + 24) = 0;
      v12 = *(_OWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 32) = v12;
      *(_QWORD *)(a2 + 40) = 0;
      *(_QWORD *)(a2 + 48) = 0;
      *(_QWORD *)(a2 + 32) = 0;
      v13 = 1;
      goto LABEL_14;
    case 2:
      boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::destroy_content(a1);
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
      v14 = *(_OWORD *)(a2 + 16);
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 16) = v14;
      *(_QWORD *)(a2 + 24) = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
      v13 = 2;
LABEL_14:
      *(_DWORD *)a1 = v13;
      return;
    default:
LABEL_16:
      boost::detail::variant::forced_return<void>();
  }
}

{
  int v4;
  int v5;
  int *v6;
  const std::string *v7;
  int v8;

  v4 = *(_DWORD *)a1;
  v5 = *(_DWORD *)a2;
  if (*(_DWORD *)a1 == *(_DWORD *)a2)
  {
    v7 = (const std::string *)(a2 + 8);
    switch(v4 ^ (v4 >> 31))
    {
      case 0:
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
        std::string::operator=((std::string *)(a1 + 16), (const std::string *)(a2 + 16));
        *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
        return;
      case 1:
        boost::detail::variant::assign_storage::internal_visit<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>(&v7, (std::string *)(a1 + 8));
        return;
      case 2:
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
        std::string::operator=((std::string *)(a1 + 16), (const std::string *)(a2 + 16));
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
        return;
      default:
        goto LABEL_11;
    }
  }
  v7 = (const std::string *)a1;
  v8 = v5 ^ (v5 >> 31);
  v6 = (int *)(a2 + 8);
  switch(v8)
  {
    case 0:
      boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::assigner::assign_impl<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::has_fallback_type_>((uint64_t)&v7, v6);
      break;
    case 1:
      boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::assigner::assign_impl<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::has_fallback_type_>((uint64_t)&v7, (uint64_t)v6);
      break;
    case 2:
      boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::assigner::assign_impl<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>,boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::has_fallback_type_>((uint64_t)&v7, v6);
      break;
    default:
LABEL_11:
      boost::detail::variant::forced_return<void>();
  }
}

uint64_t boost::detail::variant::make_initializer_node::apply<boost::mpl::pair<boost::detail::variant::initializer_root,mpl_::int_<0>>,boost::mpl::l_iter<boost::mpl::list3<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::initializer_node::initialize(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  __int128 v5;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = (std::string *)(a1 + 8);
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 8);
    v4->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 24);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  return 0;
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  std::string *v5;
  std::string::size_type v6;
  std::string::size_type v7;
  std::string *v8;

  v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17)
      v6 = __sz | 7;
    v7 = v6 + 1;
    v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    v5 = v8;
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, __sz + 1);
}

__n128 boost::detail::variant::move_storage::internal_visit<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>(__n128 **a1, uint64_t a2)
{
  __n128 *v3;
  void **v4;
  __n128 result;

  v3 = *a1;
  std::vector<double>::__move_assign(a2, *a1);
  v4 = (void **)(a2 + 24);
  if (*(char *)(a2 + 47) < 0)
    operator delete(*v4);
  result = *(__n128 *)((char *)v3 + 24);
  *(_QWORD *)(a2 + 40) = v3[2].n128_u64[1];
  *(__n128 *)v4 = result;
  v3[2].n128_u8[15] = 0;
  v3[1].n128_u8[8] = 0;
  return result;
}

__n128 std::vector<double>::__move_assign(uint64_t a1, __n128 *a2)
{
  void *v4;
  __n128 result;

  v4 = *(void **)a1;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = v4;
    operator delete(v4);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  result = *a2;
  *(__n128 *)a1 = *a2;
  *(_QWORD *)(a1 + 16) = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

void boost::throw_exception<boost::bad_get>()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(0x38uLL);
  exception[4] = 0;
  exception[5] = 0;
  *((_DWORD *)exception + 12) = -1;
  *exception = &unk_25142A968;
  exception[1] = &unk_25142A998;
  exception[2] = &unk_25142A9C0;
  exception[3] = 0;
}

_DWORD *boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::apply_visitor<boost::detail::variant::get_visitor<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>>(int *a1)
{
  _DWORD *result;
  int v2;

  v2 = *a1;
  result = a1 + 2;
  switch(v2 ^ (v2 >> 31))
  {
    case 0:
      return result;
    case 1:
    case 2:
      result = 0;
      break;
    default:
      boost::detail::variant::forced_return<void>();
  }
  return result;
}

uint64_t boost::wrapexcept<boost::bad_get>::~wrapexcept(uint64_t a1)
{
  *(_QWORD *)(a1 + 16) = &unk_25142AA38;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 24));
  std::exception::~exception((std::exception *)(a1 + 8));
  return a1;
}

uint64_t boost::wrapexcept<boost::bad_get>::clone(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = operator new();
  *(_QWORD *)v2 = &unk_25142A9E0;
  *(_QWORD *)(v2 + 8) = &unk_25142AA10;
  *(_QWORD *)(v2 + 16) = &unk_25142AA38;
  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(v2 + 24) = v3;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  *(_OWORD *)(v2 + 32) = *(_OWORD *)(a1 + 32);
  *(_DWORD *)(v2 + 48) = *(_DWORD *)(a1 + 48);
  *(_QWORD *)v2 = &unk_25142A968;
  *(_QWORD *)(v2 + 8) = &unk_25142A998;
  *(_QWORD *)(v2 + 16) = &unk_25142A9C0;
  boost::exception_detail::copy_boost_exception(v2 + 16, a1 + 16);
  return v2;
}

void sub_243A2E698(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::exception *v2;

  std::exception::~exception(v2);
  MEMORY[0x2494FECF8](v1, 0x10F1C40C404A9A7);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<boost::bad_get>::rethrow(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x38uLL);
  boost::wrapexcept<boost::bad_get>::wrapexcept((uint64_t)exception, a1);
}

void sub_243A2E718(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<boost::bad_get>::~wrapexcept(uint64_t a1)
{
  *(_QWORD *)(a1 + 16) = &unk_25142AA38;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 24));
  std::exception::~exception((std::exception *)(a1 + 8));
  JUMPOUT(0x2494FECF8);
}

void `non-virtual thunk to'boost::wrapexcept<boost::bad_get>::~wrapexcept(uint64_t a1)
{
  *(_QWORD *)(a1 + 8) = &unk_25142AA38;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 16));
  std::exception::~exception((std::exception *)a1);
}

{
  *(_QWORD *)(a1 + 8) = &unk_25142AA38;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 16));
  std::exception::~exception((std::exception *)a1);
  JUMPOUT(0x2494FECF8);
}

const char *boost::bad_get::what(boost::bad_get *this)
{
  return "boost::bad_get: failed value get using boost::get";
}

void `non-virtual thunk to'boost::wrapexcept<boost::bad_get>::~wrapexcept(_QWORD *a1)
{
  *a1 = &unk_25142AA38;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  std::exception::~exception((std::exception *)a1 - 1);
}

{
  *a1 = &unk_25142AA38;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  std::exception::~exception((std::exception *)a1 - 1);
  JUMPOUT(0x2494FECF8);
}

void boost::bad_get::~bad_get(std::exception *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x2494FECF8);
}

uint64_t *boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  if (v2 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2))
    *a1 = 0;
  return a1;
}

uint64_t boost::wrapexcept<boost::bad_get>::wrapexcept(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)a1 = &unk_25142A9E0;
  *(_QWORD *)(a1 + 8) = &unk_25142AA10;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = &unk_25142AA38;
  *(_QWORD *)(a1 + 24) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v5;
  *(_QWORD *)a1 = &unk_25142A968;
  *(_QWORD *)(a1 + 8) = &unk_25142A998;
  *(_QWORD *)(a1 + 16) = &unk_25142A9C0;
  return a1;
}

void sub_243A2E9A4(_Unwind_Exception *a1)
{
  std::exception *v1;

  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::exception_detail::copy_boost_exception(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v4 + 40))(&v7);
    v5 = v7;
    if (v7)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
      if (v7)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
    }
  }
  else
  {
    v5 = 0;
  }
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  result = *(_QWORD *)(a1 + 8);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
  *(_QWORD *)(a1 + 8) = v5;
  if (v5)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
  }
  return result;
}

void sub_243A2EA84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 32))(a10);
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
  _Unwind_Resume(exception_object);
}

void boost::serialization::variant_impl<boost::mpl::l_item<mpl_::long_<2l>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::mpl::l_item<mpl_::long_<1l>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>,boost::mpl::l_end>>>::load_impl::invoke<boost::archive::text_iarchive,boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>(boost::archive::detail::basic_iarchive_impl **a1, uint64_t a2, int *a3)
{
  const boost::archive::detail::basic_iserializer *instance;
  _BYTE *v6;
  void *v7[2];
  void *__p[2];
  __int128 v9;
  void *v10;

  if ((_DWORD)a2)
  {
    boost::serialization::variant_impl<boost::mpl::l_item<mpl_::long_<1l>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>,boost::mpl::l_end>>::load_impl::invoke<boost::archive::text_iarchive,boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>(a1, (a2 - 1), a3);
  }
  else
  {
    *(_OWORD *)__p = 0u;
    v9 = 0u;
    *(_OWORD *)v7 = 0u;
    instance = (const boost::archive::detail::basic_iserializer *)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>>::get_instance((uint64_t)a1, a2, (uint64_t)a3);
    boost::archive::detail::basic_iarchive::load_object(a1, (unint64_t)v7, instance);
    boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::assign<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>((uint64_t)a3, (const std::string *)v7);
    v6 = boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::apply_visitor<boost::detail::variant::get_visitor<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>>(a3);
    if (!v6)
    {
      v10 = &unk_25142AA10;
      boost::throw_exception<boost::bad_get>();
    }
    boost::archive::detail::basic_iarchive::reset_object_address((uint64_t)a1, v6, v7);
    if (SHIBYTE(v9) < 0)
      operator delete(__p[1]);
    if (v7[0])
    {
      v7[1] = v7[0];
      operator delete(v7[0]);
    }
  }
}

void sub_243A2EBA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>::~variable((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::assign<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>(uint64_t a1, const std::string *a2)
{
  const std::string *v4;
  int v5;
  std::string v6[2];
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v4 = a2;
  if ((boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::apply_visitor<boost::detail::variant::direct_assigner<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>>(a1, &v4) & 1) == 0)
  {
    v5 = boost::detail::variant::make_initializer_node::apply<boost::mpl::pair<boost::detail::variant::make_initializer_node::apply<boost::mpl::pair<boost::detail::variant::initializer_root,mpl_::int_<0>>,boost::mpl::l_iter<boost::mpl::list3<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::initializer_node,mpl_::int_<1>>,boost::mpl::l_iter<boost::mpl::list2<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::initializer_node::initialize(v6, (uint64_t)a2);
    boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::variant_assign(a1, (uint64_t)&v5);
    boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::destroy_content((uint64_t)&v5);
  }
}

void sub_243A2EC64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::destroy_content((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::apply_visitor<boost::detail::variant::direct_assigner<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>>(uint64_t a1, const std::string **a2)
{
  uint64_t result;

  switch(*(_DWORD *)a1 ^ (*(int *)a1 >> 31))
  {
    case 0:
    case 2:
      result = 0;
      break;
    case 1:
      result = boost::detail::variant::direct_assigner<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>::operator()(a2, (std::string *)(a1 + 8));
      break;
    default:
      boost::detail::variant::forced_return<void>();
  }
  return result;
}

uint64_t boost::detail::variant::direct_assigner<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>::operator()(const std::string **a1, std::string *a2)
{
  const std::string *v3;

  v3 = *a1;
  if (*a1 != a2)
    std::vector<double>::__assign_with_size[abi:ne180100]<double *,double *>((char *)a2, v3->__r_.__value_.__l.__data_, v3->__r_.__value_.__l.__size_, (uint64_t)(v3->__r_.__value_.__l.__size_ - v3->__r_.__value_.__r.__words[0]) >> 3);
  std::string::operator=(a2 + 1, v3 + 1);
  return 1;
}

char *std::vector<double>::__assign_with_size[abi:ne180100]<double *,double *>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 3)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 61)
      std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 2;
    if (v8 >> 2 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<double>::__vallocate[abi:ne180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 3;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

char *std::vector<double>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 61)
    std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(8 * a2);
}

uint64_t boost::detail::variant::make_initializer_node::apply<boost::mpl::pair<boost::detail::variant::make_initializer_node::apply<boost::mpl::pair<boost::detail::variant::initializer_root,mpl_::int_<0>>,boost::mpl::l_iter<boost::mpl::list3<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::initializer_node,mpl_::int_<1>>,boost::mpl::l_iter<boost::mpl::list2<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::initializer_node::initialize(std::string *a1, uint64_t a2)
{
  std::string *v4;
  __int128 v5;

  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>(a1, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  v4 = a1 + 1;
  if (*(char *)(a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 24), *(_QWORD *)(a2 + 32));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 24);
    a1[1].__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 40);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  return 1;
}

void sub_243A2EF08(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<double>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_243A2EF80(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_DWORD *boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::apply_visitor<boost::detail::variant::get_visitor<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>>(int *a1)
{
  _DWORD *v1;

  v1 = 0;
  switch(*a1 ^ (*a1 >> 31))
  {
    case 0:
    case 2:
      return v1;
    case 1:
      v1 = a1 + 2;
      break;
    default:
      boost::detail::variant::forced_return<void>();
  }
  return v1;
}

void boost::serialization::variant_impl<boost::mpl::l_item<mpl_::long_<1l>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>,boost::mpl::l_end>>::load_impl::invoke<boost::archive::text_iarchive,boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>(boost::archive::detail::basic_iarchive_impl **a1, uint64_t a2, int *a3)
{
  const boost::archive::detail::basic_iserializer *instance;
  int *v6;
  int v7;
  void *__p;
  uint64_t v9;
  uint64_t v10;
  int v11;
  void *v12;

  if (!(_DWORD)a2)
  {
    v7 = 0;
    v9 = 0;
    v10 = 0;
    __p = 0;
    v11 = 0;
    instance = (const boost::archive::detail::basic_iserializer *)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::get_instance((uint64_t)a1, a2, (uint64_t)a3);
    boost::archive::detail::basic_iarchive::load_object(a1, (unint64_t)&v7, instance);
    boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::assign<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>((uint64_t)a3, &v7);
    v6 = boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::apply_visitor<boost::detail::variant::get_visitor<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>(a3);
    if (!v6)
    {
      v12 = &unk_25142AA10;
      boost::throw_exception<boost::bad_get>();
    }
    boost::archive::detail::basic_iarchive::reset_object_address((uint64_t)a1, v6, &v7);
    if (SHIBYTE(v10) < 0)
      operator delete(__p);
  }
}

void sub_243A2F08C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::assign<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>(uint64_t a1, _DWORD *a2)
{
  _DWORD *v4;
  int v5;
  _DWORD v6[12];
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v4 = a2;
  if ((boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::apply_visitor<boost::detail::variant::direct_assigner<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>(a1, &v4) & 1) == 0)
  {
    v5 = boost::detail::variant::make_initializer_node::apply<boost::mpl::pair<boost::detail::variant::make_initializer_node::apply<boost::mpl::pair<boost::detail::variant::make_initializer_node::apply<boost::mpl::pair<boost::detail::variant::initializer_root,mpl_::int_<0>>,boost::mpl::l_iter<boost::mpl::list3<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::initializer_node,mpl_::int_<1>>,boost::mpl::l_iter<boost::mpl::list2<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::initializer_node,mpl_::int_<2>>,boost::mpl::l_iter<boost::mpl::list1<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::initializer_node::initialize(v6, (uint64_t)a2);
    boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::variant_assign(a1, (uint64_t)&v5);
    boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::destroy_content((uint64_t)&v5);
  }
}

void sub_243A2F150(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::destroy_content((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::apply_visitor<boost::detail::variant::direct_assigner<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>(uint64_t a1, _DWORD **a2)
{
  unsigned int v2;
  BOOL v3;
  unsigned int v4;
  _DWORD *v7;

  v2 = *(_DWORD *)a1 ^ (*(int *)a1 >> 31);
  v3 = v2 >= 2;
  v4 = v2 - 2;
  if (!v3)
    return 0;
  if (v4)
    boost::detail::variant::forced_return<void>();
  v7 = *a2;
  *(_DWORD *)(a1 + 8) = **a2;
  std::string::operator=((std::string *)(a1 + 16), (const std::string *)(v7 + 2));
  *(_DWORD *)(a1 + 40) = v7[8];
  return 1;
}

uint64_t boost::detail::variant::make_initializer_node::apply<boost::mpl::pair<boost::detail::variant::make_initializer_node::apply<boost::mpl::pair<boost::detail::variant::make_initializer_node::apply<boost::mpl::pair<boost::detail::variant::initializer_root,mpl_::int_<0>>,boost::mpl::l_iter<boost::mpl::list3<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::initializer_node,mpl_::int_<1>>,boost::mpl::l_iter<boost::mpl::list2<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::initializer_node,mpl_::int_<2>>,boost::mpl::l_iter<boost::mpl::list1<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::initializer_node::initialize(_DWORD *a1, uint64_t a2)
{
  std::string *v4;
  __int128 v5;

  *a1 = *(_DWORD *)a2;
  v4 = (std::string *)(a1 + 2);
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 8);
    v4->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 24);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  a1[8] = *(_DWORD *)(a2 + 32);
  return 2;
}

int *boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::apply_visitor<boost::detail::variant::get_visitor<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>(int *a1)
{
  unsigned int v1;
  BOOL v2;
  unsigned int v3;

  v1 = *a1 ^ (*a1 >> 31);
  v2 = v1 >= 2;
  v3 = v1 - 2;
  if (!v2)
    return 0;
  if (v3)
    boost::detail::variant::forced_return<void>();
  return a1 + 2;
}

void boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>>::~singleton_wrapper(boost::serialization::extended_type_info *a1)
{
  *(_QWORD *)a1 = &unk_25142AA58;
  boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::serialization::extended_type_info_typeid<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>::~extended_type_info_typeid(a1);
}

{
  *(_QWORD *)a1 = &unk_25142AA58;
  boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::serialization::extended_type_info_typeid<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>::~extended_type_info_typeid(a1);
  JUMPOUT(0x2494FECF8);
}

boost::serialization::typeid_system::extended_type_info_typeid_0 *boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>>::singleton_wrapper(boost::serialization::typeid_system::extended_type_info_typeid_0 *a1)
{
  *(_QWORD *)boost::serialization::extended_type_info_typeid<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>::extended_type_info_typeid(a1) = &unk_25142AA58;
  if (boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>>::get_is_destroyed(void)::is_destroyed_flag)
    __assert_rtn("singleton_wrapper", "singleton.hpp", 148, "! is_destroyed()");
  return a1;
}

void sub_243A2F318(_Unwind_Exception *a1)
{
  boost::serialization::extended_type_info *v1;

  boost::serialization::extended_type_info_typeid<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>::~extended_type_info_typeid(v1);
  _Unwind_Resume(a1);
}

boost::serialization::typeid_system::extended_type_info_typeid_0 *boost::serialization::extended_type_info_typeid<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>::extended_type_info_typeid(boost::serialization::typeid_system::extended_type_info_typeid_0 *a1)
{
  boost::serialization::typeid_system::extended_type_info_typeid_0 *v2;

  v2 = (boost::serialization::typeid_system::extended_type_info_typeid_0 *)boost::serialization::typeid_system::extended_type_info_typeid_0::extended_type_info_typeid_0(a1, 0);
  *(_QWORD *)v2 = &unk_25142AB00;
  boost::serialization::extended_type_info::key_register((uint64_t *)a1);
  return a1;
}

void sub_243A2F378(_Unwind_Exception *a1)
{
  boost::serialization::typeid_system::extended_type_info_typeid_0 *v1;

  boost::serialization::typeid_system::extended_type_info_typeid_0::~extended_type_info_typeid_0(v1);
  _Unwind_Resume(a1);
}

void boost::serialization::extended_type_info_typeid<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>::~extended_type_info_typeid(boost::serialization::extended_type_info *a1)
{
  *(_QWORD *)a1 = &unk_25142AB00;
  boost::serialization::extended_type_info::key_unregister(a1);
  boost::serialization::typeid_system::extended_type_info_typeid_0::type_unregister((uint64_t *)a1);
  boost::serialization::typeid_system::extended_type_info_typeid_0::~extended_type_info_typeid_0(a1);
}

{
  boost::serialization::extended_type_info_typeid<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>::~extended_type_info_typeid(a1);
  JUMPOUT(0x2494FECF8);
}

void boost::serialization::extended_type_info_typeid<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>::construct(uint64_t a1, uint64_t a2, uint64_t a3)
{
  switch((int)a2)
  {
    case 0:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct(a1, a2, a3);
    case 1:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct(a1, a2, a3);
    case 2:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct(a1, a2, a3);
    case 3:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct(a1, a2, a3);
    case 4:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct(a1, a2, a3);
    default:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct(a1, a2, a3);
  }
}

uint64_t boost::serialization::extended_type_info_typeid<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>::destroy(uint64_t a1, uint64_t a2)
{
  return boost::serialization::access::destroy<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>(a2);
}

uint64_t boost::serialization::access::destroy<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>(uint64_t result)
{
  if (result)
  {
    if (*(char *)(result + 31) < 0)
      operator delete(*(void **)(result + 8));
    JUMPOUT(0x2494FECF8);
  }
  return result;
}

_QWORD *boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>::load_object_data(uint64_t a1, const void *a2, unint64_t a3, uint64_t a4)
{
  void *v6;

  v6 = boost::serialization::smart_cast_impl::reference<boost::archive::text_iarchive &>::polymorphic::cross::cast<boost::archive::detail::basic_iarchive>(a2);
  return boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>::serialize<boost::archive::text_iarchive>(a3, (uint64_t)v6, a4);
}

_QWORD *boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>::serialize<boost::archive::text_iarchive>(unint64_t a1, uint64_t a2, uint64_t a3)
{
  const boost::archive::detail::basic_iserializer *instance;

  instance = (const boost::archive::detail::basic_iserializer *)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::transform::id>>::get_instance(a1, a2, a3);
  boost::archive::detail::basic_iarchive::load_object((boost::archive::detail::basic_iarchive_impl **)a2, a1, instance);
  boost::archive::basic_text_iprimitive<std::istream>::load<int>((_QWORD *)(a2 + 40));
  boost::archive::text_iarchive_impl<boost::archive::text_iarchive>::load(a2, (std::string *)(a1 + 8));
  boost::archive::basic_text_iprimitive<std::istream>::load<double>((_QWORD *)(a2 + 40));
  return boost::archive::basic_text_iprimitive<std::istream>::load<double>((_QWORD *)(a2 + 40));
}

_QWORD *boost::archive::basic_text_iprimitive<std::istream>::load<double>(_QWORD *a1)
{
  _QWORD *result;
  _BYTE v2[144];
  uint64_t v3;

  v3 = *MEMORY[0x24BDAC8D0];
  result = (_QWORD *)MEMORY[0x2494FEB30](*a1);
  if ((*((_BYTE *)result + *(_QWORD *)(*result - 24) + 32) & 5) != 0)
  {
    boost::archive::archive_exception::archive_exception((uint64_t)v2, 8, 0, 0);
    boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v2);
  }
  return result;
}

void sub_243A2F604(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  boost::archive::archive_exception::~archive_exception(&a10);
  _Unwind_Resume(a1);
}

void boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::histogram::axis::transform::id>>::~singleton_wrapper(boost::serialization::extended_type_info *a1)
{
  *(_QWORD *)a1 = &unk_25142ABA0;
  boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::histogram::axis::transform::id>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::serialization::extended_type_info_typeid<boost::histogram::axis::transform::id>::~extended_type_info_typeid(a1);
}

{
  *(_QWORD *)a1 = &unk_25142ABA0;
  boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::histogram::axis::transform::id>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::serialization::extended_type_info_typeid<boost::histogram::axis::transform::id>::~extended_type_info_typeid(a1);
  JUMPOUT(0x2494FECF8);
}

boost::serialization::typeid_system::extended_type_info_typeid_0 *boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::histogram::axis::transform::id>>::singleton_wrapper(boost::serialization::typeid_system::extended_type_info_typeid_0 *a1)
{
  *(_QWORD *)boost::serialization::extended_type_info_typeid<boost::histogram::axis::transform::id>::extended_type_info_typeid(a1) = &unk_25142ABA0;
  if (boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::histogram::axis::transform::id>>::get_is_destroyed(void)::is_destroyed_flag)
    __assert_rtn("singleton_wrapper", "singleton.hpp", 148, "! is_destroyed()");
  return a1;
}

void sub_243A2F69C(_Unwind_Exception *a1)
{
  boost::serialization::extended_type_info *v1;

  boost::serialization::extended_type_info_typeid<boost::histogram::axis::transform::id>::~extended_type_info_typeid(v1);
  _Unwind_Resume(a1);
}

boost::serialization::typeid_system::extended_type_info_typeid_0 *boost::serialization::extended_type_info_typeid<boost::histogram::axis::transform::id>::extended_type_info_typeid(boost::serialization::typeid_system::extended_type_info_typeid_0 *a1)
{
  boost::serialization::typeid_system::extended_type_info_typeid_0 *v2;

  v2 = (boost::serialization::typeid_system::extended_type_info_typeid_0 *)boost::serialization::typeid_system::extended_type_info_typeid_0::extended_type_info_typeid_0(a1, 0);
  *(_QWORD *)v2 = &unk_25142AC48;
  boost::serialization::extended_type_info::key_register((uint64_t *)a1);
  return a1;
}

void sub_243A2F6FC(_Unwind_Exception *a1)
{
  boost::serialization::typeid_system::extended_type_info_typeid_0 *v1;

  boost::serialization::typeid_system::extended_type_info_typeid_0::~extended_type_info_typeid_0(v1);
  _Unwind_Resume(a1);
}

void boost::serialization::extended_type_info_typeid<boost::histogram::axis::transform::id>::~extended_type_info_typeid(boost::serialization::extended_type_info *a1)
{
  *(_QWORD *)a1 = &unk_25142AC48;
  boost::serialization::extended_type_info::key_unregister(a1);
  boost::serialization::typeid_system::extended_type_info_typeid_0::type_unregister((uint64_t *)a1);
  boost::serialization::typeid_system::extended_type_info_typeid_0::~extended_type_info_typeid_0(a1);
}

{
  boost::serialization::extended_type_info_typeid<boost::histogram::axis::transform::id>::~extended_type_info_typeid(a1);
  JUMPOUT(0x2494FECF8);
}

void boost::serialization::extended_type_info_typeid<boost::histogram::axis::transform::id>::construct(uint64_t a1, uint64_t a2, uint64_t a3)
{
  switch((int)a2)
  {
    case 0:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct(a1, a2, a3);
    case 1:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct(a1, a2, a3);
    case 2:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct(a1, a2, a3);
    case 3:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct(a1, a2, a3);
    case 4:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct(a1, a2, a3);
    default:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct(a1, a2, a3);
  }
}

void boost::serialization::extended_type_info_typeid<boost::histogram::axis::transform::id>::destroy(uint64_t a1, uint64_t a2)
{
  if (a2)
    JUMPOUT(0x2494FECF8);
}

void *boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::transform::id>::load_object_data(uint64_t a1, const void *a2)
{
  return boost::serialization::smart_cast_impl::reference<boost::archive::text_iarchive &>::polymorphic::cross::cast<boost::archive::detail::basic_iarchive>(a2);
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::transform::id>>::~singleton_wrapper(boost::archive::detail::basic_iserializer *a1)
{
  *(_QWORD *)a1 = &unk_25142AC90;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::transform::id>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
}

{
  *(_QWORD *)a1 = &unk_25142AC90;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::transform::id>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
  JUMPOUT(0x2494FECF8);
}

_QWORD *boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::transform::id>>::singleton_wrapper(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  void *instance;

  instance = boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::histogram::axis::transform::id>>::get_instance((uint64_t)a1, a2, a3);
  boost::archive::detail::basic_iserializer::basic_iserializer(a1, (uint64_t)instance);
  *a1 = &unk_25142AC90;
  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::transform::id>>::get_is_destroyed(void)::is_destroyed_flag)
    __assert_rtn("singleton_wrapper", "singleton.hpp", 148, "! is_destroyed()");
  return a1;
}

void sub_243A2F8BC(_Unwind_Exception *a1)
{
  boost::archive::detail::basic_iserializer *v1;

  boost::archive::detail::basic_iserializer::~basic_iserializer(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::transform::id>::class_info()
{
  return 1;
}

BOOL boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::transform::id>::tracking(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) != 0;
}

void boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::transform::id>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::transform::id>::is_polymorphic()
{
  return 0;
}

void boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::transform::id>::destroy(uint64_t a1, uint64_t a2)
{
  if (a2)
    JUMPOUT(0x2494FECF8);
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>>::~singleton_wrapper(boost::archive::detail::basic_iserializer *a1)
{
  *(_QWORD *)a1 = &unk_25142AD10;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
}

{
  *(_QWORD *)a1 = &unk_25142AD10;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
  JUMPOUT(0x2494FECF8);
}

_QWORD *boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>>::singleton_wrapper(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  void *instance;

  instance = boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>>::get_instance((uint64_t)a1, a2, a3);
  boost::archive::detail::basic_iserializer::basic_iserializer(a1, (uint64_t)instance);
  *a1 = &unk_25142AD10;
  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>>::get_is_destroyed(void)::is_destroyed_flag)
    __assert_rtn("singleton_wrapper", "singleton.hpp", 148, "! is_destroyed()");
  return a1;
}

void sub_243A2F9E4(_Unwind_Exception *a1)
{
  boost::archive::detail::basic_iserializer *v1;

  boost::archive::detail::basic_iserializer::~basic_iserializer(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>::class_info()
{
  return 1;
}

BOOL boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>::tracking(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) != 0;
}

void boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>::is_polymorphic()
{
  return 0;
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>::destroy(uint64_t a1, uint64_t a2)
{
  return boost::serialization::access::destroy<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>(a2);
}

void boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>>::~singleton_wrapper(boost::serialization::extended_type_info *a1)
{
  *(_QWORD *)a1 = &unk_25142AD90;
  boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::serialization::extended_type_info_typeid<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>::~extended_type_info_typeid(a1);
}

{
  *(_QWORD *)a1 = &unk_25142AD90;
  boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::serialization::extended_type_info_typeid<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>::~extended_type_info_typeid(a1);
  JUMPOUT(0x2494FECF8);
}

boost::serialization::typeid_system::extended_type_info_typeid_0 *boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>>::singleton_wrapper(boost::serialization::typeid_system::extended_type_info_typeid_0 *a1)
{
  *(_QWORD *)boost::serialization::extended_type_info_typeid<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>::extended_type_info_typeid(a1) = &unk_25142AD90;
  if (boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>>::get_is_destroyed(void)::is_destroyed_flag)
    __assert_rtn("singleton_wrapper", "singleton.hpp", 148, "! is_destroyed()");
  return a1;
}

void sub_243A2FAEC(_Unwind_Exception *a1)
{
  boost::serialization::extended_type_info *v1;

  boost::serialization::extended_type_info_typeid<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>::~extended_type_info_typeid(v1);
  _Unwind_Resume(a1);
}

boost::serialization::typeid_system::extended_type_info_typeid_0 *boost::serialization::extended_type_info_typeid<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>::extended_type_info_typeid(boost::serialization::typeid_system::extended_type_info_typeid_0 *a1)
{
  boost::serialization::typeid_system::extended_type_info_typeid_0 *v2;

  v2 = (boost::serialization::typeid_system::extended_type_info_typeid_0 *)boost::serialization::typeid_system::extended_type_info_typeid_0::extended_type_info_typeid_0(a1, 0);
  *(_QWORD *)v2 = &unk_25142AE38;
  boost::serialization::extended_type_info::key_register((uint64_t *)a1);
  return a1;
}

void sub_243A2FB4C(_Unwind_Exception *a1)
{
  boost::serialization::typeid_system::extended_type_info_typeid_0 *v1;

  boost::serialization::typeid_system::extended_type_info_typeid_0::~extended_type_info_typeid_0(v1);
  _Unwind_Resume(a1);
}

void boost::serialization::extended_type_info_typeid<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>::~extended_type_info_typeid(boost::serialization::extended_type_info *a1)
{
  *(_QWORD *)a1 = &unk_25142AE38;
  boost::serialization::extended_type_info::key_unregister(a1);
  boost::serialization::typeid_system::extended_type_info_typeid_0::type_unregister((uint64_t *)a1);
  boost::serialization::typeid_system::extended_type_info_typeid_0::~extended_type_info_typeid_0(a1);
}

{
  boost::serialization::extended_type_info_typeid<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>::~extended_type_info_typeid(a1);
  JUMPOUT(0x2494FECF8);
}

void boost::serialization::extended_type_info_typeid<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>::construct(uint64_t a1, uint64_t a2, uint64_t a3)
{
  switch((int)a2)
  {
    case 0:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct(a1, a2, a3);
    case 1:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct(a1, a2, a3);
    case 2:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct(a1, a2, a3);
    case 3:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct(a1, a2, a3);
    case 4:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct(a1, a2, a3);
    default:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct(a1, a2, a3);
  }
}

uint64_t boost::serialization::extended_type_info_typeid<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>::destroy(uint64_t a1, uint64_t a2)
{
  return boost::serialization::access::destroy<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>(a2);
}

uint64_t boost::serialization::access::destroy<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>(uint64_t result)
{
  uint64_t v1;
  void *v2;

  if (result)
  {
    v1 = result;
    if (*(char *)(result + 47) < 0)
      operator delete(*(void **)(result + 24));
    v2 = *(void **)v1;
    if (*(_QWORD *)v1)
    {
      *(_QWORD *)(v1 + 8) = v2;
      operator delete(v2);
    }
    JUMPOUT(0x2494FECF8);
  }
  return result;
}

void boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>::load_object_data(uint64_t a1, const void *a2, std::string *a3)
{
  boost::archive::detail::basic_iarchive_impl **v4;
  uint64_t v5;
  uint64_t v6;
  const boost::archive::detail::basic_iserializer *instance;

  v4 = (boost::archive::detail::basic_iarchive_impl **)boost::serialization::smart_cast_impl::reference<boost::archive::text_iarchive &>::polymorphic::cross::cast<boost::archive::detail::basic_iarchive>(a2);
  instance = (const boost::archive::detail::basic_iserializer *)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<double>>>::get_instance((uint64_t)v4, v5, v6);
  boost::archive::detail::basic_iarchive::load_object(v4, (unint64_t)a3, instance);
  boost::archive::text_iarchive_impl<boost::archive::text_iarchive>::load((uint64_t)v4, a3 + 1);
}

void boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::vector<double>>>::~singleton_wrapper(boost::serialization::extended_type_info *a1)
{
  *(_QWORD *)a1 = &unk_25142AEA8;
  boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::vector<double>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::serialization::extended_type_info_typeid<std::vector<double>>::~extended_type_info_typeid(a1);
}

{
  *(_QWORD *)a1 = &unk_25142AEA8;
  boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::vector<double>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::serialization::extended_type_info_typeid<std::vector<double>>::~extended_type_info_typeid(a1);
  JUMPOUT(0x2494FECF8);
}

boost::serialization::typeid_system::extended_type_info_typeid_0 *boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::vector<double>>>::singleton_wrapper(boost::serialization::typeid_system::extended_type_info_typeid_0 *a1)
{
  *(_QWORD *)boost::serialization::extended_type_info_typeid<std::vector<double>>::extended_type_info_typeid(a1) = &unk_25142AEA8;
  if (boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::vector<double>>>::get_is_destroyed(void)::is_destroyed_flag)
    __assert_rtn("singleton_wrapper", "singleton.hpp", 148, "! is_destroyed()");
  return a1;
}

void sub_243A2FD80(_Unwind_Exception *a1)
{
  boost::serialization::extended_type_info *v1;

  boost::serialization::extended_type_info_typeid<std::vector<double>>::~extended_type_info_typeid(v1);
  _Unwind_Resume(a1);
}

boost::serialization::typeid_system::extended_type_info_typeid_0 *boost::serialization::extended_type_info_typeid<std::vector<double>>::extended_type_info_typeid(boost::serialization::typeid_system::extended_type_info_typeid_0 *a1)
{
  boost::serialization::typeid_system::extended_type_info_typeid_0 *v2;

  v2 = (boost::serialization::typeid_system::extended_type_info_typeid_0 *)boost::serialization::typeid_system::extended_type_info_typeid_0::extended_type_info_typeid_0(a1, 0);
  *(_QWORD *)v2 = &unk_25142AF50;
  boost::serialization::extended_type_info::key_register((uint64_t *)a1);
  return a1;
}

void sub_243A2FDE0(_Unwind_Exception *a1)
{
  boost::serialization::typeid_system::extended_type_info_typeid_0 *v1;

  boost::serialization::typeid_system::extended_type_info_typeid_0::~extended_type_info_typeid_0(v1);
  _Unwind_Resume(a1);
}

void boost::serialization::extended_type_info_typeid<std::vector<double>>::~extended_type_info_typeid(boost::serialization::extended_type_info *a1)
{
  *(_QWORD *)a1 = &unk_25142AF50;
  boost::serialization::extended_type_info::key_unregister(a1);
  boost::serialization::typeid_system::extended_type_info_typeid_0::type_unregister((uint64_t *)a1);
  boost::serialization::typeid_system::extended_type_info_typeid_0::~extended_type_info_typeid_0(a1);
}

{
  boost::serialization::extended_type_info_typeid<std::vector<double>>::~extended_type_info_typeid(a1);
  JUMPOUT(0x2494FECF8);
}

void boost::serialization::extended_type_info_typeid<std::vector<double>>::construct(uint64_t a1, uint64_t a2, uint64_t a3)
{
  switch((int)a2)
  {
    case 0:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct(a1, a2, a3);
    case 1:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct(a1, a2, a3);
    case 2:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct(a1, a2, a3);
    case 3:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct(a1, a2, a3);
    case 4:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct(a1, a2, a3);
    default:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct(a1, a2, a3);
  }
}

void **boost::serialization::extended_type_info_typeid<std::vector<double>>::destroy(uint64_t a1, void **a2)
{
  return boost::serialization::access::destroy<std::vector<double>>(a2);
}

void **boost::serialization::access::destroy<std::vector<double>>(void **result)
{
  void **v1;
  void *v2;

  if (result)
  {
    v1 = result;
    v2 = *result;
    if (v2)
    {
      v1[1] = v2;
      operator delete(v2);
    }
    JUMPOUT(0x2494FECF8);
  }
  return result;
}

void boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<double>>::load_object_data(uint64_t a1, const void *a2, void **a3)
{
  void *v4;

  v4 = boost::serialization::smart_cast_impl::reference<boost::archive::text_iarchive &>::polymorphic::cross::cast<boost::archive::detail::basic_iarchive>(a2);
  boost::serialization::free_loader<boost::archive::text_iarchive,std::vector<double>>::invoke((uint64_t)v4, a3);
}

void boost::serialization::free_loader<boost::archive::text_iarchive,std::vector<double>>::invoke(uint64_t a1, void **a2)
{
  unint64_t v4;
  unint64_t v5;
  unsigned __int16 v6;

  boost::archive::detail::basic_iarchive::get_library_version(a1, &v6);
  v5 = 0;
  boost::archive::basic_text_iprimitive<std::istream>::load<boost::serialization::collection_size_type>((_QWORD *)(a1 + 40));
  if (v6 >= 4u)
    boost::archive::basic_text_iprimitive<std::istream>::load<unsigned int>((_QWORD *)(a1 + 40));
  std::vector<double>::reserve(a2, v5);
  v4 = v5;
  boost::serialization::stl::collection_load_impl<boost::archive::text_iarchive,std::vector<double>>(a1, (uint64_t *)a2, &v4);
}

void boost::serialization::stl::collection_load_impl<boost::archive::text_iarchive,std::vector<double>>(uint64_t a1, uint64_t *a2, unint64_t *a3)
{
  uint64_t v6;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;

  std::vector<double>::resize((uint64_t)a2, *a3);
  v6 = *a2;
  if ((*a3)--)
  {
    v8 = (_QWORD *)(a1 + 40);
    do
    {
      v9 = v6 + 8;
      boost::archive::basic_text_iprimitive<std::istream>::load<double>(v8);
      v10 = (*a3)--;
      v6 = v9;
    }
    while (v10);
  }
}

void std::vector<double>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    std::vector<double>::__append((char **)a1, a2 - v2);
  }
}

void std::vector<double>::__append(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 3);
    if (v10 >> 61)
      std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::__throw_length_error[abi:ne180100]();
    v11 = v9 >> 3;
    v12 = v5 - v8;
    if (v12 >> 2 > v10)
      v10 = v12 >> 2;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[8 * v11];
    v16 = &v14[8 * v13];
    bzero(v15, 8 * a2);
    v17 = &v15[8 * a2];
    while (v7 != v8)
    {
      v18 = *((_QWORD *)v7 - 1);
      v7 -= 8;
      *((_QWORD *)v15 - 1) = v18;
      v15 -= 8;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
      operator delete(v8);
  }
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<double>>>::~singleton_wrapper(boost::archive::detail::basic_iserializer *a1)
{
  *(_QWORD *)a1 = &unk_25142AFA8;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<double>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
}

{
  *(_QWORD *)a1 = &unk_25142AFA8;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<double>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
  JUMPOUT(0x2494FECF8);
}

_QWORD *boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<double>>>::singleton_wrapper(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  void *instance;

  instance = boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<double>>>::get_instance((uint64_t)a1, a2, a3);
  boost::archive::detail::basic_iserializer::basic_iserializer(a1, (uint64_t)instance);
  *a1 = &unk_25142AFA8;
  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<double>>>::get_is_destroyed(void)::is_destroyed_flag)
    __assert_rtn("singleton_wrapper", "singleton.hpp", 148, "! is_destroyed()");
  return a1;
}

void sub_243A30244(_Unwind_Exception *a1)
{
  boost::archive::detail::basic_iserializer *v1;

  boost::archive::detail::basic_iserializer::~basic_iserializer(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<double>>::class_info()
{
  return 0;
}

BOOL boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<double>>::tracking(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) != 0;
}

void boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<double>>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<double>>::is_polymorphic()
{
  return 0;
}

void **boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<double>>::destroy(uint64_t a1, void **a2)
{
  return boost::serialization::access::destroy<std::vector<double>>(a2);
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>>::~singleton_wrapper(boost::archive::detail::basic_iserializer *a1)
{
  *(_QWORD *)a1 = &unk_25142B028;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
}

{
  *(_QWORD *)a1 = &unk_25142B028;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
  JUMPOUT(0x2494FECF8);
}

_QWORD *boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>>::singleton_wrapper(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  void *instance;

  instance = boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>>::get_instance((uint64_t)a1, a2, a3);
  boost::archive::detail::basic_iserializer::basic_iserializer(a1, (uint64_t)instance);
  *a1 = &unk_25142B028;
  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>>::get_is_destroyed(void)::is_destroyed_flag)
    __assert_rtn("singleton_wrapper", "singleton.hpp", 148, "! is_destroyed()");
  return a1;
}

void sub_243A30358(_Unwind_Exception *a1)
{
  boost::archive::detail::basic_iserializer *v1;

  boost::archive::detail::basic_iserializer::~basic_iserializer(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>::class_info()
{
  return 1;
}

BOOL boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>::tracking(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) != 0;
}

void boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>::is_polymorphic()
{
  return 0;
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>::destroy(uint64_t a1, uint64_t a2)
{
  return boost::serialization::access::destroy<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>(a2);
}

void boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::~singleton_wrapper(boost::serialization::extended_type_info *a1)
{
  *(_QWORD *)a1 = &unk_25142B0A8;
  boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::serialization::extended_type_info_typeid<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::~extended_type_info_typeid(a1);
}

{
  *(_QWORD *)a1 = &unk_25142B0A8;
  boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::serialization::extended_type_info_typeid<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::~extended_type_info_typeid(a1);
  JUMPOUT(0x2494FECF8);
}

boost::serialization::typeid_system::extended_type_info_typeid_0 *boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::singleton_wrapper(boost::serialization::typeid_system::extended_type_info_typeid_0 *a1)
{
  *(_QWORD *)boost::serialization::extended_type_info_typeid<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::extended_type_info_typeid(a1) = &unk_25142B0A8;
  if (boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::get_is_destroyed(void)::is_destroyed_flag)
    __assert_rtn("singleton_wrapper", "singleton.hpp", 148, "! is_destroyed()");
  return a1;
}

void sub_243A30460(_Unwind_Exception *a1)
{
  boost::serialization::extended_type_info *v1;

  boost::serialization::extended_type_info_typeid<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::~extended_type_info_typeid(v1);
  _Unwind_Resume(a1);
}

boost::serialization::typeid_system::extended_type_info_typeid_0 *boost::serialization::extended_type_info_typeid<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::extended_type_info_typeid(boost::serialization::typeid_system::extended_type_info_typeid_0 *a1)
{
  boost::serialization::typeid_system::extended_type_info_typeid_0 *v2;

  v2 = (boost::serialization::typeid_system::extended_type_info_typeid_0 *)boost::serialization::typeid_system::extended_type_info_typeid_0::extended_type_info_typeid_0(a1, 0);
  *(_QWORD *)v2 = &unk_25142B150;
  boost::serialization::extended_type_info::key_register((uint64_t *)a1);
  return a1;
}

void sub_243A304C0(_Unwind_Exception *a1)
{
  boost::serialization::typeid_system::extended_type_info_typeid_0 *v1;

  boost::serialization::typeid_system::extended_type_info_typeid_0::~extended_type_info_typeid_0(v1);
  _Unwind_Resume(a1);
}

void boost::serialization::extended_type_info_typeid<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::~extended_type_info_typeid(boost::serialization::extended_type_info *a1)
{
  *(_QWORD *)a1 = &unk_25142B150;
  boost::serialization::extended_type_info::key_unregister(a1);
  boost::serialization::typeid_system::extended_type_info_typeid_0::type_unregister((uint64_t *)a1);
  boost::serialization::typeid_system::extended_type_info_typeid_0::~extended_type_info_typeid_0(a1);
}

{
  boost::serialization::extended_type_info_typeid<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::~extended_type_info_typeid(a1);
  JUMPOUT(0x2494FECF8);
}

void boost::serialization::extended_type_info_typeid<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::construct(uint64_t a1, uint64_t a2, uint64_t a3)
{
  switch((int)a2)
  {
    case 0:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct(a1, a2, a3);
    case 1:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct(a1, a2, a3);
    case 2:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct(a1, a2, a3);
    case 3:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct(a1, a2, a3);
    case 4:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct(a1, a2, a3);
    default:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct(a1, a2, a3);
  }
}

uint64_t boost::serialization::extended_type_info_typeid<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::destroy(uint64_t a1, uint64_t a2)
{
  return boost::serialization::access::destroy<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>(a2);
}

uint64_t boost::serialization::access::destroy<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>(uint64_t result)
{
  if (result)
  {
    if (*(char *)(result + 31) < 0)
      operator delete(*(void **)(result + 8));
    JUMPOUT(0x2494FECF8);
  }
  return result;
}

_QWORD *boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::load_object_data(uint64_t a1, const void *a2, uint64_t a3)
{
  void *v4;

  v4 = boost::serialization::smart_cast_impl::reference<boost::archive::text_iarchive &>::polymorphic::cross::cast<boost::archive::detail::basic_iarchive>(a2);
  return boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>::serialize<boost::archive::text_iarchive>(a3, (uint64_t)v4);
}

_QWORD *boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>::serialize<boost::archive::text_iarchive>(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)(a2 + 40);
  boost::archive::basic_text_iprimitive<std::istream>::load<int>((_QWORD *)(a2 + 40));
  boost::archive::text_iarchive_impl<boost::archive::text_iarchive>::load(a2, (std::string *)(a1 + 8));
  return boost::archive::basic_text_iprimitive<std::istream>::load<int>(v4);
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::~singleton_wrapper(boost::archive::detail::basic_iserializer *a1)
{
  *(_QWORD *)a1 = &unk_25142B1C0;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
}

{
  *(_QWORD *)a1 = &unk_25142B1C0;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
  JUMPOUT(0x2494FECF8);
}

_QWORD *boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::singleton_wrapper(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  void *instance;

  instance = boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::get_instance((uint64_t)a1, a2, a3);
  boost::archive::detail::basic_iserializer::basic_iserializer(a1, (uint64_t)instance);
  *a1 = &unk_25142B1C0;
  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::get_is_destroyed(void)::is_destroyed_flag)
    __assert_rtn("singleton_wrapper", "singleton.hpp", 148, "! is_destroyed()");
  return a1;
}

void sub_243A3072C(_Unwind_Exception *a1)
{
  boost::archive::detail::basic_iserializer *v1;

  boost::archive::detail::basic_iserializer::~basic_iserializer(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::class_info()
{
  return 1;
}

BOOL boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::tracking(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) != 0;
}

void boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::is_polymorphic()
{
  return 0;
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::destroy(uint64_t a1, uint64_t a2)
{
  return boost::serialization::access::destroy<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>(a2);
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::~singleton_wrapper(boost::archive::detail::basic_iserializer *a1)
{
  *(_QWORD *)a1 = &unk_25142B240;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
}

{
  *(_QWORD *)a1 = &unk_25142B240;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
  JUMPOUT(0x2494FECF8);
}

_QWORD *boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::singleton_wrapper(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  void *instance;

  instance = boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::get_instance((uint64_t)a1, a2, a3);
  boost::archive::detail::basic_iserializer::basic_iserializer(a1, (uint64_t)instance);
  *a1 = &unk_25142B240;
  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::get_is_destroyed(void)::is_destroyed_flag)
    __assert_rtn("singleton_wrapper", "singleton.hpp", 148, "! is_destroyed()");
  return a1;
}

void sub_243A30840(_Unwind_Exception *a1)
{
  boost::archive::detail::basic_iserializer *v1;

  boost::archive::detail::basic_iserializer::~basic_iserializer(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::class_info()
{
  return 1;
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::tracking()
{
  return 1;
}

void boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::is_polymorphic()
{
  return 0;
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::destroy(uint64_t a1, uint64_t a2)
{
  return boost::serialization::access::destroy<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>(a2);
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::~singleton_wrapper(boost::archive::detail::basic_iserializer *a1)
{
  *(_QWORD *)a1 = &unk_25142B2C0;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
}

{
  *(_QWORD *)a1 = &unk_25142B2C0;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
  JUMPOUT(0x2494FECF8);
}

_QWORD *boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::singleton_wrapper(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  void *instance;

  instance = boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::get_instance((uint64_t)a1, a2, a3);
  boost::archive::detail::basic_iserializer::basic_iserializer(a1, (uint64_t)instance);
  *a1 = &unk_25142B2C0;
  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::get_is_destroyed(void)::is_destroyed_flag)
    __assert_rtn("singleton_wrapper", "singleton.hpp", 148, "! is_destroyed()");
  return a1;
}

void sub_243A3094C(_Unwind_Exception *a1)
{
  boost::archive::detail::basic_iserializer *v1;

  boost::archive::detail::basic_iserializer::~basic_iserializer(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::class_info()
{
  return 1;
}

BOOL boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::tracking(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) != 0;
}

void boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::is_polymorphic()
{
  return 0;
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::destroy(uint64_t a1, uint64_t a2)
{
  return boost::serialization::access::destroy<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>(a2);
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>>::~singleton_wrapper(boost::archive::detail::basic_iserializer *a1)
{
  *(_QWORD *)a1 = &unk_25142B340;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
}

{
  *(_QWORD *)a1 = &unk_25142B340;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
  JUMPOUT(0x2494FECF8);
}

_QWORD *boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>>::singleton_wrapper(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  void *instance;

  instance = boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>>::get_instance((uint64_t)a1, a2, a3);
  boost::archive::detail::basic_iserializer::basic_iserializer(a1, (uint64_t)instance);
  *a1 = &unk_25142B340;
  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>>::get_is_destroyed(void)::is_destroyed_flag)
    __assert_rtn("singleton_wrapper", "singleton.hpp", 148, "! is_destroyed()");
  return a1;
}

void sub_243A30A60(_Unwind_Exception *a1)
{
  boost::archive::detail::basic_iserializer *v1;

  boost::archive::detail::basic_iserializer::~basic_iserializer(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::class_info()
{
  return 1;
}

BOOL boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::tracking(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) != 0;
}

void boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::is_polymorphic()
{
  return 0;
}

void **boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::destroy(uint64_t a1, void **a2)
{
  return boost::serialization::access::destroy<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>(a2);
}

void boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::histogram::unlimited_storage<std::allocator<char>>>>::~singleton_wrapper(boost::serialization::extended_type_info *a1)
{
  *(_QWORD *)a1 = &unk_25142B3C0;
  boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::histogram::unlimited_storage<std::allocator<char>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::serialization::extended_type_info_typeid<boost::histogram::unlimited_storage<std::allocator<char>>>::~extended_type_info_typeid(a1);
}

{
  *(_QWORD *)a1 = &unk_25142B3C0;
  boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::histogram::unlimited_storage<std::allocator<char>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::serialization::extended_type_info_typeid<boost::histogram::unlimited_storage<std::allocator<char>>>::~extended_type_info_typeid(a1);
  JUMPOUT(0x2494FECF8);
}

boost::serialization::typeid_system::extended_type_info_typeid_0 *boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::histogram::unlimited_storage<std::allocator<char>>>>::singleton_wrapper(boost::serialization::typeid_system::extended_type_info_typeid_0 *a1)
{
  *(_QWORD *)boost::serialization::extended_type_info_typeid<boost::histogram::unlimited_storage<std::allocator<char>>>::extended_type_info_typeid(a1) = &unk_25142B3C0;
  if (boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::histogram::unlimited_storage<std::allocator<char>>>>::get_is_destroyed(void)::is_destroyed_flag)
    __assert_rtn("singleton_wrapper", "singleton.hpp", 148, "! is_destroyed()");
  return a1;
}

void sub_243A30B68(_Unwind_Exception *a1)
{
  boost::serialization::extended_type_info *v1;

  boost::serialization::extended_type_info_typeid<boost::histogram::unlimited_storage<std::allocator<char>>>::~extended_type_info_typeid(v1);
  _Unwind_Resume(a1);
}

boost::serialization::typeid_system::extended_type_info_typeid_0 *boost::serialization::extended_type_info_typeid<boost::histogram::unlimited_storage<std::allocator<char>>>::extended_type_info_typeid(boost::serialization::typeid_system::extended_type_info_typeid_0 *a1)
{
  boost::serialization::typeid_system::extended_type_info_typeid_0 *v2;

  v2 = (boost::serialization::typeid_system::extended_type_info_typeid_0 *)boost::serialization::typeid_system::extended_type_info_typeid_0::extended_type_info_typeid_0(a1, 0);
  *(_QWORD *)v2 = &unk_25142B468;
  boost::serialization::extended_type_info::key_register((uint64_t *)a1);
  return a1;
}

void sub_243A30BC8(_Unwind_Exception *a1)
{
  boost::serialization::typeid_system::extended_type_info_typeid_0 *v1;

  boost::serialization::typeid_system::extended_type_info_typeid_0::~extended_type_info_typeid_0(v1);
  _Unwind_Resume(a1);
}

void boost::serialization::extended_type_info_typeid<boost::histogram::unlimited_storage<std::allocator<char>>>::~extended_type_info_typeid(boost::serialization::extended_type_info *a1)
{
  *(_QWORD *)a1 = &unk_25142B468;
  boost::serialization::extended_type_info::key_unregister(a1);
  boost::serialization::typeid_system::extended_type_info_typeid_0::type_unregister((uint64_t *)a1);
  boost::serialization::typeid_system::extended_type_info_typeid_0::~extended_type_info_typeid_0(a1);
}

{
  boost::serialization::extended_type_info_typeid<boost::histogram::unlimited_storage<std::allocator<char>>>::~extended_type_info_typeid(a1);
  JUMPOUT(0x2494FECF8);
}

void boost::serialization::extended_type_info_typeid<boost::histogram::unlimited_storage<std::allocator<char>>>::construct(uint64_t a1, uint64_t a2, uint64_t a3)
{
  switch((int)a2)
  {
    case 0:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct(a1, a2, a3);
    case 1:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct(a1, a2, a3);
    case 2:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct(a1, a2, a3);
    case 3:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct(a1, a2, a3);
    case 4:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct(a1, a2, a3);
    default:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct(a1, a2, a3);
  }
}

uint64_t boost::serialization::extended_type_info_typeid<boost::histogram::unlimited_storage<std::allocator<char>>>::destroy(uint64_t a1, uint64_t a2)
{
  return boost::serialization::access::destroy<boost::histogram::unlimited_storage<std::allocator<char>>>(a2);
}

uint64_t boost::serialization::access::destroy<boost::histogram::unlimited_storage<std::allocator<char>>>(uint64_t result)
{
  if (result)
  {
    boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::destroy(result);
    JUMPOUT(0x2494FECF8);
  }
  return result;
}

_QWORD *boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::unlimited_storage<std::allocator<char>>>::load_object_data(uint64_t a1, const void *a2, _QWORD *a3)
{
  void *v4;

  v4 = boost::serialization::smart_cast_impl::reference<boost::archive::text_iarchive &>::polymorphic::cross::cast<boost::archive::detail::basic_iarchive>(a2);
  return boost::histogram::unlimited_storage<std::allocator<char>>::serialize<boost::archive::text_iarchive>(a3, (uint64_t)v4);
}

_QWORD *boost::histogram::unlimited_storage<std::allocator<char>>::serialize<boost::archive::text_iarchive>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;
  char v10;
  uint64_t v11;

  v9 = 0;
  v11 = 0;
  v7[2] = 0;
  v4 = (_QWORD *)(a2 + 40);
  boost::archive::basic_text_iprimitive<std::istream>::load<short>((_QWORD *)(a2 + 40));
  v10 = 0;
  boost::archive::basic_text_iprimitive<std::istream>::load<unsigned long>(v4);
  v7[0] = a1;
  v7[1] = 0;
  boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::apply<void boost::histogram::unlimited_storage<std::allocator<char>>::serialize<boost::archive::text_iarchive>(boost::archive::text_iarchive &,unsigned int)::{lambda(boost::archive::text_iarchive*)#1}>((uint64_t)&v8, (uint64_t)v7, v5);
  boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::destroy((uint64_t)&v8);
  v8 = a1;
  v9 = a2;
  return boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::apply<void boost::histogram::unlimited_storage<std::allocator<char>>::serialize<boost::archive::text_iarchive>(boost::archive::text_iarchive &,unsigned int)::{lambda(boost::archive::text_iarchive*)#2}>(a1, &v8);
}

void sub_243A30DE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::destroy((uint64_t)va);
  _Unwind_Resume(a1);
}

void boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::apply<void boost::histogram::unlimited_storage<std::allocator<char>>::serialize<boost::archive::text_iarchive>(boost::archive::text_iarchive &,unsigned int)::{lambda(boost::archive::text_iarchive*)#1}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  switch(*(_BYTE *)(a1 + 16))
  {
    case 0:
      if (*(_QWORD *)(a1 + 24))
        boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::apply<void boost::histogram::unlimited_storage<std::allocator<char>>::serialize<boost::archive::text_iarchive>(boost::archive::text_iarchive &,unsigned int)::{lambda(boost::archive::text_iarchive*)#1}>(a1, a2, a3);
      boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::make<unsigned char>(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
      break;
    case 1:
      if (*(_QWORD *)(a1 + 24))
        boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::apply<void boost::histogram::unlimited_storage<std::allocator<char>>::serialize<boost::archive::text_iarchive>(boost::archive::text_iarchive &,unsigned int)::{lambda(boost::archive::text_iarchive*)#1}>(a1, a2, a3);
      boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::make<unsigned short>(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
      break;
    case 2:
      if (*(_QWORD *)(a1 + 24))
        boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::apply<void boost::histogram::unlimited_storage<std::allocator<char>>::serialize<boost::archive::text_iarchive>(boost::archive::text_iarchive &,unsigned int)::{lambda(boost::archive::text_iarchive*)#1}>(a1, a2, a3);
      boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::make<unsigned int>(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
      break;
    case 3:
      if (*(_QWORD *)(a1 + 24))
        boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::apply<void boost::histogram::unlimited_storage<std::allocator<char>>::serialize<boost::archive::text_iarchive>(boost::archive::text_iarchive &,unsigned int)::{lambda(boost::archive::text_iarchive*)#1}>(a1, a2, a3);
      boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::make<unsigned long long>(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
      break;
    case 4:
      if (*(_QWORD *)(a1 + 24))
        boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::apply<void boost::histogram::unlimited_storage<std::allocator<char>>::serialize<boost::archive::text_iarchive>(boost::archive::text_iarchive &,unsigned int)::{lambda(boost::archive::text_iarchive*)#1}>(a1, a2, a3);
      boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::make<boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
      break;
    default:
      if (*(_QWORD *)(a1 + 24))
        boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::apply<void boost::histogram::unlimited_storage<std::allocator<char>>::serialize<boost::archive::text_iarchive>(boost::archive::text_iarchive &,unsigned int)::{lambda(boost::archive::text_iarchive*)#1}>(a1, a2, a3);
      boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::make<double>(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
      break;
  }
}

{
  OUTLINED_FUNCTION_10("operator()", "serialization.hpp", a3, "tp == nullptr");
}

_QWORD *boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::apply<void boost::histogram::unlimited_storage<std::allocator<char>>::serialize<boost::archive::text_iarchive>(boost::archive::text_iarchive &,unsigned int)::{lambda(boost::archive::text_iarchive*)#2}>(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  _BYTE *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  boost::archive::detail::basic_iarchive_impl **v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25[2];

  switch(*((_BYTE *)result + 16))
  {
    case 0:
      v2 = *(_QWORD *)(*a2 + 8);
      if (v2)
      {
        v3 = *(_BYTE **)(*a2 + 24);
        v4 = (_QWORD *)(a2[1] + 40);
        do
        {
          --v2;
          result = boost::archive::basic_text_iprimitive<std::istream>::load<unsigned short>(v4);
          *v3++ = 0;
        }
        while (v2);
      }
      break;
    case 1:
      v9 = *(_QWORD *)(*a2 + 8);
      if (v9)
      {
        v10 = *(_QWORD *)(*a2 + 24);
        v11 = (_QWORD *)(a2[1] + 40);
        do
        {
          --v9;
          v12 = v10 + 2;
          result = boost::archive::basic_text_iprimitive<std::istream>::load<unsigned short>(v11);
          v10 = v12;
        }
        while (v9);
      }
      break;
    case 2:
      v13 = *(_QWORD *)(*a2 + 8);
      if (v13)
      {
        v14 = *(_QWORD *)(*a2 + 24);
        v15 = (_QWORD *)(a2[1] + 40);
        do
        {
          --v13;
          v16 = v14 + 4;
          result = boost::archive::basic_text_iprimitive<std::istream>::load<unsigned int>(v15);
          v14 = v16;
        }
        while (v13);
      }
      break;
    case 3:
      v17 = *(_QWORD *)(*a2 + 8);
      if (v17)
      {
        v18 = *(_QWORD *)(*a2 + 24);
        v19 = (_QWORD *)(a2[1] + 40);
        do
        {
          --v17;
          v20 = v18 + 8;
          result = boost::archive::basic_text_iprimitive<std::istream>::load<unsigned long long>(v19);
          v18 = v20;
        }
        while (v17);
      }
      break;
    case 4:
      v22 = *a2;
      v21 = (boost::archive::detail::basic_iarchive_impl **)a2[1];
      v23 = *(_QWORD *)(v22 + 24);
      v24 = *(_QWORD *)(v22 + 8);
      v25[0] = v23;
      v25[1] = v24;
      result = boost::serialization::array_wrapper<boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>::serialize_optimized<boost::archive::text_iarchive>(v25, v21, 0);
      break;
    default:
      v5 = *(_QWORD *)(*a2 + 8);
      if (v5)
      {
        v6 = *(_QWORD *)(*a2 + 24);
        v7 = (_QWORD *)(a2[1] + 40);
        do
        {
          --v5;
          v8 = v6 + 8;
          result = boost::archive::basic_text_iprimitive<std::istream>::load<double>(v7);
          v6 = v8;
        }
        while (v5);
      }
      break;
  }
  return result;
}

_QWORD *boost::archive::basic_text_iprimitive<std::istream>::load<short>(_QWORD *a1)
{
  _QWORD *result;
  _BYTE v2[144];
  uint64_t v3;

  v3 = *MEMORY[0x24BDAC8D0];
  result = (_QWORD *)MEMORY[0x2494FEB60](*a1);
  if ((*((_BYTE *)result + *(_QWORD *)(*result - 24) + 32) & 5) != 0)
  {
    boost::archive::archive_exception::archive_exception((uint64_t)v2, 8, 0, 0);
    boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v2);
  }
  return result;
}

void sub_243A310CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  boost::archive::archive_exception::~archive_exception(&a10);
  _Unwind_Resume(a1);
}

_QWORD *boost::archive::basic_text_iprimitive<std::istream>::load<unsigned long>(_QWORD *a1)
{
  _QWORD *result;
  _BYTE v2[144];
  uint64_t v3;

  v3 = *MEMORY[0x24BDAC8D0];
  result = (_QWORD *)MEMORY[0x2494FEB54](*a1);
  if ((*((_BYTE *)result + *(_QWORD *)(*result - 24) + 32) & 5) != 0)
  {
    boost::archive::archive_exception::archive_exception((uint64_t)v2, 8, 0, 0);
    boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v2);
  }
  return result;
}

void sub_243A31170(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  boost::archive::archive_exception::~archive_exception(&a10);
  _Unwind_Resume(a1);
}

void boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::make<unsigned char>(uint64_t a1, size_t a2)
{
  void *v4;

  boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::destroy(a1);
  if (a2)
  {
    v4 = operator new(a2);
    bzero(v4, a2);
    *(_QWORD *)(a1 + 24) = v4;
  }
  *(_QWORD *)(a1 + 8) = a2;
  *(_BYTE *)(a1 + 16) = 0;
}

void boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::make<unsigned short>(uint64_t a1, uint64_t a2)
{
  char v4;

  boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::destroy(a1);
  if (a2)
    *(_QWORD *)(a1 + 24) = boost::histogram::detail::create_buffer<std::allocator<unsigned short>>((uint64_t)&v4, a2);
  *(_QWORD *)(a1 + 8) = a2;
  *(_BYTE *)(a1 + 16) = 1;
}

void *boost::histogram::detail::create_buffer<std::allocator<unsigned short>>(uint64_t a1, uint64_t a2)
{
  size_t v3;
  void *v4;
  void *v5;

  if (a2 < 0)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v3 = 2 * a2;
  v4 = operator new(2 * a2);
  v5 = v4;
  if (a2)
    bzero(v4, v3);
  return v5;
}

void boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::make<unsigned int>(uint64_t a1, unint64_t a2)
{
  char v4;

  boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::destroy(a1);
  if (a2)
    *(_QWORD *)(a1 + 24) = boost::histogram::detail::create_buffer<std::allocator<unsigned int>>((uint64_t)&v4, a2);
  *(_QWORD *)(a1 + 8) = a2;
  *(_BYTE *)(a1 + 16) = 2;
}

void *boost::histogram::detail::create_buffer<std::allocator<unsigned int>>(uint64_t a1, unint64_t a2)
{
  size_t v3;
  void *v4;
  void *v5;

  if (a2 >> 62)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v3 = 4 * a2;
  v4 = operator new(4 * a2);
  v5 = v4;
  if (a2)
    bzero(v4, v3);
  return v5;
}

void boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::make<unsigned long long>(uint64_t a1, unint64_t a2)
{
  char v4;

  boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::destroy(a1);
  if (a2)
    *(_QWORD *)(a1 + 24) = boost::histogram::detail::create_buffer<std::allocator<unsigned long long>>((uint64_t)&v4, a2);
  *(_QWORD *)(a1 + 8) = a2;
  *(_BYTE *)(a1 + 16) = 3;
}

void *boost::histogram::detail::create_buffer<std::allocator<unsigned long long>>(uint64_t a1, unint64_t a2)
{
  size_t v3;
  void *v4;
  void *v5;

  if (a2 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v3 = 8 * a2;
  v4 = operator new(8 * a2);
  v5 = v4;
  if (a2)
    bzero(v4, v3);
  return v5;
}

void boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::make<boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>(uint64_t a1, unint64_t a2)
{
  char v4;

  boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::destroy(a1);
  if (a2)
    *(_QWORD *)(a1 + 24) = boost::histogram::detail::create_buffer<std::allocator<boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>>((uint64_t)&v4, a2);
  *(_QWORD *)(a1 + 8) = a2;
  *(_BYTE *)(a1 + 16) = 4;
}

char *boost::histogram::detail::create_buffer<std::allocator<boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>>(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  _QWORD *v8;
  char *v9;

  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v3 = 3 * a2;
  v4 = (char *)operator new(24 * a2);
  v5 = v4;
  if (a2)
  {
    v6 = 0;
    v7 = &v4[8 * v3];
    do
    {
      v8 = operator new(8uLL);
      v9 = &v5[v6];
      *v8 = 0;
      *(_QWORD *)v9 = v8;
      *((_QWORD *)v9 + 1) = v8 + 1;
      *((_QWORD *)v9 + 2) = v8 + 1;
      v6 += 24;
    }
    while (v9 + 24 != v7);
  }
  return v5;
}

void sub_243A314BC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::make<double>(uint64_t a1, unint64_t a2)
{
  char v4;

  boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::destroy(a1);
  if (a2)
    *(_QWORD *)(a1 + 24) = boost::histogram::detail::create_buffer<std::allocator<unsigned long long>>((uint64_t)&v4, a2);
  *(_QWORD *)(a1 + 8) = a2;
  *(_BYTE *)(a1 + 16) = 5;
}

_QWORD *boost::archive::basic_text_iprimitive<std::istream>::load<unsigned short>(_QWORD *a1)
{
  _QWORD *result;
  _BYTE v2[144];
  uint64_t v3;

  v3 = *MEMORY[0x24BDAC8D0];
  result = (_QWORD *)MEMORY[0x2494FEB6C](*a1);
  if ((*((_BYTE *)result + *(_QWORD *)(*result - 24) + 32) & 5) != 0)
  {
    boost::archive::archive_exception::archive_exception((uint64_t)v2, 8, 0, 0);
    boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v2);
  }
  return result;
}

void sub_243A315AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  boost::archive::archive_exception::~archive_exception(&a10);
  _Unwind_Resume(a1);
}

_QWORD *boost::archive::basic_text_iprimitive<std::istream>::load<unsigned long long>(_QWORD *a1)
{
  _QWORD *result;
  _BYTE v2[144];
  uint64_t v3;

  v3 = *MEMORY[0x24BDAC8D0];
  result = (_QWORD *)MEMORY[0x2494FEB78](*a1);
  if ((*((_BYTE *)result + *(_QWORD *)(*result - 24) + 32) & 5) != 0)
  {
    boost::archive::archive_exception::archive_exception((uint64_t)v2, 8, 0, 0);
    boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v2);
  }
  return result;
}

void sub_243A31650(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  boost::archive::archive_exception::~archive_exception(&a10);
  _Unwind_Resume(a1);
}

unint64_t *boost::serialization::array_wrapper<boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>::serialize_optimized<boost::archive::text_iarchive>(unint64_t *result, boost::archive::detail::basic_iarchive_impl **a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v5;
  const boost::archive::detail::basic_iserializer *instance;

  v3 = result[1];
  if (v3)
  {
    v5 = *result;
    do
    {
      --v3;
      instance = (const boost::archive::detail::basic_iserializer *)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>>::get_instance((uint64_t)result, (uint64_t)a2, a3);
      result = (unint64_t *)boost::archive::detail::basic_iarchive::load_object(a2, v5, instance);
      v5 += 24;
    }
    while (v3);
  }
  return result;
}

void boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>>::~singleton_wrapper(boost::serialization::extended_type_info *a1)
{
  *(_QWORD *)a1 = &unk_25142B4C0;
  boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::serialization::extended_type_info_typeid<boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>::~extended_type_info_typeid(a1);
}

{
  *(_QWORD *)a1 = &unk_25142B4C0;
  boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::serialization::extended_type_info_typeid<boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>::~extended_type_info_typeid(a1);
  JUMPOUT(0x2494FECF8);
}

boost::serialization::typeid_system::extended_type_info_typeid_0 *boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>>::singleton_wrapper(boost::serialization::typeid_system::extended_type_info_typeid_0 *a1)
{
  *(_QWORD *)boost::serialization::extended_type_info_typeid<boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>::extended_type_info_typeid(a1) = &unk_25142B4C0;
  if (boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>>::get_is_destroyed(void)::is_destroyed_flag)
    __assert_rtn("singleton_wrapper", "singleton.hpp", 148, "! is_destroyed()");
  return a1;
}

void sub_243A3173C(_Unwind_Exception *a1)
{
  boost::serialization::extended_type_info *v1;

  boost::serialization::extended_type_info_typeid<boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>::~extended_type_info_typeid(v1);
  _Unwind_Resume(a1);
}

boost::serialization::typeid_system::extended_type_info_typeid_0 *boost::serialization::extended_type_info_typeid<boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>::extended_type_info_typeid(boost::serialization::typeid_system::extended_type_info_typeid_0 *a1)
{
  boost::serialization::typeid_system::extended_type_info_typeid_0 *v2;

  v2 = (boost::serialization::typeid_system::extended_type_info_typeid_0 *)boost::serialization::typeid_system::extended_type_info_typeid_0::extended_type_info_typeid_0(a1, 0);
  *(_QWORD *)v2 = &unk_25142B568;
  boost::serialization::extended_type_info::key_register((uint64_t *)a1);
  return a1;
}

void sub_243A3179C(_Unwind_Exception *a1)
{
  boost::serialization::typeid_system::extended_type_info_typeid_0 *v1;

  boost::serialization::typeid_system::extended_type_info_typeid_0::~extended_type_info_typeid_0(v1);
  _Unwind_Resume(a1);
}

void boost::serialization::extended_type_info_typeid<boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>::~extended_type_info_typeid(boost::serialization::extended_type_info *a1)
{
  *(_QWORD *)a1 = &unk_25142B568;
  boost::serialization::extended_type_info::key_unregister(a1);
  boost::serialization::typeid_system::extended_type_info_typeid_0::type_unregister((uint64_t *)a1);
  boost::serialization::typeid_system::extended_type_info_typeid_0::~extended_type_info_typeid_0(a1);
}

{
  boost::serialization::extended_type_info_typeid<boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>::~extended_type_info_typeid(a1);
  JUMPOUT(0x2494FECF8);
}

void boost::serialization::extended_type_info_typeid<boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>::construct(uint64_t a1, uint64_t a2, uint64_t a3)
{
  switch((int)a2)
  {
    case 0:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct(a1, a2, a3);
    case 1:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct(a1, a2, a3);
    case 2:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct(a1, a2, a3);
    case 3:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct(a1, a2, a3);
    case 4:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct(a1, a2, a3);
    default:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct(a1, a2, a3);
  }
}

void **boost::serialization::extended_type_info_typeid<boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>::destroy(uint64_t a1, void **a2)
{
  return boost::serialization::access::destroy<boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>(a2);
}

void **boost::serialization::access::destroy<boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>(void **result)
{
  void **v1;
  void *v2;

  if (result)
  {
    v1 = result;
    v2 = *result;
    if (v2)
    {
      v1[1] = v2;
      operator delete(v2);
    }
    JUMPOUT(0x2494FECF8);
  }
  return result;
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>::load_object_data(uint64_t a1, const void *a2, unint64_t a3)
{
  boost::archive::detail::basic_iarchive_impl **v4;
  uint64_t v5;
  uint64_t v6;
  const boost::archive::detail::basic_iserializer *instance;

  v4 = (boost::archive::detail::basic_iarchive_impl **)boost::serialization::smart_cast_impl::reference<boost::archive::text_iarchive &>::polymorphic::cross::cast<boost::archive::detail::basic_iarchive>(a2);
  instance = (const boost::archive::detail::basic_iserializer *)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<unsigned long long>>>::get_instance((uint64_t)v4, v5, v6);
  return boost::archive::detail::basic_iarchive::load_object(v4, a3, instance);
}

void boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::vector<unsigned long long>>>::~singleton_wrapper(boost::serialization::extended_type_info *a1)
{
  *(_QWORD *)a1 = &unk_25142B5C0;
  boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::vector<unsigned long long>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::serialization::extended_type_info_typeid<std::vector<unsigned long long>>::~extended_type_info_typeid(a1);
}

{
  *(_QWORD *)a1 = &unk_25142B5C0;
  boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::vector<unsigned long long>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::serialization::extended_type_info_typeid<std::vector<unsigned long long>>::~extended_type_info_typeid(a1);
  JUMPOUT(0x2494FECF8);
}

boost::serialization::typeid_system::extended_type_info_typeid_0 *boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::vector<unsigned long long>>>::singleton_wrapper(boost::serialization::typeid_system::extended_type_info_typeid_0 *a1)
{
  *(_QWORD *)boost::serialization::extended_type_info_typeid<std::vector<unsigned long long>>::extended_type_info_typeid(a1) = &unk_25142B5C0;
  if (boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::vector<unsigned long long>>>::get_is_destroyed(void)::is_destroyed_flag)
    __assert_rtn("singleton_wrapper", "singleton.hpp", 148, "! is_destroyed()");
  return a1;
}

void sub_243A319B4(_Unwind_Exception *a1)
{
  boost::serialization::extended_type_info *v1;

  boost::serialization::extended_type_info_typeid<std::vector<unsigned long long>>::~extended_type_info_typeid(v1);
  _Unwind_Resume(a1);
}

boost::serialization::typeid_system::extended_type_info_typeid_0 *boost::serialization::extended_type_info_typeid<std::vector<unsigned long long>>::extended_type_info_typeid(boost::serialization::typeid_system::extended_type_info_typeid_0 *a1)
{
  boost::serialization::typeid_system::extended_type_info_typeid_0 *v2;

  v2 = (boost::serialization::typeid_system::extended_type_info_typeid_0 *)boost::serialization::typeid_system::extended_type_info_typeid_0::extended_type_info_typeid_0(a1, 0);
  *(_QWORD *)v2 = &unk_25142B668;
  boost::serialization::extended_type_info::key_register((uint64_t *)a1);
  return a1;
}

void sub_243A31A14(_Unwind_Exception *a1)
{
  boost::serialization::typeid_system::extended_type_info_typeid_0 *v1;

  boost::serialization::typeid_system::extended_type_info_typeid_0::~extended_type_info_typeid_0(v1);
  _Unwind_Resume(a1);
}

void boost::serialization::extended_type_info_typeid<std::vector<unsigned long long>>::~extended_type_info_typeid(boost::serialization::extended_type_info *a1)
{
  *(_QWORD *)a1 = &unk_25142B668;
  boost::serialization::extended_type_info::key_unregister(a1);
  boost::serialization::typeid_system::extended_type_info_typeid_0::type_unregister((uint64_t *)a1);
  boost::serialization::typeid_system::extended_type_info_typeid_0::~extended_type_info_typeid_0(a1);
}

{
  boost::serialization::extended_type_info_typeid<std::vector<unsigned long long>>::~extended_type_info_typeid(a1);
  JUMPOUT(0x2494FECF8);
}

void boost::serialization::extended_type_info_typeid<std::vector<unsigned long long>>::construct(uint64_t a1, uint64_t a2, uint64_t a3)
{
  switch((int)a2)
  {
    case 0:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct(a1, a2, a3);
    case 1:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct(a1, a2, a3);
    case 2:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct(a1, a2, a3);
    case 3:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct(a1, a2, a3);
    case 4:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct(a1, a2, a3);
    default:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct(a1, a2, a3);
  }
}

void **boost::serialization::extended_type_info_typeid<std::vector<unsigned long long>>::destroy(uint64_t a1, void **a2)
{
  return boost::serialization::access::destroy<boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>(a2);
}

void boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<unsigned long long>>::load_object_data(uint64_t a1, const void *a2, void **a3)
{
  void *v4;

  v4 = boost::serialization::smart_cast_impl::reference<boost::archive::text_iarchive &>::polymorphic::cross::cast<boost::archive::detail::basic_iarchive>(a2);
  boost::serialization::free_loader<boost::archive::text_iarchive,std::vector<unsigned long long>>::invoke((uint64_t)v4, a3);
}

void boost::serialization::free_loader<boost::archive::text_iarchive,std::vector<unsigned long long>>::invoke(uint64_t a1, void **a2)
{
  unint64_t v4;
  unint64_t v5;
  unsigned __int16 v6;

  boost::archive::detail::basic_iarchive::get_library_version(a1, &v6);
  v5 = 0;
  boost::archive::basic_text_iprimitive<std::istream>::load<boost::serialization::collection_size_type>((_QWORD *)(a1 + 40));
  if (v6 >= 4u)
    boost::archive::basic_text_iprimitive<std::istream>::load<unsigned int>((_QWORD *)(a1 + 40));
  std::vector<unsigned long long>::reserve(a2, v5);
  v4 = v5;
  boost::serialization::stl::collection_load_impl<boost::archive::text_iarchive,std::vector<unsigned long long>>(a1, (uint64_t *)a2, &v4);
}

void std::vector<unsigned long long>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61)
      std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    v9 = &v6[8 * v8];
    v10 = (char *)*a1;
    v11 = (char *)a1[1];
    v12 = v7;
    if (v11 != *a1)
    {
      v12 = v7;
      do
      {
        v13 = *((_QWORD *)v11 - 1);
        v11 -= 8;
        *((_QWORD *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void boost::serialization::stl::collection_load_impl<boost::archive::text_iarchive,std::vector<unsigned long long>>(uint64_t a1, uint64_t *a2, unint64_t *a3)
{
  uint64_t v6;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;

  std::vector<unsigned long long>::resize((uint64_t)a2, *a3);
  v6 = *a2;
  if ((*a3)--)
  {
    v8 = (_QWORD *)(a1 + 40);
    do
    {
      v9 = v6 + 8;
      boost::archive::basic_text_iprimitive<std::istream>::load<unsigned long long>(v8);
      v10 = (*a3)--;
      v6 = v9;
    }
    while (v10);
  }
}

void std::vector<unsigned long long>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    std::vector<unsigned long long>::__append((char **)a1, a2 - v2);
  }
}

void std::vector<unsigned long long>::__append(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 3);
    if (v10 >> 61)
      std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::__throw_length_error[abi:ne180100]();
    v11 = v9 >> 3;
    v12 = v5 - v8;
    if (v12 >> 2 > v10)
      v10 = v12 >> 2;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[8 * v11];
    v16 = &v14[8 * v13];
    bzero(v15, 8 * a2);
    v17 = &v15[8 * a2];
    while (v7 != v8)
    {
      v18 = *((_QWORD *)v7 - 1);
      v7 -= 8;
      *((_QWORD *)v15 - 1) = v18;
      v15 -= 8;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
      operator delete(v8);
  }
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<unsigned long long>>>::~singleton_wrapper(boost::archive::detail::basic_iserializer *a1)
{
  *(_QWORD *)a1 = &unk_25142B6C0;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<unsigned long long>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
}

{
  *(_QWORD *)a1 = &unk_25142B6C0;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<unsigned long long>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
  JUMPOUT(0x2494FECF8);
}

_QWORD *boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<unsigned long long>>>::singleton_wrapper(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  void *instance;

  instance = boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<unsigned long long>>>::get_instance((uint64_t)a1, a2, a3);
  boost::archive::detail::basic_iserializer::basic_iserializer(a1, (uint64_t)instance);
  *a1 = &unk_25142B6C0;
  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<unsigned long long>>>::get_is_destroyed(void)::is_destroyed_flag)
    __assert_rtn("singleton_wrapper", "singleton.hpp", 148, "! is_destroyed()");
  return a1;
}

void sub_243A31EC4(_Unwind_Exception *a1)
{
  boost::archive::detail::basic_iserializer *v1;

  boost::archive::detail::basic_iserializer::~basic_iserializer(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<unsigned long long>>::class_info()
{
  return 0;
}

BOOL boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<unsigned long long>>::tracking(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) != 0;
}

void boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<unsigned long long>>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<unsigned long long>>::is_polymorphic()
{
  return 0;
}

void **boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<unsigned long long>>::destroy(uint64_t a1, void **a2)
{
  return boost::serialization::access::destroy<boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>(a2);
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>>::~singleton_wrapper(boost::archive::detail::basic_iserializer *a1)
{
  *(_QWORD *)a1 = &unk_25142B740;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
}

{
  *(_QWORD *)a1 = &unk_25142B740;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
  JUMPOUT(0x2494FECF8);
}

_QWORD *boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>>::singleton_wrapper(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  void *instance;

  instance = boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>>::get_instance((uint64_t)a1, a2, a3);
  boost::archive::detail::basic_iserializer::basic_iserializer(a1, (uint64_t)instance);
  *a1 = &unk_25142B740;
  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>>::get_is_destroyed(void)::is_destroyed_flag)
    __assert_rtn("singleton_wrapper", "singleton.hpp", 148, "! is_destroyed()");
  return a1;
}

void sub_243A31FD8(_Unwind_Exception *a1)
{
  boost::archive::detail::basic_iserializer *v1;

  boost::archive::detail::basic_iserializer::~basic_iserializer(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>::class_info()
{
  return 1;
}

BOOL boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>::tracking(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) != 0;
}

void boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>::is_polymorphic()
{
  return 0;
}

void **boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>::destroy(uint64_t a1, void **a2)
{
  return boost::serialization::access::destroy<boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>(a2);
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::unlimited_storage<std::allocator<char>>>>::~singleton_wrapper(boost::archive::detail::basic_iserializer *a1)
{
  *(_QWORD *)a1 = &unk_25142B7C0;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::unlimited_storage<std::allocator<char>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
}

{
  *(_QWORD *)a1 = &unk_25142B7C0;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::unlimited_storage<std::allocator<char>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
  JUMPOUT(0x2494FECF8);
}

_QWORD *boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::unlimited_storage<std::allocator<char>>>>::singleton_wrapper(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  void *instance;

  instance = boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::histogram::unlimited_storage<std::allocator<char>>>>::get_instance((uint64_t)a1, a2, a3);
  boost::archive::detail::basic_iserializer::basic_iserializer(a1, (uint64_t)instance);
  *a1 = &unk_25142B7C0;
  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::unlimited_storage<std::allocator<char>>>>::get_is_destroyed(void)::is_destroyed_flag)
    __assert_rtn("singleton_wrapper", "singleton.hpp", 148, "! is_destroyed()");
  return a1;
}

void sub_243A320EC(_Unwind_Exception *a1)
{
  boost::archive::detail::basic_iserializer *v1;

  boost::archive::detail::basic_iserializer::~basic_iserializer(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::unlimited_storage<std::allocator<char>>>::class_info()
{
  return 1;
}

BOOL boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::unlimited_storage<std::allocator<char>>>::tracking(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) != 0;
}

void boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::unlimited_storage<std::allocator<char>>>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::unlimited_storage<std::allocator<char>>>::is_polymorphic()
{
  return 0;
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::unlimited_storage<std::allocator<char>>>::destroy(uint64_t a1, uint64_t a2)
{
  return boost::serialization::access::destroy<boost::histogram::unlimited_storage<std::allocator<char>>>(a2);
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>>::~singleton_wrapper(boost::archive::detail::basic_iserializer *a1)
{
  *(_QWORD *)a1 = &unk_25142B840;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
}

{
  *(_QWORD *)a1 = &unk_25142B840;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
  JUMPOUT(0x2494FECF8);
}

_QWORD *boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>>::singleton_wrapper(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  void *instance;

  instance = boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>>::get_instance((uint64_t)a1, a2, a3);
  boost::archive::detail::basic_iserializer::basic_iserializer(a1, (uint64_t)instance);
  *a1 = &unk_25142B840;
  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>>::get_is_destroyed(void)::is_destroyed_flag)
    __assert_rtn("singleton_wrapper", "singleton.hpp", 148, "! is_destroyed()");
  return a1;
}

void sub_243A32200(_Unwind_Exception *a1)
{
  boost::archive::detail::basic_iserializer *v1;

  boost::archive::detail::basic_iserializer::~basic_iserializer(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>::class_info()
{
  return 1;
}

BOOL boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>::tracking(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) != 0;
}

void boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>::is_polymorphic()
{
  return 0;
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>::destroy(uint64_t a1, uint64_t a2)
{
  return boost::serialization::access::destroy<boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>(a2);
}

void boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::vector<pps::AxisEnum>>>::~singleton_wrapper(boost::serialization::extended_type_info *a1)
{
  *(_QWORD *)a1 = &unk_25142B8C0;
  boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::vector<pps::AxisEnum>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::serialization::extended_type_info_typeid<std::vector<pps::AxisEnum>>::~extended_type_info_typeid(a1);
}

{
  *(_QWORD *)a1 = &unk_25142B8C0;
  boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::vector<pps::AxisEnum>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::serialization::extended_type_info_typeid<std::vector<pps::AxisEnum>>::~extended_type_info_typeid(a1);
  JUMPOUT(0x2494FECF8);
}

boost::serialization::typeid_system::extended_type_info_typeid_0 *boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::vector<pps::AxisEnum>>>::singleton_wrapper(boost::serialization::typeid_system::extended_type_info_typeid_0 *a1)
{
  *(_QWORD *)boost::serialization::extended_type_info_typeid<std::vector<pps::AxisEnum>>::extended_type_info_typeid(a1) = &unk_25142B8C0;
  if (boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::vector<pps::AxisEnum>>>::get_is_destroyed(void)::is_destroyed_flag)
    __assert_rtn("singleton_wrapper", "singleton.hpp", 148, "! is_destroyed()");
  return a1;
}

void sub_243A32308(_Unwind_Exception *a1)
{
  boost::serialization::extended_type_info *v1;

  boost::serialization::extended_type_info_typeid<std::vector<pps::AxisEnum>>::~extended_type_info_typeid(v1);
  _Unwind_Resume(a1);
}

boost::serialization::typeid_system::extended_type_info_typeid_0 *boost::serialization::extended_type_info_typeid<std::vector<pps::AxisEnum>>::extended_type_info_typeid(boost::serialization::typeid_system::extended_type_info_typeid_0 *a1)
{
  boost::serialization::typeid_system::extended_type_info_typeid_0 *v2;

  v2 = (boost::serialization::typeid_system::extended_type_info_typeid_0 *)boost::serialization::typeid_system::extended_type_info_typeid_0::extended_type_info_typeid_0(a1, 0);
  *(_QWORD *)v2 = &unk_25142B968;
  boost::serialization::extended_type_info::key_register((uint64_t *)a1);
  return a1;
}

void sub_243A32368(_Unwind_Exception *a1)
{
  boost::serialization::typeid_system::extended_type_info_typeid_0 *v1;

  boost::serialization::typeid_system::extended_type_info_typeid_0::~extended_type_info_typeid_0(v1);
  _Unwind_Resume(a1);
}

void boost::serialization::extended_type_info_typeid<std::vector<pps::AxisEnum>>::~extended_type_info_typeid(boost::serialization::extended_type_info *a1)
{
  *(_QWORD *)a1 = &unk_25142B968;
  boost::serialization::extended_type_info::key_unregister(a1);
  boost::serialization::typeid_system::extended_type_info_typeid_0::type_unregister((uint64_t *)a1);
  boost::serialization::typeid_system::extended_type_info_typeid_0::~extended_type_info_typeid_0(a1);
}

{
  boost::serialization::extended_type_info_typeid<std::vector<pps::AxisEnum>>::~extended_type_info_typeid(a1);
  JUMPOUT(0x2494FECF8);
}

void boost::serialization::extended_type_info_typeid<std::vector<pps::AxisEnum>>::construct(uint64_t a1, uint64_t a2, uint64_t a3)
{
  switch((int)a2)
  {
    case 0:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct(a1, a2, a3);
    case 1:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct(a1, a2, a3);
    case 2:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct(a1, a2, a3);
    case 3:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct(a1, a2, a3);
    case 4:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct(a1, a2, a3);
    default:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct(a1, a2, a3);
  }
}

void **boost::serialization::extended_type_info_typeid<std::vector<pps::AxisEnum>>::destroy(uint64_t a1, void **a2)
{
  return boost::serialization::access::destroy<std::vector<double>>(a2);
}

void boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<pps::AxisEnum>>::load_object_data(uint64_t a1, const void *a2, void **a3)
{
  void *v4;

  v4 = boost::serialization::smart_cast_impl::reference<boost::archive::text_iarchive &>::polymorphic::cross::cast<boost::archive::detail::basic_iarchive>(a2);
  boost::serialization::free_loader<boost::archive::text_iarchive,std::vector<pps::AxisEnum>>::invoke((uint64_t)v4, a3);
}

void boost::serialization::free_loader<boost::archive::text_iarchive,std::vector<pps::AxisEnum>>::invoke(uint64_t a1, void **a2)
{
  unint64_t v4;
  unint64_t v5;
  unsigned __int16 v6;

  boost::archive::detail::basic_iarchive::get_library_version(a1, &v6);
  v5 = 0;
  boost::archive::basic_text_iprimitive<std::istream>::load<boost::serialization::collection_size_type>((_QWORD *)(a1 + 40));
  if (v6 >= 4u)
    boost::archive::basic_text_iprimitive<std::istream>::load<unsigned int>((_QWORD *)(a1 + 40));
  std::vector<pps::AxisEnum>::reserve(a2, v5);
  v4 = v5;
  boost::serialization::stl::collection_load_impl<boost::archive::text_iarchive,std::vector<pps::AxisEnum>>(a1, a2, &v4);
}

void std::vector<pps::AxisEnum>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  int v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 2)
  {
    if (a2 >> 62)
      std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pps::AxisEnum>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFFCLL];
    v9 = &v6[4 * v8];
    v10 = (char *)*a1;
    v11 = (char *)a1[1];
    v12 = v7;
    if (v11 != *a1)
    {
      v12 = v7;
      do
      {
        v13 = *((_DWORD *)v11 - 1);
        v11 -= 4;
        *((_DWORD *)v12 - 1) = v13;
        v12 -= 4;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void boost::serialization::stl::collection_load_impl<boost::archive::text_iarchive,std::vector<pps::AxisEnum>>(uint64_t a1, _QWORD *a2, unint64_t *a3)
{
  _DWORD *v6;
  _QWORD *v8;

  std::vector<pps::AxisEnum>::resize((uint64_t)a2, *a3);
  v6 = (_DWORD *)*a2;
  if ((*a3)--)
  {
    v8 = (_QWORD *)(a1 + 40);
    do
    {
      boost::archive::basic_text_iprimitive<std::istream>::load<int>(v8);
      *v6++ = 0;
    }
    while ((*a3)--);
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<pps::AxisEnum>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(4 * a2);
}

void std::vector<pps::AxisEnum>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 4 * a2;
  }
  else
  {
    std::vector<pps::AxisEnum>::__append((char **)a1, a2 - v2);
  }
}

void std::vector<pps::AxisEnum>::__append(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  int v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 2)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 4 * a2);
      v7 += 4 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 2);
    if (v10 >> 62)
      std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::__throw_length_error[abi:ne180100]();
    v11 = v9 >> 2;
    v12 = v5 - v8;
    if (v12 >> 1 > v10)
      v10 = v12 >> 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
      v13 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pps::AxisEnum>>(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[4 * v11];
    v16 = &v14[4 * v13];
    bzero(v15, 4 * a2);
    v17 = &v15[4 * a2];
    while (v7 != v8)
    {
      v18 = *((_DWORD *)v7 - 1);
      v7 -= 4;
      *((_DWORD *)v15 - 1) = v18;
      v15 -= 4;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
      operator delete(v8);
  }
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<pps::AxisEnum>>>::~singleton_wrapper(boost::archive::detail::basic_iserializer *a1)
{
  *(_QWORD *)a1 = &unk_25142B9C0;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<pps::AxisEnum>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
}

{
  *(_QWORD *)a1 = &unk_25142B9C0;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<pps::AxisEnum>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
  JUMPOUT(0x2494FECF8);
}

_QWORD *boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<pps::AxisEnum>>>::singleton_wrapper(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  void *instance;

  instance = boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<pps::AxisEnum>>>::get_instance((uint64_t)a1, a2, a3);
  boost::archive::detail::basic_iserializer::basic_iserializer(a1, (uint64_t)instance);
  *a1 = &unk_25142B9C0;
  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<pps::AxisEnum>>>::get_is_destroyed(void)::is_destroyed_flag)
    __assert_rtn("singleton_wrapper", "singleton.hpp", 148, "! is_destroyed()");
  return a1;
}

void sub_243A3285C(_Unwind_Exception *a1)
{
  boost::archive::detail::basic_iserializer *v1;

  boost::archive::detail::basic_iserializer::~basic_iserializer(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<pps::AxisEnum>>::class_info()
{
  return 1;
}

BOOL boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<pps::AxisEnum>>::tracking(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) != 0;
}

void boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<pps::AxisEnum>>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<pps::AxisEnum>>::is_polymorphic()
{
  return 0;
}

void **boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<pps::AxisEnum>>::destroy(uint64_t a1, void **a2)
{
  return boost::serialization::access::destroy<std::vector<double>>(a2);
}

void boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::map<int,std::vector<std::string>>>>::~singleton_wrapper(boost::serialization::extended_type_info *a1)
{
  *(_QWORD *)a1 = &unk_25142BA40;
  boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::map<int,std::vector<std::string>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::serialization::extended_type_info_typeid<std::map<int,std::vector<std::string>>>::~extended_type_info_typeid(a1);
}

{
  *(_QWORD *)a1 = &unk_25142BA40;
  boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::map<int,std::vector<std::string>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::serialization::extended_type_info_typeid<std::map<int,std::vector<std::string>>>::~extended_type_info_typeid(a1);
  JUMPOUT(0x2494FECF8);
}

boost::serialization::typeid_system::extended_type_info_typeid_0 *boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::map<int,std::vector<std::string>>>>::singleton_wrapper(boost::serialization::typeid_system::extended_type_info_typeid_0 *a1)
{
  *(_QWORD *)boost::serialization::extended_type_info_typeid<std::map<int,std::vector<std::string>>>::extended_type_info_typeid(a1) = &unk_25142BA40;
  if (boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::map<int,std::vector<std::string>>>>::get_is_destroyed(void)::is_destroyed_flag)
    __assert_rtn("singleton_wrapper", "singleton.hpp", 148, "! is_destroyed()");
  return a1;
}

void sub_243A32964(_Unwind_Exception *a1)
{
  boost::serialization::extended_type_info *v1;

  boost::serialization::extended_type_info_typeid<std::map<int,std::vector<std::string>>>::~extended_type_info_typeid(v1);
  _Unwind_Resume(a1);
}

boost::serialization::typeid_system::extended_type_info_typeid_0 *boost::serialization::extended_type_info_typeid<std::map<int,std::vector<std::string>>>::extended_type_info_typeid(boost::serialization::typeid_system::extended_type_info_typeid_0 *a1)
{
  boost::serialization::typeid_system::extended_type_info_typeid_0 *v2;

  v2 = (boost::serialization::typeid_system::extended_type_info_typeid_0 *)boost::serialization::typeid_system::extended_type_info_typeid_0::extended_type_info_typeid_0(a1, 0);
  *(_QWORD *)v2 = &unk_25142BAE8;
  boost::serialization::extended_type_info::key_register((uint64_t *)a1);
  return a1;
}

void sub_243A329C4(_Unwind_Exception *a1)
{
  boost::serialization::typeid_system::extended_type_info_typeid_0 *v1;

  boost::serialization::typeid_system::extended_type_info_typeid_0::~extended_type_info_typeid_0(v1);
  _Unwind_Resume(a1);
}

void boost::serialization::extended_type_info_typeid<std::map<int,std::vector<std::string>>>::~extended_type_info_typeid(boost::serialization::extended_type_info *a1)
{
  *(_QWORD *)a1 = &unk_25142BAE8;
  boost::serialization::extended_type_info::key_unregister(a1);
  boost::serialization::typeid_system::extended_type_info_typeid_0::type_unregister((uint64_t *)a1);
  boost::serialization::typeid_system::extended_type_info_typeid_0::~extended_type_info_typeid_0(a1);
}

{
  boost::serialization::extended_type_info_typeid<std::map<int,std::vector<std::string>>>::~extended_type_info_typeid(a1);
  JUMPOUT(0x2494FECF8);
}

void boost::serialization::extended_type_info_typeid<std::map<int,std::vector<std::string>>>::construct(uint64_t a1, uint64_t a2, uint64_t a3)
{
  switch((int)a2)
  {
    case 0:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct(a1, a2, a3);
    case 1:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct(a1, a2, a3);
    case 2:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct(a1, a2, a3);
    case 3:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct(a1, a2, a3);
    case 4:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct(a1, a2, a3);
    default:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct(a1, a2, a3);
  }
}

uint64_t boost::serialization::extended_type_info_typeid<std::map<int,std::vector<std::string>>>::destroy(uint64_t a1, uint64_t a2)
{
  return boost::serialization::access::destroy<std::map<int,std::vector<std::string>>>(a2);
}

uint64_t boost::serialization::access::destroy<std::map<int,std::vector<std::string>>>(uint64_t result)
{
  if (result)
  {
    std::__tree<std::__value_type<int,std::vector<std::string>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::string>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::string>>>>::destroy(result, *(char **)(result + 8));
    JUMPOUT(0x2494FECF8);
  }
  return result;
}

void boost::archive::detail::iserializer<boost::archive::text_iarchive,std::map<int,std::vector<std::string>>>::load_object_data(uint64_t a1, const void *a2, uint64_t a3)
{
  void *v4;

  v4 = boost::serialization::smart_cast_impl::reference<boost::archive::text_iarchive &>::polymorphic::cross::cast<boost::archive::detail::basic_iarchive>(a2);
  boost::serialization::load_map_collection<boost::archive::text_iarchive,std::map<int,std::vector<std::string>>>((uint64_t)v4, a3);
}

void boost::serialization::load_map_collection<boost::archive::text_iarchive,std::map<int,std::vector<std::string>>>(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  unsigned __int16 v5;
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v4 = (_QWORD *)(a2 + 8);
  std::__tree<std::__value_type<int,std::vector<std::string>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::string>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::string>>>>::destroy(a2, *(char **)(a2 + 8));
  *(_QWORD *)a2 = v4;
  *(_QWORD *)(a2 + 16) = 0;
  *v4 = 0;
  boost::archive::detail::basic_iarchive::get_library_version(a1, &v5);
  boost::archive::basic_text_iprimitive<std::istream>::load<boost::serialization::collection_size_type>((_QWORD *)(a1 + 40));
  if (v5 >= 4u)
  {
    v6 = 0;
    boost::archive::basic_text_iprimitive<std::istream>::load<unsigned int>((_QWORD *)(a1 + 40));
  }
}

void sub_243A32CA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  _Unwind_Resume(exception_object);
}

char *std::__tree<std::__value_type<int,std::vector<std::string>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::string>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::string>>>>::__emplace_hint_unique_key_args<int,std::pair<int const,std::vector<std::string>>>(uint64_t **a1, uint64_t *a2, int *a3, uint64_t a4)
{
  uint64_t *v6;
  char *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t *v11;

  v6 = std::__tree<std::__value_type<int,std::vector<std::string>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::string>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::string>>>>::__find_equal<int>(a1, a2, &v11, &v10, a3);
  v7 = (char *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (char *)operator new(0x40uLL);
    *((_DWORD *)v7 + 8) = *(_DWORD *)a4;
    *(_OWORD *)(v7 + 40) = *(_OWORD *)(a4 + 8);
    *((_QWORD *)v7 + 7) = *(_QWORD *)(a4 + 24);
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    *(_QWORD *)(a4 + 24) = 0;
    std::__tree<std::__value_type<int,std::vector<std::string>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::string>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::string>>>>::__insert_node_at(a1, (uint64_t)v11, v8, (uint64_t *)v7);
  }
  return v7;
}

uint64_t *std::__tree<std::__value_type<int,std::vector<std::string>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::string>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::string>>>>::__find_equal<int>(_QWORD *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, int *a5)
{
  uint64_t *v5;
  int v6;
  int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  BOOL v14;
  int v15;
  uint64_t v16;
  uint64_t *v17;
  int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  int v22;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = *((_DWORD *)a2 + 8), *a5 < v7))
  {
    v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (uint64_t *)*a2;
      do
      {
        v10 = v9;
        v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      v13 = a2;
      do
      {
        v10 = (uint64_t *)v13[2];
        v14 = *v10 == (_QWORD)v13;
        v13 = v10;
      }
      while (v14);
    }
    v15 = *a5;
    if (*((_DWORD *)v10 + 8) < *a5)
      goto LABEL_17;
    v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v17 = (uint64_t *)v16;
          v18 = *(_DWORD *)(v16 + 32);
          if (v15 >= v18)
            break;
          v16 = *v17;
          v5 = v17;
          if (!*v17)
            goto LABEL_29;
        }
        if (v18 >= v15)
          break;
        v5 = v17 + 1;
        v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  v11 = a2[1];
  if (v11)
  {
    v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      v14 = *a4 == (_QWORD)v19;
      v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((_DWORD *)a4 + 8))
  {
    v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v21 = (uint64_t *)v20;
          v22 = *(_DWORD *)(v20 + 32);
          if (v6 >= v22)
            break;
          v20 = *v21;
          v5 = v21;
          if (!*v21)
            goto LABEL_48;
        }
        if (v22 >= v6)
          break;
        v5 = v21 + 1;
        v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

uint64_t *std::__tree<std::__value_type<int,std::vector<std::string>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::string>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::string>>>>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t *result;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      v2 = (uint64_t *)a2[2];
      if (*((_BYTE *)v2 + 24))
        return result;
      v3 = (uint64_t *)v2[2];
      v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            v9 = (uint64_t **)a2[2];
          }
          else
          {
            v9 = (uint64_t **)v2[1];
            v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = v9;
            *v9 = v2;
            v2[2] = (uint64_t)v9;
            v3 = v9[2];
            v2 = (uint64_t *)*v3;
          }
          *((_BYTE *)v9 + 24) = 1;
          *((_BYTE *)v3 + 24) = 0;
          v13 = v2[1];
          *v3 = v13;
          if (v13)
            *(_QWORD *)(v13 + 16) = v3;
          v2[2] = v3[2];
          *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          v11 = a2[1];
          *v2 = v11;
          if (v11)
          {
            *(_QWORD *)(v11 + 16) = v2;
            v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((_BYTE *)a2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v2 = (uint64_t *)v3[1];
        v12 = *v2;
        v3[1] = *v2;
        if (v12)
          *(_QWORD *)(v12 + 16) = v3;
        v2[2] = v3[2];
        *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
        *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((_BYTE *)v2 + 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + 24) = v3 == result;
      *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

void boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::pair<int const,std::vector<std::string>>>>::~singleton_wrapper(boost::serialization::extended_type_info *a1)
{
  *(_QWORD *)a1 = &unk_25142BB40;
  boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::pair<int const,std::vector<std::string>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::serialization::extended_type_info_typeid<std::pair<int const,std::vector<std::string>>>::~extended_type_info_typeid(a1);
}

{
  *(_QWORD *)a1 = &unk_25142BB40;
  boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::pair<int const,std::vector<std::string>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::serialization::extended_type_info_typeid<std::pair<int const,std::vector<std::string>>>::~extended_type_info_typeid(a1);
  JUMPOUT(0x2494FECF8);
}

boost::serialization::typeid_system::extended_type_info_typeid_0 *boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::pair<int const,std::vector<std::string>>>>::singleton_wrapper(boost::serialization::typeid_system::extended_type_info_typeid_0 *a1)
{
  *(_QWORD *)boost::serialization::extended_type_info_typeid<std::pair<int const,std::vector<std::string>>>::extended_type_info_typeid(a1) = &unk_25142BB40;
  if (boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::pair<int const,std::vector<std::string>>>>::get_is_destroyed(void)::is_destroyed_flag)
    __assert_rtn("singleton_wrapper", "singleton.hpp", 148, "! is_destroyed()");
  return a1;
}

void sub_243A33180(_Unwind_Exception *a1)
{
  boost::serialization::extended_type_info *v1;

  boost::serialization::extended_type_info_typeid<std::pair<int const,std::vector<std::string>>>::~extended_type_info_typeid(v1);
  _Unwind_Resume(a1);
}

boost::serialization::typeid_system::extended_type_info_typeid_0 *boost::serialization::extended_type_info_typeid<std::pair<int const,std::vector<std::string>>>::extended_type_info_typeid(boost::serialization::typeid_system::extended_type_info_typeid_0 *a1)
{
  boost::serialization::typeid_system::extended_type_info_typeid_0 *v2;

  v2 = (boost::serialization::typeid_system::extended_type_info_typeid_0 *)boost::serialization::typeid_system::extended_type_info_typeid_0::extended_type_info_typeid_0(a1, 0);
  *(_QWORD *)v2 = &unk_25142BBE8;
  boost::serialization::extended_type_info::key_register((uint64_t *)a1);
  return a1;
}

void sub_243A331E0(_Unwind_Exception *a1)
{
  boost::serialization::typeid_system::extended_type_info_typeid_0 *v1;

  boost::serialization::typeid_system::extended_type_info_typeid_0::~extended_type_info_typeid_0(v1);
  _Unwind_Resume(a1);
}

void boost::serialization::extended_type_info_typeid<std::pair<int const,std::vector<std::string>>>::~extended_type_info_typeid(boost::serialization::extended_type_info *a1)
{
  *(_QWORD *)a1 = &unk_25142BBE8;
  boost::serialization::extended_type_info::key_unregister(a1);
  boost::serialization::typeid_system::extended_type_info_typeid_0::type_unregister((uint64_t *)a1);
  boost::serialization::typeid_system::extended_type_info_typeid_0::~extended_type_info_typeid_0(a1);
}

{
  boost::serialization::extended_type_info_typeid<std::pair<int const,std::vector<std::string>>>::~extended_type_info_typeid(a1);
  JUMPOUT(0x2494FECF8);
}

void boost::serialization::extended_type_info_typeid<std::pair<int const,std::vector<std::string>>>::construct(uint64_t a1, uint64_t a2, uint64_t a3)
{
  switch((int)a2)
  {
    case 0:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct(a1, a2, a3);
    case 1:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct(a1, a2, a3);
    case 2:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct(a1, a2, a3);
    case 3:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct(a1, a2, a3);
    case 4:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct(a1, a2, a3);
    default:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct(a1, a2, a3);
  }
}

uint64_t boost::serialization::extended_type_info_typeid<std::pair<int const,std::vector<std::string>>>::destroy(uint64_t a1, uint64_t a2)
{
  return boost::serialization::access::destroy<std::pair<int const,std::vector<std::string>>>(a2);
}

uint64_t boost::serialization::access::destroy<std::pair<int const,std::vector<std::string>>>(uint64_t result)
{
  uint64_t v1;
  void **v2;

  if (result)
  {
    v1 = result;
    v2 = (void **)(result + 8);
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
    return MEMORY[0x2494FECF8](v1, 0x1020C40E72D6CFBLL);
  }
  return result;
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,std::pair<int const,std::vector<std::string>>>::load_object_data(uint64_t a1, const void *a2, uint64_t a3)
{
  boost::archive::detail::basic_iarchive_impl **v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  const boost::archive::detail::basic_iserializer *instance;

  v4 = (boost::archive::detail::basic_iarchive_impl **)boost::serialization::smart_cast_impl::reference<boost::archive::text_iarchive &>::polymorphic::cross::cast<boost::archive::detail::basic_iarchive>(a2);
  v5 = boost::archive::basic_text_iprimitive<std::istream>::load<int>(v4 + 5);
  instance = (const boost::archive::detail::basic_iserializer *)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<std::string>>>::get_instance((uint64_t)v5, v6, v7);
  return boost::archive::detail::basic_iarchive::load_object(v4, a3 + 8, instance);
}

void boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::vector<std::string>>>::~singleton_wrapper(boost::serialization::extended_type_info *a1)
{
  *(_QWORD *)a1 = &unk_25142BC40;
  boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::vector<std::string>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::serialization::extended_type_info_typeid<std::vector<std::string>>::~extended_type_info_typeid(a1);
}

{
  *(_QWORD *)a1 = &unk_25142BC40;
  boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::vector<std::string>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::serialization::extended_type_info_typeid<std::vector<std::string>>::~extended_type_info_typeid(a1);
  JUMPOUT(0x2494FECF8);
}

boost::serialization::typeid_system::extended_type_info_typeid_0 *boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::vector<std::string>>>::singleton_wrapper(boost::serialization::typeid_system::extended_type_info_typeid_0 *a1)
{
  *(_QWORD *)boost::serialization::extended_type_info_typeid<std::vector<std::string>>::extended_type_info_typeid(a1) = &unk_25142BC40;
  if (boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::vector<std::string>>>::get_is_destroyed(void)::is_destroyed_flag)
    __assert_rtn("singleton_wrapper", "singleton.hpp", 148, "! is_destroyed()");
  return a1;
}

void sub_243A33410(_Unwind_Exception *a1)
{
  boost::serialization::extended_type_info *v1;

  boost::serialization::extended_type_info_typeid<std::vector<std::string>>::~extended_type_info_typeid(v1);
  _Unwind_Resume(a1);
}

boost::serialization::typeid_system::extended_type_info_typeid_0 *boost::serialization::extended_type_info_typeid<std::vector<std::string>>::extended_type_info_typeid(boost::serialization::typeid_system::extended_type_info_typeid_0 *a1)
{
  boost::serialization::typeid_system::extended_type_info_typeid_0 *v2;

  v2 = (boost::serialization::typeid_system::extended_type_info_typeid_0 *)boost::serialization::typeid_system::extended_type_info_typeid_0::extended_type_info_typeid_0(a1, 0);
  *(_QWORD *)v2 = &unk_25142BCE8;
  boost::serialization::extended_type_info::key_register((uint64_t *)a1);
  return a1;
}

void sub_243A33470(_Unwind_Exception *a1)
{
  boost::serialization::typeid_system::extended_type_info_typeid_0 *v1;

  boost::serialization::typeid_system::extended_type_info_typeid_0::~extended_type_info_typeid_0(v1);
  _Unwind_Resume(a1);
}

void boost::serialization::extended_type_info_typeid<std::vector<std::string>>::~extended_type_info_typeid(boost::serialization::extended_type_info *a1)
{
  *(_QWORD *)a1 = &unk_25142BCE8;
  boost::serialization::extended_type_info::key_unregister(a1);
  boost::serialization::typeid_system::extended_type_info_typeid_0::type_unregister((uint64_t *)a1);
  boost::serialization::typeid_system::extended_type_info_typeid_0::~extended_type_info_typeid_0(a1);
}

{
  boost::serialization::extended_type_info_typeid<std::vector<std::string>>::~extended_type_info_typeid(a1);
  JUMPOUT(0x2494FECF8);
}

void boost::serialization::extended_type_info_typeid<std::vector<std::string>>::construct(uint64_t a1, uint64_t a2, uint64_t a3)
{
  switch((int)a2)
  {
    case 0:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct(a1, a2, a3);
    case 1:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct(a1, a2, a3);
    case 2:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct(a1, a2, a3);
    case 3:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct(a1, a2, a3);
    case 4:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct(a1, a2, a3);
    default:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct(a1, a2, a3);
  }
}

void **boost::serialization::extended_type_info_typeid<std::vector<std::string>>::destroy(uint64_t a1, void **a2)
{
  return boost::serialization::access::destroy<std::vector<std::string>>(a2);
}

void **boost::serialization::access::destroy<std::vector<std::string>>(void **result)
{
  void **v1;
  void **v2;

  if (result)
  {
    v1 = result;
    v2 = result;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
    return (void **)MEMORY[0x2494FECF8](v1, 0x20C40960023A9);
  }
  return result;
}

void boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<std::string>>::load_object_data(uint64_t a1, const void *a2, std::vector<std::string> *a3)
{
  void *v4;

  v4 = boost::serialization::smart_cast_impl::reference<boost::archive::text_iarchive &>::polymorphic::cross::cast<boost::archive::detail::basic_iarchive>(a2);
  boost::serialization::free_loader<boost::archive::text_iarchive,std::vector<std::string>>::invoke((uint64_t)v4, a3);
}

void boost::serialization::free_loader<boost::archive::text_iarchive,std::vector<std::string>>::invoke(uint64_t a1, std::vector<std::string> *a2)
{
  std::vector<std::string>::size_type v4;
  std::vector<std::string>::size_type __n;
  unsigned __int16 v6;

  boost::archive::detail::basic_iarchive::get_library_version(a1, &v6);
  __n = 0;
  boost::archive::basic_text_iprimitive<std::istream>::load<boost::serialization::collection_size_type>((_QWORD *)(a1 + 40));
  if (v6 >= 4u)
    boost::archive::basic_text_iprimitive<std::istream>::load<unsigned int>((_QWORD *)(a1 + 40));
  std::vector<std::string>::reserve(a2, __n);
  v4 = __n;
  boost::serialization::stl::collection_load_impl<boost::archive::text_iarchive,std::vector<std::string>>(a1, a2, &v4);
}

void std::vector<std::string>::reserve(std::vector<std::string> *this, std::vector<std::string>::size_type __n)
{
  std::__compressed_pair<std::string *> *p_end_cap;
  std::string *value;
  int64_t v5;
  uint64_t v6;
  std::__split_buffer<std::string> __v;

  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)this->__begin_) >> 3) < __n)
  {
    if (__n >= 0xAAAAAAAAAAAAAABLL)
      std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::__throw_length_error[abi:ne180100]();
    v5 = (char *)this->__end_ - (char *)this->__begin_;
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)p_end_cap;
    __v.__first_ = (std::__split_buffer<std::string>::pointer)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)p_end_cap, __n);
    __v.__begin_ = (std::__split_buffer<std::string>::pointer)((char *)__v.__first_ + v5);
    __v.__end_ = (std::__split_buffer<std::string>::pointer)((char *)__v.__first_ + v5);
    __v.__end_cap_.__value_ = &__v.__first_[v6];
    std::vector<std::string>::__swap_out_circular_buffer(this, &__v);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
  }
}

void sub_243A3373C(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

void boost::serialization::stl::collection_load_impl<boost::archive::text_iarchive,std::vector<std::string>>(uint64_t a1, std::vector<std::string> *this, std::vector<std::string>::size_type *a3)
{
  std::string *begin;
  std::string *v8;
  std::vector<std::string>::size_type v9;

  std::vector<std::string>::resize(this, *a3);
  begin = this->__begin_;
  if ((*a3)--)
  {
    do
    {
      v8 = begin + 1;
      boost::archive::text_iarchive_impl<boost::archive::text_iarchive>::load(a1, begin);
      v9 = (*a3)--;
      begin = v8;
    }
    while (v9);
  }
}

void std::vector<std::string>::__swap_out_circular_buffer(std::vector<std::string> *this, std::__split_buffer<std::string> *__v)
{
  std::string *v4;
  std::string *begin;
  std::string *end;
  std::string *value;

  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>((uint64_t)&this->__end_cap_, (uint64_t)this->__end_, (uint64_t)this->__end_, (uint64_t)this->__begin_, (uint64_t)this->__begin_, (uint64_t)__v->__begin_, (uint64_t)__v->__begin_);
  __v->__begin_ = v4;
  begin = this->__begin_;
  this->__begin_ = v4;
  __v->__begin_ = begin;
  end = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = end;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(24 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 != a5)
  {
    v9 = a7;
    do
    {
      v10 = *(_OWORD *)(a3 - 24);
      *(_QWORD *)(v9 - 8) = *(_QWORD *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v10;
      v9 -= 24;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 8) = 0;
      *(_QWORD *)(a3 - 24) = 0;
      v7 -= 24;
      a3 -= 24;
    }
    while (a3 != a5);
    *((_QWORD *)&v15 + 1) = v9;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    v1 += 24;
  }
}

void std::__split_buffer<std::string>::~__split_buffer(std::__split_buffer<std::string> *this)
{
  std::__split_buffer<std::string>::__destruct_at_end[abi:ne180100]((uint64_t)this, (void **)&this->__begin_->__r_.__value_.__l.__data_);
  if (this->__first_)
    operator delete(this->__first_);
}

void std::__split_buffer<std::string>::__destruct_at_end[abi:ne180100](uint64_t a1, void **a2)
{
  void **v2;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      v5 = v2 - 3;
      *(_QWORD *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        v5 = *(void ***)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != a2);
  }
}

void std::vector<std::string>::resize(std::vector<std::string> *this, std::vector<std::string>::size_type __sz)
{
  std::vector<std::string>::pointer end;
  std::vector<std::string>::size_type v4;
  BOOL v5;
  std::vector<std::string>::size_type v6;
  std::string *v7;

  end = this->__end_;
  v4 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3);
  v5 = __sz >= v4;
  v6 = __sz - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::string>::__append(this, v6);
  }
  else if (!v5)
  {
    v7 = &this->__begin_[__sz];
    while (end != v7)
    {
      if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0)
        operator delete(end[-1].__r_.__value_.__l.__data_);
      --end;
    }
    this->__end_ = v7;
  }
}

void std::vector<std::string>::__append(std::vector<std::string> *this, std::vector<std::string>::size_type __n)
{
  std::__compressed_pair<std::string *> *p_end_cap;
  std::string *v5;
  std::string *value;
  std::string *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  std::string *v12;
  size_t v13;
  size_t v14;
  std::__split_buffer<std::string> __v;

  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  v5 = value;
  v7 = p_end_cap[-1].__value_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)v7) >> 3) >= __n)
  {
    if (__n)
    {
      v13 = 24 * ((24 * __n - 24) / 0x18) + 24;
      bzero(p_end_cap[-1].__value_, v13);
      v7 = (std::string *)((char *)v7 + v13);
    }
    this->__end_ = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)v7 - (char *)this->__begin_) >> 3);
    v9 = v8 + __n;
    if (v8 + __n > 0xAAAAAAAAAAAAAAALL)
      std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (char *)this->__begin_) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)p_end_cap;
    if (v11)
      v12 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)p_end_cap, v11);
    else
      v12 = 0;
    __v.__first_ = v12;
    __v.__begin_ = v12 + v8;
    __v.__end_cap_.__value_ = &v12[v11];
    v14 = 24 * ((24 * __n - 24) / 0x18) + 24;
    bzero(__v.__begin_, v14);
    __v.__end_ = (std::__split_buffer<std::string>::pointer)((char *)__v.__begin_ + v14);
    std::vector<std::string>::__swap_out_circular_buffer(this, &__v);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
  }
}

void sub_243A33BEC(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<std::string>>>::~singleton_wrapper(boost::archive::detail::basic_iserializer *a1)
{
  *(_QWORD *)a1 = &unk_25142BD40;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<std::string>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
}

{
  *(_QWORD *)a1 = &unk_25142BD40;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<std::string>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
  JUMPOUT(0x2494FECF8);
}

_QWORD *boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<std::string>>>::singleton_wrapper(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  void *instance;

  instance = boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<std::string>>>::get_instance((uint64_t)a1, a2, a3);
  boost::archive::detail::basic_iserializer::basic_iserializer(a1, (uint64_t)instance);
  *a1 = &unk_25142BD40;
  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<std::string>>>::get_is_destroyed(void)::is_destroyed_flag)
    __assert_rtn("singleton_wrapper", "singleton.hpp", 148, "! is_destroyed()");
  return a1;
}

void sub_243A33C90(_Unwind_Exception *a1)
{
  boost::archive::detail::basic_iserializer *v1;

  boost::archive::detail::basic_iserializer::~basic_iserializer(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<std::string>>::class_info()
{
  return 1;
}

BOOL boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<std::string>>::tracking(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) != 0;
}

void boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<std::string>>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<std::string>>::is_polymorphic()
{
  return 0;
}

void **boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<std::string>>::destroy(uint64_t a1, void **a2)
{
  return boost::serialization::access::destroy<std::vector<std::string>>(a2);
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::pair<int const,std::vector<std::string>>>>::~singleton_wrapper(boost::archive::detail::basic_iserializer *a1)
{
  *(_QWORD *)a1 = &unk_25142BDC0;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::pair<int const,std::vector<std::string>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
}

{
  *(_QWORD *)a1 = &unk_25142BDC0;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::pair<int const,std::vector<std::string>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
  JUMPOUT(0x2494FECF8);
}

_QWORD *boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::pair<int const,std::vector<std::string>>>>::singleton_wrapper(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  void *instance;

  instance = boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::pair<int const,std::vector<std::string>>>>::get_instance((uint64_t)a1, a2, a3);
  boost::archive::detail::basic_iserializer::basic_iserializer(a1, (uint64_t)instance);
  *a1 = &unk_25142BDC0;
  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::pair<int const,std::vector<std::string>>>>::get_is_destroyed(void)::is_destroyed_flag)
    __assert_rtn("singleton_wrapper", "singleton.hpp", 148, "! is_destroyed()");
  return a1;
}

void sub_243A33DA4(_Unwind_Exception *a1)
{
  boost::archive::detail::basic_iserializer *v1;

  boost::archive::detail::basic_iserializer::~basic_iserializer(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,std::pair<int const,std::vector<std::string>>>::class_info()
{
  return 1;
}

BOOL boost::archive::detail::iserializer<boost::archive::text_iarchive,std::pair<int const,std::vector<std::string>>>::tracking(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) != 0;
}

void boost::archive::detail::iserializer<boost::archive::text_iarchive,std::pair<int const,std::vector<std::string>>>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,std::pair<int const,std::vector<std::string>>>::is_polymorphic()
{
  return 0;
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,std::pair<int const,std::vector<std::string>>>::destroy(uint64_t a1, uint64_t a2)
{
  return boost::serialization::access::destroy<std::pair<int const,std::vector<std::string>>>(a2);
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::map<int,std::vector<std::string>>>>::~singleton_wrapper(boost::archive::detail::basic_iserializer *a1)
{
  *(_QWORD *)a1 = &unk_25142BE40;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::map<int,std::vector<std::string>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
}

{
  *(_QWORD *)a1 = &unk_25142BE40;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::map<int,std::vector<std::string>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
  JUMPOUT(0x2494FECF8);
}

_QWORD *boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::map<int,std::vector<std::string>>>>::singleton_wrapper(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  void *instance;

  instance = boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::map<int,std::vector<std::string>>>>::get_instance((uint64_t)a1, a2, a3);
  boost::archive::detail::basic_iserializer::basic_iserializer(a1, (uint64_t)instance);
  *a1 = &unk_25142BE40;
  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::map<int,std::vector<std::string>>>>::get_is_destroyed(void)::is_destroyed_flag)
    __assert_rtn("singleton_wrapper", "singleton.hpp", 148, "! is_destroyed()");
  return a1;
}

void sub_243A33EB8(_Unwind_Exception *a1)
{
  boost::archive::detail::basic_iserializer *v1;

  boost::archive::detail::basic_iserializer::~basic_iserializer(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,std::map<int,std::vector<std::string>>>::class_info()
{
  return 1;
}

BOOL boost::archive::detail::iserializer<boost::archive::text_iarchive,std::map<int,std::vector<std::string>>>::tracking(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) != 0;
}

void boost::archive::detail::iserializer<boost::archive::text_iarchive,std::map<int,std::vector<std::string>>>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,std::map<int,std::vector<std::string>>>::is_polymorphic()
{
  return 0;
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,std::map<int,std::vector<std::string>>>::destroy(uint64_t a1, uint64_t a2)
{
  return boost::serialization::access::destroy<std::map<int,std::vector<std::string>>>(a2);
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,pps::Histogram_Internal>>::~singleton_wrapper(boost::archive::detail::basic_iserializer *a1)
{
  *(_QWORD *)a1 = &unk_25142BEC0;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,pps::Histogram_Internal>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
}

{
  *(_QWORD *)a1 = &unk_25142BEC0;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,pps::Histogram_Internal>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
  JUMPOUT(0x2494FECF8);
}

_QWORD *boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,pps::Histogram_Internal>>::singleton_wrapper(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  void *instance;

  instance = boost::serialization::singleton<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::get_instance((uint64_t)a1, a2, a3);
  boost::archive::detail::basic_iserializer::basic_iserializer(a1, (uint64_t)instance);
  *a1 = &unk_25142BEC0;
  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,pps::Histogram_Internal>>::get_is_destroyed(void)::is_destroyed_flag)
    __assert_rtn("singleton_wrapper", "singleton.hpp", 148, "! is_destroyed()");
  return a1;
}

void sub_243A33FCC(_Unwind_Exception *a1)
{
  boost::archive::detail::basic_iserializer *v1;

  boost::archive::detail::basic_iserializer::~basic_iserializer(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,pps::Histogram_Internal>::class_info()
{
  return 1;
}

BOOL boost::archive::detail::iserializer<boost::archive::text_iarchive,pps::Histogram_Internal>::tracking(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) != 0;
}

void boost::archive::detail::iserializer<boost::archive::text_iarchive,pps::Histogram_Internal>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,pps::Histogram_Internal>::is_polymorphic()
{
  return 1;
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,pps::Histogram_Internal>::destroy(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 8))(a2);
  return result;
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,pps::Histogram_Internal>::save_object_data(uint64_t a1, const void *a2, uint64_t a3)
{
  boost::archive::detail::basic_oarchive_impl **v5;
  uint64_t v7;

  v5 = (boost::archive::detail::basic_oarchive_impl **)boost::serialization::smart_cast_impl::reference<boost::archive::text_oarchive &>::polymorphic::cross::cast<boost::archive::detail::basic_oarchive>(a2);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 40))(&v7, a1);
  return pps::Histogram_Internal::serialize<boost::archive::text_oarchive>(a3, v5, v7);
}

uint64_t pps::Histogram_Internal::serialize<boost::archive::text_oarchive>(uint64_t a1, boost::archive::detail::basic_oarchive_impl **a2, uint64_t a3)
{
  unint64_t v5;
  const boost::archive::detail::basic_oserializer *instance;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const boost::archive::detail::basic_oserializer *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const boost::archive::detail::basic_oserializer *v14;

  v5 = a1 + 8;
  instance = (const boost::archive::detail::basic_oserializer *)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>>::get_instance(a1, (uint64_t)a2, a3);
  v7 = boost::archive::detail::basic_oarchive::save_object(a2, v5, instance);
  v10 = (const boost::archive::detail::basic_oserializer *)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<pps::AxisEnum>>>::get_instance(v7, v8, v9);
  v11 = boost::archive::detail::basic_oarchive::save_object(a2, a1 + 64, v10);
  v14 = (const boost::archive::detail::basic_oserializer *)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::map<int,std::vector<std::string>>>>::get_instance(v11, v12, v13);
  return boost::archive::detail::basic_oarchive::save_object(a2, a1 + 88, v14);
}

void *boost::serialization::smart_cast_impl::reference<boost::archive::text_oarchive &>::polymorphic::cross::cast<boost::archive::detail::basic_oarchive>(const void *a1)
{
  void *result;

  if (!result)
    __cxa_bad_cast();
  return result;
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>::save_object_data(uint64_t a1, const void *a2, unint64_t a3)
{
  boost::archive::detail::basic_oarchive_impl **v5;
  uint64_t v7;

  v5 = (boost::archive::detail::basic_oarchive_impl **)boost::serialization::smart_cast_impl::reference<boost::archive::text_oarchive &>::polymorphic::cross::cast<boost::archive::detail::basic_oarchive>(a2);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 40))(&v7, a1);
  return boost::histogram::serialize<boost::archive::text_oarchive,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>(v5, a3, v7);
}

uint64_t boost::histogram::serialize<boost::archive::text_oarchive,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>(boost::archive::detail::basic_oarchive_impl **a1, unint64_t a2, uint64_t a3)
{
  const boost::archive::detail::basic_oserializer *instance;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const boost::archive::detail::basic_oserializer *v9;

  instance = (const boost::archive::detail::basic_oserializer *)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>>::get_instance((uint64_t)a1, a2, a3);
  v6 = boost::archive::detail::basic_oarchive::save_object(a1, a2, instance);
  v9 = (const boost::archive::detail::basic_oserializer *)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::unlimited_storage<std::allocator<char>>>>::get_instance(v6, v7, v8);
  return boost::archive::detail::basic_oarchive::save_object(a1, a2 + 24, v9);
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::save_object_data(uint64_t a1, const void *a2, unint64_t *a3)
{
  boost::archive::detail::basic_oarchive *v5;
  uint64_t v7;

  v5 = (boost::archive::detail::basic_oarchive *)boost::serialization::smart_cast_impl::reference<boost::archive::text_oarchive &>::polymorphic::cross::cast<boost::archive::detail::basic_oarchive>(a2);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 40))(&v7, a1);
  return boost::serialization::free_saver<boost::archive::text_oarchive,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::invoke(v5, a3);
}

uint64_t boost::serialization::free_saver<boost::archive::text_oarchive,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::invoke(boost::archive::detail::basic_oarchive *a1, unint64_t *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  const boost::archive::detail::basic_oserializer *instance;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v11 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a2[1] - *a2) >> 3);
  boost::archive::save_access::save_primitive<boost::archive::text_oarchive,boost::serialization::collection_size_type>(a1);
  result = boost::archive::save_access::save_primitive<boost::archive::text_oarchive,boost::archive::version_type>(a1);
  v7 = *a2;
  v8 = v11;
  v12 = v11 - 1;
  if (v8)
  {
    do
    {
      instance = (const boost::archive::detail::basic_oserializer *)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::get_instance(result, v5, v6);
      result = boost::archive::detail::basic_oarchive::save_object((boost::archive::detail::basic_oarchive_impl **)a1, v7, instance);
      v10 = v12--;
      v7 += 56;
    }
    while (v10);
  }
  return result;
}

uint64_t boost::archive::save_access::save_primitive<boost::archive::text_oarchive,boost::serialization::collection_size_type>(boost::archive::detail::basic_oarchive *a1)
{
  boost::archive::detail::basic_oarchive::end_preamble(a1);
  boost::archive::basic_text_oarchive<boost::archive::text_oarchive>::newtoken((uint64_t)a1);
  return boost::archive::basic_text_oprimitive<std::ostream>::save_impl<boost::serialization::collection_size_type>((_QWORD *)a1 + 6);
}

uint64_t boost::archive::basic_text_oprimitive<std::ostream>::save_impl<boost::serialization::collection_size_type>(_QWORD *a1)
{
  _BYTE v2[144];
  uint64_t v3;

  v3 = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(*a1 + *(_QWORD *)(*(_QWORD *)*a1 - 24) + 32) & 5) != 0)
  {
    boost::archive::archive_exception::archive_exception((uint64_t)v2, 13, 0, 0);
    boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v2);
  }
  return std::ostream::operator<<();
}

void sub_243A343E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  boost::archive::archive_exception::~archive_exception(&a10);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::save_object_data(uint64_t a1, const void *a2, unint64_t a3)
{
  boost::archive::detail::basic_oarchive_impl **v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  const boost::archive::detail::basic_oserializer *instance;
  uint64_t v11;

  v5 = (boost::archive::detail::basic_oarchive_impl **)boost::serialization::smart_cast_impl::reference<boost::archive::text_oarchive &>::polymorphic::cross::cast<boost::archive::detail::basic_oarchive>(a2);
  v6 = (*(_QWORD *(**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 40))(&v11, a1);
  instance = (const boost::archive::detail::basic_oserializer *)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::get_instance((uint64_t)v6, v7, v8);
  return boost::archive::detail::basic_oarchive::save_object(v5, a3, instance);
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::save_object_data(uint64_t a1, const void *a2, int *a3)
{
  boost::archive::detail::basic_oarchive *v5;
  uint64_t v6;
  char v8[4];
  boost::archive::detail::basic_oarchive_impl **v9;
  int v10;

  v5 = (boost::archive::detail::basic_oarchive *)boost::serialization::smart_cast_impl::reference<boost::archive::text_oarchive &>::polymorphic::cross::cast<boost::archive::detail::basic_oarchive>(a2);
  (*(void (**)(char *__return_ptr, uint64_t))(*(_QWORD *)a1 + 40))(v8, a1);
  v10 = *a3 ^ (*a3 >> 31);
  boost::archive::save_access::save_primitive<boost::archive::text_oarchive,int>(v5);
  v9 = (boost::archive::detail::basic_oarchive_impl **)v5;
  return boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::apply_visitor<boost::serialization::variant_save_visitor<boost::archive::text_oarchive>>(a3, &v9, v6);
}

uint64_t boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::apply_visitor<boost::serialization::variant_save_visitor<boost::archive::text_oarchive>>(int *a1, boost::archive::detail::basic_oarchive_impl ***a2, uint64_t a3)
{
  unint64_t v3;
  boost::archive::detail::basic_oarchive_impl **v4;
  const boost::archive::detail::basic_oserializer *instance;

  v3 = (unint64_t)(a1 + 2);
  switch(*a1 ^ (*a1 >> 31))
  {
    case 0:
      v4 = *a2;
      instance = (const boost::archive::detail::basic_oserializer *)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>>::get_instance((uint64_t)a1, (uint64_t)a2, a3);
      break;
    case 1:
      v4 = *a2;
      instance = (const boost::archive::detail::basic_oserializer *)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>>::get_instance((uint64_t)a1, (uint64_t)a2, a3);
      break;
    case 2:
      v4 = *a2;
      instance = (const boost::archive::detail::basic_oserializer *)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::get_instance((uint64_t)a1, (uint64_t)a2, a3);
      break;
    default:
      boost::detail::variant::forced_return<void>();
  }
  return boost::archive::detail::basic_oarchive::save_object(v4, v3, instance);
}

uint64_t boost::archive::save_access::save_primitive<boost::archive::text_oarchive,int>(boost::archive::detail::basic_oarchive *a1)
{
  boost::archive::detail::basic_oarchive::end_preamble(a1);
  boost::archive::basic_text_oarchive<boost::archive::text_oarchive>::newtoken((uint64_t)a1);
  return boost::archive::basic_text_oprimitive<std::ostream>::save_impl<int>((_QWORD *)a1 + 6);
}

uint64_t boost::archive::basic_text_oprimitive<std::ostream>::save_impl<int>(_QWORD *a1)
{
  _BYTE v2[144];
  uint64_t v3;

  v3 = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(*a1 + *(_QWORD *)(*(_QWORD *)*a1 - 24) + 32) & 5) != 0)
  {
    boost::archive::archive_exception::archive_exception((uint64_t)v2, 13, 0, 0);
    boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v2);
  }
  return std::ostream::operator<<();
}

void sub_243A3461C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  boost::archive::archive_exception::~archive_exception(&a10);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>::save_object_data(uint64_t a1, const void *a2, unint64_t a3)
{
  boost::archive::detail::basic_oarchive_impl **v5;
  uint64_t v7;

  v5 = (boost::archive::detail::basic_oarchive_impl **)boost::serialization::smart_cast_impl::reference<boost::archive::text_oarchive &>::polymorphic::cross::cast<boost::archive::detail::basic_oarchive>(a2);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 40))(&v7, a1);
  return boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>::serialize<boost::archive::text_oarchive>(a3, v5, v7);
}

uint64_t boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>::serialize<boost::archive::text_oarchive>(unint64_t a1, boost::archive::detail::basic_oarchive_impl **a2, uint64_t a3)
{
  const boost::archive::detail::basic_oserializer *instance;

  instance = (const boost::archive::detail::basic_oserializer *)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::transform::id>>::get_instance(a1, (uint64_t)a2, a3);
  boost::archive::detail::basic_oarchive::save_object(a2, a1, instance);
  boost::archive::save_access::save_primitive<boost::archive::text_oarchive,int>((boost::archive::detail::basic_oarchive *)a2);
  boost::archive::detail::basic_oarchive::end_preamble((boost::archive::detail::basic_oarchive *)a2);
  boost::archive::text_oarchive_impl<boost::archive::text_oarchive>::save((boost::archive::detail::basic_oarchive *)a2, a1 + 8);
  boost::archive::save_access::save_primitive<boost::archive::text_oarchive,double>((uint64_t **)a2);
  return boost::archive::save_access::save_primitive<boost::archive::text_oarchive,double>((uint64_t **)a2);
}

uint64_t boost::archive::save_access::save_primitive<boost::archive::text_oarchive,double>(uint64_t **a1)
{
  boost::archive::detail::basic_oarchive::end_preamble((boost::archive::detail::basic_oarchive *)a1);
  boost::archive::basic_text_oarchive<boost::archive::text_oarchive>::newtoken((uint64_t)a1);
  return boost::archive::basic_text_oprimitive<std::ostream>::save_impl<double>(a1 + 6);
}

uint64_t boost::archive::basic_text_oprimitive<std::ostream>::save_impl<double>(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t v2;
  char *v3;
  _BYTE v5[144];
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  v1 = *a1;
  v2 = *v1;
  v3 = (char *)v1 + *(_QWORD *)(*v1 - 24);
  if ((v3[32] & 5) != 0)
  {
    boost::archive::archive_exception::archive_exception((uint64_t)v5, 13, 0, 0);
    boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v5);
  }
  *((_QWORD *)v3 + 2) = 17;
  *(_DWORD *)((char *)v1 + *(_QWORD *)(v2 - 24) + 8) = *(_DWORD *)((_BYTE *)v1 + *(_QWORD *)(v2 - 24) + 8) & 0xFFFFFEFB | 0x100;
  return std::ostream::operator<<();
}

void sub_243A347F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  boost::archive::archive_exception::~archive_exception(&a10);
  _Unwind_Resume(a1);
}

_QWORD *boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::transform::id>::save_object_data(uint64_t a1, const void *a2)
{
  uint64_t v4;

  boost::serialization::smart_cast_impl::reference<boost::archive::text_oarchive &>::polymorphic::cross::cast<boost::archive::detail::basic_oarchive>(a2);
  return (*(_QWORD *(**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 40))(&v4, a1);
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::transform::id>>::~singleton_wrapper(boost::archive::detail::basic_oserializer *a1)
{
  *(_QWORD *)a1 = &unk_25142BF40;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::transform::id>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
}

{
  *(_QWORD *)a1 = &unk_25142BF40;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::transform::id>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
  JUMPOUT(0x2494FECF8);
}

_QWORD *boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::transform::id>>::singleton_wrapper(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  void *instance;

  instance = boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::histogram::axis::transform::id>>::get_instance((uint64_t)a1, a2, a3);
  boost::archive::detail::basic_oserializer::basic_oserializer(a1, (uint64_t)instance);
  *a1 = &unk_25142BF40;
  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::transform::id>>::get_is_destroyed(void)::is_destroyed_flag)
    __assert_rtn("singleton_wrapper", "singleton.hpp", 148, "! is_destroyed()");
  return a1;
}

void sub_243A348DC(_Unwind_Exception *a1)
{
  boost::archive::detail::basic_oserializer *v1;

  boost::archive::detail::basic_oserializer::~basic_oserializer(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::transform::id>::class_info()
{
  return 1;
}

BOOL boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::transform::id>::tracking(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) != 0;
}

void boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::transform::id>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::transform::id>::is_polymorphic()
{
  return 0;
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>>::~singleton_wrapper(boost::archive::detail::basic_oserializer *a1)
{
  *(_QWORD *)a1 = &unk_25142BFB8;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
}

{
  *(_QWORD *)a1 = &unk_25142BFB8;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
  JUMPOUT(0x2494FECF8);
}

_QWORD *boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>>::singleton_wrapper(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  void *instance;

  instance = boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>>::get_instance((uint64_t)a1, a2, a3);
  boost::archive::detail::basic_oserializer::basic_oserializer(a1, (uint64_t)instance);
  *a1 = &unk_25142BFB8;
  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>>::get_is_destroyed(void)::is_destroyed_flag)
    __assert_rtn("singleton_wrapper", "singleton.hpp", 148, "! is_destroyed()");
  return a1;
}

void sub_243A349E8(_Unwind_Exception *a1)
{
  boost::archive::detail::basic_oserializer *v1;

  boost::archive::detail::basic_oserializer::~basic_oserializer(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>::class_info()
{
  return 1;
}

BOOL boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>::tracking(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) != 0;
}

void boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>::is_polymorphic()
{
  return 0;
}

_QWORD *boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>::save_object_data(uint64_t a1, const void *a2, unint64_t a3)
{
  boost::archive::detail::basic_oarchive_impl **v5;
  uint64_t v7;

  v5 = (boost::archive::detail::basic_oarchive_impl **)boost::serialization::smart_cast_impl::reference<boost::archive::text_oarchive &>::polymorphic::cross::cast<boost::archive::detail::basic_oarchive>(a2);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 40))(&v7, a1);
  return boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>::serialize<boost::archive::text_oarchive>(a3, v5, v7);
}

_QWORD *boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>::serialize<boost::archive::text_oarchive>(unint64_t a1, boost::archive::detail::basic_oarchive_impl **a2, uint64_t a3)
{
  const boost::archive::detail::basic_oserializer *instance;

  instance = (const boost::archive::detail::basic_oserializer *)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<double>>>::get_instance(a1, (uint64_t)a2, a3);
  boost::archive::detail::basic_oarchive::save_object(a2, a1, instance);
  boost::archive::detail::basic_oarchive::end_preamble((boost::archive::detail::basic_oarchive *)a2);
  return boost::archive::text_oarchive_impl<boost::archive::text_oarchive>::save((boost::archive::detail::basic_oarchive *)a2, a1 + 24);
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<double>>::save_object_data(uint64_t a1, const void *a2, uint64_t *a3)
{
  boost::archive::detail::basic_oarchive *v5;
  uint64_t v7;

  v5 = (boost::archive::detail::basic_oarchive *)boost::serialization::smart_cast_impl::reference<boost::archive::text_oarchive &>::polymorphic::cross::cast<boost::archive::detail::basic_oarchive>(a2);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 40))(&v7, a1);
  return boost::serialization::free_saver<boost::archive::text_oarchive,std::vector<double>>::invoke(v5, a3);
}

uint64_t boost::serialization::free_saver<boost::archive::text_oarchive,std::vector<double>>::invoke(boost::archive::detail::basic_oarchive *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v9 = (a2[1] - *a2) >> 3;
  boost::archive::save_access::save_primitive<boost::archive::text_oarchive,boost::serialization::collection_size_type>(a1);
  result = boost::archive::save_access::save_primitive<boost::archive::text_oarchive,boost::archive::version_type>(a1);
  v5 = *a2;
  v6 = v9;
  v10 = v9 - 1;
  if (v6)
  {
    do
    {
      v7 = v5 + 8;
      result = boost::archive::save_access::save_primitive<boost::archive::text_oarchive,double>((uint64_t **)a1);
      v8 = v10--;
      v5 = v7;
    }
    while (v8);
  }
  return result;
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<double>>>::~singleton_wrapper(boost::archive::detail::basic_oserializer *a1)
{
  *(_QWORD *)a1 = &unk_25142C030;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<double>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
}

{
  *(_QWORD *)a1 = &unk_25142C030;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<double>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
  JUMPOUT(0x2494FECF8);
}

_QWORD *boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<double>>>::singleton_wrapper(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  void *instance;

  instance = boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<double>>>::get_instance((uint64_t)a1, a2, a3);
  boost::archive::detail::basic_oserializer::basic_oserializer(a1, (uint64_t)instance);
  *a1 = &unk_25142C030;
  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<double>>>::get_is_destroyed(void)::is_destroyed_flag)
    __assert_rtn("singleton_wrapper", "singleton.hpp", 148, "! is_destroyed()");
  return a1;
}

void sub_243A34C80(_Unwind_Exception *a1)
{
  boost::archive::detail::basic_oserializer *v1;

  boost::archive::detail::basic_oserializer::~basic_oserializer(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<double>>::class_info()
{
  return 0;
}

BOOL boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<double>>::tracking(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) != 0;
}

void boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<double>>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<double>>::is_polymorphic()
{
  return 0;
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>>::~singleton_wrapper(boost::archive::detail::basic_oserializer *a1)
{
  *(_QWORD *)a1 = &unk_25142C0A8;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
}

{
  *(_QWORD *)a1 = &unk_25142C0A8;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
  JUMPOUT(0x2494FECF8);
}

_QWORD *boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>>::singleton_wrapper(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  void *instance;

  instance = boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>>::get_instance((uint64_t)a1, a2, a3);
  boost::archive::detail::basic_oserializer::basic_oserializer(a1, (uint64_t)instance);
  *a1 = &unk_25142C0A8;
  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>>::get_is_destroyed(void)::is_destroyed_flag)
    __assert_rtn("singleton_wrapper", "singleton.hpp", 148, "! is_destroyed()");
  return a1;
}

void sub_243A34D8C(_Unwind_Exception *a1)
{
  boost::archive::detail::basic_oserializer *v1;

  boost::archive::detail::basic_oserializer::~basic_oserializer(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>::class_info()
{
  return 1;
}

BOOL boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>::tracking(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) != 0;
}

void boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>::is_polymorphic()
{
  return 0;
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::save_object_data(uint64_t a1, const void *a2, uint64_t a3)
{
  boost::archive::detail::basic_oarchive *v5;
  uint64_t v7;

  v5 = (boost::archive::detail::basic_oarchive *)boost::serialization::smart_cast_impl::reference<boost::archive::text_oarchive &>::polymorphic::cross::cast<boost::archive::detail::basic_oarchive>(a2);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 40))(&v7, a1);
  return boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>::serialize<boost::archive::text_oarchive>(a3, v5);
}

uint64_t boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>::serialize<boost::archive::text_oarchive>(uint64_t a1, boost::archive::detail::basic_oarchive *a2)
{
  boost::archive::save_access::save_primitive<boost::archive::text_oarchive,int>(a2);
  boost::archive::detail::basic_oarchive::end_preamble(a2);
  boost::archive::text_oarchive_impl<boost::archive::text_oarchive>::save(a2, a1 + 8);
  return boost::archive::save_access::save_primitive<boost::archive::text_oarchive,int>(a2);
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::~singleton_wrapper(boost::archive::detail::basic_oserializer *a1)
{
  *(_QWORD *)a1 = &unk_25142C120;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
}

{
  *(_QWORD *)a1 = &unk_25142C120;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
  JUMPOUT(0x2494FECF8);
}

_QWORD *boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::singleton_wrapper(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  void *instance;

  instance = boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::get_instance((uint64_t)a1, a2, a3);
  boost::archive::detail::basic_oserializer::basic_oserializer(a1, (uint64_t)instance);
  *a1 = &unk_25142C120;
  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::get_is_destroyed(void)::is_destroyed_flag)
    __assert_rtn("singleton_wrapper", "singleton.hpp", 148, "! is_destroyed()");
  return a1;
}

void sub_243A34F4C(_Unwind_Exception *a1)
{
  boost::archive::detail::basic_oserializer *v1;

  boost::archive::detail::basic_oserializer::~basic_oserializer(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::class_info()
{
  return 1;
}

BOOL boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::tracking(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) != 0;
}

void boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::is_polymorphic()
{
  return 0;
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::~singleton_wrapper(boost::archive::detail::basic_oserializer *a1)
{
  *(_QWORD *)a1 = &unk_25142C198;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
}

{
  *(_QWORD *)a1 = &unk_25142C198;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
  JUMPOUT(0x2494FECF8);
}

_QWORD *boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::singleton_wrapper(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  void *instance;

  instance = boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::get_instance((uint64_t)a1, a2, a3);
  boost::archive::detail::basic_oserializer::basic_oserializer(a1, (uint64_t)instance);
  *a1 = &unk_25142C198;
  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::get_is_destroyed(void)::is_destroyed_flag)
    __assert_rtn("singleton_wrapper", "singleton.hpp", 148, "! is_destroyed()");
  return a1;
}

void sub_243A35058(_Unwind_Exception *a1)
{
  boost::archive::detail::basic_oserializer *v1;

  boost::archive::detail::basic_oserializer::~basic_oserializer(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::class_info()
{
  return 1;
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::tracking()
{
  return 1;
}

void boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::is_polymorphic()
{
  return 0;
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::~singleton_wrapper(boost::archive::detail::basic_oserializer *a1)
{
  *(_QWORD *)a1 = &unk_25142C210;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
}

{
  *(_QWORD *)a1 = &unk_25142C210;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
  JUMPOUT(0x2494FECF8);
}

_QWORD *boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::singleton_wrapper(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  void *instance;

  instance = boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::get_instance((uint64_t)a1, a2, a3);
  boost::archive::detail::basic_oserializer::basic_oserializer(a1, (uint64_t)instance);
  *a1 = &unk_25142C210;
  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::get_is_destroyed(void)::is_destroyed_flag)
    __assert_rtn("singleton_wrapper", "singleton.hpp", 148, "! is_destroyed()");
  return a1;
}

void sub_243A3515C(_Unwind_Exception *a1)
{
  boost::archive::detail::basic_oserializer *v1;

  boost::archive::detail::basic_oserializer::~basic_oserializer(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::class_info()
{
  return 1;
}

BOOL boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::tracking(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) != 0;
}

void boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::is_polymorphic()
{
  return 0;
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>>::~singleton_wrapper(boost::archive::detail::basic_oserializer *a1)
{
  *(_QWORD *)a1 = &unk_25142C288;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
}

{
  *(_QWORD *)a1 = &unk_25142C288;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
  JUMPOUT(0x2494FECF8);
}

_QWORD *boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>>::singleton_wrapper(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  void *instance;

  instance = boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>>::get_instance((uint64_t)a1, a2, a3);
  boost::archive::detail::basic_oserializer::basic_oserializer(a1, (uint64_t)instance);
  *a1 = &unk_25142C288;
  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>>::get_is_destroyed(void)::is_destroyed_flag)
    __assert_rtn("singleton_wrapper", "singleton.hpp", 148, "! is_destroyed()");
  return a1;
}

void sub_243A35268(_Unwind_Exception *a1)
{
  boost::archive::detail::basic_oserializer *v1;

  boost::archive::detail::basic_oserializer::~basic_oserializer(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::class_info()
{
  return 1;
}

BOOL boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::tracking(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) != 0;
}

void boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::is_polymorphic()
{
  return 0;
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::unlimited_storage<std::allocator<char>>>::save_object_data(uint64_t a1, const void *a2, uint64_t a3)
{
  boost::archive::detail::basic_oarchive *v5;
  uint64_t v7;

  v5 = (boost::archive::detail::basic_oarchive *)boost::serialization::smart_cast_impl::reference<boost::archive::text_oarchive &>::polymorphic::cross::cast<boost::archive::detail::basic_oarchive>(a2);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 40))(&v7, a1);
  return boost::histogram::unlimited_storage<std::allocator<char>>::serialize<boost::archive::text_oarchive>(a3, v5);
}

uint64_t boost::histogram::unlimited_storage<std::allocator<char>>::serialize<boost::archive::text_oarchive>(uint64_t a1, boost::archive::detail::basic_oarchive *a2)
{
  _QWORD v5[2];

  boost::archive::save_access::save_primitive<boost::archive::text_oarchive,char>(a2);
  boost::archive::save_access::save_primitive<boost::archive::text_oarchive,unsigned long>(a2);
  v5[0] = a1;
  v5[1] = a2;
  return boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::apply<void boost::histogram::unlimited_storage<std::allocator<char>>::serialize<boost::archive::text_oarchive>(boost::archive::text_oarchive &,unsigned int)::{lambda(boost::archive::text_oarchive*)#2}>(a1, v5);
}

uint64_t boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::apply<void boost::histogram::unlimited_storage<std::allocator<char>>::serialize<boost::archive::text_oarchive>(boost::archive::text_oarchive &,unsigned int)::{lambda(boost::archive::text_oarchive*)#2}>(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  boost::archive::detail::basic_oarchive *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  boost::archive::detail::basic_oarchive *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  boost::archive::detail::basic_oarchive *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  boost::archive::detail::basic_oarchive *v19;
  uint64_t v20;
  uint64_t v21;
  boost::archive::detail::basic_oarchive_impl **v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26[2];

  switch(*(_BYTE *)(result + 16))
  {
    case 0:
      v2 = *(_QWORD *)(*a2 + 8);
      if (v2)
      {
        v3 = (boost::archive::detail::basic_oarchive *)a2[1];
        v4 = *(_QWORD *)(*a2 + 24);
        do
        {
          --v2;
          v5 = v4 + 1;
          result = boost::archive::save_access::save_primitive<boost::archive::text_oarchive,unsigned char>(v3);
          v4 = v5;
        }
        while (v2);
      }
      break;
    case 1:
      v10 = *(_QWORD *)(*a2 + 8);
      if (v10)
      {
        v11 = (boost::archive::detail::basic_oarchive *)a2[1];
        v12 = *(_QWORD *)(*a2 + 24);
        do
        {
          --v10;
          v13 = v12 + 2;
          result = boost::archive::save_access::save_primitive<boost::archive::text_oarchive,unsigned short>(v11);
          v12 = v13;
        }
        while (v10);
      }
      break;
    case 2:
      v14 = *(_QWORD *)(*a2 + 8);
      if (v14)
      {
        v15 = (boost::archive::detail::basic_oarchive *)a2[1];
        v16 = *(_QWORD *)(*a2 + 24);
        do
        {
          --v14;
          v17 = v16 + 4;
          result = boost::archive::save_access::save_primitive<boost::archive::text_oarchive,unsigned int>(v15);
          v16 = v17;
        }
        while (v14);
      }
      break;
    case 3:
      v18 = *(_QWORD *)(*a2 + 8);
      if (v18)
      {
        v19 = (boost::archive::detail::basic_oarchive *)a2[1];
        v20 = *(_QWORD *)(*a2 + 24);
        do
        {
          --v18;
          v21 = v20 + 8;
          result = boost::archive::save_access::save_primitive<boost::archive::text_oarchive,unsigned long long>(v19);
          v20 = v21;
        }
        while (v18);
      }
      break;
    case 4:
      v23 = *a2;
      v22 = (boost::archive::detail::basic_oarchive_impl **)a2[1];
      v24 = *(_QWORD *)(v23 + 24);
      v25 = *(_QWORD *)(v23 + 8);
      v26[0] = v24;
      v26[1] = v25;
      result = (uint64_t)boost::serialization::array_wrapper<boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>::serialize_optimized<boost::archive::text_oarchive>(v26, v22, 0);
      break;
    default:
      v6 = *(_QWORD *)(*a2 + 8);
      if (v6)
      {
        v7 = (uint64_t **)a2[1];
        v8 = *(_QWORD *)(*a2 + 24);
        do
        {
          --v6;
          v9 = v8 + 8;
          result = boost::archive::save_access::save_primitive<boost::archive::text_oarchive,double>(v7);
          v8 = v9;
        }
        while (v6);
      }
      break;
  }
  return result;
}

uint64_t boost::archive::save_access::save_primitive<boost::archive::text_oarchive,char>(boost::archive::detail::basic_oarchive *a1)
{
  boost::archive::detail::basic_oarchive::end_preamble(a1);
  boost::archive::basic_text_oarchive<boost::archive::text_oarchive>::newtoken((uint64_t)a1);
  return boost::archive::basic_text_oprimitive<std::ostream>::save_impl<short>((_QWORD *)a1 + 6);
}

uint64_t boost::archive::basic_text_oprimitive<std::ostream>::save_impl<short>(_QWORD *a1)
{
  _BYTE v2[144];
  uint64_t v3;

  v3 = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(*a1 + *(_QWORD *)(*(_QWORD *)*a1 - 24) + 32) & 5) != 0)
  {
    boost::archive::archive_exception::archive_exception((uint64_t)v2, 13, 0, 0);
    boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v2);
  }
  return std::ostream::operator<<();
}

void sub_243A355C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  boost::archive::archive_exception::~archive_exception(&a10);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::save_access::save_primitive<boost::archive::text_oarchive,unsigned long>(boost::archive::detail::basic_oarchive *a1)
{
  boost::archive::detail::basic_oarchive::end_preamble(a1);
  boost::archive::basic_text_oarchive<boost::archive::text_oarchive>::newtoken((uint64_t)a1);
  return boost::archive::basic_text_oprimitive<std::ostream>::save_impl<unsigned long>((_QWORD *)a1 + 6);
}

uint64_t boost::archive::basic_text_oprimitive<std::ostream>::save_impl<unsigned long>(_QWORD *a1)
{
  _BYTE v2[144];
  uint64_t v3;

  v3 = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(*a1 + *(_QWORD *)(*(_QWORD *)*a1 - 24) + 32) & 5) != 0)
  {
    boost::archive::archive_exception::archive_exception((uint64_t)v2, 13, 0, 0);
    boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v2);
  }
  return std::ostream::operator<<();
}

void sub_243A356B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  boost::archive::archive_exception::~archive_exception(&a10);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::save_access::save_primitive<boost::archive::text_oarchive,unsigned char>(boost::archive::detail::basic_oarchive *a1)
{
  boost::archive::detail::basic_oarchive::end_preamble(a1);
  boost::archive::basic_text_oarchive<boost::archive::text_oarchive>::newtoken((uint64_t)a1);
  return boost::archive::basic_text_oprimitive<std::ostream>::save_impl<unsigned short>((_QWORD *)a1 + 6);
}

uint64_t boost::archive::basic_text_oprimitive<std::ostream>::save_impl<unsigned short>(_QWORD *a1)
{
  _BYTE v2[144];
  uint64_t v3;

  v3 = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(*a1 + *(_QWORD *)(*(_QWORD *)*a1 - 24) + 32) & 5) != 0)
  {
    boost::archive::archive_exception::archive_exception((uint64_t)v2, 13, 0, 0);
    boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v2);
  }
  return std::ostream::operator<<();
}

void sub_243A357A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  boost::archive::archive_exception::~archive_exception(&a10);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::save_access::save_primitive<boost::archive::text_oarchive,unsigned short>(boost::archive::detail::basic_oarchive *a1)
{
  boost::archive::detail::basic_oarchive::end_preamble(a1);
  boost::archive::basic_text_oarchive<boost::archive::text_oarchive>::newtoken((uint64_t)a1);
  return boost::archive::basic_text_oprimitive<std::ostream>::save_impl<unsigned short>((_QWORD *)a1 + 6);
}

uint64_t boost::archive::save_access::save_primitive<boost::archive::text_oarchive,unsigned int>(boost::archive::detail::basic_oarchive *a1)
{
  boost::archive::detail::basic_oarchive::end_preamble(a1);
  boost::archive::basic_text_oarchive<boost::archive::text_oarchive>::newtoken((uint64_t)a1);
  return boost::archive::basic_text_oprimitive<std::ostream>::save_impl<unsigned int>((_QWORD *)a1 + 6);
}

uint64_t boost::archive::save_access::save_primitive<boost::archive::text_oarchive,unsigned long long>(boost::archive::detail::basic_oarchive *a1)
{
  boost::archive::detail::basic_oarchive::end_preamble(a1);
  boost::archive::basic_text_oarchive<boost::archive::text_oarchive>::newtoken((uint64_t)a1);
  return boost::archive::basic_text_oprimitive<std::ostream>::save_impl<unsigned long long>((_QWORD *)a1 + 6);
}

uint64_t boost::archive::basic_text_oprimitive<std::ostream>::save_impl<unsigned long long>(_QWORD *a1)
{
  _BYTE v2[144];
  uint64_t v3;

  v3 = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(*a1 + *(_QWORD *)(*(_QWORD *)*a1 - 24) + 32) & 5) != 0)
  {
    boost::archive::archive_exception::archive_exception((uint64_t)v2, 13, 0, 0);
    boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v2);
  }
  return std::ostream::operator<<();
}

void sub_243A35910(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  boost::archive::archive_exception::~archive_exception(&a10);
  _Unwind_Resume(a1);
}

unint64_t *boost::serialization::array_wrapper<boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>::serialize_optimized<boost::archive::text_oarchive>(unint64_t *result, boost::archive::detail::basic_oarchive_impl **a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v5;
  const boost::archive::detail::basic_oserializer *instance;

  v3 = result[1];
  if (v3)
  {
    v5 = *result;
    do
    {
      --v3;
      instance = (const boost::archive::detail::basic_oserializer *)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>>::get_instance((uint64_t)result, (uint64_t)a2, a3);
      result = (unint64_t *)boost::archive::detail::basic_oarchive::save_object(a2, v5, instance);
      v5 += 24;
    }
    while (v3);
  }
  return result;
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>::save_object_data(uint64_t a1, const void *a2, unint64_t a3)
{
  boost::archive::detail::basic_oarchive_impl **v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  const boost::archive::detail::basic_oserializer *instance;
  uint64_t v11;

  v5 = (boost::archive::detail::basic_oarchive_impl **)boost::serialization::smart_cast_impl::reference<boost::archive::text_oarchive &>::polymorphic::cross::cast<boost::archive::detail::basic_oarchive>(a2);
  v6 = (*(_QWORD *(**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 40))(&v11, a1);
  instance = (const boost::archive::detail::basic_oserializer *)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<unsigned long long>>>::get_instance((uint64_t)v6, v7, v8);
  return boost::archive::detail::basic_oarchive::save_object(v5, a3, instance);
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<unsigned long long>>::save_object_data(uint64_t a1, const void *a2, uint64_t *a3)
{
  boost::archive::detail::basic_oarchive *v5;
  uint64_t v7;

  v5 = (boost::archive::detail::basic_oarchive *)boost::serialization::smart_cast_impl::reference<boost::archive::text_oarchive &>::polymorphic::cross::cast<boost::archive::detail::basic_oarchive>(a2);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 40))(&v7, a1);
  return boost::serialization::free_saver<boost::archive::text_oarchive,std::vector<unsigned long long>>::invoke(v5, a3);
}

uint64_t boost::serialization::free_saver<boost::archive::text_oarchive,std::vector<unsigned long long>>::invoke(boost::archive::detail::basic_oarchive *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v9 = (a2[1] - *a2) >> 3;
  boost::archive::save_access::save_primitive<boost::archive::text_oarchive,boost::serialization::collection_size_type>(a1);
  result = boost::archive::save_access::save_primitive<boost::archive::text_oarchive,boost::archive::version_type>(a1);
  v5 = *a2;
  v6 = v9;
  v10 = v9 - 1;
  if (v6)
  {
    do
    {
      v7 = v5 + 8;
      result = boost::archive::save_access::save_primitive<boost::archive::text_oarchive,unsigned long long>(a1);
      v8 = v10--;
      v5 = v7;
    }
    while (v8);
  }
  return result;
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<unsigned long long>>>::~singleton_wrapper(boost::archive::detail::basic_oserializer *a1)
{
  *(_QWORD *)a1 = &unk_25142C300;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<unsigned long long>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
}

{
  *(_QWORD *)a1 = &unk_25142C300;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<unsigned long long>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
  JUMPOUT(0x2494FECF8);
}

_QWORD *boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<unsigned long long>>>::singleton_wrapper(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  void *instance;

  instance = boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<unsigned long long>>>::get_instance((uint64_t)a1, a2, a3);
  boost::archive::detail::basic_oserializer::basic_oserializer(a1, (uint64_t)instance);
  *a1 = &unk_25142C300;
  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<unsigned long long>>>::get_is_destroyed(void)::is_destroyed_flag)
    __assert_rtn("singleton_wrapper", "singleton.hpp", 148, "! is_destroyed()");
  return a1;
}

void sub_243A35B50(_Unwind_Exception *a1)
{
  boost::archive::detail::basic_oserializer *v1;

  boost::archive::detail::basic_oserializer::~basic_oserializer(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<unsigned long long>>::class_info()
{
  return 0;
}

BOOL boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<unsigned long long>>::tracking(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) != 0;
}

void boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<unsigned long long>>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<unsigned long long>>::is_polymorphic()
{
  return 0;
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>>::~singleton_wrapper(boost::archive::detail::basic_oserializer *a1)
{
  *(_QWORD *)a1 = &unk_25142C378;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
}

{
  *(_QWORD *)a1 = &unk_25142C378;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
  JUMPOUT(0x2494FECF8);
}

_QWORD *boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>>::singleton_wrapper(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  void *instance;

  instance = boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>>::get_instance((uint64_t)a1, a2, a3);
  boost::archive::detail::basic_oserializer::basic_oserializer(a1, (uint64_t)instance);
  *a1 = &unk_25142C378;
  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>>::get_is_destroyed(void)::is_destroyed_flag)
    __assert_rtn("singleton_wrapper", "singleton.hpp", 148, "! is_destroyed()");
  return a1;
}

void sub_243A35C5C(_Unwind_Exception *a1)
{
  boost::archive::detail::basic_oserializer *v1;

  boost::archive::detail::basic_oserializer::~basic_oserializer(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>::class_info()
{
  return 1;
}

BOOL boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>::tracking(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) != 0;
}

void boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>::is_polymorphic()
{
  return 0;
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::unlimited_storage<std::allocator<char>>>>::~singleton_wrapper(boost::archive::detail::basic_oserializer *a1)
{
  *(_QWORD *)a1 = &unk_25142C3F0;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::unlimited_storage<std::allocator<char>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
}

{
  *(_QWORD *)a1 = &unk_25142C3F0;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::unlimited_storage<std::allocator<char>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
  JUMPOUT(0x2494FECF8);
}

_QWORD *boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::unlimited_storage<std::allocator<char>>>>::singleton_wrapper(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  void *instance;

  instance = boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::histogram::unlimited_storage<std::allocator<char>>>>::get_instance((uint64_t)a1, a2, a3);
  boost::archive::detail::basic_oserializer::basic_oserializer(a1, (uint64_t)instance);
  *a1 = &unk_25142C3F0;
  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::unlimited_storage<std::allocator<char>>>>::get_is_destroyed(void)::is_destroyed_flag)
    __assert_rtn("singleton_wrapper", "singleton.hpp", 148, "! is_destroyed()");
  return a1;
}

void sub_243A35D68(_Unwind_Exception *a1)
{
  boost::archive::detail::basic_oserializer *v1;

  boost::archive::detail::basic_oserializer::~basic_oserializer(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::unlimited_storage<std::allocator<char>>>::class_info()
{
  return 1;
}

BOOL boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::unlimited_storage<std::allocator<char>>>::tracking(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) != 0;
}

void boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::unlimited_storage<std::allocator<char>>>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::unlimited_storage<std::allocator<char>>>::is_polymorphic()
{
  return 0;
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>>::~singleton_wrapper(boost::archive::detail::basic_oserializer *a1)
{
  *(_QWORD *)a1 = &unk_25142C468;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
}

{
  *(_QWORD *)a1 = &unk_25142C468;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
  JUMPOUT(0x2494FECF8);
}

_QWORD *boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>>::singleton_wrapper(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  void *instance;

  instance = boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>>::get_instance((uint64_t)a1, a2, a3);
  boost::archive::detail::basic_oserializer::basic_oserializer(a1, (uint64_t)instance);
  *a1 = &unk_25142C468;
  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>>::get_is_destroyed(void)::is_destroyed_flag)
    __assert_rtn("singleton_wrapper", "singleton.hpp", 148, "! is_destroyed()");
  return a1;
}

void sub_243A35E74(_Unwind_Exception *a1)
{
  boost::archive::detail::basic_oserializer *v1;

  boost::archive::detail::basic_oserializer::~basic_oserializer(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>::class_info()
{
  return 1;
}

BOOL boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>::tracking(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) != 0;
}

void boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>::is_polymorphic()
{
  return 0;
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<pps::AxisEnum>>::save_object_data(uint64_t a1, const void *a2, uint64_t *a3)
{
  boost::archive::detail::basic_oarchive *v5;
  uint64_t v7;

  v5 = (boost::archive::detail::basic_oarchive *)boost::serialization::smart_cast_impl::reference<boost::archive::text_oarchive &>::polymorphic::cross::cast<boost::archive::detail::basic_oarchive>(a2);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 40))(&v7, a1);
  return boost::serialization::free_saver<boost::archive::text_oarchive,std::vector<pps::AxisEnum>>::invoke(v5, a3);
}

uint64_t boost::serialization::free_saver<boost::archive::text_oarchive,std::vector<pps::AxisEnum>>::invoke(boost::archive::detail::basic_oarchive *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t i;
  uint64_t v7;

  v7 = (a2[1] - *a2) >> 2;
  boost::archive::save_access::save_primitive<boost::archive::text_oarchive,boost::serialization::collection_size_type>(a1);
  result = boost::archive::save_access::save_primitive<boost::archive::text_oarchive,boost::archive::version_type>(a1);
  for (i = *a2; v7--; i += 4)
    result = boost::archive::save_access::save_primitive<boost::archive::text_oarchive,int>(a1);
  return result;
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<pps::AxisEnum>>>::~singleton_wrapper(boost::archive::detail::basic_oserializer *a1)
{
  *(_QWORD *)a1 = &unk_25142C4E0;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<pps::AxisEnum>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
}

{
  *(_QWORD *)a1 = &unk_25142C4E0;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<pps::AxisEnum>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
  JUMPOUT(0x2494FECF8);
}

_QWORD *boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<pps::AxisEnum>>>::singleton_wrapper(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  void *instance;

  instance = boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<pps::AxisEnum>>>::get_instance((uint64_t)a1, a2, a3);
  boost::archive::detail::basic_oserializer::basic_oserializer(a1, (uint64_t)instance);
  *a1 = &unk_25142C4E0;
  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<pps::AxisEnum>>>::get_is_destroyed(void)::is_destroyed_flag)
    __assert_rtn("singleton_wrapper", "singleton.hpp", 148, "! is_destroyed()");
  return a1;
}

void sub_243A3605C(_Unwind_Exception *a1)
{
  boost::archive::detail::basic_oserializer *v1;

  boost::archive::detail::basic_oserializer::~basic_oserializer(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<pps::AxisEnum>>::class_info()
{
  return 1;
}

BOOL boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<pps::AxisEnum>>::tracking(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) != 0;
}

void boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<pps::AxisEnum>>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<pps::AxisEnum>>::is_polymorphic()
{
  return 0;
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,std::map<int,std::vector<std::string>>>::save_object_data(uint64_t a1, const void *a2, _QWORD *a3)
{
  boost::archive::detail::basic_oarchive *v5;
  uint64_t v7;

  v5 = (boost::archive::detail::basic_oarchive *)boost::serialization::smart_cast_impl::reference<boost::archive::text_oarchive &>::polymorphic::cross::cast<boost::archive::detail::basic_oarchive>(a2);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 40))(&v7, a1);
  return boost::serialization::free_saver<boost::archive::text_oarchive,std::map<int,std::vector<std::string>>>::invoke(v5, a3);
}

uint64_t boost::serialization::free_saver<boost::archive::text_oarchive,std::map<int,std::vector<std::string>>>::invoke(boost::archive::detail::basic_oarchive *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;
  unint64_t v13;
  const boost::archive::detail::basic_oserializer *instance;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v16 = a2[2];
  boost::archive::save_access::save_primitive<boost::archive::text_oarchive,boost::serialization::collection_size_type>(a1);
  result = boost::archive::save_access::save_primitive<boost::archive::text_oarchive,boost::archive::version_type>(a1);
  v7 = (_QWORD *)*a2;
  v8 = v16;
  v17 = v16 - 1;
  if (v8)
  {
    do
    {
      v9 = (_QWORD *)v7[1];
      v10 = v7;
      if (v9)
      {
        do
        {
          v11 = v9;
          v9 = (_QWORD *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v11 = (_QWORD *)v10[2];
          v12 = *v11 == (_QWORD)v10;
          v10 = v11;
        }
        while (!v12);
      }
      v13 = (unint64_t)(v7 + 4);
      instance = (const boost::archive::detail::basic_oserializer *)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::pair<int const,std::vector<std::string>>>>::get_instance(result, v5, v6);
      result = boost::archive::detail::basic_oarchive::save_object((boost::archive::detail::basic_oarchive_impl **)a1, v13, instance);
      v15 = v17--;
      v7 = v11;
    }
    while (v15);
  }
  return result;
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,std::pair<int const,std::vector<std::string>>>::save_object_data(uint64_t a1, const void *a2, uint64_t a3)
{
  boost::archive::detail::basic_oarchive *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const boost::archive::detail::basic_oserializer *instance;
  uint64_t v11;

  v5 = (boost::archive::detail::basic_oarchive *)boost::serialization::smart_cast_impl::reference<boost::archive::text_oarchive &>::polymorphic::cross::cast<boost::archive::detail::basic_oarchive>(a2);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 40))(&v11, a1);
  v6 = boost::archive::save_access::save_primitive<boost::archive::text_oarchive,int>(v5);
  instance = (const boost::archive::detail::basic_oserializer *)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<std::string>>>::get_instance(v6, v7, v8);
  return boost::archive::detail::basic_oarchive::save_object((boost::archive::detail::basic_oarchive_impl **)v5, a3 + 8, instance);
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<std::string>>::save_object_data(uint64_t a1, const void *a2, uint64_t *a3)
{
  boost::archive::detail::basic_oarchive *v5;
  uint64_t v7;

  v5 = (boost::archive::detail::basic_oarchive *)boost::serialization::smart_cast_impl::reference<boost::archive::text_oarchive &>::polymorphic::cross::cast<boost::archive::detail::basic_oarchive>(a2);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 40))(&v7, a1);
  return boost::serialization::free_saver<boost::archive::text_oarchive,std::vector<std::string>>::invoke(v5, a3);
}

uint64_t boost::serialization::free_saver<boost::archive::text_oarchive,std::vector<std::string>>::invoke(boost::archive::detail::basic_oarchive *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v8 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3);
  boost::archive::save_access::save_primitive<boost::archive::text_oarchive,boost::serialization::collection_size_type>(a1);
  result = boost::archive::save_access::save_primitive<boost::archive::text_oarchive,boost::archive::version_type>(a1);
  v5 = *a2;
  v6 = v8;
  v9 = v8 - 1;
  if (v6)
  {
    do
    {
      boost::archive::detail::basic_oarchive::end_preamble(a1);
      result = (uint64_t)boost::archive::text_oarchive_impl<boost::archive::text_oarchive>::save(a1, v5);
      v7 = v9--;
      v5 += 24;
    }
    while (v7);
  }
  return result;
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<std::string>>>::~singleton_wrapper(boost::archive::detail::basic_oserializer *a1)
{
  *(_QWORD *)a1 = &unk_25142C558;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<std::string>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
}

{
  *(_QWORD *)a1 = &unk_25142C558;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<std::string>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
  JUMPOUT(0x2494FECF8);
}

_QWORD *boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<std::string>>>::singleton_wrapper(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  void *instance;

  instance = boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<std::string>>>::get_instance((uint64_t)a1, a2, a3);
  boost::archive::detail::basic_oserializer::basic_oserializer(a1, (uint64_t)instance);
  *a1 = &unk_25142C558;
  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<std::string>>>::get_is_destroyed(void)::is_destroyed_flag)
    __assert_rtn("singleton_wrapper", "singleton.hpp", 148, "! is_destroyed()");
  return a1;
}

void sub_243A36400(_Unwind_Exception *a1)
{
  boost::archive::detail::basic_oserializer *v1;

  boost::archive::detail::basic_oserializer::~basic_oserializer(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<std::string>>::class_info()
{
  return 1;
}

BOOL boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<std::string>>::tracking(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) != 0;
}

void boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<std::string>>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<std::string>>::is_polymorphic()
{
  return 0;
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::pair<int const,std::vector<std::string>>>>::~singleton_wrapper(boost::archive::detail::basic_oserializer *a1)
{
  *(_QWORD *)a1 = &unk_25142C5D0;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::pair<int const,std::vector<std::string>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
}

{
  *(_QWORD *)a1 = &unk_25142C5D0;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::pair<int const,std::vector<std::string>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
  JUMPOUT(0x2494FECF8);
}

_QWORD *boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::pair<int const,std::vector<std::string>>>>::singleton_wrapper(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  void *instance;

  instance = boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::pair<int const,std::vector<std::string>>>>::get_instance((uint64_t)a1, a2, a3);
  boost::archive::detail::basic_oserializer::basic_oserializer(a1, (uint64_t)instance);
  *a1 = &unk_25142C5D0;
  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::pair<int const,std::vector<std::string>>>>::get_is_destroyed(void)::is_destroyed_flag)
    __assert_rtn("singleton_wrapper", "singleton.hpp", 148, "! is_destroyed()");
  return a1;
}

void sub_243A3650C(_Unwind_Exception *a1)
{
  boost::archive::detail::basic_oserializer *v1;

  boost::archive::detail::basic_oserializer::~basic_oserializer(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,std::pair<int const,std::vector<std::string>>>::class_info()
{
  return 1;
}

BOOL boost::archive::detail::oserializer<boost::archive::text_oarchive,std::pair<int const,std::vector<std::string>>>::tracking(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) != 0;
}

void boost::archive::detail::oserializer<boost::archive::text_oarchive,std::pair<int const,std::vector<std::string>>>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,std::pair<int const,std::vector<std::string>>>::is_polymorphic()
{
  return 0;
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::map<int,std::vector<std::string>>>>::~singleton_wrapper(boost::archive::detail::basic_oserializer *a1)
{
  *(_QWORD *)a1 = &unk_25142C648;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::map<int,std::vector<std::string>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
}

{
  *(_QWORD *)a1 = &unk_25142C648;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::map<int,std::vector<std::string>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
  JUMPOUT(0x2494FECF8);
}

_QWORD *boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::map<int,std::vector<std::string>>>>::singleton_wrapper(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  void *instance;

  instance = boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::map<int,std::vector<std::string>>>>::get_instance((uint64_t)a1, a2, a3);
  boost::archive::detail::basic_oserializer::basic_oserializer(a1, (uint64_t)instance);
  *a1 = &unk_25142C648;
  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::map<int,std::vector<std::string>>>>::get_is_destroyed(void)::is_destroyed_flag)
    __assert_rtn("singleton_wrapper", "singleton.hpp", 148, "! is_destroyed()");
  return a1;
}

void sub_243A36618(_Unwind_Exception *a1)
{
  boost::archive::detail::basic_oserializer *v1;

  boost::archive::detail::basic_oserializer::~basic_oserializer(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,std::map<int,std::vector<std::string>>>::class_info()
{
  return 1;
}

BOOL boost::archive::detail::oserializer<boost::archive::text_oarchive,std::map<int,std::vector<std::string>>>::tracking(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) != 0;
}

void boost::archive::detail::oserializer<boost::archive::text_oarchive,std::map<int,std::vector<std::string>>>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,std::map<int,std::vector<std::string>>>::is_polymorphic()
{
  return 0;
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,pps::Histogram_Internal>>::~singleton_wrapper(boost::archive::detail::basic_oserializer *a1)
{
  *(_QWORD *)a1 = &unk_25142C6C0;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,pps::Histogram_Internal>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
}

{
  *(_QWORD *)a1 = &unk_25142C6C0;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,pps::Histogram_Internal>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
  JUMPOUT(0x2494FECF8);
}

_QWORD *boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,pps::Histogram_Internal>>::singleton_wrapper(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  void *instance;

  instance = boost::serialization::singleton<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::get_instance((uint64_t)a1, a2, a3);
  boost::archive::detail::basic_oserializer::basic_oserializer(a1, (uint64_t)instance);
  *a1 = &unk_25142C6C0;
  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,pps::Histogram_Internal>>::get_is_destroyed(void)::is_destroyed_flag)
    __assert_rtn("singleton_wrapper", "singleton.hpp", 148, "! is_destroyed()");
  return a1;
}

void sub_243A36724(_Unwind_Exception *a1)
{
  boost::archive::detail::basic_oserializer *v1;

  boost::archive::detail::basic_oserializer::~basic_oserializer(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,pps::Histogram_Internal>::class_info()
{
  return 1;
}

BOOL boost::archive::detail::oserializer<boost::archive::text_oarchive,pps::Histogram_Internal>::tracking(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) != 0;
}

void boost::archive::detail::oserializer<boost::archive::text_oarchive,pps::Histogram_Internal>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,pps::Histogram_Internal>::is_polymorphic()
{
  return 1;
}

void std::vector<pps::AxisConfig_Internal>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 80;
        std::allocator<pps::AxisConfig_Internal>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<pps::AxisConfig_Internal>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v3;
  void **v4;

  v3 = *(void **)(a2 + 56);
  if (v3)
  {
    *(_QWORD *)(a2 + 64) = v3;
    operator delete(v3);
  }
  v4 = (void **)(a2 + 32);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
}

void std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<std::string>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0)
      operator delete(*(void **)(i - 24));
  }
  a1[1] = v2;
}

uint64_t std::vector<pps::AxisConfig_Internal>::__emplace_back_slow_path<pps::AxisConfig_Internal&>(uint64_t *a1, __int128 *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  void *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t *v14;

  v3 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  v4 = v3 + 1;
  if (v3 + 1 > 0x333333333333333)
    std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::__throw_length_error[abi:ne180100]();
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 4) > v4)
    v4 = 0x999999999999999ALL * ((a1[2] - *a1) >> 4);
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 4) >= 0x199999999999999)
    v6 = 0x333333333333333;
  else
    v6 = v4;
  v14 = a1 + 2;
  if (v6)
    v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pps::AxisConfig_Internal>>((uint64_t)(a1 + 2), v6);
  else
    v7 = 0;
  v10 = v7;
  v11 = &v7[80 * v3];
  v13 = &v7[80 * v6];
  std::allocator<pps::AxisConfig_Internal>::construct[abi:ne180100]<pps::AxisConfig_Internal,pps::AxisConfig_Internal&>((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  v12 = v11 + 80;
  std::vector<pps::AxisConfig_Internal>::__swap_out_circular_buffer(a1, &v10);
  v8 = a1[1];
  std::__split_buffer<pps::AxisConfig_Internal>::~__split_buffer(&v10);
  return v8;
}

void sub_243A369EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<pps::AxisConfig_Internal>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

_QWORD *std::allocator<pps::AxisConfig_Internal>::construct[abi:ne180100]<pps::AxisConfig_Internal,pps::AxisConfig_Internal&>(uint64_t a1, uint64_t a2, __int128 *a3)
{
  _QWORD *v4;
  __int128 v5;

  v4 = (_QWORD *)a2;
  v5 = *a3;
  *(_OWORD *)(a2 + 9) = *(__int128 *)((char *)a3 + 9);
  *(_OWORD *)a2 = v5;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a2 + 32), *((__int128 **)a3 + 4), *((__int128 **)a3 + 5), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a3 + 5) - *((_QWORD *)a3 + 4)) >> 3));
  v4[7] = 0;
  v4[8] = 0;
  v4 += 7;
  v4[2] = 0;
  return std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>(v4, *((const void **)a3 + 7), *((_QWORD *)a3 + 8), (uint64_t)(*((_QWORD *)a3 + 8) - *((_QWORD *)a3 + 7)) >> 3);
}

void sub_243A36A88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<pps::AxisConfig_Internal>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<pps::AxisConfig_Internal>,std::reverse_iterator<pps::AxisConfig_Internal*>,std::reverse_iterator<pps::AxisConfig_Internal*>,std::reverse_iterator<pps::AxisConfig_Internal*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<pps::AxisConfig_Internal>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x333333333333334)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(80 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<pps::AxisConfig_Internal>,std::reverse_iterator<pps::AxisConfig_Internal*>,std::reverse_iterator<pps::AxisConfig_Internal*>,std::reverse_iterator<pps::AxisConfig_Internal*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      v8 = *(_OWORD *)(a3 - 80);
      *(_OWORD *)(v7 - 71) = *(_OWORD *)(a3 - 71);
      *(_OWORD *)(v7 - 80) = v8;
      *(_QWORD *)(v7 - 40) = 0;
      *(_QWORD *)(v7 - 32) = 0;
      *(_QWORD *)(v7 - 48) = 0;
      *(_OWORD *)(v7 - 48) = *(_OWORD *)(a3 - 48);
      *(_QWORD *)(v7 - 32) = *(_QWORD *)(a3 - 32);
      *(_QWORD *)(a3 - 48) = 0;
      *(_QWORD *)(a3 - 40) = 0;
      *(_QWORD *)(a3 - 32) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 - 24);
      *(_QWORD *)(v7 - 8) = *(_QWORD *)(a3 - 8);
      *(_QWORD *)(a3 - 24) = 0;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 8) = 0;
      v7 = *((_QWORD *)&v14 + 1) - 80;
      *((_QWORD *)&v14 + 1) -= 80;
      a3 -= 80;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<pps::AxisConfig_Internal>,std::reverse_iterator<pps::AxisConfig_Internal*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<pps::AxisConfig_Internal>,std::reverse_iterator<pps::AxisConfig_Internal*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<pps::AxisConfig_Internal>,std::reverse_iterator<pps::AxisConfig_Internal*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<pps::AxisConfig_Internal>,std::reverse_iterator<pps::AxisConfig_Internal*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      std::allocator<pps::AxisConfig_Internal>::destroy[abi:ne180100](v3, v1);
      v1 += 80;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<pps::AxisConfig_Internal>::~__split_buffer(void **a1)
{
  std::__split_buffer<pps::AxisConfig_Internal>::clear[abi:ne180100](a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<pps::AxisConfig_Internal>::clear[abi:ne180100](_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 80;
    std::allocator<pps::AxisConfig_Internal>::destroy[abi:ne180100](v4, i - 80);
  }
}

void std::__throw_bad_function_call[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
}

void std::bad_function_call::~bad_function_call(std::bad_function_call *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x2494FECF8);
}

void sub_243A36F60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

BOOL std::type_info::operator==[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  if (v2 == v3)
    return 1;
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3))
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  return 0;
}

_QWORD *std::__function::__value_func<void ()(NSMutableArray *)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_243A37188(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

std::string *std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(std::string *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  std::string *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_243A371F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<std::string>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(uint64_t a1, __int128 *a2, __int128 *a3, std::string *this)
{
  std::string *v4;
  __int128 *v6;
  __int128 v7;
  _QWORD v9[3];
  char v10;
  std::string *v11;
  std::string *v12;

  v4 = this;
  v11 = this;
  v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
        v4 = v12;
      }
      else
      {
        v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      v6 = (__int128 *)((char *)v6 + 24);
      v12 = ++v4;
    }
    while (v6 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_243A37310(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 1) < 0)
      operator delete(*(void **)(v1 - 24));
    v1 -= 24;
  }
}

void OUTLINED_FUNCTION_0(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 38, a4);
}

void OUTLINED_FUNCTION_1(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 167, a4);
}

void OUTLINED_FUNCTION_2(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void OUTLINED_FUNCTION_3(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 129, a4);
}

void OUTLINED_FUNCTION_4(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x16u);
}

uint64_t OUTLINED_FUNCTION_5(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
}

void OUTLINED_FUNCTION_10(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 187, a4);
}

void OUTLINED_FUNCTION_11(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 393, a4);
}

void OUTLINED_FUNCTION_12(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 392, a4);
}

void *__cxx_global_var_init(void *result, uint64_t a2, uint64_t a3)
{
  {
    result = boost::serialization::singleton<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::get_instance((uint64_t)result, a2, a3);
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::m_instance = (uint64_t)result;
  }
  return result;
}

void *__cxx_global_var_init_77(void *result, uint64_t a2, uint64_t a3)
{
  {
    result = boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>>::get_instance((uint64_t)result, a2, a3);
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>>::m_instance = (uint64_t)result;
  }
  return result;
}

void *__cxx_global_var_init_78(void *result, uint64_t a2, uint64_t a3)
{
  {
    result = boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>>::get_instance((uint64_t)result, a2, a3);
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>>::m_instance = (uint64_t)result;
  }
  return result;
}

void *__cxx_global_var_init_79(void *result, uint64_t a2, uint64_t a3)
{
  {
    result = boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::get_instance((uint64_t)result, a2, a3);
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::m_instance = (uint64_t)result;
  }
  return result;
}

void *__cxx_global_var_init_80(void *result, uint64_t a2, uint64_t a3)
{
  {
    result = boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::get_instance((uint64_t)result, a2, a3);
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::m_instance = (uint64_t)result;
  }
  return result;
}

void *__cxx_global_var_init_81(void *result, uint64_t a2, uint64_t a3)
{
  {
    result = boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>>::get_instance((uint64_t)result, a2, a3);
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>>::m_instance = (uint64_t)result;
  }
  return result;
}

void *__cxx_global_var_init_82(void *result, uint64_t a2, uint64_t a3)
{
  {
    result = boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::histogram::axis::transform::id>>::get_instance((uint64_t)result, a2, a3);
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::histogram::axis::transform::id>>::m_instance = (uint64_t)result;
  }
  return result;
}

_QWORD *__cxx_global_var_init_83(_QWORD *result, uint64_t a2, uint64_t a3)
{
  {
    result = boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::transform::id>>::get_instance((uint64_t)result, a2, a3);
    boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::transform::id>>::m_instance = (uint64_t)result;
  }
  return result;
}

_QWORD *__cxx_global_var_init_84(_QWORD *result, uint64_t a2, uint64_t a3)
{
  {
    result = boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>>::get_instance((uint64_t)result, a2, a3);
    boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>>::m_instance = (uint64_t)result;
  }
  return result;
}

void *__cxx_global_var_init_85(void *result, uint64_t a2, uint64_t a3)
{
  {
    result = boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>>::get_instance((uint64_t)result, a2, a3);
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>>::m_instance = (uint64_t)result;
  }
  return result;
}

void *__cxx_global_var_init_86(void *result, uint64_t a2, uint64_t a3)
{
  {
    result = boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<double>>>::get_instance((uint64_t)result, a2, a3);
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<double>>>::m_instance = (uint64_t)result;
  }
  return result;
}

_QWORD *__cxx_global_var_init_87(_QWORD *result, uint64_t a2, uint64_t a3)
{
  {
    result = boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<double>>>::get_instance((uint64_t)result, a2, a3);
    boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<double>>>::m_instance = (uint64_t)result;
  }
  return result;
}

_QWORD *__cxx_global_var_init_88(_QWORD *result, uint64_t a2, uint64_t a3)
{
  {
    result = boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>>::get_instance((uint64_t)result, a2, a3);
    boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>>::m_instance = (uint64_t)result;
  }
  return result;
}

void *__cxx_global_var_init_89(void *result, uint64_t a2, uint64_t a3)
{
  {
    result = boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::get_instance((uint64_t)result, a2, a3);
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::m_instance = (uint64_t)result;
  }
  return result;
}

_QWORD *__cxx_global_var_init_90(_QWORD *result, uint64_t a2, uint64_t a3)
{
  {
    result = boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::get_instance((uint64_t)result, a2, a3);
    boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::m_instance = (uint64_t)result;
  }
  return result;
}

_QWORD *__cxx_global_var_init_91(_QWORD *result, uint64_t a2, uint64_t a3)
{
  {
    result = boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::get_instance((uint64_t)result, a2, a3);
    boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::m_instance = (uint64_t)result;
  }
  return result;
}

_QWORD *__cxx_global_var_init_92(_QWORD *result, uint64_t a2, uint64_t a3)
{
  {
    result = boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::get_instance((uint64_t)result, a2, a3);
    boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::m_instance = (uint64_t)result;
  }
  return result;
}

_QWORD *__cxx_global_var_init_93(_QWORD *result, uint64_t a2, uint64_t a3)
{
  {
    result = boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>>::get_instance((uint64_t)result, a2, a3);
    boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>>::m_instance = (uint64_t)result;
  }
  return result;
}

void *__cxx_global_var_init_94(void *result, uint64_t a2, uint64_t a3)
{
  {
    result = boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::histogram::unlimited_storage<std::allocator<char>>>>::get_instance((uint64_t)result, a2, a3);
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::histogram::unlimited_storage<std::allocator<char>>>>::m_instance = (uint64_t)result;
  }
  return result;
}

void *__cxx_global_var_init_95(void *result, uint64_t a2, uint64_t a3)
{
  {
    result = boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>>::get_instance((uint64_t)result, a2, a3);
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>>::m_instance = (uint64_t)result;
  }
  return result;
}

void *__cxx_global_var_init_96(void *result, uint64_t a2, uint64_t a3)
{
  {
    result = boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<unsigned long long>>>::get_instance((uint64_t)result, a2, a3);
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<unsigned long long>>>::m_instance = (uint64_t)result;
  }
  return result;
}

_QWORD *__cxx_global_var_init_97(_QWORD *result, uint64_t a2, uint64_t a3)
{
  {
    result = boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<unsigned long long>>>::get_instance((uint64_t)result, a2, a3);
    boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<unsigned long long>>>::m_instance = (uint64_t)result;
  }
  return result;
}

_QWORD *__cxx_global_var_init_98(_QWORD *result, uint64_t a2, uint64_t a3)
{
  {
    result = boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>>::get_instance((uint64_t)result, a2, a3);
    boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>>::m_instance = (uint64_t)result;
  }
  return result;
}

_QWORD *__cxx_global_var_init_99(_QWORD *result, uint64_t a2, uint64_t a3)
{
  {
    result = boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::unlimited_storage<std::allocator<char>>>>::get_instance((uint64_t)result, a2, a3);
    boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::unlimited_storage<std::allocator<char>>>>::m_instance = (uint64_t)result;
  }
  return result;
}

_QWORD *__cxx_global_var_init_100(_QWORD *result, uint64_t a2, uint64_t a3)
{
  {
    result = boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>>::get_instance((uint64_t)result, a2, a3);
    boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>>::m_instance = (uint64_t)result;
  }
  return result;
}

void *__cxx_global_var_init_101(void *result, uint64_t a2, uint64_t a3)
{
  {
    result = boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<pps::AxisEnum>>>::get_instance((uint64_t)result, a2, a3);
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<pps::AxisEnum>>>::m_instance = (uint64_t)result;
  }
  return result;
}

_QWORD *__cxx_global_var_init_102(_QWORD *result, uint64_t a2, uint64_t a3)
{
  {
    result = boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<pps::AxisEnum>>>::get_instance((uint64_t)result, a2, a3);
    boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<pps::AxisEnum>>>::m_instance = (uint64_t)result;
  }
  return result;
}

void *__cxx_global_var_init_103(void *result, uint64_t a2, uint64_t a3)
{
  {
    result = boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::map<int,std::vector<std::string>>>>::get_instance((uint64_t)result, a2, a3);
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::map<int,std::vector<std::string>>>>::m_instance = (uint64_t)result;
  }
  return result;
}

void *__cxx_global_var_init_104(void *result, uint64_t a2, uint64_t a3)
{
  {
    result = boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::pair<int const,std::vector<std::string>>>>::get_instance((uint64_t)result, a2, a3);
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::pair<int const,std::vector<std::string>>>>::m_instance = (uint64_t)result;
  }
  return result;
}

void *__cxx_global_var_init_105(void *result, uint64_t a2, uint64_t a3)
{
  {
    result = boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<std::string>>>::get_instance((uint64_t)result, a2, a3);
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<std::string>>>::m_instance = (uint64_t)result;
  }
  return result;
}

_QWORD *__cxx_global_var_init_106(_QWORD *result, uint64_t a2, uint64_t a3)
{
  {
    result = boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<std::string>>>::get_instance((uint64_t)result, a2, a3);
    boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<std::string>>>::m_instance = (uint64_t)result;
  }
  return result;
}

_QWORD *__cxx_global_var_init_107(_QWORD *result, uint64_t a2, uint64_t a3)
{
  {
    result = boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::pair<int const,std::vector<std::string>>>>::get_instance((uint64_t)result, a2, a3);
    boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::pair<int const,std::vector<std::string>>>>::m_instance = (uint64_t)result;
  }
  return result;
}

_QWORD *__cxx_global_var_init_108(_QWORD *result, uint64_t a2, uint64_t a3)
{
  {
    result = boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::map<int,std::vector<std::string>>>>::get_instance((uint64_t)result, a2, a3);
    boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::map<int,std::vector<std::string>>>>::m_instance = (uint64_t)result;
  }
  return result;
}

_QWORD *__cxx_global_var_init_109(_QWORD *result, uint64_t a2, uint64_t a3)
{
  {
    result = boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,pps::Histogram_Internal>>::get_instance((uint64_t)result, a2, a3);
    boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,pps::Histogram_Internal>>::m_instance = (uint64_t)result;
  }
  return result;
}

_QWORD *__cxx_global_var_init_110(_QWORD *result, uint64_t a2, uint64_t a3)
{
  {
    result = boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::transform::id>>::get_instance((uint64_t)result, a2, a3);
    boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::transform::id>>::m_instance = (uint64_t)result;
  }
  return result;
}

_QWORD *__cxx_global_var_init_111(_QWORD *result, uint64_t a2, uint64_t a3)
{
  {
    result = boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>>::get_instance((uint64_t)result, a2, a3);
    boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>>::m_instance = (uint64_t)result;
  }
  return result;
}

_QWORD *__cxx_global_var_init_112(_QWORD *result, uint64_t a2, uint64_t a3)
{
  {
    result = boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<double>>>::get_instance((uint64_t)result, a2, a3);
    boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<double>>>::m_instance = (uint64_t)result;
  }
  return result;
}

_QWORD *__cxx_global_var_init_113(_QWORD *result, uint64_t a2, uint64_t a3)
{
  {
    result = boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>>::get_instance((uint64_t)result, a2, a3);
    boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>>::m_instance = (uint64_t)result;
  }
  return result;
}

_QWORD *__cxx_global_var_init_114(_QWORD *result, uint64_t a2, uint64_t a3)
{
  {
    result = boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::get_instance((uint64_t)result, a2, a3);
    boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::m_instance = (uint64_t)result;
  }
  return result;
}

_QWORD *__cxx_global_var_init_115(_QWORD *result, uint64_t a2, uint64_t a3)
{
  {
    result = boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::get_instance((uint64_t)result, a2, a3);
    boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::m_instance = (uint64_t)result;
  }
  return result;
}

_QWORD *__cxx_global_var_init_116(_QWORD *result, uint64_t a2, uint64_t a3)
{
  {
    result = boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::get_instance((uint64_t)result, a2, a3);
    boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::m_instance = (uint64_t)result;
  }
  return result;
}

_QWORD *__cxx_global_var_init_117(_QWORD *result, uint64_t a2, uint64_t a3)
{
  {
    result = boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>>::get_instance((uint64_t)result, a2, a3);
    boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>>::m_instance = (uint64_t)result;
  }
  return result;
}

_QWORD *__cxx_global_var_init_118(_QWORD *result, uint64_t a2, uint64_t a3)
{
  {
    result = boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<unsigned long long>>>::get_instance((uint64_t)result, a2, a3);
    boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<unsigned long long>>>::m_instance = (uint64_t)result;
  }
  return result;
}

_QWORD *__cxx_global_var_init_119(_QWORD *result, uint64_t a2, uint64_t a3)
{
  {
    result = boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>>::get_instance((uint64_t)result, a2, a3);
    boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>>::m_instance = (uint64_t)result;
  }
  return result;
}

_QWORD *__cxx_global_var_init_120(_QWORD *result, uint64_t a2, uint64_t a3)
{
  {
    result = boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::unlimited_storage<std::allocator<char>>>>::get_instance((uint64_t)result, a2, a3);
    boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::unlimited_storage<std::allocator<char>>>>::m_instance = (uint64_t)result;
  }
  return result;
}

_QWORD *__cxx_global_var_init_121(_QWORD *result, uint64_t a2, uint64_t a3)
{
  {
    result = boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>>::get_instance((uint64_t)result, a2, a3);
    boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>>::m_instance = (uint64_t)result;
  }
  return result;
}

_QWORD *__cxx_global_var_init_122(_QWORD *result, uint64_t a2, uint64_t a3)
{
  {
    result = boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<pps::AxisEnum>>>::get_instance((uint64_t)result, a2, a3);
    boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<pps::AxisEnum>>>::m_instance = (uint64_t)result;
  }
  return result;
}

_QWORD *__cxx_global_var_init_123(_QWORD *result, uint64_t a2, uint64_t a3)
{
  {
    result = boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<std::string>>>::get_instance((uint64_t)result, a2, a3);
    boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<std::string>>>::m_instance = (uint64_t)result;
  }
  return result;
}

_QWORD *__cxx_global_var_init_124(_QWORD *result, uint64_t a2, uint64_t a3)
{
  {
    result = boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::pair<int const,std::vector<std::string>>>>::get_instance((uint64_t)result, a2, a3);
    boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::pair<int const,std::vector<std::string>>>>::m_instance = (uint64_t)result;
  }
  return result;
}

_QWORD *__cxx_global_var_init_125(_QWORD *result, uint64_t a2, uint64_t a3)
{
  {
    result = boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::map<int,std::vector<std::string>>>>::get_instance((uint64_t)result, a2, a3);
    boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::map<int,std::vector<std::string>>>>::m_instance = (uint64_t)result;
  }
  return result;
}

_QWORD *__cxx_global_var_init_126(_QWORD *result, uint64_t a2, uint64_t a3)
{
  {
    result = boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,pps::Histogram_Internal>>::get_instance((uint64_t)result, a2, a3);
    boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,pps::Histogram_Internal>>::m_instance = (uint64_t)result;
  }
  return result;
}

id PPSReaderLog()
{
  if (PPSReaderLog_onceToken != -1)
    dispatch_once(&PPSReaderLog_onceToken, &__block_literal_global_2);
  return (id)PPSReaderLog___logObj;
}

id PPSFetchTimeSeries(void *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id v10;
  void *v11;
  PPSTimeSeriesRequest *v12;
  void *v13;
  uint64_t v15;

  v7 = a1;
  v8 = a2;
  v9 = a3;
  v10 = a4;
  v11 = (void *)MEMORY[0x2494FEED8]();
  v12 = -[PPSTimeSeriesRequest initWithMetrics:predicate:timeFilter:]([PPSTimeSeriesRequest alloc], "initWithMetrics:predicate:timeFilter:", v9, v8, v10);
  v15 = 0;
  objc_msgSend(v7, "dataForRequest:withError:", v12, &v15);
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  objc_autoreleasePoolPop(v11);
  return v13;
}

void OUTLINED_FUNCTION_0_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, a5, 0xCu);
}

void sub_243A3BAC0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_243A3BB4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)PPSSQLiteDatabase;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_243A3BC38(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id lastErrorForDatabase(sqlite3 *a1, int a2)
{
  void *v2;
  const char *v3;
  void *v4;
  void *v5;
  const char *v6;
  void *v7;
  void *v8;
  uint64_t v10;
  _QWORD v11[2];

  v2 = 0;
  v11[1] = *MEMORY[0x24BDAC8D0];
  if (a1 && a2)
  {
    v3 = sqlite3_errmsg(a1);
    v4 = (void *)MEMORY[0x24BDD1540];
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "com.apple.PerfPowerServicesReader.SQLite");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = *MEMORY[0x24BDD0FC8];
    if (v3)
      v6 = v3;
    else
      v6 = "";
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v11[0] = v7;
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v11, &v10, 1);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "errorWithDomain:code:userInfo:", v5, 2, v8);
    v2 = (void *)objc_claimAutoreleasedReturnValue();

  }
  return v2;
}

void sub_243A3BD5C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_243A3BF30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_243A3C0C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void PPSSQLiteRow::~PPSSQLiteRow(id *this)
{

}

{

  JUMPOUT(0x2494FECF8);
}

void sub_243A3C254(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  void *v22;

  _Block_object_dispose(&a17, 8);

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__1(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__1(uint64_t a1)
{

}

void sub_243A3C320(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_243A3C448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  void *v20;

  _Block_object_dispose(&a15, 8);

  _Unwind_Resume(a1);
}

void sub_243A3C4FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_243A3C5D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_243A3C704(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  void *v22;
  void *v23;

  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

void sub_243A3C7E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_243A3C854(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_243A3C954(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, void *a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  void *v11;
  void *v12;
  va_list va;

  va_start(va, a11);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_243A3CA98(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_243A3CE18(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_243A3D060(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t PPSSQLiteBindFoundationValueToStatement(sqlite3_stmt *a1, int a2, void *a3)
{
  id v5;
  uint64_t v6;
  const char *v7;
  double v9;
  uint64_t v10;
  int v11;
  const char *v12;
  id v13;
  const char *v14;
  NSObject *v15;
  double v16;
  objc_class *v17;
  void *v18;
  _DWORD v19[2];
  __int16 v20;
  id v21;
  __int16 v22;
  void *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v5 = a3;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v6 = objc_msgSend(v5, "UTF8String");
    if (v6)
      v7 = (const char *)v6;
    else
      v7 = "";
    sqlite3_bind_text(a1, a2, v7, -1, 0);
    goto LABEL_9;
  }
  if (!v5 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
  {
LABEL_8:
    sqlite3_bind_null(a1, a2);
    goto LABEL_9;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_msgSend(v5, "timeIntervalSinceReferenceDate");
    sqlite3_bind_double(a1, a2, v9);
    goto LABEL_9;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v10 = objc_msgSend(v5, "bytes");
    v11 = objc_msgSend(v5, "length");
    if (v10)
      v12 = (const char *)v10;
    else
      v12 = "";
    sqlite3_bind_blob(a1, a2, v12, v11, 0);
  }
  else
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      logHandle();
      v15 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
      {
        v17 = (objc_class *)objc_opt_class();
        NSStringFromClass(v17);
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        v19[0] = 67109634;
        v19[1] = a2;
        v20 = 2112;
        v21 = v5;
        v22 = 2114;
        v23 = v18;
        _os_log_debug_impl(&dword_2439D9000, v15, OS_LOG_TYPE_DEBUG, "PPSSQLiteBindFoundationValueToStatement: Parameter (index %i) with value '%@' is of unsupported bind type '%{public}@'.", (uint8_t *)v19, 0x1Cu);

      }
      goto LABEL_8;
    }
    v13 = objc_retainAutorelease(v5);
    v14 = (const char *)objc_msgSend(v13, "objCType");
    if (!strcmp(v14, "d") || !strcmp(v14, "f"))
    {
      objc_msgSend(v13, "doubleValue");
      sqlite3_bind_double(a1, a2, v16);
    }
    else
    {
      sqlite3_bind_int64(a1, a2, objc_msgSend(v13, "longLongValue"));
    }
  }
LABEL_9:

  return (a2 + 1);
}

void sub_243A3D358(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id PPSQLiteFoundationValueForStatementColumn(sqlite3_stmt *a1, int a2)
{
  int v4;
  void *v5;
  const void *v6;

  v4 = sqlite3_column_type(a1, a2) - 1;
  v5 = 0;
  switch(v4)
  {
    case 0:
      v5 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDD16E0]), "initWithLongLong:", sqlite3_column_int64(a1, a2));
      break;
    case 1:
      v5 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDD16E0]), "initWithDouble:", sqlite3_column_double(a1, a2));
      break;
    case 2:
      v5 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDD17C8]), "initWithUTF8String:", sqlite3_column_text(a1, a2));
      break;
    case 4:
      return v5;
    default:
      v6 = sqlite3_column_blob(a1, a2);
      v5 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDBCE50]), "initWithBytes:length:", v6, sqlite3_column_bytes(a1, a2));
      break;
  }
  return v5;
}

void ___ZL9logHandlev_block_invoke_0()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.PerfPowerServicesReader", "sqlite");
  v1 = (void *)logHandle(void)::__logHandle;
  logHandle(void)::__logHandle = (uint64_t)v0;

}

uint64_t PPSSQLiteRow::PPSSQLiteRow(uint64_t a1, sqlite3_stmt *a2, void *a3)
{
  id v5;

  v5 = a3;
  *(_QWORD *)a1 = &unk_25142C9B0;
  *(_QWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 20) = sqlite3_column_count(a2);
  *(_QWORD *)(a1 + 24) = MEMORY[0x24BDBD1B8];
  if (v5)
    PPSSQLiteRow::setColumnNames(a1, v5);

  return a1;
}

void sub_243A3D534(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  _Unwind_Resume(a1);
}

void PPSSQLiteRow::setColumnNames(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  id v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v13 = a2;
  v3 = (void *)objc_opt_new();
  v16 = 0u;
  v17 = 0u;
  v14 = 0u;
  v15 = 0u;
  v4 = v13;
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
  if (v5)
  {
    v6 = 0;
    v7 = *(_QWORD *)v15;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v15 != v7)
          objc_enumerationMutation(v4);
        v9 = *(_QWORD *)(*((_QWORD *)&v14 + 1) + 8 * v8);
        objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInt:", v6 + v8);
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v3, "setObject:forKeyedSubscript:", v10, v9);

        ++v8;
      }
      while (v5 != v8);
      v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
      v6 = (v6 + v8);
    }
    while (v5);
  }

  v11 = objc_msgSend(v3, "copy");
  v12 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v11;

}

void sub_243A3D6B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t sqlite3StatementRelease(const __CFAllocator *a1, sqlite3_stmt *pStmt)
{
  return sqlite3_finalize(pStmt);
}

pps::Histogram_Internal *pps::Histogram_Internal::Histogram_Internal(pps::Histogram_Internal *this)
{
  char *v2;
  _DWORD *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  _DWORD *v7;
  _DWORD *v8;
  int v9;
  void *v11[2];
  uint64_t v12;
  int v13;
  void *v14;
  char v15;
  char v16[8];
  void *__p;
  char v18;
  uint64_t v19;

  *(_QWORD *)this = &unk_25142A2A0;
  *((_QWORD *)this + 1) = 0;
  v2 = (char *)this + 8;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 11) = (char *)this + 96;
  *((_BYTE *)this + 48) = 0;
  *((_QWORD *)this + 13) = 0;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  v3 = std::__allocate_at_least[abi:ne180100]<std::allocator<pps::AxisEnum>>((uint64_t)this + 80, 1uLL);
  v4 = (char *)*((_QWORD *)this + 8);
  v5 = (char *)*((_QWORD *)this + 9);
  v7 = &v3[v6];
  *v3 = 0;
  v8 = v3 + 1;
  while (v5 != v4)
  {
    v9 = *((_DWORD *)v5 - 1);
    v5 -= 4;
    *--v3 = v9;
  }
  *((_QWORD *)this + 8) = v3;
  *((_QWORD *)this + 9) = v8;
  *((_QWORD *)this + 10) = v7;
  if (v4)
    operator delete(v4);
  *((_QWORD *)this + 9) = v8;
  v11[1] = 0;
  v12 = 0;
  v11[0] = 0;
  boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>::regular((uint64_t)&v13, 1, (uint64_t)v11, 0.0, 1.0);
  _ZN5boost9histogram14make_histogramINS0_4axis7regularIdNS_11use_defaultES4_S4_EEJENS0_6detail13requires_axisIS5_vEEEEDaOT_DpOT0_(&v13, (uint64_t)v16);
  boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>::operator=<std::tuple<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>,boost::histogram::unlimited_storage<std::allocator<char>>>((uint64_t)v2, (uint64_t)v16);
  boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::destroy((uint64_t)&v19);
  if (v18 < 0)
    operator delete(__p);
  if (v15 < 0)
    operator delete(v14);
  if (SHIBYTE(v12) < 0)
    operator delete(v11[0]);
  return this;
}

void sub_243A3D870(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;
  void **v26;
  uint64_t v27;
  void *v29;

  boost::histogram::histogram<std::tuple<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>,boost::histogram::unlimited_storage<std::allocator<char>>>::~histogram((uint64_t)&a25);
  if (a22 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  std::__tree<std::__value_type<int,std::vector<std::string>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::string>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::string>>>>::destroy(v27, *(char **)(v25 + 96));
  v29 = *(void **)(v25 + 64);
  if (v29)
  {
    *(_QWORD *)(v25 + 72) = v29;
    operator delete(v29);
  }
  boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>::~histogram(v26);
  _Unwind_Resume(a1);
}

void _ZN5boost9histogram14make_histogramINS0_4axis7regularIdNS_11use_defaultES4_S4_EEJENS0_6detail13requires_axisIS5_vEEEEDaOT_DpOT0_(int *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD v2[2];
  char v3;
  uint64_t v4;

  v2[1] = 0;
  v3 = 0;
  v4 = 0;
  _ZN5boost9histogram19make_histogram_withINS0_17unlimited_storageINSt3__19allocatorIcEEEENS0_4axis7regularIdNS_11use_defaultES9_S9_EEJENS0_6detail13requires_axisISA_vEEEEDaOT_OT0_DpOT1_((uint64_t)v2, a1, a2);
  boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::destroy((uint64_t)v2);
}

void sub_243A3D920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::destroy((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>::regular(uint64_t a1, int a2, uint64_t a3, double a4, double a5)
{
  void *__p[2];
  uint64_t v8;

  *(_OWORD *)__p = *(_OWORD *)a3;
  v8 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>::regular(a1, a2, (__int128 *)__p, a4, a5);
  if (SHIBYTE(v8) < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_243A3D98C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>::operator=<std::tuple<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>,boost::histogram::unlimited_storage<std::allocator<char>>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::resize((uint64_t *)a1, 1uLL);
  boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::assign<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>(*(_QWORD *)a1, (_DWORD *)a2);
  if (a1 + 24 != a2 + 48)
  {
    v4 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a2 + 56) = v4;
    LOBYTE(v4) = *(_BYTE *)(a1 + 40);
    *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 64);
    *(_BYTE *)(a2 + 64) = v4;
    v5 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a2 + 72) = v5;
  }
  return a1;
}

uint64_t boost::histogram::histogram<std::tuple<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>,boost::histogram::unlimited_storage<std::allocator<char>>>::~histogram(uint64_t a1)
{
  boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::destroy(a1 + 48);
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void **boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>::~histogram(void **a1)
{
  void **v3;

  boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::destroy((uint64_t)(a1 + 3));
  v3 = a1;
  std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

pps::Histogram_Internal *pps::Histogram_Internal::Histogram_Internal(pps::Histogram_Internal *this, int a2, double a3, double a4)
{
  char *v6;
  _DWORD *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _DWORD *v13;
  _DWORD *v14;
  int v15;
  std::logic_error *exception;
  void *v18[2];
  uint64_t v19;
  int v20;
  void *v21;
  char v22;
  char v23[8];
  void *__p;
  char v25;
  uint64_t v26;

  *(_QWORD *)this = &unk_25142A2A0;
  *((_QWORD *)this + 1) = 0;
  v6 = (char *)this + 8;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 11) = (char *)this + 96;
  *((_BYTE *)this + 48) = 0;
  *((_QWORD *)this + 13) = 0;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  if (a4 <= a3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "maxRange is less than or equal to minRange");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_251429168, (void (*)(void *))MEMORY[0x24BEDAB88]);
  }
  v9 = std::__allocate_at_least[abi:ne180100]<std::allocator<pps::AxisEnum>>((uint64_t)this + 80, 1uLL);
  v10 = (char *)*((_QWORD *)this + 8);
  v11 = (char *)*((_QWORD *)this + 9);
  v13 = &v9[v12];
  *v9 = 0;
  v14 = v9 + 1;
  while (v11 != v10)
  {
    v15 = *((_DWORD *)v11 - 1);
    v11 -= 4;
    *--v9 = v15;
  }
  *((_QWORD *)this + 8) = v9;
  *((_QWORD *)this + 9) = v14;
  *((_QWORD *)this + 10) = v13;
  if (v10)
    operator delete(v10);
  *((_QWORD *)this + 9) = v14;
  v18[1] = 0;
  v19 = 0;
  v18[0] = 0;
  boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>::regular((uint64_t)&v20, a2, (uint64_t)v18, a3, a4);
  _ZN5boost9histogram14make_histogramINS0_4axis7regularIdNS_11use_defaultES4_S4_EEJENS0_6detail13requires_axisIS5_vEEEEDaOT_DpOT0_(&v20, (uint64_t)v23);
  boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>::operator=<std::tuple<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>,boost::histogram::unlimited_storage<std::allocator<char>>>((uint64_t)v6, (uint64_t)v23);
  boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::destroy((uint64_t)&v26);
  if (v25 < 0)
    operator delete(__p);
  if (v22 < 0)
    operator delete(v21);
  if (SHIBYTE(v19) < 0)
    operator delete(v18[0]);
  return this;
}

void sub_243A3DC38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;
  void **v26;
  uint64_t v27;
  void *v29;

  std::__tree<std::__value_type<int,std::vector<std::string>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::string>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::string>>>>::destroy(v27, *(char **)(v25 + 96));
  v29 = *(void **)(v25 + 64);
  if (v29)
  {
    *(_QWORD *)(v25 + 72) = v29;
    operator delete(v29);
  }
  boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>::~histogram(v26);
  _Unwind_Resume(a1);
}

std::logic_error *std::invalid_argument::invalid_argument[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
  return result;
}

uint64_t pps::Histogram_Internal::Histogram_Internal(uint64_t a1, uint64_t *a2)
{
  void **v3;
  uint64_t v4;
  uint64_t v5;
  std::vector<std::string> *v7;
  unint64_t v8;
  char *v9;
  _DWORD *v10;
  unint64_t v11;
  char *v12;
  _DWORD *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  unint64_t v20;
  char *v21;
  _DWORD *v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  void **v37;
  _DWORD *v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int64x2_t v43;
  void **v44;
  void *v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  int v53;
  int v54;
  char *v55;
  int v56;
  int v57;
  double v58;
  double v59;
  std::logic_error *exception;
  uint64_t v62;
  uint64_t v63;
  uint64_t **v64;
  void *v65[2];
  uint64_t v66;
  __int128 __p;
  uint64_t v68;
  void *v69[2];
  uint64_t v70;
  __n128 v71;
  uint64_t v72;
  _QWORD v73[2];
  uint64_t v74;
  int v75;
  int64x2_t v76;
  void **v77;
  void **v78;
  int64x2_t v79;
  void **v80;
  void ***v81;

  *(_QWORD *)a1 = &unk_25142A2A0;
  *(_QWORD *)(a1 + 8) = 0;
  v62 = a1 + 8;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 88) = a1 + 96;
  v64 = (uint64_t **)(a1 + 88);
  v3 = (void **)(a1 + 64);
  *(_QWORD *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  v4 = *a2;
  v5 = a2[1];
  if (0xCCCCCCCCCCCCCCCDLL * ((v5 - *a2) >> 4) >= 0xB)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Histogram supports up to 10 dimensions only");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_251429168, (void (*)(void *))MEMORY[0x24BEDAB88]);
  }
  v76 = 0uLL;
  v77 = 0;
  v75 = 0;
  if (v4 != v5)
  {
    v63 = a1 + 80;
    do
    {
      if (*(_QWORD *)(v4 + 64) != *(_QWORD *)(v4 + 56) && *(_BYTE *)(v4 + 24) == 0)
      {
        v12 = *(char **)(a1 + 72);
        v11 = *(_QWORD *)(a1 + 80);
        if ((unint64_t)v12 >= v11)
        {
          v14 = (char *)*v3;
          v15 = (v12 - (_BYTE *)*v3) >> 2;
          v16 = v15 + 1;
          if ((unint64_t)(v15 + 1) >> 62)
            std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::__throw_length_error[abi:ne180100]();
          v17 = v11 - (_QWORD)v14;
          if (v17 >> 1 > v16)
            v16 = v17 >> 1;
          if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL)
            v18 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v18 = v16;
          if (v18)
          {
            v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pps::AxisEnum>>(v63, v18);
            v14 = *(char **)(a1 + 64);
            v12 = *(char **)(a1 + 72);
          }
          else
          {
            v19 = 0;
          }
          v29 = &v19[4 * v15];
          *(_DWORD *)v29 = 1;
          v13 = v29 + 4;
          while (v12 != v14)
          {
            v30 = *((_DWORD *)v12 - 1);
            v12 -= 4;
            *((_DWORD *)v29 - 1) = v30;
            v29 -= 4;
          }
          *(_QWORD *)(a1 + 64) = v29;
          *(_QWORD *)(a1 + 72) = v13;
          *(_QWORD *)(a1 + 80) = &v19[4 * v18];
          if (v14)
            operator delete(v14);
        }
        else
        {
          *(_DWORD *)v12 = 1;
          v13 = v12 + 4;
        }
        *(_QWORD *)(a1 + 72) = v13;
        v73[1] = 0;
        v74 = 0;
        v73[0] = 0;
        boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>::variable<std::vector<double>,boost::histogram::detail::requires_iterable<std::vector<double>,void>>((uint64_t)v65, v4 + 56, (uint64_t)v73);
        v31 = v76.i64[1];
        if (v76.i64[1] >= (unint64_t)v77)
        {
          v34 = 0x6DB6DB6DB6DB6DB7 * ((v76.i64[1] - v76.i64[0]) >> 3);
          v35 = v34 + 1;
          if ((unint64_t)(v34 + 1) > 0x492492492492492)
            std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::__throw_length_error[abi:ne180100]();
          if (0xDB6DB6DB6DB6DB6ELL * (((uint64_t)v77 - v76.i64[0]) >> 3) > v35)
            v35 = 0xDB6DB6DB6DB6DB6ELL * (((uint64_t)v77 - v76.i64[0]) >> 3);
          if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (((uint64_t)v77 - v76.i64[0]) >> 3)) >= 0x249249249249249)
            v36 = 0x492492492492492;
          else
            v36 = v35;
          v81 = &v77;
          if (v36)
            v37 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>((uint64_t)&v77, v36);
          else
            v37 = 0;
          v38 = &v37[7 * v34];
          v78 = v37;
          v79.i64[0] = (uint64_t)v38;
          v80 = &v37[7 * v36];
          *((_QWORD *)v38 + 1) = 0;
          *((_QWORD *)v38 + 2) = 0;
          *((_QWORD *)v38 + 3) = 0;
          *(_OWORD *)(v38 + 2) = *(_OWORD *)v65;
          *((_QWORD *)v38 + 3) = v66;
          v65[0] = 0;
          v65[1] = 0;
          v66 = 0;
          v39 = __p;
          *((_QWORD *)v38 + 6) = v68;
          *((_OWORD *)v38 + 2) = v39;
          v68 = 0;
          __p = 0uLL;
          *v38 = 1;
          v33 = v38 + 14;
          v79.i64[1] = (uint64_t)(v38 + 14);
          v41 = v76.i64[1];
          v40 = v76.i64[0];
          v42 = v79.i64[0];
          if (v76.i64[1] == v76.i64[0])
          {
            v43 = vdupq_n_s64(v76.u64[1]);
          }
          else
          {
            do
            {
              v41 -= 56;
              v42 = boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::variant(v42 - 56, v41);
            }
            while (v41 != v40);
            v43 = v76;
            v33 = (_DWORD *)v79.i64[1];
          }
          v76.i64[0] = v42;
          v76.i64[1] = (uint64_t)v33;
          v79 = v43;
          v44 = v77;
          v77 = v80;
          v80 = v44;
          v78 = (void **)v43.i64[0];
          std::__split_buffer<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::~__split_buffer((uint64_t)&v78);
        }
        else
        {
          *(_QWORD *)(v76.i64[1] + 16) = 0;
          *(_QWORD *)(v31 + 24) = 0;
          *(_OWORD *)(v31 + 8) = *(_OWORD *)v65;
          *(_QWORD *)(v31 + 24) = v66;
          v65[0] = 0;
          v65[1] = 0;
          v66 = 0;
          v32 = v68;
          *(_OWORD *)(v31 + 32) = __p;
          *(_QWORD *)(v31 + 48) = v32;
          v68 = 0;
          __p = 0uLL;
          *(_DWORD *)v31 = 1;
          v33 = (_DWORD *)(v31 + 56);
        }
        v76.i64[1] = (uint64_t)v33;
        if (SHIBYTE(v68) < 0)
          operator delete((void *)__p);
        if (v65[0])
        {
          v65[1] = v65[0];
          operator delete(v65[0]);
        }
        if ((SHIBYTE(v74) & 0x80000000) == 0)
          goto LABEL_91;
        v45 = (void *)v73[0];
      }
      else if (*(_QWORD *)(v4 + 40) == *(_QWORD *)(v4 + 32))
      {
        if (!*(_DWORD *)v4)
          goto LABEL_91;
        v21 = *(char **)(a1 + 72);
        v20 = *(_QWORD *)(a1 + 80);
        if ((unint64_t)v21 >= v20)
        {
          v46 = (char *)*v3;
          v47 = (v21 - (_BYTE *)*v3) >> 2;
          v48 = v47 + 1;
          if ((unint64_t)(v47 + 1) >> 62)
            std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::__throw_length_error[abi:ne180100]();
          v49 = v20 - (_QWORD)v46;
          if (v49 >> 1 > v48)
            v48 = v49 >> 1;
          if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFFCLL)
            v50 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v50 = v48;
          if (v50)
          {
            v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pps::AxisEnum>>(v63, v50);
            v46 = *(char **)(a1 + 64);
            v21 = *(char **)(a1 + 72);
          }
          else
          {
            v51 = 0;
          }
          v55 = &v51[4 * v47];
          *(_DWORD *)v55 = 0;
          v22 = v55 + 4;
          while (v21 != v46)
          {
            v56 = *((_DWORD *)v21 - 1);
            v21 -= 4;
            *((_DWORD *)v55 - 1) = v56;
            v55 -= 4;
          }
          *(_QWORD *)(a1 + 64) = v55;
          *(_QWORD *)(a1 + 72) = v22;
          *(_QWORD *)(a1 + 80) = &v51[4 * v50];
          if (v46)
            operator delete(v46);
        }
        else
        {
          *(_DWORD *)v21 = 0;
          v22 = v21 + 4;
        }
        *(_QWORD *)(a1 + 72) = v22;
        v57 = *(_DWORD *)v4;
        v58 = *(double *)(v4 + 8);
        v59 = *(double *)(v4 + 16);
        v69[0] = 0;
        v69[1] = 0;
        v70 = 0;
        boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>::regular((uint64_t)v65, v57, (uint64_t)v69, v58, v59);
        std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::emplace_back<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>(v76.i64, (uint64_t)v65);
        if (SBYTE7(__p) < 0)
          operator delete(v65[1]);
        if ((SHIBYTE(v70) & 0x80000000) == 0)
          goto LABEL_91;
        v45 = v69[0];
      }
      else
      {
        v78 = (void **)&v75;
        v7 = (std::vector<std::string> *)(std::__tree<std::__value_type<int,std::vector<std::string>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::string>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::string>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v64, &v75, (uint64_t)&std::piecewise_construct, (_DWORD **)&v78)+ 5);
        if (v7 != (std::vector<std::string> *)(v4 + 32))
          std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(v7, *(std::string **)(v4 + 32), *(__int128 **)(v4 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v4 + 40) - *(_QWORD *)(v4 + 32)) >> 3));
        v9 = *(char **)(a1 + 72);
        v8 = *(_QWORD *)(a1 + 80);
        if ((unint64_t)v9 >= v8)
        {
          v23 = (char *)*v3;
          v24 = (v9 - (_BYTE *)*v3) >> 2;
          v25 = v24 + 1;
          if ((unint64_t)(v24 + 1) >> 62)
            std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::__throw_length_error[abi:ne180100]();
          v26 = v8 - (_QWORD)v23;
          if (v26 >> 1 > v25)
            v25 = v26 >> 1;
          if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFFCLL)
            v27 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v27 = v25;
          if (v27)
          {
            v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pps::AxisEnum>>(v63, v27);
            v23 = *(char **)(a1 + 64);
            v9 = *(char **)(a1 + 72);
          }
          else
          {
            v28 = 0;
          }
          v52 = &v28[4 * v24];
          *(_DWORD *)v52 = 2;
          v10 = v52 + 4;
          while (v9 != v23)
          {
            v53 = *((_DWORD *)v9 - 1);
            v9 -= 4;
            *((_DWORD *)v52 - 1) = v53;
            v52 -= 4;
          }
          *(_QWORD *)(a1 + 64) = v52;
          *(_QWORD *)(a1 + 72) = v10;
          *(_QWORD *)(a1 + 80) = &v28[4 * v27];
          if (v23)
            operator delete(v23);
        }
        else
        {
          *(_DWORD *)v9 = 2;
          v10 = v9 + 4;
        }
        *(_QWORD *)(a1 + 72) = v10;
        v54 = -1431655765 * ((*(_QWORD *)(v4 + 40) - *(_QWORD *)(v4 + 32)) >> 3);
        v72 = 0;
        v71 = 0uLL;
        boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>::integer((uint64_t)v65, 0, v54, &v71);
        std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::emplace_back<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>(v76.i64, (uint64_t)v65);
        if (SBYTE7(__p) < 0)
          operator delete(v65[1]);
        if ((SHIBYTE(v72) & 0x80000000) == 0)
          goto LABEL_91;
        v45 = (void *)v71.n128_u64[0];
      }
      operator delete(v45);
LABEL_91:
      ++v75;
      v4 += 80;
    }
    while (v4 != v5);
  }
  boost::histogram::make_histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::detail::requires_sequence_of_any_axis<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,void>>((uint64_t)&v76, (uint64_t)v65);
  boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>::operator=(v62, (uint64_t)v65);
  boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::destroy((uint64_t)&__p);
  v78 = v65;
  std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::__destroy_vector::operator()[abi:ne180100](&v78);
  v65[0] = &v76;
  std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)v65);
  return a1;
}

void sub_243A3E3C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char **a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  uint64_t v41;
  void **v42;
  void *v44;

  std::__tree<std::__value_type<int,std::vector<std::string>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::string>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::string>>>>::destroy(a12, *a9);
  v44 = *v42;
  if (*v42)
  {
    *(_QWORD *)(v41 + 72) = v44;
    operator delete(v44);
  }
  boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>::~histogram(a10);
  _Unwind_Resume(a1);
}

uint64_t boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>::variable<std::vector<double>,boost::histogram::detail::requires_iterable<std::vector<double>,void>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  double *v5;
  void *__p[2];
  uint64_t v8;

  v4 = *(_QWORD **)a2;
  v5 = *(double **)(a2 + 8);
  *(_OWORD *)__p = *(_OWORD *)a3;
  v8 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>::variable<std::__wrap_iter<double const*>,boost::histogram::detail::requires_iterator<std::__wrap_iter<double const*>,void>>(a1, v4, v5, (__int128 *)__p);
  if (SHIBYTE(v8) < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_243A3E520(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::emplace_back<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  __int128 v16;
  _QWORD v18[5];

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (v7 >= v6)
  {
    v10 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v7 - *a1) >> 3);
    v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) > 0x492492492492492)
      std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::__throw_length_error[abi:ne180100]();
    v12 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v12 > v11)
      v11 = 2 * v12;
    if (v12 >= 0x249249249249249)
      v13 = 0x492492492492492;
    else
      v13 = v11;
    v18[4] = v4;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>(v4, v13);
    else
      v14 = 0;
    v15 = &v14[56 * v10];
    v18[0] = v14;
    v18[1] = v15;
    v18[3] = &v14[56 * v13];
    *((_DWORD *)v15 + 2) = *(_DWORD *)a2;
    v16 = *(_OWORD *)(a2 + 8);
    *((_QWORD *)v15 + 4) = *(_QWORD *)(a2 + 24);
    *((_OWORD *)v15 + 1) = v16;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *((_DWORD *)v15 + 10) = *(_DWORD *)(a2 + 32);
    *(_DWORD *)v15 = 2;
    v18[2] = v15 + 56;
    std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::__swap_out_circular_buffer(a1, v18);
    v9 = a1[1];
    std::__split_buffer<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::~__split_buffer((uint64_t)v18);
  }
  else
  {
    *(_DWORD *)(v7 + 8) = *(_DWORD *)a2;
    v8 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(v7 + 32) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(v7 + 16) = v8;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_DWORD *)(v7 + 40) = *(_DWORD *)(a2 + 32);
    *(_DWORD *)v7 = 2;
    v9 = v7 + 56;
    a1[1] = v7 + 56;
  }
  a1[1] = v9;
  return v9 - 56;
}

void sub_243A3E6AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::emplace_back<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  __int128 v16;
  _QWORD v18[5];

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (v7 >= v6)
  {
    v10 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v7 - *a1) >> 3);
    v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) > 0x492492492492492)
      std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::__throw_length_error[abi:ne180100]();
    v12 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v12 > v11)
      v11 = 2 * v12;
    if (v12 >= 0x249249249249249)
      v13 = 0x492492492492492;
    else
      v13 = v11;
    v18[4] = v4;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>(v4, v13);
    else
      v14 = 0;
    v15 = &v14[56 * v10];
    v18[0] = v14;
    v18[1] = v15;
    v18[3] = &v14[56 * v13];
    *((_DWORD *)v15 + 2) = *(_DWORD *)a2;
    v16 = *(_OWORD *)(a2 + 8);
    *((_QWORD *)v15 + 4) = *(_QWORD *)(a2 + 24);
    *((_OWORD *)v15 + 1) = v16;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_OWORD *)(v15 + 40) = *(_OWORD *)(a2 + 32);
    *(_DWORD *)v15 = 0;
    v18[2] = v15 + 56;
    std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::__swap_out_circular_buffer(a1, v18);
    v9 = a1[1];
    std::__split_buffer<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::~__split_buffer((uint64_t)v18);
  }
  else
  {
    *(_DWORD *)(v7 + 8) = *(_DWORD *)a2;
    v8 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(v7 + 32) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(v7 + 16) = v8;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_OWORD *)(v7 + 40) = *(_OWORD *)(a2 + 32);
    *(_DWORD *)v7 = 0;
    v9 = v7 + 56;
    a1[1] = v7 + 56;
  }
  a1[1] = v9;
  return v9 - 56;
}

void sub_243A3E828(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void boost::histogram::make_histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::detail::requires_sequence_of_any_axis<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,void>>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD v2[2];
  char v3;
  uint64_t v4;

  v2[1] = 0;
  v3 = 0;
  v4 = 0;
  boost::histogram::make_histogram_with<boost::histogram::unlimited_storage<std::allocator<char>>,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::detail::requires_sequence_of_any_axis<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,void>>((uint64_t)v2, a1, a2);
  boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::destroy((uint64_t)v2);
}

void sub_243A3E87C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::destroy((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::__vdeallocate((void **)a1);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  if (a1 != a2)
  {
    v4 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a2 + 32) = v4;
    LOBYTE(v4) = *(_BYTE *)(a1 + 40);
    *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
    *(_BYTE *)(a2 + 40) = v4;
    v5 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a2 + 48) = v5;
  }
  return a1;
}

pps::Histogram_Internal *pps::Histogram_Internal::Histogram_Internal(pps::Histogram_Internal *this, const pps::Histogram_Internal *a2)
{
  uint64_t **v4;
  char *v5;

  *(_QWORD *)this = &unk_25142A2A0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_BYTE *)this + 48) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 11) = (char *)this + 96;
  v4 = (uint64_t **)((char *)this + 88);
  v5 = (char *)this + 64;
  *((_QWORD *)this + 13) = 0;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>::operator=((uint64_t)this + 8, (uint64_t *)a2 + 1);
  if (this != a2)
  {
    std::vector<pps::AxisEnum>::__assign_with_size[abi:ne180100]<pps::AxisEnum*,pps::AxisEnum*>(v5, *((char **)a2 + 8), *((_QWORD *)a2 + 9), (uint64_t)(*((_QWORD *)a2 + 9) - *((_QWORD *)a2 + 8)) >> 2);
    std::__tree<std::__value_type<int,std::vector<std::string>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::string>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::string>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<int,std::vector<std::string>>,std::__tree_node<std::__value_type<int,std::vector<std::string>>,void *> *,long>>(v4, *((_QWORD **)a2 + 11), (_QWORD *)a2 + 12);
  }
  return this;
}

void sub_243A3E9C0(_Unwind_Exception *a1)
{
  void **v1;
  uint64_t v2;
  void **v3;
  uint64_t v4;
  char **v5;
  void *v7;

  std::__tree<std::__value_type<int,std::vector<std::string>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::string>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::string>>>>::destroy(v4, *v5);
  v7 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v2 + 72) = v7;
    operator delete(v7);
  }
  boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>::~histogram(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>::operator=(uint64_t a1, uint64_t *a2)
{
  if ((uint64_t *)a1 != a2)
    std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::__assign_with_size[abi:ne180100]<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>*,boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>*>(a1, *a2, a2[1], 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 3));
  boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::operator=(a1 + 24, (uint64_t)(a2 + 3));
  return a1;
}

uint64_t pps::Histogram_Internal::operator==(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  char *v7;
  char *v8;
  _DWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  BOOL v15;
  _QWORD *v16;
  _QWORD *v17;
  char v18;
  uint64_t v19;
  uint64_t v20;

  if ((uint64_t *)a1 == a2)
    return 1;
  v19 = v2;
  v20 = v3;
  result = boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>::operator==<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>((int **)(a1 + 8), a2 + 1);
  if ((_DWORD)result)
  {
    v8 = *(char **)(a1 + 64);
    v7 = *(char **)(a1 + 72);
    v9 = (_DWORD *)a2[8];
    if (v7 - v8 != a2[9] - (_QWORD)v9)
      return 0;
    while (v8 != v7)
    {
      if (*(_DWORD *)v8 != *v9)
        return 0;
      v8 += 4;
      ++v9;
    }
    if (*(_QWORD *)(a1 + 104) == a2[13])
    {
      v10 = *(_QWORD **)(a1 + 88);
      v11 = (_QWORD *)(a1 + 96);
      if (v10 == v11)
      {
        return 1;
      }
      else
      {
        v12 = (_QWORD *)a2[11];
        do
        {
          result = std::__equal_to::operator()[abi:ne180100]<std::pair<int const,std::vector<std::string>>,std::pair<int const,std::vector<std::string>>>((uint64_t)&v18, (uint64_t)(v10 + 4), (uint64_t)(v12 + 4));
          if (!(_DWORD)result)
            break;
          v13 = (_QWORD *)v10[1];
          v14 = v10;
          if (v13)
          {
            do
            {
              v10 = v13;
              v13 = (_QWORD *)*v13;
            }
            while (v13);
          }
          else
          {
            do
            {
              v10 = (_QWORD *)v14[2];
              v15 = *v10 == (_QWORD)v14;
              v14 = v10;
            }
            while (!v15);
          }
          v16 = (_QWORD *)v12[1];
          if (v16)
          {
            do
            {
              v17 = v16;
              v16 = (_QWORD *)*v16;
            }
            while (v16);
          }
          else
          {
            do
            {
              v17 = (_QWORD *)v12[2];
              v15 = *v17 == (_QWORD)v12;
              v12 = v17;
            }
            while (!v15);
          }
          v12 = v17;
        }
        while (v10 != v11);
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>::operator==<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>(int **a1, uint64_t *a2)
{
  uint64_t result;

  result = boost::histogram::detail::axes_equal<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>(a1, a2);
  if ((_DWORD)result)
    return boost::histogram::unlimited_storage<std::allocator<char>>::operator==((uint64_t)(a1 + 3), (uint64_t)(a2 + 3));
  return result;
}

uint64_t pps::Histogram_Internal::axisCount(pps::Histogram_Internal *this)
{
  return -1227133513 * ((*((_QWORD *)this + 2) - *((_QWORD *)this + 1)) >> 3);
}

double pps::Histogram_Internal::axisRangeOfBinAt(pps::Histogram_Internal *this, int a2, signed int a3)
{
  uint64_t v4;
  _DWORD *v5;
  signed int v6;
  BOOL v7;
  uint64_t *v8;
  double v9;
  int v11;
  int *v12;
  _DWORD v13[14];
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v4 = *((_QWORD *)this + 12);
  if (!v4)
    goto LABEL_11;
  v5 = (_DWORD *)((char *)this + 96);
  do
  {
    v6 = *(_DWORD *)(v4 + 32);
    v7 = v6 < a3;
    if (v6 >= a3)
      v8 = (uint64_t *)v4;
    else
      v8 = (uint64_t *)(v4 + 8);
    if (!v7)
      v5 = (_DWORD *)v4;
    v4 = *v8;
  }
  while (*v8);
  if (v5 == (_DWORD *)((char *)this + 96) || (v9 = 0.0, v5[8] > a3))
  {
LABEL_11:
    pps::Histogram_Internal::axis(this, a3, v13);
    v11 = a2;
    v12 = &v11;
    v9 = _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNKS2_7variantIJS5_SA_SF_EE3binEiEUlRKT_E_RKSG_EEEENSN_11result_typeERSN_(v13, &v12);
    boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::destroy_content((uint64_t)v13);
  }
  return v9;
}

void sub_243A3ECC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::destroy_content((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL pps::Histogram_Internal::isCategoryAxis(pps::Histogram_Internal *this, int a2)
{
  char *v2;
  char *v3;
  char *v4;
  char *v5;
  int v6;
  BOOL v7;
  char **v8;

  v4 = (char *)*((_QWORD *)this + 12);
  v2 = (char *)this + 96;
  v3 = v4;
  if (!v4)
    goto LABEL_11;
  v5 = v2;
  do
  {
    v6 = *((_DWORD *)v3 + 8);
    v7 = v6 < a2;
    if (v6 >= a2)
      v8 = (char **)v3;
    else
      v8 = (char **)(v3 + 8);
    if (!v7)
      v5 = v3;
    v3 = *v8;
  }
  while (*v8);
  if (v5 == v2 || *((_DWORD *)v5 + 8) > a2)
LABEL_11:
    v5 = v2;
  return v5 != v2;
}

void pps::Histogram_Internal::axis(pps::Histogram_Internal *this@<X0>, unsigned int a2@<W1>, _DWORD *a3@<X8>)
{
  uint64_t v4;
  int v7;
  _DWORD *v8;
  int v9;
  int *v10;
  _DWORD *v11;
  int v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  int v17[14];
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v4 = *((_QWORD *)this + 1);
  if (0x6DB6DB6DB6DB6DB7 * ((*((_QWORD *)this + 2) - v4) >> 3) <= (unint64_t)a2)
    pps::Histogram_Internal::axis();
  boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::variant((uint64_t)v17, v4 + 56 * a2);
  v13 = 0u;
  v14 = 0u;
  v15 = 0;
  v16 = 0x3FF0000000000000;
  v12 = 0;
  v7 = *(_DWORD *)(*((_QWORD *)this + 8) + 4 * (int)a2);
  if (v7 == 2)
  {
    v10 = boost::histogram::axis::get<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>,boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>(v17);
    v9 = boost::detail::variant::make_initializer_node::apply<boost::mpl::pair<boost::detail::variant::make_initializer_node::apply<boost::mpl::pair<boost::detail::variant::make_initializer_node::apply<boost::mpl::pair<boost::detail::variant::initializer_root,mpl_::int_<0>>,boost::mpl::l_iter<boost::mpl::list3<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::initializer_node,mpl_::int_<1>>,boost::mpl::l_iter<boost::mpl::list2<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::initializer_node,mpl_::int_<2>>,boost::mpl::l_iter<boost::mpl::list1<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::initializer_node::initialize(a3 + 2, (uint64_t)v10);
  }
  else if (v7 == 1)
  {
    v8 = boost::histogram::axis::get<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>(v17);
    v9 = boost::detail::variant::make_initializer_node::apply<boost::mpl::pair<boost::detail::variant::make_initializer_node::apply<boost::mpl::pair<boost::detail::variant::initializer_root,mpl_::int_<0>>,boost::mpl::l_iter<boost::mpl::list3<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::initializer_node,mpl_::int_<1>>,boost::mpl::l_iter<boost::mpl::list2<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::initializer_node::initialize((std::string *)(a3 + 2), (uint64_t)v8);
  }
  else
  {
    v11 = boost::histogram::axis::get<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>(v17);
    v9 = boost::detail::variant::make_initializer_node::apply<boost::mpl::pair<boost::detail::variant::initializer_root,mpl_::int_<0>>,boost::mpl::l_iter<boost::mpl::list3<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::initializer_node::initialize((uint64_t)(a3 + 2), (uint64_t)v11);
  }
  *a3 = v9;
  boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::destroy_content((uint64_t)&v12);
  boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::destroy_content((uint64_t)v17);
}

void sub_243A3EE58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::destroy_content((uint64_t)va);
  boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::destroy_content((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t pps::Histogram_Internal::binCount(pps::Histogram_Internal *this)
{
  return *((_QWORD *)this + 5);
}

uint64_t *pps::Histogram_Internal::categoriesPerAxis@<X0>(pps::Histogram_Internal *this@<X0>, uint64_t *a2@<X8>)
{
  return std::map<int,std::vector<std::string>>::map[abi:ne180100](a2, (uint64_t)this + 88);
}

void pps::Histogram_Internal::cumulativeData(pps::Histogram_Internal *this@<X0>, int a2@<W1>, _QWORD *a3@<X8>, double a4@<D0>)
{
  char *v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  char *v12;
  char *v13;

  pps::Histogram_Internal::data(this, a2, (uint64_t)&v12, a4);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  std::vector<unsigned long long>::resize((uint64_t)a3, (v13 - v12) >> 3);
  v5 = v12;
  v6 = v13;
  if (v12 == v13)
  {
LABEL_5:
    if (!v5)
      return;
    goto LABEL_6;
  }
  v7 = (_QWORD *)*a3;
  v8 = v12 + 8;
  v9 = *(_QWORD *)v12;
  *(_QWORD *)*a3 = *(_QWORD *)v12;
  if (v5 + 8 != v6)
  {
    v10 = v7 + 1;
    do
    {
      v11 = *(_QWORD *)v8;
      v8 += 8;
      v9 += v11;
      *v10++ = v9;
    }
    while (v8 != v6);
    goto LABEL_5;
  }
LABEL_6:
  v13 = v5;
  operator delete(v5);
}

void sub_243A3EF20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;
  void *v13;

  v13 = *(void **)v11;
  if (*(_QWORD *)v11)
  {
    *(_QWORD *)(v11 + 8) = v13;
    operator delete(v13);
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pps::Histogram_Internal::data(pps::Histogram_Internal *this@<X0>, int a2@<W1>, uint64_t a3@<X8>, double a4@<D0>)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v18[2];
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22[2];
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  if (a2)
  {
    v5 = *((_QWORD *)this + 5);
    if (v5)
    {
      v6 = 0;
      v7 = 0;
      v8 = (char *)this + 32;
      do
      {
        v22[0] = (uint64_t)v8;
        v22[1] = v7;
        if ((unint64_t)v6 >= *(_QWORD *)(a3 + 16))
        {
          v6 = std::vector<unsigned long>::__emplace_back_slow_path<boost::histogram::unlimited_storage<std::allocator<char>>::reference_t<boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type const> &>((void **)a3, v22, a4);
        }
        else
        {
          v19 = v22;
          a4 = _ZNK5boost9histogram17unlimited_storageINSt3__19allocatorIcEEE11buffer_type5applyIZNKS5_11reference_tIKS6_EcvdEvEUlPKT_E_JEEEDcOSB_DpOT0_((uint64_t)v8, (uint64_t)&v19, a4);
          *v6++ = (unint64_t)a4;
          *(_QWORD *)(a3 + 8) = v6;
        }
        *(_QWORD *)(a3 + 8) = v6;
        ++v7;
      }
      while (v5 != v7);
    }
  }
  else
  {
    boost::histogram::indexed_range<boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>> const>::indexed_range((uint64_t)v22, (int **)this + 1, 0);
    v11 = v23;
    v10 = v24;
    v19 = (uint64_t *)v23;
    v20 = v24;
    v21 = v22;
    v12 = v25;
    v13 = v26;
    if (v24 != v26 || v23 != (_QWORD)v25)
    {
      do
      {
        v18[0] = v10;
        v18[1] = v11;
        v15 = *(_QWORD **)(a3 + 8);
        if ((unint64_t)v15 >= *(_QWORD *)(a3 + 16))
        {
          v16 = std::vector<unsigned long>::__emplace_back_slow_path<boost::histogram::unlimited_storage<std::allocator<char>>::reference_t<boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type const>>((void **)a3, v18, v9);
        }
        else
        {
          v27 = v18;
          *v15 = (unint64_t)_ZNK5boost9histogram17unlimited_storageINSt3__19allocatorIcEEE11buffer_type5applyIZNKS5_11reference_tIKS6_EcvdEvEUlPKT_E_JEEEDcOSB_DpOT0_(v10, (uint64_t)&v27, v9);
          v16 = v15 + 1;
          *(_QWORD *)(a3 + 8) = v16;
        }
        *(_QWORD *)(a3 + 8) = v16;
        boost::histogram::indexed_range<boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>> const>::range_iterator::increment((uint64_t *)&v19);
        v11 = (uint64_t)v19;
        v10 = v20;
      }
      while (v20 != v13 || v19 != v12);
    }
  }
}

void sub_243A3F08C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t pps::Histogram_Internal::hash(pps::Histogram_Internal *this, double a2)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  unint64_t v5;
  _QWORD v7[2];
  _QWORD *v8;

  v2 = *((_QWORD *)this + 5);
  if (!v2)
    return 0;
  v3 = 0;
  v4 = (char *)this + 32;
  v5 = *((_QWORD *)this + 5);
  do
  {
    v7[0] = v4;
    v7[1] = v3;
    v8 = v7;
    a2 = _ZNK5boost9histogram17unlimited_storageINSt3__19allocatorIcEEE11buffer_type5applyIZNKS5_11reference_tIKS6_EcvdEvEUlPKT_E_JEEEDcOSB_DpOT0_((uint64_t)v4, (uint64_t)&v8, a2);
    v5 ^= (v5 << 6) + (v5 >> 2) + 2654435769u + (unint64_t)a2;
    ++v3;
  }
  while (v2 != v3);
  return v5;
}

uint64_t pps::Histogram_Internal::indexOfSample(pps::Histogram_Internal *this, double a2, unsigned int a3)
{
  uint64_t v3;
  double v5;
  double *v6;
  double **v7;
  _DWORD v8[14];
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  pps::Histogram_Internal::axis(this, a3, v8);
  v6 = &v5;
  v7 = &v6;
  v3 = boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::apply_visitor<boost::detail::variant::result_wrapper1<int boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::index<double>(double const&)::{lambda(double const&)#1},boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>> const&>>((uint64_t)v8, &v7);
  boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::destroy_content((uint64_t)v8);
  return v3;
}

void sub_243A3F1E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::destroy_content((uint64_t)va);
  _Unwind_Resume(a1);
}

void pps::Histogram_Internal::indicesOfSample(pps::Histogram_Internal *this@<X0>, _QWORD *a2@<X1>, char **a3@<X8>)
{
  uint64_t v4;
  unint64_t v7;
  int v8;
  int v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  int v20;
  std::logic_error *exception;

  v4 = -1227133513 * ((*((_QWORD *)this + 2) - *((_QWORD *)this + 1)) >> 3);
  if (v4 != (uint64_t)(a2[1] - *a2) >> 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Sample size must match number of dimensions");
    __cxa_throw(exception, (struct type_info *)off_251429168, (void (*)(void *))MEMORY[0x24BEDAB88]);
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (v4)
  {
    v7 = 0;
    do
    {
      v8 = pps::Histogram_Internal::indexOfSample(this, *(double *)(*a2 + 8 * v7), v7);
      v9 = v8;
      v11 = a3[1];
      v10 = (unint64_t)a3[2];
      if ((unint64_t)v11 >= v10)
      {
        v13 = *a3;
        v14 = (v11 - *a3) >> 2;
        v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 62)
          std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::__throw_length_error[abi:ne180100]();
        v16 = v10 - (_QWORD)v13;
        if (v16 >> 1 > v15)
          v15 = v16 >> 1;
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL)
          v17 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v17 = v15;
        if (v17)
        {
          v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pps::AxisEnum>>((uint64_t)(a3 + 2), v17);
          v13 = *a3;
          v11 = a3[1];
        }
        else
        {
          v18 = 0;
        }
        v19 = &v18[4 * v14];
        *(_DWORD *)v19 = v9;
        v12 = v19 + 4;
        while (v11 != v13)
        {
          v20 = *((_DWORD *)v11 - 1);
          v11 -= 4;
          *((_DWORD *)v19 - 1) = v20;
          v19 -= 4;
        }
        *a3 = v19;
        a3[1] = v12;
        a3[2] = &v18[4 * v17];
        if (v13)
          operator delete(v13);
      }
      else
      {
        *(_DWORD *)v11 = v8;
        v12 = v11 + 4;
      }
      a3[1] = v12;
      ++v7;
    }
    while (v7 < -1227133513 * ((*((_QWORD *)this + 2) - *((_QWORD *)this + 1)) >> 3));
  }
}

void sub_243A3F398(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

double pps::Histogram_Internal::maxRangeForAxis(pps::Histogram_Internal *this, signed int a2)
{
  uint64_t v2;
  _DWORD *v3;
  signed int v4;
  BOOL v5;
  uint64_t *v6;
  double v7;
  double v8;
  int v10;
  int *v11;
  _DWORD v12[14];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v2 = *((_QWORD *)this + 12);
  if (!v2)
    goto LABEL_11;
  v3 = (_DWORD *)((char *)this + 96);
  do
  {
    v4 = *(_DWORD *)(v2 + 32);
    v5 = v4 < a2;
    if (v4 >= a2)
      v6 = (uint64_t *)v2;
    else
      v6 = (uint64_t *)(v2 + 8);
    if (!v5)
      v3 = (_DWORD *)v2;
    v2 = *v6;
  }
  while (*v6);
  if (v3 == (_DWORD *)((char *)this + 96) || (v7 = 0.0, v3[8] > a2))
  {
LABEL_11:
    pps::Histogram_Internal::axis(this, a2, v12);
    v11 = &v10;
    if ((int)_ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNKS2_7variantIJS5_SA_SF_EE4sizeEvEUlRKT_E_RKSG_EEEENSN_11result_typeERSN_((uint64_t)v12) < 1)
    {
      v7 = 0.0;
    }
    else
    {
      v11 = &v10;
      v10 = _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNKS2_7variantIJS5_SA_SF_EE4sizeEvEUlRKT_E_RKSG_EEEENSN_11result_typeERSN_((uint64_t)v12)
          - 1;
      v11 = &v10;
      _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNKS2_7variantIJS5_SA_SF_EE3binEiEUlRKT_E_RKSG_EEEENSN_11result_typeERSN_(v12, &v11);
      v7 = v8;
    }
    boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::destroy_content((uint64_t)v12);
  }
  return v7;
}

void sub_243A3F4C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::destroy_content((uint64_t)va);
  _Unwind_Resume(a1);
}

double pps::Histogram_Internal::maxSampleForAxis(pps::Histogram_Internal *this, signed int a2)
{
  uint64_t v4;
  _DWORD *v5;
  signed int v6;
  BOOL v7;
  uint64_t *v8;
  double v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  double v13;
  void *__p;
  char *v16;

  v4 = *((_QWORD *)this + 12);
  if (!v4)
    goto LABEL_11;
  v5 = (_DWORD *)((char *)this + 96);
  do
  {
    v6 = *(_DWORD *)(v4 + 32);
    v7 = v6 < a2;
    if (v6 >= a2)
      v8 = (uint64_t *)v4;
    else
      v8 = (uint64_t *)(v4 + 8);
    if (!v7)
      v5 = (_DWORD *)v4;
    v4 = *v8;
  }
  while (*v8);
  if (v5 == (_DWORD *)((char *)this + 96) || (v9 = 0.0, v5[8] > a2))
  {
LABEL_11:
    pps::Histogram_Internal::binCountsForAxis((int **)this, a2, &__p);
    v10 = v16;
    v11 = (unint64_t)(v16 - (_BYTE *)__p) >> 3;
    while (v10 != __p)
    {
      LODWORD(v11) = v11 - 1;
      v12 = *((_QWORD *)v10 - 1);
      v10 -= 8;
      if (v12)
      {
        v13 = pps::Histogram_Internal::rightEdgeOfBin(this, v11, a2);
        goto LABEL_16;
      }
    }
    v13 = pps::Histogram_Internal::maxRangeForAxis(this, a2);
LABEL_16:
    v9 = v13;
    if (__p)
    {
      v16 = (char *)__p;
      operator delete(__p);
    }
  }
  return v9;
}

void sub_243A3F5C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pps::Histogram_Internal::binCountsForAxis(int **this@<X0>, unsigned int a2@<W1>, _QWORD *a3@<X8>)
{
  int v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  double v13;
  uint64_t v14;
  _QWORD v15[2];
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD v19[2];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _DWORD v25[14];
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  pps::Histogram_Internal::axis((pps::Histogram_Internal *)this, a2, v25);
  v19[0] = &v16;
  v6 = _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNKS2_7variantIJS5_SA_SF_EE4sizeEvEUlRKT_E_RKSG_EEEENSN_11result_typeERSN_((uint64_t)v25);
  std::vector<unsigned long>::vector(a3, v6);
  boost::histogram::indexed_range<boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>> const>::indexed_range((uint64_t)v19, this + 1, 0);
  v9 = v20;
  v8 = v21;
  v16 = v20;
  v17 = v21;
  v18 = v19;
  v10 = v22;
  v11 = v23;
  if (v21 != v23 || v20 != v22)
  {
    do
    {
      do
      {
        v12 = v18;
        v15[0] = v8;
        v15[1] = v9;
        v24 = v15;
        v13 = _ZNK5boost9histogram17unlimited_storageINSt3__19allocatorIcEEE11buffer_type5applyIZNKS5_11reference_tIKS6_EcvdEvEUlPKT_E_JEEEDcOSB_DpOT0_(v8, (uint64_t)&v24, v7);
        v14 = SLODWORD(v12[2 * a2 + 6]);
        *(_QWORD *)(*a3 + 8 * v14) = (unint64_t)(v13 + (double)*(unint64_t *)(*a3 + 8 * v14));
        boost::histogram::indexed_range<boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>> const>::range_iterator::increment(&v16);
        v9 = v16;
        v8 = v17;
      }
      while (v17 != v11);
    }
    while (v16 != v10);
  }
  boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::destroy_content((uint64_t)v25);
}

void sub_243A3F70C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;

  v4 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v4;
    operator delete(v4);
  }
  boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::destroy_content(v2 - 128);
  _Unwind_Resume(a1);
}

double pps::Histogram_Internal::rightEdgeOfBin(pps::Histogram_Internal *this, int a2, signed int a3)
{
  uint64_t v4;
  _DWORD *v5;
  signed int v6;
  BOOL v7;
  uint64_t *v8;
  double v9;
  double v10;
  int v12;
  int *v13;
  _DWORD v14[14];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = *((_QWORD *)this + 12);
  if (!v4)
    goto LABEL_11;
  v5 = (_DWORD *)((char *)this + 96);
  do
  {
    v6 = *(_DWORD *)(v4 + 32);
    v7 = v6 < a3;
    if (v6 >= a3)
      v8 = (uint64_t *)v4;
    else
      v8 = (uint64_t *)(v4 + 8);
    if (!v7)
      v5 = (_DWORD *)v4;
    v4 = *v8;
  }
  while (*v8);
  if (v5 == (_DWORD *)((char *)this + 96) || (v9 = 0.0, v5[8] > a3))
  {
LABEL_11:
    pps::Histogram_Internal::axis(this, a3, v14);
    v12 = a2;
    v13 = &v12;
    _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNKS2_7variantIJS5_SA_SF_EE3binEiEUlRKT_E_RKSG_EEEENSN_11result_typeERSN_(v14, &v13);
    v9 = v10;
    boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::destroy_content((uint64_t)v14);
  }
  return v9;
}

void sub_243A3F814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::destroy_content((uint64_t)va);
  _Unwind_Resume(a1);
}

void pps::Histogram_Internal::meanForAxis(pps::Histogram_Internal *this, signed int a2, double a3)
{
  uint64_t v5;
  _DWORD *v6;
  signed int v7;
  BOOL v8;
  uint64_t *v9;
  uint64_t v10;
  double i;
  double v12;
  double v13;
  void *__p[3];
  char v15;
  char *v16;
  _DWORD v17[14];
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v5 = *((_QWORD *)this + 12);
  if (!v5)
    goto LABEL_19;
  v6 = (_DWORD *)((char *)this + 96);
  do
  {
    v7 = *(_DWORD *)(v5 + 32);
    v8 = v7 < a2;
    if (v7 >= a2)
      v9 = (uint64_t *)v5;
    else
      v9 = (uint64_t *)(v5 + 8);
    if (!v8)
      v6 = (_DWORD *)v5;
    v5 = *v9;
  }
  while (*v9);
  if (v6 == (_DWORD *)((char *)this + 96) || (a3 = 0.0, v6[8] > a2))
  {
LABEL_19:
    if (pps::Histogram_Internal::sum(this, 0, a3))
    {
      pps::Histogram_Internal::binCountsForAxis((int **)this, a2, __p);
      pps::Histogram_Internal::axis(this, a2, v17);
      v10 = 0;
      for (i = 0.0; ; i = i + (v12 + v13) * 0.5 * (double)*((unint64_t *)__p[0] + v10++))
      {
        v16 = &v15;
        if (v10 >= (int)_ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNKS2_7variantIJS5_SA_SF_EE4sizeEvEUlRKT_E_RKSG_EEEENSN_11result_typeERSN_((uint64_t)v17))
          break;
        v12 = pps::Histogram_Internal::leftEdgeOfBin(this, v10, a2);
        v13 = pps::Histogram_Internal::rightEdgeOfBin(this, v10, a2);
      }
      boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::destroy_content((uint64_t)v17);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
    }
  }
}

void sub_243A3F9B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t pps::Histogram_Internal::sum(pps::Histogram_Internal *this, int a2, double a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD v15[2];
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD v19[2];
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;

  if (a2)
  {
    v3 = *((_QWORD *)this + 5);
    if (v3)
    {
      v4 = 0;
      v5 = 0;
      v6 = (char *)this + 32;
      do
      {
        v19[0] = v6;
        v19[1] = v5;
        v16 = v19;
        a3 = _ZNK5boost9histogram17unlimited_storageINSt3__19allocatorIcEEE11buffer_type5applyIZNKS5_11reference_tIKS6_EcvdEvEUlPKT_E_JEEEDcOSB_DpOT0_((uint64_t)v6, (uint64_t)&v16, a3)+ (double)v4;
        v4 = (unint64_t)a3;
        ++v5;
      }
      while (v3 != v5);
    }
    else
    {
      return 0;
    }
  }
  else
  {
    boost::histogram::indexed_range<boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>> const>::indexed_range((uint64_t)v19, (int **)this + 1, 0);
    v9 = v20;
    v8 = v21;
    v16 = (_QWORD *)v20;
    v17 = v21;
    v18 = v19;
    v10 = v22;
    v11 = v23;
    v4 = 0;
    if (v21 != v23 || v20 != (_QWORD)v22)
    {
      do
      {
        v15[0] = v8;
        v15[1] = v9;
        v24 = v15;
        v4 = (unint64_t)(_ZNK5boost9histogram17unlimited_storageINSt3__19allocatorIcEEE11buffer_type5applyIZNKS5_11reference_tIKS6_EcvdEvEUlPKT_E_JEEEDcOSB_DpOT0_(v8, (uint64_t)&v24, v7)+ (double)v4);
        boost::histogram::indexed_range<boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>> const>::range_iterator::increment((uint64_t *)&v16);
        v9 = (uint64_t)v16;
        v8 = v17;
      }
      while (v17 != v11 || v16 != v10);
    }
  }
  return v4;
}

double pps::Histogram_Internal::midPointOfBin(pps::Histogram_Internal *this, int a2, signed int a3)
{
  double v6;

  v6 = pps::Histogram_Internal::leftEdgeOfBin(this, a2, a3);
  return (v6 + pps::Histogram_Internal::rightEdgeOfBin(this, a2, a3)) * 0.5;
}

double pps::Histogram_Internal::medianForAxis(pps::Histogram_Internal *this, signed int a2)
{
  uint64_t v4;
  _DWORD *v5;
  signed int v6;
  BOOL v7;
  uint64_t *v8;
  double v9;
  unsigned int v10;
  uint64_t v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  void *v17;
  double v18;
  int v19;
  uint64_t v20;
  int *v21;
  int v22;
  double v23;
  unint64_t v24;
  double v25;
  void *__p[3];
  unsigned int v28;
  unsigned int *v29;
  _DWORD v30[14];
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v4 = *((_QWORD *)this + 12);
  if (!v4)
    goto LABEL_11;
  v5 = (_DWORD *)((char *)this + 96);
  do
  {
    v6 = *(_DWORD *)(v4 + 32);
    v7 = v6 < a2;
    if (v6 >= a2)
      v8 = (uint64_t *)v4;
    else
      v8 = (uint64_t *)(v4 + 8);
    if (!v7)
      v5 = (_DWORD *)v4;
    v4 = *v8;
  }
  while (*v8);
  if (v5 == (_DWORD *)((char *)this + 96) || (v9 = 0.0, v5[8] > a2))
  {
LABEL_11:
    pps::Histogram_Internal::axis(this, a2, v30);
    __p[0] = &v29;
    v10 = _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNKS2_7variantIJS5_SA_SF_EE4sizeEvEUlRKT_E_RKSG_EEEENSN_11result_typeERSN_((uint64_t)v30);
    if ((int)v10 < 1)
    {
      v9 = 0.0;
    }
    else
    {
      pps::Histogram_Internal::binCountsForAxis((int **)this, a2, __p);
      v11 = v10 >> 1;
      v28 = v10 >> 1;
      v29 = &v28;
      v12 = _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNKS2_7variantIJS5_SA_SF_EE3binEiEUlRKT_E_RKSG_EEEENSN_11result_typeERSN_(v30, (int **)&v29);
      v14 = v13;
      v15 = pps::Histogram_Internal::leftEdgeOfBin(this, v10 >> 1, a2);
      v16 = v15;
      v17 = __p[0];
      v18 = 0.0;
      if (v10 >= 2)
      {
        v19 = 0;
        v20 = 8 * v11;
        v21 = (int *)__p[0];
        do
        {
          v22 = *v21;
          v21 += 2;
          v19 += v22;
          v20 -= 8;
        }
        while (v20);
        v18 = (double)v19;
      }
      v23 = v14 - v12;
      v24 = *((_QWORD *)__p[0] + v11);
      if (v24)
      {
        v25 = ((double)pps::Histogram_Internal::sum(this, 0, v15) * 0.5 - v18) / (double)v24;
        v17 = __p[0];
        v9 = v16 + v25 * v23;
        if (!__p[0])
          goto LABEL_22;
      }
      else
      {
        v9 = v15 + v23 * 0.0;
      }
      __p[1] = v17;
      operator delete(v17);
    }
LABEL_22:
    boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::destroy_content((uint64_t)v30);
  }
  return v9;
}

void sub_243A3FCEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (__p)
    operator delete(__p);
  boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::destroy_content((uint64_t)&a15);
  _Unwind_Resume(a1);
}

double pps::Histogram_Internal::leftEdgeOfBin(pps::Histogram_Internal *this, int a2, signed int a3)
{
  uint64_t v4;
  _DWORD *v5;
  signed int v6;
  BOOL v7;
  uint64_t *v8;
  double v9;
  int v11;
  int *v12;
  _DWORD v13[14];
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v4 = *((_QWORD *)this + 12);
  if (!v4)
    goto LABEL_11;
  v5 = (_DWORD *)((char *)this + 96);
  do
  {
    v6 = *(_DWORD *)(v4 + 32);
    v7 = v6 < a3;
    if (v6 >= a3)
      v8 = (uint64_t *)v4;
    else
      v8 = (uint64_t *)(v4 + 8);
    if (!v7)
      v5 = (_DWORD *)v4;
    v4 = *v8;
  }
  while (*v8);
  if (v5 == (_DWORD *)((char *)this + 96) || (v9 = 0.0, v5[8] > a3))
  {
LABEL_11:
    pps::Histogram_Internal::axis(this, a3, v13);
    v11 = a2;
    v12 = &v11;
    v9 = _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNKS2_7variantIJS5_SA_SF_EE3binEiEUlRKT_E_RKSG_EEEENSN_11result_typeERSN_(v13, &v12);
    boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::destroy_content((uint64_t)v13);
  }
  return v9;
}

void sub_243A3FDFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::destroy_content((uint64_t)va);
  _Unwind_Resume(a1);
}

double pps::Histogram_Internal::minRangeForAxis(pps::Histogram_Internal *this, signed int a2)
{
  uint64_t v2;
  _DWORD *v3;
  signed int v4;
  BOOL v5;
  uint64_t *v6;
  double v7;
  int v9;
  int *v10;
  _DWORD v11[14];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = *((_QWORD *)this + 12);
  if (!v2)
    goto LABEL_11;
  v3 = (_DWORD *)((char *)this + 96);
  do
  {
    v4 = *(_DWORD *)(v2 + 32);
    v5 = v4 < a2;
    if (v4 >= a2)
      v6 = (uint64_t *)v2;
    else
      v6 = (uint64_t *)(v2 + 8);
    if (!v5)
      v3 = (_DWORD *)v2;
    v2 = *v6;
  }
  while (*v6);
  if (v3 == (_DWORD *)((char *)this + 96) || (v7 = 0.0, v3[8] > a2))
  {
LABEL_11:
    pps::Histogram_Internal::axis(this, a2, v11);
    v9 = 0;
    v10 = &v9;
    v7 = _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNKS2_7variantIJS5_SA_SF_EE3binEiEUlRKT_E_RKSG_EEEENSN_11result_typeERSN_(v11, &v10);
    boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::destroy_content((uint64_t)v11);
  }
  return v7;
}

void sub_243A3FEE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::destroy_content((uint64_t)va);
  _Unwind_Resume(a1);
}

double pps::Histogram_Internal::minSampleForAxis(pps::Histogram_Internal *this, signed int a2)
{
  uint64_t v4;
  _DWORD *v5;
  signed int v6;
  BOOL v7;
  uint64_t *v8;
  double v9;
  uint64_t v10;
  double v11;
  void *__p;
  _BYTE *v14;

  v4 = *((_QWORD *)this + 12);
  if (!v4)
    goto LABEL_11;
  v5 = (_DWORD *)((char *)this + 96);
  do
  {
    v6 = *(_DWORD *)(v4 + 32);
    v7 = v6 < a2;
    if (v6 >= a2)
      v8 = (uint64_t *)v4;
    else
      v8 = (uint64_t *)(v4 + 8);
    if (!v7)
      v5 = (_DWORD *)v4;
    v4 = *v8;
  }
  while (*v8);
  if (v5 == (_DWORD *)((char *)this + 96) || (v9 = 0.0, v5[8] > a2))
  {
LABEL_11:
    pps::Histogram_Internal::binCountsForAxis((int **)this, a2, &__p);
    if (v14 == __p)
    {
LABEL_15:
      v11 = pps::Histogram_Internal::minRangeForAxis(this, a2);
    }
    else
    {
      v10 = 0;
      while (!*((_QWORD *)__p + v10))
      {
        if ((v14 - (_BYTE *)__p) >> 3 == ++v10)
          goto LABEL_15;
      }
      v11 = pps::Histogram_Internal::leftEdgeOfBin(this, v10, a2);
    }
    v9 = v11;
    if (__p)
    {
      v14 = __p;
      operator delete(__p);
    }
  }
  return v9;
}

void sub_243A3FFDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pps::Histogram_Internal::modeForAxis(pps::Histogram_Internal *this, signed int a2)
{
  uint64_t v4;
  _DWORD *v5;
  signed int v6;
  BOOL v7;
  uint64_t *v8;
  char *v9;
  BOOL v10;
  _BYTE *v11;
  unint64_t v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  BOOL v16;
  unint64_t v17;
  void *__p;
  char *v19;
  int v20;
  int *v21;
  _DWORD v22[14];
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v4 = *((_QWORD *)this + 12);
  if (!v4)
    goto LABEL_26;
  v5 = (_DWORD *)((char *)this + 96);
  do
  {
    v6 = *(_DWORD *)(v4 + 32);
    v7 = v6 < a2;
    if (v6 >= a2)
      v8 = (uint64_t *)v4;
    else
      v8 = (uint64_t *)(v4 + 8);
    if (!v7)
      v5 = (_DWORD *)v4;
    v4 = *v8;
  }
  while (*v8);
  if (v5 == (_DWORD *)((char *)this + 96) || v5[8] > a2)
  {
LABEL_26:
    if (*((_QWORD *)this + 5))
    {
      pps::Histogram_Internal::binCountsForAxis((int **)this, a2, &__p);
      v9 = (char *)__p + 8;
      v10 = __p == v19 || v9 == v19;
      v11 = __p;
      if (!v10)
      {
        v12 = *(_QWORD *)__p;
        v11 = __p;
        v13 = (char *)__p + 8;
        do
        {
          v15 = *(_QWORD *)v13;
          v13 += 8;
          v14 = v15;
          v16 = v12 >= v15;
          if (v12 <= v15)
            v12 = v14;
          if (!v16)
            v11 = v9;
          v9 = v13;
        }
        while (v13 != v19);
      }
      v17 = (unint64_t)(v11 - (_BYTE *)__p) >> 3;
      pps::Histogram_Internal::leftEdgeOfBin(this, v17, a2);
      pps::Histogram_Internal::axis(this, a2, v22);
      v20 = v17;
      v21 = &v20;
      _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNKS2_7variantIJS5_SA_SF_EE3binEiEUlRKT_E_RKSG_EEEENSN_11result_typeERSN_(v22, &v21);
      boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::destroy_content((uint64_t)v22);
      if (__p)
      {
        v19 = (char *)__p;
        operator delete(__p);
      }
    }
  }
}

void sub_243A40174(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::destroy_content((uint64_t)&a15);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t pps::Histogram_Internal::record(uint64_t result, _QWORD **a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD **v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  std::logic_error *exception;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;

  v3 = result + 8;
  v4 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(result + 16) - *(_QWORD *)(result + 8)) >> 3);
  v6 = a2;
  v5 = *a2;
  if (v6[1] - v5 != v4)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Sample size must match number of dimensions");
    __cxa_throw(exception, (struct type_info *)off_251429168, (void (*)(void *))MEMORY[0x24BEDAB88]);
  }
  switch((int)v4)
  {
    case 1:
      *(_QWORD *)&v19 = *v5;
      result = boost::histogram::detail::fill<boost::histogram::unlimited_storage<std::allocator<char>>,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,double>(result + 32, v3, (uint64_t)&v19);
      break;
    case 2:
      v19 = *(_OWORD *)v5;
      result = boost::histogram::detail::fill<boost::histogram::unlimited_storage<std::allocator<char>>,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,double,double>(result + 32, v3, (uint64_t)&v19);
      break;
    case 3:
      v7 = v5[2];
      v19 = *(_OWORD *)v5;
      *(_QWORD *)&v20 = v7;
      result = boost::histogram::detail::fill<boost::histogram::unlimited_storage<std::allocator<char>>,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,double,double,double>(result + 32, v3, (uint64_t)&v19);
      break;
    case 4:
      v8 = *((_OWORD *)v5 + 1);
      v19 = *(_OWORD *)v5;
      v20 = v8;
      result = boost::histogram::detail::fill<boost::histogram::unlimited_storage<std::allocator<char>>,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,double,double,double,double>(result + 32, v3, (uint64_t)&v19);
      break;
    case 5:
      v9 = *((_OWORD *)v5 + 1);
      v19 = *(_OWORD *)v5;
      v20 = v9;
      *(_QWORD *)&v21 = v5[4];
      result = boost::histogram::detail::fill<boost::histogram::unlimited_storage<std::allocator<char>>,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,double,double,double,double,double>(result + 32, v3, (uint64_t)&v19);
      break;
    case 6:
      v14 = *((_OWORD *)v5 + 1);
      v19 = *(_OWORD *)v5;
      v20 = v14;
      v21 = *((_OWORD *)v5 + 2);
      result = boost::histogram::detail::fill<boost::histogram::unlimited_storage<std::allocator<char>>,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,double,double,double,double,double,double>(result + 32, v3, (uint64_t)&v19);
      break;
    case 7:
      v15 = *((_OWORD *)v5 + 1);
      v19 = *(_OWORD *)v5;
      v20 = v15;
      v21 = *((_OWORD *)v5 + 2);
      *(_QWORD *)&v22 = v5[6];
      result = boost::histogram::detail::fill<boost::histogram::unlimited_storage<std::allocator<char>>,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,double,double,double,double,double,double,double>(result + 32, v3, (uint64_t)&v19);
      break;
    case 8:
      v10 = *((_OWORD *)v5 + 1);
      v19 = *(_OWORD *)v5;
      v20 = v10;
      v11 = *((_OWORD *)v5 + 3);
      v21 = *((_OWORD *)v5 + 2);
      v22 = v11;
      result = boost::histogram::detail::fill<boost::histogram::unlimited_storage<std::allocator<char>>,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,double,double,double,double,double,double,double,double>(result + 32, v3, (uint64_t)&v19);
      break;
    case 9:
      v16 = *((_OWORD *)v5 + 1);
      v19 = *(_OWORD *)v5;
      v20 = v16;
      v17 = *((_OWORD *)v5 + 3);
      v21 = *((_OWORD *)v5 + 2);
      v22 = v17;
      *(_QWORD *)&v23 = v5[8];
      result = boost::histogram::detail::fill<boost::histogram::unlimited_storage<std::allocator<char>>,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,double,double,double,double,double,double,double,double,double>(result + 32, v3, (uint64_t)&v19);
      break;
    case 10:
      v12 = *((_OWORD *)v5 + 1);
      v19 = *(_OWORD *)v5;
      v20 = v12;
      v13 = *((_OWORD *)v5 + 3);
      v21 = *((_OWORD *)v5 + 2);
      v22 = v13;
      v23 = *((_OWORD *)v5 + 4);
      result = boost::histogram::detail::fill<boost::histogram::unlimited_storage<std::allocator<char>>,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,double,double,double,double,double,double,double,double,double,double>(result + 32, v3, (uint64_t)&v19);
      break;
    default:
      return result;
  }
  return result;
}

void sub_243A40398(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void pps::Histogram_Internal::reset(pps::Histogram_Internal *this)
{
  boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::make<unsigned char>((uint64_t)this + 32, *((_QWORD *)this + 5));
}

double pps::Histogram_Internal::valueForPercentileInAxis(pps::Histogram_Internal *this, double a2, signed int a3)
{
  uint64_t v6;
  _DWORD *v7;
  signed int v8;
  BOOL v9;
  uint64_t *v10;
  double v11;
  double v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  double v16;
  unint64_t v17;
  unint64_t v18;
  double v20;
  double v21;
  double v22;
  double v23;
  void *__p[3];
  int v25;
  int *v26;
  _DWORD v27[14];
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v6 = *((_QWORD *)this + 12);
  if (!v6)
    goto LABEL_11;
  v7 = (_DWORD *)((char *)this + 96);
  do
  {
    v8 = *(_DWORD *)(v6 + 32);
    v9 = v8 < a3;
    if (v8 >= a3)
      v10 = (uint64_t *)v6;
    else
      v10 = (uint64_t *)(v6 + 8);
    if (!v9)
      v7 = (_DWORD *)v6;
    v6 = *v10;
  }
  while (*v10);
  if (v7 == (_DWORD *)((char *)this + 96) || (v11 = 0.0, v7[8] > a3))
  {
LABEL_11:
    if (a2 <= 0.0)
      return pps::Histogram_Internal::minSampleForAxis(this, a3);
    if (a2 >= 1.0)
      return pps::Histogram_Internal::maxSampleForAxis(this, a3);
    if (pps::Histogram_Internal::sum(this, 0, 1.0))
    {
      pps::Histogram_Internal::axis(this, a3, v27);
      v13 = pps::Histogram_Internal::sum(this, 0, v12);
      pps::Histogram_Internal::binCountsForAxis((int **)this, a3, __p);
      v14 = 0;
      v15 = 0;
      v16 = (double)v13;
      v17 = vcvtad_u64_f64((double)v13 * a2);
      while (1)
      {
        v26 = &v25;
        if (v14 >= (int)_ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNKS2_7variantIJS5_SA_SF_EE4sizeEvEUlRKT_E_RKSG_EEEENSN_11result_typeERSN_((uint64_t)v27))
        {
          v11 = pps::Histogram_Internal::minRangeForAxis(this, a3);
          goto LABEL_23;
        }
        v18 = *((_QWORD *)__p[0] + v14);
        if (v18 + v15 >= v17)
          break;
        ++v14;
        v15 += v18;
      }
      v21 = pps::Histogram_Internal::leftEdgeOfBin(this, v14, a3);
      v25 = v14;
      v26 = &v25;
      v22 = _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNKS2_7variantIJS5_SA_SF_EE3binEiEUlRKT_E_RKSG_EEEENSN_11result_typeERSN_(v27, &v26);
      v11 = v21 + -((double)v15 - a2 * v16) / (double)v18 * (v23 - v22);
LABEL_23:
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::destroy_content((uint64_t)v27);
    }
    else
    {
      v20 = pps::Histogram_Internal::maxRangeForAxis(this, a3);
      return (v20 - pps::Histogram_Internal::minRangeForAxis(this, a3)) * a2;
    }
  }
  return v11;
}

void sub_243A40648(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (__p)
    operator delete(__p);
  boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::destroy_content((uint64_t)&a15);
  _Unwind_Resume(a1);
}

double pps::Histogram_Internal::varianceForAxis(pps::Histogram_Internal *this, signed int a2, double a3)
{
  uint64_t v5;
  _DWORD *v6;
  signed int v7;
  BOOL v8;
  uint64_t *v9;
  double v10;
  double v11;
  double v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  double v19;
  int v20;
  double v21;
  double v22;
  unint64_t v24;
  _QWORD v26[2];
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  _BYTE v30[16];
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;

  v5 = *((_QWORD *)this + 12);
  if (!v5)
    goto LABEL_11;
  v6 = (_DWORD *)((char *)this + 96);
  do
  {
    v7 = *(_DWORD *)(v5 + 32);
    v8 = v7 < a2;
    if (v7 >= a2)
      v9 = (uint64_t *)v5;
    else
      v9 = (uint64_t *)(v5 + 8);
    if (!v8)
      v6 = (_DWORD *)v5;
    v5 = *v9;
  }
  while (*v9);
  if (v6 == (_DWORD *)((char *)this + 96) || (v10 = 0.0, v6[8] > a2))
  {
LABEL_11:
    pps::Histogram_Internal::meanForAxis(this, a2, a3);
    v12 = v11;
    boost::histogram::indexed_range<boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>> const>::indexed_range((uint64_t)v30, (int **)this + 1, 0);
    v15 = v31;
    v14 = v32;
    v27 = v31;
    v28 = v32;
    v29 = v30;
    v16 = v33;
    v17 = v34;
    v10 = 0.0;
    v18 = v32 == v34 && v31 == v33;
    v19 = 0.0;
    if (!v18)
    {
      do
      {
        v20 = *(_DWORD *)&v29[16 * a2 + 48];
        v21 = pps::Histogram_Internal::leftEdgeOfBin(this, v20, a2);
        v22 = v21 + pps::Histogram_Internal::rightEdgeOfBin(this, v20, a2);
        v26[0] = v14;
        v26[1] = v15;
        v35 = v26;
        v19 = v19
            + (v22 * 0.5 - v12)
            * _ZNK5boost9histogram17unlimited_storageINSt3__19allocatorIcEEE11buffer_type5applyIZNKS5_11reference_tIKS6_EcvdEvEUlPKT_E_JEEEDcOSB_DpOT0_(v14, (uint64_t)&v35, v22)* (v22 * 0.5 - v12);
        boost::histogram::indexed_range<boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>> const>::range_iterator::increment(&v27);
        v15 = v27;
        v14 = v28;
      }
      while (v28 != v17 || v27 != v16);
    }
    v24 = pps::Histogram_Internal::sum(this, 0, v13);
    if (v24)
      return v19 / (double)v24;
  }
  return v10;
}

_DWORD *boost::histogram::axis::get<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>(int *a1)
{
  _DWORD *result;

  result = boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::apply_visitor<boost::detail::variant::get_visitor<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>>(a1);
  if (!result)
    boost::throw_exception<boost::bad_get>();
  return result;
}

void sub_243A40858(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception a9)
{
  std::exception::~exception(&a9);
  _Unwind_Resume(a1);
}

_DWORD *boost::histogram::axis::get<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>(int *a1)
{
  _DWORD *result;

  result = boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::apply_visitor<boost::detail::variant::get_visitor<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>>(a1);
  if (!result)
    boost::throw_exception<boost::bad_get>();
  return result;
}

void sub_243A408B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception a9)
{
  std::exception::~exception(&a9);
  _Unwind_Resume(a1);
}

int *boost::histogram::axis::get<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>,boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>(int *a1)
{
  int *result;

  result = boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::apply_visitor<boost::detail::variant::get_visitor<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>(a1);
  if (!result)
    boost::throw_exception<boost::bad_get>();
  return result;
}

void sub_243A40918(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception a9)
{
  std::exception::~exception(&a9);
  _Unwind_Resume(a1);
}

void pps::Histogram_Internal::binCategory(pps::Histogram_Internal *this@<X0>, int a2@<W1>, int a3@<W2>, std::string *a4@<X8>)
{
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  int v9;
  BOOL v10;
  char **v11;
  char v12;
  uint64_t v13;
  __int128 v14;

  v7 = (char *)*((_QWORD *)this + 12);
  v5 = (char *)this + 96;
  v6 = v7;
  if (!v7)
    goto LABEL_11;
  v8 = v5;
  do
  {
    v9 = *((_DWORD *)v6 + 8);
    v10 = v9 < a3;
    if (v9 >= a3)
      v11 = (char **)v6;
    else
      v11 = (char **)(v6 + 8);
    if (!v10)
      v8 = v6;
    v6 = *v11;
  }
  while (*v11);
  if (v8 != v5 && *((_DWORD *)v8 + 8) <= a3)
  {
    v13 = *((_QWORD *)v8 + 5) + 24 * a2;
    if (*(char *)(v13 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(a4, *(const std::string::value_type **)v13, *(_QWORD *)(v13 + 8));
    }
    else
    {
      v14 = *(_OWORD *)v13;
      a4->__r_.__value_.__r.__words[2] = *(_QWORD *)(v13 + 16);
      *(_OWORD *)&a4->__r_.__value_.__l.__data_ = v14;
    }
    v12 = 1;
  }
  else
  {
LABEL_11:
    v12 = 0;
    a4->__r_.__value_.__s.__data_[0] = 0;
  }
  a4[1].__r_.__value_.__s.__data_[0] = v12;
}

void _ZN5boost9histogram19make_histogram_withINS0_17unlimited_storageINSt3__19allocatorIcEEEENS0_4axis7regularIdNS_11use_defaultES9_S9_EEJENS0_6detail13requires_axisISA_vEEEEDaOT_OT0_DpOT1_(uint64_t a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD v3[2];
  char v4;
  uint64_t v5;
  int v6;
  void *__p[2];
  uint64_t v8;
  __int128 v9;

  v6 = *a2;
  *(_OWORD *)__p = *(_OWORD *)(a2 + 2);
  v8 = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *((_QWORD *)a2 + 3) = 0;
  v9 = *((_OWORD *)a2 + 2);
  v3[1] = *(_QWORD *)(a1 + 8);
  v4 = *(_BYTE *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  boost::histogram::histogram<std::tuple<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>,boost::histogram::unlimited_storage<std::allocator<char>>>::histogram<std::tuple<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>,boost::histogram::unlimited_storage<std::allocator<char>>>(a3, (uint64_t)&v6, (uint64_t)v3);
  boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::destroy((uint64_t)v3);
  if (SHIBYTE(v8) < 0)
    operator delete(__p[0]);
}

void sub_243A40A64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::destroy((uint64_t)&a9);
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t boost::histogram::histogram<std::tuple<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>,boost::histogram::unlimited_storage<std::allocator<char>>>::histogram<std::tuple<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>,boost::histogram::unlimited_storage<std::allocator<char>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  unint64_t *v7;
  size_t v8;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  v5 = a1 + 48;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a3 + 8);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a3 + 16);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a3 + 24);
  *(_QWORD *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  v8 = 1;
  v7 = &v8;
  boost::mp11::detail::tuple_for_each_impl<std::tuple<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>> const&,0ul,unsigned long boost::histogram::detail::bincount<std::tuple<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>>(std::tuple<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>> const&)::{lambda(std::tuple<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>> const&)#1}>((int *)a1, &v7);
  boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::make<unsigned char>(v5, v8);
  return a1;
}

void sub_243A40B30(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;

  boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::destroy(v2);
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v3);
  _Unwind_Resume(a1);
}

unint64_t *boost::mp11::detail::tuple_for_each_impl<std::tuple<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>> const&,0ul,unsigned long boost::histogram::detail::bincount<std::tuple<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>>(std::tuple<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>> const&)::{lambda(std::tuple<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>> const&)#1}>(int *a1, unint64_t **a2)
{
  unint64_t *result;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int8x16_t v8;
  uint64_t v9;
  std::runtime_error v10;

  result = *a2;
  v4 = **a2;
  v5 = *a1;
  v6 = v4 * (v5 + 2);
  **a2 = v6;
  if ((int)v5 >= -1 && v6 < v4)
  {
    std::runtime_error::runtime_error(&v10, "bincount overflow");
    v10.__vftable = (std::runtime_error_vtbl *)(MEMORY[0x24BEDB8C8] + 16);
    v8.i64[0] = (uint64_t)"PerfPowerServicesReader/external/lib/boostorg/histogram/include/boost/histogram/detail/axes.hpp";
    v8.i64[1] = (uint64_t)"auto boost::histogram::detail::bincount(const std::tuple<boost::histogram::axis::regular<>> &):"
                         ":(anonymous class)::operator()(const auto &) const [a:auto = boost::histogram::axis::regular<>]";
    v9 = 167;
    boost::throw_exception<std::overflow_error>(&v10, &v8);
  }
  return result;
}

void boost::throw_exception<std::overflow_error>(const std::runtime_error *a1, int8x16_t *a2)
{
  void *exception;

  exception = __cxa_allocate_exception(0x40uLL);
  boost::wrapexcept<std::overflow_error>::wrapexcept((uint64_t)exception, a1, a2);
}

void sub_243A40C48(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::wrapexcept<std::overflow_error>::wrapexcept(uint64_t a1, const std::runtime_error *a2, int8x16_t *a3)
{
  *(_QWORD *)a1 = &unk_25142A9E0;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 8), a2);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)a1 = &unk_25142CA28;
  *(_QWORD *)(a1 + 8) = &unk_25142CA58;
  *(_QWORD *)(a1 + 24) = &unk_25142CA80;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 56) = a3[1].i32[0];
  *(int8x16_t *)(a1 + 40) = vextq_s8(*a3, *a3, 8uLL);
  return a1;
}

uint64_t boost::wrapexcept<std::overflow_error>::~wrapexcept(uint64_t a1)
{
  *(_QWORD *)(a1 + 24) = &unk_25142AA38;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 32));
  MEMORY[0x2494FEA7C](a1 + 8);
  return a1;
}

uint64_t boost::wrapexcept<std::overflow_error>::clone(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = operator new();
  *(_QWORD *)v2 = &unk_25142A9E0;
  std::runtime_error::runtime_error((std::runtime_error *)(v2 + 8), (const std::runtime_error *)(a1 + 8));
  *(_QWORD *)(v2 + 8) = MEMORY[0x24BEDB8C8] + 16;
  *(_QWORD *)(v2 + 24) = &unk_25142AA38;
  v3 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(v2 + 32) = v3;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_DWORD *)(v2 + 56) = *(_DWORD *)(a1 + 56);
  *(_QWORD *)v2 = &unk_25142CA28;
  *(_QWORD *)(v2 + 8) = &unk_25142CA58;
  *(_QWORD *)(v2 + 24) = &unk_25142CA80;
  boost::exception_detail::copy_boost_exception(v2 + 24, a1 + 24);
  return v2;
}

void boost::wrapexcept<std::overflow_error>::rethrow(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x40uLL);
  boost::wrapexcept<std::overflow_error>::wrapexcept((uint64_t)exception, a1);
}

void sub_243A40E60(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<std::overflow_error>::~wrapexcept(uint64_t a1)
{
  *(_QWORD *)(a1 + 24) = &unk_25142AA38;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 32));
  MEMORY[0x2494FEA7C](a1 + 8);
  JUMPOUT(0x2494FECF8);
}

void `non-virtual thunk to'boost::wrapexcept<std::overflow_error>::~wrapexcept(uint64_t a1)
{
  *(_QWORD *)(a1 + 16) = &unk_25142AA38;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 24));
  JUMPOUT(0x2494FEA7CLL);
}

{
  *(_QWORD *)(a1 + 16) = &unk_25142AA38;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 24));
  MEMORY[0x2494FEA7C](a1);
  JUMPOUT(0x2494FECF8);
}

void `non-virtual thunk to'boost::wrapexcept<std::overflow_error>::~wrapexcept(_QWORD *a1)
{
  *a1 = &unk_25142AA38;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  JUMPOUT(0x2494FEA7CLL);
}

{
  *a1 = &unk_25142AA38;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  MEMORY[0x2494FEA7C](a1 - 2);
  JUMPOUT(0x2494FECF8);
}

uint64_t boost::wrapexcept<std::overflow_error>::wrapexcept(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)a1 = &unk_25142A9E0;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 8), (const std::runtime_error *)(a2 + 8));
  *(_QWORD *)(a1 + 8) = MEMORY[0x24BEDB8C8] + 16;
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = &unk_25142AA38;
  *(_QWORD *)(a1 + 32) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v5;
  *(_QWORD *)a1 = &unk_25142CA28;
  *(_QWORD *)(a1 + 8) = &unk_25142CA58;
  *(_QWORD *)(a1 + 24) = &unk_25142CA80;
  return a1;
}

void boost::histogram::make_histogram_with<boost::histogram::unlimited_storage<std::allocator<char>>,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::detail::requires_sequence_of_any_axis<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,void>>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD v3[2];
  char v4;
  uint64_t v5;

  v3[1] = *(_QWORD *)(a1 + 8);
  v4 = *(_BYTE *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>(a3, a2, (uint64_t)v3);
  boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::destroy((uint64_t)v3);
}

void sub_243A410F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::destroy((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  size_t v5;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v4 = a1 + 24;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a3 + 8);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a3 + 16);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a3 + 24);
  *(_QWORD *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  v5 = boost::histogram::detail::bincount<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>((int **)a1);
  boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::make<unsigned char>(v4, v5);
  return a1;
}

void sub_243A41190(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::destroy(v2);
  std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t boost::histogram::detail::bincount<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>(int **a1)
{
  uint64_t result;
  int *v3;
  int *v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t **v7;

  result = 1;
  v5 = &v6;
  v6 = 1;
  v3 = *a1;
  v4 = a1[1];
  if (*a1 != v4)
  {
    do
    {
      v7 = (unint64_t **)&v5;
      boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::apply_visitor<boost::detail::variant::result_wrapper1<unsigned long boost::histogram::detail::bincount<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>(std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>> const&)::{lambda(std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>> const&)#1},boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>> const&>>(v3, &v7);
      v3 += 14;
    }
    while (v3 != v4);
    return v6;
  }
  return result;
}

unint64_t ***boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::apply_visitor<boost::detail::variant::result_wrapper1<unsigned long boost::histogram::detail::bincount<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>(std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>> const&)::{lambda(std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>> const&)#1},boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>> const&>>(int *a1, unint64_t ***a2)
{
  int *v2;
  unint64_t ***result;

  v2 = a1 + 2;
  switch(*a1 ^ (*a1 >> 31))
  {
    case 0:
      result = boost::detail::variant::result_wrapper1<unsigned long boost::histogram::detail::bincount<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>(std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>> const&)::{lambda(std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>> const&)#1},boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>> const&>::operator()<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default> const&>(a2, v2);
      break;
    case 1:
      result = boost::detail::variant::result_wrapper1<unsigned long boost::histogram::detail::bincount<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>(std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>> const&)::{lambda(std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>> const&)#1},boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>> const&>::operator()<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>> const&>(a2, v2);
      break;
    case 2:
      result = boost::detail::variant::result_wrapper1<unsigned long boost::histogram::detail::bincount<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>(std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>> const&)::{lambda(std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>> const&)#1},boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>> const&>::operator()<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>> const&>(a2, v2);
      break;
    default:
      boost::detail::variant::forced_return<void>();
  }
  return result;
}

unint64_t ***boost::detail::variant::result_wrapper1<unsigned long boost::histogram::detail::bincount<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>(std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>> const&)::{lambda(std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>> const&)#1},boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>> const&>::operator()<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default> const&>(unint64_t ***result, int *a2)
{
  unint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int8x16_t v6;
  uint64_t v7;
  std::runtime_error v8;

  v2 = **result;
  v3 = *v2;
  v4 = *a2;
  v5 = *v2 * (v4 + 2);
  *v2 = v5;
  if ((int)v4 >= -1 && v5 < v3)
  {
    std::runtime_error::runtime_error(&v8, "bincount overflow");
    v8.__vftable = (std::runtime_error_vtbl *)(MEMORY[0x24BEDB8C8] + 16);
    v6.i64[0] = (uint64_t)"PerfPowerServicesReader/external/lib/boostorg/histogram/include/boost/histogram/detail/axes.hpp";
    v6.i64[1] = (uint64_t)"auto boost::histogram::detail::bincount(const std::vector<boost::histogram::axis::variant<boost"
                         "::histogram::axis::regular<>, boost::histogram::axis::variable<>, boost::histogram::axis::integ"
                         "er<int, boost::use_default, boost::histogram::axis::option::bit<1>>>> &)::(anonymous class)::op"
                         "erator()(const auto &) const [a:auto = boost::histogram::axis::regular<>]";
    v7 = 167;
    boost::throw_exception<std::overflow_error>(&v8, &v6);
  }
  return result;
}

unint64_t ***boost::detail::variant::result_wrapper1<unsigned long boost::histogram::detail::bincount<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>(std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>> const&)::{lambda(std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>> const&)#1},boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>> const&>::operator()<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>> const&>(unint64_t ***result, _QWORD *a2)
{
  unint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int8x16_t v6;
  uint64_t v7;
  std::runtime_error v8;

  v2 = **result;
  v3 = *v2;
  v4 = a2[1] - *a2;
  v5 = (((v4 << 29) + 0x100000000) >> 32) * *v2;
  *v2 = v5;
  if ((v4 & 0x400000000) == 0 && v5 < v3)
  {
    std::runtime_error::runtime_error(&v8, "bincount overflow");
    v8.__vftable = (std::runtime_error_vtbl *)(MEMORY[0x24BEDB8C8] + 16);
    v6.i64[0] = (uint64_t)"PerfPowerServicesReader/external/lib/boostorg/histogram/include/boost/histogram/detail/axes.hpp";
    v6.i64[1] = (uint64_t)"auto boost::histogram::detail::bincount(const std::vector<boost::histogram::axis::variant<boost"
                         "::histogram::axis::regular<>, boost::histogram::axis::variable<>, boost::histogram::axis::integ"
                         "er<int, boost::use_default, boost::histogram::axis::option::bit<1>>>> &)::(anonymous class)::op"
                         "erator()(const auto &) const [a:auto = boost::histogram::axis::variable<>]";
    v7 = 167;
    boost::throw_exception<std::overflow_error>(&v8, &v6);
  }
  return result;
}

unint64_t ***boost::detail::variant::result_wrapper1<unsigned long boost::histogram::detail::bincount<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>(std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>> const&)::{lambda(std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>> const&)#1},boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>> const&>::operator()<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>> const&>(unint64_t ***result, int *a2)
{
  unint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int8x16_t v6;
  uint64_t v7;
  std::runtime_error v8;

  v2 = **result;
  v3 = *v2;
  v4 = *a2;
  v5 = v3 + v3 * v4;
  *v2 = v5;
  if ((v4 & 0x80000000) == 0 && v5 < v3)
  {
    std::runtime_error::runtime_error(&v8, "bincount overflow");
    v8.__vftable = (std::runtime_error_vtbl *)(MEMORY[0x24BEDB8C8] + 16);
    v6.i64[0] = (uint64_t)"PerfPowerServicesReader/external/lib/boostorg/histogram/include/boost/histogram/detail/axes.hpp";
    v6.i64[1] = (uint64_t)"auto boost::histogram::detail::bincount(const std::vector<boost::histogram::axis::variant<boost"
                         "::histogram::axis::regular<>, boost::histogram::axis::variable<>, boost::histogram::axis::integ"
                         "er<int, boost::use_default, boost::histogram::axis::option::bit<1>>>> &)::(anonymous class)::op"
                         "erator()(const auto &) const [a:auto = boost::histogram::axis::integer<int, boost::use_default,"
                         " boost::histogram::axis::option::bit<1>>]";
    v7 = 167;
    boost::throw_exception<std::overflow_error>(&v8, &v6);
  }
  return result;
}

void std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::__vdeallocate(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 56;
        boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::destroy_content(v3);
      }
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::__assign_with_size[abi:ne180100]<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>*,boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>*>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  void *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = a1 + 16;
  v9 = *(void **)a1;
  if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a4)
  {
    std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::__vdeallocate((void **)a1);
    if (a4 > 0x492492492492492)
      std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::__throw_length_error[abi:ne180100]();
    v10 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3)) >= 0x249249249249249)
      v11 = 0x492492492492492;
    else
      v11 = v10;
    std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::__vallocate[abi:ne180100]((_QWORD *)a1, v11);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>*,boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>*,boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>*>(v8, a2, a3, *(_QWORD *)(a1 + 8));
    goto LABEL_11;
  }
  if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3) < a4)
  {
    v13 = a2 + 8 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3);
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>> *,boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>> *,boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>> *,0>(a2, v13, (uint64_t)v9);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>*,boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>*,boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>*>(v8, v13, a3, *(_QWORD *)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v12;
    return;
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>> *,boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>> *,boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>> *,0>(a2, a3, (uint64_t)v9);
  v15 = v14;
  v16 = *(_QWORD *)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      v16 -= 56;
      boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::destroy_content(v16);
    }
    while (v16 != v15);
  }
  *(_QWORD *)(a1 + 8) = v15;
}

void sub_243A41670(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_243A41678(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x492492492492493)
    std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[56 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>*,boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>*,boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::variant(a4 + v7, a2 + v7);
      v7 += 56;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_243A41730(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 56;
    do
    {
      boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::destroy_content(v4 + v2);
      v2 -= 56;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>> *,boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>> *,boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>> *,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a1;
  if (a1 != a2)
  {
    do
    {
      boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::variant_assign(a3, v4);
      v4 += 56;
      a3 += 56;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

std::string *boost::detail::variant::assign_storage::internal_visit<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>(const std::string **a1, std::string *a2)
{
  const std::string *v3;

  v3 = *a1;
  if (*a1 != a2)
    std::vector<double>::__assign_with_size[abi:ne180100]<double *,double *>((char *)a2, v3->__r_.__value_.__l.__data_, v3->__r_.__value_.__l.__size_, (uint64_t)(v3->__r_.__value_.__l.__size_ - v3->__r_.__value_.__r.__words[0]) >> 3);
  return std::string::operator=(a2 + 1, v3 + 1);
}

void boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::assigner::assign_impl<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::has_fallback_type_>(uint64_t a1, int *a2)
{
  uint64_t v4;
  std::string::size_type v5;
  int v6;
  std::string __p;
  __int128 v8;

  v6 = *a2;
  if (*((char *)a2 + 31) < 0)
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)a2 + 1), *((_QWORD *)a2 + 2));
  else
    __p = *(std::string *)(a2 + 2);
  v8 = *((_OWORD *)a2 + 2);
  boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::destroy_content(*(_QWORD *)a1);
  v4 = *(_QWORD *)a1;
  *(_DWORD *)(v4 + 8) = v6;
  v5 = __p.__r_.__value_.__r.__words[2];
  *(_OWORD *)(v4 + 16) = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  *(_QWORD *)(v4 + 32) = v5;
  memset(&__p, 0, sizeof(__p));
  *(_OWORD *)(v4 + 40) = v8;
  **(_DWORD **)a1 = *(_DWORD *)(a1 + 8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::assigner::assign_impl<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::has_fallback_type_>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::string::size_type v5;
  void *v6[2];
  uint64_t v7;
  std::string __p;

  v6[0] = 0;
  v6[1] = 0;
  v7 = 0;
  std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>(v6, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  if (*(char *)(a2 + 47) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a2 + 24), *(_QWORD *)(a2 + 32));
  else
    __p = *(std::string *)(a2 + 24);
  boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::destroy_content(*(_QWORD *)a1);
  v4 = *(_QWORD *)a1;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)v6;
  *(_QWORD *)(v4 + 24) = v7;
  v6[0] = 0;
  v6[1] = 0;
  v7 = 0;
  v5 = __p.__r_.__value_.__r.__words[2];
  *(_OWORD *)(v4 + 32) = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  *(_QWORD *)(v4 + 48) = v5;
  memset(&__p, 0, sizeof(__p));
  **(_DWORD **)a1 = *(_DWORD *)(a1 + 8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v6[0])
    {
      v6[1] = v6[0];
      operator delete(v6[0]);
    }
  }
}

void sub_243A41AB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::assigner::assign_impl<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>,boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::has_fallback_type_>(uint64_t a1, int *a2)
{
  uint64_t v4;
  std::string::size_type v5;
  int v6;
  std::string __p;
  int v8;

  v6 = *a2;
  if (*((char *)a2 + 31) < 0)
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)a2 + 1), *((_QWORD *)a2 + 2));
  else
    __p = *(std::string *)(a2 + 2);
  v8 = a2[8];
  boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::destroy_content(*(_QWORD *)a1);
  v4 = *(_QWORD *)a1;
  *(_DWORD *)(v4 + 8) = v6;
  v5 = __p.__r_.__value_.__r.__words[2];
  *(_OWORD *)(v4 + 16) = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  *(_QWORD *)(v4 + 32) = v5;
  memset(&__p, 0, sizeof(__p));
  *(_DWORD *)(v4 + 40) = v8;
  **(_DWORD **)a1 = *(_DWORD *)(a1 + 8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

uint64_t boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10[2];

  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10[0] = (uint64_t)&v6;
  v10[1] = a2;
  _ZNK5boost9histogram17unlimited_storageINSt3__19allocatorIcEEE11buffer_type5applyIZNS6_C1ERKS6_EUlPT_E_JEEEDcOSA_DpOT0_(a2, v10);
  if (&v6 != (uint64_t *)a1)
  {
    v3 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v7;
    v7 = v3;
    LOBYTE(v3) = *(_BYTE *)(a1 + 16);
    *(_BYTE *)(a1 + 16) = v8;
    v8 = v3;
    v4 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v9;
    v9 = v4;
  }
  boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::destroy((uint64_t)&v6);
  return a1;
}

void _ZNK5boost9histogram17unlimited_storageINSt3__19allocatorIcEEE11buffer_type5applyIZNS6_C1ERKS6_EUlPT_E_JEEEDcOSA_DpOT0_(uint64_t a1, uint64_t *a2)
{
  switch(*(_BYTE *)(a1 + 16))
  {
    case 0:
      boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::make<unsigned char,unsigned char *>(*a2, *(_QWORD *)(a2[1] + 8), *(const void **)(a1 + 24));
      break;
    case 1:
      boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::make<unsigned short,unsigned short *>(*a2, *(_QWORD *)(a2[1] + 8), *(const void **)(a1 + 24));
      break;
    case 2:
      boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::make<unsigned int,unsigned int *>(*a2, *(_QWORD *)(a2[1] + 8), *(const void **)(a1 + 24));
      break;
    case 3:
      boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::make<unsigned long long,unsigned long long *>(*a2, *(_QWORD *)(a2[1] + 8), *(const void **)(a1 + 24));
      break;
    case 4:
      boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::make<boost::histogram::detail::mp_int<std::allocator<unsigned long long>>,boost::histogram::detail::mp_int<std::allocator<unsigned long long>>*>(*a2, *(_QWORD *)(a2[1] + 8), *(_QWORD *)(a1 + 24));
      break;
    default:
      boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::make<double,double *>(*a2, *(_QWORD *)(a2[1] + 8), *(const void **)(a1 + 24));
      break;
  }
}

void boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::make<unsigned char,unsigned char *>(uint64_t a1, size_t __sz, const void *a3)
{
  void *v5;
  char v6;

  if (__sz)
    v5 = boost::histogram::detail::create_buffer<std::allocator<unsigned char>,unsigned char *>((uint64_t)&v6, __sz, a3);
  else
    v5 = 0;
  boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::destroy(a1);
  *(_QWORD *)(a1 + 8) = __sz;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = v5;
}

void *boost::histogram::detail::create_buffer<std::allocator<unsigned char>,unsigned char *>(uint64_t a1, size_t __sz, const void *a3)
{
  void *v5;

  if (!__sz)
    boost::histogram::detail::create_buffer<std::allocator<unsigned char>,unsigned char *>(a1, 0, (uint64_t)a3);
  v5 = operator new(__sz);
  return memcpy(v5, a3, __sz);
}

void boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::make<unsigned short,unsigned short *>(uint64_t a1, uint64_t a2, const void *a3)
{
  void *v5;
  char v6;

  if (a2)
    v5 = boost::histogram::detail::create_buffer<std::allocator<unsigned short>,unsigned short *>((uint64_t)&v6, a2, a3);
  else
    v5 = 0;
  boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::destroy(a1);
  *(_QWORD *)(a1 + 8) = a2;
  *(_BYTE *)(a1 + 16) = 1;
  *(_QWORD *)(a1 + 24) = v5;
}

void *boost::histogram::detail::create_buffer<std::allocator<unsigned short>,unsigned short *>(uint64_t a1, uint64_t a2, const void *a3)
{
  size_t v4;
  void *v5;

  if (!a2)
    boost::histogram::detail::create_buffer<std::allocator<unsigned char>,unsigned char *>(a1, 0, (uint64_t)a3);
  if (a2 < 0)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v4 = 2 * a2;
  v5 = operator new(2 * a2);
  return memcpy(v5, a3, v4);
}

void boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::make<unsigned int,unsigned int *>(uint64_t a1, unint64_t a2, const void *a3)
{
  void *v5;
  char v6;

  if (a2)
    v5 = boost::histogram::detail::create_buffer<std::allocator<unsigned int>,unsigned int *>((uint64_t)&v6, a2, a3);
  else
    v5 = 0;
  boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::destroy(a1);
  *(_QWORD *)(a1 + 8) = a2;
  *(_BYTE *)(a1 + 16) = 2;
  *(_QWORD *)(a1 + 24) = v5;
}

void *boost::histogram::detail::create_buffer<std::allocator<unsigned int>,unsigned int *>(uint64_t a1, unint64_t a2, const void *a3)
{
  size_t v4;
  void *v5;

  if (!a2)
    boost::histogram::detail::create_buffer<std::allocator<unsigned char>,unsigned char *>(a1, 0, (uint64_t)a3);
  if (a2 >> 62)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v4 = 4 * a2;
  v5 = operator new(4 * a2);
  return memcpy(v5, a3, v4);
}

void boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::make<unsigned long long,unsigned long long *>(uint64_t a1, unint64_t a2, const void *a3)
{
  void *v5;
  char v6;

  if (a2)
    v5 = boost::histogram::detail::create_buffer<std::allocator<unsigned long long>,unsigned long long *>((uint64_t)&v6, a2, a3);
  else
    v5 = 0;
  boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::destroy(a1);
  *(_QWORD *)(a1 + 8) = a2;
  *(_BYTE *)(a1 + 16) = 3;
  *(_QWORD *)(a1 + 24) = v5;
}

void *boost::histogram::detail::create_buffer<std::allocator<unsigned long long>,unsigned long long *>(uint64_t a1, unint64_t a2, const void *a3)
{
  size_t v4;
  void *v5;

  if (!a2)
    boost::histogram::detail::create_buffer<std::allocator<unsigned char>,unsigned char *>(a1, 0, (uint64_t)a3);
  if (a2 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v4 = 8 * a2;
  v5 = operator new(8 * a2);
  return memcpy(v5, a3, v4);
}

void boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::make<boost::histogram::detail::mp_int<std::allocator<unsigned long long>>,boost::histogram::detail::mp_int<std::allocator<unsigned long long>>*>(uint64_t a1, unint64_t a2, uint64_t a3)
{
  char *v5;
  char v6;

  if (a2)
    v5 = boost::histogram::detail::create_buffer<std::allocator<boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>,boost::histogram::detail::mp_int<std::allocator<unsigned long long>>*>((uint64_t)&v6, a2, a3);
  else
    v5 = 0;
  boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::destroy(a1);
  *(_QWORD *)(a1 + 8) = a2;
  *(_BYTE *)(a1 + 16) = 4;
  *(_QWORD *)(a1 + 24) = v5;
}

char *boost::histogram::detail::create_buffer<std::allocator<boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>,boost::histogram::detail::mp_int<std::allocator<unsigned long long>>*>(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  uint64_t i;
  char *v7;
  const void *v8;
  uint64_t v9;

  if (!a2)
    boost::histogram::detail::create_buffer<std::allocator<unsigned char>,unsigned char *>(a1, 0, a3);
  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v4 = 24 * a2;
  v5 = (char *)operator new(24 * a2);
  for (i = 0; v4 != i; i += 24)
  {
    v7 = &v5[i];
    *(_QWORD *)v7 = 0;
    *((_QWORD *)v7 + 1) = 0;
    *((_QWORD *)v7 + 2) = 0;
    v8 = *(const void **)(a3 + i);
    v9 = *(_QWORD *)(a3 + i + 8);
    std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(v7, v8, v9, (v9 - (uint64_t)v8) >> 3);
  }
  return v5;
}

void sub_243A42058(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<double>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_243A420C8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::make<double,double *>(uint64_t a1, unint64_t a2, const void *a3)
{
  void *v5;
  char v6;

  if (a2)
    v5 = boost::histogram::detail::create_buffer<std::allocator<unsigned long long>,unsigned long long *>((uint64_t)&v6, a2, a3);
  else
    v5 = 0;
  boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::destroy(a1);
  *(_QWORD *)(a1 + 8) = a2;
  *(_BYTE *)(a1 + 16) = 5;
  *(_QWORD *)(a1 + 24) = v5;
}

double _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNKS2_7variantIJS5_SA_SF_EE3binEiEUlRKT_E_RKSG_EEEENSN_11result_typeERSN_(_DWORD *a1, int **a2)
{
  _QWORD *v2;
  double result;
  int v4;

  v2 = a1 + 2;
  switch(*a1 ^ ((int)*a1 >> 31))
  {
    case 0:
      _ZN5boost9histogram6detail11static_if_cILb0EZZNKS0_4axis7variantIJNS3_7regularIdNS_11use_defaultES6_S6_EENS3_8variableIdS6_S6_NSt3__19allocatorIdEEEENS3_7integerIiS6_NS3_6option3bitILj1EEEEEEE3binEiENKUlRKT_E_clIS7_EEDaSL_EUlSL_E_ZZNKSI_3binEiENKSN_IS7_EESO_SL_EUlSL_E0_JRKS7_EEEDcOT0_OT1_DpOT2_();
      break;
    case 1:
      result = _ZNK5boost6detail7variant15result_wrapper1IZNKS_9histogram4axis7variantIJNS4_7regularIdNS_11use_defaultES7_S7_EENS4_8variableIdS7_S7_NSt3__19allocatorIdEEEENS4_7integerIiS7_NS4_6option3bitILj1EEEEEEE3binEiEUlRKT_E_RKNS_7variantIS8_JSD_SI_EEEEclIRKSD_EENS4_15polymorphic_binIdEEOSK_(a2, v2);
      break;
    case 2:
      v4 = **a2;
      if (v4 < 0)
      {
        result = -2147483650.0;
      }
      else if (*(_DWORD *)v2 >= v4)
      {
        result = (double)(a1[10] + v4);
      }
      else
      {
        result = 2147483650.0;
      }
      break;
    default:
      boost::detail::variant::forced_return<void>();
  }
  return result;
}

double _ZNK5boost6detail7variant15result_wrapper1IZNKS_9histogram4axis7variantIJNS4_7regularIdNS_11use_defaultES7_S7_EENS4_8variableIdS7_S7_NSt3__19allocatorIdEEEENS4_7integerIiS7_NS4_6option3bitILj1EEEEEEE3binEiEUlRKT_E_RKNS_7variantIS8_JSD_SI_EEEEclIRKSD_EENS4_15polymorphic_binIdEEOSK_(int **a1, _QWORD *a2)
{
  int v3;
  double v4;

  v3 = **a1;
  v4 = boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>::value(a2, (double)v3);
  boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>::value(a2, (double)(v3 + 1));
  return v4;
}

double boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>::value(_QWORD *a1, double a2)
{
  uint64_t v4;
  double v5;

  if (a2 < 0.0)
    return -INFINITY;
  v4 = a1[1];
  v5 = (double)(int)(((unint64_t)(v4 - *a1) >> 3) - 1);
  if (v5 == a2)
    return *(double *)(v4 - 8);
  if (v5 < a2)
    return INFINITY;
  return (a2 - (double)(int)a2) * *(double *)(*a1 + 8 * (int)a2 + 8)
       + (1.0 - (a2 - (double)(int)a2)) * *(double *)(*a1 + 8 * (int)a2);
}

uint64_t boost::histogram::indexed_range<boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>> const>::indexed_range(uint64_t a1, int **a2, int a3)
{
  int *v4;
  int *v5;
  unint64_t v6;
  _QWORD v8[4];
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;

  *(_QWORD *)a1 = a2;
  *(_BYTE *)(a1 + 8) = a3 == 1;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = a2 + 3;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 16);
  v11 = a1 + 48;
  v4 = *a2;
  v5 = a2[1];
  v6 = a1 + 48 + 0xFFFFFFFB6DB6DB70 * ((unint64_t)((char *)v5 - (char *)*a2) >> 3) - 16;
  v9 = 1;
  v10 = v6;
  v8[0] = a1;
  v8[1] = &v11;
  v8[2] = &v9;
  for (v8[3] = &v10; v4 != v5; v4 += 14)
  {
    v12 = v8;
    _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_13indexed_rangeIKNS1_9histogramINS7_6vectorINS2_7variantIJS5_SA_SF_EEENS8_ISP_EEEENS1_17unlimited_storageINS8_IcEEEEEEEC1ERSW_NS1_8coverageEEUlRKT_E_RKSG_EEEENS10_11result_typeERS10_(v4, &v12);
  }
  return a1;
}

uint64_t **_ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_13indexed_rangeIKNS1_9histogramINS7_6vectorINS2_7variantIJS5_SA_SF_EEENS8_ISP_EEEENS1_17unlimited_storageINS8_IcEEEEEEEC1ERSW_NS1_8coverageEEUlRKT_E_RKSG_EEEENS10_11result_typeERS10_(int *a1, uint64_t **a2)
{
  int *v2;
  uint64_t **result;

  v2 = a1 + 2;
  switch(*a1 ^ (*a1 >> 31))
  {
    case 0:
      result = _ZNK5boost6detail7variant15result_wrapper1IZNS_9histogram13indexed_rangeIKNS3_9histogramINSt3__16vectorINS3_4axis7variantIJNS8_7regularIdNS_11use_defaultESB_SB_EENS8_8variableIdSB_SB_NS6_9allocatorIdEEEENS8_7integerIiSB_NS8_6option3bitILj1EEEEEEEENSE_ISM_EEEENS3_17unlimited_storageINSE_IcEEEEEEEC1ERST_NS3_8coverageEEUlRKT_E_RKNS_7variantISC_JSG_SL_EEEEclIRKSC_EEvOSX_(a2, v2);
      break;
    case 1:
      result = _ZNK5boost6detail7variant15result_wrapper1IZNS_9histogram13indexed_rangeIKNS3_9histogramINSt3__16vectorINS3_4axis7variantIJNS8_7regularIdNS_11use_defaultESB_SB_EENS8_8variableIdSB_SB_NS6_9allocatorIdEEEENS8_7integerIiSB_NS8_6option3bitILj1EEEEEEEENSE_ISM_EEEENS3_17unlimited_storageINSE_IcEEEEEEEC1ERST_NS3_8coverageEEUlRKT_E_RKNS_7variantISC_JSG_SL_EEEEclIRKSG_EEvOSX_(a2, v2);
      break;
    case 2:
      result = _ZNK5boost6detail7variant15result_wrapper1IZNS_9histogram13indexed_rangeIKNS3_9histogramINSt3__16vectorINS3_4axis7variantIJNS8_7regularIdNS_11use_defaultESB_SB_EENS8_8variableIdSB_SB_NS6_9allocatorIdEEEENS8_7integerIiSB_NS8_6option3bitILj1EEEEEEEENSE_ISM_EEEENS3_17unlimited_storageINSE_IcEEEEEEEC1ERST_NS3_8coverageEEUlRKT_E_RKNS_7variantISC_JSG_SL_EEEEclIRKSL_EEvOSX_(a2, v2);
      break;
    default:
      boost::detail::variant::forced_return<void>();
  }
  return result;
}

uint64_t **_ZNK5boost6detail7variant15result_wrapper1IZNS_9histogram13indexed_rangeIKNS3_9histogramINSt3__16vectorINS3_4axis7variantIJNS8_7regularIdNS_11use_defaultESB_SB_EENS8_8variableIdSB_SB_NS6_9allocatorIdEEEENS8_7integerIiSB_NS8_6option3bitILj1EEEEEEEENSE_ISM_EEEENS3_17unlimited_storageINSE_IcEEEEEEEC1ERST_NS3_8coverageEEUlRKT_E_RKNS_7variantISC_JSG_SL_EEEEclIRKSC_EEvOSX_(uint64_t **result, int *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD **v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;

  v2 = *result;
  v3 = *a2;
  v4 = v3 + 2;
  v5 = **result;
  v6 = (_DWORD **)(*result)[1];
  v7 = *v6;
  v8 = *(unsigned __int8 *)(v5 + 8);
  v9 = v3 + v8;
  v7[2] = v9;
  v7[3] = v4;
  *v7 = -(int)v8;
  v7[1] = -(int)v8;
  v10 = v8 ^ 1;
  v12 = (_QWORD *)v2[2];
  v11 = (_QWORD *)v2[3];
  *(_QWORD *)(v5 + 16) += *v12 * v10;
  if ((unint64_t)v7 >= *v11)
    v13 = v9 + 1;
  else
    v13 = v10;
  *(_QWORD *)(v5 + 32) += v13 * *v12;
  *v12 *= v4;
  *v6 = v7 + 4;
  return result;
}

uint64_t **_ZNK5boost6detail7variant15result_wrapper1IZNS_9histogram13indexed_rangeIKNS3_9histogramINSt3__16vectorINS3_4axis7variantIJNS8_7regularIdNS_11use_defaultESB_SB_EENS8_8variableIdSB_SB_NS6_9allocatorIdEEEENS8_7integerIiSB_NS8_6option3bitILj1EEEEEEEENSE_ISM_EEEENS3_17unlimited_storageINSE_IcEEEEEEEC1ERST_NS3_8coverageEEUlRKT_E_RKNS_7variantISC_JSG_SL_EEEEclIRKSG_EEvOSX_(uint64_t **result, _QWORD *a2)
{
  uint64_t *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  _DWORD **v6;
  _DWORD *v7;
  int v8;
  int v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;

  v2 = *result;
  v3 = (a2[1] - *a2) >> 3;
  v4 = v3 + 1;
  v5 = **result;
  v6 = (_DWORD **)(*result)[1];
  v7 = *v6;
  v8 = *(unsigned __int8 *)(v5 + 8);
  v9 = v8 + v3;
  v7[2] = v9 - 1;
  v7[3] = v4;
  *v7 = -v8;
  v7[1] = -v8;
  v10 = v8 ^ 1u;
  v12 = (_QWORD *)v2[2];
  v11 = (_QWORD *)v2[3];
  *(_QWORD *)(v5 + 16) += *v12 * v10;
  if ((unint64_t)v7 >= *v11)
    v13 = v9;
  else
    v13 = v10;
  *(_QWORD *)(v5 + 32) += v13 * *v12;
  *v12 *= v4;
  *v6 = v7 + 4;
  return result;
}

uint64_t **_ZNK5boost6detail7variant15result_wrapper1IZNS_9histogram13indexed_rangeIKNS3_9histogramINSt3__16vectorINS3_4axis7variantIJNS8_7regularIdNS_11use_defaultESB_SB_EENS8_8variableIdSB_SB_NS6_9allocatorIdEEEENS8_7integerIiSB_NS8_6option3bitILj1EEEEEEEENSE_ISM_EEEENS3_17unlimited_storageINSE_IcEEEEEEEC1ERST_NS3_8coverageEEUlRKT_E_RKNS_7variantISC_JSG_SL_EEEEclIRKSL_EEvOSX_(uint64_t **result, int *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  _QWORD *v9;

  v2 = *result;
  v3 = *a2;
  v4 = v3 + 1;
  v6 = **result;
  v5 = (unint64_t *)(*result)[1];
  v7 = *v5;
  if (*(_BYTE *)(v6 + 8))
    v8 = v3 + 1;
  else
    v8 = *a2;
  *(_DWORD *)(v7 + 8) = v8;
  *(_DWORD *)(v7 + 12) = v4;
  *(_QWORD *)v7 = 0;
  v9 = (_QWORD *)v2[2];
  if (v7 >= *(_QWORD *)v2[3])
    *(_QWORD *)(v6 + 32) += *v9 * v8;
  *v9 *= v4;
  *v5 = v7 + 16;
  return result;
}

uint64_t boost::histogram::detail::fill<boost::histogram::unlimited_storage<std::allocator<char>>,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,double>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  char v9;

  v4 = boost::histogram::detail::args_to_index<0u,1u,boost::histogram::unlimited_storage<std::allocator<char>>,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,std::tuple<double>>(a1, a2, a3);
  if (!v5)
    return *(_QWORD *)(a1 + 8);
  v6 = v4;
  v8 = v4;
  boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::apply<boost::histogram::unlimited_storage<std::allocator<char>>::incrementor,boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type&,unsigned long &>(a1, (uint64_t)&v9, a1, &v8);
  return v6;
}

uint64_t boost::histogram::detail::args_to_index<0u,1u,boost::histogram::unlimited_storage<std::allocator<char>>,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,std::tuple<double>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int *v3;
  int8x16_t v5;
  uint64_t v6;
  std::logic_error v7;
  __int128 v8;

  v8 = xmmword_243A73480;
  v3 = *(int **)a2;
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 56)
  {
    std::logic_error::logic_error(&v7, "number of arguments != histogram rank");
    v7.__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    v5.i64[0] = (uint64_t)"PerfPowerServicesReader/external/lib/boostorg/histogram/include/boost/histogram/detail/linearize.hpp";
    v5.i64[1] = (uint64_t)"optional_index boost::histogram::detail::args_to_index(std::false_type, S &, const T &, const U"
                         " &) [I = 0U, N = 1U, S = boost::histogram::unlimited_storage<>, T = std::vector<boost::histogra"
                         "m::axis::variant<boost::histogram::axis::regular<>, boost::histogram::axis::variable<>, boost::"
                         "histogram::axis::integer<int, boost::use_default, boost::histogram::axis::option::bit<1>>>>, U "
                         "= std::tuple<double>]";
    v6 = 192;
    boost::throw_exception<std::invalid_argument>(&v7, &v5);
  }
  v5.i64[0] = (uint64_t)&v8;
  v5.i64[1] = a3;
  v7.__vftable = (std::logic_error_vtbl *)&v5;
  _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_EdEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENSY_11result_typeERSY_(v3, (uint64_t ***)&v7);
  return v8;
}

void boost::throw_exception<std::invalid_argument>(const std::logic_error *a1, int8x16_t *a2)
{
  void *exception;

  exception = __cxa_allocate_exception(0x40uLL);
  boost::wrapexcept<std::invalid_argument>::wrapexcept((uint64_t)exception, a1, a2);
}

void sub_243A42758(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::histogram::detail::cat<std::string,char [35],std::string,char [5],std::string>(uint64_t a1, char *a2, uint64_t a3, char *a4, uint64_t a5)
{
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[11];
  char v15;
  uint64_t v16;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v14);
  v10 = *(char *)(a1 + 23);
  if (v10 >= 0)
    v11 = a1;
  else
    v11 = *(_QWORD *)a1;
  if (v10 >= 0)
    v12 = *(unsigned __int8 *)(a1 + 23);
  else
    v12 = *(_QWORD *)(a1 + 8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, v11, v12);
  boost::histogram::detail::cat_impl<char [35],std::string,char [5],std::string>(v14, a2, a3, a4, a5);
  std::stringbuf::str();
  v14[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v14 + *(_QWORD *)(v14[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v14[1] = MEMORY[0x24BEDB848] + 16;
  if (v15 < 0)
    operator delete((void *)v14[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x2494FECBC](&v16);
}

void sub_243A4286C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *boost::histogram::detail::cat_impl<char [35],std::string,char [5],std::string>(_QWORD *a1, char *__s, uint64_t a3, char *a4, uint64_t a5)
{
  size_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;

  v10 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)__s, v10);
  v11 = *(char *)(a3 + 23);
  if (v11 >= 0)
    v12 = a3;
  else
    v12 = *(_QWORD *)a3;
  if (v11 >= 0)
    v13 = *(unsigned __int8 *)(a3 + 23);
  else
    v13 = *(_QWORD *)(a3 + 8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, v12, v13);
  return boost::histogram::detail::cat_impl<char [5],std::string>(a1, a4, a5);
}

_QWORD *std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  const std::locale::facet *v10;
  uint64_t v11;
  _BYTE v13[16];
  std::locale v14;

  MEMORY[0x2494FEBA8](v13, a1);
  if (v13[0])
  {
    v6 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
    v7 = *(_QWORD *)(v6 + 40);
    v8 = *(_DWORD *)(v6 + 8);
    v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v10 = std::locale::use_facet(&v14, MEMORY[0x24BEDB350]);
      v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20)
      v11 = a2 + a3;
    else
      v11 = a2;
    if (!std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(v7, a2, v11, a2 + a3, v6, (char)v9))
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
  MEMORY[0x2494FEBB4](v13);
  return a1;
}

void sub_243A42A08(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  _QWORD *v12;

  MEMORY[0x2494FEBB4](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x243A429E8);
}

void sub_243A42A50(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6;
  uint64_t v11;
  int64_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  void *__p[2];
  char v18;

  v6 = a1;
  if (a1)
  {
    v11 = *(_QWORD *)(a5 + 24);
    if (v11 <= a4 - a2)
      v12 = 0;
    else
      v12 = v11 - (a4 - a2);
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) != a3 - a2)
      return 0;
    if (v12 >= 1)
    {
      std::string::basic_string[abi:ne180100](__p, v12, __c);
      v13 = v18 >= 0 ? __p : (void **)__p[0];
      v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(_QWORD *)v6 + 96))(v6, v13, v12);
      if (v18 < 0)
        operator delete(__p[0]);
      if (v14 != v12)
        return 0;
    }
    v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 96))(v6, a3, v15) == v15)
      *(_QWORD *)(a5 + 24) = 0;
    else
      return 0;
  }
  return v6;
}

void sub_243A42B84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::string::basic_string[abi:ne180100](_QWORD *__b, size_t __len, int __c)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((_BYTE *)__b + 23) = __len;
    v6 = __b;
    if (!__len)
      goto LABEL_9;
  }
  memset(v6, __c, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __b;
}

_QWORD *boost::histogram::detail::cat_impl<char [5],std::string>(_QWORD *a1, char *__s, uint64_t a3)
{
  size_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  v6 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)__s, v6);
  v7 = *(char *)(a3 + 23);
  if (v7 >= 0)
    v8 = a3;
  else
    v8 = *(_QWORD *)a3;
  if (v7 >= 0)
    v9 = *(unsigned __int8 *)(a3 + 23);
  else
    v9 = *(_QWORD *)(a3 + 8);
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, v8, v9);
}

boost::core::scoped_demangled_name *boost::core::scoped_demangled_name::scoped_demangled_name(boost::core::scoped_demangled_name *this, const char *lpmangled)
{
  size_t v4;
  int status;

  status = 0;
  v4 = 0;
  *(_QWORD *)this = __cxa_demangle(lpmangled, 0, &v4, &status);
  return this;
}

uint64_t boost::wrapexcept<std::invalid_argument>::wrapexcept(uint64_t a1, const std::logic_error *a2, int8x16_t *a3)
{
  *(_QWORD *)a1 = &unk_25142A9E0;
  std::logic_error::logic_error((std::logic_error *)(a1 + 8), a2);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)a1 = &unk_25142CAE8;
  *(_QWORD *)(a1 + 8) = &unk_25142CB18;
  *(_QWORD *)(a1 + 24) = &unk_25142CB40;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 56) = a3[1].i32[0];
  *(int8x16_t *)(a1 + 40) = vextq_s8(*a3, *a3, 8uLL);
  return a1;
}

uint64_t boost::wrapexcept<std::invalid_argument>::~wrapexcept(uint64_t a1)
{
  *(_QWORD *)(a1 + 24) = &unk_25142AA38;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 32));
  MEMORY[0x2494FEA94](a1 + 8);
  return a1;
}

uint64_t boost::wrapexcept<std::invalid_argument>::clone(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = operator new();
  *(_QWORD *)v2 = &unk_25142A9E0;
  std::logic_error::logic_error((std::logic_error *)(v2 + 8), (const std::logic_error *)(a1 + 8));
  *(_QWORD *)(v2 + 8) = MEMORY[0x24BEDB8D0] + 16;
  *(_QWORD *)(v2 + 24) = &unk_25142AA38;
  v3 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(v2 + 32) = v3;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_DWORD *)(v2 + 56) = *(_DWORD *)(a1 + 56);
  *(_QWORD *)v2 = &unk_25142CAE8;
  *(_QWORD *)(v2 + 8) = &unk_25142CB18;
  *(_QWORD *)(v2 + 24) = &unk_25142CB40;
  boost::exception_detail::copy_boost_exception(v2 + 24, a1 + 24);
  return v2;
}

void boost::wrapexcept<std::invalid_argument>::rethrow(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x40uLL);
  boost::wrapexcept<std::invalid_argument>::wrapexcept((uint64_t)exception, a1);
}

void sub_243A42EF8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<std::invalid_argument>::~wrapexcept(uint64_t a1)
{
  *(_QWORD *)(a1 + 24) = &unk_25142AA38;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 32));
  MEMORY[0x2494FEA94](a1 + 8);
  JUMPOUT(0x2494FECF8);
}

void `non-virtual thunk to'boost::wrapexcept<std::invalid_argument>::~wrapexcept(uint64_t a1)
{
  *(_QWORD *)(a1 + 16) = &unk_25142AA38;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 24));
  JUMPOUT(0x2494FEA94);
}

{
  *(_QWORD *)(a1 + 16) = &unk_25142AA38;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 24));
  MEMORY[0x2494FEA94](a1);
  JUMPOUT(0x2494FECF8);
}

void `non-virtual thunk to'boost::wrapexcept<std::invalid_argument>::~wrapexcept(_QWORD *a1)
{
  *a1 = &unk_25142AA38;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  JUMPOUT(0x2494FEA94);
}

{
  *a1 = &unk_25142AA38;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  MEMORY[0x2494FEA94](a1 - 2);
  JUMPOUT(0x2494FECF8);
}

uint64_t boost::wrapexcept<std::invalid_argument>::wrapexcept(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)a1 = &unk_25142A9E0;
  std::logic_error::logic_error((std::logic_error *)(a1 + 8), (const std::logic_error *)(a2 + 8));
  *(_QWORD *)(a1 + 8) = MEMORY[0x24BEDB8D0] + 16;
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = &unk_25142AA38;
  *(_QWORD *)(a1 + 32) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v5;
  *(_QWORD *)a1 = &unk_25142CAE8;
  *(_QWORD *)(a1 + 8) = &unk_25142CB18;
  *(_QWORD *)(a1 + 24) = &unk_25142CB40;
  return a1;
}

uint64_t _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_EdEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENSY_11result_typeERSY_(int *a1, uint64_t ***a2)
{
  int *v2;
  uint64_t result;

  v2 = a1 + 2;
  switch(*a1 ^ (*a1 >> 31))
  {
    case 0:
      result = (uint64_t)boost::histogram::detail::linearize_value<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,double>(**a2, (uint64_t)v2, (double *)(*a2)[1]);
      break;
    case 1:
      result = boost::histogram::detail::linearize_value<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,double>(**a2, (uint64_t)v2, (double *)(*a2)[1]);
      break;
    case 2:
      result = (uint64_t)_ZNK5boost6detail7variant15result_wrapper1IZNS_9histogram6detail15linearize_valueIJNS3_4axis7regularIdNS_11use_defaultES8_S8_EENS6_8variableIdS8_S8_NSt3__19allocatorIdEEEENS6_7integerIiS8_NS6_6option3bitILj1EEEEEEdEEvRNS4_14optional_indexERKNS6_7variantIJDpT_EEERKT0_EUlRKT_E_RKNS_7variantIS9_JSE_SJ_EEEEclIRKSJ_EEvOSV_(a2, v2);
      break;
    default:
      boost::detail::variant::forced_return<void>();
  }
  return result;
}

_QWORD *boost::histogram::detail::linearize_value<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,double>(_QWORD *result, uint64_t a2, double *a3)
{
  double v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;

  v3 = (*a3 - *(double *)(a2 + 32)) / *(double *)(a2 + 40);
  if (v3 >= 1.0)
  {
    v4 = *(_DWORD *)a2;
    v5 = *(_DWORD *)a2;
  }
  else
  {
    v4 = *(_DWORD *)a2;
    if (v3 >= 0.0)
      v5 = (int)(v3 * (double)v4);
    else
      v5 = -1;
  }
  LODWORD(v6) = v4 + 2;
  v7 = result[1];
  v8 = v5 + 1 >= (int)v6 || v5 <= -2;
  v6 = (int)v6;
  if (v8)
    v6 = 0;
  *result += v7 * (v5 + 1);
  result[1] = v6 * v7;
  return result;
}

uint64_t boost::histogram::detail::linearize_value<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,double>(_QWORD *a1, uint64_t a2, double *a3)
{
  uint64_t result;
  unint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;

  result = boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>::index((double **)a2, *a3);
  v6 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  v7 = a1[1];
  v8 = (int)result >= (int)(v6 >> 3) || (int)result <= -2;
  v9 = (uint64_t)((v6 << 29) + 0x100000000) >> 32;
  if (v8)
    v9 = 0;
  *a1 += v7 * ((int)result + 1);
  a1[1] = v9 * v7;
  return result;
}

uint64_t boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>::index(double **a1, double a2)
{
  double *v2;
  unint64_t v3;
  unint64_t v4;
  double *v5;
  double *v6;
  double v7;

  v2 = a1[1];
  if (v2 != *a1)
  {
    v3 = v2 - *a1;
    v2 = *a1;
    do
    {
      v4 = v3 >> 1;
      v5 = &v2[v3 >> 1];
      v7 = *v5;
      v6 = v5 + 1;
      v3 += ~(v3 >> 1);
      if (v7 > a2)
        v3 = v4;
      else
        v2 = v6;
    }
    while (v3);
  }
  return ((unint64_t)((char *)v2 - (char *)*a1) >> 3) - 1;
}

uint64_t ***_ZNK5boost6detail7variant15result_wrapper1IZNS_9histogram6detail15linearize_valueIJNS3_4axis7regularIdNS_11use_defaultES8_S8_EENS6_8variableIdS8_S8_NSt3__19allocatorIdEEEENS6_7integerIiS8_NS6_6option3bitILj1EEEEEEdEEvRNS4_14optional_indexERKNS6_7variantIJDpT_EEERKT0_EUlRKT_E_RKNS_7variantIS9_JSE_SJ_EEEEclIRKSJ_EEvOSV_(uint64_t ***result, int *a2)
{
  uint64_t *v2;
  double v3;
  int v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  v2 = **result;
  v3 = *(double *)(*result)[1];
  v4 = a2[8];
  v5 = (int)v3 - v4;
  v11 = (int)v3 < v4;
  v6 = *a2;
  if (v11)
    v7 = -1;
  else
    v7 = v5;
  if (v5 >= (int)v6)
    v8 = *a2;
  else
    v8 = v7;
  v9 = v2[1];
  v10 = *v2 + v9 * v8;
  v11 = v8 > (int)v6 || v8 <= -1;
  if (v11)
    v12 = 0;
  else
    v12 = v6 + 1;
  *v2 = v10;
  v2[1] = v12 * v9;
  return result;
}

void boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::apply<boost::histogram::unlimited_storage<std::allocator<char>>::incrementor,boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type&,unsigned long &>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;

  switch(*(_BYTE *)(a1 + 16))
  {
    case 0:
      v5 = *(_QWORD *)(a1 + 24);
      v6 = *a4;
      v7 = *(unsigned __int8 *)(v5 + *a4);
      if (v7 == 255)
      {
        boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::make<unsigned short,unsigned char *>(a3, *(_QWORD *)(a3 + 8), v5);
        ++*(_WORD *)(*(_QWORD *)(a3 + 24) + 2 * v6);
      }
      else
      {
        *(_BYTE *)(v5 + v6) = v7 + 1;
      }
      break;
    case 1:
      v8 = *(_QWORD *)(a1 + 24);
      v9 = *a4;
      v10 = *(unsigned __int16 *)(v8 + 2 * *a4);
      if (v10 == 0xFFFF)
      {
        boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::make<unsigned int,unsigned short *>(a3, *(_QWORD *)(a3 + 8), v8);
        ++*(_DWORD *)(*(_QWORD *)(a3 + 24) + 4 * v9);
      }
      else
      {
        *(_WORD *)(v8 + 2 * v9) = v10 + 1;
      }
      break;
    case 2:
      v11 = *(_QWORD *)(a1 + 24);
      v12 = *a4;
      v13 = *(_DWORD *)(v11 + 4 * *a4);
      if (v13 == -1)
      {
        boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::make<unsigned long long,unsigned int *>(a3, *(_QWORD *)(a3 + 8), v11);
        ++*(_QWORD *)(*(_QWORD *)(a3 + 24) + 8 * v12);
      }
      else
      {
        *(_DWORD *)(v11 + 4 * v12) = v13 + 1;
      }
      break;
    case 3:
      boost::histogram::unlimited_storage<std::allocator<char>>::incrementor::operator()<unsigned long long,boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type>(a2, *(_QWORD *)(a1 + 24), a3, *a4);
      break;
    case 4:
      boost::histogram::detail::mp_int<std::allocator<unsigned long long>>::operator++(*(_QWORD *)(a1 + 24) + 24 * *a4);
      break;
    default:
      *(double *)(*(_QWORD *)(a1 + 24) + 8 * *a4) = *(double *)(*(_QWORD *)(a1 + 24) + 8 * *a4) + 1.0;
      break;
  }
}

uint64_t boost::histogram::unlimited_storage<std::allocator<char>>::incrementor::operator()<unsigned long long,boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t result;

  v6 = *(_QWORD *)(a2 + 8 * a4);
  if (v6 == -1)
  {
    boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::make<boost::histogram::detail::mp_int<std::allocator<unsigned long long>>,unsigned long long *>(a3, *(_QWORD *)(a3 + 8), a2);
    return boost::histogram::detail::mp_int<std::allocator<unsigned long long>>::operator++(*(_QWORD *)(a3 + 24) + 24 * a4);
  }
  else
  {
    *(_QWORD *)(a2 + 8 * a4) = v6 + 1;
  }
  return result;
}

void boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::make<unsigned short,unsigned char *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  char v6;

  if (a2)
    v5 = boost::histogram::detail::create_buffer<std::allocator<unsigned short>,unsigned char *>((uint64_t)&v6, a2, a3);
  else
    v5 = 0;
  boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::destroy(a1);
  *(_QWORD *)(a1 + 8) = a2;
  *(_BYTE *)(a1 + 16) = 1;
  *(_QWORD *)(a1 + 24) = v5;
}

char *boost::histogram::detail::create_buffer<std::allocator<unsigned short>,unsigned char *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 *v3;
  uint64_t v4;
  char *result;
  uint64_t v6;
  __int16 v7;

  if (!a2)
    boost::histogram::detail::create_buffer<std::allocator<unsigned char>,unsigned char *>(a1, 0, a3);
  if (a2 < 0)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v3 = (unsigned __int8 *)a3;
  v4 = 2 * a2;
  result = (char *)operator new(2 * a2);
  v6 = 0;
  do
  {
    v7 = *v3++;
    *(_WORD *)&result[v6] = v7;
    v6 += 2;
  }
  while (v4 != v6);
  return result;
}

void boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::make<unsigned int,unsigned short *>(uint64_t a1, unint64_t a2, uint64_t a3)
{
  char *v5;
  char v6;

  if (a2)
    v5 = boost::histogram::detail::create_buffer<std::allocator<unsigned int>,unsigned short *>((uint64_t)&v6, a2, a3);
  else
    v5 = 0;
  boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::destroy(a1);
  *(_QWORD *)(a1 + 8) = a2;
  *(_BYTE *)(a1 + 16) = 2;
  *(_QWORD *)(a1 + 24) = v5;
}

char *boost::histogram::detail::create_buffer<std::allocator<unsigned int>,unsigned short *>(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unsigned __int16 *v3;
  uint64_t v4;
  char *result;
  uint64_t v6;
  int v7;

  if (!a2)
    boost::histogram::detail::create_buffer<std::allocator<unsigned char>,unsigned char *>(a1, 0, a3);
  if (a2 >> 62)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v3 = (unsigned __int16 *)a3;
  v4 = 4 * a2;
  result = (char *)operator new(4 * a2);
  v6 = 0;
  do
  {
    v7 = *v3++;
    *(_DWORD *)&result[v6] = v7;
    v6 += 4;
  }
  while (v4 != v6);
  return result;
}

void boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::make<unsigned long long,unsigned int *>(uint64_t a1, unint64_t a2, uint64_t a3)
{
  char *v5;
  char v6;

  if (a2)
    v5 = boost::histogram::detail::create_buffer<std::allocator<unsigned long long>,unsigned int *>((uint64_t)&v6, a2, a3);
  else
    v5 = 0;
  boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::destroy(a1);
  *(_QWORD *)(a1 + 8) = a2;
  *(_BYTE *)(a1 + 16) = 3;
  *(_QWORD *)(a1 + 24) = v5;
}

char *boost::histogram::detail::create_buffer<std::allocator<unsigned long long>,unsigned int *>(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unsigned int *v3;
  uint64_t v4;
  char *result;
  uint64_t v6;
  unsigned int v7;

  if (!a2)
    boost::histogram::detail::create_buffer<std::allocator<unsigned char>,unsigned char *>(a1, 0, a3);
  if (a2 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v3 = (unsigned int *)a3;
  v4 = 8 * a2;
  result = (char *)operator new(8 * a2);
  v6 = 0;
  do
  {
    v7 = *v3++;
    *(_QWORD *)&result[v6] = v7;
    v6 += 8;
  }
  while (v4 != v6);
  return result;
}

void boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::make<boost::histogram::detail::mp_int<std::allocator<unsigned long long>>,unsigned long long *>(uint64_t a1, unint64_t a2, uint64_t a3)
{
  char *v5;
  char v6;

  if (a2)
    v5 = boost::histogram::detail::create_buffer<std::allocator<boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>,unsigned long long *>((uint64_t)&v6, a2, a3);
  else
    v5 = 0;
  boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::destroy(a1);
  *(_QWORD *)(a1 + 8) = a2;
  *(_BYTE *)(a1 + 16) = 4;
  *(_QWORD *)(a1 + 24) = v5;
}

uint64_t boost::histogram::detail::mp_int<std::allocator<unsigned long long>>::operator++(uint64_t a1)
{
  char *v2;
  char *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;

  v2 = *(char **)a1;
  v3 = *(char **)(a1 + 8);
  if (v3 == v2)
    boost::histogram::detail::mp_int<std::allocator<unsigned long long>>::operator++();
  v5 = 0;
  v6 = (v3 - v2) >> 3;
  do
  {
    v7 = *(_QWORD *)&v2[8 * v5];
    if (v7 != -1)
    {
      *(_QWORD *)&v2[8 * v5] = v7 + 1;
      return a1;
    }
    *(_QWORD *)&v2[8 * v5++] = 0;
  }
  while (v6 != v5);
  v8 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v3 >= v8)
  {
    v10 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::__throw_length_error[abi:ne180100]();
    v11 = v8 - (_QWORD)v2;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(a1 + 16, v12);
      v2 = *(char **)a1;
      v3 = *(char **)(a1 + 8);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[8 * v6];
    v15 = &v13[8 * v12];
    *(_QWORD *)v14 = 1;
    v9 = v14 + 8;
    while (v3 != v2)
    {
      v16 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v14 - 1) = v16;
      v14 -= 8;
    }
    *(_QWORD *)a1 = v14;
    *(_QWORD *)(a1 + 8) = v9;
    *(_QWORD *)(a1 + 16) = v15;
    if (v2)
      operator delete(v2);
  }
  else
  {
    *(_QWORD *)v3 = 1;
    v9 = v3 + 8;
  }
  *(_QWORD *)(a1 + 8) = v9;
  return a1;
}

char *boost::histogram::detail::create_buffer<std::allocator<boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>,unsigned long long *>(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;

  if (!a2)
    boost::histogram::detail::create_buffer<std::allocator<unsigned char>,unsigned char *>(a1, 0, a3);
  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v3 = (uint64_t *)a3;
  v4 = 3 * a2;
  v5 = (char *)operator new(24 * a2);
  v6 = 0;
  v7 = &v5[8 * v4];
  do
  {
    v8 = &v5[v6];
    v9 = *v3;
    *((_QWORD *)v8 + 1) = 0;
    *((_QWORD *)v8 + 2) = 0;
    *(_QWORD *)v8 = 0;
    v10 = operator new(8uLL);
    *(_QWORD *)v8 = v10;
    *v10++ = v9;
    ++v3;
    *((_QWORD *)v8 + 1) = v10;
    *((_QWORD *)v8 + 2) = v10;
    v6 += 24;
  }
  while (v8 + 24 != v7);
  return v5;
}

void sub_243A43948(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t boost::histogram::detail::fill<boost::histogram::unlimited_storage<std::allocator<char>>,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,double,double>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  char v9;

  v4 = boost::histogram::detail::args_to_index<0u,2u,boost::histogram::unlimited_storage<std::allocator<char>>,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,std::tuple<double,double>>(a1, a2, a3);
  if (!v5)
    return *(_QWORD *)(a1 + 8);
  v6 = v4;
  v8 = v4;
  boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::apply<boost::histogram::unlimited_storage<std::allocator<char>>::incrementor,boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type&,unsigned long &>(a1, (uint64_t)&v9, a1, &v8);
  return v6;
}

uint64_t boost::histogram::detail::args_to_index<0u,2u,boost::histogram::unlimited_storage<std::allocator<char>>,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,std::tuple<double,double>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int *v3;
  uint64_t v4;
  std::logic_error v6;
  int8x16_t v7;
  uint64_t v8;
  __int128 v9;
  int8x16_t *v10;

  v9 = xmmword_243A73480;
  v3 = *(int **)a2;
  v4 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  if (v4 != 2)
  {
    if (v4 == 1)
    {
      v6.__vftable = (std::logic_error_vtbl *)a3;
      v6.__imp_.__imp_ = (const char *)(a3 + 8);
      v7.i64[0] = (uint64_t)&v9;
      v7.i64[1] = (uint64_t)&v6;
      v10 = &v7;
      _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_ENS7_5tupleIJRKdSP_EEEEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENS12_11result_typeERS12_(v3);
    }
    std::logic_error::logic_error(&v6, "number of arguments != histogram rank");
    v6.__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    v7.i64[0] = (uint64_t)"PerfPowerServicesReader/external/lib/boostorg/histogram/include/boost/histogram/detail/linearize.hpp";
    v7.i64[1] = (uint64_t)"optional_index boost::histogram::detail::args_to_index(std::false_type, S &, const T &, const U"
                         " &) [I = 0U, N = 2U, S = boost::histogram::unlimited_storage<>, T = std::vector<boost::histogra"
                         "m::axis::variant<boost::histogram::axis::regular<>, boost::histogram::axis::variable<>, boost::"
                         "histogram::axis::integer<int, boost::use_default, boost::histogram::axis::option::bit<1>>>>, U "
                         "= std::tuple<double, double>]";
    v8 = 192;
    boost::throw_exception<std::invalid_argument>(&v6, &v7);
  }
  v7.i64[0] = (uint64_t)&v9;
  v7.i64[1] = a2;
  v8 = a3;
  boost::mp11::detail::mp_for_each_impl<std::integral_constant<unsigned long,0ul>,std::integral_constant<unsigned long,1ul>,boost::histogram::detail::optional_index boost::histogram::detail::args_to_index<0u,2u,boost::histogram::unlimited_storage<std::allocator<char>>,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,std::tuple<double,double>>(std::integral_constant<BOOL,false>,boost::histogram::unlimited_storage<std::allocator<char>> &,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>> const&,std::tuple<double,double> const&)::{lambda(std::integral_constant<unsigned long,0ul>,std::integral_constant<unsigned long,1ul>)#1}>(v7.i64, (uint64_t)&v6);
  return v9;
}

void _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_ENS7_5tupleIJRKdSP_EEEEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENS12_11result_typeERS12_(int *a1)
{
  switch(*a1 ^ (*a1 >> 31))
  {
    case 0:
      boost::histogram::detail::linearize_value<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,std::tuple<double const&,double const&>>();
    case 1:
      boost::histogram::detail::linearize_value<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,std::tuple<double const&,double const&>>();
    case 2:
      boost::histogram::detail::linearize_value<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>,std::tuple<double const&,double const&>>();
    default:
      boost::detail::variant::forced_return<void>();
  }
}

void boost::histogram::detail::linearize_value<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,std::tuple<double const&,double const&>>()
{
  _ZZN5boost9histogram4axis6traits5indexINS1_7regularIdNS_11use_defaultES5_S5_EENSt3__15tupleIJRKdSA_EEEEEDaRKT_RKT0_ENKUlRKS6_E_clESK_();
}

uint64_t sub_243A43B50(uint64_t result)
{
  int *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v5;

  v3 = v2[1];
  if ((int)result + 1 >= *v1 + 2 || (int)result <= -2)
    v5 = 0;
  else
    v5 = *v1 + 2;
  *v2 += v3 * ((int)result + 1);
  v2[1] = v5 * v3;
  return result;
}

void _ZZN5boost9histogram4axis6traits5indexINS1_7regularIdNS_11use_defaultES5_S5_EENSt3__15tupleIJRKdSA_EEEEEDaRKT_RKT0_ENKUlRKS6_E_clESK_()
{
  char *v0;
  char *v1;
  const char *v2;
  char *v3;
  std::logic_error *v4;
  int8x16_t v5;
  uint64_t v6;
  _QWORD v7[3];
  _QWORD v8[3];
  _QWORD v9[3];
  std::string v10;
  std::logic_error v11;

  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v10, (const char *)(0x8000000243A6EBF4 & 0x7FFFFFFFFFFFFFFFLL));
  if (v10.__r_.__value_.__r.__words[0])
    v0 = (char *)v10.__r_.__value_.__r.__words[0];
  else
    v0 = (char *)(0x8000000243A6EBF4 & 0x7FFFFFFFFFFFFFFFLL);
  std::string::basic_string[abi:ne180100]<0>(v9, v0);
  free(v10.__r_.__value_.__l.__data_);
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v10, (const char *)(0x8000000243A732E2 & 0x7FFFFFFFFFFFFFFFLL));
  if (v10.__r_.__value_.__r.__words[0])
    v1 = (char *)v10.__r_.__value_.__r.__words[0];
  else
    v1 = (char *)(0x8000000243A732E2 & 0x7FFFFFFFFFFFFFFFLL);
  std::string::basic_string[abi:ne180100]<0>(v8, v1);
  free(v10.__r_.__value_.__l.__data_);
  v2 = (const char *)(*(_QWORD *)(MEMORY[0x24BEDB780] + 8) & 0x7FFFFFFFFFFFFFFFLL);
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v10, v2);
  if (v10.__r_.__value_.__r.__words[0])
    v3 = (char *)v10.__r_.__value_.__r.__words[0];
  else
    v3 = (char *)v2;
  std::string::basic_string[abi:ne180100]<0>(v7, v3);
  free(v10.__r_.__value_.__l.__data_);
  boost::histogram::detail::cat<std::string,char [35],std::string,char [5],std::string>((uint64_t)v9, ": cannot convert argument of type ", (uint64_t)v8, " to ", (uint64_t)v7);
  v4 = std::logic_error::logic_error(&v11, &v10);
  v11.__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
  v5.i64[0] = (uint64_t)"PerfPowerServicesReader/external/lib/boostorg/histogram/include/boost/histogram/axis/traits.hpp";
  v5.i64[1] = (uint64_t)"auto boost::histogram::axis::traits::index(const boost::histogram::axis::regular<> &, const std::"
                       "tuple<const double &, const double &> &)::(anonymous class)::operator()(const Axis &) const";
  v6 = 190;
  boost::throw_exception<std::invalid_argument>(v4, &v5);
}

void boost::histogram::detail::linearize_value<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,std::tuple<double const&,double const&>>()
{
  _ZZN5boost9histogram4axis6traits5indexINS1_8variableIdNS_11use_defaultES5_NSt3__19allocatorIdEEEENS6_5tupleIJRKdSC_EEEEEDaRKT_RKT0_ENKUlRKS9_E_clESM_();
}

uint64_t sub_243A43D6C(uint64_t result)
{
  _QWORD *v1;
  _QWORD *v2;
  unint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  v3 = v1[1] - *v1;
  v4 = v2[1];
  v5 = (int)result >= (int)(v3 >> 3) || (int)result <= -2;
  v6 = (uint64_t)((v3 << 29) + 0x100000000) >> 32;
  if (v5)
    v6 = 0;
  *v2 += v4 * ((int)result + 1);
  v2[1] = v6 * v4;
  return result;
}

void _ZZN5boost9histogram4axis6traits5indexINS1_8variableIdNS_11use_defaultES5_NSt3__19allocatorIdEEEENS6_5tupleIJRKdSC_EEEEEDaRKT_RKT0_ENKUlRKS9_E_clESM_()
{
  char *v0;
  char *v1;
  const char *v2;
  char *v3;
  std::logic_error *v4;
  int8x16_t v5;
  uint64_t v6;
  _QWORD v7[3];
  _QWORD v8[3];
  _QWORD v9[3];
  std::string v10;
  std::logic_error v11;

  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v10, (const char *)(0x8000000243A6F172 & 0x7FFFFFFFFFFFFFFFLL));
  if (v10.__r_.__value_.__r.__words[0])
    v0 = (char *)v10.__r_.__value_.__r.__words[0];
  else
    v0 = (char *)(0x8000000243A6F172 & 0x7FFFFFFFFFFFFFFFLL);
  std::string::basic_string[abi:ne180100]<0>(v9, v0);
  free(v10.__r_.__value_.__l.__data_);
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v10, (const char *)(0x8000000243A732E2 & 0x7FFFFFFFFFFFFFFFLL));
  if (v10.__r_.__value_.__r.__words[0])
    v1 = (char *)v10.__r_.__value_.__r.__words[0];
  else
    v1 = (char *)(0x8000000243A732E2 & 0x7FFFFFFFFFFFFFFFLL);
  std::string::basic_string[abi:ne180100]<0>(v8, v1);
  free(v10.__r_.__value_.__l.__data_);
  v2 = (const char *)(*(_QWORD *)(MEMORY[0x24BEDB780] + 8) & 0x7FFFFFFFFFFFFFFFLL);
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v10, v2);
  if (v10.__r_.__value_.__r.__words[0])
    v3 = (char *)v10.__r_.__value_.__r.__words[0];
  else
    v3 = (char *)v2;
  std::string::basic_string[abi:ne180100]<0>(v7, v3);
  free(v10.__r_.__value_.__l.__data_);
  boost::histogram::detail::cat<std::string,char [35],std::string,char [5],std::string>((uint64_t)v9, ": cannot convert argument of type ", (uint64_t)v8, " to ", (uint64_t)v7);
  v4 = std::logic_error::logic_error(&v11, &v10);
  v11.__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
  v5.i64[0] = (uint64_t)"PerfPowerServicesReader/external/lib/boostorg/histogram/include/boost/histogram/axis/traits.hpp";
  v5.i64[1] = (uint64_t)"auto boost::histogram::axis::traits::index(const boost::histogram::axis::variable<> &, const std:"
                       ":tuple<const double &, const double &> &)::(anonymous class)::operator()(const Axis &) const";
  v6 = 190;
  boost::throw_exception<std::invalid_argument>(v4, &v5);
}

void boost::histogram::detail::linearize_value<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>,std::tuple<double const&,double const&>>()
{
  _ZZN5boost9histogram4axis6traits5indexINS1_7integerIiNS_11use_defaultENS1_6option3bitILj1EEEEENSt3__15tupleIJRKdSD_EEEEEDaRKT_RKT0_ENKUlRKS9_E_clESN_();
}

uint64_t sub_243A43F98(uint64_t result)
{
  int *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v3 = *v1;
  v4 = v2[1];
  if ((int)result > (int)v3 || (int)result <= -1)
    v6 = 0;
  else
    v6 = v3 + 1;
  *v2 += v4 * (int)result;
  v2[1] = v6 * v4;
  return result;
}

void _ZZN5boost9histogram4axis6traits5indexINS1_7integerIiNS_11use_defaultENS1_6option3bitILj1EEEEENSt3__15tupleIJRKdSD_EEEEEDaRKT_RKT0_ENKUlRKS9_E_clESN_()
{
  char *v0;
  char *v1;
  const char *v2;
  char *v3;
  std::logic_error *v4;
  int8x16_t v5;
  uint64_t v6;
  _QWORD v7[3];
  _QWORD v8[3];
  _QWORD v9[3];
  std::string v10;
  std::logic_error v11;

  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v10, (const char *)(0x8000000243A6F746 & 0x7FFFFFFFFFFFFFFFLL));
  if (v10.__r_.__value_.__r.__words[0])
    v0 = (char *)v10.__r_.__value_.__r.__words[0];
  else
    v0 = (char *)(0x8000000243A6F746 & 0x7FFFFFFFFFFFFFFFLL);
  std::string::basic_string[abi:ne180100]<0>(v9, v0);
  free(v10.__r_.__value_.__l.__data_);
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v10, (const char *)(0x8000000243A732E2 & 0x7FFFFFFFFFFFFFFFLL));
  if (v10.__r_.__value_.__r.__words[0])
    v1 = (char *)v10.__r_.__value_.__r.__words[0];
  else
    v1 = (char *)(0x8000000243A732E2 & 0x7FFFFFFFFFFFFFFFLL);
  std::string::basic_string[abi:ne180100]<0>(v8, v1);
  free(v10.__r_.__value_.__l.__data_);
  v2 = (const char *)(*(_QWORD *)(MEMORY[0x24BEDB798] + 8) & 0x7FFFFFFFFFFFFFFFLL);
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v10, v2);
  if (v10.__r_.__value_.__r.__words[0])
    v3 = (char *)v10.__r_.__value_.__r.__words[0];
  else
    v3 = (char *)v2;
  std::string::basic_string[abi:ne180100]<0>(v7, v3);
  free(v10.__r_.__value_.__l.__data_);
  boost::histogram::detail::cat<std::string,char [35],std::string,char [5],std::string>((uint64_t)v9, ": cannot convert argument of type ", (uint64_t)v8, " to ", (uint64_t)v7);
  v4 = std::logic_error::logic_error(&v11, &v10);
  v11.__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
  v5.i64[0] = (uint64_t)"PerfPowerServicesReader/external/lib/boostorg/histogram/include/boost/histogram/axis/traits.hpp";
  v5.i64[1] = (uint64_t)"auto boost::histogram::axis::traits::index(const boost::histogram::axis::integer<int, boost::use_"
                       "default, boost::histogram::axis::option::bit<1>> &, const std::tuple<const double &, const double"
                       " &> &)::(anonymous class)::operator()(const Axis &) const";
  v6 = 190;
  boost::throw_exception<std::invalid_argument>(v4, &v5);
}

__n128 boost::mp11::detail::mp_for_each_impl<std::integral_constant<unsigned long,0ul>,std::integral_constant<unsigned long,1ul>,boost::histogram::detail::optional_index boost::histogram::detail::args_to_index<0u,2u,boost::histogram::unlimited_storage<std::allocator<char>>,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,std::tuple<double,double>>(std::integral_constant<BOOL,false>,boost::histogram::unlimited_storage<std::allocator<char>> &,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>> const&,std::tuple<double,double> const&)::{lambda(std::integral_constant<unsigned long,0ul>,std::integral_constant<unsigned long,1ul>)#1}>@<Q0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  __n128 result;
  uint64_t v10;
  uint64_t v11;
  uint64_t **v12;

  v4 = *a1;
  v5 = *(int **)a1[1];
  v6 = a1[2];
  v10 = v4;
  v11 = v6;
  v12 = (uint64_t **)&v10;
  _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_EdEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENSY_11result_typeERSY_(v5, &v12);
  v7 = (int *)(*(_QWORD *)a1[1] + 56);
  v8 = a1[2] + 8;
  v10 = *a1;
  v11 = v8;
  v12 = (uint64_t **)&v10;
  _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_EdEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENSY_11result_typeERSY_(v7, &v12);
  result = *(__n128 *)a1;
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_QWORD *)(a2 + 16) = a1[2];
  return result;
}

uint64_t boost::histogram::detail::fill<boost::histogram::unlimited_storage<std::allocator<char>>,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,double,double,double>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  char v9;

  v4 = boost::histogram::detail::args_to_index<0u,3u,boost::histogram::unlimited_storage<std::allocator<char>>,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,std::tuple<double,double,double>>(a1, a2, a3);
  if (!v5)
    return *(_QWORD *)(a1 + 8);
  v6 = v4;
  v8 = v4;
  boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::apply<boost::histogram::unlimited_storage<std::allocator<char>>::incrementor,boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type&,unsigned long &>(a1, (uint64_t)&v9, a1, &v8);
  return v6;
}

uint64_t boost::histogram::detail::args_to_index<0u,3u,boost::histogram::unlimited_storage<std::allocator<char>>,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,std::tuple<double,double,double>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int *v3;
  uint64_t v4;
  std::logic_error v6;
  int8x16_t v7;
  uint64_t v8;
  __int128 v9;
  std::logic_error *v10;

  v9 = xmmword_243A73480;
  v3 = *(int **)a2;
  v4 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  if (v4 != 3)
  {
    if (v4 == 1)
    {
      v7.i64[0] = a3;
      v7.i64[1] = a3 + 8;
      v8 = a3 + 16;
      v6.__vftable = (std::logic_error_vtbl *)&v9;
      v6.__imp_.__imp_ = (const char *)&v7;
      v10 = &v6;
      _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_ENS7_5tupleIJRKdSP_SP_EEEEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENS12_11result_typeERS12_(v3);
    }
    std::logic_error::logic_error(&v6, "number of arguments != histogram rank");
    v6.__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    v7.i64[0] = (uint64_t)"PerfPowerServicesReader/external/lib/boostorg/histogram/include/boost/histogram/detail/linearize.hpp";
    v7.i64[1] = (uint64_t)"optional_index boost::histogram::detail::args_to_index(std::false_type, S &, const T &, const U"
                         " &) [I = 0U, N = 3U, S = boost::histogram::unlimited_storage<>, T = std::vector<boost::histogra"
                         "m::axis::variant<boost::histogram::axis::regular<>, boost::histogram::axis::variable<>, boost::"
                         "histogram::axis::integer<int, boost::use_default, boost::histogram::axis::option::bit<1>>>>, U "
                         "= std::tuple<double, double, double>]";
    v8 = 192;
    boost::throw_exception<std::invalid_argument>(&v6, &v7);
  }
  v7.i64[0] = (uint64_t)&v9;
  v7.i64[1] = a2;
  v8 = a3;
  boost::mp11::detail::mp_for_each_impl<std::integral_constant<unsigned long,0ul>,std::integral_constant<unsigned long,1ul>,std::integral_constant<unsigned long,2ul>,boost::histogram::detail::optional_index boost::histogram::detail::args_to_index<0u,3u,boost::histogram::unlimited_storage<std::allocator<char>>,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,std::tuple<double,double,double>>(std::integral_constant<BOOL,false>,boost::histogram::unlimited_storage<std::allocator<char>> &,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>> const&,std::tuple<double,double,double> const&)::{lambda(std::integral_constant<unsigned long,0ul>,std::integral_constant<unsigned long,1ul>,std::integral_constant<unsigned long,2ul>)#1}>(v7.i64, (uint64_t)&v6);
  return v9;
}

void _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_ENS7_5tupleIJRKdSP_SP_EEEEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENS12_11result_typeERS12_(int *a1)
{
  switch(*a1 ^ (*a1 >> 31))
  {
    case 0:
      boost::histogram::detail::linearize_value<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,std::tuple<double const&,double const&,double const&>>();
    case 1:
      boost::histogram::detail::linearize_value<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,std::tuple<double const&,double const&,double const&>>();
    case 2:
      boost::histogram::detail::linearize_value<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>,std::tuple<double const&,double const&,double const&>>();
    default:
      boost::detail::variant::forced_return<void>();
  }
}

void boost::histogram::detail::linearize_value<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,std::tuple<double const&,double const&,double const&>>()
{
  _ZZN5boost9histogram4axis6traits5indexINS1_7regularIdNS_11use_defaultES5_S5_EENSt3__15tupleIJRKdSA_SA_EEEEEDaRKT_RKT0_ENKUlRKS6_E_clESK_();
}

uint64_t sub_243A4440C(uint64_t result)
{
  int *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v5;

  v3 = v2[1];
  if ((int)result + 1 >= *v1 + 2 || (int)result <= -2)
    v5 = 0;
  else
    v5 = *v1 + 2;
  *v2 += v3 * ((int)result + 1);
  v2[1] = v5 * v3;
  return result;
}

void _ZZN5boost9histogram4axis6traits5indexINS1_7regularIdNS_11use_defaultES5_S5_EENSt3__15tupleIJRKdSA_SA_EEEEEDaRKT_RKT0_ENKUlRKS6_E_clESK_()
{
  char *v0;
  char *v1;
  const char *v2;
  char *v3;
  std::logic_error *v4;
  int8x16_t v5;
  uint64_t v6;
  _QWORD v7[3];
  _QWORD v8[3];
  _QWORD v9[3];
  std::string v10;
  std::logic_error v11;

  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v10, (const char *)(0x8000000243A6EBF4 & 0x7FFFFFFFFFFFFFFFLL));
  if (v10.__r_.__value_.__r.__words[0])
    v0 = (char *)v10.__r_.__value_.__r.__words[0];
  else
    v0 = (char *)(0x8000000243A6EBF4 & 0x7FFFFFFFFFFFFFFFLL);
  std::string::basic_string[abi:ne180100]<0>(v9, v0);
  free(v10.__r_.__value_.__l.__data_);
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v10, (const char *)(0x8000000243A732FBLL & 0x7FFFFFFFFFFFFFFFLL));
  if (v10.__r_.__value_.__r.__words[0])
    v1 = (char *)v10.__r_.__value_.__r.__words[0];
  else
    v1 = (char *)(0x8000000243A732FBLL & 0x7FFFFFFFFFFFFFFFLL);
  std::string::basic_string[abi:ne180100]<0>(v8, v1);
  free(v10.__r_.__value_.__l.__data_);
  v2 = (const char *)(*(_QWORD *)(MEMORY[0x24BEDB780] + 8) & 0x7FFFFFFFFFFFFFFFLL);
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v10, v2);
  if (v10.__r_.__value_.__r.__words[0])
    v3 = (char *)v10.__r_.__value_.__r.__words[0];
  else
    v3 = (char *)v2;
  std::string::basic_string[abi:ne180100]<0>(v7, v3);
  free(v10.__r_.__value_.__l.__data_);
  boost::histogram::detail::cat<std::string,char [35],std::string,char [5],std::string>((uint64_t)v9, ": cannot convert argument of type ", (uint64_t)v8, " to ", (uint64_t)v7);
  v4 = std::logic_error::logic_error(&v11, &v10);
  v11.__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
  v5.i64[0] = (uint64_t)"PerfPowerServicesReader/external/lib/boostorg/histogram/include/boost/histogram/axis/traits.hpp";
  v5.i64[1] = (uint64_t)"auto boost::histogram::axis::traits::index(const boost::histogram::axis::regular<> &, const std::"
                       "tuple<const double &, const double &, const double &> &)::(anonymous class)::operator()(const Axis &) const";
  v6 = 190;
  boost::throw_exception<std::invalid_argument>(v4, &v5);
}

void boost::histogram::detail::linearize_value<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,std::tuple<double const&,double const&,double const&>>()
{
  _ZZN5boost9histogram4axis6traits5indexINS1_8variableIdNS_11use_defaultES5_NSt3__19allocatorIdEEEENS6_5tupleIJRKdSC_SC_EEEEEDaRKT_RKT0_ENKUlRKS9_E_clESM_();
}

uint64_t sub_243A44628(uint64_t result)
{
  _QWORD *v1;
  _QWORD *v2;
  unint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  v3 = v1[1] - *v1;
  v4 = v2[1];
  v5 = (int)result >= (int)(v3 >> 3) || (int)result <= -2;
  v6 = (uint64_t)((v3 << 29) + 0x100000000) >> 32;
  if (v5)
    v6 = 0;
  *v2 += v4 * ((int)result + 1);
  v2[1] = v6 * v4;
  return result;
}

void _ZZN5boost9histogram4axis6traits5indexINS1_8variableIdNS_11use_defaultES5_NSt3__19allocatorIdEEEENS6_5tupleIJRKdSC_SC_EEEEEDaRKT_RKT0_ENKUlRKS9_E_clESM_()
{
  char *v0;
  char *v1;
  const char *v2;
  char *v3;
  std::logic_error *v4;
  int8x16_t v5;
  uint64_t v6;
  _QWORD v7[3];
  _QWORD v8[3];
  _QWORD v9[3];
  std::string v10;
  std::logic_error v11;

  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v10, (const char *)(0x8000000243A6F172 & 0x7FFFFFFFFFFFFFFFLL));
  if (v10.__r_.__value_.__r.__words[0])
    v0 = (char *)v10.__r_.__value_.__r.__words[0];
  else
    v0 = (char *)(0x8000000243A6F172 & 0x7FFFFFFFFFFFFFFFLL);
  std::string::basic_string[abi:ne180100]<0>(v9, v0);
  free(v10.__r_.__value_.__l.__data_);
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v10, (const char *)(0x8000000243A732FBLL & 0x7FFFFFFFFFFFFFFFLL));
  if (v10.__r_.__value_.__r.__words[0])
    v1 = (char *)v10.__r_.__value_.__r.__words[0];
  else
    v1 = (char *)(0x8000000243A732FBLL & 0x7FFFFFFFFFFFFFFFLL);
  std::string::basic_string[abi:ne180100]<0>(v8, v1);
  free(v10.__r_.__value_.__l.__data_);
  v2 = (const char *)(*(_QWORD *)(MEMORY[0x24BEDB780] + 8) & 0x7FFFFFFFFFFFFFFFLL);
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v10, v2);
  if (v10.__r_.__value_.__r.__words[0])
    v3 = (char *)v10.__r_.__value_.__r.__words[0];
  else
    v3 = (char *)v2;
  std::string::basic_string[abi:ne180100]<0>(v7, v3);
  free(v10.__r_.__value_.__l.__data_);
  boost::histogram::detail::cat<std::string,char [35],std::string,char [5],std::string>((uint64_t)v9, ": cannot convert argument of type ", (uint64_t)v8, " to ", (uint64_t)v7);
  v4 = std::logic_error::logic_error(&v11, &v10);
  v11.__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
  v5.i64[0] = (uint64_t)"PerfPowerServicesReader/external/lib/boostorg/histogram/include/boost/histogram/axis/traits.hpp";
  v5.i64[1] = (uint64_t)"auto boost::histogram::axis::traits::index(const boost::histogram::axis::variable<> &, const std:"
                       ":tuple<const double &, const double &, const double &> &)::(anonymous class)::operator()(const Axis &) const";
  v6 = 190;
  boost::throw_exception<std::invalid_argument>(v4, &v5);
}

void boost::histogram::detail::linearize_value<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>,std::tuple<double const&,double const&,double const&>>()
{
  _ZZN5boost9histogram4axis6traits5indexINS1_7integerIiNS_11use_defaultENS1_6option3bitILj1EEEEENSt3__15tupleIJRKdSD_SD_EEEEEDaRKT_RKT0_ENKUlRKS9_E_clESN_();
}

uint64_t sub_243A44854(uint64_t result)
{
  int *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v3 = *v1;
  v4 = v2[1];
  if ((int)result > (int)v3 || (int)result <= -1)
    v6 = 0;
  else
    v6 = v3 + 1;
  *v2 += v4 * (int)result;
  v2[1] = v6 * v4;
  return result;
}

void _ZZN5boost9histogram4axis6traits5indexINS1_7integerIiNS_11use_defaultENS1_6option3bitILj1EEEEENSt3__15tupleIJRKdSD_SD_EEEEEDaRKT_RKT0_ENKUlRKS9_E_clESN_()
{
  char *v0;
  char *v1;
  const char *v2;
  char *v3;
  std::logic_error *v4;
  int8x16_t v5;
  uint64_t v6;
  _QWORD v7[3];
  _QWORD v8[3];
  _QWORD v9[3];
  std::string v10;
  std::logic_error v11;

  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v10, (const char *)(0x8000000243A6F746 & 0x7FFFFFFFFFFFFFFFLL));
  if (v10.__r_.__value_.__r.__words[0])
    v0 = (char *)v10.__r_.__value_.__r.__words[0];
  else
    v0 = (char *)(0x8000000243A6F746 & 0x7FFFFFFFFFFFFFFFLL);
  std::string::basic_string[abi:ne180100]<0>(v9, v0);
  free(v10.__r_.__value_.__l.__data_);
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v10, (const char *)(0x8000000243A732FBLL & 0x7FFFFFFFFFFFFFFFLL));
  if (v10.__r_.__value_.__r.__words[0])
    v1 = (char *)v10.__r_.__value_.__r.__words[0];
  else
    v1 = (char *)(0x8000000243A732FBLL & 0x7FFFFFFFFFFFFFFFLL);
  std::string::basic_string[abi:ne180100]<0>(v8, v1);
  free(v10.__r_.__value_.__l.__data_);
  v2 = (const char *)(*(_QWORD *)(MEMORY[0x24BEDB798] + 8) & 0x7FFFFFFFFFFFFFFFLL);
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v10, v2);
  if (v10.__r_.__value_.__r.__words[0])
    v3 = (char *)v10.__r_.__value_.__r.__words[0];
  else
    v3 = (char *)v2;
  std::string::basic_string[abi:ne180100]<0>(v7, v3);
  free(v10.__r_.__value_.__l.__data_);
  boost::histogram::detail::cat<std::string,char [35],std::string,char [5],std::string>((uint64_t)v9, ": cannot convert argument of type ", (uint64_t)v8, " to ", (uint64_t)v7);
  v4 = std::logic_error::logic_error(&v11, &v10);
  v11.__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
  v5.i64[0] = (uint64_t)"PerfPowerServicesReader/external/lib/boostorg/histogram/include/boost/histogram/axis/traits.hpp";
  v5.i64[1] = (uint64_t)"auto boost::histogram::axis::traits::index(const boost::histogram::axis::integer<int, boost::use_"
                       "default, boost::histogram::axis::option::bit<1>> &, const std::tuple<const double &, const double"
                       " &, const double &> &)::(anonymous class)::operator()(const Axis &) const";
  v6 = 190;
  boost::throw_exception<std::invalid_argument>(v4, &v5);
}

__n128 boost::mp11::detail::mp_for_each_impl<std::integral_constant<unsigned long,0ul>,std::integral_constant<unsigned long,1ul>,std::integral_constant<unsigned long,2ul>,boost::histogram::detail::optional_index boost::histogram::detail::args_to_index<0u,3u,boost::histogram::unlimited_storage<std::allocator<char>>,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,std::tuple<double,double,double>>(std::integral_constant<BOOL,false>,boost::histogram::unlimited_storage<std::allocator<char>> &,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>> const&,std::tuple<double,double,double> const&)::{lambda(std::integral_constant<unsigned long,0ul>,std::integral_constant<unsigned long,1ul>,std::integral_constant<unsigned long,2ul>)#1}>@<Q0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  __n128 result;
  uint64_t v12;
  uint64_t v13;
  uint64_t **v14;

  v4 = *a1;
  v5 = *(int **)a1[1];
  v6 = a1[2];
  v12 = v4;
  v13 = v6;
  v14 = (uint64_t **)&v12;
  _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_EdEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENSY_11result_typeERSY_(v5, &v14);
  v7 = (int *)(*(_QWORD *)a1[1] + 56);
  v8 = a1[2] + 8;
  v12 = *a1;
  v13 = v8;
  v14 = (uint64_t **)&v12;
  _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_EdEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENSY_11result_typeERSY_(v7, &v14);
  v9 = (int *)(*(_QWORD *)a1[1] + 112);
  v10 = a1[2] + 16;
  v12 = *a1;
  v13 = v10;
  v14 = (uint64_t **)&v12;
  _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_EdEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENSY_11result_typeERSY_(v9, &v14);
  result = *(__n128 *)a1;
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_QWORD *)(a2 + 16) = a1[2];
  return result;
}

uint64_t boost::histogram::detail::fill<boost::histogram::unlimited_storage<std::allocator<char>>,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,double,double,double,double>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  char v9;

  v4 = boost::histogram::detail::args_to_index<0u,4u,boost::histogram::unlimited_storage<std::allocator<char>>,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,std::tuple<double,double,double,double>>(a1, a2, a3);
  if (!v5)
    return *(_QWORD *)(a1 + 8);
  v6 = v4;
  v8 = v4;
  boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::apply<boost::histogram::unlimited_storage<std::allocator<char>>::incrementor,boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type&,unsigned long &>(a1, (uint64_t)&v9, a1, &v8);
  return v6;
}

uint64_t boost::histogram::detail::args_to_index<0u,4u,boost::histogram::unlimited_storage<std::allocator<char>>,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,std::tuple<double,double,double,double>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int *v3;
  uint64_t v4;
  std::logic_error v6;
  int8x16_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  std::logic_error *v11;

  v10 = xmmword_243A73480;
  v3 = *(int **)a2;
  v4 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  if (v4 != 4)
  {
    if (v4 == 1)
    {
      v7.i64[0] = a3;
      v7.i64[1] = a3 + 8;
      v8 = a3 + 16;
      v9 = a3 + 24;
      v6.__vftable = (std::logic_error_vtbl *)&v10;
      v6.__imp_.__imp_ = (const char *)&v7;
      v11 = &v6;
      _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_ENS7_5tupleIJRKdSP_SP_SP_EEEEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENS12_11result_typeERS12_(v3);
    }
    std::logic_error::logic_error(&v6, "number of arguments != histogram rank");
    v6.__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    v7.i64[0] = (uint64_t)"PerfPowerServicesReader/external/lib/boostorg/histogram/include/boost/histogram/detail/linearize.hpp";
    v7.i64[1] = (uint64_t)"optional_index boost::histogram::detail::args_to_index(std::false_type, S &, const T &, const U"
                         " &) [I = 0U, N = 4U, S = boost::histogram::unlimited_storage<>, T = std::vector<boost::histogra"
                         "m::axis::variant<boost::histogram::axis::regular<>, boost::histogram::axis::variable<>, boost::"
                         "histogram::axis::integer<int, boost::use_default, boost::histogram::axis::option::bit<1>>>>, U "
                         "= std::tuple<double, double, double, double>]";
    v8 = 192;
    boost::throw_exception<std::invalid_argument>(&v6, &v7);
  }
  v7.i64[0] = (uint64_t)&v10;
  v7.i64[1] = a2;
  v8 = a3;
  boost::mp11::detail::mp_for_each_impl<std::integral_constant<unsigned long,0ul>,std::integral_constant<unsigned long,1ul>,std::integral_constant<unsigned long,2ul>,std::integral_constant<unsigned long,3ul>,boost::histogram::detail::optional_index boost::histogram::detail::args_to_index<0u,4u,boost::histogram::unlimited_storage<std::allocator<char>>,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,std::tuple<double,double,double,double>>(std::integral_constant<BOOL,false>,boost::histogram::unlimited_storage<std::allocator<char>> &,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>> const&,std::tuple<double,double,double,double> const&)::{lambda(std::integral_constant<unsigned long,0ul>,std::integral_constant<unsigned long,1ul>,std::integral_constant<unsigned long,2ul>,std::integral_constant<unsigned long,3ul>)#1}>(v7.i64, (uint64_t)&v6);
  return v10;
}

void _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_ENS7_5tupleIJRKdSP_SP_SP_EEEEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENS12_11result_typeERS12_(int *a1)
{
  switch(*a1 ^ (*a1 >> 31))
  {
    case 0:
      boost::histogram::detail::linearize_value<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,std::tuple<double const&,double const&,double const&,double const&>>();
    case 1:
      boost::histogram::detail::linearize_value<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,std::tuple<double const&,double const&,double const&,double const&>>();
    case 2:
      boost::histogram::detail::linearize_value<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>,std::tuple<double const&,double const&,double const&,double const&>>();
    default:
      boost::detail::variant::forced_return<void>();
  }
}

void boost::histogram::detail::linearize_value<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,std::tuple<double const&,double const&,double const&,double const&>>()
{
  _ZZN5boost9histogram4axis6traits5indexINS1_7regularIdNS_11use_defaultES5_S5_EENSt3__15tupleIJRKdSA_SA_SA_EEEEEDaRKT_RKT0_ENKUlRKS6_E_clESK_();
}

uint64_t sub_243A44CF0(uint64_t result)
{
  int *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v5;

  v3 = v2[1];
  if ((int)result + 1 >= *v1 + 2 || (int)result <= -2)
    v5 = 0;
  else
    v5 = *v1 + 2;
  *v2 += v3 * ((int)result + 1);
  v2[1] = v5 * v3;
  return result;
}

void _ZZN5boost9histogram4axis6traits5indexINS1_7regularIdNS_11use_defaultES5_S5_EENSt3__15tupleIJRKdSA_SA_SA_EEEEEDaRKT_RKT0_ENKUlRKS6_E_clESK_()
{
  char *v0;
  char *v1;
  const char *v2;
  char *v3;
  std::logic_error *v4;
  int8x16_t v5;
  uint64_t v6;
  _QWORD v7[3];
  _QWORD v8[3];
  _QWORD v9[3];
  std::string v10;
  std::logic_error v11;

  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v10, (const char *)(0x8000000243A6EBF4 & 0x7FFFFFFFFFFFFFFFLL));
  if (v10.__r_.__value_.__r.__words[0])
    v0 = (char *)v10.__r_.__value_.__r.__words[0];
  else
    v0 = (char *)(0x8000000243A6EBF4 & 0x7FFFFFFFFFFFFFFFLL);
  std::string::basic_string[abi:ne180100]<0>(v9, v0);
  free(v10.__r_.__value_.__l.__data_);
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v10, (const char *)(0x8000000243A73317 & 0x7FFFFFFFFFFFFFFFLL));
  if (v10.__r_.__value_.__r.__words[0])
    v1 = (char *)v10.__r_.__value_.__r.__words[0];
  else
    v1 = (char *)(0x8000000243A73317 & 0x7FFFFFFFFFFFFFFFLL);
  std::string::basic_string[abi:ne180100]<0>(v8, v1);
  free(v10.__r_.__value_.__l.__data_);
  v2 = (const char *)(*(_QWORD *)(MEMORY[0x24BEDB780] + 8) & 0x7FFFFFFFFFFFFFFFLL);
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v10, v2);
  if (v10.__r_.__value_.__r.__words[0])
    v3 = (char *)v10.__r_.__value_.__r.__words[0];
  else
    v3 = (char *)v2;
  std::string::basic_string[abi:ne180100]<0>(v7, v3);
  free(v10.__r_.__value_.__l.__data_);
  boost::histogram::detail::cat<std::string,char [35],std::string,char [5],std::string>((uint64_t)v9, ": cannot convert argument of type ", (uint64_t)v8, " to ", (uint64_t)v7);
  v4 = std::logic_error::logic_error(&v11, &v10);
  v11.__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
  v5.i64[0] = (uint64_t)"PerfPowerServicesReader/external/lib/boostorg/histogram/include/boost/histogram/axis/traits.hpp";
  v5.i64[1] = (uint64_t)"auto boost::histogram::axis::traits::index(const boost::histogram::axis::regular<> &, const std::"
                       "tuple<const double &, const double &, const double &, const double &> &)::(anonymous class)::oper"
                       "ator()(const Axis &) const";
  v6 = 190;
  boost::throw_exception<std::invalid_argument>(v4, &v5);
}

void boost::histogram::detail::linearize_value<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,std::tuple<double const&,double const&,double const&,double const&>>()
{
  _ZZN5boost9histogram4axis6traits5indexINS1_8variableIdNS_11use_defaultES5_NSt3__19allocatorIdEEEENS6_5tupleIJRKdSC_SC_SC_EEEEEDaRKT_RKT0_ENKUlRKS9_E_clESM_();
}

uint64_t sub_243A44F0C(uint64_t result)
{
  _QWORD *v1;
  _QWORD *v2;
  unint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  v3 = v1[1] - *v1;
  v4 = v2[1];
  v5 = (int)result >= (int)(v3 >> 3) || (int)result <= -2;
  v6 = (uint64_t)((v3 << 29) + 0x100000000) >> 32;
  if (v5)
    v6 = 0;
  *v2 += v4 * ((int)result + 1);
  v2[1] = v6 * v4;
  return result;
}

void _ZZN5boost9histogram4axis6traits5indexINS1_8variableIdNS_11use_defaultES5_NSt3__19allocatorIdEEEENS6_5tupleIJRKdSC_SC_SC_EEEEEDaRKT_RKT0_ENKUlRKS9_E_clESM_()
{
  char *v0;
  char *v1;
  const char *v2;
  char *v3;
  std::logic_error *v4;
  int8x16_t v5;
  uint64_t v6;
  _QWORD v7[3];
  _QWORD v8[3];
  _QWORD v9[3];
  std::string v10;
  std::logic_error v11;

  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v10, (const char *)(0x8000000243A6F172 & 0x7FFFFFFFFFFFFFFFLL));
  if (v10.__r_.__value_.__r.__words[0])
    v0 = (char *)v10.__r_.__value_.__r.__words[0];
  else
    v0 = (char *)(0x8000000243A6F172 & 0x7FFFFFFFFFFFFFFFLL);
  std::string::basic_string[abi:ne180100]<0>(v9, v0);
  free(v10.__r_.__value_.__l.__data_);
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v10, (const char *)(0x8000000243A73317 & 0x7FFFFFFFFFFFFFFFLL));
  if (v10.__r_.__value_.__r.__words[0])
    v1 = (char *)v10.__r_.__value_.__r.__words[0];
  else
    v1 = (char *)(0x8000000243A73317 & 0x7FFFFFFFFFFFFFFFLL);
  std::string::basic_string[abi:ne180100]<0>(v8, v1);
  free(v10.__r_.__value_.__l.__data_);
  v2 = (const char *)(*(_QWORD *)(MEMORY[0x24BEDB780] + 8) & 0x7FFFFFFFFFFFFFFFLL);
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v10, v2);
  if (v10.__r_.__value_.__r.__words[0])
    v3 = (char *)v10.__r_.__value_.__r.__words[0];
  else
    v3 = (char *)v2;
  std::string::basic_string[abi:ne180100]<0>(v7, v3);
  free(v10.__r_.__value_.__l.__data_);
  boost::histogram::detail::cat<std::string,char [35],std::string,char [5],std::string>((uint64_t)v9, ": cannot convert argument of type ", (uint64_t)v8, " to ", (uint64_t)v7);
  v4 = std::logic_error::logic_error(&v11, &v10);
  v11.__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
  v5.i64[0] = (uint64_t)"PerfPowerServicesReader/external/lib/boostorg/histogram/include/boost/histogram/axis/traits.hpp";
  v5.i64[1] = (uint64_t)"auto boost::histogram::axis::traits::index(const boost::histogram::axis::variable<> &, const std:"
                       ":tuple<const double &, const double &, const double &, const double &> &)::(anonymous class)::ope"
                       "rator()(const Axis &) const";
  v6 = 190;
  boost::throw_exception<std::invalid_argument>(v4, &v5);
}

void boost::histogram::detail::linearize_value<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>,std::tuple<double const&,double const&,double const&,double const&>>()
{
  _ZZN5boost9histogram4axis6traits5indexINS1_7integerIiNS_11use_defaultENS1_6option3bitILj1EEEEENSt3__15tupleIJRKdSD_SD_SD_EEEEEDaRKT_RKT0_ENKUlRKS9_E_clESN_();
}

uint64_t sub_243A45138(uint64_t result)
{
  int *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v3 = *v1;
  v4 = v2[1];
  if ((int)result > (int)v3 || (int)result <= -1)
    v6 = 0;
  else
    v6 = v3 + 1;
  *v2 += v4 * (int)result;
  v2[1] = v6 * v4;
  return result;
}

void _ZZN5boost9histogram4axis6traits5indexINS1_7integerIiNS_11use_defaultENS1_6option3bitILj1EEEEENSt3__15tupleIJRKdSD_SD_SD_EEEEEDaRKT_RKT0_ENKUlRKS9_E_clESN_()
{
  char *v0;
  char *v1;
  const char *v2;
  char *v3;
  std::logic_error *v4;
  int8x16_t v5;
  uint64_t v6;
  _QWORD v7[3];
  _QWORD v8[3];
  _QWORD v9[3];
  std::string v10;
  std::logic_error v11;

  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v10, (const char *)(0x8000000243A6F746 & 0x7FFFFFFFFFFFFFFFLL));
  if (v10.__r_.__value_.__r.__words[0])
    v0 = (char *)v10.__r_.__value_.__r.__words[0];
  else
    v0 = (char *)(0x8000000243A6F746 & 0x7FFFFFFFFFFFFFFFLL);
  std::string::basic_string[abi:ne180100]<0>(v9, v0);
  free(v10.__r_.__value_.__l.__data_);
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v10, (const char *)(0x8000000243A73317 & 0x7FFFFFFFFFFFFFFFLL));
  if (v10.__r_.__value_.__r.__words[0])
    v1 = (char *)v10.__r_.__value_.__r.__words[0];
  else
    v1 = (char *)(0x8000000243A73317 & 0x7FFFFFFFFFFFFFFFLL);
  std::string::basic_string[abi:ne180100]<0>(v8, v1);
  free(v10.__r_.__value_.__l.__data_);
  v2 = (const char *)(*(_QWORD *)(MEMORY[0x24BEDB798] + 8) & 0x7FFFFFFFFFFFFFFFLL);
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v10, v2);
  if (v10.__r_.__value_.__r.__words[0])
    v3 = (char *)v10.__r_.__value_.__r.__words[0];
  else
    v3 = (char *)v2;
  std::string::basic_string[abi:ne180100]<0>(v7, v3);
  free(v10.__r_.__value_.__l.__data_);
  boost::histogram::detail::cat<std::string,char [35],std::string,char [5],std::string>((uint64_t)v9, ": cannot convert argument of type ", (uint64_t)v8, " to ", (uint64_t)v7);
  v4 = std::logic_error::logic_error(&v11, &v10);
  v11.__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
  v5.i64[0] = (uint64_t)"PerfPowerServicesReader/external/lib/boostorg/histogram/include/boost/histogram/axis/traits.hpp";
  v5.i64[1] = (uint64_t)"auto boost::histogram::axis::traits::index(const boost::histogram::axis::integer<int, boost::use_"
                       "default, boost::histogram::axis::option::bit<1>> &, const std::tuple<const double &, const double"
                       " &, const double &, const double &> &)::(anonymous class)::operator()(const Axis &) const";
  v6 = 190;
  boost::throw_exception<std::invalid_argument>(v4, &v5);
}

__n128 boost::mp11::detail::mp_for_each_impl<std::integral_constant<unsigned long,0ul>,std::integral_constant<unsigned long,1ul>,std::integral_constant<unsigned long,2ul>,std::integral_constant<unsigned long,3ul>,boost::histogram::detail::optional_index boost::histogram::detail::args_to_index<0u,4u,boost::histogram::unlimited_storage<std::allocator<char>>,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,std::tuple<double,double,double,double>>(std::integral_constant<BOOL,false>,boost::histogram::unlimited_storage<std::allocator<char>> &,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>> const&,std::tuple<double,double,double,double> const&)::{lambda(std::integral_constant<unsigned long,0ul>,std::integral_constant<unsigned long,1ul>,std::integral_constant<unsigned long,2ul>,std::integral_constant<unsigned long,3ul>)#1}>@<Q0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  __n128 result;
  uint64_t v14;
  uint64_t v15;
  uint64_t **v16;

  v4 = *a1;
  v5 = *(int **)a1[1];
  v6 = a1[2];
  v14 = v4;
  v15 = v6;
  v16 = (uint64_t **)&v14;
  _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_EdEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENSY_11result_typeERSY_(v5, &v16);
  v7 = (int *)(*(_QWORD *)a1[1] + 56);
  v8 = a1[2] + 8;
  v14 = *a1;
  v15 = v8;
  v16 = (uint64_t **)&v14;
  _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_EdEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENSY_11result_typeERSY_(v7, &v16);
  v9 = (int *)(*(_QWORD *)a1[1] + 112);
  v10 = a1[2] + 16;
  v14 = *a1;
  v15 = v10;
  v16 = (uint64_t **)&v14;
  _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_EdEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENSY_11result_typeERSY_(v9, &v16);
  v11 = (int *)(*(_QWORD *)a1[1] + 168);
  v12 = a1[2] + 24;
  v14 = *a1;
  v15 = v12;
  v16 = (uint64_t **)&v14;
  _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_EdEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENSY_11result_typeERSY_(v11, &v16);
  result = *(__n128 *)a1;
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_QWORD *)(a2 + 16) = a1[2];
  return result;
}

uint64_t boost::histogram::detail::fill<boost::histogram::unlimited_storage<std::allocator<char>>,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,double,double,double,double,double>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  char v9;

  v4 = boost::histogram::detail::args_to_index<0u,5u,boost::histogram::unlimited_storage<std::allocator<char>>,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,std::tuple<double,double,double,double,double>>(a1, a2, a3);
  if (!v5)
    return *(_QWORD *)(a1 + 8);
  v6 = v4;
  v8 = v4;
  boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::apply<boost::histogram::unlimited_storage<std::allocator<char>>::incrementor,boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type&,unsigned long &>(a1, (uint64_t)&v9, a1, &v8);
  return v6;
}

uint64_t boost::histogram::detail::args_to_index<0u,5u,boost::histogram::unlimited_storage<std::allocator<char>>,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,std::tuple<double,double,double,double,double>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int *v3;
  uint64_t v4;
  std::logic_error v6;
  int8x16_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  std::logic_error *v12;

  v11 = xmmword_243A73480;
  v3 = *(int **)a2;
  v4 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  if (v4 != 5)
  {
    if (v4 == 1)
    {
      v7.i64[0] = a3;
      v7.i64[1] = a3 + 8;
      v8 = a3 + 16;
      v9 = a3 + 24;
      v10 = a3 + 32;
      v6.__vftable = (std::logic_error_vtbl *)&v11;
      v6.__imp_.__imp_ = (const char *)&v7;
      v12 = &v6;
      _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_ENS7_5tupleIJRKdSP_SP_SP_SP_EEEEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENS12_11result_typeERS12_(v3);
    }
    std::logic_error::logic_error(&v6, "number of arguments != histogram rank");
    v6.__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    v7.i64[0] = (uint64_t)"PerfPowerServicesReader/external/lib/boostorg/histogram/include/boost/histogram/detail/linearize.hpp";
    v7.i64[1] = (uint64_t)"optional_index boost::histogram::detail::args_to_index(std::false_type, S &, const T &, const U"
                         " &) [I = 0U, N = 5U, S = boost::histogram::unlimited_storage<>, T = std::vector<boost::histogra"
                         "m::axis::variant<boost::histogram::axis::regular<>, boost::histogram::axis::variable<>, boost::"
                         "histogram::axis::integer<int, boost::use_default, boost::histogram::axis::option::bit<1>>>>, U "
                         "= std::tuple<double, double, double, double, double>]";
    v8 = 192;
    boost::throw_exception<std::invalid_argument>(&v6, &v7);
  }
  v7.i64[0] = (uint64_t)&v11;
  v7.i64[1] = a2;
  v8 = a3;
  boost::mp11::detail::mp_for_each_impl<std::integral_constant<unsigned long,0ul>,std::integral_constant<unsigned long,1ul>,std::integral_constant<unsigned long,2ul>,std::integral_constant<unsigned long,3ul>,std::integral_constant<unsigned long,4ul>,boost::histogram::detail::optional_index boost::histogram::detail::args_to_index<0u,5u,boost::histogram::unlimited_storage<std::allocator<char>>,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,std::tuple<double,double,double,double,double>>(std::integral_constant<BOOL,false>,boost::histogram::unlimited_storage<std::allocator<char>> &,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>> const&,std::tuple<double,double,double,double,double> const&)::{lambda(std::integral_constant<unsigned long,0ul>,std::integral_constant<unsigned long,1ul>,std::integral_constant<unsigned long,2ul>,std::integral_constant<unsigned long,3ul>,std::integral_constant<unsigned long,4ul>)#1}>(v7.i64, (uint64_t)&v6);
  return v11;
}

void _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_ENS7_5tupleIJRKdSP_SP_SP_SP_EEEEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENS12_11result_typeERS12_(int *a1)
{
  switch(*a1 ^ (*a1 >> 31))
  {
    case 0:
      boost::histogram::detail::linearize_value<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,std::tuple<double const&,double const&,double const&,double const&,double const&>>();
    case 1:
      boost::histogram::detail::linearize_value<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,std::tuple<double const&,double const&,double const&,double const&,double const&>>();
    case 2:
      boost::histogram::detail::linearize_value<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>,std::tuple<double const&,double const&,double const&,double const&,double const&>>();
    default:
      boost::detail::variant::forced_return<void>();
  }
}

void boost::histogram::detail::linearize_value<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,std::tuple<double const&,double const&,double const&,double const&,double const&>>()
{
  _ZZN5boost9histogram4axis6traits5indexINS1_7regularIdNS_11use_defaultES5_S5_EENSt3__15tupleIJRKdSA_SA_SA_SA_EEEEEDaRKT_RKT0_ENKUlRKS6_E_clESK_();
}

uint64_t sub_243A45600(uint64_t result)
{
  int *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v5;

  v3 = v2[1];
  if ((int)result + 1 >= *v1 + 2 || (int)result <= -2)
    v5 = 0;
  else
    v5 = *v1 + 2;
  *v2 += v3 * ((int)result + 1);
  v2[1] = v5 * v3;
  return result;
}

void _ZZN5boost9histogram4axis6traits5indexINS1_7regularIdNS_11use_defaultES5_S5_EENSt3__15tupleIJRKdSA_SA_SA_SA_EEEEEDaRKT_RKT0_ENKUlRKS6_E_clESK_()
{
  char *v0;
  char *v1;
  const char *v2;
  char *v3;
  std::logic_error *v4;
  int8x16_t v5;
  uint64_t v6;
  _QWORD v7[3];
  _QWORD v8[3];
  _QWORD v9[3];
  std::string v10;
  std::logic_error v11;

  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v10, (const char *)(0x8000000243A6EBF4 & 0x7FFFFFFFFFFFFFFFLL));
  if (v10.__r_.__value_.__r.__words[0])
    v0 = (char *)v10.__r_.__value_.__r.__words[0];
  else
    v0 = (char *)(0x8000000243A6EBF4 & 0x7FFFFFFFFFFFFFFFLL);
  std::string::basic_string[abi:ne180100]<0>(v9, v0);
  free(v10.__r_.__value_.__l.__data_);
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v10, (const char *)(0x8000000243A73336 & 0x7FFFFFFFFFFFFFFFLL));
  if (v10.__r_.__value_.__r.__words[0])
    v1 = (char *)v10.__r_.__value_.__r.__words[0];
  else
    v1 = (char *)(0x8000000243A73336 & 0x7FFFFFFFFFFFFFFFLL);
  std::string::basic_string[abi:ne180100]<0>(v8, v1);
  free(v10.__r_.__value_.__l.__data_);
  v2 = (const char *)(*(_QWORD *)(MEMORY[0x24BEDB780] + 8) & 0x7FFFFFFFFFFFFFFFLL);
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v10, v2);
  if (v10.__r_.__value_.__r.__words[0])
    v3 = (char *)v10.__r_.__value_.__r.__words[0];
  else
    v3 = (char *)v2;
  std::string::basic_string[abi:ne180100]<0>(v7, v3);
  free(v10.__r_.__value_.__l.__data_);
  boost::histogram::detail::cat<std::string,char [35],std::string,char [5],std::string>((uint64_t)v9, ": cannot convert argument of type ", (uint64_t)v8, " to ", (uint64_t)v7);
  v4 = std::logic_error::logic_error(&v11, &v10);
  v11.__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
  v5.i64[0] = (uint64_t)"PerfPowerServicesReader/external/lib/boostorg/histogram/include/boost/histogram/axis/traits.hpp";
  v5.i64[1] = (uint64_t)"auto boost::histogram::axis::traits::index(const boost::histogram::axis::regular<> &, const std::"
                       "tuple<const double &, const double &, const double &, const double &, const double &> &)::(anonym"
                       "ous class)::operator()(const Axis &) const";
  v6 = 190;
  boost::throw_exception<std::invalid_argument>(v4, &v5);
}

void boost::histogram::detail::linearize_value<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,std::tuple<double const&,double const&,double const&,double const&,double const&>>()
{
  _ZZN5boost9histogram4axis6traits5indexINS1_8variableIdNS_11use_defaultES5_NSt3__19allocatorIdEEEENS6_5tupleIJRKdSC_SC_SC_SC_EEEEEDaRKT_RKT0_ENKUlRKS9_E_clESM_();
}

uint64_t sub_243A4581C(uint64_t result)
{
  _QWORD *v1;
  _QWORD *v2;
  unint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  v3 = v1[1] - *v1;
  v4 = v2[1];
  v5 = (int)result >= (int)(v3 >> 3) || (int)result <= -2;
  v6 = (uint64_t)((v3 << 29) + 0x100000000) >> 32;
  if (v5)
    v6 = 0;
  *v2 += v4 * ((int)result + 1);
  v2[1] = v6 * v4;
  return result;
}

void _ZZN5boost9histogram4axis6traits5indexINS1_8variableIdNS_11use_defaultES5_NSt3__19allocatorIdEEEENS6_5tupleIJRKdSC_SC_SC_SC_EEEEEDaRKT_RKT0_ENKUlRKS9_E_clESM_()
{
  char *v0;
  char *v1;
  const char *v2;
  char *v3;
  std::logic_error *v4;
  int8x16_t v5;
  uint64_t v6;
  _QWORD v7[3];
  _QWORD v8[3];
  _QWORD v9[3];
  std::string v10;
  std::logic_error v11;

  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v10, (const char *)(0x8000000243A6F172 & 0x7FFFFFFFFFFFFFFFLL));
  if (v10.__r_.__value_.__r.__words[0])
    v0 = (char *)v10.__r_.__value_.__r.__words[0];
  else
    v0 = (char *)(0x8000000243A6F172 & 0x7FFFFFFFFFFFFFFFLL);
  std::string::basic_string[abi:ne180100]<0>(v9, v0);
  free(v10.__r_.__value_.__l.__data_);
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v10, (const char *)(0x8000000243A73336 & 0x7FFFFFFFFFFFFFFFLL));
  if (v10.__r_.__value_.__r.__words[0])
    v1 = (char *)v10.__r_.__value_.__r.__words[0];
  else
    v1 = (char *)(0x8000000243A73336 & 0x7FFFFFFFFFFFFFFFLL);
  std::string::basic_string[abi:ne180100]<0>(v8, v1);
  free(v10.__r_.__value_.__l.__data_);
  v2 = (const char *)(*(_QWORD *)(MEMORY[0x24BEDB780] + 8) & 0x7FFFFFFFFFFFFFFFLL);
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v10, v2);
  if (v10.__r_.__value_.__r.__words[0])
    v3 = (char *)v10.__r_.__value_.__r.__words[0];
  else
    v3 = (char *)v2;
  std::string::basic_string[abi:ne180100]<0>(v7, v3);
  free(v10.__r_.__value_.__l.__data_);
  boost::histogram::detail::cat<std::string,char [35],std::string,char [5],std::string>((uint64_t)v9, ": cannot convert argument of type ", (uint64_t)v8, " to ", (uint64_t)v7);
  v4 = std::logic_error::logic_error(&v11, &v10);
  v11.__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
  v5.i64[0] = (uint64_t)"PerfPowerServicesReader/external/lib/boostorg/histogram/include/boost/histogram/axis/traits.hpp";
  v5.i64[1] = (uint64_t)"auto boost::histogram::axis::traits::index(const boost::histogram::axis::variable<> &, const std:"
                       ":tuple<const double &, const double &, const double &, const double &, const double &> &)::(anony"
                       "mous class)::operator()(const Axis &) const";
  v6 = 190;
  boost::throw_exception<std::invalid_argument>(v4, &v5);
}

void boost::histogram::detail::linearize_value<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>,std::tuple<double const&,double const&,double const&,double const&,double const&>>()
{
  _ZZN5boost9histogram4axis6traits5indexINS1_7integerIiNS_11use_defaultENS1_6option3bitILj1EEEEENSt3__15tupleIJRKdSD_SD_SD_SD_EEEEEDaRKT_RKT0_ENKUlRKS9_E_clESN_();
}

uint64_t sub_243A45A48(uint64_t result)
{
  int *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v3 = *v1;
  v4 = v2[1];
  if ((int)result > (int)v3 || (int)result <= -1)
    v6 = 0;
  else
    v6 = v3 + 1;
  *v2 += v4 * (int)result;
  v2[1] = v6 * v4;
  return result;
}

void _ZZN5boost9histogram4axis6traits5indexINS1_7integerIiNS_11use_defaultENS1_6option3bitILj1EEEEENSt3__15tupleIJRKdSD_SD_SD_SD_EEEEEDaRKT_RKT0_ENKUlRKS9_E_clESN_()
{
  char *v0;
  char *v1;
  const char *v2;
  char *v3;
  std::logic_error *v4;
  int8x16_t v5;
  uint64_t v6;
  _QWORD v7[3];
  _QWORD v8[3];
  _QWORD v9[3];
  std::string v10;
  std::logic_error v11;

  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v10, (const char *)(0x8000000243A6F746 & 0x7FFFFFFFFFFFFFFFLL));
  if (v10.__r_.__value_.__r.__words[0])
    v0 = (char *)v10.__r_.__value_.__r.__words[0];
  else
    v0 = (char *)(0x8000000243A6F746 & 0x7FFFFFFFFFFFFFFFLL);
  std::string::basic_string[abi:ne180100]<0>(v9, v0);
  free(v10.__r_.__value_.__l.__data_);
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v10, (const char *)(0x8000000243A73336 & 0x7FFFFFFFFFFFFFFFLL));
  if (v10.__r_.__value_.__r.__words[0])
    v1 = (char *)v10.__r_.__value_.__r.__words[0];
  else
    v1 = (char *)(0x8000000243A73336 & 0x7FFFFFFFFFFFFFFFLL);
  std::string::basic_string[abi:ne180100]<0>(v8, v1);
  free(v10.__r_.__value_.__l.__data_);
  v2 = (const char *)(*(_QWORD *)(MEMORY[0x24BEDB798] + 8) & 0x7FFFFFFFFFFFFFFFLL);
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v10, v2);
  if (v10.__r_.__value_.__r.__words[0])
    v3 = (char *)v10.__r_.__value_.__r.__words[0];
  else
    v3 = (char *)v2;
  std::string::basic_string[abi:ne180100]<0>(v7, v3);
  free(v10.__r_.__value_.__l.__data_);
  boost::histogram::detail::cat<std::string,char [35],std::string,char [5],std::string>((uint64_t)v9, ": cannot convert argument of type ", (uint64_t)v8, " to ", (uint64_t)v7);
  v4 = std::logic_error::logic_error(&v11, &v10);
  v11.__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
  v5.i64[0] = (uint64_t)"PerfPowerServicesReader/external/lib/boostorg/histogram/include/boost/histogram/axis/traits.hpp";
  v5.i64[1] = (uint64_t)"auto boost::histogram::axis::traits::index(const boost::histogram::axis::integer<int, boost::use_"
                       "default, boost::histogram::axis::option::bit<1>> &, const std::tuple<const double &, const double"
                       " &, const double &, const double &, const double &> &)::(anonymous class)::operator()(const Axis &) const";
  v6 = 190;
  boost::throw_exception<std::invalid_argument>(v4, &v5);
}

__n128 boost::mp11::detail::mp_for_each_impl<std::integral_constant<unsigned long,0ul>,std::integral_constant<unsigned long,1ul>,std::integral_constant<unsigned long,2ul>,std::integral_constant<unsigned long,3ul>,std::integral_constant<unsigned long,4ul>,boost::histogram::detail::optional_index boost::histogram::detail::args_to_index<0u,5u,boost::histogram::unlimited_storage<std::allocator<char>>,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,std::tuple<double,double,double,double,double>>(std::integral_constant<BOOL,false>,boost::histogram::unlimited_storage<std::allocator<char>> &,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>> const&,std::tuple<double,double,double,double,double> const&)::{lambda(std::integral_constant<unsigned long,0ul>,std::integral_constant<unsigned long,1ul>,std::integral_constant<unsigned long,2ul>,std::integral_constant<unsigned long,3ul>,std::integral_constant<unsigned long,4ul>)#1}>@<Q0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  __n128 result;
  uint64_t v16;
  uint64_t v17;
  uint64_t **v18;

  v4 = *a1;
  v5 = *(int **)a1[1];
  v6 = a1[2];
  v16 = v4;
  v17 = v6;
  v18 = (uint64_t **)&v16;
  _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_EdEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENSY_11result_typeERSY_(v5, &v18);
  v7 = (int *)(*(_QWORD *)a1[1] + 56);
  v8 = a1[2] + 8;
  v16 = *a1;
  v17 = v8;
  v18 = (uint64_t **)&v16;
  _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_EdEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENSY_11result_typeERSY_(v7, &v18);
  v9 = (int *)(*(_QWORD *)a1[1] + 112);
  v10 = a1[2] + 16;
  v16 = *a1;
  v17 = v10;
  v18 = (uint64_t **)&v16;
  _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_EdEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENSY_11result_typeERSY_(v9, &v18);
  v11 = (int *)(*(_QWORD *)a1[1] + 168);
  v12 = a1[2] + 24;
  v16 = *a1;
  v17 = v12;
  v18 = (uint64_t **)&v16;
  _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_EdEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENSY_11result_typeERSY_(v11, &v18);
  v13 = (int *)(*(_QWORD *)a1[1] + 224);
  v14 = a1[2] + 32;
  v16 = *a1;
  v17 = v14;
  v18 = (uint64_t **)&v16;
  _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_EdEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENSY_11result_typeERSY_(v13, &v18);
  result = *(__n128 *)a1;
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_QWORD *)(a2 + 16) = a1[2];
  return result;
}

uint64_t boost::histogram::detail::fill<boost::histogram::unlimited_storage<std::allocator<char>>,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,double,double,double,double,double,double>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  char v9;

  v4 = boost::histogram::detail::args_to_index<0u,6u,boost::histogram::unlimited_storage<std::allocator<char>>,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,std::tuple<double,double,double,double,double,double>>(a1, a2, a3);
  if (!v5)
    return *(_QWORD *)(a1 + 8);
  v6 = v4;
  v8 = v4;
  boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::apply<boost::histogram::unlimited_storage<std::allocator<char>>::incrementor,boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type&,unsigned long &>(a1, (uint64_t)&v9, a1, &v8);
  return v6;
}

uint64_t boost::histogram::detail::args_to_index<0u,6u,boost::histogram::unlimited_storage<std::allocator<char>>,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,std::tuple<double,double,double,double,double,double>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int *v3;
  uint64_t v4;
  std::logic_error v6;
  int8x16_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  std::logic_error *v13;

  v12 = xmmword_243A73480;
  v3 = *(int **)a2;
  v4 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  if (v4 != 6)
  {
    if (v4 == 1)
    {
      v7.i64[0] = a3;
      v7.i64[1] = a3 + 8;
      v8 = a3 + 16;
      v9 = a3 + 24;
      v10 = a3 + 32;
      v11 = a3 + 40;
      v6.__vftable = (std::logic_error_vtbl *)&v12;
      v6.__imp_.__imp_ = (const char *)&v7;
      v13 = &v6;
      _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_ENS7_5tupleIJRKdSP_SP_SP_SP_SP_EEEEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENS12_11result_typeERS12_(v3);
    }
    std::logic_error::logic_error(&v6, "number of arguments != histogram rank");
    v6.__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    v7.i64[0] = (uint64_t)"PerfPowerServicesReader/external/lib/boostorg/histogram/include/boost/histogram/detail/linearize.hpp";
    v7.i64[1] = (uint64_t)"optional_index boost::histogram::detail::args_to_index(std::false_type, S &, const T &, const U"
                         " &) [I = 0U, N = 6U, S = boost::histogram::unlimited_storage<>, T = std::vector<boost::histogra"
                         "m::axis::variant<boost::histogram::axis::regular<>, boost::histogram::axis::variable<>, boost::"
                         "histogram::axis::integer<int, boost::use_default, boost::histogram::axis::option::bit<1>>>>, U "
                         "= std::tuple<double, double, double, double, double, double>]";
    v8 = 192;
    boost::throw_exception<std::invalid_argument>(&v6, &v7);
  }
  v7.i64[0] = (uint64_t)&v12;
  v7.i64[1] = a2;
  v8 = a3;
  boost::mp11::detail::mp_for_each_impl<std::integral_constant<unsigned long,0ul>,std::integral_constant<unsigned long,1ul>,std::integral_constant<unsigned long,2ul>,std::integral_constant<unsigned long,3ul>,std::integral_constant<unsigned long,4ul>,std::integral_constant<unsigned long,5ul>,boost::histogram::detail::optional_index boost::histogram::detail::args_to_index<0u,6u,boost::histogram::unlimited_storage<std::allocator<char>>,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,std::tuple<double,double,double,double,double,double>>(std::integral_constant<BOOL,false>,boost::histogram::unlimited_storage<std::allocator<char>> &,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>> const&,std::tuple<double,double,double,double,double,double> const&)::{lambda(std::integral_constant<unsigned long,0ul>,std::integral_constant<unsigned long,1ul>,std::integral_constant<unsigned long,2ul>,std::integral_constant<unsigned long,3ul>,std::integral_constant<unsigned long,4ul>,std::integral_constant<unsigned long,5ul>)#1}>(v7.i64, (uint64_t)&v6);
  return v12;
}

void _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_ENS7_5tupleIJRKdSP_SP_SP_SP_SP_EEEEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENS12_11result_typeERS12_(int *a1)
{
  switch(*a1 ^ (*a1 >> 31))
  {
    case 0:
      boost::histogram::detail::linearize_value<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,std::tuple<double const&,double const&,double const&,double const&,double const&,double const&>>();
    case 1:
      boost::histogram::detail::linearize_value<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,std::tuple<double const&,double const&,double const&,double const&,double const&,double const&>>();
    case 2:
      boost::histogram::detail::linearize_value<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>,std::tuple<double const&,double const&,double const&,double const&,double const&,double const&>>();
    default:
      boost::detail::variant::forced_return<void>();
  }
}

void boost::histogram::detail::linearize_value<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,std::tuple<double const&,double const&,double const&,double const&,double const&,double const&>>()
{
  _ZZN5boost9histogram4axis6traits5indexINS1_7regularIdNS_11use_defaultES5_S5_EENSt3__15tupleIJRKdSA_SA_SA_SA_SA_EEEEEDaRKT_RKT0_ENKUlRKS6_E_clESK_();
}

uint64_t sub_243A45F38(uint64_t result)
{
  int *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v5;

  v3 = v2[1];
  if ((int)result + 1 >= *v1 + 2 || (int)result <= -2)
    v5 = 0;
  else
    v5 = *v1 + 2;
  *v2 += v3 * ((int)result + 1);
  v2[1] = v5 * v3;
  return result;
}

void _ZZN5boost9histogram4axis6traits5indexINS1_7regularIdNS_11use_defaultES5_S5_EENSt3__15tupleIJRKdSA_SA_SA_SA_SA_EEEEEDaRKT_RKT0_ENKUlRKS6_E_clESK_()
{
  char *v0;
  char *v1;
  const char *v2;
  char *v3;
  std::logic_error *v4;
  int8x16_t v5;
  uint64_t v6;
  _QWORD v7[3];
  _QWORD v8[3];
  _QWORD v9[3];
  std::string v10;
  std::logic_error v11;

  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v10, (const char *)(0x8000000243A6EBF4 & 0x7FFFFFFFFFFFFFFFLL));
  if (v10.__r_.__value_.__r.__words[0])
    v0 = (char *)v10.__r_.__value_.__r.__words[0];
  else
    v0 = (char *)(0x8000000243A6EBF4 & 0x7FFFFFFFFFFFFFFFLL);
  std::string::basic_string[abi:ne180100]<0>(v9, v0);
  free(v10.__r_.__value_.__l.__data_);
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v10, (const char *)(0x8000000243A73358 & 0x7FFFFFFFFFFFFFFFLL));
  if (v10.__r_.__value_.__r.__words[0])
    v1 = (char *)v10.__r_.__value_.__r.__words[0];
  else
    v1 = (char *)(0x8000000243A73358 & 0x7FFFFFFFFFFFFFFFLL);
  std::string::basic_string[abi:ne180100]<0>(v8, v1);
  free(v10.__r_.__value_.__l.__data_);
  v2 = (const char *)(*(_QWORD *)(MEMORY[0x24BEDB780] + 8) & 0x7FFFFFFFFFFFFFFFLL);
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v10, v2);
  if (v10.__r_.__value_.__r.__words[0])
    v3 = (char *)v10.__r_.__value_.__r.__words[0];
  else
    v3 = (char *)v2;
  std::string::basic_string[abi:ne180100]<0>(v7, v3);
  free(v10.__r_.__value_.__l.__data_);
  boost::histogram::detail::cat<std::string,char [35],std::string,char [5],std::string>((uint64_t)v9, ": cannot convert argument of type ", (uint64_t)v8, " to ", (uint64_t)v7);
  v4 = std::logic_error::logic_error(&v11, &v10);
  v11.__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
  v5.i64[0] = (uint64_t)"PerfPowerServicesReader/external/lib/boostorg/histogram/include/boost/histogram/axis/traits.hpp";
  v5.i64[1] = (uint64_t)"auto boost::histogram::axis::traits::index(const boost::histogram::axis::regular<> &, const std::"
                       "tuple<const double &, const double &, const double &, const double &, const double &, const doubl"
                       "e &> &)::(anonymous class)::operator()(const Axis &) const";
  v6 = 190;
  boost::throw_exception<std::invalid_argument>(v4, &v5);
}

void boost::histogram::detail::linearize_value<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,std::tuple<double const&,double const&,double const&,double const&,double const&,double const&>>()
{
  _ZZN5boost9histogram4axis6traits5indexINS1_8variableIdNS_11use_defaultES5_NSt3__19allocatorIdEEEENS6_5tupleIJRKdSC_SC_SC_SC_SC_EEEEEDaRKT_RKT0_ENKUlRKS9_E_clESM_();
}

uint64_t sub_243A46154(uint64_t result)
{
  _QWORD *v1;
  _QWORD *v2;
  unint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  v3 = v1[1] - *v1;
  v4 = v2[1];
  v5 = (int)result >= (int)(v3 >> 3) || (int)result <= -2;
  v6 = (uint64_t)((v3 << 29) + 0x100000000) >> 32;
  if (v5)
    v6 = 0;
  *v2 += v4 * ((int)result + 1);
  v2[1] = v6 * v4;
  return result;
}

void _ZZN5boost9histogram4axis6traits5indexINS1_8variableIdNS_11use_defaultES5_NSt3__19allocatorIdEEEENS6_5tupleIJRKdSC_SC_SC_SC_SC_EEEEEDaRKT_RKT0_ENKUlRKS9_E_clESM_()
{
  char *v0;
  char *v1;
  const char *v2;
  char *v3;
  std::logic_error *v4;
  int8x16_t v5;
  uint64_t v6;
  _QWORD v7[3];
  _QWORD v8[3];
  _QWORD v9[3];
  std::string v10;
  std::logic_error v11;

  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v10, (const char *)(0x8000000243A6F172 & 0x7FFFFFFFFFFFFFFFLL));
  if (v10.__r_.__value_.__r.__words[0])
    v0 = (char *)v10.__r_.__value_.__r.__words[0];
  else
    v0 = (char *)(0x8000000243A6F172 & 0x7FFFFFFFFFFFFFFFLL);
  std::string::basic_string[abi:ne180100]<0>(v9, v0);
  free(v10.__r_.__value_.__l.__data_);
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v10, (const char *)(0x8000000243A73358 & 0x7FFFFFFFFFFFFFFFLL));
  if (v10.__r_.__value_.__r.__words[0])
    v1 = (char *)v10.__r_.__value_.__r.__words[0];
  else
    v1 = (char *)(0x8000000243A73358 & 0x7FFFFFFFFFFFFFFFLL);
  std::string::basic_string[abi:ne180100]<0>(v8, v1);
  free(v10.__r_.__value_.__l.__data_);
  v2 = (const char *)(*(_QWORD *)(MEMORY[0x24BEDB780] + 8) & 0x7FFFFFFFFFFFFFFFLL);
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v10, v2);
  if (v10.__r_.__value_.__r.__words[0])
    v3 = (char *)v10.__r_.__value_.__r.__words[0];
  else
    v3 = (char *)v2;
  std::string::basic_string[abi:ne180100]<0>(v7, v3);
  free(v10.__r_.__value_.__l.__data_);
  boost::histogram::detail::cat<std::string,char [35],std::string,char [5],std::string>((uint64_t)v9, ": cannot convert argument of type ", (uint64_t)v8, " to ", (uint64_t)v7);
  v4 = std::logic_error::logic_error(&v11, &v10);
  v11.__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
  v5.i64[0] = (uint64_t)"PerfPowerServicesReader/external/lib/boostorg/histogram/include/boost/histogram/axis/traits.hpp";
  v5.i64[1] = (uint64_t)"auto boost::histogram::axis::traits::index(const boost::histogram::axis::variable<> &, const std:"
                       ":tuple<const double &, const double &, const double &, const double &, const double &, const doub"
                       "le &> &)::(anonymous class)::operator()(const Axis &) const";
  v6 = 190;
  boost::throw_exception<std::invalid_argument>(v4, &v5);
}

void boost::histogram::detail::linearize_value<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>,std::tuple<double const&,double const&,double const&,double const&,double const&,double const&>>()
{
  _ZZN5boost9histogram4axis6traits5indexINS1_7integerIiNS_11use_defaultENS1_6option3bitILj1EEEEENSt3__15tupleIJRKdSD_SD_SD_SD_SD_EEEEEDaRKT_RKT0_ENKUlRKS9_E_clESN_();
}

uint64_t sub_243A46380(uint64_t result)
{
  int *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v3 = *v1;
  v4 = v2[1];
  if ((int)result > (int)v3 || (int)result <= -1)
    v6 = 0;
  else
    v6 = v3 + 1;
  *v2 += v4 * (int)result;
  v2[1] = v6 * v4;
  return result;
}

void _ZZN5boost9histogram4axis6traits5indexINS1_7integerIiNS_11use_defaultENS1_6option3bitILj1EEEEENSt3__15tupleIJRKdSD_SD_SD_SD_SD_EEEEEDaRKT_RKT0_ENKUlRKS9_E_clESN_()
{
  char *v0;
  char *v1;
  const char *v2;
  char *v3;
  std::logic_error *v4;
  int8x16_t v5;
  uint64_t v6;
  _QWORD v7[3];
  _QWORD v8[3];
  _QWORD v9[3];
  std::string v10;
  std::logic_error v11;

  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v10, (const char *)(0x8000000243A6F746 & 0x7FFFFFFFFFFFFFFFLL));
  if (v10.__r_.__value_.__r.__words[0])
    v0 = (char *)v10.__r_.__value_.__r.__words[0];
  else
    v0 = (char *)(0x8000000243A6F746 & 0x7FFFFFFFFFFFFFFFLL);
  std::string::basic_string[abi:ne180100]<0>(v9, v0);
  free(v10.__r_.__value_.__l.__data_);
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v10, (const char *)(0x8000000243A73358 & 0x7FFFFFFFFFFFFFFFLL));
  if (v10.__r_.__value_.__r.__words[0])
    v1 = (char *)v10.__r_.__value_.__r.__words[0];
  else
    v1 = (char *)(0x8000000243A73358 & 0x7FFFFFFFFFFFFFFFLL);
  std::string::basic_string[abi:ne180100]<0>(v8, v1);
  free(v10.__r_.__value_.__l.__data_);
  v2 = (const char *)(*(_QWORD *)(MEMORY[0x24BEDB798] + 8) & 0x7FFFFFFFFFFFFFFFLL);
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v10, v2);
  if (v10.__r_.__value_.__r.__words[0])
    v3 = (char *)v10.__r_.__value_.__r.__words[0];
  else
    v3 = (char *)v2;
  std::string::basic_string[abi:ne180100]<0>(v7, v3);
  free(v10.__r_.__value_.__l.__data_);
  boost::histogram::detail::cat<std::string,char [35],std::string,char [5],std::string>((uint64_t)v9, ": cannot convert argument of type ", (uint64_t)v8, " to ", (uint64_t)v7);
  v4 = std::logic_error::logic_error(&v11, &v10);
  v11.__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
  v5.i64[0] = (uint64_t)"PerfPowerServicesReader/external/lib/boostorg/histogram/include/boost/histogram/axis/traits.hpp";
  v5.i64[1] = (uint64_t)"auto boost::histogram::axis::traits::index(const boost::histogram::axis::integer<int, boost::use_"
                       "default, boost::histogram::axis::option::bit<1>> &, const std::tuple<const double &, const double"
                       " &, const double &, const double &, const double &, const double &> &)::(anonymous class)::operat"
                       "or()(const Axis &) const";
  v6 = 190;
  boost::throw_exception<std::invalid_argument>(v4, &v5);
}

__n128 boost::mp11::detail::mp_for_each_impl<std::integral_constant<unsigned long,0ul>,std::integral_constant<unsigned long,1ul>,std::integral_constant<unsigned long,2ul>,std::integral_constant<unsigned long,3ul>,std::integral_constant<unsigned long,4ul>,std::integral_constant<unsigned long,5ul>,boost::histogram::detail::optional_index boost::histogram::detail::args_to_index<0u,6u,boost::histogram::unlimited_storage<std::allocator<char>>,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,std::tuple<double,double,double,double,double,double>>(std::integral_constant<BOOL,false>,boost::histogram::unlimited_storage<std::allocator<char>> &,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>> const&,std::tuple<double,double,double,double,double,double> const&)::{lambda(std::integral_constant<unsigned long,0ul>,std::integral_constant<unsigned long,1ul>,std::integral_constant<unsigned long,2ul>,std::integral_constant<unsigned long,3ul>,std::integral_constant<unsigned long,4ul>,std::integral_constant<unsigned long,5ul>)#1}>@<Q0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  __n128 result;
  uint64_t v18;
  uint64_t v19;
  uint64_t **v20;

  v4 = *a1;
  v5 = *(int **)a1[1];
  v6 = a1[2];
  v18 = v4;
  v19 = v6;
  v20 = (uint64_t **)&v18;
  _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_EdEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENSY_11result_typeERSY_(v5, &v20);
  v7 = (int *)(*(_QWORD *)a1[1] + 56);
  v8 = a1[2] + 8;
  v18 = *a1;
  v19 = v8;
  v20 = (uint64_t **)&v18;
  _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_EdEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENSY_11result_typeERSY_(v7, &v20);
  v9 = (int *)(*(_QWORD *)a1[1] + 112);
  v10 = a1[2] + 16;
  v18 = *a1;
  v19 = v10;
  v20 = (uint64_t **)&v18;
  _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_EdEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENSY_11result_typeERSY_(v9, &v20);
  v11 = (int *)(*(_QWORD *)a1[1] + 168);
  v12 = a1[2] + 24;
  v18 = *a1;
  v19 = v12;
  v20 = (uint64_t **)&v18;
  _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_EdEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENSY_11result_typeERSY_(v11, &v20);
  v13 = (int *)(*(_QWORD *)a1[1] + 224);
  v14 = a1[2] + 32;
  v18 = *a1;
  v19 = v14;
  v20 = (uint64_t **)&v18;
  _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_EdEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENSY_11result_typeERSY_(v13, &v20);
  v15 = (int *)(*(_QWORD *)a1[1] + 280);
  v16 = a1[2] + 40;
  v18 = *a1;
  v19 = v16;
  v20 = (uint64_t **)&v18;
  _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_EdEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENSY_11result_typeERSY_(v15, &v20);
  result = *(__n128 *)a1;
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_QWORD *)(a2 + 16) = a1[2];
  return result;
}

uint64_t boost::histogram::detail::fill<boost::histogram::unlimited_storage<std::allocator<char>>,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,double,double,double,double,double,double,double>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  char v9;

  v4 = boost::histogram::detail::args_to_index<0u,7u,boost::histogram::unlimited_storage<std::allocator<char>>,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,std::tuple<double,double,double,double,double,double,double>>(a1, a2, a3);
  if (!v5)
    return *(_QWORD *)(a1 + 8);
  v6 = v4;
  v8 = v4;
  boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::apply<boost::histogram::unlimited_storage<std::allocator<char>>::incrementor,boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type&,unsigned long &>(a1, (uint64_t)&v9, a1, &v8);
  return v6;
}

uint64_t boost::histogram::detail::args_to_index<0u,7u,boost::histogram::unlimited_storage<std::allocator<char>>,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,std::tuple<double,double,double,double,double,double,double>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int *v3;
  uint64_t v4;
  std::logic_error v6;
  int8x16_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  std::logic_error *v14;

  v13 = xmmword_243A73480;
  v3 = *(int **)a2;
  v4 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  if (v4 != 7)
  {
    if (v4 == 1)
    {
      v7.i64[0] = a3;
      v7.i64[1] = a3 + 8;
      v8 = a3 + 16;
      v9 = a3 + 24;
      v10 = a3 + 32;
      v11 = a3 + 40;
      v12 = a3 + 48;
      v6.__vftable = (std::logic_error_vtbl *)&v13;
      v6.__imp_.__imp_ = (const char *)&v7;
      v14 = &v6;
      _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_ENS7_5tupleIJRKdSP_SP_SP_SP_SP_SP_EEEEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENS12_11result_typeERS12_(v3);
    }
    std::logic_error::logic_error(&v6, "number of arguments != histogram rank");
    v6.__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    v7.i64[0] = (uint64_t)"PerfPowerServicesReader/external/lib/boostorg/histogram/include/boost/histogram/detail/linearize.hpp";
    v7.i64[1] = (uint64_t)"optional_index boost::histogram::detail::args_to_index(std::false_type, S &, const T &, const U"
                         " &) [I = 0U, N = 7U, S = boost::histogram::unlimited_storage<>, T = std::vector<boost::histogra"
                         "m::axis::variant<boost::histogram::axis::regular<>, boost::histogram::axis::variable<>, boost::"
                         "histogram::axis::integer<int, boost::use_default, boost::histogram::axis::option::bit<1>>>>, U "
                         "= std::tuple<double, double, double, double, double, double, double>]";
    v8 = 192;
    boost::throw_exception<std::invalid_argument>(&v6, &v7);
  }
  v7.i64[0] = (uint64_t)&v13;
  v7.i64[1] = a2;
  v8 = a3;
  boost::mp11::detail::mp_for_each_impl<std::integral_constant<unsigned long,0ul>,std::integral_constant<unsigned long,1ul>,std::integral_constant<unsigned long,2ul>,std::integral_constant<unsigned long,3ul>,std::integral_constant<unsigned long,4ul>,std::integral_constant<unsigned long,5ul>,std::integral_constant<unsigned long,6ul>,boost::histogram::detail::optional_index boost::histogram::detail::args_to_index<0u,7u,boost::histogram::unlimited_storage<std::allocator<char>>,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,std::tuple<double,double,double,double,double,double,double>>(std::integral_constant<BOOL,false>,boost::histogram::unlimited_storage<std::allocator<char>> &,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>> const&,std::tuple<double,double,double,double,double,double,double> const&)::{lambda(std::integral_constant<unsigned long,0ul>,std::integral_constant<unsigned long,1ul>,std::integral_constant<unsigned long,2ul>,std::integral_constant<unsigned long,3ul>,std::integral_constant<unsigned long,4ul>,std::integral_constant<unsigned long,5ul>,std::integral_constant<unsigned long,6ul>)#1}>(v7.i64, (uint64_t)&v6);
  return v13;
}

void _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_ENS7_5tupleIJRKdSP_SP_SP_SP_SP_SP_EEEEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENS12_11result_typeERS12_(int *a1)
{
  switch(*a1 ^ (*a1 >> 31))
  {
    case 0:
      boost::histogram::detail::linearize_value<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,std::tuple<double const&,double const&,double const&,double const&,double const&,double const&,double const&>>();
    case 1:
      boost::histogram::detail::linearize_value<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,std::tuple<double const&,double const&,double const&,double const&,double const&,double const&,double const&>>();
    case 2:
      boost::histogram::detail::linearize_value<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>,std::tuple<double const&,double const&,double const&,double const&,double const&,double const&,double const&>>();
    default:
      boost::detail::variant::forced_return<void>();
  }
}

void boost::histogram::detail::linearize_value<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,std::tuple<double const&,double const&,double const&,double const&,double const&,double const&,double const&>>()
{
  _ZZN5boost9histogram4axis6traits5indexINS1_7regularIdNS_11use_defaultES5_S5_EENSt3__15tupleIJRKdSA_SA_SA_SA_SA_SA_EEEEEDaRKT_RKT0_ENKUlRKS6_E_clESK_();
}

uint64_t sub_243A4689C(uint64_t result)
{
  int *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v5;

  v3 = v2[1];
  if ((int)result + 1 >= *v1 + 2 || (int)result <= -2)
    v5 = 0;
  else
    v5 = *v1 + 2;
  *v2 += v3 * ((int)result + 1);
  v2[1] = v5 * v3;
  return result;
}

void _ZZN5boost9histogram4axis6traits5indexINS1_7regularIdNS_11use_defaultES5_S5_EENSt3__15tupleIJRKdSA_SA_SA_SA_SA_SA_EEEEEDaRKT_RKT0_ENKUlRKS6_E_clESK_()
{
  char *v0;
  char *v1;
  const char *v2;
  char *v3;
  std::logic_error *v4;
  int8x16_t v5;
  uint64_t v6;
  _QWORD v7[3];
  _QWORD v8[3];
  _QWORD v9[3];
  std::string v10;
  std::logic_error v11;

  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v10, (const char *)(0x8000000243A6EBF4 & 0x7FFFFFFFFFFFFFFFLL));
  if (v10.__r_.__value_.__r.__words[0])
    v0 = (char *)v10.__r_.__value_.__r.__words[0];
  else
    v0 = (char *)(0x8000000243A6EBF4 & 0x7FFFFFFFFFFFFFFFLL);
  std::string::basic_string[abi:ne180100]<0>(v9, v0);
  free(v10.__r_.__value_.__l.__data_);
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v10, (const char *)(0x8000000243A7337DLL & 0x7FFFFFFFFFFFFFFFLL));
  if (v10.__r_.__value_.__r.__words[0])
    v1 = (char *)v10.__r_.__value_.__r.__words[0];
  else
    v1 = (char *)(0x8000000243A7337DLL & 0x7FFFFFFFFFFFFFFFLL);
  std::string::basic_string[abi:ne180100]<0>(v8, v1);
  free(v10.__r_.__value_.__l.__data_);
  v2 = (const char *)(*(_QWORD *)(MEMORY[0x24BEDB780] + 8) & 0x7FFFFFFFFFFFFFFFLL);
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v10, v2);
  if (v10.__r_.__value_.__r.__words[0])
    v3 = (char *)v10.__r_.__value_.__r.__words[0];
  else
    v3 = (char *)v2;
  std::string::basic_string[abi:ne180100]<0>(v7, v3);
  free(v10.__r_.__value_.__l.__data_);
  boost::histogram::detail::cat<std::string,char [35],std::string,char [5],std::string>((uint64_t)v9, ": cannot convert argument of type ", (uint64_t)v8, " to ", (uint64_t)v7);
  v4 = std::logic_error::logic_error(&v11, &v10);
  v11.__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
  v5.i64[0] = (uint64_t)"PerfPowerServicesReader/external/lib/boostorg/histogram/include/boost/histogram/axis/traits.hpp";
  v5.i64[1] = (uint64_t)"auto boost::histogram::axis::traits::index(const boost::histogram::axis::regular<> &, const std::"
                       "tuple<const double &, const double &, const double &, const double &, const double &, const doubl"
                       "e &, const double &> &)::(anonymous class)::operator()(const Axis &) const";
  v6 = 190;
  boost::throw_exception<std::invalid_argument>(v4, &v5);
}

void boost::histogram::detail::linearize_value<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,std::tuple<double const&,double const&,double const&,double const&,double const&,double const&,double const&>>()
{
  _ZZN5boost9histogram4axis6traits5indexINS1_8variableIdNS_11use_defaultES5_NSt3__19allocatorIdEEEENS6_5tupleIJRKdSC_SC_SC_SC_SC_SC_EEEEEDaRKT_RKT0_ENKUlRKS9_E_clESM_();
}

uint64_t sub_243A46AB8(uint64_t result)
{
  _QWORD *v1;
  _QWORD *v2;
  unint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  v3 = v1[1] - *v1;
  v4 = v2[1];
  v5 = (int)result >= (int)(v3 >> 3) || (int)result <= -2;
  v6 = (uint64_t)((v3 << 29) + 0x100000000) >> 32;
  if (v5)
    v6 = 0;
  *v2 += v4 * ((int)result + 1);
  v2[1] = v6 * v4;
  return result;
}

void _ZZN5boost9histogram4axis6traits5indexINS1_8variableIdNS_11use_defaultES5_NSt3__19allocatorIdEEEENS6_5tupleIJRKdSC_SC_SC_SC_SC_SC_EEEEEDaRKT_RKT0_ENKUlRKS9_E_clESM_()
{
  char *v0;
  char *v1;
  const char *v2;
  char *v3;
  std::logic_error *v4;
  int8x16_t v5;
  uint64_t v6;
  _QWORD v7[3];
  _QWORD v8[3];
  _QWORD v9[3];
  std::string v10;
  std::logic_error v11;

  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v10, (const char *)(0x8000000243A6F172 & 0x7FFFFFFFFFFFFFFFLL));
  if (v10.__r_.__value_.__r.__words[0])
    v0 = (char *)v10.__r_.__value_.__r.__words[0];
  else
    v0 = (char *)(0x8000000243A6F172 & 0x7FFFFFFFFFFFFFFFLL);
  std::string::basic_string[abi:ne180100]<0>(v9, v0);
  free(v10.__r_.__value_.__l.__data_);
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v10, (const char *)(0x8000000243A7337DLL & 0x7FFFFFFFFFFFFFFFLL));
  if (v10.__r_.__value_.__r.__words[0])
    v1 = (char *)v10.__r_.__value_.__r.__words[0];
  else
    v1 = (char *)(0x8000000243A7337DLL & 0x7FFFFFFFFFFFFFFFLL);
  std::string::basic_string[abi:ne180100]<0>(v8, v1);
  free(v10.__r_.__value_.__l.__data_);
  v2 = (const char *)(*(_QWORD *)(MEMORY[0x24BEDB780] + 8) & 0x7FFFFFFFFFFFFFFFLL);
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v10, v2);
  if (v10.__r_.__value_.__r.__words[0])
    v3 = (char *)v10.__r_.__value_.__r.__words[0];
  else
    v3 = (char *)v2;
  std::string::basic_string[abi:ne180100]<0>(v7, v3);
  free(v10.__r_.__value_.__l.__data_);
  boost::histogram::detail::cat<std::string,char [35],std::string,char [5],std::string>((uint64_t)v9, ": cannot convert argument of type ", (uint64_t)v8, " to ", (uint64_t)v7);
  v4 = std::logic_error::logic_error(&v11, &v10);
  v11.__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
  v5.i64[0] = (uint64_t)"PerfPowerServicesReader/external/lib/boostorg/histogram/include/boost/histogram/axis/traits.hpp";
  v5.i64[1] = (uint64_t)"auto boost::histogram::axis::traits::index(const boost::histogram::axis::variable<> &, const std:"
                       ":tuple<const double &, const double &, const double &, const double &, const double &, const doub"
                       "le &, const double &> &)::(anonymous class)::operator()(const Axis &) const";
  v6 = 190;
  boost::throw_exception<std::invalid_argument>(v4, &v5);
}

void boost::histogram::detail::linearize_value<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>,std::tuple<double const&,double const&,double const&,double const&,double const&,double const&,double const&>>()
{
  _ZZN5boost9histogram4axis6traits5indexINS1_7integerIiNS_11use_defaultENS1_6option3bitILj1EEEEENSt3__15tupleIJRKdSD_SD_SD_SD_SD_SD_EEEEEDaRKT_RKT0_ENKUlRKS9_E_clESN_();
}

uint64_t sub_243A46CE4(uint64_t result)
{
  int *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v3 = *v1;
  v4 = v2[1];
  if ((int)result > (int)v3 || (int)result <= -1)
    v6 = 0;
  else
    v6 = v3 + 1;
  *v2 += v4 * (int)result;
  v2[1] = v6 * v4;
  return result;
}

void _ZZN5boost9histogram4axis6traits5indexINS1_7integerIiNS_11use_defaultENS1_6option3bitILj1EEEEENSt3__15tupleIJRKdSD_SD_SD_SD_SD_SD_EEEEEDaRKT_RKT0_ENKUlRKS9_E_clESN_()
{
  char *v0;
  char *v1;
  const char *v2;
  char *v3;
  std::logic_error *v4;
  int8x16_t v5;
  uint64_t v6;
  _QWORD v7[3];
  _QWORD v8[3];
  _QWORD v9[3];
  std::string v10;
  std::logic_error v11;

  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v10, (const char *)(0x8000000243A6F746 & 0x7FFFFFFFFFFFFFFFLL));
  if (v10.__r_.__value_.__r.__words[0])
    v0 = (char *)v10.__r_.__value_.__r.__words[0];
  else
    v0 = (char *)(0x8000000243A6F746 & 0x7FFFFFFFFFFFFFFFLL);
  std::string::basic_string[abi:ne180100]<0>(v9, v0);
  free(v10.__r_.__value_.__l.__data_);
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v10, (const char *)(0x8000000243A7337DLL & 0x7FFFFFFFFFFFFFFFLL));
  if (v10.__r_.__value_.__r.__words[0])
    v1 = (char *)v10.__r_.__value_.__r.__words[0];
  else
    v1 = (char *)(0x8000000243A7337DLL & 0x7FFFFFFFFFFFFFFFLL);
  std::string::basic_string[abi:ne180100]<0>(v8, v1);
  free(v10.__r_.__value_.__l.__data_);
  v2 = (const char *)(*(_QWORD *)(MEMORY[0x24BEDB798] + 8) & 0x7FFFFFFFFFFFFFFFLL);
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v10, v2);
  if (v10.__r_.__value_.__r.__words[0])
    v3 = (char *)v10.__r_.__value_.__r.__words[0];
  else
    v3 = (char *)v2;
  std::string::basic_string[abi:ne180100]<0>(v7, v3);
  free(v10.__r_.__value_.__l.__data_);
  boost::histogram::detail::cat<std::string,char [35],std::string,char [5],std::string>((uint64_t)v9, ": cannot convert argument of type ", (uint64_t)v8, " to ", (uint64_t)v7);
  v4 = std::logic_error::logic_error(&v11, &v10);
  v11.__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
  v5.i64[0] = (uint64_t)"PerfPowerServicesReader/external/lib/boostorg/histogram/include/boost/histogram/axis/traits.hpp";
  v5.i64[1] = (uint64_t)"auto boost::histogram::axis::traits::index(const boost::histogram::axis::integer<int, boost::use_"
                       "default, boost::histogram::axis::option::bit<1>> &, const std::tuple<const double &, const double"
                       " &, const double &, const double &, const double &, const double &, const double &> &)::(anonymou"
                       "s class)::operator()(const Axis &) const";
  v6 = 190;
  boost::throw_exception<std::invalid_argument>(v4, &v5);
}

__n128 boost::mp11::detail::mp_for_each_impl<std::integral_constant<unsigned long,0ul>,std::integral_constant<unsigned long,1ul>,std::integral_constant<unsigned long,2ul>,std::integral_constant<unsigned long,3ul>,std::integral_constant<unsigned long,4ul>,std::integral_constant<unsigned long,5ul>,std::integral_constant<unsigned long,6ul>,boost::histogram::detail::optional_index boost::histogram::detail::args_to_index<0u,7u,boost::histogram::unlimited_storage<std::allocator<char>>,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,std::tuple<double,double,double,double,double,double,double>>(std::integral_constant<BOOL,false>,boost::histogram::unlimited_storage<std::allocator<char>> &,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>> const&,std::tuple<double,double,double,double,double,double,double> const&)::{lambda(std::integral_constant<unsigned long,0ul>,std::integral_constant<unsigned long,1ul>,std::integral_constant<unsigned long,2ul>,std::integral_constant<unsigned long,3ul>,std::integral_constant<unsigned long,4ul>,std::integral_constant<unsigned long,5ul>,std::integral_constant<unsigned long,6ul>)#1}>@<Q0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  __n128 result;
  uint64_t v20;
  uint64_t v21;
  uint64_t **v22;

  v4 = *a1;
  v5 = *(int **)a1[1];
  v6 = a1[2];
  v20 = v4;
  v21 = v6;
  v22 = (uint64_t **)&v20;
  _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_EdEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENSY_11result_typeERSY_(v5, &v22);
  v7 = (int *)(*(_QWORD *)a1[1] + 56);
  v8 = a1[2] + 8;
  v20 = *a1;
  v21 = v8;
  v22 = (uint64_t **)&v20;
  _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_EdEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENSY_11result_typeERSY_(v7, &v22);
  v9 = (int *)(*(_QWORD *)a1[1] + 112);
  v10 = a1[2] + 16;
  v20 = *a1;
  v21 = v10;
  v22 = (uint64_t **)&v20;
  _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_EdEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENSY_11result_typeERSY_(v9, &v22);
  v11 = (int *)(*(_QWORD *)a1[1] + 168);
  v12 = a1[2] + 24;
  v20 = *a1;
  v21 = v12;
  v22 = (uint64_t **)&v20;
  _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_EdEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENSY_11result_typeERSY_(v11, &v22);
  v13 = (int *)(*(_QWORD *)a1[1] + 224);
  v14 = a1[2] + 32;
  v20 = *a1;
  v21 = v14;
  v22 = (uint64_t **)&v20;
  _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_EdEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENSY_11result_typeERSY_(v13, &v22);
  v15 = (int *)(*(_QWORD *)a1[1] + 280);
  v16 = a1[2] + 40;
  v20 = *a1;
  v21 = v16;
  v22 = (uint64_t **)&v20;
  _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_EdEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENSY_11result_typeERSY_(v15, &v22);
  v17 = (int *)(*(_QWORD *)a1[1] + 336);
  v18 = a1[2] + 48;
  v20 = *a1;
  v21 = v18;
  v22 = (uint64_t **)&v20;
  _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_EdEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENSY_11result_typeERSY_(v17, &v22);
  result = *(__n128 *)a1;
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_QWORD *)(a2 + 16) = a1[2];
  return result;
}

uint64_t boost::histogram::detail::fill<boost::histogram::unlimited_storage<std::allocator<char>>,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,double,double,double,double,double,double,double,double>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  char v9;

  v4 = boost::histogram::detail::args_to_index<0u,8u,boost::histogram::unlimited_storage<std::allocator<char>>,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,std::tuple<double,double,double,double,double,double,double,double>>(a1, a2, a3);
  if (!v5)
    return *(_QWORD *)(a1 + 8);
  v6 = v4;
  v8 = v4;
  boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::apply<boost::histogram::unlimited_storage<std::allocator<char>>::incrementor,boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type&,unsigned long &>(a1, (uint64_t)&v9, a1, &v8);
  return v6;
}

uint64_t boost::histogram::detail::args_to_index<0u,8u,boost::histogram::unlimited_storage<std::allocator<char>>,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,std::tuple<double,double,double,double,double,double,double,double>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int *v3;
  uint64_t v4;
  std::logic_error v6;
  int8x16_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  std::logic_error *v15;

  v14 = xmmword_243A73480;
  v3 = *(int **)a2;
  v4 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  if (v4 != 8)
  {
    if (v4 == 1)
    {
      v7.i64[0] = a3;
      v7.i64[1] = a3 + 8;
      v8 = a3 + 16;
      v9 = a3 + 24;
      v10 = a3 + 32;
      v11 = a3 + 40;
      v12 = a3 + 48;
      v13 = a3 + 56;
      v6.__vftable = (std::logic_error_vtbl *)&v14;
      v6.__imp_.__imp_ = (const char *)&v7;
      v15 = &v6;
      _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_ENS7_5tupleIJRKdSP_SP_SP_SP_SP_SP_SP_EEEEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENS12_11result_typeERS12_(v3);
    }
    std::logic_error::logic_error(&v6, "number of arguments != histogram rank");
    v6.__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    v7.i64[0] = (uint64_t)"PerfPowerServicesReader/external/lib/boostorg/histogram/include/boost/histogram/detail/linearize.hpp";
    v7.i64[1] = (uint64_t)"optional_index boost::histogram::detail::args_to_index(std::false_type, S &, const T &, const U"
                         " &) [I = 0U, N = 8U, S = boost::histogram::unlimited_storage<>, T = std::vector<boost::histogra"
                         "m::axis::variant<boost::histogram::axis::regular<>, boost::histogram::axis::variable<>, boost::"
                         "histogram::axis::integer<int, boost::use_default, boost::histogram::axis::option::bit<1>>>>, U "
                         "= std::tuple<double, double, double, double, double, double, double, double>]";
    v8 = 192;
    boost::throw_exception<std::invalid_argument>(&v6, &v7);
  }
  v7.i64[0] = (uint64_t)&v14;
  v7.i64[1] = a2;
  v8 = a3;
  boost::mp11::detail::mp_for_each_impl<std::integral_constant<unsigned long,0ul>,std::integral_constant<unsigned long,1ul>,std::integral_constant<unsigned long,2ul>,std::integral_constant<unsigned long,3ul>,std::integral_constant<unsigned long,4ul>,std::integral_constant<unsigned long,5ul>,std::integral_constant<unsigned long,6ul>,std::integral_constant<unsigned long,7ul>,boost::histogram::detail::optional_index boost::histogram::detail::args_to_index<0u,8u,boost::histogram::unlimited_storage<std::allocator<char>>,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,std::tuple<double,double,double,double,double,double,double,double>>(std::integral_constant<BOOL,false>,boost::histogram::unlimited_storage<std::allocator<char>> &,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>> const&,std::tuple<double,double,double,double,double,double,double,double> const&)::{lambda(std::integral_constant<unsigned long,0ul>,std::integral_constant<unsigned long,1ul>,std::integral_constant<unsigned long,2ul>,std::integral_constant<unsigned long,3ul>,std::integral_constant<unsigned long,4ul>,std::integral_constant<unsigned long,5ul>,std::integral_constant<unsigned long,6ul>,std::integral_constant<unsigned long,7ul>)#1}>(v7.i64, (uint64_t)&v6);
  return v14;
}

void _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_ENS7_5tupleIJRKdSP_SP_SP_SP_SP_SP_SP_EEEEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENS12_11result_typeERS12_(int *a1)
{
  switch(*a1 ^ (*a1 >> 31))
  {
    case 0:
      boost::histogram::detail::linearize_value<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,std::tuple<double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&>>();
    case 1:
      boost::histogram::detail::linearize_value<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,std::tuple<double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&>>();
    case 2:
      boost::histogram::detail::linearize_value<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>,std::tuple<double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&>>();
    default:
      boost::detail::variant::forced_return<void>();
  }
}

void boost::histogram::detail::linearize_value<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,std::tuple<double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&>>()
{
  _ZZN5boost9histogram4axis6traits5indexINS1_7regularIdNS_11use_defaultES5_S5_EENSt3__15tupleIJRKdSA_SA_SA_SA_SA_SA_SA_EEEEEDaRKT_RKT0_ENKUlRKS6_E_clESK_();
}

uint64_t sub_243A47228(uint64_t result)
{
  int *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v5;

  v3 = v2[1];
  if ((int)result + 1 >= *v1 + 2 || (int)result <= -2)
    v5 = 0;
  else
    v5 = *v1 + 2;
  *v2 += v3 * ((int)result + 1);
  v2[1] = v5 * v3;
  return result;
}

void _ZZN5boost9histogram4axis6traits5indexINS1_7regularIdNS_11use_defaultES5_S5_EENSt3__15tupleIJRKdSA_SA_SA_SA_SA_SA_SA_EEEEEDaRKT_RKT0_ENKUlRKS6_E_clESK_()
{
  char *v0;
  char *v1;
  const char *v2;
  char *v3;
  std::logic_error *v4;
  int8x16_t v5;
  uint64_t v6;
  _QWORD v7[3];
  _QWORD v8[3];
  _QWORD v9[3];
  std::string v10;
  std::logic_error v11;

  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v10, (const char *)(0x8000000243A6EBF4 & 0x7FFFFFFFFFFFFFFFLL));
  if (v10.__r_.__value_.__r.__words[0])
    v0 = (char *)v10.__r_.__value_.__r.__words[0];
  else
    v0 = (char *)(0x8000000243A6EBF4 & 0x7FFFFFFFFFFFFFFFLL);
  std::string::basic_string[abi:ne180100]<0>(v9, v0);
  free(v10.__r_.__value_.__l.__data_);
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v10, (const char *)(0x8000000243A733A5 & 0x7FFFFFFFFFFFFFFFLL));
  if (v10.__r_.__value_.__r.__words[0])
    v1 = (char *)v10.__r_.__value_.__r.__words[0];
  else
    v1 = (char *)(0x8000000243A733A5 & 0x7FFFFFFFFFFFFFFFLL);
  std::string::basic_string[abi:ne180100]<0>(v8, v1);
  free(v10.__r_.__value_.__l.__data_);
  v2 = (const char *)(*(_QWORD *)(MEMORY[0x24BEDB780] + 8) & 0x7FFFFFFFFFFFFFFFLL);
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v10, v2);
  if (v10.__r_.__value_.__r.__words[0])
    v3 = (char *)v10.__r_.__value_.__r.__words[0];
  else
    v3 = (char *)v2;
  std::string::basic_string[abi:ne180100]<0>(v7, v3);
  free(v10.__r_.__value_.__l.__data_);
  boost::histogram::detail::cat<std::string,char [35],std::string,char [5],std::string>((uint64_t)v9, ": cannot convert argument of type ", (uint64_t)v8, " to ", (uint64_t)v7);
  v4 = std::logic_error::logic_error(&v11, &v10);
  v11.__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
  v5.i64[0] = (uint64_t)"PerfPowerServicesReader/external/lib/boostorg/histogram/include/boost/histogram/axis/traits.hpp";
  v5.i64[1] = (uint64_t)"auto boost::histogram::axis::traits::index(const boost::histogram::axis::regular<> &, const std::"
                       "tuple<const double &, const double &, const double &, const double &, const double &, const doubl"
                       "e &, const double &, const double &> &)::(anonymous class)::operator()(const Axis &) const";
  v6 = 190;
  boost::throw_exception<std::invalid_argument>(v4, &v5);
}

void boost::histogram::detail::linearize_value<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,std::tuple<double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&>>()
{
  _ZZN5boost9histogram4axis6traits5indexINS1_8variableIdNS_11use_defaultES5_NSt3__19allocatorIdEEEENS6_5tupleIJRKdSC_SC_SC_SC_SC_SC_SC_EEEEEDaRKT_RKT0_ENKUlRKS9_E_clESM_();
}

uint64_t sub_243A47444(uint64_t result)
{
  _QWORD *v1;
  _QWORD *v2;
  unint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  v3 = v1[1] - *v1;
  v4 = v2[1];
  v5 = (int)result >= (int)(v3 >> 3) || (int)result <= -2;
  v6 = (uint64_t)((v3 << 29) + 0x100000000) >> 32;
  if (v5)
    v6 = 0;
  *v2 += v4 * ((int)result + 1);
  v2[1] = v6 * v4;
  return result;
}

void _ZZN5boost9histogram4axis6traits5indexINS1_8variableIdNS_11use_defaultES5_NSt3__19allocatorIdEEEENS6_5tupleIJRKdSC_SC_SC_SC_SC_SC_SC_EEEEEDaRKT_RKT0_ENKUlRKS9_E_clESM_()
{
  char *v0;
  char *v1;
  const char *v2;
  char *v3;
  std::logic_error *v4;
  int8x16_t v5;
  uint64_t v6;
  _QWORD v7[3];
  _QWORD v8[3];
  _QWORD v9[3];
  std::string v10;
  std::logic_error v11;

  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v10, (const char *)(0x8000000243A6F172 & 0x7FFFFFFFFFFFFFFFLL));
  if (v10.__r_.__value_.__r.__words[0])
    v0 = (char *)v10.__r_.__value_.__r.__words[0];
  else
    v0 = (char *)(0x8000000243A6F172 & 0x7FFFFFFFFFFFFFFFLL);
  std::string::basic_string[abi:ne180100]<0>(v9, v0);
  free(v10.__r_.__value_.__l.__data_);
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v10, (const char *)(0x8000000243A733A5 & 0x7FFFFFFFFFFFFFFFLL));
  if (v10.__r_.__value_.__r.__words[0])
    v1 = (char *)v10.__r_.__value_.__r.__words[0];
  else
    v1 = (char *)(0x8000000243A733A5 & 0x7FFFFFFFFFFFFFFFLL);
  std::string::basic_string[abi:ne180100]<0>(v8, v1);
  free(v10.__r_.__value_.__l.__data_);
  v2 = (const char *)(*(_QWORD *)(MEMORY[0x24BEDB780] + 8) & 0x7FFFFFFFFFFFFFFFLL);
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v10, v2);
  if (v10.__r_.__value_.__r.__words[0])
    v3 = (char *)v10.__r_.__value_.__r.__words[0];
  else
    v3 = (char *)v2;
  std::string::basic_string[abi:ne180100]<0>(v7, v3);
  free(v10.__r_.__value_.__l.__data_);
  boost::histogram::detail::cat<std::string,char [35],std::string,char [5],std::string>((uint64_t)v9, ": cannot convert argument of type ", (uint64_t)v8, " to ", (uint64_t)v7);
  v4 = std::logic_error::logic_error(&v11, &v10);
  v11.__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
  v5.i64[0] = (uint64_t)"PerfPowerServicesReader/external/lib/boostorg/histogram/include/boost/histogram/axis/traits.hpp";
  v5.i64[1] = (uint64_t)"auto boost::histogram::axis::traits::index(const boost::histogram::axis::variable<> &, const std:"
                       ":tuple<const double &, const double &, const double &, const double &, const double &, const doub"
                       "le &, const double &, const double &> &)::(anonymous class)::operator()(const Axis &) const";
  v6 = 190;
  boost::throw_exception<std::invalid_argument>(v4, &v5);
}

void boost::histogram::detail::linearize_value<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>,std::tuple<double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&>>()
{
  _ZZN5boost9histogram4axis6traits5indexINS1_7integerIiNS_11use_defaultENS1_6option3bitILj1EEEEENSt3__15tupleIJRKdSD_SD_SD_SD_SD_SD_SD_EEEEEDaRKT_RKT0_ENKUlRKS9_E_clESN_();
}

uint64_t sub_243A47670(uint64_t result)
{
  int *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v3 = *v1;
  v4 = v2[1];
  if ((int)result > (int)v3 || (int)result <= -1)
    v6 = 0;
  else
    v6 = v3 + 1;
  *v2 += v4 * (int)result;
  v2[1] = v6 * v4;
  return result;
}

void _ZZN5boost9histogram4axis6traits5indexINS1_7integerIiNS_11use_defaultENS1_6option3bitILj1EEEEENSt3__15tupleIJRKdSD_SD_SD_SD_SD_SD_SD_EEEEEDaRKT_RKT0_ENKUlRKS9_E_clESN_()
{
  char *v0;
  char *v1;
  const char *v2;
  char *v3;
  std::logic_error *v4;
  int8x16_t v5;
  uint64_t v6;
  _QWORD v7[3];
  _QWORD v8[3];
  _QWORD v9[3];
  std::string v10;
  std::logic_error v11;

  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v10, (const char *)(0x8000000243A6F746 & 0x7FFFFFFFFFFFFFFFLL));
  if (v10.__r_.__value_.__r.__words[0])
    v0 = (char *)v10.__r_.__value_.__r.__words[0];
  else
    v0 = (char *)(0x8000000243A6F746 & 0x7FFFFFFFFFFFFFFFLL);
  std::string::basic_string[abi:ne180100]<0>(v9, v0);
  free(v10.__r_.__value_.__l.__data_);
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v10, (const char *)(0x8000000243A733A5 & 0x7FFFFFFFFFFFFFFFLL));
  if (v10.__r_.__value_.__r.__words[0])
    v1 = (char *)v10.__r_.__value_.__r.__words[0];
  else
    v1 = (char *)(0x8000000243A733A5 & 0x7FFFFFFFFFFFFFFFLL);
  std::string::basic_string[abi:ne180100]<0>(v8, v1);
  free(v10.__r_.__value_.__l.__data_);
  v2 = (const char *)(*(_QWORD *)(MEMORY[0x24BEDB798] + 8) & 0x7FFFFFFFFFFFFFFFLL);
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v10, v2);
  if (v10.__r_.__value_.__r.__words[0])
    v3 = (char *)v10.__r_.__value_.__r.__words[0];
  else
    v3 = (char *)v2;
  std::string::basic_string[abi:ne180100]<0>(v7, v3);
  free(v10.__r_.__value_.__l.__data_);
  boost::histogram::detail::cat<std::string,char [35],std::string,char [5],std::string>((uint64_t)v9, ": cannot convert argument of type ", (uint64_t)v8, " to ", (uint64_t)v7);
  v4 = std::logic_error::logic_error(&v11, &v10);
  v11.__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
  v5.i64[0] = (uint64_t)"PerfPowerServicesReader/external/lib/boostorg/histogram/include/boost/histogram/axis/traits.hpp";
  v5.i64[1] = (uint64_t)"auto boost::histogram::axis::traits::index(const boost::histogram::axis::integer<int, boost::use_"
                       "default, boost::histogram::axis::option::bit<1>> &, const std::tuple<const double &, const double"
                       " &, const double &, const double &, const double &, const double &, const double &, const double "
                       "&> &)::(anonymous class)::operator()(const Axis &) const";
  v6 = 190;
  boost::throw_exception<std::invalid_argument>(v4, &v5);
}

__n128 boost::mp11::detail::mp_for_each_impl<std::integral_constant<unsigned long,0ul>,std::integral_constant<unsigned long,1ul>,std::integral_constant<unsigned long,2ul>,std::integral_constant<unsigned long,3ul>,std::integral_constant<unsigned long,4ul>,std::integral_constant<unsigned long,5ul>,std::integral_constant<unsigned long,6ul>,std::integral_constant<unsigned long,7ul>,boost::histogram::detail::optional_index boost::histogram::detail::args_to_index<0u,8u,boost::histogram::unlimited_storage<std::allocator<char>>,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,std::tuple<double,double,double,double,double,double,double,double>>(std::integral_constant<BOOL,false>,boost::histogram::unlimited_storage<std::allocator<char>> &,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>> const&,std::tuple<double,double,double,double,double,double,double,double> const&)::{lambda(std::integral_constant<unsigned long,0ul>,std::integral_constant<unsigned long,1ul>,std::integral_constant<unsigned long,2ul>,std::integral_constant<unsigned long,3ul>,std::integral_constant<unsigned long,4ul>,std::integral_constant<unsigned long,5ul>,std::integral_constant<unsigned long,6ul>,std::integral_constant<unsigned long,7ul>)#1}>@<Q0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  __n128 result;
  uint64_t v22;
  uint64_t v23;
  uint64_t **v24;

  v4 = *a1;
  v5 = *(int **)a1[1];
  v6 = a1[2];
  v22 = v4;
  v23 = v6;
  v24 = (uint64_t **)&v22;
  _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_EdEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENSY_11result_typeERSY_(v5, &v24);
  v7 = (int *)(*(_QWORD *)a1[1] + 56);
  v8 = a1[2] + 8;
  v22 = *a1;
  v23 = v8;
  v24 = (uint64_t **)&v22;
  _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_EdEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENSY_11result_typeERSY_(v7, &v24);
  v9 = (int *)(*(_QWORD *)a1[1] + 112);
  v10 = a1[2] + 16;
  v22 = *a1;
  v23 = v10;
  v24 = (uint64_t **)&v22;
  _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_EdEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENSY_11result_typeERSY_(v9, &v24);
  v11 = (int *)(*(_QWORD *)a1[1] + 168);
  v12 = a1[2] + 24;
  v22 = *a1;
  v23 = v12;
  v24 = (uint64_t **)&v22;
  _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_EdEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENSY_11result_typeERSY_(v11, &v24);
  v13 = (int *)(*(_QWORD *)a1[1] + 224);
  v14 = a1[2] + 32;
  v22 = *a1;
  v23 = v14;
  v24 = (uint64_t **)&v22;
  _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_EdEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENSY_11result_typeERSY_(v13, &v24);
  v15 = (int *)(*(_QWORD *)a1[1] + 280);
  v16 = a1[2] + 40;
  v22 = *a1;
  v23 = v16;
  v24 = (uint64_t **)&v22;
  _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_EdEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENSY_11result_typeERSY_(v15, &v24);
  v17 = (int *)(*(_QWORD *)a1[1] + 336);
  v18 = a1[2] + 48;
  v22 = *a1;
  v23 = v18;
  v24 = (uint64_t **)&v22;
  _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_EdEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENSY_11result_typeERSY_(v17, &v24);
  v19 = (int *)(*(_QWORD *)a1[1] + 392);
  v20 = a1[2] + 56;
  v22 = *a1;
  v23 = v20;
  v24 = (uint64_t **)&v22;
  _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_EdEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENSY_11result_typeERSY_(v19, &v24);
  result = *(__n128 *)a1;
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_QWORD *)(a2 + 16) = a1[2];
  return result;
}

uint64_t boost::histogram::detail::fill<boost::histogram::unlimited_storage<std::allocator<char>>,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,double,double,double,double,double,double,double,double,double>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  char v9;

  v4 = boost::histogram::detail::args_to_index<0u,9u,boost::histogram::unlimited_storage<std::allocator<char>>,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,std::tuple<double,double,double,double,double,double,double,double,double>>(a1, a2, a3);
  if (!v5)
    return *(_QWORD *)(a1 + 8);
  v6 = v4;
  v8 = v4;
  boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::apply<boost::histogram::unlimited_storage<std::allocator<char>>::incrementor,boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type&,unsigned long &>(a1, (uint64_t)&v9, a1, &v8);
  return v6;
}

uint64_t boost::histogram::detail::args_to_index<0u,9u,boost::histogram::unlimited_storage<std::allocator<char>>,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,std::tuple<double,double,double,double,double,double,double,double,double>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int *v3;
  uint64_t v4;
  std::logic_error v6;
  int8x16_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  std::logic_error *v16;

  v15 = xmmword_243A73480;
  v3 = *(int **)a2;
  v4 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  if (v4 != 9)
  {
    if (v4 == 1)
    {
      v7.i64[0] = a3;
      v7.i64[1] = a3 + 8;
      v8 = a3 + 16;
      v9 = a3 + 24;
      v10 = a3 + 32;
      v11 = a3 + 40;
      v12 = a3 + 48;
      v13 = a3 + 56;
      v14 = a3 + 64;
      v6.__vftable = (std::logic_error_vtbl *)&v15;
      v6.__imp_.__imp_ = (const char *)&v7;
      v16 = &v6;
      _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_ENS7_5tupleIJRKdSP_SP_SP_SP_SP_SP_SP_SP_EEEEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENS12_11result_typeERS12_(v3);
    }
    std::logic_error::logic_error(&v6, "number of arguments != histogram rank");
    v6.__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    v7.i64[0] = (uint64_t)"PerfPowerServicesReader/external/lib/boostorg/histogram/include/boost/histogram/detail/linearize.hpp";
    v7.i64[1] = (uint64_t)"optional_index boost::histogram::detail::args_to_index(std::false_type, S &, const T &, const U"
                         " &) [I = 0U, N = 9U, S = boost::histogram::unlimited_storage<>, T = std::vector<boost::histogra"
                         "m::axis::variant<boost::histogram::axis::regular<>, boost::histogram::axis::variable<>, boost::"
                         "histogram::axis::integer<int, boost::use_default, boost::histogram::axis::option::bit<1>>>>, U "
                         "= std::tuple<double, double, double, double, double, double, double, double, double>]";
    v8 = 192;
    boost::throw_exception<std::invalid_argument>(&v6, &v7);
  }
  v7.i64[0] = (uint64_t)&v15;
  v7.i64[1] = a2;
  v8 = a3;
  boost::mp11::detail::mp_for_each_impl<std::integral_constant<unsigned long,0ul>,std::integral_constant<unsigned long,1ul>,std::integral_constant<unsigned long,2ul>,std::integral_constant<unsigned long,3ul>,std::integral_constant<unsigned long,4ul>,std::integral_constant<unsigned long,5ul>,std::integral_constant<unsigned long,6ul>,std::integral_constant<unsigned long,7ul>,std::integral_constant<unsigned long,8ul>,boost::histogram::detail::optional_index boost::histogram::detail::args_to_index<0u,9u,boost::histogram::unlimited_storage<std::allocator<char>>,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,std::tuple<double,double,double,double,double,double,double,double,double>>(std::integral_constant<BOOL,false>,boost::histogram::unlimited_storage<std::allocator<char>> &,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>> const&,std::tuple<double,double,double,double,double,double,double,double,double> const&)::{lambda(std::integral_constant<unsigned long,0ul>,std::integral_constant<unsigned long,1ul>,std::integral_constant<unsigned long,2ul>,std::integral_constant<unsigned long,3ul>,std::integral_constant<unsigned long,4ul>,std::integral_constant<unsigned long,5ul>,std::integral_constant<unsigned long,6ul>,std::integral_constant<unsigned long,7ul>,std::integral_constant<unsigned long,8ul>)#1}>(v7.i64, (uint64_t)&v6);
  return v15;
}

void _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_ENS7_5tupleIJRKdSP_SP_SP_SP_SP_SP_SP_SP_EEEEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENS12_11result_typeERS12_(int *a1)
{
  switch(*a1 ^ (*a1 >> 31))
  {
    case 0:
      boost::histogram::detail::linearize_value<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,std::tuple<double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&>>();
    case 1:
      boost::histogram::detail::linearize_value<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,std::tuple<double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&>>();
    case 2:
      boost::histogram::detail::linearize_value<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>,std::tuple<double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&>>();
    default:
      boost::detail::variant::forced_return<void>();
  }
}

void boost::histogram::detail::linearize_value<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,std::tuple<double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&>>()
{
  _ZZN5boost9histogram4axis6traits5indexINS1_7regularIdNS_11use_defaultES5_S5_EENSt3__15tupleIJRKdSA_SA_SA_SA_SA_SA_SA_SA_EEEEEDaRKT_RKT0_ENKUlRKS6_E_clESK_();
}

uint64_t sub_243A47BE0(uint64_t result)
{
  int *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v5;

  v3 = v2[1];
  if ((int)result + 1 >= *v1 + 2 || (int)result <= -2)
    v5 = 0;
  else
    v5 = *v1 + 2;
  *v2 += v3 * ((int)result + 1);
  v2[1] = v5 * v3;
  return result;
}

void _ZZN5boost9histogram4axis6traits5indexINS1_7regularIdNS_11use_defaultES5_S5_EENSt3__15tupleIJRKdSA_SA_SA_SA_SA_SA_SA_SA_EEEEEDaRKT_RKT0_ENKUlRKS6_E_clESK_()
{
  char *v0;
  char *v1;
  const char *v2;
  char *v3;
  std::logic_error *v4;
  int8x16_t v5;
  uint64_t v6;
  _QWORD v7[3];
  _QWORD v8[3];
  _QWORD v9[3];
  std::string v10;
  std::logic_error v11;

  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v10, (const char *)(0x8000000243A6EBF4 & 0x7FFFFFFFFFFFFFFFLL));
  if (v10.__r_.__value_.__r.__words[0])
    v0 = (char *)v10.__r_.__value_.__r.__words[0];
  else
    v0 = (char *)(0x8000000243A6EBF4 & 0x7FFFFFFFFFFFFFFFLL);
  std::string::basic_string[abi:ne180100]<0>(v9, v0);
  free(v10.__r_.__value_.__l.__data_);
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v10, (const char *)(0x8000000243A733D0 & 0x7FFFFFFFFFFFFFFFLL));
  if (v10.__r_.__value_.__r.__words[0])
    v1 = (char *)v10.__r_.__value_.__r.__words[0];
  else
    v1 = (char *)(0x8000000243A733D0 & 0x7FFFFFFFFFFFFFFFLL);
  std::string::basic_string[abi:ne180100]<0>(v8, v1);
  free(v10.__r_.__value_.__l.__data_);
  v2 = (const char *)(*(_QWORD *)(MEMORY[0x24BEDB780] + 8) & 0x7FFFFFFFFFFFFFFFLL);
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v10, v2);
  if (v10.__r_.__value_.__r.__words[0])
    v3 = (char *)v10.__r_.__value_.__r.__words[0];
  else
    v3 = (char *)v2;
  std::string::basic_string[abi:ne180100]<0>(v7, v3);
  free(v10.__r_.__value_.__l.__data_);
  boost::histogram::detail::cat<std::string,char [35],std::string,char [5],std::string>((uint64_t)v9, ": cannot convert argument of type ", (uint64_t)v8, " to ", (uint64_t)v7);
  v4 = std::logic_error::logic_error(&v11, &v10);
  v11.__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
  v5.i64[0] = (uint64_t)"PerfPowerServicesReader/external/lib/boostorg/histogram/include/boost/histogram/axis/traits.hpp";
  v5.i64[1] = (uint64_t)"auto boost::histogram::axis::traits::index(const boost::histogram::axis::regular<> &, const std::"
                       "tuple<const double &, const double &, const double &, const double &, const double &, const doubl"
                       "e &, const double &, const double &, const double &> &)::(anonymous class)::operator()(const Axis &) const";
  v6 = 190;
  boost::throw_exception<std::invalid_argument>(v4, &v5);
}

void boost::histogram::detail::linearize_value<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,std::tuple<double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&>>()
{
  _ZZN5boost9histogram4axis6traits5indexINS1_8variableIdNS_11use_defaultES5_NSt3__19allocatorIdEEEENS6_5tupleIJRKdSC_SC_SC_SC_SC_SC_SC_SC_EEEEEDaRKT_RKT0_ENKUlRKS9_E_clESM_();
}

uint64_t sub_243A47DFC(uint64_t result)
{
  _QWORD *v1;
  _QWORD *v2;
  unint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  v3 = v1[1] - *v1;
  v4 = v2[1];
  v5 = (int)result >= (int)(v3 >> 3) || (int)result <= -2;
  v6 = (uint64_t)((v3 << 29) + 0x100000000) >> 32;
  if (v5)
    v6 = 0;
  *v2 += v4 * ((int)result + 1);
  v2[1] = v6 * v4;
  return result;
}

void _ZZN5boost9histogram4axis6traits5indexINS1_8variableIdNS_11use_defaultES5_NSt3__19allocatorIdEEEENS6_5tupleIJRKdSC_SC_SC_SC_SC_SC_SC_SC_EEEEEDaRKT_RKT0_ENKUlRKS9_E_clESM_()
{
  char *v0;
  char *v1;
  const char *v2;
  char *v3;
  std::logic_error *v4;
  int8x16_t v5;
  uint64_t v6;
  _QWORD v7[3];
  _QWORD v8[3];
  _QWORD v9[3];
  std::string v10;
  std::logic_error v11;

  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v10, (const char *)(0x8000000243A6F172 & 0x7FFFFFFFFFFFFFFFLL));
  if (v10.__r_.__value_.__r.__words[0])
    v0 = (char *)v10.__r_.__value_.__r.__words[0];
  else
    v0 = (char *)(0x8000000243A6F172 & 0x7FFFFFFFFFFFFFFFLL);
  std::string::basic_string[abi:ne180100]<0>(v9, v0);
  free(v10.__r_.__value_.__l.__data_);
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v10, (const char *)(0x8000000243A733D0 & 0x7FFFFFFFFFFFFFFFLL));
  if (v10.__r_.__value_.__r.__words[0])
    v1 = (char *)v10.__r_.__value_.__r.__words[0];
  else
    v1 = (char *)(0x8000000243A733D0 & 0x7FFFFFFFFFFFFFFFLL);
  std::string::basic_string[abi:ne180100]<0>(v8, v1);
  free(v10.__r_.__value_.__l.__data_);
  v2 = (const char *)(*(_QWORD *)(MEMORY[0x24BEDB780] + 8) & 0x7FFFFFFFFFFFFFFFLL);
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v10, v2);
  if (v10.__r_.__value_.__r.__words[0])
    v3 = (char *)v10.__r_.__value_.__r.__words[0];
  else
    v3 = (char *)v2;
  std::string::basic_string[abi:ne180100]<0>(v7, v3);
  free(v10.__r_.__value_.__l.__data_);
  boost::histogram::detail::cat<std::string,char [35],std::string,char [5],std::string>((uint64_t)v9, ": cannot convert argument of type ", (uint64_t)v8, " to ", (uint64_t)v7);
  v4 = std::logic_error::logic_error(&v11, &v10);
  v11.__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
  v5.i64[0] = (uint64_t)"PerfPowerServicesReader/external/lib/boostorg/histogram/include/boost/histogram/axis/traits.hpp";
  v5.i64[1] = (uint64_t)"auto boost::histogram::axis::traits::index(const boost::histogram::axis::variable<> &, const std:"
                       ":tuple<const double &, const double &, const double &, const double &, const double &, const doub"
                       "le &, const double &, const double &, const double &> &)::(anonymous class)::operator()(const Axis &) const";
  v6 = 190;
  boost::throw_exception<std::invalid_argument>(v4, &v5);
}

void boost::histogram::detail::linearize_value<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>,std::tuple<double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&>>()
{
  _ZZN5boost9histogram4axis6traits5indexINS1_7integerIiNS_11use_defaultENS1_6option3bitILj1EEEEENSt3__15tupleIJRKdSD_SD_SD_SD_SD_SD_SD_SD_EEEEEDaRKT_RKT0_ENKUlRKS9_E_clESN_();
}

uint64_t sub_243A48028(uint64_t result)
{
  int *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v3 = *v1;
  v4 = v2[1];
  if ((int)result > (int)v3 || (int)result <= -1)
    v6 = 0;
  else
    v6 = v3 + 1;
  *v2 += v4 * (int)result;
  v2[1] = v6 * v4;
  return result;
}

void _ZZN5boost9histogram4axis6traits5indexINS1_7integerIiNS_11use_defaultENS1_6option3bitILj1EEEEENSt3__15tupleIJRKdSD_SD_SD_SD_SD_SD_SD_SD_EEEEEDaRKT_RKT0_ENKUlRKS9_E_clESN_()
{
  char *v0;
  char *v1;
  const char *v2;
  char *v3;
  std::logic_error *v4;
  int8x16_t v5;
  uint64_t v6;
  _QWORD v7[3];
  _QWORD v8[3];
  _QWORD v9[3];
  std::string v10;
  std::logic_error v11;

  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v10, (const char *)(0x8000000243A6F746 & 0x7FFFFFFFFFFFFFFFLL));
  if (v10.__r_.__value_.__r.__words[0])
    v0 = (char *)v10.__r_.__value_.__r.__words[0];
  else
    v0 = (char *)(0x8000000243A6F746 & 0x7FFFFFFFFFFFFFFFLL);
  std::string::basic_string[abi:ne180100]<0>(v9, v0);
  free(v10.__r_.__value_.__l.__data_);
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v10, (const char *)(0x8000000243A733D0 & 0x7FFFFFFFFFFFFFFFLL));
  if (v10.__r_.__value_.__r.__words[0])
    v1 = (char *)v10.__r_.__value_.__r.__words[0];
  else
    v1 = (char *)(0x8000000243A733D0 & 0x7FFFFFFFFFFFFFFFLL);
  std::string::basic_string[abi:ne180100]<0>(v8, v1);
  free(v10.__r_.__value_.__l.__data_);
  v2 = (const char *)(*(_QWORD *)(MEMORY[0x24BEDB798] + 8) & 0x7FFFFFFFFFFFFFFFLL);
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v10, v2);
  if (v10.__r_.__value_.__r.__words[0])
    v3 = (char *)v10.__r_.__value_.__r.__words[0];
  else
    v3 = (char *)v2;
  std::string::basic_string[abi:ne180100]<0>(v7, v3);
  free(v10.__r_.__value_.__l.__data_);
  boost::histogram::detail::cat<std::string,char [35],std::string,char [5],std::string>((uint64_t)v9, ": cannot convert argument of type ", (uint64_t)v8, " to ", (uint64_t)v7);
  v4 = std::logic_error::logic_error(&v11, &v10);
  v11.__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
  v5.i64[0] = (uint64_t)"PerfPowerServicesReader/external/lib/boostorg/histogram/include/boost/histogram/axis/traits.hpp";
  v5.i64[1] = (uint64_t)"auto boost::histogram::axis::traits::index(const boost::histogram::axis::integer<int, boost::use_"
                       "default, boost::histogram::axis::option::bit<1>> &, const std::tuple<const double &, const double"
                       " &, const double &, const double &, const double &, const double &, const double &, const double "
                       "&, const double &> &)::(anonymous class)::operator()(const Axis &) const";
  v6 = 190;
  boost::throw_exception<std::invalid_argument>(v4, &v5);
}

__n128 boost::mp11::detail::mp_for_each_impl<std::integral_constant<unsigned long,0ul>,std::integral_constant<unsigned long,1ul>,std::integral_constant<unsigned long,2ul>,std::integral_constant<unsigned long,3ul>,std::integral_constant<unsigned long,4ul>,std::integral_constant<unsigned long,5ul>,std::integral_constant<unsigned long,6ul>,std::integral_constant<unsigned long,7ul>,std::integral_constant<unsigned long,8ul>,boost::histogram::detail::optional_index boost::histogram::detail::args_to_index<0u,9u,boost::histogram::unlimited_storage<std::allocator<char>>,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,std::tuple<double,double,double,double,double,double,double,double,double>>(std::integral_constant<BOOL,false>,boost::histogram::unlimited_storage<std::allocator<char>> &,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>> const&,std::tuple<double,double,double,double,double,double,double,double,double> const&)::{lambda(std::integral_constant<unsigned long,0ul>,std::integral_constant<unsigned long,1ul>,std::integral_constant<unsigned long,2ul>,std::integral_constant<unsigned long,3ul>,std::integral_constant<unsigned long,4ul>,std::integral_constant<unsigned long,5ul>,std::integral_constant<unsigned long,6ul>,std::integral_constant<unsigned long,7ul>,std::integral_constant<unsigned long,8ul>)#1}>@<Q0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  __n128 result;
  uint64_t v24;
  uint64_t v25;
  uint64_t **v26;

  v4 = *a1;
  v5 = *(int **)a1[1];
  v6 = a1[2];
  v24 = v4;
  v25 = v6;
  v26 = (uint64_t **)&v24;
  _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_EdEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENSY_11result_typeERSY_(v5, &v26);
  v7 = (int *)(*(_QWORD *)a1[1] + 56);
  v8 = a1[2] + 8;
  v24 = *a1;
  v25 = v8;
  v26 = (uint64_t **)&v24;
  _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_EdEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENSY_11result_typeERSY_(v7, &v26);
  v9 = (int *)(*(_QWORD *)a1[1] + 112);
  v10 = a1[2] + 16;
  v24 = *a1;
  v25 = v10;
  v26 = (uint64_t **)&v24;
  _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_EdEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENSY_11result_typeERSY_(v9, &v26);
  v11 = (int *)(*(_QWORD *)a1[1] + 168);
  v12 = a1[2] + 24;
  v24 = *a1;
  v25 = v12;
  v26 = (uint64_t **)&v24;
  _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_EdEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENSY_11result_typeERSY_(v11, &v26);
  v13 = (int *)(*(_QWORD *)a1[1] + 224);
  v14 = a1[2] + 32;
  v24 = *a1;
  v25 = v14;
  v26 = (uint64_t **)&v24;
  _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_EdEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENSY_11result_typeERSY_(v13, &v26);
  v15 = (int *)(*(_QWORD *)a1[1] + 280);
  v16 = a1[2] + 40;
  v24 = *a1;
  v25 = v16;
  v26 = (uint64_t **)&v24;
  _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_EdEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENSY_11result_typeERSY_(v15, &v26);
  v17 = (int *)(*(_QWORD *)a1[1] + 336);
  v18 = a1[2] + 48;
  v24 = *a1;
  v25 = v18;
  v26 = (uint64_t **)&v24;
  _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_EdEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENSY_11result_typeERSY_(v17, &v26);
  v19 = (int *)(*(_QWORD *)a1[1] + 392);
  v20 = a1[2] + 56;
  v24 = *a1;
  v25 = v20;
  v26 = (uint64_t **)&v24;
  _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_EdEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENSY_11result_typeERSY_(v19, &v26);
  v21 = (int *)(*(_QWORD *)a1[1] + 448);
  v22 = a1[2] + 64;
  v24 = *a1;
  v25 = v22;
  v26 = (uint64_t **)&v24;
  _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_EdEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENSY_11result_typeERSY_(v21, &v26);
  result = *(__n128 *)a1;
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_QWORD *)(a2 + 16) = a1[2];
  return result;
}

uint64_t boost::histogram::detail::fill<boost::histogram::unlimited_storage<std::allocator<char>>,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,double,double,double,double,double,double,double,double,double,double>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  char v9;

  v4 = boost::histogram::detail::args_to_index<0u,10u,boost::histogram::unlimited_storage<std::allocator<char>>,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,std::tuple<double,double,double,double,double,double,double,double,double,double>>(a1, a2, a3);
  if (!v5)
    return *(_QWORD *)(a1 + 8);
  v6 = v4;
  v8 = v4;
  boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::apply<boost::histogram::unlimited_storage<std::allocator<char>>::incrementor,boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type&,unsigned long &>(a1, (uint64_t)&v9, a1, &v8);
  return v6;
}

uint64_t boost::histogram::detail::args_to_index<0u,10u,boost::histogram::unlimited_storage<std::allocator<char>>,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,std::tuple<double,double,double,double,double,double,double,double,double,double>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int *v3;
  uint64_t v4;
  std::logic_error v6;
  int8x16_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  std::logic_error *v17;

  v16 = xmmword_243A73480;
  v3 = *(int **)a2;
  v4 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  if (v4 != 10)
  {
    if (v4 == 1)
    {
      v7.i64[0] = a3;
      v7.i64[1] = a3 + 8;
      v8 = a3 + 16;
      v9 = a3 + 24;
      v10 = a3 + 32;
      v11 = a3 + 40;
      v12 = a3 + 48;
      v13 = a3 + 56;
      v14 = a3 + 64;
      v15 = a3 + 72;
      v6.__vftable = (std::logic_error_vtbl *)&v16;
      v6.__imp_.__imp_ = (const char *)&v7;
      v17 = &v6;
      _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_ENS7_5tupleIJRKdSP_SP_SP_SP_SP_SP_SP_SP_SP_EEEEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENS12_11result_typeERS12_(v3);
    }
    std::logic_error::logic_error(&v6, "number of arguments != histogram rank");
    v6.__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    v7.i64[0] = (uint64_t)"PerfPowerServicesReader/external/lib/boostorg/histogram/include/boost/histogram/detail/linearize.hpp";
    v7.i64[1] = (uint64_t)"optional_index boost::histogram::detail::args_to_index(std::false_type, S &, const T &, const U"
                         " &) [I = 0U, N = 10U, S = boost::histogram::unlimited_storage<>, T = std::vector<boost::histogr"
                         "am::axis::variant<boost::histogram::axis::regular<>, boost::histogram::axis::variable<>, boost:"
                         ":histogram::axis::integer<int, boost::use_default, boost::histogram::axis::option::bit<1>>>>, U"
                         " = std::tuple<double, double, double, double, double, double, double, double, double, double>]";
    v8 = 192;
    boost::throw_exception<std::invalid_argument>(&v6, &v7);
  }
  v7.i64[0] = (uint64_t)&v16;
  v7.i64[1] = a2;
  v8 = a3;
  boost::mp11::detail::mp_for_each_impl<std::integral_constant<unsigned long,0ul>,std::integral_constant<unsigned long,1ul>,std::integral_constant<unsigned long,2ul>,std::integral_constant<unsigned long,3ul>,std::integral_constant<unsigned long,4ul>,std::integral_constant<unsigned long,5ul>,std::integral_constant<unsigned long,6ul>,std::integral_constant<unsigned long,7ul>,std::integral_constant<unsigned long,8ul>,std::integral_constant<unsigned long,9ul>,boost::histogram::detail::optional_index boost::histogram::detail::args_to_index<0u,10u,boost::histogram::unlimited_storage<std::allocator<char>>,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,std::tuple<double,double,double,double,double,double,double,double,double,double>>(std::integral_constant<BOOL,false>,boost::histogram::unlimited_storage<std::allocator<char>> &,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>> const&,std::tuple<double,double,double,double,double,double,double,double,double,double> const&)::{lambda(std::integral_constant<unsigned long,0ul>,std::integral_constant<unsigned long,1ul>,std::integral_constant<unsigned long,2ul>,std::integral_constant<unsigned long,3ul>,std::integral_constant<unsigned long,4ul>,std::integral_constant<unsigned long,5ul>,std::integral_constant<unsigned long,6ul>,std::integral_constant<unsigned long,7ul>,std::integral_constant<unsigned long,8ul>,std::integral_constant<unsigned long,9ul>)#1}>(v7.i64, (uint64_t)&v6);
  return v16;
}

void _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_ENS7_5tupleIJRKdSP_SP_SP_SP_SP_SP_SP_SP_SP_EEEEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENS12_11result_typeERS12_(int *a1)
{
  switch(*a1 ^ (*a1 >> 31))
  {
    case 0:
      boost::histogram::detail::linearize_value<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,std::tuple<double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&>>();
    case 1:
      boost::histogram::detail::linearize_value<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,std::tuple<double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&>>();
    case 2:
      boost::histogram::detail::linearize_value<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>,std::tuple<double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&>>();
    default:
      boost::detail::variant::forced_return<void>();
  }
}

void boost::histogram::detail::linearize_value<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,std::tuple<double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&>>()
{
  _ZZN5boost9histogram4axis6traits5indexINS1_7regularIdNS_11use_defaultES5_S5_EENSt3__15tupleIJRKdSA_SA_SA_SA_SA_SA_SA_SA_SA_EEEEEDaRKT_RKT0_ENKUlRKS6_E_clESK_();
}

uint64_t sub_243A485C0(uint64_t result)
{
  int *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v5;

  v3 = v2[1];
  if ((int)result + 1 >= *v1 + 2 || (int)result <= -2)
    v5 = 0;
  else
    v5 = *v1 + 2;
  *v2 += v3 * ((int)result + 1);
  v2[1] = v5 * v3;
  return result;
}

void _ZZN5boost9histogram4axis6traits5indexINS1_7regularIdNS_11use_defaultES5_S5_EENSt3__15tupleIJRKdSA_SA_SA_SA_SA_SA_SA_SA_SA_EEEEEDaRKT_RKT0_ENKUlRKS6_E_clESK_()
{
  char *v0;
  char *v1;
  const char *v2;
  char *v3;
  std::logic_error *v4;
  int8x16_t v5;
  uint64_t v6;
  _QWORD v7[3];
  _QWORD v8[3];
  _QWORD v9[3];
  std::string v10;
  std::logic_error v11;

  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v10, (const char *)(0x8000000243A6EBF4 & 0x7FFFFFFFFFFFFFFFLL));
  if (v10.__r_.__value_.__r.__words[0])
    v0 = (char *)v10.__r_.__value_.__r.__words[0];
  else
    v0 = (char *)(0x8000000243A6EBF4 & 0x7FFFFFFFFFFFFFFFLL);
  std::string::basic_string[abi:ne180100]<0>(v9, v0);
  free(v10.__r_.__value_.__l.__data_);
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v10, (const char *)(0x8000000243A733FELL & 0x7FFFFFFFFFFFFFFFLL));
  if (v10.__r_.__value_.__r.__words[0])
    v1 = (char *)v10.__r_.__value_.__r.__words[0];
  else
    v1 = (char *)(0x8000000243A733FELL & 0x7FFFFFFFFFFFFFFFLL);
  std::string::basic_string[abi:ne180100]<0>(v8, v1);
  free(v10.__r_.__value_.__l.__data_);
  v2 = (const char *)(*(_QWORD *)(MEMORY[0x24BEDB780] + 8) & 0x7FFFFFFFFFFFFFFFLL);
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v10, v2);
  if (v10.__r_.__value_.__r.__words[0])
    v3 = (char *)v10.__r_.__value_.__r.__words[0];
  else
    v3 = (char *)v2;
  std::string::basic_string[abi:ne180100]<0>(v7, v3);
  free(v10.__r_.__value_.__l.__data_);
  boost::histogram::detail::cat<std::string,char [35],std::string,char [5],std::string>((uint64_t)v9, ": cannot convert argument of type ", (uint64_t)v8, " to ", (uint64_t)v7);
  v4 = std::logic_error::logic_error(&v11, &v10);
  v11.__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
  v5.i64[0] = (uint64_t)"PerfPowerServicesReader/external/lib/boostorg/histogram/include/boost/histogram/axis/traits.hpp";
  v5.i64[1] = (uint64_t)"auto boost::histogram::axis::traits::index(const boost::histogram::axis::regular<> &, const std::"
                       "tuple<const double &, const double &, const double &, const double &, const double &, const doubl"
                       "e &, const double &, const double &, const double &, const double &> &)::(anonymous class)::opera"
                       "tor()(const Axis &) const";
  v6 = 190;
  boost::throw_exception<std::invalid_argument>(v4, &v5);
}

void boost::histogram::detail::linearize_value<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,std::tuple<double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&>>()
{
  _ZZN5boost9histogram4axis6traits5indexINS1_8variableIdNS_11use_defaultES5_NSt3__19allocatorIdEEEENS6_5tupleIJRKdSC_SC_SC_SC_SC_SC_SC_SC_SC_EEEEEDaRKT_RKT0_ENKUlRKS9_E_clESM_();
}

uint64_t sub_243A487DC(uint64_t result)
{
  _QWORD *v1;
  _QWORD *v2;
  unint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  v3 = v1[1] - *v1;
  v4 = v2[1];
  v5 = (int)result >= (int)(v3 >> 3) || (int)result <= -2;
  v6 = (uint64_t)((v3 << 29) + 0x100000000) >> 32;
  if (v5)
    v6 = 0;
  *v2 += v4 * ((int)result + 1);
  v2[1] = v6 * v4;
  return result;
}

void _ZZN5boost9histogram4axis6traits5indexINS1_8variableIdNS_11use_defaultES5_NSt3__19allocatorIdEEEENS6_5tupleIJRKdSC_SC_SC_SC_SC_SC_SC_SC_SC_EEEEEDaRKT_RKT0_ENKUlRKS9_E_clESM_()
{
  char *v0;
  char *v1;
  const char *v2;
  char *v3;
  std::logic_error *v4;
  int8x16_t v5;
  uint64_t v6;
  _QWORD v7[3];
  _QWORD v8[3];
  _QWORD v9[3];
  std::string v10;
  std::logic_error v11;

  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v10, (const char *)(0x8000000243A6F172 & 0x7FFFFFFFFFFFFFFFLL));
  if (v10.__r_.__value_.__r.__words[0])
    v0 = (char *)v10.__r_.__value_.__r.__words[0];
  else
    v0 = (char *)(0x8000000243A6F172 & 0x7FFFFFFFFFFFFFFFLL);
  std::string::basic_string[abi:ne180100]<0>(v9, v0);
  free(v10.__r_.__value_.__l.__data_);
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v10, (const char *)(0x8000000243A733FELL & 0x7FFFFFFFFFFFFFFFLL));
  if (v10.__r_.__value_.__r.__words[0])
    v1 = (char *)v10.__r_.__value_.__r.__words[0];
  else
    v1 = (char *)(0x8000000243A733FELL & 0x7FFFFFFFFFFFFFFFLL);
  std::string::basic_string[abi:ne180100]<0>(v8, v1);
  free(v10.__r_.__value_.__l.__data_);
  v2 = (const char *)(*(_QWORD *)(MEMORY[0x24BEDB780] + 8) & 0x7FFFFFFFFFFFFFFFLL);
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v10, v2);
  if (v10.__r_.__value_.__r.__words[0])
    v3 = (char *)v10.__r_.__value_.__r.__words[0];
  else
    v3 = (char *)v2;
  std::string::basic_string[abi:ne180100]<0>(v7, v3);
  free(v10.__r_.__value_.__l.__data_);
  boost::histogram::detail::cat<std::string,char [35],std::string,char [5],std::string>((uint64_t)v9, ": cannot convert argument of type ", (uint64_t)v8, " to ", (uint64_t)v7);
  v4 = std::logic_error::logic_error(&v11, &v10);
  v11.__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
  v5.i64[0] = (uint64_t)"PerfPowerServicesReader/external/lib/boostorg/histogram/include/boost/histogram/axis/traits.hpp";
  v5.i64[1] = (uint64_t)"auto boost::histogram::axis::traits::index(const boost::histogram::axis::variable<> &, const std:"
                       ":tuple<const double &, const double &, const double &, const double &, const double &, const doub"
                       "le &, const double &, const double &, const double &, const double &> &)::(anonymous class)::oper"
                       "ator()(const Axis &) const";
  v6 = 190;
  boost::throw_exception<std::invalid_argument>(v4, &v5);
}

void boost::histogram::detail::linearize_value<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>,std::tuple<double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&>>()
{
  _ZZN5boost9histogram4axis6traits5indexINS1_7integerIiNS_11use_defaultENS1_6option3bitILj1EEEEENSt3__15tupleIJRKdSD_SD_SD_SD_SD_SD_SD_SD_SD_EEEEEDaRKT_RKT0_ENKUlRKS9_E_clESN_();
}

uint64_t sub_243A48A08(uint64_t result)
{
  int *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v3 = *v1;
  v4 = v2[1];
  if ((int)result > (int)v3 || (int)result <= -1)
    v6 = 0;
  else
    v6 = v3 + 1;
  *v2 += v4 * (int)result;
  v2[1] = v6 * v4;
  return result;
}

void _ZZN5boost9histogram4axis6traits5indexINS1_7integerIiNS_11use_defaultENS1_6option3bitILj1EEEEENSt3__15tupleIJRKdSD_SD_SD_SD_SD_SD_SD_SD_SD_EEEEEDaRKT_RKT0_ENKUlRKS9_E_clESN_()
{
  char *v0;
  char *v1;
  const char *v2;
  char *v3;
  std::logic_error *v4;
  int8x16_t v5;
  uint64_t v6;
  _QWORD v7[3];
  _QWORD v8[3];
  _QWORD v9[3];
  std::string v10;
  std::logic_error v11;

  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v10, (const char *)(0x8000000243A6F746 & 0x7FFFFFFFFFFFFFFFLL));
  if (v10.__r_.__value_.__r.__words[0])
    v0 = (char *)v10.__r_.__value_.__r.__words[0];
  else
    v0 = (char *)(0x8000000243A6F746 & 0x7FFFFFFFFFFFFFFFLL);
  std::string::basic_string[abi:ne180100]<0>(v9, v0);
  free(v10.__r_.__value_.__l.__data_);
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v10, (const char *)(0x8000000243A733FELL & 0x7FFFFFFFFFFFFFFFLL));
  if (v10.__r_.__value_.__r.__words[0])
    v1 = (char *)v10.__r_.__value_.__r.__words[0];
  else
    v1 = (char *)(0x8000000243A733FELL & 0x7FFFFFFFFFFFFFFFLL);
  std::string::basic_string[abi:ne180100]<0>(v8, v1);
  free(v10.__r_.__value_.__l.__data_);
  v2 = (const char *)(*(_QWORD *)(MEMORY[0x24BEDB798] + 8) & 0x7FFFFFFFFFFFFFFFLL);
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v10, v2);
  if (v10.__r_.__value_.__r.__words[0])
    v3 = (char *)v10.__r_.__value_.__r.__words[0];
  else
    v3 = (char *)v2;
  std::string::basic_string[abi:ne180100]<0>(v7, v3);
  free(v10.__r_.__value_.__l.__data_);
  boost::histogram::detail::cat<std::string,char [35],std::string,char [5],std::string>((uint64_t)v9, ": cannot convert argument of type ", (uint64_t)v8, " to ", (uint64_t)v7);
  v4 = std::logic_error::logic_error(&v11, &v10);
  v11.__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
  v5.i64[0] = (uint64_t)"PerfPowerServicesReader/external/lib/boostorg/histogram/include/boost/histogram/axis/traits.hpp";
  v5.i64[1] = (uint64_t)"auto boost::histogram::axis::traits::index(const boost::histogram::axis::integer<int, boost::use_"
                       "default, boost::histogram::axis::option::bit<1>> &, const std::tuple<const double &, const double"
                       " &, const double &, const double &, const double &, const double &, const double &, const double "
                       "&, const double &, const double &> &)::(anonymous class)::operator()(const Axis &) const";
  v6 = 190;
  boost::throw_exception<std::invalid_argument>(v4, &v5);
}

__n128 boost::mp11::detail::mp_for_each_impl<std::integral_constant<unsigned long,0ul>,std::integral_constant<unsigned long,1ul>,std::integral_constant<unsigned long,2ul>,std::integral_constant<unsigned long,3ul>,std::integral_constant<unsigned long,4ul>,std::integral_constant<unsigned long,5ul>,std::integral_constant<unsigned long,6ul>,std::integral_constant<unsigned long,7ul>,std::integral_constant<unsigned long,8ul>,std::integral_constant<unsigned long,9ul>,boost::histogram::detail::optional_index boost::histogram::detail::args_to_index<0u,10u,boost::histogram::unlimited_storage<std::allocator<char>>,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,std::tuple<double,double,double,double,double,double,double,double,double,double>>(std::integral_constant<BOOL,false>,boost::histogram::unlimited_storage<std::allocator<char>> &,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>> const&,std::tuple<double,double,double,double,double,double,double,double,double,double> const&)::{lambda(std::integral_constant<unsigned long,0ul>,std::integral_constant<unsigned long,1ul>,std::integral_constant<unsigned long,2ul>,std::integral_constant<unsigned long,3ul>,std::integral_constant<unsigned long,4ul>,std::integral_constant<unsigned long,5ul>,std::integral_constant<unsigned long,6ul>,std::integral_constant<unsigned long,7ul>,std::integral_constant<unsigned long,8ul>,std::integral_constant<unsigned long,9ul>)#1}>@<Q0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  int *v23;
  uint64_t v24;
  __n128 result;
  uint64_t v26;
  uint64_t v27;
  uint64_t **v28;

  v4 = *a1;
  v5 = *(int **)a1[1];
  v6 = a1[2];
  v26 = v4;
  v27 = v6;
  v28 = (uint64_t **)&v26;
  _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_EdEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENSY_11result_typeERSY_(v5, &v28);
  v7 = (int *)(*(_QWORD *)a1[1] + 56);
  v8 = a1[2] + 8;
  v26 = *a1;
  v27 = v8;
  v28 = (uint64_t **)&v26;
  _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_EdEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENSY_11result_typeERSY_(v7, &v28);
  v9 = (int *)(*(_QWORD *)a1[1] + 112);
  v10 = a1[2] + 16;
  v26 = *a1;
  v27 = v10;
  v28 = (uint64_t **)&v26;
  _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_EdEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENSY_11result_typeERSY_(v9, &v28);
  v11 = (int *)(*(_QWORD *)a1[1] + 168);
  v12 = a1[2] + 24;
  v26 = *a1;
  v27 = v12;
  v28 = (uint64_t **)&v26;
  _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_EdEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENSY_11result_typeERSY_(v11, &v28);
  v13 = (int *)(*(_QWORD *)a1[1] + 224);
  v14 = a1[2] + 32;
  v26 = *a1;
  v27 = v14;
  v28 = (uint64_t **)&v26;
  _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_EdEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENSY_11result_typeERSY_(v13, &v28);
  v15 = (int *)(*(_QWORD *)a1[1] + 280);
  v16 = a1[2] + 40;
  v26 = *a1;
  v27 = v16;
  v28 = (uint64_t **)&v26;
  _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_EdEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENSY_11result_typeERSY_(v15, &v28);
  v17 = (int *)(*(_QWORD *)a1[1] + 336);
  v18 = a1[2] + 48;
  v26 = *a1;
  v27 = v18;
  v28 = (uint64_t **)&v26;
  _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_EdEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENSY_11result_typeERSY_(v17, &v28);
  v19 = (int *)(*(_QWORD *)a1[1] + 392);
  v20 = a1[2] + 56;
  v26 = *a1;
  v27 = v20;
  v28 = (uint64_t **)&v26;
  _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_EdEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENSY_11result_typeERSY_(v19, &v28);
  v21 = (int *)(*(_QWORD *)a1[1] + 448);
  v22 = a1[2] + 64;
  v26 = *a1;
  v27 = v22;
  v28 = (uint64_t **)&v26;
  _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_EdEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENSY_11result_typeERSY_(v21, &v28);
  v23 = (int *)(*(_QWORD *)a1[1] + 504);
  v24 = a1[2] + 72;
  v26 = *a1;
  v27 = v24;
  v28 = (uint64_t **)&v26;
  _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_EdEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENSY_11result_typeERSY_(v23, &v28);
  result = *(__n128 *)a1;
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_QWORD *)(a2 + 16) = a1[2];
  return result;
}

uint64_t boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::variant(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  std::string *v6;
  __int128 v7;
  std::string *v9;

  v9 = (std::string *)(a1 + 8);
  v4 = *(_DWORD *)a2;
  v3 = a2 + 8;
  switch(v4 ^ (v4 >> 31))
  {
    case 0:
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
      v6 = (std::string *)(a1 + 16);
      if (*(char *)(a2 + 39) < 0)
      {
        std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(a2 + 16), *(_QWORD *)(a2 + 24));
      }
      else
      {
        v7 = *(_OWORD *)(a2 + 16);
        *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
        *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
      }
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      break;
    case 1:
      boost::detail::variant::copy_into::internal_visit<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>(&v9, v3);
      break;
    case 2:
      boost::detail::variant::copy_into::internal_visit<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>(&v9, v3);
      break;
    default:
      boost::detail::variant::forced_return<void>();
  }
  *(_DWORD *)a1 = *(_DWORD *)a2 ^ (*(int *)a2 >> 31);
  return a1;
}

void boost::detail::variant::copy_into::internal_visit<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>(std::string **a1, uint64_t a2)
{
  std::string *v3;
  std::string *v4;
  __int128 v5;

  v3 = *a1;
  v3->__r_.__value_.__r.__words[0] = 0;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>(v3, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  v4 = v3 + 1;
  if (*(char *)(a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 24), *(_QWORD *)(a2 + 32));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 24);
    v3[1].__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 40);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
}

void sub_243A48ED4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void boost::detail::variant::copy_into::internal_visit<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>(_QWORD *a1, uint64_t a2)
{
  _DWORD *v3;
  _DWORD *v4;
  std::string *v5;
  __int128 v6;

  v3 = (_DWORD *)*a1;
  v4 = (_DWORD *)*a1;
  *v4 = *(_DWORD *)a2;
  v5 = (std::string *)(v4 + 2);
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 8);
    v5->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 24);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  v3[8] = *(_DWORD *)(a2 + 32);
}

uint64_t boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>::regular(uint64_t result, int a2, __int128 *a3, double a4, double a5)
{
  __int128 v5;
  double v6;
  int8x16_t v7;
  uint64_t v8;
  std::logic_error v9;

  *(_DWORD *)result = a2;
  v5 = *a3;
  *(_QWORD *)(result + 24) = *((_QWORD *)a3 + 2);
  *(_OWORD *)(result + 8) = v5;
  *((_QWORD *)a3 + 1) = 0;
  *((_QWORD *)a3 + 2) = 0;
  *(_QWORD *)a3 = 0;
  v6 = a5 - a4;
  *(double *)(result + 32) = a4;
  *(double *)(result + 40) = v6;
  if (!*(_DWORD *)result)
  {
    std::logic_error::logic_error(&v9, "bins > 0 required");
    v9.__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    v7.i64[0] = (uint64_t)"PerfPowerServicesReader/external/lib/boostorg/histogram/include/boost/histogram/axis/regular.hpp";
    v7.i64[1] = (uint64_t)"boost::histogram::axis::regular<>::regular(transform_type, unsigned int, value_type, value_type"
                         ", metadata_type) [Value = double, Transform = boost::use_default, MetaData = boost::use_default"
                         ", Options = boost::use_default]";
    v8 = 158;
    boost::throw_exception<std::invalid_argument>(&v9, &v7);
  }
  if ((*(_QWORD *)&a4 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (*(_QWORD *)&v6 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    std::logic_error::logic_error(&v9, "forward transform of start or stop invalid");
    v9.__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    v7.i64[0] = (uint64_t)"PerfPowerServicesReader/external/lib/boostorg/histogram/include/boost/histogram/axis/regular.hpp";
    v7.i64[1] = (uint64_t)"boost::histogram::axis::regular<>::regular(transform_type, unsigned int, value_type, value_type"
                         ", metadata_type) [Value = double, Transform = boost::use_default, MetaData = boost::use_default"
                         ", Options = boost::use_default]";
    v8 = 161;
    boost::throw_exception<std::invalid_argument>(&v9, &v7);
  }
  if (v6 == 0.0)
  {
    std::logic_error::logic_error(&v9, "range of axis is zero");
    v9.__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    v7.i64[0] = (uint64_t)"PerfPowerServicesReader/external/lib/boostorg/histogram/include/boost/histogram/axis/regular.hpp";
    v7.i64[1] = (uint64_t)"boost::histogram::axis::regular<>::regular(transform_type, unsigned int, value_type, value_type"
                         ", metadata_type) [Value = double, Transform = boost::use_default, MetaData = boost::use_default"
                         ", Options = boost::use_default]";
    v8 = 163;
    boost::throw_exception<std::invalid_argument>(&v9, &v7);
  }
  return result;
}

void sub_243A490C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  MEMORY[0x2494FEA88](va);
  if (*(char *)(v5 + 31) < 0)
    operator delete(*(void **)(v5 + 8));
  _Unwind_Resume(a1);
}

uint64_t boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>::variable<std::__wrap_iter<double const*>,boost::histogram::detail::requires_iterator<std::__wrap_iter<double const*>,void>>(uint64_t a1, _QWORD *a2, double *a3, __int128 *a4)
{
  _QWORD *v5;
  __int128 v6;
  unint64_t v9;
  _QWORD *v10;
  double *v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  double *v21;
  double v22;
  double *v23;
  double *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  double *v30;
  uint64_t v31;
  int8x16_t v33;
  uint64_t v34;
  std::logic_error v35;

  *(_QWORD *)(a1 + 16) = 0;
  v5 = (_QWORD *)(a1 + 16);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = *a4;
  *(_QWORD *)(a1 + 40) = *((_QWORD *)a4 + 2);
  *(_OWORD *)(a1 + 24) = v6;
  *((_QWORD *)a4 + 1) = 0;
  *((_QWORD *)a4 + 2) = 0;
  *(_QWORD *)a4 = 0;
  if ((char *)a3 - (char *)a2 <= 15)
  {
    std::logic_error::logic_error(&v35, "bins > 0 required");
    v35.__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    v33.i64[0] = (uint64_t)"PerfPowerServicesReader/external/lib/boostorg/histogram/include/boost/histogram/axis/variable.hpp";
    v33.i64[1] = (uint64_t)"boost::histogram::axis::variable<>::variable(It, It, metadata_type, allocator_type) [Value = d"
                          "ouble, MetaData = boost::use_default, Options = boost::use_default, Allocator = std::allocator"
                          "<double>, It = std::__wrap_iter<const double *>]";
    v34 = 68;
    boost::throw_exception<std::invalid_argument>(&v35, &v33);
  }
  std::vector<double>::reserve((void **)a1, (unint64_t)((char *)a3 - (char *)a2) >> 3);
  v10 = *(_QWORD **)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v10 >= v9)
  {
    v12 = *(_QWORD **)a1;
    v13 = ((uint64_t)v10 - *(_QWORD *)a1) >> 3;
    v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 61)
      std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::__throw_length_error[abi:ne180100]();
    v15 = v9 - (_QWORD)v12;
    if (v15 >> 2 > v14)
      v14 = v15 >> 2;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
      v16 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v16 = v14;
    if (v16)
    {
      v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v5, v16);
      v12 = *(_QWORD **)a1;
      v10 = *(_QWORD **)(a1 + 8);
    }
    else
    {
      v17 = 0;
    }
    v18 = &v17[8 * v13];
    v19 = &v17[8 * v16];
    *(_QWORD *)v18 = *a2;
    v11 = (double *)(v18 + 8);
    while (v10 != v12)
    {
      v20 = *--v10;
      *((_QWORD *)v18 - 1) = v20;
      v18 -= 8;
    }
    *(_QWORD *)a1 = v18;
    *(_QWORD *)(a1 + 8) = v11;
    *(_QWORD *)(a1 + 16) = v19;
    if (v12)
      operator delete(v12);
  }
  else
  {
    *v10 = *a2;
    v11 = (double *)(v10 + 1);
  }
  v21 = (double *)(a2 + 1);
  for (*(_QWORD *)(a1 + 8) = v11; v21 != a3; v11 = v23)
  {
    v22 = *v21;
    if (*v21 <= *(v11 - 1))
    {
      std::logic_error::logic_error(&v35, "input sequence must be strictly ascending");
      v35.__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
      v33.i64[0] = (uint64_t)"PerfPowerServicesReader/external/lib/boostorg/histogram/include/boost/histogram/axis/variable.hpp";
      v33.i64[1] = (uint64_t)"boost::histogram::axis::variable<>::variable(It, It, metadata_type, allocator_type) [Value ="
                            " double, MetaData = boost::use_default, Options = boost::use_default, Allocator = std::alloc"
                            "ator<double>, It = std::__wrap_iter<const double *>]";
      v34 = 76;
      boost::throw_exception<std::invalid_argument>(&v35, &v33);
    }
    if ((unint64_t)v11 >= *v5)
    {
      v24 = *(double **)a1;
      v25 = ((uint64_t)v11 - *(_QWORD *)a1) >> 3;
      v26 = v25 + 1;
      if ((unint64_t)(v25 + 1) >> 61)
        std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::__throw_length_error[abi:ne180100]();
      v27 = *v5 - (_QWORD)v24;
      if (v27 >> 2 > v26)
        v26 = v27 >> 2;
      if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8)
        v28 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v28 = v26;
      if (v28)
      {
        v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v5, v28);
        v24 = *(double **)a1;
        v11 = *(double **)(a1 + 8);
        v22 = *v21;
      }
      else
      {
        v29 = 0;
      }
      v30 = (double *)&v29[8 * v25];
      *v30 = v22;
      v23 = v30 + 1;
      while (v11 != v24)
      {
        v31 = *((_QWORD *)v11-- - 1);
        *((_QWORD *)v30-- - 1) = v31;
      }
      *(_QWORD *)a1 = v30;
      *(_QWORD *)(a1 + 8) = v23;
      *(_QWORD *)(a1 + 16) = &v29[8 * v28];
      if (v24)
        operator delete(v24);
    }
    else
    {
      *v11 = v22;
      v23 = v11 + 1;
    }
    ++v21;
    *(_QWORD *)(a1 + 8) = v23;
  }
  return a1;
}

void sub_243A493BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  MEMORY[0x2494FEA88](va);
  boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>::~variable(v5);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<int,std::vector<std::string>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::string>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::string>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  uint64_t **v9;
  int v10;
  _DWORD *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x40uLL);
    v11[8] = **a4;
    *((_QWORD *)v11 + 6) = 0;
    *((_QWORD *)v11 + 7) = 0;
    *((_QWORD *)v11 + 5) = 0;
    std::__tree<std::__value_type<int,std::vector<std::string>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::string>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::string>>>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<int,std::vector<std::string>>,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  void **v3;

  if (*(_BYTE *)(a1 + 8))
  {
    v3 = __p + 5;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
  if (__p)
    operator delete(__p);
}

void std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(std::vector<std::string> *this, std::string *__str, __int128 *a3, unint64_t a4)
{
  std::__compressed_pair<std::string *> *p_end_cap;
  std::string *begin;
  unint64_t v10;
  unint64_t v11;
  std::string *v12;
  std::string *v13;
  std::string *v14;
  std::string *v15;
  std::vector<std::string>::pointer end;

  p_end_cap = &this->__end_cap_;
  begin = this->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3) < a4)
  {
    std::vector<std::string>::__vdeallocate(this);
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::__throw_length_error[abi:ne180100]();
    v10 = 0x5555555555555556 * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3) >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v10;
    std::vector<std::string>::__vallocate[abi:ne180100](this, v11);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)p_end_cap, (__int128 *)__str, a3, this->__end_);
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)begin) >> 3) < a4)
  {
    v13 = (std::string *)((char *)__str + 8 * (((char *)this->__end_ - (char *)begin) >> 3));
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string *,std::string *,std::string *,0>(__str, v13, begin);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)p_end_cap, (__int128 *)v13, a3, this->__end_);
LABEL_11:
    this->__end_ = v12;
    return;
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string *,std::string *,std::string *,0>(__str, (std::string *)a3, begin);
  v15 = v14;
  end = this->__end_;
  if (end != v14)
  {
    do
    {
      if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0)
        operator delete(end[-1].__r_.__value_.__l.__data_);
      --end;
    }
    while (end != v15);
  }
  this->__end_ = v15;
}

void sub_243A49668(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_243A49670(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<std::string>::__vdeallocate(std::vector<std::string> *this)
{
  if (this->__begin_)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)this);
    operator delete(this->__begin_);
    this->__begin_ = 0;
    this->__end_ = 0;
    this->__end_cap_.__value_ = 0;
  }
}

std::string *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string *,std::string *,std::string *,0>(std::string *__str, std::string *a2, std::string *this)
{
  const std::string *v4;

  v4 = __str;
  if (__str != a2)
  {
    do
      std::string::operator=(this++, v4++);
    while (v4 != a2);
    return a2;
  }
  return (std::string *)v4;
}

__n128 boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>::integer(uint64_t a1, int a2, int a3, __n128 *a4)
{
  __n128 result;
  int8x16_t v5;
  uint64_t v6;
  std::logic_error v7;

  *(_DWORD *)a1 = a3 - a2;
  result = *a4;
  *(_QWORD *)(a1 + 24) = a4[1].n128_u64[0];
  *(__n128 *)(a1 + 8) = result;
  a4->n128_u64[1] = 0;
  a4[1].n128_u64[0] = 0;
  a4->n128_u64[0] = 0;
  *(_DWORD *)(a1 + 32) = a2;
  if (a3 <= a2)
  {
    std::logic_error::logic_error(&v7, "bins > 0 required");
    v7.__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    v5.i64[0] = (uint64_t)"PerfPowerServicesReader/external/lib/boostorg/histogram/include/boost/histogram/axis/integer.hpp";
    v5.i64[1] = (uint64_t)"boost::histogram::axis::integer<int, boost::use_default, boost::histogram::axis::option::bit<1>"
                         ">::integer(value_type, value_type, metadata_type) [Value = int, MetaData = boost::use_default, "
                         "Options = boost::histogram::axis::option::bit<1>]";
    v6 = 64;
    boost::throw_exception<std::invalid_argument>(&v7, &v5);
  }
  return result;
}

char *std::vector<pps::AxisEnum>::__assign_with_size[abi:ne180100]<pps::AxisEnum*,pps::AxisEnum*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 2)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 62)
      std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 1;
    if (v8 >> 1 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL)
      v11 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<pps::AxisEnum>::__vallocate[abi:ne180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 2;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

char *std::vector<pps::AxisEnum>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 62)
    std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pps::AxisEnum>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

uint64_t **std::__tree<std::__value_type<int,std::vector<std::string>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::string>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::string>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<int,std::vector<std::string>>,std::__tree_node<std::__value_type<int,std::vector<std::string>>,void *> *,long>>(uint64_t **result, _QWORD *a2, _QWORD *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t *v16;
  _QWORD v17[2];

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v14 = result;
    v15 = v8;
    v16 = v8;
    if (v8)
    {
      v15 = std::__tree<std::__value_type<int,std::vector<std::string>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::string>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::string>>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = a2;
        do
        {
          v17[0] = v8 + 4;
          v17[1] = v8 + 5;
          std::pair<int &,std::vector<std::string> &>::operator=[abi:ne180100]<int const,std::vector<std::string>,(void *)0>((uint64_t)v17, (uint64_t)(v9 + 4));
          std::__tree<std::__value_type<int,std::vector<std::string>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::string>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::string>>>>::__node_insert_multi(v5, (uint64_t)v16);
          v16 = v15;
          if (v15)
            v15 = std::__tree<std::__value_type<int,std::vector<std::string>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::string>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::string>>>>::_DetachedTreeCache::__detach_next((uint64_t)v15);
          v10 = (_QWORD *)v9[1];
          if (v10)
          {
            do
            {
              a2 = v10;
              v10 = (_QWORD *)*v10;
            }
            while (v10);
          }
          else
          {
            do
            {
              a2 = (_QWORD *)v9[2];
              v11 = *a2 == (_QWORD)v9;
              v9 = a2;
            }
            while (!v11);
          }
          v8 = v16;
          if (v16)
            v11 = a2 == a3;
          else
            v11 = 1;
          v9 = a2;
        }
        while (!v11);
      }
    }
    result = (uint64_t **)std::__tree<std::__value_type<int,std::vector<std::string>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::string>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::string>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v14);
  }
  if (a2 != a3)
  {
    do
    {
      result = (uint64_t **)std::__tree<std::__value_type<int,std::vector<std::string>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::string>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::string>>>>::__emplace_multi<std::pair<int const,std::vector<std::string>> const&>((uint64_t)v5, (uint64_t)(a2 + 4));
      v12 = (_QWORD *)a2[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)a2[2];
          v11 = *v13 == (_QWORD)a2;
          a2 = v13;
        }
        while (!v11);
      }
      a2 = v13;
    }
    while (v13 != a3);
  }
  return result;
}

void sub_243A49A80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__tree<std::__value_type<int,std::vector<std::string>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::string>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::string>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<std::__value_type<int,std::vector<std::string>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::string>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::string>>>>::__node_insert_multi(uint64_t **a1, uint64_t a2)
{
  uint64_t **v3;
  uint64_t *v4;
  uint64_t **v5;

  v3 = a1 + 1;
  v4 = a1[1];
  if (v4)
  {
    do
    {
      while (1)
      {
        v3 = (uint64_t **)v4;
        if (*(_DWORD *)(a2 + 32) >= *((_DWORD *)v4 + 8))
          break;
        v4 = (uint64_t *)*v4;
        v5 = v3;
        if (!*v3)
          goto LABEL_8;
      }
      v4 = (uint64_t *)v4[1];
    }
    while (v4);
    v5 = v3 + 1;
  }
  else
  {
    v5 = a1 + 1;
  }
LABEL_8:
  std::__tree<std::__value_type<int,std::vector<std::string>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::string>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::string>>>>::__insert_node_at(a1, (uint64_t)v3, v5, (uint64_t *)a2);
  return a2;
}

uint64_t std::pair<int &,std::vector<std::string> &>::operator=[abi:ne180100]<int const,std::vector<std::string>,(void *)0>(uint64_t a1, uint64_t a2)
{
  std::vector<std::string> *v3;
  _DWORD *v4;

  v4 = *(_DWORD **)a1;
  v3 = *(std::vector<std::string> **)(a1 + 8);
  *v4 = *(_DWORD *)a2;
  if (v3 != (std::vector<std::string> *)(a2 + 8))
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(v3, *(std::string **)(a2 + 8), *(__int128 **)(a2 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3));
  return a1;
}

_QWORD *std::__tree<std::__value_type<int,std::vector<std::string>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::string>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::string>>>>::_DetachedTreeCache::__detach_next(uint64_t a1)
{
  _QWORD *result;
  _QWORD *v3;
  _QWORD *v4;

  result = *(_QWORD **)(a1 + 16);
  if (result)
  {
    v3 = (_QWORD *)*result;
    if (*result == a1)
    {
      *result = 0;
      while (1)
      {
        v4 = (_QWORD *)result[1];
        if (!v4)
          break;
        do
        {
          result = v4;
          v4 = (_QWORD *)*v4;
        }
        while (v4);
      }
    }
    else
    {
      for (result[1] = 0; v3; v3 = (_QWORD *)result[1])
      {
        do
        {
          result = v3;
          v3 = (_QWORD *)*v3;
        }
        while (v3);
      }
    }
  }
  return result;
}

uint64_t std::__tree<std::__value_type<int,std::vector<std::string>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::string>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::string>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  std::__tree<std::__value_type<int,std::vector<std::string>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::string>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::string>>>>::destroy(*(_QWORD *)a1, *(char **)(a1 + 16));
  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 16);
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = *(_QWORD *)(v3 + 16);
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<int,std::vector<std::string>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::string>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::string>>>>::destroy(*(_QWORD *)a1, (char *)v2);
  }
  return a1;
}

uint64_t *std::__tree<std::__value_type<int,std::vector<std::string>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::string>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::string>>>>::__emplace_multi<std::pair<int const,std::vector<std::string>> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t **v3;
  uint64_t *v4;
  uint64_t **v5;
  uint64_t *v7;

  std::__tree<std::__value_type<int,std::vector<std::string>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::string>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::string>>>>::__construct_node<std::pair<int const,std::vector<std::string>> const&>(a1, a2, (uint64_t)&v7);
  v3 = (uint64_t **)(a1 + 8);
  v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v3 = (uint64_t **)v4;
        if (*((_DWORD *)v7 + 8) >= *((_DWORD *)v4 + 8))
          break;
        v4 = (uint64_t *)*v4;
        v5 = v3;
        if (!*v3)
          goto LABEL_8;
      }
      v4 = (uint64_t *)v4[1];
    }
    while (v4);
    v5 = v3 + 1;
  }
  else
  {
    v5 = (uint64_t **)(a1 + 8);
  }
LABEL_8:
  std::__tree<std::__value_type<int,std::vector<std::string>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::string>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::string>>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v3, v5, v7);
  return v7;
}

std::string *std::__tree<std::__value_type<int,std::vector<std::string>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::string>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::string>>>>::__construct_node<std::pair<int const,std::vector<std::string>> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x40uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  *((_DWORD *)v6 + 8) = *(_DWORD *)a2;
  *((_QWORD *)v6 + 6) = 0;
  *((_QWORD *)v6 + 7) = 0;
  *((_QWORD *)v6 + 5) = 0;
  result = std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(v6 + 40), *(__int128 **)(a2 + 8), *(__int128 **)(a2 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3));
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_243A49D04(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<int,std::vector<std::string>>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t boost::histogram::detail::axes_equal<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>(int **a1, uint64_t *a2)
{
  int *v2;
  int *v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int **v7;

  v2 = *a1;
  v3 = a1[1];
  v4 = *a2;
  if ((char *)v3 - (char *)*a1 != a2[1] - *a2)
    return 0;
  if (v2 == v3)
    return 1;
  do
  {
    v6 = v4;
    v7 = (int **)&v6;
    result = _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNKS2_7variantIJS5_SA_SF_EEeqIJS5_SA_SF_EEEbRKNSL_IJDpT_EEEEUlRKT_E_RKSG_EEEENST_11result_typeERST_(v2, &v7);
    if (!(_DWORD)result)
      break;
    v2 += 14;
    v4 += 56;
  }
  while (v2 != v3);
  return result;
}

uint64_t boost::histogram::unlimited_storage<std::allocator<char>>::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  if (*(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
    return 0;
  v3 = a2;
  return _ZNK5boost9histogram17unlimited_storageINSt3__19allocatorIcEEE11buffer_type5applyIZNKS5_eqERKS5_EUlPKT_E_JEEEDcOSA_DpOT0_(a1, &v3);
}

uint64_t _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNKS2_7variantIJS5_SA_SF_EEeqIJS5_SA_SF_EEEbRKNSL_IJDpT_EEEEUlRKT_E_RKSG_EEEENST_11result_typeERST_(int *a1, int ***a2)
{
  uint64_t v2;
  uint64_t result;

  v2 = (uint64_t)(a1 + 2);
  switch(*a1 ^ (*a1 >> 31))
  {
    case 0:
      result = (uint64_t)_ZNK5boost6detail7variant15result_wrapper1IZNKS_9histogram4axis7variantIJNS4_7regularIdNS_11use_defaultES7_S7_EENS4_8variableIdS7_S7_NSt3__19allocatorIdEEEENS4_7integerIiS7_NS4_6option3bitILj1EEEEEEEeqIJS8_SD_SI_EEEbRKNS5_IJDpT_EEEEUlRKT_E_RKNS_7variantIS8_JSD_SI_EEEEclIRKS8_EEbOSQ_(a2, v2);
      break;
    case 1:
      result = (uint64_t)_ZNK5boost6detail7variant15result_wrapper1IZNKS_9histogram4axis7variantIJNS4_7regularIdNS_11use_defaultES7_S7_EENS4_8variableIdS7_S7_NSt3__19allocatorIdEEEENS4_7integerIiS7_NS4_6option3bitILj1EEEEEEEeqIJS8_SD_SI_EEEbRKNS5_IJDpT_EEEEUlRKT_E_RKNS_7variantIS8_JSD_SI_EEEEclIRKSD_EEbOSQ_(a2, v2);
      break;
    case 2:
      result = boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::operator==<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>(**a2, v2);
      break;
    default:
      boost::detail::variant::forced_return<void>();
  }
  return result;
}

int *_ZNK5boost6detail7variant15result_wrapper1IZNKS_9histogram4axis7variantIJNS4_7regularIdNS_11use_defaultES7_S7_EENS4_8variableIdS7_S7_NSt3__19allocatorIdEEEENS4_7integerIiS7_NS4_6option3bitILj1EEEEEEEeqIJS8_SD_SI_EEEbRKNS5_IJDpT_EEEEUlRKT_E_RKNS_7variantIS8_JSD_SI_EEEEclIRKS8_EEbOSQ_(int ***a1, uint64_t a2)
{
  int *result;

  result = boost::histogram::axis::get_if<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>(**a1);
  if (result)
    return (int *)boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>::operator==<double,boost::use_default,boost::use_default,boost::use_default>((uint64_t)result, a2);
  return result;
}

int *boost::histogram::axis::get_if<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>(int *result)
{
  if (result)
    return boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::apply_visitor<boost::detail::variant::get_visitor<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default> const>>(result);
  return result;
}

_DWORD *boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::apply_visitor<boost::detail::variant::get_visitor<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default> const>>(int *a1)
{
  _DWORD *result;
  int v2;

  v2 = *a1;
  result = a1 + 2;
  switch(v2 ^ (v2 >> 31))
  {
    case 0:
      return result;
    case 1:
    case 2:
      result = 0;
      break;
    default:
      boost::detail::variant::forced_return<void>();
  }
  return result;
}

uint64_t boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>::operator==<double,boost::use_default,boost::use_default,boost::use_default>(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_DWORD *)a1 != *(_DWORD *)a2)
    return 0;
  result = boost::histogram::detail::relaxed_equal<std::string>((unsigned __int8 *)(a1 + 8), (unsigned __int8 *)(a2 + 8));
  if (!(_DWORD)result)
    return result;
  return *(double *)(a1 + 32) == *(double *)(a2 + 32) && *(double *)(a1 + 40) == *(double *)(a2 + 40);
}

uint64_t boost::histogram::detail::relaxed_equal<std::string>(unsigned __int8 *a1, unsigned __int8 *a2)
{
  char v3;
  char v4;

  return _ZN5boost9histogram6detail11static_if_cILb1EZNS1_13relaxed_equalINSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEEbRKT_SD_EUlSD_RKT0_E_ZNS3_ISA_EEbSD_SD_EUlSD_SG_E0_JRKSA_SK_EEEDcOSE_OT1_DpOT2_((uint64_t)&v4, (uint64_t)&v3, a1, a2);
}

uint64_t _ZN5boost9histogram6detail11static_if_cILb1EZNS1_13relaxed_equalINSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEEbRKT_SD_EUlSD_RKT0_E_ZNS3_ISA_EEbSD_SD_EUlSD_SG_E0_JRKSA_SK_EEEDcOSE_OT1_DpOT2_(uint64_t a1, uint64_t a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unsigned __int8 *v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  BOOL v15;
  uint64_t result;

  v4 = a3[23];
  if ((v4 & 0x80u) == 0)
    v5 = a3[23];
  else
    v5 = *((_QWORD *)a3 + 1);
  v6 = a4[23];
  v7 = (char)v6;
  if ((v6 & 0x80u) != 0)
    v6 = *((_QWORD *)a4 + 1);
  if (v5 != v6)
    return 0;
  if (v7 >= 0)
    v8 = a4;
  else
    v8 = *(unsigned __int8 **)a4;
  if ((v4 & 0x80) != 0)
    return memcmp(*(const void **)a3, v8, *((_QWORD *)a3 + 1)) == 0;
  if (!a3[23])
    return 1;
  v9 = v4 - 1;
  do
  {
    v11 = *a3++;
    v10 = v11;
    v13 = *v8++;
    v12 = v13;
    v15 = v9-- != 0;
    result = v10 == v12;
  }
  while (v10 == v12 && v15);
  return result;
}

int *_ZNK5boost6detail7variant15result_wrapper1IZNKS_9histogram4axis7variantIJNS4_7regularIdNS_11use_defaultES7_S7_EENS4_8variableIdS7_S7_NSt3__19allocatorIdEEEENS4_7integerIiS7_NS4_6option3bitILj1EEEEEEEeqIJS8_SD_SI_EEEbRKNS5_IJDpT_EEEEUlRKT_E_RKNS_7variantIS8_JSD_SI_EEEEclIRKSD_EEbOSQ_(int ***a1, uint64_t a2)
{
  int *result;

  result = boost::histogram::axis::get_if<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>(**a1);
  if (result)
    return (int *)boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>::operator==<double,boost::use_default,boost::use_default,std::allocator<double>>((uint64_t)result, a2);
  return result;
}

int *boost::histogram::axis::get_if<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>(int *result)
{
  if (result)
    return boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::apply_visitor<boost::detail::variant::get_visitor<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>> const>>(result);
  return result;
}

_DWORD *boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::apply_visitor<boost::detail::variant::get_visitor<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>> const>>(int *a1)
{
  _DWORD *v1;

  v1 = 0;
  switch(*a1 ^ (*a1 >> 31))
  {
    case 0:
    case 2:
      return v1;
    case 1:
      v1 = a1 + 2;
      break;
    default:
      boost::detail::variant::forced_return<void>();
  }
  return v1;
}

uint64_t boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>::operator==<double,boost::use_default,boost::use_default,std::allocator<double>>(uint64_t a1, uint64_t a2)
{
  double *v2;
  double *v3;
  double *v4;
  double *v5;

  v2 = *(double **)a1;
  v3 = *(double **)(a1 + 8);
  v4 = *(double **)a2;
  v5 = *(double **)(a2 + 8);
  if ((char *)v3 - *(_QWORD *)a1 == (char *)v5 - *(_QWORD *)a2)
  {
    if (v2 == v3 || v4 == v5)
    {
LABEL_7:
      if (v2 == v3 && v4 == v5)
        return boost::histogram::detail::relaxed_equal<std::string>((unsigned __int8 *)(a1 + 24), (unsigned __int8 *)(a2 + 24));
    }
    else
    {
      while (*v2 == *v4)
      {
        ++v2;
        ++v4;
        if (v2 == v3 || v4 == v5)
          goto LABEL_7;
      }
    }
  }
  return 0;
}

uint64_t boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::operator==<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>(int *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;

  result = (uint64_t)boost::histogram::axis::get_if<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>,boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>(a1);
  if (result)
  {
    v4 = result;
    if (*(_DWORD *)result == *(_DWORD *)a2)
    {
      result = boost::histogram::detail::relaxed_equal<std::string>((unsigned __int8 *)(result + 8), (unsigned __int8 *)(a2 + 8));
      if ((_DWORD)result)
        return *(_DWORD *)(v4 + 32) == *(_DWORD *)(a2 + 32);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

int *boost::histogram::axis::get_if<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>,boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>(int *result)
{
  if (result)
    return boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::apply_visitor<boost::detail::variant::get_visitor<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>> const>>(result);
  return result;
}

int *boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::apply_visitor<boost::detail::variant::get_visitor<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>> const>>(int *a1)
{
  unsigned int v1;
  BOOL v2;
  unsigned int v3;

  v1 = *a1 ^ (*a1 >> 31);
  v2 = v1 >= 2;
  v3 = v1 - 2;
  if (!v2)
    return 0;
  if (v3)
    boost::detail::variant::forced_return<void>();
  return a1 + 2;
}

uint64_t _ZNK5boost9histogram17unlimited_storageINSt3__19allocatorIcEEE11buffer_type5applyIZNKS5_eqERKS5_EUlPKT_E_JEEEDcOSA_DpOT0_(uint64_t a1, uint64_t *a2)
{
  unsigned __int8 *v2;
  uint64_t v3;
  uint64_t result;
  unsigned __int8 *v5;
  uint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;

  switch(*(_BYTE *)(a1 + 16))
  {
    case 0:
      v2 = *(unsigned __int8 **)(a1 + 24);
      v3 = *a2;
      v15 = v2;
      v16 = v3;
      result = _ZNK5boost9histogram17unlimited_storageINSt3__19allocatorIcEEE11buffer_type5applyIZZNKS5_eqERKS5_ENKUlPKT_E_clIhEEDaSC_EUlSC_E_JEEEDcOSA_DpOT0_(v3, &v15);
      break;
    case 1:
      v7 = *(unsigned __int8 **)(a1 + 24);
      v8 = *a2;
      v15 = v7;
      v16 = v8;
      result = _ZNK5boost9histogram17unlimited_storageINSt3__19allocatorIcEEE11buffer_type5applyIZZNKS5_eqERKS5_ENKUlPKT_E_clItEEDaSC_EUlSC_E_JEEEDcOSA_DpOT0_(v8, (unsigned __int16 **)&v15);
      break;
    case 2:
      v9 = *(unsigned __int8 **)(a1 + 24);
      v10 = *a2;
      v15 = v9;
      v16 = v10;
      result = _ZNK5boost9histogram17unlimited_storageINSt3__19allocatorIcEEE11buffer_type5applyIZZNKS5_eqERKS5_ENKUlPKT_E_clIjEEDaSC_EUlSC_E_JEEEDcOSA_DpOT0_(v10, (unsigned int **)&v15);
      break;
    case 3:
      v11 = *(unsigned __int8 **)(a1 + 24);
      v12 = *a2;
      v15 = v11;
      v16 = v12;
      result = _ZNK5boost9histogram17unlimited_storageINSt3__19allocatorIcEEE11buffer_type5applyIZZNKS5_eqERKS5_ENKUlPKT_E_clIyEEDaSC_EUlSC_E_JEEEDcOSA_DpOT0_(v12, (uint64_t)&v15);
      break;
    case 4:
      v13 = *(unsigned __int8 **)(a1 + 24);
      v14 = *a2;
      v15 = v13;
      v16 = v14;
      result = _ZNK5boost9histogram17unlimited_storageINSt3__19allocatorIcEEE11buffer_type5applyIZZNKS5_eqERKS5_ENKUlPKT_E_clINS0_6detail6mp_intINS3_IyEEEEEEDaSC_EUlSC_E_JEEEDcOSA_DpOT0_(v14, (uint64_t *)&v15);
      break;
    default:
      v5 = *(unsigned __int8 **)(a1 + 24);
      v6 = *a2;
      v15 = v5;
      v16 = v6;
      result = _ZNK5boost9histogram17unlimited_storageINSt3__19allocatorIcEEE11buffer_type5applyIZZNKS5_eqERKS5_ENKUlPKT_E_clIdEEDaSC_EUlSC_E_JEEEDcOSA_DpOT0_(v6, (uint64_t)&v15);
      break;
  }
  return result;
}

uint64_t _ZNK5boost9histogram17unlimited_storageINSt3__19allocatorIcEEE11buffer_type5applyIZZNKS5_eqERKS5_ENKUlPKT_E_clIhEEDaSC_EUlSC_E_JEEEDcOSA_DpOT0_(uint64_t a1, unsigned __int8 **a2)
{
  uint64_t v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  uint64_t result;
  uint64_t v11;
  unsigned __int8 *v12;
  double *v13;
  uint64_t v14;
  double v15;
  double v16;
  _BOOL4 v17;
  uint64_t v19;
  unsigned __int8 *v20;
  unsigned __int16 *v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  uint64_t v27;
  unsigned __int8 *v28;
  int *v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  uint64_t v35;
  unsigned __int8 *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v43;
  unsigned __int8 *v44;
  _QWORD *v45;
  uint64_t v46;

  switch(*(_BYTE *)(a1 + 16))
  {
    case 0:
      v2 = *((_QWORD *)a2[1] + 1);
      if (!v2)
        goto LABEL_50;
      v3 = *a2;
      v4 = *(unsigned __int8 **)(a1 + 24);
      v5 = v2 - 1;
      do
      {
        v7 = *v3++;
        v6 = v7;
        v8 = *v4++;
        result = v6 == v8;
      }
      while (v6 == v8 && v5-- != 0);
      break;
    case 1:
      v19 = *((_QWORD *)a2[1] + 1);
      if (!v19)
        goto LABEL_50;
      v20 = *a2;
      v21 = *(unsigned __int16 **)(a1 + 24);
      v22 = v19 - 1;
      do
      {
        v24 = *v20++;
        v23 = v24;
        v25 = *v21++;
        result = v25 == v23;
      }
      while (v25 == v23 && v22-- != 0);
      break;
    case 2:
      v27 = *((_QWORD *)a2[1] + 1);
      if (!v27)
        goto LABEL_50;
      v28 = *a2;
      v29 = *(int **)(a1 + 24);
      v30 = v27 - 1;
      do
      {
        v32 = *v28++;
        v31 = v32;
        v33 = *v29++;
        result = v33 == v31;
      }
      while (v33 == v31 && v30-- != 0);
      break;
    case 3:
      v35 = *((_QWORD *)a2[1] + 1);
      if (!v35)
        goto LABEL_50;
      v36 = *a2;
      v37 = *(uint64_t **)(a1 + 24);
      v38 = v35 - 1;
      do
      {
        v40 = *v36++;
        v39 = v40;
        v41 = *v37++;
        result = v41 == v39;
      }
      while (v41 == v39 && v38-- != 0);
      break;
    case 4:
      v43 = *((_QWORD *)a2[1] + 1);
      if (!v43)
        goto LABEL_50;
      v44 = *a2;
      v45 = *(_QWORD **)(a1 + 24);
      v46 = v43 - 1;
      do
      {
        result = boost::histogram::detail::mp_int<std::allocator<unsigned long long>>::operator==<unsigned char>(v45, v44);
        if (!(_DWORD)result)
          break;
        ++v44;
        v45 += 3;
      }
      while (v46--);
      break;
    default:
      v11 = *((_QWORD *)a2[1] + 1);
      if (v11)
      {
        v12 = *a2;
        v13 = *(double **)(a1 + 24);
        v14 = v11 - 1;
        do
        {
          v15 = *v13++;
          v16 = v15;
          v17 = v15 >= 0.0;
          LODWORD(v15) = *v12++;
          result = v16 == (double)LODWORD(v15) && v17;
        }
        while ((_DWORD)result == 1 && v14-- != 0);
      }
      else
      {
LABEL_50:
        result = 1;
      }
      break;
  }
  return result;
}

BOOL boost::histogram::detail::mp_int<std::allocator<unsigned long long>>::operator==<unsigned char>(_QWORD *a1, unsigned __int8 *a2)
{
  uint64_t v2;

  v2 = a1[1] - *a1;
  if (!v2)
    __assert_rtn("operator==", "unlimited_storage.hpp", 280, "data.size() > 0u");
  return v2 == 8 && *(_QWORD *)*a1 == *a2;
}

uint64_t _ZNK5boost9histogram17unlimited_storageINSt3__19allocatorIcEEE11buffer_type5applyIZZNKS5_eqERKS5_ENKUlPKT_E_clItEEDaSC_EUlSC_E_JEEEDcOSA_DpOT0_(uint64_t a1, unsigned __int16 **a2)
{
  uint64_t v2;
  unsigned __int16 *v3;
  unsigned __int8 *v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  uint64_t result;
  BOOL v10;
  uint64_t v11;
  unsigned __int16 *v12;
  double *v13;
  uint64_t v14;
  double v15;
  double v16;
  _BOOL4 v17;
  BOOL v18;
  uint64_t v19;
  unsigned __int16 *v20;
  unsigned __int16 *v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  BOOL v26;
  uint64_t v27;
  unsigned __int16 *v28;
  int *v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  BOOL v34;
  uint64_t v35;
  unsigned __int16 *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  unsigned __int16 *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;

  switch(*(_BYTE *)(a1 + 16))
  {
    case 0:
      v2 = *((_QWORD *)a2[1] + 1);
      if (!v2)
        goto LABEL_50;
      v3 = *a2;
      v4 = *(unsigned __int8 **)(a1 + 24);
      v5 = 2 * v2 - 2;
      do
      {
        v7 = *v3++;
        v6 = v7;
        v8 = *v4++;
        result = v6 == v8;
        v10 = v6 != v8 || v5 == 0;
        v5 -= 2;
      }
      while (!v10);
      break;
    case 1:
      v19 = *((_QWORD *)a2[1] + 1);
      if (!v19)
        goto LABEL_50;
      v20 = *a2;
      v21 = *(unsigned __int16 **)(a1 + 24);
      v22 = 2 * v19 - 2;
      do
      {
        v24 = *v20++;
        v23 = v24;
        v25 = *v21++;
        result = v23 == v25;
        v26 = v23 != v25 || v22 == 0;
        v22 -= 2;
      }
      while (!v26);
      break;
    case 2:
      v27 = *((_QWORD *)a2[1] + 1);
      if (!v27)
        goto LABEL_50;
      v28 = *a2;
      v29 = *(int **)(a1 + 24);
      v30 = 2 * v27 - 2;
      do
      {
        v32 = *v28++;
        v31 = v32;
        v33 = *v29++;
        result = v33 == v31;
        v34 = v33 != v31 || v30 == 0;
        v30 -= 2;
      }
      while (!v34);
      break;
    case 3:
      v35 = *((_QWORD *)a2[1] + 1);
      if (!v35)
        goto LABEL_50;
      v36 = *a2;
      v37 = *(uint64_t **)(a1 + 24);
      v38 = 2 * v35 - 2;
      do
      {
        v40 = *v36++;
        v39 = v40;
        v41 = *v37++;
        result = v41 == v39;
        v42 = v41 != v39 || v38 == 0;
        v38 -= 2;
      }
      while (!v42);
      break;
    case 4:
      v43 = *((_QWORD *)a2[1] + 1);
      if (!v43)
        goto LABEL_50;
      v44 = *a2;
      v45 = *(_QWORD **)(a1 + 24);
      v46 = 2 * v43 - 2;
      do
      {
        result = boost::histogram::detail::mp_int<std::allocator<unsigned long long>>::operator==<unsigned short>(v45, v44);
        if (!(_DWORD)result)
          break;
        ++v44;
        v45 += 3;
        v47 = v46;
        v46 -= 2;
      }
      while (v47);
      break;
    default:
      v11 = *((_QWORD *)a2[1] + 1);
      if (v11)
      {
        v12 = *a2;
        v13 = *(double **)(a1 + 24);
        v14 = 2 * v11 - 2;
        do
        {
          v15 = *v13++;
          v16 = v15;
          v17 = v15 >= 0.0;
          LODWORD(v15) = *v12++;
          result = v16 == (double)LODWORD(v15) && v17;
          v18 = (_DWORD)result != 1 || v14 == 0;
          v14 -= 2;
        }
        while (!v18);
      }
      else
      {
LABEL_50:
        result = 1;
      }
      break;
  }
  return result;
}

BOOL boost::histogram::detail::mp_int<std::allocator<unsigned long long>>::operator==<unsigned short>(_QWORD *a1, unsigned __int16 *a2)
{
  uint64_t v2;

  v2 = a1[1] - *a1;
  if (!v2)
    __assert_rtn("operator==", "unlimited_storage.hpp", 280, "data.size() > 0u");
  return v2 == 8 && *(_QWORD *)*a1 == *a2;
}

uint64_t _ZNK5boost9histogram17unlimited_storageINSt3__19allocatorIcEEE11buffer_type5applyIZZNKS5_eqERKS5_ENKUlPKT_E_clIjEEDaSC_EUlSC_E_JEEEDcOSA_DpOT0_(uint64_t a1, unsigned int **a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned __int8 *v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  uint64_t result;
  BOOL v10;
  uint64_t v11;
  unsigned int *v12;
  double *v13;
  uint64_t v14;
  double v15;
  double v16;
  _BOOL4 v17;
  BOOL v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned __int16 *v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  BOOL v26;
  uint64_t v27;
  unsigned int *v28;
  int *v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  BOOL v34;
  uint64_t v35;
  unsigned int *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  unsigned int *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;

  switch(*(_BYTE *)(a1 + 16))
  {
    case 0:
      v2 = *((_QWORD *)a2[1] + 1);
      if (!v2)
        goto LABEL_50;
      v3 = *a2;
      v4 = *(unsigned __int8 **)(a1 + 24);
      v5 = 4 * v2 - 4;
      do
      {
        v7 = *v3++;
        v6 = v7;
        v8 = *v4++;
        result = v6 == v8;
        v10 = v6 != v8 || v5 == 0;
        v5 -= 4;
      }
      while (!v10);
      break;
    case 1:
      v19 = *((_QWORD *)a2[1] + 1);
      if (!v19)
        goto LABEL_50;
      v20 = *a2;
      v21 = *(unsigned __int16 **)(a1 + 24);
      v22 = 4 * v19 - 4;
      do
      {
        v24 = *v20++;
        v23 = v24;
        v25 = *v21++;
        result = v23 == v25;
        v26 = v23 != v25 || v22 == 0;
        v22 -= 4;
      }
      while (!v26);
      break;
    case 2:
      v27 = *((_QWORD *)a2[1] + 1);
      if (!v27)
        goto LABEL_50;
      v28 = *a2;
      v29 = *(int **)(a1 + 24);
      v30 = 4 * v27 - 4;
      do
      {
        v32 = *v28++;
        v31 = v32;
        v33 = *v29++;
        result = v31 == v33;
        v34 = v31 != v33 || v30 == 0;
        v30 -= 4;
      }
      while (!v34);
      break;
    case 3:
      v35 = *((_QWORD *)a2[1] + 1);
      if (!v35)
        goto LABEL_50;
      v36 = *a2;
      v37 = *(uint64_t **)(a1 + 24);
      v38 = 4 * v35 - 4;
      do
      {
        v40 = *v36++;
        v39 = v40;
        v41 = *v37++;
        result = v41 == v39;
        v42 = v41 != v39 || v38 == 0;
        v38 -= 4;
      }
      while (!v42);
      break;
    case 4:
      v43 = *((_QWORD *)a2[1] + 1);
      if (!v43)
        goto LABEL_50;
      v44 = *a2;
      v45 = *(_QWORD **)(a1 + 24);
      v46 = 4 * v43 - 4;
      do
      {
        result = boost::histogram::detail::mp_int<std::allocator<unsigned long long>>::operator==<unsigned int>(v45, v44);
        if (!(_DWORD)result)
          break;
        ++v44;
        v45 += 3;
        v47 = v46;
        v46 -= 4;
      }
      while (v47);
      break;
    default:
      v11 = *((_QWORD *)a2[1] + 1);
      if (v11)
      {
        v12 = *a2;
        v13 = *(double **)(a1 + 24);
        v14 = 4 * v11 - 4;
        do
        {
          v15 = *v13++;
          v16 = v15;
          v17 = v15 >= 0.0;
          LODWORD(v15) = *v12++;
          result = v16 == (double)LODWORD(v15) && v17;
          v18 = (_DWORD)result != 1 || v14 == 0;
          v14 -= 4;
        }
        while (!v18);
      }
      else
      {
LABEL_50:
        result = 1;
      }
      break;
  }
  return result;
}

BOOL boost::histogram::detail::mp_int<std::allocator<unsigned long long>>::operator==<unsigned int>(_QWORD *a1, unsigned int *a2)
{
  uint64_t v2;

  v2 = a1[1] - *a1;
  if (!v2)
    __assert_rtn("operator==", "unlimited_storage.hpp", 280, "data.size() > 0u");
  return v2 == 8 && *(_QWORD *)*a1 == *a2;
}

uint64_t _ZNK5boost9histogram17unlimited_storageINSt3__19allocatorIcEEE11buffer_type5applyIZZNKS5_eqERKS5_ENKUlPKT_E_clIyEEDaSC_EUlSC_E_JEEEDcOSA_DpOT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  BOOL v9;
  uint64_t v10;
  unint64_t *v11;
  double *v12;
  uint64_t v13;
  double v14;
  double v15;
  _BOOL4 v16;
  unint64_t v17;
  BOOL v18;
  uint64_t v19;
  unint64_t *v20;
  unsigned __int16 *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  unint64_t *v27;
  _DWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  unint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  unint64_t *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;

  switch(*(_BYTE *)(a1 + 16))
  {
    case 0:
      v2 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8);
      if (!v2)
        goto LABEL_50;
      v3 = *(unint64_t **)a2;
      v4 = *(unsigned __int8 **)(a1 + 24);
      v5 = 8 * v2 - 8;
      do
      {
        v7 = *v3++;
        v6 = v7;
        LODWORD(v7) = *v4++;
        result = v6 == v7;
        v9 = v6 != v7 || v5 == 0;
        v5 -= 8;
      }
      while (!v9);
      break;
    case 1:
      v19 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8);
      if (!v19)
        goto LABEL_50;
      v20 = *(unint64_t **)a2;
      v21 = *(unsigned __int16 **)(a1 + 24);
      v22 = 8 * v19 - 8;
      do
      {
        v24 = *v20++;
        v23 = v24;
        LODWORD(v24) = *v21++;
        result = v23 == v24;
        v25 = v23 != v24 || v22 == 0;
        v22 -= 8;
      }
      while (!v25);
      break;
    case 2:
      v26 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8);
      if (!v26)
        goto LABEL_50;
      v27 = *(unint64_t **)a2;
      v28 = *(_DWORD **)(a1 + 24);
      v29 = 8 * v26 - 8;
      do
      {
        v31 = *v27++;
        v30 = v31;
        LODWORD(v31) = *v28++;
        result = v30 == v31;
        v32 = v30 != v31 || v29 == 0;
        v29 -= 8;
      }
      while (!v32);
      break;
    case 3:
      v33 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8);
      if (!v33)
        goto LABEL_50;
      v34 = *(unint64_t **)a2;
      v35 = *(uint64_t **)(a1 + 24);
      v36 = 8 * v33 - 8;
      do
      {
        v38 = *v34++;
        v37 = v38;
        v39 = *v35++;
        result = v37 == v39;
        v40 = v37 != v39 || v36 == 0;
        v36 -= 8;
      }
      while (!v40);
      break;
    case 4:
      v41 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8);
      if (!v41)
        goto LABEL_50;
      v42 = *(unint64_t **)a2;
      v43 = *(_QWORD **)(a1 + 24);
      v44 = 8 * v41 - 8;
      do
      {
        result = boost::histogram::detail::mp_int<std::allocator<unsigned long long>>::operator==<unsigned long long>(v43, v42);
        if (!(_DWORD)result)
          break;
        ++v42;
        v43 += 3;
        v45 = v44;
        v44 -= 8;
      }
      while (v45);
      break;
    default:
      v10 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8);
      if (v10)
      {
        v11 = *(unint64_t **)a2;
        v12 = *(double **)(a1 + 24);
        v13 = 8 * v10 - 8;
        do
        {
          v14 = *v12++;
          v15 = v14;
          v16 = v14 >= 0.0;
          v17 = *v11++;
          result = v15 == (double)v17 && v16;
          v18 = (_DWORD)result != 1 || v13 == 0;
          v13 -= 8;
        }
        while (!v18);
      }
      else
      {
LABEL_50:
        result = 1;
      }
      break;
  }
  return result;
}

BOOL boost::histogram::detail::mp_int<std::allocator<unsigned long long>>::operator==<unsigned long long>(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = a1[1] - *a1;
  if (!v2)
    __assert_rtn("operator==", "unlimited_storage.hpp", 280, "data.size() > 0u");
  return v2 == 8 && *(_QWORD *)*a1 == *a2;
}

BOOL _ZNK5boost9histogram17unlimited_storageINSt3__19allocatorIcEEE11buffer_type5applyIZZNKS5_eqERKS5_ENKUlPKT_E_clINS0_6detail6mp_intINS3_IyEEEEEEDaSC_EUlSC_E_JEEEDcOSA_DpOT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v3;
  unsigned __int8 *v4;
  uint64_t v5;
  _BOOL8 result;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  double *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unsigned __int16 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unsigned int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double v33;

  switch(*(_BYTE *)(a1 + 16))
  {
    case 0:
      v2 = *(_QWORD *)(a2[1] + 8);
      if (!v2)
        goto LABEL_33;
      v3 = (_QWORD *)*a2;
      v4 = *(unsigned __int8 **)(a1 + 24);
      v5 = 24 * v2 - 24;
      do
      {
        result = boost::histogram::detail::mp_int<std::allocator<unsigned long long>>::operator==<unsigned char>(v3, v4);
        if (!result)
          break;
        v3 += 3;
        ++v4;
        v7 = v5;
        v5 -= 24;
      }
      while (v7);
      break;
    case 1:
      v13 = *(_QWORD *)(a2[1] + 8);
      if (!v13)
        goto LABEL_33;
      v14 = (_QWORD *)*a2;
      v15 = *(unsigned __int16 **)(a1 + 24);
      v16 = 24 * v13 - 24;
      do
      {
        result = boost::histogram::detail::mp_int<std::allocator<unsigned long long>>::operator==<unsigned short>(v14, v15);
        if (!result)
          break;
        v14 += 3;
        ++v15;
        v17 = v16;
        v16 -= 24;
      }
      while (v17);
      break;
    case 2:
      v18 = *(_QWORD *)(a2[1] + 8);
      if (!v18)
        goto LABEL_33;
      v19 = (_QWORD *)*a2;
      v20 = *(unsigned int **)(a1 + 24);
      v21 = 24 * v18 - 24;
      do
      {
        result = boost::histogram::detail::mp_int<std::allocator<unsigned long long>>::operator==<unsigned int>(v19, v20);
        if (!result)
          break;
        v19 += 3;
        ++v20;
        v22 = v21;
        v21 -= 24;
      }
      while (v22);
      break;
    case 3:
      v23 = *(_QWORD *)(a2[1] + 8);
      if (!v23)
        goto LABEL_33;
      v24 = (_QWORD *)*a2;
      v25 = *(_QWORD **)(a1 + 24);
      v26 = 24 * v23 - 24;
      do
      {
        result = boost::histogram::detail::mp_int<std::allocator<unsigned long long>>::operator==<unsigned long long>(v24, v25);
        if (!result)
          break;
        v24 += 3;
        ++v25;
        v27 = v26;
        v26 -= 24;
      }
      while (v27);
      break;
    case 4:
      v28 = *(_QWORD *)(a2[1] + 8);
      if (!v28)
        goto LABEL_33;
      v29 = *a2;
      v30 = *(_QWORD *)(a1 + 24);
      v31 = 24 * v28 - 24;
      do
      {
        result = boost::histogram::detail::mp_int<std::allocator<unsigned long long>>::operator==(v29, v30);
        if (!result)
          break;
        v29 += 24;
        v30 += 24;
        v32 = v31;
        v31 -= 24;
      }
      while (v32);
      break;
    default:
      v8 = *(_QWORD *)(a2[1] + 8);
      if (v8)
      {
        v9 = (_QWORD *)*a2;
        v10 = *(double **)(a1 + 24);
        v11 = 24 * v8 - 24;
        while (*v10 >= 0.0)
        {
          v33 = *v10;
          result = boost::histogram::detail::mp_int<std::allocator<unsigned long long>>::operator==<double>(v9, &v33);
          if (result)
          {
            v9 += 3;
            ++v10;
            v12 = v11;
            v11 -= 24;
            if (v12)
              continue;
          }
          return result;
        }
        result = 0;
      }
      else
      {
LABEL_33:
        result = 1;
      }
      break;
  }
  return result;
}

BOOL boost::histogram::detail::mp_int<std::allocator<unsigned long long>>::operator==(uint64_t a1, uint64_t a2)
{
  _BYTE *v2;
  _BYTE *v3;
  size_t v5;
  _BYTE *v6;
  _BYTE *v7;
  int64_t v9;
  const char *v11;
  int v12;

  v2 = *(_BYTE **)a1;
  v3 = *(_BYTE **)(a1 + 8);
  v5 = v3 - v2;
  if (v3 == v2)
  {
    v11 = "data.size() > 0u";
    v12 = 245;
    goto LABEL_15;
  }
  v6 = *(_BYTE **)a2;
  v7 = *(_BYTE **)(a2 + 8);
  v9 = v7 - v6;
  if (v7 == v6)
  {
    v11 = "o.data.size() > 0u";
    v12 = 246;
    goto LABEL_15;
  }
  if (v5 != 8 && !*((_QWORD *)v3 - 1))
  {
    v11 = "data.size() == 1 || data.back() > 0u";
    v12 = 248;
    goto LABEL_15;
  }
  if (v9 != 8 && !*((_QWORD *)v7 - 1))
  {
    v11 = "o.data.size() == 1 || o.data.back() > 0u";
    v12 = 249;
LABEL_15:
    __assert_rtn("operator==", "unlimited_storage.hpp", v12, v11);
  }
  return v5 == v9 && memcmp(v2, v6, v5) == 0;
}

BOOL boost::histogram::detail::mp_int<std::allocator<unsigned long long>>::operator==<double>(_QWORD *a1, double *a2)
{
  double v2;

  if (a1[1] == *a1)
    __assert_rtn("operator==", "unlimited_storage.hpp", 280, "data.size() > 0u");
  v2 = *a2;
  return boost::histogram::detail::mp_int<std::allocator<unsigned long long>>::operator double((uint64_t)a1) == v2;
}

double boost::histogram::detail::mp_int<std::allocator<unsigned long long>>::operator double(uint64_t a1)
{
  unint64_t *v1;
  uint64_t v2;
  double v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;

  v1 = *(unint64_t **)a1;
  v2 = *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
  if (!v2)
    __assert_rtn("operator double", "unlimited_storage.hpp", 218, "data.size() > 0u");
  v3 = (double)*v1;
  if ((unint64_t)v2 >= 9)
  {
    v4 = v2 >> 3;
    if (v4 <= 2)
      v4 = 2;
    v5 = v4 - 1;
    v6 = v1 + 1;
    v7 = 64;
    do
    {
      v8 = *v6++;
      v3 = v3 + (double)v8 * exp2((double)v7);
      v7 += 64;
      --v5;
    }
    while (v5);
  }
  return v3;
}

uint64_t _ZNK5boost9histogram17unlimited_storageINSt3__19allocatorIcEEE11buffer_type5applyIZZNKS5_eqERKS5_ENKUlPKT_E_clIdEEDaSC_EUlSC_E_JEEEDcOSA_DpOT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double *v3;
  unsigned __int8 *v4;
  uint64_t v5;
  double v6;
  double v7;
  _BOOL4 v8;
  uint64_t result;
  BOOL v10;
  uint64_t v11;
  double *v12;
  double *v13;
  uint64_t v14;
  double v15;
  double v16;
  double v17;
  BOOL v18;
  uint64_t v19;
  double *v20;
  unsigned __int16 *v21;
  uint64_t v22;
  double v23;
  double v24;
  _BOOL4 v25;
  BOOL v26;
  uint64_t v27;
  double *v28;
  _DWORD *v29;
  uint64_t v30;
  double v31;
  double v32;
  _BOOL4 v33;
  BOOL v34;
  uint64_t v35;
  double *v36;
  unint64_t *v37;
  uint64_t v38;
  double v39;
  double v40;
  _BOOL4 v41;
  unint64_t v42;
  BOOL v43;
  uint64_t v44;
  double *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  double v49;

  switch(*(_BYTE *)(a1 + 16))
  {
    case 0:
      v2 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8);
      if (!v2)
        goto LABEL_60;
      v3 = *(double **)a2;
      v4 = *(unsigned __int8 **)(a1 + 24);
      v5 = 8 * v2 - 8;
      do
      {
        v6 = *v3++;
        v7 = v6;
        v8 = v6 >= 0.0;
        LODWORD(v6) = *v4++;
        result = v7 == (double)LODWORD(v6) && v8;
        v10 = (_DWORD)result != 1 || v5 == 0;
        v5 -= 8;
      }
      while (!v10);
      break;
    case 1:
      v19 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8);
      if (!v19)
        goto LABEL_60;
      v20 = *(double **)a2;
      v21 = *(unsigned __int16 **)(a1 + 24);
      v22 = 8 * v19 - 8;
      do
      {
        v23 = *v20++;
        v24 = v23;
        v25 = v23 >= 0.0;
        LODWORD(v23) = *v21++;
        result = v24 == (double)LODWORD(v23) && v25;
        v26 = (_DWORD)result != 1 || v22 == 0;
        v22 -= 8;
      }
      while (!v26);
      break;
    case 2:
      v27 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8);
      if (!v27)
        goto LABEL_60;
      v28 = *(double **)a2;
      v29 = *(_DWORD **)(a1 + 24);
      v30 = 8 * v27 - 8;
      do
      {
        v31 = *v28++;
        v32 = v31;
        v33 = v31 >= 0.0;
        LODWORD(v31) = *v29++;
        result = v32 == (double)LODWORD(v31) && v33;
        v34 = (_DWORD)result != 1 || v30 == 0;
        v30 -= 8;
      }
      while (!v34);
      break;
    case 3:
      v35 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8);
      if (!v35)
        goto LABEL_60;
      v36 = *(double **)a2;
      v37 = *(unint64_t **)(a1 + 24);
      v38 = 8 * v35 - 8;
      do
      {
        v39 = *v36++;
        v40 = v39;
        v41 = v39 >= 0.0;
        v42 = *v37++;
        result = v40 == (double)v42 && v41;
        v43 = (_DWORD)result != 1 || v38 == 0;
        v38 -= 8;
      }
      while (!v43);
      break;
    case 4:
      v44 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8);
      if (!v44)
        goto LABEL_60;
      v45 = *(double **)a2;
      v46 = *(_QWORD **)(a1 + 24);
      v47 = 8 * v44 - 8;
      while (*v45 >= 0.0)
      {
        v49 = *v45;
        result = boost::histogram::detail::mp_int<std::allocator<unsigned long long>>::operator==<double>(v46, &v49);
        if ((_DWORD)result)
        {
          ++v45;
          v46 += 3;
          v48 = v47;
          v47 -= 8;
          if (v48)
            continue;
        }
        return result;
      }
      result = 0;
      break;
    default:
      v11 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8);
      if (v11)
      {
        v12 = *(double **)a2;
        v13 = *(double **)(a1 + 24);
        v14 = 8 * v11 - 8;
        do
        {
          v15 = *v12++;
          v16 = v15;
          v17 = *v13++;
          result = v16 == v17;
          v18 = v16 != v17 || v14 == 0;
          v14 -= 8;
        }
        while (!v18);
      }
      else
      {
LABEL_60:
        result = 1;
      }
      break;
  }
  return result;
}

uint64_t std::__equal_to::operator()[abi:ne180100]<std::pair<int const,std::vector<std::string>>,std::pair<int const,std::vector<std::string>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  uint64_t result;
  char v7;

  if (*(_DWORD *)a2 != *(_DWORD *)a3)
    return 0;
  v3 = *(unsigned __int8 **)(a2 + 8);
  v4 = *(unsigned __int8 **)(a2 + 16);
  v5 = *(unsigned __int8 **)(a3 + 8);
  if (v4 - v3 != *(_QWORD *)(a3 + 16) - (_QWORD)v5)
    return 0;
  if (v3 == v4)
    return 1;
  do
  {
    result = std::__equal_to::operator()[abi:ne180100]<std::string,std::string>((uint64_t)&v7, v3, v5);
    if (!(_DWORD)result)
      break;
    v3 += 24;
    v5 += 24;
  }
  while (v3 != v4);
  return result;
}

uint64_t std::__equal_to::operator()[abi:ne180100]<std::string,std::string>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  BOOL v14;
  uint64_t result;

  v3 = a3;
  v4 = a2[23];
  if ((v4 & 0x80u) == 0)
    v5 = a2[23];
  else
    v5 = *((_QWORD *)a2 + 1);
  v6 = a3[23];
  v7 = (char)v6;
  if ((v6 & 0x80u) != 0)
    v6 = *((_QWORD *)a3 + 1);
  if (v5 != v6)
    return 0;
  if (v7 < 0)
    v3 = *(unsigned __int8 **)a3;
  if ((v4 & 0x80) != 0)
    return memcmp(*(const void **)a2, v3, *((_QWORD *)a2 + 1)) == 0;
  if (!a2[23])
    return 1;
  v8 = v4 - 1;
  do
  {
    v10 = *a2++;
    v9 = v10;
    v12 = *v3++;
    v11 = v12;
    v14 = v8-- != 0;
    result = v9 == v11;
  }
  while (v9 == v11 && v14);
  return result;
}

uint64_t *std::map<int,std::vector<std::string>>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<int,std::vector<std::string>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<int,std::vector<std::string>>,std::__tree_node<std::__value_type<int,std::vector<std::string>>,void *> *,long>>>(a1, *(int **)a2, (int *)(a2 + 8));
  return a1;
}

void sub_243A4B2E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<int,std::vector<std::string>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::string>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::string>>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<int,std::vector<std::string>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<int,std::vector<std::string>>,std::__tree_node<std::__value_type<int,std::vector<std::string>>,void *> *,long>>>(uint64_t *result, int *a2, int *a3)
{
  int *v4;
  uint64_t **v5;
  uint64_t *v6;
  int *v7;
  int *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<std::__value_type<int,std::vector<std::string>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::string>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::string>>>>::__emplace_hint_unique_key_args<int,std::pair<int const,std::vector<std::string>> const&>(v5, v6, v4 + 8, (uint64_t)(v4 + 8));
      v7 = (int *)*((_QWORD *)v4 + 1);
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = *(int **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (int *)*((_QWORD *)v4 + 2);
          v9 = *(_QWORD *)v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<int,std::vector<std::string>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::string>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::string>>>>::__emplace_hint_unique_key_args<int,std::pair<int const,std::vector<std::string>> const&>(uint64_t **a1, uint64_t *a2, int *a3, uint64_t a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;

  v6 = (uint64_t **)std::__tree<std::__value_type<int,std::vector<std::string>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::string>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::string>>>>::__find_equal<int>(a1, a2, &v10, &v9, a3);
  result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<int,std::vector<std::string>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::string>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::string>>>>::__construct_node<std::pair<int const,std::vector<std::string>> const&>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<int,std::vector<std::string>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::string>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::string>>>>::__insert_node_at(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

_QWORD *std::vector<unsigned long>::__emplace_back_slow_path<boost::histogram::unlimited_storage<std::allocator<char>>::reference_t<boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type const> &>(void **a1, uint64_t *a2, double a3)
{
  _BYTE *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  char *i;
  uint64_t v20;
  uint64_t *v22;

  v4 = *a1;
  v5 = ((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 61)
    std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::__throw_length_error[abi:ne180100]();
  v8 = (uint64_t)(a1 + 2);
  v9 = (_BYTE *)a1[2] - v4;
  if (v9 >> 2 > v6)
    v6 = v9 >> 2;
  if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
    v10 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v10 = v6;
  if (v10)
  {
    v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v8, v10);
    v13 = v12;
  }
  else
  {
    v11 = 0;
    v13 = 0;
  }
  v14 = *a2;
  v22 = a2;
  v15 = _ZNK5boost9histogram17unlimited_storageINSt3__19allocatorIcEEE11buffer_type5applyIZNKS5_11reference_tIKS6_EcvdEvEUlPKT_E_JEEEDcOSB_DpOT0_(v14, (uint64_t)&v22, a3);
  v16 = &v11[8 * v5];
  *(_QWORD *)v16 = (unint64_t)v15;
  v17 = v16 + 8;
  v18 = (char *)*a1;
  for (i = (char *)a1[1]; i != v18; i -= 8)
  {
    v20 = *((_QWORD *)i - 1);
    *((_QWORD *)v16 - 1) = v20;
    v16 -= 8;
  }
  *a1 = v16;
  a1[1] = v17;
  a1[2] = &v11[8 * v13];
  if (v18)
    operator delete(v18);
  return v17;
}

void sub_243A4B4E8(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

uint64_t *boost::histogram::indexed_range<boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>> const>::range_iterator::increment(uint64_t *result)
{
  _DWORD *v1;
  _DWORD *v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;

  v1 = (_DWORD *)result[2];
  v2 = v1 + 12;
  v3 = v1[12] + 1;
  v1[12] = v3;
  v4 = *result + 1;
  if (v3 == v1[14])
  {
    v5 = 0xFFFFFFFB6DB6DB70 * ((*(_QWORD *)(*(_QWORD *)v1 + 8) - **(_QWORD **)v1) >> 3) - 16;
    v6 = 1;
    do
    {
      if (!v5)
        break;
      v7 = v2[1];
      *v2 = v7;
      v8 = v4 - v6 * (v3 - v7);
      v6 *= (int)v2[3];
      v9 = v2[6];
      v10 = v2[4];
      v2 += 4;
      v3 = v10 + 1;
      *v2 = v10 + 1;
      v4 = v6 + v8;
      v5 -= 16;
    }
    while (v10 + 1 == v9);
  }
  *result = v4;
  return result;
}

_QWORD *std::vector<unsigned long>::__emplace_back_slow_path<boost::histogram::unlimited_storage<std::allocator<char>>::reference_t<boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type const>>(void **a1, uint64_t *a2, double a3)
{
  _BYTE *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  char *i;
  uint64_t v20;
  uint64_t *v22;

  v4 = *a1;
  v5 = ((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 61)
    std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::__throw_length_error[abi:ne180100]();
  v8 = (uint64_t)(a1 + 2);
  v9 = (_BYTE *)a1[2] - v4;
  if (v9 >> 2 > v6)
    v6 = v9 >> 2;
  if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
    v10 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v10 = v6;
  if (v10)
  {
    v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v8, v10);
    v13 = v12;
  }
  else
  {
    v11 = 0;
    v13 = 0;
  }
  v14 = *a2;
  v22 = a2;
  v15 = _ZNK5boost9histogram17unlimited_storageINSt3__19allocatorIcEEE11buffer_type5applyIZNKS5_11reference_tIKS6_EcvdEvEUlPKT_E_JEEEDcOSB_DpOT0_(v14, (uint64_t)&v22, a3);
  v16 = &v11[8 * v5];
  *(_QWORD *)v16 = (unint64_t)v15;
  v17 = v16 + 8;
  v18 = (char *)*a1;
  for (i = (char *)a1[1]; i != v18; i -= 8)
  {
    v20 = *((_QWORD *)i - 1);
    *((_QWORD *)v16 - 1) = v20;
    v16 -= 8;
  }
  *a1 = v16;
  a1[1] = v17;
  a1[2] = &v11[8 * v13];
  if (v18)
    operator delete(v18);
  return v17;
}

void sub_243A4B684(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

double _ZNK5boost9histogram17unlimited_storageINSt3__19allocatorIcEEE11buffer_type5applyIZNKS5_11reference_tIKS6_EcvdEvEUlPKT_E_JEEEDcOSB_DpOT0_(uint64_t a1, uint64_t a2, double a3)
{
  double result;

  switch(*(_BYTE *)(a1 + 16))
  {
    case 0:
      LOBYTE(a3) = *(_BYTE *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(*(_QWORD *)a2 + 8));
      goto LABEL_7;
    case 1:
      LOWORD(a3) = *(_WORD *)(*(_QWORD *)(a1 + 24) + 2 * *(_QWORD *)(*(_QWORD *)a2 + 8));
      goto LABEL_7;
    case 2:
      LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 4 * *(_QWORD *)(*(_QWORD *)a2 + 8));
      goto LABEL_7;
    case 3:
      a3 = *(double *)(*(_QWORD *)(a1 + 24) + 8 * *(_QWORD *)(*(_QWORD *)a2 + 8));
LABEL_7:
      result = (double)*(unint64_t *)&a3;
      break;
    case 4:
      result = boost::histogram::detail::mp_int<std::allocator<unsigned long long>>::operator double(*(_QWORD *)(a1 + 24) + 24 * *(_QWORD *)(*(_QWORD *)a2 + 8));
      break;
    default:
      result = *(double *)(*(_QWORD *)(a1 + 24) + 8 * *(_QWORD *)(*(_QWORD *)a2 + 8));
      break;
  }
  return result;
}

uint64_t boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::apply_visitor<boost::detail::variant::result_wrapper1<int boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::index<double>(double const&)::{lambda(double const&)#1},boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>> const&>>(uint64_t a1, double ***a2)
{
  double **v3;
  int v4;
  double v5;
  uint64_t result;
  double v7;
  int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;

  v4 = *(_DWORD *)a1;
  v3 = (double **)(a1 + 8);
  switch(v4 ^ (v4 >> 31))
  {
    case 0:
      v5 = (***a2 - *(double *)(a1 + 40)) / *(double *)(a1 + 48);
      if (v5 >= 1.0)
      {
        result = *(unsigned int *)v3;
      }
      else if (v5 >= 0.0)
      {
        result = (int)(v5 * (double)*(int *)v3);
      }
      else
      {
        result = 0xFFFFFFFFLL;
      }
      break;
    case 1:
      result = boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>::index(v3, ***a2);
      break;
    case 2:
      v7 = ***a2;
      v8 = *(_DWORD *)(a1 + 40);
      v9 = (int)v7 - v8;
      v10 = *(_DWORD *)(a1 + 8);
      if ((int)v7 < v8)
        v11 = -1;
      else
        v11 = (int)v7 - v8;
      if (v9 >= (int)v10)
        result = v10;
      else
        result = v11;
      break;
    default:
      boost::detail::variant::forced_return<void>();
  }
  return result;
}

uint64_t _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNKS2_7variantIJS5_SA_SF_EE4sizeEvEUlRKT_E_RKSG_EEEENSN_11result_typeERSN_(uint64_t a1)
{
  uint64_t result;

  switch(*(_DWORD *)a1 ^ (*(int *)a1 >> 31))
  {
    case 0:
    case 2:
      result = *(unsigned int *)(a1 + 8);
      break;
    case 1:
      result = ((*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3) - 1;
      break;
    default:
      boost::detail::variant::forced_return<void>();
  }
  return result;
}

_QWORD *std::vector<unsigned long>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<double>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_243A4B8B8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void OUTLINED_FUNCTION_0_1(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 370, a4);
}

void sub_243A4B980(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_243A4BA1C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_243A4C16C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *a17, uint64_t a18, void *a19, void *a20,void *a21,void *a22)
{
  void *v22;
  void *v23;

  _Unwind_Resume(a1);
}

uint64_t PPSValidateIntervalStart(void *a1, void *a2, void *a3)
{
  uint64_t (**v5)(id, id, id);
  id v6;
  id v7;
  uint64_t v8;

  v5 = a1;
  v6 = a2;
  v7 = a3;
  if (v5)
    v8 = v5[2](v5, v6, v7);
  else
    v8 = 1;

  return v8;
}

void sub_243A4C3C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void PPSAddInterval(PPSTimeIntervalSet *a1, double a2, double a3, NSDictionary *a4)
{
  NSDictionary *v7;
  PPSTimeInterval *v8;
  PPSTimeIntervalSet *v9;

  v9 = a1;
  v7 = a4;
  v8 = -[PPSTimeInterval initWithStartTimestamp:endTimestamp:payload:]([PPSTimeInterval alloc], "initWithStartTimestamp:endTimestamp:payload:", v7, a2, a3);
  if (v8)
    -[PPSTimeIntervalSet addTimeInterval:](v9, "addTimeInterval:", v8);

}

void sub_243A4C460(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_243A4C83C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, uint64_t a19, uint64_t a20,void *a21)
{

  _Unwind_Resume(a1);
}

void sub_243A4CAAC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_243A4CBC0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_243A4CCA4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_0_2(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_list va;

  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x16u);
}

void OUTLINED_FUNCTION_3_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

void sub_243A4ED48(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_243A4EDCC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_243A4EE74(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_243A4EEC4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_243A4EF10(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_243A4EF78(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_243A4EFE8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_243A4F148(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  _Unwind_Resume(a1);
}

void sub_243A4F348(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_243A4F500(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_243A4F668(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_243A4F964(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_243A4FA08(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_0_3(void *a1@<X0>, const char *a2@<X3>, uint8_t *a3@<X4>, NSObject *a4@<X8>)
{
  _os_log_debug_impl(a1, a4, OS_LOG_TYPE_DEBUG, a2, a3, 0x16u);
}

uint64_t OUTLINED_FUNCTION_1_1(uint64_t result, uint64_t a2, uint64_t a3, float a4)
{
  *(float *)a3 = a4;
  *(_QWORD *)(a3 + 4) = result;
  *(_WORD *)(a3 + 12) = 2112;
  *(_QWORD *)(a3 + 14) = a2;
  return result;
}

void sub_243A50C9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose(&a33, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__2(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__2(uint64_t a1)
{

}

void sub_243A523EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__3(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__3(uint64_t a1)
{

}

void sub_243A5260C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_243A526F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_243A527D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_243A5287C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_243A52A08(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_243A52BA8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_243A52C9C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_243A52D3C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_243A52D90(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_243A52EB4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_243A52F9C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_243A530C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_243A5314C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_243A531D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_243A535E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_243A537C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_0_4(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 0xCu);
}

void sub_243A538C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_243A53958(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_243A53A48(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_243A53AB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_243A53B80(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_243A53BF8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_243A53CE8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_243A53DB4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_243A53EFC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_243A54034(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_243A5411C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id _stringEscapingSpecialCharactersForLikePredicate(NSString *a1)
{
  NSString *v1;
  id v2;
  uint64_t v3;
  id v4;
  _QWORD v6[4];
  id v7;

  v1 = a1;
  v2 = objc_alloc_init(MEMORY[0x24BDD16A8]);
  v3 = -[NSString length](v1, "length");
  v6[0] = MEMORY[0x24BDAC760];
  v6[1] = 3221225472;
  v6[2] = ___ZL48_stringEscapingSpecialCharactersForLikePredicateP8NSString_block_invoke;
  v6[3] = &unk_25142CD48;
  v4 = v2;
  v7 = v4;
  -[NSString enumerateSubstringsInRange:options:usingBlock:](v1, "enumerateSubstringsInRange:options:usingBlock:", 0, v3, 2, v6);

  return v4;
}

void sub_243A541F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_243A542B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_243A5437C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_243A54400(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_243A54518(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_243A547EC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_243A548D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_243A54990(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_243A54AA8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_243A54BE0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_243A54C94(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_243A54DCC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_243A54E4C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_243A54EE4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_243A54F98(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_243A55074(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_243A552DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_243A55550(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_243A55690(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_243A55824(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_243A558D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_243A55964(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_243A55A74(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_243A55BB4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_243A55E24(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_243A55FF4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_243A561CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_243A56378(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_243A5645C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_243A56600(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_243A56730(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_243A5687C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_243A569D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_243A56BD4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_243A56CD8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_243A56D64(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_243A56DFC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_243A56EBC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_243A56F6C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_243A57058(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZL48_stringEscapingSpecialCharactersForLikePredicateP8NSString_block_invoke(uint64_t a1, void *a2)
{
  id *v3;
  void *v4;
  id v5;

  v5 = a2;
  if (objc_msgSend(v5, "isEqualToString:", CFSTR("~")))
  {
    objc_msgSend(*(id *)(a1 + 32), "appendString:", CFSTR("~"));
    objc_msgSend(*(id *)(a1 + 32), "appendString:", CFSTR("~"));
  }
  else
  {
    if ((objc_msgSend(v5, "isEqualToString:", CFSTR("%")) & 1) != 0
      || objc_msgSend(v5, "isEqualToString:", CFSTR("_")))
    {
      v4 = *(void **)(a1 + 32);
      v3 = (id *)(a1 + 32);
      objc_msgSend(v4, "appendString:", CFSTR("~"));
    }
    else
    {
      v3 = (id *)(a1 + 32);
    }
    objc_msgSend(*v3, "appendString:", v5);
  }

}

void sub_243A57170(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void ___ZL43_stringEscapingGlobPatternsForLikePredicateP8NSString_block_invoke(uint64_t a1, void *a2)
{
  id v3;
  char v4;
  id *v5;
  const __CFString *v6;
  void *v7;
  void *v8;
  int v9;
  void *v10;
  void *v11;
  id v12;

  v3 = a2;
  v12 = v3;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))
  {
    if ((objc_msgSend(v3, "isEqualToString:", CFSTR("%")) & 1) != 0
      || objc_msgSend(v12, "isEqualToString:", CFSTR("_")))
    {
      objc_msgSend(*(id *)(a1 + 32), "appendString:", CFSTR("~"));
    }
    objc_msgSend(*(id *)(a1 + 32), "appendString:", v12);
    v4 = 0;
    goto LABEL_8;
  }
  if ((objc_msgSend(v3, "isEqualToString:", CFSTR("\\")) & 1) == 0)
  {
    if (objc_msgSend(v12, "isEqualToString:", CFSTR("*")))
    {
      v5 = (id *)(a1 + 32);
LABEL_12:
      v6 = CFSTR("%");
LABEL_18:
      objc_msgSend(*v5, "appendString:", v6);
      goto LABEL_9;
    }
    if (objc_msgSend(v12, "isEqualToString:", CFSTR("?")))
    {
      v5 = (id *)(a1 + 32);
    }
    else
    {
      if (objc_msgSend(v12, "isEqualToString:", CFSTR("~")))
      {
        v7 = *(void **)(a1 + 32);
        v5 = (id *)(a1 + 32);
        v6 = CFSTR("~");
        objc_msgSend(v7, "appendString:", CFSTR("~"));
        goto LABEL_18;
      }
      if (objc_msgSend(v12, "isEqualToString:", CFSTR("%")))
      {
        v8 = *(void **)(a1 + 32);
        v5 = (id *)(a1 + 32);
        objc_msgSend(v8, "appendString:", CFSTR("~"));
        goto LABEL_12;
      }
      v9 = objc_msgSend(v12, "isEqualToString:", CFSTR("_"));
      v11 = *(void **)(a1 + 32);
      v5 = (id *)(a1 + 32);
      v10 = v11;
      if (!v9)
      {
        objc_msgSend(v10, "appendString:", v12);
        goto LABEL_9;
      }
      objc_msgSend(v10, "appendString:", CFSTR("~"));
    }
    v6 = CFSTR("_");
    goto LABEL_18;
  }
  v4 = 1;
LABEL_8:
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = v4;
LABEL_9:

}

void sub_243A5730C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_243A58478(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 152), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__4(uint64_t a1)
{

}

void sub_243A58CB4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_243A58E0C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_243A58F9C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_243A59048(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_243A591EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;

  _Block_object_dispose((const void *)(v19 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_243A59418(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_243A5957C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_243A59670(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_243A59BA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

BOOL PPSSQLiteColumnValueIsNull(uint64_t a1, int a2)
{
  return sqlite3_column_type(*(sqlite3_stmt **)(a1 + 8), *(_DWORD *)(a1 + 16) + a2) == 5;
}

BOOL PPSSQLiteColumnValueAsBoolean(uint64_t a1, int a2)
{
  return sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), *(_DWORD *)(a1 + 16) + a2) != 0;
}

uint64_t PPSSQLiteColumnValueAsInt(uint64_t a1, int a2)
{
  return sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), *(_DWORD *)(a1 + 16) + a2);
}

sqlite3_int64 PPSSQLiteColumnValuesAsInt64(uint64_t a1, int a2)
{
  return sqlite3_column_int64(*(sqlite3_stmt **)(a1 + 8), *(_DWORD *)(a1 + 16) + a2);
}

double PPSSQLiteColumnValueAsDouble(uint64_t a1, int a2)
{
  return sqlite3_column_double(*(sqlite3_stmt **)(a1 + 8), *(_DWORD *)(a1 + 16) + a2);
}

unsigned __int8 *PPSSQLiteRow::columnValueAsString(sqlite3_stmt **this, int a2)
{
  unsigned __int8 *v2;

  v2 = (unsigned __int8 *)sqlite3_column_text(this[1], *((_DWORD *)this + 4) + a2);
  if (v2)
    v2 = (unsigned __int8 *)objc_msgSend(objc_alloc(MEMORY[0x24BDD17C8]), "initWithUTF8String:", v2);
  return v2;
}

id PPSSQLiteColumnValueAsNonEmptyString(sqlite3_stmt **a1, int a2)
{
  void *v2;
  void *v3;
  id v4;

  PPSSQLiteRow::columnValueAsString(a1, a2);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v2, "length"))
    v3 = v2;
  else
    v3 = 0;
  v4 = v3;

  return v4;
}

void sub_243A59F4C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

const void *PPSSQLiteRow::columnValueAsBytes(sqlite3_stmt **this, int a2)
{
  if (sqlite3_column_type(this[1], *((_DWORD *)this + 4) + a2) == 5)
    return 0;
  else
    return sqlite3_column_blob(this[1], *((_DWORD *)this + 4) + a2);
}

id PPSSQLiteRow::columnValueAsData(PPSSQLiteRow *this, int a2)
{
  void *v4;
  int v5;
  const void *v6;

  if (sqlite3_column_type(*((sqlite3_stmt **)this + 1), *((_DWORD *)this + 4) + a2) == 5)
  {
    v4 = 0;
  }
  else
  {
    v5 = *((_DWORD *)this + 4) + a2;
    v6 = sqlite3_column_blob(*((sqlite3_stmt **)this + 1), v5);
    v4 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDBCE50]), "initWithBytes:length:", v6, sqlite3_column_bytes(*((sqlite3_stmt **)this + 1), v5));
  }
  return v4;
}

id PPSSQLiteRow::columnValueAsDate(sqlite3_stmt **this, int a2)
{
  void *v4;

  if (sqlite3_column_type(this[1], *((_DWORD *)this + 4) + a2) == 5)
    v4 = 0;
  else
    v4 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDBCE60]), "initWithTimeIntervalSinceReferenceDate:", sqlite3_column_double(this[1], *((_DWORD *)this + 4) + a2));
  return v4;
}

id PPSSQLiteRow::columnValueAsNumber(sqlite3_stmt **this, int a2)
{
  int v4;
  void *v5;

  v4 = sqlite3_column_type(this[1], *((_DWORD *)this + 4) + a2);
  if (v4 == 1)
  {
    v5 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDD16E0]), "initWithLongLong:", sqlite3_column_int64(this[1], *((_DWORD *)this + 4) + a2));
  }
  else if (v4 == 2)
  {
    v5 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDD16E0]), "initWithDouble:", sqlite3_column_double(this[1], *((_DWORD *)this + 4) + a2));
  }
  else
  {
    v5 = 0;
  }
  return v5;
}

id PPSSQLiteRow::columnValueAsFoundationType(sqlite3_stmt **this, int a2)
{
  void *v4;

  switch(sqlite3_column_type(this[1], *((_DWORD *)this + 4) + a2))
  {
    case 1:
      v4 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDD16E0]), "initWithLongLong:", sqlite3_column_int64(this[1], *((_DWORD *)this + 4) + a2));
      break;
    case 2:
      v4 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDD16E0]), "initWithDouble:", sqlite3_column_double(this[1], *((_DWORD *)this + 4) + a2));
      break;
    case 3:
      PPSSQLiteRow::columnValueAsString(this, a2);
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      break;
    case 4:
      PPSSQLiteRow::columnValueAsData((PPSSQLiteRow *)this, a2);
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      break;
    default:
      v4 = 0;
      break;
  }
  return v4;
}

uint64_t PPSSQLiteRow::indexOfColumn(PPSSQLiteRow *this, NSString *a2)
{
  NSString *v3;
  void *v4;
  uint64_t v5;
  const char *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;

  v3 = a2;
  if (objc_msgSend(*((id *)this + 3), "count") != *((_DWORD *)this + 5))
  {
    v4 = (void *)objc_opt_new();
    if (*((int *)this + 5) >= 1)
    {
      v5 = 0;
      do
      {
        v6 = sqlite3_column_name(*((sqlite3_stmt **)this + 1), v5);
        objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInt:", v5);
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v6);
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "setObject:forKeyedSubscript:", v7, v8);

        v5 = (v5 + 1);
      }
      while ((int)v5 < *((_DWORD *)this + 5));
    }
    v9 = objc_msgSend(v4, "copy");
    v10 = (void *)*((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = v9;

  }
  objc_msgSend(*((id *)this + 3), "objectForKey:", v3);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = v11;
  if (v11)
    v13 = objc_msgSend(v11, "intValue") - *((_DWORD *)this + 4);
  else
    v13 = 0xFFFFFFFFLL;

  return v13;
}

void sub_243A5A378(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

BOOL PPSSQLiteColumnValueWithNameIsNull(uint64_t a1, void *a2)
{
  NSString *v3;
  int v4;
  _BOOL8 v5;

  v3 = a2;
  v4 = PPSSQLiteRow::indexOfColumn((PPSSQLiteRow *)a1, v3);
  v5 = sqlite3_column_type(*(sqlite3_stmt **)(a1 + 8), *(_DWORD *)(a1 + 16) + v4) == 5;

  return v5;
}

void sub_243A5A410(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL PPSSQLiteColumnValueWithNameAsBoolean(uint64_t a1, void *a2)
{
  NSString *v3;
  int v4;
  _BOOL8 v5;

  v3 = a2;
  v4 = PPSSQLiteRow::indexOfColumn((PPSSQLiteRow *)a1, v3);
  v5 = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), *(_DWORD *)(a1 + 16) + v4) != 0;

  return v5;
}

void sub_243A5A474(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t PPSSQLiteColumnValueWithNameAsInt(uint64_t a1, void *a2)
{
  NSString *v3;
  int v4;
  uint64_t v5;

  v3 = a2;
  v4 = PPSSQLiteRow::indexOfColumn((PPSSQLiteRow *)a1, v3);
  v5 = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), *(_DWORD *)(a1 + 16) + v4);

  return v5;
}

void sub_243A5A4D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

sqlite3_int64 PPSSQLiteColumnValueWithNameAsInt64(uint64_t a1, void *a2)
{
  NSString *v3;
  int v4;
  sqlite3_int64 v5;

  v3 = a2;
  v4 = PPSSQLiteRow::indexOfColumn((PPSSQLiteRow *)a1, v3);
  v5 = sqlite3_column_int64(*(sqlite3_stmt **)(a1 + 8), *(_DWORD *)(a1 + 16) + v4);

  return v5;
}

void sub_243A5A534(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

double PPSSQLiteColumnValueWithNameAsDouble(uint64_t a1, void *a2)
{
  NSString *v3;
  int v4;
  double v5;

  v3 = a2;
  v4 = PPSSQLiteRow::indexOfColumn((PPSSQLiteRow *)a1, v3);
  v5 = sqlite3_column_double(*(sqlite3_stmt **)(a1 + 8), *(_DWORD *)(a1 + 16) + v4);

  return v5;
}

void sub_243A5A59C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id PPSSQLiteColumnValueWithNameAsString(PPSSQLiteRow *a1, void *a2)
{
  NSString *v3;
  int v4;
  void *v5;

  v3 = a2;
  v4 = PPSSQLiteRow::indexOfColumn(a1, v3);
  PPSSQLiteRow::columnValueAsString((sqlite3_stmt **)a1, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

void sub_243A5A5F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id PPSSQLiteColumnValueWithNameAsNonEmptyString(PPSSQLiteRow *a1, void *a2)
{
  void *v2;
  void *v3;
  id v4;

  PPSSQLiteColumnValueWithNameAsString(a1, a2);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v2, "length"))
    v3 = v2;
  else
    v3 = 0;
  v4 = v3;

  return v4;
}

void sub_243A5A648(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id PPSSQLiteColumnValueWithNameAsData(PPSSQLiteRow *a1, void *a2)
{
  NSString *v3;
  int v4;
  void *v5;

  v3 = a2;
  v4 = PPSSQLiteRow::indexOfColumn(a1, v3);
  PPSSQLiteRow::columnValueAsData(a1, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

void sub_243A5A6A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id PPSSQLiteColumnValueWithNameAsDate(PPSSQLiteRow *a1, void *a2)
{
  NSString *v3;
  int v4;
  void *v5;

  v3 = a2;
  v4 = PPSSQLiteRow::indexOfColumn(a1, v3);
  PPSSQLiteRow::columnValueAsDate((sqlite3_stmt **)a1, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

void sub_243A5A700(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id PPSSQLiteColumnValueWithNameAsNumber(PPSSQLiteRow *a1, void *a2)
{
  NSString *v3;
  int v4;
  void *v5;

  v3 = a2;
  v4 = PPSSQLiteRow::indexOfColumn(a1, v3);
  PPSSQLiteRow::columnValueAsNumber((sqlite3_stmt **)a1, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

void sub_243A5A75C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id PPSSQLiteColumnValueWithNameAsFoundationType(PPSSQLiteRow *a1, void *a2)
{
  NSString *v3;
  int v4;
  void *v5;

  v3 = a2;
  v4 = PPSSQLiteRow::indexOfColumn(a1, v3);
  PPSSQLiteRow::columnValueAsFoundationType((sqlite3_stmt **)a1, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

void sub_243A5A7B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_2_1(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 2u);
}

void sub_243A5B790(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_243A5B818(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_243A5B8E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_243A5B9CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_243A5BF74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,uint64_t a28,char a29)
{
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;

  if (v34)
    operator delete(v34);

  _Block_object_dispose(&a20, 8);
  if (__p)
  {
    a27 = (uint64_t)__p;
    operator delete(__p);
  }
  _Block_object_dispose(&a29, 8);

  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__5(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__5(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void sub_243A5C208(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_243A5C370(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_243A5C6D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,uint64_t a28,char a29)
{
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;

  if (v34)
    operator delete(v34);

  _Block_object_dispose(&a20, 8);
  if (__p)
  {
    a27 = (uint64_t)__p;
    operator delete(__p);
  }
  _Block_object_dispose(&a29, 8);

  _Unwind_Resume(a1);
}

void sub_243A5C92C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

char *std::vector<std::pair<double,double>>::__init_with_size[abi:ne180100]<std::pair<double,double>*,std::pair<double,double>*>(char *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  char *v6;
  _OWORD *v7;
  __int128 v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::pair<double,double>>::__vallocate[abi:ne180100](result, a4);
    v7 = (_OWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      *v7++ = v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_243A5CAEC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<std::pair<double,double>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 60)
    std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<double,double>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<double,double>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(16 * a2);
}

void *std::get_temporary_buffer[abi:ne180100]<std::pair<double,double>>(uint64_t a1)
{
  unint64_t v1;
  const std::nothrow_t *v2;
  void *result;
  BOOL v4;

  if (a1 < 1)
    return 0;
  if (a1 >= 0x7FFFFFFFFFFFFFFLL)
    v1 = 0x7FFFFFFFFFFFFFFLL;
  else
    v1 = a1;
  v2 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
  while (1)
  {
    result = operator new(16 * v1, v2);
    if (result)
      break;
    v4 = v1 > 1;
    v1 >>= 1;
    if (!v4)
      return 0;
  }
  return result;
}

double std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::pair<double,double> *>>(__n128 *a1, __n128 *a2, uint64_t a3, unint64_t a4, __n128 *a5, uint64_t a6, double result)
{
  double v9;
  unint64_t v14;
  __n128 *v15;
  unint64_t v16;
  double v17;
  double v18;

  if (a4 >= 2)
  {
    if (a4 == 2)
    {
      result = a2[-1].n128_f64[0];
      v9 = a1->n128_f64[0];
      if (result < a1->n128_f64[0] || v9 >= result && a2[-1].n128_f64[1] < a1->n128_f64[1])
      {
        a1->n128_f64[0] = result;
        a2[-1].n128_f64[0] = v9;
        result = a1->n128_f64[1];
        a1->n128_u64[1] = a2[-1].n128_u64[1];
        a2[-1].n128_f64[1] = result;
      }
    }
    else if ((uint64_t)a4 <= 0)
    {
      std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::pair<double,double> *>>(a1->n128_f64, a2->n128_f64);
    }
    else
    {
      v14 = a4 >> 1;
      v15 = &a1[a4 >> 1];
      v16 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        std::__stable_sort_move<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::pair<double,double> *>>(a1, v15, a3, v16, a5);
        std::__stable_sort_move<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::pair<double,double> *>>(&a1[a4 >> 1], a2, a3, a4 - (a4 >> 1), &a5[v14]);
        return std::__merge_move_assign[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,double> *,std::pair<double,double> *,std::__wrap_iter<std::pair<double,double> *>>(a5->n128_f64, a5[v14].n128_f64, a5[v14].n128_f64, a5[a4].n128_f64, a1->n128_f64, v18);
      }
      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::pair<double,double> *>>(a1, v15, a3, v16, a5, a6);
        v17 = std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::pair<double,double> *>>(&a1[a4 >> 1], a2, a3, a4 - (a4 >> 1), a5, a6);
        return std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::pair<double,double> *>>(a1->n128_f64, a1[a4 >> 1].n128_f64, a2->n128_f64, a3, a4 >> 1, a4 - (a4 >> 1), a5->n128_f64, a6, v17);
      }
    }
  }
  return result;
}

double *std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::pair<double,double> *>>(double *result, double *a2)
{
  double *v2;
  uint64_t v3;
  double *v4;
  double *v5;
  double v6;
  double v7;
  double v8;
  uint64_t v9;
  double v10;
  double v11;
  double *v12;

  if (result == a2)
    return result;
  v2 = result + 2;
  if (result + 2 == a2)
    return result;
  v3 = 0;
  v4 = result;
  do
  {
    v5 = v4;
    v4 = v2;
    v6 = *v2;
    v7 = *v5;
    if (*v2 >= *v5)
    {
      if (v7 < v6)
        goto LABEL_17;
      v8 = v5[3];
      if (v8 >= v5[1])
        goto LABEL_17;
    }
    else
    {
      v8 = v5[3];
    }
    *v2 = v7;
    v2[1] = v5[1];
    if (v5 == result)
    {
LABEL_13:
      v5 = result;
      goto LABEL_14;
    }
    v9 = v3;
    while (1)
    {
      v10 = *(double *)((char *)result + v9 - 16);
      if (v6 >= v10)
        break;
      v11 = *(double *)((char *)result + v9 - 8);
LABEL_12:
      v5 -= 2;
      v12 = (double *)((char *)result + v9);
      *v12 = v10;
      v12[1] = v11;
      v9 -= 16;
      if (!v9)
        goto LABEL_13;
    }
    if (v10 < v6)
      goto LABEL_14;
    v11 = *(double *)((char *)result + v9 - 8);
    if (v8 < v11)
      goto LABEL_12;
    v5 = (double *)((char *)result + v9);
LABEL_14:
    *v5 = v6;
    v5[1] = v8;
LABEL_17:
    v2 = v4 + 2;
    v3 += 16;
  }
  while (v4 + 2 != a2);
  return result;
}

void std::__stable_sort_move<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::pair<double,double> *>>(__n128 *a1, __n128 *a2, uint64_t a3, unint64_t a4, __n128 *a5)
{
  __n128 *v9;
  double v10;
  __n128 v11;
  __n128 v13;

  if (a4)
  {
    if (a4 == 2)
    {
      v9 = a2 - 1;
      v10 = a2[-1].n128_f64[0];
      if (v10 >= a1->n128_f64[0] && (a1->n128_f64[0] < v10 || a2[-1].n128_f64[1] >= a1->n128_f64[1]))
      {
        *a5 = *a1;
        v11 = *v9;
      }
      else
      {
        *a5 = *v9;
        v11 = *a1;
      }
      a5[1] = v11;
    }
    else if (a4 == 1)
    {
      *a5 = *a1;
    }
    else if ((uint64_t)a4 > 8)
    {
      std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::pair<double,double> *>>(a1, &a1[a4 >> 1], a3, a4 >> 1, a5, a4 >> 1);
      v13.n128_f64[0] = std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::pair<double,double> *>>(&a1[a4 >> 1], a2, a3, a4 - (a4 >> 1), &a5[a4 >> 1], a4 - (a4 >> 1));
      std::__merge_move_construct[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::pair<double,double> *>,std::__wrap_iter<std::pair<double,double> *>>(a1, &a1[a4 >> 1], &a1[a4 >> 1], a2, a5, v13);
    }
    else
    {
      std::__insertion_sort_move[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::pair<double,double> *>>(a1->n128_f64, a2->n128_f64, a5->n128_f64);
    }
  }
}

double std::__merge_move_assign[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,double> *,std::pair<double,double> *,std::__wrap_iter<std::pair<double,double> *>>(double *a1, double *a2, double *a3, double *a4, double *a5, double result)
{
  double v6;
  double v7;
  uint64_t v8;
  double *v9;
  double *v10;

  while (1)
  {
    if (a1 == a2)
    {
      while (a3 != a4)
      {
        *a5 = *a3;
        result = a3[1];
        a5[1] = result;
        a3 += 2;
        a5 += 2;
      }
      return result;
    }
    if (a3 == a4)
      break;
    v6 = *a3;
    v7 = *a1;
    if (*a3 >= *a1 && (v7 < v6 || a3[1] >= a1[1]))
    {
      *a5 = v7;
      result = a1[1];
      a5[1] = result;
      a1 += 2;
    }
    else
    {
      *a5 = v6;
      result = a3[1];
      a5[1] = result;
      a3 += 2;
    }
    a5 += 2;
  }
  if (a1 != a2)
  {
    v8 = 0;
    do
    {
      v9 = &a1[v8];
      v10 = &a5[v8];
      *v10 = a1[v8];
      result = a1[v8 + 1];
      v10[1] = result;
      v8 += 2;
    }
    while (v9 + 2 != a2);
  }
  return result;
}

double std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::pair<double,double> *>>(double *a1, double *a2, double *a3, uint64_t a4, uint64_t a5, uint64_t a6, double *a7, uint64_t a8, double result)
{
  uint64_t v9;
  unint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double *v19;
  double *v20;
  unint64_t v21;
  double v22;
  unint64_t v23;
  double *v24;
  uint64_t v25;
  unint64_t v26;
  double v27;
  unint64_t v28;
  double *v29;
  uint64_t *v30;
  double *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  double *v35;
  uint64_t v36;
  double *v37;
  uint64_t v38;

  if (a6)
  {
    v9 = a6;
    v38 = a8;
    do
    {
      if (v9 <= a8 || a5 <= a8)
        return std::__buffered_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::pair<double,double> *>>(a1, a2, a3, result, a4, a5, v9, a7);
      if (!a5)
        return result;
      v12 = 0;
      result = *a2;
      v13 = -a5;
      while (1)
      {
        v14 = a1[v12 / 8];
        if (result < v14 || v14 >= result && a2[1] < a1[v12 / 8 + 1])
          break;
        v12 += 16;
        if (__CFADD__(v13++, 1))
          return result;
      }
      v16 = -v13;
      if (-v13 >= v9)
      {
        if (v13 == -1)
        {
          v37 = &a1[v12 / 8];
          *v37 = result;
          *a2 = v14;
          result = a1[v12 / 8 + 1];
          v37[1] = a2[1];
          a2[1] = result;
          return result;
        }
        if (v13 > 0)
          v16 = 1 - v13;
        v25 = v16 >> 1;
        v20 = &a1[2 * (v16 >> 1) + v12 / 8];
        v19 = a2;
        if (a2 != a3)
        {
          v26 = ((char *)a3 - (char *)a2) >> 4;
          v27 = *v20;
          v19 = a2;
          do
          {
            v28 = v26 >> 1;
            v29 = &v19[2 * (v26 >> 1)];
            if (*v29 < v27 || v27 >= *v29 && v19[2 * v28 + 1] < v20[1])
            {
              v19 = v29 + 2;
              v28 = v26 + ~v28;
            }
            v26 = v28;
          }
          while (v28);
        }
        v18 = ((char *)v19 - (char *)a2) >> 4;
      }
      else
      {
        if (v9 >= 0)
          v17 = v9;
        else
          v17 = v9 + 1;
        v18 = v17 >> 1;
        v19 = &a2[2 * (v17 >> 1)];
        v20 = &a1[v12 / 8];
        if ((char *)a2 - (char *)a1 != v12)
        {
          v21 = (uint64_t)((char *)a2 - (char *)a1 - v12) >> 4;
          v22 = *v19;
          v20 = &a1[v12 / 8];
          do
          {
            v23 = v21 >> 1;
            v24 = &v20[2 * (v21 >> 1)];
            if (v22 >= *v24 && (*v24 < v22 || v19[1] >= v20[2 * v23 + 1]))
            {
              v20 = v24 + 2;
              v23 = v21 + ~v23;
            }
            v21 = v23;
          }
          while (v23);
        }
        v25 = (uint64_t)((char *)v20 - (char *)a1 - v12) >> 4;
      }
      v30 = (uint64_t *)v19;
      if (v20 != a2)
      {
        v30 = (uint64_t *)v20;
        if (v19 != a2)
        {
          v31 = a3;
          v32 = v18;
          v33 = std::__rotate_forward[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<std::pair<double,double> *>>((uint64_t *)v20, (uint64_t *)a2, (uint64_t *)v19);
          v18 = v32;
          a3 = v31;
          a8 = v38;
          v30 = v33;
        }
      }
      a5 = -(v25 + v13);
      v34 = v9 - v18;
      if (v25 + v18 >= v9 - (v25 + v18) - v13)
      {
        v36 = v18;
        std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::pair<double,double> *>>(v30, v19, a3, a4, -(v25 + v13), v34, a7, a8);
        v19 = v20;
        v34 = v36;
        a5 = v25;
        a3 = (double *)v30;
        a1 = (double *)((char *)a1 + v12);
      }
      else
      {
        v35 = a3;
        std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::pair<double,double> *>>(&a1[v12 / 8], v20, v30, a4, v25, v18, a7, a8);
        a3 = v35;
        a1 = (double *)v30;
      }
      v9 = v34;
      a2 = v19;
      a8 = v38;
    }
    while (v34);
  }
  return result;
}

double *std::__insertion_sort_move[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::pair<double,double> *>>(double *result, double *a2, double *a3)
{
  double *v3;
  uint64_t v4;
  double *v5;
  double *v6;
  double *v7;
  double v8;
  double v9;
  double *v10;
  uint64_t v11;
  double v12;
  double v13;
  double *v14;

  if (result == a2)
    return result;
  *(_OWORD *)a3 = *(_OWORD *)result;
  v3 = result + 2;
  if (result + 2 == a2)
    return result;
  v4 = 0;
  v5 = a3;
  v6 = a3;
  do
  {
    v7 = v3;
    v8 = *v6;
    v6 += 2;
    v9 = v8;
    if (*v3 >= v8 && (v9 < *v3 || result[3] >= v5[1]))
    {
      *(_OWORD *)v6 = *(_OWORD *)v3;
      goto LABEL_18;
    }
    *(_OWORD *)v6 = *(_OWORD *)v5;
    v10 = a3;
    if (v5 == a3)
      goto LABEL_17;
    v11 = v4;
    while (1)
    {
      v12 = *(double *)((char *)a3 + v11 - 16);
      if (*v7 >= v12)
        break;
      v13 = *(double *)((char *)a3 + v11 - 8);
LABEL_11:
      v5 -= 2;
      v14 = (double *)((char *)a3 + v11);
      *v14 = v12;
      v14[1] = v13;
      v11 -= 16;
      if (!v11)
      {
        v10 = a3;
        goto LABEL_17;
      }
    }
    if (v12 >= *v7)
    {
      v10 = (double *)((char *)a3 + v11);
      v13 = *(double *)((char *)a3 + v11 - 8);
      if (result[3] >= v13)
        goto LABEL_17;
      goto LABEL_11;
    }
    v10 = v5;
LABEL_17:
    *v10 = *v7;
    v10[1] = result[3];
LABEL_18:
    v3 = v7 + 2;
    v4 += 16;
    v5 = v6;
    result = v7;
  }
  while (v7 + 2 != a2);
  return result;
}

__n128 std::__merge_move_construct[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::pair<double,double> *>,std::__wrap_iter<std::pair<double,double> *>>(__n128 *a1, __n128 *a2, __n128 *a3, __n128 *a4, __n128 *a5, __n128 result)
{
  __n128 v6;
  __n128 v7;
  __n128 v8;
  uint64_t v9;

  while (1)
  {
    if (a1 == a2)
    {
      while (a3 != a4)
      {
        v8 = *a3++;
        result.n128_u64[0] = v8.n128_u64[0];
        *a5++ = v8;
      }
      return result;
    }
    if (a3 == a4)
      break;
    if (a3->n128_f64[0] >= a1->n128_f64[0] && (a1->n128_f64[0] < a3->n128_f64[0] || a3->n128_f64[1] >= a1->n128_f64[1]))
    {
      v7 = *a1++;
      result = v7;
    }
    else
    {
      v6 = *a3++;
      result = v6;
    }
    *a5++ = result;
  }
  if (a1 != a2)
  {
    v9 = 0;
    do
    {
      result = a1[v9];
      a5[v9++] = result;
    }
    while (&a1[v9] != a2);
  }
  return result;
}

double std::__buffered_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::pair<double,double> *>>(double *a1, double *a2, double *a3, double a4, uint64_t a5, uint64_t a6, uint64_t a7, double *a8)
{
  double *v10;
  double *v11;
  __int128 v12;
  double *v14;
  double *v15;
  __int128 v16;

  if (a6 <= a7)
  {
    v14 = a8;
    if (a1 != a2)
    {
      v14 = a8;
      v15 = a1;
      do
      {
        v16 = *(_OWORD *)v15;
        v15 += 2;
        a4 = *(double *)&v16;
        *(_OWORD *)v14 = v16;
        v14 += 2;
      }
      while (v15 != a2);
    }
    return std::__half_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,double> *,std::pair<double,double> *,std::__wrap_iter<std::pair<double,double> *>,std::__wrap_iter<std::pair<double,double> *>,std::__wrap_iter<std::pair<double,double> *>>(a8, v14, a2, a3, a1, a4);
  }
  else
  {
    v10 = a8;
    if (a2 != a3)
    {
      v10 = a8;
      v11 = a2;
      do
      {
        v12 = *(_OWORD *)v11;
        v11 += 2;
        a4 = *(double *)&v12;
        *(_OWORD *)v10 = v12;
        v10 += 2;
      }
      while (v11 != a3);
    }
    return std::__half_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::__invert<std::__less<void,void> &>,std::reverse_iterator<std::pair<double,double> *>,std::reverse_iterator<std::pair<double,double> *>,std::reverse_iterator<std::__wrap_iter<std::pair<double,double> *>>,std::reverse_iterator<std::__wrap_iter<std::pair<double,double> *>>,std::reverse_iterator<std::__wrap_iter<std::pair<double,double> *>>>(a4, (uint64_t)v10, (uint64_t)v10, (uint64_t)a8, (uint64_t)a8, (uint64_t)a2, (uint64_t)a2, (uint64_t)a1, (uint64_t)a1, (uint64_t)a3, (uint64_t)a3);
  }
}

double std::__half_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,double> *,std::pair<double,double> *,std::__wrap_iter<std::pair<double,double> *>,std::__wrap_iter<std::pair<double,double> *>,std::__wrap_iter<std::pair<double,double> *>>(double *a1, double *a2, double *a3, double *a4, double *a5, double result)
{
  double v6;
  double v7;
  uint64_t v8;
  double *v9;
  double *v10;

  while (a1 != a2)
  {
    if (a3 == a4)
    {
      v8 = 0;
      do
      {
        v9 = &a5[v8];
        v10 = &a1[v8];
        *v9 = a1[v8];
        result = a1[v8 + 1];
        v9[1] = result;
        v8 += 2;
      }
      while (v10 + 2 != a2);
      return result;
    }
    v6 = *a3;
    v7 = *a1;
    if (*a3 < *a1 || v7 >= v6 && a3[1] < a1[1])
    {
      *a5 = v6;
      result = a3[1];
      a5[1] = result;
      a3 += 2;
    }
    else
    {
      *a5 = v7;
      result = a1[1];
      a5[1] = result;
      a1 += 2;
    }
    a5 += 2;
  }
  return result;
}

double std::__half_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::__invert<std::__less<void,void> &>,std::reverse_iterator<std::pair<double,double> *>,std::reverse_iterator<std::pair<double,double> *>,std::reverse_iterator<std::__wrap_iter<std::pair<double,double> *>>,std::reverse_iterator<std::__wrap_iter<std::pair<double,double> *>>,std::reverse_iterator<std::__wrap_iter<std::pair<double,double> *>>>(double result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  double *v11;
  double v12;
  double v13;
  uint64_t v14;
  unint64_t v15;
  double *v16;

  if (a3 != a5)
  {
    v11 = (double *)(a11 - 8);
    while (a7 != a9)
    {
      v12 = *(double *)(a7 - 16);
      v13 = *(double *)(a3 - 16);
      if (v13 >= v12 && (v12 < v13 || *(double *)(a3 - 8) >= *(double *)(a7 - 8)))
      {
        v14 = a3;
        a3 -= 16;
      }
      else
      {
        v13 = *(double *)(a7 - 16);
        v14 = a7;
        a7 -= 16;
      }
      *(v11 - 1) = v13;
      result = *(double *)(v14 - 8);
      *v11 = result;
      v11 -= 2;
      if (a3 == a5)
        return result;
    }
    v15 = 0;
    do
    {
      v16 = &v11[v15 / 8];
      *(v16 - 1) = *(double *)(a3 + v15 - 16);
      result = *(double *)(a3 + v15 - 8);
      *v16 = result;
      v15 -= 16;
    }
    while (a3 + v15 != a5);
  }
  return result;
}

uint64_t *std::__rotate_forward[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<std::pair<double,double> *>>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *result;
  uint64_t *i;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *a1;
  *a1 = *a2;
  *a2 = v3;
  v4 = a1[1];
  a1[1] = a2[1];
  a2[1] = v4;
  result = a1 + 2;
  for (i = a2 + 2; i != a3; i += 2)
  {
    if (result == a2)
      a2 = i;
    v7 = *result;
    *result = *i;
    *i = v7;
    v8 = result[1];
    result[1] = i[1];
    i[1] = v8;
    result += 2;
  }
  if (result != a2)
  {
    v9 = result;
    v10 = a2;
    do
    {
      while (1)
      {
        v11 = *v9;
        *v9 = *v10;
        *v10 = v11;
        v12 = v9[1];
        v9[1] = v10[1];
        v10[1] = v12;
        v9 += 2;
        v10 += 2;
        if (v10 == a3)
          break;
        if (v9 == a2)
          a2 = v10;
      }
      v10 = a2;
    }
    while (v9 != a2);
  }
  return result;
}

void sub_243A5DC28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v7 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__6(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__6(uint64_t a1)
{

}

id logHandle()
{
  if (logHandle_onceToken != -1)
    dispatch_once(&logHandle_onceToken, &__block_literal_global_33);
  return (id)logHandle__logHandle;
}

void __logHandle_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.PerfPowerServicesReader", "client");
  v1 = (void *)logHandle__logHandle;
  logHandle__logHandle = (uint64_t)v0;

}

void OUTLINED_FUNCTION_0_5(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, a5, 0x16u);
}

id PerfPowerServicesGetData(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  void *v5;

  v3 = a1;
  v4 = (void *)objc_opt_new();
  objc_msgSend(v4, "postDataRequest:outError:", v3, a2);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

id PerfPowerServicesGetLogLines(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  id v15;
  _QWORD v17[4];
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;

  v3 = a1;
  if (a2)
  {
    objc_msgSend(MEMORY[0x24BDBCF48], "fileURLWithPath:isDirectory:", a2, 0);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = (void *)objc_opt_new();
    objc_msgSend(MEMORY[0x24BE719D8], "getSubsystemsForFilepath:", v4);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    +[PPSTimestampConverterRegistry converterForFilepath:](PPSTimestampConverterRegistry, "converterForFilepath:", v4);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_alloc_init(MEMORY[0x24BDD1500]);
    objc_msgSend(v8, "setDateFormat:", CFSTR("MM/dd/yy HH:mm:ss"));
    objc_msgSend(MEMORY[0x24BDBCF38], "timeZoneWithAbbreviation:", CFSTR("GMT"));
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "setTimeZone:", v9);

    v17[0] = MEMORY[0x24BDAC760];
    v17[1] = 3221225472;
    v17[2] = __PerfPowerServicesGetLogLines_block_invoke;
    v17[3] = &unk_25142D058;
    v18 = v3;
    v19 = v4;
    v20 = v8;
    v21 = v7;
    v10 = v5;
    v22 = v10;
    v11 = v7;
    v12 = v8;
    v13 = v4;
    objc_msgSend(v6, "enumerateObjectsUsingBlock:", v17);
    v14 = v22;
    v15 = v10;

  }
  else
  {
    v15 = 0;
  }

  return v15;
}

uint64_t boost::archive::archive_exception::append(boost::archive::archive_exception *this, uint64_t a2, char *a3)
{
  char v3;

  if (a2 <= 0x7E)
  {
    a2 = a2;
    while (1)
    {
      v3 = *a3;
      if (!*a3)
        break;
      ++a3;
      *((_BYTE *)this + a2++ + 8) = v3;
      if ((_DWORD)a2 == 127)
      {
        a2 = 127;
        break;
      }
    }
  }
  *((_BYTE *)this + a2 + 8) = 0;
  return a2;
}

uint64_t boost::archive::archive_exception::archive_exception(uint64_t result, uint64_t *a2, int a3, const char *a4, const char *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t j;
  uint64_t v17;
  uint64_t v18;
  uint64_t k;
  uint64_t v20;
  uint64_t m;
  uint64_t v22;
  const char *v23;
  const char *v24;
  uint64_t n;
  uint64_t v26;
  const char *v27;
  unsigned int v28;
  uint64_t ii;
  uint64_t v30;
  uint64_t jj;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  int v42;
  int v43;
  uint64_t v44;
  char v45;

  v5 = *a2;
  *(_QWORD *)result = *a2;
  *(_QWORD *)(result + *(_QWORD *)(v5 - 40)) = a2[1];
  *(_DWORD *)(result + 136) = a3;
  switch(a3)
  {
    case 0:
      v6 = 0;
      v7 = 23;
      do
      {
        *(_BYTE *)(result + 8 + v6) = aUninitializedE[v6];
        ++v6;
      }
      while (v6 != 23);
      goto LABEL_115;
    case 1:
      v9 = 0;
      v7 = 25;
      do
      {
        *(_BYTE *)(result + 8 + v9) = aUnknownDerived[v9];
        ++v9;
      }
      while (v9 != 25);
      goto LABEL_115;
    case 2:
      for (i = 0; i != 18; ++i)
        *(_BYTE *)(result + 8 + i) = aUnregisteredCl[i];
      *(_BYTE *)(result + 26) = 0;
      if (!a4)
        return result;
      v11 = 0;
      *(_DWORD *)(result + 26) = 2108704;
      v7 = 127;
      while (a4[v11])
      {
        *(_BYTE *)(result + 29 + v11) = a4[v11];
        v12 = (_DWORD)v11++ == 105;
        if (v12)
          goto LABEL_115;
      }
      v7 = (v11 + 21);
      goto LABEL_115;
    case 3:
      v13 = 0;
      v7 = 17;
      do
      {
        *(_BYTE *)(result + 8 + v13) = aInvalidSignatu[v13];
        ++v13;
      }
      while (v13 != 17);
      goto LABEL_115;
    case 4:
      v14 = 0;
      v7 = 19;
      do
      {
        *(_BYTE *)(result + 8 + v14) = aUnsupportedVer[v14];
        ++v14;
      }
      while (v14 != 19);
      goto LABEL_115;
    case 5:
      v15 = 0;
      v7 = 16;
      do
      {
        *(_BYTE *)(result + 8 + v15) = aPointerConflic[v15];
        ++v15;
      }
      while (v15 != 16);
      goto LABEL_115;
    case 6:
      for (j = 0; j != 26; ++j)
        *(_BYTE *)(result + 8 + j) = aIncompatibleNa[j];
      *(_BYTE *)(result + 34) = 0;
      if (!a4)
        return result;
      v17 = 0;
      *(_DWORD *)(result + 34) = 2108704;
      v7 = 127;
      while (a4[v17])
      {
        *(_BYTE *)(result + 37 + v17) = a4[v17];
        v12 = (_DWORD)v17++ == 97;
        if (v12)
          goto LABEL_115;
      }
      v7 = v17 + 29;
      goto LABEL_115;
    case 7:
      v18 = 0;
      v7 = 20;
      do
      {
        *(_BYTE *)(result + 8 + v18) = aArraySizeTooSh[v18];
        ++v18;
      }
      while (v18 != 20);
      goto LABEL_115;
    case 8:
      for (k = 0; k != 18; ++k)
        *(_BYTE *)(result + 8 + k) = aInputStreamErr[k];
      *(_BYTE *)(result + 26) = 0;
      if (!a4)
      {
        if (!a5)
          return result;
        LODWORD(v7) = 18;
        goto LABEL_101;
      }
      v7 = 0;
      *(_WORD *)(result + 26) = 45;
      while (a4[v7])
      {
        *(_BYTE *)(result + 27 + v7) = a4[v7];
        v12 = (_DWORD)v7++ == 107;
        if (v12)
        {
          LODWORD(v7) = 127;
          goto LABEL_99;
        }
      }
      LODWORD(v7) = v7 + 19;
LABEL_99:
      *(_BYTE *)(result + v7 + 8) = 0;
      if (!a5)
        return result;
      if (v7 > 0x7E)
        goto LABEL_113;
LABEL_101:
      v34 = 0;
      v35 = v7;
      v36 = result + v7 + 8;
      while (v34 != 1)
      {
        v37 = v35 + v34;
        *(_BYTE *)(v36 + v34) = asc_243A7A1F2[v34];
        ++v34;
        if (v37 == 126)
          goto LABEL_112;
      }
      LODWORD(v7) = v35 + 1;
      *(_BYTE *)(v35 + 1 + result + 8) = 0;
      if ((v35 + 1) >= 0x7F)
        goto LABEL_114;
      v41 = 0;
      do
      {
        if (!a5[v41])
          goto LABEL_135;
        v42 = v7 + v41;
        *(_BYTE *)(v35 + result + 8 + v41 + 1) = a5[v41];
        ++v41;
      }
      while (v42 != 126);
      goto LABEL_134;
    case 9:
      v20 = 0;
      v7 = 19;
      do
      {
        *(_BYTE *)(result + 8 + v20) = aClassNameTooLo[v20];
        ++v20;
      }
      while (v20 != 19);
      goto LABEL_115;
    case 10:
      for (m = 0; m != 23; ++m)
        *(_BYTE *)(result + 8 + m) = aUnregisteredVo[m];
      v22 = 0;
      *(_BYTE *)(result + 31) = 0;
      v23 = "?";
      if (a4)
        v24 = a4;
      else
        v24 = "?";
      while (v24[v22])
      {
        *(_BYTE *)(result + 31 + v22) = v24[v22];
        v12 = (_DWORD)v22++ == 103;
        if (v12)
        {
          *(_BYTE *)(result + 135) = 0;
LABEL_112:
          LODWORD(v7) = 127;
          goto LABEL_113;
        }
      }
      LODWORD(v7) = v22 + 23;
      *(_BYTE *)(result + (v22 + 23) + 8) = 0;
      if ((v22 + 23) >= 0x7F)
      {
LABEL_113:
        *(_BYTE *)(result + v7 + 8) = 0;
        goto LABEL_114;
      }
      v32 = 0;
      while ((_DWORD)v32 != 2)
      {
        v33 = v7 + v32;
        *(_BYTE *)(result + v7 + 8 + v32) = asc_243A7ACEC[v32];
        ++v32;
        if (v33 == 126)
          goto LABEL_112;
      }
      *(_BYTE *)(result + (v22 + 25) + 8) = 0;
      if ((v22 + 25) >= 0x7F)
      {
        LODWORD(v7) = v22 + 25;
      }
      else
      {
        if (a5)
          v23 = a5;
        v7 = (v22 + 25);
        v44 = v7 + 8;
        while (1)
        {
          v45 = *v23;
          if (!*v23)
            break;
          ++v23;
          *(_BYTE *)(result + v44) = v45;
          LODWORD(v7) = v7 + 1;
          v12 = (_DWORD)v44++ == 134;
          if (v12)
          {
LABEL_134:
            LODWORD(v7) = 127;
            goto LABEL_114;
          }
        }
      }
      goto LABEL_114;
    case 11:
      for (n = 0; n != 14; ++n)
        *(_BYTE *)(result + 8 + n) = aClassVersion[n];
      v26 = 0;
      *(_BYTE *)(result + 22) = 0;
      if (a4)
        v27 = a4;
      else
        v27 = "<unknown class>";
      v28 = 127;
      while (v27[v26])
      {
        *(_BYTE *)(result + 22 + v26) = v27[v26];
        v12 = (_DWORD)v26++ == 112;
        if (v12)
          goto LABEL_91;
      }
      v28 = v26 + 14;
LABEL_91:
      v7 = v28;
      goto LABEL_115;
    case 12:
      for (ii = 0; ii != 41; ++ii)
        *(_BYTE *)(result + 8 + ii) = aCodeInstantiat[ii];
      *(_BYTE *)(result + 49) = 0;
      if (!a4)
        return result;
      v30 = 0;
      *(_DWORD *)(result + 49) = 2108704;
      v7 = 127;
      while (a4[v30])
      {
        *(_BYTE *)(result + 52 + v30) = a4[v30];
        v12 = (_DWORD)v30++ == 82;
        if (v12)
          goto LABEL_115;
      }
      v7 = v30 + 44;
      goto LABEL_115;
    case 13:
      for (jj = 0; jj != 19; ++jj)
        *(_BYTE *)(result + 8 + jj) = aOutputStreamEr[jj];
      *(_BYTE *)(result + 27) = 0;
      if (!a4)
      {
        if (!a5)
          return result;
        LODWORD(v7) = 19;
        goto LABEL_109;
      }
      v7 = 0;
      *(_WORD *)(result + 27) = 45;
      break;
    default:
      v8 = 0;
      v7 = 17;
      do
      {
        *(_BYTE *)(result + 8 + v8) = aProgrammingErr[v8];
        ++v8;
      }
      while (v8 != 17);
      goto LABEL_115;
  }
  while (a4[v7])
  {
    *(_BYTE *)(result + 28 + v7) = a4[v7];
    v12 = (_DWORD)v7++ == 106;
    if (v12)
    {
      LODWORD(v7) = 127;
      goto LABEL_107;
    }
  }
  LODWORD(v7) = v7 + 20;
LABEL_107:
  *(_BYTE *)(result + v7 + 8) = 0;
  if (!a5)
    return result;
  if (v7 > 0x7E)
    goto LABEL_113;
LABEL_109:
  v38 = 0;
  v35 = v7;
  v39 = result + v7 + 8;
  while (v38 != 1)
  {
    v40 = v35 + v38;
    *(_BYTE *)(v39 + v38) = asc_243A7A1F2[v38];
    ++v38;
    if (v40 == 126)
      goto LABEL_112;
  }
  LODWORD(v7) = v35 + 1;
  *(_BYTE *)(v35 + 1 + result + 8) = 0;
  if ((v35 + 1) < 0x7F)
  {
    v41 = 0;
    while (a5[v41])
    {
      v43 = v7 + v41;
      *(_BYTE *)(v35 + result + 8 + v41 + 1) = a5[v41];
      ++v41;
      if (v43 == 126)
        goto LABEL_134;
    }
LABEL_135:
    LODWORD(v7) = v35 + 1 + v41;
  }
LABEL_114:
  v7 = v7;
LABEL_115:
  *(_BYTE *)(result + v7 + 8) = 0;
  return result;
}

uint64_t boost::archive::archive_exception::archive_exception(uint64_t result, int a2, const char *a3, const char *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t j;
  uint64_t v15;
  uint64_t v16;
  uint64_t k;
  uint64_t v18;
  uint64_t m;
  uint64_t v20;
  const char *v21;
  const char *v22;
  uint64_t n;
  uint64_t v24;
  const char *v25;
  unsigned int v26;
  uint64_t ii;
  uint64_t v28;
  uint64_t jj;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  int v41;
  uint64_t v42;
  char v43;

  *(_QWORD *)result = off_25142D0A0;
  *(_DWORD *)(result + 136) = a2;
  switch(a2)
  {
    case 0:
      v4 = 0;
      v5 = 23;
      do
      {
        *(_BYTE *)(result + 8 + v4) = aUninitializedE[v4];
        ++v4;
      }
      while (v4 != 23);
      goto LABEL_115;
    case 1:
      v7 = 0;
      v5 = 25;
      do
      {
        *(_BYTE *)(result + 8 + v7) = aUnknownDerived[v7];
        ++v7;
      }
      while (v7 != 25);
      goto LABEL_115;
    case 2:
      for (i = 0; i != 18; ++i)
        *(_BYTE *)(result + 8 + i) = aUnregisteredCl[i];
      *(_BYTE *)(result + 26) = 0;
      if (!a3)
        return result;
      v9 = 0;
      *(_DWORD *)(result + 26) = 2108704;
      v5 = 127;
      while (a3[v9])
      {
        *(_BYTE *)(result + 29 + v9) = a3[v9];
        v10 = (_DWORD)v9++ == 105;
        if (v10)
          goto LABEL_115;
      }
      v5 = (v9 + 21);
      goto LABEL_115;
    case 3:
      v11 = 0;
      v5 = 17;
      do
      {
        *(_BYTE *)(result + 8 + v11) = aInvalidSignatu[v11];
        ++v11;
      }
      while (v11 != 17);
      goto LABEL_115;
    case 4:
      v12 = 0;
      v5 = 19;
      do
      {
        *(_BYTE *)(result + 8 + v12) = aUnsupportedVer[v12];
        ++v12;
      }
      while (v12 != 19);
      goto LABEL_115;
    case 5:
      v13 = 0;
      v5 = 16;
      do
      {
        *(_BYTE *)(result + 8 + v13) = aPointerConflic[v13];
        ++v13;
      }
      while (v13 != 16);
      goto LABEL_115;
    case 6:
      for (j = 0; j != 26; ++j)
        *(_BYTE *)(result + 8 + j) = aIncompatibleNa[j];
      *(_BYTE *)(result + 34) = 0;
      if (!a3)
        return result;
      v15 = 0;
      *(_DWORD *)(result + 34) = 2108704;
      v5 = 127;
      while (a3[v15])
      {
        *(_BYTE *)(result + 37 + v15) = a3[v15];
        v10 = (_DWORD)v15++ == 97;
        if (v10)
          goto LABEL_115;
      }
      v5 = v15 + 29;
      goto LABEL_115;
    case 7:
      v16 = 0;
      v5 = 20;
      do
      {
        *(_BYTE *)(result + 8 + v16) = aArraySizeTooSh[v16];
        ++v16;
      }
      while (v16 != 20);
      goto LABEL_115;
    case 8:
      for (k = 0; k != 18; ++k)
        *(_BYTE *)(result + 8 + k) = aInputStreamErr[k];
      *(_BYTE *)(result + 26) = 0;
      if (!a3)
      {
        if (!a4)
          return result;
        LODWORD(v5) = 18;
        goto LABEL_101;
      }
      v5 = 0;
      *(_WORD *)(result + 26) = 45;
      while (a3[v5])
      {
        *(_BYTE *)(result + 27 + v5) = a3[v5];
        v10 = (_DWORD)v5++ == 107;
        if (v10)
        {
          LODWORD(v5) = 127;
          goto LABEL_99;
        }
      }
      LODWORD(v5) = v5 + 19;
LABEL_99:
      *(_BYTE *)(result + v5 + 8) = 0;
      if (!a4)
        return result;
      if (v5 > 0x7E)
        goto LABEL_113;
LABEL_101:
      v32 = 0;
      v33 = v5;
      v34 = result + v5 + 8;
      while (v32 != 1)
      {
        v35 = v33 + v32;
        *(_BYTE *)(v34 + v32) = asc_243A7A1F2[v32];
        ++v32;
        if (v35 == 126)
          goto LABEL_112;
      }
      LODWORD(v5) = v33 + 1;
      *(_BYTE *)(v33 + 1 + result + 8) = 0;
      if ((v33 + 1) >= 0x7F)
        goto LABEL_114;
      v39 = 0;
      do
      {
        if (!a4[v39])
          goto LABEL_135;
        v40 = v5 + v39;
        *(_BYTE *)(v33 + result + 8 + v39 + 1) = a4[v39];
        ++v39;
      }
      while (v40 != 126);
      goto LABEL_134;
    case 9:
      v18 = 0;
      v5 = 19;
      do
      {
        *(_BYTE *)(result + 8 + v18) = aClassNameTooLo[v18];
        ++v18;
      }
      while (v18 != 19);
      goto LABEL_115;
    case 10:
      for (m = 0; m != 23; ++m)
        *(_BYTE *)(result + 8 + m) = aUnregisteredVo[m];
      v20 = 0;
      *(_BYTE *)(result + 31) = 0;
      v21 = "?";
      if (a3)
        v22 = a3;
      else
        v22 = "?";
      while (v22[v20])
      {
        *(_BYTE *)(result + 31 + v20) = v22[v20];
        v10 = (_DWORD)v20++ == 103;
        if (v10)
        {
          *(_BYTE *)(result + 135) = 0;
LABEL_112:
          LODWORD(v5) = 127;
          goto LABEL_113;
        }
      }
      LODWORD(v5) = v20 + 23;
      *(_BYTE *)(result + (v20 + 23) + 8) = 0;
      if ((v20 + 23) >= 0x7F)
      {
LABEL_113:
        *(_BYTE *)(result + v5 + 8) = 0;
        goto LABEL_114;
      }
      v30 = 0;
      while ((_DWORD)v30 != 2)
      {
        v31 = v5 + v30;
        *(_BYTE *)(result + v5 + 8 + v30) = asc_243A7ACEC[v30];
        ++v30;
        if (v31 == 126)
          goto LABEL_112;
      }
      *(_BYTE *)(result + (v20 + 25) + 8) = 0;
      if ((v20 + 25) >= 0x7F)
      {
        LODWORD(v5) = v20 + 25;
      }
      else
      {
        if (a4)
          v21 = a4;
        v5 = (v20 + 25);
        v42 = v5 + 8;
        while (1)
        {
          v43 = *v21;
          if (!*v21)
            break;
          ++v21;
          *(_BYTE *)(result + v42) = v43;
          LODWORD(v5) = v5 + 1;
          v10 = (_DWORD)v42++ == 134;
          if (v10)
          {
LABEL_134:
            LODWORD(v5) = 127;
            goto LABEL_114;
          }
        }
      }
      goto LABEL_114;
    case 11:
      for (n = 0; n != 14; ++n)
        *(_BYTE *)(result + 8 + n) = aClassVersion[n];
      v24 = 0;
      *(_BYTE *)(result + 22) = 0;
      if (a3)
        v25 = a3;
      else
        v25 = "<unknown class>";
      v26 = 127;
      while (v25[v24])
      {
        *(_BYTE *)(result + 22 + v24) = v25[v24];
        v10 = (_DWORD)v24++ == 112;
        if (v10)
          goto LABEL_91;
      }
      v26 = v24 + 14;
LABEL_91:
      v5 = v26;
      goto LABEL_115;
    case 12:
      for (ii = 0; ii != 41; ++ii)
        *(_BYTE *)(result + 8 + ii) = aCodeInstantiat[ii];
      *(_BYTE *)(result + 49) = 0;
      if (!a3)
        return result;
      v28 = 0;
      *(_DWORD *)(result + 49) = 2108704;
      v5 = 127;
      while (a3[v28])
      {
        *(_BYTE *)(result + 52 + v28) = a3[v28];
        v10 = (_DWORD)v28++ == 82;
        if (v10)
          goto LABEL_115;
      }
      v5 = v28 + 44;
      goto LABEL_115;
    case 13:
      for (jj = 0; jj != 19; ++jj)
        *(_BYTE *)(result + 8 + jj) = aOutputStreamEr[jj];
      *(_BYTE *)(result + 27) = 0;
      if (!a3)
      {
        if (!a4)
          return result;
        LODWORD(v5) = 19;
        goto LABEL_109;
      }
      v5 = 0;
      *(_WORD *)(result + 27) = 45;
      break;
    default:
      v6 = 0;
      v5 = 17;
      do
      {
        *(_BYTE *)(result + 8 + v6) = aProgrammingErr[v6];
        ++v6;
      }
      while (v6 != 17);
      goto LABEL_115;
  }
  while (a3[v5])
  {
    *(_BYTE *)(result + 28 + v5) = a3[v5];
    v10 = (_DWORD)v5++ == 106;
    if (v10)
    {
      LODWORD(v5) = 127;
      goto LABEL_107;
    }
  }
  LODWORD(v5) = v5 + 20;
LABEL_107:
  *(_BYTE *)(result + v5 + 8) = 0;
  if (!a4)
    return result;
  if (v5 > 0x7E)
    goto LABEL_113;
LABEL_109:
  v36 = 0;
  v33 = v5;
  v37 = result + v5 + 8;
  while (v36 != 1)
  {
    v38 = v33 + v36;
    *(_BYTE *)(v37 + v36) = asc_243A7A1F2[v36];
    ++v36;
    if (v38 == 126)
      goto LABEL_112;
  }
  LODWORD(v5) = v33 + 1;
  *(_BYTE *)(v33 + 1 + result + 8) = 0;
  if ((v33 + 1) < 0x7F)
  {
    v39 = 0;
    while (a4[v39])
    {
      v41 = v5 + v39;
      *(_BYTE *)(v33 + result + 8 + v39 + 1) = a4[v39];
      ++v39;
      if (v41 == 126)
        goto LABEL_134;
    }
LABEL_135:
    LODWORD(v5) = v33 + 1 + v39;
  }
LABEL_114:
  v5 = v5;
LABEL_115:
  *(_BYTE *)(result + v5 + 8) = 0;
  return result;
}

__n128 boost::archive::archive_exception::archive_exception(boost::archive::archive_exception *this, const boost::archive::archive_exception *a2, uint64_t a3)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __n128 result;
  __int128 v8;
  __int128 v9;

  v3 = *(_QWORD *)a2;
  *(_QWORD *)this = *(_QWORD *)a2;
  *(_QWORD *)((char *)this + *(_QWORD *)(v3 - 40)) = *((_QWORD *)a2 + 1);
  *((_DWORD *)this + 34) = *(_DWORD *)(a3 + 136);
  v4 = *(_OWORD *)(a3 + 8);
  v5 = *(_OWORD *)(a3 + 24);
  v6 = *(_OWORD *)(a3 + 40);
  *(_OWORD *)((char *)this + 56) = *(_OWORD *)(a3 + 56);
  *(_OWORD *)((char *)this + 40) = v6;
  *(_OWORD *)((char *)this + 24) = v5;
  *(_OWORD *)((char *)this + 8) = v4;
  result = *(__n128 *)(a3 + 72);
  v8 = *(_OWORD *)(a3 + 88);
  v9 = *(_OWORD *)(a3 + 104);
  *(_OWORD *)((char *)this + 120) = *(_OWORD *)(a3 + 120);
  *(_OWORD *)((char *)this + 104) = v9;
  *(_OWORD *)((char *)this + 88) = v8;
  *(__n128 *)((char *)this + 72) = result;
  return result;
}

__n128 boost::archive::archive_exception::archive_exception(boost::archive::archive_exception *this, const boost::archive::archive_exception *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  *(_QWORD *)this = off_25142D0A0;
  *((_DWORD *)this + 34) = *((_DWORD *)a2 + 34);
  v2 = *(_OWORD *)((char *)a2 + 8);
  v3 = *(_OWORD *)((char *)a2 + 24);
  v4 = *(_OWORD *)((char *)a2 + 40);
  *(_OWORD *)((char *)this + 56) = *(_OWORD *)((char *)a2 + 56);
  *(_OWORD *)((char *)this + 40) = v4;
  *(_OWORD *)((char *)this + 24) = v3;
  *(_OWORD *)((char *)this + 8) = v2;
  result = *(__n128 *)((char *)a2 + 72);
  v6 = *(_OWORD *)((char *)a2 + 88);
  v7 = *(_OWORD *)((char *)a2 + 104);
  *(_OWORD *)((char *)this + 120) = *(_OWORD *)((char *)a2 + 120);
  *(_OWORD *)((char *)this + 104) = v7;
  *(_OWORD *)((char *)this + 88) = v6;
  *(__n128 *)((char *)this + 72) = result;
  return result;
}

void `virtual thunk to'boost::archive::archive_exception::~archive_exception(boost::archive::archive_exception *this)
{
  std::exception::~exception((std::exception *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)));
}

{
  void *v1;

  std::exception::~exception((std::exception *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)));
  operator delete(v1);
}

void boost::archive::archive_exception::~archive_exception(std::exception *this)
{
  void *v1;

  std::exception::~exception(this);
  operator delete(v1);
}

uint64_t boost::archive::archive_exception::what(boost::archive::archive_exception *this)
{
  return (uint64_t)this + 8;
}

uint64_t `virtual thunk to'boost::archive::archive_exception::what(boost::archive::archive_exception *this)
{
  return (uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 32) + 8;
}

uint64_t boost::archive::archive_exception::archive_exception(uint64_t this, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_QWORD *)this = *a2;
  *(_QWORD *)(this + *(_QWORD *)(v2 - 40)) = a2[1];
  *(_DWORD *)(this + 136) = 0;
  return this;
}

uint64_t boost::archive::archive_exception::archive_exception(uint64_t this)
{
  *(_QWORD *)this = off_25142D0A0;
  *(_DWORD *)(this + 136) = 0;
  return this;
}

const char *boost::archive::BOOST_ARCHIVE_SIGNATURE(boost::archive *this)
{
  return "serialization::archive";
}

void boost::archive::BOOST_ARCHIVE_VERSION(_WORD *a1@<X8>)
{
  *a1 = 19;
}

_QWORD *boost::archive::detail::basic_iarchive_impl::load_preamble(_QWORD *result, uint64_t a2, _QWORD *a3)
{
  _QWORD *v5;
  uint64_t v6;

  if (!*((_BYTE *)a3 + 21))
  {
    v5 = result;
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*a3 + 24))(*a3))
    {
      HIWORD(v6) = 0;
      (*(void (**)(uint64_t, char *))(*(_QWORD *)a2 + 24))(a2, (char *)&v6 + 6);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, (uint64_t)a3 + 20);
      result = (_QWORD *)(**(uint64_t (***)(uint64_t, uint64_t))a2)(a2, (uint64_t)(a3 + 2));
    }
    else
    {
      *((_BYTE *)a3 + 20) = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a3 + 32))(*a3, *((unsigned int *)v5 + 1));
      result = (*(_QWORD *(**)(uint64_t *__return_ptr))(*(_QWORD *)*a3 + 40))(&v6);
      *((_DWORD *)a3 + 4) = v6;
    }
    *((_BYTE *)a3 + 21) = 1;
  }
  return result;
}

uint64_t boost::archive::detail::basic_iarchive::next_object_pointer(uint64_t this, void *a2)
{
  *(_QWORD *)(*(_QWORD *)(this + 32) + 96) = a2;
  return this;
}

boost::archive::detail::basic_iarchive *boost::archive::detail::basic_iarchive::basic_iarchive(boost::archive::detail::basic_iarchive *this, int a2)
{
  char *v4;

  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *(_QWORD *)this = &unk_25142D100;
  v4 = (char *)operator new(0x78uLL);
  boost::archive::BOOST_ARCHIVE_VERSION(v4);
  *((_DWORD *)v4 + 1) = a2;
  *((_QWORD *)v4 + 8) = 0;
  *((_QWORD *)v4 + 7) = 0;
  *(_OWORD *)(v4 + 8) = 0u;
  *(_OWORD *)(v4 + 24) = 0u;
  *(_QWORD *)(v4 + 37) = 0;
  *((_QWORD *)v4 + 6) = v4 + 56;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 100) = 0u;
  *((_QWORD *)this + 4) = v4;
  return this;
}

void sub_243A5F708(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v10;

  operator delete(v10);
  std::vector<std::pair<void const*,boost::shared_ptr<void>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  _Unwind_Resume(a1);
}

void boost::archive::detail::basic_iarchive::~basic_iarchive(boost::archive::detail::basic_iarchive *this)
{
  void **v1;
  void **v2;

  *(_QWORD *)this = &unk_25142D100;
  v1 = (void **)((char *)this + 8);
  boost::scoped_ptr<boost::archive::detail::basic_iarchive_impl>::~scoped_ptr((uint64_t *)this + 4);
  v2 = v1;
  std::vector<std::pair<void const*,boost::shared_ptr<void>>>::__destroy_vector::operator()[abi:ne180100](&v2);
}

uint64_t boost::archive::detail::basic_iarchive::set_library_version(uint64_t result, _WORD *a2)
{
  **(_WORD **)(result + 32) = *a2;
  return result;
}

uint64_t boost::archive::detail::basic_iarchive::reset_object_address(uint64_t this, _BYTE *a2, _BYTE *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const void **i;
  uint64_t v7;
  uint64_t v8;

  v3 = *(_QWORD *)(this + 32);
  if (!*(_BYTE *)(v3 + 44))
  {
    v5 = *(unsigned int *)(v3 + 36);
    v4 = *(unsigned int *)(v3 + 40);
    if (v4 < v5)
    {
      for (i = (const void **)(*(_QWORD *)(v3 + 8) + 16 * v4); *i != a3; i += 2)
      {
        if (v5 == ++v4)
          return this;
      }
    }
    if (v4 < v5)
    {
      v7 = *(_QWORD *)(v3 + 8) + 16 * v4;
      v8 = v5 - v4;
      do
      {
        if (!*(_BYTE *)(v7 + 8))
          *(_QWORD *)v7 += a2 - a3;
        v7 += 16;
        --v8;
      }
      while (v8);
    }
  }
  return this;
}

uint64_t boost::archive::detail::basic_iarchive::load_object(boost::archive::detail::basic_iarchive_impl **this, unint64_t a2, const boost::archive::detail::basic_iserializer *a3)
{
  return boost::archive::detail::basic_iarchive_impl::load_object(this[4], (boost::archive::detail::basic_iarchive *)this, a2, a3);
}

uint64_t boost::archive::detail::basic_iarchive_impl::load_object(boost::archive::detail::basic_iarchive_impl *this, boost::archive::detail::basic_iarchive *a2, unint64_t a3, const boost::archive::detail::basic_iserializer *a4)
{
  uint64_t v8;
  _QWORD *v9;
  char v10;
  _QWORD *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  _QWORD *v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t result;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  const boost::archive::detail::basic_iserializer *v37;
  _QWORD v38[2];
  const boost::archive::detail::basic_iserializer *v39;
  __int16 v40;

  *((_BYTE *)this + 44) = 0;
  if (*((_OWORD *)this + 6) != __PAIR128__((unint64_t)a4, a3))
  {
    v8 = *((_QWORD *)this + 8);
    v39 = a4;
    v40 = v8;
    v9 = std::__tree<boost::archive::detail::basic_iarchive_impl::cobject_type>::__emplace_unique_key_args<boost::archive::detail::basic_iarchive_impl::cobject_type,boost::archive::detail::basic_iarchive_impl::cobject_type const&>((uint64_t **)this + 6, (uint64_t)&v39, (uint64_t)&v39);
    if (v10)
    {
      v37 = a4;
      v38[0] = 0;
      *(_QWORD *)((char *)v38 + 6) = 0;
      v11 = (_QWORD *)*((_QWORD *)this + 10);
      if ((unint64_t)v11 >= *((_QWORD *)this + 11))
      {
        v12 = std::vector<boost::archive::detail::basic_iarchive_impl::cobject_id>::__push_back_slow_path<boost::archive::detail::basic_iarchive_impl::cobject_id>((uint64_t *)this + 9, (uint64_t)&v37);
      }
      else
      {
        v12 = (uint64_t)(v11 + 3);
        *v11 = a4;
        v11[1] = 0;
        *(_QWORD *)((char *)v11 + 14) = 0;
      }
      *((_QWORD *)this + 10) = v12;
    }
    v13 = *((__int16 *)v9 + 20);
    v14 = *((_QWORD *)this + 9);
    v15 = (_QWORD *)(v14 + 24 * *((__int16 *)v9 + 20));
    v15[1] = *((_QWORD *)a4 + 2);
    boost::archive::detail::basic_iarchive_impl::load_preamble(this, (uint64_t)a2, v15);
    v16 = *((_DWORD *)this + 8);
    v17 = *(unsigned __int8 *)(v14 + 24 * v13 + 20);
    v18 = (*((_QWORD *)this + 2) - *((_QWORD *)this + 1)) >> 4;
    *((_DWORD *)this + 8) = v18;
    if (v17)
    {
      LODWORD(v37) = 0;
      result = (*(uint64_t (**)(boost::archive::detail::basic_iarchive *, const boost::archive::detail::basic_iserializer **))(*(_QWORD *)a2 + 8))(a2, &v37);
      v19 = *((_QWORD *)this + 1);
      v20 = *((_QWORD *)this + 2);
      v21 = v20 - v19;
      if (v37 < ((v20 - v19) >> 4))
      {
LABEL_25:
        *((_DWORD *)this + 8) = v16;
        goto LABEL_26;
      }
      v22 = *((_QWORD *)this + 3);
      if (v20 >= v22)
      {
        v25 = v21 >> 4;
        v26 = (v21 >> 4) + 1;
        if (v26 >> 60)
          std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::__throw_length_error[abi:ne180100]();
        v27 = v22 - v19;
        if (v27 >> 3 > v26)
          v26 = v27 >> 3;
        if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF0)
          v28 = 0xFFFFFFFFFFFFFFFLL;
        else
          v28 = v26;
        v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<double,double>>>((uint64_t)this + 24, v28);
        v30 = &v29[16 * v25];
        v32 = &v29[16 * v31];
        *(_QWORD *)v30 = a3;
        v30[8] = 0;
        *((_WORD *)v30 + 5) = v13;
        v23 = v30 + 16;
        v34 = *((_QWORD *)this + 1);
        v33 = *((_QWORD *)this + 2);
        if (v33 != v34)
        {
          do
          {
            v35 = *(_QWORD *)(v33 - 16);
            v33 -= 16;
            v36 = *(_BYTE *)(v33 + 8);
            *((_QWORD *)v30 - 2) = v35;
            v30 -= 16;
            v30[8] = v36;
            *((_WORD *)v30 + 5) = *(_WORD *)(v33 + 10);
          }
          while (v33 != v34);
          v33 = *((_QWORD *)this + 1);
        }
        *((_QWORD *)this + 1) = v30;
        *((_QWORD *)this + 2) = v23;
        *((_QWORD *)this + 3) = v32;
        if (v33)
          operator delete((void *)v33);
      }
      else
      {
        *(_QWORD *)v20 = a3;
        *(_BYTE *)(v20 + 8) = 0;
        v23 = (char *)(v20 + 16);
        *(_WORD *)(v20 + 10) = v13;
      }
      *((_QWORD *)this + 2) = v23;
      *((_DWORD *)this + 9) = (unint64_t)&v23[-*((_QWORD *)this + 1)] >> 4;
    }
    result = (*(uint64_t (**)(const boost::archive::detail::basic_iserializer *, boost::archive::detail::basic_iarchive *, unint64_t, _QWORD))(*(_QWORD *)a4 + 16))(a4, a2, a3, *(unsigned int *)(v14 + 24 * v13 + 16));
    *((_DWORD *)this + 10) = v18;
    goto LABEL_25;
  }
  result = (*(uint64_t (**)(const boost::archive::detail::basic_iserializer *, boost::archive::detail::basic_iarchive *, unint64_t, _QWORD))(*(_QWORD *)a4 + 16))(a4, a2, a3, *((unsigned int *)this + 28));
LABEL_26:
  *((_BYTE *)this + 44) = 0;
  return result;
}

void sub_243A5FA9C(_Unwind_Exception *a1)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 44) = 0;
  _Unwind_Resume(a1);
}

uint64_t boost::archive::detail::basic_iarchive::load_pointer(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t (*a4)(void))
{
  return boost::archive::detail::basic_iarchive_impl::load_pointer(*(_QWORD *)(a1 + 32), a1, a2, a3, a4);
}

uint64_t boost::archive::detail::basic_iarchive_impl::load_pointer(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t (*a5)(void))
{
  int v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  char v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  __int16 v31;
  unint64_t v32;
  char *v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  __int16 v50;
  uint64_t v51;
  _QWORD v52[17];
  uint64_t v53;
  __int16 v54;
  uint64_t v55;

  v55 = *MEMORY[0x24BDAC8D0];
  *(_BYTE *)(a1 + 44) = 1;
  v50 = 0;
  (*(void (**)(uint64_t, __int16 *))(*(_QWORD *)a2 + 16))(a2, &v50);
  v10 = v50;
  if (v50 == -1)
  {
    *a3 = 0;
  }
  else
  {
    if (v50 >= *(__int16 *)(a1 + 64))
    {
      if (!a4
        || (v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 24))(a4),
            (*(unsigned int (**)(uint64_t))(*(_QWORD *)v12 + 48))(v12)))
      {
        v49 = &v53;
        (*(void (**)(uint64_t, uint64_t **))(*(_QWORD *)a2 + 32))(a2, &v49);
        if (!(_BYTE)v53
          || !boost::serialization::extended_type_info::find((boost::serialization::extended_type_info *)&v53, v13))
        {
          boost::archive::archive_exception::archive_exception((uint64_t)&v51, 2, 0, 0);
          boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)&v51);
        }
        a4 = a5();
      }
      v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 24))(a4);
      v15 = *(_QWORD *)(a1 + 64);
      v53 = v14;
      v54 = v15;
      v16 = std::__tree<boost::archive::detail::basic_iarchive_impl::cobject_type>::__emplace_unique_key_args<boost::archive::detail::basic_iarchive_impl::cobject_type,boost::archive::detail::basic_iarchive_impl::cobject_type const&>((uint64_t **)(a1 + 48), (uint64_t)&v53, (uint64_t)&v53);
      if (v17)
      {
        v51 = v14;
        v52[0] = 0;
        *(_QWORD *)((char *)v52 + 6) = 0;
        v18 = *(uint64_t **)(a1 + 80);
        if ((unint64_t)v18 >= *(_QWORD *)(a1 + 88))
        {
          v19 = std::vector<boost::archive::detail::basic_iarchive_impl::cobject_id>::__push_back_slow_path<boost::archive::detail::basic_iarchive_impl::cobject_id>((uint64_t *)(a1 + 72), (uint64_t)&v51);
        }
        else
        {
          v19 = (uint64_t)(v18 + 3);
          *v18 = v14;
          v18[1] = 0;
          *(uint64_t *)((char *)v18 + 14) = 0;
        }
        *(_QWORD *)(a1 + 80) = v19;
      }
      v11 = *(_QWORD *)(a1 + 72);
      *(_QWORD *)(v11 + 24 * *((__int16 *)v16 + 20) + 8) = *(_QWORD *)(v14 + 16);
      v10 = v50;
      *(_QWORD *)(v11 + 24 * v50 + 8) = a4;
    }
    else
    {
      v11 = *(_QWORD *)(a1 + 72);
      a4 = *(_QWORD *)(v11 + 24 * v50 + 8);
      if (!a4)
      {
        boost::archive::archive_exception::archive_exception((uint64_t)&v51, 2, 0, 0);
        boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)&v51);
      }
    }
    boost::archive::detail::basic_iarchive_impl::load_preamble((_QWORD *)a1, a2, (_QWORD *)(v11 + 24 * v10));
    v20 = v11 + 24 * v10;
    v21 = *(unsigned __int8 *)(v20 + 20);
    if (*(_BYTE *)(v20 + 20)
      && (LODWORD(v51) = 0,
          (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 8))(a2, &v51),
          v22 = *(_QWORD *)(a1 + 8),
          v51 < ((unint64_t)(*(_QWORD *)(a1 + 16) - v22) >> 4)))
    {
      *a3 = *(_QWORD *)(v22 + 16 * v51);
    }
    else
    {
      v23 = *(_DWORD *)(a1 + 32);
      v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 16))(a4);
      *a3 = v24;
      if (v21)
      {
        v47 = *(_QWORD *)(a1 + 104);
        v48 = *(_QWORD *)(a1 + 96);
        v46 = *(_DWORD *)(a1 + 112);
        v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 24))(a4);
        v26 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 104) = v25;
        *(_DWORD *)(a1 + 112) = *(_DWORD *)(v11 + 24 * v10 + 16);
        v27 = *(_QWORD *)(a1 + 16);
        v28 = (uint64_t)(v27 - v26) >> 4;
        v29 = *(_DWORD *)(a1 + 36);
        v30 = *a3;
        v31 = v50;
        v32 = *(_QWORD *)(a1 + 24);
        if (v27 >= v32)
        {
          v34 = v28 + 1;
          if ((unint64_t)(v28 + 1) >> 60)
            std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::__throw_length_error[abi:ne180100]();
          v35 = v32 - v26;
          if (v35 >> 3 > v34)
            v34 = v35 >> 3;
          if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF0)
            v36 = 0xFFFFFFFFFFFFFFFLL;
          else
            v36 = v34;
          v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<double,double>>>(a1 + 24, v36);
          v38 = &v37[16 * v28];
          v40 = &v37[16 * v39];
          *(_QWORD *)v38 = v30;
          v38[8] = 0;
          *((_WORD *)v38 + 5) = v31;
          v33 = v38 + 16;
          v42 = *(_QWORD *)(a1 + 8);
          v41 = *(_QWORD *)(a1 + 16);
          if (v41 != v42)
          {
            do
            {
              v43 = *(_QWORD *)(v41 - 16);
              v41 -= 16;
              v44 = *(_BYTE *)(v41 + 8);
              *((_QWORD *)v38 - 2) = v43;
              v38 -= 16;
              v38[8] = v44;
              *((_WORD *)v38 + 5) = *(_WORD *)(v41 + 10);
            }
            while (v41 != v42);
            v41 = *(_QWORD *)(a1 + 8);
          }
          *(_QWORD *)(a1 + 8) = v38;
          *(_QWORD *)(a1 + 16) = v33;
          *(_QWORD *)(a1 + 24) = v40;
          if (v41)
            operator delete((void *)v41);
        }
        else
        {
          *(_QWORD *)v27 = v30;
          *(_BYTE *)(v27 + 8) = 0;
          v33 = (char *)(v27 + 16);
          *(_WORD *)(v27 + 10) = v31;
        }
        *(_QWORD *)(a1 + 16) = v33;
        (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a4 + 32))(a4, a2, *a3, *(unsigned int *)(a1 + 112));
        *(_BYTE *)(*(_QWORD *)(a1 + 8) + 16 * v28 + 8) = 1;
        *(_DWORD *)(a1 + 36) = v29;
        *(_DWORD *)(a1 + 112) = v46;
        *(_QWORD *)(a1 + 96) = v48;
        *(_QWORD *)(a1 + 104) = v47;
      }
      else
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a4 + 32))(a4, a2, v24, *(unsigned int *)(v11 + 24 * v10 + 16));
      }
      *(_DWORD *)(a1 + 32) = v23;
    }
  }
  *(_BYTE *)(a1 + 44) = 1;
  return a4;
}

void sub_243A5FEE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::exception a16)
{
  uint64_t v16;

  *(_BYTE *)(v16 + 44) = 1;
  _Unwind_Resume(exception_object);
}

_QWORD *boost::archive::detail::basic_iarchive::register_basic_serializer(boost::archive::detail::basic_iarchive *this, const boost::archive::detail::basic_iserializer *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;
  char v7;
  _QWORD *v8;
  const boost::archive::detail::basic_iserializer *v9;
  _QWORD v10[2];
  const boost::archive::detail::basic_iserializer *v11;
  __int16 v12;

  v3 = *((_QWORD *)this + 4);
  v4 = *(_QWORD *)(v3 + 64);
  v11 = a2;
  v12 = v4;
  result = std::__tree<boost::archive::detail::basic_iarchive_impl::cobject_type>::__emplace_unique_key_args<boost::archive::detail::basic_iarchive_impl::cobject_type,boost::archive::detail::basic_iarchive_impl::cobject_type const&>((uint64_t **)(v3 + 48), (uint64_t)&v11, (uint64_t)&v11);
  v6 = (uint64_t)result;
  if (v7)
  {
    v9 = a2;
    v10[0] = 0;
    *(_QWORD *)((char *)v10 + 6) = 0;
    v8 = *(_QWORD **)(v3 + 80);
    if ((unint64_t)v8 >= *(_QWORD *)(v3 + 88))
    {
      result = (_QWORD *)std::vector<boost::archive::detail::basic_iarchive_impl::cobject_id>::__push_back_slow_path<boost::archive::detail::basic_iarchive_impl::cobject_id>((uint64_t *)(v3 + 72), (uint64_t)&v9);
    }
    else
    {
      result = v8 + 3;
      *v8 = a2;
      v8[1] = 0;
      *(_QWORD *)((char *)v8 + 14) = 0;
    }
    *(_QWORD *)(v3 + 80) = result;
  }
  *(_QWORD *)(*(_QWORD *)(v3 + 72) + 24 * *(__int16 *)(v6 + 40) + 8) = *((_QWORD *)a2 + 2);
  return result;
}

uint64_t boost::archive::detail::basic_iarchive::delete_created_pointers(uint64_t this)
{
  _QWORD *v1;
  uint64_t i;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD **)(this + 32);
  v3 = v1[1];
  for (i = v1[2]; v3 != i; v3 += 16)
  {
    if (*(_BYTE *)(v3 + 8))
    {
      v4 = *(_QWORD *)(v1[9] + 24 * *(__int16 *)(v3 + 10));
      this = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 56))(v4, *(_QWORD *)v3);
      i = v1[2];
    }
  }
  return this;
}

uint64_t boost::archive::detail::basic_iarchive::get_library_version@<X0>(uint64_t this@<X0>, _WORD *a2@<X8>)
{
  *a2 = **(_WORD **)(this + 32);
  return this;
}

uint64_t boost::archive::detail::basic_iarchive::get_flags(boost::archive::detail::basic_iarchive *this)
{
  return *(unsigned int *)(*((_QWORD *)this + 4) + 4);
}

void std::__tree<boost::archive::detail::basic_iarchive_impl::cobject_type>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<boost::archive::detail::basic_iarchive_impl::cobject_type>::destroy(a1, *a2);
    std::__tree<boost::archive::detail::basic_iarchive_impl::cobject_type>::destroy(a1, a2[1]);
    operator delete(a2);
  }
}

void std::vector<std::pair<void const*,boost::shared_ptr<void>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  unsigned int **v2;
  unsigned int **v4;
  void *v5;
  unsigned int **v6;

  v1 = *a1;
  v2 = (unsigned int **)**a1;
  if (v2)
  {
    v4 = (unsigned int **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 3;
        boost::detail::shared_count::~shared_count(v4 - 1);
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void boost::detail::shared_count::~shared_count(unsigned int **this)
{
  unsigned int *v1;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  v1 = *this;
  if (*this)
  {
    v2 = v1 + 2;
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v1 + 16))(v1);
      v5 = v1 + 3;
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
        (*(void (**)(unsigned int *))(*(_QWORD *)v1 + 24))(v1);
    }
  }
}

_QWORD *std::__tree<boost::archive::detail::basic_iarchive_impl::cobject_type>::__emplace_unique_key_args<boost::archive::detail::basic_iarchive_impl::cobject_type,boost::archive::detail::basic_iarchive_impl::cobject_type const&>(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  void **v5;
  _QWORD *v6;
  uint64_t **v7;
  uint64_t v9;

  v5 = (void **)std::__tree<boost::archive::detail::basic_iarchive_impl::cobject_type>::__find_equal<boost::archive::detail::basic_iarchive_impl::cobject_type>((uint64_t)a1, &v9, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = operator new(0x30uLL);
    v6[4] = *(_QWORD *)a3;
    *((_WORD *)v6 + 20) = *(_WORD *)(a3 + 8);
    std::__tree<std::__value_type<int,std::vector<std::string>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::string>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::string>>>>::__insert_node_at(a1, v9, v7, v6);
  }
  return v6;
}

_QWORD *std::__tree<boost::archive::detail::basic_iarchive_impl::cobject_type>::__find_equal<boost::archive::detail::basic_iarchive_impl::cobject_type>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = v4;
        if (!boost::serialization::extended_type_info::operator<(*(_QWORD *)(*(_QWORD *)a3 + 8), *(_QWORD *)(v4[4] + 8)))break;
        v4 = (_QWORD *)*v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (!boost::serialization::extended_type_info::operator<(*(_QWORD *)(v7[4] + 8), *(_QWORD *)(*(_QWORD *)a3 + 8)))break;
      v5 = v7 + 1;
      v4 = (_QWORD *)v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

uint64_t std::vector<boost::archive::detail::basic_iarchive_impl::cobject_id>::__push_back_slow_path<boost::archive::detail::basic_iarchive_impl::cobject_id>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void *__p;
  char *v16;
  char *v17;
  char *v18;
  uint64_t *v19;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v19 = a1 + 2;
  v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  v11 = &v10[24 * v4];
  __p = v10;
  v16 = v11;
  v18 = &v10[24 * v12];
  *(_OWORD *)v11 = *(_OWORD *)a2;
  *((_DWORD *)v11 + 4) = *(_DWORD *)(a2 + 16);
  *((_WORD *)v11 + 10) = *(_WORD *)(a2 + 20);
  v17 = v11 + 24;
  std::vector<boost::archive::detail::basic_iarchive_impl::cobject_id>::__swap_out_circular_buffer(a1, &__p);
  v13 = a1[1];
  if (v17 != v16)
    v17 = &v16[(v17 - v16 - 24) % 0x18uLL];
  if (__p)
    operator delete(__p);
  return v13;
}

void sub_243A603F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *std::vector<boost::archive::detail::basic_iarchive_impl::cobject_id>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  if (v2 != *result)
  {
    v5 = 0;
    do
    {
      v6 = v4 + v5;
      *(_OWORD *)(v6 - 24) = *(_OWORD *)(v2 + v5 - 24);
      *(_DWORD *)(v6 - 8) = *(_DWORD *)(v2 + v5 - 8);
      *(_WORD *)(v6 - 4) = *(_WORD *)(v2 + v5 - 4);
      v5 -= 24;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  v7 = *result;
  *result = v4;
  a2[1] = v7;
  v8 = result[1];
  result[1] = a2[2];
  a2[2] = v8;
  v9 = result[2];
  result[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

uint64_t *boost::scoped_ptr<boost::archive::detail::basic_iarchive_impl>::~scoped_ptr(uint64_t *a1)
{
  uint64_t v2;
  void *v3;
  void *v4;

  v2 = *a1;
  if (*a1)
  {
    v3 = *(void **)(v2 + 72);
    if (v3)
    {
      *(_QWORD *)(v2 + 80) = v3;
      operator delete(v3);
    }
    std::__tree<boost::archive::detail::basic_iarchive_impl::cobject_type>::destroy(v2 + 48, *(_QWORD **)(v2 + 56));
    v4 = *(void **)(v2 + 8);
    if (v4)
    {
      *(_QWORD *)(v2 + 16) = v4;
      operator delete(v4);
    }
    operator delete((void *)v2);
  }
  return a1;
}

_QWORD *boost::archive::detail::basic_iserializer::basic_iserializer(_QWORD *result, uint64_t a2)
{
  *result = off_25142D1D0;
  result[1] = a2;
  result[2] = 0;
  return result;
}

boost::archive::detail::basic_oarchive *boost::archive::detail::basic_oarchive::basic_oarchive(boost::archive::detail::basic_oarchive *this, int a2)
{
  _QWORD *v4;

  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *(_QWORD *)this = &unk_25142D270;
  v4 = operator new(0x60uLL);
  *(_DWORD *)v4 = a2;
  v4[2] = 0;
  v4[1] = v4 + 2;
  v4[5] = 0;
  v4[3] = 0;
  v4[4] = v4 + 5;
  v4[8] = 0;
  v4[6] = 0;
  v4[7] = v4 + 8;
  v4[10] = 0;
  v4[11] = 0;
  v4[9] = 0;
  *((_QWORD *)this + 4) = v4;
  return this;
}

void sub_243A605C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::pair<void const*,boost::shared_ptr<void>>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void boost::archive::detail::basic_oarchive::~basic_oarchive(boost::archive::detail::basic_oarchive *this)
{
  void **v1;
  void **v2;

  *(_QWORD *)this = &unk_25142D270;
  v1 = (void **)((char *)this + 8);
  boost::scoped_ptr<boost::archive::detail::basic_oarchive_impl>::~scoped_ptr((_QWORD ***)this + 4);
  v2 = v1;
  std::vector<std::pair<void const*,boost::shared_ptr<void>>>::__destroy_vector::operator()[abi:ne180100](&v2);
}

uint64_t boost::archive::detail::basic_oarchive::save_object(boost::archive::detail::basic_oarchive_impl **this, unint64_t a2, const boost::archive::detail::basic_oserializer *a3)
{
  return boost::archive::detail::basic_oarchive_impl::save_object(this[4], (boost::archive::detail::basic_oarchive *)this, a2, a3);
}

uint64_t boost::archive::detail::basic_oarchive_impl::save_object(boost::archive::detail::basic_oarchive_impl *this, boost::archive::detail::basic_oarchive *a2, unint64_t a3, const boost::archive::detail::basic_oserializer *a4)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  __int16 v11;
  unsigned int v12;
  char v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  unsigned int v18;
  BOOL v19;
  char **v20;
  unsigned int v22;
  unsigned int v23;
  unint64_t v24;
  __int16 v25;
  int v26;
  uint64_t v27;
  const boost::archive::detail::basic_oserializer *v28;
  __int16 v29;
  char v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  if (*((_OWORD *)this + 5) == __PAIR128__((unint64_t)a4, a3))
    return (*(uint64_t (**)(const boost::archive::detail::basic_oserializer *, boost::archive::detail::basic_oarchive *, unint64_t))(*(_QWORD *)a4 + 16))(a4, a2, a3);
  v8 = *((_QWORD *)this + 6);
  v28 = a4;
  v29 = v8;
  v30 = 0;
  v9 = std::__tree<boost::archive::detail::basic_oarchive_impl::cobject_type>::__emplace_unique_key_args<boost::archive::detail::basic_oarchive_impl::cobject_type,boost::archive::detail::basic_oarchive_impl::cobject_type const&>((uint64_t **)this + 4, (uint64_t)&v28, (uint64_t)&v28);
  if ((*(unsigned int (**)(const boost::archive::detail::basic_oserializer *))(*(_QWORD *)a4 + 24))(a4)
    && !*((_BYTE *)v9 + 42))
  {
    HIWORD(v27) = *((_WORD *)v9 + 20);
    (*(void (**)(boost::archive::detail::basic_oarchive *, char *))(*(_QWORD *)a2 + 32))(a2, (char *)&v27 + 6);
    BYTE5(v27) = (*(uint64_t (**)(const boost::archive::detail::basic_oserializer *, _QWORD))(*(_QWORD *)a4 + 32))(a4, *(unsigned int *)this);
    (*(void (**)(boost::archive::detail::basic_oarchive *, char *))(*(_QWORD *)a2 + 56))(a2, (char *)&v27 + 5);
    (*(void (**)(uint64_t *__return_ptr, const boost::archive::detail::basic_oserializer *))(*(_QWORD *)a4 + 40))(&v27, a4);
    (**(void (***)(boost::archive::detail::basic_oarchive *, uint64_t *))a2)(a2, &v27);
    *((_BYTE *)v9 + 42) = 1;
  }
  if (((*(uint64_t (**)(const boost::archive::detail::basic_oserializer *, _QWORD))(*(_QWORD *)a4 + 32))(a4, *(unsigned int *)this) & 1) == 0)return (*(uint64_t (**)(const boost::archive::detail::basic_oserializer *, boost::archive::detail::basic_oarchive *, unint64_t))(*(_QWORD *)a4 + 16))(a4, a2, a3);
  v10 = *((_QWORD *)this + 3);
  v11 = *((_WORD *)v9 + 20);
  v24 = a3;
  v25 = v11;
  v26 = v10;
  v12 = *((_DWORD *)std::__tree<boost::archive::detail::basic_oarchive_impl::aobject>::__emplace_unique_key_args<boost::archive::detail::basic_oarchive_impl::aobject,boost::archive::detail::basic_oarchive_impl::aobject const&>((uint64_t **)this + 1, &v24, (uint64_t)&v24)+ 11);
  if (v13)
  {
    v23 = v12;
    (*(void (**)(boost::archive::detail::basic_oarchive *, unsigned int *))(*(_QWORD *)a2 + 8))(a2, &v23);
    return (*(uint64_t (**)(const boost::archive::detail::basic_oserializer *, boost::archive::detail::basic_oarchive *, unint64_t))(*(_QWORD *)a4 + 16))(a4, a2, a3);
  }
  else
  {
    v16 = (char *)*((_QWORD *)this + 8);
    v15 = (char *)this + 64;
    v14 = v16;
    if (v16)
    {
      v17 = v15;
      do
      {
        v18 = *((_DWORD *)v14 + 7);
        v19 = v18 >= v12;
        if (v18 >= v12)
          v20 = (char **)v14;
        else
          v20 = (char **)(v14 + 8);
        if (v19)
          v17 = v14;
        v14 = *v20;
      }
      while (*v20);
      if (v17 != v15 && v12 >= *((_DWORD *)v17 + 7))
      {
        boost::archive::archive_exception::archive_exception((uint64_t)&v28, 5, 0, 0);
        boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)&v28);
      }
    }
    v22 = v12;
    return (*(uint64_t (**)(boost::archive::detail::basic_oarchive *, unsigned int *))(*(_QWORD *)a2 + 16))(a2, &v22);
  }
}

void sub_243A608D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::exception a14)
{
  boost::archive::archive_exception::~archive_exception(&a14);
  _Unwind_Resume(a1);
}

uint64_t **boost::archive::detail::basic_oarchive::save_pointer(uint64_t a1, unint64_t a2, uint64_t a3)
{
  return boost::archive::detail::basic_oarchive_impl::save_pointer(*(unsigned int **)(a1 + 32), a1, a2, a3);
}

uint64_t **boost::archive::detail::basic_oarchive_impl::save_pointer(unsigned int *a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  __int16 v14;
  unsigned int v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t **result;
  unsigned int v20;
  unsigned int v21;
  __int16 v22;
  uint64_t v23;
  unsigned int v24[3];
  __int16 v25;
  _QWORD *v26;
  __int16 v27;
  char v28;
  int v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v8 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 16))(a4);
  v9 = *((_QWORD *)a1 + 6);
  v26 = v8;
  v27 = v9;
  v28 = 0;
  v10 = std::__tree<boost::archive::detail::basic_oarchive_impl::cobject_type>::__emplace_unique_key_args<boost::archive::detail::basic_oarchive_impl::cobject_type,boost::archive::detail::basic_oarchive_impl::cobject_type const&>((uint64_t **)a1 + 4, (uint64_t)&v26, (uint64_t)&v26);
  if (*((_BYTE *)v10 + 42))
  {
    v22 = *((_WORD *)v10 + 20);
    (*(void (**)(uint64_t, __int16 *))(*(_QWORD *)a2 + 40))(a2, &v22);
  }
  else
  {
    v25 = *((_WORD *)v10 + 20);
    (*(void (**)(uint64_t, __int16 *))(*(_QWORD *)a2 + 24))(a2, &v25);
    if (*((_QWORD *)a1 + 6) > v9 && (*(unsigned int (**)(_QWORD *))(*v8 + 48))(v8))
    {
      v11 = v8[1];
      v12 = *(const char **)(v11 + 16);
      if (!v12)
      {
        boost::archive::archive_exception::archive_exception((uint64_t)&v26, 2, 0, 0);
        boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)&v26);
      }
      *(_QWORD *)v24 = *(_QWORD *)(v11 + 16);
      if (strlen(v12) >= 0x80)
      {
        boost::archive::archive_exception::archive_exception((uint64_t)&v26, 9, 0, 0);
        boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)&v26);
      }
      (*(void (**)(uint64_t, unsigned int *))(*(_QWORD *)a2 + 48))(a2, v24);
    }
    if ((*(unsigned int (**)(_QWORD *))(*v8 + 24))(v8))
    {
      HIBYTE(v23) = (*(uint64_t (**)(_QWORD *, _QWORD))(*v8 + 32))(v8, *a1);
      (*(void (**)(uint64_t, char *))(*(_QWORD *)a2 + 56))(a2, (char *)&v23 + 7);
      (*(void (**)(uint64_t *__return_ptr, _QWORD *))(*v8 + 40))(&v23, v8);
      (**(void (***)(uint64_t, uint64_t *))a2)(a2, &v23);
    }
    *((_BYTE *)v10 + 42) = 1;
  }
  if (((*(uint64_t (**)(_QWORD *, _QWORD))(*v8 + 32))(v8, *a1) & 1) != 0)
  {
    v13 = *((_QWORD *)a1 + 3);
    v14 = *((_WORD *)v10 + 20);
    v26 = (_QWORD *)a3;
    v27 = v14;
    v29 = v13;
    v15 = *((_DWORD *)std::__tree<boost::archive::detail::basic_oarchive_impl::aobject>::__emplace_unique_key_args<boost::archive::detail::basic_oarchive_impl::aobject,boost::archive::detail::basic_oarchive_impl::aobject const&>((uint64_t **)a1 + 1, (unint64_t *)&v26, (uint64_t)&v26)+ 11);
    v24[0] = v15;
    if (!v16)
    {
      v21 = v15;
      return (uint64_t **)(*(uint64_t (**)(uint64_t, unsigned int *))(*(_QWORD *)a2 + 16))(a2, &v21);
    }
    v20 = v15;
    (*(void (**)(uint64_t, unsigned int *))(*(_QWORD *)a2 + 8))(a2, &v20);
    v17 = *((_QWORD *)a1 + 10);
    v18 = *((_QWORD *)a1 + 11);
    *((_QWORD *)a1 + 10) = a3;
    *((_QWORD *)a1 + 11) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 16))(a4);
    (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)a4 + 24))(a4, a2, a3);
    result = std::__tree<boost::archive::object_id_type>::__emplace_unique_key_args<boost::archive::object_id_type,boost::archive::object_id_type const&>((uint64_t **)a1 + 7, v24, v24);
  }
  else
  {
    v17 = *((_QWORD *)a1 + 10);
    v18 = *((_QWORD *)a1 + 11);
    *((_QWORD *)a1 + 10) = a3;
    *((_QWORD *)a1 + 11) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 16))(a4);
    result = (uint64_t **)(*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)a4 + 24))(a4, a2, a3);
  }
  *((_QWORD *)a1 + 10) = v17;
  *((_QWORD *)a1 + 11) = v18;
  return result;
}

void sub_243A60BF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::exception a14)
{
  boost::archive::archive_exception::~archive_exception(&a14);
  _Unwind_Resume(a1);
}

_QWORD *boost::archive::detail::basic_oarchive::register_basic_serializer(boost::archive::detail::basic_oarchive *this, const boost::archive::detail::basic_oserializer *a2)
{
  uint64_t v2;
  uint64_t **v3;
  uint64_t v4;
  const boost::archive::detail::basic_oserializer *v6;
  __int16 v7;
  char v8;

  v2 = *((_QWORD *)this + 4);
  v3 = (uint64_t **)(v2 + 32);
  v4 = *(_QWORD *)(v2 + 48);
  v6 = a2;
  v7 = v4;
  v8 = 0;
  return std::__tree<boost::archive::detail::basic_oarchive_impl::cobject_type>::__emplace_unique_key_args<boost::archive::detail::basic_oarchive_impl::cobject_type,boost::archive::detail::basic_oarchive_impl::cobject_type const&>(v3, (uint64_t)&v6, (uint64_t)&v6);
}

uint64_t boost::archive::detail::basic_oarchive::get_flags(boost::archive::detail::basic_oarchive *this)
{
  return **((unsigned int **)this + 4);
}

uint64_t boost::archive::detail::basic_oarchive::get_helper_collection(boost::archive::detail::basic_oarchive *this)
{
  return (uint64_t)this + 8;
}

_QWORD *std::__tree<boost::archive::detail::basic_oarchive_impl::aobject>::__emplace_unique_key_args<boost::archive::detail::basic_oarchive_impl::aobject,boost::archive::detail::basic_oarchive_impl::aobject const&>(uint64_t **a1, unint64_t *a2, uint64_t a3)
{
  uint64_t *v5;
  _QWORD *v6;
  uint64_t **v7;
  uint64_t v9;

  v5 = std::__tree<boost::archive::detail::basic_oarchive_impl::aobject>::__find_equal<boost::archive::detail::basic_oarchive_impl::aobject>((uint64_t)a1, &v9, a2);
  v6 = (_QWORD *)*v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = operator new(0x30uLL);
    v6[4] = *(_QWORD *)a3;
    *((_WORD *)v6 + 20) = *(_WORD *)(a3 + 8);
    *((_DWORD *)v6 + 11) = *(_DWORD *)(a3 + 12);
    std::__tree<std::__value_type<int,std::vector<std::string>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::string>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::string>>>>::__insert_node_at(a1, v9, v7, v6);
  }
  return v6;
}

uint64_t *std::__tree<boost::archive::detail::basic_oarchive_impl::aobject>::__find_equal<boost::archive::detail::basic_oarchive_impl::aobject>(uint64_t a1, _QWORD *a2, unint64_t *a3)
{
  uint64_t *result;
  uint64_t *v4;
  uint64_t *v5;
  unint64_t v6;
  int v7;
  uint64_t *v8;
  unint64_t v9;
  int v10;

  v5 = *(uint64_t **)(a1 + 8);
  result = (uint64_t *)(a1 + 8);
  v4 = v5;
  if (v5)
  {
    v6 = *a3;
    v7 = *((__int16 *)a3 + 4);
    while (1)
    {
      while (1)
      {
        v8 = v4;
        v9 = v4[4];
        if (v6 >= v9)
          break;
LABEL_4:
        v4 = (uint64_t *)*v8;
        result = v8;
        if (!*v8)
          goto LABEL_12;
      }
      if (v6 <= v9)
      {
        v10 = *((__int16 *)v8 + 20);
        if (v7 < v10)
          goto LABEL_4;
        if (v10 >= v7)
          goto LABEL_12;
      }
      result = v8 + 1;
      v4 = (uint64_t *)v8[1];
      if (!v4)
        goto LABEL_12;
    }
  }
  v8 = result;
LABEL_12:
  *a2 = v8;
  return result;
}

uint64_t **std::__tree<boost::archive::object_id_type>::__emplace_unique_key_args<boost::archive::object_id_type,boost::archive::object_id_type const&>(uint64_t **a1, unsigned int *a2, _DWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  unsigned int v7;
  uint64_t **v8;
  unsigned int v9;
  uint64_t *v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = *((_DWORD *)v5 + 7);
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v10 + 7) = *a3;
    std::__tree<std::__value_type<int,std::vector<std::string>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::string>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::string>>>>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }
  return v8;
}

_QWORD *std::__tree<boost::archive::detail::basic_oarchive_impl::cobject_type>::__emplace_unique_key_args<boost::archive::detail::basic_oarchive_impl::cobject_type,boost::archive::detail::basic_oarchive_impl::cobject_type const&>(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  void **v5;
  _QWORD *v6;
  uint64_t **v7;
  uint64_t v9;

  v5 = (void **)std::__tree<boost::archive::detail::basic_iarchive_impl::cobject_type>::__find_equal<boost::archive::detail::basic_iarchive_impl::cobject_type>((uint64_t)a1, &v9, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = operator new(0x30uLL);
    v6[4] = *(_QWORD *)a3;
    *((_WORD *)v6 + 20) = *(_WORD *)(a3 + 8);
    *((_BYTE *)v6 + 42) = *(_BYTE *)(a3 + 10);
    std::__tree<std::__value_type<int,std::vector<std::string>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::string>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::string>>>>::__insert_node_at(a1, v9, v7, v6);
  }
  return v6;
}

_QWORD ***boost::scoped_ptr<boost::archive::detail::basic_oarchive_impl>::~scoped_ptr(_QWORD ***a1)
{
  _QWORD **v2;

  v2 = *a1;
  if (*a1)
  {
    std::__tree<boost::archive::detail::basic_iarchive_impl::cobject_type>::destroy((uint64_t)(v2 + 7), v2[8]);
    std::__tree<boost::archive::detail::basic_iarchive_impl::cobject_type>::destroy((uint64_t)(v2 + 4), v2[5]);
    std::__tree<boost::archive::detail::basic_iarchive_impl::cobject_type>::destroy((uint64_t)(v2 + 1), v2[2]);
    operator delete(v2);
  }
  return a1;
}

_QWORD *boost::archive::detail::basic_oserializer::basic_oserializer(_QWORD *result, uint64_t a2)
{
  *result = off_25142D308;
  result[1] = a2;
  result[2] = 0;
  return result;
}

uint64_t boost::archive::detail::basic_serializer_map::type_info_pointer_compare::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  return boost::serialization::extended_type_info::operator<(*a2, *a3);
}

uint64_t boost::archive::detail::basic_serializer_map::insert(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v3;

  v3 = a2;
  std::__tree<boost::archive::detail::basic_serializer const*,boost::archive::detail::basic_serializer_map::type_info_pointer_compare,std::allocator<boost::archive::detail::basic_serializer const*>>::__emplace_unique_key_args<boost::archive::detail::basic_serializer const*,boost::archive::detail::basic_serializer const* const&>(a1, &v3, (uint64_t *)&v3);
  return 1;
}

void boost::archive::detail::basic_serializer_map::erase(uint64_t **a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t **v3;
  uint64_t *v6;
  uint64_t *v7;
  BOOL v8;
  uint64_t *v9;

  v3 = a1 + 1;
  v2 = *a1;
  if (*a1 != (uint64_t *)(a1 + 1))
  {
    do
    {
      v6 = (uint64_t *)v2[1];
      if (v2[4] == a2)
      {
        v9 = v2;
        if (v6)
        {
          do
          {
            v7 = v6;
            v6 = (uint64_t *)*v6;
          }
          while (v6);
        }
        else
        {
          do
          {
            v7 = (uint64_t *)v9[2];
            v8 = *v7 == (_QWORD)v9;
            v9 = v7;
          }
          while (!v8);
        }
        std::__tree<boost::archive::detail::basic_serializer const*,boost::archive::detail::basic_serializer_map::type_info_pointer_compare,std::allocator<boost::archive::detail::basic_serializer const*>>::__remove_node_pointer(a1, v2);
        operator delete(v2);
      }
      else if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (uint64_t *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (uint64_t *)v2[2];
          v8 = *v7 == (_QWORD)v2;
          v2 = v7;
        }
        while (!v8);
      }
      v2 = v7;
    }
    while (v7 != (uint64_t *)v3);
  }
}

uint64_t boost::archive::detail::basic_serializer_map::find(boost::archive::detail::basic_serializer_map *this, const boost::serialization::extended_type_info *a2)
{
  _QWORD *v3;
  const boost::serialization::extended_type_info **v5;
  const boost::serialization::extended_type_info *v6;

  v5 = &v6;
  v6 = a2;
  v3 = (_QWORD *)std::__tree<boost::archive::detail::basic_serializer const*,boost::archive::detail::basic_serializer_map::type_info_pointer_compare,std::allocator<boost::archive::detail::basic_serializer const*>>::find<boost::archive::detail::basic_serializer const*>((uint64_t)this, (uint64_t **)&v5);
  if ((_QWORD *)((char *)this + 8) == v3)
    return 0;
  else
    return v3[4];
}

uint64_t *std::__tree<boost::archive::detail::basic_serializer const*,boost::archive::detail::basic_serializer_map::type_info_pointer_compare,std::allocator<boost::archive::detail::basic_serializer const*>>::__emplace_unique_key_args<boost::archive::detail::basic_serializer const*,boost::archive::detail::basic_serializer const* const&>(uint64_t **a1, uint64_t **a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t v9;

  v5 = std::__tree<boost::archive::detail::basic_serializer const*,boost::archive::detail::basic_serializer_map::type_info_pointer_compare,std::allocator<boost::archive::detail::basic_serializer const*>>::__find_equal<boost::archive::detail::basic_serializer const*>((uint64_t)a1, &v9, a2);
  v6 = (uint64_t *)*v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = (uint64_t *)operator new(0x28uLL);
    v6[4] = *a3;
    std::__tree<std::__value_type<int,std::vector<std::string>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::string>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::string>>>>::__insert_node_at(a1, v9, v7, v6);
  }
  return v6;
}

uint64_t *std::__tree<boost::archive::detail::basic_serializer const*,boost::archive::detail::basic_serializer_map::type_info_pointer_compare,std::allocator<boost::archive::detail::basic_serializer const*>>::__find_equal<boost::archive::detail::basic_serializer const*>(uint64_t a1, _QWORD *a2, uint64_t **a3)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v7;

  v5 = (uint64_t *)(a1 + 8);
  v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = v4;
        if (!boost::serialization::extended_type_info::operator<(**a3, *(_QWORD *)v4[4]))
          break;
        v4 = (uint64_t *)*v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (!boost::serialization::extended_type_info::operator<(*(_QWORD *)v7[4], **a3))
        break;
      v5 = v7 + 1;
      v4 = (uint64_t *)v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (uint64_t *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

uint64_t *std::__tree<boost::archive::detail::basic_serializer const*,boost::archive::detail::basic_serializer_map::type_info_pointer_compare,std::allocator<boost::archive::detail::basic_serializer const*>>::__remove_node_pointer(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  BOOL v5;
  uint64_t *v6;

  v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      v3 = v2;
      v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  else
  {
    v4 = a2;
    do
    {
      v3 = (uint64_t *)v4[2];
      v5 = *v3 == (_QWORD)v4;
      v4 = v3;
    }
    while (!v5);
  }
  if (*a1 == a2)
    *a1 = v3;
  v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v6, a2);
  return v3;
}

uint64_t *std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  int v5;
  uint64_t **v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = *a2;
  v3 = a2;
  if (*a2)
  {
    v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      v3 = a2;
      goto LABEL_7;
    }
    do
    {
      v3 = v4;
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  v2 = v3[1];
  if (v2)
  {
LABEL_7:
    v5 = 0;
    *(_QWORD *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  v5 = 1;
LABEL_8:
  v6 = (uint64_t **)v3[2];
  v7 = *v6;
  if (*v6 == v3)
  {
    *v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      v7 = 0;
      result = (uint64_t *)v2;
    }
    else
    {
      v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    v9 = a2[2];
    v3[2] = v9;
    *(_QWORD *)(v9 + 8 * (*(_QWORD *)a2[2] != (_QWORD)a2)) = v3;
    v11 = *a2;
    v10 = a2[1];
    *(_QWORD *)(v11 + 16) = v3;
    *v3 = v11;
    v3[1] = v10;
    if (v10)
      *(_QWORD *)(v10 + 16) = v3;
    *((_BYTE *)v3 + 24) = *((_BYTE *)a2 + 24);
    if (result == a2)
      result = v3;
  }
  if (!v8 || !result)
    return result;
  if (!v5)
  {
    *(_BYTE *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    v12 = v7[2];
    if (*(uint64_t **)v12 == v7)
      break;
    if (!*((_BYTE *)v7 + 24))
    {
      *((_BYTE *)v7 + 24) = 1;
      *(_BYTE *)(v12 + 24) = 0;
      v13 = *(uint64_t **)(v12 + 8);
      v14 = *v13;
      *(_QWORD *)(v12 + 8) = *v13;
      if (v14)
        *(_QWORD *)(v14 + 16) = v12;
      v13[2] = *(_QWORD *)(v12 + 16);
      *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * (**(_QWORD **)(v12 + 16) != v12)) = v13;
      *v13 = v12;
      *(_QWORD *)(v12 + 16) = v13;
      if (result == (uint64_t *)*v7)
        result = v7;
      v7 = *(uint64_t **)(*v7 + 8);
    }
    v15 = (_QWORD *)*v7;
    if (*v7 && !*((_BYTE *)v15 + 24))
    {
      v16 = (uint64_t *)v7[1];
      if (!v16)
        goto LABEL_56;
LABEL_55:
      if (*((_BYTE *)v16 + 24))
      {
LABEL_56:
        *((_BYTE *)v15 + 24) = 1;
        *((_BYTE *)v7 + 24) = 0;
        v22 = v15[1];
        *v7 = v22;
        if (v22)
          *(_QWORD *)(v22 + 16) = v7;
        v15[2] = v7[2];
        *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v15;
        v15[1] = v7;
        v7[2] = (uint64_t)v15;
        v16 = v7;
      }
      else
      {
        v15 = v7;
      }
      v23 = v15[2];
      *((_BYTE *)v15 + 24) = *(_BYTE *)(v23 + 24);
      *(_BYTE *)(v23 + 24) = 1;
      *((_BYTE *)v16 + 24) = 1;
      v24 = *(uint64_t **)(v23 + 8);
      v25 = *v24;
      *(_QWORD *)(v23 + 8) = *v24;
      if (v25)
        *(_QWORD *)(v25 + 16) = v23;
      v24[2] = *(_QWORD *)(v23 + 16);
      *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v24;
      *v24 = v23;
      goto LABEL_72;
    }
    v16 = (uint64_t *)v7[1];
    if (v16 && !*((_BYTE *)v16 + 24))
      goto LABEL_55;
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      v17 = result;
LABEL_53:
      *((_BYTE *)v17 + 24) = 1;
      return result;
    }
    if (!*((_BYTE *)v17 + 24))
      goto LABEL_53;
LABEL_49:
    v7 = *(uint64_t **)(v17[2] + 8 * (*(_QWORD *)v17[2] == (_QWORD)v17));
  }
  if (!*((_BYTE *)v7 + 24))
  {
    *((_BYTE *)v7 + 24) = 1;
    *(_BYTE *)(v12 + 24) = 0;
    v18 = v7[1];
    *(_QWORD *)v12 = v18;
    if (v18)
      *(_QWORD *)(v18 + 16) = v12;
    v7[2] = *(_QWORD *)(v12 + 16);
    *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * (**(_QWORD **)(v12 + 16) != v12)) = v7;
    v7[1] = v12;
    *(_QWORD *)(v12 + 16) = v7;
    if (result == (uint64_t *)v12)
      result = v7;
    v7 = *(uint64_t **)v12;
  }
  v19 = (_QWORD *)*v7;
  if (*v7 && !*((_BYTE *)v19 + 24))
    goto LABEL_68;
  v20 = (uint64_t *)v7[1];
  if (!v20 || *((_BYTE *)v20 + 24))
  {
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (*((_BYTE *)v17 + 24))
      v21 = v17 == result;
    else
      v21 = 1;
    if (v21)
      goto LABEL_53;
    goto LABEL_49;
  }
  if (v19 && !*((_BYTE *)v19 + 24))
  {
LABEL_68:
    v20 = v7;
  }
  else
  {
    *((_BYTE *)v20 + 24) = 1;
    *((_BYTE *)v7 + 24) = 0;
    v26 = *v20;
    v7[1] = *v20;
    if (v26)
      *(_QWORD *)(v26 + 16) = v7;
    v20[2] = v7[2];
    *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v20;
    *v20 = (uint64_t)v7;
    v7[2] = (uint64_t)v20;
    v19 = v7;
  }
  v23 = v20[2];
  *((_BYTE *)v20 + 24) = *(_BYTE *)(v23 + 24);
  *(_BYTE *)(v23 + 24) = 1;
  *((_BYTE *)v19 + 24) = 1;
  v24 = *(uint64_t **)v23;
  v27 = *(_QWORD *)(*(_QWORD *)v23 + 8);
  *(_QWORD *)v23 = v27;
  if (v27)
    *(_QWORD *)(v27 + 16) = v23;
  v24[2] = *(_QWORD *)(v23 + 16);
  *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v24;
  v24[1] = v23;
LABEL_72:
  *(_QWORD *)(v23 + 16) = v24;
  return result;
}

uint64_t std::__tree<boost::archive::detail::basic_serializer const*,boost::archive::detail::basic_serializer_map::type_info_pointer_compare,std::allocator<boost::archive::detail::basic_serializer const*>>::find<boost::archive::detail::basic_serializer const*>(uint64_t a1, uint64_t **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  int v6;
  uint64_t *v7;

  v2 = a1 + 8;
  v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
    return v2;
  v5 = a1 + 8;
  do
  {
    v6 = boost::serialization::extended_type_info::operator<(**(_QWORD **)(v3 + 32), **a2);
    v7 = (uint64_t *)(v3 + 8);
    if (!v6)
    {
      v7 = (uint64_t *)v3;
      v5 = v3;
    }
    v3 = *v7;
  }
  while (*v7);
  if (v5 == v2 || boost::serialization::extended_type_info::operator<(**a2, **(_QWORD **)(v5 + 32)))
    return v2;
  return v5;
}

_QWORD *boost::archive::basic_text_iprimitive<std::istream>::load(_QWORD *a1, _BYTE *a2)
{
  _QWORD *result;

  result = boost::archive::basic_text_iprimitive<std::istream>::load<short>(a1);
  *a2 = 0;
  return result;
}

{
  _QWORD *result;

  result = boost::archive::basic_text_iprimitive<std::istream>::load<short>(a1);
  *a2 = 0;
  return result;
}

{
  _QWORD *result;

  result = boost::archive::basic_text_iprimitive<std::istream>::load<unsigned short>(a1);
  *a2 = 0;
  return result;
}

_QWORD *boost::archive::basic_text_iprimitive<std::istream>::load(_QWORD *a1, _DWORD *a2)
{
  _QWORD *result;

  result = boost::archive::basic_text_iprimitive<std::istream>::load<int>(a1);
  *a2 = 0;
  return result;
}

uint64_t boost::archive::basic_text_iprimitive<std::istream>::basic_text_iprimitive(uint64_t a1, uint64_t *a2, char a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  std::ios_base *v12;
  std::locale *rdbuf;
  std::locale v15;
  std::locale v16;
  std::locale v17;

  *(_QWORD *)a1 = a2;
  v6 = *a2;
  v7 = (char *)a2 + *(_QWORD *)(*a2 - 24);
  *(_QWORD *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 16) = *((_DWORD *)v7 + 2);
  v8 = (char *)a2 + *(_QWORD *)(v6 - 24);
  *(_QWORD *)(a1 + 40) = &off_25142D378;
  v9 = a1 + 40;
  *(_QWORD *)(a1 + 24) = v8;
  *(_QWORD *)(a1 + 32) = *((_QWORD *)v8 + 2);
  *(_QWORD *)(a1 + 48) = 0;
  std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)));
  v10 = std::locale::id::__get(MEMORY[0x24BEDB488]);
  std::locale::__install_ctor((std::locale *)(v9 + 16), &v17, (std::locale::facet *)v9, v10);
  std::locale::~locale(&v17);
  v11 = *(_QWORD **)a1;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)a1;
  std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(_QWORD *)(*v11 - 24)));
  if ((a3 & 1) == 0)
  {
    std::istream::sync();
    v12 = (std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24));
    std::ios_base::getloc(v12);
    std::ios_base::imbue(v12, (const std::locale *)(v9 + 16));
    std::locale::~locale(&v17);
    rdbuf = (std::locale *)v12->__rdbuf_;
    if (rdbuf)
    {
      (*((void (**)(std::locale *, uint64_t))rdbuf->__locale_ + 2))(rdbuf, v9 + 16);
      std::locale::locale(&v16, rdbuf + 1);
      std::locale::operator=(rdbuf + 1, (const std::locale *)(v9 + 16));
      std::locale::~locale(&v16);
    }
    std::locale::~locale(&v15);
  }
  *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 8) &= ~1u;
  return a1;
}

{
  return __ZN5boost7archive21basic_text_iprimitiveINSt3__113basic_istreamIcNS2_11char_traitsIcEEEEEC2ERS6_b(a1, a2, a3);
}

void sub_243A61864(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, char a12)
{
  uint64_t v12;
  uint64_t v13;
  std::locale *v14;
  std::locale *v15;

  std::locale::~locale(&a10);
  boost::archive::basic_istream_locale_saver<char,std::char_traits<char>>::~basic_istream_locale_saver(v15);
  std::locale::~locale(v14);
  MEMORY[0x2494FEC80](v13);
  *(_QWORD *)(*(_QWORD *)(v12 + 24) + 16) = *(_QWORD *)(v12 + 32);
  *(_DWORD *)(*(_QWORD *)(v12 + 8) + 8) = *(_DWORD *)(v12 + 16);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::basic_text_iprimitive<std::istream>::~basic_text_iprimitive(uint64_t a1)
{
  boost::archive::basic_istream_locale_saver<char,std::char_traits<char>>::~basic_istream_locale_saver((std::locale *)(a1 + 64));
  std::locale::~locale((std::locale *)(a1 + 56));
  MEMORY[0x2494FEC80](a1 + 40);
  *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) = *(_QWORD *)(a1 + 32);
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 8) = *(_DWORD *)(a1 + 16);
  return a1;
}

{
  return __ZN5boost7archive21basic_text_iprimitiveINSt3__113basic_istreamIcNS2_11char_traitsIcEEEEED2Ev(a1);
}

uint64_t boost::archive::basic_text_iprimitive<std::istream>::load_binary(uint64_t result, _BYTE *a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v6;
  _QWORD v7[2];
  char v8;
  __int16 v9;
  uint64_t v10;
  char v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  if (a3)
  {
    v3 = (_QWORD *)result;
    if ((*(_BYTE *)(*(_QWORD *)result + *(_QWORD *)(**(_QWORD **)result - 24) + 32) & 5) != 0)
    {
      boost::archive::archive_exception::archive_exception((uint64_t)v7, 8, 0, 0);
      boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v7);
    }
    v4 = a3;
    v7[0] = *(_QWORD *)result;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    do
    {
      boost::archive::iterators::transform_width<boost::archive::iterators::binary_from_base64<boost::archive::iterators::remove_whitespace<boost::archive::iterators::istream_iterator<char>>,int>,8,6,char>::fill((uint64_t)v7);
      LOBYTE(v9) = 0;
      *a2++ = HIBYTE(v9);
      --v4;
    }
    while (v4);
    v6 = MEMORY[0x24BDAC740];
    do
    {
      result = std::istream::get();
      if ((*(_BYTE *)(*v3 + *(_QWORD *)(*(_QWORD *)*v3 - 24) + 32) & 2) != 0)
        break;
      result = (result & 0x80) != 0
             ? __maskrune((char)result, 0x4000uLL)
             : *(_DWORD *)(v6 + 4 * (char)result + 60) & 0x4000u;
    }
    while (!(_DWORD)result);
  }
  return result;
}

void sub_243A61A44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  boost::archive::archive_exception::~archive_exception(&a10);
  _Unwind_Resume(a1);
}

void boost::archive::codecvt_null<char>::~codecvt_null()
{
  void *v0;

  v0 = (void *)MEMORY[0x2494FEC80]();
  operator delete(v0);
}

uint64_t boost::archive::codecvt_null<char>::do_always_noconv()
{
  return 1;
}

std::locale *boost::archive::basic_istream_locale_saver<char,std::char_traits<char>>::~basic_istream_locale_saver(std::locale *a1)
{
  std::ios_base *v2;
  std::locale *rdbuf;
  std::locale *v4;
  std::locale v6;
  std::locale v7;
  std::locale v8;

  std::istream::sync();
  v2 = (std::ios_base *)((char *)a1->__locale_ + *(_QWORD *)(*(_QWORD *)a1->__locale_ - 24));
  std::ios_base::getloc(v2);
  std::ios_base::imbue(v2, a1 + 1);
  std::locale::~locale(&v8);
  rdbuf = (std::locale *)v2->__rdbuf_;
  if (rdbuf)
  {
    (*((void (**)(std::locale *, std::locale *))rdbuf->__locale_ + 2))(rdbuf, a1 + 1);
    v4 = rdbuf + 1;
    std::locale::locale(&v7, v4);
    std::locale::operator=(v4, a1 + 1);
    std::locale::~locale(&v7);
  }
  std::locale::~locale(&v6);
  std::locale::~locale(a1 + 1);
  return a1;
}

void sub_243A61B3C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  __clang_call_terminate(a1);
}

uint64_t boost::archive::iterators::transform_width<boost::archive::iterators::binary_from_base64<boost::archive::iterators::remove_whitespace<boost::archive::iterators::istream_iterator<char>>,int>,8,6,char>::fill(uint64_t result)
{
  uint64_t v1;
  int v2;
  unsigned int v3;
  unsigned int v4;
  int v5;
  unsigned int v6;
  int v7;
  BOOL v8;

  v1 = result;
  v2 = 0;
  *(_BYTE *)(result + 33) = 0;
  v3 = *(_DWORD *)(result + 40);
  v4 = 8;
  do
  {
    if (v3)
    {
      v5 = *(_DWORD *)(v1 + 36);
    }
    else if (*(_BYTE *)(v1 + 44))
    {
      v5 = 0;
      *(_DWORD *)(v1 + 36) = 0;
      v3 = v4;
    }
    else
    {
      v5 = boost::iterators::transform_iterator<boost::archive::iterators::detail::to_6_bit<int>,boost::archive::iterators::remove_whitespace<boost::archive::iterators::istream_iterator<char>>,boost::use_default,boost::use_default>::dereference(v1);
      *(_BYTE *)(v1 + 17) = 0;
      result = *(_QWORD *)v1;
      if (*(_QWORD *)v1)
        result = std::istream::ignore();
      *(_DWORD *)(v1 + 36) = v5;
      v2 = *(unsigned __int8 *)(v1 + 33);
      v3 = 6;
    }
    if (v3 >= v4)
      v6 = v4;
    else
      v6 = v3;
    v7 = (v2 << v6) | (v5 >> (v3 - v6)) & ~(-1 << v6);
    v2 = (((_BYTE)v2 << v6) | (v5 >> (v3 - v6)) & ~(-1 << v6));
    *(_BYTE *)(v1 + 33) = v7;
    *(_DWORD *)(v1 + 40) = v3 - v6;
    v8 = v4 > v3;
    v3 -= v6;
    v4 -= v6;
  }
  while (v8);
  *(_BYTE *)(v1 + 32) = 1;
  return result;
}

uint64_t boost::iterators::transform_iterator<boost::archive::iterators::detail::to_6_bit<int>,boost::archive::iterators::remove_whitespace<boost::archive::iterators::istream_iterator<char>>,boost::use_default,boost::use_default>::dereference(uint64_t a1)
{
  uint64_t v2;
  unsigned __int8 v3;
  unsigned int v4;

  if (!*(_BYTE *)(a1 + 17))
  {
    v2 = MEMORY[0x24BDAC740];
    while (1)
    {
      v3 = std::istream::peek();
      if ((v3 & 0x80) != 0)
      {
        if (!__maskrune(v3, 0x4000uLL))
        {
LABEL_9:
          *(_BYTE *)(a1 + 17) = 1;
          break;
        }
      }
      else if ((*(_DWORD *)(v2 + 4 * v3 + 60) & 0x4000) == 0)
      {
        goto LABEL_9;
      }
      if (*(_QWORD *)a1)
        std::istream::ignore();
    }
  }
  v4 = (char)std::istream::peek();
  return boost::archive::iterators::detail::to_6_bit<int>::operator()(a1 + 24, v4);
}

uint64_t boost::archive::iterators::detail::to_6_bit<int>::operator()(uint64_t a1, unsigned int a2)
{
  uint64_t result;
  void (**v3)(boost::archive::iterators::dataflow_exception *__hidden);
  int v4;

  if (a2 > 0x7F
    || (result = boost::archive::iterators::detail::to_6_bit<int>::operator()(int)const::lookup_table[a2],
        (_DWORD)result == -1))
  {
    v3 = off_25142D408;
    v4 = 1;
    boost::serialization::throw_exception<boost::archive::iterators::dataflow_exception>((uint64_t)&v3);
  }
  return result;
}

void sub_243A61D18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception a9)
{
  std::exception::~exception(&a9);
  _Unwind_Resume(a1);
}

void boost::serialization::throw_exception<boost::archive::iterators::dataflow_exception>(uint64_t a1)
{
  _DWORD *exception;

  exception = __cxa_allocate_exception(0x10uLL);
  *(_QWORD *)exception = off_25142D408;
  exception[2] = *(_DWORD *)(a1 + 8);
}

void boost::archive::iterators::dataflow_exception::~dataflow_exception(std::exception *this)
{
  void *v1;

  std::exception::~exception(this);
  operator delete(v1);
}

const char *boost::archive::iterators::dataflow_exception::what(boost::archive::iterators::dataflow_exception *this)
{
  uint64_t v1;

  v1 = *((int *)this + 2);
  if (v1 > 4)
    return "unknown exception code";
  else
    return off_25142D420[v1];
}

uint64_t boost::archive::basic_text_oprimitive<std::ostream>::save(_QWORD *a1)
{
  _BYTE v2[144];
  uint64_t v3;

  v3 = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(*a1 + *(_QWORD *)(*(_QWORD *)*a1 - 24) + 32) & 5) != 0)
  {
    boost::archive::archive_exception::archive_exception((uint64_t)v2, 13, 0, 0);
    boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v2);
  }
  return std::ostream::operator<<();
}

{
  return boost::archive::basic_text_oprimitive<std::ostream>::save_impl<short>(a1);
}

{
  return boost::archive::basic_text_oprimitive<std::ostream>::save_impl<unsigned short>(a1);
}

{
  return boost::archive::basic_text_oprimitive<std::ostream>::save_impl<short>(a1);
}

{
  return boost::archive::basic_text_oprimitive<std::ostream>::save_impl<int>(a1);
}

void sub_243A61E38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  boost::archive::archive_exception::~archive_exception(&a10);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::basic_text_oprimitive<std::ostream>::basic_text_oprimitive(uint64_t a1, uint64_t *a2, char a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  std::ios_base *v12;
  std::locale *rdbuf;
  std::locale v15;
  std::locale v16;
  std::locale v17;

  *(_QWORD *)a1 = a2;
  v6 = *a2;
  v7 = (char *)a2 + *(_QWORD *)(*a2 - 24);
  *(_QWORD *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 16) = *((_DWORD *)v7 + 2);
  v8 = (char *)a2 + *(_QWORD *)(v6 - 24);
  *(_QWORD *)(a1 + 40) = &off_25142D378;
  v9 = a1 + 40;
  *(_QWORD *)(a1 + 24) = v8;
  *(_QWORD *)(a1 + 32) = *((_QWORD *)v8 + 2);
  *(_QWORD *)(a1 + 48) = 0;
  std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)));
  v10 = std::locale::id::__get(MEMORY[0x24BEDB488]);
  std::locale::__install_ctor((std::locale *)(v9 + 16), &v17, (std::locale::facet *)v9, v10);
  std::locale::~locale(&v17);
  v11 = *(_QWORD **)a1;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)a1;
  std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(_QWORD *)(*v11 - 24)));
  if ((a3 & 1) == 0)
  {
    std::ostream::flush();
    v12 = (std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24));
    std::ios_base::getloc(v12);
    std::ios_base::imbue(v12, (const std::locale *)(v9 + 16));
    std::locale::~locale(&v17);
    rdbuf = (std::locale *)v12->__rdbuf_;
    if (rdbuf)
    {
      (*((void (**)(std::locale *, uint64_t))rdbuf->__locale_ + 2))(rdbuf, v9 + 16);
      std::locale::locale(&v16, rdbuf + 1);
      std::locale::operator=(rdbuf + 1, (const std::locale *)(v9 + 16));
      std::locale::~locale(&v16);
    }
    std::locale::~locale(&v15);
  }
  *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 8) &= ~1u;
  return a1;
}

{
  return __ZN5boost7archive21basic_text_oprimitiveINSt3__113basic_ostreamIcNS2_11char_traitsIcEEEEEC2ERS6_b(a1, a2, a3);
}

void sub_243A6206C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, char a12)
{
  uint64_t v12;
  uint64_t v13;
  std::locale *v14;
  std::locale *v15;

  std::locale::~locale(&a10);
  boost::archive::basic_ostream_locale_saver<char,std::char_traits<char>>::~basic_ostream_locale_saver(v15);
  std::locale::~locale(v14);
  MEMORY[0x2494FEC80](v13);
  *(_QWORD *)(*(_QWORD *)(v12 + 24) + 16) = *(_QWORD *)(v12 + 32);
  *(_DWORD *)(*(_QWORD *)(v12 + 8) + 8) = *(_DWORD *)(v12 + 16);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::basic_text_oprimitive<std::ostream>::~basic_text_oprimitive(uint64_t a1)
{
  const std::locale::facet *v2;
  std::locale v4;

  if (!MEMORY[0x2494FECD4]())
  {
    std::ios_base::getloc((const std::ios_base *)(*(_QWORD *)a1 + *(_QWORD *)(**(_QWORD **)a1 - 24)));
    v2 = std::locale::use_facet(&v4, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 10);
    std::locale::~locale(&v4);
    std::ostream::put();
    std::ostream::flush();
  }
  boost::archive::basic_ostream_locale_saver<char,std::char_traits<char>>::~basic_ostream_locale_saver((std::locale *)(a1 + 64));
  std::locale::~locale((std::locale *)(a1 + 56));
  MEMORY[0x2494FEC80](a1 + 40);
  *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) = *(_QWORD *)(a1 + 32);
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 8) = *(_DWORD *)(a1 + 16);
  return a1;
}

{
  return __ZN5boost7archive21basic_text_oprimitiveINSt3__113basic_ostreamIcNS2_11char_traitsIcEEEEED2Ev(a1);
}

void sub_243A62190(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  __clang_call_terminate(a1);
}

uint64_t boost::archive::basic_text_oprimitive<std::ostream>::put(_QWORD *a1)
{
  _BYTE v2[144];
  uint64_t v3;

  v3 = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(*a1 + *(_QWORD *)(*(_QWORD *)*a1 - 24) + 32) & 5) != 0)
  {
    boost::archive::archive_exception::archive_exception((uint64_t)v2, 13, 0, 0);
    boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v2);
  }
  return std::ostream::put();
}

{
  return __ZN5boost7archive21basic_text_oprimitiveINSt3__113basic_ostreamIcNS2_11char_traitsIcEEEEE3putEc(a1);
}

void sub_243A6223C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  boost::archive::archive_exception::~archive_exception(&a10);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::basic_text_oprimitive<std::ostream>::put(uint64_t a1, _BYTE *a2)
{
  unsigned __int8 *v2;
  uint64_t result;

  if (*a2)
  {
    v2 = a2 + 1;
    do
      result = std::ostream::put();
    while (*v2++);
  }
  return result;
}

uint64_t *boost::archive::basic_text_oprimitive<std::ostream>::save_binary(uint64_t *result, uint64_t a2, unint64_t a3)
{
  uint64_t *v3;
  uint64_t v6;
  unint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;
  char v12;
  int v13;
  char v14;
  int v15;
  uint64_t v16;
  __int16 v17;
  char v18;
  int v19;
  char v20;
  int v21;
  _BYTE v22[144];
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  if (a3)
  {
    v3 = result;
    if ((*(_BYTE *)(*result + *(_QWORD *)(*(_QWORD *)*result - 24) + 32) & 5) != 0)
    {
      boost::archive::archive_exception::archive_exception((uint64_t)v22, 13, 0, 0);
      boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v22);
    }
    std::ostream::put();
    v6 = *v3;
    v16 = a2;
    v17 = 0;
    v18 = 0;
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v9 = v6;
    v10 = a2 + a3;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    result = std::__dispatch_copy_or_move[abi:ne180100]<std::_ClassicAlgPolicy,std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial,boost::archive::iterators::insert_linebreaks<boost::archive::iterators::base64_from_binary<boost::archive::iterators::transform_width<char const*,6,8,char>,char>,76,char const>,boost::archive::iterators::insert_linebreaks<boost::archive::iterators::base64_from_binary<boost::archive::iterators::transform_width<char const*,6,8,char>,char>,76,char const>,boost::archive::iterators::ostream_iterator<char>>((uint64_t)&v16, (uint64_t)&v10, &v9, (uint64_t)v22);
    v7 = a3 % 3;
    if (v7)
      v8 = v6 == 0;
    else
      v8 = 1;
    if (!v8)
    {
      result = (uint64_t *)std::ostream::put();
      if (v7 == 1)
        return (uint64_t *)std::ostream::put();
    }
  }
  return result;
}

{
  return __ZN5boost7archive21basic_text_oprimitiveINSt3__113basic_ostreamIcNS2_11char_traitsIcEEEEE11save_binaryEPKvm(result, a2, a3);
}

void sub_243A623CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::exception a20)
{
  boost::archive::archive_exception::~archive_exception(&a20);
  _Unwind_Resume(a1);
}

_QWORD *std::__dispatch_copy_or_move[abi:ne180100]<std::_ClassicAlgPolicy,std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial,boost::archive::iterators::insert_linebreaks<boost::archive::iterators::base64_from_binary<boost::archive::iterators::transform_width<char const*,6,8,char>,char>,76,char const>,boost::archive::iterators::insert_linebreaks<boost::archive::iterators::base64_from_binary<boost::archive::iterators::transform_width<char const*,6,8,char>,char>,76,char const>,boost::archive::iterators::ostream_iterator<char>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  __int16 v4;
  char v5;
  int v6;
  __int16 v7;
  char v8;
  int v9;
  uint64_t v11;
  uint64_t v12;
  __int16 v13;
  char v14;
  int v15;
  char v16;
  int v17;
  uint64_t v18;
  __int16 v19;
  char v20;
  int v21;
  char v22;
  int v23;

  v4 = *(_WORD *)(a1 + 8);
  v5 = *(_BYTE *)(a1 + 10);
  v6 = *(_DWORD *)(a1 + 12);
  v18 = *(_QWORD *)a1;
  v19 = v4;
  v20 = v5;
  v21 = v6;
  v22 = 0;
  v23 = *(_DWORD *)(a1 + 32);
  v7 = *(_WORD *)(a2 + 8);
  v8 = *(_BYTE *)(a2 + 10);
  v9 = *(_DWORD *)(a2 + 12);
  v12 = *(_QWORD *)a2;
  v13 = v7;
  v14 = v8;
  v15 = v9;
  v16 = 0;
  v17 = *(_DWORD *)(a2 + 32);
  v11 = *a3;
  return std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,boost::archive::iterators::insert_linebreaks<boost::archive::iterators::base64_from_binary<boost::archive::iterators::transform_width<char const*,6,8,char>,char>,76,char const>,boost::archive::iterators::insert_linebreaks<boost::archive::iterators::base64_from_binary<boost::archive::iterators::transform_width<char const*,6,8,char>,char>,76,char const>,boost::archive::iterators::ostream_iterator<char>,0>(&v18, &v12, &v11, a4);
}

_QWORD *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,boost::archive::iterators::insert_linebreaks<boost::archive::iterators::base64_from_binary<boost::archive::iterators::transform_width<char const*,6,8,char>,char>,76,char const>,boost::archive::iterators::insert_linebreaks<boost::archive::iterators::base64_from_binary<boost::archive::iterators::transform_width<char const*,6,8,char>,char>,76,char const>,boost::archive::iterators::ostream_iterator<char>,0>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  __int16 v5;
  char v6;
  int v7;
  int v8;
  uint64_t v9;
  __int16 v10;
  char v11;
  int v12;
  int v13;
  _QWORD *result;
  __int16 v15;
  char v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int16 v22;
  char v23;
  int v24;
  char v25;
  int v26;
  uint64_t v27;
  __int16 v28;
  char v29;
  int v30;
  char v31;
  int v32;
  uint64_t v33;
  __int16 v34;
  char v35;
  int v36;
  int v37;
  uint64_t v38;

  v5 = *((_WORD *)a1 + 4);
  v6 = *((_BYTE *)a1 + 10);
  v7 = *((_DWORD *)a1 + 3);
  v8 = *((_DWORD *)a1 + 8);
  v9 = *a2;
  v10 = *((_WORD *)a2 + 4);
  v11 = *((_BYTE *)a2 + 10);
  v12 = *((_DWORD *)a2 + 3);
  v13 = *((_DWORD *)a2 + 8);
  v27 = *a1;
  v28 = v5;
  v29 = v6;
  v30 = v7;
  v31 = 0;
  v32 = v8;
  v22 = v10;
  v23 = v11;
  v24 = v12;
  v25 = 0;
  v26 = v13;
  v20 = *a3;
  v21 = v9;
  result = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<boost::archive::iterators::insert_linebreaks<boost::archive::iterators::base64_from_binary<boost::archive::iterators::transform_width<char const*,6,8,char>,char>,76,char const>,boost::archive::iterators::insert_linebreaks<boost::archive::iterators::base64_from_binary<boost::archive::iterators::transform_width<char const*,6,8,char>,char>,76,char const>,boost::archive::iterators::ostream_iterator<char>>((uint64_t)&v27, &v21, &v20, (uint64_t)&v33);
  v15 = v34;
  v16 = v35;
  v17 = v36;
  v18 = v37;
  v19 = v38;
  *(_QWORD *)a4 = v33;
  *(_WORD *)(a4 + 8) = v15;
  *(_BYTE *)(a4 + 10) = v16;
  *(_DWORD *)(a4 + 12) = v17;
  *(_BYTE *)(a4 + 16) = 0;
  *(_DWORD *)(a4 + 32) = v18;
  *(_QWORD *)(a4 + 40) = v19;
  return result;
}

_QWORD *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<boost::archive::iterators::insert_linebreaks<boost::archive::iterators::base64_from_binary<boost::archive::iterators::transform_width<char const*,6,8,char>,char>,76,char const>,boost::archive::iterators::insert_linebreaks<boost::archive::iterators::base64_from_binary<boost::archive::iterators::transform_width<char const*,6,8,char>,char>,76,char const>,boost::archive::iterators::ostream_iterator<char>>@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X2>, _QWORD *a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v8;
  int v9;
  _QWORD *result;
  int v11;
  int v12;
  __int16 v13;
  char v14;

  while (1)
  {
    v8 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 == *a2)
      break;
    v9 = *(_DWORD *)(a1 + 32);
LABEL_4:
    if (v9 != 76 && !*(_BYTE *)(a1 + 8))
      boost::archive::iterators::transform_width<char const*,6,8,char>::fill(a1);
    result = boost::archive::iterators::ostream_iterator<char>::put_val(a3);
    v11 = *(_DWORD *)(a1 + 32);
    if (v11 == 76)
    {
      v12 = 0;
    }
    else
    {
      v12 = v11 + 1;
      *(_BYTE *)(a1 + 8) = 0;
    }
    *(_DWORD *)(a1 + 32) = v12;
  }
  *(_BYTE *)(a1 + 16) = 1;
  v9 = *(_DWORD *)(a1 + 32);
  if (*(_DWORD *)(a1 + 12))
    goto LABEL_4;
  v13 = *(_WORD *)(a1 + 8);
  v14 = *(_BYTE *)(a1 + 10);
  *(_QWORD *)a4 = v8;
  *(_WORD *)(a4 + 8) = v13;
  *(_BYTE *)(a4 + 10) = v14;
  *(_DWORD *)(a4 + 12) = 0;
  *(_BYTE *)(a4 + 16) = 0;
  *(_DWORD *)(a4 + 32) = v9;
  *(_QWORD *)(a4 + 40) = *a3;
  return result;
}

uint64_t boost::archive::iterators::transform_width<char const*,6,8,char>::fill(uint64_t result)
{
  int v1;
  unsigned int v2;
  char v3;
  unsigned int v4;
  char *v5;
  unsigned int v6;
  BOOL v7;

  LOBYTE(v1) = 0;
  *(_BYTE *)(result + 9) = 0;
  v2 = *(_DWORD *)(result + 12);
  v3 = *(_BYTE *)(result + 10);
  v4 = 6;
  do
  {
    if (!v2)
    {
      if (*(_BYTE *)(result + 16))
      {
        v3 = 0;
        v2 = v4;
      }
      else
      {
        v5 = (char *)(*(_QWORD *)result)++;
        v3 = *v5;
        v2 = 8;
      }
      *(_BYTE *)(result + 10) = v3;
    }
    if (v2 >= v4)
      v6 = v4;
    else
      v6 = v2;
    v1 = (v1 << v6) | (v3 >> (v2 - v6)) & ~(-1 << v6);
    *(_BYTE *)(result + 9) = v1;
    *(_DWORD *)(result + 12) = v2 - v6;
    v7 = v4 > v2;
    v2 -= v6;
    v4 -= v6;
  }
  while (v7);
  *(_BYTE *)(result + 8) = 1;
  return result;
}

std::locale *boost::archive::basic_ostream_locale_saver<char,std::char_traits<char>>::~basic_ostream_locale_saver(std::locale *a1)
{
  std::ios_base *v2;
  std::locale *rdbuf;
  std::locale *v4;
  std::locale v6;
  std::locale v7;
  std::locale v8;

  std::ostream::flush();
  v2 = (std::ios_base *)((char *)a1->__locale_ + *(_QWORD *)(*(_QWORD *)a1->__locale_ - 24));
  std::ios_base::getloc(v2);
  std::ios_base::imbue(v2, a1 + 1);
  std::locale::~locale(&v8);
  rdbuf = (std::locale *)v2->__rdbuf_;
  if (rdbuf)
  {
    (*((void (**)(std::locale *, std::locale *))rdbuf->__locale_ + 2))(rdbuf, a1 + 1);
    v4 = rdbuf + 1;
    std::locale::locale(&v7, v4);
    std::locale::operator=(v4, a1 + 1);
    std::locale::~locale(&v7);
  }
  std::locale::~locale(&v6);
  std::locale::~locale(a1 + 1);
  return a1;
}

void sub_243A62780(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  __clang_call_terminate(a1);
}

_QWORD *boost::archive::iterators::ostream_iterator<char>::put_val(_QWORD *a1)
{
  _QWORD *result;

  result = (_QWORD *)*a1;
  if (result)
  {
    result = (_QWORD *)std::ostream::put();
    if (*(_DWORD *)(*a1 + *(_QWORD *)(*(_QWORD *)*a1 - 24) + 32))
      *a1 = 0;
  }
  return result;
}

uint64_t *boost::serialization::extended_type_info::key_register(uint64_t *this)
{
  uint64_t *v1;
  uint64_t *instance;
  uint64_t *v3;

  if (this[2])
  {
    v1 = this;
    instance = boost::serialization::singleton<std::multiset<boost::serialization::extended_type_info const*,boost::serialization::detail::key_compare,std::allocator<boost::serialization::extended_type_info const*>>>::get_instance();
    v3 = v1;
    return std::__tree<boost::serialization::extended_type_info const*,boost::serialization::detail::key_compare,std::allocator<boost::serialization::extended_type_info const*>>::__emplace_multi<boost::serialization::extended_type_info const*>((uint64_t **)instance, (uint64_t *)&v3);
  }
  return this;
}

void boost::serialization::extended_type_info::key_unregister(boost::serialization::extended_type_info *this)
{
  BOOL v1;
  uint64_t *instance;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  boost::serialization::extended_type_info *v8;

  if (*((_QWORD *)this + 2))
    v1 = boost::serialization::detail::singleton_wrapper<std::multiset<boost::serialization::extended_type_info const*,boost::serialization::detail::key_compare,std::allocator<boost::serialization::extended_type_info const*>>>::get_is_destroyed(void)::is_destroyed_flag == 0;
  else
    v1 = 0;
  if (v1)
  {
    instance = boost::serialization::singleton<std::multiset<boost::serialization::extended_type_info const*,boost::serialization::detail::key_compare,std::allocator<boost::serialization::extended_type_info const*>>>::get_instance();
    v8 = this;
    v4 = std::__tree<boost::serialization::extended_type_info const*,boost::serialization::detail::key_compare,std::allocator<boost::serialization::extended_type_info const*>>::__lower_bound<boost::serialization::extended_type_info const*>((uint64_t)instance, (uint64_t *)&v8, (_QWORD *)instance[1], instance + 1);
    v8 = this;
    v5 = std::__tree<boost::serialization::extended_type_info const*,boost::serialization::detail::key_compare,std::allocator<boost::serialization::extended_type_info const*>>::__upper_bound<boost::serialization::extended_type_info const*>((uint64_t)instance, (uint64_t *)&v8, (_QWORD *)instance[1], instance + 1);
    if (v4 != v5)
    {
      while ((boost::serialization::extended_type_info *)v4[4] != this)
      {
        v6 = (uint64_t *)v4[1];
        if (v6)
        {
          do
          {
            v7 = v6;
            v6 = (uint64_t *)*v6;
          }
          while (v6);
        }
        else
        {
          do
          {
            v7 = (uint64_t *)v4[2];
            v1 = *v7 == (_QWORD)v4;
            v4 = v7;
          }
          while (!v1);
        }
        v4 = v7;
        if (v7 == v5)
          return;
      }
      std::__tree<boost::archive::detail::basic_serializer const*,boost::archive::detail::basic_serializer_map::type_info_pointer_compare,std::allocator<boost::archive::detail::basic_serializer const*>>::__remove_node_pointer((uint64_t **)instance, v4);
      operator delete(v4);
    }
  }
}

uint64_t boost::serialization::extended_type_info::find(boost::serialization::extended_type_info *this, const char *a2)
{
  uint64_t *instance;
  uint64_t *v4;
  uint64_t (***v6)(boost::serialization::detail::extended_type_info_arg *__hidden, const boost::serialization::extended_type_info *);
  uint64_t (**v7)(boost::serialization::detail::extended_type_info_arg *__hidden, const boost::serialization::extended_type_info *);
  int v8;
  boost::serialization::extended_type_info *v9;

  instance = boost::serialization::singleton<std::multiset<boost::serialization::extended_type_info const*,boost::serialization::detail::key_compare,std::allocator<boost::serialization::extended_type_info const*>>>::get_instance();
  v8 = 0;
  v9 = this;
  v6 = &v7;
  v7 = off_25142D4C8;
  v4 = std::__tree<boost::serialization::extended_type_info const*,boost::serialization::detail::key_compare,std::allocator<boost::serialization::extended_type_info const*>>::find<boost::serialization::extended_type_info const*>((uint64_t)instance, (uint64_t *)&v6);
  if (instance + 1 == v4)
    return 0;
  else
    return v4[4];
}

uint64_t boost::serialization::extended_type_info::extended_type_info(uint64_t this, int a2, const char *a3)
{
  *(_QWORD *)this = &unk_25142D458;
  *(_DWORD *)(this + 8) = a2;
  *(_QWORD *)(this + 16) = a3;
  return this;
}

uint64_t boost::serialization::extended_type_info::operator<(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;

  if (a1 == a2)
    return 0;
  v2 = *(_DWORD *)(a1 + 8);
  v3 = *(_DWORD *)(a2 + 8);
  if (v2 == v3)
    return (**(uint64_t (***)(uint64_t))a1)(a1);
  else
    return v2 < v3;
}

uint64_t boost::serialization::extended_type_info::operator==(_DWORD *a1, _DWORD *a2)
{
  if (a1 == a2)
    return 1;
  if (a1[2] == a2[2])
    return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 8))(a1);
  return 0;
}

uint64_t *boost::serialization::singleton<std::multiset<boost::serialization::extended_type_info const*,boost::serialization::detail::key_compare,std::allocator<boost::serialization::extended_type_info const*>>>::get_instance()
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0
  {
    qword_2543CD348 = 0;
    qword_2543CD340 = 0;
    boost::serialization::singleton<std::multiset<boost::serialization::extended_type_info const*,boost::serialization::detail::key_compare,std::allocator<boost::serialization::extended_type_info const*>>>::get_instance(void)::t = (uint64_t)&qword_2543CD340;
    __cxa_atexit((void (*)(void *))boost::serialization::detail::singleton_wrapper<std::multiset<boost::serialization::extended_type_info const*,boost::serialization::detail::key_compare,std::allocator<boost::serialization::extended_type_info const*>>>::~singleton_wrapper, &boost::serialization::singleton<std::multiset<boost::serialization::extended_type_info const*,boost::serialization::detail::key_compare,std::allocator<boost::serialization::extended_type_info const*>>>::get_instance(void)::t, &dword_2439D9000);
  }
  return &boost::serialization::singleton<std::multiset<boost::serialization::extended_type_info const*,boost::serialization::detail::key_compare,std::allocator<boost::serialization::extended_type_info const*>>>::get_instance(void)::t;
}

uint64_t boost::serialization::detail::extended_type_info_arg::is_less_than(boost::serialization::detail::extended_type_info_arg *this, const boost::serialization::extended_type_info *a2)
{
  return 0;
}

uint64_t boost::serialization::detail::extended_type_info_arg::is_equal(boost::serialization::detail::extended_type_info_arg *this, const boost::serialization::extended_type_info *a2)
{
  return 0;
}

uint64_t boost::serialization::detail::extended_type_info_arg::get_debug_info(boost::serialization::detail::extended_type_info_arg *this)
{
  return *((_QWORD *)this + 2);
}

uint64_t boost::serialization::detail::extended_type_info_arg::construct(boost::serialization::detail::extended_type_info_arg *this, uint64_t a2, ...)
{
  return 0;
}

uint64_t boost::serialization::detail::singleton_wrapper<std::multiset<boost::serialization::extended_type_info const*,boost::serialization::detail::key_compare,std::allocator<boost::serialization::extended_type_info const*>>>::~singleton_wrapper(uint64_t a1)
{
  boost::serialization::detail::singleton_wrapper<std::multiset<boost::serialization::extended_type_info const*,boost::serialization::detail::key_compare,std::allocator<boost::serialization::extended_type_info const*>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  std::__tree<boost::archive::detail::basic_iarchive_impl::cobject_type>::destroy(a1, *(_QWORD **)(a1 + 8));
  return a1;
}

uint64_t *std::__tree<boost::serialization::extended_type_info const*,boost::serialization::detail::key_compare,std::allocator<boost::serialization::extended_type_info const*>>::__emplace_multi<boost::serialization::extended_type_info const*>(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v4;
  uint64_t **leaf_high;
  uint64_t v7;

  v4 = (uint64_t *)operator new(0x28uLL);
  v4[4] = *a2;
  leaf_high = (uint64_t **)std::__tree<boost::serialization::extended_type_info const*,boost::serialization::detail::key_compare,std::allocator<boost::serialization::extended_type_info const*>>::__find_leaf_high((uint64_t)a1, &v7, v4 + 4);
  std::__tree<std::__value_type<int,std::vector<std::string>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::string>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::string>>>>::__insert_node_at(a1, v7, leaf_high, v4);
  return v4;
}

void sub_243A62B30(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__tree<boost::serialization::extended_type_info const*,boost::serialization::detail::key_compare,std::allocator<boost::serialization::extended_type_info const*>>::__find_leaf_high(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  const char *v9;
  _QWORD *result;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    v6 = *a3;
    do
    {
      while (1)
      {
        v5 = v4;
        v7 = v4[4];
        if (v6 == v7)
          break;
        v8 = *(const char **)(v6 + 16);
        v9 = *(const char **)(v7 + 16);
        if (v8 == v9 || (strcmp(v8, v9) & 0x80000000) == 0)
          break;
        v4 = (_QWORD *)*v5;
        result = v5;
        if (!*v5)
          goto LABEL_11;
      }
      v4 = (_QWORD *)v5[1];
    }
    while (v4);
    result = v5 + 1;
  }
  else
  {
    result = (_QWORD *)(a1 + 8);
  }
LABEL_11:
  *a2 = v5;
  return result;
}

_QWORD *std::__tree<boost::serialization::extended_type_info const*,boost::serialization::detail::key_compare,std::allocator<boost::serialization::extended_type_info const*>>::__lower_bound<boost::serialization::extended_type_info const*>(uint64_t a1, uint64_t *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  const char *v9;

  if (a3)
  {
    v5 = a3;
    v6 = *a2;
    do
    {
      v7 = v5[4];
      if (v7 == v6 || (v8 = *(const char **)(v7 + 16), v9 = *(const char **)(v6 + 16), v8 == v9))
      {
        a4 = v5;
      }
      else if (strcmp(v8, v9) < 0)
      {
        ++v5;
      }
      else
      {
        a4 = v5;
      }
      v5 = (_QWORD *)*v5;
    }
    while (v5);
  }
  return a4;
}

_QWORD *std::__tree<boost::serialization::extended_type_info const*,boost::serialization::detail::key_compare,std::allocator<boost::serialization::extended_type_info const*>>::__upper_bound<boost::serialization::extended_type_info const*>(uint64_t a1, uint64_t *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  const char *v9;
  int v10;
  _QWORD *v11;

  if (a3)
  {
    v5 = a3;
    v6 = *a2;
    do
    {
      v7 = v5[4];
      if (v6 == v7 || (v8 = *(const char **)(v6 + 16), v9 = *(const char **)(v7 + 16), v8 == v9))
      {
        v11 = v5 + 1;
      }
      else
      {
        v10 = strcmp(v8, v9);
        v11 = v5 + 1;
        if (v10 < 0)
        {
          v11 = v5;
          a4 = v5;
        }
      }
      v5 = (_QWORD *)*v11;
    }
    while (*v11);
  }
  return a4;
}

_QWORD *std::__tree<boost::serialization::extended_type_info const*,boost::serialization::detail::key_compare,std::allocator<boost::serialization::extended_type_info const*>>::find<boost::serialization::extended_type_info const*>(uint64_t a1, uint64_t *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  const char *v7;
  const char *v8;

  v3 = (_QWORD *)(a1 + 8);
  v4 = std::__tree<boost::serialization::extended_type_info const*,boost::serialization::detail::key_compare,std::allocator<boost::serialization::extended_type_info const*>>::__lower_bound<boost::serialization::extended_type_info const*>(a1, a2, *(_QWORD **)(a1 + 8), (_QWORD *)(a1 + 8));
  if (v3 == v4)
    return v3;
  v5 = v4;
  v6 = v4[4];
  if (*a2 != v6)
  {
    v7 = *(const char **)(*a2 + 16);
    v8 = *(const char **)(v6 + 16);
    if (v7 != v8 && strcmp(v7, v8) < 0)
      return v3;
  }
  return v5;
}

void __cxx_global_var_init_0()
{
  {
    boost::serialization::singleton<std::multiset<boost::serialization::extended_type_info const*,boost::serialization::detail::key_compare,std::allocator<boost::serialization::extended_type_info const*>>>::m_instance = (uint64_t)boost::serialization::singleton<std::multiset<boost::serialization::extended_type_info const*,boost::serialization::detail::key_compare,std::allocator<boost::serialization::extended_type_info const*>>>::get_instance();
  }
}

BOOL boost::serialization::typeid_system::extended_type_info_typeid_0::is_less_than(boost::serialization::typeid_system::extended_type_info_typeid_0 *this, const boost::serialization::extended_type_info *a2)
{
  return this != a2 && std::type_info::before[abi:ne180100](*((_QWORD *)this + 3), *((_QWORD *)a2 + 3));
}

BOOL std::type_info::before[abi:ne180100](uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  if ((v2 & 0x8000000000000000) != 0 && (v3 & 0x8000000000000000) != 0)
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) >> 31;
  else
    return v2 < v3;
}

BOOL boost::serialization::typeid_system::extended_type_info_typeid_0::is_equal(boost::serialization::typeid_system::extended_type_info_typeid_0 *this, const boost::serialization::extended_type_info *a2)
{
  return std::type_info::operator==[abi:ne180100](*((_QWORD *)this + 3), *((_QWORD *)a2 + 3));
}

_QWORD *boost::serialization::typeid_system::extended_type_info_typeid_0::extended_type_info_typeid_0(boost::serialization::typeid_system::extended_type_info_typeid_0 *this, const char *a2)
{
  _QWORD *result;

  result = (_QWORD *)boost::serialization::extended_type_info::extended_type_info((uint64_t)this, 1, a2);
  *result = off_25142D528;
  result[3] = 0;
  return result;
}

uint64_t *boost::serialization::typeid_system::extended_type_info_typeid_0::type_register(boost::serialization::typeid_system::extended_type_info_typeid_0 *this, const std::type_info *a2)
{
  uint64_t *instance;
  unsigned int (***v5)(_QWORD, uint64_t);

  *((_QWORD *)this + 3) = a2;
  instance = boost::serialization::singleton<std::multiset<boost::serialization::typeid_system::extended_type_info_typeid_0 const*,boost::serialization::typeid_system::type_compare,std::allocator<boost::serialization::typeid_system::extended_type_info_typeid_0 const*>>>::get_instance();
  v5 = (unsigned int (***)(_QWORD, uint64_t))this;
  return std::__tree<boost::serialization::typeid_system::extended_type_info_typeid_0 const*,boost::serialization::typeid_system::type_compare,std::allocator<boost::serialization::typeid_system::extended_type_info_typeid_0 const*>>::__emplace_multi<boost::serialization::typeid_system::extended_type_info_typeid_0 const*>((uint64_t **)instance, &v5);
}

uint64_t *boost::serialization::typeid_system::extended_type_info_typeid_0::type_unregister(uint64_t *this)
{
  uint64_t v1;
  BOOL v2;
  uint64_t *instance;
  uint64_t *v4;
  uint64_t v5;

  v1 = (uint64_t)this;
  if (this[3])
    v2 = boost::serialization::detail::singleton_wrapper<std::multiset<boost::serialization::typeid_system::extended_type_info_typeid_0 const*,boost::serialization::typeid_system::type_compare,std::allocator<boost::serialization::typeid_system::extended_type_info_typeid_0 const*>>>::get_is_destroyed(void)::is_destroyed_flag == 0;
  else
    v2 = 0;
  if (v2)
  {
    instance = boost::serialization::singleton<std::multiset<boost::serialization::typeid_system::extended_type_info_typeid_0 const*,boost::serialization::typeid_system::type_compare,std::allocator<boost::serialization::typeid_system::extended_type_info_typeid_0 const*>>>::get_instance();
    v5 = v1;
    this = (uint64_t *)std::__tree<boost::serialization::typeid_system::extended_type_info_typeid_0 const*,boost::serialization::typeid_system::type_compare,std::allocator<boost::serialization::typeid_system::extended_type_info_typeid_0 const*>>::find<boost::serialization::typeid_system::extended_type_info_typeid_0 const*>((uint64_t)instance, &v5);
    if (instance + 1 != this)
    {
      v4 = this;
      do
      {
        std::__tree<boost::archive::detail::basic_serializer const*,boost::archive::detail::basic_serializer_map::type_info_pointer_compare,std::allocator<boost::archive::detail::basic_serializer const*>>::__remove_node_pointer((uint64_t **)instance, v4);
        operator delete(v4);
        v5 = v1;
        this = (uint64_t *)std::__tree<boost::serialization::typeid_system::extended_type_info_typeid_0 const*,boost::serialization::typeid_system::type_compare,std::allocator<boost::serialization::typeid_system::extended_type_info_typeid_0 const*>>::find<boost::serialization::typeid_system::extended_type_info_typeid_0 const*>((uint64_t)instance, &v5);
        v4 = this;
      }
      while (instance + 1 != this);
    }
  }
  *(_QWORD *)(v1 + 24) = 0;
  return this;
}

uint64_t boost::serialization::typeid_system::extended_type_info_typeid_0::get_extended_type_info(boost::serialization::typeid_system::extended_type_info_typeid_0 *this, const std::type_info *a2)
{
  uint64_t *instance;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v7;
  _QWORD v8[3];
  const std::type_info *v9;

  boost::serialization::extended_type_info::extended_type_info((uint64_t)v8, 1, 0);
  v8[0] = off_25142D588;
  v9 = a2;
  instance = boost::serialization::singleton<std::multiset<boost::serialization::typeid_system::extended_type_info_typeid_0 const*,boost::serialization::typeid_system::type_compare,std::allocator<boost::serialization::typeid_system::extended_type_info_typeid_0 const*>>>::get_instance();
  v7 = v8;
  v4 = std::__tree<boost::serialization::typeid_system::extended_type_info_typeid_0 const*,boost::serialization::typeid_system::type_compare,std::allocator<boost::serialization::typeid_system::extended_type_info_typeid_0 const*>>::find<boost::serialization::typeid_system::extended_type_info_typeid_0 const*>((uint64_t)instance, &v7);
  if (instance + 1 == (uint64_t *)v4)
    v5 = 0;
  else
    v5 = *(_QWORD *)(v4 + 32);
  v8[0] = off_25142D588;
  v9 = 0;
  boost::serialization::extended_type_info::~extended_type_info((boost::serialization::extended_type_info *)v8);
  return v5;
}

void sub_243A62F50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  a14 = 0;
  boost::serialization::extended_type_info::~extended_type_info((boost::serialization::extended_type_info *)&a11);
  _Unwind_Resume(a1);
}

void boost::serialization::typeid_system::extended_type_info_typeid_arg::~extended_type_info_typeid_arg(boost::serialization::typeid_system::extended_type_info_typeid_arg *this)
{
  *(_QWORD *)this = off_25142D588;
  *((_QWORD *)this + 3) = 0;
  boost::serialization::extended_type_info::~extended_type_info(this);
}

{
  void *v1;

  *(_QWORD *)this = off_25142D588;
  *((_QWORD *)this + 3) = 0;
  boost::serialization::extended_type_info::~extended_type_info(this);
  operator delete(v1);
}

uint64_t *boost::serialization::singleton<std::multiset<boost::serialization::typeid_system::extended_type_info_typeid_0 const*,boost::serialization::typeid_system::type_compare,std::allocator<boost::serialization::typeid_system::extended_type_info_typeid_0 const*>>>::get_instance()
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0
  {
    qword_2543CD330 = 0;
    qword_2543CD328 = 0;
    boost::serialization::singleton<std::multiset<boost::serialization::typeid_system::extended_type_info_typeid_0 const*,boost::serialization::typeid_system::type_compare,std::allocator<boost::serialization::typeid_system::extended_type_info_typeid_0 const*>>>::get_instance(void)::t = (uint64_t)&qword_2543CD328;
    __cxa_atexit((void (*)(void *))boost::serialization::detail::singleton_wrapper<std::multiset<boost::serialization::typeid_system::extended_type_info_typeid_0 const*,boost::serialization::typeid_system::type_compare,std::allocator<boost::serialization::typeid_system::extended_type_info_typeid_0 const*>>>::~singleton_wrapper, &boost::serialization::singleton<std::multiset<boost::serialization::typeid_system::extended_type_info_typeid_0 const*,boost::serialization::typeid_system::type_compare,std::allocator<boost::serialization::typeid_system::extended_type_info_typeid_0 const*>>>::get_instance(void)::t, &dword_2439D9000);
  }
  return &boost::serialization::singleton<std::multiset<boost::serialization::typeid_system::extended_type_info_typeid_0 const*,boost::serialization::typeid_system::type_compare,std::allocator<boost::serialization::typeid_system::extended_type_info_typeid_0 const*>>>::get_instance(void)::t;
}

uint64_t boost::serialization::typeid_system::extended_type_info_typeid_arg::construct(boost::serialization::typeid_system::extended_type_info_typeid_arg *this, uint64_t a2, ...)
{
  return 0;
}

uint64_t boost::serialization::detail::singleton_wrapper<std::multiset<boost::serialization::typeid_system::extended_type_info_typeid_0 const*,boost::serialization::typeid_system::type_compare,std::allocator<boost::serialization::typeid_system::extended_type_info_typeid_0 const*>>>::~singleton_wrapper(uint64_t a1)
{
  boost::serialization::detail::singleton_wrapper<std::multiset<boost::serialization::typeid_system::extended_type_info_typeid_0 const*,boost::serialization::typeid_system::type_compare,std::allocator<boost::serialization::typeid_system::extended_type_info_typeid_0 const*>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  std::__tree<boost::archive::detail::basic_iarchive_impl::cobject_type>::destroy(a1, *(_QWORD **)(a1 + 8));
  return a1;
}

uint64_t *std::__tree<boost::serialization::typeid_system::extended_type_info_typeid_0 const*,boost::serialization::typeid_system::type_compare,std::allocator<boost::serialization::typeid_system::extended_type_info_typeid_0 const*>>::__emplace_multi<boost::serialization::typeid_system::extended_type_info_typeid_0 const*>(uint64_t **a1, unsigned int (****a2)(_QWORD, uint64_t))
{
  uint64_t *v4;
  unsigned int (***v5)(_QWORD, uint64_t);
  uint64_t *v6;
  uint64_t **v7;
  uint64_t **v8;

  v4 = (uint64_t *)operator new(0x28uLL);
  v5 = *a2;
  v4[4] = (uint64_t)*a2;
  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    while (1)
    {
      v7 = (uint64_t **)v6;
      if ((**v5)(v5, v6[4]))
      {
        v6 = *v7;
        v8 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      else
      {
        v6 = v7[1];
        if (!v6)
        {
          v8 = v7 + 1;
          goto LABEL_9;
        }
      }
      v5 = (unsigned int (***)(_QWORD, uint64_t))v4[4];
    }
  }
  v8 = a1 + 1;
LABEL_9:
  std::__tree<std::__value_type<int,std::vector<std::string>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::string>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::string>>>>::__insert_node_at(a1, (uint64_t)v7, v8, v4);
  return v4;
}

void sub_243A630FC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<boost::serialization::typeid_system::extended_type_info_typeid_0 const*,boost::serialization::typeid_system::type_compare,std::allocator<boost::serialization::typeid_system::extended_type_info_typeid_0 const*>>::find<boost::serialization::typeid_system::extended_type_info_typeid_0 const*>(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  int v6;
  uint64_t *v7;

  v2 = a1 + 8;
  v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
    return v2;
  v5 = a1 + 8;
  do
  {
    v6 = (***(uint64_t (****)(_QWORD, _QWORD))(v3 + 32))(*(_QWORD *)(v3 + 32), *a2);
    v7 = (uint64_t *)(v3 + 8);
    if (!v6)
    {
      v7 = (uint64_t *)v3;
      v5 = v3;
    }
    v3 = *v7;
  }
  while (*v7);
  if (v5 == v2 || (**(unsigned int (***)(_QWORD, _QWORD))*a2)(*a2, *(_QWORD *)(v5 + 32)))
    return v2;
  return v5;
}

void __cxx_global_var_init_1()
{
  {
    boost::serialization::singleton<std::multiset<boost::serialization::typeid_system::extended_type_info_typeid_0 const*,boost::serialization::typeid_system::type_compare,std::allocator<boost::serialization::typeid_system::extended_type_info_typeid_0 const*>>>::m_instance = (uint64_t)boost::serialization::singleton<std::multiset<boost::serialization::typeid_system::extended_type_info_typeid_0 const*,boost::serialization::typeid_system::type_compare,std::allocator<boost::serialization::typeid_system::extended_type_info_typeid_0 const*>>>::get_instance();
  }
}

uint64_t boost::archive::detail::archive_serializer_map<boost::archive::text_iarchive>::insert(uint64_t *a1)
{
  uint64_t *instance;

  instance = boost::serialization::singleton<boost::archive::detail::extra_detail::map<boost::archive::text_iarchive>>::get_instance();
  return boost::archive::detail::basic_serializer_map::insert((uint64_t **)instance, a1);
}

void boost::archive::detail::archive_serializer_map<boost::archive::text_iarchive>::erase(uint64_t a1)
{
  uint64_t *instance;

  if (!boost::serialization::detail::singleton_wrapper<boost::archive::detail::extra_detail::map<boost::archive::text_iarchive>>::get_is_destroyed(void)::is_destroyed_flag)
  {
    instance = boost::serialization::singleton<boost::archive::detail::extra_detail::map<boost::archive::text_iarchive>>::get_instance();
    boost::archive::detail::basic_serializer_map::erase((uint64_t **)instance, a1);
  }
}

uint64_t boost::archive::detail::archive_serializer_map<boost::archive::text_iarchive>::find(const boost::serialization::extended_type_info *a1)
{
  uint64_t *instance;

  instance = boost::serialization::singleton<boost::archive::detail::extra_detail::map<boost::archive::text_iarchive>>::get_instance();
  return boost::archive::detail::basic_serializer_map::find((boost::archive::detail::basic_serializer_map *)instance, a1);
}

void boost::archive::basic_text_iarchive<boost::archive::text_iarchive>::load_override(uint64_t a1, void **a2)
{
  size_t size;
  std::string *p_src;
  std::string::size_type v6;
  std::string __src;
  _BYTE v8[144];
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  memset(&__src, 0, sizeof(__src));
  std::string::reserve(&__src, 0x80uLL);
  boost::archive::text_iarchive_impl<boost::archive::text_iarchive>::load(a1, &__src);
  if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
  {
    size = __src.__r_.__value_.__l.__size_;
    if (__src.__r_.__value_.__l.__size_ >= 0x80)
    {
      boost::archive::archive_exception::archive_exception((uint64_t)v8, 9, 0, 0);
      boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v8);
    }
    p_src = (std::string *)__src.__r_.__value_.__r.__words[0];
  }
  else
  {
    size = HIBYTE(__src.__r_.__value_.__r.__words[2]);
    p_src = &__src;
  }
  memcpy(*a2, p_src, size);
  v6 = HIBYTE(__src.__r_.__value_.__r.__words[2]);
  if ((__src.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v6 = __src.__r_.__value_.__l.__size_;
  *((_BYTE *)*a2 + v6) = 0;
  if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__src.__r_.__value_.__l.__data_);
}

{
  __ZN5boost7archive19basic_text_iarchiveINS0_13text_iarchiveEE13load_overrideERNS0_15class_name_typeE(a1, a2);
}

void sub_243A6333C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::exception a15)
{
  boost::archive::archive_exception::~archive_exception(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void boost::archive::basic_text_iarchive<boost::archive::text_iarchive>::init(uint64_t a1)
{
  boost::archive *v2;
  const char *v3;
  const char *v4;
  size_t size;
  std::string *p_p;
  __int16 v7;
  unsigned __int16 v8;
  std::string __p;
  _WORD v10[72];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  memset(&__p, 0, sizeof(__p));
  boost::archive::text_iarchive_impl<boost::archive::text_iarchive>::load(a1, &__p);
  v3 = boost::archive::BOOST_ARCHIVE_SIGNATURE(v2);
  v4 = v3;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  if (size != strlen(v3)
    || ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
      ? (p_p = &__p)
      : (p_p = (std::string *)__p.__r_.__value_.__r.__words[0]),
        memcmp(p_p, v4, size)))
  {
    boost::archive::archive_exception::archive_exception((uint64_t)v10, 3, 0, 0);
    boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v10);
  }
  v8 = 0;
  boost::archive::basic_text_iprimitive<std::istream>::load<boost::serialization::library_version_type>((_QWORD *)(a1 + 40));
  v7 = 0;
  boost::archive::detail::basic_iarchive::set_library_version(a1, &v7);
  boost::archive::BOOST_ARCHIVE_VERSION(v10);
  if (v10[0] < v8)
  {
    boost::archive::archive_exception::archive_exception((uint64_t)v10, 4, 0, 0);
    boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v10);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

{
  __ZN5boost7archive19basic_text_iarchiveINS0_13text_iarchiveEE4initEv(a1);
}

void sub_243A634A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, std::exception a17)
{
  boost::archive::archive_exception::~archive_exception(&a17);
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

boost::archive::detail::basic_iarchive *boost::archive::basic_text_iarchive<boost::archive::text_iarchive>::basic_text_iarchive(boost::archive::detail::basic_iarchive *a1, int a2)
{
  boost::archive::detail::basic_iarchive *result;

  result = boost::archive::detail::basic_iarchive::basic_iarchive(a1, a2);
  *(_QWORD *)result = &unk_25142D5E8;
  return result;
}

{
  boost::archive::detail::basic_iarchive *result;

  result = boost::archive::detail::basic_iarchive::basic_iarchive(a1, a2);
  *(_QWORD *)result = &unk_25142D5E8;
  return result;
}

void boost::archive::basic_text_iarchive<boost::archive::text_iarchive>::~basic_text_iarchive(boost::archive::detail::basic_iarchive *a1)
{
  void *v1;

  boost::archive::detail::basic_iarchive::~basic_iarchive(a1);
  operator delete(v1);
}

_QWORD *boost::archive::text_iarchive_impl<boost::archive::text_iarchive>::load(uint64_t a1, _DWORD *a2)
{
  _QWORD *result;

  result = boost::archive::basic_text_iprimitive<std::istream>::load<unsigned int>((_QWORD *)(a1 + 40));
  *a2 = 0;
  return result;
}

{
  _QWORD *result;

  result = boost::archive::basic_text_iprimitive<std::istream>::load<unsigned int>((_QWORD *)(a1 + 40));
  *a2 = 0;
  return result;
}

uint64_t boost::archive::text_iarchive_impl<boost::archive::text_iarchive>::load(uint64_t a1, _BYTE *a2)
{
  uint64_t result;

  boost::archive::basic_text_iprimitive<std::istream>::load<unsigned long>((_QWORD *)(a1 + 40));
  std::istream::get();
  result = std::istream::read();
  *a2 = 0;
  return result;
}

uint64_t boost::archive::text_iarchive_impl<boost::archive::text_iarchive>::load(uint64_t a1, _DWORD *a2)
{
  uint64_t result;

  boost::archive::basic_text_iprimitive<std::istream>::load<unsigned long>((_QWORD *)(a1 + 40));
  std::istream::get();
  result = std::istream::read();
  *a2 = 0;
  return result;
}

void boost::archive::text_iarchive_impl<boost::archive::text_iarchive>::load(uint64_t a1, std::string *a2)
{
  boost::archive::basic_text_iprimitive<std::istream>::load<unsigned long>((_QWORD *)(a1 + 40));
  std::istream::get();
  std::string::resize(a2, 0, 0);
}

{
  __ZN5boost7archive18text_iarchive_implINS0_13text_iarchiveEE4loadERNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE(a1, a2);
}

uint64_t boost::archive::text_iarchive_impl<boost::archive::text_iarchive>::load(uint64_t a1, std::wstring *a2)
{
  boost::archive::basic_text_iprimitive<std::istream>::load<unsigned long>((_QWORD *)(a1 + 40));
  std::wstring::resize(a2, 0, 0);
  std::istream::get();
  return std::istream::read();
}

boost::archive::detail::basic_iarchive *boost::archive::text_iarchive_impl<boost::archive::text_iarchive>::text_iarchive_impl(boost::archive::detail::basic_iarchive *a1, uint64_t *a2, int a3)
{
  boost::archive::basic_text_iprimitive<std::istream>::basic_text_iprimitive((uint64_t)a1 + 40, a2, (a3 & 2) != 0);
  boost::archive::detail::basic_iarchive::basic_iarchive(a1, a3);
  *(_QWORD *)a1 = &unk_25142D638;
  return a1;
}

{
  return __ZN5boost7archive18text_iarchive_implINS0_13text_iarchiveEEC2ERNSt3__113basic_istreamIcNS4_11char_traitsIcEEEEj(a1, a2, a3);
}

void sub_243A637B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  boost::archive::basic_text_iprimitive<std::istream>::~basic_text_iprimitive(v1);
  _Unwind_Resume(a1);
}

boost::archive::detail::basic_iarchive *boost::archive::text_iarchive_impl<boost::archive::text_iarchive>::~text_iarchive_impl(boost::archive::detail::basic_iarchive *a1)
{
  uint64_t v2;

  boost::archive::detail::basic_iarchive::~basic_iarchive(a1);
  boost::archive::basic_text_iprimitive<std::istream>::~basic_text_iprimitive(v2 + 40);
  return a1;
}

{
  uint64_t v2;

  boost::archive::detail::basic_iarchive::~basic_iarchive(a1);
  boost::archive::basic_text_iprimitive<std::istream>::~basic_text_iprimitive(v2 + 40);
  return a1;
}

void boost::archive::text_iarchive_impl<boost::archive::text_iarchive>::~text_iarchive_impl(boost::archive::detail::basic_iarchive *a1)
{
  uint64_t v2;

  boost::archive::detail::basic_iarchive::~basic_iarchive(a1);
  boost::archive::basic_text_iprimitive<std::istream>::~basic_text_iprimitive(v2 + 40);
  operator delete(a1);
}

uint64_t *boost::serialization::singleton<boost::archive::detail::extra_detail::map<boost::archive::text_iarchive>>::get_instance()
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0
  {
    qword_2543CD300 = 0;
    qword_2543CD2F8 = 0;
    boost::serialization::singleton<boost::archive::detail::extra_detail::map<boost::archive::text_iarchive>>::get_instance(void)::t = (uint64_t)&qword_2543CD2F8;
    __cxa_atexit((void (*)(void *))boost::serialization::detail::singleton_wrapper<boost::archive::detail::extra_detail::map<boost::archive::text_iarchive>>::~singleton_wrapper, &boost::serialization::singleton<boost::archive::detail::extra_detail::map<boost::archive::text_iarchive>>::get_instance(void)::t, &dword_2439D9000);
  }
  return &boost::serialization::singleton<boost::archive::detail::extra_detail::map<boost::archive::text_iarchive>>::get_instance(void)::t;
}

uint64_t boost::serialization::detail::singleton_wrapper<boost::archive::detail::extra_detail::map<boost::archive::text_iarchive>>::~singleton_wrapper(uint64_t a1)
{
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::extra_detail::map<boost::archive::text_iarchive>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  std::__tree<boost::archive::detail::basic_iarchive_impl::cobject_type>::destroy(a1, *(_QWORD **)(a1 + 8));
  return a1;
}

_QWORD *boost::archive::basic_text_iprimitive<std::istream>::load<boost::serialization::library_version_type>(_QWORD *a1)
{
  _QWORD *result;
  _BYTE v2[144];
  uint64_t v3;

  v3 = *MEMORY[0x24BDAC8D0];
  result = (_QWORD *)MEMORY[0x2494FEB6C](*a1);
  if ((*((_BYTE *)result + *(_QWORD *)(*result - 24) + 32) & 5) != 0)
  {
    boost::archive::archive_exception::archive_exception((uint64_t)v2, 8, 0, 0);
    boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v2);
  }
  return result;
}

void sub_243A6398C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  boost::archive::archive_exception::~archive_exception(&a10);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_2()
{
  {
    boost::serialization::singleton<boost::archive::detail::extra_detail::map<boost::archive::text_iarchive>>::m_instance = (uint64_t)boost::serialization::singleton<boost::archive::detail::extra_detail::map<boost::archive::text_iarchive>>::get_instance();
  }
}

uint64_t boost::archive::detail::archive_serializer_map<boost::archive::text_oarchive>::insert(uint64_t *a1)
{
  uint64_t *instance;

  instance = boost::serialization::singleton<boost::archive::detail::extra_detail::map<boost::archive::text_oarchive>>::get_instance();
  return boost::archive::detail::basic_serializer_map::insert((uint64_t **)instance, a1);
}

void boost::archive::detail::archive_serializer_map<boost::archive::text_oarchive>::erase(uint64_t a1)
{
  uint64_t *instance;

  if (!boost::serialization::detail::singleton_wrapper<boost::archive::detail::extra_detail::map<boost::archive::text_oarchive>>::get_is_destroyed(void)::is_destroyed_flag)
  {
    instance = boost::serialization::singleton<boost::archive::detail::extra_detail::map<boost::archive::text_oarchive>>::get_instance();
    boost::archive::detail::basic_serializer_map::erase((uint64_t **)instance, a1);
  }
}

uint64_t boost::archive::detail::archive_serializer_map<boost::archive::text_oarchive>::find(const boost::serialization::extended_type_info *a1)
{
  uint64_t *instance;

  instance = boost::serialization::singleton<boost::archive::detail::extra_detail::map<boost::archive::text_oarchive>>::get_instance();
  return boost::archive::detail::basic_serializer_map::find((boost::archive::detail::basic_serializer_map *)instance, a1);
}

uint64_t boost::archive::basic_text_oarchive<boost::archive::text_oarchive>::newtoken(uint64_t result)
{
  uint64_t v1;
  int v2;

  v1 = result;
  v2 = *(_DWORD *)(result + 40);
  switch(v2)
  {
    case 0:
      goto LABEL_5;
    case 2:
      return boost::archive::basic_text_oprimitive<std::ostream>::put((_QWORD *)(result + 48));
    case 1:
      result = boost::archive::basic_text_oprimitive<std::ostream>::put((_QWORD *)(result + 48));
LABEL_5:
      *(_DWORD *)(v1 + 40) = 2;
      break;
  }
  return result;
}

{
  return __ZN5boost7archive19basic_text_oarchiveINS0_13text_oarchiveEE8newtokenEv(result);
}

uint64_t boost::archive::basic_text_oarchive<boost::archive::text_oarchive>::newline(uint64_t result)
{
  *(_DWORD *)(result + 40) = 1;
  return result;
}

uint64_t boost::archive::basic_text_oarchive<boost::archive::text_oarchive>::save_override(boost::archive::detail::basic_oarchive *a1)
{
  *((_DWORD *)a1 + 10) = 1;
  return boost::archive::save_access::save_primitive<boost::archive::text_oarchive,boost::archive::object_id_type>(a1);
}

void boost::archive::basic_text_oarchive<boost::archive::text_oarchive>::save_override(boost::archive::detail::basic_oarchive *a1, char **a2)
{
  void *__p[2];
  char v4;

  std::string::basic_string[abi:ne180100]<0>(__p, *a2);
  boost::archive::detail::basic_oarchive::end_preamble(a1);
  boost::archive::text_oarchive_impl<boost::archive::text_oarchive>::save(a1, (uint64_t)__p);
  if (v4 < 0)
    operator delete(__p[0]);
}

{
  __ZN5boost7archive19basic_text_oarchiveINS0_13text_oarchiveEE13save_overrideERKNS0_15class_name_typeE(a1, a2);
}

void sub_243A63B20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void boost::archive::basic_text_oarchive<boost::archive::text_oarchive>::init(boost::archive *a1)
{
  char *v2;
  __int16 v3;
  void *__p[2];
  char v5;

  v2 = (char *)boost::archive::BOOST_ARCHIVE_SIGNATURE(a1);
  std::string::basic_string[abi:ne180100]<0>(__p, v2);
  boost::archive::detail::basic_oarchive::end_preamble(a1);
  boost::archive::text_oarchive_impl<boost::archive::text_oarchive>::save(a1, (uint64_t)__p);
  boost::archive::BOOST_ARCHIVE_VERSION(&v3);
  boost::archive::save_access::save_primitive<boost::archive::text_oarchive,boost::serialization::library_version_type>(a1);
  if (v5 < 0)
    operator delete(__p[0]);
}

{
  __ZN5boost7archive19basic_text_oarchiveINS0_13text_oarchiveEE4initEv(a1);
}

void sub_243A63BA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

boost::archive::detail::basic_oarchive *boost::archive::basic_text_oarchive<boost::archive::text_oarchive>::basic_text_oarchive(boost::archive::detail::basic_oarchive *a1, int a2)
{
  boost::archive::detail::basic_oarchive *result;

  result = boost::archive::detail::basic_oarchive::basic_oarchive(a1, a2);
  *(_QWORD *)result = &unk_25142D6D8;
  *((_DWORD *)result + 10) = 0;
  return result;
}

{
  boost::archive::detail::basic_oarchive *result;

  result = boost::archive::detail::basic_oarchive::basic_oarchive(a1, a2);
  *(_QWORD *)result = &unk_25142D6D8;
  *((_DWORD *)result + 10) = 0;
  return result;
}

void boost::archive::basic_text_oarchive<boost::archive::text_oarchive>::~basic_text_oarchive(boost::archive::detail::basic_oarchive *a1)
{
  void *v1;

  boost::archive::detail::basic_oarchive::~basic_oarchive(a1);
  operator delete(v1);
}

uint64_t boost::archive::text_oarchive_impl<boost::archive::text_oarchive>::save(uint64_t a1)
{
  boost::archive::basic_text_oarchive<boost::archive::text_oarchive>::newtoken(a1);
  return boost::archive::basic_text_oprimitive<std::ostream>::save_impl<unsigned int>((_QWORD *)(a1 + 48));
}

{
  boost::archive::basic_text_oarchive<boost::archive::text_oarchive>::newtoken(a1);
  return boost::archive::basic_text_oprimitive<std::ostream>::save_impl<unsigned int>((_QWORD *)(a1 + 48));
}

_QWORD *boost::archive::text_oarchive_impl<boost::archive::text_oarchive>::save(boost::archive::detail::basic_oarchive *a1, char *__s)
{
  size_t v4;

  strlen(__s);
  boost::archive::save_access::save_primitive<boost::archive::text_oarchive,unsigned long>(a1);
  boost::archive::basic_text_oarchive<boost::archive::text_oarchive>::newtoken((uint64_t)a1);
  v4 = strlen(__s);
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a1 + 6), (uint64_t)__s, v4);
}

uint64_t boost::archive::text_oarchive_impl<boost::archive::text_oarchive>::save(boost::archive::detail::basic_oarchive *a1, __int32 *a2)
{
  wcslen(a2);
  boost::archive::save_access::save_primitive<boost::archive::text_oarchive,unsigned long>(a1);
  boost::archive::basic_text_oarchive<boost::archive::text_oarchive>::newtoken((uint64_t)a1);
  return std::ostream::write();
}

_QWORD *boost::archive::text_oarchive_impl<boost::archive::text_oarchive>::save(boost::archive::detail::basic_oarchive *a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;

  boost::archive::save_access::save_primitive<boost::archive::text_oarchive,unsigned long>(a1);
  boost::archive::basic_text_oarchive<boost::archive::text_oarchive>::newtoken((uint64_t)a1);
  v4 = *(char *)(a2 + 23);
  if (v4 >= 0)
    v5 = a2;
  else
    v5 = *(_QWORD *)a2;
  if (v4 >= 0)
    v6 = *(unsigned __int8 *)(a2 + 23);
  else
    v6 = *(_QWORD *)(a2 + 8);
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a1 + 6), v5, v6);
}

{
  return __ZN5boost7archive18text_oarchive_implINS0_13text_oarchiveEE4saveERKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE(a1, a2);
}

uint64_t boost::archive::text_oarchive_impl<boost::archive::text_oarchive>::save(boost::archive::detail::basic_oarchive *a1)
{
  boost::archive::save_access::save_primitive<boost::archive::text_oarchive,unsigned long>(a1);
  boost::archive::basic_text_oarchive<boost::archive::text_oarchive>::newtoken((uint64_t)a1);
  return std::ostream::write();
}

boost::archive::detail::basic_oarchive *boost::archive::text_oarchive_impl<boost::archive::text_oarchive>::text_oarchive_impl(boost::archive::detail::basic_oarchive *a1, uint64_t *a2, int a3)
{
  boost::archive::basic_text_oprimitive<std::ostream>::basic_text_oprimitive((uint64_t)a1 + 48, a2, (a3 & 2) != 0);
  boost::archive::detail::basic_oarchive::basic_oarchive(a1, a3);
  *((_DWORD *)a1 + 10) = 0;
  *(_QWORD *)a1 = &unk_25142D738;
  return a1;
}

{
  return __ZN5boost7archive18text_oarchive_implINS0_13text_oarchiveEEC2ERNSt3__113basic_ostreamIcNS4_11char_traitsIcEEEEj(a1, a2, a3);
}

void sub_243A63EB0(_Unwind_Exception *a1)
{
  uint64_t v1;

  boost::archive::basic_text_oprimitive<std::ostream>::~basic_text_oprimitive(v1);
  _Unwind_Resume(a1);
}

boost::archive::detail::basic_oarchive *boost::archive::text_oarchive_impl<boost::archive::text_oarchive>::~text_oarchive_impl(boost::archive::detail::basic_oarchive *a1)
{
  uint64_t v2;

  boost::archive::detail::basic_oarchive::~basic_oarchive(a1);
  boost::archive::basic_text_oprimitive<std::ostream>::~basic_text_oprimitive(v2 + 48);
  return a1;
}

{
  uint64_t v2;

  boost::archive::detail::basic_oarchive::~basic_oarchive(a1);
  boost::archive::basic_text_oprimitive<std::ostream>::~basic_text_oprimitive(v2 + 48);
  return a1;
}

void boost::archive::text_oarchive_impl<boost::archive::text_oarchive>::~text_oarchive_impl(boost::archive::detail::basic_oarchive *a1)
{
  uint64_t v2;

  boost::archive::detail::basic_oarchive::~basic_oarchive(a1);
  boost::archive::basic_text_oprimitive<std::ostream>::~basic_text_oprimitive(v2 + 48);
  operator delete(a1);
}

uint64_t *boost::archive::text_oarchive_impl<boost::archive::text_oarchive>::save_binary(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t *v6;
  uint64_t *result;

  v6 = (uint64_t *)(a1 + 48);
  boost::archive::basic_text_oprimitive<std::ostream>::put((_QWORD *)(a1 + 48));
  boost::archive::detail::basic_oarchive::end_preamble((boost::archive::detail::basic_oarchive *)a1);
  result = boost::archive::basic_text_oprimitive<std::ostream>::save_binary(v6, a2, a3);
  *(_DWORD *)(a1 + 40) = 1;
  return result;
}

uint64_t *boost::serialization::singleton<boost::archive::detail::extra_detail::map<boost::archive::text_oarchive>>::get_instance()
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0
  {
    qword_2543CD318 = 0;
    qword_2543CD310 = 0;
    boost::serialization::singleton<boost::archive::detail::extra_detail::map<boost::archive::text_oarchive>>::get_instance(void)::t = (uint64_t)&qword_2543CD310;
    __cxa_atexit((void (*)(void *))boost::serialization::detail::singleton_wrapper<boost::archive::detail::extra_detail::map<boost::archive::text_oarchive>>::~singleton_wrapper, &boost::serialization::singleton<boost::archive::detail::extra_detail::map<boost::archive::text_oarchive>>::get_instance(void)::t, &dword_2439D9000);
  }
  return &boost::serialization::singleton<boost::archive::detail::extra_detail::map<boost::archive::text_oarchive>>::get_instance(void)::t;
}

uint64_t boost::serialization::detail::singleton_wrapper<boost::archive::detail::extra_detail::map<boost::archive::text_oarchive>>::~singleton_wrapper(uint64_t a1)
{
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::extra_detail::map<boost::archive::text_oarchive>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  std::__tree<boost::archive::detail::basic_iarchive_impl::cobject_type>::destroy(a1, *(_QWORD **)(a1 + 8));
  return a1;
}

uint64_t boost::archive::save_access::save_primitive<boost::archive::text_oarchive,boost::serialization::library_version_type>(boost::archive::detail::basic_oarchive *a1)
{
  boost::archive::detail::basic_oarchive::end_preamble(a1);
  boost::archive::basic_text_oarchive<boost::archive::text_oarchive>::newtoken((uint64_t)a1);
  return boost::archive::basic_text_oprimitive<std::ostream>::save_impl<boost::serialization::library_version_type>((_QWORD *)a1 + 6);
}

uint64_t boost::archive::basic_text_oprimitive<std::ostream>::save_impl<boost::serialization::library_version_type>(_QWORD *a1)
{
  _BYTE v2[144];
  uint64_t v3;

  v3 = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(*a1 + *(_QWORD *)(*(_QWORD *)*a1 - 24) + 32) & 5) != 0)
  {
    boost::archive::archive_exception::archive_exception((uint64_t)v2, 13, 0, 0);
    boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v2);
  }
  return std::ostream::operator<<();
}

void sub_243A64124(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  boost::archive::archive_exception::~archive_exception(&a10);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_3()
{
  {
    boost::serialization::singleton<boost::archive::detail::extra_detail::map<boost::archive::text_oarchive>>::m_instance = (uint64_t)boost::serialization::singleton<boost::archive::detail::extra_detail::map<boost::archive::text_oarchive>>::get_instance();
  }
}

void boost::serialization::singleton<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::get_instance(uint64_t a1, uint64_t a2, uint64_t a3)
{
  OUTLINED_FUNCTION_1("get_instance", "singleton.hpp", a3, "! is_destroyed()");
}

void boost::histogram::detail::destroy_buffer<std::allocator<unsigned char>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  OUTLINED_FUNCTION_12("destroy_buffer", "unlimited_storage.hpp", a3, "p");
}

{
  OUTLINED_FUNCTION_11("destroy_buffer", "unlimited_storage.hpp", a3, "n > 0u");
}

void pps::Histogram_Internal::axis()
{
  __assert_rtn("axis_index_is_valid", "axes.hpp", 136, "(N < get_size(axes))&&(\"index out of range\")");
}

void boost::histogram::detail::create_buffer<std::allocator<unsigned char>,unsigned char *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  OUTLINED_FUNCTION_0_1("create_buffer", "unlimited_storage.hpp", a3, "n > 0u");
}

void boost::histogram::detail::mp_int<std::allocator<unsigned long long>>::operator++()
{
  __assert_rtn("operator++", "unlimited_storage.hpp", 157, "data.size() > 0u");
}

CFTypeID CFBooleanGetTypeID(void)
{
  return MEMORY[0x24BDBBA18]();
}

Boolean CFBooleanGetValue(CFBooleanRef BOOLean)
{
  return MEMORY[0x24BDBBA20](BOOLean);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x24BDBBDF0](allocator, capacity, keyCallBacks, valueCallBacks);
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x24BDBBE30](theDict, key);
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  MEMORY[0x24BDBBE60](theDict, key, value);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x24BDBBEF8](cf);
}

void CFRelease(CFTypeRef cf)
{
  MEMORY[0x24BDBC298](cf);
}

Class NSClassFromString(NSString *aClassName)
{
  return (Class)MEMORY[0x24BDD0B80](aClassName);
}

void NSLog(NSString *format, ...)
{
  MEMORY[0x24BDD1000](format);
}

uint64_t NSRequestConcreteImplementation()
{
  return MEMORY[0x24BDD11E8]();
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return (NSString *)MEMORY[0x24BDD1240](aClass);
}

uint64_t PBDataWriterWriteBOOLField()
{
  return MEMORY[0x24BE7AF80]();
}

uint64_t PBDataWriterWriteInt32Field()
{
  return MEMORY[0x24BE7AFA8]();
}

uint64_t PBDataWriterWriteSubmessage()
{
  return MEMORY[0x24BE7AFE8]();
}

uint64_t PBDataWriterWriteUint32Field()
{
  return MEMORY[0x24BE7AFF0]();
}

uint64_t PBDataWriterWriteUint64Field()
{
  return MEMORY[0x24BE7B008]();
}

uint64_t PBReaderPlaceMark()
{
  return MEMORY[0x24BE7B018]();
}

uint64_t PBReaderRecallMark()
{
  return MEMORY[0x24BE7B038]();
}

uint64_t PBReaderSkipValueWithTag()
{
  return MEMORY[0x24BE7B048]();
}

CFTypeRef SecTaskCopyValueForEntitlement(SecTaskRef task, CFStringRef entitlement, CFErrorRef *error)
{
  return (CFTypeRef)MEMORY[0x24BDE8D48](task, entitlement, error);
}

SecTaskRef SecTaskCreateFromSelf(CFAllocatorRef allocator)
{
  return (SecTaskRef)MEMORY[0x24BDE8D70](allocator);
}

void _Block_object_dispose(const void *a1, const int a2)
{
  MEMORY[0x24BDAC730](a1, *(_QWORD *)&a2);
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
  MEMORY[0x24BDAC780](exception_object);
}

uint64_t boost::archive::text_iarchive_impl<boost::archive::text_iarchive>::load_override()
{
  return __ZN5boost7archive18text_iarchive_implINS0_13text_iarchiveEE13load_overrideERNS0_15class_name_typeE();
}

uint64_t boost::archive::text_iarchive_impl<boost::archive::text_iarchive>::init()
{
  return __ZN5boost7archive18text_iarchive_implINS0_13text_iarchiveEE4initEv();
}

uint64_t std::stringbuf::str()
{
  return MEMORY[0x24BEDA9E0]();
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return (const std::locale::facet *)MEMORY[0x24BEDAA60](this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return (std::locale)MEMORY[0x24BEDAA70](this);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x24BEDAAA8](this, a2);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const std::string *a2)
{
  return (std::logic_error *)MEMORY[0x24BEDAAB0](this, a2);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const std::logic_error *a2)
{
  return (std::logic_error *)MEMORY[0x24BEDAAB8](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const char *a2)
{
  return (std::runtime_error *)MEMORY[0x24BEDAB48](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const std::runtime_error *a2)
{
  return (std::runtime_error *)MEMORY[0x24BEDAB58](this, a2);
}

void std::overflow_error::~overflow_error(std::overflow_error *this)
{
  MEMORY[0x24BEDAB78](this);
}

{
  MEMORY[0x24BEDAB80](this);
}

void std::invalid_argument::~invalid_argument(std::invalid_argument *this)
{
  MEMORY[0x24BEDAB88](this);
}

{
  MEMORY[0x24BEDAB90](this);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x24BEDABB0](this);
}

void std::string::resize(std::string *this, std::string::size_type __n, std::string::value_type __c)
{
  MEMORY[0x24BEDAC98](this, __n, __c);
}

void std::string::reserve(std::string *this, std::string::size_type __requested_capacity)
{
  MEMORY[0x24BEDACB8](this, __requested_capacity);
}

std::string *__cdecl std::string::operator=(std::string *this, const std::string *__str)
{
  return (std::string *)MEMORY[0x24BEDAD00](this, __str);
}

void std::wstring::resize(std::wstring *this, std::wstring::size_type __n, std::wstring::value_type __c)
{
  MEMORY[0x24BEDAD40](this, __n, *(_QWORD *)&__c);
}

uint64_t std::istream::get()
{
  return MEMORY[0x24BEDAE08]();
}

uint64_t std::istream::peek()
{
  return MEMORY[0x24BEDAE10]();
}

uint64_t std::istream::read()
{
  return MEMORY[0x24BEDAE18]();
}

uint64_t std::istream::sync()
{
  return MEMORY[0x24BEDAE20]();
}

uint64_t std::istream::ignore()
{
  return MEMORY[0x24BEDAE48]();
}

uint64_t std::istream::~istream()
{
  return MEMORY[0x24BEDAE70]();
}

uint64_t std::istream::operator>>()
{
  return MEMORY[0x24BEDAE78]();
}

{
  return MEMORY[0x24BEDAE80]();
}

{
  return MEMORY[0x24BEDAE90]();
}

{
  return MEMORY[0x24BEDAE98]();
}

{
  return MEMORY[0x24BEDAEA8]();
}

{
  return MEMORY[0x24BEDAEB0]();
}

{
  return MEMORY[0x24BEDAEB8]();
}

{
  return MEMORY[0x24BEDAEC8]();
}

uint64_t std::ostream::put()
{
  return MEMORY[0x24BEDAEE0]();
}

uint64_t std::ostream::flush()
{
  return MEMORY[0x24BEDAEE8]();
}

uint64_t std::ostream::write()
{
  return MEMORY[0x24BEDAEF0]();
}

uint64_t std::ostream::sentry::sentry()
{
  return MEMORY[0x24BEDAEF8]();
}

uint64_t std::ostream::sentry::~sentry()
{
  return MEMORY[0x24BEDAF00]();
}

uint64_t std::ostream::~ostream()
{
  return MEMORY[0x24BEDAF10]();
}

uint64_t std::ostream::operator<<()
{
  return MEMORY[0x24BEDAF28]();
}

{
  return MEMORY[0x24BEDAF30]();
}

{
  return MEMORY[0x24BEDAF48]();
}

{
  return MEMORY[0x24BEDAF50]();
}

{
  return MEMORY[0x24BEDAF60]();
}

{
  return MEMORY[0x24BEDAF68]();
}

{
  return MEMORY[0x24BEDAF70]();
}

{
  return MEMORY[0x24BEDAF80]();
}

uint64_t std::streambuf::basic_streambuf()
{
  return MEMORY[0x24BEDB048]();
}

uint64_t std::streambuf::~streambuf()
{
  return MEMORY[0x24BEDB050]();
}

void std::locale::__install_ctor(std::locale *this, const std::locale *a2, std::locale::facet *a3, uint64_t a4)
{
  MEMORY[0x24BEDB418](this, a2, a3, a4);
}

uint64_t std::locale::id::__get(std::locale::id *this)
{
  return MEMORY[0x24BEDB420](this);
}

std::locale *__cdecl std::locale::locale(std::locale *this, const std::locale *a2)
{
  return (std::locale *)MEMORY[0x24BEDB438](this, a2);
}

void std::locale::~locale(std::locale *this)
{
  MEMORY[0x24BEDB448](this);
}

const std::locale *__cdecl std::locale::operator=(std::locale *this, const std::locale *a2)
{
  return (const std::locale *)MEMORY[0x24BEDB450](this, a2);
}

void std::codecvt<char,char,__mbstate_t>::~codecvt(std::codecvt<char, char, mbstate_t> *this)
{
  MEMORY[0x24BEDB490](this);
}

void std::ios_base::__set_badbit_and_consider_rethrow(std::ios_base *this)
{
  MEMORY[0x24BEDB500](this);
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
  MEMORY[0x24BEDB518](this, __sb);
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
  MEMORY[0x24BEDB530](this, *(_QWORD *)&__state);
}

std::locale std::ios_base::imbue(std::ios_base *this, const std::locale *__loc)
{
  return (std::locale)MEMORY[0x24BEDB538](this, __loc);
}

uint64_t std::ios::~ios()
{
  return MEMORY[0x24BEDB5E8]();
}

void std::exception::~exception(std::exception *this)
{
  MEMORY[0x24BEDB688](this);
}

int std::uncaught_exceptions(void)
{
  return MEMORY[0x24BEDB6B0]();
}

void std::terminate(void)
{
  MEMORY[0x24BEDB6C0]();
}

void operator delete(void *__p)
{
  off_2514291F0(__p);
}

uint64_t operator delete()
{
  return off_2514291F8();
}

void *__cdecl operator new(size_t __sz)
{
  return (void *)off_251429200(__sz);
}

void *__cdecl operator new(size_t __sz, const std::nothrow_t *a2)
{
  return (void *)off_251429208(__sz, a2);
}

uint64_t operator new()
{
  return off_251429210();
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
  MEMORY[0x24BDAC7A0](a1, a2, *(_QWORD *)&a3, a4);
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x24BEDB8F8](thrown_size);
}

int __cxa_atexit(void (*lpfunc)(void *), void *obj, void *lpdso_handle)
{
  return MEMORY[0x24BDAC7B0](lpfunc, obj, lpdso_handle);
}

void __cxa_bad_cast(void)
{
  MEMORY[0x24BEDB900]();
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x24BEDB910](a1);
}

char *__cxa_demangle(const char *lpmangled, char *lpout, size_t *lpoutlen, int *lpstatus)
{
  return (char *)MEMORY[0x24BEDB920](lpmangled, lpout, lpoutlen, lpstatus);
}

void __cxa_end_catch(void)
{
  MEMORY[0x24BEDB928]();
}

void __cxa_free_exception(void *a1)
{
  MEMORY[0x24BEDB930](a1);
}

void __cxa_guard_abort(__guard *a1)
{
  MEMORY[0x24BEDB940](a1);
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x24BEDB948](a1);
}

void __cxa_guard_release(__guard *a1)
{
  MEMORY[0x24BEDB950](a1);
}

void __cxa_rethrow(void)
{
  MEMORY[0x24BEDB958]();
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
  MEMORY[0x24BEDB960](a1, lptinfo, a3);
}

void *__dynamic_cast(const void *lpsrc, const struct __class_type_info *lpstype, const struct __class_type_info *lpdtype, ptrdiff_t s2d)
{
  return (void *)MEMORY[0x24BEDB968](lpsrc, lpstype, lpdtype, s2d);
}

int __maskrune(__darwin_ct_rune_t a1, unint64_t a2)
{
  return MEMORY[0x24BDAC838](*(_QWORD *)&a1, a2);
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB68](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB80](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB90](dso, log, type, format, buf, *(_QWORD *)&size);
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x24BDAD320](a1, a2);
}

void *__cdecl dispatch_get_specific(const void *key)
{
  return (void *)MEMORY[0x24BDADDB0](key);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
  MEMORY[0x24BDADE98](predicate, block);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_autorelease_frequency(dispatch_queue_attr_t attr, dispatch_autorelease_frequency_t frequency)
{
  return (dispatch_queue_attr_t)MEMORY[0x24BDADEB8](attr, frequency);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x24BDADED0](label, attr);
}

void dispatch_queue_set_specific(dispatch_queue_t queue, const void *key, void *context, dispatch_function_t destructor)
{
  MEMORY[0x24BDADF00](queue, key, context, destructor);
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x24BDADFE8](queue, block);
}

long double exp2(long double __x)
{
  long double result;

  MEMORY[0x24BDAE278](__x);
  return result;
}

void free(void *a1)
{
  MEMORY[0x24BDAE450](a1);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x24BDAEE78](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x24BDAEE80](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x24BDAEE98](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x24BDAEEA8](__b, *(_QWORD *)&__c, __len);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x24BEDCF68](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x24BEDCF88]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x24BEDCFA8](a1);
}

void objc_autoreleasePoolPop(void *context)
{
  MEMORY[0x24BEDCFB0](context);
}

void *objc_autoreleasePoolPush(void)
{
  return (void *)MEMORY[0x24BEDCFC0]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDCFD0](a1);
}

id objc_begin_catch(void *exc_buf)
{
  return (id)MEMORY[0x24BEDCFD8](exc_buf);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x24BEDCFE8]();
}

void objc_copyStruct(void *dest, const void *src, ptrdiff_t size, BOOL atomic, BOOL hasStrong)
{
  MEMORY[0x24BEDD020](dest, src, size, atomic, hasStrong);
}

void objc_end_catch(void)
{
  MEMORY[0x24BEDD050]();
}

void objc_enumerationMutation(id obj)
{
  MEMORY[0x24BEDD068](obj);
}

void objc_exception_rethrow(void)
{
  MEMORY[0x24BEDD070]();
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return (id)MEMORY[0x24BEDD0B0](self, _cmd, offset, atomic);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x24BEDD120](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x24BEDD130]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x24BEDD138]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x24BEDD148]();
}

void objc_release(id a1)
{
  MEMORY[0x24BEDD188](a1);
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x24BEDD2A0](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x24BEDD2A8](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDD2B0](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDD2B8](a1);
}

id objc_retainBlock(id a1)
{
  return (id)MEMORY[0x24BEDD2C0](a1);
}

void objc_setProperty_atomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x24BEDD3D0](self, _cmd, newValue, offset);
}

void objc_setProperty_atomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x24BEDD3E0](self, _cmd, newValue, offset);
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x24BEDD408](self, _cmd, newValue, offset);
}

void objc_storeStrong(id *location, id obj)
{
  MEMORY[0x24BEDD410](location, obj);
}

int objc_sync_enter(id obj)
{
  return MEMORY[0x24BEDD438](obj);
}

int objc_sync_exit(id obj)
{
  return MEMORY[0x24BEDD440](obj);
}

id objc_unsafeClaimAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDD458](a1);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x24BDAF368](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x24BDAF398](oslog, type);
}

int sqlite3_bind_blob(sqlite3_stmt *a1, int a2, const void *a3, int n, void (__cdecl *a5)(void *))
{
  return MEMORY[0x24BEDDF48](a1, *(_QWORD *)&a2, a3, *(_QWORD *)&n, a5);
}

int sqlite3_bind_double(sqlite3_stmt *a1, int a2, double a3)
{
  return MEMORY[0x24BEDDF58](a1, *(_QWORD *)&a2, a3);
}

int sqlite3_bind_int(sqlite3_stmt *a1, int a2, int a3)
{
  return MEMORY[0x24BEDDF60](a1, *(_QWORD *)&a2, *(_QWORD *)&a3);
}

int sqlite3_bind_int64(sqlite3_stmt *a1, int a2, sqlite3_int64 a3)
{
  return MEMORY[0x24BEDDF68](a1, *(_QWORD *)&a2, a3);
}

int sqlite3_bind_null(sqlite3_stmt *a1, int a2)
{
  return MEMORY[0x24BEDDF70](a1, *(_QWORD *)&a2);
}

int sqlite3_bind_text(sqlite3_stmt *a1, int a2, const char *a3, int a4, void (__cdecl *a5)(void *))
{
  return MEMORY[0x24BEDDF98](a1, *(_QWORD *)&a2, a3, *(_QWORD *)&a4, a5);
}

int sqlite3_busy_timeout(sqlite3 *a1, int ms)
{
  return MEMORY[0x24BEDDFF0](a1, *(_QWORD *)&ms);
}

int sqlite3_clear_bindings(sqlite3_stmt *a1)
{
  return MEMORY[0x24BEDE008](a1);
}

int sqlite3_close_v2(sqlite3 *a1)
{
  return MEMORY[0x24BEDE018](a1);
}

const void *__cdecl sqlite3_column_blob(sqlite3_stmt *a1, int iCol)
{
  return (const void *)MEMORY[0x24BEDE020](a1, *(_QWORD *)&iCol);
}

int sqlite3_column_bytes(sqlite3_stmt *a1, int iCol)
{
  return MEMORY[0x24BEDE028](a1, *(_QWORD *)&iCol);
}

int sqlite3_column_count(sqlite3_stmt *pStmt)
{
  return MEMORY[0x24BEDE038](pStmt);
}

double sqlite3_column_double(sqlite3_stmt *a1, int iCol)
{
  double result;

  MEMORY[0x24BEDE048](a1, *(_QWORD *)&iCol);
  return result;
}

int sqlite3_column_int(sqlite3_stmt *a1, int iCol)
{
  return MEMORY[0x24BEDE050](a1, *(_QWORD *)&iCol);
}

sqlite3_int64 sqlite3_column_int64(sqlite3_stmt *a1, int iCol)
{
  return MEMORY[0x24BEDE058](a1, *(_QWORD *)&iCol);
}

const char *__cdecl sqlite3_column_name(sqlite3_stmt *a1, int N)
{
  return (const char *)MEMORY[0x24BEDE060](a1, *(_QWORD *)&N);
}

const unsigned __int8 *__cdecl sqlite3_column_text(sqlite3_stmt *a1, int iCol)
{
  return (const unsigned __int8 *)MEMORY[0x24BEDE068](a1, *(_QWORD *)&iCol);
}

int sqlite3_column_type(sqlite3_stmt *a1, int iCol)
{
  return MEMORY[0x24BEDE078](a1, *(_QWORD *)&iCol);
}

sqlite3 *__cdecl sqlite3_db_handle(sqlite3_stmt *a1)
{
  return (sqlite3 *)MEMORY[0x24BEDE0D8](a1);
}

const char *__cdecl sqlite3_errmsg(sqlite3 *a1)
{
  return (const char *)MEMORY[0x24BEDE108](a1);
}

int sqlite3_exec(sqlite3 *a1, const char *sql, int (__cdecl *callback)(void *, int, char **, char **), void *a4, char **errmsg)
{
  return MEMORY[0x24BEDE118](a1, sql, callback, a4, errmsg);
}

int sqlite3_finalize(sqlite3_stmt *pStmt)
{
  return MEMORY[0x24BEDE140](pStmt);
}

int sqlite3_open_v2(const char *filename, sqlite3 **ppDb, int flags, const char *zVfs)
{
  return MEMORY[0x24BEDE1C0](filename, ppDb, *(_QWORD *)&flags, zVfs);
}

int sqlite3_prepare_v2(sqlite3 *db, const char *zSql, int nByte, sqlite3_stmt **ppStmt, const char **pzTail)
{
  return MEMORY[0x24BEDE1D0](db, zSql, *(_QWORD *)&nByte, ppStmt, pzTail);
}

int sqlite3_reset(sqlite3_stmt *pStmt)
{
  return MEMORY[0x24BEDE1E0](pStmt);
}

const char *__cdecl sqlite3_sql(sqlite3_stmt *pStmt)
{
  return (const char *)MEMORY[0x24BEDE2A0](pStmt);
}

int sqlite3_step(sqlite3_stmt *a1)
{
  return MEMORY[0x24BEDE2A8](a1);
}

int sqlite3_table_column_metadata(sqlite3 *db, const char *zDbName, const char *zTableName, const char *zColumnName, const char **pzDataType, const char **pzCollSeq, int *pNotNull, int *pPrimaryKey, int *pAutoinc)
{
  return MEMORY[0x24BEDE2D0](db, zDbName, zTableName, zColumnName, pzDataType, pzCollSeq, pNotNull, pPrimaryKey);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x24BDAFEF0](__s1, __s2);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x24BDAFF40](__s);
}

unint64_t strtoul(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x24BDB0030](__str, __endptr, *(_QWORD *)&__base);
}

int usleep(useconds_t a1)
{
  return MEMORY[0x24BDB02E8](*(_QWORD *)&a1);
}

size_t wcslen(const __int32 *a1)
{
  return MEMORY[0x24BDB04D0](a1);
}

